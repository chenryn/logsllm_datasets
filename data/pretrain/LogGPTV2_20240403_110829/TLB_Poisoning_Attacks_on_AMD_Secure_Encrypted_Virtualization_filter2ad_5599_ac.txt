switch of these two vCPUs. We use two examples to show how this
may be exploited to breach the integrity and the confidentiality of
the victim process.
4.2.1 TLB Poisoning. We first show that by poisoning TLB entries,
the attacker process can alter the execution of the victim process.
The attack is illustrated in Figure 1.
• Step-I: The victim process is suspended before executing an
instruction at address VA0. This can be achieved by manipulating
PTEs to trigger NPFs. Note that the content of this instruction is
not relevant to this attack.
• Step-II: The hypervisor schedules the attacker vCPU to the same
logical core as the victim vCPU, and the TLB control field is set
to TLB_CONTROL_FLUSH_ASID (03h) to flush the TLB entries
with the SEV VM’s ASID.
• Step-III: It then instructs the attacker process to run an in-
struction sequence “mov $0x2021, %rax; CPUID” also at address
VA0. The CPUID instruction will trigger a VMEXIT. During the
VMEXIT, the attacker vCPU is paused, and the victim vCPU is
scheduled to run without flushing the TLB entries.
• Step-IV: When the victim process executes the instruction at
VA0, a VMEXIT due to CPUID can be observed with the %rax value
set to 0x2021 in the GHCB. This means the victim process has
been successfully tricked to execute the same instruction as the
attacker process at VA0, because it reuses the TLB entry poisoned
by the attacker process.
Secret Leaking. The second example shows that the attacker
4.2.2
process can read the victim process’s memory space directly.
• Step-I: The attacker process uses mmap() syscall to pre-map a
data page such that the virtual address VA0 points to a data region
on this page.
• Step-II: The victim process is scheduled to run and accesses the
memory at address VA0, which can be either a instruction fetch
or a data load. This step loads a TLB entry into the TLB.
• Step-III: The victim vCPU is de-scheduled by the hypervisor,
and the attacker vCPU is scheduled to run on the same logical core.
The hypervisor sets the TLB control field of the attacker’s VMCB
to TLB_CONTROL_DO_NOTHING (00h), such that no TLB entry
is flushed.
• Step-IV: After being scheduled to run and loading data from
VA0, we observe that the attacker process successfully loads the
data from the victim’s address space, compromising the victim’s
confidentiality. This is because the TLB entries created by the
victim process is reused by the attacker process.
4.3 TLB Misuse within the Same vCPU
When the victim VM has only one vCPU, the attacker process shares
the vCPU with the victim process. In this case, TLB misuse is less
straightforward. The TLB flush rules we illustrated in Section 3.3
suggest that the hardware will automatically flush the entire TLB
tagged by the victim VM vCPU’s ASID when there is an internal
context switch in the guest VM, which leaves no chance for the
hypervisor to skip the TLB flush. As such, the hypervisor cannot
directly misuse the TLB entries between two processes within the
same vCPU. To address this challenge, we propose a novel VMCB-
switching approach to bypass the hardware-enforced TLB flush
during the internal context switch.
4.3.1 Bypassing Hardware-enforced TLB Flushes. The key to by-
passing the hardware-enforced TLB flush is to reserve the attacker
process’s TLB entries on one CPU core and then migrate the vCPU
to another CPU core. The internal context switch between the
victim process and the attacker process is then performed on the
second CPU core, which automatically flushes all TLB entries on
the second logical core. Because the hypervisor isolates the first
CPU core to prevent other processes from evicting its TLB entries,
the TLB entries of the attacker processes are hence preserved. The
hypervisor then migrates the vCPU back, with the victim process
executing on it. The victim process will then misuse the TLB entries
poisoned by the attacker process.
The challenges for bypassing the hardware-enforced TLB flush
are two-fold: First, changing the vCPU affinity inside the victim VM
leads to TLB flush for both the victim and attacker processes, which,
nevertheless, can only be done by a privileged process. Secondly,
changing the CPU affinity outside the victim VM—from the hyper-
visor side—may easily evict the reserved TLB entries. Thus, tradi-
tional CPU schedule methods like taskset or sched_setaffinity
cannot work in our case.
4.3.2 VMCB Switching. The following VMCB-switching approach
can be used to bypass the hardware-enforced TLB flushes (shown
in Figure 2).
• Step-I: The hypervisor first isolates the target vCPU hosted in
a hypervisor process HP1 on logical core LC1 and prevents other
processes from accessing LC1, as well as its co-resident logical core
on the same physical core. The hypervisor also reserves another
logical core LC2 with an idle hypervisor process HP2. This is to
ensure irrelevant processes will not evict the reserved TLB entries.
• Step-II: After the attacker process poisons the targeted TLB en-
tries, the hypervisor traps the vCPU into a yield() loop during
one VMEXIT. Meanwhile, the hypervisor lets the idle process
HP2 on LC2 to resume the attacker vCPU using its VMCB, VMSA
pointer, and NPT structures. This is possible because all states of
the attacker vCPU (e.g., registers, ASID, Nested CR3) are stored in
the DRAM, encrypted using either hypervisor’s memory encryp-
tion key (e.g., VMCB, NPT) or the guest VM’s VM encryption key
(e.g., VMSA). After resuming the attacker vCPU on LC2, there are
no valid TLB entries on LC2, but the attacker process inside the
attacker vCPU can continue execution after page table walks.
• Step-III: The hypervisor traps and traces gCR3 changes to moni-
tor the internal context switches on the attacker vCPU. Specifically,
it intercepts TRAP_CR3_WRITE VMEXIT and extract the gCR3
value in the EXITINFO1 field of VMCB. Since the inner context
613ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Mengyuan Li, Yinqian Zhang, Huibo Wang, Kang Li, and Yueqiang Cheng
covert channel so that network communication is not required. The
adversary-controlled process may execute CPUID instructions to
receive data or pass the data to the hypervisor. Specifically, to send
data to the hypervisor, the attacker process may trigger a CPUID
with a reserved RAX value (e.g., 1234) to initiate data transfer. The
attacker process then repeatedly triggers CPUID with RAX filled
with the data to be transferred. Similarly, to receive data from the
hypervisor, the attacker process can trigger a CPUID with another
reserved RAX value (e.g., 1235). The hypervisor retrieves the value
of RAX and passes the data into GHCB’s RAX field before VM-
RUN. The attacker process can then read the value of RAX after
the CPUID instruction. Data received from the covert channel can
use used as commands; the attacker process performs pre-defined
actions (e.g., mmap memory page and read certain virtual address)
in accordance with the command received. On our testbed, the max-
imum transmission speed is 1.854MB/s when using the 8-byte RAX
register for data transmission. Other covert channels that make use
of cache timing [24, 25] or AMD’s way predictor [23] can also be
adopted as covert channels, but are less robust.
5 TLB POISONING WITH ASSISTING
PROCESSES
In this section, we introduce the first variant of TLB Poisoning at-
tacks, which is assisted by an unprivileged attacker process running
in the victim VM. Following the threat model described in Section 4,
we assume the attacker process is unprivileged with limited access
to system resources, such as procfs, networking, or any privileged
system capabilities. This is practical either when the adversary has
an unprivileged user account on the victim VM or an application
with security vulnerabilities remotely exploitable by the adversary.
To simplify the attack, we assume the ASLR is disabled on the vic-
tim VM or the attacker process can learn the virtual memory area
(VMA) of the victim process. In a real attack, the attacker process
can break the ASLR either by CROSSLINE attack or other existing
methods [6, 13, 21].
5.1 Case Study: OpenSSH
In this case study, we show that with the help of an unprivileged
attacker process within a guest VM, the adversary can poison the
TLB entries of a privileged victim process and then control its
execution. The attack is applied to OpenSSH and used to bypass
password authentication.
5.1.1 OpenSSH’s Process Management. The sshd daemon process
(denoted Pd) is launched during system boot. The daemon process
runs in the background and listens to connections on SSH ports
(i.e., 22). Its address space is defined in the kernel by the VMA
data structures. Upon receiving a connection, Pd forks a sshd child
process Pc, which performs a privilege separation (or privsep) by
spawning another unprivileged process Pn to deal with the net-
work transmission and keeps the root privilege itself to act as a
monitoring process. Once the user has successfully authenticated,
Pn is terminated, and a new process Pu is created under the new
user’s username. In our TLB Poisoning Attack, the victim process is
the privileged child sshd process Pc and the attacker process aims
to poison the TLB entries of Pc.
(a) VMCB switching steps.
(b) Step-II: Change vCPU’s CPU affinity without TLB
flush.
Figure 2: VMCB switching.
switch happens on LC2, no hardware-enforced TLB flush is trig-
gered on LC1, and thus the attacker process’s TLB entries are
preserved on LC1.
• Step-IV: After observing a context switch from the attacker pro-
cess to the victim process is scheduled, the hypervisor switches the
attacker vCPU back to LC1 following a similar method described
in Step-II. The hypervisor stops HP2 on LC2 and releases HP1 on
LC1 from the empty loop.
• Step-V: After resuming execution on LC1, the victim process first
tries to execute its next instruction pointed by RIP in VMSA via a
TLB lookup. The preserved TLB entries on LC1 are unconditionally
trusted by the hardware. After the victim process has used the
attacker’s TLB entries to execute instructions, some remaining
TLB entries belonging to the attacker process may potentially
disturb the execution of the victim process afterwards. Thus, the
hypervisor can choose to perform a total TLB flush.
Note that the attacker process and the hypervisor can also breach
the confidentiality of the victim process in a reversed way, where
the hypervisor reserves the victim process’s TLB entries and let the
attacker process to reuse it to exfiltrate secrets from the victim’s
address space.
4.4 CPUID-based Covert Channel
The third primitive we build is for transmitting data between the
hypervisor and the attacker process in the victim VM that is un-
der the adversary’s control. To do so, we build a CPUID-based
CPUCore1AtkProcessVicProcessContextSwitchVMCBSwitchCPUCore2TargetvCPUVicProcessASIDVA0sPA0ASIDVA1sPA1TargetvCPUAtkProcessStep-ⅠStep-ⅡStep-ⅢStep-ⅣStep-ⅤCPUCore1yield()HostProcess1VMCBVMSANPTDRAMTargetvCPUCPUCore2SleepHostProcess2TargetvCPUVMEXITSaveStatesVMRUNFetchStatesAtkProcessAtkProcess614TLB Poisoning Attacks on AMD Secure Encrypted Virtualization
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
5.1.2 Password Authentication Bypass. The adversary first initial-
izes a SSH connection to the target VM and monitors gCR3 changes
by setting the CR3_WRITE_TRAP intercept bit in its VMCB. When
the SSH packet from the adversary is received by the SEV-ES VM,
the adversary will immediately observe a context switch (i.e., gCR3
change). The new process to run is the sshd child process Pc. In
this way, the adversary can identify the gCR3 of Pc.
➀ Locate the shared library. The attacker process first helps the
adversary to locate the gPA of the shared library. In our attack, we
target at pam_authenticate(), which is a function of the shared
library libpam.so.0 and used by sshd for password authentica-
tion. pam_authenticate() returns 0 if the authentication succeeds.
The adversary can use the attacker process to help locate the gPA
of pam_authenticate() (denoted gPApam). He first synchronizes
with the two colluding entities using the covert channel described in
Section 4.4 and then calls pam_authenticate() from the attacker
process. The hypervisor can learn gPApam by triggering NPFs.
➁ Track the victim’s execution. The adversary clears the Present
bit of all pages and monitors NPFs after intercepting his SSH packet
with the incorrect password. If a NPF of gPApam is observed, the
adversary knows the victim process is going to authenticate the
password by calling pam_authenticate(). The adversary then
pauses the victim process by trapping the victim in the gPApam
NPF handler. This is used to provide a time window for the attacker
process to poison the TLB entries. Note that this step is rather
important in real attacks. The attacker process needs to poison
the TLB entries right before the victim process accessing those
poisoned TLB entries. Otherwise, the poisoned TLB entries may be
evicted by other activities.
➂ Poison TLB entries. The adversary can then poison the TLB
entries of the victim. Let the virtual address of the instruction page
containing pam_authenticate() in Pc be gVApam. We assume the
adversary can learn gVApam in advance. gVApam is predictable
if ASLR is disabled. The adversary can also learn gVApam using
existing attack methods [6, 13, 21]. The adversary targets at poison-
ing the TLB entries indexed by gVApam. Specifically, the attacker
process first mmap a page with the virtual address to be gVApam.
Note that gVApam is only used in Pc and the attacker process can
assign this virtual address to a new instruction page. The attacker
process then copies the same instruction page as the victim into the
new page, but replaces a few instructions of pam_authenticate
(offset 0x5b0 - 0x65f of the binary, starting with test %rdi %rdi)
with mov $0 %eax and ret (0xb8 0x00 0x00 0x00 0x00 0xc3). The
adversary also schedules the attacker process to the same logical
core as the victim process by changing the CPU affinity of the vCPU.
The attacker process then repeatedly accesses this instruction page
in a loop to preserved the TLB entries.
➃ Bypass authentication. After the attacker process poisons the
TLB entries of pam_authenticate(), the adversary directly re-
sumes Pc without a TLB flush. Recall in step ➁, Pc was paused
before a page table walk to resolve gPApam. The adversary re-
sumes Pc without handling this page table walk in order to force
Pc to reuse the poisoned TLB entries. In this way, when Pc calls
pam_authenticate(), it will execute the instruction in the at-