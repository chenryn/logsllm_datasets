New Phishing Attacks Exploiting OAuth 
Authorization Flows
August 7, 2021
Jenko Hwong
PI:EMAIL
@jenkohwong
$ az ad signed-in-user show
[
  {
    "jobTitle":   "Researcher",
    "department": "Threat Research Labs",
    "company":    "Netskope, Inc.",
    "email":      "PI:EMAIL"
    "twitter":    "@jenkohwong",
    "background": "vulnerability scanning, AV/AS, pen-testing/exploits,
  L3/4 appliances, threat intel, windows security",
  }
]
Phishing Evolution: smtp, fake domain, ssl cert, user/pwd
in the beginning...
Phishing Evolution: apps, fake domain, ssl cert, user/pwd
fake website
phish
browse, auth
steal
username
password
victim
1
2
3
smtp, sms, IM, chat...
http(s)
attacker
+mobile
Phishing Evolution: apps, fake domain, ssl cert, user/pwd
fake website 
hosted in 
cloud
phish
browse, auth
victim
1
2
smtp, sms, IM, chat...
http(s)
attacker
steal
username
password
3
+cloud
fake website 
hosted in 
cloud
phish
browse, auth
victim
1
2
smtp
http(s)
attacker
steal
username
password
3
+cloud
Phishing Evolution: apps, fake domain, ssl cert, user/pwd
Phishing Evolution: fake domain, apps, ssl cert, user/pwd
fake website
phish
browse, auth
steal
username
password
victim
1
2
3
smtp, sms, IM, chat...
http(s)
attacker
controls
MFA
IP allow policies
link analysis (domain/URLs/certs)
sender reputation
link analysis (domain/URLs/certs)
content inspection (creds)
Phishing Evolution: OAuth 2.0 auth code grant[1]
+cloud app authorization
Application
(client, device)
User
Azure AD
Google Identity
Identity Platform
1
2
3
Authenticate and Authorize
Authenticate (MFA)
Authorize permissions (scopes)
OAuth Tokens
access token
refresh token
Request Authorization
Request permissions (scopes)
Redirect user to Identity Platform 
(authorization service)
[1] https://datatracker.ietf.org/doc/html/rfc6749#page-24
Phishing Evolution: OAuth 2.0 auth code grant
+cloud app authorization: Payments
Phishing Evolution: OAuth 2.0 auth code grant
+cloud app authorization: Payments
Phishing Evolution: OAuth 2.0 auth code grant
+cloud app authorization: Payments
$ gcloud auth login PI:EMAIL --launch-browser --force
Your browser has been opened to visit:
https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=32555940559.apps.goo
gleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A8085%2F&scope=openid+https%3A%2F%2
Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud
-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googl
eapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth&state=
IMWlTK5Vlfab5gl4hKrleOxsylObop&access_type=offline&code_challenge=gU8ezZryqHCwAPyai2OLKaU-i
PvbR62biGjQgGV6IRE&code_challenge_method=S256
Phishing Evolution: OAuth 2.0 auth code grant
+cloud app authorization: GCP CLI
Phishing Evolution: OAuth 2.0 auth code grant
+cloud app authorization: GCP CLI
+cloud app authorization: GCP CLI
Phishing Evolution: OAuth 2.0 auth code grant
+cloud app authorization: GCP CLI
Phishing Evolution
$ gcloud auth login PI:EMAIL --launch-browser --force
Your browser has been opened to visit:
https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=32555940559.apps.goo
gleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A8085%2F&scope=openid+https%3A%2F%2
Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud
-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googl
eapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth&state=
IMWlTK5Vlfab5gl4hKrleOxsylObop&access_type=offline&code_challenge=gU8ezZryqHCwAPyai2OLKaU-i
PvbR62biGjQgGV6IRE&code_challenge_method=S256
You are now logged in as [PI:EMAIL].
$
Phishing Evolution: OAuth 2.0 auth code grant
+cloud app authorization: GCP CLI
Phishing Evolution: fake OAuth login
+cloud app authorization
Phishing Evolution: fake OAuth login, check creds
●
Real-time creds validation (APIs)[1]
●
Based on pass/fail, redirect user to 
valid domains (stealth, creds 
validation upfront)
[1] https://threatpost.com/office-365-phishing-attack-leverages-real-time-active-directory-validation/159188/
+cloud app authorization
Azure AD
Google Identity
Phishing Evolution: fake OAuth login, check creds
●
Real-time creds validation (APIs)[1]
●
Controls
○
MFA, IP allow policies
○
link analysis (domain/URLs/certs)
○
content inspection (creds)
○
sender reputation
+cloud app authorization
[1] https://threatpost.com/office-365-phishing-attack-leverages-real-time-active-directory-validation/159188/
Azure AD
Google Identity
Oauth tokens
{ "access_token": "ya29.a0ARrdaM9...",
  "refresh_token": "1//06S3lSKyEHY…",
  "scope": "https://www.googleapis...",
  "expires_in": 3599,
  "token_type": "Bearer"
}
Phishing Evolution: OAuth 2.0 auth code grant
+cloud app authorization protocol -- why do we care ?
Application
(client, device)
User
Azure AD
Google Identity
Identity Platform
Authenticate and Authorize
GET https://accounts.google.com/o/oauth2/v2/auth?
client_id=32555940559.apps.googleusercontent.com&
response_type=code&
scope=https://www.googleapis.com/auth/cloud-platform&
access_type=offline&redirect_uri=www.myapp.com:9000
(authenticate, MFA, consent to scopes)
Request oauth tokens
POST https://www.googleapis.com/oauth2/v4/token
client_id=32555940559.apps.googleusercontent....&
scope=https://www.googleapis.com/auth/cloud...&
client_secret=JqQXA298PB…&
code=AwABAAAAvPM1KaP…&
redirect_uri=www.myapp.com:9000
Login / Checkout / Install App
1
Redirect to Identity Platform
2
3
5
6
Redirect URL with Authorization Code
GET http://www.myapp.com:9000?
code=AwABAAAAvPM1KaP...
4
1. Hijack session tokens, not creds
2. REST APIs  remote exploit 
vs endpoint
1. Malicious registered application
2. Get user consent for wide 
scopes / permissions
Oauth tokens
{ "access_token": "ya29.a0ARrdaM9...",
  "refresh_token": "1//06S3lSKyEHY…",
  "scope": "https://www.googleapis...",
  "expires_in": 3599,
  "token_type": "Bearer"
}
Phishing Evolution: OAuth 2.0 illicit consent grants
+cloud app authorization protocol
Application
(client, device)
User
Azure AD
Google Identity
Identity Platform
Authenticate and Authorize
GET https://accounts.google.com/o/oauth2/v2/auth?
client_id=32555940559.apps.googleusercontent.com&
response_type=code&
scope=https://www.googleapis.com/auth/cloud-platform&
access_type=offline&redirect_uri=www.myapp.com:9000
(authenticate, MFA, consent to scopes)
Request oauth tokens
POST https://www.googleapis.com/oauth2/v4/token
client_id=32555940559.apps.googleusercontent....&
scope=https://www.googleapis.com/auth/cloud...&
client_secret=JqQXA298PB…&
code=AwABAAAAvPM1KaP…&
redirect_uri=www.myapp.com:9000
3
5
6
Redirect URL with Authorization Code
GET http://www.myapp.com:9000?
code=AwABAAAAvPM1KaP...
4
Login / Checkout / Install App
1
2 Redirect to Identity Platform
Phishing Evolution: OAuth 2.0 illicit consent grants[1]
[1] https://www.bleepingcomputer.com/news/security/phishing-attack-hijacks-office-365-accounts-using-oauth-apps/
[2] https://docs.microsoft.com/en-us/azure/active-directory/develop/application-consent-experience
+cloud app authorization protocol
[2]
1. Malicious registered application
2. Get user consent for wide 
scopes / permissions
Controls
1.
Prevent users from 
registering apps in AD
2.
Prevent users from 
consenting
Phishing Evolution: OAuth 2.0 device code authorization[1]
what's the purpose? to provide easier authentication/authorization on limited input devices e.g. smart TVs
[1] https://datatracker.ietf.org/doc/html/rfc8628
“I think there's an RFC for that.”
which, when implemented, looks something like this on your TV
with the real sign-in on a computer or mobile phone
Unusability is the father of insecurity
Instruct user to login
on computer/smartphone
"1. Go to www.google.com/device
  2. Enter user code: ZLGG-LOSP"
Phishing Evolution: OAuth 2.0 device code authorization[1]
+cloud app authorization protocol
Device
(client, app)
User
Azure AD
Google Identity
Identity Platform
Authenticate and Authorize
1. Goes to www.google.com/device
2. Enters: ZLGG-LOSP
3. Authenticates, including MFA
Login
1
Get user/device codes
2
4
5
3
Retrieve
oauth tokens
client_id
device_code
[1] https://datatracker.ietf.org/doc/html/rfc8628
Demo: OAuth 2.0 device code authorization
●
Dr. Nestori Syynimaa: https://o365blog.com/post/phishing/
●
Usability => insecurity
●
A different auth flow => opportunity
●
Implementation quirks
User/device codes
{ "device_code": "AH-1NgM6boio...",
  "verification_url":
  "https://www.google.com/device",
  "user_code": "ZLGG-LQSP",
  "expires_in": 1800,
  "interval": 5
}
User code, verification URL
manual instructions:
"1. Go to www.google.com/device
  2. Enter: ZLGG-LOSP"
Oauth tokens
{ "access_token": "ya29.a0ARrdaM9...",
  "refresh_token": "1//06S3lSKyEHY…",
}
Phishing Evolution: OAuth 2.0 device code authorization
+cloud app authorization protocol
Device
(client, app)
User
Azure AD
Google Identity
Identity Platform
Authenticate and Authorize
1. Goes to www.google.com/device
2. Enters: ZLGG-LOSP
3. Authenticates, including MFA
Login
1
Get user/device codes
POST 
https://login.microsoftonline.com/comm
on/oauth2/devicecode?api-version=1.0
client_id=d3590ed6-52b3-4102-aeff-aad22
92ab01c&
resource=https://outlook.office365.com
3
2