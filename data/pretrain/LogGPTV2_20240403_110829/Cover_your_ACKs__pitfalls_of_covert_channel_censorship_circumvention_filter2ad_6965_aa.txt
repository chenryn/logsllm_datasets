title:Cover your ACKs: pitfalls of covert channel censorship circumvention
author:John Geddes and
Max Schuchard and
Nicholas Hopper
Cover Your ACKs: Pitfalls of Covert
Channel Censorship Circumvention
John Geddes
University of Minnesota
Minneapolis, MN 55404
PI:EMAIL
Max Schuchard
University of Minnesota
Minneapolis, MN 55404
PI:EMAIL
Nicholas Hopper
University of Minnesota
Minneapolis, MN 55404
PI:EMAIL
ABSTRACT
In response to increasingly sophisticated methods of blocking ac-
cess to censorship circumvention schemes such as Tor, recently
proposed systems such as Skypemorph, FreeWave, and Censor-
Spoofer have used voice and video conferencing protocols as “cover
channels” to hide proxy connections. We demonstrate that even
with perfect emulation of the cover channel, these systems can be
vulnerable to attacks that detect or disrupt the covert communica-
tions while having no effect on legitimate cover trafﬁc. Our attacks
stem from differences in the channel requirements for the cover
protocols, which are peer-to-peer and loss tolerant, and the covert
trafﬁc, which is client-proxy and loss intolerant. These differences
represent signiﬁcant limitations and suggest that such protocols are
a poor choice of cover channel for general censorship circumven-
tion schemes.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: Security and Pro-
tection
General Terms
Security
Keywords
Censorship;Anonymity;CensorSpoofer;FreeWave;SkypeMorph
1.
INTRODUCTION
Internet censorship has become a widespread issue as ISPs, often
under control of repressive governments, ﬁlter their users’ access
to the Internet. In response, users have employed proxy-based cir-
cumvention schemes, where clients connect to proxies (or chains
of proxies) that relay requests to the rest of the Internet, hiding
the clients’ true destinations. Censors have responded by employ-
ing increasingly sophisticated techniques, including protocol ﬁn-
gerprinting, deep packet inspection, and active probing, to identify
and block access to circumvention systems as well.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516742.
Recently, several circumvention systems have emerged that at-
tempt to use popular communication systems already in place as a
cover-protocol for anonymous communication. This allows for en-
crypted communication under the guise of legitimate trafﬁc, mak-
ing detection, enumeration, and blocking difﬁcult for potential cen-
sors. In this paper we examine three such systems with different
approaches. SkypeMorph [18] mimics Skype communication in an
effort to hide connections to Tor bridges, FreeWave [11] uses a mo-
dem to tunnel IP trafﬁc through a voice over IP (VoIP) session, and
CensorSpoofer [22] uses IP spooﬁng and asynchronous communi-
cation while mimicking VoIP.
Recently, Houmansadr, Brubaker and Shmatikov [9] have shown
that accurately mimicking a modern cover protocol can be chal-
lenging, listing several methods a censor could use to distinguish
CensorSpoofer and SkypeMorph trafﬁc from legitimate trafﬁc. It
is not hard to imagine improved versions of these systems that in-
teract directly with the cover-protocol system, replacing only en-
crypted contents with covert data, or using an approach similar to
FreeWave.
In this paper we demonstrate that even in this case, inherent prob-
lems can arise when using covert channels for censorship circum-
vention. These issues arise due to mismatches between the cover
protocol and the proxy protocol, and can violate both the unobserv-
ability and unblockability principles of anonymity systems, crucial
for censorship-resistant communication. We highlight three types
of mismatches:
• Architectural mismatches occur when the cover protocol and
the circumvention scheme have different communication ar-
chitectures, as when a peer-to-peer VoIP protocol is used as a
cover for a client-proxy architecture. These mismatches can
allow easy identiﬁcation of proxies and connections, leading
to dynamic blocking rules. An example is the FreeWave sys-
tem, which uses Skype supernodes as relays in an attempt to
hide the location of proxies; however, Skype clients use su-
pernodes only as a last resort, after attempting direct contact
with the destination of a call; thus attempting to contact a
FreeWave proxy node will reveal the IP address. We docu-
ment similar problems with SkypeMorph and CensorSpoofer
in section 5.
• Channel mismatches occur when the cover protocol and the
circumvention scheme have different requirements on the re-
liability of transmissions. For example, many VoIP and stream-
ing video protocols use UDP and are designed to tolerate
packet losses and duplication, whereas proxied TCP con-
nections require reliable transmission. This can lead to at-
tacks that allow a censor to drop or duplicate trafﬁc at a
level that is tolerable to the legitimate cover protocol but ren-
ders the covert channel useless. As an example, we show
361how an adversary can indeﬁnitely stall a Skypemorph trans-
fer while having no effect on the quality of voice calls by
dropping a handful of packets and delivering duplicate pack-
ets at a 5% rate, through targeted dropping of SkypeMorph
acknowledgement (ACK) packets. Similar problems in Cen-
sorSpoofer and FreeWave are documented in section 4.
• Content Mismatches occur when signiﬁcant differences be-
tween the content embedded in a covert channel and the ex-
pected contents cause noticeable differences in trafﬁc pat-
terns, even though the cover protocol is perfectly emulated.
For example, in section 6 we show that the audio signal of
a modem is sufﬁciently divergent from the audio signals of
human speech that a VoIP protocol (such as Skype) using
variable bit rate (VBR) encoding will generate easily distin-
guishable distributions on packet lengths for the two cases:
FreeWave over Skype generates length sequences with a dra-
matically lower variance than spoken language.
The rest of the paper is organized as follows. In Section 2 we re-
view previous anonymity systems and the issues surrounding them,
followed by a more complete discussion of SkypeMorph, Free-
Wave, and CensorSpoofer. Section 3 covers our experimental setup
for evaluating these schemes. In Section 4 we cover issues that all
three systems have in dealing with using an error tolerant channel
for reliable transmission. Following that Section 5 discusses the
pitfalls of using a peer to peer cover-protocol system for anony-
mous communication that is inherently built around a client-proxy
model. Section 6 focuses on FreeWave and problems that the sys-
tem has with cross-content delivery of IP trafﬁc over VoIP. Finally
we wrap up with discussion and conclusions in Section 7.
2. BACKGROUND AND RELATED WORK
Censorship circumvention systems attempt to provide users un-
restricted access to the Internet while staying hidden from a cen-
soring ISP. The main goals of these censorship-resilient systems
is to provide unobservability, whereby a censor is unable to tell
whether or not a client is participating in the system, and unblock-
ability meaning a censor cannot block access to the system without
also blocking access to the entire Internet or a popular service. One
common approach is to use encrypted tunnels through one or more
proxies in an attempt to hide the actual destination from censors, as
exempliﬁed by Tor [8], Anonymizer [3], and JAP [1]. These sys-
tems are vulnerable to attacks that enumerate and block the proxy
nodes, preventing users from accessing the system. To combat this
Tor introduced private bridge relays [7] whose information is un-
listed, and tightly access-controlled. Even under this restricted ac-
cess, it has been shown that bridges are vulnerable to enumera-
tion [17], and while methods were developed to prevent these tech-
niques [21], there is documented evidence of nations such as China
and Iran performing deep packet inspection on outgoing TLS con-
nections and successfully identifying Tor bridges [2].
Another class of censorship circumvention systems is decoy rout-
ing [12] schemes, such as Telex [27] and Cirripede [10]. Instead of
using proxies in an end-to-end manner, these systems use an end-
to-middle approach using decoy routers along the path of routers
forwarding packets to an unblocked end host. By using stegano-
graphic cryptography, a client can notify one of the intermediate
decoy routers to deﬂect a TLS connection to a covert destination,
providing an encrypted connection to the covert host unbeknownst
to the censor. In principle, these schemes make enumeration more
difﬁcult, since censors that identify a proxied connection can only
identify paths that contain decoy routers, and censors do not di-
rectly control the path a connection travels once it exits the cen-
sored ISP. However, as shown in [20], without extensive deploy-
ment, even small nations have enough resources to enumerate par-
ticipating routers via path intersection, and are able to successfully
route around and avoid decoy routers while cutting off a negligi-
ble amount of the overall Internet. Furthermore there exist several
mechanisms that allow a censor to detect clients using these sys-
tems, and even in some circumstances identify the actual covert
destination.
A third class of censorship-resilient systems attempt to use cover-
protocols to hide anonymous communication. Using popular cover-
protocols that censors would be hesitant to block gives these sys-
tems an avenue for embedding anonymous communication in ap-
parently legitimate cover trafﬁc. The remainder of this section will
cover the details of the three systems, SkypeMorph, FreeWave, and
CensorSpoofer, that are the focus of the remainder of this paper.
2.1 SkypeMorph
SkypeMorph [18] attempts to address the unobservability prob-
lem with Tor bridges, where large censors are able to utilize deep
packet inspection to ﬁngerprint TLS connections made to bridges
[2]. In order to connect to a bridge running SkypeMorph, a client
obtains the Skype ID of the bridge through some out of band chan-
nel. Once the identity is known, the SkypeMorph client uses the
Skype infrastructure to locate proxies and conduct the session setup,
utilizing chat functionality inside Skype to conduct key exchange
and negotiate a unique port at which to contact the SkypeMorph
bridge. Once this step has concluded, the client initiates a video
call directly to the SkypeMorph node, which reveals the bridge’s
IP address to the user. The SkypeMorph node detects the incom-
ing call, ignores it, and begins listening on the negotiated port for
data trafﬁc from the user. At this point the user ceases to use the
actual Skype client, and simply attempts to mimic one by sending
encrypted data through a trafﬁc shaper to make packet sizes and
sending times similar to trafﬁc from a Skype video call.
2.2 FreeWave
FreeWave [11] is a standalone censorship circumvention system
addressing both unobservability and unblockability. While similar
in concept to SkypeMoprh, FreeWave takes the mimicry of VoIP
calls a step further by actually sending IP trafﬁc over voice using
a virtual modem. In FreeWave, the user places a VoIP call to the
proxy server using Skype, a popular VoIP client. FreeWave users
call a publicly known Skype ID, relying on Skype’s native encryp-
tion to hide which ID they are calling. Proxy nodes are conﬁgured
to ignore direct incoming calls, forcing Skype to bridge the connec-
tion with the help of a super-node. From the censor’s perspective,
the user is either making a call to a random Skype node, or using the
random Skype node to bridge a call. Blocking the proxies will not
prevent the user from connecting to them, since they always con-
nect via a random intermediary. Data sent to and from the proxy is
modulated into sounds via a software modem, which in turn pipes
those sounds to a virtual sound card, which transmits them to the
proxy server via the Skype call.
2.3 CensorSpoofer
CensorSpoofer [22], proposed by Wang et al., attempts to avoid
detection by mimicking VoIP calls placed over the Session Initi-
ation Protocol (SIP) [19]. The key observation of CensorSpoofer
is that trafﬁc generated by web browsing is highly asymmetrical.
A small amount of trafﬁc, the HTTP request, is sent by the user
and a large volume of trafﬁc, the actual content, in turn ﬂows from
the server to the client. Thus in the CensorSpoofer architecture, the
client uses a possibly low bandwidth channel, an email message for
362example, to send a request to the proxy; the proxy then fetches the
content on behalf of the user. Meanwhile the user initiates a VoIP
call to a unique SIP ID which has been registered by the proxy for
that user only.
SIP IDs include both a user and a domain. In order to locate the
IP address which maps to a given SIP ID the user contacts the SIP
server in charge of the given domain. The server in turn contacts the
host running the given ID, which can respond with an IP address
it would like to be contacted at. In CensorSpoofer the proxy does
not respond with its own IP address, rather it selects a random host,
referred to as the dummy host, on the Internet which nmap [16]
does not show to be either off-line or have a closed SIP port. Since
VoIP data and SIP messages are commonly sent via UDP, the proxy
can spoof the IP address of the dummy host when sending subse-
quent SIP messages along with “call data” which will be delivered
to the client. Since the user never discovers the IP address of the
proxy, the censor cannot enumerate and block proxies by posing as
a user. The proxy then sends the the content it fetched on behalf of
the user by making it appear like encrypted VoIP data coming from
the dummy user by spooﬁng IP and UDP headers accordingly. The
client also sends junk data to the dummy host to complete the il-
lusion of a VoIP call between the user and the dummy host. The
dummy host ignores this junk data as it does not actually have a
VoIP call between itself and the user.
2.4 Mimicry Issues
As described in [18, 22], SkypeMorph and CensorSpoofer only
use the cover-protocol system for initialization, after which the
client and proxy communicate directly, outside the cover-protocol.
Houmansadr et al. [9] examined these schemes, along with Stego-
Torus [23], and found numerous inconsistencies and issues where
they did not properly mimic some part of the cover-protocol cor-
rectly, leading to easy detection by a censor, violating the goal of
unobservability. Common problems include failure to mimic side
protocols such as control channels, not correctly reacting to errors
like malformed or missing packets, and producing predictable pat-
terns not reﬂective of actual cover-protocol trafﬁc. Houmansadr et
al. thus argue that mimicry of this form is fundamentally ﬂawed,
since there are too many interdependent protocols and subsystems
to accurately mimic outside the cover-protocol system.
We argue that even if these ﬂaws are overcome by re-engineering
the systems to actively participate and embed data directly in the
cover protocol, as FreeWave does, the resulting schemes would still
be signiﬁcantly ﬂawed due to their use of cover protocols that do
not support the requirements of generic client-proxy interaction.
These ﬂaws lead directly to attacks violating both unobservability
and unblockability, as we describe in the remainder of this paper.
3. EXPERIMENTAL SETUP
This section brieﬂy covers the experimental setup for Skype-
Morph, FreeWave, and CensorSpoofer along with some of the met-
rics we’re interested in.
3.1 SkypeMorph
For the SkypeMoprh experiments, we extracted the code for the
packetizer module from SkypeMorph 1 and created a stand alone