*   `List findAll();`
*   `List findAll(Sort sort);`
*   `List findAll(Iterable ids);`
*   ` List save(Iterable entities);`
*   `T getOne(ID id);`
*   ` S save(S entity);`
*   ` Iterable save(Iterable entities);`
*   `T findOne(ID id);`
*   `boolean exists(ID id);`
*   `Iterable findAll();`
*   `Iterable findAll(Iterable ids);`
*   `long count();`
*   `void delete(ID id);`
*   `void delete(T entity);`
*   `void delete(Iterable entities);`
*   `void deleteAll();`
没有 SQL 编码，没有 JPA-QL 查询，什么都没有。只需扩展 Spring `JPARepository`接口，所有这些方法都在我们的掌握之中。当然，我们并不局限于此。我们可以在界面中声明自己的方法，比如`findByTitle(String title)`。它将在运行时被 Spring 捡起来，并且会根据它的标题为我们找到一本书。我强烈建议阅读 Spring Data 项目文档并进一步尝试；使用起来非常方便。直接从控制器使用`entity`存储库通常不是很好的做法，所以是时候提供图书服务了。这将是一个`BookService`界面，在`BookService.java`中定义:
```
package pl.finsys.example.service; 
import pl.finsys.example.domain.Book; 
import javax.validation.Valid; 
import javax.validation.constraints.NotNull; 
import java.util.List; 
public interface BookService { 
    Book saveBook(@NotNull @Valid final Book book); 
    List getList(); 
    Book getBook(Long bookId); 
    void deleteBook(final Long bookId); 
} 
```
在`BookServiceImpl.java`中，实现可以如下所示:
```
package pl.finsys.example.service; 
import org.springframework.beans.factory.annotation.Autowired; 
import pl.finsys.example.domain.Book; 
import pl.finsys.example.repository.BookRepository; 
import pl.finsys.example.service.exception.BookAlreadyExistsException; 
import org.slf4j.Logger; 
import org.slf4j.LoggerFactory; 
import org.springframework.stereotype.Service; 
import org.springframework.transaction.annotation.Transactional; 
import org.springframework.validation.annotation.Validated; 
import javax.validation.Valid; 
import javax.validation.constraints.NotNull; 
import java.util.List; 
@Service 
@Validated 
public class BookServiceImpl implements BookService { 
    private static final Logger LOGGER = LoggerFactory.getLogger(BookServiceImpl.class); 
    private final BookRepository repository; 
    @Autowired 
    public BookServiceImpl(final BookRepository repository) { 
        this.repository = repository; 
    } 
    @Override 
    @Transactional 
    public Book saveBook(@NotNull @Valid final Book book) { 
        LOGGER.debug("Creating {}", book); 
        Book existing = repository.findOne(book.getId()); 
        if (existing != null) { 
            throw new BookAlreadyExistsException( 
                    String.format("There already exists a book with id=%s", book.getId())); 
        } 
        return repository.save(book); 
    } 
    @Override 
    @Transactional(readOnly = true) 
    public List getList() { 
        LOGGER.debug("Retrieving the list of all users"); 
        return repository.findAll(); 
    } 
    @Override 
    public Book getBook(Long bookId) { 
        return repository.findOne(bookId); 
    } 
    @Override 
    @Transactional 
    public void deleteBook(final Long bookId) { 
        LOGGER.debug("deleting {}", bookId); 
        repository.delete(bookId); 
    } 
} 
```
前面的清单展示了`BookService`的实现。注意，我们已经在构造函数中注入了`BookRepository`。所有的实现方式，如`saveBook()`、`getBook()`、`deleteBook()`、`getList()`都会使用注入的`BookRepository`对数据库中的图书实体进行操作。最后一个类的时间到了，这个实际的控制器将把前面所有的类连接在一起。
# 静止控制器
REST 控制器定义服务将要响应的 URI 路径。它声明了每个控制器方法应该响应的路径和相应的`HTTP`方法。我们使用注释来定义所有这些。这种方法非常类似于泽西的 JAX-RS。我们的服务只有一个单一的`book`资源，所以首先我们只有一个控制器。它将是`BookController`类，在`BookController.java`中定义:
```
package pl.finsys.example.controller; 
import org.springframework.beans.factory.annotation.Autowired; 
import pl.finsys.example.domain.Book; 
import pl.finsys.example.service.BookService; 
import pl.finsys.example.service.exception.BookAlreadyExistsException; 
import org.slf4j.Logger; 
import org.slf4j.LoggerFactory; 
import org.springframework.http.HttpStatus; 
import org.springframework.web.bind.annotation.*; 
import javax.validation.Valid; 
import java.util.List; 
@RestController 
public class BookController { 
   private static final Logger LOGGER =     LoggerFactory.getLogger(BookController.class); 
private final BookService bookService; 
    @Autowired 
    public BookController(final BookService bookService) { 
        this.bookService = bookService; 
    } 
@RequestMapping(value = "/books", method = RequestMethod.POST, consumes={"application/json"}) 
    public Book saveBook(@RequestBody @Valid final Book book) { 
        LOGGER.debug("Received request to create the {}", book); 
        return bookService.saveBook(book); 
    } 
@RequestMapping(value = "/books", method = RequestMethod.GET, produces={"application/json"}) 
    public List listBooks() {             
        LOGGER.debug("Received request to list all books"); 
        return bookService.getList(); 
    } 
@RequestMapping(value = "/books/{id}", method = RequestMethod.GET, produces={"application/json"}) 
    public Book singleBook(@PathVariable Long id) { 
        LOGGER.debug("Received request to list a specific book"); 
        return bookService.getBook(id); 
    } 
@RequestMapping(value = "/books/{id}", method = RequestMethod.DELETE) 
    public void deleteBook(@PathVariable Long id) { 
        LOGGER.debug("Received request to delete a specific book"); 
        bookService.deleteBook(id); 
    } 
    @ExceptionHandler 
    @ResponseStatus(HttpStatus.CONFLICT) 
   public String handleUserAlreadyExistsException(BookAlreadyExistsException e) { 
        return e.getMessage(); 
    } 
} 
```
如您在前面的示例中所见，该类使用`@RestController`注释进行了注释。事实上，这就是它成为控制器的原因。事实上，这是一个方便的注释，它本身带有`@Controller`和`@ResponseBody`注释。`@Controller`表示带注释的类是控制器(web 控制器)，也允许通过 Spring 的类路径扫描自动检测实现类。控制器中应该响应特定 URI 调用的每个方法都映射了`@RequestMapping`注释。`@RequestMapping`取参数，最重要的有:
*   `value`:会指定 URI 路径
*   `method`:指定要处理的`HTTP`方法
*   `headers`:映射请求的头部，格式为`myHeader=myValue`。只有当发现传入的请求头具有给定值时，方法才会使用 headers 参数处理请求
*   `consumes`:指定映射请求可以使用的媒体类型，如`"text/plain"`或`"application/json"`。这可以是媒体类型的列表，例如:`{"text/plain", "application/json"}`