# 短网址应用
> 原文：
让我们使用 flask 构建一个非常简单的 URL 缩短应用，并尝试整合开发过程的所有方面，包括可靠性方面。我们将不会建立用户界面，我们将拿出一个最小的 API 集，这将足以让应用运行良好。
## 设计
我们不直接跳到编码。我们做的第一件事是收集需求。想出一个办法。让同行评审方法/设计。演进、迭代、记录决策和权衡。然后最终实现。虽然我们不会在这里完成完整的设计文档，但我们会在这里提出一些对设计很重要的问题。
### 1.高级操作和 API 端点
由于这是一个 URL 缩短应用，我们将需要一个 API 来生成缩短链接给定一个原始链接。以及接受缩短链接并重定向到原始 URL 的 API/端点。我们不包括应用的用户方面，以保持事情最少。这两个 API 应该使任何人都可以使用应用。
### 2.怎么缩短？
给定一个 url，我们将需要生成它的一个缩短版本。一种方法是为每个链接使用随机字符。另一件可以做的事情是使用某种散列算法。这里的好处是，我们将对相同的链接重用相同的散列。例如:如果很多人都在缩短`https://www.linkedin.com`，那么他们都将有相同的值，相比之下，如果选择随机字符，数据库中会有多个条目。
哈希冲突怎么办？即使在随机字符方法中，尽管概率较小，哈希冲突也可能发生。我们需要留意它们。在这种情况下，我们可能希望在字符串前/后添加一些随机值以避免冲突。
此外，哈希算法的选择也很重要。我们需要分析算法。它们的 CPU 需求和特性。选一个最适合的。
### 3.URL 有效吗？
给定一个要缩短的 URL，我们如何验证该 URL 是否有效？我们甚至验证或确认了吗？可以完成的一个基本检查是查看 URL 是否匹配 URL 的正则表达式。为了更进一步，我们可以尝试打开/访问网址。但是这里有一些问题。
1.  我们需要定义成功的标准。即:HTTP 200 表示有效。
2.  私有网络中的 URL 是什么？
3.  URL 暂时宕机怎么办？
### 4.储存；储备
最后是存储。随着时间的推移，我们将在哪里存储我们将生成的数据？有多种数据库解决方案可供选择，我们需要选择最适合该应用的解决方案。像 MySQL 这样的关系数据库将是一个公平的选择，但**一定要检查 SRE 学院的 [SQL 数据库部分](../../databases_sql/intro/)和 [NoSQL 数据库部分](../../databases_nosql/intro/)，以获得更深入的见解，做出更明智的决定。**
### 5.其他的
我们不考虑用户进入我们的应用和其他可能的功能，如速率限制，自定义链接等，但它最终会随着时间的推移。根据需求，它们也可能需要被合并。
下面给出了最少的工作代码供参考，但我鼓励你提出自己的代码。
```sh
from flask import Flask, redirect, request
from hashlib import md5
app = Flask("url_shortener")
mapping = {}
@app.route("/shorten", methods=["POST"])
def shorten():
    global mapping
    payload = request.json
    if "url" not in payload:
        return "Missing URL Parameter", 400
    # TODO: check if URL is valid
    hash_ = md5()
    hash_.update(payload["url"].encode())
    digest = hash_.hexdigest()[:5]  # limiting to 5 chars. Less the limit more the chances of collission
    if digest not in mapping:
        mapping[digest] = payload["url"]
        return f"Shortened: r/{digest}\n"
    else:
        # TODO: check for hash collission
        return f"Already exists: r/{digest}\n"
@app.route("/r/")
def redirect_(hash_):
    if hash_ not in mapping:
        return "URL Not Found", 404
    return redirect(mapping[hash_])
if __name__ == "__main__":
    app.run(debug=True)
"""
OUTPUT:
===> SHORTENING
$ curl localhost:5000/shorten -H "content-type: application/json" --data '{"url":"https://linkedin.com"}'
Shortened: r/a62a4
===> REDIRECTING, notice the response code 302 and the location header
$ curl localhost:5000/r/a62a4 -v
* Uses proxy env variable NO_PROXY == '127.0.0.1'
*   Trying ::1...
* TCP_NODELAY set
* Connection failed
* connect to ::1 port 5000 failed: Connection refused
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 5000 (#0)
> GET /r/a62a4 HTTP/1.1
> Host: localhost:5000
> User-Agent: curl/7.64.1
> Accept: */*
>
* HTTP 1.0, assume close after body
Redirecting...
Redirecting...
* Closing connection 0
You should be redirected automatically to target URL: https://linkedin.com.  If not click the link.
""" 
```