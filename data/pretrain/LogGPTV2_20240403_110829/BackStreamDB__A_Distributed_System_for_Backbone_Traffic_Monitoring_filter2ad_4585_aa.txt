# Title: BackStreamDB: A Distributed System for Real-Time Backbone Traffic Monitoring

## Authors:
- Christiano Lyra<sup>1</sup>
- Carmem S. Hara<sup>2</sup>
- Elias P. Duarte Jr.<sup>2</sup>

### Affiliations:
1. Brazilian Research Network (RNP) – Point of Presence at Parana State, P.O.Box 19037, 81531-990 Curitiba-PR, Brazil
2. Department of Informatics – Federal University of Parana, P.O.Box 19081, 81531-990 Curitiba-PR, Brazil

**Contact Information:**
- Email: {carmem, elias}@inf.ufpr.br

## Abstract
Monitoring the traffic of wide area networks (WANs) consisting of several autonomous systems (AS) connected through a high-speed backbone is challenging due to the massive volume of data. Traditional methods that rely on logging are unfeasible. This paper presents a distributed, real-time strategy for backbone traffic monitoring that does not require logs and allows for the collection of arbitrary metrics. The system, called BackStreamDB, uses a Stream Processing Engine (SPE) to process traffic sampled by distributed monitors. We describe the architecture, implementation, and deployment of BackStreamDB on a national backbone. Case studies and experiments demonstrate the system's flexibility and its ability to handle large volumes of traffic.

## 1. Introduction
Wide area networks (WANs) often consist of multiple Autonomous Systems (AS) interconnected via a high-speed backbone. Monitoring the overall network and individual components, particularly traffic, is crucial for network management tasks such as performance evaluation, security monitoring, and accounting. Traditional network management protocols, which use polling and alarms, do not scale well for large backbones.

One method to gather traffic information is using sniffers, which can capture and decode all network traffic. However, this approach is impractical for large backbones due to the overwhelming amount of data. Network vendors have developed protocols like NetFlow and sFlow to gather flow-level information. These protocols define a "flow" as a set of packets between two endpoints, each identified by an IP address and transport-layer port. While these tools are effective, they typically store flow data in secondary memory, which requires significant storage space and does not provide real-time analysis. Additionally, they offer a limited set of predefined metrics, necessitating custom scripts for additional monitoring, which still require log storage.

In this paper, we propose a distributed architecture that integrates Stream Processing Engines (SPEs) with flow monitoring tools. SPEs process continuous data streams in real time, making them suitable for large-scale backbones. Our system, BackStreamDB, allows network administrators to issue arbitrary queries about the traffic in real time without storing logs. Metrics are defined in a high-level SQL-like language, providing flexibility and extensibility. BackStreamDB has been tested on the Brazilian RNP backbone, demonstrating its feasibility and effectiveness.

## 2. An Architecture for Backbone Traffic Monitoring
The proposed architecture enables a network administrator to issue arbitrary queries to obtain traffic information from a multi-AS backbone. Data is collected from geographically distributed flow sources and processed in real time. The architecture includes three main components: acquisition modules, universal receiver (ureceiver), and global catalog.

- **Acquisition Modules:** Receive and convert flow data to a format compatible with the SPE.
- **Universal Receiver (Ureceiver):** Interfaces between the SPEs and visualization tools, and can store query results for historical purposes.
- **Global Catalog:** Stores information about ongoing queries, including their definitions and the SPE nodes executing them.

The system can be configured as either a fully distributed or centralized system. Ideally, acquisition modules and SPE nodes should be deployed close to the data sources to reduce the volume of data transmitted. Query results can be accessed in real time or stored, and query definitions are managed using a high-level query language.

### 2.1 BackStreamDB
BackStreamDB is a distributed monitoring system based on the proposed architecture. It uses Borealis as the SPE, which supports distributed deployment. The system processes NetFlow data using the New NetFlow Collector (NNFC) and a custom plugin for communication with Borealis.

Query results are sent to the ureceiver, which decodes and outputs them in text or graphical form. The query language is XML-based, and a query register tool manages the deployment of queries across different nodes.

#### Example Queries
- **Traffic Matrix:** Aggregates records by source and destination AS, summing up octets every 300 seconds.
- **Traffic Anomaly Detection:** Detects anomalies like port sweeps by filtering flows with a single packet and grouping them by source and destination IPs.

These examples demonstrate the system's flexibility and the expressive power of the query language.

## 3. Experimental Evaluation
To validate BackStreamDB, we conducted three experiments:

### Experiment 1: Single Node, Synthetic Traffic
This experiment involved a single node processing synthetic traffic to verify the correctness of BackStreamDB's results.

[Further details and results of the experiments would follow here.]

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.