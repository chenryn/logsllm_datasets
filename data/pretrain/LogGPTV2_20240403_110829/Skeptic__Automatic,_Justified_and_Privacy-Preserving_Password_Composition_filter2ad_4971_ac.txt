flow between tools.
The utility is parametric on a password probability distribution
derived from a real-world leaked password dataset. Password prob-
abilities are then redistributed according to a password composition
policy (interpreted by Authority), producing output distributions
under each supported macrobehaviour. Its architecture is modular,
allowing user-specified macrobehaviours to be plugged in with-
out any modification to the core of the tool. The Pyrrho plugin
corresponding to the proportional password reselection macrobe-
haviour from Section 3.3 is shown in Figure 10. Here, total is the
2We make Pyrrho available as open-source software:
https://github.com/sr-lab/pyrrho
Figure 8: A simplified overview of the logical flow of a run
of the Authority utility.
sum of all probabilities in the distribution before filtration (which
should be ≈ 1), surplus is the sum of the probabilities of all filtered
passwords, and df is the data frame representing the password
probability distribution to process.
Pyrrho additionally performs power-law curve fitting to the
altered password probability distributions in order to quantify their
uniformity (see Section 3.4), storing the resulting equations encoded
as JSON files alongside them. It is these JSON files that can be used
to compare and rank policies from the Pacpal DSL (see Section 4.3).
While Pyrrho is primarily designed to be used alongside pass-
word composition policies encoded in Coq using Authority, the
inter-process communication involved between the two utilities
makes processing large datasets a time-consuming process. For ap-
plications where the ability to reason about password composition
policies from within Coq is less important, Pyrrho also supports
Pure Python Mode, in which all dataset filtration with respect to
a password composition policy is kept within Pyrrho itself. The
result is a utility which runs on the order of 2.75 times faster (see
Section 5.1), but at the expense of the flexibility of password com-
position policy encoding and reasoning that comes with using
Authority, as Pure Python Mode supports only a limited set of
password composition policy rules.
Skeptic: Automatic, Justified and Privacy-Preserving Password Composition Policy Selection
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
# Load three equations produced by Pyrrho.
load linkedin-basic16-proportional.json as li_b16
load linkedin-2word16-proportional.json as li_2w16
load linkedin-3class12-proportional.json as li_3c12
# Assert that one policy is better than another.
assert li_2w16 better li_b16
# Build group to rank.
group linkedin_ranking
add li_b16 to linkedin_ranking as basic16
add li_2w16 to linkedin_ranking as 2word16
add li_3c12 to linkedin_ranking as 3class12
# Print group in ranked order (worst to best):
rank linkedin_ranking
Figure 11: A piece of example Pacpal code, demonstrating
ranking of policies based on fitted power-law equations.
assertion which will display an error to the user in the case that
this relationship does not hold. We employ Pacpal to produce the
rankings of all 28 password policies used in this study in Section 5.4.
5 EVALUATION
In this section, we demonstrate the validity of our approach by
replicating results from previous literature across different eval-
uation methodologies. Specifically, we use the Skeptic toolkit to
replicate results from the study by Shay et al. [31] that uses real par-
ticipants recruited via Amazon Mechanical Turk (see Section 5.2),
and the study by Weir et al. [36] that draws on large leaked pass-
word datasets (see Section 5.3). In Section 5.5, we demonstrate the
advantages of the Authority Coq metaprogramming utility (see
Section 4.1) by proving that certain policies confer immunity to
password guessing attacks by some common botnet worms from
within the proof assistant itself.
5.1 Experimental Setup
The password probability distribution processing (via Pyrrho) for
this experiment was conducted on a cluster of 14 cloud-based virtual
machines, each with 6 Intel® Xeon® CPUs at 1.80GHz, 16GB of
RAM and 320GB of hard disk space running 64-bit Ubuntu 18.04.3
(LTS). Times taken by Pyrrho to process each dataset studied in
this work under each policy and macrobehaviour we investigate
are shown in Table 2.
5.2 Replication of Results: Shay et al.
Shay et al. [31] ranked the effectiveness of 8 different password com-
position policies under a password guessing attack at two different
magnitudes—106 guesses and 1014 guesses. These two thresholds
are suggested by Florêncio et al. [15] as being representative of the
cutoff points of contemporary online (i.e. against a live service) and
offline (i.e. against a compromised password hash) guessing attacks
respectively. Passwords were chosen by humans under each policy
Figure 9: An overview of the function of Skeptic. Arrows
indicate the direction of data flow.
def reselect (total, surplus, df):
divisor = total - surplus
df['probability'] /= divisor
return df
Figure 10: The proportional password reselection macrobe-
haviour from Section 3.3 encoded in Python as a plugin for
Pyrrho.
4.3 Result Extraction: Pacpal
While the data produced by Pyrrho is ostensibly all we need to be
able to assess the relative security of password composition policies
under our assumptions, the nuance of this data is of comparatively
little interest to professionals working in an applied setting (system
administrators, for example).
Users such as this are likely to be far more interested in choosing
the most secure password composition policy for their use-case
than in the data itself. Pacpal3 is an assertion language permitting
power-law equations generated by Pyrrho to be loaded, named,
grouped, compared and ranked, and is designed to assist end-users
in putting Skeptic to work practically in their organisations, lever-
aging the well-documented usability benefit seen with domain-
specific languages when compared to their general-purpose coun-
terparts [2]. An example piece of Pacpal code is shown in Figure 11
in which three fitted power-law equation files produced by Pyrrho
are loaded, bound to names, added to a group and ranked. The
ranking will then be displayed to the user. Also present is a better
3We make Pacpal available as open-source software: https://github.com/sr-lab/skeptic-
lang
InputDistributionPyrrho (Python)Macrobehaviour plugins (×n)Authority (Coq)PolicyEquation nDistribution nEquation 1Distribution 1...PaCPALResults (policyrankings etc.)n output distributions andequations yielded per policyPaCPAL works using only theequation files yielded by PyrrhoASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
S. Johnson, J. F. Ferreira, A. Mendes, and J. Cordry
Table 2: Time taken for Pyrrho to process probability dis-
tributions for each of the datasets, policies and macrobe-
haviours investigated.
Table 4: Pearson correlation coefficients of percentage of
passwords cracked under different polices by Shay et al. [31]
at 1014 guesses against α-values yielded by Skeptic.
Dataset
Yahoo
Yahoo*
RockYou*
LinkedIn*
Time (s)
17,817
6,466
339,708
1,741,996
Uniq. passwords
337,168
337,168
14,308,965
60,489,959
Time/password
0.0528
0.0192
0.0237
0.0288
* Computed in Pyrrho’s pure Python mode for reasons of
performance.
Mode
Proportional
Convergent
Extraneous
Null
Yahoo
-0.661
0.882
-0.722
-0.550
RockYou
-0.591
-0.069
-0.689
-0.565
LinkedIn*
-0.929
0.615
-0.952
-0.884
¯ρ
-0.727
0.476
-0.788
-0.666
* Visualised in Figure 12.
using Amazon Mechanical Turk and the attack was multimodal
using both a trained, targeted probabilistic context-free grammar
(PCFG) [22, 37] and the Password Guessability Service (PGS) [33].
Table 3 contains an overview of these results.
Table 3: The results obtained by Shay et al. [31] for pass-
words collected under 8 different password composition
policies at both attack magnitudes.
106 guesses
1014 guesses
Policy
comp8
basic12
basic16
basic20
2word12
2word16
3class12
3class16
Cracked (%)
2.2
9.1
7.9
5.6
3.4
1.1
3.2
1.2
Rank
3
8
7
6
5
1
4
2
Cracked (%)
50.1
52
29.7
16.4
46.6
22.9
36.8
13.8
Rank
7
8
4
2
6
3
5
1
We attempted to replicate these results using the Skeptic toolkit.
For each of our 3 datasets, and each of the 4 studied macrobe-
haviours, we redistributed probability according to each policy in
Table 3. We then obtained the α values yielded by fitting power-
law curves to the resulting distributions using the methodology
described in Section 3.4. In order to quantify how closely our results
reflect the rankings from Shay et al. [31] we plotted the percentage
of passwords cracked under each policy in Shay et al. [31] against
the α-values we obtained using our methodology and calculated the
Pearson correlation coefficient ρ. A value closer to −1 indicates that
more uniform distributions (i.e. a less negative α-value) are more
strongly correlated with a lower percentage of cracked passwords
according to Shay et al. [31], while a value closer to 1 indicates the
opposite. A value of 0 indicates no correlation. The complete set
of correlation coefficients and their mean values across datasets ¯ρ
can be found in Table 4, while an example visualisation using the
LinkedIn dataset only is shown in Figure 12. Complete results are
shown in the Appendix (Table 11).
From Table 4, it is apparent that α-values for proportional, ex-
traneous and null macrobehaviours tend to correlate well with
the empirical results from Shay et al. [31]. Using thresholds pro-
posed by Evans [12], correlation strengths range from moderate
(0.40 ≤ |ρ| ≤ 0.59) to very strong (0.80 ≤ |ρ| ≤ 1.0) for each of
these macrobehaviours across all 3 datasets, with an average cor-
relation strength of strong (0.60 ≤ |ρ| ≤ 0.79). By contrast, the
convergent macrobehaviour tends to show a correlation in the op-
posite direction, with less uniform distributions being associated
with lower percentages of cracked passwords. This suggests the
Figure 12: Percentage of passwords cracked by Shay et
al. [31] at 1014 guesses against α-values yielded by Skeptic
for the LinkedIn dataset in each reselection mode.
convergent macrobehaviour is a poor model of how users actually
reselect passwords in response to password composition policies.
We found α-values yielded by Skeptic to correlate slightly less
closely with the percentage of passwords cracked by the smaller
online-range guessing attack from Shay et al. [31] (see Table 5 and
Figure 13). We imagine that this is due to the success of smaller
guessing attacks being more dependent on the dataset they are
performed against. It is also possible that the multimodal attack
employed by Shay et al. [31] is causing guessing attacks at lower
magnitudes to be more effective against passwords created under
different password composition policies than at higher magnitudes.
Table 5: Pearson correlation coefficients of percentage of
passwords cracked under different polices by Shay et al. [31]
at 106 guesses against α-values yielded by Skeptic.
Mode
Proportional
Convergent
Extraneous
Null
Yahoo
-0.866
0.217
-0.830
-0.684
RockYou
-0.676
-0.181
-0.808
-0.797
LinkedIn*
-0.149
0.615
-0.462
-0.558
¯ρ
-0.564
0.217
-0.700
-0.680
* Visualised in Figure 13.
The observation that the proportional, null and extraneous mac-
robehaviours offer a more accurate picture of user password rese-
lection than convergent reselection is encouraging, because each of
1520253035404550% Cracked at 1014 Guesses (Shay et al.)0.80.60.40.20.0 (Skeptic)proportionalconvergentextraneousnullSkeptic: Automatic, Justified and Privacy-Preserving Password Composition Policy Selection
ASIA CCS ’20, October 5–9, 2020, Taipei, Taiwan
password composition policy effectiveness, rather than collecting
passwords from humans themselves under those policies.
Table 6: An approximation of the results obtained by Weir et
al. [36] for passwords obtained under 12 different password
composition policies by filtering their target dataset.
Policy
basic7
basic8
basic9
basic10
upper7
upper8
upper9
upper10
symbol7
symbol8
symbol9
symbol10
5 × 104 guesses
Cracked (%)
26.06
23.16
18.98
13.85
13.89
10.71
7.71
5.72
6.92
5.57
4.76
3.28
Rank
12
11
10
8
9
7
6
4
5
3
2
1
This work, among other results, presents the percentage of pass-
words cracked at 50, 000 guesses under 4 different password length
thresholds (7, 8, 9 and 10) and 3 different character requirements
(none, at least one uppercase and at least one symbol). Both the
target passwords and the attack were drawn from separate subsets
of the same RockYou dataset [11] we make use of in this work. We
present an approximation of results from [36] in Table 6, obtained
using a plot digitiser4 from the visualisations in the work.
Table 7: Pearson correlation coefficients of password policy
ranks from [36] at 5 × 104 guesses against α-values yielded
by Skeptic.
Mode
Proportional
Convergent
Extraneous
Null
Yahoo
-0.884
0.686
-0.955
-0.953
RockYou
-0.916
-0.657
-0.951
-0.945
LinkedIn Mean
-0.895
-0.885
0.089
0.234
-0.969