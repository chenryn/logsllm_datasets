title:PERM: practical reputation-based blacklisting without TTPS
author:Man Ho Au and
Apu Kapadia
PERM: Practical Reputation-Based Blacklisting
without TTPs
School of Computer Science and Software
School of Informatics and Computing
Apu Kapadia
Indiana University
Bloomington, IN, USA
PI:EMAIL
Man Ho Au
Engineering
University of Wollongong
Wollongong, NSW, Australia
PI:EMAIL
ABSTRACT
Some users may misbehave under the cover of anonymity
by, e.g., defacing webpages on Wikipedia or posting vul-
gar comments on YouTube. To prevent such abuse, a few
anonymous credential schemes have been proposed that re-
voke access for misbehaving users while maintaining their
anonymity such that no trusted third party (TTP) is in-
volved in the revocation process. Recently we proposed
BLACR, a TTP-free scheme that supports ‘reputation-based
blacklisting’ — the service provider can score users’ anony-
mous sessions (e.g., good vs. inappropriate comments) and
users with insuﬃcient reputation are denied access.
The major drawback of BLACR is the linear computa-
tional overhead in the size of the reputation list, which allows
it to support reputation for only a few thousand user ses-
sions in practical settings. We propose PERM, a revocation-
window-based scheme (misbehaviors must be caught within
a window of time), which makes computation independent
of the size of the reputation list. PERM thus supports mil-
lions of user sessions and makes reputation-based blacklist-
ing practical for large-scale deployments.
Categories and Subject Descriptors
K.6.5 [Operating Systems]: Security and Protection—
Authentication; E.3 [Data Encryption]: Public key cryp-
tosystems
Keywords
accountable anonymity, anonymous blacklisting, revocation
1.
INTRODUCTION
Anonymous access to services can be of great value in
many circumstances. For example, journalists and activists
can avoid censorship and persecution while posting con-
tent to Wikipedia and YouTube anonymously. Nevertheless,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$15.00.
users can and do abuse their anonymity by defacing web-
pages and posting inappropriate material. Repeated abuse
has led service providers (SPs) like Wikipedia to ban access
though anonymizing networks such as Tor [15].
Anonymous blacklisting and subjective judging. To en-
able a less drastic reaction than banning anonymous access,
several credential schemes for accountable anonymity have
been proposed recently. These schemes support the subjec-
tive judging of misbehaviors [19, 27], allowing SPs to ar-
bitrarily ﬂag behaviors as inappropriate. Subjective judg-
ing is useful in applications in which a mathematical or
algorithmic formulation of misbehaviors such as ‘inappro-
priate edits’ is unlikely.1 It has been recognized that since
the subjective judging of users’ behaviors is arbitrary, it is
desirable for such schemes to support anonymous blacklist-
ing [19, 27] such that users can be blocked from returning
while maintaining their anonymity.2 Thus users are held
accountable, but they are not worried about arbitrary, sub-
jective deanonymization.
TTP vs. TTP-Free schemes. Several approaches to pro-
viding anonymous blacklisting with subjective judging in-
clude some kind of trusted third party (TTP). Group
signature-based schemes feature a group manager who can
revoke access for users [1, 8, 13, 20]. ‘Nymble’ schemes make
authentication at the SP eﬃcient, but they also feature some
kind of TTP [19, 27, 21, 18]. Since users must still rely on
the judgment of the TTP, users can never be certain of their
anonymity.
Thus, several TTP-free schemes have been proposed re-
cently to eliminate this point of trust. BLAC was the ﬁrst
such scheme [24, 26].
In BLAC users must prove in zero
knowledge that each entry on the blacklist does not cor-
respond to an authentication made earlier using their cre-
dential, resulting in authentication times linear in the size
of the blacklist. PEREA removed this linear dependence
on the size of the blacklist by requiring misbehaviors to be
‘caught’, i.e., identiﬁed, within a revocation window of the
past K authentications [25, 4]. Authentication times are
now linear in the size of K, and thus K cannot be too large;
typically K = 10 provides much better performance than
BLAC. When combined with rate limiting, PEREA would
1In contrast, schemes supporting digital cash can easily
characterize misbehavior such as the “double spending” of
a coin.
2In contrast many existing schemes for subjective judging
deanonymize or reduce the privacy of users.
929allow enough (i.e., K) authentications per day and be able
to block users who were blacklisted within a day of their mis-
behavior. We refer to the rate limiting time period as the
“revocation period”. Under this revocation-window model
FAUST signiﬁcantly improves authentication times using a
novel whitelisting approach [22].
TTP-free reputation-based blacklisting. While previous
schemes revoke access to users who are on the blacklist, the
most recent advance was made by BLACR, i.e., BLAC with
Reputation [2]. Hereafter we shall use the terminology “rep-
utation list” instead of “blacklist” in order to reﬂect the list’s
nature in reputation-based blacklisting systems. In BLACR
the SP can score each entry with a positive or negative score
on the reputation list along with a category identiﬁer. For
example, the SP can use diﬀerent scoring schemes in the
categories of comments (e.g., foul language: −2, racist com-
ments: −10, and helpful comments: +5) and content (e.g.,
popular videos: +5, copyright violations: −2 or −5 depend-
ing on how egregious the violations are). SPs can then re-
quire an authenticating user’s reputation (total of scores in a
category) to be above a particular threshold. Furthermore,
SPs can specify policies that are boolean combinations of
such category-threshold statements (e.g., reputation in the
comments category should be above −5 AND reputation
in the content category should be above −15).3 BLACR
guarantees that users who do not satisfy the policy are de-
nied access without revealing any other information beyond
whether the policy was satisﬁed or not.
While BLACR oﬀers a good solution for reputation-based
blacklisting, it is slow because it has the same linear de-
pendence of BLAC. BLACR improves performance by im-
plementing the concept of an ‘express lane token’, which
amounts to incremental proofs over the previous authenti-
cation. Nevertheless, BLACR supports reputation lists with
only a few thousand entries. While useful, BLACR’s scala-
bility is limited, and a more eﬃcient solution is needed for
SPs like Wikipedia or YouTube that can have millions of
sessions where anonymous users edit or upload content.
The recent PEREA scheme does oﬀer a form of
reputation-based blacklisting (albeit for only a single cat-
egory) that is eﬃcient at the SP, but it suﬀers from two
major drawbacks. First, the reputation of an authenticating
user is calculated over the current revocation window, e.g.,
a day. Thus, the user’s reputation in only the last day would
be taken into account, which severely limits the scheme’s ap-
plicability to systems in which reputation is built over much
longer time periods than a few days. Second, the time at
the user is linear in the size of the reputation list and it
would take hours of computation at the user to generate
authentication proofs. FAUST alleviates the computation
problem [22], but oﬀers an even more limited form of repu-
tation than PEREA. As pointed out earlier [2, §1], FAUST
cannot support boolean combinations of reputation policies
across categories and is not collusion resistant to attacks in
which users can pool their credentials to gain unauthorized
access. A scheme that can ﬁx these two problems of func-
tionality and performance would oﬀer a major improvement
in reputation-based blacklisting by oﬀering the ﬁrst scalable
3We used examples with negative thresholds to indicate
some leeway with misbehavior.
Indeed reputation-based
blacklisting schemes are useful when varying degrees of mis-
behavior may be tolerated, but “up to a point.”
alternative to BLACR. We propose such a scheme, which we
call “PERM”.
Our contributions.
• Persistence of reputation scores. We propose a ‘re-
construction’ of PEREA called “PERM”. Our ﬁrst con-
tribution is to add ‘memory’ to PEREA, hence the name
“PERM” (viz. PEREA with Memory). As long as a con-
nection is scored within its revocation window, the score
persists over time. For example, if a user’s anonymous
comment a year ago was scored within a day of making
that comment, then that score will always factor into the
user’s reputation.
• Free reputation upgrades. To ensure that users
necessarily acquire negative reputation for misbehav-
iors, PEREA-like schemes require that such behaviors be
scored within a revocation window. But the concept of
a memory in PERM also allows for voluntary updates to
reputation outside of this window. While users have no
incentive to voluntarily reduce their reputation, they will
certainly be motivated to apply higher reputation scores
if the score of one of their sessions is later revised. Con-
sider a video upload that receives high user ratings after
several months. At this point a user may want to acquire
a higher reputation for that video. PERM provides such
a voluntary reputation upgrade mechanism through a
memory update protocol and thus positive scores can be
applied at any time.
• Multiple scores per session. In PERM a single ses-
sion can be scored under multiple categories. For exam-
ple, a webpage edit may contain both a copyright viola-
tion as well as objectionable content. BLACR, however,
requires the SP to pick a single category when scoring a
session.
• Much more eﬃcient at the user. Authentications
in BLACR and PEREA are slow at the user and require
computation linear in the size of the blacklist. PERM
requires only a constant amount computation, regardless
of the blacklist size, and is thus much more eﬃcient at
the user end. What would take PEREA half an hour
of computation at the user (over 200,000 reputation list
entries) takes PERM only 0.3 seconds (Section 4.2).
• Eﬃcient at the server. The SP’s computational over-
head is still O(K), as it is for PEREA, and is independent
of the reputation list size. The constant factor is a little
higher than for PEREA, but remains much more eﬃcient
than BLACR.
Paper outline. In Section 2 we provide an overview of the
system goals and our approach with PERM. We provide
the full cryptographic construction of PERM in Section 3
followed by a quantitative analysis in Section 4. We discuss
various issues in Section 5 and conclude in Section 6. The
Appendix provides the security model and sketches the proof
of security for PERM.
2. OVERVIEW
Before we provide the details of our construction, we will
give an overview of our approach. Service Providers (SPs)
issue credentials to users, who can then authenticate anony-
mously to the SP. SPs record transaction identiﬁers with
each authenticated session. Later, if the SP wants to reward
or penalize users for their behavior in that session, then
930the SP uses the transaction identiﬁer to record a reputation
score for that transaction under a particular category (or
categories). These scores are recorded in a reputation list.
SPs can then specify authentication policies, which specify
boolean combinations of reputation thresholds across vari-
ous categories. Users authenticate by proving they satisfy
the policy with respect to the reputation list.
2.1 Authentication policies
l=1((cid:86)J
(cid:87)(cid:96)
Similar
the
to BLACR [2], policies are of
form
j=1 Plj), i.e., a disjunction of conjunctive clauses.
Each conjunctive clause can include J ‘sub policies’ Plj that
correspond to categories. Plj is of the form (ζlj, ηlj), which
states that the authenticating user’s reputation in category
j must be within the range of [ζlj, ηlj]. Not all J categories
need to be covered in each clause, and Plj is set to ⊥ if a sub
policy for that category is skipped. Each transaction iden-
tiﬁer is associated with J scores, representing the scores of
that authentication with respect to each category. The SP
maintains a reputation list L of all transaction identiﬁers
and their corresponding scores. Plj evaluates to 1 if the
reputation of the user based on this reputation list is within
the range [ζlj, ηlj]. We assume there exists an integer Rmax,
which is the maximum value of reputation for any user in
the system. In our analysis we assume Rmax = 1024. A sub-
policy of (−10, Rmax) requires the user to have a reputation
higher than the threshold of −10.
Scores assigned within the revocation window will nec-
essarily be factored into the reputation calculation of an
authenticating user. Reputation scores can be credited to
users beyond the revocation window through a voluntary
‘reputation upgrade’ protocol.
2.2 Security goals
We present informal deﬁnitions of the desired security
properties. They are similar to previous schemes in this
space (BLAC, PEREA, and BLACR); formalized versions
are in the Appendix.
Authenticity: In a system with authenticity, SPs accept
authentications only from users who satisfy the authentica-
tion policy. This property also implies collusion resistance,
i.e., a group of revoked users should not be able to collude
and somehow authenticate.
Anonymity: In a system with anonymity, all that SPs can
infer about the identity of an authenticating user is whether
the user satisﬁes the authentication policy at the time of
protocol execution, regardless of future actions by the SP.
Non-frameability: A user is framed if she satisﬁes the au-
thentication policy, but is unable to successfully authenti-
cate to an honest SP.
In a system with non-frameability,
users satisfying the authentication policy can always suc-
cessfully authenticate to honest SPs.
2.3 PERM: Conceptual approach
We sketch the central ideas of our PERM scheme with
the aid of Figure 1. Like in PEREA, the main idea be-
hind our construction is for the user to maintain a queue of
its K most recent transaction identiﬁers t1, . . . , tK . These
transaction identiﬁers are assigned sequentially by the SP.
The user will use this queue to prove in zero knowledge that
his/her reputation scores with respect to those transaction
identiﬁers, and the reputation list satisfy the authentication
policy. The authentication time at the server is linear in
Figure 1: Structure of a user’s queue before and af-