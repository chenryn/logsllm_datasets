user would have to multiply the 4th and 8th digits of the
account number and add 17 to the result. Hence, the user
would type 31 as the conﬁrmation token. The bank, how-
ever, would compute 23 and, because these conﬁrmation
values do not match, it would not execute the transaction,
successfully thwarting the attack.
Figure 2. The token lookup scheme illus-
trated.
For our second scheme to implement f(.), called token
lookup, users are not required to perform any computation.
In this variation, the code book would consist of a large
378378
these schemes are typically very simple. For example, the
letters and numbers are always located at the same window
coordinates, or the fonts can be easily recognized with op-
tical character recognition (OCR). As a result, malware can
still recover the entered information.
The basic idea of the second solution is to extend graphi-
cal input with CAPTCHAs [3]. A CAPTCHA, which stands
for Completely Automated Public Turing test to tell Com-
puters and Humans Apart, is a type of challenge-response
test that is used in computing to determine whether or not
the user is human. Hence, a CAPTCHA test needs to be
solvable by humans, but not solvable (or very difﬁcult to
solve) for computer applications. CAPTCHAs are widely
employed for protecting online services against automated
(mis)use by malicious programs or scripts. For example,
such programs may try to inﬂuence online polls, or regis-
ter for free email services with the aim of sending spam.
Figure 3 shows a graphical CAPTCHA generated by Yahoo
when a user tries to subscribe to its free email service.
edge, no one has considered their use to enable secure input
to web applications.
In our solution, whenever a web application requires to
protect the integrity and conﬁdentiality of user information,
it generates a graphical input ﬁeld with randomly placed
CAPTCHA characters. When the user wants to transmit
input, she simply uses the mouse to click on the area that
corresponds to the ﬁrst character that should be sent. Click-
ing on the image generates a web request that contains the
coordinates on the image where the user has clicked with
the mouse. The key idea here is that only the web applica-
tion knows which character is located at these coordinates.
After the ﬁrst character is transmitted, the web application
generates another image with a different placement of the
characters, and the process is repeated. By using CAPT-
CHAs to communicate with the human user, a web applica-
tion can mitigate client-side attacks that intercept or mod-
ify the sensitive information that users type. Because the
CAPTCHA characters cannot be identiﬁed automatically, a
malware program has no way to know which information
was selected by the user, nor does it have a way to mean-
ingful select characters of its own choosing.
Figure 3. A graphical CAPTCHA generated by
Yahoo.
An important characteristic of a CAPTCHA is that it has
to be resistant to attacks. That is, it should not be possi-
ble for an algorithm to automatically solve the CAPTCHA.
Graphical CAPTCHAs, speciﬁcally, need to be resistant to
optical character recognition [18]. OCR is used to trans-
late images of handwritten or typewritten text into machine-
editable text. To defeat OCR, CAPTCHAs generally use
background clutter (e.g., thin lines, colors, etc.), a large
range of fonts, and image transformations. Such properties
have been shown to make OCR analysis difﬁcult [3].
Usually, the algorithm used to create a CAPTCHA is
made public. The reason for this is that a good CAPTCHA
needs to demonstrate that it can only be broken by advances
in OCR (or general pattern recognition) technology and not
by the discovery of a “secret” algorithm. Note that although
some commonly used CAPTCHA algorithms have already
been defeated (e.g., see [17]), a number of more sophisti-
cated CAPTCHA algorithms [3, 7] are still considered re-
sistant against OCR and are currently being widely used by
companies such as Yahoo and Google.
3.2.2 Details
Although CAPTCHAs are frequently used to protect online
services against automated access, to the best of our knowl-
Figure 4. A generated CAPTCHA for enabling
secure user input.
Figure 4 depicts a screenshot of our prototype CAPT-
CHA input element. In this example, the user would like to
securely enter her bank account number 980.343.276. It can
be seen that the web application has generated digits from
0 to 9 that are randomly distributed on the upper half of the
image. To transmit the account information, the user locates
the desired numbers on each generated image and sequen-
tially enters the account number that she would like to send.
In order to give immediate feedback to the user about the
number she has just entered, a part of the CAPTCHA can
be used to reﬂect back the input. In our prototype imple-
mentation, we chose to use the bottom half of the CAPT-
CHA to give feedback to the user about the number she has
just entered (see the ellipse in Figure 4; the ﬁrst three digits
have already been entered). Of course, one can also allow
379379
the user to modify the input she has entered by including in-
put elements in the CAPTCHA that can be used for deleting
and editing.
3.2.3 Security Analysis
The security of the CAPTCHA-based solution is based on
the assumption that it is impossible (or sufﬁciently difﬁcult)
for malicious software installed on the user’s machine to an-
alyze and identify the coordinates on the CAPTCHA where
the input values are located. Our solution also relies on
the presumption that we can adapt and integrate recent ad-
vances in CAPTCHA research and hence, match advances
in OCR research.
In order to successfully defeat our solution automati-
cally, the malicious software would need to identify the
mouse coordinates that it needs to send to the web appli-
cation. Suppose, for example, that a Trojan horse would
like to send the account number 276.273.862 to the bank
instead of the original account number 980.343.276 that the
user would like to enter. For each new CAPTCHA input
element, it would have to automatically identify the target
input value that it requires, intercept the user’s mouse click,
and simulate a mouse click of its own. In our example, the
Trojan would ﬁrst have to identify the number 2 in the ﬁrst
generated CAPTCHA, the number 7 on the second gener-
ated CAPTCHA, and so on.
Although algorithms exist that can make it sufﬁciently
difﬁcult for software to solve CAPTCHAs automatically,
the main problem currently is that it may be possible to
relay CAPTCHAs to human operators who can then solve
them manually. In fact, some spammers have been using
this technique in real-life to defeat CAPTCHAs [26]. One
popular idea is to divert the CAPTCHA to another web site
where visitors willingly solve them because they believe
that they will access “free” adult content. Note, however,
that in the solution we propose, it is more difﬁcult to deploy
an unsuspecting human operator to defeat the CAPTCHA.
That is, in our case, the required task is not simply reading
the CAPTCHA, but identifying input values sequentially.
Hence, a human operator would have to follow the input
that is being entered in real-time while the victim is enter-
ing this information during an online banking session.
The attackers could nevertheless deploy human op-
erators that
indeed analyze and enter information on
CAPTCHA-based input elements. One can imagine, for
example, that the miscreants would employ and pay these
operators for their services. When human operators are in-
volved, the conﬁdentiality of the input can be compromised,
since nothing will prevent an off-line analysis of the images
and click coordinates. However, an effective attack on the
integrity can only happen on-line (i.e., at the moment the
user attempts to enter the sensitive data). In this case, the
attackers would have to make sure that the communication
between the Trojan horses on the victims’ machines and
their human operators are reliable and fast. Furthermore,
they would also run the risk of being traced back if service
providers monitor network connections and detected Trojan
horses are analyzed for their behavior. Finally, to effectively
deceive the user, that part of the image that reﬂects the in-
put needs to be edited (to show the input the user intended
to make) before being displayed. Thus, we believe that the
CAPTCHA-based input solution we propose considerably
raises the difﬁculty bar for attackers and signiﬁcantly in-
creases the costs of client-side attacks.
4 Evaluation
In Section 3, we discussed a number of possibilities an
attacker possesses to subvert our protection schemes. The
discussion showed that our system offers appealing secu-
rity properties even in the presence of powerful adversaries.
However, to be usable in practice, it is not sufﬁcient that
a scheme is secure, but it is also necessary that it is easy
to understand and to use. To assess the ease-of-use of our
proposed protection mechanisms, we conducted two user
studies. We performed an initial small-scale study to iden-
tify major usability obstacles of our prototype implementa-
tion. Based on these initial experiences, we improved our
system and eventually conducted a larger user study to eval-
uate how suitable our protection mechanisms are to protect
online bank transactions.
To conduct the usability study, we implemented a simple
proof-of-concept online banking web application, where a
user can log in and perform (simulated) money transactions.
Our transaction functionality is similar to real-life online
banking web applications where the user is required to en-
ter a target account number, routing number and the amount
that is to be transferred. After entering the transaction de-
tails, the conﬁrmation challenge is displayed.
If the user
enters an invalid token, she has the chance to retry indeﬁ-
nitely. At any point, the user has the chance to abort.
For the initial study, we recruited 16 participants with
diverse background and age. Each participant was asked to
log into our prototype bank site and carry out a number of
transactions. To this end, every user received a list of ten
transactions that she should perform. For each transaction,
the user was told to select one of the three available protec-
tion schemes, that is, the users had the choice between either
CAPTCHA input, token lookup, or token calculation.
On the login page, a help text (about 2 screen pages
long) was displayed that explained the usage of the new
protection methods. Initially, no additional information was
given. When a user failed to correctly perform a transac-
tion and gave up, the experimenter took on the role of a
customer support agent and was allowed to answer some
380380
speciﬁc questions or to address a particular problem that
the subject encountered. For each protection technique, a
number of transactions were performed. We silently ob-
served the problems that subjects encountered before any
hints were given, and also after some support was provided.
At the end, we asked each person to rank the protection
mechanisms with regard to their personal feeling of ease-
of-use. Also, we were interested in suggestions that people
might have to improve their user experience.
The initial study yielded the following ﬁndings: The to-
ken lookup scheme was considered easiest, while token cal-
culation was the least favorite method for almost all users.
Problems with the latter resulted from difﬁculties of under-
standing the textual descriptions of the algorithms, but also
from frustrating miscalculations.
For the graphical input method, there was a negative cor-
relation between popularity and age, while participants with
a technical background generally had a better appreciation
for it. We concluded that the CAPTCHA input was “over-
featured.” The problem was a single, large input image that
contained several lines of input lumped together (one line
for each information needed for a transaction), as well as
navigation and editing elements. That proved to be confus-
ing for most users. Additionally, some participants reported
that the digits “1” and “7” were often hard to distinguish.
In general, we observed that, initially, most users had
difﬁculties to understand how our protection mechanisms
work. Nevertheless, after users overcame the initial obsta-
cles and developed some familiarity with a new technique,
they were typically able to carry out transactions swiftly
and with few problems.
It became apparent that, instead
of a long introductory text, an (interactive) tutorial would
be preferable to introduce each method. Finally, we real-
ized that it makes little sense to compare the graphical input
directly with the token schemes; both approaches address
the same problem, but from a different angle.
For the second study, we redesigned out testing frame-
work to mitigate the previously identiﬁed issues. We re-
placed the written introduction with a tutorial where the user
was guided step-by-step through the ﬁrst transaction with
every scheme. To improve token calculation, we attempted
to ﬁnd more precise wording for the algorithm descriptions,
but we had to balance the verbosity and the length of the
instructions. Since we have concluded that graphical input
and conﬁrmation tokens are independent, we have imple-
mented the methods to be used orthogonally. The user now
has the choice between three conﬁrmation methods: The
two novel token schemes presented in Section 3.1 as well as
the regular TAN method. Additionally, the user can activate
the CAPTCHA graphical input (Section 3.2) for entering
sensitive information. This allowed us to compare graphical
input with normal keyboard input. Note that token schemes
and the CAPTCHA-based input can be combined, for ex-
ample, by entering the account number via a CAPTCHA
and using a lookup token to conﬁrm the transaction.
To address the issues speciﬁc to graphical input, we have
changed the user interface substantially. In particular, we
replaced the original input image with a set of images, each
displaying a single piece of information (such as account
number or amount). Clicking on such an image reveals the
graphical input panel. The panel contains only the digits,
while the editing elements are realized as buttons. The user
input is still reﬂected at the bottom of the input image, but
the displayed digits are also valid input elements now (digits
in the image that did not “respond” to clicks were often a
source of confusion).
For the second study, we were able to recruit 64 par-
ticipants. Again, we tried to accommodate diverse back-
grounds and age groups. We included only people with (at
least) basic computer skills and good knowledge of the Ger-
man language, to prevent computer and language-related
problems from inﬂuencing the outcome. The participants
were between 18 and 50 years of age, 59% had some sort
of technical education, and 43% declared their computer
skills to be above average. Finally, 84% had previous online
banking experience.
At the beginning, each participant was issued a task list,
containing the login data and a list of twelve transactions, as
well as the code books/TAN lists required for the conﬁrma-
tion schemes. The experimenter explained the task brieﬂy,
without giving any speciﬁcs, but pointing to the tutorial in-
stead. Then, the users were left alone and we observed their
actions unobtrusively. The tutorial consists of three trans-
actions. The ﬁrst introduces the CAPTCHA input and TAN
conﬁrmation, while the other two present the token lookup
and token computation schemes, respectively. If, during the
tutorial, a user asked for assistance, the experimenter would
take the role of a customer support agent. In addition to the
three introductory transactions, the task list contained nine
additional transactions, which had to be carried out using
the speciﬁed input and conﬁrmation methods (in different
combinations). From the overall twelve transactions, six
were carried out using graphical input. Of the three con-
ﬁrmation schemes (TAN, token lookup, and token calcula-
tion), each had to be performed four times.
After completing all transactions, the users were pointed
to an on-line questionnaire, with questions concerning the
general difﬁculty of each method, as well as method-
speciﬁc questions.
In particular, we asked to rate the
ease-of-use of each method (independently), providing four
grades ranging from “easy” to “very hard.” Moreover, we
wanted to know if a task became easier with time, with the
choices being “yes,” “partially,” and “no.” The answers are
listed in Table 1. In this table, the “Total” columns list the
absolute difﬁculties of each scheme. The adjacent columns
break down the relative improvement for each group. For
381381
Method
Improvement
Difﬁculty
Easy
Medium
Hard
Very hard
Total
Graphical Input
Token Lookup
Token Calculation
Total
Yes
Part. No
Total
Yes
Part. No
Total
Yes
Part. No
21
39
3
1
64
15
30
1
0
46
2
5
2
1
10
4
4
0
0
8
44
20
0
0
64
28
15
0
0