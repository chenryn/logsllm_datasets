273–290.
[55] Stephan Krenn, Thomas Lorünser, Anja Salzer, and Christoph Striecks. 2017.
Towards Attribute-Based Credentials in the Cloud. In CANS 17 (LNCS, Vol. 11261).
179–202.
[56] Ben Kreuter, Tancrède Lepoint, Michele Orrù, and Mariana Raykova. 2020. Anony-
mous Tokens with Private Metadata Bit. In CRYPTO 2020, Part I (LNCS, Vol. 12170).
308–336.
[57] Michael Z. Lee, Alan M. Dunn, Brent Waters, Emmett Witchel, and Jonathan Katz.
2013. Anon-Pass: Practical Anonymous Subscriptions. In 2013 IEEE Symposium
on Security and Privacy. 319–333.
[58] Benoît Libert, Fabrice Mouhartem, Thomas Peters, and Moti Yung. 2016. Practical
“Signatures with Efficient Protocols” from Simple Assumptions. In ASIACCS 16.
511–522.
[59] Jinyu Lu, Yunwen Liu, Tomer Ashur, Bing Sun, and Chao Li. 2020. Rotational-
XOR Cryptanalysis of Simon-Like Block Ciphers. In ACISP 20 (LNCS, Vol. 12248).
105–124.
[60] MAOSCO Limited. 2020. MULTOS Standard Technology. https://www.multos.
[61] Milica Milutinovic, Koen Decroix, Vincent Naessens, and Bart De Decker. 2015.
Privacy-Preserving Public Transport Ticketing System. In Data and Applications
Security and Privacy XXIX. Springer.
com/.
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2017[62] Daniel Moghimi, Berk Sunar, Thomas Eisenbarth, and Nadia Heninger. 2020. TPM-
FAIL: TPM meets Timing and Lattice Attacks. In 29th USENIX Security Symposium,
USENIX Security 2020, August 12-14, 2020, Srdjan Capkun and Franziska Roesner
(Eds.). USENIX Association, 2057–2073. https://www.usenix.org/conference/
usenixsecurity20/presentation/moghimi-tpm
[63] Wojciech Mostowski and Pim Vullers. 2012. Efficient U-Prove Implementation
for Anonymous Credentials on Smart Cards. In Security and Privacy in Com-
munication Networks, Muttukrishnan Rajarajan, Fred Piper, Haining Wang, and
George Kesidis (Eds.). Springer.
[64] Oracle. 2020. Java Card Technology. https://www.oracle.com/java/technologies/
java-card-tech.html.
[65] Christian Paquin and Greg Zaverucha. 2013. U-Prove Cryptographic Specification
V1.1 (Revision 3). https://www.microsoft.com/en-us/research/publication/u-
prove-cryptographic-specification-v1-1-revision-3/
[66] David Pointcheval and Olivier Sanders. 2016. Short Randomizable Signatures. In
CT-RSA 2016 (LNCS, Vol. 9610). 111–126.
[67] Himanshu Raj, Stefan Saroiu, Alec Wolman, Ronald Aigner, Jeremiah Cox,
Paul England, Chris Fenner, Kinshuman Kinshumann, Jork Löser, Dennis Mat-
toon, Magnus Nyström, David Robinson, Rob Spiger, Stefan Thom, and David
Wooten. 2016.
fTPM: A Software-Only Implementation of a TPM Chip. In
25th USENIX Security Symposium, USENIX Security 16, Austin, TX, USA, Au-
gust 10-12, 2016, Thorsten Holz and Stefan Savage (Eds.). USENIX Associa-
tion, 841–856. https://www.usenix.org/conference/usenixsecurity16/technical-
sessions/presentation/raj
[68] Kai Rannenberg, Jan Camenisch, and Ahmad Sabouri (Eds.). 2015. Attribute-based
[69] Olivier Sanders. 2020. Efficient Redactable Signature and Application to Anony-
Credentials for Trust: Identity in the Information Society. Springer.
mous Credentials. In PKC 2020, Part II (LNCS, Vol. 12111). 628–656.
[70] Michael Schwarz and Daniel Gruss. 2020. How Trusted Execution Environments
Fuel Research on Microarchitectural Attacks. IEEE Secur. Priv. 18, 5 (2020), 18–27.
https://doi.org/10.1109/MSEC.2020.2993896
Identity-Based Cryptosystems and Signature Schemes. In
[71] Adi Shamir. 1984.
[72] Victor Shoup. 1997. Lower Bounds for Discrete Logarithms and Related Problems.
CRYPTO’84 (LNCS, Vol. 196). 47–53.
In EUROCRYPT’97 (LNCS, Vol. 1233). 256–266.
[73] Alberto Sonnino, Mustafa Al-Bassam, Shehar Bano, Sarah Meiklejohn, and George
Danezis. 2019. Coconut: Threshold Issuance Selective Disclosure Credentials
with Applications to Distributed Ledgers. In NDSS 2019.
In ASIACRYPT 2001 (LNCS, Vol. 2248). 533–551.
Oracles. In EUROCRYPT 2005 (LNCS, Vol. 3494). 114–127.
[75] Brent R. Waters. 2005. Efficient Identity-Based Encryption Without Random
[74] Eric R. Verheul. 2001. Self-Blindable Credential Certificates from the Weil Pairing.
A OMITTED FORMAL DEFINITIONS
A.1 Preliminaries
A,Ψ(1𝜆) ⇒ 1 for the event that the experiment Exp
We write Exp
𝜙
returns 1, when instantiated with parameters 𝜙, adversary A and
primitive Ψ, all of which possibly omitted. We define the adjusted
advantage of adversary A in this experiment as
(cid:12)(cid:12)(cid:12)Pr(cid:104)
A,Ψ(1𝜆) ⇒ 1(cid:105) − 𝑥
(cid:12)(cid:12)(cid:12)
Adv [𝑥] Exp𝜙
A,Ψ (1𝜆) :=
𝜙
Exp
If 𝑥 = 0, we write instead AdvExp𝜙
A,Ψ (1𝜆) for its advantage.
A.2 Signatures with Flexible Public Key
Definition A.1 (Class-hiding with Key Corruption). For SFPK with
relation R and adversary A we define the following experiment:
A,SFPK(𝜆)
C-HR
(sk𝑖, pk𝑖) ←$ SFPK.KeyGen(1𝜆) for 𝑖 ∈ {0, 1}
𝑏 ←$ {0, 1}; 𝑟 ←$ coin
(sk′, pk′) ← SFPK.ChgKeys(sk𝑏, pk𝑏, 𝑟)
ˆ𝑏 ←$ ASFPK.Sign(sk′,·) ((sk0, pk0), (sk1, pk1), pk′)
return 𝑏 = ˆ𝑏
saries A, their advantage Adv(cid:2) 1
2(cid:3) C-HA,SFPK(1𝜆) is negligible.
A SFPK is class-hiding with key corruption if for all 𝑃𝑃𝑇 adver-
Definition A.2 (Existential Unforgeability under Flexible Public
Key). For scheme SFPK with relation R and adversary A we define
the following experiment:
A,SFPK(𝜆)
EUF-CMAR
(sk, pk, 𝛿) ←$ SFPK.TKGen(1𝜆); 𝑄 := ∅
(pk′, 𝑚∗, Sig∗) ←$ AO1(sk,·),O2(sk,·,·) (pk, 𝛿)
return 𝑚∗ ∉ 𝑄 ∧
return SFPK.ChkRep(𝛿, pk′) = 1 ∧
SFPK.Verify(pk′, 𝑚∗, Sig∗) = 1
O2(sk, 𝑚, 𝑟)
sk′ ←$ SFPK.ChgSK(sk, 𝑟)
Sig ←$ SFPK.Sign(sk′, 𝑚)
𝑄 := 𝑄 ∪ {𝑚}
return Sig
O1(sk, 𝑚)
Sig ←$ SFPK.Sign(sk, 𝑚)
𝑄 := 𝑄 ∪ {𝑚}
return Sig
A SFPK is existentially unforgeable with flexible public key under
chosen message attacks if for all 𝑃𝑃𝑇 adversaries A, their advantage
AdvEUF-CMAR
A.3 Structure Preserving Signatures on
(1𝜆) is negligible.
A,SFPK
Equivalence Classes
EUF-CMA security is similar to that of conventional signatures, but
a forgery needs to be with respect to an unqueried class.
Definition A.3 (EUF-CMA). For scheme SPS-EQ and adversary
A we define the following experiment:
EUF-CMAA,SPS-EQ(𝜆, ℓ)
BG ←$ Setup(𝜆); 𝑄 := ∅
(sk, pk) ←$ KeyGen(BG, ℓ)
(𝑀∗, 𝜎∗) ← AO1(sk,·) (pk)
return [𝑀∗] ≠ [𝑀] ∀𝑀 ∈ 𝑄 ∧
Verify(pk, 𝑀∗, 𝜎∗) = 1
O1(sk, 𝑀)
𝜎 ←$ Sign(sk, 𝑀)
𝑄 := 𝑄 ∪ {𝑀}
return 𝜎
An SPS-EQ over (G∗
𝑖 )ℓ is existentially unforgeable under adap-
tively chosen-message attacks, if for all PPT adversaries A, their
advantage AdvEUF-CMA
A,SPS-EQ(1𝜆, ℓ) is negligible.
𝑖 )ℓ ∧ Verify(𝑀, 𝜎, pk) = 1 ∧ 𝜇 ∈ Z∗
Definition A.4 (Perfect Adaption of Signatures under malicious
keys [44]). Let ℓ > 1. An SPS-EQ scheme SPS-EQ on (G∗
𝑖 )ℓ perfectly
adapts signatures under malicious keys if for all tuples (pk, 𝑀, 𝜎, 𝜇)
with 𝑀 ∈ (G∗
𝑝 we have that
the output of ChgRep(𝑀, 𝜎, 𝜇, pk) is a uniformly random element
in the space of signatures, conditioned on Verify(𝑀 𝜇, 𝜎′, pk) = 1.
A relaxation of this definition (perfect adaption) considers tu-
ples of the form (sk, pk, 𝑀, 𝜎, 𝜇) for which VKey(sk, pk) = 1 and
requires that the output of ChgRep(𝑀, 𝜎, 𝜇, pk) and Sign(𝑀 𝜇, sk)
are identically distributed. We note that for our CHAC construction
we only need this relaxed definition.
A.4 Tag-Based Equivalence Class Signatures
Definition A.5 (EUF-CMA). For scheme TBEQ and adversary A
we define the following experiment:
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2018EUF-CMAA,TBEQ(𝜆, ℓ)
pars ←$ Setup(𝜆); 𝑄 := ∅
(sk, pk) ←$ KeyGen(pars, ℓ)
(𝑀∗, 𝜎∗, 𝜏∗) ← AO1(sk,·,·)
return Verify(pk, 𝑀∗, 𝜏∗, 𝜎∗) = 1 ∧
([𝑀∗], 𝜏∗) ≠ ([𝑀], 𝜏) ∀(𝑀, 𝜏) ∈ 𝑄
(pk)
CMA
O1(sk, 𝑀, 𝜏)
𝜎 ←$ Sign(sk, 𝑀, 𝜏)
𝑄 := 𝑄 ∪ {(𝑀, 𝜏)}
return 𝜎
A TBEQ is EUF-CMA, secure if for all PPT adversaries A, their
advantage AdvEUFA,TBEQ(1𝜆, ℓ) is negligible.
A.5 Aggregatable Attribute-Based EQs
Definition A.6 (EUF-CMA). For scheme AAEQ and adversary A
we define the following experiment:
EUF-CMAA,AAEQ(𝜆, 𝑡, ℓ)
(msk, mpk) ←$ Setup(1𝜆, 𝑡, ℓ); 𝑄, 𝐴 := ∅
𝑖 }) ←$ AO1(msk,·,·,·) (mpk)
(𝑀∗, 𝜎∗, {Attr∗
(Attr∗
𝑖 , 𝑣∗
return

Attr𝑖
, [𝑀∗]) ∉ 𝑄 ∧
𝑖 }, 𝑀∗, 𝜎∗) = 1
𝑖
Verify(mpk, {Attr∗
O1(msk, Attr, 𝑣Attr, 𝑀)
if (Attr, ·) ∉ 𝐴
skAttr ←$ AKGen(msk, Attr)
𝐴 := 𝐴 ∪ {(Attr, skAttr)}
𝜎 ←$ Sign(skAttr, 𝑣Attr, 𝑀)
𝑄 := 𝑄 ∪ {(Attr, 𝑣Attr, 𝑀)}
return {𝜎}
tacks if for all 𝑃𝑃𝑇 adversaries A, the advantage AdvEUF-CMA
is negligible.
An AAEQ is existentially unforgeable under chosen message at-
A,AAEQ (1𝜆, 𝑡, ℓ)
Definition A.7 (Perfect Adaption of Signatures). An AAEQ scheme
on (G∗
𝑖 )ℓ perfectly adapts signatures if for all tuples ({skAttr𝑖 }, mpk,
𝑀, {Attr𝑖}, 𝜎, 𝜇) where it holds that VKey({skAttr𝑖 }, mpk) = 1,
Verify(mpk, {Attr𝑖}, 𝜎, 𝑀) = 1, 𝑀 ∈ (G∗
𝑝, the distribu-
tions (𝑀 𝜇, Agg(mpk, {Sign(skAttr𝑖
, 𝑣Attr𝑖 , 𝑀 𝜇,)}) and ChgRep(𝑀, 𝜎,
𝜇, mpk) are identical.
𝑖 )ℓ, and 𝜇 ∈ Z∗
A.6 CHAC: Formal Model
Let HD, CD, SN, MN be empty sets. We introduce lists DSK, CRED,
ATTR, D, AID, I2D to track honest device secret keys, credentials
issued to honest devices, the corresponding attributes, device iden-
tifiers, session identifiers for issuing/showing, a list used to identify
which credential corresponds to which honest device. Addition-
ally, we will use an array CATTR to store sets with attributes of
dishonest devices where we use the device identifiers as indexes
to the array. Finally, we introduce a counter 𝑐AID initialized to 0.
Moreover, let us define the following oracles.
OHD(𝑖) : takes as input an identifier 𝑖 and outputs ⊥ if 𝑖 ∈ HD∪ CD.
Otherwise, it creates a honest core device by running DSK[𝑖] ←$
CKGen(1𝜆), adding 𝑖 to HD and setting D[𝑖] = ⊥.
Ononce() : this allows the adversary to initiate an issuing/showing
session. The oracle chooses nonce ←$ {0, 1}𝜆, increments counter
𝑐AID and sets AID[𝑐AID] = nonce. Finally, it returns (𝑐AID, nonce).
OObtIss(𝑖, Attr) : creates credentials for honest device 𝑖, i.e. it out-
puts ⊥ if 𝑖 ∉ HD. Otherwise, it generates a nonce nonce ←$ {0, 1}𝜆,
generates aid ←$ AIDGen(Attr, nonce) and issues a credential for 𝑖
by running apreq ←$ CObtain(aid, ipk, DSK[𝑖]), areq ←$ HObtain(
Attr, nonce, ipk, apreq), and (cred, did) ←$
Issue(Attr, nonce, areq,
isk). If cred = ⊥ it returns ⊥. Otherwise it adds (𝑖, cred, Attr) to
lists (I2D, CRED, ATTR) and sets D[𝑖] = did.
OCD(𝑖): takes as input an identifier 𝑖. If 𝑖 ∉ HD it outputs ⊥. Other-
wise, it creates a corrupted core device by adding 𝑖 to CD and setting
HD = HD \ {𝑖}. If D[𝑖] ≠ ⊥ it computes the union CATTR[D[𝑖]]
of all sets ATTR[ 𝑗] for all 𝑗 where I2D[ 𝑗] = 𝑖. Finally, it returns
DSK[𝑖].
OIssue(𝑠, Attr, areq): allows the adversary, who impersonates a ma-
licious device, to obtain credentials. It takes as input a session
index 𝑠 > 0 and returns ⊥ if AID[ 𝑗] = ⊥. The oracle generates
(cred, did) ←$ Issue(Attr, AID[ 𝑗], areq, isk) and aborts if cred = ⊥.
Otherwise, it computes the union CATTR[did] = CATTR[did] ∪
Attr. The oracle sets AID[ 𝑗] = ⊥ and returns cred.
OCShow(𝑖, aid): allows the adversary to obtain a partial show tokens
from an honest device and impersonate a malicious helper device.
It takes a input a device index 𝑖 and attribute identifier aid. If 𝑖 ∉ HD
then return⊥. Otherwise, compute apsig ←$ CShow(aid, ipk, DSK[𝑖]),
adds (aid) to set SN and return apsig.
OHShow( 𝑗, nonce, Attr): allows the adversary, who impersonates a
malicious verifier, to trigger showings with an honest device. It
takes as input an index of an issuance 𝑗, nonce and a set of attributes
Attr. Let 𝑖 ← I2D[ 𝑗]. If 𝑖 ∉ HD or Attr ⊈ ATTR[ 𝑗] or CRED[ 𝑗] = ⊥
then return ⊥. Otherwise, compute aid ← AIDGen(Attr, nonce),
apsig ←$ CShow(aid, ipk, DSK[𝑖]) and asig ←$ HShow(Attr, nonce,
CRED[ 𝑗], ipk, apsig). Add (nonce) to MN and return asig.
OObtain1(𝑖, Attr, nonce): allows the adversary, who impersonates a
malicious issuer, to issue credentials for a honest device. It takes
as input a device index 𝑖 and returns ⊥ if 𝑖 ∉ HD. Otherwise it
computes aid ←$ AIDGen(Attr, nonce), apreq ←$ CObtain(aid, ipk,
DSK[𝑖]), and areq ←$ HObtain(Attr, nonce, ipk, apreq). and adds
(𝑖, 𝜀, Attr) to lists (I2D, CRED, ATTR).
OObtain2( 𝑗, cred): allows the adversary, who impersonates a ma-
licious issuer, to issue credentials for a honest device. It takes as
input a device index 𝑗 and returns ⊥ if cred = ⊥ or CRED[ 𝑗] ≠ 𝜀.