(seed0, seed1) R← Setup(1λ, F, n, x(cid:48))
(seed0, seed1) R← Setup(1λ, F, n, x)
Pr
(cid:20)(F, 1n, x, x(cid:48)) ← A(1λ),
(cid:20)(F, 1n, x, x(cid:48)) ← A(1λ),
(F, 1n, x) ← A(1λ),
(F, 1n, x) ← A(1λ), u R← Fn,
(seed0, seed1) R← Setup(1λ, F, n, x),
(u, v) ← Expand(0, seed0)
(seed0, seed1) R← Setup(1λ, F, n, x),
w ← Expand(1, seed1), v ← w − ux
Pr
≈ Pr
The reader might observe that one can trivially realize the above deﬁnition, simply by
letting Setup directly output seed0 ← (u, v), and seed1 ← ux+v, and deﬁning Expand to be
the identity function. We will be interested in non-trivial realizations of VOLE generators,
where the seed produced by Setup is signiﬁcantly shorter than the number n of the pseudo-
random VOLE instances being produced.
3.2 Primal VOLE Generator
We present the ﬁrst of two VOLE generator constructions. To simplify the presentation, we
introduce a “spreading function” spreadn (for any integer n) which takes as input a subset
S = {s1,··· , s|S|} of [n] (with s1  0, in which case the Expand algorithm of the VOLE gener-
ator expands a seed of size ˜O(n1/2+ε) into a pseudorandom VOLE of size O(n) (counting
size as a number of elements of F), and the best known attack takes subexponential time
O(en2ε). Regarding computational eﬃciency, expanding the seed requires O((k + t) · n)
arithmetic operations, and t · n PRG evaluations.
Instantiating Gprimal with parameters (k, n, t) over a ﬁeld F yields a VOLE generator
with seed length t · ((cid:100)log n(cid:101)(λ + 2) + λ) + (t + k) · log2 |F| bits and output length 2n group
elements (for Expand(0,·)) or n group elements (for Expand(1,·)). This VOLE generator is
(T, ε)-secure iﬀ LPN(k, n, t/n) with code Ck,n is (T (cid:48), ε)-secure and the MPFSS is (T (cid:48)(cid:48), ε)-
secure, with T (cid:48) = T − O((k + t)· n· log2 |F| + t· n· λ) and T (cid:48)(cid:48) = T − O((k + t)· n· log2 |F|).
A downside of this approach is that the expansion factor of the VOLE generator is lim-
ited to subquadratic. Below, we describe an alternative “dual” approach which overcomes
this limitation and allows for an arbitrary polynomial expansion.
3.3 Dual VOLE Generator
Theorem 7. Let n = n(λ), n(cid:48) = n(cid:48)(λ), t = t(λ), F = F(λ) be such that LPN(n(cid:48)−n, n(cid:48), t/n(cid:48))
holds over F with respect to the code with parity-check matrix Hn(cid:48),n, and let MPFSS be a
secure MPFSS scheme. Then Gdual is a secure VOLE generator.
In the following, we prove Theorem 7.
Correctness. ux + v = (µx − ν0) · Hn(cid:48),n = (µx + ν1 − µx) · Hn(cid:48),n = ν1 · Hn(cid:48),n = w.
VOLE Generator Gdual
Compressing Vector OLE
13
– Parameters: noise parameter t = t(λ).
– Building blocks: a (dual) code generator C(cid:48) (which generates on input (n, n(cid:48), F) a public matrix
Hn(cid:48),n ∈ Fn(cid:48)×n, a random matrix by default), and a multi-point function secret sharing MPFSS =
(MPFSS.Gen, MPFSS.Eval, MPFSS.FullEval).
R← Ft.
R← MPFSS.Gen(1λ, fS,xy). Set
– Gdual.Setup(1λ, F, n, n(cid:48), x) : pick a random size-t(λ) subset S of [n(cid:48)], and a random vector y
– Gdual.Expand(σ, seedσ).
Let s1  n2
arithmetic operations.
Instantiating Gdual with parameters (t, n, n(cid:48)) over a ﬁeld F yields a VOLE generator with
seed length t · ((cid:100)log n(cid:101)(λ + 2) + λ + log2 |F|) bits and output length 2n group elements (for
Expand(0,·)) or n group elements (for Expand(1,·)). This VOLE generator is (T, ε)-secure
iﬀ LPN(n(cid:48)−n, n(cid:48), t/n(cid:48)) with code Dn(cid:48)−n,n is (T (cid:48), ε)-secure and the MPFSS is (T (cid:48)(cid:48), ε)-secure,
with T (cid:48) = T − O(n(cid:48) · (tλ + n log2 |F|)) and T (cid:48)(cid:48) = T − O(n(cid:48) · n · log2 |F|).
3.4 Optimizations via Structured Matrices
We describe optimizations to the VOLE generators described so far. These optimizations
allow us to obtain VOLE generators with constant computational overhead.
A downside of using both Gprimal and Gdual with a random code is that this in-
curs quadratic computational complexity. Ideally, we would like to be able to compute
Gprimal.Expand and Gdual.Expand in time O(n) (counted as a number of arithmetic opera-
tions and PRG evaluations).
Note that the complexity of Gprimal.Expand and Gdual.Expand is dominated by multipli-
cation by the matrix Ck,n (or Hn(cid:48),n) as well as evaluation of MPFSS.FullEval. In Section 4,
we discuss optimization of MPFSS.FullEval. We now discuss an approach for decreasing the
cost of the matrix-vector multiplication. These optimizations together allow us to reduce
the computational complexity of both VOLE generators from quadratic to linear in the
size parameter n.
Primal construction A signiﬁcant optimization of Gprimal can be obtained by replacing the
uniformly random matrix Ck,n with a local linear code, where each column contains a small
(constant) number of random non-zero coordinates. We note that using local alternatives
to random linear encoding is relatively standard and is not known to weaken the security.
Similar hardness conjectures were made in [Ale03, ADI+17]. Using such codes, computing
a·Ck,n for any vector a can be done using O(n) arithmetic operations. Note that arithmetic
pseudorandom generators with constant computational overhead can be obtained from the
LPN assumption for some linear-time encodable code, see, e.g., [IKOS08]. This is needed
for implementing the primal construction in linear time.
Dual construction In the dual case, we need the matrix Hn(cid:48),n to deﬁne a compressive linear
mapping, such that the code whose parity-check matrix is Hn(cid:48),n satisﬁes the LPN assump-
tion. There are several alternative possibilities to implement this compressive mapping in
linear time, which we outline below.
– One possibility is to use the transpose of the (randomized) linear-time encodeable
code from [DI14]. As discussed in [DI14], LPN is a plausible assumption for these
linear-time encodable codes as well as their dual codes. Moreover, the (compressive)
transpose mapping can be computed with the same circuit complexity as the encoding
(cf. [IKOS08]).
– Alternatively, one can replace the code from [DI14] by an LDPC code. The parity-
check matrix of an LDPC code is a sparse matrix, for which LPN is conjectured to
hold [Ale03, ADI+17]. Furthermore, while a naive encoding of an LDPC code requires
quadratic time, recent results have established the existence of very eﬃcient linear-
time encoding algorithms for LDPC codes, both in the binary case [LM10] and in
the general case, for codes over arbitrary ﬁelds [KS12]. The latter requires at most
n(cid:48) · rw(Dn(cid:48)−n,n) + w(Dn(cid:48)−n,n) ﬁeld multiplications, where Dn(cid:48)−n,n is the parity check
Compressing Vector OLE
15
matrix of Hn(cid:48),n, rw(Dn(cid:48)−n,n) denotes the row-weight of Dn(cid:48)−n,n, and w(Dn(cid:48)−n,n) denotes
its total weight (i.e., the number of its non-zero elements); for n(cid:48) = O(n), this gives a
linear time algorithm since Dn(cid:48)−n,n is sparse.
– Eventually, we observe that the only property we require from the encoding is to “suﬃ-
ciently mix” the encoded vector: we do not require any structure or decoding properties.
Hence, we conjecture that any suitable (linear-time) heuristic mixing strategy should
work. A possibility is to apply a sequence of random atomic operations (switching two