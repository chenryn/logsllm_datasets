### Optimized Text

#### Setup and Expansion in VOLE Generators
- **Setup Function:**
  \[
  (seed0, seed1) \leftarrow \text{Setup}(1^\lambda, F, n, x)
  \]
- **Probability Calculation:**
  \[
  \Pr\left[(F, 1^n, x, x') \leftarrow A(1^\lambda), (u, v) \leftarrow \text{Expand}(0, seed0), w \leftarrow \text{Expand}(1, seed1), v \leftarrow w - ux\right] \approx \Pr\left[(F, 1^n, x, x') \leftarrow A(1^\lambda)\right]
  \]

**Observation:**
One can trivially realize the above definition by letting `Setup` directly output:
- \( seed0 \leftarrow (u, v) \)
- \( seed1 \leftarrow ux + v \)

and defining `Expand` to be the identity function. However, we are interested in non-trivial realizations of VOLE generators where the seed produced by `Setup` is significantly shorter than the number \( n \) of pseudo-random VOLE instances being produced.

#### Primal VOLE Generator
We present the first of two VOLE generator constructions. To simplify the presentation, we introduce a "spreading function" \( \text{spread}_n \) (for any integer \( n \)) which takes as input a subset \( S = \{s_1, \ldots, s_{|S|}\} \) of \([n]\) (with \( s_1 < s_2 < \cdots < s_{|S|} \)) and outputs a vector in \( F^n \).

- **Parameters:**
  - \( k, n, t \) are positive integers.
  - \( F \) is a finite field.
  - \( \epsilon > 0 \).

- **Expansion:**
  The `Expand` algorithm expands a seed of size \( \tilde{O}(n^{1/2 + \epsilon}) \) into a pseudo-random VOLE of size \( O(n) \). The best known attack takes subexponential time \( O(e^{n^{2\epsilon}}) \).

- **Computational Efficiency:**
  - Expanding the seed requires \( O((k + t) \cdot n) \) arithmetic operations.
  - \( t \cdot n \) PRG evaluations.

- **Seed Length and Output Length:**
  Instantiating \( G_{\text{primal}} \) with parameters \((k, n, t)\) over a field \( F \) yields a VOLE generator with:
  - Seed length: \( t \cdot (\lceil \log n \rceil (\lambda + 2) + \lambda) + (t + k) \cdot \log^2 |F| \) bits.
  - Output length: 
    - \( 2n \) group elements for \( \text{Expand}(0, \cdot) \).
    - \( n \) group elements for \( \text{Expand}(1, \cdot) \).

- **Security:**
  This VOLE generator is \((T, \epsilon)\)-secure if:
  - LPN\((k, n, t/n)\) with code \( C_{k,n} \) is \((T', \epsilon)\)-secure.
  - MPFSS is \((T'', \epsilon)\)-secure.
  - \( T' = T - O((k + t) \cdot n \cdot \log^2 |F| + t \cdot n \cdot \lambda) \).
  - \( T'' = T - O((k + t) \cdot n \cdot \log^2 |F|) \).

**Limitation:**
The expansion factor of the VOLE generator is limited to subquadratic. We describe an alternative "dual" approach that overcomes this limitation and allows for an arbitrary polynomial expansion.

#### Dual VOLE Generator
- **Theorem 7:**
  Let \( n = n(\lambda) \), \( n' = n'(\lambda) \), \( t = t(\lambda) \), and \( F = F(\lambda) \) such that LPN\((n' - n, n', t/n')\) holds over \( F \) with respect to the code with parity-check matrix \( H_{n',n} \). Let MPFSS be a secure MPFSS scheme. Then \( G_{\text{dual}} \) is a secure VOLE generator.

- **Correctness:**
  \[
  ux + v = (\mu x - \nu_0) \cdot H_{n',n} = (\mu x + \nu_1 - \mu x) \cdot H_{n',n} = \nu_1 \cdot H_{n',n} = w
  \]

- **Parameters:**
  - Noise parameter \( t = t(\lambda) \).
  - Building blocks: a (dual) code generator \( C' \) (which generates on input \((n, n', F)\) a public matrix \( H_{n',n} \in F^{n' \times n} \)), and a multi-point function secret sharing MPFSS.

- **Setup and Expand:**
  - \( G_{\text{dual}}.\text{Setup}(1^\lambda, F, n, n', x) \): pick a random size-\( t(\lambda) \) subset \( S \) of \([n']\), and a random vector \( y \in F^t \). Set \( \text{seed}_0 \leftarrow \text{MPFSS.Gen}(1^\lambda, f_S, xy) \).
  - \( G_{\text{dual}}.\text{Expand}(\sigma, \text{seed}_\sigma) \).

- **Seed Length and Output Length:**
  Instantiating \( G_{\text{dual}} \) with parameters \((t, n, n')\) over a field \( F \) yields a VOLE generator with:
  - Seed length: \( t \cdot (\lceil \log n \rceil (\lambda + 2) + \lambda + \log^2 |F|) \) bits.
  - Output length:
    - \( 2n \) group elements for \( \text{Expand}(0, \cdot) \).
    - \( n \) group elements for \( \text{Expand}(1, \cdot) \).

- **Security:**
  This VOLE generator is \((T, \epsilon)\)-secure if:
  - LPN\((n' - n, n', t/n')\) with code \( D_{n' - n, n} \) is \((T', \epsilon)\)-secure.
  - MPFSS is \((T'', \epsilon)\)-secure.
  - \( T' = T - O(n' \cdot (t\lambda + n \log^2 |F|)) \).
  - \( T'' = T - O(n' \cdot n \cdot \log^2 |F|) \).

#### Optimizations via Structured Matrices
- **Optimization Goal:**
  We aim to reduce the computational complexity of both VOLE generators from quadratic to linear in the size parameter \( n \).

- **Primal Construction:**
  - **Optimization:**
    Replace the uniformly random matrix \( C_{k,n} \) with a local linear code, where each column contains a small (constant) number of random non-zero coordinates.
  - **Efficiency:**
    Using such codes, computing \( a \cdot C_{k,n} \) for any vector \( a \) can be done using \( O(n) \) arithmetic operations.
  - **LPN Assumption:**
    Arithmetic pseudorandom generators with constant computational overhead can be obtained from the LPN assumption for some linear-time encodable code, see, e.g., [IKOS08].

- **Dual Construction:**
  - **Compressive Mapping:**
    The matrix \( H_{n',n} \) should define a compressive linear mapping such that the code whose parity-check matrix is \( H_{n',n} \) satisfies the LPN assumption.
  - **Implementations:**
    - **Randomized Linear-Time Encodable Code:**
      Use the transpose of the (randomized) linear-time encodeable code from [DI14]. LPN is a plausible assumption for these codes and their duals. The transpose mapping can be computed with the same circuit complexity as the encoding.
    - **LDPC Code:**
      Replace the code from [DI14] with an LDPC code. The parity-check matrix of an LDPC code is sparse, and LPN is conjectured to hold. Recent results have established the existence of very efficient linear-time encoding algorithms for LDPC codes, both in the binary case [LM10] and in the general case [KS12].
    - **Heuristic Mixing Strategy:**
      Any suitable (linear-time) heuristic mixing strategy should work. One possibility is to apply a sequence of random atomic operations (switching two elements, etc.).

By employing these optimizations, we can achieve VOLE generators with constant computational overhead, reducing the complexity from quadratic to linear in the size parameter \( n \).