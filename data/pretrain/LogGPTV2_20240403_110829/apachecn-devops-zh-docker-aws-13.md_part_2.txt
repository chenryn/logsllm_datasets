 Effect: Allow
 Principal:
 Service: codebuild.amazonaws.com
 Action:
 - ecr:GetDownloadUrlForLayer
 - ecr:BatchGetImage
 - ecr:BatchCheckLayerAvailability
  TodobackendRepository:
    Type: AWS::ECR::Repository
  ...
  ...
```
在前面的示例中，您创建了一个名为`docker-in-aws/codebuild`的新存储库，这将产生一个名为`.dkr.ecr..amazonaws.com/docker-in-aws/codebuild`的完全限定存储库(例如，`385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/codebuild`)。请注意，您必须授予对代码构建服务的拉取访问权限，因为代码构建需要拉取映像作为其构建容器运行。
现在，您可以通过使用`aws cloudformation deploy`命令将更改部署到 ecr 栈中，您可能还记得在“使用 ECR 发布 Docker 映像”一章中，该命令被部署到名为 ECR 存储库的栈中:
```
> export AWS_PROFILE=docker-in-aws
> aws cloudformation deploy --template-file ecr.yml --stack-name ecr-repositories
Enter MFA code for arn:aws:iam::385605022855:mfa/justin.menga:
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - ecr-repositories
```
部署完成后，您需要使用新 ECR 存储库的完全限定名重新标记之前创建的映像，之后您可以登录 ECR 并发布映像:
```
> docker tag codebuild 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/codebuild
> eval $(aws ecr get-login --no-include-email)
WARNING! Using --password via the CLI is insecure. Use --password-stdin.
Login Succeeded
> docker push 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/codebuild
The push refers to repository [385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/codebuild]
770fb042ae3b: Pushed
0cdc6e0d843b: Pushed
395fced17f47: Pushed
3abf4e550e49: Pushed
0a6dfdbcc220: Pushed
27760475e1ac: Pushed
5270ef39cae0: Pushed
2c88066e123c: Pushed
b09386d6aa0f: Pushed
1ed7a5e2d1b3: Pushed
cd7100a72410: Pushed
latest: digest:
sha256:858becbf8c64b24e778e6997868f587b9056c1d1617e8d7aa495a3170761cf8b size: 2618
```
# 向应用存储库添加代码构建支持
无论何时创建代码构建项目，都必须定义代码构建应该如何测试和构建应用源代码，然后发布应用工件和/或 Docker 映像。代码构建在构建规范中定义了这些任务，该规范提供了代码构建代理在运行构建时应该执行的构建指令。
代码构建允许您以多种方式提供构建规范:
*   **自定义**:代码构建寻找在项目的源存储库中定义的文件。默认情况下，这是一个名为`buildspec.yml`的文件；但是，您也可以在构建规范所在的位置配置自定义文件。
*   **预配置**:当您创建一个代码构建项目时，您可以定义一个构建规范作为项目设置的一部分。
*   **按需**:如果使用 AWS CLI 或 SDK 启动代码构建构建作业，则可以覆盖预配置或自定义的构建规范
一般来说，我建议使用自定义方法，因为它允许存储库所有者(通常是您的开发人员)独立于 CodeBuild 来配置和维护规范；这是我们将采取的方法。
以下示例演示了在名为`buildspec.yml`的文件中将构建规范添加到 todobackend 存储库中:
```
version: 0.2
phases:
  pre_build:
    commands:
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --storage-driver=overlay&
      - timeout -t 15 sh -c "until docker info; do echo .; sleep 1; done"
      - export BUILD_ID=$(echo $CODEBUILD_BUILD_ID | sed 's/^[^:]*://g')
      - export APP_VERSION=$CODEBUILD_RESOLVED_SOURCE_VERSION.$BUILD_ID
      - make login
  build:
    commands:
      - make test
      - make release
      - make publish
  post_build:
    commands:
      - make clean
      - make logout
```
构建规范从指定每个构建规范中必须包含的版本开始，截至本书撰写之时，最新版本为`0.2`。接下来，您定义了阶段序列，这是必需的，定义了代码构建将在构建的各个阶段运行的命令。在前面的示例中，您定义了三个阶段:
*   `pre_build`:代码构建将在构建之前运行的命令。在这里，您可以运行命令，例如登录到 ECR，或者成功运行构建所需的任何其他命令。
*   `build`:这些命令运行您的构建步骤。
*   `post_build`:代码构建将在您构建后运行的命令。这些通常涉及清理任务，如注销 ECR 和删除临时文件。
您可以在[https://docs . AWS . Amazon . com/CodeBuild/latest/user guide/build-spec-ref . html](https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html)上找到更多关于 code build 构建规范的信息。
在`pre_build`阶段，您执行以下操作:
*   前两个命令用于启动自定义代码构建映像中的 Docker 守护程序；`nohup`命令启动 Docker 守护程序作为后台任务，而`timeout`命令用于确保 Docker 守护程序已成功启动，然后再尝试继续。
*   导出一个`BUILD_ID`环境变量，用于将构建信息添加到将为您的构建生成的应用版本中。该`BUILD_ID`值将被添加到附加到构建阶段构建的 Docker 映像的应用版本标签中，因此，它只能包含与 Docker 的标签格式兼容的字符。代码构建作业标识通过`CODEBUILD_BUILD_ID`环境变量暴露给构建代理，其格式为`:`，其中``是 UUID 值。Docker 标记不支持代码构建作业标识中的冒号；因此，您可以使用`sed`表达式去除作业标识的``:部分，只留下将包含在 Docker 标签中的作业标识值。
*   导出`APP_VERSION`环境变量，该变量在 Makefile 中用于定义在构建的 Docker 映像上标记的应用版本。当您将代码构建与代码管道一起使用时，重要的是要理解呈现给代码构建的源工件实际上是位于 S3 桶中的压缩版本，代码管道是在从您的源代码存储库中克隆源代码后创建的。CodePipeline 不包含任何 Git 元数据；因此，todobackend Makefile - `export APP_VERSION ?= $(shell git rev-parse --short HEAD`中的`APP_VERSION`指令将失败，因为 Git 客户端将没有任何可用的 Git 元数据。幸运的是，GNU Make 中的`?=`语法意味着使用前面提到的环境变量的值，如果它已经在环境中定义了的话。因此，我们可以在代码构建环境中导出`APP_VERSION`，Make 将只使用配置的值，而不是运行 Git 命令。在前面的示例中，您从名为`CODEBUILD_RESOLVED_SOURCE_VERSION`的变量构建了`APP_VERSION`，该变量是源存储库的完整提交哈希，由 CodePipeline 设置。您还可以追加在前面的命令中计算的`BUILD_ID`变量，这允许您将特定的 Docker 映像构建跟踪到代码构建构建作业。
*   使用源存储库中包含的`make login`命令登录 ECR。
一旦`pre_build`阶段完成，构建阶段就很简单了，只需执行我们在本书中手动执行的各种构建步骤。最后一个`post_build`阶段运行`make clean`任务来拆除 Docker Compose 环境，然后通过运行`make logout`命令删除任何本地 ECR 凭证。
需要注意的一点是`post_build`阶段始终运行，即使构建阶段失败。这意味着您应该只为将要运行的操作保留`post_build`任务，而不管构建是通过还是失败。例如，您可能想将`make publish`任务作为`post_build`步骤运行；但是，如果您这样做了，并且前一个构建阶段失败了，考虑到它被定义为一个`post_build`步骤，CodeBuild 仍然会尝试运行 make publish 任务。将 make publish 任务作为构建阶段的最终操作可确保如果 make test 或 make release 失败，构建阶段将立即退出并出现错误，绕过 make publish 操作并继续执行`post_build`步骤中的清理任务。
您可以在[https://docs . AWS . Amazon . com/CodeBuild/latest/user guide/view-build-details . html # view-build-details-phases](https://docs.aws.amazon.com/codebuild/latest/userguide/view-build-details.html#view-build-details-phases)上找到关于所有 code build 阶段的更多信息，以及它们是否在成功/失败时执行。
您需要执行的最后一步是将您的更改提交并推送到您的 Git 存储库，以便在您配置代码管道和代码构建时，新创建的`buildspec.yml`文件可用:
```
> git add -A
> git commit -a -m "Add build specification"
[master ab7ac16] Add build specification
 1 file changed, 19 insertions(+)
 create mode 100644 buildspec.yml
> git push
Counting objects: 3, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 584 bytes | 584.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:docker-in-aws/todobackend.git
   5fdbe62..ab7ac16 master -> master
```
# 使用代码管道创建连续集成管道
现在您已经建立了支持代码构建的先决条件，您可以创建一个持续集成的代码管道管道，该管道将使用代码构建来测试、构建和发布您的 Docker 映像。持续集成侧重于持续地将应用源代码变更合并到您的主分支中，并通过创建一个构建并对其运行自动化测试来验证变更。
根据本章的第一个图表，当您为持续集成配置一个代码管道管道时，这通常涉及两个阶段:
*   **源阶段**:下载源应用库，并使其可用于后续阶段。对于我们的用例，您将把 CodePipeline 连接到 GitHub 存储库的主分支，随后对该存储库的提交将自动触发新的管道执行。
*   **构建阶段**:运行在源应用存储库中定义的构建、测试和发布工作流。对于我们的用例，我们将使用 CodeBuild 来运行这个阶段，它将执行您在本章前面创建的源存储库`buildspec.yml`文件中定义的构建任务。
# 使用 AWS 控制台创建代码管道管道
首先，从 AWS 控制台选择**服务**，然后选择**代码管道**。如果这是您第一次使用代码管道，您将看到一个介绍页面，您可以单击“开始”按钮启动代码管道向导。
首先要求您输入管道的名称，单击“下一步”后，系统会提示您设置源提供程序，该程序定义将在管道中使用的源存储库或文件的提供程序:
![](img/db98d662-8e5f-410b-8afe-1492bf859b6d.png)
从下拉菜单中选择 GitHub 后，单击“连接到 GitHub”按钮，该按钮会将您重定向到 GitHub，系统会提示您登录并授予您对 GitHub 帐户的代码管道访问权限:
![](img/9b6c00bb-874c-48ea-9185-b8f5d82bc591.png)
单击授权 aws-codesuite 按钮后，您将被重定向回 CodePipeline 向导，您可以选择 todobackend 存储库和主分支: