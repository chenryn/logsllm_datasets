2007.
[30] Z. Zhou and T. Benson. Towards a safe playground for
https and middleboxes with qos2. In ACM SIGCOMM
Workshop on Hot Topics in Middleboxes and Network
Function Virtualization, 2015.
APPENDIX
A. SECURITY PROOFS
A.1 Detection Property
Proof. We consider a successful adversary against the
detection property of our scheme. Based on the detection
experiment given in Section 2.3, this implies that there exists
a keyword w∗ such that:
1. SE has published in B the trapdoor T ∗ = F (w∗)x(cid:48)
2. S output a valid ciphertext c∗ = (c∗
3. the detection test outputs 1;
4. the decryption of c∗ gives back w∗.
3, c∗
4);
;
1, c∗
2, c∗
572In particular, the second point implies that:
is the bit chosen by the challenger.
H(u
∗
c
) − c
c
2
3 = gs∗
∗
1 ,
∗
4 = a,
1 = gr∗
∗
1 ,
where
(s
= (c
∗
∗
1)x,
s
∗
∗
∗
),
2) = G(s
1, s
2 ⊕ s
∗
∗
∗
1,
t
= c
= e(pks∗
The third point implies that c∗
3, T ∗). We then obtain that
u
∗
e(c∗
∗
2
)).
RG, F (t
4 − H(˜u) (cid:54)= a with ˜u =
e(c
e(c
∗
∗
)
)
∗
∗
3, T
∗
3, T
∗
3, T
2
RG, F (t
(cid:54)= e(pks∗
(cid:54)= e(gx(cid:48).s∗
(cid:54)= e(gs∗
1
2
∗
)),
∗
, F (t
)x(cid:48)
∗
)),
2
)
e(c
As T ∗ = F (w∗)x(cid:48)
and since, in the detection experiment,
we have Detect(T,R) = 0, which is equivalent to t∗ = w∗.
Then
1 , F (t
).
∗
∗
3, T
)
e(c
(cid:54)= e(gs∗
2
1 , T
∗
).
But since the ciphertext is correct, the equality c∗
holds (see above). Then
3 = gs∗
2
1
∗
∗
3, T
)
e(c
(cid:54)= e(c
∗
3, T
∗
),
which is unconditionally infeasible.
We ﬁnally evaluate the probability of false positive, that
is a legitimate token t that would match a keyword w, with
t (cid:54)= w. That implies that:
SE, F (t)) = e(c3, F (w)x(cid:48)
),
1 , F (w)x(cid:48)
, F (t)) = e(gs2
e(pks2
e(gx(cid:48)·s2
),
e(g1, F (t))x(cid:48)·s2 = e(g1, F (w))s2·x(cid:48)
1
.
We ﬁnally obtain that F (w) = F (t), that is a collision in the
hash function F , which happens with negligible probability.
This concludes the proof.
A.2 Trafﬁc Indistinguishability Property
Proof. We prove Theorem 2 with an hybrid argument.
We construct a simulator S for the Send procedure against
which an adversary A against the tr − ind experiment has
advantage 1/2. In order to obtain this, we want the output
of S to be perfectly random.
We can assume that the messages sent by A to the chal-
lenger do not match any rule.
Indeed, if they match the
same rule, indistinguishability is meaningless, and if they
match diﬀerent rules, indistinguishability is trivially broken,
though one-wayness remains.
Game G0. This game is the original game, which means
that S follows the Send procedure. The adversary chooses
T0 and T1 and the challenger encrypts one of them. The
adversary’s view is the following encrypted traﬃc, where b
c1,b = grb
1 ;
c2,b = s1,b ⊕ Tb;
c3,b = g
c4,b = H(ub) + a mod q.
s2,b
1
;
Throughout the sequence of games, we denote Si the prob-
ability that the bit b(cid:48) output by A is b for game Gi. We
have:
Advtr−ind
(cid:12)(cid:12)(cid:12) = |2 · S0 − 1| .
(cid:12)(cid:12)(cid:12)2 · Pr
(cid:105) − 1
Exptr−ind
π,A (λ) =
π,A = 1
(cid:104)
We stress that c1 does not depend on Tb and is fully ran-
a request to the random oracle. The input of G is (cid:103)pkR
domized as rb is a random element of Zq.
Game G1. We then prove that c2 is also a random element
in Zq (in the random oracle model). As the computation
of c2 corresponds to a one-time pad, our work is to prove
that s1is a random element. In fact, s1 is the output of the
hash function G, modelled here as a random oracle. The
only possibility for the adversary is then to obtain s1 by
rb ,
which means that the adversary can recover s1 if he is able
to compute gx·rb
1 , which exactly
corresponds to an instance of the CDH problem.
However, an adversary B against CDH cannot directly use
A to win the game. One possibility could have been to make
us of the bilinear map but, as we use an asymmetric pairing,
he cannot verify which of A’s requests to the random oracle
is indeed the answer to the CDH challenge. Thus, denoting
gG the number of A’s requests to the random oracle G, for
all adversary B against CDH, we obviously have:
1 and(cid:103)pkR = gx
from c1 = grb
1
|Pr(S0) − Pr(S1)| ≤ 1
qG
AdvCDHB (λ).
Game G2. We now focus on c3. In fact, as c3 = gs2
1 , this
step can be treated as previously since the only way for the
adversary to use c3 to ﬁnd b is to obtain s2, making the right
request to the random oracle G. It is then obvious to prove
that for all adversary B against CDH, we have:
|Pr(S1) − Pr(S2)| ≤ 1
qG
AdvCDHB (λ).
1
combining c1, c2,(cid:103)pkR and pkSE. The
Game G3. We ﬁnally focus on c4. In this game, we replace
u = e(pks2,i
SE , F (ti)) in the computation of c4 by a random
uniform value u∗. We argue that the adversary has to break
an instance of the GDDHE problem to see the diﬀerence.
We thus have to show that we truly fall into a GDDHE in-
stance. In fact, the adversary has access to elements of the
form of gP (rb,s2,x(cid:48),x)
resulting polynomial P has monomials of maximal degree 1,
as the exponents rb, s2 and x(cid:48) are kept secret. A has also
access to elements in the form of gQ(αi,x(cid:48))
. Here, the αi’s
are the (unknown) discrete logarithms of F (ti) that A can
compute for any tokens of his choice, provided that those
tokens has the same type as the ones sent to the challenger.
As the αi’s are unknown, each monomial of Q has degree
at most 2, corresponding to elements of the form gs2·x(cid:48)·αb
.
However, A has to compute an element in Gt which has the
form gf (s2,x(cid:48),αb)
. The exponent f (s2, x(cid:48), αb) = s2 · x(cid:48) · αb
is a monomial of degree 3 which is obviously linearly inde-
pendent of P and Q. As such, the view of the adversary is
truly an instance of the GDDHE assumption. Let C be an
2
t
t
573Then, according to the rule indistinguishability game, the
adversary Ag is allowed to create any encrypted traﬃc of its
choice, using any keyword w of its choice, executing the Send
procedure of the scheme π. At each execution, the adversary
should ask for the random oracle F on input the keyword
w. If it asks for wb, then it becomes easy for Ag to deter-
mine whether b = 0 or 1, by using the bilinear property of e,
as e(g1, Tb) = e(pkSE, F (wb)). But this happens only with
negligible probability 2−µ(λ), with µ(λ) ∈ ω(log λ), since
the rule set has high-min entropy. Otherwise, the adver-
sary has to distinguish between the triplet (g1, gx(cid:48)
0 ) and
(g1, gx(cid:48)
1 ), with unknown h0 and h1 (since corresponding
to unknown outputs of F ), which is obviously uncondition-
ally infeasible since the adversary has not enough material
to have a conclusion better than random guessing.
1 , hx(cid:48)
1 , hx(cid:48)
adversary against the GDDHE assumption. As previously,
for all C and denoting qH the number of A’s requests to the
random oracle, we have:
|Pr(S2) − Pr(S3)| ≤ 1
qH
AdvGDDHE
C
(λ).
Now, S’s output is a perfectly random value and we have
S3 = 1/2.
Thus, we have:
Advtr−ind
π,A (λ) ≤ 2
qG
AdvCDHB (λ) +
1
qH
AdvGDDHE
C
(λ),
so the adversary’s advantage is negligible.
A.3 Rule Indistinguishability Property
Proof. We consider an adversary A = (Af ,Ag) having
access to the public parameters, including the SE public key
pkSE = gx(cid:48)
1 . The ﬁrst part of the adversary Af outputs two
keywords w0 and w1, following a high min-entropy distribu-
tion, and the challenger executes RuleGen on input wb for a
secret bit b ∈ {0, 1}. Such procedure outputs Tb = F (wb)x(cid:48)
.
The resulting Tb is given to the second part of the adversary,
Ag. We remember that Af and Ag cannot communicate one
with each other, since that would allow them to trivially
break the rule indistinguishability property.
Note that the output of Tb implicitly ﬁxes the output of
the random oracle F for the input wb.
574