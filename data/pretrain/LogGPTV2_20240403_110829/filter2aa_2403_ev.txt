ecx, DWORD PTR [edx-1] 
        call  
@f3@12 
        push  
eax 
        push  
OFFSET $SG81390 
        call  
_printf 
        add  
esp, 8 
从以上程序我们可以看到，函数调用采用了指令 RET N 带一个操作数的方式返回 SP 堆栈指针。由此
可以判断，调用方函数通过栈传递了多少个外部参数。 
64.3.1  GCC regparm 
从某种意义上来讲，GCC regparm 由 fastcall 进化而来。这种规范允许编程人员通过编译选项“-mregparm”
设置通过寄存器传递的参数总数（最大值为 3）。换句话说，这种规范最多可通过 3 个寄存器，即 EAX、EDX
和 ECX 传递函数参数。 
当然，如果“-mregparm”的值小于 3，那么就不会全面使用这三个寄存器。 
这种约定要求调用方函数在调用过程结束以后调整栈指针，将参数栈恢复到其初始状态。 
有关案例请参阅本书的 19.1.1 节。 
64.3.2  Watcom/OpenWatcom 
这被称为“寄存器调用规范”。头四个参数由寄存器 EAX、EDX、EBX 和 ECX 传递，其余的所有参
数都则通过堆栈传递。在使用这种调用约定时，函数必须其函数名前添加标识符“__watcom”，与其他采
用不同调用规范的函数区分开来。 
64.4  thiscall 
这是一种方便 C++类成员调用 this 指针而特别设定的调用规范。 
MSVC 使用 ECX 寄存器传递 this 指针。 
而 GCC 则把 this 指针作为被调用方函数的第一个参数传递。在汇编层面，这个指针显而易见：所有的
异步社区会员 dearfuture(15918834820) 专享 尊重版权
646 
逆向工程权威指南（下册） 
类函数都比源代码多出来一个参数。 
有关详情，请参阅本书的 51.1.1 节。 
64.5  64 位下的 x86 
64.5.1  Windows x64 
64 位环境下的参数传递方法在某种程度上与 fastcall 函数比较类似：头四个参数由寄存器 RCX、RDX、
R8 和 R9 传递，而其余的参数都通过栈来传递。调用方函数必须预留 32 个字节或者 4 个 64 位的存储空间，
以便被调用方函数保存头四个参数。小型函数可以仅凭寄存器就获取所有参数，而大型函数就可能需要保
存这些传递参数的寄存器，把它们腾挪出来供后续指令调用。 
调用方函数负责调整栈指针到其初始状态。 
此外，Windows x86-64 系统的 DLL 文件也采用了这种调用规范。也就是说，虽然 Win32 系统 API 遵循
的是 stdcall 规范，但是 Win64 系统遵循的是 Win64 规范、不再使用 stdcall 规范。 
以下述程序为例： 
#include  
void f1(int a, int b, int c, int d, int e, int f, int g) 
{ 
        printf ("%d %d %d %d %d %d %d\n", a, b, c, d, e, f, g); 
}; 
int main() 
{ 
        f1(1,2,3,4,5,6,7); 
}; 
指令清单 64.6  MSVC 2012 /0b 
$SG2937 DB   
'%d %d %d %d %d %d %d', 0aH, 00H 
main     PROC 
        sub  
rsp, 72  
; 00000048H 
        mov  
DWORD PTR [rsp+48], 7 
        mov  
DWORD PTR [rsp+40], 6 
        mov  
DWORD PTR [rsp+32], 5 
        mov  
r9d, 4 
        mov  
r8d, 3 
        mov  
edx, 2 
        mov  
ecx, 1 
        call  
f1 
        xor  
eax, eax 
        add  
rsp, 72  
; 00000048H 
        ret  
0 
main     ENDP 
a$ = 80 
b$ = 88 
c$ = 96 
d$ = 104 
e$ = 112 
f$ = 120 
g$ = 128 
f1  
   PROC 
$LN3: 
        mov  
DWORD PTR [rsp+32], r9d 
        mov  
DWORD PTR [rsp+24], r8d 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 64 章  参数的传递方法（调用规范） 
647 
        mov  
DWORD PTR [rsp+16], edx 
        mov  
DWORD PTR [rsp+8], ecx 
        sub  
rsp, 72  
; 00000048H 
        mov  
eax, DWORD PTR g$[rsp] 
        mov  
DWORD PTR [rsp+56], eax 
        mov  
eax, DWORD PTR f$[rsp] 
        mov  
DWORD PTR [rsp+48], eax 
        mov  
eax, DWORD PTR e$[rsp] 
        mov  
DWORD PTR [rsp+40], eax 
        mov  
eax, DWORD PTR d$[rsp] 
        mov  
DWORD PTR [rsp+32], eax 
        mov  
r9d, DWORD PTR c$[rsp] 
        mov  
r8d, DWORD PTR b$[rsp] 
        mov  
edx, DWORD PTR a$[rsp] 
        lea  
rcx, OFFSET FLAT:$SG2937 
        call  
printf 
        add  
rsp, 72  
; 00000048H 
        ret  
0 
f1       ENDP 
从以上的程序，我们可以很清楚地看到 7 个参数的传递过程。程序通过寄存器传递前 4 个参数、再通
过栈传递了其余 3 个参数。f1()函数通过序言部分的指令，把传递参数的四个寄存器的外来值存储到“暂存
空间/scratch space”里——这正是暂存空间的正确用法。编译器无法实现确定缺少了这 4 个寄存器之后，
后续代码是否还有足够的寄存器可用，所以会把这 4 个寄存器的数据保管起来，以方便掉配这 4 个寄存器。
Win64 调用规范约定：应由调用方函数分配暂存空间给被调用方函数使用。 
指令清单 64.7  优化的 MSVC 2012/0b 
$SG2777 DB   
'%d %d %d %d %d %d %d', 0aH, 00H 
a$ = 80 
b$ = 88 
c$ = 96 
d$ = 104 
e$ = 112 
f$ = 120 
g$ = 128 
f1  
   PROC 
$LN3: 
        sub  
rsp, 72  
; 00000048H 
        mov  
eax, DWORD PTR g$[rsp] 
        mov  
DWORD PTR [rsp+56], eax 
        mov  
eax, DWORD PTR f$[rsp] 
        mov  
DWORD PTR [rsp+48], eax 
        mov  
eax, DWORD PTR e$[rsp] 
        mov  
DWORD PTR [rsp+40], eax 
        mov  
DWORD PTR [rsp+32], r9d 
        mov  
r9d, r8d 
        mov  
r8d, edx 
        mov  
edx, ecx 
        lea  
rcx, OFFSET FLAT:$SG2777 
        call  
printf 
        add  
rsp, 72  
; 00000048H 
        ret  
0 
f1        ENDP 
main     PROC 
        sub  
rsp, 72  
; 00000048H 
        mov  
edx, 2 
        mov  
DWORD PTR [rsp+48], 7 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
648 
逆向工程权威指南（下册） 
        mov  
DWORD PTR [rsp+40], 6 
        lea  
r9d, QWORD PTR [rdx+2] 
        lea  
r8d, QWORD PTR [rdx+1] 
        lea  
ecx, QWORD PTR [rdx-1] 
        mov  
DWORD PTR [rsp+32], 5 
        call  
f1 
        xor  
eax, eax 
        add  
rsp, 72  
; 00000048H 
        ret  
0 
main     ENDP 
即使我们启用编译器的优化选项编译上述代码，编译器仍然会生成基本相同的指令；只是它不再分配
上面提到的“零散空间”，因为已经不需要它了。 
另外，我们也看到：在启用优化编译选项之后，MSVC 2012 将是一 LEA 指令（请参阅附录 A.6.2）进
行数值传递。笔者并不确定它分配的这种指令是否能够提升运行效率，或许真有这种作用吧。 
另外，本书的 74.1 节介绍了另外一个 Win64 调用约定的程序。有兴趣的读者可去看一下。 
64 位下的 Windows：在 C/C++下传递 this 指针 
C/C++编译器会使用 RCX 寄存器传递类对象的 this 指针、用 RDX 寄存器传递函数所需的第一个参数。
关于这个方面的例子，可以查看本书的 51.1.1 节。 
64.5.2  64 位下的 Linux 
64 位 Linux 程序传递参数的方法和 64 位 Windows 程序的传递方法几乎相同。区别在于，64 位 Linux
程序使用 6 个寄存器（RDI、RSI、RDX、RCX、R8、R9）传递前几项参数，而 64 位 Windows 则只利用 4
个寄存器传递参数。另外，64 位 Linux 程序没有上面提到的“零散空间”这种概念。如果被调用方函数的
寄存器数量紧张，它就可以用栈存储外来参数，把相关寄存器腾出来使用。 
指令清单 64.8  优化的 GCC 4.7.3  
.LC0: 
        .string "%d %d %d %d %d %d %d\n" 
f1: 
        sub  
rsp, 40 
        mov  
eax, DWORD PTR [rsp+48] 
        mov  
DWORD PTR [rsp+8], r9d 
        mov  
r9d, ecx 
        mov  
DWORD PTR [rsp], r8d 
        mov  
ecx, esi 
        mov  
r8d, edx 
        mov  
esi, OFFSET FLAT:.LC0 
        mov  
edx, edi 
        mov  
edi, 1 
        mov  
DWORD PTR [rsp+16], eax 
        xor  
eax, eax 
        call  
__printf_chk 
        add  
rsp, 40 
        ret 
main: 
        sub  
rsp, 24 
        mov  
r9d, 6 
        mov  
r8d, 5 
        mov  
DWORD PTR [rsp], 7 
        mov  
ecx, 4 
        mov  
edx, 3 
        mov  
esi, 2 
        mov  
edi, 1 
        call  
f1 
        add  
rsp, 24 
        ret 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 64 章  参数的传递方法（调用规范） 
649 
在上述指令操作 EAX 寄存器的时候，它只把数据写到了 RAX 寄存器的低 32 位（即 EAX）而没有直
接操作整个 64 位 RAX 寄存器。这是因为：在操作寄存器的低 32 位的时候，该寄存器的高 32 位会被自动清
零。或许，这只是把 x86 代码移植到 x86-64 平台时的偷懒做法。 
64.6  单/双精度数型返回值 
除了 Win64 规范以外的所有的调用规范都规定：当返回值为单/双精度浮点型数据时，被调用方函数应
当通过 FPU 寄存器 ST(0)传递返回值。而 Win64 规范规定：被调用方函数应当通过 XMM0 寄存器的低 32
位（float）或低 64 位寄存器（double）返回单/双精度浮点型数据。 
64.7  修改参数 
C/C++和其他语言的编程人员可能都曾问过这样一个问题：如果被调用方函数修改了外来参数的值，将
会发生什么情况？答案十分简单：外来参数都是通过栈传递的，因此被调用方函数修改的是栈里的数据。在
被调用方函数退出以后，调用方函数不会再访问自己传递给别人的参数。 
#include  
void f(int a, int b) 
{ 
        a=a+b; 
        printf ("%d\n", a); 
}; 
指令清单 64.9  MSVC 2012 
_a$ = 8  
; size = 4 
_b$ = 12  
; size = 4 
_f        PROC 
        push  
ebp 
        mov  
ebp, esp 