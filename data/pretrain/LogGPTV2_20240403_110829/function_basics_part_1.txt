Overview
FunctionBasics
ByExample
PostgreSQL Functions By Example
Joe Conway
PI:EMAIL
credativGroup
January 20, 2012
JoeConway SCALE10X-PGDay
Introduction
Overview
Uses
FunctionBasics
Varieties
ByExample
Languages
What are Functions?
Full fledged SQL objects
Many other database objects are implemented with them
Fundamental part of PostgreSQL’s system architecture
Created with CREATE FUNCTION
Executed through normal SQL
target-list:
SELECT myfunc(f1) FROM foo;
FROM clause:
SELECT * FROM myfunc();
WHERE clause:
SELECT * FROM foo WHERE myfunc(f1) = 42;
JoeConway SCALE10X-PGDay
Introduction
Overview
Uses
FunctionBasics
Varieties
ByExample
Languages
How are they Used?
Functions
Operators
Data types
Index methods
Casts
Triggers
Aggregates
JoeConway SCALE10X-PGDay
Introduction
Overview
Uses
FunctionBasics
Varieties
ByExample
Languages
What Forms Can They Take?
PostgreSQL provides four kinds of functions:
SQL
Procedural Languages
Internal
C-language
Arguments
Base, composite, or combinations
Scalar or array
Pseudo or polymorphic
VARIADIC
IN/OUT/INOUT
Return
Singleton or set (SETOF)
Base or composite type
Pseudo or polymorphic
http://www.postgresql.org/docs/9.1/interactive/sql-createfunction.html
JoeConway SCALE10X-PGDay
Introduction
Overview
Uses
FunctionBasics
Varieties
ByExample
Languages
SQL Functions
Behavior
Executes an arbitrary list of SQL statements separated by
semicolons
Last statement may be INSERT, UPDATE, or DELETE with
RETURNING clause
Arguments
Referenced by function body using $n: $1 is first arg, etc...
If composite type, then dot notation $1.name used to access
Only used as data values, not as identifiers
Return
If singleton, first row of last query result returned, NULL on no
result
If SETOF, all rows of last query result returned, empty set on
no result
http://www.postgresql.org/docs/9.1/interactive/xfunc-sql.html
JoeConway SCALE10X-PGDay
Introduction
Overview
Uses
FunctionBasics
Varieties
ByExample
Languages
Procedural Languages
User-defined functions
Written in languages besides SQL and C
Task is passed to a special handler that knows the details of
the language
Handler could be self-contained (e.g. PL/pgSQL)
Handler could be dynamically loaded (e.g. PL/Perl)
http://www.postgresql.org/docs/9.1/interactive/xplang.html
JoeConway SCALE10X-PGDay
Introduction
Overview
Uses
FunctionBasics
Varieties
ByExample
Languages
Internal Functions
Statically linked C functions
Could use CREATE FUNCTION to create additional alias
names for an internal function
Most internal functions expect to be declared STRICT
CREATE FUNCTION square_root(double precision)
RETURNS double precision AS
’dsqrt’
LANGUAGE internal STRICT;
http://www.postgresql.org/docs/9.1/interactive/xfunc-internal.html
JoeConway SCALE10X-PGDay
Introduction
Overview
Uses
FunctionBasics
Varieties
ByExample
Languages
C Language Functions
User-defined functions written in C
Compiled into dynamically loadable objects (also called shared
libraries)
Loaded by the server on demand
contrib is good source of examples
Same as internal function coding conventions
Require PG MODULE MAGIC call
Needs separate topic
http://www.postgresql.org/docs/9.1/interactive/xfunc-c.html
JoeConway SCALE10X-PGDay
Introduction
Overview
Uses
FunctionBasics
Varieties
ByExample
Languages
Language Availability
PostgreSQL includes the following server-side procedural
languages:
http://www.postgresql.org/docs/9.1/interactive/xplang.html
PL/pgSQL
Perl
Python
Tcl
Other languages available:
http://pgfoundry.org/softwaremap/trove_list.php?form_cat=311
Java
PHP
Ruby
R
Shell
others ...
JoeConway SCALE10X-PGDay
Overview
Creation
FunctionBasics
Attributes
ByExample
Creating New Functions
CREATE [ OR REPLACE ] FUNCTION
name ( [ [ argmode ] [ argname ] argtype [ { DEFAULT | = } defexpr ] [, ...] ] )
[ RETURNS rettype
| RETURNS TABLE ( colname coltype [, ...] ) ]
{ LANGUAGE langname
| WINDOW
| IMMUTABLE | STABLE | VOLATILE
| CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT
| [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER
| COST execution_cost
| ROWS result_rows
| SET configuration_parameter { TO value | = value | FROM CURRENT }
| AS ’definition’
| AS ’obj_file’, ’link_symbol’
} ...
[ WITH ( attribute [, ...] ) ]
http://www.postgresql.org/docs/9.1/interactive/sql-createfunction.html
JoeConway SCALE10X-PGDay
Overview
Creation
FunctionBasics
Attributes
ByExample
Dollar Quoting
Works for all character strings
Particularly useful for function bodies
CREATE OR REPLACE FUNCTION dummy () RETURNS text AS
$Q$
DECLARE
result text;
BEGIN
PERFORM ’SELECT 1+1’;
RETURN ’ok’;
END;
$Q$
LANGUAGE plpgsql;
http://www.postgresql.org/docs/9.1/static/sql-syntax-lexical.html#SQL-SYNTAX-DOLLAR-QUOTING
JoeConway SCALE10X-PGDay
Overview
Creation
FunctionBasics
Attributes
ByExample
Function Overloading
IN argument signature used
Avoid ambiguities:
Type (e.g. REAL vs. DOUBLE PRECISION)
Function name same as IN composite field name
VARIADIC vs same type scalar
CREATE OR REPLACE FUNCTION foo (text) RETURNS text AS $$
SELECT $1
$$ LANGUAGE sql;
CREATE OR REPLACE FUNCTION foo (int) RETURNS text AS $$
SELECT ($1 + 1)::text
$$ LANGUAGE sql;
SELECT foo(’42’), foo(41);
foo | foo
-----+-----
42 | 42
(1 row)
http://www.postgresql.org/docs/9.1/iJnoteerCaocntwiavye/xfunScC-oAvLeEr1l0oXad-P.hGtDmaly
Overview
Creation
FunctionBasics
Attributes
ByExample
Changing Existing Functions
Once created, dependent objects may be created
Must do DROP FUNCTION ... CASCADE to recreate
Or use OR REPLACE to avoid dropping dependent objects
Very useful for large dependency tree
Can’t be used in some circumstances (must drop/recreate
instead). You cannot:
change function name or argument types
change return type
change types of any OUT parameters
CREATE OR REPLACE FUNCTION ...;
JoeConway SCALE10X-PGDay
Overview
Creation
FunctionBasics
Attributes
ByExample
Volatility
VOLATILE (default)
Each call can return a different result
Example: random() or timeofday()
Functions modifying table contents must be declared volatile
STABLE
Returns same result for same arguments within single query
Example: now()
Consider configuration settings that affect output
IMMUTABLE
Always returns the same result for the same arguments
Example: lower(’ABC’)
Unaffected by configuration settings
Not dependent on table contents
select lower(’ABC’), now(), timeofday() from generate_series(1,3);
JoeConway SCALE10X-PGDay
Overview
Creation
FunctionBasics
Attributes
ByExample
Behavior with Null Input Values
CALLED ON NULL INPUT (default)
Function called normally with the null input values
RETURNS NULL ON NULL INPUT
Function not called when null input values are present
Instead, null is returned automatically
CREATE FUNCTION sum1 (int, int) RETURNS int AS $$
SELECT $1 + $2
$$ LANGUAGE SQL RETURNS NULL ON NULL INPUT;
CREATE FUNCTION sum2 (int, int) RETURNS int AS $$
SELECT COALESCE($1, 0) + COALESCE($2, 0)
$$ LANGUAGE SQL CALLED ON NULL INPUT;
SELECT sum1(9, NULL) IS NULL AS "true", sum2(9, NULL);
true | sum2
------+------
t | 9
(1 row)
JoeConway SCALE10X-PGDay
Overview
Creation
FunctionBasics
Attributes
ByExample
Security Attributes
SECURITY INVOKER (default)
Function executed with the rights of the current user
SECURITY DEFINER
Executed with rights of creator, like ”setuid”
CREATE TABLE foo (f1 int);
REVOKE ALL ON foo FROM public;
CREATE FUNCTION see_foo() RETURNS SETOF foo AS $$
SELECT * FROM foo
$$ LANGUAGE SQL SECURITY DEFINER;
\c - guest
You are now connected to database "postgres" as user "guest".
SELECT * FROM foo;
ERROR: permission denied for relation foo
SELECT * FROM see_foo();
f1
----
(0 rows)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Simple
CREATE FUNCTION sum (text, text)
RETURNS text AS $$
SELECT $1 || ’ ’ || $2
$$ LANGUAGE SQL;
SELECT sum(’hello’, ’world’);
sum
-------------
hello world
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Custom Operator
CREATE OPERATOR + (
procedure = sum,
leftarg = text,
rightarg = text
);
SELECT ’hello’ + ’world’;
?column?
-------------
hello world
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
Custom Aggregate
CREATE OR REPLACE FUNCTION concat_ws_comma(text, ANYELEMENT)
RETURNS text AS $$
SELECT concat_ws(’,’, $1, $2)
$$ LANGUAGE sql;
CREATE AGGREGATE str_agg (ANYELEMENT) (
sfunc = concat_ws_comma,
stype = text);
SELECT str_agg(f1) FROM foo;
str_agg
---------
41,42
(1 row)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
SETOF with OUT Arguments
CREATE OR REPLACE FUNCTION sql_with_rows(OUT a int, OUT b text)
RETURNS SETOF RECORD AS $$
values (1,’a’),(2,’b’)
$$ LANGUAGE SQL;
select * from sql_with_rows();
a | b
---+---
1 | a
2 | b
(2 rows)
JoeConway SCALE10X-PGDay
Overview
SQLFunctions
FunctionBasics
PL/pgSQLFunctions
ByExample
INSERT RETURNING
CREATE TABLE foo (f0 serial, f1 int, f2 text);
CREATE OR REPLACE FUNCTION
sql_insert_returning(INOUT f1 int, INOUT f2 text, OUT id int) AS $$
INSERT INTO foo(f1, f2) VALUES ($1,$2) RETURNING f1, f2, f0
$$ LANGUAGE SQL;
SELECT * FROM sql_insert_returning(1,’a’);
f1 | f2 | id
----+----+----
1 | a | 1
(1 row)
JoeConway SCALE10X-PGDay
Overview