title:Recovery in Fault-Tolerant Distributed Microcontrollers
author:David A. Rennels and
Riki Hwang
Recovery in Fault-Tolerant Distributed Microcontrollers 
David A. Rennels and Riki Hwang 
Computer Science Department 
University of California at Los Angeles 
rennels @ cs.ucla. edu 
Abstract 
This paper  describes  the  use  of  fault-tolerance in a 
microcontroller  node  to  be  used 
in  a  network  of 
embedded processors.  It  is primarily  motivated  by  long- 
life space  applications where  radiation-induced  transient 
errors  will be  a frequent  occurrence,  and  a  few  chip 
failures may be expected before a mission is completed. A 
testbed  has  been  constructed,  and  a  real-time  executive 
has  been  developed  and  tested  in it.  Preliminary fault- 
insertion teSting has been started. 
to 
Due 
interconnection  constraints  for 
latchup 
circumvention  and  other  reasons,  we  have  chosen  a 
design  that  is  not  Byzantine  resilient.  Even 
though 
inconsistent  signaling  may  occur  occasionally,  multiple 
recovery  actions  must  converge  to  a  successfil  testirig 
and restart of  the system to regain correct functionality. 
Introduction 
Much  of  the  digital  electronics  in  future  spacecraft 
systems will consist of COTS hardware that is susceptible 
to  radiation-induced  transient  errors  called  Single-Event 
Upsets (SEUs).  In  complex  systems, SEUs are expected 
to  occur  many  times  a  day  [l]. At  the  same  time,  we 
expect  spacecraft computer architectures to evolve  into a 
two-level  hierarchy.  General  purpose  parallel  processors 
will  provide  highly  complex  data  analysis  and  planning 
tasks,  and  embedded  microcontroller-based  nodes  will 
operate  the  various  spacecraft  subsystems  and  provide 
limited  computing  capability  inside  them.  In  most  space 
missions, power will be extremely constrained. 
Under  NASA  plans  for  a  current  program,  the 
parallel  processors are constrained to COTS-based UNIX 
systems  operating  most  application  programs  non- 
redundantly (in order to maximize performance-to-power) 
with  little or no special  hardware  fault-detection  features 
[2].  The  designer  is  relatively  free,  however.  to  add 
special hardware and custom designs for fault-tolerance at 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
475 
the  microcontroller  level.  These  embedded  computers 
consume  little power,  and previous  fault-tolerant designs 
exist  as  a  starting  point  [3].  We  hope  that  by  adding 
strong fault-tolerance in  subsystems, they  can  serve as a 
dependable  core that also assists in protecting the general 
purpose  parallel  processors.  This  paper  only  deals  with 
fault-tolerance  at  the  embedded  microcontroller  level  of 
such a system.  Other work  is going on  at UCLA  dealing 
with  software-based  protection  at  the  higher  parallel 
processor level. 
is  obvious 
the  highly 
it 
integrated  nature  of  micro- 
Given 
that  a  block  redundancy 
controllers, 
approach  using  voting  or  comparisons  is  required.  The 
to  provide  long 
dependability  requirements  are: 
unmaintained  life  with  high  availability,  (2)  to  avoid 
incorrect  outputs, and  (3) to  operate-through  most  faults 
and  errors.  It  is  acceptable  to  recover  within  tens  of 
milliseconds  by  restarting  the  node,  but  this  should  be 
done infrequently. 
(1) 
There  is  an  unusual  fault  environment  (tens  of 
thousands  of  transient  errors,  and  very  few  permanent 
faults).  A physical  architecture, to be described, has been 
chosen  where  the  I/O  connections  are  bused  with  series 
resistance  added  to  protect  against  shorts  and  power 
leakage  (see next  section). This allows  the interconnects 
and  the  interconnect  footprint  to  be  identical  no  matter 
how many  redundant  modules  are used  in  a node  (i.e ,O- 
3).  The fault-tolerance approach is summarized below: 
1.  Microcomputer  modules  operating  as  a  Master  and 
applications 
Slaves 
programs, and their outputs are compared often. 
(checkers) 
identical 
run 
2.  A  Master  and  at  least  one  agreeing  Slave  are 
empowered  to continue  the computations - and they 
can  remove  modules  that  do  not  agree  with  them. 
They can also reinitialize an  off-line module that  has 
passed  a  hardware  diagnostic.  Special  hardware  in 
each node checks for agreement of both  a Master and 
Slave before it will  obey any of their commands. 
3.  A  module  which  does  not  see  itself  accurately 
making  progress  in  ongoing  computations  (i.e.,  not 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:57:01 UTC from IEEE Xplore.  Restrictions apply. 
agreeing  with  its  neighbors)  drops  out  if  it  can.  A 
module  in  this  condition  advertises  that  it  is  in  an 
unavailable status,  and  it  initiates  a  self-test.  If  the 
self-test is not  successful within  a designated period 
of  time,  special hardware powers  down  the module. 
If  the  self-test  is  successful,  the  module  enters  an 
“off-line” state in  which  it can interrogate the rest  of 
the system.  If it sees that the system has  an agreeing 
set  of  modules  (Master  and  Slaves),  it  waits  to  be 
reinitialized by  them.  If  it  cannot  find  an  agreeing 
Master and Slave, it can  with  another concurring off- 
line  module,  declare  a  new  Master  and  Slave  and 
restart the system. 
To  prevent  rnassive  multiple  error  conditions  from 
disabling  both 
the  Master  and  Slave(s),  special 
hardware in each module initiates a drop-outhelf-test 
sequence  if  it  has  not  received  a  periodic  heartbeat 
message from a Master and an agreeing Slave. 
4. 
The Hardware Design 
A  number  of  unusual  design  problems  had  to  be 
addressed.  First, COTS microcontrollers have little or no 
built-in  fault-tolerance features, and our design had  to be 
adapted  to  the  features  that  exist  on 
these  highly- 
integrated chips. Second, they must  be  protected  against 
soft latchup - internal radiation-induced shorting that  can 
only  be  cleared  by  unpowering  the  devices.  For  latchup 
protection,  conventional  I/O  circuits  cannot  be  used, 
because  signal  leakage  through  logic  pins  can  provide 
enough power to maintain the latchup condition. 
The redundant modules that  make up a fault-tolerant 
embedded node have all of  their corresponding inputs and 
outputs  tied  together,  but  all  of  these  bussed  lines  are 
isolated from each other by  using series resistors.  This is 
necessary to assure that latchups can be cleared by  power- 
cycling.  This  technique  of  OR’ing  the  outputs  through 
series resistors also provides a  secondary advantage  that 
the  fault-tolerant microcontrollers are  pin-compatible  for 
differing  amounts  of  redundancy.  Most  of  the  signals 
between  microcontroller  modules  are  generated  using 
programmable  bidirectional pins  so that  any module  can 
be  designated  an  output and  the others designated inputs 
for  each  signal. These  can  then  be  dynamically  changed 
under  software control  if  a  reconfiguration  is  necessary. 
The  lines  must  be  protected  against  the  potentially 
catastrophic  conditions  of  shorting  or  “babbling”  (i.e., 
unexpected  outputs).  The 
resistors  protect  against 
shorting;  and “babbling” modules are removed by  power 
switching (an approach that  goes back  to the  JPL  STAR 
Computer) and special guardian hardware [4]. 
The  architectural  approach  is  Master/Slave  where 
Master  and  Slave  modules  run  identical  applications 
programs,  compare  results,  and  collectively  carry  out 
error and fault recovery. A Simplified diagram in Figure  1 
shows  triplicated  microcontrollers  within  a  node.  The 
nodes  can  accommodate  Up 
to  four  microcontrollers. 
Norrnal  YO  are  the  inputs  and  outputs  to  the  host 
subsystem,  and  the  Master  Channel  is  an  internal  bus 
within  the  node  that  allows  the  Master  module  to  send 
data  and  commands  to  the  other  modules.  Only  the 
module  designated  Master  can  generate  normal  I/O  or 
Master  Channel  outputs.  All  other  modules  can  “listen 
If  a fault causes a Master to be replaced, a new one 
in.” 
is  elected,  and  the  new  Master  adjusts  (by  software 
command) its programmable bidirectional pins from input 
to output. 
Assignment 
Status  Master 
/ 
i 
1 
ai 
Figure 1: Simplified Fault-Tolerant Node 
I 
‘The assignment  channel  consists  of  dedicated  lines 
from  each  module  that  are bussed  to  inputs  of  the  other 
modules  indicating  either  a  vote  for  a  Master  module 
(Vl,V2,V3,V4) or  signaling  that  the  sending  module  is 
unakailable  (U),  off-line (0), or  requesting  a  module  to 
concur  in  initiating  a  system  restart  (R).  A  Master  is 
ideniified when a module votes for itself and one or more 
Slave modules  vote  for  it  also.  Thus,  if  the other  Slave 
modules  determine  that  the  Master  is  in  error,  they  can 
withdraw  their  votes  and  elect  a  new  Master.  Special 
redundant  guardian  hardware  in  each  module  examines 
the  assignment channel  and  disables its  Master Bus  and 
I/O outputs if it is not voted as a master. 
The  Status  Channel  consists  of  dedicated  lines  by 
which  each  Slave  module  can  signal  to  the  others  if  it 
agrees  with  the  Master’s  outputs.  It  is  connected  in  an 
identical fashion to the Assignment Channel. The Master 
module can  send symbols of  null  (N), compare  (C) test- 
compare, and timeout (T).  Slave modules, as a result of 
a  comparison  operation, can  send symbols of  agree  (A), 
disagree (D), and timeout (T). The Status Channel is used 
to  detect  and  isolate  modules  that  disagree  in  their 
computations, and it is also used for synchronization. The 
modules  have  independent  clocks  of  approximately  the 
same  frequency,  so  these  comparison  points  prevent 
excessive drift between modules. 
Software Structure for a Node 
Checking and  synchronization occurs at  input and output 
operations,  using  the  regular  VO  lines  or  the  Master 
476 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:57:01 UTC from IEEE Xplore.  Restrictions apply. 
RTI 
Node Executive (NE) 
Voter-Driver  (VD) 
Figure 2: The Software Structure of a Node of Fault-Tolerant Microcontrollers 
Channel.  A  fault-tolerance  software  layer  transparently 
performs the actions needed to implement the comparison 
checking  operation  .  Special  VO drivers,  called  Voter- 
Drivers,  understand  if  its  host  module  is  a  Master  or 
the  appropriate  I/O  and  comparison 
Slave,  perform 
functions, and can initiate recovery  actions. The software 
structure for a Node is shown in Figure 2 
that  an  attempt  to  reinitialize  and  roll-forward  the 
errant  module  is  simply  scheduled  as  a  future 
foreground  program.  It  is  delayed  long  enough  to 
allow the suspect module time to complete a self-test. 
If  the  Voter-Driver  is  a  Slave  and  cannot  find 
agreement  (times out  because  it  does  not  agree  with 
the  Master),  it  waits  a  short  time  to  see  if  the  other 
Slave  times  out  also. If  that  is  the  case,  the  Slaves 
activate the lowest-numbered  Slave as a new Master, 
command  the  old  Master  off-line,  repeat  the  VO 
operation, and then schedule recovery of the replaced 
Master  as  in  the  item  above.  This  effects  a  rapid, 
operate-through, recovery. 
In  all  other  cases  the  voter-driver  commands  its 
scheduler  to  be  cleared,  and  the  module  drops  out 
and initiates a self-diagnosis. 
The Output Comparison Process 
the  applications  programs, 
timeout  counter  (TOC)  when 
There  are  two  important  underlying  features  of  this 
comparison  process.  First,  due  to  the  real-time  interrupt 
synchronization  of 
it  is 
possible  to determine  a maximum  time  skew  sk between 
modules.  Each  module  involved  in a comparison,  sets  an 
it  reaches  a 
internal 
compare operation to a time that is longer than  sk.  If there 
are no errors,  the  Master  will  request  a  comparison  and 
the Slaves will  respond with agreement before  any of  the 
counters  time  out.  Upon  seeing  a  complete  set  of 
agreements,  the  Master  resets  its  TOC  and  changes  its 
comparison  request  on  the  status  channel  to  null.  This 
transition  causes  each  Slave  to  sample  all  of  the  status 
symbols  (which  are  held  for  a  fixed  period  after  this 
time).  Since they  agree with  the  Master,  they  also  reset 
their  TOCs, and  after  a  fixed  interval  reset  their  status 
response  to  null.  The  modules  re-sample  the  status 
channel to check that the Slaves have returned their status 
to Null. A Slave that has not returned to Null is treated  as 
if  it signaled  an  error  or  didn’t  respond.  This  is  used  to 
provide  assurance  that  the  Slave  is not  “stuck-at-agree.” 
totally 
time-triggered.  Foreground 
The  real-time  executive  is  a  simple  synchronous 
foreground-background  executive  driven  by  a  real-time 
interrupt  (RTI) of approximately 50 Hz.[5].  The software 
is 
applications 
programs  run  in  short  segments  within  an  RTI  interval 
and  are  responsible  for  collecting  inputs,  generating 
outputs  and  starting  other  programs  at  precise  points  in 
time.  A  command  handler  foreground  program  is  run  at 
every  RTI  which  schedules  new  foreground  programs, 
based  on  commands  received  from  a  serial  port  or  an 
external 
started  by 
foreground programs, are run across RTI  intervals and do 
more complex processing functions. 
bus.  Background 
programs, 
Input-output  is initiated  by  foreground programs  that 
call a special  Voter-Driver program  to carry  out U0 and 
If  a  module  is  a  Master, 
perform  comparison  voting. 
outputs  arc  generated,  but  if  the  module  is  a  Slave,  it’s 
outputs  are  simply  compared  with  what  the  Master 
generated,  and  a  symbol  is  transmitted  over  the  status 
channel  to  indicate  the  result  (agree,  disagree,  timeout). 
Several results are possible: 
If the Master and  Slaves agree, the U 0  is successful. 
If  the  Voter-Driver  is  a  Master  and  finds  that  one 
Slave agrees, but another Slave disagrees or times out 
- then  it commands  the  disagreeing  module  to  drop 