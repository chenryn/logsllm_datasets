上图描述了ShadowMove的总体体系结构，它由六个主要模块组成：连接检测器，套接字复制器，对等处理器，网络视图管理器，横向移动计划器和计划执行器。
ShadowMove设计的核心是网络视图的概念，它表示受害环境中正常网络通信模式的模型，由在不同受害系统上运行的ShadowMove实例共同维护。每个ShadowMove实例都维护两个视图：本地视图基于本地系统中的当前连接，而全局视图是通过在ShadowMove实例之间交换和传播信息来构造的。
连接检测器模块负责检测可用于横向移动的新建立的TCP连接，并请求套接字复制器复制相应的套接字。它还可以检测到TCP连接的中断，并通知网络视图管理器。
套接字复制器复制目标进程拥有的套接字，并将其与其他上下文信息（如所有者进程的PID）一起传递给其调用方。
对等处理器与相邻的ShadowMove实例进行通信，以同步其对受感染网络的视图。一方面，它使用从其对等方（例如，新发现的主机）中学到的信息来更新Net
View Manager。另一方面，它将本地ShadowMove实例的网络视图发送到其远程对等方。  
网络视图管理器基于来自连接检测器和对等处理程序的通知，结合了几种方法来维护受害网络的全局视图。它还确定每个重复的套接字支持的服务类型，并保持重复的套接字的活动性。
横向移动计划器会根据当前网络视图和重复的套接字所支持的功能定期创建横向移动计划，该计划指定必须使用的套接字，必须执行的操作类型以及有效载荷。
最后，计划执行器器通过向给定套接字发送数据包和/或从给定套接字接收数据包，在横向移动计划中执行各个步骤，例如将文件传输到远程服务器。
###  1）ShadowMove连接检测器
存在两种检测和跟踪TCP连接的方法。首先，可以定期轮询形成的TCP连接，并将返回的信息与先前调用的结果进行比较。
Windows上的TCPView等工具使用此方法。第二种方法是事件驱动的，注册一个事件处理程序以用于连接的创建或拆除。在Windows操作系统中，可以通过创建WMI（Windows管理规范）过滤器并注册WMI事件使用者来获得有关连接状态更改的信息。但是，注册WMIevent使用者需要管理特权。
结果，本研究选择第一种方法。通过在Windows上调用GetTcpTable2和GetTcp6Table2，或在Linux上运行netstat
-ntp命令，连接检测器可以获得有关TCP连接的基本信息，例如连接状态，本地IP地址，本地端口，远程IP地址
，远程端口和所有者进程的ID。从进程ID，它可以进一步获取进程名称。当连接检测器观察到连接状态从未建立到已建立时，它将调用套接字复制器有关新的TCP连接的信息，然后通知网络视图管理器将复制的套接字添加到池中。另一方面，当它观察到连接状态从ESTABLISHED变为non-ESTABLISHED时，它会通知Network View
Manager从池中删除重复的套接字，因为关联的TCP连接变得不可用。通知消息包含TCP连接的基本信息和所有者进程名称。
在Windows上，连接检测器在通知套接字复制器或网络视图管理器之前，会对TCP连接进行一些简单的过滤。具体来说，它检查ShadowMove进程是否具有足够的权限来打开具有PRO
CESS_DUP_HANDLE访问标志的TCP连接的所有者进程，并且跳过那些ShadowMove进程没有足够权限的连接。
###  2）对等处理器
通过对等处理器模块，ShadowMove实例可以与其相邻的ShadowMove实例共享其对受感染网络的看法。使用共享信息的每个实例通过已经受到威胁的系统来构建可访问系统的全局视图，对等处理器模块在单独的工作线程中执行。
执行后，对等处理器将尝试在I的工作目录中找到一个配置文件。此文件包含有关用于将I移至当前系统的TCP连接的信息。然后，ShadowMove确定先前的ShadowMove实例滥用的相应服务器进程和套接字。它通过调用套接字复制器模块来复制此套接字，然后连续侦听复制套接字的传入流量。
如上图所示，前驱ShadowMove定期挂起客户端进程，然后向远程服务器发送特殊请求。收到此“信号”消息后，后继ShadowMove将挂起服务器进程。然后，这两个ShadowMove实例可以使用类似于距离矢量路由协议的协议来同步其关于网络的知识。
###  3）网络视图管理器
此模块根据从连接检测器和对等处理程序接收的信息维护受害网络的全局视图。它管理重复套接字池，并为该池中的每个套接字保留一个元组。除服务类型（或协议）外，连接检测器会传递这些字段中的大多数字段，服务类型（或协议）是通过组合几种方法在称为第7层协议检测器的子模块中确定的。首先，它从目标端口进行猜测，因为许多服务都运行在众所周知的默认端口之后，例如，FTP的默认端口号为21。其次，它从所有者进程中猜测它们是否是用于以下操作的知名客户端工具一些服务，例如ssms.exe或Microsoft
SQL Server Management Studio是SQL
Server的客户端。最后，如果端口号和所有者进程信息不足以进行可靠的猜测，它会通过在每个套接字上调用recv
API并设置MSG_PEEK标志来被动地嗅探网络流量。然后，它利用现有的协议分析技术（例如，Suricata中的自动协议检测功能）对接收到的有效负载进行分析，以识别应用程序级协议。
网络视图管理器基于重复套接字池，计算一个本地视图，该视图可以由多个谓词表示：系统谓词定义主机的IP地址，而连接谓词定义两个系统之间的连接。当它从对等处理程序接收到通知时，这些通知是邻居共享的系统谓词和连接谓词，它通过将谓词合并到其本地视图中来更新其全局视图。
值得注意的是，在Windows中，关闭套接字并不总是需要TCP连接终止握手。仅当最后一个套接字描述符关闭时，才会发生终止握手。结果，即使所有者进程关闭了其套接字，连接也将保持打开状态。但是，由于多种原因（例如网络故障，远程进程崩溃或连接不活动超时），TCP连接可能不可用。为防止发生连接不活动超时，网络视图管理器使用setsockopt
API函数为所有重复的套接字设置SO_KEEPALIVE标志。这样，将通过这些连接自动发送保持活动的数据包。
###  4）ShadowMove套接字复制器
套接字复制器在收到来自连接检测器或对等处理程序的请求时，将复制与给定TCP连接关联的套接字。方法的基本思想是在目标进程内部复制套接字，并使用生成的套接字秘密访问已建立的TCP连接。
**(a)Windows上的** **套接字复制**
在Windows上，可以调用DuplicateHandle
API从远程进程复制不同类型的句柄。但是，如DuplicateHandle文档所述，此函数不能用于复制套接字。
尽管Windows提供了一个名为WSADuplicateSocket的API来复制套接字，但是不能直接使用此函数，因为它需要进程之间的合作。使用此功能的典型场景如下，源进程创建一个套接字，并希望与目标进程共享它。首先，源进程调用WSADuplicateSocket以获取特殊的WSAPROTOCOL_INFO结构。该信息结构通过进程间通信（IPC）机制提供给目标进程。目标进程将信息结构传递给WSASocket以在其一侧重建套接字。这种方法的主要挑战（即使用WSADuplicateSocket）是两个进程必须相互协作才能复制套接字，而在本文的方案中，攻击者想要从一个粗心的受害者进程中复制套接字，情况并非如此。解决此问题的一种方法是将代码注入受害者进程中，以实现由于缺乏合作而缺少的步骤。但是，现有的防御机制（例如WindowsDefender
ATP）标记了通用进程注入技术的使用，这使得解决方案的吸引力降低了。
本文以一种非常规的方式使用Windows
API设计了一种新颖的技术，该技术使攻击者进程可以从目标进程复制套接字，而无需其协作。上表描述了攻击者进程执行的从目标进程复制套接字的步骤，假设它知道了目标的进程ID，这要归功于实时连接检测。首先，它通过使用OpenProcess枚举目标中所有打开的句柄来打开目标进程。攻击者进程仅寻找名称为\
device \
afd的文件句柄（步骤3-5，而afd代表辅助功能驱动程序）。在此操作期间，攻击者进程将复制所有文件句柄，这是读取句柄名称所必需的。研究发现，攻击者进程可以将这些重复的afd进程视为套接字。为了找到与TCP连接相对应的确切套接字，攻击者进程会获取套接字afd句柄所连接的远程IP地址和远程端口（通过调用getpeername），并将它们与连接检测器传递的信息进行比较。如果存在匹配项，则攻击者进程会将afd句柄传递给WSADuplicateSocketW，以获取复制原始套接字所需的信息。获取协议信息结构后，攻击者进程将调用WSASocketW函数来复制套接字。然后将此套接字与上下文信息（例如所有者PID，所有者进程名称，本地IP地址，本地端口，远程IP地址和远程端口）一起保存在重复套接字池中。
还值得注意的是，在Windows上，用于IPv4 /
6的TCP连接表仅包含有关原始套接字描述符的信息，而不包含有关重复的套接字描述符的信息，并且即使在所有者进程终止后，套接字描述符的所有者PID也不会改变。这意味着依赖于Windows
API来检索TCP连接表的常规工具（如netstat）不能用于检测连接是否重复以及其复制器。
**(b)深入探讨Windows上的套接字复制**
要了解ShadowMove的套接字复制为何起作用，必须首先了解套接字上下文。Thewinsock2库在不同层的许多数据结构中为每个套接字句柄维护套接字上下文（下图）。在WS2_32.dll中，有一个名为sm_context_table的哈希表，该哈希表将套接字句柄映射到DSOCKET对象，该对象存储有关套接字的信息，例如进程和服务提供者。在下一层，mswsock.dll（服务提供商），还有另一个称为SockContextTable的哈希表，该哈希表将套接字句柄映射到SOCKET_INFORMATION对象，该对象存储诸如套接字状态，引用计数，本地地址和远程地址之类的信息。套接字上的每个用户级操作（例如connect，send和recv）都必须引用并可以更改套接字上下文（例如，远程地址和引用计数）。此外，针对每个过程维护包括哈希表的这种上下文信息。套接字功能的内核端是辅助功能驱动程序或AFD.sys，它还维护套接字上下文信息（例如，本地地址和远程地址），这对于内核驱动程序最终构造网络数据包是必需的。
**通过WSADuplicateSocket在普通套接字共享期间会发生什么：** Win
dows上的普通套接字共享涉及三个步骤，如上图所示。当源进程调用WSASocket创建新的套接字时，它会做三件事：（1）调用NtCreateFile获取套接字句柄（例如，句柄1），（2）为句柄1创建新的SOCKET_INFORMATION对象，以及（3）调用NtDeviceIoControlFile来设置句柄1的内核侧上下文信息。接下来，当源进程调用WSADuplicateSocket与以下对象共享句柄1时在目标进程中，它首先创建句柄1的副本（例如，句柄2），然后将句柄2放入WSAPROTOCOL_INFO结构的dwProviderReserved字段中，以便与目标进程共享。当目标进程使用WSAPROTOCOL_INFO结构作为一个参数调用WSASocket时，WSASocket从dwProviderReserved字段中提取句柄
2，并使用它来调用NtDeviceIoControlFile以获得内核端上下文信息；完成此操作后，它将使用获得的信息为句柄2构造一个SOCKET_INFORMATION对象，这使句柄2成为功能性套接字句柄。
**ShadowMove的套接字劫持过程中会发生什么：** 使用上面相同的场景，ShadowMove攻击可以与句柄1秘密共享套接字，而无需源进程的配合。
Shad
owMove还使用了WSADuplicateSocket和WSASocket的组合，但它又做了一个准备工作：它首先通过调用NtDuplicateObject创建Handle
1的副本。之所以需要这样做，是因为句柄1位于源进程的地址空间中，因此Shadow