# Dissent: Accountable Anonymous Group Messaging

**Authors:** Henry Corrigan-Gibbs and Bryan Ford  
**Department of Computer Science, Yale University**  
**Emails:** [PI:EMAIL], [PI:EMAIL]  
**Location:** New Haven, CT, USA

## Abstract
Users often desire to participate in online groups anonymously, but this anonymity can be abused by misbehaving users, leading to disruptions. Existing messaging protocols such as DC-nets, Mix-nets, and accountable voting systems have limitations: DC-nets are vulnerable to denial-of-service (DoS) and Sybil attacks, Mix-nets are susceptible to traffic analysis, and accountable voting systems are not suitable for general anonymous messaging.

We introduce Dissent, the first general messaging protocol that provides provable anonymity with accountability for moderate-sized groups. It efficiently handles unbalanced loads where only a few members wish to transmit in a given round. The N group members cooperatively shuffle an N × N matrix of pseudorandom seeds, which are then used in N "pre-planned" DC-nets protocol runs. Each run transmits variable-length messages using the minimum number of bits required for anonymity under our attack model. The protocol ensures message integrity and one-to-one correspondence between members and messages, traces DoS attacks to the culprit, and efficiently manages large, unbalanced message loads. A working prototype demonstrates the practicality of Dissent for anonymous messaging in groups of 40+ members.

## Categories and Subject Descriptors
- **C.2.0 [Computer-Communication Networks]: General—Security and Protection**
- **C.2.2 [Computer-Communication Networks]: Network Protocols—Applications**

## General Terms
- Algorithms
- Security

## Keywords
- Anonymity
- Accountability
- Denial of Service
- Group Communication
- Peer-to-Peer Networks
- Verifiable Anonymous Shuffle

## 1. Introduction
Anonymous participation is often considered a fundamental right in free societies. The limited form of anonymity provided by the Internet enables individuals and groups with controversial or unpopular views to communicate and organize without fear of personal reprisal. However, anonymity also makes it difficult to trace or exclude misbehaving participants. Stronger anonymity protocols, such as mix-networks and DC-nets, further weaken accountability, making it challenging to ensure trustworthy content and defend against anonymous misbehavior.

This paper focuses on providing anonymous messaging within small, private online groups. We assume that the group's membership is closed and known to its members. Members may wish to send messages to each other, to the entire group, or to non-members, ensuring that the receiver knows the message comes from a group member but not which specific member. Members may also wish to cast secret ballots in group votes or create pseudonyms for collaboration.

We aim to hold members accountable without compromising their anonymity. This means ensuring that no malicious member can abuse their strong anonymity to disrupt the group's operation. For example, a malicious member should not be able to corrupt or block other members' messages, spam the group, stuff ballots, or create unlimited Sybil identities or sock puppets to bias or subvert the group's deliberations.

As a motivating example, consider an international group of journalists forming a "whistleblowing" publication similar to WikiLeaks. To protect journalists and their sources, members wish to submit leaked documents and related information anonymously. They need assurance that powerful organizations or governments cannot trace the leak to an individual journalist or their source. The group must prove to readers that leaked documents come from a trusted channel, vet each document before publication, and protect their internal operations and members' anonymity even from adversaries who have planted spies within the group. This security must be achieved at acceptable time and resource costs.

We present Dissent (Dining-cryptographers Shuffled-Send Network), the first protocol we know of that offers the necessary properties for scenarios like the one described above. Dissent provides integrity, anonymity, and accountability in the face of strong traffic analysis and compromised members. An experimental prototype demonstrates that Dissent is efficient enough for latency-tolerant messaging in small distributed groups.

In contrast to mix-networks and DC-nets, Dissent implements a shuffled send primitive, allowing each group member to send exactly one message per round. This makes it suitable for voting or assigning pseudonyms with a one-to-one correspondence to real group members. Unlike verifiable cryptographic shuffles, Dissent uses readily available cryptographic primitives and handles arbitrarily large messages and unbalanced loads efficiently. While group and ring signatures can authenticate messages transmitted via an anonymous channel, they do not protect against DoS or Sybil attacks, which Dissent does.

Dissent operates in two stages: shuffle and bulk transfer. The shuffle protocol builds on a data mining protocol by Brickell and Shmatikov to permute a set of fixed-length messages, one from each group member, and broadcast them to all members with strong anonymity. Our refinements add go/no-go and blame phases to trace and hold accountable any malicious member disrupting the protocol.

The bulk protocol leverages the shuffle protocol to prearrange the DC-nets transmission schedule, guaranteeing each member exactly one message slot per round. All group members broadcast bit streams based on pseudorandom seeds, and XORing these streams yields a permuted concatenation of all members' variable-length messages. Cryptographic hashes enable members to verify the correctness of each other's transmissions, ensuring message integrity and DoS protection.

Dissent has limitations. It is not intended for large-scale, open-access anonymous messaging or file sharing, though it could serve as a building block in designs like Herbivore. Its accountability properties assume closed groups and are ineffective if a malicious member can leave and rejoin under a new identity after expulsion. Dissent is also not a general-purpose voting system, providing only limited coercion resistance. The serialized shuffle protocol imposes a per-round startup delay, making Dissent impractical for latency-sensitive applications.

We built a working prototype of Dissent and tested it under Emulab on groups of up to 44 nodes connected via simulated wide-area links. Anonymously distributing messages up to 16MB in size among 16 nodes with 100ms inter-node delays, Dissent's shuffle protocol and other startup costs incur a 1.4-minute latency. Dissent handles large message loads, both balanced and unbalanced, in about 3.5 times the time required for non-anonymized group messaging via TCP. Varying group size, Dissent can send a 1MB message anonymously in less than 1 minute in a 4-node group, 4 minutes in a 20-node group, and 14 minutes in a 40-node group. While not suitable for interactive workloads, Dissent is practical for scenarios requiring strong security guarantees in small, decentralized groups.

This paper makes four main technical contributions:
1. Enhancing the Brickell/Shmatikov shuffle protocol to make DoS attackers traceable without compromising anonymity.
2. Using this shuffle protocol to create a DoS-resistant DC-nets variant for bulk transfer, guaranteeing each member exactly one transmission slot per round.
3. Introducing the first shuffle protocol that supports arbitrary-size and unbalanced message loads efficiently.
4. Demonstrating through a working prototype the practicality of the protocol for delay-tolerant applications.

## 2. Protocol Overview
This section introduces the group communication model implemented by Dissent, outlines some applications of this model, and defines the protocol's precise security goals.

### 2.1 The Shuffled Send Primitive
Dissent's purpose is to provide a shuffled send communication primitive, offering sender anonymity among a well-defined group of nodes. We assume that the group's membership and each member's public key (or certificate) are agreed upon and known to all group members. The group can initiate a run of the shuffled send protocol in any way that preserves anonymity. For example, a designated leader or every group member might initiate runs periodically on a fixed or random schedule. Alternatively, a "client" node, either within or outside the group, might initiate a run to request a service provided by the group collectively. For protection against traffic analysis, a member's desire to send anonymously must not trigger the initiation event.

Each Dissent protocol run is independent and allows each group member to send exactly one variable-length message to a target designated for that run. Ongoing interaction requires multiple protocol runs. The target may be a particular group member, all members (for anonymous group multicast), or another node, such as a non-member "client" that initiated the run. Group members might agree on the target using a higher-level "wrapper" protocol, as described in Section 5.

Each protocol run operates as follows: Every group member i secretly creates a message \( m_i \) and submits it to the protocol. The protocol collects all N secret messages, shuffles their order according to a random permutation \( \pi \) that no one knows, concatenates the messages in this shuffled order so that \( m_i \) appears at position \( \pi_i \), and sends the concatenated sequence of messages to the target. Each input message \( m_i \) can have a different length \( L_i \), and the protocol's output has a total length of \( \sum L_i \).

### 2.2 Applications of Shuffled Send
The shuffled send model combines and generalizes the functionality of several classes of anonymity protocols. Although every participant must submit a message in a given protocol run, members with nothing to send can submit a zero-length message, providing efficient single-sender and multiple-sender service.

### 2.3 Security Properties
The formal security properties we aim for are integrity, anonymity, and accountability, defined as follows:

- **Integrity**: The protocol maintains integrity if, at the end of a protocol run involving N group members, every honest member either: (a) obtains exactly N messages, including each message submitted by an honest group member, or (b) knows that the protocol did not complete successfully.
- **Anonymity**: Following Brickell and Shmatikov, the protocol maintains anonymity if a group of k ≤ N-2 colluding members cannot match an honest participant's message to its author with a probability significantly better than random guessing. (If all but one member colludes, no anonymity is possible.)
- **Accountability**: As in PeerReview, a member i exposes a member j if i holds third-party verifiable proof of j's misbehavior. The protocol maintains accountability if no member ever exposes an honest member, and after a run, either: (a) each honest member successfully obtains every honest member’s message, or (b) all honest members expose at least one faulty member.

### 2.4 Simplifying Assumptions
Our core protocol descriptions in Sections 3 and 4 make several simplifying assumptions, which we will relax and address in more detail in subsequent sections.