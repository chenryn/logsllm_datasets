title:Dissent: accountable anonymous group messaging
author:Henry Corrigan-Gibbs and
Bryan Ford
Dissent: Accountable Anonymous Group Messaging
Henry Corrigan-Gibbs and Bryan Ford
Department of Computer Science
Yale University
PI:EMAIL, PI:EMAIL
New Haven, CT, USA
ABSTRACT
Users often wish to participate in online groups anonymously, but
misbehaving users may abuse this anonymity to disrupt the group’s
communication. Existing messaging protocols such as DC-nets
leave groups vulnerable to denial-of-service and Sybil attacks, Mix-
nets are difﬁcult to protect against trafﬁc analysis, and accountable
voting protocols are unsuited to general anonymous messaging.
We present the ﬁrst general messaging protocol that offers prov-
able anonymity with accountability for moderate-size groups, and
efﬁciently handles unbalanced loads where few members wish to
transmit in a given round. The N group members ﬁrst coopera-
tively shufﬂe an N × N matrix of pseudorandom seeds, then use
these seeds in N “pre-planned” DC-nets protocol runs. Each DC-
nets run transmits the variable-length bulk data comprising one
member’s message, using the minimum number of bits required
for anonymity under our attack model. The protocol preserves
message integrity and one-to-one correspondence between mem-
bers and messages, makes denial-of-service attacks by members
traceable to the culprit, and efﬁciently handles large, unbalanced
message loads. A working prototype demonstrates the protocol’s
practicality for anonymous messaging in groups of 40+ members.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and Protection; C.2.2 [Computer-Communication Networks]:
Network Protocols—Applications
General Terms
Algorithms, Security
Keywords
Anonymity, Accountability, Denial of Service, Group Communica-
tion, Peer-to-Peer Networks, Veriﬁable Anonymous Shufﬂe
1.
INTRODUCTION
Anonymous participation is often considered a basic right in free
societies [43]. The limited form of anonymity the Internet provides
is a widely cherished feature [37, 41], enabling people and groups
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.
with controversial or unpopular views to communicate and orga-
nize without fear of personal reprisal [34]. Yet anonymity makes it
difﬁcult to trace or exclude misbehaving participants [13]. Online
protocols providing stronger anonymity, such as mix-networks [9,
21] and DC-nets [10, 22, 32, 40], further weaken accountability and
yield forums in which no content may be considered trustworthy
and no defense is available against anonymous misbehavior.
This paper focuses on providing anonymous messaging within
small, private online groups. We assume a group’s membership
is closed and known to its members; creating groups with secret
membership is a related but orthogonal goal [38]. Members may
wish to send messages to each other, to the whole group, or to a
non-member, such that the receiver knows that some member sent
the message but no one knows which member. Members may also
wish to cast secret ballots in votes held by the group, or to create
pseudonyms under which to collaborate with other members.
We also wish to hold members accountable, however, not by
compromising their anonymity and allowing some authority or ma-
jority quorum to unmask a member whose messages prove unpop-
ular, but rather by ensuring that no malicious member can abuse his
(strong) anonymity to disrupt the group’s operation. For example, a
malicious member should be unable to corrupt or block other mem-
bers’ messages, overrun the group with spam, stuff ballots, or cre-
ate unlimited anonymous Sybil identities [17] or sock puppets [36]
with which to bias or subvert the group’s deliberations.
As a motivating example, suppose an international group of jour-
nalists wishes to form a “whistleblowing” publication analogous to
WikiLeaks [42]. To protect journalists and their sources, member
journalists wish to submit leaked documents and related informa-
tion to the group anonymously. Member journalists need assurance
that powerful organizations or governments cannot trace the leak
to an individual journalist or her source. The journalists wish to
prove to their readers that leaked documents come via a trustwor-
thy channel, namely one of the group’s known and reputable mem-
bers, and not from an outsider. The group must be able to analyze
and vet each document thoroughly before collectively approving it
for publication. The group must protect its internal operation and
its members’ anonymity even from adversaries who have planted
colluding spies within the group. And this security must come at
acceptable time and resource costs.
We present an accountable anonymous messaging protocol called
Dissent (Dining-cryptographers Shufﬂed-Send Network), the ﬁrst
we know of with the properties needed in scenarios like the one out-
lined above. Dissent offers integrity, anonymity, and accountability
in the face of strong trafﬁc analysis and compromised members.
An experimental prototype shows Dissent to be efﬁcient enough
for latency-tolerant messaging in small distributed groups.
In contrast with mix-networks [9,21] and DC-nets [10,22,32,40],
Dissent implements a shufﬂed send primitive, whereby each group
member sends exactly one message per round, making it usable for
340voting or assigning pseudonyms with a 1-to-1 correspondence to
real group members. Unlike veriﬁable cryptographic shufﬂes [20,
26], Dissent uses only readily-available cryptographic primitives,
and handles arbitrarily large messages and unbalanced loads efﬁ-
ciently, such as when one journalist has a multi-gigabyte document
to leak while the others have nothing to send. While group and ring
signatures [4,11,30] can anonymously authenticate messages trans-
mitted via some anonymous transmission channel, signatures offer
no protection against anonymous denial-of-service (DoS) or Sybil
attacks against the transmission channel itself, as Dissent does.
Dissent operates in two stages, shufﬂe and bulk transfer. The
shufﬂe protocol builds on a data mining protocol by Brickell and
Shmatikov [7] to permute a set of ﬁxed-length messages, one from
each group member, and broadcast the set of messages to all mem-
bers with cryptographically strong anonymity. Like many anony-
mous messaging protocols, the original data mining protocol was
vulnerable to untraceable DoS attacks by malicious group mem-
bers. Our reﬁnements remove this vulnerability by adding go/no-
go and blame phases, which can trace and hold accountable any
group member maliciously disrupting the protocol.
Dissent’s bulk protocol builds on DC-nets [10,22,32,40] to trans-
mit variable-length messages anonymously. In place of the DoS-
prone slot reservation systems in prior DC-nets schemes, however,
Dissent leverages its shufﬂe protocol to prearrange the DC-nets
transmission schedule, guaranteeing each member exactly one mes-
sage slot per round. In each round, all group members broadcast bit
streams based on pseudorandom seeds distributed via the shufﬂe
protocol, so that XORing all members’ bit streams together yields a
permuted concatenation of all members’ variable-length messages.
Cryptographic hashes distributed in the shufﬂe phase enable mem-
bers to verify the correctness of each others’ bulk transmissions,
ensuring message integrity and DoS protection throughout.
Dissent has limitations, of course. It is not intended for large-
scale, “open-access” anonymous messaging or ﬁle sharing [12,21],
although it might serve as a building block in designs like Herbi-
vore [32]. Dissent’s accountability properties assume closed groups,
and are ineffective if a malicious member can leave and rejoin the
group under a new (public) identity after expulsion. Dissent is also
not a general-purpose voting system: for example, it provides only
a limited form of coercion resistance. Finally, the serialized shuf-
ﬂe protocol imposes a per-round startup delay that makes Dissent
impractical for latency-sensitive applications.
We built a working prototype of Dissent and tested it under Emu-
lab [18] on groups of up to 44 nodes connected via simulated wide-
area links. Anonymously distributing messages up to 16MB in size
among 16 nodes with 100ms inter-node delays, Dissent’s shufﬂe
protocol and other startup costs incur a 1.4-minute latency. Dis-
sent handles large message loads, both balanced and unbalanced, in
about 3.5× the time required for non-anonymized group messag-
ing via TCP. Varying group size, Dissent can send a 1MB message
anonymously in less than 1 minute in a 4-node group, 4 minutes
in a 20-node group, and 14 minutes in a 40-node group. While
not suitable for interactive workloads, Dissent should be usable for
“WikiLeaks”-type scenarios requiring strong security guarantees in
small but decentralized groups.
This paper makes four main technical contributions. First, we
enhance Brickell/Shmatikov’s shufﬂe protocol [7] to make DoS at-
tackers traceable without compromising anonymity. Second, we
use this shufﬂe protocol to create a DoS-resistant DC-nets vari-
ant for bulk transfer, which guarantees each member exactly one
transmission slot per round. Third, we introduce the ﬁrst shufﬂe
protocol that supports arbitrary-size and unbalanced message loads
efﬁciently, e.g., when only one member has data to send. Fourth,
we demonstrate through a working prototype the practicality of the
protocol, at least for delay-tolerant applications.
Section 2 outlines Dissent’s communication model, security goals,
and operation. Section 3 describes the shufﬂe protocol, and Sec-
tion 4 details the bulk transfer protocol. Section 5 informally covers
practical implementation and usage considerations such as protocol
initiation, coercion resistance, and liveness. Section 6 describes our
prototype implementation and experimental results. Section 7 sum-
marizes related work, and Section 8 concludes.
2. PROTOCOL OVERVIEW
This section ﬁrst introduces the group communication model our
protocol implements, outlines a few applications of this model, and
deﬁnes the protocol’s precise security goals, leaving protocol de-
tails to subsequent sections.
Dissent consists of two sub-protocols: a shufﬂe protocol and a
bulk protocol. The shufﬂe protocol has two practical limitations:
all messages must be of equal length L, incurring O(N L) extra
communication if only one member wishes to send; and its decrypt-
and-shufﬂe phase is inherently serial, incurring a long delay if N
or L is large. We currently have no solution if the number of partic-
ipating nodes is large, but our bulk protocol addresses the problem
of sending large, variable-length messages efﬁciently. Our shufﬂe
protocol ensures integrity and anonymity exactly as in its precur-
sor [7], but our new go/no-go and blame phases enable all group
members to trace the culprit of any protocol malfunction.
2.1 The Shufﬂed Send Primitive
Dissent’s purpose is to provide a shufﬂed send communication
primitive, providing sender anonymity among a well-deﬁned group
of nodes. We assume that the set of members comprising the group
and each member’s public key (or certiﬁcate) is agreed upon and
known to all group members. The group may initiate a run of the
shufﬂed send protocol in any way that preserves anonymity. For ex-
ample, a designated leader, or every group member, might initiate
runs periodically on a ﬁxed or random schedule. Alternatively, a
“client” node not requiring anonymity, within or outside the group,
might initiate a run to request a service provided by the group col-
lectively. For protection against trafﬁc analysis, however, a mem-
ber’s desire to send anonymously must not be the initiation event.
Each Dissent protocol run is independent and permits each group
member to send exactly one variable-length message to some tar-
get designated for that run. Ongoing interaction requires multiple
protocol runs. A run’s designated target may be a particular group
member, all members (for anonymous group multicast), or another
node such as a non-member “client” that initiated the run. Group
members might agree upon the target of a run using a higher-level
“wrapper” protocol, for example, as described in Section 5.
Each protocol run operates as shown in Figure 1. Every group
member i secretly creates a message mi and submits it to the pro-
tocol. The protocol collects all N secret messages, shufﬂes their
order according to some random permutation π that no one knows,
concatenates the messages in this shufﬂed order so that mi appears
at position πi, and sends the concatenated sequence of messages to
the target. Each input message mi can have a different length Li,
and the protocol’s output has length Pi Li.
2.2 Applications of Shufﬂed Send
The shufﬂed send model combines and generalizes the function-
ality of several classes of anonymity protocols. Although every
participant must submit a message in a given protocol run, mem-
bers with nothing to send can submit a message of length zero,
providing efﬁcient single-sender as well as multiple-sender service.
341that nodes never just go silent; we address liveness using principles
from PeerReview [23] as outlined in Section 5.
The formal security properties we wish the protocol to satisfy are
integrity, anonymity, and accountability, as we deﬁne below.
• Integrity: The protocol maintains integrity if, at the end of a
protocol run involving N group members, every honest member
either: (a) obtains exactly N messages, including each message
submitted by an honest group member, or (b) knows that the
protocol did not complete successfully.
• Anonymity: Following Brickell and Shmatikov [7], the protocol
maintains anonymity if a group of k ≤ N −2 colluding members
cannot match an honest participant’s message to its author with
a probability signiﬁcantly better than random guessing. (If all
but one member colludes, no anonymity is possible.)
• Accountability: As in PeerReview [23], a member i exposes a
member j if i holds third-party veriﬁable proof of j’s misbehav-
ior. The protocol maintains accountability if no member ever ex-
poses an honest member, and after a run, either: (a) each honest
member successfully obtains every honest member’s message,
or (b) all honest members expose at least one faulty member.
2.4 Simplifying Assumptions
Our core protocol descriptions in Sections 3 and 4 make several
simplifying assumptions, which we will relax and address more re-