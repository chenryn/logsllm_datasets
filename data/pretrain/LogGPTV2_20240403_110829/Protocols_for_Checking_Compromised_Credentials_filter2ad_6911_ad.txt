budget. We show that if the actual query budget q ≤ ¯q, FSB has zero
security loss. Larger ¯q will provide be(cid:138)er security; however, it also
means more replication of the passwords and larger bucket sizes.
So, ¯q can be tuned to balance between security and bandwidth.
Below we will give the two main algorithms of the FSB scheme:
βFSB and ˜αFSB, followed by a bandwidth and security analysis.
Bucketizing function (βFSB). To map passwords to buckets, we
use a hash function f : W (cid:55)→ Z|B|. (cid:140)e algorithm for bucketization
βFSB(w) is given in Figure 6. (cid:140)e parameter ¯q is used in the follow-
ing way: β replicates the most probable ¯q passwords, W ¯q, across all
|B| buckets. Each of the remaining passwords are replicated propor-
tional to their probability. A password w with probability ˆps(w) is
replicated exactly γ =
likely password. Exactly which buckets a password is assigned to
5Usernames (e.g., emails) are unique for each users, so the distribution of usernames
and username-password pairs are close to uniform.
(cid:109) times, where w ¯q is the ¯qth most
(cid:108) |B|· ˆps(w)
ˆps(w ¯q)
βFSB(w) :
γ ← min(cid:110)|B|,
(cid:108) |B|· ˆps (w)
ˆps (w ¯q)
(cid:109)(cid:111)
s ← f (w)
If s + γ  |B|, then
the password is assigned to the buckets in the range [0, f (w) +γ −1
mod |B|] and [f (w), |B| − 1].
Bucket retrieving function ( ˜α ). Retrieving passwords assigned
to a bucket is challenging in FSB. An ine(cid:129)cient — linear in N —
implementation of ˜α is given in Figure 6. Storing the contents of
each bucket separately is not feasible, since the number of buckets
in FSB can be very large, |B| ≈ N . To solve the problem, we utilize
the structure of the bucketizing procedure where passwords are
assigned to buckets in continuous intervals. (cid:140)is allows us to use
an interval tree [8] data structure to store the intervals for all of the
passwords. Interval trees allow fast queries to retrieve the set of
intervals that contain a queried point (or interval) — exactly what
is needed to instantiate ˜α .
(cid:140)is e(cid:129)ciency comes with increased storage cost: storing N en-
tries in an interval tree requires O(N log N ) storage. (cid:140)e tree can
be built inO(N log N ) time, and each query takesO(log N + | ˜α(b)|)
time. (cid:140)e big-O notation only hides small constants.
Estimating password distributions. To construct the bucke-
tization algorithm for FSB, the server needs an estimate of the
password distribution pw . (cid:140)is estimate will be used by both the
server and the client to assign passwords to buckets. One possible
estimate is the histogram of the passwords in the leaked data ˜S.
Histogram estimates are typically accurate for popular passwords,
but such estimates are not complete — passwords that are not in the
leaked dataset will have zero probability according to this estimate.
Moreover, sending the histogram over to the client is expensive in
terms of bandwidth, and it may leak too much information about
the dataset. We also considered password strength meters, such
as zxcvbn [48] as a proxy for a probability estimate. However, this
estimate turned out to be too coarse for our purposes. For example,
more than 105 passwords had a “probability” of greater than 10−3.
We build a 3-gram password model ˆpn using the leaked pass-
words present in ˜S. Markov models or n-gram models are shown
to be e(cid:130)ective at estimating human-chosen password distribu-
tions [34], and they are very fast to train and run (unlike neu-
ral network based password distribution estimators, such as [37]).
However, we found the n-gram model assigns very low probabilities
to popular passwords. (cid:140)e sum of the probabilities of the top 1,000
passwords as estimated by the 3-gram model is only 0.032, whereas
those top 1,000 passwords are chosen by 6.5% of users.
We therefore use a combined approach that uses a histogram
model for the popular passwords and the 3-gram model for the
rest of the distribution. Such combined techniques are also used
in practice for password strength estimation [37, 48]. Let ˆps be
the estimated password distribution used by FSB. Let ˆph be the
distribution of passwords implied by the histogram of passwords
present in ˜S. Let ˜St be the set of the t most probable passwords
according to ˆph. We used t = 106. (cid:140)en, the (cid:128)nal estimate is
 ˆph(w)
ˆpn(w) · 1− ˜w∈ ˜St
1− ˜w∈ ˜St
ˆps(w) =
if w ∈ ˜St ,
otherwise.
ˆph(w)
ˆpn(w)
multiply them by a normalization factor that allows
Note that instead of using the 3-gram probabilities directly, we
w ˆp(w) = 1,
a bucket is with high probability less than 2 ·(cid:16)¯q +
assuming that the same is true for the distributions ˆph and ˆpn.
Bandwidth. We use the formulation provided in Section 3 to
compute the bandwidth requirement for FSB. In this case, m =
|B| · ¯q + |B|
ˆps(w ¯q) + N , and n = |B|. (cid:140)erefore, the maximum size of
ˆps(w ¯q) + N|B|
(cid:140)e details of this analysis are given in Appendix B.
In practice, we can choose the number of buckets to be such
that |B| = N . (cid:140)en, the number of passwords in a bucket depends
primarily on the parameter ¯q. Note, bucket size increases with ¯q.
Security analysis. We show that there is no security loss in the
uncompromised se(cid:138)ing for FSB when the actual number of guesses
q is less than the parameter ¯q and the estimate ˆp is accurate. We
also give a bound for the security loss when q exceeds ¯q.
(cid:17).
1
|βFSB(w)| = min(cid:110)|B|,
(cid:108) |B|· ˆps(w)
(cid:109)(cid:111)
Theorem 5.1. Let FSB be a frequency based bucketization scheme
that ensures ∀w ∈ W,
. Assum-
ing that the distribution estimate ˆps = pw , then for the uncompro-
mised users,
(1) Advb-gs
(2)
for q ≤ ¯q, and
ˆps(w ¯q)
βFSB(q) = Advgs(q)
for q > ¯q ,
λq − λ ¯q
≤ ∆q ≤ (q − ¯q) · ˆps(w ¯q) − (λq − λ ¯q)
2
Recall that the probabilities λq are de(cid:128)ned in Equation (3). We
include the full proof for (cid:140)eorem 5.1 in Appendix C. Intuitively,
since the top q passwords are repeated across all buckets, having a
bucket identi(cid:128)er does not allow an a(cid:138)acker to more easily guess
these q passwords. Moreover, the conditional probability of these
q passwords given the bucket is greater than that of any other
password in the bucket. (cid:140)erefore, the a(cid:138)acker’s best choice is
to guess the top q passwords, meaning that it does not get any
additional advantage when q ≤ ¯q, leading to part (1) of the theorem.
(cid:140)e proof of part (2) follows from the upper and lower bounds
on the number of buckets each password beyond the top q is placed
within. (cid:140)e bounds we prove show that the additional advantage
in guessing the password in q queries is less than the number of
# users
# passwords
# user-pw pairs
˜S
901.4
435.9
1,316.6
T
12.9
8.9
13.1
T ∩ ˜S
5.9 (46%)
5.7 (64%)
3.2 (24%)
Tsp
8.4
6.7
8.5
Tsp ∩ ˜S
3.9 (46%)
3.9 (59%)
2.0 (23%)
Figure 7: Number of entries (in millions) in the breach
dataset ˜S, test dataset T , and the site-policy test subset Tsp.
Also reported are the intersections (of users, passwords, and
user-password pairs, separately) between the test dataset en-
tries and the whole breach dataset that the attacker has ac-
cess to. (cid:135)e percentage values refer to the fraction of the
values in each test set that also appear in the intersections.
additional queries times the probability of the ¯qth password and at
least half the di(cid:130)erence in the guessing probabilities λq and λ ¯q.
Note that this analysis of security loss is based on the assumption
that the FSB scheme has access to the precise password distribution,
ˆps = pw . We empirically analyze the security loss in Section 6 for
ˆps (cid:44) pw , in both the compromised and uncompromised se(cid:138)ings.
6 EMPIRICAL SECURITY EVALUATION
In this section we empirically evaluate and compare the security loss
for di(cid:130)erent password-only C3 schemes we have discussed so far —
hash-pre(cid:128)x-based bucketization (HPB) and frequency-smoothing
bucketization (FSB).
We focus on known-username a(cid:138)acks (KUA), since in many
deployment se(cid:138)ings a curious (or compromised) C3 server can
(cid:128)gure out the username of the querying user. We separate our
analysis into two se(cid:138)ings: previously compromised users, where the
a(cid:138)acker has access to one or more existing passwords of the target
user, and previously uncompromised users, where no password
corresponding to the user is known to the a(cid:138)acker (or present in
the breached data).
We also focus on what the honest-but-curious C3 server can
learn from knowing the bucket. In our experiment, we show the
success rate of an adversary that knows the exact leak dataset used
by the server. We expect that an adversary that doesn’t know the
exact leak dataset will have slightly lower success rates.
First we will look into the unrestricted se(cid:138)ing where no password
policy is enforced, and the a(cid:138)acker and the C3 server have the
same amount of information about the password distribution. In
the second experiment, we analyze the e(cid:130)ect on security of giving
the a(cid:138)acker more information compared to the C3 server (defender)
by having a password policy that the a(cid:138)acker is aware of but the
C3 server is not.
Password breach dataset. We used the same breach dataset used
in [40]. (cid:140)e dataset was derived from a previous breach compila-
tion [21] dataset containing about 1.4 billion username-password
pairs. We chose to use this dataset rather than, for example, the
password breach dataset from HIBP, because it contains username-
password pairs.
We cleaned the data by removing non-ASCII characters and
passwords longer than 30 characters. We also combined username-
password pairs with the same case-insensitive username, and we
removed users with over 1,000 passwords, as they didn’t seem to be
associated to real accounts. (cid:140)e authors of [40] also joined accounts
with similar usernames and passwords using a method they called
the mixed method. We joined the dataset using the same mixed
method, but we also kept the usernames with only one email and
password.
(cid:140)e (cid:128)nal dataset consists of about 1.32 billion username-password
pairs.6 We remove 1% of username-password pairs to use as test
data, denoted as T . (cid:140)e remaining 99% of the data is used to simu-
late the database of leaked credentials ˜S. For the experiments with
an enforced password policy, we took the username-password pairs
in T that met the requirements of the password policy to create Tsp.
We use Tsp to simulate queries from a website which only allows
passwords that are at least 8 characters long and are not present in
Twi(cid:138)er’s list of banned passwords [11]. For all a(cid:138)ack simulations,
the target user-password pairs are sampled from the test dataset T
(or Tsp).
In Figure 7, we report some statistics about T , Tsp, and ˜S. No-
tably, 5.9 million (46%) of the users inT are also present in ˜S. Among
the username-password pairs, 3.2 million (24%) of the pairs in T are
also present in ˜S. (cid:140)is means an a(cid:138)acker will be able to compro-
mise about half of the previously compromised accounts trivially
with credential stu(cid:129)ng. In the site-policy enforced test data Tsp, a
similar proportion of the users (46%) and username-password pairs
(23%) are also present in ˜S.
Experiment setup. We want to understand the impact of re-
vealing a bucket identi(cid:128)er on the security of uncompromised and
compromised users separately. As we can see from Figure 7, a large
proportion of users in T are also present in ˜S. We therefore split
T into two parts: one with only username-password pairs from
compromised users (users with at least one password present in
˜S), Tcomp, and another with only pairs from uncompromised users
(users with no passwords present in ˜S), Tuncomp. We generate two
sets of random samples of 5,000 username-password pairs, one
from Tcomp, and another from Tuncomp. We chose 5,000 because
this number of samples led to a low standard deviation (as reported
in Figure 8). For each pair (u, w), we run the games Guess and
BucketGuess as speci(cid:128)ed in Figure 4. We record the results for
guessing budgets of q ∈ {1, 10, 102
, 103}. We repeat each of the
experiments 5 times and report the averages in Figure 8.
For HPB, we compared implementations using hash pre(cid:128)xes of
lengths l ∈ {12, 16, 20}. We use the SHA256 hash function with a
salt, though the choice of hash function does not have a noticeable
impact on the results.
For FSB, we used interval tree data structures to store the leaked
passwords in ˜S for fast retrieval of ˜α(b). We used |B| = 230 buckets,
and the hash function f is set to f (x) = H(30)(x), the 30-bit pre(cid:128)x
of the (salted) SHA256 hash of the password.
Attack strategy. (cid:140)e a(cid:138)acker’s goal is to maximize its success in
winning the games Guess and BucketGuess. In Equation (1) and
Equation (2) we outline the advantage of a(cid:138)ackers against Guess
and BucketGuess, and thereby specify the best strategies for at-
tacks. Guess denotes the baseline a(cid:138)ack success rate in a scenario
where the a(cid:138)acker does not have access to bucket identi(cid:128)ers corre-
sponding to users’ passwords. (cid:140)erefore the best strategy for the
6Note, there are duplicate username-password pairs in this dataset.
a(cid:138)acker A is to output the q most probable passwords according
to its knowledge of the password distribution.
(cid:140)e optimal a(cid:138)ack strategy for A(cid:48) in BucketGuess will be to
(cid:128)nd a list of passwords according to the following equation,
Pr[W = wi
| U = u]
|β((u, wi))|
,
q
i =1
argmax
w1, ...,wq
b∈β((u,wi))
where the bucket identi(cid:128)er b and user identi(cid:128)er u are provided to
the a(cid:138)acker. (cid:140)is is equivalent to taking the top-q passwords in the
set α(b) ordered by Pr[W = w | U = u]/|β((u, w))|.
We compute the list of guesses outpu(cid:138)ed by the a(cid:138)acker for a