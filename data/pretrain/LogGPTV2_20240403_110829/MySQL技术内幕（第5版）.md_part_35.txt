如何生成和处理序列。
坏数据值的。
性的整数类型。
则可能遭遇意外。具有特殊行为的数据类型有：TIMESTAMP和拥有AUTO_INCREMENT属
数据类型很常见，如 BLOB字符串类型。但你需要对某些类型的特殊行为有所了解，否
果
会
发
第3章
是〇值（在严格模式下会产生一个错误）
导致不合理的结果值。例如，当把字符串'13‘赋给一个整型列时，MySQL会自动
生，以及它是如何工作的，这是件很重要的事情，因为有些类型转换毫无意义，
索、显示和操作数据。表达式计算包含了很多约束类型转换的规则。当某种类型
数据类型
，因为'abc'根本就不是一个数字。更糟！
、日期/时间这样的时态值、
而
将
会
的
---
## Page 149
也可以是双引号。请尽量使用单引号，具体原因有两个。
或'12345：（虽然它看起来像一个数值，但实际上不是）。字符串两端的引号既可以是单引号，
3.1.2
者使用CAST（）函数，可以将其转换为一个整数：
例如，b'1001‘和0b1001即为十进制数9。
3.1.1.2位域值
的，
度
的十六进制数字，这会产生二义性。
指数的整数。底数和指数的正负号可以任意组合，如1.58E5、-1.58E5、1.58E-5、-1.58E-5。
在整数或浮点数的后面紧跟着字母e或E；接着是一个正号（+）或负号（-)；然后是一个表示
数点前后的数字序列可以有一个为空，但不能同时为空。
在后面的示例里，会假设未启用ANSI_QUOTES 模式，即双引号是一个字符串引号符。
口SQL 语言标准规定使用单引号，因此使用单引号字符串的语句，能够更好地移植到其
字符串指的是这样一些值，如'Madison，Wisconsin'、
在结果集里，BIT值会被显示为一个二进制串，不过其输出格式并不太好。让它加上零或
位域值可以写成b'val'或0bval，其中，val由一个或多个二进制数字（0或1）构成。
近似值是采用科学计数法表示的浮点数，它们带有一个底数和一个指数。具体表示方法为：
带小数部分的精确值由3个部分组成：一个数字序列、一个小数点和另一个数字序列。小
口
mySql> SELECT b'1001+0,CAST(b'1001AS UNSIGNED);
1b'1001:+0|CAST(b'1001′ASUNSIGNED)
口在表达式里，如果存在字符串必须转换成一个数才能进行计算的情况，那么该字符串
在计算表达式时，MySQL会根据以下规则来决定是使用精确计算还是使用近似计算。
而且会有舍入误差。
例如，你不能原封不动地把1.23456插到只允许两位小数的列里。近似值的计算则是近似
用精确值计算得到的结果也是精确的，只要没有超出那些数值的精度范围，就不会丢失精
你可以在任何一数值的前面加上一个正号（+）或负号（-)，以此表明它是一个正值或负值。
口
口
口
若未启用ANSI_QUOTES模式，那么此语句将为该表的每行选取一次字符串"last_name"。
如果启用了SQL模式ANSI_QUOTES，那么MySQL会将双引号处理成将标识符引起来的
会被转换成一个双精度浮点值。因此，该表达式会按照前面的规则进行近似计算。
DECIMAL算法来进行计算。
如果表达式只包含精确值，但其中有的值带有小数部分，那么它会以具有65位精度的
只要表达式里有近似值，那么它便会被当作浮点（近似）表达式来进行计算。
若启用了ANSI_QUOTES 模式，那么此语句将从president表里选取last_name列的值。
SELECT "last_name" from president;
据库名或表名。请看下面这条语句：
符号，而不会把它只当成将字符串引起来的符号。也就是说，双引号里的值必须是数
他数据库引擎。
如果表达式只包含整数精确值，那么它会以BIGINT（64位）精度来进行计算。
字符串值
9
9
'patient shows improvement
3.1数据值类别
129
---
## Page 150
语句展示了十六进制常量在两种上下文中的解释情况：
0~255；而其结果会被当作一个字符串。在数字上下文中，十六进制常量会被当成一个数。下列
十六进制数字字符（“a”～“f"）都不区分大小写：
例如，x'0a'即为十进制的10，而x'ffff·即为十进制的65535。前导字符“x”和字符串里的
的SQL记法x'val’，其中val由多对十六进制数字（包括“o”～“9”和“
NO_BACKSLASH_ESCAPES 模式。
法可以在字符串内嵌入引号。
线字符，也仍然会被解释为该字符本身。例如，\t是一个制表符，而\T是一个普通的'T'字符。
SQL语言中的NULL值是不同的：NUL代表的是零值字节，而NULL值代表的是“没有值”。
一个反斜线字符（）开始，表示将要临时脱离常规的字符解释规则。请大家注意，NUL字节与
130
mySql> SELECT X'61626364',X'61626364'+0;
在使用引号书写字符串值时，
从表3-1可以看出，你可以用反斜线序列来将单引号或双引号转义，但实际上还有几种方
在字符串上下文中，每两个十六进制数字会被解释为一个8位数字字节值，其取值范围是
mySql> SELECT X'4A',x'4a';
如果需要取消反斜线字符的特殊含义，并把它当作一个普通字符，那么请启用SQL 的
口对嵌入的引号使用反斜线进行转义；此办法不受字符串引号的限制：
口如果嵌入的引号与字符串的引号不相同，那么不用重复即可嵌入：
口如果嵌入的引号与字符串的引号相同，则重复两次即可：
此表里的转义序列是区分大小写的。所有未列在此表里的字符，即使其前面加上一个反斜
MySQL能够识别出字符串里用来代表特殊字符的转义序列，如表3-1所示。转义序列是以
X'4A'
He said, "I told you so."
"He said, ""I told you so."""
第3章数据类型
"I can\'t"
'Ican\'t
"I can't"
'Ican''t'
x'4a'
转义序列
N
-----+
，还有两种形式的十六进制记法可供选择。第一种是使用标准
表3-1字符串转义序列
Ctrl+Z（Windows系统中的EOF字符）
反斜线
制表符
回车符
换行符
退格符
双引号
单引号
NUL（零值字节）
含
义
“a”~“f”）组成。
---
## Page 151
空间。有的 Unicode字符集还会占到每字符4个字节的空间。
其每个字符需要两个字节来存储。utf8是变长多字节字符集，其每个字符需要占用1~3个字节
一个字节以上的空间。例如，MySQL 里的 Unicode字符集是多字节的。ucs2是双字节字符集，
只占用一个字节空间；而对于那些多字节字符集，有的是部分，有的甚至是全部字符都需要占月
3.1.2.1字符串类型与字符集支持
如，0xa 会将被视为 0x0a。
写的十六进制值只有奇数个十六进制数字，那么 MySQL 将会在其前面增加一个字符“0”。例
作数字：
小写。
mySql> SHOW CHARACTER SET;
与X'va7"记法的情况类似，0x值会被默认解释为字符串，但在数值上下文中，则可能被月
下面两条语句可用来查看服务器上都提供有哪些字符集，以及它们的排序则是什么：
字符单位在占用存储空间方面存在差异。对于像laltin1这样的单字节字符集，每个字符
口非二进制串是一个字符序列。每一个非二进制串都与字符集相关，字符集决定了：哪些
口二进制串是一组字节序列。对这些字节的解释不牵涉任何字符集概念。
字符串值一般可以分为两类，即二进制串和非二进制串。
X'val'记法要求构成val的数字个数为偶数。
mysql> SELECT 0x61626364, 0x61626364+0;
第二种记法是以“0x”开头，后面跟着一个或多个十六进制数字。前缀“0x”需要区分大
big5
Charset
abcd
0x61626364
X'61626364'1X'61626364'+0
latinl
koi8r
cp850
dec8
abcd
错误。
果它与另一个已有值只是在尾部空格的个数上不同，那么会导致一个“关键字重复
尾部补足一些空格，因此当你试图往一个具有唯一性的 TEXT 索引里插入某个值时，
非二进制串里的尾部空格不会参与比较，但TEXT类型除外。由于基于索引的比较会在
产生影响。默认的字符集和排序规则分别为 latin1和 latin1_swedish-ci。
则。字符串所使用的排序规则决定了字符在字符集里的先后顺序，而这会对比较操作
字符可以用；MySQL会如何解释字符串的内容。每个字符集都有一种或多种排序规
有意义，甚至包括结尾的空格。
特殊的比较或排序属性。比较操作是基于各字节的数值逐个字节实现的。所有字节都
cp1252 West European
HP West European
Big5 Traditional Chinese
Description
KOI8-R Relcom Russian
一
0x61626364+0
1633837924
1633837924
European
=+
像X'a'这样的值是非法的。如果用0x记法
latin1_swedish_ci
koi8r_general_ci
hp8_english_ci
big5_chinese_ci
Default collation
dec8_swedish_ci
，更多详细信息请参考2.4.3节。
3.1数据值类别
Maxlen
二进制串没有
2
LLL
131
用
在
用
---
## Page 152
mysql和其他的客户程序可以检测到它们，并进行相应的调整。更多详细信息请参考3.1.2.2节。
和latin1_swedish-ci。不过，当你将环境变量LANG或LC_ALL 设置为某个指定语言区域时，
缀具有下列含义。
作遵从的是冰岛（icelandic）排序规则，并且被比较字符都要区分大小写。排序规则名里的后
的后缀构成。例如，utf8_icelandic_ci是Unicode字符集utf8的一种排序规则，其比较操
集
12
上，而每个给定的字符集可以有多种排序规则。排序规则名由字符集名、语言名和一个附加
mySq1> SELECT CHARSET(X'0123'),COLLATION(X'0123'）;
默认情况下，MySQL把十六进制常量当作二进制串对待：
引号里的字符串会根据服务器的当前设置来解释。默认的字符集和排序规则分别为latin1
因为排序规则应用于比较和排序，所以它们会对以下操作造成影响。
口非二进制串是
你
11
口
口
口_ci表明排序规则不区分大小写。
从 SHOWCOLLATION语句的输出内容里可以看到，
mysql> SHOW COLLATION;
口
口
口
可以使用函数CHARSET（）或COLLATION（）来确定某个字符串的字符集和排序规则。
分组：GROUP
排序规则或者是二进制排序规则。
进制串的比较一般
规则。大多数排序规则都把同一个字符的大小写形式设定为相同的排序值，所以非二
排序规则的一项功能，只适用于字符（非二进制）字符串。
1二进制串是逐字节进行比较的，其结果只取决于每个字节的数值大小。因此，二进制串
进制串和非二进制串有着不同的排序特性。
_bin 表明这是一种二进制排序规则。
_cs 表明排序规则要区分大小写。
big5_bin
big5_chinese_ci
Collation
ucs2
utf8
比较运算符：<
看
utf8_bin。
的，与语言无关。
latin1_spanish_ci
latinl_general_cs
atinl_general_ci
latinl_bin
latinl_danish_ci
latinl_german1_ci
第3章数据类型
写形式有
起来像是区分大小写的（如'abc
是按字符进行比较的，每一个字符的相对值取决于当前所用字符集的排序
着不同的字节数值而已。
UCS-2 Unicode
UTF-8 Unicode
BY和 DISTINCT。
BY、