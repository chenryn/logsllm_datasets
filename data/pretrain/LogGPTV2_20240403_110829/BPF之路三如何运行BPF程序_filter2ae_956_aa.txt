# BPF之路三如何运行BPF程序
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## eBPF对象的生命周期
BPF的对象包括:
  * BPF程序
  * BPF映射
  * 调试信息
###  创建BPF映射的过程
进行`bpf(BPF_MAP_CREATE, ...)`系统调用时, 内核会:
  * 分配一个`struct bpf_map`对象
  * 设置该对象的引用计数: `refcnt=1`
  * 返回一个fd给用户空间
如果进程退出或者崩溃, 那么BPF映射对应的fd也会被关闭, 导致`refcnt--`变为0, 之后就会被内核释放掉
###  加载BPF程序的过程
对于引入了BPF映射的BPF程序, 加载分为两个阶段
  * 创建映射: 这些映射fd之后会放到`BPF_LD_IMM64`指令的imm字段中, 成为BPF程序的一部分
  * 对BPF程序进行检验. 检验器会把其引用的映射的refcnt++, 并设置改程序的refcnt=1
此后
  * 用户空间close()映射的fd时, 由于BPF程序还在使用, 因此映射不会被删除.
  * 当BPF程序的fd被关闭时, 如果其refcnt变为0, 那么就会回收该BPF程序, 其所有引用的映射的`refcnt--`
###  把BPF程序attach到钩子上
把BPFattach到hook上之后, BPF程序的`refcnt++`. 此时创建, 加载BPF的用户空间程序就可以退出了.
因此还有hook保持着对BPF程序的引用, BPF程序并不会被回收.
总之, 只要BPF对象的引用计数大于0, 内核就不会回收
###  BPF文件系统(BPFFS)
用户空间的程序可以把一个BPF或者BPF映射固定到BPFFS, 以生成一个文件. pin操作会使得BPF对象`refcnt++`,
因此即使这个BPF程序没有attach到任何地方, 或者一个BPF映射没有被任何地方使用, 在加载程序退出后, 这些BPF对象任然会存活
如果想要取消某个固定的对象, 只要调用unlink()即可, 也可以直接用rm命令删除这个文件
###  总结
  * `create -> refcnt=1`
  * `attach -> refcnt++`
  * `detach -> refcnt--`
  * `pin -> refcnt++`
  * `unpin -> refcnt--`
  * `unlink -> refcnt--`
  * `close -> refcnt--`
## eBPF程序相关操作
###  加载: load
通过`bpf(BPF_PROG_LOAD, ...)`系统调用加载程序,
将其指令注入内核。程序通过验证器会进行许多检查并可能重写一些指令（特别是对于地图访问）。如果启用了 JIT 编译，则程序可能是 JIT
编译的。内核会为这个程序建立一个`struct bpf_prog`对象, 包含有关此程序的信息，例如eBPF字节码和JIT编译的指令。
**在这个过程结束时，程序位于内核内存中, 它不依附于特定对象**
。它有一个引用计数器，内核会一直保持它直到计数器归零。引用可以由文件描述符保存到程序：例如，一个由`bpf()`系统调用返回到加载应用程序。可以通过附加、链接、固定程序或在prog_array
映射中引用它来创建其他引用。如果没有引用保留（例如，加载应用程序在加载程序后立即退出，从而关闭其指向该程序的文件描述符），则将其从内核中删除。
“附加类型”(attach type)的概念取决于程序类型(prog_type)。有些程序类型没有这个概念：XDP 程序只是附加到接口的 XDP
钩子上。附加到 cgroups 的程序确实有一个“附加类型”，它告诉程序附加到哪里，确切地说。
加载程序大多与这些附加类型分开。但是某些程序类型需要在加载时就说明附加类型, 在进行bpf()系统调用时, 通过`union
bpf_attr`的`expected_attach_type`来传递预期的附加类型. 验证器和系统调用处理程序使用这种预期的附加类型来执行各种验证。
###  附加: attach
现在BPF程序已经被加载到内核中随时可以执行. 通过attach可以把程序挂到一些事件的钩子上. 当事件发生时BPF程序就会被调用.
###  链接: link
当加载BPF的程序关闭时, 由于BPF程序引用归零, 就会被内核卸载. 那么如何在程序关闭时保持BPF程序的运行呢? 此时可以使用链接.
BPF程序可以attach到一个链接, 而不是传统的钩子. 链接本身attacah到内核的钩子. 这为操作程序提供了更好的接口.
一个优点时可以固定这种链接, 在加载程序退出时保持BPF继续运行. 另一个优点是更容易跟踪程序中持有的引用, 以确保加载程序意外退出时没有BPF程序被加载
不要把BPF程序的链接与编译ELF文件时的链接弄混. 目标文件的链接重定位过程与BPF的链接无关
###  固定: pin
Pin是一种保持BPF对象(程序, 映射, 链接)引用的方法. 通过`bpf(BPF_OBJ_PIN, ...)`这个系统调用完成,
这会在eBPF的虚拟文件系统中创建一个路径, 并且之后可以用过`open()`该路径来获取该BPF对象的文件描述符. 只要一个对象被固定住,
他就会一直保留在内核中, 不需要pin或者map就可运行它. 只要存在其他引用(文件描述符. 附加到一些钩子,
或者被其他程序引用)程序就会一直加载在内核中, attach之后可以直接运行
固定一个BPF链接可以确保: attach到该链接的程序在加载程序退出并关闭他的文件描述符之后, 仍然被加载
###  总结
  * load: 向内核注入一段程序并进行检验. BPF程序可能重写某些指令并链接到内部的BPF对象. 可能会发生JIT编译. 有时候需要`expected_attach_type`字段
  * attach: 把BPF程序附加到与程序类型相关的钩子上
  * link: 根据程序类型把程序附加到BPF链接上, 而不是直接附加到常规的附着点上. BPF链接会附加到常规的钩子上, 以提供更灵活的接口来管理程序
  * pin: 程序或者链接可以被固定到bpf文件系统以实现持久化(重启后失效)
## 例子一: 用eBPF跟踪socket
首先需要编译出BPF程序, 这里调用了助手函数`bpf_trace_printk`, 这会向内核追踪日志中写入消息,
可以通过读取`/sys/kernel/debug/tracing/trace_pipe`获取输出
    //clang -O2 -target bpf -c ./prog.c -o ./prog.o
    #include 
    static int (*bpf_trace_printk)(const char *fmt, int fmt_size, ...) = (void *) BPF_FUNC_trace_printk;
    unsigned long prog(void){
        char fmt[]="Get";
        bpf_trace_printk(fmt, sizeof(fmt));
        return 0;
    }
编译后的指令如下, 对于外部助手的函数被翻译为`call 6`
再用llvm-objcopy提取text段的指令到`prog.text`文件
加载器首先需要读入指令, 然后向内核注入此程序, 以获取BPF程序对应的文件描述符. 接着开启一个socket,
通过socketopt()函数让eBPF程序附着在socket上. 整体代码如下
    //gcc ./loader.c -o loader
    #include 
    #include   //为了exit()函数
    #include     //为了uint64_t等标准类型的定义
    #include     //为了错误处理
    #include     //位于/usr/include/linux/bpf.h, 包含BPF系统调用的一些常量, 以及一些结构体的定义
    #include     //为了syscall()
    //类型转换, 减少warning, 也可以不要
    #define ptr_to_u64(x) ((uint64_t)x)
    //对于系统调用的包装, __NR_bpf就是bpf对应的系统调用号, 一切BPF相关操作都通过这个系统调用与内核交互
    int bpf(enum bpf_cmd cmd, union bpf_attr *attr, unsigned int size)
    {
        return syscall(__NR_bpf, cmd, attr, size);
    }
    //用于保存BPF验证器的输出日志
    #define LOG_BUF_SIZE 0x1000
    char bpf_log_buf[LOG_BUF_SIZE];
    //通过系统调用, 向内核加载一段BPF指令
    int bpf_prog_load(enum bpf_prog_type type, const struct bpf_insn* insns, int insn_cnt, const char* license)
    {
        union bpf_attr attr = {
            .prog_type = type,        //程序类型
            .insns = ptr_to_u64(insns),    //指向指令数组的指针
            .insn_cnt = insn_cnt,    //有多少条指令
            .license = ptr_to_u64(license),    //指向整数字符串的指针
            .log_buf = ptr_to_u64(bpf_log_buf),    //log输出缓冲区
            .log_size = LOG_BUF_SIZE,    //log缓冲区大小
            .log_level = 2,    //log等级
        };
        return bpf(BPF_PROG_LOAD, &attr, sizeof(attr));
    }
    //开启一个socket
    int get_listen_socket(char *ip, int port){
        //获取一个TCP类型的socket
        int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); 
        //设置地址对象, 采用IPv4
        struct sockaddr_in serv_addr;
        memset(&serv_addr, 0, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_addr.s_addr = inet_addr(ip);
        serv_addr.sin_port = htons(port);
        //把socket绑定的指定地址
        bind(sock, (struct sockaddr *)(&serv_addr), sizeof(serv_addr));
        //socket进入监听模式
        listen(sock, 20);
        return sock;
    }
    //保存BPF程序
    struct bpf_insn bpf_prog[0x100];
    int main(int argc, char **argv){
        //先从文件中读入BPF指令
        int text_len = atoi(argv[2]);
        int file = open(argv[1], O_RDONLY);
        if(read(file, (void *)bpf_prog, text_len)<0){
            perror("read prog fail");
            exit(-1);
        }
        close(file);
        //把BPF程序加载进入内核, 注意这里程序类型一定要是BPF_PROG_TYPE_SOCKET_FILTER, 表示BPF程序用于socket
        int prog_fd = bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER, bpf_prog, text_len/sizeof(bpf_prog[0]), "GPL");
        printf("%s\n", bpf_log_buf);
        if(prog_fd<0){
            perror("BPF load prog");
            exit(-1);
        }
        printf("prog_fd: %d\n", prog_fd);
        //打开一个socket进入监听状态
        int sock = get_listen_socket("0.0.0.0", 9527);
        printf("socket: %d\n", sock);
        //把已经加载的BPF程序附加到socket上, 这样当数据到来时这个BPF程序就会被调用
        if(setsockopt(sock, SOL_SOCKET, SO_ATTACH_BPF, &prog_fd, sizeof(prog_fd))<0){
            perror("set socket error");
            exit(-1);
        }
        //调用accept()等待链接到来
        struct sockaddr_in clnt_addr;
        socklen_t clnt_addr_size = sizeof(clnt_addr);
        int clnt_sock = accept(sock, (struct sockaddr *)(&clnt_addr), &clnt_addr_size);
    }
运行loader然后读入内核日志, 用nc向loader发起链接就可以看到日志的输出
## 例子二: 用eBPF跟踪系统调用
我们使用同一个BPF程序, 加载BPF的过程与上文类似, 区别在与attach的过程, 本例中需要通过perf机制来跟踪系统调用.
有关perf的部分只做简要介绍, 具体的可以看`perf_event_open`系统调用的手册