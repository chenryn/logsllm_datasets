### Target and Encryption Context

The target is a constant secret string that is repeatedly transmitted over an encrypted channel. The persistence of this string remains unaffected even if the TLS session is terminated and the keying material changes across sessions. This proof of concept, named "Lucky 13," is derived from the size of the pseudo-header MAC'ed with the message.

### Probability of False Positives

To be precise, there is a \(2^{-16}\) probability of obtaining a plaintext ending with `01 01`, a \(2^{-24}\) probability for `02 02 02`, and so on. To eliminate these false positives, the attacker can simply repeat the operation with a different random string in \(C^*\).

### Hypotheses and Prerequisites

- The connection uses CBC mode with a timing information leak.
- The attacker can intercept and modify packets.
- Multiple connections containing the same secret can be triggered.

### Proposed Countermeasures

1. **Add Random Delays to CBC-Mode Decryption:**
   - This would increase the complexity of the attack by requiring more samples to compute the mean value.

2. **Implement Constant-Time MAC-then-Encrypt:**
   - Such implementations counter the attack, but the code needed for efficient record processing in effectively constant time is complex (the OpenSSL patch is almost 300 lines long).

3. **Use RC4 to Avoid CBC Mode:**
   - This thwarts the attack but is inconsistent with other measures.

4. **Use TLS 1.2 AEAD Suites:**
   - This works but is hard to deploy reliably.

5. **Switch to Encrypt-then-MAC:**
   - This would solve the problem, but the specification is still young and relies on an extension, leading to deployment and reliability issues similar to TLS 1.2.

### RC4 Biases

RC4 is a stream cipher designed by Rivest in 1987, known for its simplicity and performance. It has been widely adopted in protocols such as WEP, WPA, and TLS. Since 1995, several statistical biases have been identified in the first bytes of the RC4 keystream, leading to efficient attacks against WEP.

#### Initial Biases and Mitigation

- **Initial Biases:** Dropping the first \(n\) bytes of the keystream was proposed, but later findings showed additional statistical biases even after the initial bytes.
- **Practical Attacks (2013):** Two research teams presented practical attacks against the encryption of the same fixed sequence of plaintext using large numbers of different keys, applicable to HTTPS cookies.

#### Single-Byte Bias Attack

- **Description:** The first 256 bytes of the keystream are strongly biased. Using an empirical reference of \(2^{45}\) keystreams, it is possible to recover the first 256 bytes of a plaintext, given a sufficient number of encryptions (ranging from \(2^{24}\) to \(2^{32}\)).
- **Implementation:** The attack is challenging due to the requirement of many different TLS connections and only works for data sent in the first few bytes.

#### Double-Byte Bias Attack

- **Description:** This attack uses long-term biases described by Fluhrer and McGrew on consecutive bytes, making it more practical and applicable to pipelined HTTPS streams.
- **Proof of Concept:** A proof of concept was developed to recover an HTTP cookie.

### Hypotheses and Prerequisites for RC4 Attacks

- TLS uses RC4 to encrypt data.
- The attacker can observe encrypted packets.
- Multiple connections containing the same secret can be triggered.

### Proposed Countermeasures for RC4

1. **Use CBC Mode to Avoid RC4:**
   - An efficient way to counter the attack, easily and reliably deployable.

2. **Use TLS 1.2 AEAD Suites:**
   - Works but leads to deployment and reliability issues.

3. **Use Another Stream Cipher:**
   - ChaCha20 is currently under examination by the IETF as an alternative stream cipher, potentially easier to deploy than a protocol version switch.

4. **Throw Away the First Bytes of the Keystream:**
   - Could be specified in TLS or HTTP, but exploitable long-term RC4 biases exist.

5. **Randomize Packet Length:**
   - Increases the complexity of the attack, similar to compression attacks.

### POODLE: Another Padding Oracle

POODLE (Padding Oracle on Downgraded Legacy Encryption) is a padding oracle attack targeting SSLv3 CBC mode. The old SSL version handles CBC padding in a specific way, allowing an attacker to exploit this for a padding oracle.

#### Attack Description

- **Trigger Requests:** The attacker can trigger requests to a vulnerable site using SSLv3 and CBC mode, preparing the request so that the cookie ends on a block boundary.
- **Modify Record:** The attacker modifies the record on the wire, replacing the all-padding block with the block where the last byte is to be guessed.
- **Decryption Check:** If the decryption of the last blocks leads to the correct value, the record is accepted; otherwise, a MAC error occurs, and the connection is terminated.

#### Hypotheses and Prerequisites for POODLE

- The connection uses SSLv3 with CBC mode.
- Plaintext can be loosely controlled by the attacker.
- The attacker can intercept and modify packets.
- Multiple connections containing the same secret can be triggered.

### Proposed Countermeasures for POODLE

1. **Use TLS 1.0:**
   - Efficient as the attack is only present in SSLv3, and a small portion of the internet still relies on this version.

2. **Use RC4 to Avoid CBC Mode:**
   - Works but is inconsistent with other measures.

3. **Use TLS 1.2 AEAD Suites:**
   - Works but has deployment and reliability issues.

4. **Switch to Encrypt-then-MAC:**
   - Works with the same reservations as before.

5. **Anti-POODLE Record Splitting:**
   - Proposed by Opera and Google’s developer Adam Langley, but may not block new SSLv3 padding oracle attacks.

6. **TLS FALLBACK SCSV:**
   - Mechanism to avoid browser fallbacks when a higher version is supported by both client and server, blocking downgrade attacks and POODLE between up-to-date parties.

### Comparative Analysis of Countermeasures

| Countermeasure | Dep. | Rel. | HTTP | BEAST | L13 | RC4 | *IME | POODLE |
|----------------|------|------|------|-------|-----|-----|------|--------|
| Use TLS 1.0    | +    | +    | +    | -     | -   | -   | -    | +      |
| Use TLS 1.1    | +    | +    | +    | -     | -   | -   | -    | +      |
| Encrypt-then-MAC | - | - | + | + | + | + | + | + |
| Use CBC mode   | +    | +    | +    | +     | +   | -   | -    | -      |
| Use RC4        | +    | +    | +    | -     | -   | +   | -    | -      |
| Use a new stream cipher | + | + | + | + | + | + | + | + |
| Use AEAD (TLS 1.2) | + | + | + | + | + | + | + | + |
| No TLS compression | + | + | + | + | + | + | + | + |
| 1/n − 1 split  | +    | +    | +    | +     | +   | +   | +    | +      |
| Constant-time CBC | + | + | + | + | + | + | + | + |
| Anti-POODLE splitting | + | + | + | + | + | + | + | + |
| Other countermeasures | - | - | - | - | - | - | - | - |

### Attacker Model and Masking Principle

The legitimate actors considered are:
- **User Agent:** e.g., Firefox
- **HTTP(S) Server:** e.g., Apache
- **Web Application:** e.g., a program written in PHP or Python
- **Framework:** e.g., Django or Zend

The attacker is an active network attacker who can read, modify, or delete packets between the client and the server. We assume a secret cookie is repeated across different TLS messages.

Given a TLS session, the attacker can retrieve information about \(\kappa\) consecutive bytes of the corresponding plaintext, typically \(\kappa = 1\). By repeating the attack on constant plaintext bytes, the attacker can recover this part of the plaintext. These attacks can be considered first-order attacks, and the masking principle can be used to mitigate them.