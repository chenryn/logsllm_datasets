:::
进入方法manifest.write（outputJar）：\
::: bodypic-c
![](OEBPS/Images/184-3-i.jpg){.calibre251}
:::
::: bodypic-c
![](OEBPS/Images/185-i.jpg){.calibre470}
:::
代码逻辑很简单，主要看那个循环的意思：除了三个文件（MANIFEST.MF、CERT.RSA、CERT.SF）之外都会对其他文件内容做一次SHA1算法，就是计算出文件的摘要信息，然后用Base64进行编码即可，下面用工具来做个案例看看是不是这样：首先安装工具：HashTab，这个工具网上有，可以自行搜索下载。然后网上搜索在线计算Base64。
下面就开始验证工作吧。验证一下AndroidManifest.xml文件，首先在MANIFEST.MF文件中找到这个条目，记录SHA1的值，如下所示：
::: bodypic-c
![](OEBPS/Images/185-2-i.jpg){.calibre471}
:::
安装HashTab之后，找到AndroidManifest.xml文件，右击，选择Hashtab，如图12-7所示。
复制SHA-1的值：9C64812DE7373B201C294101473636A3697FD73C，到上面的那个Base64转化网站，转化一下，如图12-8所示。
::: bodypic-c
![](OEBPS/Images/12a7-i.jpg){.calibre472}
:::
图12-7 查看文件的SHA-1值
::: bodypic-c
![](OEBPS/Images/12a8-i.jpg){.calibre473}
:::
图12-8 SHA-1值转化
nGSBLec3OyAcKUEBRzY2o2l/1zw=和MANIFEST.MF中的条目内容一模一样。
那么从上面的分析就知道了，其实MANIFEST.MF中存储的是这样的内容：逐一遍历里面所有条目，如果是目录就跳过，如果是一个文件，就用SHA1（或者SHA256）消息摘要算法提取出该文件的摘要然后进行BASE64编码后，作为"SHA1-Digest"属性的值写入到MANIFEST.MF文件中的一个块中。该块还有一个"Name"属性，其值就是该文件在apk包中的路径。
###### 2.CERT.SF文件 {.section-subtitle}
这个文件主要是前面MANIFEST.MF文件的每个块内容的数据摘要信息，如下所示：
::: bodypic-c
![](OEBPS/Images/186-i.jpg){.calibre474}
:::
::: bodypic-c
![](OEBPS/Images/187-i.jpg){.calibre475}
:::
这里的内容感觉和MANIFEST.MF的内容差不多，来看看代码吧：
::: bodypic-c
![](OEBPS/Images/187-2-i.jpg){.calibre446}
:::
进入到writeSignatureFile方法中：
::: bodypic-c
![](OEBPS/Images/187-3-i.jpg){.calibre190}
:::
首先可以看到，需要对之前的MANIFEST.MF文件整个内容做一个SHA1放到SHA1-Digest-Manifest字段中。
看看manifest变量就是刚刚写入了MANIFEST.MF文件的，这个可以验证一下，如图12-9所示。
然后转化一下，如图12-10所示。
::: bodypic-c
![](OEBPS/Images/12a9-i.jpg){.calibre476}
:::
图12-9 查看文件的SHA-1值
::: bodypic-c
![](OEBPS/Images/12a10-i.jpg){.calibre477}
:::
图12-10 SHA-1值转化成Base64
看到了吧，和文件中的值是一样的，如下所示：
::: bodypic-c
![](OEBPS/Images/188-i.jpg){.calibre19}
:::
下面继续看代码，有一个循环：
::: bodypic-c
![](OEBPS/Images/188-2-i.jpg){.calibre127}
:::
这里还是用到了刚刚传入的mainfest变量，遍历它的条目内容，然后进行SHA算法计算，再用Base64计算一下。其实就是对MANIFEST.MF文件中的每个条目内容做一次SHA，再保存一下即可。
做个例子验证一下：用AndroidManifest.xml为例，把MANIFEST.MF文件中的条目拷贝保存到txt文档中，如图12-11所示。
::: bodypic-c
![](OEBPS/Images/12a11-i.jpg){.calibre478}
:::
图12-11 签名文件格式\
这里需要注意的是，保存之后，需要添加两个换行，可以在代码中看到逻辑如下所示：
::: bodypic-c
![](OEBPS/Images/189-i.jpg){.calibre479}
:::
然后计算txt文档的SHA值，如图12-12和图12-13所示。
::: bodypic-c
![](OEBPS/Images/12a12-i.jpg){.calibre480}
:::
图12-12 查看文件签名
::: bodypic-c
![](OEBPS/Images/12a13-i.jpg){.calibre481}
:::
图12-13 Base64转码
看到了吧，这里计算的值是一样的，如下所示：
::: bodypic-c
![](OEBPS/Images/189-2-i.jpg){.calibre482}
:::
到这里就知道CERT.SF文件做了什么，如下所示：
1）计算MANIFEST.MF文件的整体SHA1值，再经过BASE64编码后，记录在CERT.SF主属性块（在文件头上）的"SHA1-Digest-Manifest"属性值值下。
2）逐条计算MANIFEST.MF文件中每一个块的SHA1，并经过BASE64编码后，记录在CERT.SF中的同名块中，属性的名字是"SHA1-Digest"。
###### 3.CERT.RSA文件 {.section-subtitle}
这个文件就是对前面CERT.SF文件做签名操作之后的结果，也就是前面提到的签名文件，如下所示：
::: bodypic-c
![](OEBPS/Images/189-3-i.jpg){.calibre483}
:::
看到都是二进制文件，因为RSA文件加密了，所以需要用openssl命令才能查看其内容，如下所示：
::: bodypic-c
![](OEBPS/Images/190-i.jpg){.calibre484}
:::
::: bodypic-c
![](OEBPS/Images/190-2-i.jpg){.calibre485}
:::
关于这些信息，可以参考图12-14的解释。
来看一下代码：
::: bodypic-c
![](OEBPS/Images/190-3-i.jpg){.calibre486}
:::
::: bodypic-c
![](OEBPS/Images/191-i.jpg){.calibre304}
:::
::: bodypic-c
![](OEBPS/Images/12a14-i.jpg){.calibre487}
:::
图12-14 rsa文件格式说明
这里会把之前生成的CERT.SF文件用私钥计算出签名，然后将签名以及包含公钥信息的数字证书一同写入CERT.RSA保存。CERT.RSA是一个满足PKCS7格式的文件。
[]{#075.xhtml}
#### 12.3 Android中为何采用这种签名机制 {.bodycontent-title2}
本节总结一下Android中为何要用这种方式进行加密签名，如果apk文件被篡改后会发生什么。
首先，如果改变了apk包中的任何文件，那么在apk安装校验时，改变后的文件摘要信息与MANIFEST.MF的检验信息不同，于是验证失败，程序就不能成功安装。其次，如果对更改过的文件算出新的摘要值，然后更改MANIFEST.MF文件里面对应的属性值，那么必定与CERT.SF文件中算出的摘要值不一样，照样验证失败。最后，如果你还不死心，继续计算MANIFEST.MF的摘要值，相应地更改CERT.SF里面的值，那么数字签名值必定与CERT.RSA文件中记录的不一样，还是失败。
那么能不能继续伪造数字签名呢？不可能，因为没有数字证书对应的私钥。所以，如果要重新打包后的应用程序能在Android设备上安装，必须对其进行重签名。
从上面的分析可以得出，只要修改了apk中的任何内容，就必须重新签名，不然会提示安装失败。
在分析了签名技术之后，无意中发现一个问题，就是CERT.SF和MANIFEST.MF这两个文件中内容的name字段都是apk中的资源名，那么就有一个问题了，如果资源名很长，而且apk中的资源很多，那么这两个文件就会很大，这里是不是可以优化呢？确实是可以的。这里不多详细解析，感兴趣的同学可以去看一下开源框架AndResGuard。
[]{#076.xhtml}
#### 12.4 本章小结 {.bodycontent-title2}
本章主要介绍了Android中的apk签名机制知识点，有了这套签名机制，可以做到应用防止被重新打包二次签名的风险。
[]{#077.xhtml}
### 第13章 Android应用加固原理 {.bodycontent-title4}
本章介绍Android中对apk进行加固的原理。现阶段Android中的反编译工作越来越容易操作，开发者辛苦地开发出一个apk，结果被人反编译了，那心情真心不舒服。虽然加入混淆，做到native层，但是这都是治标不治本的办法。反编译的技术在更新，那么保护apk的技术就不能停止。现在网上有很多apk加固的第三方平台，例如爱加密和梆梆等。有些人认为加固技术很高深，其实不然，加固技术就是对源apk进行加密，然后再套上一层壳即可。当然还有一些细节需要处理，这就是本章需要介绍的内容。
[]{#078.xhtml}
#### 13.1 加固原理解析 {.bodycontent-title2}
下面就来看一下Android中加固的原理，如图13-1所示。
::: bodypic-c
![](OEBPS/Images/13a1-i.jpg){.calibre488}
:::
图13-1 加固结构图\
在加固的过程中需要三个对象：
·需要加密的apk（源apk）
·自己的壳程序apk（负责解密apk工作）
·加密工具（将源apk进行加密和壳dex合并成新的dex）
[加固的主要步骤：]{.yanse}拿到需要加密的apk（源apk）和自己的壳程序apk，然后用加密算法对源apk进行加密，再将壳apk进行合并得到新的dex文件，最后替换壳程序中的dex文件即可，得到新的apk，那么这个新的apk也叫作脱壳程序apk。它已经不是一个完整意义上的apk程序了，它的主要工作是：负责解密源apk，然后加载apk，让其正常运行起来。
在这个过程中可能需要了解的一个知识是：如何将源apk和壳apk进行合并成新的dex。这就需要了解dex文件的格式了。在第7章中已经详细介绍了dex文件格式了，下面就来简单回顾一下dex文件的格式。
主要来看一下dex文件的头部信息，其实dex文件和class文件的格式分析原理都是一样的，它们都有固定的格式，现在反编译的一些工具如下所示：
·jd-gui：可以查看jar中的类，其实它就是解析class文件，只要了解class文件的格式就可以。
·dex2jar：将dex文件转化成jar，原理也是一样的，只要知道dex文件的格式，能够解析出dex文件中的类信息就可以了。
当然在分析这个文件的时候，最重要的还是头部信息，它是一个文件的开始部分，也是索引部分，内部信息很重要，如图13-2所示。
::: bodypic-c
![](OEBPS/Images/13a2-i.jpg){.calibre489}
:::
图13-2 dex文件头部结构图
只要关注图中标记的三个部分：
1）checksum：文件校验码，使用alder32算法校验文件除去maigc、checksum外余下的所有文件区域，用于检查文件错误。
2）signature：使用SHA-1算法hash除去magic、checksum和signature外余下的所有文件区域，用于唯一识别本文件。
3）file_size：dex文件的大小。
为什么说只需要关注这三个字段呢？因为需要将一个文件（加密之后的源apk）写入到dex文件中，那么肯定需要修改文件校验码（checksum）。因为它检查文件是否有错误。signature也是一样，也是唯一识别文件的算法。还需要修改dex文件的大小。
不过这里还需要一个操作，就是标注一下加密的apk的大小，因为在脱壳的时候，需要知道apk的大小，才能正确得到apk。那么这个值放到哪呢？直接放到文件的末尾就可以了。
总结一下需要做的步骤：修改dex的三个文件头，将源apk的大小追加到新的dex末尾就可以了。修改之后得到新的dex文件样式如图13-3所示。
::: bodypic-c
![](OEBPS/Images/13a3-i.jpg){.calibre490}
:::
图13-3 apk加固原理图\
知道原理后就来看代码实现，这里有三个项目：
·源程序项目（需要加密的apk）
·加壳项目（对源apk进行加密，和脱壳项目的dex进行合并）
·脱壳项目（解密源apk和加载apk）
[]{#079.xhtml}
#### 13.2 案例分析 {.bodycontent-title2}
根据上节分析得知，加固后新的dex文件中有三个项目，本节来依次看一下这三个项目的代码实现。
###### 1.需要加密的源程序apk项目：ForceApkObj {.section-subtitle}
需要一个Application类，如图13-4所示。
::: bodypic-c
![](OEBPS/Images/13a4-i.jpg){.calibre491}
:::
图13-4 加固apk项目结构图\
下面来分析一下MyApplication源码：
::: bodypic-c
![](OEBPS/Images/195-i.jpg){.calibre492}
:::
就是打印一下onCreate方法。继续来分析一下MainActivity源码：
::: bodypic-c
![](OEBPS/Images/195-2-i.jpg){.calibre493}
:::
::: bodypic-c