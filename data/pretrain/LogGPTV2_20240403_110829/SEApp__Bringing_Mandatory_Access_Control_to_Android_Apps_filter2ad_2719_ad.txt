### 7. Performance Evaluation

#### 7.1 App Installation

The introduction of dedicated app policies in SEApp involves additional steps during the app installation process, such as validating, compiling, and loading each SEApp module. To evaluate the performance impact, we conducted tests using multiple application samples.

**Test Setup:**
- **Sample Apps:** We downloaded the 150 most popular free apps from Google Play (as of October 2020) and categorized them into three buckets: basic, ordinary, and huge, based on a weighted normalized average of the .apk size, number of Android activities, and number of services.
- **Policy Configurations:**
  - **Basic:** 1 domain and 1 type per policy module.
  - **Ordinary:** 10 domains and 25 types.
  - **Huge:** 20 domains and 100 types.
- **Rationale:** Larger apps can benefit significantly from more complex policies, allowing for better intra-app isolation and flexibility.

**Test I: Policy Overhead During Installation**
- **Methodology:** Each app bucket (basic, ordinary, and huge) was installed via Android Debug Bridge (adb).
- **Results:**
  - **Basic and Ordinary Policies:** The overhead is negligible, never exceeding 1.22 ± 0.02 seconds.
  - **Huge Policies:** The maximum overhead is 3.59 ± 0.04 seconds.
- **Conclusion:** The overhead is minimal for basic and ordinary policies, with a moderate increase for huge policies.

**Test II: Cumulative Installations**
- **Methodology:** We repeated the installation of the top 100 apps on Google Play Store with the same policy configurations.
- **Results:**
  - **Overall Overhead:** 20.98 ± 1.31% on total installation time.
  - **Detailed Breakdown:**
    - **Basic Policies:** Negligible overhead.
    - **Ordinary Policies:** Slight increase.
    - **Huge Policies:** 45.35 ± 2.44% on total installation time.
- **Conclusion:** The cumulative overhead increases with the complexity of the policies, but even for huge policies, the overhead remains manageable.

**Table 3: Policy Size**

| Policy                  | #Types | #AV Rules | KB |
|-------------------------|--------|-----------|----|
| System                  | 1536   | 29228     | 596|
| System + 100 Basic      | 1836   | 47028     | 867|
| System + 100 Ordinary   | 6036   | 213228    | 3512|
| System + 100 Huge       | 15536  | 417228    | 7064|

#### 7.2 Runtime Performance

We evaluated the runtime overhead for an app using SEApp, focusing on the creation of processes and files.

**7.2.1 Process Creation**

**Methodology:**
- **Components Tested:** Activities and Services.
- **Process Types:** Local, Remote, Isolated, and SEApp-specific domains.
- **Scenarios:** Cold start (first-time execution) and warm start (subsequent executions).

**Results:**
- **Cold Start:**
  - **LocalActivity:** 39.102 ms (SEApp), 38.689 ms (Stock OS)
  - **RemoteActivity:** 123.468 ms (SEApp), 124.649 ms (Stock OS)
  - **SEApp Activity:** 127.356 ms (Stock OS)
  - **LocalService:** 19.164 ms (SEApp), 18.835 ms (Stock OS)
  - **RemoteService:** 105.467 ms (SEApp), 106.935 ms (Stock OS)
  - **IsolatedService:** 103.923 ms (SEApp), 104.260 ms (Stock OS)
  - **SEApp Service:** 106.925 ms (Stock OS)

- **Warm Start:**
  - **LocalActivity:** 21.052 ms (SEApp), 18.685 ms (Stock OS)
  - **RemoteActivity:** 15.722 ms (SEApp), 15.933 ms (Stock OS)
  - **SEApp Activity:** 15.188 ms (Stock OS)
  - **LocalService:** 1.399 ms (SEApp), 1.328 ms (Stock OS)
  - **RemoteService:** 2.617 ms (SEApp), 2.676 ms (Stock OS)
  - **IsolatedService:** 6.046 ms (SEApp), 2.528 ms (Stock OS)

**Conclusion:** SEApp's performance is equivalent to the stock OS, and it outperforms the IsolatedService by leveraging system caching.

**7.2.2 File Creation**

**Methodology:**
- **File Creation Methods:** Direct creation and creation with SEApp's restorecon service.

**Results:**
- **Direct File Creation:**
  - **Stock OS:** 57.077 µs
  - **SEApp:** 60.696 µs
- **File Creation with Restorecon:**
  - **SEApp + Restorecon:** 431.472 µs

**Conclusion:** There is no significant overhead for direct file creation, but the use of the restorecon service introduces an additional overhead of approximately 374 ± 30 µs. This overhead only occurs during file creation and does not affect subsequent operations.

### 8. Related Work

In traditional desktop operating systems, significant efforts have been made to retrofit legacy code for MAC policy enforcement. Approaches include placing reference monitor calls, multi-layer reference monitors, and identifying integrity-violating permissions through information-flow analysis. Android's open-source nature and popularity have made it a target for extensive security investigations, leading to various security enhancements and frameworks like SEApp.