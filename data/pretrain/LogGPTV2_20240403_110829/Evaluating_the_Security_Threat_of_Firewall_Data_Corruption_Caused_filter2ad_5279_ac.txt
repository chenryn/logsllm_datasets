pointer alternation. 
compiler-generated 
the register 
other vlli·iable. 
suffers from such register 
is free from the security 
caused by mishandled 
In the latter case, the 
binary does not share 
handling a avoid sharing registers 
data as sensitive data. 
due The  compiler should 
pointing to the rule with any 
of an inslluction 
vulnerability 
pointers to 
data. 
6. Experimental Results 
This section presents results from error injection 
functions 
error injections 
experiments on the firewalls IPChains 
that exhaustive 
packet filtering 
code of ipJule_match 
and ipCdo_table 
injected. 
probabilities 
specified functions. 
of these firewalls. 
and ipJw_check 
and ipJonntrack_in 
Table 2 provides the frequency 
and Netfilter. 
Recall 
were performed on the 
Each bit in the 
(for IPChains) 
(for Netfilter) 
and the measured 
was 
for each outcome category and for the four 
Table 2: Results 
for IPChains and Netfilter 
.Q 
"  p   
" 
" .... 
ipjule_lllatch 4682 846 304  5832 304  0 
::::  + 
:z: 
'1:;  
+ 
Cllfity vllllJ.eiability 
ability 
r I Window of penrument security \'ulner
t8 
s tJ 
t+ tj  tr; 
n 
'" T 0 r ..... !... ..... Ts 0 i r!lO 
••••• Surity vuJ.nerability 
window 
q System reboot  c::=::::;=. illegal pockets. try to penetrate the fIrewall 
distribution 
instruction 
in the processor 
in the processor cache (cache)4. The error 
determine 
and the associated 
that an error will impact the cache. A 
impact either the processor 
instruction 
arrival 
activity 
the probability 
corrupted 
into the execution 
fires, the error token moves from the cache to the 
or be evicted from the cache (when the 
execution  core) 
cache replacement 
activity fires, the error token is 
removed from the cache). These two activities 
by the input gate CPU working 
not idle. 
are enabled 
only when the processor 
when the cache fetch activity 
cache can be fetched 
core can be executed 
in the execution 
An instruction 
core (i.e., 
x  Error 
is 
t, 
Figure 6: Conceptual Model 
8. SAN Model for Security Vulnerabilities 
processor execution 
an error submodel, 
Figure 7 shows a SAN model for detailed 
of 
analysis 
The model consists 
of 
error-caused  security  vulnerabilities. 
two submodels: 
which depicts the error 
behavior including error occurrence, cache fetch and 
replacement, 
and the creation of an 
and a job submodel, 
ensuing security 
which 
depicts the workload in the system. There are two tokens 
in the overall model: an error token (initially 
place) representing 
submodel and a job token (initially 
representing 
errors, and traveling 
in the job place) 
vulnerability, 
jobs, and traveling 
along the job submodeL 
The jobs are divided into firewall-related 
tasks, non­
tasks, and idle (representing 
tasks refer to the packet filtering 
firewall-related 
Firewall-related 
Non-firewall workload represents 
tasks other than packet filtering; this can include other as 
activity. 
executing 
the processor 
in the error 
along the error 
no jobs). 
execution 
enable 
enable; 
The mutual 
firewall 
workload 
activities: 
workload execution. 
by two input gates firewall 
at any time, at most one 
by two mutually exclusive 
and nonjirewall 
exclusion 
is guaranteed 
and nonjirewall 
of the two input gates is enabled. If the executed 
corresponds to the firewall (firewall 
instruction 
activity fired) four outcomes are possible: (1) no error 
manifestation, 
security vulnerability 
vulnerability (P _SV). The probabilities 
of the four 
outcomes are determined from the preceding error 
injection 
(2) system crash/hang, (3) temporary 
on the firewall  software. 
experiments 
(LSv), or (4) permanent  security 
execution 
If the executed instruction 
corresponds to non-firewall 
workload 
workload (non-firewall 
then either the system crashes or there is no observable 
impact and the system continuous to  operate. As 
mentioned  earlier, 
a temporary security vulnerability 
execution, 
activity fired) 
4 We assume the main memory is protected 
code) and substanti
ally free from errors. 
by ECC (error correction 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:19:24 UTC from IEEE Xplore.  Restrictions apply. 
when an erroneous instruction is evicted from 
disappears 
the processor 
for this, an extra gate (rp_out) 
model to remove the token from T_SV when a corrupted 
instruction 
cache (cache replacement 
fired). 
is introduced 
To account 
to the SAN 
is being removed from the cache. 
A reboot activity 
initiated 
for periodic  maintenance) 
only way of removing a permanent security 
vulnerability. 
after system crash/hang 
(or 
clears all errors. Reboot is the 
Error sub-model 
!lot 1l1.,\llifes. 
idle 
idle time 
that a significant 
as five packets. 
violation 
can be engineered 
using as  few 
security vulnerabilities, 
The measures obtained from the model include: the 
the 
rate of temporary/permanent 
and the 
duration of a temporary security vulnerabilities, 
exploiting 
the 
number of potentially 
window of security vulnerability 
and penetrating 
the 
firewall. The model was simulated  using  the 
specified in Table 3. The table also provides a justification 
for the choice of parameter 
malicious  packets 
parameters 
values. 
We analyze the security implications 
of error-induced 
in the firewall in the context of a large 
by several firewalls, 
vulnerabilities 
networked system protected 
using the 
simulation results from the SAN modeL Consider a 
networked system in an organization, 
enterprise or a university campus: the  network 
has multiple entry points, each protected by an 
independent 
temporary and permanent, 
packets to penetrate 
the entry points (i.e., 
to potentially 
a firewall. Thus, compromising 
the frrewalls) 
access hundreds of machines. 
firewall. Error-caused 
e.g., a large 
security 
one of 
could allow several malicious 
could allow an intruder 
typically 
vulnerabilities, 
Rates of Temporary and Permanent Security 
of processor 
Figure 8 (left) and Figure 8 (right) show 
Vulnerabilities. 
(TSV) and 
the rates of temporary security vulnerability 
(PSV), respectively, 
as 
permanent security vulnerability 
by the firewall and the 
functions 
workload. The three curves (in 
percentage of non-firewall 
each figure) are derived assuming an error rate 0.1 
error/day 
on the processor. 
figures: 
and 0%, 10%, and 20% of non-firewall 
Several trends can be observed from the 
utilization 
workload 
Figure 7: SAN Model for Analyzing 
Error-Caused 
Security Vulnerabilities 
8.1. SAN Model Simulation 
The SAN model was simulated 
obtain measures characterizing 
vulnerabilities 
that in our model, at least five malicious 
penetrate 
the error-caused 
security violations. 
packets have to 
to occur. The reason is 
Results 
(using Mobius [15]) to 
and the resulting 
for a violation 
the firewall 
Recall 
security 
Table 3: Parameters 
Values Used in the Model 
Value Comments 
Parameter 
Error rate (error arrival) O.l/day  Based on field  failure  data 
Processor 
(Firewall 
firewall 
Cache miss rate 
rate 
execution 
Execution, 
Non-
Workload 
10/sec Number of instmctions 
Execution) 
executed 
1% 
of operational 
systems (see [13]). 
per second by IGHz processor. 
Cache miss rate of 0.39% was shown for SPEC92 benchmarks 
tak environment, 
cache replacement 
rate of 1%. 
on DECstation 
it is likely that cache miss rate is higher than  0.39%, because of the factors 
during task switch. 
Considering 
these factors, 
executing 
we assume the rather conservative 
5000 [18]. In a muili-
such as the burst of 
cache miss 
Cache fetch rate (cache fetch) W'/sec  A 32KB on-chip instmction 
each cycle, an instruction 
fetched 109x1O-4=1<ftimes 
every second. 
cache can hold approximately 
10 x86 instructions. Assuming uniform cache access, 
in the cache has 10-4 chance being fetched. For a 1 GHz processor, 