Based Detection of Web Bot Detectors. In European Symposium on Research in
Computer Security. Springer, 586–605.
[51] Platon Kotzias, Abbas Razaghpanah, Johanna Amann, Kenneth G Paterson,
Narseo Vallina-Rodriguez, and Juan Caballero. 2018. Coming of age: A lon-
gitudinal study of tls deployment. In Proceedings of the Internet Measurement
Conference 2018. ACM, 415–428.
[52] Michael Kranch and Joseph Bonneau. 2015. Upgrading HTTPS in mid-air: An em-
pirical study of strict transport security and key pinning. In 22nd Annual Network
and Distributed System Security Symposium, NDSS 2015, San Diego, California,
USA, February 8-11, 2015.
[53] Katharina Krombholz, Wilfried Mayer, Martin Schmiedecker, and Edgar Weippl.
2017. " I Have No Idea What I’m Doing"-On the Usability of Deploying HTTPS.
In 26th USENIX Security Symposium (USENIX Security 17). 1339–1356.
[54] Tammo Krueger, Christian Gehl, Konrad Rieck, and Pavel Laskov. 2010. TokDoc: A
Self-healing Web Application Firewall. In Proceedings of the 2010 ACM Symposium
on Applied Computing (SAC ’10).
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1965[56] H. Kwon, H. Nam, S. Lee, C. Hahn, and J. Hur. 2019.
[55] Deepak Kumar, Zane Ma, Zakir Durumeric, Ariana Mirian, Joshua Mason, J Alex
Halderman, and Michael Bailey. 2017. Security challenges in an increasingly
tangled web. In Proceedings of the 26th International Conference on World Wide
Web. International World Wide Web Conferences Steering Committee, 677–684.
(In-)Security of Cook-
ies in HTTPS: Cookie Theft by Removing Cookie Flags. IEEE Transactions on
Information Forensics and Security (2019).
[57] Sebastian Lekies, Krzysztof Kotowicz, Samuel Groß, Eduardo A. Vela Nava, and
Martin Johns. 2017. Code-Reuse Attacks for the Web: Breaking Cross-Site Script-
ing Mitigations via Script Gadgets. In Proceedings of the 2017 ACM SIGSAC Con-
ference on Computer and Communications Security (CCS ’17). ACM.
[58] Frank Li, Zakir Durumeric, Jakub Czyz, Mohammad Karami, Michael Bailey,
Damon McCoy, Stefan Savage, and Vern Paxson. 2016. You’ve Got Vulnera-
bility: Exploring Effective Vulnerability Notifications. In 25th USENIX Security
Symposium (USENIX Security 16). USENIX Association.
[59] Zhou Li, Kehuan Zhang, Yinglian Xie, Fang Yu, and XiaoFeng Wang. 2012. Know-
ing your enemy: understanding and detecting malicious web advertising. In
Proceedings of the 2012 ACM conference on Computer and communications security.
ACM, 674–686.
[60] Moxie Marlinspike. 2009. New Tricks For Defeating SSL In Practice. BlackHat
DC (Feb. 2009).
[61] Matthias Marx, Ephraim Zimmer, Tobias Mueller, Maximilian Blochberger, and
Hannes Federrath. 2018. Hashing of personally identifiable information is not
sufficient. SICHERHEIT 2018 (2018).
[62] Arunesh Mathur, Nathan Malkin, Marian Harbach, Eyal Peer, and Serge Egelman.
2018. Quantifying Users’ Beliefs about Software Updates. CoRR (2018). http:
//arxiv.org/abs/1805.04594
[63] Abner Mendoza, Phakpoom Chinprutthiwong, and Guofei Gu. 2018. Uncovering
HTTP Header Inconsistencies and the Impact on Desktop/Mobile Websites. In
Proceedings of the 2018 World Wide Web Conference (WWW ’18). International
World Wide Web Conferences Steering Committee.
[64] Yogesh Mundada, Nick Feamster, and Balachander Krishnamurthy. 2016. Half-
Baked Cookies: Hardening Cookie-Based Authentication for the Modern Web. In
Proceedings of the 11th ACM on Asia Conference on Computer and Communications
Security (ASIA CCS ’16). ACM.
[65] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker,
Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. 2012.
You are what you include: large-scale evaluation of remote javascript inclusions.
In Proceedings of the 2012 ACM conference on Computer and communications
security. ACM, 736–747.
[66] Nick Nikiforakis, Wannes Meert, Yves Younan, Martin Johns, and Wouter Joosen.
2011. SessionShield: Lightweight Protection against Session Hijacking. In Engi-
neering Secure Software and Systems, Úlfar Erlingsson, Roel Wieringa, and Nicola
Zannone (Eds.). Springer Berlin Heidelberg.
[67] Jeremiah Onaolapo, Enrico Mariconti, and Gianluca Stringhini. 2016. What
happens after you are pwnd: Understanding the use of leaked webmail credentials
in the wild. In Proceedings of the 2016 Internet Measurement Conference. ACM,
65–79.
[68] Avanish Pathak. 2014. An analysis of various tools, methods and systems to gener-
ate fake accounts for social media. Northeastern University Boston, Massachusetts
December (2014).
[69] Sarah Pearman, Jeremy Thomas, Pardis Emami Naeini, Hana Habib, Lujo Bauer,
Nicolas Christin, Lorrie Faith Cranor, Serge Egelman, and Alain Forget. 2017.
Let’s Go in for a Closer Look: Observing Passwords in Their Natural Habitat. In
Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications
Security. ACM.
[70] T. Petsios, A. Tang, S. Stolfo, A. D. Keromytis, and S. Jana. 2017. NEZHA: Efficient
Domain-Independent Differential Testing. In 2017 IEEE Symposium on Security
and Privacy (SP), Vol. 00. 615–632. https://doi.org/10.1109/SP.2017.27
[71] Iasonas Polakis, Marco Lancini, Georgios Kontaxis, Federico Maggi, Sotiris Ioanni-
dis, Angelos D. Keromytis, and Stefano Zanero. 2012. All Your Face Are Belong to
Us: Breaking Facebook’s Social Authentication. In Proceedings of the 28th Annual
Computer Security Applications Conference (Orlando, Florida, USA) (ACSAC ’12).
ACM, New York, NY, USA, 399–408. https://doi.org/10.1145/2420950.2421008
[72] N. Ramasubbu, M. Cataldo, R. K. Balan, and J. D. Herbsleb. 2011. Configuring
global software teams: a multi-company analysis of project productivity, quality,
and profits. In 2011 33rd International Conference on Software Engineering (ICSE).
261–270.
[73] Sebastian Roth, Timothy Barron, Stefano Calzavara, Nick Nikiforakis, and Ben
Stock. 2020. Complex Security Policy? A Longitudinal Analysis of Deployed
Content Security Policies. In NDSS.
[74] Quirin Scheitle, Oliver Hohlfeld, Julien Gamba, Jonas Jelten, Torsten Zimmer-
mann, Stephen D. Strowes, and Narseo Vallina-Rodriguez. 2018. A Long Way to
the Top: Significance, Structure, and Stability of Internet Top Lists. In IMC.
[75] Kapil Singh, Alexander Moshchuk, Helen J Wang, and Wenke Lee. 2010. On the
incoherencies in web browser access control policies. In 2010 IEEE Symposium
on Security and Privacy. IEEE, 463–478.
[76] Suphannee Sivakorn, Angelos D. Keromytis, and Jason Polakis. 2016. That’s
the Way the Cookie Crumbles: Evaluating HTTPS Enforcing Mechanisms. In
Proceedings of the 2016 ACM on Workshop on Privacy in the Electronic Society
(Vienna, Austria) (WPES ’16). ACM, 71–81.
[77] Suphannee Sivakorn, Jason Polakis, and Angelos D. Keromytis. 2016. The Cracked
Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information. In
In Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P ’16).
[78] Philippe Skolka, Cristian-Alexandru Staicu, and Michael Pradel. 2019. Anything
to Hide? Studying Minified and Obfuscated Code in the Web. In The World Wide
Web Conference. 1735–1746.
[79] Peter Snyder, Periwinkle Doerfler, Chris Kanich, and Damon McCoy. 2017. Fifteen
minutes of unwanted fame: Detecting and characterizing doxing. In Proceedings
of the 2017 Internet Measurement Conference. ACM, 432–444.
[80] Saumya Solanki, Gautam Krishnan, Varshini Sampath, and Jason Polakis. 2017. In
(Cyber)Space Bots Can Hear You Speak: Breaking Audio CAPTCHAs Using OTS
Speech Recognition. In Proceedings 10th ACM Workshop on Artificial Intelligence
and Security (AISec ’17).
[81] Sooel Son, Kathryn S. Mckinley, and Vitaly Shmatikov. 2013. Fix Me Up: Repairing
access-control bugs in web applications. In In Network and Distributed System
Security Symposium (NDSS).
[82] Marius Steffens, Christian Rossow, Martin Johns, and Ben Stock. 2019. Don’t
Trust The Locals: Investigating the Prevalence of Persistent Client-Side Cross-Site
Scripting in the Wild.. In NDSS.
[83] Ben Stock, Martin Johns, Marius Steffens, and Michael Backes. 2017. How the
Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security. In
26th USENIX Security Symposium (USENIX Security 17). USENIX Association, 971–
987. https://www.usenix.org/conference/usenixsecurity17/technical-sessions/
presentation/stock
[84] Ben Stock, Giancarlo Pellegrino, Christian Rossow, Martin Johns, and Michael
Backes. 2016. Hey, You Have a Problem: On the Feasibility of Large-Scale Web
Vulnerability Notification. In 25th USENIX Security Symposium (USENIX Security
16). USENIX Association.
[85] Ben Stock, Stephan Pfistner, Bernd Kaiser, Sebastian Lekies, and Martin Johns.
2015. From facepalm to brain bender: Exploring client-side cross-site scripting. In
Proceedings of the 22nd ACM SIGSAC conference on computer and communications
security. ACM, 1419–1430.
[86] Kurt Thomas, Dmytro Iatskiv, Elie Bursztein, Tadek Pietraszek, Chris Grier,
and Damon McCoy. 2014. Dialing Back Abuse on Phone Verified Accounts. In
Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’14). 465–476.
[87] T. Unger, M. Mulazzani, D. Frühwirt, M. Huber, S. Schrittwieser, and E. Weippl.
2013. SHPF: Enhancing HTTP(S) Session Security with Browser Fingerprinting.
In 2013 International Conference on Availability, Reliability and Security.
[88] Kami Vaniea and Yasmeen Rashidi. 2016. Tales of Software Updates: The Process
of Updating Software. In Proceedings of the 2016 CHI Conference on Human Factors
in Computing Systems (CHI ’16). Association for Computing Machinery.
[89] Rui Wang, Shuo Chen, and XiaoFeng Wang. 2012. Signing Me Onto Your Accounts
Through Facebook and Google: A Traffic-Guided Security Study of Commercially
Deployed Single-Sign-On Web Services. In Proceedings of the 2012 IEEE Sympo-
sium on Security and Privacy (SP ’12). IEEE Computer Society, Washington, DC,
USA, 365–379. https://doi.org/10.1109/SP.2012.30
[90] Rui Wang, Shuo Chen, and XiaoFeng Wang. 2012. Signing Me Onto Your Accounts
Through Facebook and Google: A Traffic-Guided Security Study of Commercially
Deployed Single-Sign-On Web Services. In 2012 IEEE Symposium on Security and
Privacy (SP ’12). IEEE Computer Society.
[91] Rick Wash, Emilee Rader, Kami Vaniea, and Michelle Rizor. 2014. Out of the Loop:
How Automated Software Updates Cause Unintended Security Consequences. In
10th Symposium On Usable Privacy and Security (SOUPS 2014). USENIX Associa-
tion.
[92] Lukas Weichselbaum, Michele Spagnuolo, Sebastian Lekies, and Artur Janc. 2016.
CSP is dead, long live CSP! On the insecurity of whitelists and the future of
content security policy. In Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 1376–1387.
[93] Ronghai Yang, Wing Cheong Lau, Jiongyi Chen, and Kehuan Zhang. 2018. Vetting
Single Sign-On SDK Implementations via Symbolic Reasoning. In 27th USENIX
Security Symposium (USENIX Security 18). USENIX Association. https://www.
usenix.org/conference/usenixsecurity18/presentation/yang
[94] Xiaofeng Zheng, Jian Jiang, Jinjin Liang, Haixin Duan, Shuo Chen, Tao Wan, and
Nicholas Weaver. 2015. Cookies Lack Integrity: Real-World Implications. In 24th
USENIX Security Symposium (USENIX Security 15). USENIX Association, Wash-
ington, D.C. https://www.usenix.org/conference/usenixsecurity15/technical-
sessions/presentation/zheng
[95] Yuchen Zhou and David Evans. 2010. Why aren’t HTTP-only cookies more
widely deployed. Proceedings of 4th Web 2 (2010).
[96] Yuchen Zhou and David Evans. 2014. SSOScan: Automated Testing of Web Ap-
plications for Single Sign-On Vulnerabilities. In 23rd USENIX Security Symposium
(USENIX Security 14). USENIX Association.
Session 6D: Web Security CCS '20, November 9–13, 2020, Virtual Event, USA1966[97] Chaoshun Zuo, Zhiqiang Lin, and Yinqian Zhang. 2019. Why Does Your Data
Leak? Uncovering the Data Leakage in Cloud From Mobile Apps. In 2019 IEEE
Symposium on Security and Privacy. San Francisco, CA.
[98] Chaoshun Zuo, Qingchuan Zhao, and Zhiqiang Lin. 2017. AUTHSCOPE: Towards
Automatic Discovery of Vulnerable Authorizations in Online Services. In Pro-
ceedings of the 2017 ACM SIGSAC Conference on Computer and Communications
Security (CCS ’17). ACM.
A APPENDIX
A.1 Browser Automation
Unexpected Alerts. If an alert popup appears and an Unexpected-
AlertPresentException is raised during the invoked method, the
execution context is switched temporarily to the alert box, which is
then dismissed, and the method is retried. To prevent other alerts
from appearing in the current page’s context, the window.alert
method is overridden.
Retry mode. We have developed a retry mode, which is used
by XDriver whenever it needs to perform an action it can retry in
case of failure; this is done without having to return control back
to the caller, e.g., when a page’s links or login forms are requested.
Specifically, if an exception is raised while performing the operation,
XDriver will retry the operation for a certain amount of times before
raising the exception or returning a default value.
Built-in crawler. Our custom browser automation tool includes
a built-in crawler for streamlining crawl-based tasks, a functional-
ity that is especially vital in security-related studies. In our frame-
work’s context it is useful for our URLDiscovery and PrivacyAu-
ditor modules for crawling and processing websites. Modules that
want to initiate a crawl only need to call the crawl_init method
with the desired configuration options and then iteratively call the
crawl_next method, where all logic of the crawl is transparently
implemented. The following configuration options are currently
supported by our system: (i) Crawl depth, (ii) DFS or BFS mode, (iii)
optional support for a set of regular expressions that dictate which
URLs and even subdomains to follow or not follow (e.g., focus only
on login related URLs or crawl a specific subdomain), and (iv) an
optional break function that is applied after every fetched URL to
determine whether the crawl should stop (e.g., if a specific type of
form is found).
Return values. Additionally, to simplify the checks that the
caller modules have to make for determining whether a requested
operation was successful, we refrain from raising Selenium-level
exceptions and, instead, return default boolean values. Only in
cases where our handling mechanisms cannot resolve an issue we
consider the exception to be fatal and raise it. For instance, when a
module attempts to interact with an element that is not currently
interactable (e.g., clicking an invisible element) a False value is
returned instead of raising the default ElementNotVisibleExcep-
tion.
A.2 Attack Workflow Statistics
In Figure 4 we plot the number and percentages of domains pro-
cessed during each phase of our auditing procedure’s workflow.
First, our system identifies appropriate account signup or login
pages for ∼13.4% of all the domains included in our dataset. Next,
the account creation process successfully completes for almost 12%
of those domains. As discussed in Section 5, the automated account
]
else
if cookies.is_empty() then
vulnerable[attr] ← True
for tested_attr in tested do
critical_cookies ← {
’secure’ ← [′𝑐𝑜𝑜𝑘𝑖𝑒𝐴′,′ 𝑐𝑜𝑜𝑘𝑖𝑒𝐵′, ...],
’httpOnly’ ← [′𝑐𝑜𝑜𝑘𝑖𝑒𝐷′,′ 𝑐𝑜𝑜𝑘𝑖𝑒𝐹′, ...], }
vulnerable ← { ’secure’ ← NULL,
’httpOnly’ ← NULL, }
tested ← [
for attr, cookies in critical_cookies do
Algorithm 1 CookieAuditor algorithm
1: function Audit
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28: end function
29: function Eval(cookie_set)
BROWSER.𝑟𝑒𝑚𝑜𝑣𝑒_𝑐𝑜𝑜𝑘𝑖𝑒𝑠(cookie_set)
30:
BROWSER.𝑟𝑒 𝑓 𝑟𝑒𝑠ℎ()
31:
return 𝑙𝑜𝑔𝑖𝑛_𝑜𝑟𝑎𝑐𝑙𝑒()
32:
33: end function
𝑡𝑒𝑠𝑡𝑒𝑑_𝑠𝑒𝑡 ← critical_cookies[tested_attr]
if cookies == tested_set then
else if vulnerable[tested_attr] AND
cookies.is_subset(tested_set) then
vulnerable[attr] ← True
end if
tested.𝑎𝑝𝑝𝑒𝑛𝑑(attr)
end for
return 𝑣𝑢𝑙𝑛𝑒𝑟𝑎𝑏𝑙𝑒
vulnerable[attr] ← vulnerable[tested_attr]
end if
end for
if vulnerable[attr] == NULL then
vulnerable[attr] = EVAL(𝑐𝑜𝑜𝑘𝑖𝑒𝑠)
end if
creation process is the biggest challenge for our framework due to
two reasons. First, the registration process may include predicates
that significantly complicate the automated input generation due
to input format constraints. For instance, the registration may in-
clude a mandatory field (e.g., postal address) that requires a valid
value for a specific location/country. Iteratively testing different
input formats can prohibitively increase the duration of the audit-
ing process at the scale of our analysis. Second, registration might
require access to a specific resource (e.g., phone number or credit
card) that is not feasible to obtain for a study of our scale. After
the account creation, we find that over half of the audited domains
fail to correctly protect their cookies and are susceptible to one of
the attacks covered by our threat model (as inferred by our Cookie
Auditor module presented in Algorithm 1). The remaining modules
are highly effective and infer the authentication cookies and de-
tect identifier leakage in the vast majority of the audited domains.
The failures in these modules are attributed to websites timing out
(or being generally unresponsive) after several auditing tests and