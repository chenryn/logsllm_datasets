primitives. These properties are commonly accepted and
are based on the design goals of those primitives:
1. It
is not feasible to recover the secret key k by
observing any sequence of authenticated messages
{M AC(k, m1), m1} . . .{M AC(k, mn), mn}.
2. It is not feasible to calculate M AC(k, m) for a given
message m without knowing the secret key k.
3. It is not feasible to ﬁnd the preimage x of a given hash
H(x).
4. It is not feasible to ﬁnd a second preimage y (cid:2)= x for a
given preimage x, such that H(y) = H(x).
The ﬁrst two properties are standard requirements and
design goals for MAC functions, and the last two properties
(inversion resistance and second preimage resistance) are
standard requirements and design goals for cryptographic
hash functions. These properties are not affected by re-
cent collision search attacks on cryptographic hash func-
tions [13, 14]. As long as these properties are true for any
speciﬁc MAC and hash function used to implement our pro-
tocol, we consider U-ACKs to be unforgeable.
First we show that the protocol does not reveal the secret
key. If an eavesdropper could recover the secret key from
some sequence of messages:
{H(M AC(k, m1)), m1} . . .{H(M AC(k, mn)), mn}
and their acknowledgements:
M AC(k, m1) . . . M AC(k, mn)
then the attacker could also recover the key from:
{M AC(k, m1), m1} . . .{M AC(k, mn), mn}
contradicting the ﬁrst property above.
Next we show that an attacker cannot forge acknowl-
edgements without the secret key. Assume that an attacker
succeeds in forging an acknowledgement. Either the forged
acknowledgement is identical to the genuine acknowledge-
ment, or it is different. If it is identical then either the at-
tacker has succeeded in calculating M AC(k, m) without
knowing k, which contradicts the second property above, or
the attacker has found a way of inverting the hash function,
which contradicts the third property. On the other hand if
the forged acknowledgement is different from the genuine
acknowledgement, the attacker has found a second preim-
age y (cid:2)= x such that H(y) = H(x), which contradicts the
fourth property.
4. Applicability
This paper does not describe a complete communica-
tion system, but rather a protocol building block that al-
lows nodes to measure dependability. The mechanism by
which originators and destinations exchange secret keys is
not discussed here, because the acknowledgement protocol
is independent of the key exchange mechanism; similarly,
end-to-end encryption is not discussed, although we would
expect it to be used by parties requiring privacy and un-
linkability. Additionally, an application would need to se-
lect an application-speciﬁc dependability metric (ASDM)
to use with the U-ACK protocol. The ASDM, which will
have application-speciﬁc semantics, should be a function of
the messages originated and/or relayed and the U-ACKs re-
ceived.
4.1. Generality
Unforgeable acknowledgements can operate in a peer-to-
peer overlay or at the network layer, providing an incentive
for nodes to forward messages as well as transmitting their
own. There are no dependencies between messages other
than between a message and its acknowledgement, so each
message can be treated as an independent datagram; retrans-
mission, sequencing and ﬂow control can be handled by
higher protocol layers. This allows a single incentive mech-
anism to support a wide range of upper-layer protocols and
services. In contrast, many existing incentive mechanisms
are limited to ﬁle-sharing applications, because they require
content hashes to be known in advance [15, 16, 17, 18].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:01 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 20074.2. Reverse path forwarding
We have assumed that the forward path of the message
is the same path that will be followed, in reverse, by the
U-ACK, i.e. reverse path forwarding is being used. This
may not be possible in all networks – for example some
wireless networks may contain unidirectional links. Where
the assumption of reverse path forwarding does not hold,
there are two situations to consider:
• The reverse path has some relay nodes in common with
the forward path.
In this case, there may be some
nodes that receive information about the dependabil-
ity of their neighbours, while others do not, at least not
for all messages.
• The reverse path has no relay nodes in common with
In this case, only the originator
the forward path.
receives information about the dependability of its
neighbours.
In either situation,
the U-ACK protocol provides a
coarse-grained input to the ASDM: simply that the network
as a whole is managing to deliver messages to their intended
destinations and that U-ACKs are being returned, i.e. cor-
rect forwarding behaviour is being maintained for the net-
work, N . Nodes that act as relays may build up conﬁdence
of their neighbours’ dependability without having to send
messages themselves: whenever a node sees a U-ACK for
a message, it knows that the message was successfully de-
livered, without necessarily having any knowledge of the
path beyond its immediate neighbours. This coarse-grained
measure of dependability may be sufﬁcient for some appli-
cations.
Note that routing asymmetries such as those commonly
found in the Internet do not prevent reverse path forwarding:
each relay stores the identity of the previous node when for-
warding a message, so the reverse path can be found even if
the relay’s routing tables are asymmetric. Similarly, asym-
metric link bandwidth is not a problem as long as it is pos-
sible to return one acknowledgement for each message sent
in the opposite direction.
Our protocol can therefore operate in situations with di-
verse routing paths; the ASDM chosen should take account
of the nature of the paths and any path information that may
be available.
4.3. Gateways, proxies and middleboxes
The U-ACK protocol does not require relays to share
keys with originators or destinations, but it can easily be
generalised to situations where the originator wishes to di-
rect trafﬁc through a certain trusted gateway, proxy, or other
middlebox: the originator exchanges keys with the gateway
and the gateway exchanges keys with the destination; the
gateway acknowledges messages from the originator and
forwards them to the destination with new headers; and the
destination acknowledges messages from the gateway. The
key shared by the originator and the gateway is indepen-
dent from the key shared by the gateway and the destina-
tion, so it is possible for the gateway to re-encrypt the mes-
sages before forwarding them. Indeed, onion routing [19]
could be layered on top of our protocol, providing originator
anonymity as well as originator-destination unlinkability.
4.4. Non-unicast communication
So far, we have implicitly considered unicast commu-
nication. However, there may be further considerations
if non-unicast mechanisms are used for message delivery.
For example, some protocols in mobile ad hoc networks
(MANETs) use ﬂooding-based or broadcast-based forward-
ing. In such applications, multiple copies of a message may
reach a destination or relay node by different paths. To
maintain the association between messages and U-ACKs,
a simple extension of the protocol is to return a copy of the
U-ACK to every neighbour from which a copy of the corre-
sponding message was received. However, this may lead to
increased overhead, so an application may wish to reduce
the number of U-ACKs transmitted and adjust accordingly
the deﬁnition and dynamic evaluation of the ASDM being
used.
Another issue is that of one-to-many or many-to-many
communication, such as network-layer or application-layer
multicast. Here, a single transmission may have many des-
tinations, and a naive translation of our protocol would re-
quire each of these destinations to send an acknowledge-
ment. Reliable multicast is an area of ongoing research
[20, 21, 22], but it is known to be impractical to use per-
destination acknowledgements; thus our protocol seems un-
likely to be applicable to large-scale reliable multicast with-
out modiﬁcation.
In a tree-based scheme for multicast distribution, one
possibility would be for key nodes in the tree to act as
trusted gateways, as described in Section 4.3. Each gateway
would be responsible for receiving U-ACKs from nodes be-
low itself in the multicast tree and sending aggregate U-
ACKs to a node above itself in the tree. An aggregate U-
ACK would indicate delivery of a message to all intended
recipients.
However, although solutions for key management and
distribution in such scenarios have been deﬁned [23], mod-
iﬁcations of this kind would increase the complexity of the
protocol, introduce additional overhead, and could lead to a
weakening of the overall security and dependability of the
system.
Another approach is to look at the way dependability is
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:01 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007handled in other schemes, such as bimodal multicast [21]
or QuickSilver [22]. It may be possible to modify the de-
signs of those schemes to incorporate U-ACKs and so per-
mit operation in untrusted environments, but we have not
examined this in detail.
We consider the use of U-ACKs in non-unicast commu-
nication to be a topic for further study.
5. Engineering considerations
5.1. Timeouts
Relays cannot store hashes indeﬁnitely while waiting for
acknowledgements – at some point, old hashes must be dis-
carded to make room for new ones. A relay that receives an
acknowledgement after discarding the corresponding hash
cannot verify or forward the acknowledgement, so there is
no reason for a relay to store a hash for longer than its up-
stream or downstream neighbours. The most efﬁcient so-
lution would be for all relays along the path to discard the
hash at the same time, after waiting an appropriate amount
of time to receive a U-ACK. Using a separate synchroni-
sation protocol to determine when to discard hashes is not
practical in an untrusted scenario, and adding a time-to-live
ﬁeld to messages would undermine unlinkability by allow-
ing relays to estimate the distance to the originator.
Fixed timeouts avoid these problems while ensuring that
adjacent relays discard the hash at approximately the same
time, and are simple to implement. The length of the time-
out represents a tradeoff between the maximum end-to-end
latency the network can tolerate, and the number of out-
standing hashes each relay must store. The choice of an ap-
propriate timeout will depend on the application. As an ex-
ample, TCP’s maximum segment lifetime (MSL) represents
a conservative estimate of the maximum latency across the
Internet: a typical implementation value is 30 seconds,
which is much greater than the typical latency or round-trip
time, and TCP may wait for a period of two MSLs before
allowing re-use of a port number. Thus 60 seconds seems
to be a reasonable timeout for hashes in an Internet overlay;
shorter timeouts may be appropriate for other applications.
5.2. Overhead
The bandwidth and computation overheads of the U-
ACK protocol are modest. Each message must carry the
hash of its MAC and a unique nonce or serial number, and
the originator and destination must each perform one hash
computation in addition to the normal cost of using MACs.
Each relay must perform a single hash computation and ta-
ble lookup per acknowledgement, and forward one MAC
per acknowledgement. Since acknowledgements are small
and there is at most one acknowledgement per message,
acknowledgements could be piggybacked on messages in
bidirectional communication to reduce transmission costs.
The originator and each relay must store one hash per
outstanding message, so the storage overheads of the proto-
col depend on three factors: the data rate of the end-to-end
path, Dp; the message size, Sm; and the timeout for stored
hashes, Th. If Sh is the size of a hash for a single message,
we can approximate the storage requirement of a node, Sn,
as:
Sn = Dp.Th.Sh
Sm
So, with a 60 second timeout and a minimum message
size of 125 bytes including headers, a node with an 11 Mb/s
link (e.g. 802.11b wireless LAN) may need to store up to
660,000 outstanding hashes. This would require ∼13 MB
of memory for a 160-bit hash function such as SHA-1. This
represents the worst case, however, when all messages have
the minimum size and all acknowledgements take the maxi-
mum time to arrive; in a more realistic scenario with a mean
message size of 500 bytes and an average round-trip time of
5 seconds, the storage overhead would be just ∼275 KB.
A malicious node might attempt to exhaust a relay’s
memory by ﬂooding it with messages, forcing it to store
a large number of hashes. This attack could be mitigated
by allocating a separate storage quota to each neighbour; a
neighbour that exceeded its quota would then simply cause
its own hashes to expire early.
5.3. Measuring dependability
Unforgeable acknowledgements allow nodes to mea-
sure the dependability of their neighbours, but the exact
way in which the application-speciﬁc dependability met-
ric (ASDM) is computed and refreshed will depend on the
application; the behaviour of the ASDM in time (includ-
ing freshness, decay and/or expiry of dependability infor-
mation) and in space (for a given neighbour, path, or ﬂow)
will be application speciﬁc, and our protocol places no spe-
ciﬁc constraints on the nature of this metric. However, to
demonstrate that a ﬁne-grained dependability metric does
not necessarily require information about the identities of
the originator or destination, we offer the following sketch
of a ﬂow-based ASDM. This is only intended as an exam-
ple; other metrics may be appropriate for other applications.
We deﬁne a ﬂow as any sequence of messages that have
the same originator and destination and that are semanti-
cally related in some way – for example, the sequence of
messages that make up a single ﬁle transfer. To enable ﬂow-
based dependability measurement, the originator marks all
messages in a ﬂow with an arbitrary ﬂow identiﬁer. The
contents of the ﬂow identiﬁer are not signiﬁcant – it is just
a label, and it is not covered by the message authentication
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:53:01 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007code. All messages in a ﬂow are marked with the same ﬂow
ID.
Flow IDs have local scope: when a relay forwards a mes-
sage, the ﬂow ID used on the downstream link may be dif-
ferent from the ID on the upstream link. However, messages
belonging to the same ﬂow should still have matching ﬂow
IDs on the downstream link. Each ﬂow traversing a link
must be assigned a ﬂow ID that distinguishes it from any
other ﬂows currently traversing the same link. Flows arriv-
ing at a node from different upstream neighbours must be
treated as distinct, and must be assigned distinct ﬂow IDs on
any downstream link, even if they happen to have matching
IDs on their respective upstream links.
The use of ﬂow IDs with local scope is similar to the
use of label-swapping in virtual circuits, but there is no re-
quirement to establish ﬂow ID state in the relays before data
transfer begins – ﬂow IDs can be assigned to new ﬂows on
the ﬂy.
Relays can use ﬂow IDs for ﬁne-grained dependability
measurement without needing to know the origins or desti-
nations of the ﬂows. For each ﬂow it is currently forward-
ing, a relay stores the identiﬁers (e.g. network addresses)
of the upstream and downstream nodes, the ﬂow IDs for
the upstream and downstream links, and the application-
speciﬁc dependability metric for the ﬂow. The ASDM
might take the form of a running average of the fraction of
messages acknowledged (e.g. an exponential moving aver-
age, which can be stored as a single ﬂoating-point number).
All this information is soft state: it does not need to survive
across restarts, and information about inactive ﬂows can be
discarded to reclaim space.
6. Related work
6.1. Reciprocation