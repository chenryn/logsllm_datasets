bytecode of contracts. We collected the ETH exchange rates from
coinmarket.com (and verified it against other exchanges including
Coinbase and CoinDesk).
3 HOW IS ETHEREUM BEING USED?
We begin our analysis by looking at the overall usage of Ethereum
over time. Figure 1 plots the number of Ethereum transactions/day,
the number of transactions/day that are to contract addresses, the
number of transactions/day that fail to execute successfully, and
the price of Ether (ETH) per USD over the course of the first 5M
blocks. We make a number of observations.
Analyzing Ethereum’s Contract Topology
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
Figure 1: Number of transactions per day (left y axis), and the price of ETH in USD (right y axis), over our 3.5-year study period.
Note that both y-axes are in log scale. A dramatic increase in both transactions and price can easily be observed.
Figure 2: The number of contracts created by users, the number created by CREATE, the number of contracts that are destroyed
via SELFDESTRUCT, and the number of contract calls (CALL, CALLCODE, DELEGATECALL, STATICCALL) over time.
First, we can observe that as with other blockchain-based systems
like Bitcoin, Ethereum’s currency has observed a dramatic increase
in value over the past few years. For example, the price of ETH at
the beginning of 2017 was roughly $10; a year later, it was over
$1,400. Since this rapid increase, the price of ETH has returned to
be closer to the $500 range, though the price remains extremely
volatile.
Second, in parallel with this increase in price, we can observe
that Ethereum’s usage—as measured by the number of transactions
in the system—has increased exponentially as well. Over calendar
year 2017, the average number of transactions per day increased
from roughly 40K to over 1M; despite the recent drop in price, the
number of transactions per day has recently remained stable.
Third, recall that transactions can either be to users (typically
simple transfers of funds, akin to Bitcoin) or to contracts (i.e., using
Ethereum’s virtual machine features). If we focus on the number
of transactions that are to contracts, we find that over the past
two years, these have consistently represented roughly 1/3 of all
transactions (e.g., in early 2017, there were roughly 12K transactions
to contracts per day; this grew to roughly 300K at the end of 2017).
Thus, largely independent of the wild volatility of ETH price and
resulting currency speculation, a significant fraction of the activity
in Ethereum is using the advanced contract features.
Fourth, if we focus on the number of failed transactions we ob-
serve per day, we can see that it typically is roughly 3–4 orders
of magnitude smaller than the number of total transactions (i.e.,
roughly 0.01%–0.1% of transactions typically fail). However, we can
observe two periods during which the number of failed transactions
is significantly higher than this: during a short period in October
2016 and during another, longer, period in November 2017. Dig-
ging into these periods, we find that both were caused by external
events: in October 2016, an attacker exploited the mis-pricing of
a number of operations to execute a denial-of-service attack on
the network; this was fixed with a hard fork that raised the price
of these operations. In November 2017, the launch of the “Crypto
Kitties” contracts caused a massive increase in usage of Ethereum;
this resulted in many failed transactions initially. These results in-
dicate that contract-centric activity can serve as a lens into broader
events in the Ethereum ecosystem.
To summarize, we see that a significant fraction of the activity
in Ethereum is using its smart contracts, and that exogenous events
can be reflected in how they are used. In the next section, we dive
into these contracts and explore how the are used and inter-related.
 1 10 100 1000 10000 100000 1x106 1x10710/1501/1604/1607/1610/1601/1704/1707/1710/1701/18$0$1$10$100$1000$10000CountPrice (ETH/USD)DateTransactions/DayContract Transactions/DayFailed Transactions/DayPrice of ETH 1 10 100 1000 10000 100000 1x106 1x10710/1501/1604/1607/1610/1601/1704/1707/1710/1701/18CountDateUser-created contractsCREATESELFDESTRUCTCALL, CALLCODE, STATICCCALL, DELEGATECALLIMC ’18, October 31-November 2, 2018, Boston, MA, USA
Lucianna Kiffer, Dave Levin, and Alan Mislove
4 HOW ARE CONTRACTS BEING USED?
We now take a closer look at the Ethereum contracts, focusing first
on their lifecycles before examining how they are related to each
other.
4.1 Contract life cycle
We begin by examining how contracts are created, deleted, and
called. Figure 2 plots the number of contracts created by users, the
number created by CREATE, the number of contracts that are de-
stroyed via SELFDESTRUCT, and the number of contract calls (CALL,
CALLCODE, DELEGATECALL, STATICCALL) over time. First, we can
immediately observe that while, historically, the number of user-
created contracts have tended to dominate contract-created con-
tracts, that trend reversed in early 2017. In fact, today, there are
over 1.2M user-created contracts in existence while there are over
3.4M contract-created contracts! In looking into why there are so
many contract-created contracts, especially after April 2017, we
found that many of these are “token contracts”, or custom curren-
cies created on top of Ethereum that use contract-created contracts
to implement certain functionality. We see a similar change at that
time with the usage of SELFDESTRUCT as well, likely by the same
set of contracts.
Second, we can observe the October 2016 denial of service at-
tack more clearly here. During that time, malicious contracts were
repeatedly calling SELFDESTRUCT resulting in a expensive call (in
terms of CPU time) that was underpriced at the time; the usage of
this opcode jumped from under 10 calls per day across all contracts
to over 4M! With the hard fork that followed to address the issue,
the usage quickly dropped back to its normal rate.
Third, we can observe that there are a tremendous number of
contract calls throughout the lifetime of Ethereum. In fact, there
are roughly 1–2 orders of magnitude more contract calls than than
contract creations, suggesting that the average number of calls per
contract is significant. In the next section, we take a closer look at
how these contracts interact via calls.
Finally, we take a look at who is creating the contracts. We define
the set of contracts C0 as those contracts that were created directly
by users; similarly, we define other sets of contracts Ci as those
contracts that were created by a contract in Ci−1. Occasionally
for simplicity we will refer to C>0, which represents all contracts
not in C0 (i.e., all contract-created contracts). Table 1 presents a
breakdown of the number of contracts in each set. Surprisingly,
we find that the “tree” of contract creations is quite shallow: C3 is
Set
C0
C1
C2
C3
Size
1,208,174
3,490,092
11,253
1
Unique number of
Creators Bytecode Opcodes
96,378
2,325
72
1
125,177
2,368
72
1
43,397
3,930
2,544
1
Table 1: Breakdown of the number of contracts in each set,
along with the number of unique creators (addresses of
users or contracts), unique bytecodes, and unique opcodes
(bytecodes ignoring opcode arguments).
Number of contracts
Number of
contracts
receiving at
least one
Transactions
CALL
STATICCALL
CALLCODE
DELEGATECALL
C0
1,208,174
407,403
72,335
2
59
4,755
C >0
3,501,334
193
1,482,835
0
3
23,855
Table 2: Number of unique contracts that were ever the re-
cipient of a CALL or STATICCALL message, or have their code
called via CALLCODE or DELEGATECALL.
the final level of the tree, and it only contains a single contract.2
Additionally, if we look at the number of creators, we find that a
very small minority of the contracts and users are responsible for
most contract creation. For example, set C1 are contracts created by
contracts in C0; while there are over 3.4M contracts in C1 and 1.2M
contracts in C0, only 3.9K of the contracts in C0 are responsible for
creating all 3.4M contracts in C1.
4.2 Contract interaction graph
Thus far, we have examined how contracts are created. Now we turn
to examine how contracts are used by focusing on the call graph.
Recall from Figure 2 that there are a large number of transactions
sent to contracts every day; Table 2 breaks all of those calls down
by (a) the type of contract that is receiving the transaction (the
columns), and (b) the type of transaction that was sent (the rows).
We can immediately observe that most contracts in both C0 and
C>0 are never interacted with, either by being the recipient of a
transaction or via a call! For C0, less than 40% of contracts show
any interaction; for C>0, less than 42% do. While these contracts
could of course be called in the future, the large fraction of them
that have remained dormant is nevertheless surprising.
4.3 Contract equality
We now turn to examine how similar contracts are to one another.
Recall that when a user creates a contract, it is given a unique
contract address, even if some other user had previously created
a contract with exactly the same bytecode. Thus we begin by ex-
amining how often users create exactly the same contract, which
we call bytecode-level equality. From the geth client, we are able
to obtain the bytecode for all contracts that have not executed
SELFDESTRUCT. Table 1 shows the number of unique bytecodes at
each level of the creation graph. We can observe that many users
and contracts appear to be creating the same contracts (across 1.2M
user-created contracts, only 125K distinct bytecodes exist; across
3.4M contract-created contracts, only 2K distinct bytecodes exist).
This high level of code reuse for user-created contracts suggests
users are obtaining their code from a small set of locations, in-
cluding that if bugs exist in these contracts, the effects could be
widespread.
While examining this code, we observed that many contracts
appear to be the same, only with a few different arguments to certain
opcodes (typically destination addresses for currency transfers). We
2The only C3 contract is a result of a token factory contract (a contract that creates
token contracts).
Analyzing Ethereum’s Contract Topology
IMC ’18, October 31-November 2, 2018, Boston, MA, USA
only 16,373 clusters, indicating extensive code reuse throughout
the Ethereum smart contract ecosystem. We find the distribution
to exhibit a long tail; the largest cluster comprises 20.9% (26,144) of
all user-generated contracts; the top five clusters constitute 51.1%.
Conversely, there is a very long tail, with 11,678 clusters of size one.
We spot checked the top three largest clusters against the available
source code3 and found that the largest cluster is made up of to-
ken contracts, the second largest cluster is made up of contracts
involved in the DDoS attack of October 2016, and the third largest
cluster is made up of wallet contracts.