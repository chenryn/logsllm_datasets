代码
由于二进制位不超过 32 位，所以这里每一行最多不会超过 32个数。所以最终时间复杂度不会超过
func subarrayBitwiseORs(A []int) int {
·第三步，去重：
//解法一 array 优化版 
package leetcode
return len(res)
cur = append(cur, (
res, cur, isInMap := []int{}, []int{}, make(map[int]bool)
if !inslice(cur2, v) {
for .
var cur2 []int 
111 101
for.
cur = cur2 
111
1
001
111 111 111 111 101
111 111 110 110
111 111 100 
011 011
001
 cur2 = append(cur2,v)
if.
if !inslice(cur2，tmp） {
tmp := v | vv 
isInMap[vv] = true 
 cur2 = append(cur2， tmp)
res = append(res, vv)
-, vv := range cur {
110
100
-,ok :=isInMap[vv]; !ok {
~
---
## Page 867
Example 1: 
stock spans would be [1, 1, 1, 2, 1, 4, 6]. 
For example, if the price of a stock over the next 7 days were [100, 80, 60, 70, 60, 75, 85], then the
to today's price.
(starting from today and going backwards) for which the price of the stock was less than or equal
The span of the stock's price today is defined as the maximum number of consecutive days
 of that stock's price for the current day.
Write a class Stockspanner which collects daily price quotes for some stock, and returns the span
题目
901. Online Stock Span
Output: [null,1,1,1,2,1,4,6] 
[100],[80],[60],[70],[60],[75],[85]] 
Input: ["stockspanner","next","next","next","next","next","next","next"], [[],
func subarrayBitwiseORsl(A []int) int {
// 解法二 map 版 
func inslice(A []int,T int) bool {
return len(res)
res， t := map[int]bool{}， map[int]bool{}
return false
for n := range t {
for n := range t 
r[num] = true 
r := map[int]bool{}
t=r 
 res[n] = true
 r[(num | n)] = true
return true
---
## Page 868
代码
500. Largest Rectangle in Histogram 
499. Sum of Subarray Minimums 
498. Daily Temperatures
497. Next Greater Element Il
496. Next Greater Element I
单调栈类似的题
总结
这一题就是单调栈的题目。维护一个单调递增的下标
解题思路
例如，如果未来7天股票的价格是[100,80,60,70,60,75,85]，那么股票跨度将是[1,1,1,2,1,4, 6]。
今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括
编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。
题目大意
Note:
3. There will be at most 15ooo0 calls to StockSpanner.next across all test cases.
1. Calls to StockSpanner.next(int price) will have 1  0 && this.Item[len(this.Item)-1].val  0)] { 
func totalFruit(tree []int) int {
package leetcode
●1  0 && tree[right+l] != tree[left]) Il
}else { 
 return 0
if counter == 0 Il (counter > 0 & right == len(tree)-1) {
 if counter >O && tree[right+l]!= tree[left] { 
if freq[tree[]eft]] == 0 {
freq[tree[right]]++
left++
counter++ 
freq[tree[left]]--
right++
 res = max(res, right-left+l)
 counter--
---
## Page 872
由于答案可能很大，因此返回答案模10^9+7。
给定一个整数数组 A，找到 min(B)的总和，其中 B 的范围为 A 的每个（连续）子数组。
题目大意
Note:
Example 1: 
 Since the answer may be large, return the answer modulo 10^9 + 7.
subarray of A.
Given an array of integers A, find the sum of min(B), where B ranges over every (contiguous) 
题目
907. Sum of Subarray Minimums
解题思路
·上面暴力解法时间复杂度特别大，因为某个区间的最小值可能是很多区间的最小值，但是我们暴力
·首先想到的是暴力解法，用两层循环，分别枚举每个连续的子区间，区间内用一个元素记录区间内
2. 1 =关系)的区间长度。left[i] +1 等于以 A[i] 结尾的子数组数
间内的最小值。为了得到 f(i) 我们需要找到 left[i] 和 right[i]， left[i] 是 A[i] 左边严格大于 Ai的区间
个单调栈。想得到思路是res= sum(A[i］*f(i)），其中f(i) 是子区间的数，A[i] 是这个子区
枚举所有区间，导致要遍历的区间特别多。优化点就在如何减少遍历的区间。第二种思路是用 2
都扫完一遍以后，最终结果模上10^9+7。
---
## Page 873
代码
func sumSubarrayMins(A []int) int {
package leetcode
·看到这种 mod1e9+7的题目，首先要想到的就是dp。最终的优化解即是利用 DP+单调栈。单调
//解法一 最快的解是DP+单调栈
stack = append(stack, -1)
stack, dp, res, mod := []int{}，make([]int,len(A)+l)，0,1000000007
与这一题相似的解题思路的题目有第828题，第891题。
for i := O; i = O; i-- { 
 lefts, rights,leftstack, rightstack := make([]int, n),make([]int, n),
for i := O; i = A[i] {
count := 1 
lefts[i] = count 
leftStack = append(leftstack, &pair{val: A[i], count: count})
 = A[j] {
rightstack = rightstack[:len(rightstack)-1]
count += rightStack[len(rightStack)-1].count 
leftstack = leftstack[:len(leftstack)-1]
stack = append(stack, A[j])
 stack = stack[:len(stack)-1]
 int 
---
## Page 875
在t时刻投出的选票也将被计入我们的查询之中。在平局的情况下，最近获得投票的候选人将会获胜。
现在，我们想要实现下面的查询函数：TopVotedCandidate.q(int t)将返回在t 时刻主导选举的候选人
在选举中，第i 张票是在时间为 times[i] 时投给 persons[i] 的。
Note:
Example 1: 
(among tied candidates) wins.
Votes cast at time t will count towards our query. In the case of a tie, the most recent vote 
的编号。
题目大意
will return the number of the person that was leading the election at time t.
Now, we would like to implement the following query function: Topvotedcandidate.q(int t)
In an election, the i -th vote was cast for persons[i] at time times[i].
题目
911. Online Election
 5. Topvotedcandidate.q(int t) is always called with t >= times[0]
1. 1 <= persons.length = times.length <= 5000
2i
This continues for 3 more queries at time 15, 24, and 8.
At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the
Output: [nu11,0,1,1,0,0,1]
[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]] 
Input: ["Topvotedcandidate","q","q","q","q","q","q"], [[[O,1,1,0,0,1,0],
8
most recent vote.)
At time 3, the votes are [o], and 0 is leading.
Explanation:
times is a strictly increasing array with all elements in [0, 1o^9]
0 <= persons[i] <= persons.length
return res % mod 
res += stack[len(stack)-1]
---
## Page 876
代码
解题思路
提示：
·给出一个2个数组，分别代表第①人在第七时刻获得的票数。需要实现一个查询功能的函数,
4.每个测试用例最多调用 10000 次 TopVotedCandidate.q。
func Constructor911(persons []int, times []int) Topvotedcandidate {
3．times 是严格递增的数组，所有元素都在[0,10^9] 范围中。
2. 0 <= persons[i] <= persons.length 
1. 1 <= persons.length = times.length <= 5000 
// Constructor911 define
type Topvotedcandidate struct {
// TopvotedCandidate define
import
package leetcode
"sort"
 persons[］ 数组里面装的是获得选票人的编号，times[］ 数组里面对应的是每个选票的时
查询在任意七时刻，输出谁的选票领先。
return Topvotedcandidate{persons: leaders, times: times}
for i := O; i < len(persons); i++ {
leader := persons[0] 