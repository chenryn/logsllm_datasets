现方法都接收一个来自FBML解析器的FBMLNode，以字符串的方式
返回输出的HTML。下面是一些直接的HTML标签、数据显示标签
和数据执行标签的实现示例。请注意，这些程序清单用到了一些功
能，在这里没有完整而详细地列出。
在FBML中实现直接的HTML标签
例6-26包含了标签的内部FBML实现。图像标签的实现包含
更多的逻辑，有时候需要将图像源的URL重写到Facebook服务器上
图像缓存的URL。这体现了FBML的强大：应用栈可以返回与HTMI
非常相似的标记语言，支持它自己的站点，而Facebook可以通过纯
技术的手段强制实现平台所要求的行为。
例6-26：fb：img标签的实现
class FBMLImplementation {
public function__construct ($flavor) (..)
//: example of direct HTML tag (section 4.3.1)
public function tag_img ($node){
1030
---
## Page 1032
//images are not allowed in some FBML contexts
//for example,the titles of feed stories
$this->_flavor->check ('images') ;
//strip of transform attribute key-value pairs according
to
//rules in FBML
$safe_attrs=$this->_html_rewriter->
node_get_safe_attrs ($node) ;
if(isset ($safe_attrs['src'])){
//may here rewrite image source to one on a Facebook CDN
$safe_attrs['src']=$this->
safe_image_url ($safe_attrs['src']) ;
一
return$this->_html_rewriter->
render_html_singleton_tag ($node->
get_tag_name ()， $safe_attrs) :
在FBML中实现数据显示标签
例6-27展示了通过FBML使用Facebook数据的例子。用到了uid、size和title属性，将它们结合起来，根据内部数据
产生HTML输出，并符合Facebook的标准。在这个例子中，输出是
指定用户名的个人简单照片，链接到用户的个人简介页面，只在当
查看者能看到这部分内容时才显示。这个功能也存在于
FBMLImplementation类中。
例6-27：fb：profile-pic标签的实现
1031
---
## Page 1033
//: example of data-display tag
public function fb_profile_pic ($node){
//profile-pic is certainly disallowed if images are
disallowed
$this->check ('images') :
$viewing_user=$this->get_env (*user') ;
$uid=$node->attr_int ('uid'， O, true);
if (! is_user_id ($uid) )
throw new FBMLRenderException ('Invalid uid for fb:
profile_pic('.$uid.')*);
)=
$size=$this->validate_image_size ($size) ;
if(can_see (Sviewing_user, $uid, 'user'，'pic')){
//this wraps user_get_info, which consumes the user's
'pic'data field
$img_src=get_profile_image_src (Suid, $size) ;
)else{
return'";
$attrs['src']=$img_src;
//we can include the user name information here too.
//again,this function would wrap internal user_get_info
$attrs[*title*]=id_get_name (Sid) ;
1032
---
## Page 1034
return$this->_html_renderer->
render_html_singleton_tag('img', $attrs)
上
FBML中的数据执行标签
FBML解析的递归本质使得标签就像是标准的必须
服从的控制流中的if语句一样，它是FBML实际控制执行的一个例
子。这是FBML实现类中的另一个方法，例6-28列出了它的细节。
例6-28：fb：if-can-see标签的实现
//: example of data-execution tag
public function fb_if_can_see ($node){
global$legal_what_values: //the legal attr
values (profile, friends, wall,etc.)
$uid=$node->attr_int ('uid'， O, true);
$what=$node->attr_raw ('what','search')://default is
'search'visibility
if (! isset ($legal_what_values [$what]))
return''; //unknown value?not visible
$viewer=$this->get_env ('user');
$predicate=can_see ($viewer, $uid, 'user', $what) ;
return$this->render_if ($node, $predicate) : //handles the
else case
for us
//helper for the fb_if family of functions
protected function render_if ($node, $predicate){
1033
---
## Page 1035
if ($predicate){
return$this->render_children ($node) ;
)else {
return$this->render_else ($node) ;
上
protected function render_else ($node) {
$html = 1 * ;
foreach ($node->get_children () as$child) {
if ($child->get_tag_name () =='fb: else'){
$html.=$child->render_children ($this) ;
return$html :
{
public function fb_else ($ignored_node) (return'': )
如果某对“观察者-目标"通过了can-see检查，引擎就会递归地渲染节点的子节点。否则，就会渲染可选标签子节点下的内容。请注意fb_ifcan_see直接访问子节
点的方式：如果出现在这样的一个"if风格"的FBML标
签之外，标签和它的子标签就不会返回任何内容。所以，FBML不
仅仅是一个简单的转换式例程，它会注意到文档的结构，因此可以
包含条件控制流的元素。结合在一起前面讨论的每个功能，都需要
注册为一个回调，在解析输入的FBML时使用。在Facebook（以及
它的开放源代码平台实现中），这个“黑盒"解析器是用C写的PHP扩
展，每个回调都存在于PHP树中。要完成这种高层控制流，我们必
须向FBMIL解析引擎声明这些标签。和其他地方一样，出于简单性
考虑，例6-29也是经过了大量编辑的。
1034
---
## Page 1036
例6-29：FBML主要求值流程
//As input to this flow:
//$fbml_impl-the implementation instantiated above
//$fbml_from_callback-the raw FBML string created by the
external
application
//a list of"Direct HTML"tags
$html_special=$fbml_impl->get_special_html_tags () ;
//a list of FBML-specific tags ()
$fbml_tags=$fbml_impl->get_all_fb_tag_names () ;
//attributes of all tags to rewrite specially
rewrite_attrs=array('onfocus', 'onclick'， /*..*/) ;
//this defines the tag groups passed to flavor's check ()
function
//(e.g.'images','bold'，'flash','forms', etc.)
$fbml_schema=schema_get_schema () ;
//Send the constraints and callback method names along
//to the internal C FBML parser.
fbml_complex_expand_tag_list_11 ($fbml_tags, $fbml_attrs,
$html_special, $rewrite_attrs, $fbml_schema) ;
$parse_tree=fbml_parse_opaque_11 ($fbml_from_callback) ;
$fbml_tree=new FBMLNode ($parse_tree['root']) ;
$html=$fbml_tree->render_html ($fbml_impl) ;
1035
---
## Page 1037
FBML利用回调扩展了浏览器的解析技术，包装了由Facebook创建
和管理的数据、执行和展现宏。这个简单的思想实现了应用的完全
集成，支持使用通过API暴露出来的内部数据，同时保持安全性方
面的用户体验。FBMIL本身几乎就是一种编程语言，它也是充分发
展后的数据：外部提供的声明式执行，安全地控制了Facebook上的
数据、执行和显示。
6.5系统的支持功能
现在，开发者创建的软件运行在Facebook的服务之上，不仅是结合
了界面组件，而是全部的应用。在这个过程中，我们创造了一个社
会关系网络应用的完全不同的概念。我们从一个典型的Web应用的
独立数据、逻辑和显示的标准设置开始，不考虑所有社会关系数
据，只是让用户可以确信能够作出贡献。现在，我们取得了充分的
进展，应用使用了Facebook的社会关系数据服务，同时它自己文成
为一个FBML服务，完全集成到容器站点之中。
Facebook数据也获得了长足的发展，不再仅仅是本章第一节讨论的
内部库。但是，仍有一些重要的、常见的Web使用场景和技术，目
前平台还未能支持。通过将应用变成一个返回FBML的服务，而不
是直接由浏览器解读的HTML/CSS/JS，我们接触到了关于现代Web
应用的一些重要假定。让我们来看看Facebook平台如何修正这样一
些问题。
6.5.1平台cookie
应用的新Web架构排除了浏览器内建的一些技术，许多Web应用栈
可能依赖于这些技术。可能其中最重要的一点是，过去浏览器用于
保存用户与应用栈交互信息的cookie不再可以得到了，因为应用的
目标消费者不再是浏览器，而是Facebook平台。
初看上去，伴随对应用栈的请求发送一些cookie似乎是一个不错的
解决方案。但是，这些cookie的作用域现在是
“http://facebook.com”，而实际上，cookie信息属于该应用领域所提
供的用户体验。
解决方案是什么？让Facebook具有浏览器的职责，在Facebook自己
的存储库中复制这种cookie功能。如果应用的FBML服务送回请求
头，试图设置浏览器cookie，Facebook就保存这个cookie信息，以
1036