replies in § 9.) We view the outbound direction as the
most apt when concerned about exﬁltration threats. In
addition, for the interactive communication scenario, the
outbound direction corresponds to the replies generated
by a local login server in response to keystrokes sent by
a remote client. The outbound trafﬁc volume to the lo-
gin client is typically 20 times larger than the incoming
trafﬁc [21], making DNS queries embedding outbound
trafﬁc the larger target for that scenario, too.
We do not consider here communication that an at-
tacker spreads across multiple remote domains or mul-
tiple remote name servers (such as attacker1.com, . . .,
attackern.com), nor spread thinly across multiple local
clients. We discuss these and other evasion issues in § 9.
4 The Data
For our analysis we draw upon datasets that together
comprise 230 billion queries. The data was collected at
multiple locations across the US and China, with van-
tage points ranging from internal DNS servers to network
perimeters. We summarize each dataset and its daily traf-
ﬁc statistics in Table 1.
INDLAB: an industrial research laboratory. Collected
with a network sniffer near an internal DNS server, this
dataset contains queries from internal clients, the reply
time-to-live, and microsecond-resolution time stamps.
LBL: a national research laboratory. This dataset con-
tains DNS queries from local clients received by several
internal DNS servers. Covering a time span of 7.5 years,
this is the largest data set in our analysis.
NERSC: a super-computer center. The dataset con-
tains queries from local clients to the site’s DNS servers.
UCB: a university campus. This data was collected
on a perimeter network, providing an aggregate view of
(outbound) DNS query trafﬁc. This site includes servers
that use 0x20 encoding [27], which nearly doubles the
number of distinct lookup names.
CHINA: a caching server for several university net-
works in China, with visibility of individual client IP ad-
dresses.
SIE: the Security Information Exchange of the Inter-
net Software Consortium [24]. In this collaboration of
infrastructure providers, law enforcement, security com-
panies and researchers, participants2 mirror their DNS
reply trafﬁc from name servers across the Internet. (Note
that each reply contains a copy of the query.)
With a combined average of 1.5 billion replies a day,
SIE has by far the highest data rate in our collection.
2Heavily dominated by a single large U.S. ISP.
USENIX Association  
3
22nd USENIX Security Symposium  19
However, we note that we use it as a means of assess-
ing to what degree our detection procedure indeed can
ﬁnd actual instances of surreptitious communication over
DNS; we do not claim our procedure is tenable for actual
operational use in this environment, which is hugely ag-
gregated across (likely) millions of actual clients.
5 Establishing Communication Bounds
In this section we develop a principled approach for
bounding the amount of information possibly conveyed
by local systems to remote name servers. The next sec-
tion then presents a number of ﬁltering steps that reduce
the resources required for detecting communication that
exceeds these bounds.
5.1
We ﬁrst frame the basic communication mechanisms an
attacker could employ. In general terms, we consider an
attacker who wishes to communicate a signiﬁcant quan-
tity of information by sending DNS queries to a remote
domain (say D.com) whose name server(s) the attacker
controls. Such queries provide a number of information
vectors that the attacker can exploit to surreptitiously em-
bed data within the stream of queries.
Information Vectors
We note that attackers can potentially employ multiple
vectors at the same time. We emphasize that our detec-
tion scheme does not presume use of particular encod-
ings for a given vector; the encodings we give here are
just meant to illustrate the possibilities.
Query name-content vector. A conceptually straight-
forward way to embed data is for the attacker to devise a
data encoding that conforms with the requirements im-
posed on DNS labels, limiting each to no more than
63 bytes in length, and complete DNS names to no more
than 255 bytes [18]. For example, one could use Base-64
encoded data strings as such as VVNFQwo.D.com.
To our knowledge, all available tunneling-over-DNS
tools reﬂect this style of approach.
Query name-codebook vector. Rather than using each
DNS query to reﬂect a message many bytes long, at-
tackers can encode messages using a ﬁxed alphabet of
symbols and then transmit those symbols one at a time
using a series of queries. For example, to convey the bit-
string 00101111 one bit at a time, a client could issue the
queries: z.D.com, z.D.com, o.D.com, z.D.com, o.D.com,
o.D.com, o.D.com, o.D.com. They could of course also
use larger alphabets to obtain greater efﬁciency.
Encodings using this vector will in general generate
many more lookups of the same names over time com-
pared to those using the query name-content vector.
Query type vector. Along with the query name, clients
include in their requests the type of DNS Resource
Record they wish to resolve, such as PTR for reverse-
IP-address-to-hostname mappings, or AAAA to look up
IPv6 addresses. Attackers can encode a modest amount
of information per query using this 16-bit ﬁeld.
Query timing vector. A more subtle information vec-
tor exists in the speciﬁc timing of queries. For example,
if the attacker can resolve the arrival times of queries to
1 sec precision, then the attacker can use the number of
seconds between successive queries as a means of con-
veying information.3
A key issue for timing vectors concerns clock preci-
sion. With an extremely precise clock (and sufﬁciently
low jitter), intervals between queries can convey several
bytes of information without requiring very large inter-
query delays. For example, transmitting one query every
second using a clock with 1 msec precision can convey
lg103 bits per query, totaling more than 108 KB per day.
Other information vectors. Inspecting the DNS query
format reveals several additional ﬁelds possibly avail-
able for communicating information: query identiﬁers, a
number of ﬂags, options, the query count, and the 16-bit
address class ﬁeld included in each query. We argue that
none of these provide a reliable end-to-end information
vector for an attacker, given the assumption in our threat
model that the attacker’s client must relay its queries via
a site’s standard (non-cooperative) resolver. Such re-
layed queries will not preserve query identiﬁers. The
ﬂags either do not survive the relaying process (e.g., Re-
cursion Desired) or will appear highly anomalous if they
vary (e.g., requesting DNSSEC validation), and likewise
DNS options (EDNS0) do not survive relaying, as un-
known options return an error [26], and the current op-
tions themselves are generally implemented on a hop-
by-hop basis. Similarly, query counts other than 1 would
appear highly anomalous and likely fail to actually prop-
agate through the site’s name server. Likewise, use of
any address class value other than IN (Internet) would
be readily detectable as anomalous.
5.2 Challenge: Diversities Seen in Practice
A natural starting point when attempting to detect surrep-
titious DNS communication is to posit that the encodings
used for the communication will stand out as strikingly
different than typical DNS activity. If so, we can target
the nature of the encoding for our detection.
What we ﬁnd, however, is that while potential encod-
ings may differ from typical DNS activity, they do not
sufﬁciently stand out from the diverse range of benign
activity. When we monitor at a large scale—such as
analyzing the trafﬁc from the 1000s of systems in an
enterprise—we observe a striking degree of fairly ex-
treme forms of DNS lookups.
3In addition, the speciﬁc query received after the given interval
could also convey additional information using one of the previously
described vectors.
20  22nd USENIX Security Symposium 
4
USENIX Association
Figure 3: Distribution of the lengths of all individual (solid)
or all distinct (dashed) domain name preﬁxes queried during
a sample day of data from LBL. The horizontal lines mark
that 76K (all) and 58K (distinct) lookups were ≥ 100 bytes.
Lengths do not include the registered domain targeted by the
lookup. Note that the plot shows the upper 1% of all queries,
but the upper 18% of all distinct queries.
To illustrate, we consider DNS activity observed on
a sample day in 2011 at LBL. It includes 35M queries
issued from 9.4k hosts. These queries in total span
1.2M distinct names, and if we discard the ﬁrst com-
ponent of each name, 620K distinct subdomains. These
subdomains are themselves rooted in 137K distinct reg-
istered domains (i.e., one level under com or co.uk).
One natural question concerns the frequency with
which operational DNS trafﬁc exhibits peculiarly long
query names, since many natural encodings for surrep-
titious communication will aim to pack as much infor-
mation into each query as possible. Figure 3 shows the
distribution of domain name preﬁx lengths ≥ 50 bytes
(i.e., characters) looked up in our sample day. We see
that queries with names even larger than 100 bytes oc-
cur routinely: while rare in a relative sense (only 0.2% of
query names are this large), 76,523 such queries occurred
on that day. Restricting our analysis to distinct names
(dashed line) does not appreciably lower this prevalence.
For concreteness, here are some examples of what
such queries look like:
JohnsonHouse\032Officejet....sonhouse1.members.mac.com
www.10.1.2.3.static.becau....orant.edu.za.research.edu
awyvrvcataaaegdid5tmr7ete....ilu.license.crashplan.com
g63uar2ejiq5tlrkg3zezf2fk....emc6pi88tz.er.spotify.com
5.1o19sr00ors95qo0p73415p....7rn92.i.02.s.sophosxl.net
where we have elided between 63 characters (ﬁrst exam-
ple) and 197 characters (last example). See Appendix A
for the complete names.
Thus, simply attempting to detect queries that include
unusually large names does not appear viable. Similarly,
the examples above illustrate that benign trafﬁc already
includes DNS queries that use opaque encodings, so we
do not see a promising angle to pursue with regard to rec-
ognizing surreptitious communication due to the syntax
of its encoding.
Figure 4: Distribution of the total length of domain name pre-
ﬁxes sent to different registered domains, computed as the sum
of all names (solid) or distinct names (dashed). The horizon-
tal lines mark that 1,186 registered domains received ≥ 4kB of
names, while 114 received ≥ 4kB of distinct names.
A different perspective we might pursue is that if only
a small number of remote name servers receive the bulk
of the site’s queries, then we might be able to explic-
itly examine each such set of trafﬁc. Figure 3, however,
shows that large volumes of queries are spread across
numerous remote name servers. The plot shows how
many registered domains received a given total size of
queries (the sum of the lengths of all of the preﬁxes sent
to that domain). If we restrict our view to the total size of
distinct queries that a registered domain receives, more
than 100 registered domains each received in excess of
4kB of query names. If we include preﬁxes for repeated
lookups, the ﬁgure is ten times higher.
Surprising query diversity also manifests in other di-
mensions. For example, surreptitious communication
that leverages the transmission of repeated queries in a
codebook-like fashion requires using low-TTL answers
to prevent local caching from suppressing queries. How-
ever, we ﬁnd that in benign trafﬁc, low TTLs are not un-
usual: in a day of queries for external names that we ex-
amined, a little under 1% of the answers had TTLs of 0
or 1, and 38% are ≤ 60 sec. We also ﬁnd instances of
large numbers of repeated queries arising from benign
activity such as misconﬁgurations and failures.
In summary, the variations we ﬁnd operationally are
surprisingly rich—enough so to illustrate that our prob-
lem domain will not lend itself to conceptually simple
approaches due to the innate diversity that benign DNS
lookups manifest when observed at scale.
To illustrate the difﬁculty, we evaluated the perfor-
mance of a naive detector that simply sums up the vol-
ume of lookups sent to each domain, alerting on any
client sending the domain more than 4,096 bytes in one
day. In steady-state (using the same methodology as in
§ 7, including the Identiﬁed Domain List discussed be-
low), this detector produces 200x more alerts than our
actual procedure. If we alter the detector to only sum the
volume of distinct lookups, we still must abide 5x more
USENIX Association  
5
22nd USENIX Security Symposium  21
501001502001100Length of domain names (bytes)All lookupsDistinct lookupsNumberoflengths≥ X(log)100001e+001e+021e+041e+061e+08110010000Total size of domain names looked up (bytes)All lookupsDistinct lookupsNumberofsizes≥X[log]4kBalerts (and lose the ability to detect codebook-style en-
codings). We emphasize that because our actual proce-
dure has no false negatives, all of these additional alerts
represent false positives.
5.3 Establishing Accurate Bounds
on
Query Stream Information Content
Given that simple heuristic detection approaches will not
sufﬁce due to the innate diversity of DNS queries, we
now pursue developing principled, direct assessments of
upper bounds on the volume of data a given client poten-
tially transmits in its queries.
A key observation is that—provided we do not under-
estimate the potential data volume—we can avoid any
false negatives; our procedure will indeed identify any
actual surreptitious communication of a given size over
DNS. Given this tenet, the art then becomes formulating
a sufﬁciently tight upper bound so we do not erroneously
ﬂag lookups from a client to a given domain as reﬂecting
a signiﬁcantly larger volume of information than actually
transmitted.
We can obtain tight bounds by quantifying the size
of carefully chosen representations of a client’s query
stream. If we obtain these representations in a lossless
fashion (i.e., we can recover the original query stream
from the representation), then the bound is necessarily
conservative in the sense of never underestimating the
true information content of the queries. At the same time,
the representation must be compact enough to reduce any
redundancy from the query stream as efﬁciently as possi-
ble in order to obtain a tight estimate. Thus, the task we
face is to determine a representation of the query stream
that efﬁciently captures its elements, but does so in a re-
versible fashion. In general, we seek forms of lossless
compression with high compression ratios.
Conceptually, the heart of our approach is to take
encoded query streams and feed them to compression al-
gorithms such as gzip, using the size of the compressor’s
output as our estimate. While simple in abstract terms,
pursuing this effectively requires (1) care in encoding the
streams to try to achieve as tight a bound as possible,
and (2) structuring the analysis procedure to execute ef-
ﬁciently given a huge volume of data to process.
For the rest of this section, we address the ﬁrst of these
issues. We then discuss execution efﬁciency in § 6.
Character casing. The ﬁrst question regarding encoding
query streams concerns the most obvious source of varia-
tion, namely the particular names used in the queries. For
these, one signiﬁcant encoding issue concerns casing.
While the DNS speciﬁcation states that names are treated
in a case-insensitive manner, in practice resolvers tend to
forward along names with whatever casing a client em-
ploys when issuing the query to the resolver.
Together, these considerations mean that, for example,
a query for foo.D.com and FoO.D.COM will both arrive at
the same D.com name server, with the casing of the full
query name preserved. Accordingly, we must downcase
query name sufﬁxes in order to correctly group them to-
gether (i.e., to account for the fact that the same name
server will receive them), but preserve casing in terms of
computing information content, since indeed the attacker
can extract one bit of information per letter in a query
(including the domain itself) depending on its casing.
0x20-encoding. Preserving casing in queries can raise
a difﬁculty for formulating tight bounds on informa-
tion content due to the presence of 0x20-encoding [27],
which seeks to artiﬁcially increase the entropy in DNS
queries to thwart some forms of blind-spooﬁng attacks.
While the presence of arbitrary casing due to use of
0x20-encoding does indeed reﬂect an increase in the ac-
tual information content of a stream of queries, this par-
ticular source of variation is not of use to the attacker;
they cannot in fact extract information from it.
We found that unless we take care, our UCB dataset,
which includes queries from a number of resolvers that
employ 0x20-encoding, will indeed suffer from signiﬁ-
cant overestimates of query stream information content.
The presence of such resolvers however means that their
clients cannot exploit casing as an information vector,
since the resolver will destroy the client’s original cas-
ing. Accordingly, we developed a robust procedure (de-
tails omitted due to limited space) for identifying queries
emanating from resolvers that employ 0x20-encoding.