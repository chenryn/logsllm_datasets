1
2
3
4
5
6
7
8
9
10
11
Total













?





?
?

4 (1 TP, 3 FP)
12 (8TP, 4FP)
6 (2 TP, 4 FP)
10 (2 TP, 7 FP, 1 NC)
10 (2 TP, 7 FP, 1 NC)
15 (3 TP, 12 FP)
8 (2 TP, 6 FP)
8 (2 TP, 6 FP)
6 (3 TP, 3 FP)
9 (1 TP, 8 FP)
9 (4 TP, 5 FP)
1 (1 TP)
9 (6 TP, 3 FP) (cid:63)
6 (2 TP, 4 FP)
2 (2 TP)
2 (2 TP)
6 (2 TP, 4 FP)(cid:63)
3 (2 TP, 1 FP)
3 (2 TP, 1 FP)
1 (1 TP)(cid:63)
3 (1 TP, 2 FP)
9 (4 TP, 5 FP)
7 (6 TP, 1 FP)
6 (6 TP)
3 (2 TP, 1 FP)
2 (2 TP) •
2 (2 TP) •
9 (8 TP, 1 FP)
4 (3 TP, 1 NC)
4(3 TP, 1 NC)
1 (1 TP)•
0
16 (14 TP, 2 FP)
4,341
11,870
16,461
6,859
6,859
4,169
8,418
8,418
6,010
5,646
22,406
10/11
7/11
97 (30 TP, 65 FP, 2 NC)
45 (25 TP, 20 FP)
54 (47 TP, 5 FP, 2 NC)
101,457
31,847
76,558
107,935
41,256
41,256
30,462
52,013
52,013
42,358
33,267
108,507
617,472
409,760
1,180,817
1,267,785
615,410
615,410
378,733
813,444
813,444
467,670
457,719
1,411,798
8,431,990
• fuzzing triggers coincide with sendMessage functions.
SUMMARY OF THE BUGS DETECTED BY DIANE, IOTFUZZER, AND BY EXISTING NETWORK FUZZERS (BED, SULLEY, UFUZZ, AND BSS). NO.
GENERATED ALERTS INDICATES THE NUMBER OF UNIQUE fuzzing triggers FOR WHICH DIANE AUTOMATICALLY GENERATED AT LEAST ONE
ALERT. TIME INDICATES THE TIME REQUIRED TO FIND ALL THE REPORTED BUGS (AND THE NUMBER OF FUZZING INPUT GENERATED TO FIND
THE BUGS). NO. FUZZED FUNCTIONS INDICATES THE NUMBER OF FUNCTIONS IDENTIFIED BY IOTFUZZER FOR FUZZING.
TABLE III
Device
ID
No. Generated
Alerts
No.
Bugs
Zero-day
Vuln.
Type
Time [hours]
(No. Generated Inputs)
DIANE


Unknown
Unknown
Buff overflow
1
2
3
4
5
6
7
8
9
10
11
• We manually instrumented IoTFuzzer to identify a valid send function.
1
7
1
0
0
1
0
0
0
0
† 1
N/A
N/A
N/A
N/A
1
3
1
1
1
4
3
3
0
1
0
Unknown
Unknown
N/A
N/A

≤ 0.5 (60,750)
≤ 0.5 (322)
≤ 1.2 (7,344)
≤ 10 (34,680)
N/A
N/A
N/A
N/A
N/A
N/A
2.2 (3,960)
IoTFuzzer
No.
Bugs
No. Fuzzed
Functions
Time
[hours]
• 1
5
1
• 1
• 1
1
N/A
N/A
3
N/A
N/A
0
2
1
0
0
1
N/A
N/A
0
N/A
N/A
N/A
0.98
4
N/A
N/A
≤ 10
N/A
N/A
N/A
N/A
N/A
BED
N/A
0
0
N/A
0
0
0
0
0
N/A
N/A
Other Fuzzers
No. Bugs
Sulley
uFuzz
0
0
0
0
0
0
0
0
0
0
N/A
N/A
N/A
N/A
N/A
N/A
0
N/A
N/A
0
N/A
N/A
bss
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
N/A
0
† Vulnerability discovered through the watchdog device.
through its companion app, while monitoring the network traffic.
We considered a candidate sendMessage function a true positive
if: i) We registered network traffic when the companion app
invoked the sendMessage function, and ii) the code and semantic
of the function indicated network functionality. If either of these
two conditions were false, we considered the sendMessage
function a false positive. There were cases where the app was
heavily obfuscated, and we could not establish if the considered
sendMessage function was indeed sending data (NC in Table II).
As shown in Table II, DIANE was able to remove 45 false
positive results during its sendMessage function validation step, .
For Device IDs 2, 6, and 9 (indicated with (cid:63)), one might think that
we lost some true positives during the validation step. However,
this was not the case. After manual verification (using both static
and dynamic analyses), we discovered that the missing true
positives were just wrappers of other validated true positives. We
also looked for false negatives, that is, sendMessage functions that
were not identified as such. To the best of our ability, we found
no such false negatives.
Overall, though we registered some false positives (20 in total),
we always identified correctly sendMessage functions (i.e., no
false negatives). We investigated the false positives and we found
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
491
that they were due to border functions containing calls to native
methods, which were called within (or right before) the correct
sendMessage functions. As such, their execution times were close
to the actual sendMessage functions, causing our sendMessage vali-
dation step to label them as valid sendMessage functions. Also, it is
important to say that false positive results do not affect the effective-
ness of DIANE (i.e., the number of bugs found), rather its efficiency
(i.e., the time spent to find those bugs). In fact, considering a non-
sendMessage function as a sendMessage would only result in iden-
tifying additional, wrong fuzzing triggers that would not generate
any network traffic when fuzzed, thus not affecting the IoT device.
For each true positive sendMessage function, we verified that
DIANE correctly identified the top-chain functions (i.e., fuzzing
triggers). Fuzzing triggers for Device IDs 4, 5 and 9 (marked
with •) coincided with the sendMessage functions. This happens
in apps that either do not have data-transforming functions, or
where the functions that transform the data also embed the send
functionality. Consequently, these functions are both sendMessage
and top-chain functions.
For three apps (Device IDs 3, 9 and 10), we could not trace the
data-flow from the identified sendMessage functions back up to
the UI elements. This was due to imprecisions of the employed
reverse engineering tools. Therefore, we could not establish
whether they performed app-side data sanitization.
We also investigated false positives and negatives in the
identified fuzzing triggers. Overall, our transformation data chain
identification algorithm generated 5 false positives. In 2 cases, our
backward slicer could not find any callers of a given function, and,
therefore, our algorithm ended and considered the last detected
data-transforming function f a fuzzing trigger. After manual
verification, we found that the correct fuzzing trigger, in both cases,
was a caller of function f. Although f is a valid data-transforming
function, DIANE cannot assure that it is a top-chain function, as
there might be another data-transforming function calling f that
dominates f. The remaining 3 false positives were due to the fact
that these functions introduced an entropy higher than our threshold,
though they were not data-transforming functions. However, we
maintained our threshold to 2 as this value is indicated as optimal
by related work [80]. As we explained before, these false positives
do not influence the effectiveness of DIANE, but only its efficiency.
Finally, we evaluated the false negatives generated by DIANE.
To the best of our ability, we did not encounter any false negative
while manually reversing the apps.
C. Vulnerability Finding
Finally, we fuzzed the obtained fuzzing triggers, and verified
the alerts produced by our tool. Table III shows the results of our
fuzzing. Note that, while DIANE can also use sendMessage func-
tions as entry points for fuzzing, it identified all the detected bugs
only when leveraging fuzzing triggers. We discuss the human effort
required to verify the alerts produced by DIANE in Section IV-I.
We validated our findings as follows. The seven bugs for Device
ID 2 were confirmed by analyzing both the network traffic and
the camera firmware. Through the analysis of the firmware, we
were able to verify our findings and craft a proof-of-work exploit
that stalls the device for an arbitrary amount of time. We reported
these bugs to the manufacturer, who confirmed our findings.
As for Device ID 1, after finding the candidate crash input, we
verified it, through the app, by observing how the device behaved.
We noticed that, after sending the crafted input, the device did not
respond anymore, unless it was rebooted. Also, after fuzzing it for
24 hours the device entered a malfunctioning state, and we were
unable to correctly restore it, even after multiple factory resets. We
then purchased another camera of the same model, and the same