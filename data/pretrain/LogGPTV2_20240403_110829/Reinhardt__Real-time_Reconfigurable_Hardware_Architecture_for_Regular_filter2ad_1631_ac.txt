3.2 Converting Regex to Reinhardt Cell Logic
We follow Thompson’s algorithm to transform a regex pattern to
its NFA [71]; a given regex pattern is split into its constituent subex-
pressions (i.g., literal characters and metacharacters) and converted
to partial NFAs. The concatenation of the partial NFAs constructs
the complete NFA.
{{Input cellsLogic cellsPacket bytestreamInput CellBytestream…In.Out.Begin / Not / Last ﬂagsEdge CellCounterTopRightLeftBottom623Reinhardt: Real-time Reconfigurable Hardware Architecture for Regular Expression Matching in DPI
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
(a) NFA State Diagram for ‘(ab|cd)+X{1,3}[0-9]*’
(b) NFA on the Reinhardt core
Figure 5: Deployment of Regex Pattern to Reinhardt
of its input cell are stored in the stack (In here, the I/O port of the
input cell is always the right side, so the directions are fixed at R). 2)
The metacharacter reads the coordinates of the recently generated
partial NFAs from the stack by the number of required operands
and synthesizes the operand NFA(s) into a bigger NFA with the
metacharacter template. Then, the input/output coordinates of the
bigger NFA are stored as the new partial NFA. As this operation is
recursively performed, the entire NFA is completed by connecting
the ϵ and accept signals to the last stacked NFA. Finally, this result
is transferred and stored to the hardware memory.
3.3 Pattern Deployment Breakdown
Figure 5 shows the deployed Reinhardt logic for regex ‘(ab|cd)+X
{1,3}[0-9]*’ on the 4 × 4 Reinhardt core from Algorithm 1 (See
Appendix A for the detailed steps). Comparing its state diagram
to the configured logic (Figure 5a and 5b), the edges of the state
diagram are represented by the logic cells in the same shape, and the
characters chained in linear are represented by the input cells. Each
subexpression is mapped one to one, resulting in the Reinhardt core
consequently implementing the equivalent state machine; starting
from the ϵ-signal of (a) in Figure 5b, the state of the observation
string is transitioned through each section until (f). This accept-
signal notes that the observation string matches the regex pattern
and that it is accepted. Conversely, removing a pattern is done
simply by initializing the involved cells. New patterns can use the
initialized spaces; the modification of a deployed pattern is made by
generating new logic for the modified pattern from the algorithm,
releasing the previous logic placing the new logic at that place.
Here, We note that the size of the Reinhardt core in this example
is only 4 × 4 with one regex pattern, but it is only scaled down for
clear understanding. The actual core size is larger and can represent
a more complex and more number of regex. Generally, as the width
w of the core increases, more metacharacters can be represented
(i.e., a more complex regex pattern), and as the height of the core
h increases, more regex patterns can be expressed and matched
simultaneously. The size of the core is closely related to available
FPGA resource, and the details are covered in §5.
Table 2: Templates for Regex Pattern to Reinhardt Logic
To implement NFA in the Reinhardt core, the Reinhardt software
enforces the cell configurations to construct the NFA logic similarly
to Thompson’s algorithm. The subexpression is classified as sub-
strings and metacharacters, and each subexpression is templatized,
representing their partial NFA structures by a combination of the
cells as described in Table 2. Connecting the templates builds up
the more extensive NFA logic recursively in the core.
Algorithm 1 describes this operation. It first takes the number of
a start row in the core to place a generated NFA and a target regex
pattern to deploy and initializes a stack that stores the input/output
coordinate and its direction (i.e., Top-Bottom-Left-Right) for the last
generated partial NFA(s) so far. Then, the given regex pattern is
converted to the postfix form to reflect the precedence in which the
partial NFAs are generated and parsed by reading the postfix se-
quentially. 1) The substrings are placed in the input cell on each row,
and whenever input of one substring is completed, one substring is
considered as one small NFA so that the input/output coordinates
Reinhardt:Real-timeReconfigurableHardwareArchitectureforRegularExpressionMatchinginDPIACSAC’21,December6–10,2021,VirtualEvent,USANFAsnippetLogicTemplateNFAsnippetLogictemplate[0-9]A{m,n}/A{m}/A{m,}0 ~ 9[0,9](Matchtomin/maxrange)Am ≤ A ≤ nAm ≤ A ≤ n(Withacounter)^A[^a-z]beginAAbegin(With‘begin’flag)nota ~ z[a,z]not(With‘not’flag)A$A*lastAAlast(With‘last’flag)AAA+A?AAAAA|B(AB)(CD)ABABABABABCDABCDTable2:TemplatesforRegexPatterntoReinhardtLogicAlgorithm1:RegexPatterntoReinhardtCellLogicInput:start_row,StartrowintheReinhardtcoreInput:regex,Givenregexpatternrow←start_rowSTACK(𝑖𝑛[𝑥,𝑦,𝑑],𝑜𝑢𝑡[𝑥′,𝑦′,𝑑′])//StackforIN/OUT//𝑥,𝑦,𝑑:cellcoordinateswithitsdirectionpostfix←Regex_to_postfix(regex)foreachCharactercinpostfixdoswitchcdocase‘Literal’dosetInput(row,c);ifcisEndofSubstringthenPUSH([0,row,‘R’],[0,row,‘R’]);row←row+1;case‘Unary_metachar’do[in1,out1]←POP();[in’,out’]←setTemplate(c,[in1,out1]);PUSH([in’,out’]);case‘Binary_metachar’do[in2,out2]←POP();[in1,out1]←POP();[in’,out’]←setTemplate(c,[in1,out1],[in2,out2]);PUSH([in’,out’]);[in1,out1]←POP()setESignal(in1)setAcceptSignal(out1)toThompson’salgorithm.Thesubexpressionisclassifiedassub-stringsandmetacharacters,andeachsubexpressionistemplatized,representingtheirpartialNFAstructuresbyacombinationofthecellsasdescribedinTable2.ConnectingthetemplatesbuildsupthemoreextensiveNFAlogicrecursivelyinthecore.Algorithm1describesthisoperation.ItfirsttakesthenumberofastartrowinthecoretoplaceageneratedNFAandatargetregexpatterntodeployandinitializesastackthatstorestheinput/outputcoordinateanditsdirection(i.e.,Top-Bottom-Left-Right)forthelastgeneratedpartialNFA(s)sofar.Then,thegivenregexpatternisconvertedtothepostfixformtoreflecttheprecedenceinwhichthepartialNFAsaregeneratedandparsedbyreadingthepostfixse-quentially.1)Thesubstringsareplacedintheinputcelloneachrow,andwheneverinputofonesubstringiscompleted,onesubstringisconsideredasonesmallNFAsothattheinput/outputcoordinatesofitsinputcellarestoredinthestack(Inhere,theI/Oportoftheinputcellisalwaystherightside,sothedirectionsarefixedatR).2)abεεεεcdεX{1,3}[0-9]εε(a: Initial)(b: ‘(ab|cd)+’)(c: ‘X’)(d: ‘{1,3}’)(e: ‘[0-9]*’)(f: Final)ε(a)NFAStateDiagramfor‘(ab|cd)+X{1,3}[0-9]*’(a)(b)(e)(f)(c)(d)abXcd[0-9]1 ≤ n ≤ 3(b)NFAontheReinhardtcoreFigure5:DeploymentofRegexPatterntoReinhardtThemetacharacterreadsthecoordinatesoftherecentlygeneratedpartialNFAsfromthestackbythenumberofrequiredoperandsandsynthesizestheoperandNFA(s)intoabiggerNFAwiththemetacharactertemplate.Then,theinput/outputcoordinatesofthebiggerNFAarestoredasthenewpartialNFA.Asthisoperationisrecursivelyperformed,theentireNFAiscompletedbyconnectingthe𝜖andacceptsignalstothelaststackedNFA.Finally,thisresultistransferredandstoredtothehardwarememory.3.3PatternDeploymentBreakdownFigure5showsthedeployedReinhardtlogicforregex‘(ab|cd)+X{1,3}[0-9]*’onthe4×4ReinhardtcorefromAlgorithm1(SeeAppendixAforthedetailedsteps).Comparingitsstatediagramtotheconfiguredlogic(Figure5aand5b),theedgesofthestatediagramarerepresentedbythelogiccellsinthesameshape,andthecharacterschainedinlineararerepresentedbytheinputcells.Eachsubexpressionismappedonetoone,resultingintheReinhardtcoreconsequentlyimplementingtheequivalentstatemachine;startingfromthe𝜖-signalof(a)inFigure5b,thestateoftheobservationstringistransitionedthrougheachsectionuntil(f).Thisaccept-signalnotesthattheobservationstringmatchestheregexpatternandthatitisaccepted.Conversely,removingapatternisdonesimplybyinitializingtheinvolvedcells.Newpatternscanusetheinitializedspaces;themodificationofadeployedpatternismadebygeneratingnewlogicforthemodifiedpatternfromthealgorithm,releasingthepreviouslogicplacingthenewlogicatthatplace.Here,WenotethatthesizeoftheReinhardtcoreinthisexampleisonly4×4withoneregexpattern,butitisonlyscaleddownforclearunderstanding.Theactualcoresizeislargerandcanrepresentamorecomplexandmorenumberofregex.Generally,asthewidth𝑤ofthecoreincreases,moremetacharacterscanberepresented(i.e.,amorecomplexregexpattern),andastheheightofthecoreℎincreases,moreregexpatternscanbeexpressedandmatchedsimultaneously.ThesizeofthecoreiscloselyrelatedtoavailableFPGAresource,andthedetailsarecoveredin§5.Reinhardt:Real-timeReconfigurableHardwareArchitectureforRegularExpressionMatchinginDPIACSAC’21,December6–10,2021,VirtualEvent,USANFAsnippetLogicTemplateNFAsnippetLogictemplate[0-9]A{m,n}/A{m}/A{m,}0 ~ 9[0,9](Matchtomin/maxrange)Am ≤ A ≤ nAm ≤ A ≤ n(Withacounter)^A[^a-z]beginAAbegin(With‘begin’flag)nota ~ z[a,z]not(With‘not’flag)A$A*lastAAlast(With‘last’flag)AAA+A?AAAAA|B(AB)(CD)ABABABABABCDABCDTable2:TemplatesforRegexPatterntoReinhardtLogicAlgorithm1:RegexPatterntoReinhardtCellLogicInput:start_row,StartrowintheReinhardtcoreInput:regex,Givenregexpatternrow←start_rowSTACK(𝑖𝑛[𝑥,𝑦,𝑑],𝑜𝑢𝑡[𝑥′,𝑦′,𝑑′])//StackforIN/OUT//𝑥,𝑦,𝑑:cellcoordinateswithitsdirectionpostfix←Regex_to_postfix(regex)foreachCharactercinpostfixdoswitchcdocase‘Literal’dosetInput(row,c);ifcisEndofSubstringthenPUSH([0,row,‘R’],[0,row,‘R’]);row←row+1;case‘Unary_metachar’do[in1,out1]←POP();[in’,out’]←setTemplate(c,[in1,out1]);PUSH([in’,out’]);case‘Binary_metachar’do[in2,out2]←POP();[in1,out1]←POP();[in’,out’]←setTemplate(c,[in1,out1],[in2,out2]);PUSH([in’,out’]);[in1,out1]←POP()setESignal(in1)setAcceptSignal(out1)toThompson’salgorithm.Thesubexpressionisclassifiedassub-stringsandmetacharacters,andeachsubexpressionistemplatized,representingtheirpartialNFAstructuresbyacombinationofthecellsasdescribedinTable2.ConnectingthetemplatesbuildsupthemoreextensiveNFAlogicrecursivelyinthecore.Algorithm1describesthisoperation.ItfirsttakesthenumberofastartrowinthecoretoplaceageneratedNFAandatargetregexpatterntodeployandinitializesastackthatstorestheinput/outputcoordinateanditsdirection(i.e.,Top-Bottom-Left-Right)forthelastgeneratedpartialNFA(s)sofar.Then,thegivenregexpatternisconvertedtothepostfixformtoreflecttheprecedenceinwhichthepartialNFAsaregeneratedandparsedbyreadingthepostfixse-quentially.1)Thesubstringsareplacedintheinputcelloneachrow,andwheneverinputofonesubstringiscompleted,onesubstringisconsideredasonesmallNFAsothattheinput/outputcoordinatesofitsinputcellarestoredinthestack(Inhere,theI/Oportoftheinputcellisalwaystherightside,sothedirectionsarefixedatR).2)abεεεεcdεX{1,3}[0-9]εε(a: Initial)(b: ‘(ab|cd)+’)(c: ‘X’)(d: ‘{1,3}’)(e: ‘[0-9]*’)(f: Final)ε(a)NFAStateDiagramfor‘(ab|cd)+X{1,3}[0-9]*’(a)(b)(e)(f)(c)(d)abXcd[0-9]1 ≤ n ≤ 3(b)NFAontheReinhardtcoreFigure5:DeploymentofRegexPatterntoReinhardtThemetacharacterreadsthecoordinatesoftherecentlygeneratedpartialNFAsfromthestackbythenumberofrequiredoperandsandsynthesizestheoperandNFA(s)intoabiggerNFAwiththemetacharactertemplate.Then,theinput/outputcoordinatesofthebiggerNFAarestoredasthenewpartialNFA.Asthisoperationisrecursivelyperformed,theentireNFAiscompletedbyconnectingthe𝜖andacceptsignalstothelaststackedNFA.Finally,thisresultistransferredandstoredtothehardwarememory.3.3PatternDeploymentBreakdownFigure5showsthedeployedReinhardtlogicforregex‘(ab|cd)+X{1,3}[0-9]*’onthe4×4ReinhardtcorefromAlgorithm1(SeeAppendixAforthedetailedsteps).Comparingitsstatediagramtotheconfiguredlogic(Figure5aand5b),theedgesofthestatediagramarerepresentedbythelogiccellsinthesameshape,andthecharacterschainedinlineararerepresentedbytheinputcells.Eachsubexpressionismappedonetoone,resultingintheReinhardtcoreconsequentlyimplementingtheequivalentstatemachine;startingfromthe𝜖-signalof(a)inFigure5b,thestateoftheobservationstringistransitionedthrougheachsectionuntil(f).Thisaccept-signalnotesthattheobservationstringmatchestheregexpatternandthatitisaccepted.Conversely,removingapatternisdonesimplybyinitializingtheinvolvedcells.Newpatternscanusetheinitializedspaces;themodificationofadeployedpatternismadebygeneratingnewlogicforthemodifiedpatternfromthealgorithm,releasingthepreviouslogicplacingthenewlogicatthatplace.Here,WenotethatthesizeoftheReinhardtcoreinthisexampleisonly4×4withoneregexpattern,butitisonlyscaleddownforclearunderstanding.Theactualcoresizeislargerandcanrepresentamorecomplexandmorenumberofregex.Generally,asthewidth𝑤ofthecoreincreases,moremetacharacterscanberepresented(i.e.,amorecomplexregexpattern),andastheheightofthecoreℎincreases,moreregexpatternscanbeexpressedandmatchedsimultaneously.ThesizeofthecoreiscloselyrelatedtoavailableFPGAresource,andthedetailsarecoveredin§5.abεεεεcdεX{1,3}[0-9]εε(a: Initial)(b: ‘(ab|cd)+’)(c: ‘X’)(d: ‘{1,3}’)(e: ‘[0-9]*’)(f: Final)ε(a)(b)(e)(f)(c)(d)abXcd[0-9]1 ≤ n ≤ 3624ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Taejune Park, Jaehyun Nam, Seung Ho Na, Jaewoong Chung, and Seungwon Shin
contains the row number and active memory ID of the core to
indicate which pattern is matched. The received notification is
delivered to applications that register the event handler at the event
listener to follow up on the received matching result. For example,
we can implement an automated system that blocks malicious IP
addresses from matching results.
Datapath configuration: The host configures the Reinhardt
datapath through two APIs mainly, 1) setCell(ID, x, y, args), which
configures each cell, and 2) setFetch(ID1, ID2), which specifies mem-
ory IDs used for matching; 1) setCell() takes the memory ID to store
this cell configuration, cell coordinate, and argument to designate a
cell instruction. If a ‘x’ is set to zero indicating the input cells, its
argument needs a target substring of regex, otherwise the argument
needs signal directions, e.g., ‘t→b’ meaning a signal from the top is
forwarded to the bottom. Reinhardt logic derived from Algorithm 1
is also deployed into the Reinhardt datapath by repeatedly calling
this setCell() for each cell. 2) setFetch() takes preceding ID and fol-
lowing ID for resubmitting, e.g., if ID 10 should be performed after
ID 5, set as setFetch(5, 10). There are also constant IDs to denote
first/last rounds, ‘INIT’ and ‘LAST’, e.g., setFetch(INIT, 5) means
the memory that is fetched first when matching starts is 5, and
setFetch(10, LAST) means ID 10 is the last one for the matching.
4 IMPLEMENTATION
To validate Reinhardt’s design, we implemented a prototype using
NetFPGA-SUME, an FPGA-based PCI Express board with Xilinx
Virtex-7 XC7V690T and four SFP+ 10 Gbps interfaces [52, 85], and
it processes packets in chunks of 256-bit at 160 MHz. We also im-
plemented a device driver based on the NetFPGA-SUME reference
driver [53] to handle the prototype with the APIs.
In terms of the Reinhardt core configuration, there are four con-
straints to determine the core size: 1) the number of input queues
n which is related to the overall throughput, 2) the core width w
which determines the complexity of regex patterns, 3) the core
height h which indicates the capacity of regex patterns, and 4)
the length of input cells m which specifies the maximum length
of substrings in regex patterns. While the higher number shows
better performance and capacity, we need to carefully determine
the constraints of the Reinhardt core within the limited hardware
resource. To set the constraints, we collected 2,735 regexes from
Snort 2.9.7 default (648), Snort 2.9 (645) and 3.0 (524) community,
and Suricata 4.1.2 default (918) rulesets, and draw the constraints
that can express 90% of regex forms and accommodate as many pat-
terns as possible with Reinhardt. Please note that these constraints
are statistically specified values to represent generic patterns, and
they can vary depending on requirements.
Core width: The width of the core (w) determines how many
metacharacters in a single regex pattern Reinhardt can support.
Thus, we examine the number of metacharacters in all of the given
regex patterns, and Figure 7a shows its frequency distribution in
the regex patterns. From the result, when w = 24, Reinhardt can
cover 90% of regex patterns regardless of the ruleset choice.
Length of input cells: The length of the input cell (m) specifies
the maximum length of a substring in a single regex pattern. If the
defined length is insufficient to cover each substring, the substrings
are concatenated into multiple cells, wasting the core space. To find
Figure 6: Reinhardt datapath components and resubmitting
3.4 Memory and Input queue
Memory: The memory manages cell configurations and their state
transitions of the core. By exploiting dynamic updatability, Rein-
hardt can store multiple Reinhardt logic for the core (i.e., cell con-
figurations) into the memory with an ID and fetch one of them to
the core instantly, enabling seamless updates. Instead of modifying
the logic on the core directly (certainly, it is also allowed), new
Reinhardt logic for new patterns is first stored into the memory
and swapped entirely with the currently active logic in the core.
It ensures full availability of zero delays in updating and allows
regex patterns to be provided by switching them per group (i.e.,
different IDs on the memory) for each observation string, e.g., regex
for HTTP or regex for malware.
Multiple queues and cores: To process an observation string
with NFA of Reinhardt logic, each character in the string has to be
sequentially entered in Reinhardt. However, this procedure delays
the next observation strings until the observation string currently
being processed is finished, causing the throughput degradation.
To improve the throughput, as seen in Figure 6, we design the input
queue to n multiple queues and the Reinhardt core to be also multi-
layered, mapping one to one to each queue. Therefore, multiple
packets can be processed concurrently, and the throughput can
increase as much as the number of the queues and cores n increases.
However, as more queues and cores proportionally require more
FPGA resource in implementation, it is important to find the optimal
number n. It is covered in Evaluation (§5).
By combining the two features of the memory fetching and
multiple queueing, Reinhardt can process an observation string
multiple times with different regex patterns back-to-back [57]. Fig-
ure 6 shows the steps of this resubmitting feature. Step (a) involves
the requesting of a memory ID set to match. Next, the logic from
the memory ID is fetched and deployed onto the Reinhardt core (b),
and (c) shows the actual match of the observation string. The final
step (d) resubmits the observation string into the input queue for
the following pattern of the memory ID, and the process repeats.
This resubmitting allows more regex matching beyond the core size
and establishes a method for hierarchical processing on regex sets.
3.5 Host-FPGA communication
Handling detection: If any matched pattern is found (i.e., a state
transition reaches the accept-signal), the Reinhardt datapath sends a
notification message to the event listener in the host. The message
Input QueuePacket 0Packet 1Packet n…Reinhardt Memory21……(d) Resubmit(a) Request(b) Fetch(c) Match625Reinhardt: Real-time Reconfigurable Hardware Architecture for Regular Expression Matching in DPI
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
(b) Sub-string length
(a) Metacharacters
Figure 7: Frequency statistics of regex patterns
(a) Throughput
(b) Latency (RTT)
Figure 9: Performance degradations due to resubmitting
(a) Throughput
(b) Latency (RTT)
Figure 8: Performance variations by number of queues n
an optimal length, we examine the distribution of the lengths of
substrings in the given regex patterns. As shown in Figure 7b, 90%
of the substrings have up to 9 characters, i.e., m = 9.
Core height and the number of queues: While the constraints
mentioned above are determined based on the given regex patterns,
the height of the Reinhardt core h and the number of queues n are
dependent on how many resources in FPGA (i.e., LUTs) are utilized.
As a result, we implement four Reinhardt datapaths with dif-
ferent core size as 24×160×8, 24×300×4, 24×665×2 and 24×1580×1
(Width w × Height h× Queues n) with m = 9 with about 90% of the
resources in NetFPGA-SUME. We will address which combination
leads to the optimal performance of Reinhardt in the evaluations.
5 EVALUATION
5.1 Performance Measurement
We measure the throughput and latency variations of Reinhardt to
see how many queues are required to get the line-rate performance
(i.e., 10 Gbps) and to see the performance degradations due to
resubmissions. For this, we use three machines with an Intel Xeon
E5-2630 CPU, 64 GB, and Intel X520 10GbE NICs. We install a
NetFPGA-SUME FPGA board on one of them, and the other two are
used as a packet generator and its receiver using Intel DPDK-Pktgen
[35] and nping [55] for throughput and latency measurements,
respectively. As criteria, we also measure the performance of a
direct connection between the hosts without Reinhardt.
Performance by number of queues: Figure 8a shows the
throughput variations of Reinhardt under the different number
of queues. The throughput with a single queue is from 1.68 to 1.28