void write_to_thread_log (const char* message) 
{ 
FILE* thread_log = (FILE*) pthread_getspecific (thread_log_key); 
fprintf (thread_log, “%s\n”, message); 
} 
/* 将日志文件指针 THREAD_LOG 关闭。*/ 
void close_thread_log (void* thread_log) 
www.AdvancedLinuxProgramming.com 
60
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
{ 
fclose ((FILE*) thread_log); 
} 
void* thread_function (void* args) 
{ 
char thread_log_filename[20]; 
FILE* thread_log; 
/* 生成当前线程使用的日志文件名。*/ 
sprintf (thread_log_filename, “thread%d.log”, (int) pthread_self ()); 
/* 打开日志文件。*/ 
thread_log = fopen (thread_log_filename, “w”); 
/* 将文件指针保存在 thread_log_key 标识的 TSD 中。*/ 
pthread_setspecific (thread_log_key, thread_log); 
write_to_thread_log (“Thread starting.”); 
/* 在这里完成线程任务……*/ 
return NULL; 
} 
int main () 
{ 
int i; 
pthread_t threads[5]; 
/* 创建一个键值，用于将线程日志文件指针保存在 TSD 中。 
调用 close_thread_log 以关闭这些文件指针。*/ 
pthread_key_create (&thread_log_key, close_thread_log); 
/* 创建线程以完成任务。*/ 
for (i = 0; i  
#include  
/* 分配临时缓冲区。*/ 
void* allocate_buffer (size_t size) 
{ 
return malloc (size); 
} 
/* 释放临时缓冲区。*/ 
void deallocate_buffer (void* buffer) 
{ 
free (buffer); 
} 
void do_some_work () 
{ 
/* 分配临时缓冲区。*/ 
void* temp_buffer = allocate_buffer (1024); 
/* 为缓冲区注册清理句柄以确保当线程退出或被取消的时候自动释放。*/ 
pthread_cleanup_push (deallocate_buffer, temp_buffer); 
www.AdvancedLinuxProgramming.com 
62
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
/* 在这里完成一些任务，其中可能出现对 pthread_exit 的调用， 
线程也可能在此期间被取消。*/ 
/* 取消对清理句柄的注册。因为我们传递了一个非零值作为参数， 
清理句柄 deallocate_buffer 将被调用以释放缓存。*/ 
pthread_cleanup_pop (1); 
} 
4.3.2 C++中的线程清理方法 
C++程序员习惯于通过将清理代码包装在对象析构函数中以获得“免费”的资源清理（译
者注：C++重要设计原则 RAII，Resource Acquisition is Initialization 即是如此）。当由于当前
块的结束或者由于 C++异常的抛出导致对象的生命期结束的时候，C++确保自动对象的析构
函数（如果存在）会被自动调用。这对确保无论代码块如何结束均能调用清理代码块有很大
的帮助。 
但是，如果一个线程运行中调用了 pthread_exit，C++并不能保证线程的栈上所有自动对
象的析构函数将被调用。不过可以通过一个很聪明的方法来获得这个保证：通过抛出一个特
别设计的异常，然后在顶层的栈框架内再调用 pthread_exit 退出线程。 
列表 4.9 中的程序展示了这种技巧。通过利用这个技巧，函数通过抛出一个
ThreadExitException 异常而不是直接调用 pthread_exit 来尝试退出线程。因为这个程序在顶
层栈框架内被捕捉，当程序捕捉到异常的时候，所有在栈上分配的自动对象均已被销毁。 
代码列表 4.9 （cxx-exit.cpp）利用 C++异常，安全退出线程 
#include  
class ThreadExitException 
{ 
public: 
/* 创建一个通过异常进行通知的线程退出方式。RETURN_VALUE 为线程返回值。*/ 
ThreadExitException (void* return_value) 
: thread_return_value_ (return_value) 
{ 
} 
/* 实际退出线程。返回值由构造函数中指定。*/ 
void* DoThreadExit () 
{ 
pthread_exit (thread_return_value_); 
} 
www.AdvancedLinuxProgramming.com 
63
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
private: 
/* 结束线程时将使用的返回值。*/ 
void* thread_return_value_; 
}; 
void do_some_work () 
{ 
while (1) { 
/* Do some useful things here... */ 
if (should_exit_thread_immediately ()) 
throw ThreadExitException (/* thread’s return value = */ NULL); 
} 
} 
void* thread_function (void*) 
{ 
try { 
do_some_work (); 
} 
catch (ThreadExitException ex) { 
/* Some function indicated that we should exit the thread. */ 
ex.DoThreadExit (); 
} 
return NULL; 
} 
4.4 同步和临界代码段 
使用线程编程可能需要非常高的技巧，因为多线程程序大多也是并行程序。在这种情况
下程序员无从确认系统调度两个线程所采用的特定顺序。有时可能某个线程会连续运行很长
时间，但系统也可能在几个线程之间飞快地来回切换。在一个多处理器系统中，几个线程可
能如“并行”字面所示，在不同处理器上同时运行。 
调试多线程程序可能很困难，因为你可能无法轻易重现导致 bug 出现的情况。可能你某
一次运行程序的时候一切正常，而下一次运行的时候却发现程序崩溃。没有办法让系统完全
按照完全相同的次序调度这些线程。 
导致多线程程序出现 bug 的最根本原因是不同线程访问相同的数据。如前所示例，这是
线程最强大的一个特征，但同时也是一个非常危险的特征。如果当一个线程正在更新一个数
据的过程中另外一个线程访问同一个数据，很可能导致混乱的出现。很多有 bug 的多线程程
序中包含一些代码要求某个线程比另外的线程更经常——或更快——被调用才能正常工作。
这种 bug 被称为“竞争状态”；不同线程在更新一个数据结构的过程中出现相互竞争。 
www.AdvancedLinuxProgramming.com 
64
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
4.4.1 竞争状态 
假设你的程序利用一些线程并行处理一个队列中的任务。这个队列用一个 struct job 对
象组成的链表来表示。 
每当一个线程结束操作，它都将检查队列中是否有等待处理的任务。如果 job_queue
不为空，这个线程将从链表中移除第一个对象，然后把 job_queue 指向链表中的下一个对象。 
处理任务的线程函数差不多看起来像是列表 4.10 中的样子。 
代码列表 4.10 (job-queue1.c) 从队列中删除任务的线程函数 
#include  
struct job { 
  /* 用于连接链表的域 */ 
  struct job* next; 
  /* 其它的域，用于描述需要处理的任务 */ 
}; 
/* 一个链表的等待任务 */ 
struct job* job_queue; 
void* thread_function (void* arg) 
{ 
  while (job_queue != NULL) { 
    /* 获取下一个任务 */ 
    struct job* next+job = job_queue; 
    /* 从列表中删除这个任务 */ 
    job_queue = jhob_queue->next; 
    /* 进行处理 */ 
    process_job (next_job); 
    /* 清理 */ 
    free (next_job); 
  } 
  return NULL; 
} 
现在假设有两个线程几乎同时完成了处理工作，但队列中只剩下一个队列。第一个线程