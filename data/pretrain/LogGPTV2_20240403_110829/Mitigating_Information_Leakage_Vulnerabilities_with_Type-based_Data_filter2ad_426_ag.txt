### Pointer Detection

During the implementation of TDI (Temporal Defense Instruction), we observed that in real-world programs, neither the types in the LLVM IR nor the types in the source code accurately reflect whether a value is used as a pointer. Therefore, TDI requires a robust pointer detection mechanism to ensure that all pointer dereferences are properly masked and that no integers are inadvertently corrupted by pointer masking. The high-level design of our pointer detection system is described in Section IV-B. For transparency and reproducibility, we provide detailed information here.

Our pointer detection classifies each value in the LLVM IR into one of four categories: pointers, offsets, negated pointers, and non-pointers. Additionally, during the analysis, values can be classified as unknown or invalid. Initially, all values are considered to be in the unknown category. Our analysis proceeds in four steps, each followed by forward and backward propagation, to mark unknown-class values based on their usage, starting with the usages that provide the highest confidence about (non)pointer status.

#### 1. Marking

We perform marking in four steps:
1. **Dereferenced Variables**: We first mark variables that are dereferenced in load and store instructions, which must therefore be pointers.
2. **Function Arguments and Return Values**: We mark function arguments and return values based on the types specified in the relevant function prototypes.
3. **Loaded/Stored Values**: We then mark values that are loaded or stored based on the type of the pointer used.
4. **Remaining Unknown Values**: Finally, we mark any remaining unknown values based on their LLVM IR type.

After each marking step, we propagate pointer types both forward and backward. If a value is used both as a pointer and a non-pointer, we classify it as a pointer.

#### 2. Propagation

We propagate pointer types through arithmetic operations. Pointers that are used in shifts, divisions, and multiplications are considered transformed beyond use, and we mark them as non-pointers. We also perform additional analysis on specific arithmetic operations and GEP (GetElementPtr) instructions to refine the classification.

### Performance Evaluation

The following figures and tables provide an overview of the runtime overhead for various benchmarks when using TDI with different configurations.

#### Figure 10
**CPU2006 Runtime Overhead vs SLH**
- Benchmarks: perlbench, bzip2, gcc, mcf, milc, namd, gobmk, dealII, soplex, povray, hmmer, sjeng, libquantum, h264ref, lbm, omnetpp, astar, sphinx3, xalancbmk
- Overhead Range: 0% to 180%
- Note: xalancbmk has an overhead of 405%.

#### Figure 11
**CPU2006 Runtime Overhead with Alternative Configurations**
- Benchmarks: Same as above
- Configurations: No stores, No dominator analysis, Full protection
- Overhead Range: 0% to 45%

#### Figure 12
**CPU2006 Runtime Overhead with Instrumented musl/libc++**
- Benchmarks: Same as above
- Overhead Range: 0% to 50%

#### Figure 13
**CPU2017 Runtime Overhead with Instrumented musl/libc++**
- Benchmarks: perlbench_s, gcc_s, mcf_s, lbm_s, omnetpp_s, xalancbmk_s, x264_s, deepsjeng_s, imagick_s, leela_s, nab_s, xz_s
- Overhead Range: 0% to 40%

### Appendix E: Arena Statistics

#### Table II: Arena Allocation Statistics for SPEC CPU2000 and CPU2006 Benchmarks (Including musl/libc++)
- **Stack Arenas**: Number of stack arenas allocated at runtime.
- **Heap Call-Site IDs**: Number of unique heap call-site IDs assigned at compile time.
- **Heap Type IDs**: Number of unique heap type IDs assigned at compile time.
- **Heap Arenas**: Number of heap arenas used at runtime, specified as a range where some sub-benchmarks allocate objects in fewer arenas.

| Benchmark | Stack Arenas | Heap Call-Site IDs | Heap Type IDs | Heap Arenas |
|-----------|--------------|--------------------|---------------|-------------|
| 164.gzip  | 36           | 22                 | 9             | 9           |
| 175.vpr   | 45           | 66                 | 33            | 39–70       |
| 176.gcc   | 66           | 251                | 21            | 21          |
| 177.mesa  | 38           | 31                 | 47            | 23          |
| 179.art   | 33           | 19                 | 13            | 10          |
| 181.mcf   | 34           | 18                 | 10            | 7           |
| 183.equake| 35           | 18                 | 12            | 8           |
| 186.crafty| 37           | 20                 | 10            | 8           |
| 188.ammp  | 36           | 19                 | 23            | 15          |
| 197.parser| 68           | 81                 | 8             | 6           |
| 252.eon   | 52           | 148                | 22            | 42          |
| 253.perlbmk| 38           | 21                 | 8             | 60          |
| 254.gap   | 53           | 24                 | 8             | 6           |
| 255.vortex| 36           | 22                 | 10            | 9           |
| 256.bzip2 | 34           | 94                 | 28            | 87          |
| 300.twolf | 59           | 10                 | 98            | 192–198     |
| 400.perlbench| 35           | 17                 | 10            | 7           |
| 401.bzip2 | 110          | 17                 | 17            | 15          |
| 403.gcc   | 34           | 12                 | 12            | 17          |
| 429.mcf   | 39           | 17                 | 17            | 15          |
| 433.milc  | 40           | 20                 | 66            | 135         |
| 444.namd  | 47           | 25                 | 25            | 90–95       |
| 445.gobmk | 116          | 202                | 79            | 98          |
| 447.dealII| 66           | 147                | 30            | 34–50       |
| 450.soplex| 66           | 139                | 25            | 8           |
| 453.povray| 40           | 18                 | 12            | 8           |
| 456.hmmer | 45           | 19                 | 12            | 88          |
| 458.sjeng | 36           | 37                 | 12            | 33          |
| 462.libquantum| 36          | 1200               | 43            | 98          |
| 464.h264ref| 37           | 40                 | 8             | 33          |
| 470.lbm   | 55           | 95                 | 61            | 200         |
| 471.omnetpp| 37           | 1764               | 15            | 98          |
| 473.astar | 40           | 212                | 212           | 200         |
| 482.sphinx3| 40           | 15                 | 47            | 33          |
| 483.xalancbmk| 186          | 6                  | 15            | 33          |

This table provides a comprehensive view of the arena allocation statistics for the specified benchmarks, including the number of stack and heap arenas, heap call-site IDs, and heap type IDs.