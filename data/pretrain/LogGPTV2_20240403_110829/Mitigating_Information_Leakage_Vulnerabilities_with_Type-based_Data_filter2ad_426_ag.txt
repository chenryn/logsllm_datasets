POINTER DETECTION
While implementing TDI, we found that
in real-world
programs, neither the types in the LLVM IR nor even the types
in the source code accurately reﬂect whether a value is used
as a pointer or not. As such, TDI requires pointer detection to
ensure all pointer dereferences are properly masked, and no
integers are corrupted by pointer masking. We describe our
design at a high level in Section IV-B, and include the details
here for transparency and reproducibility.
Our pointer detection classiﬁes each value in the LLVM IR
as one of four groups: pointers, offsets, negated pointers, and
non-pointers. Additionally, during the analysis a value can be
classiﬁed as unknown or invalid. Initially, we consider every
value to be in the unknown class. Our analysis proceeds in four
steps that mark unknown-class values based on their usage,
starting with the usages that provide most conﬁdence about
(non)pointer status. Each step is followed by forward and
backward propagation, marking those values that are used to
compute the newly marked values and those that are computed
from those values.
1) Marking: We perform marking in four steps: (1) We
ﬁrst mark variables dereferenced in loads and stores (which
must therefore be pointers). (2) We mark function arguments
or return values based on types from the relevant function
prototypes. (3) We then mark values which are loaded/stored
based on the type of the pointer used. (4) Finally, we mark any
remaining unknown values based on their (LLVM IR) type.
After each of these marking steps, we propagate pointer
types both backwards and forwards. If we ﬁnd that a value is
used as both a pointer and a non-pointer type, we mark it as
having a pointer type.
2) Propagation: We propagate pointer types through arith-
metic. We consider pointers which are used in shifts, divisions
and multiplications to be transformed beyond use, as with
AND operations discarding the high bits of a pointer, and mark
them as non-pointers. We perform some further analysis on
some speciﬁc arithmetic operations (and GEP instructions, in
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 
161064
perlbench
bzip2
gcc
mcf
milc
namd
gobmk
dealII
soplex
povray
hmmer
sjeng
libquantum
h264ref
lbm
omnetpp
astar
sphinx3
xalancbmk
0% 20% 40% 60% 80% 100% 120% 140% 160% 180%
Fig. 10. CPU2006 runtime overhead vs SLH (xalancbmk is 405%)
perlbench
bzip2
gcc
mcf
milc
namd
gobmk
dealII
soplex
povray
hmmer
sjeng
libquantum
h264ref
lbm
omnetpp
astar
sphinx3
xalancbmk
No stores
No dominator analysis
Full protection
0% 5% 10% 15% 20% 25% 30% 35% 40% 45%
Fig. 11. CPU2006 runtime overhead with alternative conﬁgurations
perlbench
bzip2
gcc
mcf
milc
namd
gobmk
dealII
soplex
povray
hmmer
sjeng
libquantum
h264ref
lbm
omnetpp
astar
sphinx3
xalancbmk
Full protection (w/musl)
0%
10%
20%
30%
40%
50%
Fig. 12. CPU2006 runtime overhead with instrumented musl/libc++
APPENDIX E
ARENA STATISTICS
The number of arenas actually allocated at runtime is the
sum of the stack and heap arenas column in Table II.
SLH
Full protection
perlbench_s
gcc_s
mcf_s
lbm_s
omnetpp_s
xalancbmk_s
x264_s
deepsjeng_s
imagick_s
leela_s
nab_s
xz_s
Full protection (w/musl)
0%
10%
20%
30%
40%
Fig. 13. CPU2017 runtime overhead with instrumented musl/libc++
ARENA ALLOCATION STATISTICS FOR SPEC CPU2000 AND CPU2006
BENCHMARKS (INCL. MUSL/LIBC++).
TABLE II
Benchmark
Stack
arenas
36
164.gzip
45
175.vpr
66
176.gcc
38
177.mesa
33
179.art
34
181.mcf
34
183.equake
35
186.crafty
37
188.ammp
36
197.parser
68
252.eon
52
253.perlbmk
38
254.gap
53
255.vortex
36
256.bzip2
34
300.twolf
59
400.perlbench
35
401.bzip2
110
403.gcc
34
429.mcf
39
433.milc
40
444.namd
47
445.gobmk
116
447.dealII
66
450.soplex
66
453.povray
40
456.hmmer
458.sjeng
36
462.libquantum 36
464.h264ref
37
33
470.lbm
55
471.omnetpp
37
473.astar
40
482.sphinx3
483.xalancbmk
186
1 The number of heap arena IDs used (at least one object allo-
cated) at runtime; this is speciﬁed as a range where some sub-
benchmarks allocate objects in fewer arenas.
Heap call-
site IDs2
22
66
251
31
19
18
18
20
18
19
81
148
21
24
22
94
222
23
414
18
29
35
20
252
202
147
139
18
19
37
20
1200
40
95
1764
Heap
type IDs2
9
33
21
47
13
10
12
10
23
8
30
22
8
8
10
37
28
9
98
10
17
12
17
66
25
79
30
12
12
43
8
61
15
47
212
Heap
arenas1
9
39–70
21
23
10
7
9
8
15
6
42
60
6
9
11
87
69–80
10
192–198
7
15
17
15
135
90–95
98
34–50
8
8
50–53
7
88
33
98
200
2 The number of heap types and/or heap callsites (i.e., untyped)
assigned unique arena IDs at compile time. The total number of
potential heap arena IDs is the sum of these two columns.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:47 UTC from IEEE Xplore.  Restrictions apply. 
171065