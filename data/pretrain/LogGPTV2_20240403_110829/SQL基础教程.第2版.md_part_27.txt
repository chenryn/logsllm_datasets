SELECT *
FROM SampleLike
WHERE strcol LIKE 'abc__';
执行结果
strcol
--------
abcdd
“abcddd”也是以“abc”开头的字符串，但是其中“ddd”是3
个字符，所以不满足_ _所指定的2个字符的条件，因此该字符串并不在
查询结果之中。相反，代码清单6-26中的SQL语句就只能取出“abcddd”
这个结果。
代码清单6-26 查询“abc+任意3个字符”的字符串
SELECT *
FROM SampleLike
WHERE strcol LIKE 'abc___';
执行结果
strcol
--------
abcddd
谓词——范围查询
BETWEEN
KEYWORD 使用BETWEEN可以进行范围查询。该谓词与其他谓词或者函数的不
●BETWEEN谓词
同之处在于它使用了3个参数。例如，从product（商品）表中读取出
●范围查询
销售单价（sale_price）为100日元到1000日元之间的商品时，可
以使用代码清单6-27中的SQL语句。
代码清单6-27 选取销售单价为100～1000日元的商品
SELECT product_name, sale_price
FROM Product
WHERE sale_price BETWEEN 100 AND 1000;
6-2 谓词 203 ●
执行结果
p roduct_name | sale_price
------------+-------------
T恤衫 | 1000
打孔器 | 500
叉子 | 500
擦菜板 | 880
圆珠笔 | 100
KEYWORD BETWEEN的特点就是结果中会包含100和1000这两个临界值。
●（代码清单6-28）。
●>
代码清单6-28 选取出销售单价为101～999日元的商品
SELECT product_name, sale_price
FROM Product
WHERE sale_price > 100
AND sale_price < 1000;
执行结果
p roduct_name | sale_price
------------+-------------
打孔器 | 500
叉子 | 500
擦菜板 | 880
执行结果中不再包含1000日元和100日元的记录。
、 ——判断是否为
IS NULL IS NOT NULL NULL
为了选取出某些值为NULL的列的数据，不能使用=，而只能使用特
KEYWORD 定的谓词IS NULL（代码清单6-29）。
●IS NULL谓词
代码清单6-29 选取出进货单价（purchase_price）为NULL的商品
SELECT product_name, purchase_price
FROM Product
WHERE purchase_price IS NULL;
执行结果
product_name | purchase_price
------------+-------------
叉子 |
圆珠笔 |
● 204 第6章 函数、谓词、CASE表达式
与此相反，想要选取NULL以外的数据时，需要使用IS NOT NULL
KEYWORD （代码清单6-30）。
●IS NOT NULL谓词
代码清单6-30 选取进货单价（purchase_price）不为 的商品
NULL
SELECT product_name, purchase_price
FROM Product
WHERE purchase_price IS NOT NULL;
执行结果
product_name | purchase_price
------------+---------------
T恤衫 | 500
打孔器 | 320
运动T恤 | 2800
菜刀 | 2800
高压锅 | 5000
擦菜板 | 790
谓词—— 的简便用法
IN OR
接下来让我们思考一下如何选取出进货单价（purchase_price）
为320日元、500日元、5000日元的商品。这里使用之前学过的OR的
SQL语句，请参考代码清单6-31。
代码清单6-31 通过OR指定多个进货单价进行查询
SELECT product_name, purchase_price
FROM Product
WHERE purchase_price = 320
OR purchase_price = 500
OR purchase_price = 5000;
执行结果
product_name | purchase_price
------------+---------------
T恤衫 | 500
打孔器 | 320
高压锅 | 5000
虽然上述方法没有问题，但还是存在一点不足之处，那就是随着希望
选取的对象越来越多，SQL语句也会越来越长，阅读起来也会越来越困难。
KEYWORD 这时，我们就可以使用代码清单6-32中的IN谓词“IN(值, )”来
……
●IN谓词
替换上述SQL语句。
6-2 谓词 205 ●
代码清单6-32 通过IN来指定多个进货单价进行查询
SELECT product_name, purchase_price
FROM Product
WHERE purchase_price IN (320, 500, 5000);
反之，希望选取出“进货单价不是320日元、500日元、5000日元”
KEYWORD 的商品时，可以使用否定形式NOT IN来实现（代码清单6-33）。
●NOT IN谓词
代码清单6-33 使用NOT IN进行查询时指定多个排除的进货单价进行查询
SELECT product_name, purchase_price
FROM Product
WHERE purchase_price NOT IN (320, 500, 5000);
执行结果
product_name | purchase_price
------------+---------------
运动T恤 | 2800
菜刀 | 2800
擦菜板 | 790
但需要注意的是，在使用IN和NOT IN时是无法选取出NULL数据的。
实际结果也是如此，上述两组结果中都不包含进货单价为NULL的叉子和圆
珠笔。NULL终究还是需要使用IS NULL和IS NOT NULL来进行判断。
使用子查询作为 谓词的参数
IN
■IN和子查询
IN谓词（NOT IN谓词）具有其他谓词所没有的用法，那就是可以
使用子查询作为其参数。我们已经在5-2节中学习过了，子查询就是SQL
内部生成的表，因此也可以说“能够将表作为IN的参数”。同理，我们
还可以说“能够将视图作为IN的参数”。
为了掌握详细的使用方法，让我们再添加一张新表。之前我们使用的
全都是显示商品库存清单的Product（商品）表，但现实中这些商品可
能只在个别的商店中进行销售。下面我们来创建表6-2 ShopProduct
（商店商品），显示出哪些商店销售哪些商品。
● 206 第6章 函数、谓词、CASE表达式
表6-2 ShopProduct（商店商品）表
shop_id shop_name product_id quantity
（商店） （商店名称）（商品编号） （数量）
000A 东京 0001 30
000A 东京 0002 50
000A 东京 0003 15
000B 名古屋 0002 30
000B 名古屋 0003 120
000B 名古屋 0004 20
000B 名古屋 0006 10
000B 名古屋 0007 40
000C 大阪 0003 20
000C 大阪 0004 50
000C 大阪 0006 90
000C 大阪 0007 70
000D 福冈 0001 100
商店和商品组合成为一条记录。例如，该表显示出东京店销售的商品
有0001（T恤衫）、0002（打孔器）、0003（运动T恤）三种。
创建该表的SQL语句请参考代码清单6-34。
代码清单6-34 创建ShopProduct（商店商品）表的CREATE TABLE语句
CREATE TABLE ShopProduct
(shop_id CHAR(4) NOT NULL,
shop_name VARCHAR(200) NOT NULL,
product_id CHAR(4) NOT NULL,
quantity INTEGER NOT NULL,
PRIMARY KEY (shop_id, product_id));
该CREATE TABLE语句的特点是指定了2列作为主键（primary
key）。这样做当然还是为了区分表中每一行数据，由于单独使用商店编号
（shop_id）或者商品编号（product_id）不能满足要求，因此需要
对商店和商品进行组合。
实际上如果只使用商店编号进行区分，那么指定“000A”作为条件
能够查询出3行数据。而单独使用商品编号进行区分的话，“0001”也会
查询出2行数据，都无法恰当区分每行数据。
6-2 谓词 207 ●
下面让我们来看一下向ShopProduct表中插入数据的INSERT
语句（代码清单6-35）。
代码清单6-35 向ShopProduct表中插入数据的INSERT语句
SQL Server PostgreSQL
BEGIN TRANSACTION; ①
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000A', '东京', '0001', 30);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000A', '东京', '0002', 50);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000A', '东京', '0003', 15);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000B', '名古屋', '0002', 30);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000B', '名古屋', '0003', 120);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000B', '名古屋', '0004', 20);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000B', '名古屋', '0006', 10);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000B', '名古屋', '0007', 40);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000C', '大阪', '0003', 20);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000C', '大阪', '0004', 50);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000C', '大阪', '0006', 90);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000C', '大阪', '0007', 70);
INSERT INTO ShopProduct (shop_id, shop_name, product_id, quantity) VALUES ('000D', '福冈', '0001', 100);
COMMIT;
特定的SQL
不同的DBMS事务处理的语法也不尽相同。代码清单6-35在MySQL中执行时，
需要将①部分更改为“START TRANSACTION;”，在Oracle和DB2中执行时，无需用到
①的部分（请删除）。
详细内容请大家参考4-4节中的“创建事务”。
这样我们就完成了全部准备工作，下面就让我们来看一看在IN谓词
中使用子查询的SQL的写法吧。
首先读取出“大阪店（000C）在售商品（product_id）的销售
单价（sale_price）”。
ShopProduct（商店商品）表中大阪店的在售商品很容易就能找出，
有如下4种。
● 运动T恤（商品编号：0003）
● 菜刀（商品编号：0004）
● 叉子（商品编号：0006）
● 擦菜板（商品编号：0007）
● 208 第6章 函数、谓词、CASE表达式
结果自然也应该是下面这样。
product_name | sale_price
--------------+------------
运动T恤 | 4000
菜刀 | 3000
叉子 | 500
擦菜板 | 880
得到上述结果时，我们应该已经完成了如下两个步骤。
1． 从ShopProduct表中选取出在大阪店（shop_id = '000C'）中销
售的商品（product_id）
2． 从Product表中选取出上一步得到的商品（product_id）的销售单价
（sale_price）
SQL也是如此，同样要分两步来完成。首先，第一步如下所示。
SELECT product_id
FROM ShopProduct
WHERE shop_id = '000C';
因为大阪店的商店编号（shop_id）是“000C”，所以我们可以将
其作为条件写在WHERE子句中A。接下来，我们就可以把上述SELECT
注A
虽然使用“shop_name='大阪'” 语句作为第二步中的条件来使用了。最终得到的SELECT语句请参考代
作为条件可以得到同样的结果，但
是通常情况下，指定数据库中的商 码清单6-36。
店或者商品时，并不会直接使用商
品名称。这是因为与编号比起来，
代码清单6-36 使用子查询作为 的参数
名称更有可能发生改变。 IN
-- 取得“在大阪店销售的商品的销售单价”
SELECT product_name, sale_price
FROM Product
WHERE product_id IN (SELECT product_id
FROM ShopProduct
WHERE shop_id = '000C');
执行结果
product_name | sale_price
--------------+------------
叉子 | 500
运动T恤 | 4000
菜刀 | 3000
擦菜板 | 880
6-2 谓词 209 ●
如第5章的“法则5-6”（5-2节）所述，子查询是从内层开始执行的。
因此，该SELECT语句也是从内层的子查询开始执行，然后像下面这样展开。
-- 子查询展开后的结果
SELECT product_name, sale_price
FROM Product
WHERE product_id IN ('0003', '0004', '0006', '0007');