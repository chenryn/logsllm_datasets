### 5.4 Ranking Over-Permissioned Bot Families

Table 8 presents the protocols and C&C monitoring capabilities identified in the top 10 malware families of our study. The Dinwod malware family ranks the highest with 9,713 over-permissioned bots. Dinwod exclusively uses FTP and has maintained a consistent presence, even in the analysis of capabilities such as Browser Password Stealing (BPS), Victim Profiling (VP), File Exfiltration (FE), and Live Monitoring (LM), averaging 3 capabilities per sample.

Another observation from Table 8 is that FTP is used in 9 out of the top 10 malware families, which is expected given its prominence as an over-permissioned protocol in our dataset. Approximately half of the families in Table 8 maintain a generally consistent number of protocols used, with the exception of Delf, Sivis, and Virut, each using a maximum of 3 protocols. This variability is reflected in the "Evolution of Protocol Use" column.

The top capabilities—File Exfiltration, Live Monitoring, and Victim Profiling—appear in all 10 families. However, we did not anticipate Browser Password Stealing to be present in 9 families, as it accounts for only 1.26% of all C&C monitoring capabilities (refer to Table 7). From this study, we can infer that while the majority of over-permissioned bots can be considered Information Stealers, many of the top malware families are also Password Stealers.

### 5.5 Packed Malware

C3PO employs a hybrid approach to analyze packed malware, as described in Subsection 3.1. Table 9 lists the most common packers encountered in our study, using the packer taxonomy proposed by Ugarte-Pedrero et al. [29]. Column 1 lists the packer types, and Column 3 shows the number of packed malware samples that use the packers listed in Column 2. The packer types range from Type-I to Type-VI, representing their order of complexity [29].

For clarity:
- **Type-I** packers are the easiest to unpack, requiring only a single unpacking routine before transferring control to the malware payload.
- **Type-II** packers use multiple layers of packing, transferring control only after the last layer is complete.
- **Type-III** packers are multi-layered but do not unpack in a top-down manner, instead using a complex layer organization.
- **Type-IV** packers can use single or multi-layers, with the unpacking routine interwoven with the malware payload, switching control back and forth.
- **Type-V** and **Type-VI** are similar to Type-IV, but with increasingly more malware payload code interwoven, increasing the complexity of the unpacking routine.

From Table 9, we see that C3PO can unpack and analyze samples packed with Armadillo (Row 3), indicating its capability to handle the most complex category of packers. Out of the 62,202 over-permissioned bots, C3PO successfully unpacked 10,237 malware samples. The remainder were not packed. In our dataset, C3PO did not encounter any malware packed with Type-II, Type-IV, or Type-V packers. Given its ability to handle Type-VI packers, we believe C3PO is robust enough to support large-scale studies of modern malware.

### 6. C3PO APPLIED

We present two case studies of over-permissioned bots to illustrate the efficacy of our techniques, focusing on the most prevalent FTP over-permissioned protocol. We redact the C&C server information because the servers are still active, but we provide the monitoring outputs adhering to ethical practices, which we describe next.

#### Ethical Considerations

We follow the precedent established in previous works [16], [25], [55], [56] while exposing the weaknesses that make C&C servers vulnerable to infiltration. Burnstein [57] provides guidelines for legal and ethical conduct in cybersecurity research, arguing that injecting traffic into C&C servers can be considered consent when using the communication channel provided by the bot orchestrators. Similarly, we use the bot-to-C&C channel and the authentication details provided through the malware. After verifying access permissions, we:
1. Retrieve only the metadata (e.g., file quantity, table schema) of the service being investigated (FTP, MongoDB, etc.).
2. Perform no write operations.

We emphasize that we do not exploit, disrupt, or attempt to take down C&C servers, thus avoiding any claim of tortious interference as described in Mouton vs. VC3 [58].

#### 6.1 Case Study 1: Steam

The Steam malware is a Remote Access Trojan (RAT) first discovered in 2016 and remains active today. C3PO identified FTP in Steam and extracted IVs and C&C monitoring capabilities (Table 10, Rows 1-3). Leveraging these IVs, C3PO covertly monitored the Steam C&C server, resulting in the identification of approximately 50 MB of data (522 files in 5 directories). Of the files, 27% have "game"-related names like matchroom and tournament, confirming that our sample is tailored for the Steam platform.

C3PO identified Victim Profiling and File Exfiltration capabilities, leading us to expect a large number of files containing stolen victim information. Since this malware is relatively new, it is not surprising that we found less than 20% of these files, but we expect this to grow as the malware spreads. C3PO identified two data files with filenames beginning with "ssfn," which are likely encrypted authorization files for the Steam online gaming platform. These files could either be stolen for authentication to the Steam platform or belong to the bot orchestrator. For the latter, incident responders can use these files to pursue attribution, as they provide access to the bot orchestrator's account.

C3PO also revealed filenames in the Russian language, suggesting the C&C server's likely country of origin. Additionally, C3PO discovered a JavaScript file containing code that looked for cross-site scripting (XSS) vulnerabilities, indicating further malicious intent to perpetrate additional cybercrimes. Our findings are confirmed by a Steam analysis report [59], validating C3PO’s effectiveness in covert monitoring and extracting valuable insights.

#### 6.2 Case Study 2: Detplock

The Detplock malware is another RAT first seen in 2016 and remains active today. This malware allows the bot orchestrator to execute commands on infected machines. Table 11 summarizes C3PO’s covert monitoring results by analyzing the Detplock malware. C3PO extracted IVs such as the username, password, server address, and port, as shown in Table 11, Row 1. Based on the server address suffix ".ko.cr," the C&C server is likely located in South Korea. This C&C server responds to FTP queries, which we used to catalog file metadata, enumerate directories, and keep count of the number of directories and files, along with file extensions and sizes. Overall, we identified approximately 640 MB of data, including over 2,500 files across 47 directories. Of the 31 file extensions found, the most common were PNG (44%), HTML (34%), TXT (8%), and EXE (6%).

C3PO also identified Victim Profiling, Live Monitoring, and File Exfiltration capabilities (Table 11, Row 2). From covert monitoring, C3PO discovered many PNG files, confirming that Detplock performed Live Monitoring by taking PNG screenshots. This confirms the effectiveness of C3PO’s C&C monitoring capabilities. C3PO also located the userData directory, which is used to store victim information, corresponding to the Victim Profiling capability (Table 11, Row 3). While this directory was empty upon infiltration, covert monitoring allows us to regularly monitor for added infected systems to understand the scope of infection and enable peer disclosure.

Lastly, C3PO found malicious files in the C&C server’s download directory, confirming that Detplock spreads other payloads. Specifically, 7 of the 158 Windows EXE and 2 BIN files contained suspicious metadata. Their signatures revealed ASPack v2.12 packing, and a hash search on VirusTotal [60] confirmed their maliciousness. Although the C&C monitoring capabilities did not infer additional payloads on the C&C server, our ability to covertly infiltrate and leverage over-permissioned FTP functionality to quickly query the server revealed at least 9 additional malicious files.

### 7. RELATED WORK

#### C&C Infiltration and Monitoring

Research on C&C monitoring has focused on P2P botnets [11], [61]–[64]. These works are transparent to botnet architectures and inspired our monitoring techniques. Dispatcher [65] analyzes botnet protocols to enable infiltration but does not consider the variety of commodity protocols used in malware. Conversely, C3PO detects and exploits weaknesses in several widely used protocols, enabling a scalable approach to covert C&C monitoring. Similar works have achieved infiltration of botnets leading to their disruption [66], validating the necessity of not only monitoring but also the immediate benefits of covert infiltration. Although successful, this attempt targeted weaknesses specific to the MegaD botnet and used "Google hacking" for information gathering. Domain seizure approaches provide another relevant avenue by taking over the botnet [1], [3]–[6], [17], but these require detailed reverse engineering efforts to understand domain generating algorithms. Instead, C3PO analyzes the malware alone, extracting hidden information to enable infiltration towards covert monitoring.

#### Protocol Identification

Several works infer protocol formats based on network traces [67]–[70] or after understanding how the binary processes network messages [65], [71]–[73]. However, these approaches rely on capturing all protocol functionality, which can limit effectiveness when full network traces are not captured. Conversely, protocol identification is one of the multiple enabling techniques employed by C3PO towards providing authorities with leverage over C&C servers through covert monitoring. C3PO uses binary analysis to identify protocols based on their APIs, commands, or keywords, which is more scalable when full network traces cannot be collected (e.g., with defensive malware). Unlike prior works, solely identifying protocols is orthogonal to enabling authorities to take action against malicious campaigns, which C3PO facilitates.

#### Selective Symbolic Execution

Symbolic Execution is used to find software bugs [74]–[76], generate test cases [77]–[79], and improve the execution of dynamic analysis [80]–[82]. Specifically, MalMax [82], X-Force [80], and J-Force [81] used forced execution for exploration. While MalMax uses backtracking to enable path exploration, J-Force mutates satisfiable branch predicates to explore un-visited paths. Similarly, Smartgen [83] proposed Selective Symbolic Execution for the Android framework using solved path constraints to guide execution. C3PO’s iSSE traversable paths are determined by the backward slice of the execution target, constraining feasible paths and reducing the exploration area to identify IVs.

#### Malware Capability Analysis

Several works use behavior analysis [84]–[86], behavior modeling [87]–[89], and network traffic observation [90], [91] to identify malware. Those that detect malware capabilities [84], [87], [88], [92] are either specific to the Android framework or use dynamic analysis to identify just enough capabilities for malware detection. On the contrary, C3PO introduces a scalable approach to identify 16 malware capabilities and offers the option of extending support for others using capability modeling.

### 8. DISCUSSION AND LIMITATIONS

#### Domain Generating Algorithms

DGA-based malware allows bot orchestrators to move from centralized architectures to more robust architectures using automatically generated pseudo-random C&C domain names [93]. This technique allows over-permissioned bot orchestrators to subvert persistent infiltrations through C3PO since the C&C domain names are dynamically generated. Other malware adopts a similar approach, using cloud-based services to retrieve C&C domain names [94]. These categories of malware pose significant challenges for C3PO. However, they are not insurmountable, as C3PO can complement existing techniques to identify DGA future candidate domains, as demonstrated by Le et al. [6].

#### Subverting Dynamic Memory Image Extraction

C3PO’s primary technique for memory image extraction is API hooking. As an automated pipeline, C3PO is limited in its ability to spoof specific environments for malware but could be combined with techniques such as forced execution to overcome this [80], [81]. Sandboxes can also augment C3PO in lieu of memory image extraction. For example, S2E [75] enables symbolic execution within a sandbox to explore thousands of system paths. Toward unpacking, there are three evasion types to thwart API hooking: stolen code, child process, and process hollowing, often seen in the Themida, PEP, and Pespin packers [28]. Although C3PO can handle Type-I, III, and VI packers, it cannot analyze malware that uses virtualization-packed techniques. These packers convert programs into bytecode, increasing complexity and eluding C3PO memory image extraction. However, virtualization packers account for less than 2% of packed malware, while Type-I packers (e.g., UPX) account for over 55% [29].

#### Custom Low-level Protocol Implementations

Some malware prefers custom protocol implementations to make their analysis more difficult, but the uniqueness of custom protocols supports signature development, increasing their chances of IDS detection. C3PO focuses on protocol implementations that adhere to official protocol specifications. However, since C3PO relies on official APIs and tokens, custom tokens evade C3PO’s identification. Even if we consider well-known (but not official) tokens, since C3PO analyzes the client-side binary alone, it cannot match a custom keyword to a protocol without knowing how the server parses it. While malware authors can use official protocol commands to trick analysts into misidentifying the protocol used, we have not observed this practice during our large-scale study. To support the identification of over-permissioned custom protocols, the integration of tools such as Prospex [73] can be used to automatically reverse engineer custom protocols, revealing identifiers that can be exploited for covert C&C server monitoring. Although extracting relevant information from the protocol and adding them to C3PO’s protocol database requires some upfront effort, maintenance is all that is required afterward, allowing seamless integration into C3PO.

### 9. CONCLUSION

This paper presented C3PO, a measurement pipeline that studied the evolution of over-permissioned protocols in 200k malware spanning 15 years and how they can be leveraged to provide covert C&C server monitoring. C3PO identified 62,202 over-permissioned bots across 8,512 families, identifying infiltration vectors that allow C3PO to spoof bot-to-C&C communication. C3PO also identified 443,905 C&C monitoring capabilities, revealing the composition and contents of the C&C server to guide monitoring post-infiltration. We deployed C3PO on two bots with live C&C servers, validating its ability to identify over-permissioned protocols, infiltrate C&C servers, and leverage C&C monitoring capabilities to achieve covert monitoring. Furthermore, C3PO identified over 2,500 files, some of which contain victim information, additional malicious payloads, exploitation scripts, and stolen credentials, providing legally admissible evidence to engender attempts of botnet disruptions and takedowns. We offer C3PO to aid authorities in containing and eradicating botnets through covert C&C server monitoring: https://cyfi.ece.gatech.edu/.

### ACKNOWLEDGMENT

The authors would like to thank the anonymous reviewers for their constructive comments and feedback. We thank our collaborators at Netskope for their support, insights, and suggestions throughout this research. This work was inspired by our collaboration with Sandia National Laboratories; we particularly thank Tim Loffredo and Shelley Leger for their insights and guidance. This work was supported, in part, by ONR under grants N00014-19-1-2179 and N00014-18-1-2662 and NSF under Awards 1755721 and 1916550. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of our sponsors or collaborators.

### REFERENCES

[1] C. Rossow, D. Andriesse, T. Werner, B. Stone-Gross, D. Plohmann, C. J. Dietrich, and H. Bos, “SoK: P2pwned—Modeling and Evaluating the Resilience of Peer-to-peer Botnets,” in Proceedings of the 34th IEEE Symposium on Security and Privacy (S&P), San Francisco, CA, May 2013, pp. 97–111.

[2] B. Krebs, U.S. Cyber Command behind Trickbot Tricks, [Accessed: 2020-08-22]. [Online]. Available: https://krebsonsecurity.com/2020/10/report-u-s-cyber-command-behind-trickbot-tricks/.

[3] Y. Nadji, M. Antonakakis, R. Perdisci, D. Dagon, and W. Lee, “Beheading Hydras: Performing Effective Botnet Takedowns,” in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), Berlin, Germany, Oct. 2013, pp. 121–132.

[4] R. Wainwright and F. J. Cilluffo, Responding to Cybercrime at Scale: Operation Avalanche—A Case Study. [Online]. Available: http://www.jstor.org/stable/resrep20752.

[5] New Action to Disrupt World’s Largest Online Criminal Network, https://blogs.microsoft.com/on-the-issues/2020/03/10/necurs-botnet-cyber-crime-disrupt/, [Accessed: 2020-03-12].

[6] V. Le Pochat, S. Maroofi, T. Van Goethem, D. Preuveneers, A. Duda, W. Joosen, M. Korczyński, et al., “A Practical Approach for Taking Down Avalanche Botnets Under Real-World Constraints,” in Proceedings of the 2020 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2020.

[7] Avast and French Police Take Over Malware Botnet and Disinfect 850,000 Computers, https://www.zdnet.com/article/avast-and-french-police-take-over-malware-botnet-and-disinfect-850000-computers/, [Accessed: 2020-03-29].