5,095 or 0.01%. Overall, C3PO reveals the composition and content
of C&C servers through C&C monitoring capabilities identification
allowing it to provide targeted monitoring post infiltration.
5.4 Ranking Over-Permissioned Bot Families
Table 8 presents the protocols and the C&C monitoring capabilities
identified in the top 10 malware families of our study. The Dinwod
malware family ranks the highest with 9,713 over-permissioned
bots. Dinwod only uses FTP and has remained consistent, even in
the analysis of capabilities that include Browser Password Steal-
ing (BPS), Victim Profiling (VP), File Exfiltration (FE), and Live
Monitoring (LM), averaging 3 capabilities per sample.
Another observation from Table 8: FTP is used in 9 of the top 10
malware families as expected since it is the most prominent over-
permissioned protocol in our dataset. About half of the families
in Table 8 maintain a generally consistent number of protocols
used, with the exception of Delf, Sivis, and Virut, with 3 maximum
protocols used each, attributing to the spikes in Column Evolution
of Protocol Use.
Lastly, the top capabilities — File Exfiltration, Live Monitoring,
and Victim Profiling — appear in all 10 families. However, we did
not expect Browser Password Stealing in 9 families since it accounts
for 1.26% of all C&C monitoring capabilities (ref. Table 7). From this
study, we can infer that while the majority of over-permissioned
bots can be considered Information Stealers, many of the top mal-
ware families are Password Stealers.
5.5 Packed Malware
C3PO uses a hybrid approach to analyze packed malware (subsec-
tion 3.1). We present the most common packers encountered in
our study in Table 9 and use the packer taxonomy proposed by
Ugarte-Pedrero et al. [29]. Column 1 lists these packer types, and
Column 3 shows the number of packed malware that use the pack-
ers3 presented in Column 2. The packer types range from Type-I
to Type-VI, which also represent their order of complexity [29].
For clarity, Type-I packers are the easiest to unpack only using
a single unpacking routine before transferring control to the mal-
ware payload. Type-II packers use multiple layers of packing, only
transferring control after the last layer is complete. Like Type-II
packers, Type-III is multi-layered but does not unpack in a top-
down manner and instead uses complex layer organization. While
Type-IV packing can use single or multi-layers, the unpacking rou-
tine is interwoven with the malware payload switching control back
and forth. Type-V and Type-VI are quite similar to Type-IV, except
more and more malware payload code is interwoven increasing the
complexity of the unpacking routine.
From Table 9, we see that C3PO can unpack and analyze samples
packed with Armadillo (Row 3), i.e., it can handle the most complex
category of packers. Of the 62,202 over-permissioned bots, C3PO
unpacked 10,237 malware. The remainder of the samples were not
packed. In our dataset, C3PO did not encounter any malware packed
with Type-II, Type-IV, and Type V packers. But given its ability to
handle Type-VI packers, we believe that C3PO is robust enough to
enable a large-scale study of modern malware.
6 C3PO APPLIED
We present two over-permissioned bot case studies to illustrate the
efficacy of our techniques. We focus on the cases that use the most
prevalent FTP over-permissioned protocol. We redact the C&C
server information because the servers are still active as of this
3Packers are identified using PackerID [54]
Table 9: Packers Encountered in our Dataset.
Packer Type [29] Packer
Type-I
Type-III
Type-VI
UPX
BobSoft Mini Delphi
ASPack
ASProtect
Armadillo
Total
# Malware
9,372
86
48
22
709
10,237
Session 12B: Analyzing Crashes and Incidents CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3360writing, but present the monitoring outputs we extracted adhering
to ethical practices, which we describe next.
Ethical Considerations. We follow the precedence established
in previous works [16], [25], [55], [56] while exposing the weak-
nesses that make C&C servers vulnerable to infiltration. Besides,
Burnstein [57] provides legal and ethical conduct for cybersecurity
research, arguing that injecting traffic into C&C servers can be
considered consent when using the communication channel the bot
orchestrators provided to the enslaved systems. Similarly, we use
the bot-to-C&C channel and the authentication details provided
to us through the malware. Moreover, after verifying access per-
missions we (1) only retrieve the metadata (e.g. file quantity, table
schema, etc.) of the service being investigated (FTP, MongoDB, etc.)
and (2) perform no write operations. We emphasize that we do not
exploit, disrupt, or attempt takedown of C&C servers, avoiding any
claim of tortious interference as described in Mouton vs. VC3 [58].
6.1 Case Study 1: Steam
The Steam malware is a Remote Access Trojan (RAT) [59] first
discovered in 2016 and persists today. C3PO identified FTP in Steam
and extracted IVs and C&C monitoring capabilities (Table 10, Rows
1-3). Leveraging the IVs, C3PO covertly monitored the Steam C&C
server resulting in the identification of approximately 50 MB of data
(522 files in 5 directories). Of the files, 27% of them have “game”-
related names like matchroom and tournament confirming that our
sample is indeed tailored for the Steam platform.
C3PO identified Victim Profiling and File Exfiltration, so we ex-
pected to find a large number of files on the C&C server containing
stolen victim information. Since this malware is relatively new, it is
not surprising that we only found less than 20% of these files, but we
expect it to grow as the malware spreads. However, C3PO identified
two data files whose filenames began with ssfn. The authorization
files for the Steam online gaming platform also begin with ssfn.
These files are likely encrypted since their entropy values are 7.90
and 7.92 (on a scale of 0.0 - 8.0), respectively. These authorization
files could either be stolen files for authentication to the Steam
platform (as suggested by C3PO’s File Exfiltration C&C monitoring
capabilities), or they belong to the bot orchestrator. For the latter
case, an incident responder can use these files to pursue attribution
since it provides access to the bot orchestrator’s account.
C3PO also revealed filenames that piqued our interest. Specif-
ically, several files are named in the Russian language, the C&C
server’s likely country of origin. Furthermore, C3PO discovered a
JavaScript file containing code that looked for cross-site scripting
Table 10: C3PO’s Steam Malware Analysis Results.
Protocol FTP
Infiltration
Vectors
C&C Monitoring
Capabilities
Covert
Monitoring
Outputs
Username: j91{***}
Password: Dom{***}
Server: {***}.beget.tech
Port: 21
Victim Profiling and
File Exfiltration
(1) Country of origin, (2) Steam Authentication Files
(3) XSS injection script
(XSS) vulnerabilities. This suggests further malicious intent to per-
petrate additional cybercrimes. Our findings are further confirmed
by a Steam analysis report [59] validating C3PO’s effectiveness in
covert monitoring and extracting valuable insights.
6.2 Case Study 2: Detplock
The Detplock malware is another RAT first seen in 2016 and is
still active today. This malware allows the bot orchestrator to ex-
ecute commands on the infected machines. Table 11 summarizes
C3PO’s covert monitoring results by analyzing the DeptLock mal-
ware. C3PO extracted IVs such as the username, password, server
address, and port, as shown in Table 11, Row 1. Based on the sever
address suffix .ko.cr, the C&C server is likely located in South
Korea. This C&C server responds to FTP queries, which we used to
only catalog file metadata, enumerating directories, keeping count
of the number of directories and files as well as file extensions
and file sizes. Overall, we identified approximately 640MB of data
including over 2,500 files across 47 directories. Of the 31 file exten-
sions found, the most common extensions were PNG (44%), HTML
(34%), TXT (8%), and EXE (6%).
C3PO also identified Victim Profiling, Live Monitoring, and File
Exfiltration capabilities (Table 11, Row 2). From covert monitor-
ing, C3PO discovered many PNG files, which was expected since
its analysis showed that Detplock performed Live Monitoring by
taking PNG screenshots. This confirms the effectiveness of C3PO’s
C&C monitoring capabilities towards covert monitoring. C3PO also
located the userData directory which is used to store victim infor-
mation, corresponding to the Victim Profiling malware capability
(Table 11, Row 3). While this directory was empty upon infiltra-
tion, convert monitoring allows us to regularly monitor for added
infected systems to understand the scope of infection and enable
peer disclosure.
Lastly, C3PO found malicious files on the C&C server’s download
directory, confirming that Detplock spreads other payloads. Specifi-
cally, 7 of the 158 Windows EXE and 2 BIN files contained suspicious
metadata. Their signatures revealed ASPack v2.12 packing and their
hash search on VirusTotal [60] confirmed maliciousness. Although
the C&C monitoring capabilities did not infer additional payloads
on the C&C server, our ability to covertly infiltrate and leverage
over-permissioned FTP functionality to quickly query the server
revealed at least additional 9 malicious files.
Table 11: C3PO’s Detplock Malware Analysis Results.
Protocol FTP
Infiltration
Vectors
C&C Monitoring
Capabilities
Covert
Monitoring
Outputs
Username: eg{***}
Password: vrg{***}
Server: {***}.co.kr
Port: 21
Victim Profiling, Live Monitoring,
and File Exfiltration
(1) PNG files confirming the live monitoring capability
(2) 9 malicious executables and binaries
Session 12B: Analyzing Crashes and Incidents CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea33617 RELATED WORK
C&C Infiltration and Monitoring. C&C monitoring research
has focused on P2P botnets [11], [61]–[64]. These works are trans-
parent to botnet architectures and inspired our monitoring tech-
niques. Dispatcher [65] analyzes botnet protocols to enable infiltra-
tion, but it does not consider the plethora of commodity protocols
used in malware. Conversely, C3PO detects and exploits weaknesses
in several widely used protocols, with room for growth, and en-
ables a scalable approach to covert C&C monitoring. Similar works
have also achieved infiltration of botnets that led to their disrup-
tion [66] validating the necessity of not only monitoring, but the
immediate benefits of covert infiltration. Although successful, this
attempt targeted weaknesses specific to the MegaD botnet and also
used "Google hacking" for information gathering. Lastly, domain
seizure approaches provide another relevant avenue to monitoring
by taking over the botnet [1], [3]–[6], [17] but these approaches
required detailed reverse engineering efforts to understand domain
generating algorithms. Instead, C3PO analyzes the malware alone
extracting hidden information to enable infiltration towards covert
monitoring.
Protocol Identification. Several works infer protocol formats
based on network traces [67]–[70] or after first understanding how
the binary processes network messages [65], [71]–[73]. However,
these approaches rely on capturing all protocol functionality, which
can limit the overall effectiveness when full network traces are not
captured. Conversely, protocol identification is only one of the
multiple enabling techniques employed by C3PO towards our goal
of providing authorities with leverage over C&C servers through
covert monitoring. Furthermore, C3PO uses binary analysis to iden-
tify protocols based on their APIs, commands, or keywords that
are invoked in a binary, which is more scalable when full network
traces cannot be collected (e.g., with defensive malware). Differ-
ent from prior works, solely identifying protocols is orthogonal to
enabling authorities to take action against malicious campaigns,
enabled by C3PO.
Selective Symbolic Execution. Symbolic Execution is used to
find software bugs [74]–[76], generate test cases [77]–[79], and
improve the execution of dynamic analysis [80]–[82]. Specifically,
MalMax [82], X-Force[80], and J-Force [81] used forced execution
for exploration. While MalMax uses backtracking to enable path
exploration, J-Force mutates satisfiable branch predicates to ex-
plore un-visited paths. Similarly, Smartgen[83] proposed Selective
Symbolic Execution for the Android framework using solved path
constraints to guide execution. C3PO’s iSSE traversable paths are
not determined by derived inputs, but instead by the backward slice
of the execution target, which constrains feasible paths reducing
the exploration area to identify IVs.
Malware Capability Analysis. Several works use behavior anal-
ysis [84]–[86], behavior modeling [87]–[89], and network traffic ob-
servation [90], [91] to identify malware. Those that detect malware
capabilities [84], [87], [88], [92] are either specific to the Android
framework or use dynamic analysis to identify just enough capa-
bilities for malware detection. On the contrary, C3PO introduces a
scalable approach to identify 16 malware capabilities and offers the
option of extending support for others using capability modeling.
8 DISCUSSION AND LIMITATIONS
Domain Generating Algorithms. DGA-based malware allows
bot orchestrators to move from centralized architectures to more
robust architectures using automatically generated pseudo-random
C&C domain names [93]. This technique allows over-permissioned
bot orchestrators to subvert persistent infiltrations through C3PO
since the C&C domain names are dynamically generated. Other
malware adopts a similar approach, using cloud-based services to
retrieve C&C domain names [94]. These categories of malware pose
significant challenges for C3PO. However, they are not insurmount-
able, as C3PO can be used to complement existing techniques to
identify DGA future candidate domains, as demonstrated by Le et
al. [6].
Subverting Dynamic Memory Image Extraction. C3PO’s pri-
mary technique for memory image extraction is API hooking. As an
automated pipeline, C3PO is limited in its ability to spoof specific
environments for malware but could be combined with techniques
such as forced execution to overcome this [80], [81]. However, sand-
boxes can also be used to augment C3PO in-lieu of memory image
extraction. For example, S2E [75] enables symbolic execution within
a sandbox to explore thousands of system paths. Toward unpacking,
there are three evasion types to thwart API hooking: stolen code,
child process, and process hollowing, often seen in the Themida,
PEP, and Pespin packers [28]. Although C3PO can handle Type-I,
III, and IV packers, it cannot analyze malware that uses virtual-
ization packed techniques. These packers convert programs into
bytecode increasing complexity and eludes C3PO memory image
extraction. However, virtualization packers account for less than
2% of packed malware, while Type-I packers (e.g., UPX) account
for over 55% [29].
Custom Low-level Protocol Implementations. Some malware
prefer custom protocol implementations to make their analysis
more difficult, but the uniqueness of custom protocols supports
signature development increasing their chances of IDS detection.
So, C3PO focuses on protocol implementations that adhere to offi-
cial protocol specifications. However, since C3PO relies on official
APIs and tokens, custom tokens evade C3PO’s identification. Even
if we consider well-known (but not official) tokens, since C3PO
analyzes the client-side binary alone, it cannot match a custom
keyword to a protocol without knowing how the server parses it.
While malware authors can use official protocol commands to trick
analysts in misidentifying the protocol used, we have not observed
this practice during our large-scale study. In order to support the
identification of over-permissioned custom protocols, the integra-
tion of tools such as Prospex [73] can be used to automatically
reverse engineer custom protocols revealing identifiers that can be
exploited for covert C&C server monitoring. Although extracting
relevant information from the protocol, then adding them to C3PO’s
protocol database requires some effort upfront, maintenance is all
that is required after allowing seamless integration into C3PO.
9 CONCLUSION
This paper presented C3PO, a measurement pipeline that studied
the evolution of over-permissioned protocols in 200k malware span-
ning back 15 years and how they can be leveraged to provide covert
C&C server monitoring. C3PO identified 62,202 over-permissioned
Session 12B: Analyzing Crashes and Incidents CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3362bots across 8,512 families identifying infiltration vectors that allow
C3PO to spoof bot-to-C&C communication. C3PO also identified
443,905 C&C monitoring capabilities which reveal the composition
and contents of the C&C server to guide monitoring post infiltration.
We deployed C3PO on two bots with live C&C servers validating
its ability to identify over-permissioned protocols, infiltrate C&C
servers, and leverage C&C monitoring capabilities to achieve covert
monitoring. Furthermore, C3PO identified over 2500 files, some of
which contain victim information, additional malicious payloads,
exploitation scripts, and stolen credentials providing legally ad-
missible evidence to engender attempts of botnet disruptions and
takedowns. We offer C3PO to aid the authorities as they seek to con-
tain and eradicate botnets through covert C&C server monitoring:
https://cyfi.ece.gatech.edu/.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers for their
constructive comments and feedback. We thank our collaborators
at Netskope for their support, insights, and suggestions throughout
this research. This work was inspired by our collaboration with
Sandia National Laboratories; we particularly thank Tim Loffredo
and Shelley Leger for their insights and guidance. This work was
supported, in part, by ONR under grants N00014-19-1-2179 and
N00014-18-1-2662 and NSF under Awards 1755721 and 1916550.
Any opinions, findings, and conclusions in this paper are those of
the authors and do not necessarily reflect the views of our sponsors
or collaborators.
REFERENCES
[1]
C. Rossow, D. Andriesse, T. Werner, B. Stone-Gross, D. Plohmann, C. J. Dietrich,
and H. Bos, “SoK: P2pwned-modeling and Evaluating the Resilience of Peer-
to-peer Botnets,” in Proceedings of the 34th IEEE Symposium on Security and
Privacy (S&P), San Francisco, CA, May 2013, pp. 97–111.
B. Krebs, U.s. cyber command behind trickbot tricks, [Accessed: 2020-08-22].
[Online]. Available: https://krebsonsecurity.com/2020/10/report-u-s-cyber-
command-behind-trickbot-tricks/.
Y. Nadji, M. Antonakakis, R. Perdisci, D. Dagon, and W. Lee, “Beheading Hy-
dras: Performing Effective Botnet Takedowns,” in Proceedings of the 20th ACM
Conference on Computer and Communications Security (CCS), Berlin, Germany,
Oct. 2013, pp. 121–132.
R. Wainwright and F. J. Cilluffo, Responding to cybercrime at scale: Operation
avalanche — a case study. [Online]. Available: http://www.jstor.org/stable/
resrep20752.
New action to disrupt world’s largest online criminal network, https://blogs.
microsoft.com/on- the- issues/2020/03/10/necurs- botnet- cyber- crime-
disrupt/, [Accessed: 2020-03-12].
V. Le Pochat, S. Maroofi, T. Van Goethem, D. Preuveneers, A. Duda, W. Joosen, M.
Korczyński, et al., “A Practical Approach for Taking Down Avalanche Botnets
Under Real-World Constraints,” in Proceedings of the 2020 Annual Network and
Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2020.
Avast and French police take over malware botnet and disinfect 850,000 computers,
https://www.zdnet.com/article/avast-and-french-police-take-over-malware-
botnet-and-disinfect-850000-computers/, [Accessed: 2020-03-29].
[2]
[3]
[4]
[5]