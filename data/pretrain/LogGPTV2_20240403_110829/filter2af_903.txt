Many penetration testers are familiar with the frustration of trying to view and modify an unparsed JSON string. For those who haven't experienced this, here's an example:

```json
{
  "userId": 1234,
  "username": "JakeReynolds",
  "favorites": ["Rubik's cubes", "Doctor Who"],
  "dislikes": ["Sushi", "Vegetables"]
}
```

When dealing with thousands of such strings daily, it is crucial that they are well-formatted and easily understandable. While there is a Burp Extension available for beautifying JSON, it is written in Python, which requires Jython to be installed and added to Burp. Unfortunately, this solution has proven to be unreliable due to issues with Jython.

To address these problems, we have ported the functionality to Java, which is natively supported by Burp. This change allows for a one-click installation process, with support from Google's [GSON parser](https://github.com/google/gson). The source code is available on our [GitHub repository](https://github.com/NetSPI/JSONBeautifier) as well as PortSwigger's [GitHub repository](https://github.com/PortSwigger/json-beautifier), both of which include updated build instructions.

### Installation Instructions

To install the extension, follow these steps:
1. Open Burp.
2. Navigate to **Extender > BApp Store**.
3. Search for and select "JSON Beautifier".

Once installed, the "JSON Beautifier" option will appear in any Burp tab where JSON requests are present. Any modifications made in the "JSON Beautifier" tab will also be reflected in the "Raw" tab. Here is an example of how it works:

```json
{
  "userId": 1234,
  "username": "JakeReynolds",
  "favorites": ["Rubik's cubes", "Doctor Who"],
  "dislikes": ["Sushi", "Vegetables"]
}
```

Thank you for using our Burp Extension! If you have any feature requests or encounter any issues, please feel free to [create an issue](https://github.com/NetSPI/JSONBeautifier/issues) on GitHub.