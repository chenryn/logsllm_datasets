检查生成的HTML代码的结果，会发现input类型的标记辅助程序根据属性的类型创建
一个type特性，它们也应用了DateType特性。属性Price的类型是double，得到一个数字输
入类型。因为Date属性的DataType应用了DataType.Date值，所以输入类型是日期。此外，
还创建了data-val-length、data-val-length-max和data-val-required特性，用于注解：
    Menu
    Price
    Date
现代浏览器给HTML 5输入控件（如日期控件）提供了特别的外观。Microsoft Edge的
输入日期控件如图41-10所示。
图41-10
41.7.5 使用表单进行验证
为了把数据发送到服务器，输入字段需要用表单包围起来。表单的标记辅助程序使用
asp-method和asp-controller定义了action特性。对于input控件，验证信息是由这些控件定义
的。需要显示验证错误。为了显示，验证消息标记辅助程序用asp-validation-for扩展了span
元素（代码文件MVCSampleApp/Views/TagHelpers/FormHelper.cs）：
控制器检查ModelState，验证接收数据是否正确。如果不正确，就再次显示同样的视
图（代码文件MVCSampleApp/Controllers/TagHelpersController.cs）：
    public IActionResult FormHelper() => View(GetSampleMenu());
    [HttpPost]
    public IActionResult FormHelper(Menu m)
    {
      if (! ModelState.IsValid)
      {
        return View(m);
      }
      return View("ValidationHelperResult", m);
    }
运行应用程序时，错误信息如图41-11所示。
图41-11
41.7.6 创建自定义标记辅助程序
除了使用预定义的标记辅助程序之外，也可以创建自定义的标记辅助程序。本节建立
的示例自定义标记辅助程序扩展了HTML表格元素，为列表中的每项显示一行，为每个属
性显示一列。
控制器实现了方法CustomHelper，以返回Menu对象的列表（代码文件
MVCSampleApp/Controllers/TagHelpersController.cs）：
    public IActionResult CustomHelper() => View(GetSampleMenus());
    private IList GetSampleMenus() =>
      new List()
      {
        new Menu
        {
          Id = 1,
          Text = "Schweinsbraten mit Knödel und Sauerkraut",
          Price = 8.5,
          Date = new DateTime(2016, 10, 5),
          Category = "Main"
        },
        new Menu
        {
          Id = 2,
          Text = "Erdäpfelgulasch mit Tofu und Gebäck",
          Price = 8.5,
          Date = new DateTime(2016, 10, 6),
          Category = "Vegetarian"
        },
        new Menu
        {
          Id = 3,
          Text = "Tiroler Bauerngröst'l mit Spiegelei und Krautsalat",
          Price = 8.5,
          Date = new DateTime(2016, 10, 7),
          Category = "Vegetarian"
        }
      };
现在进入标记辅助程序。自定义的实现代码需要这些名称空间：
    using Microsoft.AspNet.Mvc.Rendering;
    using Microsoft.AspNet.Razor.Runtime.TagHelpers;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
自定义标记辅助程序派生自基类TagHelper。特性TargetElement定义了标记辅助程序
扩展的HTML元素。这个标记辅助程序扩展了table元素；因此，字符串"table"被传递给元
素的构造函数。使用Attributes属性，可以定义一个特性列表，这些特性会分配给标记辅助
程序使用的HTML元素。这个标记辅助程序使用items特性。标记辅助程序可以使用这个语
法：，其中Model需要是一个可以迭代的列表。如果创建的
标记辅助程序应该用于多个HTML元素，那么只需要多次应用特性TargetElement。为了把
items特性值自动分配给Items属性，特性HtmlAttributeName要分配给该属性（代码文件
MVCSampleApp/Extensions/TableTagHelper.cs）：
    [TargetElement("table", Attributes = ItemsAttributeName)]
    public class TableTagHelper : TagHelper
    {
      private const string ItemsAttributeName = "items";
      [HtmlAttributeName(ItemsAttributeName)]
      public IEnumerable Items { get; set; }
      // etc.
    }
标记辅助程序的核心是方法Process。这个方法需要创建辅助程序返回的HTML代码。
通过方法Process的参数，接收一个TagHelperContext。这个上下文包含应用了标记辅助程
序的HTML元素和所有子元素的特性。对于表元素，行和列可能已经定义，可以合并该结
果与现有的内容。在示例中，这被忽略了，只是把特性放在结果中。结果需要写入第二个
参数：TagHelperOutput对象。为了创建HTML代码，使用TagBuilder类型。TagBuilder帮助
通过特性创建HTML元素，它还处理元素的关闭。为了给TagBuilder添加特性，使用
MergeAttributes方法。这个方法需要一个包含所有特性名称和值的字典。这个字典使用
LINQ扩展方法ToDictionary创建。在Where方法中，提取表元素所有已有的特性，但items
特性除外。items特性用于通过标记辅助程序定义项，但以后在客户端不需要它：
    public override void Process(TagHelperContext context, TagHelperOutput output
)
    {
      TagBuilder table = new TagBuilder("table");
      table.GenerateId(context.UniqueId, "id");
      var attributes = context.AllAttributes
        .Where(a => a.Name ! = ItemsAttributeName).ToDictionary(a => a.Name);
      table.MergeAttributes(attributes);
      // etc.
    }
 注意： 
如果需要在标记辅助程序的实现代码中调用异步方法，可以重写
ProcessAsync方法而不是Process方法。
  注意： LINQ参见第13章。
接下来，创建表中的第一行。这一行包含一个tr元素，作为table元素的子元素，它还
为每个属性包含td元素。为了获得所有的属性名，调用First方法，检索集合的第一个对
象。使用反射访问该实例的属性，调用Type对象上的GetProperties方法，把属性的名称写
入HTML元素th的内部文本：
      // etc.
      var tr = new TagBuilder("tr");
      var heading = Items.First();
      PropertyInfo[] properties = heading.GetType().GetProperties();
      foreach (var prop in properties)
      {
        var th = new TagBuilder("th");
        th.InnerHtml.Append(prop.Name);
        th.InnerHtml.AppendHtml(th);
      }
      table.InnerHtml.AppendHtml(tr);
      // etc.
  注意： 反射参见第16章。
Process方法的最后一部分遍历集合的所有项，为每一项创建更多的行（tr）。对于每
个属性，添加td元素，属性的值写入为内部文本。最后，把所建table元素的内部HTML代
码写到输出：
    foreach (var item in Items)
    {
      tr = new TagBuilder("tr");
      foreach (var prop in properties)
      {
        var td = new TagBuilder("td");
        td.InnerHtml.Append(prop.GetValue(item).ToString());
        td.InnerHtml.AppendHtml(td);
      }
      table.InnerHtml.AppendHtml(tr);
    }
    output.Content.Append(table.InnerHtml);
在创建标记辅助程序之后，创建视图就变得非常简单。定义了模型后，传递程序集的
名称，通过addTagHelper引用标记辅助程序。使用特性items定义一个HTML表时，实例化
标记辅助程序本身（代码文件MVCSampleApp/Views/TagHelpers/CustomHelper.cshtml）：
    @model IEnumerable
    @addTagHelper "＊, MVCSampleApp"
运行应用程序时，表应该如图41-12所示。创建了标记辅助程序后，使用起来很简
单。使用CSS定义的所有格式仍适用，因为定义的HTML表的所有特性仍在生成的HTML
输出中。
图41-12
41.8 实现动作过滤器
ASP.NET MVC在很多方面都可以扩展。可以实现控制器工厂，以搜索和实例化控制
器（接口IControllerFactory）。控制器实现了IController接口。使用IActionInvoker接口可
以找出控制器中的动作方法。使用派生自ActionMethodSelectorAttribute的特性类可以定义
允许的HTTP方法。通过实现IModelBinder接口，可以定制将HTTP请求映射到参数的模型
绑定器。在41.5.1节中，使用过FormCollectionModelBinder类型。有实现了IviewEngine接
口的不同视图引擎可供使用。在本章中，使用了Razor视图引擎。使用HTML 
Helper、标
记辅助程序和动作过滤器也可以实现自定义。大多数可以扩展的地方都不在本书讨论范围
内，但是由于很可能需要实现或使用动作过滤器，所以下面就加以讨论。
在动作执行之前和之后，都会调用动作过滤器。使用特性可把它们分配给控制器或控
制器的动作方法。通过创建派生自基类ActionFilterAttribute的类，可以实现动作过滤器。
在这个类中，可以重写基类成员OnActionExecuting、OnActionExecuted、
OnResultExecuting和OnResultExecuted。OnActionExecuting在动作方法调用之前调用，
OnActionExecuted在动作方法完成之后调用。之后，在返回结果前，调用
OnResultExecuting方法，最后调用OnResultExecuted方法。
在这些方法内，可以访问Request对象来检索调用者信息。然后根据浏览器决定执行
某些操作、访问路由信息、动态修改视图结果等。下面的代码段访问路由信息中的变量
language。为把此变量添加到路由中，可以把路由修改为如41.2节所示。用路由信息添加
language变量后，可以使用RouteData.Values访问URL中提供的值，如下面的代码段所示。
可以根据得到的值，为用户修改区域性：
    public class LanguageAttribute : ActionFilterAttribute
    {
      private string _language = null;
      public override void OnActionExecuting(ActionExecutingContext filterContext
)
      {
        _language = filterContext.RouteData.Values["language"] == null ?
        null : filterContext.RouteData.Values["language"].ToString();
        //…
      }
      public override void OnResultExecuting(ResultExecutingContext filterContext
)
      {
      }
    }
  注意： 第28章讨论了全球化和本地化、区域性设置及其他区域信息。
使用创建的动作过滤器特性类，可以把该特性应用到一个控制器，如下面的代码段所
示。对类应用特性后，在调用每个动作方法时，都会调用特性类的成员。另外，也可以把
特性应用到一个动作方法，此时只有调用该动作方法时才会调用特性类的成员。
    [Language]
    public class HomeController : Controller
    {
ActionFilterAttribute实现了几个接口：IActionFilter、IAsyncActionFilter、
IResultFilter、IAsyncResultFilter、IFilter和IOrderedFilter。
ASP.NET MVC包含一些预定义的动作过滤器，例如需要HTTPS、授权调用程序、处
理错误或缓存数据的过滤器。
使用特性Authorize的内容参见本章后面的41.10节。
41.9 创建数据驱动的应用程序
在讨论完ASP.NET MVC的基础知识后，创建一个使用ADO.NET Entity Framework的
数据驱动的应用程序。该应用程序使用了ASP.NET MVC提供的功能和数据访问功能。
  注意： 第38章详细讨论了ADO.NET Entity Framework。
示例应用程序MenuPlanner用于维护数据库中存储的饭店菜单条目。数据库条目的维
护只应该由经过身份验证的账户完成。但是，未经身份验证的用户应该能够浏览菜单。
这个项目首先选择ASP.NET Core 1.0 Web Application模板。对于身份验证，选择默认
选项Individual User Accounts。这个项目模板给ASP.NET MVC和控制器添加了几个文件
夹，包括HomeController、AccountController。另外还添加了几个脚本库。
41.9.1 定义模型
首先在Models目录中定义一个模型。该模型使用ADO.NET Entity Framework创建。
MenuCard类型定义了一些属性和与一组菜单的关系（代码文件
MenuPlanner/Models/MenuCard.cs）：
    public class MenuCard
    {
      public int Id { get; set; }
      [MaxLength(50)]
      public string Name { get; set; }
      public bool Active { get; set; }
      public int Order { get; set; }
      public virtual List Menus { get; set; }
    }
在MenuCard中引用的菜单类型由Menu类定义（代码文件
MenuPlanner/Models/Menu.cs）：
    public class Menu
    {
      public int Id { get; set; }
      public string Text { get; set; }
      public decimal Price { get; set; }
      public bool Active { get; set; }
      public int Order { get; set; }
      public string Type { get; set; }
      public DateTime Day { get; set; }
      public int MenuCardId { get; set; }
      public virtual MenuCard MenuCard { get; set; }
    }
数据库连接以及Menu和MenuCard类型的设置由MenuCardsContext管理。上下文使用
ModelBuilder指定Menu类型的Text属性不能是null，其最大长度是50（代码文件
MenuPlanner/Models/MenuCardsContext.cs）：
    public class MenuCardsContext : DbContext
    {
      public DbSet Menus { get; set; }
      public DbSet MenuCards { get; set; }
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {