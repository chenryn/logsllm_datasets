Here's an example where `Alpha` and `Beta` both extend `Axios` and when you
log instances of these classes you can see that `this.defaults.headers` are
shared between the two classes.
The expected behavior would be that `alpha` would only contain the `alpha`
header and `beta` would only contain `beta`.
Any idea why this is not the case and how a PR can be made to fix this?
    import { Axios } from 'axios'
    export class Alpha extends Axios {
      constructor () {
        super()
        this.alpha = 'alpha'
        this.defaults.headers.alpha = 'alpha'
      }
    }
    export class Beta extends Axios {
      constructor () {
        super()
        this.beta = 'beta'
        this.defaults.headers.beta = 'beta'
      }
    }
    let alpha = new Alpha()
    let beta = new Beta()
    console.log(alpha)
    console.log(beta)
    Alpha {
      defaults: 
       { transformRequest: [ [Function: transformRequest] ],
         transformResponse: [ [Function: transformResponse] ],
         headers: 
          { common: [Object],
            patch: [Object],
            post: [Object],
            put: [Object],
            alpha: 'alpha',
            beta: 'beta' },
         timeout: 0,
         xsrfCookieName: 'XSRF-TOKEN',
         xsrfHeaderName: 'X-XSRF-TOKEN',
         maxContentLength: -1,
         validateStatus: [Function: validateStatus] },
      interceptors: 
       { request: InterceptorManager { handlers: [] },
         response: InterceptorManager { handlers: [] } },
      alpha: 'alpha' }
    Beta {
      defaults: 
       { transformRequest: [ [Function: transformRequest] ],
         transformResponse: [ [Function: transformResponse] ],
         headers: 
          { common: [Object],
            patch: [Object],
            post: [Object],
            put: [Object],
            alpha: 'alpha',
            beta: 'beta' },
         timeout: 0,
         xsrfCookieName: 'XSRF-TOKEN',
         xsrfHeaderName: 'X-XSRF-TOKEN',
         maxContentLength: -1,
         validateStatus: [Function: validateStatus] },
      interceptors: 
       { request: InterceptorManager { handlers: [] },
         response: InterceptorManager { handlers: [] } },
      beta: 'beta' }