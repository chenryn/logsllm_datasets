    .text:742574F5         inc     esi
    .text:742574F6         mov     [ebp+Src], esi  ; Start of NSEC3 Hash data in RR
    .text:742574F9         mov     [eax+1Dh], bl
    .text:742574FC         add     eax, 20h
    .text:742574FF         movzx   esi, bl
    .text:74257502         add     eax, edi
    .text:74257504         push    esi             ; Size (user-controlled)
    .text:74257505         push    [ebp+Src]       a      ; Src  (data in NSEC3 RR)
    .text:74257508         push    eax             ; Dst  (size of buf is user-controlled)
    .text:74257509         call    memcpy          ; Nsec3RecordRead+0xD9
在第一个堆缓冲区溢出漏洞那里，memcpy会将用户提供的值作为size参数值。而在第二个堆溢出漏洞中，目的缓冲区的大小跟例子一中由用户控制的缓冲区（destbuf）大小是一样的。在我们分析的NSEC3资源记录样本中，NSEC3
Hash Length域所处的位置如下图所示：
**堆缓冲区溢出漏洞 #3-Integer Underflow**
最后一个，也是最有用的一个堆缓冲区溢出漏洞并不会直接使用用户提供的length域，它会先进行一些计算（减法计算）。该漏洞位于
**Nsec3_RecordRead+0x106** ，具体如下列代码所示：
    .text:7425750E         mov     ecx, [ebp+var_C] ; User-supplied NSEC3 RR size
    .text:74257511         movzx   eax, bl                      ; NSEC3 Hash length (from ex #2)
    .text:74257514         sub     cx, ax                         ; Potential underflow #1
    .text:74257517         movzx   eax, bh                     ; NSEC3 Salt length (from ex #1)
    .text:7425751A         mov     ebx, [ebp+var_4]
    .text:7425751D         sub     cx, ax                        ; Potential underflow #2
    .text:74257520         movzx   eax, cx
    .text:74257523         push    eax                   ; Size (user-controlled, wrapped)
    .text:74257524         mov     eax, [ebp+Src]
    .text:74257527         add     eax, esi
    .text:74257529         mov     [ebx+1Eh], cx
    .text:7425752D         push    eax                            ; Src (NSEC3 RR data)
    .text:7425752E         lea     eax, [edi+20h]
    .text:74257531         add     eax, esi
    .text:74257533         add     eax, ebx
    .text:74257535         push    eax                   ; Dst (size of buf is user-controlled)
    .text:74257536         call    memcpy                      ; Nsec3_RecordRead+0x106
我们用下列伪代码来演示计算的执行过程:
    saved_record_len = DNS_RR_Size – 6 // performed outside this basic block
    nsec3_nho_len = saved_record_len - nsec3_hash_len - nsec3_salt_len
接下来，我们可以使用下列值来创建一个PoC，并尝试实现越界读写操作：
    saved_record_len of 0x00f9 (a.k.a DNS_RR_Size of 0xff – 0x6)
    nsec3_hash_len of 0xf8
    nsec3_salt_len of 0x6
**异常例子**
****
在下面给出的例子中，攻击者控制的数据将会用于资源寄存器及目的寄存器 **eax** 和 **edx** 之中：
    eax=30303030 
    ebx=0000251e 
    ecx=00000000 
    edx=02f839e8 
    esi=00000001 
    edi=000001de
    eip=7433d37f 
    esp=0394fb8c 
    ebp=0394fb94 
    iopl=0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nv up ei pl nz na pe nc
    cs=001b&nbsp; ss=0023&nbsp; ds=0023&nbsp; es=0023&nbsp; fs=003b&nbsp; gs=0000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; efl=00010206 
    dnsapi!coalesceRemoveFromGroup+0x58:
    7433d37f 895004&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp;&nbsp; dword ptr [eax+4],edx ds:0023:30303034=????????
    0:008> dd edx
    02f839e8&nbsp; 30303030 30303030 02f839f0 02f839f0
    02f839f8&nbsp; 30303030 30303030 30303030 30303030
    02f83a08&nbsp; 30303030 00000001 00000001 30303030
    02f83a18&nbsp; 30303030 30303030 30303030 30303030
    02f83a28&nbsp; 30303030 30303030 30303030 30303030
    02f83a38&nbsp; 30303030 30303030 30303030 30303030
    02f83a48&nbsp; 30303030 30303030 30303030 30303030
    02f83a58&nbsp; 30303030 30303030 30303030 30303030
    0:008> kv
    ChildEBP RetAddr&nbsp; Args to Child&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    0394fb94 7433d300 02f83490 7432ef50 0000251e dnsapi!coalesceRemoveFromGroup+0x58 (FPO: [Non-Fpo])
    0394fbbc 7432e635 743894ac 02fa2578 0000251e dnsapi!Coalesce_Complete+0x17e (FPO: [Non-Fpo])
    0394fc24 7434021b 02f495f0 00000000 02f495f0 dnsapi!Send_AndRecvComplete+0x26b (FPO: [Non-Fpo])
    0394fc48 743404d4 02f495f0 00000000 02f7a1f8 dnsapi!Send_AndRecvTcpComplete+0xef (FPO: [Non-Fpo])
    0394fc68 74340105 7432dbf0 02f49cf0 02f78dd0 dnsapi!Recv_TcpCallbackCompletion+0xe9 (FPO: [Non-Fpo])
    0394fc7c 74e688da 0394fd64 02f495f0 02f7a2cc dnsapi!Recv_IoCompletionCallback+0x109 (FPO: [Non-Fpo])
    …omitted for brevity…
为了触发这种异常，第一个响应会设置‘truncated’
DNS比特，并强迫客户端通过TCP执行第二次DNS查询，此时攻击者就可以向目标主机发送更多的Payload了。如果能够对目标系统中的堆内存进行小心操作的话，攻击者甚至还可以向内存中写入包含函数指针的对象，并在目标系统中执行任意代码。
**总结**
****
对于攻击者而言，这三个漏洞的优势就在于：漏洞可以在不需要任何用户交互的情况下被触发；它们可以影响不同权限级别（包括SYSTEM）的运行进程；svchost.exe下的DnsCache服务将无法正常重启。这也就意味着，攻击者可以先终止DnsCache服务的运行，然后可以确切地了解到堆内存空间的状态，接下来再多次利用这些漏洞来绕过ASLR，最终向目标主机发送攻击Payload。