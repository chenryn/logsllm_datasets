LQ(DB) which is either the set (unordered) or the k-tuple
(ordered) of the deterministically encrypted identiﬁers that are
retrieved for an issued query. For simplicity in the rest of the
work we refer to the deterministically encrypted identiﬁers as
‘records’. The only setup leakage LS(DB) that we assume is
the number of encrypted records, n. We note here that leaking
the encrypted record ids returned as responses to queries is
(cid:18)(cid:17)(cid:20)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:34 UTC from IEEE Xplore.  Restrictions apply. 
a standard approach in the vast majority of encrypted search
constructions [7], [9], [11], [16], [22], [24], [26], [38], [42],
[43] and to the best of our knowledge, it can only be avoided
with heavier cryptographic primitives such as ORAM [19] and
response-hiding STE [10], which negatively affect the running
time and storage of the overall construction. From this leakage
proﬁle the attacker can detect which ids correspond to the two
extreme values but it is not possible to differentiate between the
ids of the ﬁrst and the last value. Thus, all our reconstructions,
similarly to [25], [28], are correct up to reﬂection.
Assumptions for Our Attacks. For our attacks, we have
three assumptions:
A1 The queries observed are generated uniformly at random.
A2 The database is static, no data is updated after the setup.
A3 The boundaries α and β of the values are known.
Assumption A1, uniform query generation, appears in other
leakage-abuse attacks [25], [28] and is crucial for our proposed
estimation techniques. An application where assumption A2
holds is the historical geo-location trace of a user for a ﬁxed
time period, similar to the dataset in our evaluation.
Access to Auxiliary Information. In Section III, we show
that an attacker who has additional knowledge can achieve
exact reconstruction. In particular, for the results of Section III,
the adversary is given the following auxiliary information, Aux:
• The set of all possible ordered (resp. unordered) responses
to k-NN queries on DB, denoted with R.
• The exact length of the Voronoi segment for every response
in R, with is modeled by oracle access to function Len(r)
for a response r in R.
Note that set R has size k(n − (k + 1)/2) + 1 for ordered
responses and n − k + 1 for unordered responses. One might
say that knowledge of the above auxiliary information by the
attacker is too much to assume. Indeed, the results of Section III
are primarily of theoretical interest. Nevertheless, they provide
a sufﬁcient condition that makes exact reconstruction feasible.
Also, the attack of Section III can be modiﬁed to achieve
approximate reconstruction without access to the auxiliary
information. Indeed, as we show in Section IV the auxiliary
information can be approximated by an attacker who observes
a sufﬁcently large number of queries. In particular, the attacker
can (1) analyze the probability of the event of observing all
the possible responses and (2) rigorously estimate the lengths
of the Voronoi segments from the frequency of each response.
For the omitted proofs see the full version in [27].
III. EXACT RECONSTRUCTION
In this section, we consider exact reconstruction attacks for
k-NN queries on a one-dimensional encrypted database DB.
An exact reconstruction attack is one that always and correctly
retrieves the values of the underlying encrypted database by
just accessing the leakage. We assume that the attacker has
access to the auxiliary information, which we recall consists
of the set R (all possible responses to k-NN queries) and
oracle access to the function Len(r) that returns the length of
the Voronoi segment associated with a response r in R. The
auxiliary information subsumes Assumption A1, which is not
necessary for the results in this section. However, we still rely
on Assumptions A2 (static database), and A3 (knowledge of
the range [α, β] of database values).
First, in Section III-A, we present an algorithm that re-
constructs the order of the records by value given the set of
all the possible responses, R, which is part of the auxiliary
information. This algorithm only needs unordered responses.
Next, we study the complete exact reconstruction attack for
two cases: (i) ordered responses, for which we present an exact
reconstruction attack (Sections III-B through III-D); (ii) un-
ordered responses for which we show that exact reconstruction
is impossible under this leakage proﬁle (Section III-E). The
following two theorems summarize the ﬁndings of this section.
Theorem 1. Let DB be an encrypted database consisting of n
records with values in the range [α, β]. Assume the adversary
is given the set R of all possible ordered responses to k-NN
queries and oracle access to the length Len(r) of the Voronoi
segment of each response r in R. Algorithm AttackOrdered
achieves exact reconstruction of the values of DB, up to
reﬂection, in O(k n log n) time.
Theorem 2. Let DB be an encrypted database with n records,
and let k ≥ 2. Given only the leakage of unordered responses
to k-NN queries,
is impossible for any attacker (even
computationally unbounded) to achieve exact reconstruction.
A. Reconstructing the Order of Records
it
Consider a database that consists of three points x, y, z and
where the set of possible unordered responses to 2-NN queries
is R = {{x, z},{y, x}}. Clearly, the only possible order is
z < x < y (up to reﬂection) since x appears in both responses,
i.e. overlaps, and thus x is the intermediate value. Our algorithm
ReconstructOrder is a generalization of the above idea.
In particular, Algorithm 1 initially ﬁnds the identiﬁers for
the largest and smallest values—this is easy since these are
the only ones appearing in a single k-NN response. Then we
construct the order sequence S by ﬁnding the response r that
overlaps with the k − 1 most-recently discovered entries of
S, denoted in the algorithm as seq. The single remaining
identiﬁer is the one that ﬁnally extends the discovered S. See
Algorithm 1 for the detailed pseudocode.
Theorem 3. Given the set R of all possible unordered
responses to k-NN queries on an encrypted database DB
with n records, Algorithm ReconstructOrder computes the
order of the records of DB with respect to their values, up to
reﬂection, in time O(k2 n).
Prior Work on Order Reconstruction. The work of Lacharit´e
et al. [28] also uses order reconstruction as a step for their
attack on range queries leakage. In particular, the “sorting step”
proposed in [28] can be directly applied to the case of k-NN
queries1. But just this step in [28] takes O(k n3) time whereas
our algorithm takes O(k2 n) time overall.
1Speciﬁcally, Lines 9-15 of Algorithm 2 in [28] iteratively build a set of
responses that covers the entire set of records except a single record.
(cid:18)(cid:17)(cid:20)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:34 UTC from IEEE Xplore.  Restrictions apply. 
Algorithm 1: ReconstructOrder
Input: Set R of unordered responses
Output: Sequence of ordered records (s0, . . . , sn−1)
1 Let Responses[j] be the set of responses containing identiﬁer j;
2 Let id(cid:2), id(cid:2)(cid:2) be the identiﬁers that are part of only one response in R;
3 Set s0 ← id(cid:2) and sn−1 ← id(cid:2)(cid:2);
4 for all pi ∈ Responses[s0] − {s0} do
ind ← |Responses[pi]|;
sind ← pi;
5
6
7 end
8 while k − 1 ≤ ind < n − 2 do
seq ← {sind−k+1, . . . , sind};
Find response r from Responses[sind] s.t. |r ∩ seq| = k − 1;
sind+1 ← r − seq;
ind← ind +1;
9
10
11
12
13 end
14 return (s0, . . . , sn−1)
{b0,2, b1,3, . . . , bn−3,n−1} appear as Voronoi endpoints (see
Preliminaries). Additionally, the locations of these bisectors are
known from the previous steps. Therefore, by forming a system
of |B1| +|B2| = 2n− 3 linear equations with the n unknowns
v0, . . . , vn−1, the adversary reconstructs the encrypted values.
Standard algorithms for solving such a system take O(nc)
time, where c ≈ 3. In Section III-D, we prove that there is
a unique solution to this system and by taking advantage of
the structure of the equations, we derive a signiﬁcantly faster
reconstruction in O(n) time.
B. Overview of the Attack For Ordered Responses
Our proposed attack reconstructs the Voronoi diagram of
the database values as an intermediate step. This task consists
of ﬁnding the order of the Voronoi segments and ﬁnding the
location of the Voronoi endpoints that separate the segments.
As we will see, this is enough for total reconstruction. Our
attack consists of ﬁve steps, which are illustrated in Figure 3.
Step-1: Reconstruct Order of Records and Relabel. We
ﬁnd the order of the records with respect to their corresponding
(unknown) values by executing Algorithm ReconstructOrder,
presented in Section III-A. This algorithm takes as input
unordered responses, thus ignoring the order of the ids in
the response tuples. The output of this step is the n-tuple of
ids of DB sorted by value, denoted S = (s0, . . . , sn−1).
Step-2: Find Left-to-Right Geometric Order of Voronoi
Segments. We sort lexicographically the response tuples of
R using the order S from the previous step. As shown in
Lemma 1, the resulting sorted sequence of responses yields
the left-to-right geometric order of the Voronoi segments.
Step-3: Find Bisectors Between Voronoi Segments. By
deﬁnition, except for α and β, each endpoint of a Voronoi
segment is a bisector of two values from DB. In the previous
step, we discovered the neighboring relation between Voronoi
segments, in this step, we further discover which bisector
corresponds to which Voronoi segment endpoint. Towards this
goal, we use Lemma 2, which shows that by comparing the
ordered responses of two neighboring Voronoi segments, we
can infer which bisector separates them.
Step-4: Use Voronoi Segments’ Length to Find the Loca-
tion of Bisectors. Starting from α, we use the left-to-right
order of the Voronoi segments, and “expand” each segment
by its length so as to ﬁnd the exact location of each bisector.
Step-5: Use Bisector Equations to Reconstruct Encrypted
Values. At
this point, we have reconstructed the exact
Voronoi diagram. In the ﬁnal step of the attack, we take
advantage of the fact
that bisectors impose constraints
on the location of the associated values. Speciﬁcally, by
the deﬁnition of the bisector, the following equality holds
bi,j = (vi + vj)/2. Notice that as long as k ≥ 2 then
the bisectors B1 = {b0,1, b1,2, . . . , bn−2,n−1} and B2 =
Fig. 3. An overview of the attack based on ordered responses where k = 2.
C. Ordering Voronoi Segments and Computing Bisectors
To complete the attack the attacker must order the Voronoi
segments and compute the locations of the bisectors separating
them. As a reminder, the ordering of the underlying identiﬁers
is derived from Step-1 of the attack.
Lemma 1. For a database DB with n records, let S be the
sequence of identiﬁers sorted by increasing value. Let R be
the universe of all ordered responses for k-NN queries on DB,
where each response is a k-tuple of ids of DB. We have that
the left-to-right geometric order of the Voronoi segments of the
values of DB is given by the lexicographic order of the tuples
of R with respect to the ordering of identiﬁers given by S.
(cid:18)(cid:17)(cid:20)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:45:34 UTC from IEEE Xplore.  Restrictions apply. 
Finally, two neighboring Voronoi segments are separated by
a Voronoi endpoint which is a bisector between two values.
The next lemma explains how an attacker can infer which
bisector separates two neighboring Voronoi segments.
Lemma 2. Let rleft and rright be ordered responses to k-NN
queries associated with consecutive Voronoi segments. We have
that k-tuples rleft and rright differ in either:
• the last position, k, where the bisector that separates their
segments refers to the values of the record rleft(k) and
the record rright(k); or
• two consecutive positions, l and l + 1, where the bisector
that separates their segments refers to the values of records
rleft(l) and rleft(l + 1).
D. From Exact Bisectors to Full Reconstruction
Given the length of each Voronoi segment, given via Aux
that the attacker has access to in this section, it is easy to
compute the exact location of each bisector. In particular,
starting from point α, we use the left-to-right order of the
Voronoi segments, and “expand” each Voronoi segment by
its length. Since we found which bisector separates which
Voronoi segments, we can compute the exact location of every
bisector. In the ﬁnal step of the attack the adversary utilizes the
exact locations of bisectors B1 = {b0,1, b1,2, . . . , bn−2,n−1}
B2 = {b0,2, b1,3, . . . , bn−3,n−1} so as to reconstruct the exact
values of DB. We use the relation between the bisector and the
corresponding values in order to form linear equations where
the unknowns are the encrypted values of DB. Speciﬁcally,
from the locations of the bisectors of set B1 we can formulate
a set of n − 1 equations, whereas from the locations of the
bisectors of set B2 we can formulate a set of n − 2 equations.
The above two sets of equations are labeled as L1 . . . , L2n−3
and are depicted in the following:
L1 :v0 + v1 = 2b0,1
L2 :v1 + v2 = 2b1,2
...
Ln :v0 + v2 = 2b0,2
Ln+1 :v1 + v3 = 2b1,3
...
Ln−1 :vn−2 + vn−1 = 2bn−2,n−1
L2n−3 :vn−3 + vn−1 = 2bn−3,n−1
Lemma 3. The above linear system has a unique solution.
Notice that each equation of the derived augmented matrix
(see the proof of Lemma 3 in the Appendix) gives an expression
of the corresponding value in terms of three bisectors. For
example, v0 = b0,2 − b1,2 + b0,1 and v1 = b1,3 − b2,3 + b1,2
etc. As a result in AttackOrdered we don’t have to solve the
system of linear equations derived by the set of bisectors B1
and B2 which would take O(nc) time, where c ≈ 3. Instead
we use directly the derived formulas to fully reconstruct all
values, which requires O(n) time, as it is captured in Lines
22-25 of AttackOrdered. In terms of time complexity, Step
1 takes O(nk2), Step-2 takes2 O(kn log(n)), Step-3 & 4 take
O(k2n), and Step-5 takes O(n) time.
2Since the total number of ordered responses is k(n − (k + 1)/2) + 1 the
sorting step of that many items takes O(kn log(n))
Algorithm 2: AttackOrdered
Input: Auxiliary information Aux=(R, Len), where R corresponds to
the ordered responses, and Len : r → R is the length function
where r ∈ R.
Output: Reconstructed encrypted values v0, . . . , vn−1
1 Rset ←Transform each k-tuple of R to a set of size k; // Step-1
2 (s0, . . . , sn−1) ← ReconstructOrder(Rset);
3 Create an empty array VoronoiOrder ;
// Step-2
4 Iterate through all r ∈ R and add each k-tuple
(cid:2)
in VoronoiOrder;
5 VoronoiOrder← Sort(VoronoiOrder,’ascending’);
6 left← VoronoiOrder[1] ;
7 current r ← (sleft(1), sleft(2), . . . , sleft(k));
8 covered area ← α + Len(current r);
9 for all 2 ≤ i ≤ |VoronoiOrder| do
pos(r(1)), . . . , pos(r(k))
// Step-3 & Step-4
(cid:3)
else
left← VoronoiOrder[i − 1], right← VoronoiOrder[i];
if k-tuples left and right differ in only one position then
j ← left(k);
bj,j+k ← covered area;
Let x be the smallest position left and right differ;
j ← left(x), j(cid:2) ← left(x + 1);
bj,j(cid:2) ← covered area;
10
11
12
13
14
15
16
17
18
19
20
21 end
22 v0 ← b0,2 − b1,2 + b0,1, v1 ← b1,3 − b2,3 + b1,2;
23 for all 2 ≤ i ≤ n − 1 do
24
25 end
26 return v0, . . . , vn−1
end
current r ← (sright(1), sright(2), . . . , sright(k));
covered area ← covered area + Len(current r);
vi ← bi−2,i − bi−2,i−1 + bi−1,i;
// Step-5