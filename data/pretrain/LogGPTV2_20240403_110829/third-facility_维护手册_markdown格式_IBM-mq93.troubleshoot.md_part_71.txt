### 7. Handling Trace Files When an Agent is Busy

If an agent is busy, trace files may wrap quickly and overwrite the information needed to investigate the issue. In such a situation, you have two options:

#### Option 1: Configure Trace Settings Manually
1. **Schedule a Time to Stop the Agent:**
   - Identify a suitable time to stop the agent temporarily.

2. **Locate the `agent.properties` File:**
   - The `agent.properties` file is located in the following directory:
     ```
     BFG_DATA/mqft/config/coordination_qmgr_name/agents/agent_name
     ```

3. **Edit the `agent.properties` File:**
   - Add or modify the following properties to control the amount of trace data collected:
     ```properties
     traceFiles=number of trace files to use
     traceSize=size of each trace file, in MB
     ```
   - **Default Values:**
     - `traceFiles`: 5
     - `traceSize`: 20MB
   - **Example Configuration:**
     - To collect 1GB of wrapping trace, set the properties as follows:
       ```properties
       traceFiles=5
       traceSize=200
       ```
     - This configuration will result in the agent writing trace data to a maximum of 5 files, each with a size of 200MB.

4. **Locate the Data Set Containing the JCL for the Agent:**
   - Identify the data set that contains the JCL for the agent.

5. **Stop the Agent:**
   - Submit the `BFGAGSP` member within the data set to stop the agent.

6. **Restart the Agent:**
   - Submit the `BFGAGST` member in the data set to restart the agent.

7. **Enable Trace:**
   - Edit the `BFGAGTC` member within the data set.
   - Locate the line containing the text `-traceAgent`.
   - By default, this line is set to:
     ```
     com.ibm.wmqfte=all
     ```
   - Unless otherwise specified by your IBM Support representative, leave this value as is.
   - Submit the `BFGAGTC` member to enable tracing.

8. **Reproduce the Issue:**
   - Perform the actions that reproduce the issue.

9. **Disable Trace:**
   - Edit the `BFGAGTC` member again and set the `-traceAgent` parameter to `=off`:
     ```
     -traceAgent =off
     ```
   - Submit the `BFGAGTC` member to turn off tracing.

#### Option 2: Contact IBM Support
- If it is not possible to stop the agent for a short period of time, contact your IBM Support representative.
- Discuss alternative trace specifications to reduce the amount of trace data generated.

### Results
- The resultant trace files are written to the following directory:
  ```
  BFG_DATA/mqft/logs/coordination_qmgr_name/agents/agent_name/logs/trace%PID%
  ```
  - `%PID%` is the process identifier for the agent.

### Tracing Managed File Transfer for z/OS Commands
The trace facility in Managed File Transfer for z/OS is provided to help IBM Support diagnose issues. You can use this facility to trace commands.

#### About This Task
- **Attention:** Tracing a command only collects information about the processing done by the command. It does not trace any activity that an agent might perform while processing that command.
- The method to collect the trace depends on whether the command is being run using z/OS UNIX System Services (z/OS UNIX) or JCL.
- If you are unsure which option to use, contact your IBM Support representative for guidance.

#### Procedure
- **Using z/OS UNIX:**
  - See “Collecting an agent trace from startup using z/OS UNIX” on page 451.
- **Using JCL:**
  - See “Collecting an agent trace from startup using JCL” on page 452.

### Collecting a Trace of a Command Using z/OS UNIX
To collect a trace of a Managed File Transfer for z/OS command using z/OS UNIX System Services (z/OS UNIX), follow these steps:

1. **Navigate to the `BFG_PROD/bin` Directory:**
   - Open a command prompt and navigate to the `BFG_PROD/bin` directory.

2. **Run the Command:**
   - Use the following command format:
     ```sh
     ./command_name -trace classes=level -tracePath directory_path command_arguments
     ```
   - **Parameters:**
     - `command_name`: The name of the command to be traced.
     - `classes=level`: The trace level and classes to enable. Set to `com.ibm.wmqfte=all` unless otherwise specified.
     - `directory_path`: The directory where the trace files will be written.
     - `command_arguments`: Arguments passed to the command, such as the agent name for the `ftePingAgent` command.

3. **Results:**
   - The resultant trace files are written to the directory specified by the `-tracePath` parameter.
   - The trace files are named `trace%PID%.txt.number`, where:
     - `%PID%` is the process identifier for the command.
     - `number` is a sequence number for the trace file. Typically, the trace information is contained within a single file with a sequence number of 0. If a lot of trace information is generated, multiple files will be created, with the current trace file having a sequence number of 0, the next oldest file having a sequence number of 1, and so on.
   - Trace output for commands is written to a maximum of five wrapping trace files, each with a maximum size of 20MB.
   - **Note:** If the user running the command does not have permission to write to the specified directory, the trace output is written to standard error.

#### Example
- **Tracing `fteListAgents` Command:**
  ```sh
  ./fteListAgents -trace com.ibm.wmqfte=all -tracePath /u/fteuser
  ```
- **Tracing `fteCreateTransfer` Command:**
  ```sh
  ./fteCreateTransfer -trace com.ibm.wmqfte=all -tracePath /tmp -t text -sa AGENT1 -da AGENT2 -df /tmp/IEEUJV.txt "//'SYS1.SAMPLIB(IEEUJV)'"
  ```
  - The trace file in `/tmp` will contain information about the processing performed by the `fteCreateTransfer` command, such as building the transfer request message and waiting for acknowledgment. It will not contain information about the transfer itself.

### Collecting a Trace of a Command Using JCL
To collect a trace of a Managed File Transfer for z/OS command submitted using JCL, follow these steps:

1. **Locate the Data Set Containing the JCL:**
   - Identify the data set that contains the JCL for the command.

2. **Edit the JCL Member:**
   - Locate the member for the command.
   - Modify the line containing the command name to include the following text:
     ```jcl
     -trace classes=level -tracePath directory_path
     ```
   - **Parameters:**
     - `classes=level`: Set to `com.ibm.wmqfte=all` unless otherwise specified.
     - `directory_path`: The z/OS UNIX System Services directory where the trace files will be written.

3. **Submit the JCL Member:**
   - Submit the modified JCL member to start the command with tracing enabled.

4. **Reproduce the Issue:**
   - Perform the actions that reproduce the issue.

5. **Disable Trace:**
   - Edit the JCL member again and remove the `-trace classes=level -tracePath directory_path` text.
   - Resubmit the JCL member to turn off tracing.

### Results
- The resultant trace files are written to the directory specified by the `-tracePath` parameter.
- The trace files are named `trace%PID%.txt.number`, where:
  - `%PID%` is the process identifier for the command.
  - `number` is a sequence number for the trace file. Typically, the trace information is contained within a single file with a sequence number of 0. If a lot of trace information is generated, multiple files will be created, with the current trace file having a sequence number of 0, the next oldest file having a sequence number of 1, and so on.
- Trace output for commands is written to a maximum of five wrapping trace files, each with a maximum size of 20MB.
- **Note:** If the user running the command does not have permission to write to the specified directory, the trace output is written to standard error.

#### Example
- **Modifying the `BFGMNLI` Member to Trace `fteListMonitors` Command:**
  ```jcl
  //********************************************************************
  //* 
  //* Licensed Materials - Property of IBM
  //*
  //* 5655-MF9
  //*
  //* (C) Copyright IBM Corp. 2013, 2022. All Rights Reserved.
  //* 
  //********************************************************************
  //* fteListMonitors
  //********************************************************************
  //BFGCMD EXEC PGM=IKJEFT01,REGION=0M
  //SYSEXEC DD DSN=++LIBRARY++,DISP=SHR
  //SYSTSPRT DD SYSOUT=*
  //STDOUT DD SYSOUT=*
  //STDERR DD SYSOUT=*
  //SYSTSIN DD *
  %BFGCMD CMD=fteListMonitors -trace com.ibm.wmqfte=all -tracePath /u/trace +
  -v -p QM1
  /*
  //
  ```
  - When the member is submitted, the `fteListMonitors` command writes trace to the z/OS UNIX directory `/u/trace`.

### Tracing Managed File Transfer for z/OS Standalone Database Loggers
The trace facility in Managed File Transfer for z/OS is provided to help IBM Support diagnose issues. Various commands and properties control the behavior of this facility.

#### About This Task
- If you are asked to provide trace output to investigate an issue with a standalone database logger, use one of the following options:
  - **Option 1:** If you can stop the logger for a short period, collect a trace from startup.
    - See “Collecting a Managed File Transfer for z/OS standalone database logger trace from startup” on page 459.
  - **Option 2:** If you cannot stop the logger, collect a trace dynamically using the `fteSetLoggerTraceLevel` command.
    - See “Collecting a Managed File Transfer for z/OS standalone database logger trace dynamically” on page 461.

### Collecting a Managed File Transfer for z/OS Standalone Database Logger Trace from Startup
Where it is possible to stop a logger for a short period, you should collect IBM MQ Managed File Transfer logger trace from startup.

#### About This Task
- The method to collect the trace depends on whether the logger is being administered using z/OS UNIX System Services (z/OS UNIX) or JCL.
- If you are unsure which option to use, contact your IBM Support representative for guidance.

#### Procedure
- **Using z/OS UNIX:**
  - See “Collecting a standalone database logger trace from startup using z/OS UNIX” on page 459.
- **Using JCL:**
  - See “Collecting a standalone database logger trace from startup using JCL” on page 460.

### Collecting a Standalone Database Logger Trace from Startup Using z/OS UNIX
To collect a trace of a Managed File Transfer for z/OS logger administered using z/OS UNIX System Services (z/OS UNIX) from startup, follow these steps:

1. **Locate the `logger.properties` File:**
   - The `logger.properties` file is located in the following directory:
     ```
     BFG_DATA/mqft/config/coordination_qmgr_name/loggers/logger_name
     ```

2. **Edit the `logger.properties` File:**
   - Add or modify the following properties:
     ```properties
     trace=trace specification
     traceFiles=number of trace files to use
     traceSize=size of each trace file, in MB
     ```
   - **Parameters:**
     - `trace`: Determines the internal classes and packages to be traced. Set to `com.ibm.wmqfte=all` unless otherwise specified.
     - `traceFiles`: Number of trace files to use.
     - `traceSize`: Size of each trace file in MB.
   - **Example Configuration:**
     - To collect 1GB of wrapping trace, set the properties as follows:
       ```properties
       trace=com.ibm.wmqfte=all
       traceFiles=5
       traceSize=200
       ```
     - This configuration will result in the logger writing trace data to a maximum of 5 files, each with a size of 200MB.

3. **Stop the Logger:**
   - Use the `fteStopLogger` command to stop the logger.

4. **Start the Logger:**
   - Use the `fteStartLogger` command to start the logger.

5. **Reproduce the Issue:**
   - Perform the actions that reproduce the issue.

6. **Stop the Logger:**
   - Use the `fteStopLogger` command to stop the logger again.

7. **Remove Trace Properties:**
   - Edit the `logger.properties` file and remove the entries for `trace`, `traceFiles`, and `traceSize` that you added in step 2.
   - This ensures that trace is not enabled the next time you restart the logger.

#### Results
- The resultant trace files are written to the following directory:
  ```
  BFG_DATA/mqft/logs/coordination_qmgr_name/loggers/logger_name/logs/trace%PID%
  ```
  - `%PID%` is the process identifier for the logger.

### Collecting a Standalone Database Logger Trace from Startup Using JCL
To collect a trace of a Managed File Transfer for z/OS logger administered using JCL from startup, follow these steps:

1. **Locate the `logger.properties` File:**
   - The `logger.properties` file is located in the following directory:
     ```
     BFG_DATA/mqft/config/coordination_qmgr_name/loggers/logger_name
     ```

2. **Edit the `logger.properties` File:**
   - Add or modify the following properties:
     ```properties
     trace=trace specification
     traceFiles=number of trace files to use
     traceSize=size of each trace file, in MB
     ```
   - **Parameters:**
     - `trace`: Determines the internal classes and packages to be traced. Set to `com.ibm.wmqfte=all` unless otherwise specified.
     - `traceFiles`: Number of trace files to use.
     - `traceSize`: Size of each trace file in MB.
   - **Example Configuration:**
     - To collect 1GB of wrapping trace, set the properties as follows:
       ```properties
       trace=com.ibm.wmqfte=all
       traceFiles=5
       traceSize=200
       ```
     - This configuration will result in the logger writing trace data to a maximum of 5 files, each with a size of 200MB.

3. **Locate the Data Set Containing the JCL for the Logger:**
   - Identify the data set that contains the JCL for the logger.

4. **Stop the Logger:**
   - Submit the `BFGLGSP` member within the data set to stop the logger.

5. **Restart the Logger:**
   - Submit the `BFGLGST` member in the data set to restart the logger.

6. **Reproduce the Issue:**
   - Perform the actions that reproduce the issue.

7. **Stop the Logger:**
   - Submit the `BFGLGSP` member in the data set to stop the logger again.

8. **Remove Trace Properties:**
   - Edit the `logger.properties` file and remove the entries for `trace`, `traceFiles`, and `traceSize` that you added in step 2.
   - This ensures that trace is not enabled the next time you restart the logger.

#### Results
- The resultant trace files are written to the following directory:
  ```
  BFG_DATA/mqft/logs/coordination_qmgr_name/loggers/logger_name/logs/trace%PID%
  ```
  - `%PID%` is the process identifier for the logger.

### Collecting a Managed File Transfer for z/OS Standalone Database Logger Trace Dynamically
If it is not possible to stop a logger for a short period, you should collect Managed File Transfer for z/OS logger trace dynamically.

#### About This Task
- The method to collect the trace depends on whether the logger is being administered using z/OS UNIX System Services (z/OS UNIX) or JCL.
- If you are unsure which option to use, contact your IBM Support representative for guidance.

#### Procedure
- **Using z/OS UNIX:**
  - See “Collecting a standalone database logger trace dynamically using z/OS UNIX” on page 461.
- **Using JCL:**
  - See “Collecting a standalone database logger trace dynamically using JCL” on page 463.

### Collecting a Standalone Database Logger Trace Dynamically Using z/OS UNIX
Under z/OS UNIX System Services (z/OS UNIX), you can use the `fteSetLoggerTraceLevel` command to collect trace from a running logger. This can be very useful if IBM Support needs to see a trace from a running logger.