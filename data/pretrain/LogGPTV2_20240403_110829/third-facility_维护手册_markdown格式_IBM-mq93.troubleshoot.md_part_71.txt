7.If an agent is busy, then it is possible that the trace files will wrap quickly and overwrite the
information needed to investigate the issue.
In this situation there are two options:
a)The first option is to:
i)Schedule some time to stop the agent.
ii)Locate the agent.properties file for the agent that needs to be traced.
The agent.properties file can be found in the BFG_DATA/mqft/config/
coordination_qmgr_name/agents/agent_name directory.
iii)Edit the files and add entries for the following properties:
• traceFiles=number of trace files to use
• traceSize=size of each trace file, in MB
The traceFiles and traceSize properties are used to control the amount of trace data
that is collected.
The default value of the traceFiles property is 5, and the traceSize property has the
default value of 20MB. This means that if you turn on trace dynamically, and you have not
set the properties, the agent writes trace information to 5 wrapping trace files, each with a
maximum size of 20MB.
You should set these properties to large values, to collect as much trace data as possible.
For example, to collect 1GB of wrapping trace, add the following lines to the
agent.properties file:
traceFiles=5
traceSize=200
This results in the agent writing trace data to a maximum of 5 files, where each file has a size
of 200MB.
For more information on these agent properties, see The MFT agent.properties file.
iv)Locate the data set containing the JCL for the agent that needs to be traced.
v)Submit the BFGAGSP member within the data set to stop the agent.
vi)Restart the agent, by submitting the BFGAGST member in the data set.
vii)Edit the BFGAGTC member within the data set, and locate the line that contains the text:
-traceAgent
The text following this contains the list of internal classes and packages that are to be traced.
By default, this list is set to:
com.ibm.wmqfte=all
Unless otherwise specified by your IBM Support representative, leave this value as is.
viii)When it is time to enable trace, submit the BFGAGTC member.
ix)Reproduce the issue.
x)Edit the BFGAGTC member again, and set the -traceAgent parameter to =off, as shown:
-traceAgent =off +
xi)Submit the BFGAGTC member again, to turn trace off.
IBM MQ troubleshooting and support 455
b)The second option is to contact your IBM Support representative, if it is not possible to stop the
agent for a short period of time.
You can then discuss alternative trace specifications to use, in order to reduce the amount of trace
data that is being generated.
Results
The resultant trace files are written to the BFG_DATA/mqft/logs/coordination_qmgr_name/
agents/agent_name/logs/trace%PID% directory, where %PID% is the process identifier for the
agent.
Tracing Managed File Transfer for z/OS commands
The trace facility in Managed File Transfer for z/OS is provided to help IBM Support diagnose your
problems and issues. You can use this facility to trace commands.
About this task
Attention: Tracing a command only collects information about the processing done by the
command. It does not trace any activity that an agent might perform while processing that
command.
The way to collect the trace depends on whether the command is being run using either z/OS UNIX
System Services (z/OS UNIX) or JCL.
If you are unsure which option to use, contact your IBM Support representative and they will advise you
on the best way to collect trace for the issue that you are seeing.
Procedure
• If you are using z/OS UNIX, see “Collecting an agent trace from startup using z/OS UNIX” on page 451.
• If you are using JCL, see “Collecting an agent trace from startup using JCL” on page 452.
Collecting a trace of a command using z/OS UNIX
To collect a trace of a Managed File Transfer for z/OS command using z/OS UNIX System Services (z/OS
UNIX) carry out the following procedure.
Procedure
1.Bring up a command prompt, and navigate to the BFG_PROD/bin directory.
2.Run the command:
./command_name -trace classes=level -tracePath directory_path command_arguments
where
• command_name is the name of the command to be traced.
• classes=level is the trace level to use, and which classes to enable trace for. Unless otherwise
specified by your IBM Support Representative, set this to com.ibm.wmqfte=all.
• directory_path is the directory where the trace files will be written to.
• command_arguments are the arguments that need to be passed to the command, for example, the
name of the agent for the ftePingAgent command.
Results
The resultant trace files are written to the directory specified by the -tracePath parameter.
The trace files are called trace%PID%.txt.number, where:
456 Troubleshooting and Support for IBM MQ
• %PID% is the process identifier for the command.
• number is a sequence number for the trace file. Typically, the trace information generated by a
command is contained within a single trace file that has a sequence number of 0.
However, it is possible that a command will generate a lot of trace information. In this situation, the
trace will be written to multiple files. The current trace file has a sequence number of 0, the next oldest
trace file has a sequence number of 1, and so on.
Trace output for commands are written to a maximum of five wrapping trace files. The maximum size of
each trace file is 20MB.
Note: If the user running the command does not have permission to write to the directory specified by the
-tracePath parameter, the trace output is written to standard error.
Example
In this example, the fteListAgents command is traced, and the trace is written to the /u/fteuser
directory:
./fteListAgents -trace com.ibm.wmqfte=all -tracePath /u/fteuser
In this example, the fteCreateTransfer command is traced, and the trace is written to the /tmp
directory:
./fteCreateTransfer -trace com.ibm.wmqfte=all -tracePath /tmp -t text -sa AGENT1
-da AGENT2 -df /tmp/IEEUJV.txt "//'SYS1.SAMPLIB(IEEUJV)'"
The trace file written to /tmp only contains information about the processing performed by the
fteCreateTransfer command, such as, how the command builds the transfer request message that is
sent to the agent, and how long it waits for the agent to send back an acknowledgment indicating that it
has received the request. The trace file does not contain any information about the transfer itself.
Collecting a trace of a command using JCL
To collect a trace of a Managed File Transfer for z/OS command that is being submitted using JCL you
need to complete the following steps.
Procedure
1.Locate the data set containing the JCL for the command that needs to be traced.
2.Within the data set, locate the member for that command.
3.Edit the member, and locate the line that contains the name of the command that needs to be traced.
Modify this line so that it includes the text after the command name and before the + sign:
-trace classes=level -tracePath directory_path
where:
• classes=level is the trace level to use, and which classes to enable trace for. Unless otherwise
specified by your IBM Support Representative, set this to com.ibm.wmqfte=all.
• directory_path is the z/OS UNIX System Services directory where the trace files will be written to.
4.Submit the member.
5.After the issue has been reproduced, edit the member again and remove the text:
-trace classes=level -tracePath directory_path
that you added in Step “3” on page 457.
Results
The resultant trace files are written to the directory specified by the -tracePath parameter.
IBM MQ troubleshooting and support 457
The trace files are called trace%PID%.txt.number, where:
• %PID% is the process identifier for the command.
• number is a sequence number for the trace file. Typically, the trace information generated by a
command is contained within a single trace file that has a sequence number of 0.
However, it is possible that a command will generate a lot of trace information. In this situation, the
trace will be written to multiple files. The current trace file has a sequence number of 0, the next oldest
trace file has a sequence number of 1, and so on.
Trace output for commands are written to a maximum of five wrapping trace files. The maximum size of
each trace file is 20MB.
Note: If the user running the command does not have permission to write to the directory specified by the
-tracePath parameter, the trace output is written to standard error.
Example
In this example, the member BFGMNLI has been modified to trace the fteListMonitors command:
//********************************************************************
//* 
//* Licensed Materials - Property of IBM
//*
//* 5655-MF9
//*
//* (C) Copyright IBM Corp. 2013, 2022. All Rights Reserved.
//* 
//********************************************************************
//* fteListMonitors
//********************************************************************
//BFGCMD EXEC PGM=IKJEFT01,REGION=0M
//SYSEXEC DD DSN=++LIBRARY++,DISP=SHR
//SYSTSPRT DD SYSOUT=*
//STDOUT DD SYSOUT=*
//STDERR DD SYSOUT=*
//SYSTSIN DD *
%BFGCMD CMD=fteListMonitors -trace com.ibm.wmqfte=all -tracePath /u/trace +
-v -p QM1
/*
//
When the member is submitted, the fteListMonitors command writes trace to the z/OS UNIX
directory /u/trace.
Tracing Managed File Transfer for z/OS standalone database
loggers
The trace facility in Managed File Transfer for z/OS is provided to help IBM Support diagnose your
problems and issues. Various commands and properties control the behavior of this facility.
About this task
If you are asked to provide trace output to investigate an issue with a standalone database logger, use one
of the following options.
If you are unsure which option to use, contact your IBM Support representative and they will advise you
on the best way to collect trace for the issue that you are seeing.
Procedure
• If it is possible for you to stop a logger for a short period of time, collect a trace of the logger from
startup.
458 Troubleshooting and Support for IBM MQ
For more information, see “Collecting a Managed File Transfer for z/OS standalone database logger
trace from startup” on page 459.
• If it is not possible for you to stop a logger, then collect a trace dynamically using the
fteSetLoggerTraceLevel command.
For more information, see “Collecting a Managed File Transfer for z/OS standalone database logger
trace dynamically” on page 461.
Collecting a Managed File Transfer for z/OS standalone database logger
trace from startup
Where it is possible for you to stop a logger for a short period of time, you should collect IBM MQ Managed
File Transfer logger trace from startup.
About this task
The way to collect the trace depends on whether the logger is being administered using z/OS UNIX
System Services (z/OS UNIX) or JCL.
If you are unsure which of the following options to use, contact your IBM Support representative and they
will advise you on the best way to collect trace for the issue that you are seeing.
Procedure
• If you are using:
– z/OS UNIX, see “Collecting a standalone database logger trace from startup using z/OS UNIX” on
page 459.
– JCL, see “Collecting a standalone database logger trace from startup using JCL” on page 460.
Collecting a standalone database logger trace from startup using z/OS UNIX
To collect a trace of a Managed File Transfer for z/OS logger that is being administered using
z/OS UNIX System Services (z/OS UNIX) from startup, you need to set various properties in the
logger.properties file for that logger before it is started.
About this task
To collect a trace from startup, complete the following steps.
Procedure
1.Locate the logger.properties file for the logger that needs to be traced.
The logger.properties file can be found in the BFG_DATA/mqft/config/
coordination_qmgr_name/loggers/logger_name directory.
2.Edit the file and add entries for the following properties:
• trace=trace specification
The trace property determines the internal classes and packages that are to be traced.
Unless otherwise specified by your IBM Support representative, set this property to the value
com.ibm.wmqfte=all.
• traceFiles=number of trace files to use
• traceSize=size of each trace file, in MB
The traceFiles and traceSize properties are used to control the amount of trace data that is
collected. You should set these properties to large values, to collect as much trace data as possible.
IBM MQ troubleshooting and support 459
For example, to collect 1GB of wrapping trace using the trace specification com.ibm.wmqfte=all,
add the following lines to the logger.properties file:
trace=com.ibm.wmqfte=all
traceFiles=5
traceSize=200
This results in the logger writing trace data to a maximum of 5 files, where each file has a size of
200MB.
For more information on these logger properties, see The MFT logger.properties file.
3.Stop the logger that needs to be traced, using the fteStopLogger command.
4.Start the logger, by running the fteStartLogger command.
5.Reproduce the issue.
6.Stop the logger.
7.Edit the logger.properties file for the logger, and remove the entries for the trace, traceFiles,
and traceSize properties that you added in step “2” on page 459.
This ensures that trace is not enabled the next time you restart the logger.
Results
The resultant trace files are written to the BFG_DATA/mqft/logs/coordination_qmgr_name/
loggers/logger_name/logs/trace%PID% directory, where %PID% is the process identifier for the
logger.
Collecting a standalone database logger trace from startup using JCL
To collect a trace of a Managed File Transfer for z/OS logger that is being administered using JCL from
startup, you need to set various properties in the logger.properties file for that logger before it is
started.
About this task
To collect a trace from startup, complete the following steps.
Procedure
1.Locate the logger.properties file for the logger that needs to be traced.
The logger.properties file can be found in the BFG_DATA/mqft/config/
coordination_qmgr_name/loggers/logger_name directory.
2.Edit the file and add entries for the following properties:
• trace=trace specification
The trace property determines the internal classes and packages that are to be traced.
Unless otherwise specified by your IBM Support representative, set this property to the value
com.ibm.wmqfte=all.
• traceFiles=number of trace files to use
• traceSize=size of each trace file, in MB
The traceFiles and traceSize properties are used to control the amount of trace data that is
collected. You should set these properties to large values, to collect as much trace data as possible.
For example, to collect 1GB of wrapping trace using the trace specification com.ibm.wmqfte=all,
add the following lines to the logger.properties file:
trace=com.ibm.wmqfte=all
traceFiles=5
traceSize=200
460 Troubleshooting and Support for IBM MQ
This results in the logger writing trace data to a maximum of 5 files, where each file has a size of
200MB.
For more information on these logger properties, see The MFT logger.properties file.
3.Locate the data set containing the JCL for the logger that needs to be traced.
4.Submit the BFGLGSP member within the data set to stop the logger.
5.Restart the logger, by submitting the BFGLGST member in the data set.
6.Reproduce the issue.
7.Submit the BFGLGSP member in the data set to stop the logger again.
8.Edit the logger.properties file for the logger, and remove the entries for the trace, traceFiles,
and traceSize properties that you added in step “2” on page 460.
This ensures that trace is not enabled the next time you restart the logger.
Results
The resultant trace files are written to the BFG_DATA/mqft/logs/coordination_qmgr_name/
loggers/logger_name/logs/trace%PID% directory, where %PID% is the process identifier for the
logger.
Collecting a Managed File Transfer for z/OS standalone database logger
trace dynamically
Where it is not possible for you to stop a logger for a short period of time, you should collect Managed File
Transfer for z/OS logger trace dynamically.
About this task
The way to collect the trace depends on whether the logger is being administered using z/OS UNIX
System Services (z/OS UNIX) or JCL.
If you are unsure which of the following options to use, contact your IBM Support representative and they
will advise you on the best way to collect trace for the issue that you are seeing.
Procedure
• If you are using:
– z/OS UNIX, see “Collecting a standalone database logger trace dynamically using z/OS UNIX” on
page 461.
– JCL, see “Collecting a standalone database logger trace dynamically using JCL” on page 463.
Collecting a standalone database logger trace dynamically using z/OS UNIX
Under z/OS UNIX System Services (z/OS UNIX), you can use the fteSetLoggerTraceLevel command
to collect trace from a running logger. This can be very useful if IBM Support need to see a trace from a