as well, but only at the moment their code is executed.
Hence, none of the available benchmarking tools were able
to measure a statistically signiﬁcant deviation from baseline
performance resulting from patchd. Therefore, we designed
our own microbenchmarking tool called ZygoteBench. Zy-
goteBench measures the time that it takes zygote to create
a new process on an Android device.
ZygoteBench consists of two components, an application
and a service marked to be run as a separate process. Every
time the main application starts the service, zygote forks
a new process for the service class. The service measures
the time diﬀerence between issuing the start command and
when the service class is actually executed. After the mea-
surement, the service stops itself, killing the service process.
For each measurement, the service is started ten times and
the result is the mean of the ten measurements.
We ran ZygoteBench on three of our test devices before
and after installing PatchDroid. Speciﬁcally, we ran our
benchmarks on a Motorola FlipOut, an HTC Wildﬁre S,
and a Samsung Galaxy Nexus. The Motorola FlipOut and
HTC Wildﬁre had patches installed against vulnerabilities
in vold and zygote. The Galaxy Nexus had one patch in-
stalled in system server. Figure 6 shows that there is only a
minimal and negligible overhead added through PatchDroid.
On the Galaxy Nexus, we measured an overhead of 16 mil-
liseconds on average for creating a new process and starting
a service by zygote. We measured an average of 43 and 41
milliseconds overhead for the FlipOut and Wildﬁre respec-
tively. These small increases in process creation time are
not noticeable by the user in any way.
7.3 User Trials
To gain greater assurance in PatchDroid’s stability and
eﬃcacy, we recruited a number of users to install and run
PatchDroid on their devices. We then asked these users to
run exploits against their devices while running PatchDroid.
Table 1 shows the devices for our evaluation. The table
includes all devices that we tested PatchDroid on, including
our own devices we used during development. The result of
this study showed that 100% of exploits run against Patch-
Droid were successfully prevented.
266
Android Veriﬁed Bugs
External Exploit Attempt
# Device
1 Motorola FlipOut
Sony Ericsson U20i
HTC Desire
Samsung GT-P1000
HTC Desire
HTC Wildﬁre s
Nexus S (Samsung)
Sony Ericsson R800x
HTC Droid Incredible
2.1
2.1
2.2 (cm6)
2.2.0
2.2.2
2.3.3
2.3.3
2.3.3
2.3.4
Zimperlich
Zimperlich
?
?
?
GingerBreak + zergRush
GingerBreak
GingerBreak + zergRush
?
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
X
10
Samsung SCH-I510
2.3.6
Galaxy Nexus (Samsung)
4.0.1
HTC One V
4.0.4
Lenovo P700i
4.0.4
Sony Ericsson Xperia Ultimate HD 4.0.4
?
local sms spooﬁng
local sms spooﬁng
?
?
Table 1: Tested devices. Veriﬁed Bugs = vulnerable to bug, External = device not owned by us, Exploit
attempt = exploit was run and PatchDroid prevented it.
7.4 The Master Key Bug and ReKey
While this paper was under review, the so-called Master
Key bug [13] was disclosed. The bug can be used for priv-
ilege escalation by adding malicious functionality to APKs
that are signed by a platform (manufacturer) key. We im-
plemented a patch for the Master Key bug using our Patch-
Droid system.
Due to the critical nature of the bug, we decided to pro-
vide the patch to the general public. For this, we created
the ReKey application. ReKey is a subset of PatchDroid re-
stricted to its patch injection functionality. ReKey5 is avail-
able in the Google Play Store and currently has about 12,000
active installs.
7.5 Discussion
patchd requires root privileges to be able to attach to
processes such as zygote. Therefore, users can only in-
stall PatchDroid on already rooted devices. However, since
PatchDroid mainly targets privilege escalation vulnerabil-
ities, we could bootstrap PatchDroid by exploiting one of
the vulnerabilities to gain root privileges and subsequently
patching the vulnerability in order to secure the device.
The PatchDroid application registers itself to be run at
device startup in order to launch patchd. This opens the pos-
sibility for race conditions against malicious software since
there is no guarantee that PatchDroid is started ﬁrst. How-
ever, with root privileges we could modify the system to
ensure that PatchDroid starts before any other potentially
malicious processes.
8. RELATED WORK
We are not the ﬁrst to investigate dynamic runtime up-
dating. The POLUS [7] system is based on patch library
injection that is similar to our solution. However, POLUS
requires access to the source code of the target application.
Furthermore, the system is designed to keep software run-
ning continuously while updating it to new versions. There-
fore, it implements a substantial amount of additional func-
tionality to track and reset state. In contrast, our approach
is more lightweight since we specially target ﬁxing security
problems and, thus, do not need to worry about issues such
as changing data structures. Pin [12] performs instrumen-
tation by taking control of the program just after it loads
5
http://play.google.com/store/apps/details?id=io.rekey.rekey
into memory. However, unlike the work we describe in this
paper, Pin does not run on Android and does not focus
on ﬁxing vulnerabilities on legacy Android systems. Simi-
larly, Dyninst [1] is a multi-platform runtime code-patching
library. It provides an API to permit the insertion of code
into a running program. Like Pin, Dyninst does not run on
Android and does not focus on ﬁxing vulnerabilities. Other
eﬀorts along these lines also either rely on source code avail-
ability, or changes to the tool chain (e.g., [5, 2, 14, 18, 11,
20, 3]). Our solution shares goals and techniques found in
third-party patching and hotpatching systems for MS Win-
dows [23].
Our trace patching method shares similarities with sys-
trace [22]. Systrace enforces relatively simple policies on
syscalls made by applications. In contrast, trace patching
is focused on vulnerability mitigation, and is capable of en-
forcing complex constraints over program states due to its
use of the ptrace API.
The ksplice [4] system provides a method for hot patch-
ing the Linux kernel by loading specialized kernel modules.
Since Android uses the Linux kernel, ksplice could be adapted
to implement Android kernel patching.
9. CONCLUSIONS
Vasts numbers of mobile devices in the ﬁeld run outdated
versions of their operating system and software stack. One
notable example are mobile devices based on the Android
platform. Almost 40% of all Android devices run software
that is more then 24 months old and is no longer supported
by the device manufacturer. Most of these devices contain
severe security vulnerabilities that can be used for arbitrary
code execution and privilege escalation.
In this work, we presented PatchDroid, a system to patch
security vulnerabilities on legacy Android devices. Patch-
Droid uses dynamic instrumentation techniques to patch
vulnerabilities in memory, and uses a patch distribution ser-
vice so that patches only have to be created once and can
be deployed on every device. Because patches are injected
directly into processes, PatchDroid does not need to ﬂash or
modify system partitions or binaries, making it universally
deployable even on tightly controlled devices.
We evaluated PatchDroid using devices from diﬀerent man-
ufacturers and, in addition, conducted user trials on a small
group of users. Our evaluation shows that our method ef-
267
fectively ﬁxes security vulnerabilities on legacy Android de-
vices. It does not produce any noticeable performance over-
head and is suitable to be used in the real world. Through
the public release of ReKey, we gained further conﬁdence in
the eﬀectiveness of our approach.
We believe that our method for ﬁxing security vulnera-
bilities has broader application than Android-based mobile
devices. Our system provides insights into how third-party
distributed patching can be realized for general embedded
devices that are no longer supported by a manufacturer.
Our current approach is restricted to patching userspace
vulnerabilities within system frameworks or user applica-
tions. As future work, we plan to investigate extending our
methods to kernel vulnerabilities.
Acknowledgements
This work was supported by the Oﬃce of Naval Research
(ONR) under grant N000141310102, the National Science
Foundation (NSF) under grant CNS-1116777, and Secure
Business Austria.
Engin Kirda thanks Sy and Laurie Sternberg for their gen-
erous support. We would also like to thank everyone who
helped by evaluating early versions of PatchDroid, with spe-
cial thanks to Joshua J. Drake.
10. REFERENCES
[1] DynInst. http://www.dyninst.org/.
[2] Altekar, G., Bagrak, I., Burstein, P., and
Schultz, A. OPUS: Online Patches and Updates for
Security. In Proceedings of the USENIX Security
Symposium (2005).
[11] Hicks, M., Moore, J. T., and Nettles, S.
Dynamic software updating. In Proceedings of the
ACM Conference on Programming Language Design
and Implementation (2001).
[12] Intel. Pin - A Dynamic Binary Instrumentation Tool.
http://software.intel.com/en-
us/articles/pintool.
[13] Jeff Forristal. Uncovering Android Master Key
that makes 99% of devices vulnerable.
http://bluebox.com/corporate-blog/bluebox-
uncovers-android-master-key/, July 2013.
[14] Johnson, N. M., Caballero, J., Chen, K. Z.,
McCamant, S., Poosankam, P., Reynaud, D.,
and Song, D. Diﬀerential Slicing: Identifying Causal
Execution Diﬀerences for Security Applications. In
Proceedings of the 2011 IEEE Symposium on Security
and Privacy (2011).
[15] Kramer, S. Rage aginst the cage - adbd root exploit.
http://stealth.openwall.net/xSports/
RageAgainstTheCage.tgz, 2010.
[16] Kramer, S. Zimperlich zygote root exploit.
http://c-skills.blogspot.com/2011/02/
zimperlich-sources.html, 2010.
[17] Lookout Inc. DroidDream.
http://blog.mylookout.com/2011/03/security-
alert-malware-found-in-official-android-
market-droiddream/, March 2011.
[18] Makris, K., and Bazzi, R. A. Immediate
multi-threaded dynamic software updates using stack
reconstruction. In Proceedings of the 2009 conference
on USENIX Annual technical conference (2009).
[3] Altekar, G., Bagrak, I., Burstein, P., and
[19] Martin, J. X-Ray App Identiﬁes Android
Schultz, A. OPUS: Online Patches and Updates for
Security. In In 14th USENIX Security Symposium
(2005), pp. 287–302.
[4] Arnold, J., and Kaashoek, M. F. Ksplice:
Automatic rebootless kernel updates. In Proceedings of
the ACM EuroSys Conference (EuroSys 2009)
(Nuremberg, Germany, March 2009).
[5] Bratus, S., Oakley, J., Ramaswamy, A., Smith,
S. W., and Locasto, M. E. Katana: Towards
Patching as a Runtime Part of the
Compiler-Linker-Loader Toolchain. International
Journal of Secure Software Engineering (IJSSE) 1, 3
(September 2010).
[6] Cannon, T. Android SMS Spoofer. https:
//github.com/thomascannon/android-sms-spoof,
2012.
[7] Chen, H., Yu, J., Chen, R., Zang, B., and chung
Yew, P. Polus: A powerful live updating system. In
in Proc. of the 29th Intl Conf. on Software
Engineering (2007).
[8] CVE Details. Google : Android : Security
Vulnerabilities. http:
//cvedetails.com/vulnerability-list/vendor_id-
1224/product_id-19997/Google-Android.html, 2013.
[9] Duo Securtiy. X-Ray for Android. http://xray.io.
[10] Grace, M., Zhou, Y., Wang, Z., and Jiang, X.
Systematic Detection of Capability Leaks in Stock
Android Smartphones. In Proceedings of the 19th
Network and Distributed System Security Symposium
(NDSS 2012) (February 2012).
Vulnerabilities But Doesn’t Fix Them.
http://blogs.cio.com/smartphones/17286/x-ray-
app-identifies-android-vulnerabilities-doesnt-
fix-them, 2012.
[20] Neamtiu, I., Hicks, M., Stoyle, G., and Oriol,
M. Practical dynamic software updating for C.
SIGPLAN Notices 41, 6 (June 2006).
[21] Oracle. Java Native Interface (JNI).
http://docs.oracle.com/javase/6/docs/
technotes/guides/jni/spec/jniTOC.html.
[22] Provos, N. Improving host security with system call
policies. In In Proceedings of the 12th Usenix Security
Symposium (2002).
[23] Sotirov, A. Hotpatching and the Rise of Third-Party
Patches.
http://www.blackhat.com/presentations/bh-usa-
06/BH-US-06-Sotirov.pdf, July 2006.
[24] T-Mobile. SMiShing and SMS Spam. http://www.t-
mobile.com/Company/PrivacyResources.aspx?tp=
Abt_Tab_PhishingSMishing&tsp=Abt_Sub_
IdentityTheft_SMiShing, 2013.
[25] The Android Exploid Crew. CVE-2011-1823 - vold
vulnerability ”GingerBreak”.
http://www.cvedetails.com/cve/CVE-2011-1823/.
[26] The Revolutionary development team.
CVE-2011-3874 - libsysutils rooting vulnerability
”zergRush”. https://code.google.com/p/android/
issues/detail?id=21681, 2011.
268