### 5. Performance Evaluation

Existing benchmarking tools were unable to detect any statistically significant performance deviations caused by PatchDroid. To address this, we developed a custom microbenchmarking tool called ZygoteBench. ZygoteBench measures the time it takes for the zygote process to create a new process on an Android device.

#### 5.1 ZygoteBench Design

ZygoteBench consists of two main components: an application and a service that runs as a separate process. Each time the main application starts the service, the zygote forks a new process for the service class. The service then measures the time difference between issuing the start command and the actual execution of the service class. After the measurement, the service stops itself, terminating the service process. For each measurement, the service is started ten times, and the result is the mean of these ten measurements.

#### 5.2 Experimental Setup

We ran ZygoteBench on three test devices before and after installing PatchDroid: a Motorola FlipOut, an HTC Wildfire S, and a Samsung Galaxy Nexus. The Motorola FlipOut and HTC Wildfire S had patches installed against vulnerabilities in vold and zygote, while the Galaxy Nexus had one patch installed in the system server.

#### 5.3 Results

Figure 6 shows that PatchDroid introduces only a minimal and negligible overhead. On the Galaxy Nexus, we measured an average overhead of 16 milliseconds for creating a new process and starting a service via zygote. For the Motorola FlipOut and HTC Wildfire S, the average overhead was 43 and 41 milliseconds, respectively. These small increases in process creation time are not noticeable to the user.

### 6. User Trials

To ensure the stability and efficacy of PatchDroid, we recruited users to install and run it on their devices. We then asked these users to run exploits against their devices while PatchDroid was active. Table 1 lists the devices used in our evaluation, including both our own devices and those provided by external users. The results showed that 100% of the exploits run against PatchDroid were successfully prevented.

| Device | Android Version | Exploit Attempt |
|--------|-----------------|-----------------|
| Motorola FlipOut | 2.1 | X |
| Sony Ericsson U20i | 2.1 | X |
| HTC Desire | 2.2 (cm6) | X |
| Samsung GT-P1000 | 2.2.0 | X |
| HTC Desire | 2.2.2 | X |
| HTC Wildfire S | 2.3.3 | X |
| Nexus S (Samsung) | 2.3.3 | X |
| Sony Ericsson R800x | 2.3.3 | X |
| HTC Droid Incredible | 2.3.4 | X |
| Samsung SCH-I510 | 2.3.6 | X |
| Galaxy Nexus (Samsung) | 4.0.1 | X |
| HTC One V | 4.0.4 | X |
| Lenovo P700i | 4.0.4 | X |
| Sony Ericsson Xperia Ultimate HD | 4.0.4 | X |

**Table 1: Tested Devices. Exploit attempt = exploit was run and PatchDroid prevented it.**

### 7. The Master Key Bug and ReKey

During the review of this paper, the so-called "Master Key" bug [13] was disclosed. This bug can be exploited for privilege escalation by adding malicious functionality to APKs signed with a platform (manufacturer) key. We implemented a patch for the Master Key bug using PatchDroid.

Given the critical nature of the bug, we decided to make the patch available to the public. We created the ReKey application, which is a subset of PatchDroid focused on patch injection. ReKey is available on the Google Play Store and has approximately 12,000 active installations.

### 8. Discussion

PatchDroid requires root privileges to attach to processes like zygote. Therefore, users can only install PatchDroid on already rooted devices. However, since PatchDroid primarily targets privilege escalation vulnerabilities, it can be bootstrapped by exploiting one of these vulnerabilities to gain root privileges and subsequently patch the vulnerability to secure the device.

The PatchDroid application registers itself to run at device startup to launch the patchd component. This setup opens the possibility for race conditions against malicious software, as there is no guarantee that PatchDroid will start first. However, with root privileges, we can modify the system to ensure that PatchDroid starts before any potentially malicious processes.

### 9. Related Work

We are not the first to investigate dynamic runtime updating. The POLUS [7] system uses a similar approach to patch library injection but requires access to the source code of the target application. POLUS is designed to keep software running continuously while updating it, implementing substantial additional functionality to track and reset state. In contrast, our approach is more lightweight, focusing specifically on fixing security problems without needing to manage issues like changing data structures.

Pin [12] performs instrumentation by taking control of the program just after it loads into memory. However, Pin does not run on Android and does not focus on fixing vulnerabilities on legacy Android systems. Similarly, Dyninst [1] is a multi-platform runtime code-patching library that provides an API for inserting code into a running program. Like Pin, Dyninst does not run on Android and does not focus on security fixes.

Other efforts in this area either rely on source code availability or require changes to the toolchain (e.g., [5, 2, 14, 18, 11, 20, 3]). Our solution shares goals and techniques with third-party patching and hotpatching systems for MS Windows [23].

Our trace patching method is similar to systrace [22], which enforces simple policies on syscalls made by applications. In contrast, trace patching focuses on vulnerability mitigation and can enforce complex constraints over program states using the ptrace API.

The ksplice [4] system provides a method for hot patching the Linux kernel by loading specialized kernel modules. Since Android uses the Linux kernel, ksplice could be adapted to implement Android kernel patching.

### 10. Conclusions

A vast number of mobile devices run outdated versions of their operating system and software stack. One notable example is the Android platform, where almost 40% of devices run software that is more than 24 months old and no longer supported by the manufacturer. Many of these devices contain severe security vulnerabilities that can be exploited for arbitrary code execution and privilege escalation.

In this work, we presented PatchDroid, a system to patch security vulnerabilities on legacy Android devices. PatchDroid uses dynamic instrumentation techniques to patch vulnerabilities in memory and a patch distribution service to deploy patches universally. Because patches are injected directly into processes, PatchDroid does not need to flash or modify system partitions or binaries, making it deployable even on tightly controlled devices.

We evaluated PatchDroid using devices from different manufacturers and conducted user trials. Our evaluation shows that PatchDroid effectively fixes security vulnerabilities with no noticeable performance overhead. Through the public release of ReKey, we gained further confidence in the effectiveness of our approach.

We believe that our method for fixing security vulnerabilities has broader applications beyond Android-based mobile devices. Our system provides insights into how third-party distributed patching can be realized for general embedded devices no longer supported by a manufacturer.

Our current approach is restricted to patching userspace vulnerabilities within system frameworks or user applications. As future work, we plan to investigate extending our methods to kernel vulnerabilities.

### Acknowledgements

This work was supported by the Office of Naval Research (ONR) under grant N000141310102, the National Science Foundation (NSF) under grant CNS-1116777, and Secure Business Austria. Engin Kirda thanks Sy and Laurie Sternberg for their generous support. We would also like to thank everyone who helped by evaluating early versions of PatchDroid, with special thanks to Joshua J. Drake.

### References

[1] DynInst. http://www.dyninst.org/.

[2] Altekar, G., Bagrak, I., Burstein, P., and Schultz, A. OPUS: Online Patches and Updates for Security. In Proceedings of the USENIX Security Symposium (2005).

[3] Altekar, G., Bagrak, I., Burstein, P., and Schultz, A. OPUS: Online Patches and Updates for Security. In In 14th USENIX Security Symposium (2005), pp. 287–302.

[4] Arnold, J., and Kaashoek, M. F. Ksplice: Automatic rebootless kernel updates. In Proceedings of the ACM EuroSys Conference (EuroSys 2009) (Nuremberg, Germany, March 2009).

[5] Bratus, S., Oakley, J., Ramaswamy, A., Smith, S. W., and Locasto, M. E. Katana: Towards Patching as a Runtime Part of the Compiler-Linker-Loader Toolchain. International Journal of Secure Software Engineering (IJSSE) 1, 3 (September 2010).

[6] Cannon, T. Android SMS Spoofer. https://github.com/thomascannon/android-sms-spoof, 2012.

[7] Chen, H., Yu, J., Chen, R., Zang, B., and chung Yew, P. Polus: A powerful live updating system. In in Proc. of the 29th Intl Conf. on Software Engineering (2007).

[8] CVE Details. Google : Android : Security Vulnerabilities. http://cvedetails.com/vulnerability-list/vendor_id-1224/product_id-19997/Google-Android.html, 2013.

[9] Duo Security. X-Ray for Android. http://xray.io.

[10] Grace, M., Zhou, Y., Wang, Z., and Jiang, X. Systematic Detection of Capability Leaks in Stock Android Smartphones. In Proceedings of the 19th Network and Distributed System Security Symposium (NDSS 2012) (February 2012).

[11] Hicks, M., Moore, J. T., and Nettles, S. Dynamic software updating. In Proceedings of the ACM Conference on Programming Language Design and Implementation (2001).

[12] Intel. Pin - A Dynamic Binary Instrumentation Tool. http://software.intel.com/en-us/articles/pintool.

[13] Jeff Forristal. Uncovering Android Master Key that makes 99% of devices vulnerable. http://bluebox.com/corporate-blog/bluebox-uncovers-android-master-key/, July 2013.

[14] Johnson, N. M., Caballero, J., Chen, K. Z., McCamant, S., Poosankam, P., Reynaud, D., and Song, D. Differential Slicing: Identifying Causal Execution Differences for Security Applications. In Proceedings of the 2011 IEEE Symposium on Security and Privacy (2011).

[15] Kramer, S. Rage against the cage - adbd root exploit. http://stealth.openwall.net/xSports/RageAgainstTheCage.tgz, 2010.

[16] Kramer, S. Zimperlich zygote root exploit. http://c-skills.blogspot.com/2011/02/zimperlich-sources.html, 2010.

[17] Lookout Inc. DroidDream. http://blog.mylookout.com/2011/03/security-alert-malware-found-in-official-android-market-droiddream/, March 2011.

[18] Makris, K., and Bazzi, R. A. Immediate multi-threaded dynamic software updates using stack reconstruction. In Proceedings of the 2009 conference on USENIX Annual technical conference (2009).

[19] Martin, J. X-Ray App Identifies Android Vulnerabilities But Doesn’t Fix Them. http://blogs.cio.com/smartphones/17286/x-ray-app-identifies-android-vulnerabilities-doesnt-fix-them, 2012.

[20] Neamtiu, I., Hicks, M., Stoyle, G., and Oriol, M. Practical dynamic software updating for C. SIGPLAN Notices 41, 6 (June 2006).

[21] Oracle. Java Native Interface (JNI). http://docs.oracle.com/javase/6/docs/technotes/guides/jni/spec/jniTOC.html.

[22] Provos, N. Improving host security with system call policies. In In Proceedings of the 12th Usenix Security Symposium (2002).

[23] Sotirov, A. Hotpatching and the Rise of Third-Party Patches. http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Sotirov.pdf, July 2006.

[24] T-Mobile. SMiShing and SMS Spam. http://www.t-mobile.com/Company/PrivacyResources.aspx?tp=Abt_Tab_PhishingSMishing&tsp=Abt_Sub_IdentityTheft_SMiShing, 2013.

[25] The Android Exploid Crew. CVE-2011-1823 - vold vulnerability “GingerBreak”. http://www.cvedetails.com/cve/CVE-2011-1823/.

[26] The Revolutionary development team. CVE-2011-3874 - libsysutils rooting vulnerability “zergRush”. https://code.google.com/p/android/issues/detail?id=21681, 2011.