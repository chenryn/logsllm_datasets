### Performance and Analysis of the Tool

**TOR (Time for Constraint Generation) and TAINT (Time for Taint Analysis)**

- **TOR** represents the time taken for constraint generation.
- **TAINT** denotes the time taken for taint analysis.

The constraints generated can be resolved in one of two ways:
- **LPSOLVE**: Time taken by the IIS (Irreducible Infeasible Subset) detection-based approach.
- **HIERSOLVE**: Time taken by the hierarchical solver approach.

| Tool Component | wu-ftpd-2.6.2 | sendmail-8.7.6 |
|----------------|---------------|----------------|
| CODESURFER     | 12.54 sec     | 30.09 sec      |
| GENERATOR      | 74.88 sec     | 266.39 sec     |
| TAINT          | 9.32 sec      | 28.66 sec      |
| LPSOLVE        | 3.81 sec      | 13.10 sec      |
| HIERSOLVE      | 10.08 sec     | 25.82 sec      |
| TOTAL (LP/HIER)| 100.55/106.82 sec | 338.24/350.96 sec |

**Number of Constraints Generated**
- **PRE-TAINT**: Number of constraints output by the constraint generator.
- **POST-TAINT**: Number of constraints after taint analysis.

| Constraints    | wu-ftpd-2.6.2 | sendmail-8.7.6 |
|----------------|---------------|----------------|
| PRE-TAINT      | 22,008        | 104,162        |
| POST-TAINT     | 14,972        | 24,343         |

**Table 1: Performance of the Tool**

### Efficiency and Precision of Solvers

- The IIS detection-based approach is more efficient but less mathematically precise.
- The hierarchical solver is mathematically precise but slower.
- For wu-ftpd-2.6.2, fewer than 5% of the constraint variables, and for sendmail-8.7.6, fewer than 2.25% of the constraint variables, obtained imprecise values using the IIS detection-based approach.
- This imprecision did not significantly affect the number of warnings. For wu-ftpd-2.6.2 and sendmail-8.7.6, the IIS-based approach resulted in 1 and 2 additional false alarms, respectively.

### Adding Context Sensitivity

- **Context-Sensitive Analysis** on wuftpd-2.6.2 using both the constraint inlining and summary constraints approaches.
- Adding context sensitivity does not find new overruns but makes the constraints more precise, reflecting the call-return semantics of functions.
- **Metric**: Number of range variables refined compared to context-insensitive analysis.

**Context-Insensitive Analysis**
- Yields values for 7,310 range variables.

**Summary Constraints Approach**
- 72 out of 7,310 range variables obtained more precise values.
- 1% increase in the number of constraints due to summarization.

**Constraint Inlining Approach**
- 5.8× increase in the number of constraints.
- 8.7× increase in the number of constraint variables.
- 7,310 range variables specialized to 63,704 range variables.
- 7,497 out of 63,704 specialized range variables obtained more precise values.
- 406 out of 7,310 unspecialized range variables had more precise values in at least one calling context.

**Example: Variable `msgcode`**
- Summary constraints approach: Value [530..550].
- Constraint inlining: Infers that `pr_mesg` is always called with the value 530 from the function `pass` in `ftpd.c`.

### Effects of Pointer Analysis

- Reduces false negatives by correctly inferring pointer relationships.
- Without pointer analysis, fewer constraints are generated, leading to fewer warnings and potential false negatives.
- Example: `sendmail-8.7.6` missed an off-by-one bug without pointer analysis.

### Shortcomings and Future Work

- **Flow Insensitivity**: Leads to false alarms; transitioning to Static Single Assignment (SSA) representation can add flow sensitivity but increases the number of constraint variables.
- **Pointer Analysis**: Modeling constraints in terms of pointers to buffers rather than buffers themselves can miss overruns. Improving pointer analysis algorithms can eliminate false negatives.

### Conclusions

- Demonstrated a lightweight technique to detect buffer overrun vulnerabilities in C source code.
- Applied to real-world examples, identifying new vulnerabilities in security-critical packages.
- Uses linear programming and provides enhanced context sensitivity.
- Coupled with CodeSurfer's static slicing, aids in comprehending and eliminating bugs.

### Acknowledgments

- Thanks to the Wisconsin Safety Analyzer research group, Michael Ferris, Aditya Rao, and anonymous reviewers for their suggestions.

### References

[References listed as provided, with proper formatting and citation.]

This optimized version of the text aims to enhance clarity, coherence, and professionalism, making it easier to understand and follow.