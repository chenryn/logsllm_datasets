# 第三方(远程)网络驱动程序
如前所述*什么是 Docker 网络*？部分，除了 Docker 提供的内置或本地网络驱动程序外，CNM 还支持社区和供应商创建的网络驱动程序。这些第三方驱动程序的一些示例包括 Contiv、Weave、Kuryr 和 Calico。使用这些第三方驱动程序之一的好处之一是，它们完全支持云托管环境(如 AWS)中的部署。为了使用这些驱动程序，需要在单独的安装步骤中为每个 Docker 主机安装它们。每个第三方网络驱动程序都有自己的一套功能。以下是 Docker 在参考体系结构文档中共享的这些驱动程序的概述:
![](img/4b8d5ba1-8d15-41fe-9a21-fe4577e95705.png)
尽管这些第三方驱动程序都有自己独特的安装、设置和执行方法，但一般步骤是相似的。首先，下载驱动程序，然后处理任何配置设置，最后运行驱动程序。这些远程驱动程序通常不需要集群模式，可以使用也可以不使用。作为一个例子，让我们深入研究使用编织驱动程序。要安装编织网络驱动程序，请在每个 Docker 主机上发出以下命令:
```
# Install the weave network driver plug-in
sudo curl -L git.io/weave -o /usr/local/bin/weave
sudo chmod a+x /usr/local/bin/weave
# Disable checking for new versions
export CHECKPOINT_DISABLE=1
# Start up the weave network
weave launch [for 2nd, 3rd, etc. optional hostname or IP of 1st Docker host running weave]
# Set up the environment to use weave
eval $(weave env)
```
上述步骤需要在每个 Docker 主机上完成，这些主机将用于运行通过编织网络相互通信的容器。launch 命令可以提供第一个 Docker 主机的主机名或 IP 地址，该主机已经设置好并运行编织网络，以便与之对等，这样它们的容器就可以进行通信。例如，如果您在`node02`上启动编织时已经用编织网络设置了`node01`，您将使用以下命令:
```
# Start up weave on the 2nd node
weave launch node01
```
或者，您可以使用 connect 命令连接新的(Docker 主机)对等方，从配置的第一台主机执行该命令。要添加`node02`(在编织安装并运行后)，使用以下命令:
```
# Peer host node02 with the weave network by connecting from node01
weave connect node02
```
您可以使用 weave 网络驱动程序，而无需在主机上启用集群模式。一旦安装并启动了 weave，并且对等体(其他 Docker 主机)已经连接，您的容器将自动利用 weave 网络，并且能够相互通信，而不管它们是在同一个 Docker 主机上还是在不同的 Docker 主机上。
编织网络会像任何其他网络一样显示在您的网络列表中:
![](img/77ef436f-4d57-4313-9ec0-9a109434c4f8.png)
让我们测试一下我们闪亮的新网络。首先，按照前面描述的步骤，确保您已经在所有要连接的主机上安装了 weave 驱动程序。确保使用带有`node01`作为参数的启动命令，或者从`node01`开始，对正在配置的每个附加节点使用连接命令。对于这个例子，我的实验室服务器被命名为 ubuntu-node01 和 ubuntu- `node02`。先说`node02`:
请注意以下内容，在`ubuntu-node01`上:
```
# Install and setup the weave driver
sudo curl -L git.io/weave -o /usr/local/bin/weave
sudo chmod a+x /usr/local/bin/weave
export CHECKPOINT_DISABLE=1
weave launch
eval $(weave env)
```
并且，在`ubuntu-node02`上，注意以下几点:
```
# Install and setup the weave driver
sudo curl -L git.io/weave -o /usr/local/bin/weave
sudo chmod a+x /usr/local/bin/weave
export CHECKPOINT_DISABLE=1
weave launch
eval $(weave env)
```
现在，回到`ubuntu-node01`，注意以下几点:
```
# Bring node02 in as a peer on node01's weave network
weave connect ubuntu-node02
```
![](img/c4bd83df-3b2a-4931-9dbd-bcd67e7bb982.png)
现在，让我们在每个节点上启动一个容器。确保我们为它们命名以便于识别，从`ubuntu-node01`开始:
```
# Run a container detached on node01
docker container run -d --name app01 alpine tail -f /dev/null
```
![](img/3a1ca418-01e8-4774-96ac-cf34e7d948f3.png)
现在，在`ubuntu-node02`上发射一个容器:
```
# Run a container detached on node02
docker container run -d --name app02 alpine tail -f /dev/null
```
![](img/6e796094-aece-4402-96d3-fcb4854893d2.png)
太好了。现在，我们在两个节点上都运行了容器。看看他们能不能沟通。既然我们在`node02`上，我们就先去那里看看:
```
# From inside the app02 container running on node02,
# let's ping the app01 container running on node01
docker container exec -it app02 ping -c 4 app01
```
![](img/69fb11da-ad53-4ec5-8b6a-f4ba031e70e4.png)
耶！成功了。让我们试着走另一条路:
```
# Similarly, from inside the app01 container running on node01,
# let's ping the app02 container running on node02