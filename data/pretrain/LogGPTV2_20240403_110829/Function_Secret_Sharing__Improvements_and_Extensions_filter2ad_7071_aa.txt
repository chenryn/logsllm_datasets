# Title: Function Secret Sharing: Improvements and Extensions

## Authors:
- Elette Boyle, IDC Herzliya, Israel
- Niv Gilboa, Ben Gurion University, Israel
- Yuval Ishai, Technion and UCLA

## Abstract
Function Secret Sharing (FSS), introduced by Boyle et al. (Eurocrypt 2015), is a method for additively secret-sharing a function from a given family \( F \). Specifically, an m-party FSS scheme splits a function \( f : \{0, 1\}^n \rightarrow G \) into functions \( f_1, \ldots, f_m \), described by keys \( k_1, \ldots, k_m \), such that \( f = f_1 + \ldots + f_m \) and every strict subset of the keys hides \( f \). A Distributed Point Function (DPF) is a special case where \( F \) is the family of point functions, which evaluate to a specific value on a particular input and to zero on all other inputs.

FSS schemes are useful in applications that require private access to distributed databases while minimizing communication, such as Private Information Retrieval (PIR) and large-scale anonymous messaging. This paper improves and extends previous results in several ways:

- **Simplified FSS Constructions**: We introduce a tensoring operation for FSS, which simplifies previous constructions and facilitates new ones.
- **Improved 2-Party DPF**: We reduce the key size of the PRG-based DPF scheme by approximately a factor of 4 and optimize its computational cost. The optimized DPF significantly reduces the concrete costs of 2-server PIR and related primitives.
- **FSS for New Function Families**: We present an efficient PRG-based 2-party FSS scheme for decision trees, leaking only the tree's topology and internal node labels. We also extend this to multi-dimensional intervals and provide a general technique for increasing the number of parties.
- **Verifiable FSS**: We introduce efficient protocols for verifying that keys obtained from a potentially malicious user are consistent with some \( f \in F \). Such verification is critical for applications involving private writing or voting by many users.

## Keywords
Function secret sharing, private information retrieval, secure multiparty computation, homomorphic encryption

## 1. Introduction
In this work, we continue the study of Function Secret Sharing (FSS), a primitive introduced by Boyle et al. [7] and motivated by applications involving private access to large distributed data.

Let \( F \) be a family of functions \( f : \{0, 1\}^n \rightarrow G \), where \( G \) is an abelian group. An m-party FSS scheme for \( F \) provides a way to "additively secret-share" functions from \( F \). The scheme is defined by a pair of algorithms (Gen, Eval). Given a security parameter and a description of a function \( f \in F \), the algorithm Gen outputs an m-tuple of keys \( (k_1, \ldots, k_m) \), where each key \( k_i \) defines the function \( f_i(x) = \text{Eval}(i, k_i, x) \). The correctness requirement is that the functions \( f_i \) add up to \( f \) in \( G \); that is, for any input \( x \in \{0, 1\}^n \), we have \( f(x) = f_1(x) + \ldots + f_m(x) \). The security requirement is that every strict subset of the keys computationally hides \( f \).

The simplest nontrivial special case of FSS is a Distributed Point Function (DPF), introduced by Gilboa and Ishai [18]. A DPF is an FSS for the family of point functions, which evaluate to a specific value on a particular input and to zero on all other inputs. Efficient constructions of 2-party DPF schemes from any pseudorandom generator (PRG) were presented in [18, 7], extended to more general function families, including interval functions, in [7].

For \( m \geq 3 \), the best known PRG-based DPF construction is only quadratically better than the naive solution, with key size approximately \( \sqrt{N} \), where \( N = 2^n \). In this work, we focus on the case \( m = 2 \) and consider PRG-based FSS schemes, which offer better concrete efficiency and are powerful enough for the applications we describe.

### 1.1 Our Contributions
Motivated by applications of FSS, we improve and extend previous results from [7] in several directions:

- **Simplified FSS Constructions**: We introduce a tensoring operation for FSS, which simplifies previous constructions and facilitates new ones.
- **Improved 2-Party DPF**: We reduce the key size of the PRG-based DPF scheme by approximately a factor of 4 and optimize its computational cost. In an AES-based implementation, the key size of a DPF is equivalent to roughly a single AES key per input bit. We provide further optimizations for DPF with a single-bit output and for reducing the computational cost of evaluating the DPF over the entire domain, as needed in PIR applications.
- **FSS for New Function Families**: We present an efficient PRG-based 2-party FSS scheme for decision trees, leaking only the tree's topology and internal node labels. We apply this to multi-dimensional intervals and present a general technique for increasing the number of parties.
- **Verifiable FSS**: We introduce efficient protocols for verifying that keys obtained from a potentially malicious user are consistent with some \( f \in F \). These techniques make black-box use of the underlying FSS scheme and avoid the cost of general-purpose secure computation techniques.

## 2. Preliminaries
We extend the definition of function secret sharing from [7] by allowing a general specification of the allowable leakage, namely the partial information about the function that can be revealed.

A function family is defined by a pair \( F = (P_F, E_F) \), where \( P_F \subseteq \{0, 1\}^* \) is an infinite collection of function descriptions \( \hat{f} \), and \( E_F : P_F \times \{0, 1\}^* \rightarrow \{0, 1\}^* \) is a polynomial-time algorithm defining the function described by \( \hat{f} \). Each \( \hat{f} \in P_F \) describes a corresponding function \( f : D_f \rightarrow R_f \) defined by \( f(x) = E_F(\hat{f}, x) \). We assume by default that \( D_f = \{0, 1\}^n \) for a positive integer \( n \) and always require \( R_f \) to be a finite Abelian group, denoted by \( G \). When there is no risk of confusion, we will sometimes write \( f \) instead of \( \hat{f} \) and \( f \in F \) instead of \( \hat{f} \in P_F \). We assume that \( \hat{f} \) includes an explicit description of both \( D_f \) and \( R_f \) as well as a size parameter \( S_f \).

We let \( \text{Leak}(\hat{f}) \) capture partial information about \( \hat{f} \) that can be leaked. When Leak is omitted, it is understood to output \( D_f \) and \( R_f \). This will be sufficient for most classes considered in this work; for more general classes, one also needs to leak the size \( S_f \).