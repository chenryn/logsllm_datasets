1104/tcp  open     xrl
1105/tcp  open     ftranhc
1106/tcp  open     isoipsigport-1
1107/tcp  open     isoipsigport-2
1108/tcp  open     ratio-adp
1110/tcp  open     nfsd-status
1111/tcp  open     lmsocialserver
1112/tcp  open     msql
1113/tcp  open     ltp-deepspace
1114/tcp  open     mini-sql
1117/tcp  open     ardus-mtrns
1119/tcp  open     bnetgame
1121/tcp  open     rmpp
1122/tcp  open     availant-mgr
1123/tcp  open     murray
1124/tcp  open     hpvmmcontrol
1126/tcp  open     hpvmmdata
1130/tcp  open     casp
1131/tcp  open     caspssl
1132/tcp  open     kvm-via-ip
1137/tcp  open     trim
1138/tcp  open     encrypted_admin
1141/tcp  open     mxomss
1145/tcp  open     x9-icue
1147/tcp  open     capioverlan
1148/tcp  open     elfiq-repl
1149/tcp  open     bvtsonar
1151/tcp  open     unizensus
1152/tcp  open     winpoplanmess
1154/tcp  open     resacommunity
1163/tcp  open     sddp
1164/tcp  open     qsm-proxy
1165/tcp  open     qsm-gui
1166/tcp  open     qsm-remote
1169/tcp  open     tripwire
1174/tcp  open     fnet-remote-ui
1175/tcp  open     dossier
1183/tcp  open     llsurfup-http
1185/tcp  open     catchpole
1186/tcp  open     mysql-cluster
1187/tcp  open     alias
1192/tcp  open     caids-sensor
1198/tcp  open     cajo-discovery
1199/tcp  open     dmidi
1201/tcp  open     nucleus-sand
1213/tcp  open     mpc-lifenet
1216/tcp  open     etebac5
1217/tcp  open     hpss-ndapi
1218/tcp  open     aeroflight-ads
1233/tcp  open     univ-appserver
1234/tcp  open     hotline
1236/tcp  open     bvcontrol
1244/tcp  open     isbconference1
1247/tcp  open     visionpyramid
………………
像这样⼀个⽬标nmap随便默认扫⼀下⼀排排的端⼝开放，⼀看就是有问题。很显然这是遇到了安
全策略导致的扫描结果误报。
⼤致的原理⽬测是防⽕墙响应了syn请求和扫描器建⽴了完整的三次握⼿，因此不管是采⽤SYN扫
描还是TCP扫描，都会存在这种情况，⼏乎是难以进⾏判断到底开放了哪些端⼝以及具体是哪些服
务。那为了解决这个问题我们唯⼀的⽅法就是对所有的开放端⼝进⾏针对性的指纹扫描，⼤概流程
如下：
1. 端⼝扫描开放情况，如果存在⼤量的开放端⼝则判断为安全策略
2. 转到全端⼝或者是常⻅端⼝的指纹探测
3. 探测完指纹后对命中具体指纹的端⼝认为是开放的服务，没有响应可识别指纹的端⼝认为是假
端⼝
为了快速实现，⼀般会采⽤下⾯两种实现⽅式：
1. 写脚本对全端⼝进⾏http和https请求，只探测响应http请求的服务
2. 进⼀步加强，采⽤tcp来发送http请求探针，记录有响应的服务情况，这种情况下会探测到http
的服务以外还有针对任意请求会响应的tcp服务
上⾯这两种⽅式通常是⼀般的⼈会采⽤的⼀种简略⽅式，但是这⾥⾯有显⽽易⻅的缺陷就是探针的
指纹库太普通，只能探测很肤浅的⼀部分服务，因为部分服务只针对特定的探针才会进⾏响应，⽽
且因为缺少解析规则，我们也很难针对未知服务进⾏明确的标记即使他有响应内容。
利⽤nmap⾃带的探针 
既然我⽤的nmap扫描，那么我是不是可以尝试利⽤nmap的扫描能⼒来进⾏识别呢？答案是肯定
的。很显然nmap⾃带的 -sV 的参数可以帮助我们使⽤其⾃带的探针来进⾏服务探测。nmap探针
⽂档
事不宜迟我们找⼀个有策略的服务，利⽤命令 sudo nmap -sV --version-intensity 0 -oX 
nmapres2 xxxxxx 来输出⼀下探测结果。
结果⼤概⻓这个样⼦
整个结果⼤概有800+，⼀眼丁真鉴定为假。
很显然这个结果是不满意的，他肯定包含有⼀⼤堆没有被探针正确识别的结果。我们⼤概理解⼀下
nmap的扫描逻辑：
1. 先进⾏端⼝开放扫描，由于策略原因⼤部分端⼝都标记为开放
2. 对开放的端⼝进⾏服务扫描，没有正确识别的服务nmap认为是探针不⾜没有识别到因此只是
没有服务信息，端⼝开放依旧保留
从nmap在终端⾥输出的结果我们也能⼤概猜到他的意思了
很显然部分端⼝服务没识别出来他⾃⼰也标注了未知和问号。⽽现在我需要的是⼀个包含明确开放
端⼝和服务情况的结果集，也就是说我要把这些不确定的东⻄都给去除掉，但⼜要保留下⾯nmap
不能识别的新特征的端⼝，因为新指纹特征的端⼝通常拥有响应说明其是有服务的
对nmap服务扫描的结果集进⾏过滤 
由于nmap并没有提供类似的参数，因此我们必须⼿动对结果集进⾏过滤。要先过滤结果集我们先
看⼀下⽂档对nmap服务探测的描述。
简单来说nmap对于探针规则的配置和管理是在项⽬⽬录下nmap-service-probes这个⽂件⾥。⾥
⾯的内容⼤致如下：
这个配置⽂件你暂时看不懂也没事，我们先来看看结果集⾥的细节是什么样⼦的，下⾯是抽取的结
果集⾥我认为是根本没有开放的端⼝的情况：
这⾥我们主要聚焦到service这个标签⾥的情况，⽐如 
这⾥经过我的分析有两个特征可以⽤来⼀定程度上排除⽆⽤信息
servicefp
仔细看 %r(TLSSessionReq,1,&quot;\n&quot;); 类似于这样的⼀⼩段，其实是在表达
TLSSessionReq这个探针获取 \n 这个结果。连续的⼏个探针说明尝试了这些探针然后都获取到了
\n ，因此我认为这是⼀种误报，我们可以根据这种特征把他们去除掉。
去除前：
去除后：
可以看到从800+变成了50+，确实去除了⼀些，但是还有部分端⼝我通过⼿⼯测试感觉也不靠
谱。
method="table"
我们先来看⼀个明确是正常开放有服务的端⼝
cpe:/a:exim:exim:4.81 可以看到这⾥的method是probed。这
意味着这个端⼝的服务是根据探针来探测到的。那么table意味着什么呢？我猜测是经过probe后没
有探测到服务，因此nmap根据默认的端⼝和服务名称对应的表来给予⼀个参考结果，这个逻辑被
称为table。那么我们可以在这个场景下把这个table去除掉。
去除前：
去除后：
可以看到，效果很好，留下来的端⼝基本上都是我认为有理有据是真实存在服务的。
结合到扫描流程⾥ 
有了⼀个过滤逻辑后，我们现在把端⼝扫描流程进⾏优化。
1. oneforall中提取出ip地址给到nmap后进⾏端⼝扫描
2. 对nmap端⼝扫描的结果进⾏处理，如发现有ip存在连续端⼝则认为是存在安全策略
3. 判断有异常的ip单独进⾏sV扫描
4. 对sV扫描后的结果进⾏去噪⾳处理后得到准确的数据后完成流程
⾄此，即使我们遇到了存在安全策略的⽬标也能通过⾃动化流程相对精准的获取到端⼝开放情况和
指纹特征⽽不需要去编写新的⼯具了。