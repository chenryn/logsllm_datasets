execution packet EXE after receiving REP from the receiver
and calls T ransactionExecution(EXE, ncur) to execute t
with itself as the current node ncur. ncur can obtain its
previous node npre and its next node nnext according to
EXE.hop and EXE.nl (Line 2-3). Please note that boundary
nodes such as the sender and the receiver only have the
previous node or the next node on the path. If ncur is not
the receiver, ncur updates the funds of the corresponding
payment channel in strict accordance with the equations (3)
and (4) (Line 4-8). Next, ncur updates its routing table. For
one thing, ncur ﬁnds out all records in the routing table that
the next hop is npre or nnext, and then uses the data carried
by EXE to update their funds, skewed value, and average
skewed value (Line 9-15). For another thing, to collect more
effective routing information, ncur updates the routing table
by treating each node on the path as a destination that it can
reach (Line 16-34). For example, for a node ni except ncur
on the path, ncur ﬁnds out all the records of destination ni
in its routing table, and then compares whether the next hop
in the record is the same as the next hop in the current path.
TABLE I
AN EXAMPLE OF ROUTING TABLE
Destination
Next Hop
Funds
A
E
. . .
B
C
D
C
F
. . .
10
8
15
8
20
. . .
Skew
0.5
-0.2
0.16
-0.2
0.1
. . .
Avg Skew
Length
0.34
0.17
-0.22
0.64
-0.47
. . .
3
3
4
2
3
. . .
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
469
f (ncur, nnext) = f (ncur, nnext) − EXE.a
f (nnext, ncur) = f (nnext, ncur) +EXE.a
Algorithm 3 Transaction Execution
1: # function: T ransactionExecution(EXE, ncur)
2: npre = EXE.nl[EXE.hop − 1] # if exists
3: nnext = EXE.nl[EXE.hop + 1] # if exists
4: # update funds
5: if exe.hop < exe.len then
6:
7:
8: end if
9: # update routing table with next hop
10: for all row : RT (ncur) do
11:
12:
13:
end if
14:
15: end for
16: # update routing table with destination
17: for i = 0 → EXE.len do
U pdateRowW ithN extHop(npre, EXE) or
U pdateRowW ithN extHop(nnext, EXE)
if row.next hop == npre or nnext then
if row.next hop == ncur.next hop then
hasRow = true
U pdateRowW ithDestination(ni, EXE)
# keep if funds, skew, or length is better
# discard if funds, skew, and length are bad
else
end if
if row.destination == ni then
ni = EXE.nl[i] # except ncur
hasRow = f alse
for all row : RT (ncur) do
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
end if
33:
34: end for
35: # check if ncur is the receiver
36: if ncur == EXE.r then
# ﬁnish the transaction
37:
return
38:
39: end if
40: EXE.hop + +
41: T ransactionExecution(EXE, nnext)
end if
end for
if !hasRow then
InsertN ewRow(ni, EXE)
If they are the same, which means that the same path already
exists in the routing table, then ncur marks hasRow as true
and updates the record with the latest information in EXE
(Line 22-24). If they are different, ncur compares their funds,
skewed value, and length. Based on survival of the ﬁttest, ncur
will reserve the records that have more funds, greater skewed
value, or shorter length than the current path as candidates
entries, while the particularly bad records will be discard (Line
26-27). If the above procedure does not ﬁnd a record with the
same path, that is hasRow is f alse, ncur generates a new
routing record for the path to destination ni and inserts it
470
into its routing table (Line 31-33). After updating the routing
table, ncur judges whether it is the receiver. If so, it ends
the recursion and the transaction execution of t is completed
(Line 35-39). Otherwise, ncur updates EXE.hop and calls the
function T ransactionExecution(EXE, nnext) to continue
the transaction execution (Line 40-41).
D. Concerns about Malicious Node and Privacy
We do not explicitly assume malicious nodes in our system
model. The overall safety of the system is guaranteed by the
blockchain and payment channel technologies. If there are
malicious nodes against our routing protocol, the only possible
malicious behavior may be reporting incorrect channel status
information. Fortunately, such incorrect data can only affect
the success ratio of routing, but cannot cause funds loss.
Therefore, malicious behavior in routing operations cannot
affect the safety of the system. Furthermore, countermeasures
like multi-path transactions [18] can be adopted to mitigate
the potential performance degradation associated with such
attacks.
As for the privacy of the sender and the receiver of an inter-
mediate channel, anonymous addresses [25] can be used, and
only the sender/receiver knows its own identity. Furthermore,
since point-to-point communications in the payment networks
are encrypted, other unrelated users outside the transaction
path cannot obtain or decrypt transaction information, such
as fund amounts, node address and so on. In order to avoid
malicious use of transaction information at intermediate nodes
on the path, countermeasures such as multi-path routing, can
also be used to randomly disperse the funds to different paths
and hide the actual fund amounts.
V. PERFORMANCE EVALUATION
In this section, we ﬁrst introduce the dataset for experi-
ments, and then describe the evaluation scheme of FSTR. Next,
we describe the metrics used to evaluate the performance of
routing algorithms in payment networks. Finally, we display
the experiment results with the help of ﬁgures and tables and
make a detailed analysis.
A. Dataset
Because there is no available transaction trace data from
a real payment network, following [18], [19], we crawl the
transaction trace of Ripple [7], one of the most popular
virtual currency systems. Although Ripple itself is not an off-
chain payment network, the transaction traces record the real
transaction demands of real users and can be used to generate
transaction requests in the experiments. We obtained the time-
stamped transaction data and link modiﬁcation records on
Ripple from January 2013 to November 2016 and crawled the
complete network topology information of Ripple on January
2013.
After crawling the raw data, we clean and ﬁlter the data to
get the dataset that is suitable for evaluation. Speciﬁcally, we
process the data in the following sequence.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
• To ensure the validity of the data, we check the funds
of the users in the network. As required by Ripple in
April 2017, a user needs 20 Ripple currency, to fund an
account. So we ﬁlter out invalid users who don’t have
enough funds.
• The raw data contains the conversion transactions of
different currency types performed by the node itself, but
the routing algorithm does not affect such transactions,
so we ﬁlter this kind of transactions.
• Ripple covers various currency types, some of which are
not on the legal tender list, so we eliminate link modiﬁ-
cations and transactions involving non-legal currencies.
• To facilitate the calculation and processing of trans-
actions, we convert all funds in different legal tender
currencies into US dollars at the appropriate exchange
rate.
• Based on the timestamp of January 2013, we convert the
timestamps of link modiﬁcation and transaction to the
time difference from the benchmark and distinguish the
two different events of link modiﬁcation and transaction.
• Finally, we eliminate not only the links in the network
topology where funds are zero in both directions, but also
the link modiﬁcations that attempt to add zero funds.
After the above operation of cleaning and ﬁltering the raw
data, we ﬁnally get the dataset D for performance evaluation.
D contains a network topology of valid nodes and links,
as well as time-ordered transactions and link modiﬁcations.
Speciﬁcally, the topology diagram in D has about 93,502
nodes and 10,087 links, and there are about 800,819 trans-
actions and 627,316 link modiﬁcations in D.
According to the network topology in D, we can establish
the corresponding payment channel network, where each node
has its unique identiﬁcation, each link represents a payment
channel, and the weight of the two directions on the link
represents the funds owned by the two participants in the
payment channel. Next, we cross-execute transactions and link
modiﬁcations in chronological order according to D. If it is
a transaction, the routing algorithm is executed. If it is link
modiﬁcation, we add or modify link funds to the network.
B. Evaluation Scheme
1) Evaluation of Funds Skewness: We mainly evaluate the
effect of the fund skewness from two aspects. As in similar
works [18], we also use Ford-Fulkerson as the benchmark
algorithm in the experiments. Firstly, we add a funds skewness
based path selection scheme to the basic algorithm to examine
the reduction in funds skewness. The basic algorithm refers to
the Ford-Fulkerson max-ﬂow algorithm [17], whose core idea
is to ﬁnd the feasible path that support the largest transaction
amount using breadth-ﬁrst search. And our scheme is to ﬁnd
the feasible path that support the maximum ΔΦ. Secondly,
we apply our three different skewness calculation methods
shown in the equations (8), (9) and (10). We will evaluate
them by comparing their improvement in the success ratio of
transactions so as to choose the best method as part of FSTR.
2) Comparison to Other Algorithms.: To evaluate the
performance of FSTR, we will compare it with Speedy-
Murmurs [18], the state-of-the-art routing algorithm in the
payment channel networks. SpeedyMurmurs constructs L
landmark-based spanning trees for the network and imple-
ments an embedding-based path discovery approach by ex-
tending VOUTE [25], [31], a privacy preserving embedding-
based [24] routing algorithm for message delivery in route-
restricted P2P networks. It divides the transaction amount
into L parts randomly and then routes them along L trees.
Please note that it is necessary for SpeedyMurmurs to maintain
the structure of trees regularly due to the dynamic change
of the payment channel network. As for FSTR, we set
#probe duration = 2τ and #accept duration = τ, where
τ is the average duration a transaction takes to execute. As
for SpeedyMurmurs, we set L = 3 the same as description in
[18].
C. Performance Metrics
We use the following four performance metrics to measure
the performance of the routing algorithms in the payment
channel networks.
• Success Ratio: In payment channel networks, a suc-
cessful transaction means that a feasible path has been
found and the transfer amount is equal to the expected
amount when the transaction is executed. In a general
way, success ratio is the ratio of the number of successful
transactions to the total number of transactions in a set of
transaction requests. But since we use the Ford-Fulkerson
max-ﬂow algorithm as the benchmark, the success ratio of
the transaction in our paper will be computed as the ratio
of the actual success ratio of the algorithm to the success
ratio of the benchmark. Such a calculation method for
success ratio will show the effect of different algorithms
more clearly.
• Transaction Delay: Transaction delay refers to the time
consumption in the whole routing process and it can be
divided into two parts. The ﬁrst part is the time delay
of routing exploration, which is the time delay before
the formal execution of the transaction, including route
discovery and selection. For concurrent pathﬁnding, the
time delay of routing exploration depends on the valid
duration of the probe, which will be set in the experiment.
The second part is the execution delay. In the absence
of realistic latency and bandwidth models, the execution
delay is directly related to the actual path length of the
transaction executed, namely the number of hops of the
path. Since the probe duration is a constant, we use the
length of the path that execute the transaction to evaluate
transaction delay.
• Transaction Overhead: During the whole routing pro-
cess, the nodes need to exchange and transfer data infor-
mation to facilitate the transaction. We deﬁne the number
of packets generated in the network during this process
as transaction overhead. The number of packets directly
affects the congestion of the network, so the transaction
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:32:17 UTC from IEEE Xplore.  Restrictions apply. 
471
overhead is also one of the important metrics to measure
the performance of routing algorithms.
• Stabilization Overhead: The payment channel networks
are dynamic, because nodes can join and exit at any time,
as well as the distribution of funds in the network is
constantly changing, so many routing algorithms need
to generate and maintain the necessary state informa-
tion or structure periodically, e.g., SpeedyMurmurs needs
to recompute spanning trees after a certain number of
transactions. Thus, the extra overhead incurred by these