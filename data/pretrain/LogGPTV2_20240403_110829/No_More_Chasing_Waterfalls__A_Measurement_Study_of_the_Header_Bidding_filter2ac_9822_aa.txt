title:No More Chasing Waterfalls: A Measurement Study of the Header Bidding
Ad-Ecosystem
author:Michalis Pachilakis and
Panagiotis Papadopoulos and
Evangelos P. Markatos and
Nicolas Kourtellis
No More Chasing Waterfalls: A Measurement Study of the
Header Bidding Ad-Ecosystem
Michalis Pachilakis
FORTH, Greece
PI:EMAIL
Evangelos P. Markatos
FORTH, Greece
PI:EMAIL
Panagiotis Papadopoulos
Brave Software
PI:EMAIL
Nicolas Kourtellis
Telefonica Research, Spain
PI:EMAIL
ABSTRACT
In recent years, Header Bidding (HB) has gained popularity among
web publishers, challenging the status quo in the ad ecosystem.
Contrary to the traditional waterfall standard, HB aims to give back
to publishers control of their ad inventory, increase transparency,
fairness and competition among advertisers, resulting in higher
ad-slot prices. Although promising, little is known about how this
ad protocol works: What are HB’s possible implementations, who
are the major players, and what is its network and UX overhead?
To address these questions, we design and implement HBDetector:
a novel methodology to detect HB auctions on a website at real-
time. By crawling 35,000 top Alexa websites, we collect and analyze
a dataset of 800k auctions. We find that: (i) 14.28% of top websites
utilize HB. (ii) Publishers prefer to collaborate with a few Demand
Partners who also dominate the waterfall market. (iii) HB latency
can be significantly higher (up to 3× in median case) than waterfall.
CCS CONCEPTS
• Information systems → Online advertising; Display adver-
tising; Web log analysis;
KEYWORDS
Header Bidding, Digital Advertising, Waterfall, RTB
ACM Reference Format:
Michalis Pachilakis, Panagiotis Papadopoulos, Evangelos P. Markatos, and Nico-
las Kourtellis. 2019. No More Chasing Waterfalls: A Measurement Study of
the Header Bidding Ad-Ecosystem. In Proceedings of Internet Measurement
Conference, Amsterdam, Netherlands, October 21–23, 2019 (IMC ’19), 14 pages.
https://doi.org/10.1145/3355369.3355582
1 INTRODUCTION
The largest portion of the digital advertisements we receive today
on the Web follows a programmatic ad-purchase model. Upon a
website visit, a real time auction gets triggered, usually via the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
IMC ’19, October 21–23, 2019, Amsterdam, Netherlands
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6948-0/19/10...$15.00
https://doi.org/10.1145/3355369.3355582
280
real-time bidding (RTB) protocol [27], for each and every available
ad-slot on the user’s display. These auctions are hosted in remote
marketplace platforms called Ad Exchanges (ADXs) that collect the
bids from their affiliated Demand Site Platforms (DSPs). The highest
bidder wins, and delivers its impression to the user’s display.
However, there are more than one ad networks that can provide
bids for an ad-slot. In the traditional standard for ad-buying, called
waterfalling, the different ad networks (e.g., ADXs with their affili-
ated DSPs) are prioritized in hierarchical levels [32]. Thus, when
there is no bid from ad network #1, a new auction is triggered for ad
network #2, and so forth. Of course, apart from the auction-based
ad purchase, there are still other non-programmatic channels like
direct orders from advertisers who run static campaigns for a certain
number of impressions [12]. Through these channels, advertisers
target not a user but the entire audience of a specific website (e.g.,
an ad regarding Super Bowl on espn.com). Alternatively, if there is
neither a direct order nor a bid in these auctions, the ad-slot may
be filled via another channel for remnant inventory called fallback
or backfill (e.g., Google AdSense) [25].
The process of ad prioritization among the above different chan-
nels and ad networks in waterfall is managed through the pub-
lisher’s ad server or Supply Side Platform (SSP) (e.g., DoubleClick
for Publishers (DFP)). Priorities are typically set not at real time but
based on the average price of the past purchases for each channel.
As a consequence, in waterfall not all ad partners have the ability
to compete simultaneously. Therefore, the publishers do not get the
optimal charge price, since an ad-slot may not be sold at the highest
price (e.g., if the winning bid in the auction of ad network #1 is
0.2$, the ad-slot will be sold even if there was a bid of 0.5$ in ad
network #2). Apart from the potential loss of revenue for the pub-
lishers, there is also a significant lack of transparency. Except from
the winning bidder, the publishers do not know who else placed
a bid for their ad-slot and for how much. In addition, the lack of
control restricts the publishers from choosing Demand Partners, or
different sale channels in real time (e.g., to get a high price through
RTB when the quota of direct ads sold has not yet been depleted).
To remedy all the above, Header Bidding [55] (or parallel bidding
in mobile apps [42]) has been recently proposed and has started to
gain wide acceptance among publishers [20, 23, 36, 52]. As depicted
in Figure 1, HB is a different auction that takes place not on the ad
server as in waterfall, but inside the header field of a HTML page,
before anything else is loaded on the page. It allows a publisher to
simultaneously get bids from all sale channels (e.g., direct orders,
programmatic auctions, fallback) and Demand Partners (e.g., DSPs,
Figure 1: High level overview of the HB. The absence of priorities
aims to provide (i) fairness and higher competition among advertis-
ers and (ii) increased revenue for the publishers.
ADXs, ad agencies). HB not only gives the control back to the
publisher but also allows higher revenues than waterfall, since
it guarantees that the impressions with the higher price will be
bought and rendered [10]. On the advertiser’s side, HB promotes
fairness since there are no priorities. Consequently, any advertiser
could win any auction, as long as it bids higher than others. HB
enables small advertisers to also be competitive, compared to big
advertisers who would have higher priority on the waterfall model.
Although there is a lot of research regarding the waterfall stan-
dard [5, 6, 34, 35, 41], we know very little about the innovative
and rapidly growing alternative of HB. How is it implemented?
What is the current adoption of HB on the Web? What is the per-
formance overhead and how it affects the page rendering time?
How many bids the average publisher can receive? What are the
average charge prices and how do these compare to the ones of
the waterfall standard? Which are the big players and how is the
market share divided?
To respond to all these questions, we study the different existing
implementations of HB and we design HBDetector: a novel method-
ology to detect HB auctions on the Web. Our approach aims to
increase transparency on the ad-ecosystem, by exposing at real-
time the internals of the new and rapidly growing HB ad protocol:
in which sites it exists, the prices and partners involved, etc. Using
HBDetector, we crawl a number of popular websites, we collect
a rich dataset of HB-enabled websites. Our tool helps us detect
particular browser events triggered by the HB libraries embedded
in such webpages, along with the ad partners participating in the
HB and metadata for the auctions executed on these websites. We
analyze and present the first full-scale study of HB aiming to shed
light on how this innovative technology works and investigate the
trade-off between the overhead it imposes on the user experience
and the average earnings it brings to publishers. In this paper, we
make the following main contributions:
(1) We propose and implement HBDetector, the first of its kind
Web transparency tool, capable of detecting HB activity at real-
time, on the Web. We provide it as an open-sourced browser
extension for Google Chrome1 .
1https://www.github.com/mipach/HBDetector
281
Figure 2: Flow chart of the Header Bidding protocol.
(2) By running HBDetector across 35,000 top Alexa websites, we
collect a dataset of 800k auctions. This work is the first to
analyze the adoption and characteristics of HB.
(3) We extract a set of lessons on HB: (i) There are 3 different
implementations of HB: Client-side, Server-side and Hybrid
HB. (ii) There is at least 14.28% of top websites that use HB. (iii)
Publishers tend to collaborate with a small number of Demand
Partners, which are already reputable in the waterfall standard.
(iv) HB latency can be significantly higher (up to 3× in the
median case, and up to 15× in 10% of cases) than waterfall.
2 BACKGROUND ON HEADER BIDDING
In this section, we cover background knowledge required for our
study regarding the most important aspects of HB.
2.1 HB Protocol Description
Contrary to the traditional waterfall standard, in HB the ad auction
does not take place in a remote ADX, but on the user’s browser.
The HB process, depicted in Figure 2, is the following:
Step 1: When a user visits a website, the HTML page is fetched.
As soon as the header of the HTML is rendered in the browser,
user tracking code and the third-party library responsible for the
procedure of the HB is loaded as well.
Step 2: Then, the HB library sends (in parallel) HTTP POST
requests to the Demand Partners (e.g., DSPs, ad agencies, ADXs
which conduct their own RTB auctions) requesting for bids. These
bid requests also include information about the current user (such
as interests and cookies). Such information can be used by the
Demand Partners to decide whether and how much they will bid
for an ad-slot in the particular user’s display. Note, that if a Demand
Partner does not respond within a predefined time threshold, its
bid is considered late and not taken into account.
Step 3: As soon as the Demand Partners respond with their
bids (and their impressions), the collected responses are sent to
the publisher’s ad server. The ad server will check the received
bids and compare with the floor price agreed with the publisher, to
              HEADER AUCTION                      (1st best price)      Direct Order                                                 DSP          ADX          SSP1         SSP2HEADERRTB AUCTION (2nd best price)DSPDSPDSP$1.5 CPM$0.9 CPM$1.0 CPM$0.9 CPM$1.0 CPM$0.7 CPMRTB AUCTION (2nd best price)DSPDSPDSP$1.0 CPM$1.9 CPM$0.7 CPMWinner $1.5 CPMBid reqs$0.9 CPMRTB AUCTION (2nd best price)DSPDSPDSP$1.1 CPM$0.9 CPM$0.2 CPMBids1M imps$1.1 CPM/impFallback10K imps $0.5 CPM/impPublisherUserDemand partnersAd serverWebsite RequestWebsite’s headerAuction NotificationsBid ResponsesPushing Bid Responses to Ad ServerWinning Bid ResponseWinner NotificationBidding phaseWinner selection phaseUser1243Check other channels: direct orders, fallback, etc.Bid Requestsdecide if the received prices are high enough [54]. If the floor price
is met, the HB process was successful and the ad-slot is satisfied.
Alternatively, the ad server can check the rest of the programmatic
(or not) available channels (e.g., direct order, RTB, fallback) and will
find the best next option for the specific ad-slot. This step entails
communicating with SSPs for available direct orders which can
provide higher revenues to the publisher than regular RTB auctions.
The ad server can also communicate with Demand Partners for
RTB auctions, or other SSPs who can provide fallback ads, such as
Google AdSense, or even house ads.
Step 4: As soon as the impression is rendered on the user’s
display, a callback HTTP request notifies the winning Demand
Partner that its impression was rendered successfully on the user’s
browser, and the ad price that was charged (winner notification).
In theory, with this new protocol, the publisher has total control
over the ad inventory they provide, knowing exactly how much the
Demand Partners value each slot, and the actual amount of money
they are willing to pay for it. In addition, there is full transparency,
since the publisher can have access to all bids and decide at real
time the best strategy it should follow without the need to trust
any intermediaries. In the future, HB could provide the means to
publishers to reduce advertising that is not suitable for, or does not
match the semantics of their websites, and even curb malvertising.
However, as we will show later in Section 4, this transparency and
control is not always applicable under the various types of HB we
have detected.
2.2 HB Implementation & Performance
To implement the above protocol, publishers need to include HB
third-party libraries in their webpages. Although there does not
exist a common standard for HB yet, the great majority of pub-
lishers use the open-source library of Prebid.js [45], supported
by all major ad companies. This library includes: (i) The core com-
ponent which is responsible to issue the bid requests and collect
the responses, which are later sent to the publisher’s ad server.
(ii) The adapters which are plugged into the core and provide all
necessary functionality required for each specific Demand Part-
ner. Prebid.js is supported by more than 200 Demand Partners
(e.g., AppNexus, Criteo, OpenX, PulsePoint) that provide their own
adapters [44].
We note that in traditional waterfall, the auction information is
opaque to the client and the only information that can be inferred
(if at all) is through the parameters of the notification URL (which
acts as a callback to the winning bidder). In contrast, in the HB, and
due to bidder responses, browser DOM events are triggered that
contain metadata directly available at the user browser, and can be
used to clearly distinguish between waterfall and HB activity.
The non-hierarchical model of HB produces much more network
traffic than the waterfall standard. Indeed, HB sends one request for
each and every collaborating Demand Partner. This can result to
an increased page latency, especially when some Demand Partners
take too long to respond. To make matters worse, as soon as they
receive a bid request, some of these Demand Partners may run their
own auctions inside their ad network, with their own affiliated
bidders (as depicted in Figure 1). This increased page latency raises
significant concerns. Indeed, 40% of the publishers already mention
282
(2) Detect DOM-related events that are triggered due to HB
that load known HB libraries.
embedded in the webpage.
that such latency is capable of impacting their users’ browsing
experience [8, 9, 15].
It is worth noting, that HB technology is still in its early stages
and many ad networks are technologically not ready to move com-
pletely from the waterfall model to participate in this new model.
In order not to miss bids from such networks, some ad mediators
(e.g., Appodeal) mix the two techniques in an attempt to provide
waterfall compatibility during this transitional period [42].
3 METHODOLOGY FOR MEASURING HB
In this section, we outline our methodology for detecting HB on
webpages, and our effort to crawl top Alexa websites for HB activity.
3.1 Detection Mechanism
In order to detect if a webpage is using HB for delivering ads to its
users, we need to detect HB-related activity originating from the
said webpage. As explained above, the HB activity is performed over
different channels than ad protocols such as RTB, using a library
(implemented in JavaScript) embedded in the header of the page.
Therefore, by monitoring the events triggered by such libraries, we
can confidently distinguish HB activity from other models such as
waterfalling.
There are three main ways to detect if HB is present in a webpage:
(1) Perform static analysis of the page and identify tags of scripts
(3) Detect web requests sent from the page to HB entities.
The first method is straightforward to implement with the fol-
lowing steps: Download the webpage source code and use regular
expressions to detect all known HB libraries. However, we note
that just detecting these libraries is not enough, as false positives or
false negatives could occur. For example, static analysis is prone to
false positives such as non HB libraries being misnamed using HB-
related names, or HB-related libraries appearing in the HTML code
but not executed Similarly, static analysis is vulnerable to false neg-