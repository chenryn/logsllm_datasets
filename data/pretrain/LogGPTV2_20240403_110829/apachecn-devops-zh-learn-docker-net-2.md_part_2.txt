     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ```
    对于`c2`，使用以下命令:
    ```
    # docker run -i -t --name c2 ubuntu:latest /bin/bash
    ```
    以下是生成的输出:
    ```
    root@e58a9bf7120b:/# ifconfig
    eth0      Link encap:Ethernet  HWaddr 02:42:ac:11:00:06
     inet addr:172.17.0.6  Bcast:0.0.0.0  Mask:255.255.0.0
     inet6 addr: 2001:db8:1::242:ac11:6/64 Scope:Global
     inet6 addr: fe80::42:acff:fe11:6/64 Scope:Link
     UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
     RX packets:6 errors:0 dropped:0 overruns:0 frame:0
     TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:648 (648.0 B)  TX bytes:696 (696.0 B)
    lo        Link encap:Local Loopback
     inet addr:127.0.0.1  Mask:255.0.0.0
     inet6 addr: ::1/128 Scope:Host
     UP LOOPBACK RUNNING  MTU:65536  Metric:1
     RX packets:0 errors:0 dropped:0 overruns:0 frame:0
     TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
     collisions:0 txqueuelen:0
     RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
    ```
    我们可以使用刚刚发现的 IP 地址测试容器之间的连通性。让我们现在使用`ping`工具来看看这个:
    ```
    root@7bc2b6cb1025:/# ping 172.17.0.6
    PING 172.17.0.6 (172.17.0.6) 56(84) bytes of data.
    64 bytes from 172.17.0.6: icmp_seq=1 ttl=64 time=0.139 ms
    64 bytes from 172.17.0.6: icmp_seq=2 ttl=64 time=0.110 ms
    ^C
    --- 172.17.0.6 ping statistics ---
    2 packets transmitted, 2 received, 0% packet loss, time 999ms
    rtt min/avg/max/mdev = 0.110/0.124/0.139/0.018 ms
    root@7bc2b6cb1025:/#
    root@e58a9bf7120b:/# ping 172.17.0.5
    PING 172.17.0.5 (172.17.0.5) 56(84) bytes of data.
    64 bytes from 172.17.0.5: icmp_seq=1 ttl=64 time=0.270 ms
    64 bytes from 172.17.0.5: icmp_seq=2 ttl=64 time=0.107 ms
    ^C
    --- 172.17.0.5 ping statistics ---
    2 packets transmitted, 2 received, 0% packet loss, time 1002ms
    rtt min/avg/max/mdev = 0.107/0.188/0.270/0.082 ms
    root@e58a9bf7120b:/#
    ```
2.  将`openssh-server`安装在两个容器上:
    ```
    #apt-get install openssh-server
    ```
3.  Enable iptables on the host machine:
    1.  最初，您将能够从一个容器到另一个容器进行 SSH。
    2.  Stop the Docker service and add `DOCKER_OPTS="--icc=false --iptables=true"` to the default Dockerfile of the host machine. This option will enable the iptables firewall and drop all ports between the containers.
        默认情况下，主机上不启用`iptables`。使用以下命令启用它:
        ```
        root@ubuntu:~# iptables -L -n
        Chain INPUT (policy ACCEPT)
        target     prot opt source               destination
        Chain FORWARD (policy ACCEPT)
        target     prot opt source               destination
        DOCKER     all  --  0.0.0.0/0            0.0.0.0/0
        ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
        ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0
        DOCKER     all  --  0.0.0.0/0            0.0.0.0/0
        ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED
        ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0
        ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0
        ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0
        #service docker stop
        #vi /etc/default/docker
        ```
    3.  Docker Upstart 和 SysVinit 配置文件。自定义 Docker 二进制文件的位置(特别是用于开发测试):
        ```
        #DOCKER="/usr/local/bin/docker"
        ```
    4.  使用`DOCKER_OPTS`修改守护进程的启动选项:
        ```
        #DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"
        #DOCKER_OPTS="--icc=false --iptables=true"
        ```
    5.  重新启动 Docker 服务:
        ```
        # service docker start
        ```
    6.  检查`iptables` :
        ```
        root@ubuntu:~# iptables -L -n
        Chain INPUT (policy ACCEPT)
        target     prot opt source             destination
        Chain FORWARD (policy ACCEPT)
        target     prot opt source             destination
        DOCKER     all  --  0.0.0.0/0          0.0.0.0/0
        ACCEPT     all  --  0.0.0.0/0          0.0.0.0/0    ctstate RELATED, ESTABLISHED
        ACCEPT     all  --  0.0.0.0/0          0.0.0.0/0
        DOCKER     all  --  0.0.0.0/0          0.0.0.0/0
        ACCEPT     all  --  0.0.0.0/0          0.0.0.0/0   ctstate RELATED, ESTABLISHED
        ACCEPT     all  --  0.0.0.0/0          0.0.0.0/0
        ACCEPT     all  --  0.0.0.0/0          0.0.0.0/0
        DROP       all  --  0.0.0.0/0          0.0.0.0/0
        ```
    `DROP`规则已添加到主机上的 iptables 中，这将断开容器之间的连接。现在，您将无法在容器之间进行 SSH。
4.  We can communicate with or connect containers using the `--link` parameter, with the help of following steps:
    1.  创建第一个容器，它将充当服务器，`sshserver` :
        ```
        root@ubuntu:~# docker run -i -t -p 2222:22 --name sshserver ubuntu bash
        root@9770be5acbab:/#
        ```
    2.  执行`iptables`命令，会发现增加了一个 Docker 链规则:
        ```
        #root@ubuntu:~# iptables -L -n
        Chain INPUT (policy ACCEPT)
        target     prot opt source         destination
        Chain FORWARD (policy ACCEPT)
        target     prot opt source         destination
        Chain OUTPUT (policy ACCEPT)
        target     prot opt source         destination
        Chain DOCKER (0 references)
        target     prot opt source         destination
        ACCEPT     tcp  --  0.0.0.0/0        172.17.0.3     tcp dpt:22
        ```
    3.  创建第二个容器，它的行为类似于客户端，`sshclient` :
        ```
        root@ubuntu:~# docker run -i -t --name sshclient --link sshserver:sshserver ubuntu bash
        root@979d46c5c6a5:/#
        ```
    4.  We can see that there are more rules added to the Docker chain rule:
        ```
        root@ubuntu:~# iptables -L -n
        Chain INPUT (policy ACCEPT)
        target     prot opt source               destination
        Chain FORWARD (policy ACCEPT)
        target     prot opt source               destination
        Chain OUTPUT (policy ACCEPT)
        target     prot opt source               destination
        Chain DOCKER (0 references)
        target     prot opt source               destination
        ACCEPT     tcp  --  0.0.0.0/0            172.17.0.3           tcp dpt:22
        ACCEPT     tcp  --  172.17.0.4           172.17.0.3           tcp dpt:22
        ACCEPT     tcp  --  172.17.0.3           172.17.0.4           tcp spt:22
        root@ubuntu:~#
        ```
        下图解释了使用`--link`标志的容器之间的通信:
        ![Restricting SSH access from one container to another](img/00015.jpeg)