title:The Authorization Service of Tivoli Policy Director
author:G&quot;unter Karjoth
The Authorization Service of Tivoli Policy Director
G¨unter Karjoth
IBM Research
Zurich Research Laboratory
Abstract
This paper presents the Authorization Service provided by
Tivoli Policy Director (PD) and its use by PD family mem-
bers as well as third-party applications. Policies are deﬁned
over an object namespace and stored in a database, which is
managed via a management console and accessed through
an Authorization API. The object namespace abstracts from
heterogeneous systems and thus enables the deﬁnition of
consistent policies and their centralized management. ACL
inheritance and delegated management allow these policies
to be managed efﬁciently. The Authorization API allows ap-
plications with their own access control requirements to de-
couple authorization logic from application logic. By inter-
cepting the trafﬁc over well-deﬁned communication proto-
cols (TCP/IP, HTTP, IIOP, and others), PD familiy members
establish a single entry point to enforce enterprise policies
that regulate access to corporate data.
1
Introduction
As the Internet has become the primary medium for dis-
seminating information to people all over the world, com-
panies and government agencies are increasingly opening
their IT infrastructure to give external customers and part-
ners access to resources, such as product support data, and
internal users access to various corporate data. These orga-
nizations face problems of how to enforce their enterprise
policies that regulate access to corporate data, and how to
manage these policies efﬁciently. A viable approach is to
provide centralized access control for corporate informa-
tion. By intercepting the trafﬁc over well-deﬁned communi-
cation protocols (TCP/IP, HTTP, IIOP, and others), a single
entry point enforces the domain’s authorization policy.
There are a number of commercially available products
for this type of Web access control [4, 10]. All these prod-
ucts provide a framework for user authentication, autho-
rization management, and access control enforcement for
resources within a secured domain. They centralize autho-
rization rules and provide a ﬁner granularity of access con-
trol than most native access controls in operating systems,
Web servers, and applications do. The notion of authoriza-
tion server is not new, and authorization servers have been
described for instance in [13, 12, 14]. These research proto-
types mostly aim at expressivity increase of the policy lan-
guage, policy neutrality, and for ﬂexible tool provision to
conﬁgure the security policies; concerns that are orthogonal
to the ones addressed by the commercial products in this
market, such as scalability and performance.
This paper focuses on Tivoli Policy Director (PD), which
provides a facility for centrally managing policy to govern
access to resources over geographically dispersed intranets
and extranets. Policy Director provides authorization ser-
vices to applications. Applications that are part of the Pol-
icy Director family include WebSEAL, NetSEAL (for TCP-
based applications), Application Server (for CORBA appli-
cations), and MQSeries (for MQSeries queues). Third-party
applications can use Policy Director’s authorization service
by calling its standard-based Authorization API [11]. Be-
sides its policy management features, Policy Director also
supports (additional) external authorization services.
WebSEAL is an HTTP proxy, installed in front of a
Web server or group of Web servers, that controls access to
Web resources by performing authorization checks on URL
names. For that purpose, WebSEAL authenticates users and
then acquires user credentials (e.g., group memberships).
Subsequently, WebSEAL checks authorization (i.e., makes
an access control decision) to protected URL-addressable
resources, including “dynamic URLs” generated by appli-
cations, based on the user’s credentials. Thus, Policy Di-
rector performs as a reverse Web proxy; it appears as a
Web server to clients and as a Web browser to the back-end
servers it is protecting.
Policy Director provides a wide range of built-in authen-
ticators, supports external authenticators, and offers differ-
ent qualities of protection and accounting. To provide scal-
ability, Policy Director can off-load its authentication and
authorization services to separate servers. For example,
front-end replicated WebSEAL servers load balance client
requests; back-end replicated Web servers mirror resources
in a uniﬁed name space for high availability.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
This paper presents the centralized Policy Director’s au-
thorization service and its utilization. Section 2 outlines the
Policy Director architecture. Section 3 introduces the ele-
ments of the authorization model and explains the logic of
the access decision function. Section 4 depicts the admin-
istration scheme, where permissions on different regions of
the protected object namespace lead to delegated manage-
ment. WebSEAL is elaborated on in Section 5, followed by
an implementation of the Chinese Wall policy in Section 6.
Section 7 draws conclusions.
2 Architecture
In a Policy Director environment, access to a resource
is managed by an application server, which is the reference
monitor for the resource. When a client attempts to perform
an operation on the resource, the reference monitor passes
the client’s identity together with the name of the resource
and the set of permissions required to execute the requested
operation to the Authorization server.
Policy Director’s Authorization Service provides autho-
rization services to applications that are part of the Policy
Director family, WebSEAL for example, or to third-party
applications. Third-party applications access these services
via the Authorization API, a component of the Policy Di-
rector Application Toolkit (ADK), which implements The
Open Group Authorization API standard [11].
Figure 1. Authorization service.
The basic components of the Authorization Service
(dashed box in Figure 1) are the primary (master) Autho-
rization Policy database, the Management server (ivmgrd),
the Authorization server (ivacld), and possibly some Exter-
nal Authorization server(s). The Management server main-
tains the primary Authorization Policy Database, replicates
this policy information throughout the secure domain, and
updates the database replicas whenever a change is made to
the primary database. The Authorization server determines
a client’s ability to access a protected resource. The Au-
thorization Service also provides a management interface
(Management Console or the pdadmin utility) that allows
the state of the policy database to be changed.
To increase availability and performance, Authorization
Service components can be replicated. The database is
replicated for each application (local cache mode) or the ap-
plication uses a shared replica cached by the remote Autho-
rization Server. Maintaining distinct stores of authorization
information has also the beneﬁt of making access decisions
faster by generating optimized representations [12]. Gen-
eral and static authorization information stored in the mas-
ter Authorization Policy database is “pushed” to the remote
Authorization Server.
The Policy Director Authorization Service relies on ex-
ternal components to provide and maintain the security at-
tributes of principals. User and group membership infor-
mation, for example, are stored in registries as provided by
DCE, LDAP, Domino, etc.
An application’s reference monitor intercepts requests of
clients to access resources it protects. If necessary, it au-
thenticates the client whose identity is then represented by a
set of privilege attributes. To check whether the client pos-
sesses the required permission to access the resource, the
reference monitor uses the Authorization Service via calls
to Authorization API. The Authorization Service compares
the client’s identity to control attributes associated with the
resource. NetSEAL and Application Server, two members
of the Policy Director family, intercepts ftp or telnet access
or IIOP messages. WebSEAL, another family member, is
described in Section 5.
3 Authorization Model
In Policy Director, an authorization database deﬁnes the
authorization state that determines whether a given request
has to be considered authorized. The control attributes are
stored in access control lists (ACLs) and protected object
policies (POPs). Both entities are named and objects in their
own right, called templates. Whereas most ACL systems
store the lists at the resource (within the application), Policy
Director decouples the authorization information by intro-
ducing the notion of protected objects, or objects for short,
which are the logical representations of resources. Access
to a resource is controlled by attaching an ACL and/or POP
template to the corresponding object.
In the way the authorization database and thus the autho-
rization state can be changed, Policy Director follows the
administration paradigm, where only a restricted group of
users (security administrators) can change the authorization
state. However, the ownership paradigm is used to control
the capabilities of security administrators to change man-
agement data, for example ACL templates or user deﬁni-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
tions.
The speciﬁcation of access rights in Policy Director is
identity-based – users with similar security properties are
collected into groups, and permissions are granted to users
and to groups, thus establishing an indirect relationship be-
tween users and rights. Only permissions that represent ap-
provals can be given.
3.1 Protected Object Namespace
The protected object namespace is a hierarchical por-
trayal of resources that belong to a secure domain. Its el-
ements are strings whose syntax and structure are similar
to absolute URIs [1] but without the scheme, machine, and
query components. The slash character (‘/’) is used to de-
limit, from left to right, hierarchical substrings of the ob-
ject’s name. Thus, the strings
/aaaaaaa
/cgi-bin/test-cgi.exe
/pic/pd.gif
/products.nsf/By+Product+Nbr/$SearchForm
/sales/budget/quarter1/New%20York/travel
/7595ed78b0641e0071ed70/99d37fe852564050
are examples of object names.
ACLs and POPs are attached to objects, and objects
without attached ACL (POP) inherit the ACL (POP) of the
closest ancestor. Authorizations are granted to subjects,
which can be single users or groups. A user may belong
to several groups but there is no group hierarchy, i.e. groups
cannot be members of other groups. Users are the princi-
pals of the secure domain that can be authenticated. Be-
sides users and groups, there are two additional ACL en-
tries: any-authenticated matches any authenticated
user and unauthenticated matches any unauthenti-
cated user.
Access Control Lists. A permission is an abstract notion,
in fact it is only a name, whose existence is checked for.
For ease of administration, a permission might denote a cer-
tain type of access (e.g., read, write, execute). However,
different objects might employ different access rights for
the same permission. Additional permissions can be intro-
duced to denote that an external authorization server should
be contacted.
Policy Director’s access control is discretionary in the
sense that some individual users (administrators) are “own-
ers” of ACL templates and therefore have complete discre-
tion over who should be authorized to perform which action
on the object. Ownership is usually acquired as a conse-
quence of creating the ACL template. Granting the control
(c) permission gives “ownership” of the ACL template. It
allows one to create, delete, and change entries in the ACL,
or to delete the ACL template. Subjects with ownership
privilege on an ACL template may grant any permission,
including ownership, to any other user or group.
Besides the 18 standard permissions, an implementer of
an object can deﬁne additional 14 permissions for speciﬁc
access rights. To support large numbers of operations or
properties on an object, Policy Director also allows one to
deﬁne groups of permissions, supporting a total of 32 per-
mission groups (including the primary permission group of
the above standard permissions), with up to 32 permissions
per group. CORBA Security also uses the notion of permis-
sion groups, called rights families, to extend the number of
permissions [7]. A different approach is used in Windows
2000, where the object type ﬁeld of an ACL entry speciﬁes
to which portion of an object it refers [9].
Protected Object Policies. Whereas ACL policies are the
grounds on which the Authorization service gives a yes/no
answer to a given request, protected object policies may im-
pose additional conditions on the request that are passed
back to the Resource Manager along with the “yes” answer.
It is the responsibility of the Resource Manager to enforce
the (returned) POP conditions. Conditions imposed by a
POP apply to all principals.
A POP is a set of attribute-value pairs. Predeﬁned at-
tributes allow one to express quality of protection and audit
levels, to restrict access to a speciﬁc time period or to certain
IP endpoints, and to set a warning mode. Administrator-
deﬁned attributes can be used to store information for use
by external authorization services.
Any object is controlled by an ACL and a POP, which
may inﬂuence each other.
If the POP’s warning mode is
enabled, the conditions setup by a POP become inactive for
every requester, thus providing a way to test ACL and POP
policies before they are made active. On the other hand, a
granted bypass TOD (B) permission in the controlling ACL
overrides the conditions of the time-of-day attribute in the
POP.
POPs resemble to some extent the conditions ﬁeld of
an access control rule (“assertion”) in KeyNote [3], which
consists of several relational expressions and compliance
value(s), for example ApproveAndLog. POPs also bear
some similarity to the concept of provisions [6] that pro-
vide conditional authorizations – binary decisions can be
extended to “allow access provided some actions are taken.”
For example, POP templates allow one to specify levels of
authentication, protection and auditing. If necessary Web-
SEAL enforces the required condition by creating a secure
session to the requester or by initiating a step-up authentica-
tion procedure. This implies that access rights are reduced if
a resource is requested over an unencrypted or less strongly
authenticated channel.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:07:21 UTC from IEEE Xplore.  Restrictions apply. 
3.2 Access Right Propagation
Whereas traditional operating systems create ACLs by
copying entries from the container of an object when it is
created, ACLs are explicitly attached to objects in Policy
Director. However, by ACL inheritance, any object without
an attached ACL inherits the nearest ACL attached to an
object above it in the hierarchy. This leads to the concept
of regions, sets of objects that share the same protection
properties. In a region, there is one and only one object with
an ACL attached to it (the root of the region). The other
objects within the region are all the objects below the root
that have no explicitly set ACL and are reachable without
passing through an object with an explicitly set ACL.
Attached ACL templates form regions in a given pro-
tected object namespace. In the protected object namespace
below for example, there are four ACL templates A, B, C,
and D attached as follows:
A /
B /c1/c2/
C /c1/c2/c3/c4/
D /c1/c2/c3/c4/c5/f2
They establish four nested regions: object /c1/ will be
in region A; object /c1/c2/f is in region B; and object
/c1/c2/c3/c4/f is in region C.
ACL inheritance allows permissions set on an object to
propagate to every object located underneath it until another
ACL occurs. This also includes every new object created
within the scope of the ACL. Thus regions are open; i.e. ob-
jects added later to the tree will be within the scope of the