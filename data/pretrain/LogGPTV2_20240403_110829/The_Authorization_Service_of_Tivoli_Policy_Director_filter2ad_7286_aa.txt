# The Authorization Service of Tivoli Policy Director
**Author:** Günter Karjoth  
**Affiliation:** IBM Research, Zurich Research Laboratory

## Abstract
This paper introduces the Authorization Service provided by Tivoli Policy Director (PD) and its integration with PD family members and third-party applications. Policies are defined over an object namespace and stored in a database, which is managed through a management console and accessed via an Authorization API. The object namespace abstracts from heterogeneous systems, enabling consistent policy definitions and centralized management. Features such as ACL inheritance and delegated management facilitate efficient policy administration. The Authorization API allows applications to decouple authorization logic from application logic. By intercepting traffic over well-defined communication protocols (TCP/IP, HTTP, IIOP, etc.), PD family members establish a single entry point for enforcing enterprise policies that regulate access to corporate data.

## 1. Introduction
With the Internet becoming the primary medium for disseminating information globally, companies and government agencies are increasingly opening their IT infrastructure to external customers and partners. This raises challenges in enforcing and managing enterprise policies that regulate access to corporate data. A viable solution is to provide centralized access control for corporate information. By intercepting traffic over well-defined communication protocols (TCP/IP, HTTP, IIOP, etc.), a single entry point can enforce the domain's authorization policy.

Several commercially available products offer web access control [4, 10]. These products provide frameworks for user authentication, authorization management, and access control enforcement for resources within a secured domain. They centralize authorization rules and offer finer-grained access control compared to most native access controls in operating systems, web servers, and applications. The concept of an authorization server is not new, and research prototypes have been described in [13, 12, 14], focusing on expressive policy languages, policy neutrality, and flexible tools for configuring security policies. However, commercial products in this market prioritize scalability and performance.

This paper focuses on Tivoli Policy Director (PD), which provides a facility for centrally managing policies to govern access to resources across geographically dispersed intranets and extranets. PD offers authorization services to applications, including WebSEAL, NetSEAL (for TCP-based applications), Application Server (for CORBA applications), and MQSeries (for MQSeries queues). Third-party applications can use PD’s authorization service by calling its standard-based Authorization API [11]. In addition to policy management, PD supports external authorization services.

WebSEAL, an HTTP proxy, controls access to web resources by performing authorization checks on URL names. It authenticates users and acquires user credentials (e.g., group memberships). Subsequently, WebSEAL checks authorization for protected URL-addressable resources, including dynamically generated URLs. Thus, PD acts as a reverse web proxy, appearing as a web server to clients and as a web browser to the back-end servers it protects.

PD provides a wide range of built-in authenticators, supports external authenticators, and offers different levels of protection and accounting. To ensure scalability, PD can offload its authentication and authorization services to separate servers. For example, front-end replicated WebSEAL servers balance client requests, while back-end replicated web servers mirror resources in a unified namespace for high availability.

This paper presents the centralized authorization service of PD and its utilization. Section 2 outlines the PD architecture. Section 3 introduces the elements of the authorization model and explains the logic of the access decision function. Section 4 describes the administration scheme, where permissions on different regions of the protected object namespace lead to delegated management. Section 5 elaborates on WebSEAL, followed by an implementation of the Chinese Wall policy in Section 6. Section 7 draws conclusions.

## 2. Architecture
In a PD environment, access to a resource is managed by an application server, which acts as the reference monitor for the resource. When a client attempts to perform an operation on the resource, the reference monitor passes the client’s identity, the resource name, and the required permissions to the Authorization server.

PD’s Authorization Service provides authorization services to applications within the PD family, such as WebSEAL, or to third-party applications. Third-party applications access these services via the Authorization API, a component of the PD Application Toolkit (ADK), which implements The Open Group Authorization API standard [11].

### Key Components of the Authorization Service
- **Primary (Master) Authorization Policy Database:** Maintains the main policy information.
- **Management Server (ivmgrd):** Manages the primary database, replicates policy information throughout the secure domain, and updates database replicas.
- **Authorization Server (ivacld):** Determines a client’s ability to access a protected resource.
- **External Authorization Servers:** Optional, for additional authorization services.

To enhance availability and performance, components of the Authorization Service can be replicated. The database can be replicated for each application (local cache mode) or shared by remote Authorization Servers. Distinct stores of authorization information also enable faster access decisions by generating optimized representations [12]. General and static authorization information from the master database is "pushed" to the remote Authorization Server.

PD relies on external components to manage the security attributes of principals. User and group membership information, for example, are stored in registries provided by DCE, LDAP, Domino, etc.

An application’s reference monitor intercepts client requests to access protected resources. If necessary, it authenticates the client, whose identity is then represented by a set of privilege attributes. The reference monitor uses the Authorization Service via calls to the Authorization API to check if the client has the required permission to access the resource. The Authorization Service compares the client’s identity to control attributes associated with the resource. Members of the PD family, such as NetSEAL and Application Server, intercept FTP, Telnet, or IIOP messages. WebSEAL, another family member, is described in Section 5.

## 3. Authorization Model
In PD, an authorization database defines the authorization state, determining whether a given request is authorized. Control attributes are stored in Access Control Lists (ACLs) and Protected Object Policies (POPs). Both entities are named and objects in their own right, called templates. While most ACL systems store lists at the resource (within the application), PD decouples authorization information by introducing the notion of protected objects, which are logical representations of resources. Access to a resource is controlled by attaching an ACL and/or POP template to the corresponding object.

### Changing the Authorization State
PD follows an administration paradigm where only a restricted group of users (security administrators) can change the authorization state. However, the ownership paradigm is used to control the capabilities of security administrators to change management data, such as ACL templates or user definitions.

### Identity-Based Access Rights
Access rights in PD are identity-based. Users with similar security properties are grouped, and permissions are granted to users and groups, establishing an indirect relationship between users and rights. Only permissions that represent approvals can be given.

#### 3.1. Protected Object Namespace
The protected object namespace is a hierarchical representation of resources within a secure domain. Its elements are strings similar to absolute URIs but without the scheme, machine, and query components. The slash character ('/') delimits hierarchical substrings of the object’s name. Examples of object names include:

```
/aaaaaaa
/cgi-bin/test-cgi.exe
/pic/pd.gif
/products.nsf/By+Product+Nbr/$SearchForm
/sales/budget/quarter1/New%20York/travel
/7595ed78b0641e0071ed70/99d37fe852564050
```

ACLs and POPs are attached to objects, and objects without attached ACLs (or POPs) inherit the ACL (or POP) of the closest ancestor. Authorizations are granted to subjects, which can be individual users or groups. A user may belong to several groups, but there is no group hierarchy. Users are the principals of the secure domain that can be authenticated. Besides users and groups, there are two additional ACL entries: `any-authenticated` (matches any authenticated user) and `unauthenticated` (matches any unauthenticated user).

##### Access Control Lists (ACLs)
A permission is an abstract notion, essentially a name checked for existence. For ease of administration, a permission might denote a certain type of access (e.g., read, write, execute). However, different objects might employ different access rights for the same permission. Additional permissions can be introduced to denote that an external authorization server should be contacted.

PD’s access control is discretionary, meaning some individual users (administrators) are "owners" of ACL templates and have complete discretion over who should be authorized to perform which action on the object. Ownership is usually acquired when creating the ACL template. Granting the `control (c)` permission gives "ownership" of the ACL template, allowing one to create, delete, and change entries in the ACL, or to delete the ACL template. Subjects with ownership privilege on an ACL template can grant any permission, including ownership, to any other user or group.

Besides the 18 standard permissions, an implementer of an object can define up to 14 additional permissions for specific access rights. To support large numbers of operations or properties on an object, PD allows defining groups of permissions, supporting a total of 32 permission groups (including the primary permission group of the standard permissions), with up to 32 permissions per group. This approach is similar to the notion of permission groups in CORBA Security, called rights families [7]. A different approach is used in Windows 2000, where the object type field of an ACL entry specifies the portion of the object it refers to [9].

##### Protected Object Policies (POPs)
While ACL policies provide a yes/no answer to a given request, POPs may impose additional conditions on the request, passed back to the Resource Manager along with the "yes" answer. It is the responsibility of the Resource Manager to enforce the returned POP conditions. Conditions imposed by a POP apply to all principals.

A POP is a set of attribute-value pairs. Predefined attributes allow expressing quality of protection and audit levels, restricting access to a specific time period or IP endpoints, and setting a warning mode. Administrator-defined attributes can store information for use by external authorization services.

Any object is controlled by an ACL and a POP, which may influence each other. If the POP’s warning mode is enabled, the conditions set by a POP become inactive for every requester, providing a way to test ACL and POP policies before they are made active. On the other hand, a granted bypass Time-of-Day (B) permission in the controlling ACL overrides the conditions of the time-of-day attribute in the POP.

POPs resemble the conditions field of an access control rule ("assertion") in KeyNote [3], consisting of several relational expressions and compliance values, such as `ApproveAndLog`. POPs also bear similarity to the concept of provisions [6], which provide conditional authorizations—binary decisions can be extended to "allow access provided some actions are taken." For example, POP templates allow specifying levels of authentication, protection, and auditing. If necessary, WebSEAL enforces the required condition by creating a secure session to the requester or initiating a step-up authentication procedure. This implies that access rights are reduced if a resource is requested over an unencrypted or less strongly authenticated channel.

#### 3.2. Access Right Propagation
Unlike traditional operating systems, which create ACLs by copying entries from the container of an object when it is created, ACLs in PD are explicitly attached to objects. However, through ACL inheritance, any object without an attached ACL inherits the nearest ACL attached to an object above it in the hierarchy. This leads to the concept of regions, sets of objects that share the same protection properties. In a region, there is one and only one object with an ACL attached to it (the root of the region). The other objects within the region are all the objects below the root that have no explicitly set ACL and are reachable without passing through an object with an explicitly set ACL.

Attached ACL templates form regions in a given protected object namespace. For example, in the following protected object namespace, there are four ACL templates A, B, C, and D attached as follows:

- A: `/`
- B: `/c1/c2/`
- C: `/c1/c2/c3/c4/`
- D: `/c1/c2/c3/c4/c5/f2`

These templates establish four nested regions: 
- Object `/c1/` is in region A.
- Object `/c1/c2/f` is in region B.
- Object `/c1/c2/c3/c4/f` is in region C.

ACL inheritance allows permissions set on an object to propagate to every object located underneath it until another ACL occurs. This includes every new object created within the scope of the ACL. Thus, regions are open; i.e., objects added later to the tree will be within the scope of the nearest ACL.