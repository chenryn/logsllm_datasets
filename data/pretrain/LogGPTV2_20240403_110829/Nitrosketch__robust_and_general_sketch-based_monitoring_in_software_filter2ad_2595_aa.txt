# NitroSketch: Robust and General Sketch-based Monitoring in Software Switches

**Authors:**
- Zaoxing Liu (Carnegie Mellon University)
- Ran Ben-Basat (Harvard University)
- Gil Einziger (Ben-Gurion University)
- Yaron Kassner (Technion)
- Vladimir Braverman (Johns Hopkins University)
- Roy Friedman (Technion)
- Vyas Sekar (Carnegie Mellon University)

## Abstract
Software switches are becoming increasingly important as measurement vantage points in networked systems. Sketching algorithms, which provide high-fidelity approximate measurements, offer a promising alternative to traditional methods like packet sampling. However, these sketches often incur significant computational overhead in software switches. Existing implementations of sketches in virtual switches typically compromise on performance (handling 40 Gbps line-rate packet throughput with low CPU usage), robustness (accuracy guarantees across diverse workloads), or generality (support for various measurement tasks).

In this paper, we present the design and implementation of **NitroSketch**, a sketching framework that systematically addresses these performance bottlenecks without sacrificing robustness and generality. Our key contribution is the development of rigorous yet practical solutions to reduce the number of per-packet CPU and memory operations. We have implemented NitroSketch on three popular software platforms (Open vSwitch-DPDK, FD.io-VPP, and BESS) and evaluated its performance. Our results show that NitroSketch achieves accuracy comparable to unmodified sketches while providing up to two orders of magnitude speedup and up to a 45% reduction in CPU usage.

## CCS Concepts
- Networks → Network monitoring; Network measurement

## Keywords
- Sketch, Software Switch, Virtual Switch, Flow Monitoring, Sketching Algorithm

## ACM Reference Format
Zaoxing Liu, Ran Ben-Basat, Gil Einziger, Yaron Kassner, Vladimir Braverman, Roy Friedman, Vyas Sekar. 2019. NitroSketch: Robust and General Sketch-based Monitoring in Software Switches. In SIGCOMM ’19: 2019 Conference of the ACM Special Interest Group on Data Communication, August 19–23, 2019, Beijing, China. ACM, New York, NY, USA, 17 pages. https://doi.org/10.1145/3341302.3342076

## Permission
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

## Introduction
Traffic measurements are essential for various network functions, including traffic engineering, fairness, load balancing, quality of service, and intrusion detection. While dedicated hardware switches remain important, the transition to virtualized deployments and "white-box" capabilities has led to an increasing reliance on software switches (e.g., Open vSwitch, Microsoft Hyper-V, Cisco Nexus 1000V, FD.io VPP, and BESS). These switches need to support high line rates while maintaining a small resource footprint to avoid constraining other network functions and services.

Sketching algorithms are promising for this purpose, as they provide rigorous accuracy guarantees and support a variety of measurement tasks, such as per-flow frequency estimation, heavy hitter detection, hierarchical heavy hitter detection, distinct flow counting, frequency moment estimation, and change detection. However, the performance of these algorithms in software switches is often suboptimal. For example, Count-Min Sketch and Count Sketch do not achieve 10M packets per second (Mpps), and UnivMon runs at 83Mpps compared to 40Gbps line rates.

In the following sections, we provide background and related work, analyze the performance bottlenecks of sketches, present the design of NitroSketch, and evaluate its performance. We conclude with a summary and future directions.

## Related Work and Motivation
### Background on Sketching Algorithms
Sketches are useful for many network measurement tasks, including:
1. **Heavy Hitter Detection**: Identifying flows that consume more than a threshold α of the total traffic.
2. **Change Detection**: Identifying flows that contribute more than a threshold of the total capacity change over consecutive time intervals.
3. **Cardinality Estimation**: Estimating the number of distinct flows in the traffic.
4. **Entropy Estimation**: Approximating the entropy of different header distributions.
5. **Attack Detection**: Identifying a destination host that receives traffic from more than a threshold number of source hosts.

At a high level, sketches are approximate data structures used to estimate various statistics of a streaming workload. They typically consist of arrays of counters and use independent hash functions to update these counters. For example, the Count-Min Sketch (CMS) maintains d arrays of w counters each. On an update, it computes d independent hash values from the packet’s flow identifier (e.g., 5-tuple) and increases the corresponding counters. The estimate for a given flow’s size is the minimum value among the corresponding counters for that flow.

### Performance in Software Switches
In a software switch context, memory may be less of a constraint, but supporting high line-rates with a low computation footprint is critical. This ensures that other concurrent services (e.g., virtual machine instances) can make maximal use of available resources.

To analyze the performance, we profiled a single-thread OVS-DPDK and found that the CPU room for running added measurement algorithms is limited. Figure 2 shows the measured performance of software implementations of sketches atop OVS-DPDK. We configured the memory allocation of the sketches as recommended in the respective papers. For Count-Min Sketch, we set 5 rows of 1000 counters; for UnivMon, its Count Sketch components have five rows of 10000 counters each. Our results show that sketches impose significant overhead and cannot meet 10Gbps line-rate with a single CPU core for a worst-case workload (i.e., 14.88Mpps with 64B packets). Even the lightweight Count-Min Sketch is far from achieving line-rate processing.

### Existing Solutions
Previous efforts to address these performance issues have either eschewed sketches in favor of simpler data structures or applied heuristic fixes to sketches. Both approaches have fundamental limitations and do not meet our goals of performance, robustness, and generality.

In the next section, we present the design and implementation of NitroSketch, which addresses these challenges.