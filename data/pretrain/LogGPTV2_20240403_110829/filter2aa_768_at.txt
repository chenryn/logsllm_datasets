### 29.9.6 比较

在经典调试架构中，本地调试和远程调试的差异性通过传输层来隔离。即使在本地调试中，也需要使用一个简单的本地调试传输层 TLLoc.DLL。而在重构后的调试器引擎架构中，统一的 IDebugService 接口被用于处理本地调试和远程调试，从而避免了在本地调试时需要形式上的传输层。这种设计差异的原因在于经典调试模型未考虑利用 C++的多态机制，而重构后的架构则充分利用了 C++语言及 COM 接口等技术。

本节介绍了通过进程服务器进行远程调试的方法。与 DbgSrv.exe 类似，WinDBG 工具包中还包含了一个名为 KdSrv.exe 的工具，该工具支持远程内核调试。KdSrv 的工作原理与 DbgSrv 非常相似，但本书不再对此进行详细讨论。

### 补编内容
#### 补编说明

本章原为《软件调试》第三篇中的一章，涉及操作系统的调试支持部分。撰写此章有三个原因：首先，WMI 体现了软件的可配置性和可管理性，并且是软件行业中标准化工作的典范，这与软件调试密切相关；其次，作为系统的重要机制，WMI 遍布于内核、驱动、服务、应用程序、日志文件及管理终端等多个层面，理解 WMI 对于全面了解系统和提升综合能力非常有用；最后，WMI 各组件之间的协作模型展示了优秀的软件架构，使用了 RPC 机制，这对于用户态调试中的复杂任务（如调试 RPC）提供了宝贵的背景知识。

本章是唯一被整章删除的内容，也是最早删除的部分，主要原因是担心其偏离主题。由于这部分内容较早被删除，因此未经仔细审查，仍处于草稿状态。

### WMI
Windows 是一个庞大的系统，如何了解并管理系统各部件的运行状况是一个重要且复杂的问题。如果每个部件都提供一个独立的管理程序，不仅会导致大量的重复开发工作，还会增加用户的学习负担。更好的做法是操作系统实现并提供一套统一的机制和框架，其他部件只需按照一定规范实现与其逻辑紧密相关的部分。WMI（Windows Management Instrumentation）就是这一机制的统称。

WMI 提供了一套标准化的机制来管理本地及远程的 Windows 系统，包括操作系统自身的各个部件以及系统中运行的各种应用软件（前提是它们提供了 WMI 支持）。WMI 最早在 NT4 的 SP4 中出现，并成为后续所有 Windows 操作系统的必备组件。在今天的 Windows 系统中，很容易看到 WMI 的身影，例如计算机管理、事件查看器和服务控制台等。

WMI 是一个广泛的话题，全面介绍可能需要一本书的篇幅，这显然超出了本书的范围。因此，我们的策略是从调试角度了解 WMI 的关键点，以达到以下两个目的：
1. 熟悉现有的 WMI 设施，以便将其应用于实际问题，辅助调试。
2. 在我们的软件产品中加入 WMI 支持，利用 WMI 增强产品的可调试性。

我们将在第 27 章介绍如何在软件开发中使用 WMI，本章将重点介绍 WMI 的架构和工作原理。

### 31.1 WBEM 简介
WMI 是基于 DMTF（Distributed Management Task Force）组织制定的 WBEM 系列标准实现的。DMTF 是一家致力于制定和推广计算机系统管理标准的国际组织，成员包括英特尔、微软、戴尔、IBM 等知名企业。WBEM 的全称是 Web Based Enterprise Management（基于网络的企业管理）。下面先介绍一些 WBEM 的背景知识。

WBEM 起始于 1996 年，旨在制定一套标准来统一企业内计算资源的管理方法，以减少管理的复杂性和成本，降低总体拥有成本（TCO）。相对于用于网络管理的 SNMP 和用于桌面系统管理的 DMI 标准，WBEM 的宗旨是提供一个单一的、可共享的模型来收集信息和实施管理。严格来说，WBEM 本身是一个倡议，但现在通常也将因该倡议而制定的一系列标准称为 WBEM 标准。

### 31.2 CIM 和 MOF
CIM（Common Information Model）是一种层次化的面向对象建模方法，是 WBEM（WMI）中定义和描述受管对象的基本标准。CIM 可以描述物理或逻辑对象。

#### 31.2.1 类和 Schema
CIM 将被管理环境视为由一系列相互联系的系统组成，每个系统又包含许多分立的对象。CIM 使用类来描述这些物理或逻辑对象。

CIM 将对模型的正式定义称为 Schema。每个 Schema 通常定义了模型内的一系列类及其关系。可以将 Schema 理解为类库，人们可以使用已建立的 Schema 来设计新的模型。因此，CIM 文档将 Schema 称为构建管理平台的积木。

根据所描述对象的普遍性，CIM 将 Schema 分为以下三个层次：
- **CIM Core Schema**：适用于所有管理域。
- **CIM Common Schema**：适用于特定管理域，不依赖于特定的技术和实现。
- **Extension Schema**：适用于特定技术，与特定环境（如操作系统）相关。

CIM Core Schema 和 CIM Common Schema 被统称为 CIM Schema。从设计和开发的角度来看，可以把 CIM Schema 理解为 CIM 标准已经定义好的类库。在设计 Extension Schema 时，可以从这些定义好的类派生新的类，以提高建模速度。

#### 31.2.2 MOF
MOF（Managed Object Format）是一种使用文字形式描述 CIM 模型的编程语言。MOF 文件的主要内容是对类、属性、方法和实例声明的文字表达。

学习 MOF 的一种简单方法是阅读 CIM Schema 中已定义的各个类，可以从 DMTF 网站下载包含所有类定义的 MOF 文件压缩包。例如，打开 `CIM_ManagedSystemElement.mof` 文件，可以看到使用 MOF 定义的 `ManagedSystemElement` 类（清单 31-1，为了节约篇幅，删除了部分描述和空行）。

```mof
// ==================================================================
//  CIM_ManagedSystemElement
// ==================================================================
[Abstract, Version ( "2.8.0" ), Description (
    "CIM_ManagedSystemElement is the base class for the System "
    "Element hierarchy. Any distinguishable component of a System "
    "is a candidate for inclusion in this class. [删除多行]")]
class CIM_ManagedSystemElement : CIM_ManagedElement {
    [Description (
        "A datetime value indicating when the object was installed. "
        "A lack of a value does not indicate that the object is not "
        "installed."),
     MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
    datetime InstallDate;
    [Description (
        "The Name property defines the label by which the object is "
        "known. When subclassed, the Name property can be overridden "
        "to be a Key property."),
     MaxLen ( 1024 )]
    string Name;
    [删除多行]
};
```

熟悉面向对象编程的读者可以轻松理解上述大部分内容。对于某些不懂的内容，查阅 CIM 文档（CIM Infrastructure Specification）即可，例如 `InstallDate` 属性上的 `MappingStrings` 修饰符的含义。

#### 31.2.3 WMI CIM Studio
WMI CIM Studio 是微软 WMI Tools 工具包中的一个工具，通过它可以浏览系统中的 CIM 类和对象并执行各种操作，是学习 CIM 和解决 WMI 相关问题的重要助手。

WMI 工具曾是 WMI SDK 的一部分，但现在已被集成到 Platform SDK 中。WMI 工具可以单独从微软网站下载。搜索 WMI Administrative Tools 即可找到下载链接，下载名为 `WMITools.exe` 的安装文件。安装后，开始菜单中会添加一个名为 WMI Tools 的程序组，其中包含以下工具：
- **WMI CIM Studio**：观察编辑 CIM 库中的类、属性、修饰符和实例；运行选中的方法；生成和编译 MOF 文件。
- **WMI Object Browser**：观察 CIM 对象，编辑属性值和修饰符，运行类的方法。
- **WMI Event Registration Tool**：配置事件消费者，创建或观察事件消费者实例。
- **WMI Event Viewer**：显示所有注册消费者实例的事件。

除了 WMI Event Viewer 外，其他工具均以 OCX 控件形式在浏览器中运行。如果浏览器禁止了 OCX 控件运行，则必须选择允许被阻止的内容才能正常工作。

启动 CIM Studio 后，会出现选择要连接的命名空间对话框（图 31-3）。命名空间定义了对象的生存范围和可见范围，是 CIM 中组织类和管理信息的一个逻辑单位。使用数据库术语理解，一个命名空间对应于一个数据库（类好似表，属性好似字段）。一个 WBEM 系统中可以有多个命名空间。表 31-1 列出了典型的 Windows XP 系统中存在的命名空间及其简单描述。

| 命名空间（Namespace） | 描述 |
|------------------------|------|
| Root                   | 根   |
| CIMV2                  | CIM  |
| CIMV2\Applications     | 某些应用程序（如 IE） |
| Default                | 默认的命名空间 |
| Directory\LDAP         | Lightweight Directory Access Protocol |
| Microsoft\HomeNet      | 微软家庭网络 |

希望这些优化后的文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请随时告知。