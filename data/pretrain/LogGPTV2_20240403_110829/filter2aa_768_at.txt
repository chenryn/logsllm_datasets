如果将清单 29-18 的 0 到 2 号栈帧放在清单 29-17 的#0b 到#0f 号栈帧之上，那么合并
起来的函数栈调用序列恰好与本地调试时的情况相同。因此可以把这样的远程调试功能看
作是利用 RPC 机制将调试器引擎的功能分布在两台机器上，而分割的边界是在调试服务
层，即 IUserDebugServices 接口。远程调试时，客户机上使用 ProxyIUserDebugServicesN
类远程调用服务进程中的 SFN_IUserDebugServicesN_XXX 系列函数，后者再调用真正的
调试服务（LiveUserDebugServices）。这使得远程调试时，调试目标类（LiveUserTargetInfo）
可以使用统一的方式来处理本地调试和远程调试。 
类似的，等待调试事件和执行用户输入的调试命令的过程也是利用 RPC 机制分布在
两台机器上，不再赘述。 
29.9.6  比较 
在经典调试架构中，使用传输层来隔离本地调试和远程调试的差异性，即使是本地
调试也要使用一个简单的本地调试传输层 TLLoc.DLL。在重构后的调试器引擎架构中，
使用统一的 IDebugService 接口来统一本地调试和远程调试。这样的好处是本地调试时
不再需要形式上的传输层。经典调试模型设计时没有考虑使用 C++的多态机制，而后者
设计时就想到了要发挥 C++语言和 COM 接口等技术，这是导致以上差异的原因。 
本节介绍了通过进程服务器进行远程调试的实现方法。与 DbgSrv.exe 相对应，
WinDBG 工具包中还有一个名为 KdSrv.exe 的工具，KdSrv 用于支持远程内核调试，它的
工作原理与 DbgSrv 非常类似，本书不再详细讨论。 
《软件调试》补编 
- 71 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
补编内容
补编内容
补编内容
补编内容 8 WMI 
补编说明： 
这一章本来是《软件调试》第 3 篇中的一章，是操作系统的调试支持中的一
部分。 
写作这一章的原因有三个，一是 WMI 体现了软件的可配置性和可管理性，它
是软件行业中标准化工作做的最好的一个典型。而可配置行和可管理性都与
软件调试有着密切的关系。第二个原因是 WMI 作为系统的一种重要机制，遍
布在系统的各个部分，内核、驱动、服务、应用程序、日志文件、管理终端
等等，因此，理解这一内容对于了解整个系统，提高综合能力很有用。第三
个原因是，WMI 各个部件之间的协作模型是设计的很不错的软件架构，使用了
RPC 机制，调试 RPC 是用户态调试中较难的任务，这一章中以背景知识的方式
介绍了一部分 RPC 的基础知识。 
这一章是唯一被整章删除的内容，也是最早删除的内容，删除的原因是担
心被质疑跑题。 
因为这部分内容被删除的较早，所以没有做过仔细的审查，还处于草稿的
状态。 
《软件调试》补编 
- 72 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
WMI 
Windows 是个庞大的系统，如何了结系统中各个部件的运行状况并对它们进行管理和
维护是个重要而复杂的问题。如果每个部件都提供一个管理程序，那么不仅会导致很多的
重复开发工作，而且也会导致用户要学习各种不同的程序和界面。更好的做法是操纵系统
实现并提供一套统一的机制和框架，其它部件只要按照一定的规范实现与自身逻辑密切相
关的部分。WMI（Windows Management Instrumentation）就是对这一套机制的统称。 
WMI 提供了一套标准化的机制来管理本地及远程的 Windows 系统，包括操作系统自
身的各个部件以及系统中运行的各种应用软件，只要它们提供了 WMI 支持。WMI 最早出
现在 NT4 的 SP4 中，并成为其后的所有 Windows 操作系统的必不可少的一个部分。在今
天的 Windows 系统中，很容易就可以看到 WMI 的身影，比如计算机管理（Computer 
Management），事件查看器，系统服务管理（Services Console）等。 
WMI 是个很大的话题，全面的介绍可能需要一本书的篇幅，这显然超出了本书的范
围。所以我们的策略还是从调试角度来了解 WMI 的要点，以达到如下两个目的： 
熟悉现有的 WMI 设施，以便可以把它们应用到实际问题中，辅助调试。 
在我们的软件产品中，加入 WMI 支持，利用 WMI 增强产品的可调试性。 
我们将在第 27 章介绍如何如何在软件开发中使用 WMI，本章我们将着重介绍 WMI
的架构和工作原理。 
31.1  WBEM 简介 
WMI 是基于 DMTF（Distributed Management Task Force）组织制定的 WBEM 系列标
准实现的。DMTF 是一家旨在建立和推行计算机系统管理有关的标准国际组织，其成员有
包括英特尔、微软 Dell、IBM 等在内的众多著名企业。WBEM 的全称是 Web Based Enterprise 
Management（基于网络的企业管理）。下面我们先介绍一些 WBEM 有关的背景知识。 
WBEM 起始于 1996 年，其目的是发起制定一套标准来统一企业内计算资源的管理方
法，以减少管理的复杂性和费用，降低总体拥有成本（TCO）。相对于用于网络管理的 SNMP
（ Simple Network Management Protocol ） 和 用 于 桌 面 系 统 管 理 的 DMI （ Desktop 
Management Interface）的标准，WBEM 的宗旨是提供一个单一的，可共享的模型（a single, 
shared model）来收集信息和实施管理。因此，严格说来 WBEM 本身是一个倡议，但是今
天也经常把因为该倡议而制定的一系列标准泛称为 WBEM 标准。 
CHAPTER 
第  31  
  章 
《软件调试》补编 
- 73 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
图 31-1  WBEM 旨在通过一个单一的可共享的模型来交流信息和实施管理 
WBEM 主要由以下几个部分组成： 
公共信息模型 (Common Information Model，简称 CIM)规约 ：定义了实现企业网络
管理（WBEM）的基本原则和方法。其核心是如何使用 CIM 为被管理对象（managed 
objects，简称受管对象）建模。CIM 是一种语言无关的面向对象编程模型，它使用类
来描述管理对象。与 C++的类类似，CIM 的类也可以包含属性和行为，可以相互继承。
受管对象格式 (Managed Object Format) 语言是表达 CIM 模型的程序语言之一。MOF
是基于 IDL（Interface Definition Language）的，熟悉 COM 编程的读者应该知道 IDL
是描述 COM 接口的一种主要方法。MOF 有它独有的语法，但使用 DMTF 提供的 DTD
（Document Type Definition）可将 MOF 文件转化为 XML 文件。使用 CIM 和 MOF，
我们便可以使用面向对象设计方法来对管理对象进行描述和建模。 
CIM Schema：作为 WBEM 模型库的一个部分，DMTF 建立了核心模型（Core Model）
和公共模型（Common Model）用于描述具有普遍意义的概念和对象，统称为 CIM 
Schema。其它开发者可以使用这些模型来提高设计和开发速度。 
CIM 查询语言：用于从基于 CIM 建设的管理系统中提取数据的查询（query）语言。 
CIM 的 XML 表示（Representation of CIM in XML）：如何使用 XML 表示 SIM 模型。 
从 DMTF 网站（http://www.dmtf.org）可以下载以上标准和模型的最新版本。 
31.2  CIM 和 MOF 
CIM（Common Information Model）是一种层次化的面向对象的建模方法，是 WBEM
（WMI）中定义和描述受管对象的基本标准。CIM 既可以描述物理的对象，也可以描述
逻辑对象。 
《CIM 基础规约》（COMMON INFORMATION MODEL (CIM) INFRASTRUCTURE 
SPECIFICATION）是 CIM 标准的根本文件，也是了解 CIM 标准的最好资料。笔者写作本
内容时，该文档的最新版本是 2.3。下面就以该版本为例，介绍 CIM 的核心内容。 
《软件调试》补编 
- 74 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
31.2.1  类和 Schema 
CIM 将被管理环境看作是由一系列相互联系的系统组成的，每个系统又包含很多个分
立的对象。CIM 使用类来描述物理或者逻辑对象。 
CIM 将对模型的正式定义叫做 Schema。每个 Schema 通常定义了模型内的一系列类
和类之间的关系。可以把 Schema 理解为类库，人们可以使用建立好的 Schema 来设计新
的模型。因此，CIM 文档将 Schema 称为是用来建造管理平台的积木（building block）。 
Schema 是各种建模技术中很常用的一个术语，其基本含义就是对问题域的模型描述，
比如数据库设计中的 Schema，和 XML Schema 等。 
CIM 规定所有完整的类名应该是以 Schema 名开始，并使用下划线与类名分隔。比如， 
CIM_ManagedSystemElement
（
CIM
的
基
类
） ，
CIM_ComputerSystem
，
CIM_SystemComponent 是 CIM Schema 中的几个类。 
根据所描述对象的普遍性，CIM 将 Schema 分为如下三个层次： 
CIM Core Schema：适用于所有管理域。 
CIM Common Schema：适用于特定管理域，不依赖于特定的技术和实现。 
Extension Schema：适用于特定技术。与特定的环境（如操作系统）相关。 
CIM Core Schema 和 CIM Common Schema 被统称为 CIM Schema。从设计和开发的角
度来看，可以把 CIM Schema 理解为 CIM 标准已经定义好的类库。在设计 Extension Schema
时可以从这些定义好的类派生新的类，以提高建模的速度。 
从 DMTF 网站，可以下载包含所有 CIM Schema 详细定义的文件。随着技术的发展，
CIM Schema 的 定 义 也 在 不 断 扩 充 。 目 前 的 版 本 包 含 的 Schema 有 CIM_Core ，
CIM_Application，CIM_Database，CIM_Device，CIM_Event，CIM_Interop，CIM_IPsecPolicy，
CIM_Metrics，CIM_Network，CIM_Physical，CIM_Policy，CIM_Security，CIM_Support，
CIM_System 和 CIM_User。这些 Schema 中的类最终都是以 CIM 作为 Schema 名的。 
CIM 中定义了一套以 UML（Unified Modeling Language）规范为基础的图形语言来定
义 CIM 模型，称为 Meta Schema。Meta Schema 的绝大多数表达方法都与 UML 相同。比
如，用一个包含类名的矩形来表示类，矩形内可以包含类的属性和方法，使用不同样式的
连线表示类之间的关系。但略微不同的是， Meta Schema 还使用线的颜色来方便阅读，
表示关联关系的的线通常使用红颜色，表示继承关系的线用蓝颜色，表示聚合关系
（aggregation）的线用绿色，UML 中并没有这些约定。 
图 31-2 显示了 CIM 核心模型（Core Model Schema）中的几个重要类的 Meta Schema  
《软件调试》补编 
- 75 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
图 31-2  CIM 核心模型中的几个重要类的 Meta Schema 表示 
表示。因为该图的所有类都是在 CIM Schema 内，所以类名中省略了 CIM 字样。图中最上
面的 ManagedElement（CIM_ManagedElement）是 CIM 中的最高基类。它的一个极其重要
的派生类是 ManagedSystemElement 类，所以的系统要素都是从这个类派生出的，在 WMI
的 实 现 中 ， ManagedSystemElement 是 最 高 基 类 。 下 一 层 次 的 两 个 重 要 类 便 是
PhysicalElement 和 LogcalElement，分别用来描述物理元素和逻辑元素的基本属性（这两
个类没有方法）。 
31.2.2  MOF 
MOF(Managed Object Format) 是使用文字形式来描述 CIM 模型的程序语言。MOF 文
件的主要内容是对类、属性、方法、和实例声明的文字表达。 
学习 MOF 的一种简单方法就是阅读 CIM Schema 中已经定义好的各个类，可以从
DMTF 网站（http://www.dmtf.org/standards/cim/）下载包含所有类定义的 MOF 文件压缩包。 
例如，打开 CIM_ManagedSystemElement.mof（解压后的 Core 目录下）文件，就可以
看到使用 MOF 定义的 ManagedSystemElement 类（清单 31-1，为了节约篇幅，笔者删除
了部分描述和空行）。 
清单 31-1  使用 MOF 语法定义的 ManagedSystemElement 类 
// ================================================================== 
//  CIM_ManagedSystemElement 
// ================================================================== 
   [Abstract, Version ( "2.8.0" ), Description ( 
       "CIM_ManagedSystemElement is the base class for the System " 
       "Element hierarchy. Any distinguishable component of a System " 
       "is a candidate for inclusion in this class. [删除多行]")] 
class CIM_ManagedSystemElement : CIM_ManagedElement { 
      [Description ( 
          "A datetime value indicating when the object was installed. " 
          "A lack of a value does not indicate that the object is not " 
          "installed."),  
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }] 
   datetime InstallDate; 
      [Description ( 
          "The Name property defines the label by which the object is " 
          "known. When subclassed, the Name property can be overridden " 
《软件调试》补编 
- 76 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
          "to be a Key property."),  
       MaxLen ( 1024 )] 
   string Name; 
   [删除多行] 
}; 
观察上面的清单，熟悉面向对象编程的读者可以很容易看懂其中的绝大部分内容。比
如类和继承关系声明都与 C++完全一样。 
class CIM_ManagedSystemElement : CIM_ManagedElement { 
对于某些看不懂的内容只要查阅 CIM 文档（CIM Infrastructure Specification）就可以
了，比如 InstallDate 属性上面的描述中的 MappingStrings { "MIF.DMTF|ComponentID| 
001.5"}的含义。MappingStrings 是 MOF 中的一种修饰符（qualifier）。MOF 中可以使用修
饰符对类和属性进行修饰或限定。MappingStrings 修饰符的作用是将 CIM 中的属性与 MIF
（Management Information Format）中的属性关联起来。 
31.2.3  WMI CIM Studio 
WMI CIM Studio 是微软的 WMI Tools 工具包中的一个工具，通过它可以浏览系统中
的 CIM 类和对象并执行各种操作，是学习 CIM 和解决 WMI 有关问题的一个重要助手。 
WMI 工具曾经是 WMI SDK 的一部分，但现在 WMI SDK 被集成到 Platform SDK 中。
WMI 工具可以单独从微软的网站下载。你只要在搜索 WMI Administrative Tools 便可以找
到下载链接，然后下载一个名为 WMITools.exe 的安装文件。安装后，开始菜单中会被加
入一个名为 WMI Tools 的程序组。其中包含了如下几个工具： 
WMI CIM Studio：观察编辑 CIM 库中的类、属性、修饰符和实例；运行选中的方法；
产生和编译 MOF 文件。 
WMI Object Browser（对象浏览器）：观察 CIM 对象，编辑属性值和修饰符（qualifiers），
运行类的方法。  
WMI Event Registration Tool：WMI 事件注册工具，配置事件消耗器，创建或观察事
件消耗器实例。 
WMI Event Viewer：WMI 事件观察器，显示所有注册消耗器（consumer）实例的事件。 
除了 WMI Event Viewer 外，另外三个工具都是以 OCX 控件形式在浏览器中运行的，
如果浏览器禁止了 OCX 控件运行，那么必须选择 Allow Blocked Content，它们才能工作。 
下面我们先来看一下 CIM Studio，启动后，会出现图 31-3 所示的选择要连接到的命
名空间对话框。 
图 31-3  CIM Studio 的连接对话框 
命名空间（namespace）定义了对象的生存范围（scope）和可见范围，是 CIM 中组织
类和管理信息的一个逻辑单位。如果使用数据库的术语来理解，那么一个命名空间对应于
一个数据库（类好似表，属性好似字段）。一个 WBEM 系统中可以有多个命名空间。表
31-1 列出了典型的 Windows XP 系统中存在的命名空间和简单描述。 
《软件调试》补编 
- 77 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
表 31-1  Windows XP 系统中常见的命名空间 
命名空间（Namespace） 
描述 
Root 
根 
CIMV2 
CIM 
CIMV2\Applications 
某些应用程序（如 IE） 
Default 
默认的命名空间 
Directory\LDAP 
Lightweight Directory Access Protocol 
Microsoft\HomeNet 