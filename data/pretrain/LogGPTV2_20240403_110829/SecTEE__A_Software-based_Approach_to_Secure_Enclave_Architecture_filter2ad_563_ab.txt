• An implementation of the SecTEE architecture on a mature
TEE system, showing that it is feasible to deploy SecTEE
on mature TEE systems. The evaluation results show that
memory encryption incurs most performance overhead, and
that the extended trusted computing features impose acceptable
overhead.
The rest of the paper is organized as follows. Section 2 gives the
background information related to this paper. Section 3 describes
the threat model. Section 4 lists the design goals of SecTEE and
outlines an overview of SecTEE design. Section 5 illustrates the
details of SecTEE architecture. Section 6 implements and evaluates
our prototype system. Section 7 surveys related work. Section 8
concludes this paper.
2 BACKGROUND
2.1 Intel SGX
Intel SGX is a set of CPU instructions for creating, running, and
managing secure enclaves. SGX separates a memory region from
DRAM, called PRM (Processor Reserved Memory), for enclaves.
Enclaves’ code and data are stored in Enclave Page Cache (EPC)
pages of the PRM. SGX enforces an access-control policy on PRM
to prevent PRM from being accessed by non-enclave software. So
enclaves do not need to rely on the security of system software. SGX
also provides a specialized Memory Encryption Engine (MEE) [39]
to encrypt and perform integrity checks on PRM, which prevents
physical attacks from reading or manipulating enclaves’ code and
data. In a word, SGX offers a high level of software and physical
security for enclaves.
An enclave is mapped to a reserved memory area of the virtual
address of a host application, called ELRANGE (Enclave Linear
Address Space). The virtual address outside ELRANGE is used
to map non-enclave code and data. SGX prevents non-enclave
software from accessing ELRANGE, while the enclave software
in the ELRANGE is able to access the non-enclave address space.
SGX leverages host system software to manage enclaves, such
as creating, loading, and scheduling enclaves. The system software
needs to allocate EPC pages for a newly created enclave, load the
initial code and data into the enclave, and establish the memory
mapping between ELRANGE and EPC pages using its page tables.
The system software is also able to interrupt and resume the enclave
like a normal process. As the system software that manages enclaves
is untrusted, the SGX hardware needs to measure the loaded code
and data of an enclave and check the measurement results with
the value specified by the enclave developer. Unfortunately, as SGX
allows the untrusted system software fully controlling enclaves,
practical side-channel attacks [9, 32, 73, 91, 94, 114] are proposed, in
which attackers can infer information of an enclave by scheduling
it and manipulating its page tables.
2.2 ARM Cache Architecture
ARM CPU is a modified Harvard architecture and typically has two
levels of caches. The level one (L1) cache consists of two separate
caches, an instruction cache (I-cache) and a data cache (D-cache).
The level two (L2) cache is unified and holds both instructions and
data. For a cache architecture, if all data from lower levels must be
stored in a higher level cache, it is called inclusive; if data can only
reside in one of the cache levels, it is called exclusive; if the cache
is neither inclusive nor exclusive, it is called non-inclusive. Unlike
most modern CPUs, which have either inclusive last-level caches
(LLC) (Intel CPUs) or exclusive LLC (AMD CPUs), ARM CPUs do
not fix their policy on cache inclusiveness: caches can be inclusive,
exclusive, or non-exclusive.
A cache line is the unit of data transfer between the cache
and main memory. ARM CPU caches are organized as N-way set
associative caches. The cache is divided into N equally-sized pieces,
called ways, and each way consists k cache lines with indexes 0 ∼
k-1. The cache lines from all ways with the same index compose
a cache set. The main memory is divided into blocks, and the size
of a block is equal to the size of a cache way. The ith entry of a
memory block can be loaded into any one of the N cache lines in
the (i mod N)th cache set. On CPUs with TrustZone extensions,
each cache line is extended with an N S bit, indicating the cache
line belongs to the secure world or the normal world.
The ARM CPU architecture provides programmers with cache
maintenance operations: invalidation, cleaning, zero, and preload.
Invalidation of a cache means to clear its data; cleaning a cache
means to write its contents to the next level of cache or to main
Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1725memory; zero a cache means to zero a block of memory with the
cache; preload instructions allow programmers to preload memory
content to cache. In TrustZone-enabled systems, operations per-
formed from the normal world only affect the non-secure cache
lines, while operations performed from the secure world can affect
all cache lines.
CPU-DRAM bus, observe and tamper with the DRAM contents, and
launch malicious peripherals. In particular, the following practical
physical attacks are within our threat model: cold boot attacks,
bus probing attacks, and DMA attacks. We do not consider attacks
against internal states of the SoC, which are sophisticated and
require expensive equipment.
2.3 SoC-bound Execution Environments and
the OP-TEE Pager System
SoC-bound execution environments are software-based approaches
to resisting physical attacks. The idea is to leverage the memory
inside SoC, such as CPU registers [26, 74, 75, 96], CPU caches
[37, 38, 120, 121], GPU registers and caches [109], or on-chip
memory (OCM) [11, 15, 36, 43, 82, 119, 123], to build a secure
execution environment for security-critical code. Sensitive data
shall be encrypted when it is swapped out of the environment, and
thus physical attacks against hardware components outside the
SoC are prevented.
OP-TEE [65] is a popular open source TEE OS maintained by
Linaro, which implements a Trusted Execution Environment using
ARM TrustZone technology and is compatible with GlobalPlatform
TEE specifications. To prevent physical attacks, an SoC-bound
execution environment called Pager [66] is proposed.
Technically, Pager is a demand paging system separated from
the OP-TEE kernel, which is responsible for maintaining execution
of the rest components of OP-TEE kernel and TAs. It sets the OCM
as the working memory for CPU to execute the OP-TEE system,
and uses the DRAM as a backing store. Pager runs on the OCM, and
the other components of the OP-TEE kernel and TAs are encrypted
and stored in the DRAM. Pager manages swapping between the
OCM and DRAM: when code or data stored in DRAM is demanded,
Pager decrypts and performs integrity check on the corresponding
page, and loads it into the OCM; when an OCM page needs to be
swapped to DRAM, Pager encrypts it.
3 THREAT MODEL AND HARDWARE
REQUIREMENTS
3.1 Threat Model
SecTEE aims to achieve the same security level of modern secure
enclave architectures, which protects the confidentiality and in-
tegrity of enclaves from an adversary who has full control of the
system software and hardware components outside of the SoC, such
as DRAM and peripherals. We require that the platforms where
SecTEE is deployed support the ARM TrustZone technology.
At the software level, the commodity OS in the normal world is
untrusted and potentially compromised. The adversary can access
interfaces of the TEE system. He can create and load malicious
enclaves to the system. However, we assume that the TEE OS is
trustworthy and provides isolation for TAs running on it because
we do not aim to increase the security of TEE OS regarding software
attacks.
At the hardware level, we assume that the SoC is trusted, and
all components outside of the SoC are assumed to be vulnerable,
including DRAM, address and data buses between CPU and DRAM,
other I/O devices, and so on. So the adversary is able to probe the
3.2 Hardware Requirements
We list the hardware primitives required by SecTEE, which are
common on modern mobile devices.
Device Sealing Key (DSK). It is a symmetric key generated in
the SoC during manufacturing. It is only known by the device, and
even the manufacturer does not know it. DSK is used to protect
secrets that are related to a device. As no other devices know this
key, secrets protected by it are bound to the device, and other
devices cannot get them. This key may be referred to as other
terminologies, such as the Seal Secret in SGX [16] or Device-Unique
Hardware Key (DUHK) in Samsung’s KNOX [88].
Device Root Key (DRK). It is an asymmetric key pair generated
at manufacture time and signed by the manufacturer’s root key
through a certificate. Its private part should be stored in the secure
storage of the device, such as processor’s eFuses. As DRK is device-
unique and signed by the manufacturer, it can be used to identify
and authenticate the device.
Manufacturer’s Public Key. The public part of the manufac-
turer’s root key should be hard-coded into the SoC. Software
developed by the manufacturer should be signed by the private part
of the manufacturer’s root key, including TEE OS and some special
TAs. The hard-coded public key can be used to verify whether a
loaded software component is issued by the manufacturer, and thus
the secure boot and TCB of the TEE system can be established.
4 DESIGN OVERVIEW
4.1 Design Goals
Security. The designed system should be able to resist all kinds
of practical attacks against secure enclave architectures. First, it
should provide complete isolation of enclaves from host software,
including privileged system software. Second, it should prevent
practical physical attacks, in particular, attacks against hardware
components outside of the chip. Third, it should be able to resist
memory access based side-channel attacks.
Compatibility. The design should be compatible with standard
ARM TEE system architectures, such as GlobalPlatform TEE system
architecture [30], so that it can be deployed to existing TEE systems.
No requirements for specialized hardware memory pro-
tection mechanisms. We want our design to be deployed on
commodity ARM platforms, which are not provided with hardware
protection mechanisms to prevent physical attacks and memory
access based side-channel attacks. So the design should achieve
the security goal under the assumption that only a common CPU
architecture is provided and no specialized hardware protection
mechanism is available.
Rich trusted computing features. Trusted computing fea-
tures, such as integrity measurement, remote attestation, and data
sealing, are becoming indispensable means for modern computing
Session 8B: TEE ICCS ’19, November 11–15, 2019, London, United Kingdom1726platforms to guarantee their security. It is necessary for a secure
enclave architecture to provide rich trusted computing features.
4.2 Overview of SecTEE
SecTEE, illustrated in Figure 1, is a TEE system that satisfies en-
claves’ both security requirements and functionality requirements
for trusted computing. SecTEE leverages the SoC-bound execution
environment technology and isolation mechanism provided by
ARM TrustZone to achieve the physical and software security
respectively, and its kernel provides the mechanism of resistance
to memory access based side-channel attacks.
Figure 1: An Overview of SecTEE
Secure enclaves are implemented as TAs in the TEE system. To
create an enclave for a host application, the enclave author first
identifies the sensitive code and data of the host application, then
creates a TA, and finally moves the sensitive code and data into the
TA. The enclave exposes its interfaces to the host application as TA
commands, and the host application can run the sensitive code by
invoking the TA commands.
As enclaves are implemented as applications of the TEE OS, it is
natural to integrate the enclave management into the TEE OS kernel.
So our design does not expose enclave management interfaces to
host system software (while Intel SGX does), but directly leverages
the TA management functionality of the TEE OS. The enclave
management functionality is responsible for memory management
of enclaves and invoking, interrupting, resuming, and scheduling
enclaves.
SecTEE extends trusted computing features to the TEE OS kernel,
which can be used to identify, measure, and attest enclaves, and
to protect sensitive data of enclaves. These features expose their
interfaces to enclaves as system calls (Table 1). We identify the
following trusted computing features that modern secure enclave
architectures should provide.
• Enclave identification. A platform supporting secure enclaves
should be able to identify the author of an enclave loaded
on it. To achieve this goal, an enclave author should sign his
enclaves using his own signing key, and the platform identifies
the enclave’s author by verifying the signature.
• Enclave measurement. The platform should measure the in-
tegrity of the enclave before running it. The measurement
results present the good/bad state of enclaves, and they can be
used by the platform to perform remote attestation.
• Remote attestation. This is a key feature of a trusted computing
system, by which a platform can convince a verifier that an
enclave is in a good state and runs on a trusted system. This
feature can be achieved by a signature on the measurement of
the attesting enclave using a certified attestation key. Since we
assume that the TEE OS is trustworthy, TEE OS rollback attacks
are not considered in SecTEE’s design and implementation. To
prevent such attacks, hardware monotonic counters or rollback
prevention fuses [88] are needed.
• Data sealing. This feature is used to bind sensitive data to an
enclave and a platform, and ensures that only the particular
enclave running on the specific platform can access the bound
data.
• Secret provisioning. This feature enables a remote data owner
to provision his sensitive data to an enclave. The remote data
owner is convinced that the enclave is running on a trusted
platform and the confidentiality of the sensitive data that will
be provisioned can be guaranteed. Typically, this feature is
conducted through remote attestation and a secure channel.
Comparison with Sanctuary [8]. Sanctuary is also a secure
enclave architecture for ARM CPUs. It provides isolated compart-
ments for security-sensitive code based on TrustZone and enables
SGX-like usage of these compartments. We compare SecTEE with
it in the following aspects: security, trusted computing primitives,
and the TCB size.
• Security. Sanctuary only provides isolation for enclaves, while
SecTEE achieves a much higher security level: in addition
to isolation, SecTEE provides both resistance to board-level
physical attacks and resistance to memory access based side-
channel attacks, which are requirements of modern secure
enclave architectures, such as Intel SGX, Komodo, and Sanctum.
Besides, Sanctuary adopts a design similar to Intel SGX: it
leverages the system software in the normal world to manage
enclaves’ resource, such as memory allocation. From lessons
we learned from the-state-of-art architectures (Section 4.3), it