SPE(cid:48).Setup(1λ): It is the same as the SPE.Setup algo-
rithm of SPE, which takes as input a security parameter λ
and outputs an initial master secret key msk.
2It takes as input SKi−1 and tag ti, and outputs a new secret key SKi,
which can decrypt the ciphertexts that SKi−1 can other than those encrypted
under ti. For more details of SPE, please refer to the Section 3 of [52].
SPE(cid:48).Enc(msk, m, T ): On input a msk and a message m
attached with tags T = {t1, t2}, it chooses randomly k1, k2 ∈
M and outputs the ciphertext ct = (ct0, ct1, ct2), such that
ct0 = k1 ⊕ k2 ⊕ m, ct1 ← SPE.Enc(msk, k1, t1), ct2 ←
SPE.Enc(msk, k2, t2).
SPE(cid:48).Pun(SKi−1, t(cid:48)
gorithm of SPE that further punctures SKi−1 on tag t(cid:48)
outputs a new secret key SKi.
i): It is identical to the SPE.Pun al-
i and
SPE(cid:48).Dec(SKi, ct, T ): On input a secret key SKi as-
sociated with tags R = {t(cid:48)
i} and a ciphertext
ct = (ct0, ct1, ct2) under tags T = {t1, t2}, it outputs ⊥ if
R ∩ T (cid:54)= ∅. Otherwise,
2, . . . , t(cid:48)
1, t(cid:48)
j = SPE.Dec(SKi, ctj, tj) for j ∈ {1, 2}.
1) Compute k(cid:48)
2) Return m(cid:48) = ct0 ⊕ k(cid:48)
It can be seen that SPE(cid:48) is correct, as k(cid:48)
1 ⊕ k(cid:48)
2.
j can be correctly
j = kj) if tj /∈ R, following the correctness
recovered (i.e., k(cid:48)
of SPE [52]. On the other hand, SPE(cid:48) is secure under the
security of the underlying SPE. Informally, it is required that
1 ∈ T ∗, be punctured by a
at least one challenge tag, say t∗
valid adversary during the query phase, then k∗
1 is completely
hidden in ct∗
1 due to the semantical security of SPE, and so
the challenge message m∗
γ is perfectly concealed. However,
the SRE scheme derived from SPE(cid:48) is not secure. Recall that,
in the IND-REV-CPA game of SRE the adversary is allowed
to ask for a number of key revocation queries on R with the
only restriction that R ∩ T ∗ (cid:54)= ∅. In this case, the security of
the SRE scheme can be broken by an efﬁcient adversary A as
follows: A issues two key revocation queries on R1 and R2,
where for the challenge tags T ∗ = {t∗
2} the queries satisfy
1 /∈ R2.
2 /∈ R1 and t∗
the conditions that t∗
After receiving the revoked secret keys skR1 and skR2, A
2 ← SPE.Dec(skR1 , ct∗
uses skR1 and skR2 to compute k∗
2, t∗
2)
1 ← SPE.Dec(skR2, ct∗
1), respectively. Finally, A
and k∗
1, t∗
1 ⊕ k∗
recovers m∗
2.
2 ∈ R2, t∗
1 ∈ R1, t∗
γ = ct∗
0 ⊕ k∗
1, t∗
In other words, the above attack indicates that distinct
revoked secret keys could be combined together to decrypt
some ciphertext that cannot be decrypted by each one sep-
arately. This kind of attack is always termed as collusion
attack, which is not captured by SPE schemes. In contrast,
the security of SRE implies collusion-resistance, meaning that
the combination of revoked secret keys skR and skR(cid:48) cannot
the ciphertext under tags T if R ∩ T (cid:54)= ∅ and
decrypt
R(cid:48) ∩ T (cid:54)= ∅. This property plays an important role in multi-
client settings, e.g., multi-client SSE [37].
By this time, we have shown that the above intuition does
not work for building SRE schemes that support at least two
tags per message. However, we are not sure whether or not
it works for the case of SRE scheme supporting one tag
per message, since it is unclear how to reduce the collusion-
resistance of SRE to the security of SPE. Notice that, even if
it could work for the later case, we believe that SRE scheme
can be constructed in more efﬁcient ways, as it is more relaxed
and general than SPE.
Alternatively, SRE can be seen as a symmetric predicate
encryption for the predicate that P(R, T ) = 1 if R ∩ T = ∅
and 0 otherwise, which can provide more ﬁne-grained access
control over encrypted data as exempliﬁed in [44]. Since the
7
predicate P(R, t) = 1 iff t /∈ R for t ∈ T and R ⊆ T suf-
ﬁces our application, we are mainly interested in constructing
efﬁcient SRE schemes with a single tag per message in the
following, and leaving more general constructions in future.
C. Construction of SRE
In this section, we propose an SRE scheme based on
a multi-puncturable PRF, a standard symmetric encryption
scheme and a Bloom ﬁlter. At the ﬁrst glance, the way of
encrypting a message is similar to that of Bloom Filter En-
cryption (BFE) [24] 3; A message is encrypted under h indices
(of the Bloom ﬁlter) derived from the tag of the message.
However, the way of revoking the decryption capability of the
secret key between BFE and our SRE is essentially different.
In BFE, the key idea is to associate the key pair of the scheme
to a Bloom ﬁlter, where the initial secret key consists of b
parts with each part corresponding to an entry index of the
Bloom ﬁlter (that contains b entries), and to realize puncturing
by simply deleting the corresponding parts of the secret key. In
contrast, the initial secret key of our scheme is independent of
the Bloom ﬁlter, and we revoke it on a set of tags in one shot by
leveraging the multi-puncturable PRF [36]. The Bloom ﬁlter
here is used merely for recording and compressing all tags to be
revoked. This results in a low storage request before launching
the revocation. We call this feature Compressed Revocation,
which is crucial for our application and will be formalized
and explained with more details after the construction.
Next we present
the detailed construction. Let SE =
(SE.Gen, SE.Enc, SE.Dec) be a standard SE scheme with
key space Y, F : K × X → Y a multi-puncturable PRF
with algorithms (MF.Setup, MF.Punc, MF.Eval), and BF =
(BF.Gen, BF.Upd, BF.Check) a (b, h, n)-Bloom ﬁlter, where
n is the maximum number of elements to be inserted and b, h
are the numbers of Bloom ﬁlter entries and hash functions,
respectively. Then our SRE scheme SRE = (SRE.KGen,
SRE.Enc, SRE.KRev, SRE.Dec) is described as follows:
2)
1)
1)
SRE.KGen(1λ, b, h): It takes a security parameter λ and
integers b, h ∈ N, and generates the system secret key msk by
Runs (H, B) ← BF.Gen(b, h), such that H =
{Hj}j∈[h] and B = 0b.
Generates sk ← MF.Setup(1λ), and outputs msk =
(sk, H, B). Note H can be set as public parameters.
SRE.Enc(msk, m, t): It takes msk = (sk, H, B) and a
message m ∈ M with tag t ∈ T , and outputs ciphertext ct as
Computes ij = Hj(t) ∈ [b] and skij = F (sk, ij) for
all j ∈ [h].
Generates ctj = SE.Enc(skij , m) for all j ∈ [h], and
returns the ciphertext ct = (ct1, ct2, . . . , cth) and t.
SRE.KRev(msk, R): It takes msk = (sk, H, B) and a
list R = {t1, t2, . . . , tτ} of tags to be revoked s.t. τ ≤ n, then
generates the revoked secret key skR for R:
Computes BR ← BF.Upd(H, B, R), by which the
entries of B indexed by {Hj(ti)}i∈[τ ],j∈[h] are set to
1 (i.e., B[Hj(ti)] ← 1) for all ti ∈ R.
Finds the index set I = {i(cid:48) ∈ [b] : BR[i(cid:48)] = 1} from
BR, then computes skI ← MF.Punc(sk, I) and sets
skR = (skI , H, BR).
2)
1)
2)
3It is a puncturable encryption focusing on highly efﬁcient puncturing.
8
It
a
1)
takes
ciphertext
SRE.Dec(skR, ct, t):
ct =
(ct1, ct2, . . . , cth) encrypted under tag t and a revoked secret
key skR = (skI , H, BR), then recovers the message as:
Checks if BF.Check(H, BR, t) = 1. If true,
the
decryption fails. Otherwise,
Finds an index i∗ ∈ [b] s.t. BR[i∗] = 0 (i.e.,
i∗ /∈ I derived from R), and then computes ski∗ =
MF.Eval(skI , i∗).
Finally computes m = SE.Dec(ski∗ , cti∗ ).
2)
3)
CORRECTNESS. According to Deﬁnition 5, the choices of R
and T = {t} are independent of the randomness (i.e., H)
used to construct the Bloom ﬁlter in our construction, so it is
sufﬁcient to consider the correctness of Bloom ﬁlter in the tra-
ditional setting than the adversarial environment [19]. It can be
seen that the revoked secret key is generated in a compressed
manner (exactly based on the Bloom ﬁlter), so our scheme
introduces a non-negligible correctness error. Next we show it
is up-bounded by the false-positive probability of the standard
Bloom ﬁlter. In particular, we suppose that a revoked secret
key skR = (skI , H, BR) is associated with revocation list
R = {t1, t2, . . . , tτ} and a ciphertext ct = (ct1, ct2, . . . , cth)
is generated under tag t such that t /∈ R, then we can use skR
to decrypt ct if BF.Check(H, BR, t) = 0, because this ensures
that there exists i∗ ∈ [h] s.t. BR[i∗] = 0 (i.e., i∗ /∈ I derived
from R) and we can compute ski∗ = MF.Eval(skI , i∗) =
F (sk, i∗) and recover m = SE.Dec(ski∗ , cti∗ ). The correct-
ness follows from that of the multi-puncturable PRF F and
SE. Otherwise (i.e., BF.Check(H, BR, t) = 1), the decryption
fails, because this means BR[Hj(t)] = 1 for all j ∈ [h] (i.e.,
{Hj(t)} ⊆ I) and we cannot get any skHj (t) to decrypt
any part of ct. This indicates that the correctness error is
exactly the false-positive probability of the Bloom ﬁlter, thus
we have Pr[SRE.Dec(skR, ct, t) = ⊥] = Pr[t /∈ R ∧
BF.Check(H, BR, t) = 1] ≈ 2−h, where h is the parameter
of Bloom ﬁlter.
Note that, the revoked secret key of our SRE scheme is
always computed from the initial (or master) secret key, so
the scheme does not provide forward security as guaranteed by
puncturable encryption [32], [24]. Nevertheless, it is sufﬁcient
for our SSE application, as what we are concerned is the
ability of revoking the master secret key with a low storage
request. In addition, the size of the revoked secret key in our
scheme mainly depends on that of the punctured secret key
of pseudorandom PRF F , which in our instantiation is about
O(log b) on average instead of O(b) as in BFE [24].
COMPRESSED REVOCATION. In above scheme, the secret key
is revoked on all tags R at a time. Intuitively, to revoke a
number of tags in one shot, certain storage should be allocated
for them before launching the revocation. Usually, the storage
cost is dominated by the total size of all the tags to be revoked,
which is undesirable in SSE application. To avoid this issue,
we ﬁrst compress all tags one-by-one by leveraging a compact
data structure, thus getting a compressed revocation list at
last, and then generate the revoked secret key based on the
compact data structure. By this way, only a low storage cost
is introduced on the client side. Speciﬁcally, the key-revocation
procedure SRE.KRev(·,·) of our construction can be split into
two abstract sub-algorithms, formalized as below:
SRE.KRev(sk, D, R): On input a secret key sk, the de-
scription D of a short-sized data structure initialized at the
setup of the system, and a list R = {t1, t2, . . . , tτ} of tags to
be revoked, it generates the revoked secret key skR as below:
1) D ← SRE.Comp(D, ti): Inserts each ti ∈ R
individually to the (initially-empty) data structure D
and ﬁnally gets a compressed revocation list of R.
skR ← SRE.cKRev(sk, D): Computes the revoked
secret key skR based on the compressed revocation
list D that is obtained after adding all tags in R to
the data structure.
2)
Hereafter, we refer to an SRE scheme enjoying this feature as
a Compressed SRE (CSRE for short).
The data structure D employed in our concrete construction
is exactly a (b, h, n)− Bloom-ﬁlter, where b, h and n are the
numbers of Bloom ﬁlter entries, different hash functions, and
the elements to be inserted, respectively. Assuming the false-
positive probability tolerated is p and the optimal number of
hash functions used is h, then the required size of Bloom ﬁlter
in our construction is b = −n ln p/(ln 2)2 bits. For example,
when p = 10−5 and n = 220, the size b of Bloom ﬁlter we
need is about 3 MB. With such kind of compressed revocation,
the client needs only a short and constant-size storage for
launching the revocation, which exactly consists of |sk|+b bits
in our scheme, and the revoked secret key will be generated and
sent immediately to the server when performing each search.
SECURITY. Our compressed SRE scheme is IND-sREV-CPA
secure under the security of the underlying primitives, which
is formally stated in Theorem 1.
Theorem 1. The Compressed SRE scheme is IND-sREV-CPA
secure, if BF is a (b, h, n)-Bloom-ﬁlter, F : K × X → Y is a
secure b-Punc-PRF and SE is IND-CPA secure. Particularly,
for all PPT algorithms A in the IND-sREV-CPA game, there
exist PPT algorithms B and B(cid:48) such that
(λ) ≤ 2Advb-Punc-PRF
AdvIND-sREV-CPA
(λ)+2h·AdvIND-CPA
SRE,A
Proof of Theorem 1: The proof proceeds with a sequence
of games. It starts with the real game and ends with a game
where the adversary’s advantage is 0. In each game, we call
Wini the event that the adversary A wins in game Gi.
Game G0: This is the real game for selective security of
SRE. Namely, after receiving tag t∗ that A wishes to be
challenged upon, the challenger produces msk = (sk, H, B)
by running msk ← SRE.KGen(1λ, b, h), and then answers
all A’s queries with msk. For an encryption query (m, t), it
computes ij = Hj(t) and skij = F (sk, ij) for all j ∈ [h], and