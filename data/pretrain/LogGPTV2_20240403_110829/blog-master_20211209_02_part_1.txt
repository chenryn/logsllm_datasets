## 每天5分钟,PG聊通透 - 系列1 - 热门问题  
### 作者  
digoal  
### 日期  
2021-12-09  
### 标签  
PostgreSQL , 热门问题  
----  
## 背景  
- 问题说明(现象、环境)  
- 分析原因  
- 结论和解决办法  
## 本系列汇总  
### 链接、驱动、SQL  
##### 202112/20211224_05.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第24期 - 为什么与检索字段类型不一致的输入条件有时可能不能采用索引?》](../202112/20211224_05.md)  
##### 202112/20211224_04.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第23期 - 为什么有的函数不能被用来创建表达式索引?》](../202112/20211224_04.md)  
##### 202112/20211224_03.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第22期 - 为什么创建索引会堵塞DML? 如何在线创建索引?》](../202112/20211224_03.md)  
##### 202112/20211224_02.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第21期 - 为什么要用绑定变量?》](../202112/20211224_02.md)  
##### 202112/20211224_01.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第20期 - 为什么分区表的分区过多会导致性能下降?》](../202112/20211224_01.md)  
##### 202112/20211223_02.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第19期 - 为什么SQL性能会抖动?》](../202112/20211223_02.md)  
##### 202112/20211222_05.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第18期 - 为什么性能差? 如何找到捣蛋鬼SQL?》](../202112/20211222_05.md)  
##### 202112/20211222_04.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第17期 - 为什么说有些逻辑应该交给数据库存储过程来做?》](../202112/20211222_04.md)  
##### 202112/20211222_03.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第16期 - 为什么说有些排序操作建议让业务来做?》](../202112/20211222_03.md)  
##### 202112/20211222_02.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第15期 - 为什么业务开启多会话并行后反而变慢了?》](../202112/20211222_02.md)  
##### 202112/20211222_01.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第14期 - 为什么会有死锁?》](../202112/20211222_01.md)  
##### 202112/20211221_03.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第13期 - 为什么长时间等待业务处理的情况不建议封装在一个长事务中进行处理?》](../202112/20211221_03.md)  
##### 202112/20211221_02.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第12期 - 为什么SQL会自动启用并行计算?》](../202112/20211221_02.md)  
##### 202112/20211221_01.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第11期 - 为什么count查询慢?》](../202112/20211221_01.md)  
##### 202112/20211220_10.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第10期 - 为什么有的索引不支持字符串前置`like` `~`查询?》](../202112/20211220_10.md)  
##### 202112/20211220_09.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第9期 - 为什么OFFSET(翻页)会越来越慢?》](../202112/20211220_09.md)  
##### 202112/20211220_08.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第8期 - 为什么`order by`并没有按中文拼音排序?》](../202112/20211220_08.md)  
##### 202112/20211220_07.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第7期 - 为什么有的SQL使用`pg_cancel_backend, pg_terminate_backend`都杀不掉?》](../202112/20211220_07.md)  
##### 202112/20211220_06.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第6期 - 为什么不需要提供密码就能连接数据库?》](../202112/20211220_06.md)  
##### 202112/20211220_05.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第5期 - 为什么无法连接数据库?》](../202112/20211220_05.md)  
##### 202112/20211220_04.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第4期 - 为什么增加连接不能无限提高TPS或QPS? 配置多少个链接合适?》](../202112/20211220_04.md)  
##### 202112/20211220_03.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第3期 - 为什么会有大量的`idle in transaction|idle`事务? 有什么危害?》](../202112/20211220_03.md)  
##### 202112/20211220_02.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第2期 - 为什么会有莫名其妙的连接错误日志?》](../202112/20211220_02.md)  
##### 202112/20211220_01.md   [《每天5分钟,PG聊通透 - 系列1 - 热门问题 - 链接、驱动、SQL - 第1期 - 为什么数据库链接长时间空闲时有时侯会自动断开?》](../202112/20211220_01.md)  
### 备份、订阅、恢复  
1、为什么逻辑复制在主从切换后会丢数据?  
https://www.bilibili.com/video/BV1EL41187Rk/  
逻辑解析日志和wal日志是2条线.  
逻辑解析相对wal日志是异步操作. 所以可能是这样的:  
```  
--- 逻辑日志消费位置  
------ wal位置  
```  
物理从库在PG16前的版本都不支持逻辑复制, 也没有主库的逻辑复制的slot位点信息. 所以, 即使物理从库是和主库wal完全同步的, 也会丢失逻辑日志.  
```  
------ 激活, 创建逻辑slot  
   --- : 丢失了这些未解析的逻辑日志  
```  
怎么做到不丢失呢?  
- 仅当手工切换场景, 可以保证不丢失: 老的主库消费完所有日志, 拒绝从库的写操作, 激活从库为新主库, 在新主库创建逻辑slot, 开放新主库的写操作.  
2、为什么有备份但是不能恢复到指定时间点?   (时区指定有问题、目标时间早于全量备份到逻辑一致位点)  
https://www.bilibili.com/video/BV1GV4y1C7Cg/  
Postgresql 全量备份从`2021-01-01 10:00:00`开始, `2021-01-02 10:00:00`结束, 并且备份了从`2021-01-01 10:00:00`开始到`2021-01-03 10:00:00`的所有wal日志, 请问如果`2021-01-01 11:00:00` DROP了某个表, 是否能通过这个备份集恢复回来这张被drop的表的数据?  
备份集A:  
全量备份开始---------drop 某表------数据文件太多, 备份集里面没有备份到这个表的file------全量备份结束  
归档备份开始  
PITR, 使用备份集A恢复到“全量备份开始---------drop 某表” 之间的某个时刻.   请问是否可行?  如果可行, 恢复后某表还在吗?  
先思考几个问题：  
- 未开启全量备份的时候, DROP操作是否会将该表的数据写入WAL?  
- 在开启全量备份(start backup)开始后, stop backup前, DROP操作是否会将该表的数据写入WAL?  
答案是, DROP操作都不会将该表的数据写入WAL. 包括TRUNCATE也一样.  
验证过程:  
```  
确保wal级别是replica以上  
postgres=# show wal_level ;  
 wal_level  
-----------  
 replica  
(1 row)  
创建测试表  
postgres=# create table tbl (id int, info text, ct timestamp);  
CREATE TABLE  
postgres=# insert into tbl select generate_series(1,10000000), md5(random()::text), now();  
INSERT 0 10000000  
postgres=# vacuum tbl;  
VACUUM  
postgres=# checkpoint;  
CHECKPOINT  
开启物理备份  
postgres=# select pg_start_backup('abc');  
 pg_start_backup  
-----------------  
 1/A6000028  
(1 row)  
记录物理备份开始时的wal位置  
postgres=# select pg_current_wal_lsn();  
 pg_current_wal_lsn  
--------------------  
 1/A60000D8  
(1 row)  
查看测试表的数据文件位置  
postgres=# select pg_relation_filepath('tbl'::regclass);  
 pg_relation_filepath  
----------------------  
 base/14020/34126  
(1 row)  
IT-C02YW2EFLVDL:~ digoal$ cd $PGDATA  
IT-C02YW2EFLVDL:data14 digoal$ ll base/14020/34126*  
-rw-------  1 digoal  staff   730M May  5 17:34 base/14020/34126  
-rw-------  1 digoal  staff   200K May  5 17:34 base/14020/34126_fsm  
-rw-------  1 digoal  staff    24K May  5 17:34 base/14020/34126_vm  
删除测试表  
postgres=# drop table tbl;  
DROP TABLE  
查看被删除的表的数据文件是否已被清理  
IT-C02YW2EFLVDL:data14 digoal$ ll base/14020/34126*  
-rw-------  1 digoal  staff     0B May  5 17:35 base/14020/34126  
记录wal位置  
postgres=# select pg_current_wal_lsn();  
 pg_current_wal_lsn  
--------------------  
 1/A601F310  
(1 row)  
postgres=# checkpoint;  
CHECKPOINT  
postgres=# select pg_current_wal_lsn();  
 pg_current_wal_lsn  
--------------------  
 1/A601F3C0  
(1 row)  
计算drop操作带来的wal消耗, 很明显DROP操作都不会将该表的数据写入WAL. 包括TRUNCATE也一样.  
postgres=# select pg_size_pretty(pg_wal_lsn_diff('1/A601F3C0','1/A60000D8'));  
 pg_size_pretty  
----------------  
 125 kB  
(1 row)  
备份开始后, 会记录一个wal文件的位置, 意味着这个备份集需要有从这个时刻开始的所有WAL日志, 才能用于恢复.  
cd $PGDATA  
cat backup_label  
START WAL LOCATION: 1/A6000028 (file 0000000100000001000000A6)  
CHECKPOINT LOCATION: 1/A6000060  
BACKUP METHOD: pg_start_backup  
BACKUP FROM: primary  
START TIME: 2023-05-05 17:28:20 CST  
LABEL: abc  
START TIMELINE: 1  