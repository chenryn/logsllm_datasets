title:PostScript Undead: Pwning the Web with a 35 Years Old Language
author:Jens M&quot;uller and
Vladislav Mladenov and
Dennis Felsch and
J&quot;org Schwenk
PostScript Undead: Pwning the Web
with a 35 Years Old Language
Jens M¨uller(B), Vladislav Mladenov, Dennis Felsch, and J¨org Schwenk
{jens.a.mueller,vladislav.mladenov,dennis.felsch,joerg.schwenk}@rub.de
Ruhr University Bochum, Bochum, Germany
Abstract. PostScript is a Turing complete page description language
dating back to 1982. It is supported by most laser printers and for a long
time it had been the preferred ﬁle format for documents like academic
papers. In this work, we show that popular services such as Wikipedia,
Microsoft OneDrive, and Google Mail can be attacked using malicious
PostScript code. Besides abusing legitimate features of the PostScript
language, we systematically analyzed the security of the most popular
PostScript interpreter – Ghostscript. Our attacks include information
disclosure, ﬁle inclusion, and remote command execution. Furthermore,
we present methods to obfuscate PostScript code and embed it within
legitimate PDF ﬁles to bypass security ﬁlters. This allows us to create a
hybrid exploit that can be used to attack web applications, clients sys-
tems, print servers, or printers. Our large-scale evaluation reveals that
56% of the analyzed web applications are vulnerable to at least one
attack. In addition, three of the top 15 Alexa websites were found vul-
nerable. We provide diﬀerent countermeasures and discuss their advan-
tages and disadvantages. Finally, we extend the scope of our research
considering further targets and more advanced obfuscation techniques.
Keywords: PostScript · EPS · PDF · Web application security
1 Introduction
In the early 1980s, PostScript was created as a page description language. It
is a Turing complete language and allows to execute arbitrary code or to write
complex functions. With respect to security, execution of arbitrary code is dan-
gerous. Security was not among the original design goals of this language because
it was primarily used for printing trusted documents or displaying graphics in
local environments. Meanwhile, PostScript is a widely deployed language sup-
ported by various online services including websites oﬀered by Google, Microsoft,
The research was supported by the German state of North Rhine-Westphalia
sponsoring the research training group Human Centered System Security, by the
German Ministry of Research and Education (BMBF) as part of the SyncEnc
project (FKZ: 16KIS0412K), and the European Commission through the FutureTrust
project (grant 700542-Future-Trust-H2020-DS-2015-1).
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 603–622, 2018.
https://doi.org/10.1007/978-3-030-00470-5_28
604
J. M¨uller et al.
Fig. 1. Abstract overview of a web application’s architecture and its components that
are relevant for our attacks. The main goal of the attacker is to force the usage of
Ghostscript to carry out these attacks.
or Apple. These services accept untrusted PostScript documents and present a
potential danger to their providers as attackers may use many legitimate features
to harm the systems processing PostScript documents. In this paper, we ana-
lyze the security implications resulting from processing PostScript documents
on well-known websites. In Fig. 1, we give an abstract overview of the relevant
components in scope for our attacks.
Initially, the attacker navigates her user-agent to the website where the
web application is deployed. It contains a form to upload a PostScript ﬁle to
the web application. The web frontend carrying out the HTTP communication
receives the ﬁle and forwards it either ﬁrst to an image conversion library such as
ImageMagick1 – which in turn delegates the ﬁle based on its content – or directly
to the PostScript interpreter. According to our observations, in most cases this
is Ghostscript2 since it provides a rich set of output formats and features like
resizing, conversion into other ﬁle types such as images, and further operations.
Finally, the web application returns the resulting output of executed PostScript
code as a rendered image. This gives the attacker a feedback channel to leak
sensitive information and to verify if the attack had been successful.
Considering the wide deployment of PostScript and the dangers of using it,
the question regarding the security of current interpreters arises.
Existing Gaps. The potential risks of processing PostScript ﬁles were ﬁrst
reported in 1996 by Goldberg et al. [14] and Sibert [22]. More concrete attacks
were presented by Costin et al. [9,11,12] in 2010, 2011, and 2012 by attacking
printers with malicious PostScript commands. In the meantime, attack vectors
were not systematically analyzed; they were rather mentioned in blog posts or
CVE entries.
1 ImageMagick Studio LLC, ImageMagick, http://imagemagick.org, Mar. 2017.
2 Artifex Software, Ghostscript, https://ghostscript.com/, Mar. 2017.
PostScript Undead: Pwning the Web with a Years Old Language
605
The ﬁrst scientiﬁc paper on attacking web applications processing PostScript
was published by M¨uller et al. [18] in 2017. They showed that Google Cloud
Print could be exploited by uploading crafted ﬁles with PostScript commands.
However, a thorough security analysis of web applications processing PostScript
was left open for future work. Our research addresses this gap and reveals novel
insights missed by previous research.
Systematization of Knowledge. To the best of our knowledge, there is no
comprehensive database of existing vulnerabilities and attack vectors regard-
ing PostScript. Therefore, the ﬁrst challenge for our work was to systematically
collect those. We collected all attack vectors by manually searching through vul-
nerability databases, individual blog posts and forums as well as by thoroughly
studying the PostScript language reference. In essence, we found that attacks
on PostScript interpreters can be divided into ﬁve diﬀerent categories: Denialof-
Service (DoS), information disclosure, ﬁle system access, command execution,
and content masking. This is consistent with attack categories that were already
found by previous research on other languages such as XML [23] and PJL [18].
Evaluation. We tested two types of web applications: (Category 1) online image
converters and (Category 2) the top 15 Alexa websites. Category 1 web appli-
cations were collected using search engines such as Google. We collected one
hundred web applications of this type and evaluated them. The results are sur-
prising – 56% are vulnerable against at least one attack.
To prove the impact of our attacks on prominent and more complex web
applications, we decided to extend our research by evaluating Category 2 web
applications. This is more challenging because the PostScript processing func-
tionality provided by the web application has to be identiﬁed ﬁrst and studied
carefully with valid user accounts. We thoroughly studied the top 15 Alexa web-
sites and ﬁnally were able to evaluate 10 out of them. Five web applications
were excluded due to the duplicity (e.g. google.com and google.co.jp) or because
of language barriers. Three of these web applications are vulnerable, including
prominent providers such as Wikipedia and Microsoft.
Contribution
– We provide an exhaustive study regarding attacks against Ghostscript and
PostScript. We systematize attack vectors and provide them in a comprehen-
sive attack catalog.
– We evaluate the security of one hundred online image converters and ten top
websites. Based on the responsible disclosure model, we reported our ﬁndings
to the aﬀected vendors and helped them to ﬁx the issues.
– We identify various methods to include malicious PostScript code within legit-
imate PDF ﬁles and provide a hybrid proof-of-concept exploit.
– We discuss countermeasures mitigating or limiting the attacks. In addition,
we reveal novel aspects targeting future research complementing our work.
606
J. M¨uller et al.
2 Foundations
The PostScript page description language [2] was originally invented by Adobe
between 1982 and 1984 for high quality printing on laser printers. However,
PostScript soon became a common document exchange format, for example to
share electronic versions of academic publications. It is a stack-based Turing
complete programming language with a rich set of commands and data types. In
this regard, Encapsulated PostScript (EPS) is also noteworthy as it is generally
considered as a vector image format and supported by various applications such
as LATEX processors. While EPS is limited to a subset of the PostScript language,
all commands that we classify as potentially harmful are still available in EPS.
An example PostScript document displaying Hello World is given in Listing 1.
1 %!PS
2
3
/Times-Roman findfont 75 scalefont setfont
100 500 moveto (Hello World) show showpage
Listing 1. Example PostScript document.
With respect to security, interpreting PostScript is equal to arbitrary code
execution. PostScript is even capable of basic ﬁle system I/O – this was origi-
nally designed as a feature to store frequently used graphics or fonts. When run-
ning untrusted PostScript code in a sensitive environment like on a web server,
such functionality can be dangerous since arbitrary ﬁles can be accessed by the
attacker. In this work, the PostScript language is used to perform a variety of
attacks, such as DoS and information disclosure against web applications.
interpreters
software suite provides
Ghostscript. The Ghostscript
for
PostScript and PDF and is available on most Linux distributions. Ghostscript
expects as input PDF or PostScript ﬁles. As output, multiple formats such as
PNG, JPEG, and GIF are supported. Based on this rich feature set, almost all
online converters use Ghostscript to convert PostScript and PDF ﬁles into other
ﬁle types, for example to generate a thumbnail preview of an uploaded PDF ﬁle.
Ghostscript provides various extensions to the PostScript standard such as
accessing environment variables and even shell command execution on the host
system. The dangers of such powerful features have been recognized by the
Ghostscript developers. For this purpose an option activating the ‘more secure’
execution of PostScript code was implemented. By starting Ghostscript with the
-dSAFER ﬂag, critical operations such as executing shell commands and writing
to ﬁles directly on the host ﬁlesystem are disabled while reading ﬁles is lim-
ited to certain directories. Nevertheless, we will show that some attacks are still
applicable even if this ﬂag is enabled.
In the past ten years, 51 Common Vulnerabilities and Exposures (CVE)
IDs have been ﬁled for Ghostscript, with ten of them being classiﬁed as ‘critical’
(CVSS rating of 9 to 10). We also consider these vulnerabilities in our evaluation.
ImageMagick. ImageMagick is an open-source software suite handling a vast
variety of raster and vector image ﬁle formats. Web applications and frameworks
PostScript Undead: Pwning the Web with a Years Old Language
607
often use ImageMagick – or forks of it such as GraphicsMagick – to convert or
resize images. For working with PDF and PostScript ﬁles, ImageMagick delegates
the processing to Ghostscript. Therefore, ImageMagick may be an exploit vector
for malicious PostScript code.
3 Attacker Model
We assume that an attacker is able to create PostScript code and send it as input
to a target web application. After that, the attacker may access the resulting
image generated by the target web application from the PostScript document.
Our attacker is successful if one or more of the following ﬁve goals are
achieved: (1) Processing the PostScript code forces the web application to allo-
cate huge amounts of resources such as CPU or memory (DoS). (2) The attacker
obtains non-public information useful for further attacks, such as path names or
environment variables. (3) The attacker can read from or write to ﬁles on the
ﬁle system of the web application. (4) The attacker can execute shell commands
on the hosting machine of the web application. (5) The attacker can display
diﬀerent content to diﬀerent users viewing the same document.
4 Attacking via PostScript
This section describes ﬁve diﬀerent attacks achieving at least one of the described
goals. All described attacks target the Ghostscript component, see Fig. 1.
Denial-of-Service (DoS). PostScript provides features that can be misused to
allocate large amounts of resources such as CPU or RAM. Thus, if an interpreter
does not impose any upper processing time or memory consumption limits, the
host is prone to DoS attacks.
1 %!PS
2
{10000000 array} loop
Listing 2. Inﬁnite memory allocation loop within a malicious PostScript document.
The example shown in Listing 2 forces the allocation of large arrays on the
stack within an inﬁnite loop. If run in the Ghostscript interpreter, all available
memory is consumed within seconds. By sending this small PostScript document,
an attacker could harm the availability of a machine. Furthermore, PostScript
allows arbitrary strings to be printed to stdout and stderr within loops at high
data rates. If error messages get logged, this allows an attacker to ﬂood logﬁles
and exhaust all available disk space.
Information Disclosure. Given access to the results of executed PostScript
code, an attacker can obtain reconnaissance information such as the target’s sys-
tem time and platform or the used PostScript interpreter version. Proprietary
extensions featured by Ghostscript enable further low-level information disclo-
sure attacks such as access to the command line arguments the program has
608
J. M¨uller et al.
been called with (including ﬁle names) and the full path names for conﬁguration
and font ﬁles. Older Ghostscript versions even allowed environment variables to
be read even if the -dSAFER ﬂag was set.
File System Access. The PostScript language allows reading from and writ-
ing to arbitrary ﬁles on the host ﬁle system. The Ghostscript interpreter, if
called with -dSAFER, restricts access to reading certain fonts and conﬁguration
ﬁles. However, bypasses were discovered in the past such as CVE-2016-7977.
Note that ﬁle inclusion may lead to further attacks such as DoS by accessing
/dev/random.
Write access to Ghostscript conﬁguration ﬁles even enables an attacker to
escalate into other PostScript or Portable Document Format (PDF) ﬁles pro-
cessed by the interpreter. This way, subsequent documents uploaded by users
can be captured or manipulated by an attacker. Older versions of Ghostscript
allowed directory listings even with activated -dSAFER mode. In current ver-
sions, an attacker can still verify if a certain ﬁle or directory exists on the ﬁle
system and obtain its size and timestamp.
Command Execution. Technically, every direct access to a PostScript inter-
preter can already be classiﬁed as code execution. Certainly, without access to the
network stack or additional operating system libraries, possibilities are limited
to arbitrary mathematical calculations such as mining cryptocurrencies. How-
ever, the Ghostscript interpreter – if not called with -dSAFER – allows to invoke
arbitrary shell commands to be executed using the proprietary %pipe%cmd com-
mand. Furthermore, bypasses were discovered in the past leading to command
execution even in safer mode, such as CVE-2016-7976 and CVE-2017-8291.
Content Masking. The appearance of a PostScript document is dynamically
generated based on its code. This enables an attacker to create a document with
a diﬀerent content being displayed based on conditional statements such as the
current time or the host it is running on. Backes et al. [6] and Costin [12] used
this feature to manipulate purchase contracts. In the context of web applications,
such an approach may allow to bypass ﬁlters for illegal or oﬀensive content: The
document can be made to look diﬀerent when previewed in the cloud, when
opened locally, or when printed. We show that such attacks are even possible with
PDF ﬁles containing PostScript overlay code. This fundamentally undermines
trust in PDF documents since they are commonly assumed to display the same
content, independent of their environment. Furthermore, conditional PostScript
statements allow to render a diﬀerent number of pages depending on whether
the document is processed on a printer or a print server such as CUPS3. This
enables an attacker to manipulate or bypass page counters used for accounting.
3 Apple Inc., Common UNIX Printing System, https://www.cups.org/, Mar. 2017.
PostScript Undead: Pwning the Web with a Years Old Language
609
5 Obfuscating Malicious PostScript Files
Security related ﬁlters within the web frontend can be applied to prohibit the
upload of potentially dangerous ﬁles. Usually, such ﬁlters restrict allowed ﬁles to
certain types such as images. Once the ﬁle is uploaded it is just passed through
to ImageMagick which – based on magic header bytes – detects the ﬁle format.