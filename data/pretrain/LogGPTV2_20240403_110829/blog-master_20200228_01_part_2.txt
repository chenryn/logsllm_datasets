  1 |    3608 |  103 |   2 |  3608 | 0d4ba585b399aee3003a4edcb9c06b4a | 2020-02-28 09:43:51.504148  
  2 |    7186 |  116 |   2 |  3578 | eb05ca87fa68760c8aaf297c5054ba53 | 2020-02-28 09:43:51.504174  
... ...  
(185 rows)  
Time: 825.337 ms  
```  
当然, 同样会遇到前面说的性能问题, 因为每个分组都要全部计算  
### 优化-递归+UDF  
分组后的优化思路一样:  
使用udf , 可以做到每个uid都不做额外的扫描  
1、增加一个索引即可, 让它按这个顺序扫描 uid, id  
```  
db1=# create index idx_t_1 on t(uid,id);  
CREATE INDEX  
Time: 413.120 ms  
```  
2、返回最小的这个UID, 递归语句这么写  
```  
with recursive a as (  
(  
select score as s_score,* from t where   
uid = (select min(uid) from t)  -- 最小的uid  
and  
score  a.id)   
and  
s_score a.uid)  
limit 1  
)  
)  
select * from a ;  
```  
2、写一个UDF, loop uids, 里面使用最开始那个递归语句, 快速返回某个uid的记录.  
```  
create or replace function get_res1(  
in i_s_score int,  
in i_limit int,  
out o_s_score int,  
out o_id int8,  
out o_uid int,  
out o_score int,  
out o_info text,  
out o_crt_time timestamp  
) returns setof record as $$  
declare  
  v_uid int;  
begin  
-- 遍历uids  
  for v_uid in with recursive a as (  
(  
select min(uid) as uid from t  
)  
union all  
(  
select t.uid from t,a  
where t.uid =(select min(t.uid) from t where t.uid>a.uid)  
limit 1  
)  
)  
select * from a   
loop  
-- 返回某个uid的满足条件的记录  
  return query  
  with recursive a as (  
(  
select score as s_score,* from t where   
uid = v_uid  
and  
score  a.id)   
and  
s_score < i_s_score -- 总分 , 不满足时直接跳出循环, 所以不需要额外扫描, 优化思路和udf一样   
limit 1   
)  
)  
select   
s_score as o_s_score,  
id as o_id,  
uid as o_uid,  
score as o_score,  
info as o_info,  
crt_time as o_crt_time  
 from a   
where s_score < i_s_score -- 总分   
limit i_limit ;  -- 限制返回条数    
end loop;  
end;  
$$ language plpgsql strict;  
```  
速度杠杠的  
```  
db1=# select * from get_res1(10000,5);  
 o_s_score | o_id | o_uid | o_score |              o_info              |         o_crt_time           
-----------+------+-------+---------+----------------------------------+----------------------------  
      4421 |  249 |     0 |    4421 | d1e50163bb6eb72196344ca1ecfcf976 | 2020-02-28 09:43:51.504471  
      4869 |  494 |     0 |     448 | 930e8598ee04fd02fa0902ff01444e55 | 2020-02-28 09:43:51.505138  
      6687 |  875 |     0 |    1818 | da86a0ce594baffaea20bd4874839106 | 2020-02-28 09:43:51.506114  
      9119 | 1067 |     0 |    2432 | 7e17f5028c8b856a353985e3cee07cb8 | 2020-02-28 09:43:51.506607  
      5213 |   29 |     1 |    5213 | 4291d618e5e295f42406e4d324196509 | 2020-02-28 09:43:51.503923  
      8015 |   49 |     1 |    2802 | bc03c9c6654ce3d7e50a9f1c8644123b | 2020-02-28 09:43:51.503961  
      3608 |  103 |     2 |    3608 | 0d4ba585b399aee3003a4edcb9c06b4a | 2020-02-28 09:43:51.504148  
      7186 |  116 |     2 |    3578 | eb05ca87fa68760c8aaf297c5054ba53 | 2020-02-28 09:43:51.504174  
      7611 |  125 |     2 |     425 | d7194f21805a9a41464f397adb8e675b | 2020-02-28 09:43:51.504192  
... ...  
(185 rows)  
Time: 5.717 ms  
```  
825毫秒降到了5.7毫秒  
## 小结  
1、不分组累加链动态条件, UDF优化, 432毫秒降到0.238毫秒  
2、不分组累加链动态条件, 递归优化, 432毫秒降到0.369毫秒  
3、分组累加链动态条件, UDF+递归优化, 825毫秒降到了5.7毫秒  
能看懂这篇文档的同学, 说明你可以往数据库这个方向继续发展, 那么就需要深入学习了, 可以继续看这些文档  
1、[《2020-PostgreSQL+MySQL 联合解决方案课程 - 汇总视频、课件》](../202001/20200118_02.md)    
2、[《2019-PostgreSQL 2天体系化培训 - 视频每周更新》](../201901/20190105_01.md)   
3、[《Oracle DBA 增值 转型 PostgreSQL 学习方法、路径》](../201804/20180425_01.md)     
同时你需要一个PG数据库来边学边实践, 目前阿里云有9块9包邮的RDS PG可以购买  
https://www.aliyun.com/database/postgresqlactivity  
如果你看不懂这篇文档, 那就别折腾了.   
## 参考  
[《2020-PostgreSQL+MySQL 联合解决方案课程 - 汇总视频、课件》](../202001/20200118_02.md)    
[《2019-PostgreSQL 2天体系化培训 - 视频每周更新》](../201901/20190105_01.md)   
[《Oracle DBA 增值 转型 PostgreSQL 学习方法、路径》](../201804/20180425_01.md)     
[《PostgreSQL 递归查询一例 - 资金累加链》](../201604/20160405_01.md)    
[《PostgrSQL 递归SQL的几个应用 - 极客与正常人的思维》](../201705/20170519_01.md)    
[《GIS附近查找性能优化 - PostGIS long lat geometry distance search tuning using gist knn function》](../201308/20130806_01.md)    
[《用PostgreSQL找回618秒逝去的青春 - 递归收敛优化》](../201612/20161201_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")