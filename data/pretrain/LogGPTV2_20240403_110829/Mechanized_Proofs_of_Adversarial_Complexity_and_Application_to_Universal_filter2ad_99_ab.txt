module QH = {
proc o(x:rand) = { qs ← x::qs; r ← H.o(x); return r; }}
proc invert(pk:pkey,y:rand): rand = {
qs
(m0,m1) ← A(QH).choose(pk);
h
b
while (qs (cid:44) []) {
r ← head qs; if (f pk r = y) return r; qs ← tail qs; }
← [];
$←− dplaintext;
← A(QH).guess(y || h);
}}.
Figure 1: Inverter for trapdoor permutation.
adversaries declares two procedures: choose for choosing two plain-
texts m0 and m1, and guess for guessing the (uniformly sampled) bit
b given an encryption of mb. The cost of these procedures is a pair:
the second component is an upper bound on the number of times
it can call the random oracle, and the first is an upper bound on
its intrinsic cost, i.e. its cost assuming that oracle calls (modeled
as functor parameters) have a cost of 0. This style of modeling is
routinely used in cryptography and is better suited to reason about
open code. This cost model is also more fine-grained than counting
the total cost of the procedure including the cost of the oracles, as
we have a guarantee on the number of time oracles are called.
Next, we define the inverter Inv for the one-way trapdoor permu-
tation. It runs the adversary A, keeping track of all the calls that A
makes to H in a list qs (using the sub-module QH), and then searches
in the list qs for a pre-image of y under f pk. Search is done through
a while loop, which we write in a slightly beautified syntax. This
inverter can be used to state the following reductionist security
theorem relating the advantage and execution cost of an adversary
against chosen-plaintext security of the PKE with the advantage of
the inverter against one-wayness.
Theorem 2.1 (Security of BR93). Let tf represent the cost of
applying the one-way function f and to denote the cost of H.o, i.e. the
implementation of a query to a lazily sampled random oracle. Fix the
type for adversaries τA such that:
cost A.choose ≤ compl[intr : tc , H.o : kc]
and cost A.guess ≤ compl[intr : tд, H.o : kд]
and fix τI such that:
costI.invert ≤ compl[intr : (5+tf )·(kc +kд)+4+to·(kc +kд)+tc +tд] .
Then, ∀A ∈ τA,∃I ∈ τI, advBR93
ind-cpa(A) ≤ advf
ow(I).
Here, IND-CPA refers to the standard notion of ciphertext indis-
tinguishability under chosen-plaintext attacks for PKE, where the
adversary is given the public key and asked to guess which of two
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2543messages of its choice has been encrypted in a challenge ciphertext;
OW refers to the standard one-wayness definition for trapdoor
permutations, where the attacker is given the public parameters
and the image of a random pre-image, which it must invert. In the
former, advantage is the absolute bias of the adversary’s boolean
output w.r.t. 1/2; in the latter, advantage is the probability of suc-
cessful inversion.
We prove the statement by providing Inv(A) as a witness for the
existential quantification, which creates two sub-goals. The first
sub-goal establishes the advantage bound, which we prove using
relational Hoare logic. The second sub-goal establishes that our
inverter satisfies the required cost restrictions, and is proved using
our Hoare logic for complexity. We declare the type of Inv as:
cost Inv.invert ≤ compl[intr : (5 + tf ) · (kc + kд) + 4,
H.o = kc + kд, A.choose = 1, A.дuess = 1]
and so we first must establish that Inv belongs to this functor type. It
is easy to show that A.choose and A.guess are called exactly once, and
that H.o is called at most kc + kд times. So we turn to the intrinsic
complexity of Inv. The key step for this proof is to show that the loop
does at most kc + kд iterations. We use the length of qs as a variant:
the length of the list is initially 0, and incremented by 1 by each call
to the random oracle, therefore its length at the start of the loop is at
most kc + kд. Moreover, the length decreases by 1 at each iteration,
so we are done. The remaining reasoning is standard,2 using the
cost of each operator—fixed by choice in this particular example to
1, except for the operator f. Our modeling of cost enforces useful
invariants that simplify reasoning. For instance, proving upper
bounds on the execution cost of Inv requires proving an upper
bound on the number of iterations of the loop, and therefore on
the length of qs upon entering the loop. We derive the complexity
statement in the theorem, which shows only the intrinsic cost of
Inv, by instantiating the complexity type of Inv with the cost of its
module parameter A. This illustrates how our finer-grained notion
of cost is useful for compositional reasoning.
Comparison with EasyCrypt. Our formalization follows the same
pattern as the BR93 formalization from the EasyCrypt library. How-
ever, the classic module system of EasyCrypt only tracks read-and-
write effects and lacks first-class support for bounding the number
of oracle calls and for reasoning about the complexity of programs.
To compensate for this first point, classic EasyCrypt proofs use
wrappers to explicitly count the number of calls and to return
dummy answers when the number of adversarial calls to an oracle
exceeds a threshold. The use of wrappers suffices for reasoning
about adversarial advantage. However, no similar solution can be
used for reasoning about the computational cost of adversaries.
Therefore, the BR93 formalization from the EasyCrypt library
makes use of the explicit definition of I, and users must analyze
the complexity of I outside the tool. As a result, machine-checked
security statements are partial (complexity analysis is missing), clut-
tered (existential quantification is replaced by explicit witnesses),
and compositional reasoning is hard (existential quantification over
module types cannot be used meaningfully).
2Notice that the condition of the loop is executed at most kc + kд time.
Expressions (distribution expres-
sions are similar):
e ::= v ∈ V
| f (e1, . . . , en)
(variable)
(if f ∈ FE)
(abort)
(skip)
(sequence)
(assignment)
Statements:
s ::= abort
| skip
| s1; s2
| x ← e
$←− d
| x
| x ← call F((cid:174)e )
| if e then s1 else s2
| while e do s
Procedure body:
body ::= { var ((cid:174)v : (cid:174)τ); s; return e }
(sampling)
(proc. call)
(cond.)
(loop)
Function paths:
F ::= p.f
Module paths:
p ::= x
| p.x
| p(p)
(proc. lookup)
(mod. ident.)
(mod. comp.)
(func. app.)
Module expressions:
m ::= p
(mod. path)
| struct st end
(structure)
| func(x : M) m (functor)
Module structures:
(n ∈ N)
st ::= d1; . . . ; dn
Module declarations:
d ::= module x = m
| proc f ((cid:174)v : (cid:174)τ) → τr = body
Figure 2: Program and module syntax
3 ENRICHED EASYCRYPT MODULE SYSTEM
We present a formalization of our extended module system for
EasyCrypt. It is based on EasyCrypt current imperative probabilistic
programming language and module system, which we enrich to
track the read-and-write memory footprint and complexity cost
of module components through module restrictions. These module
restrictions are checked through a type system: memory footprint
type-checking is fully automatic, while type-checking a complexity
restriction generates a proof obligation that is discharged to the
user — using the cost Hoare logic we present later, in Section 4.
3.1 Syntax of Programs and Modules
The syntax of our language and module system is (quite) standard
and summarized in Figure 2. We describe it in more detail below.
We assume given a set of operators FE and a set of distribution
operators FD. For any д ∈ FE ∪ FD, we assume given its type:
type(д) = τ1 × · · · × τn → τ where τ1, . . . , τn, τ ∈ B with B the set
of base types. We require that bool is a base type, and otherwise
leave B unspecified.
We consider well-typed arity-respecting expressions built from
FE and variables in V. Similarly, distribution expressions d are
built upon FD and V. For any expression e, we let vars(e) be the
set of variables appearing in e (idem for distribution expression).
We assume a simple language for program statements. A state-
ment s can be an abort, a skip, a statement sequence s1; s2, an
assignment x ← e of an expression to a variable, a random sam-
$←− d from a distribution expression, a conditional, a while
pling x
loop, or a procedure call x ← call F((cid:174)e ).
The module system. In a procedure call, F is a function path of
the form p.f where f is the procedure name and p is a module path.
Basically, when calling p.f , the module system will resolve p to a
module structure, which must declare the procedure f (this will be
guaranteed by our type system). Formally, a module structure st is
Session 10B: Crypto and Protocol Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2544Signature structures (for any n ∈ N):
S ::= D1; . . . ; Dn
Module signature declarations:
D ::= proc f ((cid:174)v : (cid:174)τ) → τr | module x : M
Module signatures:
M ::= sig S restr θ end | func(x : M) M′
Module restrictions:
θ ::= ϵ | θ, (f : λ)
λ ::= ⊤ | λm ∧ λc
Memory restrictions (for any l ∈ N):
λm ::= +all mem\{v1, . . . , vl } | {v1, . . . , vl }
Complexity restrictions (for any l, k, k1, . . . , kl ∈ N):
λc ::= ⊤ | compl[intr : k, x1 .f1 : k1, . . . , xl .fl : kl]
Figure 3: Module signatures and restrictions
module type HSM = {
proc enc (x:msg) : cipher }.
module Hsm : HSM = {
proc enc (x:msg) : cipher = { . . . } }.
module type Adv (H : HSM) {+all mem, -Hsm} = {
proc guess () : skey compl[intr : k0, H.enc : k]}.
Figure 4: Example of adversary with restrictions.
a list of module declarations, and a module declaration d is either
a procedure (with typed arguments, and a body which comprises
a list of local variables with their types (cid:174)v : (cid:174)τ, a statement s and a
return expression e) or a sub-module declaration.
The component c of a module x can be accessed through the mod-
ule path expression x.c. Since a module can contain sub-modules,
we can have nested accesses, as in x. . . . .z.c. Hence, a module path
is either a module identifier, a component access of another module
path p, or a functor application. Finally, a module expression m is
either a module path, a module structure or a functor.
3.2 Module Signatures and Restrictions
The novel part of our system is the use of module restrictions in
module signatures. Objects related to module restriction are high-
lighted in red throughout this paper (this is only here to improve
readability, not to convey additional information). The syntax of
module signatures and restrictions is given in Figure 3. A mod-
ule structure signature S is a list of module signature declarations,
which are procedure signatures or sub-module signatures. Then,
a module signature M is either a functor signature, or a structure
signature with a module restriction θ attached.
Module restrictions. A module restriction restricts the effects of
a module’s procedures. We are interested in two types of effects.
First, we characterize the memory footprint (i.e. global variables
which are read or written to) of a module’s procedures through
memory restrictions. Second, we upper bound the execution cost
of a procedure, and the number of calls a functor’s procedure can
make to the functor’s parameters, through complexity restrictions.
Restrictions are useful for compositional reasoning, as they al-
low stating and verifying properties of a module’s procedures at
declaration time. In the case of an abstract module (i.e. a module
whose code is unknown), restrictions allow to constrain, through
the type system, its possible instantiations. This is a key idea of
our approach, which we exploit to prove complexity properties of
cryptographic reductions.
For example, we give in Figure 4 EasyCrypt code corresponding
to an adversary against a hardware security module. In this sce-
nario the goal of the adversary is to recover the secret key stored in
the module Hsm. The example uses two types of restrictions. The
module-level restriction {+all mem, -Hsm} states that such an adver-
sary can access all the memory, except for the memory used by the
module Hsm. The procedure-level restriction [intr : k0, H.enc : k]
attached to guess, states that guess execution time is at most k0 (ex-
cluding calls to H.enc), and that guess can make at most k queries
to the procedure H.enc.
Formally, a module restriction is a list of pairs comprising a
procedure identifier f and a procedure restriction λ, and a procedure
restriction λ is either ⊤ (no restriction), or the conjunction of a
memory restriction λm and a complexity restriction λc:
Memory. A memory restriction λm, attached to a procedure f ,
restricts the variables that f can access directly. We allow for posi-
tive memory restrictions {v1, . . . , vl}, which states that f can only
access the variables v1, . . . , vl ; and negative memory restrictions
+all mem\{v1, . . . , vl}, which states that f can access any global
variables except the variables v1, . . . , vl .
Note that λm only restricts f ’s direct memory accesses: this
excludes the memory accessed by the procedure oracles (which are
modeled as functor’s parameters). This is crucial, as otherwise, an
adversary that is not allowed to access some oracle’s memory (a
standard assumption in security proofs) would not be allowed to
call this oracle. E.g., the adversary of Figure 4 can call the oracle
H.enc (which can be instantiated by Hsm), even though it cannot
access directly Hsm’s memory.
Complexity. A complexity restriction λc attached to a procedure
f restricts its execution time and the number of calls that f can
make to its parameters: it is either ⊤, i.e. no restriction; or the
restriction compl[intr : k, x1.f1 : k1, . . . , xl .fl
: kl], which states
that: i) its execution time (excluding calls to the parameters) must
be at most k; ii) f can call, for every i, the parameter’s procedure
xi .fi at most ki times. We require that all parameters’ procedures
appear in the restriction. This can be done w.l.o.g. by assuming
that any missing entry is zero (which is exactly what is done in our
EasyCrypt implementation).
3.3 Typing Enriched Module Restrictions
We check that modules verify their signatures through a type sys-
tem. The novelty of our approach lies in the enriched restrictions
attached to module signatures, and the typing rules that check
them. For space reasons, we only present the two main restriction
checking rules here (the full type system is in Appendix B).