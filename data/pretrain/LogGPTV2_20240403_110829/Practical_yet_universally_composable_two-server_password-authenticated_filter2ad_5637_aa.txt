title:Practical yet universally composable two-server password-authenticated
secret sharing
author:Jan Camenisch and
Anna Lysyanskaya and
Gregory Neven
Practical Yet Universally Composable Two-Server
Password-Authenticated Secret Sharing
Jan Camenisch
IBM Research – Zurich
PI:EMAIL
Anna Lysyanskaya
Brown University
PI:EMAIL
Gregory Neven
IBM Research – Zurich
PI:EMAIL
ABSTRACT
Password-authenticated secret sharing (PASS) schemes, ﬁrst intro-
duced by Bagherzandi et al. at CCS 2011, allow users to distribute
data among several servers so that the data can be recovered using a
single human-memorizable password, but no single server (or even
no collusion of servers up to a certain size) can mount an off-line
dictionary attack on the password or learn anything about the data.
We propose a new, universally composable (UC) security deﬁni-
tion for the two-server case (2PASS) in the public-key setting that
addresses a number of relevant limitations of the previous, non-UC
deﬁnition. For example, our deﬁnition makes no prior assumptions
on the distribution of passwords, preserves security when honest
users mistype their passwords, and guarantees secure composition
with other protocols in spite of the unavoidable non-negligible suc-
cess rate of online dictionary attacks. We further present a concrete
2PASS protocol and prove that it meets our deﬁnition. Given the
strong security guarantees, our protocol is surprisingly efﬁcient: in
its most efﬁcient instantiation under the DDH assumption in the
random-oracle model, it requires fewer than twenty elliptic-curve
exponentiations on the user’s device. We achieve our results by
careful protocol design and by exclusively focusing on the two-
server public-key setting.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Cryptographic control; D.4.6
[Security and Protection]: Authentication
Keywords
Password-authenticated secret sharing, universal composability
1.
INTRODUCTION
Personal computing has long moved beyond the “one computer
on every desk and in every home” to a world where most users own
a plethora of devices, each of which is capable of general computa-
tion but is better suited for a speciﬁc task or environment. However,
keeping personal data synchronized across laptops, mobile phones,
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’12, October 16–18, 2012, Raleigh, North Carolina, USA.
Copyright 2012 ACM 978-1-4503-1651-4/12/10 ...$10.00.
tablets, portable media players, and other devices is not straight-
forward. Since most of these have some way of connecting to the
Internet, the most obvious solution is to synchronize data “over the
cloud”. Indeed, many services doing exactly this are commercially
available today.
Data synchronization over the cloud poses severe security and
privacy threats, however, as the users’ whole digital lives are at risk
when the cloud host turns out to be malicious or is compromised
by an attack. A ﬁrst solution could be to encrypt the data under a
key that is stored on the user’s devices but is unknown to the cloud
host. This approach has security as well as usability problems: If
one of the devices gets lost or stolen, the owner’s data is again at
risk, and securely (which in some cases means manually) entering
strong cryptographic keys on devices is too tedious for most users.
A much better approach is to protect the data under a secret that
is associated with the human user such as a human-memorizable
password or biometric data. Passwords are still the most prevalent
and easily deployable alternative. Although passwords are inher-
ently vulnerable to dictionary attacks, an important distinction must
be made between online and ofﬂine dictionary attacks. The former
type of attacks, where an attacker simply repeatedly tries to login
to an online server, are easily prevented by blocking the account,
presenting CAPTCHAs, or enforcing time delays after a number of
failed login attempts. Ofﬂine attacks, however, allow the adversary
to test passwords independently and are therefore more dangerous.
With sixteen-character passwords having an estimated 30 bits of
entropy [7] and modern GPUs able to test billions of passwords per
second, security should be considered lost as soon as an ofﬂine at-
tack can be performed. Therefore, to offer any relevant security,
protocols need to be designed such that the correctness of a pass-
word can only be tested by interacting with an online server that
can refuse cooperation after too many failed attempts.
One possibility to safely store password-protected data in the
cloud is to use a password-authenticated key exchange (PAKE) pro-
tocol to establish a secure and authenticated channel with the server
and to send and retrieve the data over this channel. There is a con-
siderable amount of literature on single-server PAKE protocols that
protect against ofﬂine dictionary attacks [5, 24, 25, 3, 29, 14].
It is easy to see, however, that no single-server scheme can pro-
tect against ofﬂine dictionary attacks by a malicious or compro-
mised server. A better approach is to secret-share [36] the data as
well as the information needed to verify the password across multi-
ple servers, and to design the authentication protocol so that no sin-
gle server (or a collusion of servers up to a certain size) learns any-
thing that allows it to perform an ofﬂine dictionary attack. This is
what a password-authenticated secret sharing (PASS) scheme does.
One way to obtain a PASS scheme is by combining a multi-
server PAKE protocol with a secret-sharing scheme so that the user
525ﬁrst establishes secure channels with each of the servers using her
(single) password, and then submits and retrieves the shares over
these channels. Ford and Kaliski [20] were the ﬁrst to propose a
multi-server PAKE protocol in a setting where the user remembers
her password as well as the public keys of n servers, of which n−1
can be compromised. Jablon [27] proposed a similar protocol in the
password-only setting, i.e., where the user cannot remember public
keys. Brainard et al. [6] proposed a dedicated two-server proto-
col in the public-key setting. None of these protocols had formal
security notions or proofs, however.
The ﬁrst provably secure multi-server PAKE protocol, by Mac-
Kenzie et al. [30], is a t-out-of-n protocol supporting t < n ma-
licious servers in the public-key setting. Szydlo and Kaliski [37]
provided security proofs for slight variants of the two-server pro-
tocol by Brainard et al. [6] mentioned earlier. Di Raimondo and
Gennaro [17] proposed the ﬁrst provably secure solution in the
password-only model, which was at the same time the ﬁrst solu-
tion not relying on random oracles [4] in the security proof. Their
protocol tolerates the compromise of t < n/3 out of n servers,
which means that it cannot be used for two servers—probably the
most relevant setting in practice. This gap was ﬁlled by Katz et
al. [28], who presented a dedicated two-server PAKE protocol for
the password-only setting, also without random oracles.
All the solutions mentioned so far are multi-server PAKE pro-
tocols. However, PASS is a simpler primitive than PAKE and so
one can hope to obtain more efﬁcient and easier to analyze PASS
protocols from scratch, rather than from PAKE protocols. Indeed,
Bagherzandi et al. [1] recently introduced the ﬁrst direct PASS
scheme, supporting coalitions of any t < n out of n servers.
Properly deﬁning security of password-based protocols is a del-
icate task. The fact that an adversary can always guess a low-
entropy password in an online attack means that there is an inher-
ent non-negligible probability of adversarial success; security must
therefore be deﬁned as the adversary’s inability to do signiﬁcantly
better than that. The highly distributed setting of multi-user and
multi-server protocols further complicates the models and proofs.
Secure composition is another issue. All provably secure multi-
server protocols mentioned above employ property-based security
notions that cover the protocol when executed in isolation, but fail
to provide guarantees when the protocol is composed with other
protocols and network activity. Composing password-based pro-
tocols is particularly delicate because the composition of several
protocol may amplify the non-negligible adversarial success. Also,
human users are much more likely to leak information about their
passwords in their online activities than they are to leak information
about about their cryptographic keys.
Our Contributions.
We propose the ﬁrst two-server password-authenticated secret
sharing (2PASS) scheme in the public-key setting that is provably
secure in the universal composability (UC) framework [12]. We
show that, when considering static corruptions and the fact that an
adversarial environment necessarily learns whether a protocol suc-
ceeded or failed, our notion implies the only existing 2PASS secu-
rity deﬁnition [1], but that the converse is not true. The UC frame-
work not only guarantees secure composition in arbitrary network
environments, but also, as argued before by Canetti et al. [14] for
the case of single-server PAKE, better addresses many other con-
cerns about property-based deﬁnitions for password-based proto-
cols. For example, all property-based deﬁnitions assume that pass-
words are generated outside of the adversary’s view according to
pre-determined, known, and independent distributions. This does
not reﬂect reality at all: users use the same or related passwords
across different services, they share passwords with other users,
and constantly leak information about their passwords by using
them for other purposes. Rather, our UC security notion follows
that of Canetti et al. [14] in letting the environment dictate the par-
ties’ passwords and password guesses. As a result, this approach
avoids any assumptions on the distribution of passwords, and at the
same time incorporates the non-negligible success of online guess-
ing attacks straight into the model, so that secure protocol compo-
sition is guaranteed through the universal composition theorem. As
another example, our UC deﬁnition allows the adversary to observe
authentication sessions by honest users who attempt passwords that
are related but not equal to their correct passwords. This is a very
common situation that arises every time a user mistypes her pass-
word; previous deﬁnitions fail to model and, consequently, provide
security guarantees in this case.
Our model is also the ﬁrst to explicitly capture throttling mecha-
nisms, i.e., mechanisms to block accounts after a number of failed
authentication attempts, or because a particular server is under at-
tack and deems it prudent to temporarily block an account. As
we’ve seen earlier, throttling is crucial to drive a wedge between
the efﬁciency of online and ofﬂine attacks. Throttling is impossi-
ble for the PASS scheme of Bagherzandi et al. [1] since the servers
do not learn whether the password was correct. The model and
protocol for UC-secure single-server PAKE of Canetti et al. [14]
does not explicitly notify servers about the success or failure of an
authentication attempt, although it is mentioned that such function-
ality can be added with a two-round key-conﬁrmation step. In our
model, honest servers can decide at each invocation whether to go
through with the protocol based on a prompt from the environment.
In summary, we believe that for password-based protocols, UC
security not only gives stronger security guarantees under compo-
sition, but is actually a more natural, more practically relevant, and
less error-prone approach than property-based deﬁnitions. In view
of these strong security guarantees, our protocol is surprisingly ef-
ﬁcient, as we discuss in Section 4. When instantiated based on the
decisional Difﬁe-Hellman assumption in the random-oracle model,
it requires the user to perform eighteen modular exponentiations to
set up her account and nineteen to retrieve her stored secret.
We believe that this is an exciting research area, with challeng-
ing open problems that include strengthening our protocol to with-
stand adaptive corruptions, designing a UC-secure 2PASS scheme
in the password-only (i.e., non-public-key) model, and building
UC-secure protocols for the t-out-of-n case.
2. DEFINITIONS
Although intuitively the security properties we want to capture
seem clear, giving a rigorous deﬁnition for the problem is a chal-
lenging task. Numerous subtleties have to be addressed. For ex-
ample, where does the password come from? Having the user pick
her password at random from a dictionary of a particular size does
not accurately model the way users pick their passwords. Can any
security still be retained if a user is tricked into trying to retrieve
another user’s key with her correct password? Do two users get
any security if their passwords are correlated in some way that is
potentially known to an attacker? Do the servers learn anything
when a user mistypes a password?
We deﬁne the problem by giving an ideal functionality in the
universal-composability (UC) framework [12, 32] that captures all
the intuitive security properties required in this scenario. The ideal
functionality stores a user’s password p and a key K .
(Without
loss of generality, we assume that the only data that users store
on and retrieve from the servers are symmetric encryption keys.
With those, users can always encrypt data of arbitrary length and
526store the resulting ciphertext on an untrusted device or in the cloud.)
It only reveals the user’s key K when presented with the correct
password. It notiﬁes the two servers of all attempts (successful and
unsuccessful) to retrieve the key, and allows the servers to interrupt
the retrieval whenever they deem necessary. As long as one of the
servers is not corrupt, the adversary does not learn anything about
the user’s password or key, unless it can guess her password.
Following the UC framework, we then require that a protocol
must not reveal any more information to an adversary than the ideal
functionality does, no matter what values users use for their pass-
words and keys. This is a very strong deﬁnition of security:
in
particular, a protocol satisfying it is guaranteed to remain secure
even when run concurrently with any other protocols.
2.1 Ideal Functionality
Preliminaries.
A 2PASS scheme operates in a setting with multiple users Ui,
i = 1, . . . , U, multiple servers Sj, j = 1, . . . , S, an adversary A
and the environment E. Users in our protocol are stateless, but each
server Sj maintains an associative array st j[·] containing its local
user directory. The scheme is deﬁned by two interactive protocols
Setup and Retrieve. A user Ui performs the Setup protocol with
two servers of its choice Sj and Sk to store her secret K under
username u and password p. Any user Ui(cid:48), possibly different from
Ui, can recover the secret K by running the Retrieve protocol with
Sj and Sk using the correct username u and password p.
We assume static Byzantine corruptions, meaning that at the be-
ginning of the game the adversary decides which parties, users and
servers alike, are corrupted. From then on, the adversary controls
all corrupted parties and cannot corrupt any other parties. The ideal
functionality “knows” which participants are honest and which ones
are corrupt. Without loss of generality, we assume that there is at
least one corrupt user through which the adversary can make setup
and retrieve queries. Note that since there is no user authentication
other than by passwords, in the real world the adversary can always
generate such queries by inserting fake messages into the network.
While our protocol clearly envisages a setting where multiple
users can create multiple accounts with any combination of servers
of their choice, the UC framework allows us to focus on a single
session only, i.e., for a single user account. Security for multi-
ple sessions follows from the UC composition theorem [12], or if
the different sessions share the same common reference string and
PKI (as one would prefer in practice), from the joint-state universal
composition (JUC) theorem [15].
For the protocol speciﬁcation and security proof, we can there-
fore focus on a single user account u that is established with two
servers S1 and S2. The detailed ideal functionality F2PASS is given
in Figures 1 and 2. The triple sid = (u,S1,S2) is used as the ses-
sion identifer, but multiple simultaneous setup and retrieve queries
by different users may take place within this session. Each setup
and retrieve query within this session has a unique query identiﬁer
qid. (See below for further discussion on session and query iden-
tiﬁers.) For compactness of notation, we will from now on refer to
the functionality F2PASS as F.