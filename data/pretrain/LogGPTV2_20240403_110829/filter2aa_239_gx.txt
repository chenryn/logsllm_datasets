建下面的代码：
      @ViewBag.Title
        @RenderBody()
布局页包含了所有使用该布局页的页面所共有的HTML内容，例如页眉、页脚和导
航。前面介绍了视图和控制器如何通过ViewBag通信。页面布局也可以使用相同的机制。
ViewBag.Title的值可以在内容页中定义；在布局页面中，在HTML的title元素中显示它，
如前面的代码段所示。基类RazorPage的RenderBody方法呈现内容页的内容，因此定义了
内容应该放置的位置。
在下面的代码段中，更新生成的布局页面来引用样式表，给每个页面添加页眉、页脚
和导航分区。environment、asp-controller和asp-action是创建HTML元素的标记辅助程序。
标记辅助程序参见本章后面的“辅助程序”部分（代码文件
MVCSampleApp/Views/Shared/_Layout.cshtml）：
      @ViewBag.Title - My ASP.NET Application
        ASP.NET MVC Sample App
          Layout Sample
          Layout Using Sections
        @RenderBody()
          Sample Code for Professional C#
          © @DateTime.Now.Year - My ASP.NET Application
为动作LayoutSample创建视图（代码文件
MVCSampleApp/Views/ViewsDemo/LayoutSample. cshtml）。该视图未设置Layout属性，
所以会使用默认布局。但是设置了ViewBag.Title，并在布局的HTML title元素中使用它：
    @{
      ViewBag.Title = "Layout Sample";
    }
    LayoutSample
      This content is merged with the layout page
现在运行应用程序，布局与视图的内容会合并到一起，如图41-3所示。
图41-3
2．使用分区
除了呈现页面主体以及使用ViewBag在布局和视图之间交换数据，还可以使用分区定
义把视图内定义的内容放在什么位置。下面的代码段使用了一个名为PageNavigation的分
区。默认情况下，必须有这类分区，如果没有，加载视图的操作会失败。如果把required
参数设为false，该分区就变为可选（代码文件
MVCSampleApp/Views/Shared/_Layout.cshtml）：
      @RenderSection("PageNavigation", required: false)
      @RenderBody()
在视图内，分区由关键字section定义。分区的位置与其他内容完全独立。视图没有在
页面中定义位置，这是由布局定义的（代码文件
MVCSampleApp/Views/ViewsDemo/LayoutUsingSections.cshtml）：
    @{
        ViewBag.Title = "Layout Using Sections";
    }
    Layout Using Sections
    Main content here
    @section PageNavigation
    {
      Navigation defined from the view
        Nav1
        Nav2
    }
现在运行应用程序，视图与布局的内容将根据布局定义的位置合并到一起，如图41-4
所示。
图41-4
  注意： 分区不只用于在HTML页面主体内放置一些内容，还可用于让视图在
页面头部放置一些内容，如页面的元数据。
41.4.5 用部分视图定义内容
布局为Web应用程序内的多个页面提供了整体性定义，而部分视图可用于定义视图内
的内容。部分视图没有布局。
此外，部分视图与标准视图类似。部分视图使用与标准视图相同的基类。
下面是部分视图的示例。首先是一个模型，它包含EventsAndMenusContext类定义的
独立集合、事件和菜单的属性（代码文件MVCSampleApp/Models/EventsAndMenus.cs）：
          public class EventsAndMenusContext
          {
            private IEnumerable events = null;
            public IEnumerable Events
            {
              get
              {
              return events ? ? (events = new List()
              {
                new Event
                {
                  Id=1,
                  Text="Formula 1 G.P. Australia, Melbourne",
                  Day=new DateTime(2016, 4, 3)
                },
                new Event
                {
                  Id=2,
                  Text="Formula 1 G.P. China, Shanghai",
                  Day = new DateTime(2016, 4, 10)
                },
                new Event
                {
                  Id=3,
                  Text="Formula 1 G.P. Bahrain, Sakhir",
                  Day = new DateTime(2016, 4, 24)
                },
                new Event
                {
                  Id=4,
                  Text="Formula 1 G.P. Russia, Socchi",
                  Day = new DateTime(2016, 5, 1)
                }
              });
              }
            }
            private List menus = null;
          public IEnumerable Menus
          {
            get
            {
              return menus ? ? (menus = new List()
              {
              new Menu
              {
                Id=1,
                Text="Baby Back Barbecue Ribs",
                Price=16.9,
                Category="Main"
              },
              new Menu
              {
                Id=2,
                Text="Chicken and Brown Rice Piaf",
                Price=12.9,
                Category="Main"
              },
              new Menu
              {
                Id=3,
                Text="Chicken Miso Soup with Shiitake Mushrooms",
                Price=6.9,
                Category="Soup"
              }
              });
            }
          }
        }
上下文类用依赖注入启动代码注册，通过控制器构造函数注入类型（代码文件
MVCSampleApp/Startup.cs）：
    public void ConfigureServices(IServiceCollection services)
    {
      services.AddMvc();
      services.AddScoped();
    }
下面使用这个模型介绍从服务器端代码加载的部分视图，然后介绍客户端的
JavaScript代码请求的部分视图。
1．使用服务器端代码中的部分视图
在ViewsDemoController类中，构造函数改为注入EventsAndMenusContext类型（代码
文件MVCSampleApp/Controllsers/ViewsDemoController.cs）：
    public class ViewsDemoController : Controller
    {
      private EventsAndMenusContext _context;
      public ViewsDemoController(EventsAndMenusContext context)
      {
      _context = context;
    }
    // etc.
动作方法UseAPartialView1将EventsAndMenus的一个实例传递给视图（代码文件
MVCSampleApp/Controllsers/ViewsDemoController.cs）：
    public IActionResult UseAPartialView1() => View(_context);
这个视图被定义为使用EventsAndMenusContext类型的模型。使用HTML辅助方法
Html.Par-tialAsync可以显示部分视图。该方法返回一个Task。在下面的示例
代码中，使用Razor语法把该字符串写为div元素的内容。PartialAsync方法的第一个参数接
受部分视图的名称。使用第二个参数，则PartialAsync方法允许传递模型。如果没有传递
模型，那么部分视图可以访问与视图相同的模型。这里，视图使用了
EventsAndMenusContext类型的模型，部分视图只使用了该模型的一部分，所用模型的类
型为IEnumerable（代码文件
MVCSampleApp/Views/ViewsDemo/UseAPartialView1.cshtml）：
    @model MVCSampleApp.Models.EventsAndMenusContext
    @{
      ViewBag.Title = "Use a Partial View";
      ViewBag.EventsTitle = "Live Events";
    }
    Use a Partial View
    this is the main view
      @await Html.PartialAsync("ShowEvents", Model.Events)
不使用异步方法的话，还可以使用同步变体Html.Partial。这是一个返回HtmlString的
扩展方法。
另外一种在视图内呈现部分视图的方法是使用HTML辅助方法
Html.RenderPartialAsync，该方法定义为返回Task。该方法将部分视图的内容直接写入响
应流。这样，就可以在Razor代码块中使用RenderPartialAsync了。
部分视图的创建方式类似于标准视图。可以访问模型，还可以使用ViewBag属性访问
字典。部分视图会收到字典的一个副本，以接收可以使用的相同字典数据（代码文件
MVCSampleApp/Views/ViewsDemo/ShowEvents.cshtml）：
    @using MVCSampleApp.Models
    @model IEnumerable
      @ViewBag.EventsTitle
      @foreach (var item in Model)
      {
        @item.Day.ToShortDateString()
        @item.Text
      }
运行应用程序，视图、部分视图和布局都将呈现出来，如图41-5所示。
图41-5
2．从控制器中返回部分视图
到目前为止，都是直接加载部分视图，而没有与控制器交互。也可以使用控制器来返
回部分视图。
在下面的代码段中，类ViewsDemoController内定义了两个动作方法。第一个动作方
法UsePartialView2返回一个标准视图，第二个动作方法ShowEvents使用基类方法
PartialView返回一个部分视图。前面已经创建并使用过部分视图ShowEvents，这里再次使
用它。PartialView方法把包含事件列表的模型传递给部分视图（代码文件
MVCSampleApp/Controllers/ViewDemo-Controller.cs）：
    public ActionResult UseAPartialView2() => View();
    public ActionResult ShowEvents()
    {
      ViewBag.EventsTitle = "Live Events";
      return PartialView(_context.Events);
    }
当部分视图在控制器中提供时，可以在客户端代码中直接调用它。下面的代码段使用
了jQuery：事件处理程序链接到按钮的click事件。在单击事件处理程序内，利用jQuery的
load函数向服务器发出了请求/ViewsDemo/ShowEvents的一个GET请求。该请求返回一个
部分视图，部分视图的结果放到了名为events的div元素内（代码文件
MVCSampleApp/Views/ViewsDemo/UseAPartial View2.cshtml）：
    @model MVCSampleApp.Models.EventsAndMenusContext
    @{
      ViewBag.Title = "Use a Partial View";
    }
    Use a Partial View
    this is the main view
    Get Events
41.4.6 使用视图组件
ASP.NET MVC 6提供了部分视图的新替代品：视图组件。视图组件非常类似于部分