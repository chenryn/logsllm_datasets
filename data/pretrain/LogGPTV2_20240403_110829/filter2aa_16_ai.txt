else 部分与内层的 if 匹配，我们通过程序的缩进结构也可以看出来。如果这不符合我们的 意图，则必须使用花括号强制实现正确的匹配关系:
if (n > 0) { if (a > b)
z = a;
}
else
z = b;
歧义性在下面这种情况下尤为有害:
if (n > 0)
for (i = 0; i  0) {
printf("..."); return i;
}
else              /* WRONG */
printf("error •• n is negative\n");
程序的缩进结构明确地表明了设计意图，但编译器无法获得这一信息，它会将 else 部分与内 层的 if 配对。这种错误很难发现，因此我们建议在有 if 语句嵌套的情况下使用花括号。
顺便提醒读者注意，在语句
if (a > b)
z = a; else
z = b;
中，z = a 后有一个分号。这是因为，从语法上讲，跟在 if 后面的应该是一条语句，而像“ z=a;”
这类的表达式语句总是以分号结束的。
3.3 else•if 语旬
在 C 语言中我们会经常用到下列结构:
if (表达式)
语句
else if (表达式)
语句
else if (表达式)
语句
else if (表达式)
语句
else
语句
因此我们在这里单独说明一下。这种 if 语句序列是编写多路判定最常用的方法。其中的各表 达式将被依次求值，一旦某个表达式结果为真，则执行与之相关的语句，并终止整个语句序 列的执行。同样，其中各语句既可以是单条语句，也可以是用花括号括住的复合语句。
最后一个 else 部分用于处理"上述条件均不成立"的情况或默认情况，也就是当上面各 条件都不满足时的情形。有时候并不需要针对默认情况执行显式的操作，这种情况下，可以 把该结构末尾的
else
语句
部分省略掉;该部分也可以用来检查错误，以捕获"不可能"的条件。 这里通过一个折半查找函数说明三路判定程序的用法。该函数用于判定已排序的数组 v
中是否存在某个特定的值 x。数组 v 的元素必须以升序排列。如果 v 中包含 x，则该函数返回
x 在 v 中的位置(介于 0n•1 之间的一个整数);否则，该函数返回•1。
在折半查找时，首先将输入值 x 与数组 v 的中间元素进行比较。如果 x 小于中间元素的 值，则在该数组的前半部分查找;否则，在该数组的后半部分查找。在这两种情况下，下一 步都是将 x 与所选部分的中间元素进行比较。这个过程一直进行下去，直到找到指定的值或 查找范围为空。
/* binsearch:              find x in v[0]  v[mid])
low = mid + 1;
else              /* found match */ return mid;
}
return •1;              /* no match */
}
该函数的基本判定是:在每一步判断 x 小于、大于还是等于中间元素 v[mid]。使用 else•if 结构执行这种判定很自然。
练习 3•1 在上面有关折半查找的例子中，while 循环语句内共执行了两次测试，其实 只要一次就足够(代价是将更多的测试在循环外执行)。重写该函数，使得在循环内部只执行 一次测试。比较两种版本函数的运行时间。
3.4 switch 语旬
switch 语句是一种多路判定语句，它测试表达式是否与一些常量整数值中的某一个值匹 配，并执行相应的分支动作。
switch (表达式) {
case 常量表达式: 语句序列
case 常量表达式: 语句序列
default: 语句序列
每一个分支都由一个或多个整数值常量或常量表达式标记。如果某个分支与表达式的值匹配， 则从该分支开始执行。各分支表达式必须互不相同。如果没有哪一分支能匹配表达式，则执 行标记为 default 的分支。default 分支是可选的。如果没有 default 分支也没有其它分 支与表达式的值匹配，则该 switch 语句不执行任何动作。各分支及 default 分支的排列次 序是任意的。
我们在第 1 章中曾用 if…else if…else 结构编写过一个程序以统计各个数字、空白 符及其它所有字符出现的次数。下面我们用 switch 语句改写该程序如下:
#include 
main()              /* count digits, white space, others */
{
int c, i, nwhite, nother, ndigit[10];
nwhite = nother = 0;
for (i = 0; i 
/* atoi:              convert s to integer; version 2 */ int atoi(char s[])
{
int i, n, sign;
for (i = 0; isspace(s[i]); i++)              /* skip white space */
;
sign = (s[i] == '•') ? •1 : 1;
if (s[i] == '+' || s[i] == '•')              /* skip sign */ i++;
for (n = 0; isdigit(s[i]); i++)
n = 10 * n + (s[i] • '0'); return sign * n;