title:A Study of Burstiness in TCP Flows
author:Srinivas Shakkottai and
Nevil Brownlee and
kc claffy
A Study of Burstiness in TCP Flows
Srinivas Shakkottai1, Nevil Brownlee2, and kc claﬀy3
1 Department of Electrical and Computer Engineering,
University of Illinois at Urbana-Champaign, USA
2 CAIDA, University of California at San-Diego, USA
PI:EMAIL
and Department of Computer Science,
The University of Auckland, New Zealand
3 Cooperative Association for Internet Data Analysis,
PI:EMAIL
University of California at San-Diego, USA
PI:EMAIL
Abstract. We study the burstiness of TCP ﬂows at the packet level. We
aggregate packets into entities we call “ﬂights”. We show, using a simple
model of TCP dynamics, that delayed-acks and window dynamics would
potentially cause ﬂights at two diﬀerent timescales in a TCP ﬂow— the
lower at the order of 5-10 ms (sub-RTT) and the higher at about 10 times
this value (order of an RTT seen by the ﬂow). The model suggests that
ﬂight sizes would be small at the lower timescale, regardless of the net-
work environment. The model also predicts that the network conditions
required for the occurrence of ﬂights at the larger timescale are either
large buﬀers or large available bandwidths — both of which result in
a high bandwidth delay product environment. We argue that these two
conditions indicate that the TCP ﬂow does not operate in a congestion
control region , either because the source of traﬃc is unaware of con-
gestion or because there is so much bandwidth that congestion control
is not required. We verify our model by passive Internet measurement.
Using the trace ﬁles obtained, we collect statistics on ﬂights at the two
timescales in terms of their frequency and size. We also ﬁnd the depen-
dence of the sizes and frequency of ﬂights on the Internet environment in
which they occurred. The results concur strongly with our hypothesis on
the origins of ﬂights, leading us to the conclusion that ﬂights are eﬀective
indicators of excess resource in the Internet.
1
Introduction
TCP is the dominant protocol in today’s Internet. It has been observed [1, 2]
that TCP sometimes sends packets in the form of deterministic aggregations.
The timescale at which this phenomenon occurs is at the RTT level, which
indicates that we should study it at the packet level in individual ﬂows. We
consider the steady state characteristics of TCP at a packet level and investigate
the frequency with which TCP ﬂows have recognizable structure that we can
C. Dovrolis (Ed.): PAM 2005, LNCS 3431, pp. 13–26, 2005.
c(cid:1) Springer-Verlag Berlin Heidelberg 2005
14
S. Shakkottai, N. Brownlee, and k claﬀy
c
T
1
T
1
T
2
T
1
Fig. 1. Illustration of two aggregation levels. Packets may be aggregated into ﬂights
at diﬀerent time scales. At the lower time scale we see ﬁve ﬂights, while at the higher
time scale we see two
label ﬂight behavior. Fig. 1 shows a sequence of thirteen packets and we observe
deterministic behavior of packet aggregates at two time scales.
Deﬁnition 1. A small time scale ﬂight (STF) is a sequence of packets whose
inter-arrival times diﬀer by at most ‘T ’ percent, where ‘T ’ is a ﬁxed threshold
value.
At the smaller time scale we look at inter-arrival times between single packets;
if the inter-arrival times are nearly identical then we say that the packets belong
to a single STF. However, observing packets at such a ﬁne resolution obscures
the temporal relations that might exist between aggregations of packets. In other
words, there may be deterministic behavior between the STFs themselves. In the
ﬁgure, there are two groups of STFs, within which STFs have nearly identical
inter-arrival times.
Deﬁnition 2. A large time scale ﬂight (LTF) is a sequence of aggregations of
packets whose inter-arrival times diﬀer by at most ‘T ’ percent, where ‘T ’ is a
ﬁxed threshold value.
By our deﬁnition, aggregations of STFs with nearly identical inter-arrival times
are deﬁned to be LTFs. We recognize that the terms “small” and “large” are
relative. Both terms are with respect to the RTT seen by a ﬂow. The inter-
arrival times between packets of an STF are on the order of 5-10 milliseconds
(sub-RTT), while the inter-arrival times between STFs are on the order of 40-
1000 milliseconds (order of RTT seen by the ﬂow).
Flight behavior of TCP has been a matter of considerable debate. In fact
there is not even a standard terminology for the phenomenon; other names for
ﬂight-like phenomena are bursts [3] and rounds [4], where “bursts” usually de-
scribe phenomena similar to our STFs and “rounds” usually describe phenomena
similar to our LTFs. While modeling TCP ﬂows some authors simply assume the
ﬂight nature of TCP [4, 5]. As far as we know, there are no published statistics on
ﬂight behavior, and no studies investigating the correlation of ﬂight occurrence
with the Internet environment in which TCP operates. Also, there do not seem
to be any algorithms for identifying the structure of TCP ﬂows — the method
used in the only other work we are aware of in the area [6], is dependent on
visually classifying ﬂows.
A Study of Burstiness in TCP Flows
15
TCP Model
1.1
Two facets of TCP design could potentially lead to ﬂights, each one at a diﬀerent
time scale.
1. Since many TCP implementations [1, 2] implement delayed-acks, a host may
send multiple packets for every ack it receives. Implementations of delayed-
acking vary in terms of the maximum delay (200-500 ms). Many implemen-
tations also require that there be a maximum of one outstanding un-acked
packet, nominally leading to acknowledgment of alternate packets. Transmis-
sion of such packets back to back at source could result in the observation of
STFs at the measurement point if the network delays are relatively constant.
2. TCP follows a window-based congestion control mechanism with self-clocking,
i.e., the window size changes and packets are transmitted only when acknowl-
edgments are received. If acknowledgments are received with relatively con-
stant inter-arrival times, it would give rise to STFs being sent with similar
inter-arrival times, i.e., LTFs.
Another phenomenon that may occur is that of constant-rate ﬂows.
Deﬁnition 3. A constant-rate ﬂow (CRF) is a large TCP ﬂow in which aggre-
gations of two or three packets are observed with nearly identical spacing between
the aggregations.
From the deﬁnition of LTFs, it is clear that CRFs are nothing but large LTFs,
where we say that a ﬂow is large if it has over 30 packets. Other names for such
ﬂows are “rate-limited ﬂows” and “self-clocked ﬂows” [6].
From the above discussion, the origin of of STFs lies in the fact that delayed-
acks acknowledge a small sequence of packets (often alternate packets) resulting
in the back-to-back transmission of a small number of packets at the source. It
seems clear, therefore, that STFs would naturally be of small size regardless of
the network environment that the TCP ﬂow in which they occur sees.
However, the question arises: what network environment would be conducive
to LTF behavior? We conjecture that LTFs of large size can exist only in high
bandwidth-delay product (BDP) regimes. The reason is that as long as no drops
occur, TCP increases its window size by some value depending on whether it is in
slow-start or congestion avoidance. Only if the network is able to absorb all the
packets in the congestion window of a TCP ﬂow will acks be received at deter-
ministic times at the source, leading to transmission of packets at deterministic
times. The absorption may take place in two ways:
1. Suppose that the buﬀer sizes are large in the path of a ﬂow and bandwidth is
limited. Then, regardless of congestion window size, the actual throughput
is bandwidth constrained. The large buﬀer size in eﬀect absorbs the packets
and delays them so that the source does not see any drops. TCP is unable
to estimate the available bandwidth as it is blinded by the large buﬀer.
Fig. 2 depicts the case where there is a large buﬀer between the source and
destination. We have assumed, for illustration purposes, that the delay is
large enough to ensure that every packet is acked inspite of the delayed-ack
16
S. Shakkottai, N. Brownlee, and k claﬀy
c
Source
Buffer
Output
Dest
(acks)
Fig. 2. Illustration of how large buﬀers in a bandwidth constrained path of a TCP
ﬂow lead to LTFs. The congestion window at source gradually increases, but since the
buﬀer absorbs excess packets, the source does not know of the bandwidth constraint
Source
Dest
(acks)
Fig. 3. Illustration of how a large bandwidth and medium delay results in ﬂights in
the slow-start phase of TCP. Large bandwidth implies that the source can increase
the congestion window to a large size without drops occurring. In this case ﬂights are
indicative that congestion control is irrelevant since the network has a large available
bandwidth
implementation. The source is in congestion avoidance phase and reception
of an ack could result in either the source transmitting one packet or an
increase in window size with the source transmitting two packets. The source
never loses a packet and assumes that excess bandwidth is available. So the
window size continuously increases. TCP is thus blind to congestion in this
scenario.
2. Another possible scenario is when bandwidth is high and delay is moderate.
In such a case the link absorbs the packets, and large windows of packet
aggregations proceed through the network. There is no congestion in the
network and TCP congestion control is not required. This scenario is illus-
trated in Fig. 3 in the slow start phase. We could draw a similar diagram
for the congestion-avoidance phase.
We summarize our main hypotheses and the conjectures that we make in
Table 1.
A Study of Burstiness in TCP Flows
17
Table 1. Summary of our main hypothesis and the conjectures based on them
Hypothesis 1 STFs arise due to the implementation of delayed-acks.
Conjecture 1 The size of STFs are on the order of two or three packets
Conjecture 2 The frequency of STFs is independent of the network environment.
Hypothesis 2 LTFs arise due to window dynamics of TCP.
Conjecture 3 LTFs could be of large size (potentially several hundred packets)
Conjecture 4 The frequency of LTFs increases with increasing BDP.
Flights as Indicators of Excess Resource
1.2
Why should we study ﬂights? What are they good for? Let us consider the
question in detail. Two assumptions that network designers traditionally make
are:
1. Link capacities are low and many users contend for their use. The expected
load is close to the capacity of the links. Hence the tremendous volume of
research on the “single bottleneck scenario”.
2. To handle demands close to the capacity, buﬀer sizes should be of the order
of the bandwidth-delay product of the link.
Usually such design gives rise to recommendations for large buﬀer sizes, which in
turn has given rise to high bandwidth infrastructure with huge buﬀer capacities.
If the usage assumptions were correct, neither of our two scenarios for ﬂight
existence would exist, congestion control would be relevant, and the resource
on the Internet would be utilized at high eﬃciency. On the other hand, the
presence of ﬂights is a symptom that we have over designed the Internet —
there are enormous resources, in terms of buﬀer sizes or link capacities, being
shared by remarkably few users. In other words, ﬂights are a symptom that
TCP congestion control is having no eﬀect, either due to hiding of congestion
by buﬀers, or because there is so much bandwidth that the packets sail through
the network. Consistent with the above is the fact that observations of packets
on 10 Mb/s Ethernet (for example those in the packet sequence plots in [1, 2])
show clear ﬂight behavior.
1.3 Main Results
We use three diﬀerent packet traces, all from OC-48 (≈ 2.5Gb/s) links, and call
them BB1-2002, BB2-2003 and Abilene-2002 [7]. Together these packet traces
represent a high diversity of IP addresses, applications, geographic locations
and access types. For instance, the BB1-2002 trace shows about 30% of bytes
destined for locations in Asia, with ﬂows sourced from about 15% of all global
autonomous systems (AS). The BB2-2003 has even higher diversity with ﬂows
18
S. Shakkottai, N. Brownlee, and k claﬀy
c
from about 24% of all global ASs. The Abilene-2002 trace has a large fraction
of non-web traﬃc. Since all three traces give nearly identical results, we provide
graphs from only one trace: BB1-2002.
We summarize our main results as follows:
1. We propose a simple threshold-based algorithm, which robustly identiﬁes
the diﬀerent time scale aggregation levels.
2. We verify our hypothesis of two distinct phenomena — delayed acks and
window dynamics — giving rise to two classes of packet behavior by studying
the statistics of each aggregation level.
3. We show how the algorithm naturally leads to a method of identifying CRFs
as large LTFs.
4. We further conﬁrm Hypothesis 1 — delayed acks causing STFs — by veri-
fying Conjectures 1 and 2 — that STF sizes are on the order of two to three
packets and are independent of network conditions such as round trip time
(RTT), bandwidth and BDP. The observation on the size of STFs illustrates
that the source transmits a small number (usually 2 or 3) of back to back
packets resulting in an STF at the point of measurement.
5. We verify the Conjecture 4 — high BDP regimes permitting LTFs — by
studying the variation in LTF lengths as a function of BDP and showing
that LTFs that have a much larger number of packets occur at higher BDPs.
6. Finally, using the statistics on LTFs of large size, we verify Conjecture 3 —
LTFs can be of large size — and conclude that currently about 12-15% of
ﬂows over thirty packets in length in the traces we study are not responding
to congestion control, either because the they are unaware of congestion or
because there is no congestion on their paths.
2 Algorithms
In this section we describe the algorithms we use for identiﬁcation of ﬂights.
We ﬁrst consider the case of identifying STFs. Consider a sequence of packets
p1, p2, p3, with inter-arrival times (IATs) δ1 and δ2 between the ﬁrst and second
|.
pairs of packets, respectively. Then we consider the ratio g(δ1, δ2) = | δ2−δ1
We decide whether a packet belongs to a particular STF depending on whether
δ1
e
m
T
i
l
a
v
i
r
r
A
r
e
t
n
I
1
2
3
Fig. 4. Illustration of how we ﬁnd STFs. We group packets 1 − 3 together as a 2-inter-
arrival time unit ﬂight, and so on. The large gap between packets 3 and 4 appears as
a singleton
4
5