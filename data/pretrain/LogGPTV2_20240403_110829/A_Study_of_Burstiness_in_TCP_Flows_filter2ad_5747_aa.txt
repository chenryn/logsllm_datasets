# Title: A Study of Burstiness in TCP Flows

## Authors:
- Srinivas Shakkottai<sup>1</sup>
- Nevil Brownlee<sup>2</sup>
- kc claffy<sup>3</sup>

### Affiliations:
1. Department of Electrical and Computer Engineering, University of Illinois at Urbana-Champaign, USA
2. CAIDA, University of California at San Diego, USA; and Department of Computer Science, The University of Auckland, New Zealand
3. Cooperative Association for Internet Data Analysis (CAIDA), University of California at San Diego, USA

---

## Abstract
This study examines the burstiness of TCP flows at the packet level by aggregating packets into entities termed "flights." Using a simple model of TCP dynamics, we demonstrate that delayed-acks and window dynamics can cause flights at two distinct timescales within a TCP flow: one at the order of 5-10 ms (sub-RTT) and another at about 10 times this value (order of an RTT seen by the flow). Our model suggests that flight sizes are small at the lower timescale, regardless of the network environment. Additionally, it predicts that flights at the larger timescale occur under conditions of large buffers or high available bandwidths, both of which result in a high bandwidth-delay product (BDP) environment. These conditions indicate that the TCP flow is not operating in a congestion control region, either due to the source being unaware of congestion or because the available bandwidth is so high that congestion control is unnecessary. We validate our model through passive Internet measurements, collecting statistics on flights at both timescales in terms of their frequency and size. The results strongly support our hypothesis, suggesting that flights are effective indicators of excess resources in the Internet.

---

## 1. Introduction
TCP is the dominant protocol in today's Internet. It has been observed [1, 2] that TCP sometimes sends packets in deterministic aggregations. This phenomenon occurs at the Round-Trip Time (RTT) level, indicating that it should be studied at the packet level in individual flows. We investigate the steady-state characteristics of TCP at the packet level and the frequency with which TCP flows exhibit recognizable structures, which we term "flight behavior."

**Figure 1.** Illustration of two aggregation levels. Packets may be aggregated into flights at different time scales. At the lower time scale, we see five flights, while at the higher time scale, we see two.

**Definition 1.** A small time scale flight (STF) is a sequence of packets whose inter-arrival times differ by at most 'T' percent, where 'T' is a fixed threshold value.

At the smaller time scale, we look at inter-arrival times between single packets. If these inter-arrival times are nearly identical, the packets belong to a single STF. However, observing packets at such a fine resolution can obscure temporal relations between aggregations of packets. There may be deterministic behavior between the STFs themselves. In the figure, there are two groups of STFs, within which STFs have nearly identical inter-arrival times.

**Definition 2.** A large time scale flight (LTF) is a sequence of aggregations of packets whose inter-arrival times differ by at most 'T' percent, where 'T' is a fixed threshold value.

By our definition, aggregations of STFs with nearly identical inter-arrival times are defined as LTFs. The terms "small" and "large" are relative to the RTT seen by a flow. The inter-arrival times between packets of an STF are on the order of 5-10 milliseconds (sub-RTT), while the inter-arrival times between STFs are on the order of 40-1000 milliseconds (order of RTT seen by the flow).

Flight behavior in TCP has been a subject of considerable debate. There is no standard terminology for this phenomenon; other names include "bursts" [3] and "rounds" [4], where "bursts" usually describe phenomena similar to our STFs and "rounds" usually describe phenomena similar to our LTFs. While some authors assume the flight nature of TCP [4, 5], there are no published statistics on flight behavior, and no studies investigating the correlation of flight occurrence with the Internet environment in which TCP operates. Additionally, there are no known algorithms for identifying the structure of TCP flows, except for a method dependent on visual classification [6].

---

## 2. TCP Model
Two aspects of TCP design could potentially lead to flights, each at a different time scale:

1. **Delayed-Acks:** Many TCP implementations [1, 2] implement delayed-acks, allowing a host to send multiple packets for every ack it receives. The maximum delay varies (200-500 ms). Many implementations also require a maximum of one outstanding un-acked packet, leading to acknowledgment of alternate packets. Transmission of such packets back-to-back at the source could result in the observation of STFs at the measurement point if network delays are relatively constant.

2. **Window-Based Congestion Control:** TCP uses a window-based congestion control mechanism with self-clocking. The window size changes, and packets are transmitted only when acknowledgments are received. If acknowledgments are received with relatively constant inter-arrival times, it would give rise to STFs being sent with similar inter-arrival times, i.e., LTFs.

Another phenomenon that may occur is that of constant-rate flows (CRFs):

**Definition 3.** A constant-rate flow (CRF) is a large TCP flow in which aggregations of two or three packets are observed with nearly identical spacing between the aggregations.

From the definition of LTFs, it is clear that CRFs are large LTFs, where a flow is considered large if it has over 30 packets. Other names for such flows include "rate-limited flows" and "self-clocked flows" [6].

The origin of STFs lies in the fact that delayed-acks acknowledge a small sequence of packets (often alternate packets), resulting in the back-to-back transmission of a small number of packets at the source. Therefore, STFs would naturally be of small size, regardless of the network environment.

However, what network environment would be conducive to LTF behavior? We conjecture that LTFs of large size can exist only in high BDP regimes. As long as no drops occur, TCP increases its window size by some value depending on whether it is in slow-start or congestion avoidance. Only if the network can absorb all the packets in the congestion window will acks be received at deterministic times at the source, leading to the transmission of packets at deterministic times. This absorption can occur in two ways:

1. **Large Buffers and Limited Bandwidth:** If buffer sizes are large in the path of a flow and bandwidth is limited, the actual throughput is bandwidth-constrained. Large buffer sizes effectively absorb the packets and delay them, so the source does not see any drops. TCP is unable to estimate the available bandwidth as it is blinded by the large buffer. Figure 2 illustrates this scenario.

   **Figure 2.** Illustration of how large buffers in a bandwidth-constrained path of a TCP flow lead to LTFs. The congestion window at the source gradually increases, but since the buffer absorbs excess packets, the source does not know of the bandwidth constraint.

2. **High Bandwidth and Moderate Delay:** Another possible scenario is when bandwidth is high and delay is moderate. In this case, the link absorbs the packets, and large windows of packet aggregations proceed through the network without congestion. TCP congestion control is not required. This scenario is illustrated in Figure 3.

   **Figure 3.** Illustration of how a large bandwidth and medium delay result in flights in the slow-start phase of TCP. Large bandwidth implies that the source can increase the congestion window to a large size without drops occurring. In this case, flights indicate that congestion control is irrelevant due to the large available bandwidth.

We summarize our main hypotheses and conjectures in Table 1.

**Table 1.** Summary of our main hypotheses and the conjectures based on them.

| Hypothesis | Conjecture |
|------------|------------|
| **Hypothesis 1: STFs arise due to the implementation of delayed-acks.** | **Conjecture 1: The size of STFs is on the order of two or three packets.** |
| | **Conjecture 2: The frequency of STFs is independent of the network environment.** |
| **Hypothesis 2: LTFs arise due to window dynamics of TCP.** | **Conjecture 3: LTFs could be of large size (potentially several hundred packets).** |
| | **Conjecture 4: The frequency of LTFs increases with increasing BDP.** |

---

## 3. Flights as Indicators of Excess Resource
Why study flights? What are they good for? Let us consider this question in detail. Two assumptions that network designers traditionally make are:

1. **Link Capacities and Contention:** Link capacities are low, and many users contend for their use. The expected load is close to the capacity of the links, leading to extensive research on the "single bottleneck scenario."
2. **Buffer Sizes:** To handle demands close to the capacity, buffer sizes should be of the order of the BDP of the link.

Such design often recommends large buffer sizes, which has led to high-bandwidth infrastructure with huge buffer capacities. If the usage assumptions were correct, neither of our scenarios for flight existence would exist, and congestion control would be relevant, with resources utilized efficiently. However, the presence of flights indicates that we have over-designed the Internet—there are enormous resources, in terms of buffer sizes or link capacities, being shared by remarkably few users. In other words, flights indicate that TCP congestion control is having no effect, either due to hiding of congestion by buffers or because there is so much bandwidth that packets sail through the network. Observations of packets on 10 Mb/s Ethernet (e.g., in [1, 2]) show clear flight behavior.

### 3.1 Main Results
We use three different packet traces, all from OC-48 (≈ 2.5 Gb/s) links, and call them BB1-2002, BB2-2003, and Abilene-2002 [7]. These traces represent a high diversity of IP addresses, applications, geographic locations, and access types. For example, the BB1-2002 trace shows about 30% of bytes destined for locations in Asia, with flows sourced from about 15% of all global autonomous systems (AS). The BB2-2003 trace has even higher diversity, with flows from about 24% of all global ASs. The Abilene-2002 trace has a large fraction of non-web traffic. Since all three traces give nearly identical results, we provide graphs from only one trace: BB1-2002.

We summarize our main results as follows:

1. **Algorithm Proposal:** We propose a simple threshold-based algorithm that robustly identifies the different time-scale aggregation levels.
2. **Verification of Hypotheses:** We verify our hypothesis of two distinct phenomena—delayed acks and window dynamics—giving rise to two classes of packet behavior by studying the statistics of each aggregation level.
3. **Identification of CRFs:** We show how the algorithm naturally leads to a method of identifying CRFs as large LTFs.
4. **Verification of Conjectures:** We confirm Hypothesis 1—delayed acks causing STFs—by verifying Conjectures 1 and 2—that STF sizes are on the order of two to three packets and are independent of network conditions such as RTT, bandwidth, and BDP. The observation on the size of STFs illustrates that the source transmits a small number (usually 2 or 3) of back-to-back packets, resulting in an STF at the point of measurement.
5. **LTF Verification:** We verify Conjecture 4—high BDP regimes permitting LTFs—by studying the variation in LTF lengths as a function of BDP and showing that LTFs with a much larger number of packets occur at higher BDPs.
6. **Conclusion on Large LTFs:** Finally, using the statistics on LTFs of large size, we verify Conjecture 3—LTFs can be of large size—and conclude that currently about 12-15% of flows over thirty packets in length in the traces we study are not responding to congestion control, either because they are unaware of congestion or because there is no congestion on their paths.

---

## 4. Algorithms
In this section, we describe the algorithms used for the identification of flights. We first consider the case of identifying STFs. Consider a sequence of packets \( p_1, p_2, p_3 \) with inter-arrival times (IATs) \( \delta_1 \) and \( \delta_2 \) between the first and second pairs of packets, respectively. We then consider the ratio \( g(\delta_1, \delta_2) = \left| \frac{\delta_2 - \delta_1}{\delta_1} \right| \). We decide whether a packet belongs to a particular STF depending on whether this ratio is below a certain threshold.

**Figure 4.** Illustration of how we find STFs. We group packets 1-3 together as a 2-inter-arrival time unit flight, and so on. The large gap between packets 3 and 4 appears as a singleton.

---

This revised version aims to improve clarity, coherence, and professionalism in the presentation of the study.