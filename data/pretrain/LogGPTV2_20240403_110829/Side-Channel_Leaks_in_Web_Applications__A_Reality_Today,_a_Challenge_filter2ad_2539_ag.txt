communicate  to  the  protocol  layer  about  the  policies. 
Unfortunately such a collaborative mitigation infrastructure 
is  unavailable  on  today’s  browsers  and  web  servers.  In 
Appendix  C,  we  present  a  preliminary  design  of  the 
infrastructure  on  IIS  and  Firefox  that  allows  the  web 
developers to apply well-defined padding policies. 
C.  Envisioning the Future Development Process 
Although  building  the  infrastructure  for  side-channel 
information control is a necessary step toward the solution 
of  the  problem,  a  more  challenging  task  is  to  identify 
vulnerabilities and define right policies during the program 
development  process.  We  envision  that  such  a  process 
includes at least the steps in Figure 15.  
Specify 
privacy 
goals
Track information 
flows, including 
local and web flows
Identify web 
flows related to 
privacy goals
Add policies to 
manipulate packets,  
e.g., rounding, 
random-padding.
Have 
vulnerabilities?
N
Y
Change the designs 
of application 
features
Y
Solvable by policies 
of manipulating 
individual packets?
Figure 15: A development process to address side-channel threat  
N
An application should contain clearly-specified privacy 
goals; static/dynamic information flow analysis needs to be 
applied  to  track  the  propagation  of  sensitive  information 
within an application and identify violations of the goals; a 
traffic  analysis  tool  is  needed  to  ensure  that  sensitive  web 
flows cannot be identified. Once a vulnerability is found, the 
developer  needs  to  investigate  whether  it  can  be  fixed  by 
enforcing certain policies, such as padding or adding noise 
packets. If so, the right policies should be specified within 
the  code  of  the  application.  Otherwise,  the  design  of  the 
application  needs  to  be  adjusted,  e.g.,  merging  program 
states, or re-allocating server and client side program logic, 
etc.  OnlineTaxA is such an example. 
Obviously, accomplishing all these tasks manually will 
incur too much cost.  Therefore, we believe that automatic 
tools need to be built to assist this development process. 
VI.  CONCLUSIONS 
A web application is split between the browser and the 
server,  so  a  subset  of  its  internal  state-transitions  and  data 
exchanges  inevitably  go  through  the  network.  Despite 
encryption,  some  fundamental  characteristics  of  web 
stateful 
applications, 
communications,  and  significant  traffic  distinctions,  make 
the side-channel leak a realistic and serious privacy problem. 
As  examples,  we  demonstrate  that  health  records,  tax 
information, investment secrets and search queries are being 
leaked out from many top-of-the-line web applications.  
entropy 
namely 
input, 
We  also  studied  the  challenges  in  mitigating  such  a 
problem,  and  show  that  effective  and  efficient  mitigations 
low 
205
have  to  be  application-specific:  developers  will  need  to 
identify the vulnerabilities first, and then specify mitigation 
policies  accordingly.  This  effort  requires  analysis  of  web 
application semantics, information flow and network traffic 
patterns.  Public  domain  knowledge  also  needs  to  be 
examined  in  order  to  understand  the  real  power  of  the 
attacker and the effectiveness of the defense.  
 The web industry has decisively moved into the era of 
software-as-a-service.  Given  this  unquestionable  context, 
we  envision  that  research  on  disciplined  web  application 
development  methodologies  for  controlling  side-channel 
leaks is of great importance to protection of online privacy. 
ACKNOWLEDGEMENT 
We  thank  our  colleagues  at  Microsoft  Research:  Cormac 
Herley  offered  his  insights  about  the  GIF  format,  and 
suggested  the  possibility  of  recovering  a  pie  chart  through 
analyzing  financial  market  evolution.  Ranveer  Chandra 
offered  us  guidance  on  WiFi  sniffing.  Emre  Kiciman 
provided highly valuable advices on web server architecture 
issues, and commented on an earlier version of this paper. 
Johnson  Apacible  explained  IIS  implementation  details. 
Rob Oikawa, Jim Oker and Yi-Min Wang spent significant 
efforts  helping  resolve  the  issues  related  to publishing  this 
research. We also thank anonymous reviewers for valuable 
comments.  Authors  with  IU  were  supported  in  part  by  the 
NSF Grant CNS-0716292.  Rui Wang was also supported in 
part by the Microsoft Internship program. 
REFERENCES 
[1]  Balobardes B, Demarest S. Asking sensitive information: an example 
with income. Social and Preventive Medicine. Volume 48, Number 1 
/ March, 2003. Pages 70-72. 
[2]  D. Brumley and D. Boneh. "Remote timing attacks are practical," the 
12th Usenix Security Symposium, 2003   
[3]  Andrea  Bittau,  Mark  Handley,  Joshua  Lackey,  "The  Final  Nail  in 
WEP's Coffin," the 2006 IEEE Symposium on Security and Privacy, 
Oakland, CA 
[4]  George  Bissias,  Marc  Liberatore,  David  Jensen,  and  Brian  Neil 
Levine.  "Privacy  Vulnerabilities  in  Encrypted  HTTP  Streams." 
Privacy Enhancing Technologies Workshop (PET), May 2005. 
[5]  BusinessWeek. 
Privacy 
http://www.cdt.org/privacy/survey/findings/ 
Survey 
Results. 
[6]  Heyning Cheng, Heyning Cheng, and Ron Avnur. Traffic analysis of 
ssl encrypted web browsing, 1998. 
[7]  George  Danezis:  Traffic  Analysis  of  the  HTTP  Protocol  over  TLS. 
http://research.microsoft.com/en-us/um/people/gdane/papers 
/TLSanon.pdf 
[8]  Catalim  Dima,  Contantin  Enea, 
report  TR-LACL-2006-01,  LACL 
and  Radu  Gramatovici. 
Nondeterministic  nointerference  and  deducible  information  flow. 
Technical 
(Laboratory  of 
Algorithms,  Complexity  and  Logic),  University  of  Paris-Est  (Paris 
12), 2006. http://lacl.univ-paris12.fr/Rapports/TR/TR-2006-01.pdf 
IEEE 802.11-2007. Part 11: Wireless LAN Medium Access Control 
(MAC)  and  Physical  Layer  (PHY)  Specifications.  Pages  180-181, 
http://standards.ieee.org/getieee802/download /802.11-2007.pdf 
[9] 
[10]  JFreeChart. http://www.jfree.org/jfreechart/ 
[11]  Renaissance 
Veil, 
Lifts 
Its 
But 
http://www.hfalert.com/headlines.php?hid=44928 
Just 
a 
Crack. 
[12]  T.  Ristenpart,  E.  Tromer,  H.  Shacham,  and  S.  Savage.  “Hey,  You, 
Get Off of My Cloud! Exploring Information Leakage in Third-Party 
Compute Clouds.” ACM CCS 2009. 
CPE," 
[13]  T.  S.  Saponas,  J.  Lester,  C.  Hartung,  S.  Agarwal,  and  T.  Kohno. 
"Devices That Tell On You: Privacy Trends in Consumer Ubiquitous 
Computing," Usenix Security, 2007. 
[14]  SmartAnt  Telecom  Co.,  Ltd.  "Adaptor  USB  for  Wi-Fi  802.11bg 
http://www.globalspec.com/FeaturedProducts 
HighGain 
/Detail/SmartAntTelecom/Adaptor_USB_for_Wi-Fi_80211bg_High 
Gain _CPE/97318/0 
[15]  Dawn Song, David Wagner, and Xuqing Tian. "Timing Analysis of 
Keystrokes  and  SSH  Timing  Attacks,"  10th  USENIX  Security 
Symposium, 2001 
[16]  Qixiang Sun, Daniel R. Simon, Yi-Min Wang, Wilf Russell, Venkata 
Padmanabhan,  and  Lili  Qiu,  "Statistical  Identification  of  Encrypted 
Web Browsing Traffic," in IEEE Sym. on Security & Privacy 2002. 
[17]  Tor: anonymity online. http://www.torproject.org/ 
[18]  Martin  Vuagnoux 
Pasini. 
Compromising 
Electromagnetic  Emanations  of  Wired  and  Wireless  Keyboards. 
USENIX Security Symposium, 2009. 
[19]  David Wagner and Bruce Schneier. Analysis of the ssl 3.0 protocol. 
The Second UNIX Workshop on Electronic Commerce, pages 29–40. 
USENIX Association, 1996. 
Sylvain 
and 
[20]  Wikipedia. 
Graphics 
Interchange 
Format. 
http://en.wikipedia.org/wiki/Graphics_Interchange_Format 
[21]  Sources  about  Steve  Jobs’  health.  a)  Wikipedia.  Steve  Jobs. 
http://en.wikipedia.org/wiki/Steve_Jobs;  b)  Steve  Jobs'  Health, 
Apple's  Stock.  http://www.shortnews.com/start.cfm?id=76013;  c) 
Once  Again,  Apple  Not  Forthright  About  Steve  Jobs'  Health. 
http://www.businessinsider.com/2009/1/so-apple-lied-about-steve-
jobs-health--again 
[22]  Wired  News.  "Declassified  NSA  Document  Reveals  the  Secret 
History  of  TEMPEST,"  http://www.wired.com/threatlevel/2008/04/ 
nsa-releases-se 
[23]  Charles  Wright,  Lucas  Ballard,  Scott  Coulls,  Fabian  Monrose,  and 
Gerald  Masson.  "Spot  me  if  you  can:  recovering  spoken phrases  in 
encrypted VoIP conversations," in IEEE Symposium on Security and 
Privacy, May, 2008. 
[24]  Kehuan  Zhang  and  XiaoFeng  Wang.  Peeping  Tom 
the 
Neighborhood:  Keystroke  Eavesdropping  on  Multi-User  Systems. 
USENIX Security Symposium,2009 
in 
APPENDIX 
Ajax livegrid 
Ajax Event 
handling 
AddEvent Manager
Input component 
with Ajax 
Interact with 
MySQL 
Partial page update 
A: LOW ENTROPY INPUT FEATURES IN POPULAR SCRIPT LIBRARIES 
Low entropy 
input feature 
Library  
Name 
Library 
Name 
Script.aculo.us 
Dhtmlgoodies 
OpenLaszlo 
DojoCompus 
Low entropy 
input feature 
Autocompleter 
Ajax tooltip 
Remote Database 
Dynamic data 
retrieving 
Ajax sortable 
tables 
  Rico 
jQuery 
  TwinHelix 
  Echo 
jsLinb 
Mochikit 
Crosser-Browser  Tooltips 
Yahoo YUI 
Autocomplete 
  Rolodex 
  Adobe Spry  Auto suggest 
B: CIPHERS USED BY IMPORTANT HTTPS WEBSITES 
Website(s) 
PayPal,  WellsFargo  Bank,  Citi  Bank,  Bank  of  America, 
American  Express,  Scottrade,  E*Trade,  Google  Adwords, 
Microsoft  AdCenter,  eSurance,  Comcast,  AT&T  phone 
account  service,  Provident  Mortgage,  GeoTrust  CA, 
OnlineInvestA, FinancialDataA, OnlineHealthA, OnlineTaxA 
Verisign CA 
GEICO insurance  
RC4 (stream) and AES128 (128bit block) 
Triple-DES (64bit block) 
Cipher(s) 
RC4 
stream 
cipher) 
(a 
C: A PRELIMINARY SIDE-CHANNEL-CONTROL INFRASTRUCTURE  
Since  side-channel  control  is  a  cross-layer  task  as  discussed 
earlier,  the  very  first  step  of  such  an  effort,  naturally,  is  to  urge 
vendors of web servers and browsers to provide an infrastructure 
so  that  well-defined  policies  can  be  specified  by  web  application 
developers  and  enforced  on  the  protocol  layer  by  browsers  and 
web servers.  We implemented a prototype for packet-padding as 
an IIS extension and a Firefox add-on, shown in Figure 16.   
browser
HTML pages
Link
…
XHR.open("GET“,"a.aspx?policy=[Policy]");
IIS
web server
ASP.NET pages
AppendHeader(‘policy’, ‘[Policy]’
….
ASP.NET engine
Padder module 
as a Firefox 
add-on
GET/POST 
requests
HTTP(S) 
handler
HTTP(S) 
handler
Padder module 
as an IIS 
extension
Figure 16: Padder prototypes on browser and web server 
in 
Our  prototype  works  on  the  web  applications  written  in 
ASP.NET. A padding policy for a response is specified by calling 
the 
AppendHeader(‘policy’, 
corresponding    ASP.NET  page,  where  [Policy]  is  the  policy 
definition  to  be  discussed  later.    Such  a  policy  is  enforced  by  a 
padder  module  on  the  protocol  layer,  which  intercepts  the  IIS 
workflow for generating the response and pads it according to the 
policy  header.  The  interceptions  happen  before  and  after  the 
HTTP compression.  
‘[Policy]’) 
the  sources 
For an application’s browser-side component, HTTP requests 
come  from 
like  a  hyperlink,  a  form  or  an 
XmlHttpRequest (a.k.a. XHR) shown in Figure 16. Such a request 
is  either  GET  or  POST.  For  GET,  the  padding  policy  is  inserted 
into the argument list in the URL, right after “?”. For POST, the 
policy is inserted as a hidden input field. The browser-side padder 
is a Firefox add-on called by the HTTP handler when processing 
GET and POST requests. 
Policy specification and enforcement. The server-side policies 
are specified by the following grammar. For example, a policy can 
be  “random-padding;  128;  before-compression;  header”.  The 
policies  on  the  browser-side  are  similar,  except  that  there  is  no 
When-clause, as the HTTP protocol does not support compressions 
for requests.   
Policy ::= Strategy ; Delta ; When ; Where 
Strategy ::= rounding | random-padding 
Delta ::= integer 
When ::= before-compression | after-compression 
Where ::= header | body 
Enforcement  of  such  policies  is straightforward.  The  padder 
module retrieves the policy from a packet passed from the HTTP 
handler,  calculates  the  packet  size,  applies  rounding  or  random-
padding to the packet, and then gives it back to the HTTP handler.  
Functional  tests.  We  evaluated  the  functionality  of  our 
prototype using a sample web application with an auto-suggestion 
feature  implemented  by  XmlHttpRequest  (to  test  AJAX-style 
requests),  a  selection  list  for  the  user  to  click  (to  test  POST 
requests)  and  a  search  functionality  similar  to  find-a-doctor  in 
OnlineHealthA (to test server responses).  We analyzed the network 
traffic and confirmed that the policies specified in the application 
were correctly enforced. 
206