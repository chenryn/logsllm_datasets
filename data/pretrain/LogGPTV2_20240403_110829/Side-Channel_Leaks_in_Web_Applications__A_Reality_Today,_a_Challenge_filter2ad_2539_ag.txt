### Communicating Policies to the Protocol Layer

To effectively mitigate side-channel attacks, it is crucial to communicate policies to the protocol layer. Unfortunately, such a collaborative mitigation infrastructure is currently unavailable in today's browsers and web servers. In Appendix C, we present a preliminary design of this infrastructure for IIS and Firefox, which allows web developers to apply well-defined padding policies.

### Envisioning the Future Development Process

While building the infrastructure for side-channel information control is a necessary step, the more challenging task is to identify vulnerabilities and define appropriate policies during the program development process. We envision that such a process would include at least the steps outlined in Figure 15.

**Figure 15: A Development Process to Address Side-Channel Threats**

1. **Specify Privacy Goals**
2. **Track Information Flows (Local and Web)**
3. **Identify Web Flows Related to Privacy Goals**
4. **Add Policies to Manipulate Packets (e.g., Rounding, Random-Padding)**
5. **Check for Vulnerabilities**
   - If no vulnerabilities are found, the process is complete.
   - If vulnerabilities are found, determine if they can be solved by manipulating individual packets.
     - If yes, specify the policies within the application code.
     - If no, adjust the application design (e.g., merging program states, reallocating server and client-side logic).

An application should clearly specify privacy goals. Static and dynamic information flow analysis should be applied to track the propagation of sensitive information and identify any violations of these goals. A traffic analysis tool is also needed to ensure that sensitive web flows cannot be identified. Once a vulnerability is detected, the developer must investigate whether it can be fixed by enforcing certain policies, such as padding or adding noise packets. If so, the appropriate policies should be specified in the application code. Otherwise, the application design needs to be adjusted, for example, by merging program states or re-allocating server and client-side logic. OnlineTaxA is an example of such a scenario.

Clearly, performing all these tasks manually would be too costly. Therefore, we believe that automatic tools need to be developed to assist in this development process.

### Conclusions

Web applications are split between the browser and the server, making a subset of their internal state transitions and data exchanges inevitably go through the network. Despite encryption, some fundamental characteristics of stateful web applications, communications, and significant traffic distinctions make side-channel leaks a realistic and serious privacy problem. For instance, we demonstrate that health records, tax information, investment secrets, and search queries are being leaked from many top-tier web applications.

We also studied the challenges in mitigating such problems and showed that effective and efficient mitigations must be application-specific. Developers need to identify vulnerabilities first and then specify mitigation policies accordingly. This effort requires analyzing web application semantics, information flow, and network traffic patterns. Public domain knowledge must also be examined to understand the real power of the attacker and the effectiveness of the defense.

The web industry has decisively moved into the era of software-as-a-service. Given this context, we envision that research on disciplined web application development methodologies for controlling side-channel leaks is of great importance for protecting online privacy.

### Acknowledgements

We thank our colleagues at Microsoft Research: Cormac Herley offered insights about the GIF format and suggested the possibility of recovering a pie chart through financial market evolution. Ranveer Chandra provided guidance on WiFi sniffing. Emre Kiciman gave valuable advice on web server architecture issues and commented on an earlier version of this paper. Johnson Apacible explained IIS implementation details. Rob Oikawa, Jim Oker, and Yi-Min Wang spent significant efforts helping resolve issues related to publishing this research. We also thank anonymous reviewers for their valuable comments. Authors with IU were supported in part by the NSF Grant CNS-0716292. Rui Wang was also supported in part by the Microsoft Internship program.

### References

[1] Balobardes B, Demarest S. Asking sensitive information: an example with income. Social and Preventive Medicine. Volume 48, Number 1 / March, 2003. Pages 70-72.
[2] D. Brumley and D. Boneh. "Remote timing attacks are practical," the 12th Usenix Security Symposium, 2003.
[3] Andrea Bittau, Mark Handley, Joshua Lackey, "The Final Nail in WEP's Coffin," the 2006 IEEE Symposium on Security and Privacy, Oakland, CA.
[4] George Bissias, Marc Liberatore, David Jensen, and Brian Neil Levine. "Privacy Vulnerabilities in Encrypted HTTP Streams." Privacy Enhancing Technologies Workshop (PET), May 2005.
[5] BusinessWeek. Privacy Survey Results. http://www.cdt.org/privacy/survey/findings/
[6] Heyning Cheng, Heyning Cheng, and Ron Avnur. Traffic analysis of SSL encrypted web browsing, 1998.
[7] George Danezis: Traffic Analysis of the HTTP Protocol over TLS. http://research.microsoft.com/en-us/um/people/gdane/papers/TLSanon.pdf
[8] Catalim Dima, Contantin Enea, and Radu Gramatovici. Nondeterministic nointerference and deducible information flow. Technical report TR-LACL-2006-01, LACL (Laboratory of Algorithms, Complexity and Logic), University of Paris-Est (Paris 12), 2006. http://lacl.univ-paris12.fr/Rapports/TR/TR-2006-01.pdf
[9] IEEE 802.11-2007. Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications. Pages 180-181, http://standards.ieee.org/getieee802/download/802.11-2007.pdf
[10] JFreeChart. http://www.jfree.org/jfreechart/
[11] Renaissance Veil, Lifts Its But Just a Crack. http://www.hfalert.com/headlines.php?hid=44928
[12] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. “Hey, You, Get Off of My Cloud! Exploring Information Leakage in Third-Party Compute Clouds.” ACM CCS 2009.
[13] T. S. Saponas, J. Lester, C. Hartung, S. Agarwal, and T. Kohno. "Devices That Tell On You: Privacy Trends in Consumer Ubiquitous Computing," Usenix Security, 2007.
[14] SmartAnt Telecom Co., Ltd. "Adaptor USB for Wi-Fi 802.11bg HighGain CPE," http://www.globalspec.com/FeaturedProducts/Detail/SmartAntTelecom/Adaptor_USB_for_Wi-Fi_80211bg_HighGain_CPE/97318/0
[15] Dawn Song, David Wagner, and Xuqing Tian. "Timing Analysis of Keystrokes and SSH Timing Attacks," 10th USENIX Security Symposium, 2001.
[16] Qixiang Sun, Daniel R. Simon, Yi-Min Wang, Wilf Russell, Venkata Padmanabhan, and Lili Qiu, "Statistical Identification of Encrypted Web Browsing Traffic," in IEEE Sym. on Security & Privacy 2002.
[17] Tor: anonymity online. http://www.torproject.org/
[18] Martin Vuagnoux and Sylvain Pasini. Compromising Electromagnetic Emanations of Wired and Wireless Keyboards. USENIX Security Symposium, 2009.
[19] David Wagner and Bruce Schneier. Analysis of the SSL 3.0 protocol. The Second UNIX Workshop on Electronic Commerce, pages 29–40. USENIX Association, 1996.
[20] Wikipedia. Graphics Interchange Format. http://en.wikipedia.org/wiki/Graphics_Interchange_Format
[21] Sources about Steve Jobs’ health. a) Wikipedia. Steve Jobs. http://en.wikipedia.org/wiki/Steve_Jobs; b) Steve Jobs' Health, Apple's Stock. http://www.shortnews.com/start.cfm?id=76013; c) Once Again, Apple Not Forthright About Steve Jobs' Health. http://www.businessinsider.com/2009/1/so-apple-lied-about-steve-jobs-health--again
[22] Wired News. "Declassified NSA Document Reveals the Secret History of TEMPEST," http://www.wired.com/threatlevel/2008/04/nsa-releases-se
[23] Charles Wright, Lucas Ballard, Scott Coulls, Fabian Monrose, and Gerald Masson. "Spot me if you can: recovering spoken phrases in encrypted VoIP conversations," in IEEE Symposium on Security and Privacy, May, 2008.
[24] Kehuan Zhang and XiaoFeng Wang. Peeping Tom in the Neighborhood: Keystroke Eavesdropping on Multi-User Systems. USENIX Security Symposium, 2009.

### Appendix

#### A: Low Entropy Input Features in Popular Script Libraries

| Library Name | Low Entropy Input Feature |
|--------------|---------------------------|
| Script.aculo.us | Autocompleter |
| Dhtmlgoodies | Ajax tooltip |
| OpenLaszlo | Remote Database |
| DojoCompus | Dynamic data retrieving |
| Rico | Ajax sortable tables |
| jQuery | Crosser-Browser Tooltips |
| TwinHelix | Yahoo YUI Autocomplete |
| Echo | Rolodex |
| jsLinb | Adobe Spry Auto suggest |

#### B: Ciphers Used by Important HTTPS Websites

| Website(s) | Cipher(s) |
|------------|-----------|
| PayPal, WellsFargo Bank, Citi Bank, Bank of America, American Express, Scottrade, E*Trade, Google Adwords, Microsoft AdCenter, eSurance, Comcast, AT&T phone account service, Provident Mortgage, GeoTrust CA, OnlineInvestA, FinancialDataA, OnlineHealthA, OnlineTaxA | RC4 (stream) and AES128 (128bit block) |
| Verisign CA, GEICO insurance | Triple-DES (64bit block) |

#### C: A Preliminary Side-Channel-Control Infrastructure

Since side-channel control is a cross-layer task, the first step is to urge vendors of web servers and browsers to provide an infrastructure where well-defined policies can be specified by web application developers and enforced on the protocol layer. We implemented a prototype for packet-padding as an IIS extension and a Firefox add-on, shown in Figure 16.

**Figure 16: Padder Prototypes on Browser and Web Server**

- **Browser**: HTML pages, links, XHR.open("GET", "a.aspx?policy=[Policy]")
- **IIS (Web Server)**: ASP.NET pages, AppendHeader('policy', '[Policy]')
- **ASP.NET Engine**: Padder module as a Firefox add-on, Padder module as an IIS extension

Our prototype works with web applications written in ASP.NET. A padding policy for a response is specified by calling `AppendHeader('policy', '[Policy]')` in the corresponding ASP.NET page, where `[Policy]` is the policy definition. The policy is enforced by a padder module on the protocol layer, which intercepts the IIS workflow for generating the response and pads it according to the policy header. Interceptions occur before and after HTTP compression.

For the browser-side component, HTTP requests come from sources like hyperlinks, forms, or XmlHttpRequest (XHR). For GET requests, the padding policy is inserted into the argument list in the URL, right after "?". For POST requests, the policy is inserted as a hidden input field. The browser-side padder is a Firefox add-on called by the HTTP handler when processing GET and POST requests.

**Policy Specification and Enforcement**

Server-side policies are specified using the following grammar:
- Example: "random-padding; 128; before-compression; header"
- Policy ::= Strategy ; Delta ; When ; Where
- Strategy ::= rounding | random-padding
- Delta ::= integer
- When ::= before-compression | after-compression
- Where ::= header | body

Enforcement is straightforward. The padder module retrieves the policy from a packet passed from the HTTP handler, calculates the packet size, applies rounding or random-padding, and then returns it to the HTTP handler.

**Functional Tests**

We evaluated the functionality of our prototype using a sample web application with an auto-suggestion feature implemented by XmlHttpRequest (to test AJAX-style requests), a selection list for user clicks (to test POST requests), and a search functionality similar to find-a-doctor in OnlineHealthA (to test server responses). We analyzed the network traffic and confirmed that the policies specified in the application were correctly enforced.