User: How can I write a script using Python that automates routine tasks on a server, such as backups and monitoring?
Assistant: Here is a simple script written in Python to automate backup and monitoring tasks on a server: Backup script: ```python import os import shutil from datetime import datetime def backup(source_dir, destination_dir): today = datetime.now( ) backup_dir_name = today.strftime('%Y%m%d') backup_dir = os.path.join(destination_dir, backup_dir_name) os.mkdir(backup_dir) for root, dirs, files in os.walk(source_dir): for file in files: src_file = os.path.join(root, file) dst_file = os.path.join(backup_dir, os.path.relpath(src_file, source_dir)) shutil.copy2(src_file, dst_file) if __name__ == '__main__ ': source_dir = '/home/user/www' destination_dir = '/home/user/backups' backup(source_dir, destination_dir) ``` monitoring script: ```python import psutil import smtplib from email.mime.text import MIMEText from datetime import datetime def check_cpu_usage(threshold): cpu_usage = psutil.cpu_percent() if cpu_usage > threshold: send_email('CPU usage is too high', f'Current CPU usage: {cpu_usage}%') def send_email(subject, message ): sender = 'youremail@example.com' password = 'yourpassword' recipients = ['recipient1@example.com', 'recipient2@example.com'] smtp_server = 'smtp.example.com' smtp_port = 587 msg = MIMEText (message) msg['Subject'] = subject msg['From'] = sender msg['To'] = ', '.join(recipients) server = smtplib.SMTP(smtp_server, smtp_port) server.starttls() server .login(sender, password) server.sendmail(sender, recipients, msg.as_string()) server.quit() if __name__ == '__main__': threshold = 80 check_cpu_usage(threshold) ``` These scripts are just samples Example scripts to which you can add more code to perform more operations, such as backing up database or configuration files, monitoring disk space usage, or interacting with other APIs, etc. The scope of Python scripts for automating server management depends on the needs and creativity of administrators.