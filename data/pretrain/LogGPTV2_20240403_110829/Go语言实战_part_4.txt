类型值作为映射后的值。Matcher 类型在代码文件 matcher.go 中声明，后面再讲这个类型的用
途。这个变量声明还有一个地方要强调一下：变量名matchers是以小写字母开头的。
在Go语言里，标识符要么从包里公开，要么不从包里公开。当代码导入了一个包时，程序
可以直接访问这个包中任意一个公开的标识符。这些标识符以大写字母开头。以小写字母开头的
标识符是不公开的，不能被其他包中的代码直接访问。但是，其他包可以间接访问不公开的标识
符。例如，一个函数可以返回一个未公开类型的值，那么这个函数的任何调用者，哪怕调用者不
是在这个包里声明的，都可以访问这个值。
这行变量声明还使用赋值运算符和特殊的内置函数make初始化了变量，如代码清单2-11所示。
代码清单2-11 构建一个映射
make(map[string]Matcher)
map是Go语言里的一个引用类型，需要使用make来构造。如果不先构造map并将构造后
的值赋值给变量，会在试图使用这个map变量时收到出错信息。这是因为map变量默认的零值
是nil。在第4章我们会进一步了解关于映射的细节。
在Go语言中，所有变量都被初始化为其零值。对于数值类型，零值是0；对于字符串类型，
零值是空字符串；对于布尔类型，零值是false；对于指针，零值是nil。对于引用类型来说，
所引用的底层数据结构会被初始化为对应的零值。但是被声明为其零值的引用类型的变量，会返
回nil作为其值。
现在，让我们看看之前在main函数中调用的Run函数的内容，如代码清单2-12所示。
代码清单2-12 search/search.go：第11行到第57行
11 // Run执行搜索逻辑
12 func Run(searchTerm string) {
13 // 获取需要搜索的数据源列表
14 feeds, err := RetrieveFeeds()
15 if err != nil {
16 log.Fatal(err)
17 }
18
19 // 创建一个无缓冲的通道，接收匹配后的结果
20 results := make(chan *Result)
21
22 // 构造一个waitGroup，以便处理所有的数据源
23 var waitGroup sync.WaitGroup
24
25 // 设置需要等待处理
26 // 每个数据源的goroutine的数量
27 waitGroup.Add(len(feeds))
28
29 // 为每个数据源启动一个goroutine来查找结果
30 for _, feed := range feeds {
31 // 获取一个匹配器用于查找
32 matcher, exists := matchers[feed.Type]
33 if !exists {
34 matcher = matchers["default"]
35 }
36
37 // 启动一个goroutine来执行搜索
38 go func(matcher Matcher, feed *Feed) {
39 Match(matcher, feed, searchTerm, results)
40 waitGroup.Done()
41 }(matcher, feed)
42 }
43
44 // 启动一个goroutine来监控是否所有的工作都做完了
45 go func() {
46 // 等候所有任务完成
47 waitGroup.Wait()
48
49 // 用关闭通道的方式，通知Display函数
50 // 可以退出程序了
51 close(results)
52 }()
53
54 // 启动函数，显示返回的结果，并且
55 // 在最后一个结果显示完后返回
56 Display(results)
57 }
Run函数包括了这个程序最主要的控制逻辑。这段代码很好地展示了如何组织Go程序的代码，
以便正确地并发启动和同步goroutine。先来一步一步考察整个逻辑，再考察每步实现代码的细节。
先来看看Run函数是怎么定义的，如代码清单2-13所示。
代码清单2-13 search/search.go：第11行到第12行
11 // Run 执行搜索逻辑
12 func Run(searchTerm string) {
Go语言使用关键字func声明函数，关键字后面紧跟着函数名、参数以及返回值。对于Run
这个函数来说，只有一个参数，是string类型的，名叫searchTerm。这个参数是Run函数
要搜索的搜索项，如果回头看看main函数（如代码清单2-14所示），可以看到如何传递这个搜
索项。
代码清单2-14 main.go：第17行到第21行
17 // main 是整个程序的入口
18 func main() {
19 // 使用特定的项做搜索
20 search.Run("president")
21 }
Run函数做的第一件事情就是获取数据源feeds列表。这些数据源从互联网上抓取数据，
之后对数据使用特定的搜索项进行匹配，如代码清单2-15所示。
代码清单2-15 search/search.go：第13行到第17行
13 // 获取需要搜索的数据源列表
14 feeds, err := RetrieveFeeds()
15 if err != nil {
16 log.Fatal(err)
17 }
这里有几个值得注意的重要概念。第14行调用了search包的RetrieveFeeds函数。
这个函数返回两个值。第一个返回值是一组Feed类型的切片。切片是一种实现了一个动态数
组的引用类型。在 Go 语言里可以用切片来操作一组数据。第 4 章会进一步深入了解有关切片
的细节。
第二个返回值是一个错误值。在第 15 行，检查返回的值是不是真的是一个错误。如果真的
发生错误了，就会调用log包里的Fatal函数。Fatal函数接受这个错误的值，并将这个错误
在终端窗口里输出，随后终止程序。
不仅仅是Go语言，很多语言都允许一个函数返回多个值。一般会像RetrieveFeeds函数这
样声明一个函数返回一个值和一个错误值。如果发生了错误，永远不要使用该函数返回的另一个
值①。这时必须忽略另一个值，否则程序会产生更多的错误，甚至崩溃。
让我们仔细看看从函数返回的值是如何赋值给变量的，如代码清单2-16所示。
代码清单2-16 search/search.go：第13行到第14行
13 // 获取需要搜索的数据源列表
14 feeds, err := RetrieveFeeds()
这里可以看到简化变量声明运算符（:=）。这个运算符用于声明一个变量，同时给这个变量
① 这个说法并不严格成立，Go标准库中的io.Reader.Read方法就允许同时返回数据和错误。但是，如果是
自己实现的函数，要尽量遵守这个原则，保持含义足够明确。——译者注
赋予初始值。编译器使用函数返回值的类型来确定每个变量的类型。简化变量声明运算符只是一
种简化记法，让代码可读性更高。这个运算符声明的变量和其他使用关键字 var 声明的变量没
有任何区别。
现在我们得到了数据源列表，进入到后面的代码，如代码清单2-17所示。
代码清单2-17 search/search.go：第19行到第20行
19 // 创建一个无缓冲的通道，接收匹配后的结果
20 results := make(chan *Result)
在第 20 行，我们使用内置的 make 函数创建了一个无缓冲的通道。我们使用简化变量声明
运算符，在调用make的同时声明并初始化该通道变量。根据经验，如果需要声明初始值为零值
的变量，应该使用 var 关键字声明变量；如果提供确切的非零值初始化变量或者使用函数返回
值创建变量，应该使用简化变量声明运算符。
在 Go 语言中，通道（channel）和映射（map）与切片（slice）一样，也是引用类型，不过
通道本身实现的是一组带类型的值，这组值用于在goroutine之间传递数据。通道内置同步机制，
从而保证通信安全。在第6章中，我们会介绍更多关于通道和goroutine的细节。
之后两行是为了防止程序在全部搜索执行完之前终止，如代码清单2-18所示。
代码清单2-18 search/search.go：第22行到第27行
22 // 构造一个wait group，以便处理所有的数据源
23 var waitGroup sync.WaitGroup
24
25 // 设置需要等待处理
26 // 每个数据源的goroutine的数量
27 waitGroup.Add(len(feeds))
在Go语言中，如果main函数返回，整个程序也就终止了。Go程序终止时，还会关闭所有
之前启动且还在运行的goroutine。写并发程序的时候，最佳做法是，在main函数返回前，清理
并终止所有之前启动的goroutine。编写启动和终止时的状态都很清晰的程序，有助减少bug，防
止资源异常。
这个程序使用sync包的WaitGroup跟踪所有启动的goroutine。非常推荐使用WaitGroup来
跟踪goroutine的工作是否完成。WaitGroup是一个计数信号量，我们可以利用它来统计所有的
goroutine是不是都完成了工作。
在第23行我们声明了一个sync包里的WaitGroup类型的变量。之后在第27行，我们将
WaitGroup变量的值设置为将要启动的goroutine的数量。马上就能看到，我们为每个数据源都
启动了一个goroutine来处理数据。每个goroutine完成其工作后，就会递减WaitGroup变量的
计数值，当这个值递减到0时，我们就知道所有的工作都做完了。
现在让我们来看看为每个数据源启动goroutine的代码，如代码清单2-19所示。
代码清单2-19 search/search.go：第29行到第42行
29 // 为每个数据源启动一个goroutine来查找结果
30 for _, feed := range feeds {
31 // 获取一个匹配器用于查找
32 matcher, exists := matchers[feed.Type]
33 if !exists {
34 matcher = matchers["default"]
35 }
36
37 // 启动一个 goroutine来执行搜索
38 go func(matcher Matcher, feed *Feed) {
39 Match(matcher, feed, searchTerm, results)
40 waitGroup.Done()
41 }(matcher, feed)
42 }
第30 行到第42 行迭代之前获得的feeds，为每个feed 启动一个 goroutine。我们使用关
键字for range对feeds切片做迭代。关键字range可以用于迭代数组、字符串、切片、映
射和通道。使用for range迭代切片时，每次迭代会返回两个值。第一个值是迭代的元素在切
片里的索引位置，第二个值是元素值的一个副本。
如果仔细看一下第 30 行的 for range 语句，会发现再次使用了下划线标识符，如代码清
单2-20所示。
代码清单2-20 search/search.go：第29行到第30行
29 // 为每个数据源启动一个 goroutine来查找结果
30 for _, feed := range feeds {
这是第二次看到使用了下划线标识符。第一次是在main.go里导入matchers包的时候。这
次，下划线标识符的作用是占位符，占据了保存 range 调用返回的索引值的变量的位置。如果
要调用的函数返回多个值，而又不需要其中的某个值，就可以使用下划线标识符将其忽略。在我
们的例子里，我们不需要使用返回的索引值，所以就使用下划线标识符把它忽略掉。
在循环中，我们首先通过map查找到一个可用于处理特定数据源类型的数据的Matcher值，
如代码清单2-21所示。
代码清单2-21 search/search.go：第31行到第35行
31 // 获取一个匹配器用于查找
32 matcher, exists := matchers[feed.Type]
33 if !exists {
34 matcher = matchers["default"]
35 }
我们还没有说过 map 里面的值是如何获得的。一会儿就会在程序初始化的时候看到如何设
置map里的值。在第32行，我们检查map是否含有符合数据源类型的值。查找map里的键时，
有两个选择：要么赋值给一个变量，要么为了精确查找，赋值给两个变量。赋值给两个变量时第
一个值和赋值给一个变量时的值一样，是 map 查找的结果值。如果指定了第二个值，就会返回
一个布尔标志，来表示查找的键是否存在于 map 里。如果这个键不存在，map 会返回其值类型
的零值作为返回值，如果这个键存在，map会返回键所对应值的副本。
在第33行，我们检查这个键是否存在于map里。如果不存在，使用默认匹配器。这样程序
在不知道对应数据源的具体类型时，也可以执行，而不会中断。之后，启动一个 goroutine 来执
行搜索，如代码清单2-22所示。
代码清单2-22 search/search.go：第37行到第41行
37 // 启动一个 goroutine来执行搜索
38 go func(matcher Matcher, feed *Feed) {
39 Match(matcher, feed, searchTerm, results)
40 waitGroup.Done()
41 }(matcher, feed)
我们会在第6 章进一步学习goroutine，现在只要知道，一个 goroutine 是一个独立于其他函
数运行的函数。使用关键字go启动一个goroutine，并对这个goroutine做并发调度。在第38行，
我们使用关键字 go启动了一个匿名函数作为 goroutine。匿名函数是指没有明确声明名字的函
数。在 for range 循环里，我们为每个数据源，以 goroutine 的方式启动了一个匿名函数。这
样可以并发地独立处理每个数据源的数据。
匿名函数也可以接受声明时指定的参数。在第 38 行，我们指定匿名函数要接受两个参数，
一个类型为 Matcher，另一个是指向一个 Feed 类型值的指针。这意味着变量 feed 是一个指
针变量。指针变量可以方便地在函数之间共享数据。使用指针变量可以让函数访问并修改一个变
量的状态，而这个变量可以在其他函数甚至是其他goroutine的作用域里声明。
在第41行，matcher和feed两个变量的值被传入匿名函数。在Go语言中，所有的变量
都以值的方式传递。因为指针变量的值是所指向的内存地址，在函数间传递指针变量，是在传递
这个地址值，所以依旧被看作以值的方式在传递。
在第39行到第40行，可以看到每个goroutine是如何工作的，如代码清单2-23所示。
代码清单2-23 search/search.go：第39行到第40行
39 Match(matcher, feed, searchTerm, results)
40 waitGroup.Done()
goroutine做的第一件事是调用一个叫Match的函数，这个函数可以在 match.go文件里找
到。Match函数的参数是一个Matcher类型的值、一个指向Feed类型值的指针、搜索项以及
输出结果的通道。我们一会儿再看这个函数的内部细节，现在只要知道，Match 函数会搜索数
据源的数据，并将匹配结果输出到results通道。
一旦Match函数调用完毕，就会执行第40行的代码，递减WaitGroup的计数。一旦每个
goroutine都执行调用Match函数和Done方法，程序就知道每个数据源都处理完成。调用Done
方法这一行还有一个值得注意的细节：WaitGroup的值没有作为参数传入匿名函数，但是匿名
函数依旧访问到了这个值。
Go语言支持闭包，这里就应用了闭包。实际上，在匿名函数内访问searchTerm和results
变量，也是通过闭包的形式访问的。因为有了闭包，函数可以直接访问到那些没有作为参数传入
的变量。匿名函数并没有拿到这些变量的副本，而是直接访问外层函数作用域中声明的这些变量
本身。因为matcher和feed变量每次调用时值不相同，所以并没有使用闭包的方式访问这两
个变量，如代码清单2-24所示。
代码清单2-24 search/search.go：第29行到第32行
29 // 为每个数据源启动一个goroutine来查找结果
30 for _, feed := range feeds {
31 // 获取一个匹配器用于查找
32 matcher, exists := matchers[feed.Type]
可以看到，在第30行到第32行，变量feed和matcher的值会随着循环的迭代而改变。
如果我们使用闭包访问这些变量，随着外层函数里变量值的改变，内层的匿名函数也会感知到这
些改变。所有的 goroutine 都会因为闭包共享同样的变量。除非我们以函数参数的形式传值给函
数，否则绝大部分goroutine最终都会使用同一个matcher来处理同一个feed——这个值很有
可能是feeds切片的最后一个值。
随着每个goroutine搜索工作的运行，将结果发送到results通道，并递减waitGroup的
计数，我们需要一种方法来显示所有的结果，并让main函数持续工作，直到完成所有的操作，
如代码清单2-25所示。
代码清单2-25 search/search.go：第44行到第57行
44 // 启动一个goroutine来监控是否所有的工作都做完了
45 go func() {
46 // 等候所有任务完成
47 waitGroup.Wait()
48