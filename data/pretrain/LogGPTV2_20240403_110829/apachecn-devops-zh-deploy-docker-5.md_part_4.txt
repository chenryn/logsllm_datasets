$ # Run our MongoDB without creating the volume beforehand
$ docker run -d \
             --mount source=mongodb_data,target=/data/db \
             mongo:latest
f73a90585d972407fc21eb841d657e5795d45adc22d7ad27a75f7d5b0bf86f69
$ # Stop and remove our container
$ docker stop f73a9058 && docker rm f73a9058
f73a9058
f73a9058
$ # Check our volumes
$ docker volume ls
DRIVER              VOLUME NAME
local               4182af67f0d2445e8e2289a4c427d0725335b732522989087579677cf937eb53
local               mongodb_data
$ # Remove our new volumes
$ docker volume rm mongodb_data 4182af67f0d2445e8e2289a4c427d0725335b732522989087579677cf937eb53
mongodb_data
4182af67f0d2445e8e2289a4c427d0725335b732522989087579677cf937eb53
```
不过，你可能已经注意到了，我们最终得到了两卷，而不仅仅是我们期望的`mongodb_data`，如果你用这一卷遵循前面的例子，你可能实际上有三卷(一卷命名，两卷随机命名)。这是因为启动的每个容器都将创建`Dockerfile`中定义的所有本地卷，无论您是否命名它们，我们的 MongoDB 映像实际上定义了两个卷:
```
$ # See what volumes Mongo image defines
$ docker inspect mongo:latest | grep -A 3 Volumes
            "Volumes": {
                "/data/configdb": {},
                "/data/db": {}
            },
```
我们只给第一个起了个名字，所以`/data/configdb`卷收到了一个随机的名字。要注意这样的事情，如果你不够专注，你可能会遇到空间耗尽的问题。每隔一段时间运行一次`docker volume prune`可以帮助回收该空间，但是要小心该命令，因为它将销毁所有未绑定到容器的卷。
# 可重定位卷
当在单个主机上工作时，我们前面讨论的所有这些选项都很好，但是它们缺少的是不同物理主机之间真正的数据可移植性。例如，当前保持数据持久性的方法实际上可以扩展到但不会超过(没有一些极端的黑客攻击)具有单个 Docker Engine 和共享附加存储的单个物理服务器。这对于功能强大的服务器来说可能没问题，但在真正的集群配置中却开始缺乏任何用处，因为您可能要处理未知数量的服务器、混合的虚拟和物理主机、不同的地理区域等等。
此外，当容器重新启动时，您很可能无法轻松预测它将在哪里启动，以便在启动时将卷后端放在那里。对于这个用例，有一些东西叫做可重定位卷。它们有各种不同的名称，如“共享多主机存储”、“编排数据卷”和许多其他名称，但总体来说，想法几乎是一样的:无论容器走到哪里，都有一个数据卷跟随它。
为了说明这个例子，这里我们有三个主机和两个状态服务，它们都使用相同的可重定位卷存储驱动程序连接:
*   **有状态容器 1** ，带有**主机 1** 上的**卷 D**
*   **有状态** **容器 2** 和**主机 3** 上的**卷 G**
![](img/fc61905b-b24d-4fcd-835e-383d4cd8a330.png)
在本例中，假设**主机 3** 已经死亡。在正常的卷驱动程序情况下，来自**有状态** **容器 2** 的所有数据都将丢失，但因为您将使用可重定位存储:
*   编排平台将通知您的存储驱动程序容器已死亡。
*   编排平台将指示它想要在具有可用资源的主机上重新启动被终止的服务。
*   卷驱动程序会将同一卷装载到运行该服务的新主机上。
*   编排平台将启动服务，将卷详细信息传递到新容器中。
在我们假设的例子中，新的系统状态看起来应该有点像这样:
![](img/daefcd75-6b1e-4dde-ac1e-5b57660c2427.png)
从外部角度可以看到，没有任何变化，数据无缝地转换到新的容器并保持其状态，这正是我们想要的。出于这一特定目的，有许多 Docker 卷驱动程序可供选择，每个驱动程序都有自己的配置方法，适用于各种存储后端，但 Docker 开箱即用的 Azure 和 AWS 预构建映像中唯一包含的驱动程序是 CloudStor，它仅适用于 Docker Swarm，使其具有超特定性和完全不可移植性。
For various reasons, including the age of technology and lackluster support by Docker and plugin developers, having to do this type of volume handling is most likely going to be the part that you sink a lot of time into when building your infrastructure. I do not want to discourage you, but at the time of writing this, the state of things is really dire regardless of what easy tutorials may like you to believe.
你可以在[https://docs . docker . com/engine/extend/legacy _ plugins/# volume-plugins](https://docs.docker.com/engine/extend/legacy_plugins/#volume-plugins)找到大部分驱动。配置完成后，如果您是在没有编排的情况下手动执行这些操作以管理装载，请按照以下方式使用它们:
```
$ # New-style volume switch (--mount)
$ docker run --mount source=,target=/dest/path,volume-driver= \
             ...
$ # Old-style volume switch
$ docker run -v :/dest/path \
             --volume-driver  \
             ...
```
作为参考，目前，我认为最流行的处理可重定位卷的插件是 Flocker、REX-Ray([https://github.com/codedellemc/rexray](https://github.com/codedellemc/rexray))和 GlusterFS，尽管有很多可供选择，其中许多具有类似的功能。如前所述，对于如此重要的功能，这个生态系统的状态相当糟糕，似乎几乎每个运行其集群的大公司要么分叉并构建自己的存储解决方案，要么自己制造并保持封闭来源。一些部署甚至选择对其节点使用标签来完全避免此主题，并强制特定容器转到特定主机，以便它们可以使用本地装载的卷。
Flocker's parent company, ClusterHQ, shut down its operations in December 2016 for financial reasons, and while the lack of support would give a bit of a push to not be mentioned here, it is still the most popular one by an order of magnitude for this type of volume management at the time of writing this book. All the code is open sourced on GitHub at [https://github.com/ClusterHQ](https://github.com/ClusterHQ) so you can build, install, and run it even without official support. If you want to use this plugin in an enterprise environment and would like to have support for it, some of the original developers are available for hire through a new company called ScatterHQ at [https://www.scatterhq.com/](https://www.scatterhq.com/) and they have their own source code repositories at [https://github.com/ScatterHQ](https://github.com/ScatterHQ). GlusterFS is unmaintained in its original source like Flocker, but just like Flocker, you can build, install, and run the full code from the source repository located at [https://github.com/calavera/docker-volume-glusterfs](https://github.com/calavera/docker-volume-glusterfs). If you would like code versions that have received updates, you can find a few in the fork network at [https://github.com/calavera/docker-volume-glusterfs/network](https://github.com/calavera/docker-volume-glusterfs/network).
在所有这些生态系统碎片的基础上，这种与 Docker 集成的特殊方式开始被弃用，取而代之的是`docker plugin`系统，该系统将这些插件作为 Docker Hub 的 Docker 映像进行管理和安装，但是由于缺乏这些新型插件的可用性，您可能不得不根据您的特定用例使用传统插件。
Sadly at the time of writing this book, `docker plugin` system is, like many of these features, so new that there are barely any available plugins for it. For example, the only plugin from the ones earlier mentioned in legacy plugins that is built using this new system is REX-Ray but the most popular storage backend (EBS) plugin does not seem to install cleanly. By the time you get to read this book, things will probably have changed here but be aware that there is a significant likelihood that in your own implementation you will be using the tried-and-tested legacy plugins.
因此，在提到所有这些警告后，让我们实际上尝试使用新的`docker plugin install`系统获得唯一可以工作的插件(`sshfs`):
To duplicate this work, you will need access to a secondary machine (though you can run it loopback too) with SSH enabled and reachable from wherever you have Docker Engine running from, since that is the backing storage system that it uses. You will also need the target folder `ssh_movable_volume` made on the device and possibly the addition of `-o odmap=user` to the `sshfs` volume parameters depending on your setup.
```
$ # Install the plugin
$ docker plugin install vieux/sshfs 
Plugin "vieux/sshfs" is requesting the following privileges:
 - network: [host]
 - mount: [/var/lib/docker/plugins/]
 - mount: []
 - device: [/dev/fuse]
 - capabilities: [CAP_SYS_ADMIN]
Do you grant the above permissions? [y/N] y
latest: Pulling from vieux/sshfs
2381f72027fc: Download complete 
Digest: sha256:72c8cfd1a6eb02e6db4928e27705f9b141a2a0d7f4257f069ce8bd813784b558
Status: Downloaded newer image for vieux/sshfs:latest
Installed plugin vieux/sshfs
$ # Sanity check
$ docker plugin ls
ID                  NAME                 DESCRIPTION               ENABLED
0d160591d86f        vieux/sshfs:latest   sshFS plugin for Docker   true
$ # Add our password to a file
$ echo -n '' > password_file
$ # Create a volume backed by sshfs on a remote server with SSH daemon running
$ docker volume create -d vieux/sshfs \
 -o sshcmd=PI:EMAIL/ssh_movable_volume \
 -o password=$(cat password_file) \
 ssh_movable_volume
ssh_movable_volume
$ # Sanity check
$ docker volume ls
DRIVER               VOLUME NAME
vieux/sshfs:latest   ssh_movable_volume
$ # Time to test it with a container
$ docker run -it \
 --rm \
 --mount source=ssh_movable_volume,target=/my_volume,volume-driver=vieux/sshfs:latest \
 ubuntu:latest \
 /bin/bash
root@75f4d1d2ab8d:/# # Create a dummy file
root@75f4d1d2ab8d:/# echo 'test_content' > /my_volume/test_file
root@75f4d1d2ab8d:/# exit
exit
$ # See that the file is hosted on the remote server
$ ssh PI:EMAIL
PI:EMAIL's password: 
user@ubuntu:~$ cat ssh_movable_volume/test_file 
test_content
$ # Get back to our Docker Engine host
user@ubuntu:~$ exit
logout
Connection to 192.168.56.101 closed.
$ # Clean up the volume
$ docker volume rm ssh_movable_volume
ssh_movable_volume
```
由于卷的使用方式，该卷大部分都是可移植的，并允许我们使用所需的可重定位功能，尽管大多数其他插件使用在 Docker 之外运行的进程，并在每台主机上并行运行，以便管理卷的装载、卸载和移动，因此这些插件的说明会有很大不同。
# 可重定位卷同步丢失
在这一节中还必须提到的最后一件事是，大多数处理卷移动的插件在任何时候都只能处理连接到单个节点，因为卷可由多个源写入，这通常会导致严重的问题，因此大多数驱动程序不允许这样做。
然而，这与大多数编排引擎的主要特性相冲突，在对 Docker 服务进行更改时，将保持原始服务运行，直到新服务启动并通过运行状况检查，从而导致需要在新旧服务任务上装载相同的卷，这实际上造成了一个“先有鸡还是先有蛋”的悖论。
在大多数情况下，这可以通过确保 Docker 在启动新服务之前完全终止旧服务来解决，但即使这样，您也可以预期，有时旧卷不会从旧节点足够快地卸载，因此新服务将无法启动。
# 卷的 UID/GID 和安全注意事项