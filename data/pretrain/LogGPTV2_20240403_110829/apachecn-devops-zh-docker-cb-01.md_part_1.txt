# 一、介绍和安装
在本章中，我们将介绍以下食谱:
*   验证 Docker 安装的要求
*   在 Ubuntu 上安装 Docker
*   在中央操作系统上安装 Docker
*   用自动脚本在 Linux 上安装 Docker
*   为窗口安装 Docker
*   为 Mac 安装 Docker
*   提取映像并运行容器
*   添加非根用户来管理 Docker
*   使用 Docker 命令行查找帮助
# 介绍
在信息技术革命的最开始，大多数应用都是通过主机操作系统直接部署在物理硬件上的。因为只有一个用户空间，所以应用之间共享运行时。部署稳定，以硬件为中心，维护周期长。它主要由信息技术部门管理，给开发人员的灵活性要小得多。在这种情况下，硬件资源大部分时间都没有得到充分利用。下图描述了这样的设置:
![](img/201183ee-e601-4d38-86f8-cb9551d827c9.png)
Traditional application deployment 
为了灵活部署，并且为了更好地利用主机系统的资源，发明了虚拟化。借助虚拟机管理程序，如 KVM、XEN、ESX、Hyper-V 等，我们模拟了**虚拟机**(虚拟机)的硬件，并在每个虚拟机上部署了一个来宾操作系统。虚拟机可以有不同于其主机的操作系统；这意味着我们负责管理该虚拟机的补丁、安全性和性能。通过虚拟化，应用在虚拟机级别被隔离，并由虚拟机的生命周期定义。这为我们带来了更好的投资回报和更高的灵活性，但代价是复杂性和冗余性增加。下图描述了一个典型的虚拟化环境:
![](img/d72fc7aa-a6e9-4773-8184-1bf7cf4cf7d9.png)
Application deployment in a virtualized environment
自从开发虚拟化以来，我们一直在朝着更加以应用为中心的 IT 方向发展。我们移除了虚拟机管理程序层，以降低硬件仿真和复杂性。应用与其运行时环境打包在一起，并使用容器进行部署。OpenVZ、Solaris Zones 和 LXC 是容器技术的几个例子。与虚拟机相比，容器的灵活性较低；例如，截至编写本文时，我们无法在 Linux OS 上运行 Microsoft Windows。容器也被认为不如虚拟机安全，因为有了容器，一切都在主机操作系统上运行。如果一个容器遭到破坏，那么就有可能获得对主机操作系统的完全访问权限。设置、管理和自动化可能有点过于复杂。这些是我们在过去几年中没有看到容器被大规模采用的几个原因，尽管我们有这种技术。下图显示了如何使用容器部署应用:
![](img/1da18499-1ac4-4011-a106-86d3fb97179f.png)
Application deployment with containers 
有了 Docker，容器一下子成了一等公民。所有大公司，如谷歌、微软、红帽、IBM 和其他公司，现在都在努力使容器成为主流。
Docker 是由 dotCloud 创始人所罗门·海克斯作为内部项目创立的。它于 2013 年 3 月在 Apache 2.0 许可下作为开源发布。借助 dotCloud 的平台即服务体验，Docker 的创始人和工程师意识到了运行容器的挑战。因此，通过 Docker，他们开发了一种管理容器的标准方法。
Docker 使用操作系统的底层内核特性，这使得容器化成为可能。下图描述了 Docker 平台和 Docker 使用的内核特性。让我们看看 Docker 使用的一些主要内核特性:
![](img/2cbdb2a7-e899-4c11-826e-f16d960255cb.png)
Docker platform and the kernel features used by Docker 
# 命名空间
名称空间是容器的构造块。命名空间有不同的类型，每种类型都将应用与其他应用隔离开来。它们是使用克隆系统调用创建的。您也可以附加到现有的命名空间。Docker 使用的一些名称空间将在以下章节中解释。
# PID 命名空间
PID 命名空间允许每个容器有自己的进程编号。每个工艺流程图都有自己的流程层次结构。父命名空间可以看到子命名空间并影响它们，但是子命名空间既不能看到父命名空间也不能影响它。
如果有两个层次，那么在顶层，我们会看到进程在子命名空间中以不同的 PID 运行。因此，在子命名空间中运行的进程将有两个 PID:一个在子命名空间中，另一个在父命名空间中。例如，如果我们在`container.sh `容器上运行一个程序，那么我们也可以在主机上看到相应的程序。
在容器上，`sh container.sh`流程的 PID 为`8`:
![](img/65d4dc88-928d-4092-84ba-33ebf031b9ee.png)
在主机上，同一个进程的 PID 为`29778`:
![](img/e564361c-4cee-451b-ac8c-1f6af3a193b7.png)
# net 命名空间
有了 PID 命名空间，我们可以在不同的隔离环境中多次运行同一个程序；例如，我们可以在不同的容器上运行不同的 Apache 实例。但是如果没有 net 名称空间，我们将无法监听它们中每一个的端口 80。net 命名空间允许我们在每个容器上有不同的网络接口，这解决了我前面提到的问题。每个容器中的环回接口也是不同的。
为了在容器中实现联网，我们在两个不同的网络名称空间中创建了成对的特殊接口，并允许它们相互通信。特殊接口的一端位于容器内部，另一端位于主机系统上。一般容器内部的接口叫`eth0`，在主机系统上给它取一个随机的名字，比如`veth516cc56`。然后，这些特殊接口通过主机上的网桥(`docker0`)进行链接，以实现容器和路由数据包之间的通信。
在容器内部，您将看到类似如下的内容:
```
$ docker container run -it alpine ash
# ip a
```
![](img/19abf7f7-9291-40a1-9ffd-d4a79b4bed8c.png)
在主机上，它看起来如下所示:
```
$ ip a
```
![](img/4c897f80-c700-441c-981b-62b518683e28.png)
此外，每个网络名称空间都有自己的路由表和防火墙规则。
# IPC 命名空间
**进程间通信** ( **IPC** )命名空间提供信号量、消息队列和共享内存段。现在还没有广泛使用，但是一些程序仍然依赖它。
如果一个容器创建的 IPC 资源被另一个容器使用，那么在第一个容器上运行的应用可能会失败。使用 IPC 命名空间，在一个命名空间中运行的进程不能从另一个命名空间访问资源。
# mnt 命名空间
仅使用一个 chroot，您就可以从一个 chroot 目录/名称空间检查系统的相对路径。mnt 命名空间将 chroots 的思想提升到了一个新的层次。使用 mnt 命名空间，容器可以有自己的一组挂载的文件系统和根目录。一个 mnt 命名空间中的进程看不到另一个 mnt 命名空间的已装载文件系统。
# UTS 命名空间
使用 UTS 命名空间，我们可以为每个容器使用不同的主机名。
# 用户命名空间
有了用户名称空间支持，我们可以让用户在主机上有一个非零的标识，但是在容器中可以有一个零标识。这是因为用户名称空间允许映射每个名称空间的用户和组标识。
有多种方法可以在主机和容器以及其他容器之间共享命名空间。我们将在后续章节中看到如何做到这一点。
# cggroups
控制组(cgroups)为容器提供资源限制和核算。以下引文来自 Linux 内核文档:
"Control Groups provide a mechanism for aggregating/partitioning sets of tasks, and all their future children, into hierarchical groups with specialized behaviour."
简单来说，它们可以与`ulimit` shell 命令或`setrlimit`系统调用相比较。cgroups 不将资源限制设置为单个进程，而是允许您将资源限制为一组进程。
控制组分为不同的子系统，如中央处理器、中央处理器集、内存块输入/输出等。每个子系统可以独立使用，也可以与其他子系统组合使用。cgroups 提供的功能如下:
*   **资源限制**:例如，一个 cgroup 可以绑定到特定的 CPU，这样该组中的所有进程只能在给定的 CPU 上运行
*   **优先级**:一些群体可能获得更大份额的 CPU
*   **计费**:可以测量不同子系统的资源使用情况进行计费
*   **控制**:可以冻结和重启群组
cgroups 可以管理的一些子系统如下:
*   **blkio** :设置对数据块设备(如磁盘、固态硬盘等)的输入/输出访问
*   **Cpu** :限制对 Cpu 的访问
*   **Cpuacct** :生成 CPU 资源利用率
*   **CPU uset**:将多核系统上的 CPU 分配给一个组中的任务
*   **设备**:授予设备访问组中一组任务的权限
*   **冻结**:暂停或恢复一个组中的任务
*   **内存**:设置一组任务的内存使用限制
有多种方法可以控制对 cgroups 的工作。最流行的两种方法是手动访问 cgroup 虚拟文件系统和使用 libcgroup 库访问它。要在 Linux 上使用 libcgroup，请运行以下命令在 Ubuntu 或 Debian 上安装所需的包:
```
$ sudo apt-get install cgroup-tools
```
要在 CentOS、Fedora 或红帽上安装所需的软件包，请使用以下代码:
```
$ sudo yum install libcgroup libcgroup-tools
```
These steps are not possible on Docker for Mac and Windows, because you can't install the required packages on those versions of Docker.
安装后，您可以使用以下命令在伪文件系统中获取子系统列表及其挂载点:
```
$ lssubsys -M
```
![](img/e7141877-492b-490d-86b3-5d4c81361a96.png)
虽然我们还没有看到实际的命令，但是让我们假设我们正在运行几个容器，并且想要获得一个容器的`cgroup`条目。要获取这些，我们首先需要获取容器标识，然后使用`lscgroup`命令获取容器的`cgroup`条目，我们可以使用以下命令获取:
![](img/77df4527-fe52-4243-9b1c-284c442f7bc2.png)
For more details, visit [https://docs.docker.com/config/containers/runmetrics/.](https://docs.docker.com/config/containers/runmetrics/.)
# 联合文件系统
联合文件系统允许独立文件系统(称为层)的文件和目录被透明地覆盖，以创建新的虚拟文件系统。在启动一个容器时，Docker 会覆盖附加到映像的所有层，并创建一个只读文件系统。除此之外，Docker 创建了一个由容器的运行时环境使用的读/写层。可以阅读本章的*拉图运行容器*食谱了解更多详情。Docker 可以使用几种联合文件系统变体，包括 AUFS、Btrfs、zfs、覆盖、重叠 2 和设备映射器。
Docker 还有一个**虚拟文件系统** ( **VFS** )存储驱动。VFS 不支持写时复制，也不是联合文件系统。这意味着每个层都是磁盘上的一个目录，每次创建新层时，都需要其父层的深度拷贝。由于这些原因，它的性能较低，需要更多的磁盘空间，但它是一个健壮而稳定的选项，适用于所有环境。
# 容器格式
Docker 引擎将名称空间、控件组和 UnionFS 组合成一个称为容器格式的包装器。2015 年，Docker 将其容器格式和运行时捐赠给了一个名为**开放容器倡议** ( **OCI** )的组织。OCI 是一个轻量级、开放的治理结构，由 Docker 和其他行业领导者在 Linux 基金会下组建。OCI 的目的是围绕容器格式和运行时创建开放的行业标准。目前有两种规范:运行时规范和映像规范。
运行时规范概述了如何运行 OCI 运行时文件系统包。Docker 向 OCI 捐赠了 RuNC([https://github.com/opencontainers/runc](https://github.com/opencontainers/runc))其符合 OCI 标准的运行时，作为参考实现。
OCI 映像格式包含在目标平台上启动应用所需的信息。该规范定义了如何创建 OCI 映像，以及期望的输出是什么样子。输出将由映像清单、文件系统(层)序列化和映像配置组成。Docker 将其 Docker V2 映像格式捐赠给 OCI，以形成 OCI 映像规范的基础。
目前有两个支持 OCI 运行时和映像规范的容器引擎:Docker 和 rkt。
# 验证 Docker 安装的要求
很多 Linux 平台都支持 Docker，比如 RHEL、Ubuntu、Fedora、CentOS、Debian、Arch Linux 等等。许多云平台也支持它，如亚马逊网络服务、数字海洋、微软 Azure 和谷歌云。Docker 还为微软 Windows 和 Mac OS X 发布了桌面应用，使您可以轻松地让 Docker 直接在您的本地机器上启动和运行。
在本食谱中，我们将验证 Docker 安装的要求。我们将研究一个安装了 Ubuntu 18.04 LTS 的系统，尽管同样的步骤也适用于其他的 Linux 版本。
# 准备好
在安装了 Ubuntu 18.04 的系统上以 root 用户身份登录。
# 怎么做…
请执行以下步骤:
1.32 位架构不支持 Docker。要检查系统的体系结构，请运行以下命令:
```
 $ uname -i
 x86_64
```
2.  内核 3.8 或更高版本支持 Docker。它已经在一些内核 2.6 上进行了移植，比如 RHEL 6.5 和更高版本。要检查内核版本，请运行以下命令:
```
 $ uname -r
 4.15.0-29-generic
```
3.  运行内核应该支持适当的存储后端。这种后端的一些选项包括 VFS、设备映射器、AUFS、Btrfs、zfs 和 Overlayfs。
对于 Ubuntu，默认的存储后端或驱动程序是 overlay2，自 Ubuntu 14.04 以来一直可用。另一个流行的是设备映射器，它使用`device-mapper`精简资源调配模块来实现层。它应该默认安装在大多数 Linux 平台上。要检查`device-mapper`，您可以运行以下命令:
```
 $ grep device-mapper /proc/devices
 253 device-mapper
```
在大多数发行版上，AUFS 需要一个修改过的内核。
4.  对 cgroups 和名称空间的支持已经在内核中存在了一段时间，默认情况下应该是启用的。为了检查它们的存在，您可以查看正在运行的内核的相应配置文件。例如，在 Ubuntu 上，我可以做如下事情:
```
 $ grep -i namespaces /boot/config-4.15.0-29-generic
 CONFIG_NAMESPACES=y
 $ grep -i cgroups /boot/config-4.15.0-29-generic
 CONFIG_CGROUPS=y
```
The name of the `config` file is usually dependent on your kernel version. Your system might have a different filename. If this is the case, change the command accordingly. 
# 它是如何工作的…
Docker 要求主机系统满足一组基本要求，以便正确运行。通过运行前面的命令，我们能够确认我们的系统满足这些要求。
# 请参见
在 Docker 网站[https://docs.docker.com/install/](https://docs.docker.com/install/)查看安装文档。
# 在 Ubuntu 上安装 Docker
Ubuntu 有几个不同的版本。在本食谱中，我们将在 Ubuntu 18.04 上安装 Docker，这是截至本文撰写时的最新 LTS 版本。这些相同的步骤也应该适用于 Ubuntu 16.04。
# 准备好
检查前面配方中提到的先决条件。
卸载所有旧版本的 Docker。Docker 软件包的早期版本被称为`docker`、`docker.io`或`docker-engine`。如果安装了这些，那么我们需要卸载它们，否则它们可能会导致问题:
```
 $ sudo apt-get remove docker docker-engine docker.io
```
# 怎么做…
执行以下步骤:
1.  更新`apt`包索引:
```
 $ sudo apt-get update
```