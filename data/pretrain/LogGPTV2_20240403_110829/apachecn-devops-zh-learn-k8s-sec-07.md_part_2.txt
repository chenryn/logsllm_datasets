  uid: 026466f3-e2e8-4b26-994d-ee473b2f36cd
secrets:
- name: test-token-sdq2d
```
如果我们列举细节，我们可以看到证书和令牌:
```
$ kubectl get secret test-token-sdq2d -o yaml
apiVersion: v1
data:
  ca.crt: base64(crt)
  namespace: ZGVmYXVsdA==
  token: base64(token)
kind: Secret
```
接下来，我们将讨论 webhook 令牌。有些企业有一个远程身份验证和授权服务器，通常用于所有服务。在 Kubernetes 中，开发人员可以使用 webhook 令牌来利用远程服务进行身份验证。
## web 手册令牌
在网络钩子模式下，Kubernetes 调用集群外的 REST API 来确定用户的身份。通过将`--authorization-webhook-config-file=`传递给 API 服务器，可以启用认证的 Webhook 模式。
下面是一个 webhook 配置的例子。在这种情况下，[authn.example.com/authenticate](http://authn.example.com/authenticate)被用作 Kubernetes 集群的身份验证端点:
```
clusters:
  - name: name-of-remote-authn-service
    cluster:
      certificate-authority: /path/to/ca.pem
      server: https://authn.example.com/authenticate
```
我们再来看一个远程服务可以使用 进行认证的另一种方式。
## 认证代理
`kube-apiserver`可以被配置为使用`X-Remote`请求头识别用户。您可以通过向 API 服务器添加以下参数来启用此方法:
```
--requestheader-username-headers=X-Remote-User
--requestheader-group-headers=X-Remote-Group
--requestheader-extra-headers-prefix=X-Remote-Extra-
```
每个请求都有以下标题来标识它们:
```
GET / HTTP/1.1
X-Remote-User: foo
X-Remote-Group: bar
X-Remote-Extra-Scopes: profile
```
应用编程接口代理使用证书颁发机构验证请求。
## 用户模拟
集群管理员和开发人员可以使用用户模拟来调试新用户的身份验证和授权策略。要使用用户模拟，必须授予用户模拟权限。应用编程接口服务器使用模拟以下头来模拟用户:
*   `Impersonate-User`
*   `Impersonate-Group`
*   `Impersonate-Extra-*`
一旦应用编程接口服务器接收到模拟头，应用编程接口服务器将验证用户是否经过身份验证并具有模拟权限。如果是，请求将作为模拟用户执行。`kubectl`可以使用`--as`和`--as-group`标志来模拟用户:
```
kubectl apply -f pod.yaml --as=dev-user --as-group=system:dev
```
一旦认证模块验证了用户的身份，它们就解析请求，以检查用户是否被允许访问或修改请求。
# 不可动摇的授权
授权决定请求是被允许还是被拒绝。一旦确定了请求的来源，活动授权模块将根据用户的授权策略评估请求的属性，以允许或拒绝请求。每个请求依次通过授权模块，如果任何模块提供了允许或拒绝的决定，它将被自动接受或拒绝。
## 请求属性
授权模块解析请求中的一组属性，以确定该请求应该被解析、允许还是拒绝:
*   **用户**:请求的发起者。这在身份验证期间得到验证。
*   **组**:用户所属的组。这是在身份验证层提供的。
*   **API** :请求的目的地。
*   **请求动词**:请求的类型，可以是`GET`、`CREATE`、`PATCH`、`DELETE`等。
*   **资源**:被访问资源的标识或名称。
*   **命名空间**:被访问资源的命名空间。
*   **请求路径**:如果是针对非资源端点的请求，则该路径用于检查是否允许用户访问该端点。对于`api`和`healthz`端点来说，这是正确的。
现在，让我们看看使用这些请求属性来确定是否允许起源发起请求的不同授权模式。
## 授权模式
我们来看看 Kubernetes 中提供的不同授权模式 。
## 节点
节点授权模式授予 kube lets 访问服务、端点、节点、pods、机密和节点的持久卷的权限。kubelet 被识别为`system:nodes`组的一部分，用户名为`system:node:`，由节点授权者授权。默认情况下，在 Kubernetes 中启用此模式。
`NodeRestriction`准入控制器，我们将在本章后面了解，与节点授权器结合使用，以确保 kubelet 只能修改它正在运行的节点上的对象。API 服务器使用`--authorization-mode=Node`标志来使用节点授权模块:
```
$ps aux | grep api
root      3701  6.1  8.7 497408 346244 ?       Ssl  21:06   0:16 kube-apiserver --advertise-address=192.168.99.111 --allow-privileged=true --anonymous-auth=true --authorization-mode=Node,RBAC --client-ca-file=/var/lib/minikube/certs/ca.crt --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota
```
节点授权与 ABAC 或 RBAC 一起使用，接下来我们将看一下。
## ABAC
在 ABAC，通过根据请求的属性验证策略，请求是允许的。ABAC 授权模式可以使用`--authorization-policy-file=`和`--authorization-mode=ABAC`与 API 服务器一起启用。
这些策略包括每行一个 JSON 对象。每个策略包括以下内容:
*   **版本**:策略格式的 API 版本。
*   **种类**:政策用`Policy`串。
*   **规范**:包括用户、组、资源属性，如`apiGroup`、`namespace`、`nonResourcePath`(如`/version`、`/apis`、`readonly`)允许不修改资源的请求。
策略示例如下:
```
{"apiVersion": "abac.authorization.kubernetes.io/v1beta1", "kind": "Policy", "spec": {"user": "kubelet", "namespace": "*", "resource": "pods", "readonly": true}} 
```
该策略允许 kubelet 读取任何 pods。ABAC 很难配置和维护。不建议在生产环境中使用 ABAC 。
## RBAC
在 RBAC，使用分配给用户的角色来管理对资源的访问。从 1.8 版开始，许多集群默认启用 RBAC。要启用 RBAC，请使用`--authorization-mode=RBAC`启动应用编程接口服务器:
```
$ ps aux | grep api
root     14632  9.2 17.0 495148 338780 ?       Ssl  06:11   0:09 kube-apiserver --advertise-address=192.168.99.104 --allow-privileged=true --authorization-mode=Node,RBAC ...
```
RBAC 使用角色(一组权限)和角色绑定(授予用户权限)。角色和角色绑定仅限于名称空间。如果角色需要跨命名空间，可以使用集群角色和集群角色绑定跨命名空间边界向用户授予权限。
以下是允许用户在默认命名空间中创建和修改 pods 的`Role`属性示例:
```
kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: default
  name: deployment-manager
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
```
对应的`RoleBinding`可以和`Role`一起使用，授予用户权限:
```
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: binding
  namespace: default
subjects:
- kind: User
  name: employee
  apiGroup: ""
roleRef:
  kind: Role
  name: deployment-manager
  apiGroup: ""
```
一旦应用`RoleBinding`，您可以切换上下文来查看它是否正确工作:
```
$ kubectl --context=employee-context get pods
NAME                          READY   STATUS    RESTARTS   AGE
hello-node-677b9cfc6b-xks5f   1/1     Running   0          12m
```
但是，如果您尝试查看部署，将会导致错误:
```
$ kubectl --context=employee-context get deployments
Error from server (Forbidden): deployments.apps is forbidden: User "employee" cannot list resource "deployments" in API group "apps" in the namespace "default"
```
由于角色和角色绑定仅限于默认命名空间，访问不同命名空间中的 pods 将导致错误:
```
$ kubectl --context=employee-context get pods -n test
Error from server (Forbidden): pods is forbidden: User "test" cannot list resource "pods" in API group "" in the namespace "test"
$ kubectl --context=employee-context get pods -n kube-system
Error from server (Forbidden): pods is forbidden: User "test" cannot list resource "pods" in API group "" in the namespace "kube-system"
```
接下来，我们将讨论 webhooks，它为企业提供了使用 r 远程服务器进行授权的能力。
## web 手册
类似于认证的网络挂钩模式，授权的网络挂钩模式使用远程 API 服务器来检查用户权限。使用`--authorization-webhook-config-file=`可以启用网页挂钩模式。
让我们来看一个样例 webhook 配置文件，它将 [https://authz.remote](https://authz.remote) 设置为 Kubernetes 集群的远程授权端点:
```
clusters: