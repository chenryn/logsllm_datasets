### Session Analysis

The most interesting feature of the density graph is that Google Maps’ inter-request times are notably consistent and significantly shorter, indicating more frequent requests, compared to other applications.

#### Figures and Data
- **Fig. 3. HTTP payload bytes per connection**
- **Fig. 4. HTTP payload bytes per connection**
- **Fig. 5. HTTP payload bytes per session**
- **Fig. 6. Session durations**
- **Fig. 7. Number of requests per session**
- **Fig. 8. Number of requests per session**
- **Fig. 9. PDF of inter-request-times within each session: ALL-HTTP and Google Maps**
- **Fig. 10. PDF of inter-request-times within each session: Google Mail, GMX, and lokalisten.de**

### Traffic Patterns
For both MWN-07 and LBNL-07, the traffic pattern for ALL-HTTP is burstier. There has been no significant change in ALL-HTTP from 2005 to 2007. The majority of requests are likely automatically generated, as they are executed within 1 second (see support line; > 1 second corresponds roughly to human-issued browser requests) in all sessions. Google Maps is the most extreme application, likely due to its use of pre-fetching to support dynamic features.

### Service Provider Differences
Different service providers utilize AJAX capabilities differently. For example, GMX and Google Mail are both web-based email applications, but their inter-request times differ dramatically. Google Mail uses a polling interval of approximately 120 seconds (as seen in the 3-byte requests in Fig. 4). Once these are removed, the densities become quite similar.

### Conclusions
The transition of the web from a hyperlinked document repository to a real-time application platform has significant implications for the underlying Internet infrastructure. This paper highlights the characteristics of popular Web 2.0 applications, including Google Maps, Google Mail, lokalisten.de, and GMX Mail. These applications are characterized by high data transfer, frequent requests, and active pre-fetching, leading to more aggressive and bursty network usage compared to overall HTTP traffic.

End users now expect web applications to be as responsive as locally installed software, imposing high Quality of Service (QoS) requirements. However, treating this new HTTP traffic as deterministic flows, similar to streamed media, is not effective due to inherent variability.

Web application developers have adopted advanced features such as data pre-fetching, HTTP connection persistence, and HTTP pipelining to mask network latency. The results presented in this paper can help developers understand how their applications affect Internet traffic and how they can be designed for more efficient operation.

### References
1. Krishnamurthy, B., Rexford, J.: Web protocols and practice: HTTP/1.1, Networking protocols, caching, and traffic measurement. Addison-Wesley, Reading (2001)
2. Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., Berners-Lee, T.: RFC 2616, Hypertext Transfer Protocol – HTTP/1.1 (1999)
3. Zakas, N., McPeak, J., Fawcett, J.: Professional AJAX. Wiley, Chichester (2006)
4. Crovella, P.B.M.: The network effects of prefetching. In: INFOCOM (1998)
5. Abrams, M., Standridge, C.R., Abdulla, G., Williams, S., Fox, E.A.: Caching proxies: limitations and potentials. In: WWW Conference (1995)
6. Barford, P., Bestavros, A., Bradley, A., Crovella, M.E.: Changes in Web client access patterns: Characteristics and caching implications. In: World Wide Web (1999)
7. Challenger, J., Iyengar, A., Danzig, P.: A scalable system for consistently caching dynamic Web data. In: INFOCOM (1999)
8. The impact of AJAX on web operations (2005), http://www.bitcurrent.com/?p=105
9. Document Object Model (DOM) (2007), http://www.w3.org/DOM
10. Paxson, V.: Bro intrusion detection system (2007), http://www.bro-ids.org
11. Feldmann, A., Rexford, J., Caceres, R.: Efficient policies for carrying Web traffic over flow-switched networks. IEEE/ACM Trans. Networking 6(6) (1998)