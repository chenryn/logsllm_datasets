session. The most interesting feature of this density graph is that Google Maps’ inter-
request-times are very similar and signiﬁcantly shorter, i.e., more frequent, than for
)
]
u
>
]
s
e
t
y
b
[
a
t
a
d
l
d
a
o
y
a
p
P
T
T
H
[
P
(
0
1
g
o
l
0
1
−
2
−
3
−
4
−
5
−
MWN−07 All−HTTP
MWN−07 Google Maps
MWN−07 Google Mail
MWN−07 GMX
MWN−07 lokalisten
y
t
i
l
i
b
a
b
o
r
p
5
5
2
2
.
.
0
0
0
0
2
2
.
.
0
0
5
5
1
1
.
.
0
0
0
0
1
1
.
.
0
0
5
5
0
0
.
.
0
0
0
0
.
.
0
0
MWN−07 All−HTTP
MWN−07 Google Maps
MWN−07 Google Mail
LBNL−07 Google Maps
B
k
0
1
1
10
100 1000
100000
10000000
10^0
10^0
u [bytes]
10^2
10^2
10^6
10^6
HTTP payload data [bytes]
10^4
10^4
10^8
10^8
Fig. 3. HTTP payload bytes per connection
Fig. 4. HTTP payload bytes per connection
y
t
i
l
i
b
a
b
o
r
p
5
5
2
2
.
.
0
0
0
0
2
2
.
.
0
0
5
5
1
1
.
.
0
0
0
0
1
1
.
.
0
0
5
5
0
0
.
.
0
0
0
0
.
.
0
0
MWN−07 All−HTTP
MWN−07 Google Maps
MWN−07 Remaining 3
B
k
0
1
y
t
i
l
i
b
a
b
o
r
p
0
0
2
2
.
.
0
0
5
5
1
1
.
.
0
0
0
0
1
1
.
.
0
0
5
5
0
0
.
.
0
0
0
0
.
.
0
0
MWN−07 All−HTTP
MWN−07 Google Maps
MWN−07 Google Mail
LBNL−07 Google Maps
10^0
10^0
10^2
10^2
10^4
10^4
10^6
10^6
10^8
10^8
10^−4
10^−4
10^−2
10^−2
HTTP payload data [bytes]
10^0
10^0
10^2
10^2
Session duration [sec]
10^4
10^4
Fig. 5. HTTP payload bytes per Session
Fig. 6. Session durations
The New Web: Characterizing AJAX Trafﬁc
39
6
6
.
.
0
0
y
t
i
l
i
b
a
b
o
r
p
4
4
.
.
0
0
2
2
.
.
0
0
0
0
.
.
0
0
MWN−07 All−HTTP
MWN−07 Google Maps
MWN−07 Google Mail
MWN−07 GMX
MWN−07 lokalisten.de
MWN−07 All−HTTP
MWN−07 Google Maps
MWN−07 Remaining 3
LBNL−07 Google Maps
1
10
100
1000
10000
1
1
10
10
100
100
1000
1000
10000
10000
u [#requests]
#HTTP requests
Fig. 7. Number of requests per session
Fig. 8. Number of requests per session
MWN−07 All−HTTP
MWN−05 All−HTTP
MWN−07 Google Maps
LBNL−07 Google Maps
c
e
s
1
y
t
i
l
i
b
a
b
o
r
p
0
0
2
2
.
.
0
0
5
5
1
1
.
.
0
0
0
0
1
1
.
.
0
0
5
5
0
0
.
.
0
0
0
0
.
.
0
0
MWN−07 All−HTTP
MWN−07 Google Mail
MWN−07 GMX
MWN−07 lokalisten
c
e
s
1
)
]
u
>
s
t
s
e
u
q
e
r
P
T
T
H
#
[
P
(
0
1
g
o
l
0
1
−
2
−
3
−
4
−
5
−
y
t
i
l
i
b
a
b
o
r
p
0
0
2
2
.
.
0
0
5
5
1
1
.
.
0
0
0
0
1
1
.
.
0
0
5
5
0
0
.
.
0
0
0
0
.
.
0
0
10^−6
10^−6
10^−4
10^−4
10^−2
10^−2
10^0
10^0
inter request times [s]
10^2
10^2
10^−6
10^−6
10^−4
10^−4
10^−2
10^−2
10^0
10^0
inter request times [s]
10^2
10^2
Fig. 9. PDF of inter-request-times within each
session: ALL-HTTP and Google Maps
Fig. 10. PDF of inter-request-times within each
session: Google Mail, GMX and lokalisten.de
ALL-HTTP for both MWN-07 and LBNL-07. As such the trafﬁc pattern is burstier.
Moreover, there has not been a major change for ALL-HTTP from 2005 to 2007. The
majority of requests are clearly automatically generated, as they are executed within
1 second (see support line; > 1 second corresponds roughly to human-issued browser
request) in all sessions. Google Maps is again the most extreme application. Most likely
this is caused by the utilization of pre-fetching for supporting the dynamic features of
Google Maps.
Moreover, we note that different service providers can use the AJAX capabilities in
different manners. GMX and Google Mail are both Web based email applications. Yet,
the inter-request-times differ dramatically. The reason for this is that Google Mail uses
a polling interval of roughly 120 seconds (those 3 Bytes requests from Figure 4). Once
these are removed the densities are quite similar again.
4 Conclusions
The overall transition of the web from a hyperlinked document repository into a real-
time application platform has ramiﬁcations for the underlying Internet over which web
40
F. Schneider et al.
trafﬁc is transfered. In this paper we highlight characteristics of some popular Web 2.0
applications, in particular - Google Maps, Google Mail, lokalisten.de, and GMX Mail.
We report that these applications are heavy (bytes transferred), chatty (many more re-
quests), and greedy (actively pre-fetching data). Our analysis of their trafﬁc patterns
suggests that their characteristics translate into more aggressive and bursty network us-
age as compared to the overall HTTP trafﬁc.
End users have come to expect contemporary web applications to be as responsive
as locally installed software applications which imposes high QoS requirements. Yet,
treating this new HTTP trafﬁc as relatively deterministic ﬂows (i.e., in the same way as
streamed media) is bound to fail due to the inherent variability.
Web application developers have embraced data pre-fetching, HTTP connection per-
sistence, HTTP pipelining, and other advanced features to mask network latency from
end users. The results in this paper may help web application developers in under-
standing how their applications affect Internet trafﬁc, and how their applications can be
designed for more efﬁcient operation.
References
1. Krishnamurthy, B., Rexford, J.: Web protocols and practice: HTTP/1.1, Networking proto-
cols, caching, and trafﬁc measurement. Addison-Wesley, Reading (2001)
2. Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., Berners-Lee, T.: Rfc
2616, hypertext transfer protocol – http/1.1 (1999)
3. Zakas, N., McPeak, J., Fawcett, J.: Professional AJAX. Wiley, Chichester (2006)
4. Crovella, P.B.M.: The network effects of prefetching. In: INFOCOM (1998)
5. Abrams, M., Standridge, C.R., Abdulla, G., Williams, S., Fox, E.A.: Caching proxies: limi-
tations and potentials. In: WWW Conference (1995)
6. Barford, P., Bestavros, A., Bradley, A., Crovella, M.E.: Changes in Web client access pat-
terns: Characteristics and caching implications. In: World Wide Web (1999)
7. Challenger, J., Iyengar, A., Danzig, P.: A scalable system for consistently caching dynamic
Web data. In: INFOCOM (1999)
8. The impact of AJAX on web operations (2005), http://www.bitcurrent.com/?p=105
9. Document Object Model (DOM) (2007), http://www.w3.org/DOM
10. Paxson, V.: Bro intrusion detection system (2007), http://www.bro-ids.org
11. Feldmann, A., Rexford, J., Caceres, R.: Efﬁcient policies for carrying Web trafﬁc over ﬂow-
switched networks. IEEE/ACM Trans. Networking 6(6) (1998)