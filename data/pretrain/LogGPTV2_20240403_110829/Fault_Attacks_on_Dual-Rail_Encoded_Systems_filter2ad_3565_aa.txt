title:Fault Attacks on Dual-Rail Encoded Systems
author:Jason Waddle and
David A. Wagner
Fault Attacks on Dual-Rail Encoded Systems
Jason Waddle and David Wagner
Department of Computer Science
University of California, Berkeley
PI:EMAIL, PI:EMAIL
Abstract
Fault induction attacks are a serious concern for design-
ers of secure embedded systems. An ideal solution would
be a generic circuit transformation that would produce cir-
cuits that are robust against fault induction attacks. We
develop a framework for analyzing the security of systems
against single fault attacks and apply it to a recent proposed
method (dual-rail encoding) for generically securing cir-
cuits against single fault attacks. Ultimately, we ﬁnd that
the method does not hold up under our threat models: n-bit
cryptographic keys can be extracted from the device with
roughly n trials. We conclude that secure designs should
incorporate explicit countermeasures to either directly ad-
dress or attempt to invalidate our threat models.
1 Introduction
Securing embedded systems is exceedingly difﬁcult due
to the fact that potential adversaries have physical access.
In this paper, we focus on fault induction attacks. Recently,
dual-rail logic, a scheme previously used in asynchronous
circuit designs, has been suggested as a countermeasure for
fault induction attacks [2, 3]. In this article, we analyze,
in a variety of threat models, the effectiveness of dual-rail
encoding as a countermeasure against single fault induction
attacks.
1.1 Summary of results
In Section 4, we describe a series of attacks against dual-
rail encoded systems in the presence of adversaries capable
of inducing a variety of types of faults. Each of the attacks
attempts to recover an n-bit secret key from the dual-rail
encoded device. We measure the efﬁciency of our attacks
by the number of trials required to recover the entire key.
Table 1 summarizes the effectiveness of our attacks in the
various threat models.
Table 1. Summary of our attacks for extracting
an n-bit key from a dual-rail encoded system.
Fault
Type
Set
Reset
Flip
Set
Reset
Flip
Fault
Persistence
Steady
Steady
Steady
Transient
Transient
Transient
Required Trials
Expected
n trials
1.125n trials
n trials
n trials
(no attack)
n trials
Worst-Case
n trials
1.5n trials
n trials
n trials
(no attack)
n trials
As these attacks are so effective, we conclude that de-
signs for secure embedded systems must take these threat
models into account. The system should either be designed
to be robust in our threat models or some other explicit
countermeasures should be incorporated for the purpose of
invalidating our models.
1.2 Overview of sequel
We present the necessary background to understand our
results in Section 2. In Section 3 and Section 4, we construct
the framework in which we analyze the dual-rail encoded
systems and present our attacks against these systems in that
framework.
We conclude and suggest some directions for future re-
search into securing embedded systems against fault induc-
tion attacks in Section 5.
Finally, to justify our threat models and help convince
the reader of the practicality of fault induction attacks, Ap-
pendix A discusses some of the physics behind optical fault
induction and gives an example with the CMOS digital logic
family.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:22 UTC from IEEE Xplore.  Restrictions apply. 
2 Background
2.1 Attacks
Securing embedded systems is complicated by the fact
that an adversary may have unfettered physical access to the
target system. As a result, several types of attacks that are
impractical without physical access have emerged as pri-
mary considerations in the design of secure embedded sys-
tems.
2.1.1 Side-channel attacks
Side-channel attacks are typically passive: an adversary
usually just observes the target system under normal op-
eration. What the attacks exploit is the presence of a side-
channel, an unintentional source of information about the
internal operation of the target system.
Power analysis, the observation of the power consump-
tion of a target system, has emerged as one of the the most
effective, practical, and consequently well-studied type of
side-channel attack. Other types of side-channels have been
successfully exploited, as well; examples include electro-
magnetic emission analysis and timing analysis.
2.1.2 Fault attacks
Unlike side-channel attacks, fault attacks are fundamentally
active: these attacks require the induction of some sort of
fault during the operation of the target system.
Intuitively, it seems like it might be difﬁcult to extract
useful information from a target system by inducing faults.
However, several fault attacks have proved surprisingly ef-
fective and practical, requiring relatively little technical so-
phistication of the attacker [8]. An instructive example is
the fault attack on RSA decryption using the Chinese Re-
mainder Theorem: an attacker can recover the target sys-
tem’s entire key by observing only one faulty computation
[4]. Fault attacks have applied to other systems, including
elliptic curve systems [6] and AES [7].
Skorobogatov and Anderson describe optical fault at-
tacks [1], a precise and practical method for exercising ﬁne-
grained control over digital logic. This suggests that some
very powerful threat models may be realistic, motivating the
consideration of attacks that require much more ﬁnesse than
the RSA-CRT attack.
We focus on these types of precision attacks against sys-
tems that employ dual-rail encoding as a defense against
fault induction.
2.2 Dual-rail encoding
Dual-rail encoding is an alternate method for encoding
bits in hardware. In contrast with classical encoding, where
Table 2. Logical values (0,1), metadata values
(quiet, alarm), and their corresponding dual-
rail encodings.
Logical or Metadata Value Dual-rail Encoding
0
1
quiet
alarm
(0,1)
(1,0)
(0,0)
(1,1)
each wire carries a single bit-value, dual-rail encoded cir-
cuits use two wires to carry each bit. Table 2 summarizes
the encoding.
2.2.1 Notation
Throughout this text, we will use lowercase variables such
as x and y to denote logical values and subscripted low-
ercase variables such as x1, x0, y1, and y0 to denote the
values on the dual-rail lines. For example, when x = 1, its
dual-rail encoding is (x1, x0) = (1, 0).
2.2.2 Asynchronous circuits
Dual-rail encoding seems unnecessarily more complicated
and expensive than classical encoding, but dual-rail circuits
have the advantage of being able to carry the metadata (in
particular the quiet state) necessary to realize asynchronous
circuits. In classical circuits, there is no way to tell when a
wire is carrying valid data, so components have to be coor-
dinated by a common clock: components have an additional
“clock” input that indicates when valid data is present on the
inputs. In dual-rail circuits, on the other hand, it is possible
to tell when inputs contain valid data—when they are no
longer in a quiet (0,0) state—and so the components syn-
chronize automatically.
Asynchronous circuits are attractive since they have
some inherent robustness against side-channel and fault at-
tacks (they can be balanced and they detect single bit er-
rors). For these reasons they have been suggested for use in
secure embedded systems [2, 3].
2.2.3 Generic transformation
We can think of dual-rail logic as a generic transformation
that converts a high-level logical description of a circuit in
terms of AND, OR, and NOT gates into a dual-rail encoded
circuit where each high-level logic gate is realized by a col-
lection of OR gates and C-elements (explained below) that
compute the appropriate logic function in dual-rail encod-
ing. Figure 1 gives an example transformation of a logical
OR gate into its dual-rail implementation.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:22 UTC from IEEE Xplore.  Restrictions apply. 
0
1
0
1
1
0
1
0
0
0
1
0
0
C
C
C
C
C
C
0
1
Figure 1. A logical OR gate and a dual-rail
implementation.
The dual-rail implementation of a logical AND gate is
similar: one is depicted in Figure 2. While the logical AND
and OR gates have dual-rail implementations that require
several C-elements and OR gates, it is easy to verify that a
logical NOT can be performed on dual-rail encoded bits by
simply crossing the wires: in our notation, if x is encoded
(x1, x0), then x is (x0, x1).
It is instructive to consider the similarities between the
dual-rail implementations of the logical AND and OR gates
in Figure 2. In particular, note that one can easily be ob-
tained from the other by applying DeMorgan’s laws and
crossing the dual-rail wires to implement the NOTs.
2.2.4 C-elements
The gates that look like AND gates with a letter ‘C’ in the
middle are C-elements. Unlike typical logic gates, they
maintain some state: when their output is 0, they act like
AND gates, and when their output is 1, they act like OR
gates. C-elements are used in asynchronous circuits to ad-
dress the problem of unsteady input signals, and we will
leverage their stateful behavior in some of our attacks.
2.2.5 Dual-rail circuit operation
In a typical computation in a dual-rail circuit, all wires start
in a quiet state. When valid inputs are supplied to the
device, the gates start to compute and intermediate wires
driven by these gates go from the quiet state to a valid data
state. Finally, when all inputs are supplied and the data
has had time to propagate, the outputs will be in valid data
states.
If something unexpected happens during the computa-
tion (such as an attacker introducing a fault), the alarm state
might appear in some intermediate value. A secure imple-
mentation will propagate this value to all of the outputs in
order to prevent a possible attacker from learning some par-
tial results of a faulty computation.
Finally, to prepare the circuit for another computation,
the quiet state is again applied to the inputs; this state
should propagate through the device and return all internal
values back to quiet as well.
2.2.6 Robustness against side-channel attacks
Due to their effectiveness and the relative ease with which
they can be mounted, power analysis attacks are a major
motivation for the use of dual-rail encoded systems.
The power consumption of a device using CMOS digital
logic is mostly a function of the number of transitions in the
values on wires and at the inputs and outputs of its gates.
A carefully designed dual-rail circuit (with balanced gate
design and equalized wire-lengths) can minimize the data
dependence of the power consumption during a computa-
tion: just as many transitions are required with a dual-rail
value (0,1) as with (1,0).
On the other hand, at least one empirical test suggests
that electromagnetic proﬁles of computation in dual-rail cir-
cuits may be more highly correlated to data than in clocked
circuits. This surprising result is possibly due to the absence
of noise from clock lines [3].
2.2.7 Robustness against fault attacks
Dual-rail encoding is an instance of m-of-n encoding. In
particular, “dual-rail logic” is another name for 1-of-2 en-
coding. In m-of-n coding, valid data (as opposed to meta-
data) codewords have exactly m 1’s. Such codes are called
immutable: ﬂipping any single bit in a valid data codeword
results in invalid data [2].
In the case of dual-rail logic, changing one bit of a valid
data encoding (either (0,1) or (1,0)) results in one of the
metadata states: quiet (0,0) or alarm (1,1). Thus single
faults are detected. The device can halt with an error in-
dication instead of giving the attacker an erroneous output
that might leak secret information.
On the other hand, an error indication may be all an at-
tacker needs. As we will show, it is apparently important
whether errors are corrected or just detected. If an attacker
can observe whether carefully induced faults result in valid
or erroneous computations, he can deduce some informa-
tion on internal values (e.g., cryptographic key bits).
3 Models
In this section, we discuss both our models for the sys-
tems being analyzed and the classes of induced faults we
will be considering.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:06:22 UTC from IEEE Xplore.  Restrictions apply. 
3.1 Target systems
3.2.1 Effectiveness of attacks
The target systems we consider are the dual-rail imple-
mentations of logical circuits consisting of AND, OR, and
NOT gates. In particular, they consist of the dual-rail gates
depicted in Figure 2 along with the simple wire-swap for
logical NOTs.
The canonical task of the attacker is to extract a ﬁxed n-
bit secret from a device by repeatedly using the device to
compute on known inputs and optionally inducing single
faults during each computation. Our primary measure of the
efﬁciency of an attack is the number of iterations required
to deduce the target system’s secret as a function of n.
3.1.1 Assumed behavior of dual-rail encoded systems
3.2.2 Faults and assumptions
We assume that the dual-rail systems perform a computa-
tion on some given input and output the result if no error is
detected. In the case of an error, whether it is the result of
the presence of an alarm (1,1) state or a deadlock condition
(quiet (0, 0) after some timeout), the only output is an error
indicator. A system that indicated the type of error would
only make our attacks easier.
We assume that the timing of the computation is deter-
ministic and known to the adversary. While randomized
timing may complicate some of our attacks, its effective-
ness as a countermeasure is highly implementation-speciﬁc.
It is also possible that an adversary could use a side-channel
such as power consumption or electromagnetic radiation to
determine the computation timing in real-time.
3.1.2 The secret
We assume that the systems we consider contain some sort
of secret key that is used in computation. The motivating
situation is where the secret is a key to a block cipher: the
device takes the plaintext as input, performs encryption us-
ing the secret key, and outputs the resulting ciphertext. An
attacker would like to extract the key from the device.
Typically, a key is hard-coded in the circuitry or stored
in program memory. While attacks on the stored key can
be quite devastating [5], we prefer a more general approach
and make no assumptions about how the key is stored in the
device. Our attacks focus instead on the initial computa-
tions involving the secret bits.
Finally, we assume that each bit of the secret is used in
every computation, as is usual with a block cipher key.
3.2 Threat models
We are concerned with the behavior of systems when