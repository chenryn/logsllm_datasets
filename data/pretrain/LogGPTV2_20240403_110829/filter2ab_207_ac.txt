redis> RPUSH mylist "hello"
(integer) 2
redis> RPUSH mylist "foo"
(integer) 3
redis> RPUSH mylist "hello"
(integer) 4
redis> LREM mylist -2 "hello"
(integer) 2
redis> LRANGE mylist 0 -1
1) "hello"
2) "foo"
```
Remove elements from a list
### LSET 
``` {.wrap}
LSET key index element
```
#### Example
```shell script
redis> RPUSH mylist "one"
(integer) 1
redis> RPUSH mylist "two"
(integer) 2
redis> RPUSH mylist "three"
(integer) 3
redis> LSET mylist 0 "four"
"OK"
redis> LSET mylist -2 "five"
"OK"
redis> LRANGE mylist 0 -1
1) "four"
2) "five"
3) "three"
```
Set the value of an element in a list by its index
### LTRIM 
``` {.wrap}
LTRIM key start stop
```
#### Example
```shell script
redis> RPUSH mylist "one"
(integer) 1
redis> RPUSH mylist "two"
(integer) 2
redis> RPUSH mylist "three"
(integer) 3
redis> LTRIM mylist 1 -1
"OK"
redis> LRANGE mylist 0 -1
1) "two"
2) "three"
```
Trim a list to the specified range
### RPOP 
``` {.wrap}
RPOP key [count]
```
#### Example
```shell script
redis> RPUSH mylist "one"
(integer) 1
redis> RPUSH mylist "two"
(integer) 2
redis> RPUSH mylist "three"
(integer) 3
redis> RPOP mylist
"three"
redis> LRANGE mylist 0 -1
1) "one"
2) "two"
```
Remove and get the last elements in a list
### RPOPLPUSH 
``` {.wrap}
RPOPLPUSH source destination
```
#### Example
```shell script
redis> RPUSH mylist "one"
(integer) 1
redis> RPUSH mylist "two"
(integer) 2
redis> RPUSH mylist "three"
(integer) 3
redis> RPOPLPUSH mylist myotherlist
"three"
redis> LRANGE mylist 0 -1
1) "one"
2) "two"
redis> LRANGE myotherlist 0 -1
1) "three"
```
Remove the last element in a list, prepend it to another list and return it
### LMOVE 
``` {.wrap}
LMOVE source destination LEFT|RIGHT LEFT|RIGHT
```
#### Example
```shell script
redis> RPUSH mylist "one"
(integer) 1
redis> RPUSH mylist "two"
(integer) 2
redis> RPUSH mylist "three"
(integer) 3
redis> LMOVE mylist myotherlist RIGHT LEFT
"three"
redis> LMOVE mylist myotherlist LEFT RIGHT
"one"
redis> LRANGE mylist 0 -1
1) "two"
redis> LRANGE myotherlist 0 -1
1) "three"
2) "one"
```
Pop an element from a list, push it to another list and return it
### RPUSH 
``` {.wrap}
RPUSH key element [element ...]
```
#### Example
```shell script
redis> RPUSH mylist "hello"
(integer) 1
redis> RPUSH mylist "world"
(integer) 2
redis> LRANGE mylist 0 -1
1) "hello"
2) "world"
```
Append one or multiple elements to a list
### RPUSHX 
``` {.wrap}
RPUSHX key element [element ...]
```
#### Example
```shell script
redis> RPUSH mylist "Hello"
(integer) 1
redis> RPUSHX mylist "World"
(integer) 2
redis> RPUSHX myotherlist "World"
(integer) 0
redis> LRANGE mylist 0 -1
1) "Hello"
2) "World"
redis> LRANGE myotherlist 0 -1
(empty list or set)
```
Append an element to a list, only if the list exists
Redis Hash command
------------
### HDEL 
``` {.wrap}
HDEL key field [field ...]
```
#### Example
```shell script
redis> HSET myhash field1 "foo"
(integer) 1
redis> HDEL myhash field1
(integer) 1
redis> HDEL myhash field2
(integer) 0
```
Delete one or more hash fields
### HEXISTS 
``` {.wrap}
HEXISTS key field
```
#### Example
```shell script
redis> HSET myhash field1 "foo"
(integer) 1
redis> HEXISTS myhash field1
(integer) 1
redis> HEXISTS myhash field2
(integer) 0
```
Determine if a hash field exists
### HGET 
``` {.wrap}
HGET key field
```
#### Example
```shell script
redis> HSET myhash field1 "foo"
(integer) 1
redis> HGET myhash field1
"foo"
redis> HGET myhash field2
(nil)
```
Get the value of a hash field
### HGETALL 
``` {.wrap}
HGETALL key
```
#### Example
```shell script
redis> HSET myhash field1 "Hello"
(integer) 1
redis> HSET myhash field2 "World"
(integer) 1
redis> HGETALL myhash
1) "field1"
2) "Hello"
3) "field2"
4) "World"
```
Get all the fields and values in a hash
### HINCRBY 
``` {.wrap}
HINCRBY key field increment
```
#### Example
```shell script
redis> HSET myhash field 5
(integer) 1
redis> HINCRBY myhash field 1
(integer) 6
redis> HINCRBY myhash field -1
(integer) 5
redis> HINCRBY myhash field -10
(integer) -5
```
Increment the integer value of a hash field by the given number
### HINCRBYFLOAT 
``` {.wrap}
HINCRBYFLOAT key field increment
```
#### Example
```shell script
redis> HSET mykey field 10.50
(integer) 1
redis> HINCRBYFLOAT mykey field 0.1
"10.6"
redis> HINCRBYFLOAT mykey field -5
"5.6"
redis> HSET mykey field 5.0e3
(integer) 0
redis> HINCRBYFLOAT mykey field 2.0e2
"5200"
```
Increment the float value of a hash field by the given amount
### HKEYS 
``` {.wrap}
HKEYS key
```
#### Example
```shell script
redis> HSET myhash field1 "Hello"
(integer) 1
redis> HSET myhash field2 "World"
(integer) 1
redis> HKEYS myhash
1) "field1"
2) "field2"
```
Get all the fields in a hash
### HLEN 
``` {.wrap}
HLEN key
```
#### Example
```shell script
redis> HSET myhash field1 "Hello"
(integer) 1
redis> HSET myhash field2 "World"
(integer) 1
redis> HLEN myhash
(integer) 2
```
Get the number of fields in a hash
### HMGET 
``` {.wrap}
HMGET key field [field ...]
```
#### Example
```shell script
redis> HSET myhash field1 "Hello"
(integer) 1
redis> HSET myhash field2 "World"
(integer) 1
redis> HMGET myhash field1 field2 nofield
1) "Hello"
2) "World"
3) (nil)
```
Get the values of all the given hash fields
### HMSET 
``` {.wrap}
HMSET key field value [field value ...]
```
#### Example
```shell script
redis> HMSET myhash field1 "Hello" field2 "World"
"OK"
redis> HGET myhash field1
"Hello"
redis> HGET myhash field2
"World"
```
Set multiple hash fields to multiple values
### HSET 
``` {.wrap}
HSET key field value [field value ...]
```
#### Example
```shell script
redis> HSET myhash field1 "Hello"
(integer) 1
redis> HGET myhash field1
"Hello"
```
Set the string value of a hash field
### HSETNX 
``` {.wrap}
HSETNX key field value
```
#### Example
```shell script
redis> HSETNX myhash field "Hello"
(integer) 1
redis> HSETNX myhash field "World"
(integer) 0
redis> HGET myhash field
"Hello"
```
Set the value of a hash field, only if the field does not exist
### HSTRLEN 
``` {.wrap}
HSTRLEN key field
```
#### Example
```shell script
redis> HMSET myhash f1 HelloWorld f2 99 f3 -256
"OK"
redis> HSTRLEN myhash f1
(integer) 10
redis> HSTRLEN myhash f2
(integer) 2
redis> HSTRLEN myhash f3
(integer) 4
```
Get the length of the value of a hash field
### HVALS 
``` {.wrap}
HVALS key
```
#### Example
```shell script
redis> HSET myhash field1 "Hello"
(integer) 1
redis> HSET myhash field2 "World"
(integer) 1
redis> HVALS myhash
1) "Hello"
2) "World"
```
Get all the values in a hash
Redis Sorted set command
------------
### BZPOPMIN
``` {.wrap}
BZPOPMIN key [key ...] timeout
```
#### Example
```shell script
redis> DEL zset1 zset2
(integer) 0
redis> ZADD zset1 0 a 1 b 2 c
(integer) 3
redis> BZPOPMIN zset1 zset2 0
1) "zset1"
2) "a"
3) "0"
```
Remove and return the member with the lowest score from one or more sorted sets, or block until one is available
### BZPOPMAX
``` {.wrap}
BZPOPMAX key [key ...] timeout
```
#### Example
```shell script
redis> DEL zset1 zset2
(integer) 0
redis> ZADD zset1 0 a 1 b 2 c
(integer) 3
redis> BZPOPMAX zset1 zset2 0
1) "zset1"
2) "c"
3) "2"
```
Remove and return the member with the highest score from one or more sorted sets, or block until one is available
### ZADD  {.row-span-2}
``` {.wrap}
ZADD key [NX|XX] [GT|LT] [CH] [INCR] score member [score member ...]
```
#### Example
```shell script
redis> ZADD myzset 1 "one"
(integer) 1
redis> ZADD myzset 1 "uno"
(integer) 1
redis> ZADD myzset 2 "two" 3 "three"
(integer) 2
redis> ZRANGE myzset 0 -1 WITHSCORES
1) "one"
2) "1"
3) "uno"
4) "1"
5) "two"
6) "2"
7) "three"
8) "3"
```
Add one or more members to a sorted set, or update its score if it already exists
### ZCARD 
``` {.wrap}
ZCARD key
```
#### Example
```shell script
redis> ZADD myzset 1 "one"
(integer) 1
redis> ZADD myzset 2 "two"
(integer) 1
redis> ZCARD myzset
(integer) 2
```
Get the number of members in a sorted set
### ZSCORE 
``` {.wrap}
ZSCORE key member
```
#### Example
```shell script
redis> ZADD myzset 1 "one"
(integer) 1
redis> ZSCORE myzset "one"
"1"
```
Get the score associated with the given member in a sorted set
### ZCOUNT 
``` {.wrap}
ZCOUNT key min max
```
#### Example
```shell script
redis> ZADD myzset 1 "one"
(integer) 1
redis> ZADD myzset 2 "two"
(integer) 1
redis> ZADD myzset 3 "three"
(integer) 1
redis> ZCOUNT myzset -inf +inf
(integer) 3
redis> ZCOUNT myzset (1 3
(integer) 2
```
Count the members in a sorted set with scores within the given values
### ZDIFF 
``` {.wrap}
ZDIFF numkeys key [key ...] [WITHSCORES]
```
#### Example