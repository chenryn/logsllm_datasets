allows the attacker to read arbitrary memory relative to the
WebAssembly heap. Lines 4‚Äì5 are then used to report the
value back by caching a value-dependent page. That is, line
4 multiplies the read byte by 4096, aligning it to a memory
page. The page-aligned address is then used in line 5, where
the ùëÅ-th page of WebAssembly‚Äôs heap is accessed. After
speculation, WebAssembly‚Äôs heap can be probed to see which
page was cached, revealing the leaked byte.
In our example, memory is leaked from an address rela-
tive to r15, which points to WebAssembly‚Äôs heap. While the
attacker-controlled offset (rax) is a 64-bit register and covers
the entire address space, it might still be desirable to read ab-
solute addresses, e.g., in case one wants to leak the data from
non-ASLRed sections of the memory. This is easily doable
with a simple modification of the WebAssembly bytecode.
Instead of using a direct call (call opcode in WebAssem-
bly), we can use an indirect call (indirect_call). The JIT
compiler assumes that indirect calls might modify the r15
register, and therefore restores it from the stack when the
1 A:
...
2 call rcx
3 mov
4 mov
5 mov
6 shl
7 mov
; rcx =A, dynamically set
; rsp =& argN of B
; r15 = argN of B
r14 ,[ rsp ]
r15 ,[ r14 +24]
al , [ r15 + rax ] ; al = argN [ ADDRESS ]
eax , 12
al , [ r15 + rax ] ; report back the byte
; eax = leaked byte
Listing 3: Disassembly of the function B with indirect call
callee returns. Listing 3 shows the disassembly of Listing 2
with this simple modification that added lines 3 and 4. Line
3 restores the WebAssembly context register from the stack,
while line 4 reads the heap pointer. However, in speculative
execution with A‚Äôs context, rsp points to one of the argu-
ments passed to A, which is controlled by the attacker. Thus,
the attacker controls the value of the heap pointer, and, by
setting it to 0, can allow absolute memory accesses.
5.4 Evaluation
We now evaluate the efficacy and precision of our attack when
applied for reading arbitrary memory in browsers. We imple-
mented our proof of concept in Firefox 59 on Windows 10
(version 10.0.16299), running on Intel‚Äôs Haswell CPU (Intel¬Æ
Core‚Ñ¢ i5-4690 CPU @3.50GHz). It is worth noting that Fire-
fox, together with other browsers, has recently reduced the
precision of performance counters to 2 milliseconds as a de-
fensive measure against caching-based side channels6. Given
that finding alternative and more precise timing sources is
out of the scope of this paper, we manually increased the
performance counters to the old, more precise, state.
The main part of the proof of concept is a WebAssembly
module that triggers the speculation. The number of specu-
latively executed returns is customizable in the module by
choosing a different recursion depth of function A (ùëÅùê¥); we
set it to 64 return predictions in our experiments. To feed
back the speculatively read value, we used the WebAssembly
heap of our module (from offset 0x4000 to avoid collision with
other variables). To avoid hardware prefetching interference,
we access the heap at a page granularity, i.e., Heap + 0x4000
+ value*4096. After running the speculative code, we access
the WebAssembly heap from JavaScript and measure the
access times of each page. Leaking the entire byte will require
walking 256 memory pages, which would be very slow. To op-
timize this, we split the byte in half (e.g., into (value¬ª4)&0xf
and value&0xf) and leak each nibble separately. This only
requires scanning 16 pages per nibble, i.e., 32 scans per byte.
This could be further optimized to 8 per-bit reads.
Our measurements worked in the following order: (a) Using
JavaScript, write the same pangram from Section 4.4 into a
1024-byte buffer. (b) Compute the offset from the WebAssem-
bly heap to the buffer containing the text. (c) Trigger the
eviction of the feedback cache lines from the cache, by doing
random memory accesses to the same cache line in JavaScript.
(d) Call the WebAssembly module to speculatively execute
6https://developer.mozilla.org/docs/Web/API/Performance/now
9
the gadget from Listing 2, reading the value from the speci-
fied offset. (e) Scan the WebAssembly heap from JavaScript,
and record the access times to each page. (f) Repeat steps
(c)‚Äì(e) 100 times to increase the confidence in the leaked
data. (g) Process the timings, recorded in (e), to find the
page with the fastest average access time. (h) Return the
index of the found page.
In our evaluation, we ran each 1024-byte reading itera-
tion 10 times. Each iteration, on average, took 150 seconds,
i.e., ‚âà55 bps reading speed‚Äîleaking a single byte thus takes
146 ms. Note that the main bottleneck in our measurements
constitutes the code that evicts the cache lines (step (c)). In
our proof of concept, we simply map an L3 cache-sized buffer
in JavaScript and then access each page to the corresponding
cache line. This approach can be further improved by initial-
izing the eviction set prior to attack, and then walking the
smaller set for eviction, as shown in [16].
To measure the accuracy, similar to Section 4.4, we used
Levenshtein distance. The evaluation showed that the read
byte was correct ‚âà80% of the time. Increasing the iterations
or number of speculations will increase the precision, however
at the expense of reading speed. We leave a more accurate
and efficient implementation open for future work.
6 COUNTERMEASURES
Seeing the immense impact of this new attack vector, in this
section, we discuss countermeasures against RSB-based spec-
ulative execution. Furthermore, we will describe the vendor
reactions that followed our responsible disclosure process.
6.1 Possible Mitigations
In the following, we discuss possible mitigation techniques
that can be employed to defend against our attacks.
6.1.1 Hardware-based Mitigations. A naive approach to
get rid of all speculative execution problems in hardware is to
simply disable speculative execution. That would, however,
decrease performance drastically‚Äîmaking branch instruc-
tions serializing and forcing the execution of only a few
instructions (between branches) at a time. Of course, one
could try to enable speculative execution while prohibiting
speculative memory accesses, or at least caching them in spec-
ulation. However, given that memory accesses are already
a bottleneck for modern CPUs, blocking their speculative
execution would incur a significant slowdown.
To counter our first attack in hardware, RSBs could be
flushed by the CPU at every context switch, e.g., during
system calls. Arguably, this will not impose any significant
slowdown on performance, as the predictions after context
switches will mispredict anyway in the vast majority of cases.
In fact, hardware-assisted flushing will be more efficient than
a software-based solution that requires several artificially in-
troduced calls (as implemented right now). Hardware-backed
RSB flushing would reliably prevent our cross-process attack,
even in operating systems that do not flush RSBs themselves.
To counter our second attack, one could scrutinize the
cyclic structure of RSBs and argue that switching to stack-
based implementations mitigates the problem. However, even
triggering misspeculation in a size-bound (16-entry) RSB
is still possible, e.g., by using exceptions in JavaScript, or
relying on bailouts from JIT-compiled code (cf. Section 3).
We believe resorting to a combination of hardware/compiler
solutions would allow more reliable security guarantees to
defend against the second attack.
6.1.2 Compiler-based Mitigations. To study how our sec-
ond attack can be defended against in software, it is natural
to ask how JIT compilers can be hardened. Despite the fact
that the general problem of speculative execution is caused
by hardware, we can make our software environments more
robust to these types of attacks. The importance of this
issue was recently highlighted, when multiple researchers
proposed severe microarchitectural attacks, breaking down
the core assumptions we had about hardware-based isolation
and execution models [22, 26].
For example, JIT compilers can aim to ensure that the code
at call sites cannot be abused with any possible execution
context. The safest bet would be to stop all speculative exe-
cutions at call sites, e.g., by using already-proposed solutions,
such as lfence/mfence instructions (e.g., adding an lfence
instruction after every call instruction). Alternatively, one
could introduce a modified version of a retpoline7 that re-
places all return instructions emitted by JIT compilers by a
construct that destroys the RSB entry before returning:
call return_new ;
speculate :
pause
jmp
add
ret
speculate
return_new :
rsp , 8
; this will speculate
; trap speculation until...
; ...return address is read
;
; return to original addr.
; predict to 
Alternatively, one could improve the memory access sani-
tization in JIT compilers. For example, JIT-compiled code
could always use 32-bit registers as a natural way to con-
strain addresses to a 4 GiB range in memory‚Äîthe current
memory limit in WebAssembly. However, this by itself does
not provide strong security guarantees. As we have shown
in Section 5.3, the base addresses can also be modified in
speculation. Having said this, WebAssembly is a relatively
new addition to browsers, and new features are still being fre-
quently suggested/developed. Each of these feature needs to
be reevaluated in our context. In particular, the proposals to
add exception handling and threading support to WebAssem-
bly need to be carefully revisited. Built-in exception handling
will allow RSB speculation even with a non-cyclic RSB, while
adding WebAssembly support for threading might introduce
new precise timing side-channels.
Regardless of the precise countermeasure, one can limit
the overhead of compiler-based defenses. In particular, code
parts that are guaranteed to be secure against all potential
7https://support.google.com/faqs/answer/7625886
10
abuses (e.g., possibly speculated code that does not have
memory accesses) can be left as is.
6.1.3 Browser-based Mitigations. One of the directions
that browser vendors take to mitigate side-channel attacks
is to deprive the attackers of precise timings. Having no
timers, adversaries cannot distinguish between cached and
non-cached memory accesses, which is a fundamental require-
ment for cache- and timing-based side-channel attacks. Given
the complexity of JavaScript environments, merely decreas-
ing the performance.now counter (as done in most browsers)
is insufficient. For example, Gras et al. [14] showed that
SharedArrayBuffer can be used to acquire a timing source
of nanosecond precision, while Schwarz et al. [34] studied
different timing sources in modern browsers, ranging from
nanosecond to microsecond precision. Approaches presented
in academia thus aim to advance this protection to the next
level. For example, the ‚ÄúDeterministic Browser‚Äù from Cao
et al. [6] tries to tackle the issue by proposing deterministic
timers, so that any two measurements from the same place
will always result in the same timing value, thus making
it useless for the attacker. In another study, Kohlbrenner
and Shacham [23] propose Fuzzyfox, which aims to eliminate
timers by introducing randomness, while also randomizing
the execution to remove indirect time sources. Motivated by
these works, and by the recent discovery of Spectre, browsers
decreased their timing precision to 2 milliseconds, while also
introducing a jitter, such that the edge thresholding technique
shown by Schwarz et al. [34] is also mitigated.
Alternatively, browsers can alleviate the threats by stronger
isolation concepts. In the most extreme case, browsers can
add dedicated processes for each entity (e.g., per site) to
enforce a strict memory separation and to isolate pages from
each other. By doing so, one can guarantee that even with a
severe vulnerability at hand, such as arbitrary memory read,
adversaries are constrained to read memory of the current per-
page process. Reportedly, modern browsers already consider
this technique, e.g., Chrome uses a dedicated sandboxed
process per domain [13], while Firefox plans to switch to
a similar architecture in the near future. While isolation
prevents cross-page data leaks, it still allows leaking sensitive
pointers of the current process. This effectively evades ASLR
and can be used as a preparation for exploiting potential
browser vulnerabilities with code-reuse attacks.
6.2 Responsible Disclosure
Seeing the severity of our findings, we have reported the
documented attacks to the major CPU vendors (Intel, AMD,
ARM), OS vendors (Microsoft, Redhat) and browser devel-
opers (Mozilla, Google, Apple, Microsoft) in April 2018, and
subsequently engaged in follow-up discussions. In the follow-
ing, we will summarize their reactions and our risk analysis.
Intel: Intel acknowledged this ‚Äúvery interesting‚Äù issue of
RSB-based speculative execution and will further review the
attack and its implications. Their immediate advice is to
resort to mitigations similar to Spectre is to defend against
our attack (see Section 6.1); this is, however, subject to
change as part of their ongoing RSB investigations that we
triggered.
Mozilla Foundation: The Mozilla Foundation likewise ac-
knowledged the issue. They decided to refrain from using
compiler-assisted defenses, as they would seemingly require
complex changes to JIT-compiled and C++ code. Instead,
they aim to remove all (fine-granular) timers from Firefox to
destroy caching-based feedback channels. Furthermore, they
referred to an upcoming Firefox release that includes time
jittering features similar to those described in FuzzyFox [23],
which further harden against accurate timers.
Google: Google acknowledged the problem in principle
also affects Chrome. Similar to Firefox, they do not aim to
address the problem with compiler-assisted solutions. Instead,
they also refer to inaccurate timers, but more importantly,
focus on a stronger isolation between sites of different origins.
Chrome‚Äôs so-called Site Isolation prevents attackers from
reading across origins (e.g., sites of other domains). However,
as discussed in Section 6.1, this does not mitigate the problem
that attackers can break ASLR with our attack technique.
AMD / ARM: Although we have not tested our attacks
against ARM and AMD architectures, they acknowledged
the general problem.
Microsoft: Microsoft has acknowledged the problem and is
working on fixes, but has not disclosed technical details yet.
Apple: As of 07/23/2018, we have not heard back from
Apple yet.
Redhat: Redhat was thankful for our disclosure and men-
tioned that the current Spectre defenses (especially flushing
RSBs)‚Äîwithout considering RSB-based attacks‚Äîmight oth-