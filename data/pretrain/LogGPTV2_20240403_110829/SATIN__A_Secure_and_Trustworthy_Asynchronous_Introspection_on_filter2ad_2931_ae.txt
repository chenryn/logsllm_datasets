deployed to protect OS kernel integrity. OSck [18] executes a
veriﬁer process alongside the target kernel and periodically
scans the memory to identify any policy violation. Sig-
Graph [27] proposes to use the graph-based signature to scan
the kernel data structure instance and detect the rootkits that
are capable of manipulating the data structures. Specialized
security tools have been constructed for running on a trusted
virtual machine (VM) to detect any security violation on a
target VM [15], [16], [36].
Zhang et al. [53] ﬁrst propose the concept of using an
isolated device as the integrity monitor. Then, Copilot [33]
utilizes a PCI add-in card to periodically verify the hash
checksum of the kernel static data. Later, several system man-
agement mode (SMM) based introspection mechanisms have
been proposed [8], [24], [47], [48], where HyperCheck [48]
and SPECTRE [47] employ the SMM to outsource the
snapshot of the kernel to a remote server and conduct the
introspection on the server side. HyperSentry [8] performs
the kernel measurement locally by periodically triggering the
host’s SMM via an out-of-band channel. Among SMM-based
security mechanisms, multi-core platforms are only brieﬂy
mentioned in [8] on freezing all cores during the SMM-based
measurement task. The authors of HyperCheck [48] mention
that it could be extended on multi-core processors; however,
there is no detailed design about
introspection
mechanisms are proposed based on other hardware compo-
nents which can check the kernel transparently [14], [42].
Ether [14] proposed an Intel-VT [19] based kernel analyzer to
analyze the software within the virtual machine. LO-PHI [42]
transparently examines the kernel memory snapshots without
exposing any software-based artifacts by using additional
hardware sensors and actuators.
it. Several
B. Synchronous Introspection
A number of synchronous introspection mechanisms [7],
[17], [25], [30], [32], [40], [46] have been proposed to
work on different architectures too. On ARM processors,
SPROBES [17] and TZ-RKP [7] are two TrustZone-based
synchronous introspection mechanisms proposed recently.
SPROBES [17] injects special code into the security-sensitive
kernel handlers so it can dynamically check these handlers in
the secure world and provide the real-time protection for the
normal world. TZ-RKP [7] achieves a similar security goal but
focuses on monitoring the data integrity and optimizing the
rich OS’s performance. Besides utilizing existing hardware-
features of the ARM processor, customized hardware has been
developed to snoop the memory bus and monitor the security-
related writes to the kernel area [25], [29], [30].
C. Hardware-Assisted TEE
Nowadays more and more mechanisms have been proposed
to provide a hardware-assisted trusted execution environment
(TEE) on various hardware architectures [49]. Based on the
ARM TrustZone technology, several works [21], [50]–[52]
are proposed to investigate and enhance the security of the
TrustZone secure world. Meanwhile, TrustZone has been
utilized to enhance the security of applications running in
the normal world against a malicious rich OS [12], [38],
[44]. Santos et al. [38] propose to run the security-sensitive
piece of the normal world .NET apps within the secure world.
TrustICE [44] provides the solution to allocate the isolated
environment for any normal world application, and Cho et
al. [12] extend this idea for isolating both normal world
application and the hypervisor. Besides the ARM hardware
architecture, SICE [9] introduced the SMM-based isolated
environment for x86 multi-core platforms. SICE can provide
the remote attestation for the user to verify the integrity of
the kernel within its isolated environment. Based on SMM,
it is plausible to port our secure asynchronous introspection
on X86 multi-core processors. Several works about the recent
Intel hardware feature SGX [6], [10], [39] are also capable
of measuring the integrity of the kernel running in the SGX
enclave and providing remote attestation. However, since SGX
enclaves are scheduled by the host OS, the SGX technique
cannot be used to perform asynchronous introspection against
the host OS.
IX. CONCLUSION
In this paper, we propose a trustworthy and practical
TrustZone-based asynchronous introspection mechanism for
ARM multi-core platform. We ﬁrst show that on multi-core
systems, even if the secure world uses a random core to inspect
the rich OS kernel at random time point as previous asyn-
chronous introspection solutions do, the malware in the normal
world can still escape from the security checking by utilizing
the race condition between the detector running on one core
and the malicious evader running on other cores at the same
time. We identify this new type of evasion attack as TZ-Evader
and conduct a systematic study on it. We develop a proof-
of-concept TZ-Evader attack that uses an accurate kernel-
level prober to defeat the existing asynchronous introspection.
Finally, we develop a secure TrustZone-based asynchronous
introspection mechanism called SATIN on multi-core ARM
processors to defeat the TZ-Evader attacks. We implement
a prototype of SATIN on ARM Juno r1 development board
and the experimental results show that SATIN can effectively
prevent evasion attacks on multi-core systems with a minor
overhead.
X. ACKNOWLEDGMENTS
This work is partially supported by the U.S. ONR grant
N00014-16-1-3214, ONR grant N00014-16-1-3216, ONR
grant N00014-18-2893, NSFC grant 61572278, and NSFC
grant U1736209.
299
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] ARM, “Programmer’s guide for armv8-a,” 2015, http://infocenter.arm.
com/help/topic/com.arm.doc.den0024a/DEN0024A v8 architecture
PG.pdf.
[2] ——, “Arm exception table,” 2018, http://infocenter.arm.com/help/index.
jsp?topic=/com.arm.doc.den0024a/CHDEEDDC.html.
[3] ——, “Arm trusted ﬁrmware,” 2018, https://github.com/ARM-software/
arm-trusted-ﬁrmware.
[4] ——,
“Juno
Arm Development
Platform,”
2018,
https:
//developer.arm.com/products/system-design/development-boards/
juno-development-board.
[5] ARM Community, “Arm linaro instruction,” 2018, https://community.
arm.com/dev-platforms/w/docs/303/juno.
[6] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe,
J. Lind, D. Muthukumaran, D. O’Keeffe, M. Stillwell et al., “Scone:
Secure linux containers with intel sgx.” in OSDI, vol. 16, 2016, pp.
689–703.
[7] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma,
and W. Shen, “Hypervision across worlds: Real-time kernel protection
from the arm trustzone secure world,” in Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security. ACM,
2014, pp. 90–102.
[8] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky,
“Hypersentry: enabling stealthy in-context measurement of hypervisor
integrity,” in Proceedings of the 17th ACM conference on Computer and
communications security. ACM, 2010, pp. 38–49.
[9] A. M. Azab, P. Ning, and X. Zhang, “Sice: a hardware-level strongly
isolated computing environment for x86 multi-core platforms,” in Pro-
ceedings of the 18th ACM conference on Computer and communications
security. ACM, 2011, pp. 375–388.
[10] A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from an
untrusted cloud with haven,” ACM Transactions on Computer Systems
(TOCS), vol. 33, no. 3, p. 8, 2015.
[11] F. Brasser, D. Kim, C. Liebchen, V. Ganapathy, L. Iftode, and A.-R.
Sadeghi, “Regulating arm trustzone devices in restricted spaces,” in
Proceedings of the 14th Annual International Conference on Mobile
Systems, Applications, and Services, ser. MobiSys ’16, 2016, pp. 413–
425.
[12] Y. Cho, J.-B. Shin, D. Kwon, M. Ham, Y. Kim, and Y. Paek, “Hardware-
assisted on-demand hypervisor activation for efﬁcient security critical
code execution on mobile devices.” in USENIX Annual Technical Con-
ference, 2016, pp. 565–578.
[13] Corbet, “How fast should hz be?” 2005, https://lwn.net/Articles/145973/.
[14] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, “Ether: malware analysis
via hardware virtualization extensions,” in Proceedings of the 15th ACM
conference on Computer and communications security. ACM, 2008,
pp. 51–62.
[15] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Gifﬁn, and W. Lee, “Virtuoso:
Narrowing the semantic gap in virtual machine introspection,” in Secu-
rity and Privacy (SP), 2011 IEEE Symposium on.
IEEE, 2011, pp.
297–312.
[16] Y. Fu and Z. Lin, “Space traveling across vm: Automatically bridging
the semantic gap in virtual machine introspection via online kernel data
redirection,” in Security and Privacy (SP), 2012 IEEE Symposium on.
IEEE, 2012, pp. 586–600.
[17] X. Ge, H. Vijayakumar, and T. Jaeger, “Sprobes: Enforcing kernel code
integrity on the trustzone architecture,” arXiv preprint arXiv:1410.7747,
2014.
[18] O. S. Hofmann, A. M. Dunn, S. Kim, I. Roy, and E. Witchel, “En-
suring operating system kernel integrity with osck,” in ACM SIGARCH
Computer Architecture News, vol. 39, no. 1. ACM, 2011, pp. 279–290.
[19] Intel, “Intel virtualization technology,” 2018, https://www.intel.com/
content/www/us/en/data-center/new-center-of-possibility.html.
[20] B. Jain, M. B. Baig, D. Zhang, D. E. Porter, and R. Sion, “Sok:
Introspections on trust and the semantic gap,” in Security and Privacy
(SP), 2014 IEEE Symposium on.
IEEE, 2014, pp. 605–620.
[21] J. S. Jang, S. Kong, M. Kim, D. Kim, and B. B. Kang, “Secret: Secure
channel between rich execution environment and trusted execution
environment.” in NDSS, 2015.
[22] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection through
vmm-based out-of-the-box semantic view reconstruction,” in Proceed-
ings of the 14th ACM conference on Computer and communications
security. ACM, 2007, pp. 128–138.
[23] M. A. Kinsy, S. Khadka, M. Isakov, and A. Farrukh, “Hermes: Secure
heterogeneous multicore architecture design,” in 2017 IEEE Interna-
tional Symposium on Hardware Oriented Security and Trust (HOST),
May 2017, pp. 14–20.
[24] K. Leach, C. Spensky, W. Weimer, and F. Zhang, “Towards transpar-
ent introspection,” in Software Analysis, Evolution, and Reengineering
(SANER), 2016 IEEE 23rd International Conference on, vol. 1.
IEEE,
2016, pp. 248–259.
[25] H. Lee, H. Moon, I. Heo, D. Jang, J. Jang, K. Kim, Y. Paek, and
B. Kang, “Ki-mon arm: A hardware-assisted event-triggered monitoring
platform for mutable kernel object,” IEEE Transactions on Dependable
and Secure Computing, 2017.
[26] Lev Aronsky, “Knoxout-bypassing samsung knox,” 2016, http://media.
wix.com/ugd/4e84e6 668d564cc447434a9a8fda3c13a63f6a.pdf.
[27] Z. Lin, J. Rhee, X. Zhang, D. Xu, and X. Jiang, “Siggraph: Brute
force scanning of kernel data structure instances using graph-based
signatures.” in Ndss, 2011.
[28] Linaro, “Optee secure os,” 2018, https://github.com/OP-TEE/optee\ os.
[29] Z. Liu, J. Lee, J. Zeng, Y. Wen, Z. Lin, and W. Shi, Cpu transparent
protection of os kernel and hypervisor integrity with programmable
dram. ACM, 2013.
[30] H. Moon, H. Lee, J. Lee, K. Kim, Y. Paek, and B. B. Kang, “Vigilare:
toward snoop-based kernel integrity monitor,” in Proceedings of the 2012
ACM conference on Computer and communications security. ACM,
2012, pp. 28–37.
[31] Ozan (oz) Yigit, “Hash functions,” 2018, http://www.cse.yorku.ca/∼oz/
hash.html.
[32] B. D. Payne, M. Carbone, M. Sharif, and W. Lee, “Lares: An architecture
for secure active monitoring using virtualization,” in Security and
Privacy, 2008. SP 2008. IEEE Symposium on.
IEEE, 2008, pp. 233–
247.
[33] N. L. Petroni Jr, T. Fraser, J. Molina, and W. A. Arbaugh, “Copilot-a
coprocessor-based kernel runtime integrity monitor.” in USENIX Security
Symposium. San Diego, USA, 2004, pp. 179–194.
[34] N. L. Petroni Jr and M. Hicks, “Automated detection of persistent kernel
control-ﬂow attacks,” in Proceedings of the 14th ACM conference on
Computer and communications security. ACM, 2007, pp. 103–115.
[35] Project Zero, “Lifting the (hyper) visor: Bypassing samsung’s real-time
kernel protection,” 2017, https://googleprojectzero.blogspot.com/2017/
02/lifting-hyper-visor-bypassing-samsungs.html.
[36] A. Saberi, Y. Fu, and Z. Lin, “Hybrid-bridge: Efﬁciently bridging the
semantic gap in virtual machine introspection via decoupled execution
and training memoization,” in Proceedings of the 21st Annual Network
and Distributed System Security Symposium (NDSS’14), 2014.
[37] Samsung Electronics Co. Ltd., “White paper: An overview of
https://kp-cdn.samsungknox.com/
platform,”
samsung
the
6ee7dbf222f5eabeafea9d15e3986f09.pdf.
[38] N. Santos, H. Raj, S. Saroiu, and A. Wolman, “Using arm trustzone
to build a trusted language runtime for mobile applications,” ACM
SIGARCH Computer Architecture News, vol. 42, no. 1, pp. 67–80, 2014.
[39] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-
Ruiz, and M. Russinovich, “Vc3: Trustworthy data analytics in the cloud
using sgx,” in Security and Privacy (SP), 2015 IEEE Symposium on.
IEEE, 2015, pp. 38–54.
[40] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: A tiny hypervisor
to provide lifetime kernel code integrity for commodity oses,” in ACM
SIGOPS Operating Systems Review, vol. 41, no. 6. ACM, 2007, pp.
335–350.
[41] B. Smith, R. Grehan, T. Yager, and D. Niemi, “Byte-unixbench: A unix
knox
benchmark suite,” 2011.
[42] C. Spensky, H. Hu, and K. Leach, “Lo-phi: Low-observable physical
host instrumentation for malware analysis.” in NDSS, 2016.
[43] H. Sun, K. Sun, Y. Wang, J. Jing, and S. Jajodia, “Trustdump: Reliable
memory acquisition on smartphones,” in In Proc. European Symposium
on Research in Computer Security, 2014.
[44] H. Sun, K. Sun, Y. Wang, J. Jing, and H. Wang, “Trustice: Hardware-
assisted isolated computing environments on mobile devices,” in De-
pendable Systems and Networks (DSN), 2015 45th Annual IEEE/IFIP
International Conference on.
IEEE, 2015, pp. 367–378.
[45] J. Wang, K. Sun, and A. Stavrou, “A dependability analysis of hardware-
assisted polling integrity checking systems,” in Dependable Systems and
Networks (DSN), 2012 42nd Annual IEEE/IFIP International Confer-
ence on.
IEEE, 2012, pp. 1–12.
300
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply. 
[46] Z. Wang, X. Jiang, W. Cui, and P. Ning, “Countering kernel rootkits
with lightweight hook protection,” in Proceedings of the 16th ACM
conference on Computer and communications security. ACM, 2009,
pp. 545–554.
[47] F. Zhang, K. Leach, K. Sun, and A. Stavrou, “Spectre: A dependable
introspection framework via system management mode,” in Dependable
Systems and Networks (DSN), 2013 43rd Annual IEEE/IFIP Interna-
tional Conference on.
IEEE, 2013, pp. 1–12.
[48] F. Zhang, J. Wang, K. Sun, and A. Stavrou, “Hypercheck: A hardware-
assisted integrity monitor,” IEEE Transactions on Dependable and
Secure Computing, vol. 11, no. 4, pp. 332–344, 2014.
[49] F. Zhang and H. Zhang, “Sok: A study of using hardware-assisted
isolated execution environments for security,” in Proceedings of the
Hardware and Architectural Support for Security and Privacy 2016.
ACM, 2016, p. 3.
[50] N. Zhang, H. Sun, K. Sun, W. Lou, and Y. T. Hou, “Cachekit: Evading
memory introspection using cache incoherence,” in 2016 IEEE European
Symposium on Security and Privacy (EuroS&P).
IEEE, 2016, pp. 337–
352.
[51] N. Zhang, K. Sun, W. Lou, and Y. T. Hou, “Case: Cache-assisted secure
execution on arm processors,” in Security and Privacy (SP), 2016 IEEE
Symposium on.
IEEE, 2016, pp. 72–90.
[52] N. Zhang, K. Sun, D. Shands, W. Lou, and Y. T. Hou, “Truspy: Cache
side-channel information leakage from the secure world on arm devices.”
IACR Cryptology ePrint Archive, vol. 2016, p. 980, 2016.
[53] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer, “Secure
the 10th
ACM, 2002, pp.
coprocessor-based intrusion detection,” in Proceedings of
workshop on ACM SIGOPS European workshop.
239–242.
301
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:54:30 UTC from IEEE Xplore.  Restrictions apply.