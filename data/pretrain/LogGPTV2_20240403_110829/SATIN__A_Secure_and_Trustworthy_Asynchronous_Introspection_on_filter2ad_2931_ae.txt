### Deployed Solutions for Protecting OS Kernel Integrity

**OSck [18]** executes a verifier process alongside the target kernel, periodically scanning memory to identify any policy violations. **Sig-Graph [27]** proposes using graph-based signatures to scan kernel data structure instances, detecting rootkits capable of manipulating these structures. Specialized security tools have been developed to run on a trusted virtual machine (VM) to detect security violations in a target VM [15], [16], [36].

**Zhang et al. [53]** first introduced the concept of using an isolated device as an integrity monitor. **Copilot [33]** utilizes a PCI add-in card to periodically verify the hash checksums of kernel static data. Subsequently, several system management mode (SMM) based introspection mechanisms have been proposed [8], [24], [47], [48]. **HyperCheck [48]** and **SPECTRE [47]** employ SMM to outsource the kernel snapshot to a remote server for introspection. **HyperSentry [8]** performs local kernel measurements by periodically triggering the host’s SMM via an out-of-band channel. Among SMM-based security mechanisms, multi-core platforms are briefly mentioned in [8] for freezing all cores during SMM-based measurement tasks. The authors of HyperCheck [48] mention the potential extension to multi-core processors, but no detailed design is provided.

Several other introspection mechanisms are based on hardware components that can check the kernel transparently [14], [42]. **Ether [14]** proposes an Intel-VT [19] based kernel analyzer for software within the virtual machine. **LO-PHI [42]** transparently examines kernel memory snapshots without exposing software-based artifacts, using additional hardware sensors and actuators.

### Synchronous Introspection Mechanisms

A number of synchronous introspection mechanisms [7], [17], [25], [30], [32], [40], [46] have been proposed for different architectures. On ARM processors, **SPROBES [17]** and **TZ-RKP [7]** are two recent TrustZone-based synchronous introspection mechanisms. **SPROBES [17]** injects special code into security-sensitive kernel handlers, dynamically checking these handlers in the secure world and providing real-time protection for the normal world. **TZ-RKP [7]** achieves a similar security goal but focuses on monitoring data integrity and optimizing the rich OS's performance. Customized hardware has also been developed to snoop the memory bus and monitor security-related writes to the kernel area [25], [29], [30].

### Hardware-Assisted Trusted Execution Environment (TEE)

Increasingly, mechanisms have been proposed to provide a hardware-assisted TEE on various architectures [49]. Based on ARM TrustZone technology, several works [21], [50]–[52] investigate and enhance the security of the TrustZone secure world. Additionally, TrustZone has been utilized to enhance the security of applications running in the normal world against a malicious rich OS [12], [38], [44]. **Santos et al. [38]** propose running security-sensitive .NET apps within the secure world. **TrustICE [44]** provides a solution to allocate an isolated environment for any normal world application, and **Cho et al. [12]** extend this idea to isolate both normal world applications and the hypervisor. For x86 multi-core platforms, **SICE [9]** introduces an SMM-based isolated environment, providing remote attestation for users to verify the kernel's integrity. Several works on the recent Intel SGX feature [6], [10], [39] measure the integrity of the kernel running in the SGX enclave and provide remote attestation. However, since SGX enclaves are scheduled by the host OS, SGX cannot be used for asynchronous introspection against the host OS.

### Conclusion

In this paper, we propose a trustworthy and practical TrustZone-based asynchronous introspection mechanism for ARM multi-core platforms. We demonstrate that even if the secure world uses a random core to inspect the rich OS kernel at random time points, as previous asynchronous introspection solutions do, malware in the normal world can still evade security checks by exploiting race conditions between the detector running on one core and the malicious evader running on other cores. We identify this new type of evasion attack as **TZ-Evader** and conduct a systematic study on it. We develop a proof-of-concept TZ-Evader attack that uses an accurate kernel-level prober to defeat existing asynchronous introspection. Finally, we develop a secure TrustZone-based asynchronous introspection mechanism called **SATIN** for multi-core ARM processors to counter TZ-Evader attacks. We implement a prototype of SATIN on the ARM Juno r1 development board, and experimental results show that SATIN effectively prevents evasion attacks on multi-core systems with minimal overhead.

### Acknowledgments

This work is partially supported by the U.S. ONR grants N00014-16-1-3214, N00014-16-1-3216, and N00014-18-2893, and NSFC grants 61572278 and U1736209.

---

**References**

[1] ARM, “Programmer’s guide for armv8-a,” 2015, http://infocenter.arm.com/help/topic/com.arm.doc.den0024a/DEN0024A v8 architecture PG.pdf.
...
[53] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer, “Secure coprocessor-based intrusion detection,” in Proceedings of the 10th ACM SIGOPS European workshop. ACM, 2002, pp. 239–242.