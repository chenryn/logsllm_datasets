https://
eprint.iacr.org/2021/176.
[7] Vivek Bagaria, Joachim Neu, and David Tse.
Boomerang: Redundancy Improves Latency and
In FC,
Throughput in Payment-Channel Networks.
2020.
[8] Jan Camenisch and Anna Lysyanskaya. A Formal Treat-
ment of Onion Routing. In CRYPTO, 2005.
[9] Ran Canetti, Yevgeniy Dodis, Rafael Pass, and Shabsi
Walﬁsh. Universally Composable Security with Global
Setup. In TCC, 2007.
[10] G. Danezis and I. Goldberg. Sphinx: A Compact and
Provably Secure Mix Format. In IEEE S&P, 2009.
[11] Stefan Dziembowski, Lisa Eckey, Sebastian Faust, Julia
Hesse, and Kristina Hostáková. Multi-party Virtual State
Channels. In EUROCRYPT, 2019.
[12] Stefan Dziembowski, Lisa Eckey, Sebastian Faust, and
Daniel Malinowski. PERUN: Virtual Payment Channels
over Cryptographic Currencies. In IEEE S&P, 2019.
[13] Christoph Egger, Pedro Moreno-Sanchez, and Matteo
Maffei. Atomic Multi-Channel Updates with Constant
Collateral in Bitcoin-Compatible Payment-Channel Net-
works. In CCS, 2019.
[14] Shaﬁ Goldwasser, Silvio Micali, and Ronald L Rivest. A
digital signature scheme secure against adaptive chosen-
message attacks. SIAM Journal on computing, 1988.
[15] Lewis Gudgeon, Pedro Moreno-Sanchez, Stefanie Roos,
Patrick McCorry, and Arthur Gervais. SoK: Off The
Chain Transactions. In FC, 2020.
[16] Rachid Guerraoui and Jingjing Wang. How Fast can a
Distributed Transaction Commit? In PODS, 2017.
[17] Maurice Herlihy, Liuba Shrira, and Barbara Liskov.
Cross-chain Deals and Adversarial Commerce. VLDB,
2019.
[18] Aggelos Kiayias and Orfeas Stefanos Thyfronitis Litos.
A Composable Security Treatment of the Lightning Net-
work. In CSF, 2019.
[19] Giulio Malavolta, Pedro Moreno-Sanchez, Aniket Kate,
Matteo Maffei, and Srivatsan Ravi. Concurrency and
Privacy with Payment-Channel Networks. In CCS, 2017.
[20] Giulio Malavolta, Pedro Moreno-Sanchez, Clara Schnei-
dewind, Aniket Kate, and Matteo Maffei. Anonymous
Multi-Hop Locks for Blockchain Scalability and Inter-
operability. In NDSS, 2019.
[21] Andrew Miller, Iddo Bentov, Ranjit Kumaresan, and
Patrick McCorry. Sprites: Payment Channels that Go
Faster than Lightning. In FC, 2019.
[22] Joseph Poon and Thaddeus Dryja. The Bitcoin Light-
ning Network: Scalable Off-Chain Instant Payments,
2016.
https://lightning.network/lightning-
network-paper.pdf.
[23] EmelyanenkoK (pseudonym). Payment channel con-
https://github.com/
gestion via spam-attack.
lightningnetwork/lightning-rfc/issues/182.
[24] Stefanie Roos, Pedro Moreno-Sanchez, Aniket Kate, and
Ian Goldberg. Settling Payments Fast and Private: Ef-
ﬁcient Decentralized Routing for Path-Based Transac-
tions. In NDSS, 2018.
[25] Vibhaalakshmi Sivaraman, Shaileshh Bojja Venkatakr-
ishnan, Kathleen Ruan, Parimarjan Negi, Lei Yang, Rad-
hika Mittal, Giulia C. Fanti, and Mohammad Alizadeh.
High Throughput Cryptocurrency Routing in Payment
Channel Networks. In NSDI, 2020.
[26] James W Stamos and Flaviu Cristian. Coordinator log
transaction execution protocol. Distributed and Parallel
Databases, 1993.
[27] Stefan Thomas and Evan Schwartz.
col for interledger payments, 2015.
interledger.org/interledger.pdf.
A proto-
https://
[28] Sergei Tikhomirov, Pedro Moreno-Sanchez, and Matteo
Maffei. A Quantitative Analysis of Security, Anonymity
In IEEE
and Scalability for the Lightning Network.
S&B Workshop, 2020.
[29] Nicolas Van Saberhagen. Cryptonote v 2.0, 2018.
https://cryptonote.org/whitepaper.
[30] Bin Yu, Shabnam Kasra Kermanshahi, Amin Sakzad,
and Surya Nepal. Chameleon Hash Time-lock Contract
for Privacy Preserving Payment Channel Networks. In
Conference on Provable Security, 2019.
[31] Alexei Zamyatin, Mustafa Al-Bassam, Dionysis Zindros,
Eleftherios Kokoris-Kogias, Pedro Moreno-Sanchez,
Aggelos Kiayias, and William J. Knottenbelt. SoK:
In FC,
Communication Across Distributed Ledgers.
2021.
4056    30th USENIX Security Symposium
USENIX Association
A Discussion on practical deployment
Payment fees We encode a fee mechanism in our con-
struction. For simplicity, we assume that every intermediary
charges the same fee amount: fee. However, it is trivial to
extend this mechanism to allow for different fees. The sender
initially puts an amount α0 := α + fee· (n− 1) in the output
θi,0. Every intermediary now deducts fee from this amount
when opening the construction with its own right neighbor.
Speciﬁcally, an intermediary Ui receives αi−1 and forwards
only αi := αi−1− fee. Thereby, every intermediary effectively
gains fee coins in the case of a successful payment.
Refund tradeoff In the case of a refund, where a fast refund
(see Section 3) is not possible, the sender has to publish txer.
Doing this will have the cost of publishing this transaction
(and possibly the transaction containing its input) plus the
(n− 1)· ε that go to the intermediaries. The amount ε can
be the smallest possible amount of cash, since it is just used
to enable the payment. In other words, for Bitcoin we can
say ε := 1 satoshi1, which is currently around 0.00011 USD.
However, the refund of Blitz payments has a fundamental
advantage over the one in the Lightning Network (LN). The
refund time is only consant in the worst case and if the sender
is honest, is only the time it takes to publish txer (i.e., ∆)
instead of n· ξ. We presented this advantage in Section 3.
So the tradeoff is a more expensive, but much faster refund.
This immensely reduces the effect of grieﬁng attacks and
increases the overall transaction throughput.
Race We already mentioned that only the sender can publish
txer and because of the time delays, the timing is the same
for every user on the path. We claimed that the latest possible
time to safely publsih txer and still be able to claim the refund
is T −tc−3∆. However, there is a time frame after T −tc−3∆
up until T −tc − 2∆, where the sender could publish txer and
i would be sent to the ledger before time T . However
still, txr
now, everyone is at risk, because we said that accepting a
transaction takes at most ∆ time and at time T , already txp
i
might be sent to the ledger and there might be a race over
which of these two transactions is accepted ﬁrst. We argue,
that a sender will not do this, as this puts himself at the same
risk as ever other intermediary. For a way of preventing this
race entirely, we defer the reader to the full version [6].
Obfuscate the length of the path By adding additional
dummy outputs (that belong to fresh addresses of the sender)
to txer, a sender can obfuscate the path length. Note that the
rList has to include some random values as well, so that it has
the same number of elements as txer has outputs. Note that
by looking at the time lock in the LN, the path length or at
least ones position within the path is leaked to some degree.
1In practice, Bitcoin transactions need to carry a total amount of one
dust, which is 546 satoshis. Having individual outputs of one satoshi is not a
problem, as the sender can include an additional output to a stealth address
under its control, such that the sum is greater than one dust. In txr
i , the output
of txer holding one satoshi is combined with the ﬁrst output of the state
txstate, resulting in a sum larger than one dust.
Extended privacy discussion As mentioned in Section 4.1,
Blitz achieves sender, receiver and path privacy, which pro-
vide a measure of privacy in the case of a successful payment.
To hide the path from users observing txer, we use stealth
addresses for the outputs of txer. This allows to have path
privacy as deﬁned in Section 4.1, where malicious intermedi-
aries cannot determine the participants of the payment other
than their direct neighbors. We stress that as in the LN, the
stronger notion of relationship anonymity [19] does not hold.
Two users can link a payment by comparing the transaction
txer in Blitz, or the hash value in the LN.
To make an on-chain linking of the sender impossible,
we require the input of txer to be fresh and unlinkable to the
sender. In practice, this can be achieved as follows. The sender
creates off-chain an intermediary transaction txin that spends
from an output under the sender’s control txsdr to a newly
generated address of the sender, never used before. Then, txer
uses this output with the new address of txin as input. Since
txin is off-chain, users observing txer are unable to link the
payment to an on-chain identity. Again, this is due to inputs
referring to a transaction hash plus an id of the output.
In the pessimistic case, these properties do not hold any-
more. If the transactions go on-chain, they can be linked
together by observing a shared transaction txer or time T . The
same holds true in the LN, where transactions that spend from
an HTLC with the same hash value, can be linked.
Redundancy for improving throughput and latency Rout-
ing a payment through a path can fail or be delayed due to
unknown channel balances, ofﬂine or malicious users or other
reasons. Following Boomerang [7], a sender can construct
several redundant payments across several paths, that differ
in one or more users. For this, the sender creates a transac-
tion txer for each of these redundant payments and forwards
them. Intermediary users have to open a payment construction
(build txr
i ) for every txer that they receive.
i and txp
Should an intermediary user have a choice of forwarding
a payment to several different neighbors, it can choose one
and start a fast refund (Section 3) for the other payments.
Should several different payments reach the receiver, it can
start the fast refund for all but one of them. In the worst case,
if the sender sees that after some time more than one payment
is active, it can start the refund by publishing the according
transaction txer. With this, the sender can ensure that at most
one of the redundant payments is carried out. This technique
is useful to improve transaction throughput and latency and
we achieve it without any additional cryptography.
Concurrent payments Two parties of a payment channel
can achieve concurrent payments as follows. They agree to
(cid:48),
update their current channel state txstate
to a new state txstate
where any unresolved in-ﬂight Blitz payments are carried over.
More concretely, for every unresolved payment the transac-
i are recreated, but the input for these trans-
tions txr
actions is changed from using an output of txstate
to using
(cid:48). Afterwards, the right user’s signature
an output of txstate
i and txp
i
i
i
i
USENIX Association
30th USENIX Security Symposium    4057
i
i is given to the left user and only then, the old state
for txr
is revoked using the revocation technique in the LN
txstate
(outlined in Appendix C). In other words, the same channel
state-management of the LN is reused in Blitz, but chang-
ing the HTLC contract for the Blitz contract. We show an
illustrative example of concurrent payments in Figure 9.
B 1-phase commits in distributed databases
The concepts of 1-phase commits [2, 3, 26] and one-two
commit [4] have been studied for distributed databases in gen-
eral. These protocols introduce recovery mechanisms such
as coordinator Log [26], implicit Yes-Vote [3] or logical log-
ging [2] towards avoiding the voting/commit/prepare phase of
2-phase commits. However, extending observation by Herlihy,
Liskov, and Shrira [17], traditional 1-phase commit ideas are
not directly applicable to PCNs: while PCNs (with blockchain-
based conﬂict resolution) are structurally similar to transac-
tions over distributed database, they are fundamentally dif-
ferent in terms of the ACID properties and the adversarial
assumptions. Nevertheless, analyses such as [16] can still be
interesting to understand lower-bounds for PCNs.
C Payment channels in more detail
In this section, we give a more detailed account on pay-
ment channels. A payment channel is used by two parties
P and Q to perform several payments between them while
requiring only two on-chain transactions. It is set up by two
parties spending some coins to a shared multisig output (i.e.,
an output θ with θ.φ := MultiSig(P,Q)). Before signing and
publishing this transaction however, they create transactions
(so called commitment transactions txc) that spend this shared
output in some way, e.g., giving each party some balance. We
also refer to this as the (current) state of the channel. Now af-
ter publishing this txf on-chain, they can update their balances
by creating new commitment transactions txc, rebalancing the
funds of the channel and thereby carrying out payments. We
note that there are implementations that use two commitment
transactions per state (in other words, one per party) such
as the Lightning Network (LN) [22] whereas a more recent
construction called generalized channels [5] requires one com-
mitment transaction per state. In this work, we leverage the
latter construction, although other ledger channel protocols
such as the one of the LN would work as well.
After a channel has been updated several times, there exist
several txc that can be published. In order to prevent misbe-
havior, where one party publishes an older state of the channel,
which perhaps is ﬁnancially more advantageous to it, we em-
ploy a punishment mechanism. If an old state is published,
the other, honest user can carry out this punishment to gain
all funds of the channel. For this to work, both parties ex-
change revocation secrets every time a state is succeeded by
a new one. This secret, together with the outdated txc that
is published by the misbehaving user is enough to claim all
funds of the channel. The latest state can always be safely
published as the corresponding revocation secret was not yet
revealed. This mechanism provides an economical incentive
not to publish an old txc.
To close a payment channel, the parties can merely publish
the latest txc to the ledger, which terminates the channel. In
summary, two parties can use a payment channel to carry out
arbitrary many off-chain payments that rebalance some funds,
but only need to publish two transactions on the blockchain,
one to open the channel and one to close it, saving both fees
and increasing the cryptocurrency’s transaction throughput.
D Concrete attack scenarios (informal)
In this section, we consider some attacks against Blitz and
argue informally, why balance security still holds.
txer is tampered If txer is tampered by some intermediary,
the next intermediary will see that the message embedded in
the routing information is not H (txer) anymore. Assuming
that a malicious intermediary does not know the routing in-
formation especially not the receiver, changing the routing
information will result in the receiver not being reached.
Also, note that balance security holds even in the case
where txer is tampered, as long as every intermediary Ui
i depends on the same txer as the
makes sure, that its refund txr
refund of its neighbor txr
i−1. Also note, that intermediaries
have to ensure the same for the time T , in order to have the
same time as their neighbor. Should an intermediary change
the time T to a smaller value, it potentially only hurts itself
by not being able to refund in time, while its left neighbor
actually is. If the time T is changed to a larger value, this may
delay the execution of the payment, however it is detectable,
if the receiver sends this time T back to the sender, who can
check if it was tampered.
Some users are skipped (wormhole) Users cannot be
skipped, as the routing information can only be opened by the
next user. A malicious user would not know the receiver and
would not be able to forge the sender’s signature of H (txer)
that is embedded as a message to the receiver in this onion.
The only thing for the malicious user is to stop forwarding
the payment (grieﬁng attack). Users that are skipped in the
fast-track payment will not be cheated out of their fees or
funds, rather this money will be locked until at most until T
instead of being accessible immediately (see Section 3).
Sender publishes txer after starting fast track Assume a
malicious sender started the fast track with its neighbor, but
the fast track updates have not yet reached the receiver. Should
the sender now publish txer, the intermediaries that did not yet
perform the fast track will refund. The receiver will say that
it did not receive the money and will not ship the promised
product. The sender cannot prove that the receiver got the
money, even though it has the payment conﬁrmation in form
of the receiver’s signature of txer. The transaction txer on the
blockchain is a proof of revocation, and the sender will have
lost its money without getting anything in return. The sender
should thus not publish txer after starting the fast track.
4058    30th USENIX Security Symposium
USENIX Association
txer
...
ε
...
+tc + ∆
pkUi
txstate
i
αi
xUi − αi