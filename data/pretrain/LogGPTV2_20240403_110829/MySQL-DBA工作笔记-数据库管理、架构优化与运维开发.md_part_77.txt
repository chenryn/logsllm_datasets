（2）因为过度依赖防火墙备注信息，所以自动化程度不高。
（1）对于防火墙备注信息依赖较重，而备注信息可能不准确。
（2）reload iptables文件生效。
（1）通过修改服务端的 iptables 文件，然后添加权限信息。
系统权限管理的操作过程步骤如下：
从上面的处理逻辑可以看出，输入了3个IP地址，我们根据网段信息得到，应该创
系统权限管理
C
图14-6
第14章MySQL运维管理模块设计丨499
PI:EMAIL%
下
---
## Page 522
500丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
板为：
程序端来统一标识，比如【业务描述】【操作人】
标识来动态添加。比如我们可以在系统中统一添加如下的标签：
iptables save 的方式。
80
14.3.2
们继续。
（6）防火墙权限需要添加备注，
#devopsdb firewall tag
（2）标签的使用方式，经过评估目前较好的一种方案是在 iptabls 中添加 comment 属性。
（1）防火墙生成策略在 iptables 文件生效，然后使用 reload 的方式来加载，避免使用
（5）防火墙的规范设置，需要设定一个统一的标签标识，开通防火墙需要根据这个
从功能实现上我做了如下的一些设计：
所以我们需要梳理一套可行的规范和机制来实现自动化的管理，沿着这个思路，我
（4）如果已经有防火墙权限信息，则不会重复添加。
（3）可以支持单个服务器权限开通和批量的防火墙添加。
系统权限管理的设计方案
state
pg_hba.conf
Host-Based Authentication Controls
ADD NEW ENTRY
--state
NEW
，标识业务描述、操作人和日期（注释的规范可以在
IOADVER
图14-7
ACCEPT
【操作日期】)，例如一个标识的模
comment
---
## Page 523
于一个达成共识的统一标签，通过 iptables reload 生效。
会不够清晰，如图14-8 所示。
一的功能，暂时不考虑在接口层实现批量化，批量化任务是通过调用统一的接口来实现。
访问，做到精细化地权限管理。
14-9所示。
够快速找到该业务、实例所涉及的权限。
信息。
比如IP区间开通权限的逻辑建议在平台后端来做，否则后期防火墙层面的信息提取
iptables 管理的规则是模块化，比如添加指定IP，配置端口，添加 IP 段等，保证实现单
（9）先封装一个接口，然后可以和公司的IT 部门一起来完善，这样就知道谁有权限
如果要查询权限信息，也可以反向根据逻辑来得到一个相对完整的权限列表，如图
（8）做业务、实例隔离，或者说提供良好的查询接口，便于运维人员在做迁移时能
（7）支持防火墙信息的查询和确认，使用 iptables -nvL 进行过滤。
开通部分的基本逻辑就是把防火墙开通的明细推送到 iptables 文件，添加的基准是基
以上的信息是对服务器172.15.1.80开通了80端口，通过注释信息可以看到一些辅助
系统权限开通
客户端IP列表
实例IP信息
操作用户
申请用户
描述信息
4306
图14-8
第14章MySQL运维管理模块设计|501
开通权限查看权限
---
## Page 524
502丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
不需要登录到每台服务器上去验证。
哪些服务器给它赋予了权限。因为这个信息是在表数据模型中来查询，所以速度会很快，
样一来，权限的变更都是统一的入口，类似如下图14-10所示的处理流程。
以支撑这样一类看似复杂的业务。
端口 8000的权限，在这种场景下我们可以选择基于模型来进行处理，和系统层的交付足
14.3.3
完成一个权限总线模块。
（2）权限的开通，我们可以引入审核机制，这样权限的管理就是一个完整的闭环。
我们可以基于此，设计一些补充的场景，大体有以下几个：
我们还可以根据多个维度来查询权限，权限的信息都是根据数据模型进行下发，这
（1）我们输入客户端的IP，来查看在目前指定服务器列表或者全量服务器列表中，
比如原本一个很复杂的功能,查询 IP192.168.1.20 的服务器在哪些服务器上具有访问
通过不断完善，你就发现你可以做更多的事情，比如你可以基于这样的设计思路来
设计一个权限管理总线
系统权限查询
数据库运维系统
192.168217
192.168.18
192.168.1
192.168209
10.3018
客户端IP
实例IP信息
端口列表
申请人
图14-10
权限模型
图14-9
20190117
20190117
20190117
20190117
20190117
申请时间
荣
操作人
开通访问运维的权限
开通方问运维的权限
开通访问运统的权限
描述
开通
干通
访问运维系的权限
查看权限开通权限
问运维系权限
系统
---
## Page 525
我还是可以正常抄送，避免密码在文件中直接出现，也同时保证了密码是专人专用。
分，后4位通过即时通信工具发送给业务同学，而前16位则通过邮件告知，这样邮件内容
图14-11的形式。
有这样的专员，那么做这个事情就难有章法了。
时加密可以使用多种加密算法，就算得到解密串，也不一定能够轻松得到真实密码。
配置文件里就是加密串，程序会有对应的解密方法去解密它。
可以发送给业务同学了，业务同学也压根不需要去了解真正的密码，直接使用即可，在
把密码交给加密专员，由专员加密，然后返回给DBA的就是一个加密串，这个加密串就
如果里面都是明文密码，是很不规范的。
畴很简单的，但是密码如何管理。我们直接发给他，通过即时通信工具还是通过邮件，
一点GitHub 已经踩过坑了，国内的一些论坛也中过招，也就是通常听说的撞库。
果使用密码本身带来了一系列的问题，那么密码反而成为了直接使用者的一个累赘。
14.4
透明的，对于一些不规范，不明确的需求就可以做到收敛。
，这种方法好处很明显，加解密是完全解耦的，而且可以恢复流程得到明文密码，同
我们把密码分成了两个部分，比如密码是20位，那么前16位是一部分，后4位是一部
但是这样有一个成本就是这个事情是不是需要专门的一个人来做，很多公司可能没
我来举一个流程，比如业务同学需要申请一个数据库账号，那么这个操作的技术范
如果存储明文密码，显然不是个好主意。而且从安全的角度来说，是会被喷的。这
运维管理中，我们总是会碰到各种各样的密码，其实对于密码的管理就是一个痛点。
（4）可以建立模型对已有的权限体系进行梳理，从而发掘出一些不合理的权限配置。
至少从迭代的角度来说，我们可以做到的就是把密码分部分发送，发送流程类似下
套路2：通过密码拆分解耦合
DBA会生成一个随机密码，对于这个密码，DBA压根不会去关心它的值，而是直接
套路1：通过第三方加密解耦合
我们是这么做的。
从使用效率上来说，我们希望密码的管理能够更加的透明，至少能够省事一些，
从密码的安全性上来说，我们希望它的长度和加密算法足够复杂。
（3）权限的变更，都是通过统一的接口去下发，这样一来我们对于权限的管理就是
密码管理的三种套路
1-7
第14章MySQL运维管理模块设计|503
，如
---
## Page 526
504丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
为不可抗因素导致信息丢失，是很可能恢复不了这些数据的。
理不够规范，因为你记录的密码信息只有你熟悉，别人没法直接参与进来，而且一旦因
密码。这种客户端密码管理软件有个好处是管理起来足够方便，不好的地方就是密码管
对于密码存储逻辑的一些基本需求如下：
所以对于这个部分我做了初步的设计，就是把密码管理范围进行了限定。
对于很多的账号信息，都有对应的密码，我们可能是用KeyPass 或者KeePass 来存储
套路3：通过密码加解密保安全
这样一来这个密码就是相对安全的。
邮件提示类似下图14-12所示的形式。
收件人
发件人：yangjr
用户密码：kzgG1BHQcoZ（后4位单独发送)
申请客户端IP：
申请对象：
申请数据库：
截止日期：2018-07-30
端口：4306
申请人：杨建荣
单据类型：DBA权限处理协作单
DBA权限单号：
MIS工单：
大小：4KB
时间：2018年7月31日（周二）16:05
.03..3.100
图14-12
图14-11
3
前X位
咨码
言息
即时通讯提示
2018-07-31
---
## Page 527
到明文密码，如图14-14所示。
AES 加密串，因为随机密码是不规律的，所以哪怕解析了加密密码也是无法直接反向得
我们通过一个随机密码作为 AES 加密的秘钥来对明文密码进行加密，数据库里面只存储
安全的。这种情况我们可以用另外一种方式做下补充，也就是上图14-13中的随机密码，
Show10entries
新增码记境
可能有的同学会有一个疑问，MD5加密算法是可逆的，那么我们的密码其实还是不
下图14-13是一个基本的密码信息管理界面。
（4）可以通过接口的方式来提供权限访问，而不是直接返回密码。
（3）加密算法是可逆的，但是算法细节不公开。
（2）读取时根据权限进行过滤，只对指定用户开放密码查询权限。
（1）密码在数据库中要加密存储。
BtySQL业务
MySQL业务
MySQL业务
ySQL业务
MySQL业务
MySQL业务
MySQL业务
MySOL业务
MySQL业9
NUL
1306
司
NULL
机密码
NULL
NULL
nysqi
mysql
NULL
连接字符串
图14-14
AES加密
图14-13
明文密码
第14章MySQL运维管理模块设计|505
GSZHIBxX45VIq8
BKsTvHAEba5i8F
Bn63uFP14RIKsD
辅机密码
8CmfkX2sNoYeL9
Jcmd5zyxF
G童O
Q
GO
GO
GO
操作
?
。
0
---
## Page 528
506丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
就是一个故障自愈的雏形了，如下图14-15所示。
介入之前，借助故障自愈也能够让这个故障处理的紧急度缓和许多。
我们的工作来说，是极有成就感的。
渠道获得报警信息，但是很快得到了自动解决，通过即时通信软件告诉你搞定了，对于
们的工作而言，是很有成就感的，从被动的角度来说，我们可以通过短信、微信之类的
以通过指定的入口来查看系统自动优化了多少次，提前避免了多少故障修复，这对于我
案，那就是故障自愈。
之前，我们会把阈值调低一些，把问题提前修复，这是一种临时解决方案，还有一类方
情况，在大周末的时间专门去处理这类的问题，其实是很没有成就感的。因此在节假日
那就是阈值的处理，但是如果阈值设为80%，那么有时候报警信息是80.5%，80.1%这种
问题会直接关系到业务的可持续访问，需要慎重对待：一般会把如果这个工作前置一些
的结论和解决方法，但是相对来说，这个问题的解决思路其实很清晰。但是磁盘空间的
14.5
就阐述一下基于磁盘空间的故障自愈方案。
自愈，然后预留一些时间稍后完成分析，对我们的工作幸福度会大大提升，接下来我们
能预见发生的时间，出问题的时候再处理会很被动，如果能够优先恢复业务，实现故障
钟就可以搞定。
个做密码的维护和更新，统一管理起来。这样原来至少得花费你一天的工作，现在分分
式来映射，就可以通过后台跑批量任务来校验密码信息是否正确，然后我们可以基于这
对安全而且可控的。
每次密码的提取和操作时，我们都可以对随机密码进行调整，这样一来整个流程都是相
前前后后我设计了两版针对磁盘空间自动修复的方案，把这些信息都汇总起来，也
在这些问题之外，有些特别的问题是不能自动解决了，这个需要人工介入，在人工
对于日常运维来说，磁盘空间报警是一种常见的问题，但是大多数情况下，我们不
。同样我们还可以对这种方案做一个大的改进，比如有1000套环境，我们按照这种方
对于我们工作来说，我把问题的修复分为主动和被动，从主动的角度来说，我们可
在以前的工作中，就经常碰到磁盘空间不足的警告，当然从不同的维度能得到不同
解密的流程是反向的，我们使用AES 加密串根据随机密码（秘钥）来得到明文密码，
基于磁盘空间故障自愈的设计方案
---
## Page 529
图14-15
主动触发方式
第14章MySQL运维管理模块设计”
507
---
## Page 530
508丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
更细一些。
境可以设定备份策略为全库备份，备份频率为一天到三天。
务器，也是考虑了备份机的可用性。
业务维度的并发调度，一个是基于时间维度的调度。
是在从库进行，在主从间需要控制好主从延迟等情况。
合起来，为此备份和恢复的设计应该是一体化的，我们需要做一个全景图（图14-16)。
14.6.1
进行细化，最后会介绍基于调度机制的备份优化。
上不断的打磨，保障整个备份和恢复的流程化。
恢复有一个清晰地定位和规划，目标是能够实现 MySQL 备份恢复的平台化操作，在细节
基本解决这一
果，而不是通过人为的控制和操作。所以借助于周期性调度和事件触发方式，相信能够
步的实现故障自愈的方法解决了。
决不了的则先做一个初步的分析，在分析基础之上，如果能够再进一步沉淀，就可以逐
以把这个空间释放出来，尽快响应业务需求。
14.6
在备份的设置中，可以根据数量和业务优先级来设定不同的备份策略，比如测试环
备份任务方面需要考虑深入接入调度，能够完成两个维度的调度任务，
对于线上优先级较高的业务则需要考虑全库备份和增量备份，日志备份的粒度也要
对于备份的部分，根据备份结果集的类型不同分为了数据备份服务器和日志备份服
本小节我们会讨论备份恢复的全景图，并从自动化设计的角度对备份和恢复的方案