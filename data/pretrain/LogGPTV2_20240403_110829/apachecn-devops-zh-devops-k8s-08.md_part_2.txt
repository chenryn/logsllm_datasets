这里，我们在 pod 规范中指定了对 CPU 和内存的请求和限制。它表示 pod 不能超过指定的配额，否则将无法启动:
```
// check the deployment state
# kubectl get deployment
NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx     4         3         2            3           2d  
```
可用的 PODS 变成了四个而不是两个，但是仍然不等于我们想要的四个。出了什么问题？如果我们后退一步，检查我们的资源配额，我们可以发现我们已经使用了所有的 PODS 配额。由于默认情况下部署使用滚动更新部署机制，因此需要大于 4 的 pod 号，这正是我们之前设置的对象限制:
```
# kubectl describe resourcequota project1-resource-quota
Name:             project1-resource-quota
Namespace:        project1
Resource          Used  Hard
--------          ----  ----
limits.cpu        900m  4
limits.memory     900Mi 4Gi
pods              4     4
requests.cpu      300m  4
requests.memory   450Mi 16Gi
requests.storage  0     64Gi  
```
通过`kubectl edit resourcequota project1-resource-quota`命令将 Pod 配额从`4`修改为`8`后，部署有足够的资源启动 Pod 。一旦`Used`配额超过`Hard`配额，资源配额接纳控制器将拒绝该请求，否则，将更新资源配额使用以确保充足的资源分配。
Since ResourceQuota won't affect already created resources, sometimes we might need to tweak the failed resources, such as deleting an empty change set of RS or scale up and down Deployment, in order to let Kubernetes create new pods or RS which will soak the latest quota limits.
# 具有默认计算资源限制的请求单元
我们还可以为名称空间指定默认的资源请求和限制。如果我们在 pod 创建期间没有指定请求和限制，将使用默认设置。诀窍是使用`LimitRange`资源对象。一个`LimitRange`对象包含一组`defaultRequest`(请求)和`default`(限制)。
LimitRange is controlled by the LimitRanger admission controller plugin. Be sure you enable it if you launch a self-hosted solution. For more information, check out the admission controller section in this chapter.
下面是我们设置`cpu.request`为`250m`、`limits`为`500m`、`memory.request`为`256Mi`、`limits`为`512Mi`的例子:
```
# cat 8-1-3_limit_range.yml
apiVersion: v1
kind: LimitRange
metadata:
 name: project1-limit-range
spec:
 limits:
 - default:
 cpu: 0.5
 memory: 512Mi
 defaultRequest:
 cpu: 0.25
 memory: 256Mi
 type: Container
// create limit range
# kubectl create -f 8-1-3_limit_range.yml
limitrange "project1-limit-range" created  
```
当我们在这个名称空间中启动 pods 时，我们不需要随时指定`cpu`和`memory`请求以及`limits`，即使我们在 ResourceQuota 中设置了总限制。
The unit of CPU is core, which is an absolute quantity. It can be an AWS vCPU, a GCP core or a hyperthread on a machine with hyperthreading processor equipped. The unit of memory is a byte. Kubernetes uses the first alphabet or power-of-two equivalents. For example, 256M would be written as 256,000,000, 256 M or 244 Mi.
此外，我们可以在“限制范围”中设置 pod 的最小和最大 CPU 和内存值。它作为默认值的作用不同。默认值仅在 pod 规范不包含任何请求和限制时使用。最小和最大约束用于验证 pod 是否请求过多资源。语法是`spec.limits[].min`和`spec.limits[].max`。如果请求超过最小值和最大值，将从服务器中抛出禁止。
```
limits: 
   - max: 
      cpu: 1 
      memory: 1Gi 
     min: 
      cpu: 0.25 
      memory: 128Mi 
    type: Container 
```
Quality of service for pods: There are three QoS classes for pods in Kubernetes: Guaranteed, Burstable and BestEffort. It's tied together with the namespace and resource management concept we learned above. We also learned QoS in [Chapter 4](04.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e), *Working with Storage and Resources*. Please refer to the last section *Kubernetes Resource Management* in [Chapter 4](04.html#3279U0-6c8359cae3d4492eb9973d94ec3e4f1e), *Working with Storage and Resources* for recap.
# 删除命名空间
就像任何其他资源一样，删除一个名称空间就是`kubectl delete namespace `。请注意，如果删除一个命名空间，与该命名空间相关联的所有资源都将被收回。
# 忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈忽必烈
Kubeconfig 是一个文件，您可以使用它通过切换上下文来切换多个集群。我们可以使用`kubectl config view`查看设置。以下是`kubeconfig`文件中 minikube 集群的示例。
```
# kubectl config view
apiVersion: v1
clusters:  
- cluster:
 certificate-authority: /Users/k8s/.minikube/ca.crt
 server: https://192.168.99.100:8443
 name: minikube
contexts:
- context:
 cluster: minikube
 user: minikube
 name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube
 user:
 client-certificate: /Users/k8s/.minikube/apiserver.crt
 client-key: /Users/k8s/.minikube/apiserver.key
```
就像我们之前学的一样。我们可以使用`kubectl config use-context`来切换集群进行操作。我们也可以使用`kubectl config --kubeconfig=`来指定我们想要使用哪个`kubeconfig`文件。将只使用指定的文件。我们也可以通过环境变量`$KUBECONFIG`来指定`kubeconfig`文件。这样，配置文件可以被合并。例如，以下命令将合并`kubeconfig-file1`和`kubeconfig-file2`:
```
# export KUBECONFIG=$KUBECONFIG: kubeconfig-file1: kubeconfig-file2  
```
你可能会发现我们之前没有做任何特定的设置。那么`kubectl config view`的输出来自哪里呢？默认情况下，它存在于`$HOME/.kube/config`下。如果没有设置上述任何一项，将加载该文件。
# 服务帐户
与普通用户不同的是，**服务帐户**由 pod 内部的进程用来联系 Kubernetes API 服务器。默认情况下，Kubernetes 集群为不同的目的创建不同的服务帐户。在 GKE，已经创建了许多服务帐户:
```
// list service account across all namespaces
# kubectl get serviceaccount --all-namespaces
NAMESPACE     NAME                         SECRETS   AGE
default       default                      1         5d
kube-public   default                      1         5d
kube-system   namespace-controller         1         5d
kube-system   resourcequota-controller     1         5d
kube-system   service-account-controller   1         5d
kube-system   service-controller           1         5d
project1      default                      1         2h
...  
```
Kubernetes 将在每个名称空间中创建一个默认服务帐户，如果在 pod 创建期间 pod 规范中没有指定服务帐户，将使用该帐户。让我们看看默认服务帐户是如何为我们的`project1`命名空间服务的:
```
# kubectl describe serviceaccount/default
Name:       default
Namespace:  project1
Labels:           
Annotations:      
Image pull secrets:     
Mountable secrets:      default-token-nsqls
Tokens:                 default-token-nsqls  
```
我们可以看到服务帐户基本上是使用可挂载的机密作为令牌。让我们深入了解一下令牌中包含哪些内容:
```
// describe the secret, the name is default-token-nsqls here
# kubectl describe secret default-token-nsqls
Name:       default-token-nsqls
Namespace:  project1
Annotations:  kubernetes.io/service-account.name=default
              kubernetes.io/service-account.uid=5e46cc5e- 
              8b52-11e7-a832-42010af00267
Type: kubernetes.io/service-account-token
Data
====
ca.crt:     # the public CA of api server. Base64 encoded.
namespace:  # the name space associated with this service account. Base64 encoded
token:      # bearer token. Base64 encoded
```
机密将被自动装入目录`/var/run/secrets/kubernetes.io/serviceaccount`。当 pod 访问 API 服务器时，API 服务器将检查证书和令牌以进行身份验证。服务帐户的概念将在以下几节中介绍。
# 认证和授权
从 DevOps 的角度来看，身份验证和授权非常重要。身份验证会验证用户，并检查用户是否真的是他们所代表的自己。另一方面，授权检查用户的权限级别。Kubernetes 支持不同的身份验证和授权模块。
下面是一个插图，显示了 Kubernetes API 服务器在接收到请求时如何处理访问控制。
![](img/00117.jpeg)
Access control in API server
当请求到达应用编程接口服务器时，首先，它通过在应用编程接口服务器中的**证书颁发机构** ( **CA** )验证客户端的证书来建立 TLS 连接。API 服务器中的 CA 通常在`/etc/kubernetes/`，客户端的证书通常在`$HOME/.kube/config`。握手之后，进入认证阶段。在 Kuberentes 中，认证模块是基于链。我们可以使用多个身份验证和授权模块。当请求到来时，Kubernetes 将逐个尝试所有授权码，直到成功。如果请求在所有身份验证模块上都失败，它将作为 HTTP 401 Unauthorized 被拒绝。否则，其中一个身份验证器会验证用户的身份，并且请求会得到验证。然后 Kubernetes 授权模块将开始发挥作用。它将验证用户是否有权执行一组策略要求他们执行的操作。授权模块也是基于链的。它不断尝试每个模块，直到成功。如果请求在所有模块上都失败了，它将得到一个 HTTP 403 禁止响应。准入控制是应用编程接口服务器中的一组可配置插件，用于确定请求是被允许还是被拒绝。在这个阶段，如果请求没有通过其中一个插件，那么请求会被立即拒绝。
# 证明
默认情况下，服务帐户是基于令牌的。当您使用默认服务帐户创建服务帐户或命名空间时，Kubernetes 会创建令牌并将其存储为由 base64 编码的机密，并将该机密作为卷装入 pod。然后，pod 内部的进程能够与集群进行对话。另一方面，用户帐户代表普通用户，他们可能使用`kubectl`直接操纵资源。
# 服务帐户身份验证
当我们创建服务帐户时，Kubernetes 服务帐户准入控制器插件会自动创建一个签名的承载令牌。
在[第 7 章](07.html#4REBM0-6c8359cae3d4492eb9973d94ec3e4f1e)、*持续交付*中，在我们演示如何进行`my-app`部署的示例中，我们创建了一个名为`cd`的命名空间，并使用脚本`get-sa-token.sh`([https://github . com/DevOps-wit-Kubernetes/examples/blob/master/Chapter 7/get-sa-token . sh](https://github.com/DevOps-with-Kubernetes/examples/blob/master/chapter7/get-sa-token.sh))为我们导出令牌。然后我们通过`kubectl config set-credentials  --token=$TOKEN`命令创建一个用户`mysa`: