# InCTF 复现
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者:DR[@03](https://github.com/03 "@03")@星盟
## md-notes
###  环境搭建
####  docker遇到报错1
Sending build context to Docker daemon 32.26kB  
Step 1/16 : FROM golang:alpine  
—-> cfae2977b751  
Step 2/16 : RUN apk —no-cache add build-base  
—-> Running in edbf89a8989c  
fetch   
WARNING: Ignoring :
temporary error (try again later)  
fetch   
WARNING: Ignoring :
temporary error (try again later)  
ERROR: unable to select packages:  
build-base (no such package):  
required by: world[build-base]  
The command ‘/bin/sh -c apk —no-cache add build-base’ returned a non-zero
code: 1
####  解决方法1
换源
在第二句上面增加一句RUN sed -i ‘s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g’
/etc/apk/repositories
####  docker遇到报错2
然后问题是go:
github.com/gomarkdown/[markdown@v0.0.0](mailto:markdown@v0.0.0)-20210514010506-3b9f47219fe7:
Get “https://proxy.golang.org/github.com/gomarkdown/markdown/@v/v0.0.0-20210514010506-3b9f47219fe7.mod“:
dial tcp 142.251.43.17:443: connect: connection refused
####  解决方法2
如链接所做
[[go学习]解决golang.org无法访问的问题_zhagzheguo的博客-CSDN博客_golang.org](https://blog.csdn.net/zhagzheguo/article/details/102570450)
###  做题
####  信息搜集
这是一个markdown界面，一般考点在于xss和csrf。
由于是ctf题目，所以不进行端口和whois等信息搜集。
可以尝试路径爆破。
比赛时，我没有尝试过，现在复现时，发现存在很多可知路径，可能是环境搭建的原因，故不深究。部分回显如下
当然，还可以看看有没有源码泄露，备份文件泄露等内容。这里不做尝试，但是这些步骤确实在比赛中应该存在。
#####  app.js
这道题得到的信息来源在于源码，存在app.js
app.js存在网站运行逻辑
    let preview = document.getElementById("preview"),
        save = document.getElementById("save"),
        textarea = document.getElementById("input-area"),
        frame = document.getElementById("frame-area"),
        status = document.getElementById("status"), 
        token = undefined; 
    alert = function(msg) {
        status.innerText = "Info: " + msg; 
    }
    preview.onclick = function() {
        console.log("Sending Preview..")
        frame.contentWindow.postMessage(textarea.value, `http://${document.location.host}/`); 
        return false;
    }
    save.onclick = function() {
        if (token == undefined)
        {
            alert("Preview before saving!")
        } else {
            fetch("/api/create", {
                method: "POST",
                credentials: "include",
                body: JSON.stringify({
                    Hash: token,
                    Raw: textarea.value
                })
            }).then(resp => resp.json())
            .then(response => {
                if (response["Status"] != "success") {
                    alert("Could not save markdown.")
                } else {
                    alert("Saved post to : " + response["Bucket"] + "/" + response["PostId"])
                    frame.src = `http://${document.location.host}/${response['Bucket']}/${response["PostId"]}`
                }
                console.log(response)
                token = undefined
            }); 
        }
        return false; 
    }
    window.addEventListener("message", (event) => {
        if (event.origin != window.origin)
        {
            console.log("Error");
            return false;
        }
        data = event.data
        textarea.value = data["Raw"]
        token = data["Hash"]
    });
preview就是将框内内容传到特定网址，且我们不能改变。
save就是向create POST传参接收bucket和postid作为路径
#####  preview.js
除此之外，在页面源代码中还有一个路径/demo
访问后得到preview.js
    let area = document.getElementById("safe")
    window.addEventListener("message", (event) => {
        console.log("Previewing..")
        let raw = event.data
        fetch("/api/filter", {
            method: "POST",
            credentials: "include",
            body: JSON.stringify({
                raw: raw
            })
        })
        .then(resp => resp.json())
        .then(response => {
            console.log("Filtered")
            document.body.innerHTML = response.Sanitized
            window.parent.postMessage(response, "*"); 
        }); 
    }, false);
向filter POST传参
经过过滤的内容，作为html插入网站
还有window.parent.postMessage
这就是一个漏洞点
在[window.postMessage – Web API 接口参考 | MDN
(mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage)中提到
**当您使用postMessage将数据发送到其他窗口时，始终指定精确的目标origin，而不是*。**
而这道题恰恰使用了*，所以我们可以接收到postmessage的内容。
那么postmessage存在哪些内容呢
我们可以抓包看看
有hash值，sanitizedhtml语句和语句raw。
我们要想访问flag，就需要获取admin的token。
#####  server.go
    package main
    import (
        "os"
        "fmt"
        "log"
        "html"
        "time"
        "strconv"
        "net/http"
        "io/ioutil"
        "math/rand"
        "encoding/hex"
        "database/sql"
        "encoding/json"
        "html/template"
        "crypto/sha256"
        "github.com/gorilla/mux"
        "github.com/nu7hatch/gouuid"
        "github.com/gorilla/handlers"
        _ "github.com/mattn/go-sqlite3"
        "github.com/gomarkdown/markdown"
    )
    var indexTmpl = template.Must(template.ParseFiles("./templates/index.html"))
    var previewTmpl = template.Must(template.ParseFiles("./templates/preview.html"))
    type Unsanitized struct {
        Raw string `json:"raw"`
    }
    type Sanitized struct {
        Sanitized string `json:Sanitized`
        Raw string `json:Raw`
        Hash string `json:Hash`
    }
    type Preview struct {
        Error string
        Data template.HTML
    }
    type CreatePost struct {
        Raw string 
        Hash string
    }
    type Config struct {
        admin_bucket string
        admin_token string
        admin_hash string
        secret string
        modulus int
        seed int
        a int
        c int
    }
    var CONFIG Config
    var db *sql.DB
    func createToken() (string, string) {
        token, _ := uuid.NewV4()
        h := sha256.New()
        h.Write([]byte(token.String() + CONFIG.secret))
        sha256_hash := hex.EncodeToString(h.Sum(nil))
        return string(sha256_hash), token.String()
    }
    func verifyToken(token, input string) bool {
        h := sha256.New()
        h.Write([]byte(token  + CONFIG.secret))
        sha256_hash := hex.EncodeToString(h.Sum(nil))
        if string(sha256_hash) == input {
            return true
        } 
        return false
    }
    func getadminhash() string {
        token := CONFIG.admin_token
        h := sha256.New()
        h.Write([]byte(token + CONFIG.secret))
        sha256_hash := hex.EncodeToString(h.Sum(nil))
        log.Println("Generated admin's hash ", sha256_hash)
        return string(sha256_hash)
    }
    func save_post(bucket, data string) int {
        postid := ((CONFIG.seed * CONFIG.a) + CONFIG.c) % CONFIG.modulus
        CONFIG.seed = postid
        stmt, _ := db.Prepare("INSERT INTO posts(postid, bucket, note) VALUES (?, ?, ?)")
        stmt.Exec(postid, bucket, data)
        return postid
    }
    func sanitize(raw string) string {
        return html.EscapeString(raw)
    }
    func indexHandler(w http.ResponseWriter, r *http.Request) {
        indexTmpl.Execute(w, nil)
    }
    func previewHandler(w http.ResponseWriter, r *http.Request) {
        vars := mux.Vars(r)
        res := Preview{Error: "", Data: ""}
        postid, found := mux.Vars(r)["postid"]
        if found {
            bucketid := vars["bucketid"]
            fmt.Println("Requested for", bucketid, postid)
            id, _ := strconv.ParseInt(postid, 10, 64)
            rows, err := db.Query("SELECT note FROM posts WHERE bucket = ? AND postid = ?", bucketid, id)
            checkErr(err)
            counter := 0
            var note string
            for rows.Next(){
                if err := rows.Scan(&note); err != nil {
                    log.Fatal("Unable to scan results:", err)
                }
                counter++
            }
            if counter == 0 {
                res = Preview{Error: "Note not found.", Data: ""}
            } else if counter != 1 {
                res = Preview{Error: "Could not find notes.", Data: ""}
            } else {
                res = Preview{Error: "", Data: template.HTML(note)}
            }
        } 
        previewTmpl.Execute(w, res)
    }
    func filterHandler(w http.ResponseWriter, r *http.Request) {
        reqBody, _ := ioutil.ReadAll(r.Body)
        w.Header().Set("Content-Type", "application/json")
        var unsanitized Unsanitized
        err := json.Unmarshal(reqBody, &unsanitized)
        if err != nil {
            log.Println("Error decoding JSON. err = %s", err)
            fmt.Fprintf(w, "Error decoding JSON.")
        } else {
            var cookie, isset = r.Cookie("Token") 
            hash, token := createToken()
            sanitized_data := markdown.ToHTML([]byte(sanitize(unsanitized.Raw)), nil, nil)
            if isset == nil {
                if cookie.Value == CONFIG.admin_token {
                    hash = CONFIG.admin_hash
                    token = CONFIG.admin_token
                }
            } 
            cookie = &http.Cookie{Name: "Token", Value: token, HttpOnly: true, Path: "/api"}
            result := Sanitized{Sanitized: string(sanitized_data), Raw: unsanitized.Raw, Hash: hash}
            http.SetCookie(w, cookie)
            json.NewEncoder(w).Encode(result)
        }
    }
    func createHandler(w http.ResponseWriter, r *http.Request) {
        reqBody, _ := ioutil.ReadAll(r.Body)
        w.Header().Set("Content-Type", "application/json")
        type Response struct {
            Status string
            PostId int
            Bucket string
        }
        var createpost CreatePost
        if json.Unmarshal(reqBody, &createpost) != nil {
            log.Println("There was an error decoding json. \n")