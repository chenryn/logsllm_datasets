nothavebeenthoughtofbyothers.But,thatsaid,ifIfindabulkimporterwhichaccepts
XML,I’mdefinitelystoppingmyexplorationanduploadingaXXEdocument,whichleads
me into my actual testing.
Application Testing
Nowthatwehaveanunderstandingofhowourtargetworks,it’stimetostarthacking.At
this stage, some others may use automated scanners to crawl a site, test for XSS, CSRF,
etc. but truthfully, I don’t, at least right now. As such, I’m not going to speak to those
tools, instead focusing on what my “manual” approach looks like.
So, at this stage, I tend to start using the site as is intended, creating content, users,
teams, etc., injecting payloads anywhere and everywhere looking for anomalies and
unexpected behaviour from the site when it returns that content. To do so, I’ll typically
add the payload  to any field which will accept it, and
if I know that a templating engine (e.g., Angular) is being used, I’ll add a payload in the
same syntax, like {{4*4}}[[5*5]]. The reason I use the img tag is because it’s designed to
fail since the image x shouldn’t be found. As a result, the onerror event should execute
theJavaScriptfunctionalert.WiththeAngularpayloads,I’mhopingtoseeeither16or25
whichmayindicatethepossibilityofpassingapayloadtoexecuteJavaScript,depending
on the version of Angular.
Onthatnote,aftersavingthecontent,Ichecktoseehowthesiteisrenderingmycontent,
whetheranyspecialcharactersareencoded,attributesstripped,whethertheXSSimage
payloadexecutes,etc.Thisgivesmeanideaofhowthesitehandlesmaliciousinputand
gives me an idea of what to look for. I typically do not spend a lot of time doing this
or looking for such simple XSS because these vulnerabilities are usually considered low
hanging fruit and often reported quickly.
Asaresult,I’llmoveontomynotesfromthefunctionalmappinganddiggingintotesting
eachareawithparticularattentionbeingpaidtotheHTTPrequestsandresponsesbeing
sentandreceived.Again,thisstagereallydependsonthefunctionalityofferedbyasite.
For example, if a site hosts sensitive file uploads, I’ll test to see if the URLs to those
files can be enumerated or accessed by an anonymous user or someone signed into a
different account. If there is a WYSIWYG, I’ll try intercepting the HTTP POST request and
add additional HTML elements like images, forms, etc.
GettingStarted 161
While I’m working through these areas, I keep an eye out for:
• The types of HTTP requests that change data have CSRF tokens and are validating
them? (CSRF)
• Whether there are any ID parameters that can be manipulated (Application Logic)
• Opportunities to repeat requests across two separate user accounts (Application
Logic)
• Any XML upload fields, typically associated with mass record imports (XXE)
• URL patterns, particularly if any URLs include record IDs (Application Logic, HPP)
• Any URLs which have a redirect related parameter (Open Redirect)
• Any requests which echo URL parameters in the response (CRLF, XSS, Open
Redirect)
• ServerinformationdisclosedsuchasversionsofPHP,Apache,Nginx,etc.whichcan
be leveraged to find unpatched security bugs
A good example of this was my disclosed vulnerability against MoneyBird. Walking
through their functionality, I noticed that they had team based functionality and the
ability to create apps which gave access to an API. When I tested registering the app, I
noticedtheywerepassingthebusinessIDtotheHTTPPOSTcall.So,Itestedregistering
apps against teams I was a part of but should not have had permission to create apps
for.Sureenough,Iwassuccessful,theappwascreatedandIreceivedanaboveaverage
$100 bounty from them.
Atthispoint,it’sbesttoflipbacktoZAPandseewhat,ifany,interestingfilesordirectories
have been found via the brute forcing. You’ll want to review those findings and visit the
specificpages,especiallyanythingwhichmaybesensitivelike.htpasswd,settings,config,
etc.files.Additionally,usingBurp,youshouldnowhaveadecentsitemapcreatedwhich
canbereviewedforpagesthatBurpfoundbutweren’tactuallyvisited.AndwhileIdon’t
dothis,JasonHaddixdiscussesitduringhisDefCon23presentation,HowtoShotWeb,it’s
possibletotakethesitemapsandhaveBurp,andothertools,doautomaticcomparisons
across accounts and user permissions. This is on my list of things to do but until now,
my work has largely been manual, which takes us to the next section.
Digging Deeper
While most of this hacking has been manual, this obviously doesn’t scale well. In order
to be successful on a broader scale, it’s important to automate as much as we can. We
can start with the results from our KnockPy and enumall scans, both of which provide
us with lists of sub domains to checkout. Combining both lists, we can take the domain
names and pass them to a tool like EyeWitness. This will take screen shots from all the
sub domains listed which are available via ports like 80, 443, etc. to identify what the
GettingStarted 162
site looks like. Here we’ll be looking for sub domain take overs, accessible web panels,
continuous integration servers, etc.
We can also take our list of IPs from KnockPy and pass it to Nmap to begin looking for
openportsandvulnerableservices.Remember,thisishowAndyGillmade$2,500from
PornHub, finding an open Memcache installation. Since this can take a while to run,
you’ll want to start this and let it run in the background again. The full functionality of
Nmap is beyond the scope of this book but the command would look like nmap -sSV
-oA OUTPUTFILE -T4 -iL IPS.csv. Here we are telling Nmap to scan the top 1000 most
common ports, give us the service version information for any open ports, write it to an
output file and use our csv file as a list of IPs to scan.
Going back to the program scope, it’s also possible that mobile applications may be in
scope. Testing these can often lead to finding new API endpoints vulnerable to hacking.
Todoso,you’llneedtoproxyyourphonetrafficthroughBurpandbeginusingthemobile
app. This is one way to see the HTTP calls being made and manipulate them. However,
sometimes apps will use SSL pinning, meaning it will not recognize or use the Burp SSL
certificate, so you can’t proxy the app’s traffic. Getting around this is more difficult and
beyond the scope of this book (at least at this time) but there is documentation on how
to address that and Arne Swinnen has a great presentation from BSides San Francisco1
about how he addressed this to test Instagram.
Evenwithoutthat,therearemobilehackingtoolswhichcanhelptestapps.WhileIdon’t
have much experience with them (at least at this time), they are still an option to use.
This includes Mobile Security Framework and JD-GUI, both of which are included in the
ToolschapterandwereusedbyhackerstofindanumberofvulnerabilitiesagainstUber
and it’s API.
If there is no mobile app, sometimes programs still have an extensive API which could
contain countless vulnerabilities - Facebook is a great example. Philippe Harewood
continuestoexposevulnerabilitiesinvolvingaccesstoallkindsofinformationdisclosure
onFacebook.Hereyou’llwanttoreviewthedeveloperdocumentationfromthesiteand
begin looking for abnormalities. I’ve found vulnerabilities testing the scopes provided
by OAuth, accessing information I shouldn’t have access to (OAuth scopes are like
permissions, defining what an application can have access to, like your email address,
profile information, etc). I’ve also found functionality bypasses, using the API to do
thingsIshouldn’thaveaccesstowithafreeaccount(consideredavulnerabilityforsome
companies).YoucanalsotestaddingmaliciouscontentviatheAPIasaworkaroundifa
site is stripping payloads during submission on its website.
Another tool which I’ve only recently started using based on the presentations by Fran
Rosen is GitRob. This is an automated tool which will search for public GitHub repos-
itories of a target and look for sensitive files, including configurations and passwords.
It will also crawl the repositories of any contributors. In his presentations, Frans talks
1https://www.youtube.com/watch?v=dsekKYNLBbc
GettingStarted 163
abouthavingfoundSalesforcelogininformationinacompany’spublicrepowhichledto
a big payout. He’s also blogged about finding Slack keys in public repos, which also led
to big bounties.
Lastly,again,asrecommendedbyFrans,paywallssometimesofferaripeareaforhack-
ing.WhileIhaven’texperiencedthismyself,Fransmentionshavingfoundvulnerabilities
inpaidfunctionalitywhichmostotherhackerslikelyavoidedbecauseoftheneedtopay
fortheservicewhichwasbeingtested.Ican’tspeaktohowsuccessfulyoumightbewith
this,butitseemslikeaninterestingareatoexplorewhilehacking,assumingthepriceis
reasonable.
Summary
With this chapter, I’ve tried to help shed some light on what my process looks like to
helpyoudevelopyourown.Todate,I’vefoundthemostsuccessafterexploringatarget,
understandingwhatfunctionalityitprovidesandmappingthattovulnerabilitytypesfor
testing. However, one of the areas which I’m continuing to explore, and encourage you
to do as well, is automation. There are a lot of hacking tools available which can make
yourlifeeasier,Burp,ZAP,Nmap,KnockPy,etc.aresomeofthefewmentionedhere.It’s
a good idea to keep these in mind as you hack to make better use of your time and drill
deeper. To conclude, here’s a summary of what we’ve discussed:
1. Enumerateallsubdomains(iftheyareinscope)usingKnockPy,enumallRecon-ng
script and IPV4info.com
2. StartZAPproxy,visitthemaintargetsiteandperformaForcedBrowsetodiscover
files and directories
3. Map technologies used with Wappalyzer and Burp Suite (or ZAP) proxy
4. Explore and understand available functionality, noting areas that correspond to
vulnerability types
5. Begin testing functionality mapping vulnerability types to functionality provided
6. Automate EyeWitness and Nmap scans from the KnockPy and enumall scans
7. Review mobile application vulnerabilities
8. Test the API layer, if available, including otherwise inaccessible functionality
9. Look for private information in GitHub repos with GitRob
10. Subscribe to the site and pay for the additional functionality to test
22. Vulnerability Reports
So the day has finally come and you’ve found your first vulnerability. First off, congratu-
lations! Seriously, finding vulnerabilities isn’t easy but getting discouraged is.
My first piece of advice is to relax, don’t get over excited. I know the feeling of being
overjoyedatsubmittingareportandtheoverwhelmingfeelingofrejectionwhenyou’re
tolditisn’tavulnerabilityandthecompanyclosesthereportwhichhurtsyourreputation
on the reporting platform.
I want to help you avoid that. So, first thing’s first.
Read the disclosure guidelines.
OnbothHackerOneandBugcrowd,eachparticipatingcompanylistsinscopeandoutof
scopeareasfortheprogram.Hopefullyyoureadthemfirstsoyoudidn’twasteyourtime.
But if you didn’t, read them now. Make sure what you found isn’t known and outside of
their program.
Here’s a painful example from my past - the first vulnerability I found was on Shopify, if
you submit malformed HTML in their text editor, their parser would correct it and store
the XSS. I was beyond excited. My hunting was paying off. I couldn’t submit my report
fast enough.
Elated,Iclickedsubmitandawaitedmy$500bounty.Instead,theypolitelytoldmethat
it was a known vulnerability and they asked researchers not to submit it. The ticket was
closed and I lost 5 points. I wanted to crawl in a hole. It was a tough lesson.
Learn from my mistakes, READ THE GUIDELINES!
Include Details. Then Include More.
If you want your report to be taken seriously, provide a detailed report which includes,
at a minimum:
• The URL and any affected parameters used to find the vulnerability
• A description of the browser, operating system (if applicable) and/or app version
• Adescriptionoftheperceivedimpact.Howcouldthebugpotentiallybeexploited?
• Steps to reproduce the error
VulnerabilityReports 165
These criteria were all common from major companies on Hackerone including Yahoo,
Twitter,Dropbox,etc.Ifyouwanttogofurther,I’drecommendyouincludeascreenshot
or a video proof of concept (POC). Both are hugely helpful to companies and will help
them understand the vulnerability.
At this stage, you also need to consider what the implications are for the site. For
example, a stored XSS on Twitter has potential to be a very serious issue given the
sheer number of users and interaction among them. Comparatively, a site with limited
interactionamongstusersmaynotseethatvulnerabilityassevere.Incontrast,aprivacy
leak on a sensitive website like PornHub may be of greater importance than on Twitter,
where most user information is already public (and less embarrassing?).
Confirm the Vulnerability
You’vereadtheguidelines,you’vedraftedyourreport,you’veincludedscreenshots.Take
a second and make sure what you are reporting is actually a vulnerability.
For example, if you are reporting that a company doesn’t use a CSRF token in their
headers, have you looked to see if the parameters being passed include a token which
acts like a CSRF token but just doesn’t have the same label?
I can’t encourage you enough to make sure you’ve confirmed the vulnerability before
you submit the report. It can be a pretty big let down to think you’ve found a significant
vulnerability only to realize you misinterpreted something during your tests.
Do yourself the favour, take the extra minute and confirm the vulnerability before you
submit it.
Show Respect for the Company
Based on tests with HackerOne’s company creation process (yes, you can test it as
a researcher), when a company launches a new bug bounty program, they can get
inundated with reports. After you submit, allow the company the opportunity to review
your report and get back to you.
Some companies post their time lines on their bounty guidelines while others don’t.
Balance your excitement with their workload. Based on conversations I’ve had with
HackerOnesupport,theywillhelpyoufollowupifyouhaven’theardfromacompanyin
at least two weeks.
Before you go that route, post a polite message on the report asking if there is any
update.Mosttimescompanieswillrespondandletyouknowthesituation.Iftheydon’t
givethemsometimeandtryagainbeforeescalatingtheissue.Ontheotherhand,ifthe
companyhasconfirmedthevulnerability,workwith themtoconfirmthefixonceit’sbe
done.
VulnerabilityReports 166
In writing this book, I’ve been lucky enough to chat with Adam Bacchus, a new member
of the HackerOne team as of May 2016 who owns the title Chief Bounty Officer and
our conversations really opened my eyes to the other side of bug bounties. As a bit of
background,AdamhasexperiencewithSnapchatwhereheworkedtobridgethesecurity
team with the rest of the software engineering teams and Google, where he worked on
the Vulnerability Management Team and helped run the Google Vulnerability Reward
Program.
Adam helped me to understand that there are a bunch of problems triagers experience
running a bounty program, including:
• Noise: Unfortunately, bug bounty programs receive a lot of invalid reports, both
HackerOne and BugCrowd have written about this. I know I’ve definitely con-
tributed and hopefully this book will help you avoid it because submitting invalid
reports costs time and money for you and bounty programs.
• Prioritization:Bountyprogramshavetofindsomewayofprioritizingvulnerability
remediation. That’s tough when you have multiple vulnerabilities with similar
impact but combined with reports continuously coming in, bounty program face
serious challenges keeping up.
• Confirmations:Whentriagingareport,bugshavetobevalidated.Again,thistakes
time. That’s why it’s imperative that we hackers provide clear instructions and an
explanation about what we found, how to reproduce it and why it’s important.
Simply providing a video doesn’t cut it.
• Resourcing: Not every company can afford to dedicate full time staff to running
a bounty program. Some programs are lucky to have a single person respond to
reports while others have staff split their time. As a result, companies may have
rotatingscheduleswherepeopletaketurnsrespondingtoreports.Anyinformation
gaps or delays in providing the necessary information has a serious impact.
• Writingthefix:Codingtakestime,especiallyifthere’safulldevelopmentlifecycle
including debugging, writing regression tests, staging deployments and finally a
push to production. What if developers don’t even know the underlying cause of
the vulnerability? This all takes time while we, the hackers, get impatient and want
to be paid. This is where clear lines of communication are key and again, the need
for everyone to be respectful of each other.
• Relationship management: Bug bounty programs want hackers to come back.
HackerOne has written about how the impact of vulnerability grows as hackers
submit more bugs to a single program. As a result, bounty programs need to find
a way to strike a balance developing these relationships.
• Press Relations: There is always pressure that a bug might get missed, take too
longtoberesolved,orabountyisperceivedasbeingtoolow,andhackerswilltake
toTwitterorthemedia.Again,thisweighsontriagersandhasimpactsonhowthey
develop relationships and work with hackers.
VulnerabilityReports 167
Havingreadallthis,mygoalisreallytohelphumanizethisprocess.I’vehadexperiences
on both ends of the spectrum, good and bad. However, at the end of the day, hackers
and programs will be working together and having an understanding of the challenges
that each is facing will help improve outcomes all around.
Bounties
If you submitted a vulnerability to a company that pays a bounty, respect their decision
on the payout amount.
According to Jobert Abma (Co-Founder of HackerOne) on Quora How Do I Become a
Successful Bug Bounty Hunter?1:
If you disagree on a received amount, have a discussion why you believe it
deservesahigherreward.Avoidsituationswhereyouaskforanotherreward
without elaborating why you believe that. In return, a company should show