。在使用此语句时，必须对该事件所属数据库拥有EVENT
。RENAMETO子句可用于重命名事件。其他的
---
## Page 673
条
义修饰符。与不同 MySQL 版本所支持的各种索引I值有关的更多详细信息，请参考 CREATE INDEX
样，不
的客户端将被阻塞，一直到该操作执行完成为止；而此时，所有更新将会应用到那个新表上。
目。与索引创建有关的其他信息请参考2.6.4节。
 ADD FULLTEXT [INDEX| KEY] [index_name]
ADD [CONSTRAINT [name]] FOREIGN KEY[fk_name]
ADD[COLUMN](create_definition,...）
ADD [COLUMN]col_name col_definition [FIRST| AFTER col_name]
action的值可以是以下的任何一个。
有些操作不能与其他动作组合使用。如果没有指定任何操作，则 ALTER TABLE 无任何效果。
其中，action指定的是各种修改操作—它们会按顺序依次执行。与操作描述里说明的情况-
对于包含index_option子句的索引定义操作，有些存储引擎允许指定索引算法或其他索引定
在 ALTERTABLE 操作过程中，其他客户端依然可以从原始表里读取数据。那些试图更新该表
index_columns
为MyISAM表或InnoDB表（自MySQL5.6.4起）增加一个FULLTEXT索引。该索引会根据
系。相关语法，请参考CREATETABLE语句条目的描述。
fk_name将变成该索引的名字。reference_definition部分用来定义新外键与父表的关
ID。如果指定了它，那么它会被忽略，除非InnoDB会自动为外键创建一个索引一
index_columns 列表里列出的列构成，该列表由给定表里的一个或多个以逗号分隔的列构
为指定的表增加一个外键定义。这种更改操作只适用于 InnoDB 表。新外键F
CREATE TABLE语句所使用的格式完全相同。
为表增加列或索引。每个 create_definition 都是一个列定义或索引定义，其格式与
ALTER TABLE child
ALTER
ALTE
ALTER TABLE t
则它会成为表的最后一列。
如果指定了 AFTER col_name，
TABLE语句的列定义格式完全相同。如果指定了FIRST关键字，则该列将成为表的第一列；
为表增加一列。其中，col_name是列名，col_definition是列的定义——其格式与CREATE
表选项[DEFAULT]CHARACTERSET可以更改默认的表字符集，但是不能将现有列转换为该
TABLE 语句的最终效果将取决于对 SQL模式 NO_ENGINE_SUBSTITUTION 的具体设置。
TABLE语句的描述）。如果试图要更改某个表，让其使用某种不可用的存储引擎，那么ALTER
对于不同的MySQL版本或不同的存储引擎，允许指定的表选项会有所不同（请参考CREATE
ALTER TABLE SCOre ENGINE=MyISAM CHECKSUM=1;
连表选项的那个逗号可以被省略。
用于指定表选项一
ADD FOREIGN KEY
(index_columns)[index_option]...
(index_columns)reference_definition
TABLE
TABLE
七
里列出的列来创建，这些列都是表里的一个或多个非二进制串列，它们之
ADD
ADD
Y(par_id) REFERENCES parent (par_id) ON DELETE CASCADE;
birth DATE AFTER name;
一它可以作为CREATE TABLE 语句的table_option 部分。用于分隔相
id INT UNSIGNED NOT NULL PRIMARY KEY FIRST;
，则该列将被放置在所指定列的后面。如果未指定列的位置，
E.1SQL语句语法（非复合语句）
一此时，
653
甲
---
## Page 674
654
口
口
 ADD [CONSTRAINT [name]] UNIQUE [INDEX | KEY]
 ADD SPATIAL [INDEX I KEY] [index_name]
ADD[CONSTRAINT[name]]PRIMARY KEY
ADD {INDEXIKEY}[index_name]
句，则将使用新字符集的默认排序规则。
在数据库的字符集。也可以用COLLATE子句来指定一种排序规则。如果省略了COLLATE
charset值会把各个列转换为相应的二进制串数据类型，DEFAULT会把表转换为使用其所
把给定表的默认字符集和所有的非二进制字符列转换为给定的新字符集。其中，binary 的
CONVERT TO CHARACTER SET charSet [COLLATE collation]
COLUMN的相同。
更改定义，而不是更改名字，则必须把相同的名字指定两遍。FIRST 和 AFTER 的作用与 ADD
使用的格式相同，可以包含任何列属性，如NULL、NOT NULL 和DEFAULT。请注意，如果想
而col_definition 是该列的新定义。col_definition 的格式与 CREATE TABLE 语句所
更改指定列的名称和定义。old_col_name和 new_col_name 分别是该列的当前名和新名，
ALTER TABLE grade_event ALTER category DROP DEFAULT;
ALTER TABLEgrade_event ALTER category SET DEFAULT'Q';
有可能会赋予新的隐含默认值，如3.2.3节所述。
修改指定列的默认值：既可以修改为指定的值，也可以删除当前的默认值。对于后一种情况，
ALTER [COLUMN]col_name {SET DEFAULT value I DROP DEFAULT}
ALTER TABLE absence ADD UNIQUE id_date (student_id,date);
考ADDINDEX动作。
为 tbl_name表增加一个唯一值索引l。关于 index_name和 index_columns的指定，请参
ALTER TABLE coordinates ADD SPATIAL (x,y);
NOTNULL。关于index_name的指定，请参考ADDINDEX动作。
这些列都是表里的一个或多个空间类型列，它们之间用逗号隔开。其中的每个列都必须定义为
ALTER TABLE president ADD PRIMARY KEY (last_name, first_name);
操作会导致出错。
请参考 ADD INDEX动作。其中的每个列都必须定义为 NOT NULL。如果主键已经存在，则此
根据给定列添加一个主键。在指定主键时需要带上 PRIMARY。关于index_columns的指定，
会自动选择第一个索引列的名字作为此索引的名字。
里的一个或多个列，它们之间需要用逗号隔开。如果没有给出索引名字index_name,MySQL
为表增加一个索引。此索引会根据index_columns 里列出的列来创建，这些列都是给定表
ALTER TABLE poetry ADD FULLTEXT (author,title,stanza);
间需要用逗号隔开。关于index _name 的指定，请参考 ADD INDEx 动作。
[FIRST | AFTER col_name]
附录ESQL语法参考
[index_name]
(index_columns)[index_option]...
(index_columns)[index_option]...
(index_columns) [index_option]...
(index_columns)[index_option].
---
## Page 675
 ORDER BY col_list
口
口
口
口
口1
DISABLE KEYS
行完ORDER BY 操作之后又发生了修改，便会打乱之前排好的顺序，所以此动作只对那些今
以这种方式对表进行排序能够提高按同样顺序检索行的后续查询的性能。不过，如果表在进
可以在各列名的后面加上关键字ASC或DESC来显式地指定是按升序排序，还是按降序排序。
之用逗号隔开。如果指定了多个子句，则本子句应该为最后一个。默认的排序顺序是升序。
表里的行将根据col_list里列出的列来排序，这些列都是该表里的一个或多个列，它们间
ALTER TABLE student MODIFY name VARCHAR(4O) DEFAULT  NOT NULL;
和AFTER的作用与ADDCOLUMIN的相同。
TABLE语句所使用的格式相同，包括所有的列特性，如NULL、NOT NULL和DEFAULT。FIRST
改变列的定义。col_name是待修改的列名。列定义col_definition的格式与CREATE
MODIFY [COLUMN]col_name col_definition[FIRST|AFTER col_name]
动作不能与其他动作一起使用。
能出现这样的情况，该表原有的.ibd文件已经随同DISCARD TABLESPACE被删掉了。）
tbl_name.idb文件与该表关联起来。.ibd文件必须由同一台导入它的服务器创建。（有可
此动作适用于使用独立表空间的InnoDB表。本操作会把表所在的数据库目录里的
IMPORT TABLESPACE
本里没有任何效果。
执行“空”操作
FORCE
ALTER TABLE SCOre ENABLE KEYS;
对于MyISAM表，
ENABLE KEYS
ALTER TABLE president DROP PRIMARY KEY;
从表里删除主键。如果该表根本没有主键，此动作将报告出错。
DROP PRIMARY KEY
ALTER TABLE member DROP INDEX name;
从表里删除给定的索引。
DROP{INDEXIKEY
ALTER TABLE 语句里。
删除指定的外键定义。
DROP FOREIGN KEY fk_name
虽然关键字RESTRICT和CASCADE可以被解析，
ALTER TABLE president DROP suffix;
如果构成某个索引的所有列全被剔除了，那么该索引也将被删除。
从表里删除指定的列，同时，如果该列还是某个索引的组成部分，它也将被从该索引中剔除。
文件。此动作不能与其他动作一起使用。
此动作适用于使用独立表空间的InnoDB表。本操作将删除用于存储表内容的tbl_name.idb
DISCARD TABLESPACE
ALTER TABLE SCOre DISABLE KEYS;
更新行为。可以使用 ENABLEKEYS 来重新启用索引更新功能。
对于MyISAM表，其非唯一性索引通常会在该表发生变化时及时更新，但此动作将禁止这种
，重新启用被DISABLE KEYS子句禁用的非唯一性索引自动更新机制。
一它会在不更改表结构的情况下重建它。此动作在MySQL5.5.11之前的版
。ADD FOREIGN KEY 和 DROPFOREIGN KEY 操作不能出现在同一条
index_name
，但是它们会被忽略，因而不会有任何作用。
E.1SQL语句语法（非复合语句）
655
今
---
## Page 676
于定义视图的那条SELECT 语句所使用到的每一个列拥有一定的权限。ALTERVIEW 语句只允许定
相同。
项
述中的partition_scheme和partition_definition术语的含义作出了定义。如果这些分区选
656
执行ALTERVIEW 语句时，要求对视图拥有CREATEVIEW权限和 DROP 权限，并且要求对用
页中的某一个出现在了ALTERTABLE语句里，则不能再使用任何其他的分区选项。
修改已有视图，使其具有指定的定义。各个子句的含义与CREATEVIEW 语句条目所描述的
ALTER
●ALTER VIEW
 REORGANIZE PARTITION partition_name [, partition_name]
REMOVEPARTITIONING
口
口
口
口
口
partition_scheme
ALTER TABLE 语句还可以用来调整分区设置。关于 CREATE TABLE 语句的条目对以下动作描
RENAME[TOIAS]new_tbl_name
[WITH [CASCADED
VIEW
使用新的分区定义对给定分区重新分区。
删除所有的分区，最终会得到一个未分区的表。
外键引用。
这两个表必须拥有相同的结构。tbl_name2里的行不能处于分区定义之外，并且不作为任何
将指定分区表tbl_name里的指定分区与未分区表tbl_name2进行交换。除了分区之外，
如果想减少 HASH或KEY 分区的数量，可以使用COALESCE PARTITION。
删除指定的分区。DROP操作只适用于LIST或RANGE分区，被删除的分区里的数据将丢失。
DROP PARTITION partition_name [, partition_name] ...
PARTITION。
动作只适用于 HASH 或KEY 分区。如果想删除 LIST 或 RANGE 分区，可以使用 DROP
将某个分区表的分区减少为不超过n个，将被删除的分区里的数据合并到余下的分区里。此
COALESCE PARTITION n
现对所有分区进行操作。TRUNCATE 不会处理子分区。
DEFINER
ALGORITHM=(MERGE|
INTo (partition_definition [, partition_definition]
对指定的分区执行指定的动作。其中的每一个动作都允许使用ALL来代替分区名列表，以实
{ANALYZE 丨 CHECK I OPTIMIZE 丨 REBUILD I REPAIR 丨 TRUNCATE}
给一个已经有分区的表增加一个新的分区。
ADD PARTITION [partition_definition]
分区将取代老分区。
根据给定的分区描述对表进行分区。如果表此前没有分区，则它将变成有分区的；否则，新
ALTERTABLEpresidentRENAME TO prez;
InnoDB表的外键关系，InoDB存储引擎将调整那些依赖关系指向重新命名后的表。
把表重命名为 new_tbl_name。如果重新命名的是一个 InnoDB 表，其他的表又依赖于该
ALTER TABLE score ORDER BY event_id,
后不再会发生修改的表有用。
附录ESQL语法参考
PARTITION (partition_name [,
{DEFINER|INVOKER)]
LOCAL]CHECK OPTION]
|TEMPTABLEIUNDEFINED)]
list)]
AS
student_id;
..
---
## Page 677
数列表里有OUT或INOUT参数，被调用的存储过程就可以通过它们返回值。
但实际情况却是该语句将把各个表的所有索引与指定的缓存关联起来。
语句加载到相应的缓存里。目前，虽然CACHEINDEX语句的语法允许只为特定的索引分配键缓存，
的每一个表拥有INDEX权限。键缓存区的默认名字是default。表的索引可以稍后用LOAD INDEX
拥有 SUPER 权限。
可打印的形式）。当再次执行时，服务器会对该字符串进行解码，以恢复数据更改事件。此语句需要
且之后也未被修改过，那么再次执行ANALYZETABLE时，将不会做任何事情。
的值。利用这条语句得到的分析结果，优化器就能在今后的查询里更快地完成某些特定的连接操作。
会把ANALYZETABLE
用于InnoDB 和 MyISAM表。ANALYZETABLE要求对每个表都拥有 SELECT 和 INSERT 权限。
义视图的那个用户或是拥有 SUPER权限的用户使用。
当某个存储过程返回时，我们可以通过调用ROW_COUNT（）函数来获得它最后执行过的修改
表的分析操作需要用到读锁，这样可以防止该表在分析期间被更新。如果该表已被分析过，并
在分析完成之后
如果启用了二进制日志记录，那么在不给出NO_WRITE_TO_BINLOG或LOCAL 选项时，MySQL
调用有给定名字的存储过程。可选的参数列表由一个或多个以逗号分隔的参数值构成。只要参
CALL routine_name([proc_param [, proc_param]...])
与MyISAM键缓存管理有关的更多信息请参考12.7.2节。
CACHEINDEX 语句与 CHECK TABLE 语句产生的输出格式相同。
对于分区表，PARTITION子句允许对特定分区进行缓存分配。