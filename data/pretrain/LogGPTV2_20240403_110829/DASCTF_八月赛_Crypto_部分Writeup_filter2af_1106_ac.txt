        h %= N
        prikey = p, q, r
        pubkey = n, h, N
        return prikey, pubkey
    def leak():
        prikey, pubkey = genKey()
        print(prikey[-1])
        print(pubkey)
        print(long_to_bytes(pow(bytes_to_long(flag), 0x10001, pubkey[0])))
    leak()
    '''
    10239306894596345639236857549916052649308185323518947210543117431020838518896685928967228477542397559834309548973113911963605527905768865151004026488002001
    (950011144706585173040346411219364953625466585615355410255812718691071135788174403542375786631101982145942591776585786129800305449594376958613054582994092738689865963264366583306474256168938125436839905240527193347815308291717160425478107410162284856407031175529497870108531319160329226235433600642949059132425064084520547134426901012063053260740485712639947158958018914357078515205544835414225928650602816394134098408766194935057220248610138255820083487975177841, 21845857294867800253967572483849436586466097787581764670569338069105518885425999674533902361247100300133107524692755731302138893826828614419216743419929405090066603853587168841953460023313440967804760511172469644482888563447311330068029693264636332400460522015544196045907743566376516760896674109539257774660389303282381801472315963493071381982569866891274109528852684214970613999327587661933693311084291006897450171519933769360217856463636671441159748185690007577600849938135435924224682264445569689364902460389631331260563904831314100885117032357972432445404061393038108841617572136921335397901954583048372618097362, 31965147293888675740203439764799829784520227891846963591296575627972550910339878090903426907141529767159158546614829904656311989936505471896532096094193238298363694007139459659240391801384569276567972248458362985516106174346014641864342582173706703805542459282608624826403810815975179476327863662631681133966307722920056337352630101824259669740913078488217166961256232508892213581337616407618268731068455619843843314400038408252281146580404528613374235502102493763026383481939170053271778897261922170229088391513609980189281611652128299008626921592268614012904719221701040158989306699509941421276613062052254533708176)
    b'\x19D$\xc1\x16\xb5\xdd\xd4\xca`f\x94P0\x1eAP}\x9d\xb2\x16\x13+\xbfe\xc6\xae\xb7YWur\xae\xdc[\x08\xa1T\xd2\xd0\xc8i;\xbf\xed3\x05\xce\xd4\xa9\xf0\x80\xbdV-\xac\xc3\xf3\x80\xa5\xb8lV\t\xf3\xf6\xac\x06\x14\x9e = PolynomialRing(Zmod(n))
    left = (t*27)%n
    N = n//r
    f = (1+k*(N-x+1))^e - left
    print(f.monic().small_roots(X=2^1025,beta=1,epsilon = 0.04))
求得`x == p+q`后解二次方程得到`p,q`最终可以得到结果。
## 参考链接
[crack_lcg](https://tailcall.net/blog/cracking-randomness-lcgs/)
[strange_lsb](https://gist.github.com/zrax-x/f38a4143e7b79d371e32ce16a34b4bf6)
[nsucrypto](https://nsucrypto.nsu.ru/archive/2019/problems_solution#data)
[LLL and RSA](https://github.com/mimoo/RSA-and-LLL-attacks)