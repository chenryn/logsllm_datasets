    sess.connect(s_get("5168: op-2"))
    sess.connect(s_get("5168: op-3"))
    sess.connect(s_get("5168: op-5"))
    sess.connect(s_get("5168: op-a"))
    sess.connect(s_get("5168: op-1f"))
    sess.fuzz()
## Setting up the Environment
启动fuzz session之前的最后一步是设置环境。我们通过调出目标虚拟机映像并使用以下命令行参数直接在测试映像中启动网络和处理监视器代理来实现此目的：
    network_monitor.py -d 1 \
    -f "src or dst port 5168" \
    -p audits\trend_server_protect_5168
    process_monitor.py -c audits\trend_server_protect_5168.crashbin \
    -p SpntSvc.exe
将BPF过滤器字符串传递给网络监视器，以确保仅记录我们感兴趣的数据包。还会选择audits文件夹中的目录，网络监视器将为每个测试用例创建PCAP。使用代理和目标进程运行实时快照时，将命名为“sulley
ready and waiting”。
接下来，我们关闭VMWare并在主机系统（fuzz测试系统）上启动VMWare控制代理。此代理程序需要vmrun.exe可执行文件的路径，要控制的实际映像的路径以及最终在发生数据传输失败时要恢复的快照名称：
    vmcontrol.py -r "c:\Progra~1\VMware\VMware~1\vmrun.exe" \
    -x "v:\vmfarm\images\windows\2000\win_2000_pro-clones\TrendM~1\win_2000_pro.vmx" \
    --snapshot "sulley ready and waiting"
## Ready, Set ... Action! ... and post mortem.
最后，一切准备就绪。
只需启动'fuzz_trend_server_protect_5168.py'，将网络浏览器连接到
当fuzzer完成运行221个测试用例列表时，我们发现其中19个触发了故障。使用'crashbin_explorer.py'程序，我们可以查看由异常地址分类的错误：
    $ ./utils/crashbin_explorer.py audits/trend_server_protect_5168.crashbin
    [6] [INVALID]:41414141 Unable to disassemble at 41414141 from thread 568 caused access violation
    42, 109, 156, 164, 170, 198,
    [3] LogMaster.dll:63272106 push ebx from thread 568 caused access violation
    53, 56, 151,
    [1] ntdll.dll:77fbb267 push dword [ebp+0xc] from thread 568 caused access violation
    195,
    [1] Eng50.dll:6118954e rep movsd from thread 568 caused access violation
    181,
    [1] ntdll.dll:77facbbd push edi from thread 568 caused access violation
    118,
    [1] Eng50.dll:61187671 cmp word [eax],0x3b from thread 568 caused access violation
    116,
    [1] [INVALID]:0058002e Unable to disassemble at 0058002e from thread 568 caused access violation
    70,
    [2] Eng50.dll:611896d1 rep movsd from thread 568 caused access violation
    152, 182,
    [1] StRpcSrv.dll:6567603c push esi from thread 568 caused access violation
    106,
    [1] KERNEL32.dll:7c57993a cmp ax,[edi] from thread 568 caused access violation
    165,
    [1]Eng50.dll:61182415 mov edx,[edi+0x20c] from thread 568 caused access violation
其中一些显然是可利用的。例如，EIP为0x41414141的测试用例。测试用例70似乎偶然发现了一个可能的代码执行问题，一个UNICODE溢出（实际上在研究后这可能是一个straight
overflow）。Crash bin资源管理器实用程序还可以生成故障的图形视图，绘制堆栈回溯路径。这可以帮助确定某些问题的根本原因。
该实用程序接受以下命令行参数:
    $ ./utils/crashbin_explorer.py
    USAGE: crashbin_explorer.py 
    [-t|--test #] dump the crash synopsis for a specific test case number
    [-g|--graph name] generate a graph of all crash paths, save to 'name'.udg
例如，我们可以在检测到故障时的CPU状态（测试用例＃70）：
    $ ./utils/crashbin_explorer.py audits/trend_server_protect_5168.crashbin -t 70
    [INVALID]:0058002e Unable to disassemble at 0058002e from thread 568 caused access violation
    when attempting to read from 0x0058002e
    CONTEXT DUMP
    EIP: 0058002e Unable to disassemble at 0058002e
    EAX: 00000001 ( 1) -> N/A
    EBX: 0259e118 ( 39444760) -> A.....AAAAA (stack)
    ECX: 00000000 ( 0) -> N/A
    EDX: ffffffff (4294967295) -> N/A
    EDI: 00000000 ( 0) -> N/A
    ESI: 0259e33e ( 39445310) -> A.....AAAAA (stack)
    EBP: 00000000 ( 0) -> N/A
    ESP: 0259d594 ( 39441812) -> LA.XLT.......MPT.MSG.OFT.PPS.RT (stack)
    +00: 0041004c ( 4259916) -> N/A
    +04: 0058002e ( 5767214) -> N/A
    +08: 0054004c ( 5505100) -> N/A
    +0c: 0056002e ( 5636142) -> N/A
    +10: 00530042 ( 5439554) -> N/A
    +14: 004a002e ( 4849710) -> N/A
    disasm around:
    0x0058002e Unable to disassemble
    SEH unwind:
    0259fc58 -> StRpcSrv.dll:656784e3
    0259fd70 -> TmRpcSrv.dll:65741820
    0259fda8 -> TmRpcSrv.dll:65741820
    0259ffdc -> RPCRT4.dll:77d87000
    ffffffff -> KERNEL32.dll:7c5c216c
你可以在这里看到堆栈已经被看似是UNICODE文件扩展名的字符串所覆盖。 您也可以为给定的测试用例提取已存档的PCAP文件。
最后一步，我们希望删除所有不包含有关故障的信息的pCAP文件，'pcap_cleaner.py'实用程序是为完成此任务而编写的：
    $ ./utils/pcap_cleaner.py
    USAGE: pcap_cleaner.py  
此实用程序将打开指定的crashbin文件，读入触发故障的测试用例编号列表并从指定目录中清除所有其他PCAP文件。  
此fuzz中发现的代码执行漏洞均已报告给Trend，并给了以下建议：
  * TSRT-07-01: Trend Micro ServerProtect StCommon.dll Stack Overflow Vulnerabilities（
  * TSRT-07-02: Trend Micro ServerProtect eng50.dll Stack Overflow Vulnerabilities（
这并不是说在这个接口中已经耗尽了所有可能的漏洞。 实际上，这是该接口最基本的fuzz测试。
实际上使用s_string（）原语而不是简单的长字符串的fuzz也可行。