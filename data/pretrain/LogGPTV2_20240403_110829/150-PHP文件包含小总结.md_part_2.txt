读。
⽇志存储默认路径：
1.apache+Linux ⽇志默认路
径：/etc/httpd/logs/accesslog 或 /
var/log/httpd/accesslog
2.apache+win2003 ⽇志默认路径：
D:xamppapachelogsaccess.log、
D:xamppapachelogserror.log
3.IIS6.0+win2003 默认⽇志⽂件：
C:WINDOWSsystem32Logfiles
4.IIS7.0+win2003 默认⽇志⽂件：
%SystemDrive%inetpublogsLogFiles
5.nginx ⽇志⽂件：⽇志⽂件在⽤户安装⽬录
logs ⽬录下, 假设安装路径为 / usr/local/nginx,
那⽇志⽬录就是在 / usr/local/nginx/logs 下⾯
利⽤：
1. 多数情况，web 服务器会将请求写⼊到⽇志⽂件中，
⽐如说 apache。在⽤户发起请求时，会将请求写⼊
当发⽣错误时将错误写⼊ 默认
access.log，当发⽣错误时将错误写⼊ error.log。默认
情况下，⽇志保存路径在 / etc/httpd/logs / 下。
2. 但如果是直接发起请求，会导致⼀些符号被编码使得
包含⽆法正确解析。可以使⽤ burp 截包后修改。
3. 正常的 php 代码已经写⼊了
/etc/httpd/logs/access.log。然后包含即可执⾏代码。
4. 但有的时候，log 的存放地址会被更改。这个时候可以
通过读取相应的配置⽂件后，再进⾏包含。
中间件默认配置⽂件存放路径：
1.apache+linux 默认配置⽂件
/etc/httpd/conf/httpd.conf 或 /
etc/init.d/httpd
2. IIS6.0+win2003 配置⽂件
2. IIS6.0+win2003 配置⽂件
C:/Windows/system32/inetsrv/metabase.xml
3. IIS7.0+WIN 配置⽂件
C:WindowsSystem32inetsrvconfigapplicationH
ost.config
3.2.2.SSH log
条件：需要知道 ssh-log 的位置，且可读。
ssh ⽇志默认路径：
1./var/log/auth.log
2./var/log/secure
利⽤：
1. ⽤ ssh 连接：
ssh ''@remotehost
之后会提示输⼊密码，随便输⼊就可以。
2. 然后利⽤⽂件包含，包含⽇志⽂件：
3.3.Getshell 之 environ
条件：
1. php 以 cgi ⽅式运⾏，这样 environ 才会保持
UA 头。
2. environ ⽂件存储位置已知，且有权限访问
environ ⽂件。
environ ⽂件默认位置：
proc/self/environ
利⽤：
1.proc/self/environ 中会保存 user-agent 头。
如果在 user-agent 中插⼊ php 代码，则 php
代码会被写⼊到 environ 中。之后再包含它，即
可。
2. 例如我们现在访问⼀个⽹站，使⽤ burpsuite
抓包，将恶意代码插⼊到 user-agent 中。
3. 利⽤⽂件包含漏洞去包含 proc/self/environ，成功执
⾏ php 代码。
3.4.Getshell 之利⽤ phpinfo
条件：存在 phpinfo ⻚⾯并且存在⽂件包含漏洞
原理：
1. 当我们给 PHP 发送 POST 数据包时，如果数据
包⾥包含⽂件区块，PHP 就会将⽂件保存成⼀个
临时⽂件，路径通常为：/tmp/php[6 个随机字
符], 这个临时⽂件，在请求结束后就会被删除。
2. 因为 phpinfo ⻚⾯会将请求上下⽂中的所有变量
打出来，所以我们如果向 phpinfo ⻚⾯发送包含
⽂件区块的数据包，就可以在返回包⾥找到临时
⽂件名，也就是 $_FILES 变量中的内容。
利⽤：
1. ⾸先我们使⽤ vulhub 的脚本
（https://github.com/vulhub/vulhub/blob/mas
ter/php/inclusion/exp.py），他可以实现包含临
时⽂件，⽽这个临时⽂件的内容是：')?>。成功包含这个⽂
件后就会⽣成新的⽂件 / tmp/p，这个⽂件就会
永久的留在⽬标机器上。
2. 写⼊成功以后，我们利⽤⽂件包含来执⾏任意命
令。
原理：
那么为啥 vulhub 的脚本是如何做到在临时脚本⽂件删除
前去包含的呢，其实就是⽤到了条件竞争，具体流程⼤致
如下：
1. ⾸先发送包含 webshell 的数据包给 phpinfo ⻚
⾯，并⽤⼤量的垃圾数据将 header 和 get 等位
置填满。
2. 因 phpinfo ⻚⾯会将所有数据打印出来，第⼀个
步骤中的垃圾数据就会将 phpinfo ⻚⾯撑的⾮常
⼤。⽽ php 默认输出缓冲区⼤⼩为 4096，也可
以理解为 php 每次返回 4096 个字节给 socket
连接。
3. 所以，这⾥直接操作原⽣ socket，每次读取
4096 个字节。只要我们读取到字节⾥包含临时
⽂件名，就⽴刻发送⽂件包含漏洞利⽤的数据
包。因为第⼀个数据包的 socket 连接没有结
束，所以临时⽂件还没有删除，我们就可以⽂件
包含成功。
3.5.Getshell 之上传⽂件
条件：有上传点，知道上传上去的⽂件名和存放⽬录。
利⽤：
1. 这⾥⽤⼀个靶场简单演示⼀下，找个⽂件上传
点，上传⼀个带有 php 恶意代码的图⽚。
1. 我们现在已知⽂件名称和路径，可以利⽤⽂件包
含漏洞去包含这个图⽚，就可以成功执⾏ php 代
码了。
1、在很多场景中都需要去包含 web ⽬录之外的⽂件，如
果 php 配置了 open_basedir，则会包含失败。
2、对可以包含的⽂件进⾏限制，可以采⽤⽩名单的⽅
式，或设置可以包含的⽬录。
3、对危险字符进⾏过滤。
4、尽量不使⽤动态包含等等
本⽂作者： 酒仙桥六号部队
本⽂为安全脉搏专栏作者发布，转载请注明：
https://www.secpulse.com/archives/153767.html
全⽂完
本⽂由 简悦 SimpRead 优化，⽤以提升阅读体验
使⽤了 全新的简悦词法分析引擎 beta，点击查看详细说明