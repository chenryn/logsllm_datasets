0x00000af8 775       roy       600       1024      2
------ Semaphore Arrays --------
key       semid     owner     perms     nsems     status
- 86 -
Linux网络编程
------ Message Queues --------
key       msqid     owner     perms     used-bytes  messages
[roy@bbs ~]$ ipcs -s
------ Semaphore Arrays --------
key       semid     owner     perms     nsems     status
[roy@bbs ~]$ ipcs -q
------ Message Queues --------
key       msqid     owner     perms     used-bytes  messages
[roy@bbs ~]$ ipcs -m
------ Shared Memory Segments --------
key       shmid     owner     perms     bytes     nattch    status
0x00000a0a 644       roy       600       1024      2
0x00000af8 775       roy       600       1024      2
4.6.2  ipcrm 命令
使用 ipcrm 命令强制系统删除已存在的 IPC 对象。
它的命令格式如下：
ipcrm   
ipcrm 后面的参数指定要删除的 IPC 对象类型，分别为消息队列（msg）、信号量（sem）
和共享内存（shm）。然后需要给出要删除对象的标识符。标识符可以通过 ipcs 命令来取得。
通过正确的使用以上的两个命令可以帮助我们有效的解决 IPC 对象使用中的问题。
在下面的章节中我们将开始讲述具体的每一种 IPC 对象。
4.7  消息队列（Message Queues）
顾名思义，消息队列就是在系统内核中保存的一个用来保存消息的队列。但这个队列
并不是简单的进行“ 先入先出” 的操作，我们可以控制消息用更为灵活的方式流动。
4.7.1  有关的数据结构
在介绍消息队列的使用前，让我们先熟悉一下在后面会碰到的几个和消息队列有关的
数据结构：
1．ipc_perm
系统使用 ipc_perm 结构来保存每个 IPC 对象权限信息。在 Linux 的库文件 linux/ipc.h
中，它是这样定义的：
struct ipc_perm
第四章  进程间通信
- 87 -
{
  key_t  key;
  ushort uid;   /* owner euid and egid */
  ushort gid;
  ushort cuid;  /* creator euid and egid */
  ushort cgid;
  ushort mode;  /* access modes see mode flags below */
  ushort seq;   /* slot usage sequence number */
};
结构里的前几个成员的含义是明显的，分别是 IPC 对象的关键字，uid 和 gid。然后是
IPC 对象的创建者的 uid 和 gid。接下来的是 IPC 对象的存取权限。最后一个成员也许有点
难于理解，不过不要担心，这是系统保存的 IPC 对象的使用频率信息，我们完全可以不去
理会它。
2．msgbuf
消息队列最大的灵活性在于，我们可以自己定义传递给队列的消息的数据类型的。不
过这个类型并不是随便定义的，msgbuf 结构给了我们一个这类数据类型的基本结构定义。
在 Linux 的系统库 linux/msg.h 中，它是这样定义的：
/* message buffer for msgsnd and msgrcv calls */
struct msgbuf {
        long mtype;         /* type of message */
        char mtext[1];      /* message text */
};
它有两个成员：
mtype 是一个正的长整型量，通过它来区分不同的消息数据类型。
mtext 是消息数据的内容。
通过设定 mtype 值，我们可以进行单个消息队列的多向通讯。如下图，client 可以给它
向 server 发送的信息赋于一个特定的 mtype 值，而 server 向 client 的信息则用另一个 mtype
值来标志。这样，通过 mtype 值就可以区分这两向不同的数据。
利用相同的原理，可以实现更复杂的例子。
需要注意的是，虽然消息的内容 mtext 在 msgbuf 中只是一个字符数组，但事实上，在
我们定义的结构中，和它对应的部分可以是任意的数据类型，甚至是多个数据类型的集合。
比如我们可以定义这样的一个消息类型：
struct my_msgbuf {
        long    mtype;          /* Message type */
        long    request_id;     /* Request identifier */
        struct  client info;    /* Client information structure */
};
在这里，与 mtext 对应的是两个数据类型，其中一个还是 struct 类型。由此可见消息队
列在传送消息上的灵活性。
不过，虽然没有类型上的限制，但 Linux 系统还是对消息类型的最大长度做出了限制。
在 Linux 的库文件 linux/msg.h 中定义了每个 msgbuf 结构的最大长度：
#define MSGMAX  4056   /* <= 4056 */   /* max size of message (bytes) */
也即是说，包括 mtype 所占用的 4 个字节，每个 msgbuf 结构最多只能只能占用 4056
字节的空间
- 88 -
Linux网络编程
3．msg
消息队列在系统内核中是以消息链表的形式出现的。而完成消息链表每个节点结构定
义的就是 msg 结构。它在 Linux 的系统库 linux/msg.h 中的定义是这样的：
/* one msg structure for each message */
struct msg {
        struct msg *msg_next;   /* next message on queue */
        long  msg_type;
        char *msg_spot;         /* message text address */
        time_t msg_stime;       /* msgsnd time */
        short msg_ts;           /* message text size */
};
msg_next 成员是指向消息链表中下一个节点的指针，依靠它对整个消息链表进行访问。
msg_type 和 msgbuf 中 mtype 成员的意义是一样的。
msg_spot 成员指针指出了消息内容（就是 msgbuf 结构中的 mtext）在内存中的位置。
msg_ts 成员指出了消息内容的长度。
4．msgqid_ds
msgqid_ds 结构被系统内核用来保存消息队列对象有关数据。内核中存在的每个消息
队列对象系统都保存一个 msgqid_ds 结构的数据存放该对象的各种信息。在 Linux 的库文
件 linux/msg.h 中，它的定义是这样的：
/* one msqid structure for each queue on the system */
struct msqid_ds {
        struct ipc_perm msg_perm;
        struct msg *msg_first;          /* first message on queue */
        struct msg *msg_last;           /* last message in queue */
        __kernel_time_t msg_stime;      /* last msgsnd time */
        __kernel_time_t msg_rtime;      /* last msgrcv time */
        __kernel_time_t msg_ctime;      /* last change time */
        struct wait_queue *wwait;
        struct wait_queue *rwait;
        unsigned short msg_cbytes;      /* current number of bytes on queue */
        unsigned short msg_qnum;        /* number of messages in queue */
        unsigned short msg_qbytes;      /* max number of bytes on queue */
        __kernel_ipc_pid_t msg_lspid;   /* pid of last msgsnd */
        __kernel_ipc_pid_t msg_lrpid;   /* last receive pid */
};
其中，
msg_perm 成员保存了消息队列的存取权限以及其他一些信息（见上面关于 ipc_perm
结构的介绍）。
msg_first 成员指针保存了消息队列（链表）中第一个成员的地址。
msg_last 成员指针保存了消息队列中最后一个成员的地址。
msg_stime 成员保存了最近一次队列接受消息的时间。
msg_rtime 成员保存了最近一次从队列中取出消息的时间。
msg_ctime 成员保存了最近一次队列发生改动的时间（见后面的章节）。
第四章  进程间通信
- 89 -
wwait 和 rwait 是指向系统内部等待队列的指针。
msg_cbytes 成员保存着队列总共占用内存的字节数。
msg_qnum 成员保存着队列里保存的消息数目。
msg_qbytes 成员保存着队列所占用内存的最大字节数。
msg_lspid 成员保存着最近一次向队列发送消息的进程的 pid。
msg_lrpid 成员保存着最近一次从队列中取出消息的进程的 pid。
4.7.2  有关的函数
介绍完了有关的结构之后，我们来看看处理消息队列所用到的函数：
1．msgget()
msgget()函数被用来创建新的消息队列或获取已有的消息队列。其函数定义如下：
系统调用：
msgget()
函数声明：
int msgget ( key_t key, int msgflg )
返回值：
message queue identifier on success
-1 on error: errno = EACCESS (permission denied)
                EEXIST (Queue exists, cannot create)
                EIDRM (Queue is marked for deletion)
                ENOENT (Queue does not exist)
                ENOMEM (Not enough memory to create queue)
                ENOSPC (Maximum queue limit exceeded)
msgget()函数的第一个参数是消息队列对象的关键字(key)，函数将它与已有的消息队
列对象的关键字进行比较来判断消息队列对象是否已经创建。而函数进行的具体操作是由
第二个参数，msgflg 控制的。它可以取下面的几个值：
IPC_CREAT ：
如果消息队列对象不存在，则创建之，否则则进行打开操作;
IPC_EXCL：
和 IPC_CREAT 一起使用（用”|”连接），如果消息对象不存在则创建之，否则产生一个
错误并返回。
如果单独使用 IPC_CREAT 标志，msgget()函数要么返回一个已经存在的消息队列对象
的标识符，要么返回一个新建立的消息队列对象的标识符。如果将 IPC_CREAT 和 IPC_EXCL
标志一起使用，msgget()将返回一个新建的消息对象的标识符，或者返回-1 如果消息队列
对象已存在。IPC_EXCL 标志本身并没有太大的意义，但和 IPC_CREAT 标志一起使用可
以用来保证所得的消息队列对象是新创建的而不是打开的已有的对象。
除了以上的两个标志以外，在 msgflg 标志中还可以有存取权限控制符。这种控制符的
意义和文件系统中的权限控制符是类似的。
最后，我们将使用 msgget()函数建立一个更加简便的封装函数来作为本节的例子：
int open_queue( key_t keyval )
{
        int     qid;
        if((qid = msgget( keyval, IPC_CREAT | 0660 )) == -1)
        {
                return(-1);
        }
- 90 -
Linux网络编程
        return(qid);
}
这个简单的例子中唯一需要注意的一点就是在 msgflg 中加入了存取权限控制符 0660。
其余的部分请读者自行分析。
2．msgsnd()
从函数名就可以看出，msgsnd()函数是用来向消息队列发送消息的。在 linux/msg.h 它
的函数定义是这样的：
系统调用：
msgsnd()
函数声明：
int msgsnd ( int msqid, struct msgbuf *msgp, int msgsz, int msgflg )
返回值：
0 on success
-1 on error: errno = EAGAIN (queue is full, and IPC_NOWAIT was asserted)
                EACCES (permission denied, no write permission)
                EFAULT (msgp address isn't accessable –  invalid)
                EIDRM  (The message queue has been removed)
                EINTR  (Received a signal while waiting to write)
                EINVAL (Invalid message queue identifier, nonpositive
                          message type, or invalid message size)
                ENOMEM (Not enough memory to copy message buffer)
传给 msgsnd()函数的第一个参数 msqid 是消息队列对象的标识符（由 msgget()函数得
到），第二个参数 msgp 指向要发送的消息所在的内存，第三个参数 msgsz 是要发送信息的
长度（字节数），可以用以下的公式计算：
msgsz = sizeof(struct mymsgbuf) - sizeof(long);
第四个参数是控制函数行为的标志，可以取以下的值：
0，忽略标志位；
IPC_NOWAIT，如果消息队列已满，消息将不被写入队列，控制权返回调用函数的线
程。如果不指定这个参数，线程将被阻塞直到消息被可以被写入。
这里我们将创建一个封装函数来演示 msgsnd()函数的使用：
int send_message( int qid, struct mymsgbuf *qbuf )
{
        int     result, length;
        /* The length is essentially the size of the structure minus sizeof(mtype) */
        length = sizeof(struct mymsgbuf) - sizeof(long);
        if((result = msgsnd( qid, qbuf, length, 0)) == -1)
        {
                return(-1);
        }
        return(result);
}
利用这节和上节中我们创建的两个函数，我们已经可以写出一个很简单的消息发送程
序：
main()
{
        int    qid;
        key_t  msgkey;
        struct mymsgbuf {
                long    mtype;          /* Message type */
第四章  进程间通信
- 91 -
                int     request;        /* Work request number */
                double  salary;         /* Employee's salary */
        } msg;
        /* Generate our IPC key value */
        msgkey = ftok(".", 'm');
        /* Open/create the queue */
        if(( qid = open_queue( msgkey)) == -1) {
                perror("open_queue");
                exit(1);
        }
        /* Load up the message with arbitrary test data */
        msg.mtype   = 1;        /* Message type must be a positive number! */
        msg.request = 1;        /* Data element #1 */
        msg.salary  = 1000.00;  /* Data element #2 (my yearly salary!) */
        /* Bombs away! */
        if((send_message( qid, &msg )) == -1) {
                perror("send_message");
                exit(1);
        }
}