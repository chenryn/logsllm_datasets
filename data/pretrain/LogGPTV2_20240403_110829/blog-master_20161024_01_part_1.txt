## PostgreSQL 9.5+ 高效分区表实现 - pg_pathman
### 作者           
digoal            
### 日期          
2016-10-24            
### 标签          
PostgreSQL , 分区表 , pg_pathman , custom scan api           
----          
## 背景 
目前PostgreSQL社区版本的分区表功能比较弱，需要通过继承和触发器或RULE来实现分区表的功能，由于查询和更新涉及约束的检查、插入则涉及触发器或规则重写，导致分区功能性能较差。    
商业版本EDB，以及数据仓库Greenplum都有比较好的分区支持。  
去年GP开源后，阿里云RDS PostgreSQL的小伙伴将Greenplum的分区表功能port到PostgreSQL 9.4之后，比使用继承和触发器的方式性能提升了近百倍(参考我之前写的文章，传统方法除了粗发去本身的开销，还有SEARCH的开销，分区越多越慢，没有使用binary search)，由于需要改动CATALOG，所以一直没有在9.4的版本上线这个功能。  
分区表已经成为PostgreSQL用户万众期待的功能之一啦。  
社区核心成员之一oleg所在的公司postgrespro，开发了一款分区表功能的插件，不需要动用catalog，可以很方便的增加分区表的功能。  
本文将为大家讲解pg_pathman的原理，以及使用方法。  
## 一、pg_pathman 原理
PostgreSQL传统的分区方法，使用约束来区分不同分区存放的数据(配置constraint_exclusion=partition)，执行select/delete/update时执行计划根据约束和查询条件排除不需要查询的分区表。  
调用COPY或插入数据时使用触发器或规则，将数据插入对应的分区表。  
传统的做法，无论是查询还是插入，对性能的影响都较大。  
pg_pathman与传统的继承分区表做法有一个不同的地方，分区的定义存放在一张元数据表中，表的信息会cache在内存中，同时使用HOOK来实现RELATION的替换，所以效率非常高。  
目前支持两种分区模式，range和hash，其中range使用binary search查找对应的分区，hash使用hash search查找对应的分区。  
pg_pathman 用到的hook如下  
1\. pg_pathman uses ProcessUtility_hook hook to handle COPY queries for partitioned tables.  
2\. RuntimeAppend (overrides Append plan node)  
3\. RuntimeMergeAppend (overrides MergeAppend plan node)  
4\. PartitionFilter (drop-in replacement for INSERT triggers)  
https://wiki.postgresql.org/wiki/CustomScanAPI  
![pic1](20161024_01_pic_001.png)   
## 二、pg_pathman 特性
1\. 目前支持range , hash分区。    
HASH and RANGE partitioning schemes;  
2\. 支持自动分区管理（通过函数接口创建分区，自动将主表数据迁移到分区表），或手工分区管理（通过函数实现，将已有的表绑定到分区表，或者从分区表剥离）。   
Both automatic and manual partition management;  
3\. 支持的分区字段类型包括int, float, date, 以及其他常用类型，包括自定义的domain。   
Support for integer, floating point, date and other types, including domains;    
4\. 通过CUSTOM SCAN实现了有效的分区表JOIN, 子查询过滤分区。    
Effective query planning for partitioned tables (JOINs, subselects etc);  
5\. 使用RuntimeAppend & RuntimeMergeAppend custom plan nodes实现了动态分区选择。  
RuntimeAppend & RuntimeMergeAppend custom plan nodes to pick partitions at runtime;  
6\. PartitionFilter HOOK，实现insert inplace， 代替传统的insert trigger或insert rule。  
PartitionFilter: an efficient drop-in replacement for INSERT triggers;  
7\. 支持自动新增分区。  目前仅支持range分区表。  
Automatic partition creation for new INSERTed data (only for RANGE partitioning);  
8\. 支持copy from/to 直接读取或写入分区表，提高效率。  
Improved COPY FROM\TO statement that is able to insert rows directly into partitions;  
9\. 支持分区字段的更新，需要添加触发器，如果不需要更新分区字段，则不建议添加这个触发器，会产生一定的性能影响。  
UPDATE triggers generation out of the box (will be replaced with custom nodes too);  
10\. 允许用户自定义回调函数，在创建分区时会自动触发。  
User-defined callbacks for partition creation event handling;  
回调函数的规则如下  
```
$part_init_callback$(args JSONB) RETURNS VOID
传入参数如下  
/* RANGE-partitioned table abc (for exp: child abc_4) */
{
    "parent":    "abc",
    "parttype":  "2",
    "partition": "abc_4",
    "range_max": "401",
    "range_min": "301"
}
/* HASH-partitioned table abc (for exp: child abc_0) */
{
    "parent":    "abc",
    "parttype":  "1",
    "partition": "abc_0"
}
```
11\. 非堵塞式创建分区表，以及后台自动将主表数据迁移到分区表，非堵塞式。  
Non-blocking concurrent table partitioning;  
12\. 支持FDW，通过配置参数pg_pathman.insert_into_fdw=(disabled | postgres | any_fdw)支持postgres_fdw或任意fdw  
FDW support (foreign partitions);  
13\. 支持GUC参数配置，注意由于使用了HOOK，如果其他插件也使用了相同的HOOK，需要将pg_pathman放在后面注册，如pg_stat_statements。  
shared_preload_libraries = 'pg_stat_statements,pg_pathman'  
Various GUC toggles and configurable settings.  
## 三、pg_pathman 为什么高效
插入优化，使用PartitionFilter替换relation，代替触发器的方式。效率提升非常明显。  
查询优化，分区定义加载在内存中，使用binary search和hash search对应range与hash分区表，使用RuntimeAppend & RuntimeMergeAppend custom plan nodes to pick partitions at runtime;   
相比查询时通过约束过滤更加高效。  同时runtime过滤，支持子查询。传统的约束法不支持子查询过滤。  
## 四、pg_pathman 使用方法
pg_pathman使用了custom scan provider api，所以只支持PostgreSQL 9.5以及以上的版本。  
### 四.1 安装、配置
```
$ git clone https://github.com/postgrespro/pg_pathman
$ export PATH=/home/digoal/pgsql9.6:$PATH
$ cd pg_pathman
$ make USE_PGXS=1
$ make USE_PGXS=1 install
$ cd $PGDATA
$ vi postgresql.conf
shared_preload_libraries = 'pg_stat_statements,pg_pathman' 
$ pg_ctl restart -m fast
$ psql
postgres=# create extension pg_pathman;
CREATE EXTENSION
postgres=# \dx
                   List of installed extensions
    Name    | Version |   Schema   |         Description          
------------+---------+------------+------------------------------
 pg_pathman | 1.1     | public     | Partitioning tool ver. 1.1
```
### 四.2 参数
```
pg_pathman.enable --- disable (or enable) pg_pathman completely
默认on
pg_pathman.enable_runtimeappend --- toggle RuntimeAppend custom node on\off
默认on
pg_pathman.enable_runtimemergeappend --- toggle RuntimeMergeAppend custom node on\off
默认on
pg_pathman.enable_partitionfilter --- toggle PartitionFilter custom node on\off
默认on
pg_pathman.enable_auto_partition --- toggle automatic partition creation on\off (per session)
默认on
pg_pathman.insert_into_fdw --- allow INSERTs into various FDWs (disabled | postgres | any_fdw)
默认postgres
pg_pathman.override_copy --- toggle COPY statement hooking on\off
默认on
```
### 四.3 相关视图和表
pg_pathman 使用函数来维护分区表，并且创建了一些视图，可以查看分区表的状态。    
分区表的定义则存在一张表中，定义数据缓存在内存中。    
1\. pathman_config --- main config storage  
This table stores a list of partitioned tables.  
```
CREATE TABLE IF NOT EXISTS pathman_config (
    partrel         REGCLASS NOT NULL PRIMARY KEY,  -- 主表oid
    attname         TEXT NOT NULL,  -- 分区列名
    parttype        INTEGER NOT NULL,  -- 分区类型(hash or range)
    range_interval  TEXT,  -- range分区的interval
    CHECK (parttype IN (1, 2)) /* check for allowed part types */ );
```
2\. pathman_config_params --- optional parameters  
This table stores optional parameters which override standard behavior.    
这张表存储的信息将覆盖标准配置(即postgresql.conf中的配置)  
```
CREATE TABLE IF NOT EXISTS pathman_config_params (
    partrel        REGCLASS NOT NULL PRIMARY KEY,  -- 主表oid
    enable_parent  BOOLEAN NOT NULL DEFAULT TRUE,  -- 是否在优化器中过滤主表
    auto           BOOLEAN NOT NULL DEFAULT TRUE,  -- insert时是否自动扩展不存在的分区
    init_callback  REGPROCEDURE NOT NULL DEFAULT 0);  -- create partition时的回调函数oid
```
3\. pathman_concurrent_part_tasks --- currently running partitioning workers  
This view lists all currently running concurrent partitioning tasks.   
当前正在执行的数据迁移任务（从主表将数据迁移到分区）。  
```
-- helper SRF function
CREATE OR REPLACE FUNCTION show_concurrent_part_tasks()  
RETURNS TABLE (
    userid     REGROLE,
    pid        INT,
    dbid       OID,
    relid      REGCLASS,
    processed  INT,
    status     TEXT)
AS 'pg_pathman', 'show_concurrent_part_tasks_internal'
LANGUAGE C STRICT;
CREATE OR REPLACE VIEW pathman_concurrent_part_tasks
AS SELECT * FROM show_concurrent_part_tasks();
```
4\. pathman_partition_list --- list of all existing partitions  
This view lists all existing partitions, as well as their parents and range boundaries (NULL for HASH partitions).  
列出已经存在的分区。  
```
-- helper SRF function
CREATE OR REPLACE FUNCTION show_partition_list()
RETURNS TABLE (
    parent     REGCLASS,
    partition  REGCLASS,
    parttype   INT4,
    partattr   TEXT,
    range_min  TEXT,
    range_max  TEXT)
AS 'pg_pathman', 'show_partition_list_internal'
LANGUAGE C STRICT;
CREATE OR REPLACE VIEW pathman_partition_list
AS SELECT * FROM show_partition_list();
```
### 四.4 分区表管理
创建分区表时，需要指定主表的名字，主表必须已存在，主表可以有数据，也可以是空表。  
如果主表有数据，那么可以配置是否需要在创建分区时，将数据迁移到分区，（不建议对大表这么做）。  
如果主表有很多数据，建议使用后台非堵塞式的迁移方法。  （调用partition_table_concurrently()函数进行迁移）。  
如果在创建分区表前，使用set_init_callback(relation regclass, callback regproc DEFAULT 0)设置了回调函数，则创建分区时，每个分区表创建是，会自动调用对应的回调函数。  
回调函数的传入参数和模式如下    
```
$part_init_callback$(args JSONB) RETURNS VOID
传入参数如下  
/* RANGE-partitioned table abc (for exp: child abc_4) */
{
    "parent":    "abc",
    "parttype":  "2",
    "partition": "abc_4",
    "range_max": "401",
    "range_min": "301"
}
/* HASH-partitioned table abc (for exp: child abc_0) */
{
    "parent":    "abc",
    "parttype":  "1",
    "partition": "abc_0"
}
```
#### 1. range分区
有4个管理函数用来创建范围分区  
指定起始值、间隔、分区个数  
```
create_range_partitions(relation       REGCLASS,  -- 主表OID
                        attribute      TEXT,      -- 分区列名
                        start_value    ANYELEMENT,  -- 开始值
                        p_interval     ANYELEMENT,  -- 间隔；任意类型，适合任意类型的分区表
                        p_count        INTEGER DEFAULT NULL,   --  分多少个区
                        partition_data BOOLEAN DEFAULT TRUE)   --  是否立即将数据从主表迁移到分区, 不建议这么使用, 建议使用非堵塞式的迁移( 调用partition_table_concurrently() )
create_range_partitions(relation       REGCLASS,  -- 主表OID
                        attribute      TEXT,      -- 分区列名
                        start_value    ANYELEMENT,  -- 开始值
                        p_interval     INTERVAL,    -- 间隔；interval 类型，用于时间分区表
                        p_count        INTEGER DEFAULT NULL,   --  分多少个区
                        partition_data BOOLEAN DEFAULT TRUE)   --  是否立即将数据从主表迁移到分区, 不建议这么使用, 建议使用非堵塞式的迁移( 调用partition_table_concurrently() )
```
指定起始值、终值、间隔  
```
create_partitions_from_range(relation       REGCLASS,  -- 主表OID
                             attribute      TEXT,      -- 分区列名
                             start_value    ANYELEMENT,  -- 开始值
                             end_value      ANYELEMENT,  -- 结束值
                             p_interval     ANYELEMENT,  -- 间隔；任意类型，适合任意类型的分区表
                             partition_data BOOLEAN DEFAULT TRUE)   --  是否立即将数据从主表迁移到分区, 不建议这么使用, 建议使用非堵塞式的迁移( 调用partition_table_concurrently() )
create_partitions_from_range(relation       REGCLASS,  -- 主表OID
                             attribute      TEXT,      -- 分区列名
                             start_value    ANYELEMENT,  -- 开始值
                             end_value      ANYELEMENT,  -- 结束值
                             p_interval     INTERVAL,    -- 间隔；interval 类型，用于时间分区表
                             partition_data BOOLEAN DEFAULT TRUE)   --  是否立即将数据从主表迁移到分区, 不建议这么使用, 建议使用非堵塞式的迁移( 调用partition_table_concurrently() )
```
例子  
```
创建需要分区的主表
postgres=# create table part_test(id int, info text, crt_time timestamp not null);  -- 分区列必须有not null约束  
CREATE TABLE
插入一批测试数据，模拟已经有数据了的主表
postgres=# insert into part_test select id,md5(random()::text),clock_timestamp() + (id||' hour')::interval from generate_series(1,10000) t(id); 
INSERT 0 10000
postgres=# select * from part_test limit 10;                    
 id |               info               |          crt_time          
----+----------------------------------+----------------------------
  1 | 36fe1adedaa5b848caec4941f87d443a | 2016-10-25 10:27:13.206713
  2 | c7d7358e196a9180efb4d0a10269c889 | 2016-10-25 11:27:13.206893
  3 | 005bdb063550579333264b895df5b75e | 2016-10-25 12:27:13.206904
  4 | 6c900a0fc50c6e4da1ae95447c89dd55 | 2016-10-25 13:27:13.20691
  5 | 857214d8999348ed3cb0469b520dc8e5 | 2016-10-25 14:27:13.206916
  6 | 4495875013e96e625afbf2698124ef5b | 2016-10-25 15:27:13.206921
  7 | 82488cf7e44f87d9b879c70a9ed407d4 | 2016-10-25 16:27:13.20693
  8 | a0b92547c8f17f79814dfbb12b8694a0 | 2016-10-25 17:27:13.206936
  9 | 2ca09e0b85042b476fc235e75326b41b | 2016-10-25 18:27:13.206942
 10 | 7eb762e1ef7dca65faf413f236dff93d | 2016-10-25 19:27:13.206947
(10 rows)
注意:  
1. 分区列必须有not null约束  
2. 分区个数必须能覆盖已有的所有记录  
创建分区，每个分区包含1个月的跨度数据  
postgres=# select                                             
create_range_partitions('part_test'::regclass,             -- 主表OID
                        'crt_time',                        -- 分区列名
                        '2016-10-25 00:00:00'::timestamp,  -- 开始值
                        interval '1 month',                -- 间隔；interval 类型，用于时间分区表
                        24,                                -- 分多少个区
                        false) ;                           -- 不迁移数据
NOTICE:  sequence "part_test_seq" does not exist, skipping
 create_range_partitions 
-------------------------
                      24
(1 row)
postgres-# \d+ part_test
                                  Table "public.part_test"
  Column  |            Type             | Modifiers | Storage  | Stats target | Description 
----------+-----------------------------+-----------+----------+--------------+-------------