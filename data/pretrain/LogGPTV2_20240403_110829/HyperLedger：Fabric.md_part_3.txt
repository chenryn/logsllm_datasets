-   落实到Fabric，合约就是分布在每个Peer上的容器。
-   首先使用Go或者js编写处理逻辑，代码中约定了数据的修改方式。然后这些代码会被打包、签署，并提交到Fabric中，最终成为Peer上的一个Docker容器。
```{=html}
```
-   合约是可以升级、改动的,只有在当初签署了合约的人员都同意的情况下，才能更改合约。
-   背书策略的设计，通过背书的策略，可以约定只有当多个Peer上的合约都得出同样的结果时，对合约的调用才能被接受，只对自己的Peer动手脚是不行的。
-   合约需要在每个Peer上进行安装的，但激活只需要一次。安装合约其实就是将打包的合约上传到了Peer上（当然这中间还有一些其它检查）：
**MSP**
-   它是一个包含了根证书、证书（经过CA签署的公钥）和私钥的目录,在组织、组件和用户，三个地方会用到。
-   组织的msp目录中包含的全是可以公开的证书，没有私钥。因组织的msp目录,是要被写入到system
    chain中的,被包含在组织msp目录中的证书，主要被用来验证用户证书的有效性。
-   用户的证书的有效性：必须是用根证书对应的私钥签署的，否则就会被认定为无效，并拒绝服务。
-   组件msp目录的使用者是Fabric网络中的peer和orderer程序
-   用户msp目录的使用者是Fabric网络之外的个人或者客户端。
## Fabric网络：
组成网络的每一个Peer和Orderer，都是得到了批准的、实名的，想要访问这个网络的用户也需要得到批准，并实名签署自己的操作。这就是Fabric网络。
**Fabric实现网络的准入方式：**
-   必须向拥有根证书私钥的机构，申请一个证书。通过这个限制，保证Fabric网络中的参与者的身份都是真实的（参与者的证书被盗用除外）。
-   访问Fabric网络的个人或者客户端，要有一个账号；
-   组成Fabric的网络的每个Peer和Orderer也要有一个账号。
-   MSP中存放的就是每个账号的私钥和证书。
**cryptogen命令 和 FabricCA组件：**
-   Msp目录可以用Fabric提供的cryptogen命令生成，但是用cryptogen命令生成是非常不灵活的，生产环境中，应当使用Fabric提供的另一个组件FabricCA。
-   注意FabricCA组件：不属于Fabric网络，它是网络之外的一个用来签署证书的服务。借助FabricCA，还可以实现账号的分级，简单说就是一个组织的管理员，可以自由地创建属于该组织的子账号。（这是刚需）
## 配置：
配置分两种：组件的配置文件、system chain中的配置区块
1组件的配置文件：就是orderer的配置文件orderer.yaml
以及peer的配置文件core.yaml
2 system chain中的配置区块
-   Configtxgen命令：能将二进制的创世块转换成json格式，生成创世块（system
    chain的第一个区块）。
-   configtxgen -inspectBlock ./genesisblock
-   从Fabric的网络中也可以读取到指定channel的当前配置：
-   ./peer.sh channel fetch config config_block.pb -c mychannel -o
    orderer.example.com:7050
-   只不过读出来的文件都是protobuf格式的，需要在另一个工具configtxlator的帮助下，将其转换为json格式：
-   configtxlator proto_decode \--input config_block.pb \--type
    common.Block
-   更新system chain的过程更繁琐，以在Channel中添加一个新的成员为例。
-   在Channel中添加一个新的成员，实质就是修改Fabric网络中记录的Channel配置。这个过程需要好几步：
**生成新成员的json格式的配置文件**
1.  从Fabric中读取Channel最新的配置
2.  将读取的Channel配置转成json格式后，将新成员的json配置加入其中
3.  将修改后的Channel配置和修改前的Channel配置都转成protobuf格式，然后用configtxlator生成更新文件
4.  将更新文件由protobuf格式转换成json格式，加上包含channel信息的信封后，再转换成protobuf格式
5.  将加信封的protobuf格式的更新文件发送给Channel中其它组织的管理员，让他们用自己的私钥进行签署
6.  最后由其中一个管理员将得到足够签署的更新文件提交到网络
Farbric
-   Fabric是一个支持智能合约(smart contracts)的分布式账本(ledger)系统。
-   Fabric是私有的只有通过MSP(Membership Service
    Provider)认证的成员才可以进入到系统，参与合约的缔造与执行。
-   Fabric是插件式设计，账本数据有多种存放方式，共识机制(consensus
    mechanisms)可以切换，支持不同类型的MSP。
-   Fabric开发了channel功能，一个channel对应一个账本，只有加入channel的成员可见，可以防止竞争对手知晓交易的细节。
-   账本由两部分组成：全局状态(word state)和交易日志(transaction log）。
    全局状态中记录的是当前状态，交易日志中记录了所有的交易记录，全局状态是这些交易记录的执行结果。
-   智能合约(Smart
    Contracts)用chaincode编写，由区块链外部的应用调用执行，chaincode通常是用来更新账本的。
-   Farbric的chaincode目前(2018-02-23
    15:08:54)只支持Go语言，以后会支持Java和其它的语言。
-   达成共识的过程中，交易需要严格按照发生的顺序记录到账本中，Farbric提供了多种共识机制(SOLO、Kafka、SBFT...)，建立交易网络的时候根据实际需要选用共识机制。
Fabric的模型主要由以下几个概念组成：
-   Assets:交易的资产
-   ChainCode:描述交易逻辑的代码
-   Ledger Features:账本功能
-   Privacy through Channels:
    channel的私密性，可以对全网开发，也可以只对部分成员开放
    -   包含交易逻辑的ChainCode可以只部署在特定用户端，实现部分公开的效果
    -   还可以在ChainCode中对数据进行加密
-   Security & Membership Services: 参与交易的用户都经过认证的可信用户
-   Consensus: 交易从发起到被提交到账本的过程中的检验
![](media/image5.png){width="7.228450349956256in"
height="4.552083333333333in"}
![](media/image6.png){width="7.253482064741907in"
height="4.523351924759405in"}
## 组织
fabric系统是通过组织来划分的，每个组织内都有承担不同功能的peer节点，同时每个组织都有自己对应的fabric-ca服务器
-   fabric系统中所有的组织共用一个orderer集群。
-   fabric中的组织在现实世界中可以是一个公司、一个企业，或者一个协会。
-   fabric中组织是承担着数据信用责任的区块链系统参与方。
在设计一个fabric系统时，第一步就是要确定系统的参与方，然后从这些参与者中选出组织（生成对应的组织编号、域名、证书等），然后再确认组织的管理方式。组织的管理方式是指组织在遇到问题时的协作方式（如新组织的加入）。