38
37
42
110
83
88
296
Table 3: Rocketfuel topologies used in evaluation.
time scales much larger than the dynamics of the TeXCP load bal-
ancer ((cid:29) Td), and thus do not affect stability. These assumptions,
though simplistic, are commonly used in the literature [21, 25] to
make analysis manageable. Simulations in x5 show that TeXCP
works properly even when these assumptions do not hold.
Proof Idea: Our approach is to decouple the effect of network
delays from load balancing. We ensure that when a TeXCP load
balancer shifts traf(cid:2)c from one path to another, the impact of this
traf(cid:2)c shift on link utilizations stabilizes before any load balancer
makes a new decision. If this is the case, we can analyze the sta-
bility of the load balancer ignoring network delays and assuming
that traf(cid:2)c changes take effect instantaneously. Thus, our stability
analysis has the following 3 steps.
Step 1: First, we prove that explicit feedback stabilizes the per-
IE (cid:3)ow rates, and consequently the utilizations are stable.
THEOREM 4.1. Let d > 0 be the round trip delay in the ISP
network, if the parameters Tp, (cid:11), and (cid:12) satisfy:
Tp > d;
0 < (cid:11) <
and (cid:12) = (cid:11)2p2;
(cid:25)
4p2
then the aggregate per-IE (cid:3)ow on a link is stable independently of
the delay, capacity, and number of IE (cid:3)ows.
PROOF: See Appendix A.
(cid:4)
Step 2: Second, we show that explicit feedback brings path uti-
lization to within 90% of the desired value before the load balancer
makes a new decision, i.e., by the next Td. In particular, we pick
(cid:11) = 0:4 and (cid:12) = 0:226 in accordance with Theorem 4.1. In the
worst case, the utilization has to ramp up from ul=0 to full utiliza-
tion (or the opposite). For (cid:11)=0.4, starting with ul=0, (cid:2)ve iterations
of Eq. 10 cause the utilization to be more than 90%5. Thus, by
picking Td = 5Tp, the load balancer allows the explicit feedback
enough time to bring the utilization to about 90% of the value dic-
tated by the previous decision, before making a new decision.
Step 3: Finally, using steps 1 and 2 to assume that traf(cid:2)c shifts
take effect instantaneously, we prove that independently acting
TeXCP load balancers do not cause oscillations.
THEOREM 4.2. The TeXCP load balancer is stable and con-
verges to a state in which every TeXCP agent sees a balanced load
on all of its active paths (paths on which the agent sends traf(cid:2)c).
Further, all inactive paths at an agent (paths on which the agent
sends no traf(cid:2)c) have higher utilization than the active paths.
PROOF: See Appendix B.
(cid:4)
Note that Theorem 4.2 proves the system is stable, shows no
oscillations, and balances the load, but does not prove optimal max-
utilization. We conjecture that giving preference to shorter paths, as
we do, is important for achieving optimality. Simulations in x5 with
multiple tier-1 ISP topologies, many different traf(cid:2)c matrices and
changing network conditions, show that TeXCP is always within
few percent of the optimal max-utilization, and is much closer to
optimal than alternative approaches.
5In 5 iterations, a spare bandwidth of 100% goes to (1 (cid:0) 0:4)5 < 10%.
ISP(AS#)
Ebone(1755)
Exodus(3967)
Abovenet(6461)
Genuity(1)
Sprint(1239)
Tiscali(3257)
AT&T(7018)
# of paths used
avg
4.275
4.769
4.653
4.076
4.175
4.525
3.976
std
1.717
1.577
2.038
1.806
1.935
1.980
1.785
Table 4: Though a TeXCP agent
is con(cid:2)gured with a maximum of
K =10 paths,
it achieves near-
optimal max-utilization using many
fewer paths.
Technique
Description
Distributed?
Oracle
TeXCP
OSPF-TEBase
LP based on multi-
commodity
in x3.3 and x3.4
Optimal Link weights
for a TM [15]
Opt. weights for few
critical failures [16]
OSPF-TEM ulti(cid:0)T M Opt. weights over
MATE
multiple TMs [15]
in [12]
OSPF-TEF ailures
InvCap
Common Practice
No
Yes
No
No
No
Sim. needs global
knowledge
-
Reacts to changes
in traf(cid:2)c?
No
Robust
ures?
No
to
fail-
Yes
No
No
Optimizes
over
multiple demands
Yes
No
Yes
No
Limited number of
anticipated failures
No
Yes
No
5. PERFORMANCE
We evaluate TeXCP and compare it with prior work.
5.1 Topologies & Traf(cid:2)c Demands
ISPs regard their topologies and traf(cid:2)c demands as proprietary
information. Thus, similar to prior work [6, 29], we use the Rock-
etfuel topologies in Table 3. To obtain approximate PoP to PoP
topologies, we collapse the topologies so that (cid:147)nodes(cid:148) correspond
to (cid:147)cities(cid:148). Rocketfuel does not provide link capacities; so we
assign capacities to links as follows. There is a marked knee in
the degree distribution of cities(cid:150)i.e., cities are either highly con-
nected (high-degree) or not. The high degree cities are probably
Level-1 PoPs [20], with the rest being smaller PoPs. We assume
that links connecting Level-1 PoPs have high capacity (10Gb/s) and
that the others have smaller capacity (2.5Gb/s). This is in line with
recent ISP case studies [1, 20].
Similarly to [6], we use the gravity model to compute estimated
traf(cid:2)c matrices. This approach assumes that the incoming traf(cid:2)c at
a PoP is proportional to the combined capacity of its outgoing links.
Then it applies the gravity model [33] to extrapolate a complete
TM. The TMs used in our experiments lead to max. utilizations in
the range 25-75%. For lack of space, we omit similar results for
bimodal TMs [6] and topologies generated using GT-ITM [19].
5.2 Metric
As in [6], we compare the performance of various load balancing
techniques with respect to a particular topology and traf(cid:2)c matrix
(TM) using the ratio of the max-utilization under the studied tech-
nique to the max-utilization obtained by an oracle, i.e.:
M etric =
max-utilization T ech:
max-utilization Oracle
:
5.3 Simulated TE Techniques
We compare the following techniques (see Table 5):
(a) Oracle: As the base case for all our comparisons, we use Mat-
lab’s linprog solver to compute the optimal link utilization for any
topology and traf(cid:2)c matrix. This is the standard off-line central-
ized oracle which uses instantaneous traf(cid:2)c demands and solves
the multi-commodity (cid:3)ow optimization problem [26].
(b) TeXCP: We have implemented TeXCP in ns2 [27]. The im-
plementation uses Eqs. 5,12. The TeXCP probe timer is set to
Tp = 0:1s, and thus Td = 0:5s. TeXCP uses the constants (cid:11) = 0:4
and (cid:12) = 0:225 as per Theorem 4.1. The processing time of a probe
at a core router is uniformly distributed in [0,2]ms, consistent with
Internet measurements of the delay jitter for packets processed on
the slow path [18]. Packet size is 1KB, and buffers store up to 0.1s.
Table 5: Various load balancing techniques.
InvCap OSPF-TE_base
TeXCP
i
t
p
O
o
t
n
o
i
t
a
z
i
l
i
t
U
-
x
a
M
2.2
2
1.8
1.6
1.4
1.2
1
l
a
m
f
o
o
i
t
a
R
Ebone
Exodus
Abovenet
AT&T
Figure 4: When traf(cid:2)c matches TM, TeXCP results in a max-utilization
within a few percent of the optimal, and much closer to optimal than
OSPF-TE or InvCap. Figure shows both average (thick bars) and max-
imum (thin bars) taken over 40 TMs.
Genuity
Tiscali
Sprint
(c) OSPF-TE: We implemented 3 versions of the OSPF weight
optimizer. The (cid:2)rst, which we call OSPF-TEBase, is from [15].
Given a traf(cid:2)c matrix, it searches for link weights that result in low
max-utilization.6 The second, OSPF-TEF ailures, computes link
weights that result in low max-utilization even when few critical
failures happen [16]. The third, OSPF-TEM ulti(cid:0)T M , simultane-
ously optimizes weights for multiple traf(cid:2)c matrices. Our imple-
mentation gives results consistent with those in [15, 16].
(d) MATE: We compare the performance of TeXCP with MATE,
a prior online TE protocol [12]. MATE’s simulation code is propri-
etary. Therefore, we compare TeXCP against MATE’s published
results [12], after consulting with the authors to ensure that the sim-
ulation environments are identical.
(e) InvCap: A common practice sets a link weight to the inverse of
its capacity and runs OSPF [11].
5.4 Comparison With the OSPF Optimizer
We would like to understand the performance gap between on-
line and of(cid:3)ine traf(cid:2)c engineering. No prior work provides a quan-
titative comparison of these two approaches. Hence, in this section,
we compare TeXCP with the OSPF weight optimizer (OSPF-TE),
one of the more sophisticated and highly studied of(cid:3)ine TE tech-
niques [15, 16]. Given a topology and a traf(cid:2)c matrix, OSPF-TE
computes a set of link weights, which when used in the OSPF
intra-domain routing protocol produce a routing with low max-
utilization. We also compare against InvCap, a common practice
that sets link weights to the inverse of link capacity.
(a) Static Traf(cid:2)c: First, we investigate the simplest case in
which IE traf(cid:2)c demands are static, i.e., the actual realtime traf(cid:2)c
completely matches the long term demands in the TM.
6It minimizes the total cost in the network; where cost is assigned to each link based
on a piece-wise linear function of the link utilization [15].
l
a
m
i
t
p
o
e
h
t
o
t
n
o
i
t
a
z
i
l
i
t
u
-
x
a
m
f
o
o
i
t
a
R
 2.4
 2.2
 2
 1.8
 1.6
 1.4
 1.2
 1
OSPF-TEbase
OSPF-TEMulti-TM
TeXCP
 1
 1.5
 2
 2.5
 3
 3.5