title:Secure Graph Analysis at Scale
author:Toshinori Araki and
Jun Furukawa and
Kazuma Ohara and
Benny Pinkas and
Hanan Rosemarin and
Hikaru Tsuchida
Secure Graph Analysis at Scale
Toshinori Araki
NEC, Tokyo, Japan
PI:EMAIL
Jun Furukawa
NEC, Tokyo, Japan
PI:EMAIL
Bar-Ilan University, Ramat Gan, Israel
Bar-Ilan University, Ramat Gan, Israel
Benny Pinkas‚Ä†
PI:EMAIL
Hanan Rosemarin‚Ä†
PI:EMAIL
Kazuma Ohara‚àó
AIST, Tokyo, Japan
PI:EMAIL
Hikaru Tsuchida
NEC, Tokyo, Japan
PI:EMAIL
ABSTRACT
We present a highly-scalable secure computation of graph algo-
rithms, which hides all information about the topology of the graph
or other input values associated with nodes or edges. The setting is
where all nodes and edges of the graph are secret-shared between
multiple servers, and a secure computation protocol is run between
these servers. While the method is general, we demonstrate it in a
3-server setting with an honest majority, with either semi-honest
security or full security.
A major technical contribution of our work is replacing the us-
age of secure sort protocols with secure shuffles, which are much
more efficient. Full security against malicious behavior is achieved
by adding an efficient verification for the shuffle operation, and
computing circuits using fully secure protocols. We demonstrate
the applicability of this technology by implementing two major al-
gorithms: computing breadth-first search (BFS), which is also useful
for contact tracing on private contact graphs, and computing maxi-
mal independent set (MIS). We implement both algorithms, with
both semi-honest and full security, and run them within seconds
on graphs of millions of elements.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Cryptography; Privacy-preserving
protocols.
KEYWORDS
oblivious sort, oblivious shuffle, secure multi-party Computation,
MPC.
ACM Reference Format:
Toshinori Araki, Jun Furukawa, Kazuma Ohara, Benny Pinkas, Hanan Rose-
marin, and Hikaru Tsuchida. 2021. Secure Graph Analysis at Scale. In Pro-
ceedings of the 2021 ACM SIGSAC Conference on Computer and Communi-
cations Security (CCS ‚Äô21), November 15‚Äì19, 2021, Virtual Event, Republic of
‚àóKazuma Ohara worked on this project while he was at NEC.
‚Ä†The work pf Benny Pinkas and Hanan Rosemarin was partly supported by the BIU
Center for Research in Applied Cryptography and Cyber Security in conjunction with
the Israel National Cyber Bureau in the Prime Minister‚Äôs Office.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea
¬© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484560
Korea. ACM, New York, NY, USA, 20 pages. https://doi.org/10.1145/3460120.
3484560
1 INTRODUCTION
1.1 Motivation
The focus of this work is the secure analysis of large-scale data that
is represented as a graph. In particular, the analysis can be applied
to data-augmented directed graphs, which are directed graphs that
can have data associated with nodes and edges.
Secure computation of graph data was initiated by the GraphSC
work, which we describe in Section 1.3. That work was based on
two-party semi-honest MPC [44]. Recent work [40, 41] was able to
analyze graphs of massive size, by using 4-party MPC with up to one
corrupt and malicious party, and somewhat reducing the security
guarantee by enabling the protocol to leak differentially-private
information about the degrees of nodes. We present new techniques
that can scale the secure computation of graph data to very large
inputs, while leaking no information at all about the graph structure
or the data. We instantiate our solution with computation based
on 3-party MPC with an honest majority, which requires less trust
than a 4-party setting with an honest majority. We present both
semi-honest and fully secure versions of our protocol.
We first illustrate a contact tracing use case for our protocol.
This use case translates to computing BFS traversal and other
related algorithms. These algorithms can be used for implementing
other tasks, such as identifying connected components. Another
type of algorithms which we discuss and implement is for finding a
maximal independent set. This task has many applications, such
as for coloring and for matching.
1.1.1 Contact tracing and analysis. It might be best to start with
a use-case related to the fight against COVID-19. Our goal is to
compute a global analysis of the contact graph, while respecting
and preserving personal privacy. This task might be important on
a national level, and also on a local or enterprise level.
Let us assume the following distributed data collection, which is
more elaborate than that implemented in current contact tracing
apps, but is illustrative for our purposes: Through a contact tracing
application, users know which physical contacts they made, and
the times and durations of these contacts. (We do not discuss here
how this data is collected by users, or how to translate contacts
with rolling pseudonyms to contacts with a single identity.) The
contact data is obviously private, and users do not wish it to be
revealed. The entire global data can be visualized as a graph or a
multigraph where each user is a node, and edges represent physical
contacts. Edges might be associated with data such as the time and
Session 2D: Secure Multiparty Computation CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea610duration of the contact, and whether it was indoors or outdoors.
Nodes might have data indicating whether the corresponding user
is COVID-19 positive.
Running a secure computation between all users will impose
considerable organization and synchronization challenges. Instead,
assume that each user secret-shares its data between multiple des-
ignated servers. Our goal is to enable the servers to apply a secure
computation which analyzes the contact graph, releases a final
output and keeps secret all other information about the inputs.
A simple example of a possible computation is running a BFS
distance calculation algorithm starting from a node representing
an infected person, and identifying all persons at a distance smaller
than some threshold from that person. If users associate with each
edge the time in which the contact occurred, the algorithm can
be adopted to only take into account edges (ùë¢, ùë£) which occurred
after ùë¢ was exposed to COVID-19, since only in that case ùë£ is at
risk of being infected. The algorithm can also run back in time to
look for the source of the infection. A more fine-grained analysis
is also possible: for example, users can associate a ‚Äúprobability of
infection‚Äù with each edge, which can be computed based on the
duration of the contact and the location (indoors/outdoors). In this
case, graph analysis can compute a probability of infection for
each node. (Securely implementing these variants is discussed in
Appendix E.)
1.1.2 MPC for graph analysis. Implementing the secure graph anal-
ysis using generic MPC, which represents the function as a circuit,
seems challenging, since the circuit must hide the topology of the
graph, namely which pairs of nodes are connected to each other.
Our starting point for this computation is therefore the GraphSC
work [44], which securely implements message-passing graph al-
gorithms using secure sorting (Section 1.3). Our work uses secure
shuffling instead of sorting (except during an initial phase), while
keeping full security with no leakage.
1.2 Message-Passing Graph Algorithms
Message-passing graph algorithms operate in rounds, where in
each round nodes send messages on their outgoing edges, read
messages on incoming edges, and update their state accordingly. As
is detailed in the GraphSC paper [44], message-passing graph algo-
rithms encompass many classic graph algorithms like Bellman-Ford,
bipartite matching, connected component identification, and graph
coloring, as well as data mining and machine learning operations
such as PageRank and matrix factorization.
These applications can be applied to graph data that is con-
tributed by individual users, such as a COVID-19 contact graph.
Another option is that the data belongs to different enterprises
which want to mutually compute a function over the union of their
data while preserving its privacy. An example of an application of
this type is running an MPC computation of PageRank over graphs
of financial transactions (known to different banks) in order to iden-
tify fraud. (This application is described in [49], which suggests a
solution based on additively homomorphic encryption.)
Our focus We focus in this work on two main classes of graph
algorithms. The first is breadth-first search (BFS). This algorithm
is the basic building block for contact tracing. We also show how to
augment it with additional information associated with edges. BFS
is also related to finding connected components, which is claimed by
a recent VLDB survey to be ‚Äúthe most popular graph computation
overall and also among practitioners‚Äù [48].
Another type of algorithm which we explore is maximal in-
dependent set (MIS). This problem is defined over an undirected
graph. An independent set is a set of nodes that are not connected
by any edge. A maximal independent set is an independent set to
which no additional node can be added. This problem has immedi-
ate applications for problems such as (Œî + 1)-coloring where Œî is
the maximum degree, and maximal matching, which consequently
enables to approximate vertex cover by a factor of at most two.
1.3 How GraphSC Works
The GraphSC framework computes message-passing algorithms, in
a setting where the graph topology and the values associated with
nodes and edges are secret-shared between multiple parties.
Input: The input to GraphSC is a directed graph ùê∫(ùëâ , ùê∏). Each
edge (ùë¢, ùë£) ‚àà ùê∏ is represented as a tuple (ùë¢, ùë£, ùëë), where ùë¢ and ùë£ are
the source and destination nodes of the edge, and ùëë is a binary string
of a predefined length which encodes data associated with the edge.
We assume that there are no parallel edges. (The framework can
also work well if there are parallel edges, but we prefer to simplify
the exposition.) Each node ùë¢ ‚àà ùê∫ is represented as a tuple (ùë¢, ùë¢, ùëë),
where ùëë is data associated with the node. The bit lengths of tuples
representing nodes or edges are equal, and since the input tuples
are secret-shared between servers, each server cannot distinguish
between tuples representing nodes or edges.
The GraphSC paper [44] (generalizing the work of [45]) imple-
ments message-passing algorithms on the shared graph. It also
supports parallel execution of the algorithms, using programming
paradigms similar to Pregel [39] or GraphLab [37].
The computation of the message-passing algorithm is composed
of repeating the following three steps:
send on its outgoing edges.
‚Ä¢ Scatter: Each node uses its own data to define messages to
‚Ä¢ Gather: Each node receives messages on all its incoming
‚Ä¢ Apply: Based on the gathered information, the node updates
edges.
its own state.
We slightly change the notation and combine the gather and apply
steps, and will therefore refer only to the scatter and gather steps.
When considering an MPC implementation of message-passing
algorithms, the main challenge is in transferring messages over
edges while keeping the topology hidden. In other words, for each
edge (ùë¢, ùë£) the computation of the new state of ùë£ must depend on
the state of ùë¢, but the fact that these two nodes are connected must
be kept secret. GraphSC solves this problem by using secure sort
operations, and alternating between ordering edges based on their
source node and ordering them based on their destination. This is
done in the following way:
‚Ä¢ Source sort: Run a secure protocol to sort all tuples (which
can be edges of the form (ùë¢, ùë£, ùëë), or nodes of the form
(ùë¢, ùë¢, ùëë)) based on the source field ùë¢. The order operation is
such that at the end of this protocol, a tuple representing a
node appears before all tuples representing edges outgoing
from that node.
Session 2D: Secure Multiparty Computation CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea611‚Ä¢ Scatter: In this step each node sends messages on its out-
going edges. This step makes use of the fact that after the
sort, the tuples representing the outgoing edges from node
ùë¢ are located next to the tuple representing ùë¢. Therefore
sending data from a node to its outgoing edges can be im-
plemented by an MPC of a circuit with local connections
between neighboring tuples and linear size.
It is important to note that the wiring between gates in this
circuit is independent of the topology of the original graph.
As an example, assume that the circuit should copy a single-
bit state ùëë from each node to its outgoing edges. The circuit
is constructed by setting the data bit ùëëùëñ+1 of tuple ùëñ + 1 to be
equal to an AND between ùëëùëñ and a bit which is 1 iff tuple
ùëñ + 1 represents an edge.1)
‚Ä¢ Destination sort: Run a secure sort of all (ùë¢, ùë£, ùëë) tuples
‚Ä¢ Gather + apply: Each node gathers information from its
incoming edges, and updates its own state based on the gath-
ered information. (This operation can again be implemented
by a circuit with local connections, since the destination sort
places all incoming edges next to their destination node.)
based on the destination field ùë£.
The cost for each message-passing round is two secure sort opera-
tions, and two computations of circuits. The main focus of GraphSC
was on parallel execution, and on supporting parallel execution for
both the sort and scatter/gather operations.
Jumping ahead, we can substantially improve the performance
of GraphSC by replacing two of its components with more efficient
alternatives: We replace sorting with shuffling in message-passing
rounds, and replace two-party MPC with a 3-party MPC with an
honest majority.
Graph analysis with differential privacy The recent work of
Mazloom et al. [40, 41] implements message-passing algorithms
under a relaxed security notion which allows to leak differentially-
private data. We discuss this work in Section 1.4.3
1.4 Related Work
1.4.1 MPC. The feasibility of security multi-party computation
(MPC) has been shown as early as in the 1980s, with either computa-
tional security [21, 51] or information-theoretical security [6, 12, 47].
Recent research emphasizes the concrete efficiency of MPC. As
data analysis tends to handle large data, it is protocols for high
throughput MPC that are relevant for our purpose. The best per-
formance is achieved with protocols for 3 or 4 parties with an
honest majority (namely, only a single corrupt party), where the
data is shared between these parties. A significant challenge has
been to obtain (full simulation-based) security for malicious adver-
saries while maintaining high throughput. A series of works such