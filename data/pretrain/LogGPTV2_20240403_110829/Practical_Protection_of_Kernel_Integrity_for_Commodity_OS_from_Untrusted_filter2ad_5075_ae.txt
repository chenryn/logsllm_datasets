higher only when an untrusted extension is responsible for
highly frequent operations such as disk I/O. In the kernel
decompression experiment, the protection state transfer rate
reaches about 39,0000 per second, which renders HUKO
the worst case of performance: 0.79 of the baseline.
Besides application level benchmarks, we also per-
formed several micro-benchmark tests on process creation
with Lmbench. We labeled ext3 and 8139too as un-
trusted extensions in our system protected by HUKO. Re-
garding the test item process fork + exit, it took
HUKO system 100.31 µs to complete the operation while
the native system took 92.87 µs. For process fork
+ execve, HUKO system spent 377.47 µs compared to
the native time of 296.47 µs. For process fork +
/bin/sh -c, it took HUKO system 884.57 µs compared
to the native time of 697.38 µs.
6 Limitations and Future Work
We believe that HUKO provides a transparent security
layer which greatly enhances the integrity protection for
commodity operating system kernels. Nonetheless, it also
has limitations in defending against certain security threats.
In the following, we discuss these limitations and possible
solutions as our future direction.
Kernel APIs.
In HUKO system, controls from untrusted
extensions to the OS kernel are restricted to a set of trusted
entry points, which are essentially legitimate kernel APIs
that exported to kernel extensions. However, in commod-
ity operating systems, the kernel is usually not designed to
tolerate or defend against malicious extensions, which may
results in the lack of robustness and security of kernel APIs.
Moreover, programming languages used to build commod-
ity OS kernels security do not support features like type en-
forcement. For these reason, it is possible that attackers
can exploit the “legitimate” kernel interface to subvert the
integrity of kernel. Examples of such attacks include: (1)
calling legitimate kernel APIs with undesired object refer-
ence to compromise kernel objects, (2) abuse of privileges,
(e.g., video cam driver accesses kernel APIs for the net-
working stack), and (3) exploiting memory and type bugs
of the kernel API functions. Comprehensively addressing
these issues would require major design improvements on
speciﬁc kernel (e.g., [29, 16, 20]), such as kernel object
model, access control model, type enforcement, veriﬁcation
and privilege separation. In addition, these approaches can
be layered atop HUKO, which serves as a VMM-level refer-
ence monitor for mediating kernel object access, checking
API calls and their parameters.
To obtain a better mandatory security policy, we are
looking for a deeper understanding of the behavior of the
OS kernel.
In speciﬁc, we are interested in ﬁguring out
security-sensitive kernel data along the execution path of
each TEP. This could be achieved by static program analy-
sis with security annotations. Based on the properties such
as privilege, availability level and resource category of these
kernel data, we could achieve a good classiﬁcation of TEPs
in terms of resource manipulation and privilege.
In this
way, the security and resource semantics of TEPs are further
revealed, which could help improve the security of TEPs
whose privileges are originally uniﬁed in commodity OSes.
Information ﬂow. Another category of possible attacks
is through explicit and implicit information ﬂow. For in-
stance, OS kernel may explicitly grant write access to ex-
tensions on its own data objects (e.g., via shared memory,
API or messages), on the other hand, extensions may write
low integrity data to some places where kernel may read
afterwards. Both situations violate the traditional integrity
model.
It is known that there is no existing information
ﬂow control inside commodity OS kernels since tracking
ﬁne-grained information ﬂow is costly in regard to current
programming language and architecture. Alternatively, we
plan to investigate applying end points such as input ﬁlters
and veriﬁers between OS kernel and extensions to regulate
the function parameters and information passed to the OS
kernel.
7 Related Work
The idea and design of HUKO draw inspiration from a
variety of topics of past research work, which include kernel
integrity protection, kernel malware analysis, device driver
isolation and mandatory access control models.
Kernel integrity protection. There are a number of pre-
vious research efforts aiming at protecting the integrity of
the operating system kernel, such as code integrity protec-
tion [27, 25, 22], data integrity protection [10, 31] and con-
trol data/ﬂow integrity protection [33, 23, 35]. Secvisor
[27] is a hypervisor based protection system which guar-
antees the life-time code integrity of the kernel. It leverages
advanced features from AMD processors, which are anal-
ogous to those used in HUKO. HUKO differs from Secvi-
sor in the following aspects: Firstly, Secvisor is intended to
prohibit any untrusted code executing in the kernel space,
while HUKO does allow untrusted kernel extensions run-
ning securely to provide functionality and availability. Thus
HUKO needs to enforce additional protection such as data
integrity and control ﬂow integrity to restrict the behavior of
untrusted extensions. Secondly, Secvisor’s tiny hypervisor
design renders the system a very small TCB, which grants
the system a more secure foundation which is easier to be
veriﬁed. In comparison, HUKO is based on Xen hypervisor
with a larger TCB, yet it saves deployment and conﬁgura-
tion effort for existing Xen virtual machines.
Kernel malware analysis. Several recent projects such as
Panorama [39], K-Tracer [9], HookFinder [18], HookMap
[34], and Poker [26] focus on analyzing the behavior of
kernel-level malwares. These research work are comple-
mentary to HUKO protection system because they provide
extensive knowledge of how malwares damage the integrity
of the kernel. These knowledge would further help HUKO
to enforce more effective access control policies on various
kinds of kernel objects to offer comprehensive protection.
Device driver isolation. Another major category of re-
lated research work is on isolating buggy device drivers
to improve the reliability of operating systems. Examples
of these systems include Nooks [32], MINIX 3 [19], and
SafeDrive [41]. Such systems are mainly targeted for fault
resistance and dependability, and they could effectively pre-
vent system crashes caused by design defects and program-
ming mistakes of device drivers. These approaches are
complementary to HUKO in enhancing the robustness and
availability of OS kernels. Our system resembles Nooks
since both approaches establish hardware-enforced protec-
tion domains to isolate kernel components. However, by the
time Nooks was designed, there was no supporting hard-
ware features such like NX bits, EPT, VPID, IOMMU, etc.
By leveraging these advanced features, HUKO signiﬁcantly
reduces the amount of OS modiﬁcations and has a better
performance. Also, HUKO offers more protection from ma-
licious extensions, e.g., it preserves architectural state from
being modiﬁed by untrusted extensions. As a VMM-based
approach, HUKO has a smaller TCB and attack surface
compared with OS-based approaches. Language-based ap-
proaches such like SafeDrive provide type enforcement and
prevent memory errors, though they often require the source
code of extension for recompilation, which limits their ap-
plicability for binary drivers. In contrast, HUKO can sup-
port unmodiﬁed legacy extensions.
Mandatory access control. HUKO enforces mandatory
access control policies over subjects and objects in the OS
kernel. There are many systems that are designed for im-
proving operating system security by adding mandatory
access control, e.g., LOMAC [17], SELinux [7], AppAr-
mor [2], UMIP [21] and Loki [40]. These systems pro-
vide ﬂexible, powerful and ﬁne-grained protection to pre-
serve system-level integrity. However, they are all enforc-
ing MAC at the OS abstraction level and cannot be applied
to mediate the activities of kernel-level objects.
Address space separation. As part of our design, HUKO
isolates untrusted extensions from the OS kernel using
the memory virtualization mechanism provided by VMMs.
There are also a number of systems achieving different re-
search goals using various techniques that isolate two en-
tities which previously belong to the same address space.
MMP [36, 37] achieves address space isolation and ﬁne-
grained permission mapping by extending the hardware
architecture. XFI [15] provides permission management
within system address spaces using binary rewriting. Na-
tiveClient [38] offers sandboxing and isolation to native x86
modules by leveraging x86 segmentation and code valida-
tion. SIM [30] proposes a secure In-VM monitoring ap-
proach which places the kernel-level monitor in a protected
address space using shadow paging. Overshadow [13] and
Bastion [12] leverages multiple shadow tables to protect
application data from the rest of the system. In compari-
son, HUKO focuses on protecting the integrity of the OS
kernel. Also HUKO is based on hardware-assisted paging
rather than software-based shadow paging mechanism to re-
duce the number of VMEXITs and improve the TLB perfor-
mance.
8 Conclusion
We have presented the design, implementation and eval-
uation of HUKO, a hypervisor-based layered system that
comprehensively protects the integrity of commodity OS
kernels from untrusted extensions. HUKO leverages several
contemporary hardware virtualization techniques as well as
its novel software design to achieve its design principles:
multi-aspect protection, acceptable performance and ease-
of-adoption. Our experiments show that HUKO can ef-
fectively protect the kernel integrity from various kinds of
malicious extensions with an acceptable performance over-
head. We believe that HUKO provides a practical frame-
work for running untrusted extensions in OS kernel with
enhanced integrity protection for commodity systems.
Acknowledgements
We would like to thank our paper shepherd Mihai
Christodorescu and the anonymous reviewers, for their
helpful comments on earlier versions of this paper.
This work was supported by AFOSR FA9550-07-1-0527
(MURI), NSF CNS-0905131, ARO W911NF-09-1-0525
(MURI), and AFRL FA8750-08-C-0137.
References
[1] All-root. http://packetstormsecurity.org/UNIX/penetration
/rootkits/all-root.c.
[2] Apparmor. http://www.novell.com/linux/security/apparmor/.
[3] Enyelkm. http://www.packetstormsecurity.com/UNIX/penetration
/rootkits/enyelkm-1.3-no-objs.tar.gz.
[4] Intel 64 and ia-32 architectures software developer’s
guide.
manual
http://www.intel.com/Assets/PDF/manual/253669.pdf.
directed
System programming
virtualization
technology
[5] Intel
volume
i/o.
3b:
for
ftp://download.intel.com/technology/computing
/vptech/Intel(r) VT for Direct IO.pdf.
[6] Lmbench. http://www.bitmover.com/lmbench/.
[7] Nsa. security enhanced linux. http://www.nsa.gov/selinux/.
[8] Unixbench. http://ftp.tux.org/pub/benchmarks/System/unixbench/.
[9] M. S. Andrea Lanzi and W. Lee. K-tracer: A system for
In Network and Dis-
extracting kernel malware behavior.
tributed System Security Symposium, 2009.
[10] A. Baliga, V. Ganapathy, and L. Iftode. Automatic infer-
ence and enforcement of kernel data structure invariants. In
ACSAC ’08: Proceedings of the 2008 Annual Computer Se-
curity Applications Conference, pages 77–86, Washington,
DC, USA, 2008. IEEE Computer Society.
[11] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and
X. Jiang. Mapping kernel objects to enable systematic in-
tegrity checking.
In CCS ’09: Proceedings of the 16th
ACM Conference on Computer and Communications Secu-
rity, pages 555–565, New York, NY, USA, 2009. ACM.
[12] D. Champagne and R. B. Lee. Scalable architectural support
for trusted software. In The 16th IEEE International Sympo-
sium on High-Performance Computer Architecture (HPCA),
Bangalore, India, Jan 9-14 2010.
[13] X. Chen, T. Garﬁnkel, E. C. Lewis, P. Subrahmanyam, C. A.
Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports. Over-
shadow: a virtualization-based approach to retroﬁtting pro-
tection in commodity operating systems. In ASPLOS XIII:
Proceedings of the 13th International Conference on Archi-
tectural Support for Programming Languages and Operat-
ing Systems, pages 2–13, New York, NY, USA, 2008. ACM.
[14] B. Dolan-Gavitt, A. Srivastava, P. Traynor, and J. Gifﬁn.
Robust signatures for kernel data structures.
In CCS ’09:
Proceedings of the 16th ACM Conference on Computer and
Communications Security, pages 566–577, New York, NY,
USA, 2009. ACM.
[15] U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C.
Necula. Xﬁ: software guards for system address spaces. In
OSDI ’06: Proceedings of the 7th symposium on Operating
systems design and implementation, pages 75–88, Berkeley,
CA, USA, 2006. USENIX Association.
[16] M. F¨ahndrich, M. Aiken, C. Hawblitzel, O. Hodson,
G. Hunt, J. R. Larus, and S. Levi. Language support for
fast and reliable message-based communication in singular-
ity os.
In Proceedings of the 1st ACM SIGOPS/EuroSys
European Conference on Computer Systems 2006, EuroSys
’06, pages 177–190, New York, NY, USA, 2006. ACM.
[17] T. Fraser. Lomac: Low water-mark integrity protection for
cots environments. In SP ’00: Proceedings of the 2000 IEEE
Symposium on Security and Privacy, page 230, Washington,
DC, USA, 2000. IEEE Computer Society.
[18] Z. L. Heng Yin and D. Song. Hookﬁnder: Identifying and
understanding malware hooking behaviors. In Proceedings
of the 15th Annual Network and Distributed System Security
Symposium (NDSS’08), 2008.
Improving
[32] M. M. Swift, B. N. Bershad, and H. M. Levy.
the reliability of commodity operating systems.
In SOSP
’03: Proceedings of the nineteenth ACM Symposium on Op-
erating Systems Principles, pages 207–222, New York, NY,
USA, 2003. ACM.
[33] Z. Wang, X. Jiang, W. Cui, and P. Ning. Countering ker-
nel rootkits with lightweight hook protection. In CCS ’09:
Proceedings of the 16th ACM Conference on Computer and
Communications Security, pages 545–554, New York, NY,
USA, 2009. ACM.
[34] Z. Wang, X. Jiang, W. Cui, and X. Wang. Countering per-
sistent kernel rootkits through systematic hook discovery. In
RAID ’08: Proceedings of the 11th International Symposium
on Recent Advances in Intrusion Detection, pages 21–38,
Berlin, Heidelberg, 2008. Springer-Verlag.
[35] J. Wei, B. D. Payne, J. Gifﬁn, and C. Pu. Soft-timer driven
transient kernel control ﬂow attacks and defense.
In AC-
SAC ’08: Proceedings of the 2008 Annual Computer Se-
curity Applications Conference, pages 97–107, Washington,
DC, USA, 2008. IEEE Computer Society.
[36] E. Witchel, J. Cates, and K. Asanovi´c. Mondrian mem-
ory protection.
In ASPLOS-X: Proceedings of the 10th
international conference on Architectural support for pro-
gramming languages and operating systems, pages 304–
316, New York, NY, USA, 2002. ACM.
[37] E. Witchel, J. Rhee, and K. Asanovi´c. Mondrix: memory
isolation for linux using mondriaan memory protection. In
SOSP ’05: Proceedings of the twentieth ACM symposium on
Operating systems principles, pages 31–44, New York, NY,
USA, 2005. ACM.
[38] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Or-
mandy, S. Okasaka, N. Narula, and N. Fullagar. Native
client: A sandbox for portable, untrusted x86 native code.
Security and Privacy, IEEE Symposium on, 0:79–93, 2009.
[39] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda.
Panorama: Capturing system-wide information ﬂow for
malware detection and analysis. In CCS ’07: Proceedings
of the 14th ACM Conference on Computer and Communica-
tions Security, pages 116–127, New York, NY, USA, 2007.
ACM.
[40] N. Zeldovich, H. Kannan, M. Dalton, and C. Kozyrakis.
Hardware enforcement of application security policies using
tagged memory. In OSDI 2008, pages 225–240. USENIX
Association, 2008.
[41] F. Zhou, J. Condit, Z. Anderson, I. Bagrak, R. Ennals,
M. Harren, G. Necula, and E. Brewer. Safedrive: safe and
recoverable extensions using language-based techniques. In
Proceedings of the 7th symposium on Operating systems de-
sign and implementation, OSDI ’06, pages 45–60, Berkeley,
CA, USA, 2006. USENIX Association.
[19] J. Herder, H. Bos, B. Gras, P. Homburg, and A. Tanenbaum.
Fault isolation for device drivers.
In IEEE/IFIP Interna-
tional Conference on Dependable Systems and Networks,
2009. DSN ’09., 2009.
[20] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock,
P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Nor-
rish, T. Sewell, H. Tuch, and S. Winwood. sel4: Formal ver-
iﬁcation of an os kernel. In SOSP ’09: Proceedings of the
ACM SIGOPS 22nd Symposium on Operating Systems Prin-
ciples, pages 207–220, New York, NY, USA, 2009. ACM.
[21] N. Li, Z. Mao, and H. Chen. Usable mandatory integrity
protection for operating systems. In SP ’07: Proceedings of
the 2007 IEEE Symposium on Security and Privacy, pages
164–178, Washington, DC, USA, 2007. IEEE Computer So-
ciety.
[22] L. Litty, H. A. Lagar-Cavilla, and D. Lie. Hypervisor sup-
port for identifying covertly executing binaries.
In SS’08:
Proceedings of the 17th USENIX Security Symposium, pages
243–258, Berkeley, CA, USA, 2008. USENIX Association.
[23] N. L. Petroni, Jr. and M. Hicks. Automated detection of per-
sistent kernel control-ﬂow attacks. In CCS ’07: Proceedings
of the 14th ACM Conference on Computer and Communica-
tions Security, pages 103–115, New York, NY, USA, 2007.
ACM.
[24] T. H. R. Hund and F. Freiling. Return-oriented rootkits: By-
passing kernel code integrity protection mechanisms. In Se-
curity’09: Proceedings of the 18th USENIX Security Sym-
posium, 2009.
[25] R. Riley, X. Jiang, and D. Xu. Guest-transparent preven-
tion of kernel rootkits with vmm-based memory shadowing.
In RAID ’08: Proceedings of the 11th International Sym-
posium on Recent Advances in Intrusion Detection, pages
1–20, Berlin, Heidelberg, 2008. Springer-Verlag.
[26] R. Riley, X. Jiang, and D. Xu. Multi-aspect proﬁling of ker-
nel rootkit behavior.
In EuroSys ’09: Proceedings of the
4th ACM European Conference on Computer systems, pages
47–60, New York, NY, USA, 2009. ACM.
[27] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: A
tiny hypervisor to provide lifetime kernel code integrity for
commodity oses. In SOSP ’07: Proceedings of twenty-ﬁrst
ACM SIGOPS Symposium on Operating Systems Principles,
pages 335–350, New York, NY, USA, 2007. ACM.
[28] H. Shacham. The geometry of innocent ﬂesh on the bone:
Return-into-libc without function calls (on the x86). In CCS
’07: Proceedings of the 14th ACM Conference on Computer
and Communications Security, pages 552–561, New York,
NY, USA, 2007. ACM.
[29] J. S. Shapiro, J. M. Smith, and D. J. Farber. Eros: a fast capa-
bility system. In Proceedings of the seventeenth ACM sym-
posium on Operating systems principles, SOSP ’99, pages
170–185, New York, NY, USA, 1999. ACM.
[30] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi. Secure in-
vm monitoring using hardware virtualization. In CCS ’09:
Proceedings of the 16th ACM Conference on Computer and
Communications Security, pages 477–487, New York, NY,
USA, 2009. ACM.
[31] A. Srivastava, I. Erete, and J. Gifﬁn. Kernel data integrity
protection via memory access control. Technical Report GT-
CS-09-04, Georgia Institute of Technology, 2009.