### Parameter Specifications
- **Carrier Frequency**: 5.247 GHz
- **Data Bandwidth (BW)**: 100 MHz
- **Number of Bins**: 100 (each 1 MHz)
- **Symbol Period**: 1.4 µs
- **Uncoded Bit Error Rate (BER)**: 10^-3
- **Bin Modulation Schemes**: BPSK, 4-QAM, 16-QAM, 64-QAM
- **Maximum Link Length**: 10 m
- **Average Output Power**: 7.5 dBm

### Figure 7: Wideband Radio Used in SWIFT
The wideband radio used in SWIFT operates with a subset of bins that are still usable. The receiver, which expects to receive data across the previously agreed set of bins, correctly receives data in the intersection of the old and new bins but encounters errors in the other bins. These errors can be mitigated using a simple error-correcting code with sufficient redundancy to cover the expected extent of disagreement between the old and new bin sets.

SWIFT employs a low-overhead handshake to quickly resolve these disagreements. The handshake data includes the new set of usable bins, and the striping technique is as described above. Once the handshake is complete, the nodes resume normal data exchange.

### 5.4 Network Issues
This section briefly describes how multiple SWIFT links can be composed to build a network.

#### (a) Medium Access Control (MAC)
We use a carrier sense-based MAC similar to 802.11 [22]. A node senses the medium and transmits if it is not busy. However, directly applying the carrier sense technique from narrowband radios, which checks for the total received power in the band exceeding a threshold, would unnecessarily reduce the transmission opportunities for SWIFT nodes. This is because narrowband transmitters often use some part of the band, preventing the wideband radio from transmitting. Instead, SWIFT's carrier sense focuses only on the bins declared usable by adaptive sensing. Specifically, when a node wants to send, it computes an FFT of the observed power and proceeds with its transmission only if a large fraction of its usable bins are below the wideband carrier sense threshold. Additionally, while wideband nodes can use an 802.11-like MAC, they need to wait for a relatively longer period to check that the medium is idle, i.e., they should use a longer DIFS interval than typical values picked by narrowband devices. This ensures that a narrowband device that has just arrived into the environment can quickly access the medium and trigger adaptive sensing.

The SWIFT MAC randomly jitters the start of a probing epoch to ensure that different SWIFT nodes perform adaptive sensing independently. Further, a node uses control packets analogous to RTS/CTS to notify other SWIFT nodes of the start and end of a probing epoch to avoid simultaneous probing by multiple nodes. While this solution works for small wideband networks, extensions to larger networks may require more sophisticated mechanisms to leverage probing results across multiple SWIFT nodes.

#### (b) Transmitter Identification
A SWIFT receiver needs to receive and decode packets from multiple transmitters. Decoding a packet requires knowledge of the exact set of mutually agreed bins over which the data is striped, and this mutual agreement is likely to be different with different transmitters. Therefore, the SWIFT receiver must identify the transmitter of a packet even before it can decode the packet.

SWIFT adapts the technique of correlation with known pseudonoise sequences, typically used for packet detection, to develop a solution at the link layer. Pseudonoise sequences exhibit low correlation with each other while showing high correlation with themselves, allowing identification of specific pseudonoise sequences purely by correlation [30]. Transmitter MAC addresses in SWIFT are pseudonoise sequences and appear in a known and fixed symbol location in the received packet. When a receiver detects a packet, it correlates it against its neighboring nodes' MAC addresses to determine the transmitter and hence the set of bins. This requires a receiver to maintain a table of neighbor MAC addresses, which it learns during the initial sync packet where they exchange their mutually usable set of bins. Note that receiving the sync packet itself does not require prior bin agreement, as described in §5.3.

### 6. Implementing SWIFT
We have implemented SWIFT in a custom wideband radio transceiver platform developed by the WiGLAN research project [20]. The WiGLAN transceiver board, shown in Fig. 7, connects to the PC via the PCI bus and acts like a regular network card. The transceiver [26] consists of three parts: 1) the RF front-end, which captures the analog signal, 2) the data converters, which convert between analog and digital, and 3) the digital baseband modem. All digital processing, such as packet acquisition and channel estimation, is done in the baseband.

Our prototype has two components: the driver and the firmware.
- **Driver**: The driver presents a standard network interface to the kernel. In addition to this typical functionality, the driver offloads from the FPGA any computation that is too complex for hardware and is not on the critical path of an OFDM symbol. For example, the driver implements the metric computation and t-test (§5.1). Our current prototype implements two metrics: average narrowband power and probability of transmission immediately after SWIFT.
- **Firmware**: Several major components of SWIFT that need to be on the critical path, such as narrowband power measurement (§5.1), the cognitive PHY (§5.2), the band consensus protocol (§5.3), and the MAC (§5.4), are implemented on the FPGA. We design SWIFT’s algorithms in the Simulink environment, which has a hardware model for the Xilinx Virtex-4 SX35 FPGA that we use. The code is then compiled into an intermediate form using Xilinx tools [6]. We use Verilog to integrate this intermediate form with the PCI subsystem and create the final hardware representation of our code.

### 7. Performance Evaluation
We evaluate SWIFT in a 12-node testbed consisting of four wideband nodes and eight 802.11a nodes. Fig. 8 shows the experimental environment, which has high diversity due to the presence of walls, metal cabinets, desks, and various non-line-of-sight node locations. The exact choice of node locations for each experiment will be described along with the results for that experiment.

#### Wideband Devices
We use the WiGLAN wideband hardware described in §6, whose specifications are in Fig. 7. It has 100 OFDM data bins, numbered from -50 to +50, with bin 0 never being used. For all schemes, the wideband devices are evaluated while continuously sending 10 ms packets with a 1 ms gap between packets.

#### Narrowband Devices
These nodes run 802.11a in channel 52, corresponding to wideband bins 3 through 23. 802.11a nodes send UDP streams at the highest rate supported by the medium, except for experiment 7.5, in which they use TCP. The protocol, signal details, and occupied bands of 802.11a are, of course, unknown to SWIFT.

#### Compared Schemes
We compare the different schemes by configuring our wideband hardware to run one of:
- **SWIFT**: This is the SWIFT protocol implemented as in §6.
- **Low-power wideband (LOW)**: This is a baseline system that operates below the noise level to avoid interfering with narrowband devices. Specifically, it transmits signals with a power spectral density of -41 dBm/MHz, the FCC maximum for UWB devices [2].
- **Non-adaptive wideband (NORM)**: This is a system that transmits across a wide band at the normal power of our hardware platform but does not adapt to narrowband devices.

Note that both LOW and NORM will suffer drastic bit errors in bins used by 802.11a when it is turned on. For conservative comparison in this case, we therefore consider idealized versions of these systems that use the minimal amount of coding required to correct these errors.

### 7.1 Throughput and Range
This experiment explores whether it is possible to be as narrowband-friendly as a transmitter operating below the noise level while preserving the good throughput and range of a normal-powered wideband system.

#### Method
We place the wideband transmitter in location tx and test its performance to the wideband receiver, which is placed in each of locations 1 through 10. For each location, we measure the throughput of LOW, NORM, and SWIFT with and without interfering 802.11a traffic, and plot the results in Fig. 9.

#### Results
Fig. 9 demonstrates that, while both NORM and LOW have limitations, SWIFT can simultaneously achieve the high throughput and wide range of NORM while being as narrowband-friendly as LOW. Specifically, we see that:
- **Throughput and range of LOW are limited**: Fig. 9(c) shows that LOW fails to get any throughput after location 2 and has 3.6 to 10.5 times lower throughput than SWIFT and NORM.
- **NORM is not narrowband friendly**: Fig. 9(a) shows that NORM significantly reduces 802.11a throughput.
- **SWIFT has high throughput and range**: Figs. 9(b) and 9(d) show that in all locations, SWIFT achieves the same or greater throughput than NORM, with or without 802.11a.
- **SWIFT is narrowband friendly**: Fig. 9(a) shows that 802.11a throughput is unaffected by SWIFT.

From Figs. 9(b) and 9(d), we see that SWIFT surprisingly achieves higher throughput than NORM in the presence of 802.11a. This is because SWIFT intelligently avoids 802.11a-occupied bins, while NORM uses these bins, suffers errors due to high narrowband power, and incurs additional overhead to correct errors in these bins.

### Figure 8: Testbed Map
Node locations are highlighted in the testbed map.

### Figure 9: Approaches to Narrowband-friendliness
Presents the throughput-range tradeoff and shows that SWIFT, illustrated in (d), is as friendly to 802.11a as LOW while achieving dramatically higher throughput and operating range.