Parameter
Carrier Freq.
Data BW
Number of Bins
Symbol Period
Uncoded BER
Bin Modulation
Max Link Len
Avg. Output Pwr
Value
5.247 GHz
100 MHz
100 (×1 MHz)
1.4 µs
10−3
BPSK, 4-
16-, 64-QAM
10 m
7.5 dBm
Figure 7: Wideband Radio Used in SWIFT
bins, but transmits only in the subset that is still usable. The receiver,
which still expects to receive data across the old agreement, receives
data in the intersection of the old and new bins correctly, but sees
errors in the other bins. However, this can be easily ﬁxed by using a
simple error correcting code with sufﬁcient redundancy to cover the
expected extent of disagreement between old and new bins.
SWIFT uses a low-overhead handshake to quickly resolve dis-
agreements. The data in the handshake is the new set of usable bins,
and the striping technique is as described above. Once the handshake
terminates, the nodes resume normal data exchange.
5.4 Network Issues
This section brieﬂy describes how we compose multiple SWIFT links
to build a network.
(a) The MAC: We use a carrier sense based MAC similar to
802.11 [22]. A node senses the medium and transmits if the medium
is not busy. However, a direct application of the carrier sense tech-
nique of narrowband radios, which just checks for the total received
power in the band to exceed a threshold, will unnecessarily reduce the
transmission opportunities of SWIFT nodes since narrowband trans-
mitters are always likely to be using some part of the band and hence
preventing the wideband radio from transmitting. Instead, SWIFT’s
carrier sense focuses only on the bins declared usable by adaptive
sensing. Speciﬁcally, when a node wants to send, it computes an FFT
of the observed power, and proceeds with its transmission only if a
large fraction of its usable bins are below the wideband carrier sense
threshold.3 Further, while wideband nodes can use an 802.11-like
MAC, they need to wait for a relatively longer period to check that
the medium is idle, i.e., they should use a longer DIFS interval than
typical values picked by narrowband devices. This ensures that a
narrowband device that has just arrived into the environment can
quickly access the medium and trigger adaptive sensing.
The SWIFT MAC randomly jitters the start of a probing epoch to
ensure that different SWIFT nodes perform adaptive sensing indepen-
dently. Further, a node uses control packets analogous to RTS/CTS
to notify other SWIFT nodes of the start and end of a probing epoch
in order to avoid simultaneous probing by multiple nodes. While
this solution works for small wideband networks, extensions to larger
networks may require more sophisticated mechanisms to leverage
probing results across multiple SWIFT nodes.
(b) Transmitter Identiﬁcation: The alert reader might have ob-
served that a SWIFT receiver potentially needs to receive and decode
packets from multiple transmitters; however, decoding a packet re-
quires knowledge of the exact set of mutually agreed bins over which
the data is striped, and this mutual agreement is likely to be different
with different transmitters. Hence, the SWIFT receiver needs to iden-
tify the transmitter of a packet even before it can decode the packet.
3Note that the objective of wideband carrier sense is not to correctly decode the
received signal, but rather to measure received power, which does not require alignment.
This is in contrast to current networks where a node decodes received
packet headers to determine if they are intended for itself.
SWIFT adapts the technique of correlation with known
pseudonoise sequences, typically used for packet detection, to de-
velop a solution at the link layer. It is well known that pseudonoise
sequences exhibit low correlation with each other while showing high
correlation with themselves, thereby allowing identiﬁcation of spe-
ciﬁc pseudonoise sequences purely by correlation [30]. Transmitter
MAC addresses in SWIFT are pseudonoise sequences, and appear in
a known and ﬁxed symbol location in the received packet. When a
receiver detects a packet, it correlates it against its neighboring nodes’
MAC addresses to determine the transmitter, and hence the set of
bins. This requires a receiver to maintain a table of neighbor MAC
addresses; a receiver learns about a neighbor’s MAC address during
the initial sync packet where they exchange their mutually usable set
of bins. Note that receiving the sync packet itself does not require
prior bin agreement, as described in §5.3.
6
Implementing SWIFT
We have implemented SWIFT in a custom wideband radio transceiver
platform developed by the WiGLAN research project [20]. The
WiGLAN transceiver board, shown in Fig. 7, connects to the PC via
the PCI bus, and acts like a regular network card. The transceiver [26]
consists of three parts: 1) the RF front-end, which captures the analog
signal, 2) the data converters, which convert between analog and dig-
ital, and 3) the digital baseband modem. All digital processing, such
as packet acquisition, channel estimation etc., is done in baseband.
Our prototype has two components: the driver and the ﬁrmware.
The former is implemented in software, and the latter in FPGA.
Driver: The driver presents a standard network interface to the
kernel. In addition to this typical functionality, the driver ofﬂoads
from the FPGA any computation that is too complex for hardware
and is not on the critical path of an OFDM symbol. For example, the
driver implements the metric computation and t-test (§5.1). Our cur-
rent prototype implements two metrics: average narrowband power,
and probability of transmission immediately after SWIFT.
Firmware: Several of SWIFT’s major components that need to be
on the critical path, such as narrowband power measurement (§5.1),
the cognitive PHY (§5.2), the band consensus protocol (§5.3), and
the MAC (§5.4), are implemented on the FPGA. We design SWIFT’s
algorithms in the Simulink environment, which has a hardware model
for the Xilinx Virtex-4 SX35 FPGA that we use. The code is then
compiled into an intermediate form using Xilinx tools [6]. We use
Verilog to integrate this intermediate form with the PCI subsystem,
and create the ﬁnal hardware representation of our code.
7 Performance Evaluation
We evaluate SWIFT in a 12 node testbed consisting of four wideband
nodes, and eight 802.11a nodes. Fig. 8 shows the experimental envi-
ronment, which has high diversity due to the presence of walls, metal
cabinets, desks, and various non-line-of-sight node locations. The
exact choice of node locations for each experiment will be described
along with the results for that experiment.
Wideband Devices. We use the WiGLAN wideband hardware de-
scribed in §6, whose speciﬁcations are in Fig. 7. It has 100 OFDM
data bins, numbered from -50 to +50, with bin 0 never being used. For
all schemes, the wideband devices are evaluated while continuously
sending 10 ms packets with a 1 ms gap between packets.
Narrowband Devices. These nodes run 802.11a in channel 52, cor-
responding to wideband bins 3 through 23. 802.11a nodes send UDP
)
s
p
b
M
(
t
u
p
h
g
u
o
r
h
T
a
1
1
.
2
0
8
)
s
p
b
M
(
t
u
p
h
g
u
o
r
h
T
W
O
L
40
35
30
25
20
15
10
5
0
160
140
120
100
80
60
40
20
0
)
s
p
b
M
(
t
u
p
h
g
u
o
r
h
T
M
R
O
N
NORM (No 802.11a)
NORM (With 802.11a)
600
500
400
300
200
100
0
LOW
NORM
SWIFT
No Wideband
1
2
3
4
5
6
7
8
Compared Scheme
(a) Throughput of 802.11a
(b) Throughput of Non-Adaptive Wideband (NORM)
Location
LOW (No 802.11a)
LOW (With 802.11a)
)
s
p
b
M
(
t
u
p
h
g
u
o
r
h
T
T
F
I
W
S
SWIFT (No 802.11a)
SWIFT (With 802.11a)
600
500
400
300
200
100
0
1
2
3
4
5
6
7
8
1
2
3
4
5
6
7
8
(c) Throughput of Low-Power Wideband (LOW)
Location
Location
(d) Throughput of SWIFT
Figure 9: Approaches to Narrowband-friendliness: Presents the throughput-range tradeoff, and shows that SWIFT, illustrated in (d), is as
friendly to 802.11a as LOW, while attaining dramatically higher throughput and operating range.
7.1 Throughput and Range
This experiment explores if it is possible to be as narrowband-friendly
as a transmitter operating below the noise level, while preserving the
good throughput and range of a normal-powered wideband system.
Method. We place the wideband transmitter in location tx, and test
its performance to the wideband receiver which is placed in each of
locations 1 through 10. For each location, we measure the throughput
of LOW, NORM, and SWIFT with and without interfering 802.11a
trafﬁc, and plot the results in Fig. 9.
Results. Fig. 9 demonstrates that, while both NORM and LOW are
ﬂawed, SWIFT can deliver on the fundamental goal of simultaneously
achieving the high throughput and wide range of NORM, while being
as narrowband friendly as LOW. In particular, we see that:
• Throughput and range of LOW are limited: Fig. 9(c) shows
that LOW fails to get any throughput after location 2, and has
3.6 − 10.5× lower throughput than SWIFT and NORM.
• NORM is not narrowband friendly: We can see from Fig. 9(a)
that NORM signiﬁcantly reduces 802.11a throughput.
• SWIFT has high throughput and range: From Figs. 9(b) and
9(d), we can see that in all locations, SWIFT achieves the same or
greater throughput than NORM, with or without 802.11a.
• SWIFT is narrowband friendly: From Fig. 9(a), we can see that
802.11a throughput is unaffected by SWIFT.
We see from Figs. 9(b) and 9(d) that SWIFT surprisingly achieves
higher throughput than NORM in the presence of 802.11a. This is
because SWIFT intelligently avoids 802.11a occupied bins, while
NORM uses these bins, suffers errors due to high narrowband power,
and hence incurs additional overhead to correct errors in these bins.
Figure 8: Testbed Map: Node Locations are Highlighted.
streams at the highest rate supported by the medium, except for ex-
periment 7.5, in which they use TCP. The protocol, signal details,
and occupied bands of 802.11a are, of course, unknown to SWIFT.
Compared schemes. We compare the different schemes by conﬁg-
uring our wideband hardware to run one of:
• SWIFT: This is the SWIFT protocol implemented as in §6.
• Low-power wideband (LOW): This is a baseline system that
operates below the noise level to avoid interfering with narrowband
devices. Speciﬁcally, it transmits signals with a power spectral
density of -41 dBm/MHz, the FCC maximum for UWB devices [2].
• Non-adaptive wideband (NORM): This is a system that trans-
mits across a wide band at the normal power of our hardware
platform, but does not adapt to narrowband devices.
Note that both LOW and NORM will suffer drastic bit errors in bins
used by 802.11a when it is turned on. For conservative comparison
in this case, we therefore consider idealized versions of these systems
that use the minimal amount of coding required to correct these errors.
l
d
o
h
s
e
r
h
T
l
a
e
d
I
600
500
400
300
200
100
0
F
N
I
7
F
N
I
8
F
N
I
F
N
I
9
10
1
2
3
4
5
6
Location
Inefficient!
Unsafe!
20
15
10
5
0
30
25
20
15
10
10
5
0
Inefficient!
20
15
10
5
0
30
25
20
15
10
10
5
0
i
s
n
B
d
e
t
s
a
W
f
o
r
e
b
m
u
N
)
s