    ......
可选参数：
  * `-fuzztime`: fuzz 目标在退出前将执行的总时间或迭代次数，默认为无限期。
  * `-fuzzminimizetime`：在每次最小化尝试期间执行模糊目标的时间或迭代次数，默认为 60 秒。
  * `-parallel`：一次运行的模糊测试进程的数量，默认值 `$GOMAXPROCS`。目前，在 fuzzing 期间设置 `-cpu` 无效。
第一行表示在开始模糊测试之前收集了“基线覆盖率”。
  * elapsed：自进程开始以来经过的时间量
  * execs：针对模糊目标运行的输入总数（自最后一个日志行以来的平均 execs/sec）
  * new interesting：已添加到生成的语料库中的“有趣”输入的总数（与整个语料库的总大小） 
出现panic之后立马返回，停止fuzz。
    --- FAIL: FuzzUnmarshal (362.91s)
        --- FAIL: FuzzUnmarshal (0.00s)
            testing.go:1349: panic: internal error: attempted to parse unknown event (please report): none
                goroutine 1422926 [running]:
                runtime/debug.Stack()
                    /usr/local/go/src/runtime/debug/stack.go:24 +0x90
                testing.tRunner.func1()
                    /usr/local/go/src/testing/testing.go:1349 +0x1f2
                panic({0x6be7a0, 0xc00d77d900})
                    /usr/local/go/src/runtime/panic.go:838 +0x207
                gopkg.in/yaml%2ev3.handleErr(0xc0013a36e0)
                    /home/null/gowork/src/github.com/yaml/yaml.go:294 +0xc5
                panic({0x6be7a0, 0xc00d77d900})
                    /usr/local/go/src/runtime/panic.go:838 +0x207
                gopkg.in/yaml%2ev3.(*parser).parse(0xc00d80b800)
                    /home/null/gowork/src/github.com/yaml/decode.go:163 +0x2d9
                gopkg.in/yaml%2ev3.unmarshal({0xc00d653b50, 0x5, 0x10}, {0x6b5ce0?, 0xc00d77d8f0}, 0x0?)
                    /home/null/gowork/src/github.com/yaml/yaml.go:161 +0x373
                gopkg.in/yaml%2ev3.Unmarshal(...)
                    /home/null/gowork/src/github.com/yaml/yaml.go:89
                gopkg.in/yaml%2ev3_test.FuzzUnmarshal.func1(0x0?, {0xc00d653b50, 0x5, 0x10})
                    /home/null/gowork/src/github.com/yaml/fuzz_test.go:11 +0x55
                reflect.Value.call({0x6c14a0?, 0x718e40?, 0x13?}, {0x7041e6, 0x4}, {0xc00d8086c0, 0x2, 0x2?})
                    /usr/local/go/src/reflect/value.go:556 +0x845
                reflect.Value.Call({0x6c14a0?, 0x718e40?, 0x514?}, {0xc00d8086c0, 0x2, 0x2})
                    /usr/local/go/src/reflect/value.go:339 +0xbf
                testing.(*F).Fuzz.func1.1(0x0?)
                    /usr/local/go/src/testing/fuzz.go:337 +0x231
                testing.tRunner(0xc00d7ff040, 0xc00d80e000)
                    /usr/local/go/src/testing/testing.go:1439 +0x102
                created by testing.(*F).Fuzz.func1
                    /usr/local/go/src/testing/fuzz.go:324 +0x5b8
        Failing input written to testdata/fuzz/FuzzUnmarshal/b27ab1d6a899fb4f0607968de5b80e930b49a0e279bd4341c515ebf9bd7e7c78
        To re-run:
        go test -run=FuzzUnmarshal/b27ab1d6a899fb4f0607968de5b80e930b49a0e279bd4341c515ebf9bd7e7c78
    FAIL
    exit status 1
出现崩溃后， 模糊引擎会将导致崩溃的输入写入该测试的种子语料库中，而且此输入会当作执行`go test`命令时的默认输入。根据奔溃提示，执行 `go
test
run=FuzzUnmarshal/b27ab1d6a899fb4f0607968de5b80e930b49a0e279bd4341c515ebf9bd7e7c78`
复现。
    null@ubuntu:~/gowork/src/github.com/yaml$ go test -run=FuzzUnmarshal/b27ab1d6a899fb4f0607968de5b80e930b49a0e279bd4341c515ebf9bd7e7c78
    --- FAIL: FuzzUnmarshal (0.00s)
        --- FAIL: FuzzUnmarshal/b27ab1d6a899fb4f0607968de5b80e930b49a0e279bd4341c515ebf9bd7e7c78 (0.00s)
    panic: internal error: attempted to parse unknown event (please report): none [recovered]
        panic: internal error: attempted to parse unknown event (please report): none [recovered]
        panic: internal error: attempted to parse unknown event (please report): none
查看崩溃字符
    null@ubuntu:~/gowork/src/github.com/yaml$ cat testdata/fuzz/FuzzUnmarshal/b27ab1d6a899fb4f0607968de5b80e930b49a0e279bd4341c515ebf9bd7e7c78 
    go test fuzz v1
    []byte(":   \xf0")
其中第一行显示了模糊引擎文件的编码版本，下面的是构成语料库条目的值，即导致程序崩溃的输入。
再次运行go test单元测试时，会将该输入当作默认输入并引发崩溃：
    null@ubuntu:~/gowork/src/github.com/yaml$ go test
    OK: 45 passed
    --- FAIL: FuzzUnmarshal (0.00s)
        --- FAIL: FuzzUnmarshal/b27ab1d6a899fb4f0607968de5b80e930b49a0e279bd4341c515ebf9bd7e7c78 (0.00s)
    panic: internal error: attempted to parse unknown event (please report): none [recovered]
        panic: internal error: attempted to parse unknown event (please report): none [recovered]
        panic: internal error: attempted to parse unknown event (please report): none
    goroutine 70 [running]:
    testing.tRunner.func1.2({0x6297a0, 0xc001470350})
        /usr/local/go/src/testing/testing.go:1389 +0x24e
    testing.tRunner.func1()
        /usr/local/go/src/testing/testing.go:1392 +0x39f
    panic({0x6297a0, 0xc001470350})
        /usr/local/go/src/runtime/panic.go:838 +0x207
    gopkg.in/yaml%2ev3.handleErr(0xc0000d16e0)
        /home/null/gowork/src/github.com/yaml/yaml.go:294 +0x6d
    panic({0x6297a0, 0xc001470350})
        /usr/local/go/src/runtime/panic.go:838 +0x207
    gopkg.in/yaml%2ev3.(*parser).parse(0xc0017f7400)
        /home/null/gowork/src/github.com/yaml/decode.go:163 +0x194
    gopkg.in/yaml%2ev3.unmarshal({0xc0017de7e8, 0x5, 0x8}, {0x620ce0?, 0xc001470330}, 0x0?)
        /home/null/gowork/src/github.com/yaml/yaml.go:161 +0x306
    gopkg.in/yaml%2ev3.Unmarshal(...)
        /home/null/gowork/src/github.com/yaml/yaml.go:89
    gopkg.in/yaml%2ev3_test.FuzzUnmarshal.func1(0x0?, {0xc0017de7e8, 0x5, 0x8})
        /home/null/gowork/src/github.com/yaml/fuzz_test.go:11 +0x55
    reflect.Value.call({0x62c4a0?, 0x683e48?, 0x13?}, {0x66f1e6, 0x4}, {0xc0017fc570, 0x2, 0x2?})
        /usr/local/go/src/reflect/value.go:556 +0x845
    reflect.Value.Call({0x62c4a0?, 0x683e48?, 0x514?}, {0xc0017fc570, 0x2, 0x2})
        /usr/local/go/src/reflect/value.go:339 +0xbf
    testing.(*F).Fuzz.func1.1(0xc00003d760?)
        /usr/local/go/src/testing/fuzz.go:337 +0x231
    testing.tRunner(0xc000084ea0, 0xc0017e8510)
        /usr/local/go/src/testing/testing.go:1439 +0x102
    created by testing.(*F).Fuzz.func1
        /usr/local/go/src/testing/fuzz.go:324 +0x5b8
    exit status 2
    FAIL    gopkg.in/yaml.v3    3.033s
使用`": \xf0"`验证该输入是否能正常触发panic。
    package main
    import(
        "fmt"
        "gopkg.in/yaml.v3"
    )
    func main(){
        in := ":   \xf0"
        var n yaml.Node
        if err := yaml.Unmarshal([]byte(in),&n);err != nil {
            fmt.Println(err)
        }
    }
运行，成功触发，证明确实存在问题。
    null@ubuntu:~/gowork/src/github.com/yaml/fuzztest$ go run fuzz_check.go 
    panic: internal error: attempted to parse unknown event (please report): none [recovered]
        panic: internal error: attempted to parse unknown event (please report): none
    goroutine 1 [running]:
    gopkg.in/yaml%2ev3.handleErr(0xc000047ed8)
        /home/null/gowork/src/github.com/yaml/yaml.go:294 +0x6d
    panic({0x4e60e0, 0xc000010380})
        /usr/local/go/src/runtime/panic.go:838 +0x207
    gopkg.in/yaml%2ev3.(*parser).parse(0xc00003ac00)
        /home/null/gowork/src/github.com/yaml/decode.go:163 +0x194
    gopkg.in/yaml%2ev3.unmarshal({0xc00001a648, 0x5, 0x8}, {0x4f21e0?, 0xc000104320}, 0x0?)
        /home/null/gowork/src/github.com/yaml/yaml.go:161 +0x306
    gopkg.in/yaml%2ev3.Unmarshal(...)
        /home/null/gowork/src/github.com/yaml/yaml.go:89
    main.main()
        /home/null/gowork/src/github.com/yaml/fuzztest/fuzz_check.go:11 +0x51
    exit status 2
查看原因，根据堆栈跟踪，在源码`github.com/yaml/yaml.go:161`和`github.com/yaml/decode.go:163`在加上两句print语句，查看导致panic的值。
运行结果如下，程序已经无法正常解析该输入，具体原因还未搞清，该[问题](https://github.com/go-yaml/yaml/issues/666)在github上已经有人提出，不过目前仍然未被解决。
    null@ubuntu:~/gowork/src/github.com/yaml/fuzztest$ go run fuzz_check.go 
    p: &{{0  0 0 {0 0 0}  {0 0 0} 0x4b8a00  [58 32 32 32 240] 0 false [] 0 0 0 [] 0 0 0 {0 0 0} [] [] [] [] [] [] 0 false false 0 [] 0 0 false 0 [] false [] map[] 0 [] [] [] [] } {0 {0 0 0} {0 0 0} 0  [] [] [] [] [] [] [] [] false false 0}  map[] false false}
    p.peek: none
    panic: internal error: attempted to parse unknown event (please report): none [recovered]
        panic: internal error: attempted to parse unknown event (please report): none
    goroutine 1 [running]:
    gopkg.in/yaml%2ev3.handleErr(0xc000047ec8)
        /home/null/gowork/src/github.com/yaml/yaml.go:295 +0x6d
    panic({0x4e70e0, 0xc000010380})
        /usr/local/go/src/runtime/panic.go:838 +0x207
    gopkg.in/yaml%2ev3.(*parser).parse(0xc00003ac00)
        /home/null/gowork/src/github.com/yaml/decode.go:164 +0x1f4
    gopkg.in/yaml%2ev3.unmarshal({0xc00001a648, 0x5, 0x8}, {0x4f31e0?, 0xc00007e320}, 0x0?)
        /home/null/gowork/src/github.com/yaml/yaml.go:162 +0x358
    gopkg.in/yaml%2ev3.Unmarshal(...)
        /home/null/gowork/src/github.com/yaml/yaml.go:89
    main.main()
        /home/null/gowork/src/github.com/yaml/fuzztest/fuzz_check.go:11 +0x51
    exit status 2
# Limitations
  1. 仅仅支持[]byte 和原始类型，不支持struct、slice和array
  2. 在同一个pkg里不同运行多个fuzzer
  3. 遇到crash会立即停止fuzz
  4. 不能直接将现存的文件转换到语料库的格式
在 github上也可以在带有标签的issue上找到一些未解决和待改进的地方
# 参考链接