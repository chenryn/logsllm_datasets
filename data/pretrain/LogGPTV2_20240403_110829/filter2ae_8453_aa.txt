### 0x01 介绍
#### Introduction
Unlike perimeter control solutions like WAF, OpenRASP directly integrates its
protection engine into the application server by instrumentation. It can
monitor various events including database queries, file operations and network
requests etc.
When an attack happens, WAF matches the malicious request with its signatures
and blocks it. OpenRASP takes a different approach by hooking sensitive
functions and examines/blocks the inputs fed into them. As a result, this
examination is context-aware and in-place. It brings in the following
benefits:
  1. Only successful attacks can trigger alarms, resulting in lower false positive and higher detection rate;
  2. Detailed stack trace is logged, which makes the forensic analysis easier;
  3. Insusceptible to malformed protocol.
#### 我的理解
在我阅读了OpenRASP的源码后，再次解读官方对其的介绍，我认为OpenRASP就是一个不同于WAF，它是通过JavaAgent，然后利用Instrumentation在class加载时，通过javassist的方式hook目标class的method，在其method插桩，以进行一系列的安全基准测试或运行时的安全检查，它相对于WAF来说，具有非常大的优势，但这是相对的，它的优点的存在恰恰也造成了一定的缺点。
优点：
  1. WAF依靠特征检测攻击，但会造成一定的误报率，而OpenRASP不一样，必须是成功的攻击才会触发报警
  2. OpenRASP插桩到代码层面，可以记录详细的栈堆跟踪信息
缺点：
  1. 因为侵入到代码层面，导致必然会造成一定的性能损耗，并且一个不合格的rasp更容易影响到业务代码
#### 重点阅读部分
从github clone下来项目之后，我们可以看到具体的目录大致构成是这样的：
    LICENSE           build-cloud.sh    build-php7.sh     docker            plugins           rasp-vue          travis
    README.md         build-java.sh     cloud             openrasp-v8       rasp-2019-12-12   readme-zh_CN.md
    agent             build-php5.sh     contributors.md   package-lock.json rasp-install      siem
而我主要关心的是：
  1. agent/java/boot（OpenRASP JavaAgent源码）
  2. agent/java/engine（OpenRASP主要唯一的module）
  3. rasp-install/java（OpenRASP安装源码）
  4. plugins（js插件，OpenRASP检查攻击的主要源码，因为js的热部署性而采用）
* * *
### 0x02 OpenRASP的安装原理
java源码实现，位置rasp-install/java
#### 宏观上的审视
查看源码工程，其具有两个package
    -install
    ++linux
    ++windows
    -uninstall
    ++linux
    ++windows
其实就是对OpenRASP的安装和卸载做的封装，interfece Installer和interface Uninstaller分别是它们的抽象定义
    public interface Installer {
        void install() throws RaspError, IOException;
    }
    public interface Uninstaller {
        void uninstall() throws RaspError, IOException;
    }
包中都是对Installer、Uninstaller基于不同操作系统、web服务器的实现，并通过了工厂模式，根据参数、环境变量、目录信息特征等，选择对应的实现
    public abstract class InstallerFactory
    public abstract class UninstallerFactory
OpenRASP的安装程序主要入口位于：
    package com.baidu.rasp
    com.baidu.rasp.App#main
#### 微观细节的跟踪
应用入口：
    public static void main(String[] args) {
        try {
            operateServer(args);
        } catch (Exception e) {
            if (e instanceof RaspError || e instanceof UnrecognizedOptionException) {
                System.out.println(e.getMessage());
            } else {
                e.printStackTrace();
            }
            showNotice();
            System.exit(1);
        }
    }
主要代码：
    public static void operateServer(String[] args) throws RaspError, ParseException, IOException {
        showBanner();
        argsParser(args);
        checkArgs();
        if ("install".equals(install)) {
            File serverRoot = new File(baseDir);
            InstallerFactory factory = newInstallerFactory();
            Installer installer = factory.getInstaller(serverRoot, noDetect);
            if (installer != null) {
                installer.install();
            } else {
                throw new RaspError(E10007);
            }
        } else if ("uninstall".equals(install)) {
            File serverRoot = new File(baseDir);
            UninstallerFactory factory = newUninstallerFactory();
            Uninstaller uninstaller = factory.getUninstaller(serverRoot);
            if (uninstaller != null) {
                uninstaller.uninstall();
            } else {
                throw new RaspError(E10007);
            }
        }
    }
代码跟进：
  1. showBanner()：通过该方法输出了OpenRASP安装程序的一些banner信息
  2. argsParser(args)：该方法主要是对程序启动参数的解析和校验，它通过commons-cli的功能，对启动参数进行一系列的解析和校验
    install：指定该操作为安装
    uninstall：指定该操作为卸载
    appid：OpenRASP连接到RASP Cloud的认证appid
    appsecret：OpenRASP连接到RASP Cloud的认证appsecret
    heartbeat：OpenRASP连接到RASP Cloud的心跳检测时间间隔
    raspid：OpenRASP的id
    backendurl：RASP Cloud地址
    keepconf：
    h：帮助指令
    pid：若使用OpenRASP的web程序非容器化，而是类似SpringBoot独立jar运行的时候，需要通过pid指定其Java server通过attach模式去使用
    nodetect：指定为类似SpringBoot独立jar运行的安装
    prepend：是否使用JavaAgent的模式比web容器更早启动
  1. checkArgs()：对程序启动参数格式、范围等校验
    appId、appSecret、raspId、url、heartbeatInterval
  1. 根据参数判断是安装还是卸载，若是安装，则通过安装工厂newInstallerFactory获取安装实例进行执行安装，若是卸载，则通过卸载工厂newUninstallerFactory获取卸载实例进行执行卸载，安装、卸载工厂的不同操作系统实现，是根据系统变量os.name进行判断
    private static InstallerFactory newInstallerFactory() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            return new WindowsInstallerFactory();
        } else {
            return new LinuxInstallerFactory();
        }
    }
    private static UninstallerFactory newUninstallerFactory() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            return new WindowsUninstallerFactory();
        } else {
            return new LinuxUninstallerFactory();
        }
    }
获取安装实例：
    public Installer getInstaller(File serverRoot, boolean noDetect) throws RaspError {
        if (!serverRoot.exists()) {
            throw new RaspError(E10002 + serverRoot.getPath());
        }
        if (noDetect) {
            return new GenericInstaller(GENERIC, serverRoot.getAbsolutePath());
        }
        String serverName = detectServerName(serverRoot.getAbsolutePath());
        if (serverName == null) {
            App.listServerSupport(serverRoot.getPath());
        }
        System.out.println("Detected JDK version: " + System.getProperty("java.version"));
        System.out.println("Detected application server type: " + serverName);
        return getInstaller(serverName, serverRoot.getAbsolutePath());
    }
可以看到，对于使用了启动参数nodetect的安装，选择的是GenericInstaller通用安装实例，否则会通过detectServerName(String
serverRoot)方法进行web服务器的特征检测
    public static String detectServerName(String serverRoot) throws RaspError {
        if (new File(serverRoot, "bin/catalina.sh").exists()
                || new File(serverRoot, "bin/catalina.bat").exists()
                || new File(serverRoot, "conf/catalina.properties").exists()
                || new File(serverRoot, "conf/catalina.policy").exists()) {
            return TOMCAT;
        }
        if (new File(serverRoot, "bin/probe.sh").exists()
                || new File(serverRoot, "bin/probe.bat").exists()
                || new File(serverRoot, "bin/twiddle.sh").exists()
                || new File(serverRoot, "bin/twiddle.bat").exists()) {
            return JBOSS;
        }
        if (new File(serverRoot, "bin/httpd.sh").exists()
                || new File(serverRoot, "bin/resin.sh").exists()) {
            return RESIN;
        }
        if (new File(serverRoot, "bin/startWebLogic.sh").exists()
                || new File(serverRoot, "bin/startWebLogic.bat").exists()) {
            return WEBLOGIC;
        }
        if (new File(serverRoot, "bin/standalone.sh").exists()
                || new File(serverRoot, "bin/standalone.bat").exists()) {
            try {
                return isWildfly(serverRoot) ? WILDFLY : JBOSSEAP;
            } catch (Exception e) {
                return null;
            }
        }
        return null;
    }
特征检测的方式，无一不是通过检测特定目录是否存在shell脚本实现
执行安装：
安装核心方法：install()
  1. GenericInstaller通用安装：
先是根据当前jar的目录获取到其子目录rasp，若不存在则新建
    String jarPath = getLocalJarPath();
    File srcDir = new File(new File(jarPath).getParent() + File.separator + "rasp");
    if (!(srcDir.exists() && srcDir.isDirectory())) {
        srcDir.mkdirs();
    }
接着通过设定的安装目录，检测openrasp.yml是否存在，用以判断是否第一次安装，然后拷贝rasp文件夹至目标安装目录
    File installDir = new File(getInstallPath(serverRoot));
    File configFile = new File(installDir.getCanonicalPath() + File.separator + "conf" + File.separator + "openrasp.yml");
    if (!configFile.exists()) {
        firstInstall = true;
    }
    if (!srcDir.getCanonicalPath().equals(installDir.getCanonicalPath())) {
        // 拷贝rasp文件夹
        System.out.println("Duplicating \"rasp\" directory\n- " + installDir.getCanonicalPath());
        FileUtils.copyDirectory(srcDir, installDir);
    }
删除官方js插件
    //安装rasp开启云控，删除官方插件
    if (App.url != null && App.appId != null && App.appSecret != null) {
        File plugin = new File(installDir.getCanonicalPath() + File.separator + "plugins" + File.separator + "official.js");
        if (plugin.exists()) {
            plugin.delete();
        }
    }
若不是第一次安装，则会把目标安装目录下原有配置文件修改名称为openrasp.yml.bak，然后拷贝当前jar目录下的openrasp.yml到目标安装目录的conf子目录
    // 生成配置文件
    if (!generateConfig(installDir.getPath(), firstInstall)) {
        System.exit(1);
    }
    private boolean generateConfig(String dir, boolean firstInstall) {
        try {
            String sep = File.separator;
            File target = new File(dir + sep + "conf" + sep + "openrasp.yml");
            System.out.println("Generating \"openrasp.yml\"\n- " + target.getAbsolutePath());
            if (target.exists() && App.keepConfig) {
                System.out.println("- Already exists and reserved openrasp.yml, continuing ..");
                return true;
            }
            if (target.exists() && !firstInstall) {
                File reserve = new File(dir + sep + "conf" + sep + "openrasp.yml.bak");
                if (!reserve.exists()) {
                    reserve.createNewFile();
                }
                FileOutputStream outputStream = new FileOutputStream(reserve);
                FileInputStream inputStream = new FileInputStream(target);
                IOUtils.copy(inputStream, outputStream);
                outputStream.close();
                inputStream.close();
                System.out.println("- Backed up openrasp.yml to openrasp.yml.bak");
            } else {
                System.out.println("- Create " + target.getAbsolutePath());
                target.getParentFile().mkdir();
                target.createNewFile();
            }
            FileOutputStream outputStream = new FileOutputStream(target);
            InputStream is = this.getClass().getResourceAsStream("/openrasp.yml");
            IOUtils.copy(is, outputStream);
            is.close();