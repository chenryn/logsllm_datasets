Consider the following equivalent definitions of a function and the
benchmarking
    mutable struct Agent
    	R::Float64
    	V::Float64
    end
    initi(n) = Agent.(1., zeros(n))
    f1(arr) = mean((a->cis(getproperty(a, :R))).(arr))
    f2(arr) = mean(cis.(getproperty.(arr,:R)))
    agents = initi(10000)
    fcompose = @benchmark f1($agents)
    fchain = @benchmark f2($agents)
    judge(median(fcompose), median(fchain))
The output of the judge is this-
    BenchmarkTools.TrialJudgement: 
      time:   -71.13% => improvement (5.00% tolerance)
      memory: -49.99% => improvement (1.00% tolerance)
Shouldn't both have equivalent performance? From what I understand, the
chained version iterates through the array multiple times, whereas the
composed version doesn't. Is this an expected thing? If so, then won't
everyone just use for loops or maps instead?
## Version Info
    Julia Version 1.5.3
    Commit 788b2c77c1 (2020-11-09 13:37 UTC)
    Platform Info:
      OS: Windows (x86_64-w64-mingw32)
      CPU: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz
      WORD_SIZE: 64
      LIBM: libopenlibm
      LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
    Environment:
      JULIA_REVISE_WORKER_ONLY = 1