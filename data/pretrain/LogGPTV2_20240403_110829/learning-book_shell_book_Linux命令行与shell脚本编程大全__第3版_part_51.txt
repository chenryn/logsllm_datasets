$=uexed (q-
shift 11
echo *Found the -b option, with parameter value $param
-c)
echo *Found the -c option* J
)
shift
*)echo *$1 is not an option*1J
break 1J
esac
---
## Page 317
302
第14章处理用户输入
done
shlft
count=1
#
for param in *$s*
dlo
echo *Parameter #$count: Sparam
Gone
[ T + qumos 1s=quno2
#
你会注意到它跟脚本test17.sh一样，唯一不同的是加人了getopt命令来帮助格式化命令行
参数。
现在如果运行带有复杂选项的脚本，就可以看出效果更好了。
./test18.sh -ac
Found the -a optLon
Found che -c optlon
当然，之前的功能照样没有问题。
 ./test18.sh -a -b test1 -cd test2 test3 test4
Found the -a opt.1on
Fosnd the -b optlon,
,vith paraneter value test1'
Found the -c opt.lon
Paraneter tl: *test2*
Paraneter #2: 'test3*
Paraneter #3: 'test4'
现在看起来相当不错了。但是，在getopt命令中仍然隐藏着一个小问题。看看这个例子。
./test18.sh -a -b test1 -cd *test2 test3" test4
Fosnd the -a optlon
Found the -c optlon
Found the -b opt.Lon,
vith paraneter value 'test1'
Paraneter #2: test3
Paraneter
#1: 'test2
Paraneter 3: 'test4'
getopt命令并不擅长处理带空格和引号的参数值。它会将空格当作参数分隔符，而不是根
据双引号将二者当作一个参数。幸而还有另外一个办法能解决这个问题。
14.4.3使用更高级的getopts
getopts命令（注意是复数）内建于bash shell。它跟近亲getopt看起来很像，但多了一些
扩展功能。
---
## Page 318
14.4处理选项
303
与getopt不同，前者将命令行上选项和参数处理后只生成一个输出，面getopts命令能够
和已有的shell参数变量配合默契。
每次调用它时，它一次只处理命令行上检测到的一个参数。处理完所有的参数后，它会退出
并返回一个大于0的退出状态码。这让它非常适合用解析命令行所有参数的循环中。
getopts命令的格式如下：
getopta optatying vaziable
optstring值类似于getopt命令中的那个。有效的选项字母都会列在optstring中，如果
选项字母要求有个参数值，就加一个冒号。要去掉错误消息的话，可以在optstring之前加一个
冒号。getopts命令将当前参数保存在命令行中定义的variable中。
getopts命令会用到两个环境变量。如果选项需要跟一个参数值，OPTARG环境变量就会保
存这个值。OPTIND环境变量保存了参数列表中getopts正在处理的参数位置。这样你就能在处
理完选项之后继续处理其他命令行参数了。
让我们看个使用getopts命令的简单例子。
1/bin/ba.sh
S cat te8t19.sh
 simple demonstration of the getopts command
echo
while getopts 1ab:c opt
do
uT .qdo. se
al echo *Found the -a option* 11
b] eeho *Found the -b option,
with value $OPTARG"J1
1r,ados 1uotado usouyun。 oqpa 1
cl echo *Found the -c option*
7T
esac
done
S./test19.sh -ab test1 -c
Found the -a option
Found the -b option,
, with value test1
Found the -c option
while语句定义了getopts命令，指明了要查找哪些命令行选项，以及每次送代中存储它们
的变量名（opt）。
你会注意到在本例中case语句的用法有些不同。getopts命令解析命令行选项时会移除开
头的单破折线，所以在case定义中不用单破折线。
getopts命令有几个好用的功能。对新手来说，可以在参数值中包含空格。
Found the b option, wlth value teatl teat2
Found the -a option
---
## Page 319
304
第14章处理用户输入
另一个好用的功能是将选项字母和参数值放在一起使用，而不用加空格。
./test19.sh -abtest1
Found the -a option
Found the -b option, vith value test1
getopts命令能够从-b选项中正确解析出test1值。除此之外，getopts还能够将命令行上
找到的所有未定义的选项统一输出成问号。
./test19.sh -d
Unknovn option1 ?
./test19.sh -acde
Found the -a option
Unknovn option1 ?
Found the -c option
Unknovn option1 ?
optstring中未定义的选项字母会以问号形式发送给代码。
getopts命令知道何时停止处理选项，并将参数留给你处理。在getopts处理每个选项时，
它会将OPTIND环境变量值增一。在getopts完成处理时，你可以使用shift命令和oPTIND值来
移动参数。
S cat test20.sh
1/bin/bash
 Processing options & parameters vith getopts
echo
vhile getopts 1abicd opt
do
a) echo *Found the -a option*1
case *Sopt* in
b) echo *Found the -b option, with value $OPTARG* 17
c)
echo *Found the -c option*
d) echo *Found the -d option*
7 1
*} echo *Unknowm option: $opt* 11
done
esac
shift $[ $OPTIND - 1 1
echo
for param in *$e*
count=1
do
echo *Farameter Scount: $param*
[T + qunoos s=quno
done
---
## Page 320
14.5将选项标准化
305
Found the -a option
Found the -d option
Found the
b option, wlth value Cest1
Parameter l: teat2
1883 =g xaseuexed
Parameter
3: test4
现在你就拥有了一个能在所有shell脚本中使用的全功能命令行选项和参数处理工具。
14.5
将选项标准化
在创建shell脚本时，显然可以控制具体怎么做。你完全可以决定用哪些字母选项以及它们的
用法。
但有些字母选项在Linux世界里已经拥有了某种程度的标准含义。如果你能在shel脚本中支
持这些选项，脚本看起来能更友好一些。
表14-1显示了Linux中用到的一些命令行选项的常用含义。
麦14-1常用的Linux命令选项
选
项
描
述
-a
显示所有对象
C
生成一个计数
-d
指定一个日录
扩展一个对象
-f
指定读入数据的文件
-h
显示命令的都助信息
-1
忽略文本大小写
-1
产生输出的长格式版本
n
使用非交互模式（批处理）
0
将所有输出重定向到的指定的输出文件
以安静模式运行
递归地处理目录和文件
-8
以安静模式运行
-V
生成详细输出
排除某个对象
-y
对所有问题回答yes
通过学习本书时遇到的各种bash命令，你大概已经知道这些选项中大部分的含义了。如果你
的选项也采用同样的含义，这样用户在使用你的脚本时就不用去查手册了。
14
---
## Page 321
306
第14章处理用户输入
14.6获得用户输入
尽管命令行选项和参数是从脚本用户处获得输人的一种重要方式，但有时脚本的交互性还需
要更强一些。比如你想要在脚本运行时间个问题，并等待运行脚本的人来回答。bash shell为此提
供了read命令。
14.6.1基本的读取
read命令从标准输人（键盘）或另一个文件描述符中接受输人。在收到输入后，reac命令
会将数据放进一个变量。下面是read命令的最简单用法。
$ cat test21.sh
 teating the read cormand
#1 /bin/bash
echo -n *Enter your nane: *
echo *He1lo Snane, welcone to my progran.
read name
#
S./test21.sh
He1lo Rich Blun,welcome to my program,
Enter your name: Rieh Blun
$
相当简单。注意，生成提示的echo命令使用了-n选项。该选项不会在字符串末尾输出换行
符，允许脚本用户紧跟其后输人数据，而不是下一行。这让脚本看起来更像表单。
实际上，read命令包含了-p选项，允许你直接在read命令行指定提示符。
S cat test22.sh
testing the read -p optlon
1/bin/bash
sfe , :ebe xno. xesus oteoid. d pesx
Gays=$[Sage *365 ]
-ipto s∧ep s∧ep$ xeno no. sexeu 2tu。 owqoo
$
#
S./test22.sh
Please enter your age: 10
That makes you over 3650 days old!
你会注意到，在第一个例子中当有名字输人时，read命令会将姓和名保存在同一个变量中。
read命令会将提示符后输人的所有数据分配给单个变量，要么你就指定多个变量。输人的每个
数据值都会分配给变量列表中的下一个变量。如果变量数量不够，剩下的数据就全部分配给最后
一个变量。
#1 /bin/bash
---
## Page 322
14.6获得用户输入
307
enterlng mult iple vaxlablea
18e[ 18x]1 , 1outu xno< xoitg. d- peo1
echo *Checking data for Slast, $firat*
S./test23.sb
Enter your nane: Rieh Blum
Checking data for Blun, Rich...
也可以在read命令行中不指定变量。如果是这样，reac命令会将它收到的任何数据都放进
特殊环境变量REPLY中。
S cat test24.sh
 Testing the REPLY Environnent variable
#1/bin/ba.sh
.:aueu xmo. xoqug。 d- pesx
echo He1lo $REPLY, welcome to my program,
echo
Enter your nane: Chriatine
S./test24.sb
Hello Chriatine, velcone to my progran.
REPLY环境变量会保存输人的所有数据，可以在shell脚本中像其他变量一样使用。
14.6.2超时
使用read命令时要当心。脚本很可能会一直苦等着脚本用户的输人。如果不管是否有数据
输人，脚本都必须继续执行，你可以用-t选项来指定一个计时器。-t选项指定了read命令等待
输人的秒数。当计时器过期后，read命令会返回一个非零退出状态码。
S cat test25.sh
 timing the data entry
 1/bin/bash
eutu , :oueu xmo人 xoaue oseetd, d- s 1- peex JT
then
echo *Hello Snane, velcone to my scxipt*
else
echo
echo *Sorry, too slow! *
fL
S ./test25.ab
Please enter your name: Rieb
Hello Rich, velcone to my scxipt
a
---
## Page 323