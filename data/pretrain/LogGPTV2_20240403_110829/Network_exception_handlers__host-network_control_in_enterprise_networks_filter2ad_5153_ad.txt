### Event Tracing for Windows and Monitoring APIs

Event Tracing for Windows (ETW) and other monitoring APIs provide easy access to the host state, including application IDs, user IDs, and TCP/UDP flows per process, without requiring modifications to existing applications. This makes it straightforward to translate access to the host state by network exception handlers into queries using these APIs.

### Packet Shaping Functionality in Modern Operating Systems

Modern operating systems, such as Windows, offer robust packet shaping capabilities. For example, Windows XP includes the TC/GQOS API, while Windows Vista provides the QoS2 API. Both support traffic shaping at a per-process or application granularity. Blocking all traffic from a specific process is also possible by configuring the host firewall, again with process or application-level precision.

### 7. Feasibility

In this section, we evaluate the feasibility of network exception handlers across two dimensions: the overhead of distributing annotated topology information and a concrete example of how they can be used for traffic engineering to reduce bandwidth costs.

#### 7.1 Datasets

The results presented in this paper are based on two datasets collected from the global enterprise network of a large multinational corporation. The first dataset is a corpus of packet data from a single building connected to the enterprise network. The second dataset is a corpus of routing data from two different areas of the enterprise network.

- **Local Network**: The monitored building contains approximately 400 hosts used by researchers, administrative staff, and developers. The local network comprises several subnets and a small datacenter.
- **Global Enterprise Network (CORPNET)**: CORPNET consists of about 400,000 hosts connected by approximately 1,300 routers spread across 100 countries and 6 continents. It is divided into four domains interconnected by BGP, each running OSPF internally. Internet connectivity is provided through proxies in large datacenters, which also host company-wide services like email.

CORPNET represents an upper bound on the complexity and scalability of network exception handlers due to its size and the extensive use of networked applications. Smaller networks, such as small office/home networks, may not benefit significantly from network exception handlers.

##### Data Traffic Dataset

The data traffic corpus was collected over 7.7 weeks starting on February 13, 2007, using custom tools with the WinPCap library. Over this period, 32.3 billion packets containing 32.8 TB of data were captured. We constructed flow tables for 5-minute intervals, with one record per unidirectional 5-tuple (source IP, destination IP, protocol, source port, destination port). Each record includes the 5-tuple, the time of the first and last packets, the number of bytes and packets, and the inferred application. Less than 3.5% of packets were not assigned to an application.

Figure 7 shows the aggregate observed traffic bandwidth, which follows diurnal patterns with spikes during early morning backups. We observed 66,697 unique IP addresses, with 679 being local to the capture site. Of these, 65,086 were sources (663 local) and 49,031 were destinations (669 local).

##### Topology Datasets

The network topology traces were extracted from OSPF data collected from two areas within CORPNET: a backbone area and a stub area. Data collection began in November 2004 for the backbone area and June 2004 for the stub area, with some gaps. Table 1 summarizes the characteristics of the topologies extracted from the OSPF data.

#### 7.2 Overhead

We examine two types of overhead incurred by network exception handlers: the total traffic required to distribute the topology and the traffic required to distribute metrics like link load or cost.

##### Live Topology Distribution

There are three components to the overhead of distributing the live network topology:

1. **Receive Bandwidth**: The median values are 71 Bps and 70 Bps for core and stub areas, respectively. Even the 99th percentiles are only 1.5 kBps (backbone) and 1.6 kBps (stub), which is negligible for server-class machines.
2. **Transmit Bandwidth**: Most OSPF traffic does not report changes, consisting mainly of HELLO packets and refreshes. Only topology-changing events need redistribution. These events are rare, with only 0.002% of second-intervals for the stub area and 0.000007% for the core area containing any events.
3. **Receive Bandwidth for All Areas**: In a large enterprise network with 62 distinct OSPF areas and 92 Active Directory domain controllers, the worst-case overhead is 155 kBps, with a 99.9th percentile of 4 kBps.

##### Per-Link Annotations

Distributing link-related information like cost and load requires more overhead but is still manageable. Assuming up to fifteen 4-byte counters per link distributed every 5 minutes, the total overhead in a large network with 10,000 links is just 3 kBps.

Thus, the total overhead of distributing control information for network exception handlers is negligible even in a large enterprise network.

#### 7.3 Managing Bandwidth with Exception Handlers

We evaluate a concrete example of network exception handlers using our enterprise network traffic dataset. Specifically, we describe a scenario where an exception handler is employed to save bandwidth by shaping traffic from "low priority" user applications. Bandwidth requirements are a major cost factor for enterprise networks, and network exception handlers can help mitigate this cost by allowing hosts to decide how to best utilize network resources.

Figure 9 shows the bandwidth savings achieved by applying the network exception handler. The upstream non-local traffic time-series before and after applying the exception handler demonstrates that most spikes are smoothed out. The traffic CDF over 5-minute intervals shows a 10% reduction in the 95th percentile.

This example highlights the flexibility of traffic shaping at the source through network exception handlers. Hosts can prioritize applications and rate-limit their own traffic, reducing WAN demands more effectively than compressing traffic in the network.

### 8. Network Exception Handlersâ€”A Utopia?

Network exception handlers demonstrate the potential of pushing part of the network decision-making process to hosts. While they offer significant benefits and flexibility, they are not a panacea for all enterprise management problems. They have limitations, such as the inability to implement certain policies that require explicit cooperation between hosts. Future research will address these issues and further refine the architecture.

For example, implementing a policy that limits application X's consumption to no more than 50% of a specific link for users in Europe would be challenging without explicit cooperation between hosts. 

One possible charging scheme for bandwidth usage in enterprise networks is the 95th percentile of upstream traffic, calculated in 5-minute intervals.