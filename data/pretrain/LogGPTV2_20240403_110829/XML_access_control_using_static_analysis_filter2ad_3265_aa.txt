title:XML access control using static analysis
author:Makoto Murata and
Akihiko Tozawa and
Michiharu Kudo and
Satoshi Hada
XML Access Control Using Static Analysis
Makoto Murata
IBM Tokyo Research Lab/IUJ
Research Institute
1623-14, Shimotsuruma,
Akihiko Tozawa
IBM Tokyo Research Lab
1623-14, Shimotsuruma,
Yamato-shi,
Michiharu Kudo
IBM Tokyo Research Lab
1623-14, Shimotsuruma,
Yamato-shi,
Yamato-shi,
Kanagawa-ken 242-8502,
Japan
PI:EMAIL
Kanagawa-ken 242-8502,
Kanagawa-ken 242-8502,
Japan
Japan
PI:EMAIL
PI:EMAIL
ABSTRACT
Access control policies for XML typically use regular path
expressions such as XPath for specifying the objects for ac-
cess control policies. However such access control policies
are burdens to the engines for XML query languages. To
relieve this burden, we introduce static analysis for XML
access control. Given an access control policy, query expres-
sion, and an optional schema, static analysis determines if
this query expression is guaranteed not to access elements
or attributes that are permitted by the schema but hidden
by the access control policy. Static analysis can be per-
formed without evaluating any query expression against an
actual database. Run-time checking is required only when
static analysis is unable to determine whether to grant or
deny access requests. A nice side-eﬀect of static analysis
is query optimization: access-denied expressions in queries
can be evaluated to empty lists at compile time. We have
built a prototype of static analysis for XQuery, and shown
the eﬀectiveness and scalability through experiments.
Categories and Subject Descriptors
H.2.7 [Database Management]: Database Administra-
tion—Security, integrity, and protection; D.4.6 [Operating
Systems]: Security and Protection—Access controls
General Terms
Algorithms,Performance,Experimentation,Security,Theory
Keywords
XML, XQuery, XPath, schema, automaton, access control,
query optimization, static analysis
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
1.
INTRODUCTION
XML [5] has become an active area in database research.
XPath [6] and XQuery [4] from the W3C have come to be
widely recognized as query languages for XML, and their
implementations are actively in progress.
In this paper,
we are concerned with ﬁne-grained (element- and attribute-
level) access control for XML database systems rather than
document-level or collection-level access control. We be-
lieve that access control plays an important role in XML
database systems, as it does in relational database systems.
Some early experiences [21, 10, 3] with access control for
XML documents have been reported already.
Access control for XML documents should ideally provide
expressiveness as well as eﬃciency. That is, (1) it should be
easy to write ﬁne-grained access control policies, and (2) it
should be possible to eﬃciently determine whether an ac-
cess to an element or an attribute is granted or denied by
such ﬁne-grained access control policies. It is diﬃcult to ful-
ﬁll both of these requirements, since XML documents have
richer structures than relational databases.
In particular,
access control policies, query expressions, and schemas for
XML documents are required to handle an inﬁnite number
of paths, since there is no upper bound on the height of
XML document trees.
Existing languages (e.g.
[21, 10]) for XML access con-
trol achieve expressiveness by using XPath [6] as a simple
and powerful mechanism for handling an inﬁnite number of
paths. For example, to deny accesses to name elements that
are immediately or non-immediately subordinate to article
elements, it suﬃces to specify a simple XPath expression
//article//name as part of an access control policy.
However, XPath-based access control policies are addi-
tional burdens for XML query engines. Whenever an el-
ement or attribute in an XML database is accessed at run
time, a query engine is required to determine whether or not
this access is granted by the access control policies. Since
such accesses are frequently repeated during query evalua-
tion, naive implementations for checking access control poli-
cies can lead to unacceptable performance.
In this paper, we introduce static analysis as a new ap-
proach for XML access control. Static analysis examines ac-
cess control policies and query expressions as well as schemas,
if present. Unlike the run-time checking described above,
static analysis does not examine actual databases. Thus,
static analysis can be performed at compile time (when a
query expression is created rather than each time it is eval-
uated). Run-time checking is required only when static anal-
ysis is unable to grant or deny access requests without ex-
amining the actual databases.
In addition, static analysis
facilitates query optimization, since access-denied XPath ex-
pressions in queries can be rewritten as empty lists at com-
pile time. In Section 5, we will demonstrate eﬀectiveness of
static analysis using examples.
The key idea for our static analysis is to use automata for
representing and comparing queries, access control policies,
and schemas. Our static analysis has two phases.
In the
ﬁrst phase, we create automata from queries, access con-
trol policies, and (optionally) schemas: (1) automata cre-
ated from queries, called query automata, represent paths
to elements or attributes as accessed by these queries; (2)
those created from access control policies, called access con-
trol automata, represent paths to elements or attributes as
exposed by these access control policies; and (3) those cre-
ated from schemas, called schema automata, represent paths
to elements or attributes as permitted by these schemas. In
the second phase, we compare these automata while apply-
ing the following rules: (1) accesses by queries are always-
granted if the intersection of query automata and schema
automata is subsumed by the access control automata; (2)
they are always-denied if the intersection of query automata,
schema automata, and access control automata is empty;
and (3) they are statically indeterminate, otherwise.
1.1 Related Works
Fine-grained access control for XML documents has been
studied by many researchers [2, 21, 3, 10, 15]. Their access
control policies are similar to ours. They all provide run-
time checking of access control policies, but do not consider
static analysis. Their algorithms for run-time checking as-
sume that XML documents are in the main memory and can
be examined repeatedly.
Access control for an RDBMS is driven by views, which
hide some information (typically attributes in relations) in
the RDBMS. Queries written by users do not access actual
databases, but rather access these views. View-driven ac-
cess control is typically eﬃcient, since view queries and user
queries are optimized together and then executed. In other
words, access control is provided partly by optimization at
compile-time and partly by checking at run-time.
Object-oriented database systems (OODBMS) provide richer
structures than RDBMSs or XML. In fact, an OODBMS
provides network structures and class hierarchies. Access
control frameworks for the OODBMS have appeared in the
literature [1, 28]. Such frameworks typically rely on run-
time analysis and do not use static analysis.
Our static analysis for XML access control is made possi-
ble by the tree-structured nature of XML. First, the schemas
for XML are regular tree grammars, from which we can gen-
erate automata that represent the permissible paths. Sec-
ond, both access control policies and queries for XML use
regular path expressions (XPath) for locating elements or
attributes. We can thus use automata for uniformly han-
dling schemas, queries, and access control policies.
Implementation techniques for XQuery and XPath are be-
ing actively studied. However, when compared to SQL en-
gines, XQuery engines are far from mature. To the best of
the authors’ knowledge, none of the existing XQuery engines
provide competitive optimization as well as access control.
The use of automata for XML is not new. Many re-
searchers have used automata (string automata or tree au-
tomata) for handling queries, schemas, patterns, or integrity
constraints. Furthermore, recent works apply boolean op-
erations (typically the intersection operation) to such au-
tomata. These works include type checking (e.g., [20, 12]),
query optimization using schemas (e.g., [14]), query opti-
mization using views (e.g., [27, 11, 23, 25, 30]), consistency
between integrity constraints and schemas (e.g., [13]). Our
static analysis uses similar techniques. However, to the best
of our knowledge, our static analysis is the ﬁrst application
of automata for XML access control.
XPath containment [11, 23, 25, 30] is similar to our static
analysis, since we compare XPath expressions for queries
and those for access control policies. However, denial rules
(shown in Section 3) in access control policies require that
our static analysis apply the negation operation to automata
and use both over- and under-estimation of access control
automata.
1.2 Outline
The rest of this paper is organized as follows. After re-
viewing the fundamentals of XML, schemas, XPath, and
XQuery in Section 2, we introduce access control policies
for XML documents in Section 3. We introduce static anal-
ysis in Section 4 and further demonstrate the eﬀectiveness
and scalability of static analysis in Section 5. We discuss fu-
ture extensions for handling value-based access control and
the advanced features of XPath and XQuery, and conclude
in Section 6.
2. PRELIMINARIES
In this section, we introduce the basics of XML, schema
languages, XPath, and XQuery.
2.1 XML
An XML document consists of elements, attributes, and
text nodes. These elements collectively form a tree. The
content of each element is a sequence of elements or text
nodes. An element has a set of attributes, each of which has
a name and a value. We hereafter use ΣE and ΣA as a set
of tag names and that of attribute names, respectively. To
distinguish between the symbols in these sets, we prepend
’@’ to symbols in ΣA.
An XML document representing a medical record is shown
in Figure 1. This XML document describes diagnosis and
chemotherapy information for a certain patient. Several
comments are inserted in this document. For the rest of
this paper, we use this document as a motivating example.
2.2 Schema
A schema is a description of permissible XML documents.
A schema language is a computer language for writing schemas.
DTD, W3C XML Schema [29], and RELAX NG [7] from
OASIS (and now ISO/IEC) are notable examples of schema
languages.
We do not use particular schema languages in this paper,
but rather use tree regular grammars [9] as a formal model
of schemas. Murata et al.
[24] have shown that tree reg-
ular grammars can model DTD, W3C XML Schema, and
RELAX NG.
A schema is a 5-tuple G = (N, ΣE, ΣA, S, P ), where:
• N is a ﬁnite set of non-terminals,
Well differentiated adeno carcinoma
This seems correct
5-FU 500mg
Is this sufficient?
How was the operation?
Figure 1: An XML document example
• ΣE is a ﬁnite set of element names,
• ΣA is a ﬁnite set of attribute names,
• S is a subset of ΣE × N ,
• P is a set of production rules X → r A, where X ∈ N ,
r is a regular expression over ΣE×N , and A is a subset
of ΣA.
Production rules collectively specify permissible element
structures. We separate non-terminals and element names,
since we want to allow elements of the same name to have
diﬀerent subordinates depending on where these elements
occur. Although examples in this paper can be captured
without separating non-terminals and element names, W3C
XML Schema and RELAX NG require this separation. Un-
like the deﬁnition in [24], we allow production rules to have
a set of permissible attribute names1 .
For the sake of simplicity, we do not handle text as values
of elements or attributes in this paper. In the case of DTDs,
this restriction amounts to the confusion of #PCDATA and
EMPTY.
Example 1 A schema for our motivating example is G1 =
(N1, ΣE
1 , ΣA
1 , S1, P1), where
N1 = {Record, Diag, Chem, Com, Patho, Presc},
1 = {record, diagnosis, chemotherapy,
ΣE
1 = {@type},
ΣA
S1 = {record[Record]},
P1 = {Record → (diagnosis[Diag]
comment, pathology, prescription},
chemotherapy[Chem]
comment[Com]
∗ ,
∗, record[Record]
∗
Diag → (pathology[Patho], comment[Com]
Chem → (prescription[Presc]
∗ ,
) ∅,
Com →  ∅, Patho →  {@type}, Presc →  ∅}.
) ∅,
∗
) ∅,
comment[Com]
∗ ,
∗
An equivalent DTD is shown below.
(pathology,comment*)>
1RELAX NG provides a more sophisticated mechanism for
handling attributes [19].
(#PCDATA)>
(#PCDATA)>
type CDATA #REQUIRED>
A schema is said to be recursive if it does not impose any
upper bound on the height of XML documents. The above
schema is recursive, since record elements are allowed to
nest freely. Since most schemas (e.g., XHTML and Doc-
Book) for narrative documents are recursive, our static anal-
ysis must handle recursive schemas and an inﬁnite number
of permissible paths.
2.3 XPath
Given an XML document, we often want to locate some el-
ements by specifying conditions on elements as well as their
ancestor elements. For example, we may want to locate
all anchors (e.g.,  of XHTML) elements occurring
in paragraphs (e.g.,  of XHTML). In this example,
“anchor” is a condition on elements and “occurring in para-
graphs” is a condition on ancestor elements. Such condi-
tions can be easily captured by regular path expressions,
which are regular expressions describing permissible paths
from the root element to elements or attributes.
XPath provides a restricted variation of regular path ex-
pressions. XPath is widely recognized in the industry and
used by XSLT [8] and XQuery. We focus on XPath in this
paper, although our framework is applicable to any regular
path expression.
XPath uses axes for representing the structural relation-
ships between nodes. For example, the above example can
be captured by the XPath expression //p//a, where // is
an axis called “descendant-or-self”. Although XPath pro-
vides many axes, we consider only three of them, namely
“descendant-or-self” (//), “child” (/), and “attribute” (@)
in this paper. Extensions for handling other axes are dis-
cussed in Section 6. Namespaces and wild-cards are outside
the scope of this paper, although our framework can easily
handle them.
XPath allows conditions on elements to have additional
conditions. For example, we might want to locate foo el-
ements such that their @bar attributes have "abc" as the
values. Such additional conditions are called predicates.
This example can be captured by the XPath expression
//foo[@bar = "abc"], where [@bar = "abc"] is a predi-
cate.
2.4 XQuery
Several query languages for XML have emerged recently.
Although they have diﬀerent query algebras, most of them
use XPath for locating elements or attributes. Our frame-
work can be applied to any query language as long as it uses
regular path expressions for locating elements or attributes.
However, we focus on XQuery in the rest of this paper.
FLWR (FOR-LET-WHERE-RETURN) expressions are of
central importance to XQuery. A FLWR expression consists
of a FOR, LET, WHERE, and RETURN clause.
The FOR or LET clause associates one or more variables
with XPath expressions. By evaluating these XPath ex-
pressions, the FOR and LET clauses in a FLWR expression
create tuples. The WHERE clause imposes additional con-
ditions on tuples. Those tuples not satisfying the WHERE
clause are discarded. Then, for each of the remaining tuples,
the RETURN clause is evaluated and a value or sequence of
values is returned.
The following query lists the pathology-comment pairs for
the Gastric Cancer.
{
for $r in document("medical_record")/record
where $r/diagnosis/pathology/@type
= "Gastric Cancer"
return
$r/diagnosis/pathology, $r//comment
}
3. ACCESS CONTROL FOR XML DOCU-
MENTS
In this paper, access control for XML documents means
element- and attribute-level access control for a certain XML
instance. Each element and attribute is handled as a unit
resource to which access is controlled by the corresponding
access control policies.
In the following sections, we use
the term node-level access control when there is no need to
separate the element-level access control from the attribute-
level access control.
3.1 Syntax of Access Control Policy
In general, the access control policy consists of a set of
access control rules and each rule consists of an object (a
target node), a subject (a human user or a user process), an
action, and a permission (grant or denial) meaning that the
subject is (or is not) allowed to perform the action on the
object. The subject value is speciﬁed using a user ID, a role
or a group name but is not limited to these. For the object
value, we use an XPath expression. The action value can be
either read, update, create, or delete, but we deal only with
the read action in this paper because the current XQuery
does not support other actions. The following is the syntax
of our access control policy2:
(Subject, +/-Action, Object)
The subject has a preﬁx indicating the type of the sub-
ject such as role and group. “+” means grant access and “-”
means deny access. In this paper, we sometimes omit spec-
ifying the subject if the subject is identical with the other