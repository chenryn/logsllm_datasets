        Third = "Froilan Gonzalez"
        });
        //…
冠军列表应与每个冠军年份中获得前三名的赛车手构成的列表组合起来，然后显示每
一年的结果。
RacerInfo类定义了要显示的信息，如下所示（代码文件
EnumerableSample/RacerInfo.cs）：
    public class RacerInfo
    {
      public int Year { get; set; }
      public int Position { get; set; }
      public string FirstName { get; set; }
      public string LastName { get; set; }
    }
使用连接语句可以把两个列表中的赛车手组合起来。
因为冠军列表中的每一项都包含3个赛车手，所以首先需要把这个列表摊平。一种方
法是使用SelectMany方法。该方法使用的lambda表达式为冠军列表中的每一项返回包含3
项的一个列表。在这个lambda表达式的实现中，因为RacerInfo包含FirstName和LastName
属性，而收到的集合只包含带有First、Second和Third属性的一个名称，所以必须拆分字符
串。这可以通过扩展方法FirstName和LastName完成（代码文件
EnumerableSample/Program.cs）：
    var racers = Formula1.GetChampionships()
      .SelectMany
(cs => new List()
      {
        new RacerInfo {
          Year = cs.Year,
          Position = 1,
          FirstName = cs.First.FirstName(),
          LastName = cs.First.LastName()
        },
        new RacerInfo {
          Year = cs.Year,
          Position = 2,
          FirstName = cs.Second.FirstName(),
          LastName = cs.Second.LastName()
        },
        new RacerInfo {
          Year = cs.Year,
          Position = 3,
          FirstName = cs.Third.FirstName(),
          LastName = cs.Third.LastName()
        }
      });
扩展方法FirstName和LastName使用空格字符拆分字符串：
    public static class StringExtension
    {
      public static string FirstName(this string name)
      {
        int ix = name.LastIndexOf(' ');
        return name.Substring(0, ix);
      }
      public static string LastName(this string name)
      {
        int ix = name.LastIndexOf(' ');
        return name.Substring(ix + 1);
      }
    }
现在就可以连接两个序列。Formula1.GetChampions返回一个Racers列表，racers变量
返回包含年份、比赛结果和赛车手姓名的一个RacerInfo列表。仅使用姓氏比较两个集合中
的项是不够的。有时候列表中可能同时包含了一个赛车手和他的父亲（如Damon 
Hill和
Graham Hill），所以必须同时使用FirstName和LastName进行比较。这是通过为两个列表
创建一个新的匿名类型实现的。通过使用into子句，第二个集合中的结果被添加到了变量
yearResults中。对于第一个集合中的每一个赛车手，都创建了一个yearResults，它包含了
在第二个集合中匹配名和姓的结果。最后，用LINQ查询创建了一个包含所需信息的新匿
名类型：
    var q = (from r in Formula1.GetChampions()
              join
 r2 in
 racers on
              new
              {
                FirstName = r.FirstName,
                LastName = r.LastName
              }
              equals
              new
              {
                FirstName = r2.FirstName,
                LastName = r2.LastName
              }
              into
 yearResults
              select new
              {
                FirstName = r.FirstName,
                LastName = r.LastName,
                Wins = r.Wins,
                Starts = r.Starts,
                Results = yearResults
              });
    foreach (var r in q)
    {
      WriteLine($"{r.FirstName} {r.LastName}");
      foreach (var results in r.Results)
      {
        WriteLine($"{results.Year} {results.Position}.");
      }
    }
下面显示了foreach循环得到的最终结果。Lewis Hamilton 3次进入前三：2007年是第
二名，2008年和2014年则是冠军。Jenson Button 3次进入前三：2004年、2009年和2011
年。Sebastian Vettel 4次夺得冠军，并且是2009年的第二名：
    Lewis Hamilton
    2007 2.
    2008 1.
    2014 1.
    Jenson Button
    2004 3.
    2009 1.
    2011 2.
    Sebastian Vettel
    2009 2.
    2010 1.
    2011 1.
    2012 1.
    2013 1.
13.2.12 集合操作
扩展方法Distinct（）、Union（）、Intersect（）和Except（）都是集合操作。下面创
建一个驾驶法拉利的一级方程式冠军序列和驾驶迈凯伦的一级方程式冠军序列，然后确定
是否有驾驶法拉利和迈凯伦的冠军。当然，这里可以使用Intersect（）扩展方法。
首先获得所有驾驶法拉利的冠军。这只是一个简单的LINQ查询，其中使用复合的
from子句访问Cars属性，该属性返回一个字符串对象序列（代码文件
EnumerableSample/Program.cs）。
    var ferrariDrivers = from r in
                          Formula1.GetChampions()
                          from c in r.Cars
                          where c == "Ferrari"
                          orderby r.LastName
                          select r;
现在建立另一个基本相同的查询，但where子句的参数不同，以获得所有驾驶迈凯伦
的冠军。最好不要再次编写相同的查询。而可以创建一个方法，给它传递参数car：
    private static IEnumerable GetRacersByCar(string car)
    {
      return from r in Formula1.GetChampions()
              from c in r.Cars
              where c == car
              orderby r.LastName
              select r;
    }
但是，因为该方法不需要在其他地方使用，所以应定义一个委托类型的变量来保存
LINQ查询。racersByCar变量必须是一个委托类型，该委托类型需要一个字符串参数，并
返回IEnumerable，类似于前面实现的方法。为此，定义了几个泛型委托Func，
所以不需要声明自己的委托。把一个lambda表达式赋予racersByCar变量。lambda表达式的
左边定义了一个car变量，其类型是Func委托的第一个泛型参数（字符串）。右边定义了
LINQ查询，它使用该参数和where子句：
    Func> racersByCar =
          car => from r in Formula1.GetChampions()
                from c in r.Cars
                where c == car
                orderby r.LastName
                select r;
现在可以使用Intersect（）扩展方法，获得驾驶法拉利和迈凯伦的所有冠军：
    WriteLine("World champion with Ferrari and McLaren");
    foreach (var racer in racersByCar("Ferrari").Intersect(racersByCar("McLaren")
))
    {
      WriteLine(racer);
    }
结果只有一个赛车手Niki Lauda：
    World champion with Ferrari and McLaren
    Niki Lauda
  注意： 集合操作通过调用实体类的GetHashCode（）和Equals（）方法来比
较对象。对于自定义比较，还可以传递一个实现了IEqualityComparer接口的对象。
在这里的示例中，GetChampions（）方法总是返回相同的对象，因此默认的比较操作
是有效的。如果不是这种情况，就可以重载集合方法来自定义比较操作。
13.2.13 合并
Zip（）方法允许用一个谓词函数把两个相关的序列合并为一个。
首先，创建两个相关的序列，它们使用相同的筛选（国家意大利）和排序方法。对于
合并，这很重要，因为第一个集合中的第一项会与第二个集合中的第一项合并，第一个集
合中的第二项会与第二个集合中的第二项合并，依此类推。如果两个序列的项数不同，
Zip（）方法就在到达较小集合的末尾时停止。
第一个集合中的元素有一个Name属性，第二个集合中的元素有LastName和Starts两个
属性。
在racerNames集合上使用Zip（）方法，需要把第二个集合（racerNamesAndStarts）作
为第一个参数。第二个参数的类型是Func。这个参数实现为一
个lambda表达式，它通过参数first接收第一个集合的元素，通过参数second接收第二个集
合的元素。其实现代码创建并返回一个字符串，该字符串包含第一个集合中元素的Name
属性和第二个集合中元素的Starts属性（代码文件EnumerableSample/Program.cs）：
    var racerNames = from r in Formula1.GetChampions()
                      where r.Country == "Italy"
                      orderby r.Wins descending
                      select new
                      {
                      Name = r.FirstName + " " + r.LastName
                      };
    var racerNamesAndStarts = from r in Formula1.GetChampions()
                              where r.Country == "Italy"
                              orderby r.Wins descending
                              select new
                              {
                                LastName = r.LastName,
                                Starts = r.Starts
                              };
    var racers = racerNames.Zip(racerNamesAndStarts,
        (first, second) => first.Name + ", starts: " + second.Starts);
    foreach (var r in racers)
    {
      WriteLine(r);
    }
这个合并的结果是：
    Alberto Ascari, starts: 32
    Nino Farina, starts: 33
13.2.14 分区
扩展方法Take（）和Skip（）等的分区操作可用于分页，例如，在第一个页面上只显
示5个赛车手，在下一个页面上显示接下来的5个赛车手等。
在下面的LINQ查询中，把扩展方法Skip（）和Take（）添加到查询的最后。
Skip（）方法先忽略根据页面大小和实际页数计算出的项数，再使用Take（）方法根据页
面大小提取一定数量的项（代码文件EnumerableSample/Program.cs）：
    int pageSize = 5;
    int numberPages = (int)Math.Ceiling(Formula1.GetChampions().Count() /
        (double)pageSize);
    for (int page = 0; page = 3
                orderby numberYears descending, r.LastName
                select new
                {
                  Name = r.FirstName + " " + r.LastName,
                  TimesChampion = numberYears
                };
    foreach (var r in query)
    {
      WriteLine($"{r.Name} {r.TimesChampion}");
    }
结果如下：
    Michael Schumacher 7
    Juan Manuel Fangio 5
    Alain Prost 4
    Sebastian Vettel 4
    Jack Brabham 3
    Niki Lauda 3
    Nelson Piquet 3
    Ayrton Senna 3
    Jackie Stewart 3
Sum（）方法汇总序列中的所有数字，返回这些数字的和。下面的Sum（）方法用于
计算一个国家赢得比赛的总次数。首先根据国家对赛车手分组，再在新创建的匿名类型
中，把Wins属性赋予某个国家赢得比赛的总次数：
    var countries = (from c in
                    from r in Formula1.GetChampions()