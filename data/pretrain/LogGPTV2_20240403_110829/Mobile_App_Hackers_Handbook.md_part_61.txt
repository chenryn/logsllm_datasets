in the following markup:
 Note that WebView controls do not automatically
execute JavaScript that is present in rendered pages; instead, the app must instruct the control to execute
functions using the InvokeScript or InvokeScriptAsync functions. For example:
await myWebView.InvokeScriptAsync("myFunction", null);
Both the WebBrowser and WebView classes also feature a method named NativeToString(). Feeding an
attacker-controlled string into this function also represents a script execution vector, such as the following:
myWebBrowser.NavigateToString(attackerControlledHTMLString);
WebBrowser and WebView controls should ideally use https:// as opposed to http:// URLs wherever possible.
This is even truer if the control has JavaScript enabled on it. Whether JavaScript is enabled or not, lack of SSL
on the connection should be considered against best practices. Equally, attacker controllable strings should
never be passed to the NavigateToString() method.
Even when the loaded page is just publicly accessible content, SSL should still be used. Smartphone users are
generally quite prone to man-in-the-middle attacks, because joining open Wi-Fi networks when out and about,
such as public hotspots, and hotel and other guest Wi-Fi networks, is common. GPRS (General Packet Radio
Service) and other cellular technologies are also prone to man-in-the-middle attacks that facilitate injection into
non-SSL sessions. This is in contrast to desktop or laptop use, where users tend to use secured Wi-Fi or wired
connections, and can often be fairly confident that local eavesdropping is somewhat unlikely.
Possible attacks could involve injecting JavaScript, which renders a convincing fake interface in the embedded
WebBrowser or WebView, such as providing a prompt for the user’s PIN, password, or other sensitive
information, which could then be sent back to the attacker’s web server.
Local Scripting Attacks
Occasionally, an application may deliberately save a web page to a file, or dynamically generate
HTML/JavaScript content, and likewise save the content to a file.
If an attacker can influence the contents of the locally saved HTML file in an arbitrary way, serious security
issues can arise due to the same-origin policy (SOP). Although a full description of SOP is beyond the scope of
this book, the key purpose of SOP is to prevent a script running in one host’s context from requesting content
from another host, and being able to read it. This violates the same-origin policy and is the reason a web page
cannot make a request to your online banking site and read the response, which may contain sensitive details
such as your balance and recent transactions.
The same-origin policy holds true for all (modern) web browsers; JavaScript running on hostA.com cannot
make an AJAX request (for example) to hostB.com and read the response, because the two pieces of content are
not from the same origin.
However, when a page is loaded from the local filesystem, other files on the system are from the same origin, or
the local zone. This effectively means that if a local file is loaded into a WebBrowser control, JavaScript within it
is actually able to request other local files on the filesystem (within sandboxing constraints) and access their
contents, because this in line with the same-origin policy. This was first documented by Alex Plaskett and Nick
Walker (https://labs.mwrinfosecurity.com/system/assets/651/original/mwri_wp8_appsec-whitepaper-
syscan_2014-03-30.pdf).
This fact should set off alarm bells; if an app writes an HTML file to disk that contains attacker-controlled
JavaScript, the attacker can steal files from the device, within WP8.x’s sandboxing constraints.
Demonstrating this is straightforward to do by putting together a simple app that contains a WebBrowser that
loads a local file. The local file, in this demo, contains JavaScript that loads a local file named
credentialsFile.txt in an iframe; the JavaScript then POSTs these contents to another host. This other host, in
a real attacker scenario, would be under the control of the attacker.
To carry out the attack, a particular protocol handler will be used to open the local file: x-wmapp0:. This protocol
handler allows demonstration of the attack perfectly—file://secretFile.txt, on the other hand, will not work.
For the sake of proof-of-concept, follow these steps that demonstrate that local script execution can indeed
access and steal local files within the app’s sandbox.
1. In Visual Studio Express 2012 for Windows Phone, create a new project of type Windows Phone HTML5
App.
2. In MainPage.xaml, insert the following:
3. In MainPage.xaml.cs, insert the following C# code:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Navigation;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Shell;
namespace HTML5App1
{
public partial class MainPage : PhoneApplicationPage
{
// Url of Home page
private string MainUri = "/Html/index.html";
// Constructor
public MainPage()
{
InitializeComponent();
}
private void Browser_Loaded(object sender, RoutedEventArgs e)
{
// Add your URL here
//Browser.Navigate(new Uri(
"http://www.google.co.uk", UriKind.Absolute));
Browser.IsScriptEnabled = true;
Browser.Navigate(new Uri(MainUri, UriKind.Relative));
}
// Navigates back in the web browser's navigation stack, not the
applications.
private void BackApplicationBar_Click(object sender,
EventArgs e)
{
Browser.GoBack();
}
// Navigates forward in the web browser's navigation stack,
//not the applications.
private void ForwardApplicationBar_Click(object sender,
EventArgs e)
{
Browser.GoForward();
}
// Navigates to the initial "home" page.
private void HomeMenuItem_Click(object sender, EventArgs e)
{
// Browser.Navigate(new Uri("http://www.google.co.uk",
UriKind.Absolute));
Browser.IsScriptEnabled = true;
Browser.Navigate(new Uri(MainUri, UriKind.Relative));
}
// Handle navigation failures.
private void Browser_NavigationFailed(object sender,
System.Windows.Navigation.NavigationFailedEventArgs e)
{
MessageBox.Show("Navigation to this page failed");
}
}
}
4. In Solution Explorer, open Html/index.html and insert the following HTML and JavaScript:
Change http://10.0.0.29:8000 to the IP address of your test laptop or desktop box.
5. Using Solution Explorer, right-click the project name and go to Add New Item Text File and insert the
following contents into it.
username: adminUser
password: secretPwd123
6. Rename the file to credentialsFile.txt.
7. Set up a netcat listener on your test box; that is, $ nc -l 8000.
8. Run the app on your device or emulator, and observe the traffic in your netcat listener:
$ nc -l 8000
POST / HTTP/1.1
Accept: */*
Accept-Language: en-GB
Content-Type: text/plain;charset=UTF-8
UA-CPU: ARM
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0;
Trident/6.0; IEMobile/10.0; ARM; Touch; SAMSUNG; GT-I8750)
Host: 10.0.0.29:8000
Content-Length: 53
Connection: Keep-Alive
Cache-Control: no-cache
username: adminUser
password: secretPwd123
Hence, the file was submitted to our fake web server, which is quite worrisome, and a good indicator of the
dangers of local scripting!
This method, using the x-wmapp0 file handler, can be used to retrieve any file within the app’s sandboxing
restraints. Practically, this means anywhere in an app’s IsolatedStorage and anywhere within the app’s Install
directory. That is, more specifically:
C:\Data\programs\{GUID}\Install\*—All files installed with the bundle
C:\Data\Users\DefApps\APPDATA\{GUID}\*—The app’s IsolatedStorage/Local directory
Because file disclosure is likely to represent a serious vulnerability in sensitive apps (such as banking, secure
Bring Your Own Device containers, and so on), you should take great care if your app writes influenced data to a
file to be rendered in a WebBrowser or WebView context later.
JavaScript-C# Communication
The possibility exists for JavaScript running in WebBrowser and WebView controls to pass data back to the
application’s C# layer. This can be a useful tool, particularly for developers who choose to implement much of
an app’s logic in JavaScript.
You achieve communication between the JavaScript and C# layers by implementing a WebBrowser or WebView
script notification event handler. You do this using the ScriptNotify parameter in the control’s XAML tag. For a
WebBrowser control, this may look like:
And for a WebView control, similarly:
The application will define the script notification callback:
private void myEventHandler(object sender, NotifyEventArgs e) {
MessageBox.Show(e.Value);
}
JavaScript executing in a WebBrowser or WebView control may then pass a value into the event handler
(myEventHandler()) using the window.external.notify() API:
window.external.notify("value passed in from JS");
Predictably, in the previous example, the message box would display the "value passed in from JS" string.
Developers should not assume that values passed in (e.Value in the previous example) from the JavaScript
layer are safe because the possibility exists that attacker-controlled JavaScript may be executing the
WebBrowser or WebView control via one route or another (such as man-in-the-middle), and so values passed in
via script notification handlers should be treated with caution and not blindly trusted.
What an app actually does with values passed in from JavaScript will vary from app to app. When WebBrowser
and WebView control XAML definitions have a ScriptNotify parameter present, reviewing the handler carefully
to see whether any risk exists if an attacker does manage to inject a window.external .notify()call into the
WebBrowser or WebView’s content is worth your time.
Identifying Interprocess Communication Vulnerabilities
Interprocess communication (IPC) mechanisms were briefly introduced previously in this chapter. Use of IPC
mechanisms allow two completely separate apps to launch other apps, and communicate with apps offering IPC
interfaces, often to pass information between the two, or to influence or use part of another app’s functionality
in some way.
We’ve already mentioned the two types of IPC that the Windows Phone 8.x OSes support: file extension
handlers and protocol handlers. This section covers each of these two mechanisms and shows how they are
implemented in real applications, and how, as a result, an attacker may be able to interact with another
application and possibly exploit weaknesses or vulnerabilities in an app.
Protocol Handlers
Applications declare the scheme for their URL handler in their main manifest file. In apps targeted to work on
both Windows Phone 8 and 8.1, this will be WMAppManifest.xml. A typical definition for a sample scheme
(myproto:) would generally take the following form:
Then, upon installation of the app, assuming the URL scheme is not already taken, the OS registers the scheme
to the app in question.
If an app is only targeted at Windows Phone 8.1, that is, it is an APPX package, the protocol handler declaration
will be inside the Package.appxmanifest file, and may look something like this:
test.jpg
myproto