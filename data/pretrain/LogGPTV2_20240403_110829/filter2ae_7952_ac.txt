我们了解了 Dom Clobbering 之后，我们可以先看看可以怎么通过setTimeout来利用
简化了一下题目代码，对于以上的代码，我们可以通过利用 Dom Clobbering 来实现 XSS ，因为我们可以直接传入 id 为 ok 的标签进行
XSS ，例如传入
可是为什么呢？
根据 MDN 文档，setTimeout的第一个参数，必须是个函数或字符串。可是根据 Dom Clobbering ，这里的ok应该是一个 a
标签，既然这不是个函数，它就尝试用toString方法转换成字符串，而根据 MDN 文档
[HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement)
[HTMLHyperlinkElementUtils.toString()](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/toString)
Returns a [USVString](https://developer.mozilla.org/en-US/docs/Web/API/USVString) containing the whole URL. It is a synonym for
[HTMLHyperlinkElementUtils.href](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/href), though it can’t be used to
modify the value.
而当 a 标签通过toString()方法转换我们可以得到它的 href 属性，也就是javascript:alert()，所以我们就可以执行代码了。
## notify
好了，回到我们的 notify 上，虽然我们可以通过 DOM Clobbering 进行“污染”一些参数，但是题目直接规定了let notify =
false，浏览器当然也不可能允许我们修改服务端的代码，这可怎么办？
其实这里的 notify 比较具有误导性，比较像 C 语言入门的时候函数传参部分，我们把整个代码改一下：
      /* Main */
      let notify = false;
      let text = new URL(location).searchParams.get("text");
      let img = new URL(location).searchParams.get("img");
      if (text && img) {
        document.write(
          `` +
          `` +
          `Creating meme... (${DOMPurify.sanitize(text)})`
        );
      } else {
        $("#meme-code").text(
          memeTemplate(
            "https://i.imgur.com/PdbDexI.jpg",
            "When you get that WW3 draft letter"
          )
        );
      }
再简化一下就成了我们的 C 语言函数传参的练习题了
    const memeGen = (that, x) => {
      if (x) {
        //...
      }
    };
为了易于理解我们可以写成这样就不易弄混了，所以，对于memeGen来说，notify只是一个参数变量名，区别于我们一开始提到的 Javascript
Scope 部分，该函数内的notify参数变量取决于该函数所在的作用域。
而对于memeGen函数来说，它的作用域并非是在let notify = false所处的 JS
代码域当中，而是在通过document.write函数之后的作用域，所以这里就涉及到了作用域的问题。
## JavaScript Scope
所以对于执行document.write函数过后，也就是对于onload=memeGen函数来说，其作用域并非是 JS
的作用域，在题目中本来这么几个作用域：window、script、onload，其中 window 包含了后两个，后两个互不包含，所以这里在 onload
找不到 notify 变量，就会去 window 的作用域找，就会把 script 作用域当中的 notify 给找到，notify 变量也就成 false
了。
我们也可以通过一个简单的例子来理解：
      let x = false;
      console.log("JS'x: " + x);
      document.write("");
原理都是一样的，这里test函数在onerror作用域找到了 x 变量，所以就不会再去找 window 作用域下的
x=false变量了，所以本题我们需要引入一个name=notify的标签来“覆盖”掉原来的 notify 变量。
其实这也是一开始我们可以发现题目给出的代码有一处也比较神奇就是 text & img
    const memeGen = (that, notify) => {
      if (text && img) {
        template = memeTemplate(img, text);
        ...
      }
    };
memeGen函数在函数内找不到text，onload 的作用域也找不到text，就会去 script下面找，而多个 script
属于同一个作用域，所以对于函数当中的 text 以及 img ，它是在下一块 JS 代码段定义的。
## JQuery’s ‘mXSS’
所以基本上 notify 的问题我们解决了，接下来就是 DOM Purify 的问题了。
我们可以知道最终我们要插入的代码是通过$(“#notify”).html(html)来插入的，而参数 html 又来自
    html = `Meme created from ${DOMPurify.sanitize(text)}`;
简单跟一下 JQuery 的 html() 函数，我们可以发现有以下利用链：
[html()](https://github.com/jquery/jquery/blob/d0ce00cdfa680f1f0c38460bc51ea14079ae8b07/src/manipulation.js%23L372)->[append()](https://github.com/jquery/jquery/blob/d0ce00cdfa680f1f0c38460bc51ea14079ae8b07/src/manipulation.js%23L406)->[doManip()](https://github.com/jquery/jquery/blob/d0ce00cdfa680f1f0c38460bc51ea14079ae8b07/src/manipulation.js%23L312)->[buildFragment()](https://github.com/jquery/jquery/blob/d0ce00cdfa680f1f0c38460bc51ea14079ae8b07/src/manipulation.js%23L117)->[htmlPrefilter()](https://github.com/jquery/jquery/blob/d0ce00cdfa680f1f0c38460bc51ea14079ae8b07/src/manipulation/buildFragment.js%23L39)
在
[htmlPrefilter()](https://github.com/jquery/jquery/blob/d0ce00cdfa680f1f0c38460bc51ea14079ae8b07/src/manipulation.js%23L202)
函数中我们可以看到有这么一段代码：
    // source of htmlPrefilter()
    jQuery.extend( {
    htmlPrefilter: function( html ) {
    return html.replace( rxhtmlTag, "" );
    },
        ...
这段代码就是用来转换一些自闭合标签的标签，例如变成，我们就可以利用这个特性来实现一些绕过，例如：
    Elon
经过innerHTML会变成
但是经过 jquery html() 就会变成
    Elon
我们可以发现通过html()可以把一些自闭合的拆分，以及把内容转换出去，有点类似于 mXSS ，最终我们得到的是
    Elon
所以我们可以利用这个特性绕过 XSS WAF，例如以下
    alert()//
经过DOMPurify.sanitize我们可以得到
    alert(1337)//
经过 jquery html()到最终渲染页面就变成了
    alert(1337)//
所以这就是 JQuery’s 类似于 mXSS 的 trick
综上所述，配合我们之前的内容，最终 payload 如下：
    alert()//
最终传参:
    img=valid_img_url&text=alert()%2F%2F
这里我也不是非常清楚作者为啥要加一个 img 参数//全程没有用到
最后再来一遍：
## References
[DOM Clobbering](http://www.thespanner.co.uk/2013/05/16/dom-clobbering/)
[HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement)