### Coverage and Redundancy Analysis with Bloom Filters

**Coverage Analysis:**

- **Figure 3(a) - Node Coverage:**
  - The vertical axis represents the coverage of nodes, ranging from 0.93 to 0.84.
  - The horizontal axis represents the Bloom filter size, ranging from \(10^5\) to \(10^7\).
  - The plot includes lines for different hash functions (BF-1 hash, BF-2 hash, etc.) and a list (no false positives).
  - The coverage using a list is 0.924.

- **Figure 3(b) - Link Coverage:**
  - The vertical axis represents the coverage of links, ranging from 0.90 to 0.64.
  - The horizontal axis represents the Bloom filter size, ranging from \(10^5\) to \(10^7\).
  - The plot includes lines for different hash functions (BF-1 hash, BF-2 hash, etc.) and a list (no false positives).
  - The coverage using a list is 0.823.

**Key Observations:**
- The lowest level of performance is observed below a Bloom filter size of \(10^5\), where the false positive rate is at its maximum.
- The baseline coverage is 0.857 for nodes and 0.636 for links.
- The introduction of Doubletree reduces coverage compared to Skitter, regardless of whether Bloom filters are used or not.

**Redundancy Analysis:**

- **Figure 4(a) - Internal Interfaces:**
  - The vertical axis represents the gross redundancy on router interfaces, ranging from 500 to 325.
  - The horizontal axis represents the Bloom filter size, ranging from \(10^5\) to \(10^7\).
  - The plot includes lines for different hash functions (BF-1 hash, BF-2 hash, etc.) and a list (no false positives).

- **Figure 4(b) - Destinations:**
  - The vertical axis represents the inter-monitor redundancy on destinations, ranging from 10 to 1.
  - The horizontal axis represents the Bloom filter size, ranging from \(10^5\) to \(10^7\).
  - The plot includes lines for different hash functions (BF-1 hash, BF-2 hash, etc.) and a list (no false positives).

**Key Observations:**
- Bloom filters do not add additional redundancy to the process, as expected.
- False positives reduce exploration rather than increase it.
- The plots show the 95th percentile of redundancy, representing extreme values that should prompt the greatest concern.

### Capping and Clustering

**Objective:**
- To address the risk of probe traffic appearing as a DDoS attack as the number of monitors scales up.
- To cap the probing redundancy on all destinations by imposing an explicit limit on the number of monitors targeting each destination.

**Proposed Solution:**
- Grouping monitors into clusters, each cluster targeting a subset of the overall destination set.
- This approach aims to reduce both communication overhead and the risk of DDoS-like traffic.

**Analysis:**
- Doubletree reduces the redundancy of probing on destinations, but the redundancy still tends to grow linearly with the number of monitors.
- Capping the number of monitors per destination can reduce this redundancy but may also reduce coverage.
- For example, capping at six monitors per destination would result in 0.939 node coverage and 0.791 link coverage of the normal, uncapped, coverage.
- A higher range of monitors per destination could mitigate the penalty associated with capping.

**Example:**
- If Skitter's August 2004 level of 24 monitors per destination is sufficient, then 806 monitors, each probing at the same rate, would be needed to probe one address in each of the 16.8 million potential globally routable /24 CIDR address prefixes.

**Conclusion:**
- Clustering and capping monitors can effectively manage the trade-off between coverage and redundancy, reducing the risk of DDoS-like traffic while maintaining efficient network topology discovery.