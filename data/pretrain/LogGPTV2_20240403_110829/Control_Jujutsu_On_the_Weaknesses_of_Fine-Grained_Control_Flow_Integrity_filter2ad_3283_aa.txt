title:Control Jujutsu: On the Weaknesses of Fine-Grained Control Flow Integrity
author:Isaac Evans and
Fan Long and
Ulziibayar Otgonbaatar and
Howard E. Shrobe and
Martin C. Rinard and
Hamed Okhravi and
Stelios Sidiroglou-Douskos
On the Weaknesses of Fine-Grained Control Flow Integrity∗
Control Jujutsu:
Isaac Evans
MIT Lincoln Laboratory
PI:EMAIL
Fan Long
MIT CSAIL
PI:EMAIL
Ulziibayar Otgonbaatar
PI:EMAIL
MIT CSAIL
Howard Shrobe
MIT CSAIL
PI:EMAIL
Martin Rinard
MIT CSAIL
PI:EMAIL
Hamed Okhravi
MIT Lincoln Laboratory
PI:EMAIL
ABSTRACT
Control ﬂow integrity (CFI) has been proposed as an approach to
defend against control-hijacking memory corruption attacks. CFI
works by assigning tags to indirect branch targets statically and
checking them at runtime. Coarse-grained enforcements of CFI
that use a small number of tags to improve the performance over-
head have been shown to be ineffective. As a result, a number of
recent efforts have focused on ﬁne-grained enforcement of CFI as
it was originally proposed. In this work, we show that even a ﬁne-
grained form of CFI with unlimited number of tags and a shadow
stack (to check calls and returns) is ineffective in protecting against
malicious attacks. We show that many popular code bases such
as Apache and Nginx use coding practices that create ﬂexibility in
their intended control ﬂow graph (CFG) even when a strong static
analyzer is used to construct the CFG. These ﬂexibilities allow an
attacker to gain control of the execution while strictly adhering to a
ﬁne-grained CFI. We then construct two proof-of-concept exploits
that attack an unlimited tag CFI system with a shadow stack. We
also evaluate the difﬁculties of generating a precise CFG using scal-
able static analysis for real-world applications. Finally, we perform
an analysis on a number of popular applications that highlights the
availability of such attacks.
∗This work is sponsored by the Assistant Secretary of Defense for
Research & Engineering under Air Force Contract #FA8721-05-
C-0002 and Defense Advanced Research Projects Agency under
Contract #FA8650-11-C-7192. Opinions, interpretations, conclu-
sions, and recommendations are those of the author and are not
necessarily endorsed by the United States Government.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
c(cid:13) 2015 ACM. ISBN 978-1-4503-3832-5/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2810103.2813646.
Stelios
Sidiroglou-Douskos
PI:EMAIL
MIT CSAIL
1.
INTRODUCTION
Memory corruption bugs continue to be a signiﬁcant problem for
unmanaged languages such as C/C++ [7, 15, 51]. The level of con-
trol provided by unmanaged languages, such as explicit memory
management and low level hardware control, makes them ideal for
systems development. Unfortunately, this level of control, bears a
heavy cost: lack of memory safety [51]. Lack of memory safety, in
turn, forms the basis for attacks in the form of code injection [38]
and code reuse [15, 47]. Retroﬁtting memory safety to C/C++ ap-
plications can introduce prohibitive overhead (up to 4x slowdown)
[35] and/or may require signiﬁcant programmer involvement in the
form of annotations [28, 36].
As a result, the past three decades of computer security research
have created a continuous arms race between the development of
new attacks [10, 11, 19, 38, 47, 48] and the subsequent develop-
ment of corresponding defenses [4, 17, 29, 39, 52]. This arms
race attempts to strike a balance between the capabilities of the
attackers and the overhead, compatibility, and robustness of the de-
fenses [51].
The wide spread deployment of defenses such as Data Execu-
tion Prevention (DEP) [33, 39], address space layout randomiza-
tion (ASLR) [52] and stack smashing protection (SSP) [17] has
driven the evolution, and sophistication, of attacks.
Information
leakage attacks [10, 45, 50] enable the construction of multi-step
attacks that bypass ASLR and SSP, while code reuse attacks, such
as return-oriented program (ROP) [47], jump-oriented program-
ming (JOP) [11], and return-to-libc [54] can be used to circumvent
DEP.
The majority of the attacks rely on some form of control hi-
jacking [51] to redirect program execution. Control Flow Integrity
(CFI) is a runtime enforcement technique that provides practical
protection against code injection, code reuse, and is not vulnera-
ble to information leakage attacks [4, 59, 60]. CFI provides run-
time enforcement of the intended control ﬂow transfers by disal-
lowing transfers that are not present in the application’s Control
Flow Graph (CFG). CFGs are constructed either by analyzing the
source code [53], or, less accurately, by analyzing the disassembled
binary [59]. The enforcement is done by assigning tags to indirect
branch targets and checking that indirect control transfers point to
valid tags.
Precise enforcement of CFI, however, can introduce signiﬁcant
overhead [4, 5]. This has motivated the development of more prac-
tical, coarse-grained, variants of CFI that have lower performance
overhead but enforce weaker restrictions (i.e., limit the number of
tags) [59, 60]. For example, control transfer checks are relaxed to
allow transfers to any valid jump targets as opposed to the correct
target. Unfortunately, these implementations have been shown to
be ineffective as they allow enough valid transfers to enable an at-
tacker to build a malicious payload [20].
As a result of the attacks on coarse-grained variants of CFI, re-
searchers have focused on ﬁne-grained, yet still practical enforce-
ment of CFI. For example, forward-edge CFI [53] enforces a ﬁne-
grained CFI on forward-edge control transfers (i.e. indirect calls,
but not returns). Cryptographically enforced CFI [32] enforces an-
other form of ﬁne-grained CFI by adding message authentication
code (MAC) to control ﬂow elements which prevents the usage of
unintended control transfers in the CFG. Opaque CFI (OCFI) [34]
enforces ﬁne-grained CFI by transforming branch target checks to
bounds checking (possible base and bound of allowed control trans-
fers).
The security of ﬁne-grained CFI techniques is contingent on the
ability to construct CFGs that accurately capture the intended con-
trol transfers permitted by the application. For C/C++ applications,
even with access to source code, this assumption is tenuous at best.
In theory, the construction of an accurate CFG requires the use of
a precise (sound and complete) pointer analysis. Unfortunately,
sound and complete points-to analysis is undecidable [41].
In
practice, pointer analysis can be made practical by either adopting
unsound techniques or reducing precision (incomplete). Unsound
techniques may report fewer connections (tags), which can result
in false positives when used in CFI. Given that false positives can
interfere with the core program functionality, researchers have fo-
cused on building sound but incomplete pointer analysis.
Incomplete analysis leads to conservative over-approximate re-
sults. The analysis will conservatively report more connections
(i.e,. when two pointers may alias). While using incomplete pointer
analysis may be sufﬁcient for most program analysis tasks, we
show that it is insufﬁcient under adversarial scenarios. The accu-
racy of the pointer analysis is further exacerbated by the use of
common C idioms and software engineering practices that hinder
the use of accurate and scalable program analysis techniques.
We present a novel attack, Control Jujutsu 1, that exploits the
incompleteness of pointer analysis, when combined with common
software engineering practices, to enable an attacker to execute ar-
bitrary malicious code even when ﬁne-grained CFI is enforced. The
attack uses a new “gadget” class that we call Argument Corruptible
Indirect Call Site (ACICS). ACICS gadgets are pairs of Indirect
Call Sites (ICS) and target functions that enable Remote Code Ex-
ecution (RCE) while respecting a CFG enforced using ﬁne-grained
CFI. Speciﬁcally, ACICS gadgets 1) enable argument corruption
of indirect call sites (data corruption) that in conjunction with the
corruption of a forward edge pointer 2) can direct execution to a
target function that when executed can exercise remote code exe-
cution (e.g., system calls). We show that for modern, well engi-
neered applications, ACICS gadgets are readily available as part of
the intended control transfer.
To demonstrate our attack, we construct two proof-of-concept
exploits against two popular web servers, Apache HTTPD and Ng-
inx. We assume that the servers are protected using ﬁne-grained
1Jujutsu is a Japanese martial art in which an opponent’s force is
manipulated against himself rather than using one’s own force. In
Control Jujutsu, an application’s intended controls are manipulated
against it.
CFI (unlimited tags), to enforce only intended control transfers on
the forward-edge (i.e,. indirect calls/jumps), and a shadow stack to
protect the backward-edge (i.e., returns). For the forward edge, the
CFG is constructed using the state-of-the-art Data Structure Analy-
sis (DSA) [31] pointer analysis algorithm. For the backward edge,
the shadow stack provides a sound and complete dynamic analy-
sis (i.e., there is no imprecision). We show that even under this
scenario, which is arguably stronger than any of the available ﬁne-
grained CFI implementations, an attacker can perform a control
hijacking attack while still operating within the intended CFG.
To evaluate the prevalence, and exploitability, of ACICS gadgets,
we evaluate 4 real-world applications. The results show that ACICS
gadgets are prevalent and provide a rich target for attackers. Our
results indicate that in the absence of data integrity, which is hard
to achieve for practical applications, ﬁne-grained CFI is insufﬁcient
protection against a motivated attacker.
This paper makes the following contributions:
• Control Jujutsu: We present Control Jujutsu, a new attack
on ﬁne-grained CF that exploits the incompleteness of pointer
analysis, when combined with common software engineering
practices, to enable an attacker to execute arbitrary malicious
code.
• ACICS gadgets: We introduce a new “gadget” class, ACICS,
that enables control hijacking attacks for applications pro-
tected using ﬁne-grained CFI.
• Proof-of-Concept Exploits: We present two proof-of-concept
exploits against Apache HTTPD and Nginx protected using
ﬁne-grained CFI with forward and backward-edge protec-
tion.
• Experimental Results: We present experimental results that
characterize the prevalence of ACICS gadgets in real-world
applications.
2. EXAMPLE EXPLOIT
We next present an example that illustrates how Control Jujutsu
utilizes ACICS gadgets in conjunction with the imprecision of the
DSA pointer analysis algorithm to create an RCE attack on Apache
2.4.12, a popular web server.
2.1 Threat Model
The threat model in this paper is a remote attacker trying to hi-
jack control of a machine by exploiting memory vulnerabilities. We
assume the system is protected by ﬁne-grained CFI with unlimited
tags for the forward edge and a shadow stack implementation for
the backward edge. We also assume the deployment of DEP and
ASLR. These assumptions are consistent with the literature on code
reuse attacks. Finally, we assume the availability of a memory cor-
ruption vulnerability that allows an attacker to corrupt certain val-
ues on stack or heap. As numerous past vulnerabilities have shown,
this assumption is realistic. It is also weaker than an arbitrary at-
tacker read/write assumption made in the related work [29].
2.2
ICS Discovery
Control Jujutsu begins with a search for suitable ICS sites for
the ACICS gadget. Control Jujutsu identiﬁes the following require-
ments for ICS locations:
1. The forward edge pointer and its argument(s) should reside
on the heap or a global variable to facilitate attacks from mul-
tiple data ﬂows.
2. The arguments at the ICS can be altered without crashing the
program (before reaching a target function).
3. The ICS should be reachable from external input (e.g., a net-
work request).
AP_IMPLEMENT_HOOK_RUN_FIRST(apr_status_t,dirwalk_stat,
(apr_finfo_t *finfo,
request_rec *r,
apr_int32_t wanted),
(finfo, r, wanted), AP_DECLINED)
apr_status_t ap_run_dirwalk_stat(
apr_finfo_t *finfo, request_rec *r,
apr_int32_t wanted) {
ap_LINK_dirwalk_stat_t *pHook;
int n;
apr_status_t rv = AP_DECLINED;
...
//check the corresponding field of the global _hooks
if (_hooks.link_dirwalk_stat) {
pHook = (ap_run_dirwalk_stat_t *)
_hooks.link_dirwalk_stat->elts;
//invoke registered functions in the array one by
//one until a function returns a non-decline value.
for(n=0; n nelts;++n){
...
// our seelcted ICS
rv = pHook[n].pFunc(finfo, r, wanted);
...
if (rv != AP_DECLINED) break;
}
}
...
return rv;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
Figure 1: APR hook macro in server/request.c:97 deﬁning
ap_run_dirwalk_stat() in Apache HTTPD and the
simpliﬁed code snippet of ap_run_dirwalk_stat()
Using these requirements, we found many viable ACICS can-
didates which we discuss at length in section 5.1. Here we
present a detailed example exploit based on the selected ICS
seen in Figure 1.
Lines 1-5 use a macro deﬁned in the
Apache Portable Runtime (APR) library to deﬁne the function
ap_run_dirwalk_stat(). Lines 7-30 present the simpliﬁed
code snippet of ap_run_dirwalk_stat() after macro expan-
sion. The actual ICS itself occurs at line 23, which invokes the
function pointer pHook[n].pFunc. Figure 2 presents the spe-
ciﬁc ap_run_dirwalk_stat() call we use in our exploit.
Apache HTTPD uses a design pattern that facilitates modularity
and extensibility. It enables Apache module developers to regis-
ter multiple implementation function hooks to extend core Apache
functionality. ap_run_dirwalk_stat() is a wrapper func-
tion that iteratively calls each registered implementation function
for the dirwalk functionality until an implementation function re-
turns a value other than AP_DECLINED.
2.3 Target Selection
1
2
3
4
5
if (r->finfo.filetype == APR_NOFILE ||
r->finfo.filetype == APR_LNK) {
rv = ap_run_dirwalk_stat(&r->finfo,
r,
APR_FINFO_MIN);
Figure 2:
Apache HTTPD
dirwalk_stat called in server/request.c:616 in
1
2
3
4
5
6
7
8
9
10
11
12