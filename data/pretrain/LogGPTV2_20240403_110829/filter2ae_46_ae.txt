    u8  __afl_area_initial[MAP_SIZE + 16]; // 增加16字节，按照最大64位算，一个变量8字节，需要2个变量就是16字节
    // ...
    // 以及
    int __afl_persistent_loop(unsigned int max_cnt) {
      static u8  first_pass = 1;
      static u32 cycle_cnt;
      if (first_pass) {
        /* Make sure that every iteration of __AFL_LOOP() starts with a clean slate.
           On subsequent calls, the parent will take care of that, but on the first
           iteration, it's our job to erase any trace of whatever happened
           before the loop. */
        if (is_persistent) {
          memset(__afl_area_ptr, 0, MAP_SIZE + 16); // 同上
          __afl_area_ptr[0] = 1;
          __afl_prev_loc = 0;
        }
         ...
到这里，插桩的逻辑结束。
###  2.4 AFL 修改
插桩时增加了 distance 的 feedback，AFL 也需要增加对应的逻辑处理，fuzzing 的部分修改主要都在`afl-fuzz.c`文件中
首先是增加了一些变量，具体用处作者都写了就不赘述了。
    static double cur_distance = -1.0;     /* Distance of executed input       */
    static double max_distance = -1.0;     /* Maximal distance for any input   */
    static double min_distance = -1.0;     /* Minimal distance for any input   */
    static u32 t_x = 10;                  /* Time to exploitation (Default: 10 min) */
**2.4.1 获取距离**
那么 fuzzer 是如何获取程序反馈的距离的？首先同样也需要分配与插桩时同样多的空间接收 bitmap 的信息。
      /* Allocate 24 byte more for distance info */ // 这里作者的注释应该写错了，是16 byte
      shm_id = shmget(IPC_PRIVATE, MAP_SIZE + 16, IPC_CREAT | IPC_EXCL | 0600);
计算 bitmap 信息的函数是`has_new_bits`，判断 bitmap 是否覆盖了新的 bit，表示有新的 edge coverage
    static inline u8 has_new_bits(u8* virgin_map) {
    /* 同样也根据宏定义区分机器字长 */
    #ifdef __x86_64__
      u64* current = (u64*)trace_bits;
      u64* virgin  = (u64*)virgin_map;
      u32  i = (MAP_SIZE >> 3);
      /* Calculate distance of current input to targets */
      /* 获取distance的变量地址和count的地址，分别是bitmap紧接着的后两个变量。 */
      u64* total_distance = (u64*) (trace_bits + MAP_SIZE);
      u64* total_count = (u64*) (trace_bits + MAP_SIZE + 8);
      /* 当前seed的距离就是总距离 / 总块数 */
      if (*total_count > 0)
        cur_distance = (double) (*total_distance) / (double) (*total_count);
      else
        cur_distance = -1.0;
    #else
      u32* current = (u32*)trace_bits;
      u32* virgin  = (u32*)virgin_map;
      u32  i = (MAP_SIZE >> 2);
      /* Calculate distance of current input to targets */
      u32* total_distance = (u32*)(trace_bits + MAP_SIZE);
      u32* total_count = (u32*)(trace_bits + MAP_SIZE + 4);
      if (*total_count > 0) {
        cur_distance = (double) (*total_distance) / (double) (*total_count);
      else
        cur_distance = -1.0;
    #endif /* ^__x86_64__ */
经过`has_new_bits`函数计算后，seed 的距离就存放在变量`cur_distance`中，在得到距离后，更新当前 seed 的距离和最大最小值
`add_to_queue`函数
      q->distance = cur_distance;
      if (cur_distance > 0) {
        if (max_distance  max_distance) max_distance = cur_distance;
        if (cur_distance distance distance = cur_distance;
          if (cur_distance > 0) {
            if (max_distance  max_distance) max_distance = cur_distance;
            if (cur_distance 
> 模拟退火来自[冶金学](https://zh.wikipedia.org/wiki/%E5%86%B6%E9%87%91%E5%AD%B8)的专有名词[退火](https://zh.wikipedia.org/wiki/%E9%80%80%E7%81%AB)。退火是将材料加热后再经特定速率冷却，目的是增大[晶粒](https://zh.wikipedia.org/wiki/%E6%99%B6%E9%AB%94)的体积，并且减少晶格中的缺陷。材料中的原子原来会停留在使[内能](https://zh.wikipedia.org/wiki/%E5%85%A7%E8%83%BD)有局部最小值的位置，加热使能量变大，原子会离开原来位置，而随机在其他位置中移动。退火冷却时速度较慢，使得原子有较多可能可以找到内能比原先更低的位置。
>
>
> 模拟退火的原理也和金属退火的原理近似：我们将热力学的理论套用到统计学上，将搜寻空间内每一点想像成空气内的分子；分子的能量，就是它本身的动能；而搜寻空间内的每一点，也像空气分子一样带有“能量”，以表示该点对命题的合适程度。算法先以搜寻空间内一个任意点作起始：每一步先选择一个“邻居”，然后再计算从现有位置到达“邻居”的概率。
>
>
> 可以证明，模拟退火算法所得解[依概率收敛](https://zh.wikipedia.org/wiki/%E4%BE%9D%E6%A6%82%E7%8E%87%E6%94%B6%E6%95%9B)到全局最优解。
实际上，其实模拟退火算法就是以一定概率能够接受非最优解，来跳出局部最优解，达到全局最优。因为贪心算法每次都只选择当前的最有解，但是很可能会陷入局部最优，不一定能搜索到全局最优解，例如爬山算法，以图为例：
假设C点为当前解，爬山算法搜索到A点这个局部最优解就会停止搜索，因为在A点无论向那个方向小幅度移动都不能得到更优的解。
但模拟退火的搜索过程引入了随机因素。模拟退火算法 **以一定的概率** 来接受一个比当前解要差的解，因此 **有可能**
会跳出这个局部的最优解，达到全局的最优解。还是以上图为例，模拟退火算法在搜索到局部最优解A后，会 **以一定的概率**
接受到E的移动。也许经过几次这样的不是局部最优的移动后会到达D点，于是就跳出了局部最大值A。
那么 AFLGo 是怎么应用模拟退火算法的呢？是用在了 seed 的 **power scheduling** 上。
AFL 的`calculate_score`函数是对 seed 进行打分，打分的分数决定对 seed fuzzing的时间长度，按照直觉来说，距离越近的
seed，有更大的概率能够到达目标点，则应该分配更多的时间给这些 seed。但是这样就会陷入上面所说的局部最优的困局里，于是 AFLGo
采用时间作为一个划分阶段的 metric，当 fuzzing 的时间在预定的时间内时，让时间较为公平的分配给每个 seed 上，当 fuzzing
时间超过了预定的时间后，时间就集中分配给哪些距离较近的 seed 上。这样可以在前期避免还未广泛探索就过度集中的局部最优的情况。
      u64 cur_ms = get_cur_time(); 
      u64 t = (cur_ms - start_time) / 1000; // 计算当前运行时间
      double progress_to_tx = ((double) t) / ((double) t_x * 60.0); // 进度条，距离利用阶段的比例还有多少
      double T;
      //TODO Substitute functions of exp and log with faster bitwise operations on integers
      // 这里根据fuzzing前的选项选择冷却时间的模型，是log函数，还是线性，还是指数等等
      switch (cooling_schedule) {
        case SAN_EXP:
          T = 1.0 / pow(20.0, progress_to_tx);
          break;
        case SAN_LOG:
          // alpha = 2 and exp(19/2) - 1 = 13358.7268297
          T = 1.0 / (1.0 + 2.0 * log(1.0 + progress_to_tx * 13358.7268297));
          break;
        case SAN_LIN:
          T = 1.0 / (1.0 + 19.0 * progress_to_tx);
          break;
        case SAN_QUAD:
          T = 1.0 / (1.0 + 19.0 * pow(progress_to_tx, 2));
          break;
        default:
          PFATAL ("Unkown Power Schedule for Directed Fuzzing");
      }
      double power_factor = 1.0;
      if (q->distance > 0) {
        double normalized_d = 0; // when "max_distance == min_distance", we set the normalized_d to 0 so that we can sufficiently explore those testcases whose distance >= 0.
        if (max_distance != min_distance)
          // 首先归一化距离
          normalized_d = (q->distance - min_distance) / (max_distance - min_distance);
        if (normalized_d >= 0) {
            double p = (1.0 - normalized_d) * (1.0 - T) + 0.5 * T; // 计算p值，由距离和时间共同决定
            power_factor = pow(2.0, 2.0 * (double) log2(MAX_FACTOR) * (p - 0.5)); // 最后根据p值计算得到factor，
        }// else WARNF ("Normalized distance negative: %f", normalized_d);
      }
      perf_score *= power_factor; // 乘上factor得到最后的score
`cooling_schedule`的选择来源于用户在 fuzzing 前传入的参数
          case 'z': /* Cooling schedule for Directed Fuzzing */
            if (!stricmp(optarg, "exp"))
              cooling_schedule = SAN_EXP;
            else if (!stricmp(optarg, "log"))
              cooling_schedule = SAN_LOG;
            else if (!stricmp(optarg, "lin"))
              cooling_schedule = SAN_LIN;
            else if (!stricmp(optarg, "quad"))
              cooling_schedule = SAN_QUAD;
            else
              PFATAL ("Unknown value for option -z");
            break;
时间的设定来源于：
          case 'c': { /* cut-off time for cooling schedule */
              u8 suffix = 'm';
              if (sscanf(optarg, "%u%c", &t_x, &suffix) < 1 ||
                  optarg[0] == '-') FATAL("Bad syntax used for -c");
              switch (suffix) {
                case 's': t_x /= 60; break;
                case 'm': break;
                case 'h': t_x *= 60; break;
                case 'd': t_x *= 60 * 24; break;
                default:  FATAL("Unsupported suffix or bad syntax for -c");
              }
            }
            break;
最后存在`t_x`变量中。
而`perf_score`影响的是 havoc 阶段的时间
      orig_perf = perf_score = calculate_score(queue_cur);
        ...
      havoc_stage:
      stage_cur_byte = -1;
      /* The havoc stage mutation code is also invoked when splicing files; if the
         splice_cycle variable is set, generate different descriptions and such. */
      if (!splice_cycle) {
        stage_name  = "havoc";
        stage_short = "havoc";
        stage_max   = (doing_det ? HAVOC_CYCLES_INIT : HAVOC_CYCLES) *
                      perf_score / havoc_div / 100; // stage_max决定havoc的次数
      } else {
        static u8 tmp[32];
        perf_score = orig_perf;
        sprintf(tmp, "splice %u", splice_cycle);
        stage_name  = tmp;
        stage_short = "splice";
        stage_max   = SPLICE_HAVOC * perf_score / havoc_div / 100; // stage_max决定havoc的次数
      }
## 3\. 存在的缺陷
这篇工作发在2017年，在当时首次提出了 directed 的方向，后来很多的 directed fuzzing 的工作都借鉴其做法，主要的核心都是围绕
distance 来引导的。但同时也存在一些设计和实现上的缺陷。
首先是设计上，因为 distance 的计算为了方便，只采用了最短路径的值计算
distance，但这带来一个问题，如果同时有多条路径能够到达目标节点，那么除了最短路径之外的路径则会被忽略掉，这样是不合理的。2018年 CCS
的论文[Hawkeye](https://www.researchgate.net/profile/Hongxu-Chen-4/publication/328327299_Hawkeye_Towards_a_Desired_Directed_Grey-box_Fuzzer/links/5bcbe6c0299bf17a1c643e4d/Hawkeye-Towards-a-Desired-Directed-Grey-box-Fuzzer.pdf)首次指出这个问题，该文章的解决方法是同时增加一个 function similarity 的 metric，综合
distance 与 function similarity 两个指标来判断。后续还有很多 directed fuzzing 提出了很多的新指标，比
distance 更加精细，比如 sequence，constraint 等等。
其次是实现上的问题，CG 的生成采用的是 llvm 自带的 pass 生成，但是静态分析无法分析一些特殊的函数调用情况，例如 indirect
call，virtual function
等等，这些特殊的函数调用在静态分析中是无法分析的，只有在动态执行中才能够确认调用的哪一个函数。这样会导致在某些程序上一些路径上没有反馈，甚至会变得没有路径可达。Hawkeye
同样也指出这个问题，它的解决方法是用指针分析的方法补上可能的 indirect call，让 CG 更加完整。
Hawkeye 这篇文章几乎就是对 AFLGo 的全面改进，但其未开源，所以这些方法没有源码可以进行实现的借鉴。
以及模拟退火算法的实现，由于 AFLGo 的模拟退火算法需要用户自己设定时间决定 exploration-exploitation
的分界时间，但是经过笔者的测试，`t_x`的选择很难找到一个通用的时间，只能针对不同的时间做大量的测试后才能确定一个较好的时间范围，但这样其实需要浪费大量时间去确认一个时间边界，最好是能够自适应的根据
fuzzing 调整阶段，但目前没有 fuzzer 做到这件事。
如果想了解其他 directed fuzzing 的工作，推荐这篇[SoK](https://arxiv.org/pdf/2005.11907.pdf)。