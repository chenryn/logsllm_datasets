def CreateInstance(progid):
    type = System.Type.GetTypeFromProgID(progid)
    return type()
ie as duck = CreateInstance("InternetExplorer.Application")
ie.Visible = true
ie.Navigate2("http://www.go-mono.com/monologue/")
while ie.Busy:
    Thread.Sleep(50ms)
document = ie.Document
print("${document.title} is ${document.fileSize} bytes long.")
Exercises
Part 18 - Duck typing
http://boo.codehaus.org/Part+18+-+Duck+typing?print=1
2 of 2
5/27/2008 9:37 PM
Come up with another good example where duck typing is effective.
1.
Go on to Part 19 - Using the Boo Compiler
Part 19 - Using the Boo Compiler
http://boo.codehaus.org/Part+19+-+Using+the+Boo+Compiler?print=1
1 of 2
5/27/2008 9:40 PM
Part 19 - Using the Boo Compiler
Part 19 - Using the Boo Compiler
The Boo Compiler is typically called in this fashion:
booc  
Command-line Options
Option 
Description 
-v
Verbose 
-vv
More Verbose 
-vvv
Most Verbose 
-r:
Add a reference to your project 
-t:
Type of file to generate, can be either exe or winexe to make executables (.exe 
files), or library to make a .dll file 
-p:
Adds a step  to the compile. 
-c:
Sets which CultureInfo to use. 
-o:
Sets the name of the output file 
-srcdir:
Specify where to find the source files. 
-debug
Adds debug flags to your code. Good for non-production. (On by default) 
-debug-
Does not add debug flags to your code. Good for production environment. 
-debug-steps
See AST after each compilation step. 
-resource:,
Add a resource file.  is optional. 
-embedres:, Add an embedded resource file.  is optional. 
So, for example, in order to compile your Database code that depends on the library System.Data.dll, you would type:
booc -r:System.Data.dll -o:Database.dll -t:library Database.boo
That would create a fully functional, working compilation of your library: Database.dll
Using NAnt
When working on a large project with multiple files or libraries, it is a lot easier to use NAnt. It is a free .NET build tool.
To do the same command as above, you would create the following build file:
default.build
$ nant
NAnt 0.85 (Build 0.85.1869.0; rc2; 2/12/2005)
Copyright (C) 2001-2005 Gerry Shaw
http://nant.sourceforge.net
Buildfile: file:///path/to/default.build
Part 19 - Using the Boo Compiler
http://boo.codehaus.org/Part+19+-+Using+the+Boo+Compiler?print=1
2 of 2
5/27/2008 9:40 PM
Target framework: Microsoft .NET Framework 1.1
Target(s) specified: build
build:
database:
     [booc] Compiling 1 file(s) to /path/to/bin/Database.dll.
BUILD SUCCEEDED
Total time: 0.2 seconds.
And although that was a long and drawnout version of something so simple, it does make things a lot easier when 
dealing with multiple files.
It also helps that if you make a change to your source files, you don't have to type a long booc phrase over again.
The important part of the build file is the  section. It relays commands to the compiler.
There are four attributes available to use in it:
Attribute 
Description 
target
Output type, one of library, exe, winexe. Optional. Default: exe. 
output
The name of the output assembly. Required. 
pipeline
AssemblyQualifiedName for the CompilerPipeline type to use. Optional. 
tracelevel Enables compiler tracing, useful for debugging the compiler, one of: Off, Error, Warning, Info, Verbose. 
Optional. Default: Off. 
You are most likely only to use target and output.
For nested elements, you have 3 possibilities:
Nested Element 
Description 
Source files. Required. 
Assembly references. 
Embedded resources. 
Inside these you are to put  elements, as in the example.
This is merely a brief overview of NAnt, please go to their website http://nant.sourceforge.net for more information.
Go on to Part 20 - Structure of a Boo Project
Part 20 - Structure of a Boo Project
http://boo.codehaus.org/Part+20+-+Structure+of+a+Boo+Project?print=1
1 of 2
5/27/2008 9:42 PM
Part 20 - Structure of a Boo Project
Part 20 - Structure of a Boo Project
On the Project-level
Here I'll use the example of the IRC bot I write: Goomba
+ Goomba (Goomba namespace)
   |+ Configuration (Goomba.Configuration namespace)
   |   |- Config.boo
   |       |# class Config
   |+ Data (Goomba.Data namespace)
   |   |- Column.boo
   |   |   |# class Column
   |   |- Database.boo
   |   |   |# enum DatabaseType
   |   |   |# class Database
   |   |- DatabasePreferences.boo
   |   |   |# class DatabasePreferences
   |   |- Result.boo
   |       |# class Result
   |+ Plugins (Goomba.Plugins namespace)
   |   |- DefineCommand.boo
   |   |   |# class DefineCommand
   |   |       |# class Definition
   |   |- Hail.boo
   |   |   |# class Hail
   |   |       |# class HailMessage
   |   |- HelpCommand.boo
   |   |   |# class HelpCommand
   |   |- Logger.boo
   |   |   |# class Logger
   |   |       |# class Message
   |   |       |# class Action
   |   |- Quoter.boo
   |   |   |# class Quoter
   |   |       |# class Quote
   |   |- RawLogger.boo
   |   |   |# class RawLogger
   |   |- UrlGenerator.boo
   |   |   |# class UrlGenerator
   |   |       |# class Engine
   |   |- UserTracker.boo
   |   |   |# class UserTracker
   |   |       |# class User
   |   |- VersionCommand.boo
   |   |   |# class VersionCommand
   |   |- UrlTracker.boo
   |       |# class UrlTracker
   |           |# class Url
   |- ActionEventArgs.boo
   |   |# enum ActionType
   |   |# class ActionEventArgs
   |- DebugLogger.boo
   |   |# enum LogImportance
   |   |# class DebugLogger
   |- Goomba.boo
   |   |# class Goomba
   |   |! Main Body (This will be executed when Goomba.exe is run)
   |- GoombaPreferences.boo
   |   |# class GoombaPreferences
   |- IPlugin.boo
   |   |# interface IPlugin
   |- MessageEventArgs.boo
   |   |# enum MessageType
   |   |# class MessageEventArgs
Part 20 - Structure of a Boo Project
http://boo.codehaus.org/Part+20+-+Structure+of+a+Boo+Project?print=1
2 of 2
5/27/2008 9:42 PM
   |- Sender.boo
       |# enum SenderType
       |# class Sender
Which I have set up to create the assemblies Goomba.exe, Goomba.Data.dll, Goomba.Configuration.dll, as well as one 
assembly per plugin.
You may have noticed a few important things:
For every directory, it represents a different namespace, with the same name as the directory itself.
Each .boo file has at most one class in it. That class will have the same exact name as the .boo file.
The "Main Body" section is below the class Goomba definition. Any inline executable code must be at the bottom
of a file in the assembly.
Enums come before classes. This is merely a coding practice that is not required, but recommended. If an enum
is larger than 15 values, place it in its own file.
On the File-level
Files must be defined in this order:
1. Module docstring
2. Namespace declaration
3. Import statements
4. Enums/Classes/Structs/Interfaces
5. Functions
6. Main code executed when script is run
Assembly attributes
Recommendation
One class per file. If you have more than one class per file, split it up.
If you have a class inside another class, this is acceptable, as it still has one flat class per file.
7.
Go on to Part 21 - Documentation
Part 21 - Documentation
http://boo.codehaus.org/Part+21+-+Documentation?print=1
1 of 3
5/27/2008 10:04 PM
Part 21 - Documentation
Part 21 - Documentation
A communicable material used to explain some attributes of an object, system or procedure.
I've saved the most important for last, as documentation is itself, just as important as the code which it describes.
When documenting your code, be sure to remember:
1. All your documents should be in English.
2. Use full sentences.
3. Avoid spelling/grammar mistakes.
Use present tense.
4.
Documentation is placed in tripled double-quoted strings right below what you are documenting.
Documentation with Summary
def Hello():
"""Says "hello" to the world."""
    print "Hello, World!"
Hello()
That "docstring" is the least you can do to document your code. It gave a simple summary.
If your docstring spans more than one line, then the quotes should go on their own lines.
You may have noticed that 'Says "hello" to the world.' is not a full sentence. For the first sentence in a summary, you 
can imply "This member".
Parameters are also supposed to documented.
Parameters
def Hello(name as string):
"""
Say "hello" to the given name.
Param name: The name to say hello to.
"""
    print "Hello, ${name}!"
Hello()
To read it to yourself, it goes as such: 'Say "hello" to the given name. Parameter name is defined as the name to say 
hello to.'
This keeps in line with using full sentences.
If describing the parameter takes more than one line, you should move it all to a new line and indent.
Long Parameter
def Hello(name as string):
"""
Say "hello" to the given name.
Param name:
    The name to say hello to.
    It might do other things as well.
"""
    print "Hello, ${name}!"
The same goes with any block.
Here is a list of all the tags that can be used
Part 21 - Documentation
http://boo.codehaus.org/Part+21+-+Documentation?print=1
2 of 3
5/27/2008 10:04 PM
Tag
Description
No tag
A summary of the member.
Param : 
This specifies the parameter  of the method.
Returns: 
This describes what the method returns.
Remarks: 
This provides descriptive text about the member.
Raises : 
Gives a reason why an Exception is raised.
Example: : 
Provides an example.
Include : 
[@=""]
Includes an excerpt from another file.
Permission : 
Describe a required Permission.
See Also: 
Lets you specify the reference that you might want to appear in a 
See Also section.
And a list of inline tags
Tag
Description
* 
* 
* 
Bullet list
# 
# 
# 
Numbered List
>
Provides an inline link to a reference. e.g.  or  would link.
[] References to a parameter of the method.
Here's some examples of proper documentation:
Documentation example
import System
class MyClass:
"""Performs specific duties."""
    def constructor():
    """Initializes an instance of """
        _rand = Random()
    def Commit():
    """Commits an action."""
        pass
    def CalculateDouble(i as int) as int:
    """
    Returns double the value of [i].
    Parameter i: An  to be doubled.
    Returns: Double the value of [i].
    """
        return i * 2
    def CauseError():
    """
    Causes an error.
    Remarks: This method has not been implemented.
    Raises NotImplementedException: This has not been implemented yet.
    """
        return NotImplementedException("CauseError() is not implemented")
    def DoSomething() as int:
    """
    Returns a number.
    Example: Here is a short example:
        print DoSomething()
Part 21 - Documentation
http://boo.codehaus.org/Part+21+-+Documentation?print=1
3 of 3
5/27/2008 10:04 PM
    Returns: An .
    See Also: MakeChaos()
    """
        return 0
    def MakeChaos():
    """
    Creates Chaos.
    Include file.xml: Foo/Bar[@id="entropy"]
    Permission Security.PermissionSet: Everyone can access this method.
    """
        print "I am making chaos: ${_rand.Next(100)}"
    def Execute():
    """
    Executes the protocol.
    Does one of two things,
    # Gets a sunbath.
    # Doesn't get a sunbath.
    """
        if _rand.Next(2) == 0:
            print "I sunbathe."
        else:
            print "I decide not to sunbathe."
    def Calculate():
    """
    Does these things, in no particular order,
    * Says "Hello"
    * Looks at you
    * Says "Goodbye"
    """
        thingsToDo = ["I look at you.", 'I say "Hello."', 'I say "Goodbye."']
        while thingsToDo.Length > 0:
            num = _rand.Next(thingsToDo.Length)
            print thingsToDo[num]
            thingsToDo.RemoveAt(num)
    [Property(Name)]
    _name as string
    """A name""" // documents the property, not the field
    Age as int:
    """An age"""
        get:
            return _rand.Next(8) + 18
    _age as int
    _rand as Random
This should give you a good view on how to document your code.
I think Dick Brandon said it best:
Quote: Dick Brandon
Documentation is like sex: when it is good, it is very, very good; and when it is bad, it is better than 
nothing.
Go on to Part 22 - Useful Links
Part 22 - Useful Links
http://boo.codehaus.org/Part+22+-+Useful+Links?print=1
1 of 1
5/27/2008 9:45 PM
Part 22 - Useful Links
Part 22 - Useful Links
Boo
Download Boo
MSDN Search - Very handy if you want to look up something in the standard library.
Mono Docs - Nice source of information as an alternative to MSDN, or if you work on Mono or Gtk specific 
projects.
Google - Has a lot of information within its reach. Searching prefixed with ".NET Framework" or "C#" usually will
turn up what you need.
NAnt - A free build tool for .NET