### SENSS Client Behavior and Security Mechanisms

SENSS clients have minimal incentives to engage in malicious behavior. Clients are unlikely to send excessive requests to the server because each request incurs a cost. Additionally, SENSS security mechanisms ensure that client actions only affect traffic and routes related to their own prefixes. However, a SENSS ISP cannot independently verify if a victim is under attack; this verification is not necessary. Any network can use SENSS to specify how its traffic and routes should be handled by upstream ISPs, even in the absence of an ongoing attack. It is the responsibility of ISPs to set pricing schemes that cover the operational costs of running SENSS and discourage excessive messaging.

### Potential Misbehavior by SENSS Servers

SENSS servers could potentially misreport their observations or fail to implement control actions for which they have charged the victim. For example, in response to `traffic_queries`, a server might falsely report sending or receiving more or less traffic than it actually does, or provide a fabricated distribution of traffic over real or fake tags. In `route_queries`, a server might fabricate AS path segments. Table 3 outlines the possible ways a server may misreport (column 2) and the incorrect decisions the victim might make as a result (column 3).

#### Impact of Misreporting on SENSS Operation

The impact of a misreporting server on SENSS operations can be categorized into two types: Legacy or Dropper.

- **Legacy Liar**: A server that lies about its traffic but does not affect the victim's traffic. The victim pays for the false reports, which can prolong attack mitigation and increase costs. However, Legacy liars cannot cause the victim to drop legitimate traffic, indefinitely postpone attack mitigation, or influence the victim's actions at other ISPs.
- **Dropper Liar**: A server that lies about its traffic in a way that causes the victim to drop some of its legitimate traffic. For example, if a server reports higher traffic on its links, it may create a dropper effect. Dropper liars are already on the data path and can drop traffic even without SENSS, so the system does not exacerbate the situation.

| Attack Type | Message (Lie) | Action, Effect at Liar |
|-------------|---------------|------------------------|
| Flood w/ sig | TR (IN = Actual) | No filter, Legacy |
| Flood w/o sig | None | Filter, Dropper |
| Reflector | TR (OUT = IN) | None, Legacy |
| Cross-fire | TR (OUT > Actual) | RR (fake seg.) |
| Cross-fire | TR (fake seg.) | Demote larger seg., Legacy |
| Cross-fire | Demote fake seg., Legacy | Demote fake seq., Legacy |

**Table 3: Scenarios of Misreporting and Their Effects (TR: Traffic Query Reply, RR: Route Query Reply)**

### Mitigating Misreporting and Extortion

A server may fail to provide the requested services but still charge the victim, thereby increasing its profits. Additionally, a server could extort the victim by dropping its traffic and then charging for diagnosis and mitigation. These attacks are facilitated by SENSS, as it allows ISPs to charge victims for handling SENSS requests. While preventing these attacks is challenging, victims can build a reputation score for each server to avoid underperforming or extortionist servers.

Victims can monitor the effectiveness of each control message by measuring the traffic received after the message is processed by a SENSS server. Control messages that fail to reduce attack traffic indicate underperforming servers. Victims can internally assign negative reputation points to such servers, and over time, these points will accumulate, allowing the victim to identify and avoid underperforming servers. Similarly, victims can detect Dropper ISPs by using the cross-fire handling client program. If a given AS is part of the bottleneck segment, the victim can assign negative reputation points to this AS. When the reputation score declines significantly, the victim can conclude that the AS is a Dropper ISP and use SENSS to demote routes containing this AS.

### Evaluation

In this section, we evaluate SENSS's effectiveness in sparse deployment using simulations and emulations.

#### Simulation Methodology

For our effectiveness tests, we infer AS-level topology and routing from CAIDA’s AS relationships dataset as of May 1st, 2017. The dataset includes 57,552 ASes, 114,018 customer-provider links, and 133,795 peer-to-peer links. Routing is inferred using the no-valley, customer-prefer approach. We simulate various DDoS attack scenarios, including floods with and without signatures, reflector attacks, and cross-fire attacks. We measure the amount of legitimate and attack traffic dropped and the bandwidth consumed by the attack on inter-AS links. Each data point is based on 1,000 random trials, and we show the median and 25th and 75th percentiles.

#### Emulation Methodology

For evaluating response speed, scalability, and overhead, we developed a SENSS prototype and deployed it on the DeterLab testbed. We replicated the Cogent topology (186 nodes) from Topology Zoo, using Quagga as router software and Open vSwitch as SDN software. RYU was used as the SDN controller. We emulated large, 100 ms end-to-end propagation delays between the SENSS server and each victim. Legitimate traffic was generated using iPerf (TCP mode), and attack traffic was generated using a custom tool to create UDP floods.

### 2016 Dyn Attack Reproduction

We reproduced the 2016 attack on Dyn by simulating the locations of Mirai bots using IP addresses from [24]. We divided 1.2 Tbps equally among the bots and allocated them to their respective ASes. We used AS 7015 and 13977 as victim ASes for Dyn. By strategically deploying SENSS on four ASes (AS 174, 3356, 6461, and 7922), we found that SENSS could filter 100% of the attack traffic with only four filtering rules. Cogent filtered 56% of the attack, and Zayo filtered 40%, indicating that even two SENSS ISPs could filter almost all the attack.

### Effectiveness in Sparse Deployment

We investigated the influence of deployment strategy and the number of deployment points on SENSS's effectiveness. We considered two deployment strategies: top and random. In the top strategy, we deployed SENSS at the top N ASes, ordered by decreasing customer cone size. In the random strategy, we deployed SENSS at random N ASes. We only considered deployment at transit ASes, which are 23% of all ASes in our topology.

#### Uniform Traffic

For uniform traffic, we randomly selected a victim, 1,000 ASes to host attackers, and 1,000 ASes to host legitimate clients. Attack and legitimate traffic were distributed equally among the attackers and legitimate clients.

#### Realistic Traffic

For realistic traffic, we randomly selected a victim but distributed attackers at Mirai bot locations and legitimate clients at large US residential ISPs. We showed results only for the top deployment, as random deployment results did not change with traffic distribution.

### Comparison with Cloud-Based DDoS Defenses

We compared SENSS with several cloud-based DDoS defenses, including CloudFlare, Google, Akamai, and Incapsula. Our results indicate that SENSS outperforms these cloud-based solutions, saving 2–4 times more bandwidth.

| Cloud Provider | ASes | Providers | Peers | Avg. AS-path Length |
|----------------|------|-----------|-------|---------------------|
| CloudFlare     |      |           |       |                     |
| Google         |      |           |       |                     |
| Akamai         |      |           |       |                     |
| Incapsula      |      |           |       |                     |

**Table 4: Comparison of Cloud-Based DDoS Defenses**

In conclusion, SENSS provides effective DDoS protection, especially when deployed strategically. The system's ability to handle various attack types and its superior performance compared to cloud-based solutions make it a valuable tool for network security.