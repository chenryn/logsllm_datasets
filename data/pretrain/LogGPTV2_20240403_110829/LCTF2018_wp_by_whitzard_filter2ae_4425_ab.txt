### easyvm
vm题先找vm代码，从main函数中看到三个数据`unk_603080`,`unk_6030E0`和  
`unk_6031A0`，猜测就是vm代码，它们被传入`sub_4009D2`函数进行解释。
其中`sub_401502`函数里有大量case判断，基本可以确定为vm代码解释器，每个case对应一个opcode。
根据opcode解释函数大体还原vm用到的struct：
    00000000 vm_obj          struc ; (sizeof=0x48, mappedto_8)
    00000000 reg0            dq ?
    00000008 reg1            dq ?
    00000010 reg2            dq ?
    00000018 reg3            dq ?
    00000020 reg4_flag       dq ?
    00000028 datas           dq ?                    ; offset
    00000030 input           dq ?                    ; offset
    00000038 field_38        dq ?
    00000040 _sp             dq ?
    00000048 vm_obj          ends
然后开始看vm代码，要注意，为了快速解决vm题，定位关键代码是非常重要的。
首先第一段：
    95, 30, 00, 1C, reg3 = 0x1c
    97, 10, reg1 = input
    9B, 10, cmp reg1 reg0
    9E, 05, jz +5
    94, 30, reg3--    99, input++
    A1, 09, jmp -09
    9B, 32, cmp reg2 reg3
    9F, 04, jnz 4
    95, 00, 00, 01, A3
翻译了几句就可以看出这段代码基本就是判断了input长度，没有做实质性的工作
再来看第二段：
    92, 00, reg0 = reg4
    9F, 01, jnz 1
    A3, 
    95, 00, 00, 80, reg0 = 0x80
    95, 20, 00, 3F, reg2 = 0x3f
    95, 30, 00, 7B, reg3 = 0x7b
    95, 40, 00, 1C, reg4 = 0x1c
    97, 10, reg1 = in
    8D, 12, reg1 *= reg2
    8B, 13, reg1 += reg3
    8F, 10, reg1 %= reg0
    98, 10, 99, 94, 40, 87, 40, 92, 40, 9F, 01, A3, 8A, 40, A1, 16, A3, 00, 00
可以看到对input的每一位做了一个简单变换。
最后第三段代码：
    92, 00, 9F, 01, A3,
    86, 00, 3E, push 0x3e
    86, 00, 1A, push 0x1a
    86, 00, 56, 
    86, 00, 0D, 
    86, 00, 52, 
    86, 00, 13, 
    86, 00, 58, 
    86, 00, 5A, 
    86, 00, 6E, 
    86, 00, 5C, 
    86, 00, 0F, 
    86, 00, 5A, 
    86, 00, 46, 
    86, 00, 07, 
    86, 00, 09, 
    86, 00, 52, 
    86, 00, 25, 
    86, 00, 5C, 
    86, 00, 4C, 
    86, 00, 0A, 
    86, 00, 0A, 
    86, 00, 56, 
    86, 00, 33, 
    86, 00, 40, 
    86, 00, 15, 
    86, 00, 07, 
    86, 00, 58, 
    86, 00, 0F, 
    95, 00, 00, 00, reg0 = 0
    95, 30, 00, 1C, reg3 = 0x1c
    97, 10,  reg1 = in
    8A, 20,  pop(reg2)
    9B, 12, cmp reg1 reg2
    9E, 01, A3, 99, 94, 30, 92, 30, 9F, 05, 95, 00, 00, 01, A3, A1, 15, A3
看到push了一堆常量，可以猜测出这就是变换后的flag，用来作比较。由于是一个一个pop出来的，注意写脚本输出的时候要反过来。
解题脚本：
    l=[0x3E,0x1A,0x56,0x0D,0x52,0x13,0x58,0x5A,0x6E,0x5C,0x0F,0x5A,0x46,0x07,0x09,0x52,0x25,0x5C,0x4C,0x0A,0x0A,0x56,0x33,0x40,0x15,0x07,0x58,0x0F]
    s=''
    for i in range(len(l)):
        for j in range(32,128):
            if (j*0x3f+0x7b)%0x80 == l[i]:
                s+= chr(j)
    print s[::-1]
### 想起“壶中的大银河 ～ Lunatic ”
简单分析程序可以得知，输入的内容经过一系列编码，最终与一个值`IQURUEURYEU#WRTYIPUYRTI!WTYTE!WOR%Y$W#RPUEYQQ^EE`进行比较。
编码过程比较繁琐，可以动态调试几次，发现输入`LCTF{`开头的字符串，编码后  
会得到`IQURUEURYE`开头的字符串，与最终结果前10位相同，因此可以猜测编码结果的每一位与输入的每一位是一一对应的，于是可以爆破。
这里我们patch程序，把失败时输出的`You have failed.`替换成编码后的输入，具体patch了两处：
第一处把函数参数改掉：  
`.text:00000000000038B1 lea rdi, [rbp+var_60]`
第二处把打印字符串的偏移改掉：  
`.text:000000000000356A add rax, 0`
然后逐位爆破：
    from pwn import *
    enc='IQURUEURYEU#WRTYIPUYRTI!WTYTE!WOR%Y$W#RPUEYQQ^EE'
    flag='LCTF{'
    def test(f):
        s = process('./maze_patched')
        s.recvuntil('Flag:\n')
        s.sendline(f)
            ret= s.recvline()
        s.close()
        return ret
    def common(a, b):
        for i in range(len(a)):
            if a[i]!=b[i]:
                break
        return i
    for k in range(19):
        for i in range(33, 127):
            full_flag = flag + chr(i) + '0'*(18-k)
            x=test(full_flag)
            print chr(i), full_flag, x, common(enc, x)
            if common(enc, x) >= 12+(2*k):
                flag += chr(i)
                print flag
                break
得到flag：`LCTF{Y0ur_fl4g_1s_wr0ng}`  
虽然很像假的flag，但其实是真的…
### 想起“ Lunatic Game ”
题目提示`通关游戏即可获得Flag。`
运行程序，发现是个扫雷游戏，而且每次雷的分布不一样。
在IDA中通过字符串引用，找到最终通关时调用的函数`sub_4023C8`，其中除了打印`You
win`之外，还会调用一个函数输出flag，不过看起来比较复杂。
可以尝试在动态运行时强制把程序指针指过来，不过我怕环境会出问题，就patch了进入通关函数的check，即把`sub_4021AC`函数返回后的jz改为jnz，这样即使没有扫完全部雷也能通关。
然后运行游戏，扫一个雷即可通关，拿到一个flag`LCTF{789289911111261171108678}`，提交就过了……
### MSP430
MSP430架构，IDA`Processor Type`改为`MSP430`。（但是IDA7.0打不开，只有6.8能打开，不知为何）
从保留的符号信息中可以看到`enc_flag`，`RC4`，`keygen`等，猜测就是生成了一个key，然后对flag进行RC4加密最后输出。
从main函数看起：
    .text:0000C000 main:     
    .text:0000C000          
    .text:0000C000                 decd.w  SP
    .text:0000C002                 mov.w   #5A80h, &120h
    .text:0000C008                 clr.b   &56h
    .text:0000C00C                 mov.b   &10FFh, &57h
    .text:0000C012                 mov.b   &10FEh, &56h
    .text:0000C018                 bis.b   #41h, &22h
    .text:0000C01E                 bis.b   #41h, &21h
    .text:0000C024                 call    #serial_init
    .text:0000C028                 mov.w   #3A6h, R12
    .text:0000C02C                 call    #keygen
    .text:0000C030                 clr.w   &index
    .text:0000C034                 jmp     $C$L12
其中比较关键的是keygen函数，传入的3A6即为key的地址：
    .text:0000C296 keygen:  
    .text:0000C296      
    .text:0000C296                 and.b   #0C0h, &2Ah
    .text:0000C29C                 bis.b   #3Fh, &2Fh
    .text:0000C2A2                 mov.b   &28h, R15
    .text:0000C2A6                 mov.b   R15, R13
    .text:0000C2A8                 mov.w   R13, R14
    .text:0000C2AA                 rla.w   R14
    .text:0000C2AC                 add.w   R14, R13
    .text:0000C2AE                 mov.b   R13, 4(R12)
    .text:0000C2B2                 mov.w   R15, R14
    .text:0000C2B4                 rla.b   R14
    .text:0000C2B6                 mov.b   R14, 5(R12)
    .text:0000C2BA                 mov.w   R15, R14
    .text:0000C2BC                 and.b   #74h, R14
    .text:0000C2C0                 rla.b   R14
    .text:0000C2C2                 mov.b   R14, 6(R12)
    .text:0000C2C6                 add.b   #50h, R15
    .text:0000C2CA                 mov.b   R15, 7(R12)
这里根据一个&28地址的值，生成了key的后4个byte。这个地址的值我没有找到，不过可能性不多，之后可以穷举所有可能值。只是key前4个byte还不知道。
不过数据段中可以看到：
    .cinit:0000C408                 .byte  4Ch ; L
    .cinit:0000C409                 .byte  43h ; C
    .cinit:0000C40A                 .byte  54h ; T
    .cinit:0000C40B                 .byte  46h ; F
    .cinit:0000C40C                 .byte  30h ; 0
    .cinit:0000C40D                 .byte  30h ; 0
    .cinit:0000C40E                 .byte  30h ; 0