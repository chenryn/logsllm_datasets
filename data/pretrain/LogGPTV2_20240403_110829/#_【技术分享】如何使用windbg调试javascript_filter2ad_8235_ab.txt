    00007fff`c8e658a4 c3              ret
这一次我们使用正则表达式来对所有包含“open”关键字的API进行下断
    0:000> bm msxml3!*Open*
    1: 00007fff`8dc43030 @!"msxml3!ErrorHelper::CHTMLWindow2::open"
    breakpoint 1 redefined
    1: 00007fff`8dc43030 @!"msxml3!FakeHTMLDoc::open"
    2: 00007fff`8dd4c5fc @!"msxml3!HTTPStream::OpenRequest"
    3: 00007fff`8dcaa407 @!"msxml3!_imp_load_CertOpenStore"
    breakpoint 1 redefined
    1: 00007fff`8dc43030 @!"msxml3!ErrorHelper::CHTMLWindow2::get_opener"
    4: 00007fff`8dc48eb4 @!"msxml3!ContentModel::openGroup"
    5: 00007fff`8dd4cb00 @!"msxml3!HTTPStream::deferedOpen"
    breakpoint 1 redefined
    1: 00007fff`8dc43030 @!"msxml3!ErrorHelper::CHTMLDocument2::open"
    breakpoint 1 redefined
    1: 00007fff`8dc43030 @!"msxml3!ErrorHelper::CHTMLWindow2::put_opener"
    6: 00007fff`8dd4a050 @!"msxml3!URLMONRequest::open"
    7: 00007fff`8dc8f4d0 @!"msxml3!FileStream::deferedOpen"
    8: 00007fff`8dd34e80 @!"msxml3!XMLHttp::open"
    9: 00007fff`8dc597e0 @!"msxml3!URLMONStream::deferedOpen"
    10: 00007fff`8dc70ddc @!"msxml3!NamespaceMgr::popEntry"
    11: 00007fff`8dcaa3bf @!"msxml3!_imp_load_WinHttpOpen"
    12: 00007fff`8dcaa3e3 @!"msxml3!_imp_load_WinHttpOpenRequest"
    13: 00007fff`8dd47340 @!"msxml3!HTTPRequest::open"
    14: 00007fff`8dd47660 @!"msxml3!HTTPRequest::openWithCredentials"
    15: 00007fff`8dc8f37c @!"msxml3!FileStream::open"
    16: 00007fff`8dd4c128 @!"msxml3!URLStream::OpenPreloadResource"
    17: 00007fff`8dd4b410 @!"msxml3!URLRequest::open"
    0:000> g
    Breakpoint 8 hit
    msxml3!XMLHttp::open:
    00007fff`8dd34e80 488bc4          mov     rax,rsp
可以看到调用的API实际上是XMLHttp::open()因此可以进一步获得参数
    0:000> du rdx
    00000173`311a0568  "GET"
    0:000> du r8
    00000173`311a0578  "http://blog.talosintelligence.co"
    00000173`311a05b8  "m"
**案例学习#4 Eval()方法**
Eval()方法经常被恶意软件作者用来执行代码。这个方法是javascript的原生方法不需要引入外部库。下面是一个使用eval()方法的例子
    var test = "var oShell = new ActiveXObject("Shell.Application");
    var commandtoRun = "notepad.exe"; 
    oShell.ShellExecute(commandtoRun,"","","","1");"
    eval(test) 
    var encoded = "dmFyIG9TaGVsbCA9IG5ldyBBY3RpdmVYT2JqZWN0KCJTaGVsbC5BcHBsaWNhdGlvbiIpO3ZhciBjb21tYW5kdG9SdW4gPSAiY2FsYy5leGUiOyBvU2hlbGwuU2hlbGxFeGVjdXRlKGNvbW1hbmR0b1J1biwiIiwiIiwiIiwiMSIpOwo="
    eval(Base64.decode(encoded))
这段脚本执行了两个不同的eval()调用。第一个直接通过字符串进行调用调用calc.exe即计算器第二个包含了一小段代码这段代码生成要执行的命令命令为64位编码后的notepad.exe即记事本。
eval()方法本身位于script.dll库在jscript!JsEval处下断点。这个方法使用了jscript!COleScript::Compile
API来生成通过eval()执行的javascript命令
    0:000> sxe ld jscript;g
    ModLoad: 00007fff`9e650000 00007fff`9e70c000   C:WindowsSystem32jscript.dll
    ntdll!NtMapViewOfSection+0x14:
    00007fff`c8e658a4 c3              ret
    0:000> bp jscript!JsEval
    0:000> g
    Breakpoint 0 hit
    jscript!JsEval:
    00007fff`9e681960 488bc4          mov     rax,rsp
    0:000> u rip L50
    jscript!JsEval:
    00007fff`9e681960 488bc4          mov     rax,rsp
    00007fff`9e681963 48895810        mov     qword ptr [rax+10h],rbx
    00007fff`9e681967 48897018        mov     qword ptr [rax+18h],rsi
    00007fff`9e68196b 48897820        mov     qword ptr [rax+20h],rdi
    [...redacted…]
    00007fff`9e681a81 488364242000    and     qword ptr [rsp+20h],0
    00007fff`9e681a87 e80c3cfdff      call    jscript!COleScript::Compile
    00007fff`9e681a8c 89455f          mov     dword ptr [rbp+5Fh],eax
    00007fff`9e681a8f 8bf8            mov     edi,eax
    00007fff`9e681a91 85c0            test    eax,eax
    00007fff`9e681a93 7923            jns     jscript!JsEval+0x158 (00007fff`9e681ab8)
我们可以在jscript!COleScript::Compile处下断来获得调用计算器的命令以及base64编码过用来调用notepad.exe的命令
    0:000> bp jscript!COleScript::Compile "r $t1 = poi(rdx+0x10);r $t2 = poi($t1+0x8);du $t2;g";g
    jscript!COleScript::Compile:
    00007fff`9e715698 4053            push    rbx
    0:000> g
    0000019b`d23f6408  "var oShell = new ActiveXObject(""
    0000019b`d23f6448  "Shell.Application");var commandt"
    0000019b`d23f6488  "oRun = "calc.exe"; oShell.ShellE"
    0000019b`d23f64c8  "xecute(commandtoRun,"","","","1""
    0000019b`d23f6508  ");."
    80070002 The system cannot find the file specified.
    0000019b`d473a1b0  "var oShell = new ActiveXObject(""
    0000019b`d473a1f0  "Shell.Application");var commandt"
    0000019b`d473a230  "oRun = "notepad.exe"; oShell.She"
    0000019b`d473a270  "llExecute(commandtoRun,"","","","
    0000019b`d473a2b0  ""1");"
    ntdll!NtTerminateProcess+0x14:
    00007fff`c8e65924 c3              ret
**  
**
**总结**
****
Windbg是非常强大的工具它不仅可以用来帮助分析.NET文件也可以用来理解javascript代码是如何通过wscript.exe执行的。使用windbg进行调试可以提供不同的功能性概述便于复杂javascript的分析
附:获得对象所在库的python脚本
    from _winreg import *
    import sys
    try:
      objectName = sys.argv[1]
    except:
      sys.exit(1)
    try:
      hReg = ConnectRegistry(None,HKEY_CLASSES_ROOT)
      hCLSIDKey = OpenKey(hReg, objectName+"CLSID")
      CLSID=QueryValue(hCLSIDKey, "")
      if CLSID:
        hKey = OpenKey(hReg, "CLSID\"+CLSID)
        description = QueryValue(hKey, "")
        hKey = OpenKey(hReg, "CLSID\"+CLSID+"\InProcServer32")
        dll = QueryValueEx(hKey, "")[0]
        print "Object Name: "+objectName
        print "CLSID: "+CLSID
        print "Description: "+description
        print "dll: "+dll
      else:
        print "No CLSID"
    except:
      print "Error"
      sys.exit(2)