---
author: Ulia Evans
category: 系统运维
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5717
date: '2021-12-05 19:26:00'
editorchoice: false
excerpt: 在这篇文章中，我打算不谈 dig 的大部分选项，只谈我实际使用的选项。
fromurl: https://jvns.ca/blog/2021/12/04/how-to-use-dig/
id: 14051
islctt: true
largepic: /data/attachment/album/202112/05/192530gj36ttdwz16azu6w.jpg
permalink: /article-14051-1.html
pic: /data/attachment/album/202112/05/192530gj36ttdwz16azu6w.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 在这篇文章中，我打算不谈 dig 的大部分选项，只谈我实际使用的选项。
tags:
- DNS
- dig
thumb: false
title: 如何使用 dig
titlepic: true
translator: wxy
updated: '2021-12-05 19:26:00'
---
![](/data/attachment/album/202112/05/192530gj36ttdwz16azu6w.jpg)
你好！最近我和几个朋友聊天，他们提到希望知道如何使用 `dig` 来进行 DNS 查询，所以这是一篇关于它的速读博文。
当我第一次使用 `dig` 时，我发现它有点吓人 —— 有这么多的选项！我打算把大部分的选项省略。在这篇文章中，我打算不谈 `dig` 的大部分选项，只谈我实际使用的选项。
我最近还了解到，你可以设置一个 `.digrc` 配置文件，让它的输出更容易阅读，这让它的使用变得更加轻松。
几年前我还画了一个关于 `dig` 的 [zine 页](https://wizardzines.com/comics/dig/)，但我想写这篇文章来包括更多的信息。
### 两种类型的 dig 参数：查询和格式化
有两种主要的参数可以传递给 `dig`：
1. 告诉 `dig` **要进行什么 DNS 查询的参数**。
2. 告诉 `dig` 如何 **格式化响应的参数**。
首先，让我们看一下查询选项。
### 主要的查询选项
你通常想控制 DNS 查询的 3 件事是：
1. **名称**（如 `jvns.ca`）。默认情况下，查询的是空名称（`.`）。
2. **DNS 查询类型**（如 `A` 或 `CNAME`）。默认是 `A`。
3. 发送查询的 **服务器**（如 `8.8.8.8`）。默认是 `/etc/resolv.conf` 中的内容。
其格式是：
```
dig @server name type
```
这里有几个例子：
* `dig @8.8.8.8 jvns.ca` 向谷歌的公共 DNS 服务器（`8.8.8.8`）查询 `jvns.ca`。
* `dig ns jvns.ca` 对 `jvns.ca` 进行类型为 `NS` 的查询。
### `-x`：进行反向 DNS 查询
我偶尔使用的另一个查询选项是 `-x`，用于进行反向 DNS 查询。下面是输出结果的样子。
```
$ dig -x 172.217.13.174
174.13.217.172.in-addr.arpa. 72888 IN PTR yul03s04-in-f14.1e100.net。
```
`-x` 不是魔术。`dig -x 172.217.13.174` 只是对 `174.13.217.172.in-addr.arpa.` 做了一个 `PTR` 查询。下面是如何在不使用 `-x’ 的情况下进行完全相同的反向 DNS 查询。
```
$ dig ptr 174.13.217.172.in-addr.arpa.
174.13.217.172.in-addr.arpa. 72888 IN PTR yul03s04-in-f14.1e100.net。
```
我总是使用 `-x`，因为它可以减少输入。
### 格式化响应的选项
现在，让我们讨论一下你可以用来格式化响应的参数。
我发现 `dig` 默认格式化 DNS 响应的方式对初学者来说是很难接受的。下面是输出结果的样子：
```
; > DiG 9.16.20 > -r jvns.ca
;; global options: +cmd
;; Got answer:
;; ->>HEADER 互联网   internet ”。它基本上只是上世纪 80、90 年代的遗物，当时还有其他网络与互联网竞争，如“ 混沌网络   chaosnet ”。
#### 方式 2：+short
这就像 `dig +noall +answer`，但更短：它只显示每条记录的内容。比如说：
```
$ dig +short ns google.com
ns2.google.com.
ns1.google.com.
ns4.google.com.
ns3.google.com.
```
### 你可以在 `digrc` 中设置格式化选项
如果你不喜欢 `dig` 的默认格式（我就不喜欢！），你可以在你的主目录下创建一个 `.digrc` 文件，告诉它默认使用不同的格式。
我非常喜欢 `+noall +answer` 格式，所以我把 `+noall +answer` 放在我的 `~/.digrc` 中。下面是我使用该配置文件运行 `dig jvns.ca` 时的情况。
```
$ dig jvns.ca
jvns.ca.        255在172.64.80.1中
```
这样读起来就容易多了！
如果我想回到所有输出的长格式（我有时会这样做，通常是因为我想看响应的权威部分的记录），我可以通过运行再次得到一个长答案。
```
$ dig +all jvns.ca
```
### dig +trace
我使用的最后一个 `dig` 选项是 `+trace`。`dig +trace` 模仿 DNS 解析器在查找域名时的做法 —— 它从根域名服务器开始，然后查询下一级域名服务器（如 `.com`），以此类推，直到到达该域名的权威域名服务器。因此，它将进行大约 30 次 DNS 查询。（我用 `tcpdump` 检查了一下，对于每个根域名服务器的 `A` / `AAAA` 记录它似乎要进行 2 次查询，所以这已经是 26 次查询了。我不太清楚它为什么这样做，因为它应该已经有了这些 IP 的硬编码，但它确实如此。）
我发现这对了解 DNS 的工作原理很有用，但我不认为我用它解决过问题。
### 为什么要用 dig
尽管有一些更简单的工具来进行 DNS 查询（如 `dog` 和 `host`），我发现自己还是坚持使用 `dig`。
我喜欢 `dig` 的地方实际上也是我 **不喜欢** `dig` 的地方 —— 它显示了大量的细节！
我知道，如果我运行 `dig +all`，它将显示 DNS 响应的所有部分。例如，让我们查询 `jvns.ca` 的一个根名称服务器。响应有 3 个部分，我可能会关心：回答部分、权威部分和附加部分。
```
$ dig @h.root-servers.net. jvns.ca +all
;; Got answer:
;; ->>HEADER
作者：[Julia Evans](https://jvns.ca/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出