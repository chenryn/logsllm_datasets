Control的值为8200，同时在帧末尾注入恶意的A-MSDU子帧2（如下图的红色线标示），最后发送给接收端。
![
](https://images.seebug.org/content/images/2021/05/5e3a794e-224d-412d-a296-45fe46c3c19a.png-w331s)
图6. 篡改后的802.11A-MSDU数据帧
由于QOS Control域中的A-MSDU Preset翻转为1，当接收端接收到数据帧后，会按A-MSDU格式来拆解里面的数据。数据被识别成两个A-MSDU子帧。A-MSDU子帧1中的数据是原始的MSDU数据，所以会被协议栈丢弃，但第二个子帧会被正确解析并处理。这上面的例子中第二个子帧会被识别成ICMP
ping包，接收端会回复一个ICMP echo Reply给发送端。
视频1.发送端收到ICMP echo Reply
下图示意了中间人帧注入流程：
![
](https://images.seebug.org/content/images/2021/05/0b5c1efe-153a-48a3-b47a-bc817e79ec69.png-w331s)
图7. 中间人帧注入流程
  1. STA（终端）和AP（热点/无线路由器）信道A（如信道6）, 建立关联
  2. MITM利用多信道中间人技术使得STA认为AP已经切换到信道B（如信道11）。
  3. STA在信道11给 MITM发送加密的Wifi正常数据帧。
  4. MITM将 接收到的Wifi帧QOS域的A-MSDU Preset标示设为1，同时插入篡改的A-MSDU数据。把一个正常的Wifi帧改成一个A-MSDU帧，并注入一个ICMP请求包，并在通道6发给AP。
  5. AP接收到A-MSDU数据帧，AP拆解A-MSDU, 分成多个A-MSDU子帧，其中第一个A-MSDU子帧为非法包，会被丢弃，但后续的MSDU子帧会被系统正常处理。AP会回复收到一个ICMP Echo 应答给MITM.
  6. MITM收到AP的回复后，将接收到的WIFI帧转发给STA，这样STA收到AP回复的ICMP应答。
#### CVE-2020-24588的修复
今年3月Windows发布了相应的补丁，修复了FragAttacks系列漏洞，5月11日Linux也发布了FragAttacks系列漏洞补丁[6]，Linux针对CVE-2020-24588的修复如下：
    ---     net/wireless/util.c | 3 +++
     1 file changed, 3 insertions(+)
    diff --git a/net/wireless/util.c b/net/wireless/util.c
    index 39966a873e40..7ec021a610ae 100644
    --- a/net/wireless/util.c
    +++ b/net/wireless/util.c
    @@ -771,6 +771,9 @@ void ieee80211_amsdu_to_8023s(struct sk_buff *skb, struct sk_buff_head *list,
            remaining = skb->len - offset;
            if (subframe_len > remaining)
                goto purge;
    +       /* mitigate A-MSDU aggregation injection attacks */
    +       if (ether_addr_equal(eth.h_dest, rfc1042_header))
    +           goto purge;
            offset += sizeof(struct ethhdr);
            last = remaining   
2.  
3.  
4.  
5.
* * *