---
author: Keyur Paralkar
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2656
date: '2023-07-10 10:29:00'
editorchoice: false
excerpt: 使用 Python 制作一个 API 来监控你的树莓派硬件，并使用 Appsmith 建立一个仪表盘。
fromurl: https://opensource.com/article/23/3/build-raspberry-pi-dashboard-appsmith
id: 15984
islctt: true
largepic: /data/attachment/album/202307/10/102705vfe3pb0wbqnf0see.jpg
permalink: /article-15984-1.html
pic: /data/attachment/album/202307/10/102705vfe3pb0wbqnf0see.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 使用 Python 制作一个 API 来监控你的树莓派硬件，并使用 Appsmith 建立一个仪表盘。
tags:
- 监控
- 仪表盘
thumb: false
title: 在不到 30 分钟内构建一个树莓派监控仪表盘
titlepic: true
translator: ChatGPT
updated: '2023-07-10 10:29:00'
---
![](/data/attachment/album/202307/10/102705vfe3pb0wbqnf0see.jpg)
> 
> 使用 Python 制作一个 API 来监控你的树莓派硬件，并使用 Appsmith 建立一个仪表盘。
> 
> 
> 
如果你想知道你的树莓派的性能如何，那么你可能需要一个树莓派的仪表盘。在本文中，我将演示如何快速构建一个按需监控仪表盘，以实时查看你的树莓派的 CPU 性能、内存和磁盘使用情况，并根据需要随时添加更多视图和操作。
如果你已经使用 Appsmith，你还可以直接导入 [示例应用程序](https://github.com/appsmithorg/foundry/tree/main/resources/blogs/Raspberry%20Pi%20Dashboard) 并开始使用。
### Appsmith
Appsmith 是一个开源的 [低代码](https://www.redhat.com/architect/low-code-platform?intcmp=7013a000002qLH8AAM) 应用构建工具，帮助开发人员轻松快速地构建内部应用，如仪表盘和管理面板。它是一个用于仪表盘的很好选择，并减少了传统编码方法所需的时间和复杂性。
在此示例的仪表盘中，我显示以下统计信息：
* CPU
	+ 占用百分比
	+ 频率或时钟速度
	+ 计数
	+ 温度
* 内存
	+ 占用百分比
	+ 可用内存百分比
	+ 总内存
	+ 空闲内存
* 磁盘
	+ 磁盘使用百分比
	+ 绝对磁盘空间使用量
	+ 可用磁盘空间
	+ 总磁盘空间
### 创建一个端点
你需要一种从树莓派获取这些数据并传递给 Appsmith 的方法。[psutil](https://psutil.readthedocs.io/en/latest/) 是一个用于监控和分析的 Python 库，而 [Flask-RESTful](https://flask-restful.readthedocs.io/en/latest/) 是一个创建 [REST API](https://www.redhat.com/en/topics/api/what-is-a-rest-api?intcmp=7013a000002qLH8AAM) 的 Flask 扩展。
Appsmith 每隔几秒钟调用 REST API 以自动刷新数据，并以 JSON 对象作为响应，其中包含所有所需的统计信息，如下所示：
```
{ "cpu_count": 4,
"cpu_freq": [
600.0,
600.0,
1200.0 ],
"cpu_mem_avail": 463953920,
"cpu_mem_free": 115789824,
"cpu_mem_total": 971063296,
"cpu_mem_used": 436252672,
"cpu_percent": 1.8,
"disk_usage_free": 24678121472,
"disk_usage_percent": 17.7,
"disk_usage_total": 31307206656,
"disk_usage_used": 5292728320,
"sensor_temperatures": 52.616 }
```
#### 1、设置 REST API
如果你的树莓派尚未安装 Python，请在树莓派上打开终端并运行此安装命令：
```
$ sudo apt install python3
```
现在为你的开发设置一个 [Python 虚拟环境](https://opensource.com/article/20/10/venv-python)：
```
$ python -m venv PiData
```
接下来，激活该环境。你必须在重新启动树莓派后执行此操作。
```
$ source PiData/bin/activate
$ cd PiData
```
为了安装 Flask、Flask-RESTful 和以后需要的依赖项，请在你的 Python 虚拟环境中创建一个名为 `requirements.txt` 的文件，并将以下内容添加到其中：
```
flask
flask-restful
gunicorn
```
保存文件，然后使用 `pip` 一次性安装它们。你必须在重新启动树莓派后执行此操作。
```
(PyData)$ python -m pip install -r requirements.txt
```
接下来，创建一个名为 `pi_stats.py` 的文件来存放使用 `psutil` 检索树莓派系统统计信息的逻辑。将以下代码粘贴到 `pi_stats.py` 文件中：
```
from flask import Flask
from flask_restful import Resource, Api
import psutil
app = Flask(__name__)
api = Api(app)
class PiData(Resource):
    def get(self):
        return "RPI Stat dashboard"
api.add_resource(PiData, '/get-stats')
if __name__ == '__main__':
    app.run(debug=True)
```
这段代码的作用如下：
* 使用 `app = Flask(name)` 来定义嵌套 API 对象的应用程序。
* 使用 Flask-RESTful 的 [API 方法](https://flask-restful.readthedocs.io/en/latest/api.html#id1) 来定义 API 对象。
* 在 Flask-RESTful 中将 `PiData` 定义为具体的 [Resource 类](https://flask-restful.readthedocs.io/en/latest/api.html#flask_restful.Resource) ，以公开每个支持的 HTTP 方法。
* 使用 `api.add_resource(PiData, '/get-stats')` 将资源 `PiData` 附加到 API 对象 `api`。
* 每当你访问 URL `/get-stats` 时，将返回 `PiData` 作为响应。
#### 2、使用 psutil 读取统计信息
要从你的树莓派获取统计信息，你可以使用 `psutil` 提供的这些内置函数：
* `cpu_percentage`、`cpu_count`、`cpu_freq` 和 `sensors_temperatures` 函数分别用于获取 CPU 的占用百分比、计数、时钟速度和温度。`sensors_temperatures` 报告了与树莓派连接的所有设备的温度。要仅获取 CPU 的温度，请使用键 `cpu-thermal`。
* `virtual_memory` 函数可返回总内存、可用内存、已使用内存和空闲内存的统计信息（以字节为单位）。
* `disk_usage` 函数可返回总磁盘空间、已使用空间和可用空间的统计信息（以字节为单位）。
将所有函数组合到一个 Python 字典中的示例如下：
```
system_info_data = {
'cpu_percent': psutil.cpu_percent(1),
'cpu_count': psutil.cpu_count(),
'cpu_freq': psutil.cpu_freq(),
'cpu_mem_total': memory.total,
'cpu_mem_avail': memory.available,
'cpu_mem_used': memory.used,
'cpu_mem_free': memory.free,
'disk_usage_total': disk.total,
'disk_usage_used': disk.used,
'disk_usage_free': disk.free,
'disk_usage_percent': disk.percent,
'sensor_temperatures': psutil.sensors_temperatures()['cpu-thermal'][0].current,
}
```
下一节将使用该字典。
#### 3、从 Flask-RESTful API 获取数据
为了在 API 响应中看到来自树莓派的数据，请更新 `pi_stats.py` 文件，将字典 `system_info_data` 包含在 `PiData` 类中：
```
from flask import Flask
from flask_restful import Resource, Api
import psutil
app = Flask(__name__)
api = Api(app)
class PiData(Resource):
    def get(self):
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        system_info_data = {
            'cpu_percent': psutil.cpu_percent(1),
            'cpu_count': psutil.cpu_count(),
            'cpu_freq': psutil.cpu_freq(),
            'cpu_mem_total': memory.total,
            'cpu_mem_avail': memory.available,
            'cpu_mem_used': memory.used,
            'cpu_mem_free': memory.free,
            'disk_usage_total': disk.total,
            'disk_usage_used': disk.used,
            'disk_usage_free': disk.free,
            'disk_usage_percent': disk.percent,
            'sensor_temperatures': psutil.sensors_temperatures()['cpu-thermal'][0].current, }
    return system_info_data
api.add_resource(PiData, '/get-stats')
if __name__ == '__main__':
    app.run(debug=True)
```
你的脚本已经就绪，下面运行 `PiData.py`：
```
$ python PyData.py
 * Serving Flask app "PiData" (lazy loading)
 * Environment: production
 WARNING: This is a development server. Do not run this in a production environment.
 * Debug mode: on
 * Running on http://127.0.0.1:5000 (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
```
你有了一个可以工作的 API。
#### 4、将 API 提供给互联网
你可以在本地网络中与 API 进行交互。然而，要在互联网上访问它，你必须在防火墙中打开一个端口，并将传入的流量转发到由 Flask 提供的端口。然而，正如你的测试输出建议的那样，在 Flask 中运行 Flask 应用程序仅适用于开发，而不适用于生产。为了安全地将 API 提供给互联网，你可以使用安装过程中安装的 `gunicorn` 生产服务器。
现在，你可以启动 Flask API。每次重新启动树莓派时都需要执行此操作。
```
$ gunicorn -w 4 'PyData:app'
Serving on http://0.0.0.0:8000
```
要从外部世界访问你的树莓派，请在网络防火墙中打开一个端口，并将流量定向到你树莓派的 IP 地址，端口为 8000。
首先，获取树莓派的内部 IP 地址：
```
$ ip addr show | grep inet
```
内部 IP 地址通常以 10 或 192 或 172 开头。
接下来，你必须配置防火墙。通常，你从互联网服务提供商（ISP）获取的路由器中嵌入了防火墙。通常，你可以通过网络浏览器访问家用路由器。路由器的地址有时会打印在路由器的底部，它以 192.168 或 10 开头。不过，每个设备都不同，因此我无法告诉你需要点击哪些选项来调整设置。关于如何配置防火墙的完整描述，请阅读 Seth Kenlon 的文章 《[打开端口并通过你的防火墙路由流量](https://opensource.com/article/20/9/firewall)》。