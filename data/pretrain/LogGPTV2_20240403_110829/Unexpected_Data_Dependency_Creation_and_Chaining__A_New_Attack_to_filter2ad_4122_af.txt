different controllers usually have an overlap. As a result, users
don’t have to replace the whole list of sensitive methods to
scale to a new controller.
VIII. RELATED WORK
Security Vulnerabilities of SDN. Recently, researchers
have discovered many security issues in SDN. Existing SDN
attack research can be generally classiﬁed into two categories:
attacks launching from the data plane and attacks launching
from the control plane. The ﬁrst category of research [34],
[39], [20], [19], [35], [42] demonstrated that it is possible to in-
troduce serious security and reliability issues to SDN networks
by controlling a data plane device, e.g., switches or hosts.
For example, ConGuard [42] found that a malicious network
device/host can remotely exploit harmful race conditions in
the control plane to introduce several different attack effects.
Different from the previous work, we discovered a new type of
control plane vulnerabilities which can be remotely exploited
by creating malicious data dependencies.
In the second category of research [16], [37], a malicious
(but underprivileged) control plane application (app) might
introduce signiﬁcant risks to the control plane regardless of the
security policies that have been enforced into SDN application
management. For instance, ProvSDN [37] discovered and
mitigated the CAP (Cross-App Poisoning) attack, which is
a powerful attack that can bypass SDN role-based access
control to poison the control plane integrity with malicious
SDN applications. Different from the attacks in the second
categories that need a malicious app to be installed in the
control plane, the D2C2 attack can be launched remotely from
the data plane. More importantly, the D2C2 attack creates
new data dependencies in an unexpected way to establish new
attack paths towards the sensitive methods hidden deep in the
control plane.
Security Enhancements in SDN. To mitigate potential
vulnerabilities and attacks in SDN, researchers also developed
new security applications/enhancements. For example, SE-
FloodLight [29] achieved the detection and reconciliation of
conﬂicting ﬂow rules from different control applications by in-
troducing a security enforcement kernel. However, as we have
demonstrated, the security-enhanced controllers are not able
to mitigate the D2C2 attack due to their inabilities to detect
the creations of malicious data dependencies. Researchers also
developed tools to identify malicious applications or behaviors
in the control plane. INDAGO [24] introduced a static analysis
framework to detect malicious SDN applications by extract-
ing and classifying semantic features in these applications.
SHIELD [23] also leveraged a static analysis approach to
categorize several malicious behaviors of SDN applications.
Since D2C2 attacks do not require any malicious applications
to be installed, these enhancements are not suitable for the
D2C2 attack detection.
SDN Testing and Auditing. Researchers also developed
tools to help detect potential SDN bugs/vulnerabilities. One
popular approach is to leverage fuzzing techniques to fa-
cilitate SDN bug discovery [25], [21], [30]. For example,
BEADS [21] proposed a protocol fuzzer for SDN networks
that identiﬁes potential risks in the protocol handling logic
within the control channel. However, all of them took a
black box approach which is incapable of performing ﬁne-
grained data ﬂow analysis in order to detect
the critical
creations of potentially malicious data dependencies needed
by the D2C2 attack. Another widely used methodology is
data/control ﬂow analysis. Many existing studies
[40], [24],
[37], [23] also leveraged static program analysis techniques
(e.g., taint analysis) to pinpoint potential vulnerable data ﬂow
or control ﬂows. For example, CAP attacks [37] leveraged data
ﬂow analysis to study the data sharing relationships between
different control plane applications. It is noteworthy that, while
SVHunter employs a similar methodology to perform data ﬂow
analysis like previous work [37], [40], it possesses a different
analysis goal, which is to identify existing data dependencies
that are vulnerable to the unique data poisoning strategy of
the D2C2 attack.
IX. CONCLUSION
In this work, we approach the vulnerability analysis problem
of SDN networks from a new angle. We present a new attack
that leverage legitimate protocol interactions to abuse sensitive
methods in multiple SDN control plane components. The
signiﬁcance of this work is indicated by two critical indicators.
The ﬁrst indicator is a new discovery: a new kind of attack is
discovered. With the new attack, attackers can achieve greater
control plane reachability, which results in a much larger
SDN attack surface. The enlarged attack surface leads to the
discovery of 18 zero-day SDN vulnerabilities, all of which can
be exploited remotely to introduce serious attack effects to the
control plane. The second indicator is SVHunter, a one-of-a-
kind tool which can effectively identify the newly discovered
D2C2 vulnerabilities and construct the corresponding exploit
chains. The tool combines data ﬂow backtracking, an event
reasoning language used to formally specify the preconditions
and postconditions of data dependency chaining events, and
automated causality reasoning.
ACKNOWLEDGEMENT
We would like to thank our paper shepherd David Choffnes
and the anonymous reviewers, for their insightful feedback
that helped shape the ﬁnal version of this paper. This work
was supported in part by ARO W911NF-13-1-0421 (MURI),
W911NF-15-1-0576, ONR N00014-16-1-2265, N00014-16-1-
2912, N00014-17-1-2894, NSF CNS-1814679, CNS-1652790,
1617985, 1642129, 1700544, and 1740791.
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1524
REFERENCES
[1] ANTLR tool, http://www.antlr.org.
[2] CVE-2016-2074: Open vSwitch Buffer Overﬂow, https://nvd.nist.gov/
vuln/detail/CVE-2016-2074.
[3] CVE-2017-3881: Cisco Catalyst Remote Code Execution, https://nvd.
nist.gov/vuln/detail/CVE-2017-3881.
[4] HPE VAN SDN Controller,
https://h17007.www1.hpe.com/ie/en/
\networking/solutions/technology/sdn.
[5] Huawei
Agile
Controller,
https://e.huawei.com/us/products/
enterprise-networking/sdn-controller.
[6] “Mininet: Rapid prototyping for software deﬁned networks,” http://yuba.
stanford.edu/foswiki/bin/view/OpenFlow/.
[7] “Onos controller platform,” https://onosproject.org/.
[8] OpenDaylight
Support.,
//wiki.opendaylight.org/view/OpenDaylight OpenFlow Plugin:
TLS Support.
OpenFlow
Plugin:
TLS
[9] OpenFlow
and
Conﬁguration.,
//ﬂoodlight.atlassian.net/wiki/spaces/ﬂoodlightcontroller/pages/
5636115/OpenFlow+and+REST+API+Security+Conﬁguration.
Security
REST
API
https:
https:
[10] XML External Entity attack (XXE), https://en.wikipedia.org/wiki/XML
external entity attack.
[11] A. Alhuzali, R. Gjomemo, B. Eshete, and V. Venkatakrishnan,
“{NAVEX}: Precise and scalable exploit generation for dynamic web
applications,” in 27th {USENIX} Security Symposium ({USENIX} Se-
curity 18), 2018, pp. 377–392.
[12] W. Braun and M. Menth, “Software-deﬁned networking using openﬂow:
Protocols, applications and architectural design choices,” Future Inter-
net, vol. 6, no. 2, pp. 302–336, 2014.
[13] J. Cao, Q. Li, R. Xie, K. Sun, G. Gu, M. Xu, and Y. Yang, “The
crosspath attack: Disrupting the sdn control channel via shared links,”
in Proceedings of The 28th USENIX Security Symposium (Security’19),
August 2019.
[14] B. Chandrasekaran and T. Benson, “Tolerating sdn application failures
with legosdn,” in Proceedings of the 13th ACM workshop on hot topics
in networks. ACM, 2014, p. 22.
[15] L. De Moura and N. Bjørner, “Z3: An efﬁcient smt solver,” in Inter-
national conference on Tools and Algorithms for the Construction and
Analysis of Systems. Springer, 2008, pp. 337–340.
[16] V. H. Dixit, A. Doup´e, Y. Shoshitaishvili, Z. Zhao, and G.-J. Ahn,
“Aim-sdn: Attacking information mismanagement in sdn-datastores,” in
Proceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2018, pp. 664–676.
[17] N. Feamster, J. Rexford, and E. Zegura, “The road to sdn: an intel-
lectual history of programmable networks,” ACM SIGCOMM Computer
Communication Review, vol. 44, no. 2, pp. 87–98, 2014.
[18] E. Haleplidis, K. Pentikousis, S. Denazis, J. H. Salim, D. Meyer,
and O. Koufopavlou, “Software-deﬁned networking (sdn): Layers and
architecture terminology,” Tech. Rep., 2015.
[19] S. Hong, L. Xu, H. Wang, and G. Gu, “Poisoning network visibility
in software-deﬁned networks: New attacks and countermeasures,” in
Proceedings of the 22th Annual Network and Distributed System Security
Symposium (NDSS), February 2015.
[20] S. Jero, W. Koch, R. Skowyra, H. Okhravi, C. Nita-Rotaru, and
D. Bigelow, “Identiﬁer binding attacks and defenses in software-deﬁned
networks,” in Proceeding of
the 24th USENIX Security Symposium
(USENIX Security), August 2017.
[21] S. Jero, X. Bu, C. Nita-Rotaru, H. Okhravi, R. Skowyra, and S. Fahmy,
“Beads: automated attack discovery in openﬂow-based sdn systems,”
in International Symposium on Research in Attacks, Intrusions, and
Defenses. Springer, 2017, pp. 311–333.
[22] P. Lam, E. Bodden, O. Lhotak, and L. Hendren, “The soot framework
for java program analysis: a retrospective,” in CETUS 2011.
[23] C. Lee and S. Shin, “Shield: an automated framework for static analysis
of sdn applications,” in Proceedings of the 2016 ACM International
Workshop on Security in Software Deﬁned Networks & Network Func-
tion Virtualization. ACM, 2016, pp. 29–34.
[24] C. Lee, C. Yoon, S. Shin, and S. K. Cha, “Indago: A new framework for
detecting malicious sdn applications,” in 2018 IEEE 26th International
Conference on Network Protocols (ICNP).
IEEE, 2018, pp. 220–230.
[25] S. Lee, C. Yoon, C. Lee, S. Shin, V. Yegneswaran, and P. Porras, “Delta:
A security assessment framework for software-deﬁned networks,” in
Proceedings of The 2017 Network and Distributed System Security
Symposium (NDSS), February 2017.
[26] S. Liu, M. K. Reiter, and V. Sekar, “Flow reconnaissance via timing
attacks on sdn switches,” in 2017 IEEE 37th International Conference
IEEE, 2017, pp. 196–206.
on Distributed Computing Systems (ICDCS).
[27] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson,
J. Rexford, S. Shenker, and J. Turner, “Openﬂow: enabling innovation in
campus networks,” ACM SIGCOMM Computer Communication Review,
vol. 38, no. 2, pp. 69–74, 2008.
[28] J. Newsome and D. X. Song, “Dynamic taint analysis for automatic
detection, analysis, and signaturegeneration of exploits on commodity
software.” in NDSS, vol. 5. Citeseer, 2005, pp. 3–4.
[29] P. Porras, S. Cheung, M. Fong, K. Skinner, and V. Yegneswaran,
“Securing the Software-Deﬁned Network Control Layer,” in NDSS’15,
2015.
[30] C. Scott, A. Wundsam, B. Raghavan, A. Panda, A. Or, J. Lai, E. Huang,
Z. Liu, A. El-Hassany, S. Whitlock et al., “Troubleshooting blackbox
sdn control software with minimal causal sequences,” ACM SIGCOMM
Computer Communication Review, vol. 44, no. 4, pp. 395–406, 2015.
[31] K. Sen and G. Agha, “Cute and jcute: Concolic unit testing and explicit
path model-checking tools,” in International Conference on Computer
Aided Veriﬁcation. Springer, 2006, pp. 419–423.
[32] S. Sezer, S. Scott-Hayward, P. K. Chouhan, B. Fraser, D. Lake,
J. Finnegan, N. Viljoen, M. Miller, and N. Rao, “Are we ready for
sdn? implementation challenges for software-deﬁned networks,” IEEE
Communications Magazine, vol. 51, no. 7, pp. 36–43, 2013.
[33] U. Shankar, K. Talwar, J. S. Foster, and D. A. Wagner, “Detecting
format string vulnerabilities with type qualiﬁers.” in USENIX Security
Symposium, 2001, pp. 201–220.
[34] S. Shin, V. Yegneswaran, P. Porras, and G. Gu, “Avant-guard: Scalable
and vigilant switch ﬂow management in software-deﬁned networks,” in
Proceedings of the 20th ACM Conference on Computer and Communi-
cations Security (CCS), November 2013.
[35] R. Skowyra, L. Xu, G. Gu, V. Dedhia, T. Hobson, H. Okhravi,
and J. Landry, “Effective topology tampering attacks and defenses in
software-deﬁned networks,” in 2018 48th Annual IEEE/IFIP Interna-
tional Conference on Dependable Systems and Networks (DSN).
IEEE,
2018, pp. 374–385.
[36] K. Thimmaraju, B. Shastry, T. Fiebig, F. Hetzelt, J.-P. Seifert, A. Feld-
mann, and S. Schmid, “Taking control of sdn-based cloud systems via
the data plane,” in Proceedings of the Symposium on SDN Research.
ACM, 2018, p. 1.
[37] B. E. Ujcich, S. Jero, A. Edmundson, Q. Wang, R. Skowyra, J. Landry,
A. Bates, W. H. Sanders, C. Nita-Rotaru, and H. Okhravi, “Cross-app
poisoning in software-deﬁned networking,” in Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2018, pp. 648–663.
[38] W. Visser, C. S. Psreanu, and S. Khurshid, “Test input generation with
java pathﬁnder,” ACM SIGSOFT Software Engineering Notes, vol. 29,
no. 4, pp. 97–107, 2004.
[39] H. Wang, L. Xu, and G. Gu, “Floodguard: A dos attack prevention
extension in software-deﬁned networks,” in Proceedings of the 45th
Annual IEEE/IFIP International Conference on Dependable Systems and
Networks (DSN), June 2015.
[40] H. Wang, G. Yang, P. Chinprutthiwong, L. Xu, Y. Zhang, and G. Gu,
“Towards ﬁne-grained network security forensics and diagnosis in the
sdn era,” in Proc. of the 25th ACM Conference on Computer and
Communications Security (CCS’18), October 2018.
[41] T. Wang, T. Wei, G. Gu, and W. Zou, “Taintscope: A checksum-aware
directed fuzzing tool for automatic software vulnerability detection,” in
Security and privacy (SP), 2010 IEEE symposium on.
IEEE, 2010, pp.
497–512.
[42] L. Xu, J. Huang, S. Hong, J. Zhang, and G. Gu, “Attacking the brain:
Races in the sdn control plane,” in Proceedings of The 26th USENIX
Security Symposium (Usenix Security), August 2017.
[43] Y. Zheng, X. Zhang, and V. Ganesh, “Z3-str: A z3-based string solver for
web application analysis,” in Proceedings of the 2013 9th Joint Meeting
on Foundations of Software Engineering. ACM, 2013, pp. 114–124.
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1525
APPENDIX
OBSERVATIONS OF IDENTIFIED POISONING EVENTS
TABLE VII
Controller
Event #
Observation
A1
A2
A3
A4
A5
A6
A7
A8
A9
if proto msg::NetconfAlarmProvider→read var#56 then (fs::.→read var#56) | | (net state::root→read var#56)
if proto msg::NetConfControllerConﬁg→read var#1 then (fs::.→read var#1) | | (net state::root→read var#1)
if proto msg::OFFeatureReply.mfrDesc→read var#53 then net state::root→write var#53
if proto msg::VersionNum→read var#68 then net state::ovsdb→crash var#68
if net state::root.applications.upload→write var#9 then fs::.→write var#49
if net state::root.models→write var#12 then fs::.→write var#12
if fs::bin.onos-node-diagnostics→read var#51 then net state::.→write var#51
if net state::root.topo→read var#73 then net state::topology→read var#73
if fs::model.jar→read var#64 then net state::.→write var#64
A10
if net state::root.ﬂows.deviceid→read var#24 then net state::ﬂowRules→write var#24
B1
B2
B3
B4
C1
C2
C3
D1
D2
D3
if proto msg::OFFeatureReply.mfrDesc→read var#1 then net state::.→write var#1
if proto msg::OFFeatureReply.SwitchDescription→read var#2 then net state::Forwarding→crash var#2
if net state::wm.staticﬂowentrypusher.json→write var#11 then net state::ﬂow→write var#11
if net state::wm.device.all.json→read var#17 then net state::device→read var#17
if proto msg::getPortName→read var#5 then net state::PortID→write var#5
if proto msg::LLDP→read var#7 then net state::AlivenessProtocolHandlerLLDP→crash var#7
if net state::PortID→read var#8 then db::.→crash var#8
if proto msg::OFFeaturesReply→read var#7 then net state::root.wm.core.switch.switchId.statType.json→write var#7
if net state::root.wm.core.switch.switchId.statType.json→write var#9 then net state::.→write var#9
if net state::wm.staticﬂowentrypusher.json→write var#11 then net state::ﬂow→write var#11
ONOS
Floodlight
OpenDaylight
SE-Floodlight
CUSTOM FIELDS SUPPORTED BY EXPLOIT ENGINE
TABLE VIII
Protocol Name
Message Name
Field Name
OpenFlow
MultipartRes
MultipartRes
MultipartRes
MultipartRes
MultipartRes
FeatureRes::phy port
mfr desc
sw desc
serial num
dp desc
hw desc
name
NetConf
Notiﬁcation
event
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1526