sizeof(long double));
return 0;
}
sizeof是C语言的内置运算符，以字节为单位给出指定类型的大小。C99
和C11提供%zd转换说明匹配sizeof的返回类型[2]。一些不支持C99和C11的
编译器可用%u或%lu代替%zd。
该程序的输出如下：
Type int has a size of 4 bytes.
Type char has a size of 1 bytes.
Type long has a size of 8 bytes.
155
Type long long has a size of 8 bytes.
Type double has a size of 8 bytes.
Type long double has a size of 16 bytes.
该程序列出了6种类型的大小，你也可以把程序中的类型更换成感兴趣
的其他类型。注意，因为C语言定义了char类型是1字节，所以char类型的大
小一定是1字节。而在char类型为16位、double类型为64位的系统中，sizeof
给出的double是4字节。在limits.h和float.h头文件中有类型限制的相关信息
（下一章将详细介绍这两个头文件）。
顺带一提，注意该程序最后几行 
printf()语句都被分为两行，只要不在
引号内部或一个单词中间断行，就可以这样写。
156
3.5 使用数据类型
编写程序时，应注意合理选择所需的变量及其类型。通常，用int或float
类型表示数字，char类型表示字符。在使用变量之前必须先声明，并选择有
意义的变量名。初始化变量应使用与变量类型匹配的常数类型。例如：
int apples = 3;    /* 正确 */
int oranges = 3.0;  /* 不好的形式 */
与Pascal相比，C在检查类型匹配方面不太严格。C编译器甚至允许二次
初始化，但在激活了较高级别警告时，会给出警告。最好不要养成这样的习
惯。
把一个类型的数值初始化给不同类型的变量时，编译器会把值转换成与
变量匹配的类型，这将导致部分数据丢失。例如，下面的初始化：
int cost = 12.99;   /* 用double类型的值初始化int类型的变量 */
float pi = 3.1415926536;  /* 用double类型的值初始化float类型的变量 */
第1个声明，cost的值是12。C编译器把浮点数转换成整数时，会直接丢
弃（截断）小数部分，而不进行四舍五入。第2个声明会损失一些精度，因
为C只保证了float类型前6位的精度。编译器对这样的初始化可能给出警告。
读者在编译程序清单3.1时可能就遇到了这种警告。
许多程序员和公司内部都有系统化的命名约定，在变量名中体现其类
型。例如，用 i_前缀表示 int类型，us_前缀表示 unsigned short 类型。这样，
一眼就能看出来 i_smart 是 int 类型的变量， us_versmart是unsigned short类型
的变量。
157
3.6 参数和陷阱
有必要再次提醒读者注意 
printf()函数的用法。读者应该还记得，传递
给函数的信息被称为参数。例如，printf("Hello, 
pal.")函数调用有一个参
数："Hello,pal."。双引号中的字符序列（如，"Hello,pal."）被称为字符串
（string），第4章将详细讲解相关内容。现在，关键是要理解无论双引号中
包含多少个字符和标点符号，一个字符串就是一个参数。
与此类似，scanf("%d", 
&weight)函数调用有两个参数："%d"和
&weight。C语言用逗号分隔函数中的参数。printf()和scanf()函数与一般函数
不同，它们的参数个数是可变的。例如，前面的程序示例中调用过带一个、
两个，甚至三个参数的 
printf()函数。程序要知道函数的参数个数才能正常
工作。printf()和scanf()函数用第1个参数表明后续有多少个参数，即第1个字
符串中的转换说明与后面的参数一一对应。例如，下面的语句有两个%d转
换说明，说明后面还有两个参数：
printf("%d cats ate %d cans of tuna\n", cats, cans);
后面的确还有两个参数：cats和cans。
程序员要负责确保转换说明的数量、类型与后面参数的数量、类型相匹
配。现在，C 语言通过函数原型机制检查函数调用时参数的个数和类型是否
正确。但是，该机制对printf()和scanf()不起作用，因为这两个函数的参数个
数可变。如果参数在匹配上有问题，会出现什么情况？假设你编写了程序清
单 3.9中的程序。
程序清单3.9 badcount.c程序
/* badcount.c -- 参数错误的情况 */
#include 
int main(void)
158
{
int n = 4;
int m = 5;
float f = 7.0f;
float g = 8.0f;
printf("%d\n", n, m);  /* 参数太多 */
printf("%d %d %d\n", n); /* 参数太少 */
printf("%d %d\n", f, g); /* 值的类型不匹配 */
return 0;
}
XCode 4.6（OS 10.8）的输出如下：
4
4 1 -706337836
1606414344 1
Microsoft Visual Studio Express 2012（Windows 7）的输出如下：
4
4 0 0
0 1075576832
注意，用%d显示float类型的值，其值不会被转换成int类型。在不同的
159
平台下，缺少参数或参数类型不匹配导致的结果不同。
所有编译器都能顺利编译并运行该程序，但其中大部分会给出警告。的
确，有些编译器会捕获到这类问题，然而C标准对此未作要求。因此，计算
机在运行时可能不会捕获这类错误。如果程序正常运行，很难觉察出来。如
果程序没有打印出期望值或打印出意想不到的值，你才会检查 
printf()函数
中的参数个数和类型是否得当。
160
3.7 转义序列示例
再来看一个程序示例，该程序使用了一些特殊的转义序列。程序清单
3.10 演示了退格（\b）、水平制表符（\t）和回车（\t）的工作方式。这些概
念在计算机使用电传打字机作为输出设备时就有了，但是它们不一定能与现
代的图形接口兼容。例如，程序清单3.10在某些Macintosh的实现中就无法正
常运行。
程序清单3.10 escape.c程序
/* escape.c -- 使用转移序列 */
#include 
int main(void)
{
float salary;
printf("\aEnter your desired monthly salary:"); /* 1 */
printf(" $_______\b\b\b\b\b\b\b");        /* 2 */
scanf("%f", &salary);
printf("\n\t$%.2f a month is $%.2f a year.", salary,
salary * 12.0);              /* 3 */
printf("\rGee!\n");                /* 4 */
return 0;
}
161
3.7.1 程序运行情况
假设在系统中运行的转义序列行为与本章描述的行为一致（实际行为可
能不同。例如，XCode 4.6把\a、\b和\r显示为颠倒的问号），下面我们来分
析这个程序。
第1条printf()语句（注释中标为1）发出一声警报（因为使用了\a），然
后打印下面的内容：
Enter your desired monthly salary:
因为printf()中的字符串末尾没有\n，所以光标停留在冒号后面。
第2条printf()语句在光标处接着打印，屏幕上显示的内容是：
Enter your desired monthly salary: $_______
冒号和美元符号之间有一个空格，这是因为第2条printf()语句中的字符
串以一个空格开始。7个退格字符使得光标左移7个位置，即把光标移至7个
下划线字符的前面，紧跟在美元符号后面。通常，退格不会擦除退回所经过
的字符，但有些实现是擦除的，这和本例不同。
假设键入的数据是4000.00（并按下Enter键），屏幕显示的内容应该
是：
Enter your desired monthly salary: $4000.00
键入的字符替换了下划线字符。按下Enter键后，光标移至下一行的起
始处。
第3条printf()语句中的字符串以\n\t开始。换行字符使光标移至下一行起
始处。水平制表符使光标移至该行的下一个制表点，一般是第9列（但不一
定）。然后打印字符串中的其他内容。执行完该语句后，此时屏幕显示的内
容应该是：
162
Enter your desired monthly salary: $4000.00
$4000.00 a month is $48000.00 a year.
因为这条printf()语句中没有使用换行字符，所以光标停留在最后的点号
后面。
第4条printf()语句以\r开始。这使得光标回到当前行的起始处。然后打印
Gee!，接着\n使光标移至下一行的起始处。屏幕最后显示的内容应该是：
Enter your desired monthly salary: $4000.00
Gee! $4000.00 a month is $48000.00 a year.
3.7.2 刷新输出
printf()何时把输出发送到屏幕上？最初，printf()语句把输出发送到一个
叫作缓冲区（buffer）的中间存储区域，然后缓冲区中的内容再不断被发送
到屏幕上。C 标准明确规定了何时把缓冲区中的内容发送到屏幕：当缓冲区
满、遇到换行字符或需要输入的时候（从缓冲区把数据发送到屏幕或文件被
称为刷新缓冲区）。例如，前两个 
printf()语句既没有填满缓冲区，也没有
换行符，但是下一条 scanf()语句要求用户输入，这迫使printf()的输出被发送
到屏幕上。
旧式编译器遇到scanf()也不会强行刷新缓冲区，程序会停在那里不显示
任何提示内容，等待用户输入数据。在这种情况下，可以使用换行字符刷新
缓冲区。代码应改为：
printf("Enter your desired monthly salary:\n");
scanf("%f", &salary);
无论接下来的输入是否能刷新缓冲区，代码都会正常运行。这将导致光
标移至下一行起始处，用户无法在提示内容同一行输入数据。还有一种刷新
163
缓冲区的方法是使用fflush()函数，详见第13章。
164
3.8 关键概念
C语言提供了大量的数值类型，目的是为程序员提供方便。那以整数类
型为例，C认为一种整型不够，提供了有符号、无符号，以及大小不同的整
型，以满足不同程序的需求。
计算机中的浮点数和整数在本质上不同，其存储方式和运算过程有很大
区别。即使两个32位存储单元储存的位组合完全相同，但是一个解释为float
类型，另一个解释为long类型，这两个相同的位组合表示的值也完全不同。
例如，在PC中，假设一个位组合表示float类型的数256.0，如果将其解释为
long类型，得到的值是113246208。C语言允许编写混合数据类型的表达式，
但是会进行自动类型转换，以便在实际运算时统一使用一种类型。
计算机在内存中用数值编码来表示字符。美国最常用的是ASCII码，除
此之外C也支持其他编码。字符常量是计算机系统使用的数值编码的符号表
示，它表示为单引号括起来的字符，如'A'。
165
3.9 本章小结
C 有多种的数据类型。基本数据类型分为两大类：整数类型和浮点数类
型。通过为类型分配的储存量以及是有符号还是无符号，区分不同的整数类
型。最小的整数类型是char，因实现不同，可以是有符号的char或无符号的
char，即unsigned char或signed char。但是，通常用char类型表示小整数时才
这样显示说明。其他整数类型有short、int、long和long long类型。C规定，后
面的类型不能小于前面的类型。上述都是有符号类型，但也可以使用
unsigned关键字创建相应的无符号类型：unsigned 
short、unsigned 
int、
unsigned long和unsigned long long。或者，在类型名前加上signed修饰符显式
表明该类型是有符号类型。最后，_Bool类型是一种无符号类型，可储存0或
1，分别代表false和true。
浮点类型有3种：float、double和C90新增的long double。后面的类型应
大于或等于前面的类型。有些实现可选择支持复数类型和虚数类型，通过关
键字_Complex和_Imaginary与浮点类型的关键字组合（如，double _Complex
类型和float _Imaginary类型）来表示这些类型。
整数可以表示为十进制、八进制或十六进制。0前缀表示八进制数，0x
或0X前缀表示十六进制数。例如，32、040、0x20分别以十进制、八进制、
十六进制表示同一个值。l或L前缀表明该值是long类型， ll或LL前缀表明该
值是long long类型。
在C语言中，直接表示一个字符常量的方法是：把该字符用单引号括起
来，如'Q'、'8'和'$'。C语言的转义序列（如，'\n'）表示某些非打印字符。另
外，还可以在八进制或十六进制数前加上一个反斜杠（如，'\007'），表示
ASCII码中的一个字符。
浮点数可写成固定小数点的形式（如，9393.912）或指数形式（如，
7.38E10）。C99和C11提供了第3种指数表示法，即用十六进制数和2的幂来
表示（如，0xa.1fp10）。
166
printf()函数根据转换说明打印各种类型的值。转换说明最简单的形式由
一个百分号（%）和一个转换字符组成，如%d或%f。
167
3.10 复习题
复习题的参考答案在附录A中。
1.指出下面各种数据使用的合适数据类型（有些可使用多种数据类
型）：
a.East Simpleton的人口
b.DVD影碟的价格
c.本章出现次数最多的字母
d.本章出现次数最多的字母次数
2.在什么情况下要用long类型的变量代替int类型的变量？
3.使用哪些可移植的数据类型可以获得32位有符号整数？选择的理由是
什么？
4.指出下列常量的类型和含义（如果有的话）：
a.'\b'
b.1066
c.99.44
d.0XAA
e.2.0e30
5.Dottie Cawm编写了一个程序，请找出程序中的错误。
include 
168
main
(
float g; h;
float tax, rate;
g = e21;
tax = rate*g;
)
6.写出下列常量在声明中使用的数据类型和在printf()中对应的转换说
明：
7.写出下列常量在声明中使用的数据类型和在printf()中对应的转换说明
（假设int为16位）：
169
8.假设程序的开头有下列声明：
int imate = 2;
long shot = 53456;