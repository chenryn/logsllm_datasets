### Continuous Data Availability

Despite significant progress, several open challenges remain in ensuring continuous data availability. These include:

- Developing a stateless Proof of Space-Time (PoSt) that does not rely on any trapdoor mechanisms.
- Reducing the setup cost associated with PoSt.
- Supporting Proof of Replication (PoR) as an underlying component.
- Enabling dynamic updates to the stored data.

### Acknowledgment

**Figure 4:** The compact PoSt setup times for various file sizes and different values of the delay function parameter \(\delta\), with an hourly check-up policy and a 30-day data availability period.

The authors were partially supported by a grant from Protocol Labs/Filecoin. We extend our gratitude to Jeremiah Blocki and the anonymous reviewers for their valuable comments.

### Verification Cost

It is evident that our verification process involves only computing a hash, making the cost negligible. For instance, if a smart contract is instantiated using our compact PoSt, verifying whether the submitted string \( p \) is the pre-image of the fixed value \( t_{gi} \) costs only 36 gas (worth less than $0.0001 USD) in Ethereum when the hash is implemented via SHA-3.

### Proof Cost

The inherent cost in PoSt includes the computation of delay functions. Additionally, the prover must perform Proof of Retrievability (PoR) proofs, which contribute to the overall proof cost.

### References

1. "ETH Gas Station," https://ethgasstation.info/, accessed: January 12, 2020.
2. "Tencent Cloud user claims $1.6 million compensation for data loss," https://technode.com/2018/08/06/tencent-cloud-user-claims-1-6-million-compensation-for-data-loss/, accessed: 2019-01-31.
3. J. Alwen, J. Blocki, and K. Pietrzak, "Sustained space complexity," in Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2018, pp. 99–130.
4. F. Armknecht, L. Barman, J.-M. Bohli, and G. O. Karame, "Mirror: Enabling proofs of data replication and retrievability in the cloud," in USENIX Security Symposium, 2016, pp. 1051–1068.
5. F. Armknecht, J.-M. Bohli, G. O. Karame, Z. Liu, and C. A. Reuter, "Outsourced proofs of retrievability," in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 831–843.
6. G. Ateniese, I. Bonacina, A. Faonio, and N. Galesi, "Proofs of space: When space is of the essence," in International Conference on Security and Cryptography for Networks. Springer, 2014, pp. 538–557.
7. G. Ateniese, R. Burns, R. Curtmola, J. Herring, O. Khan, L. Kissner, Z. Peterson, and D. Song, "Remote data checking using provable data possession," ACM Trans. Inf. Syst. Secur., vol. 14, no. 1, Jun. 2011. [Online]. Available: https://doi.org/10.1145/1952982.1952994
8. G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. Peterson, and D. Song, "Provable data possession at untrusted stores," in CCS'07. ACM, 2007.
9. G. Ateniese, R. Di Pietro, L. V. Mancini, and G. Tsudik, "Scalable and efficient provable data possession," in SecureComm. ACM, 2008, p. 9.
10. T. Beaton, "Top healthcare mobile apps among hospital health systems," https://mhealthintelligence.com/news/top-10-healthcare-mobile-apps-among-hospital-health-systems, 2017.
11. E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza, "Succinct non-interactive zero knowledge for a von neumann architecture," in 23rd USENIX Security Symposium (USENIX Security 14), 2014, pp. 781–796.
12. D. Bermingham and J. D’Antoni, "Controlling costs in the cloud for high-availability applications," http://www.dbta.com/Editorial/Trends-and-Applications/Controlling-Costs-in-the-Cloud-for-High-Availability-Applications-127914.aspx, 2019.
13. D. J. Bernstein, "SHA-3 interoperability."
14. D. Boneh, J. Bonneau, B. Bünz, and B. Fisch, "Verifiable delay functions," in Annual International Cryptology Conference. Springer, 2018, pp. 757–788.
15. D. Boneh, B. Bünz, and B. Fisch, "A survey of two verifiable delay functions," 2018.
16. A. Boudjemaa, "Decentralized cloud storage is changing the face of the internet," https://hackernoon.com/decentralized-cloud-storage-how-it-will-change-the-face-of-the-internet-22-np1f2349h, 2019.
17. K. D. Bowers, A. Juels, and A. Oprea, "Hail: A high-availability and integrity layer for cloud storage," in Proceedings of the 16th ACM conference on Computer and communications security. ACM, 2009, pp. 187–198.
18. K. D. Bowers, A. Juels, and A. Oprea, "Proofs of retrievability: Theory and implementation," in Proceedings of the 2009 ACM workshop on Cloud computing security. ACM, 2009, pp. 43–54.
19. R. C. Burns and I. S. Narang, "Continuous availability and efficient backup for externally referenced objects," Jul. 11 2000, US Patent 6,088,694.
20. D. Cash, A. Küpcü, and D. Wichs, "Dynamic proofs of retrievability via oblivious RAM," Journal of Cryptology, pp. 1–26, 2015.
21. R. Curtmola, O. Khan, R. Burns, and G. Ateniese, "MR-PDP: Multiple-replica provable data possession," in ICDCS'08. IEEE, 2008, pp. 411–420.
22. W. Dai, "Crypto++ Library 8.2," https://www.cryptopp.com, 2019.
23. I. Damgård, C. Ganesh, and C. Orlandi, "Proofs of replicated storage without timing assumptions," in Annual International Cryptology Conference. Springer, 2019, pp. 355–380.
24. Y. Dodis, S. Vadhan, and D. Wichs, "Proofs of retrievability via hardness amplification," in Theory of Cryptography Conference. Springer, 2009, pp. 109–127.
25. N. Döttling, S. Garg, G. Malavolta, and P. Nalini, "Tight verifiable delay functions."
26. M. J. Dworkin, "SHA-3 standard: Permutation-based hash and extendable-output functions," Tech. Rep., 2015.
27. S. Dziembowski, S. Faust, V. Kolmogorov, and K. Pietrzak, "Proofs of space," in Annual Cryptology Conference. Springer, 2015, pp. 585–605.
28. B. Fisch, "Tight proofs of space and replication," in Annual International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2019, pp. 324–348.
29. M. Fuerderer and A. Gupta, "High availability data replication set up using external backup and restore," Mar. 31 2005, US Patent App. 10/850,781.
30. S. Goldwasser, S. Micali, and C. Rackoff, "The knowledge complexity of interactive proof systems," SIAM Journal on computing, vol. 18, no. 1, pp. 186–208, 1989.
31. A. Juels and B. S. Kaliski Jr, "PORs: Proofs of retrievability for large files," in Proceedings of the 14th ACM conference on Computer and communications security. ACM, 2007, pp. 584–597.
32. C. Kim, "Ethereum foundation and others weigh $15 million bid to build 'randomness' tech," https://www.coindesk.com/ethereum-foundation-weighs-15-million-bid-to-build-randomness-tech, 2019.
33. T. Moran and I. Orlov, "Simple proofs of space-time and rational proofs of storage," in Annual International Cryptology Conference. Springer, 2019, pp. 381–409.
34. H. Morrill, M. Beard, and D. Clitherow, "Achieving continuous availability of IBM systems infrastructures," IBM Systems Journal, vol. 47, no. 4, pp. 493–503, 2008.
35. NetApp, "Cloud Volumes ONTAP - enterprise data management solution," https://cloud.netapp.com/ontap-cloud, accessed: 2019-09-14.
36. M. B. Paterson, D. R. Stinson, and J. Upadhyay, "Multi-prover proof of retrievability," Journal of Mathematical Cryptology, vol. 12, no. 4, pp. 203–220, 2018.
37. K. Pietrzak, "Proofs of catalytic space," in 10th Innovations in Theoretical Computer Science Conference (ITCS 2019). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 2018.
38. K. Pietrzak, "Simple verifiable delay functions." IACR Cryptology ePrint Archive, vol. 2018, p. 627, 2018.
39. B. Portier, "Always on: Business considerations for continuous availability," http://www.redbooks.ibm.com/redpapers/pdfs/redp5090.pdf, 2014, © Copyright IBM Corp. 2014.
40. Protocol Labs, "Filecoin: A decentralized storage network," https://filecoin.io/filecoin.pdf, 2018, accessed: 2019-01-31.
41. Protocol Labs, "Collaboration with the Ethereum Foundation on VDFs," https://filecoin.io/blog/collaboration-on-vdfs/, 2019.
42. R. L. Rivest, A. Shamir, and D. A. Wagner, "Time-lock puzzles and timed-release crypto," 1996.
43. D. Rubino, "Continuous availability," https://www.dellemc.com/en-us/glossary/continuous-availability.htm, accessed: 2019-08-25.
44. H. Shacham and B. Waters, "Compact proofs of retrievability," in International Conference on the Theory and Application of Cryptology and Information Security. Springer, 2008, pp. 90–107.
45. E. Shi, E. Stefanov, and C. Papamanthou, "Practical dynamic proofs of retrievability," in Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 2013, pp. 325–336.
46. J. Shieber, "Google Cloud is down, affecting numerous applications and services," https://techcrunch.com/2019/06/02/google-cloud-is-down-affecting-numerous-applications-and-services/, 2019.
47. Q. Wang, C. Wang, J. Li, K. Ren, and W. Lou, "Enabling public verifiability and data dynamics for storage security in cloud computing," in European symposium on research in computer security. Springer, 2009, pp. 355–370.
48. B. Wesolowski, "Efficient verifiable delay functions." IACR Cryptology ePrint Archive, vol. 2018, p. 623, 2018.
49. G. Wood et al., "Ethereum: A secure decentralised generalised transaction ledger," Ethereum project yellow paper, vol. 151, no. 2014, pp. 1–32, 2014.
50. Q. Zheng and S. Xu, "Fair and dynamic proofs of retrievability," in Proceedings of the first ACM conference on Data and application security and privacy. ACM, 2011, pp. 237–248.
51. Q. Zheng and S. Xu, "Secure and efficient proof of storage with deduplication," in Proceedings of the second ACM conference on Data and Application Security and Privacy. ACM, 2012, pp. 1–12.

### Appendix

#### A. Interactive Turing Machine

We define an Interactive Turing Machine (ITM) with \( k \) work tapes as a 5-tuple \( T = (\Sigma, \Omega, Q, q_{init}, F, \delta) \), where:
- \( \Sigma \) is a non-empty alphabet,
- \( Q \) is a set of states,
- \( q_{init} \) is the initial state,
- \( F \) is the set of final states,
- \( \delta \) is the transition function.

The transition function \( \delta \) is defined as:
\[ \delta : Q \times \Sigma \times \Sigma \times \Sigma^k \rightarrow Q \times \{none, right\} \times \{none, right\} \times \left( \Sigma^k, \{left, none, right\}^k \right) \times (\Sigma \cup \perp, \{none, left\}) \]

At each step, the ITM reads one symbol from the input tape, one symbol from the random tape, and \( k \) symbols from the work tapes. Based on the current state and the transition function \( \delta \), it decides:
- Which state to change to,
- Whether to move the header on the reading tape to the right or stay,
- Whether to move the header on the random tape to the right or stay,
- What \( k \) symbols to print on the work tapes,
- Whether to move the headers on the work tapes to the right, left, or stay,
- Whether to print one symbol on the writing tape or give up and output,
- Whether to move the header on the writing tape to the left or stay.

It is often more convenient to use a transition function based on configurations rather than states, as this simplifies many definitions. A configuration consists of a state, the contents of the tapes, and the positions of the tape headers, denoted as \( (q, v_1, \ldots, v_k, i_1, \ldots, i_k) \), for a state \( q \in Q \), strings on one of the work tapes \( v_j \in \Sigma^* \), and integers \( 1 \leq i_j \leq |v_j + 1| \) for every \( 1 \leq j \leq k \). Let \( Q \) be the set of configurations. The initial configuration \( q_{init} \) consists of the initial state and \( k \) empty tapes, with the tape heads at the first position. Thus, the transition function can be written as:
\[ \delta : Q \times \Sigma \rightarrow Q \times \{none, right\} \times \{ \Sigma \cup \perp \} \]

#### B. Proof of Theorem 2

To prove the soundness of the scheme, we need to construct an extractor \( cPoSt.Extr = (cPoSt.Extr1, cPoSt.Extr2) \) to recover the data \( D \) from a cheating prover \( cPoSt.P' \). Generally, the verification algorithm of the compact PoSt requires the prover to compute all PoR challenges and responses and evaluate the TDFs as in the setup phase. Therefore, we can conclude that all the PoR responses are valid and the TDFs are evaluated as intended. We can use a strategy similar to Theorem 1 to construct \( cPoSt.Extr \).

Specifically, let \( T_0 \) and \( T_k \) be the starting and ending time points for running \( cPoSt.P' \). Similar to Theorem 1, we need to set \( T_1, \ldots, T_{k-1} \) and \( R_0, \ldots, R_{k-1} \) as the points of respective queries to the random oracles \( H \) and \( G \) for \( cPoSt.P' \), such that:
1. \( T_i \) must precede \( T_{i+1} \),
2. The length of each time slot \([T_i, T_{i+1})\) is longer than \( t' \),
3. The length of each time slot \([T_i, T_{i+1})\) is shorter than \( t' + \delta T \),
4. Each \( R_i \) belongs to the time slot \([T_i, T_{i+1})\) and the time slot \([T_i, R_i)\) is shorter than \( \delta T \).

Thus, the random time epoch with length \( t > t' + 2\delta T \) chosen by \( cPoSt.Extr1 \) must contain at least one interval \([T_i, R_i)\) for some \( i \). Hence, a cheating PoR prover \( PoR.P' \) can be constructed by \( cPoSt.Extr2 \) since both random oracles \( H \) and \( G \) are maintained and can be manipulated by the extractor.

#### C. TDF Construction

Here we describe the TDF construction in [48].

- **TDF.Setup(λ, s):** Output two objects:
  - A finite abelian group \( G \) of unknown order,
  - An efficiently computable hash function \( H : X \rightarrow G \) that we model as a random oracle.
  - Set the public parameters \( pp \) to be \( pp := (G, H, s) \) and the trapdoor \( tp \) to be the real order \( d \) of \( G \).

- **TDF.Eval(pp, x):** Compute \( y \leftarrow H(x)^{2^s} \in G \) by computing \( 2^s \) squarings in \( G \) starting with \( H(x) \), and output \( y \).

- **TDF.TrapEval(pp, tr, x):** Let \( d \) be the order of the group and \( 2^s \mod d = r' \). We just need to compute \( y = H(x)^{r'} \).

For an implementation, one can choose \( G \) as the RSA group, so the trapdoor \( d = \phi(N) \) where \( N \) is the RSA modulus and \( \phi \) is the Euler's totient function.