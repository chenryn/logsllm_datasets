of continuous data availability. Many open problems remain,
including making PoSt stateless and without relying on any
trapdoor, reducing setup cost, supporting proof of replication
as the underlying component, and supporting dynamic updates.
ACKNOWLEDGMENT
Fig. 4: The compact PoSt setup times for various ﬁle sizes and
different δ of the delay function, with hourly check up policy
and 30 days data available period.
The authors were supported in part by a grant from Protocol
Labs/Filecoin. We thank Jeremiah Blocki and the anonymous
reviewers for valuable comments.
Veriﬁcation cost. It is easy to see that our veriﬁcation only
computes a hash; thus, the cost can be considered negligible.
If a smart contract is instantiated by our compact PoSt, to
check whether the submitted string p is the hash pre-image of
the ﬁxed value tgi only costs 36 gas (worth less than 0.0001
USD[1]) in Ethereum if the hash is instantiated via SHA-3.
Proof cost. The cost of computing delay functions is inherent
for the PoSt. Besides, the prover is doing PoR proofs, whose
13
REFERENCES
[1]
[2]
[3]
“ETH Gas Station,” https://ethgasstation.info/, accessed: January 12,
2020.
“Tencent Cloud user claims $1.6 million compensation for data
loss,”
https://technode.com/2018/08/06/tencent-cloud-user-claims
-1-6-million-compensation-for-data-loss/, accessed: 2019-01-31.
J. Alwen, J. Blocki, and K. Pietrzak, “Sustained space complexity,” in
Annual International Conference on the Theory and Applications of
Cryptographic Techniques. Springer, 2018, pp. 99–130.
[4] F. Armknecht, L. Barman, J.-M. Bohli, and G. O. Karame, “Mirror:
Enabling proofs of data replication and retrievability in the cloud,” in
USENIX Security Symposium, 2016, pp. 1051–1068.
[5] F. Armknecht, J.-M. Bohli, G. O. Karame, Z. Liu, and C. A. Reuter,
“Outsourced proofs of retrievability,” in Proceedings of
the 2014
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2014, pp. 831–843.
[6] G. Ateniese, I. Bonacina, A. Faonio, and N. Galesi, “Proofs of space:
When space is of the essence,” in International Conference on Security
and Cryptography for Networks. Springer, 2014, pp. 538–557.
[7] G. Ateniese, R. Burns, R. Curtmola, J. Herring, O. Khan, L. Kissner,
Z. Peterson, and D. Song, “Remote data checking using provable data
possession,” ACM Trans. Inf. Syst. Secur., vol. 14, no. 1, Jun. 2011.
[Online]. Available: https://doi.org/10.1145/1952982.1952994
[8] G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. Peterson,
and D. Song, “Provable data possession at untrusted stores,” in CCS’07.
ACM, 2007.
10
apps
“Top
Beaton,
[10] T.
[9] G. Ateniese, R. Di Pietro, L. V. Mancini, and G. Tsudik, “Scalable and
efﬁcient provable data possession,” in SecureComm. ACM, 2008, p. 9.
among
hospital,
https://mhealthintelligence.com/news/
top-10-healthcare-mobile-apps-among-hospital-health-systems, 2017.
[11] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza, “Succinct non-
interactive zero knowledge for a von neumann architecture,” in 23rd
{USENIX} Security Symposium ({USENIX} Security 14), 2014, pp.
781–796.
healthcare mobile
systems,”
health
[12] D. Bermingham and J. D’Antoni, “Controlling costs in the cloud for
high-availability applications,” http://www.dbta.com/Editorial/Trends-
and-Applications/Controlling-Costs-in-the-Cloud-for-High-Availability-
Applications-127914.aspx, 2019.
[13] D. J. Bernstein, “Sha-3 interoperability.”
[14] D. Boneh, J. Bonneau, B. B¨unz, and B. Fisch, “Veriﬁable delay
functions,” in Annual International Cryptology Conference. Springer,
2018, pp. 757–788.
[15] D. Boneh, B. B¨unz, and B. Fisch, “A survey of two veriﬁable delay
functions,” 2018.
[16] A. Boudjemaa, “Decentralized cloud storage is changing the face of
the internet,” https://hackernoon.com/decentralized-cloud-storage-how-
it-will-change-the-face-of-the-internet-22-np1f2349h, 2019.
[17] K. D. Bowers, A. Juels, and A. Oprea, “Hail: A high-availability and
integrity layer for cloud storage,” in Proceedings of the 16th ACM
conference on Computer and communications security. ACM, 2009,
pp. 187–198.
[18] K. D. Bowers, A. Juels, and A. Oprea, “Proofs of retrievability: Theory
and implementation,” in Proceedings of the 2009 ACM workshop on
Cloud computing security. ACM, 2009, pp. 43–54.
[19] R. C. Burns and I. S. Narang, “Continuous availability and efﬁcient
backup for externally referenced objects,” Jul. 11 2000, uS Patent
6,088,694.
[20] D. Cash, A. K¨upc¸ ¨u, and D. Wichs, “Dynamic proofs of retrievability
via oblivious ram,” Journal of Cryptology, pp. 1–26, 2015.
[21] R. Curtmola, O. Khan, R. Burns, and G. Ateniese, “Mr-pdp: Multiple-
IEEE, 2008, pp. 411–
replica provable data possession,” in ICDCS’08.
420.
[22] Dai, Wei, “Crypto++ Library 8.2,” https://www.cryptopp.com, 2019.
[23]
I. Damg˚ard, C. Ganesh, and C. Orlandi, “Proofs of replicated storage
without timing assumptions,” in Annual International Cryptology Con-
ference. Springer, 2019, pp. 355–380.
[24] Y. Dodis, S. Vadhan, and D. Wichs, “Proofs of retrievability via hard-
ness ampliﬁcation,” in Theory of Cryptography Conference. Springer,
2009, pp. 109–127.
[25] N. D¨ottling, S. Garg, G. Malavolta, and P. Nalini, “Tight veriﬁable delay
functions.”
[26] M.
J. Dworkin, “Sha-3 standard: Permutation-based hash and
extendable-output functions,” Tech. Rep., 2015.
[27] S. Dziembowski, S. Faust, V. Kolmogorov, and K. Pietrzak, “Proofs of
Springer, 2015, pp. 585–
space,” in Annual Cryptology Conference.
605.
[28] B. Fisch, “Tight proofs of space and replication,” in Annual Interna-
tional Conference on the Theory and Applications of Cryptographic
Techniques. Springer, 2019, pp. 324–348.
[29] M. Fuerderer and A. Gupta, “High availability data replication set up
using external backup and restore,” Mar. 31 2005, uS Patent App.
10/850,781.
[30] S. Goldwasser, S. Micali, and C. Rackoff, “The knowledge complexity
of interactive proof systems,” SIAM Journal on computing, vol. 18,
no. 1, pp. 186–208, 1989.
[31] A. Juels and B. S. Kaliski Jr, “PORs: Proofs of retrievability for large
ﬁles,” in Proceedings of the 14th ACM conference on Computer and
communications security. ACM, 2007, pp. 584–597.
[32] C. Kim, “Ethereum foundation and others weigh $ 15 million
bid to build ‘randomness’ tech,” https://www.coindesk.com/ethereum-
foundation-weighs-15-million-bid-to-build-randomness-tech, 2019.
[33] T. Moran and I. Orlov, “Simple proofs of space-time and rational proofs
of storage,” in Annual International Cryptology Conference. Springer,
2019, pp. 381–409.
[34] H. Morrill, M. Beard, and D. Clitherow, “Achieving continuous avail-
ability of ibm systems infrastructures,” IBM Systems Journal, vol. 47,
no. 4, pp. 493–503, 2008.
[35] NetApp, “Cloud Volumes ONTAP - enterprise data management solu-
tion,” https://cloud.netapp.com/ontap-cloud, accessed: 2019-09-14.
[36] M. B. Paterson, D. R. Stinson, and J. Upadhyay, “Multi-prover proof
of retrievability,” Journal of Mathematical Cryptology, vol. 12, no. 4,
pp. 203–220, 2018.
[37] K. Pietrzak, “Proofs of catalytic space,” in 10th Innovations in Theo-
retical Computer Science Conference (ITCS 2019). Schloss Dagstuhl-
Leibniz-Zentrum fuer Informatik, 2018.
[38] K. Pietrzak, “Simple veriﬁable delay functions.” IACR Cryptology
ePrint Archive, vol. 2018, p. 627, 2018.
[39] B. Portier, “Always on: Business considerations for continuous avail-
http://www.redbooks.ibm.com/redpapers/pdfs/redp5090.pdf,
ability,”
2014, c(cid:13)Copyright IBM Corp. 2014.
[40] Protocol Labs, “Filecoin: A decentralized storage network,” https:
//ﬁlecoin.io/ﬁlecoin.pdf, 2018, accessed: 2019-01-31.
[41] Protocol Labs, “Collaboration with the ethereum foundation on vdfs,”
https://ﬁlecoin.io/blog/collaboration-on-vdfs/, 2019.
[42] R. L. Rivest, A. Shamir, and D. A. Wagner, “Time-lock puzzles and
timed-release crypto,” 1996.
[43] D. Rubino, “Continuous availability,” https://www.dellemc.com/en-us/
glossary/continuous-availability.htm, accessed: 2019-08-25.
[44] H. Shacham and B. Waters, “Compact proofs of retrievability,” in
International Conference on the Theory and Application of Cryptology
and Information Security. Springer, 2008, pp. 90–107.
[45] E. Shi, E. Stefanov, and C. Papamanthou, “Practical dynamic proofs of
retrievability,” in Proceedings of the 2013 ACM SIGSAC conference on
Computer & communications security. ACM, 2013, pp. 325–336.
is
numerous
J.
Shieber,
applications
https://techcrunch.com/2019/06/02/
google-cloud-is-down-affecting-numerous-applications-and-services/,
2019.
cloud
services,”
“Google
and
affecting
down,
[46]
[47] Q. Wang, C. Wang, J. Li, K. Ren, and W. Lou, “Enabling public
veriﬁability and data dynamics for storage security in cloud computing,”
in European symposium on research in computer security.
Springer,
2009, pp. 355–370.
[48] B. Wesolowski, “Efﬁcient veriﬁable delay functions.” IACR Cryptology
ePrint Archive, vol. 2018, p. 623, 2018.
14
[49] G. Wood et al., “Ethereum: A secure decentralised generalised trans-
action ledger,” Ethereum project yellow paper, vol. 151, no. 2014, pp.
1–32, 2014.
[50] Q. Zheng and S. Xu, “Fair and dynamic proofs of retrievability,” in
Proceedings of the ﬁrst ACM conference on Data and application
security and privacy. ACM, 2011, pp. 237–248.
[51] Q. Zheng and S. Xu, “Secure and efﬁcient proof of storage with
deduplication,” in Proceedings of the second ACM conference on Data
and Application Security and Privacy. ACM, 2012, pp. 1–12.
APPENDIX
A. Interactive turing machine
We have the following deﬁnition of an ITM.
Deﬁnition 4: An interactive Turing machine (ITM) with k
work tapes is a 5-tuple T = (Σ, Ω, Q, qinit, F, δ), where
Σ is a non-empty alphabet,
•
• Q is a set of states,
•
•
•
qinit is the initiate state,
F is the state of ﬁnial states
The transformation function
δ : Q × Σ × Σ × Σk −→
Q × {none, right} × {none, right}
×(cid:0)Σk,{lef t, none, right}k(cid:1)
× ({Σ ∪ ⊥},{none, lef t})
At each step, the ITM will read one symbol from the input
tape, one symbol from the random tape and k symbols from
the work tapes. Then based on the current state and the
transformation function δ, it will decide
•
•
•
•
•
•
•
It
which state to change to,
to move the header on the reading tape to right or stay,
to move the header on the random tape to right or
stay,
to print k symbols on the work tapes,
to move the headers on work tapes to right or left or
stay,
to print one symbol on the writing tape or give up to
output,
to move the header on the writing tape to left or stay.
is convenient
to use a transition function based on
conﬁgurations instead of states, as it simpliﬁes many deﬁ-
nitions. A conﬁguration consists of a state, the contents of
the tapes and the positions of the tape headers, denoted as
(q, v1, . . . , vk, i1, . . . , ik), for a state q ∈ Q, strings on one
of work tapes vj ∈ Σ∗ and integers 1 ≤ ij ≤ |vj + 1| for
every 1 ≤ j ≤ k. Let Q be the set of conﬁgurations. The
initial conﬁguration qinit is the conﬁguration consisting of the
initial state and k empty tapes, with the tape heads at the ﬁrst
position. So the transition function can be written as
δ : Q × Σ → Q × {none, right} × {Σ ∪ ⊥}
B. Proof of Theorem 2
the scheme, we need to construct
Proof: Assume that an adversary A outputs a cheating
prover cPoSt.P(cid:48)
in the setup game. To show the sound-
ness of
the extractor
cPoSt.Extr = (cPoSt.Extr1, cPoSt.Extr2) to recover the data
D from PoSt.P(cid:48). In general, the veriﬁcation algorithm of
the compact PoSt requires the prover to compute all PoR
challenges and responses and evaluate the TDFs as in the setup
phase, so we can easily conclude that all the PoR responses are
valid and the TDFs are evaluated as deemed. Therefore, we can
use the strategy similar to Theorem 1 to construct cPoSt.Extr.
Speciﬁcally, let T0 and Tk be the starting and ending time
points for running PoSt.P(cid:48). Similar to Theorem 1, we need to
set T1, . . . , Tk−1 and R0, . . . , Rk−1 as the points of respective
queries to the random oracle H and G for PoSt.P(cid:48), so that:
1) Ti must precede Ti+1,
2) the length of each time slot [Ti, Ti+1) is longer than t(cid:48),
3) the length of each time slot [Ti, Ti+1) is shorter than t(cid:48) +
4) each Ri belongs to the time slot [Ti, Ti+1) and the time
slot [Ti, Ri) is shorter than δT .
Therefore, the random time epoch with length t > t(cid:48) +
2δT chosen by PoSt.Extr1 must contain at least one interval
[Ti, Ri) for some i. Hence a cheating PoR prover PoR.P(cid:48) can
be constructed by PoSt.Extr2 since both random oracles H
and G are maintained and hence able to be manipulated by the
extractor.
δT ,
C. TDF construction
Here we describe the TDF construction in [48].
•
TDF.Setup(λ, s): Output two objects:
◦
◦
A ﬁnite abelian group G of unknown order
An efﬁciently computable hash function H :
X ← G that we model as a random oracle.
We set the public parameters pp to be pp := (G, H, s)
and the trapdoor tp to be the real order d of G.
TDF.Eval(pp, x): compute y ← H(x)2s ∈ G by
computing T squaring in G starting with H(x), and
output y
TDF.TrapEval (pp, tr, x): Let d be the order of the
group and 2s mod d = r(cid:48), we just need to compute
y = H(x)r(cid:48)
.
•
•
For an implementation, one can choose G as the RSA
group, so the trapdoor d = φ(N ) where N is the RSA modulus
and φ is the Euler’s function.
15