本完成编译，而且令人惊讶的是——只要执行下面这一条命令就什么都搞定了：
[path=to=ndk] /ndkbui1d
其中，[path-to-ndk]是你的 Android NDK 的存放路径。
如果一切顺利，你会看到类似图8.11的输出。
242
---
## Page 261
第8章原生代码中漏洞的利用与分析
[0]k317onakan@β14cksit.dow:/ARHExploLtation/MemoryExploltattLon/bufferoverfLow/nt
0]k3170
:buffer-overflou ，然后回车。
如果操作正确，你的屏幕上应该会显示如图8.12所示的输出。
00008524 :
8524: b51f
8526:4c0a
push (r0, r1, r2, r3, r4, 1r)
1dr r4, [pc, #40]: (8550 )
8528: 1c01
mov r0, sp
adds r1, r0, #0
852a:4668
852c: 447c
add r4, pc
852e:
6824
1dr r4,
[r4, #0]
8530 :
6823
1dr r3,
[π4,#0]
8532:
E056
str r3, [sp, #12]
8534:
f7ff
ef7e
blx 8434 
8538: 4806
1dr r0, [pc, #24]: (8554 )
853a: 4669
mov r1, sp
853c:
4478
add r0, pc
853e: f7ff ef80
blx 8440 
8542:
9a03
1dr r2, [sp, #12]
8544:
6823
1dr r3, [r4, #0]
8546:
4298
cmp r2, r3
8548: d001
beq.n 854e 
854a: f7ff ef80
blx 844c 
854e: bd1f
pop (r0, r1, r2, r3, r4, pc)
8550:00002a7c
andeq r2, r0, ip, rors1
8554: 00001558
andeq rl, r0, r8, asr r5
00008558 :
8558: b508
push (r3, 1r)
855a: 6848
1dr r0, [x1, #4]
855c: f7ff ffe2
bl 8524 
8560: 2000
movs r0, #0
8562: bd08
pop (z3, pe)
图 8.12
244
---
## Page 263
第8章原生代码中漏润的利用与分析
小贴士
上面的objdump 输出中，最左边这一列中的是指令的地址。中间
的这一列，也就是冒号“：”后面的这一列，是指令的十六进制
值。最后面的这一列中是人类可读的，与汇编指令对应的助记符。
请注意上面给出的这些objdump输出的代码。地址8526处的指令加载了程序计
数器（program counter，pc）寄存器当前指向的位置再加0x40这个位置上的内存中
的内容。这个地址上存放的是一个被称为栈保护值（“stackcanary”）的特殊值在内存
中的相对地址。
厂
小贴士
思，stack当然是“栈”的意思），是因为金丝雀常被矿工用来探
L
测矿井勘探是否安全。
这个值之后会被存放在局部变量和存放返回地址“以及栈的基地址之间。这样做
的目的是：如攻击者或某条错误的指令导致了栈溢出，覆盖掉了存放在栈中的返回
地址，那它也就一定会破坏掉或者改变栈保护值的值一面这个值是否被改变了，程
序是应该能够检查出来的。这个值是由一个密码学意义上安全的一—至少是理论上
伪随机数发生器产生的，并直到运行时才会被写入到内存中，以防止黑客能较有把
握地预测出它的值来。
继续往下，我们看到，地址852C-8530上的指令将栈保护值写入了R3和R4寄
存器。再接着，地址8532上的指令被用来在调用危险的 strcpy函数之前，把栈保护
值放入栈中。到目前为止，所有这些代码完成的工作就是把栈保护值放入栈中，然
后调用strcpy—实际上离printf函数也挺近的。地址8542至8544上的指令，把寄
存器r4中存放的栈保护值和栈中存放的栈保护值分别读入寄存器r2和r3，并用地址
8546上的指令对它们进行比较。如果它们不相等，我们看到地址854a上的指令将被
执行，这基本上会导致程序中止，而不是正常退出。因此，概括起来，就是从文件
中某个位置上读出栈保护值，把它在某个寄存器上存一份，然后再在栈上存一份，
并在函数返回之前检查它有没有被改掉。
① ARM 通过在进入一个函数时 Push Ir 的方式，把返回地址压入栈中，在函数返回时，以pop pc
的方式取回返回地址。—译者注
245
---
## Page 264
Android安全攻防实战
你可能会注意到的是，这样虽然可以防止保存在栈中的返回地址被破坏，但却
根本无法保护栈中的局部变量！黑客仍有可能去恶意覆盖栈中其他的变量，这取决
于这些变量在内存中的位置—与栈保护值及其他栈缓冲区之间的位置关系。在一些
非常特殊的情况下，这还是可能被滥用，并恶意地影响到进程的行为。
所以，现在我们该怎样干掉这个烦人的保护机制，使我们能够实施一些栈溢出
攻击，并进面获得系统控制权呢？嗯，由于栈保护值是一种基于编译器的保护机制一
一也就是说，它是由编译器来实现的一那么，我们要去修改的就是NDK编译生成
可执行文件的方式，使它不再强制使用栈保护机制。
尽管对于Android系统上的二进制可执行文件来说，这种情况极少发生，但它仍
不是没有发生的可能。我们现在移除保护机制的目的是要去模拟利用一个基于栈的
澄出漏洞。
为了取消保护，你需要改变一些NDK使用的GCC编译器扩展。要达到这一目
的，你需要执行以下步骤。
1.把目录切换到/toolchains/arm-linux-Androideabi-4.9/，在这里有一个名为
setup.mk的文件，如图 8.13所示。请注意，你的NDK使用的可能是不同版
本的arm-linux-androideabi。如果下面的步骤不起作用，或收不到预期的效果，
你应该自行尝试其他删除栈保护值的方法。
[e]PI:EMAIL:/Androtdoev/androtd-ndk-r8e/toolchatns/arw-1tnuxandrotdeabt-4.7
rw-F--f
1k3170nakank3170nakan790Oct
3k3178nakan k3170makan 4
12:34
2012
rgkr-xr-x1k3178nakan k3170nakan 4092 Bar 132013setup.ni
图 8.13
2.下一步你可能想要做的就是备份setup.mk文件。我们打算改变NDK默认的
编译配置，所以备份一下总没坏处。你可以把脚本复制为另一个名称略有不
同的文件，以此创建一个临时备份。例如，你可以执行下面这条命令备份
setup.mk文件，如图8.14所示。
cp setup .mk setup.mk.bk
246
---
## Page 265
第8章原生代码中漏润的利用与分析
Scp setup.nk setup.nk.bk
[0]k3178makan@B14ckwid8w:~/AndroidDev/androtd-ndk-r8e/toolchains/a)
total32
ls-al
drwxr-xr-x
3k3170makank3170makan4096Sep 1221:05
-rw-r.-r..
1k3170makan k3170makan 790 Sep 4 2012 config.mk
drwxr-xr-x
-W-r----
1
W---.
[]k317enakan@B14ckwidew:~/AndroidDev/android-ndk-r8e/toolchatns/a
图 8.14
3.备份完之后，在你常用的文本编辑器中打开setup.mk 文件，删除
-fstack-protector这个标志位。
图8.15这张截图比我说得清楚些。
27
-ffunctton-sections
-fptc
28
29
-funwind-tables
30
-fstack-protector
31
-no-canonlcal-prefixes
32
图 8.15
在删除了这个标志位之后，你的 setup.mk文件会是如图8.16所示这个样子
的。
27
-fptc
282
-ffunctton-sections
-funwtnd-tables
30
-no-canontcal-preftxes
31
图 8.16
4.这样做之后，你可以用NDK-build脚本再编译一个新的可执行文件出来，然
后继续用 androideabi 中的objdump 解析它。没有了堆栈保护，你的代码会是
如图8.17所示这样的。
000084bc :
84bc: b51f
push (r0, r1, r2, r3, r4, 1r)
84be: 1c01
84c0: a801
adds r1, r0, #0
add r0, sp, #4
247
---
## Page 266
Android安全攻防实战
84c2: f7ff ef8a
blx 83d8
84c6: 4803
1dr r0,[pc, #12];(84d4
)
84c8: a901
add r0, pc
add z1, sp, #4
84ca: 4478
84cc: f7ff ef8a
blx 83e4 
84d0:b005