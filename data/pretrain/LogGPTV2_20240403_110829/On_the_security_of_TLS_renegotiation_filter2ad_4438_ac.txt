according to the protocol speciﬁcation, depending on
its internal state. Some distinguished control messages
have special behaviour:
– m = (newphase, pk, ω) triggers an oracle to initi-
ate renegotiation of a new phase (or new session
if ﬁrst phase). Note that the action here may vary
based on the role of the party: for example, when
renegotiating in TLS, a client would prepare a new
ClientHello message, encrypt it by calling the
Encrypt oracle below, and then return the cipher-
text to the adversary for delivery; a server would
correspondingly prepare an encrypted ServerHel-
loRequest message.
– m = (ready, pk, ω) activates a (server) oracle to
use the public key pk in its next phase.
For the above control messages, pk indicates the long-
term public key pk the oracle should use in the phase
and ω indicates the authentication mode to use; the
oracle returns ⊥ if it does not hold the secret key for pk.
Since the control messages do not specify the identity
of the peer, this is instead learned during the run of the
protocol: we are using a post-speciﬁed peer model [6].
Delivery of encrypted messages in the post-accept stage
are handled by the Decrypt query below. For protocols
such as TLS that perform renegotiation within the
encrypted channel, the oracle may reply with an error
symbol ⊥ if it has at least one entry in phases and
m (cid:54)= (newphase,·) or (ready,·).
A responds with the long-
term secret key skA,i corresponding to public key pk =
pkA,i of party PA, or ⊥ if there is no i such that
pk = pkA,i. This is the weak corruption model, meaning
we do not allow the adversary to obtain the party’s
internal state nor register rogue keys.
A responds with the key(s) πs
A.
phases[(cid:96)].k used in phase (cid:96), or ∅ if no such value exists.
Since the TLS record layer is unidirectional, there are
both encryption and decryption keys, and for most ci-
phersuites also MAC keys, so all 4 keys (K C→S
, K S→C
,
K C→S
, K S→C
) would be revealed, though one could
reﬁne if desired.
A, (cid:96)): Oracle πs
mac
mac
enc
enc
• Corrupt(PA, pk): Oracle π1
• Reveal(πs
• Encrypt(πs
A, ctype, m0, m1, len, hd): This query takes
as input a content type ctype, messages m0 and m1, a
length len, and header data hd. Content type control
is used for handshake messages. The adversary cannot
query this oracle with ctype = control. Through an
abuse of notation, we allow the party itself to call this
oracle with control to encrypt protocol messages that
must be sent encrypted; this abuse of notation allows
the party to construct encrypted protocol messages
while all aspects of the security experiment remain
synchronized. Content type data is used for record
layer messages; in this case, one of the two messages
(chosen based on bit b) is encrypted for the adversary
to distinguish. Encrypt depends on the random bit b
sampled by πs
A at the beginning of the current phase. It
maintains a counter u initialized to 0 and an encryption
state ste, and proceeds as follows:
A + 1
1. us
2. If (ctype = control) and caller is not πs
A, then
e ) $← StE.Enc(k, len, hd, ctype(cid:107)m0, ste)
e ) $← StE.Enc(k, len, hd, ctype(cid:107)m1, ste)
A ← us
return ⊥
3. (C (0), st(0)
4. (C (1), st(1)
5. If (C (0) = ⊥) or (C (1) = ⊥), then return ⊥
6. (C s
7. Return C s
A], ste) ← (C (bA
s ), st(bs
A)
)
e
A[us
A]
A, C, hd): This query takes as input a cipher-
text C and header data hd. If πs
A has not accepted in
the current phase, then it returns ⊥. Decrypt maintains
a counter v and a switch diverge, both initialized to 0,
and a decryption state std, and proceeds as described
below. If the decryption of C contains a control mes-
sage, then the oracle processes the message according
to the protocol speciﬁcation, which may include up-
dating the state of the oracle and/or creating a new
A[us
• Decrypt(πs
391phase, and returns any protocol response message to
the adversary, which may or may not be encrypted by
calling Encrypt according to the protocol speciﬁcation.
Technically it proceeds as follows:
A ← vs
A.d, vs
B) or (C (cid:54)= C t
A > ut
A = 1) and (diverge = 1), then m(cid:48) ← m
1. (B, t) ← πs
A + 1, m(cid:48) ← ∅
2. (ctype(cid:107)m, std) = StE.Dec(k, hd, C, std)
A]), then diverge ← 1
3. If (vs
4. If (bs
5. If ctype = control, then r(cid:48) ← protocol response
6. Else r(cid:48) ← ⊥
7. Return (m(cid:48), r(cid:48))
for m
B[vs
Remark 2. Note that k may be a ‘multi-part’ key with
diﬀerent parts for encryption, decryption, and MAC; we
assume StE.Enc and StE.Dec know which parts to use. Also
note that the ‘protocol response for m(cid:48) may be encrypted by
the party internally making an Encrypt call.
The behaviour of the Decrypt oracle in this combined def-
inition for conﬁdentiality and integrity can be somewhat
diﬃcult to understand. It extends that of stateful length-
hiding authenticated encryption as originally deﬁned by Pa-
terson et al. [23].
2.3 Security Deﬁnitions
In the original security deﬁnition for ACCE protocols,
security is deﬁned by requiring that (i) the protocol is a
secure authentication protocol, thus any party πs
A reaches
the post-accept state only if there exists another party πt
B
such that πs
A has a matching conversation (in the sense of
[16]) to πt
B, and (ii) data transmitted in the post-accept stage
over a secure channel is secure (in a sense similar to sLHAE).
We extend this notion to include security when a session
has multiple phases that can be renegotiated. We will give
several security deﬁnitions with diﬀerent levels of security
against renegotiation attacks, as described in the introduction
to Section 2.
Each security notion is formally deﬁned as a game played
between an adversary A and a challenger C, with the same
overall setup but diﬀerent winning conditions. In each game,
A : A ∈
the challenger implements the collection of oracles {πs
[1, npa], s ∈ [1, nse]}. At the beginning of the game, the chal-
lenger generates nke long-term key pairs (pkA,1, skA,1), . . . ,
(pkA,nke , skA,nke ) for each party PA; we assume that, within
a party, all public key pairs are distinct.
(That distinct
parties have distinct key pairs comes as a consequence of
the protocol being secure.) The adversary receives all par-
ties’ public keys as input. The adversary may issue Send,
Corrupt, Reveal, Encrypt, and Decrypt queries to the oracles
and eventually terminates.
Definition 1
(Correct multi-phase ACCE).
A with destination address πs
A.d = πt
A.phases[(cid:96)].T and πt
We say Π is a correct multi-phase ACCE protocol if, for all
oracles πs
B, and for all
(cid:96), (cid:96)(cid:48) ∈ [1, nph] for which πs
B.phases[(cid:96)(cid:48)].T
are matching conversations, it holds that πs
A.phases[(cid:96)].α =
B.phases[(cid:96)(cid:48)].α = accept, πs
πt
B.phases[(cid:96)].ω
and πs
A.phases[(cid:96)].k = πt
2.3.1 Conﬁdentiality.
All of our notions for secure ACCE protocols will require
conﬁdentiality/integrity of the post-accept stage record layer
in each uncorrupted phase. Intuitively, an adversary should
B.phases[(cid:96)(cid:48)].k.
A.phases[(cid:96)].ω = πt
not be able to guess the bit b used in the Encrypt/Decrypt
oracles in a phase where she has not impersonated the parties
(i.e., corrupted the long-term secret keys before the phase
accepted) or revealed the session key of the party or its
peer. As with the ACCE notion of Jager et al. [16], this
notion ensures forward security: corrupting long-term se-
cret keys after completion of a session should not impact
conﬁdentiality/integrity of messages.
Definition 2
(Confidentiality/integrity).
B; and
B = πs
A.d is πs
accepted in phase (cid:96); and
Suppose an algorithm A with running time τ interacts with
a multi-phase ACCE protocol Π in the above execution envi-
ronment and returns a tuple (A, s, (cid:96), b(cid:48)). If
C1. πs
A.phases[(cid:96)].α = accept; and
C2. A did not query Corrupt(PA, πs
C3. A did not query Corrupt(PB, πs
πs
A accepted in phase (cid:96), where πs
C4. A did not query Reveal(πs
A, (cid:96)); and
C5. A did not query Reveal(πt
B, (cid:96)(cid:48)), where πt
A.phases[(cid:96)].pk) before πs
A
A.phases[(cid:96)].pk(cid:48)) before
A.d = πt
A.phases[(cid:96)].T ; and
A.phases[(cid:96)].b = b(cid:48)] − 1/2| ≥ ,
A’s
intended communication partner, and (cid:96)(cid:48) is any phase
B.phases[(cid:96)(cid:48)].T is a matching conversation
for which πt
to πs
C6. |Pr [πs
then we say A (τ, )-breaks conﬁdentiality/integrity of Π.
2.3.2
First we state a straightforward extension of the ACCE
model to protocols with multiple phases, but with essentially
no security condition relating one phase to another. This
deﬁnition captures the properties of TLS without any renego-
tiation countermeasures, and will be used as a stepping stone
in our generic result in Section 4. For this simplest notion of
authentication, an adversary should not be able to cause a
phase to accept unless there exists a phase at the peer with
a matching pre-accept handshake transcript, provided she
has not impersonated the parties (i.e., corrupted long-term
secret keys before the phase accepted).
Secure multi-phase ACCE.
Definition 3
(Secure multi-phase ACCE).
Suppose an algorithm A with running time τ interacts with
a multi-phase ACCE protocol Π in the above execution envi-
ronment and terminates. If, with probability at least , there
exists an oracle πs
A.d = πt
B and a phase (cid:96) such that
A1. πs
A.phases[(cid:96)].α = accept; and
A2. A did not query Corrupt(PA, πs
A3. A did not query Corrupt(PB, πs
A.phases[(cid:96)].pk) before πs
A
A.phases[(cid:96)].pk(cid:48)) before
accepted in phase (cid:96); and
A with πs
πs
A accepted in phase (cid:96); and
A.phases[(cid:96)].ω = 0 then πs
A4. if πs
A5. A did not query Reveal(πt
phase (cid:96) for any (cid:96)(cid:48) such that πt
ing conversation to πs
B, (cid:96)(cid:48)) before πs
A.ρ = Client; and
A accepted in
B.phases[(cid:96)(cid:48)].T is a match-
B.phases[(cid:96)(cid:48)].T is a matching
A.phases[(cid:96)].T ; and
conversation to πs
M. there is no (cid:96)(cid:48) such that πt
then we say that A (τ, )-breaks authentication of Π.
A protocol Π is a (τ, )-secure multi-phase ACCE protocol
if there exists no algorithm A that (τ, )-breaks conﬁdential-
ity/integrity (Def. 2) or authentication (as above) of Π.
A.phases[(cid:96)].T
In A1 and M we redeﬁne the NoMatch-condition from
[1]. In A2 we exclude leaking of the secret long-term keys
of the accepting party (necessary for example to counter
392key compromise impersonation attacks). In A3 we exclude
corruptions of the peer. In A4 (only for server-only authen-
tication), we ensure that the adversary only wins by making
a client-oracle maliciously accept. In A5 we exclude trivial
attacks that exist for protocols with explicit key conﬁrmation