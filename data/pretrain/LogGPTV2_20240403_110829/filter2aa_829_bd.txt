### Understanding and Analyzing ETW Events

#### Event Logging Mechanism
The `nt!EtwProviderEnabled()` function, along with an `EVENT_DESCRIPTOR` structure, is used to log events. The specific `EVENT_DESCRIPTOR` chosen depends on the context of the calling thread, which can be either user or kernel mode.

After these checks, the `EtwTi` function constructs a structure using functions such as `nt!EtwpTiFillProcessIdentity()` and `nt!EtwpTiFillVad()`. This structure is not easily reversed statically but is passed to `nt!EtwWrite()`, a function used for emitting events. We will use a debugger to examine this structure.

#### Determining the Events Emitted
We know that the syscall passes data to `nt!EtwTiLogProtectExecVm()`, which emits an event via the `EtwTi` provider. However, the specific event emitted is still unknown. To gather this information, we will inspect the `PEVENT_DATA_DESCRIPTOR` passed to `nt!EtwWrite()` using WinDbg.

By setting a conditional breakpoint on `nt!EtwWrite` when its call stack includes `nt!EtwTiLogProtectExecVm()`, we can investigate the parameters passed to it (see Listing 12-5).

```plaintext
1: kd> bp nt!EtwWrite "r $t0 = 0; .foreach (p { k }) { .if ($spat(\"p\", \"nt!EtwTiLogProtectExecVm*\")) { r $t0 = 1; .break } }; .if($t0 = 0) { gc }"
1: kd> g
```

The call stack shows a call to `ntdll!NtProtectVirtualMemory()` from user mode, which is handled by the System Service Dispatch Table (SSDT). Control then passes to `nt!NtProtectVirtualMemory()`, where `nt!EtwTiLogProtectExecVm()` is called.

The `UserDataCount` parameter in `nt!EtwWrite()` contains the number of `EVENT_DATA_DESCRIPTOR` structures in the `UserData` array. This value is stored in the R9 register and can be used to display all entries in the `UserData` array, stored in RAX (see Listing 12-6).

```plaintext
1: kd> dq @rax L(@r9*2)
ffff9285`03dc67e0 ffffa608`af571740 00000000`00000004
ffff9285`03dc67f0 ffffa608`af571768 00000000`00000008
--snip--
```

Each line in the WinDbg output shows a pointer to the data and the size of the data in bytes. To identify what each descriptor describes, we use the provider GUID `f4e1897c-bb5d-5668-f1d8-040f4d8dd344`.

#### Retrieving the Provider Manifest
ETW providers can register an event manifest, which describes the events and their contents. We can list these providers using `logman.exe` (see Listing 12-7).

```plaintext
PS > logman query providers | findstr /i "{f4e1897c-bb5d-5668-f1d8-040f4d8dd344}"
Microsoft-Windows-Threat-Intelligence {F4E1897C-BB5D-5668-F1D8-040F4D8DD344}
```

Using `PerfView` to dump the provider manifest (see Listing 12-8):

```plaintext
PS > PerfView64.exe userCommand DumpRegisteredManifest Microsoft-Windows-Threat-Intelligence
```

The manifest sections related to virtual memory protection can be found in the `<EventData>` tags (see Listing 12-9).

By comparing the data sizes in the manifest with the `Size` field of the `EVENT_DATA_DESCRIPTOR` structures, we can extract individual fields of the event. For example, `ProtectionMask` and `LastProtectionMask` correspond to `ntdll!NtProtectVirtualMemory()`'s `NewAccessProtection` and `OldAccessProtection` (see Listing 12-10).

```plaintext
1: kd> dq @rax L(@r9*2)
--snip--
ffff9285`03dc6940 ffff9285`03dc69c0 00000000`00000004
ffff9285`03dc6950 ffff9285`03dc69c8 00000000`00000004
1: kd> dd ffff9285`03dc69c0 L1
1 ffff9285`03dc69c0 00000004
1: kd> dd ffff9285`03dc69c8 L1
2 ffff9285`03dc69c8 00000020
```

This shows that `LastProtectionMask` was originally `PAGE_EXECUTE_READ` (0x20) and has been changed to `PAGE_READWRITE` (0x4), indicating that removing the executable flag in the memory allocation caused the event to fire.

#### Determining the Source of an Event
We have explored the flow from a user-mode function call to an event being emitted for a single sensor, `nt!EtwTiLogProtectExecVm()`. There are 11 such sensors, listed in Table 12-1, and an additional 10 sensors related to security mitigations, identified by their `EtwTim` prefix.

These sensors emit events through the `Microsoft-Windows-Security-Mitigations` provider and generate alerts about security mitigation violations.

#### Using Neo4j to Discover Sensor Triggers
To determine what causes the sensors to emit events, we can map paths from functions with `Nt` prefixes to functions with `EtwTi` prefixes. Tools like Ghidra and IDA offer call-tree mapping, but their performance can be limited.

Neo4j, a graph database, can map relationships between nodes and edges. It supports Cypher, a query language that lies between SQL and ASCII art.

#### Getting a Dataset to Work with Neo4j
To work with Neo4j, we need a structured dataset, typically in JSON format, defining nodes and edges. We load this dataset into the Neo4j database using functions from the Awesome Procedures on Cypher add-on library.

We can use the open-source Ghidra script `CallTreeToJSON.py` to iterate over all functions, collect attributes, and create JSON objects for Neo4j ingestion (see Listing 12-11).

```cypher
CREATE CONSTRAINT function_name ON (n:Function) ASSERT n.name IS UNIQUE
CALL apoc.load.json("file:///xref.json") YIELD value
UNWIND value as func
MERGE (n:Function {name: func.FunctionName})
SET n.entrypoint=func.EntryPoint
WITH n, func
UNWIND func.CalledBy as cb
MERGE (m:Function {name:cb})
MERGE (m)-[:Calls]->(n)
```

#### Viewing the Call Trees
To ensure everything is set up correctly, we write a query to map the path to the `EtwTiLogProtectExecVm` sensor (see Listing 12-12).

```cypher
MATCH p=shortestPath((f:Function)-[rCalls*1..]->(t:Function {name: "EtwTiLogProtectExecVm"}))
WHERE f.name STARTS WITH 'Nt' RETURN p;
```

This query returns the shortest paths from any function name starting with `Nt` to the specified sensor function (see Figure 12-3).

For more complex sensors, such as `nt!EtwTiLogMapExecView()`, the call tree can be 12 levels deep, leading back to `nt!NtCreatePagingFile()` (see Figure 12-4).

To avoid information overload, we can scope queries to a depth of three to four levels, returning APIs directly responsible for calling the sensor function (see Figure 12-5).

Performing this analysis across `EtwTi` sensor functions provides valuable insights into the conditions under which events are emitted.