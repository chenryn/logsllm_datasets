used by nt!EtwProviderEnabled() and an EVENT_DESCRIPTOR structure correspond-
ing to the event to be logged. Logic determines which EVENT_DESCRIPTOR to use 
based on the calling thread’s context (either user or kernel).
Following these checks, the EtwTi function builds out a structure with 
functions such as nt!EtwpTiFillProcessIdentity() and nt!EtwpTiFillVad(). This 
structure is not easily statically reversed, but thankfully, it is passed into 
nt!EtwWrite(), a function used for emitting events. Let’s use a debugger to 
examine it.
Determining the Events Emitted
At this point, we know the syscall passes data to nt!EtwTiLogProtectExecVm(), 
which emits an event over ETW using the EtwTi provider. The particular 
event emitted is still unknown, though. To collect this information, let’s view 
the data in the PEVENT_DATA_DESCRIPTOR passed to nt!EtwWrite() using WinDbg.
By placing a conditional breakpoint on the function that writes the 
ETW event when its call stack includes nt!EtwTiLogProtectExecVm(), we can 
further investigate the parameters passed to it (Listing 12-5).
1: kd> bp nt!EtwWrite "r $t0 = 0;
.foreach (p { k }) {
 .if ($spat(\"p\", \"nt!EtwTiLogProtectExecVm*\")) {
r $t0 = 1; .break
  }
};
.if($t0 = 0) { gc }"
1: kd> g
nt!EtwWrite
fffff807`7b693500 4883ec48  
sub rsp, 48h
1: kd> k
 # Child-SP  
RetAddr  
Call Site
00 ffff9285`03dc6788 fffff807`7bc0ac99 nt!EtwWrite
01 ffff9285`03dc6790 fffff807`7ba96860 nt!EtwTiLogProtectExecVm+0x15c031 1
02 ffff9285`03dc69a0 fffff807`7b808bb5 nt!NtProtectVirtualMemory+0x260
03 ffff9285`03dc6a90 00007ffc`48f8d774 nt!KiSystemServiceCopyEnd+0x25 2
04 00000025`3de7bc78 00007ffc`46ab4d86 0x00007ffc`48f8d774
05 00000025`3de7bc80 000001ca`0002a040 0x00007ffc`46ab4d86
06 00000025`3de7bc88 00000000`00000008 0x000001ca`0002a040
07 00000025`3de7bc90 00000000`00000000 0x8
Listing 12-5: Using a conditional breakpoint to watch calls to nt!EtwTiLogProtectExecVm()
This call stack shows a call to ntdll!NtProtectVirtualMemory() surfacing 
from user mode and hitting the System Service Dispatch Table (SSDT) 2, 
which is really just an array of addresses to functions that handle a given 
syscall. Control is then passed up to nt!NtProtectVirtualMemory() where the 
call to nt!EtwTiLogProtectExecVm() 1 is made, just as we identified earlier 
through static analysis.
Evading EDR (Early Access) © 2023 by Matt Hand
Microsoft-Windows-Threat-Intelligence   219
The UserDataCount parameter passed to nt!EtwWrite() contains the num-
ber of EVENT_DATA_DESCRIPTOR structures in its fifth parameter, UserData. This 
value will be stored in the R9 register and can be used to display all entries 
in the UserData array, stored in RAX. This is shown in the WinDbg output in 
Listing 12-6.
1: kd> dq @rax L(@r9*2)
ffff9285`03dc67e0 ffffa608`af571740 00000000`00000004
ffff9285`03dc67f0 ffffa608`af571768 00000000`00000008
ffff9285`03dc6800 ffff9285`03dc67c0 00000000`00000008
ffff9285`03dc6810 ffffa608`af571b78 00000000`00000001
--snip--
Listing 12-6: Listing the values in UserData using the number of entries stored in R9
The first 64-bit value on each line of the WinDbg output is a pointer 
to the data, and the next one describes the size of the data in bytes. 
Unfortunately, this data isn’t named or labeled, so discovering what each 
descriptor describes is a manual process. To decipher which pointer holds 
which type of data, we can use the provider GUID collected earlier in this 
section, f4e1897c-bb5d-5668-f1d8-040f4d8dd344.
As discussed in Chapter 8, ETW providers can register an event mani-
fest, which describes the events emitted by the provider and their contents. 
We can list these providers using the logman.exe utility, as shown in  
Listing 12-7. Searching for the GUID associated with the EtwTi provider 
reveals that the provider’s name is Microsoft-Windows-Threat-Intelligence.
PS > logman query providers | findstr /i "{f4e1897c-bb5d-5668-f1d8-040f4d8dd344}"
Microsoft-Windows-Threat-Intelligence {F4E1897C-BB5D-5668-F1D8-040F4D8DD344}
Listing 12-7: Retrieving the provider’s name using logman.exe
After identifying the name of the provider, we can pass it to tools such 
as PerfView to get the provider manifest. When the PerfView command 
in Listing 12-8 completes, it will create the manifest in the directory from 
which it was called.
PS > PerfView64.exe userCommand DumpRegisteredManifest Microsoft-Windows-Threat-Intelligence
Listing 12-8: Using PerfView to dump the provider manifest
You can view the sections of this manifest that relate to the protection 
of virtual memory in the generated XML. The most important section for 
understanding the data in the UserData array is in the  tags, shown 
in Listing 12-9.
[. . .]
Evading EDR (Early Access) © 2023 by Matt Hand
220   Chapter 12
Listing 12-9: ETW provider manifest dumped by PerfView
Comparing the data sizes specified in the manifests with the Size field 
of the EVENT_DATA_DESCRIPTOR structures reveals that the data appears in the 
same order. Using this information, we can extract individual fields of the 
event. For example, ProtectionMask and LastProtectionMask correlate to  
ntdll!NtProtectVirtualMemory()’s NewAccessProtection and OldAccessProtection, 
respectively. The last two entries in the UserData array match their data 
type. Listing 12-10 shows how we can investigate these values using 
WinDbg.
1: kd> dq @rax L(@r9*2)
--snip--
ffff9285`03dc6940 ffff9285`03dc69c0 00000000`00000004
ffff9285`03dc6950 ffff9285`03dc69c8 00000000`00000004
1: kd> dd ffff9285`03dc69c0 L1
1 ffff9285`03dc69c0 00000004
1: kd> dd ffff9285`03dc69c8 L1
2 ffff9285`03dc69c8 00000020
Listing 12-10: Evaluating protection mask changes using WinDbg
We can inspect the values’ contents to see that LastProtectionMask 2 was 
originally PAGE_EXECUTE_READ (0x20) and has been changed to PAGE_READWRITE 
(0x4) 1. Now we know that removing the executable flag in the memory 
allocation caused the event to fire.
Evading EDR (Early Access) © 2023 by Matt Hand
Microsoft-Windows-Threat-Intelligence   221
Determining the Source of an Event
Although we’ve explored the flow from a user-mode function call to an 
event being emitted, we’ve done so for a single sensor only, 
nt!EtwTiLogProtectExecVm(). At the time of this writing, there are 11 of these 
sensors, shown in Table 12-1.
Table 12-1: Security and Security Mitigation Sensors
Microsoft-Windows-Threat-
Intelligence Sensors
Microsoft-Windows-Security- 
Mitigations Sensors
EtwTiLogAllocExecVm
EtwTimLogBlockNonCetBinaries
EtwTiLogDeviceObjectLoadUnload
EtwTimLogControlProtectionKernelModeReturn 
Mismatch
EtwTiLogDriverObjectLoad
EtwTimLogControlProtectionUserModeReturn 
Mismatch
EtwTiLogDriverObjectUnLoad
EtwTimLogProhibitChildProcessCreation
EtwTiLogInsertQueueUserApc
EtwTimLogProhibitDynamicCode
EtwTiLogMapExecView
EtwTimLogProhibitLowILImageMap
EtwTiLogProtectExecView
EtwTimLogProhibitNonMicrosoftBinaries
EtwTiLogReadWriteVm
EtwTimLogProhibitWin32kSystemCalls
EtwTiLogSetContextThread
EtwTimLogRedirectionTrustPolicy
EtwTiLogSuspendResumeProcess
EtwTimLogUserCetSetContextIpValidationFailure
EtwTiLogSuspendResumeThread
An additional 10 sensors relate to security mitigations and are identi-
fied by their EtwTim prefix. These sensors emit events through a different 
provider, Microsoft-Windows-Security-Mitigations, but function identically 
to the normal EtwTi sensors. They’re responsible for generating alerts about 
security mitigation violations, such as the loading of low-integrity-level or 
remote images or the triggering of Arbitrary Code Guard, based on system 
configuration. While these exploit mitigations are out of scope for this 
book, you’ll occasionally encounter them while investigating EtwTi sensors.
Using Neo4j to Discover the Sensor Triggers
What causes the sensors in Table 12-1 to emit events? Thankfully, there is 
a relatively easy way for us to figure this out. Most measure activity coming 
from user mode, and for control to transition from user mode to kernel 
mode, a syscall needs to be made. Execution will land in functions prefixed 
with Nt after control is handed to the kernel, and the SSDT will handle the 
entry-point resolution.
Therefore, we can map paths from functions with Nt prefixes to functions 
with EtwTi prefixes to identify APIs that cause events to be emitted due to 
actions in user mode. Ghidra and IDA both offer call-tree mapping functions 
that serve this purpose generally. Their performance can be limited, however. 
Evading EDR (Early Access) © 2023 by Matt Hand
222   Chapter 12
For example, Ghidra’s default search depth is five nodes, and longer searches 
take exponentially longer. They’re also exceedingly difficult to parse.
To address this, we can use a system built for identifying paths, such 
as the graph database Neo4j. If you’ve ever used BloodHound, the attack 
path-mapping tool, you’ve used Neo4j in some form. Neo4j can map the 
relationships (called edges) between any kind of item (called nodes). For 
example, BloodHound uses Active Directory principals as its nodes and 
properties like access control entries, group membership, and Microsoft 
Azure permissions as edges.
In order to map nodes and edges, Neo4j supports a query language 
called Cypher whose syntax lies somewhere between Structured Query 
Language (SQL) and ASCII art and can often look like a drawn diagram. 
Rohan Vazarkar, one of the inventors of BloodHound, wrote a fantastic 
blog post about Cypher queries, “Intro to Cypher,” that remains one of the 
best resources on the topic.
Getting a Dataset to Work with Neo4j
To work with Neo4j, we need a structured dataset, typically in JSON for-
mat, to define nodes and edges. We then load this dataset into the Neo4j 
database using functions from the Awesome Procedures on Cypher add-on 
library (such as apoc.load.json()). After ingestion, the data is queried using 
Cypher in either the web interface hosted on the Neo4j server or a con-
nected Neo4j client.
We must extract the data needed to map call graphs into the graph 
database from Ghidra or IDA using a plug-in, then convert it to JSON. 
Specifically, each entry in the JSON object needs to have three properties: a 
string containing the name of the function that will serve as the node, the 
entry point offset for later analysis, and the outgoing references (in other 
words, the functions being called by this function) to serve as the edges.
The open source Ghidra script CallTreeToJSON.py iterates over all func-
tions in a program that Ghidra has analyzed, collects the attributes of inter-
est, and creates new JSON objects for ingestion by Neo4j. To map the paths 
related to the EtwTi sensors, we must first load and analyze ntoskrnl.exe, the 
kernel image, in Ghidra. Then we can load the Python script into Ghidra’s 
Script Manager and execute it. This will create a file, xrefs.json, that we can 
load into Neo4j. It contains the Cypher commands shown in Listing 12-11.
CREATE CONSTRAINT function_name ON (n:Function) ASSERT n.name IS UNIQUE
CALL apoc.load.json("file:///xref.json") YIELD value
UNWIND value as func
MERGE (n:Function {name: func.FunctionName})
SET n.entrypoint=func.EntryPoint
WITH n, func
UNWIND func.CalledBy as cb
MERGE (m:Function {name:cb})
MERGE (m)-[:Calls]->(n)
Listing 12-11: Loading call trees into Ghidra
Evading EDR (Early Access) © 2023 by Matt Hand
Microsoft-Windows-Threat-Intelligence   223
After importing the JSON file into Neo4j, we can query the dataset 
using Cypher.
Viewing the Call Trees
To make sure everything is set up correctly, let’s write a query to map the 
path to the EtwTiLogProtectExecVm sensor. In plain English, the query in 
Listing 12-12 says, “Return the shortest paths of any length from any func-
tion name that begins with Nt to the sensor function we specify.”
MATCH p=shortestPath((f:Function)-[rCalls*1..]->(t:Function {name: "EtwTiLogProtectExecVm"}))
WHERE f.name STARTS WITH ‘Nt’ RETURN p;
Listing 12-12: Mapping the shortest paths between Nt functions and the EtwTiLogProtectExecVm sensor
When entered into Neo4j, it should display the path shown in Figure 12-3.
Figure 12-3: A simple path between a  
syscall and an EtwTi function
The call trees for other sensors are far more complex. For example, the 
nt!EtwTiLogMapExecView() sensor’s call tree is 12 levels deep, leading all the 
way back to nt!NtCreatePagingFile(). You can see this by modifying the sen-
sor name in the previous query, generating the path in Figure 12-4.
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
Calls
NtReplaceParti…
EtwTiLogMapE…
NtSetInformatio…
NtMapViewOfS…
NtSetSystemInf…
NtCreateUserP…
NtMapViewOfS…
NtManageHotP…
NtCreateProcess
NtCreateProce…
NtCreatePartition
NtSetSystemP…
IoReplacePartit…
PnpReplacePa…
PnprLoadPlugi…
MmLoadSyste…
MiApplyRequir…
MiLoadHotPatch
MiHotPatchAllP…
MiHotPatchPro…
MiHotPatchIma…
MiPerformImag…
MiMapViewOfS…
FUN_1407f43ae
FUN_1405df72c
MiSetImageHot…
PspAllocatePro…
MmInitializePro…
MiMapProcess…
MmMapViewOf…
PspCreateProc…
PspAllocatePar…
PspCreateParti…
PsCreateMinim…
PopTransitionS…
PopAllocateHib…
IoGetDumpStack
IopLoadCrashd…
Figure 12-4: Paths from nt!NtCreatePagingFile() to nt!EtwTiLogMapExecView()
Evading EDR (Early Access) © 2023 by Matt Hand
224   Chapter 12
As this example demonstrates, many syscalls indirectly hit the sensor. 
Enumerating these can be useful if you’re looking for coverage gaps, but 
the amount of information generated can quickly become overwhelming.
You might want to scope your queries to a depth of three to four levels 
(representing two or three calls); these should return the APIs that are 
directly responsible for calling the sensor function and hold the conditional 
logic to do so. Using the previous example, a scoped query would show that 
the syscall ntdll!NtMapViewOfSection() calls the sensor function directly, while 
the syscall ntdll!NtMapViewOfSectionEx() calls it indirectly via a memory man-
ager function, as shown in Figure 12-5.
Figure 12-5: Scoped query that returns more  
useful results
Performing this analysis across EtwTi sensor functions yields informa-