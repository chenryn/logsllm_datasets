allocation sites and identiﬁed the object types that can be allocated
at each site. This corresponds to 95% of the allocated pool blocks
(94% of the allocated bytes). We were not able to do this for 100%
of the pool blocks simply because of the very large number of dif-
ferent allocation sites for the remaining 5%.
Since our ground truth does not specify the exact object layout,
we do not know the exact number of objects that exist in the pool
blocks. Therefore, we cannot measure KOP’s coverage based on
the fraction of correctly identiﬁed objects. Instead, we measured
the coverage based on bytes, since we know the total number of
bytes in allocated pool blocks.
For a byte b inside a pool block that is part of our ground truth,
we say b is correctly mapped if KOP identiﬁed a single object
which contains b’s location and, under our ground truth, the ob-
ject type is contained in the pool block. If b is mapped to an object
of incorrect type or more than one type, we say it was incorrectly
561Clean-Boot (%) – Total bytes: 42775648
Stress-Test (%) – Total bytes: 50588704
Type
Basic
KOP
CM IM MG UM MOG
25.4
4.3
0.4
93.7
68.9
0.6
0.0
0.0
1.4
5.3
VC
26.9
99.3
GC
26.8
98.9
CM IM MG UM MOG
26.6
4.0
0.4
93.8
68.0
0.8
0.0
0.0
1.4
5.0
VC
28.1
99.2
GC
28.0
98.8
Table 2: Coverage results for the basic traversal and KOP when applied to the clean-boot and stress-test memory snapshots. CM
= Correctly Mapped, IM = Incorrectly Mapped, UM = Unveriﬁed Map, MG = Missed in Ground-truth, MOG = Missed Outside
Ground-truth, VC = Veriﬁed Coverage and GC = Gross Coverage. The numbers in the table are percentages of the total number of
bytes.
mapped by KOP. Finally, if it was not mapped at all, we say it was
missed under ground-truth. Let CM, IM and MG be the sets of
bytes that are classiﬁed as correctly mapped, incorrectly mapped
and missed under ground-truth, respectively. We deﬁne veriﬁed
coverage as
|CM |
|CM | + |IM | + |M G|
,
where | · | denotes the set size. We chose the allocation sites for
which we computed the ground truth based only on the number of
pool blocks they cover and not based on any properties of KOP.
Therefore, we believe that the veriﬁed coverage has the character
of a statistical sample and that it is representative of KOP’s overall
coverage.
To gain further conﬁdence, we compute a second measure of
coverage. Consider any byte b in a pool block that is not in our
ground truth. We say that b is an unveriﬁed mapping if KOP identi-
ﬁed some object at its location and missed outside of ground-truth
otherwise. Let UM and MOG denote the respective sets. We deﬁne
gross coverage as
|CM | + |U M |
|CM | + |IM | + |M G| + |U M | + |M OG|
.
In our coverage experiments, we compared KOP with a basic
traversal algorithm. Like previous approaches [3, 22], the basic
traversal follows only typed pointers and doubly linked lists with-
out resolving type ambiguities and recognizing dynamic arrays.
The only difference is that our basic traversal algorithm uses the
target types of linked lists automatically derived from KOP’s static
analysis, while previous approaches relied on manual efforts. To
demonstrate KOP’s robustness with different workloads, we tested
it on two different memory snapshots. One was collected right after
the system was booted up, and the other was collected after running
a large number of system and user processes on the system for 15
minutes. We refer to these two memory snapshots as the clean-boot
and stress-test snapshot.
The experimental results for the coverage of KOP and the ba-
sic traversal algorithm are shown in Table 2. The total size of the
dynamic kernel data is 42.7MB in the clean-boot memory snap-
shot and 50.6MB in the stress-test snapshot.
In both snapshots,
KOP’s veriﬁed coverage and gross coverage are 99%, whereas for
the basic traversal it is only 28%. Since our ground truth covers
94% of the dynamic kernel data, the gross coverage is very close
to the veriﬁed coverage, as shown in Table 2. We manually inves-
tigated some of the cases where KOP either identiﬁed the objects
incorrectly or missed them completely. We found that they were
due to three reasons: KOP incorrectly resolving type ambiguities
or recognizing dynamic arrays, dangling pointers and unorthodox
Windows kernel implementation techniques that we were not able
to identify. In Section 8, we will discuss future research directions
that can help mitigate these errors.
6.1.3 Performance
We measured KOP’s running time when analyzing twelve dis-
tinct memory snapshots used in our experiments (including those
used on SFPD’s and GHOST’s evaluations). We used a 4GHz In-
tel Xeon Duo Core machine with 3GB RAM. The median running
time was 8 minutes, including the overhead of reading the memory
snapshot stored on the disk. We consider this running time to be
acceptable for ofﬂine analysis.
6.2 SFPD
The goal of SFPD is to identify all malicious function pointers in
the kernel memory. We evaluated SFPD by analyzing the memory
snapshots of systems infected with kernel-mode malware. Speciﬁ-
cally, given a malware sample, we executed it in the Windows Vista
SP1 virtual machine we used to evaluate KOP, and then generated
a memory snapshot after waiting for a few seconds.
For each memory snapshot, we manually built the ground truth
of all malicious function pointers. More precisely, we ﬁrst manu-
ally identiﬁed the code regions occupied by the malware based on
our instrumentation logs. We then conducted an exhaustive mem-
ory search for memory locations pointing to the regions containing
the malware’s code. We then manually veriﬁed each of them to
check if they were malicious function pointers.
In our experiments, we tested SFPD with eight real-world kernel
malware samples collected from a public database [17]. Running
on a 4GHz Intel Xeon Duo Core machine with 3GB RAM, SFPD
ﬁnishes a scan of a memory snapshot in less than two minutes,
excluding the time KOP takes to map kernel objects in the snapshot.
Our experimental results for SFPD are shown in Table 3. We do
not report results on the System Service Dispatch Tables (SSDTs)
and the Interrupt Dispatch Table (IDT) hooks because these are
static data and therefore not our focus. We compared SFPD with a
baseline algorithm which is similar to previous approaches [3, 22].
This baseline algorithm inspects explicit function pointers based on
the kernel objects identiﬁed by the basic traversal. SFPD identiﬁed
all the malicious function pointers for all eight malware samples
with zero false alarms. However, the baseline algorithm missed ma-
licious explicit function pointers placed by seven of the eight mal-
ware samples, as well as all of the implicit function pointers. This
was a result of the basic traversal’s low memory coverage, as well
as its lack of knowledge of implicit function pointers. For instance,
the basic traversal fails to identify the EX_CALLBACK_ROUTINE_
BLOCK object added by the malware because it is referenced by the
global variable PspCreateProcessNotifyRoutine via a generic pointer.
The baseline algorithm is able to detect the existence of all the
eight real-world malware samples we tested. After all, to determine
that a system is infected, it is enough to identify just one malicious
function pointer (including entries in SSDTs or IDT not shown in
Table 3). However, it is straightforward to create a new rootkit that
only tampers with function pointers missed by the baseline algo-
rithm. For instance, a rootkit can hook an EX_CALLBACK_ROUTINE
562Name
Malicious function pointer Type Baseline
SFPD
Trojan.Dropper.Farﬂi.G
VirTool: WinNT/Syspro.A
TrojanDropper: Win32/Cutwail.K
VirTool: WinNT/Odsrootkit.C
Backdoor: WinNT/Syzor.A
Rootkit.Win32.Agent.fwz
Trojan: Win32/DriverByPass
Backdoor: Win32/Haxdoor
DRIVER_OBJECT.DriverInit
DRIVER_OBJECT.MajorFunction[]
EX_CALLBACK_ROUTINE_BLOCK.Function
ETHREAD.StartAddress
ETHREAD.Win32StartAddress
DRIVER_OBJECT.DriverInit
DRIVER_OBJECT.MajorFunction[]
FAST_IO_DISPATCH.*
FS_FILTER_CALLBACKS.*
NOTIFICATION_PACKET.NotiﬁcationRoutine
DRIVER_OBJECT.DriverInit
DRIVER_OBJECT.MajorFunction[]
EX_CALLBACK_ROUTINE_BLOCK.Function
ETHREAD.StartAddress
ETHREAD.Win32StartAddress
DRIVER_OBJECT.DriverInit
DRIVER_OBJECT.DriverUnload
DRIVER_OBJECT.MajorFunction[]
ETHREAD.StartAddress
ETHREAD.Win32StartAddress
DRIVER_OBJECT.DriverInit
DRIVER_OBJECT.MajorFunction[]
EX_CALLBACK_ROUTINE_BLOCK.Function
ETHREAD.StartAddress
ETHREAD.Win32StartAddress
DRIVER_OBJECT.DriverInit
DRIVER_OBJECT.DriverUnload
DRIVER_OBJECT.MajorFunction[]
EX_CALLBACK_ROUTINE_BLOCK.Function
KAPC.KernelRoutine
DRIVER_OBJECT.DriverInit
DRIVER_OBJECT.MajorFunction[]
E
E
E
I
I
E
E
E
E
E
E
E
E
I
I
E
E
E
I
I
E
E
E
I
I
E
E
E
E
E
E
E
0/2
0/30
0/1
0/2
0/2
1/1
28/28
21/21
12/12
1/1
0/1
2/6
0/1
0/1
0/1
0/1
0/1
4/4
0/1
0/1
0/1
1/1
0/1
0/1
0/1
0/1
0/1
4/4
0/1
6/6
0/1
0/2
2/2
30/30
1/1
2/2
2/2
1/1
28/28
21/21
12/12
1/1
1/1
6/6
1/1
1/1
1/1
1/1
1/1
4/4
1/1
1/1