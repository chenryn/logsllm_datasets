    NATIVE_SECUARTY_MANAGER= org.beetl.core.DefaultNativeSecurityManager
定界符和占位符
默认为
    hello 2+3=${result}
同样可以自定义定界符和占位符
注释
    //
    /**/
属性
  1. 使用`${xxx.name}`
  2. 如果为数组或者List, `${user[0]}`
  3. 需要知道Java集合，数组长度，统一用虚拟属性`~size`来表示
        var list=[1,2,3];
    var size = list.~size
函数调用
  * **print** 打印一个对象 print([user.name](http://user.name/));
  * **json** ，将对象转成json字符串，如 var data = json(userList) 可以跟一个序列化规则 如,var data = json(userList,"[*].id:i"),具体参考 
  * **decode** 一个简化的if else 结构，如 decode(a,1,"a=1",2,"a=2","不知道了"),如果a是1，这decode输出"a=1",如果a是2，则输出"a==2", 如果是其他值，则输出"不知道了"
  * **flush** 强制io输出。
  * **pageCtx** ，仅仅在web开发中，设置一个变量，然后可以在页面渲染过程中，调用此api获取，如pageCtx("title","用户添加页面")，在其后任何地方，可以pageCtx("title") 获取该变量
  * **type.new** 创建一个对象实例，如 var user = type.new("com.xx.User"); 如果配置了IMPORT_PACKAGE，则可以省略包名，type.new("User")
  * **[type.name](http://type.name/)** 返回一个实例的名字，var userClassName = [type.name](http://type.name/)(user),返回"User"
  * **global** 返回一个全局变量值，参数是一个字符串，如 var user = global("user_"+i);
  * **cookie** 返回指定的cookie对象 ，如var userCook = cookie("user"),allCookies = cookie();
安全输出
  1. 如果变量为空，不进行输出
可以在变量引用后加上 `!` 以提醒beetl这是一个安全输出的变量，变量确实有可能不存在
如 `${user.wife.name!
}`,即使user不存在，或者user为null，或者user.wife为null，或者user.wife.name为null beetl都不将输出
可以在!后增加一个常量（字符串，数字类型等），或者另外一个变量，方法，本地调用，作为默认输出，譬如：
        ${user.wife.name!"单身"}`，如果user为null，或者user.wife为null，或者user.wife.name为null，输出`单身
调用Java方法和属性
    ${@user.getMaxFriend(“lucy”)}
    ${@user.maxFriend[0].getName()}
    ${@com.xxxx.constants.Order.getMaxNum()}
    ${@com.xxxx.User$Gender.MAN}
可以调用instance的public方法和属性，也可以调用静态类的属性和方法 ,需要加一个
@指示此调用是直接调用class，其后的表达式是java风格的。
  * GroupTemplate可以配置为不允许直接调用Class以增强安全性，具体请参考配置文件.
  * 也可以通过安全管理器配置到底哪些类Beetl不允许调用，具体请参考高级用法。默认情况，`java.lang.Runtime`,和 `java.lang.Process` 不允许在模板里调用。你自己的安全管理器也可以配置为不能直接访问DAO类（避免了以前 JSP 可以访问任意代码带来的危害）
自定义安全管理器
所有模板的本地调用都需要通过安全管理器校验，默认需要实现NativeSecurityManager 的public boolean
permit(String resourceId, Class c, Object target, String method) 方法
如下是默认管理器的实现方法
    public class DefaultNativeSecurityManager implements NativeSecurityManager{
      @Override
      public boolean permit(String resourceId, Class c, Object target, String method){
        if (c.isArray()){
          //允许调用，但实际上会在在其后调用中报错。不归此处管理
          return true;
        }
        String name = c.getSimpleName();
        String pkg = c.getPackage().getName();
        if (pkg.startsWith("java.lang")){
          if (name.equals("Runtime") || name.equals("Process") || name.equals("ProcessBuilder")
              || name.equals("System")){
            return false;
          }
        }
        return true;
      }
    }
在这个CMS中，存在有很多地方进行了渲染操作，举个例子，就是在用户的个人信息页面
这里存在有模板渲染的处理
在备注这个输入点，CMS没有任何过滤就进行了渲染
这里的模板语法是获取`model`中的remark值，如果这个值不存在将会使用空字符串替代
我们这里按照其他模板引擎的数据，将备注修改为了`${4+4}`，但是在渲染之后并没有执行这个模板语法，也即是渲染出4这个值
转而显示的是`${4+4}`这个字符串
这里就和我们之前学习的`freemarker`这个模板引擎很相似，同样利用的点是在模板语法本身，不同于velocity等引擎，如果直接渲染用户输入payload将会被转码而失效
所以这里的利用场景应该和`freemarker`一样，为上传点或者修改模板文件点，接下来我们寻找该CMS的上传位置
仔细看了一圈，前台并没有什么上传点，之后选择看看后台
这里存在有一个模板管理的功能
这里能够编辑模板，我们可以在这里对模板文件进行编辑
添加上我们的payload
    ${@java.lang.Class.forName("java.lang.Runtime").getMethod("exec",
    @java.lang.Class.forName("java.lang.String")).invoke(
    @java.lang.Class.forName("java.lang.Runtime").getMethod("getRuntime",null).invoke(null,null),"calc")}
当我们使用这个模板的时候将会触发这个payload
这里解释一下这个payload的构造
根据前面我们对beelt的了解，我们知道它内置了一个调用本地Class的安全策略
    # 指定本地Class调用的安全策略
    NATIVE_SECUARTY_MANAGER= org.beetl.core.DefaultNativeSecurityManager
我们跟进这个类，在其`permit`方法中存在有限制操作
    return !pkgName.startsWith("java.lang") || !className.equals("Runtime") && !className.equals("Process") && !className.equals("ProcessBuilder") && !className.equals("System");
默认是不能够直接进行系统调用的，我们这里利用的是Java的反射机制，结合beelt的模板语法构造恶意payload
#### SQL
在前端中几乎所有的数据库交互都是使用的Jfinal框架中的接口，使用的是预编译的方法，有效避免了SQL注入的产生，但是在后台中存在有大量的SQL注入，未经过滤就和sql语句进行拼接，造成了SQl注入的产生
举个例子
在admin后台中
在查看素材的时候，将会调用`ImageShowController`类中的`list`方法
这里直接将获取的orderBy值和sql语句进行了拼接
造成了Mysql数据库的order by注入
这里我使用了`updatexml`语句进行报错注入
其他位置还有很多，触发原因都是类似的