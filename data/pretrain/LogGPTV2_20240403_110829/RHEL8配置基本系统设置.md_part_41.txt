::: itemizedlist
**流程**
-   执行以下命令：
    ``` literallayout
    # yum list langpacks-*
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_using-langpacks.html#working-with-langpacks_assembly_using-langpacks}使用 RPM 弱依赖项语言包 {.title}
:::
本节论述了在查询基于 RPM
的弱语言包、安装或删除语言支持时您可能需要执行的多个操作。
::: section
::: titlepage
## []{#assembly_using-langpacks.html#listing-already-installed-language-support_working-with-langpacks}列出已安装的语言支持 {.title}
:::
要列出已安装的语言支持，请使用以下步骤。
::: itemizedlist
**流程**
-   执行以下命令：
    ``` literallayout
    # yum list installed langpacks*
    ```
:::
:::
::: section
::: titlepage
## []{#assembly_using-langpacks.html#checking-the-availability-of-language-support_working-with-langpacks}检查语言支持的可用性 {.title}
:::
要检查是否有任何语言提供语言支持，请使用以下步骤：
::: itemizedlist
**流程**
-   执行以下命令：
:::
``` literallayout
# yum list available langpacks*
```
:::
::: section
::: titlepage
## []{#assembly_using-langpacks.html#listing-packages-installed-for-a-language_working-with-langpacks}列出为语言安装的软件包 {.title}
:::
要列出为任何语言安装的软件包，请使用以下步骤：
::: itemizedlist
**流程**
-   执行以下命令：
    ``` literallayout
    # yum repoquery --whatsupplements langpacks-
    ```
:::
:::
::: section
::: titlepage
## []{#assembly_using-langpacks.html#installing-language-support_working-with-langpacks}安装语言支持 {.title}
:::
要添加新的语言支持，请使用以下步骤：
::: itemizedlist
**流程**
-   执行以下命令：
    ``` literallayout
    # yum install langpacks-
    ```
:::
:::
::: section
::: titlepage
## []{#assembly_using-langpacks.html#removing-language-support_working-with-langpacks}删除语言支持 {.title}
:::
要删除任何已安装的语言支持，请使用以下步骤。
::: itemizedlist
**流程**
-   执行以下命令：
    ``` literallayout
    # yum remove langpacks-
    ```
:::
:::
:::
::: section
::: titlepage
# []{#assembly_using-langpacks.html#saving-disk-space-with-glibc_assembly_using-langpacks}使用 glibc-langpack-\ 保存磁盘空间 {.title}
:::
目前，所有区域都存储在 `/usr/lib/locale/locale-archive`{.literal}
文件中，该文件需要大量磁盘空间。
在磁盘空间是一个关键问题的系统中，如容器和云镜像，或者只需要一些区域，您可以使用
glibc 语言包软件包(`glibc-langpack-`{.literal})。
要单独安装区域设置并获得较小的软件包安装空间，请使用以下步骤：
::: itemizedlist
**流程**
-   执行以下命令：
    ``` literallayout
    # yum install glibc-langpack-
    ```
:::
当使用 Anaconda 安装操作系统时，会安装
`glibc-langpack-，用于您`{.literal}
在安装过程中使用的语言以及您选择作为附加语言的语言。请注意，`glibc-all-langpacks`{.literal}
（包含所有区域）会被默认安装，因此某些区域会被重复。如果您
`为一个或多个所选语言安装了 glibc-langpack-`{.literal}，您可以
`在安装后删除 glibc-all-langpacks`{.literal} 以保存磁盘空间。
请注意，只安装所选 `glibc-langpack-`{.literal} 软件包而不是
`glibc-all-langpacks`{.literal} 会影响运行时间性能。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
如果不存在磁盘空间，则使用 `glibc-all-langpacks`{.literal}
软件包保持安装所有区域。
:::
:::
:::
[]{#getting-started-with-tcl.html}
::: chapter
::: titlepage
# []{#getting-started-with-tcl.html#getting-started-with-tcl}第 46 章 Tcl/Tk 入门 {.title}
:::
::: section
::: titlepage
# []{#getting-started-with-tcl.html#introduction-to-tcl_getting-started-with-tcl}Tcl/Tk 简介 {.title}
:::
[**[工具命令语言(Tcl)]{.application}**]{.strong}
是动态编程语言。此语言的解释器和 C 库由 `tcl`{.literal} 软件包提供。
使用 [**[Tcl]{.application}**]{.strong} 与
[**[Tk]{.application}**]{.strong}
([**Tcl/Tk**]{.strong})配合使用可创建跨平台 GUI
应用程序。[**[TK]{.application}**]{.strong} 由 `tk`{.literal}
软件包提供。
请注意，[**[Tk]{.application}**]{.strong} 可以引用以下任意一种：
::: itemizedlist
-   用于多种语言的编程工具包
-   Tk C 库绑定可用于多种语言，如 C、Ruby、Perl 和 Python
-   一个需要解释器来实例化 Tk 控制台
-   为特定 Tcl 解释器添加多个新命令的 Tk 扩展
:::
有关 Tcl/Tk 的详情，请查看 [Tcl/Tk
manual](https://www.tcl.tk/man/tcl8.6/){.link} 或 [Tcl/Tk
文档网页](https://www.tcl.tk/doc/){.link}。
:::
::: section
::: titlepage
# []{#getting-started-with-tcl.html#tcl-notable-changes_getting-started-with-tcl}Tcl/Tk 8.6 中的显著变化 {.title}
:::
Red Hat Enterprise Linux 7 [**[使用了 Tcl/Tk
8.5]{.application}**]{.strong}。在 Red Hat Enterprise Linux 8 中，Base
OS 软件仓库提供了 [**[Tcl/Tk 版本 8.6]{.application}**]{.strong}。
与 [**[Tcl/Tk [**8.5 相比，Tcl/Tk**]{.strong}
8.6]{.application}**]{.strong} 中的主要变化是：
::: itemizedlist
-   基于对象的编程支持
-   无堆栈评估实施
-   增强的例外处理
-   使用 Tcl 构建并安装的第三方软件包集合
-   启用多线程操作
-   对 SQL 数据库增强脚本的支持
-   IPv6 网络支持
-   内置 Zlib 压缩
-   列表处理
    提供了两个新命令： `lmap`{.literal} 和
    `dict map`{.literal}，它们允许在 [**[Tcl]{.application}**]{.strong}
    容器上表达转换。
-   由脚本构成的堆叠通道
    提供了两个新命令，` chan push`{.literal} 和chan pop``{=html}
    允许向 I/O 通道添加或删除转换。
:::
[**[Tk]{.application}**]{.strong} 中的主要变化包括：
::: itemizedlist
-   内置 PNG 镜像支持
-   忙碌窗口
    可以使用一个新命令
    `tk busy`{.literal}，它禁用了窗口或小部件的用户交互，并显示忙碌的光标。
-   新的字体选择对话框界面
-   Sydentd 文本支持
-   推动业务发展
:::
有关 [**[Tcl 8.5 和 Tcl [**[8.6]{.application}**]{.strong}
]{.application}**]{.strong} 之间的更改的详细列表，请参阅 [Tcl/Tk 8.6
中的更改](https://wiki.tcl.tk/21276){.link}。
:::
::: section
::: titlepage
# []{#getting-started-with-tcl.html#migrating-to-tcl_getting-started-with-tcl}迁移到 Tcl/Tk 8.6 {.title}
:::
Red Hat Enterprise Linux 7 [**[使用了 Tcl/Tk
8.5]{.application}**]{.strong}。在 Red Hat Enterprise Linux 8 中，Base
OS 软件仓库提供了 [**[Tcl/Tk 版本 8.6]{.application}**]{.strong}。
本节论述了到 [**[Tcl/Tk 8.6]{.application}**]{.strong}
的迁移路径，用于：
::: itemizedlist
-   开发人员将 [**[Tcl]{.application}**]{.strong} 扩展或嵌入
    [**[Tcl]{.application}**]{.strong} 解释程序嵌入到应用程序中
-   使用 [**[Tcl/Tk]{.application}**]{.strong}对任务编写脚本
:::
::: section
::: titlepage
## []{#getting-started-with-tcl.html#migration-path-for-tcl-developers_migrating-to-tcl}Tcl 扩展开发人员的迁移路径 {.title}
:::
要使代码与 [**[Tcl 8.6]{.application}**]{.strong} 兼容，请使用以下步骤。
::: orderedlist
**流程**
1.  重写代码以使用 `interp`{.literal} 结构。例如，如果您的代码读取
    `interp→errorLine`{.literal}，则将其重写为使用以下功能：
    ``` literallayout
    Tcl_GetErrorLine(interp)
    ```
    这是必要的，因为 [**[Tcl 8.6]{.application}**]{.strong} 限制了对
    `interp`{.literal} 结构成员的直接访问。
2.  要使代码与 [**[Tcl 8.5]{.application}**]{.strong} 和 [**[Tcl
    8.6]{.application}**]{.strong} 兼容，请在您的 C 或 C++
    应用程序标头文件中使用以下代码片段或包含
    [**[Tcl]{.application}**]{.strong} 库的扩展：
    ``` literallayout
    # include 
    # if !defined(Tcl_GetErrorLine)
    # define Tcl_GetErrorLine(interp) (interp→errorLine)
    # endif
    ```
:::
:::
::: section
::: titlepage
## []{#getting-started-with-tcl.html#migration-path-for-tcl-users_migrating-to-tcl}使用 Tcl/Tk 编写任务脚本的用户的迁移路径 {.title}
:::
在 [**[Tcl 8.6]{.application}**]{.strong}
中，大多数脚本的工作方式与之前版本的 [**[Tcl]{.application}**]{.strong}
相同。
要将代码迁移到 [**[Tcl 8.6]{.application}**]{.strong}，请使用这个步骤。
::: itemizedlist
**流程**
-   在编写可移植代码时，请确保不使用 [**[Tk
    8.6]{.application}**]{.strong} 中不再支持的命令：
    ``` literallayout
    tkIconList_Arrange
    tkIconList_AutoScan
    tkIconList_Btn1
    tkIconList_Config
    tkIconList_Create
    tkIconList_CtrlBtn1
    tkIconList_Curselection
    tkIconList_DeleteAll
    tkIconList_Double1
    tkIconList_DrawSelection
    tkIconList_FocusIn
    tkIconList_FocusOut
    tkIconList_Get
    tkIconList_Goto
    tkIconList_Index
    tkIconList_Invoke
    tkIconList_KeyPress
    tkIconList_Leave1
    tkIconList_LeftRight
    tkIconList_Motion1
    tkIconList_Reset
    tkIconList_ReturnKey
    tkIconList_See
    tkIconList_Select
    tkIconList_Selection
    tkIconList_ShiftBtn1
    tkIconList_UpDown
    ```
    请注意，您可以在 `/usr/share/tk8.6/unsupported.tcl`{.literal}
    文件中检查不支持的命令列表。
:::
:::
:::
:::