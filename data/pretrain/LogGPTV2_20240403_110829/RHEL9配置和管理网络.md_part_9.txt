默认情况下，NetworkManager 使用其内部 DHCP 客户端。但是，如果您需要 DHCP
客户端具有内置客户端未提供的功能，您也可以将 NetworkManager 配置为使用
`dhclient`{.literal}。
请注意，RHEL 不提供 `dhcpcd`{.literal}，因此 NetworkManager
无法使用这个客户端。
::: orderedlist
**步骤**
1.  使用以下内容创建
    `/etc/NetworkManager/conf.d/dhcp-client.conf`{.literal} 文件：
    ``` literallayout
    [main]
    dhcp=dhclient
    ```
    您可以将 `dhcp`{.literal} 参数设置为 `internal`{.literal} （默认）或
    `dhclient`{.literal}。
2.  如果将 `dhcp`{.literal} 参数设置为 `dhclient`{.literal}，请安装
    `dhcp-client`{.literal} 软件包：
    ``` literallayout
    # dnf install dhcp-client
    ```
3.  重启 NetworkManager：
    ``` literallayout
    # systemctl restart NetworkManager
    ```
    请注意，重启会临时中断所有网络连接。
:::
::: itemizedlist
**验证**
-   在 `/var/log/messages`{.literal} 日志文件中搜索类似如下的条目：
    ``` literallayout
    Apr 26 09:54:19 server NetworkManager[27748]:   [1650959659.8483] dhcp-init: Using DHCP client 'dhclient'
    ```
    此日志条目确认 NetworkManager 使用 `dhclient`{.literal} 作为 DHCP
    客户端。
:::
::: itemizedlist
**其他资源**
-   NetworkManager.conf(5)man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-ethernet-connection_configuring-and-managing-networking.html#configuring-the-dhcp-behavior-of-a-networkmanager-connection_configuring-an-ethernet-connection}配置 NetworkManager 连接的 DHCP 行为 {.title}
:::
DHCP 客户端在每次连接到网络时都从 DHCP 服务器请求动态 IP
地址和对应配置信息。
当您将连接配置为从 DHCP 服务器检索 IP
地址时，网络管理器（NetworkManager）从 DHCP 服务器请求 IP
地址。默认情况下，客户端会等待 45 秒时间完成此请求。当 `DHCP`{.literal}
连接启动时，dhcp 客户端会从 `DHCP`{.literal} 服务器请求 IP 地址。
::: itemizedlist
**先决条件**
-   在主机上配置了使用 DHCP 的连接。
:::
::: orderedlist
**步骤**
1.  设置 `ipv4.dhcp-timeout`{.literal} 和 `ipv6.dhcp-timeout`{.literal}
    属性。例如，要将这两个选项都设置为 `30`{.literal} 秒，请输入：
    ``` literallayout
    # nmcli connection modify connection_name ipv4.dhcp-timeout 30 ipv6.dhcp-timeout 30
    ```
    另外，将参数设置为 `infinity`{.literal}
    以配置网络管理器(NetworkManager)不会停止尝试请求并续订 IP
    地址，直到成功为止。
2.  可选：配置如果网络管理器（NetworkManager）在超时前没有接收 IPv4
    地址时的行为：
    ``` literallayout
    # nmcli connection modify connection_name ipv4.may-fail value
    ```
    如果将 `ipv4.may-fail`{.literal} 选项设置为：
    ::: itemizedlist
    -   `是`{.literal}，连接的状态取决于 IPv6 配置：
        ::: itemizedlist
        -   如果启用了 IPv6 配置并成功，NetworkManager 会激活 IPv6
            连接，不再尝试激活 IPv4 连接。
        -   如果禁用或未配置 IPv6 配置，连接会失败。
        :::
    -   `没有`{.literal}，连接会被取消激活。在这种情况下：
        ::: itemizedlist
        -   如果启用了连接的 `autoconnect`{.literal}
            属性，NetworkManager 会多次尝试激活连接，如
            `autoconnect-retries`{.literal} 属性中设置的设置。默认值为
            `4`{.literal}。
        -   如果连接仍然无法获得 DHCP 地址，则自动激活会失败。请注意，5
            分钟后，自动连接过程会再次启动，从 DHCP 服务器获取 IP 地址。
        :::
    :::
3.  可选：配置如果网络管理器（NetworkManager）在超时前没有接收 IPv6
    地址时的行为：
    ``` literallayout
    # nmcli connection modify connection_name ipv6.may-fail value
    ```
:::
::: itemizedlist
**其他资源**
-   `nm-settings(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-ethernet-connection_configuring-and-managing-networking.html#proc_configuring-multiple-ethernet-interfaces-using-a-single-connection-profile-by-interface-name_configuring-an-ethernet-connection}通过接口名称使用单一连接配置集配置多个以太网接口 {.title}
:::
在大多数情况下，一个连接配置集包含一个网络设备的设置。但是，当您在连接配置集中设置接口名称时，NetworkManager
也支持通配符。如果以太网网络之间具有动态 IP 地址分配的主机
roam，您可以使用此功能创建可用于多个以太网接口的单一连接配置集。
::: itemizedlist
**先决条件**
-   DHCP 在网络中可用
-   主机有多个以太网适配器
-   主机上不存在连接配置集
:::
::: orderedlist
**步骤**
1.  添加应用于从 `enp`{.literal} 开头的所有接口名称的连接配置集：
    ``` literallayout
    #nmcli connection add con-name Example connection.multi-connect multiple match.interface-name enp* type ethernet
    ```
:::
::: orderedlist
**验证步骤**
1.  显示单个连接配置集的所有设置：
    ``` literallayout
    #nmcli connection show Example
    ```
    ``` literallayout
    connection.id:                      Example
    ...
    connection.multi-connect:           3 (multiple)
    match.interface-name:               `enp*`
    ...
    ```
    `3`{.literal} 表示
    [**连接配置集上同时活跃的接口数量**]{.strong}，而不是连接配置集中的网络接口数量。连接配置集使用与
    `match.interface-name`{.literal}
    参数中的模式匹配的所有设备，因此连接配置集具有相同的通用唯一识别符(UUID)。
2.  显示连接的状态：
    ``` literallayout
    #nmcli connection show
    ```
    ``` literallayout
    NAME                    UUID                    TYPE     DEVICE
    ...
    Example  6f22402e-c0cc-49cf-b702-eaf0cd5ea7d1  ethernet  enp7s0
    Example  6f22402e-c0cc-49cf-b702-eaf0cd5ea7d1  ethernet  enp8s0
    Example  6f22402e-c0cc-49cf-b702-eaf0cd5ea7d1  ethernet  enp9s0
    ```
:::
::: itemizedlist
**其他资源**
-   `nmcli(1)`{.literal} man page
-   `nm-settings(5)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#configuring-an-ethernet-connection_configuring-and-managing-networking.html#proc_configuring-a-single-connection-profile-for-multiple-ethernet-interfaces-using-pci-ids_configuring-an-ethernet-connection}使用 PCI ID 为多个以太网接口配置单一连接配置集 {.title}
:::
PCI ID 是连接到该系统的设备的唯一标识符。连接配置集根据 PCI ID
列表匹配接口来添加多个设备。您可以使用这个步骤将多个设备 PCI ID
连接到单个连接配置集。
::: itemizedlist
**先决条件**
-   DHCP 服务器在网络中可用
-   主机有多个以太网适配器
-   系统中不存在连接配置集
:::
::: orderedlist
**步骤**
1.  识别设备路径。例如，要显示以 `enp`{.literal}
    开头的所有接口的设备路径，请输入：
    ``` literallayout
    #udevadm info /sys/class/net/enp* | grep ID_PATH=
    ...
    E: ID_PATH=pci-0000:07:00.0
    E: ID_PATH=pci-0000:08:00.0
    ```
2.  添加与 `0000:00:0[7-8].0`{.literal} 表达式匹配的所有 PCI ID
    的连接配置集：
    ``` literallayout
    #nmcli connection add type ethernet connection.multi-connect multiple match.path "pci-0000:07:00.0 pci-0000:08:00.0" con-name Example
    ```
:::
::: orderedlist
**验证步骤**
1.  显示连接的状态：
    ``` literallayout
    #nmcli connection show
    NAME   UUID     TYPE        DEVICE
    ...
    Example      9cee0958-512f-4203-9d3d-b57af1d88466  ethernet  enp7s0
    Example      9cee0958-512f-4203-9d3d-b57af1d88466  ethernet  enp8s0
    ...
    ```
2.  显示连接配置集的所有设置：
    ``` literallayout
    #nmcli connection show Example
    connection.id:               Example
    ...
    connection.multi-connect:    3 (multiple)
    match.path:                  pci-0000:07:00.0,pci-0000:08:00.0
    ...
    ```
:::
此连接配置集使用与 `match.path`{.literal}
参数中的模式匹配的所有设备，因此连接配置集具有相同的全局唯一标识符(UUID)。
::: itemizedlist
**其他资源**
-   `nmcli(1)`{.literal} man page
-   `nm-settings(5)`{.literal} man page
:::
:::
:::
[]{#managing-wi-fi-connections_configuring-and-managing-networking.html}
::: chapter
::: titlepage
# []{#managing-wi-fi-connections_configuring-and-managing-networking.html#managing-wi-fi-connections_configuring-and-managing-networking}第 7 章 管理 Wi-Fi 连接 {.title}
:::
这部分论述了如何配置和管理 Wi-Fi 连接。
::: section
::: titlepage
# []{#managing-wi-fi-connections_configuring-and-managing-networking.html#Setting_the_Wireless_Regulatory_Domain_managing-wi-fi-connections}设置无线规范域 {.title}
:::
在 Red Hat Enterprise Linux 中，[**[crda]{.package}**]{.strong}
软件包包含中央常规域代理，它为内核提供给定的无线管理规则。某些
[**[udev]{.package}**]{.strong} 脚本使用它，且不应手动运行，除非要调试
[**[udev]{.package}**]{.strong} 脚本。内核在新规范域更改时发送
[**[udev]{.package}**]{.strong} 事件来运行
[**[crda]{.package}**]{.strong}。规范域更改由 Linux
无线子系统（IEEE-802.11）触发。此子系统使用 `regulatory.bin`{.literal}
文件来保持其监管数据库信息。
`setregdomain`{.literal}
实用程序为您的系统设置规范域。`Setregdomain`{.literal}
不使用任何参数，通常通过系统脚本调用，如
[**[udev]{.package}**]{.strong}，而不是管理员手动调用。如果国家代码查找失败，系统管理员可以在
`/etc/sysconfig/regdomain`{.literal} 文件中定义 `COUNTRY`{.literal}
环境变量。
::: itemizedlist
**其他资源**
-   `setregdomain(1)`{.literal} man page
-   `crda(8)`{.literal} man page
-   `regulatory.bin(5)`{.literal} man page
-   `iw(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#managing-wi-fi-connections_configuring-and-managing-networking.html#configuring-a-wifi-using-nmcli_managing-wi-fi-connections}使用 nmcli 配置 Wi-Fi 连接 {.title}
:::
这个步骤描述了如何使用 nmcli 配置 Wi-fi 连接配置集。
::: itemizedlist
**先决条件**
-   安装了 [**nmcli**]{.strong} 工具。
-   确保 WiFi 被启用（默认）:
    ``` literallayout
    $ nmcli radio wifi on
    ```
:::
::: orderedlist
**步骤**
1.  使用静态 `IP`{.literal} 配置创建 Wi-Fi 连接配置集：
    ``` literallayout
    $ nmcli con add con-name MyCafe ifname wlan0 type wifi ssid MyCafe ip4 192.0.2.101/24 gw4 192.0.2.1
    ```