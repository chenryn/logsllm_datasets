ESP
mpesp
.data..
...data.
图3.3.2栈中的shellcode被破坏
为了使shellcode具有较强的通用性，我们通常会在shellcode一开始就大范围抬高栈顶，
把shellcode“藏”在栈内，从而达到保护自身安全的自的。这个过程如图3.3.3所示。
3.3.3使用其他跳转指令
使用jmpesp做“跳板”的方法是最简单，也是最常用的定位shellcode的方法。在实际的
漏洞利用过程中，应当注意观察漏洞函数返回时所有寄存器的值。往往除了ESP之外，EAX、
EBX、ESI等寄存器也会指向栈顶附近，故在选择跳转指令地址时也可以灵活一些，除了jmpesp
之外，moveax、esp和jmpeax等指令序列也可以完成进入栈区的功能。
83
---
## Page 109
day安全：
0
软件漏洞分析技术
运行shellcode时先
这时再执行压
抬起栈顶，保护自
栈入栈数据
身代码的完整性
位于shellcode
“上方”，不会破
坏代码完整性
（第2版
shoiooc
hollood
sheloode
jmoeep-x
data.
..data...
data.
图3.3.3抬高栈顶以保护shellcode
这里给出常用跳转指令与机器码的对应关系，如表3-3-1所示。
表3-3-1常用跳转指令与机器码的对应关系
机器码（十六进制）
对应的跳转指令
机器码（十六进制）
对应的跳转指令
FF E0
JMP EAX
FF D0
CALL EAX
FFE1
JMPECX
FF D1
CALLECX
FF E2
JMPEDX
FF D2
CALLEDX
FF E3
JMPEBX
FF D3
CALLEBX
FF E4
JMP ESP
FF D4
CALLESP
FF E5
JMP EBP
FF D5
CALLEBP
FF E6
JMP ESI
FF D6
CALLESI
FFE7
JMP EDI
FF D7
CALLEDI
您可以在3.2节中给出的jmpesp指令地址搜索程序的基础上稍加修改，方便地搜索出其
他跳转指令的地址。
3.3.4不使用跳转指令
个别有苛刻的限制条件的漏洞不允许我们使用跳转指令精确定位shellcode，而使用
shellcode的静态地址来覆盖又不够准确，这时我们可以做一个折中：如果能够淹没大片的内存
区域，可以将shellcode布置在一大段nop之后。这时定位shellcode时，只要能跳进这一大片
nop中，shellcode就可以最终得到执行，如图3.3.4所示。这种方法好像蒙着眼晴射击，如果靶
84
---
## Page 110
第
子无比大，那么枪枪命中也不是没有可能。
3
在浏览器漏洞利用时，常常采取的HeapSpray技术用的就是上述的缓冲区分布思想。Heap
章
Spary技术会在后续的章节及案例中详细讨论。
开发
3.3.5函数返回地址移位
shellcode
在一些情况下，返回地址距离缓冲区的偏移量是不确定的，这时我们也可以采取前面介绍
过的增加“靶子面积”的方法来提高exploit的成功率。
如果函数返回地址的偏移按双字（DWORD）不定，可以用一片连续的跳转指令的地址来
的艺术
覆盖函数返回地址，只要其中有一个能够成功覆盖，shellcode就可以得到执行。这个过程如图
3.3.5所示。
函数返回时，只要
能够中nopl区
用一大片返回地址米覆
盖真正的返回地址，增
域，shellcode就
nop
加命中的成功率！
可以最终得到执行
nop
nop
nop
nog
nop
nop
nop
re
shell
re
re
shellcode
shellcode
shellcode
ret
图3.3.4扩大shellcode面积，提高命中概率
图3.3.5大面积“扫射”返回地址
还有一些情况会更加棘手。考虑由strcat产生的漏洞。
......
strcat（程序安装目录，输入字符串）：
而不同的主机可能会有不同的程序安装目录。例如：
c:\failwest\
c:\failwestg\
c:\failwestqg\
c:\failwestqqq\
这样，函数返回地址距离我们输入的字符串的偏移在不同的计算机上就有可能按照字节错
位，如图3.3.6所示。
85
---
## Page 111
odgy安全：软件漏洞分析技术（第2版）
图3.3.6，按字节错位引起的定位失败
图3.3.6中本想把函数返回地址覆盖为0x7C81CDDA处的跳转地址，在本机调试通过
后，有可能会由于其他计算机上作为字符串前半部分的程序安装目录不同，而使覆盖的地
址错位失效。这样，我们精心设计的exploit在别的计算机上可能只有1/4的成功率，通用
性大大降低。
解决这种尴尬情况的一个办法是使用按字节相同的双字跳转地址，甚至可以使用堆中的地
址，然后想办法将shellcode用堆扩展的办法放置在相应的区域。这种heapspray的办法在IE
漏洞的利用中经常使用，如图3.3.7所示。
（维）
oxOCoCoCoC:nog
oxoCoCoC10:nop
OxOCoC0C14:nop
........nop
:shellcode
COCDCO
OCOC
OCOCOCC
OCOCOCOC
OCOCOC
图3.3.7
用heapspray部署技术解决字节错位问题
86
---
## Page 112
第
我们将在第27章中的IE漏洞利用实验中实践这种方法。
3
章
3.4开发通用的shellcode
开
发
3.4.1定位API的原理
hellcode
回顾2.4节和3.2节中的shellcode是怎样调用MessagBoxA和ExitProcess函数的。如果您
亲手实验了这些步骤，在使用DependencyWalker计算您的计算机中的API入口地址的时候，
可能会发现您的地址和本书实验指导中的地址有所差异。原因有几下几点。
的
（1）不同的操作系统版本：Windows2000，WindowsXP等会影响动态链接库的加载基址。
艺
（2）不同的补丁版本：很多安全补丁会修改这些动态链接库中的函数，使得不同版本补丁
术
对应的动态链接库的内容有所不同，包括动态链接库文件的大小和导出函数的偏移地址。
由于这些因素，我们手工查出的API地址很可能会在其他计算机上失效。在shellcode中
使用静态函数地址来调用API会使exploit的通用性受到很大限制。所以，实际中使用的shellcode
必须还要能动态地获得自身所需的API函数地址。
Windows的API是通过动态链接库中的导出函数来实现的，例如，内存操作等函数在
kermel32.dll中实现：大量的图形界面相关的API则在user32.dll中实现。Win_32平台下的
shellcode使用最广泛的方法，就是通过从进程环境块中找到动态链接库的导出表，并搜索出所
需的API地址，然后逐一调用。
所有win_32程序都会加载ntdll.dll和kermel32.dll这两个最基础的动态链接库。如果想要
在win_32平台下定位kemel32.dll中的API地址，可以采用如下方法。
（1）首先通过段选择字FS在内存中找到当前的线程环境块TEB。
（2）线程环境块偏移位置为0x30的地方存放着指向进程环境块PEB的指针。
（3）进程环境块中偏移位置为OxOC的地方存放着指向PEB_LDR_DATA结构体的指针，
其中，存放着已经被进程装载的动态链接库的信息。
（4）PEB_LDR_DATA结构体偏移位置为Ox1C的地方存放着指向模块初始化链表的头指
针InInitializationOrderModuleList。
（5）模块初始化链表InlnitializationOrderModuleList中按顺序存放着PE装入运行时初始化
模块的信息，第一个链表结点是ntdll.dll，第二个链表结点就是kemel32.dll。
（6）找到属于kemel32.dll的结点后，在其基础上再偏移0x08就是kemel32.dll在内存中的
加载基地址。
（7）从kernel32.dll的加载基址算起，偏移0x3C的地方就是其PE头。
（8）PE头偏移0x78的地方存放着指向函数导出表的指针。
（9）至此，我们可以按如下方式在函数导出表中算出所需函数的入口地址，如图3.4.1
所示。
87
---
## Page 113
day安全：
0
导出表偏移0x1C处的指针指向存储导出函数偏移地址（RVA）的列表。
导出表偏移0x20处的指针指向存储导出函数函数名的列表。
函数的RVA地址和名字按照顺序存放在上述两个列表中，我们可以在名称列表中定位
软件漏洞分析技术
到所需的函数是第几个，然后在地址列表中找到对应的RVA。
获得RVA后，再加上前边已经得到的动态链接库的加载基址，就获得了所需API此刻
在内存中的虚拟地址，这个地址就是我们最终在shellcode中调用时需要的地址。
按照上面的方法，我们已经可以获得kermel32.dll中的任意函数。类似地，我们已经具备了
定位ws2_32.dll中的winsock函数来编写一个能够获得远程shell的真正的shellcode了。
其实，在摸透了kermel32.dll中的所有导出函数之后，结合使用其中的两个函数LoadLibraryO)
和GetProcAddressO，有时可以让定位所需其他API的工作变得更加容易。
0x30
2
TEB
版
OxOC-
FS
PEB
Ox1C
—0x08|
nt11.d11Kerne132.d11NULL
kerme132. d11
的基地址
Lernej
LondLibraryA的
0x7C800000
虚拟内存地址
0x78-
PE买
0x7C801D7
020
导出表
0x00001D77
LoadLibraryA
函数地址列装
的偏移地址（RVA）
(RVA)
涌数名称列表
NO.001:0x00004614
NO.0ol:ActivateActCt
（字符中）
0.002:0x000354ED
NO.002: AddAtomA
183:0x0001CDDA
NO. 183: ExitProcess
NJ.408:0x0000ADA0
NO. 408: GetProcAdds
NO.578:0x00001D77
图3.4.1在shellcode中动态定位API的原理
本节实验将用上述定位API的方法把弹出消息框的shellcode进一步完善，使其能够适应
任意win_32平台，不受操作系统版本和补丁版本的限制。
3.4.2shellcode的加载与调试
shellcode的最常见形式就是用转移字符把机器码存在一个字符数组中，例如，前边我们弹
出消息框并能正常退出程序的shellcode就可以存成下述形式。
88
---
## Page 114
第
char box_popup[]=
3
"\x66\x81\xEC\x401x04*
//SUBSP,440
章
"\x33\xDB"
//XOR EBX,EBX
"\x53
1/
PUSH EBX
开
"\x68\x77\x65\x73\x74
//PUSH74736577
发
"1x681x661x611x691x6C*
//PUSH6C696166
shellcode:
"\x8B\xC4
MOV EAX,ESP
"\x53"
//PUSH EBX
"\x50"
//PUSH EAX
"\x50"
//PUSH EAX
"\x53"
//
PUSH EBX
的
\xB8\xEA\x04\xD8\x77
//MOV EAx,user32.MessageBoxA
艺
"\xFF\xDO"
11
术
//PUSHEBX:/ExitCode
\xB8\xDA\xCD\x81\x7C
//MOV EAx,kerne132.ExitProcess
\XFF\xD0":
//CALLEAX:\ExitProCess
如果在互联网上搜集常用的shellcode，一般得到的也是类似的存于字符数组的机器码。我
们本节实验中将对上述代码进行完善，加入自动获取AP入口地址的功能，最终得到的也是类
似这种形式的机器代码。
虽然这种形式的shellcode可以在C语言中轻易地布置进内存的目标区域，但是如果出了
问题，往往难于调试。所以，在我们开始着手改造shellcode之前，先看看相关的调试环境。
由于shellcode需要漏洞程序已经初始化好了的进程空间和资源等，故往往不能单独运行。
charshel1code[]=\x66\x81\xEC\x40\x04\x33\xDB.://欲调试的十六
7/进制机器码
voidmain(）
_asm
lea eax,shellcode
push
eax
ret
）
行shellcode。我们可以用这段装载程序运行搜集到的shellcode，并调试之。若搜集到的shellcode
不能满足需求，也可以在调试的基础上稍作修改，为它增加新功能。
3.4.3动态定位API地址的shellcode
下面我们将给shellcode加入自动定位API的功能。为了实现弹出消息框并显示“failwest”
89
---
## Page 115
0
day
的功能，需要使用如下API函数。
安
（1）MessageBoxA位于user32.dll中，用于弹出消息框。
全
（2）ExitProcess位于kemel32.dl中，用于正常退出程序。
：
（3）LoadLibraryA位于kermel32.dll中。并不是所有的程序都会装载user32.dll，所以在我