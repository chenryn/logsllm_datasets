### Stack-Based Vulnerability and Guard Malloc

This section discusses a stack-based vulnerability and the limitations of Guard Malloc, which only modifies the way heap buffers are allocated.

#### Testing with Guard Malloc

To test the program, we use the following command:
```sh
charlie-millers-computer:~ cmiller$ DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib ./test 0 AAAAAAAAAAAAAAAAAAAA
```

Guard Malloc output:
```
GuardMalloc: Allocations will be placed on 16 byte boundaries.
GuardMalloc: - Some buffer overruns may not be noticed.
GuardMalloc: - Applications using vector instructions (e.g., SSE or Altivec) should work.
GuardMalloc: GuardMalloc version 18
```

The program exits without a bus error, indicating that it fails to detect the stack overflow. Similarly, it does not help in finding the vulnerability associated with test case 2. However, it successfully detects the bug in test case 7. It fails to find the issue in test case 9 but succeeds in test case 10, reporting the following error:
```
GuardMalloc[test-1140]: Attempting excessively large memory allocation: 914748368 bytes
```

Overall, Guard Malloc performs as expected by identifying vulnerabilities related to heap allocations, such as heap overflows and wild memory writes. It also logs excessive memory allocations. However, it is ineffective for stack-based or static-variable-based vulnerabilities.

### Valgrind

Performing the same experiment with Valgrind yields similar results. Valgrind helps in detecting heap-based bugs but not others. It also warns of excessive memory allocations. Valgrind provides more detailed reporting, including line numbers and specific issues, which can significantly reduce post-fuzzing analysis time.

#### Example Output from Valgrind

When Valgrind fails to find a vulnerability:
```sh
[cmiller@Linux ~]$ valgrind ./test 0 AAAAAAAAAAAAAAAAAAAA
...
==6107== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 12 from 1)
...
```

When Valgrind finds two bugs:
```sh
[cmiller@Linux ~]$ valgrind ./test 1 AAAAAAAAAAAAAAAAAAA
...
==6110== Invalid write of size 1
==6110== at 0x40069D8: strcpy (mc_replace_strmem.c:272)
==6110== by 0x8048576: main (test.c:30)
==6110== Address 0x401F038 is 0 bytes after a block of size 16 alloc'd
==6110== at 0x40053D0: malloc (vg_replace_malloc.c:149)
==6110== by 0x80484D3: main (test.c:12)
...
==6110== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 12 from 1)
```

And another bug:
```sh
[cmiller@Linux ~]$ valgrind ./test 3 18
...
==6154== Invalid write of size 1
==6154== at 0x80485AF: main (test.c:38)
==6154== Address 0x401F03A is 2 bytes after a block of size 16 alloc'd
==6154== at 0x40053D0: malloc (vg_replace_malloc.c:149)
==6154== by 0x80484D3: main (test.c:12)
```

Valgrind correctly identifies the buffer overflow due to `strcpy` on line 30 of `test.c`, writing past a buffer of size 16 allocated on line 12. The other bug is identified as a 1-byte write on line 38, 2 bytes after an allocated buffer of size 16.

### Insure++

Insure++ is a commercial product that adds memory checks at compile time. Below is an excerpt from the instrumented source code for the test program, showing the types of checks added:

```c
auto void *_Insure_1i;
_insure_decl_lwptr(_Insure_fid_1, 9L, 0, 9, (void *)(&_Insure_1i), 65536, 2);
_Insure_0i = (16);
_Insure_1i = malloc(_Insure_0i);
_insure_assign_ptra_after_call((void **)(&_Insure_1i), 9, &_Insure_spmark);
_insure_ptra_check(9, (void **)(&_Insure_1i), (void *)_Insure_1i);
if (_Insure_1i) {
    _insure_alloca(10, _insure_get_heap_handle(0), (void **)(&_Insure_1i), _Insure_0i, 0, 4096, (char *)0, 0);
}
_insure_assign_ptraa(9, (void **)(&heap_buffer1), (void **)(&_Insure_1i), (void *)((char *)_Insure_1i));
heap_buffer1 = (char *)_Insure_1i;
...
_Insure_3_es = atoi(argv[2]);
_insure_after_call(&_Insure_spmark);
_insure_index2_checka(21, (void **)(&heap_buffer1), (void *)heap_buffer1, (int)_Insure_3_es, sizeof(char), 0L);
(heap_buffer1[_Insure_3_es]) = (0);
...
```

This excerpt shows the allocation of `heap_buffer1` and various calls to internal Insure++ functions like `_insure_assign_ptra_after_call()` and `_insure_alloca()`. When an index into the buffer is used, checks are made to ensure safety using `_insure_index2_checka()`.

Insure++ provides the most detailed information and effectively monitors memory corruption. It finds all memory corruption bugs, which is better than the other tools discussed. It also quickly points out the exact cause and location of problems, including line numbers.

### AddressSanitizer

To enable AddressSanitizer, we need to compile the test program with the correct compiler flags:
```sh
[attekett@Ubuntu ~]$ gcc –version
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
[attekett@Ubuntu ~]$ gcc -fsanitize=address ./test.c -o test-asan
[attekett@Ubuntu ~]$ ./test-asan 0 AAAAAAAAAAAAAAAAAAAA
=================================================================
==10666==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffc865685a0 at pc 0x7f9c6e974709 bp 0x7ffc86568530 sp 0x7ffc86567cd8
...
```

AddressSanitizer correctly detects both stack and heap-based bugs. Overflows in global variables `static_buffer1` and `static_buffer2` are not detected unless they are initialized in the code:
```c
char static_buffer1[16] = {0};
char static_buffer2[16] = {0};
```

AddressSanitizer reports the stack buffer overflow from the first test:
```sh
=================================================================
==3473==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffc2229b20 at pc 0x7f76c9aa1709 bp 0x7fffc2229ab0 sp 0x7fffc2229258
WRITE of size 21 at 0x7fffc2229b20 thread T0
#0 0x7f76c9aa1708 (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x62708)
#1 0x400d41 in main test.c:25
#2 0x7f76c969682f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
#3 0x400af8 in _start (/home/attekett/test-asan+0x400af8)
Address 0x7fffc2229b20 is located in stack of thread T0 at offset 48 in frame
#0 0x400bd5 in main test.c:8
This frame has 1 object(s):
[32, 48) ‘stack_buffer2’ 0x10007843d360: f1 f1 00 00[f4]f4 f3 f3 f3 f3 00 00 00 00 00 00 00
...
==3473==ABORTING
```

The report indicates a write of 21 bytes from `main` in `test.c` line 25, overflowing `stack_buffer2`.

### Case Study: PCRE

We now apply these monitoring tools to a more realistic example: the Perl Compatible Regular Expression (PCRE) library. This library is used in many open-source applications and has had several vulnerabilities. We focus on version 6.2, which was shipped with Apple’s iPhone in April 2007 and allowed for remote exploitation.

#### Building the PCRE Library

To build the library, use the following commands:
```sh
./configure
make
gcc -g -I. pcredemo.c -o pcredemo .libs/libpcre.a
```

This produces a sample program `pcredemo` that takes two arguments: a regular expression and a string to examine.

Example usage:
```sh
cmiller$ ./pcredemo 'ab.d' ABCDabcdABCD
Match succeeded at offset 4
0: abcd
No named substrings
```

#### Identifying Vulnerabilities

There are multiple vulnerabilities in this version of PCRE. Two inputs causing a heap overflow condition are:
```sh
cmiller$ ./pcredemo '[[**]]' a
PCRE compilation failed at offset 6: internal error: code overflow
cmiller$ ./pcredemo '(?P)(?P>a){1}' a
PCRE compilation failed at offset 32: internal error: code overflow
```

The PCRE library identifies the overflow, but the program does not crash, making it easy to miss during fuzz testing.

#### Using Insure++ to Detect Bugs

Running the inputs under Insure++ reveals the vulnerabilities:
```sh
cmiller$ DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib ./pcredemo '[[**]]' a
GuardMalloc: Allocations will be placed on 16 byte boundaries.
GuardMalloc: - Some buffer overruns may not be noticed.
GuardMalloc: - Applications using vector instructions (e.g., SSE or Altivec) should work.
GuardMalloc: GuardMalloc version 18
Bus error
```

Similarly for the second vulnerability:
```sh
cmiller$ DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib ./pcredemo '(?P)(?P>a){1}' a
GuardMalloc: Allocations will be placed on 16 byte boundaries.
GuardMalloc: - Some buffer overruns may not be noticed.
GuardMalloc: - Applications using vector instructions (e.g., SSE or Altivec) should work.
GuardMalloc: GuardMalloc version 18
Bus error
```

Running the first example under GDB reveals the exact line where the overflow occurs:
```sh
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_PROTECTION_FAILURE at address: 0xb000d000
0x00004f7b in compile_regex (options=, oldims=0, brackets=0xbffff4a4, codeptr=0xbffff49c, ptrptr=0xbffff498, errorcodeptr=0xbffff4a0, lookbehind=0, skipbytes=0, firstbyteptr=0xbffff4ac, reqbyteptr=0xbffff4a8, bcptr=0x26, cd=0xbffff454) at pcre_compile.c:3557
3557 PUT(code, 1, code - start_bracket);
```

Similarly for the second vulnerability:
```sh
Program received signal EXC_BAD_ACCESS, Could not access memory.
Reason: KERN_PROTECTION_FAILURE at address: 0xb000d000
```

### Conclusion

In summary, different memory monitoring tools have varying strengths and weaknesses. Guard Malloc is effective for heap-based vulnerabilities, Valgrind provides detailed reporting, Insure++ offers comprehensive monitoring, and AddressSanitizer is robust for stack and heap-based bugs. These tools are essential for identifying and mitigating memory corruption issues in software.