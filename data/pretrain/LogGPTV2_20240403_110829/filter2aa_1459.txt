# Password Cracking on a Budget

## Authors
- Matt Weir
- Dr. Sudhir Aggarwal, Florida State University

### Special Thanks To
- Bill Glodek
- Professor Breno de Medeiros
- National Institute of Justice

## About the Presenter
- **Name:** Matt Weir
- **Occupation:** PhD Student, Florida State University
- **Previous Experience:**
  - Network Security Engineer at Northrop Grumman TASC
  - Last project involved supporting forensic investigators for the JTF-GNO
- **Disclosed Password:** xcom (Not exactly strong, is it?)

### Disclaimer
- I am a student and do not crack passwords professionally.
- I have made many mistakes while learning this skill.
- I have even been known to write down passwords.

## Differences from the Shmoocon Talk
- The Shmoocon talk covered:
  - The ethics of password cracking
  - Sources of disclosed password lists for research
  - Analysis of password lists and an overview of how people create passwords
- You can view the video and slides from that talk at [www.shmoocon.org](www.shmoocon.org).

## This is Defcon
- The focus here will be on practical, budget-friendly methods.
- While having more resources helps, we'll explore cost-effective techniques.

## Duration and Interaction
- This is a 50-minute talk.
- I will be available afterward to answer questions, provide more details, and listen to your ideas.
- Feel free to email me at [PI:EMAIL].

## Getting the Tools
- We have developed custom tools and scripts to simplify password cracking.
- These tools are included on the Defcon CD, but you can get the latest versions at [www.ecit.fsu.edu](www.ecit.fsu.edu) under "Password Recovery Tools."

## Password Basics
- I will avoid giving a CISSP prep course, but if you have specific questions, please ask.

### Types of Password Cracking
1. **Online Cracking:**
   - Involves trying different passwords to log in.
   - Can be slow and noisy.
   - Limited by the number of allowed guesses.
2. **Offline Cracking:**
   - You have access to the password file.
   - Limited only by your computer's speed.

### Password Hashes
- Systems should not store passwords in plain text.
- If they do, cracking becomes trivial once the password list is obtained.

#### Example of Hashing
1. User creates a password: "password"
2. Computer hashes the password: `MD5("password") = 5F4DCC3B5AA765D61D8327DEB882CF99`
3. User logs in with "password"
4. Computer hashes the input and compares it to the stored hash.

### Salts
- A salt is a value added to a password to make it harder to crack.
- Example: `MD5("bob" + "password") = 3690eb69b329e009ecd053e27e7454b5` and `MD5("tom" + "password") = 4125d856a8860ebf67e1fbad03167452`

### The Brick Wall
- Two main factors that can stop you from cracking a password:
  - Not using the right dictionary word.
  - Not applying the correct word mangling rule.

## Wordlists
- Essential for password cracking.
- Often tedious to work with.

### Common Sources for Wordlists
- [http://www.word-list.com/](http://www.word-list.com/)
- [http://www.outpost9.com/files/WordLists.html](http://www.outpost9.com/files/WordLists.html)
- [www.theargon.com/achilles/wordlists/theargonlists](www.theargon.com/achilles/wordlists/theargonlists)
- Xploits Master Password Collection on Bittorrent

### Creating Better Wordlists
- Online wordlists often lack quality.
- David Smith at Georgetown University is creating wordlists from hard drive images.
- Manual creation based on online information is effective but laborious.

### Managing Wordlists
- Avoid duplicates.
- Standardize capitalization and word termination.
- Consider word length and artifacts.

### Our Work with Wordlists
- **Wiktionary Grabber:** Creates language-specific word lists.
- **Wikipedia Grabber:** Attempts to create custom wordlists based on search criteria (still in development).

### Judging Dictionaries Based on Edit Distance
- Custom dictionaries created by analyzing alpha characters from disclosed password lists.
- Pros and Cons:
  - Pros: Produces useful custom wordlists, evaluates current wordlists quickly.
  - Cons: Can produce false positives and negatives, dependent on the input dictionary.

### Evaluation of Dictionaries vs. Myspace
- **common-password.txt:**
  - Percentage Found: 5.3%
  - Size: 816 Words
- **Wiktionary English Words:**
  - Percentage Found: 32%
  - Size: 68,611 Words

## Word Mangling Rules
- Focus of most password crackers.
- Many crackers have limited rule sets.
- LANMAN hashes were easier to crack due to their simplicity.

### Combining Word Mangling Rules
- Single-rule passwords are easy to crack.
- Complex rules and nonstandard patterns (e.g., `P@ssWord12`, `p7assword`) are more challenging.

### Cain and Abel vs. John the Ripper
- **John the Ripper** is recommended over Cain and Abel.

### Getting the Most out of John the Ripper
- Install unofficial patches for additional hash support.
- Customize the `john.conf` file; learn the rule syntax.
- The `RULES` readme file is a valuable resource.

### Brute Force with John the Ripper
- Uses Markov models for brute force guessing.
- You can train the model with existing passwords.
- Requires a large dataset for effective training.

### Targeted Brute Force
- Generate specific types of passwords (e.g., six letters followed by two numbers).
- Use a custom rule to add values to a base wordlist.

### Probabilistic Context-Free Grammar (PCFG)
- Allows detailed rule definitions with probabilities.
- Trained on existing password lists.
- Generates guesses based on probability, e.g., `password12`, `password!`, `password13`.

### Using Our PCFG Password Cracker
- Outputs guesses to stdout.
- Pipe guesses into John the Ripper for hashing and management.
- Minimal overhead, especially against strong hashes.

### Performance Graph
- Compares the default JtR rule set to our PCFG.
- X-axis: Number of guesses.
- Y-axis: Number of found passwords.

## Questions and Comments
- Matt Weir
- Email: [PI:EMAIL]
- Website: [www.ecit.fsu.edu](www.ecit.fsu.edu)

---

Feel free to reach out for further discussion or clarification.