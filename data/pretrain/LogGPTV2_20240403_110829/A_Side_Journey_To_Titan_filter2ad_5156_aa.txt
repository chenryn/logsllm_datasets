title:A Side Journey To Titan
author:Thomas Roche and
Victor Lomn&apos;e and
Camille Mutschler and
Laurent Imbert
A Side Journey To Titan
Thomas Roche and Victor Lomné, NinjaLab, Montpellier, France; Camille Mutschler, 
NinjaLab, Montpellier, France and LIRMM, Univ. Montpellier, CNRS, Montpellier, France; 
Laurent Imbert, LIRMM, Univ. Montpellier, CNRS, Montpellier, France
https://www.usenix.org/conference/usenixsecurity21/presentation/roche
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.A Side Journey To Titan
Revealing and Breaking NXP’s P5x ECDSA Implementation on the Way
Thomas Roche1, Victor Lomné1, Camille Mutschler1,2, and Laurent Imbert2
1NinjaLab, Montpellier, France
2LIRMM, Univ. Montpellier, CNRS, Montpellier, France
Abstract
The Google Titan Security Key is a FIDO U2F hardware
device proposed by Google (available since July 2018) as
a two-factor authentication token to sign in to applications
such as your Google account. In this paper, we present a side-
channel attack that targets the Google Titan Security Key ’s
secure element (the NXP A700x chip) by the observation
of its local electromagnetic radiations during ECDSA signa-
tures. This work shows that an attacker can clone a legitimate
Google Titan Security Key. As a side observation, we identi-
ﬁed a novel correlation between the elliptic curve group order
and the lattice-based attack success rate.
1 Introduction
Hardware security keys for two-factor authentication are the
recommended alternatives to SMS-based or app-based two-
factor authentication using a smartphone. These security keys
are based on the FIDO U2F standard initially developed by
Google and Yubico and now administered by the FIDO Al-
liance. Security-wise, their strength resides in the use of se-
cure microcontrollers (or secure elements) for the manipula-
tion of cryptographic secret keys. The secure element must
safely generate, store and use a user-unique secret to prove
its legitimacy to a remote server during login in. The FIDO
U2F standard is based on ECDSA signature over the NIST
P-256 elliptic curve [29].
In this paper we study the security of the Google Titan
Security Key [12] and show that its secure element, the NXP
A700x chip, is susceptible to side-channel attack (through the
observation of its local ElectroMagnetic – EM – activity).
This allows, given physical access to a Google Titan Security
Key during about 10 hours, to retrieve a user-speciﬁc secret
key (there is one key for each remote account) and therefore
to clone the security key.
To understand the NXP ECDSA implementation, ﬁnd a
vulnerability and design a key-recovery attack, we had to
make a quick stop on Rhea (NXP J3D081 JavaCard smart-
card). This product looks very much like the NXP A700x chip
and uses the same cryptographic library. Rhea, as an open
JavaCard platform, gives us more control to study the ECDSA
implementation.
The vulnerability allows an attacker, using a non-
supervised machine learning mechanism, to gather several
bits randomly scattered over the ephemeral key of the ECDSA
signature scheme. She can then use a lattice-based attack to
exploit this information in a key-recovery attack using a few
thousands of ECDSA observations. Contrary to most lattice-
based attacks with partial knowledge of the nonces reported
in the literature, the known bits are not the leading bits of the
nonces.
Surprisingly, the attack is much more efﬁcient than ex-
pected in terms of data complexity. This observation led us
to a ﬁnding of independent interest, relating the success rate
of these attacks to the order of the elliptic curve. We believe
that this observation opens new directions in the theoreti-
cal understanding of (Extended) Hidden Number Problem
solvers.
The vulnerability was acknowledged by Google and the
chip manufacturer NXP (we assigned CVE-2021-3011). It is
present in few other security keys and various NXP JavaCards
products1 (all based on similar secure elements).
The contributions presented in this paper include:
• a teardown / PCB analysis of the Google Titan Security
Key, and the identiﬁcation of an NXP open Javacard prod-
uct that shares a very similar secure element, presented
in Section 2;
• the use of side-channel analysis to reverse-engineer the
implementation of the cryptographic primitives and to
reveal their countermeasures (see Section 3);
• the discovery of a previously unknown vulnerability
in the (previously unknown) implementation (see Sec-
tion 4);
• the exploitation of this vulnerability with a custom
lattice-based attack to fully recover an ECDSA private
1The full list of identiﬁed products is here: https://ninjalab.io/a-
side-journey-to-titan/
USENIX Association
30th USENIX Security Symposium    231
key from the Google Titan Security Key (see Section 5);
• an original observation that seems to link together the
success rate of lattice-based attacks on ECDSA and the
order of the elliptic curve, and its consequences regard-
ing the success rate of lattice-based attacks on structured-
order elliptic curves such as NIST P-256 (see Section 6);
• several countermeasures that could be implemented in
order to mitigate the proposed attack (see Section 7).
2 Preliminaries
In this Section, we introduce the public information available
for the FIDO U2F protocol and the physical analysis of the
Google Titan Security Key. We also present the preparation
process for EM based side-channel analysis.
Registration
1. The FIDO client ﬁrst contacts the relying party to ob-
tain a challenge. It then constructs the registration
request message, made of the challenge and applica-
tion parameters and sends it to the U2F device.
2. The U2F device creates a new ECDSA keypair
in response to the registration request message,
and answers the registration response message,
which contains the user’s public key, a key handle (which
may contains the encrypted private key), an attestation
certiﬁcate, and an ECDSA signature on P-256 over the
application and challenge parameters, the key handle
and the public key.
3. Finally, the FIDO client sends the registration
response message back to the relying party, which
stores the different ﬁelds for later authentications.
2.1 Product Description
Authentication
The Google Titan Security Key is a hardware FIDO U2F
(universal second factor) device. It provides a complement
to the login/password authentication mechanism, in order to
sign in to a Google account, or any other web applications
supporting the FIDO U2F protocol.
The Google Titan Security Key is available in three versions,
as depicted in Figure 1.
Figure 1: Google Titan Security Key - Left: version with
micro-USB, NFC and BLE interfaces - Middle: version with
USB type A and NFC interfaces - Right: version with USB
type C interface
2.2 FIDO U2F Protocol
The FIDO U2F protocol, when used with a hardware FIDO
U2F device like the Google Titan Security Key, works in
two steps: registration and authentication. Three parties
are involved: the relying party (e.g. the Google server), the
client (e.g. a web browser) and the U2F device. Let us brieﬂy
summarize how the different messages are constructed and
exchanged. For more details, see [9].
1. The FIDO client contacts the relying party to ob-
tain a challenge and constructs the authentication
request message, made of a control byte (specifying
whether or not the U2F device should enforce user pres-
ence), the challenge parameter, the application parameter
and a key handle. Then sends it to the U2F device.
2. If the U2F device succeeds to process/sign the
authentication request message, it answers the
authentication response message, made of a user
presence byte indicating whether user presence was veri-
ﬁed or not, a counter on 4 bytes that is incremented each
time the U2F device performs an U2F authentication
and an ECDSA signature on P-256 (over the application
parameter, the user presence byte, the counter and the
challenge parameter).
3. Finally, the FIDO client sends the authentication
response message back to the relying party, which
can then verify the ECDSA signature using the public
key obtained during registration.
2.3 An Attack Scenario on FIDO U2F
From the study of the FIDO U2F protocol, one can imagine
the following attack scenario that requires the adversary to get
physical access to the victim’s U2F device during a limited
time frame without the victim noticing (step 2):
1. the adversary steals the login and password of a victim’s
application account protected with FIDO U2F (e.g. via a
phishing attack);
2. thanks to the stolen victim’s login and password (for
a given application account), the adversary can get the
232    30th USENIX Security Symposium
USENIX Association
corresponding client data and key handle. She can then
send many authentication requests to the U2F device
while performing side-channel measurements2;
3. the adversary quietly returns the U2F device to the vic-
tim;
4. the adversary performs a side-channel attack on the mea-
surements, and succeeds in extracting the ECDSA pri-
vate key linked to the victim’s application account;
5. the adversary can sign in to the victim’s application
account without the U2F device, and without the victim
noticing. In other words the adversary created a clone
of the U2F device for the victim’s application account.
This clone will give access to the application account as
long as the legitimate user does not revoke its second
factor authentication credentials.
Note that the relying party might use the counter value
to detect cloned U2F devices and then limit (but not totally
remove) the attack impact (see Section 7.2 for more details).
2.4 Google Titan Security Key Teardown
Once plugged into a computer’s USB port, lsusb outputs:
Bus 001 Device 018: ID 096e:0858 Feitian
Technologies, Inc.
As a matter of fact, the company who designed the Google
Titan Security Key is Feitian [8]. Indeed Feitian proposes
generic FIDO U2F security keys, with customization for cas-
ing, packaging and related services.
2.4.1 Removing the Casing
We ﬁrst performed a teardown of the USB type A version of
the Google Titan Security Key. The plastic casing is made
of two parts which are strongly glued together. We used a
hot air gun in order to soften the white plastic and we easily
separated the two casing parts with a scalpel.
If done carefully, this easy procedure allows to preserve
intact the Printed Circuit Board (PCB). An interesting future
work could be to ﬁnd a way to open the Google Titan Security
Key casing without damaging the two plastic parts, so that it
can be re-assembled after the attack.
2.4.2 PCB Analysis
In Figure 2, we display the back of the Google Titan Security
Key PCB, where the different circuits are soldered. The Inte-
grated Circuit (IC) package markings allow to guess the IC
references:
2it might be limited to several billions of requests, the counter being
encoded on 4 bytes
• the ﬁrst IC (in green in Figure 2) is a general pur-
pose microcontroller from NXP, the LPC11u24 from
the LPC11U2x family [30]. It acts as a router between
the USB and NFC interfaces and the secure element;
• the second IC (in red in Figure 2) is a secure authenti-
cation microcontroller also from NXP, the A7005a from
the A700x family [25]. It acts as the secure element, gen-
erating and storing cryptographic secrets and performing
cryptographic operations (we validated this hypothesis
by probing electric signals between the two ICs while
processing an authentication request message).
Figure 2: Google Titan Security Key PCB, with annotated
main parts
2.4.3 NXP A7005a Package Opening
Opening the NXP A7005a epoxy package necessitated a wet
chemical attack. We protected the PCB with some aluminium
tape and dropped some hot fuming nitric acid on the NXP
A7005a package until the die was revealed (see [11, Chapter
2] for a survey on IC package opening techniques).
The result is shown in Figure 3. With the device still alive,
we can then proceed with the EM side-channel measurements.
2.5 Matching the Google Titan Security Key
with other NXP Products
The FIDO U2F protocol does not allow to extract the ECDSA
secret key of a given application account from a U2F device.
This is a limitation of the protocol which, for instance, makes
it impossible to transfer the user credentials from one security
key to another. If a user wants to switch to a new hardware
security key, a new registration (i.e. a new ECDSA key pair)
is required for every application account.
From a security point of view, this limitation is also a
strength as it prevents creating a clone and represents an
obstacle for side-channel reverse-engineering. With no con-
trol whatsoever on the secret key, understanding the details
of a highly secured implementation (let alone attacking) can
USENIX Association
30th USENIX Security Symposium    233
A700x. Furthermore the NXP P5x secure microcontroller fam-
ily is Common Criteria (CC) and EMVCo certiﬁed (last CC
certiﬁcation found in 2015).
We went through the public data that can be found on-
line and ﬁgured out that several NXP JavaCard smartcards
are based on P5x chips. Thanks to BSI and NLNCSA CC
public certiﬁcation reports3, we were able to compile a (non-
exhaustive) list of NXP JavaCard smartcards based on P5x
chips.
We selected the product NXP J3D081 (CC certiﬁcation re-
port BSI-DSZ-CC-0860-2013) since its characteristics were
the closest to those of NXP A700x (JCOP 2.4.2 R2, JavaC-
ard 3.0.1 and GlobalPlatform 2.2.1). We named it Rhea, in
reference to the second largest moon of Saturn, right after
Titan.
Open JavaCard products, like Rhea, are generic platforms
that allow developers to load their own applications (a JavaC-
ard applet) on the smartcard. The JavaCard OS takes care
of low level interactions with the hardware and offers high
level APIs for the applets. Hence, an applet needs to comply
with the JavaCard OS API independently of the underlying
hardware.
On Rhea, the JavaCard OS happens to follow JavaCard
3.0.1 speciﬁcations [32]. We developed and loaded a custom
JavaCard applet allowing us to freely control the JavaCard
ECDSA signature engine on Rhea. At this point, we were able
to upload the long term ECDSA secret keys of our choice,
perform ECDSA signatures and veriﬁcations.
2.6 Side-Channel Observations
2.6.1 Side-Channel Setup
In order to perform EM side-channel measurements, we used
the following side-channel analysis hardware setup (global
cost is about US $12,000):
• Langer ICR HH 500-6 near-ﬁeld EM probe with an hor-
izontal coil of diameter 500µm and a frequency band-
width ranging from 2MHz to 6GHz [20];
• Thorlabs PT3/M 3 axes (X-Y-Z) manual micro-
manipulator with a precision of 10µm [37];
• Pico Technology PicoScope 6404D oscilloscope, with
a 500MHz frequency bandwidth, sampling rate up to
5GSa/s, 4 channels and a shared channel memory of 2G
samples [34].
For triggering the side-channel measurements, we pro-
ceeded as follows:
• for the side-channel measurements performed on Rhea,
we used a modiﬁed commercial smartcard reader where
3https://www.bsi.bund.de/EN/Topics/Certification/
certified_products/Archiv_reports.html
Figure 3: Google Titan Security Key PCB, with NXP A7005a
die visible after wet chemical attack of its package
prove cumbersome. We had to ﬁnd a workaround to study the
implementation in a more convenient setting.