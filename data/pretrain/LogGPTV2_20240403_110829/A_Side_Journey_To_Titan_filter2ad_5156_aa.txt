# A Side Journey To Titan: Revealing and Breaking NXP’s P5x ECDSA Implementation

## Authors
- Thomas Roche, NinjaLab, Montpellier, France
- Victor Lomné, NinjaLab, Montpellier, France
- Camille Mutschler, NinjaLab, Montpellier, France; LIRMM, Univ. Montpellier, CNRS, Montpellier, France
- Laurent Imbert, LIRMM, Univ. Montpellier, CNRS, Montpellier, France

## Publication Information
- **Title:** A Side Journey To Titan
- **Conference:** 30th USENIX Security Symposium
- **Date:** August 11–13, 2021
- **Proceedings ISBN:** 978-1-939133-24-3
- **Open Access Sponsor:** USENIX
- **URL:** [https://www.usenix.org/conference/usenixsecurity21/presentation/roche](https://www.usenix.org/conference/usenixsecurity21/presentation/roche)

## Abstract
The Google Titan Security Key is a FIDO U2F hardware device introduced by Google in July 2018 as a two-factor authentication token for applications such as Google accounts. This paper presents a side-channel attack targeting the secure element (NXP A700x chip) of the Google Titan Security Key by observing its local electromagnetic radiations during ECDSA signature generation. The attack allows an attacker to clone a legitimate Google Titan Security Key. Additionally, we identified a novel correlation between the elliptic curve group order and the success rate of lattice-based attacks.

## 1. Introduction
Hardware security keys for two-factor authentication are recommended alternatives to SMS-based or app-based two-factor authentication using smartphones. These keys are based on the FIDO U2F standard, initially developed by Google and Yubico and now administered by the FIDO Alliance. Their security strength lies in the use of secure microcontrollers (or secure elements) for handling cryptographic secret keys. The FIDO U2F standard uses ECDSA signatures over the NIST P-256 elliptic curve.

In this paper, we study the security of the Google Titan Security Key and demonstrate that its secure element, the NXP A700x chip, is susceptible to side-channel attacks through the observation of its local electromagnetic (EM) activity. Given physical access to a Google Titan Security Key for about 10 hours, an attacker can retrieve a user-specific secret key and clone the security key.

To understand the NXP ECDSA implementation, identify a vulnerability, and design a key-recovery attack, we examined the NXP J3D081 JavaCard smartcard, which shares the same cryptographic library as the NXP A700x chip. The vulnerability allows an attacker to gather several bits randomly scattered over the ephemeral key of the ECDSA signature scheme using a non-supervised machine learning mechanism. The attacker can then use a lattice-based attack to recover the key with a few thousand ECDSA observations. Unlike most lattice-based attacks, the known bits are not the leading bits of the nonces.

Surprisingly, the attack is more efficient than expected in terms of data complexity. This observation led us to a finding of independent interest, relating the success rate of these attacks to the order of the elliptic curve. We believe this observation opens new directions in the theoretical understanding of (Extended) Hidden Number Problem solvers.

The vulnerability was acknowledged by Google and NXP (CVE-2021-3011). It is present in other security keys and various NXP JavaCard products. Our contributions include:

- A teardown and PCB analysis of the Google Titan Security Key.
- The identification of an NXP open JavaCard product with a similar secure element.
- The use of side-channel analysis to reverse-engineer the cryptographic primitives and reveal their countermeasures.
- The discovery of a previously unknown vulnerability in the implementation.
- The exploitation of this vulnerability with a custom lattice-based attack to fully recover an ECDSA private key.
- An original observation linking the success rate of lattice-based attacks on ECDSA to the order of the elliptic curve.
- Several countermeasures to mitigate the proposed attack.

## 2. Preliminaries
### 2.1 Product Description
The Google Titan Security Key is a hardware FIDO U2F device that complements the login/password authentication mechanism for signing into Google accounts or other web applications supporting the FIDO U2F protocol. It is available in three versions: one with micro-USB, NFC, and BLE interfaces; another with USB type A and NFC interfaces; and a third with a USB type C interface.

### 2.2 FIDO U2F Protocol
The FIDO U2F protocol involves three parties: the relying party (e.g., the Google server), the client (e.g., a web browser), and the U2F device. The protocol works in two steps: registration and authentication.

#### Registration
1. The FIDO client contacts the relying party to obtain a challenge and constructs a registration request message.
2. The U2F device creates a new ECDSA keypair and responds with a registration response message containing the user's public key, a key handle, an attestation certificate, and an ECDSA signature.
3. The FIDO client sends the registration response message back to the relying party, which stores the fields for later authentications.

#### Authentication
1. The FIDO client contacts the relying party to obtain a challenge and constructs an authentication request message.
2. The U2F device processes the authentication request and responds with an authentication response message containing a user presence byte, a counter, and an ECDSA signature.
3. The FIDO client sends the authentication response message back to the relying party, which verifies the ECDSA signature using the public key obtained during registration.

### 2.3 Attack Scenario
An attack scenario on the FIDO U2F protocol might involve:
1. The adversary steals the login and password of a victim's application account.
2. Using the stolen credentials, the adversary sends many authentication requests to the U2F device while performing side-channel measurements.
3. The adversary returns the U2F device to the victim.
4. The adversary performs a side-channel attack to extract the ECDSA private key.
5. The adversary can sign in to the victim's application account without the U2F device.

### 2.4 Google Titan Security Key Teardown
#### 2.4.1 Removing the Casing
We performed a teardown of the USB type A version of the Google Titan Security Key. The plastic casing is glued together, and we used a hot air gun to separate the parts carefully.

#### 2.4.2 PCB Analysis
The PCB contains two ICs:
- A general-purpose microcontroller (NXP LPC11u24) acting as a router.
- A secure authentication microcontroller (NXP A7005a) acting as the secure element.

#### 2.4.3 NXP A7005a Package Opening
We opened the NXP A7005a epoxy package using a wet chemical attack, revealing the die for EM side-channel measurements.

### 2.5 Matching the Google Titan Security Key with Other NXP Products
The FIDO U2F protocol does not allow extracting the ECDSA secret key from a U2F device, which is a security strength. To study the implementation, we identified the NXP J3D081 JavaCard smartcard (Rhea) as a suitable platform. Rhea is an open JavaCard platform allowing developers to load custom applications, enabling us to control the ECDSA signature engine.

### 2.6 Side-Channel Observations
#### 2.6.1 Side-Channel Setup
We used a side-channel analysis setup including:
- Langer ICR HH 500-6 near-field EM probe.
- Thorlabs PT3/M 3 axes manual micromanipulator.
- Pico Technology PicoScope 6404D oscilloscope.

For triggering the measurements, we used a modified commercial smartcard reader.

This setup allowed us to perform detailed EM side-channel measurements and analyze the cryptographic implementation.