Duplication of babel helpers is a problem that hasn't yet been fully solved.
It's solved from a userland code standpoint, but not solved when you consider
node_modules that use babel in a prepublish step.
### Expected Behavior
**Standalone babel helpers package**  
There should be a `babel-helpers-standalone` package, with `main` and `module`
package.json fields that correspond to the babel helpers formatted as a
CommonJS file and ES Modules file, respectively. The ES Module format will
enable tree-shaking with compatible module bundlers.
**Option for`babel-plugin-external-helpers` to consume an external package**  
There should be the ability to consume the standalone `babel-external-helpers`
package when transpiling an application and/or library. So rather than
referencing a global, this could be turned into an `import` (ES Modules, with
tree shaking) or `require` (CommonJS). This could look something like:
    {
      "plugins": [
        ["external-helpers": {
          "package": {
            "name": "babel-external-helpers",
            "format": "es"
          }
        }]
      ]
    }
This would yield something like:
    import {classCallCheck as _classCallCheck} from "babel-external-helpers";
    // ...
Now anytime a module author publishes transpiled code using this option, they
will be de-duplicated. Futhermore, if the application developer consuming
these modules also transpiles their code, they can use the same `external-
helpers` configuration and de-duplicate these helpers that are in their
application code. In this case, all helpers, whether in node_modules or
otherwise, will be de-duplicated (assuming semver compatibility).
### Current Behavior
If I publish a transpiled module, either:
  1. I inline the babel helpers. This is sub-optimal because these helpers will potentially be duplicated many times in the consumer's browser bundle.
  2. Use `babel-plugin-external-helpers` and reference a global `babelHelpers` variable. This is sub-optimal because any consumer of my library will not be able to use my library out of the box.
### Context
  * I'm a module author and application developer
  * As a module author, I publish my modules a Rollup builds in both CommonJS and ES Modules formats (using the `main` and `module` fields of the package.json)
  * The consumers of my modules don't transpile node_modules
  * The consumers of my modules use a tree-shaking module bundler that supports ES Modules syntax
  * The consumers of my modules want the babel helpers to be de-duplicated in the resultant bundle (across all node_modules as well as userland code)
This proposal should be relatively straightforward to implement, I'd be happy
to work on a PR. This could be done fully via userland plugins, but the value
of this is greater when everyone (particularly module authors) standardizes on
the same external dependency.