# Flare-On 8th两道题目复现
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
Flare-On8由FireEye公司于今年9月份至10月份期间举办，共10道题目。笔者从中选取了自己感兴趣的三道题目进行复现，下文是前两道题目复现过程中所作笔记，第三道题目涉及到的技术点及分析过程笔者会单独写一篇文章。
  * 题目下载：[Flare-On8 Challenges](https://flare-on.com/files/Flare-On8_Challenges.zip)
  * WriteUp：[Flare-On 8 Challenge Solutions](https://www.mandiant.com/resources/flare-on-8-challenge-solutions)
## 0x01 Challenge 5:Flare Linux VM
题目描述如下：
压缩包中文件：
使用VMWare导入`FLARE Linux VM.ovf`文件，在打开虚拟机之前将网络连接修改为”桥接模式”，方便后续通过`scp`复制文件：
以`root`身份登录，密码为 **flare** 。进入到`Documents`目录下查看：
新建一TXT文件，过一段时间查看发现其扩展名由`.txt`变为`.txt.broken`。使用`crontab
-l`命令列出计划任务(若读者之前未接触过，可翻阅《鸟哥的Linux私房菜》第15章或是[crontab(5) — Linux manual
page](https://man7.org/linux/man-pages/man5/crontab.5.html))：
在另一Linux虚拟机中使用`scp`命令将该文件复制出来，查看其详细信息：
将`getenv`函数返回值与”/Documents”字符串拼接成绝对路径传递给`opendir`函数，调用`readdir`函数遍历该目录下文件。
将`d_name`字段值与`.`及`..`进行比较，之后判断后缀是否为`.broken`：
如果上述条件均不满足，则进行加密：
加密函数只对原文件前0x400字节进行加密并写入`.broken`文件(若不足0x400字节，最后`.broken`文件亦是0x400字节大小，具体见下面对`encrypt`函数的分析)，之后调用`remove`函数来删除原文件。
可以看到其加密函数采用变形RC4算法，区别在于最后的异或运算。使用`crontab
-r`命令删除计划任务，将`Documents`目录下所有文件的`.broken`扩展名去掉：
    #!/bin/bash
    for name in `ls *.broken`
    do
        mv $name ${name%.broken}
    done
再执行一次`/usr/lib/zyppe`即可完成解密。逐一查看解密后文件，发现下面四个文件内容是未加密的：
按照`ugali.txt`文件给出提示，将`Sausages.txt`
和`Spaghetti.txt`拖入CyberChef，执行Arithmetic/Logic中的Rotate Left运算：
“c3BhZ2hldHRp”是”spaghetti”的Base64编码：
按照`shopping_list.txt`文件给出提示，进入`/usr/bin`目录，发现存在`dot`文件：
使用IDA打开：
计算输入的SHA256值，与`b3c20caa9a1a82add9503e0eac43f741793d2031eb1c6e830274ed5ea36238bf`进行比较，相等才会中止循环。按照`shopping_list.txt`文件给出顺序，查看`reeses.txt`：
笔者一开始按照提示使用`Reese's`作为Key去解密`ice_cream.txt`，尝试数次结果均为乱码。按`shopping_list.txt`文件给出顺序，下一文件应为`banana_chips.txt`，结果如下：
其他以B开头文件通过异或运算解码出内容如下：
其他以R开头文件亦可使用Base64解码出内容：
笔者起初以为`ENCODED_BYTE + 27 + NUMBER1 * NUMBER2 -NUMBER3`公式中3个`NUMBER`是前边解码出的三个字节，但尝试后发现并不是，而是环境变量：
代入三个环境变量，公式化简为`ENCODED_BYTE-4`。笔者同时查看了`.bashrc`文件：
使用公式解密`ice_cream.txt`，`iced_coffee.txt`及`instant_noodles.txt`：
笔者在解码出`ice_cream.txt`结果时，不知道其内容有何作用，等解码出`instant_noodles.txt`结果时回看，发现每个数字对应字母各不相同，那么0xMS——0x64，`iced_coffee.txt`结果中给出的`SREFBE`——493513。以493513作为RC4算法的Key去解密`nachos.txt`，`natillas.txt`及`nutella.txt`：
根据提示进行搜索，算法应使用Bifid Cipher：
Key应使用`eggs`：
解密以D开头文件：
根据提示，于Documents目录下看到隐藏文件`.daiquiris.txt`，使用Bifid Cipher解密：
搜索Giovan Battista Bellaso相关，确定下一步应使用维吉尼亚密码(Key是microwaves)：
解密以O开头文件：
根据文件给出的推特账号进行搜索：
从中提取出AES解密所需Key及IV：
解密以T开头文件：
`/etc/Quijote.txt`中内容来自《堂吉诃德》，使用在线西班牙语词频分析工具分析其中出现的独特单词个数：
将所有十六进制ASCII码转换成字符：
输入`dot`，得到Flag：
这道题目前面部分对勒索软件`zyppe`的分析是很有意思的，笔者之前未接触过Linux平台的恶意软件分析。后面部分环环相扣，梳理清楚逻辑之后按部就班使用CyberChef解密即可得出Flag，难度偏易。
## 0x02 Challenge 7:spel
题目只给了一个PE文件，查看基本信息：
拖入IDA查看，分析了很长一段时间才完成，其函数数量非常多：
放入沙箱中，没有检测出有效信息：
运行界面：
关闭之后，可以看到其仍在后台运行：
看到官方WriteUp上提到capa，之前一直没有使用过该工具。按照[capa explorer
documentation](https://github.com/mandiant/capa/blob/master/capa/ida/plugin/README.md)给出步骤搭建好环境，capa
rules下载链接文中已经给出，下载到本地后于Settings——capa rules path一栏中填写即可。`capa.exe