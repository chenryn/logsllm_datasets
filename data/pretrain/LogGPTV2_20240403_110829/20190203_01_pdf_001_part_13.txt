### Granting SELECT Privileges to `pubuser`

```sql
GRANT SELECT ON edb.dept TO pubuser;
GRANT SELECT ON edb.emp TO pubuser;
GRANT SELECT ON edb.jobhist TO pubuser;
GRANT SELECT ON edb.salesemp TO pubuser;
```

### Step 7 (Optional): Creating Group Roles for Application Users

**Creating Group Roles:**

Creating one or more "group" roles containing the required privileges to access the tables and views of the publications can be beneficial. This approach is particularly useful when you need to add new application users who require select, insert, update, or delete privileges on any of the publication tables. Instead of granting each privilege individually to each user, you can grant a role that contains the necessary privileges.

**Example:**

```sql
CREATE ROLE appgroup;
GRANT SELECT, INSERT, UPDATE, DELETE ON edb.dept TO appgroup;
GRANT SELECT, INSERT, UPDATE, DELETE ON edb.emp TO appgroup;
GRANT SELECT, INSERT, UPDATE, DELETE ON edb.jobhist TO appgroup;
GRANT SELECT, INSERT, UPDATE, DELETE ON edb.salesemp TO appgroup;
```

**Granting the Role to a New User:**

```sql
CREATE USER appuser IDENTIFIED BY password;
GRANT CREATE SESSION TO appuser;
GRANT appgroup TO appuser;
```

### 5.1.4.2 SQL Server Publication Database

In SQL Server, an application gains access to the database server by providing a SQL Server login and its associated password. When an application connects to a specific database, it assumes the identity and privileges of a database user defined in that database. Database users in different databases are independent, and the same user name can have distinct properties in each database.

**Mapping SQL Server Logins to Database Users:**

- A SQL Server login must exist for the publication server to connect to SQL Server. The login and password are specified when creating the publication database definition.
- In the publication database, a database user must exist to be the creator and owner of the control schema objects. This user must be mapped to the SQL Server login used by the publication server.
- A schema must exist to contain certain control schema objects. The database user must either own this schema or have the necessary privileges to create and update the control schema objects.
- SQL Server database users who update the data in the application tables that are to be replicated must have certain privileges on the control schema objects.
- A database user must exist in the `msdb` database and be mapped to the SQL Server login used by the publication server. This user must have privileges to execute jobs in the `dbo` schema of the `msdb` database.

**Example Configuration:**

- **Publication Tables:** Reside in the `edb` database.
- **Database User:** `edb` owns the schema containing the publication tables.
- **SQL Server Login:** `pubuser` is used by the publication server to connect to SQL Server.
- **Control Schema Objects:** Created in the `pubuser` schema. Other control schema objects are created in `_edb_replicator_pub`, `_edb_replicator_sub`, and `_edb_scheduler`.
- **Database User in `msdb`:** `pubuser_msdb` is mapped to the SQL Server login `pubuser`.

**Steps to Configure:**

1. **Create a SQL Server Login:**

    ```sql
    USE master;
    GO
    CREATE LOGIN pubuser WITH PASSWORD = 'password';
    GO
    ```

2. **Create a Database User in `msdb` with Required Privileges:**

    ```sql
    USE msdb;
    GO
    CREATE USER pubuser_msdb FOR LOGIN pubuser;
    GO
    GRANT EXECUTE ON SCHEMA :: dbo TO pubuser_msdb;
    GRANT SELECT ON SCHEMA :: dbo TO pubuser_msdb;
    GO
    ```

3. **Create the Database User for the Control Schema Object Creation and Ownership:**

    ```sql
    USE edb;
    GO
    CREATE USER pubuser FOR LOGIN pubuser WITH DEFAULT_SCHEMA = pubuser;
    GO
    ```

4. **Grant Database-Level Privileges:**

    ```sql
    GRANT CREATE TABLE TO pubuser;
    GRANT CREATE PROCEDURE TO pubuser;
    GRANT CREATE FUNCTION TO pubuser;
    GRANT CREATE SCHEMA TO pubuser;
    GO
    ```

5. **Choose the Control Schema:**

    - **New Schema:**

        ```sql
        CREATE SCHEMA pubuser AUTHORIZATION pubuser;
        GO
        ```

    - **Existing Schema:**

        ```sql
        GRANT ALTER ON SCHEMA :: edb TO pubuser;
        GRANT EXECUTE ON SCHEMA :: edb TO pubuser;
        GRANT SELECT ON SCHEMA :: edb TO pubuser;
        GRANT INSERT ON SCHEMA :: edb TO pubuser;
        GRANT UPDATE ON SCHEMA :: edb TO pubuser;
        GRANT DELETE ON SCHEMA :: edb TO pubuser;
        GO
        ```

6. **Grant Privileges to Create Triggers on Publication Tables:**

    ```sql
    GRANT ALTER ON edb.dept TO pubuser;
    GRANT ALTER ON edb.emp TO pubuser;
    GRANT ALTER ON edb.jobhist TO pubuser;
    GO
    ```

7. **Grant SELECT Privileges on Publication Tables:**

    ```sql
    GRANT SELECT ON edb.dept TO pubuser;
    GRANT SELECT ON edb.emp TO pubuser;
    GRANT SELECT ON edb.jobhist TO pubuser;
    GRANT SELECT ON edb.salesemp TO pubuser;
    GO
    ```

8. **(Optional) Create Group Roles for Application Users:**

    - **Create the Role:**

        ```sql
        CREATE ROLE appgroup AUTHORIZATION edb;
        GRANT SELECT, INSERT, UPDATE, DELETE ON edb.dept TO appgroup;
        GRANT SELECT, INSERT, UPDATE, DELETE ON edb.emp TO appgroup;
        GRANT SELECT, INSERT, UPDATE, DELETE ON edb.jobhist TO appgroup;
        GRANT SELECT, INSERT, UPDATE, DELETE ON edb.salesemp TO appgroup;
        GRANT EXECUTE ON SCHEMA :: _edb_replicator_pub TO appgroup;
        GRANT SELECT ON SCHEMA :: _edb_replicator_pub TO appgroup;
        GRANT INSERT ON SCHEMA :: _edb_replicator_pub TO appgroup;
        GRANT UPDATE ON SCHEMA :: _edb_replicator_pub TO appgroup;
        GRANT INSERT ON SCHEMA :: pubuser TO appgroup;
        GO
        ```

    - **Add a New User to the Role:**

        ```sql
        CREATE LOGIN applogin WITH PASSWORD = 'password', DEFAULT_DATABASE = edb;
        CREATE USER appuser FOR LOGIN applogin WITH DEFAULT_SCHEMA = edb;
        EXEC sp_addrolemember @rolename = 'appgroup', @membername = 'appuser';
        GO
        ```

### 5.1.4.3 Postgres Publication Database

When creating the publication database definition, a database user name must be specified with the following characteristics:

- The user can connect to the publication database.
- The user has superuser privileges.
- The user can modify system catalog tables to disable foreign key constraints during snapshot operations.

**Step 1: Create a Database Superuser:**

```sql
CREATE ROLE pubuser WITH LOGIN SUPERUSER PASSWORD 'password';
```

**Step 2 (Optional): Create Group Roles for Application Users:**

- **Create the Role:**

    ```sql
    CREATE ROLE appgroup;
    GRANT USAGE ON SCHEMA edb TO appgroup;
    GRANT SELECT, INSERT, UPDATE, DELETE ON edb.dept TO appgroup;
    GRANT SELECT, INSERT, UPDATE, DELETE ON edb.emp TO appgroup;
    GRANT SELECT, INSERT, UPDATE, DELETE ON edb.jobhist TO appgroup;
    GRANT SELECT, INSERT, UPDATE, DELETE ON edb.salesemp TO appgroup;
    ```

- **Additional Privileges for TRUNCATE (Log-Based Method):**

    ```sql
    GRANT TRUNCATE ON edb.dept TO appgroup;
    GRANT TRUNCATE ON edb.emp TO appgroup;
    GRANT TRUNCATE ON edb.jobhist TO appgroup;
    GRANT USAGE ON SCHEMA _edb_replicator_pub TO appgroup;
    GRANT INSERT ON _edb_replicator_pub.rrep_wal_events_queue TO appgroup;
    ```

- **Grant the Role to a New User:**

    ```sql
    CREATE ROLE appuser WITH LOGIN PASSWORD 'password';
    GRANT appgroup TO appuser;
    ```

**Note:**

- Roles for containing publication table privileges should be created before the publication.
- If a role is created after the publication, you must explicitly grant the necessary privileges on the publication tables and control schema objects to the new role.

**Trigger-Based Method:**

- A role must be granted the following privileges on the control schema objects:

    ```sql
    -- Example privileges for trigger-based method
    GRANT EXECUTE ON SCHEMA :: _edb_replicator_pub TO appgroup;
    GRANT SELECT ON SCHEMA :: _edb_replicator_pub TO appgroup;
    GRANT INSERT ON SCHEMA :: _edb_replicator_pub TO appgroup;
    GRANT UPDATE ON SCHEMA :: _edb_replicator_pub TO appgroup;
    ```

---

This document provides a clear and structured guide for setting up and managing roles and privileges in both SQL Server and Postgres databases for the EDB Postgres Replication Server.