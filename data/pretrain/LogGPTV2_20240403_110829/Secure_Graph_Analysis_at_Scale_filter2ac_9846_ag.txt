where each row contains a 32 bit key and a 32 bit value. (Since the
key is relatively long compared to the number of rows, we assume
that the keys were generated after adding unique suffixes to the
original keys, and are therefore unique and different from each
other in many locations.)
The left part of the table includes the run time of the basic
operations – shuffle, semi-honest and malicious ordering of the
results of the shuffle (namely, ordering the items using quicksort),
and computing the parity of the table for the purpose of the equality
check protocol. (This latter parity check repeats the computation
of the equality check 𝜅 = 32 times with respect to a table 𝑇 . The
equality check for a single shuffle-pair compares the results for an
input/output pair 𝑇 ,𝑇 ′. Since we need to check equality for a shuffle
protocol which runs three consecutive invocations of shuffle-pair,
we need to compute the parity for each intermediate result, a total
of four times.)
The right part of the table describes the run times of sorting. The
semi-honest sort includes running the shuffle and a semi-honest
ordering. The malicious sort includes running shuffle, four invoca-
tions of the parity protocol, and malicious quicksort ordering.
We can deduce from these results several observations:
• The run time of all operations is very close to being linear in
the number of rows. (We expected linear run time for shuffle
and 𝑂(𝑛 log 𝑛) run time for sorting. However, the logarith-
mic factor is not substantial since log(50𝑀)/log(1𝑀) ≈ 1.28,
while other parts of the protocol benefit from running on
large input sizes, and the usage of multi-threading also con-
tributes to hiding the log 𝑛 factor.)
• The performance of the secure shuffle protocol has the great-
est impact on the overall performance of the graph analysis
protocol since it is performed multiple times. The measured
runtime of the shuffle protocol is less than 0.5sec per one
million elements of length 128 bits each.
• The throughput of semi-honest sort is about 2.7 seconds per
• The throughput of malicious sort is about 14 seconds per
million rows. The run time of the malicious sort is typically 5-
6 times that of the semi-honest sort. (The increase in the run
million rows.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea624Size
1,048,576
5,242,880
10,485,760
52,428,800
shuffle
0.341
2.753
5.041
25.904
Basic protocols
semi-honest malicious parity
order
4.675
12.936
24.116
113.518
order
29.308
52.924
114.661
417.285
0.922
6.849
13.837
71.910
Sorting
semi-honest per 1M malicious per 1M malicious /
sort
semi-honest
5.016
15.689
29.157
139.422
sort
33.337
96.771
202.724
874.649
rows
31.793
15.845
16.694
13.939
rows
4.784
2.992
2.781
2.659
6.646
5.295
6.004
5.242
Table 2: Run times in seconds. Semi-honest sorting includes shuffle and semi-honest order. Malicious sorting includes shuffle,
four parity computations, and malicious order.
time is caused both by running a slower ordering protocol,
and by having to run the set equality protocols.)
Comparison to previous sorting protocols The most efficient
secure sorting protocol, to the best of our knowledge, is based on
radix sort and was presented in [28]. This protocol is only secure
in the semi-honest setting and is implemented in the same setting
as our protocol (3 servers, honest majority). In the full version of
the paper we provide a detailed performance comparison which
shows that the performance of our semi-honest sorting protocol is
similar to that of [28].
A.3 Testing the BFS protocol
We implemented the semi-honest and fully-secure (malicious) ver-
sions of the BFS protocol. We ran multiple experiments running
the entire protocol in different settings: The input size, i.e. the total
number of graph elements (|𝑉 | + |𝐸|), represented by a sequence
of (𝑢, 𝑣, 𝑑) tuples, ranged between 10, 000 to 10, 000, 000.6
The 𝑢 and 𝑣 fields are each 32 bits long, and 𝑑 is 64 bits long.
We also changed a bound 𝐵 on the degree of nodes, ranging from
𝐵 = 25 to 𝐵 = 219 (the scatter and gather circuits are composed
of log 𝐵 layers, and the overhead of these parts of the protocol is
linear in log 𝐵). In the implementation of the fully-secure protocol,
we set the statistical security parameter to be 𝜅 = 48. Each test with
a combination of parameters was repeated five times. Our method
can utilize the multiple processing cores to attain parallel speedup,
which we tested by varying the number of threads between 1 and
32. In this paper we report the performance of a typical setting of
16 threads.
The implementation of the protocol with full security against
malicious behavior follows the protocol of Section 7.4. In the imple-
mentation itself, the scatter and gather operations, as well as the
comparisons in quicksort, are implemented using the fully secure
protocols of [2, 20].
Component runtime The run time of the protocol is composed
of the following components
• Initial phase: sorting the elements based on the source field
and based on the destination field, computing two random
shuffles, and getting the shares of the inputs.
• Message-passing phase: applying two known permutations,
applying a random secret shuffle and its inverse, computing
the scatter and gather circuits.
6Since the protocol is secure the run time is independent of the graph topology for a
given maximal degree, thus the distribution of the number of nodes and edges does
not affect the runtime. In our experiments we set 20% of the elements to be nodes.
Table 3 shows the run time in milliseconds of each component
of the protocols: fixed public permutations, secret shuffles, sorting,
gather and scatter. The run time for each component was measured
as the time it took for the slowest of the three servers to finish the
computation, averaged over five runs.7 The main observations are
(1) sort is by far the slowest operation, slower for most input sizes by
a factor of about 10 compared to the secure shuffle. This emphasizes
the gain that our protocol achieves by replacing sort with shuffle
in the message-passing rounds. (2) The runtime of shuffle and of
sort scales linearly with the number of records 𝑁 . (3) The runtime
of gather and scatter is smaller even than that of shuffle.
Total runtime Table 4 shows the time of the init phase (composed
of two shuffles, two sort operations, and getting the shares), and
the time of the message-passing round (two shuffles, two public
permutations, gather and scatter). The total time is computed for
running BFS to distance 4. The main observation is that the total
runtime is very reasonable and scales linearly. The semi-honest
protocols takes about 8.5 seconds per million elements and about
92 seconds for 10 million elements. The fully secure protocol takes
about 24 seconds per million elements and about 200 seconds for
10 million elements.
The next column in Table 4 shows the ratio between the runtime
of the a single message-passing round and that of the initialization
phase. This ratio is in the range 10%-15%. This is a huge factor
which demonstrates the gain in using only shuffle, rather than sort,
in the message-passing rounds. The last column shows the ratio
between the total runtime of all four invocations of gather and
scatter, and the total runtime of the protocol. This ratio is less than
10% for 𝑁 = 100, 000 and less than 3% for the larger 𝑁 values. It
demonstrates that the computations in gather/scatter take a small
fraction of the run time. Therefore the protocol should be able to
support more complicated computations and their corresponding
gather/scatter phases, as is described in Appendix E.
The effect of using a shallow circuit It is crucial for the im-
plementation to use a low-depth circuit: The number of rounds
of the 3-party MPC protocol that we use for scatter and gather
is linear in the depth of the circuit. We describe in Appendix D
a straightforward circuit for scatter/gather that has depth 𝑛 and
𝑂(𝑛) gates, as well as a more shallow circuit with depth log 𝐵 and
𝑂(𝑛 log 𝐵) gates, where 𝐵 is a bound on the degree of nodes. We
implemented both circuits, and present the results in Appendix D.
As expected, the effect of the lower number of rounds in the shallow
circuit dominates the increase in the total number of gates. The net
7The results for the fully secure protocol with 10 million items are a bit of an outlier.
Session 2D: Secure Multiparty Computation CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea625N
Permute PermuteBack Shuffle
10,000
100,000
1,000,000
10,000,000
10,000
100,000
1,000,000
10,000,000
0.15
1.17
11.31
189.95
0.13
0.96
8.80
131.21
0.22
1.35
14.98
206.93
0.28
1.22
9.84
154.04
2.71
24.31
232.95
2765.00
10.41
85.53
835.88
10452.09
ShuffleBack SortSRC SortDST Gather
Scatter GetShares
semi-honest
2.87
26.28
292.49
2995.50
malicious
10.29
72.89
752.36
9476.57
47.91
283.99
2718.20
29405.05
275.53
1013.68
8421.62
59516.87
43.65
285.06
2929.92
30605.07
276.30
971.15
8421.97
56369.55
2.42
4.52
23.75
242.37
35.43
44.08
80.98
559.12
3.02
7.03
38.03
387.83
23.58
32.88
91.15
1087.78
0.90
3.25
12.43
232.32
0.67
5.77
23.95
187.34
Table 3: Run time (msec) of components of the semi-honest and malicious BFS protocols, supporting maximum node degree of
1023, and using 16 threads.
performance gain is quite dramatic, even for the smallest input size
of 𝑁 = 10, 000, MPC evaluation of the linear depth circuit was 60
times slower than evaluating the logarithmic depth circuit.
Comparison to existing work GraphSC [44], OblivGraph [40]