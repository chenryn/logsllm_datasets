```
#### **POST 请求**
```shell
$ curl -d "param1=value1&param2=value2" "http://www.example.com/login"
$ curl -d'login=emma＆password=123' -X POST https://example.com/login
# 或者
$ curl -d 'login=emma' -d 'password=123' -X POST  https://example.com/login
```
`--data-urlencode` 参数等同于 `-d`，发送 `POST` 请求的数据体，区别在于会自动将发送的数据进行 `URL` 编码。
```shell
curl --data-urlencode 'comment=hello world' https://example.com/login
# 上面代码中，发送的数据hello world之间有一个空格，需要进行 URL 编码。
```
#### **发送本地文件中的文字**
```shell
curl -d '@data.txt' https://example.com/upload
# 读取data.txt文件的内容，作为数据体向服务器发送。
```
#### **JSON 格式的 POST 请求**
```shell
curl -l -H "Content-type: application/json" -X POST -d '{"phone":"13888888888","password":"test"}' http://example.com/apis/users.json
```
#### **向服务器发送 Cookie**
使用`--cookie "COKKIES"`选项来指定cookie，多个cookie使用分号分隔：
```shell
curl http://example.com --cookie "user=root;pass=123456"
```
将cookie另存为一个文件，使用`--cookie-jar`选项：
```shell
curl URL --cookie-jar cookie_file
```
`-b` 参数用来向服务器发送 Cookie。
```shell
curl -b 'foo=bar' https://example.com
# 上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie。
```
```shell
curl -b 'foo1=bar' -b 'foo2=baz' https://example.com
# 上面命令发送两个 Cookie。
```shell
curl -b cookies.txt https://www.example.com
# 上面命令读取本地文件 cookies.txt，里面是服务器设置的 Cookie（参见-c参数），将其发送到服务器。
```
#### **Cookie 写入一个文件**
```shell
curl -c cookies.txt https://www.example.com
# 上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。
```
#### **请求的来源**
`-e` 参数用来设置 `HTTP` 的标头 `Referer`，表示请求的来源。
```shell
curl -e 'https://example.com?q=example' https://www.example.com
# 上面命令将Referer标头设为 https://example.com?q=example。
```
`-H` 参数可以通过直接添加标头 `Referer`，达到同样效果。
```shell
curl -H 'Referer: https://example.com?q=example' https://www.example.com
```
#### **上传二进制文件**
`-F` 参数用来向服务器上传二进制文件。
```shell
curl -F 'file=@photo.png' https://example.com/profile
# 上面命令会给 HTTP 请求加上标头 Content-Type: multipart/form-data ，然后将文件photo.png作为file字段上传。
```
`-F` 参数可以指定 `MIME` 类型。
```shell
curl -F 'file=@photo.png;type=image/png' https://example.com/profile
# 上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为 application/octet-stream。
```
`-F` 参数也可以指定文件名。
```shell
curl -F 'file=@photo.png;filename=me.png' https://example.com/profile
# 上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。
```
#### **设置请求头**
`-H` 参数添加 `HTTP` 请求的标头。
```shell
curl -H 'Accept-Language: en-US' https://example.com
# 上面命令添加 HTTP 标头 Accept-Language: en-US。
```
```shell
curl -H 'Accept-Language: en-US' -H 'Secret-Message: xyzzy' https://example.com
# 上面命令添加两个 HTTP 标头。
```
```shell
curl -d '{"login": "emma", "pass": "123"}' -H 'Content-Type: application/json' https://example.com/login
# 上面命令添加 HTTP 请求的标头是 Content-Type: application/json，然后用 -d 参数发送 JSON 数据。
```
#### **跳过 SSL 检测**
```shell
curl -k https://www.example.com
# 上面命令不会检查服务器的 SSL 证书是否正确。
```
#### **请求跟随服务器的重定向**
`-L` 参数会让 `HTTP` 请求跟随服务器的重定向。`curl` 默认不跟随重定向。
```shell
curl -L -d 'tweet=hi' https://api.example.com/tweet
```
值得注意的是，这种重定向方式不适用于在返回的 HTML 中的重定向，比如这种是不被 curl 识别的重定向(这部分内容由 `curl -v -L ` 生成)
```curl
* Connected to example.com (*.*.*.*) port 80 (#0)
> GET / HTTP/1.1
> Host: example.com
> User-Agent: curl/8.0.1
> Accept: */*
>
```
#### **调试参数**
`-v` 参数输出通信的整个过程，用于调试。
```shell
curl -v https://www.example.com
# --trace参数也可以用于调试，还会输出原始的二进制数据。
```
```shell
curl --trace - https://www.example.com
```
#### **获取本机外网 IP**
```shell
curl ipecho.net/plain
```
#### **使用 curl 测试网站加载速度**
命令有一个鲜为人知的选项，`-w`，该选项在请求结束之后打印本次请求的统计数据到标准输出。
首先，我们定义控制打印行为的格式化字符串。新建文本文件 `fmt.txt`，并填入下面的内容：
```ruby
\n
Response Time for: %{url_effective}\n\n
DNS Lookup Time:\t\t%{time_namelookup}s\n
Redirection Time:\t\t%{time_redirect}s\n
Connection Time:\t\t%{time_connect}s\n
App Connection Time:\t\t%{time_appconnect}s\n
Pre-transfer Time:\t\t%{time_pretransfer}s\n
Start-transfer Time:\t\t%{time_starttransfer}s\n\n
Total Time:\t\t\t%{time_total}s\n
```
curl 提供了很多置换变量，可以在格式化字符串中通过 `%{var}` 的形式使用。完整的变量列表可以在 `curl` 的 `manpage` 中查看。简单介绍一下我们使用的这几个变量：
- `url_effective`: 执行完地址重定向之后的最终 URL；
- `time_namelookup`: 从请求开始至完成名称解析所花的时间，单位为秒，下同；
- `time_redirect`: 执行所有重定向所花的时间；
- `time_connect`: 从请求开始至建立 TCP 连接所花的时间；
- `time_appconnect`: 从请求开始至完成 SSL/SSH 握手所花的时间；
- `time_pretransfer`: 从请求开始至服务器准备传送文件所花的时间，包含了传送协商时间；
- `time_starttransfer`: 从请求开始至服务器准备传送第一个字节所花的时间；
- `time_total`: 完整耗时。
然后执行请求，通过 @filename 指定保存了格式化字符串的文件：
```shell
curl -L -s -w @fmt.txt -o /dev/null http://www.example.com
```
输出：
```c
Response Time for: http://www.google.co.jp/?gfe_rd=cr&dcr=0&ei=cjIaWpTkHeiQ8QfnxYzoBA
DNS Lookup Time:        0.000038s
Redirection Time:       0.207271s
Connection Time:        0.000039s
App Connection Time:    0.000039s
Pre-transfer Time:      0.000067s
Start-transfer Time:    0.260115s
Total Time:             0.467691s
```
#### **要求返回是压缩的状态**
```shell
$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    54  100    54    0     0     42      0  0:00:01  0:00:01 --:--:--    42
100  2341  100  2341    0     0   1202      0  0:00:01  0:00:01 --:--:--  9289
Installing Yarn!
> Downloading tarball...
[1/2]: https://yarnpkg.com/latest.tar.gz --> /var/folders/j7/3xly5sk567s65ny5dnr__3b80000gn/T/yarn.tar.gz.XXXXXXXXXX.9hJsBsrA
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    57  100    57    0     0     72      0 --:--:-- --:--:-- --:--:--    72
100    93  100    93    0     0     63      0  0:00:01  0:00:01 --:--:--    63
100   643  100   643    0     0    248      0  0:00:02  0:00:02 --:--:--   707
100 1215k  100 1215k    0     0   153k      0  0:00:07  0:00:07 --:--:--  305k
[2/2]: https://yarnpkg.com/latest.tar.gz.asc --> /var/folders/j7/3xly5sk567s65ny5dnr__3b80000gn/T/yarn.tar.gz.XXXXXXXXXX.9hJsBsrA.asc
100    61  100    61    0     0    356      0 --:--:-- --:--:-- --:--:--   356
100    97  100    97    0     0    325      0 --:--:-- --:--:-- --:--:--   325
100   647  100   647    0     0   1283      0 --:--:-- --:--:-- --:--:--  1283
100   832  100   832    0     0   1107      0 --:--:-- --:--:-- --:--:--  812k
```