message 的引用。
代码虚拟化
基于虚拟机的代码保护也可以算是代码混淆技术的一种，是目前各种混淆中保护效
果最好的。简单地说，该技术就是通过许多模拟代码来模拟被保护的代码的执行，
然后计算出与被保护代码执行时相同的结果。
589
3.2.6 指令混淆
+------------+
| 头部指令序列 | -------> | 代码虚拟机入口 |
|------------| |
| | | 保存代码现场 |
| | |
| 中间指令序列 | | 模拟执行中间指令序列 |
| | |
| | | 设置新的代码现场 |
|------------| |
| 尾部指令序列 | ,
nodename = "(none)", '\000' ,
release = "4.13.0-38-generic", '\000' ,
version = "#43~16.04.1-Ubuntu SMP Wed Mar 14 17:48:43 UTC 20
18", '\000' ,
machine = "x86_64", '\000' ,
domainname = "(none)", '\000' 
},
user_ns = 0xffffffff822517a0 ,
ucounts = 0x0 ,
ns = {
stashed = {
counter = 0x0
},
ops = 0xffffffff81e2cc80 ,
inum = 0xeffffffe
}
}
获取源文件
将 /etc/apt/sources.list 里的 deb-src 行都取消掉注释：
$ sed -i '/^#\sdeb-src /s/^#//' "/etc/apt/sources.list"
596
4.1 Linux 内核调试
然后就可以更新并获取 Linux 内核源文件了：
$ sudo apt-get update
$ mkdir -p ~/kernel/source
$ cd ~/kernel/source
$ apt-get source $(dpkg-query '--showformat=${source:Package}=${
source:Version}' --show linux-image-$(uname -r))
$ ls linux-hwe-4.13.0/
arch CREDITS debian.master firmware ipc lib
net security tools zfs
block crypto Documentation fs Kbuild MAINTAINE
RS README snapcraft.yaml ubuntu
certs debian drivers include Kconfig Makefile
samples sound usr
COPYING debian.hwe dropped.txt init kernel mm
scripts spl
printk
在用户态程序中，我们常常使用 printf() 来打印信息，方便调试，在内核中也
可以这样做。内核（v4.16.3）使用函数 printk() 来输出信息，在
include/linux/kern_levels.h 中定义了 8 个级别：
#define KERN_EMERG KERN_SOH "0" /* system is unusable */
#define KERN_ALERT KERN_SOH "1" /* action must be taken immedi
ately */
#define KERN_CRIT KERN_SOH "2" /* critical conditions */
#define KERN_ERR KERN_SOH "3" /* error conditions */
#define KERN_WARNING KERN_SOH "4" /* warning conditions */
#define KERN_NOTICE KERN_SOH "5" /* normal but significant cond
ition */
#define KERN_INFO KERN_SOH "6" /* informational */
#define KERN_DEBUG KERN_SOH "7" /* debug-level messages */
用法是：
597
4.1 Linux 内核调试
printk(KERN_EMERG "hello world!\n"); // 中间没有逗号
而当前控制台的日志级别如下所示：
$ cat /proc/sys/kernel/printk
4 4 1 4
这 4 个数值在文件定义及默认值在如下所示：
598
4.1 Linux 内核调试
// kernel/printk/printk.c
int console_printk[4] = {
CONSOLE_LOGLEVEL_DEFAULT, /* console_loglevel */
MESSAGE_LOGLEVEL_DEFAULT, /* default_message_loglevel */
CONSOLE_LOGLEVEL_MIN, /* minimum_console_loglevel */
CONSOLE_LOGLEVEL_DEFAULT, /* default_console_loglevel */
};
// include/linux/printk.h
/* printk's without a loglevel use this.. */
#define MESSAGE_LOGLEVEL_DEFAULT CONFIG_MESSAGE_LOGLEVEL_DEFAULT
/* We show everything that is MORE important than this.. */
#define CONSOLE_LOGLEVEL_MIN 1 /* Minimum loglevel we let pe
ople use */
/*
* Default used to be hard-coded at 7, we're now allowing it to
be set from
* kernel config.
*/
#define CONSOLE_LOGLEVEL_DEFAULT CONFIG_CONSOLE_LOGLEVEL_DEFAULT
#define console_loglevel (console_printk[0])
#define default_message_loglevel (console_printk[1])
#define minimum_console_loglevel (console_printk[2])
#define default_console_loglevel (console_printk[3])
虽然这些数值控制了当前控制台的日志级别，但使用虚拟文件 /proc/kmsg 或者
命令 dmesg 总是可以查看所有的信息。
QEMU + gdb
599
4.1 Linux 内核调试
QEMU 是一款开源的虚拟机软件，可以使用它模拟出一个完整的操作系统（参考章
节2.1.1）。这里我们介绍怎样使用 QEMU 和 gdb 进行内核调试，关于 Linux 内核
的编译可以参考章节 1.5.9。
接下来我们需要借助 BusyBox 来创建用户空间：
$ wget -c http://busybox.net/downloads/busybox-1.28.3.tar.bz2
$ tar -xvjf busybox-1.28.3.tar.bz2
$ cd busybox-1.28.3/
生成默认配置文件并修改 CONFIG_STATIC=y 让它生成的是一个静态链接的
BusyBox，这是因为 qemu 中没有动态链接库：
$ make defconfig
$ cat .config | grep "CONFIG_STATIC"
CONFIG_STATIC=y
编译安装后会出现在 _install 目录下：
$ make
$ sudo make install
$ ls _install
bin linuxrc sbin usr
接下来创建 initramfs 的目录结构：
600
4.1 Linux 内核调试
$ mkdir initramfs
$ cd initramfs
$ cp ../_install/* -rf ./
$ mkdir dev proc sys
$ sudo cp -a /dev/null /dev/console /dev/tty /dev/tty2 /dev/tty3
/dev/tty4 dev/
$ rm linuxrc
$ vim init # 创建启动脚本
$ cat init
#!/bin/busybox sh
mount -t proc none /proc
mount -t sysfs none /sys
exec /sbin/init
最后把它们打包：
$ find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../
initramfs.cpio.gz
这样 initramfs 根文件系统就做好了，其中包含了必要的设备驱动和工具，boot
loader 会加载 initramfs 到内存，然后内核将其挂载到根目录 / ，并运行 init
脚本，挂载真正的磁盘根文件系统。
QEMU 启动!
$ qemu-system-x86_64 -s -S -kernel ~/kernelbuild/linux-4.16.3/ar
ch/x86_64/boot/bzImage -initrd ~/kernelbuild/busybox-1.28.3/init
ramfs.cpio.gz -nographic -append "console=ttyS0"
-s ： -gdb tcp::1234 的缩写，QEMU 监听在 TCP 端口 1234，等待 gdb
的连接。
-S ：在启动时冻结 CPU，等待 gdb 输入 c 时继续执行。
-kernel ：指定内核。
-initrd ：指定 initramfs。
nographic ：禁用图形输出并将串行 I/O 重定向到控制台。
-append "console=ttyS0 ：所有内核输出到 ttyS0 串行控制台，并打印到
601
4.1 Linux 内核调试
终端。
在另一个终端里使用打开 gdb，然后尝试在函数 cmdline_proc_show() 处下断
点：
$ gdb -ex "target remote localhost:1234" ~/kernelbuild/linux-4.1
6.3/vmlinux
(gdb) b cmdline_proc_show
Breakpoint 1 at 0xffffffff8121ad70: file fs/proc/cmdline.c, line
9.
(gdb) c
Continuing.
Breakpoint 1, cmdline_proc_show (m=0xffff880006701b00, v=0x1 ) at fs/proc/cmdline.c:9
9 seq_printf(m, "%s\n", saved_command_line);
可以看到，当我们在内核里执行 cat /proc/cmdline 时就被断下来了。
# id
uid=0 gid=0
# echo hello kernel!
hello kernel!
# cat /proc/cmdline
console=ttyS0
现在我们已经可以对内核代码进行单步调试了。对于内核模块，我们同样可以进行
调试，但模块是动态加载的，gdb 不会知道这些模块被加载到哪里，所以需要使用
add-symbol-file 命令来告诉它。
来看一个 helloworld 的例子，源码：