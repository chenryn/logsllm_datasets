从集群管理器运行以下命令。
```
$ docker swarm update --autolock=true
Swarm updated.
To unlock a swarm manager after it restarts, run the `docker swarm unlock` command and 
provide the following key:
    SWMKEY-1-5+ICW2kRxPxZrVyBDWzBkzZdSd0Yc7Cl2o4Uuf9NPU4
Please remember to store this key in a password manager, since without it you will not be able
to restart the manager. 
```
 `请务必将解锁钥匙放在安全的地方。您可以随时使用`docker swarm unlock-key`命令检查您当前的群解锁钥匙。
重新启动其中一个管理器节点，查看它是否会自动重新加入群集。您可能需要在命令前面加上`sudo`。
```
$ service docker restart 
```
 `尝试列出群中的节点。
```
$ docker node ls
Error response from daemon: Swarm is encrypted and needs to be unlocked before it can be used. 
```
 `虽然 Docker 服务已经在管理器上重新启动，但它不被允许重新加入群。您可以通过在另一个管理器节点上运行`docker node ls`命令来进一步证明这一点。重启后的管理器将显示为`down`和`unreachable`。
使用`docker swarm unlock`命令为重启的管理器解锁群。您需要在重新启动的管理器上运行此命令，并且需要提供解锁密钥。
```
$ docker swarm unlock
Please enter unlock key:  
```
 `该节点将被允许重新加入群，如果你运行另一个`docker node ls`，它将显示为`ready`和`reachable`。
建议在生产环境中锁定集群并保护解锁密钥。
现在，您已经构建了我们的*群*并了解了*领导者*和*经理 HA* 的基础架构概念，让我们继续讨论*服务*的应用方面。
#### 群集服务
我们在本章这一节所做的一切都在第 14 章的 Docker Stacks 中得到改进。然而，重要的是你要学会这里的概念，以便为第 14 章做好准备。
就像我们在群体初级读本中所说的……*服务*是 Docker 1.12 引入的新构造，它们只适用于*群体模式*。
服务让我们可以指定大多数熟悉的容器选项，例如*名称、端口映射、连接到网络、*和*映像*。但是它们增加了重要的云原生特性，包括*期望状态*和自动协调。例如，swarm 服务允许我们声明性地定义一个我们可以应用到 swarm 的应用的期望状态，并让 swarm 负责部署和管理它。
让我们看一个简单的例子。假设你有一个带有网络前端的应用。您有一个 web 服务器的映像，测试表明您需要 5 个实例来处理正常的日常流量。您将这个需求转换成一个单一的*服务*，声明要使用的映像，并且该服务应该总是有 5 个运行的副本。您将它作为您想要的状态发布给群，群负责确保始终有 5 个 web 服务器实例在运行。
我们将在一分钟内看到其他一些可以声明为服务一部分的东西，但是在此之前，让我们看看创建我们刚刚描述的内容的一种方法。
您可以通过以下两种方式之一创建服务:
1.  必须在命令行上使用`docker service create`
2.  用栈文件声明
我们将在后面的章节中研究栈文件。现在我们将集中讨论命令式方法。
> **注意:**创建新服务的命令在 Windows 上是一样的。但是，此示例中使用的映像是 Linux 映像，在 Windows 上无法工作。您可以用该映像替换一个 Windows web 服务器映像，该命令将会起作用。请记住，如果您从 PowerShell 终端键入窗口命令，您需要使用 backtick(`)来指示下一行的继续。
```
$ docker service create --name web-fe \
   -p 8080:8080 \
   --replicas 5 \
   nigelpoulton/pluralsight-docker-ci
z7ovearqmruwk0u2vc5o7ql0p 
```
 `请注意，许多熟悉的`docker container run`参数是相同的。在这个例子中，我们指定了`--name`和`-p`，它们对于独立容器和服务都是一样的。
让我们回顾一下命令和输出。
我们用`docker service create`告诉 Docker 我们正在声明一个新的服务，并且我们用`--name`标志将其命名为 **web-fe** 。我们告诉 Docker 将群中每个节点上的端口 8080 映射到每个服务副本内部的 8080。接下来，我们使用`--replicas`标志来告诉 Docker 这个服务应该总是有 5 个副本。最后，我们告诉 Docker 哪个映像用于副本—理解所有服务副本使用相同的映像和配置非常重要！
我们点击`Return`后，命令被发送到一个管理器节点，作为领导者的管理器在*群*上实例化了 5 个副本——记住群管理器也作为工人。每个接收到工作任务的工作人员或管理人员都会提取该映像，并启动一个容器来监听端口 8080。群领导还确保将服务的*期望状态*的副本存储在集群中，并复制给每个管理人员。
但这还不是结束。所有*服务*都由群持续监控——群运行后台*协调循环*，不断将服务的*观察状态*与*期望状态*进行比较。如果这两个州匹配，世界就是一个幸福的地方，不需要采取进一步的行动。如果不匹配，swarm 会采取措施使*观察状态*与*期望状态*一致。
例如，如果托管 5 个 **web-fe** 副本之一的*工作者*失败，则 **web-fe** 服务的*观察状态*将从 5 个副本下降到 4 个。这将不再与 5 的*期望状态*匹配，因此群体将开始新的 **web-fe** 副本，以使*观察状态*回到与*期望状态*一致。这种行为是云原生应用的一个关键原则，允许服务在节点故障等情况下自我修复。
#### 查看和检查服务
您可以使用`docker service ls`命令查看群上运行的所有服务的列表。
```
$ docker service ls
ID         NAME      MODE         REPLICAS   IMAGE               PORTS
z7o...uw   web-fe    replicated   5/5        nigel...ci:latest   *:8080->8080/tcp 
```
 `输出显示了一个正在运行的服务以及一些关于状态的基本信息。其中，您可以看到服务的名称，并且 5 个所需副本中有 5 个处于运行状态。如果您在部署服务后不久运行此命令，它可能不会显示所有任务/副本正在运行。这通常是由于在每个节点上提取映像所花费的时间。
您可以使用`docker service ps`命令查看服务副本列表和每个副本的状态。
```
$ docker service ps web-fe
ID          NAME       IMAGE              NODE   DESIRED   CURRENT
817...f6z   web-fe.1   nigelpoulton/...   mgr2   Running   Running 2 mins
a1d...mzn   web-fe.2   nigelpoulton/...   wrk1   Running   Running 2 mins
cc0...ar0   web-fe.3   nigelpoulton/...   wrk2   Running   Running 2 mins
6f0...azu   web-fe.4   nigelpoulton/...   mgr3   Running   Running 2 mins
dyl...p3e   web-fe.5   nigelpoulton/...   mgr1   Running   Running 2 mins 
```
 `命令的格式为`docker service ps `。输出在自己的行上显示每个副本(容器)，显示它在群中的哪个节点上执行，并显示期望的状态和当前观察到的状态。
有关服务的详细信息，请使用`docker service inspect`命令。
```
$ docker service inspect --pretty web-fe
ID:             z7ovearqmruwk0u2vc5o7ql0p
Name:           web-fe
Service Mode:   Replicated
 Replicas:      5
Placement:
UpdateConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Update order:      stop-first
RollbackConfig:
 Parallelism:   1
 On failure:    pause
 Monitoring Period: 5s
 Max failure ratio: 0
 Rollback order:    stop-first
ContainerSpec:
 Image:   nigelpoulton/pluralsight-docker-ci:latest@sha256:7a6b01...d8d3d
 init: false
Resources:
Endpoint Mode:  vip
Ports:
 PublishedPort = 8080
  Protocol = tcp
  TargetPort = 8080
  PublishMode = ingress 
```
 `上面的示例使用`--pretty`标志将输出限制为以易于阅读的格式打印的最有趣的项目。取消`--pretty`标志会给出更详细的输出。我强烈建议你通读`docker inspect`命令的输出，因为它们是一个很好的信息来源，也是了解幕后发生的事情的好方法。
稍后我们将回到这些输出中的一些。
#### 复制服务与全球服务
服务的默认复制模式是`replicated`。这将部署所需数量的副本，并在集群中尽可能均匀地分布它们。
另一种模式是`global`，它在群中的每个节点上运行一个副本。
要部署*全球服务*，您需要将`--mode global`标志传递给`docker service create`命令。
#### 扩展服务
*服务*的另一个强大功能是能够轻松地上下扩展它们。
让我们假设业务正在蓬勃发展，我们看到网络前端的流量翻了一番。幸运的是，扩展 **web-fe** 服务就像运行`docker service scale`命令一样简单。
```
$ docker service scale web-fe=10
web-fe scaled to 10
overall progress: 10 out of 10 tasks 
1/10: running   
2/10: running   
3/10: running   
4/10: running   
5/10: running   
6/10: running   
7/10: running   
8/10: running   
9/10: running   
10/10: running   
verify: Service converged 
```
 `此命令将服务副本的数量从 5 个扩展到 10 个。在后台，它将服务的*期望状态*从 5 更新为 10。运行另一个`docker service ls`命令来验证操作是否成功。
```
$ docker service ls
ID         NAME     MODE         REPLICAS   IMAGE               PORTS
z7o...uw   web-fe   replicated   10/10      nigel...ci:latest   *:8080->8080/tcp 
```
 `运行`docker service ps`命令将显示服务副本在群中的所有节点之间均匀平衡。
```
$ docker service ps web-fe
ID         NAME      IMAGE             NODE  DESIRED  CURRENT
nwf...tpn  web-fe.1  nigelpoulton/...  mgr1  Running  Running 7 mins
yb0...e3e  web-fe.2  nigelpoulton/...  wrk3  Running  Running 7 mins
mos...gf6  web-fe.3  nigelpoulton/...  wrk2  Running  Running 7 mins
utn...6ak  web-fe.4  nigelpoulton/...  wrk3  Running  Running 7 mins
2ge...fyy  web-fe.5  nigelpoulton/...  mgr3  Running  Running 7 mins
64y...m49  web-fe.6  igelpoulton/...   wrk3  Running  Running about a min
ild...51s  web-fe.7  nigelpoulton/...  mgr1  Running  Running about a min
vah...rjf  web-fe.8  nigelpoulton/...  wrk2  Running  Running about a mins
xe7...fvu  web-fe.9  nigelpoulton/...  mgr2  Running  Running 45 seconds ago
l7k...jkv  web-fe.10 nigelpoulton/...  mgr2  Running  Running 46 seconds ago 
```
 `在幕后，swarm 运行一种称为“扩散”的调度算法，试图在群中的节点之间尽可能均匀地平衡副本。在编写本文时，这相当于在每个节点上运行相同数量的副本，而没有考虑诸如 CPU 负载等因素。