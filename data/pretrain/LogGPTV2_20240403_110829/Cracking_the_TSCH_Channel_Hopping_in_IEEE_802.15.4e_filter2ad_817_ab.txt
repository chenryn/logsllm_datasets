gineer the channel hopping sequences by silently observing the
channel activities and then launch selective jamming attacks, where
the attacker jams only the transmission of interest on its specific
communication channel in its specific time slot. Please note that
the IEEE 802.15.4 standard leaves the upper layer protocol to decide
whether to encrypt the parameters in Eq. 1 during transmissions.
However, leaving it unprotected makes the problem trivial and the
networks vulnerable to attacks. Therefore, in this paper, we assume
that the parameters in Eq. 2 are encrypted and the attacker can
only get information from the unencrypted MAC message header3
and cannot understand the encrypted payload that stores ASN ,
ChannelO f f set, and Slenдth.
TSCH allows a transmitter to skip some scheduled transmissions
at runtime (e.g., skipping the retransmission if the first attempt
succeeds, skipping the routing traffic if no update is needed), signif-
icantly increasing the difficulty of cracking. We start our analysis
from a basic case where transmitters transmit packets in all sched-
uled slots (ideal case) and then extend our analysis to a realistic
case where transmitters may skip some time slots with scheduled
transmissions (realistic traffic).
3.1 Cracking the Channel Hopping Sequences
in the Ideal Case
In this case, we assume that all devices transmit packets in their
scheduled time slots and the attacker begins to eavesdrop on the
channels in the time slot S1. The encrypted ASN of slot S1 is un-
known to the attacker. Here are the key steps on how an attacker
cracks the channel hopping sequences, identifies the slots with
scheduled transmissions in the slotframe, and predicts the future
channel usage:
(1) Grouping the eavesdropped packets: The attacker snoops
the channels and groups the eavesdropped packets based on
their source and destination addresses stored in the unen-
crypted MAC message headers. The attacker then identifies
the channel usage sequence of each network device.
(2) Identifying the least common multiple of Ns and
Slenдth (denoted as LCM(Ns , Slenдth)): According to Eq. 2,
each network device must use the same channel in the time
slot S1 and S1+LCM(Ns,Sl enдth), S2 and S2+LCM(Ns,Sl enдth),
· · · . In other words, the channel hopping sequence used
by each device repeats in every LCM(Ns , Slenдth) time
slots. Based on each network device’s channel usage se-
quence, the attacker identifies its usage repetition cycle
and measures its time duration Tr epetition. The attacker
can also derive the length of a time slot Tslot by mea-
suring the minimum time duration between the start of
two consecutive transmissions. Finally, the attacker gets
LCM(Ns , Slenдth) = Tr epetition/Tslot . Please note that the
measured Tr epetition of some network devices may be less
than LCM(Ns , Slenдth) ∗ Tslot , thus the attacker should use
the largest value among all measured Tr epetition.
(3) Identifying the time slots with scheduled transmis-
sions: From the eavesdropped transmission activities, the
attacker identifies the time slots that are scheduled for trans-
missions in the slotframe.
2TSCH allows the upper layer protocol to define more than one type of slotframes. All
slotframes are merged into a single combined slotframe for execution at runtime.
3Due to the overhead concern, IEEE 802.15.4e does not require any encryption to the
MAC message header.
IoTDI ’19, April 15–18, 2019, Montreal, QC, Canada
Xia Cheng, Junyang Shi, and Mo Sha
Figure 2: Section 3.1 example: four slots in the slotframe,
three channels (24, 25, and 26) used in the network, and four
transmissions scheduled in each slotframe.
Table 1: Channel Offset Table (P increases by 1 every 12
slots).
Link
b->a
b->a
b->a
d->c
d->c
d->c
Slot No. Channel
12*P+3
12*P+7
12*P+11
12*P+4
12*P+8
12*P+12
26
24
25
26
24
25
Link
c->a
c->a
c->a
e->c
e->c
e->c
Slot No. Channel
12*P+2
12*P+6
12*P+10
12*P+1
12*P+5
12*P+9
26
24
25
24
25
26
(4) Creating a channel offset table: The goal of cracking the
channel hopping sequences by an attacker is to predict the
future channel usage and then perform selective jamming
attacks. Thus, there is no need for an attacker to obtain
the actual values of F, Slenдth, N , X, and ChannelO f f set in
Eq. 2. The attacker can assume the time slot S1 is the first slot
in the slotframe and set N = 0, and then create a table that
pairs each time slot with scheduled transmission (between
slot S1 and SLCM(Ns,Sl enдth)) to a channel for each link.
After deriving LCM(Ns , Slenдth), the time slots with scheduled
transmissions in the slotframe, and the channel offset table, the
attacker knows the exact channel hopping sequence of each link in
future, and thus can perform precise strikes to any transmission of
interest. The channel hopping sequences can be cracked without
error within the bounded time 2 ∗ LCM(Ns , Slenдth) ∗ Tslot
We use an example to illustrate the cracking process. We assume
that an attacker is placed in the network presented in Figure 1 and
begins to snoop the channels when ASN = 3. The attacker does
not know ASN and assumes P = 0. After snooping for a while,
the attacker observes some activities on three channels (channel
24, 25, and 26) and finds that the channel usage repeats in ev-
ery 12 time slots, as Figure 2 shows. The attacker then derives
LCM(Ns , Slenдth) = 12 and finds out that all four slots are sched-
uled with transmissions. Finally, the attacker generates Table 1 and
uses it to predict the channel usage for each link in future slots.
4.
3.2 Cracking the Channel Hopping Sequences
under Realistic Traffic
In this case, the attacker cannot easily derive LCM(Ns , Slenдth)
by identifying the channel usage repetition, because a transmitter
may skip some scheduled time slots at runtime, which breaks the
repetition pattern. The realistic traffic poses a significant challenge
4We assume that the attacker needs to snoop 2 ∗ LCM(Ns, Sl enдth) slots to confirm
the channel usage repetition cycle.
:T SU R[]
Algorithm 1: Ns Identification Algorithm
Input
Output: Ns
1 Initialize Density[] to 0 and Position[][] to 0;
2 for i = 1; i ≤ Nu; i + + do
for j = 1; j ≤ Nr ; j + + do
if Position[i][T SU R[j]%i] == 0 then
Position[i][T SU R[j]%i] = 1;
Density[i] = Density[i] + 1/i;
3
4
5
6
7
8
9 end
10 Output k (Density[k] is the smallest value in Density[]);
end
end
Figure 3: Algorithm execution example (i = 4 and T SU R[] =
{1, 5, 10, 14, 17, ...}).
for the attacker to derive Ns, because it cannot easily pinpoint the
beginning and the end of a channel usage repetition cycle. However,
we find that the attacker is able to accomplish the cracking by
employing a “trial-and-error” learning method. Algorithm 1 shows
the method that derives Ns. Please note that the attacker does not
know ASN because it does not know when the network starts.
Instead of using ASN , the attacker defines OSN (Observation Slot
Number) and sets the first observed time slot S1 with OSN = 1.
If the attacker observes the actual transmission in a time slot, it
adds its OSN value into the array, named T SU R (Time Slot Usage
Record). The T SU R array is the input of Algorithm 1. Nr denotes
the number of usage records that the attacker collects (number of
elements in T SU R[]). Algorithm 1 first defines a one-dimensional
array Density and a two-dimensional array Position with initial
values (line 1). Each element Density[i] stores the weighting factor
and helps the attacker to identify the likelihood of i being Ns. Each
element Position[i][j] indicates whether the time slot with offset j
is scheduled for transmission by assuming i = Ns.
The two-level nested loop computes the Density value for
each possible value of Ns according to T SU R[] (line 2 – 9). The
outside loop traverses all possible values of Ns (from 1 to Nu),
where Nu is the upper bound of Ns. The inside loop traverses all
records in T SU R[] (from 1 to Nr ). At each iteration, Algorithm 1
marks the time slots with scheduled transmissions with 1 in the
Position[i][] array by assuming i = Ns (line 4 – 7). T SU R[j]%i in-
dicates the corresponding slot offset for the record T SU R[j] when
applying it to a slotframe that consists of i slots. If the offset
(Position[i][T SU R[j]%i]) has not been previously labeled by any
record, Algorithm 1 marks it with 1 (line 5) and increases Density[i]
by 1/i (line 6). As an example, Figure 3 illustrates the first five it-
erations of the inside loop when i = 4 in Algorithm 1. In the first
Cracking the Channel Hopping Sequences in TSCH Networks
IoTDI ’19, April 15–18, 2019, Montreal, QC, Canada
iteration, T SU R[1] = 1, so the condition Position[4][1%4] == 0
is met. Position[4][1] is then set to 1 and Density[4] increases by
1/i = 1/4. In the second iteration, T SU R[2] = 5, so the condition
Position[4][5%4] == 0 is not met. Density[4] does not change. Sim-
ilarly, Density[4] increases by 1/4 in the third iteration and does
not change in the fourth and fifth iterations. After the outside loop
exits, Algorithm 1 outputs the array index with the smallest value
5. In
in Density array. The index is either Ns or a multiple of Ns
other words, the output of Algorithm 1 ∈ {m ∗ Ns|m ∈ N+}. We
prove the statement by contradiction.
Ns
Proof. We assume that there exists n (n%Ns (cid:44) 0) and
Density[n] < Density[m ∗ Ns] (∀m ∈ N+) and separate the proof
into two cases: (1) Ns and n do not share any common factor and
(2) Ns and n share at least one common factor.
Case 1: We assume that the first element in the Position[][] array
marked as 1 by Algorithm 1 when i = n is Position[n][p]. Since
Ns and n do not share any common factor, Algorithm 1 marks
Position[n][p], Position[n][(p + Ns)%n], ..., Position[n][(p + (n −
1)Ns)%n] as 1 after executing the line 3–8 if there are sufficient
observations in T SU R[]. After Algorithm 1 exits, the first n ele-
ments of Position[n][] are all marked as 1. So we have Density[n] =
100% ≥ Density[Ns], contradicting the assumption.
Case 2: We assume that there exists n that shares at least one
common factor with Ns and the largest common factor (LCF) of
Ns and n is LCF(Ns , n). We divide the slotframe consisting of Ns
LCF(Ns,n) blocks, each of which has LCF(Ns , n) slots.
slots into
LCF(Ns,n) blocks, each of which
We then divide the slotframe into
has LCF(Ns , n) slots. We define the densities of the blocks in the
slotframe with Ns slots as: ρ1, ρ2, ρ3, ..., ρ
. Similarly, we
define the densities of the blocks in the slotframe with n slots as:
ρ′
1, ρ′
2, ρ′
3, ..., ρ′
. We now treat each block as a single unit.
LC F(Ns ,n)
LCF(Ns,n) and
LCF(Ns,n) do not share any common factor. So we
Ns
can convert Case 2 into Case 1. In the fourth line of Algorithm 1,
when i = n, it maps each element in T SU R[] to a block in the
slotframe consisting of n slots (T SU R[]%n). According to the proof
for Case 1, all
LCF(Ns,n) blocks are eventually marked by all blocks
in the slotframe consisting of Ns slots after Algorithm 1 finishes
executing the line 3–8 if there are sufficient observations in T SU R[].
So we have
′
LCF(Ns , n)])
x ≥ max{ρ1, ρ2, ρ3, ..., ρ
ρ
and then the density of the slotframe when assuming the slotframe
has n slots is
} (∀x ∈ [1, 2, 3, ...,
LC F(Ns ,n)
Ns
Ns
n
n
n
n
n
Density[n] =
LC F(Ns ,n)
3 + ... + ρ′
LCF(Ns,n)
LC F(Ns ,n)
2 + ρ′
ρ′
1 + ρ′