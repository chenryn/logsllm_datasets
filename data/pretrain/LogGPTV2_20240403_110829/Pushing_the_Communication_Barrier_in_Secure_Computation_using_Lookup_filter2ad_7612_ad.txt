5
6
7
8
Asymptotic
≤ 6,624σ
256σ + 236
≤ 17,664σ
1,024σ + 243
≤ 44,160σ
4,096σ + 246
≤≈ 217σ
≈ 214σ
≤≈ 218σ
≈ 216σ
236
8
16σ + 4
243
10
246
12
247
14
247
16
32σ + 5
64σ + 6
128σ + 7
256σ + 8
≤ 6,632σ
256σ + 244
16σ + 240
≤ 17,674σ
1,024σ + 253
32σ + 248
≤ 44,172σ
4,096σ + 258
≤≈ 217σ
≈ 214σ
≤≈ 218σ
≈ 216σ
64σ + 252
128σ + 244
256σ + 255
≤ 138(δ − 1)2δσ
σN )−δ
(cid:1) OT1
(cid:1) R-OT)−δ
C((cid:0)N
C((cid:0)N
1
1
2δ
2δσ + δ
SETUP, ONLINE AND TOTAL COMMUNICATION FOR A δ-INPUT LUT WITH σ OUTPUTS FOR THE OTTT PROTOCOL [IKM+13],
ONLINE-LUT (OP-LUT) AND SETUP-LUT (SP-LUT). BEST RESULTS MARKED IN bold.
all i ∈ [0...2δ − 1]. P0 then engages in a (cid:0)N
Pre-Computation. P0 chooses its share T 0 ∈R ({0, 1}δ (cid:55)→
{0, 1}σ) and its rotation value r ∈R {0, 1}δ of the permuted
table and computes the shares of P1 for all possible rotation
values: (X0, ..., XN−1), with Xs(cid:48) = T [r ⊕ s(cid:48) ⊕ i] ⊕ T 0, for
N with P1
who inputs s ∈R {0, 1}δ as choice bits and obliviously obtains
T 1 = Xs = T [r ⊕ s ⊕ i] ⊕ T 0.
(cid:1) OT1
1
1
The communication cost for the pre-computation thereby
becomes independent of the circuit representation but it scales
with factor 22δ as opposed to 138(δ−1)2δ for the circuit-based
pre-computation. Overall, the (cid:0)N
(cid:1) OT-based pre-computation
performs better for δ < 10, while the circuit-based pre-
computation performs better for δ ≥ 10 (cf. Tab. IV). The
security of this pre-computation method is guaranteed by
oblivious transfer: Neither does P0 learn information about the
rotation value or output share of P1, since the rotation value is
used as selection string, nor does P1 learn information about
the rotation value or share of P0, since P1 gains no information
on any other than the selected truth-table.
PROTOCOL 3 (Online-LUT (OP-LUT) - our work):
Inputs and Oracles:
•
•
•
•
1)
2)
3)
4)
1)
2)
3)
Pre-Computation:
1
Common Input: Symmetric security parameter κ; number of
inputs δ; N = 2δ; Truth-table T : {0, 1}δ (cid:55)→ {0, 1}σ.
Input of P0: x0 ∈ {0, 1}δ.
Input of P1: x1 ∈ {0, 1}δ.
Oracles: Both parties have access to a(cid:0)N
σN functionality.
P0 chooses r ∈R {0, 1}δ and T 0 ∈R ({0, 1}δ (cid:55)→ {0, 1}σ). P1
chooses s ∈R {0, 1}δ.
P0 computes (X0, ..., XN−1), with Xs(cid:48) [i] = T [r ⊕ s(cid:48) ⊕ i] ⊕
T 0[i], for all 0 ≤ i, s(cid:48) < N.
(cid:1) OT1
P0 and P1 invoke the (cid:0)N
σN functionality where P0 plays
the sender with inputs (X0, ..., XN−1) and P1 plays the receiver
with input s and output T 1 = Xs s.t. Xs[i] = T [r⊕s⊕i]⊕T 0[i],
for all 0 ≤ i < N.
Output: P0 outputs (T 0, r); P1 outputs (T 1, s).
(cid:1) OT1
1
Online Evaluation (same as OTTT in Prot. 2):
P0 sends u = x0 ⊕ r to P1; P1 sends v = x1 ⊕ s to P0.
P0 sets z0 = T 0[u ⊕ v]; P1 sets z1 = T 1[u ⊕ v].
Output: P0 outputs z0; P1 outputs z1, s.t. z0⊕z1 = T [x0⊕x1].
they wish to perform secure computation ad-hoc. In order to
enable LUT-based secure computation even in settings with no
pre-computation, we suggest a new protocol for securely pre-
computing and evaluating LUTs. This protocol, called Setup-
LUT (SP-LUT), achieves much better total communication but
increases the online communication compared to the OTTT
and OP-LUT protocols. The general idea of SP-LUT is sim-
(cid:1) OT in the setup phase and obliviously
ple: Pre-compute (cid:0)N
transfer all possible outcomes of the LUT in the online phase.
We give a full description of the protocol in Prot. 4.
1
1
Compared to the OP-LUT approach, the SP-LUT protocol
only requires correlated randomness in the form of a pre-
(cid:1) OT, which requires only little communication
computed (cid:0)N
in the setup phase at the cost of 2δ bits of communication
during the online phase. However, the total communication
of SP-LUT is much lower than that of OP-LUT, since only
single bits need to be transferred instead of full truth-tables
(cf. Tab. IV). The security of the SP-LUT protocol is similar
to that of the GMW protocol [GMW87]: Both parties operate
on secret-shared data by sacriﬁcing a pre-computed OT on
random data.
PROTOCOL 4 (Setup-LUT (SP-LUT) - our work):
Inputs and Oracles:
•
•
•
•
1)
2)
1)
2)
3)
4)
1
σ functionality.
(cid:1) R-OT1
Common Input: Symmetric security parameter κ; number of
inputs δ; N = 2δ; Truth-table T : {0, 1}δ (cid:55)→ {0, 1}σ.
Input of P0: x0 ∈ {0, 1}δ.
Input of P1: x1 ∈ {0, 1}δ.
Oracles: Both parties have access to a(cid:0)N
P0 and P1 invoke the (cid:0)N
(cid:1) R-OT1
σ functionality where P0 plays
the sender and P1 plays the receiver. From the OT, P0 receives
random bits (m0, ..., mN−1) and P1 receives a random choice
s ∈ {0, 1}δ and message ms.
Output: P0 outputs (m0, ..., mN−1); P1 outputs (ms, s).
P1 sends u = s ⊕ x1 to P0.
P0 chooses z0 ∈R {0, 1}σ and computes and sends V =
(v0, ..., vN−1), where vi = T [i ⊕ x0] ⊕ mi⊕u ⊕ z0.
P1 computes z1 = vx1 ⊕ ms.
Output: P0 outputs z0; P1 outputs z1, s.t. z0⊕z1 = T [x0⊕x1].
1
Pre-Computation:
Online Evaluation:
D. Setup-LUT (SP-LUT)
While the OTTT and OP-LUT approaches achieve a good
online communication, their pre-computation cost scales with
at least 2δ, where δ is the number of input bits of a LUT.
This greatly hinders the applicability of these approaches when
pre-computation is not negligible, i.e., when the parties do
not have a pre-established communication channel or when
E. Optimizations
In the following, we discuss two optimizations for our LUT
protocols: Switching roles to reduce the round complexity for
SP-LUT and combining LUTs with overlapping inputs.
7
1
protocol in §IV-D pre-computes(cid:0)N
(cid:1) OT in a setup phase and
Reducing the Online Round Complexity. The SP-LUT
then uses these pre-computed values in the online phase to
securely evaluate the function. In its vanilla version, the online
phase consists of two rounds: 1) the receiver sends its updated
choice bits to the sender and 2) the sender rotates its pre-
computed masks and sends the updated correlations to the
receiver. Thereby, we overall require 2D(C) communication
rounds in the online phase, where D(C) is the highest number
of LUTs from any input to any output of the circuit.
In order to reduce the number of communication rounds, we
let both parties switch roles in the online phase after each
communication round, similar to [Hua12]. More speciﬁcally,
assume P0 plays the sender and P1 plays the receiver in the
ﬁrst round. P1 ﬁrst sends its updated choice bits u1 to P0,
who plays the receiver in the second round and replies with
the updated correlations V1 and the updated choice bits of the
second round u2. P1 then updates its local shares using V1,
switches to the role of the sender and replies with its updated
correlations V2, and then again switches to the role of the
receiver and sends its updated choice bits u3 for the third
communication round, etc. Overall, this reduces the number
of communication rounds from 2D(C) to D(C) + 1.
1
1
1
(cid:1) OT1
Multi-Out LUTs. Note that in our LUT-based approach,
we can efﬁciently combine two or more LUTs that have
the same or even only some common inputs. Consider a
functionality which has σ LUTs with one output bit each and
the same δ input bits. When naively applying our approach,
we would generate σ δ-input LUTs, one for each output bit.
(cid:1) OT protocol, we can
However, since we build on a (cid:0)N
of performing(cid:0)N
(cid:1) OTσ
1 , we would perform(cid:0)N
amortize the cost for computing the OT protocol by sending σ
output bits during the OT protocol. More speciﬁcally, instead
σ, thereby
saving σ − 1 executions of the OT protocol. This optimization
naturally extends to an arbitrary number of output bits σ.
Overall, for a functionality with δ input bits and σ output
bits, we can thereby decrease the required communication from
σ(256+2δ) to 256+σ2δ. In §VII-A we use this optimization to
decrease the communication for the 8-input and 8-output AES
S-box by a factor of 1.8 from 4,096 bit to 2,304 bit. Similarly,
we can combine two or more LUTs which share a sub-set of
inputs. For instance, consider the case where one LUT has
δ1 = 3 inputs x0, x1, x2 and a second LUT has δ2 = 4 inputs
x0, x1, x3, x4. In this case, we can combine both LUTs to one
1 and
2 which reduces communication from
LUT with δ = 5 inputs and thereby replace the(cid:0)23
(cid:1) OT1
(cid:0)24
1 by a(cid:0)25
(cid:1) OT1
(cid:1) OT1
1
1
488 bits to 312 bits.
1
V. LUT-BASED CIRCUIT SYNTHESIS
Hand-optimizing circuit representations for secure compu-
tation is a laborious and time-consuming task which leaves
room for errors in the crafted circuit constructions. This only
becomes more challenging for our LUT protocols where LUT-
based circuit representations are required, instead of Boolean
circuits with 2-input gates. Instead of reinventing the wheel and
recreating compilers from scratch, it is much more intuitive to
use existing hardware synthesis tools. This approach, which we
also follow in our work, allows to automatically generate and
optimize circuits even for complex functionalities that cannot
be easily hand-optimized. As shown in TinyGarble [SHS+15]
8
and its generalization to GMW [DDK+15], hardware synthe-
sis tools are a key enabler for making secure computation
protocols more practical by automating and speeding the
process of generating compact and correct Boolean circuits
and optimizing them for low size [SHS+15] and/or low depth
[DDK+15] depending on the protocol used. In this work,
we extend this approach further by exploiting LUT-based
synthesis tools to serve the different requirements of our
LUT protocols. However, such tools do not generate the LUT
representations we require by default, and require heavy re-
purposing to adapt them to our protocols. In the following, we
brieﬂy introduce hardware synthesis and afterwards discuss the
particular synthesis tool we use and how we customize it for
our purposes.
A. Hardware Synthesis Tools
Hardware synthesis is the process of transforming an
abstract form of function description into a functionally equiv-
alent logic implementation using different optimization and
technology mapping algorithms, which have been the subject
of research in electronic design automation for decades. The
circuit implementation generated usually depends on the target
hardware platform and manufacturing technology. Common
target hardware platforms include Application Speciﬁc Inte-
grated Circuits (ASICs) and Field Programmable Gate Arrays
(FPGAs). While ASIC synthesis tools have been the focus
of previous works [SHS+15], [DDK+15], since the proto-
cols therein required circuits with 2-input gates, our work
focuses on exploiting multi-input LUT-based synthesis tools
which form the core of FPGA-based synthesis software. ASIC
synthesis tools can also map to multi-input gates, given that
the gates are deﬁned in custom libraries. However, this is
tedious, impractical, and would require very large libraries to
accommodate all possible LUTs for each input size. Hence,
we opt to use LUT-based synthesis tools instead.
There exists a spectrum of commercial FPGA synthesis
tools such as Synplify by Synopsys [Syn], Quartus by Al-
tera [Alt], XST [Xil09] and Vivado Synthesis [Xil] tools by
Xilinx. However, these tools synthesize LUT-based circuits that
target their devices’ speciﬁcs such as the number of physically
possible inputs to an LUT (a maximum of 6-input LUTs
for most current FPGA devices). For our protocol, we aim
to generate up to 8-input LUTs and this, to the best of our
knowledge, is not available in mainstream commercial tools.
Mapping circuits to variable-input LUTs is, however, being
investigated by the Berkeley Logic Synthesis and Veriﬁcation
Group who develop ABC [Ber], a growing open-source soft-
ware for synthesis and veriﬁcation of binary logic circuits.
ABC provides an experimental implementation of different
mapping and optimization algorithms based on optimal-delay
Directed Acyclic Graph (DAG)-based technology mapping for
both standard gates and LUTs. In this work, we leverage the
mapping of ABC, coupled with Yosys [Wol]. We use Yosys
as an open-source framework for front-end processing of our
Verilog circuit descriptions to map them into a network of low-
level logic operations in an intermediate format. Then, ABC
structures this network into a DAG and maps it into LUTs in
a delay-optimized fashion.
However, for generating circuit netlists of more complex
functionalities, such as ﬂoating-point operations, we utilize
built-in Intellectual Property (IP) libraries in the Synopsys
Design Compiler (DC) [Syn10], a commercial ASIC synthesis
tool. Synopsys DC generates Boolean netlists of these circuits,
which we further process with the Yosys-ABC toolchain to re-
map them to LUT-based representations.
In the following, we focus on the Yosys-ABC toolchain and
our customizations to tailor its output to the requirements of
our LUT protocols.
B. Customizing LUT-based Synthesis
ABC is very ﬁtting for our purposes because it maps
circuits to variable δ-input LUTs in a generic manner and
allows the user to determine the maximum input size δmax
allowed, regardless of any target-speciﬁc FPGA architecture