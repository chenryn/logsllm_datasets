# 二、探索服务发现
在[第 1 章](01.html "Chapter 1. Welcome to Docker Swarm")、*欢迎来到 DockerSwarm*中，我们使用`nodes://`机制创建了一个简单但运行良好的本地 DockerSwarm 集群。这个系统不太实用，除了学习 Swarm 基础。
事实上，它只是一个平面模型，不考虑任何真正的主从架构，更不用说高级服务，如节点发现和自动配置、弹性、领导者选举和故障转移(高可用性)。实际上，它不适合生产环境。
除`nodes://`外，Swarm v1 官方支持四大发现服务；然而，其中一个，Token，是一个微不足道的非生产性的。基本上，使用 Swarm v1，您需要手动集成一个发现服务，而使用 Swarm Mode(来自 Docker 1.12)，一个发现服务 Etcd 已经集成。在本章中，我们将讲述:
*   发现服务
*   测试级发现服务:令牌
*   筏理论和 Etcd
*   动物园管理员和领事
在深入探讨这些服务之前，让我们讨论一下什么是发现服务？
# 发现服务
假设您在静态配置上运行一个 Swarm 集群，类似于[第 1 章](01.html "Chapter 1. Welcome to Docker Swarm")、*欢迎来到 Docker Swarm* 中的集群，网络是扁平的，每个容器都被分配了一个特定的任务，例如一个 MySQL 数据库。很容易找到 MySQL 容器，因为您为它分配了一个定义好的 IP 地址，或者您运行了一些 DNS 服务器。很容易通知这个单个容器是否工作，并且众所周知它不会改变它的端口(`tcp/3336`)。此外，我们的 MySQL 容器没有必要用它的 IP 和端口来宣布它作为数据库容器的可用性:我们当然已经知道了。
这是宠物模型，由系统管理员手动模拟。然而，由于我们是更先进的操作者，我们想驾驶一只牛来代替。
因此，假设您正在运行一个由数百个节点组成的 Swarm，该 Swarm 托管几个运行一定数量服务(web 服务器、数据库、键值存储、缓存和队列)的应用。这些应用运行在大量的容器上，这些容器可能会动态地更改它们的 IP 地址，这可能是因为您重新启动它们，创建新的副本，或者一些高可用性机制为您启动新的副本。
你如何找到代理你的 Acme 应用的 MySQL 服务？如何确保您的负载平衡器知道您的 100 个 Nginx 前端的地址，以便它们的功能不会中断？如果某项服务已被不同的配置取代，您如何通知？
*您使用发现服务。*
所谓的发现服务是一种具有许多特性的机制。您可以从不同的服务中进行选择，这些服务或多或少具有相似的品质，有它们的优点和缺点，但是基本上所有的发现服务都以分布式系统为目标，因此它们必须分布在所有集群节点上，具有可伸缩性和容错性。发现服务的主要目标是帮助服务找到并相互交谈。为了做到这一点，他们需要通过宣布自己来保存(注册)与每个服务所在位置相关的信息，并且他们通常通过充当键值存储来这样做。发现服务在 Docker 兴起之前就已经存在，但是随着容器和容器编排的出现，这个问题变得更加困难。
再次总结，通过发现服务:
*   您可以在基础架构中找到单个服务
*   您可以通知服务配置更改
*   服务记录其可用性
*   更多
通常，发现服务是作为键值存储来提供的。Docker Swarm v1 正式支持以下发现服务。但是，您可以使用`libkv`抽象界面集成自己的，您可以集成自己的，如下图所示:
[https://github.com/docker/docker/tree/master/pkg/discovery](https://github.com/docker/docker/tree/master/pkg/discovery)。
*   代币
*   consult 0 . 5 . 1+
*   Etcd 2.0+
*   ZooKeeper 3.4.5+
然而，Etcd 库已经作为其内置的发现服务集成到 Swarm 模式中。
# 令牌
Docker Swarm v1 包括一个开箱即用的发现服务，称为 Token。令牌被集成到 Docker 集线器中；因此，它要求所有的 Swarm 节点都连接到互联网，并且能够到达 Docker Hub。这是 Token 的主要限制，但是，您很快就会看到，Token 将允许我们在处理集群时进行一些练习。
简而言之，token 要求您生成一个名为 Token 的 UUID。有了这个 UUID，你可以创建一个管理器，扮演一个主人，并加入集群的奴隶。
## 用令牌重新构建第 1 章的例子
如果我们想保持它的实用性，现在是时候看一个例子了。我们将使用 token 重新构建[第 1 章](01.html "Chapter 1. Welcome to Docker Swarm")*的示例，欢迎来到 Docker Swarm* 。新奇的是，集群不再是平面的，而是由 1 个主节点和 3 个从节点组成，默认情况下，每个节点都启用了安全性。
主节点将是暴露 Swarm 端口`3376`的节点。我们将专门连接到它，以便能够驱动整个集群。
![Re-architecting the example of Chapter 1 with token](img/B05661_02_01-1.jpg)
我们可以使用以下命令创建 4 个节点:
```
$ for i in `seq 0 3`; do docker-machine create -d virtualbox 
    node$i; 
    done
```
现在，我们有四台机器运行最新版本的引擎，并启用了顶级域名系统。这意味着，正如你所记得的，引擎正在暴露端口`2376`而不是`2375`。
![Re-architecting the example of Chapter 1 with token](img/image_02_002.jpg)
我们现在将从主节点开始创建集群。拾取其中一个节点，例如`node0`，并获取其变量:
```
$ eval $(docker-machine env node0)
```
我们现在生成集群令牌和唯一标识。为此，我们使用`swarm create`命令:
```
$ docker run swarm create
3b905f46fef903800d51513d51acbbbe
```
![Re-architecting the example of Chapter 1 with token](img/image_02_003.jpg)
结果，swarm 容器输出令牌，我们将在这个例子中使用的协议将被调用，如图所示:`token://3b905f46fef903800d51513d51acbbbe`
请注意这个令牌标识，例如将其分配给一个外壳变量:
```
$ TOKEN=3b905f46fef903800d51513d51acbbbe
```
我们现在创建一个主文件，并试图至少满足一些基本的标准安全要求，怎么样，我们将启用 TLS 加密。我们稍后会看到，`swarm`命令接受 TLS 选项作为参数。但是我们如何将密钥和证书传递给容器呢？为此，我们将使用 Docker Machine 生成并放置在主机上的`/var/lib/boot2docker`中的证书。
实际上，我们将一个卷从 Docker 主机装载到 Docker 主机上的容器中。由于环境变量，所有这些都是远程控制的。
已经获得了`node0`变量，我们使用以下命令启动 Swarm 主程序:
```
$ docker run -ti -v /var/lib/boot2docker:/certs -p 3376:3376 swarm 
    manage -H 0.0.0.0:3376 -tls --tlscacert=/certs/ca.pem --
    tlscert=/certs/server.pem --tlskey=/certs/server-key.pem 
    token://$TOKEN
```
首先，我们以交互模式运行容器来观察群体输出。然后，我们将节点`/var/lib/boot2docker`目录装载到群容器内的`/certs`目录。我们将`3376` Swarm 安全端口从节点 0 重定向到 Swarm 容器。我们在管理模式下通过将`swarm`命令绑定到`0.0.0.0:3376`来执行该命令。然后我们指定一些证书选项和文件路径，最后用我们的令牌描述正在使用的发现服务是 token。
![Re-architecting the example of Chapter 1 with token](img/image_02_004.jpg)
运行这个节点后，让我们打开另一个终端，将一个节点加入这个 Swarm。让我们从获取`node1`变量开始。现在，我们需要 swarm 使用`join`命令，以便加入其主人为`node0`的集群:
```
$ docker run -d swarm join --addr=192.168.99.101:2376 
    token://$TOKEN
```
这里我们指定地址`192.168.99.101`的主机(本身)加入集群。
![Re-architecting the example of Chapter 1 with token](img/image_02_005.jpg)
如果我们跳回第一个终端，我们会看到主节点已经注意到一个节点加入了集群。因此，此时我们有一个由一个主节点和一个从节点组成的 Swarm 集群。
![Re-architecting the example of Chapter 1 with token](img/image_02_006.jpg)
既然我们现在理解了这个机制，我们可以停止终端中的`docker`命令，并使用`-d`选项重新运行它们。因此，要在守护模式下运行容器:
**大师**:
```
$ docker run -t-d -v /var/lib/boot2docker:/certs -p 3376:3376 swarm 
    manage -H 0.0.0.0:3376 -tls --tlscacert=/certs/ca.pem --
    tlscert=/certs/server.pem --tlskey=/certs/server-key.pem 
    token://$TOKEN
```
**节点**:
```
$ docker run -d swarm join --addr=192.168.99.101:2376  
    token://$TOKEN
```
我们现在将继续将另外两个节点加入集群，获取它们的变量，并重复上一个命令，如图所示:
```
$ eval $(docker-machine env node2)
$ docker run -d swarm join --addr=192.168.99.102:2376 
    token://$TOKEN
$ eval $(docker-machine env node3)
$ docker run -d swarm join --addr=192.168.99.103:2376 
    token://$TOKEN
```
例如，如果我们打开第三个终端，获取`node0`变量，并专门连接到端口`3376` (Swarm)而不是`2376` (Docker Engine)，我们可以看到一些来自`docker info`命令的花哨输出。例如，一个群集中有三个节点:
![Re-architecting the example of Chapter 1 with token](img/image_02_007.jpg)