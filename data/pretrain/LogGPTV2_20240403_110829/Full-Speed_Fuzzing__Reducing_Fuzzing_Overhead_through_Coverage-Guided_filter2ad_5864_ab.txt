### Coverage Metrics in Fuzzing

Coverage-guided fuzzers utilize one of three primary metrics for code coverage: basic blocks, basic block edges, or basic block paths. 

- **Basic Blocks**: These are linear sequences of code that end with a control-flow transfer instruction (e.g., jumps or returns). They form the nodes of a program's control-flow graph.
- **Basic Block Edges**: These represent the actual control-flow transfers between basic blocks. Edge coverage can be represented as a set of (src, dest) tuples, where src and dest are basic blocks. This representation allows edge coverage to be inferred from block coverage, provided that all critical edges (edges with multiple incoming or outgoing connections) are eliminated.
- **Basic Block Paths**: To date, no known fuzzers track coverage at the path granularity. However, future approaches could leverage Intel Processor Trace to make path coverage tracking more feasible.

**Examples of Fuzzers**:
- **honggFuzz [4]**, **libFuzzer [6]**, and **AFL [5]** track coverage at the edge granularity. honggFuzz and libFuzzer use block coverage to infer edge coverage, while AFL directly tracks edge coverage using a 64KB hash table [34].

### Coverage Tracing Performance

- **White-box Fuzzing**: For source-available binaries, fuzzers typically insert instrumentation at compile/assembly-time. For example, AFL uses custom GCC and Clang wrappers to achieve this.
- **Black-box Fuzzing**: For source-unavailable binaries, fuzzers face the challenge of reconstructing binary control flow. VUzzer [7] uses PIN [36] for dynamic instrumentation during run-time, while AFL’s QEMU user-mode emulation also instruments dynamically but incurs high overheads (up to 1000% compared to native execution). Cisco-Talos provides a static binary rewriter, AFL-Dyninst [10], which has shown better performance on select binaries [37].

### Focus of This Paper

Coverage-guided fuzzing involves tracing the coverage of all generated test cases. However, only a small percentage of these test cases increase coverage. Inspired by Amdahl's Law, we aim to improve the performance of coverage-guided fuzzing by focusing on coverage-increasing test cases. We introduce **UnTracer**, a coverage-guided tracing framework that restricts tracing to only coverage-increasing test cases.

### Impact of Discarded Test Cases

Traditional fuzzers like AFL [5], libFuzzer [6], and honggfuzz [4] rely on random mutation-based test case generation. Coverage-increasing test cases are preserved and prioritized for future mutations, while non-coverage-increasing test cases are discarded. To reduce the rate of non-coverage-increasing test cases, some fuzzers employ "smart" test case generation techniques, such as symbolic execution, program state analysis, and taint tracking.

We investigate the performance impact of executing and tracing non-coverage-increasing test cases in two popular fuzzers: **AFL** (blind test case generation) and **Driller** (smart test case generation). Our experiments measure the runtime spent on test case execution and coverage tracing across eight binaries for one hour each, and the corresponding rates of coverage-increasing test cases.

**Experimental Setup**:
- **AFL-Clang and AFL-QEMU**: Evaluated on eight benchmarks from Section VI.
- **Driller-AFL (ShellPhuzz [40])**: Evaluated on eight pre-compiled CGC binaries [42].
- **Timing and Logging**: Inserted timing code in AFL’s `run_target()` function to measure execution/tracing time and log the total number of test cases generated.
- **Coverage-Increasing Test Cases**: Counted by examining the AFL queue directory and counting test cases tagged with `+cov`.

**Results**:
- **Table I**: Both AFL and Driller spend the majority of their runtimes on test case execution/coverage tracing. AFL-Clang and AFL-QEMU average 91.8% and 97.3% of each hour, respectively, while Driller-AFL averages 95.9%.
- **Table II**: The rates of coverage-increasing test cases are very low: AFL-Clang (0.0062%), AFL-QEMU (0.0257%), and Driller-AFL (0.00653%). This indicates that both blind and smart fuzzers spend most of their time on non-coverage-increasing test cases.

### Coverage-Guided Tracing

Current coverage-guided fuzzers trace all generated test cases to compare their individual code coverage to the accumulated global coverage. Test cases with new coverage are retained for mutation, while those without new coverage are discarded. In Section III, we showed that the majority of the time is spent on non-coverage-increasing test cases. Therefore, we propose **coverage-guided tracing**, which restricts tracing to only coverage-increasing test cases, thereby improving the overall performance of the fuzzer.

By focusing on coverage-increasing test cases, UnTracer aims to significantly enhance the efficiency of coverage-guided fuzzing.