and even corrupt old logs [tam01]. Traditional logging systems also lack completeness. They
usually do not record enough data to fully understand or recreate attacks. Typical loggers only
save a few types of system events, which may not be suﬃcient to determine how the break-in
occurred or the extent of the damage caused by the break-in. This often leaves administrators with
an assessment of data loss, and no way of ﬁxing the machine without completely reinstalling the
operating system and all of the applications.
ReVirt is a VM-based logging and replaying system that attempts to address the lack of integrity
and completeness provided by traditional loggers. ReVirt performs system logging at the VMM
layer, thus eliminating the need to trust the operating system. The guest virtual machines are unable
to access or tamper with ReVirt. ReVirt also records all of the operations necessary to recreate an
entire attack, even if the intruder goes so far as to replace the compromised machine’s operating
system. Logging is done at an instruction-by-instruction level, giving administrators a complete
picture of everything that has happened on the guest virtual machine, even in the presence of non-
deterministic attacks and execution.
While ReVirt is a powerful logging tool, it may leak sensitive information if the logs are not
356
well protected. One fundamental principle of building secure systems is minimizing the amount
of time that sensitive data remains in a system [GPCR04]. Many cautious applications destroy
sensitive data (e.g. password, cryptographic keys) right after it is used. With ReVirt, however,
this data is never really ”dead” because ReVirt records everything that happens in the system.
If an attacker manages to get a hold of ReVirt logs, then he or she will have access to all of
this sensitive information. Although it is very diﬃcult to remotely compromise the ReVirt logging
virtual machine, an insider could steal a hard drive or attempt to view the log by physically opening
it on a machine. One way of partially mitigating this threat is to encrypt ReVirt’s logs.
4.6 SubVirt: VM-Based Malicious Software
Virtual machines have a number of excellent security properties that help protection systems to run
on a machine without being exposed to attack by malware running on the guest operating system.
The isolation provided by virtual machines is great for security systems, but it can also be used
by malicious software to avoid detection and prevent removal. This idea was ﬁrst proposed by
King et al. in research on SubVirt [KC06]. The authors outline a method for taking the operating
system running on the target machine and hoisting it into a guest virtual machine. The malware
can then run below it at the virtual machine monitor level. Once encapsulated in a virtual machine,
the only way for the guest operating system to detect the malware, other than noticing the very
small performance overhead, is to use a technique such as redpill to determine if it is running
inside of a virtual machine. (Redpill was discussed earlier in section 4.3. It works by exploiting
imperfect virtualization of the x86 SIDT instruction.) However, the authors implemented a basic
countermeasure to the redpill technique that involves searching for redpill and emulating the SIDT
instruction, making detection even more diﬃcult. Now with malware installed below the below
the guest operating system, it is free to perform any number of tasks without having to worry about
hiding itself or being removed by the guest OS.
SubVirt works by installing itself during system boot. Before this can happen, however, SubVirt
needs a way of getting onto the target system’s disk. This can be done by packaging SubVirt
with other software as a Trojan, or by remotely exploiting the target machine. During installation,
SubVirt is placed on the hard disk in specially allocated disk blocks using low-level drivers in order
to bypass anti-malware protection mechanisms. The installer then modiﬁes the boot sequence
during the next shut down to run SubVirt. The next time that the machine boots up the user’s
operating system will be running in a virtual machine with SubVirt below it. SubVirt virtualizes
the original disk, keeping most of the blocks in the same place and only using a small amount
of space for its storage. SubVirt also virtualizes the small amount of extra physical memory it
occupies by swapping extra pages out to disk. This way, the guest OS sees the same amount of
357
memory and the original disk contents without incurring a signiﬁcant performance overhead.
One potential weakness of SubVirt is its liability to detection during system boot. Starting the
virtual machine monitor and the guest operating system does add a signiﬁcant amount of time to
the normal boot process, going from a 23-second boot time to a 101-second boot time for a Win-
dows XP target. To help mitigate this problem, SubVirt emulates restarts and shut-downs by going
into power-saving mode without turning oﬀ the machine or restarting the virtual machine monitor.
However, emulated restarts still take longer (54 seconds for a Windows XP target) than normal
boots. Essentially, what these numbers mean is if somebody is suspicious and is looking for Sub-
Virt, then that person will most likely be able to detect it by rebooting the machine. Typical users,
however, do not closely monitor their boot times and will most likely not notice the diﬀerence,
especially since boot times will vary naturally when new drivers and programs are installed on the
system.
In summary, SubVirt poses signiﬁcant challenges for designers of anti-malware protection pro-
grams. It exploits the isolation properties of virtual machines to achieve a new level of separation
from the target operating system, making it very diﬃcult to detect and remove. Perhaps the best
method for dealing with this new breed of malware is to run VM-based intrusion detection sys-
tems on the host. This way, SubVirt may be able to move the guest OS into a virtual machine one
level deeper, but any malicious programs run by SubVirt would still be subject to scrutiny by a
VM-based IDS. Furthermore, VM introspection techniques may immediately detect the presence
of SubVirt due to the addition of an intermediary operating system. It is always important to keep
in mind how attackers might take advantage of state-of-the-art security mechanisms to protect their
own malicious software.
5 Future VM Security System Research
While VM-based security systems have been a major focus of security researchers, there are still
a number of challenging problems that have not been addressed. This section discusses some
potential areas for future work on virtual machine security systems.
5.1 Secure User Interface
When a guest operating system is compromised, current virtual machine security systems do not
prevent sensitive user input from going to the compromised machine. For example, if a hacker
breaks into a guest OS and installs a key logger, then the hacker can obtain the user’s password.
Instead of sending the raw password input to the guest VM, it may be possible for the virtual
machine monitor to expose a secure input ﬁeld directly to the user, and instead send the password
358
hash to the guest VM. This way, the guest OS will never see the user’s real password, keeping it
safe from attackers who do not have access to the VMM layer.
There are a number of challenges with developing a secure input system. First, it is diﬃcult to
determine where passwords are checked in the guest OS and in its applications. Ideally, a secure
input system should be able to automatically insert hooks in appropriate locations to support secure
data entry without recompiling the target operating system or applications. Doing this, however, is
a diﬃcult problem. Another approach might be for the virtual machine monitor to export a secure
input API that returns a password hash to the caller on the guest VM.
Another challenge to developing a secure input solution is making sure that an attacker cannot
spoof the secure input interface on the user’s video monitor. This can be achieved by providing
a graphical display that cannot be forged or obstructed. There are various options available for
addressing this problem. The ﬁrst is to have the user input a speciﬁc key sequence, similar to
ctrl+alt+delete, which will always trap to the VMM. The VMM can then display a secure input
dialog box. Another option that is used in the NetTop architecture [MS00] is to reserve a small
space at the top of the screen for exclusive use by the VMM. This space indicates which system
has control of the display, and could be changed to say ”VMM” during secure input entry. Im-
plementing this type of secure display, however, would require modiﬁcation to current commodity
graphics hardware.
5.2 Secure Device Driver Domains
Device drivers are a critical part of every operating system. They mediate interaction between
software and hardware, often running inside of the kernel at a high privilege level. Many device
drivers are also very complicated, and some are even written by relatively unskilled programmers,
making their quality highly suspect. These factors make driver code a serious security risk to
the operating system. Empirically, driver code tends to be the worst quality code found in most
kernels [CYC+01], as well as the greatest source of exploitable security vulnerabilities [AFS97].
Given that device drivers pose a serious security risk, it would be desirable to isolate them
from the rest of the operating system. The resources available to each device driver should also
be constrained to prevent them from aﬀecting system stability. Virtual machine technology allows
such isolation. If each driver runs in its own domain, then it will be unable to interfere with other
parts of the operating system.
While having a domain for each driver would signiﬁcantly improve system stability and secu-
rity, there are a number of challenges that must addressed to achieve this goal. First, the device
driver domain should be securely partitioned from the virtual machine monitor. The virtual ma-
chine monitor must run in an memory that the device domain cannot access directly. This would
359
require additional hardware support from the I/O MMU or a similar chip set. Second, this architec-
ture requires secure communication between the guest VM and the device driver domain. No other
virtual machines should be able to eavesdrop or tamper with this communication channel. Finally,
the cost of partitioning device drivers into their own domains must be low. This is a very diﬃcult
problem because some devices have very high throughput and latency requirements. Switching
to a separate domain for each driver call requires context switching, which can be very expensive
for high-throughput devices. If driver domains slow down the system too much, then they are not
likely to practical for real-world deployment
5.3 VM based Security Support for Portable Devices
With the increased number of attacks on portable devices such as cell phones and PDAs, security
for portable devices has become a serious concern. Adapting virtual machine technology to func-
tion on portable devices would allow many of the security mechanisms discussed here to run on
those devices as well, providing a higher level of security. There are several unique challenges,
however, when running virtual machines on portable devices with limited resources.
One problem with running virtual machines on portable devices is that some virtual machine
monitors, such as Xen, rely on hardware support for multiple privilege rings. While standard pro-
cessors support a number of privilege rings, embedded processors rarely oﬀer such capability. Get-
ting around this limitation would require additional instruction emulation and translation, which
will negatively impact performance. Another challenge that must be overcome to run virtual ma-
chines on portable devices is their limited amount of resources and computation ability. Things like
battery life also start to become an issue when you are dealing with PDAs and cellular phones. It
may also be costly to run multiple virtual machines due to memory requirements. Finally, portable
devices will often have intermittent or no network connectivity. Security mechanisms such as
trusted computing platforms may not be able to function properly without network-based veriﬁca-
tion. This makes digital rights management a diﬃcult task for portable devices.
360
References
[A N] A New Adore Rootkit. http://lwn.net/Articles/75990.
[AFS97] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A secure and reliable bootstrap archi-
tecture. In SP ’97: Proceedings of the 1997 IEEE Symposium on Security and Privacy,
page 65. IEEE Computer Society, Washington, DC, USA, 1997.
[AMD] AMD Corp.
AMD’s Virtualization Solutions–Optimizing Enterprise Services.
Http://enterprise.amd.com/en/Solutions/Consolidation/virtualization.aspx.
[Asl] M. Aslett.
success.
A virtual
In Computer Business Review Online.
http://www.cbronline.com/content/COMP/magazine/Articles/Servers Mainframes/AVirtual-
Success.asp.
[BC00] D. P. Bovet and M. Cassetti. Understanding the Linux Kernel (Ed. A. Oram). O’Reilly &
Associates, Inc., Sebastopol, CA, USA, 2000. ISBN 0596000022.
[BDF+03] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt,
In SOSP ’03: Proceedings of the
and A. Warﬁeld. Xen and the art of virtualization.
nineteenth ACM symposium on Operating systems principles, pages 164–177. ACM Press,
New York, NY, USA, 2003.
[BDGR97] E. Bugnion, S. Devine, K. Govil, and M. Rosenblum. Disco: Running commodity
operating systems on scalable multiprocessors. ACM Transactions on Computer Systems,
15(4):412–447, 1997. URL citeseer.ist.psu.edu/bugnion97disco.html.
[Bea03] J. Beale. Detecting server compromises. In Information Security Magazine. TechTarget,
Feb. 2003. http://infosecuritymag.techtarget.com/2003/feb/
linuxguru.shtml.
[BP04] K. Borders and A. Prakash. Web tap: detecting covert web traﬃc.
In CCS ’04: Pro-
ceedings of the 11th ACM conference on Computer and communications security, pages
110–120. ACM Press, New York, NY, USA, 2004. ISBN 1-58113-961-6.
[bre]
How to break out of a chroot() jail. Http://www.bpfh.net/simes/computing/chroot-
break.html.
[BZP05] K. Borders, X. Zhao, and A. Prakash. Sting: Detecting evasive malware.
In IEEE
Symposium on Security and Privacy. 2005.
361
[CCC+05] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang, and P. Barham.
SIGOPS Oper. Syst. Rev.,
end-to-end containment of internet worms.
Vigilante:
39(5):133–147, 2005. ISSN 0163-5980.
[CN01] P. M. Chen and B. D. Noble. When virtual is better than real. In HOTOS ’01: Proceedings
of the Eighth Workshop on Hot Topics in Operating Systems, page 133. IEEE Computer
Society, Washington, DC, USA, 2001.