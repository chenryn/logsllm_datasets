这样描述Rogue的USC。
“New scalar SIMD shader core”
其中，标量（scalar）代表了标量指令集这一基本特征。这里的
SIMD说法是不精确的，容易让人产生误解，原作者可能是想用它描述
与Warp类似的线程并行特征，但用词不当。
另一方面，因为Rogue的ALU流水线具有较强的并行能力，加上前
面的指令组机制，所以Rogue架构上还有一种并行模式，那就是指令组
级别的并行。
13.4 软件模型和微内核
在PowerVR GPU的软件模型中，名为微内核（Microkernel）的GPU
固件（firmware）起着关键的作用，不但与普通的GPU功能关系密切，
而且是很多调试功能的基础。
13.4.1 软件模型
简单理解，微内核就是运行在PowerVR GPU内部的软件。一方面，
与CPU端的驱动程序通信，为其提供服务；另一方面，管理GPU上的硬
件资源，处理GPU上各个硬件部件所报告的事件。图13-5画出了包含微
内核的PowerVR GPU软件模型。
图13-5 PowerVR GPU的软件模型
图13-5是以Linux操作系统的情况为例来画的，图中的DRM代表
Linux系统中的直接渲染管理器（Direct Render Manager），UMD和
KMD分别代码GPU的用户态驱动和内核态驱动程序。
顺便说明一下，PowerVR GPU的驱动程序一般是芯片生产商提供
的，通常在IMG公司提供的驱动程序开发套件（DDK）的基础上进行开
发。例如，在包含PowerVR GPU的TI平台上，其内核态驱动程序就是TI
提供的，名字叫omapdrm，以下是通过dmesg观察的内核信息。
[    3.269447] omapdrm omapdrm.0: fb0: omapdrm frame buffer device
[    3.309063] [drm] Initialized omapdrm 1.0.0 20110917 on minor 0
在Linux内核源代码树包含了omapdrm驱动，位置为
gpu/drm/omapdrm。然而，用户态驱动程序是不开源的。下载和更新微
内核的逻辑包含在用户态驱动程序中。
在Google的Android源代码树中，有一套功能更强大的PowerVR驱
动程序，目录名就叫pvr，路径为drivers/gpu/pvr。这个驱动程序支持一
个虚拟的调试子设备，设备路径为以/dev/dbgdrv。
13.4.2 微内核的主要功能
微内核提供多种功能，根据有限的信息，有如下几类：内存空间管
理、电源管理、硬件的快速恢复、任务调度、调试和调优支持等。
在上面提到的PVR驱动程序的sgxinfo.h中，定义了向微内核发送命
令用的枚举常量，并且包含了命令类型。摘录如下。
typedef enum _SGXMKIF_CMD_TYPE_
{
    SGXMKIF_CMD_TA                = 0,
    SGXMKIF_CMD_TRANSFER        = 1,
    SGXMKIF_CMD_2D                = 2,
    SGXMKIF_CMD_POWER            = 3,
    SGXMKIF_CMD_CONTEXTSUSPEND    = 4,
    SGXMKIF_CMD_CLEANUP            = 5,
    SGXMKIF_CMD_GETMISCINFO        = 6,
    SGXMKIF_CMD_PROCESS_QUEUES    = 7,
    SGXMKIF_CMD_DATABREAKPOINT    = 8,
    SGXMKIF_CMD_SETHWPERFSTATUS    = 9,
     SGXMKIF_CMD_FLUSHPDCACHE    = 10,
     SGXMKIF_CMD_MAX                = 11,
    SGXMKIF_CMD_FORCE_I32       = -1,
} SGXMKIF_CMD_TYPE;
上面0号命令中的TA是Tiling Accelerator的缩写，代表图块加速器。
从上述定义可以看到，微内核所提供的服务是很广泛的，8号命令是用
于设置数据断点的，本章后面将介绍它。
13.4.3 优点
因为微内核软件很容易更新，所以使用它来完成上述功能的第一个
优点就是灵活，容易修正和升级。
在官方文档提到的另一个好处是与通常在CPU端处理事件的做法相
比，使用微内核来处理GPU的事件速度快、延迟小，不仅减少了CPU端
的开销，还减少了CPU和GPU之间的交互，有利于降低功耗。
13.4.4 存在的问题
任何方法都不会是完美的，上述软件模型很容易导致一个工程问
题。图13-5中的UMD、KMD和微内核三者之间需要相互通信和紧密配
合。为了提高效率，设计者使用了共享数据结构等耦合度很高的通信接
口，这便导致三者之间一旦一方改动了共享的数据结构，那么其他两方
也要随着更改和重新编译，不然就可能导致严重的问题。一位曾经参与
过Nokia N9项目的同行在博客中很生动地描述了这个问题，将其称为系
统集成过程中的噩梦。
另外，微内核的大多数代码都是使用汇编语言编写的，这也导致开
发成本较高和维护困难。
13.5 断点支持
在公开的PowerVR GPU资料中，没有专门介绍硬件的调试设施。本
节根据不同来源的零散信息简要介绍PowerVR GPU的断点支持。
13.5.1 bpret指令
只在参考指令集的流程控制类指令里提到了一条与断点有关的指令
——bpret。
指令手册对bpret的解释只有如下两句话。
Branch absolute to saved Breakpoint Return address. The predicate conditio
n code must be set to "always".
前一句的意思是执行分支跳转，目标地址的形式是绝对地址，地址
内容来自以前保存的断点返回地址。其中Breakpoint Return两个单词的
首字母大写，代表这是个特定名称，可能代表某个特别的寄存器。后一
句的意思是谓词条件代表必须设置为“always”（总是）。
根据有限的信息可以判断，这条指令很可能与CPU的iret指令类
似，在断点异常发生和处理之后，它恢复当初断点出现时的上下文，并
返回出现断点的位置继续执行。
13.5.2 数据断点
在前面提到的位于Android源代码树的PVR驱动程序中，有很多公
开文档不包含的信息，比如数据断点支持。简单来说，至少从SGX开
始，PowerVR GPU就有数据断点支持，设置方式是向上一节介绍的微内
核发送设置命令。
在名为sgxinit.c的源文件中，有设置数据断点的详细过程。PVR驱
动程序接收到来自用户态的
SGX_MISC_INFO_REQUEST_SET_BREAKPOINT请求后，先是把顶层
传递下来的断点参数整理成微内核接受的命令参数。
sCommandData.ui32Data[0] = psMiscInfo->uData.sSGXBreakpointInfo.ui32BPInde
x;
sCommandData.ui32Data[1] = ui32StartRegVal;
sCommandData.ui32Data[2] = ui32EndRegVal;
sCommandData.ui32Data[3] = ui32RegVal;
0号元素是断点序号。1号元素是要监视数据的起始地址，这个信息
要放入硬件的起始地址寄存器中，所以变量名叫StartRegVal。2号元素
是结束地址。3号元素是控制信息，用于指定要监视的访问方式。命令
参数准备好后，接下来便执行发送动作。
PDUMPCOMMENT("Microkernel kick for setting a data breakpoint");
eError = SGXScheduleCCBCommandKM(psDeviceNode,
            SGXMKIF_CMD_DATABREAKPOINT,
            &sCommandData,
            KERNEL_ID,
            0,
            hDevMemContext,
            IMG_FALSE);
函数名中的CCB是环形命令缓冲区（Circular Command Buffer）的
缩写，是驱动程序与微内核通信的接口，其工作方式与第11章介绍的环
形缓冲区相似。第二个参数是上一节提到过的命令常量，其值为8。第
三个参数是准备好的命令参数数组。
13.5.3 ISP断点
根据PVR驱动中的信息，PowerVR GPU还支持ISP断点。ISP的全称
是图像合成处理器（Image Synthesis Processor）。在第4代PowerVR
GPU的硬件流水线中，就可以看到ISP模块，主要作用是决定某个像素
是否可见，把不可见的图块删除掉。在后来的架构中，ISP模块演变为
像素数据管理器。ISP断点命中会导致微内核接收到中断，然后更新控
制流，并把“可见度”结果写到用户的缓冲区中。简单来说，ISP断点是
用来支持3D图形调试的。
13.6 离线编译和反汇编
在PVR SDK中，包含了一个简单易用的小工具，名叫
PVRShaderEditor（本书中简称PSE），使用它不仅可以编辑GPU程序，
还可以离线编译和反汇编。因为PSE使用的是交叉编译和离线工作模
式，所以可以在没有PVR GPU的平台上使用，方便快捷。
13.6.1 离线编译
启动PSE后，按Ctrl + N快捷键调出“创建新文件”对话框。在该对话
框中，选择一种程序类型，比如OpenGL ES类别中的顶点着色器，单
击“确定”按钮关闭对话框，PSE便会根据模板创建一个简单的顶点着色
器，呈现在源代码窗口，并立即开始编译和反汇编。不到1min，就会显
示编译和反汇编结果（见图13-6）。
图13-6 使用PSE编译和反汇编顶点着色器
在图13-6所示的屏幕截图中，左下角为输出窗口，会显示编译错误
等消息，所以在PSE的帮助文件中将其称为调试窗口。例如，创建一个
新的OpenGL ES标准的计算着色器（compute shader）后，这个窗口中
可能出现下面这样的错误消息。
Compile failed.
ERROR: 0:17: 'gl_GlobalInvocationID' : undeclared identifier
ERROR: 0:17: 'x' : field selection requires structure, vector, or matrix o
n left hand side
ERROR: 2 compilation errors. No code generated.
错误的意思是无法识别gl_GlobalInvocationID变量。但
gl_GlobalInvocationID是OpenGL计算着色器中的内置变量（代表全局范
围的调用ID），怎么会无法识别呢？
这是因为PSE支持多种类型的GPU程序，内部包含了很多个编译
器。值得特别注意的是，一定要选择正确的编译器类型。上面的错误就
是因为创建新的程序后，PSE没有自动切换编译器类型。单击图13-6右
上角的Current shader type（当前着色器类型）下拉列表框，选择
Compute类型后再编译，就没有错误了。
13.6.2 反汇编
编译成功后，PSE会自动做反汇编，把结果显示在反汇编窗口中，
如图13-6右侧所示。如13.3.2节所介绍的，部分指令前面的序号代表指
令组编号。为了便于观察，不同指令组之间加了个空行。
因为反汇编结果是GPU的硬件指令，所以它是与硬件版本相关的。
右下角的Profiling子窗口中会显示针对的硬件版本号，比如图13-6中显
示的是G6x00，代表Rogue架构的第6代PVR GPU。
单击图13-6中右上角的齿轮图标可以切换硬件版本，但是目前版本
（2.11）只支持5系列、5XT和Rogue架构（6代或者更高）。另外，选择
5系列后，编译功能的选项减少，仍能正常使用，但是反汇编功能无法
正常使用了，窗口自动隐藏，手工调出后，显示的也是空白。
13.7 PVR-GDB
2018年3月，IMG公司在一年一度的GDC大会上公开展示了一个新
的软件工具——PVRStudio[9]。PVRStudio是一个全功能的集成开发环境
（IDE）。内部集成了基于GDB开发的调试器，让用户可以同时调试
CPU和GPU的代码。这个定制过的调试器称为PVR-GDB。目前
PVRStudio还必须签署保密协议（NDA）才能下载，因此本节只能根据
公开的有限资料简要介绍PVRStudio的调试功能。因为这些功能是由
PVR-GDB支持的，所以标题叫作PVR-GDB。
13.7.1 跟踪调试
在PVRStudio中，用户可以通过单步跟踪方式执行GPU程序。在代
码窗口中，可以同时显示OpenCL或者着色器程序的源代码和反汇编出
来的汇编代码，如图13-7所示。
观察图13-7中的反汇编部分，每一行是一个指令组，而不是一条汇
编指令。这种方式非常新颖而且与前面讲过的硬件流水线特征相吻合。
图13-7 PVRStudio的源代码和反汇编窗口[9]
仔细查看反汇编部分，每一行分为3列。其中第1列是GPU空间中的
线性地址，第2列是相对函数入口的偏移量；第3列是指令组。指令组部
分以大括号包围其中的所有指令，指令之间以分号分隔。根据地址部
分，可以算出每个指令组在内存中的机器码长度，进而可以估算指令的
长度。据此推理，PVR指令是不等长的，短的有4字节，长的至少有12
字节。
13.7.2 寄存器访问
在PVRStudio中，可以通过寄存器窗口观察GPU的寄存器，如图13-
8所示。为了节省篇幅，图13-8中只截取了窗口的一小部分，窗口下面
还有很多个共享寄存器和其他类型的寄存器。
图13-8 寄存器窗口（局部）[9]
图13-8中的第一个寄存器是程序计数器（PC）寄存器，代表将要执
行的下一条指令的地址。因为刚刚更新为新的值（之前做过单步跟
踪），所以显示为红色。第二个寄存器叫作cluster，代表PVR GPU中统
一着色器集群（USC）的编号。
13.7.3 其他功能
PVR-GDB也支持查看局部变量，查看GPU内存，显示GPU的函数