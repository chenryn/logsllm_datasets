的）
#执行体集群1 windows 执行体集群2 linux
#执行体1.1 windows2003 apache
#执行体1.3 windows08 apache
#执行体1.4 windows03 nginx
#执行体1.5 windows08 apache
...
->所有执行体执行完成以后都会把结果发给表决器
->表决器对多个输出结果处理，得到正确的输出,
->输出
执行体差异越多越不容易出洞。分的越详细越安全。
这个就是拟态的基本原理或者说思想，可以把这个思想用在所有的产品上，不止局限于web
3.4、模型中需要解决的问题：
3.4.1、分发器
分发器是关键，是核心。所有的请求都要通过分发器发送给执行体。要实现一个简洁而又高效的分发
器，又要实现分发器的所有功能。这其中的技术细节是很大的，可以理解成写一个少量用户购买电影票
处理和写一个面向全国的所有用户高铁订票的处理之间的差异是很大的。要让用户感受不到分发器，解
决分发器复制n份带来的占用空间问题、时间损耗问题。http中特殊的session机制带来的问题等等。
session问题这个挺有意思的，师傅们再想想，怎么处理session问题。
3.4.2、表决器
1、时间复杂度高。如何对比，一个一个比较？处理的时间是多少，如果表决器处理不过来，这个模型就
废掉了。当然了，这个问题交给算法大佬解决。2333
2、空间复杂度问题。等待n个服务器的返回结果的时候，要把这个先存起来吧，如果返回结果很大呢，
一个用户就是n*1。n个用户就是n*n了。这是平方增长的消耗？（有算错吗）
3、表决器现有的处理原则是少数服从多数，n个响应数据包，只要n/2+1的数据包相同，那么就判断这
个包为正确。或者没有超过这个数量的包，就触警。这里似乎绕口 举个例子。
存在一个注入点
10个执行体，比如6个mysql，4个mssql
黑客以为是mssql目标，对注入点进行注入。（假设黑客已经绕过了拟态防御的前面所有关卡。）
select username and (select IS_SRVROLEMEMBER('sysadmin'))=1      (伪语法，不要纠结会不会
报错)
这时候执行体的结果是
4个mssql发给表决器4个正常的响应
6个mysql发给了表决器相同的报错 
表决器就会接纳6个mysql响应的相同报错
这里其实也可以看出一个问题，如果是存在漏洞点的机器大过没有存在漏洞点的机器怎么办，我想到的
是结合waf，waf也可以动态化，执行体a是360，执行体b是绿帽的，执行体c是xx。。或者有别的操作
方法，这些问题不展开讲述，毕竟目的是为了弄明白拟态。
接触过拟态的人是怎么样描述拟态的（以下内容都是来源于
网上，不是我写的）：
https://mp.weixin.qq.com/s/cfEqcb8YX8EuidFlqgSHqg
强网杯拟态防御精英赛 WEB WP  2018-05-16
部分只言片语
只言片语：
重点看2019年，可以具有更深层的感受
https://zhuanlan.zhihu.com/p/67369780
2019强网杯拟态挑战赛Writeup
这里的拓扑图是他们黑盒出来的。
拟态防火墙
两次参加拟态比赛，再加上简单了解过拟态的原理，我大概可以还原目前拟态防御的原理，也逐渐佐证
拟态防御的缺陷。
下面是我在攻击拟态防火墙时，探测到的后端结构，大概是这样的（不保证完全准确）：
其中 Web 服务的执行体中，有 3 种服务端，分别为 nginx、apache 和 lighttpd 这3 种。
Web 的执行体非常简陋，其形态更像是负载均衡的感觉，不知道是不是裁决机中规则没设置还是 Web 
的裁决本身就有问题。
而防火墙的执行体就更诡异了，据现场反馈说，防火墙的执行体是开了2个，因为反馈不一致，所以返回
到裁决机的时候会导致互判错误...这种反馈尤其让我疑惑，这里的问题我在下面实际的漏洞中继续解
释。
配合防火墙的漏洞，我们下面逐渐佐证和分析拟态的缺点。
我首先把攻击的过程分为两个部分，1是拿到 Web 服务执行体的 webshell，2是触发修改访问控制权限
(比赛中攻击得分的要求)。
GetShell
首先我不得不说真的是运气站在了我这头，第一界强网杯拟态挑战赛举办的时候我也参加了比赛，当时
的比赛规则没这么复杂，其中有两道拟态 Web 题目，其中一道没被攻破的就是今年的原题，拟态防火
墙，使用的也是天融信的 Web 管理界面。
一年前虽然没日下来，但是幸运的是，一年前和一年后的攻击得分目标不一致，再加上去年赛后我本身
也研究过，导致今年看到这个题的时候，开局我就走在了前面。具体可以看下面这篇 wp 。
https://mp.weixin.qq.com/s/cfEqcb8YX8EuidFlqgSHqg
由于去年我研究的时候已经是赛后了，所以我并没有实际测试过，时至今日，我也不能肯定今年和去年
是不是同一份代码。不过这不影响我们可以简单了解架构。
https://github.com/YSheldon/ThinkPHP3.0.2_NGTP
然后仔细阅读代码，代码结构为 Thinkphp3.2 架构，其中部分代码和远端不一致，所以只能尝试攻击。
在3.2中，Thinkphp 有一些危险函数操作，比如 display，display 可以直接将文件include 进来，如果
函数参数可控，我们又能上传文件，那么我们就可以 getshell。
全局审计代码之后我们发现在 /application/home/Controller/CommonControler.class.php
如果我们能让 type 返回为 html ，就可以控制 display 函数。
搜索 type 可得 $this->getAcceptType();
$type = array(
只要将请求头中的 accept 设置好就可以了。
然后我们需要找一个文件上传，在 UserController.class.php moduleImport函数里
这里的上传只能传到 /tmp 目录下，而且不可以跨目录，所以我们直接传文件上去。
紧接着然后使用之前的文件包含直接包含该文件
            'json'  =>  'application/json,text/x-
json,application/jsonrequest,text/json',
            'xml'   =>  'application/xml,text/xml,application/x-xml',
            'html'  =>  'text/html,application/xhtml+xml,*/*',
            'js'    =>  'text/javascript,application/javascript,application/x-
javascript',
            'css'   =>  'text/css',
            'rss'   =>  'application/rss+xml',
            'yaml'  =>  'application/x-yaml,text/yaml',
            'atom'  =>  'application/atom+xml',
            'pdf'   =>  'application/pdf',
            'text'  =>  'text/plain',
            'png'   =>  'image/png',
            'jpg'   =>  'image/jpg,image/jpeg,image/pjpeg',
            'gif'   =>  'image/gif',
            'csv'   =>  'text/csv'
        )
 } else {
           $config['param']['filename']=$_FILES["file"]["name"];
            $newfilename="./tmp/".$_FILES["file"]["name"];
            if($_POST['hid_import_file_type']) $config['param']['file-format'] = 
formatpost($_POST['hid_import_file_type']);
            if($_POST['hid_import_loc']!='') $config['param']['group'] = 
formatpost($_POST['hid_import_loc']);
            if($_POST['hid_import_more_user']) $config['param']['type'] = 
formatpost($_POST['hid_import_more_user']);
            if($_POST['hid_import_login_addr']!='')$config['param']['address-
name'] = formatpost($_POST['hid_import_login_addr']);
            if($_POST['hid_import_login_time']!='') $config['param']['timer-
name'] = formatpost($_POST['hid_import_login_time']);
            if($_POST['hid_import_login_area']!='') $config['param']['area-name'] 
= formatpost($_POST['hid_import_login_area']);
            if($_POST['hid_import_cognominal']) $config['param']['cognominal'] = 
formatpost($_POST['hid_import_cognominal']);
            //判断当前文件存储路径中是否含有非法字符
            if(preg_match('/\.\./',$newfilename)){
                exit('上传文件中不能存在".."等字符');
            }
            var_dump($newfilename);
            if(move_uploaded_file($_FILES["file"]["tmp_name"],$newfilename)) {
                echo sendRequestSingle($config);
            } else
                $this->display('Default/auth_user_manage');
        }
上传文件的时候要注意 seesion 和 token ，token 可以从首页登陆页面获得。
至此我们成功获得了 webshell 。这里拿到 webshell 之后就会进入一段神奇的发现。
首先，服务端除了 /usr 以外没有任何的目录，其中 /usr/ 中除了3个服务端，也没有任何多余的东西。
换言之就是没有 /bin ，也就是说并没有一个linux的基本环境，这里我把他理解为执行体，在他的外层