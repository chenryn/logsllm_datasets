last 20 years, this  optimization  has been largely  focused 
on work  flow  management, i.e., on enhancing the ability 
of  developers to collaborate effectively  and efficiently  on 
development,  and  on  performance  enhancement  and 
feature  expansion.  The  increasing  pace of  development 
has ensured that security and other hitherto  unmarketable 
“features” have remained on the fringe of the development 
lifecycle.  Secondly,  application  vulnerabilities  can  be 
leveraged to  gain  not  only  the  intended authority  of  the 
application,  but  also  the  oft  overlooked  “power”  of  its 
service  user.  Witness  the  efficacy  of  Code  Red  and 
NIMDA,  or  even the URL  encoding  vulnerability  in  IIS 
4.OE.O. In  all  cases, an  application  level  vulnerability 
(admittedly  in an infrastructure  related application)  led to 
compromise  of  the  host  itself,  thereby  providing  an 
avenue  into  the  network,  wreaking  significant,  well- 
document havoc.  As  for  firewalls,  they  explicitly  allow 
application  traffic,  essentially ignoring  its  contents or,  at 
best,  perusing  it  for  a  few  generic,  well-documented 
signatures.  Additionally, 
in 
application  traffic,  demand  for  high  availability  and 
increasing  use  of  SSL  all  collaborate  to  render  IDS 
systems ineffective  or,  at  best  insufficient, 
in  deterring 
significant  application centric attacks. 
rapid  expansion 
the 
As for QA testing, it is and has always been a means of 
testing for  “expected” functionality.  Penetration testing is 
very  much the opposite approach. A  penetration tester is 
constantly probing  for  unexpected functionality.  The skill 
sets required  for  each field  are entirely  different,  and a 
million  years  of  quality  QA 
testing,  though  it  may 
potentially  highlight  implementation  errors with  security 
implications,  cannot  hope  to 
the  security 
knowledge  to  be derived  from  one  week  of  penetration 
testing. Normal  usage too will  not replicate the process of 
an attack. Who, in the course of either QA work  or normal 
application  usage, would  ever have thought  to  request a 
URL  containing  . . % 2 5 5c  . . % 2 5 5  or  to  submit  65,000 
characters in  a form  field,  much  less an HTTP  header? 
Clearly,  until  security  design  is  advanced and common, 
penetration  testing  is  a  distinct  activity 
legitimized  by 
both  the  prevalence  of  digital  attacks  and  the  lack  of 
replicate 
adequate preventative  measures elsewhere  in  either 
application  development or deployment lifecycle. 
the 
42 . 
Who 
Now  that  we  understand the  need to  penetration 
test and that we have clarified  the distinction  between QA 
testing  and  penetration  testing,  we  have  begged  the 
question  of  who  should  perform  the  testing.  As  stated 
earlier, there are both mules and artists out there. Clearly 
artists  are  unique,  and  clearly  their  skills  are  not  yet 
commodities  and are therefore  not  reducible  to  succinct 
description.  Nevertheless, good  penetration  testers share 
several  qualities  based  on  the  nature  of  the  art  they 
practice  and we  shall  attempt  to  summarize the  critical 
qualities they share. 
First  of  all,  it  is  essential that  a penetration  test 
professional  be  technically  savvy.  The  requisite  extent 
and breadth of  this savvy can be argued, but facility  with 
basic  application 
technologies  is  a  requirement,  and 
specialization  beyond  general  expertise  is  a  significant 
advantage. Most,  if  not all  of  the application  penetration 
testers  who  consistently  “fail 
to  fail”  have  extensive 
experience as developers, such that they anticipate design 
and  implementation  errors  and  can  identify  application 
structures based on the technologies in use and the failure 
modes  discerned.  Many  successful  application  testers 
have  at  least some experience as system administrators, 
such  that  they  are  adept  at  leveraging  vulnerabilities 
where  applications  and infrastructure  intercept  and  such 
that they  are able to  leverage minor  errors in  either  area 
(infrastrucure  or  applications)  to  create  or  enhance an 
advantage in the other area. Many  test professionals have 
also been trained in the methodology  and basic techniques 
of  penetration,  either 
training 
program,  government  program  or  university  program.  A 
number  of  consultants  at  @stake  have  been  formally 
trained by the National  Security Agency  (NSA),  and like 
the  Marines  who  are  trained  in  hundreds  of  ways  to 
physically  kill  opponents, these testers have an extensive 
arsenal  of  exploits,  tactics  and  strategies for  attacking 
both applications and the infrastructure that house them. 
through  a  corporate 
Still,  not every tech savvy individual  would  make a 
good  penetration  tester. Creativity  is  an absolutely  vital 
distinguishing  characteristic. Because, as indicated earlier, 
“the list  of  potential  insecurities is unknowable  and hence 
unenumerable” and because penetrating defenses amounts 
to  the  “illegitimate  acquisition  of  legitimate  authority”, 
penetration  testing  represents an  art  of  discovering  the 
unknown  and  revealing  the  assumptions  inherent 
in 
someone else’s creative pursuit.  In  a sense, it  is the art of 
proving 
the  unexpected.  Also,  as 
illustrated  in  the  discussion on  the  irony  of  penetration 
testing,  the  field  of  qualified  penetration  artists  narrows 
rapidly  as  the  artists  ply 
trade  since  every 
the  existence  of 
their 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:30:14 UTC from IEEE Xplore.  Restrictions apply. 
vulnerability  identified,  classified  and described expands 
the  lists  of  known  insecurities  and  arms the  developer 
with  another  defensive  tactic,  or  vindicates  a  strategic 
defense,  thereby  increasing  the  creativity  required  for 
future penetrations. Clearly  it  is an irony  of all businesses 
that  their  ultimate  goal  is  to  obsolete themselves before 
the  competition  does, but  it  is  particularly  poignant  in 
field  where  professionals  are 
tasked  both  with 
undermining  a body  of  knowledge  and with  contributing 
to  it  at the  same time.  In  any  case, the successful tester 
must be able to think  in ways that others do not, since it is 
his/her very  task to  illustrate  the path that  everyone else 
overlooked.  There  is  almost  a  child-like  energy  and 
curiosity  required  to  behold  a  hammer  as  a  potential 
shovel, or a chair as a potential table, or an authentication 
routine  as  a  route  to  a  command  prompt  or  a  SQL 
interpreter or both. 
rigorous 
becomes 
increasingly 
is  essential,  but 
This  ability  to  think  differently  and  approach  a 
problem  playfully 
it  must  also  be 
tempered with  a gift  for discipline  and organization  since, 
as the writer  and literary  critic  Norman  Podhoretz puts it, 
“Creativity  represents a  miraculous  coming  together  of 
the  uninhibited  energy  of  the  child  with 
its  apparent 
opposite  and enemy, the  sense of  order  imposed on  the 
disciplined  adult  intelligence.”  As  it  matures, penetration 
and 
testing 
methodological.  The  drive 
to  penetrate  increasingly 
secure applications  in  relatively  short  amounts  of  time 
enforces a systematic approach to  gathering  information, 
verifying 
known  vulnerabilities,  hypothesizing  new 
vulnerabilities  and  prioritizing  analysis.  The  need  for 
order and focus results in  the creation  of  both  tools  and 
methodologies  for  creative  analysis.  Tools  represent the 
empirical  expression of  technical  lessons learned and, as 
suggested above, the  best tools  are always  home made. 
This  is especially true in  the application  space where the 
uniqueness  of  attack  targets  almost  always  demand 
customized  tools.  Application  penetration  testing  tools 
generally  consist  of  software  proxies,  vulnerability 
scanners,  fuzzers,  port  scanners  and  sniffers,  but  the 
penetration  test  professional  will  also  learn to  use non- 
security  specific  tools,  like  browsers  and  debuggers, to 
their  advantage. Often simple PERL  scripts prove to be a 
tester’s greatest asset. 
Though  successful  penetrations  can  be  very 
exciting,  the  majority  of  the  testing  process consists of 
failure.  As  Albert  Einstein  noted  “I  think  and think  for 
months  and  years,  ninety-nine  times,  the  conclusion  is 
false. The hundredth time  I  am right.”  Indeed, if  success 
were  guaranteed, the  process wouldn’t  be referred  to  as 
penetration “testing,”  it would just  be called “penetration.” 
The constant hurdles and elusiveness of success mean that 
test  professionals  must  exhibit  humility,  determination 
and patience. Despite the difficulty  of  finding  tech savvy 
and creative  individuals,  it  is  probably  this  requirement 
that so severely limits  the number of adequate penetration 
test  professionals  in  the  field  today.  Too  many  testers 
anticipate easy success, only  to discover that success can 
be  difficult 
to  achieve,  especially  when  analyzing 
applications  written  by  experienced,  security  conscious 
developers who have learned from  previous tests and have 
integrated their knowledge into the development lifecycle. 
Point and click  tools find  only  the lowest  hanging fruit  -- 
the fruit  higher up the tree is much more rewarding, but it 
can be difficult  to reach. 
technical 
know-how 
technically  SaWY 9 
In  any case, we have identified  a good penetration 
test  professional  as 
treat ive, 
disciplined,  and  determined.  Clearly,  these qualities  are 
difficult  to  come by  in  isolation  from  each other, and are 
obviously  all  the  more  difficult 
to  find  in  combination. 
Still,  they are beneficial qualities in and of themselves and 
are  not  impossible  to  find  within  existing  development 
teams.  Additionally, 
and 
organization  are skills  that  can be learned. So, assuming 
we have found  several individuals  who  fit  the proverbial 
bill,  we  will  want  to  examine  the  pros  and  cons  of 
leveraging  internal  capabilities  versus  outsourcing  our 
penetration  testing.  Clearly 
there  are  advantages  and 
disadvantages to  each approach. For  the purposes of  our 
discussion, we  will  consider  “outsourcing”  to  mean that 
the  penetration test team will  consist  of  individuals  that 
are unrelated to  the developers, i.e., they  may  belong  to 
the  same  organization,  but  not  the  same  development 
team,  or  they  may  belong  to  a  different  company 
altogether. 
for  a  moment 
to  developers  and 
The critical  advantages of  outsourcing  penetration 
is  a 
It 
testing  include  objectivity  and  specialization. 
widely  observed  and  understandable  reality 
that  few 
companies,  if  any,  will  argue  that  their  products  are 
inferior 
to  those  of  their  competitors.  There  can  be 
widespread agreement, however,  that  some products are, 
in  fact,  clearly  less  desirable  than  others.  It  stands to 
reason, therefore, that some people are either consciously 
deceiving  the  public  or  are  deceiving  themselves about 
the relative quality  of their products. Now  let’s extend this 
analogy 
their 
applications.  It  can be easily verified  that developers will 
tend to defend their  code in the face of  criticism  and that 
some of  this defense is unjustified  given the errors found 
in  software today.  Given  the instinctual  defensiveness of 
the  developer 
largely 
unreasonable to  expect a developer  to  indicate  precisely 
why  and where his/her code is broken or faulty.  It  is fairly 
unreasonable to  expect  a  developer  to  recognize  where 
his/her  own  expectations can be undermined,  since  it  is 
precisely 
those  expectations  that  will  guide  his/her 
examination  of  the  code to  begin  with.  External  parties 
have the distinct  advantage of  having  less of  themselves 
invested  in  proving  that  the  application  is  really  rather 
clever  and  well  written  after  all.  Additionally,  using  a 
relative  his/her  code, 
it 
is 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:30:14 UTC from IEEE Xplore.  Restrictions apply. 
to 
limit 
testers  has  all 
team  of  penetration 
dedicated 
the 
advantages that  accompany  specialization.  Speed,  cost 
and  exhaustiveness are  perhaps the  most  obvious  and 
desirable of these advantages. The possession of tools and 
methodologies  clearly  facilitates  a  more  rapid  analysis, 
which  in turn reduces the cost of the analysis since, it can 
be argued, time is money (which  is more true in the world 
of  software  development  than  it  is  in  most  fields).  The 
tools, methodology  and expertise of the team additionally 
ensure that analysis will  be more thorough, meaning both 
that more errors will  be found and that confidence is more 
justified  where no errors are found. 
their 
talented 
individuals 
that  sensitivity  might  contribute 
That  being  said,  there  are  also  advantages  to 
having  developers test  their  own  code.  Where  extreme 