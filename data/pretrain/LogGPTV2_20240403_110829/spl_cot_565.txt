User: 为了实现日志查询分析需求，编写了一段 SPL 语句，请你从专家角度，逐步思考分析需求，尽量详细的解释语句内容是如何实现需求的。

## 分析需求
我想问昨天的服务器 CPU 使用率最小值、主机名和 IP 地址以及该使用率与 100% 的比例等信息。

## SPL 语句
starttime="-1d/d" endtime="now/d" appname:top_info_system_stats | stats min(cpu.idle_percent) as _min by ip,hostname |eval _max=100-_min |sort by +ip |eval _max=format("%.2f%%",_max) 

## 具体解释

Assistant: 分析需求阶段：

1. **需求理解**：用户希望查询昨天的服务器CPU使用率的最小值，同时需要获取主机名和IP地址。此外，用户还希望得到CPU使用率与100%的比例信息。

2. **数据源与字段分析**：根据需求，我们需要从系统日志或性能监控数据中提取CPU使用率（`cpu.idle_percent`，通常代表空闲率，其补数即代表使用率）、主机名（`hostname`）和IP地址（`ip`）等相关信息。

SPL语句分析阶段：

SPL（Search Processing Language）语句是日志易搜索处理语言，用于从日志或事件数据中提取、转换和检索信息。下面是对给出的SPL语句的逐句解释：

1. **时间范围设定**：


	* `starttime="-1d/d"` 和 `endtime="now/d"`：这两句设定了时间范围，表示查询昨天整天的数据。`-1d/d` 表示从昨天开始，`now/d` 表示到当前日期。
2. **数据筛选**：


	* `appname:top_info_system_stats`：这个条件用于筛选出与`top_info_system_stats`相关的数据，这通常是一类特定应用或日志源产生的数据。
3. **统计信息提取**：


	* `stats min(cpu.idle_percent) as _min by ip,hostname`：这句统计了每组（由IP和主机名区分）的`cpu.idle_percent`的最小值，并将这个最小值别名为`_min`。
4. **计算CPU使用率**：


	* `eval _max=100-_min`：这里计算了CPU使用率。由于`cpu.idle_percent`通常是空闲率，所以它的补数（100减去空闲率）就是使用率。结果存储在`_max`变量中。
5. **排序**：


	* `sort by +ip`：这句将结果按照IP地址升序排序。`+`表示升序。
6. **格式化输出**：


	* `eval _max=format("%.2f%%",_max)`：这句将计算出的CPU使用率（存储在`_max`中）格式化为带有两位小数的百分比形式。

综上所述，这条SPL语句实现了用户的需求：查询昨天的服务器CPU使用率最小值，同时获取主机名和IP地址，并计算CPU使用率与100%的比例信息。通过筛选特定应用的数据、统计最小值、计算使用率、排序和格式化输出，最终得到了用户所需的信息。