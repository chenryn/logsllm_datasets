(i.e. sequential and parallel building blocks). The graph is created based on the
following rules and assumptions:
Assumption 1. Business variables must be asserted prior to their use. For any set
s to be scheduled, all its tasks must have their business variables asserted. It does not
i
make sense for a task to use a business variable that has never been asserted.
Unasserted variables have unknown values (please note that variables with default
values are considered to be asserted.)
Assumption 2. Business variables are only asserted once. This is a fair assumption
since it is often the case, in real world processes, that variables are only asserted once
and their value remains unchanged until completion of the process. For example, let
us assume that a human task of an administrative business process requests the
intervention of an employee to fill in a form with his personal information. The
requested information includes his job position title. Let us assume that the job
position is a business variable that affects the process’s control flow. In this scenario,
the job position variable is asserted only once and thereafter it will not be changed
again until termination of the process.
The first assumption allows us to determine the tasks where conditional branches to
a set s may exist. Since all the variables of set s‘s scheduling function need to be
i i
asserted for a proper scheduling, a conditional branch can only be attached to a task
were all the variables have already been set.
We also define rules, presented below, to impose constraints on how conditional
building blocks can organize the scheduling sets.
Definition 3. Business variables of a set s. The set of business variables of the
i
scheduling function associated with set s is represented with sf, where f is the
i i
18
scheduling function. Graphically, the scheduling function f of a set s is represented
i
inside a rectangular shape (see Figure 9).
Rule 1 (Conflicting scheduling sets). If s f has a scheduling function f, the
a
scheduling set s g has scheduling function g, and f ∧ g is a contradiction, then a
b
transition between a task of set s and a task of set s does not make sense (in logic, a
a b
contradiction is a Boolean expression or proposition that is always false.)
Proof. Let us assume that a transition from a task in s to a task in s exists. If fis
a b
true, the set s and its tasks are scheduled, but s and its tasks can never be scheduled
a b
since f∧ gis a contradiction, i.e. g must be false. This holds since business variables
can only be asserted once (assumption nº 2). If f is false, then obviously s and its
b
tasks cannot be executed, since s can only be executed if and only if s has been
b a
previously executed.
Definition 4. A scheduling function f is a subfunction of a scheduling function g, if
f ∧ g logically implies g. For example, f= a∧¬b is a subfunction of g = a∧¬b∧d and
1
of g = d∧a∧¬b because a∧¬b∧a∧¬b∧d logically implies a∧¬b∧d, and a∧¬b∧d∧a∧¬b
2
logically implies d∧a∧¬b.
Observation. The transitions between scheduling sets can be viewed as a tree
structure. For example, in Figure 9, making s the root node of a tree, we can identify
1
3 out going branches: s to s , s to s , and s to s . Node s has 2 outgoing branches: s
1 2 1 3 1 6 3 3
to s , and s to s . This can be verified in Figure 10.
4 3 5
s
1
s s s
2 3 6
s s
4 5
Figure 10. Tree structure of transitions between scheduling sets
Rule 2 (Dependency of scheduling sets). If s f has a scheduling function f, set s g
a b
has a scheduling function g, the scheduling function f is a subfunction of the
scheduling function g, and one of the tasks in set s asserts the variables present in g
a
but not present in f, then s is a node of the sub-tree having root node s .
b a
Proof. If function f is a subfunction of function g, then a path p exists in the tree
1
between the s and s since if the tasks in s are scheduled then the tasks of s may
a b a b
also be scheduled. Moreover, a path p also exists from the set s , which sets the
2 s
variables present in gbut not present in f, and the set s .
b
Based on the assumptions and rules presented, we introduce the Conditional Block
Identification (CBI) algorithm to assist process analysts and designers in identifying
conditional building blocks. Before presenting the algorithm, let us define the
following elements,
19
Definition 5. Asserted business variables of a task t . The asserted business
n
variables of a task t is represented with t v. For example, if task t asserts variable a
n n n
and b then t v = {a, b}. Graphically, the business variables that a task asserts are the
n
variables of the Boolean function inside a diamond shape (see Figure 9 for an
example).
The CBI algorithm, which is described bellow, can be viewed as a methodology
describing an iterative process, with human involvement, to structure scheduling sets
si into a process graph. Please note that the symbol ≡ is to be read ‘takes the value
of’.
CBI Algorithm
Place the set s ∈ S with s f = {‘true’} in the open set δ,
q q
δ = { s | s f = {’true’}, s ∈ S }.
q q q
(*) Get a set s from the open set δ and update the open set,
i
δ≡δ−s , s ∈ δ
i i
Propagate the business variables of all the tasks in set s, i.e. if a task t asserts a set
i b
of business variables t v then add the set t v to all the reachable tasks (t >t
b b b r
represents that t is reachable from t ) from t in s.
r b b i
∀t ,t ∈s ,t >t ,t v =t v ∪t v.
b r i b r r r b
For each tasks t in s,
j i
Let the set ζ contain the sets s in S such that all the business variables in s f are
m m
in tv,
j
ζ={s ∈S|s f ⊆t v}.
m m j
Partition set ζ such that each partition ζ contains sets s with the same set of
p m
business variables,
ζ= {s , s , s ,…}, s f’ = s f’’ = s f’’’ =…
p m’ m’’ m’’’ m’ m’’ m’’’
If the designer decides to do so, allow him to create new permanent transitions
from t to t (i.e., t → t ) where t is the first task of s ∈ ζ.
j pm j pm pm m p
t → t , where t is the first task of s ∈ ζ
j pm pm m p
If a set s ∈ ζ has a potential transition, place s in set ξ,
m p m
ξ={s |∃t ,t ∈s ,s ∈ζ ,t ft }
m b e m m p b e
Add the sets s ∈ ξ to the open set δ,
m
20
δ≡δ∪ξ.
End for each
If δ ≠ Ø, repeat the process starting at step (*).
A possible scenario for a tool implementing the CBI algorithm is as follows. A
business analyst starts a process design tool and sets up all the information that has
been described and required up to this point by the Poseidon framework. The tool
automatically selects a set s (one with a label equal to ‘true’) from S, placing it on the
i
drawing surface. The tasks present in the canvas (from set s) that may contain or-
i
splits are highlighted. The business analyst selects one of the highlighted tasks and,
automatically, the tool displays the scheduling sets s of tasks for which a transition
j
may exist from the selected task. The analyst can select one or more sets.
Automatically an or-split structure is created and associated to the highlighted task
and the selected sets s are placed on the canvas and a transition is drawn. This
j
procedure is repeated until no sets remain in S. In our example, the application of the
procedure described gives the graph illustrated in Figure 11.
Figure 11. Task scheduling graph
Once the dependencies betweens the sets s have been established, the structure
i
from Figure 11 can be redrawn to resemble more closely a process; see Figure 12.a).
Nevertheless, several process elements are missing. It is apparent in our example that
the process does not include any joins matching the or-splits and that the process has
several ending points.
21
Figure 12. a) Redrawing the task scheduling graph, b) matching or-splits with or-joins
Both problems can be solved by matching or-splits with or-joins. Aalst (Aalst
2000) has pointed out the importance of balancing or/and-splits and or/and-joins to
obtain what is called a ‘good’ process. For example, two conditional flows created via
an or-split, should not be synchronized by an and-join, but an or-join should be used
instead. Matching or/and-splits may require the use of null tasks. Figure 12.b) gives
an example of how every or-split should be complemented by an or-join using a null
task.
3.4 Cleaning and Implementing
In the last phase, we cleanup of any dummy (null) tasks and, if necessary, the process
may be slightly restructured or modified for reasons of clarity. The process design is
ready to be implemented. The WIDE methodology (Casati, Fugini et al. 2002) can be
used to this end. The method proposed supports the workflow design from the initial
analysis phases to its implementation on specific workflow management systems.
The methodology covers the business process pre-analysis, workflow analysis,
workflow and external application design, and mapping to workflow implementation
phases. The design and mapping to workflow implementation phases are shown in
Figure 12.
WWoorrkkffllooww PPoosseeididoonn
DDeessiiggnn FFrraammeewwoorrkk
WWoorrkkffllooww,, EExxcceeppttiioonnss,,
TTrraannssaaccttiioonnss,, IInntteerraaccttiioonnss
WWoorrkkffllooww
MMaappppiinngg WWIIDDEE
MMeetthhooddoollooggyy
WWoorrkkffllooww AApppplliiccaattiioonn
Figure 13. Integration of Poseidon framework and WIDE methodology
WIDE methodology provides a set of essential guidelines to design workflows,
specify exceptions, transactions, interactions, etc., and map a workflow model into a
workflow management system. The workflow design phase of WIDE can be replaced,
22
or complemented, with the Poseidon framework. Compared to WIDE workflow
design phase, the Poseidon approach is more powerful since it provides the semi-
automatic design of workflows (or processes). Since Poseidon assists the design of
processes, it is more suitable to help designers and business process analysts in their
tasks. After using the Poseidon framework to design a process, the WIDE
methodology can be used to interface processes with existing information systems and
external applications, and map the process model, the exceptions, the transactions,
and the interactions into a workflow management system.
3.4.1 Design phase
In the design phase, the methodology provides concepts that allow the mapping of the
resulting workflows onto several different workflow management systems, taking into
account the different features of the target system. At the end of the design phase the
following results are obtained: workflow schemas, the specification of exceptions and
transactions, and specification of interactions with external applications.
Workflow schemas. The initial workflow schemas are decomposed into tasks and sub-
processes. If a decomposition of the activity of a company into processes already
exists, a mapping can be provided from this documentation to a decomposition for the
workflow.
Exceptions. An exception refers to facts, situations, or abnormal events not modeled
by the underlying workflow management system, deviations between what we plan
and what actually happens (Luo 2000). Exceptions are low-probability events that are
unexpected, nonrepetitive, and infrequent (Strong and Miller 1995). Such exceptional
situations may be anticipated and inserted in the workflow schema specification, at
design time or later. One of the points of interest in this context is the ability of
inserting handlers of exceptions which typically occur given a workflow schema.
Transactions. The design of a transactional structure adds semantics to a workflow
describing how an instance behaves with respect to atomicity, consistency, isolation,
and durability. Transaction design includes the design of compensating transactions
needed to rollback completed business transactions.
Interactions with external applications. The design of the interaction between the
workflow and external information systems is a critical aspect of workflow
development. The main issue in the analysis of external information systems and
external applications is the specification of the interactions between the external
systems and the workflow. A second issue is the management of external information
systems data and workflow data which need to be exchanged and may be in different
formats, since external information systems data are usually more complex than
workflow data.
3.4.2 Mapping Phase
The mapping phase maps the workflow model, the exceptions, the transactions, and
the interactions into workflow products or applications.
Mapping the workflow model. The large majority of workflow systems support basic
constructs for defining a workflow, such as and-split, or-split, and-join, or-join, and
allows conditions based on workflow data to be associated to paths in order to define
when a given path is enabled. These elements are mapped to specific components of
the workflow management systems.
23
Mapping exceptions. Exceptions are mapped into the workflow system. Exceptions
handling of asynchronous events, temporal events related to task deadlines, based on
the state of the task or case, and quality of service thresholds are considered.
Mapping transactions. Atomic tasks are the smallest parts into which a process is
broken down. Every task is atomic and performed in isolation. These tasks are
mapped one to one onto transactions. In case part of the workflow execution needs to
be rolled back, those basic tasks need to be undone using compensation techniques.
Mapping interactions with external applications. Most workflow management
systems include the notion of connector. A connector is a piece of software that
allows an easy communication between tasks and external applications. The mapping