User: I've prototyped an iPhone app that uses (internally) SQLite as its data base.  The intent was to ultimately have it communicate with a server via PHP, which would use MySQL as the back-end database.  
I just discovered Google App Engine, however, but know very little about it.  I think it'd be nice to use the Python interface to write to the data store - but I know very little about GQL's capability.  I've basically written all the working database code using MySQL, testing internally on the iPhone with SQLite.  Will GQL offer the same functionality that SQL can?  I read on the site that it doesn't support join queries.  Also is it truly relational?  
Basically I guess my question is can an app that typically uses SQL backend work just as well with Google's App Engine, with GQL?
I hope that's clear... any guidance is great.
Assistant: True, Google App Engine is a very cool product, but the datastore is a different beast than a regular mySQL database.  That's not to say that what you need can't be done with the GAE datastore; however it may take some reworking on your end. 
The most prominent different that you notice right off the start is that GAE uses an object-relational mapping for its data storage scheme.  Essentially object graphs are persisted in the database, maintaining there attributes and relationships to other objects.  In many cases ORM (object relational mappings) map fairly well on top of a relational database (this is how Hibernate works).  The mapping is not perfect though and you will find that you need to make alterations to persist your data.  Also, GAE has some unique contraints that complicate things a bit.  One contraint that bothers me a lot is not being able to query for attribute paths: e.g. "select ... where dog.owner.name = 'bob' ".  It is these rules that force you to read and understand how GAE data store works before you jump in. 
I think GAE could work well in your situation.  It just may take some time to understand ORM persistence in general, and GAE datastore in specifics.