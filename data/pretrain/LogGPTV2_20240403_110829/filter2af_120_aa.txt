# 引言
>
> 一般情况下，我们通过风控等系统识别到用户行为异常时往往会采用“加验”的手段去对抗，例如图灵测试、PoW、短信（语音）验证什么的。可实践中发现，这些对抗的方式会随着攻击者“破解”深入而逐步的失效，并迅速陷入道高一尺魔高一丈的套路。本文将从另一个角度去理解，如何在发现风险之后作出“假装不知道”的决定，从而避免出现这样的车轮战。
# 一、从反爬虫的投毒开始说起
一天，产品线的小伙伴匆匆跑过来找我：兄弟，我们的站点遇到一只疯掉的“爬虫”，机器都快被爬死了，帮忙处理一下……  
很多小伙伴拍脑袋就想到弹验证码，或者直接上频控，用沙包一样的的字体或者鹤立鸡群的页面告诉触发“规则”的家伙：不好意思，此路不通。  
（某次被爬虫突击访问造成的波峰）
于是，“攻击方”开始调试自己的爬虫，绞尽脑汁拟人、调整策略绕过频控，甚至考虑加载js引擎执行脚本。“防守方”被逼的用上图片显示关键信息、加入不可见字符等等前端黑魔法，甚至用上设备指纹、PoW等方式针锋相对。爬虫和反爬虫，成了相爱相杀的天平两端。  
哇，我们本是同根生。程序员和程序员就应该好好相爱搞基，别老是磨刀霍霍，非得置对方于死地，多点真诚不好吗？既然爬虫的目的是获取数据，那就给他数据好不好——不过，不那么干净就是了。
设想一下，深夜里一只爬虫正辛勤地爬着梦寐以求的宝库，而他的主人也在美滋滋的扣着脚观赏青春期生理知识教育片，心里还说这个傻x网站一点反爬都没有简直是个垃圾。结果等到好几天后，到了真要用到数据的时候，发现爬到的数据里面真亦假来假亦真，虚虚实实无法分辨。然后因此错过关键时期被竞品干得边叫爸爸边哭，你要是他的老板泷泽萝拉你还笑得出来吗？！
（针对商品价格的投毒方式，思考一下为何要用crc32做发生源而不用随机数？）
俗话说，好人不长命，祸害遗千年。自古以来，天下武功，无所不破，唯骗不破。
# 二、阻断学习途径
让我们回到《三体》，之所以地球人可以牢牢驾驭住干尸三体人，还是多亏了罗辑鼠标，哦不对，是罗辑控制的“广播系统”。我看完《三体》后深深迷恋于这个“广播系统”不可自拔，一心想着什么时候我也能向全宇宙播出全国第八套广播体操，然后用这个威胁所有不给子女零花钱的80后父母。
三体人清楚地知道，一旦广播出了坐标将会让自己的母星彻底暴露在全宇宙面前，就如同全身赤裸跑到人民公园征婚——所有长处短处一览无疑。
三体人都知道的东西，我们各位在做业务安全的小伙伴也应该多多学习啊。发现风险怎么办，迅速处置？那我问问你，不论场景地迅速处置真的有必要吗？
（黑暗森林法则的变种版描述：谁先说话谁就输了）
以注册举例，很多人花了大价钱买到了手机号的风险库，想着这下可以来一个老子杀一个。一输入接码平台的手机号，系统巴不得跳出一个全屏窗口向全世界庄严宣告：哈哈哈哈我们知道你在用接码平台的手机号哦不给你注册我们是不是很牛逼啊来怼我呀~  
历史的经验告诉我们，这么嘚瑟是不会有好下场的。  
于是，羊毛党向卡商报告这手机号已被拉黑避免扣钱，卡商唰的一声换上了崭新的一坨新卡。Ok，这下你数据库中没有这个号了吧。而你，此时还沉浸在自己识别到了多么多么大量的羊毛注册请求中沾沾自喜，却忽略了这个“看不见”的风险。这个过程中，卖威胁情报的挣了钱、接码平台挣了钱、卡商挣了钱、运营商挣了钱、羊毛党也挣了钱，那谁亏了钱？你说是谁？
同志们，我不禁要问，为什么要这么嘴欠？！我们平常很多风控策略，像什么图灵测试，什么挑战加验，什么直接阻断，这不正给了羊毛党一个很好的调试接口吗？
（接码平台通常都提供标记特定手机号在某一项目中不可用的功能，一键GG）
我们之所以不会蠢到把手伸进熊熊燃烧的火焰中，往往是因为在此前人生中的某一时刻曾经这么干过，并且收获了满满的痛楚。从此，我们从反馈中立即学到了一个知识——傻子才把手直接伸进火里。
事实上，对于每一个学习过程，都有：  
目标设定 过程探索 奖励反馈 完成学习
如果丧失了奖励回馈环节，整个学习过程无法持续。就如同你想让狗狗训练成听到你叫它名字后马上坐下，但你既不在它做对的时候给它东西吃（正反馈），又不在它做错的时候揍它（负反馈），很难想象它能乖乖达到你期望的状态。
（一个大致的学习过程，其中奖励反馈是最重要的环节之一）
在鱼儿刚刚咬钩的时候就迫不及待地拉起鱼竿，这样的“果断处置”，除了能够迅速替“攻击者”完成奖励反馈的重要环节外，并不能为我们自己带来很好的收益。正如人们不能直接观测黑洞一样，沉默是对想了解你的对手最有效的武器。停止反馈，阻断学习途径，是对抗对手的第一步。
# 三、理清业务链，风控决断后移
尽管拒绝反馈能够很好阻断羊毛党的学习过程，但很多场景下我们不能完全不给用户反馈，不然这属于杀敌一百自损一万的“绝技”。还以注册为例，我们好歹好告诉用户注册成不成对吧？
这时候，我们应该考虑“决断后移”。不过，在讨论决断后移前，我们先要理清一个关键的链路——业务链。
注意，这里指的业务链不是一个具体的A页面到B页面这个Action Chains（关于Action
Chains可以另写一篇文章来研究），而是一个业务流程从用户发起到结束交付所经历的全部逻辑过程。以购买商品为例，这里的业务链可以是：
_用户注册/登录 -- > 搜索商品（可选） --> 选购商品 --> 咨询商品（可选） --> 填写订单 --> 提交订单 --> 支付 -->
配货（可选） --> 发货 --> 配送交付 --> 售后（可选）。_
整个业务链有两个关键节点，一个是发货，一个是配送交付。  
对于公司来说，发货环节执行后，货物很大程度上会脱离控制，而且大量成本会在这时候产生（包括库存成本、配送费等），所以这是一个关键的业务节点。  
对于消费者来说，配送交付环节执行后，消费者才能真正收到货物，完成整个订单期望要做的事情，这样往往代表着整个业务链路的结束。
以前的风控策略会怎么设置呢？
    我在登录注册拦你一道，不通过不让下一步。
    还不放心，那在搜索、选购商品的时候再拦你一道，机器人占库存都给你毙了。
    填完订单之后，琢磨着又可以拦你一道，同一收货人或收货地址有问题的，也给你拒了。