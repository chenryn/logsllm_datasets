至此，我们已经完成了 CloudFormation 模板的配置，该模板将使用 Fargate 服务将 X 射线守护程序部署到 AWS，并启用了 ECS 服务发现；您可以使用`aws cloudformation deploy`命令将更改部署到您的栈中，包括`--capabilities`参数，假设我们的栈现在正在创建 IAM 资源:
```
> aws cloudformation deploy --template-file xray.yml --stack-name xray-daemon \
 --capabilities CAPABILITY_NAMED_IAM
Waiting for changeset to be created..
Waiting for stack create/update to complete
Successfully created/updated stack - xray-daemon
```
部署完成后，如果您在 AWS 控制台中打开 ECS 仪表板并选择集群，您应该会在 FARGATE 部分看到一个名为 xray-daemon-cluster 的新集群，其中有一个服务和两个正在运行的任务:
![](img/c46789ab-3cb2-4a26-b6bc-229781c40131.png)
X-Ray daemon cluster
如果您选择集群并点击**x 射线-守护程序-应用-服务**，您应该会在详细信息选项卡上看到 ECS 服务发现配置:
![](img/b005f475-d3a7-4e40-a393-cf610c7882a4.png)
X-Ray daemon service details
在服务发现命名空间中，您现在应该找到两个附加到`xray.services.dockerinaws.org`记录集的地址记录，您可以通过导航到 Route 53 仪表板，从左侧菜单中选择托管区域，然后选择`services.dockerinaws.org`区域来查看它们:
![](img/fdcda94e-f9c6-49e2-87b9-b843c2465b05.png)
Service discovery DNS records
请注意，存在两个`A`记录，每个支持我们的 ECS 服务的 ECS 任务一个记录。如果您要停止其中一个 ECS 任务，ECS 会自动从 DNS 中删除该记录，然后在 ECS 将 ECS 服务计数恢复到其所需计数并开始替换 ECS 任务后添加新的`A`记录。这确保了您的服务高度可用，并且依赖于您的服务的应用可以动态解析您的服务的适当实例。
# 为 x 光支持配置 todobackend 栈
有了我们的 x 光守护程序服务，我们现在可以将对 x 光的支持添加到`todobackend-aws`栈中。在本章的开头，您在 todo back and 应用中配置了对 X 射线的支持，如果您提交并推送了您的更改，您在最后一章中创建的连续交付管道应该已经向 ECR 发布了更新的 Docker 映像(如果不是这种情况，请在 todo back and 存储库中运行`make publish`命令)。您需要执行的唯一其他配置是更新附加到 todobackend 集群实例的安全规则，以允许 x 光通信，并确保 Docker 环境配置有适当的环境变量，以实现正确的 x 光操作。
以下示例演示了向`todobackend-aws`栈中的`ApplicationAutoscalingSecurityGroup`资源添加安全规则，该规则允许与 x 光守护程序进行 x 光通信:
```
...
...
Resources:
  ...
  ...
  ApplicationAutoscalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName} Application Autoscaling Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
 - IpProtocol: udp
 FromPort: 2000
 ToPort: 2000
 CidrIp: 172.31.0.0/16
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
...
...
```
以下示例演示了在`ApplicationTaskDefinition`资源中为 todobackend 容器定义配置环境设置:
```
...
...
Resources:
  ...
  ...
  ApplicationAutoscalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
    ...
    ...
      ContainerDefinitions:
        - Name: todobackend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/docker-in-aws/todobackend:${ApplicationImageTag}
          MemoryReservation: 395
          Cpu: 245
          MountPoints:
            - SourceVolume: public
              ContainerPath: /public
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: todobackend.settings_release
            - Name: MYSQL_HOST
              Value: !Sub ${ApplicationDatabase.Endpoint.Address}
            - Name: MYSQL_USER
              Value: todobackend
            - Name: MYSQL_DATABASE
              Value: todobackend
            - Name: SECRETS
              Value: todobackend/credentials
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_XRAY_DAEMON_ADDRESS
 Value: xray.services.dockerinaws.org:2000
...
...
```
在前面的示例中，您添加了一个名为`AWS_XRAY_DAEMON_ADDRESS`的变量，该变量引用了我们的 x 光守护程序服务的`xray.services.dockerinaws.org`服务端点，并且必须以`:`的格式表示。
You can override the service name used in your X-Ray traces be setting the `AWS_XRAY_TRACE_NAME` environment variable.  This would be important in our scenario where we have a dev and production instance of the todobackend application in the same account, and want to ensure each application environment has its own set of traces.
如果您现在提交并将所有更改推送到`todobackend-aws`存储库，上一章中的连续交付管道应该会检测到更改并自动部署您更新的栈，或者您可以运行`make deploy/dev`命令从命令行部署您的更改。
# 测试 x 光服务
成功部署您的更改后，浏览到您的环境的 todobackend URL，并与应用进行一些交互，例如添加一个`todo`项。
如果您接下来从 AWS 控制台(服务|开发人员工具| X 射线)打开 X 射线仪表板，并从左侧菜单中选择服务地图，您应该会看到一个非常简单的地图，其中包括 todobackend 应用:
![](img/51bba37a-3dbf-4f06-8d4f-ecc168183a1c.png)
X-Ray service map
在前面的截图中，我点击了 todobackend 服务，它在右侧显示了服务详细信息窗格，显示了响应时间分布和响应状态响应等信息。此外，请注意，服务映射包括 todobackend RDS 实例，假设我们在本章前面的示例中配置了我们的应用来修补`mysql-connector-python`库。
如果单击查看跟踪按钮，将显示该服务的跟踪；请注意，用于 Django 的 X 射线中间件包含 URL 信息，该信息允许您的跟踪按 URL 分组:
![](img/d25b61ac-61ec-4621-8b3d-99a298865260.png)
X-Ray traces
在前面的截图*、*中，请注意，85%的跟踪都命中了一个 IP 地址 URL，这对应于正在进行的应用负载平衡器运行状况检查。如果您单击跟踪列表中的“年龄”列，从最新到最早对跟踪进行排序，您应该能够看到您对 todobackend 应用的请求，在我的例子中，这是一个创建新的`todo`项目的`POST`请求。
点击身份链接，您可以查看以下截图*、*中`POST`轨迹的更多详细信息:
![](img/9eaf6820-622f-422a-bbc3-6c5e41b1d710.png)
X-Ray trace details
在前面的截图中，可以看到响应总共花费了 218 ms 完成，并且进行了两次数据库调用，每次调用花费的时间都不到 2 ms，如果您使用的是 X 射线 SDK 支持的其他库，还可以看到这些库进行调用的跟踪信息；例如，通过 boto3 库进行的任何 AWS 服务调用，例如将文件复制到 S3 或将消息发布到驱动流，也会被捕获。显然，在为应用排除性能问题时，这类信息非常有用。
# 摘要
在本章中，您学习了如何使用 AWS Fargate 服务部署 Docker 应用。为了使事情更有趣，您还学习了如何利用 ECS 服务发现来自动发布应用端点的服务可达性信息，这是在负载平衡器后面发布应用端点的更传统方法的替代方法。此外，为了结束我相信您会发现有趣且有趣的一章，您将对 AWS X 射线服务的支持添加到 todobackend 应用中，并部署了一个 X 射线守护程序服务，使用 Fargate 来捕获应用跟踪。
首先，您学习了如何将对 X 射线的支持添加到 Python Django 应用中，该应用只需要添加一个拦截传入请求的 X 射线中间件组件，还需要修补支持包，例如 mysql-connector-python 和 boto3 库，该库允许您捕获 mysql 数据库调用和您的应用可能进行的任何 AWS 服务调用。然后，您为 X 射线守护程序创建了一个 Docker 映像，并将其发布到弹性容器注册表中，以便在您的 AWS 环境中进行部署。
您学习了如何配置 ECS 服务发现所需的支持元素，添加了一个服务发现命名空间，该命名空间创建了一个维护服务发现服务端点的公共或私有 DNS 区域，然后为 X 射线守护程序创建了一个服务发现服务，允许您的 todobackend 应用(和其他应用)通过逻辑 DNS 名称发现所有活动和健康的 X 射线守护程序实例。
有了这些组件，您就可以使用 Fargate 创建一个 x 光守护程序服务，创建一个 ECS 任务定义和一个 ECS 服务。ECS 任务定义对支持 Fargate 有一些具体要求，包括定义一个单独的任务执行角色，向底层 ECS 代理和 Fargate 运行时授予权限，将 Fargate 指定为支持的启动类型，并确保配置了 awsvpc 网络模式。您创建的 ECS 服务要求您配置网络配置，以支持您的 ECS 任务定义的 awsvpc 网络模式。您还通过参考您在本章前面创建的服务发现服务，增加了对 ECS 服务发现的支持。
最后，您在 todobackend 栈中配置了现有的 ECS 任务定义，将服务发现服务名称指定为`AWS_XRAY_DAEMON_ADDRESS`变量；部署更改后，您学习了如何使用 X 射线跟踪来分析应用的传入请求的性能，并能够分析对 todobackend 应用数据库的单个调用。
在下一章中，您将了解另一个支持 Docker 应用的 AWS 服务，称为 Elastic Beanstalk。它提供了一种**平台即服务(Paas)** 方法来在 AWS 中部署和运行您的基于容器的应用。
# 问题
1.  对/错:Fargate 要求您创建一个 ECS 集群。
2.  配置 Fargate 时，支持哪些网络模式？
3.  对/错:Fargate 将 ECS 代理**控制平面**网络通信与 ECS 任务**数据平面**网络通信分开。
4.  您使用 Fargate 部署了一个新的 ECS 服务，但失败了，并出现一个错误，指示无法提取任务定义中指定的 ECR 映像。您验证映像名称和标签是否正确，以及任务定义的`TaskRoleArn`属性上引用的 IAM 角色是否允许访问 ECR 存储库。这个错误最可能的原因是什么？
5.  您正在确定在 AWS 中部署基于容器的应用的最佳技术。您的组织部署 Splunk 来收集所有应用的日志，并使用 New Relic 来收集性能指标。基于这些要求，Fargate 是一种合适的技术吗？
6.  对/错:ECS 服务发现使用 Consul 发布服务注册信息。
7.  哪个服务发现资源创建了 53 号路由区域？
8.  您将 ECS 任务定义配置为使用 Fargate，并指定应该为该任务分配 400 个 CPU 单元和 600 MB 内存。当您部署使用任务定义的 ECS 服务时，部署会失败。您如何解决这个问题？
9.  默认情况下，AWS X 射线通信使用哪种网络协议和端口？
10.  对/错:当您向基于容器的应用添加 X 射线支持时，它们将向 AWS X 射线服务发布跟踪。
# 进一步阅读
有关本章所涵盖主题的更多信息，您可以查看以下链接:
*   亚马逊 ECS 上的 AWS Fargate:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/AWS _ Fargate . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html)
*   Amazon ECS 任务执行 IAM 角色:[https://docs . AWS . Amazon . com/AWS cloudinformation/latest/user guide/AWS-resource-ECS-service . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)
*   ECS 服务发现:[https://docs . AWS . Amazon . com/Amazon ECS/latest/developer guide/Service-Discovery . html](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html)
*   AWS X 射线开发者指南:[https://docs . AWS . Amazon . com/X 射线/latest/dev Guide/AWS-X 射线. html](https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html)
*   AWS X 射线 Python SDK:[https://docs . AWS . Amazon . com/Xray/latest/dev guide/Xray-SDK-Python . html](https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-python.html)
*   在亚马逊 ECS 上运行 X 射线守护程序:[https://docs . AWS . Amazon . com/X 射线/latest/dev guide/X 射线-守护程序-ecs.html](https://docs.aws.amazon.com/xray/latest/devguide/xray-daemon-ecs.html)
*   CloudFormation 服务发现公共命名空间资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-Service Discovery-Public dnsnamespace . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-publicdnsnamespace.html)
*   CloudFormation 服务发现私有命名空间资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-Service Discovery-privated dnsnamespace . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-privatednsnamespace.html)
*   云信息服务发现服务资源参考:[https://docs . AWS . Amazon . com/AWS cloudinformation/latest/user guide/AWS-Resource-Service Discovery-Service . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-servicediscovery-service.html)
*   CloudFormation ECS 任务定义资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-ECS-Task Definition . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html)
*   CloudFormation ECS 服务资源参考:[https://docs . AWS . Amazon . com/AWS cloud information/latest/user guide/AWS-Resource-ECS-Service . html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html)