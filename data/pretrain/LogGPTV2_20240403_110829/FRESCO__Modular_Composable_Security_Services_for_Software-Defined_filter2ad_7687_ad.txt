event:PUSH
input:table_out,source_IP
output:a_cls_out
parameter:-
action:-
1 a_cluster (2)(1){
2
3
4
5
6
7
8 }
-
1 do_action (2)(0){
2
3
4
5
6
7
type:ActionHandler
event:PUSH
input:cross_out,ip_list
output:-
parameter:-
action:cross_out == 1
?DROP(ip_list):FORWARD
8 }
1 do_action (1)(0){
2
3
4
5
6
7
type:ActionHandler
event:PUSH
input:scan_out
output:-
parameter:-
action:scan_out == 1
?REDIRECT:FORWARD
8 }
1 c_cluster (0)(1){
2
3
type:C-PlaneCluster
event:TCP_CONNECTION_FAIL,
TCP_CONNECTION_SUCCESS
input:-
output:c_cls_out
parameter:-
action:-
4
5
6
7
8 }
Figure 13. FRESCO scripts illustrating composition of the BotMiner service
of P2P plotters is longer than that of normal P2P clients).
The algorithm operates by performing co-clustering, to ﬁnd
common hosts that exhibit both characteristics (i.e., low
volume and low churn rate).
Figure 14. FRESCO composition of the P2P
Plotter
We have implemented this essential functionality of the
P2P Plotter algorithm as a 4-module FRESCO script, which
is shown in Figure 14. This involved 227 lines of Python
code and 32 lines of FRESCO script. The script for the
P2P Plotter is illustrated in Figure 15. The reuse of mod-
ules (i.e., CrossCluster and ActionHandler, from
the BotMiner service implementation is noteworthy, high-
lighting the reuse potential of FRESCO modules.
8.2 Comparing FRESCO Applications with Non-
FRESCO Detectors
Network anomaly detection approaches, e.g., TRW [16],
have been well-studied and are commonly used as a com-
plement to signature-based detection systems in traditional
networks. While these approaches may be instantiated as
software programs or in hardware devices, the common
practice is to implement them as stand-alone software pro-
grams. (We envision that the FRESCO development envi-
ronment may be similarly used for rapid prototyping and
evaluation of certain anomaly detection algorithms in Open-
Flow networks.)
To highlight the advantages of FRESCO, we ﬁrst choose
an open-source network anomaly detection system and then
replicate identical functionality using FRESCO. Specif-
ically, we compare FRESCO with a recently published
work [24], where the authors implemented popular network
anomaly detection algorithms such as TRW-CB [34] and
Rate Limit [39] as applications running on an OpenFlow
network controller. We re-implement the same algorithms
(i.e., TRW-CB and Rate Limit) using existing FRESCO
modules and the FRESCO scripting language. We provide
a comparison in Table 2, in terms of the number of lines
of source code, to demonstrate the utility of the FRESCO
development environment.
As summarized in Table 2, prior work [24] makes
the case that its OpenFlow application implementation is
slightly simpler than the standard implementation (i.e., the
source code for the OpenFlow implementation is roughly
70% to 80% the length of the standard implementation).
Using FRESCO, we are able to realize similar functional-
ity with an order of magnitude fewer lines of code. That is,
we have implemented the identical TRW-CB function with
1 low_volume_peer (0)(1){
2
3
4
5
6
7
8 }
type:VolumeDetector
event:INCOMING_FLOW
input:-
output:volume_out
parameter:-
action:-
1 cr_cluster (2)(2){
2
3
4
5
6
7
8 }
type:CrossCluster
event:PUSH
input:volume_out,churn_out
output:cross_out,ip_list
parameter:-
action:-
1 low_churn_peer (0)(1){
2
3
4
5
6
7
8 }
type:ChurnDetector
event:INCOMING_FLOW
input:-
output:churn_out
parameter:-
action:-
1 do_action (2)(0){
2
3
4
5
6
7
8 }
type:ActionHandler
event:PUSH
input:cross_out,ip_list
output:-
parameter:-
action:cross_out == 1 ? DROP(ip_list):FORWARD
Figure 15. FRESCO scripts illustrating composition of the P2P Plotter
66 lines of code (58 lines of Python and 8 lines of FRESCO
script) and the rate limiting function with 69 lines of code
(61 lines of Python and 8 lines of FRESCO script). These
two examples represent 6% to 7% of the length of their stan-
dard implementations, and less than 9% of the recently pub-
lished OpenFlow implementation.
Algorithms
TRW-CB
Rate Limit
Standard
1,060
991
Implementation
OpenFlow application
741
814
FRESCO
66 (58 + 8)
69 (61 + 8)
Table 2. Source code length for standard,
OpenFlow and FRESCO implementations of
the TRW-CB and Rate Limit anomaly detec-
tion algorithms
Resource Controller Overhead. The resource controller
component monitors switch status frequently and removes
old ﬂow rules to reclaim space for new ﬂow rules, which
will be enforced by FRESCO applications. This job is per-
formed by FRESCO’s garbage collector, a subcomponent of
the resource controller, which we test under the following
scenario. First, we let non-FRESCO applications enforce
4,000 ﬂow rules to an OpenFlow network switch. In this
case, we assume that the maximum size of the ﬂow table
in the switch is 4,000, and we set the threshold value(θ) for
garbage collection as 0.75 (i.e., if the capacity of a ﬂow
table in a switch is ≤ 75%, we run the garbage collec-
tor). Our test results, shown in Figure 16, demonstrate that
the garbage collector correctly implements its ﬂow eviction
policy.
8.3 Measuring and Evaluating FRESCO Overhead
FRESCO Application Layer Overhead. We compare the
ﬂow setup time of NOX ﬂow generation with ﬁve other
FRESCO applications and summarize the results in Table
3. To measure this, we capture packets between NOX and
the OpenFlow switch, and measure the round trip required
to submit the ﬂow and receive a corresponding ﬂow con-
straint. We observe that FRESCO applications require ad-
ditional setup time in the range of 0.5 milliseconds to 10.9
milliseconds.2
NOX
0.823
Simple
Flow
Tracker
1.374
Simple
Scan
Detector
2.461
Threshold
Scan
Detector
7.196
BotMiner
Detector
P2P
Plotter
15.421
11.775
Time
(ms)
Table 3. Flow setup time comparison of NOX
with ﬁve FRESCO applications
2These setup times were measured on mininet, which is an emulated
environment running on a virtual machine. If we use a more powerful host
for the controller, which is the common case in an OpenFlow network, this
setup time will be reduced signiﬁcantly.
Figure 16. Operation of FRESCO garbage collec-
tor
9 Related Work
The OpenFlow standard has as its roots on a rich body
of work on control-ﬂow separation and clean-slate design
of the Internet (e.g., [6], [10]). SANE [7] and Ethane [6]
propose new architectures for securing enterprise networks.
The SANE [7] protection layer proposes a fork-lift (clean-
slate) approach for upgrading enterprise network security
that introduces a centralized server, i.e., domain controller,
to authenticate all elements in the network and grant access
to services in the form of capabilities that are enforced at
each switch. Ethane [6] is a more practical and backwards-
compatible instantiation of SANE that requires no modiﬁ-
cation to end hosts. Both studies may be considered as cat-
alysts for the emergence of OpenFlow and software-deﬁned
networking.
FRESCO is built over the foundations laid by these
studies and shares a common objective with these systems
in that it seeks to improve enterprise security using pro-
grammable network elements. However, FRESCO empha-
sizes composable security, and applications that it enables
are much more sophisticated than simple access control
policies. In addition, the FRESCO SEK focuses on provid-
ing continued enforcement of potentially conﬂicting ﬂow
constraints imposed by FRESCO and other OF applications.
Thus, we consider our work as greatly complementary to
existing studies such as SANE and Ethane.
FRESCO’s focus is on the development of a holistic plat-
form for specifying and developing OF security applica-
tions and enforcement of security constraints generated by
these applications. Prior work has addressed a part of this
problem, i.e., development of new languages for specifying
security policies. Nettle [40] is a new language for man-
aging OF switches that is based on functional reactive pro-
gramming. Frenetic [9] and Procera [41] provide declar-
ative query language frameworks for managing distributed
OF switches, describing high-level packet-forwarding and
specifying network policies. The OpenSAFE system pro-
vides a language framework for enabling redirection of traf-
ﬁc to network monitoring devices [3]. In contrast to these
languages, the FRESCO development environment is spe-
cialized to serve the needs of security applications. Speciﬁ-
cally, FRESCO applications issue high-level security direc-
tives (e.g., REDIRECT, QUARANTINE, MIRROR), which are
then translated into OF-speciﬁc commands by the script-to-
In addition, FRESCO applications re-
module translator.
quire aggregate session and ﬂow state information as well
as directives for asynchronous delivery of switch state in-
formation that is unavailable in standard OF environments.
Applications such as Random Host Mutation [14] are ad-
ditional motivating examples of candidate OF security ap-
plications whose development may be accelerated using
FRESCO.
The FRESCO security enforcement kernel is informed
by prior research focused on testing or verifying ﬁrewall
and network device conﬁguration [36, 8, 21, 22, 2, 42, 1],
e.g., using Firewall Decision Diagrams (FDDs) [21] or test
case generators [36, 8]. These studies do not deal with dy-
namic networks. More recently, header space analysis was
proposed, which is a generic framework to express vari-
ous network misconﬁgurations and policy violations [17].
While HSA can in theory deal with dynamic networks, the
FRESCO SEK differs in that it is specialized to deal with
speciﬁc policy violations by OF applications, rule conﬂict
detection, and dynamic ﬂow tunneling. Veriﬂow proposes
to slice the OF network into equivalence classes to efﬁ-
ciently check for invariant property violations [18]. The
alias set rule reduction algorithm used by FRESCO SEK
is complementary to this approach.
We build our system on NOX, which is an open-source
OF controller [13]. However, our methodology could be ex-
tended to other architectures like Beacon [30], Maestro [4],
and DevoFlow [26]. FlowVisor is a platform-independent
OF controller that uses network slicing to separate logical
network planes, allowing multiple researchers to run ex-
periments safely and independently in the same production
OpenFlow network [37]. Our work differs from FlowVi-
sor in several ways. First, FlowVisor cares primarily about
non-interference across different logical planes (slices) but
does not instantiate network security constraints within a
slice. It is possible that an OF application uses packet mod-
iﬁcation functions resulting in ﬂow rules that are applied
across multiple network switches within the same slice. In
such cases, we need a security enforcement kernel to re-
solve conﬂicts as described in Section 5. Second, although
FlowVisor improves security by separating the OF network
into logical planes, it does not provide analogous capabil-
ities to FRESCO for building additional security applica-
tions.
The need for better policy validation and enforcement
mechanisms has been touched on by prior and concurrent
research efforts. NICE provides a model-checking frame-
work that uses symbolic execution for automating the test-
ing of OpenFlow applications [5]. The Resonance archi-
tecture enables dynamic access control and monitoring in
SDN environments [27]. The FlowChecker system en-
codes OpenFlow ﬂow tables into Binary Decision Diagrams
(BDD) and uses model checking [1] to verify security prop-
erties. However, the evaluation of FlowChecker does not