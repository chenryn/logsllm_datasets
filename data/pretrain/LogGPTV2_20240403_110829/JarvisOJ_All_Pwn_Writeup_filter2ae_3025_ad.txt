      }
      v1 = malloc(0x38u);
      v1->id = v3;
      memcpy(v1->name, a1, len);                    // leakable
      v1->name[39] = 0;
      v1->something = 0;
      ptr[v3] = v1;
      return v3;
    }
其中 memcpy 不会在末尾加上 \0，因此是可以 leak 的，可以利用这个来 leak libc
打个小广告，找 main_arena 在 libc 中的偏移可以用我写的这个
[_小工具_](https://github.com/bash-c/main_arena_offset#install)
    jarvisOJ_hsys [master●●] main_arena ./libc-2.19.so 
    [+]__malloc_hook_offset : 0x1ab408
    [+]main_arena_offset : 0x1ab420
继续看其他函数，发现在 show 中有一个 很可疑的memcpy，有可能造成栈溢出
       else if ( !strcmp(command, "show") )
        {
          if ( IDX >= 0 )
          {
            format = "%d: Name: %s, Age %d, Gender: %s, Info: ";
            v42 = 128;
            v41 = "Male";
            v40 = "Female";
            s = &s;
            v38 = 0;
            memset(&s, 0, 0x80u);
            Name = ptr[IDX]->name;
            Age = ptr[IDX]->age;
            Gender = v41;
            if ( !LOBYTE(ptr[IDX]->gender) )
              Gender = v40;
            v17 = IDX;
            v37 = sprintf(s, format, IDX, Name, Age, Gender);
            v36 = cntIdx(IDX) + 8;
            if ( IDX )
            {
              v15 = ptr[IDX]->name;
              name_len = strlen(v15);
            }
            else
            {
              name_len = 5;                         // admin
            }
            v15 = ptr[IDX]->age;
            v34 = name_len + v36 + 6;
            v7 = cntIdx(v15);
            v8 = 4;
            if ( !LOBYTE(ptr[IDX]->gender) )
              v8 = 6;
            v63 = v8 + v7 + v34 + 10 + 8;
            n = 127 - v63;
            if ( ptr[IDX]->something )
            {
              v15 = ptr[IDX]->something;
              v10 = strlen(v15);
              if ( v10 > n )
              {
                s = &s;
                v13 = strlen(&s);
                memcpy(&s[v13], ptr[IDX]->something, n);	// overflow
                v72 = 46;
                v73 = 46;
                v74 = 46;
              }
              else
              {
                s = &s;
                v11 = strlen(&s);
                v15 = ptr[IDX]->something;
                v30 = &s[v11];
                v29 = v15;
                v12 = strlen(v15);
                memcpy(v30, v29, v12);
              }
            }
            else
            {
              s = &s;
              v9 = strlen(&s);
              v32 = strcpy(&s[v9], "N/A");
            }
            v27 = puts(&s);
          }
          else
          {
            v44 = printf("You must add a hacker first and then show information about him/her\n");
          }
        }  
为什么会觉得 memcpy 可疑？
  * 像之前说的，这种代码多的题目一般不会有很难找的漏洞，因此我着重看了 strcpy，memcpy 等危险函数，发现 memcpy 的长度在一定条件下是可以控制的
这样如果能控制 memcpy 的长度，就可以直接栈溢出来 rop 或者用 one_gadget 了。
至于怎么控制长度，我是完全参考了师傅的 writeup，直接给出
[_vertitas501_](https://veritas501.space/2017/03/10/JarvisOJ_WP/)
师傅的链接，就不在这里鹦鹉学舌了。
后来复习了一下哈希表的知识发现这个题目还是很好解决的，这种东西果然不用就会忘得一干二净= =
## [61dctf]hiphop (400)
这个题目代码有点多，看了一遍下来是一个打怪兽的程序。逻辑如下：
  8. 用户选择技能(change skill)，如果不选择默认为 attack
  9. 使用技能，分两步进行： 
    1. 怪兽攻击，用户选择三种防御策略(iceshield, fireshield, windshield)，怪兽的攻击方式随机，如果用户使用了对应的防御策略则成功防御，不扣 hp，否则扣除用户相应 hp
    2. 用户攻击，每种技能的伤害不同
  10. 用户每胜利一次怪兽都会升级一次，不同等级的怪兽有不同的初始 hp(64h, 3E8h, 0BB8h, 7FFFFFFFFFFFFFFEh)；当怪兽升级 3 次以上，用户胜利后即可 get flag
先看一下有没有什么比较特殊的技能，发现 fireball 和 icesword 两个技能会
sleep(1)，再联想到主函数是新开了一个进程处理逻辑的，想到了条件竞争；再仔细看，icesword 的伤害还是负的。
      if ( !strcmp(a1, &aAttack[32]) )
      {
        fireball((_QWORD *)a1 + 5);
        sleep(1u);                                  // sleep(1)
      }
      else if ( !strcmp(a1, &aAttack[192]) )
      {
        icesword((_QWORD *)a1 + 5);
        sleep(1u);                                  // sleep(1)
      }
    void __fastcall icesword(_QWORD *a1)
    {
      unsigned __int64 v1; // rbx
      unsigned __int64 v2; // rbx
      signed __int64 v3; // ST18_8
      v1 = (unsigned __int16)rand();
      v2 = (rand() name);
      free(item->description);
      free(item);
    }
    void __cdecl show_item()
    {
      Item *item; // ST00_8
      Item *v1; // ST00_8
      int index; // [rsp+Ch] [rbp-4h]
      puts("Which item?");
      fflush(stdout);
      index = read_num();
      if ( index name, item);
        printf("Description:%s\n", v1->description);
        fflush(stdout);
      }
      else
      {
        puts("Hacker!");
      }
    }
因此可以先通过 unsorted bin 来 leak libc
    jarvisOJ_ItemBoard [master●] main_arena ./libc-2.19.so
    [+]__malloc_hook_offset : 0x3be740
    [+]main_arena_offset : 0x3be760
然后通过 uaf 控制结构体里的函数指针，改成 system，那么在下一次 free 时，就相当于调用了 system(chunk)，只需要把 chunk
首部改成 $0; sh; /bin/sh; 等即可。
[_exploit
here_](https://github.com/bash-c/pwn_repo/blob/master/jarvisOJ_ItemBoard/solve.py)
## png2ascii (450)
这是 defconCTF 20 Quals 的一道题目，mips 架构。 程序是静态编译的，可以先用 rizzo 和 sig
恢复部分符号。通过搜索字符串可以定位到关键函数是从 0x401200 开始的。
测试后发现在 png2ascii 功能里存在栈溢出，漏洞发生在 read_n_until 时
    .text:00401C4C                 addiu   $v0, $fp, 0x130+buf  # load buffer info $v0
    .text:00401C50                 lw      $a0, 0x130+fd($fp)  # load socket descriptor into $a0
    .text:00401C54                 move    $a1, $v0         # load buffer address into $a1
    .text:00401C58                 li      $a2, 0x200       # load max size(0x200) into $a2
    .text:00401C5C                 li      $a3, 0xA         # load delimiter into $a3
    .text:00401C60                 la      $t9, read_n_until
    .text:00401C64                 nop
    .text:00401C68                 jalr    $t9 ; read_n_until  # call read_n_until
    .text:00401C68                                          #
    .text:00401C68                                          #
    .text:00401C68                                          # stack overflow bug
可以输入 0x200 个字符，缓冲区却只有 0x108，如果是 x86 直接 rop 即可，但 mips 架构找不到太好的 gadget，最后参考了别人的
writeup 找了这么一段
    .text:0040F968                 lw      $gp, 0x30+var_10($sp)
    .text:0040F96C                 sw      $v0, 0x30+var_4($sp)
    .text:0040F970                 lw      $a0, 0x30+var_30($sp)  # file descriptor
    .text:0040F974                 lw      $a1, 0x30+var_2C($sp)  # destination buffer address
    .text:0040F978                 lw      $a2, 0x30+var_28($sp)  # read size
    .text:0040F97C                 li      $v0, 0xFA3       # read syscall
    .text:0040F980                 syscall 0
    .text:0040F984                 sw      $v0, 0x30+var_C($sp)
    .text:0040F988                 sw      $a3, 0x30+var_8($sp)
    .text:0040F98C                 lw      $a0, 0x30+var_4($sp)
    .text:0040F990                 la      $t9, sub_4115FC
    .text:0040F994                 nop
    .text:0040F998                 jalr    $t9 ; sub_4115FC
这样有栈上的变量，看的不是很清楚，我们可以直接在调试的过程中查看这段 gadget
    pwndbg> pdisass 0x40f968 10
     ► 0x40f968    lw     $gp, 0x20($sp)
       0x40f96c    sw     $v0, 0x2c($sp)
       0x40f970    lw     $a0, ($sp)
       0x40f974    lw     $a1, 4($sp)