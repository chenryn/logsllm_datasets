        #4 0x7611f5 in void std::vector >::_M_realloc_insert(__gnu_cxx::__normal_iterator > >, int const&) /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/vector.tcc:448:7
        #5 0x7611f5 in std::vector >::push_back(int const&) /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h:948:4
        #6 0x7611f5 in cv::dnn::dnn4_v20211220::sortByExecutionOrder(opencv_tensorflow::GraphDef&) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_graph_simplifier.cpp:1015:24
        #7 0x5f0fe9 in cv::dnn::dnn4_v20211220::(anonymous namespace)::TFImporter::populateNet() /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_importer.cpp:3018:9
        #8 0x5e6743 in cv::dnn::dnn4_v20211220::(anonymous namespace)::TFImporter::TFImporter(cv::dnn::dnn4_v20211220::Net&, char const*, char const*) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_importer.cpp:2709:5
        #9 0x5e6743 in cv::dnn::dnn4_v20211220::Net cv::dnn::dnn4_v20211220::detail::readNet(char const*&&, char const*&&) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/../dnn_common.hpp:75:14
        #10 0x5e2b33 in cv::dnn::dnn4_v20211220::Net cv::dnn::dnn4_v20211220::detail::readNetDiagnostic(char const*&&, char const*&&) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/../dnn_common.hpp:82:25
        #11 0x5e2b33 in cv::dnn::dnn4_v20211220::readNetFromTensorflow(std::__cxx11::basic_string, std::allocator > const&, std::__cxx11::basic_string, std::allocator > const&) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_importer.cpp:3219:12
        #12 0x4d90ce in main (/root/fuzz-test-generation/exp/opencv/fuzzer/imread/crash_3/crash+0x4d90ce)
        #13 0x7fafffa17c86 in __libc_start_main /build/glibc-uZu3wS/glibc-2.27/csu/../csu/libc-start.c:310
    previously allocated by thread T0 here:
        #0 0x4d630d in operator new(unsigned long) (/root/fuzz-test-generation/exp/opencv/fuzzer/imread/crash_3/crash+0x4d630d)
        #1 0x76116c in __gnu_cxx::new_allocator::allocate(unsigned long, void const*) /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/ext/new_allocator.h:111:27
        #2 0x76116c in std::allocator_traits >::allocate(std::allocator&, unsigned long) /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/alloc_traits.h:436:20
        #3 0x76116c in std::_Vector_base >::_M_allocate(unsigned long) /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h:172:20
        #4 0x76116c in void std::vector >::_M_realloc_insert(__gnu_cxx::__normal_iterator > >, int const&) /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/vector.tcc:406:33
        #5 0x76116c in std::vector >::push_back(int const&) /usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h:948:4
        #6 0x76116c in cv::dnn::dnn4_v20211220::sortByExecutionOrder(opencv_tensorflow::GraphDef&) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_graph_simplifier.cpp:1015:24
        #7 0x5f0fe9 in cv::dnn::dnn4_v20211220::(anonymous namespace)::TFImporter::populateNet() /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_importer.cpp:3018:9
        #8 0x5e6743 in cv::dnn::dnn4_v20211220::(anonymous namespace)::TFImporter::TFImporter(cv::dnn::dnn4_v20211220::Net&, char const*, char const*) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_importer.cpp:2709:5
        #9 0x5e6743 in cv::dnn::dnn4_v20211220::Net cv::dnn::dnn4_v20211220::detail::readNet(char const*&&, char const*&&) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/../dnn_common.hpp:75:14
        #10 0x5e2b33 in cv::dnn::dnn4_v20211220::Net cv::dnn::dnn4_v20211220::detail::readNetDiagnostic(char const*&&, char const*&&) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/../dnn_common.hpp:82:25
        #11 0x5e2b33 in cv::dnn::dnn4_v20211220::readNetFromTensorflow(std::__cxx11::basic_string, std::allocator > const&, std::__cxx11::basic_string, std::allocator > const&) /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_importer.cpp:3219:12
        #12 0x4d90ce in main (/root/fuzz-test-generation/exp/opencv/fuzzer/imread/crash_3/crash+0x4d90ce)
        #13 0x7fafffa17c86 in __libc_start_main /build/glibc-uZu3wS/glibc-2.27/csu/../csu/libc-start.c:310
    SUMMARY: AddressSanitizer: heap-buffer-overflow /root/fuzz-test-generation/exp/opencv/modules/dnn/src/tensorflow/tf_graph_simplifier.cpp:1026:33 in cv::dnn::dnn4_v20211220::sortByExecutionOrder(opencv_tensorflow::GraphDef&)
    Shadow bytes around the buggy address:
      0x0c047fff8450: fa fa fd fa fa fa fd fd fa fa fd fd fa fa fd fa
      0x0c047fff8460: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
      0x0c047fff8470: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa
      0x0c047fff8480: fa fa fd fa fa fa fd fd fa fa fd fd fa fa fd fa
      0x0c047fff8490: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fd
    =>0x0c047fff84a0: fa fa fd fd fa fa fd fd fa fa 04 fa fa fa fd[fa]
      0x0c047fff84b0: fa fa fd fa fa fa fd fd fa fa 04 fa fa fa fa fa
      0x0c047fff84c0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
      0x0c047fff84d0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
      0x0c047fff84e0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
      0x0c047fff84f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
    Shadow byte legend (one shadow byte represents 8 application bytes):
      Addressable:           00
      Partially addressable: 01 02 03 04 05 06 07 
      Heap left redzone:       fa
      Freed heap region:       fd
      Stack left redzone:      f1
      Stack mid redzone:       f2
      Stack right redzone:     f3
      Stack after return:      f5
      Stack use after scope:   f8
      Global redzone:          f9
      Global init order:       f6
      Poisoned by user:        f7
      Container overflow:      fc
      Array cookie:            ac
      Intra object redzone:    bb
      ASan internal:           fe
      Left alloca redzone:     ca
      Right alloca redzone:    cb
      Shadow gap:              cc
    ==11303==ABORTING
# Effect
This bug may cause security vulnerability by reading invalid memory address.
# Recommendations
2 suggestions for opencv security improvements.  
[1] Request CVE number for this bug to inform opencv users to prevent
potential security vulnerabilities.  
[2] Register below fuzzer code to ossfuzz (https://github.com/google/oss-fuzz)
for continuous fuzzing.  
(This fuzzer already found fixes #21852, and found this bug again.)  
ossfuzz already has fuzzers for opencv thus only commit below fuzzer code and
build script to ossfuzz is enough I think.  
(https://github.com/google/oss-fuzz/tree/master/projects/opencv)  
Note that, the git repo of UTopia project(https://github.com/Samsung/UTopia)
is currently empty and will be updated until the end of May.
FuzzerCode:
    /*
     * This fuzzer is generated by UTopia project based on TEST(Test_Tensorflow, read_inception).
     * (UTopia Project: https://github.com/Samsung/UTopia)
     */
    #include 
    #include 
    #include 
    #include 
    #include 
    using namespace cv;
    using namespace dnn;
    bool saveFile(std::string Path, std::string Content) {
      std::ofstream OFS(Path);
      if (!OFS.is_open())
        return false;
      OFS ();
      auto Input3 = Provider.ConsumeRandomLengthString();
      std::string Input3Path = "input3";
      if (!saveFile(Input3Path, Input3)) return;
      int Input4 = Provider.ConsumeIntegralInRange(0, 256);
      int Input5 = Provider.ConsumeIntegralInRange(0, 256);
      int Input6 = Provider.ConsumeIntegralInRange(0, 256);
      auto Input7 = Provider.ConsumeRandomLengthString();
      auto Input8 = Provider.ConsumeRandomLengthString();
      Net net;
      net = readNetFromTensorflow(Input1Path);
      if (net.empty())
        return;
      net.setPreferableBackend(Input2);
      Mat sample = imread(Input3Path);
      if (sample.empty())
        return;
      Mat input;
      resize(sample, input, Size(Input4, Input5));
      input -= Scalar::all(Input6);
      Mat inputBlob = blobFromImage(input);
      net.setInput(inputBlob, Input7);
      Mat out = net.forward(Input8);
    }
    extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
      FuzzedDataProvider Provider(data, size);
      try {
        fuzz(Provider);
      } catch (std::exception &E) {}
      return 0;
    }