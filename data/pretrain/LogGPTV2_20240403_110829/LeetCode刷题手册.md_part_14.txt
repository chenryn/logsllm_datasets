---
## Page 84
代码
解题思路
给定一个罗马数字，
个特殊的规则只适用于以下六种情况：
字 1 在数字 5 的左边，所表示的数等于大数5 减小数1得到的数值 4。同样地，数字9 表示为IX。
通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4不写做I川I，而是IV。数
+Ⅱl。
例如，
·简单题。按照题目中罗马数字的字符数值，计算出对应罗马数字的十进制数即可。
·给定一个罗马数字，将其转换成整数。输入确保在1到3999的范围内。
func romanToInt(s string) int {
var roman = map[string]int{
package leetcode
·C可以放在D(500)和 M(1000)的左边，来表示400和900。
·丨可以放在V(5)和×(10)的左边，来表示4和 9。
M
CD
X
字符
0001:.W
"x": 10,
"v": 5,
"I": 1,
 ×可以放在L(50)和C(100)的左边，来表示 40和90。
num, lastint, total := O, 0, 0
"L": 5
 return 0
罗马数字 2 写做ⅡI，即为两个并列的 1。12 写做×Il，即为×+II。27 写做 XXVII,即为 XX+V
100
，将其转换成整数。输入确保在1到3999的范围内。
1:5 10 0 10 0
数
00
这
---
## Page 85
是重复的，即使-1可能出现100次，每次使用的-1的数组下标都是不同的。
可能使用多次，但是最后输出解的时候，不能重复。例如[-1，-1，2] 和[2,-1,-1]、[-1,2,-1]这 3 个解
用 map 提前计算好任意 2 个数字之和，保存起来，可以将时间复杂度降到 O(n^2)。这一题比较麻烦的
解题思路
给定一个数组，
题目大意
Example:
The solution set must not contain duplicate triplets.
Note:
all unique triplets in the array which gives the sum of zero.
 Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = O? Find 
一点在于，最后输出解的时候，要求输出不重复的解。数组中同一个数字可能出现多次，同一个数字也
题目
15. 3Sum
A solution set is:
Given array nums = [-1, 0, 1, 2,-1,-4],
[-1, -1, 2]
[-1, 0, 1],
return total
for i := O; i= 3 {
 uniqNums = append(uniqNums, key) 
 counter[value]++ 
for j := i + l; j uniqNums[j] && counter[c] >0 {
C := O - uniqNums[i] - uniqNums[j] 
if uniqNums[j]*2+uniqNums[i] == O) && counter[uniqNums[j]] > 1 {
if （uniqNums[i]*2+uniqNums[j] == O) && counter[uniqNums[i]] > 1 {
res = append(res, []int{uniqNums[i], uniqNums[j], c}) 
 res = append(res, []int{uniqNums[i], uniqNums[j], uniqNums[j]}]
 res = append(res, []int{uniqNums[i], uniqNums[i], uniqNums[j]})
---
## Page 87
代码
这道题还可以用暴力解法，三层循环找到距离target 最近的组合。具体见代码。
以k 的数字最大。j往后移动，k往前移动，逐渐夹逼出最接近 target 的值。
置。j，k两个指针开始一前一后夹逼。j为i的下一个数字，为数组最后一个数字，由于经过排序，所
在循环的时候和前一个数进行比较，如果相等，i继续往后移，直到移到下一个和前一个数字不同的位
数组中存在多个重复数字的问题。具体处理方法很多，可以用 map 计数去重。这里笔者简单的处理，
这一题的解法是用两个指针夹逼的方法。先对数组进行排序，i从头开始往后面扫。这里同样需要注意
题完全不同。
这一题看似和第15 题和第18 题很像，都是求 3或者 4 个数之和的问题，但是这一题的做法和15，18
解题思路
给定一个数组，
题目大意
Example:
would have exactly one solution.
sum is closest to target. Return the sum of the three integers. You may assume that each input 
au eu yons snu ui shaaui aau puy aaen laaui ue pue sasaui u jo snu ree ue ua
题目
func threesumclosest(nums []int, target int) int {
//解法—0(n^2)
package leetcode
The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Given array nums = [-l, 2, 1, -4], and target = 1.
mport
ifn>2{ 
n，res, diff := len(nums)，O,math.MaxInt32 
"sort"
"math'
sort.Ints(nums)
for i := 0; i {
return res
for i := O; i  target { 
if sum == target {
if abs(sum-target) 1 { 
uniqNums [k]}]
counter[uniqNums[j]] > 1 { 
（{[>]swnnbLun
counter[uniqNums[i]] > 1 { 
({[]sWnnbLun
& counter[uniqNums[i]]>1{ 
uniqNums[j]}] 
uniqNums[j]}] 
uniqNums[i]}]
return res
if (uniqNums[i]*4 == target) && counter[uniqNums[i]] >= 4 {
 if (uniqNums[j]*2+uniqNums[i]*2 == target) && counter[uniqNums[j]] > 1 
for k := j+ 1;k  2 {
 res = append(res, []int{uniqNums[i], uniqNums[i], uniqNums[i],
if （uniqNums[j]*3+uniqNums[i] == target) && counter[uniqNums[j]] >2 { 
if (uniqNums[j]*2+uniqNums[i]+uniqNums[k] == target) & 
 if (uniqNums[i]*2+uniqNums[j]+uniqNums[k] == target) &&
 if (uniqNums[k]*2+uniqNums[i]+uniqNums[j] == target) && 
 res = append(res, []int{uniqNums[i], uniqNums[i], uniqNums[j],
 res = append(res, []int{uniqNums[i], uniqNums[i], uniqNums[i], 
if c > uniqNums[k] && counter[c] > O {
n
res = append(res, []int{uniqNums[i], uniqNums[j], uniqNums[k] ,
 res = append(res,
 res = append(res, []int{uniqNums[i], uniqNums[j], uniqNums[j],
 res = append(res, 
5.
After removing the second node from the end, the linked list becomes 1->2->3-
Given linked list: 1->2->3->4->5, and n = 2.
* type ListNode struct {
var fast, slow *ListNode
 Definition for singly-linked list.
for i := O; i  len {
if head == nil {
return head
slow.Next = slow.Next.Next
if fast == nil {
for current != nil
i:=0 
current = head
if n == len { 
len := 0 
current := head
if n<={
for fast.Next != nil {
current = current.Next 
if i == len-n-1 
current.Next = nil
current := head
return head
current = current.Next 
return head
return nil 
len++ 
slow = slow.Next
return head 
head = head.Next
fast = fast.Next
return head 
head = head.Next
++
break
deleteNode.Next = nil
current.Next = current.Next.Next
deleteNode := current.Next
---
## Page 95
Example 5: 
Example 4:
Example 3: 
Example 2: 
Example 1: 
Note that an empty string is also considered valid.
Open brackets must be closed in the correct order.
Open brackets must be closed by the same type of brackets.