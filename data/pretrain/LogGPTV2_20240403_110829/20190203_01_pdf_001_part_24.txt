### Table Row Loading and Initial Snapshot

- **Table Rows Loaded**: The table rows have already been loaded. Do not check the "Perform Initial Snapshot" box unless you wish to reload the data. For more information on using an offline snapshot, refer to Section 7.9.
- **Initial Snapshot with Verbose Output**:
  - If you check the "Perform Initial Snapshot" box, the "Verbose Output" option will appear. This is illustrated in Figure 6-15.
  - If you skipped enabling table filters (as described in Step 5) and checked the "Perform Initial Snapshot" box after Step 4, the "Verbose Output" check box will also be displayed, as shown in Figure 6-16.
  - **Verbose Output**: Select this option only if you want to display the output from the snapshot in the dialog box. In a Network Address Translation (NAT) environment, leave this option unchecked to avoid delays caused by large amounts of output.

- **Save Changes**: Click the "Save" button to save the publication database definition. Upon successful saving, a "Publication Database" node will be added to the replication tree under the MMR type node of the Publication Server node, as shown in Figure 6-17.
  - **Node Label**: Unlike the master definition node, the label MDN does not appear at the end of the node in the replication tree. The MDN field is set to "No" in the Property window, indicating that this is not the master definition node.
  - **Publication Node**: A "Publication" node appears under the newly added master node, representing the publication in the master definition node, which is replicated to the master node.

- **Initial Snapshot Replication**: If you checked the "Perform Initial Snapshot" box in Step 6, an initial snapshot replication will be performed. If the "Verbose Output" box was also checked, the log of the snapshot will be displayed, as shown in Figure 6-18. If the snapshot is successful, the replicated tables in the master node will be loaded with the rows from the publication tables of the master definition node.

### Conflict Resolution and Synchronization

- **Step 7: Handling Update/Update Conflicts**:
  - Set the `REPLICA IDENTITY` option to `FULL` on tables where update/update conflicts are expected. Refer to Section 6.6.1 for additional information.

- **Step 8 (Optional): User Access**:
  - If users need to access the data in the publication tables residing on the master node, it is convenient to create one or more "group" roles containing the required privileges to access these tables.
  - For the trigger-based method, grant privileges on the control schema objects to users who will perform inserts, updates, or deletions on the publication tables.
  - For the log-based method, users need access to the publication tables and certain control schema objects under specific circumstances.
  - Adding new users to these roles eliminates the need to grant privileges individually to each new user. After replicating the publication schema (as shown in Step 3), you can grant the required privileges needed to access the publication tables and their control schema objects. See Step 2 of Section 5.1.4.3 for more details.

### Control Schema Objects in Master Nodes

- **Control Schema Objects**: Creating master nodes results in the creation of control schema objects in each master node database. Refer to Section 5.2.4 for details on the control schema objects created in each master node.
- **Do Not Delete**: Do not delete any of these control schema objects, as doing so will corrupt the replication system metadata.
- **Removing a Master Node**: When you remove a master node using the xDB Replication Console or xDB Replication Server CLI, all of its control schema objects are deleted from that master node database.

### On-Demand Replication

- **Replication Options**:
  - **Immediate Replication**: Perform an initial on-demand snapshot, followed by synchronization replication.
  - **Scheduled Replication**: Schedule replication to start at a later date and time. For creating a schedule, see Section 7.2.

- **Performing Snapshot Replication**:
  - **Step 1**: Select the "Publication" node under the master node for which you wish to perform snapshot replication, as shown in Figure 6-19.
  - **Step 2**: Open the Snapshot dialog box by right-clicking the "Publication" node and choosing "Snapshot," or by clicking the Snapshot icon, as shown in Figure 6-20.
  - **Step 3**: Select the "Verbose Output" check box only if you want to display the output from the snapshot in the dialog box. Leave it unchecked in a NAT environment to avoid delays. Click the "Snapshot" button to start the snapshot replication, as shown in Figure 6-21.
  - **Step 4**: If the snapshot is successful, "Snapshot Taken Successfully" will appear. Click the "OK" button. If the snapshot was not successful, scroll through the messages in the Snapshot dialog box or check the log files. The status messages of each snapshot are saved in the Migration Toolkit log files named `mtk.log[.n]` (where [.n] is an optional history file count if log file rotation is enabled). The log files are located in the following directories:
    - **Linux**: `/var/log/xdb-x.x`
    - **Windows**: `POSTGRES_HOME\.enterprisedb\xdb\x.x` (where `POSTGRES_HOME` is the home directory of the Windows `postgres` account, and `x.x` is the xDB Replication Server version number).

- **Synchronization Replication**:
  - **Initial Snapshot Requirement**: Ensure that an initial snapshot replication has been performed from the master definition node to every other master node in the multi-master replication system. If a newly added master node did not undergo an initial snapshot, subsequent synchronization replications may fail to apply transactions to that master node. The initial snapshot can be taken when the master node is first added (see Section 6.3) or by performing an on-demand snapshot (see Section 6.5.1).
  - **Synchronization Operations**: When synchronization replication is performed, a series of synchronization operations occur between every master node pair in the replication system. For example, if a replication system consists of master nodes A, B, and C, synchronization is applied to the following node pairs:
    - Changes on node A are applied to nodes B and C.
    - Changes on node B are applied to nodes A and C.
    - Changes on node C are applied to nodes A and B.
  - **Conflict Resolution**: Conflicts may arise when changes made on different nodes result in conflicts. Section 6.6 discusses the types of conflicts that may occur and how they can be resolved.

- **Initiating On-Demand Synchronization Replication**:
  - **Step 1**: Select the "Publication" node under any master node. Synchronization will be applied to every master node pair in the replication system, as shown in Figure 6-23.
  - **Step 2**: Open the Synchronize dialog box by right-clicking the "Publication" node and choosing "Synchronize," or by clicking the Synchronize icon, as shown in Figure 6-24.
  - **Step 3**: Click the "Synchronize" button to start the synchronization replication, as shown in Figure 6-25.
  - **Step 4**: If the synchronization is successful, "Publication Synchronized Successfully" will appear. Click the "OK" button. If the synchronization was not successful, an error message will be displayed, as shown in Figure 6-26.

- **Viewing Replication and Conflict History**:
  - The operations applied to the publication tables can be seen in the replication history. For more information on viewing replication history, see Section 7.4.
  - Conflicting changes can be viewed in the conflict history. For more information on viewing conflict history, see Section 6.7.

### Conflict Types and Resolution

- **Conflict Types**:
  - **Uniqueness Conflict**: Occurs when the same value is used for a primary key or unique column in an insert transaction on two or more master nodes. Also known as an insert/insert conflict.
  - **Update Conflict**: Occurs when an update transaction modifies a column value in the same row on two or more master nodes. Also known as an update/update conflict.
  - **Delete Conflict**: Occurs when the row corresponding to an update transaction on the source node is not found on the target node because the row has already been deleted on the target node. Also known as an update/delete conflict. Conversely, if there is a delete transaction on the source node and an update transaction for the same row on the target node, this is referred to as a delete/update conflict. Finally, if the row corresponding to a delete transaction on the source node is not found on the target node because the row has already been deleted on the target node, this is referred to as a delete/delete conflict.

- **Configuration Parameter and Table Setting Requirements**:
  - **Log-Based Method**:
    - **track_commit_timestamp**: Enable the `track_commit_timestamp` configuration parameter in the `postgresql.conf` file for Postgres 9.5 databases containing a master node. If not enabled, update/update conflicts will not be automatically resolved, and conflicting transactions will remain in a pending state.
    - **REPLICA IDENTITY FULL**: Set the `REPLICA IDENTITY` setting to `FULL` for tables where update/update conflicts are expected. Use the `ALTER TABLE` command to set this, as shown below:
      ```sql
      ALTER TABLE schema.table_name REPLICA IDENTITY FULL;
      ```
    - **Example**:
      ```sql
      ALTER TABLE edb.dept REPLICA IDENTITY FULL;
      ```
    - **Displaying REPLICA IDENTITY**:
      ```sql
      edb=# \d+ edb.dept
      Table "edb.dept"
      Column | Type | Modifiers | Storage | Stats target | Description
      --------+-----------------------+-----------+----------+--------------+-------------
      deptno | numeric(2,0) | not null | main | |
      dname | character varying(14) | | extended | |
      loc | character varying(13) | | extended | |
      Indexes:
      "dept_pk" PRIMARY KEY, btree (deptno)
      "dept_dname_uq" UNIQUE CONSTRAINT, btree (dname)
      Referenced by:
      TABLE "emp" CONSTRAINT "emp_ref_dept_fk" FOREIGN KEY (deptno) REFERENCES dept(deptno)
      TABLE "jobhist" CONSTRAINT "jobhist_ref_dept_fk" FOREIGN KEY (deptno) REFERENCES dept(deptno) ON DELETE SET NULL
      Replica Identity: FULL
      ```

- **Examples of Conflicts**:
  - **Uniqueness Conflict**:
    - Example: Two insert transactions on different master nodes use the same primary key value.
    - Table Definition:
      ```sql
      CREATE TABLE addrbook (
        id SERIAL PRIMARY KEY,
        name VARCHAR(20),
        address VARCHAR(50)
      );
      ```
    - Example Scenario:
      - **Master Node A**:
        ```sql
        INSERT INTO addrbook (name, address) VALUES ('A', 'ADDR A');
        INSERT INTO addrbook (name, address) VALUES ('B', 'ADDR B');
        ```
      - **Master Node B**:
        ```sql
        INSERT INTO addrbook (name, address) VALUES ('C', 'ADDR C');
        ```
      - **Synchronization**:
        - When synchronization occurs, the unique key conflict on Node B will be detected, and the conflicting transaction will be recorded.

  - **Update Conflict**:
    - Example: Two update transactions on different master nodes modify the same column in the same row.
    - Example Scenario:
      - **Master Node A**:
        ```sql
        UPDATE addrbook SET address = 'ADDR B1' WHERE id = 2;
        ```
      - **Master Node B**:
        ```sql
        UPDATE addrbook SET address = 'ADDR B2' WHERE id = 2;
        ```
      - **Synchronization**:
        - When synchronization occurs, the current value of the address on Node B will not match the old value on Node A, resulting in an update conflict.

  - **Delete Conflict**:
    - Example: An update transaction on one master node and a delete transaction on another master node for the same row.
    - Example Scenario:
      - **Master Node A**:
        ```sql
        UPDATE addrbook SET address = 'ADDR B1' WHERE id = 2;
        ```
      - **Master Node B**:
        ```sql
        DELETE FROM addrbook WHERE id = 2;
        ```
      - **Synchronization**:
        - When synchronization occurs, the row with `id = 2` will not be found on Node B, resulting in a delete conflict.

By following these steps and guidelines, you can effectively manage and resolve conflicts in your multi-master replication system.