have already loaded the table rows. Therefore do not check this box unless you want to
reload the data. See Section 7.9 for information on using an offline snapshot.
If you do check the Perform Initial Snapshot check box, the Verbose Output check box
appears as shown by the following:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 269
EDB Postgres Replication Server User’s Guide
Figure 6-15 - Initial snapshot with verbose output option
If you skipped the enabling of table filters as described in Step 5, and you checked the
Perform Initial Snapshot check box after Step 4, the Verbose Output check box is
displayed as well:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 270
EDB Postgres Replication Server User’s Guide
Figure 6-16 - Initial snapshot with verbose output option
Select the Verbose Output check box only if you want to display the output from the
snapshot in the dialog box. This option should be left unchecked in a network address
translation (NAT) environment as a large amount of output from the snapshot may delay
the response from the Snapshot dialog box.
Click the Save button.
When the publication database definition is successfully saved, a Publication Database
node is added to the replication tree under the MMR type node of the Publication Server
node.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 271
EDB Postgres Replication Server User’s Guide
Figure 6-17 - Replication tree after adding an additional master node
Unlike the master definition node, the label MDN does not appear at the end of the node in
the replication tree. The MDN field is set to No in the Property window to indicate this is
not the master definition node.
In addition, a Publication node appears under the newly added master node. This
Publication node represents the publication in the master definition node, which is
replicated to the master node.
If in Step 6, you checked the Perform Initial Snapshot check box, an initial snapshot
replication is performed. If you checked the Verbose Output check box, the log of the
snapshot is displayed as well.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 272
EDB Postgres Replication Server User’s Guide
Figure 6-18 - Adding a master node with an initial snapshot
If the snapshot is successful, the replicated tables in the master node are loaded with the
rows from the publication tables of the master definition node.
Step 7: If you expect update/update conflicts, then set the REPLICA IDENTITY option to
FULL on those tables where the conflicts are expected to occur. See Section 6.6.1 for
additional information.
Step 8 (Optional): If users are to access the data in the publication tables residing on this
master node, it is convenient to have one or more “group” roles containing the required
privileges to access these tables. For the trigger-based method, privileges must also be
granted on the control schema objects to users who are to perform inserts, updates, or
deletions on the publication tables. When using the log-based method a user needs access
to the publication tables and to certain control schema objects as well under certain
circumstances.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 273
EDB Postgres Replication Server User’s Guide
When adding new users, granting these users membership in these roles gives them the
privileges to access the publication tables. This eliminates the need to grant these
privileges individually to each new user.
After you perform the replication of the publication schema as shown in Step 3, you can
grant the required privileges needed to access the publication tables and its control
schema objects. See Step 2 of Section 5.1.4.3 for information on how this can be
accomplished.
6.4 Control Schema Objects Created in Master Nodes
Creation of master nodes results in the creation of control schema objects in each master
node database.
See Section 5.2.4 for the control schema objects created in each master node.
Do not delete any of these control schema objects as the replication system metadata
will become corrupted.
When you remove a master node using the xDB Replication Console or xDB Replication
Server CLI, all of its control schema objects are deleted from that master node database.
6.5 On Demand Replication
After a master definition node, its publication, and additional master nodes are created,
there are a couple of choices for starting the replication process.
 Replication can be done immediately by performing an initial on demand
snapshot after which synchronization replication may be performed.
 Replication can be scheduled to start at a later date and time by creating a
schedule.
This section discusses the procedure for initiating a replication on demand. Section 7.2
discusses how to create a schedule.
6.5.1 Performing Snapshot Replication
A snapshot replication occurs from the master definition node to a selected master node.
When you create a master node for the first time, you have the option of performing an
initial snapshot (see Step 3 of Section 6.3).
You can perform snapshots to this master node at any later point in time according to the
following steps.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 274
EDB Postgres Replication Server User’s Guide
Step 1: Select the Publication node under the master node for which you wish to perform
snapshot replication.
Figure 6-19 - Selecting a master node publication for an on demand snapshot
Step 2: Open the Snapshot dialog box in any of the following ways:
 Click the secondary mouse button on the Publication node and choose Snapshot.
 Click the primary mouse button on the Snapshot icon.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 275
EDB Postgres Replication Server User’s Guide
Figure 6-20 - Opening the Snapshot dialog box
Step 3: Select the Verbose Output check box only if you want to display the output from
the snapshot in the dialog box. This option should be left unchecked in a network address
translation (NAT) environment as a large amount of output from the snapshot may delay
the response from the Snapshot dialog box. Click the Snapshot button to start snapshot
replication.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 276
EDB Postgres Replication Server User’s Guide
Figure 6-21 - Snapshot dialog box
Step 4: Snapshot Taken Successfully appears if the snapshot was successful. Click the
OK button. If the snapshot was not successful, scroll through the messages in the
Snapshot dialog box window if Verbose Output was selected or check the log files.
The status messages of each snapshot are saved in the Migration Toolkit log files named
mtk.log[.n] (where [.n] is an optional history file count if log file rotation is
enabled) in the following directories:
For Linux:
/var/log/xdb-x.x
For Windows:
POSTGRES_HOME\.enterprisedb\xdb\x.x
POSTGRES_HOME is the home directory of the Windows postgres account
(enterprisedb account for Advanced Server installed in Oracle compatible
configuration mode). The specific location of POSTGRES_HOME is dependent upon your
version of Windows. The xDB Replication Server version number is represented by x.x.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 277
EDB Postgres Replication Server User’s Guide
Figure 6-22 - Successful on demand snapshot
The publication has now been replicated from the master definition node to the selected
master node. A record of the snapshot is maintained in the replication history. See
Section 7.4 for information on how to view replication history.
6.5.2 Performing Synchronization Replication
Note: Be sure an initial snapshot replication has been performed from the master
definition node to every other master node in the multi-master replication system. If a
newly added master node did not undergo an initial snapshot, any subsequent
synchronization replication may fail to apply the transactions to that master node. The
initial snapshot could be taken when the master node is first added (see Section 6.3) or by
performing an on demand snapshot (see Section 6.5.1).
When synchronization replication is performed in a multi-master replication system, a
series of synchronization operations occur between every master node pair in the
replication system.
For example, if a replication system consists of master nodes A, B, and C,
synchronization is applied to the following node pairs whenever synchronization
replication is initiated:
 Changes on node A are applied to node B.
 Changes on node A are applied to node C.
 Changes on node B are applied to node A.
 Changes on node B are applied to node C.
 Changes on node C are applied to node A.
 Changes on node C are applied to node B.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 278
EDB Postgres Replication Server User’s Guide
There may be circumstances where changes made on different nodes result in conflicts.
Section 6.6 discusses the types of conflicts that may occur and how they can be resolved.
The following steps describe how to initiate on demand synchronization replication.
Step 1: Select the Publication node under any master node. Regardless of the master
node chosen, synchronization is applied to every master node pair in the replication
system.
Figure 6-23 - Selecting a master node publication for an on demand synchronization
Step 2: Open the Synchronize dialog box in any of the following ways:
 Click the secondary mouse button on the Publication node and choose
Synchronize.
 Click the primary mouse button on the Synchronize icon.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 279
EDB Postgres Replication Server User’s Guide
Figure 6-24 - Opening the Synchronize dialog box
Step 3: Click the Synchronize button to start synchronization replication.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 280
EDB Postgres Replication Server User’s Guide
Figure 6-25 - Synchronize dialog box
Step 4: Publication Synchronized Successfully appears if the synchronization was
successful. Click the OK button. If the synchronization was not successful, an error
message is displayed.
Figure 6-26 - Successful on demand synchronization
The operations that were applied to the publication tables can be seen in the replication
history. See Section 7.4 for information on how to view replication history.
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 281
EDB Postgres Replication Server User’s Guide
Conflicting changes that were encountered can be seen in the conflict history. See Section
6.7 for information on how to view conflict history.
6.6 Conflict Resolution
There are certain situations where synchronization replication may result in data conflicts
arising from the row changes that took place on different master nodes.
Conflict resolution deals with the topic of the types of conflicts that might occur, the
strategies for dealing with conflicts, and the options available for automatically resolving
such conflicts.
6.6.1 Configuration Parameter and Table Setting Requirements
Depending upon the multi-master replication system environment, certain configuration
settings may be required in order for the conflict resolution process to operate properly.
The following are required only for the log-based method. These do not apply to the
trigger-based method.
 track_commit_timestamp. Any Postgres 9.5 database server containing a master
node must have its track_commit_timestamp configuration parameter
enabled. The track_commit_timestamp parameter is located in the
postgresql.conf file. If track_commit_timestamp is not enabled, then
update/update conflicts are not automatically resolved such as by using the
earliest timestamp of the conflicting transactions. As a result, these conflicting
transactions are left in a pending state. See Section 6.6.7 for an example of how
update/update conflicts are automatically resolved.
 REPLICA IDENTITY FULL. If update/update conflicts are expected to occur
on a given publication table, then the REPLICA IDENTITY setting for the table
must be set to FULL on every master node. The case where update transactions
occur on separate master nodes, but updating different columns in the same row,
is not considered an update/update conflict. However, if REPLICA IDENTITY is
not set to FULL, then this case will be recorded as an update/update conflict.
The REPLICA IDENTITY option is set to FULL using the ALTER TABLE command as
shown by the following:
ALTER TABLE schema.table_name REPLICA IDENTITY FULL
The following is an example of the ALTER TABLE command:
ALTER TABLE edb.dept REPLICA IDENTITY FULL;
The REPLICA IDENTITY setting can be displayed by the PSQL utility using the \d+
command:
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 282
EDB Postgres Replication Server User’s Guide
edb=# \d+ edb.dept
Table "edb.dept"
Column | Type | Modifiers | Storage | Stats target | Description
--------+-----------------------+-----------+----------+--------------+-------------
deptno | numeric(2,0) | not null | main | |
dname | character varying(14) | | extended | |
loc | character varying(13) | | extended | |
Indexes:
"dept_pk" PRIMARY KEY, btree (deptno)
"dept_dname_uq" UNIQUE CONSTRAINT, btree (dname)
Referenced by:
TABLE "emp" CONSTRAINT "emp_ref_dept_fk" FOREIGN KEY (deptno) REFERENCES
dept(deptno)
TABLE "jobhist" CONSTRAINT "jobhist_ref_dept_fk" FOREIGN KEY (deptno) REFERENCES
dept(deptno) ON DELETE SET NULL
Replica Identity: FULL
Note: In addition to conflict resolution requirements, the REPLICA IDENTITY FULL
setting may be required on publication tables for other reasons in xDB Replication
Server. See Section 2.2.12.3 for additional requirements.
6.6.2 Conflict Types
The types of conflicts can be summarized as follows:
 Uniqueness Conflict. A uniqueness conflict occurs when the same value is used
for a primary key or unique column in an insert transaction on two or more master
nodes. This is also referred to as an insert/insert conflict.
 Update Conflict. An update transaction modifies a column value in the same row
on two or more master nodes. For example, an employee address column is
updated on master node A, and another user updates the address column for the
same employee on master node B. The timestamps of when the transactions occur
on each node could be different, but both transactions occur in a time interval
during which synchronization has not yet occurred. Thus when synchronization
does take place, both conflicting transactions are to be applied. This is also
referred to as an update/update conflict.
 Delete Conflict. The row corresponding to an update transaction on the source
node is not found on the target node as the row has already been deleted on the
target node. This is referred to as an update/delete conflict. Conversely, if there is
a delete transaction on the source node and an update transaction for the same row
on the target node, this case is referred to as a delete/update conflict. Finally, in
the case where the row corresponding to a delete transaction on the source node is
not found on the target node as the row has already been deleted on the target
node is referred to as a delete/delete conflict.
The following table definition is used to illustrate conflict resolution examples:
CREATE TABLE addrbook (
id SERIAL PRIMARY KEY,
name VARCHAR(20),
address VARCHAR(50)
);
Copyright © 2010 - 2018 EnterpriseDB Corporation. All rights reserved. 283
EDB Postgres Replication Server User’s Guide
The following table illustrates an example of a uniqueness conflict.
Table 6-1 - Uniqueness Conflict
Timestamp Action Master Node A Master Node B
Node A: INSERT INTO
id = 1, name = 'A',
addrbook (name, address)
address = 'ADDR A'
VALUES ('A', 'ADDR A');
t1 id = 2, name = 'B',
Node A: INSERT INTO address = 'ADDR B'
addrbook (name, address)
VALUES ('B', 'ADDR B');
id = 1, name = 'A',
Node B: INSERT INTO
address = 'ADDR A' id = 1, name = 'C',
t2 addrbook (name, address)
id = 2, name = 'B', address = 'ADDR C'
VALUES ('C', 'ADDR C');
address = 'ADDR B'
Row change for INSERT tx
id = 1 on Node A results in
unique key conflict on Node
Synchronization pushes Node A B
t3
changes to Node B id = 1, name = 'C',
address = 'ADDR C'
id = 1, name = 'A',
address = 'ADDR A'
The following table illustrates an example of an update conflict.
Table 6-2 - Update Conflict
Timestamp Action Master Node A Master Node B
id = 2, address = id = 2, address =
t0
'ADDR B' 'ADDR B'
Node A: UPDATE addrbook
id = 2, address = id = 2, address =
t1 SET address = 'ADDR B1'
'ADDR B1' 'ADDR B'
WHERE id = 2;
Node B: UPDATE addrbook
id = 2, address = id = 2, address =
t2 SET address = 'ADDR B2'
'ADDR B1' 'ADDR B2'
WHERE id = 2;
Current value of address on
Synchronization pushes Node A Node B not equal old value
t3
changes to Node B on Node A ('ADDR B2' <>
'ADDR B')
The following table illustrates an example of a delete conflict.
Table 6-3 - Delete Conflict
Timestamp Action Master Node A Master Node B
id = 2, address = id = 2, address =
t0
'ADDR B' 'ADDR B'
Node A: UPDATE addrbook
id = 2, address = id = 2, address =
t1 SET address = 'ADDR B1'
'ADDR B1' 'ADDR B'
WHERE id = 2;
Node B: DELETE FROM id = 2, address =
t2 Row with id = 2 deleted