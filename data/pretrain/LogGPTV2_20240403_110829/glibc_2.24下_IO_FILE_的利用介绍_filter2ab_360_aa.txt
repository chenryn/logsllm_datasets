### glibc 2.24下 IO_FILE 的利用介绍
在2.24版本的glibc中，全新加入了针对IO_FILE_plus的vtable劫持的检测措施，glibc
会在调用虚函数之前首先检查vtable地址的合法性。首先会验证vtable是否位于_IO_vtable段中，如果满足条件就正常执行，否则会调用_IO_vtable_check做进一步检查。
```C
/* Check if unknown vtable pointers are permitted; otherwise,
   terminate the process.  */
void _IO_vtable_check (void) attribute_hidden;
/* Perform vtable pointer validation.  If validation fails, terminate
   the process.  */
static inline const struct _IO_jump_t *
IO_validate_vtable (const struct _IO_jump_t *vtable)
{
  /* Fast path: The vtable pointer is within the __libc_IO_vtables
     section.  */
  uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;
  uintptr_t ptr = (uintptr_t) vtable;
  uintptr_t offset = ptr - (uintptr_t) __start___libc_IO_vtables;
  if (__glibc_unlikely (offset >= section_length))
    /* The vtable pointer is not in the expected section.  Use the
       slow path, which will terminate the process if necessary.  */
    _IO_vtable_check ();
  return vtable;
}
```
计算 `section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;`，紧接着会判断 vtable -  __start___libc_IO_vtables 的 offset ，如果这个 offset 大于 section_length ,即大于 `__stop___libc_IO_vtables - __start___libc_IO_vtables` 那么就会调用 `_IO_vtable_check()` 这个函数。
```C
void attribute_hidden
_IO_vtable_check (void)
{
#ifdef SHARED
  /* Honor the compatibility flag.  */
  void (*flag) (void) = atomic_load_relaxed (&IO_accept_foreign_vtables);
#ifdef PTR_DEMANGLE
  PTR_DEMANGLE (flag);
#endif
  if (flag == &_IO_vtable_check)
    return;
  /* In case this libc copy is in a non-default namespace, we always
     need to accept foreign vtables because there is always a
     possibility that FILE * objects are passed across the linking
     boundary.  */
  {
    Dl_info di;
    struct link_map *l;
    if (_dl_open_hook != NULL
        || (_dl_addr (_IO_vtable_check, &di, &l, NULL) != 0
            && l->l_ns != LM_ID_BASE))
      return;
  }
#else /* !SHARED */
  /* We cannot perform vtable validation in the static dlopen case
     because FILE * handles might be passed back and forth across the
     boundary.  Therefore, we disable checking in this case.  */
  if (__dlopen != NULL)
    return;
#endif
  __libc_fatal ("Fatal error: glibc detected an invalid stdio handle\n");
}
```
如果vtable是非法的，那么会引发abort。
这里的检查使得以往使用vtable进行利用的技术很难实现
### fileno 与缓冲区的相关利用
在vtable难以被利用之后，利用的关注点从vtable转移到_IO_FILE结构内部的域中。
前面介绍过_IO_FILE在使用标准IO库时会进行创建并负责维护一些相关信息，其中有一些域是表示调用诸如fwrite、fread等函数时写入地址或读取地址的，如果可以控制这些数据就可以实现任意地址写或任意地址读。
```
struct _IO_FILE {
  int _flags;		/* High-order word is _IO_MAGIC; rest is flags. */
  /* The following pointers correspond to the C++ streambuf protocol. */
  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
  char* _IO_read_ptr;	/* Current read pointer */
  char* _IO_read_end;	/* End of get area. */
  char* _IO_read_base;	/* Start of putback+get area. */
  char* _IO_write_base;	/* Start of put area. */
  char* _IO_write_ptr;	/* Current put pointer. */
  char* _IO_write_end;	/* End of put area. */
  char* _IO_buf_base;	/* Start of reserve area. */
  char* _IO_buf_end;	/* End of reserve area. */
  /* The following fields are used to support backing up and undo. */
  char *_IO_save_base; /* Pointer to start of non-current get area. */
  char *_IO_backup_base;  /* Pointer to first valid character of backup area */
  char *_IO_save_end; /* Pointer to end of non-current get area. */
  struct _IO_marker *_markers;
  struct _IO_FILE *_chain;
  int _fileno;
  int _flags2;
  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */
};
```
因为进程中包含了系统默认的三个文件流stdin\stdout\stderr，因此这种方式可以不需要进程中存在文件操作，通过scanf\printf一样可以进行利用。
在_IO_FILE中_IO_buf_base表示操作的起始地址，_IO_buf_end表示结束地址，通过控制这两个数据可以实现控制读写的操作。
### fileno 与缓冲区的相关利用示例
简单的观察一下_IO_FILE对于调用scanf的作用
```
#include "stdio.h"
char buf[100];
int main()
{
 char stack_buf[100];
 scanf("%s",stack_buf);
 scanf("%s",stack_buf);
}
```
在执行程序第一次使用stdin之前，stdin的内容还未初始化是空的
```
0x7ffff7dd18e0 :	0x00000000fbad2088	0x0000000000000000
0x7ffff7dd18f0 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1900 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1910 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1920 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1930 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1940 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1950 :	0x0000000000000000	0xffffffffffffffff
0x7ffff7dd1960 :	0x0000000000000000	0x00007ffff7dd3790
0x7ffff7dd1970 :	0xffffffffffffffff	0x0000000000000000
0x7ffff7dd1980 :	0x00007ffff7dd19c0	0x0000000000000000
0x7ffff7dd1990 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd19a0 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd19b0 :	0x0000000000000000	0x00007ffff7dd06e0 :	0x00000000fbad2288	0x0000000000602013
0x7ffff7dd18f0 :	0x0000000000602014	0x0000000000602010
0x7ffff7dd1900 :	0x0000000000602010	0x0000000000602010
0x7ffff7dd1910 :	0x0000000000602010	0x0000000000602010
0x7ffff7dd1920 :	0x0000000000602410	0x0000000000000000
0x7ffff7dd1930 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1940 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1950 :	0x0000000000000000	0xffffffffffffffff
0x7ffff7dd1960 :	0x0000000000000000	0x00007ffff7dd3790
0x7ffff7dd1970 :	0xffffffffffffffff	0x0000000000000000
0x7ffff7dd1980 :	0x00007ffff7dd19c0	0x0000000000000000
0x7ffff7dd1990 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd19a0 :	0x00000000ffffffff	0x0000000000000000
0x7ffff7dd19b0 :	0x0000000000000000	0x00007ffff7dd06e0
```
进一步思考可以发现其实stdin初始化的内存是在堆上分配出来的，在这里堆的基址是0x602000，因为之前没有堆分配因此缓冲区的地址也是0x602010
```
Start              End                Offset             Perm Path
0x0000000000400000 0x0000000000401000 0x0000000000000000 r-x /home/vb/桌面/tst/1/t1
0x0000000000600000 0x0000000000601000 0x0000000000000000 r-- /home/vb/桌面/tst/1/t1
0x0000000000601000 0x0000000000602000 0x0000000000001000 rw- /home/vb/桌面/tst/1/t1
0x0000000000602000 0x0000000000623000 0x0000000000000000 rw- [heap]
```
分配的堆大小是0x400个字节，正好对应于_IO_buf_base～_IO_buf_end
在进行写入后，可以看到缓冲区中有我们写入的数据，之后目的地址栈中的缓冲区也会写入数据
```
0x602000:	0x0000000000000000	0x0000000000000411 :	0x00000000fbad2288	0x0000000000602013
0x7ffff7dd18f0 :	0x0000000000602014	0x0000000000602010
0x7ffff7dd1900 :	0x0000000000602010	0x0000000000602010
0x7ffff7dd1910 :	0x0000000000602010	0x00007ffff7dd2740 :	0x00007ffff7dd27c0	0x0000000000000000 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1940 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd1950 :	0x0000000000000000	0xffffffffffffffff
0x7ffff7dd1960 :	0x0000000000000000	0x00007ffff7dd3790
0x7ffff7dd1970 :	0xffffffffffffffff	0x0000000000000000
0x7ffff7dd1980 :	0x00007ffff7dd19c0	0x0000000000000000
0x7ffff7dd1990 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd19a0 :	0x00000000ffffffff	0x0000000000000000
0x7ffff7dd19b0 :	0x0000000000000000	0x00007ffff7dd06e0
```
之后scanf的读入数据就会写入到0x7ffff7dd2740的位置
```
0x7ffff7dd2740 :	0x00000a6161616161	0x0000000000000000
0x7ffff7dd2750 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd2760 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd2770 :	0x0000000000000000	0x0000000000000000
0x7ffff7dd2780 :	0x0000000000000000	0x0000000000000000
```
### _IO_str_jumps -> overflow介绍
`libc`中不仅仅只有`_IO_file_jumps`这么一个`vtable`，还有一个叫`_IO_str_jumps`的 ，这个 `vtable` 不在check范围之内。
```c
const struct _IO_jump_t _IO_str_jumps libio_vtable =
{
  JUMP_INIT_DUMMY,
  JUMP_INIT(finish, _IO_str_finish),
  JUMP_INIT(overflow, _IO_str_overflow),
  JUMP_INIT(underflow, _IO_str_underflow),
  JUMP_INIT(uflow, _IO_default_uflow),
  JUMP_INIT(pbackfail, _IO_str_pbackfail),
  JUMP_INIT(xsputn, _IO_default_xsputn),
  JUMP_INIT(xsgetn, _IO_default_xsgetn),
  JUMP_INIT(seekoff, _IO_str_seekoff),
  JUMP_INIT(seekpos, _IO_default_seekpos),
  JUMP_INIT(setbuf, _IO_default_setbuf),
  JUMP_INIT(sync, _IO_default_sync),
  JUMP_INIT(doallocate, _IO_default_doallocate),
  JUMP_INIT(read, _IO_default_read),
  JUMP_INIT(write, _IO_default_write),
  JUMP_INIT(seek, _IO_default_seek),
  JUMP_INIT(close, _IO_default_close),
  JUMP_INIT(stat, _IO_default_stat),
  JUMP_INIT(showmanyc, _IO_default_showmanyc),
  JUMP_INIT(imbue, _IO_default_imbue)
};
```
如果我们能设置文件指针的 `vtable` 为 `_IO_str_jumps` 么就能调用不一样的文件操作函数。这里以`_IO_str_overflow`为例子：
```c
int
_IO_str_overflow (_IO_FILE *fp, int c)