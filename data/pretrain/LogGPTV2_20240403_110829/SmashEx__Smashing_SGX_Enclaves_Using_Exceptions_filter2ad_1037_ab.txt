needs to be re-entered and operate on a context that overlaps with
that of the interrupted thread. Therefore, the above design for in-
enclave handlers requires the enclave to be re-entrant.
SGX Runtimes. Since the SGX enclave programming model is sig-
nificantly different from a traditional one, it can be cumbersome for
developers to use the low-level SGX interfaces. Therefore, enclave
developers usually use frameworks that provide high-level abstrac-
tions to hide away the details of exception handling, ocall, ecall,
and so on. Such software frameworks, referred to as SGX enclave
runtimes in this paper, execute inside enclaves. Since runtimes are
a part of the enclave trusted computing base, their design and im-
plementation are crucial to the security of enclave applications.
We survey 14 runtimes (Table 1) and find that they have varying
degrees of exception handling support.
CPU registerenclavestackCPUregisterEENTEREEXITFixed entry:2341Untrusted softwareTrusted enclaveSaveRestoreTrusted codeOcallOcallreturnTrusted codexor%xdx,%xdx...HostprocessenclavestackSSAregionCPU registerHostprocessOS kernelEENTER3EEXIT5SignalTrusted enclave4Exception1AEX2Untrusted software HardwareERESUME6Exception handlerSaveCopy...int i=6/0;Trusted code:Session 3B: Operating Systems CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea781Software
Intel SGX SDK [16]
Microsoft Open Enclave [46]
RedHat Enarx [12]
Graphene-SGX [33]
Apache Teaclave [1]
Google Asylo [29]
Fortanix Rust EDP [39]
Alibaba Inclavare [14]
Ratel [24]
SGX-LKL [49]
EdgelessRT [11]
Rust SGX SDK [62]
CoSMIX [48]
Veracruz [26]
Version
2.13
0.15.0
02dab73
1.1
0.2.0
0.6.2
3341ce1
0.6.0
1.1
b6e838e
8a6f11f
1.1.3
4e67f55
cbf01a9
Vulnerable
to SmashEx?
Exception
handling
a
a
a
d
a
a
d
d
d
a
a
a
a
a
a
a
a
a
a
a
d
d
a
a
a
a
a
a
Table 1: Summary of different enclave runtime designs.
a denotes that the enclave runtime is deemed exploitable by
SmashEx and d denotes that the enclave runtime is deemed
unexploitable by SmashEx under any enclave settings. For
the exception handling, a denotes handling asynchronous
exceptions is supported in enclaves and d denotes no sup-
port for handling exceptions in enclaves.
3 ATTACK OVERVIEW
An enclave must be re-entrant to safely handle exceptions by itself.
However, an important primitive, namely atomicity, is missing. We
illustrate the need for atomicity by outlining SmashEx, a novel
attack that exploits a re-entrancy vulnerability present in many
SGX frameworks.
3.1 Threat Model
Assumptions. The security-sensitive part of the application exe-
cutes, together with any runtime libraries, in the victim enclave.
The enclave interacts with the external environment, including the
OS and the host process, which are assumed to be arbitrarily mali-
cious. The SGX hardware is trusted. The enclave code is assumed
to be benign and we do not assume that it has any auxiliary bugs
or side channels that aid the attacker. We assume that the enclave
code, however, is running without ASLR (Address Space Layout
Randomization), i.e., certain critical addresses are deterministic and
known to the attacker. This is the default setup on nearly all SGX
platform runtimes we have surveyed. We discuss how to extend our
attacks when ASLR or other auxiliary defenses are enabled in Sec-
tion 9. The enclave is assumed to have enabled the asynchronous
exception handling interface.
Attack Goal & Scope. Our attack goal is to break the basic mem-
ory protection guarantees offered by SGX enclaves. Specifically,
we aim to break confidentiality by enabling an arbitrary memory
disclosure attack by which the attacker can reveal the victim en-
clave memory contents in full. To break integrity, our attack aims
to enable ROP attacks in the enclave. Most runtimes that support
in-enclave exception handling are susceptible to our attack. In our
survey summarized in Table 1, 12/14 runtimes support this func-
tionality. Among the 12 runtimes, we find that 10 are susceptible to
Figure 4: State diagram depicting the re-entrancy vulnerabil-
ity. The clear boxes denote enclave states, and the gray boxes
denote OS states. The solid black arrows show the ocall ex-
ecution flow where the dotted black box denotes the critical
section. The dashed red arrows show the in-enclave excep-
tion handling flow, injected by the OS when the enclave is in
critical section, thus corrupting the enclave state (i.e., stack).
the SmashEx attack. We present proof-of-concept (PoC) exploits
for two of the most popular runtimes, Intel SGX SDK and Open En-
clave, as case studies in Section 7. Intel SGX SDK is widely used in
multiple other runtimes and Open Enclave is part of the Microsoft
Confidential Computing Framework (CCF). Since SmashEx arises
directly on the enclave-OS interface, any application that uses a
vulnerable runtime is exploitable. We have also constructed PoC
exploits for all but RedHat Enarx, for which we have confirmed the
exploitability through code inspection (see Section 8).
3.2 The Re-entrancy Vulnerability
To demonstrate the re-entrancy issue clearly, we outline the flow of
exception handling on Intel SGX SDK for SGX2, both under normal
execution and under a SmashEx attack. It executes similarly on
SGX1 and extends to other runtimes (see Section 8).
Consider the flow that handles returning from an ocall. Fig-
ure 4 shows this flow with black solid arrows inside the dotted
box, which executes logic labeled ùê¥ ‚Üí ùêµ ‚Üí ùê∂ in that sequence.
This flow, however, can be interrupted when asynchronous excep-
tions arrive. The dashed red arrows in Figure 4 show the execution
flow when handling in-enclave exceptions corresponding to the
EENTER ‚Üí EEXIT ‚Üí ERESUME previously highlighted in Section 2.
Both flows are benign, but operate on overlapping enclave con-
texts. This clearly highlights that such ocall return flow and the
exception handling flow should be written with care to ensure that
they interleave safely. Specifically, when the ocall return flow is
interrupted, the enclave should be in a consistent state for the ex-
ception handling flow to progress correctly, and when the exception
handling flow completes, the enclave state should also be ready for
the enclave to resume. This adds considerable complexity when
in-enclave exceptions are to be supported, regardless of whether
the OS is acting maliciously.
In this example, the main vulnerability point that enables SmashEx
is in the ocall return flow, which requires atomicity for executing
certain critical sections that update the enclave context (shown
in the dotted black box in Figure 4). The state transitions for the
ocall return flow must check and clean up the register values re-
turned by the OS and then use them to set up the enclave private
4
Enclave movesregs to stackEnclave cleans regsEnclave ret uses stackInvalidpage permissionsInterrupt handlerHW movesregs to SSAFixed entry: HW preserves regsOcallimplmoves values to regsEEXITEENTER#PFAEXException handlermoves SSA to stackEENTEREEXITERESUMEHW movesSSA to regsABCSession 3B: Operating Systems CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea782(a)
(b)
(c)
Figure 5: Sub-components of SmashEx. (a) Injecting an AEX at the fixed entry point; (b) Corrupting the in-enclave memory
(corrupted data is depicted in red); (c) Returning to the target that the attacker has specified in the controlled anchor (in blue).
stack. Before this is finished, the enclave is in an inconsistent state,
with register values (in particular, the stack pointer rsp) provided
by the untrusted OS.
It is important, therefore, that the enclave should not be inter-
rupted to perform exception handling when it is still executing
in such an inconsistent state. However, the SGX enclave abstrac-
tion does not provide primitives for ensuring atomic execution of
critical sections in the enclave. For example, it is not possible to
selectively mask interrupts for certain critical sections. The enclave
must either statically disable all user-defined asynchronous excep-
tion handling1 or risk being interrupted arbitrarily if exception
handling is statically allowed. The lack of atomicity results in a
powerful attack vector which SmashEx leverages.
3.3 High-level Attack Steps
As illustrated in Figure 5, SmashEx starts with the attacker trig-
gering an exception immediately after the enclave is entered (via
EENTER) to return from an ocall (Figure 5a). The hardware copies
the attacker-controlled registers into the SSA region, which the en-
clave exception handler in turn uses to determine the stack address
and the data to later use. This gives the attacker the capability of
corrupting the stack content of the enclave (Figure 5b). By carefully
crafting the register values, the attacker can exploit this capability
to corrupt an enclave stack location that the enclave will later use
to load a return address (we call this location an anchor), thereby
hijacking the control flow of the enclave (Figure 5c). Figure 6 de-
scribes the detailed steps SmashEx follows, which we will discuss
in Sections 4, 5, and 6.
3.4 Difference to Prior Attacks
SmashEx is the first attack that demonstrates the exception han-
dling attack vector in Intel SGX. that SmashEx is conceptually close
to known prior attacks on enclave memory safety, synchroniza-
tion, and scheduling. However, SmashEx is significantly different.
Briefly, previous attacks assume much more than SmashEx:
‚Ä¢ AsyncShock [2] assumes that the synchronization logic (e.g.,
using mutexes) between two or more enclave threads is
buggy. In contrast, the vulnerability SmashEx exploits arises
due to atomicity violation in the enclave-OS interaction, to
which thread synchronization is irrelevant.
1In SGX, the runtime can disable all in-enclave exception handling by setting the
TCS.NSSA enclave configuration to one.
5
Figure 6: SmashEx Overview. The attacker directly controls
the untrusted software, including the OS and the host pro-
cess. Data that the attacker can control is in red.
‚Ä¢ Game of Threads [61] shows that by manipulating thread
scheduling, a malicious OS is able to stably exploit faulty
thread synchronization logic in enclave applications. For
example, for machine learning training workloads without
frequent thread synchronization, malicious scheduling can
degrade accuracy and bias the model.
‚Ä¢ The Guard‚Äôs Dilemma [31] assumes the existence of memory
vulnerabilities in the enclave application and uses them to
demonstrate code-reuse attacks such as ROP. In SmashEx,
we do not assume any such pre-existing memory errors.
4 ARBITRARY WRITE CAPABILITY
The SmashEx attack starts with enabling the attacker to perform an
arbitrary write to an attacker-specified anchor location (Figure 5a).
Step 1: Preparing Malicious Register Values. The attacker loads
malicious values into registers right before EENTER to ensure that
the attacker-specified register state is preserved.
Step 2: Injecting an Exception at the Precise Time/Location.
SmashEx requires that the AEX event occurs shortly after enclave
entry, before the enclave cleans up the register state. There are at
least two ways to achieve this:
Trusted enclavexor%xdx,%xdx...Untrusted softwareEENTERAEXCPUregistersSSA regionSet page permissionsto non-executableReturn froman OCALLKernel interrupthandlerSaveEntry point code pageTrusted enclaveUntrusted softwareAEXRegistersRegistersSSA regionStack MExceptionhandlingEENTERTrusted enclavecall ocallmov %rax,%rdigadget 1...Originalreturn addr:Target addr:Stack M...arg2arg1ret_addr...Trusted enclaveUntrusted softwareEENTERAEXSSA regionReturn froman OCALLKernel interrupthandlerRSPR8‚Ä¶Craft regsSet permsRSPR8‚Ä¶User spacehandlerEENTERenclavestack123Signal4EEXITmov $arg 2,%rsimov $arg 1,%rdiret (ret addr)...ERESUME6Restore in OCALL return logic5SaveCopyEnclave entry point:Exception handler:xor%xdx,%xdx...sp=ssa.rsp;info=(info*)sp;info.r8=ssa.r8;...xor%xdx,%xdx...Session 3B: Operating Systems CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea783(a) Page faults. We identify the page that contains the first enclave
instruction and pre-set its access permissions to be non-executable.
The malicious OS is still in charge of the enclave page permissions
and can trivially do this. In particular, the OS knows the exact page
address because it has to set up the enclave memory layout before
launching an enclave. Note that this address cannot be hidden from
the attacker (e.g., via randomization [31, 52]) because the hardware
has to know the exact entry point for the enclave. As described
in Section 3, we use this mechanism to trigger a page fault when
the enclave attempts to execute the first enclave instruction. When
the page fault is triggered, the hardware delivers it to the attacker-
controlled OS, which then forwards it to the enclave for handling.
(b) Timer interrupts. We can also interrupt the enclave execution
via the APIC timer. Prior work [60] has shown that the OS can
invoke the APIC timer interface to precisely interrupt the enclave
execution at any desired point. The remaining challenge is to inject
the timer interrupt at the exact moment. Before returning from an
ocall, we set the APIC timer to the one-shot mode. We set the
timer count such that the interrupt will occur immediately after
EENTER. In order to stably achieve this, we execute the enclave
in debug mode and tune the timer count to interrupt at the right
time. In our experiments, when we reuse this same timer count in
production mode, we can reliably inject the interrupt.
Step 3: Re-entering the Enclave for Exception Handling. Af-
ter the untrusted OS gains control because of the AEX, it re-enters
the enclave (via EENTER) for handling the exception. This time, the
attacker allows the enclave to progress after the enclave entry by
reverting the access protection to the original permissions, if page
faults are used in Step 2.
Step 4: Tricking the Enclave into Using Malicious Values. To
handle the AEX, the enclave first needs to prepare the enclave stack
for the in-enclave handler by loading the rsp register from the SSA
(see Section 2). It then copies the SSA content onto this stack for
the handler to use as function arguments. Since the attacker can
control the values of rsp and the other saved registers in the SSA,
it has gained the capability of tricking the enclave into writing an
attacker-specified value to an attacker-specified stack location. To
hijack the enclave control flow, the attacker uses this capability
to control an anchor, i.e., a location later used by the enclave to
retrieve a return address. More specifically, the attacker can choose
the stack location that stores the return address for the current
ocall as the anchor.
Achieved Capability. Using the above steps, the attacker has the
capability to write an arbitrary value to a particular location. This
write capability is the first part for scaffolding a control-flow hi-
jacking attack. In Sections 5 and 6, we explain how to leverage this
capability to effect powerful end-to-end attacks.
5 SETTING UP THE STACK
So far, the attack has only corrupted one anchor location on the
stack. Our final goal is to demonstrate a powerful ROP attack [50].
To this end, our next step is to escalate the attacker‚Äôs capability to:
‚Ä¢ Point the stack pointer to an attacker-controlled region;