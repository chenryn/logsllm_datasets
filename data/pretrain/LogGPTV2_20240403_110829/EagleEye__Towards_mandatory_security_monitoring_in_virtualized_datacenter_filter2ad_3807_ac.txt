level  representations  RX  and  RY  can  both  be  acquired  from 
introspection at t=0. Now at t=1, neither of the representations 
can be acquired as the introspectable states are not consistent. 
Stealthy hook invocation
Guest
Monitor
Thread(s)
Thread#1
Guest
Thread#2
Guest
Thread#1
Monitor check completes
Guest
Thread#2
Monitor
Thread(s)
Guest
Thread#1
Guest
Thread#2
Monitor
Thread(s)
Idle Loop
(a) Suspend a single vcpu
(b) Suspend all vcpus
(c) In-VM Idle Loop
Figure 8. Suspending guest thread 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
However,  the  changes  to  the  representations  from  t=0  to  t=1 
correspond  to  the  system  events  e1,  e2,  and  e3.  In  this  case, 
replicas  of  RX  and  RY  will  be  maintained  in  the  EagleEye 
daemon.  EagleEye  will  intercept  the  corresponding  system 
events (i.e. e1, e2, and e3) and apply the changes to the replicas. 
The  replicas  can  provide  a  security  monitor  with  a  consistent 
and  current  view  of  RX  and  RY  even  when  the  introspectable 
states  are  not  consistent  yet.  A  concrete  application  of  the 
approach is presented in Sec. IV.D. 
F.  In-VM Idle Loop 
When  a  stealthy  hook  is  invoked,  the  execution  of  the 
corresponding guest thread will be diverted into the hypervisor. 
The  guest  thread  will  then  be  blocked  till  the  event  handler 
acknowledges the invocation. This allows the detection engines 
to be triggered for security checks in a synchronous manner as 
shown in Figure 8(a). Since the use of PV driver is not allowed, 
we  cannot  leverage  existing  guest  kernel  synchronization 
mechanism to block the guest thread. Instead, the guest thread 
can be blocked by removing the corresponding VCPU from the 
hypervisor  scheduler  runqueue  (thread  #2  as  in  Figure  8(a)). 
However,  suspending  a  VCPU  from  being  scheduled  for  a 
prolonged  period  is  problematic  for  a  SMP  guest.  At  the 
the  scheduling  fairness  and 
minimum, 
this  may  break 
responsiveness  guarantee  of 
the  guest  scheduler.  More 
seriously,  the  guest  may  consider  the  suspended  VCPU  as 
faulty.  For  instance,  we  found  that  Windows  guest  (i.e. 
Windows  Server  2008)  will  react  drastically  with  a  BSOD 
when EagleEye selectively suspends the VCPUs. On the other 
hand,  Linux  (i.e.  Fedora  Core  14  x86_64  with  2.6  kernel) 
seems to be insensitive to the selective suspension of VCPUs.  
 As a compromise, when a guest thread needs to be blocked 
for a prolonged period pending check by the security monitor, 
all the VCPUs of the guest VM have to be suspended (Figure 
8(b)). This prevents the guest OS from perceiving a VCPU as 
faulty. However, as none of the guest threads will be running 
during  the  period,  a  noticeable  performance  drop  is  expected 
especially if the guest system is under heavy workload. Besides, 
suspending  VCPUs  may  disturb 
interrupt-based  guest 
timekeeping [21]. 
A third approach is not to suspend any VCPU of the guest 
VM. Instead of  blocking the guest  thread,  we  can just  let the 
guest thread spin in a loop till the detection engines complete 
the  check  and  the  event  handler  acknowledges  the  hook 
invocation as shown in Figure 8 (c). This allows all VCPUs to 
run  continuously  and  also  gives  the  guest  OS  scheduler  the 
chance to schedule other guest threads onto the VCPU that is 
running the loop.  
A fixed number of loops are pre-allocated in a special driver 
that  has  to  be  pre-installed  in  the  guest  system.  Each  loop  is 
used  to  spin  a  guest  thread.  If  all  the  loops  are  occupied, 
EagleEye  will  fall  back  to  the  approach  of  suspending  all 
VCPUs.   
A  snippet  of  the  loop  code  is  shown  in  Figure  9.  The 
entrance to the loop locates at offset 0x5, it first determines the 
memory  address  of  a  1  byte  variable  used  for  signaling  the 
termination of the loop. The memory address will be passed via 
the  RAX  register.  The  code  from  offset  0x17  to  offset  0x25 
then keeps checking the variable value and will loop until the 
value  is  set  to  a  non-zero  value  by  the  EagleEye  hypervisor 
module.  Note  that  the  In-VM  idle  loop  is  optional.  The 
presence  of  the  idle  loop  only  improves  performance.  The 
security monitor functionality of EagleEye is not affected in the 
absence of the idle loop. 
00  488B0424          mov rax,[rsp]
04  C3                ret
Loop_Start:
05  9C                pushfq
06  50                push rax
07  51                push rcx
08  E8F3FFFFFF        call dword 0x0
0D  482500F0FFFF      and rax,0xfffff000
13  4883C000          add rax,byte +0x0
17  488B08            mov rcx,[rax]
1A  4881E1FF000000    and rcx,0xff
21  4883F900          cmp rcx,byte +0x0
25  74F0              jz 0x17
27  59                pop rcx
28  58                pop rax
29  9D                popfq
2A  0FA2              cpuid
Figure 9. In-VM Idle Loop 
IMPLEMENTATION 
IV. 
To  show  how  security  monitoring  in  EagleEye  works,  we 
build a prototype system that supports one of the most widely 
employed security monitoring application in today’s computing 
environment – an on-access malware detection system for VDC 
environment.  EagleEye can potentially support other kinds of 
security  monitoring  applications  such  as  network  intrusion 
detection,  system  integrity  checking,  and  many  others.  The 
choice  is  mainly  due  to  its  popularity,  so  the  discussion  can 
focus  more  on  the  challenges  pertaining  to  the  EagleEye 
approach.  
The  prototype  is  implemented  on  Xen  hypervisor  4.0.1 
(x86_64  architecture).  The  host  OS  is  Fedora  Core  14  with 
2.6.32  kernel.  The  extension  to  Xen  includes  2,312  lines  of 
code  in  the  hypervisor  and 1,330  lines of code  in  the  QEMU 
device  model.  The  current  implementation  supports  Windows 
guests. Support for other types of guest systems require setting 
up  the  appropriate  system  call  interception  hooks  (Sec.  IV.C) 
and having the corresponding parsers for the memory and disk 
introspection results as different types of guest systems may use 
different memory layouts and file systems. 
3. (EED) 
Allocate 
Write Buffer
VMENTER
Open for 
write?
2. (EEH) File 
Open Syscall 
Intercepted
Open for 
read?
VMEXIT
1. (Guest) 
Invoke File 
Open Syscall
4. (Guest) 
Write to the 
opened file
VMENTER
VMEXIT
5. (EEH) 
Update 
Write Buffer
6. (Guest) 
Invoke File 
Close Syscall
VMEXIT
7. (EEH) File 
Close Syscall 
Intercepted
Malware not 
found / VMENTER
11. (EED) 
Notify ClamAV 
to scan the file
12. (Guest) 
Complete 
file open
9. (EED/EEH) 
Quarantine 
the file
Malware 
found
8. (EED) Notify 
ClamAV to 
scan the file
Malware found
VMENTER
13. (EED/EEH) 
Quarantine the 
file
VMENTER
14. (Guest) File 
Open Failed
10. (Guest) 
Complete 
file close
Malware not 
found / VMENTER
Figure 10. Online Malware Detection Process Flow 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
A.  Security Monitoring Process Flow: On-Access Malware 
Detection 
The  process  flow  of  on-access  malware  detection  is 
presented  in  Figure  10.  The  idea  is  to  monitor  file  access 
activities inside a guest VM and check if the file to be accessed 
matches the signature of a known malware (the prototype uses 
ClamAV  [22]  as  the  signature  matching  engine).  A  key 
difference between EagleEye and existing anti-virus scanners is 
that  all  the  above  operations  have  to  be  carried  out  without 
guest components or any hooking mechanism [23, 24] provided 
by the guest OS.  
The process flow in Figure 10 starts at Step 1, where a file 
open  system  call  is  invoked  inside  the  guest  VM  and  is 
immediately  intercepted  by  the  EagleEye  hypervisor  module 
(E2H)  at  Step  2  through  the  stealthy  hook  mechanism  (Sec. 
IV.C). If the file is opened with write access, subsequent writes 
to the file will be trapped by E2H as well. At Step 4~5, E2H will 
copy  the  data  written  to  the  file  to  the  corresponding  write 
buffer  entry  maintained  by  the  EagleEye  daemon  (E2D).  The 
write  buffer  is  used  for  dealing  with  inconsistencies  in  disk 
introspection results, which will be discussed in Sec. IV.D. For 
now, one can just imagine that the write buffer is filled with the 
data that has been written to a file. At Step 6~8, right after the 
file  is  about  to  be  closed,  EagleEye  will  invoke  ClamAV  to 
scan the file. Upon completion of the scan, the guest system can 
proceed  with  the  file  closing  operation  if  the  file  is  clean. 
Otherwise, if the file is a malware, EagleEye will quarantine it. 
The process flow of file open for read follows from Step 2 
to  Step 11,  where  ClamAV  is  invoked  to  scan  the  file  on the 
disk  through  disk  introspection.  If  the  opened  file  was  just 
created moments ago, chances are the content of the file is still 
available in the write buffer and there will be no need for the 
disk  introspection.  If  an  existing  file  is  opened  for  both  read 
and write, possibly by different processes, EagleEye will merge 
the  disk  file  content  into  the  write  buffer  to  ensure  that  the 
content inspected by ClamAV is consistent and current. 
B.  Intercepting I/O and Memory events 
through 
the  device  model 
In  the  current  prototype,  we  assume  that  a  VM  uses  the 
storage  and  network  devices  emulated  by  the  QEMU  device 
model  on  Xen.  We  made  modification  to  the  QEMU  device 
model to allow the interception of VM disk access at the block 
level. Similarly, the network traffic of a VM can be monitored 
through the QEMU device model. Intercepting VM device I/O 
events 
intrinsically 
transparent and requires no modification to the guest systems.  
EagleEye  can  intercept  guest  memory  access  at  the  page 
granularity  through  manipulating  the  permission  bits  in  the 
extended  page  tables  (EPTs)  on  Intel  platform  or  the  nested 
page  tables  (NPTs)  on  AMD  platform.  The  mechanism  is 
backed  by  hardware  and 
incurs  negligible  performance 
overhead.  The  interception  is  also  intrinsically  transparent 
requires no modification to the guest systems. 
C.  Intercepting System call 
layer 
is 
System  call  interception  allows  a  security  monitor  to 
mediate  critical  guest  system  operations.  In  the  current 
prototype, we intercept both the entry and exit points of guest 
system calls. The interception at the exit of a system call is used 
Interception 
at entry
Interception 
at exit
swapgs
mov rax,[rbp-0x50]
mov rcx,[rbp-0x48]
mov rdx,[rbp-0x40]
mov r8,[rbp-0x38]
mov r9,[rbp-0x30]
xchg ax,ax
sti
mov [rbx+0x1e0],rcx
mov [rbx+0x1f8],eax
mov [rbx+0x1d8],rsp
mov edi,eax
shr edi,0x7
000  0F01F8            
003  654889242510000000  mov [gs:0x10],rsp
00C  65488B2425A8010000  mov rsp,[gs:0x1a8]
.............
0FA  488B45B0          
0FE  488B4DB8          
102  488B55C0          
106  4C8B45C8          
10A  4C8B4DD0          
10E  6690              
110  FB                
111  48898BE0010000    
118  8983F8010000      
11E  4889A3D8010000    
125  8BF8              
127  C1EF07            
.....................
2CA  410A8BF0010000    
2D1  410B8BC4010000    
2D8  0F85CE010000      
2DE  FA                
2DF  65488B0C2588010000  mov rcx,[gs:0x188]
2E8  80797A00     
2EC  7457           
or cl,[r11+0x1f0]
or ecx,[r11+0x1c4]
jnz dword 0x4ac
cli
cmp byte [rcx+0x7a],0x0
jz 0x345
Figure 11. System call interception in EagleEye 
to  acquire  the  return  values of  system  calls,  which  may  carry 
information needed for on-access virus scanning such as the file 
handle to a  file opened by  the NtCreateFile system  call. 
The  return  values  are  also  used  by  many  system  calls  to 
indicate  if  the  requested  operations  were  successful.  For 
instance,  we  rely  on  the  return  values  of  system  calls  in  the 
high-level  representation  replication  (Sec.  IV.D)  to  detect 
successful file system update events so that their effects can be 
applied to the replicas correspondingly. 
The  interception  of  system  call  is  implemented  by  the 
stealthy  hook  mechanism.  Intuitively,  the  interception  at  the 
entry point of a system call can be implemented by a stealthy 
hook at the first instruction of the system call handler (i.e. the 
SWAPGS instruction at offset 0x000 in Figure 11). However, it 
would not hurt to move the hook a little bit down below as long 
as  it  still  locates  before  the  dispatching  of  system  call.  The 
reason  why  we  move  it  beyond  the STI  instruction  at  offset 
0x110  is  for  the  optional  In-VM  idle  loop  (Sec.  III.F)  to  be 
interruptible. This allows  the guest  OS to be able to  schedule 
other  threads  onto  the  VCPU  where  the  calling  thread  is 
blocked  by  EagleEye  pending  security  check.  For  the  same 
reason,  instead  of  placing  a  hook  right  on  the  SYSRET 
instruction at the end for intercepting system call exit, the hook 
is  placed  at  the  location  before  the CLI  instruction  (at  offset 
0x2D8 in Figure 11). 
D.  Write Buffer for Consistent Filesystem Introspection 
In  EagleEye,  we  apply 
the  high-level  representation 
replication  for  the  guest  file  system.  Operating  systems 
nowadays  commonly  employ  disk  caching  to  buffer  disk 
accesses. Data written to a file may not be immediately flushed 
to  the  disk  for  performance  reasons.  On  the  other  hand,  the 
effect of the writes has to be immediately reflected on the guest 
file  system  and  be  seen  by  the  processes  within  the  guest. 
Security  monitoring  cannot  assume  data  from  VM  disk 
introspection will reflect the current file system states. On the 
other hand, it is also quite difficult to use memory introspection 
on the in-memory disk cache due to the complexity and opacity 
(assuming closed-source guest kernel) of the mechanism.  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:57:09 UTC from IEEE Xplore.  Restrictions apply. 
Dom 0
Path
fd(s)
Buffer
1
2
3
C:\a.exe
{hA}
C:\b.dll
{hB}
C:\c.sys