探寻Java⽂件上传流量层⾯waf绕过姿势系
列⼆
探寻Java⽂件上传流量层⾯waf绕过姿势系列⼆
写在前⾯
正⽂
tomcat
灵活的parseQuotedToken
变形之双写filename*与filename
变形之编码误⽤
Spring4
猜猜我在第⼏层
Spring5
"双写"绕过
写在前⾯
这篇和上篇不同的是上篇更多关注于RFC⽂档规范的部分，⽽这篇更关注于如何从代码层⾯
上的利⽤来绕过，具体内容请接着往下看
正⽂
tomcat
灵活的parseQuotedToken  
继续看看这个解析value的函数，它有两个终⽌条件，⼀个是⾛到最后⼀个字符，另⼀个是遇
到 ;
如果我们能灵活控制终⽌条件，那么waf引擎在此基础上还能不能继续准确识别呢？
如果你理解了上⾯的代码你就能构造出下⾯的例⼦
private String parseQuotedToken(final char[] terminators) {
  char ch;
  i1 = pos;
  i2 = pos;
  boolean quoted = false;
  boolean charEscaped = false;
  while (hasChar()) {
    ch = chars[pos];
    if (!quoted && isOneOf(ch, terminators)) {
      break;
    }
    if (!charEscaped && ch == '"') {
      quoted = !quoted;
    }
    charEscaped = (!charEscaped && ch == '\\');
    i2++;
    pos++;
  }
  return getToken(true);
}
同时我们知道jsp如果带 " 符号也是可以访问到的，因此我们还可以构造出这样的例⼦
还能更复杂点么，当然可以的结合这⾥的 \ ，以及上篇⽂章当中提到的
org.apache.tomcat.util.http.parser.HttpParser#unquote 中对出现 \ 后参数的转
化操作，这时候如果waf检测引擎当中是以最近 "" 作为⼀对闭合的匹配，那么waf检测引擎可
能会认为这⾥上传的⽂件名是 y4tacker.txt\ ,从⽽放⾏
变形之双写filename*与filename  
这个场景相对简单
⾸先tomcat的 org.apache.catalina.core.ApplicationPart#getSubmittedFileName
的场景下，⽂件上传解析header的过程当中，存在while循环会不断往后读取，最终会将
key/value以Haspmap的形式保存，那么如果我们写多个那么就会对其覆盖，在这个场景下绕过
waf引擎没有设计完善在同时出现两个filename的时候到底取第⼀个还是第⼆个还是都处理，
这些差异性也可能导致出现⼀些新的场景
同时这⾥下⾯⼀⽅⾯会删除最后⼀个 *
另⼀⽅⾯如果 lowerCaseNames 为 true ，那么参数名还会转为⼩写，恰好这⾥确实设置了
这⼀点
因此综合起来可以写出这样的payload，当然结合上篇还可以变得更多变这⾥不再讨论
变形之编码误⽤  
假设这样⼀个场景，waf同时⽀持多个语⾔，也升级到了新版本会解析 filename* ，假设go
当中有个编码叫y4，⽽java当中没有，waf为了效率将两个混合处理，这样会导致什么问题
呢？
如果没有,这⾥报错后会保持原来的值，因此我认为这也可以作为⼀种绕过思路？
Spring4
这⾥我⽤了 springboot1.5.20RELEASE + springframework4.3.23 ，这⾥不去研究⼩版
本间是否有差异只看看⼤版本了
猜猜我在第⼏层  
说个前提这⾥只针对单⽂件上传的情况，虽然这⾥的代码逻辑⼀眼看出不能有上⾯那种存在
双写的问题，但是这⾥又有个更有趣的现象
try {
  paramValue = RFC2231Utility.hasEncodedValue(paramName) ? 
RFC2231Utility.decodeText(paramValue)
    : MimeUtility.decodeText(paramValue);
} catch (final UnsupportedEncodingException e) {
  // let's keep the original value in this case
}
我们来看看这个 extractFilename 函数⾥⾯到底有啥骚操作吧，这⾥靠函数 indexOf 去定
位key(filename=/filename*=)再做截取操作
    private String extractFilename(String contentDisposition, String key) 
{
        if (contentDisposition == null) {
            return null;
        } else {
            int startIndex = contentDisposition.indexOf(key);
            if (startIndex == -1) {
                return null;
            } else {
                String filename = contentDisposition.substring(startIndex 
+ key.length());
                int endIndex;
                if (filename.startsWith("\"")) {
                    endIndex = filename.indexOf("\"", 1);
                    if (endIndex != -1) {
                        return filename.substring(1, endIndex);
                    }
                } else {
这时候你的反应应该会和我⼀样，套中套之waf你猜猜我是谁
当然我们也可以不要双引号，让waf哭去吧
Spring5
同样是 springboot2.6.4 + springframework5.3 ，这⾥不去研究⼩版本间是否有差异只
看看⼤版本了
"双写"绕过  
来看看核⼼部分
                    endIndex = filename.indexOf(";");
                    if (endIndex != -1) {
                        return filename.substring(0, endIndex);
                    }
                }
                return filename;
            }
        }
    }
    public static ContentDisposition parse(String contentDisposition) {
        List parts = tokenize(contentDisposition);
        String type = (String)parts.get(0);
        String name = null;
        String filename = null;
        Charset charset = null;
        Long size = null;
        ZonedDateTime creationDate = null;
        ZonedDateTime modificationDate = null;
        ZonedDateTime readDate = null;
        for(int i = 1; i < parts.size(); ++i) {
            String part = (String)parts.get(i);
            int eqIndex = part.indexOf(61);
            if (eqIndex == -1) {
                throw new IllegalArgumentException("Invalid content 
disposition format");
            }
            String attribute = part.substring(0, eqIndex);
            String value = part.startsWith("\"", eqIndex + 1) && 
part.endsWith("\"") ? part.substring(eqIndex + 2, part.length() - 1) : 
part.substring(eqIndex + 1);
            if (attribute.equals("name")) {
                name = value;
            } else if (!attribute.equals("filename*")) {
                //限制了如果为null才能赋值
                if (attribute.equals("filename") && filename == null) {
                    if (value.startsWith("=?")) {
                        Matcher matcher = 
BASE64_ENCODED_PATTERN.matcher(value);
                        if (matcher.find()) {
                            String match1 = matcher.group(1);
                            String match2 = matcher.group(2);
                            filename = new 
String(Base64.getDecoder().decode(match2), Charset.forName(match1));
                        } else {
                            filename = value;
                        }
                    } else {
                        filename = value;
                    }
                } else if (attribute.equals("size")) {
                    size = Long.parseLong(value);
                } else if (attribute.equals("creation-date")) {
                    try {
                        creationDate = ZonedDateTime.parse(value, 
DateTimeFormatter.RFC_1123_DATE_TIME);
                    } catch (DateTimeParseException var20) {
                    }
                } else if (attribute.equals("modification-date")) {
                    try {
                        modificationDate = ZonedDateTime.parse(value, 
DateTimeFormatter.RFC_1123_DATE_TIME);
                    } catch (DateTimeParseException var19) {
                    }
                } else if (attribute.equals("read-date")) {
                    try {
                        readDate = ZonedDateTime.parse(value, 
DateTimeFormatter.RFC_1123_DATE_TIME);
                    } catch (DateTimeParseException var18) {
                    }
                }
            } else {
                int idx1 = value.indexOf(39);
                int idx2 = value.indexOf(39, idx1 + 1);
                if (idx1 != -1 && idx2 != -1) {
                    charset = Charset.forName(value.substring(0, 
idx1).trim());
                    Assert.isTrue(StandardCharsets.UTF_8.equals(charset) 
|| StandardCharsets.ISO_8859_1.equals(charset), "Charset should be UTF-8 
or ISO-8859-1");
                    filename = decodeFilename(value.substring(idx2 + 1), 
charset);
                } else {
                    filename = decodeFilename(value, 
StandardCharsets.US_ASCII);
                }
            }
        }
spring5当中又和spring4逻辑有区别，导致我们又可以"双写"绕过(⾄于为什么我要打引号可以
看看我代码中的注释)，因此如果我们先传 filename=xxx 再传 filename*=xxx ，由于没有
前⾯提到的 filename == null 的判断，造成可以覆盖 filename 的值
同样我们全⽤ filename* 也可以实现双写绕过，和上⾯⼀个道理
但由于这⾥indexof的条件变成了"="号，⽽不像spring4那样的 filename=/filename=* ，毕
竟indexof默认取第⼀个，造成不能像spring4那样做嵌套操作
        return new ContentDisposition(type, name, filename, charset, size, 
creationDate, modificationDate, readDate);
    }