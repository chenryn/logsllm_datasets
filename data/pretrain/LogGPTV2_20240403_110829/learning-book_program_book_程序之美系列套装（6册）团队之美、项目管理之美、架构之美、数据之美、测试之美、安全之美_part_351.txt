### 美的标准及其在软件方法中的应用

尽管美的标准在不同文化中各具特色，但自然之美的一些基础要素却始终存在。其中一个常见的要素是比例，例如黄金比例1:1.618常被用来评判人脸的美丽程度，在自然界中也有许多类似的应用（Huntley, 1970）。通常来说，那些匀称、统一、平衡、连贯和协调的事物总是具有普遍吸引力。

当和谐的状态被打破时，人们会自然而然地倾向于恢复秩序。狄德罗效应（Diderot Effect）（McCracken, 1988）描述了这种因引入不匹配元素而引发的一系列连锁反应。例如，法国哲学家丹尼斯·狄德罗收到一件优雅的红色睡袍后，发现它与他简陋且杂乱的书房极不协调，因此不得不重新装修整个书房以达到整体的和谐。

#### 美的标准在软件方法中的应用

关于美的两个观点——比例和平衡，同样可以应用于软件开发方法中。软件方法包括一系列活动、实践、角色、工具和工作成果。一个优美的软件方法需要综合考虑项目风险、复杂度和团队构成等因素，并将各个成分按照其顺序、进度和大小进行合理分配（Cockburn, 2002）。

软件方法的各个组成部分相互依赖，改变其中一个部分就会依次影响其他部分。项目氛围（Andrea等, 2002）可以帮助我们察觉何时实践出现脱节。一个优美的软件方法会紧跟这些连锁反应，直到所有相互依赖的实践达到平衡为止。

### 敏捷方法：新的比例与平衡

极限编程（eXtreme Programming, XP）是一种敏捷方法，其创始人认为，如果一件事情值得做，就应该尽早并全力以赴地完成（Beck, 2000）。XP虽然包含一些标准实践，但所有实践都发生了变化。促使XP发生一系列变革的关键因素有两个：小型发布和测试驱动开发（TDD）。

#### 小型发布

小型发布是指向用户交付连续的、经过测试的版本，其目的是最大化投资回报并实现对需求的实时响应（Jefries, 2002）。小型发布决定了敏捷软件开发的基本比例关系。所有活动——需求分析、设计、开发、集成、测试、评审——都在一个短周期内（如两周）依次执行。人员之间的物理距离和角色之间的概念距离必须消失，以实现实时、持续、有效的交互。开发实践被严格控制，以生产出稳定和可塑的软件产品。

小型发布要求在整个软件开发过程中重建一种平衡，其中包括面对面交流、同地团队、现场客户、自动化的TDD、持续集成、重构和集体所有制等关键要素。

#### 测试驱动开发（TDD）

本章剩余部分特别关注自动化的测试驱动开发技术（TDD），将其视为在一个小发行版内频繁传递连续、经过测试的版本的措施。质量是实现商业价值的前提和基础。表14-1简要说明了TDD的红-绿-重构循环。

**表14-1：简化TDD过程（红-绿-重构）**

| 步骤 | 活动 |
| --- | --- |
| **红** | 1. 创建实例<br>2. 执行实例<br>3. 编写单元测试<br>4. 执行单元测试 |
| **绿** | 5. 编写系统代码<br>6. 执行单元测试<br>7. 执行实例 |
| **重构** | 8. 重构系统代码<br>9. 执行实例和单元测试 |

- **红**：通过若干个自动功能测试（实例）定义完整的用户场景。此时，实例和单元测试都会失败。
- **绿**：开发者编写使单元测试通过的系统代码。测试频繁执行以提供项目进度反馈。一旦系统代码编写完成，相应的单元测试就可以通过。
- **重构**：在所有测试通过的情况下，可以在不改变公共接口或行为的基础上重构系统代码。每次重构后都需要进行测试以确保其仍然是“绿”的。

为了获得持久的成功，我们必须同时引入TDD的若干相互依赖的实践。本章关注TDD相关的一种平衡方法，包括持久可信的需求、可测试的设计、强有力的工具和新的团队合作模式。

### 实例与测试

TDD这个名字有时会引起误解，因为它容易让人将需求说明阶段的活动混同为测试活动。功能需求说明与细致的测试脚本有些相似，这显然是难以理解和获取的。因此，人们提出了像“实例”、“行为期望”（Hendrickson, 2009）这样的术语来替代，以便更加关注于需求说明而不是测试。

在2008年敏捷联盟功能测试工具程序工作组的一次开放会议上，一个从业者小组提出了“TDD三角”（图14-1）。

**图14-1 TDD三角**

- **需求**：说明系统预期的工作方式（即特征或业务角色）。
- **说明**：明确系统在特定条件下如何工作的需求。
- **确认**：在实际系统上执行实例以确认其满足需求。

### 易读的实例

对于实例来说，能够被各种人员清晰理解至关重要：

- **非技术的行业专家**：负责验证实例说明的正确性和完整性。
- **技术团队**：使用实例驱动设计和开发工作。工程师阅读实例并将其自动化；程序员使用实例编写正确的系统代码；技术支持借助实例修正和改进系统。

一个易读的实例应具备以下特性（Andrea, 2005）：
- 目的明确：说明“做什么”，而非“怎样做”。
- 表述清晰：仅列出必不可少的内容。
- 释义精准：两个人能从中获得同样的理解。
- 自成一体：具有独立性，不需要其他实例解释。
- 简洁高效：用最少的描述说明问题。
- 易于查找：有组织和可搜索。

**图14-2** 中，名为“测试脚本”（TestScript）的部分不是我们希望得到的需求说明：过多的用户交互细节使得本来要表达的业务逻辑模糊不清。

**图14-2 示例**

1. **测试脚本**
   - 从目录维护页开始
   - 添加片名（星球大战，科幻片）
   - 页面标题是：音像店管理——目录维护
   - 点击“添加新片名”按钮
   - 进入到新页：音像店管理——添加新片名
   - 在“片名文本框里键入“星球大战”
   - 在目录选择列表中选择“科幻片”
   - 点击“保存”按钮
   - 回到上一页：音像店管理——目录维护

2. **基于领域的语言**
   - 目录包含光碟商店里目前所有销售或出租的电影名列表。
   - 成功实例：假设电影名“星球大战”目前不在目录中，则当我们添加它后，结果是“星球大战”出现在目录中。
   - 失败实例：假设电影名“星球大战”已经存在于目录中，则当我们添加它时，结果是系统提示“重复电影名”的错误。

通过这种方式，我们可以更清晰地表达需求，从而提高开发效率和质量。