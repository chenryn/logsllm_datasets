指导下发展了各自定性和定量的美的标准。然而在这种多样性中依
然存在着自然之美一贯的基础要素。一个常见的要素就是比例，
1:1.618（也就是黄金比例）常被用来评判人脸是否美丽，在自然界
中类似的例子更是比比皆是（Huntley1970）。一般来说那些匀称、
统一、平衡、连贯和协调的东西总是具有普遍的吸引力。
当和谐的现状被扰乱时人们总是自然而然地倾向于重建秩序。狄德
罗效应（DiderotEffect）（McCracken1988）正是描述了这样一种因
引人一个不相匹配的部分而导致若十改变的多米诺骨牌现象。场景
2002
---
## Page 2004
因法国哲学家丹尼斯狄德罗收到一件新睡袍而起，这件优雅的红色
睡袍与他简陋、杂乱的书房极不协调，以致他不得不将书房完全装
修了一次才使得那儿看起来能与睡袍的优雅登对。
关于美的这两个观点一一比例和平衡，能被应用于软件方法之中。
软件方法是活动、实践、角色、工具和工作成果等一系列元素的集
合，而美的软件方法会综合考虑诸如项目风险、复杂程度和团队构
成等因素，然后将各个成分按照它们的顺序、进度和大小统一分配
(Cockburn 2002）。
软件方法的各个成分相互依赖。改变其中一个就会次第影响其他；
项目气息（Andrea等2002）提醒我们实践何时出现了脱节。美的软
件方法会紧跟气息的连锁反应直到这些相互依赖的实践达到平衡为
止。
敏捷：新的比例与平衡
极限编程（eXtremeProgramming,XP）敏捷方法的创始者们相信如果
一件事情值得去做，就应该及早并且尽心尽力地完成它（Beck
2000）。表面上看XP似曾相识，因为它包含着实践的标准集合。实
际上所有实践都发生了改变。促使XP发生一系列改变的关键因素有
两个：小型发布和测试驱动开发。
XP的小型发布是指向用户交付连续的、经过测试的版本。它有两个
目的：一是最大化投资回报；二是用不断的产品修正实现实时响应
（Jefries2002）。小型发布决定了敏捷软件开发的基本比例关系。
所有活动一一需求分析、设计、开发、集成、测试、评审，不断地
在一个很短的、确定大小的周期（如两周）内顺序执行。人员之间
的物理距离和角色之间的概念距离都必须消失以实现实时、持续、
有效的交互。开发实践被高度重视并严格控制以便生产出稳定和可
塑的软件产品。
小型发布要求我们在整个软件开发过程内重建一种平衡，其中相互
依赖的要点包括：场景、面对面的交流、同地团队、现场客户、自
动的TDD、持续的集成、重构和集体所有制等。
测试驱动开发
2003
---
## Page 2005
本章剩余的部分特别关注自动的测试驱动开发技术（TDD），并将
其视为在一个小发行版内频繁地传递连续的、经过测试的版本的措
施。质量是实现商业价值的前提和基础。表14-1简要说明了TDD的
红-绿-重构循环。[1]
表14-1：精简TDD过程（红-绿-重构）
设计者
开发者
红
1.创建实例
2.执行实例
3.执行实例
4.创建单元测试
5.执行单元测试
绿
6.编写系统代码
7.执行单元测试
8.执行实例
9.执行实例
重构
10.重构系统代码
11.执行实例和单元测试
红（第1~5步）
由若干个自动功能测试（实例）定义了完整的用户场景。“红"是指
实例因对应的系统代码尚未完成而执行失败。编写单元测试以驱动
详细设计和代码实现，此时单元测试同样会失败。
绿（第6~9步）
开发者致力于编写可以令单元测试通过的系统代码。在这一阶段内
测试被频繁执行以提供关于项目进度的反馈。“绿"是指只要系统代
码编写完成，相应的单元测试就可以通过。实例通过当且仅当所有
有关的单元测试通过。此时亦可引入另一个实例或者重构代码来解
决技术问题。
重构（第10~11步）
2004
---
## Page 2006
在任何稳定点上，例如当所有测试都通过时，系统代码可以在不改
变公共接口或行为的基础上重构。每个独立的重构步骤之后都会进
行测试以确保其仍然是“绿"的。
在开发工作之前首先应该通过重排处理步骤以获取测试规格说明
书，这能带来显著的短期和长期效益。然而如果单独引入这一思
想，则开发过程的很多其他部分都将失去平衡。为了获取持久的成
功，我们必须同时引入TDD若干相互依赖的实践。本章即关注TDD
相关的一种平衡方法，包括持久可信的需求、可测试的设计、强有
力的工具和新的团队合作模式。
[1]表14-2将本处的简介扩展为完整的TDD过程，后续内容将说明这
一点。
实例与测试
TDD已经被证明是一个不那么完美的名字。就字面上来看，“测试驱
动开发"很容易误导我们将说明阶段的活动混同为测试活动。功能需
求说明与细致的测试脚本有些类似（详见表14-2），而这显然是难
于理解和获取的。因此人们提出了像实例山、行为[2]期望
（Hendrickson2009）这样的词汇取而代之，以便更加关注于说明而
不是测试。在2008年敏捷联盟功能测试工具程序工作组的一次开放
会议上3]，一个从业者小组提出了和"TDD三角”（图14-1）。
需求
水
说明
确认
实例
测试
执行
图14-1TDD三角
2005
---
## Page 2007
软件需求用于说明系统被期望以何种方式工作（即特征或业务角
色）。需求由业务领域的词汇组成，例如在一个光碟销售系统里，
需求如下描述：
目录包含光碟商店里目前所有销售或出租的电影名列表。
需求是TDD的锚点。一个实例（即验收测试、场景测试或者功能测
试）明确说明了对于系统在某一特定条件下如何工作的需求。实例
以业务领域的词汇构成，一般包含三个部分：前置条件+行为=后置
条件，常以如下形式表达：“当系统处于状态X时做Y，则结果是
Z。”下面的实例阐述了光碟商店的需求：
成功实例
假设电影名“星球大战”目前不在目录中，则当我们添加它后，结果
是“星球大战"出现在目录中。
重复失败实例
假设电影名“星球大战”已经存在于目录中，则当我们添加它时，结
果是系统提示“重复电影名"的错误。
所谓测试是在实际系统上执行实例以确认其满足需求。测试可以多
次执行，每一次都会记录该次执行发生了什么情况。例如，“在限定
环境中1.3版本于2009年7月2日执行重复错误实例通过。”实例可以作
为测试，但并非所有测试都是实例（例如非功能测试或者探索性测
试）。
二者的变化非常微妙：实例在被执行时转换为测试，但是实例的首
要目的是阐述需求。
[1] http://www.exampler.com/.
[2] http://behaviour-driven.org/.
易读的实例
对于实例来说，能够被各种人员清晰地理解显得至关重要。
非技术的行业专家
2006
---
## Page 2008
这些人负责验证实例说明正确和完整。
技术团队
团队成员使用实例驱动他们的设计和开发工作。工程师阅读实例然
后将其自动化；程序员使用实例并发正确的系统代码；技术支持借
助实例修正和提高系统的某一部分。
一个易读的实例包含以下方面的特性（Andrea2005）：
目的明确：说明“做什么”，而非“怎样做”。
表述清晰：仅列些必不可少的内容。
释义精准：两个人能从中获得同样的理解。
自成一体：具有独立性，不需要其他实例解释。
简洁高效：用最少的描述说明问题。
易于查找：有组织和可搜索。
图14-2中，名为“测试脚本”（TestScript）的部分不是我们希望得到
的需求说明：过多的用户交互细节使得本来要表达的业务逻辑模糊
不清（换句话说，“怎样做"遮盖了“做什么”）。
2007
---
## Page 2009
1.测试脚本
2.基于领域的语言
1.从目录维护页开始
1.添加片名（星球大战，科幻片）
2.页面标题是：音像店管理
一目录维护
2.核对目录
3.点击“添加新片名”按钮
4.进入到新页：音像店管理
一添加新片名
片名
类别
拷贝数
库存数
5.在“片名文本框里键入“星球大战
阿拉丁
儿童片
4
2
6.在目录选择列表中选择“科幻片”
星际速航
科幻片
1
1
7.点击“保存”按钮
星球大战
科幻片
8.回到上一页：音像店管理——目录维护