title:Swords and shields: a study of mobile game hacks and existing defenses
author:Yuan Tian and
Eric Y. Chen and
Xiaojun Ma and
Shuo Chen and
Xiao Wang and
Patrick Tague
Swords and Shields – A Study of
Mobile Game Hacks and Existing Defenses
Yuan Tian
Carnegie Mellon University
PI:EMAIL
Shuo Chen
Microsoft Research
PI:EMAIL
Eric Chen
Gridspace
PI:EMAIL
Xiao Wang
Carnegie Mellon University
PI:EMAIL
Xiaojun Ma
Carnegie Mellon University
PI:EMAIL
Patrick Tague
Carnegie Mellon University
PI:EMAIL
ABSTRACT
The mobile game industry has been growing signiﬁcantly.
Mobile games are increasingly including abilities to purchase
in-game objects with real currency, share achievements and
updates with friends, and post high scores to global leader
boards. Because of these abilities, there are new ﬁnancial
and social incentives for gamers to cheat. Developers and
researchers have tried to apply various protection mecha-
nisms in games, but the degrees of eﬀectiveness vary con-
siderably. There has not been a real-world study in this
problem space. In this work, we investigate diﬀerent pro-
tections in real-world applications, and we compare these
approaches from diﬀerent aspects such as security and de-
ployment eﬀorts systematically.
We ﬁrst investigate 100 popular mobile games in order to
understand how developers adopt these protection mecha-
nisms, including those for protecting memory, local ﬁles, and
network traﬃc, for obfuscating source code, and for main-
taining the integrity of the game state. We have conﬁrmed
that 77 out of the 100 games can be successfully attacked,
and believe that at least ﬁve more are vulnerable. Based on
this ﬁrst-hand experience, we propose an evaluation frame-
work for the security of mobile game defenses. We deﬁne
a ﬁve-level hierarchy to rate the protection mechanisms to
help developers understand how well their games are pro-
tected relative to others in the market. Additionally, our
study points out the trade-oﬀs between security and network
limitations for mobile games and suggests potential research
directions. We also give a set of actionable recommendations
about how developers should consider the cost and eﬀective-
ness when adopting these protection mechanisms.
1.
INTRODUCTION
The mobile game industry has been booming in recent
years. In 2015, mobile games accounted for 41% of the en-
tire video game market [31]. The overall revenue of mobile
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05-09, 2016, Los Angeles, CA, USA
c⃝ 2016 ACM. ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991119
games in 2015 has reached $34.8 billion (a 39.2% increase
from 2014), which is 85% of mobile app market revenue [11].
Popular games can be highly proﬁtable; for example, Clash
of Clans proﬁts $4.6 million every day [24]. It is common for
mobile games to sell game points, special powers and other
digital commodities for real money. Moreover, as games
become more social, gamers have the motivation to com-
pete with friends and show oﬀ their feats on leader boards.
Therefore, protecting against game hacking has become an
important consideration for developers. For example, Pok´e-
mon Go starts to take actions to ban users that take unfair
advantage of and abusing the game. Indeed, as we show in
this paper, developers have tried to apply various protection
mechanisms in their games, achieving diﬀerent levels of suc-
cess against hacks. To the best of our knowledge, there is
no systematic study about the current conditions of mobile
game security. We believe that it is timely and valuable to
conduct a broad study in this problem space, speciﬁcally,
about mobile game hacks and protection mechanisms.
Compared to PC games, mobile games have unique limita-
tions with respect to security protections. First, most mobile
games have less frequent network communications because
of limited bandwidth and the cost of data traﬃc. They often
only communicate with servers in speciﬁc situations such as
in-app purchase, leader board loading, and communication
with friends. Second, the “barrier to entry” of mobile game
developers is signiﬁcantly lower than that of PC games. In
particular, most PC games are released by large game devel-
opment companies that adhere to stricter coding and secu-
rity practices, whereas mobile games are often developed by
small companies or even individual developers with fewer
restrictions and less secure programming experience. Mo-
tivated by these diﬀerences, we approach the problem by
surveying and analyzing mobile game weaknesses leading to
successful hacks, cheating, and manipulation of game activ-
ities. We summarize our eﬀorts as follow.
scape of mobile game hacks and protections.
Our Work. Our study consists the following three pillars.
• We present a comprehensive view of the current land-
• We compare the defenses deployed in the real world.
The comparison focuses on multiple dimensions such
as security, deployment eﬀort, bandwidth limitation
and performance.
• We identify and discuss current research challenges and
point out future directions.
First, we study 100 popular mobile games, focusing on
386
their resilience against hacking techniques. Then, we dis-
cuss various hacking utility tools such as memory/ﬁle edit-
ing, traﬃc analysis and program analysis tools. We also
investigate many protection approaches, such as local re-
source protection and network protection, as well as more
sophisticated approaches such as code obfuscation and state-
synchronization between client and server. We present a
number of case studies to concretely explain how developers
try to protect their games and whether the adopted protec-
tions are eﬀective. We have conﬁrmed that 77 of 100 popular
games (such as Angry Birds) can be successfully hacked, and
believe that at least ﬁve more are vulnerable.
Our ﬁrst-hand experience suggests that game hacking re-
quires very diﬀerent levels of eﬀort, ranging from using auto-
matic tools to painstakingly analyzing native code libraries.
This implies that certain protections and combinations of
protections are very eﬀective, while others can be trivially
defeated. Accordingly, we deﬁne a ﬁve-level hierarchy to rate
the eﬀectiveness of each combination of protections that we
observed. We envision that this hierarchy gives developers a
clear picture about how well their games are protected rela-
tive to others in the market. We also discuss the developer’s
eﬀort and the runtime overhead due to each protection ap-
proach, which are important practical considerations when
making real-world engineering decisions. The feasibility of
a protection mechanism is also aﬀected by the game’s genre
and its development platform. Summarize all the analyses,
we provide a number of actionable recommendations for de-
velopers who build diﬀerent genres of games and who use
popular game engines/development platforms (e.g., Android
SDK/NDK, Unity3D, libGDX, Adobe Air, and AndEngine).
The remainder of our paper is organized as follows. In Sec-
tion 2, we introduce common hacking tools and techniques
for traﬃc and code analyses. We describe the threat model
and the approach of our study in Section 3. We present an
overview of our study results in Section 4. In Section 5, we
provide a detailed account of several case studies. Based on
our experience obtained through the study, we discuss and
compare diﬀerent protection mechanisms in terms of cost
and eﬀectiveness in Section 6. We discuss related research
in Section 7 and conclude in Section 8.
2. MOBILE GAME HACKS BACKGROUND
In this section, we provide an overview about a number
of mobile game hacking tools and techniques used in our
study. We use these tools in our study to test the games
and evaluate the eﬀectiveness of the game protections.
2.1 Hacking Tools
There are two primary types of hacking tools that apply to
mobile games: (1) tools that can be applied broadly across
games and platforms and (2) tools that are game-speciﬁc. In
what follows, we describe these two classes of hacking tools.
2.1.1 General Hacking Tools
General hacking tools are usually apps that are designed
to hack mobile games on gamers’ devices. The hacking ap-
proaches are not designed to be game-speciﬁc. We categorize
them into two classes: memory editing tools and local ﬁle
editing tools. Memory editing tools, such as GameKiller [16],
GameCIH [14], and GameGuardian [15], search for the ad-
dresses of sensitive variables and modify them during game
play. More speciﬁcally, the gamer provides the value of a
sensitive variable, e.g., the number of coins, into such a tool
to locate all candidate addresses in memory that contains
the value. The gamer then continues the game for a while,
and repeats the aforementioned steps. Usually, after several
iterations, the tool is able to identify the memory address
of the sensitive variable. Thus the gamer can modify it ar-
bitrarily by editing the value in the memory address. An-
other class of tools is local ﬁle editing tools, such as Cheat-
Droid [13], which allow a gamer to check the local ﬁles for
sensitive values.
2.1.2 Speciﬁc Hacking Tools
Diﬀerent from the general tools, there are hacking tools
designed for speciﬁc games. One example is Xmodgames [35]
that provides “mods” to 32 popular games. These mods are
repackaged mobile games with protections removed. There-
fore, gamers can install these repackaged games on their de-
vices and enjoy the beneﬁts that they do not have otherwise.
The mods require detailed analyses done by skillful hackers
and need to be updated when the games are updated.
2.2 Analysis Techniques
Techniques such as traﬃc analysis and program analysis
can also be used to construct game hacks. Using these tech-
niques requires deeper knowledge about technical details and
conﬁgurations.
2.2.1 Trafﬁc Analysis
Traﬃc analysis is useful for hacking games that send sen-
sitive game status updates such as scores and coins over a
network. Attackers can utilize traﬃc analysis to identify
and modify sensitive parameters for in-game beneﬁt. The
attack is often done through a network proxy. In practice,
there are three situations where a hacker needs extra eﬀorts
to do traﬃc analysis. First, Android apps can bypass the
global proxy settings so that the traﬃc might not be cap-
tured by the proxy. The hacker needs to force the game to
use the proxy. Second, the traﬃc may be encoded, so the
hacker needs to understand the format well enough to de-
code it. Third, the game traﬃc combines advertisement and
analytics traﬃc and the gamer needs to ﬁlter the traﬃc.
2.2.2 Decompilers and Debugging Tools
Decompilers, debugging tools and hooking tools can be
applied to understand the logic of the games, for the pur-
pose of bypassing protections. Decompiling tools, such as
dex2jar [6], ILSpy [22] and JD-GUI [23], enable the hacker to
decompile the code and analyze the logic. Debugging tools
such as GDB and hooking tools such as Android SSL Trustkiller
help the hacker analyze the game’s logic at runtime. At-
tackers might infer the protections deployed in a game by
analyzing the game’s executable and use the information to
bypass the protections.
3. EVALUATION FRAMEWORK FOR MO-
BILE GAME DEFENSES
We developed a framework to evaluate protections in mo-
bile games from diﬀerent aspects such as security, deploy-
ment eﬀort, bandwidth consumption, and performance.
3.1 Dimensions of Evaluation
We select the following dimensions to evaluate mobile
game defenses systematically.
387
• Security
When we analyze the security aspect of protections, we
take the hacker’s perspective to study a set of popular
games. For each game, we try to understand what pro-
tection mechanisms it deploys, then explore diﬀerent
levels of hacking techniques to evaluate the eﬀective-
ness of these mechanisms.
• Deployment eﬀort
Deployment eﬀort is also very important to evaluate a
mobile game defense, because developers tend to adopt
approaches that are easy to design and implement. We
evaluate this aspect by analyzing whether the defense
is speciﬁc to the logic of the games, whether develop-
ers need to change a lot of the code, and whether the
developer need to use new technology/framework.
• Bandwidth consumption
Mobile games have speciﬁc limitations about band-
width consumption. Most of mobile games are de-
signed to be light-weight for network traﬃc. We eval-
uate the network usage of each defense to see whether
it is suitable for diﬀerent types of mobile games.
• Performance
We also evaluate the performance overhead introduced
by each defense technique.
3.2 Threat Model
When comparing the security of the mobile game defenses,
we consider the situation where the attacker is the per-
son playing the game, namely the game hacker. The game
hacker uses various hacking techniques in an attempt to de-
feat the protections employed by the game developers. Be-
cause the game hacker is also the owner of the mobile device,
it is feasible, when necessary, for the gamer to obtain root
privilege on the device. Rooting the device allows hacking
tools to get access to local resources such as memory, decom-
piled source code, local ﬁles, and network traﬃc. Our threat
model is standard for studying security problems pertaining
to game hacks (and other digital content protection issues).
We consider two levels of hackers: the ﬁrst level are ama-
teurs, who only use available hacking tools such as memory
modiﬁcation tools (e.g., GameKiller) and local ﬁle modiﬁ-
cation tools (e.g., cheatDroid), whereas the second level are
professional hackers who also conduct program analysis and
traﬃc analysis to hack deeper into the games.
3.3 Approach
For each game, we test it with a set of increasingly sophis-
ticated hacking tools, described as follows.
First, we use the most general hacking tools to modify
local ﬁles and memory. These tools are easily available to
gamers, and they are simple to install and use. We consider
these tools as amateur level.
If the general hacking tools are not eﬀective for the game,
we check the network traﬃc to see if the game has weak-
nesses that can be exploited through traﬃc manipulations.
We use network sniﬀers and web proxies in this step. These
tools are also easily available to gamers, but they require the
eﬀort of conﬁgurations, as well as certain basic skills for an-
alyzing and understanding the traﬃc. As mentioned earlier,
traﬃc analysis may not be trivial; a game hacker may need
to use tools such as proxydroid [27] to force an Android app
to use the global proxy.
If the above hacking techniques are still ineﬀective, we
use more sophisticated tools to analyze the game to study
its speciﬁc protection mechanisms. We ﬁrst decompile and
analyze the app to investigate its protection logic. Usually,
the expertise and eﬀort required by these techniques are
beyond what amateur game hackers possess.
If the source code of the game app is heavily obfuscated
or written in native code, we apply debugging tools to inves-
tigate the logic and use hooking tools to bypass protections.
This level of analysis is often time-consuming even for expe-
rienced hackers.
Our study does not include game mods for two reasons:
(1) the techniques to develop game mods are essentially the
same as the ones we studied ; (2) game mods are often only
available for a few popular games and not up-to-date.
4. OVERVIEW OF OUR STUDY
In this section, we provide an overview of our study about
attacks and defenses in mobile games. We ﬁrst describe the
apps we investigated and then summarize the protections we
observed.
4.1 Dataset Overview
Our study covers a set of 100 popular mobile games in
Google Play, shown in Table 1 with an index assigned to
each game for easy reference (e.g., game 43 is Angry Birds).
We tried to be unbiased when selecting these games – they
are all among the top 120 games in Google Play, from which
we removed 20 games that do not present a ﬁnancial or so-
cial incentive to cheat. The games are built with diﬀerent