6\. 不要使用count(列名)或count(常量)来替代count(*)，count(*)就是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关。    
7\. 任何地方都不要使用 select * from t ，用具体的字段列表代替*，不要返回用不到的任何字段。另外表结构发生变化也容易出现问题。       
### 31. 管理规约 - 安全与审计    
1\. 所有的DDL均应该被审计。    
```  
postgres=# alter system set log_statement TO ddl;  
ALTER SYSTEM  
postgres=# select pg_reload_conf();  
 pg_reload_conf   
----------------  
 t  
(1 row)  
```  
2\. 数据库的非应用程序用户（例如DBA，分析师，开发账号），所有的操作均应该被审计。    
```  
postgres=# alter role user_name set log_statement to ddl;  
```  
3\. 所有的登陆和退出操作必须被审计。    
```  
vi postgresql.conf  
log_connections = on  
log_disconnections = on  
```  
4\. 关键表（例如账务表、密码表等）的所有操作（包括DML）应该被审计。    
[《USE hstore store table's trace record》](../201206/20120625_01.md)    
5\. 为数据库访问账号设置复杂密码。    
https://www.postgresql.org/docs/10/static/chkpass.html  
[《PostgreSQL 密码安全指南》](../201410/20141009_01.md)    
6\. 业务系统，开发测试账号，不要使用数据库超级用户。    
```  
Command:     CREATE ROLE  
Description: define a new database role  
Syntax:  
CREATE ROLE name [ [ WITH ] option [ ... ] ]  
where option can be:  
      SUPERUSER | NOSUPERUSER  
    | CREATEDB | NOCREATEDB  
    | CREATEROLE | NOCREATEROLE  
    | INHERIT | NOINHERIT  
    | LOGIN | NOLOGIN  
    | REPLICATION | NOREPLICATION  
    | BYPASSRLS | NOBYPASSRLS  
    | CONNECTION LIMIT connlimit  
    | [ ENCRYPTED ] PASSWORD 'password'  
    | VALID UNTIL 'timestamp'  
    | IN ROLE role_name [, ...]  
    | IN GROUP role_name [, ...]  
    | ROLE role_name [, ...]  
    | ADMIN role_name [, ...]  
    | USER role_name [, ...]  
    | SYSID uid  
```  
7\. 应该为每个业务分配不同的数据库账号，禁止多个业务共用一个数据库账号。      
8\. 敏感数据应该加密存储，建议在服务端加解密，如果加密后的数据有等值查询以外的查询需求，建议使用数据库的透明加密技术。    
[《固若金汤 - PostgreSQL pgcrypto加密插件》](../201607/20160727_02.md)    
https://www.postgresql.org/docs/10/static/pgcrypto.html  
9\. 对安全要求较高的业务，网络传输应该被加密，使用数据库的SSL连接。    
[《PostgreSQL 如何实现网络压缩传输或加密传输(openssl)》](../201305/20130522_01.md)    
10\. 不建议将数据库的监听端口暴露在公网，防止破解密码，DDoS攻击。  
[《PostgreSQL 连接攻击（类似DDoS）》](../201706/20170629_02.md)    
11\. 有公网访问需求时，建议开启SSL连接，前置防火墙并使用来访白名单，数据库PG_HBA.CONF也要配置白名单。    
12\. 不要泄露用户密码的MD5值，目前这么做有危险，(10.0 SASL上线后安全性会有提高)。    
[《PostgreSQL 10.0 preview 安全增强 - SASL认证方法 之 scram-sha-256 安全认证机制》](../201703/20170309_01.md)    
13\. 使用auth_delay插件，可以防止暴力破解。    
https://www.postgresql.org/docs/10/static/auth-delay.html  
### 32. 管理规约 - 诊断    
1\. 统计信息活动视图（表、索引、库、STANDBY、SLOT、流复制、后台任务、bgwriter、归档、事务、活动会话等），均以pg_stat开头。    
[《PostgreSQL 统计信息pg_statistic格式及导入导出dump_stat - 兼容Oracle》](../201710/20171030_02.md)    
[《PostgreSQL pg_stat_ pg_statio_ 统计信息(scan,read,fetch,hit)源码解读》](../201610/20161018_03.md)    
2\. auto_explain插件，可以帮助用户分析慢SQL的执行计划。    
[《PostgreSQL 函数调试、诊断、优化 & auto_explain》](../201611/20161121_02.md)    
3\. pg_stat_statements插件，可以帮助用户找出资源开销的TOP SQL，（调用次数、IO耗时、CPU耗时、内存消耗）。优化数据库，应该从开销的TOP 1 SQL开始。    
[《PostgreSQL 如何查找TOP SQL (例如IO消耗最高的SQL)》](../201704/20170424_06.md)    
4\. 建议配置慢SQL的时间阈值，超过阈值的SQL将被记录到日志文件中。    
```  
vi postgresql.conf  
log_min_duration_statement = '1s'  
```  
5\. 建议将日志输出格式配置为CSV格式。    
```  
vi postgresql.conf  
log_destination = 'csvlog'  
```  
6\. explain (analyze,verbose,timing,costs,buffers) 可以执行SQL，并输出详细的执行计划，帮助分析SQL的瓶颈，优化SQL。    
7\. explain analyze会真实的执行SQL，因此如果要用在DML语句上，请使用begin; explain analyze; rollback;的模式。    
8\. auto_explain插件，还可以帮助用户分析函数内部执行的SQL，以及他们的执行计划。    
10\. 数据库隐藏了一些开发参数，DEBUG参数，可以帮助用户进行跟深入的诊断。    
[《PostgreSQL Developer Options (debug, trace, system table mod and so on...) 详解》](../201301/20130128_01.md)    
11\. perf可以从内核层面，帮助用户分析数据库软件本身的瓶颈。    
[《PostgreSQL 源码性能诊断(perf profiling)指南》](../201611/20161129_01.md)    
### 33. 管理规约 - 优化    
1\. 大批量数据入库的优化，如果有大批量的数据入库，建议使用copy语法批量写入（减少解析和交互），或者 insert into table values (),(),...(); 的方式。  提高写入速度。     
2\. 不要使用delete 全表，性能很差，请使用truncate代替，（truncate是DDL语句，注意加锁等待超时）。      
```  
set lock_timeout='1s';  
truncate table only tbl;  -- 不清理子表，只清理当前表  
```  
3\. 两阶段提交的事务或者普通事务，要及时提交或回滚，否则可能导致数据库膨胀，年龄无法降低等问题。     
```  
postgres=# select * from pg_prepared_xacts ;  
 transaction | gid | prepared | owner | database   
-------------+-----+----------+-------+----------  
(0 rows)  
```  
4\. 应用程序一定要开启autocommit，同时避免应用程序自动begin事务，并且不进行任何操作的情况发生，某些框架可能会有这样的问题。     
5\. 高并发的应用场合，务必使用绑定变量(prepared statement)，防止数据库硬解析消耗过多的CPU资源。      
6\. 秒杀场景，一定要使用 advisory_lock先对记录的唯一ID进行锁定，拿到AD锁再去对数据进行更新操作。  拿不到锁时，可以尝试重试拿锁。        
```  
update tbl set x=? where id=? and pg_try_advisory_xact_lock(?);  
```  
7\. 在函数中，或程序中，不要使用count(*)判断是否有数据，很慢。 建议的方法是select 1 from table where ... limit 1;  然后使用FOUND变量的值判断前面这条QUERY有没有结果返回来判断是否有数据。   
```  
create or replace function .....  
declare  
  ...  
begin  
  ...  
perform 1 from tbl where ... limit;  
if FOUND then  
  ...  
else  
  ...  
end if;  
...  
```  
8\. 分页评估，不需要精确分页数时，请使用快速评估分页数的方法(explain的评估)。        
[《妙用explain Plan Rows快速估算行 - 分页数估算》](../201509/20150919_02.md)    
9\. 避免频繁创建和删除临时表，以减少系统表资源的消耗，因为创建临时表会产生元数据，频繁创建，元数据可能会出现碎片。     
10\. 可以预估SQL执行时间的操作，建议设置语句级别的超时，可以防止雪崩，也可以防止长时间持锁。        
```  
set statement_timeout = '10ms';  
....  
```  
11\. TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同：二者均删除表中的全部行。但 TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但是TRUNCATE是DDL，锁粒度很大，故不建议在开发代码中使用DDL语句，除非加了lock_timeout锁超时的会话参数或事务参数。        
12\. PostgreSQL支持DDL事务，支持回滚DDL，建议将DDL封装在事务中执行，必要时可以回滚，但是需要注意事务的长度，避免长时间堵塞DDL对象的读操作。     
```  
begin;  
...  
DDL;  
...  
end;  
```  
13\. 如果用户需要在插入数据和，删除数据前，或者修改数据后马上拿到插入或被删除或修改后的数据，建议使用insert into .. returning ..; delete .. returning ..或update .. returning ..; 语法。减少数据库交互次数。        
```  
insert into .. returning ..;   
delete .. returning ..;  
update .. returning ..;  
```  