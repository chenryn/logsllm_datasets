### 解决单引号问题的两种方法

解决单引号问题有两种方法：
1. 使用转义字符（反斜线）来转义单引号；
2. 使用双引号来定义包含单引号的值。

这两种方法虽然简单，但都能有效解决问题。

```bash
$ cat test2
#!/bin/bash
# another example of how not to use the for command
for test in "I don't know if *this*1l* work"
do
  echo $test
done
$ ./test2
I don't know if *this*1l* work
```

在第一个有问题的地方，我们使用了反斜线字符来转义 `don't` 中的单引号。在第二个有问题的地方，我们将 `this'11` 用双引号括起来。这两种方法都能正常识别出这个值。

### 处理包含空格的值

另一个常见的问题是处理包含多个单词的值。记住，`for` 循环默认将每个值按空格分隔。如果数据值中包含空格，你需要用双引号将其括起来。

```bash
$ cat badtest2
#!/bin/bash
# another example of how not to use the for command
for test in Nevada New\ Hampshire New\ Mexico New\ York North\ Carolina
do
  echo "Now going to $test"
done
$ ./badtest2
Now going to Nevada
Now going to New Hampshire
Now going to New Mexico
Now going to New York
Now going to North Carolina
```

通过在单独的数据值中使用双引号，`for` 命令可以正确区分不同的值。另外需要注意的是，当在某个值两边使用双引号时，shell 并不会将双引号作为值的一部分。

### 从变量读取列表

通常，在 shell 脚本中，你可能会将一系列值存储在一个变量中，然后需要遍历该变量中的整个列表。这也可以通过 `for` 命令完成。

```bash
$ cat test4
#!/bin/bash
# using a variable to hold the list
list="Alabama Alaska Arizona Arkansas Colorado"
list="$list Connecticut"

for state in $list
do
  echo "Have you ever visited $state?"
done
$ ./test4
Have you ever visited Alabama?
Have you ever visited Alaska?
Have you ever visited Arizona?
Have you ever visited Arkansas?
Have you ever visited Colorado?
Have you ever visited Connecticut?
```

在这个例子中，`list` 变量包含了用于迭代的标准文本值列表。注意，代码还使用了另一个赋值语句向 `list` 变量中添加了一个值。这是一种常用的向已有文本字符串尾部添加文本的方法。

### 从命令读取值

生成列表中所需值的另一种方法是使用命令的输出。你可以使用命令替换来执行任何产生输出的命令，然后在 `for` 命令中使用该命令的输出。

```bash
$ cat test5
#!/bin/bash
# reading values from a file
file="states"
for state in $(cat $file)
do
  echo "Visit beautiful $state"
done
$ cat states
Alabama
Alaska
Arizona
Arkansas
Colorado
Connecticut
Delaware
Florida
Georgia
$ ./test5
Visit beautiful Alabama
Visit beautiful Alaska
Visit beautiful Arizona
Visit beautiful Arkansas
Visit beautiful Colorado
Visit beautiful Connecticut
Visit beautiful Delaware
Visit beautiful Florida
Visit beautiful Georgia
```

在这个例子中，`cat` 命令用于输出文件 `states` 的内容。你会注意到 `states` 文件中的每一行都是一个州名，而不是通过空格分隔的。`for` 命令仍然以每次一行的方式遍历 `cat` 命令的输出，假设每个州名都在单独的一行上。但这并没有解决数据中有空格的问题。如果你列出一个名字中含有空格的州，`for` 命令仍然会将每个单词视为单独的值。

### 更改字段分隔符

造成这个问题的原因是特殊的环境变量 `IFS`，称为内部字段分隔符（internal field separator）。`IFS` 环境变量定义了 bash shell 用作字段分隔符的一系列字符。默认情况下，bash shell 将以下字符视为字段分隔符：

- 空格
- 制表符
- 换行符

如果 bash shell 在数据中看到这些字符中的任何一个，它就会假定这是一个新的数据字段的开始。在处理可能含有空格的数据（如文件名）时，这会非常麻烦，就像你在上一个脚本示例中看到的那样。

要解决这个问题，可以在 shell 脚本中临时更改 `IFS` 环境变量的值，以限制被 bash shell 视为字段分隔符的字符。例如，如果你想修改 `IFS` 的值，使其只能识别换行符，可以这样做：

```bash
IFS=$'\n'
```

将这个语句加入到脚本中，告诉 bash shell 在数据值中忽略空格和制表符。对前一个脚本使用这种方法，将获得如下输出。

```bash
$ cat test5b
#!/bin/bash
# reading values from a file
file="states"
IFS=$'\n'
for state in $(cat $file)
do
  echo "Visit beautiful $state"
done
$ ./test5b
Visit beautiful Alabama
Visit beautiful Alaska
Visit beautiful Arizona
Visit beautiful Arkansas
Visit beautiful Colorado
Visit beautiful Connecticut
Visit beautiful Delaware
Visit beautiful Florida
Visit beautiful Georgia
Visit beautiful New York
Visit beautiful New Hampshire
Visit beautiful North Carolina
```

现在，shell 脚本能够正确处理列表中含有空格的值了。

**警告**：在处理代码量较大的脚本时，可能在一个地方需要修改 `IFS` 的值，然后忽略这次修改，在脚本的其他地方继续沿用 `IFS` 的默认值。一个安全的做法是在改变 `IFS` 之前保存原来的 `IFS` 值，之后再恢复它。

这种技术可以这样实现：

```bash
IFS_OLD=$IFS
IFS=$'\n'
# 你的代码
IFS=$IFS_OLD
```

这就保证了在脚本的后续操作中使用的是 `IFS` 的默认值。

还有其他一些 `IFS` 环境变量的巧妙用法。假设你要遍历一个文件中用冒号分隔的值（例如在 `/etc/passwd` 文件中）。你可以将 `IFS` 的值设为冒号：

```bash
IFS=:
```

如果要指定多个 `IFS` 字符，只需将它们在赋值行中串起来即可：

```bash
IFS=$'\n:=;'
```

这个赋值会将换行符、冒号、分号和双引号作为字段分隔符。如何使用 `IFS` 字符解析数据没有任何限制。

### 用通配符读取目录

最后，可以用 `for` 命令自动遍历目录中的文件。进行此操作时，必须在文件名或路径名中使用通配符。这会强制 shell 使用文件扩展匹配。文件扩展匹配是生成匹配指定通配符的文件名或路径名的过程。

如果不知道所有的文件名，这个特性在处理目录中的文件时非常有用。

```bash
$ cat test6
#!/bin/bash
# iterate through all the files in a directory
for file in /home/rich/test/*
do
  if [ -d "$file" ]
  then
    echo "$file is a directory"
  else
    echo "$file is a file"
  fi
done
$ ./test6
/home/rich/test/dir1 is a directory
/home/rich/test/myprog.c is a file
/home/rich/test/myprog is a file
/home/rich/test/newdir is a directory
/home/rich/test/myscript is a file
/home/rich/test/newfile2 is a file
/home/rich/test/newfile is a file
/home/rich/test/testing is a file
/home/rich/test/testdir is a directory
/home/rich/test/testprog is a file
/home/rich/test/testprog.c is a file
```

`for` 命令会遍历 `/home/rich/test/*` 输出的结果。该代码使用 `test` 命令测试每个条目（使用方括号方法），以查看它是目录（通过 `-d` 参数）还是文件（通过 `-f` 参数）（参见第12章）。

注意，我们在 `if` 语句中做了一些不同的处理：

```bash
if [ -d "$file" ]
```

在 Linux 中，目录名和文件名中包含空格是合法的。为了适应这种情况，应该将 `file` 变量用双引号括起来。如果不这样做，遇到包含空格的目录名或文件名时就会产生错误。

```bash
./test6: line 6: [: too many arguments
./test6: line 9: [: too many arguments
```

在 `test` 命令中，bash shell 会将额外的单词视为参数，从而导致错误。

也可以在 `for` 命令中列出多个目录通配符，将目录查找和列表合并进同一个 `for` 语句。

```bash
$ cat test7
#!/bin/bash
# iterating through multiple directories
for file in /home/rich/.* /home/rich/badtest
do
  if [ -d "$file" ]
  then
    echo "$file is a directory"
  elif [ -f "$file" ]
  then
    echo "$file is a file"
  else
    echo "$file doesn't exist"
  fi
done
$ ./test7
/home/rich/.backup.timestamp is a file
/home/rich/.bash_history is a file
/home/rich/.bash_profile is a file
/home/rich/.bash_logout is a file
/home/rich/.bashrc is a file
/home/rich/badtest doesn't exist
```

`for` 语句首先使用文件扩展匹配来遍历通配符生成的文件列表，然后它会遍历列表中的下一个文件。可以将任意多的通配符放入列表中。

**警告**：注意，你可以在数据列表中放入任何东西。即使文件或目录不存在，`for` 语句也会尝试处理列表中的内容。在处理文件或目录时，这可能会成为一个问题。你无法知道正在尝试遍历的目录是否存在：在处理之前测试一下文件或目录总是好的。

### C语言风格的for命令

如果你从事过 C 语言编程，可能会对 bash shell 中 `for` 命令的工作方式感到有些惊讶。在 C 语言中，`for` 循环通常定义一个变量，然后这个变量会在每次迭代时自动改变。通常程序员会将这个变量用作计数器，并在每次迭代中让计数器增一或减一。bash 的 `for` 命令也提供了这个功能。本节将会告诉你如何在 bash shell 脚本中使用 C 语言风格的 `for` 命令。

#### C语言的for命令

C 语言的 `for` 命令有一个用来指明变量的特定方法，一个必须保持成立才能继续迭代的条件，以及另一个在每次迭代中改变变量的方法。当指定的条件不成立时，`for` 循环就会停止。条件等式通过标准的数学符号定义。例如，考虑下面的 C 语言代码：

```c
for (i = 0; i < 10; i++)
  printf("The next number is %d\n", i);
```

这段代码产生了一个简单的迭代循环，其中变量 `i` 作为计数器。第一部分将一个默认值赋给该变量。中间的部分定义了循环重复的条件。当定义的条件不成立时，`for` 循环就停止迭代。最后一部分定义了迭代的过程。在每次迭代之后，最后一部分中定义的表达式会被执行。在本例中，`i++` 表达式使 `i` 每次迭代后递增 1。