有两种办法可解决这个问题：
口使用转义字符（反斜线）来将单引号转义；
口使用双引号来定义用到单引号的值。
这两种解决方法并没有什么出奇之处，但都能解决这个问题。
$ cat test2
1/bin/bash
 another example of how not to use the for cormand
for test in I don\*t knou if *this*1l* work
do
.1sa$ipaon, oqa
done
$./test2
vord:I
vord:don*t
vord: know
vord:if
vord:this*11
vord:vork
在第一个有问题的地方添加了反斜线字符来转义don't中的单引号。在第二个有问题的地方
将this'11用双引号圈起来。两种方法都能正常辨别出这个值。
你可能遇到的另一个问题是有多个词的值。记住，for循环假定每个值都是用空格分割的。
如果有包含空格的数据值，你就陷人麻烦了。
---
## Page 278
13.1for命令
263
$ cat badtest2
#1/bin/bash
# another exanple of how not to use the for conmand
for teat in Nevada New Hampshire New Mexico Neu York North Carolina
echo *Nov going to Stest*
$./badtest1
done
Nov going to Jevada
Nov
going
to New
lov
going
to Hampshire
Nlov
going
to New
Nov going to New
xow
going
to Mexico
Nov going to North
Xow
going
to York
Nov going to Carolina
这不是我们想要的结果。for命令用空格来划分列表中的每个值。如果在单独的数据值中有
空格，就必须用双引号将这些值圈起来。
$ cat test3
an exanple of how to properly Gefine valuea
#1/bin/ba.sh
do
echo *Nov going to Stest*
$ -/test3
done
Nov going to Nevada
Nov going to New Mexico
Now
going
to New Hampahire
Nov going to New York
现在for命令可以正确区分不同值了。另外要注意的是，在某个值两边使用双引号时，shell
并不会将双引号当成值的一部分。
13.1.3从变量读取列表
通常shell脚本遇到的情况是，你将一系列值都集中存储在了一个变量中，然后需要遍历变量
中的整个列表。也可以通过for命令完成这个任务。
$ cat test4
#using a varlable to hold the llat
#1/bin/ba.sh
13
1ist= *Alabana Alaska Arlzona Arkansas Colorado*
1iat=$llat* Connecticut*
---
## Page 279
264
第13章更多的结构化命令
for state ln $llst
do
echo *Have you ever vlsited Satate?*
$./test4
done
Have you ever vlelted Alabana?
Have you ever vlslted Alaska?
Have you ever vlslted Arizona?
Have you ever vialted Arkansas?
Have you evez vlslted Colorado?
Have you evez vlsited Connecticut?
S1ist变量包含了用于选代的标准文本值列表。注意，代码还是用了另一个赋值语句向s1ist
变量包含的已有列表中添加（或者说是拼接）了一个值。这是向变量中存储的已有文本字符串尾
部添加文本的一个常用方法。
13.1.4从命令读取值
生成列表中所需值的另外一个途径就是使用命令的输出。可以用命令替换来执行任何能产生
输出的命令，然后在for命令中使用该命令的输出。
5189 1t3 $
 reading values fron a f1le
#1/bin/bash
flle=*states*
for state 1n $Icat $f11e)
do
echo *Viait beautiful Satate*
done
$ cat states
Alabana
ALaska
Ar1zona
Arkansas
Colorado
Connectlcut
Delaware
F1orida
Georgla
Vlait beautlful Alabana
$./test5
Vlait beautlful Alaska
Vlait beautlful Arkansas
Vlait beautlful Arizona
Vlait beautlful Connecticut
Vlait beautlful Colorado
Vlait beautlful Delavare
Vlait beautlful Florlda
---
## Page 280
13.1for命令
265
Vialt beautiful Georgia
这个例子在命令替换中使用了cat命令来输出文件states的内容。你会注意到states文件中每一
行有一个州，面不是通过空格分隔的。for命令仍然以每次一行的方式遍历了cat命令的输出，
假定每个州都是在单独的一行上。但这并没有解决数据中有空格的问题。如果你列出了一个名字
中有空格的州，for命令仍然会将每个单词当作单独的值。这是有原因的，下一节我们将会了解。
说明test5的代码范例将文件名赋给变量，文件名申没有加入路径。这委求文件和脚本位于同
一个目录中。如果不是的话，你需妥使用全路径名（不管是绝对路径还是相对路径）来
引用文件位置。
13.1.5更改字段分隔符
造成这个间题的原因是特殊的环境变量工FS，叫作内部宇段分隔符（intemal field separator）。
IFs环境变量定义了bash shell用作字段分隔符的一系列字符。默认情况下，bash shell会将下列字
符当作字段分隔符：
口空格
制表符
口换行符
如果bashshell在数据中看到了这些字符中的任意一个，它就会假定这表明了列表中一个新数
据字段的开始。在处理可能含有空格的数据（比如文件名）时，这会非常麻烦，就像你在上一个
脚本示例中看到的。
要解决这个问题，可以在shell脚本中临时更改IFS环境变量的值来限制被bash shell当作字段
分隔符的字符。例如，如果你想修改IFS的值，使其只能识别换行符，那就必须这么做：
IFS=$′n′
将这个语句加人到脚本中，告诉bash shell在数据值中忽略空格和制表符。对前一个脚本使用
这种方法，将获得如下输出。
$ cat test5b
1/bin/ba.sh
reading values from a file
file=*states*
for state in $ (cat $Sfile)
IFS=$′n′
13
do
echo *Visit beautifulSstate*
$./test5b
done
---
## Page 281
266
第13章更多的结构化命令
Vlait beautlful Alabana
Vlait beautlful Alaska
Vlait beautlful Arizona
Vlait beautlful Arkansaa
Vlait beautlful Connecticut
Vlait beautlful Colorado
Vlait beautlful Delavare
Vlsit beautlful Georgla
Vlait beautlful Florlda
Vlait beautlful New York
V1aitbeaut1ful New Hanpahlre
Vlait beautlful North Carolina
现在，sell脚本旧能够使用列表中含有空格的值了。
警告在处理代码量较大的脚本时，可能在一个地方需要修改IPS的值，然后忽略达次修改，在
脚本的其他地方继续沿用IPS的默认值。一个可参考的安全实践是在改变IPS之前保存原
来的IPS值，之后再恢复它。
这种技术可以这样实现：
IFS , OLD=$IFS
IFS=$′\n*
IFS=$IFS , OLD
这就保证了在脚本的后续操作中使用的是IPS的默认值。
还有其他一些IFS环境变量的绝妙用法。假定你要遍历一个文件中用冒号分隔的值（比如在
/etc/passwd文件中）。你要做的就是将IFs的值设为冒号。
IFS=1
如果要指定多个IFs字符，只要将它们在赋值行串起来就行。
IFS=$*\n′=; *
这个赋值会将换行符、冒号、分号和双引号作为字段分隔符。如何使用IFS字符解析数据没
有任何限制。
13.1.6用通配符读取目录
最后，可以用for命令来自动遍历目录中的文件。进行此操作时，必须在文件名或路径名中
使用通配符。它会强制shell使用文件扩晟匹配。文件扩展匹配是生成匹配指定通配符的文件名或
路径名的过程。
如果不知道所有的文件名，这个特性在处理目录中的文件时就非常好用。
$ cat test6
+1 /bin/bash
---
## Page 282
13.1for命令
267
#1terate through all the [lles Ln a Girectory
for file in /home/zich/teat/*
do
if [ -d *sfile* ]
then
echo *seile is a directory*
then
echo *sfile ia a file*
f 1
$ -/test6
done
/home/r1ch/teat/Glx1 iα a dlrectozy
/home/rlch/teat/myprog.c 1a a fi1e
/home /r1ch/teat/nyprog 1a a fi1e
/home/r1ch/test/newdir 1a a directory
/home/rlch/teat/nyacript 1a a fi1e
/home/rlch/teat/newfile2 La a E1e
home/rlch/test/newfile Ia a file
/home/rlch/teat/teat ing ia a fi1e
home/rlch/teat/teatdir ia a directory
/home/rlch/teat/teatprog 1a a file
/home/rlch/teat/teatprog,c 1a a f11e
for命令会遍历/home/rich/test/*输出的结果。该代码用test命令测试了每个条目（使
用方括号方法），以查看它是目录（通过-a参数）还是文件（通过-f参数）（参见第12章）。
注意，我们在这个例子的ir语句中做了一些不同的处理：
if [ -d *sfile* ]
在Limux中，目录名和文件名中包含空格当然是合法的。要适应这种情况，应该将sfile变
量用双引号圈起来。如果不这么做，遇到含有空格的目录名或文件名时就会有错误产生。
-/test6: 1ine 6: [1 too many arguments
./test6: 1ine 9: [: too many arguments
在test命令中，bash shell会将额外的单词当作参数，进而造成错误。
也可以在for命令中列出多个目录通配符，将目录查找和列表合并进同一个for语句。
$ cat test7
#1terating through multiple directorles
#1/bin/ba.sh
for fi1e 1n /home/zich/ ,b* /home/zich/badteat
do
[os. P- ] T
then
13
echo *seile la a directory*
then
echo *sfile la a fi1e*
---
## Page 283
268
第13章更多的结构化命令
e1se
echo *$file doesn't exiat
f1
$./test7
lone
/home/rich/ -backup,tlnestanp ig a [11e
/home/rich/ .bash_hiatozy 1α a f11e
/home/rich/ -bash_prof11e 1α a f11e
/home/rlch/ -bash_logout iα a 11e
/home/rich/ -bashrc iα a f11e
/home/rlch/badtest doean*t exiat
for语句首先使用了文件扩展匹配来遍历通配符生成的文件列表，然后它会遍历列表中的下
一个文件。可以将任意多的通配符放进列表中。
警告注意，你可以在数据列表中放入任何东西。即使文件或目录不存在，for语句也会尝试处
理列表中的内容。在处理文件或目录时，这可能会是个问题。你无法知道你正在尝试遍
历的目录是否存在：在处理之前测试一下文件或目录总是好的
13.2C语言风格的for命令
如果你从事过C语言编程，可能会对bash shell中for命令的工作方式有点惊奇。在C语言中，
for循环通常定义一个变量，然后这个变量会在每次送代时自动改变。通常程序员会将这个变量
用作计数器，并在每次选代中让计数器增一或减一。bash的for命令也提供了这个功能。本节将
会告诉你如何在bash shell脚本中使用C语言风格的for命令。
13.2.1C语言的for命令
C语言的for命令有一个用来指明变量的特定方法，一个必须保持成立才能继续选代的条件，
以及另一个在每个选代中改变变量的方法。当指定的条件不成立时，for循环就会停止。条件等
式通过标准的数学符号定义。比如，考虑下面的C语言代码：
for (i = 0; i < 10; i++)
printf(*The next number is di\n*, i)
这段代妈产生了一个简单的送代循环，其中变量i作为计数器。第一部分将一个默认值赋给
该变量。中间的部分定义了循环重复的条件。当定义的条件不成立时，for循环就停止选代。最
后一部分定义了选代的过程。在每次送代之后，最后一部分中定义的表达式会被执行。在本例中，