5
function funct 
6
echo "Step 2"
7
return
8
10
# Main program starts here
11
12
13
funct
14
随着shell读取这个脚本，它会跳过第1行到第11行的代码，因为这些文本行由注释和函数
定义组成。从第12行代码开始执行，有一个echo命令。第13行会调用shell函数funct，然
后shell会执行这个函数，就如执行其它命令一样。这样程序控制权会转移到第六行，执行第二
个echo命令。然后再执行第7行。这个return命令终止这个函数，并把控制权交给函数调用
之后的代码（第14行），从而执行最后一个echo命令。注意为了使函数调用被识别出是shell
函数，而不是被解释为外部程序的名字，在脚本中shell函数定义必须出现在函数调用之前。
我们将给脚本添加最小的shell函数定义：
#!/bin/bash
# Progran to output a systen information page
TITLE="Systen Infornation Report For $HOSTNAME*
CURRENT_TIME=$(date +*%x %x %Z")
TIME_STAMP=*Generated $CURRENT_TIME, by $USER*
report_uptine () {
return
J
report_disk_space (){
return
377
---
## Page 379
report_home_space () {
return
cat 
$TITLE
$TIME_STAMP
$(report_uptine)
$(report_disk_space)
(oseds"ouoq²sxodox)$
_EOF
Shell函数的命名规则和变量一样。一个函数必须至少包含一条命令。这条return命令（是
可选的）满足要求。
27.2局部变量
目前我们所写的脚本中，所有的变量（包括常量）都是全局变量。全局变量在整个程序中保持
存在。对于许多事情来说，这很好，但是有时候它会使shell函数的使用变得复杂。在shell函
数中，经常期望会有局部变量。局部变量只能在定义它们的shell函数中使用，并且一旦shell
函数执行完毕，它们就不存在了。
局部变量的存在使得程序员可以使用可能已存在的变量，这些变量可以是全局变量，或者是
其它shell函数中的局部变量，却不必担心潜在的名字冲突。
这里有一个实例脚本，其说明了怎样来定义和使用局部变量：
#!/bin/bash
# local-vars: script to denonstrate 1ocal variables
foo=0 # global variable foo
funct_1 () {
1ocal foo # variable foo localto funct_1
378
---
## Page 380
foo=1
echo "funct_1: foo = Sfoo*
funct_2 () {
1ocal foo # variable foo local to funct_2
foo=2
echo "funct_2: foo = $foo*
J
echo *global: foo = Sfoo*
funct_1
echo *global: foo = $foo*
funct_2
echo *global: foo = $foo"
正如我们所看到的，通过在变量名之前加上单词local，来定义局部变量。这就创建了一个
只对其所在的shell函数起作用的变量。在这个shell函数之外，这个变量不再存在。当我们运
行这个脚本的时候，我们会看到这样的结果：
[ne@linuxbox -]$ local-vars
global: foo = 0
funct_1: foo = 1
global: foo = 0
funct_2: foo = 2
global: foo = 0
我们看到对两个shell函数中的局部变量foo赋值，不会影响到在函数之外定义的变量foo
的值。
这个功能就允许shell函数能保持各自以及与它们所在脚本之间的独立性。这个非常有价
值，因为它帮忙阻止了程序各部分之间的相互干涉。这样shell函数也可以移植。也就是说，按
照需求，shell函数可以在脚本之间进行剪切和粘贴。
27.3保持脚本运行
当开发程序的时候，保持程序的可执行状态非常有用。这样做，并且经常测试，我们就可以在
程序开发过程的早期检测到错误。这将使调试问题容易多了。例如，如果我们运行这个程序，
---
## Page 381
做一个小的修改，然后再次执行这个程序，最后发现一个问题，非常有可能这个最新的修改就
是问题的来源。通过添加空函数，程序员称之为stub，我们可以在早期阶段证明程序的逻辑流
程。当构建一个stub的时候，能够包含一些为程序员提供反馈信息的代码是一个不错的主意，
这些信息展示了正在执行的逻辑流程。现在看一下我们脚本的输出结果：
[nedlinuxbox -]$ sys_info_page
Systen Infornation Report For tuin2
System Information Report For linuxbox
Generated 03/19/2009 04:02:10 PM EDT, by me
我们看到时间截之后的输出结果中有一些空行，但是我们不能确定这些空行产生的原因。
如果我们修改这些函数，让它们包含一些反馈信息：
report_uptine () (
echo "Function report_uptine executed."
return
report_disk_space ()(
echo "Function report_disk_space executed.*
return
f
report_home_space () {
echo "Function report_hone_space executed.*
return
然后再次运行这个脚本：
380
---
## Page 382
[nedlinuxbox -]$ sys_info_page
Systen Infornation Report For linuxbox
System Information Report For linuxbox
Generated 03/20/2009 05 :17:26 AM EDT, by me
Function report_uptise executed.
Function report_disk_space executed.
Function report_hone_space executed.
现在我们看到，事实上，执行了三个函数。
我们的函数框架已经各就各位并且能工作，是时候更新一些函数代码了。首先，是
report_uptime 西数：
report_uptine () {
cat Systen Uptime
$ (uptime)
_EOF
return
J
这些代码相当直截了当。我们使用一个here文档来输出标题和uptime命令的输出结果
命令结果被标签包围.为的是保持命令的输出格式。这个report_disk_space函数类
似：
report_disk_space () Disk Space Utilizatios
$(df h)
381
---
## Page 383
_EOF。
return
f
这个函数使用df-h命令来确定磁盘空间的数量。最后，我们将建造report_home_space
函数：
report_home_space () (
cat 
$(du =sh /hone/+)
_E0F。
return
我们使用带有-sh选项的du命令来完成这个任务。然而，这井不是此问题的完整解决方
案。虽然它会在一些系统（例如Ubuntu）中起作用，但是在其它系统中它不工作。这是因为许
多系统会设置家目录的权限，以此阻止其它用户读取它们，这是一个合理的安全措施。在这些
系统中，这个report_home_space函数，只有用超级用户权限执行我们的脚本时，才会工作。
一个更好的解决方案是让脚本能根据用户的使用权限来调整自己的行为。我们将在下一章中讨
论这个问题。
你的.bashrc文件中的 shell函数
Shell函数完美地替代了别名，并且实际上是创建个人所用的小命令的首选方法。
别名非常局限于命令的种类和它们支持的shell功能，然而shell函数允许任何可以
shell函数，我们可以为我们的.bashrc文件创建一个相似的名为ds的函数：
ds () {
-FP
382
---
## Page 384
27.4总结归纳
这一章中，我们介绍了一种常见的程序设计方法，叫做自顶向下设计，并且我们知道了怎样使
用shell函数按照要求来完成逐步细化的任务。我们也知道了怎样使用局部变量使shell函数独
立于其它函数，以及其所在程序的其它部分。这就有可能使shell函数以可移植的方式编写，井
且能够重复使用，通过把它们放置到多个程序中：节省了大量的时间。
27.5拓展阅读
·Wikipedia上面有许多关于软件设计原理的文章。这里是一些好文章：
http://en.wikipedia.org/wiki/Top-down_design
http://en.wikipedia.org/wiki/Subroutines
383
---
## Page 385
28
流程控制：if分支结构
在上一章中，我们遇到一个问题。怎样使我们的报告生成器脚本能适应运行此脚本的用户的权
向”。用编程术语表达，就是我们需要程序可以分支。让我们考虑一个简单的用伪码表示的逻
辑实例，伪码是一种模拟的计算机语言。为的是便于人们理解：
X=5
If X = 5,then:
Say "X equals 5."
Othervise:
Say"X is not equal to 5.
做另一件事情，“SayXis not equal to 5.
28.1if
使用shell，我们可以编码上面的逻辑，如下所示
x=5
if [ $x = 5 ];then
echo "x equals 5.*
else
echc
fi
或者我们可以直接在命令行中输入以上代码（略有缩短）：
384
---
## Page 386
[ne@linuxbox -]$ x=5
[ne@linuxbox -]$ if [ $x = 5 ]; then echo *equals 5"; else echo “does
下:9 tenbo 4ou
equals 5
[ne@linuxbox -]$ x=0
[ne@linuxbox -]$ if [ $x = 5 ]; then echo *equals 5"; else echo “does
's tenbo 4ou
9 tenba qou saop
在这个例子中，我们执行了两次这个命令。第一次是，把x的值设置为5，从而导致输出字
符串“equals5”，第二次是，把x的值设置为0，从而导致输出字符串“does notequal5”。
这个if语句语法如下：
if conmands; then
comnands
[elif commands; then
comnands. . -]
[else
comnands]
fi
这里的commands是指一系列命令。第一眼看到会有点儿困惑。但是在我们弄清楚这些语
句之前，我们必须看一下shell是如何评判一个命令的成功与失败的。
28.2退出状态
当命令执行完毕后，命令（包括我们编写的脚本和shell函数）会给系统发送一个值，叫做退出
状态。这个值是一个0到255之间的整数，说明命令执行成功或是失败。按照惯例，一个零值
说明成功，其它所有值说明失败。Shell提供了一个参数，我们可以用它检查退出状态。用具体
实例看一下：
[ne@linuxbox -]$ 1s -d /usr/bin
/usr/bin
385
---
## Page 387
[ne@linuxbox -]$ echo $?
0
[ne@linuxbox -]$ 1s -d /bin/usr
ls: cannot access /bin/usr: Bo such file or directory
[ne@linuxbox -]$ echo $?
2
在这个例子中，我们执行了两次s命令。第一次，命令执行成功。如果我们显示参数$？
的值，我们看到它是零。我们第二次执行s命令的时候，产生了一个错误，并再次查看参数
$？。这次它包含一个数字2，表明这个命令遇到了一个错误。有些命令使用不同的退出值，来
诊断错误，而许多命令当它们执行失败的时候，会简单地退出并发送一个数字1。手册页中经
常会包含一章标题为“退出状态”的内容，描远了使用的代码。然而，一个零总是表明成功。