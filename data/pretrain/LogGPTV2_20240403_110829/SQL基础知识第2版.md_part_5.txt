ALTER TABLE Orders
ADD FOREIGN KEY (客户ID)
REFERENCES Customers(客户ID)
如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下
面的 SQL 语法：
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Orders
ADD CONSTRAINT fk_CusOrders
FOREIGN KEY (客户ID)
REFERENCES Persons(客户ID)
删除 FOREIGN KEY 约束
如需删除FOREIGN KEY 约束，请使用下面的 SQL：
MySQL：
ALTER TABLE Orders DROP FOREIGN KEY fk_CusOrders
SQL Server / Oracle / MS Access：
ALTER TABLE Orders DROP CONSTRAINT fk_CusOrders
22.5 DEFAULT约束
DEFAULT 约束用于向列中插入默认值。
如果没有规定其他的值，那么会将默认值添加到所有的新记录。
CREATE TABLE 时的DEFAULT 约束
下面的 SQL 在 "Customers" 表创建时在 "城市" 列上创建 DEFAULT 约束：
My SQL / SQL Server / Oracle / MS Access：
CREATE TABLE dbo.Customers(
客户ID INT NOT NULL,
姓名 VARCHAR(10) NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL DEFAULT '北京市',
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL
) ;
SQL Server中通过使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于
插入系统值：
CREATE TABLE dbo.Orders(
订单ID INT NOT NULL,
客户ID INT NULL,
员工ID INT NULL,
订单日期 DATETIME NULL DEFAULT GETDATE(),
发货ID INT NULL
) ;
ALTER TABLE 时的DEFAULT 约束
当表已被创建时，如需在 "城市" 列创建 DEFAULT 约束，请使用下面的 SQL：
MySQL：
ALTER TABLE Customers ALTER 城市 SET DEFAULT '北京市'
SQL Server / MS Access：
ALTER TABLE Customers
ADD CONSTRAINT DF_Customers DEFAULT('北京市') FOR 城市
--注释
--Customers为表名
--城市 为列名
--DF_Customers 为我们创建的默认约束的名称 约束名称一般为:约束类型简称_
表名
Oracle：
ALTER TABLE Customers MODIFY 城市 DEFAULT '北京市'
删除DEFAULT 约束
如需删除DEFAULT 约束，请使用下面的 SQL：
MySQL：
ALTER TABLE Customers ALTER 城市 DROP DEFAULT
SQL Server / Oracle / MS Access：
ALTER TABLE Customers ALTER COLUMN 城市 DROP DEFAULT
22.6 CHECK约束
CHECK 约束用于限制列中的值的范围。
如果对单个列定义 CHECK 约束，那么该列只允许特定的值。
如果对一个表定义 CHECK 约束，那么此约束会基于行中其他列的值在特定的列中
对值进行限制。
CREATE TABLE 时的CHECK 约束
下面的 SQL 在 "Customers" 表创建时在 "客户 ID" 列上创建 CHECK 约束。
CHECK 约束规定 "客户ID" 列必须只包含大于 0 的整数。
MySQL：
CREATE TABLE dbo.Customers(
客户ID INT NOT NULL,
姓名 VARCHAR(10) NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL,
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL,
CHECK (客户ID>0)
) ;
SQL Server / Oracle / MS Access：
CREATE TABLE dbo.Customers(
客户ID INT NOT NULL CHECK (客户ID>0),
姓名 VARCHAR(10) NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL,
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL
) ;
如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：
MySQL / SQL Server / Oracle / MS Access：
CREATE TABLE dbo.Customers(
客户ID INT NOT NULL,
姓名 VARCHAR(10) NULL,
地址 VARCHAR(50) NULL,
城市 VARCHAR(20) NULL,
邮编 CHAR(6) NULL,
省份 VARCHAR(20) NULL,
CONSTRAINT chk_Customers CHECK (客户ID>0 AND 城市='北京市')
) ;
ALTER TABLE 时的CHECK 约束
当表已被创建时，如需在 "客户ID" 列创建 CHECK 约束，请使用下面的 SQL：
MySQL / SQL Server / Oracle / MS Access:
ALTER TABLE Customers ADD CHECK (客户ID>0)
如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：
MySQL / SQL Server / Oracle / MS Access：
ALTER TABLE Customers
ADD CONSTRAINT chk_Customers CHECK (客户ID>0 AND 城市='北京市')
删除CHECK 约束
如需CHECK 约束，请使用下面的 SQL：
SQL Server / Oracle / MS Access：
ALTER TABLE Customers DROP CONSTRAINT chk_Customers
MySQL：
ALTER TABLE Customers DROP CHECK chk_Customers
22.7批注
以上六种约束是工作中经常使用到的，主要还是用来规范数据，随着数据量的增多，
如果不对表结构加以约束，那么会有越来越多的“脏数据”进入到数据库，这对业务
系统来说是非常不愿意碰到的。所以为了能够高效的使用数据库，请从表结构的设
计上下更多的功夫。
第二十三章 索引的用法
23.1 什么是索引
索引是一种特殊的查询表，可以被数据库搜索引擎用来加速数据的检索。简单说来，
索引就是指向表中数据的指针。数据库的索引同书籍后面的索引非常相像。
例如，如果想要查阅一本书中与某个特定主题相关的所有页面，你会先去查询索引
（索引按照字母表顺序列出了所有主题），然后从索引中找到一页或者多页与该主
题相关的页面。
23.2 索引的作用
索引能够提高 SELECT 查询和 WHERE 子句的速度，但是却降低了包含 UPDATE
语句或 INSERT 语句的数据输入过程的速度。索引的创建与删除不会对表中的数据
产生影响。
创建索引需要使用 CREATE INDEX 语句，该语句允许对索引命名，指定要创建索
引的表以及对哪些列进行索引，还可以指定索引按照升序或者降序排列。
同 UNIQUE 约束一样，索引可以是唯一的。这种情况下，索引会阻止列中（或者
列的组合，其中某些列有索引）出现重复的条目。
23.3 CREATE INDEX 命令
CREATE INDEX命令的基本语法如下：
CREATE INDEX index_name ON table_name;
单列索引：
单列索引基于单一的字段创建，其基本语法如下所示：
CREATE INDEX index_name ON
table_name (column_name);
以表"Customers"为例，我们想在"城市"列上面建一个索引，可以这样写：
CREATE INDEX index_城市 ON
Customers (城市);
我们看一下我们建好的索引。
唯一索引
唯一索引不止用于提升查询性能，还用于保证数据完整性。唯一索引不允许向表中
插入任何重复值。其基本语法如下所示：
CREATE UNIQUE INDEX index_name ON
table_name (column_name);
我们还是以"Customers"表为例，在"客户ID"这一列上建立一个唯一索引
CREATE UNIQUE INDEX index_客户ID ON
Customers (客户ID);
我们看一下建好的唯一索引
聚簇索引
聚簇索引在表中两个或更多的列的基础上建立。其基本语法如下所示：
CREATE INDEX index_name ON
table_name (column1, column2);
我们在表"Customers"上建立一个列"城市"和"省份"的聚簇索引
CREATE INDEX index_城市省份 ON
Customers (城市, 省份);
结果如下：
创建单列索引还是聚簇索引，要看每次查询中，哪些列在作为过滤条件的 WHERE
子句中最常出现。
如果只需要一列，那么就应当创建单列索引。如果作为过滤条件的 WHERE 子句用
到了两个或者更多的列，那么聚簇索引就是最好的选择。
隐式索引
隐式索引由数据库服务器在创建某些对象的时候自动生成。例如，对于主键约束和
唯一约束，数据库服务器就会自动创建索引。
23.4 删除索引
索引可以用 DROP 命令删除。删除索引时应当特别小心，数据库的性能可能会因此
而降低或者提高。
其基本语法如下：
DROP INDEX index_name ON table_name;
我们将上面在表"Customers"建立的几个索引一一删除
DROP INDEX index_城市 ON Customers;
DROP INDEX index_城市省份 ON Customers;
DROP INDEX index_客户ID ON Customers;
我们在看一下结果
证明索引已经全部被删除掉了
23.5 什么时候应当避免使用索引
尽管创建索引的目的是提升数据库的性能，但是还是有一些情况应当避免使用索引。
下面几条指导原则给出了何时应当重新考虑是否使用索引：
• 小的数据表不应当使用索引；
• 需要频繁进行大批量的更新或者插入操作的表；
• 如果列中包含大数或者 NULL 值，不宜创建索引；
• 频繁操作的列不宜创建索引。
23.6 批注
索引在查询优化中有很大的作用，在约束上也有一定的作用，如能熟练使用索引，
对今后处理比较复杂的查询语句会大有裨益。当然也要注意什么时候该使用索引，
切不可盲目的使用索引。
第二十四章 子查询的用法
24.1 什么是子查询
子查询（Sub Query）或者说内查询（Inner Query），也可以称作嵌套查询（Nested
Query），是一种嵌套在其他 SQL 查询的 WHERE 子句中的查询。
子查询用于为主查询返回其所需数据，或者对检索数据进行进一步的限制。
子查询可以在 SELECT、INSERT、UPDATE 和 DELETE 语句中，同 =、、>=、
1
)
其执行结果如下所示：
上面的代码用了一个子查询，主要是因为在SQL Server中GROUP BY分组后，在