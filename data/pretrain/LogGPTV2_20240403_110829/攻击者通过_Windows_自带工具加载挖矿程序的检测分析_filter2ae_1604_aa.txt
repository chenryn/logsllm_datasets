# 攻击者通过 Windows 自带工具加载挖矿程序的检测分析
|
##### 译文声明
本文是翻译文章，文章原作者 Tony Lambert，文章来源：redcanary.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
我在职业生涯早期学到的一个教训是，技术专业人员通常会继承老问题。对于负责网络服务和安全的管理员来说尤其如此，因为他们继承了最大的问题：企业网络。随着网络的老化，网络往往变得更加难以安全和维护，而管理员常常实施新的安全措施，却发现他们的环境中已经存在一些邪恶的东西。
Red Canary的探测工程师对这个概念并不陌生。由于我们与事件响应伙伴的关系日益密切，Red
Canary通常部署在事件已经在进行中的环境中。尽管没有观察到最初的攻击，我们的网络事件响应小组([Cyber Incident Response
Team/CIRT](https://redcanary.com/blog/slaying-evil-cyber-incident-response-team/))可以提供一个全面的关于攻击者策略的观点，以加快补救。
在本文中，我将介绍一个场景，在这个场景中，我们与IR的一个合作伙伴一起进行搜索，以阻止正在进行的攻击。我还将分享检测策略，以发现在此事件中使用的攻击策略，以及越过陈旧的补丁管理建议的预防策略。
## 邪恶的最初迹象
当通过IR合作伙伴部署Red Canary时，事件处理程序通常会向检测工程团队简要介绍即将发生的事件的背景信息。在这种情况下，Red
Canary令人敬畏的Eric
Groce让我们知道，我们很快就会为一个由于恶意活动而无法使用网络的组织提供调查支持。这些问题严重影响了该组织的业务，我们将看到大量的事件。不久之后，我们看到了第一批事件的发生，从攻击者已经放置在设备上的持久性机制开始。
我们的第一个邪恶的迹象是应用白名单绕过技术，这种技术是在几年前因为我们的应用研究主任Casey
Smith而流行的。在这种情况下，运行Windows计划任务（Windows Scheduled
Task），执行Regsvr32.exe的实例以下载和执行代码。(这通常称为squiblydoo攻击。Casey在这篇[Atomic Red
Team](https://redcanary.com/blog/atomic-red-team-testing/)的文章中介绍了这次攻击。)
[](https://p2.ssl.qhimg.com/t01b97ba5c796d39e98.png)
下载的payload声称是PHP脚本文件，但其实是恶意脚本，进一步导致Windows命令处理程序(cmd.exe)产生PowerShell，然后Powershell执行Base64编码的命令来下载并执行第二个payload:antivirus.ps1。
[](https://p3.ssl.qhimg.com/t01f286e5751ffd82cb.png)
从这里开始，执行额外的PowerShell来检索以前存储为[Windows Management Instrumentation
(WMI)事件订阅](https://attack.mitre.org/wiki/Technique/T1084)的属性的代码。这与我们通常在“无文件(fileless)”恶意软件执行中看到的情况略有不同，后者通常使用Windows注册表项来存储PowerShell
payload，WMI类属性的使用更少，维护者更难检查和补救。
[](https://p2.ssl.qhimg.com/t01a4d07940f24880c4.png)
此时，我们已经可以看到，攻击者已经在组织的各个端点建立了相当大的持久性。我们收到了来自100多个主机的事件，显示了计划的任务执行和通过PowerShell检索WMI类属性。
## 挖矿开始
我们的下一个邪恶迹象来自WMI用于生成PowerShell的主机。我们可以基于PowerShell的父进程得出这样的结论：通过WMI生成的进程具有wmiprvse.exe的父进程。PowerShell命令再次使用base64进行编码，在解码之后我们可以看到一个复杂的脚本。
[](https://p0.ssl.qhimg.com/t0190185ad1a9a80c36.png)
攻击者创建了一个脚本，该脚本将检查工具的新版本，并在查询的版本号更改时尝试下载新的payload。在随后的脚本中，我们还观察到了查询端点的活动网络连接的攻击者，我们很快就发现了原因。对于每个具有已建立网络连接的进程，恶意PowerShell脚本都会执行findstr.exe的实例。这个内置的Windows实用程序用于搜索文件中由用户指定的文本字符串。在这种情况下，攻击者使用它来搜索与加密相关的字符串：“cryptonight”。
[](https://p4.ssl.qhimg.com/t017aee4d9b2ed5ebdd.png)
这种奇怪的行为是有意义的，一旦我们将其与我们在恶意挖矿程序实例中看到的行为进行比较。将挖矿程序作为payload部署的攻击者通常遵循以下模式：
  1. 将挖掘工具下载到端点。
  2. 检查端点，看看程序是否已经在运行。
  3. 终止任何现有的挖矿程序。
  4. 启动程序并继续。
在本例中，findstr.exe是在网络连接进程运行的每个二进制文件中执行的。如果这些进程中的任何一个包含字符串“cryptonight”，则恶意脚本将终止该进程并开始执行挖矿活动。
[](https://p2.ssl.qhimg.com/t01ecf15ce7f3f38d9a.png)
在Carbon Black (Cb)
Response中观察到的数据没有显示与PowerShell以外的这些活动相关的特定二进制文件，因此我们假设挖掘程序的加载方式对于CB响应来说是不可见的。后来，我们通过获取恶意PowerShell脚本并发现它使用一个版本的Invoke-ReflectivePEInjection(来自PowerSploit)将XMRig
Miner二进制文件加载到PowerShell中，从而确认了这一点。这个二进制文件使用Base64进行编码，并存储在脚本中，该脚本随后在运行时动态地提取它。通过使用反射注入，脚本加载挖掘程序二进制文件的方式避免了像LoadLibrary调用那样的Windows
API调用。这种技术通过对依赖Windows API调用的工具隐藏数据来了解加载了哪些二进制文件和代码库。
本质上，这个脚本包含了在运行时部署挖矿程序所需的所有内容，并通过这种对于大多数不结合某种形式的内存分析来检查PowerShell的内存空间的工具来说是不可见的方式部署，而不是信任API。
## 横向运动时间
在挖矿过程中，PowerShell脚本还开始扫描本地网络，查找445端口为服务器消息块(SMB)服务打开的主机。有读者可能会注意到我们以前见过这种模式。事实上，世界在2017年WannaCry
ransomware运动期间以及随后的几个月中都看到了这种模式，当时攻击者创造性地合并了WannaCry方法，并利用挖矿paload来分发WannaMare恶意软件。
[](https://p0.ssl.qhimg.com/t01acbac86da8199e31.png)
在挖矿活动的同时，我们开始注意到证书失窃的迹象。Powershell加载了两个动态链接库(DLL)，这两个库通常在凭证窃取攻击期间被观察到：samlib.dll和vaultcli.dll。此外，我们还发现PowerShell正在读取Windows本地安全授权进程(lsass.exe)的内存空间。
[](https://p1.ssl.qhimg.com/t016f02f6d00654a87c.png)
这些行为与我们观察到的攻击者使用MimiKatz窃取或滥用密码哈希的情况非常相似。当在这个上下文中拼凑在一起时，我们假设像MimiKatz这样的工具已经被加载到PowerShell中来收集合法的凭证，然后这些凭证被用来验证到其他端点，并传播一个加密的payload。这个策略显然有效，因为我们在环境中的200个主机上发现了类似的活动。
## 可能的第一感染者（Patient Zero）
在200多个检测中，只有一个端点在对抗性行为模式上表现出明显的偏离。在这个主机上，我们观察到从Java进程产生的奇怪命令。Windows命令行窗口(cmd.exe)的一个实例用于将编码的PowerShell命令写入VBScript中执行，命名脚本javaupdato.vbs。