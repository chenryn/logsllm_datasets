## 第二次软件危机与面向对象（20 世纪 80 年代） {#03.html#-20-80-}结构化编程的风靡在一定程度上缓解了软件危机，然而随着硬件的快速发展，业务需求越来越复杂，以及编程应用领域越来越广泛，第二次软件危机很快就到来了。第二次软件危机的根本原因还是在于软件生产力远远跟不上硬件和业务的发展。第一次软件危机的根源在于软件的"逻辑"变得非常复杂，而第二次软件危机主要体现在软件的"扩展"变得非常复杂。结构化程序设计虽然能够解决（也许用"缓解"更合适）软件逻辑的复杂性，但是对于业务变化带来的软件扩展却无能为力，软件领域迫切希望找到新的银弹来解决软件危机，在这种背景下，**面向对象的思想**开始流行起来。面向对象的思想并不是在第二次软件危机后才出现的，早在 1967 年的 Simula语言中就开始提出来了，但第二次软件危机促进了面向对象的发展。**面向对象真正开始流行是在20 世纪 80 年代，主要得益于 C++ 的功劳，后来的 Java、C#把面向对象推向了新的高峰。到现在为止，面向对象已经成为了主流的开发思想。**虽然面向对象开始也被当作解决软件危机的银弹，但事实证明，和软件工程一样，面向对象也不是银弹，而只是一种新的软件方法而已。
## 软件架构的历史背景 {#03.html#-}虽然早在 20 世纪 60年代，戴克斯特拉这位上古大神就已经涉及软件架构这个概念了，但软件架构真正流行却是从20 世纪 90 年代开始的，由于在 Rational 和 Microsoft内部的相关活动，软件架构的概念开始越来越流行了。与之前的各种新方法或者新理念不同的是，"软件架构"出现的背景并不是整个行业都面临类似相同的问题，"软件架构"也不是为了解决新的软件危机而产生的，这是怎么回事呢？卡内基·梅隆大学的玛丽·肖（Mary Shaw）和戴维·加兰（DavidGarlan）对软件架构做了很多研究，他们在 1994年的一篇文章《软件架构介绍》（An Introduction to SoftwareArchitecture）中写到：> "When systems are constructed from many components, the organization> of the overall system-the software architecture-presents a new set of> design problems."简单翻译一下：随着软件系统规模的增加，计算相关的算法和数据结构不再构成主要的设计问题；当系统由许多部分组成时，整个系统的组织，也就是所说的"软件架构"，导致了一系列新的设计问题。这段话很好地解释了"软件架构"为何先在 Rational 或者 Microsoft这样的大公司开始逐步流行起来。因为只有大公司开发的软件系统才具备较大规模，而只有规模较大的软件系统才会面临软件架构相关的问题，例如：-   系统规模庞大，内部耦合严重，开发效率低；-   系统耦合严重，牵一发动全身，后续修改和扩展困难；-   系统逻辑复杂，容易出问题，出问题后很难排查和修复。软件架构的出现有其历史必然性。20 世纪 60年代第一次软件危机引出了"结构化编程"，创造了"模块"概念；20 世纪 80年代第二次软件危机引出了"面向对象编程"，创造了"对象"概念；到了 20 世纪90年代"软件架构"开始流行，创造了"组件"概念。我们可以看到，"模块""对象""组件"本质上都是对达到一定规模的软件进行拆分，差别只是在于随着软件的复杂度不断增加，拆分的粒度越来越粗，拆分的层次越来越高。《人月神话》中提到的 IBM 360 大型系统，开发时间是 1964年，那个时候结构化编程都还没有提出来，更不用说软件架构了。如果 IBM 360系统放在 20 世纪 90 年代开发，不管是质量还是效率、成本，都会比 1964年开始做要好得多，当然，这样的话我们可能就看不到《人月神话》了。
## 小结 {#03.html#-}今天我为你回顾了软件开发进化的历史，以及软件架构出现的历史背景，从历史发展的角度，希望对你深入了解架构设计的本质有所帮助。这就是今天的全部内容，留一道思考题给你吧。为何结构化编程、面向对象编程、软件工程、架构设计最后都没有成为软件领域的银弹？欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）![](Images/f2eae62fce5bba3ca5ee38d11da01862.png){savepage-src="https://static001.geekbang.org/resource/image/ba/37/ba6fcd186893b8cc9977d18e1fa5ab37.jpg"}
# 03 \| 架构设计的目的周二，我们聊了架构出现的历史背景和推动因素。以史为鉴，对我们了解架构设计的目的很有帮助。谈到架构设计，相信每个技术人员都是耳熟能详，但如果深入探讨一下，"为何要做架构设计？"或者"[架构设计目的是什么？]{.orange}"类似的问题，大部分人可能从来没有思考过，或者即使有思考，也没有太明确可信的答案。
## 架构设计的误区关于架构设计的目的，常见的误区有：-   因为架构很重要，所以要做架构设计这是一句正确的废话，架构是很重要，但架构为何重要呢？例如：不做架构设计系统就跑不起来么？其实不然，很多朋友尤其是经历了创业公司的朋友可能会发现，公司的初始产品可能没有架构设计，大伙撸起袖子简单讨论一下就开始编码了，根本没有正规的架构设计过程，而且也许产品开发速度还更快，上线后运行也还不错。例如：做了架构设计就能提升开发效率么？也不尽然，实际上有时候最简单的设计开发效率反而是最高的，架构设计毕竟需要投入时间和人力，这部分投入如果用来尽早编码，项目也许会更快。例如：设计良好的架构能促进业务发展么？好像有一定的道理，例如设计高性能的架构能够让用户体验更好，但反过来想，我们照抄微信的架构，业务就能达到微信的量级么？肯定不可能，不要说达到微信的量级，达到微信的1/10 做梦都要笑醒了。-   不是每个系统都要做架构设计吗这其实是知其然不知其所以然，系统确实要做架构设计，但还是不知道为何要做架构设计，反正大家都要做架构设计，所以做架构设计肯定没错。这样的架构师或者设计师很容易走入生搬硬套业界其他公司已有架构的歧路，美其名曰"参考""微改进"。一旦强行引入其他公司架构后，很可能会发现架构水土不服，或者运行起来很别扭等各种情况，最后往往不得不削足适履，或者不断重构，甚至无奈推倒重来。-   公司流程要求系统开发过程中必须有架构设计与此答案类似还有因为"架构师总要做点事情"，所以要做架构设计，其实都是舍本逐末。因为流程有规定，所以要做架构设计；因为架构师要做事，所以要做架构设计，这都是很表面地看问题，并没有真正理解为何要做架构设计，而且很多需求并不一定要进行架构设计。如果认为架构师一定要找点事做，流程一定要进行架构设计，就会出现事实上不需要架构设计但形式上却继续去做架构设计，不但浪费时间和人力，还会拖慢整体的开发进度。-   为了高性能、高可用、可扩展，所以要做架构设计能够给出这个答案，说明已经有了一定的架构经历或者基础，毕竟确实很多架构设计都是冲着高性能、高可用......等"高XX"的目标去的。但往往持有这类观点的架构师和设计师会给项目带来巨大的灾难，这绝不是危言耸听，而是很多实际发生的事情，为什么会这样呢？因为这类架构师或者设计师不管三七二十一，不管什么系统，也不管什么业务，上来就要求"高性能、高可用、高扩展"，结果就会出现架构设计复杂无比，项目落地遥遥无期，团队天天吵翻天......等各种让人抓狂的现象，费尽九牛二虎之力将系统整上线，却发现运行不够稳定，经常出问题，出了问题很难解决，加个功能要改1 个月......等各种继续让人抓狂的事件。