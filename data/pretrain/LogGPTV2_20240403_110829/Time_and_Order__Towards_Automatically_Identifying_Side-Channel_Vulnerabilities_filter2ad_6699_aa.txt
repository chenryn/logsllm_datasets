title:Time and Order: Towards Automatically Identifying Side-Channel Vulnerabilities
in Enclave Binaries
author:Wubing Wang and
Yinqian Zhang and
Zhiqiang Lin
Time and Order: Towards Automatically Identifying Side-Channel Vulnerabilities
in Enclave Binaries
Wubing Wang
Yinqian Zhang
Zhiqiang Lin
Department of Computer Science and Engineering
The Ohio State University
Abstract
While Intel SGX provides conﬁdentiality and integrity guar-
antees to programs running inside enclaves, side channels
remain a primary concern of SGX security. Previous works
have broadly considered the side-channel attacks against SGX
enclaves at the levels of pages, caches, and branches, using a
variety of attack vectors and techniques. Most of these stud-
ies have only exploited the “order” attribute of the memory
access patterns (e.g., sequences of page accesses) as side
channels. However, the other attribute of memory access pat-
terns, “time”, which characterizes the interval between two
speciﬁc memory accesses, is mostly unexplored. In this paper,
we present ANABLEPS, a tool to automate the detection of
side-channel vulnerabilities in enclave binaries, considering
both order and time. ANABLEPS leverages concolic execution
and fuzzing techniques to generate input sets for an arbitrary
enclave program, constructing extended dynamic control-ﬂow
graph representation of execution traces using Intel PT, and
automatically analyzing and identifying side-channel vulner-
abilities using graph analysis.
1
Introduction
Intel Software Guard eXtension (SGX) is a hardware addition
that is available in recent Intel processors. It offers both in-
tegrity and conﬁdentiality to application software running in
a shielded execution environment—a secure enclave—even
when the entire operating system is untrusted. Recent work
has explored the use of Intel SGX for a variety of applications
such as secure cloud data analytics [25], smart contracts [44],
anonymity network [18], game hacking protection [7], and
unmodiﬁed code execution [8, 31], which have outlined a
promising future of SGX’s broad adoption in both server-end
and client-side computation.
Computer micro-architecture related side channels are not
new. Side-channel attacks that exploit micro-architectural re-
sources shared by mutually distrusting computing entities
(e.g., processes or threads) date back to the era of Pentium
4 [23, 24]. A malicious program or a virtual machine may
manipulate the shared micro-architectural resources, such
as CPU caches, branch prediction units, or function units,
to learn the pattern with which these resources are used
by the victim program and thereby infer secrets that dictate
such a usage pattern. Over the past decades, computer micro-
architecture has evolved drastically, but the issues of side
channels remain. What differ in the SGX context are two
fold: First, as SGX is designed to protect the conﬁdential-
ity of applications that demand high levels of security, side
channels become a major security threats. Second, because
the adversary against SGX enclaves is assumed to have OS
system-level privileges, a wider range of attacks are enabled.
Particularly, over the past a few years, researchers have demon-
strated that secrets can be leaked from a variety of attack vec-
tors, such as branch prediction units [20], CPU caches [17],
paging structures [35, 38, 43], and DRAM row buffers [38].
Completely eliminating side channels from CPU chips
is unrealistic. Admitting this decades-old security concern,
Intel recommends developers take special care to avoid side-
channel vulnerabilities when writing enclave code [6]. How-
ever, developers are not experts of side channels and relying
on regular program developers to solve side-channel issues
is less promising. Moreover, there is no tool available that
helps the developers automatically identify improper coding
patterns in their enclave binaries.
In this paper, we aim to explore principles and techniques
that automatically identify side-channel vulnerabilities in en-
clave binaries that allow a side-channel attacker who is able
to observe execution traces of the control ﬂow of an enclave
program to infer sensitive information inside the enclave. The
root cause of the vulnerability is the secret-dependent control
ﬂows that are inherent in the enclave code. More speciﬁcally,
since side-channel attacks observe the runtime behavior of the
enclave programs, an intuitive approach for the vulnerability
identiﬁcation would be to ﬁnd a large set of secret values (e.g.,
input of the enclave program), run the enclave program with
these secret values, and collect the enclave’s execution traces
with respect to the control ﬂow transfers (CFTs). The diversity
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 443of the collected execution traces for different secret values is a
viable indicator of the side-channel vulnerabilities—if all se-
cret values correspond to the same execution trace, the enclave
code is not vulnerable. With respect to the execution traces,
there are both spatial (i.e., order) and temporal (i.e. time)
differences. A comprehensive solution should include both.
However, it is non-trivial to develop such a comprehen-
sive approach for a number of reasons. First, how to generate
the valid secret values (e.g., program input) to expose the
execution traces at different granularity (e.g., branch, cache,
or page). Second, how to collect the execution traces, espe-
cially the temporal information associated with the traces.
We cannot use static analysis as it will not be able to resolve
secret-dependent CFTs, and meanwhile cannot collect the pre-
cise time information. While we can use dynamic analysis, we
still need to solve the coverage issues. Third, how to represent
the execution traces and perform the cross-comparison, espe-
cially when there are multiple execution traces. Finally, how
to quantitatively analyze the information leakage due to the
detected vulnerabilities. Fortunately, we have addressed these
challenges and built a tool dubbed ANABLEPS, by leveraging
concolic execution and fuzzing techniques to generate input
sets for an arbitrary enclave program, constructing extended
dynamic control-ﬂow graph representation of execution traces
using Intel PT, and automatically analyzing and identifying
side-channel vulnerabilities using graph analysis.
We have tested ANABLEPS with 8 programs and libraries,
including text rendering, image processing, gnomic process-
ing, and deep learning. Our tool has discovered numerous
input leakage execution points for these programs. Our study
also suggests automated tools can identify the side-channel
vulnerabilities based on syntactic inputs and execution traces.
However, the semantics (i.e., the meaning) of the input is also
of critical importance especially for the exploitation of the
side-channel vulnerabilities.
Contributions. To summarize, the contributions of this paper
are as follows:
• A novel and comprehensive approach to detecting both
time-based and order-based control-ﬂow side-channel
vulnerabilities for enclave binaries.
• A practical implementation integrating fuzzing, sym-
bolic execution, and hardware supported execution trac-
ing.
• The ﬁrst large-scale analysis of sensitive control-ﬂow
vulnerabilities for real world enclave binaries.
Roadmap. The rest of the paper is organized as follows. §2
presents necessary background knowledge including related
works to facilitate our discussion of the problem and our moti-
vation. In §3, we present the problem statement and a running
example to highlight our key insights. We detail our design
of ANABLEPS in §4. Then, we present how we implement
ANABLEPS and evaluate its effectiveness in §5. We also made
a number of case studies to understand the exploitability of
the vulnerabilities in §6. §7 discusses the limitation of the
approach and future research directions. Finally, §8 concludes
the paper.
2 Background and Related Work
Intel SGX. At a high level, Intel SGX is a set of new instruc-
tions for the x86 architecture. These instructions allow appli-
cation developers to protect sensitive code and data by utiliz-
ing a secure container called enclave [13]. The trusted hard-
ware establishes an enclave by protecting isolated memory
regions within the existing address space called Processor Re-
served Memory (PRM) to assure conﬁdentiality and integrity
against other non-enclave memory accesses, including kernel,
hypervisor, and other privileged code. The conﬁdentiality of
regions outside the PRM is protected by the memory encryp-
tion engine (MEE). Enclave programs with memory footprints
larger than that is allowed by RPM can make use of memory
regions outside the PRM via page swapping. Memory pages
swapped out of the RPM need to be encrypted by MEE.
SGX Side-Channel Attacks. Side channels are the Achilles’
Heel of Intel SGX’s conﬁdentiality guarantees. In the past
few years, a variety of side-channel attacks have been demon-
strated against SGX enclaves, particularly from the CPU’s
memory management perspective. For instance, it has been
demonstrated that by controlling the present ﬂag or the re-
served ﬂags of the page table entries (PTEs) [29, 43], the
adversary could force the enclave program to trigger page
faults when accessing a memory page, thus extracting suf-
ﬁcient amount of secrets (e.g., image contours, user input,
cryptographic keys). Most recently, it was shown that the
page table access patterns can also leak the enclave secrets
without actively triggering the page fault [35, 38], which can
be achieved by monitoring the accessed ﬂag of the PTEs.
Other micro-architectural side-channel attack vectors
that have been studied on traditional hardware have also
been found exploitable in SGX. It has been demonstrated
that cache-based side-channel attacks can be migrated on
SGX [9, 15, 17, 26], which can be more powerful than
non-SGX settings. Branch prediction units have been demon-
strated to leak the branch history inside the enclaves [20].
DRAM row buffer contention has been exploited to steal
secrets from enclaves [38].
recently, Spectre
[19], Meltdown [21], Fore-
shadow [32], and SGXPectre [10] attacks have been
demonstrated to leverage speculative execution and out-of-
order execution to read memory content protected by MMU
isolation. These attacks are out of scope of this paper as they
are micro-architecture vulnerabilities which cannot be solely
addressed from software.
Most
444          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX AssociationExisting Defenses. A number of enclave hardening tech-
niques have been proposed to mitigate these side-channel
attacks. To defeat page-level side-channel attacks, T-
SGX [28] uses the Transactional Synchronization Extensions
(TSX), DéJà Vu [12] relies on the execution time of the
enclave program path, SGX-LAPD [14] explores the internal
enclave data structures. To guard against cache side channels,
Gruss et al. [16] encapsulates snippets of enclave code into
hardware-supported memory, HyperRace [11] implements
contrived data races. Varys [22] also proposes to reserve
physical cores for secure enclave computation.
Closely related works to ours are Stacco [42], Mi-
croWalk [40], and DATA [39], all of which detect side-channel
vulnerabilities due to secret-dependent control ﬂows. Particu-
larly, Stacco [42] uses Intel Pin tools to detect vulnerabilities
in SSL/TLS implementations, and it manually generates input
to the SSL libraries, and MicroWalk [40] focuses on vulnera-
bilities in Intel IPP and Microsoft CNG. Similarly, DATA [39]
only focuses on differential address trace analysis for crypto-
graphic primitives. In contrast, as ANABLEPS works on arbi-
trary enclave binary, it must generate the large volume of in-
put automatically and conduct vulnerability analysis without
known semantics. These new design challenges differentiate
our work and Stacco, DATA and MicroWalk. Outside the SGX
context, CacheD [37] is also relevant to our work. However,
in contrast to these works, ours considers more attack vectors.
3 Overview
3.1 Problem Statement and Deﬁnitions
The key objective of this work is to automatically identify the
side-channel vulnerabilities caused by the secret-dependent
control-ﬂow transfers in the enclave programs. As enclave
programs are typically shipped to the hosting services in
the form of plaintext binary code, we anticipate the primary
secret that the enclave developer would like to hide is the
input to the enclave code. Therefore, the goal of the attacks
is to learn, through a variety of side channels (e.g., page
accesses [29, 35, 38, 43], cache eviction [9, 15, 17, 26, 33], and
branch prediction [20]), the input to the enclave programs.
However, most of these prior studies on SGX side channels
only consider the order attribute of memory access patterns,
i.e., which memory page (or cache set) has been accessed and
in what order. Few has exploited the time of memory accesses
as a side-channel vector. In fact, the ﬁrst observation that time
and order are the two key attributes of a side (and covert)
channel can date back to the early 1990s [41]. As such, in our
work, we consider both, and broadly deﬁne that an enclave
program is vulnerable to side-channel attacks if different input
can lead to different traces from either the executing order
of each execution unit (e.g., an instruction) or the timing at
which each unit is visited.
Deﬁning Side-Channel Vulnerabilities. More formally,
given an enclave binary program p, a concrete input to p
will lead to a concrete execution trace r, which is deﬁned
as [(m0,t0), (m1,t1), (m2,t2),··· , (mk,tk)], where m j is the ad-
dress of the jth execution unit and t j is its timestamp relative to
the beginning of the execution. When the memory addresses
are normalized to be free of effects of randomization, for each
input, there is a corresponding trace r.
Deﬁnition 1 Given an enclave program p and an input Ii, the
mapping function E(p,Ii) = ri, where ri is the execution trace
of p under the input Ii. Similarly, for a set of input I , we deﬁne
the mapping function E(p,I ) = {ri|ri = E(p,Ii),∀Ii ∈ I )}.
The entire input space is denoted Ispace. Therefore, the entire
space of execution traces R = E(p,Ispace).
The mapping function E generates a program’s execution
trace under a speciﬁc input or a set of inputs, which allows us
to deﬁne side-channel vulnerabilities as follows.
Deﬁnition 2 Given an enclave program p and a set of input
I , the program is considered to be vulnerable to side-channel
attacks (under the input set I ) if and only if |E(p,I )| > 1; the
input set can be completely leaked through the side channels
if and only if |E(p,I )| = |I|.
Informally, we deﬁne an enclave program p is vulnerable
to side-channel attack if not all the input maps to the same
trace. That is, the enclave program’s execution is not input
oblivious. However, even though the program is vulnerable to
side-channel attack, the amount of leaked information can be
different. The complete leakage captures the case that every
input can be uniquely identiﬁed from the execution trace. It is
worth noting that the set of input I is a subset of the entire in-
put space Ispace, i.e., I ∈ Ispace. In most practical scenarios, it
is impossible to obtain Ispace. Therefore, the deﬁnition of side-
channel vulnerabilities is only meaningful when the program
and its input set is ﬁxed. In this paper, we consider two types
of input set I : Isyntactic, the set of input generated automat-
ically from program analysis, and Isemantic, the set of input
provided by developers that are semantically meaningful.
Representing Execution Traces. To facilitate cross com-
parison of execution traces and directly pinpoint the secret-
dependent control ﬂow transfer (CFT) that leaks the informa-
tion through side channels, execution traces need to be repre-
sented in proper data structures. String, in the form of linear
trace [(m0,t0), (m1,t1), (m2,t2),··· , (mk,tk)], however, is not
an optimal choice as it will be quite challenging to identify the
alignment (i.e., anchor) point from the string. In our design,
we choose to use a graph representation of the linear traces.
Deﬁnition 3 An extended dynamic control-ﬂow graph (ED-
CFG) of a program p under input Ii ∈ I is deﬁned as a di-
rected graph G =, where ni ∈ N is a node of the
graph that represents a basic block of the CFG; and ei ∈ E is
a directed edge of the graph connecting two nodes that repre-
sents the dynamic CFT when p is executed with the input Ii.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 445Also, each edge (ei ∈ E) has a counter wi (i.e., weight) to in-
dicate how many times the edge is executed. The information
of the program’s execution order and time is embedded in
each node ni ∈ N. Each ni ∈ N has two ordered lists: Order
= [ni
j is the jth successor of node ni
2,··· ,ti
during the execution of p with input Ii; Time = [ti
k],
where ti
j is the execution time to reach node ni
j.
k], where ni
2,··· ,ni
1,ni
1,ti
An ED-CFG of an enclave program uniquely specify the
execution trace of the program under a given input. More
speciﬁcally, G i represents the execution trace in a graph rep-
resentation for the input Ii.
Execution Units in Side-Channel Attacks. An execution
unit in the context of a side-channel attack is deﬁned as the
minimal single execution trace observable by attackers. For
the enclave program execution, an attacker can mostly achieve
the minimal execution unit at either cache level, or at page
level. Typically, it is hard to observe the single instruction
execution or basic block execution, but an attacker might be
able to do so at certain scenario (e.g., the branch shadowing
attack [20] and the Nemesis attack [34]). Therefore, in our
work we focus on the execution unit at page level (address
aligned with 4K bytes), at cache level (address aligned with
64 bytes)1, and at branch level.
Deﬁnition 4 A page-level ED-CFG, Gp, is a variant of G,
where each node of Gp contains the page execution unit (i.e.,
all the executed instructions that belong to a particular page,
aligned with 212 bytes), and each edge connects the CFTs
between the pages. Similarly, we deﬁne the cache-level ED-
CFG, Gc, where each node contains the cache execution unit
and edge captures the CFTs at cache level.
p, or G i
p and G i
Therefore, eventually for each input Ii, we will build G i ﬁrst,
from which to derive G i
c. To detect the vulnerabilities,
we will then cross compare G i, G i
c, respectively, for
all input Ii ∈ I . If a trace is different (in terms of time or
order of the speciﬁc execution units) among different user
input, we conclude the enclave program is vulnerable to the
corresponding side-channel attacks at different levels such as
at branch, cache, or page. Further analysis can be performed
on the graphs to quantify the vulnerability, or to identify the
leaking code segments.
3.2 A Running Example
Next, we would like to use a simple running example to illus-
trate how to use Gp to detect the time and order side-channel
vulnerabilities at the page granularity for the software running
inside the SGX enclave. Detecting basic block-granularity and
cacheline-granularity vulnerabilities is similar when given Gc.
In particular, we use the code snippet shown in Figure 1(d) as
1In this work, we simply model cache-based side-channel attacks on SGX
assuming that the attacker is able to monitor the execution of the enclave
program at the granularity of a 64-byte memory block. Interested readers can
refer to Wang et al. [38] for more detailed discussion on attack techniques.
a running example. This code snippet is a simpliﬁed version
of a barcode image processing function.