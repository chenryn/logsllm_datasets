此题是X-NUCA'2018的一道题目，在比赛过程中没有队伍解出。赛后在得到AFang师傅的提示后复现成功。题目及附件[下载](https://github.com/ret2p4nda/libc-pwn/tree/master/secretcenter)
# 题目及漏洞分析
题目中初始化过程中首先从'secret.txt'中读入一个字符串，存放在申请的堆中。
    int get_secret()
    {
      int v0; // eax
      int v1; // ebx
      bss_malloc_secret = malloc(0x78uLL);
      v0 = open("secret.txt", 0x80000);
      if ( v0 == -1 )
        exit(1);
      v1 = v0;
      if ( (unsigned int)read(v0, bss_malloc_secret, 0x78uLL) == -1 )
        exit(1);
      return close(v1);
    }
用户可以输入size申请不大于0x18f大小堆块，并向堆块中输入内容，内容首先输入在栈上，然后通过memcpy复制到堆上，此时栈上是有用户输入的。然后逐字节与secret.txt读入的内容比较，判断是否相等。当相同字节数等于strlen(secret)时，会调用一个函数，这个函数会通过读取/proc/self/maps文件，给出程序的内存空间分布，最终将用户的输入输出到stderr文件，此处用了_fprintf_chk函数，是fprintf的安全版本，存在一个格式化字符串漏洞，但是由于是向stderr输出，并不会返回给用户，无法泄露地址。
    unsigned __int64 input()
    {
      int v0; // ebp
      unsigned __int64 v1; // kr08_8
      int i; // eax
      __int64 v3; // rbx
      size_t size; // [rsp+Ch] [rbp-22Ch]
      unsigned __int64 v6; // [rsp+218h] [rbp-20h]
      v6 = __readfsqword(0x28u);
      puts("Secret Size: ");
      LODWORD(size) = 0;
      scanf("%d", &size);
      v0 = size;
      if ( (unsigned int)(size - 0x65) > 0x12A )
        exit(1);
      bss_malloc_user = malloc((unsigned int)size);
      bss_size = v0;
      write(1, "Content: \n", 0xAuLL);
      syscall(0LL, 0LL, (char *)&size + 4, (unsigned int)size);
      memcpy(bss_malloc_user, (char *)&size + 4, (unsigned int)size);
      v1 = strlen((const char *)bss_malloc_secret) + 1;
      for ( i = 0; ; ++i )
      {
        v3 = i;
        if ( i >= v1 - 1 )
          break;
        if ( *((_BYTE *)bss_malloc_secret + i) != *((_BYTE *)bss_malloc_user + i) )
        {
          puts("Not Good Secret :P\n");
          break;
        }
      }
      if ( v3 == strlen((const char *)bss_malloc_secret) )
        give_vmmap();
      _fprintf_chk((__int64)stderr, 1LL, (__int64)&size + 4);
      return __readfsqword(0x28u) ^ v6;
    }
在释放函数中，程序可以对input函数中申请的堆块释放，但没有把指针清空，存在悬垂指针，导致double free。
    void delete()
    {
      free(bss_malloc_user);
    }
并且可以通过edit函数，对之前的堆块进行修改，由于悬垂指针的问题，存在UAF。
    __int64 edit_secret()
    {
      unsigned int v1; // [rsp+Ch] [rbp-Ch]
      write(1, "size: \n", 7uLL);
      scanf("%d", &v1);
      if ( (signed int)v1 = bss_size )
        exit(1);
      write(1, "Content: \n", 0xAuLL);
      return syscall(0LL, 0LL, bss_malloc_user, v1);
    }
此外，用户可以通过guard_ready函数，首先通过malloc申请一个0xf0的堆块，并且对这个堆块初始化一些数据，这个数据是一段预置的seccomp规则，后续再说。
在set_guard函数中，通过prctl函数将之前预置的seccomp规则生效。此处存在一个问题，由于程序可以任意设置大小的堆块，而设置seccomp规则的函数与ptctl不在一个函数中，因此可以通过UAF来修改这个seccomp规则。
    int set_guard()
    {
      int result; // eax
      __int16 v1; // [rsp+0h] [rbp-18h]
      __int64 v2; // [rsp+8h] [rbp-10h]
      v1 = guard_num;
      v2 = bss_guard;
      if ( prctl(38, 1LL, 0LL, 0LL, 0LL) )
        exit(1);
      result = prctl(0x16, 2LL, &v1);
      if ( result )
      {
        perror("what?");
        exit(1);
      }
      return result;
    }
# 漏洞利用
程序存在两个显式漏洞堆漏洞和格式化字符串。但是fprintf_chk函数不能使用%n写入数据，由于输出是stderr的情况也不能泄露数据。并且由于程序开启了全部的保护规则，因此仅通过堆漏洞，无法获得地址利用，但是将二者结合使用，会出现很有意思的情况。
    └─[$] <> checksec secret_center 
    [*] '/home/p4nda/Desktop/pwn/other/xnuca/secretcenter/secret_center'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
        FORTIFY:  Enabled
## seccomp
seccomp是在内核中实现的对于用户系统调用及其参数的过滤，决定是否继续调用此系统调用，相当于自废武功，在CTF通防中很容易遇到，一般会禁用execve这样的系统调用，防止拿到shell。
在内核处理请求系统调用时在此处（\arch\x86\entry\enrty_64.S line 247）进入检查，
    /* Do syscall entry tracing */
    tracesys:
        movq    %rsp, %rdi
        movl    $AUDIT_ARCH_X86_64, %esi
        call    syscall_trace_enter_phase1
        test    %rax, %rax
        jnz tracesys_phase2         /* if needed, run the slow path */
        RESTORE_C_REGS_EXCEPT_RAX       /* else restore clobbered regs */
        movq    ORIG_RAX(%rsp), %rax
        jmp entry_SYSCALL_64_fastpath   /* and return to the fast path */
    tracesys_phase2:
        SAVE_EXTRA_REGS
        movq    %rsp, %rdi
        movl    $AUDIT_ARCH_X86_64, %esi
        movq    %rax, %rdx
        call    syscall_trace_enter_phase2
具体的检查机制在\arch\x86\net\bpf_jit_comp.c中。
好在david942j@217已经写出一套可以方便分析seccomp功能及编写seccomp的工具[seccomp-tools](https://github.com/david942j/seccomp-tools)
如分析程序预置的seccomp规则.
    └─[$] <> seccomp-tools dump ./secret_center 
    Welcome to Secret Center!
    [*]Reinforcable Secret Service..
    [1] show secret on Server
    [2] input my secret
    [3] delete my secret
    [4] Guard Ready
    [5] Set Guard
    [6] edit my secret
    [7] exit
    >
    4
    [1] show secret on Server
    [2] input my secret
    [3] delete my secret
    [4] Guard Ready
    [5] Set Guard
    [6] edit my secret
    [7] exit
    >
    5
     line  CODE  JT   JF      K
    =================================
     0000: 0x20 0x00 0x00 0x00000004  A = arch
     0001: 0x15 0x01 0x00 0xc000003e  if (A == ARCH_X86_64) goto 0003
     0002: 0x06 0x00 0x00 0x00000000  return KILL
     0003: 0x20 0x00 0x00 0x00000000  A = sys_number
     0004: 0x15 0x00 0x01 0x000000e7  if (A != exit_group) goto 0006
     0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0006: 0x15 0x00 0x01 0x00000000  if (A != read) goto 0008
     0007: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0008: 0x15 0x00 0x01 0x00000002  if (A != open) goto 0010
     0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0010: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0012
     0011: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0012: 0x15 0x00 0x01 0x00000003  if (A != close) goto 0014
     0013: 0x06 0x00 0x00 0x7fff0000  return ALLOW
     0014: 0x06 0x00 0x00 0x00000000  return KILL
## fprintf_chk
这个函数在潜意识里觉得这个函数的格式化字符串漏洞是没有办法利用的。如执行%n
    └─[$] <> ./secret_center 
    Welcome to Secret Center!
    [*]Reinforcable Secret Service..
    [1] show secret on Server
    [2] input my secret
    [3] delete my secret
    [4] Guard Ready
    [5] Set Guard
    [6] edit my secret
    [7] exit
    >
    2
    Secret Size: 
    123
    Content: 
    %n
    Not Good Secret :P
    *** %n in writable segment detected ***
    [1]    42169 abort (core dumped)  ./secret_center
可以看到%n被检测出来，可以看一下检测的逻辑在glibc-2.23\stdio-common\vfprintf.c line 892
    if (! readonly_format)                          \
            {                                     \
              extern int __readonly_area (const void *, size_t)           \
            attribute_hidden;                         \
              readonly_format                             \
            = __readonly_area (format, ((STR_LEN (format) + 1)        \
                            * sizeof (CHAR_T)));          \
            }                                     \
          if (readonly_format < 0)                        \
            __libc_fatal ("*** %n in writable segment detected ***\n");       \
        }
可以看到readonly _format是一个全局变量，当format不通过\_ _readonly_area检测时，会返回一个负数，从而导致程序结束。
再看一下__readonly_area(\glibc-2.23\sysdeps\unix\sysv\linux\readonly-area.c)，通过fopen打开"/proc/self/maps"，来判断ptr是否是只读段，这样我们好像只要让fprintf_chk认为format是只读段就可以了。
由于我们没有其他权限，不能修改"/proc/self/maps"，可以看能否从fopen中做文章。
## fopen
提到fopen就不得不提到一个结构体__IO_FILE，这个结构体在IO利用方法里经常遇到，与通常open打开的文件不同的是，其为每个文件定义了缓冲区和虚表函数，而利用_fileno来判定是哪个文件，如stdin._fileno=0。
    struct _IO_FILE {
      int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */
    #define _IO_file_flags _flags
      /* The following pointers correspond to the C++ streambuf protocol. */
      /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
      char* _IO_read_ptr;   /* Current read pointer */
      char* _IO_read_end;   /* End of get area. */
      char* _IO_read_base;  /* Start of putback+get area. */
      char* _IO_write_base; /* Start of put area. */
      char* _IO_write_ptr;  /* Current put pointer. */
      char* _IO_write_end;  /* End of put area. */
      char* _IO_buf_base;   /* Start of reserve area. */
      char* _IO_buf_end;    /* End of reserve area. */
      /* The following fields are used to support backing up and undo. */
      char *_IO_save_base; /* Pointer to start of non-current get area. */
      char *_IO_backup_base;  /* Pointer to first valid character of backup area */
      char *_IO_save_end; /* Pointer to end of non-current get area. */
      struct _IO_marker *_markers;
      struct _IO_FILE *_chain;
      int _fileno;
    #if 0
      int _blksize;
    #else
      int _flags2;
    #endif
      _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */
    #define __HAVE_COLUMN /* temporary */
      /* 1+column number of pbase(); 0 is unknown. */
      unsigned short _cur_column;