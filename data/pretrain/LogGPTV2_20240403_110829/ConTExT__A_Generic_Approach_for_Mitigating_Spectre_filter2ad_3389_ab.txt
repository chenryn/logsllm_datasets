Second, they use this data to inﬂuence the microarchitectural
state, which can be observed using microarchitectural attacks,
e.g., Flush+Reload [100]. Third, all are executed locally on
the victim machine, requiring the attacker to run code on the
machine. Schwarz et al. [80] extended the original Spectre
attack with a remote component and demonstrated that the
microarchitectural state of the AVX2 unit can be used instead
of the cache state to leak data.
Meltdown-type attacks exploit deferred handling of ex-
ceptions. They do not exploit misspeculation but use other
techniques to execute instructions transiently. Between the
occurrence of an exception and it being raised, instructions
that access data retrieved by the faulting instructions can
be executed transiently. The original Meltdown attack [59]
exploited the deferred page fault following a user/supervisor
bit violation, allowing to leak arbitrary memory. A variation
of this attack allows an attacker to read system registers [5],
[36]. Van Bulck et al. [90], [96] demonstrated that
this
problem also applies to other page-table bits, namely the
present and the reserved bits. Canella et al. [14] analyzed
different exception types, based on Intel’s [42] classiﬁcation
of exceptions as faults, traps, and aborts. They found that
all known Meltdown variants so far have exploited faults, but
not traps or aborts. With so-called microarchitectural data
sampling (MDS) attacks, Meltdown-type effects have been
demonstrated on other internal buffers of the CPU. RIDL [91]
and ZombieLoad [78] leak sensitive data from the ﬁll buffers
and load port. Fallout [13] exploits store-to-load forwarding to
leak previous stores from the CPUs store buffer.
Defenses. Since the discovery of Spectre, many different
defenses have been proposed. The easiest and most radical
solution would be to entirely (or selectively) disable specula-
tion at the cost of a huge decrease in performance [50]. Intel
and AMD proposed a similar solution by using serializing
instructions on both outcomes of a branch [3], [36]. Ev-
tyushkin et al. [24] proposed to allow a developer to annotate
branches that could leak sensitive data, which are then not
predicted. Unfortunately, on Intel CPUs, serializing branches
does not prevent microarchitectural effects such as powering
up AVX units, or TLB ﬁlls [80].
For mitigating the RSB attack vector, Intel proposes RSB
stufﬁng [37]. Upon each context switch, the RSB is ﬁlled with
the address of a benign gadget.
Google Chrome limits the amount of data that can be
extracted by introducing site isolation [75]. Site isolation relies
on process isolation, i.e., each site is executed in its own
process. Thus, Spectre attacks cannot leak secrets of other
sites. Speculative Load Hardening [16] and YSNB [69] are
similar proposals, both limiting speculation by introducing data
dependencies between the array access and the condition.
SafeSpec [47] and InvisiSpec [99] introduce additional
shadow hardware for speculation. The results of transient
instructions are only made visible to the actual hardware when
3
the processor determined that the prediction was correct. Both
methods require major changes to the hardware.
DAWG [48] is another proposal requiring signiﬁcant hard-
ware changes. The idea is to partition the cache to create
protection domains that are disjoint across ways and metadata
partitions. Additionally to hardware changes, the approach re-
quires changes to the replacement policy and cache coherence
protocol to incorporate the protection domain.
All
local Spectre variants so far use either Flush+
Reload [100], [50], [35], [51], [63] or Prime+Probe [70],
[88] to extract information from the covert channel, requiring
access to a high-resolution timer. Thus, a defense mechanism
is to reduce the accuracy of timers [66], [73], [86], [93] and
eliminate methods to construct different timers [79].
To mitigate Spectre variant 2, both Intel and AMD extended
the ISA with mechanisms to control indirect branches [4],
[38], namely Indirect Branch Restricted Speculation (IBRS),
Single Thread Indirect Branch Prediction (STIBP), and Indirect
Branch Predictor Barrier (IBPB). With IBRS, the processor
enters a special mode, and predictions cannot be inﬂuenced
by operations outside of it. STIBP restricts the sharing of
branch prediction mechanisms among hyperthreads. IBPB al-
lows ﬂushing the BTB. Future processors implement enhanced
IBRS [37], a hardware mitigation for Spectre variant 2. With
retpoline [89], Google proposes an alternative technique to
protect against branch poisoning by ensuring that the return
instruction predicts to a benign endless loop through the RSB.
Similarly, Intel proposed randpoline [12], a heuristic but more
efﬁcient version of retpoline.
To mitigate Spectre variant 4, Intel provides a microcode
update to disable speculation on the store buffer check [38].
The new feature, called Speculative Store Buffer Disable
(SSBD), is also supported by AMD [2]. ARM introduced a
new barrier (SSBB) which prevents loads after the barrier from
bypassing a store using the same virtual address before the
barrier [5]. Future ARM CPUs will feature a conﬁguration
control register that prevents the re-ordering of stores and
loads. This feature is called Speculative Store Bypass Safe
(SSBS) [5].
So far, all the proposed defense mechanisms against Spec-
tre attacks either require substantial hardware changes or only
consider cache-based covert channels. In the latter case, an
attacker can circumvent the defense by using a different covert
channel, e.g., AVX [80], TLB [77], or port contention [8]. This
focus on cache covert channels only and the huge decrease in
performance caused by state-of-the-art Spectre defenses shows
the necessity for the development of efﬁcient and effective
defenses.
To mitigate microarchitectural attacks on the kernel,
and speciﬁcally KASLR breaks, Gruss et al. [30] proposed
KAISER, a kernel modiﬁcation unmapping most of the kernel
space while running in user mode [30]. As KAISER also
mitigates Meltdown, the idea of KAISER has been integrated
into all major operating systems, e.g., in Linux as KPTI [62],
in Windows as KVA Shadow [43], and in Apple’s xnu kernel
as double map [58]. With the PCID and ASID support of mod-
ern processors, the performance overheads appear acceptable
for real-world use cases [28], [29]. Additionally, to mitigate
Foreshadow [90] on SGX enclaves, microcode updates are
necessary. To mitigate Foreshadow-NG [96], several further
steps need to be implemented for full mitigation. The kernel
must use non-present page-table entries more carefully, e.g.,
not store the swap disk page frame number there for swapped-
out pages. When using EPTs (extended page tables),
the
hypervisor must make sure that the L1 cache does not contain
any secrets when switching into a virtual machine.
To mitigate MDS attacks [91], [78], [13], microcode up-
dates are necessary that enable a legacy instruction to ﬂush the
affected microarchitectural buffers [40]. Furthermore, in envi-
ronments utilizing simultaneous multithreading, the operating
system must only schedule processes within the same security
domain to sibling threads to mitigate user to user attacks [40].
To protect from attacks against the kernel, the operating system
must guarantee a synchronized entry and exit on system calls
and interrupts such that no untrusted user code is executed
on a sibling thread [40]. To replace the expensive software
workarounds, newer CPU microarchitectures provide ﬁxes in
hardware and, thus, are already resistant against Meltdown-
type attacks [39]. In this paper, we focus on mitigating only
Spectre-type attacks and consider Meltdown-type attacks out-
of-scope.
C. Taint Analysis
Taint tracking is used to track data-ﬂow dependencies on
a hardware level [19], [83], binary-level [18], [76], or source
level [81]. Taint analysis has a wide range of security applica-
tions: detecting vulnerabilities, e.g., by tracking untrusted user
input; malware analysis, e.g., analyzing information ﬂows in
binaries; test case generation, e.g., automatically generating
inputs. This can be either done statically [6], [94] or dynami-
cally [68], [74].
Dynamic taint analysis allows tracking the information ﬂow
between sources and sinks [76]. Any value that depends on
data derived from a tainted source, e.g., user input, is consid-
ered tainted. Values that are not derived from tainted sources
are considered untainted. A policy deﬁnes how taint ﬂows
as the program executes and how new taints are introduced.
Over-approximation can occur when tainting a value that is
not derived from a taint source.
Taint
tracking has also been proposed on a hardware
level [92], [45], [56], [10], yet not in the context of speculative
execution.
III. DESIGN OF CONTEXT
In this section, we present
the design of ConTExT, a
considerate transient execution technique.
The idea of ConTExT is to introduce a new type of
memory mappings, namely non-transient mappings. The non-
transient option indicates that the mapping contains secrets
that must not be accessed within the transient-execution do-
main. Consequently, non-transient values must not be used in
transient operations, neither directly nor in a derived form, iff
the effect of the transient operation could be microarchitec-
turally observable. Thus, there cannot be any perturbations of
the microarchitectural CPU state, which might disclose non-
transient values via side channels. To track whether a value
is non-transient and must be protected, registers also track the
4
non-transient state. To ensure not only the original but also
derived values are protected, this information is propagated to
the results of operations using these values, until the secret is
destroyed, e.g., by overwriting it.
Security Claim. A processor with ConTExT mitigates all
speculative execution attacks as the processor cannot use
non-transient registers in any way that would inﬂuence the
microarchitectural state. Hence, if a software implementation
is leakage-free on a strict in-order machine, it will also be
leakage-free on an out-of-order or speculative machine with
ConTExT, iff secrets are annotated.
ConTExT is a multi-level countermeasure which works on
the application-, compiler-, operating-system-, and hardware-
level. An application developer annotates secret values, and
possible memory destinations for secret values in the source
code, which the compiler groups inside the binary and marks
as secret.
Besides annotation of secrets, it would also be possible
to architecturally deﬁne groups of secrets, e.g., based on the
data type as suggested by Carr and Payer [15], or by deﬁning
all userspace memory and user input as secret as proposed
by Taram et al. [85]. However, this can be very expensive,
and consequently, related work is also investigating annotation-
based protection mechanisms [101].
When the operating system loads the binary, memory
regions containing the annotated secrets are marked non-
transient. The hardware does all subsequent tracking of secrets.
The operating system only has to be aware of secret register
states on interrupts, e.g., context switches. Other than these
minimal changes, there are no additional adaptions required
on any level of the software stack.
The full-protection ConTExT requires small hardware
changes, which retroﬁts already existing mechanisms in to-
day’s CPUs, i.e., there is no re-design required. Moreover, the
change is fully backward compatible with existing hardware
and software (i.e., applications, libraries, and operating sys-
tems). As hardware changes cannot be conducted on commod-
ity CPUs, we evaluate ConTExT based on ConTExT-light, an
over-approximation which only requires software changes. As
illustrated in Figure 1, ConTExT is a more considerate variant
of transient execution. An unprotected application executes
all instructions, including the instruction leaking the secret.
In contrast, with the state-of-the-art solution of using lfences,
the CPU stalls at the fence and aborts the transient execution,
i.e., it cannot continue to transiently execute any instruction at
all. ConTExT has the advantage that the instructions leaking
the secret are not executed, while independent instructions
(marked with arrows) later on in the instruction stream can
still be executed during the out-of-order execution. Although
these instruction cannot retire, they already warm up caches
and buffers, e.g., by triggering prefetchers. With ConTExT-
light, the memory location containing the secret is marked
as uncachable, which already leads to a CPU stall in current
processors when accessing the memory location in transient
execution. However, independent instruction can still be ex-
ecuted during the out-of-order execution. Current CPUs im-
plement this by executing memory loads for memory marked
as uncachable only at retirement, i.e., the corresponding load
instruction is only executed if it is at the head of the reorder
buffer [27]. This is also the case for the lock preﬁx [20]. We
envision to use the same mechanism for ConTExT.
ConTExT protects secrets which are stored in cache and
DRAM, i.e., attackers cannot access data from memory loca-
tions marked as non-transient during transient execution, and
registers if they have been ﬁlled with data from protected cache
or DRAM locations or other protected registers. ConTExT-
light cannot protect secrets while they are architecturally stored
in registers of running threads. Furthermore, ConTExT-light is
not designed as a protection against Meltdown-type attacks.
Mitigating Meltdown-type attacks, including MDS attacks, is
orthogonal to our work, and we consider it out of scope. We
only use it to obtain an upper bound for the performance
overheads of ConTExT. Note that this upper bound is not tight,
i.e., the actual upper bound is expected to be substantially
lower.
ConTExT is a multi-level countermeasure consisting of 3
major components which we describe in this section:
1) non-transient memory mappings (cf. Section III-A),
2) tracking of non-transient data (cf. Section III-B), and
3) software (i.e., OS, compiler, and application) support for
the hardware features (cf. Section III-C).
A. Non-Transient Memory Mappings
We present three possible implementations of non-transient
memory mappings, i.e., memory mappings, which indicate
that the values cannot be used during transient execution.2
All variants allow integrating ConTExT into the current ar-
chitecture while maintaining backward compatibility, i.e., if
the operating system is not aware of ConTExT, the changes
have no side effects. Hence, to implement ConTExT, only one
of the following variants has to be implemented.
Currently Reserved Page-Table Entry Bit. There is already
sufﬁcient space to store the non-transient bit in the page tables
of commodity CPUs. On Intel 64-bit (IA-32e) systems, each
page-table entry has 64 bits, comprised of a 52-bit physical-
address ﬁeld and several ﬂags. However, most processors do
not support full 52 bits, but only up to 46 bits, which allows
working with up to 64 TB of physical RAM if the hardware
supports it.
Figure 2 shows a page-table entry for x86-64. Besides the
already used bits, there are the 6 bits between bit 46 and
51, which are currently reserved for future use. This future
use could be the extension of the physical page number if
more physical memory is supported in future CPU generations.
However, it could also be the repurposing of one of the bits
(e.g., the last reserved bit) as a non-transient bit. This reduces
the theoretical maximum amount of supported memory by
factor 2. Thus, instead of 4 PB, CPUs could only support
2 PB of physical memory. The repurposing of a reserved bit
is automatically backwards-compatible, as the reserved bits
currently have to be ‘0’. Hence, using such a bit does not
have any undesirable side effects on legacy software.
2Concurrent to our work, NVIDIA patented a proposal closely related to
our design [10]. However, they do not provide protection for registers, but
only for memory locations. Similarly, also in concurrent work, Intel released
a whitepaper introducing the idea of a new memory type against Spectre
attacks [84].
5
Serializing Barrier
cmp rdi, .array_len