I have two pgsql domains: `isoweekday` that is based on INT and `isoweekdays`
that is an array of the former. Both domains add some checks like no duplicate
values, no empty list, only values from  range.
    CREATE DOMAIN isoweekday AS INT
    CHECK(...);
    CREATE DOMAIN isoweekdays AS isoweekday[]
    CHECK(...);
I've created custom types, like so:
    class ISOWeekDayDomain(types.UserDefinedType, types.Integer):
        def get_col_spec(self, **kwargs):
            return 'isoweekday'
    class ISOWeekDaysDomain(types.UserDefinedType, ARRAY):
        def __init__(self, **kwargs):
            if 'item_type' not in kwargs:
                kwargs['item_type'] = ISOWeekDayDomain
            super(ISOWeekDaysDomain, self).__init__(**kwargs)
        def get_col_spec(self, **kwargs):
            return 'isoweekdays'
and then used them to define a column:
    Column(
        ISOWeekDaysDomain, nullable=False, server_default=text('ARRAY[1,2,3,4,5,6,7]')
    )
Creating migrations using Alembic went well, and it created the following
statement:
        op.add_column(
            u'config',
            sa.Column(
                'dow',
                ISOWeekDaysDomain(),
                server_default=sa.text(u'ARRAY[1, 2, 3, 4, 5, 6, 7]'),
                nullable=False,
            ),
        )
After applying migrations on the database, I'm getting the following warning:
    sqlalchemy/dialects/postgresql/base.py:2683: SAWarning: Did not recognize type 'isoweekday[]' of column 'dow'
Running alembic yields a new database migration that alters the previously
added column with `sqltypes.NULLTYPE`.
    op.alter_column(u'tent_crawling_config', 'dow',
               existing_type=sa.NullType(),
               nullable=False,
               existing_server_default=sa.text(u'ARRAY[1, 2, 3, 4, 5, 6, 7]'))
The `domains` dictionary passed to `_get_column_info` contains both created
domains and during execution it enters the dialects/postgresql/base.py#L2677
block.
What am I missing? How to register my custom types that map domains so the
reflection API recognises them?
I'm using `SQLAlchemy==1.2.14` and PostgreSQL `v11`