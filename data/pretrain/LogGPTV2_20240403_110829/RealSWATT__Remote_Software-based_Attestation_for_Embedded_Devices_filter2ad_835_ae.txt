width. For the RealSWATT remote attestation protocol, we only
require the transmission of the hash value with 32 B for the attesta-
tion reports and 4 B nonce as attestation request. The frequency of
transmission can be configured as discussed above, between several
attestation requests per second to one every few seconds. These low
demands make RealSWATT attestation also suitable to work with
low-bandwidth transmission protocols. For example, the popular
IoT wireless protocols Zigbee and Z-Wave have transfer speeds
ranging from 20 kbit s−1 up to 250 kbit s−1 [51]. Even the lowest
transfer speed is sufficient to successfully run RealSWATT attesta-
tion with reasonable attestation frequencies.
7.4 Race Conditions
Attestation and realtime operation run in parallel on two dedicated
cores. However, the attestation process requires access to the appli-
cation memory to check for malicious activity. Thus, even when
both operations are executed on a separate core, resources still need
to be shared, which could lead to a potential race condition. In prac-
tice, race conditions between realtime operation and attestation will
occur very rarely. Most embedded applications focus on GPIO (Gen-
eral Purpose Input/Output) and thus have little memory interaction.
Access to memory can be prioritized depending on the attestation
goals and type of realtime application. Most embedded devices in
the domain of soft realtime systems will tolerate infrequent dead-
line misses. Thus, the attestation can potentially be prioritized in
these cases. Hard realtime systems are usually strongly tight to
the outside world and very GPIO intensive. Memory accesses on
hard realtime systems are very short. The acceptable delay for the
attestation can be set to a value that will detect malicious activity,
but allow short delays caused by the realtime application. This
value tr tdelay is distinct for each embedded device and applica-
tion context and should satisfy: tattack ≥ thash + tr tdelay. The
delay tr tdelay is determined by the longest operation the realtime
application would perform on the flash memory: These are often
quick reads of configuration data (e.g., the amount of medicine for
injection on the syringe pump).
We have implemented RealSWATT into systems with hard real-
time requirements like medical devices (syringe pump) and common
IoT devices like smart plugs, see Section 7.5. We evaluated the im-
pact of race conditions in these settings and found that they are
highly unlikely and do neither influence the realtime requirements
nor the attestation.
7.5 Implementation on Real-World Devices
To show the applicability of our approach to real-world applications
and deployments, we applied RealSWATT to a medical device with
strict realtime requirements and integrated RealSWATT attestation
into an open-source firmware for IoT devices.
The first use-case is a syringe pump [56], a medical device that
injects medication into a patient at a defined time interval. Hence, a
syringe pump provides critical functionality and has strict realtime
requirements. This open-source implementation of a syringe pump
has been already used in previous works [2, 39] to show feasibility
of control-flow attestation and hotpatching of realtime devices.
In addition, we implemented RealSWATT on top of ESPEasy.
ESPEasy is an alternative popular open-source firmware that al-
lows to replace the firmware of existing IoT devices like smart plugs
or temperature sensors. ESPEasy supports a wide range of different
devices and even extends their functionality. By implementing Re-
alSWATT on ESPEasy we proved that a wide range of legacy IoT
devices can be easily secured through our attestation method. We
explain real-world details of the attestation based on the syringe
pump use-case implemented on the ESP32 in Appendix B.1.
7.6 End-to-End Case Study
To show the full capabilities of RealSWATT, we developed a full
end-to-end example: a vulnerable realtime device that is being
monitored. The vulnerability is used to compromise the device, this
is then detected by the verifier.
To do so, we have integrated a common vulnerability into the sy-
ringe pump: an insecure configuration interface. The most common
attack vectors of IoT devices are weak, guessable, or hard-coded
passwords, and insecure network interfaces and services [43]. In
case of ESPEasy, the web interface is only reachable via plain HTTP,
hence a passive man-in-the-middle (MitM) attack can easily be used
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2899to obtain passwords or authentication tokens [15]. Especially the
usage of wireless interfaces further eases MitM attacks. Further-
more, per default the login process of the web interface does not
have any rate limiting, allowing efficient brute-force or dictionary
attacks, e.g., using hydra9.
For our proof-of-concept (PoC) we hijack the command inter-
face of our medical device and send a malicious configuration to
the unit. This could trigger a buffer overflow and launch a more
sophisticated attack, or just manipulate the configuration. In case of
the syringe pump, even a configuration change could lead to lethal
consequences for the patient as through our attack it is possible
to arbitrarily modify the amount of injected medicine. As soon as
these changes are applied, the configuration on the nvs partition is
updated. At latest in the next attestation run the hash value of the
nvs partition changes, which is sent in the attestation report to the
verifier. The verifier determines that the configuration differs from
the intended configuration and raises an alarm. For more details
on the partitions and the implementation of the attestation see
Appendix B.1.
7.7 Conclusion of Evaluation
In our practical evaluation of RealSWATT, we have shown that the
attestation runtime can be adjusted by hash repetitions to dominate
the variances in network response times of heavily used wireless
networks. As a consequence, our proposed attestation method for
legacy devices is feasible for wireless IoT networks. In addition, we
have measured only a slightly increased power consumption from
46.2 mA to 46.8 mA per hour for attestation. The increase is so small
due to the use of the commonly available hardware hashing unit,
which reduces the workload of the second core. Furthermore, as
most IoT devices already use the wireless communication module
at regular basis, the additional power consumption for wireless
communication is also minimal. Concluding, RealSWATT is suitable
for the application in real-world IoT devices.
8 SECURITY CONSIDERATIONS
The RealSWATT attestation framework uses several new techniques
to perform reliable software-based attestation of realtime-critical
embedded devices. The security of software-based attestation is
based on multiple premises which all have to be fulfilled in order
to guarantee the integrity of the attested device. In the following,
we discuss the formal criteria for the attacker to stay undetected as
well as possible attack scenarios, including mitigations.
Attack Model. To prevail malicious activity, the attacker must
perform her attack and hide all traces before the attestation can
detect those changes by means of hashing the memory. We define
the following variables to analyze diverse attack scenarios: (1) ts(cid:98)=
threshold time, (2) tm(cid:98)= message response time, (3) tr tt(cid:98)= round trip
time, (4) tatt(cid:98)= attestation run time (all runs), (5) thash(cid:98)= hashing
run time (1 run), (6) tattack(cid:98)= minimal run-time for attack, and (7)
twrite(cid:98)= time of the flash to write to the sector.
A successful attack must satisfy tattack  thash still holds. Hence, we conclude that it is not possible
to rewrite parts of the memory by means of a compressed version
without detection.
In addition, RealSWATT deploys further techniques to prevent
compression attacks. Since it is challenging to compress random
data [46, 59], we fill free memory with random data provided and
controlled by the verifier. The attestation reports include the ran-
dom data thereby allowing the verifier to easily detect modifications.
Furthermore, due to continuous attestation, the device is attested
frequently (every 10ms as shown in Table 1). Thus, the attacker can
only guess whether a data segment is currently being attested.
TOCTOU. It is well-known that existing (remote) attestation sche-
mes are susceptible to Time-of-Check Time-of-Use (TOCTOU) at-
tack [53]. An adversary capable of restoring the memory in a given
time frame, before the next attestation, will remain undetected.
However, in contrast to known attestation schemes RealSWATT sig-
nificantly reduces the adversary’s success by leveraging the follow-
ing:
(1) The attestation continuously runs in the background, check-
ing the complete memory in regular intervals while the device is
operating normally. (2) The attestation starts from an arbitrary
memory position (derived from the nonce). The attacker can nei-
ther predict nor influence this starting point. Halting the attestation
core or process will be detected by timing thresholds.
Existing software-based attestation techniques like SWATT [46]
interrupt normal operation for attestation. This is not an option
for realtime systems, as these interruptions conflict with realtime
requirements. As RealSWATT attestation runs in the background,
the TOCTOU problem is limited to the interval in which each mem-
ory area is attested. This time span thash is very short due to the
optimized implementation (c.f., Section 8.1), so that manipulations
of the flash memory can be detected. This also implies that no pseu-
dorandom memory traversal is required, as used in SWATT [46].
Memory Manipulation. Another strategy to avoid detection is
to use, create, or find unmonitored memory, e.g., the RAM memory.
The attacker could also try to change the memory layout by ma-
nipulating the partition table. In general, moving malicious code
to RAM is not feasible. Code usually resides in flash memory and
RAM is therefore typically marked as non-executable [27]. Further-
more, manipulating the partition table is also a highly challenging
task [29]. In the case of the ESP32 several preconditions must be
met: first, SPI Dangerous Write must be enabled. Second, an entire
flash page would need to be rewritten. Third, partition changes
and rewrites are typically implemented by OTA (Over-the-Air Up-
date) [28], which inevitably causes a reboot. Thus, manipulating
the partition table is unfeasible for an attacker. Note that runtime
reconfiguration of memory permissions is also not possible because
the MMU (memory management unit) is privileged and set during
boot.
8.3 Attacks on Attestation Protocol
There are two attack strategies to undermine the underlying se-
curity assumptions of the protocol used by RealSWATT: (1) using
multiple cores, and (2) optimizing the implementation of the attes-
tation loop. We discuss how RealSWATT mitigates both of them.
Using multiple cores to break attestation. The attacker can use
the full computing power of the device, while RealSWATT has to
obey strict limitations due to realtime-critical jobs. The attacker
could ignore realtime jobs and try to use more than a single core
for hash calculations. In case hash calculation can be accelerated
through parallelization, the attacker gains an attack window. How-
ever, the attestation process still cannot be accelerated using multi-
ple processor cores since we use a Merkle–Damgård construction
for hashing (e.g., SHA-1, SHA-2). This method sequentially hashes
each block and requires the previous block as input. Thus, an at-
tacker cannot use multiple processor cores to parallelize this process.
The Merkle–Damgård hash construction is strictly sequential.
Optimizing implementation of attestation loop. Software-based
attestation (SWATT) [46] is based on the assumption that the im-
plementation of the attestation algorithm cannot be accelerated
by an attacker. Thus, an optimal implementation of the attestation
function and its main component, the hash function, is required.
Algorithms are complex and there are alternative ways to imple-