### Traceback Messages and Network Overhead

Initial traceback schemes involved routers generating ICMP messages with a small probability for each received packet, containing the router's IP address [2, 16]. This method aimed to provide fast path identification but introduced significant network overhead due to the additional messages. Mankin et al. proposed an improvement by adding state to routers to generate more effective traceback messages, defined as those originating from routers that are far from and previously unseen by the victim [21]. Although this reduced the overhead of ICMP traceback, it required either a shared key distribution mechanism or asymmetric cryptography, both of which have their own challenges, such as preventing attacker-forged messages and mitigating DoS attacks through resource exhaustion.

### Embedding Traceback Information in IP Packets

Several researchers have explored embedding traceback information directly within IP packets. Savage et al. first proposed using the 16-bit IP Identification field to hold probabilistically generated traceback information [27, 28]. Each router marks a fragment of its IP address and sets a bit to signal the next router, creating a chain of fragments. However, this method becomes computationally expensive in DDoS attacks with multiple attackers. Song and Perrig addressed this issue by maintaining a map of upstream routers at the victim, though the victim still needs to receive a large number of packets to identify the attack path [32].

Dean, Franklin, and Stubblefield suggested using algebraic codes to encode the upstream router path [8, 9]. Nodes mark packets with evaluations of polynomial sample points over a finite field, where the coefficients represent the IP addresses of the routers in the attack path.

### Probabilistic Sampling and Marking Schemes

Adler proposed a scheme for sampling the frequency of an x-bit number to determine packet paths [1]. Routers assign themselves a 0 or 1 bit based on their position relative to the next upstream router, and each router has a certain probability of marking a 0 or 1 bit in the packet. For multiple bits, the path is split into smaller paths, each executing the one-bit protocol. However, this method does not scale well with multiple attack paths, requiring an exponentially increasing number of packets for accurate path identification.

Sung and Xu introduced a method similar to Pi marking, allowing the victim to participate in packet filtering [34]. Their approach uses existing IP traceback mechanisms but introduces preferential packet filtering, where a subset of packets carry IP traceback information, and the majority are marked with the hash of network edges. The victim can apply packet filtering based on the likelihood of these markings appearing in the attack graph.

### Router State and Hash-Based Traceback

To reduce the number of packets needed for traceback, Snoeren et al. proposed using router state to track the paths of single packets [30, 31]. Each router hashes specific, invariant fields of the packet and stores the hash in a table. When traceback is needed, the victim presents the upstream router with the packet hash, and the routers recursively query each other for the presence of the hash. This method also allows for storing saturated hash tables for post-attack traceback. DufÔ¨Åeld and Grossglauser proposed trajectory sampling, where packets are deterministically hashed and sampled at every node, with samples sent to a centralized system for reconstructing packet paths [11].

### Advanced Filters and Synergy with Other Systems

Ioannidis and Bellovin, and Mahajan et al. proposed Pushback, a packet filtering infrastructure leveraging router support to filter out DDoS streams [15, 20]. The Pi marking scheme can enhance Pushback by allowing routers to identify common markings and better detect aggregates. Additionally, Pi marking can move filters closer to the attacker, although the non-uniqueness of markings must be considered.

### Conclusion

In this paper, we present Pi, a novel approach to defend against DDoS attacks by marking paths with unique identifiers, enabling per-packet filtering. We have shown how to increase the entropy of Pi marking through several improvements, including IP address hashing, node omission, and edge marking. We have also secured our method against attacker-modified TTL values using TTL Unwrapping. Our experiments demonstrate that Pi marking provides good protection against DDoS, degrades gracefully under increased attacker load, and supports incremental deployment. We believe Pi marking is a powerful and flexible solution for reducing the DDoS threat.