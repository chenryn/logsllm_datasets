title:Covert Channels through Random Number Generator: Mechanisms, Capacity
Estimation and Mitigations
author:Dmitry Evtyushkin and
Dmitry V. Ponomarev
Covert Channels through Random Number Generator:
Mechanisms, Capacity Estimation and Mitigations
Dmitry Evtyushkin
SUNY Binghamton
4400 Vestal Pkwy E
Binghamton, NY, USA
PI:EMAIL
Dmitry Ponomarev
SUNY Binghamton
4400 Vestal Pkwy E
Binghamton, NY, USA
PI:EMAIL
ABSTRACT
Covert channels present serious security threat because they
allow secret communication between two malicious pro-
cesses even if the system inhibits direct communication.
We describe, implement and quantify a new covert channel
through shared hardware random number generation (RNG)
module that is available on modern processors. We demon-
strate that a reliable, high-capacity and low-error covert
channel can be created through the RNG module that works
across CPU cores and across virtual machines. We quan-
tify the capacity of the RNG channel under diﬀerent set-
tings and show that transmission rates in the range of 7-200
kbit/s can be achieved depending on a particular system
used for transmission, assumptions, and the load level. Fi-
nally, we describe challenges in mitigating the RNG channel,
and propose several mitigation approaches both in software
and hardware.
CCS Concepts
•Security and privacy → Side-channel analysis and
countermeasures; Security in hardware;
Keywords
Covert channels; Random number generator
1.
INTRODUCTION
Modern computer systems are commonly shared among
multiple groups of applications executing in diﬀerent secu-
rity domains. The security domain determines if an ap-
plication can be granted access to certain data, perform
privileged operations, or communicate with other applica-
tions. Such application isolation is typically implemented
using system software, and the safety of user data critically
depends on this support. The general principle of least priv-
ilege [46], which applies to many systems including the An-
droid OS [15], advocates granting each application only a
minimal set of permissions that are suﬃcient to support its
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978374
proper functionality. For example, an application managing
local personal data should be restricted from communicating
over the network.
However, a sophisticated attacker or a malicious devel-
oper can use two colluding applications to create an attack
that would send personal data over the network under such
restrictions. The ﬁrst malicious application has access to
personal data and the second application has the network
access. For consistency with previous works in this area, we
refer to the ﬁrst application as the trojan and the second
application as the spy. To create an attack, the adversary
ﬁrst passes sensitive data from the trojan to the spy and
then uses the spy to send the data over the network. How-
ever, since the trojan and the spy reside in two diﬀerent
security domains, a properly implemented permission sys-
tem prevents them from directly communicating with each
other. To bypass this restriction, the trojan and the spy can
communicate using covert channels created by modulating
the use of shared hardware resources in a microprocessor.
Recent literature demonstrated many types of timing chan-
nels through shared CPU resources and their application to
secret key reconstruction [36, 29], secret communication [17,
44] and bypassing of security mechanisms [13, 16, 25]. These
implicit channels can even be used to compromise security of
systems that provide hardware supported isolated execution
environments [40, 10, 11, 57].
Covert channels are particularly dangerous in virtualized
environments, such as computational clouds. Since virtual-
ization naturally provides logical isolation between processes
executing in diﬀerent virtual machines, such environment
seemingly provides a safe platform for manipulating secret
data. Monitoring network traﬃc or direct information ﬂows
would prevent a malicious program from sending sensitive
data to the outside world [6, 4, 42, 45]. Unfortunately, these
safety guarantees can be bypassed if the attackers can com-
municate through covert channels.
In general, covert channels can be categorized into tim-
ing channels and storage channels [31]. Timing channels
are created when the trojan performs manipulations with
a shared resource in a way that interferes with the timing
of some operations performed by the spy.
In contrast, a
storage channel is created by explicitly or implicitly writ-
ing a value to a shared resource by the trojan so that this
write can be observed by the spy. Previous works demon-
strated the exploitation of several shared hardware resources
to create covert communication channels. These include the
CPU functional units [53], the on-chip caches [56, 39], the
AES hardware [22], the branch predictor [14, 12, 22] and the
memory bus [55]. The temperature of the CPU cores has
also been used as covert channel media and temperature-
based channels have been shown to exist between air-gaped
systems [18]. Researchers also demonstrated the feasibility
of covert channels in GPGPUs [43].
While a number of covert channels inside a modern mi-
croprocessor chip have been demonstrated (as exempliﬁed
above), many of these channels have signiﬁcant practical
limitations. These include low transmission rate, diﬃculty
of establishing and maintaining the channel, low resiliency
to system noise and external interference, and fairly simple
solutions to mitigate the channel. More details are presented
in the related work section.
In this paper, we discover, implement and analyze a new
covert channel that exploits hardware random number gen-
eration (RNG) module as the channel media. In most re-
cent Intel processors (based on Skylake microarchitecture),
the hardware RNG module is shared between all processor
cores and is connected to them through the ring intercon-
nect. The RNG module has a ﬁxed number of precomputed
random bits that are stored inside the module and are sup-
plied to instructions that request a random seed. Once the
random bits stored inside the RNG module are used, it takes
a signiﬁcant amount of time to regenerate them using the
entropy source available in silicon. Consequently, the trojan
can either exhaust the RNG module causing the spy to fail
in its request for a random seed, or avoid using the RNG
and allow the spy to succeed in its requests. Consequently,
the trojan can use these two scenarios to either transmit a
one or a zero to the spy.
Compared to previously demonstrated covert channels,
the RNG channel has many important advantages from the
attacker’s standpoint. The RNG channel is fast, has low
error rate, is easy to establish and maintain, and works re-
liably across CPU cores and virtual machines. The channel
readings are easy to obtain without any system calls, be-
cause software (the spy in this case) is directly informed
by the RNG module when an attempt to acquire a random
seed fails.
In this sense, the RNG channel is the storage
channel and thus its maintenance does not require access
to the processor timing infrastructure which often requires
privileged access. The RNG module is rarely used in typi-
cal workloads, therefore the RNG channel is not impacted
by the external interference. Finally, the RNG channel is
diﬃcult to mitigate in a non-virtualized system because the
RNG instructions cannot be disabled by the operating sys-
tem and are used directly from user space without system
calls. In addition, techniques that disable or fuzz [21, 37,
51] with the processor timekeeping facilities will not provide
protection in this case, because the RNG channel does not
rely on timing infrastructure.
The main contributions and the key results of this paper
are:
• We introduce a new covert communication channel
that uses hardware random number generation mod-
ule that is available in modern processors and is shared
among all CPU cores.
• We demonstrate this channel on a recent Intel Skylake
processor and show that the channel reliably works
across CPU cores and virtual machines. Furthermore,
the channel can be established and maintained purely
from the user space without requiring any system calls.
• We quantify the capacity of the RNG channel under
diﬀerent scenarios. While the capacity of the hardware
channel itself can be as high as 3 Mbit/s in idealistic
scenario, we show that transmission rates between 7
kbit/s and 200 kbit/s can be realized depending on
the system and the load level during transmission.
• We present a simple implementation of the RNG covert
channel transferring bytes of data over the channel
with the support for error correction and synchroniza-
tion. This end-to-end channel supports transmission
rates of up to 7 kbit/s.
• We explore the impact of other system activities (such
as the intense GPU activity) on the channel quality
and show that the impact is minimal, thus making the
RNG channel robust to the internal system noise.
• We discuss the diﬃculties involved in mitigating the
RNG channel and propose two software and two
hardware-supported mitigation schemes. The soft-
ware schemes involve modiﬁcations to the hypervisor
to handle the timing of the rdseed instructions diﬀer-
ently and also running a background thread to create
the RNG noise. Hardware approaches include modi-
ﬁcations to the RNG logic to remove the dependency
of the rdseed instruction delays on the instructions
generated by another thread.
2. BACKGROUND
Secure generation of truly random values is essential for
producing encryption keys to support cryptographic opera-
tions. Using weak sources of randomness during key gener-
ation process is a well-known security threat [9, 32, 3, 28].
Random numbers can be generated either in software or in
hardware. Software schemes [19] use various sources of en-
tropy with non-deterministic nature, such as the disk seek
time, the timing between user keystrokes, and the movement
of the mouse. Software techniques are often slow, require
user involvement, and do not have enough true entropy [26].
In contrast, hardware-based random number generators do
not exhibit such limitations. Hardware generators rely on
sources of non-determinism in silicon, such as the thermal
noise [5], providing provable randomness at high speed [50].
To equip programmers with a fast, secure and easy source
of random and pseudo-random numbers, hardware develop-
ers started to embed random number generators (RNG) in-
side the CPU chips. For example, Intel introduced the new
hardware RNG [23] in their Ivy Bridge microarchitecture.
In the initial oﬀering, only pseudo-random number genera-
tor was available via the new rdrand instruction. The later
Broadwell microarchitecture introduced the new rdseed in-
struction to add the capability to read true random numbers
derived directly from the entropy source. AMD also added
support for rdrand instruction and plans to add support for
rdseed instruction in the upcoming microarchitecture. IBM
POWER7+ also has hardware-based true random number
generator [35].
Without loss of generality, the demonstration of the RNG
covert channel in this paper is performed on Intel’s CPU
based on Skylake microarchitecture. Figure 1 depicts a high-
level overview of the RNG mechanism in Skylake processor.
The Entropy Source derives the entropy bits from thermal
noise within the silicon at the rate of around 3 Gbit/s. The
ments. Since the interconnection network is shared among
all components, the activity of other devices can aﬀect the
timing of rdseed requests and result deliveries.
3. THREAT MODEL AND ASSUMPTIONS
We assume that the attacker controls two malicious ap-
plications in the system - the trojan and the spy. The tro-
jan is a more privileged process that has access to sensitive
data that it attempts to transmit to the spy process. No
other communication channels (through the network, shared
memory, ﬁle system, etc.) exist between the trojan and the
spy, therefore these two processes can only communicate by
means of covert channels. We also assume that both the
trojan and the spy have access to shared hardware RNG
module.
The system software is assumed to be secure, so that it
properly enforces the access control and preserves legitimate
information ﬂows. The two processes only require normal
user-level privileges. The RNG channel does not require
access to performance counters, and therefore would work
even if these counters are disabled as is commonly done on
cloud systems [58]. Creating the channel also does not re-
quire access to processor timekeeping resources, therefore we
assume that any protection that fuzz the resolution of the
CPU timers can be in place.
4. COVERT CHANNEL THROUGH INTEL
RNG HARDWARE
In this section we demonstrate how the RNG hardware
can be utilized to construct a fast and reliable inter-core
covert channel. We begin by demonstrating our ideas to
implement covert communication within a single process,
and then build up to practically usable channels.
4.1 RNG Channel in a Single-Process
The fundamental principle of data transmission through
RNG is to control the contention for random values accu-
mulated in the Conditioner Buﬀer (CB) by modulating the
number of rdseed instructions executed at a given time in-
terval. To transmit secret information, the trojan process
either creates the high contention or the low contention for
the use of CB resources. The high contention is created
when the CB is exhausted and the new rdseed requests fail.
In contrast, the low-contention condition is created when
there are available entries in the CB. We assume that the
high contention is associated with the trojan sending a value
of ”1” and the low contention is associated with the trojan
sending a value of ”0”.
To estimate the theoretical maximum capacity of the
RNG channel, we ﬁrst describe its idealized implementa-
tion. The conditions required for this idealized scenario are,
of course, impossible to support in a real-world environment.
Our goal here is to estimate the upper bound on the trans-
mission rate through the RNG channel. A CPU core can
produce rdseed requests at a faster rate than the rate of
refreshing the RNG hardware. Therefore, it is possible for
the trojan process (or a group of processes) to create and
sustain a situation where the CB has just enough bits to
support a single rdseed instruction. At the same time, the
spy process constantly executes one rdseed instruction and
checks its status at the same rate as the rate of replenishing