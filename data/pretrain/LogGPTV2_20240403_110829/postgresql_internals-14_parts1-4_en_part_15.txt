example,for an average load of , transactions per second (excluding virtual
ones),itwillhappeninaboutsixweeksofcontinuousoperation.
Once all the numbers are used up, the counter has to be reset to start the next
round (this situation is called a“wraparound”). But a transactionwith a smaller
 can only be considered older than another transaction with a bigger  if the
assignednumbersarealwaysincreasing.Sothecountercannotsimplystartusing
thesamenumbersanewafterbeingreset.
Allocating  bits for transaction s would have eliminated this problem alto-
gether, so why doesn’t Postgre take advantage of it? The thing is that each
tupleheaderhastostoresfortwotransactions: xminandxmax. Theheaderis p.
quite big already (at least  bytes if data alignment is taken into account), and
addingmorebitswouldhavegivenanotherbytes.
Postgre does implement -bit transaction s1 that extend a regular  bya -bit
epoch,buttheyareusedonlyinternallyandnevergetintodatapages.
Tocorrectlyhandlewraparound,Postgrehastocomparetheageoftransactions
(defined as the number of subsequent transactions that have appeared since the
startofthistransaction)ratherthantransactions.Thus,insteadofthetermsless
thanandgreaterthanweshouldusetheconceptsofolder (precedes)andyounger
(follows).
1 include/access/transam.h,FullTransactionIdtype
143
Chapter7 Freezing
Inthecode,thiscomparisonisimplementedbysimplyusingthe-bitarithmetic:
firstthedifferencebetween-bittransactionsisfound,andthenthisresultis
comparedtozero.1
To better visualize this idea,you can imagine a sequence of transaction s as a
clockface.Foreachtransaction,halfofthecircleintheclockwisedirectionwillbe
inthefuture,whiletheotherhalfwillbeinthepast.
T1 T1 TT11
T2 T2
p fu
sa et ru
t T3
However,thisvisualizationhasanunpleasantcatch. Anoldtransaction()isin
the remote past as compared to more recent transactions. But sooner or later a
newtransactionwillseeitinthehalfofthecirclerelatedtothefuture. Ifitwere
reallyso,itwouldhaveacatastrophicimpact: fromnowon,allnewertransactions
wouldnotseethechangesmadebytransaction.
7.2 Tuple Freezing and Visibility Rules
Topreventsuch“timetravel,”vacuumingperformsonemoretask(inadditionto
pagecleanup):2 itsearchesfortuplesthatarebeyondthedatabasehorizon(sothey
p. arevisibleinallsnapshots)andtagstheminaspecialway,thatis,freezesthem.
Forfrozentuples,visibilityrulesdonothavetotakexminintoaccountsincesuch
tuplesareknowntobevisibleinallsnapshots,sothistransactioncanbesafely
reused.
1 backend/access/transam/transam.c,TransactionIdPrecedesfunction
2 postgresql.org/docs/14/routine-vacuuming.html#VACUUM-FOR-WRAPAROUND
144
7.2 TupleFreezingandVisibilityRules
Youcanimaginethatthexmintransactionisreplacedinfrozentuplesbyahy-
pothetical“minus infinity”(pictured as a snowflake below); it is a sign that this
tuple is created by a transaction that is so far in the past that its actual  does
notmatteranymore.Yetinrealityxminremainsunchanged,whereasthefreezing
attributeisdefinedbyacombinationoftwohintbits: committedandaborted.
(cid:94)T1 (cid:94) (cid:94)T1
T2 (cid:94) (cid:94)
T3 T3 T2 (cid:94)
T4 T1 T4 T1 T4
Manysources(includingthedocumentation)mentionFrozenTransactionId=2.Itisthe
“minusinfinity”thatIhavealreadyreferredto—thisvalueusedtoreplacexmininversions
priorto.,butnowhintbitsareemployedinstead. Asaresult,theoriginaltransaction
remainsinthetuple,whichisconvenientforbothdebuggingandsupport.Oldsystems
canstillcontaintheobsoleteFrozenTransactionId,eveniftheyhavebeenupgradedto
higherversions.
The xmax transaction  does not participate in freezing in any way. It is only
present in outdated tuples, and once such tuples stop being visible in all snap-
shots(whichmeansthatthexmaxisbeyondthedatabasehorizon),theywillbe
vacuumedaway.
Let’screateanewtableforourexperiments.Thefillfactorparametershouldbeset
tothelowestvaluesothateachpagecanaccommodateonlytwotuples—itwillbe
easiertotracktheprogressthisway.Wewillalsodisableautovacuumtomakesure
thatthetableisonlycleanedupondemand.
=> CREATE TABLE tfreeze(
id integer,
s char(300)
)
WITH (fillfactor = 10, autovacuum_enabled = off);
145
Chapter7 Freezing
Wearegoingtocreateyetanotherflavorofthefunctionthatdisplaysheappages
using pageinspect. Dealing with a range of pages, it will show the values of the
freezing attribute (f) and the xmin transaction age for each tuple (it will have to
calltheagesystemfunction—theageitselfisnotstoredinheappages,ofcourse):
=> CREATE FUNCTION heap_page(
relname text, pageno_from integer, pageno_to integer
)
RETURNS TABLE(
ctid tid, state text,
xmin text, xmin_age integer, xmax text
) AS $$
SELECT (pageno,lp)::text::tid AS ctid,
CASE lp_flags
WHEN 0 THEN 'unused'
WHEN 1 THEN 'normal'
WHEN 2 THEN 'redirect to '||lp_off
WHEN 3 THEN 'dead'
END AS state,
t_xmin || CASE
WHEN (t_infomask & 256+512) = 256+512 THEN ' f'
WHEN (t_infomask & 256) > 0 THEN ' c'
WHEN (t_infomask & 512) > 0 THEN ' a'
ELSE ''
END AS xmin,
age(t_xmin) AS xmin_age,
t_xmax || CASE
WHEN (t_infomask & 1024) > 0 THEN ' c'
WHEN (t_infomask & 2048) > 0 THEN ' a'
ELSE ''
END AS xmax
FROM generate_series(pageno_from, pageno_to) p(pageno),
heap_page_items(get_raw_page(relname, pageno))
ORDER BY pageno, lp;
$$ LANGUAGE sql;
Nowlet’sinsertsomerowsintothetableandrunthecommandthatwill
immediatelycreatethevisibilitymap.
=> CREATE EXTENSION IF NOT EXISTS pg_visibility;
=> INSERT INTO tfreeze(id, s)
SELECT id, 'FOO'||id FROM generate_series(1,100) id;
INSERT 0 100
146
7.3 ManagingFreezing
We are going to observe the first two heap pages using the pg_visibility exten-
sion. When vacuuming completes, both pages get tagged in the visibility map
(all_visible) but not in the freeze map (all_frozen), as they still contain some un- v..
frozentuples:
=> VACUUM tfreeze;
=> SELECT *
FROM generate_series(0,1) g(blkno),
pg_visibility_map('tfreeze',g.blkno)
ORDER BY g.blkno;
blkno | all_visible | all_frozen
−−−−−−−+−−−−−−−−−−−−−+−−−−−−−−−−−−
0 | t | f
1 | t | f
(2 rows)
The xmin_age of the transaction that has created the rows equals 1 because it is
thelatesttransactionperformedinthesystem:
=> SELECT * FROM heap_page('tfreeze',0,1);
ctid | state | xmin | xmin_age | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−−−−+−−−−−−
(0,1) | normal | 856 c | 1 | 0 a
(0,2) | normal | 856 c | 1 | 0 a
(1,1) | normal | 856 c | 1 | 0 a
(1,2) | normal | 856 c | 1 | 0 a
(4 rows)
7.3 Managing Freezing
Therearefourmainparametersthatcontrolfreezing.Allofthemrepresenttrans-
actionageanddefinewhenthefollowingeventshappen:
• Freezingstarts(vacuum_freeze_min_age).
• Aggressivefreezingisperformed(vacuum_freeze_table_age).
• Freezingisforced(autovacuum_freeze_max_age).
• Freezingreceivespriority(vacuum_failsafe_age). v.
147
Chapter7 Freezing
Minimal FreezingAge
50million The vacuum_freeze_min_age parameter defines the minimal freezing age of xmin
transactions. Theloweritsvalue,thehighertheoverhead: ifarowis“hot”andis
activelybeingchanged,thenfreezingallitsnewlycreatedversionswillbeawasted
effort. Setting this parameter to a relatively high value allows you to wait for a
while.
Toobservethefreezingprocess,let’sreducethisparametervaluetoone:
=> ALTER SYSTEM SET vacuum_freeze_min_age = 1;
=> SELECT pg_reload_conf();
Nowupdateonerowinthezeropage. Thenewrowversionwillgetintothesame
pagebecausethefillfactorvalueisquitesmall:
=> UPDATE tfreeze SET s = 'BAR' WHERE id = 1;
Theageofalltransactionshasbeenincreasedbyone,andtheheappagesnowlook
asfollows:
=> SELECT * FROM heap_page('tfreeze',0,1);
ctid | state | xmin | xmin_age | xmax
−−−−−−−+−−−−−−−−+−−−−−−−+−−−−−−−−−−+−−−−−−
(0,1) | normal | 856 c | 2 | 857
(0,2) | normal | 856 c | 2 | 0 a
(0,3) | normal | 857 | 1 | 0 a
(1,1) | normal | 856 c | 2 | 0 a
(1,2) | normal | 856 c | 2 | 0 a
(5 rows)
Atthispoint,thetuplesthatareolderthanvacuum_freeze_min_age=1aresubject
p. tofreezing.Butvacuumwillnotprocessanypagestaggedinthevisibilitymap:
=> SELECT * FROM generate_series(0,1) g(blkno),
pg_visibility_map('tfreeze',g.blkno)
ORDER BY g.blkno;
blkno | all_visible | all_frozen
−−−−−−−+−−−−−−−−−−−−−+−−−−−−−−−−−−
0 | f | f
1 | t | f
(2 rows)
148
7.3 ManagingFreezing
Thepreviouscommandhasremovedthevisibilitybitofthezeropage,so
thetuplethathasanappropriatexminageinthispagewillbefrozen.Butthefirst
pagewillbeskippedaltogether:
=> VACUUM tfreeze;
=> SELECT * FROM heap_page('tfreeze',0,1);
ctid | state | xmin | xmin_age | xmax
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−+−−−−−−−−−−+−−−−−−
(0,1) | redirect to 3 | | |
(0,2) | normal | 856 f | 2 | 0 a
(0,3) | normal | 857 c | 1 | 0 a
(1,1) | normal | 856 c | 2 | 0 a
(1,2) | normal | 856 c | 2 | 0 a
(5 rows)
Nowthezeropageappearsinthevisibilitymapagain,andifnothingchangesin
it,vacuumingwillnotreturntothispageanymore:
=> SELECT * FROM generate_series(0,1) g(blkno),
pg_visibility_map('tfreeze',g.blkno)
ORDER BY g.blkno;
blkno | all_visible | all_frozen
−−−−−−−+−−−−−−−−−−−−−+−−−−−−−−−−−−
0 | t | f
1 | t | f
(2 rows)
Age forAggressive Freezing
Aswehavejustseen,ifapagecontainsonlythecurrenttuplesthatarevisiblein
allsnapshots,vacuumingwillnotfreezethem. Toovercomethisconstraint,Post-
greprovidesthevacuum_freeze_table_ageparameter.Itdefinesthetransaction 150
age that allows vacuuming to ignore the visibility map,so any heap page can be million
frozen.
Foreachtable,thesystemcatalogkeepsatransactionforwhichitisknownthat
alltheoldertransactionsaresuretobefrozen.Itisstoredasrelfrozenxid:
149
Chapter7 Freezing
=> SELECT relfrozenxid, age(relfrozenxid)
FROM pg_class
WHERE relname = 'tfreeze';
relfrozenxid | age
−−−−−−−−−−−−−−+−−−−−
854 | 4
(1 row)
It is the age of this transaction that is compared to the vacuum_freeze_table_age
valuetodecidewhetherthetimehascomeforaggressivefreezing.
v.. Thankstothefreezemap,thereisnoneedtoperformafulltablescanduringvac-
uuming: it is enough to check only those pages that do not appear in the map.
Apartfromthisimportantoptimization,thefreezemapalsobringsfaulttolerance:
ifvacuumingisinterrupted,itsnextrunwillnothavetogetbacktothepagesthat
havealreadybeenprocessedandaretaggedinthemap.
Postgre performs aggressive freezing of all pages in a table each time when
the number of transactions in the system reaches the vacuum_freeze_table_age−
vacuum_freeze_min_agelimit(ifthedefaultvaluesareused,ithappensaftereach
 million transactions). Thus,if the vacuum_freeze_min_age value is too big,it
canleadtoexcessivefreezingandincreasedoverhead.
To freeze the whole table,let’s reduce the vacuum_freeze_table_age value to four;
thentheconditionforaggressivefreezingwillbesatisfied:
=> ALTER SYSTEM SET vacuum_freeze_table_age = 4;
=> SELECT pg_reload_conf();
Runthecommand:
=> VACUUM VERBOSE tfreeze;
INFO: aggressively vacuuming "public.tfreeze"
INFO: table "tfreeze": found 0 removable, 100 nonremovable row
versions in 50 out of 50 pages
DETAIL: 0 dead row versions cannot be removed yet, oldest xmin: 858
Skipped 0 pages due to buffer pins, 0 frozen pages.
CPU: user: 0.00 s, system: 0.00 s, elapsed: 0.00 s.
VACUUM
150
7.3 ManagingFreezing
Now that the whole table has been analyzed, the relfrozenxid value can be ad-
vanced—heappagesareguaranteedtohavenoolderunfrozenxmintransactions:
=> SELECT relfrozenxid, age(relfrozenxid)
FROM pg_class
WHERE relname = 'tfreeze';
relfrozenxid | age
−−−−−−−−−−−−−−+−−−−−
857 | 1
(1 row)
Thefirstpagenowcontainsonlyfrozentuples:
=> SELECT * FROM heap_page('tfreeze',0,1);
ctid | state | xmin | xmin_age | xmax
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−+−−−−−−−−−−+−−−−−−
(0,1) | redirect to 3 | | |
(0,2) | normal | 856 f | 2 | 0 a
(0,3) | normal | 857 c | 1 | 0 a
(1,1) | normal | 856 f | 2 | 0 a
(1,2) | normal | 856 f | 2 | 0 a
(5 rows)
Besides,thispageistaggedinthefreezemap:
=> SELECT * FROM generate_series(0,1) g(blkno),
pg_visibility_map('tfreeze',g.blkno)
ORDER BY g.blkno;
blkno | all_visible | all_frozen
−−−−−−−+−−−−−−−−−−−−−+−−−−−−−−−−−−
0 | t | f
1 | t | t
(2 rows)
Age for ForcedAutovacuum
Sometimes it is not enough to configure the two parameters discussed above to
timelyfreezetuples. Autovacuummightbeswitchedoff,whileregularis
notbeingcalledatall(itisaverybadidea,buttechnicallyitispossible). Besides,
151
Chapter7 Freezing
p. some inactive databases (like template0) may not be vacuumed. Postgre can
handlesuchsituationsbyforcing autovacuumintheaggressivemode.
Autovacuum is forced1 (even if it is switched off) when there is a risk that the
200 age of some unfrozen transaction s in the database will exceed the autovacu-
million um_freeze_max_age value. The decision is taken based on the age of the oldest
pg_class.relfrozenxidtransactioninallthetables,asalltheoldertransactionsare
guaranteedtobefrozen.Theofthistransactionisstoredinthesystemcatalog:
=> SELECT datname, datfrozenxid, age(datfrozenxid) FROM pg_database;
datname | datfrozenxid | age
−−−−−−−−−−−+−−−−−−−−−−−−−−+−−−−−