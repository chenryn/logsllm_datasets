### Direct Alternative
- **Farther Undo & Redo**
- **Recovery Point**
- **Process Step**
- **Errors**
- **Applicable Recovery Patterns**

### Process Steps
1. Launch a web instance.
2. Assign an elastic IP to the web instance.
3. Launch a database instance.
4. Assign an elastic IP to the database instance.

### Errors and Applicable Recovery Patterns
- **Web instance not launched**: RP1, RP3, RP5
- **Database instance not launched**: RP1, RP3, RP5, RP8

### Recovery Points
- **Recovery Point 1**: After Step 2
- **Recovery Point 2**: After Step 4

### Satisfying Recovery Requirement R3
#### Selected Recovery Action (Pareto Set)
- Restart the web instance.
- Assign an elastic IP to the web instance.
- **Recovery Impact (Pareto Set)**: 0 s2

#### Selected Recovery Action (User Constraints)
- Restart the web instance.
- Assign an elastic IP to the web instance.
- **Recovery Impact (User Constraints)**: 0 s2

- Restart the database instance.
- Assign an elastic IP to the database instance.
- **Recovery Impact (User Constraints)**: 0 s2

The selected recovery action has the optimal/acceptable recovery impact, meaning its impact is relatively small compared to other actions. This selection and optimization mechanism ensures that the recovery impact meets the objectives set by stakeholders, thus achieving the requirement of reducing negative impact.

### D. Recovery Reducing Monetary Cost
#### 1. Experimental Procedure
This requirement focuses on the monetary cost incurred during the recovery process in a cloud system. We measured the recovery monetary cost by performing the installation operation on a cloud application with no software running in the instances. We used our proprietary fault injection tool to inject faults at two determined recovery points and automatically determined the applicable recovery patterns based on the method described in Section 7.3. We then performed recovery using the selected acceptable recovery action for each of the two recovery action selection methods. The faults injected are detailed in Table 22, and they are representative based on industry interviews and failure reports. The recovery monetary cost was calculated by summing the costs incurred by each step in the recovery action. The experiment was run 30 times to measure the average recovery monetary cost.

**Table 22. Faults Injected for Installation**
| Recovery Point | Fault Injected |
|----------------|----------------|
| Recovery Point 1 (After Step 2) | Web instance not launched |
| Recovery Point 2 (After Step 4) | Database instance not launched |

#### 2. Experimental Results
**Table 23. Recovery Monetary Cost for Installation**
| Recovery Point | Process Step | Errors | Applicable Recovery Patterns | Selected Recovery Action (Pareto Set) | Monetary Cost (Pareto Set) | Selected Recovery Action (User Constraints) | Monetary Cost (User Constraints) |
|----------------|--------------|--------|-------------------------------|--------------------------------------|---------------------------|--------------------------------------------|----------------------------------|
| Recovery Point 1 | Step 1. Launch a web instance<br>Step 2. Assign an elastic IP to the web instance | Web instance not launched | RP1, RP3, RP5 | Restart the web instance; Assign elastic IP to the web instance | $0 | Restart the web instance; Assign elastic IP to the web instance | $0 |
| Recovery Point 2 | Step 3. Launch a database instance<br>Step 4. Assign an elastic IP to the database instance | Database instance not launched | RP1, RP3, RP5, RP8 | Restart the database instance; Assign elastic IP to the database instance | $0 | Restart the database instance; Assign elastic IP to the database instance | $0 |

The recovery monetary cost of the selected recovery action is the optimal/acceptable one, meaning its cost is relatively small compared to other actions. This selection and optimization mechanism ensures that the recovery monetary cost meets the objectives set by stakeholders, thus achieving the requirement of reducing monetary cost.

### E. Recovery from Errors without Known Causes
#### 1. Experimental Procedure
POD-Recovery does not require a known cause; it dynamically generates a recovery plan from the current erroneous state to a desired state. To study this, we performed additional experiments by injecting various faults during the installation process and triggering recovery without providing the error causes. Each type of injected fault was tested 30 times.

#### 2. Experimental Results
**Table 24. Recovery without Known Causes**
| Recovery Point | Error Occurred | Fault Injected (Cause) | # Successful Recoveries |
|----------------|----------------|-----------------------|-------------------------|
| Recovery Point 1 | Web instance not launched | "StartInstances" cloud API call fails | 30 |
| Recovery Point 2 | Database instance not launched | "StartInstances" cloud API call fails | 30 |
| Recovery Point 1 | Cloud disconnected system | Cloud disconnected system | 0 |
| Recovery Point 2 | Cloud disconnected system | Cloud disconnected system | 0 |

Recovery was successful for all injected faults except for the "cloud system disconnected" fault, which refers to a network disconnect between the recovery service and the AWS API. Due to this disconnect, POD-Recovery cannot take any recovery actions or assess the current state of the resources, and hence cannot recover.

#### 3. Satisfying Recovery Requirement R5
The recovery from errors without known causes is successful for all injected faults, except for the "cloud system disconnected" fault. This demonstrates that POD-Recovery can effectively handle errors without known causes, meeting the requirement.