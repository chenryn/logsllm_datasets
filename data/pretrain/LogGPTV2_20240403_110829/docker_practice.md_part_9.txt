### Docker 基础操作指南

#### 伪终端与标准输入
使用 `-t` 选项可以让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入。而 `-i` 选项则保持容器的标准输入处于打开状态。在交互模式下，用户可以通过创建的终端输入命令。例如：
```bash
root@af8bae53bdd3:/# pwd
/
root@af8bae53bdd3:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
```

#### 创建容器时的标准操作
当使用 `docker run` 创建容器时，Docker 执行以下步骤：
1. 检查本地是否存在指定镜像，如果不存在则从公有仓库下载。
2. 利用镜像创建并启动一个容器。
3. 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层。
4. 从宿主机配置的网桥接口中桥接一个虚拟接口到容器中。
5. 从地址池配置一个 IP 地址给容器。
6. 执行用户指定的应用程序。
7. 应用程序执行完毕后，容器被终止。

#### 启动已终止的容器
可以使用 `docker start` 命令直接将一个已经终止的容器重新启动运行。容器的核心是所执行的应用程序，所需的资源都是应用程序运行所必需的。可以在伪终端中使用 `ps` 或 `top` 查看进程信息。例如：
```bash
root@ba267838cc1b:/# ps
PID TTY TIME CMD
1 ? 00:00:00 bash
11 ? 00:00:00 ps
```
可见，容器中仅运行了指定的 `bash` 应用。这种特性使得 Docker 对资源的利用率极高，是一种轻量级虚拟化技术。

#### 守护态运行
更多时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出到当前宿主机。此时，可以通过添加 `-d` 参数来实现。例如：
- 不使用 `-d` 参数运行容器：
  ```bash
  $ sudo docker run ubuntu:14.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"
  hello world
  hello world
  ...
  ```
  容器会将输出结果打印到宿主机上。

- 使用 `-d` 参数运行容器：
  ```bash
  $ sudo docker run -d ubuntu:14.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"
  77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a
  ```
  此时容器会在后台运行，不会将输出结果打印到宿主机上（输出结果可以用 `docker logs` 查看）。

#### 终止容器
可以使用 `docker stop` 来终止一个运行中的容器。此外，当 Docker 容器中指定的应用终结时，容器也会自动终止。例如，对于只启动了一个终端的容器，用户通过 `exit` 命令或 `Ctrl+d` 退出终端时，所创建的容器立刻终止。

终止状态的容器可以用 `docker ps -a` 命令查看。例如：
```bash
$ sudo docker ps -a
CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                      PORTS     NAMES
ba267838cc1b   ubuntu:14.04   "/bin/bash"   30 minutes ago  Exited (0) About a minute ago               trusting_newton
98e5efa7d997   training/webapp:latest "python app.py"  About an hour ago  Exited (0) 34 minutes ago              backstabbing_pike
```

#### 进入容器
在使用 `-d` 参数时，容器启动后会进入后台。有时需要进入容器进行操作，可以使用 `docker attach` 命令或 `nsenter` 工具。

- **attach 命令**：
  ```bash
  $ sudo docker run -idt ubuntu
  243c32535da7d142fb0e6df616a3c3ada0b8ab417937c853a9e1c251f499f550
  $ sudo docker ps
  CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
  243c32535da7   ubuntu:latest "/bin/bash" 18 seconds ago  Up 17 seconds   nostalgic_hypatia
  $ sudo docker attach nostalgic_hypatia
  root@243c32535da7:/#
  ```

- **nsenter 命令**：
  安装 `nsenter` 工具：
  ```bash
  $ cd /tmp; curl https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz | tar -zxf-; cd util-linux-2.24;
  $ ./configure --without-ncurses
  $ make nsenter && sudo cp nsenter /usr/local/bin
  ```

  使用 `nsenter` 进入容器：
  ```bash
  $ PID=$(docker inspect --format "{{ .State.Pid }}" <container_id>)
  $ nsenter --target $PID --mount --uts --ipc --net --pid
  ```

#### 导出和导入容器
- **导出容器**：
  ```bash
  $ sudo docker ps -a
  CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
  7691a814370e   ubuntu:14.04 "/bin/bash" 36 hours ago  Exited (0) 21 hours ago  test
  $ sudo docker export 7691a814370e > ubuntu.tar
  ```

- **导入容器快照**：
  ```bash
  $ cat ubuntu.tar | sudo docker import - test/ubuntu:v1.0
  $ sudo docker images
  REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
  test/ubuntu         v1.0                9d37a6082e97        About a minute ago  171.3 MB
  ```

#### 删除容器
- 删除一个处于终止状态的容器：
  ```bash
  $ sudo docker rm trusting_newton
  trusting_newton
  ```

- 删除一个运行中的容器：
  ```bash
  $ sudo docker rm -f trusting_newton
  ```

- 清理所有处于终止状态的容器：
  ```bash
  $ sudo docker rm $(docker ps -a -q)
  ```

#### 访问仓库
仓库（Repository）是集中存放镜像的地方。注册服务器（Registry）管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。

#### Docker Hub
Docker Hub 是 Docker 官方维护的一个公共仓库，其中包含超过 15,000 个镜像。

- **登录**：
  ```bash
  $ docker login
  ```

- **基本操作**：
  - 查找镜像：
    ```bash
    $ sudo docker search centos
    NAME                  DESCRIPTION                                     STARS   OFFICIAL   AUTOMATED
    centos                The official build of CentOS.                    465     [OK]
    tianon/centos         CentOS 5 and 6, created using rinse instead...   28
    blalor/centos         Bare-bones base CentOS 6.5 image                6       [OK]
    saltstack/centos-6-minimal  6       [OK]
    tutum/centos-6.4      DEPRECATED. Use tutum/centos:6.4 instead. ...   5       [OK]
    ...
    ```

  - 下载镜像：
    ```bash
    $ sudo docker pull centos
    Pulling repository centos
    0b443ba03958: Download complete
    539c0211cd76: Download complete
    511136ea3c5a: Download complete
    7064731afe90: Download complete
    ```

  - 推送镜像：
    ```bash
    $ sudo docker push user_name/image_name
    ```

- **自动创建**：
  自动创建功能允许用户通过 Docker Hub 指定跟踪一个目标网站上的项目，一旦项目发生新的提交，则自动执行创建。配置自动创建包括以下步骤：
  1. 创建并登录 Docker Hub 和目标网站。
  2. 在目标网站中连接帐户到 Docker Hub。
  3. 在 Docker Hub 中配置一个自动创建。
  4. 选取一个目标网站中的项目（需要含 Dockerfile）和分支。
  5. 指定 Dockerfile 的位置，并提交创建。