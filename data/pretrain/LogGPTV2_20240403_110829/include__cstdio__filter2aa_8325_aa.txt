#include 
#include 
#include 
#include 
#include 
using namespace std;
typedef complex cd;
unordered_map state, temp;
void reduce(){
	unordered_set to_remove;
	for(auto p: state){
		if(abs(p.second)(0,1);
		}
	}
	printf("Rotate %zu.\n", which);
}
int ilog2(long long num){
	for(int i=0;; i++){
		if((1LL=0.25){
			ret++;
			for(auto p: state){
				size_t i=p.first;
				cd si=p.second;
				if(i&(1LL<<it)){
					temp[i]=si/sum1;
				}
			}
		}
		else{
			for(auto p: state){
				size_t i=p.first;
				cd si=p.second;
				if(!(i&(1LL<<it))){
					temp[i]=si/sum2;
				}
			}
		}
		swap(state, temp);
	}
	return ret;
}
int main(){
	state[0]=1;
	add(0);
	add(3);
	add(4);
	add(7);
	add(8);
	add(9);
	add(10);
	add(11);
	add(14);
	add(20);
	add(21);
	add(24);
	add(25);
	add(26);
	add(33);
	add(35);
	add(40);
	add(41);
	add(43);
	add(45);
	add(46);
	add(47);
	xsti(0x10000000000LL, 0x400000000LL);
	xst(45, 0);
	xst(32, 20);
	xst(44, 47);
	xst(45, 10);
	xst(45, 24);
	xst(5, 28);
	xst(41, 15);
	roti(0x1000000);
	xst(25, 12);
	roti(0x100000000LL);
	xst(43, 25);
	roti(0x20);
	xst(24, 9);
	xst(10, 37);
	xst(26, 37);
	roti(0x20);
	xst(35, 11);
	roti(0x10000000000LL);
	xst(12, 19);
	xst(24, 5);
	xst(24, 9);
	roti(0x40);
	xst(0, 43);
	xst(45, 33);
	xst(11, 42);
	xst(34, 35);
	xst(3, 44);
	xst(25, 21);
	xst(4, 18);
	roti(0x4000000000LL);
	xst(10, 43);
	xst(21, 39);
	xst(39, 20);
	roti(0x40000000);
	xst(24, 45);
	xst(46, 0);
	xst(47, 16);
	roti(0x100000000000LL);
	xst(35, 24);
	xst(19, 14);
	xst(38, 17);
	xst(13, 38);
	xst(5, 24);
	xst(19, 10);
	xst(6, 41);
	xst(3, 26);
	xst(43, 37);
	xst(45, 46);
	xst(40, 6);
	roti(0x40000000);
	xst(10, 27);
	xst(37, 1);
	xst(18, 42);
	roti(2);
	xst(37, 25);
	xst(20, 32);
	xst(37, 3);
	xst(34, 40);
	roti(0x100000000000LL);
	xst(13, 35);
	xst(7, 6);
	xst(28, 16);
	xst(40, 35);
	xst(35, 5);
	roti(1);
	xst(14, 42);
	xst(46, 34);
	xst(7, 43);
	xst(38, 42);
	xst(32, 30);
	xst(27, 16);
	xst(1, 21);
	xst(35, 13);
	xst(33, 34);
	xst(10, 28);
	xst(23, 45);
	roti(0x800000000000LL);
	xst(8, 13);
	xst(21, 31);
	xst(16, 40);
	xst(37, 20);
	xst(3, 32);
	xst(28, 29);
	xst(15, 10);
	xst(19, 47);
	xst(6, 36);
	xst(4, 34);
	roti(0x100000000000LL);
	xst(23, 19);
	xst(19, 12);
	xst(40, 18);
	xst(38, 19);
	xst(16, 3);
	xst(22, 26);
	roti(0x100000000000LL);
	xst(11, 44);
	xst(6, 16);
	roti(0x4000000);
	xst(1, 0);
	xst(0, 10);
	roti(0x800000);
	roti(0x400000000000LL);
	roti(0x80000000000LL);
	xst(42, 9);
	xst(21, 6);
	xst(42, 31);
	xst(32, 6);
	xst(11, 22);
	xst(36, 44);
	xst(9, 8);
	xst(45, 1);
	xst(26, 27);
	xst(16, 13);
	xst(36, 33);
	xst(42, 26);
	xst(28, 18);
	xst(27, 21);
	roti(2);
	xst(16, 31);
	xst(1, 41);
	xst(19, 46);
	xst(34, 16);
	xst(11, 47);
	xst(9, 47);
	xst(42, 12);
	roti(4);
	xst(46, 13);
	roti(0x40000000);
	xst(3, 45);
	xst(3, 36);
	roti(0x4000000);
	roti(0x800);
	xst(25, 37);