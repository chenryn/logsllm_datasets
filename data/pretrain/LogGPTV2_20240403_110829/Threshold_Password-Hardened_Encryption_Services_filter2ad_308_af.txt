answer DecO oracle queries5 honestly. B however has knowledge
¯𝑘0. B therefore simulate the answers to
of ¯𝑘0 for which ¯𝐾0 = 𝐺
DecO oracle queries during this time period as follows.
B computes the views of all parties honestly except for the values
𝑈0, 𝑉0,𝑇0 and 𝑇 ′
0. For the 𝑞-th query, B sets 𝑈0 := 𝐺 𝛽 and 𝑉0 := 𝐺𝛾 ·
𝐺 𝛽 ¯𝑘0 ·𝑌−1
0,0 . For other queries,B computes 𝑈0 and 𝑉0 honestly. For all
queries, to compute 𝑇0 and 𝑇 ′
0, B runs the extractor of the NIZKPoK
to extract the discrete logarithm ˜𝑢 and ˜𝑢′ such that ˜𝑈 = 𝐺 ˜𝑢 and
˜𝑈 ′ = 𝐺 ˜𝑢′. It then compute 𝑇0 := 𝐺𝛼 ˜𝑢 and 𝑇 ′
Clearly, if (𝐺, 𝐺𝛼, 𝐺 𝛽, 𝐺𝛾) is a DH tuple, B simulates Hyb𝑏,3,𝑞−1
perfectly. Else, if (𝐺, 𝐺𝛼, 𝐺 𝛽, 𝐺𝛾) is a random tuple, B simulates
Hyb′
𝑏,3,𝑞
Case 2: 0 ∈ 𝐼. Without loss of generality, we can assume that
𝐼 = {0, 𝑖1, . . . , 𝑖𝑡−1} for some ˜𝐼 := {𝑖1, . . . , 𝑖𝑡−1} ⊆ [𝑚]. In this case,
let 𝑀𝐼 be the following (𝑡 − 1)-by-𝑡 matrix
𝑖𝑡−1
1
...
𝑖𝑡−1
𝑡−1
perfectly. The claim then follows.
0 := 𝐺𝛼 ˜𝑢′.
𝑖1
...
𝑖𝑡−1
. . .
. . .
. . .
B receives a DDH instance (𝐺, 𝐺𝛼, 𝐺 𝛽, 𝐺𝛾). When answering
the 𝑡-th honest key rotation query, B generates secret key shares
for the combined public key ¯𝐾′
0 := 𝐺𝛼. For this, it samples a random
vector u := (𝑢0, . . . , 𝑢𝑡−1)𝑇 ←$ Ker(𝑀𝐼) in the kernel of 𝑀𝐼 , i.e.,
𝑀𝐼 u = 0. It also samples a random vector v = (𝑣0, . . . , 𝑣𝑡−1)𝑇 ←$ Z𝑡
𝑝.
It sets ¯𝐾′
𝑗 := 𝐺𝛼𝑢 𝑗+𝑣𝑗 for all 𝑗 ∈ [0, 𝑡 − 1]. For the corrupt parties
𝑖 ∈ ˜𝐼, B can compute secret keys 𝑘𝑖 without knowledge of 𝛼 as
𝑗=0 𝑣 𝑗𝑖 𝑗 (since 𝑀𝐼 u = 0), which are then
5B can answer DecChO oracle queries honestly since it does not need to return the
view of S, while the views of R𝑖 for all 𝑖 ∈ [𝑚] can be computed without knowing
𝑘0.
𝑗=0(𝛼𝑢 𝑗 + 𝑣 𝑗)𝑖 𝑗 =𝑡−1
𝑘𝑖 :=𝑡−1
 .
𝑀𝐼 :=
1
...
1
returned to A. Note that B does not know 𝑘𝑖 :=𝑡−1
𝑗=0(𝛼𝑢 𝑗 + 𝑣 𝑗)𝑖 𝑗
for the honest parties 𝑖 ∉ ˜𝐼 and hence, during the time between the
𝑡-th and (𝑡 + 1)-st honest key rotation, cannot answer DecO oracle
queries honestly. B can however simulate the views of all parties
in a DecO query using the DDH instance and the extractor of the
NIZKPoK as in case 1. We thus arrive at a similar conclusion that, if
(𝐺, 𝐺𝛼, 𝐺 𝛽, 𝐺𝛾) is a DH tuple, B simulates Hyb𝑏,3,𝑞−1 perfectly and,
if (𝐺, 𝐺𝛼, 𝐺 𝛽, 𝐺𝛾) is a random tuple, B simulates Hyb′
perfectly.
The claim then follows.
𝑏,3,𝑞
3.3.2
From Hyb0,3,𝑄Dec to Hyb1,3,𝑄Dec. We show that
= 1(cid:105) − Pr(cid:104)
= 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ negl(𝜆) .
(cid:12)(cid:12)(cid:12) Pr(cid:104)
Hyb0,3,𝑄Dec
Hyb1,3,𝑄Dec
assuming the CCA-security of SKE and DDH.
Suppose not, we construct an adversary B against the CCA-
security of SKE or DDH as follows. Without loss of generality, let
the 𝑡-th honest key rotation query be the latest one before the
ChO𝑏 oracle query. Let 𝐼 be the set of corrupt parties requested by
A during this key rotation query. We consider two cases.
𝑏
Case 1: 0 ∉ 𝐼. Without loss of generality, we can assume that 𝐼 =
[𝑚]. In this case, note that S remains uncorrupt when answering
the ChO𝑏 oracle query, as well as the last (say 𝑡′-th, potentially
malicious) key rotation query. For the 𝑡′-th key rotation query,
B simulates most secret key components honestly, except that it
sets 𝑠0 := 𝜖. To generate the challenge ciphertext, B computes
𝐶0 := 𝐻0(pw∗, 𝑛∗)𝐻0(𝑛∗)¯𝑠0 and 𝐶1,𝑏 := 𝐻1(pw∗, 𝑛∗)𝐻1(𝑛∗)¯𝑠0𝑀∗
by
interacting with the possibly malicious rate-limiters. It then submits
(𝐶0, 𝐶1,0) and (𝐶0, 𝐶1,1) to the challenge oracle of SKE. During the
time between the 𝑡′-th and the (𝑡′ + 1)-st key rotation queries,
whenever SKE.Enc(𝑠0, ·) is supposed to be executed (except when
answering the ChO𝑏 oracle query), B delegates the computation
to the encryption oracle of SKE. B makes a random guess 𝑏′ of the
random bit used by the SKE challenger. Whenever SKE.Dec(𝑠0, ·) is
supposed to be executed on the challenge ciphertext 𝐶∗, the return
value is replaced by (𝐶0, 𝐶1,𝑏′). When it is supposed to be executed
on other non-challenge ciphertext, B delegates the computation to
the decryption oracle of SKE. Clearly,when the guess 𝑏′ is correct,B
perfectly simulates the environments of Hyb0,3,𝑄Dec
or Hyb1,3,𝑄Dec
,
depending on the secret bit chosen by the SKE challenger.
Case 2: 0 ∈ 𝐼. We define an intermediate hybrid Hyb′
𝑏,3,𝑄Dec
, except that when generat-
which is mostly identical to Hyb0,3,𝑄Dec
ing the challenge ciphertext,the experiment samples (𝐶0, 𝐶1) ←$ G2
). Clearly Hyb′
uniformly at random (independent of 𝑀∗
and
Hyb′
are functionally equivalent. It therefore suffices to show
0,3,𝑄Dec
𝑏
= 1(cid:105) − Pr(cid:104)
Hyb𝑏,3,𝑄Dec
= 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ negl(𝜆) .
1,3,𝑄Dec
(cid:12)(cid:12)(cid:12) Pr(cid:104)
Hyb′
𝑏,3,𝑄Dec
Without loss of generality,we can assume that 𝐼 = {0, 𝑖1, . . . , 𝑖𝑡−1}
for some ˜𝐼 := {𝑖1, . . . , 𝑖𝑡−1} ⊆ [𝑚]. In this case, we will make use of
the matrix 𝑀𝐼 defined above, and simulate the secret key compo-
nents 𝑠𝑖 for 𝑖 ∈ ˜𝐼 in a similar fashion. As before, although B does not
possess the knowledge of 𝑠𝑖 (but only 𝐺𝑠𝑖 ) for 𝑖 ∉ ˜𝐼, encryption and
10
decryption can be simulated given a DDH instance and by program-
ming the random oracles6. If B is given a DH instance, it simulates
perfectly. Otherwise, B is given a random instance, and
Hyb𝑏,3,𝑄Dec
it simulates Hyb′
□
perfectly. The claim then follows.
𝑏,3,𝑄Dec
Theorem 3.2 (Soundness). If the discrete logarithm as-
sumption holds with respect to GGen, then the (𝑡, 𝑚)-PHE scheme
constructed above is sound in the random oracle model7.
Proof. Firstly,we recall that the well known generalized Schnorr
protocol [17] (recalled in Figure 7) is a statistical proof of knowl-
edge in the random oracle model. We therefore do not need extra
assumptions on the NIZKPoK.
We give a high level idea of why an adversary against sound-
ness cannot exist in the random oracle model, under the discrete
logarithm assumption. Suppose such an adversary A exists, we con-
sider the following experiment. First, it runs A as in the soundness
experiment until A outputs the indices (𝑖, 𝑗). It then retrieves
(sk0, 𝑛, 𝐶, pw, 𝑀) := Queries[𝑖] and
0, 𝑛′, 𝐶′, pw′, 𝑀′) := Queries[ 𝑗].
(sk′
With non-negligible probability, the condition 𝑏0 ∧ 𝑏1 ∧ (𝑏2 ∨ 𝑏3)
is satisfied. Since 𝑏0 ∧ 𝑏1 is satisfied, we have
0, 𝐶′)∧
𝑀 ≠ ⊥ ∧ 𝑀′ ≠ ⊥.
(sk0, 𝐶) = (sk′
By the second condition, we can deduce that regardless of whether
these tuples were created during an encryption or decryption oracle
query, the server did not abort the protocol. Thus, we must have
KVf(0, sk0) = 1, which means sk0 is of the form sk0 = (𝑠0, 𝑘0,
𝐾0, { ¯𝑆 𝑗 , ¯𝐾𝑗}𝑡−1
𝑗=0) where 𝐾0 = 𝐺𝑘0. In the following, let (𝐶0, 𝐶1) ←
SKE.Dec(𝑠0, 𝐶).
Suppose (sk0, 𝑛, 𝐶, pw, 𝑀) is created during an encryption oracle
query. Then we must have 𝑀 ≠ 𝜖. By running the extractor E,
whose existence is guaranteed by the proof of knowledge property
of the NIZKPoK, on the proofs generated by the (possibly malicious)
rate-limiters, the reduction can extract ¯𝑠0 such that
𝐶0 = 𝐻0(pw, 𝑛)𝐻0(𝑛)¯𝑠0
𝐶1 = 𝐻1(pw, 𝑛)𝐻1(𝑛)¯𝑠0𝑀.
(1)
(2)
Similarly, if (sk′
0, 𝑛′, 𝐶′, pw′, 𝑀′) is created during an encryption
oracle query, then 𝑀′ ≠ 𝜖, and the reduction can extract ¯𝑠0 with
𝐶0 = 𝐻0(pw′, 𝑛′)𝐻0(𝑛′)¯𝑠0
(3)
𝐶1 = 𝐻1(pw′, 𝑛′)𝐻1(𝑛′)¯𝑠0𝑀′.
(4)
Suppose (sk0, 𝑛, 𝐶, pw, 𝑀) is created during a decryption oracle
query, we consider two cases: 1) 𝑀 ≠ 𝜖, and 2) 𝑀 = 𝜖. In the first
case, the extraction process is slightly more complicated than when
the tuple is created via encryption. Nevertheless, the experiment
6e.g., to compute 𝐻0(𝑛)𝑠𝑖 and 𝐻1(𝑛)𝑠𝑖 for 𝑛 ≠ 𝑛∗, B first samples 𝑥0 and 𝑥1 and
programs 𝐻0(𝑛) := 𝐺𝑥0 and 𝐻1(𝑛) := 𝐺𝑥1 . It can then compute 𝐻0(𝑛)𝑠𝑖 = 𝐺𝑥0𝑠𝑖
and 𝐻1(𝑛)𝑠𝑖 = 𝐺𝑥1𝑠𝑖 . For 𝑛 = 𝑛∗, B programs the random oracle similarly except
that 𝐺𝑥0 and 𝐺𝑥1 are derived from the DDH instance.
7There is an error in [12], where the strong soundness property is claimed to hold
assuming only the soundness of the NIZKPoK, which in turn holds unconditionally in
the random oracle model. In fact, they would also need to rely on the discrete logarithm
assumption.
can also extract ¯𝑠0 so that it satisfies the above relations. In the
second case, we can deduce that
𝐶0 ≠ 𝐻0(pw, 𝑛)𝐻0(𝑛)¯𝑠0 .
(5)
Similar conclusion can be made if (sk′
0, 𝑛′, 𝐶′, pw′, 𝑀′) is created
during a decryption oracle query.
Next, we examine the conditions 𝑏2 and 𝑏3, where at least one of
them must be satisfied. Suppose 𝑏2 is satisfied, we have ((𝑛, pw) =
(𝑛′, pw′)) ∧ (𝑀 ≠ 𝑀′). There are two possibilities.
(1) 𝑀 = 𝜖 and 𝑀′ ≠ 𝜖 (or 𝑀 ≠ 𝜖 and 𝑀′ = 𝜖): Since 𝑀 = 𝜖, the
tuple must have been produced via decryption, and by Equa-
tion (5) we have 𝐶0 ≠ 𝐻0(pw, 𝑛)𝐻0(𝑛)¯𝑠0. However, since
𝑀′ ≠ 𝜖, by Equation (3) we have 𝐶0 = 𝐻0(pw, 𝑛)𝐻0(𝑛)¯𝑠0
(note that (𝑛, pw) = (𝑛′, pw′)) which is a contradicton.
(2) 𝑀 ≠ 𝜖 and 𝑀′ ≠ 𝜖: From Equations (2) and (4) we can deduce
that 𝑀 = 𝑀′, which is a contradiction.
Suppose 𝑏3 is satisfied, we have ((𝑛, pw) ≠ (𝑛′, pw′))∧(𝑀, 𝑀′ ∈
M). Since 𝑀, 𝑀′ ∈ M, we must have 𝑀 ≠ 𝜖 and 𝑀′ ≠ 𝜖. Then,
from Equations (1) and (3), we can deduce
𝐻0(pw, 𝑛)𝐻0(𝑛)¯𝑠0𝐻0(pw′, 𝑛′)−1𝐻0(𝑛′)−¯𝑠0 = 𝐼
However, since (𝑛, pw) ≠ (𝑛′, pw′), 𝐻0(pw, 𝑛) and 𝐻0(pw′, 𝑛′) are
independent random elements, we obtain a non-trivial discrete
logarithm representation of the identity element, which violates
the discrete logarithm assumption.
□
4 EVALUATION
We have implemented our construction in Python using the Charm
framework [2]. For interactions we use the falcon REST frame-
work (for the rate-limiter), Python requests (for the server), and
HTTP keep-alive. As in [12] we instantiate the hash functions with
SHA-256 and the group with NIST P-256. This enables meaningful
comparison between our results and those of [12].
All our results are measured in a LAN and a more realistic WAN
setting (between North California and Oregon; ping 21ms) for dif-
ferent choices of the threshold 𝑡 and number of rate-limiters 𝑚. In-
teractions are made by POST calls. The rate-limiters use in-memory
dictionaries for storing the states. The server is sending out multiple
requests at once and waits for 𝑡 rate-limiters to respond.
4.1 Results
Latency. We measured the latency of encryption (resp. decryp-
tion) of the (𝑡, 𝑚)-PHE scheme, i.e., the time needed to complete
an encryption (resp. decryption) protocol execution. For 𝑡 = 𝑚 = 1,
Table 1 shows that the average latency for encryption is 8.431 ms
(LAN) and 94.911 ms (WAN), and that for decryption is 18.763 ms
(LAN) and 147.970 ms (WAN), where the averages are taken over
1000 executions. Further experiments show that the threshold 𝑡
and total number of rate-limiters 𝑚 do not affect the latency sig-
nificantly, except for a minor communication overhead, because
the protocol will continue as soon as 𝑡 parties, who run in parallel,
have answered.
Our scheme has a higher latency by an estimated factor of two
for encryption and a factor slightly higher than three for decryption
(see Table 1), mainly due to the additional communication rounds
Scheme
[12] - Encrypt
[12] - Decrypt
(𝑡, 𝑚)-PHE in LAN - Encrypt
(𝑡, 𝑚)-PHE in LAN - Decrypt
(𝑡, 𝑚)-PHE in WAN - Encrypt
(𝑡, 𝑚)-PHE in WAN - Decrypt
Latency in ms
4.501
4.959
8.431
18.763
94.911
147.970
Table 1: Latency Comparison
(2x for encryption and 3x for the decryption protocol) compared to
the PHE in [12].
Throughput. To estimate the computational resources needed, we
also measured the throughput (maximum number of encryption and
decryption requests per time) of (𝑡, 𝑚)-PHE for different thresholds
𝑡 and number of rate-limiters 𝑚. For various values of (𝑡, 𝑚) with 𝑡 =
𝑚, Figure 6 shows the inverse of the throughput (i.e., amortized time
per request) of the server against the threshold of 𝑡. Likewise, we
report the inverse of the throughput of the rate-limiters in Figure 6.
Points on the figure are averages over single-, dual, quad- and octa-
core performances, with 1000 executions each. The raw data is
reported in Table 2. For generating amortized benchmarking results,
we fixed the time for network traffic and randomness generation, as
generating large numbers of random values may cause odd runtime
artifacts. However, this is not a restriction, because generating those
values can be done via pseudorandom functions (e.g., SHA2 or AES
with hardware acceleration). Figure 6 shows that the amortized time