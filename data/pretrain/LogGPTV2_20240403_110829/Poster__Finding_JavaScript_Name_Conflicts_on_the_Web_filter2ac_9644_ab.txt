### 2.3 Detecting Conflicts

In this section, we describe the methods used to detect conflicts using the logs detailed in Sections 2.1 and 2.2.

#### Alias Analysis
For each write operation to a variable, we maintain an alias if the write is a copy-by-reference or pass-by-reference operation. An alias is removed when one of the variables is assigned a new object. We then examine the write records of the current variable and its aliases to identify any potential conflicts.

#### Function Definition Conflicts
To detect function definition conflicts, we analyze the function definition logs in each frame to determine if the same global function has been defined more than once by different scripts.

#### Value and Type Conflicts
- **Primitive Types:** If a global variable is of a primitive type, it does not have an alias. We search for other write records to the same global variable. If the logged values in two records differ and the writes are performed by different scripts, we report it as a variable value conflict. If the types of the global variable differ, we report it as a variable type conflict.
- **Objects:** For global variables that are objects, a value conflict can occur if the variable itself is overwritten with another variable, or if a property of the object is modified. In addition to checking assignment records to the same variable, we also search the write records of all valid aliases of the object. For writes to the object variable itself, a value conflict is reported if it is assigned a different object, and a type conflict is reported if it is assigned a primitive-type value. For writes to the properties of the object, we apply the above rules based on the type of the property.

### 3. Evaluation

We collected data from the main pages of the Alexa top 1K websites in August 2019. We gathered 957 function definition log files and variable write log files from 957 frames loaded on 893 websites. Our current implementation was unable to collect data from some websites, which we will address in future work. We analyzed 947 (98.96%) assignment log files and 957 (100.00%) function definition files, excluding those with over 1 million records.

In summary, we detected:
- 47 variable value conflicts on 25 websites,
- 728 function definition conflicts on 85 websites,
- 3 variable type conflicts on 2 websites.

Conflicts caused by the same script were not reported.

**Cookie-Related Functions:**
We found that 46 cookie-related functions were overwritten by at least one script. For example, on https://www.zoho.com, five inline scripts all defined a global function `createCookie()`, with slightly different definitions (see Listing 1). Similarly, multiple definitions of `getCookie()` were found on https://zoom.us/. Such conflicts can expose users to security risks, such as a malicious third-party manipulating `getCookie()` to force the use of an attacker’s session.

```javascript
// Listing 1: Conflicting definitions of createCookie() in different scripts on https://www.zoho.com
function createCookie(a, e, b) {
    if (b) {
        var d = new Date;
        document.cookie = a + "\x3d" + e + b + "; path\x3d/";
    } else {
        b = "";
    }
    // ...
}

function createCookie(b, c, a) {
    if (a) {
        var d = new Date;
        -1 < google_tag_manager["GTM-KBNVHH"].macro(134).indexOf("zoho.eu") ?
            document.cookie = b + "\x3d" + c + a + "; domain \x3d.zoho.eu; path\x3d/" :
            // ...
    } else {
        a = "";
    }
}
```

### 4. Discussion and Future Work

#### Limitations and Future Work
- **Incomplete Support of Objects:** Currently, our framework does not fully support objects initialized through the `this` identifier within constructors or methods. We plan to address this in future work.
- **Function Definition Conflicts:** Scripts can assign function literals to global identifiers, leading to function definition or type conflicts. To detect these, we need to cross-check function definition logs and variable write logs, which will be included in future analysis.
- **Characterization of Conflicts:** Our categorization of detected conflicts is not comprehensive. Future work will include a more detailed analysis, such as examining conflicts between third-party and first-party scripts.

### 5. Related Work

#### JavaScript Conflict Analysis
- **ConflictJS:** Patra et al. proposed ConflictJS, an automated approach to analyzing conflicts between JavaScript libraries [5]. They focused on simple operations and a limited number of libraries.
- **Jalangi:** Sen et al. introduced Jalangi, a dynamic JavaScript analysis framework based on selective record-replay [8]. However, it does not cover dynamically loaded code, unlike our framework.

#### JavaScript Type Inference
- **TypeDevil:** Pradel et al. developed TypeDevil to detect type inconsistencies in JavaScript [6].
- **Abstract Interpretation:** Jensen et al. defined a type analysis for JavaScript using abstract interpretation [3].
- **Hybrid Type Inference:** Hackett et al. presented a hybrid type inference approach for JavaScript based on points-to analysis [1].
- **Learning-Based Approaches:** Several learning-based approaches aim to predict variable types statically [2, 4, 7], which is orthogonal to our runtime type inference.

### 6. Conclusion

We developed a browser-based dynamic analysis framework to study JavaScript global name conflicts on the web. We collected data from the Alexa top 1K websites and detected 47 variable value conflicts, 728 function definition conflicts, and 3 variable type conflicts. Our investigation revealed that global identifier conflicts can lead to security issues.

### Acknowledgment

This work was partly supported by a grant from the Research Grants Council of the Hong Kong Special Administrative Region, China (CUHK 24209418).

### References

[1] Brian Hackett and Shu-yu Guo. 2012. Fast and precise hybrid type inference for JavaScript. ACM SIGPLAN Notices 47, 6 (2012), 239–250.

[2] Vincent J Hellendoorn, Christian Bird, Earl T Barr, and Miltiadis Allamanis. 2018. Deep learning type inference. In Proceedings of the 26th ACM Joint European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE). Lake Buena Vista, FL.

[3] Simon Holm Jensen, Anders Møller, and Peter Thiemann. 2009. Type analysis for JavaScript. In International Static Analysis Symposium. Springer, 238–255.

[4] Rabee Sohail Malik, Jibesh Patra, and Michael Pradel. 2019. NL2Type: inferring JavaScript function types from natural language information. In Proceedings of the 41st International Conference on Software Engineering (ICSE). Montréal, Canada.

[5] Jibesh Patra, Pooja N Dixit, and Michael Pradel. 2018. ConflictJS: finding and understanding conflicts between JavaScript libraries. In Proceedings of the 40th International Conference on Software Engineering (ICSE). Gothenburg, Sweden.

[6] Michael Pradel, Parker Schuh, and Koushik Sen. 2015. TypeDevil: Dynamic type inconsistency analysis for JavaScript. In Proceedings of the 37th International Conference on Software Engineering (ICSE). Florence, Italy.

[7] Veselin Raychev, Martin Vechev, and Andreas Krause. 2015. Predicting program properties from big code. In ACM SIGPLAN Notices, Vol. 50. ACM, 111–124.

[8] Koushik Sen, Swaroop Kalasapur, Tasneem Brutch, and Simon Gibbs. 2013. Jalangi: a selective record-replay and dynamic analysis framework for JavaScript. In Proceedings of the 18th European Software Engineering Conference (ESEC) / 21st ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE). Saint Petersburg, Russia.

[9] W3C. [n.d.]. Content Security Policy Level 3. https://www.w3.org/TR/CSP3/.

[10] Ming Ying and Shu Qin Li. 2016. CSP adoption: current status and future prospects. Security and Communication Networks 9, 17 (2016), 4557–4573.