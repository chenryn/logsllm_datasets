that do not inﬂuence the output, which can be thought
of as dead code elimination. The effectiveness of each
optimization on different circuits is shown in Figure 1.
The circuit that was least optimizable was the edit dis-
tance circuit, being reduced to only 82% of its size from
the front end, whereas the RSA signing and the dot prod-
uct circuits were the most optimizable, being reduced to
roughly half of the gates emitted by the front end.
Gate Removal The front-end of the compiler emits
gates in topological order, and similar to Fairplay, our
compiler assigns explicit identiﬁers to each emitted gate.
To remove gates efﬁciently, we store a table that maps
the identiﬁers of gates that were removed to the previ-
ously emitted gates, and for each gate that is scanned
the inputs are rewritten according to this table. The ta-
ble itself is then emitted, so that the identiﬁers of non-
removed gates can be corrected. This mapping process
can be done in linear time and space using an appropriate
key-value store.
Removing Redundant Gates Some of the gates gen-
erated by the front end of our compiler have the same
truth table and input wires as previously generated gates;
such gates are redundant and can be removed. This re-
moval process has the highest memory requirement of
any other optimization step, since a description of ev-
ery non-redundant gate must be stored. However, we
found during our experiments that this optimization can
be performed on discrete chunks of the circuit with re-
sults that are very close to performing the optimization
on the full circuit, and that there are diminishing im-
provements in effectiveness as the size of the chunks is
increased. Therefore, we perform this optimization us-
ing chunks, and can use hash tables to improve the speed
of this step.
Removing Identity Gates and Inverters The front
end may generate identity gates or inverters, which are
not necessary. This may happen inadvertently, such as
when a variable is incremented by a constant, or as part
of the generation of a particular logic expression. While
removing identity gates is straightforward, the removal
of inverters requires more work, as gates which have in-
verted input wires must have their truth tables rewritten.
There is a cascading effect in this process; the removal of
some identity gates or inverters may transform later gates
into identity gates or inverters. This step also removes
gates with constant outputs, such as an XOR gate with
two identical inputs. Constant propagation and folding
occur as a side effect of this optimization.
Removing Unused Gates Finally, some gates in the
circuit may not affect the output value at all. For this
step, we scan the circuit backwards, and store a table of
live gates; we then re-emit the live gates in the circuit
and skip the dead gates. Immediately following this step,
the circuit is prepared for the garbled circuit generator,
which includes generating a usage count for each gate.
Figure 1: Average fraction of circuits remaining after each optimization is applied in sequence. We see that the relative
change in circuit sizes after each optimization is dependent on the circuit itself, with some circuits being optimized
more than others.
Circuit
DB (s)
mmap (s)
ﬂat (s)
AES
RSA-32
Dot64
4
EDT-255
AES
RSA-32
Dot64
4
EDT-255
AES
RSA-32
Dot64
4
EDT-255
7200RPM Spinning Disk (ext4-fs)
4.3 ±0.5% 1.05 ± 1%
103 ±0.3% 24.6 ±0.2%
32.56 ±0.1%
975 ±0.1% 240 ± 1%
3.48 ±0.3%
78.4 ±0.3%
7.1 ±0.3% 28.37 ±0.1%
700 ±0.9%
Solid-State Drive
3.17 ±0.6%
68.3 ±0.3%
25.9 ±0.2%
590 ± 1%
3.62 ±0.3% 0.86 ± 1%
96.5 ±0.2% 21.6 ±0.4%
30.5 ±0.5% 6.27 ± 1%
907 ±0.1% 200 ±0.4%
Amazon EC2
7.11 ±0.3%
5.56 ± 4% 1.12 ± 0%
240 ±0.1%
208 ±0.4% 45.7 ± 3%
46.3 ±0.1%
60.7 ±0.2%
9.2 ±0.2%
2500 ± 1% 405 ±0.2% 2050 ±0.2%
Circuit Sizes
AES
49,912
RSA-32
1,750,787
Dot64
4
460,018
EDT-255
15,540,196
Table 2: Compile times for different storage systems for
small circuits (sizes include input gates), using differ-
ent storage media. Results are averaged over 30 experi-
ments, with 95% conﬁdence intervals. On EC2, a high-
memory quadruple extra large instance was used.
Key-Value Stores Unfortunately, even though our
compiler is more resource efﬁcient than Fairplay, it still
requires space that is linear in the size of the circuit. For
very large circuits, circuits with billions of gates or more,
this may exceed the amount of RAM that is available.
Our compiler can make use of a computer’s hard drive to
store intermediate representations of circuits and infor-
mation about how to remove gates from the circuit. We
used memory-mapped I/O to reduce the impact this has
on performance; however, our use of mmap and ftruncate
is not portable, and so our system also supports using an
unmapped ﬁle or Berkeley DB. Our tests revealed that,
as expected, memory-mapped I/O achieves the highest
performance, but that Berkeley DB is sometimes better
than unmapped ﬁles on high-latency ﬁlesystems. A sum-
mary of the performance of each method on a variety of
storage systems is shown in Table 2.
Using the hard drive in this manner, we were able
to compile our largest circuits. The performance im-
pact of writing to disk should not be understated; a
several-billion-gate edit distance 4095x4095 circuit re-
quired more than 3 days to compile on an Amazon EC2
high-memory image, with 68 GB of RAM, one third of
which was spent waiting on I/O. Note, however, that this
is a one-time cost; a compiled circuit can be used in un-
limited evaluations of a secure computation protocol.
5.2 Compiler Testing Methodology
We tested the performance of our compiler using ﬁve cir-
cuits. The ﬁrst was AES, to compare our compiler with
the Fairplay system. We also used AES with the com-
pact S-Box description given by Boyar and Parelta [3],
which results in a smaller AES circuit. We used an RSA
RSA Size
16
32
64
128
Circuit Size
208,499
1,750,787
14,341,667
116,083,983
Compile Time (s) Gates/s
80,000
81,100
75,900
64,100
2.6 ± 7%
21.6 ±0.4%
189 ±0.3%
1810 ±0.3%
Edit-Dist Size
31x31
63x63
127x127
255x255
Circuit Size
144,277
717,233
3,389,812
15,540,196
Compile Time (s) Gates/s
84,900
83,800
81,300
77,700
1.70 ±0.7%
8.56 ±0.7%
41.7 ±0.5%
200 ±0.4%
Table 3: Time required to compile and optimize RSA and edit distance circuits on a workstation with an Intel Xeon
5506 CPU, 8GB of RAM and a 160GB SSD, using the textbook modular exponentiation algorithm. Note that the
throughput for edit distance is higher even for comparably sized circuits; this is because the front end generates a more
efﬁcient circuit without any optimization. Compile times are averaged over 30 experiments, with 95% conﬁdence
intervals reported.
signing circuit with various toy key sizes, up to 128 bits,
to test our compiler’s handling of large circuits; RSA cir-
cuits have cubic size complexity, allowing us to generate
very large circuits with small inputs. We also used an edit
distance circuit, which was the largest test case used by
Huang et al. [13]; unlike the other test circuits, there is no
multiplication routine in the inner loop of this function.
Finally we used a dot product with error, a basic sam-
pling function for the LWE problem, which is similar to
RSA in creating large circuits, but also demonstrates our
system’s ability to handle large input sizes.
After compiling these circuits, we tested the correct-
ness by ﬁrst performing a direct, ofﬂine evaluation of the
circuit, and comparing the output to a non-circuit imple-
mentation. We then compared the output of an online
evaluation to the ofﬂine evaluation. Additionally, for the
AES circuit, we compared the output of the circuit gener-
ated by our compiler to the output of a circuit generated
using Fairplay. We tested all three key-value stores on a
variety of ﬁle systems, including a fast SSD, a spinning
disk, and an Amazon EC2 instance store, checking for
correctness as described above in each case.
5.3 Summary of Compiler Performance
Our compiler is able to emit and optimize large circuits
in relatively short periods of time, less than an hour for
circuits with tens of millions of gates on an inexpensive
workstation. In Figure 1 we summarize the effectiveness
of the various optimization stages on different circuits;
in circuits that involve multiplication in ﬁnite ﬁelds or
modulo an integer, the identity gate removal step is the
most important, removing more than half of the gates
emitted by the front-end. The edit distance circuit is the
best-case for our front end, as less than 1/5 of the gates
that are emitted can be removed by the optimizer. The
throughput of our compiler is dependent on the circuit
being compiled, with circuits which are more efﬁciently
generated by the front-end being compiled faster; in Ta-
ble 3 we compare the generation of RSA circuits to edit
distance circuits.
6 Experimental Results
In this section, we give a detailed description of our
system, upon which we have implemented various real
world secure computation applications. The experimen-
tal environment is the Ranger cluster in the Texas Ad-
vanced Computing Center. Ranger is a blade-based sys-
tem, where each node is a SunBlade x6240 blade run-
ning a Linux kernel and has four AMD Opteron quad-
core 64-bit processors, as an SMP unit. Each node in the
Ranger system has 2.3 GHz core frequency and 32 GB of
memory, and the point-to-point bandwidth is 1 GB/sec.
Although Ranger is a high-end machine, we use only a
small fraction of its power for our system, only 512 out of
62,976 cores. Note that we use the PBC (Pairing-Based
Cryptography) library [25] to implement the underly-
ing cryptographic protocols such as oblivious transfers,
witness-indistinguishable proofs, and so forth. However,
moving to more modern libraries such as RELIC [31] is
likely to give even better results, especially to those cir-
cuits with large input and output size.
System Setup In our system, both the generator and
the evaluator run an equal number of processes, includ-
ing a root process and many slave processes. A root pro-
cess is responsible for coordinating its own slave pro-
cesses and the other root process, while the slave pro-
cesses work together on repeated and independent tasks.
There are three pieces of code in our system: the genera-
tor, the evaluator, and the IP exchanger. Both the genera-
tor’s and evaluator’s program are implemented with Mes-
sage Passing Interface (MPI) library. The reason for the
IP exchanger is that it is common to run jobs on a cluster
with dynamic working node assignment. However, when
the nodes are dynamically assigned, the generator run-
ning on one cluster and the evaluator running on another
might have a hard time locating each other. Therefore,
a ﬁxed location IP exchanger helps the match-up pro-
cess as described in Figure 2. Our system provides two
modes—the user mode and the simulation mode. The
former works as mentioned above, and the latter simply
spawns an even number of processes, half for the gen-
erator and the other half for the evaluator. The network
match-up process is omitted in the latter mode to sim-
plify the testing of this system.
To achieve a security level of 2−80, meaning that a ma-
licious player cannot successfully cheat with probability
better than 2−80, requires at least 250 copies of the gar-
bled circuit [32]. For simplicity, we used 256 copies in
our experiments, that is, security parameters k = 80 and
s = 256. Each experiment was run 30 times (unless stated
otherwise), and in the following sections we report the
average runtime of our experiments.
Figure 2: Both the generator and evaluator consist of a
root process (solid dot) and a number of slave processes
(hollow dots). The match-up works as follows: the slave
evaluator processes send their IPs to the root evaluator
process (Step 1), who then forwards them to the IP ex-
changer (Step 2). Next, the root generator process comes
to acquire these IPs (Step 3) and dispatch them to its
slaves (Step 4), who then proceed to pair up with one of