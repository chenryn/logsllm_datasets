09 "sync"
10 )
11
12 var (
13 // counter是所有goroutine都要增加其值的变量
14 counter int
15
16 // wg用来等待程序结束
17 wg sync.WaitGroup
18
19 // mutex 用来定义一段代码临界区
20 mutex sync.Mutex
21 )
22
23 // main是所有Go程序的入口
24 func main() {
25 // 计数加2，表示要等待两个goroutine
26 wg.Add(2)
27
28 // 创建两个goroutine
29 go incCounter(1)
30 go incCounter(2)
31
32 // 等待goroutine结束
33 wg.Wait()
34 fmt.Printf("Final Counter: %d\\n", counter)
35 }
36
37 // incCounter使用互斥锁来同步并保证安全访问，
38 // 增加包里counter变量的值
39 func incCounter(id int) {
40 // 在函数退出时调用Done来通知main函数工作已经完成
41 defer wg.Done()
42
43 for count := 0; count < 2; count++ {
44 // 同一时刻只允许一个goroutine进入
45 // 这个临界区
46 mutex.Lock()
47 {
48 // 捕获counter的值
49 value := counter
50
51 // 当前goroutine从线程退出，并放回到队列
52 runtime.Gosched()
53
54 // 增加本地value变量的值
55 value++
56
57 // 将该值保存回counter
58 counter = value
59 }
60 mutex.Unlock()
61 // 释放锁，允许其他正在等待的goroutine
62 // 进入临界区
63 }
64 }
对counter变量的操作在第46行和第60行的Lock()和Unlock()函数调用定义的临界
区里被保护起来。使用大括号只是为了让临界区看起来更清晰，并不是必需的。同一时刻只有一
个goroutine可以进入临界区。之后，直到调用Unlock()函数之后，其他goroutine才能进入临
界区。当第52行强制将当前goroutine退出当前线程后，调度器会再次分配这个goroutine继续运
行。当程序结束时，我们得到正确的值4，竞争状态不再存在。
6.5 通道
原子函数和互斥锁都能工作，但是依靠它们都不会让编写并发程序变得更简单，更不容易出
错，或者更有趣。在Go语言里，你不仅可以使用原子函数和互斥锁来保证对共享资源的安全访
问以及消除竞争状态，还可以使用通道，通过发送和接收需要共享的资源，在 goroutine 之间做
同步。
当一个资源需要在goroutine之间共享时，通道在goroutine之间架起了一个管道，并提供了
确保同步交换数据的机制。声明通道时，需要指定将要被共享的数据的类型。可以通过通道共享
内置类型、命名类型、结构类型和引用类型的值或者指针。
在Go语言中需要使用内置函数make来创建一个通道，如代码清单6-17所示。
代码清单6-17 使用make创建通道
// 无缓冲的整型通道
unbuffered := make(chan int)
// 有缓冲的字符串通道
buffered := make(chan string, 10)
在代码清单 6-17 中，可以看到使用内置函数 make 创建了两个通道，一个无缓冲的通道，
一个有缓冲的通道。make 的第一个参数需要是关键字 chan，之后跟着允许通道交换的数据的
类型。如果创建的是一个有缓冲的通道，之后还需要在第二个参数指定这个通道的缓冲区的大小。
向通道发送值或者指针需要用到<-操作符，如代码清单6-18所示。
代码清单6-18 向通道发送值
// 有缓冲的字符串通道
buffered := make(chan string, 10)
// 通过通道发送一个字符串
buffered <- "Gopher"
在代码清单6-18里，我们创建了一个有缓冲的通道，数据类型是字符串，包含一个10个值
的缓冲区。之后我们通过通道发送字符串"Gopher"。为了让另一个goroutine可以从该通道里接
收到这个字符串，我们依旧使用<-操作符，但这次是一元运算符，如代码清单6-19所示。
代码清单6-19 从通道里接收值
// 从通道接收一个字符串
value := <-buffered
当从通道里接收一个值或者指针时，<-运算符在要操作的通道变量的左侧，如代码清单6-19
所示。
通道是否带有缓冲，其行为会有一些不同。理解这个差异对决定到底应该使用还是不使用缓
冲很有帮助。下面我们分别介绍一下这两种类型。
6.5.1 无缓冲的通道
无缓冲的通道（unbuffered channel）是指在接收前没有能力保存任何值的通道。这种类型的通
道要求发送goroutine和接收goroutine同时准备好，才能完成发送和接收操作。如果两个goroutine
没有同时准备好，通道会导致先执行发送或接收操作的 goroutine 阻塞等待。这种对通道进行发送
和接收的交互行为本身就是同步的。其中任意一个操作都无法离开另一个操作单独存在。
在图6-6里，可以看到一个例子，展示两个goroutine如何利用无缓冲的通道来共享一个值。
图6-6 使用无缓冲的通道在goroutine之间同步
在第 1 步，两个 goroutine 都到达通道，但哪个都没有开始执行发送或者接收。在第 2 步，左侧
的goroutine将它的手伸进了通道，这模拟了向通道发送数据的行为。这时，这个goroutine会在
通道中被锁住，直到交换完成。在第 3 步，右侧的 goroutine 将它的手放入通道，这模拟了从通
道里接收数据。这个 goroutine 一样也会在通道中被锁住，直到交换完成。在第 4 步和第 5 步，
进行交换，并最终，在第 6 步，两个 goroutine 都将它们的手从通道里拿出来，这模拟了被锁住
的goroutine得到释放。两个goroutine现在都可以去做别的事情了。
为了讲得更清楚，让我们来看两个完整的例子。这两个例子都会使用无缓冲的通道在两个
goroutine之间同步交换数据。
在网球比赛中，两位选手会把球在两个人之间来回传递。选手总是处在以下两种状态之一：
要么在等待接球，要么将球打向对方。可以使用两个 goroutine 来模拟网球比赛，并使用无缓冲
的通道来模拟球的来回，如代码清单6-20所示。
代码清单6-20 listing20.go
01 // 这个示例程序展示如何用无缓冲的通道来模拟
02 // 2个goroutine间的网球比赛
03 package main
04
05 import (
06 "fmt"
07 "math/rand"
08 "sync"
09 "time"
10 )
11
12 // wg用来等待程序结束
13 var wg sync.WaitGroup
14
15 func init() {
16 rand.Seed(time.Now().UnixNano())
17 }
18
19 // main是所有Go程序的入口
20 func main() {
21 // 创建一个无缓冲的通道
22 court := make(chan int)
23
24 // 计数加2，表示要等待两个goroutine
25 wg.Add(2)
26
27 // 启动两个选手
28 go player("Nadal", court)
29 go player("Djokovic", court)
30
31 // 发球
32 court <- 1
33
34 // 等待游戏结束
35 wg.Wait()
36 }
37
38 // player 模拟一个选手在打网球
39 func player(name string, court chan int) {
40 // 在函数退出时调用Done来通知main函数工作已经完成
41 defer wg.Done()
42
43 for {
44 // 等待球被击打过来
45 ball, ok := <-court
46 if !ok {
47 // 如果通道被关闭，我们就赢了
48 fmt.Printf("Player %s Won\n", name)
49 return
50 }
51
52 // 选随机数，然后用这个数来判断我们是否丢球
53 n := rand.Intn(100)
54 if n%13 == 0 {
55 fmt.Printf("Player %s Missed\n", name)
56
57 // 关闭通道，表示我们输了
58 close(court)
59 return
60 }
61
62 // 显示击球数，并将击球数加1
63 fmt.Printf("Player %s Hit %d\n", name, ball)
64 ball++
65
66 // 将球打向对手
67 court <- ball
68 }
69 }
运行这个程序会得到代码清单6-21所示的输出。
代码清单6-21 listing20.go的输出
Player Nadal Hit 1
Player Djokovic Hit 2
Player Nadal Hit 3
Player Djokovic Missed
Player Nadal Won
在main函数的第22行，创建了一个int类型的无缓冲的通道，让两个goroutine在击球时
能够互相同步。之后在第28行和第29行，创建了参与比赛的两个goroutine。在这个时候，两个
goroutine都阻塞住等待击球。在第32行，将球发到通道里，程序开始执行这个比赛，直到某个
goroutine输掉比赛。
在player函数里，在第43行可以找到一个无限循环的for语句。在这个循环里，是玩游
戏的过程。在第 45 行，goroutine 从通道接收数据，用来表示等待接球。这个接收动作会锁住
goroutine，直到有数据发送到通道里。通道的接收动作返回时，第 46 行会检测 ok 标志是否为
false。如果这个值是 false，表示通道已经被关闭，游戏结束。在第 53 行到第 60 行，会产
生一个随机数，用来决定goroutine是否击中了球。如果击中了球，在第64行ball的值会递增
1，并在第67行，将ball作为球重新放入通道，发送给另一位选手。在这个时刻，两个goroutine
都会被锁住，直到交换完成。最终，某个goroutine没有打中球，在第58行关闭通道。之后两个
goroutine都会返回，通过defer声明的Done会被执行，程序终止。
另一个例子，用不同的模式，使用无缓冲的通道，在 goroutine 之间同步数据，来模拟接力
比赛。在接力比赛里，4个跑步者围绕赛道轮流跑（如代码清单6-22所示）。第二个、第三个和
第四个跑步者要接到前一位跑步者的接力棒后才能起跑。比赛中最重要的部分是要传递接力棒，
要求同步传递。在同步接力棒的时候，参与接力的两个跑步者必须在同一时刻准备好交接。
代码清单6-22 listing22.go
01 // 这个示例程序展示如何用无缓冲的通道来模拟
02 // 4个goroutine间的接力比赛
03 package main
04
05 import (
06 "fmt"
07 "sync"
08 "time"
09 )
10
11 // wg用来等待程序结束
12 var wg sync.WaitGroup
13
14 // main是所有Go程序的入口
15 func main() {
16 // 创建一个无缓冲的通道
17 baton := make(chan int)
18
19 // 为最后一位跑步者将计数加1
20 wg.Add(1)
21
22 // 第一位跑步者持有接力棒
23 go Runner(baton)
24
25 // 开始比赛
26 baton <- 1
27
28 // 等待比赛结束
29 wg.Wait()
30 }
31
32 // Runner模拟接力比赛中的一位跑步者
33 func Runner(baton chan int) {
34 var newRunner int