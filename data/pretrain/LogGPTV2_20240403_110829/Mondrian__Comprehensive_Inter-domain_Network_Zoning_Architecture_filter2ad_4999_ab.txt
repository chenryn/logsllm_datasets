connected over a WAN (e.g., the Internet). Each site contains
multiple, logically separated zones connected to the single
Zone Translation Point (TP) at the corresponding site. The TP
is a designated gateway for zone transition, operating on layer
3 and interconnecting all zones at a given site of the enterprise
network. All the trafﬁc towards either internal network or
WAN, therefore, passes through the TP. Note that TPs are the
endpoints of our architecture, meaning that minimum changes
to the internal network are required, ensuring compatibility
with modern enterprise environments.
3
The main task of TPs is twofold: ﬁrst, they ensure that
trafﬁc adheres to a set of allowed zone transitions. For a
packet originating in a zone and destined for another zone,
the transition must be explicitly allowed by a policy. Second,
TPs enable communication across the WAN without losing
previously established security information. To this end, TPs
embed a tag with cryptographically secured zone information
into packets before they leave the internal network. Further-
more, TPs act as endpoints hiding sensitive information, such
as internal addresses and the respective zone binding, from
external entities. We also note that, for a case where zones
with the same security requirements and functionality are
distributed over multiple branch sites (e.g., Zone 1 and 3 in
Figure 2), we consider them as the same logical zone (e.g.,
the same zone identiﬁer). We call this concept zone extension
which is not subject to zone authorization.
A logically centralized controller orchestrates the TPs. The
controller is managed by a single administrative domain, and
thus the operator of the controller manages all the zones behind
the TPs. The controller provides its operator an interface in
which the outline of zone structure and transition policies
can be speciﬁed. The explicit network conﬁguration is then
distributed to the TPs via a secure control channel to enforce
the conﬁguration at the individual premises.
Communication Flow. MONDRIAN enables secure zone tran-
sition over WAN as follows:
1)
2)
3)
4)
5)
Network administrators ﬁrst establish an IP-zone map
and their transition policies, which represents a virtual
network conﬁguration that explicitly speciﬁes reach-
ability, and upload them to the logically centralized
controller.
Each pair of TPs exchanges symmetric keys to es-
tablish a secure channel. The key is being updated
regularly through a state-of-art key management and
distribution system that protects the secrecy of the
zone transition while ensuring high-speed data trans-
mission.
The on-site TP inspects all the packets to be trans-
mitted to another zone. The TP acquires the corre-
sponding zone transition policy from the controller
and veriﬁes if the transmission is authorized.
If a packet is authorized, the TP looks up the re-
spective end-point TP, encrypts the packet along with
the corresponding zone transition information, and
forwards it across the WAN. Otherwise, the packet
is dropped.
The remote-site TP then decrypts the packet and
forwards it according to the enclosed zone transition
information. The receiving TP could also verify the
validity of the zone transition.
C. Threat Model
We consider a threat model in which attackers reside either
on-premise (i.e., compromised end hosts) or are located outside
of the cooperative networks. The goal of attackers is to access
unauthorized zones to exﬁltrate information assets, or disrupt
networks and services. To achieve this goal, attackers can use
the following strategies:
Unauthorized Access. Attackers may disguise as authorized
entities to blind the security middleboxes and access restricted
zones. A more sophisticated attack is to override security
systems by directly injecting tampered policies.
Denial-of-Service. Here,
the target
networks or services. Attackers can sabotage the core network
systems, for example, by ﬂooding security middleboxes that
perform deep packet
then lead to
network performance degradation, causing denial-of-service
for legitimate clients.
inspection. This might
the goal
is to disrupt
D. Assumptions
Public Key Infrastructure. A given enterprise network has a
public key infrastructure (PKI). That is, the enterprise creates
a trust model for its network infrastructure, acts as a trusted
certiﬁcate authority (CA), and issues certiﬁcates for the core
systems. Entities can retrieve and verify the public keys of the
core systems. Open source projects, such as EJBCA [15] and
OpenXPKI [46], are available for setting up enterprise-grade
PKIs.
Secure Cryptography. Cryptographic primitives we use in
MONDRIAN are secure; authenticity and secrecy remain intact
unless the cryptographic keys are exposed.
Time Synchronization. Core entities within the cooperative
network have loosely synchronized system clocks with a
precision of hundreds of milliseconds (e.g., using network time
protocol). Time synchronization is mainly used to constrain the
validity of cryptographic keys.
Secure MONDRIAN Operation. All MONDRIAN entities in-
cluding controllers and TPs are operating securely (i.e., not
controlled by the adversary), and the security policy is correct.
IV. ARCHITECTURE
In this section, we present the MONDRIAN architecture
and the underlying protocols in detail. Later, we describe our
key-establishment system that enables rapid key derivation and
distribution in large networks.
A. MONDRIAN Bootstrapping
The bootstrapping procedure is performed when a new
zone or a new remote site (a group of zones along with a
TP) joins the network.
Zoning Policy. In MONDRIAN, an IP subnet corresponds
to exactly one network zone, such that the zone identiﬁer
(zoneID) a host belongs to can be identiﬁed by the host IP
address. Ideally, IP addresses of each host in an enterprise
network are unique, ensuring inter-zone (inter-VLAN) routing.
Nonetheless, the same private address spaces with network
address translation (NAT) devices could be a part of different
zones, and they are distinguishable by their translated IP
addresses (see §VIII-A). The way zones are described here cor-
responds to how enterprises typically segment their networks
today, upholding backward compatibility and consequently
deployability. Furthermore, MONDRIAN does not depend on
the speciﬁc layer 2 protocols used at each site.
Every zone is under one administration domain, e.g.,
company A. In case multiple companies want to collaborate
4
by sharing certain network zones, such as company A allows
access to zone A from company B’s zone B, it is company
A that creates and registers the zones transition policy to A’s
controller. Company B simply follows the policy.
Zone Transition Policy. To allow network operators to ex-
plicitly express their zone transition policies, we consider both
denylist and allowlist-based policy deﬁnition. This is a mature
approach commonly used in modern network management
systems, enabling ﬂexible and agile orchestration of complex
networking policies. The following depicts the zone transition
policy format:
⇒ 
(1)
action determines the corresponding action for the given
source and destination zone pair, e.g., forwarding, drop,
and established. Similar to iptables rules, forwarding
would allow any incoming packets from the source zone
whereas drop discards all
trafﬁc. established allows
incoming trafﬁc for all established connections.
The ﬁve-tuple expression allows network operators to de-
ﬁne zone transition rules at application granularity. For exam-
ple, hosts can reach a Web service running on servers in DMZ
(e.g.,  ⇒ ),
while another policy restricts access to other services avail-
able on the same servers (e.g.,  ⇒
). In rule conﬂict, longest tuple matching is performed
to select an entry from a policy table; more precisely described
rules have priority. The application-level policies maximize the
ﬂexibility of the network zone conﬁguration.
Translation Point Initialization. A TP is initialized when a
new remote site opens, prior to any communication between
zones. The initialization process has mainly two goals:
i)
bootstrap a secure channel between TP and controller to
exchange control-plane messages, and ii) establish tunnels with
other TPs for data transmission.
Upon bootstrap, a TP performs a client-authenticated TLS
handshake with its controller to exchange certiﬁcates, and
agree on a cipher suite and a symmetric key. The TP ﬁnds the
corresponding address in its conﬁguration ﬁle. This means that,
prior to ﬁrst use, there needs to be an out-of-band setup where
the TP is conﬁgured. This can either be done by the admin-
istrator of the controller shipping a pre-conﬁgured machine to
the new remote location or by the remote location setting up a
machine and granting the administrator management access to
the given machine. Bootstraping TPs with multiple controllers
will be described in §VIII-C with practical considerations such
as controller discovery, TP migration, and policy consistency.
The controller synchronizes with TPs to keep their list of
other TPs in the network up-to-date. To this end, the controller
frequently pushes a list of relevant TPs with which a TP can
communicate. This can be done either regularly (e.g., on a
daily basis) or occasionally (e.g., when a new TP joins the
network). TPs then establish a secure channel with new TPs.
To prevent TPs from using a stale TP list, the shared TP list
is associated with a time to live (TTL) value.
We ensure source authenticity of the MONDRIAN entities
by leveraging PKI-based identities. The TPs and controller
Fig. 3: Protocol details for data forwarding. The controller
frequently updates TPs with the latest zone transition policies.
verify each other, preventing: i) a legitimate controller pushing
information to an unauthorized TP, and ii) a legitimate TP
connecting to a bogus controller or TP under an attacker’s
control. The main idea behind the source authenticity is that all
the TPs and controllers obtain certiﬁcates for their IP address
from a public key infrastructure (PKI). The administrator of
the entities (e.g., an enterprise) runs a certiﬁcate authority, and
issues the certiﬁcates before an entity bootstraps.
B. Protocol Description
We now describe how two end hosts within different
remote sites are able to communicate. Figure 3 illustrates a
protocol-level design including authorization, forwarding, and
veriﬁcation. A detailed header design follows.
Zone Transition Authorization. End hosts behind a TP
operate as they normally would when they reside in a local
network connected to a commodity gateway. That is, without
any acknowledgment on network changes, a sender HS sends
a packet to the receiver HR. If HS and HR are residents
of the same subnet (namely the same zone), the packet will
be directly steered to the destination by the local forwarding
devices. If HR is in a different subnet (or a remote site)
however, the packet is ﬁrst delivered to T PS since T PS is
the gateway of HS ( 1 in Figure 3).
To determine if the packet is allowed to be forwarded to
the given destination zone B, T PS needs an explicit zone
transition policy for the given source and destination pair.
Ideally, the policy is cached in the T PS’s zone transition table.
In case the cache misses, T PS acquires the policy from the
controller C as follows:
1)
T PS requests a zone transition policy from C ( 2 ):
(2)
T PS → C : HR | HS
2)
C replies with the zone transition policy ( 3 ):
C → T PS : ZR | ZS | rule | T PR | ExpT ime (3)
The controller consults the zone transition policy to see if
the packet is allowed to be forwarded to HR, more speciﬁ-
cally to destination zone ZB. To this end, the controller ﬁrst
checks the corresponding zone information, and matches it
with the zone transition rules (Equation 1). The authorization
result is then delivered to the requesting TP along with the
corresponding source and destination zone identiﬁers (ZR and
5
ZS, respectively), the destination TP address (T PR), and the
expiration time (ExpT ime) for the policy. ExpT ime can be
an arbitrary number, but we consider it to be a small number
used for policy freshness.
Data Forwarding. The TP discards the packet (Host Unreach-
able) if rule = drop. Otherwise, the TP looks up its routing
table and transmits the packet*. There exist two types of zone
transition cases: one for local (same-site) zone transition and
another for remote zone transition as described in §II-A. For
the local zone transition, the TP simply rewrites the Ethernet
header by following the local layer 2 protocol, and forwards
it through a corresponding network interface. Since the local
network is assumed to be trustworthy, no additional packet
processing is necessary apart from the authorization.
it
that
For the remote zone transition, the TP is responsible for
the secure transmission of the packet towards the destination
TP ( 4 ). Recall
is important for the inter-domain
zone transition packet to keep conﬁdentiality and integrity in
transmission. We therefore leverage secure tunneling, i.e., the
IPSec tunnel mode [31], [32], meaning that the original packet
is wrapped, encrypted, authenticated, and attached to a new IP
header. The new packet layout is formed as follows:
EIP = {HR | HS | payload}K,
AT = M ACK(ZR | EIP ),
T PS → T PR : T PR | T PS | ZR | AT | EIP.
(4a)
(4b)
(4c)
The ﬁeld name, Encrypted original IP payload (EIP), is self-
explanatory. The original packet including IP header and pay-
load is encrypted with a secret key K pre-shared between T PS
and T PR. By encrypting the original packet and encapsulating
it into the new IP datagram, we ensure conﬁdentiality on
the original payload as well as the host identities. We also
introduce an Authentication Token (AT) which is placed in
front of the EIP and contains a message authentication code
(MAC) covering EIP and the destination zone identiﬁers. AT
provides integrity over the entire packet except the outer IP
header ﬁeld which could be modiﬁed in transit.
The main difference to the Encapsulating Security Payload
(ESP) in IPSec tunnel mode is that, rather than having site-to-
site symmetric keys, we use site-zone pairwise keys. That is,
the keys used for every triplet of {T Psrc | T Pdst | zoneIDdst}
differs, providing a variety of unique symmetric keys even
for the same pair of TPs. In addition, by conveying only
zoneIDdst in the header, zone pair information, which could
lead to the potential disclosure of the zone structure and their
transition rules, is not exposed.
Veriﬁcation. The destination TP performs two steps of veriﬁ-
cation upon packet arrival: authentication and authorization. By
extracting the quartet information from the header, T PR ﬁrst
derives the corresponding symmetric key and recalculates AT
to see whether the MAC matches the original AT value. This
step is used to verify packet integrity as well as authenticity
since only the two parties can derive the same key. If the match
fails, either the packet integrity is compromised or source
authentication failed, causing the packet to be discarded.
*Note that the TP is not involved in the routing decision; the TP is an
add-on application running on top of the legacy gateway, performing the zone
tranfer policy check and tunneling between the gateways. Packet routing and
forwarding is independently done by layer-2 and 3 protocols.
6
To further verify authorization, T PR obtains HS and HR
by decrypting EIP, and veriﬁes if HS is authorized for the
zone transition towards HR. Similar to T PS, T PR might send
a request to its controller ( 5 ) to acquire the authorization
policy ( 6 ) when the policy is missing in its zone transition
table (Equations 2 and 3).
In principle, MONDRIAN is constructed under a single ad-
ministrative domain such that all the core entities, i.e., TPs and
controllers, are trustworthy. One of the main advantages of this
trust model is that the authorization check performed by the
sender side TP is also trusted by the receiver-side TP, therefore