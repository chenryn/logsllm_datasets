### Comparison of Emulation and Page-Tracking Based Approaches

Figure 8 compares the performance of emulation-based and page-tracking (PT) based approaches. The primary goal of this experiment is to determine the optimal parameter values for both categories of approaches.

- **User-Space Performance (Figure 8(a))**: In user-space, below 5 writes-per-page (WPP), emulation outperforms PT.
- **Hypervisor-Assisted Performance (Figure 8(b))**: For hypervisor-assisted approaches, Emulxen performs better than PTxen when WPP is below 1.3. Beyond these thresholds, PT-based approaches exhibit superior performance.

The results indicate that in user-space, five write emulations and page faults are equivalent to a single page protection and page fault. In contrast, the hypervisor-assisted case shows a much lower break-even point (WPP = 1.3), highlighting the significant overhead of page fault handling in user space.

### Scanxen Performance Analysis

Figure 9 illustrates the performance of Scanxen compared to PT (Figure 9(a)) and PTxen (Figure 9(b)). Although most of Scanxen's overhead comes from scanning page tables, the number of pages per transaction (PPT) also has an impact, as evidenced by the positive slope of the Scanxen lines in the figures.

At the end of each transaction, Scanxen constructs a list of dirty pages. The effort required to build this list is proportional to the number of dirty pages (PPT). The total cost \( y \) can be expressed with a simple linear equation:

\[ y = (0.0625) \times PPT + 2.5 \times (\text{size of CDA in MB}) \]

where the first term represents the work involved in accumulating the list of dirty pages.

- **Large Critical Data Areas (CDA)**: When the CDA is large (e.g., several Mbytes), the static cost dominates, making the first term negligible.
- **Small CDAs**: For small CDAs (e.g., several tens of Kbytes), the first term has a more significant impact on the overall cost.

The figures show the break-even points for Scanxen compared to PT-based approaches. Scanxen performs better with higher PPT values and smaller CDAs. However, in the hypervisor-assisted case (PTxen), due to its improved performance, Scanxen is generally outperformed, except for very small CDAs (tens or hundreds of Kbytes).

While Scanxen may offer better performance for applications with small CDAs and large PPT transactions, the range of values for which it is better is so limited that most practical applications do not meet these criteria. Therefore, PT and PTxen typically outperform Scanxen in most real-world scenarios. Further results on Scanxen will not be presented in this work.

### Summary

Figure 10 summarizes the performance of various approaches for a sample case of WPP=4. Overall, hypervisor-assisted approaches are 4-10 times more efficient than user-level approaches.

An interesting observation is that while Emul outperforms PT in user space under virtualization (at least for WPP=4), PTxen outperforms Emulxen. This suggests that moving page protection to the hypervisor space significantly enhances performance, making PT-based approaches with hypervisor assistance the most effective.

### Workload Evaluation

To evaluate a more realistic workload, we implemented data structures commonly used in most applications [25]. We studied two cases:
- **Single Operation Transactions (OPT=1)**: Each transaction involves a single operation (e.g., insert or delete).
- **Multiple Operations Transactions (OPT=5)**: Multiple operations are merged into one transaction.

Table 2 lists the implemented data structures and their average number of data writes and unique pages written to in a transaction. In the workload experiment, 10,000 unique data structure operations were performed, resulting in 10,000 transactions for OPT=1 and 2,000 transactions for OPT=5.

For example, in the AVL tree data structure with OPT=1, each insert operation resulted in an average of 30.5 writes and 5.1 unique pages modified. As expected, the number of write operations increases approximately fivefold between OPT=1 and OPT=5. However, the number of unique pages touched does not grow linearly, often remaining similar due to multiple operations within a transaction touching the same pages repeatedly.

### Performance with OPT=1

Figure 11 shows the performance of representative data structure operations. For most operations, including queue, list, heap, splay, and AA-trees, performance improves from PT to Emul to Emulxen to PTxen, with PTxen being the best in most cases. However, for hashquad, binomial queue, and binary search trees, Emul is more expensive than PT due to high WPP and low PPT.

Insert operations are generally more expensive than delete operations because they incur more memory writes. The overhead of emulation-based approaches is proportional to the number of memory writes.

Figure 12 highlights the speedup of hypervisor-assisted approaches over their user-level counterparts. Emulxen shows up to a 4x speedup (average 3.5 across data structures), and PTxen shows up to a 13x speedup (average 11.4 across all data structures).

### Transaction Aggregation (OPT=5)

[Continuation of the text would follow here, discussing the performance with OPT=5.]