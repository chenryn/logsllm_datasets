latter are used to model publicly known values.
Cryptographic primitives are modeled as functions. A func-
tion symbol f : t1 ×···× tn ← t takes n terms as inputs and
outputs a term representing the return value. For example, a
symmetric encryption scheme can be modeled as two func-
tions: enc(m,k) takes a message m and a key k as inputs and
outputs a ciphertext, and dec(c,k) takes a ciphertext c and a
symmetric key k as inputs and outputs a plaintext.
Properties of functions are modeled as equational theories.
For example, the equational theory dec(enc(m,k),k) = m in-
dicates that decryption of a ciphertext using the same key
as the encryption returns the original plaintext. Tamarin pro-
vides a set of built-in functions and equational theories to
model standard cryptographic operations (e.g., symmetric
and asymmetric encryption, cryptographic hash, digital signa-
ture, bilinear pairing, and multiplication and exponentiation
in Difﬁe-Hellman key exchange) and a limited arithmetic
operations (e.g., multi-set union, XOR, and concatenation).
User-deﬁned equational theories can be used to provide ad-
ditional operators, as long as the theory falls in the class of
convergent equational theory with ﬁnite variance.
Tamarin provides built-in pairing and projection functions
to model tuple terms. Particularly, the function pair(x,y) mod-
els the pair of two terms x and y, and functions f st(p) and
snd(p) models the projections of the ﬁrst and second argu-
ments with the following equations: f st(pair(x,y)) = x and
USENIX Association
30th USENIX Security Symposium    575
snd(pair(x,y)) = y. A tuple term  is represented
as pair(t1, pair(. . . , pair(tn−1,tn) . . . ).
2.2.2 Facts
The security protocol to be veriﬁed is depicted as a sequence
of interactions between agents. The state of an agent is rep-
resented as a set of facts. Each fact models the information
the agent holds, e.g., a private key. A fact is of the form of
F(t1,t2,··· ,tn), where F is the name of the fact, and ti refers
to a variable or a constant of the protocol. Note that from the
fact, the adversary could not extract the variables ti within.
Hence, ti can be private data. There are two types of facts:
linear facts and persistent facts. Linear facts can be consumed
only once by the agent during state transition (represented as
MSR rules, which will be explained later), and thus they do
not appear in all states of the transition system; in contrast,
persistent facts persist during transitions. There are four spe-
cial built-in facts: Fr, In, Out, and K. Fr is used to generate
fresh random variable; In and out are used to receive and send
data over public channel, respectively; K is used to directly
add data to the adversary’s knowledge base.
2.2.3 Multiset Rewriting Rules
The actions of an agent are modeled as multi-set rewriting
rules, which dictate state transitions of the agent. Every rule
consists of three components: the left-hand side component
(a.k.a., premise), the middle component (a.k.a., action), and
the right-hand side component (a.k.a., conclusion). Each of
these components consists of a set of facts. Roughly, the
premise serves as the input of the rule, the conclusion serves
as the output, and the action are marked by action labels to
log rule execution (a.k.a., instantiation). Each action label is
tagged with variables that allow Tamarin to reason about the
execution of the rule, in terms of relationship between the
variables. In addition, constraints can be speciﬁed over the
action labels to restrict the execution of the rule. An example
of a Tamarin rewrite rule is shown as follows:
[F1(t1),F2(t2)]− [Eq(t1,t2),Act1(t2)] → [Out(t2)]
where F1() and F2() are linear facts, Eq() is a constraint,
Act1() is the label of the action, and t1, t2, and t3 are symbols.
This rule speciﬁes that if the agent has knowledge of the two
facts F1 and F2 and the two related variables t1 and t2 are
equal, the agent will send t2 to public channels.
with the ∼ symbol, the rule cannot execute repeatedly with
the same value of the variable; 3) implicit pattern matching,
which dictates that two variables of a rule with the same name
should be instantiated with the same value.
2.2.5 Properties and Proofs
Tamarin’s property is expressed as ﬁrst-order propositional
logic over the action labels. With the help of timepoint vari-
ables, the relative order of action labels can be encoded as
well. To prove or disprove a property, Tamarin maintains a
system state as it explores valid traces of the model. A trace
is maintained using a graph data structure with rules as nodes
and fact dependencies (fact production and consumption) as
edges. The system state consists of session variables, mes-
sages in the network, and the current knowledge base of the
adversary. For the target property, Tamarin’s goal is to either
ﬁnd a trace that contradicts the property or show that all traces
satisfy the property.
Tamarin’s proof algorithm begins with an empty system
state. It ﬁrst derives the negation of the target property, and
assumes its premise, i.e., the part to the left of the implication
sign ⇒, to be true. Then it instantiates all MSRs that can
be applied given this assumption. Starting from these rules,
Tamarin tries to build an execution trace of the model using
a backward search algorithm [48]. In this process, Tamarin
derives a set of constraints from the dependencies among facts,
the ordering of action labels, the adversary’s knowledge base,
the variable relationship as speciﬁed in the target property,
and other components of the model, such as type restrictions,
pattern matching, helper lemma, and so on.
Based upon various heuristics implemented in Tamarin,
one of these constraints is picked from the system state and
resolved by Tamarin’s constraint-solver. The resolution step
produces further constraints or eliminates some of the existing
constraints. A constraint can be satisﬁed from multiple source
rules, thus building up multiple proof sub-case branches, each
representing a potentially valid trace of the model. Users can
additionally inﬂuence the proof process by adding Helper
lemmas, i.e., lemmas with the reuse annotations, in the model.
These lemmas are added to the system constraints in the proof
process. Each helper lemma needs to be proven by Tamarin
ﬁrst before being used as a constraint.
2.2.6 Adversary Model
2.2.4 Restrictions on State Transitions
A user of the Tamarin prover can explicitly exclude invalid
execution traces in three ways: 1) restriction axioms, which
are expressed in ﬁrst-order logic. During the veriﬁcation pro-
cess, Tamarin considers only the model traces that satisfy the
axiom; 2) type restriction preﬁx ∼. If a variable is preﬁxed
Tamarin follows the Dolev-Yao Model [27] to deﬁne the
capabilities of an adversary, which includes eavesdropping,
creating, modifying (including combining or splitting), and
replaying messages in a public channel. Additionally, the
adversary is armed with message deduction and construction
rules, which allows her to apply cryptographic rules or model-
speciﬁc knowledge to advance her current knowledge base.
576    30th USENIX Security Symposium
USENIX Association
2.2.7 Common Assumptions in Tamarin
multiple terms.
As a symbolic veriﬁcation tool, each Tamarin model inherits
the following assumptions.
• The standard cryptographic primitives are perfect, i.e., the
only way to subvert decryption or forge signatures is to
obtain the corresponding secret key. Hash operations are
purely one-way operation and collision resistant.
• Each symbol or term is atomic that cannot be broken into
• Fresh variables (generated using fact Fr(.)) are pure ran-
dom variables and each instantiation is guaranteed to pro-
duce a unique value.
• Multiple operations within one rule execute as one unit.
Tamarin does not consider interleaving of such operations
in the proof process.
• Each declared variable in a rule is local, i.e., variable used
in two different rules with the same name are different.
• Tamarin can argue about relative ordering of a rule execu-
tion, but it cannot measure the elapsed time between two
executions of rules.
3 Overview
3.1 Problem Statement
In this paper, we aim to address the problem of state continuity
in the context of Intel SGX enclave programs. The concept
of state continuity was proposed in the context of protected
modules [18,28]—code running in isolated environments with
limited APIs to the outside—isolated by a combination of
hardware and software components. It states that the protected
module must resume from the same execution state after TCB
interrupts due to reboot or crash [41].
However, the TCB of SGX enclaves is more complex than
that of protected modules. As a user-space TEE, SGX main-
tains its software TCB in the enclave memory, monotonic
counters, and sealed storage. This TCB can be updated by
any code inside the same enclave, whose execution states
can be initiated, interrupted, suspended, and terminated by
privileged software at any time and in an arbitrary order. As
the execution of the TCB depends on the input data from
the untrusted software (in the form of ecall parameters and
ocall return values), the execution state can be easily manipu-
lated. Moreover, even when such input data is encrypted and
integrity protected, e.g., monotonic counters, sealed storage,
and authenticated messages, a previously used data can be
replayed to the enclave program—bypassing decryption and
integrity checks—and effectively rolling the TCB state back
to a previous one. Nevertheless, the support of multi-threading
in the software TCB makes the protection of state continuity
even more challenging, as the execution integrity of the TCB
can be affected by the interleaved accesses to global variables.
As such, we consider a more general deﬁnition of state
continuity in this work: Speciﬁcally, we deﬁne states of en-
clave programs as data stored in the enclave memory (e.g.,
global variables) and non-volatile memory (e.g., monotonic
counters) and persistent storage (e.g., sealed data); and state
continuity is a property of the enclave program, which states
that the enclave program always executes on the expected
state, even when the execution can be restarted, suspended,
and interrupted arbitrarily by the privileged software, or in-
terleaved with another concurrent enclave thread sharing the
same set of global variables. Clearly, the traditional deﬁnition
of state continuity is subsumed by ours.
3.2 Attacker Model
Following SGX’s threat model, we assume that the OS and
other privileged software is controlled by the adversary. In
particular, the adversary can create new processes and threads,
instantiate enclaves from an enclave binary, trigger ecalls to
an enclave with arbitrary arguments and in arbitrary order,
pause the execution of an enclave at a speciﬁc instruction, hi-
jack ocalls and return arbitrary values to ocalls. This includes
triggering concurrent ecalls with multiple threads as long as
multi-threading is supported by the enclave binary. However,
other SGX attacks such as side-channel attacks (e.g., [55]),
denial-of-service attacks (e.g., [34]), and speculative execu-
tion attacks (e.g., [17]) are not considered.
3.3 Overview
In this paper, we aim to tackle the veriﬁcation of state con-
tinuity using symbolic veriﬁcation tools, which have been
previously used to verify security of cryptographic protocols
but never applied to reason about system security. However,
doing so encounters two major challenges:
First, one must convert semantics of software programs,
such as branches, global and local variables, synchroniza-
tion locks, as well as a variety of SGX primitives such as
monotonic counters, sealed storage, derived keys, relationship
between developers and enclave code, and adversary capa-
bilities into Tamarin’s MSRs. As the ﬁrst attempt to achieve
these goals, this work proposes new ideas of building models
using Tamarin MSRs for each of these primitives.
Second, one must encode the desired state continuity
properties into ﬁrst-order logic that can be expressed by
Tamarin lemmas. This work explores the modeling of state
continuity properties using (1) one-to-one mapping between
requests and responses, and (2) uniqueness of variables,
messages and sessions.
In this paper, we use three case studies to illustrate the use
of this method in the formal veriﬁcation of state continuity
properties for SGX enclave programs. In these three cases,
the states of the enclave programs are maintained in the mono-
tonic counters, global variables, and seal data, respectively.
USENIX Association
30th USENIX Security Symposium    577
The root cause of the problems varies. For instance, the TCB
state may be different at the time-of-check from that at the
time-of-use; in other cases, the TCB state may be replaced
with a stale one due to improper rollback attacks. We will
showcase how each of these state continuity issues can be
modeled and veriﬁed.
4 Tamarin Models for SGX Primitives
Designing symbolic model for the SGX primitives require
unconventional approach, as the execution model of Tamarin
MSRs differs signiﬁcantly from enclave code. In this section,
we discuss the techniques and principles of building Tamarin
models of each of the considered SGX primitives.
4.1 Structure of SGX Applications
An SGX application consists of a host program (untrusted)
and an enclave binary (trusted). Every SGX application is
developed by an Independent Software Vendor (ISV), who
signs its enclave code and then deploys the entire SGX
application to an SGX-enabled machine. One such a machine
may run multiple SGX applications from different ISVs. At
runtime, each SGX application is instantiated into a process;
the process that executes the enclave code is called an enclave
process.
Before modeling the operations of SGX applications, we
ﬁrst systematically model these entities and their relationships.
For clarity, we use the terms ISV, platform, enclave-binary,
and enclave-process, to denote an ISV, an SGX-enabled ma-
chine, the ISV-signed enclave code, an instantiated process
from the SGX application.
The relationship among entities may be modeled in a lay-
ered network structure, which we call an association network.
A node in an association network represents an entity (i.e., a
platform, an ISV, an enclave-binary, or an enclave-process).
Each entity is modeled by one speciﬁc fresh term called iden-
tity, which is generated using an Fr fact. One example of
forming entity association is shown in Figure 1. The top layer
of the networks are the ISV entities, the second layer is the
enclave-binary entities, and the third is the enclave-process
entities. We denote the entities of same type as one role.
Therefore, the identities of these entities are generated with
fresh role terms; isv, e, and p are role terms. As a result, each
role term instantiates into an distinct entity. The structure of
the network may vary depending on the program to be mod-
eled. When it is not necessary to include certain entities of
a network, omitting them from the model may be beneﬁcial:
(1) it makes the proof of the model more efﬁcient, and (2) the
resulting model becomes more general.
An association network can be modeled as a sequence of
rules, fact properties (§2.2.2), and restrictions on state tran-
sitions (§2.2.4). Besides generating the identities, the rules
collect a set of role terms, called association, to maintain
Figure 1: An example of a multi-layer association network.
The network on the right suggest that one platform runs mul-
tiple ISV-deployed programs; each ISV may have multiple
enclave-binaries; one enclave-binary is instantiated into mul-
tiple enclave processes.