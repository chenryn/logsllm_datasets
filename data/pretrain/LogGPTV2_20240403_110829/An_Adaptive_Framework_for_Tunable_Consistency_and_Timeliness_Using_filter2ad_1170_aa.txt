# An Adaptive Framework for Tunable Consistency and Timeliness Using Replication

**Authors:**
- Sudha Krishnamurthy
- William H. Sanders
- Michel Cukier

**Affiliations:**
- Coordinated Science Laboratory, Department of Computer Science, and Department of Electrical & Computer Engineering, University of Illinois at Urbana-Champaign
- Center for Reliability Engineering, Department of Materials & Nuclear Engineering, University of Maryland, College Park

**Emails:**
- {krishnam, whs}@crhc.uiuc.edu
- PI:EMAIL

## Abstract

One of the key challenges in using replication to service multiple clients concurrently is delivering both timely and consistent responses. This paper addresses this problem in the context of applications with specific temporal and consistency requirements. These applications can tolerate a certain degree of relaxed consistency in exchange for better response times. We propose a flexible Quality of Service (QoS) model that allows clients to specify their temporal and consistency constraints. To select replicas that meet these constraints, we control the inconsistency among replicas, ensuring a sufficient pool of replicas with the appropriate state. Our adaptive framework uses lazy update propagation to manage replica inconsistency and employs a probabilistic approach to dynamically select replicas based on the client's QoS specification. The probabilistic approach leverages performance history to predict a replica's ability to meet the client's QoS requirements. We present experimental results from our implementation.

## 1. Introduction

Replicating distributed services enables concurrent servicing of multiple clients, improving response times by selecting different replicas for different clients. However, concurrency can introduce replica inconsistency, making it challenging to support concurrent operations while maintaining acceptable levels of divergence in the replicated state. Traditional consistency models offer either strong consistency with immediate convergence or weak consistency with eventual convergence. Strong consistency, achieved through pessimistic algorithms like active and passive replication, ensures correctness but incurs high performance overheads. Weak consistency, achieved through optimistic algorithms, allows better responsiveness but may lead to conflicts due to inconsistent states.

Our goal is to support applications with specific time constraints that can relax their consistency requirements to improve response times. These applications need bounded inconsistency to ensure meaningful responses. Examples include real-time database applications such as online stock trading and traffic monitoring. We propose an adaptive middleware framework that allows users to express their timeliness and consistency requirements as a QoS specification. This framework, implemented in AQuA, a CORBA-based middleware, explores the trade-offs between timeliness and consistency.

### Main Contributions:
- **Section 2:** Proposes a QoS model for expressing timeliness and consistency requirements.
- **Section 3:** Describes our framework for implementing different consistency guarantees.
- **Section 4:** Details the protocol for maintaining sequential consistency.
- **Section 5:** Presents a probabilistic approach for dynamic replica selection based on QoS specifications.
- **Section 6:** Provides experimental results from our implementation.

## 2. QoS Model for Timeliness and Consistency

Several researchers have extended traditional consistency models to incorporate time bounds on inconsistency. For example, epsilon-serializability and timed consistency models require that the effect of a write at time \( t \) be visible by \( t + x \), where \( x \) is the maximum acceptable delay. TACT middleware also provides tunable consistency and availability, but does not address transaction deadlines or response time constraints. Our QoS model allows clients to express their consistency and response time requirements.

### Request Model
- **Read-Only Methods:** Clients explicitly specify read-only methods by name. Any unspecified operation is considered an update.
- **Update Operations:** Modify the object's state and can be write-only or read-write.

### Consistency Attributes
- **Ordering Guarantee:** Specifies the order in which requests are processed to prevent conflicts. Common guarantees include sequential, causal, and FIFO.
- **Staleness Threshold:** Maximum staleness a client tolerates. Staleness is measured using logical timestamps, indicating the number of updates not yet reflected in the replica's state.

### Timeliness Specification
- **Response Time and Probability:** Specifies the expected response time and the probability of meeting the deadline. Applicable only to read-only requests.

### Example
- **Document-Sharing Application:** A client can specify a document version no more than 5 versions old within 2.0 seconds with a 70% probability.

## 3. Framework for Tunable Consistency

Given the QoS model, our framework aims to support application-specific requirements at the middleware layer. We address three main issues:
1. **Replica Organization:** Primary and secondary replication groups, with a QoS group encompassing all replicas and clients.
2. **Consistency Protocols:** Implement different consistency semantics and provide an infrastructure for on-demand use.
3. **Dynamic Replica Selection:** Mechanism to select replicas based on client QoS requirements.

### Replica Organization
- **Primary Group:** Implements strong consistency.
- **Secondary Group:** Implements weaker consistency.
- **Lazy Update Propagation:** Reduces overheads by performing updates on the primary group and propagating them lazily to the secondary group.

## 4. Tunable Consistency Protocols

To maintain replica consistency, our framework implements different ordering guarantees as timed consistency handlers. Clients use the appropriate handler for the service.

### Sequential Consistency Protocol
- **Update Requests:** Executed by all primary replicas in the same order.
- **Secondary Replicas:** Updated by a lazy publisher from the primary group.
- **Consistency Maintenance:** Ensures all replicas eventually reflect the same state, with controlled staleness.

## 5. Probabilistic Approach for Replica Selection

We use a probabilistic approach to dynamically select replicas based on the client's QoS specification. This approach leverages performance history to predict a replica's ability to meet the client's requirements.

## 6. Experimental Results

We present experimental results from our implementation, demonstrating the effectiveness of our framework in balancing timeliness and consistency.

---

This optimized text is more structured, clear, and professional, making it easier to read and understand.