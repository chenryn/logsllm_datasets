**作者：京东安全 Dawn Security Lab  
原文链接：**
## 概述
CVE-2021-31956是微软2021年6月份披露的一个内核堆溢出漏洞，攻击者可以利用此漏洞实现本地权限提升，nccgroup的博客已经进行了详细的利用分析，不过并没有贴出exploit的源代码。
本篇文章记录一下自己学习windows exploit的过程，使用的利用技巧和nccgroup提到的大同小异，仅供学习参考。
## 漏洞定位
漏洞定位在windows的NTFS文件系统驱动上(C:\Windows\System32\drivers\ntfs.sys)，NTFS文件系统允许为每一个文件额外存储若干个键值对属性，称之为EA(Extend
Attribution) 。从微软的开发文档上可以查出，有一些系统调用是用来处理键值对的读写操作。
    // 为文件创建EA
    NTSTATUS ZwSetEaFile(
      [in]  HANDLE           FileHandle,
      [out] PIO_STATUS_BLOCK IoStatusBlock,
      [in]  PVOID            Buffer,
      [in]  ULONG            Length
    );
    // 查询文件EA
    NTSTATUS ZwQueryEaFile(
      [in]           HANDLE           FileHandle,
      [out]          PIO_STATUS_BLOCK IoStatusBlock,
      [out]          PVOID            Buffer, // PFILE_FULL_EA_INFORMATION
      [in]           ULONG            Length,
      [in]           BOOLEAN          ReturnSingleEntry,
      [in, optional] PVOID            EaList, // PFILE_GET_EA_INFORMATION
      [in]           ULONG            EaListLength,
      [in, optional] PULONG           EaIndex,
      [in]           BOOLEAN          RestartScan
    );
    typedef struct _FILE_GET_EA_INFORMATION {
      ULONG NextEntryOffset;
      UCHAR EaNameLength;
      CHAR  EaName[1];
    } FILE_GET_EA_INFORMATION, *PFILE_GET_EA_INFORMATION;
    typedef struct _FILE_FULL_EA_INFORMATION {
      ULONG  NextEntryOffset;
      UCHAR  Flags;
      UCHAR  EaNameLength;
      USHORT EaValueLength;
      CHAR   EaName[1];
    } FILE_FULL_EA_INFORMATION, *PFILE_FULL_EA_INFORMATION;
如下是查询EA的系统调用实现，查询时接收一个用户传入的字典的key集合eaList，将查询到的键值对写入到output_buffer。每次写完一个键值对，需要四字节对齐，函数内部维护了一个变量padding_length用来指示每次向output_buffer写入时需要额外填充的数据长度，同时维护了一个变量为output_buffer_length用来记录output_buffer剩余的可用空间。但是在【A】处写入键值对时并没有检查output_buffer_length是否大于padding_length，两个uint32相减以后发生整数溢出绕过检查，在后面memmove的时候实现任意长度，任意内容越界写。
    _QWORD *__fastcall NtfsQueryEaUserEaList(_QWORD *a1, FILE_FULL_EA_INFORMATION *ea_blocks_for_file, __int64 a3, __int64 output_buffer, unsigned int output_buffer_length, PFILE_GET_EA_INFORMATION eaList, char a7)
    {
      int v8; // edi
      ULONG eaList_iter; // ebx
      unsigned int padding_length; // er15
      PFILE_GET_EA_INFORMATION current_ea; // r12
      ULONG v12; // er14
      UCHAR v13; // r13
      PFILE_GET_EA_INFORMATION i; // rbx
      unsigned int output_idx_; // ebx
      FILE_FULL_EA_INFORMATION *output_iter; // r13
      unsigned int current_ea_output_length; // er14
      unsigned int v18; // ebx
      FILE_FULL_EA_INFORMATION *v20; // rdx
      char v21; // al
      ULONG next_iter; // [rsp+20h] [rbp-38h]
      unsigned int v23; // [rsp+24h] [rbp-34h] BYREF
      FILE_FULL_EA_INFORMATION *v24; // [rsp+28h] [rbp-30h]
      struct _STRING reqEaName; // [rsp+30h] [rbp-28h] BYREF
      STRING SourceString; // [rsp+40h] [rbp-18h] BYREF
      unsigned int output_idx; // [rsp+A0h] [rbp+48h]
      v8 = 0;
      *a1 = 0i64;
      v24 = 0i64;
      eaList_iter = 0;
      output_idx = 0;
      padding_length = 0;
      a1[1] = 0i64;
      while ( 1 )
      {
        current_ea = (PFILE_GET_EA_INFORMATION)((char *)eaList + eaList_iter);
        *(_QWORD *)&reqEaName.Length = 0i64;
        reqEaName.Buffer = 0i64;
        *(_QWORD *)&SourceString.Length = 0i64;
        SourceString.Buffer = 0i64;
        *(_QWORD *)&reqEaName.Length = current_ea->EaNameLength;
        reqEaName.MaximumLength = reqEaName.Length;
        reqEaName.Buffer = current_ea->EaName;
        RtlUpperString(&reqEaName, &reqEaName);
        if ( !NtfsIsEaNameValid(&reqEaName) )
          break;
        v12 = current_ea->NextEntryOffset;
        v13 = current_ea->EaNameLength;
        next_iter = current_ea->NextEntryOffset + eaList_iter;
        for ( i = eaList; ; i = (PFILE_GET_EA_INFORMATION)((char *)i + i->NextEntryOffset) )
        {
          if ( i == current_ea )
          {
            output_idx_ = output_idx;
            output_iter = (FILE_FULL_EA_INFORMATION *)(output_buffer + padding_length + output_idx);
            if ( NtfsLocateEaByName((__int64)ea_blocks_for_file, *(_DWORD *)(a3 + 4), &reqEaName, &v23) )
            {                                       // Find EA
              v20 = (FILE_FULL_EA_INFORMATION *)((char *)ea_blocks_for_file + v23);
              current_ea_output_length = v20->EaValueLength + v20->EaNameLength + 9;
              if ( current_ea_output_length NextEntryOffset = 0;
                goto LABEL_8;
              }
            }
            else
            {                                       // EA not found??
              current_ea_output_length = current_ea->EaNameLength + 9;
              if ( current_ea_output_length + padding_length NextEntryOffset = 0;
                output_iter->Flags = 0;
                output_iter->EaNameLength = current_ea->EaNameLength;
                output_iter->EaValueLength = 0;
                memmove(output_iter->EaName, current_ea->EaName, current_ea->EaNameLength);
                SourceString.Length = reqEaName.Length;
                SourceString.MaximumLength = reqEaName.Length;
                SourceString.Buffer = output_iter->EaName;
                RtlUpperString(&SourceString, &SourceString);
                output_idx_ = output_idx;
                output_iter->EaName[current_ea->EaNameLength] = 0;
    LABEL_8:
                v18 = current_ea_output_length + padding_length + output_idx_;
                output_idx = v18;
                if ( !a7 )
                {
                  if ( v24 )
                    v24->NextEntryOffset = (_DWORD)output_iter - (_DWORD)v24;
                  if ( current_ea->NextEntryOffset )
                  {
                    v24 = output_iter;
                    output_buffer_length -= current_ea_output_length + padding_length;
                    padding_length = ((current_ea_output_length + 3) & 0xFFFFFFFC) - current_ea_output_length;
                    goto LABEL_26;
                  }
                }
    ...
## 漏洞分析
在具体介绍利用之前，需要先简单了解一下windows的堆分配算法。Windows10引入了新的方式进行堆块管理，称为Segment
Heap，有篇[文章](https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf)对此进行了详细的描述。
每个堆块有个堆头用来记录元信息，占据了16个字节，结构如下。
    typedef struct {
        char previousSize;
        char poolIndex;
        char blockSize;
        char poolType;
        int tag;
        void* processBilled;
    }PoolHeader;
## 相对偏移地址读写
这个漏洞里，越界对象output_buffer是系统临时申请的堆块，系统调用结束以后会被立即释放，不能持久化保存，这导致SegmentHeap
Aligned Chunk Confusion的方法在这里并不适用。
通过实验发现windows在free时的检查并不严格，通过合理控制越界内容，破坏掉下一个堆块的PoolHeader以后，并不会触发异常，这允许我们直接覆盖下一个堆块的数据，接下来的目标就是挑选合适的被攻击堆块对象。
通过查阅资料，我找到了一个用户可以自定义大小的结构体_WNF_STATE_DATA。关于WNF的实际用法，微软并没有提供官方的说明文档，这里不展开介绍，只用把它理解成一个内核实现的数据存储器即可。通过NtCreateWnfStateName创建一个WNF对象实例，实例的数据结构为_WNF_NAME_INSTANCE；通过NtUpdateWnfStateData可以往对象里写入数据，使用_WNF_STATE_DATA数据结构存储写入的内容；通过NtQueryWnfStateData可以读取之前写入的数据，通过NtDeleteWnfStateData可以释放掉这个对象。
    //0xa8 bytes (sizeof)
    struct _WNF_NAME_INSTANCE
    {
        struct _WNF_NODE_HEADER Header;                                         //0x0
        struct _EX_RUNDOWN_REF RunRef;                                          //0x8
        struct _RTL_BALANCED_NODE TreeLinks;                                    //0x10
        struct _WNF_STATE_NAME_STRUCT StateName;                                //0x28
        struct _WNF_SCOPE_INSTANCE* ScopeInstance;                              //0x30
        struct _WNF_STATE_NAME_REGISTRATION StateNameInfo;                      //0x38
        struct _WNF_LOCK StateDataLock;                                         //0x50
        struct _WNF_STATE_DATA* StateData;                                      //0x58
        ULONG CurrentChangeStamp;                                               //0x60
        VOID* PermanentDataStore;                                               //0x68
        struct _WNF_LOCK StateSubscriptionListLock;                             //0x70
        struct _LIST_ENTRY StateSubscriptionListHead;                           //0x78
        struct _LIST_ENTRY TemporaryNameListEntry;                              //0x88
        struct _EPROCESS* CreatorProcess;                                       //0x98
        LONG DataSubscribersCount;                                              //0xa0
        LONG CurrentDeliveryCount;                                              //0xa4
    };
    struct _WNF_STATE_DATA
    {
        struct _WNF_NODE_HEADER Header;                                         //0x0
        ULONG AllocatedSize;                                                    //0x4
        ULONG DataSize;                                                         //0x8
        ULONG ChangeStamp;                                                      //0xc
    };
举例说明，WNF数据在内核里的保存方式如下所示
    1: kd> dd ffffdd841d4b6850
    ffffdd84`1d4b6850  0b0c0000 20666e57 25a80214 73ca76c5      // PoolHeader 0x10个字节
    ffffdd84`1d4b6860  00100904 000000a0 000000a0 00000001      // _WNF_STATE_DATA 数据结构，用户数据的长度为0xa0 0x10个字节
    ffffdd84`1d4b6870  61616161 61616161 61616161 61616161      // WNF数据
    ffffdd84`1d4b6880  61616161 61616161 61616161 61616161
    ffffdd84`1d4b6890  61616161 61616161 61616161 61616161
    ffffdd84`1d4b68a0  61616161 61616161 61616161 61616161
    ffffdd84`1d4b68b0  61616161 61616161 61616161 61616161
    ffffdd84`1d4b68c0  61616161 61616161 61616161 61616161
通过喷堆，控制堆布局如下，NtFE是可以越界写的
chunk，后面紧挨着的是_WNF_STATE_DATA数据结构。越界修改结构体里的DataSize对象，接下来调用NtQueryWnfStateData实现相对偏移地址读写。
    0: kd> g
    Breakpoint 1 hit
    Ntfs!NtfsQueryEaUserEaList:
    fffff802`3d2a8990 4c894c2420      mov     qword ptr [rsp+20h],r9
    1: kd> !pool r9
    Pool page ffffdd841d4b67a0 region is Paged pool
     ffffdd841d4b6010 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b60d0 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0
     ffffdd841d4b6190 size:   c0 previous size:    0  (Allocated)  Wnf  Process: ffff878ff44c80c0