public static void main(String[] args) {
Programming the Semantic Web 17
OntModel model = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
model.read(
“http://dme.uma.pt/jcardoso/owl/University.owl");
for(ExtendedIterator i= model.listIndividuals();
.hasNext();)
{
System.out.println(((Individual)i.next()).toString());
}
}
}
The output of executing this example is:
http://dme.uma.pt/jcardoso/owl/University.owl#Adelia
http://dme.uma.pt/jcardoso/owl/University.owl#Fatima
http://dme.uma.pt/jcardoso/owl/University.owl#Carolina
http://dme.uma.pt/jcardoso/owl/University.owl#ASP
http://dme.uma.pt/jcardoso/owl/University.owl#SD
http://dme.uma.pt/jcardoso/owl/University.owl#CF
http://dme.uma.pt/jcardoso/owl/University.owl#Grade_1
http://dme.uma.pt/jcardoso/owl/University.owl#Grade_3
http://dme.uma.pt/jcardoso/owl/University.owl#Grade_2
http://dme.uma.pt/jcardoso/owl/University.owl#IC
http://dme.uma.pt/jcardoso/owl/University.owl#JC
http://dme.uma.pt/jcardoso/owl/University.owl#RF
To list all the individuals of the class , we can add the
#Student
following lines of code to the previous example:
OntClass Student = model.getOntClass(
“http://dme.uma.pt/jcardoso/owl/University.owl#Student”);
for(ExtendedIterator i= Student.listInstances();i.hasNext();)
{
System.out.println(((Individual)i.next()).toString());
}
Now we can create instances dynamically. The following example
creates an instance of type and set the name and
#Jorge #Teacher
18 Semantic Web Services, Processes and Applications
e-mail of the instance to “Jorge Cardoso” and
#Jorge
PI:EMAIL, respectively.
Resource tClass=model.getResource(baseURI+"#Teacher");
Individual teacher=
model.createIndividual(baseURI+"#Jorge",tClass);
DatatypeProperty name =
model.getDatatypeProperty(baseURI+"#Name");
teacher.addProperty(name,"Jorge Cardoso");
DatatypeProperty email =
model.getDatatypeProperty(baseURI+"#Email");
teacher.addProperty(email,"PI:EMAIL");
5.7 Queries with Jena
One task that is particularly useful once an ontology is available, is
to query its data. An OWL knowledge base can be queried using API
function calls or using RDQL (RDF Data Query Language). Jena’s
built-in query language is RDQL, a query language for RDF. While
not yet a formally established standard, (it was submitted in January
2004), RDQL is commonly used by many RDF applications. RDQL
has been designed to execute queries in RDF models, but it can be
used to query OWL models since their underlying representation is
RDF. It is a very effective way of retrieving data from an RDF model.
5.7.1 RDQL Syntax
RDQL’s syntax is very similar to SQL’s syntax. Some of their
concepts are comparable and will be well-known to people that have
previously worked with relational database queries. A simple example
of a RDQL query structure is,
variables
SELECT
conditions
WHERE
Variables are represented with a question mark followed by the
variable name (for example: ?a, ?b). Conditions are written as triples
(Subject Property Value) and delimited with “”. RDQL
allows us to search within a RDF graph to find subgraphs that match
some patterns of RDF node triples.
Programming the Semantic Web 19
Using our University ontology, we can inquire about the direct
subclasses of the class . This can be achieved with the
#Person
following RDQL query:
SELECT ?x WHERE (?x  )
USING rdfs FOR 
univ FOR
http://dme.uma.pt/jcardoso/owl/University.owl#>
The ?x in this query is a variable representing something that we
want of the query. The query engine will try to substitute a URI value
for ?x when it finds a subclass of . The “rdfs” and “univ”
#Person
prefixes make the URIs in the query shorter and more understandable.
Executing the above query to the University ontology illustrated in
Figure 14-1 we expected to retrieve two URIs. One corresponding to
the concept and the other to the concept , i.e.
#Student #Teacher
RDQL allows complex queries to be expressed succinctly, with a
query engine performing the hard work of accessing the data model.
Sometimes, not every part of the ontology structure is known. For
example, if we wish to inquire about the list of courses that a student
has enrolled for. Since we do not know all the URIs, we have to use
variables to represent the unknown items in the query. For instance,
“Show me all Y where Y is a “Course”, X is a “Student”, X is named
“Adelia Gouveia”, and X studies Y.” The response will list all the
possible values for Y that would match the desired properties. The
query for this question would be,
SELECT ?y
WHERE (?x  "Adelia Gouveia"^^xsd:string),
(?x  ?y)
USING univ FOR
We can also ask for all the students that have passed courses with a
grade higher than 12,
SELECT ?x,?c
20 Semantic Web Services, Processes and Applications
WHERE (?x  ?y),
(?x  ?c),
(?y  ?z) AND ?z>12
USING univ FOR
5.7.2 RDQL and Jena
Jena’s package contains all of the
com.hp.hpl.jena.rdql
classes and interfaces needed to use RDQL in a Java application.
import com.hp.hpl.jena.rdql;
Jena’s RDQL is implemented as an object called . To create
Query
a query it is sufficient to put the RDQL query in a object, and
String
pass it to the constructor of ,
Query
String queryString =”...”;
Query query = new Query(queryString);
The method of the object must be called to
setSource Query
explicitly set the ontology model to be used as the source for the query
(the model can alternatively be specified with a FROM clause in the
RDQL query.)
query.setSource(model);
Once a is prepared, a must be created and
Query QueryEngine
the query can be executed using the method. The
exec() Query
needs to be passed to the object, i.e.
QueryEngine
QueryEngine qe = new QueryEngine(query);
The results of a query are stored in a object.
QueryResult
QueryResults results = qe.exec();
Once we have the results of a RDQL query, a practical object that
can be used to display the results in a convenient way is to use the
object.
QueryResultsFormatter
Programming the Semantic Web 21
QueryResultsFormatter formatter =
new QueryResultsFormatter((QueryResults) results );
formatter.printAll(new PrintWriter(System.out));
An alternative to using the object is to
QueryResultsFormatter
iterate through the data retrieved using an iterator. For example,
QueryResults result = new QueryEngine(query).exec();
for (Iterator i = result; i.hasNext();) {
System.out.println(i.next());
}
With RDQL it is possible to inquire about the values that satisfy a
triple with a specific subject and property. To run this query in Jena,
the University ontology is loaded into memory. The query is executed
using the static method of Jena’s class and the results are
exec Query
processed. For example, the following segment of code retrieves all
the RDF triples of an ontology.
import java.util.Iterator;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdql.Query;
import com.hp.hpl.jena.rdql.QueryEngine;
import com.hp.hpl.jena.rdql.QueryResults;
public class RDQL {
public static void main(String[] args) {
OntModel model = ModelFactory.createOntologyModel(
OntModelSpec.OWL_MEM);
model.read(
"http://dme.uma.pt/jcardoso/owl/University.owl");
String sql= "SELECT ?x,?y,?z WHERE (?x ?y ?z)";
Query query=new Query(sql);
query.setSource(model);
QueryResults result = new QueryEngine(query).exec();
for (Iterator i = result; i.hasNext();) {
System.out.println(i.next());
22 Semantic Web Services, Processes and Applications
}
}
};
5.8 Inference and Reasoning
Inference engines, also called reasoners, are software applications
that derive new facts or associations from existing information.
Inference and inference rules allow for deriving new data from data
that is already known. Thus, new pieces of knowledge can be added
based on previous ones. By creating a model of the information and
relationships, we enable reasoners to draw logical conclusions based
on the model. For example, with OWL it is possible to make
inferences based on the associations represented in the models, which
primarily means inferring transitive relationships. Nowadays, many
inference engines are available.
• Jena reasoner – Jena includes a generic rule based inference
engine together with configured rule sets for RDFS and for
OWL.
• Jess – Using Jess (Gandon and Sadeh 2003) it is possible to
build Java software that has the capacity to “reason” using
knowledge supplied in the form of declarative rules. Jess has a
small footprint and it is one of the fastest rule engines
available. It was developed at Carnegie Melon University.
• SWI-Prolog Semantic Web Library – Prolog is a natural
language for working with RDF and OWL. The developers of
SWI-Prolog have created a toolkit for creating and editing
RDF and OWL applications, as well as a reasoning package
(Wielemaker 2005).
• FaCT++ – This system is a Description Logic reasoner, which
is a re-implementation of the FaCT reasoner. It allows
reasoning with the OWL language (FaCT 2005).
In the following sections we will concentrate our attention on using
the Jena rule based inference engine programmatically.
5.8.1 Jena Reasoners
The Jena architecture is designed to allow several inference
engines to be used with Jena. The current version of Jena includes five
predefined reasoners that can be invoked, namely:
Programming the Semantic Web 23
• Transitive reasoner: A very simple reasoner which implements
only the transitive and symmetric properties of
and .
rdfs:subPropertyOf rdfs:subClassOf
• DAML micro reasoner: A DAML reasoner which provides an
engine to legacy applications that use the DAML language.
• RDFS rule reasoner: A RDFS reasoner that supports most of the
RDFS language.
• Generic rule reasoner: A generic reasoner that is the basis for the
RDFS and OWL reasoners.
• OWL reasoners: OWL rule reasoners are an extension of the
RDFS reasoner. They exploit a rule-based engine for reasoning.
OWL reasoners supports OWL Lite plus some of the constructs of
OWL Full.
In this section we will study how to develop Java applications
using the OWL reasoning engines since OWL is becoming the most
popular language on the semantic Web compared to DAML and
RDFS.
5.8.2 Jena OWL Reasoners
Jena provides three internal reasoners of different complexity:
OWL, OWL Mini, and OWL Micro reasoners. They range from the
simple Micro reasoner with only domain-range and subclass
inference, to a complete OWL Lite reasoner.
The current version of Jena (version 2.3) does not fully support
OWL yet. It can understand all the syntax of OWL, but cannot reason
in OWL Full. Jena supports OWL Lite plus some constructs of OWL
DL and OWL Full, such as . Some of the important
owl:hasValue
constructs that are not supported in Jena include
owl:complementOf
and . Table 14-4 illustrates the OWL constructs supported
owl:oneOf
by the reasoning engines available.
Table 14-4. Jena reasoning support
OWL Construct Reasoner
rdfs:subClassOf, rdfs:subPropertyOf, rdf:type all
rdfs:domain, rdfs:range all
owl:intersectionOf all
owl:unionOf all
owl:equivalentClass all
owl:disjointWith full, mini
owl:sameAs, owl:differentFrom, owl:distinctMembers full, mini
24 Semantic Web Services, Processes and Applications
owl:Thing all
owl:equivalentProperty, owl:inverseOf all
owl:FunctionalProperty, owl:InverseFunctionalProperty all
owl:SymmeticProperty, owl:TransitiveProperty all
owl:someValuesFrom full, (mini)
owl:allValuesFrom full, mini
owl:minCardinality, owl:maxCardinality, owl:cardinality full, (mini)
owl:hasValue all
owl:complementOf none
owl:oneOf none
For a complete OWL DL reasoning it is necessary to use an
external DL reasoner. The Jena DIG interface makes it easy to connect
to any reasoner that supports the DIG standard. By communicating
with other ontology processing systems, such as RACER or FAcT,
Jena can enhance its ability for reasoning in large and complex
ontologies.
5.8.3 Programming Jena reasoners
Given an ontology model, Jena’s reasoning engine can derive
additional statements that the model does not express explicitly.
Inference and inference rules allow for deriving new data from data
that is already known. Thus, new pieces of knowledge can be added
based on previous ones. By creating a model of the information and
relationships, we enable reasoners to draw logical conclusions based
on the model.
As we have already done previously, the first step to develop a
semantic Web application with support for reasoning is to create an
ontology model,
String baseURI=