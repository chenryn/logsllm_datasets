the parameter
.i m
= 2^48, hence 48-bit integer arithmetic is performed.
unless
.br lcong48 ()
is called,
.ir a
and
.i c
are given by:
.pp
.in +4n
.ex
.b a = 0x5deece66d
.b c = 0xb
.ee
.in
.pp
the value returned by any of the functions
.br drand48 (),
.br erand48 (),
.br lrand48 (),
.br nrand48 (),
.br mrand48 (),
or
.br jrand48 ()
is
computed by first generating the next 48-bit
.i xi
in the sequence.
then the appropriate number of bits, according to the type of data item to
be returned, is copied from the high-order bits of
.i xi
and transformed
into the returned value.
.pp
the functions
.br drand48 (),
.br lrand48 (),
and
.br mrand48 ()
store
the last 48-bit
.i xi
generated in an internal buffer.
the functions
.br erand48 (),
.br nrand48 (),
and
.br jrand48 ()
require the calling
program to provide storage for the successive
.i xi
values in the array
argument
.ir xsubi .
the functions are initialized by placing the initial
value of
.i xi
into the array before calling the function for the first
time.
.pp
the initializer function
.br srand48 ()
sets the high order 32-bits of
.i xi
to the argument
.ir seedval .
the low order 16-bits are set
to the arbitrary value 0x330e.
.pp
the initializer function
.br seed48 ()
sets the value of
.i xi
to
the 48-bit value specified in the array argument
.ir seed16v .
the
previous value of
.i xi
is copied into an internal buffer and a
pointer to this buffer is returned by
.br seed48 ().
.pp
the initialization function
.br lcong48 ()
allows the user to specify
initial values for
.ir xi ,
.ir a ,
and
.ir c .
array argument
elements
.i param[0\-2]
specify
.ir xi ,
.i param[3\-5]
specify
.ir a ,
and
.i param[6]
specifies
.ir c .
after
.br lcong48 ()
has been called, a subsequent call to either
.br srand48 ()
or
.br seed48 ()
will restore the standard values of
.i a
and
.ir c .
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br drand48 (),
.br erand48 (),
.br lrand48 (),
.br nrand48 (),
.br mrand48 (),
.br jrand48 (),
.br srand48 (),
.br seed48 (),
.br lcong48 ()
t}	thread safety	t{
mt-unsafe race:drand48
t}
.te
.hy
.ad
.sp 1
.pp
the above
functions record global state information for the random number generator,
so they are not thread-safe.
.sh conforming to
posix.1-2001, posix.1-2008, svr4.
.sh see also
.br rand (3),
.br random (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 1993 david metcalfe (PI:EMAIL)
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.\" references consulted:
.\"     linux libc source code
.\"     lewine's _posix programmer's guide_ (o'reilly & associates, 1991)
.\"     386bsd man pages
.\" modified sat jul 24 19:23:25 1993 by rik faith (PI:EMAIL)
.\" modified mon may 27 21:37:47 1996 by martin schulze (PI:EMAIL)
.\"
.th getpw 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
getpw \- reconstruct password line entry
.sh synopsis
.nf
.br "#define _gnu_source" "             /* see feature_test_macros(7) */"
.b #include 
.b #include 
.pp
.bi "int getpw(uid_t " uid ", char *" buf );
.fi
.sh description
the
.br getpw ()
function reconstructs the password line entry for
the given user id \fiuid\fp in the buffer \fibuf\fp.
the returned buffer contains a line of format
.pp
.in +4n
.ex
.b name:passwd:uid:gid:gecos:dir:shell
.ee
.in
.pp
the \fipasswd\fp structure is defined in \fi\fp as follows:
.pp
.in +4n
.ex
struct passwd {
    char   *pw_name;       /* username */
    char   *pw_passwd;     /* user password */
    uid_t   pw_uid;        /* user id */
    gid_t   pw_gid;        /* group id */
    char   *pw_gecos;      /* user information */
    char   *pw_dir;        /* home directory */
    char   *pw_shell;      /* shell program */
};
.ee
.in
.pp
for more information about the fields of this structure, see
.br passwd (5).
.sh return value
the
.br getpw ()
function returns 0 on success; on error, it returns \-1, and
.i errno
is set to indicate the error.
.pp
if
.i uid
is not found in the password database,
.br getpw ()
returns \-1, sets
.i errno
to 0, and leaves
.i buf
unchanged.
.sh errors
.tp
.br 0 " or " enoent
no user corresponding to
.ir uid .
.tp
.b einval
.i buf
is null.
.tp
.b enomem
insufficient memory to allocate
.i passwd
structure.
.sh files
.tp
.i /etc/passwd
password database file
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br getpw ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
svr2.
.sh bugs
the
.br getpw ()
function is dangerous as it may overflow the provided buffer
.ir buf .
it is obsoleted by
.br getpwuid (3).
.sh see also
.br endpwent (3),
.br fgetpwent (3),
.br getpwent (3),
.br getpwnam (3),
.br getpwuid (3),
.br putpwent (3),
.br setpwent (3),
.br passwd (5)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/ioctl_tty.2
.\" link for old name of this page
.\" copyright (c) 2013, heinrich schuchardt 
.\" and copyright (c) 2014, michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of
.\" this manual under the conditions for verbatim copying, provided that
.\" the entire resulting derived work is distributed under the terms of
.\" a permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume.
.\" no responsibility for errors or omissions, or for damages resulting.
.\" from the use of the information contained herein.  the author(s) may.
.\" not have taken the same level of care in the production of this.
.\" manual, which is licensed free of charge, as they might when working.
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.th fanotify 7 2021-08-27 "linux" "linux programmer's manual"
.sh name
fanotify \- monitoring filesystem events
.sh description
the fanotify api provides notification and interception of
filesystem events.
use cases include virus scanning and hierarchical storage management.
in the original fanotify api, only a limited set of events was supported.
in particular, there was no support for create, delete, and move events.
the support for those events was added in linux 5.1.
(see
.br inotify (7)
for details of an api that did notify those events pre linux 5.1.)
.pp
additional capabilities compared to the
.br inotify (7)
api include the ability to monitor all of the objects
in a mounted filesystem,
the ability to make access permission decisions, and the
possibility to read or modify files before access by other applications.
.pp
the following system calls are used with this api:
.br fanotify_init (2),
.br fanotify_mark (2),
.br read (2),
.br write (2),
and
.br close (2).
.ss fanotify_init(), fanotify_mark(), and notification groups
the
.br fanotify_init (2)
system call creates and initializes an fanotify notification group
and returns a file descriptor referring to it.
.pp
an fanotify notification group is a kernel-internal object that holds
a list of files, directories, filesystems, and mounts for which
events shall be created.
.pp
for each entry in an fanotify notification group, two bit masks exist: the
.i mark
mask and the
.i ignore
mask.
the mark mask defines file activities for which an event shall be created.
the ignore mask defines activities for which no event shall be generated.
having these two types of masks permits a filesystem, mount, or
directory to be marked for receiving events, while at the same time
ignoring events for specific objects under a mount or directory.
.pp
the
.br fanotify_mark (2)
system call adds a file, directory, filesystem, or mount to a
notification group and specifies which events
shall be reported (or ignored), or removes or modifies such an entry.
.pp
a possible usage of the ignore mask is for a file cache.
events of interest for a file cache are modification of a file and closing
of the same.
hence, the cached directory or mount is to be marked to receive these
events.
after receiving the first event informing that a file has been modified,
the corresponding cache entry will be invalidated.
no further modification events for this file are of interest until the file
is closed.
hence, the modify event can be added to the ignore mask.
upon receiving the close event, the modify event can be removed from the
ignore mask and the file cache entry can be updated.
.pp
the entries in the fanotify notification groups refer to files and
directories via their inode number and to mounts via their mount id.
if files or directories are renamed or moved within the same mount,
the respective entries survive.
if files or directories are deleted or moved to another mount or if
filesystems or mounts are unmounted, the corresponding entries are deleted.
.ss the event queue
as events occur on the filesystem objects monitored by a notification group,
the fanotify system generates events that are collected in a queue.
these events can then be read (using
.br read (2)
or similar)
from the fanotify file descriptor
returned by
.br fanotify_init (2).
.pp
two types of events are generated:
.i notification
events and
.i permission
events.
notification events are merely informative and require no action to be taken
by the receiving application with one exception: if a valid file descriptor
is provided within a generic event, the file descriptor must be closed.
permission events are requests to the receiving application to decide
whether permission for a file access shall be granted.
for these events, the recipient must write a response which decides whether
access is granted or not.
.pp
an event is removed from the event queue of the fanotify group
when it has been read.
permission events that have been read are kept in an internal list of the
fanotify group until either a permission decision has been taken by
writing to the fanotify file descriptor or the fanotify file descriptor
is closed.
.ss reading fanotify events
calling
.br read (2)
for the file descriptor returned by
.br fanotify_init (2)
blocks (if the flag
.b fan_nonblock
is not specified in the call to
.br fanotify_init (2))
until either a file event occurs or the call is interrupted by a signal
(see
.br signal (7)).
.pp
the use of one of the flags
.br fan_report_fid ,
.br fan_report_dir_fid
in
.br fanotify_init (2)
influences what data structures are returned to the event listener for each
event.
events reported to a group initialized with one of these flags will
use file handles to identify filesystem objects instead of file descriptors.
.pp
after a successful
.br read (2),
the read buffer contains one or more of the following structures:
.pp
.in +4n
.ex
struct fanotify_event_metadata {
    __u32 event_len;
    __u8 vers;
    __u8 reserved;
    __u16 metadata_len;
    __aligned_u64 mask;
    __s32 fd;
    __s32 pid;
};
.ee
.in
.pp
in case of an fanotify group that identifies filesystem objects by file
handles, you should also expect to receive one or more additional information
records of the structure detailed below following the generic
.i fanotify_event_metadata
structure within the read buffer:
.pp
.in +4n
.ex
struct fanotify_event_info_header {
    __u8 info_type;
    __u8 pad;
    __u16 len;
};
struct fanotify_event_info_fid {
    struct fanotify_event_info_header hdr;
    __kernel_fsid_t fsid;
    unsigned char file_handle[0];
};
.ee
.in
.pp
for performance reasons, it is recommended to use a large
buffer size (for example, 4096 bytes),
so that multiple events can be retrieved by a single
.br read (2).
.pp
the return value of
.br read (2)
is the number of bytes placed in the buffer,
or \-1 in case of an error (but see bugs).
.pp
the fields of the
.i fanotify_event_metadata
structure are as follows:
.tp
.i event_len
this is the length of the data for the current event and the offset
to the next event in the buffer.
unless the group identifies filesystem objects by file handles, the value of
.i event_len
is always
.br fan_event_metadata_len .
for a group that identifies filesystem objects by file handles,
.i event_len
also includes the variable length file identifier records.
.tp
.i vers
this field holds a version number for the structure.
it must be compared to
.b fanotify_metadata_version
to verify that the structures returned at run time match
the structures defined at compile time.
in case of a mismatch, the application should abandon trying to use the
fanotify file descriptor.
.tp
.i reserved
this field is not used.
.tp
.i metadata_len
this is the length of the structure.
the field was introduced to facilitate the implementation of
optional headers per event type.
no such optional headers exist in the current implementation.
.tp
.i mask
this is a bit mask describing the event (see below).
.tp
.i fd
this is an open file descriptor for the object being accessed, or
.b fan_nofd