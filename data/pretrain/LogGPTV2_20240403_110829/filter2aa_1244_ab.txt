### Executable Image Exploit Overview

#### Key Features:
- **Image Reference Methods:**
  - Images can be referenced by index or by name.
  - Useful in scenarios where web servers lack file permissions to read/write files.

- **No Special Graphics Libraries Required:**
  - The exploit does not require any special graphics libraries, making it more accessible and versatile.

- **Database Storage:**
  - Images must be previously stored in a database as a BLOB (Binary Large Object).

- **Dynamic Content:**
  - The images can be dynamically generated and modified based on the query string parameters.

#### Examples:

**Executable Image Example #1:**
- **Presentation:**
  - DEFCON XV, Las Vegas, Nevada
  - Contact: PI:EMAIL
  - Website: [www.schrenk.com](http://www.schrenk.com)

- **Description:**
  - This example demonstrates how an image can be referenced and displayed using a query string.
  - Example URLs:
    - `http://localhost/defcon/show_referenced.php?id=alexispark.jpg`
    - `http://localhost/defcon/show_referenced.php?id=riviera.jpg`

- **Why Use This?**
  - Because it is an executable program that mimics the actions of a real image.

**Executable Image Example #2:**
- **Code Snippet:**
  ```php
  // Create an image handle from an actual JPG image
  $im = imagecreatefromjpeg($_GET['id']);
  
  // Define font and font color
  $font = 'arial.ttf';
  $color = imagecolorallocate($im, 255, 120, 0);
  
  // Define executable content
  $text = date("M d, Y h:m:s A", time());
  $angle = rand(0, 90);
  imagettftext($im, 20, $angle, 11, 301, $color, $font, $text);
  
  // Create an image from the handle and send to browser
  header("Content-type: image/jpeg");
  imagejpeg($im);
  
  // Destroy the old image (no longer needed)
  imagedestroy($im);
  exit;
  ```

- **Result:**
  - The image is dynamically generated with the current date and time, and the text is rotated at a random angle.

**Executable Image Example #3:**
- **Code Snippet:**
  ```php
  // Create an image handle from an actual JPG image
  $im = imagecreatefromjpeg($_GET['id']);
  
  // Define font and font color
  $font = 'arial.ttf';
  $color = imagecolorallocate($im, 255, 120, 0);
  
  // Define executable content
  $text = date("M d, Y h:m:s A", time());
  $angle = rand(0, 90);
  imagettftext($im, 20, $angle, 11, 301, $color, $font, $text);
  
  // Create an image from the handle and send to browser
  header("Content-type: image/jpeg");
  imagejpeg($im);
  
  // Destroy the old image (no longer needed)
  imagedestroy($im);
  exit;
  ```

- **Result:**
  - Similar to Example #2, this example also dynamically generates an image with the current date and time, and the text is rotated at a random angle.

#### Capabilities of Executable Images:
- **Display Images Stored in Databases:**
  - Images can be retrieved and displayed from a database.

- **Programmatically Select Images:**
  - Images can be selected and displayed based on specific conditions or user input.

- **Dynamically Produce Image Content:**
  - The content of the image can be generated on the fly, allowing for dynamic and interactive images.

- **Script-like Capabilities:**
  - Executable images can perform a wide range of actions, including:
    - **Read Referrer Variables:**
      - To see the page previous to viewing the image's page.
      - To see the query string on the previous page.
    - **Read and Write Cookies:**
      - To track individuals.
      - Works across domains.
    - **Access Databases:**
      - To retrieve or store data.
    - **Communicate via Email, SMS, etc.:**
      - To send notifications or messages.

#### Example Code for Additional Actions:
```php
// Create an image from the handle and send to browser
header("Content-type: image/jpeg");

// Write Cookie
setcookie("TestCookie", $value);

// Read Cookie
$old_cookie = $_COOKIE["TestCookie"];

// Get referer variable
$referer = $_SERVER['HTTP_REFERER'];

// Get query strings
$query_string = $_SERVER['QUERY_STRING'];

// Anything else
imagejpeg($im);
```

- **Contact:**
  - For more information, visit [www.schrenk.com](http://www.schrenk.com) or contact PI:EMAIL.