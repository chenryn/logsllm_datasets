                return true;
            }
        }
    } else {
        // 如果不为 null ,遍历链表找到要删除的节点
        for (Node x = first; x != null; x = x.next) {
            if (o.equals(x.item)) {
                unlink(x);
                return true;
            }
        }
    }
    return false;
}
// 删除链表指定位置的元素
public E remove(int index) {
    // 下标越界检查，如果越界就抛异常
    checkElementIndex(index);
    return unlink(node(index));
}
```
这里的核心在于 `unlink(Node x)` 这个方法：
```java
E unlink(Node x) {
    // 断言 x 不为 null
    // assert x != null;
    // 获取当前节点（也就是待删除节点）的元素
    final E element = x.item;
    // 获取当前节点的下一个节点
    final Node next = x.next;
    // 获取当前节点的前一个节点
    final Node prev = x.prev;
    // 如果前一个节点为空，则说明当前节点是头节点
    if (prev == null) {
        // 直接让链表头指向当前节点的下一个节点
        first = next;
    } else { // 如果前一个节点不为空
        // 将前一个节点的 next 指针指向当前节点的下一个节点
        prev.next = next;
        // 将当前节点的 prev 指针置为 null，，方便 GC 回收
        x.prev = null;
    }
    // 如果下一个节点为空，则说明当前节点是尾节点
    if (next == null) {
        // 直接让链表尾指向当前节点的前一个节点
        last = prev;
    } else { // 如果下一个节点不为空
        // 将下一个节点的 prev 指针指向当前节点的前一个节点
        next.prev = prev;
        // 将当前节点的 next 指针置为 null，方便 GC 回收
        x.next = null;
    }
    // 将当前节点元素置为 null，方便 GC 回收
    x.item = null;
    size--;
    modCount++;
    return element;
}
```
`unlink()` 方法的逻辑如下：
1. 首先获取待删除节点 x 的前驱和后继节点；
2. 判断待删除节点是否为头节点或尾节点：
   - 如果 x 是头节点，则将 first 指向 x 的后继节点 next
   - 如果 x 是尾节点，则将 last 指向 x 的前驱节点 prev
   - 如果 x 不是头节点也不是尾节点，执行下一步操作
3. 将待删除节点 x 的前驱的后继指向待删除节点的后继 next，断开 x 和 x.prev 之间的链接；
4. 将待删除节点 x 的后继的前驱指向待删除节点的前驱 prev，断开 x 和 x.next 之间的链接；
5. 将待删除节点 x 的元素置空，修改链表长度。
可以参考下图理解（图源：[LinkedList 源码分析(JDK 1.8)](https://www.tianxiaobo.com/2018/01/31/LinkedList-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK-1-8/)）：
![unlink 方法逻辑](https://oss.javaguide.cn/github/javaguide/java/collection/linkedlist-unlink.jpg)
### 遍历链表
推荐使用`for-each` 循环来遍历 `LinkedList` 中的元素， `for-each` 循环最终会转换成迭代器形式。
```java
LinkedList list = new LinkedList<>();
list.add("apple");
list.add("banana");
list.add("pear");
for (String fruit : list) {
    System.out.println(fruit);
}
```
`LinkedList` 的遍历的核心就是它的迭代器的实现。
```java
// 双向迭代器
private class ListItr implements ListIterator {
    // 表示上一次调用 next() 或 previous() 方法时经过的节点；
    private Node lastReturned;
    // 表示下一个要遍历的节点；
    private Node next;
    // 表示下一个要遍历的节点的下标，也就是当前节点的后继节点的下标；
    private int nextIndex;
    // 表示当前遍历期望的修改计数值，用于和 LinkedList 的 modCount 比较，判断链表是否被其他线程修改过。
    private int expectedModCount = modCount;
    …………
}
```
下面我们对迭代器 `ListItr` 中的核心方法进行详细介绍。
我们先来看下从头到尾方向的迭代：
```java
// 判断还有没有下一个节点
public boolean hasNext() {
    // 判断下一个节点的下标是否小于链表的大小，如果是则表示还有下一个元素可以遍历
    return nextIndex  0;
}
// 获取前一个节点
public E previous() {
    // 检查是否在迭代过程中链表被修改
    checkForComodification();
    // 如果没有前一个节点，则抛出异常
    if (!hasPrevious())
        throw new NoSuchElementException();
    // 将 lastReturned 和 next 指针指向上一个节点
    lastReturned = next = (next == null) ? last : next.prev;
    nextIndex--;
    return lastReturned.item;
}
```
如果需要删除或插入元素，也可以使用迭代器进行操作。
```java
LinkedList list = new LinkedList<>();
list.add("apple");
list.add(null);
list.add("banana");
//  Collection 接口的 removeIf 方法底层依然是基于迭代器
list.removeIf(Objects::isNull);
for (String fruit : list) {
    System.out.println(fruit);
}
```
迭代器对应的移除元素的方法如下：
```java
// 从列表中删除上次被返回的元素
public void remove() {
    // 检查是否在迭代过程中链表被修改
    checkForComodification();
    // 如果上次返回的节点为空，则抛出异常
    if (lastReturned == null)
        throw new IllegalStateException();
    // 获取当前节点的下一个节点
    Node lastNext = lastReturned.next;
    // 从链表中删除上次返回的节点
    unlink(lastReturned);
    // 修改指针
    if (next == lastReturned)
        next = lastNext;
    else
        nextIndex--;
    // 将上次返回的节点引用置为 null，方便 GC 回收
    lastReturned = null;
    expectedModCount++;
}
```
## LinkedList 常用方法测试
代码：
```java
// 创建 LinkedList 对象
LinkedList list = new LinkedList<>();
// 添加元素到链表末尾
list.add("apple");
list.add("banana");
list.add("pear");
System.out.println("链表内容：" + list);
// 在指定位置插入元素
list.add(1, "orange");
System.out.println("链表内容：" + list);
// 获取指定位置的元素
String fruit = list.get(2);
System.out.println("索引为 2 的元素：" + fruit);
// 修改指定位置的元素
list.set(3, "grape");
System.out.println("链表内容：" + list);
// 删除指定位置的元素
list.remove(0);
System.out.println("链表内容：" + list);
// 删除第一个出现的指定元素
list.remove("banana");
System.out.println("链表内容：" + list);
// 获取链表的长度
int size = list.size();
System.out.println("链表长度：" + size);
// 清空链表
list.clear();
System.out.println("清空后的链表：" + list);
```
输出：
```plain
索引为 2 的元素：banana
链表内容：[apple, orange, banana, grape]
链表内容：[orange, banana, grape]
链表内容：[orange, grape]
链表长度：2
清空后的链表：[]
```