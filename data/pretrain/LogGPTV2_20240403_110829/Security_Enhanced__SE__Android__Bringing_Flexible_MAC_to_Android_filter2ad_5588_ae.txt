Mean
4172.68
507.05
838.89
672.25
279.85
1230.67
191.110
115.45
337.40
SD
148.83
51.81
57.61
61.48
36.22
0.86
0.662
5.61
22.85
Mean
4165.31
514.27
842.95
673.68
273.23
1230.46
191.010
115.15
324.55
total score
memory
integer
ﬂoat
score2d
score3d
sdread
sdwrite
database
Table 5. AnTuTu comparative benchmarking
(n = 200) full maguro-userdebug (4.2).
The increase in size for the recovery image is similar to
the boot image. Like the boot image, the recovery image
includes the kernel and a minimal root ﬁlesystem, which
in the SE Android case includes the SE Android kernel ex-
tensions and the policy ﬁles. The recovery image further in-
cludes the recovery console and updater programs that were
extended for SE Android to ensure proper security labeling
of ﬁles upon updates.
5.2. Performance
In order to be acceptable in mainline Android, SE An-
droid must not impose signiﬁcant runtime performance
overhead. To measure the runtime performance overhead
of SE Android, we ran two well known benchmark apps
found in the Google Play Store: AnTuTu [5] by AnTuTu
Labs and Benchmark by Softweg [45]. Each benchmark
was executed on both the AOSP and SE Android builds on
the same device. We ran a large number of trials to sharpen
the distribution. Under both benchmarks we ensured that
the same number of apps/services were loaded and running
at any time.
5.2.1. AnTuTu performance test. The results for 200 runs
of the AnTuTu benchmark on both AOSP and SE Android
are shown in Table 5. The memory, integer, and ﬂoat tests
should be unaffected by SE Android as they do not involve
any system calls. The score3d and score2d tests are mea-
surements of graphical performance and should likewise be
unaffected by SE Android. Both tests measure the frames
per second (fps) for various images and graphics. The sd-
write and sdread tests perform writes and reads of the SD-
card storage, measuring the data transfer rate. The database
I/O test exercises the Android SQLite database functional-
ity. For these tests, we expect some small overhead from
SE Android due to the need to create and fetch the extended
attributes for ﬁle security labeling and due to the additional
permission checking performed by SE Android. For most
Total memory
Copy memory
Total CPU
MFLOPS DP
MFLOPS SP
MWIPS DP
MWIPS SP
VAX MIPS DP
VAX MIPS SP
Graphics Scores
Total score
Opacity
Transparent
Filesystem Scores
Total Score
Create ﬁles
Delete ﬁles
Read ﬁle
Write ﬁle
SDcard Scores
Create ﬁles
Delete ﬁles
Read ﬁle
Write ﬁle
AOSP
Mean
588.88
535.11
3167.07
17.61
41.85
200.86
289.18
139.03
191.31
SD
68.61
62.35
149.51
1.09
5.06
8.83
19.04
6.19
16.08
SE Android
SD
67.28
61.13
138.51
0.98
5.20
10.10
14.93
6.62
15.12
Mean
591.71
537.68
3113.31
17.46
41.22
197.16
283.73
136.73
187.69
19.50
6.32
5.58
236.99
0.38
0.23
382.54
100.20
1.45
0.46
64.73
33.78
0.37
0.16
0.13
20.88
0.02
0.11
38.72
7.90
0.15
0.06
5.33
2.54
19.62
6.37
5.62
234.77
0.44
0.25
375.25
96.88
1.62
0.49
63.46
33.65
0.38
0.18
0.11
20.05
0.03
0.12
37.58
7.57
0.17
0.06
5.21
2.89
Table 6. Softweg comparative benchmarking
(n = 200) full maguro-userdebug (4.2).
of the tests the SE Android result shows negligible overhead
and is within one standard deviation of the AOSP result.
5.2.2. Softweg performance test. The results for 200 runs
of the Benchmark by Softweg benchmark on both AOSP
and SE Android are shown in Table 6. The memory and
CPU scores should be unaffected by SE Android as they
do not involve any system calls. The graphics scores should
likewise be unaffected by SE Android, measuring the MPix-
els per sec for transparent and opaque image overlays.
For most of the tests, the SE Android result shows neg-
ligible overhead and is within one standard deviation of the
AOSP result. As with AnTuTu, for the ﬁlesystem and SD-
card tests, we expect some small overhead from SE Android
due to the need to create and fetch the extended attributes
for ﬁle security labeling and due to the additional permis-
sion checking performed by SE Android. The ﬁlesystem
write and read tests measured the speed (M/sec) of writing
and reading 1M. The create and delete tests were a mea-
sure of the time (seconds) it took to create or delete 1000
empty ﬁles. These create and delete tests can be viewed as
a worst case overhead for SE Android since the overhead
of extended attribute creation and removal is not amortized
over any real usage of the ﬁle.
6. Related work
There has been an extensive body of research into ex-
tensions to the Android access control model [14, 39, 13,
36, 38, 7, 18, 15, 10, 6]. Most of these extensions, includ-
ing Kirin [14], SAINT [39], TaintDroid [13], Porscha [38],
AppFence [18], IPC Inspection [15], and QUIRE [10] only
attempt to address access control at the Android middleware
layer and provide no solution for the underlying weaknesses
of the Linux DAC mechanism. As any access control model
implemented by the Android middleware is fundamentally
dependent on the kernel layer controls to ensure that the ac-
cess control enforcement is unbypassable, this leaves these
solutions still vulnerable to the root exploits and application
vulnerabilities that were described in Section 4. Of these
solutions, Kirin and SAINT are the closest to our install-
time MAC mechanism, and demonstrated the value of such
controls for Android. Our work provides a foundation for
supporting such install-time policies in Android.
There has also been prior research into integrating and
applying SELinux in embedded systems [9] and in An-
droid [35, 44]. While these efforts have shown how to per-
form basic enablement of SELinux, they have failed to ad-
dress or even identify many of the challenges present in en-
abling the effective use of SELinux in Android, as noted in
Section 2. Our work is the ﬁrst to our knowledge to fully ad-
dress integration of SELinux support into the Android ker-
nel and userspace and to create a suitable SELinux policy
for Android, as described in Section 3. Our work is also the
ﬁrst to our knowledge to concretely demonstrate the bene-
ﬁts of SELinux for Android through the analysis and testing
described in Section 4.
TrustDroid [7] and XManDroid [6] bear the greatest sim-
ilarity to our work, both in their goals and approach. Those
systems provided MAC at both the middleware layer and
at the kernel layer, although the kernel layer solution relied
upon TOMOYO Linux [37] rather than SELinux. SELinux
provides a more natural and complete way of enforcing
data separation goals based on security labels, unlike the
pathname-based security model of TOMOYO. Our work
ﬁlls the gap in mainline Android for kernel layer MAC and
provides a sound base on which these systems and others
like them can build. Our work would in turn beneﬁt from in-
corporating some of the ideas for runtime MMAC that have
been explored in TrustDroid and XManDroid.
demonstrated through a series of case studies of the impact
of SE Android on public Android root exploits and appli-
cation vulnerabilities. The size and performance overhead
imposed by our implementation is evaluated and shown to
be negligible.
Availability
The Security Enhanced Android software is avail-
able from http://selinuxproject.org/page/
SEAndroid. Many of the changes have already been
merged onto the Android Open Source Project (AOSP)
master branch, and work is ongoing to bring the remaining
changes to mainline Android.
Acknowledgments
We thank the rest of the SE Android development team
for their contributions, particularly Joman Chu for his work
on device admin support and James Carter for his work on
SEAndroidManager. We thank William Roberts, Haiqing
Jiang, Joshua Brindle, Bryan Hinton, Tim Radzykewycz,
and the rest of the external SE Android community for their
feedback, code review, and contributions of code and policy
to SE Android. We thank Kenny Root, Jean-Baptiste Queru,
Ying Wang, Matthew Finifter, and the rest of the Google
Android team for shepherding the SE Android changes
through the AOSP submission process, reviewing the code,
integrating it into the AOSP build, and helping to improve
it. We thank the anonymous reviewers of the paper for their
comments.
References
[1] Android Open Source Project.
Android Security
Overview. http://source.android.com/tech/
security/.
[2] Android Open Source Project.
Publishing on Google
Play. http://developer.android.com/guide/
publishing/publishing.html.
[3] Android Open Source Project.
Security and permis-
sions. http://developer.android.com/guide/
topics/security/security.html.
What
[4] Android Open Source Project.
is Android?
7. Summary
This paper explains the need for mandatory access con-
trol (MAC) in Android, identiﬁes the challenges to enabling
the effective use of SELinux in Android and presents how
we overcame these challenges in our SE Android reference
implementation. The beneﬁts of SE Android are concretely
http://developer.android.com/guide/
basics/what-is-android.html.
[5] AnTuTu Labs.
AnTuTu Benchmark.
https:
//play.google.com/store/apps/details?
id=com.antutu.ABenchMark.
[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R.
Sadeghi, and B. Shastry.
Towards Taming Privilege-
Escalation Attacks on Android. In 19th Annual Network &
Distributed System Security Symposium, February 2012.
[7] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi,
and B. Shastry. Practical and Lightweight Domain Isolation
In 1st ACM CCS Workshop on Security and
on Android.
Privacy in Mobile Devices (SPSM’11), October 2011.
[8] J. Carter. Using GConf as an Example of How to Create an
Userspace Object Manager. In 3rd Annual SELinux Sympo-
sium, pages 25–32, March 2007.
[9] R. Coker. Porting NSA Security Enhanced Linux to Hand-
held Devices. In 2003 Linux Symposium, July 2003.
[10] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach.
QUIRE: Lightweight Provenance for Smart Phone Operat-
ing Systems. In 20th USENIX Security Symposium, August
2011.
[11] J. Donenfeld. Linux Local Privilege Escalation via SUID
http://blog.zx2c4.com/
/proc/pid/mem Write.
749.