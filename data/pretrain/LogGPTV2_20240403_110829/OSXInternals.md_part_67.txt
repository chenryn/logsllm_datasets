library (libbsm.dylib) for this purpose, which in turn use the audit() system call, a function
that allows user-space applications to explicitly submit audit records to the kernel for inclusion
in the audit log.
It parses the audit event file (/etc/security/audit_event), which contains descriptions of
auditable events on the system, mapping an audit event number to a name (such as AUE_OPEN),
a description (such as "open(2)attr only", and a class name (such as "fa"). The classes are
described in /etc/security/audit_classinformation in this file must conform with the audit
class information known to the kernel. For each event line in audit_event, auditd registers
the class mapping by invoking the A_SETCLASS command through the auditon() system call.
It finally enters its server loop, waiting for messages to arrive on either of the control or signal
ports.
The in-kernel audit record structure (struct kaudit_record) for a thread resides in the thread's
corresponding utHRead structure (struct uthread).
// bsd/sys/user.h
struct uthread {
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 93 of 137
...
struct kaudit_record *uu_ar;
...
};
// bsd/bsm/audit_kernel.h
struct kaudit_record {
struct audit_record k_ar; // standard audit record
u_int32_t k_ar_commit; // AR_COMMIT_KERNEL, AR_COMMIT_USER
void *k_udata; // opaque user data, if any
u_int k_ulen; // user data length
struct uthread *k_uthread; // thread that we are auditing
TAILQ_ENTRY(kaudit_record) k_q; // queue metadata
};
The kernel allocates and initializes a new audit record for a thread by calling audit_new()
[bsd/kern/kern_audit.c] when the first auditable event occurs. This is typically when either a BSD
or Mach system call is invoked. However, this can also occur during the audit() system call, which,
as we saw earlier, is used by a user program to submit an audit record. Since the audit() system call
itself is not audited, it is possible for a uthread structure's uu_ar field to be NULL if no auditable
event has occurred so far for that thread. Various portions of the kernel code use audit macros to add
information to a thread's existing audit record. These macros resolve to conditional code that operates
only if auditing is currently enabled. Figure 636 shows an example of audit macros.
Figure 636. Audit macros in the kernel and how they are used
// bsd/bsm/audit_kernel.h
#define AUDIT_ARG(op, args...) do { \
if (audit_enabled) \
audit_arg_ ## op (args); \
} while (0)
#define AUDIT_SYSCALL_ENTER(args...) do { \
if (audit_enabled) { \
audit_syscall_enter(args); \
} \
} while (0)
// Additional check for uu_ar since it is possible that an audit record
// was begun before auditing was disabled
#define AUDIT_SYSCALL_EXIT(error, proc, uthread) do { \
if (audit_enabled || (uthread->uu_ar != NULL)) { \
audit_syscall_exit(error, proc, uthread); \
} \
} while (0)
// bsd/dev/ppc/systemcalls.c
void
unix_syscall(struct savearea *regs)
{
...
AUDIT_SYSCALL_ENTER(code, proc, uthread);
// call the system call handler
error = (*(callp->sy_call))(proc, (void *uthread->uu_arg,
&(uthread->uu_rval[0]));
AUDIT_SYSCALL_EXIT(error, proc, uthread);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 94 of 137
...
}
// bsd/vfs/vfs_syscalls.c
static int
open1(...)
{
...
AUDIT_ARG(fflags, oflags);
AUDIT_ARG(mode, vap->va_mode);
...
}
When audit_syscall_enter() [bsd/kern/kern_audit.c] is called, the current uthread
structure's uu_ar field will be NULL. If the event corresponding to the current system call and its
arguments is auditable, audit_syscall_enter() allocates an audit record and sets uu_ar to point to
it. As long as the system call remains in the kernel, any audit_arg_xxx() functions that may be
called by kernel code will append information to the thread's audit record. When the system call
finishes, audit_syscall_exit() [bsd/kern/kern_audit.c] commits the record by calling
audit_commit() [bsd/kern/kern_audit.c] and sets the uu_ar field to NULL. audit_commit()
inserts the record in a queue of audit records that are ready to be written to disk. The queue is serviced
by the audit worker thread, which, as we saw earlier, is created when auditd first specifies a log file
pathname to the kernel. The audit worker thread writes audit records to the log file by calling
audit_write() [bsd/kern/kern_audit.c], which directly writes to the log file's vnode (the
audit_vp variable) through the vn_rdwr() kernel function. Auditing is disabled by passing a NULL
log file pathname, which results in the audit_vp variable being set to NULL. The worker thread
checks for a valid audit_vp in each iteration of its loopif audit_vp is NULL, it sets audit_enabled
to 0, causing the various audit logger functions to be ineffective.
Other responsibilities of the worker thread include sending trigger messages to auditd if the log file
becomes full or if the amount of free disk space on the volume containing the log file falls below a
configured threshold.
6.8.7. Fine-Grained Kernel Event Tracing (kdebug)
The Mac OS X kernel provides a fine-grained kernel-tracing facility called kdebug, which can be
enabled or disabled on a per-process basis. The sc_usage, fs_usage, and latency command-line
tools use the kdebug facility. sc_usage displays ongoing system calls and various types of page
faults. The output of fs_usage is restricted to system calls and page faults related to file system
activity. latency monitors and displays scheduling and interrupt latency statistics. The kdebug
facility also allows the CHUD toolkit to register a callback functionkdebug_chudhook()that will be
invoked each time kdebug logging is attempted, regardless of whether kdebug tracing is enabled or
not. Finally, the kdebug facility can be enabled to collect entropy and therefore can be used as a
source of entropy for random number generation. The Mac OS X Security Server uses the kdebug
facility to sample entropy.
Specifically, the kdebug facility can be enabled to operate in modes corresponding to one or more of
the following mode bits at any given time: KDEBUG_ENABLE_TRACE, KDEBUG_ENABLE_ENTROPY, and
KDEBUG_ENABLE_CHUD. The kdebug_enable global variable in the kernel holds these bits.
6.8.7.1. kdebug Tracing
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 95 of 137
The kdebug facility categorizes traced operations into classes, subclasses within classes, and codes
within subclasses. Moreover, if a traced operation marks the beginning or end of a kernel function, its
trace is tagged with DBG_FUNC_START and DBG_FUNC_END function qualifiers, respectively.
Nonfunction traces are tagged with DBG_FUNC_NONE. Figure 637 shows an excerpt from kdebug's
hierarchy of traced operation classification. Each trace record has a 32-bit debug code whose bits
represent the operation's class, subclass, code, and function qualifier. The entire hierarchy is defined
in bsd/sys/kdebug.h.
Figure 637. The composition of a debug code in the kdebug facility
[View full size image]
Code throughout the kernel submits operations for kdebug tracing using macros that resolve to either
kernel_debug() or kernel_debug1(), both of which are implemented in bsd/kern/kdebug.c.
// bsd/sys/kdebug.h
#define KERNEL_DEBUG_CONSTANT(x,a,b,c,d,e) \
do { \
if (kdebug_enable) \
kernel_debug(x,a,b,c,d,e); \
} while(0)
#define KERNEL_DEBUG_CONSTANT1(x,a,b,c,d,e) \
do { \
if (kdebug_enable) \
kernel_debug1(x,a,b,c,d,e); \
} while(0)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 96 of 137
...
kernel_debug1() is used during an execve() operation that follows a vfork()
operationkernel_debug1() is a special version of kernel_debug() that receives the thread's identity
as an argument instead of calling current_thread(), which kernel_debug() uses.
current_thread() cannot be used in this particular case since it will return the parent thread.
Let us see how the BSD system call handler uses these macros. As shown in Figure 638, the handler
submits trace records soon after starting and just before finishing. Note that it skips record generation
if the system call number is 180 (SYS_kdebug_trace), which corresponds to the kdebug_trace()
system call. Similar conceptually to the audit() system call, this call can be used by user programs
to explicitly submit a trace record to the kdebug facility. As we will shortly see, the BSDDBG_CODE()
macro computes a debug code given a subclass and a code within that subclass.
Figure 638. kdebug tracing in the BSD system call handler
// bsd/dev/ppc/systemcalls.c
void
unix_syscall(struct savearea *regs)
{
...
unsigned int cancel_enable;
flavor = (((unsigned int)regs->save_r0) == 0) ? 1 : 0;
if (flavor)
code = regs->save_r3;
else
code = regs->save_r0;
if (kdebug_enable && (code != 180)) {
if (flavor) // indirect system call
KERNEL_DEBUG_CONSTANT(
BSDDBG_CODE(DBG_BSD_EXCP_SC, code) | DBG_FUNC_START,
regs->save_r4, regs->save_r5,
regs->save_r6, regs->save_r7, 0);
else // direct system call
KERNEL_DEBUG_CONSTANT(
BSDDBG_CODE(DBG_BSD_EXCP_SC, code) | DBG_FUNC_START,
regs->save_r3, regs->save_r4, regs->save_r5,
regs->save_r6, 0);
}
...
// call the system call handler
...
if (kdebug_enable && (code != 180)) {
if (callp->sy_return_type == _SYSCALL_REG_SSIZE_T)
KERNEL_DEBUG_CONSTANT(
BSDDBG_CODE(DBG_BSD_EXCP_SC, code) | DBG_FUNC_END,
error, uthread->uu_rval[1], 0, 0, 0);
else
KERNEL_DEBUG_CONSTANT(
BSDDBG_CODE(DBG_BSD_EXCP_SC, code) | DBG_FUNC_END,
error, uthread->uu_rval[0], uthread->uu_rval[1],
0, 0);
}
thread_exception_return();
/* NOTREACHED */
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 97 of 137
}
The kdebug facility is accessed from user space through KERN_KDEBUG sysctl operations with
CTL_KERN as the top-level sysctl identifier. Examples of supported operations include the following:
Enabling or disabling tracing (KERN_KDENABLE)
Cleaning up the relevant trace buffers (KERN_KDREMOVE)
Reinitializing the tracing facility (KERN_KDSETUP)
Specifying the trace buffer size to the kernel (KERN_KDSETBUF)
Specifying which process IDs to trace (KERN_KDPIDTR)
Specifying which process IDs to exclude (KERN_KDPIDEX)
Specifying trace points of interest to the kernel by class, by subclass, by debug code values, or
by a range of debug code values (KERN_KDSETREG)
Retrieving trace buffer metainformation from the kernel (KERN_KDGETBUF)
Retrieving the trace buffer from the kernel (KERN_KDREADTR)
Note that process IDs can be either selected for or excluded from tracing. In the former case, the
KDBG_PIDCHECK bit is set in the global kdebug-flags kernel variable (kdebug_flags), and the
P_KDEBUG bit is set in the p_flag process structure field of each selected process. Thereafter, any
process for which P_KDEBUG is not set is not traced. In the case of process ID exclusion, the
KDBG_PIDEXCLUDE bit is set instead in kdebug_flags, and the P_KDEBUG bit is set for each excluded
process.
As seen in the examples of supported kdebug operations, trace points of interest can be specified to
the kernel in several ways: through a kdebug class (such as DBG_BSD), a subclass (such as
DBG_BSD_EXCP_SC, which represents BSD system calls), up to four specific debug code values, or a
range of such values. Figure 637 shows the structure of a debug code. The bsd/sys/kdebug.h header
provides macros for constructing a debug code from its constituents.
Let us consider a specific example. Suppose we wish to use the kdebug facility to trace the use of the
chdir() system call. The debug code for chdir() will have DBG_BSD as its class, DBG_BSD_EXP_SC
as its subclass, and the system call's number (SYS_chdir) as its code. We can use the BSDDBG_CODE()
macro to compute the code.
// bsd/sys/kdebug.h
#define KDBG_CODE(Class, SubClass, code) (((Class & 0xff) 
#include 
#include 
#include 
#include 
#include 
#include 
struct proc;
// Kernel Debug definitions
#define PRIVATE
#define KERNEL_PRIVATE
#include 
#undef KERNEL_PRIVATE
#undef PRIVATE
// Configurable parameters
enum {
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 99 of 137
KDBG_BSD_SYSTEM_CALL_OF_INTEREST = SYS_chdir,
KDBG_SAMPLE_SIZE = 16384,
KDBG_SAMPLE_INTERVAL = 100000, // in microseconds
};
// Useful constants
enum {
KDBG_FUNC_MASK = 0xfffffffc, // for extracting function type
KDBG_CLASS_MASK = 0xff000000, // for extracting class type
KDBG_CLASS_SHIFT = 24 // for extracting class type
};
// Global variables
int exiting = 0; // avoid recursion in exit handlers
size_t oldlen; // used while calling sysctl()
int mib[8]; // used while calling sysctl()
pid_t pid = -1; // process ID of the traced process