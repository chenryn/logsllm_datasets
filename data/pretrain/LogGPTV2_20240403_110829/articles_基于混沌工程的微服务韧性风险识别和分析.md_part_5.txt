### 有向边输出
29. `path_strings.push(new_string);` // 将缓存链路添加到最终输出中
30. `_build_path_string(child.children, new_string);` 
// 递归调用链路生成方法以输出所有可能的链路

### 案例研究及结果分析
为了验证本文提出的微服务韧性风险识别和分析方法的有效性，我们选择了文献[77]中提出的微服务基准测试套件 Sock-Shop（https://microservices-demo.github.io/）作为实验对象。案例研究旨在验证以下两个关键问题：
1. 提出的韧性风险识别方法是否能够自动地识别目标系统的韧性风险？
2. 提出的韧性风险分析方法是否能有效分析目标系统在发生韧性风险时的因果影响链路？

#### 4.1 目标系统与实验环境
图 9 显示了 Sock-Shop 的系统架构。该系统由前端 (front-end)、订单服务 (order)、支付服务 (payment)、用户服务 (user)、商品详情服务 (catalogue)、购物车服务 (cart) 以及邮寄服务 (shipping) 组成，每个微服务都可以独立运行并拥有独立的数据库。为了体现微服务技术的异构性 [10]，Sock-Shop 中不同微服务的实现语言和使用的数据库各不相同。微服务之间的通信主要通过 HTTP 协议，并采用了 RESTful 接口设计风格。

**图 9: Sock-Shop 系统架构**

图 10 展示了案例研究中的 Sock-Shop 部署环境。部署环境包括一个控制服务器和一个由一个 Master 节点及三个 Worker 节点组成的 Kubernetes 容器集群管理平台（https://kubernetes.io/）。Sock-Shop 系统被部署在 Kubernetes 集群上，每个微服务都在一个或多个容器中运行。控制服务器负责自动化实现韧性风险识别方法。其中，Jenkins（https://jenkins.io/）容器负责 Sock-Shop 系统的自动部署和混沌实验，Locust（https://www.locust.io/）框架用于模拟压力场景，Chaos-Toolkit（https://chaostoolkit.org/）工具则用于实现系统环境扰动。部署环境中的各个服务器配置相同，具体配置见表 1。容器均按默认配置部署，未对资源分配进行额外设置，因此 Worker 节点上的容器资源分配模式采用默认的按需分配方式。

**图 10: Sock-Shop 部署环境**

**表 1: 部署环境的服务器配置**

| 配置 | 参数 |
| --- | --- |
| 操作系统 | Ubuntu Server 16.04 |
| CPU | Intel Xeon E5-2620 * 2 |
| 内存 | 64GB DDR4 |
| 磁盘 | 3TB |
| 网卡 | 1000Mb/s |

上述目标系统和实验环境满足了本文第 2.1 节中提出的所有系统前提：自动化部署组件 Jenkins 和 Sock-Shop 自身提供的 Kubernetes 部署配置文件满足了条件 (1) 的系统自动化构建能力；Sock-Shop 系统已处于可发布运行状态，因此满足条件 (2)；Kubernetes 集成的时序数据收集工具 Prometheus 使目标系统满足了条件 (3)。案例研究将首先按照条件 (4) 和 (5) 提出的假设对目标系统进行韧性风险识别。

#### 4.2 Sock-Shop 的韧性风险识别
为了验证研究问题 1，本案例研究将根据本文第 2 节提出的韧性风险识别方法寻找 Sock-Shop 系统中的韧性风险。

##### 4.2.1 韧性风险识别
在 Sock-Shop 中，所有用户操作均为网页端点击操作，因此系统服务均为事务性的 HTTP 服务。本案例研究中，服务平均响应时间和响应成功率被作为所有服务的基础性能指标。表 2 展示了针对 Sock-Shop 各服务所设计的服务性能指标。

**表 2: Sock-Shop 的服务性能指标**

| 服务 | 服务性能指标名称 | 描述 |
| --- | --- | --- |
| 全部服务 | 响应时间 | 从用户请求发出到收到系统回复的时间 |
| 全部服务 | 响应成功率 | 单位时间内服务返回正常系统回复的成功率 |
| 订单服务 | 每秒成功交易量 | 每秒成功完成订单的数量 |
| 商品信息服务 | 每秒执行事务数量 | 服务每秒处理的请求数量 |
| 用户登录服务 | 登录成功率 | 单位时间内所有用户登录请求中登录成功的比率 |

案例研究使用的是实验环境而非实际生产环境，且 Sock-Shop 为开源系统，在性能和容错方面没有严格的设计。通过观察引入各种系统环境扰动后的服务降级情况，并参考 ETSI 标准中的韧性测试建议值 [78]，我们适当放宽了 Sock-Shop 中所有系统服务的响应时间和响应成功率这两项服务性能指标的基线值，分别为 5 秒和 90%。通过对目标系统的压力测试发现，在没有引入系统环境扰动的情况下，目标系统每分钟最多能接受约 200 个用户请求。因此，以每分钟 200 个请求的系统峰值和 Sock-Shop 整体业务流程为依据，我们设计了表 3 中的系统压力场景，并在这些压力场景下收集系统服务性能数据作为系统性能基线。压力场景中，用户操作的模拟是通过编写脚本访问对应的 HTTP 接口实现的。用户行为模拟脚本会被压力测试工具 Locust 在每分钟并行触发，以实现系统环境压力的模拟。

**表 3: Sock-Shop 的压力场景**

| 压力场景 | 压力场景说明 |
| --- | --- |
| 普通场景 | 每分钟有 50 个用户完成登录→查看商品→添加商品至购物车→提交订单的过程。浏览及添加至购物车的商品数量为 1~5 之间的随机值 |
| 高压力普通场景 | 每分钟有 100 个用户完成登录→查看商品→添加商品至购物车→提交订单的过程。浏览及添加至购物车的商品数量为 1~5 之间的随机值 |
| 促销活动 | 每分钟有 200 个用户提交订单的请求 |
| 促销活动前期 | 每分钟有 200 个用户完成登录→查看商品→添加商品至购物车的过程 |

在设立 Sock-Shop 各服务性能指标的韧性目标过程中，平均响应时间和响应成功率这两项通用服务性能指标的韧性目标包括性能降级程度和降级恢复时间两个维度。对于不同服务各自的服务性能指标，韧性目标的维度选取将考虑各个服务的业务特点。表 4 列出了 Sock-Shop 各服务的具体韧性目标。为了分析混沌实验次数与识别的韧性风险数量之间的关系，我们在案例研究中分别进行了 10 次、20 次、50 次和 100 次混沌实验。考虑到每次混沌实验中 Sock-Shop 的自动构建、部署过程和自动销毁过程，每次混沌实验的最大时长被设置为 30 分钟。混沌实验中引入的系统环境扰动所涉及的系统资源及相应的系统环境扰动事件见表 5。

**表 4: Sock-Shop 各服务的韧性目标**

| 服务 | 服务性能指标 | 性能降级程度 | 降级恢复时间 | 降级损失 |
| --- | --- | --- | --- | --- |
| 全部服务 | 响应时间 | 10 秒 | 5 秒 | - |
| 全部服务 | 响应成功率 | 20% | 5 秒 | - |
| 订单服务 | 每秒成功交易量 | - | - | 500 交易 |
| 商品信息服务 | 每秒执行事务数量 | - | 5 秒 | - |
| 用户登录服务 | 登录成功率 | 20% | - | - |

**表 5: 各个系统资源类型的系统环境扰动事件**

| 系统资源类型 | 系统环境扰动事件 |
| --- | --- |
| CPU | CPU 资源占用至 100% |
| 内存 | 内存占用至 100% |
| 磁盘 | 磁盘 I/O 阻塞 |
| 网络 | 包传递延时/包损坏 |
| 进程 | 进程被杀死 |
| 容器 | 容器被关闭 |
| 服务器 | 服务器宕机 |

在混沌实验过程中，服务性能数据将通过两种方式收集：① 对于响应时间和响应成功率等通用服务性能数据，使用监控工具 Prometheus（https://prometheus.io/）组件进行数据收集；② 对于各个服务中针对业务的服务性能数据，利用系统压力模拟工具在压力模拟的同时收集各个请求的返回结果，并对返回结果进行统计得到实时的服务性能数据。同时，系统其他各项系统资源的性能数据也将通过 Heapster 收集。