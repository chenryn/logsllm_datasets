有向边输出
29. path_strings.push(new_string); //在最终输出中添加缓存链路
30. _build_path_string(child.children,new_string);
//递归调用链路生成方法以输出所有可能的链路
4 案例研究以及结果分析
为了验证本文提出的微服务韧性风险识别和分析方法的有效性,本文选取了由文献[77]所提出的微服务基
线测试套件 Sock-Shop(https://microservices-demo.github.io/)作为实验对象,对本文提出的方法进行案例验证.案
例研究中将验证以下研究问题.
(1) 本文提出的韧性风险识别方法是否能够自动地识别出目标系统的韧性风险?
(2) 本文提出的韧性风险分析方法是否能够有效地分析出目标系统在发生韧性风险时因果的影响链路?
4.1 目标系统以及实验环境
图 9 为 Sock-Shop 的系统架构图.整个 Sock-Shop 系统由前端(front-end)、订单服务(order)、支付服务
(payment)、用户服务(user)、商品详情服务(catalogue)、购物车服务(cart)以及邮寄服务(shipping)这几个微服务
组成,每一个微服务均可以独立运行且拥有独立的数据库.为了保证微服务技术异构性[10]的特点,Sock-Shop 中
不同微服务的实现语言以及使用的数据库各不相同.Sock-Shop 中,微服务之间的通信以 HTTP 通信为主,并使
用了RESTful的接口设计风格.
Fig.9 Sock-Shop architecture
图9 Sock-Shop系统架构
图10为案例研究中Sock-Shop的部署环境图,整个部署环境将由一个控制服务器和由一个Master节点以
及3个Worker节点所构建的容器集群管理平台Kubernetes(https://kubernetes.io/)组成.Sock-Shop系统被部署在
Kubernetes集群上,Sock-Shop中的每一个微服务均在一个或多个容器上部署.控制服务器负责韧性风险识别方
法的自动化实现.其中,Sock-Shop 系统的自动部署和混沌实验的进行由部署在控制服务器上的 Jenkins(https://
jenkins.io/)容器完成,压力测试框架 Locust(https://www.locust.io/)负责 Sock-Shop 应用压力场景的模拟,混沌测
试工具 Chaos-Toolkit(https://chaostoolkit.org/)负责系统环境扰动的实现.部署环境的各个服务器配置相同,具体
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1243
配置见表1.部署环境中的容器均按默认配置部署,并未对各容器的资源分配情况进行额外设置,因此,Worker节
点上运行的各容器资源分配模式均采用容器默认的按需分配方式.
Fig.10 Sock-Shop system deployment environment
图10 Sock-Shop的部署环境
Table 1 Server configuration of the deployment environment
表1 部署环境的服务器配置
配置 参数
操作系统 Ubuntu Server 16.04
CPU Intel Xeon E5-2620*2
内存 64GB ddr4
磁盘 3TB
网卡 1 000Mb/s
上述目标系统和实验环境满足了本文第2.1节中所提出的各项系统前提:自动化部署组件Jenkins与Sock-
Shop本身提供的Kubernetes部署配置文件满足了条件(1)的系统自动化构建能力;Sock-Shop系统已处于可发布
运行的状态因此满足条件(2);Kubernetes本身集成的时序数据收集工具Prometheus使目标系统满足了条件(3).
案例研究将首先按照条件(4)、条件(5)提出的假设下对目标系统进行韧性风险识别.
4.2 Sock-Shop的韧性风险识别
为了验证研究问题1,本案例研究中将根据本文第2节所提出的韧性风险识别方法寻找Sock-Shop系统中
的韧性风险.
4.2.1 韧性风险识别
在Sock-Shop中,所有的用户操作均为网页端的点击操作,因此,Sock-Shop的系统服务均为事务性的HTTP
服务.在本案例研究中,服务平均响应时间(response time)以及响应成功率(success rate)被作为所有服务的基础
性能指标.Sock-Shop的核心服务的服务性能指标将根据服务的业务关注点设立.表2展示了在案例研究中针对
Sock-Shop系统各服务所设计的服务性能指标.
Table 2 Service performance indicators of Sock-Shop
表2 Sock-Shop的服务性能指标
服务 服务性能指标名称 描述
全部服务 响应时间 从用户请求发出到收到系统回复花费的时间
− 响应成功率 单位时间服务返回正常系统回复的成功率
订单服务 每秒成功交易量 每秒成功完成订单的数量
商品信息服务 每秒执行事务数量 服务每秒处理的请求数量
用户登录服务 登录成功率 单位时间内所有用户登录请求中登录成功的比率
1244 Journal of Software 软件学报 Vol.32, No.5, May 2021
案例研究中使用的部署环境是实验环境而非实际生产环境,且Sock-Shop本身为开源系统并未对性能和容
错方面有严格的设计.通过观察在实验环境中引入各种系统环境扰动后环境的服务降级情况,并参考ETSI标准
中韧性测试的建议值[78],对 Sock-Shop 中所有的系统服务的响应时间以及响应成功率这两项服务性能指标的
基线值的设置也相对实际生产环境适当放宽,分别为5s以及90%.通过对目标系统的压力测试发现:在没有引入
系统环境扰动的情况下,目标系统每分钟能最多能接受约 200 个用户请求.因此,以每分钟 200 个请求的系统峰
值和Sock-Shop整体的业务流程为依据,案例研究中设计了表3中的系统压力场景,并把在这些压力场景下收集
到的系统服务性能数据作为系统性能基线.压力场景中,对用户操作的模拟是通过编写脚本访问对应 HTTP 接
口实现.用户行为模拟脚本会被压力测试工具Locust在每分钟并行地触发,以实现系统环境压力的模拟.
Table 3 Workload scenarios of Sock-Shop
表3 Sock-Shop的压力场景
压力场景 压力场景说明
每分钟有50个用户完成登录→查看商品→添加商品至购物车→提交订单的
普通场景
过程.其中,浏览以及添加至购物车的商品数量为1~5之间的一个随机值
普通场景 每分钟有100个用户完成登录→查看商品→添加商品至购物车→提交订单的
(高压力) 过程.其中,浏览以及添加至购物车的商品数量为1~5之间的一个随机值
促销活动 每分钟有200个用户提交订单的请求
促销活动前期 每分钟有200个用户完成登录→查看商品→添加商品至购物车的过程
在对表2中的Sock-Shop各服务性能指标设立韧性目标的过程中,平均响应时间和响应成功率这两项通用
服务性能指标的韧性目标设立,包含性能降级程度以及降级恢复时间这两个维度.对于不同服务各自的服务性
能指标,服务韧性目标的维度选取将考虑到各个服务各自的业务特点.表4为Sock-Shop各服务性能指标的具体
服务韧性目标.为了分析混沌实验次数与识别的韧性风险数量之间的关系,案例研究中,对目标系统分别以混沌
实验次数10次、20次、50次、100次进行韧性风险识别过程.考虑到每次混沌实验中Sock-Shop的自动构建、
部署过程和自动销毁过程,每次混沌实验的实验最大时长被设置为30分钟.对Sock-Shop混沌实验中的系统压
力场景的模拟将随机选择表 3 中的一个压力场景.在混沌实验中引入的系统环境扰动所涉及的系统资源以及
系统资源对应的系统环境扰动事件见表5.
Table 4 Service resilience goals of Sock-Shop
表4 Sock-Shop各服务的韧性目标
服务 服务性能指标 性能降级程度 降级恢复时间 降级损失
全部服务 响应时间 10s 5s −
− 响应成功率 20% 5s −
订单服务 每秒成功交易量 − − 500交易
商品信息服务 每秒执行事务数量 − 5s −
用户登录服务 登录成功率 20% − −
Table 5 System environment disruptions events of different system resource types
表5 各个系统资源类型的系统环境扰动事件
系统资源类型 系统环境扰动事件
CPU CPU资源占用至100%
内存 内存占用至100%
磁盘 磁盘I/O阻塞
网络 包传递延时/包损坏
进程 进程被杀死
容器 容器被关闭
服务器 服务器宕机
混沌实验过程中各个服务的服务性能数据将通过两个方式收集:① 对于响应时间和响应成功率等通用的
服务性能数据,使用监控工具 Prometheus(https://prometheus.io/)组件进行数据收集;② 对于各个服务中针对业
务的服务性能数据,利用系统压力模拟工具在压力模拟的同时收集各个请求的返回结果,对返回结果进行统计
殷康璘 等:基于混沌工程的微服务韧性风险识别和分析 1245
得到实时的服务性能数据.在收集服务性能数据的同时,系统其他各项系统资源的性能数据也将通过 Heapster