:::
使用 Storage 系统角色，您可以使用 Red Hat Ansible Automation Platform 在
RHEL 上配置 RAID 卷。在本小节中，您将了解如何使用可用参数设置 Ansible
playbook，以配置 RAID 卷以满足您的要求。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署 `存储`{.literal} 解决方案的系统上安装 Red Hat Ansible
    Automation Platform。
    :::
-   您已在要运行 playbook 的系统上安装了 `rhel-system-roles`{.literal}
    软件包。
-   您有一个清单文件详细描述了您要使用存储系统角色部署 RAID 卷的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容创建一个新的 `playbook.yml`{.literal} 文件：
    ``` screen
    - hosts: all
      vars:
        storage_safe_mode: false
        storage_volumes:
          - name: data
            type: raid
            disks: [sdd, sde, sdf, sdg]
            raid_level: raid0
            raid_chunk_size: 32 KiB
            mount_point: /mnt/data
            state: present
      roles:
        - name: rhel-system-roles.storage
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    设备名称在某些情况下可能会改变，例如：当您在系统中添加新磁盘时。因此，为了避免数据丢失,我们不建议在
    playbook 中使用特定的磁盘名称。
    :::
2.  可选。验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其他资源**
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#configuring-lvm-pool-with-raid-using-storage-system-role_managing-local-storage-using-rhel-system-roles}使用存储系统角色使用 RAID 配置 LVM 池 {.title}
:::
使用 Storage 系统角色，您可以使用 Red Hat Ansible Automation Platform 在
RHEL 上使用 RAID 配置 LVM 池。在本小节中，您将了解如何使用可用参数设置
Ansible playbook，以配置使用 RAID 的 LVM 池。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要部署 `存储`{.literal} 解决方案的系统上安装 Red Hat Ansible
    Automation Platform。
    :::
-   您已在要运行 playbook 的系统上安装了 `rhel-system-roles`{.literal}
    软件包。
-   您有一个清单文件详细描述了您要使用存储系统角色使用 RAID 配置 LVM
    池的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容创建一个新的 `playbook.yml`{.literal} 文件：
    ``` screen
    - hosts: all
      vars:
        storage_safe_mode: false
        storage_pools:
          - name: my_pool
            type: lvm
            disks: [sdh, sdi]
            raid_level: raid1
            volumes:
              - name: my_pool
                size: "1 GiB"
                mount_point: "/mnt/app/shared"
                fs_type: xfs
                state: present
      roles:
        - name: rhel-system-roles.storage
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    要使用 RAID 创建 LVM 池，您必须使用 `raid_level`{.literal}
    参数来指定 RAID 类型。
    :::
2.  Optional.验证 playbook 语法。
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其他资源**
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    文件。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#example-ansible-playbook-to-compress-and-deduplicate-a-vdo-volume-on-lvm-using-the-storage-rhel-system-role_managing-local-storage-using-rhel-system-roles}使用存储 RHEL 系统角色在 LVM 中压缩和重复数据删除 VDO 卷的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook 应用存储 RHEL
系统角色，以使用 Virtual Data
Optimizer(VDO)卷为逻辑卷管理器卷(LVM)启用压缩和重复数据删除。
::: example
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#idm139895601273216}
**例 2.11. 在 `myvg`{.literal} 卷组中创建 `mylv1`{.literal} LVM VDO 卷的
playbook**
::: example-contents
``` screen
---
- name: Create LVM VDO volume under volume group 'myvg'
  hosts: all
  roles:
    -rhel-system-roles.storage
  vars:
    storage_pools:
     - name: myvg
       disks:
         - /dev/sdb
       volumes:
         - name: mylv1
           compression: true
           deduplication: true
           vdo_pool_size: 10 GiB
           size: 30 GiB
           mount_point: /mnt/app/shared
```
:::
:::
在本例中，`compression`{.literal} 和 `deduplication`{.literal} 池被设为
true，这指定使用 VDO。下面描述了这些参数的用法：
::: itemizedlist
-   `deduplication`{.literal} 用于去除存储在存储卷上的重复数据。
-   compression 用于压缩存储在存储卷上的数据，从而提高存储量。
-   vdo_pool_size 指定卷在设备上占用的实际大小。VDO 卷的虚拟大小由
    `size`{.literal} 参数设置。注：由于 Storage 角色使用 LVM
    VDO，每个池只能有一个卷使用压缩和重复数据删除。
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#proc_creating-a-luks-encrypted-volume-using-the-storage-role_managing-local-storage-using-rhel-system-roles}使用存储系统角色创建 LUKS 加密卷 {.title}
:::
您可以通过运行 Ansible playbook，使用 Storage 角色创建并配置使用 LUKS
加密的卷。
::: itemizedlist
**先决条件**
-   您已在要运行 playbook 的系统中安装了 Red Hat Ansible Engine。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    您不必在要创建卷的系统中安装 Red Hat Ansible Automation Platform。
    :::
-   Ansible 控制器上您已安装了 `rhel-system-roles`{.literal} 软件包。
-   您有一个清单文件详细描述了您要使用存储系统角色部署 LUKS
    加密卷的系统。
:::
::: orderedlist
**流程**
1.  使用以下内容创建一个新的 `playbook.yml`{.literal} 文件：
    ``` screen
    - hosts: all
      vars:
        storage_volumes:
          - name: barefs
            type: disk
            disks:
             - sdb
            fs_type: xfs
            fs_label: label-name
            mount_point: /mnt/data
            encryption: true
            encryption_password: your-password
      roles:
       - rhel-system-roles.storage
    ```
2.  可选：验证 playbook 语法：
    ``` screen
    # ansible-playbook --syntax-check playbook.yml
    ```
3.  在清单文件上运行 playbook:
    ``` screen
    # ansible-playbook -i inventory.file /path/to/file/playbook.yml
    ```
:::
::: itemizedlist
**其他资源**
-   `/usr/share/ansible/roles/rhel-system-roles.storage/README.md`{.literal}
    file
:::
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#example-ansible-playbook-to-express-pool-volume-sizes-as-percentage-using-the-storage-rhel-system-role_managing-local-storage-using-rhel-system-roles}使用 Storage RHEL 系统角色以百分比表示池卷大小的 Ansible playbook 示例 {.title}
:::
本节提供了一个 Ansible playbook 示例。此 playbook
应用存储系统角色，以表达作为池总大小的百分比的逻辑卷管理器卷(LVM)卷大小。
::: example
[]{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#idm139895615660368}
**例 2.12. 将卷大小表示为池总大小百分比形式的 playbook**
::: example-contents
``` screen
---
- name: Express volume sizes as a percentage of the pool's total size
  hosts: all
  roles
    - rhel-system-roles.storage
  vars:
    storage_pools:
    - name: myvg
      disks:
        - /dev/sdb
      volumes:
        - name: data
          size: 60%
          mount_point: /opt/mount/data
        - name: web
          size: 30%
          mount_point: /opt/mount/web
        - name: cache
          size: 10%
          mount_point: /opt/cache/mount
```
:::
:::
这个示例将 LVM
卷的大小指定为池大小的百分比，例如：\"60%\".另外，您还可以将卷的大小指定为人类可读的文件系统大小形式的池大小的百分比，如
\"10g\" 或 \"50 GiB\"。
:::
::: section
::: titlepage
# []{#managing-local-storage-using-rhel-system-roles_managing-file-systems.html#_additional_resources}其他资源 {.title}
:::
::: itemizedlist
-   `/usr/share/doc/rhel-system-roles/storage/`{.literal}
-   `/usr/share/ansible/roles/rhel-system-roles.storage/`{.literal}
:::
:::
:::
[]{#mounting-nfs-shares_managing-file-systems.html}
::: chapter
::: titlepage
# []{#mounting-nfs-shares_managing-file-systems.html#mounting-nfs-shares_managing-file-systems}第 3 章 挂载 NFS 共享 {.title}
:::
作为系统管理员，您可以在您的系统上挂载远程 NFS 共享来访问共享数据。
::: section
::: titlepage
# []{#mounting-nfs-shares_managing-file-systems.html#introduction-to-nfs_mounting-nfs-shares}NFS 简介 {.title}
:::
这部分解释了 NFS 服务的基本概念。
网络文件系统(NFS)允许远程主机通过网络挂载文件系统，并像它们挂载在本地那样与这些文件系统进行交互。这可让您将资源整合到网络的集中服务器中。
NFS 服务器参考 `/etc/exports`{.literal}
配置文件，来确定是否允许客户端访问任何导出的文件系统。一旦被验证，所有文件和目录操作都对用户有效。
:::
::: section
::: titlepage
# []{#mounting-nfs-shares_managing-file-systems.html#supported-nfs-versions_mounting-nfs-shares}支持的 NFS 版本 {.title}
:::