InstallShield Limited Edition提供了一个简单的向导，可以根据应用程序信息（名称、
网站、版本号）创建安装程序包；设置安装需求（支持哪些操作系统，以及安装过程需要
计算机上已经安装哪些软件）；创建应用程序文件及“开始”菜单和桌面上的快捷方式；设
置注册表项。还可以选择提示用户同意许可协议。
如果只需要这些功能，不需要在安装过程中显示自定义对话框，那么InstallShield
Limited Edition就可以作为一个不错的部署解决方案。否则，就需要安装另外一个产品，
例如，InstallShield的完整版本（www.flexerasoftware.com/products/installshield.htm）或者
免费的WiX工具包（http://wix.codeplex.com）。
本章将详细讨论ClickOnce和UWP应用程序的部署。首先讨论ClickOnce。
36.4 ClickOnce
ClickOnce是一种允许应用程序自动更新的部署技术。应用程序发布到共享文件、网
站或CD这样的媒介上。之后，ClickOnce应用程序就可以自动更新，而无需用户的干涉。
ClickOnce还解决了安全权限问题。一般情况下，要安装应用程序，用户需要有管理
员权限。而利用ClickOnce，没有管理员权限的用户也可以安装和运行应用程序。但是，
应用程序将安装到特定用户的目录中。如果有多个用户使用同一个系统，则每个用户都需
要安装该应用程序。
36.4.1 ClickOnce操作
ClickOnce应用程序有两个基于XML的清单文件，其中一个是应用程序的清单，另一
个是部署清单。这两个文件描述了部署应用程序所需的所有信息。
应用程序清单包含应用程序的相关信息，例如，需要的权限、要包括的程序集和其他
依赖项。部署清单包含了应用程序的部署信息，例如，应用程序清单的设置和位置。这些
清单的完整模式在.NET SDK文档中给出。
如前所述，ClickOnce有一些限制。例如，程序集不能添加到GAC文件夹中，以及不
能在注册表中配置Windows服务。在这些情况下，使用Windows 
Installer比较好，但
ClickOnce也适用于许多应用程序。
36.4.2 发布ClickOnce应用程序
ClickOnce需要知道的全部信息都包含在两个清单文件中。为ClickOnce部署发布应用
程序的过程就是生成清单，并把文件放在正确的位置。清单文件可以在Visual Studio中生
成。还可以使用一个命令行工具mage.exe，它还有一个带GUI的版本mageUI.exe。
在Visual Studio 2015中创建清单文件有两种方式。在Project Properties对话框的Publish
选项卡底部有两个按钮，一个是Publish Wizard按钮，另一个是Publish Now按钮。Publish
Wizard按钮要求回答几个关于应用程序的部署问题，然后生成清单文件，把所有需要的文
件复制到部署位置。Publish Now按钮使用在Publish选项卡中设置的值创建清单文件，并
把文件复制到部署位置。
为了使用命令行工具mage.exe，必须传递各个ClickOnce属性的值。使用mage.exe可以
创建和更新清单文件。在命令提示符中输入mage.exe-help，就会显示传递所需值的语法。
mage.exe的GUI版本（mageUI.exe）类似于Visual Studio 2015中的Publish选项卡。使
用GUI工具可以创建和更新应用程序清单及部署清单文件。
ClickOnce应用程序会显示在控制面板中“添加/删除程序”对话框对应的小程序内，这
与其他安装的应用程序一样。一个主要区别是用户可以选择卸载应用程序或回滚到以前的
版本。ClickOnce在ClickOnce应用程序缓存中保存以前的版本。
现在开始创建一个ClickOnce应用程序。在此之前，系统中必须安装了IIS，并且必须
以提升的权限启动Visual 
Studio。ClickOnce安装程序会直接发布到本地IIS，而本地IIS是
需要管理员权限的。
在Visual 
Studio中打开ClientWPF项目，选择Project 
Properties对话框的Publish选项
卡，然后单击Publish 
Wizard按钮。第一个屏幕如图36-1所示，它要求指定发布位置。这
里使用本地publish文件夹把包发布到本地文件夹中。
图36-1
  注意： 在Visual Studio的以前版本中，可以直接把ClickOnce包从Visual Studio
安装到当地IIS中。Visual Studio 2015不再是这样。但是，可以在本地文件夹中创建安
装包，并将手动添加到IIS网站。
下一个屏幕询问用户如何安装应用程序：从网站、文件共享或CD-ROM/DVD-ROM
中安装（见图36-2）。这个设置会影响用户如何更新应用程序。
图36-2
第三个屏幕提供了在客户机下线时运行这个应用程序的选项，或只有当客户端系统在
线时才运行这个应用程序的选项（见图36-3）。使用在线选项，应用程序直接从网络位置
运行。使用下线选项，应用程序在本地安装。选择下线选项。
图36-3
在摘要屏幕显示为第四屏幕后，就准备好发布了。一个浏览器窗口会打开，用于安装
应用程序。在以前选择的文件夹中可以找到要安装的应用程序文件，例如，publish\。
在使用ClickOnce安装应用程序之前，下一小节将介绍向导对ClickOnce做了哪些设
置。
36.4.3 ClickOnce设置
两个清单文件都有几个属性，可以在Visual Studio项目设置内的Publish选项卡（如图
36-4所示）中配置它们的许多属性。最重要的属性是应用程序应从什么地方部署。这里使
用了网络共享。
图36-4
Publish选项卡中有一个Application Files按钮，单击它会打开一个对话框，其中列出了
应用程序需要的所有程序集和配置文件（如图36-5所示）。可以改变这个配置；在所有文
件的列表中，使用发布状态指示文件是否应包含在包中。调试符号在默认情况下是空白
的。对于测试场景，可能会添加这些文件。
图36-5
单击Prerequisite按钮会显示与应用程序一起安装的常见必备程序列表。这个必备程序
列表由Microsoft Installer包定义，必须在安装ClickOnce应用程序前安装。在图36-6中，会
发现.NET Framework 4.6被列为一个必备条件，是安装的一部分。可以选择从发布应用程
序的位置上安装必备程序，也可以从供应商的网站上安装必备程序。
图36-6
单击Updates按钮会显示一个对话框（如图36-7所示），其中包含了如何更新应用程
序的信息。当有应用程序的新版本时，可以使用ClickOnce更新应用程序。其选项包括：
每次启动应用程序时检查是否有更新版本，或在后台检查更新版本。如果选择后台选项，
就可以输入两次检查的指定间隔时间。此时可以使用允许用户拒绝或接收更新版本的选
项。它可用于在后台进行强制更新，这样用户就不知道进行了更新。下次运行应用程序
时，会使用新版本替代旧版本。还可以使用另一个位置存储更新文件。这样，原始安装软
件包在一个位置，用于给新用户安装应用程序，而所有的更新版本放在另一个位置上。
图36-7
安装应用程序时，可以让它以在线模式或离线模式运行。在离线模式下，应用程序可
以从“开始”菜单中运行，就好像它是用Windows Installer安装的。在线模式表示应用程序
只能在有安装文件夹的情况下运行。
36.4.4 ClickOnce文件的应用程序缓存
用ClickOnce发布的应用程序不能安装在Program Files文件夹中，它们会放在应用程序
缓存中，应用程序缓存驻留在%LocalAppData%\Apps\2.0文件夹下。控制部署的这个方面
意味着，可以把应用程序的多个版本同时放在客户端PC上。如果应用程序设置为在线运
行，就会保留用户访问过的每个版本。对于设置为本地运行的应用程序，会保留当前版本
和以前的版本。
所以，把ClickOnce应用程序回滚到以前的版本是一个非常简单的过程。如果用户进
入控制面板中“添加/删除程序”对话框对应的小程序，则所显示的对话框将允许删除
ClickOnce应用程序或回滚到以前的版本。管理员可以修改清单文件，使之指向以前的版
本。之后，下次用户运行应用程序时，会检查是否更新版本。应用程序不查找要部署的新
程序集，而是还原以前的版本，但不需要用户的交互。
36.4.5 应用程序的安装
现在，启动应用程序的安装。
把文件从publish文件夹复制到创建包时指定的网络共享。然后在网络共享上启动
Setup.exe。所显示的第一个对话框显示了一个警告（见图36-8）。因为系统不信任测试证
书的颁发机构，所以会显示红色标记。单击More 
Information链接，可以获得证书的更多
信息，并知道应用程序需要完全信任的访问权限。如果信任应用程序，就单击Install按
钮，安装应用程序。将ClickOnce包添加到生产环境之前，可以购买一个可信的证书，添
加到包中。
图36-8
单击Install按钮，应用程序会在本地安装。
安装完成后，在“开始”菜单中都可以找到该应用程序。另外，它还列在控制面板
的“程序和功能”中，在这里也可以卸载它（见图36-9）。
图36-9
36.4.6 ClickOnce部署API
使用ClickOnce设置，可以将应用程序配置为自动检查更新，如前所述，但是通常这
种方法并不可行。可能一些超级用户应该更早得到应用程序的新版本。如果他们对新版本
感到满意，那么也应该向其他用户授予接收更新的权限。在这种场景中，可以使用自己的
用户管理信息数据库，通过编程更新应用程序。
对于使用编程方式进行的更新，可以使用System.Deployment程序集和
System.Deployment名称空间中的类来检查应用程序版本信息及进行更新。下面的代码片
段（代码文件MainWindow.xaml.cs）包含了应用程序中的Update按钮的单击处理程序。它
首先检查ApplicationDeployment类的IsNetwork-Deployed属性，判断应用程序是否是
ClickOnce部署的应用程序。然后，使用CheckForUpdateAsync（）方法检查服务器上由
ClickOnce设置指定的更新目录中是否有新版本可用。收到关于更新的信息后，
CheckForUpdateCompleted事件就会触发。这个事件处理程序的第二个参数（类型为
CheckForUpdate-CompletedEventArgs）包含了关于更新、版本号、是否是强制更新等信
息。如果有更新可用，则通过调用UpdateAsync（）方法自动安装更新（代码文件
ClientWPF/MainWindow.xaml.cs）：
        private void OnUpdate(object sender, RoutedEventArgs e)
        {
          if (ApplicationDeployment.IsNetworkDeployed)
          {
            ApplicationDeployment.CurrentDeployment.CheckForUpdateCompleted +=
            (sender1, e1) =>
            {
            if (e1.UpdateAvailable)
            {
              ApplicationDeployment.CurrentDeployment.UpdateCompleted +=
              (sender2, e2) =>
              {
                MessageBox.Show("Update completed");
              };
              ApplicationDeployment.CurrentDeployment.UpdateAsync();
            }
            else
            {
              MessageBox.Show("No update available");
            }
            };
            ApplicationDeployment.CurrentDeployment.CheckForUpdateAsync();
          }
          else
          {
            MessageBox.Show("not a ClickOnce installation");
          }
        }
使用部署API代码时，可以在应用程序中直接手动测试更新。
36.5 UWP应用程序
安装Windows应用程序则完全不同。对于传统的.NET应用程序，使用xcopy部署来复
制带DLL的可执行文件是一种可行的方法。但是，对于Windows应用程序则不能这么做。
Universal Windows应用程序是需要打包的，这使得应用程序能够放到Windows Store
中被多数人使用。在部署Windows应用程序时，还有另外一种方法，不需要把该应用程序
添加到Windows Store中。这种方法称为旁加载（Sideleading）。在这些选项中，有必要创
建一个应用程序包，所以我们就从创建一个应用程序包开始。
36.5.1 创建应用程序包
Windows Store应用程序包是一个带有.appx文件扩展名的文件，实际上是一个压缩文
件。该文件包含了所有的XAML文件、二进制文件、图片和配置。使用Visual Studio或命
令行工具MakeAppx.exe都可以创建包。
在Windows | Universal类别中使用Visual Studio应用程序模板Blank App （Universal
Windows）创建一个简单的Windows应用程序。示例应用程序的名称是
UniversalWindowsApp。
对于打包过程来说，重要的是Assets文件夹中的图像。Logo、SmallLogo和StoreLogo
文件代表应该用自定义应用程序图标代替的应用程序图标。文件Package.appxmanifest是一
个XML文件，包含了应用程序包所需的所有定义。在Solution Explorer中打开这个文件会
调用Package 
Editor，它包含6个选项卡：Application、Visual 
Assets、Capabilities、
Declarations、Content URIs和Packaging。Packaging选项卡如图36-10所示。在这里可以配
置包名、在Store中显示的图标、版本号和证书。默认情况下，只创建一个用于测试目的
的证书。把应用程序关联到商店中之前，必须替换此证书。
图36-10
Application选项卡允许配置应用程序名称、应用程序描述。在Visual 
Assets选项卡
中，可以看到能关联到应用程序的所有徽标：小图标、方图标和宽图标。可配置的能力随
系统功能和应用程序使用的设备而异，例如，音乐库、摄像头等。用户会得到应用程序使
用了哪些功能的通知。如果应用程序没有指定需要某个功能，在运行期间就不能使用该功
能。在Declarations选项卡中，应用程序可以注册更多的功能，例如，用作共享目标，或
者指定某些功能是否应该在后台运行。
在Visual Studio中，单击Solution Explorer中的项目，然后从上下文菜单中选择Store |
Create App Package，可以创建一个包。在Create App Package向导中，首先需要指定是否
要把应用程序上传到Windows 
Store。如果不必上传，那么可以使用旁加载来部署包，如
后面所述。如果还没有注册一个Windows 
Store账户，就选择旁加载选项。在该向导的第
二个对话框中，为包选择Release而不是Debug 
Code。在这里还可以选择为哪个平台生成
包：x86、x64和ARM CPU。这就是构建包所需的全部工作，如图36-11所示。要想查看包
中的内容，可以把文件的扩展名从.appx改为.zip，然后就可以看到其中包含的所有图像、
元数据和二进制文件。
图36-11
36.5.2 Windows App Certification Kit
把应用包提交给Windows Store前，把它旁加载到其他设备之前，应运行Windows App
Certification Kit，这个工具是Windows SDK的一部分，随Visual Studio一起安装。
把应用程序部署到Windows 
Store时，应用程序必须满足一些需求。多数需求是可以
提前检查的。
运行此工具时，需要有些耐心。它需要几分钟的时间来测试应用程序并给出结果。在
此期间，不应与该工具或正在运行的应用程序交互。检查应用程序，以确保包正确使用发
布版本构建，没有调试代码，应用程序不会崩溃或挂起，只调用支持的API，功能使用正
确，实现了后台任务的取消处理程序等。启动该工具，会看到它运行的所有测试。
图36-12显示了启动Certification Kit，可以选择要运行的测试。
图36-12
36.5.3 旁加载
为了让应用程序得到最多的用户，应该把应用程序发布到Windows 
Store中。
Windows 
Store的许可很灵活，可以选择销售给个人的许可，或者批量许可。对于后者，
可以根据唯一ID和设备确定运行应用程序的用户。当然，应用程序也可能不适合放到
Windows Store中。在Windows 10中，绕过Store会更容易一些。Windows 8要求购买密钥，
而Windows 10只需要启用设备，进行旁加载。在Update & Security设置的For Developers选
项卡中（见图36-13），可以把设置改为Sideload Apps，启用旁加载。当然，在系统上已
经配置了Developer模式，它不需要Sideload设置。只需要在没有用Developer模式配置的系
统中启用这个设置。
为了通过旁加载安装Windows应用程序，可以使用WinAppDeployCmd.exe。这个工具
是Windows 10 SDK的一部分。
这个工具允许使用如下命令浏览网络上可用于安装的所有设备：
    WinAppDeployCmd.exe devices
为了在设备上安装应用程序，可以使用如下install选项：
    WinAppDeployCmd.exe install -file SampleApp.appx -ip 10.10.0.199 -pin ABC3D5
为了更新应用程序，可以使用update选项：
    WinAppDeployCmd.exe update -file SampleApp.appx -ip 10.10.0.199
为了卸载应用程序，可以使用uninstall选项：
    WinAppDeployCmd.exe uninstall -package packagename
36.6 小结
部署是应用程序生命周期的一个重要部分，会影响到应用程序中使用的技术，所以应
该从项目的一开始就进行考虑。本章介绍了不同应用程序类型的部署。
本章介绍了如何使用ClickOnce部署Windows应用程序。ClickOnce提供了一种方便的
自动更新能力，也可以在应用程序中直接触发，在System.Deployment API中可以看到这一
点。
本章还介绍了UWP应用程序的部署。可以把UWP应用程序发布到Windows Store中，
也可以，不使用Windows Store，而使用命令行工具部署它们。
从第37章开始，介绍服务和Web应用程序，从使用ADO.NET访问数据库开始。
第Ⅳ部分
Web应用程序和服务
  第37章 ADO.NET
  第38章 Entity Framework Core
  第39章 Windows服务
  第40章 ASP.NET Core
  第41章 ASP.NET MVC
  第42章 ASP.NET Web API
  第43章 WebHooks和SignalR
  第44章 WCF
  第45章 部署网站和服务
第37章
ADO.NET
本章要点
● 连接数据库
● 执行命令
● 调用存储过程
● ADO.NET对象模型
本章源代码下载地址（wrox.com）：
打开网页www.wrox.com/go/professioncsharp6，单击Download Code选项卡即可下载本
章源代码。本章代码分为以下几个主要的示例文件：
● ConnectionSamples
● CommandSamples
● AsyncSamples
● TransactionSamples
37.1 ADO.NET概述
本章讨论如何使用ADO.NET访问C#程序中的关系数据库，例如SQL Server，主要介
绍如何连接数据库，以及断开与数据库的连接。如何使用查询，如何添加和更新记录。学
习各种命令对象选项，了解如何为SQL Server提供程序类提供的每个选项使用命令；如何
通过命令对象调用存储过程，以及如何使用事务。
ADO.NET之前使用OLEDB和ODBC附带了不同的数据库提供程序，一个提供程序用
于SQL Server；另一个提供程序用于Oracle。OLEDB技术不再获得支持，所以这个提供程
序不应该用于新的应用程序。对于访问Oracle数据库，微软的提供程序也不再使用，因为
来自Oracle（http://www.oracle.com/technetwork/topics/dotnet/）的提供程序能更好地满足需
求。对其他数据源（也用于Oracle），有许多可用的第三方提供程序。使用ODBC提供程
序之前，应该给所访问的数据源使用专用的提供程序。本章中的代码示例基于SQL
Server，但也可以把它改为使用不同的连接和命令对象，如访问Oracle数据库时，使用
OracleConnection和OracleCommand，而不是SqlConnection和SqlCommand。
  注意： 本章不介绍把表放在内存中的DataSet。DataSet允许从数据库中检索
记录，并把内容存储在内存的数据表关系中。相反，应该使用Entity Framework，参见