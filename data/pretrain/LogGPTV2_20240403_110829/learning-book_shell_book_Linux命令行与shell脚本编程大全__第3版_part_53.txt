echo *This is an error message* >52
这行会在脚本的STDERR文件描述符所指问的位置显示文本，面不是通常的STDOUT。下面这
个例子就利用了这项功能。
$ cat test8
1/bin/bash
 testing STDERR messages
echo *This is an error* >&2
.4ndno teuou 2t stq。 oqoa
如果像平常一样运行这个脚本，你可能看不出什么区别。
$./test8
This is normal output
This is an error
记住，默认情况下，Linux会将STDERR导向STDOUT。但是，如果你在运行脚本时重定向了
STDERR，脚本中所有导向STDERR的文本都会被重定向。
$ ./test8 2> test9
This is normal outpst
This is an error
S cat test9
太好了！通过STDOUr显示的文本显示在了屏幕上，而发送给STDERR的echo语句的文本则被
重定向到了输出文件。
这个方法非常适合在脚本中生成错误消息。如果有人用了你的脚本，他们可以像上面的例子
中那样轻松地通过STDERR文件描述符重定向错误消息。
---
## Page 331
316
第15章呈现数据
15.2.2永久重定向
如果脚本中有大量数据需要重定向，那重定向每个echo语句就会很烦项。取而代之，你可
以用exec命令告诉shell在脚本执行期间重定向某个特定文件描述符。
$ cat test10
 redirecting all output to a f1le
#1 /bin/bash
exec l>teatout
echo *rhia la a teat of redirecting all output*
echo *fron a scrlpt to another file.*
$./test10
$ cat testout
Thia la a teat of redirecting all output
from a script to another file.
vlthout having to redlrect every individual llne
exec命令会启动一个新shell并将sTDOUT文件描述符重定向到文件。脚本中发给STDOUT的所
有输出会被重定向到文件。
可以在脚本执行过程中重定向STDOUT。
$ cat test11
 redlrecting output to dlfferent locationa
#1/bin/bash
exec 2>testerrox
echo *thia la che atart of the script*
uotieoot xoaoue o1 ndano tte buroextpex mou, ooo
exec l>testout
echo *rhia output should go to the testout file*
echo *but this should go to the testerror file* >&2
$./test11
now redirecting all output to another location
Thia la the start of the script
This output ahould go to the teatout fi1e
$ cat testout
10x191897 113 $
but thla should go to the testerror file
这个脚本用exec命令来将发给sTDERR的输出重定向到文件testerror。接下来，脚本用
echo语句向sTDOUT显示了儿行文本。随后再次使用exec命令来将sTDOUT重定向到testout文
件。注意，尽管STDOUT被重定向了，但你仍然可以将echo语句的输出发给STDERR，在本例中还
是重定向到testerror文件。
---
## Page 332
15.4创建自己的重定向
当你只想将脚本的部分输出重定向到其他位置时（如错误日志），这个特性用起来非常方便。
15
不过这样做的话，会碰到一个问题。
一旦重定向了STDOUT或STDERR，就很难再将它们重定向回原来的位置。如果你需要在重定
向中来回切换的话，有个办法可以用。15.4节将会讨论该方法以及如何在脚本中使用。
15.3在脚本中重定向输入
你可以使用与脚本中重定向STDOUT和STDERR相同的方法来将STDIN从键盘重定向到其他
位置。exec命令允许你将sTDIN重定向到Linux系统上的文件中：
exec 0test13out
echo *Thia should display on the monltor*
echo
*and chia should be stored ln the file* >&3
$ ./teet13
echo *Then this should be back on the monltor*
Thia should display on the monitor
Then this ahould be back on the monitor
and thia should be stored in the file
n0ET289 113 $
这个脚本用exec命令将文件描述符3重定向到另一个文件。当脚本执行echo语句时，输出内
容会像预想中那样显示在STDOUT上。但你重定向到文件描述符3的那行echo语句的输出却进入
了另一个文件。这样你就可以在显示器上保持正常的输出，而将特定信息重定向到文件中（比如
日志文件）。
也可以不用创建新文件，而是使用exec命令来将输出追加到现有文件中。
现在输出会被追加到test13out文件，而不是创建一个新文件。
15.4.2重定向文件描述符
现在介绍怎么恢复已重定向的文件描述符。你可以分配另外一个文件描述符给标准文件描述
符，反之亦然。这意味着你可以将STDOUT的原来位置重定向到另一个文件描述符，然后再利用
该文件描述符重定向回STDOUT。听起来可能有点复杂，但实际上相当直接。这个简单的例子能
帮你理清楚。
$ cat test14
 atoxing STDoUr, then coning back to 1t
#1/bin/bash
exec 1>test14out
exec 3>61
echo *Thia should atore in the output file*
---
## Page 334
15.4创建自己的重定向
61
exec 1>&3
15
echo *Now thlnga should be back to norma1*
$./test14
Nov things should be back to norna]
$ cat test14out
Thia should store in the output fi1e
这个例子有点叫人抓狂，来一段一段地看。首先，脚本将文件描述符3重定向到文件描述符1
的当前位置，也就是STDOUT。这意味着任何发送给文件描述符3的输出都将出现在显示器上。
第二个exec命令将sTDOUT重定向到文件，shell现在会将发送给sTDOUT的输出直接重定向到
输出文件中。但是，文件描述符3仍然指向STDOUT原来的位置，也就是显示器。如果此时将输出
数据发送给文件描述符3，它仍然会出现在显示器上，尽管STDOUT已经被重定向了。
在向STDOUT（现在指向一个文件）发送一些输出之后，脚本将STDOUT重定向到文件描述符
3的当前位置（现在仍然是显示器）。这意味着现在STDOUT又指向了它原来的位置：显示器。
这个方法可能有点叫人困惑，但这是一种在脚本中临时重定向输出，然后恢复默认输出设置
的常用方法。
15.4.3创建输入文件描述符
可以用和重定向输出文件描述符同样的办法重定向输人文件描述符。在重定向到文件之前，
先将STDIN文件描述符保存到另外一个文件描述符，然后在读取完文件之后再将STDIN恢复到它
原来的位置。
$ cat test15
redirecting inputfi1e descriptora
ueeq/Tα/ 1 #
exec 6 testfile
read 1ine 43
echo
*Read: $line*
Thia la the firat line.
$ cat testfile
This le the third line.
Thla la the second llne.
Read: This la the first llne.
$./test16
This le the firat line.
$ cat testfile
Thia la a teat line
This la the third line.
Lne.
这个例子用了exec命令将文件描述符3分配给文件testfile以进行文件读写。接下来，它
通过分配好的文件描述符，使用read命令读取文件中的第一行，然后将这一行显示在sTDOUT上。
最后，它用echo语句将一行数据写人由同一个文件描述符打开的文件中。
在运行脚本时，一开始还算正常。输出内容表明脚本读取了testfile文件中的第一行。但如果
你在脚本运行完毕后，查看testile文件内容的话，你会发现写人文件中的数据覆盖了已有的数据。
当脚本向文件中写人数据时，它会从文件指针所处的位置开始。read命令读取了第一行数
---
## Page 336
15.4创建自己的重定向
321
据，所以它使得文件指针指向了第二行数据的第一个字符。在echo语句将数据输出到文件时，
15
它会将数据放在文件指针的当前位置，覆盖了该位置的已有数据。
15.4.5关闭文件描述符
如果你创建了新的输人或输出文件描述符，shell会在脚本退出时自动关闭它们。然而在有些
情况下，你需要在脚本结束前手动关闭文件描述符。
要关闭文件描述符，将它重定向到特殊符号&-。脚本中看起来如下：
exec 3>&-
该语句会关闭文件描述符3，不再在脚本中使用它。这里有个例子来说明当你尝试使用已关
闭的文件描述符时会怎样。
$ cat badtest
 testing cloning file Gescriptora
#1/bin/ba.sh
exec 3> teat17file
echo *Thia iα a test llne of data* >&3
exec 3>&=
echo *Thla won't vork* >&3
-/badtest: 3: Bad fi1e descxiptox
$./badtest
一旦关闭了文件描述符，就不能在脚本中向它写入任何数据，否则shell会生成错误消息。
在关闭文件描述符时还要注意另一件事。如果随后你在脚本中打开了同一个输出文件，shell
会用一个新文件来替换已有文件。这意味着如果你输出数据，它就会覆盖已有文件。考虑下面这
个问题的例子。
$ cat test17
#1/bin/ba.sh
teating closing file Gescxiptora
exec 3> teat17file
echo *Thia is a test llne of data* >&3
exec 3>&=
cat teat17fi1e
echo *Thia′11 be bad* >63
exec 3> teat17file
Thla ia a test line of data
$./test17
Thla'11 be bad
$ cat testl7file
---
## Page 337
322
第15章呈现数据
在向testl7file文件发送一个数据字符申并关闭该文件描述符之后，脚本用了cat命令来显示
文件的内容。到目前为止，一切都还好。下一步，脚本重新打开了该输出文件并向它发送了另一
个数据字符串。当显示该输出文件的内容时，你所能看到的只有第二个数据字符串。shell覆盖了
原来的输出文件。
15.5列出打开的文件描述符
你能用的文件描述符只有9个，你可能会觉得这没什么复杂的。但有时要记住哪个文件描述
符被重定向到了哪里很难。为了帮助你理清条理，bash shell提供了lsof命令。
lsof命令会列出整个Linux系统打开的所有文件描述符。这是个有争议的功能，因为它会向
非系统管理员用户提供Linux系统的信息。鉴于此，许多Linux系统隐藏了该命令，这样用户就不
会一不小心就发现了。
在很多Linux系统中（如IFedora），1sof命令位于/usr'sbin目录。要想以普通用户账户来运行
它，必须通过全路径名来引用：
$ /usr/sbin/lsof
该命令会产生大量的输出。它会显示当前Linux系统上打开的每个文件的有关信息。这包括