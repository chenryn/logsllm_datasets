at machine 0. Let oi denote the issuing host of packet xi. Here oi = 0 if packet
xi is sent from client 0 to server 1, and oi = 1 if packet xi is sent from server 1
to client 0.
The calculations described below provide estimates of the time gaps instead of
the exact values. The packet content is not used in these simpliﬁed calculations.
Instead, packet header provided the necessary information: the logging time, the
issuing host, the receiving host, the port numbers, and the packet ﬂags.
4.2 Estimating Gap of Reply Echo
The gap te − tq between the client request and the server reply echo is estimated
by considering only nonempty packets, essentially those packets whose ﬂags are
not delayed-acknowledgment ﬂags. Deﬁne (xik) = (xj : xj nonempty) as the
subsequence of packets with nonempty content. Then the set
, oik+1) = (0, 1)}
E(X) = {tik+1 − tik : (oik
(2)
captures all the gaps for a (0,1)-transition in the packet sequence X.
Certain (0,1)-transitions correspond to the server execution of a client com-
mand. Other (0,1)-transitions correspond to the reply echoes to the client’s
single-character packets. Because a user can type a short burst of characters
before the ﬁrst character is echoed back, a (0,1)-gap generally measures the
time between a character, followed by the server reply echo to an earlier charac-
ter in the burst of characters typed. The set E of (0,1)-gaps include both long
command-execution gaps and also include short gaps for reply-echo lags. Thus,
the distribution (0,1)-gaps in E has wide variance and skew.
Detecting Long Connection Chains of Interactive Terminal Sessions
9
4.3 Gap of Delayed Acknowledgment
The gap ta−tq between the client request and the server delayed acknowledgment
is calculated by considering the sequence of all packets. Delayed-acknowledgment
packets from the server to the client is easy to identify from the packet header.
Each such delayed acknowledgment can be matched to the most recent nonempty
packet from the client. More precisely, let ai be the gap between packet i and
its most recent nonempty packet from the client, deﬁned as
ai = min{ti − tl : l < i, ol = 0, xl nonempty}
(3)
(4)
where [i] = max{l < i : ol = 0, xl nonempty}. Then the calculated set A of
delayed-acknowledgment gap is
= ti − t[i],
A(X) = {ai : oi = 1, xi delayed acknowledgment}.
(5)
This distribution of these delayed-acknowledgment gaps in A tends to be
sharply focused, compared the distribution of (0,1)-gaps in E. In any case,
α(X) = max A(X), the maximum of the delayed-acknowledgment gaps in A,
provides an over-estimate the round-trip time between the client and the server.
4.4 Comparison of Delay Gaps
Because the set E of (0,1)-gaps contains many diﬀerent types of gaps, the dis-
tribution of these (0,1)-gaps depend on many factors. In general though, if there
are many slow connections downstream, then the (0,1)-gaps tend to be large.
Comparing the maximum delayed-acknowledgment gap α to the distribution of
(0,1)-gaps in E provides insight into the connections downstream.
A simple comparison of α to E is the quantile quan(E, α) of α with respect
to E. This quantile is robust estimate of how large E is compared to α. If the
downstream delay is large, then quan(E, α) would be small.
5 Results
Experiments under a variety of settings were conducted to test the technique
proposed in this report. The author had root access to one machine at Stanford
University and user access to many remote machines. Connection chains were
tested on these accounts, with diﬀerent numbers and orderings of computers. All
the results presented here use the secure shell protocol for the connections.
5.1 Experimental Setting
The author’s machine ST ran the Red Hat 7.2 distribution of Linux. This logging
machine used Snort [7] 1.8.3 to collect network packet dumps for incoming and
outgoing connections.
10
K.H. Yung
Most of the remote machines were located throughout the US, and several
were located in Europe. They ran a variety of operating systems, including Linux,
FreeBSD, Solaris, VMS, and S390. All of them supported incoming and outgoing
terminal sessions, with support for secure shell, either version 1 or version 2.
Each logged session lasted between one to ten minutes. In these experiments,
the network dumps were not analyzed online but after the experiments were
completed. The simple analysis on the network packet dumps, however, could
have been performed in an online setting.
In all experimental setups, the logging machine ST acted as a client 0 to
the nearest server 1. Simple one-pass online algorithms were used to calculate
the two delay gaps from connection between the logging client and the nearest
server.
5.2 Experimental Results
Echo-delay comparison proved useful under many situations, as conﬁrmed by
many experiments. Two diﬀerent sets of experimental results are reported here.
Both sets used the machine ST to record network logs. In the ﬁrst set, the
recording machine was a stepping stone in the connection chain. In the second
set the recording machine was the originating point of the chain.
5.3 Recording on Stepping Stone
In this set of experiments, each connection chain had a topology of the form
−1 −→ 0 −→ 1 −→ . . . −→ n, where machine 0 refers to the recording machine
ST. The length of the chain and the identity of the machines varied. The same
sequence of commands were executed in all the sessions. To control for variability
in network congestion, all the experiments were conducted in the same time
frame, within one hour.
Table 1 shows three groups, each of three chains. There are nine network logs,
corresponding to the nine chains presented. Because the outgoing connection
from client 0 is ST-rs, Essentially same delayed-acknowledgment gap α is used
for all nine chains. The distributions E of (0,1)-gaps diﬀer.
The second group of three chains replicates the ﬁrst group of three chains.
Yet the comparison quantiles diﬀer slightly because there are still uncontrolled
variability between the two replications.
In the third group of three chains, the quantile quan(E, α) is not monoton-
ically increasing as the chain length decreases. On the other hand, the quan-
tile quan(E, 2α) is better-behaved. The three groups also seem more consistent
on the quantile quan(E, 2α). Apparently, the quan(E, 2α) feature discriminates
more sharply the three chain lengths.
By rejecting chains whose quan(E, 2α) is less than 0.95, the two long chains
of each group would be identiﬁed as suspicious. Decreasing this fraction would be
less restrictive but also allow more suspicious chains. In any case, the rejection
Detecting Long Connection Chains of Interactive Terminal Sessions
11
Table 1. Quantile behavior under varying topology but identical session transcript. In
each chain, the leftmost initial denotes the originating point, and the rightmost initial
denotes the ﬁnal victim. All network logs were recorded on machine ST. All sessions
executed the same sequence of commands, using only the simple command line under
character mode.
quan(E, α) quan(E, 2α)
0.46
0.63
0.77
0.48
0.54
0.69
0.34
0.63
0.57
0.73
0.91
1.00
0.61
0.80
1.00
0.57
0.88
1.00
connection chain
e5 → ST → rs → e13 → zi → e14 → vm → e15
e5 → ST → rs → e13 → zi → e14
e5 → ST → rs → e13
e5 → ST → rs → e13 → zi → e14 → vm → e15
e5 → ST → rs → e13 → zi → e14
e5 → ST → rs → e13
e5 → ST → rs → e6 → zi → e7 → vm → e8
e5 → ST → rs → e6 → zi → e7
e5 → ST → rs → e6
region S of suspicious chain, based on the quan(E, 2α) value alone, would have
the form
S(c) = {packet sequence X : quan(E(X), 2α(X)) ≤ c},
(6)
where 0 ≤ c ≤ 1 is an adjustable parameter. A larger value of c enlarges the
rejection region S and generally results in more false alarms.
5.4 Recording on Originating Point
In this second set of experiments shown in Table 2, the recording machine ST
acted as the originating point in all the chains. The length of the chain varied,
but the ordering of machines remained ﬁxed. The session transcript also varied
substantially. To control for variability in network congestion, all the experiments
were conducted in the same time frame, within two hours.
The bar graph in Figure 4 plots the quan(E, 2α) values versus the chain
length for the 14 sessions in Table 2. On the whole, the quantile quan(E, 2α)
decreases as the chain length increases. Deviations from the general trend are
expected because these sessions do not have a common transcript.
In this set of experiments, not only does the chain length vary, but so does
the session transcript. Using rejection region based on the quan(E, 2α) alone,
as in Equation 6, gives mixed results. Figure 5 shows the ROC curves for three
diﬀerent tests. To test for more than two hops downstream, the rejection region
of the form in Equation 6 provides a perfect test. To test for more than ﬁve
hops downstream or to test for more than nine hops, however, the results are
uniformly worse.
In test samples with variability in session transcript, the simple rejection re-
gion based on quan(E, 2α) alone still works reasonably well, especially in testing
12
K.H. Yung
Table 2. Quantile behavior under varying session transcripts but ﬁxed topology. The
14 logs were all recorded from the original point ST. The session transcripts involved
shell commands and more complicated commands within the EMACS editor. Each log
had a diﬀerent session transcript.
quan(E, 2α)
0.40
0.36
0.28
0.39
0.42
0.44
0.21
0.68
0.57
0.45
0.70
0.62
0.92
0.99
connection chain
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7→xb→df→bs→e8
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7→xb→df→bs
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7→xb→df
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7→xb
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs→e7
ST→e2→zi→e3→cp→e4→ls→sp→e6→cs
ST→e2→zi→e3→cp→e4→ls→sp→e6
ST→e2→zi→e3→cp→e4→ls→sp
ST→e2→zi→e3→cp→e4→ls
ST→e2→zi→e3→cp→e4
ST→e2→zi→e3→cp
ST→e2→zi→e3
ST→e2→zi
ST→e2
Quantile versus Chain Length
e
l
i
t
n
a
u
q
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
1
2
3
4
5
6
7
8
chain length
9
10
11
12
13
14
Fig. 4. Plot of quan(E, 2α) versus chain length.
Detecting Long Connection Chains of Interactive Terminal Sessions
13
ROC curves
d
e
t
c
e
t
e
d
i
s
n
a
h
c
g
n
o
l
f
o
n
o
i
t
c
a
r
f
:
r
e
w
o
p
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0
0.1
0.2
0.3