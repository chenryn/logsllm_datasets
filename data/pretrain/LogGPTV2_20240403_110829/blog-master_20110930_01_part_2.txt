VACUUM  
digoal=# select id,age(xmin),xmin,txid_current() from txid_test ;  
 id |    age     | xmin | txid_current   
----+------------+------+--------------  
  1 | 2147483647 |    2 |  11661255866  
  2 | 2147483647 |    2 |  11661255866  
  3 | 2147483647 |    2 |  11661255866  
(3 rows)  
```  
这里就生效了。  
## 术语  
参数 :   
```  
vacuum_freeze_min_age (integer)  
Specifies the cutoff age (in transactions) that VACUUM should use to decide whether to replace transaction IDs with FrozenXID while scanning a table. 
The default is 50 million transactions.   
```  
vacuum 加上freeze参数解释 :   
```  
FREEZE  
Selects aggressive "freezing" of tuples. Specifying FREEZE is equivalent to performing VACUUM with the vacuum_freeze_min_age parameter set to zero.  
```  
系统表pg_class的relfrozenxid列的解释 :   
```  
relfrozenxid	  
xid	 	  
All transaction IDs before this one have been replaced with a permanent ("frozen") transaction ID in this table.   
This is used to track whether the table needs to be vacuumed in order to prevent transaction ID wraparound or to allow pg_clog to be shrunk.   
Zero (InvalidTransactionId) if the relation is not a table.  
```  
涉及到txid的系统函数 :   
The functions shown in Table 9-52 provide server transaction information in an exportable form.   
he main use of these functions is to determine which transactions were committed between two snapshots.  
Table 9-52. Transaction IDs and Snapshots  
Name|	Return Type|	Description  
---|---|---  
txid_current()|	bigint|	get current transaction ID  
txid_current_snapshot()|	txid_snapshot|	get current snapshot  
txid_snapshot_xip(txid_snapshot)|	setof bigint|	get in-progress transaction IDs in snapshot  
txid_snapshot_xmax(txid_snapshot)|	bigint|	get xmax of snapshot  
txid_snapshot_xmin(txid_snapshot)|	bigint|	get xmin of snapshot  
txid_visible_in_snapshot(bigint, txid_snapshot)|	boolean|	is transaction ID visible in snapshot? (do not use with subtransaction ids)  
The internal transaction ID type (xid) is 32 bits wide and wraps around every 4 billion transactions.   
However, these functions export a 64-bit format that is extended with an"epoch" counter so it will not wrap around during the life of an installation.   
The data type used by these functions, txid_snapshot, stores information about transaction ID visibility at a particular moment in time.   
Its components are described in Table 9-53.  
Table 9-53. Snapshot Components  
Name|	Description  
---|---  
xmin|	Earliest transaction ID (txid) that is still active. All earlier transactions will either be committed and visible, or rolled back and dead.  
xmax|	First as-yet-unassigned txid. All txids greater than or equal to this are not yet started as of the time of the snapshot, and thus invisible.  
xip_list|	Active txids at the time of the snapshot. The list includes only those active txids between xmin and xmax; there might be active txids higher than xmax. A txid that isxmin <= txid < xmax and not in this list was already completed at the time of the snapshot, and thus either visible or dead according to its commit status. The list does not include txids of subtransactions.  
```
txid_snapshot's textual representation is xmin:xmax:xip_list.   
For example 10:20:10,14,15 means xmin=10, xmax=20, xip_list=10, 14, 15.  
```
截取自pg_resetxlog man page :   
```  
           The transaction ID epoch is not actually stored anywhere in the database except in the field that is set by  
           pg_resetxlog, so any value will work so far as the database itself is concerned. You might need to adjust  
           this value to ensure that replication systems such as Slony-I work correctly — if so, an appropriate value  
           should be obtainable from the state of the downstream replicated database.  
```  
那么如何得知数据库集群的epoch呢? 这个数据在控制文件中.  
```  
pg_controldata $PGDATA  
.....  
Latest checkpoint's NextXID:          0/136923  
.....  
```  
这里了的第一个斜线前面的部分0就是当前数据库集群的epoch.  
对应源码  
  src/bin/pg_controldata/pg_controldata.c  
```  
        printf(_("Latest checkpoint's NextXID:          %u/%u\n"),  
                   ControlFile.checkPointCopy.nextXidEpoch,  
                   ControlFile.checkPointCopy.nextXid);  
```  
  src/include/catalog/pg_control.h  
```  
typedef struct CheckPoint  
{  
        XLogRecPtr      redo;                   /* next RecPtr available when we began to  
                                                                 * create CheckPoint (i.e. REDO start point) */  
        TimeLineID      ThisTimeLineID; /* current TLI */  
        TimeLineID      PrevTimeLineID; /* previous TLI, if this record begins a new  
                                                                 * timeline (equals ThisTimeLineID otherwise) */  
        bool            fullPageWrites; /* current full_page_writes */  
        uint32          nextXidEpoch;   /* higher-order bits of nextXid */  
```  
## 参考  
http://www.postgresql.org/docs/9.1/static/functions-info.html#FUNCTIONS-TXID-SNAPSHOT-PARTS  
src/backend/utils/adt/txid.c  
man pg_resetxlog  
http://www.postgresql.org/docs/9.1/static/routine-vacuuming.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")