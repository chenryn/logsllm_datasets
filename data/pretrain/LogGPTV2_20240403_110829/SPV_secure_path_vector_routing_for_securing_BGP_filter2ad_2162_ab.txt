hop authentication. TCP-MD5 authentication has also been pro-
posed to provide authentication between two BGP speakers [21].
IPsec [25, 26] can also authenticate the link-level communication
between peering routers. The TTL value can be used to verify that
a packet really originates from a neighboring router [43].
3.2 Securing BGP Updates
Kent et al. propose S-BGP, the seminal work that protects the entire
BGP UPDATE message [27]. S-BGP assumes two parallel certiﬁ-
cate hierarchies: an address space PKI, and an AS ownership and
router PKI. Both certiﬁcate hierarchies have ICANN as their cer-
tiﬁcate root. The address space certiﬁcate assigns ownership over
an IP preﬁx to an entity, the address space hierarchy parallels the
existing IP address allocation system (address issuer signs address
owner’s certiﬁcate). The AS ownership certiﬁcate assigns owner-
ship over an ASN to an entity. An AS uses its AS ownership to sign
certiﬁcates for routers.
The main goal of S-BGP is to protect the ASPATH from modi-
ﬁcation and truncation, and to prevent unauthorized advertisements
of an IP preﬁx. To prevent unauthorized preﬁx advertisements,
S-BGP uses address attestations, where the owner of an IP preﬁx
signs a delegation message allowing its ﬁrst-hop AS to advertise
the preﬁx. Subsequently, each AS signs a route attestation for the
AS path up to and including that AS, and a delegation, allowing
the next AS the right to propagate that advertisement to its peers.
Hence, a S-BGP UPDATE message starts with an address attesta-
tion which proves that the originator has permission to advertise
the route. The originator signs a delegation which allows the next
AS to propagate the route, and each AS in turn signs a delegation
which allows the following AS to propagate the route.
Each delegation in the delegation chain ensures two properties:
ﬁrst, the next ASN cannot be modiﬁed without the previous ASN’s
private key, and second, the AS path cannot be propagated without
the permission of the ﬁnal AS on the AS path. As a result, an
attacker cannot introduce itself onto the AS path unless it receives
a delegation allowing it to propagate that preﬁx.
It also cannot
remove previous ASNs from the AS path, because to do so would
require the private key of the AS before the removed AS. S-BGP
requires several digital signatures in each UPDATE, and as a result
has a high CPU overhead for verifying UPDATE messages. SPV
improves on S-BGP through the use of more efﬁcient symmetric
cryptography.
3.3 Anomaly Detection
A number of approaches attempt to determine whether or not
a given UPDATE is likely to be valid. SPV is a complemen-
tary approach, designed to prevent modiﬁcation and truncation of
ASPATHs. Though a combination of detection and prevention is
promising, it is beyond the scope of this paper, but represents an
interesting direction for future work. We now review some prior
work in anomaly detection.
Secure Origin BGP (soBGP) is an effort to secure BGP [57].
The approach of soBGP is for each router to keep a database of
network topology (AS connectivity information), BGP policy in-
formation, as well as trusted ISP certiﬁcates. The routers use this
database to assess the authenticity of UPDATEs, mainly by detect-
ing that a given UPDATE is impossible. Goodell et al. propose a
separate protocol to secure BGP route updates, without changing
BGP [19]. Their approach is similar in nature to soBGP, as it adds
a separate mechanism to authenticate BGP UPDATEs.
Cheung and Levitt [10] and Bradley et al. [7] propose intrusion
detection techniques for detecting and identifying routers that send
bogus routing UPDATE messages.
Subramanian et al. present new mechanisms to detect invalid
UPDATE messages in their Listen and Whisper work [55]. They
suggest adding a small amount of cryptographic information to
UPDATEs to enable an AS to detect ASPATH truncation (one of
their techniques is also based on efﬁcient symmetric cryptographic
primitives). They also propose to monitor TCP ﬂows to detect paths
that become unavailable.
Kruegel et al. present mechanisms to detect malicious updates,
based on AS topology information [29].
4 SECURING BGP
In this section, we describe our extensions to secure BGP, which
we call secure path vector (SPV). Our goal is to achieve ASPATH
integrity through purely symmetric functions. One of the main
motivations for this direction is to remove the need for routers to
perform computationally expensive public-key cryptographic op-
erations and to store asymmetric private keys. Private keys often
have long lifetimes, and their compromise represents a signiﬁcant
security breach. As a result, managing private keys is a challenging
task. In SPV, routers need only store the short-lived private keys for
one-time signatures; these short-term keys can be generated ofﬂine.
This approach greatly improves security, as the preﬁx private key
could be stored on an off-line workstation.
By ASPATH integrity, we mean that a malicious AS or mis-
conﬁgured router cannot shorten the ASPATH (which we call the
truncation attack) or change autonomous system numbers (ASNs)
in the ASPATH. Preventing the shortening of the ASPATH pre-
vents blackhole attacks that are due to truncated paths, and ensur-
ing integrity of ASNs in the path prevents ASPATH modiﬁcation
attacks. To achieve this integrity, we develop an ASPATH protec-
tor, a backwards-compatible cryptographic mechanism which can
be added as a path attribute.
To prevent the attack in which an attacker replays old UPDATE
messages to advertise routes which do not currently exist, we as-
sume that time is divided into epochs of ﬁxed length, after which
all routes must be readvertised. Each UPDATE message is valid for
one epoch following the epoch in which it was announced. Epochs
are further discussed in Section 4.5.
keys are described in more detail later in this section):
In SPV, we use four different kinds of public/private keys (these
• A single-ASN public key authenticates the signature of one
AS in the ASPATH. The corresponding single-ASN private
key is used to derive the one-time signature and the single-
ASN public key.
• An epoch public key authenticates one ASPATH protector,
which consists of a sequence of single-ASN one-time signa-
tures. The epoch public key is the root of a hash tree over
multiple single-ASN public keys (we describe hash trees in
Section 4.2.2).
• A multi-epoch public key authenticates multiple epoch public
keys. This value is the root of a hash tree that is constructed
over multiple epoch public keys.
• A preﬁx public/private key is used to authenticate messages
from a given preﬁx. This is a standard public/private key pair
(for example using the RSA algorithm), which follows the
same structure as the address PKI structure of S-BGP [27].
The main purpose in SPV for the preﬁx public key is to
authenticate multi-epoch public keys, producing the multi-
epoch public key certiﬁcate. The preﬁx key pair prevents an
attacker from advertising a preﬁx which it does not own.
In the same way that S-BGP uses address attestations [27],
we assume that ICANN will issue certiﬁcates for preﬁx pub-
lic keys to designate address ownership.3
SPV secures BGP UPDATE messages as follows. A node adver-
tising a preﬁx must have the preﬁx private key associated with that
block in order to generate a valid SPV UPDATE message. Using
a combination of one-time signatures, hash trees, and one-way
chains, we design a novel construction to protect ASPATHs against
truncation and modiﬁcation attacks. We observed that authenti-
cation of the AS forwarding UPDATEs is not necessary to secure
ASPATHs, and causes problems also for incremental deployment.
We propose an ASPATH protector that prevents a malicious AS
from truncating or maliciously modifying the ASPATH, without
authenticating the AS that updated the ASPATH and forwarded the
UPDATE message.
In our approach, the owner of a preﬁx creates a sequence of
one-time signatures, where each one-time signature is used to se-
cure one ASN in the ASPATH. The address attestation is used to au-
thenticate the public keys of the one-time signature, and the address
owner passes all the private keys in the UPDATE to the next AS.
Each AS that forwards the UPDATE uses up one one-time signature
to sign itself into the ASPATH and removes the private key for that
signature.
When a subsequent AS receives an UPDATE message, it can
verify the integrity of the ASPATH by verifying all the one-time
signatures. A malicious AS cannot truncate the ASPATH because it
cannot recreate the private key of the removed ASNs, and it cannot
replace a previous ASN with its own ASN (except with very small
probability, as we analyze in a later section).
4.1 Efﬁcient Preﬁx Ownership Certiﬁcates
To ensure that a preﬁx actually belongs to the AS which is origi-
nating an update for it, we use certiﬁcates to build attestations of
preﬁx ownership. These certiﬁcates are equivalent to the address
space PKI structure of S-BGP [27].
ICANN assigns IP address
space to registries, which in turn delegate smaller blocks to ser-
vice providers. Service providers often delegate these blocks to
their customers. At each step in the delegation, the recipient of the
address block generates an asymmetric preﬁx private key to repre-
sent the block; we call the corresponding public key a preﬁx public
key. The address issuer uses its preﬁx private key to sign the preﬁx
public key of the delegated block, together with a list of preﬁxes
which are delegated to the new key, forming the preﬁx public key
certiﬁcate, or simply preﬁx certiﬁcate. The network that owns a
preﬁx thus has a certiﬁcate signed by the issuer of the preﬁx autho-
rizing the preﬁx public key to authenticate messages to originate
from that preﬁx.
Disseminating the preﬁx public keys is a challenge. A promis-
ing approach is to leverage identity based cryptography (IBC) [6].
In IBC any value can serve as the public key—the name IBC was
chosen because an arbitrary string such as a name, identity, or a
preﬁx can be used as the public key. Based on the public key, the
certiﬁcation authority can then compute the corresponding private
key. In IBC, no public-key certiﬁcates are necessary, because the
name is the public key. Assuming ICANN as the globally trusted
authority of an identity based PKI, ICANN could issue IBC private
keys using the preﬁx as the public key, which would remove the re-
quirement for certiﬁcates, which in turn would solve the certiﬁcate
distribution problem. ICANN could authenticate the owner through
the preﬁx public key certiﬁcates we describe above. However, IBC
3However, in contrast to S-BGP, which requires additional certiﬁcates to authenticate
ASNs, address attestations are the only requirements for computationally expensive
public-key cryptography in SPV. We use these address attestations to bootstrap the
one-time public keys that protect the ASPATH.
has several drawbacks: key revocation is an issue since we cannot
revoke identities or preﬁxes (usually addressed by short-lived keys
by appending expiration times to the public keys along with fre-
quent private-key reissuing); and ICANN will know the private key
for every preﬁx. For the purposes of this paper, we assume either a
certiﬁcate distribution mechanism for the preﬁx public keys, or the
use of IBC.
Instead of signing UPDATE messages, we use an ASPATH
protector, which is built entirely from efﬁcient symmetric primi-
tives. An ASPATH protector can be authenticated using a single
value, called the epoch public key. Because the ASPATH protec-
tor changes periodically, an AS builds a hash tree (described in
more detail in Section 4.2.2) over each of these authenticators for
a small set of ASPATH protectors. We call the root of this hash
tree the multiple-epoch public key, because all the ASPATH pro-
tectors for several epochs can be veriﬁed with that public key. The
AS signs the multiple-epoch public key with the preﬁx private key,
producing the multi-epoch public key certiﬁcate.
The multi-epoch public key certiﬁcate can be distributed in a
number of ways. For example, routers can use a separate protocol
to ﬂood certiﬁcates through the network. Alternatively, certiﬁcates
could be erasure-encoded and pieces ﬂooded within the UPDATE
messages themselves, for example using a Digital Fountain based
approach [8].
4.2 Cryptographic Mechanisms
In this section we review the basic cryptographic mechanisms
that we use in this work. We review one-way hash chains, tree-
authenticated values (also known as Merkle hash trees [38]), and
one-time signatures. For a reference text on cryptographic termi-
nology and constructions see [37].
In this paper we make use of highly efﬁcient, symmetric
cryptographic functions, such as one-way hash functions (e.g.,
MD5 [48]), and block ciphers (e.g., AES [14]). Asymmetric cryp-
tographic primitives, such as RSA signatures [49], are computa-
tionally expensive: RSA signature veriﬁcation is about three orders
of magnitude slower than one symmetric operation (block cipher
or hash function operation), and signature generation is about four
orders of magnitude slower. When implemented in hardware, the
speed difference is even larger. For example, when using a Xilinx
Virtex FPGA with a “-6” speed grade, a 1024-bit RSA acceler-
ator [15] can perform 54,610 modular multiplications (or 18,203
RSA veriﬁcations) per second in 5458 slices4 (679% of the perfor-
mance of a 1GHz Pentium III), whereas an unpipelined implemen-
tation of AES [56] using 460 slices can perform 5 million hashes
per second on a slower FPGA (137% of the performance of a 1GHz
Pentium III). Since these implementations are trivially paralleliz-
able, in the same size FPGA, symmetric cryptographic primitives
provide 1625% of the performance of a 1GHz Pentium III. For ef-
ﬁciency, we base our techniques on symmetric primitives. We need
two operations: a one-way function, and a pseudo-random number
generator.
For the one-way function H[x], we could use a cryptographic
hash function such as MD5 [48]. For the security of our mecha-
nisms, we require that the hash function provides second pre-image
collision resistance, which means that given a random value x, it is
(cid:3) (cid:4)= x such that H[x] = H[x
(cid:3)].
computationally infeasible to ﬁnd x
For efﬁciency reasons we use a hash function constructed from a
block cipher. We use the AES [14] block cipher in the Matyas,
Meyer, and Oseas hash construction [36]: o = H[i] = AESK(i)⊕ i.
Black, Rogaway, and Shrimpton also show the security of this con-
struction [5]. For the key K, we use a publicly known key K, note
that it is intractable to derive the input i even if given output o and
4A slice is used to measure the size of an implementation in an FPGA.
key K, thus giving us the one-way property. This construction is
standardized in ISO/IEC 10118-2 and is particularly efﬁcient if we
hash an input value that is of the same size as the block cipher.
To generate a sequence of pseudo-random numbers, we use
pseudo-random functions (PRF) [18]. A PRF takes two arguments,
X is the key and i is the input value, and produces an output
value o = FX (i) that is indistinguishable from a random value
as long as the key X is secret. We will use the PRF to derive a
sequence of random values, such that given a sequence of output
values, assuming the key X is secret, it is intractable to ﬁnd other
unpublished output values, or to derive the key X . We also use the
AES block cipher as our PRF, so FX (i) = AESX (i).5
For our cryptographic primitives, we aim for a security level
of 80 bits, requiring an attacker to perform on the order of 280
cryptographic operations to break. This level of security is higher
than a 1024 bit RSA key, which requires roughly 272 operations to
break [33]. Choosing 80 bits will provide ample protection even
against a determined attacker until about year 2015 (choosing 96
bits is expected to be secure until year 2035) [33].
4.2.1 One-Way Hash Chains
One-way hash chains, or simply one-way chains, are a frequently
used cryptographic primitive in the design of secure protocols. We
create a one-way chain by selecting the ﬁnal value at random, and
repeatedly apply a one-way hash function H to derive previous val-
ues. For example, to create a chain, we select v0 at random, derive
v1 = H[v0], v2 = H[v1], etc.
The required one-way property of the hash function H makes it
computationally intractable for an attacker to derive value vi know-
ing value vi+1. More generally, given value vi of a one-way chain,
an adversary cannot ﬁnd an earlier value vj such that Hi− j[v j]
equals vi. (The notation Hx[y] here means that we apply the hash
function H x times on the input y, e.g., H2[y] = H[H[y]].) Even
when value vi is released, a hash function that is second pre-image
(cid:4)= vi such
(cid:3)
collision resistant prevents an adversary from ﬁnding v
(cid:3)
i
that H[v
i
The main property of values of a one-way chain is that once a
receiver trusts that a value vi is authentic, it can derive all following
values of the one-way chain by repeatedly computing the one-way
function H, and it can authenticate that an earlier value vj also be-
longs to the one-way chain, by checking that Hi− j[v j] equals vi.
Moreover, an adversary cannot derive later values of the one-way
chain, unless the creator of the chain already published them.
] = vi+1.
4.2.2 Hash Trees
Hash Trees (also known as Merkle hash trees [38]) are an efﬁ-
cient mechanism which reduces the problem of authenticating a
sequence of values v0, v1, . . . , vw−1 to authenticating a single value
r0. In SPV, we use hash trees for three purposes: to authenticate
the values of the single-ASN private key, to authenticate several