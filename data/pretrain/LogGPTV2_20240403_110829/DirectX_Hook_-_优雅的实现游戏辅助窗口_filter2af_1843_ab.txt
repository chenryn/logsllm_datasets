        case WM_SIZE:
            if (g_pd3dDevice != NULL && wParam != SIZE_MINIMIZED)
            {
                CleanupRenderTarget();
                g_pSwapChain->ResizeBuffers(0, (UINT)LOWORD(lParam), (UINT)HIWORD(lParam), DXGI_FORMAT_UNKNOWN, 0);
                CreateRenderTarget();
            }
            return 0;
        case WM_SYSCOMMAND:
            if ((wParam & 0xfff0) == SC_KEYMENU) // Disable ALT application menu
                return 0;
            break;
        case WM_DESTROY:
            ::PostQuitMessage(0);
            return 0;
        }
        return ::DefWindowProc(hWnd, msg, wParam, lParam);
    }
简单整理了下过程
    |--main()
    |        |--CreateWindowW() 创建一个windows窗口用于测试imgui
    |        |--CreateDeviceD3D()
    |        |            |--D3D11CreateDeviceAndSwapChain() 创建设备、设备上下文和交换链
    |        |            |--CreateRenderTarget() 创建渲染目标视图
    |        |--ImGui_Init ImGui初始化
    |        |--while(loop)
    |        |    |--PeekMessage，检测是否收到quit的消息
    |        |    |--ImGui 场景的设置
    |        |    |--g_pd3dDeviceContext->OMSetRenderTargets 将视图绑定到输出合并器阶段
    |        |    |--g_pd3dDeviceContext->ClearRenderTargetView 貌似和绘制背景有关
    |        |    |--g_pSwapChain->Present(1, 0);开始绘制
    |        |    |--后面就是一些结束清理过程了
    |--WndProc()
    |        |--ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam) 如果是Imgui的窗口，就交给Imgui的消息处理函数进行处理
    |        |--switch(msg)
    |        |        |--case WM_SIZE: 当窗口大小改变时产生这个消息
    |        |        |    |--CleanupRenderTarget();g_pSwapChain->ResizeBuffers;CreateRenderTarget();先清理渲染目标视图，然后在创建一个。
    |        |        |--case WM_DESTROY: 接收到WM_DESTROY时
    |        |        |    |--PostQuitMessage(0) 发送消息，结束main函数中的while循环。
###  Hook的函数
imgui的example相当于就是实现了一个使用imgui窗口的D3D11的初始化过程，但是对于游戏，我们不是开发者，不能直接修改代码，所以就只有去hook其中的关键函数，在执行关键函数前，或者关键函数后，执行我们的代码。
所以我们需要明确对于DirectX11，需要hook哪些函数，通过Imgui提供的样例，我们可以知道在DirectX11需要Hook的有三个函数。
  * [IDXGISwapChain::Present](https://learn.microsoft.com/en-us/windows/win32/api/dxgi/nf-dxgi-idxgiswapchain-present)，绘制函数，我们需要在绘制函数前，自己创建一个渲染目标视图，然后是Imgui的初始化和窗口设置。
  * IDXGISwapChain::ResizeBuffers，窗口大小变换时会调用的函数，为了我们的imgui窗口也能够随窗口size变换而正常执行，我们需要hook这个函数，对原渲染目标视图进行release，然后重新创建。
  * WndProc，游戏窗口的消息处理函数，对于imgui窗口的消息，我们需要调用ImGui_ImplWin32_WndProcHandler()来进行处理。
和DirectX9有些不同的是，DirectX11的绘制函数和RESIZE函数是不一样的。
| DirectX9 | DirectX11  
---|---|---  
向用户呈现渲染图像 | [IDirect3DDevice9::EndScene](https://learn.microsoft.com/en-us/windows/win32/api/d3d9helper/nf-d3d9helper-idirect3ddevice9-endscene) |
[IDXGISwapChain::Present](https://learn.microsoft.com/en-us/windows/win32/api/dxgi/nf-dxgi-idxgiswapchain-present)  
改变窗口size调用的函数 | [IDirect3DDevice9::Reset](https://learn.microsoft.com/en-us/windows/win32/api/d3d9helper/nf-d3d9helper-idirect3ddevice9-reset) |
[IDXGISwapChain::ResizeBuffers](https://learn.microsoft.com/en-us/windows/win32/api/dxgi/nf-dxgi-idxgiswapchain-resizebuffers)  
###  实战某游戏
主要还是将github上那个项目中DirectX11的部分分离了出来，然后我简化了其imgui的窗口。
dllmain.cpp，主要就是先创建一个用于输入调试信息的控制台，然后遍历了窗口，准确获取到bf1的窗口句柄，minihook的初始化。
    // dllmain.cpp : 定义 DLL 应用程序的入口点。
    #include "includes.h"
    namespace console
    {
        FILE* output_stream = nullptr;
        void attach(const char* name)
        {
            if (AllocConsole())
            {
                freopen_s(&output_stream, "conout$", "w", stdout);
            }
            SetConsoleTitle(name);
        }
        void detach()
        {
            if (output_stream)
            {
                fclose(output_stream);
            }
            FreeConsole();
        }
    }
    #define RAISE_ERROR(check_var, error_message, success_message) \
    if (!check_var) \
    { \
        MessageBoxA(NULL, error_message, "alternative hack", MB_OK | MB_ICONERROR); \
        FreeLibraryAndExitThread(globals::hmModule, 1); \
    } \
    else \
    { \
        std::cout SetupDX11Hook();
        RAISE_ERROR(m_pHook->pPresentAddress, "Error hook DX11", "present: ");
        RAISE_ERROR(m_pHook->pResizeBuffersAddress, "Error hook DX11", "resizebuffers: ");
        //调用SetWindowLongPtr函数修改了游戏窗口的WndProc，也就是窗口的消息处理函数，具体的消息处理函数将在对应函数位置进行分析。
        m_pHook->SetupWndProcHook();
        RAISE_ERROR(m_pHook->pWndProc, "Error hook wndproc", "wndproc: ")
        while (true)
        {
            Sleep(228);
        }
    }
    BOOL APIENTRY DllMain( HMODULE hModule,
                           DWORD  ul_reason_for_call,
                           LPVOID lpReserved
                         )
    {
        switch (ul_reason_for_call)
        {
        case DLL_PROCESS_ATTACH:
            CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)SetupHackThread, NULL, NULL, NULL);
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
        case DLL_PROCESS_DETACH:
            break;
        }
        return TRUE;
    }
hook.h，hook类的定义，以及声明了几个变量，交换链、设备、设备上下文、渲染目标子资源。
    #pragma once
    class CHook
    {
    public:
        PVOID pPresentAddress;
        PVOID pResizeBuffersAddress;
        WNDPROC pWndProc;
        void SetupDX11Hook();
        void SetupWndProcHook();
    };
    //智能指针类,相当于创建了一个指向CHook类的空指针。
    extern std::unique_ptrm_pHook;
    extern IDXGISwapChain* swapchain;
    extern ID3D11Device* device;
    extern ID3D11DeviceContext* context;
    extern ID3D11RenderTargetView* render_view;
hook.cpp，主要就是之前提到三个函数的hook，然后代码流程和example_win32_directx11差不多。
    #include "../includes.h"
    std::unique_ptrm_pHook = std::make_unique();
    IDXGISwapChain* swapchain = nullptr;
    ID3D11Device* device = nullptr;
    ID3D11DeviceContext* context = nullptr;
    ID3D11RenderTargetView* render_view = nullptr;
    using fPresent = HRESULT(__fastcall*)(IDXGISwapChain*, UINT, UINT);
    fPresent pPresent = NULL;
    using fResizeBuffers = HRESULT(__fastcall*)(IDXGISwapChain*, UINT, UINT, UINT, DXGI_FORMAT, UINT);
    fResizeBuffers pResizeBuffers = NULL;
    static bool renderview_lost = true;
    namespace vars
    {
        static bool bMenuOpen=true;
    }
    enum IDXGISwapChainvTable //for dx10 / dx11
    {
        QUERY_INTERFACE,
        ADD_REF,
        RELEASE,
        SET_PRIVATE_DATA,
        SET_PRIVATE_DATA_INTERFACE,
        GET_PRIVATE_DATA,
        GET_PARENT,
        GET_DEVICE,
        PRESENT,
        GET_BUFFER,
        SET_FULLSCREEN_STATE,
        GET_FULLSCREEN_STATE,
        GET_DESC,
        RESIZE_BUFFERS,
        RESIZE_TARGET,
        GET_CONTAINING_OUTPUT,
        GET_FRAME_STATISTICS,
        GET_LAST_PRESENT_COUNT
    };
    void InitImGui()
    {
        IMGUI_CHECKVERSION();
        ImGui::CreateContext();
        ImGuiIO& io = ImGui::GetIO(); (void)io;
        ImGui_ImplWin32_Init(globals::hGame);
        ImGui_ImplDX11_Init(device, context);
    }
    void BeginScene()
    {
        ImGui_ImplDX11_NewFrame();
        ImGui_ImplWin32_NewFrame();
        ImGui::NewFrame();
        bool show_demo_window = true;
        ImGui::ShowDemoWindow(&show_demo_window);
        ImGui::Begin("Another Window", &show_demo_window);   // Pass a pointer to our bool variable (the window will have a closing button that will clear the bool when clicked)
        ImGui::Text("Hello from another window!");
        static int counter = 0;
        if (ImGui::Button("Button"))                            // Buttons return true when clicked (most widgets return true when edited/activated)
            counter++;
        ImGui::Text("counter = %d", counter);
        ImGui::End();
        ImGui::Render();
        ImGui_ImplDX11_RenderDrawData(ImGui::GetDrawData());
    }
    HRESULT __fastcall Present_Hooked(IDXGISwapChain* pChain, UINT SyncInterval, UINT Flags)
    {
        //第一次调用时，创建渲染目标视图
        if (renderview_lost)
        {
            if (SUCCEEDED(pChain->GetDevice(__uuidof(ID3D11Device), (void**)&device)))
            {
                device->GetImmediateContext(&context);
                ID3D11Texture2D* pBackBuffer;
                pChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&pBackBuffer);
                device->CreateRenderTargetView(pBackBuffer, NULL, &render_view);
                pBackBuffer->Release();
                std::cout  renderview successfully received!"  first called!" OMSetRenderTargets(1, &render_view, NULL);
        //imgui窗口的绘制
        BeginScene();
        return pPresent(pChain, SyncInterval, Flags);
    }
    HRESULT __fastcall ResizeBuffers_hooked(IDXGISwapChain* pChain, UINT BufferCount, UINT Width, UINT Height, DXGI_FORMAT NewFormat, UINT Flags)
    {
        static auto once = []()
        {
            std::cout  first called!" Release();
        render_view = nullptr;
        //将标志改为true，这样下次Present_Hooked，又会创建一个渲染目标视图。
        renderview_lost = true;
        //这两个没看懂，imgui的example_win32_directx9有类似的代码，但是
        ImGui_ImplDX11_CreateDeviceObjects();
        ImGui_ImplDX11_InvalidateDeviceObjects();
        return pResizeBuffers(pChain, BufferCount, Width, Height, NewFormat, Flags);
    }
    void CHook::SetupDX11Hook()
    {
        //创建设备、设备上下文和交换链，只需要一个东西，就是目标窗口的hWnd
        D3D_FEATURE_LEVEL feature_level = D3D_FEATURE_LEVEL_11_0;
        DXGI_SWAP_CHAIN_DESC scd{};
        ZeroMemory(&scd, sizeof(scd));
        scd.BufferCount = 1;
        scd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
        scd.BufferDesc.Scaling = DXGI_MODE_SCALING_UNSPECIFIED;
        scd.BufferDesc.ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED;
        scd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
        scd.Flags = DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH;
        scd.OutputWindow = globals::hGame;
        scd.SampleDesc.Count = 1;
        scd.SwapEffect = DXGI_SWAP_EFFECT_DISCARD;
        scd.Windowed = TRUE;
        scd.BufferDesc.RefreshRate.Numerator = 60;
        scd.BufferDesc.RefreshRate.Denominator = 1;
        //https://learn.microsoft.com/en-us/windows/win32/api/d3d11/nf-d3d11-d3d11createdeviceandswapchain
        if (FAILED(D3D11CreateDeviceAndSwapChain(NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, NULL, &feature_level, 1, D3D11_SDK_VERSION, &scd, &swapchain, &device, NULL, &context)))
        {
            std::cout (swapchain);
        //获取需要hook的两个函数的地址，就是IDXGISwapChain接口提供的两个函数。
        //向用户呈现渲染图像。IDXGISwapChain::Present
        this->pPresentAddress = reinterpret_cast(pVTableSwapChain[IDXGISwapChainvTable::PRESENT]);
        //更改交换链的后台缓冲区大小、格式和缓冲区数量。这应该在应用程序窗口大小调整时调用。IDXGISwapChain::ResizeBuffers
        this->pResizeBuffersAddress = reinterpret_cast(pVTableSwapChain[IDXGISwapChainvTable::RESIZE_BUFFERS]);
        //开始hook，主要过程就是在执行原Present函数前，创建渲染目标视图，然后imgui初始化，绘制