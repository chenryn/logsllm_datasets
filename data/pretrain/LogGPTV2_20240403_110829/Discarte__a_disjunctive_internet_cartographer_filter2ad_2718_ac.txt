and error-prone, not only because of the need to infer the different
RR implementations of routers, but also due to complex network
topology features (Section 3).
Our system, DisCarte, uses disjunctive logic programming (DLP) [5,
34, 19], a constraint solving technique that, to the best of our knowl-
edge, has not been used for topology discovery. DLP has the ability
to describe a low-level set of inter-dependent interactions while si-
multaneously shaping the solution to match high-level constraints.
For example, we instruct DLP to ﬁnd the set of RR implementations
such that the link and alias assignments do not cause routers to have
self-loops. The DisCarte process (Figure 5) consists of fact gener-
ation (Section 4.2) and fact processing (Section 4.3 – 5) phases.
We describe our data collection phase in Section 6. In this section,
we provide a brief description of the DLP technique, describe how
we transform raw topology data into DLP facts, and present the
DisCarte address alignment algorithm and its corresponding cost
function.
4.1 DLP Introduction
DLP is a formalism representing indeﬁnite information. Super-
ﬁcially similar to Prolog, language statements consist of facts, in-
ference rules, and weak and strong constraints. Inference rules are
disjunctive—they are of the form:
fact1 or fact2 or . . . or factn ⇐ fact0
(1)
indicating that fact0 implies exactly one fact in the set of facts
fact1 . . . factn. Because each inference rule can potentially imply
many different facts, a disjunctive logic program has many possible
solutions, or models. Potential models are then pruned by strong
and weak constraints. Any model that violates a strong constraint
is removed from the solution set, and the remaining models are as-
signed a numeric cost based on the weak constraints they violate.
The output from a DLP is the lowest cost model of inferred facts
generated from input facts and inference rules.
The speciﬁc DLP implementation we use is DLV [19]. The lan-
guage restricts how constraints are speciﬁed, to preserve the mono-
tonicity property of the cost function: that adding new facts can
only increase that cost of a model. DLV uses this property to prune
high cost sub-trees from the solution space. DLP can efﬁciently
represent complex problems, for example, the formulation for the
graph 3-color-ability problem [11] is two lines long [8].
arriving at an Arriving or Mixed router, or (c) traversing a Hidden
router. Traversing a NotImpl router (or entering an MPLS tunnel,
which has the same effect) does not add to the delta. The inference
rule is the list of possible RR-type transitions that would result in a
probe pair with the same delta. For example:
4.2 Data Pre-processing
Raw trace data must be converted into facts for DLP. These
facts consist of both straightforward parsing of the data, deriving
facts more easily computed without DLP, and probe pairs. Here,
we describe the facts computed in the pre-processing step.
Some network topology features can be identiﬁed statically with-
out DLP. Routers with the Mixed RR implementation have a sim-
ple signature:
the response to a TTL-limited probe comes from
router X, and the last entry in the RR array is also X. Similarly,
we declare a router X to be Lazy if all non-RR probes with TTL=t
return ICMP time-exceeded responses from X, all RR probes with
TTL=t return responses from a different router Y , and all non-RR
probes with TTL=t + 1 return from router Y . Responses to RR
probes from non-standard ﬁrewalls have the source address set to
the probe’s destination, instead of the router’s interface. Once these
network features have been detected, we correct for them as we
identify probe pairs.
Two TTL-limited probes form a “probe pair” if one probe ex-
pires at router X, and the other probe goes through X and expires
at the next TTL. Each probe pair fact is of the following form:
“probePair(p1,p2,delta)”, where p1 and p2 are unique probe iden-
tiﬁers, and delta is the difference between the size of the two RR
arrays. By convention, p2 is the probe that went one TTL farther.
Identifying probe pairs in non-RR (traceroute-only) data is trivial
but error prone: mid-measurement path instabilities (Section 2) can
cause sequential probes to take different paths. When adding RR
to probes, probe pair identiﬁcation becomes more accurate—RR
probes record the traversed path—but more complicated. Lazy RR
implementations and multi-path routing with different length paths
complicate probe pair identiﬁcation. For example, after passing
through a Lazy router, TTL-limited probes with RR set go one hop
farther then intended. Before we can try to identify probe pairs in
the presence of a Lazy router, all probes with RR that pass through
that router must be re-normalized as if they were sent from the sub-
sequent TTL. Also, if there is evidence of multi-path routing with
different length paths, we must be careful to only compare probes
that took the same length path. Last, if a trace has both Lazy routers
and different length paths, we can only identify Lazy routers on the
path taken by the non-RR probes, so information on the other path
must be discarded.
4.3 Address Alignment with DLP
Though an exotic choice, DLP lends itself well to the address
alignment problem. For each trace, the pre-processor will output a
set of potentially over-lapping probe pairs: probePair(X, Y, delta1)
and probePair(Y, Z, delta2). The job of the DLP is to infer the
most likely RR implementation type assignments that are globally
consistent: router Y must have the same RR type in all of its probe
pairs. Then, based on the type assignments, DLP outputs link and
alias facts that form a topology.
To constrain the assignment of implementation types to those
consistent with the probe pair facts, we express DLP inference rules
that describe each possible transition from router to router for each
delta in a probe pair. The delta is the number of additional RR
entries in the second probe of the pair, and may be any number
from 0 to 9, though we have not observed a delta greater than 4.
An RR entry will be added when (a) leaving a Departing router, (b)
transition(X, Y, Departing, Departing)
transition(X, Y, Arriving, Arriving)
transition(X, Y, Departing, N otImpl)
transition(X, Y, N otImpl, Arriving)
transition(X, Y, N otImpl, Hidden, Departing)
transition(X, Y, N otImpl, Hidden, N otImpl)
⇐probeP air(X, Y, delta),
delta = 1.
or
or
or
or
or
or
(2)
indicates that if we ﬁnd a probe pair with delta = 1, then the transi-
tion between the router corresponding to the ﬁrst probe (X) and the
router corresponding to the second probe (Y ) is a transition from a
Departing-type RR router to another Departing-type RR router or
from a Arriving-type RR type router to another Arriving-type RR
router, etc. We must include more atypical transitions, such as from
a router that does not implement RR (NotImpl), through a router
that does not show up in traceroute but implements RR (Hidden),
to another router that does not implement RR (NotImpl). We wrote
DLP inference rules for delta=0 . . . 4, and show the possible tran-
sitions from 0 through 2 in Table 1. We also implement a duplicate
set of all rules where the RR array is full (Section 3.2). Thus for
a probe with full RR array and delta = X, all possible transitions
for delta ≥ X must be considered.
Multiple possible transitions per probe pair and independent com-
putation of probe pairs imply that there are potentially exponen-
tially many models relative to the number of probe pairs. We dis-
cuss the cost function for intelligently pruning this set to produce
the best model (Section 4.4) and our divide-and-conquer technique
for scaling this algorithm (Section 5).
4.4 Engineering Practices and Cost Function
Recall from Section 4.1 that DLP supports strong and weak con-
straints: models that violate strong constraints are removed and the
rest are ordered by degree of weak constraints violated. DLP out-
puts the lowest cost model.
The only strong constraint in the DisCarte system is that a router’s
RR implementation must be consistent across all its interfaces. In
other words, it is never the case that the same router uses the De-
parting RR behavior for one interface and Arriving RR behavior
for another interface. A potential issue with this rule is the MPLS
RR type, where individual interfaces might appear to be of RR type
Departing or NotImpl. The strong constraints are carefully written
to handle this exception.
Weak constraints are chosen based on observed patterns which
we believe correspond to network engineering practices. Each prac-
tice should hold as a general rule of thumb, but may be violated
in an individual solution. Thus the model that violates the fewest
practices is likely to be the closest approximation of reality. Here
we list weak constraints in order of importance.
1. There should be no self-loops: a correctly-implemented router
would never route packets directly back to itself. Avoiding
this condition prevents situations where two distinct routers
are merged by a single bad alias, and conversely when a link
is incorrectly added between interfaces on the same router [3].
2. Many IP addresses on either end of a link are adjacent in
IP space: they are “off-by-one.” We expect that network ar-
delta=0
NotImpl → NotImpl
NotImpl → Departing
delta=1
NotImpl → Hidden → NotImpl
NotImpl → Hidden → Departing
delta=2
NotImpl → Hidden → Hidden → NotImpl
NotImpl → Hidden → Hidden → Departing
Arriving or Mixed → Hidden → Hidden → NotImpl
Arriving or Mixed → NotImpl
Arriving or Mixed → Departing Arriving or Mixed → Hidden → Departing Arriving or Mixed → Hidden → Hidden → Departing
Arriving or Mixed → Hidden → NotImpl
NotImpl → Arriving or Mixed
Departing → NotImpl
Departing → Departing
Arriving or Mixed → Arriving or Mixed
NotImpl → Hidden → Arriving or Mixed
Departing → Hidden → NotImpl
Departing → Hidden → Departing
Departing → Arriving or Mixed
Arriving or Mixed → Hidden → Arriving or Mixed
Table 1: Possible router RR implementation transitions arranged by RR delta; deltas 3 and 4 are not shown. Arriving and Mixed
are written together to save space.
chitects try to conserve address space by using the smallest
network blocks available, either /30 or /31. The implication
is that models where the IP addresses of links are off-by-one
should be preferred over those without. Gunes et al. use this
technique to infer aliases directly [14]. Figures 2 and 3 show
this behavior.
3. Aliases inferred by direct probing (ally [40]) are often cor-
rect. The validity of direct probing techniques [41, 12] has
been independently demonstrated, so that information should
be used when available. However, due to temporal changes
in topology or potential for inaccuracies in the technique, in-
formation from direct probing remains a weak constraint.
4. Hidden routers are rare, so of two equally-likely models, the
solution with the fewest hidden routers should be preferred.
We derive this rule from observation of out-of-band data,
such as DNS naming conventions and /30 and /31 IP address-
ing in links.
5. Routers supporting RR are more common than those that do
not (NotImpl). We verify this empirically by observing that
with each new TTL, subsequent probes in a trace typically
record new RR entries.
The cost for a model is assigned based on the number of prac-
tices violated, weighted by the importance of the practice. We ex-
perimented with different weight assignments, but as long as the
relative importance of practices remained as above, the weight as-
signment did not affect the ﬁnal solution. Also, it is possible for
DLP to output multiple equal-cost models, if there is insufﬁcient
information to make an alignment, or no model at all, if there is an
error in the data or ﬂaw in our model. We next address both points
further.
5. SCALING AND CONFLICTS
DLP alone does not scale to Internet-sized topologies, as the
number of possible RR implementation assignments grows expo-
nentially with the number of probe pairs. Our top-level approach
is to process the data in pieces large enough to provide the correct
solutions, yet small enough that they are solved quickly—divide
and conquer. Merging processed pieces back together can expose
conﬂicts: that the same pair of IP addresses are believed to be both
aliased and linked. In this section, we describe a data partitioning
method that reduces conﬂicts and engineer a technique to resolve
conﬂicts once they occur.
Two-Clique
Triangle Subset
S1
S2
S1
S2
Overlap
for 
Cross-
Validation
D
Figure 6: We ﬁrst align addresses in two-cliques (left) between
all sources and then subset triangles (right) to all destinations
increasing overlap and decreasing errors.
5.1 Divide and Conquer
Dividing the data is easy; dividing the data while preserving
enough information for DLP to produce meaningful results is difﬁ-
cult. Our ﬁrst approaches at partitioning the data produced a scal-
able execution—one trace per run, or many traces from the same
source—but they resulted in many incorrect inferences. Because
each run interpreted only the data from probes leaving the source,
the DLP solver missed potentially conﬂicting data from measuring
the return path.
To provide a core of correct, reliable address alignments and
router implementation inferences, we start by computing all two-
cliques—the trace from site X to Y with the trace from Y to X—as
shown in Figure 6, left.
Atop this core, we process triangle-like subsets of all traces be-
tween pairs of sources and a destination (Figure 6, right). The
insight is that the path between the source pair has already been
computed and found to be free of conﬂicts, so it is reliable. By us-
ing this approach, we reduce the number of unresolved conﬂicts—
those conﬂicting inferences that remained after all processing—
from 1,547 to 28 in the PlanetLab data set.
We hoped to process all possible triangle subsets for maximum
overlap and thus maximum cross-validation, but with 379 sources
and 376,408 destinations, this task is intractable. Instead, we pro-
cessed the 71 million non-overlapping triangle subsets on a 341
processor (heterogeneous) Condor [20] cluster. Triangle subsets
typically take a second to process, though the execution time is
highly variable. The Condor scheduler estimates that we have used
96,225 hours or approximately 11 CPU years on this project (in-
cluding time spent debugging).
5.2 Unions and Conﬂicts
We extract the facts in the models produced by the divide and
conquer phase and search for contradictions. A contradiction ap-
pears when two addresses that are thought to be aliases are seen to
be linked in a subset of facts. (Two IP addresses can be assigned to
the same router if they are aliases of aliases, so the alias inference
can result from several sets of facts; a link cannot be synthesized
from different traces–see Section 4).
To resolve conﬂicts, we pick an arbitrary model from each fac-
tion (those indicating link and those indicating alias) and run both
input subsets together through DLP. If the result contains exactly
one model, then the conﬂict is resolved, and we record whether
the IP addresses are linked or aliased as a hint. Once the hint is
recorded, all affected models are recomputed via DLP.
The conﬂict resolver can fail to resolve a conﬂict if the DLP out-
puts multiple models with both link and alias facts asserted, or no
model at all. Having multiple models indicates that we have insuf-
ﬁcient information to resolve this conﬂict, whereas producing no
models indicates an error in the input or a potentially new RR be-
havior. In any case, if the conﬂict resolver cannot resolve the con-
ﬂict, then all facts associated with the two IP addresses are removed
from the model. In our experiments, 12,731 of 9,793,309 (0.13%)
of subsets produce no valid model, and 22,095 of 1,021,027 (3.7%)
of facts remain unresolved. It is the subject of our future work to
characterize the unresolvable traces and improve the conﬂict reso-
lution process.
6. DATA COLLECTION
We collect two sets of topology data to validate DisCarte: one
between PlanetLab nodes and the other from PlanetLab nodes to
all advertised BGP preﬁxes. For both, we perform TTL-limited
traceroute-like probes with and without the RR option set. For the
BGP preﬁxes data set, we also use the “stoplist” technique to avoid
probing destinations in a way that might appear abusive. We con-
clude by reporting on the distribution of stable routing loops that
we discover in our experiments.
6.1 Data Sets
The PlanetLab [32] data set is an all-pairs trace, from all Planet-
Lab nodes to all other PlanetLab nodes. This repeats the Passen-
ger [38] study. Because some PlanetLab nodes were unavailable,
we were able to collect data from only 387 nodes.
In the BGP data set, we probe 376,408 destinations. To generate
the destinations, we divide each advertised BGP preﬁx [26] into a
/24 sub-preﬁx, choose a representative address from each by setting
the last bit, and then remove unresponsive IP addresses. This IP
generation strategy is similar to iPlane [21], except that we dis-
aggregate larger preﬁxes down to /24-sized sub-nets.
We probe using traceroute’s increasing TTL, alternating probes
with and without the RR option set, three times with each. We
stop probing a destination after probes for six sequential TTLs have
been dropped. Due to ﬁrewalls that drop probes and source nodes
rebooting, we do not have data for all sources to all destinations,
but we do collect approximately 1.3 billion probe responses.
6.2 Stoplist Probing
We believe that RR probes are more likely to generate abuse re-
ports then other topology discovery techniques. The RR option
is rare and intrusion detection systems target anomalous events.
However, we note that network mapping need not probe destina-
tion hosts often: careful measurement coordination can avoid re-
ports of abuse. Our insight is that we can avoid probing destination
networks from every source by noticing when the path from a new
source merges with an already-observed path.
The goal of our “stoplist” technique is to give each destination a
red zone: a region close to the destination that will not be probed
from machines outside our control. A stoplist is a per-destination
list of the last k IP addresses on a trace to the destination. We
generate the stoplist from a single host under our administrative
control, so potential abuse reports can be handled locally without
involving PlanetLab support. To generate the stoplist, we run a
reverse traceroute to each destination and record the last k = 3