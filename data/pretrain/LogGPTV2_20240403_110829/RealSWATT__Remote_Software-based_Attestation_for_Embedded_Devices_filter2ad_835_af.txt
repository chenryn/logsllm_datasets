ment the same functionality. Castelluccia et al. demonstrated that
SWATT [46] can be undermined using a faster implementation of
the attestation function [12]. As described in Section 3, this gives
an attacker a time slot, where the attestation does not run although
the verifier assumes the prover is currently running the attesta-
tion function. RealSWATT addresses this issue using standard hash
functions like SHA-256, for which optimized implementations or
even hardware acceleration exist, as elaborated in Section 5.1. As
these hash functions are widely and have been well-studied in the
past [38], it is unlikely that there exist implementations that sig-
nificantly improve the execution speed; especially compared to
hardware-assisted hash functions as we use in RealSWATT. Since
we use global and standardized hashing algorithms (SHA-2) [38],
highly optimized software implementations are available in case
the target platform features no hardware hashing module.
8.4 Network-based Attacks
Connected devices are inherently prune to network-based attacks.
Common practical issues in remote attestation, such as offloading
the attestation process, have been considered in the design as dis-
cussed in Section 5. In the following, we explain network-based
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2901attacks remote attestation faces and how these issues have been
addressed.
Shifting the attestation to another device. The IoT gateway
prevents external communication. Hence, it is neither possible
to leak attestation data (e.g., the nonce) to a remote party nor to
receive attestation reports from outside the network. All IoT devices
in the network are covered by the attestation, so there are no free
resources to perform an attestation on behalf of another device.
Delaying communication. The attacker can delay the communi-
cation between the prover and the verifier. As some variation in
the transmission time is normal, this would remain undetected to
the verifier. While this would be a critical problem in traditional
software-based attestation, RealSWATT attestation is designed to
work with delays as imposed by communication for example using
standard Wi-Fi networks. The concept of continuous attestation en-
sures that even if communication is delayed, the attestation process
remains unaffected. Continuous attestation sends a second nonce
before the previous attestation process has finished. The verifier
times the second nonce such that it should arrive even under the
worst expected network latency (see Section 5.1). All attestation
runs on the prover are continuously running and have constant
attestation time tatt . If communication is intentionally delayed by
the attacker, the verifier will detect the shift in communication
delay and the attestation time will exceed the threshold ts.
9 RELATED WORK
There exist different approaches to implement remote attestation
as we review in the following:
Hardware-based. Trusted hardware that can provide trusted exe-
cution environments (TEE) allows to securely execute computations
and store information on an unstrusted or potentially compromised
system. Examples for platforms with TEEs are Intel SGX [16] and
Arm TrustZone ARM Limited. Trusted computing technology is
integrated into many sophisticated off-the-shelf processors as they
are used in servers, personal computers, and smartphones. In con-
trast, less powerful processors as they are used in embedded and
IoT devices do not feature such TEEs due to cost reasons. TEEs can
be used to reliably monitor the data and execution in the normal
world from within the secure world. Hence, the monitoring cannot
be influenced. For example Abera et al. proposed C-FLAT, a frame-
work to remotely verify the control flow of applications running
in the normal world using the TrustZone of an Arm processor [2].
However, these trusted computing modules are often not available
on legacy embedded devices due to cost reasons.
Software-based. Software-based attestation (SWATT) works un-
der the assumption that the attacker cannot change the target
device and its computing capabilities. The attacker is not able to
introduce further computing resources, hence the execution time of
specific operations is bound. This circumstance allows to measure
the response time of the prover: if it takes longer than expected,
the system is likely compromised. The attacker cannot forge these
results as this would require further operations, so that the response
cannot be sent in time [46]. However, software-based remote at-
testation works upon strict timing assumptions on the response of
the prover and the verifier. This induces many requirements upon
the implementation of attestation logic and communication [7, 46].
As software-based remote attestation requires no customized hard-
ware, it is commonly used in sensor networks [53].
Hybrid. Hybrid attestation schemes describe a hardware-/software
co-design, that performs remote attestation in software supported
by custom hardware extensions. These hardware extensions al-
low to securely store keys or track the execution of commands
on the processor. This gives a root of trust, so that the attested
device cannot be emulated or replaced by the adversary. There exist
various proposals for attestation to use customized hardware to
provide remote attestation functionality [10, 20, 34, 40]. SMART
is the first attestation scheme that builds upon simple customized
hardware [20]. While the attestation is performed in software, the
key is protected using custom hardware functionality so that it is
not leaked during attestation.
While SMART uses a small extension to protect the keys used
for remote attestation, it lacks more sophisticated features like the
ability to update the attestation code. Furthermore, SMART requires
the attestation to run atomically, which is a major drawback in
many application scenarios where the attested device may not
be interrupted by the attestation process, e.g., realtime systems.
TrustLite does not have these limitations, as it allows to isolate
different software modules with hardware modifications of the
Memory Protection Unit (MPU) and the exception engine of the
processor [34]. TyTan builds upon TrustLite and extends it such
that it is able to run applications with realtime requirements [10].
VRASED is a formally verified hardware/software co-design for
remote attestation [40] and allows to verify the state of device
memory. It has been extended to also verify reset, erasure and
update of devices [41] and also attest that code has actually been
executed [42].
While these hybrid attestation schemes have many advantages,
the required custom hardware extensions are not available on al-
ready manufactured legacy devices. The creation of customized
hardware is complex and adds significant costs to the manufac-
turing. Embedded systems often use off-the-shelf microprocessors
with generic hardware modules. For the implementation of a hy-
brid attestation scheme the device itself needs to be replaced. Thus,
hybrid attestation is no viable option for legacy devices.
10 CONCLUSION AND SUMMARY
In this paper, we presented RealSWATT, a purely software-based
remote attestation framework that allows to attest even systems
with realtime constraints. RealSWATT is designed to work on legacy
devices in real-world IoT scenarios. We achieve this by introducing
continuous attestation, which constantly performs attestation in
the background without interfering with normal operation of the
system by using a dedicated processor core. In the evaluation, we
show that RealSWATT attestation actually has predictable and
constant runtime, a mandatory requirement for software-based
attestation. We implemented RealSWATT into a syringe pump, a
critical medical device with realtime requirements. In an end-to-
end experiment, we detected a compromise of the syringe pump
via an insecure configuration interface. To show practicability we
integrated RealSWATT into ESPEasy, an open-source framework
to use on commercial off-the-shelf IoT devices.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2902APPENDIX
In the appendix, we give implementation details on the prover,
verifier and test bed. We provide additional information on the
integration of RealSWATT into the syringe pump. Furthermore, we
explain the measurements of the power consumption of the syringe
pump with and without the attestation to quantify the increase of
the power consumption due to the attestation.
partition table [29]. The partition structure depends on the imple-
mented application and the required functionalities. For example
if an update mechanism such as over-the-air (OTA) update [28]
is used, additional partitions are required. A simple application
with no OTA update functionality consists of the following three
partitions:
Listing 1: Default ESP32 Partition without OTA [29]
A IMPLEMENTATION DETAILS
A.1 Prover and Verifier
The attestation is implemented as two separate tasks, one receiving
the attestation requests from the verifier, and one task to perform
the actual attestation. Both tasks are pinned to the dedicated and
previously unused processor core to ensure no side effects between
the attestation and the realtime operation of the attested device. We
verify that the attestation runs continuously without distractions
from the realtime operation. RealSWATT attestation has the possi-
bility to configure the runtime of the attestation. The runtime needs
to balance between delay (compromise detection of the attested
device) and communication overhead. This is done by configuring
the number of repetitions of the hashing function. More repetitions
invoke a longer run time. At the end of each attestation run, the
result is sent to the verifier which then checks its validity.
When integrating RealSWATT attestation into a new device, the
runtime of the attestation function has to be determined and the
number of repetitions has to be configured. In Section 7 we perform
a detailed measurement of runtime and communication overhead
on the implementation of RealSWATT.
As mentioned the verifier receives the attestation reports and
checks its validity. The verifier implements the RealSWATT attes-
tation protocol and sends two nonces to the prover. Each nonce
triggers an attestation run. It is the verifier’s responsibility to time
the transmission of these nonces. The design of the protocol is ex-
plained in Section 5.2. In Section 7, we elaborate on how to correctly
time these message intervals and determine the thresholds for the
attestation.
There are two available implementations for the verifier. First, we
used Python, later we opted for C++. Since Python is an interpreter-
based programming language the Python implementation of the
verifier can be used without adjustment across a wide range of
devices. The only requirement is that a Python interpreter for the
device is available. However we assumed a worse network response
time than with a native C or C++ implementation. In order to check
the influence of the programming language we also implemented
the verifier as a native C++ application. Contrary to our expecta-
tions, the programming language had little to no impact on the
measured network response times.
B REAL-WORLD DEVICES
B.1 Syringe Pump
In the following, we explain real-world details of the attestation
based on the syringe pump use-case implemented on the ESP32.
The ESP32 allows for the custom creation of partitions. A developer
can define memory sections on the chip in a data structure called
1
2
3
4
5
# ESP-IDF Partition Table
# Name, Type, SubType, Offset, Size,Flags
nvs, data, nvs, 0x9000, 0x6000,
phy_init, data, phy, 0xf000, 0x1000,
factory, app, factory, 0x10000, 1M,
The partitions are by default (1) factory, (2) phy_init and (3)
nvs. Partition (1) factory contains the application code, i.e., the exe-
cutable. The second partition (2) phy_init contains data required for
the physical initialization process of the device. The third partition
(3) nvs stores the configuration of the actual application.
The syringe pump is implemented with this default partition
mapping. The code is saved on the factory partition and the con-
figuration data is included in the nvs partition. The syringe pump
comes with multiple internal and external configuration options.
Internal configurations cover physical characteristics of the syringe
pump such as the length of the syringe barrel:
Listing 2: Internal configuration of the syringe pump
1
2
3
4
5
6
typedef struct {
uint16_t syringe_volume_ml;
uint16_t syringe_barrel_length_mm;
float threaded_rod_pitch;
....
} internal_settings;
The internal configuration is required to transpose configured
information such as the amount of medicine into the precise amount
of rotation steps of the stepper motor driving the threaded rod of
the pump. The syringe pump has also its usual medical settings
available to the medical personal such as injection intervals and
amount of medicine:
Listing 3: Medical configuration of the syringe pump
typedef struct {
uint32_t injections_ms;
uint16_t dosage_ml;
uint8_t bolus_step_index;
1
2
3
4
5
} medical_settings;
In order to attest the syringe pump the data from all three par-
titions factory, phy_init, and nvs is read and concatenated. Then,
we append the nonce and feed this data into the hardware hashing
module of the ESP32. The resulting hash value is then repeatedly re-
hashed and sent to the verifier. Since the verifier knows the original
syringe pump code as well as the physical initialization parameters
and the configured options, it can verify the correct state of the
syringe pump. The verifier can either integrate a device configu-
ration manager or be notified by an external one about legitimate
configuration changes. In our use-case we have integrated this
functionality into the verifier.
Session 11A: Attestation and Firmware Security CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2903The next nonce is sent by the verifier such that it arrives at the
prover just before the end of the expected attestation time, even
with worst-case network latency. As explained in Section 5.2, we
have chosen 100 repetitions, such that tatt = 1000ms ≫ tr tt as
Table 1 shows. The verifier is configured to send the second nonce
750 ms after the previous nonce.
B.2 Power Consumption
In order to evaluate the measured power consumption, we have
checked the corresponding data sheet [26] of our ESP32 evaluation
board. The data sheet provides the expected power consumption in