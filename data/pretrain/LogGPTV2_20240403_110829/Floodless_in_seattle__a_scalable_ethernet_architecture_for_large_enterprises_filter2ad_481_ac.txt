with the old and new MAC addresses as keys. Third, in the case of
an IP address change, we need to ensure that future ARP requests
for h’s old IP address are no longer resolved to h’s MAC address.
To ensure this, sh deletes h’s old IP-to-MAC mapping and insert
the new one. Finally, if multiple changes happen at once, the above
steps occur simultaneously.
Ensuring seamless mobility: As an example, consider the case of a
mobile host h moving between two access switches, sold
h and snew
.
To handle this, we need to update h’s MAC-to-location mapping to
point to its new location. As described in Section 4.1, snew
inserts
(mach, snew
) into rh upon arrival of h. Note that the location re-
solver rh selected by F(mach) does not change when h’s location
changes. Meanwhile, sold
h ) when it detects h
is unreachable (either via timeout or active polling). Additionally,
to enable prompt removal of stale information, the location resolver
rh informs sold
).
However, host locations cached at other access switches must
be kept up-to-date as hosts move. SEATTLE takes advantage of
the fact that, even after updating the information at rh, sold
h may
receive packets destined to h because other access switches in the
network might have the stale information in their forwarding tables.
Hence, when sold
h receives packets destined to h, it explicitly noti-
ﬁes ingress switches that sent the misdelivered packets of h’s new
location snew
h also forwards
those misdelivered packets snew
. To minimize service disruption, sold
h ) is obsoleted by (mach, snew
h deletes (mach, sold
h that (mach, sold
h
.
h
h
h
h
h
2The default setting of the ARP cache timeout in most common
operating systems ranges 10 to 20 minutes.
h
Updating remote hosts’ caches:
In addition to updating con-
tents of the directory service, some host changes require inform-
ing other hosts in the system about the change. For example, if a
host h changes its MAC address, the new mapping (iph, macnew
)
must be immediately known to other hosts who happened to store
(iph, macold
h ) in their local ARP caches. In conventional Ethernet,
this is achieved by broadcasting a gratuitous ARP request origi-
nated by h [29]. A gratuitous ARP is an ARP request contain-
ing the MAC and IP address of the host sending it. This request
is not a query for a reply, but is instead a notiﬁcation to update
other end hosts’ ARP tables and to detect IP address conﬂicts on
the subnet. Relying on broadcast to update other hosts clearly
does not scale to large networks. SEATTLE avoids this problem
by unicasting gratuitous ARP packets only to hosts with invalid
mappings. This is done by having sh maintain a MAC revocation
list. Upon detecting h’s MAC address change, switch sh inserts
(iph, macold
) in its revocation list. From then on, when-
ever sh receives a packet whose source or destination (IP, M AC)
address pair equals (iph, macold
h ), it sends a unicast gratuitous
ARP request containing (iph, macnew
) to the source host which
sent those packets. Note that, when both h’s MAC address and
location change at the same time, the revocation information is cre-
ated at h’s old access switch by h’s address resolver vh = F(iph).
To minimize service disruption, sh also informs the source host’s
ingress switch of (macnew
, sh) so that the packets destined to
macnew
can then be directly delivered to sh, avoiding an addi-
tional location lookup. Note this approach to updating remote ARP
caches does not require sh to look up each packet’s IP and MAC
address pair from the revocation list because sh can skip the lookup
in the common case (i.e., when its revocation list is empty). Entries
from the revocation list are removed after a timeout set equal to the
ARP cache timeout of end hosts.
h , macnew
h
h
h
h
5. PROVIDING ETHERNET-LIKE
SEMANTICS
To be fully backwards-compatible with conventional Ethernet,
SEATTLE must act like a conventional Ethernet from the perspec-
tive of end hosts. First, the way that hosts interact with the network
to bootstrap themselves (e.g., acquire addresses, allow switches to
discover their presence) must be the same as Ethernet. Second,
switches have to support trafﬁc that uses broadcast/multicast Eth-
ernet addresses as destinations. In this section, we describe how to
perform these actions without incurring the scalability challenges
of traditional Ethernet. For example, we propose to eliminate
broadcasting from the two most popular sources of broadcast traf-
ﬁc: ARP and DHCP. Since we described how SEATTLE switches
handle ARP without broadcasting in Section 4.2, we discuss only
DHCP in this section.
5.1 Bootstrapping hosts
Host discovery by access switches: When an end host arrives at a
SEATTLE network, its access switch needs to discover the host’s
MAC and IP addresses. To discover a new host’s MAC address,
SEATTLE switches use the same MAC learning mechanism as con-
ventional Ethernet, except that MAC learning is enabled only on
the ports connected to end hosts. To learn a new host’s IP address
or detect an existing host’s IP address change, SEATTLE switches
snoop on gratuitous ARP requests. Most operating systems gen-
erate a gratuitous ARP request when the host boots up, the host’s
network interface or links comes up, or an address assigned to the
interface changes [29].
If a host does not generate a gratuitous
ARP, the switch can still learn of the host’s IP address via snoop-
ing on DHCP messages, or sending out an ARP request only on
the port connected to the host. Similarly, when an end host fails or
disconnects from the network, the access switch is responsible for
detecting that the host has left, and deleting the host’s information
from the network.
Host conﬁguration without broadcasting: For scalability, SEAT-
TLE resolves DHCP messages without broadcasting. When an ac-
cess switch receives a broadcast DHCP discovery message from an
end host, the switch delivers the message directly to a DHCP server
via unicast, instead of broadcasting it. SEATTLE implements this
mechanism using the existing DHCP relay agent standard [30].
This standard is used when an end host needs to communicate with
a DHCP server outside the host’s broadcast domain. The standard
proposes that a host’s IP gateway forward a DHCP discovery to a
DHCP server via IP routing. In SEATTLE, a host’s access switch
can perform the same function with Ethernet encapsulation. Access
switches can discover a DHCP server using a similar approach to
the service discovery mechanism in Section 3.1.2. For example, the
DHCP server hashes the string “DHCP_SERVER” to a switch, and
then stores its location at that switch. Other switches then forward
DHCP requests using the hash of the string.
5.2 Scalable and ﬂexible VLANs
SEATTLE completely eliminates ﬂooding of unicast packets.
However, to offer the same semantics as Ethernet bridging, SEAT-
TLE needs to support transmission of packets sent to a broadcast
address. Supporting broadcasting is important because some appli-
cations (e.g., IP multicast, peer-to-peer ﬁle sharing programs, etc.)
rely on subnet-wide broadcasting. However, in large networks to
which our design is targeted, performing broadcasts in the same
style as Ethernet may signiﬁcantly overload switches and reduce
data plane efﬁciency.
Instead, SEATTLE provides a mechanism
which is similar to, but more ﬂexible than, VLANs.
In particular, SEATTLE introduces a notion of group. Similar
to a VLAN, a group is deﬁned as a set of hosts who share the
same broadcast domain regardless of their location. Unlike Eth-
ernet bridging, however, a broadcast domain in SEATTLE does not
limit unicast layer-2 reachability between hosts because a SEAT-
TLE switch can resolve any host’s address or location without rely-
ing on broadcasting. Thus, groups provide several additional ben-
eﬁts over VLANs. First, groups do not need to be manually as-
signed to switches. A group is automatically extended to cover a
switch as soon as a member of that group arrives at the switch3.
Second, a group is not forced to correspond to a single IP subnet,
and hence may span multiple subnets or a portion of a subnet, if
desired. Third, unicast reachability in layer-2 between two differ-
ent groups may be allowed (or restricted) depending on the access-
control policy — a rule set deﬁning which groups can communicate
with which — between the groups.
The ﬂexibility of groups ensures several beneﬁts that are hard to
achieve with conventional Ethernet bridging and VLANs. When
a group is aligned with a subnet, and unicast reachability between
two different groups is not permitted by default, groups provide
exactly the same functionality as VLANs. However, groups can
include a large number of end hosts and can be extended to any-
where in the network without harming control-plane scalability and
data-plane efﬁciency. Moreover, when groups are deﬁned as sub-
sets of an IP subnet, and inter-group reachability is prohibited, each
group is equivalent to a private VLAN (PVLAN), which are popu-
3The way administrators associate a host with corresponding group
is beyond the scope of this paper. For Ethernet, management sys-
tems that can automate this task (e.g., mapping an end host or ﬂow
to a VLAN) are already available [31], and SEATTLE can employ
the same model.
larly used in hotel/motel networks [32]. Unlike PVLANs, however,
groups can be extended over multiple bridges. Finally, when uni-
cast reachability between two groups is allowed, trafﬁc between the
groups takes the shortest path, without traversing default gateways.
Multicast-based group-wide broadcasting:
Some applications
may rely on subnet-wide broadcasting. To handle this, all broad-
cast packets within a group are delivered through a multicast tree
sourced at a dedicated switch, namely a broadcast root, of the
group. The mapping between a group and its broadcast root is
determined by using F to hash the group’s identiﬁer to a switch.
Construction of the multicast tree is done in a manner similar to
IP multicast, inheriting its safety (i.e., loop freedom) and efﬁciency
(i.e., to receive broadcast only when necessary). When a switch
ﬁrst detects an end host that is a member of group g, the switch
issues a join message that is carried up to the nearest graft point on
the tree toward g’s broadcast root. When a host departs, its access
switch prunes a branch if necessary. When an end host in g sends
a broadcast packet, its access switch marks the packet with g and
forwards it along g’s multicast tree.
Separating unicast reachability from broadcast domains: In addi-
tion to handling broadcast trafﬁc, groups in SEATTLE also provide
a namespace upon which reachability policies for unicast trafﬁc are
deﬁned. When a host arrives at an access switch, the host’s group
membership is determined by its access switch and published to the
host’s resolvers along with its location information. Access control
policies are then applied by a resolver when a host attempts to look
up a destination host’s information.
6. SIMULATIONS
In this section, we start by describing our simulation environ-
ment. Next, we describe SEATTLE’s performance under work-
loads collected from several real operational networks. We then
investigate SEATTLE’s performance in dynamic environments by
generating host mobility and topology changes.
6.1 Methodology
To evaluate the performance of SEATTLE, we would ideally like
to have several pieces of information, including complete layer-two
topologies from a number of representative enterprises and access
providers, traces of all trafﬁc sent on every link in their topologies,
the set of hosts at each switch/router in the topology, and a trace
of host movement patterns. Unfortunately, network administrators
(understandably) were not able to share this detailed information
with us due to privacy concerns, and also because they typically do
not log events on such large scales. Hence, we leveraged real traces
where possible, and supplemented them with synthetic traces. To
generate the synthetic traces, we made realistic assumptions about
workload characteristics, and varied these characteristics to mea-
sure the sensitivity of SEATTLE to our assumptions.
In our packet-level simulator, we replayed packet traces col-
lected from the Lawrence Berkeley National Lab campus network
by Pang et. al. [33]. There are four sets of traces, each collected
over a period of 10 to 60 minutes, containing trafﬁc to and from
roughly 9,000 end hosts distributed over 22 different subnets. The
end hosts were running various operating systems and applications,
including malware (some of which engaged in scanning). To evalu-
ate sensitivity of SEATTLE to network size, we artiﬁcially injected
additional hosts into the trace. We did this by creating a set of vir-
tual hosts, which communicated with a set of random destinations,
while preserving the distribution of destination-level popularity of
the original traces. We also tried injecting MAC scanning attacks
and artiﬁcially increasing the rate at which hosts send [17].
We measured SEATTLE’s performance on four representative
)
g
o
l
(
n
o
i
t
u
l
o
s
e
r
n
o
i
t
a
c
o
l
g
n
i
r
i
u
q
e
r
s
t
k
p
f
o
.
c
a
r
F
0.01
0.001
1e-04
1e-05
1
30
16
12
8
4
0
c
e
s
r
e
p
h
c
t
i
w
s
r
e
p
s
g
s
m
l
r
t
C
e
z
i
s
e
l
b
a
T
500
400
300
200
100
300
)
g
o
l
(
e
z
i
s
e
l
b
a
T
10K
5K
1K
500
100
Eth-max
Eth-avg
SEA_CA-max
SEA_CA-avg
SEA_NOCA-max
SEA_NOCA-avg
10K
20K
30K
Number of hosts
40K
50K
(b)
)
g
o
l
(
d
n
o
c
e
s
r