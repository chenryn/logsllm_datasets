title:Analyzing the effects of disk-pointer corruption
author:Lakshmi N. Bairavasundaram and
Meenali Rungta and
Nitin Agrawal and
Andrea C. Arpaci-Dusseau and
Remzi H. Arpaci-Dusseau and
Michael M. Swift
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Analyzing the Effects of Disk-Pointer Corruption
Lakshmi N. Bairavasundaram, Meenali Rungta+, Nitin Agrawal,
Andrea C. Arpaci-Dusseau, Remzi H. Arpaci-Dusseau, and Michael M. Swift
University of Wisconsin-Madison
+Google, Inc.
Abstract
The long-term availability ofdata stored in a file system
depends on how well it safeguards on-disk pointers used to
access the data. Ideally, a system would correct all pointer
errors.
In this paper, we examine how well corruption(cid:173)
handling techniques work in reality. We develop a new tech(cid:173)
nique called type-aware pointer corruption to systematically
explore how a file system reacts to corrupt pointers. This
approach reduces the exploration space for corruption ex(cid:173)
periments and works without source code.
We use type-aware pointer corruption to examine Win(cid:173)
dows NTFS and Linux ext3. We find that they rely on type
and sanity checks to detect corruption, and NTFS recov(cid:173)
ers using replication in some instances. However, NTFS
and ext3 do not recover from most corruptions, including
many scenarios for which they possess sufficient redundant
information, leading to further corruption, crashes, and un(cid:173)
mountablefile systems. We use our study to identify impor(cid:173)
tant lessons for handling corrupt pointers.
1. Introduction
Much of the value people place in computer systems
stems from the value of the data stored therein. The long(cid:173)
term availability of such data is therefore of the utmost im(cid:173)
portance. An integral part of ensuring the long-term avail(cid:173)
ability of data is ensuring the reliability and availability of
access paths to data, that is, pointers. Pointers are funda(cid:173)
mental to the construction ofnearly all data structures. This
observation is especially true for file systems, which rely
on pointers located in on-disk metadata to access data. Un(cid:173)
fortunately, disk pointers are susceptible to corruption for
various reasons; the literature is rife with examples of disk,
controller, and transport flaws [3, 12, 13, 18, 24] and file
system bugs [30] that lead to on-disk corruption.
File systems today use a variety of techniques to protect
against corruption. ReiserFS, JFS and Windows NTFS per(cid:173)
form lightweight corruption checks like type checking [18];
that is, ensuring that the disk block being read contains the
expected data type. These file systems also employ sanity
checking (verifying that particular values in data structures
follow certain constraints) to detect corruption [18]. ZFS
checksums both data and metadata blocks to protect against
corruption [8]. The techniques above are useful for detect(cid:173)
ing corruption. In order to recover from corruption, most
systems rely on replicated data structures. For example, JFS
and NTFS replicate key data structures, giving them the po(cid:173)
tential to recover from corruption of these structures [7, 22].
In this paper, we seek to evaluate how a set ofcorruption(cid:173)
handling techniques work in reality. While conceptually
simple, there may be design or implementation details that
preclude a file system from reaping the full reliability ben(cid:173)
efit of these techniques. We evaluate file systems using
software fault
injection. One difficulty with a pointer(cid:173)
corruption study is the potentially huge exploration space
for corruption experiments. To deal with this problem, we
develop a new fault injection technique called type-aware
pointer corruption (TAPC). TAPC reduces the search space
by systematically changing the values of only one disk
pointer of each type in the file system, then exercising the
file system and observing its behavior. We further narrow
the large search space by corrupting the disk pointers to re(cid:173)
fer to each type of data structure, instead of to random disk
blocks. An important advantage of TAPC is that it helps
understand the underlying causes for observed system be(cid:173)
havior. TAPC works outside the file system, obviating the
need for source code.
We use TAPC to evaluate two widely-used file systems,
Windows NTFS and Linux ext3 [28]. We examine their use
of type checking, sanity checking, and replication to deal
with corrupt pointers. We ask the simple question: do these
techniques work well in reality? We focus on NTFS in this
paper; our study of ext3 is less-detailed, primarily aimed at
demonstrating the general utility of our approach.
We find that NTFS successfully uses type information to
defend against many pointer-corruption scenarios. NTFS
detects corruption by verifying the presence of a "magic
number" in data structures that it accesses. NTFS also repli(cid:173)
cates key data structures to automatically recover from cor(cid:173)
ruption. TAPC thus enables us to identify the checks per(cid:173)
formed and techniques used by NTFS to deal with corrup(cid:173)
tion, without knowledge of source code.
Of our 360 different corruption scenarios, NTFS is able
to continue normal operation in 61 scenarios (17%). We
find that NTFS cannot handle many cases of pointer cor(cid:173)
ruption, leading to data ormetadata loss in 102 cases (28%),
1-4244-2398-9/08/$20.00 ©2008 IEEE
502
DSN 2008: Bairavasundaram et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:08:01 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
system crashes in 22 cases (6%), and unmountable file sys(cid:173)
tems in 133 cases (37%). Despite type information and re(cid:173)
dundancy, NTFS fails to recover from many pointer corrup(cid:173)
tions as it does not always correctly use this information.
We examine 93 corruption scenarios in ext3. In contrast
to NTFS, we find that ext3 relies more on sanity checks
than on type checks, thus detecting different corruptions.
Although ext3 extensively replicates key data structures, it
never uses the replicas to recover; its typical reaction is to
report an error and remount the file system read-only. Thus,
ext3 is no better than NTFS in handling pointer corruption.
We use our analyses to identify several lessons and pit(cid:173)
falls for building corruption-proof file systems, including:
• Type checking does not work for all pointers. Detailed
sanity checking should also be performed.
• Replication should be managed and used with corrup(cid:173)
tion in mind: systems should compare replicas before
overwriting, and use different pointers for replicas.
• Many indexes are simply performance improvements
and their loss should not cause the file system to fail.
Had these lessons been applied, NTFS and ext3 could
have recovered from an additional 144 and 39 scenarios re(cid:173)
spectively in which they currently fail.
The rest of this paper is organized as follows. Section 2
discusses the problem of disk corruption. Section 3 de(cid:173)
scribes type-aware pointer corruption. Section 4 presents
an overview of NTFS and Section 5 presents the results of
our analysis. We discuss related work in Section 6, and con(cid:173)
clude in Section 7.
2. Motivation
In this section, we motivate our study by describing how
blocks on disk can become corrupted and why we focus on
the corruption of pointers.
Disk Corruption:
Sources of disk corruption are
throughout the storage stack, including errors within file
systems, device drivers, bus controller, transport layer, disk
firmware, and the electrical, mechanical and media com(cid:173)
ponents of the disk. A software bug within the file sys(cid:173)
tem, or a corruption of main memory, can cause the file
system to write incorrect data to disk. Further, buggy de(cid:173)
vice drivers can issue disk requests with bad parameters
or data [10, 11]. Bus controllers have also been shown
to incorrectly indicate that disk requests are complete or
to swap status bits with data [13]. Drive firmware some(cid:173)
times silently corrupts data, directs writes to the wrong lo(cid:173)
cation, or reports the data has been written when in fact
it has not [12, 24]. Within the disk, power spikes, erratic
arm movements, media scratches, and "bit rot" (change in
bit state over time) could cause disk blocks to become cor(cid:173)
rupted (although most medium errors are caught by disk
ECC) [1, 19, 26]. In a study involving 1.53 million disks in
production storage systems, we found that 0.66% of SATA
drives and 0.06% of FC drives developed corruption in 17
months of use [3].
Why Pointer Corruption: Although any block on disk
may become corrupt, some corruptions are more damaging
than others. If a data block of a file is corrupt, then only the
application that reads the file is impacted. However, ifa disk
block belonging to file-system metadata is corrupt, then the
entire file system can be affected; for example, if the boot
sector is corrupt, the file system may not be mountable. In
other cases, a corrupt pointer incorrectly referring to data
belonging to a different data structure can cause the data
to be overwritten and corrupted. Therefore, we focus on
effects of corrupt pointers.
3. Type-Aware Pointer Corruption
To identify the behavior of file systems when disk point(cid:173)
ers are corrupted, we develop and apply type-aware pointer
corruption (TAPC). We observe how the file system reacts
after we modify different types of on-disk pointers to refer
to disk blocks containing different types of data.
A pointer-corruption study is especially difficult because
it is nearly impossible to corrupt every pointer on disk to
every possible value in a reasonable amount of time. Often,
the solution has been to use random values. This approach
suffers from two problems: (a) a large number of corruption
experiments might be needed to trigger the interesting sce(cid:173)
narios, and (b) use of random values makes it more difficult
to understand underlying causes of observed behavior.
We use type-awareness to address both problems. Type(cid:173)
awareness reduces the exploration space for corruption ex(cid:173)
periments by assuming that system behavior depends only
on two types: (i) the type ofpointer that has been corrupted,
and (ii) the type of block that it points to after corruption.
Examples are (i) corrupting File A's data pointer is the same
as corrupting File B's data pointer, and (ii) corrupting a
pointer to refer to inode-block P is the same as corrupting
it to refer to inode-block Q (if all inodes in P and Q are for
user files). This approach is motivated by the fact that code
paths within the file system that exercise the same types of
pointers are the same, and disk blocks of the same type of
data structure contain similar contents. Thus, TAPC greatly
reduces the experimental space while still covering almost
all of the interesting cases. Also, by its very design, this ap(cid:173)
proach attaches file system semantics to each experiment,
which can be used to understand the results.
Terminology: The following terms are used to describe
methodology and discuss results.
• Container: disk block in which the disk pointer is
present. Corrupting the pointer involves modifying the
contents of the container.
• Targetoriginal: disk block that the disk pointer should
point to; that is the block pointed to on no corruption.
1-4244-2398-9/08/$20.00 ©2008 IEEE
503
DSN 2008: Bairavasundaram et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:08:01 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
Term
Cluster
LCN
VCN
Data run
Boot sector
MFT
MFTentry
MFTVCNO
MFTmirror
Index buffer
Directory
MFTbitmap
Volume bitmap
Log file
$Secure
Upcase table
Description
The fundamental unit of disk storage; it consists of a fixed number of sectors, similar to a UNIX disk block.
A Logical Cluster Number (LCN) is assigned to each disk cluster. This is the same as a physical block number in
UNIx-based systems. On-disk pointers contain the LCN of the cluster they point to.
A Virtual Cluster Number is the same as a file offset (in number of blocks) in UNIX.
The format ofNTFS on-disk pointers, consisting of a base LCN and length, and a series of  fields. E.g.,
if base LCN is X, the length field is a, and the first  combination is , the data being pointed
to is located at LCNs X to X + a and then from X + b to X + b + c. In our experiments we corrupt the base LCN.
The boot sector is the sector read first by NTFS when the file system is mounted. It is the starting point for discovering
the LCNs of all other data structures. The last cluster of the file system contains a copy of the boot sector.
Master File Table contains an entry for each file (both user and system). First 24 entries are reserved for system files.
Equivalent of a UNIX inode. Most pointers that are corrupted are located in different MFT entries in form of data runs.
This is the first cluster of the MFT. Its LCN is present in the boot sector. The first entry of this cluster is a file that
contains LCNs of itself and the rest of the MFT.
This is a replica of MFT VCN O. Its LCN is also present in the boot sector.
An index buffer consists of a series of index entries that provide information for indexing into any data structure.
A directory in NTFS consists of index buffers. The entries in these buffers point to MFT entries of the directory's files.
This is a bitmap that tracks whether MFT entries are allocated or not.
This is a bitmap that tracks whether disk clusters are allocated or not.
NTFS implements ordered joumaling mode: whenever a user writes data to disk, the data cluster is flushed first,
It is organized as a restart area, a redundant copy of the
followed by log updates, and finally the metadata clusters.
restart area, and a "logging area", which consists of log records that each denote a disk action to be performed.
NTFS stores information about the owner of the file and the permissions granted to other users by the owner (in form of
ACLs) in a security descriptor. Each unique descriptor is stored in $Secure along with its hash and given a security ida
This security id is stored in the MFT entry of the file for looking up the correct descriptor from $Secure. The descriptors
in $Secure are indexed on the hash of the security descriptor and the security id.
This is an upper case - lower case character conversion table essential for directory path name traversal.
Table 1. NTFS Terminology. This table provides briefdescriptions ofNTFS terminology and data structures. The descriptions
offer a simplified vievv ofNTFS, eliminating details that are not essential for understanding the experiments.
• Targetcorrupt: disk block being pointed to by a cor-
rupt disk pointer.
Corruption Model: Any of the sources of corruption dis(cid:173)
cussed in Section 2 could produce a corrupt file system im(cid:173)
age on disk. Our corruption model reflects the state of a file
system on functioning hardware that experienced a corrup(cid:173)
tion event in the past:
• Exactly one pointer is corrupted for each experiment.
The rest of the data is not corrupted. Also, other faults
like crashes or sector errors are not injected.
• We emulate pointer corruptions that are persistent. The
corruption is persistent because simply re-reading the
pointer from disk will not recover the correct value.
• The pointer corruption is not sticky. Future writes to
the pointer by the file system can potentially correct the
corruption. Reads performed after a write will be re(cid:173)
turned the newly written data and not the corrupt data.
Corruption Framework: Our TAPe framework has been
designed to work without file system source code. It con(cid:173)
sists of a corrupter layer that injects pointer corruption and
a test harness that controls the experiments. The corrupter
resides between the file system and the disk drivers; the
layer has been implemented as a Windows filter driver for
NTFS and as a pseudo-device for ext3. This layer cor(cid:173)
rupts disk pointers and observes disk traffic. Thus, the cor(cid:173)
rupter has knowledge of the file system's on disk data struc(cid:173)
tures [21]. The test harness is a user-level program that exe-
cutes file system operations and controls the corrupter. The
experiments involve the following steps:
• The test harness creates a file system on disk with a
few files and directories. It then instructs the corrupter to
corrupt a specific pointer to a specific value and performs
file operations (e.g., mount, CreateFile, etc. for NTFS
and mount, creat, etc.
for ext3) to exercise the pointer
under consideration. We execute the file operations from a
user with limited permissions (non-administrator).
• The corrupter intercepts the disk accesses performed
by the file system and scans the requests for the container
(the disk block containing the pointer). When that disk
block is read, exactly one pointer in the data structure is
modified to a specific value.
• The corrupter continues to monitor disk accesses.
The same corruption is performed on future reads to the
container. Disk writes to the container may overwrite
any corruption and therefore further reads to the disk block
are returned the newly-written data.
• All disk accesses, system call return values, and the
system event log are examined in order to identify the be(cid:173)
havior of the file system. This holistic view of system
behavior in co-ordination with type-awareness is essential
to understanding the underlying design or implementation
flaws that lead to any system failures.
Our experiments are performed on an installation of
Windows XP (Professional Edition without Service Pack 2)
1-4244-2398-9/08/$20.00 ©2008 IEEE
504
DSN 2008: Bairavasundaram et al.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:08:01 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 2008
Container
Pointer
Boot-MFTO
Boot
Boot-MFTM
Boot
MFTO-MFT
MFTVCN0
MFTBitmap
MFTVCNO
MFTO-MFTM
MFTVCNO
LogFile
MFTVCNO
RootSecDesc MFTVCN 1
Root IndxBuf MFTVCN 1
SDS
MFTVCN2
SDH
MFTVCN2
SII
MFTVCN2
UpCase
DirlndxBuf
FileData
MFTVCN2
MFTanyVCN
MFTanyVCN
inal