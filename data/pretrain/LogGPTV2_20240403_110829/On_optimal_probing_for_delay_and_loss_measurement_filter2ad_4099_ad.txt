t
Erlang (Shape=2)
Erlang (Shape=4)
Erlang (Shape=16)
Erlang (Shape=256)
Erlang (Shape=2048)
Periodic
i
a
v
e
D
d
r
a
d
n
a
S
n
o
t
1.05
1
0.95
0.9
0.85
i
t
a
m
i
t
s
E
0.01 0.02
0.05  0.1  0.2
Mean Inter−probe Time [secs]
 0.5    1    2
   5
0.01 0.02
0.05  0.1  0.2
Mean Inter−probe Time [secs]
 0.5    1    2
   5
Figure 8: Comparison of the various probing strategies in the case of P2 (Left) and Q2 (Middle) with 10 probes. Comparing different
Erlang probing strategies for P1 (Right) with 10 probes.
n
o
i
t
i
a
v
e
D
d
r
a
d
n
a
S
n
o
t
i
t
a
m
i
t
s
E
i
n
o
i
t
a
v
e
D
d
r
a
d
n
a
t
S
n
o
i
t
a
m
i
t
s
E
x 10−5
12
11
10
9
8
7
6
5
4
3
0
20
x 10−4
1.8
1.6
1.4
1.2
1
0.8
0.6
0
20
Poisson
Erlang (Shape=2)
Erlang (Shape=4)
Deterministic
40
60
80
100
120
Number of Probes
Poisson
Erlang (Shape=2)
Erlang (Shape=4)
Deterministic
40
60
80
100
120
Number of Probes
Figure 7: Comparison of the various probing strategies for var-
ious number of probes in the case of P1 (inter-probe time of
10ms)(Top) and Q3 (inter-probe time of 10ms) (Bottom).
4.6 Quantile Estimation
As discussed in Section 2, loss can be deﬁned using quantiles of
queue size (or virtual delay) at a hop. In particular, the loss process
Ix(t) of a probe of size x can be given by:
Ix(t) = P (B(t) > K − x).
(12)
where K is the maximum buffer size. Even when no loss occurs,
high delays are a measure of congestion since they trigger TCP
timeouts. This has been used in many prior works on loss estima-
tion, for example, [18]. Thus, estimating the indicator functions of
delay quantiles is of natural interest to us. Though the router moni-
tored in the full-router experiment had no losses, quantiles deﬁned
on its output links can be thought to represent a congestion process.
We investigate this now.
As with mean virtual delay, we start by calculating the auto-
covariance of the indicator function of virtual delay quantiles in
In Figure 9 (Left and Middle), we show the auto-
P1 and P2.
covariances of the 0.95-quantile and 0.5-quantile of these datasets
respectively. As with mean virtual delay, we ﬁnd no visual signs of
non-convexity. In Figure 9 (Right), we plot the standard deviation
of various probing strategies for the 0.95-quantile of virtual delay
in P1. The results are similar to what we observed before; Poisson
is distinctly inferior to Gamma probing especially at higher probing
frequencies and periodic probing can be anomalous.
5. ADDITIONAL DATASETS
In the previous section, we computed the virtual delays using the
full-router datasets. Our analysis showed that the mean as well as
quantiles of the virtual delay process have a convex auto-covariance
and that Poisson probing has higher variance than Gamma (or Er-
lang) probing especially at smaller timescales. We also saw the
advantages of Gamma probing over periodic; the latter can have
higher variance due to residual phase-locking effects. In this sec-
tion, we present results performing similar analysis for other datasets.
First, we present results analyzing the virtual delay across a 10Gbps
OC-192 link we monitored. Then, we use simulation-based exper-
iments to investigate our results for multi-hop paths.
5.1 OC-192 Experiment
In Figures 3 and 4, we showed that the convexity condition ap-
pears to be valid for the OC-3 link of a gateway router. We now pro-
vide some evidence that the convexity condition is true for higher-
speed links in the Internet core. The dataset we use consists of
packet traces collected by monitoring one input and one output in-
terface of a backbone router. Both interfaces terminated 10Gbps
OC-192 links. These traces were collected for 20 seconds using
DAG packet capture cards that had a timestamp accuracy of 100ns.
The monitored output interface had an average utilization of 30%.
e
c
n
a
i
r
a
v
o
C
−
o
u
A
t
1
0.8
0.6
0.4
0.2
0
2 Seconds
20 Seconds
200 Seconds
1.2
1
0.8
0.6
0.4
0.2
0
e
c
n
a
i
r
a
v
o
C
−
o
u
A
t
2 Seconds
20 Seconds
200 Seconds
n
o
i
t
i
a
v
e
D
d
r
a
d
n
a
S
n
o
t
i
t
a
m
i
t
s
E
−0.2
−0.01
−0.005
0
Lag Values [secs]
0.005
0.01
−0.2
−0.04
−0.02
0
Lag Values [secs]
0.02
0.04
0.092
0.09
0.088
0.086
0.084
0.082
0.08
0.078
0.076
0.074
Poisson
Erlang (Shape=2)
Erlang (Shape=4)
Deterministic
0.01 0.02
0.05  0.1  0.2
Mean Inter−probe Time [secs]
 0.5    1    2
   5
Figure 9: Auto-covariance of the estimated mean value of delay-based quantiles with P2 (quantile value of 0.5) (Left) and P1 (quantile
value of 0.95) (Middle). Comparison of the standard deviation of various probing strategies with the latter (Right).
e
c
n
a
i
r
a
v
o
C
−
o
t
u
A
1.2
1
0.8
0.6
0.4
0.2
0
−0.2
−1
.04 Seconds
.4 Seconds
4 Seconds
−0.5
0
Lag Values [Secs]
0.5
1
x 10−4
Figure 10: Auto-covariance of the virtual delay process calcu-
lated using the OC-192 dataset.
The traces collected at the input interface provide us with the
arrival times of a majority (about 60 − 65%) of the trafﬁc exit-
ing the output interface. Since our traces do not include the arrival
times of the remaining exiting trafﬁc, we cannot apply the queue-
ing models used with the full-router datasets. So we calculate the
continuous-time virtual delay process across the output OC-192 in-
terface using the following approach. For each captured packet,
we ﬁrst calculate its delay from the observed input and departure
timestamps. Then, we subtract its (size-dependent) transmission
time from the observed delay. Assuming a simple FIFO model for
the router, the resulting values are essentially samples of the virtual
delay process. We then use a linear intrapolation of these samples
to calculate the continuous time virtual delay process at arbitrary
times. In Figure 10, we plot the auto-covariance of the virtual de-
lay process thus computed. We see that there are no visual signs of
non-convexity.
5.2 Simulations
So far, we tested the convexity condition for delays across a sin-
gle hop. Since our dataset had no loss, we also did not directly
analyze the nature of the congestion process except using delay
quantiles. In the absence of detailed loss data and datasets span-
ning multiple hops, we turn to simple ns-2 [20] simulations to un-
derstand these areas better.
We simulate a 3-hop system with link capacities of 6, 20 and
10Mbps. All hops use FIFO queues with droptail byte-based drop-
ping policies. We use the ground truth calculator described in the
appendix to access the loss process Ix(t). We calculate the auto-
covariance of the computed loss process Ix(t) for x = 1540 bytes.
We calculate the auto-covariance with high conﬁdence using multi-
ple simulations each of which is 100 seconds long. We follow this
approach for various choices of cross-trafﬁc over the three hops.
In Figure 11 (the Right plot is a zoom of the Left plot), we plot
the auto-covariance (un-normalized to indicate the absolute value)
of the loss process in three scenarios. In all three, the middle hop
carries trafﬁc generated according to a Pareto process. The last
hop carries periodic cross-trafﬁc in the ﬁrst and Poisson in the rest.
In all three scenarios, 3-hop persistent trafﬁc generated according
to a Poisson process ﬂows across all three hops. In the ﬁrst two
scenarios, a similar 3-hop persistent TCP ﬂow is present. In each
of the three scenarios, the ground truth auto-covariance function is
close to convex. This is despite that fact that the TCP ﬂow, which
traverses all three hops in two of the three scenarios, creates oscil-
lations, and even despite the periodic trafﬁc on hop three in the ﬁrst
scenario.
We expect feedback, especially from TCP, to generate some neg-
ative correlation over a range of lags, which breaks convexity. How-
ever, we see this only in a few extreme examples. We illustrate
some of these examples in Figure 12. For reference, we keep the
same third scenario as in Figure 11. In the ﬁrst two scenarios, we
remove the 3-hop persistent Poisson trafﬁc. We continue to use
the 3-hop persistent TCP ﬂow. We ﬁnd that, some form of non-
convexity creeps in due to the signiﬁcant feedback introduced by
this single persistent TCP ﬂow. As the third scenario indicates, this
vanishes when the persistent TCP ﬂow shares all of its links with
other trafﬁc.