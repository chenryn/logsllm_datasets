### 优化后的文本

#### 探测策略比较
- **Erlang (Shape=2)**
- **Erlang (Shape=4)**
- **Erlang (Shape=16)**
- **Erlang (Shape=256)**
- **Erlang (Shape=2048)**
- **周期性**

#### 图8：不同探测策略的比较
- 左图：P2情况下，使用10个探针。
- 中图：Q2情况下，使用10个探针。
- 右图：P1情况下，使用10个探针。

**平均探测间隔时间 [秒]**
- 0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1, 2, 5

#### 图7：不同探针数量下的探测策略比较
- 上图：P1（探测间隔时间为10毫秒）。
- 下图：Q3（探测间隔时间为10毫秒）。

#### 4.6 分位数估计
如第2节所述，损失可以通过队列大小（或虚拟延迟）的分位数来定义。具体来说，大小为x的探针的损失过程Ix(t)可以表示为：
\[ I_x(t) = P(B(t) > K - x) \]
其中K是最大缓冲区大小。即使没有发生丢包，高延迟也是拥塞的一个指标，因为它会触发TCP超时。这在许多先前关于丢包估计的研究中都有应用，例如[18]。因此，估计虚拟延迟分位数的指示函数对我们来说是自然感兴趣的。尽管在全路由器实验中监控的路由器没有丢包，但其输出链路上定义的分位数可以被认为是一个拥塞过程。我们现在对此进行研究。

与平均虚拟延迟一样，我们首先计算这些数据集中虚拟延迟分位数指示函数的自协方差。在图9（左和中），我们展示了P1和P2数据集的0.95分位数和0.5分位数的自协方差。与平均虚拟延迟一样，我们没有发现非凸性的视觉迹象。在图9（右）中，我们绘制了P1中虚拟延迟0.95分位数的不同探测策略的标准偏差。结果与我们之前观察到的相似；泊松探测明显劣于伽马探测，尤其是在较高的探测频率下，而周期性探测可能会异常。

#### 5. 其他数据集
在前一节中，我们使用全路由器数据集计算了虚拟延迟。我们的分析表明，虚拟延迟过程的均值和分位数具有凸自协方差，并且泊松探测的方差高于伽马（或厄兰）探测，特别是在较小的时间尺度上。我们还看到了伽马探测相对于周期性探测的优势；后者由于残余相位锁定效应可能具有更高的方差。在本节中，我们将展示对其他数据集进行类似分析的结果。

首先，我们展示了对一个10Gbps OC-192链路进行虚拟延迟分析的结果。然后，我们使用基于仿真的实验来研究多跳路径上的结果。

#### 5.1 OC-192实验
在图3和图4中，我们展示了OC-3链路满足凸性条件。现在我们提供一些证据，证明该凸性条件也适用于互联网核心中的高速链路。我们使用的数据集包括通过监控骨干路由器的一个输入接口和一个输出接口收集的数据包跟踪记录。两个接口都终止于10Gbps OC-192链路。这些跟踪记录使用DAG数据包捕获卡收集了20秒，时间戳精度为100纳秒。监控的输出接口平均利用率为30%。

#### 自协方差
- **左图**：2秒、20秒、200秒
- **右图**：2秒、20秒、200秒

#### 延迟分布
- **左图**：P2（分位数值为0.5）
- **中图**：P1（分位数值为0.95）
- **右图**：不同探测策略的标准偏差

#### 5.2 仿真
迄今为止，我们测试了单跳延迟的凸性条件。由于我们的数据集没有丢包，我们也没有直接分析拥塞过程的性质，除了使用延迟分位数。在缺乏详细的丢包数据和跨越多个跳点的数据集的情况下，我们转向简单的ns-2 [20]仿真以更好地理解这些领域。

我们模拟了一个三跳系统，链路容量分别为6Mbps、20Mbps和10Mbps。所有跳点都使用FIFO队列和尾部丢弃策略。我们使用附录中描述的真实计算器来访问损失过程Ix(t)。对于x = 1540字节，我们计算了损失过程Ix(t)的自协方差。我们通过多次运行每个100秒长的仿真来高置信度地计算自协方差。我们针对三个跳点上的各种交叉流量进行了这种操作。

在图11（右图是左图的放大视图）中，我们绘制了三种场景下损失过程的自协方差（未归一化以表示绝对值）。在这三种场景中，中间跳点承载根据帕累托过程生成的流量。最后一跳在第一种场景中承载周期性交叉流量，在其余场景中承载泊松流量。在这三种场景中，所有三跳上都流动着根据泊松过程生成的持续流量。在前两种场景中，存在类似的三跳持续TCP流。在这三种场景中，真实自协方差函数接近凸形。尽管在前两种场景中穿越所有三跳的TCP流产生了振荡，甚至尽管在第一种场景中第三跳上有周期性流量，情况依然如此。

我们期望反馈，尤其是来自TCP的反馈，在一定范围的滞后时间内会产生负相关，从而破坏凸性。然而，我们只在少数极端例子中看到这一点。我们在图12中展示了一些这样的例子。作为参考，我们保留了图11中的第三个场景。在前两个场景中，我们移除了三跳持续的泊松流量，继续使用三跳持续的TCP流。我们发现，由于这个单一持续TCP流引入的显著反馈，某种形式的非凸性出现了。正如第三个场景所示，当持续TCP流与其所有链路上的其他流量共享时，这种情况消失了。

希望这些改进能让您的文本更加清晰、连贯和专业。如果需要进一步调整，请告诉我！