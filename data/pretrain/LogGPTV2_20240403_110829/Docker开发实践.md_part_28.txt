第 15 章 2
Fig
3
4
5
复杂的应用往往包含多个组件，其中每个组件都应该安装到独立的容器内部，但是采用手工
方式管理容器显得非常麻烦，所以在这一章中，我们将介绍一款多容器管理的利器——Fig。本
6
章内容主要包括：
 Fig简介 7
 Fig安装
 Rails开发环境配置 9
 Django开发环境配置
 WordPress开发环境配置 8
 Flocker——跨主机的Fig应用
10
15.1 Fig 简介
10
一开始学习Docker时，一般我们只需要操作一个容器。然而有些应用需要多个服务来协作提供，
这时把这些服务都安装到一个容器内显然不太合适，并且这与我们使用Docker的初衷背道而驰，因 11
为它没有提供良好的隔离性。更好的方法是使用多个容器来分别安装它们，然后协调管理这些容器。
而当容器的数量增多时，手动管理容器之间的连接、数据卷等配置会越来越力不从心，此时需要一 13
种工具来替代手动管理，将我们从繁杂的基础管理中解脱出来，而Fig就是这么一款工具。
Fig是一款基于Docker的用于快速搭建开发环境的工具，它由Orchard团队开发并遵循Apache 14
2.0协议。目前，该团队已经加入Docker团队中。Fig通过一个YAML配置文件来管理多个Docker
容器，非常适合组合使用多个容器进行开发的场景。 15
15.2 Fig 安装 16
安装Fig时，要保证Docker的版本号不得低于1.3。目前，Fig仅支持Linux和OS X系统。Fig所 17
有的版本都会在https://github.com/docker/fig/releases上更新，目前最新版本是1.0.1。既可以通过浏
览器直接下载二进制文件，然后进行安装，也可以通过如下命令进行安装： 18
178 第15章 Fig
curl -L https://github.com/docker/fig/releases/download/1.0.1/fig-`uname -s`-`uname -m` >
/usr/local/bin/fig; chmod +x /usr/local/bin/fig
上述命令首先通过curl下载Fig二进制文件，然后将其复制到/usr/local/bin目录下，最后更改
其权限使其可以运行。
安装完毕后，可以通过如下命令来验证安装是否正确：
$fig version
fig 1.0.1
15.3 Rails 开发环境配置
在这一节中，我们将使用Fig来配置Rails+PostgreSQL应用。
首先，新建一个目录，并为其创建3个文件。第一个是Dockerfile文件，用于构建Web服务镜
像，其内容为：
FROM ruby
RUN apt-get update -qq && apt-get install -y build-essential libpq-dev
RUN mkdir /myapp
WORKDIR /myapp
ADD Gemfile /myapp/Gemfile
RUN bundle install
ADD . /myapp
该Dockerfile文件构建的Docker将会包含Ruby、Bundle、代码以及依赖的所有组件。
然后，编写一个Gemfile文件来加载Rails，它将会被rails new改写。其内容如下：
source 'https://rubygems.org'
gem 'rails', '4.2.0'
文件中rails的版本号4.2.0是当前最新版本。如果安装过程中出现错误，读者应该到rails官网
查看最新的版本号。
最后，定义一个fig.yml文件，其内容包括：应用由哪些组件组成，例如由一个数据库加Web
应用组成；每一个服务的镜像是如何获得的；容器之间是如何互联的，暴露哪些网络端口等。其
内容为：
db:
image: postgres
ports:
- "5432"
web:
build: .
command: bundle exec rackup -p 3000
volumes:
- .:/myapp
15.3 Rails开发环境配置 179
ports:
1
- "3000:3000"
links:
2
- db
配置定义了db和web两个服务。db采用postgres镜像，对外暴露5432端口。web服务则通过当
3
前目录下的Dockerfile来构建，Dockerfile即为上面所讲到的Dockerfile。command定义了执行的命令，
volumes将主机的当前目录映射为容器内部的/myapp数据卷。ports将主机的3000端口和容器的
4
3000端口映射。links定义了web到db容器的连接。
接下来，使用fig run命令来生成一套Rails项目骨架： 5
$ fig run web rails new . --force --database=postgresql --skip-bundle
6
执行该命令会耗费比较长的时间，这取决于网络速度，因为需要去Docker Hub拉取相关镜像。
Fig首先会去构建Web服务镜像，然后使用该镜像生成一个容器并在里面执行rails new。
7
命令执行完之后，当前目录的内容会发生变化，具体如下：
$ ls 9
Dockerfile app fig.yml tmp
Gemfile bin lib vendor
Gemfile.lock config log 8
README.rdoc config.ru public
Rakefile db test
10
编辑Gemfile文件，去掉加载therubyracer行的注释，我们就获得一个JavaScript运行环境：
gem 'therubyracer', platforms: :ruby 10
我们使用fig build命令再构建一次镜像：
11
$ fig build
运行fig build命令之后，我们就得到了两个可以立即运行的容器，分别为db和web。默认情 13
况下，Rails是使用localhost上的数据库，这里需要将它重定向到db容器，并修改相关数据库连接
配置。打开新生成的database.yml文件，将其内容替换为如下内容： 14
development: &default
adapter: postgresql 15
encoding: unicode
database: postgres
pool: 5 16
username: postgres
password:
host: db 17
test:
<<: *default
database: myapp_test 18
180 第15章 Fig
现在，我们可以运行整个应用程序了，操作为：
$ fig up
如果一切运行正常，你将会看到一些PostgreSQL的日志输出，具体如下：
myapp_web_1 | [2014-01-17 17:16:29] INFO WEBrick 1.3.1
myapp_web_1 | [2014-01-17 17:16:29] INFO ruby 2.0.0 (2013-11-22) [x86_64-linux-gnu]
myapp_web_1 | [2014-01-17 17:16:29] INFO WEBrick::HTTPServer#start: pid=1 port=3000
最后，我们需要创建一个数据库。打开另一个终端，运行如下命令：
$ fig run web rake db:create
当上述所有步骤都已经成功运行后，我们就可以通过访问宿主主机的3000端口来验证应用是
否可以正常使用，如图15-1所示。
图15-1 Rails项目效果图
15.4 Django 开发环境配置
在这一节中，我们将使用Fig来配置一套运行Django/PostgreSQL的应用程序。
首先，新建一个项目目录，并在目录里创建3个文件。第一个文件是Dockerfile，用来描述安
装在Docker容器里的软件依赖关系，其内容如下：
FROM python:2.7
ENV PYTHONUNBUFFERED 1
RUN mkdir /code
WORKDIR /code
ADD requirements.txt /code/
15.4 Django开发环境配置 181
RUN pip install -r requirements.txt
1
ADD . /code/
该Dockerfile定义了一个镜像，它基于python:2.7镜像，如果本地没有该Python镜像，Docker
2
会从Docker Hub中直接拉取。该文件还会安装requirements.txt文件中指定的依赖包。
第二个文件是requirements.txt，它定义了Python的依赖关系，其内容为： 3
Django
psycopg2 4
比较非常简单，只有两行，每一行都是Python的依赖包。最后，需要一个文件将这些配置都
连接起来，它就是fig.yml文件，具体内容为： 5
db:
6
image: postgres
web:
build: .
7
command: python manage.py runserver 0.0.0.0:8000
volumes:
- .:/code
9
ports:
- "8000:8000"
8
links:
- db
10
至此，我们就可以使用fig run命令来创建Django项目了：
$ fig run web django-admin.py startproject figexample . 10
执行该命令，Fig先会使用Dockerfile构建一个镜像，然后用该镜像创建Web容器，并在容器
11
内部执行django-admin.py startproject figexample命令。运行完之后，就可以在当前目录下看
到创建的新项目文件：
13
$ ls
Dockerfile fig.yml figexample manage.py requirements.txt
14
接下来，需要做的是修改Web到数据库的连接。修改figexample/settings.py 的DATABASES = ...
部分的内容为：
15
DATABASES = {
'default': {
16
'ENGINE': 'django.db.backends.postgresql_psycopg2',
'NAME': 'postgres',
'USER': 'postgres',
'HOST': 'db', 17
'PORT': 5432,
}
18
}
182 第15章 Fig
此时会将默认的数据库连接改为连接到postgres数据库容器。
一切都配置好了，就可以在命令行中输入fig up来启动应用了：
$fig up
Recreating myapp_db_1...
Recreating myapp_web_1...
Attaching to myapp_db_1, myapp_web_1
myapp_db_1 |
myapp_db_1 | PostgreSQL stand-alone backend 9.1.11
myapp_db_1 | 2014-01-27 12:17:03 UTC LOG: database system is ready to accept connections
myapp_db_1 | 2014-01-27 12:17:03 UTC LOG: autovacuum launcher started
myapp_web_1 | Validating models...
myapp_web_1 |
myapp_web_1 | 0 errors found
myapp_web_1 | January 27, 2014 - 12:12:40
myapp_web_1 | Django version 1.6.1, using settings 'figexample.settings'
myapp_web_1 | Starting development server at http://0.0.0.0:8000/
myapp_web_1 | Quit the server with CONTROL-C.
这时开启浏览器，输入localhost:8000，就可以访问这个Django应用了。
15.5 WordPress 开发环境配置
Fig一样可以用在PHP应用的开发上，本节将介绍如何使用Fig来配置WordPress开发环境。
首先，下载WordPress源码，并将其解压到当前目录：
$ curl https://wordpress.org/latest.tar.gz | tar -xvzf -
目前，WordPress的最新版本为4.1。以上这条命令会创建名为wordpress的目录。进入此目录，
创建镜像文件 Dockerfile，其内容如下：
FROM orchardup/php5
ADD . /code
这个Dockerfile直接基于orchardup/php5并把当前目录的code子目录加入到容器内部，用于加
载WordPress的代码。
接着创建fig.yml，它将定义web服务和db服务，其中db服务基于mysql镜像。该文件的具体内
容为：
web:
build: .
command: php -S 0.0.0.0:8000 -t /code
ports:
- "8000:8000"
links:
- db
15.5 WordPress开发环境配置 183
volumes:
1
- .:/code
db:
2
image: mysql
environment:
MYSQL_DATABASE: wordpress
3
MYSQL_ROOT_PASSWORD: wordpress
要让WordPress应用跑起来，还需要新建两个文件。一个为wp-config.php，它是WordPress的
4
配置文件，这里我们仅需要修改其数据库连接部分，具体为：
<?php 5
define('DB_NAME', 'wordpress');
define('DB_USER', 'root');
define('DB_PASSWORD', ''); 6
define('DB_HOST', "db:3306");
define('DB_CHARSET', 'utf8');
define('DB_COLLATE', ''); 7
define('AUTH_KEY', 'put your unique phrase here');
define('SECURE_AUTH_KEY', 'put your unique phrase here');
define('LOGGED_IN_KEY', 'put your unique phrase here'); 9
define('NONCE_KEY', 'put your unique phrase here');
define('AUTH_SALT', 'put your unique phrase here');
define('SECURE_AUTH_SALT', 'put your unique phrase here'); 8
define('LOGGED_IN_SALT', 'put your unique phrase here');