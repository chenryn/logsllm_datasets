ways to integrate Facebook login in an app: (1) directly put a Face-
book login buton (implemented by Facebook library) in one of its
activity layout iles, or (2) call Facebook login function using pro-
gram code. Based on these two observations, we design another
screening procedure, which irst checks whether the Facebook lo-
gin buton exists in one of its activity layout iles within an app; if
there does not exist such a buton, then continues to search code
that invoking Facebook login methods from the Facebook library.
his code search is implemented by using the Soot framework and
checking the function call paterns. If the ilter neither inds out
the Facebook login buton nor the invoking code, then this app
will be discarded. With all these iltering analyses, eventually we
have 4, 838 apps in our dataset.
Testing Environment. All of our apps were tested in a real LG
Nexus 4 smartphone with Android 4.4 system. his phone is in-
stalled with our app post-authentication message generation com-
ponent, and is connected with a Ubuntu 14.04 desktop running
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA807150
100
50
s
p
p
A
e
l
b
a
r
e
n
u
V
l
f
o
r
e
b
m
u
N
0
Business
Com munication
Books& Reference
Entertainment
Finance
Food & Drink
Maps& Navigation
Lifestyle
Games
Health & Fitness
News& Magazines
Photography
M usic & Audio
Medical
Productivity
Shopping
Social
VideoPlayers& Editors
Travel& Local
Tools
Figure 5: Distribution of the Vulnerable Interfaces Based on the App Category.
Item
Σ # Apps
Σ Time to perform the test (hours)
Σ # Request messages
Σ # HTTP Messages
Σ Size of the messages (G-bytes)
Σ Time of activity exploration before authentication (hours)
Σ # Explored activities before authentication
Σ # Identiied views before authentication
Σ # Explored activities ater authentication
Σ # Identiied views ater authentication
Σ # Mutated ields
Σ # Suspicious interfaces
Σ # Public interfaces
Σ # Vulnerable interfaces
Table 2: Overall Experimental Result.
Value
4, 838
562 .4
3, 220, 886
178, 539
59 .2
169 .9
15, 367
503, 441
20, 704
1, 181, 442
57, 736
2, 976
2, 379
597
atop an Intel i7-6700k Skylake 4.00 GHz CPU with 8G memory.
his desktop controls the automatic app execution in the smart-
phone through the ADB interface by python script, and meanwhile
intercepts, collects, and mutates the network messages between
the apps and remote servers, using our man-in-the-middle proxy.
Also, we registered with Facebook two test accounts Alice and Bob
with email address PI:EMAIL and bob4testapp@
gmail.com, respectively.
5.2 Evaluation Result
Macro Level. We spent 562.4 hours in total to dynamically ana-
lyze these 4, 838 apps, and eventually we discovered 597 vulner-
able authorization implementations in the corresponding servers
that map to 306 apps. he overall experimental result is presented
in Table 2. In total, we generated 3, 220, 886 request messages, and
among them, 178, 539 are HTTP protocols (the rest are HTTPS).
he total size of these messages is 59.2 G-bytes. To execute the
Facebook login, our analysis spent 196.9 hours, during which we
explored 15, 367 activities, and 503, 441 views. Ater we get au-
thenticated, we explored 20, 704 activities, and 1, 181, 442 views.
We mutated in total 57, 736 ields, and found 2, 976 suspicious
server interfaces that have vulnerable authorization implementa-
tion. Among them, our further analysis revealed that 2, 379 are
public resource interfaces. Eventually, we found 597 vulnerable
server interfaces ater pruning those that provide public resources,
and they map to 306 mobile apps.
To understand those popular vulnerable services, we present the
distributions of these vulnerable app servers based on the corre-
sponding top level app category2 assigned by Google Play. his re-
sult is shown in Figure 5. Interestingly, we found these apps belong
to 20 categories. he top three categories include Lifestyle (which
has 153 vulnerable interfaces), Game (99), and Shopping (72). One
reason of why these categories contain so many vulnerable imple-
mentation is that we found the apps in these categories typically
highly interactive, the user data is oten stored, shared, updated in
their servers, which also means there are more resources in those
apps and more complicated access control implementation. Also,
surprisingly, we found a number of vulnerable implementations
in Finance (3) and Business (9) related apps. he data leakage in
these servers can cause serious damages to the end users. We will
discuss the severity of these leakages in §6.
Micro Level. Ater we have described the overall result, next we
show clearly how AuthScope performs for each app. We selected
the top downloaded app in each vulnerable server category pre-
sented in Figure 5 and show the detailed result in Table 3. he
irst two columns are the category name and package name3, re-
spectively, followed by the numbers of activities that we explored,
and the numbers of unique views that we identiied during the
dynamic analysis on each app. he ith column is the time that
our system spent on inding Facebook login, which is the time from
starting the app to successfully login the app. he sixth column is
total numbers of request messages that the app has generated, the
seventh column is the total number of ields that we substituted
2he only exception is we further cluster all top level game sub-category into a game
category.
3For the apps whose servers have not been patched yet as the time of this writing, we
do not reveal their full name and instead anonymize their name with ***.
Session D2:  Vulnerable Mobile AppsCCS’17, October 30-November 3, 2017, Dallas, TX, USA808Category
Books & Reference
Business
Communication
Entertainment
Finance
Food & Drink
Games
Health & Fitness
Lifestyle
Maps & Navigation
Medical
Music & Audio
News & Magazines
Photography
Productivity
Shopping
Social
Tools
Travel & Local
Video Players & Editors
Package Name
com.***.e***
com.***.k***
com.***.w***
com.***.c***
com.***.m***
com.***.h***
com.***.c***
com.***.u***
com.m***
com.***.***.c***
com.***.a***
com.b***
com.***.a***
com.***.j***
com.***.d***
cl.***.***.i***
in.v***
com.mediaingea.uptodown.lite
com.t***
cz.***.n***
Table 3: Detailed Experimental Results for Top Tested App in Each Category.
Time to
#Request
Login (s) Messages
975
927
727
739
790
1,032
1,050
966
1,229
490
927
933
880
965
882
961
1,068
1,276
1,024
821
#Mutated
Fields
16
12
1
2
7
8
7
10
29
12
9
15
9
7
10
10
20
25
10
5
45
30
41
32
16
21
20
15
25
26
23
25
37
26
32
44
20
112
35
25
#
#
Activities Views
288
1,224
970
184
549
924
609
788
1,938
667
1,616
456
462
909
1,347
795
645
1,347
321
218
3
8
18
3
8
10
7
12
17
11
18
2
5
15
15
8
10
7
5
4
#Public
Interfaces
5
2
0
0
0
4
3
2
5
7
2
3
0
0
5
0
4
6
0
1
#Vulnerable
Interfaces