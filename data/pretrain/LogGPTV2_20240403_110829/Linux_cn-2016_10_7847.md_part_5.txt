def handle_request(client_connection):
    request = client_connection.recv(1024)
    print(request.decode())
    http_response = b"""\
HTTP/1.1 200 OK
Hello, World!
"""
    client_connection.sendall(http_response)
def serve_forever():
    listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    listen_socket.bind(SERVER_ADDRESS)
    listen_socket.listen(REQUEST_QUEUE_SIZE)
    print('Serving HTTP on port {port} ...'.format(port=PORT))
    signal.signal(signal.SIGCHLD, grim_reaper)
    while True:
        try:
            client_connection, client_address = listen_socket.accept()
        except IOError as e:
            code, msg = e.args
            ### 若 'accept' 被打断，那么重启它
            if code == errno.EINTR:
                continue
            else:
                raise
        pid = os.fork()
        if pid == 0:  ### 子进程
            listen_socket.close()  ### 关闭子进程中多余的描述符
            handle_request(client_connection)
            client_connection.close()
            os._exit(0)
        else:  ### 父进程
            client_connection.close()  ### 关闭父进程中多余的描述符，继续下一轮循环
if __name__ == '__main__':
    serve_forever()
```
运行更新后的服务器 `webserver3f.py`：
```
$ python webserver3f.py
```
用 `curl` 来向更新后的并发服务器发送一个请求：
```
$ curl http://localhost:8888/hello
```
看到了吗？没有 EINTR 异常出现了。现在检查一下，确保没有僵尸进程存活，调用 `wait` 函数的 `SIGCHLD` 信号处理器能够正常处理被终止的子进程。我们只需使用 `ps` 命令，然后看看现在没有处于 `Z+` 状态（或名字包含 `` ）的 Python 进程就好了。很棒！僵尸进程没有了，我们很安心。
![](/data/attachment/album/201610/09/144233qv878ax8rlkb3sso.png)
* 如果你创建了一个子进程，但是不等待它，它就会变成一个僵尸进程；
* 使用 `SIGCHLD` 信号处理器可以异步地等待子进程终止，并收集其终止状态；
* 当使用事件处理器时，你需要牢记，系统调用可能会被打断，所以你需要处理这种情况发生时带来的异常。
#### 正确处理 SIGCHLD 信号
好的，一切顺利。是不是没问题了？额，几乎是。重新尝试运行 `webserver3f.py` 但我们这次不会只发送一个请求，而是同步创建 128 个连接：
```
$ python client3.py --max-clients 128
```
现在再次运行 `ps` 命令：
```
$ ps auxw | grep -i python | grep -v grep
```
看到了吗？天啊，僵尸进程又出来了！
![](/data/attachment/album/201610/09/144247j00e0g8unel00ynx.png)
这回怎么回事？当你同时运行 128 个客户端，建立 128 个连接时，服务器的子进程几乎会在同一时间处理好你的请求，然后退出。这会导致非常多的 `SIGCHLD` 信号被发送到父进程。问题在于，这些信号不会存储在队列中，所以你的服务器进程会错过很多信号，这也就导致了几个僵尸进程处于无主状态：
![](/data/attachment/album/201610/09/144248d4q49tpglnnnntpz.png)
这个问题的解决方案依然是设置 `SIGCHLD` 事件处理器。但我们这次将会用 `WNOHANG` 参数循环调用 `waitpid` 来替代 `wait`，以保证所有处于终止状态的子进程都会被处理。下面是修改后的代码，[webserver3g.py](https://github.com/rspivak/lsbaws/blob/master/part3/webserver3g.py)：
```
#######################################################
# 并发服务器 - webserver3g.py                          #
#                                                     #
# 使用 Python 2.7.9 或 3.4                             #
# 在 Ubuntu 14.04 及 Mac OS X 环境下测试通过            #
#######################################################
import errno
import os
import signal
import socket
SERVER_ADDRESS = (HOST, PORT) = '', 8888
REQUEST_QUEUE_SIZE = 1024
def grim_reaper(signum, frame):
    while True:
        try:
            pid, status = os.waitpid(
                -1,          ### 等待所有子进程
                 os.WNOHANG  ### 无终止进程时，不阻塞进程，并抛出 EWOULDBLOCK 错误
            )
        except OSError:
            return
        if pid == 0:  ### 没有僵尸进程存在了
            return
def handle_request(client_connection):
    request = client_connection.recv(1024)
    print(request.decode())
    http_response = b"""\
HTTP/1.1 200 OK
Hello, World!
"""
    client_connection.sendall(http_response)
def serve_forever():
    listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    listen_socket.bind(SERVER_ADDRESS)
    listen_socket.listen(REQUEST_QUEUE_SIZE)
    print('Serving HTTP on port {port} ...'.format(port=PORT))
    signal.signal(signal.SIGCHLD, grim_reaper)
    while True:
        try:
            client_connection, client_address = listen_socket.accept()
        except IOError as e:
            code, msg = e.args
            ### 若 'accept' 被打断，那么重启它
            if code == errno.EINTR:
                continue
            else:
                raise
        pid = os.fork()
        if pid == 0:  ### 子进程
            listen_socket.close()  ### 关闭子进程中多余的描述符
            handle_request(client_connection)
            client_connection.close()
            os._exit(0)
        else:  ### 父进程
            client_connection.close()  ### 关闭父进程中多余的描述符，继续下一轮循环
if __name__ == '__main__':
    serve_forever()
```
运行服务器：
```
$ python webserver3g.py
```
使用测试客户端 `client3.py`：
```
$ python client3.py --max-clients 128
```
现在来查看一下，确保没有僵尸进程存在。耶！没有僵尸的生活真美好 `^_^`。
![](/data/attachment/album/201610/09/144249sxqgjqoj5cvo5on5.png)
### 大功告成
恭喜！你刚刚经历了一段很长的旅程，我希望你能够喜欢它。现在你拥有了自己的简易并发服务器，并且这段代码能够为你在继续研究生产级 Web 服务器的路上奠定基础。
我将会留一个作业：你需要将第二部分中的 WSGI 服务器升级，将它改造为一个并发服务器。你可以在[这里](https://github.com/rspivak/lsbaws/blob/master/part3/webserver3h.py)找到更改后的代码。但是，当你实现了自己的版本之后，你才应该来看我的代码。你已经拥有了实现这个服务器所需的所有信息。所以，快去实现它吧 `^_^`。
然后要做什么呢？乔希·比林斯说过：
> 
> “就像一枚邮票一样——专注于一件事，不达目的不罢休。”
> 
> 
> 
开始学习基本知识。回顾你已经学过的知识。然后一步一步深入。
![](/data/attachment/album/201610/09/144250vs6pqlc7jzpbs57b.png)
> 
> “如果你只学会了方法，你将会被这些方法所困。但如果你学会了原理，那你就能发明出新的方法。”——拉尔夫·沃尔多·爱默生
> 
> 
> “有道无术，术尚可求也，有术无道，止于术”——中国古代也有这样的话，LCTT 译注
> 
> 
> 
下面是一份书单，我从这些书中提炼出了这篇文章所需的素材。他们能助你在我刚刚所述的几个方面中发掘出兼具深度和广度的知识。我极力推荐你们去搞到这几本书看看：从你的朋友那里借，在当地的图书馆中阅读，或者直接在亚马逊上把它买回来。下面是我的典藏秘籍：
1. [《UNIX 网络编程 卷1：套接字联网 API （第3版）》](http://www.epubit.com.cn/book/details/1692)
2. [《UNIX 环境高级编程（第3版）》](http://www.epubit.com.cn/book/details/1625)
3. [《Linux/UNIX 系统编程手册》](http://www.epubit.com.cn/book/details/1432)
4. [《TCP/IP 详解 卷1：协议（第2版）](http://www.epubit.com.cn/book/details/4232)
5. [《信号系统简明手册 (第二版): 并发控制深入浅出及常见错误》](http://www.amazon.com/gp/product/1441418687/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=1441418687&linkCode=as2&tag=russblo0b-20&linkId=QFOAWARN62OWTWUG)，这本书也可以从[作者的个人网站](http://greenteapress.com/semaphores/)中免费下载到。
顺便，我在撰写一本名为《搭个 Web 服务器：从头开始》的书。这本书讲解了如何从头开始编写一个基本的 Web 服务器，里面包含本文中没有的更多细节。订阅[原文下方的邮件列表](https://ruslanspivak.com/lsbaws-part1/)，你就可以获取到这本书的最新进展，以及发布日期。
---
via: 
作者：[Ruslan](https://github.com/rspivak/) 译者：[StdioA](https://github.com/StdioA) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出