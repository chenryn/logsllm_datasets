be recompiled to include special instrumentation. It has an almost magical ability to
generate valid inputs for a program from the smallest of examples.
Kali Linux
Website https://www.kali.org/
Licenses A range of open source and non-free licenses depending on the packages
used
Platforms ARM, Intel x86 and x64
Kali is a Linux distribution designed for penetration testing. It comes pre-installed with
Nmap, Wireshark, Burp Suite, and various other tools listed in this appendix. Kali is
Technet24
||||||||||||||||||||
||||||||||||||||||||
invaluable for testing and exploiting network protocol vulnerabilities, and you can install it
natively or run it as a live distribution.
Metasploit Framework
Website https://github.com/rapid7/metasploit-framework/
License BSD, with some parts under different licenses
Platforms BSD, Linux, macOS, Windows
Metasploit is pretty much the only game in town when you need a generic vulnerability
exploitation framework, at least if you don’t want to pay for one. Metasploit is open
source, is actively updated with new vulnerabilities, and will run on almost all platforms,
making it useful for testing new devices. Metasploit provides many built-in libraries to
perform typical exploitation tasks, such as generating and encoding shell code, spawning
reverse shells, and gaining elevated privileges, allowing you to concentrate on developing
your exploit without having to deal with various implementation details.
Scapy
Website http://www.secdev.org/projects/scapy/
License GPLv2
Platforms Any Python-supported platform, although it works best on Unix-like
platforms
Scapy is a network packet generation and manipulation library for Python. You can use it
to build almost any packet type, from Ethernet packets through TCP or HTTP packets.
You can replay packets to test what a network server does when it receives them. This
functionality makes it a very flexible tool for testing, analysis, or fuzzing of network
protocols.
Sulley
Website https://github.com/OpenRCE/sulley/
License GPLv2
Platforms Any Python-supported platform
Sulley is a Python-based fuzzing library and framework designed to simplify data
representation, transmission, and instrumentation. You can use it to fuzz anything from
file formats to network protocols.
||||||||||||||||||||
||||||||||||||||||||
Network Spoofing and Redirection
To capture network traffic, sometimes you have to redirect that traffic to a listening
machine. This section lists a few tools that provide ways to implement network spoofing
and redirection without needing much configuration.
DNSMasq
Website http://www.thekelleys.org.uk/dnsmasq/doc.html
License GPLv2
Platform Linux
The DNSMasq tool is designed to quickly set up basic network services, such as DNS and
DHCP, so you don’t have to hassle with complex service configuration. Although
DNSMasq isn’t specifically designed for network spoofing, you can repurpose it to redirect
a device’s network traffic for capture, analysis, and exploitation.
Ettercap
Website https://ettercap.github.io/ettercap/
License GPLv2
Platforms Linux, macOS
Ettercap (discussed in Chapter 4) is a man-in-the-middle tool designed to listen to
network traffic between two devices. It allows you to spoof DHCP or ARP addresses to
redirect a network’s traffic.
Executable Reverse Engineering
Reviewing the source code of an application is often the easiest way to determine how a
network protocol works. However, when you don’t have access to the source code, or the
protocol is complex or proprietary, network traffic–based analysis is difficult. That’s where
reverse engineering tools come in. Using these tools, you can disassemble and sometimes
decompile an application into a form that you can inspect. This section lists several reverse
engineering tools that I use. (See the discussion in Chapter 6 for more details, examples,
and explanation.)
Java Decompiler (JD)
Website http://jd.benow.ca/
Technet24
||||||||||||||||||||
||||||||||||||||||||
License GPLv3
Platforms Supported Java platforms (Linux, macOS, Solaris, Windows)
Java uses a bytecode format with rich metadata, which makes it fairly easy to reverse
engineer Java bytecode into Java source code using a tool such as the Java Decompiler.
The Java Decompiler is available with a stand-alone GUI as well as plug-ins for the
Eclipse IDE.
IDA Pro
Website https://www.hex-rays.com/
License Commercial; limited free version available
Platforms Linux, macOS, Windows
IDA Pro is the best-known tool for reverse engineering executables. It disassembles and
decompiles many different process architectures, and it provides an interactive
environment to investigate and analyze the disassembly. Combined with support for
custom scripts and plug-ins, IDA Pro is the best tool for reverse engineering executables.
Although the full professional version is quite expensive, a free version is available for
noncommercial use; however, it is restricted to 32-bit x86 binaries and has other
||||||||||||||||||||
||||||||||||||||||||
limitations.
Hopper
Website http://www.hopperapp.com/
License Commercial; a limited free trial version is also available
Platforms Linux, macOS
Hopper is a very capable disassembler and basic decompiler that can more than match
many of the features of IDA Pro. Although as of this writing Hopper doesn’t support the
range of processor architectures that IDA Pro does, it should prove more than sufficient in
most situations due to its support of x86, x64, and ARM processors. The full commercial
version is considerably cheaper than IDA Pro, so it’s definitely worth a look.
ILSpy
Website http://ilspy.net/
Technet24
||||||||||||||||||||
||||||||||||||||||||
License MIT
Platform Windows (with .NET4)
ILSpy, with its Visual Studio–like environment, is the best supported of the free .NET
decompiler tools.
.NET Reflector
Website https://www.red-gate.com/products/dotnet-development/reflector/
License Commercial
Platform Windows
Reflector is the original .NET decompiler. It takes a .NET executable or library and
converts it into C# or Visual Basic source code. Reflector is very effective at producing
readable source code and allowing simple navigation through an executable. It’s a great
tool to have in your arsenal.
||||||||||||||||||||
||||||||||||||||||||
Technet24
||||||||||||||||||||
||||||||||||||||||||
INDEX
Symbols and Numbers
\ (backlash), 47, 220
/ (forward slash), 81, 220
- (minus sign), 55
+ (plus sign), 55
7-bit integer, 39–40
8-bit integer, 38–39
32-bit system, 263
32-bit value, 40–41
64-bit system, 263
64-bit value, 40–41
8086 CPU, 114
A
A5/1 stream cipher, 159
A5/2 stream cipher, 159
ABI (application binary interface), 123–124, 259–260
Abstract Syntax Notation 1 (ASN.1), 53–54
accept system call, 123
acknowledgment (DHCP packet), 72
acknowledgment flag (ACK), 41
active network capture, 20, 280–282. See also passive network capture
add() function, 124
ADD instruction, 115
add_longs() method, 198
add_numbers() method, 197
Address Resolution Protocol (ARP), 6–7, 74–77
addresses, 4
32-bit, 5
destination, 5
MAC, 6–8, 74–77
||||||||||||||||||||
||||||||||||||||||||
source, 5
address sanitizer, 243–244
address space layout randomization (ASLR)
bypassing with partial overwrites, 272–273
exploiting implementation flaws in, 271–272
memory information disclosure vulnerabilities, 270–271
Adleman, Leonard, 160
Advanced Encryption Standard (AES), 133, 150, 152
AJAX (Asynchronous JavaScript and XML), 57
algorithms
complexity of, 224–225
cryptographic hashing, 164–165
Diffie–Helman Key Exchange, 162–164
hash, 165
key-scheduling, 151
message digest (MD), 164
MD4, 165
MD5, 133, 165–167
RSA, 149, 160–162, 165
secure hashing algorithm (SHA), 164, 202
SHA-1, 133, 165–166
SHA-2, 165
SHA-3, 168
signature, 146
asymmetric, 165
cryptographic hashing algorithms, 164–165
message authentication codes, 166–168
symmetric, 166
AMD, 114
American Fuzzy Lop, 285–286
AND instruction, 115
antivirus, 23
application, 3
content parsers, 4
network communication, 4
passive network traffic capture, 11
user interface, 4
Technet24
||||||||||||||||||||
||||||||||||||||||||
application binary interface (ABI), 123–124, 259–260
application layer, 3
apt command line utility, 31
arbitrary writing of memory, 253–254
ARM architecture, 42, 118
ARP poisoning, 74–77
ASCII
character encoding, 42
code pages, 44
control characters, 43
printable characters, 43
text-encoding conversions, 229–230
ASLR. See address space layout randomization (ASLR)
ASN.1 (Abstract Syntax Notation 1), 53–54
assembler, 113, 258
assemblies, 138
assembly language, 113
assembly loading, 190–193
asymmetric key cryptography, 159–164. See also symmetric key cryptography
private key, 160
public key, 160
RSA algorithm, 160–162
RSA padding, 162
trapdoor functions, 160
asymmetric signature algorithms, 165
Asynchronous JavaScript and XML (AJAX), 57
AT&T syntax, 116
attributes (XML), 58
authentication bypass, 209
authorization bypass, 209–210
automated code, identifying, 133–134
B
backslash (\), 47, 220
base class library, 141
||||||||||||||||||||
||||||||||||||||||||
Base64, 60–61
Berkeley packet filter (BPF), 180
Berkeley Sockets Distribution (BSD), 15
Berkeley Sockets model, 15, 121
big endian, 42, 52, 122
Big-O notation, 225
binary conversions, 90–92
binary protocols. See also protocols
binary endian, 41–42
bit flags, 41
Booleans, 41
formats, 53–54
numeric data, 38–41
strings, 42–46
variable binary length data, 47–49
bind system call, 15
bit flags, 41
bit format, 38
block ciphers. See also stream ciphers
AES, 150, 152
common, 152
DES, 150–151
initialization vector, 154
modes, 152–155
cipher block chaining, 153–155
Electronic Code Book, 152
Galois Counter, 155
padding, 155–156
padding oracle attack, 156–158
Triple DES, 151
Blowfish, 152
Booleans, 41, 55
BPF (Berkeley packet filter), 180
breakpoints, 135, 137
BSD (Berkeley Sockets Distribution), 15
bss data, 120
Bubble Sort, 224
Technet24
||||||||||||||||||||
||||||||||||||||||||
bucket, 225
buffer overflows
fixed-length, 211–213
heap, 248–249
integer, 214–215
stack, 246–248
variable-length, 211, 213–214
Burp Suite, 283–284
bytes, 38
C
C# language, 112, 189, 210
C++ language, 112, 132
ca.crt file, 203
CALL instruction, 115
Camellia, 152
Canape Core, 21–22, 25, 103–105, 280–281
Canape.Cli, xxiv, 202
canonicalization, 220–221
ca.pfx file, 203
capture.pcap file, 180
capturing network traffic
active method, 20
passive method, 12–20
proxies
HTTP, 29–35
man-in-the-middle, 20
port-forwarding, 21–24
SOCKS, 24–29
resending captured traffic, 182–183
system call tracing
Dtrace, 17–18
Process Monitor tool, 18–19
strace, 16
carriage return, 56
carry flag, 117
||||||||||||||||||||
||||||||||||||||||||
CBC (cipher block chaining), 153–155
CDB (debugger), 236–241
cdecl, 199
cdll, 199
Cert Issuer, 200–202
Cert Subject, 200–201
certificate
authority, 170, 202
chain verification, 170–172
pinning, 177
revocation list, 171
root, 170
store, 204
X.509, 53–54, 169–171, 173
certmgr.msc, 203