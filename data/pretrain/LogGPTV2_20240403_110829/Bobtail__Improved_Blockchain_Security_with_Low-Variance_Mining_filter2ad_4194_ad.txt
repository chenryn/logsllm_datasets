the k proof sets in the proof package points to V1 as support
(excluding the support for V1 itself), then the creator of V1
is the only miner capable of assembling that proof package.
Conversely, although another miner, say the one who generated
V2, might be capable of collecting a set of proofs that exclude
V1 but still have mean below target tk, that miner cannot
assemble a proof package if even a single proof set includes
V1 as support.
B. Performance
We ran a discrete event simulator to determine the efﬁcacy of
the orphan prevention measures described in Section VI-A. The
simulation includes only honest miners: once he has received
a valid proof package, an honest miner does not release a
Fig. 7: Monte Carlo Simulation. Selﬁsh mining attack success in
terms blocks mined (top) and rewards captured (bottom) given
k (different curves) for various values of attacker mining power q
(on the independent axis); q ≤ 0.495. The straight dashed identity
line shows the results of honest mining; the curved dash-dotted
line shows analytical results from Eyal and Sirer [23, Eq. 8]. Error
bars show 95% c.i.’s.
are generated when the announcement of a new block by one
miner takes time to propagate to all other miners. In the interim,
a second miner may produce a valid block. At that point, the
subset of miners who received the ﬁrst block ﬁrst will attempt
to build upon it, and the remaining miners will build upon
the second. Eventually the blockchain will fork on just one
of those blocks, orphaning the other. If the set of transactions
in the two blocks is not the same, then consensus is delayed.
While the occurrence of orphans in Bitcoin is relatively low,
Ethereum’s use of a 15-second average block discovery time
increases its orphan rate signiﬁcantly.
In Appendix A, we show that Xi, the number of block
intervals required to mine the ith order statistic, has distribution
Gamma(i, 1/r), where 1/r is the expected number of intervals
I required for Vi
to fall below v. Interpreting v as the
target and letting I equal one second, it follows that X1
represents the block inter-arrival time, and it has distribution
Exponential(1/r) = Exponential(T ), where T is the
expected block time in seconds. Therefore, in existing PoW
blockchains, the probability that one or more other blocks will
be discovered during propagation time τ is bounded by 1− 1
eτ /T
9
llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllgamma= 0gamma= 10.00.10.20.30.40.50.00.10.20.30.40.50%10%20%30%40%50%60%70%80%90%100%attacker mining powerProportion of main chain blockskllll1520100llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllgamma= 0gamma= 10.00.10.20.30.40.50.00.10.20.30.40.50%10%20%30%40%50%60%70%80%90%100%attacker mining powerProportion of main chain rewardskllll1520100llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllBitcoin (tau=10s,T=600s)Ethereum (tau=5s,T=15s)0102030400102030400.0%5.0%10.0%15.0%20.0%25.0%30.0%0.00%0.50%1.00%1.50%kratecompeting proof package of his own. We evaluate attacks on
Bobtail subsequently.
The simulation generates blocks by repeatedly selecting
values uniformly at random between 0 and 232. The smallest k
values are used to assemble a candidate block given a pre-set
target value. The propagation delay of new proofs and blocks is
τ seconds. Once a block is found, we assume that the authoring
miner drops out and her mining power is replaced by a new
honest miner; i.e., the hash rate does not change. For τ seconds,
the miners continue seeking a new block following the rules in
Section II. For example, if they ﬁnd a block is possible with a
higher V1, they will not release the new block.
Fig. 8 (left) shows the results for a Bitcoin-like scenario
where the inter-block time is targeted at T = 600 seconds and
the propagation delay is τ = 10 seconds. The orphan rate for
k = 1 follows the expected exponential distribution, shown
as a dashed line. The experiment shows that, across multiple
values of k, the 95% conﬁdence interval for orphan rate in
Bobtail consistently falls at or below the k = 1 rate. Fig. 8
(right) shows the same result for a simulation of Ethereum
where τ = 5 and T = 15 seconds, respectively.
VII. LOWERING NETWORK OVERHEAD
When the mining statistic is Wk, k (cid:29) 1, it is not efﬁcient
for each miner to send proof of work every time she ﬁnds a hash
value lower than her previous k best. A slight improvement to
that scheme is for her to send proof of work only when her hash
value is lower than the lowest k hashes produced by all miners
cumulatively. But even this approach will result in a large
amount of network trafﬁc early in the mining process because
hash values are generated uniformly at random throughout
the mining interval (see Lemma 5); the k lowest overall are
unlikely to be generated early in the mining process.
To improve network efﬁciency signiﬁcantly we instruct
miners to propagate proof sets only if the associated proof is
at least minimally likely to be among the k lowest. To that
end, we seek a proof value x such that the k lowest proofs
will fall below x with probability p, p ≈ 1.
We know from Theorem 6 in Appendix A that the kth order
statistic Vk has distribution Gamma(y; k, v), where v is the
expected minimum proof value. The inverse of that distribution
is Quantile-Gamma(p; k, v), which returns the value y for
which Gamma(y; k, v) = p. Therefore, a natural choice for our
bounding proof value is
x = Quantile-Gamma(p; k, v).
(18)
The following theorem establishes the expected number of
proofs forwarded per block when we propagate only the proofs
lower than x.
THEOREM 3: For proof value threshold x deﬁned by
Eq. 18, the expected number of proofs announced to the
network is Quantile-Gamma(p; k, 1).
PROOF: Note from Eq. 5 that v = S/h when tk is
tuned for blocks to be generated in a single interval I (i.e.,
r = 1). We expect h hashes per block interval, and each
has probability x/S of being below x. Therefore, the random
variable representing the number of proofs forwarded by all
10
miners follows distribution Binomial(n = h, p = x/S),
which has expectation:
1
v
· Quantile-Gamma(p; k, v)
= Quantile-Gamma(p; k, v/v)
= Quantile-Gamma(p; k, 1)
hx
S
=
(19)
2
Notably, for p = 0.999999, the value remains quite low. For
example, when k = 40, only about 80 proofs are sent on the
network. Further, the value is independent of h, the expected
number of hashes required to mine a block, as well as S, the
size of the hash space. We can also use a Chernoff bound
for the binomial distribution to bound the deviation in the
number of messages M. Let z = Quantile-Gamma(p; k, 1).
We have,
Pr[M ≥ (1 + )z] ≤ e
(20)
This is a tight bound, and it decreases exponentially with z and
similarly with k. For example, when k = 2 and p = 0.999999,
then z ≈ 16.7, and we see that P (M > 1.9z) ≤ 0.0095. For
k = 3, the probability decreases to 0.004, and so on.
−z2
2+ .
VIII.
INCENTIVIZING HONEST BEHAVIOR WITH REWARDS
In this section, we show that there exists a reward scheme
(coinbase, ignoring fees) that incentivizes miners to: (i) continue
mining for increased reward, rather than stopping once any
proof is discovered; (ii) use the lowest proof they know of as
support; and (iii) immediately broadcast all sufﬁciently low
proofs. With this reward scheme in place, Bobtail thwarts
attacks described in Section III. At a high level, the rewards
scheme is as follows. Recall that a proof Vi is the hash of
proof set Pi. And support si, for a proof set Pi, is the lowest
proof that the miner has received to date among those sharing
the same prior block. We assign rewards as follows.
• To the miners of each proof set P1, . . . ,Pk in the proof
package K, we assign primary reward R; all proofs in a
given package receive the same amount, but the amount
may vary from block to block.
• To the miners of each proof set whose support is V1, we
award a bonus reward B, which is again the same for
every proof pointing to V1, but may vary by block.
Below, we evaluate the scheme with respect to all three
properties ﬁrst assuming honest miner behavior. Speciﬁcally,
we determine the expected primary and bonus rewards accrued
by an honest miner across all proofs in a given block. We
further derive the expected total reward T , which is the sum
of expected primary and bonus rewards for a miner following
the honest strategy. We then show that dishonest miners can
expect to receive lower rewards.
A. Analysis of Honest Miners
We begin with a basic result that is useful in contemplating
reward distribution.
LEMMA 5:
In expectation, a fraction x of the mining
power will generate a fraction x of all proofs as well as
a fraction x of the k lowest proofs.
PROOF: Without loss of generality, assume a single miner M
controls fraction x of the mining power. All hashes generated
are uniformly distributed throughout space S. Therefore, of
all the hashes that fall within an arbitrary interval of S, miner
M expects to have generated fraction x. The interval [0, S]
contains all proofs; it is therefore clear that M expects to
generate fraction x of all proofs. Moreover, the set of all proofs
K that are at or below the kth order statistic deﬁnes an interval,
[0, Vk]. Thus, M expects to generate fraction x of proofs in K
as well, which constitutes fraction x of the set of the k lowest
proofs.
2
We next analyze the reward payout with respect to our
desired mining properties under the assumption that all miners
behave honestly, i.e. according to the protocol. Consider a
miner M who possesses fraction x of the total mining power.
According to Lemma 5, M can expect to have generated
fraction x of the k proofs in the proof package. Therefore,
M will earn xkR primary reward in expectation. Calculating
the expected bonus reward requires the following observation.
LEMMA 6: The rank (i.e., position in an ascending list
by value) of a proof is uncorrelated with the time it is
generated.
1 ,P∗
PROOF: Let P = P∗
2 , . . . be the set of all proof sets
generated during time interval I listed in the order that they
appear chronologically such that P∗
i was generated before P∗
j
if i < j. Deﬁne V ∗
2 , . . .
denote the set of all proofs generated during I. It will sufﬁce
to show that the probability that P∗
i achieves a given value
ν ∈ V(P), conditioned on all values V(P), is uniform for all
P∗
i .
i ), and let V(P) = V ∗
i = h(P∗
1 , V ∗
Pr[V ∗
V(P)\{ν}, which implies Pr[V(P) | V ∗
because Pr[V ∗
Being drawn from a uniform distribution, we have that
i = ν] is equal for all proofs P∗
i . Next deﬁne V\ν(P) =
i = ν] = Pr[V\ν(P)]
j ] are independent for i (cid:54)= j. Thus
i ] and Pr[V ∗
Pr[V ∗
i = v | V(P)] = Pr[V(P) | V ∗
Pr[V(P)]
i =ν] Pr[V ∗
i =ν]
i = ν] Pr[V\ν (P)]
Pr[V(P)]
= Pr[V ∗
= c,
(21)
Fig. 9: A Monte Carlo simulation of rewards issued by Bobtail for
an honest miner with a given fraction of the mining power. The
dotted lines show the predicted value of R and B from Eq. 22.
Fig. 10: In these Monte Carlo results, we have modiﬁed the
simulation so that miners follow Rule I from Section VIII-B; i.e.,
all miners prioritize their own proofs when assembling the block.
With the rule in place, rewards are still issued proportionally.
once a proof is found. Second, her total reward is an increasing
function of the number of her proofs that point to V1. And
third, because total reward is also an increasing function of the
number of proofs in the proof package, she is incentivized to
release her proofs as soon as possible so as to give them the
greatest chance of being included.
Fig. 9 shows the results of this rewards scheme from a
Monte Carlo simulation of honest miners. The dotted lines
show the values predicted by Eq. 22. Next, we demonstrate
that dishonest miners earn only fewer rewards.
for some constant c.
2
B. Thwarting Proof Withholding Attacks
We can use Lemma 6 to show that half of a miner’s proof
sets in the proof package are expected to be generated after
V1. Thus honest miner M, with fraction x of the hash rate, is
2 proofs that use V1 as support. It follows
expected to generate xk
that M’s expected bonus reward is equal to xkB
2 . Finally, the
expected total reward for the honest miner is given by
TH = xk (R + B/2) .
(22)
From this expression for total reward, we can see that
honest mining delivers all three desired mining properties.
First, a miner’s reward is proportional to her hash rate, which
encourages her to mine as much as possible rather than stopping
Bobtail allows for an attack where a malicious miner
withholds proof sets for a competitive advantage. In this section,
we demonstrate that our design of Bobtail ensures that the
economic reward for withholding attackers is substantially lower
than that of honest miners.
In the withholding attack, the malicious miner does not
immediately announce her own proof sets to the other miners.
This behavior can be advantageous in two ways. First, it gives
her more time to mine V1, which would allow her to control
the set of transactions included in the block, T1. Second, it
allows the attacker to pack more of her own proof sets into the
proof package if she does manage to mine V1. The attacker
11
llllllllllllllllllll primarybonusesno withholding0.00.10.20.30.40.50.00.10.20.30.40.502468101214161820Mining powerCount per block (mean)lllllllllllllllllllprimarybonusesRule I only0.00.10.20.30.40.50.00.10.20.30.40.502468101214161820Mining powerCount per block (mean)allocation of rewards and bonuses when all miners follow Rule
I above: there is no difference from Fig. 9. In short, although
it seems selﬁsh to prioritize one’s own proof sets, if all miners
do it then there is no advantage. Hence, we have eliminated
this attack.
Fig. 11 demonstrates the need for Rule II. We modiﬁed
our simulation so that attackers withhold their proof sets. As
a result, the honest miners lose out on bonuses because they
do not know the correct supporting proof to list. There is no
immediate gain for attackers for doing so, but note that they
have effectively lowered the total hash rate of the network,
while packing a higher fraction of their proof sets into the
proof package than their hash rate should allow. Thus, once
the difﬁculty adjusts to this lower overall hash rate, attackers
will gain higher reward than if they behaved honestly. In other
words, without Rule II in place, a Bobtail-speciﬁc version of
the selﬁsh mining attack [23] is possible.
Fig. 12 shows result of the withholding attack when Rules I
and II are both in place. Withholding of proof sets from honest
miners results in the attacking miner receiving lower primary
and bonus rewards. In fact, honest miners gain from the attack,
further incentivizing honest behavior.
C. Thwarting DoS Attacks
Bobtail is robust to a denial-of-service (DoS) attack from
the holder of the true 1OS who refuses to publish a block.
First, the attack is easy for honest miners to detect. In the type
of mining environment seen in Bitcoin today — where most
of the hash rate is attributable to a set of known miners —
one could easily imagine a practical countermeasure would be
for honest miners to ban attackers who conduct DoS attacks,
refusing to forward any of their proofs. Second, there exists an
opportunity cost to attackers in the form of lost bonus reward.
And third, even when the attacker has as much as 50% of
the hash rate, the expected increase in inter-block time due to
DoS attack does not exceed twice the target time. We presently
explore the last two points in more detail.
Opportunity cost. Suppose that the attacker holds the 1OS
(lowest proof value overall). In a DoS attack, he will release
this proof and any others he generates, but will never release
an assembled block. Yet the protocol stipulates that honest
miners should not accept a block if V1 is greater than the 1OS
(see the ﬁrst additional rule in Section II-B). And in any case,
honest miners will also include the 1OS as support, which
again means that no greater proof value can be used as V1.
Therefore, miners will be unable to assemble a block until one
of them produces a lower proof than the attacker’s current 1OS
(one that is valid as V1 in the block). At that point, any proof
(be it from the attacker or from honest) can be added to the
block and receive primary reward, but no proof will receive a
bonus because it cannot have pointed to V1, which just arrived.
This amounts to an opportunity cost for the attacker, which we
term bonus cost, and it is the basis of the following result.
THEOREM 4: In expectation, and regardless of the
attacker’s hash rate, at most 1 out of every k blocks can
be subject to DoS attack without incurring a bonus cost
to the attacker.
Fig. 11: In this Monte Carlo simulation, we include attacking
miners who attempt to withhold their proofs and we do not
include Rule II from Section VIII-B: although there are no gains
for the attacking miners, the honest miners lose out on bonuses.
Fig. 12: In this Monte Carlo simulation, we include attacking