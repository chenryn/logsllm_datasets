### Defect Trends in the Bringup Phase

The defect count begins to rise significantly during the Bringup phase. As the design is exercised for the first time, a large number of defects are discovered. In fact, as Figure 3 illustrates, more Spot defects were found in the Bringup phase than in any other phase, accounting for 46% of the total. By the Integration phase, most of the critical defects have already been identified, and the defect rate is lowest in the Operation phase.

#### Defect Observations

To provide insight into the relatively high number of defects found in the Bringup phase, Figure 4 shows the four major milestones marking the progress of Spot through this phase. For each of the three Spot revisions, the total number of days to reach each milestone is provided, measured from the date of hardware availability. Generally, the voltage regulators come up quickly, although there may be adjustments later in the phase. The next goal is to exercise the memory bus and flash memory via the JTAG test access port on the microprocessor; this static test can reveal many simple logic and net errors. Once the flash memory can be programmed, the next test is to have the processor execute the bootloader, which is the first dynamic test of the memory. Finally, once the serial port and SDRAM have been verified, the operating system can be loaded, and the process moves to the Integration phase.

Figure 4 indicates that a significant amount of Bringup time is spent resolving simple configuration and control logic errors. The JTAG and flash programming milestone exercises the memory interface very slowly, so any problems arising at this stage are unlikely to be subtle or timing-related.

### Defects by Subsystem

The previous section organized information about Spot defects according to the various phases of the design process. An equally important view of defects is the design aspect they affect. Figure 5 shows 150 of the 163 total Spot defects, which can be associated with the features listed in Table 1. More than half of these defects are linked to the memory interface, a serial I/O subsystem, or the power supply electronics. These three subsystems are complex and even overlap. For example, one of the sixteen memory bus devices on Spot is the FireWire serial bus controller; additionally, the Spot power supplies can be driven from the FireWire bus.

### Design Risk and Reference Implementations

Another interesting perspective on defects is the amount of design risk they reflect. For example, there exists a reference electronic schematic for the processor used in Spot, and a reference version of the Linux kernel for that design. Some portions of the reference schematic and kernel were reused in Spot, but most subsystems were either modified from the reference or not present in the reference at all. Figure 6 shows the relative proportion of defects observed in Spot that could be directly traced to an equivalent element of the reference design. These 90 defects generally exclude mechanics, manufacturing, and routing, as these activities do not directly reuse elements of other designs.

### Defect Types and Disciplines

The representations in Figures 5 and 6 are closely tied to the details of a specific design. A more general organization is shown in Figure 7, where defects are decomposed according to their discipline or type. Within each of electronics, manufacturing, software, and mechanics, there is a non-uniform distribution of defects. This representation could be used to predict the kind of developer resources within each field that might be helpful. For example, nearly all of the electronic design defects involve incorrect circuits or errors in entering a good circuit into the schematic editor. Most manufacturing problems could be traced to the way in which the circuit boards were populated or manually repaired. Software errors tended to be simple value assignment problems, such as bad register initializations, and relatively few bugs were traced to code written outside of the project, such as the Linux kernel. There was a greater variety of industrial design and mechanical defects, but the majority involved some sort of conflict between component placement and the housing; improved 3D visualization capabilities might have been helpful in this aspect of the design.

### Orthogonal Defect Classification (ODC)

Section 3 provided a time-based view of development effort, while Section 4 focused on subsystems and the per-discipline type of defects. In this section, we combine these two approaches using a multidimensional defect categorization system originated by IBM for software development. ODC tracks changes in the distributions of several defect attributes throughout the course of a development process. Given a properly calibrated ODC, automated tools can be used in-process to flag deviations from expected defect discoveries.

In this paper, we attempt to refine a variant of ODC for electromechanical systems, introduced in [1], which classifies defects along six dimensions. The original work developed a categorization scheme based on observed defect data for V¯u·Man 2R and Navigator 2. In general, we were able to reuse this scheme to interpret the Spot defect data. In future work, we hope to apply ODC in-process to test the usefulness of this categorization.

We begin the presentation of 82 V¯u·Man 2R and Navigator 2 defects, and 163 Spot defects, with a defect attribute used in all comparisons: phase found. The values of this attribute—Design, Bringup, Integration, and Operation—have already been presented. The second attribute, type, was presented in the previous section; a comparison of type distributions for the two projects is shown in Figure 7.

---

**Note:** The figures and tables referenced in the text should be included in the document for clarity and completeness.