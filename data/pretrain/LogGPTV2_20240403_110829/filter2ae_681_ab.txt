      Object tree;
      if (enableExpressionCache) {
        tree = expressions.get(expression);
        if (tree == null) {
          tree = Ognl.parseExpression(expression);
          checkSimpleMethod(tree, context); //
                 register2
然后我在本地运行showcase应用程序，然后访问一个URL，该URL旨在触发此漏洞并执行shell命令,从而在我的计算机上打开计算器应用程序。
这起了作用(花了一些时间绕过OGNL沙箱之后)。在这个阶段，更多的细节我将会在稍后的一个恰当的时机揭露它们。
不仅如此，还有来自ctionChainResult,
PostbackResult和ServletUrlRenderer等的一些不可信的来源，它们也起作用了！PortletActionRedirectResult可能也能用，但我没有测试。四个RCEs已经足以证明问题的严重性。
## 结论
在这篇文章中，我展示了通过使用已知的漏洞来帮助构建应用程序的污染模型，而你只需将困难的工作留给QL DataFlow
library就可以发现新的漏洞。特别是，通过研究Struts中前三个RCEs，我们最终发现了另外四个!
鉴于S2-032、S2-033和S2-037都是在短时间内发现的，安全研究人员研究了S2-032以寻找类似的问题，并发现了S2-033和S2-037。所以这里最大的问题是：考虑到我在这里发现的漏洞(S2-057)也来自一个类似的污染源，安全研究人员和供应商怎么会漏掉这个漏洞，直到两年后才发现呢？在我看来，这是因为S2-032、S2-033和S2-037之间的相似之处在某种意义上是本地的，因为它们都发生在源代码中类似的位置(都在REST插件中)。S2-057和S2-032之间的相似性在语义层面上要高得多。它们是由受污染的源代码连接的，而不是源代码的位置，因此任何软件或工具如果能够成功地找到类似的变体，都需要能够在整个代码库中执行这种语义分析，正如我现在演示的那样，这可以用QL来完成。
如果你认为这更像是一种侥幸，因为我假设ActionProxy中的namespace字段是突然被污染的，那么请继续关注下一篇文章，这是我接下来将要详细介绍的，并根据首要原则从HttpRequestServlet开始进行一些污点跟踪。我还将分享我的bug搜索工具箱中的一些工具，以及一些改进查询的技巧。在这样做的过程中，我们还将看到如何使用QL捕获S2-045，这是Equifax遇到过的漏洞！
    原文链接：https://lgtm.com/blog/apache_struts_CVE-2018-11776