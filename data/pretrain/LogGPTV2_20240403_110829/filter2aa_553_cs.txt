### 外部变量的使用和声明

在C语言中，外部变量是在所有函数之外定义的变量。为了明确指出某个函数使用了外部变量，可以在函数内部使用关键字`extern`进行声明。如果一个源代码文件使用的外部变量定义在另一个源代码文件中，则必须用`extern`在该文件中声明该变量。

#### 示例
```c
int Errupt;        /* 外部定义的变量 */
double Up[100];    /* 外部定义的数组 */
extern char Coal;  /* 如果Coal被定义在另一个文件，则必须这样声明 */

void next(void);
int main(void)
{
    extern int Errupt;   /* 可选的声明 */
    extern double Up[];  /* 可选的声明 */
    ...
}

void next(void)
{
    ...
}
```

- 在`main()`中声明`Up`数组时（这是可选的声明），不需要指明数组大小，因为第一次声明已经提供了数组大小信息。
- `main()`中的两条`extern`声明完全可以省略，因为外部变量具有文件作用域，从声明处到文件结尾都可见。
- 如果省略掉函数中的`extern`关键字，相当于创建了一个自动变量。例如：
  ```c
  int Errupt;  // 创建了一个名为Errupt的自动变量
  ```

#### 外部变量的作用域和生命周期
外部变量具有静态存储期，无论程序执行到哪个函数，外部变量及其值都一直存在。

#### 示例1
```c
int Hocus;
int magic();
int main(void)
{
    extern int Hocus;  // Hocus之前已声明为外部变量
    ...
}
int magic()
{
    extern int Hocus;  // 与上面的Hocus是同一个变量
    ...
}
```

#### 示例2
```c
int Hocus;
int magic();
int main(void)
{
    extern int Hocus;  // Hocus之前已声明为外部变量
    ...
}
int magic()
{
    // 并未在该函数中声明Hocus，但是仍可使用该变量
    ...
}
```

#### 示例3
```c
int Hocus;
int magic();
int main(void)
{
    int Hocus;  // 声明Hocus，默认是自动变量
    ...
}
int Pocus;
int magic()
{
    auto int Hocus;  // 把局部变量Hocus显式声明为自动变量
    ...
}
```

- 这三个示例演示了外部变量的作用域是从声明处到文件结尾，并且说明了外部变量的生命周期。

### 初始化外部变量
外部变量可以被显式初始化。如果未初始化外部变量，它们会被自动初始化为0。只能使用常量表达式初始化文件作用域变量。

#### 示例
```c
int x = 10;          // 没问题，10是常量
int y = 3 + 20;      // 没问题，用于初始化的是常量表达式
size_t z = sizeof(int);  // 没问题，用于初始化的是常量表达式
int x2 = 2 * x;      // 不行，x是变量
```

### 使用外部变量
假设两个函数`main()`和`critic()`都要访问变量`units`，可以把`units`声明在这两个函数的上面。

#### 示例
```c
/* global.c -- 使用外部变量 */
#include <stdio.h>

int units = 0;  /* 外部变量 */
void critic(void);

int main(void)
{
    extern int units;  /* 可选的重复声明 */
    printf("How many pounds to a firkin of butter?\n");
    scanf("%d", &units);
    while (units != 56)
        critic();
    printf("You must have looked it up!\n");
    return 0;
}

void critic(void)
{
    printf("No luck, my friend. Try again.\n");
    scanf("%d", &units);
}
```

- `critic()`可以直接读取`units`的值，当`while`循环结束时，`main()`也知道`units`的新值。

### 外部名称
C99和C11标准要求编译器识别局部标识符的前63个字符和外部标识符的前31个字符。

### 定义和声明
- **定义**：为变量预留存储空间，构成变量的定义。
- **声明**：只告诉编译器使用之前已创建的变量，不是定义。

#### 示例
```c
int tern = 1;  /* tern被定义 */
int main()
{
    extern int tern;  /* 使用在别处定义的tern */
}
```

- 关键字`extern`表明该声明不是定义，指示编译器去别处查询其定义。

### 内部链接的静态变量
静态变量具有静态存储期、文件作用域和内部链接。

#### 示例
```c
static int svil = 1;  // 静态变量，内部链接
int main(void)
{
    ...
}
```

- 内部链接的静态变量只能用于同一个文件中的函数。

### 多文件
复杂的C程序通常由多个单独的源代码文件组成。这些文件可能要共享一个外部变量。通过在一个文件中进行定义式声明，然后在其他文件中进行引用式声明来实现共享。

#### 示例
```c
// file_one.c
char permis = 'N';

// file_two.c
extern char permis;  /* 正确 */
```

- 只有定义式声明才能初始化变量。

### 存储类别说明符
C语言有6个关键字作为存储类别说明符：`auto`、`register`、`static`、`extern`、`_Thread_local`和`typedef`。

- **auto**：表明变量是自动存储期，只能用于块作用域的变量声明中。
- **register**：把变量归为寄存器存储类别，请求最快速度访问该变量。
- **static**：创建的对象具有静态存储期，载入程序时创建对象，当程序结束时对象消失。
- **extern**：表明声明的变量定义在别处。
- **_Thread_local**：可以和`static`或`extern`一起使用。
- **typedef**：与任何内存存储无关，用于类型定义。

### 小结
- **自动变量**：具有块作用域、无链接、自动存储期。
- **寄存器变量**：属性和自动变量相同，但编译器会使用更快的内存或寄存器储存它们。
- **静态变量**：具有静态存储期，载入程序时创建对象，当程序结束时对象消失。