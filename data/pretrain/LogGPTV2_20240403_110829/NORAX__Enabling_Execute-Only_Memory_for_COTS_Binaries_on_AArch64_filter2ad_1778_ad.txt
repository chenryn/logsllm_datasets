symbol table, whose value ﬁeld contains the address of
the exposed symbol.
• References from relocation table (.rela.dyn): for a
relocatable symbol located in .rodata, the relocation table
entry’s r addend ﬁeld will point to the symbol’s address.
• References from global offset table (.got): when a vari-
able in .rodata cannot be addressed due to the addressing
limit(e.g., adrp can only address +/- 4GB), an entry in
the global offset table is used to address that far-away
variable.
• References from read-only global data (.data.rel.ro):
most binaries in Android disable lazy-binding. The
.data.rel.ro section contains the addresses of global con-
stant data that need to be relocatable. After the dynamic
linker ﬁnishes relocating them, this table will be marked
as read-only, as opposed to the traditional .data section.
Finally, the metadata (duplicates and references), the data-
accessing stub code (explained in the next point) and the
NORAX header are appended to the end of the original binary,
as shown in Figure 2. Note that by appending the NORAX-
related data to the end of the binary, we allow patched binaries
to be backward-compatible, thus meeting P 1. This is because
the ELF standard ignores anything that comes after the section
header table. As a result, binaries transformed by NPatcher can
run on devices without NORAX support installed. They can
also be parsed and disassembled by standard ELF utilities such
as readelf and objdump. Moreover, NORAX-patched binaries
are compatible with other binary-level security enhancement
techniques.
D. NLoader: Plugin for Stock Loader and Linker
Binaries rewritten by NPatcher remain recognizable by and
compatible with the stock loader and linker. They can still
function albeit without the XOM protection. New data sections
added by NORAX, however, are transparent to the toolchain.
They require NLoader’s support to complete the binary loading
and references updating process before their code can be
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
(cid:4)(cid:7)(cid:5)(cid:1)(cid:6)(cid:16)(cid:12)(cid:15)(cid:16)(cid:23)
(cid:9)(cid:23)(cid:22)(cid:18)(cid:23)(cid:12)(cid:20)(cid:1)(cid:6)(cid:16)(cid:12)(cid:15)(cid:16)(cid:23)
(cid:28)(cid:25)(cid:16)(cid:27)(cid:25)
(cid:28)(cid:23)(cid:22)(cid:15)(cid:12)(cid:25)(cid:12)
(cid:28)(cid:28)(cid:28)
(cid:28)(cid:15)(cid:12)(cid:25)(cid:12)
(cid:11)(cid:16)(cid:14)(cid:25)(cid:19)(cid:22)(cid:21)(cid:1)(cid:6)(cid:16)(cid:12)(cid:15)(cid:16)(cid:23)
(cid:4)(cid:20)(cid:13)(cid:16)(cid:15)(cid:15)(cid:16)(cid:15)(cid:1)(cid:3)(cid:12)(cid:25)(cid:12)(cid:1)(cid:29)(cid:29)(cid:1)(cid:10)(cid:16)(cid:17)(cid:24)
(cid:11)(cid:25)(cid:26)(cid:13)(cid:1)(cid:2)(cid:22)(cid:15)(cid:16)
(cid:8)(cid:22)(cid:23)(cid:12)(cid:27)(cid:1)(cid:6)(cid:16)(cid:12)(cid:15)(cid:16)(cid:23)
(cid:1)
(cid:1)
(cid:12)(cid:15)(cid:4)(cid:6)(cid:22)(cid:7)(cid:12)(cid:8)(cid:22)(cid:5)(cid:10)(cid:14)(cid:4)(cid:17)
(cid:20)(cid:23)(cid:24)
(cid:4)(cid:11)(cid:26)(cid:28)
(cid:16)(cid:17)(cid:7)(cid:12)(cid:10)(cid:14)(cid:11)(cid:22)(cid:10)(cid:13)(cid:4)(cid:9)(cid:7)
(cid:23)(cid:24)
(cid:3)(cid:24)(cid:12)(cid:10)(cid:23)(cid:22)(cid:8)(cid:9)(cid:16)(cid:12)(cid:1)(cid:4)(cid:19)(cid:8)(cid:11)(cid:14)(cid:18)(cid:13)
(cid:4)(cid:11)(cid:26)(cid:29)
(cid:1)
(cid:8)(cid:10)(cid:14)(cid:6)(cid:22)(cid:12)(cid:10)(cid:5)(cid:17)(cid:4)(cid:17)(cid:20)(cid:23)(cid:24)
(cid:8)(cid:10)(cid:14)(cid:6)(cid:22)(cid:12)(cid:10)(cid:5)(cid:17)(cid:4)(cid:17)(cid:20)(cid:23)(cid:24)
(cid:8)(cid:10)(cid:14)(cid:6)(cid:22)(cid:12)(cid:10)(cid:5)(cid:17)(cid:4)(cid:17)(cid:10)(cid:7)(cid:18)(cid:23)(cid:24)
(cid:4)
(cid:4)
(cid:6)(cid:12)(cid:15)(cid:16)(cid:7)(cid:14)(cid:23)(cid:24)
(cid:6)(cid:12)(cid:15)(cid:16)(cid:7)(cid:14)(cid:23)(cid:24)
(cid:6)(cid:23)(cid:18)(cid:22)(cid:14)(cid:17)(cid:12)(cid:1)(cid:4)(cid:14)(cid:9)(cid:1)
(cid:4)(cid:19)(cid:8)(cid:11)(cid:14)(cid:18)(cid:13)
(cid:5)(cid:7)(cid:1)(cid:4)(cid:19)(cid:8)(cid:11)(cid:12)(cid:20)
(cid:2)(cid:25)(cid:18)(cid:8)(cid:17)(cid:14)(cid:10)(cid:1)(cid:4)(cid:14)(cid:18)(cid:15)(cid:12)(cid:20)
(cid:1)(cid:12)(cid:8)(cid:22)(cid:3)(cid:7)(cid:4)(cid:6)(cid:7)(cid:17)(cid:21)(cid:21)(cid:12)(cid:15)
(cid:4)(cid:6)(cid:23)(cid:24)
(cid:4)(cid:11)(cid:26)(cid:28)
(cid:4)(cid:11)(cid:26)(cid:29)
(cid:16)(cid:17)(cid:7)(cid:12)(cid:10)(cid:14)(cid:11)(cid:22)(cid:10)(cid:13)(cid:4)(cid:9)(cid:7)
(cid:23)(cid:24)
(cid:4)(cid:14)(cid:9)(cid:20)(cid:8)(cid:20)(cid:14)(cid:12)(cid:21)(cid:1)(cid:4)(cid:19)(cid:8)(cid:11)(cid:14)(cid:18)(cid:13)
(cid:12)(cid:10)(cid:14)(cid:11)(cid:22)(cid:10)(cid:13)(cid:4)(cid:9)(cid:7)(cid:23)(cid:24)
(cid:4)(cid:11)(cid:26)(cid:30)
(cid:6)(cid:12)(cid:16)(cid:19)(cid:10)(cid:8)(cid:22)(cid:14)(cid:19)(cid:18)(cid:1)(cid:27)(cid:1)(cid:7)(cid:25)(cid:17)(cid:9)(cid:19)(cid:16)(cid:1)
(cid:6)(cid:12)(cid:21)(cid:19)(cid:16)(cid:23)(cid:22)(cid:14)(cid:19)(cid:18)
(cid:2)
(cid:3)
Fig. 2: The layout of ELF transformed by NORAX. The shaded
parts at the end are the generated NORAX-related metadata.
(cid:3)(cid:19)(cid:14)(cid:14)(cid:10)(cid:14)(cid:9)
(cid:2)(cid:17)(cid:15)(cid:9)(cid:17)(cid:4)(cid:13)
mapped in XOM. Other than the ones prepared by NPatcher,
as mentioned in § III-A, there are several types of references
to executable data (Table V) which are related to the linker
and only available at runtime. Built as a linker/loader plugin,
NLoader adjusts these references in the following steps:
• Ld-1: It parses and loads NORAX header into memory,
including information about the embedded data in .text
and the stub code accessing embedded data. Then, it
creates duplicated mappings for .rodata and the linker-
referencing sections3, which have been loaded by the
stock linker/loader.
• Ld-2: It updates the .dynamic section to redirect linker to
use the read-only copy of those relocated data sections.
• Ld-3: It collects the .rodata references from .got and
.data.rel.ro, which are only populated after the relocation
is done. It then adjusts all the collected data references
in one pass. Eventually, the memory access level of the
loaded module is adjusted to enforce the R ⊕ X policy.
The overall workﬂow of NLoader is shown in Figure 3.
It starts with the executable loading, which is done by the
OS ELF loader (Step 1 ). Then, the OS loader transfers
the control to the dynamic linker, which in turns creates a
book-keeping object for the just-loaded module. Meanwhile,
Ld-1 is performed to complete the binary loading. Next, the
binary’s corresponding book-keeping object is then populated
with references to those ELF sections used by the linker to
carry out relocation and symbol resolution in a later stage.
Ld-2 is then invoked to update these populated references.
At this point, the preparation for the executable is done. The
linker then starts preparing all the libraries (Step 2 ). This
process is similar to the preparation of executable, thus Ld-1
3The linker-referencing sections include .(gnu).hash,
.dynsym,
.dynstr,
.gnu.version, .gnu.version r, .rela.dyn, .rela.plt., etc.
Fig. 3: Bionic Linker’s binary loading ﬂow, NLoader operates
in different binary preparing stages, including module loading,
relocation and symbol resolution.
and Ld-2 are called accordingly. When all the modules are
loaded successfully in previous steps with their book-keeping
objects populated, the linker walks through the book-keeping
objects to perform relocation and symbol resolution (Step 3 ).
In this step, Ld-3 is called for each of the relocated modules to
update all those collected references, including the ones from
.got and .data.rel.ro to .rodata. This is feasible because the
.got entries which reference to .rodata are populated upfront,
same as those in .data.rel.ro.
During runtime,
the program may dynamically load or
unload new libraries (Step 4 ), as shown in Figure 3, which
is also naturally handled by NLoader. To boost performance,
once NLoader ﬁnishes updating the ofﬂine-updatable refer-
ences, it caches the patched binary so that it can directly load
the cached version without going through the whole references
adjustment process again a next time.
E. NMonitor: Runtime Enforcement and Safety-net
After being processed by the last three NORAX components,
a patched binary that follows the R⊕X policy is ready to run,
which is assisted by NMonitor. At runtime, the converted pro-
gram could still be running with some unadjusted references
to the executable data, which belong to the two following
possible categories.
• Missed references to embedded data: Although in our
evaluation we rarely see cases where an access violation
is triggered by missed embedded data references, such
situation,
if mishandled, will cause a program crash.
NDisassembler is unable to discover such cases due to the
311
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:33 UTC from IEEE Xplore.  Restrictions apply. 
limitation of static analysis. These missed data references
would trigger access violations. Note that references to
.rodata from .text do not have this problem, because
whenever an address is calculated that happens to point
at .rodata section, NDisassembler will mark it as a valid
reference regardless of whether a corresponding memory
load instruction is detected or not.
• References to .eh frame hdr and .eh frame: These
sections provide auxiliary information such as the ad-
dress range of functions, the stack content when a C++
exception is triggered, etc. The previous components are
unable to update them because they are used neither by
the converted module itself nor by the dynamic linker.
Instead, we found that C++ runtime and debuggers such
as gdb would reference and read into these two sections
for exception handling or stack unwinding.
NMonitor dynamically handles both categories of unad-
justed references. NMonitor responds to memory violations
caused by any attempted read access to XOM. It checks the
context and the data being accessed. If the context matches the
two cases discussed above and the address being accessed does
belong to the relocated data, NMonitor permits and facilitates
the access; otherwise, it terminates the program.
Speciﬁcally, NMonitor whitelists these two kinds of data
and ensures legitimate accesses to them can go through while
potential abuses by attackers cannot. For instance, NMonitor
only allows C++ runtime module to access the .eh frame
sections (updatable through sysctl). For the .text embedded
data, NMonitor only allows code from the over-approximated
hosting function to read them. Note that while this design
helps our system cope with those corner cases, the security
of our system is barely undermined for two reasons: (i) the
majority of the whitelisted data are indeed real data, which are
not even decodable or surrounded by non-decodable data(§ V).
(ii) Different data require the code from different regions to
access them; attackers cannot simply exploit one memory leak
bug to read across all these embedded data.
IV. IMPLEMENTATION DETAILS
NORAX is fully implemented based on two commercial
mobile phones, Samsung Galaxy S6 and LG Nexus 5X. In
this section, we present the implementation of NORAX on LG
Nexus 5X, which is equipped with Qualcomm Snapdragon 808
MSM8992 (4 x ARM Cortex-A53 & 2 x ARM Cortex-A57)
and 2GB RAM. The phone is running Android OS v6.0.1
(Marshmallow) with Linux kernel v3.14 (64-bit). Table VI
shows the SLoC of NORAX on Nexus 5X. In the following,
we provide more details about the implementation.
TABLE VI: The SLoC for all NORAX components.
(cid:11)(cid:34)(cid:28)(cid:29)(cid:16)(cid:23)(cid:1)
(cid:7)(cid:25)(cid:15)(cid:20)(cid:17)(cid:20)(cid:14)(cid:13)(cid:29)(cid:20)(cid:25)(cid:24)(cid:28)(cid:1)
(cid:5)(cid:16)(cid:20)(cid:27)(cid:30)(cid:1)(cid:4)(cid:12)(cid:24)(cid:20)(cid:12)(cid:18)(cid:1)
(cid:3)(cid:16)(cid:21)(cid:20)(cid:16)(cid:10)(cid:1)(cid:5)(cid:16)(cid:20)(cid:17)(cid:12)(cid:24)(cid:1)
(cid:2)(cid:20)(cid:8)(cid:18)(cid:31)(cid:25)(cid:16)(cid:25)(cid:1)(cid:37)(cid:1)
(cid:7)(cid:12)(cid:29)(cid:24)(cid:16)(cid:26)(cid:16)(cid:20)(cid:14)(cid:1)(cid:6)(cid:21)(cid:11)(cid:27)(cid:18)(cid:12)(cid:25)(cid:1)
(cid:8)(cid:25)(cid:27)(cid:13)(cid:33)(cid:1)
(cid:3)(cid:25)(cid:23)(cid:26)(cid:25)(cid:24)(cid:16)(cid:24)(cid:29)(cid:28)(cid:1)
(cid:7)(cid:5)(cid:20)(cid:10)(cid:13)(cid:14)(cid:22)(cid:26)(cid:1)(cid:7)(cid:6)(cid:20)(cid:19)(cid:16)(cid:24)(cid:20)(cid:22)(cid:1)
(cid:7)(cid:5)(cid:20)(cid:10)(cid:13)(cid:14)(cid:22)(cid:1)
(cid:7)(cid:4)(cid:16)(cid:23)(cid:10)(cid:23)(cid:23)(cid:14)(cid:18)(cid:11)(cid:17)(cid:14)(cid:22)(cid:26)(cid:1)
(cid:7)(cid:8)(cid:10)(cid:24)(cid:12)(cid:15)(cid:14)(cid:22)(cid:1)
(cid:11)(cid:6)(cid:25)(cid:3)(cid:1)
(cid:6)(cid:13)(cid:24)(cid:18)(cid:30)(cid:13)(cid:18)(cid:16)(cid:1)
(cid:32)(cid:40)(cid:35)(cid:38)(cid:1)
(cid:33)(cid:39)(cid:40)(cid:1)
(cid:34)(cid:36)(cid:39)(cid:31)(cid:1)
(cid:3)(cid:1)
(cid:3)(cid:44)(cid:44)(cid:1)
(cid:8)(cid:25)(cid:24)(cid:15)(cid:20)(cid:19)(cid:1)(cid:28)(cid:1)(cid:2)(cid:10)(cid:23)(cid:15)(cid:1)
(cid:9)(cid:15)(cid:14)(cid:17)(cid:17)(cid:1)(cid:9)(cid:12)(cid:22)(cid:16)(cid:21)(cid:24)(cid:1)
A. Kernel Modiﬁcation
We modiﬁed several OS subsystems in order to implement
the design discussed in § III. To start off, the memory man-
agement (MM) subsystem is modiﬁed to enable the execute-
only memory conﬁguration (§ II) and securely handle the
legitimate page fault triggered by data abort on reading the
execute-only memory. Speciﬁcally, we intercept the page fault
handler, the do page fault() function, to implement the design
of NMonitor discussed in § III-E. Implementing the semantics
for all kinds of memory load instructions is error-prone and
requires non-trivial engineering effort, but above that, there is
one additional caveat, as page fault is one of the most versatile
events in Linux kernel that has very diversiﬁed usages, such
as copy-on-write (COW), demand paging and memory page
swappings etc. Also, accessing the same virtual address could
fault multiple times (e.g., First triggered by demand paging,
and then by XOM access violation). If not carefully examined,
irrelevant page fault events could be mistakenly treated as
XOM-related ones, which may cause the entire system to be
unstable or even crash. The solutions proposed in prior works
[11], [14] are not directly applicable here, because in ARM64
Linux kernel, to the best of our knowledge, there is not one
handy feature such as a ﬂag pushed by the kernel, or a register
populated by the hardware to directly indicate whether the
fault is really triggered due to a read into the execute-only
page that we conﬁgure.
To precisely pinpoint the related page fault events, we devise
a series of constraints to ﬁlter the irrelevant ones. when a page
fault happens, the following checks are performed: