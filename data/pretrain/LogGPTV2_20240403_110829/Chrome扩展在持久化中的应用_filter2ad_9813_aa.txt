# Chrome扩展在持久化中的应用
|
##### 译文声明
本文是翻译文章，文章原作者 specterops，文章来源：posts.specterops.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
[2009](https://googleblog.blogspot.com/2009/12/google-chrome-for-holidays-mac-linux.html)年12月，Chrome正式推出了扩展程序（extension），使用HTML、JavaScript以及CSS来扩展Chrome的功能。扩展可以使用Chrome
API来阻止广告（ad）、改变浏览器UI、管理cookie，甚至能与桌面应用配合使用。用户可以在扩展安装过程中授予扩展一些权限，限制扩展行为。Chrome扩展可以使用许多原生API，因此也是隐藏恶意代码的潜在目标。随着EDR（端点检测与响应）产品的兴起以及macOS、Windows
10新引入的安全功能，端点安全性也得到了不少提升。然而对于macOS上的恶意Chrome扩展，现在仍然缺乏较好的检测机制。因此，Chrome扩展已经成为一种非常诱人的入侵及持久化载荷。本文介绍了macOS上利用Chrome扩展实现的一种载荷投递机制，介绍了自动更新功能在攻击过程中的应用，也介绍了使用[Apfell](https://github.com/its-a-feature/Apfell)的一个实际攻击样例，最后提出了一些基本但实际可操作的检测指南。
## 二、载荷投递
在macOS上，我们可以使用一些方法来合法地安装扩展程序。Google要求开发者通过web商店来投放扩展程序。[最近](https://blog.chromium.org/2018/06/improving-extension-transparency-for.html)Google修改了相关政策，导致用户无法从第三方网站安装扩展。攻击者虽然可以[继续](https://www.tripwire.com/state-of-security/security-data-protection/malicious-chrome-extension-which-sloppily-spied-on-academics-believed-to-originate-from-north-korea/)在web商店上托管扩展程序，但这个策略的推出的确限制了不少潜在风险。此外，我们在macOS上也可以使用移动配置描述文件（mobile
configuration
profile，`.mobileconfig`文件）来安装扩展。配置描述文件是macOS及iOS上的一种机制，可以用来管理各种设置，如壁纸、应用（如Google
Chrome）等。用户可以通过鼠标双击或者在命令行中通过[profiles](http://krypted.com/mac-os-x/use-profiles-command-high-sierra/)命令来安装描述文件。移动配置描述文件采用XML格式并遵循相对简单的格式。为了创建移动配置描述文件，我们需要输入PayloadUUID、应用程序ID以及更新url（下文会介绍这一点）。如果想了解配置描述文件的更多信息，大家可以参考这两篇文章（[1](http://docs.jamf.com/9.97/casper-suite/administrator-guide/macOS_Configuration_Profiles.html)、[2](https://developer.apple.com/business/documentation/Configuration-Profile-Reference.pdf)），也可以参考[这个](https://gist.github.com/xorrior/8ee611d4f91b91f03ec16bed1324be56)模板文件。在配置文件中，`ExtensionInstallSources`键指定了URL值，表示可以从哪些源安装扩展。在URL的协议、主机以及URI字段中我们都可以使用通配符。`ExtensionInstallForceList`值表示可以未经用户同意就能安装且无法卸载的扩展列表。`PayloadRemovalDisallowed`键可以阻止非管理员用户卸载该描述文件。大家可以参考[此处](https://www.chromium.org/administrators/policy-list-3)资料了解可用来管理扩展及Google
Chrome其他设置的一些键值。配置描述文件可以用来管理macOS的各种设置，我们可进一步深入分析，研究其在攻击场景中的应用。
关于配置描述文件有一点非常有趣，这些配置文件可以通过电子邮件来发送，并且[Gatekeeper](https://support.apple.com/en-us/HT202491)不会向终端用户提示任何警告（Gatekeeper是MacOS的代码签名强制验证工具）。然而系统将弹出一个提示窗口，请求用户确认安装描述文件。
如果描述文件未经签名，则用户在输入管理员凭据前，会看到第二个弹出窗口：
然而在安装经过签名的描述文件时，操作系统只会在安装过程中弹出一次窗口，然后就需要输入管理员密码。安装完毕后，我们可以在`Profiles`配置面板中查看描述文件的内容。如果描述文件未经签名，则会以红色高亮标出。
现在我们已经为Chrome设置了扩展策略，当用户打开该应用时，就会向描述文件中设置的更新URL发出一系列web请求。更新URL应当指向一个manifest更新文件，其中指定了扩展文件(`.crx`文件)的应用ID以及URL。这里大家可以查阅官方提供的[autoupdate](https://developer.chrome.com/apps/autoupdate)文档，了解manifest示例文件。随后，Chrome会下载扩展，将其保存到`~/Library/Application
Support/Google/Chrome/Default/Extensions/APPID`路径中。此时该扩展已经被载入浏览器中并成功执行。需要注意的是，在整个过程中，配置描述文件是唯一涉及到用户交互的一个环节。同样，在Windows上我们也可以修改注册表来悄悄安装扩展程序（可参考[此处](https://stackoverflow.com/questions/16056498/silent-install-of-chrome-extension-using-registry)资料）。然而如果安装源为第三方网站，Chrome只允许[
_inline_](https://developer.chrome.com/webstore/inline_installation)安装模式。这种安装模式需要用户浏览第三方网站，网站需要将用户重定向到Chrome
Web Store，最终完成安装过程。
## 三、自动更新
为了便于bug修复及安装安全更新，扩展可以支持自动更新。当扩展托管于Chrome
Web商店时，Google就会接管扩展的更新过程。开发者只需要上传新版扩展，几个小时后，浏览器就会通过Web Store更新插件。如果扩展托管在Web
Store之外，开发者可以具备更多的控制权。Chrome会使用`manifest.json`文件中的更新url来定期检查版本更新。在这个过程中，Chrome会读取manifest更新文件内容，将manifest中的版本信息与扩展的版本信息作比较。如果manifest版本更高，则浏览器会下载并安装新版扩展（大家可以参考[此处](https://gist.github.com/xorrior/c383baf3e626408e2c2eb4902798ea90)了解典型的manifest更新文件）。manifest更新文件采用XML格式，包含`APPID`以及指向`.crx`文件的一个`URL`。对攻击者而言，自动更新始终是一个非常不错的机制。如下两图所示，恶意扩展使用一个域名用来正常的C2通信，使用另一个域名来托管manifest更新文件以及扩展文件。设想一下，假如应急响应团队将某个C2域名标记为恶意域名，阻止与该域名的所有通信流量（1），然而与更新URL的通信流量仍然畅通无阻（2
& 3）。攻击者可以更新manifest版本，修改C2域名（4）、更新URL，设置能修改扩展的某些核心代码。经过一段时间后，Google
Chrome就会向更新URL发起请求，加载带有新版C2域名的新版扩展。
此外，如果攻击者失去了扩展的控制权，或者扩展出现崩溃，那么就可以通过更新版本来触发扩展执行。一旦扩展仍然安装在浏览器中，Chrome就会继续尝试并检查版本更新。如果只更新了manifest版本，Chrome就会重新安装并执行扩展。在下文中，我们将介绍如何使用一个PoC
Chrome扩展，并使用Apfell来管理C2服务器。
## 四、恶意扩展