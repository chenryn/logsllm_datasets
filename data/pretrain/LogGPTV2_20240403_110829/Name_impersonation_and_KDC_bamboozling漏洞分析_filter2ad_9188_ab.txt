KdcGetS4UTicketInfo函数的处理逻辑中又调用了KdcGetTicketInfo，也就是通过这把前后两个漏洞组合在了一起。
因此得到和上面一样的结论：
`S4U2self拓展用于TGS-REQ将票证检索到自身来模仿任意用户访问，而KDC在S4U2Self阶段会将SFU填充的字段从TGT中的PAC复制到新创建的PAC中。在进行自动添加$进行callback时，KDC并没有识别高权限ST作用于哪个机器账户、PAC也没有原始请求者的信息，出现鉴权问题从而产生漏洞。`
###  通过公开EXP截取数据分析
wireshark中提供直接将[keytab
导入Kerberos](https://wiki.wireshark.org/Kerberos)，能将PAC等加密字段进行解密。
**kerberos认证**
**整体流程**
1.AS_REQ：client用client_hash（一般使用RC4加密）、时间戳向KDC进行预身份验证。  
2.AS_REP：KDC检查client_hash与时间戳，如果正确则返回client由krbtgt哈希加密的TGT票据和PAC等相关信息。  
3.TGS_REQ：client向KDC请求TGS票据，出示其TGT票据和请求的SPN。  
4.TGS_REP：KDC如果识别出SPN，则将该服务账户的NTLM哈希加密生成的ST票据返回给client。  
5.AP_REQ：client使用ST请求对应服务，将PAC传递给服务进行检查。服务通过PAC查看用户的SID和用户组等并与自身的ACL进行对比，如果不满足则作为适当的RPC状态代码返回。  
6.AP_REP：服务器验证AP-REQ，如果验证成功则发送AP-REP，客户端和服务端通过中途生成的Session
key等信息通过加解密转换验证对方身份。
**AS-REQ：**
`域控为DC2$，这里申请sAMAccountName为DC2（不带$）的TGT票据`
1.请求的用户端信息  
2.加密类型  
3.Authenticator（用户Hash加密时间戳）
**AS-REP：**
1.通过活动目录查询用户得到用户的Hash，用Hash解密Authenticator，如果解密成功并且时间戳在规定时间内（一般为五分钟），则预认证成功。  
2.生成由krbtgt用户Hash加密的TGT认购权证，用于确保客户端和DC进行安全通信的用户Hash加密后的Login Session
Key(作为下一阶段的认证秘钥)。  
3.返回TGT（TGT中包含PAC,PAC包含Client的sid，Client所在的组）、Login Session Key、和时间戳。
* * *
**PAC**
PAC由KDC在AS-REP中生成，其中包含用户sid和组等信息，当client在AD域内进行身份认证的时候，KDC会把这些信息添加到TGT票据加密返回；KDC主要通过PAC中的GroupIds和Userid与要访问服务的ACL进行比较，判断client是否有权限对其进行访问。
KDC在AP-REQ访问服务时检查PAC。同时 TGS 解密验证签名是否正确，然后再重新构造新的 PAC 放在 ST 里返回给client，client将
ST 发送给服务端进行验证，Server再将此信息与用户所索取的资源的ACL进行比较，以此判断用户是否有权限对其进行访问。
`PAC里面包含了用户SID、组等信息。`在 PAC 中包含PAC_SERVER_CHECKSUM 和 PAC_PRIVSVR_CHECKSUM两个数字签名
，`这两个数字签名分别由Server NTLM Hash和KDC NTLM
Hash加密，并且PAC对于用户和服务全程都不可见，只有KDC能制作和查看PAC。`
PAC结构是一个AuthorizationData
    AuthorizationData       ::= SEQUENCE OF SEQUENCE {
        ad-type         [0] Int32,
        ad-data         [1] OCTET STRING
    }
**结构如下：**
可以看到ad-type为AD-IF-RELEVANT。
ad-data也是一个AuthorizationData，ad-type为AD-WIN2K-PAC，ad-data为一个PACTYPE的结构体和几个PAC_INFO_BUFFER
结构数组；PACTYPE结构是PAC的最顶层结构，指定PAC_INFO_BUFFER数组中的元素数。PACTYPE结构用作完整PAC数据的标头。
每个 PAC_INFO_BUFFER 定义了 PAC 缓冲区的类型和字节偏移量，用作指向遵循此标头的PAC内容的指针。PAC_INFO_BUFFER
数组没有定义的顺序，因此PAC_INFO_BUFFER 缓冲区的顺序没有意义。但是，一旦生成了 KDC 和服务器签名，缓冲区的顺序不得更改，否则 PAC
内容的签名验证将失败。
**PACTYPE结构如下：**
**PAC_INFO_BUFFER结构如下：**
其中ulType描述在Offset处包含的缓冲区中存在的数据类型。
Value | Meaning  
---|---  
0x00000001 | 登录信息。PAC结构必须包含一个此类型的缓冲区。必须忽略其他登录信息缓冲区。  
0x00000002 | 凭证信息。PAC结构不应包含多个此类缓冲区。第二个或后续凭证信息缓冲区在收到时必须忽略。  
0x00000006 | 服务器校验和。PAC结构必须包含一个此类型的缓冲区。必须忽略其他登录服务器校验和缓冲区。  
0x00000007 | KDC校验和。PAC结构必须包含一个此类型的缓冲区。必须忽略其他KDC校验和缓冲区。  
0x0000000A | 客户名称和票据信息。PAC结构必须包含一个此类型的缓冲区。必须忽略其他客户端和票证信息缓冲区。  
0x0000000B |
受约束的委派信息。PAC结构必须包含一个此类型的缓冲区，以便为S4U2proxy请求提供服务，否则不包含任何缓冲区。必须忽略其他受约束的委派信息缓冲区。  
0x0000000C |
用户主体名称（UPN）和域名系统（DNS）信息。PAC结构不应包含多个此类型的缓冲区。第二个或后续UPN和DNS信息缓冲区在收到时必须忽略。  
0x0000000D | 客户索赔信息。PAC结构不应包含多个此类型的缓冲区。必须忽略其他客户端索赔信息缓冲区。  
0x0000000E | 设备信息。PAC结构不应包含多个此类型的缓冲区。必须忽略其他设备信息缓冲区。  
0x0000000F | 设备索赔信息。PAC结构不应包含多个此类型的缓冲区。必须忽略其他设备声明信息缓冲区。  
0x00000010 | 票证校验和PAC结构不应包含多个此类型的缓冲区。必须忽略其他票证校验和缓冲区。  
0x00000006 对应的是Server检验和，0x00000007
对应的是KDC校验和。前面说过`PAC包含server和KDC签名，就是为了防止PAC内容被篡改。`
**KERB_VALIDATION_INFO**
KERB_VALIDATION_INFO结构定义了DC提供的用户登录和授权信息，并由RPC编组。结构定义如下：
    typedef struct _KERB_VALIDATION_INFO {
    FILETIME LogonTime;
    FILETIME LogoffTime;
    FILETIME KickOffTime;
    FILETIME PasswordLastSet; 
    FILETIME PasswordCanChange; 
    FILETIME PasswordMustChange; 
    RPC_UNICODE_STRING EffectiveName; 
    RPC_UNICODE_STRING FullName; 
    RPC_UNICODE_STRING LogonScript; 
    RPC_UNICODE_STRING ProfilePath; 
    RPC_UNICODE_STRING HomeDirectory;
    RPC_UNICODE_STRING HomeDirectoryDrive; USHORT LogonCount;
    USHORT BadPasswordCount;
    ULONG UserId;
    ULONG PrimaryGroupId;
    ULONG GroupCount;
    [size_is(GroupCount)] PGROUP_MEMBERSHIP GroupIds; ULONG UserFlags;
    USER_SESSION_KEY UserSessionKey;
    RPC_UNICODE_STRING LogonServer;
    RPC_UNICODE_STRING LogonDomainName;
    PISID LogonDomainId;
    ULONG Reserved1[2];
    ULONG UserAccountControl;
    ULONG SubAuthStatus;
    FILETIME LastSuccessfulILogon;
    FILETIME LastFailedILogon;
    ULONG FailedILogonCount;
    ULONG Reserved3;
    ULONG SidCount;
    [size_is(SidCount)] PKERB_SID_AND_ATTRIBUTES ExtraSids;
    PISID ResourceGroupDomainSid;
    ULONG ResourceGroupCount;
    [size_is(ResourceGroupCount)] PGROUP_MEMBERSHIP ResourceGroupIds;
    } KERB_VALIDATION_INFO;
主要看UserId、GroupCount和GroupId字段：
Userid：域SID+用户RID（用户SID）
GroupCount：包含帐户所属帐户域内的组数。
GroupID：指向GROUP_MEMBERSHIP
GroupIds结构列表的指针，其中包含帐户域中帐户所属的组。此列表中的组数必须等于GroupCount。其中513为域用户，512、520、518、519
是域管组。
`MS14068就是将高权限的GroupId插入到伪造的PAC中从而提升权限达到接管域的目的。`
TGT包含PAC，定位到ticket→enc-part→PAC_LOGON_INFO
Domain Computers的Group RID都为515，现在的PAC代表申请的是机器账户身份。
**TGS-REQ：**
`将sAMAccountName为DC2的机器账户改为其他任意值，申请其ST`
1.客户端信息  
2.Authenticator(Login Session Key加密时间戳)  
3.TGT认购权限  
4.访问的服务名
TGSREQ携带ap-req，利用as-rep获取到的TGT票据并用上S4U2Self拓展，以administrator的身份请求DC2
cifs服务的ST票据。
上图中的ticket和as-rep返回的ticket都是TGT票据，client用此进行TGS相关后续认证。