edit -putString("pref_fav_book*, *androidsecuritycookbook*) 
edit.apply () 
2.以下是几个辅助方法，你可以把它们添加到你的app 的代码中，这样就能用
你的app 中的对象获取（secure)preferences 对象的实例了。
281
---
## Page 300
Android安全攻防实战
private SharedPreferences mPrefs;
public final SharedPreferences getSharedPrefs ()(
If (null == mPrefs) {
mPrefs - new SecurePreferences (YourApplication,this) 
return mPrefs;
在这里，YourApplication.this 就是你的app 对象的引用。
3.然后，在理想状况下，你可以在一个基本app程序组件（如：BaseActivity
BaseFragment，或BaseService）中加入以下语句，用以获取(secure)preferences
对象的实例。
private SharedPreferences mPrefs
protected final SharedPreferences getSharedPrefs ()(
mPrefs = YouxApplication getInstance () - getSharedPrefs () ;
return mPrefs)
工作原理
Secure-Preferences 库实现了 SharedPreferences 接口。因此，如果之前使用的，与
默认的SharedPreferences相关的交互代码一个字都不用改。
标准SharedPreferences键和值都是存放在一个简单的XML文件中，
Secure-Preferences使用相同的存储机制，但是这些键和值都会被用AES对称密钥加
密起来。在写到文件中去之前，加密后的键和值的密文还会再进行一次base64编码。
请看下面的这两个SharedPreference XML文件，它们分别是没用和用了
Secure-Preferences库得到的结果。显然用了Secure-Preferences库得到的文件里是一
些看上去完全随机的项，根本猜不出它们的作用。
·标准的 SharedPreferences XML文件。
androidsecuritycookbook
用了Secure-Preferences 库得到的 SharedPreferences XML文件。
282
---
## Page 301
第9章加密与在开发时使用设备管理策略
Hh1XTk3-JRgAMuK0wosHLLfaVvRUuT3ICK
va617hf51mdM+P3KA3.Jx502vFj1/Ed2
x73t1VNYsPsh1119ztna7U">
tEcsr41t5orGWT9/pqJrMC5x503cc=
SecurePreferences 第一次被实例化时，会产生一个AES 加密密钥并把它存储起
来。这个密匙将被用来对所有通过标准SharedPreferences接口保存的键/值进行加密/
解密。
shared preference文件生成时，如果使用了Context.MODE_PRIVATE参数，则会
强制app使用安全沙箱，面且也确保只有你的app可以访问它。不过，要是设备被
root 了，安全沙箱也是不可靠的。准确地说，Sccure-Preferences 其实是混淆版的
preferences，因此，我们不能被认为它是100%安全的。相反，应该把它看作是一个
能让Android app更安全些的速效办法。例如，它能防止用户在被root了的设备上，
轻易修改你的 app的 SharedPreferences，
Secure-Preferences还可以被进一步加强——使用一种名为基于口令的加密
（password-basedencryption，PEB）的技术，根据用户输入的口令生成密码的。而这
又是9.5节中讨论的内容了。
拓展阅读
·Android开发参考指南中的SharedPreferences接口在https://developer.
android.com/reference/android/content/SharedPreferences.html。
●DanielAbraham编写的Secure-Preferences 文章在http:/www.codeproject.
com/Articles/549119/Encryption-Wrapper-for-Android-SharedPreferences。
•Secure-Preferences 库位于 https://github.com/scottyab/securepreferences。
·CWAC-prefs 库（Secure-Prefercnces 的替代库）位于https://github.com/
commonsguy/cwac-prefs.
9.5基于口令的加密
密码学中一个较大的间题就是密钥的管理和安全存储。迄今为止，在之前的实
---
## Page 302
Android安全攻防实战
验里，我们已经照着谷歌开发者博客上推荐的方法，用SharedPreferences储存密钥，
从而解决了这个问题。但对于已经被root了的设备，这个解决方案并不完美，在被
root了的设备中，由于root用户能对所有的区域进行访问，所以你不能依赖Android
系统的安全沙箱。我的意思是：并不像在其他未被root的设备中那样，在root了的
设备中，其他的app也能拿到root权限。
对于可能不安全的app沙箱来说，基于口令的加密(PBE）是个理想的解决方案。
它使得我们能在运行时，用通常是由用户提供的口令/passcode去创建（更准确地说
是“推导出”）加密密钥。
密钥管理的另一个解决方案是使用一个系统密钥链（keychain）。在Android里，
这个东西就叫Android-KeyStore，在以后的实验中我们会对它进行回顾。
准备工作
PBE是Java 加密扩展（Java Cryptography Extension）的一部分，所以它已经包
含在AndroidSDK中了。在这个实验中，我们还将使用初始化向量（IV）和salt 值
作为推导密钥的数据之一。在前面的实验中我们已经讨论过IV，它有利于得到更随
机的结果。所以，即使是用同一个密钥对同一个消息进行加密，仍会产生不同的密
文。salt值的作用与IV的较为相似，它一般也是个随机数，被引入为加密过程的一
部分，用以提高其加密强度。
怎么做··
我们开始吧。
1.首先，定义一些辅助方法来获取或创建IV和salt值。我们将把它们作为密钥
推导和加密过程的一部分。
private static IvParameterSpec iv;
public static IvParameterSpec getIV()(
)(Tnu=AT)T
iv = new IvParameterSpec (generateRandcmByteArray(32)) :
return iv:
private static byte[]salt;
pub1ic static byte[1  getSalt ()(
if (salt == nul1) (
284
---
## Page 303
第9章加密与在开发时使用设备管理策略
salt = ges
domByteArray (32) :
return salt;
public static byte [1 generateRandomByteArray(1int sizeInBytes)[
byte[] randomNumberByteArray = nev byte[sizeInBytes]
// populate the array vith random bytes using non seededsecure random
new SecureRandom () -nextBytes (zandomNumberByteArray) 
return randomNumberByteArray:
2.生成PBE密钥。
public static SecretKey generatePBEKey (char[] passvord, byte[]
salt)
throvs NoSuchAlgorithmExceptLon, InvalidKeySpecException (
final int iterations = 10000;
fina1 int outputKeyLength = 256;
Axogoegeyaexoeg =Axotoegeyteroes Axotoegfegtexoeg
KeySpec keySpec = nev PBEKeySpec (passvord, salt,
iterations, outputKeyLength) :
SecretKey secretKey =
secretKeyFactory. generateSecret (keySpec) :
return secretKey;
3.编写一个示例方法，展示如何使用一个新推导出来的PBE密钥进行加密。
public static byte[] encrpytWithPBE(String painText, Strin
guserPassword)
throws GeneralSecurityException, IoException [
SecretKey secretKey =
generatePBEKey (userPassword, toCharArray () , getSalt ()) :
final Cipher cipher =
Cipher , getInstance (*AES/CBC/PKCS5Padding*) ;
cipher .Init (Cipher .ENCRYPT_MODE, secretKey, getIV () ) 
return cipher doFinal (painText ,getBytes (*UTF8")) ;
4.编写一个示例方法，展示如何用新推导出来的PBE密码解密密文。
public static String decrpytWithPBE (byte[] cipherText, String
285
---
## Page 304
Android安全攻防实战
(pxonssegzasn
throws GeneralSecurityException, IoException (
SecretKey secretKey =
generatePBEKey (userPassword. toCharArray () , getSa1t ());
final Cipher cipher =
Cipher , getInstance (“AES/CBC/PKCS5Padding*) 
cipher.init (Cipher.DBCRYPT_MODE, secretKey, getIV ()) ;
return cipher,doFinal (cipherText) .toString () :
/
工作原理
在步骤1中，我们定义了一个类似于以前实验中使用过的方法。重申一遍，为
了能对加密后的数据进行解密，salt值和IV必需始终保持一致。例如，你可以给每
个 app 都生成一个 salt，并将其存储在 SharedPreferences 中。另外，salt 值的长度通
常也是与密钥的长度一致的，在本例中为32字节/256位。通常情况下，你应该把IV
和密文保存在一起，以便能在解密时能得到它。
在步骤2中，我们用PBE，从用户的口令推导出一个256位的AES密钥一
SecretKey。PBKDF2是用来从用户口令推导出密钥的一种常用的算法。Android中该
算法的实现被称为PBKDF2WithHmacSHA1。
作为 PBEKeySpec 的一部分，我们定义了在 SecretKeyFactory 生成密钥时，内部
选代的次数。选代的次数越多，密钥推导所需时间就越长。为了防止暴力攻击，建
议推导密钥所需的时间应大于100ms。Android在生成加密备份的密钥时，使用的选
代次数为10.000次。
步骤3和步骤4演示了用Cipher对象和密钥进行加密和解密的过程。你会发现，
这些都非常类似于之前的实验中使用的方法。当然，除了在解密时，IV和salt值都
不是随机生成的，而是重用了在加密步骤中使用的IV和 salt。
进一步说明...·
Android 4.4 中，在处理 PBKDF2WithHmacSHA1 和以Unicode 编码传入的口令
时，SecretKeyFactory类有一个微妙的变化。以前的 PBKDF2WithHmacSHA1只能得
到Java表示口令的字符中的低8位的，而对SccretKeyFactory类的改变，则允许使
用Unicode字符中所有可用的位。为了保持向后兼容性，你可以使用这个新的密钥生
成算法PBKDF2WithHmacSHA1And8bit。如果你使用的是ASCII码，这种变化对你
不会产生影响。
286
---
## Page 305
第9章加密与在开发时使用设备管理策略
下面这段代码演示了如何保持向后兼容性。
SecretKeyFactory secretKeyFactory:
If (Bu11d,VERSION,SDK_INT >= Bu11d.VERSION_COOES,KITKAT)(
SecretKeyFactory-getInstance (*PBKDF2WithHmacSHA1And8bit") ;
secretKeyFactory -
}else[
secretKeyFactory = SecretKeyFactory -getInstance (*PBKDF2WithimacSRA1*) :
拓展阅读
°Android开发者参考指南中 SecretKeyFactory类位于https://developer.android
com/reference/javax/crypto/SecretKeyFactory.html 中 。
·Android开发者参考指南中PBEKeySpec 类位于https://developer.android
com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html 中 。
·Android开发者的博文使用加密手段安全地存储证书位于http://android
developers.blogspot.co.uk/2013/02/usingcryptography-to-store-credentials.html。
pe oxon8s d  ,( aox eo 
pbe 中.
·Android 4.4 中 SecretKeyFactory API 的变化可以在 http://androiddevelopers
blogspot. co.uk/2013/12/changes-to-secretkeyfactoryapi-in.html 中 查到。
9.6用SQLCipher加密数据库
SQLCipher是在Android app 中实现安全存储的最简单的方法之一，同时它兼容
运行Android 2.1+的设备。SQLCipher 使用256位的AES加密算法，并以CBC模式
加密数据库中的每一个页。此外，每个数据库页都有自己的随机初始化向量，以进
一步提高安全性。
SQLCipher是个独立的SQLite数据库实现，但它并没有自己去实现一套加密算
法，而是使用了经过广泛使用和测试的 OpenSSL的 libcrypto库。它可以让app具有
更高的安全性和更广泛的兼容性，但它也会让打包发布的.apk文件大上大概7MB。
这个额外的体积增大，可能也是使用SQLCipher的唯一缺点了。
按照SQLCipher网站的说法：在读/写性能方面约5%的性能损失是可以忽略不
计的，除非你的app正在执行一个复杂的SQL连接操作（但值得注意的是，其实在
287
---
## Page 306
Android安全攻防实战
SQLite 中这根本不算大）。SQLCipher不仅有forAndroid 的开源版本，而且它使用的
还是BSD-style许可。这对于商业开发来说，这是一个好消息。
准备工作
首先，要下载SQLCipher并用它设置你的Android项目。
1.通过SQLCipherGitHub页面上的链接，下载最新的二进制包，或直接使用链
接 https:/s3.amazonaws.com/sqlcipher/SQLCipher+for+Android+v3.0.0.zip。
2.解压ZIP文件。
3.把/assets 目录中的 icudt46l.zip 文件复制到你 app 里的/assets 目录中。
4./libs目录包含有一些JAR文件和含有原生库的文件夹。
5.把*jar文件复制到你app 的/libs目录里。你可能已经在使用 Commons-codec
和/或guava了，那么检查一下其版本是否与SQLCipher兼容。
6.不论是ARM还是x86，压缩包里都有其原生代码的实现，但你可能只需要
使用ARM 的原生库。所以，把armeabi文件夹复制到你应用程序的/libs 中。
怎么做··
创建一个加密的 SQLite数据库。
1.处理SQLite数据库有多种方法，可以直接操作iteDatabase对象，也可以使
用 SQLiteOpenHelper。但总体来说，如果你已经在你的 app 中使用了 SQLite
数据库，那只要把importandroid.database.sqlite.*语句改成import
net.sqlcipher.database.*号行了。
2.要创建一个加密的SQLCipher数据库，最简单的方法是用一个口令调用
openOrCreateDatabase(...):
private static final int DB_VERSION - 1;
public void initDB(Context context, Stzing password) (
SQLiteDatabase loadLibs (context) ;
SQLiteDatabase database = SQLiteDatabase.
openOxCreateDatabase (DB_NAME, password, nu11) ;
database,execSQL ("create table MyTable (a, b) ") ;
①如下面代码中的password 变量。—译者注
288
---
## Page 307