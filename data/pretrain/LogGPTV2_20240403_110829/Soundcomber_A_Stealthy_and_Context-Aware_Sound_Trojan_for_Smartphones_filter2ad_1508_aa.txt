title:Soundcomber: A Stealthy and Context-Aware Sound Trojan for Smartphones
author:Roman Schlegel and
Kehuan Zhang and
Xiao-yong Zhou and
Mehool Intwala and
Apu Kapadia and
XiaoFeng Wang
Soundcomber: A Stealthy and Context-Aware
Sound Trojan for Smartphones
Roman Schlegel
City University of Hong Kong
PI:EMAIL
Kehuan Zhang, Xiaoyong Zhou, Mehool Intwala, Apu Kapadia, XiaoFeng Wang
Indiana University Bloomington
{kehzhang, zhou, mintwala, kapadia, xw7}@indiana.edu
Abstract
We explore the threat of smartphone malware with ac-
cess to on-board sensors, which opens new avenues for il-
licit collection of private information. While existing work
shows that such “sensory malware” can convey raw sen-
sor data (e.g., video and audio) to a remote server, these
approaches lack stealthiness, incur signiﬁcant communica-
tion and computation overhead during data transmission
and processing, and can easily be defeated by existing pro-
tections like denying installation of applications with ac-
cess to both sensitive sensors and the network. We present
Soundcomber, a Trojan with few and innocuous permis-
sions, that can extract a small amount of targeted private
information from the audio sensor of the phone. Using
targeted proﬁles for context-aware analysis, Soundcomber
intelligently “pulls out” sensitive data such as credit card
and PIN numbers from both tone- and speech-based inter-
action with phone menu systems. Soundcomber performs
efﬁcient, stealthy local extraction, thereby greatly reducing
the communication cost for delivering stolen data. Sound-
comber automatically infers the destination phone number
by analyzing audio, circumvents known security defenses,
and conveys information remotely without direct network
access. We also design and implement a defensive architec-
ture that foils Soundcomber, identify new covert channels
speciﬁc to smartphones, and provide a video demonstration
of Soundcomber.
1 Introduction
Today’s mobile handsets are becoming full-ﬂedged com-
puting platforms capable of supporting complete operating
systems, complicated applications and software develop-
ment toolkits. With this technological revolution, however,
come new security and privacy challenges. Like their PC
counterparts, smartphones are no exception to the plague
of data-stealing malware and recently there have been a
number of incidents1,2 and proofs-of-concept,3,4 illustrat-
ing that smartphone malware is indeed a credible threat.
The presence of unique sensors on these mobile platforms
opens even more avenues for illicit collection of private
user data. For example, a Trojan with access to the video
camera [15] or microphone can tape a user’s phone con-
versations and send the recording to other parties, which
enables remote surveillance. Industry and academia have
taken serious note of such threats, which we refer to as sen-
sory malware. Newly released smartphone OSes all offer
security protections: as an example, Google’s Android sep-
arates different applications with Java virtual machines to
mediate the interactions among them according to security
policies. Anti-virus companies are moving their products
to the mobile platform, e.g., McAfee’s VirusScan Mobile5
and Symantec’s Norton Smartphone Security.6 New secu-
rity services [5] have been proposed to control installing un-
trusted software with dangerous security conﬁgurations, for
example, applications that request both access to the micro-
phone and an Internet connection, and to control communi-
cation between applications [10].
Such protections seem to be reasonably effective against
phone-borne malware, whose complexity and stealthiness
1http://www.sophos.com/blogs/gc/g/2010/07/29/
android-malware-steals-info-million-phone-owners/
2http://news.cnet.com/8301-27080_3-20013222-245.
html
3http://www.bbc.co.uk/news/technology-10912376
4http://www.reuters.com/article/
idUSTRE66T52O20100730
5http://us.mcafee.com/root/product.asp?
productid=mobile_info
6http://www.symantec.com/norton/
smartphone-security
are constrained by its smartphone host, a platform charac-
terized by its simpler design and weaker computing capabil-
ity compared with a desktop system. As an example, con-
sider the permission of microphone access, which has to be
granted to applications such as a voice dialer. The threat
of a malware with such a permission can be mitigated by
those existing approaches. Speciﬁcally, a behavior-based
malware detector [3] can pick up anomalous behavior such
as regular CPU-intensive operations and heavy use of band-
width, which could be associated with activities like per-
forming an in-depth speech recognition and transmitting a
large amount of phone recordings (typically, on the order of
100 KB per minute) to the Internet. A reference monitor
could deny installation of applications asking for both mi-
crophone access and other dangerous permissions: particu-
larly, access to the numbers being called, which allows mal-
ware to target a small set of calls involving high-value infor-
mation, and Internet connections. As a result, the malware
is left without any apparent way to communicate stolen in-
formation to its master.
Contrary to this intuition, we show that sophisticated
malware can be built over the smartphone platform to evade
such defenses. This is possible because of two new observa-
tions. First, the context of a phone conversation can be pre-
dicted and ﬁngerprinted under some circumstances, which
enables an efﬁcient analysis to extract a small amount of
high-value information from the conversation. A prominent
example is one’s interaction with an automatic phone menu
service, also known as interactive voice response (IVR) sys-
tem, which is routinely provided by customer service de-
partments of different organizations (e.g., credit-card com-
panies). The detailed steps of such an interaction were
found to be easily recognizable in our research, from a small
set of features of the conversation and related side-channel
information. As a result, sensitive data such as credit-card
numbers can be accurately identiﬁed at a small cost. Sec-
ond, like other computing systems, smartphones contain a
set of built-in covert channels, which can be leveraged to
transmit a small amount of sensitive information without
direct access to the Internet. To demonstrate that this threat
is realistic, we present an example of such malware in this
paper, called Soundcomber , a sound Trojan that masquer-
ades as an application with the legitimate need to use the
microphone, such as a voice dialer or a voice memo appli-
cation. Soundcomber is capable of stealing a user’s credit-
card number from her interactions with credit-card compa-
nies’ IVR. This is achieved through a suite of techniques
for hotline detection, proﬁle-based extraction, lightweight
speech/tone recognition and covert-channel communica-
tion. The hotline detection component analyzes the initial
part of a call to determine whether an IVR is called, and
if so, which IVR (based on IVR ﬁngerprinting). Based on
the detected IVR, Soundcomber uses a preset proﬁle (state
machine) for that IVR and intelligently analyzes a phone
menu to determine the interaction path, i.e., the sequence
of menu selections in terms of the digits a user enters, that
leads to the situation where the user has to reveal her credit
card number.
Although performing speech recognition over the whole
recording is computationally intensive, Soundcomber only
needs to work on a small portion of it, according to the pro-
ﬁle, to identify the digits a user speaks or types to the IVR,
which turns out to be lightweight. Of particular interest here
is the analysis of typing: the tones produced thereby are ac-
tually not part of the phone conversation. We demonstrate,
however, that they can be picked up by the microphone
when the tones are played back to the user. While this is not
surprising, it turns out to be technically challenging to ex-
tract information from this audio side channel, because the
tones are drowned out by background noise in the record-
ings — the microphone picks up a faint “echo” of the dig-
its pressed. Using tailored signal processing techniques we
show that it is feasible to isolate these tones and recover the
actual digits pressed with high accuracy. We note that even
though we use credit card numbers as a proof of concept,
the same technique can be applied to target other valuable
information such as shorter PIN numbers, social security
numbers (the last four digits are often requested as part of
authentication), passphrases such as mother’s maiden name,
and so on. Thus, even though proﬁle-based processing of
text transcripts can be done ofﬂine, proﬁle-based process-
ing on the smartphone itself (a) reduces the amount of re-
sources needed to process the entire speech recording to
generate the transcript, (b) reduces the amount of data sent
by the smartphone which would be noticeable if all recorded
phone calls are uploaded and (c) relieves the burden of the
malware master to process potentially lengthy transcripts
from a large number of sources (in Section 4 we provide
some conservative estimates to show such costs can be pro-
hibitive).
Because Soundcomber is doing the processing and ex-
traction of relevant data locally on the phone, the large
amount of phone call recordings can be distilled into a very
small amount of valuable data. If the whole recording were
transmitted to the master, the data required to be transmitted
would be several orders of magnitude larger. Further com-
pounding this communication woe is the fact that the mal-
ware cannot access the number being called and therefore
would have to record and transmit every single phone con-
versation if the processing was not done locally. The com-
munication/computation overhead incurred thereby would
signiﬁcantly reduce the stealthiness of the malware. Given
the much simpler task of transmitting merely 16 digits of
a credit-card number, Soundcomber can easily make the
communication less observable: for example, this can hap-
pen through a legitimate network-facing application, such
In the presence of a colluding application
as a browser.
with a networking permission, which we found is easy to
ﬁnd or install (see Sections 4.1 and 4.2), Soundcomber can
pass the digits to it through a covert channel. This even
evades the protection based on mediating the overt commu-
nication between applications, as described in a recent pro-
posal [10]. Our research discovers multiple covert channels
on the smartphone platform, including ﬁle locks, vibration
and screen settings. Leveraging these channels to transmit
the digits is found to be completely practical.
Finally, since no existing defenses work on Sound-
comber, we designed and implemented a defensive architec-
ture that foils the malware. In essence, all audio recording
and phone call requests are mediated by a reference moni-
tor, which can disable (blank out) the recording when nec-
essary. The decision on when to turn off the switch is made
according to the privacy policies that forbid audio recording
for a set of user-speciﬁed phone numbers, such as those of
credit-card companies. We evaluate our prototype defensive
architecture and show that it can prevent our demonstrated
attacks with minimal processing overhead.
We now summarize our major contributions:
• Targeted, context-aware information discovery from
sound recordings. We demonstrate that smartphone-
based malware can easily be made to be aware of
the context of a phone conversation, which allows it
to selectively collect high-value information. This is
achieved through techniques we developed to proﬁle
the interactions with a phone menu, and recover dig-
its either through a side-channel in a mobile phone
or by recognizing speech. We also show how only
limited permissions are needed and how Soundcomber
can determine the destination number of the phone call
through IVR ﬁngerprinting.
• Stealthy data transmission. We studied various chan-
nels on the smartphone platform that can be used
to bypass existing security controls, including data
transmission via a legitimate network-facing applica-
tion, which has not been mediated by the existing
approaches, and different types of covert channels.
We also discovered several new channels, such as vi-
bration/volume settings, and demonstrated that covert
channel information leaks are completely realistic on
smartphones.
• Implementation and evaluation. We implemented
Soundcomber on an Android phone and evaluated
our technique using realistic phone conversation data.
Our study shows that an individual’s credit-card num-
ber can be reliably identiﬁed and stealthily disclosed.
Therefore, the threat of such an attack is real.
that could be used to mitigate this threat, and in par-
ticular, we designed and implemented a defensive ar-
chitecture that prevents any application from recording
audio to certain phone numbers speciﬁed by privacy
policies.
2 Overview
Assumptions. Soundcomber is designed to work under
limited privileges. Speciﬁcally, we assume the Trojan is
granted access to the microphone, as required by its le-
gitimate functionality, but is denied network connections
and other risky permissions. Simultaneous access to mi-
crophone and networking is well known to be a dangerous
combination of permissions that should not be bestowed to
untrusted code [5], as a user’s speech is not supposed to be
recorded and transmitted to untrusted recipients. The mal-
ware is also denied other risky permissions such as inter-
cepting phone calls. It can acquire other information nec-
essary for its mission, e.g., the phone number being called,
through analyzing phone recordings. Avoiding dangerous
permission combinations can be achieved during the instal-
lation of an application: as an example, Android explicitly
displays the permissions requested by an application and
asks the user whether to grant these permissions (although
the options are limited to install/do not install). Alterna-
tively, a system like Kirin [5] could be used to disallow
dangerous combinations.
Architectural overview. The main goal of Soundcomber is
to extract a small amount of high-value private data from
phone conversations and transmit it to a malicious party. It
also aims to do so in a stealthy manner, by evading detec-
tion and not degrading the user experience, and under pos-
sibly restricted conﬁgurations as described above. These
goals are served by a design illustrated in Figure 1, which
includes two key components: a context-aware data collec-
tor (collector for short) and a data transmitter (transmit-
ter). The collector monitors the phone state and makes a
short recording of the calls it deems interesting based on
a proﬁle database. The recording is then analyzed based
on the speciﬁc proﬁle to extract user data that is passed to
the transmitter, which manages to send it to the malware’s
master. Since Soundcomber does not have direct access to
the Internet, this transmission needs to be done through a
second application, either a legitimate network-facing ap-
plication like the browser or a colluding program with the
networking permission. To deliver the data to the latter, the
transmitter needs to use covert channels when overt com-
munication is monitored by a protection mechanism [10].
In the following we explain how the Trojan can be used to
steal a phone user’s credit-card number.
• Defensive architecture. We discuss security measures
Detailed credit-card theft scenario. Armed with access
microphone
collection
Internet
Soundcomber
app
trans-
mission
overt /
covert
channel
Deliverer
app
collection /
communication
transmission
microphone
collection
audio
recording
audio
processing
proﬁle
database
data
extraction
trans-
mission
Figure 1. The left drawing shows the architecture of Soundcomber with the collection and commu(cid:173)
nication part on the left, connected through an overt or covert channel to a second application on
the right which can access the Internet and forward extracted data. The right drawing focuses on
the collection part of Soundcomber. Audio is recorded using the microphone, and processed, and
high(cid:173)value data is extracted and forwarded to the communication part.
to the microphone, Soundcomber records a person’s call
and performs an audio analysis of the recording. The pro-
cessing of the audio (i.e.
recognizing speech and touch
tones) and data extraction (i.e. extracting relevant infor-
mation from transcribed speech/tones) is proﬁle-driven so
that speech/audio processing is targeted at speciﬁc types
of information. As a proof of concept, we demonstrate
Soundcomber’s effectiveness at extracting credit-card num-
bers from spoken as well as touch-tone based audio sam-
ples. In this case, the proﬁle contains a state machine of
a credit-card company’s IVR system, i.e., the automated
menu-driven systems usually encountered when calling cus-
tomer service, thereby allowing Soundcomber to under-
stand the semantics of various parts of the audio recording
through a very lightweight analysis and target speciﬁc re-
gions of the audio for extracting the speaker’s credit card
number. An example of the proﬁle is the sequence of the
digits the user enters for selecting different menu options,
which can be built through analyzing the IVR menu of a
speciﬁc credit-card company. This sequence can be eas-
ily recognized by Soundcomber’s collector component from
the tones of individual digits. Such a proﬁle-driven analy-