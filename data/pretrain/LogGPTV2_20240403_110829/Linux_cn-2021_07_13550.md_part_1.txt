---
author: Julia Evans
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6539
date: '2021-07-05 10:42:00'
editorchoice: false
excerpt: 这是一个快速教程，介绍如何使用 GDB 查看 C 程序的栈空间。
fromurl: https://jvns.ca/blog/2021/05/17/how-to-look-at-the-stack-in-gdb/
id: 13550
islctt: true
largepic: /data/attachment/album/202107/05/103738f00boylephggpeyh.jpg
permalink: /article-13550-1.html
pic: /data/attachment/album/202107/05/103738f00boylephggpeyh.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 这是一个快速教程，介绍如何使用 GDB 查看 C 程序的栈空间。
tags:
- 堆栈
- gdb
thumb: false
title: 使用 GDB 查看程序的栈空间
titlepic: true
translator: amwps290
updated: '2021-07-05 10:42:00'
---
![](/data/attachment/album/202107/05/103738f00boylephggpeyh.jpg)
昨天我和一些人在闲聊的时候，他们说他们并不真正了解栈是如何工作的，而且也不知道如何去查看栈空间。
这是一个快速教程，介绍如何使用 GDB 查看 C 程序的栈空间。我认为这对于 Rust 程序来说也是相似的。但我这里仍然使用 C 语言，因为我发现用它更简单，而且用 C 语言也更容易写出错误的程序。
### 我们的测试程序
这里是一个简单的 C 程序，声明了一些变量，从标准输入读取两个字符串。一个字符串在堆上，另一个字符串在栈上。
```
#include 
#include 
int main() {
    char stack_string[10] = "stack";
    int x = 10;
    char *heap_string;
    heap_string = malloc(50);
    printf("Enter a string for the stack: ");
    gets(stack_string);
    printf("Enter a string for the heap: ");
    gets(heap_string);
    printf("Stack string is: %s\n", stack_string);
    printf("Heap string is: %s\n", heap_string);
    printf("x is: %d\n", x);
}
```
这个程序使用了一个你可能从来不会使用的极为不安全的函数 `gets` 。但我是故意这样写的。当出现错误的时候，你就知道是为什么了。
### 第 0 步：编译这个程序
我们使用 `gcc -g -O0 test.c -o test` 命令来编译这个程序。
`-g` 选项会在编译程序中将调式信息也编译进去。这将会使我们查看我们的变量更加容易。
`-O0` 选项告诉 gcc 不要进行优化，我要确保我们的 `x` 变量不会被优化掉。
### 第一步：启动 GDB
像这样启动 GDB：
```
$ gdb ./test
```
它打印出一些 GPL 信息，然后给出一个提示符。让我们在 `main` 函数这里设置一个断点：
```
(gdb) b main
```
然后我们就可以运行程序：
```
(gdb) b main
Starting program: /home/bork/work/homepage/test
Breakpoint 1, 0x000055555555516d in main ()
(gdb) run
Starting program: /home/bork/work/homepage/test
Breakpoint 1, main () at test.c:4
4   int main() {
```
好了，现在程序已经运行起来了。我们就可以开始查看栈空间了。
### 第二步：查看我们变量的地址
让我们从了解我们的变量开始。它们每个都在内存中有一个地址，我们可以像这样打印出来：
```
(gdb) p &x
$3 = (int *) 0x7fffffffe27c
(gdb) p &heap_string
$2 = (char **) 0x7fffffffe280
(gdb) p &stack_string
$4 = (char (*)[10]) 0x7fffffffe28e
```
因此，如果我们查看那些地址的堆栈，那我们应该能够看到所有的这些变量！
### 概念：栈指针
我们将需要使用栈指针，因此我将尽力对其进行快速解释。
有一个名为 ESP 的 x86 寄存器，称为“ 栈指针   stack pointer ”。 基本上，它是当前函数的栈起始地址。 在 GDB 中，你可以使用 `$sp` 来访问它。 当你调用新函数或从函数返回时，栈指针的值会更改。
### 第三步：在 `main` 函数开始的时候，我们查看一下在栈上的变量
首先，让我们看一下 main 函数开始时的栈。 现在是我们的堆栈指针的值：
```
(gdb) p $sp
$7 = (void *) 0x7fffffffe270
```
因此，我们当前函数的栈起始地址是 `0x7fffffffe270`，酷极了。
现在，让我们使用 GDB 打印出当前函数堆栈开始后的前 40 个字（即 160 个字节）。 某些内存可能不是栈的一部分，因为我不太确定这里的堆栈有多大。 但是至少开始的地方是栈的一部分。
![](/data/attachment/album/202107/05/103921zcw86wzokre8gure.jpg)
我已粗体显示了 `stack_string`，`heap_string` 和 `x` 变量的位置，并改变了颜色：
* `x` 是红色字体，并且起始地址是 `0x7fffffffe27c`
* `heap_string` 是蓝色字体，起始地址是 `0x7fffffffe280`
* `stack_string` 是紫色字体，起始地址是 `0x7fffffffe28e`
你可能会在这里注意到的一件奇怪的事情是 `x` 的值是 0x5555，但是我们将 `x` 设置为 `10`！ 那是因为直到我们的 `main` 函数运行之后才真正设置 `x` ，而我们现在才到了 `main` 最开始的地方。
### 第三步：运行到第十行代码后，再次查看一下我们的堆栈
让我们跳过几行，等待变量实际设置为其初始化值。 到第 10 行时，`x` 应该设置为 `10`。
首先我们需要设置另一个断点：
```
(gdb) b test.c:10
Breakpoint 2 at 0x5555555551a9: file test.c, line 11.
```
然后继续执行程序：
```
(gdb) continue
Continuing.
Breakpoint 2, main () at test.c:11
11      printf("Enter a string for the stack: ");
```
好的！ 让我们再来看看堆栈里的内容！ `gdb` 在这里格式化字节的方式略有不同，实际上我也不太关心这些（LCTT 译注:可以查看 GDB 手册中 `x` 命令，可以指定 `c` 来控制输出的格式）。 这里提醒一下你，我们的变量在栈上的位置：
* `x` 是红色字体，并且起始地址是 `0x7fffffffe27c`
* `heap_string` 是蓝色字体，起始地址是 `0x7fffffffe280`
* `stack_string` 是紫色字体，起始地址是 `0x7fffffffe28e`
![](/data/attachment/album/202107/05/104033oe61ylv1rq9inp8p.png)
在继续往下看之前，这里有一些有趣的事情要讨论。
### `stack_string` 在内存中是如何表示的
现在（第 10 行），`stack_string` 被设置为字符串`stack`。 让我们看看它在内存中的表示方式。
我们可以像这样打印出字符串中的字节（LCTT 译注：可以通过 `c` 选项直接显示为字符）：