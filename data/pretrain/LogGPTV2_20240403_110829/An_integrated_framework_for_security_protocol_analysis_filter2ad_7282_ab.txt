protocol  participants  (agents)  –  agent  behavior  in  response  to 
received  data,  expectations  towards  security  services  offered  by 
the  protocol,  properties  of  channels  used  to  send  and  receive 
messages 
protocol  dynamics  -  the  way  messages  are  constructed  from 
variables and sent between agents 
threat model - capabilities and knowledge of the intruder 
protocol  decomposition  –  partitioning  a  protocol  into  smaller 
subprotocols to limit the scope, size and structure of the network 
running the protocol, declaration of protocol sessions for agents to 
run in a given scenario 
We  have  identified  a  set  of  perspectives  which  forms  a  common 
modeling  baseline  for  formal  security  protocol  analysis.  The 
perspectives are shown in Figure 2. The “Assumptions” aspect is 
put  in  the  central  place,  as  we  recognize  that  identification  and 
documentation  of  assumptions  should  be  the  central  theme  of 
protocol modeling regardless of the perspective. 
The  modeling  patterns  serve  a  number  of  purposes.  Firstly,  they 
help  to  focus  on  one  particular  problem  at  a  given  stage. 
model  different  aspects  of  the  protocol,  this  section  explains  the 
relationships between this pattern and the others 
Variants - because of a few differences of how certain aspects of 
the  protocol  are  modeled  in  AVISPA,  CSP/Casper  and  FOCUS, 
several  patterns  have  more  then  one  variant  tailored  to  suit 
specific requirements of a corresponding formalism 
The patterns impose some structure on the UML models which is 
then  reflected  in  formal  models.  This  has  certain  advantages, 
which will be explained in the following sections. 
Example pattern definitions are shown in Figure 3 and Figure 4. 
anAgent : Agent
[anAgent's state in scenario #n]
anAgent's state in scenario #n
doing RoleOne's 
doing RoleOne's 
run #1
run #1
doing RoleTwo's 
doing RoleTwo's 
run #1
run #1
doing RoleTwo's 
doing RoleTwo's 
run #2
run #2
Figure 3. An Agent’s sessions pattern definition – CSP variant 
79
for  documenting  the  assumptions.  We  distinguish  different  types 
including:  scope  of  analysis,  security  of 
of  assumptions, 
cryptographic  mechanisms,  scope  of 
threats  and  protocol 
simplification.  The  assumption  documentation  template  is  given 
in Table 1. 
Table 1. Assumption documentation template 
ID 
Type 
Body 
Motivation 
Rationale 
Impact 
Comments 
Unique assumption identifier 
Assumption type 
Assumption expression 
Explanation why the assumption is needed 
Justification why this assumption is valid 
How this assumption influences the analysis 
process and its results 
Other relevant information 
In  addition  to  the  above  textual  documentation,  assumptions  are 
also  documented  in  object  diagrams  using  stereotyped  nodes 
>,  which  point  to  the  assumptions  documentation 
by referring to their ID, as illustrated in Figure 3. 
Digital 
signatures
>
A_public_keys_valid
Figure 5. Documenting assumptions 
3.4  Formal analysis 
To provide for unambiguity of specifications and precision of the 
analyses the framework employs formal modeling. Formal models 
are  derived  from  the  object  models  during  the  formalization  step 
of  the  analytical  procedure.  By  integrating  more  that  one  formal 
method  into  our  framework,  we  can benefit from added diversity 
at the same time reusing most of the work needed to prepare semi-
formal  models  and 
the  necessary 
assumptions.  At  present,  the  framework  supports  three  protocol 
analysis 
techniques  based  on  model  checking:  CSP/FDR, 
AVISPA and FOCUS. 
identify  and  document 
Formal  specifications  are  prepared  manually  by  applying  some 
formalization  rules  and  guidelines.  Formalization  rules  refer  to 
entire  patterns  or  their  larger  fragments.  This  approach  was 
inspired  by  the  techniques  of  model  formalization  based  on 
viewpoints  [14,  13].  Our  formalization  rules  and  guidelines 
follow  the  ideas  of  model  unification  (but  in  a  less  formal  way). 
Unification  recognizes  viewpoint  consistency  as  a  fundamental 
issue  (inconsistent  models  cannot  be  unified  to  a  well-formed 
formal  specification).  In  our  approach  this  problem  is  somewhat 
lessened,  if  the  analyst  follows  the  modeling  patterns  accurately. 
The rules leave some room for interpretation and therefore we do 
not  claim  to  have  a  rigorous  method  of  semi-formal  model 
refinement.  Our  formalization  rules  meet 
the  requirements 
postulated  in  [12]:  (1)  their  scope  goes  beyond  basic  model 
elements  to  entire  patterns;  (2)  they  are  documented  in  a  natural 
language,  same  as  the  patterns  themselves;  (3)  the  models  link 
individual assumptions to specific model elements which provides 
for greater traceability. 
Figure 6 shows an example procedure of translating a model using 
the Agent Sessions pattern into Casper instructions. Casper scripts 
are  then  automatically  compiled  into  machine  readable  dialect  of 
CSP and verified using the FDR model checker. 
Agent 1 / Role R : Agent 1's type
Agent 2 / Role R : Agent 2's type
theIntruder / Role S : Intruder
Agent 1 / Role S : Agent 1's type
Figure 4. An Agent’s sessions pattern definition – AVISPA 
variant 
The  pattern  specifies  possible  behaviors  of  an  agent.  In  CSP 
variant of the pattern (see Figure 3) each agent is characterized by 
a  single  compound  state  which  contains  sub-states  representing 
individual  sessions  the  agent  can  run.  The  agent  can  assume 
multiple roles and run the sessions concurrently or consecutively.  
Even  though  there  are  strong  similarities  and  significant  overlap 
between  different  formal  approaches  to  protocol  modeling  and 
analysis, there are also a few important differences which must be 
taken  into  account.  For  example,  the  “Agent’s  sessions”  pattern 
represents  a  specific  facet  of  CSP/Casper.  In  this  approach  the 
network  running  the  protocol  (also  called  a  system)  is  described 
by  specifying  a  number  and  sequence  of  sessions  each  agent  can 
run and what roles he can take in each session. What is important 
is  that  the  analyst  does  not  specify  what  other  agents  will 
collaborate 
tries  all 
possibilities  by  testing  each  possible  combination  of  agent 
identities,  provided  that  those  other  agents  are  allowed  to  run  a 
session taking a complementary role. 
in  each  session.  The  model  checker 
The AVISPA and FOCUS methods take a different approach. The 
analyst assigns sessions and roles to each agent in the system but 
he  also  explicitly  says  which  agents  are  running  each  session. 
Different combinations require either a more complex model with 
more sessions (which may quickly become too large to process) or 
one can model a separate security scenario with its own script. To 
capture this property of AVISPA/FOCUS, we proposed more then 
one variant of the Agent’s sessions pattern. While Figure 3 shows 
the  CSP  variant  of  the  pattern,  Figure  4  presents  the  version 
intended for AVISPA/FOCUS users. In this case the model takes 
the  form  of  a  collaboration  diagram  depicting  instances  of 
different  types  of  agents  with  object  links  representing  the  fact 
that given agents are involved in a protocol session and are taking 
roles specified in collaboration.  
Note  that  with  this  variant  the  intruder  has  to  be  explicitly 
mentioned in a model if he should participate in a protocol session 
posing  as  a  legitimate  agent.  That  is  just  another  difference 
between  AVISPA  or  FOCUS  and  CSP/Casper.  The  former 
method allows the intruder to run an arbitrary number of sessions 
without explicitly specifying this fact in the threat model. 
3.3  Assumptions 
Modeling inevitably involves making assumptions. Understanding 
those  assumptions  and  their  implications  is  crucial  for  the 
analyses  and  the  interpretation  of  the  results.  The  framework 
supports  assumption  management  in  two  ways:  the  metamodel 
helps  in  identifying  the  areas  that  should  be  considered  for 
possible  assumptions  and  the  analytical  patterns  provide  means 
80
Sessions performed by agents 
Model element 
UML 
Protocol sessions which an agent can run in a given security 
scenario are modeled using a state model. Each agent abject 
is  assigned  a  compound  state  which  consists  of  several 
atomic states, each representing one protocol run. Individual 
atomic states can be either consecutive or parallel. 
Agent Sessions Description diagram: 
theTerminal : Agent
[theTerminal's state in scenario #n]
theTerminal's state in scenario #n
doing Initiator 
doing Initiator 
doing Responder 
doing Responder 
run #1
run #1
run #1
run #1
Figure 6. How to formalize the Agent’s Sessions pattern 
4.  Distributed digital signatures case study 
This case study was conducted within the R&D project sponsored 
by the Polish Scientific Council, Grant No. 6 T11 2003 C\0 6280 
and  led  by  Unizeto  Ltd,  Poland  [20,  21].  The  objective  of  the 
project  was  to  develop  and  deploy  a  system  supporting  strong 
digital  signatures  in  a  distributed,  public  environment.  The 
distributed  architecture  of  the  system  and  the  new  approach  it 
takes to creating digital signatures resulted with the need to design 
a suit of secure cryptographic protocols. It was decided to analyze 
the protocols using formal techniques. 
Casper formal specification 
Individual  runs  an  agent  can  run  are  represented  as 
instances  of  CSP  processes.  Each 
type  of  process 
corresponds to a single role an agent can assume. Atomic 
UML  states  comprising  agent’s  compound  state  are 
mapped  into  process  instances,  which  are  parameterized 
using an appropriate agent identity variable. Parallelism of 
agent sessions can also expressed in Casper. 
#FREE VARIABLES 
-- DEFINE AN AGENT VARIABLE 
AINITIATOR, ARESPONDER : AGENT 
#PROCESSES 
-- AGENT ROLES ARE MAPPED TO CSP PROCESSES 
-- PARAMETRISED WITH AGENT’S ID 
INITIATOR(AINITATOR, ) 
RESPONDER(AINITATOR, ) 
#ACTUAL VARIABLES 
-- CREATE AN INSTANCE FOR YOUR AGENT 
THETERMINAL : AGENT 
#SYSTEM 
-- DECLARE POSSIBLE RUNS BY CREATING 
-- INSTANCES OF CSP PROCESSES  
INITIATOR(THETERMINAL) 
RESPONDER(THETERMINAL) 
The  architecture  of  the  developed  system  went  through  a 
significant  change  during  the  project,  which  directly  influenced 
the  designs  of  security  protocols.  The  evolution  of  protocols and 
the formal analyses performed are shown in Figure 7. 
The  first  suit  of  protocols  consisted  of  five  designs,  the  Trusted 
Signature  Protocol  (TSC)  and  four  auxiliary  ones  [21].  TSC was 
responsible  for  establishing  a  secure  channel  between  agents 
during  the  actual  document  signing.  The  protocol  was  modeled 
semi-formally  and  then  analyzed  formally  using  CSP/Casper  and 
for  additional  verification  with  FOCUS.  Later  in  the  project,  the 
signature creation transaction was divided into two smaller parts, 
the  first  one  being  an  initial  authentication  of  the  pin-pad  to  the 
trusted  computing  module  (PINpad-TRSM)  and  the  second  one 
authentication  of  the  smartcard  to  the  trusted  module  and 
producing  a  signature  (ICC-TRSM).  Both  protocols  have  been 
analyzed using two formal methods: CSP/Casper and AVISPA. 
The  way  the  combination  of  our  framework  and  the  CSP/Casper 
formal method were applied to the Trusted Signature Protocol has 
already  been  reported  in  [22].  In  the  following  section  we  will 
focus on explaining how the protocol was analyzed with FOCUS. 
Figure 7. Protocols analyzed in the Unizeto Ltd. R&D project 
81
4.1  Trusted Signature Creation Protocol 
The  distributed  system  for  digital  signatures  involves  three  types 
of  agents:  Application  Provider,  Service  Provider  and  Signing 
Entity. The Application Provider (AP) represents a company or a 
government entity that is providing customers with an interactive 
web application which at some point requires submitting securely 
signed  forms  or  documents.  The  Service  Provider  (SP)  supplies 
the  infrastructure  and  the  service  intended  for  creating  digital 
signatures  remotely.  It  is  a  trusted  third  party  responsible  for  the 
overall  security  of  the  entire  solution.  The  Signing  Entity  (SE) 