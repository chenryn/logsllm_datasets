sponsored apps are likely to use the network only to download ads.
Furthermore, a recent study revealed that 60% of the free apps in
the Android market require network access against 30% of paid
apps [1]. This suggests that ad trafﬁc will likely be isolated, i.e.,
found when the device is not generating any other trafﬁc. Using the
concept of activity periods as previously introduced, we can deﬁne
that ad trafﬁc is isolated if the activity periods are i) pure - only
contain ad trafﬁc, and ii) interleaved - the device has been silent for
some time before sending ad trafﬁc. Due to the limitations of our
dataset, the isolation factor can be only computed without including
other non-TCP trafﬁc such as DNS lookups so the results obtained
represent the upper bound. Moreover, since analytics services are
not strictly related to advertising, for this analysis we will consider
them separately, while grouping ad networks and mediation service
trafﬁc into a single class.
We found that 81.1%, 68.2% and 69.7% of activity periods are
pure for Android, iPhone and iPad devices respectively. While it is
possible that some apps are actually using the network, the lower
percentages obtained for Apple devices is likely due to push no-
tiﬁcations, a background service characterized by persistent long
lived connections used by the servers to send updates to the devices
only when needed. When a device is using this service, it is com-
mon to have at least one push notiﬁcation in each activity period,
even if it might not generate any trafﬁc during that period of time.
This intuition is conﬁrmed by the fact that ﬁltering this trafﬁc the
percentages of pure activity periods increase to 78.5% and 74.3%
for iPhone and iPad respectively. Interestingly, we found that 12-
20.4% of the pure activity periods contains only analytics trafﬁc,
5There is also an optional CELL_PCH (Cell paging channel) be-
tween IDLE and CELL_FACH.
Figure 12: CDF of the interleave for each pure activity period.
while only less than 1% has all three services. This shows that ana-
lytics trafﬁc is not generated simultaneously with ad networks and
mediation services trafﬁc.
For each pure activity period identiﬁed, we measured the inter-
leave, i.e. the amount of silence preceding the group of ﬂows. In
Figure 12 we report the CDF of the interleaves separating analyt-
ics services from the other types of trafﬁc and detailing the results
for different device types. Considering analytics services, we can
observe that the distributions are very similar between the device
types. Nearly 50% of the activity periods happen within the ﬁrst 2-3
seconds from the last communication, and 94.8% within 1 minute.
Instead, ad networks and mediation services present opposite char-
acteristics. Moreover, interleaves are larger than for analytics ser-
vices, with 20% of activity periods having more than 1 minute for
iPhone devices, while 40% and 32% happen within 6 seconds.
We also note that for ad networks and mediation services the
interleaves distribution is very similar to the results of Figure 8.
Analytics services present clear differences as they are not strictly
related to ad trafﬁc. We noticed that 80% of the pure analytics
activity periods are preceded by mixed activity periods, and that the
opposite holds for ad networks and mediation services. Overall,
we state that ad trafﬁc is isolated and the high interleaves found
indicate that the device radio is likely to be in the IDLE power
mode when they request ad trafﬁc.
4.2 Energy consumption of ad networks
The previous sections revealed several inefﬁciencies caused by
mobile ad trafﬁc with implications on mobile networks and the bat-
tery life of mobile devices. However, the mobile network data set
does not capture the activity on the RNC or lower layer traces, so
we were not able to estimate the real impact of ad trafﬁc on the
battery life from the network traces.
In this section we describe a set of active experiments run on a
real device with a power meter to accurately estimate the power
impact of mobile ad trafﬁc. We take advantage of the fact that ad
trafﬁc is generally found in isolation, so there is generally no back-
ground trafﬁc. While the trafﬁc analysis has exhibited the presence
of analytic services trafﬁc, we have seen that the nature of this traf-
ﬁc is less interactive than trafﬁc generated by mediation services
and ad networks.
4.2.1 Methodology
We used a purpose-built app for evaluation, requesting ads from
the three most popular ad networks (AdMob, Millennial Media and
InMobi). The app only contains an ad slot at the bottom of the
screen, to avoid incurring any extra CPU, I/O, and network costs.
This allows us to focus the energy evaluation solely on the cost
350Power Mode
Airplane Mode. Idle
Airplane Mode. Min Bright.
Airplane Mode. Max Bright.
Idle
Min brightness
Max brightness
2.1(0.1)
109.4 (0.1)
140 (1.4)
3.3 (0.1)
110.6 (0.2)
141.3 (0.3)
5.4 (0.4)
118.6 (1.2)
149.4 (1.0)
Table 6: Average current consumption for a Samsung Galaxy
Nexus S. In brackets, the standard deviation.
of fetching, displaying, and refreshing ads. The ad size used was
480×80 pixels across all networks tested (standard banners).
Measurements were taken with different refresh intervals (20,
40, 60 and 80 seconds), on 3G and Wi-Fi, each done ten times
for three minutes under controlled conditions. Since we could not
present detail on the amount of ad trafﬁc potentially ofﬂoaded on
Wi-Fi networks in our trafﬁc analysis, we included the wireless in-
terface on the energy evaluation, as many users use Wi-Fi when
available. For 3G, the experiments were carried under good net-
work conditions on a large European operator. The network type
was 3G and the signal strength varied from 16 to 21 ASU (max
is 31). The Wi-Fi experiments were done on a public Wi-Fi ac-
cess point connected to a DSL line with background trafﬁc. The
intervals were chosen to give a good estimate of the real cost that
publishers are adding to ofﬂine apps by including ads.
The popular Monsoon high-resolution Power Monitor was used
to measure the current consumption by the device while running the
app. To ensure that the conditions were kept constant, the bright-
ness and volume were set to the minimum level, whereas notiﬁca-
tions were disabled and all other apps were closed. The display is
required to be active as otherwise the ads do not refresh.
4.2.2 Baseline energy consumption
Table 6 shows the energy costs in mA6 for the basic power modes
of a Samsung Galaxy Nexus S. These values are speciﬁc for the
device used in the study, and will vary for other devices. These val-
ues aim to describe the standard conﬁguration of a modern mobile
device without any CPU and network-intense activity being exe-
cuted (only basic OS activity was allowed). As can be seen, one
of the most energy-intense resources is the display. The current
values obtained are similar to previous experiments which tried to
benchmark the energy consumption in modern mobile devices [11].
Being connected to a mobile network is more efﬁcient than keep-
ing the device connected to Wi-Fi APs. It should be noted that the
higher variability in the results for Wi-Fi is caused by background
broadcast trafﬁc existing in the network. Wi-Fi results are highly
dependent of the access point in use. The obtained results represent
a worst case scenario as the energy consumption of Wi-Fi clients
depends on the support of power saving mode on the access point
and the characteristics of the mobile terminal itself [12].
4.2.3 Energy cost: fetching ads under mobile net-
works and Wi-Fi
The parameters that publishers can control such as the refresh in-
terval and retrieval mechanism signiﬁcantly impact the power costs.
Figure 13 shows the current expenditure for different refresh inter-
vals for the ad networks under study on both 3G and Wi-Fi. The
6To obtain power values in mW, values should be multiplied by
the voltage (4V). To obtain the impact on the battery life (assuming
that the app is running continuously), the battery capacity (in mAh)
should be divided by the current consumption.
Average current consumption (mA)
Mobile Network
Wi-Fi
AdMob Push
AdMob Pull
InMobi
Millennial Media
260
240
220
200
180
160
)
A
m
(
t
n
e
r
r
u
C
135
130
)
A
m
(
t
n
e
r
r
u
C
125
20 40 60 80
20 40 60 80
20 40 60 80
20 40 60 80
Refresh Interval (s)
(a) Mobile Networks (3G)
AdMob Push
AdMob Pull
InMobi
Millennial Media
20 40 60 80
20 40 60 80
20 40 60 80
20 40 60 80
Refresh Interval (s)
(b) Wi-Fi
Figure 13: Current drain of AdMob, Millennial Media and In-
Mobi for banners at different refresh intervals and type of con-
nectivity: Mobile Networks (3G) (a) and Wi-Fi (b).
results reveal that Google’s Cloud-To-Device7 push technologies
can add some energy overhead due to their encryption mechanisms.
Nevertheless, independently of the technology, a low refresh in-
terval can more than double the current consumption (if there is
no background trafﬁc) in comparison to the baseline measurements
described in Section 4.2.2. Importantly, the power overhead caused
by the refresh interval is more notorious on 3G than in Wi-Fi due to
their characteristic power models. Nevertheless, the results might
vary in a real-world scenario as other apps might generate other
ﬂows that overlap, hence the power overhead is subsidized among
different ﬂows.
Using tcpdump, we identiﬁed that publishers’ control on the re-
trieval mechanism and refresh interval used are not the only source
of energy inefﬁciency on devices. Usually, the HTTP/1.1 request
created by the SDK have the KeepAlive option enabled in order to
fetch several objects in the same request. Even if each ad network
relies on a single content provider as reported in Figure 7, differ-
ent objects are usually downloaded from different servers and not
transferred on a single TCP connection. In this case the KeepAlive
feature is worthless and often forces the 3G radio interface to go
from IDLE or CELL_FACH to CELL_DCH. This is the case of
AdMob (also observed in other Google’s services such as Gmail
and Google Search), in which servers and clients have a connec-
tion timeout of 6 seconds, forcing the mobile interface to remain
active (or even to go from IDLE to DCH) only to send TCP’s FIN
notiﬁcation. Figure 14 shows the throughput for AdMob and Mil-
lennial Media for 3 minutes from an ofﬂine app requesting ads ev-
ery 40 seconds. We can identify small throughput peaks caused
by the FIN-ACK notiﬁcations in AdMob, whereas the active close
used in Millennial Media presents a cleaner ﬁgure. These small
7https://developers.google.com/android/c2dm/
351peaks can immediately cause RNC transitions and energy waste
on the devices. This is the main reason behind AdMob having a
higher power cost in comparison to Millennial Media and InMobi,
both of which tend to close the connection immediately after the
transaction is completed. Nevertheless, we have seen that when the
server is the one performing the active close, as found in InMobi,
it often experiences Failure to send FIN notiﬁcation promptly. If
this happens, the client will try to close the connection with the
server after 1 minute (the default fin_wait timeout, speciﬁed in
the proc ﬁlesystem) also forcing the 3G radio interface to go to a
dedicated channel (CELL_DCH) in vain as the gateway/NAT in the
mobile network might have closed the connection already. Millen-
nial Media’s client and server try to simultaneously perform the ac-
tive close, reducing such inefﬁciencies. This guarantees that most
of the network usage is compressed in the shortest time interval.
Interestingly, AdMob and InMobi servers identify the type of net-
work of the client to adapt the behavior of the system accordingly.
The TCP connections remain open when the phone is connected
with Wi-Fi despite the memory overhead for the servers required to
keep an open TCP connection.
The results shown in this section are the worst case scenario for
a pure ofﬂine app that does not require any network access but for
displaying mobile ads. If the app is online by nature, the power
overhead caused by ad trafﬁc can be amortized whenever the app
requires network access for its normal activity. However, a more
detailed evaluation of the impact of background trafﬁc requires a
good characterisation of mobile trafﬁc for different apps which is
still an open and interesting research problem by itself. In the fu-
ture, proposals, such as SPDY8 from Googlem could offer better
efﬁciency in downloading resources on the Internet by using paral-
lelization and ﬂow management to outperform HTTP. SPDY might
present an elegant solution to the problem we have depicted here,
but it will rely mostly on the global adoption of the solution in all
web servers and web browsers, something proven to be difﬁcult
with previous proposals, such as WebM9.
5. EVALUATING IMPROVEMENT STRATE-
GIES THROUGH ADCACHE
The mobile ecosystem is maintained by a model that encourages
publishers to (ab)use the features provided by ad networks to in-
crease their revenues. Ad trafﬁc is usually found in isolation so
it forces ofﬂine apps to be online in order to obtain mobile ads.
As a consequence, the volume of ad trafﬁc per user is signiﬁcant;
1% of mobile users have more than 2 MB of ad trafﬁc per day,
much of which is usually composed by objects such as images
and Javascript that are constantly being re-downloaded. Such high
download rates cause an important energy overhead, which is also
aggravated by multi-party services and an inefﬁcient protocol de-
sign. In Section 4.2, we observed that displaying ads on an app
over a period of three minutes can more than double the power
consumption at the lowest refresh interval.
Aggressive advertising strategies have pushed some users to adopt
defensive strategies, for example, millions of users have installed
the AdFree ad blocker app on Android. However these solutions
are not ideal as they often involve changes to the hosts ﬁle to redi-
rect trafﬁc to localhost, generating ﬁrewall rules (by iptables)
or turning off connectivity altogether. Furthermore, they are also
8http://dev.chromium.org/spdy
9http://www.appleinsider.com/articles/12/
03/14/mozilla_considers_h264_video_support_
after_googles_vp8_fails_to_gain_traction.
html
0
10
20
30
40
50
60
70
80
90
Time (s)
100 110 120 130 140 150 160
(a) AdMob
)
s
p
B
(
d
n
o
c
e
s
r
e
p
s
e
t
y
B
)
s
p
B
(
d
n
o
c
e
s
r
e
p
s
e
t
y
B
10000
1000
100
10
0
10000
1000
100
10
0
0
10
20
30
40
50
60
70
80
90
Time (s)
100 110 120 130 140 150 160
(b) Millennial Media
Figure 14: Throughput for AdMob (a) and Millennial Me-
dia (b) at a refresh interval of 40 seconds. We can clearly see
the throughput peaks caused by the FIN notiﬁcations in Ad-
Mob, forcing the radio interface to change up to (or remain in)
higher power states for longer periods of time.
a major disadvantage to publishers as it completely breaks their
intended revenue model. The ideal solution is an ad delivery mech-
anism that is friendly to all the end-users, ad networks and publish-
ers.
There are two feasible approaches to reduce the trafﬁc volume
and power overhead of ad networks: i) avoiding redundant trans-
missions and ii) reducing the number of transitions between the
power modes in mobile networks. Conceptually, ad trafﬁc contains
static content by default, even for targeted ads. Mobile ads are not
generated in real time, they are the result of planned campaigns
by the advertisers mainly distributed over CDNs, as described in
Section 3.3.
Based on these constraints, we designed AdCache for Android
devices. The following sections will detail its architecture, describ-
ing the way it fulﬁls the requirements for state of the art commercial
ad platforms and their features such as user proﬁling. AdCache is
bandwidth and energy-aware by exploiting simple techniques such
as connectivity awareness, batching and caching. Although privacy
was not an initial objective, AdCache’s design allows preserving
users’ privacy in a similar manner to MobiAd [5] and PrivAd [6].
5.1 Mobile agent
Figure 15 describes the AdCache architecture on a mobile de-
vice. As a proof of concept, the server functionality is provided
by a mock ad network responsible for handling and serving the re-
quests from the mobile clients. The mobile agent is a continuously
running background service that prefetches ads into a data structure
and serves them locally on requests by apps at the minimum power
cost. The data structure is persistent (even when phone reboots),
and is ﬁlled completely when the agent is initially started with a
set of ads speciﬁed by the ad network and is then updated periodi-
cally. Ads are prefetched based on their Time To Live (TTL) value,
deﬁned by the ad network to remove outdated or invalid ads.
The mobile agent acts as the coordination point for delivering ads
to apps installed on the device, making sure that no single app re-
352Ad Network
Network Operator
Mobile Agent
ENCRYPTED 
DATABASE
UPDATE 
MANAGER
CONTEXT
PROFILE
CACHE DATA 
STRUCTURE
SELECTION 
POLICY
CLICK 
REPORTER
AD SELECTOR
PUBLISHER 
VALIDATOR
Applications
Figure 15: The AdCache architecture.
quests ads excessively and that radio access is given consciously.
The ads are served according to a policy deﬁned by the server,
which is injected on the mobile agent whenever it has to be up-
dated. Among other features, the policies assign priority to a given
set of ads that takes into account the importance of some campaigns
over others.
Cache updates and synchronisation tasks are event-based, trig-
gered by satisfactory network conditions, timeouts (re-sync period
set 2 hours by default but can be customized by the ad network),
app requests, and expiration of all cached ads. These design deci-
sions have three immediate effects: i) there are no cache misses ii)
ads will not be pre-fetched if there are enough valid ads or there is
no app demand hence reducing trafﬁc volume and iii) allows Ad-
Cache to efﬁciently use network and energy-intense resources by
exploiting batching techniques. The server also has the ability to
push new ads to the client if needed.
Targeted ads
AdCache includes an opt-in proﬁle in the mobile agent which the
user is able to fully control. If they opt-in, this private information
will be used by the ad network to deliver targeted ads, otherwise,
standard ads will be delivered. Users’ data is securely stored locally
and apps do not have access to it.
For location awareness, location information is obtained using
passive methods such as Android’s Passive Location Provider10 or
mobile network information. In the latter case, AdCache delegates
the task of performing the network positioning lookups on services
such as Skyhook wireless to the server rather than adding an addi-
tional HTTP request on the device. Location is also used to update
the cache. If the user is moving and there are apps requesting ads,