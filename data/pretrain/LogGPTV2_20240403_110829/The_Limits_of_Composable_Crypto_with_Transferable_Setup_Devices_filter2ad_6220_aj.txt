trapdoors esid;ssid simultaneously.
2. In Hybrid H2, the simulation proceeds as the previous hybrid with the exception that it honestly
commits to the receiver’s input as 0 in all parallel sessions in the ﬁrst run.
3. Instead of the (cid:20) + 1 hybrids H3;0; : : : ; H3;(cid:20) used in the previous protocol (cid:5)OT in order to replace
the receiver’s commitments from being honestly generated to equivocal commitments using the
trapdoor, we consider q1(n) (cid:2) (cid:20) hybrids for the q1(n) parallel OT sessions.
4. Finally, in Hybrid H4, the simulation proceeds analogously with the exception that it extracts
the sender’s input in all q1(n) sessions simultaneously.
Receiver corruption. The simulator proceeds in stages, a stage for each sid 2 [q2(n)], where in each stage
the simulation proceeds similarly to the simulation of the previous protocol (cid:5)OT. Recall ﬁrst that
the simulation for (cid:5)OT retrieves all the queries made to both the tokens. Then upon receiving the
ﬁrst message, these queries are used for extracting the receiver’s input. We will employ the same
strategy here, with the exception that for every parallel session with identiﬁer ssid 2 [q1(n)] the
simulator extracts the receiver’s input simultaneously. As for the second message, the simulator acts
analogously to our previous simulation for each parallel session.
To argue indistinguishability, we consider a sequence of hybrids executions, once for each sequential
session analogous to the modiﬁcations for the sender corruption. First, from the unforgeability of the
one-time signature scheme we conclude that the malicious receiver cannot make bad queries to the
OT token. More formally, in Hybrid H4 corresponding to every sequential session, we argue from the
unforgeability of the signature scheme that a receiver queries the OT token on an input
((cid:27); sid; ssid; i; bi; tcombi; TCdecombi)
only if it requested a query (sid; ssid; tcombi; i) to TKCom
and sent tcombi in the ith coordinate for that
session as part of its ﬁrst message to the sender. This will allow us to combine with the argument made
in Hybrid 4 of Lemma 4.7 to conclude that there is at most one value of bi for which it can make the
query ((cid:27); sid; ssid; i; bi; tcombi; TCdecombi) to tokens fTKij
gj2[4(cid:20)]. Next, for each parallel session,
we include hybrids between H5 and H6, one for each of the sender’s inputs in each parallel sessions
that the receiver cannot obtain and indistinguishability follows analogous to proof of Lemma 4.10.
S
34
5 Two-Round Token-Based GUC Oblivious Transfer
In this section we present our main protocol that implements GUC OT in two rounds. We ﬁrst construct a
three-round protocol and then show in Section 5.3, similarly to Section 4.3, how to obtain a two-round pro-
tocol by exchanging tokens just once in a setup phase. Recall that the counter example to the [GIS+10]
protocol shows that directly extracting the sender’s inputs does not necessarily allow us to extract the
sender’s inputs correctly, as the tokens can behave maliciously. Inspired by the recently developed pro-
tocol from [ORS15] we consider a new approach here for which the sender’s inputs are extracted directly
by monitoring the queries it makes to the PRF tokens and using additional checks to ensure that the sender’s
inputs can be veriﬁed.
Protocol intuition. As a warmup consider the following sender’s algorithm that ﬁrst chooses two random
b ) for b 2 f0; 1g using the (cid:20) + 1-out-of-2(cid:20)
strings x0 and x1 and computes their shares [xb] = (x1
Shamir secret-sharing scheme. Next, for each b 2 f0; 1g, the sender commits to [xb] by ﬁrst generating
two vectors (cid:11)b and (cid:12)b such that (cid:11)b (cid:8) (cid:12)b = [xb], and then committing to these vectors. Finally, the parties
engage in 2(cid:20) parallel OT executions where the sender’s input to the jth instance are the decommitments to
((cid:11)0[j]; (cid:12)0[j]) and ((cid:11)1[j]; (cid:12)1[j]). The sender further sends (s0 (cid:8) x0; s1 (cid:8) x1). Thus, to learn sb, the receiver
needs to learn xb. For this, it enters the bit b for (cid:20) + 1 or more OT executions and then reconstructs the
shares for xb, followed by reconstructing sb using these shares. Nevertheless, this reconstruction procedure
works only if there is a mechanism that veriﬁes whether the shares are consistent.
b ; : : : ; x2(cid:20)
To resolve this issue, Ostrovsky et al. made the observation that the Shamir secret-sharing scheme has
the property for which there exists a linear function ϕ such that any vector of shares [xb] is valid if and only if
ϕ(xb) = 0. Moreover, since the function ϕ is linear, it sufﬁces to check whether ϕ((cid:11)b) + ϕ((cid:12)b) = 0. Never-
theless, this check requires from the receiver to know the entire vectors (cid:11)b and (cid:12)b for its input b. This means
it would have to use b as the input to all the 2(cid:20) OT executions, which may lead to an input-dependent abort
attack. Instead, Ostrovsky et al. introduced a mechanism for checking consistency indirectly via a cut-and-
choose mechanism. More formally, the sender chooses (cid:20) pairs of vectors that add up to [xb]. It is instructive
to view them as matrices A0; B0; A1; B1 2 Z(cid:20)(cid:2)2(cid:20)
where for every row i 2 [(cid:20)] and b 2 f0; 1g, it holds that
Ab[i;(cid:1)] (cid:8) Bb[i;(cid:1)] = [xb]. Next, the sender commits to each entry of each matrix separately and sets as input
to the jth OT the decommitment information of the entire column ((A0[(cid:1); j]; B0[(cid:1); j]); (A1[(cid:1); j]; B1[(cid:1); j])).
Upon receiving the information for a particular column j, the receiver checks if for all i, Ab[i; j] (cid:8) Bb[i; j]
agree on the same value. We refer to this as the shares consistency check.
p
1]; : : : ; [zb
Next, to check the validity of the shares, the sender additionally sends vectors [zb
(cid:20)] in the clear
i ] is set
along with the sender’s message where it commits to the entries of A0; A1; B0 and B1 such that [zb
to ϕ(A0[i;(cid:1)]). Depending on the challenge message, the sender decommits to A0[i;(cid:1)] and A1[i;(cid:1)] if ci = 0
and B0[i;(cid:1)] and B1[i;(cid:1)] if ci = 1. If ci = 0, then the receiver checks whether ϕ(Ab[i;(cid:1)]) = [zb
i ], and if
ci = 1 it checks whether ϕ(Bb[i;(cid:1)]) + zb
i = 0. This check ensures that except for at most s 2 !(log (cid:20)) of
the rows (Ab[i;(cid:1)]; Bb[i;(cid:1)]) satisfy the condition that ϕ(Ab[i;(cid:1)]) + ϕ(Bb[i;(cid:1)]) = 0 and for each such row i,
Ab[i;(cid:1)] + Bb[i;(cid:1)] represents a valid set of shares for both b = 0 and b = 1. This check is denoted by the
shares validity check. In the ﬁnal protocol, the sender sets as input in the jth parallel OT, the decommitment
to the entire jth columns of A0 and B0 corresponding to the receiver’s input 0 and A1 and B1 for input 1.
Upon receiving the decommitment information on input bj, the receiver considers a column “good” only
if Abj [i; j] + Bbj [i; j] add up to the same value for every i. Using another cut-and-choose mechanism,
the receiver ensures that there are sufﬁciently many good columns which consequently prevents any input-
independent behavior. We refer this to the shares-validity check.
35
Our oblivious transfer protocol. We obtain a two-round oblivious transfer protocol as follows. The
receiver commits to its input bits b1; : : : ; b2(cid:20) and the challenge bits for the share consistency check c1; : : : ; c(cid:20)
using the PRF tokens. Then, the sender sends all the commitments a la [ORS15] and 2(cid:20) + (cid:20) tokens, where
the ﬁrst 2(cid:20) tokens provide the decommitments to the columns, and the second set of (cid:20) tokens give the
decommitments of the rows for the shares consistency check. The simulator now extracts the sender’s
inputs by retrieving its queries and we are able to show that there cannot be any input dependent behavior of
the token if it passes both the shares consistency check and the shares validity check. See Figure 4 for the
protocol overview. In Section 5.1 we discuss how to obtain a two-round two-party computation using our
OT protocol.
S(s0; s1)
R(b)
PRF tokens fTKPRF;l
S
gl2[3(cid:20)] -
fcombj
gj2[2(cid:20)];fcomci
PRF tokens fTKPRF;l
gi2[(cid:20)]
gl′2[8(cid:20)2]
′
R
(cid:27)
pick x0; x1   Zp
b )   Share(xb)
(x1
b; : : : ; x2(cid:20)
(comA0; comB0; comA1; comB1 )
Z0; Z1; C0 = s0 (cid:8) x0; C1 = s1 (cid:8) x1
Tokens fTKjgj2[2(cid:20)];fcTKigi2[(cid:20)] -
Select T1(cid:0)b (cid:26) [2(cid:20)] of size (cid:20)=2
Deﬁne Tb = [2(cid:20)]=T1(cid:0)b
For every j 2 [2(cid:20)]; bj = (cid:12) if j 2 T(cid:12)
Select c1; : : : ; c(cid:20)   f0; 1g
If checks pass extract xb; sb
Figure 4: A high-level diagram of (cid:5)OT
GUC.
We now describe our protocol (cid:5)GUC
OT with sender S and receiver R using the following building blocks:
let (1) Com be a non-interactive perfectly binding commitment scheme, (2) let SS = (Share; Recon) be a
((cid:20) + 1)-out-of-2(cid:20) Shamir secret-sharing scheme over Zp, together with a linear map ϕ : Z2(cid:20)
such
′ be two families of pseudorandom functions
that ϕ(v) = 0 iff v is a valid sharing of some secret, (3) F; F
that map f0; 1g5(cid:20) ! f0; 1g(cid:20) and f0; 1g(cid:20) ! f0; 1gp((cid:20)), respectively (4) H denote a hardcore bit function
and (5) Ext : f0; 1g5(cid:20) (cid:2) f0; 1gd ! f0; 1g denote a randomness extractor where the source has length 5(cid:20)
and the seed has length d. See Protocol 2 for the complete description.
! Z(cid:20)(cid:0)1
p
p
Protocol 2 Protocol (cid:5)OT
GUC - GUC OT with stateless tokens.
(cid:15) Inputs: S holds two strings s0; s1 2 f0; 1g(cid:20) and R holds a bit b. The common input is sid.
(cid:15) The protocol:
1. S ! R: S chooses 3(cid:20) random PRF keys f(cid:13)lg[l23(cid:20)] for family F . Let PRF(cid:13)l : f0; 1g5(cid:20) ! f0; 1g(cid:20) denote
sending (Create; sid; S; R; midl; M1) to FgWRAP
the pseudorandom function. S creates token TKPRF;l
where M1 is the functionality of the token that on input (sid; x) outputs PRF(cid:13)l (x) for all l 2 [3(cid:20)]; For
the case where sid ̸= sid the token aborts;
S
36
gj2[2(cid:20)];fcomci
8 j 2 [2(cid:20)]; i 2 [(cid:20)]
  f0; 1g5(cid:20) and vj; v
′
i).
2. R ! S: R selects a random subset T1(cid:0)b (cid:26) [2(cid:20)] of size (cid:20)=2 and deﬁnes Tb = [2(cid:20)]=T1(cid:0)b. For every
j 2 [2(cid:20)], R sets bj = (cid:12) if j 2 T(cid:12). R samples uniformly at random c1; : : : ; c(cid:20)   f0; 1g. Finally, R sends
(a) (fcombj
gi2[(cid:20)]) to S where
and comci = (Ext(u
(b) R generates the tokens fTKPRF;l
′
uj; u
i
mid2(cid:20)+i; u
by sending (Create; sid; R; S; midl′ ; M2) to FgWRAP for all l
combj = (Ext(uj) (cid:8) bj; vj)
′
i are obtained by sending respectively (Run; sid; midj; uj) and (Run; sid;
gl2[3(cid:20)]
3. S ! R: S picks two random strings x0; x1   Zp and secret shares them using SS. In particular, S
b )   Share(xb) for b 2 f0; 1g. S commits to the shares [x0]; [x1] as follows.
A0[i;(cid:1)] + B0[i;(cid:1)] = [x0]; A1[i;(cid:1)] + B1[i;(cid:1)] = [x1]:
gl′2[8(cid:20)2] which are analogous to the PRF tokens fTKPRF;l
computes [xb] = (x1
It picks random matrices A0; B0   Z(cid:20)(cid:2)2(cid:20)
such that 8i 2 [(cid:20)]:
and A1; B1   Z(cid:20)(cid:2)2(cid:20)
p
i) (cid:8) ci; v
′
′
i)
′ 2 [8(cid:20)2].
R
′
p
b; : : : ; x2(cid:20)
S
S computes two matrices Z0; Z1 2 Z(cid:20)(cid:2)(cid:20)(cid:0)1
p
and sends them in the clear such that:
Z0[i;(cid:1)] = ϕ(A0[i;(cid:1)]); Z1[i;(cid:1)] = ϕ(A1[i;(cid:1)]):
S sends:
(a) Matrices (comA0 ; comB0; comA1; comB1) to R, where,
8 i 2 [(cid:20)]; j 2 [2(cid:20)]; (cid:12) 2 f0; 1g
comA(cid:12) [i;j] = (Ext(uA(cid:12) [i;j] (cid:8) A(cid:12)[i; j]; vA(cid:12) [i;j])
comB(cid:12) [i;j] = (Ext(uB(cid:12) [i;j] (cid:8) B(cid:12)[i; j]; vB(cid:12) [i;j])
where (uA(cid:12) [i;j]; uB(cid:12) [i;j])   f0; 1g5(cid:20) and (vA(cid:12) [i;j]; vB(cid:12) [i;j]) are obtained by sending (Run; sid;
mid[i;j;(cid:12)]; uA(cid:12) [i;j]) and (Run; sid; mid2(cid:20)2+[i;j;(cid:12)]; uB(cid:12) [i;j]), respectively, to the token TKPRF;[i;j;(cid:12)]
where [i; j; (cid:12)] is an encoding of the indices i; j; (cid:12) into an integer in [2(cid:20)2].
(b) C0 = s0 (cid:8) x0 and C1 = s1 (cid:8) x1 to R.
(c) For all j 2 [2(cid:20)], S creates a token TKj sending (Create; sid; S; R; mid3(cid:20)+j; M3) to FgWRAP where
M3 is the functionality that on input (sid; bj; decombj ), aborts if sid ̸= sid or if decombj is not
(d) For all i 2 [(cid:20)], S creates a token cTKi sending (Create; sid; S; R; mid5(cid:20)+i; M4) to FgWRAP where M4
veriﬁed correctly. Otherwise it outputs (Abj [(cid:1); j]; decomAbj [(cid:1);j]; Bbj [(cid:1); j]; decomBbj [(cid:1);j]).
is the functionality that on input (sid; ci; decomci ) aborts if sid ̸= sid or if decomci is not veriﬁed
correctly. Otherwise it outputs,
R
(A0[i;(cid:1)]; decomA0[i;(cid:1)]; A1[i;(cid:1)]; decomA1[i;(cid:1)]), if c = 0
(B0[i;(cid:1)]; decomB0[i;(cid:1)]; B1[i;(cid:1)]; decomB1[i;(cid:1)]), if c = 1
4. Output Phase:
For all j 2 [2(cid:20)], R sends (Run; sid; mid3(cid:20)+j; (bj; decombj )) and receives
(Abj [(cid:1); j]; decomAbj [(cid:1);j]; Bbj [(cid:1); j]; decomBbj [(cid:1);j]):
For all i 2 [(cid:20)], R sends (Run; sid; mid5(cid:20)+i; (ci; decomci )) and receives
(A0[(cid:1); i]; A1[(cid:1); i]) or (B0[(cid:1); i]; B1[(cid:1); i]):
(a) SHARES VALIDITY CHECK PHASE: For all i 2 [(cid:20)], if ci = 0 check that Z0[i;(cid:1)] = ϕ(A0[i;(cid:1)]) and
Z1[i;(cid:1)] = ϕ(A1[i;(cid:1)]). Otherwise, if ci = 1 check that ϕ(B0[i;(cid:1)]) + Z0[i;(cid:1)] = 0 and ϕ(B1[i;(cid:1)]) +
Z1[i;(cid:1)] = 0. If the tokens do not abort and all the checks pass, the receiver proceeds to the next
phase.
37
(b) SHARES CONSISTENCY CHECK PHASE: For each b 2 f0; 1g, R randomly chooses a set Tb for
which bj = b of (cid:20)=2 coordinates. For each j 2 Tb, R checks that there exists a unique xj
b such that
Ab[i; j] + Bb[i; j] = xj
b is marked as consistent. If the tokens do not abort
and all the shares obtained in this phase are consistent, R proceeds to the reconstruction phase.
Else it abort.
b for all i 2 [(cid:20)]. If so, xj
(c) OUTPUT RECONSTRUCTION: For j 2 [2(cid:20)]=T1(cid:0)b, if there exists a unique xj
b such that Ab[i; j] +
If R obtains less than (cid:20) + 1 good shares, it
be any set of (cid:20) + 1 consistent shares. R computes xb  
Bb[i; j] = xj
aborts. Otherwise, let xj1
Recon(xj1
b, mark share j as a good column.
) and outputs sb = Cb (cid:8) xb.
b ; : : : ; xj(cid:20)+1
b
b ; : : : ; xj(cid:20)+1
b
Next, we prove the following theorem,
Theorem 5.1 Assume the existence of one-way functions, then protocol (cid:5)OT
FgWRAP-hybrid.
GUC GUC realizes FOT in the
Proof overview. On a high-level, when the sender is corrupted our simulation proceeds analogously to the