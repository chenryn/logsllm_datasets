### Detecting and Mitigating Uninitialized Memory Vulnerabilities

#### Introduction
Uninitialized memory vulnerabilities pose a significant security risk in modern software, particularly in C and C++ programs. These vulnerabilities can lead to information disclosure, control flow hijacking, and other serious issues. This document reviews various techniques and tools designed to detect and mitigate such vulnerabilities.

#### Detection Techniques

1. **Multiple Variants Execution:**
   By running multiple variants of the same program and filling newly-allocated heap memory with random values, while providing all variants with identical input, any deviation in output is likely due to the use of uninitialized memory. To ensure reliability against memory errors, it is proposed to run several variants and discard those reporting inconsistent results.

2. **Stack Clearing:**
   - **GCC's Fortran Compiler:**
     The `-finit-local-zero` option is provided for compatibility with legacy Fortran code.
   - **C/C++ Compilers:**
     Some compilers offer options for automatic initialization of function stack frames, primarily for debugging purposes. However, this approach adds a significant performance penalty and provides fewer guarantees.

3. **Binary Hardening:**
   - **StackArmor [9]:**
     StackArmor isolates function frames containing potentially unsafe buffers using guard pages and random reordering. This makes it more difficult for attackers to predict which data may be present in uninitialized portions of frames, providing probabilistic mitigation of uninitialized data vulnerabilities. It also combines with analysis to add zero-initialization to potentially uninitialized portions of non-isolated frames, but reports an average overhead of 28% on SPEC CPU2006.

#### Heap Management

1. **Heap Allocation Clearing:**
   - **jemalloc [20]:**
     jemalloc provides an option for heap allocation clearing, although it is generally intended only for debugging. The documentation warns that this will negatively impact performance.
   - **Wang et al. [62]:**
     Proposed zero-initializing and padding heap allocations at allocation time by wrapping `malloc`, to protect against buffer overread vulnerabilities.
   - **Araujo and Hamlen [3]:**
     Suggested zeroing only the first byte of all allocations, providing limited benefits (e.g., for C strings) but adding almost no overhead.

2. **Heap Isolation:**
   - **Secure Deallocation [11]:**
     Secure Deallocation modifies the system C library to zero heap allocations when freed and clears stack frames in function epilogues. This provides less comprehensive protection and misses optimization opportunities. They claimed runtime overhead of <7% for heap clearing but 10%-40% overhead for stack clearing.
   - **DieHard [5] and Archipelago [41]:**
     DieHard allocates memory randomly across an oversized heap, and Archipelago allocates memory across the entire address space. OpenBSD [46] implemented such a random allocator by default, including moving metadata out-of-bound. DieHarder [48] built upon this to increase entropy at an additional performance cost of 20%, due to the cost of memory fragmentation.

#### Information Disclosure Defenses

1. **Taint Tracking:**
   - **TaintEraser [68]:**
     Uses tainting to track sensitive user input and prevent it from escaping to the filesystem or network.
   - **Harrison and Xu [24]:**
     Proposed techniques for probabilistically protecting private cryptographic keys against memory disclosure attacks.
   - **SWIPE [23]:**
     Tracks sensitive data using static analysis and erases it at the end of its lifetime.

#### Linux Kernel

1. **Uninitialized Data Vulnerabilities:**
   - **Chen et al. [8]:**
     Performed an extensive analysis of kernel vulnerabilities and reported that the most common category were uninitialized data errors, almost all of which led to information disclosure.
   - **Peiró et al. [50]:**
     Provided more in-depth discussion of such kernel info disclosure vulnerabilities and presented a technique for identifying stack information disclosures using static analysis.

2. **grsecurity/PaX:**
   - **PaX Project [49]:**
     Provides two different mitigations for potentially uninitialized kernel stack data using GCC plugins. One annotates structures that may be disclosed to userspace and initializes any such structures on the stack to prevent accidental information disclosure. The other takes a more aggressive approach, clearing the kernel stack before/after system calls. A GCC plugin tracks the maximum stack depth used for each call, providing efficient protection against stack reuse between different system calls, although still theoretically allowing an attacker to exploit such issues within a single call.

3. **UniSan [38]:**
   - **Lu et al. [38]:**
     Developed UniSan, a compiler-based approach for mitigating information disclosure vulnerabilities caused by uninitialized values in the Linux kernel. They propose using static data-flow analysis to trace potential execution paths and initializing any variables that cannot be proven to be initialized before potentially being disclosed. They implemented a prototype using LLVM and manually inspected their analysis results to find and disclose various new uninitialized value disclosure vulnerabilities.

#### Conclusion

Uninitialized data vulnerabilities continue to pose a security problem in modern C/C++ software. Ensuring safety against the use of uninitialized values is not as straightforward as it might seem. Threats range from simple information disclosures to serious issues such as arbitrary memory writes, static analysis limitations, and compiler optimizations taking advantage of undefined behavior. We presented SafeInit, a toolchain-based hardening technique that mitigates uses of uninitialized values in C/C++ programs by ensuring that all local variables and stack allocations are initialized before use. By making use of appropriate optimizations, we showed that runtime overhead for many applications can be reduced to a level that makes it practical to apply as a standard hardening protection.

To foster research in this area, we are open-sourcing our SafeInit prototype, available at [https://github.com/vusec/safeinit](https://github.com/vusec/safeinit). We hope to work towards making SafeInit available as a standard compiler feature and improving the optimizations it depends upon.

#### Acknowledgements

We would like to thank Kees Cook, Kangjie Lu, and the anonymous reviewers for their comments. This work was supported by the European Commission through project H2020 ICT-32-2014 SHARCS under Grant Agreement No. 644571 and by the Netherlands Organisation for Scientific Research through grant NWO 639.023.309 VICI Dowsing.

#### References

[1] “CVE-2012-1889: Vulnerability in Microsoft XML core services could allow remote code execution,” 2012.
[2] P. Akritidis, M. Costa, M. Castro, and S. Hand, “Baggy bounds checking: An efficient and backwards-compatible defense against out-of-bounds errors.” in USENIX Security, 2009.
[3] F. Araujo and K. Hamlen, “Compiler-instrumented, dynamic secret-redaction of legacy processes for attacker deception,” in USENIX Security, 2015.
...
[68] D. Y. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall, “TaintEraser: Protecting sensitive data leaks using application-level taint tracking,” ACM SIGOPS Operating Systems Review, 2011.