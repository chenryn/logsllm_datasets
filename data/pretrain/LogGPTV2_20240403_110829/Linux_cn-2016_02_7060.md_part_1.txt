---
author: Dan Nanni
category: 系统运维
comments_data:
- date: '2016-02-29 08:26:17'
  message: '##使用 qcow2 格式的磁盘镜像的好处就是它在创建之初并不会给它分配全部大小磁盘容量（这里是 10 GB），而是随着虚拟机中文件的增加而逐渐增大。因此，它对空间的使用更加有效。##'
  postip: 120.236.153.244
  username: 来自广东的 Firefox 44.0|Ubuntu 用户
- date: '2016-02-29 08:27:09'
  message: 我记得我以前也是创建30GB，就是因为它并不一开始就初始化这么大的。导致我安装系统时，只能被识别到10G的硬盘空间
  postip: 120.236.153.244
  username: 来自广东的 Firefox 44.0|Ubuntu 用户
- date: '2016-02-29 17:05:49'
  message: 为什么一定要关闭网络管理器(NetworkManager)？分明可以不用关闭。
  postip: 118.122.120.235
  username: 来自四川成都的 Chrome 48.0|GNU/Linux 用户
count:
  commentnum: 3
  favtimes: 6
  likes: 0
  sharetimes: 0
  viewnum: 12139
date: '2016-02-28 20:03:39'
editorchoice: false
excerpt: 作为替代方案，你可以使用 virsh 这个容易使用的命令行程序来管理客户虚拟机。在 virsh 中，它通过和 libvirtd 服务通信来达到控制虚拟机的目的，而
  libvirtd 可以控制多个不同的虚拟机管理器，包括 KVM，Xen，QEMU，LXC 和 OpenVZ。
fromurl: http://xmodulo.com/use-kvm-command-line-debian-ubuntu.html
id: 7060
islctt: true
largepic: /data/attachment/album/201602/28/200036phbmnmhngnoprb1h.jpg
permalink: /article-7060-1.html
pic: /data/attachment/album/201602/28/200036phbmnmhngnoprb1h.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 作为替代方案，你可以使用 virsh 这个容易使用的命令行程序来管理客户虚拟机。在 virsh 中，它通过和 libvirtd 服务通信来达到控制虚拟机的目的，而
  libvirtd 可以控制多个不同的虚拟机管理器，包括 KVM，Xen，QEMU，LXC 和 OpenVZ。
tags:
- kvm
- virsh
thumb: false
title: 怎样在 ubuntu 和 debian 中通过命令行管理 KVM
titlepic: false
translator: kylepeng93
updated: '2016-02-28 20:03:39'
---
有很多不同的方式去管理运行在 KVM 管理程序上的虚拟机。例如，virt-manager 就是一个流行的基于图形界面的前端虚拟机管理工具。然而，如果你想要在没有图形窗口的服务器环境下使用 KVM ，那么基于图形界面的解决方案显然是行不通的。事实上，你可以单纯使用包装了 kvm 命令行脚本的命令行来管理 KVM 虚拟机。作为替代方案，你可以使用 virsh 这个容易使用的命令行程序来管理客户虚拟机。在 virsh 中，它通过和 libvirtd 服务通信来达到控制虚拟机的目的，而 libvirtd 可以控制多个不同的虚拟机管理器，包括 KVM，Xen，QEMU，LXC 和 OpenVZ。
![](/data/attachment/album/201602/28/200036phbmnmhngnoprb1h.jpg)
当你想要对虚拟机的前期准备和后期管理实现自动化操作时，像 virsh 这样的命令行管理工具是非常有用的。同样，virsh 支持多个管理器也就意味着你可以通过相同的 virsh 接口去管理不同的虚拟机管理器。
在这篇文章中，我会示范**怎样在 ubuntu 和 debian 上通过使用 virsh 命令行去运行 KVM**。
### 第一步：确认你的硬件平台支持虚拟化
第一步，首先要确认你的 CPU 支持硬件虚拟化扩展（e.g.，Intel VT 或者 AMD-V)，这是 KVM 对硬件的要求。下面的命令可以检查硬件是否支持虚拟化。
```
$ egrep '(vmx|svm)' --color /proc/cpuinfo
```
![](/data/attachment/album/201602/28/200342gxyd6m6c11lrrcmc.jpg)
如果在输出中不包含 vmx 或者 svm 标识，那么就意味着你的 cpu 不支持硬件虚拟化。因此你不能在你的机器上使用 KVM 。确认了 cpu 支持 vmx 或者 svm 之后，接下来开始安装 KVM。
对于 KVM 来说，它不要求运行在拥有 64 位内核系统的主机上，但是通常我们会推荐在 64 位系统的主机上面运行 KVM。
### 第二步：安装KVM
使用 `apt-get` 安装 KVM 和相关的用户空间工具。
```
$ sudo apt-get install qemu-kvm libvirt-bin
```
安装期间，libvirtd 用户组（在 debian 上是 libvirtd-qemu 用户组）将会被创建，并且你的用户 id 将会被自动添加到该组中。这样做的目的是让你可以以一个普通用户而不是 root 用户的身份去管理虚拟机。你可以使用 `id` 命令来确认这一点，下面将会告诉你怎么去显示你的组 id：
```
$ id 
```
![](/data/attachment/album/201602/28/200342yvgrl3gxlxfzhfxr.jpg)
如果因为某些原因，libvirt（在 debian 中是 libvirt-qemu）没有在你的组 id 中被找到，你也可以手动将你自己添加到对应的组中，如下所示：
在 ubuntu 上：
```
$ sudo adduser [youruserID] libvirtd
```
在 debian 上：
```
$ sudo adduser [youruserID] libvirt-qemu
```
按照如下命令重新载入更新后的组成员关系。如果要求输入密码，那么输入你的登陆密码即可。
```
$ exec su -l $USER
```
这时，你应该可以以普通用户的身份去执行 virsh 了。做一个如下所示的测试，这个命令将会以列表的形式列出可用的虚拟机（当前的列表是空的）。如果你没有遇到权限问题，那意味着到目前为止一切都是正常的。
```
$ virsh list
```
---
```
 Id    Name                           State
```
---
### 第三步：配置桥接网络
为了使 KVM 虚拟机能够访问外部网络，一种方法是通过在 KVM 宿主机上创建 Linux 桥来实现。创建之后的桥能够将虚拟机的虚拟网卡和宿主机的物理网卡连接起来，因此，虚拟机能够发送和接收由物理网卡传输的数据包。这种方式叫做网络桥接。
下面将告诉你如何创建并且配置网桥，我们创建一个网桥称它为 br0。
首先，安装一个必需的包，然后用命令行创建一个网桥。
```
$ sudo apt-get install bridge-utils
    $ sudo brctl addbr br0
```
下一步就是配置已经创建好的网桥，即修改位于 `/etc/network/interfaces` 的配置文件。我们需要将该桥接网卡设置成开机启动。为了修改该配置文件，你需要关闭你的操作系统上的网络管理器（如果你在使用它的话）。跟随[操作指南](http://xmodulo.com/disable-network-manager-linux.html)的说明去关闭网络管理器。
关闭网络管理器之后，接下来就是通过修改配置文件来配置网桥了。
```
#auto eth0
    #iface eth0 inet dhcp
    auto br0
    iface br0 inet dhcp
            bridge_ports eth0
            bridge_stp off
            bridge_fd 0
            bridge_maxwait 0
```
在上面的配置中，我假设 eth0 是主要网卡，它也是连接到外网的网卡，同样，我假设 eth0 将会通过 DHCP 协议自动获取 ip 地址。注意，之前在 `/etc/network/interfaces` 中还没有对 eth0 进行任何配置。桥接网卡 br0 引用了 eth0 的配置，而 eth0 也会受到 br0 的制约。
重启网络服务，并确认网桥已经被成功的配置好。如果成功的话，br0 的 ip 地址将会是 eth0 自动分配的 ip 地址，而且 eth0 不会被分配任何 ip 地址。
```
$ sudo /etc/init.d/networking restart
    $ ifconfig
```
如果因为某些原因，eth0 仍然保留了之前分配给了 br0 的 ip 地址，那么你可能必须手动删除 eth0 的 ip 地址。
![](/data/attachment/album/201602/28/200342n1i126c4b2ae992v.jpg)
### 第四步：用命令行创建一个虚拟机
对于虚拟机来说，它的配置信息被存储在它对应的xml文件中。因此，创建一个虚拟机的第一步就是准备一个与虚拟机对应的 xml 文件。
下面是一个示例 xml 文件，你可以根据需要手动修改它。
```
      alice
      f5b8c05b-9c7a-3211-49b9-2bd635f7e2aa
      1048576
      1048576
      1
        hvm
      destroy
      restart
      destroy
        /usr/bin/kvm
```
上面的主机xml配置文件定义了如下的虚拟机内容。
* 1GB内存，一个虚拟cpu和一个硬件驱动
* 磁盘镜像：`/home/dev/images/alice.img`
* 从 CD-ROM 引导（`/home/dev/iso/CentOS-6.5-x86_64-minomal.iso`）
* 网络：一个桥接到 br0 的虚拟网卡
* 通过 VNC 远程访问