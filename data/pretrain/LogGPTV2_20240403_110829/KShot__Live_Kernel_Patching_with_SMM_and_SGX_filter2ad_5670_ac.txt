patch version
patch type
base memory address of vulnerable function
base memory address of patch function
The hash value of the function name
hash value
···
length of data
length of text
package size
no.
physical address in target memory
···
value/type
payload
···
⎫⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎬
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎭
(cid:6)
(cid:6)
Patch
Attributes
Global
Data
Patch
Text
Fig. 3: The structure of patch package transmitted from SGX
enclave to SMM.
encrypted patch text. The untrusted application writes data
from the SGX enclave into mem W. However, the untrusted
application cannot decrypt this output data. Finally, the much
larger mem X region is executable-only and is used to store de-
crypted patched instructions as the kernel text. Read and write
access to those instructions is prohibited (as is standard with
kernel function memory) to maintain integrity. Moreover, we
can use existing SMM-based runtime checking systems [39],
[50] to further ensure the integrity of this region.
These access control mechanisms only limit the OS kernel.
By contrast, the hardware-supported SMM handler can read
and write any reserved memory. The SGX enclave receives the
post-compilation binary patch. KSHOT formats the instruction
text, adds external message ﬁelds to ensure that the SMM
handler can process the text correctly, and places the text in
right memory position and alignment.
Patch Preprocessing: The SGX enclave receives a patch
set from the remote patch server P = {p1, . . . , pn}, with
edits to n functions. An individual patch pi has the form
{sequence, opt, type, . . . , payload}. The details are shown in
Figure 3. The patch preparation workﬂow follows a standard
sequence of steps. First, we verify the integrity of the received
patch to guard against network transmission errors. Next, the
modiﬁed binary patch will be written out as an executable
memory block. We package this memory block with external
header information (Figure 3). We encrypt this data in the
SGX enclave. The outside untrusted application then passes
the encrypted data to the mem W segment. After that, an
SMI is triggered to transfer control to the SMM-based live
patching component.
C. SMM-based Live Patching
The CPU changes to System Management Mode when it
receives a triggering instruction. The SMM hardware ensures
that the latest runtime state and register values are saved to
the protected SMRAM region of memory. Before the patching,
a Difﬁe-Hellman (DH) key generation module is executed in
SMM to create the private key, which is used to encrypt/de-
crypt the patch related data in SMM. This cryptographic key
is dynamically changed before each kernel patch to guard
against replay attacks between data transmissions. While a
Man-in-The-Middle (MITM) attack could still intercept the
communication between the SGX enclave and SMM, KSHOT
can verify the enclave’s identity via the trusted patch server
and thus mitigate the MITM attack. We implement the live
including integrity
patching process in the SMM handler,
checking and the patching module itself. The following is the
workﬂow of patching operations performed in SMM.
First, the data fetching function in SMM obtains the binary
patch packages from the mem W segment. We compare a
cryptographic hash of the payload to the hash stored in the
package header to ensure patch integrity.
Second, we check if any global variable needs to be changed
in the kernel data or bss segment. To ensure data consistency,
we locate the addresses of global data in either segment using
the kernel symbol table and change the value/type of each.
Third, we check the operation ﬁeld in the package. If the
value is patch, then we add a jump instruction as the redi-
rection at the entry of that vulnerable function. We deﬁne the
location address of the patch function paddr at mem X. The
location address of the ﬁrst patching function p1.paddr is the
base address of mem X. Then, the location address of the ith
patching function is pi.paddr = p(i−1).paddr + p(i−1).size,
where size denotes the size of a binary patch. The binary
patch pi is then placed between the memory of pi.paddr and
pi.paddr + pi.size. The trampoline instruction at pi.taddr,
where taddr is the physical memory base address of the
vulnerable function, is replaced with a jmp instruction with
the offset value of pi.paddr − pi.taddr + 5, which ensures
that process will be redirected to the patch function once the
vulnerable function is called (and respects the 5-byte kernel
tracing setup).
Once the redirection instruction is set up,
the system
switches back to Protected Mode and resumes the OS.
Patch Rollback/Update. After patching the kernel, the sys-
tem or its applications may not run correctly for many different
reasons [8]. For example, the patch may introduce a new bug
or cause a new vulnerability. Indeed, a software engineering
study of commercial and open source operating systems by
Yin et al. found that 15–24% of human-written OS patches
were incorrect and resulted in end-user-visible impacts such
as crashes or security problems [22]. Supporting rollback is
thus critical for a realistic deployment. In such situations, we
can send a rollback instruction from remote sever. The SMM
handler rolls back the patch function to the original function.
We keep the patch information in SMM and store the original
instruction in mem W . As a result, if a rollback operation is
triggered, we can fetch out the original instruction and replace
the jump instruction in the vulnerable function. In KSHOT,
the last patching operation can always be rolled back in this
manner.
D. Patching Protection
In this subsection, we discuss several techniques we em-
ploy to address potential malicious interference with our live
patching process.
Malicious Patch Reversion. Some latent attacks in a com-
promised OS might revert the patch with an original (i.e., vul-
nerable) version of the kernel or function. However, KSHOT
can mitigate such attacks by leveraging SMM-based intro-
spection. Speciﬁcally, we use SMM-based kernel protection
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 11:26:38 UTC from IEEE Xplore.  Restrictions apply. 
6
mechanisms [39], [50] to prevent the Target OS from reversion
or modiﬁcation by rootkits after applying the patching.
We can similarly use the SMM handler to introspect regions
of memory overwritten with trampoline instructions to ensure
that the patched version of code persists after deploying a
patch with our approach. Because SMM has higher privilege
than the kernel, and because it can transparently introspect the
Target OS, it can detect changes to the kernel text and data.
Denial-of-service attacks. DOS attacks may preclude the
patch preparation operation from running, leading to a live
patching failure. DOS attacks are generally difﬁcult to de-
fend [51], [52], however we can detect DOS attacks using
SMM-based introspection techniques. After the Remote Server
sends the Patch source to the SGX Enclave in the Target OS,
the Enclave and the Remote Server can communicate the state
of the Patch Preparation. Once the patch binary is written in to
the Reserved Memory, the Remote Server can verify with the
SMM Handler that the patch binary was written to memory
(i.e., via introspection in the SMM Handler). This approach
cannot prevent DOS attacks but can detect them.
VI. EVALUATION
We evaluate the applicability, performance, and security
of KSHOT when live patching Linux kernels. Our prototype
machine uses an Intel Core i7 CPU (supporting SGX and
SMM) with 16GB memory. We use a combination of Core-
boot [53] with a SeaBIOS [54] payload as the system BIOS.
We experiment with Ubuntu 14.04 and 16.04 using kernel
versions 3.14 and 4.4.
We consider three research questions:
• RQ1. Can KSHOT correctly apply kernel patches?
• RQ2. What is KSHOT’s performance overhead?
• RQ3. How does KSHOT compare to existing approaches?
A. Benchmark Selection
We evaluate KSHOT’s ability to patch critical kernel vul-
nerabilities by using a suite of real-world patches from the
Common Vulnerabilities and Exposures (CVE) database [55].
We analyzed 267 such vulnerabilities for Linux kernels 3.14
and 4.4. Of these 267, we found that 214 of them were
reproducible and applicable for our x86 architecture. The
remaining cases were excluded for one of two reasons: either
the vulnerability applied to a non-x86 platform (e.g., Android
or embedded devices), or the patch involved complex data
structure changes beyond the scope of our patching framework
(discussed further in Section VIII).
We randomly selected 30 of those 214 patches to construct
a benchmark suite similar in scale to existing work [9], [56].
The selected patches are listed in Table I. The “CVE Number”
ﬁeld identiﬁes the associated kernel defect. The “Affected
Functions” ﬁeld lists the kernel functions changed by the
patch. The “Patch Size” ﬁeld lists total size, in lines of code, of
all changed functions in post-patch version (this corresponds
to the size of the patch that KSHOT must deploy).
TABLE I: Benchmark suite of 30 critical kernel patches.
CVE Number
CVE-2014-01961
CVE-2014-36871
CVE-2014-36901
CVE-2014-41571
CVE-2014-50771
CVE-2014-52061
CVE-2014-78421
CVE-2014-81331
CVE-2015-13331
CVE-2015-14211
CVE-2015-57071
CVE-2015-78721
CVE-2015-88121
CVE-2015-89631
CVE-2015-89642
CVE-2016-21432
CVE-2016-25432
CVE-2016-45781,2
CVE-2016-45802
CVE-2016-51952
CVE-2016-58292
CVE-2016-79142
CVE-2016-79162
CVE-2017-63471,2
CVE-2017-89251,2
CVE-2017-169942
CVE-2017-170532
CVE-2017-178061,2
CVE-2017-182701,2
CVE-2018-101241.2
Affected Functions
n tty write
sctp chunk pending,
ctp assoc lookup asconf ack
vmx vcpu run,
vmcs host cr4,
vmx set constant host state
current thread info
sctp assoc update
do remount
handle emulation failure
set tls desc,
regset tls set
key link end
sctp assoc update
sg start req
key gc unused keys,
request key and link
iwch l2t send,
iwch cxgb3 oﬂd send
perf swevent add,
swevent hlist get cpu,
perf event exit cpu context
tty set termios ldisc
init new context,
pgd alloc, pgd free
snd seq ioctl remove events
snd timer user ccallback
x25 negotiate facilities
follow page pte,
faulti page
hiddev ioctl usage
assoc array insert-
into terminal node
environ read
ip cmsg recv checksum
omninet open
walk page range
init new context
shash no setkey,
hmac create,
crypto shash alg has setkey
key alloc,
install user keyrings,
join session keyring
kill something info, sys kill
Size
86
16
247
5
98
34
16
81
21
96
117
20
26
72
10
53
25
24
67
229
119
330
63
15
9
27
13
91
273
51
Type(cid:2)
1
1,2
3
2
1
2
1
1,2
1
1
1
1
1