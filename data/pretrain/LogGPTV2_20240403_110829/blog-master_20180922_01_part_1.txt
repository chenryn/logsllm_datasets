## PostgreSQL undo多版本存储引擎 zheap测试   
### 作者                                                             
digoal                                                             
### 日期                                                             
2018-09-25                                                           
### 标签                                                             
PostgreSQL , zheap , undo , mvcc   
----                                                             
## 背景          
undo 存储引擎，由于大量使用inplace update，所以大幅度降低了表膨胀的概率。并且减少了垃圾回收引入的IO。   
预计会在PG 12的版本中release。  
目前可以下源码进行测试。  
## 部署zheap引擎  
1、源码使用  
https://github.com/EnterpriseDB/zheap  
2、其他参考  
[《PostgreSQL on Linux 最佳部署手册 - 珍藏级》](../201611/20161121_01.md)    
简单步骤如下  
```  
git clone https://github.com/EnterpriseDB/zheap  
cd zheap  
LIBS=-lpthread CFLAGS="-O3 " ./configure --with-trans_slots_per_zheap_page=8 --prefix=/home/digoal/pgsql_zheap  
LIBS=-lpthread CFLAGS="-O3 " make world -j 64  
LIBS=-lpthread CFLAGS="-O3 " make install-world  
```  
或调试编译  
```  
LIBS=-lpthread CFLAGS="-O0 -g -ggdb -fno-omit-frame-pointer" ./configure --prefix=/home/digoal/pgsql_zheap --enable-cassert  
LIBS=-lpthread CFLAGS="-O0 -g -ggdb -fno-omit-frame-pointer" make world -j 64  
LIBS=-lpthread CFLAGS="-O0 -g -ggdb -fno-omit-frame-pointer" make install-world  
```  
环境变量  
```  
export PS1="$USER@`/bin/hostname -s`-> "      
export PGPORT=4001      
export PGDATA=/data01/digoal/pg_root$PGPORT      
export LANG=en_US.utf8      
export PGHOME=/home/digoal/pgsql_zheap  
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH      
export DATE=`date +"%Y%m%d%H%M"`    
export PATH=$PGHOME/bin:$PATH:.      
export MANPATH=$PGHOME/share/man:$MANPATH      
export PGHOST=$PGDATA      
export PGUSER=postgres      
export PGDATABASE=postgres      
alias rm='rm -i'      
alias ll='ls -lh'      
unalias vi   
```  
初始化数据库  
```  
initdb -D $PGDATA -U postgres --lc-collate=C --lc-ctype=en_US.utf8 -E UTF8  
```  
修改配置文件  
```  
cat postgresql.auto.conf   
listen_addresses = '0.0.0.0'    
port = 4001  
max_connections = 2000    
superuser_reserved_connections = 3    
unix_socket_directories = '., /tmp'    
tcp_keepalives_idle = 60    
tcp_keepalives_interval = 10    
tcp_keepalives_count = 10    
shared_buffers = 300GB    
huge_pages=on  
max_prepared_transactions = 2000    
work_mem = 8MB    
maintenance_work_mem = 2GB    
dynamic_shared_memory_type = posix    
vacuum_cost_delay = 0    
bgwriter_delay = 10ms    
bgwriter_lru_maxpages = 1000    
bgwriter_lru_multiplier = 10.0    
effective_io_concurrency = 0    
wal_level = minimal      
# full_page_writes=off  
synchronous_commit = off    
wal_writer_delay = 10ms    
checkpoint_timeout = 15min    
max_wal_size = 600GB    
min_wal_size = 150GB    
checkpoint_completion_target = 0.1    
max_wal_senders = 0    
effective_cache_size = 200GB    
log_destination = 'csvlog'    
logging_collector = on    
log_directory = 'log'    
log_filename = 'postgresql-%a.log'    
log_truncate_on_rotation = on    
log_rotation_age = 1d    
log_rotation_size = 0    
log_checkpoints = on     
log_connections = on    
log_disconnections = on    
log_error_verbosity = verbose     
log_line_prefix = '%m [%p] '    
log_timezone = 'PRC'    
log_autovacuum_min_duration = 0    
autovacuum_max_workers = 16    
autovacuum_freeze_max_age = 1200000000    
autovacuum_multixact_freeze_max_age = 1400000000    
autovacuum_vacuum_cost_delay = 0ms    
vacuum_freeze_table_age = 1150000000    
vacuum_multixact_freeze_table_age = 1150000000    
datestyle = 'iso, mdy'    
timezone = 'PRC'    
lc_messages = 'C'    
lc_monetary = 'C'    
lc_numeric = 'C'    
lc_time = 'C'    
default_text_search_config = 'pg_catalog.english'    
jit = off    
cpu_tuple_cost=0.00018884145574257426      
cpu_index_tuple_cost = 0.00433497085216479990      
cpu_operator_cost = 0.00216748542608239995      
seq_page_cost=0.014329      
random_page_cost = 0.016   
max_worker_processes = 128      
max_parallel_workers = 32      
max_parallel_maintenance_workers = 24      
max_parallel_workers_per_gather = 0      
parallel_leader_participation = on      
min_parallel_table_scan_size=0    
min_parallel_index_scan_size=0    
parallel_setup_cost=0    
parallel_tuple_cost=0  
```  
启动数据库  
```  
pg_ctl start  
```  
创建表空间  
```  
mkdir /data02/digoal/zheap_tbs1  
mkdir /data03/digoal/zheap_tbs2  
postgres=# create tablespace tbs1 location '/data02/digoal/zheap_tbs1';  
CREATE TABLESPACE  
postgres=# create tablespace tbs2 location '/data03/digoal/zheap_tbs2';  
CREATE TABLESPACE  
```  
创建zheap引擎的表  
```  
create table t_zheap(c1 int, c2 varchar)   
with (storage_engine='zheap')   -- 使用zheap引擎，默认为heap引擎。  
tablespace tbs1;  
```  
## 使用sysbench-tpcc进行测试  