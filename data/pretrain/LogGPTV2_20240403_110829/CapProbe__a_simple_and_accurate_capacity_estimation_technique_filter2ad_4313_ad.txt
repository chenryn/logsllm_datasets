value of minimum packet pair delay sums is smallest at the
point corresponding to the narrow link capacity, which is
4Mbps. We note here that when cross-traﬃc rate is 4Mbps,
2TCP rates ﬂuctuate, but are limited to between 1Mbps and
4Mbps, depending upon the scenario.
Table 1: Destinations used in our experiments
Figure 16: (a) Minimum delay sums and (b) fre-
quency of occurrence when cross-traﬃc is TCP and
packet size of probes is 500 bytes.
UCLA-3
UCONN
UCSD
WLSH
YAHOO
Location
Host
BERKELEY University of California, Berkeley
CMU
MIT
NTNU
UA
UCLA
UCLA-2
Carnegie Mellon University
Massachusetts Institute of Technology
National Taiwan Normal University
University of Alabama
University of California, Los Angeles
University of California, Los Angeles
(including a wireless hop)
University of California, Los Angeles
University of Connecticut
University of California, San Diego
National Wuling Senior High School, Taiwan
Yahoo.com
Table 2: Convergence time and capacity (in Mbps)
estimated over Internet
YAHOO
WLSH (1.5Mbps)
Figure 17: (a) Minimum delay sums and (b) fre-
quency of occurrence when cross-traﬃc is UDP.
i.e., equal to the narrow link capacity, CapProbe still works.
Thus, when cross-traﬃc is TCP, CapProbe measures the
right capacity even for highly congested links. Looking at
Figure 15(b), the strongest mode always occurs at 8Mbps.
This mode is the Post-Narrow Capacity Mode (PNCM) in-
troduced in [4] and represents compression.
We now show results when size of packet pair packets is
increased to 500 bytes. Figure 16(a) shows the minimum
packet pair delay sums. Figure 16(b) shows the frequency
distribution of bandwidth estimates from packet dispersion.
From Figure 16(b), when the size of packet pair packets
is similar to that of cross-traﬃc packets, results show the
emergence of the ADR (Asymptotic Dispersion Rate), which
has been noted in [4]. The strongest mode is the ADR when
cross-traﬃc is 3Mbps. From Figure 16(a), the CapProbe
scheme still estimates the right capacity for diﬀerent cross-
traﬃc values. Thus, even when the strongest mode is the
ADR, CapProbe is able to estimate the correct capacity.
We now show simulation results when the cross-traﬃc
is path-persistent and CBR using UDP as transport layer
protocol. Figure 17(a) shows the minimum packet pair de-
lay sums. Figure 17(b) shows the frequency distribution
of bandwidth estimates from packet dispersion. The UDP
cross-traﬃc results are diﬀerent from TCP results since UDP
is not reactive to congestion.
From Figure 17(a), CapProbe predicts the correct capac-
ity till the UDP cross-traﬃc is 2Mbps, i.e., till a load of 50%
on the narrow link. For higher cross-traﬃc rates, no sam-
ples corresponding to the correct capacity are obtained. In
fact, all samples for cross-traﬃc of 3Mbps or 4Mbps have
a packet dispersion corresponding to an estimated band-
width of 8Mbps (Figure 17(b)). This is basically the PNCM
mode described in [4]. Also, the strongest mode is an over-
estimation for all cross-traﬃc loads. It should be noted here
that high-rate UDP is a worst-case for CapProbe (and in
66.218.70.49
time
0’03
0’01
0’03
0’03
0’01
C
97
93
90
99
98
1
2
3
4
5
210.70.26.17
time
0’13
0’56
0’13
0’13
0’13
C
1.50
1.53
1.50
1.53
1.50
general, for all packet pair-based techniques), and it is also
not very realistic. Our basis for experimenting with such
cross-traﬃc is to identify cases in which our technique fails.
For all other combinations of cross-traﬃc type (TCP, CBR,
LRD) and nature (persistent, non-persistent), CapProbe was
able to estimate the correct capacity. We do not show these
results due to space constraints.
We now show results of measurement experiments. We
evaluated the performance of CapProbe with respect to its
speed and accuracy. CapProbe was implemented using ICMP
PING packets, sent in pairs. This meant that we had to be
careful in choosing our test paths, since PING packets are
blocked by some Internet nodes (ﬁrewalls etc). It should be
noted that CapProbe can just as well be implemented as
a UDP-based client-server application, similar to pathrate.
This has the disadvantage that a module needs to be in-
stalled at the destination, similar to pathrate.
A Pentium 4 2.5GHz machine at our university was used
as the source machine, running CapProbe, pathrate and
pathchar. A number of destination machines on the Inter-
net, Abilene and CalREN networks were chosen to provide
diﬀerent types of paths (the names of these destination ma-
chines are shown in Table 1). Abilene is a high-speed 10Gbps
national backbone connecting a number of universities. Abi-
lene provides a diﬀerent environment for testing than the
commercial Internet since it is very high-speed. CalREN is
also a high-speed network connecting universities in Califor-
nia. We had knowledge of capacities of all links on certain
paths on Abilene and CalREN.
The path to the UCLA-2 machine involved a wireless hop,
with 802.11b being the wireless technology.
In all other
paths (except WLSH where the narrow link capacity was
1.5Mbps), the narrow link was 100 Mbps. Since pathrate
requires the installation of a module at the destination and
we did not have access to all destination machines, results
for pathrate could not be obtained for all test paths.
Table 3: Convergence time and capacity (in Mbps)
estimated over Abilene
MIT
CMU
UCONN
18.181.0.31
C
time
95
0’04
98
0’07
0’07
97
96
0’07
0’03
97
128.2.11.43
C
time
99
0’04
97
0’04
0’02
99
98
0’02
0’04
99
137.99.29.54
time
0’13
0’13
0’04
0’05
0’25
C
98
99
98
93
85
1
2
3
4
5
Table 4: Convergence time and capacity (in Mbps)
estimated over CalREN
UCLA
UCSD
169.232.56.135
time
0’02
0’02
0’01
0’02
0’01
C
99
93
91
97
97
132.239.50.184
time
0’01
0’02
0’08
0’01
0’05
C
97
97
96
97
98
1
2
3
4
5
BERKELEY
169.229.131.109
time
0’02
0’01
0’03
0’03
0’05
C
99
99
97
98
95
Table 2, 3 and 4 show the speed and accuracy of CapProbe
in 5 runs on various test paths on the Internet, Abilene and
CalREN networks respectively. We found that CapProbe
is able to estimate capacity with a high degree of accuracy
typically within a few seconds. The quick and accurate es-
timation of CapProbe indicates that it may be suitable for
“online” capacity estimation. This can prove useful over
wireless links, in which the changing quality of the link can
cause the capacity to vary frequently.
Table 5 compares the time taken (in minutes and sec-
onds) and the capacity estimated (in Mbps) by CapProbe,
pathchar and pathrate for diﬀerent test paths. We found
both CapProbe and pathrate to be quite accurate in most
scenarios. On the other hand, pathchar estimates were in-
correct in most scenarios, most likely due to accumulation of
errors as estimation proceeds along the path. Also, pathchar
required a large amount of time to yield capacity estimates.
In order to get a fair comparison with pathrate, we set the
probing rate (in bps) of CapProbe equal to that of pathrate
in these experiments. We found that if we did not make
the rates equal, CapProbe estimated faster than the results
shown in Table 5. We believe that by making the bandwidth
consumed by the probing streams equal, we obtained a fair
comparison between CapProbe and pathrate.
While pathrate typically required on the order of minutes
to yield its estimate, CapProbe was able to typically esti-
mate in a minute or sometimes even in a few seconds. Thus,
CapProbe proved to be similar in accuracy to pathrate, but
was typically able to achieve this in a smaller time. On the
UA path, CapProbe is sometimes inaccurate by around 20%
and pathrate by around 30%. The path to UA is a long and
extremely congested path, and as a result, obtaining samples
not aﬀected by queuing is diﬃcult. This caused CapProbe
to produce slightly inaccurate estimates in a few runs.
8. RELATED WORK
Previous work on estimating the capacity of a path has
mostly been based on using dispersions of packet pairs or
trains.
In [3], Carter proposed bprobe, in which ﬁltering
methods are applied on packet pair measurements, consist-
Table 5: Comparison of convergence time and capac-
ity (in Mbps) of CapProbe, pathrate and pathchar
CapProbe
pathrate
pathchar
UCLA-2
131.179.33.171
C
time
5.5
0’03
5.6
0’03
0’03
5.5
5.6
0’07
5.6
0’03
5.6
6’10
5.4
6’14
5.7
6’5
6’14
6.8
5.8
6’20
4.0
21’12