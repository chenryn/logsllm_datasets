# Title: Breaking and Fixing Origin-Based Access Control in Hybrid Web/Mobile Application Frameworks

## Authors:
- Martin Georgiev
- Suman Jana
- Vitaly Shmatikov

### Abstract
Hybrid mobile applications (apps) combine the features of web applications and native mobile apps. They are implemented using platform-independent languages such as HTML and JavaScript, while also having direct access to local device resources like the file system, location, camera, and contacts. These apps are typically developed using hybrid application frameworks, such as PhoneGap, which provide an embedded web browser and bridges that allow web code to access local resources.

We analyze the software stack created by hybrid frameworks and demonstrate that it does not properly integrate the access-control policies governing web code and local code. Web code is governed by the same-origin policy, whereas local code is governed by the operating system's access-control policy. The bridges added by the framework to the browser have the same local access rights as the entire application but are not correctly protected by the same-origin policy. This opens the door to "fracking" attacks, where foreign-origin web content included in a hybrid app (e.g., ads confined in iframes) can directly access device resources. Fracking vulnerabilities affect all hybrid frameworks, embedded web browsers, bridge mechanisms, and platforms on which these frameworks are deployed.

We study the prevalence of fracking vulnerabilities in free Android apps based on the PhoneGap framework. Each vulnerability exposes sensitive local resources, such as the ability to read and write contacts or local files, to potentially malicious web domains. We also analyze the defenses deployed by hybrid frameworks to prevent resource access by foreign-origin web content and explain why they are ineffective.

We then present NOFRAK, a capability-based defense against fracking attacks. NOFRAK is platform-independent, compatible with any framework and embedded browser, requires no changes to the code of existing hybrid apps, and does not break their advertising-supported business model.

## 1. Introduction
Web apps are increasingly resembling native mobile apps, and vice versa. Modern web apps often need to break out of the browser sandbox and directly access local resources like the camera, geolocation, and file system. Simultaneously, many developers prefer to write mobile apps in platform-independent languages like JavaScript. The resulting "hybrid" apps exhibit features of both web and native apps.

While web browsers are beginning to add mechanisms to expose local resources to web code, most hybrid apps are currently developed using hybrid application frameworks like PhoneGap. These frameworks provide bridges that give web code direct access to local resources, supporting the development of portable mobile apps and the conversion of existing web apps into mobile apps. Target platforms include mobile operating systems (OS) such as Android, iOS, Windows Phone, and BlackBerry, as well as desktop OSes like MacOS.

### Figure 1: Hybrid Software Stack
```
+-------------------+           +---------------------+
|                   |           |                     |
|   Hybrid App      |           |   Embedded Browser  |
|   (Web Code)      |           |   (WebView, etc.)   |
|                   |           |                     |
+---------+---------+           +-----------+---------+
          |                             |
          |                             |
+---------v---------+           +-------v-------------+
|                   |           |                     |
|  Iframe (Ad)      |           |  Hybrid Framework   |
|  (Malicious)      |           |  (Bridge Mechanism) |
|                   |           |                     |
+-------------------+           +---------------------+
          |                             |
          |                             |
+---------v---------+           +-------v-------------+
|                   |           |                     |
|  Device Resources |           |  Local Process      |
|                   |           |  (Platform-Specific)|
+-------------------+           +---------------------+
```

### Permissions
Permission to freely reproduce all or part of this paper for noncommercial purposes is granted provided that copies bear this notice and the full citation on the first page. Reproduction for commercial purposes is strictly prohibited without the prior written consent of the Internet Society, the first-named author (for reproduction of an entire paper only), and the author’s employer if the paper was prepared within the scope of employment.

NDSS '14, 23-26 February 2014, San Diego, CA, USA
Copyright 2014 Internet Society, ISBN 1-891562-35-5
http://dx.doi.org/10.14722/ndss.2014.23323

### 2. Hybrid Apps and Frameworks
Hybrid applications are a new type of software implemented in conventional web code but also include a local component intended to execute outside the web browser on a mobile device or desktop computer. These apps are usually based on hybrid frameworks, which support cross-platform, implement-once-deploy-on-any-OS app development. The framework provides the app’s local component and bridges that allow web code to escape the browser sandbox and access local resources, such as geolocation, camera, and contacts.

#### 2.1 Hybrid Application Frameworks
- **PhoneGap**: A free, open-source framework used by over 400,000 developers worldwide. It supports app development on nine mobile and desktop platforms, including Android, iOS, Windows Phone, Windows 8, MacOS, and Blackberry. PhoneGap allows fine-grained, domain-specific access control for local resources.
- **MoSync**: A free, open-source framework that provides its own implementation of PhoneGap’s JavaScript API. It supports “develop-once-deploy-everywhere” without requiring cloud build.
- **Web Marmalade**: A proprietary framework used by over 50,000 developers on Android and iOS. It provides its own implementation of PhoneGap’s JavaScript API and supports “develop-once-deploy-everywhere” via a local IDE.
- **appMobi**: A free framework acquired by Intel in February 2013. It supports “develop-once-deploy-everywhere” on eight platforms and allows local and cloud build via Intel’s XDK.
- **BlackBerry WebWorks**: An open-source hybrid app development framework for BlackBerry platforms, including BlackBerry 5.0, BlackBerry PlayBook, and BlackBerry 10. Unlike other frameworks, WebWorks was developed by a platform provider and integrated with a custom embedded web browser.

### 3. Hybrid Software Stack
The hybrid software stack created by hybrid application frameworks is shown in Figures 1 and 2. This stack is generic and essentially platform-independent, except for minor details such as the specific embedded web browser used on a given OS. The security flaws of this stack, analyzed in the rest of this paper, are not specific to a particular browser or bridge mechanism but are generic and affect all platforms, browsers, and frameworks.

### Figure 2: Components of Hybrid Frameworks
```
+-------------------+           +---------------------+
|                   |           |                     |
|   Hybrid App JS   |           |  Embedded Browser   |
|   (JS Code)       |           |  (WebView, etc.)    |
|                   |           |                     |
+---------+---------+           +-----------+---------+
          |                             |
          |                             |
+---------v---------+           +-------v-------------+
|                   |           |                     |
|  JS API Calls     |           |  Hybrid Framework   |
|                   |           |  (JS Library)       |
|                   |           |                     |
+---------+---------+           +-----------+---------+
          |                             |
          |                             |
+---------v---------+           +-------v-------------+
|                   |           |                     |
|  Bridge Mechanism |           |  Local Process      |
|                   |           |  (Platform-Specific)|
+-------------------+           +---------------------+
          |                             |
          |                             |
+---------v---------+           +-------v-------------+
|                   |           |                     |
|  Device Resources |           |  Device Resources   |
|                   |           |                     |
+-------------------+           +---------------------+
```

## 4. Our Contributions
Our contributions are as follows:

1. **Demonstration of Vulnerabilities**: We demonstrate that hybrid application frameworks do not correctly compose the same-origin policy and the local access-control policy. We term the generic class of vulnerabilities that allow untrusted web content to access local resources as "fracking." These vulnerabilities affect all hybrid frameworks, embedded web browsers, bridge mechanisms, and platforms.

2. **Analysis of Defenses**: We critically analyze the defenses deployed by hybrid frameworks against fracking attacks. We focus on PhoneGap’s origin checks, which are intended to ensure that web content from untrusted origins cannot invoke certain bridges to local resources. We show that these defenses are ineffective due to conceptual mistakes, implementation bugs, and architectural issues.

3. **Survey of Vulnerabilities**: We conduct a large-scale survey of fracking vulnerabilities, focusing on free, PhoneGap-based Android apps. We chose PhoneGap for our survey because it is the most popular hybrid framework, and Android has a significant market share.

4. **NOFRAK Defense**: We present NOFRAK, a simple capability-based defense against fracking attacks. We implemented a prototype of NOFRAK as a patch to PhoneGap on Android, but conceptually, NOFRAK is compatible with any hybrid framework, any embedded browser, and any platform. NOFRAK enforces the exact security property that hybrid frameworks promise and app developers already rely on. It requires no changes to the code of existing hybrid apps and can be deployed transparently by modifying the framework but keeping the same JavaScript API. Unlike prior defenses, NOFRAK is fine-grained and compatible with advertising-supported apps, allowing third-party content to be loaded while blocking it from accessing local resources. Access to specific resources can be granted on a domain-by-domain basis.