title:Breaking and Fixing Origin-Based Access Control in Hybrid Web/Mobile
Application Frameworks
author:Martin Georgiev and
Suman Jana and
Vitaly Shmatikov
Breaking and Fixing Origin-Based Access Control
in Hybrid Web/Mobile Application Frameworks
Martin Georgiev
Suman Jana
The University of Texas at Austin
The University of Texas at Austin
PI:EMAIL
PI:EMAIL
Vitaly Shmatikov
The University of Texas at Austin
Abstract—Hybrid mobile applications (apps) combine the
features of Web applications and “native” mobile apps. Like
Web applications, they are implemented in portable, platform-
independent languages such as HTML and JavaScript. Like
native apps, they have direct access to local device resources—ﬁle
system, location, camera, contacts, etc.
Hybrid apps are typically developed using hybrid application
frameworks such as PhoneGap. The purpose of the framework
is twofold. First,
it provides an embedded Web browser (for
example, WebView on Android) that executes the app’s Web code.
Second, it supplies “bridges” that allow Web code to escape the
browser and access local resources on the device.
We analyze the software stack created by hybrid frameworks
and demonstrate that it does not properly compose the access-
control policies governing Web code and local code, respectively.
Web code is governed by the same origin policy, whereas local
code is governed by the access-control policy of the operating
system (for example, user-granted permissions in Android). The
bridges added by the framework to the browser have the
same local access rights as the entire application, but are not
correctly protected by the same origin policy. This opens the
door to fracking attacks, which allow foreign-origin Web content
included into a hybrid app (e.g., ads conﬁned in iframes) to drill
through the layers and directly access device resources. Fracking
vulnerabilities are generic: they affect all hybrid frameworks,
all embedded Web browsers, all bridge mechanisms, and all
platforms on which these frameworks are deployed.
We study the prevalence of fracking vulnerabilities in free
Android apps based on the PhoneGap framework. Each vul-
nerability exposes sensitive local resources—the ability to read
and write contacts list, local ﬁles, etc.—to dozens of potentially
malicious Web domains. We also analyze the defenses deployed by
hybrid frameworks to prevent resource access by foreign-origin
Web content and explain why they are ineffectual.
We then present NOFRAK, a capability-based defense against
fracking attacks. NOFRAK is platform-independent, compatible
with any framework and embedded browser, requires no changes
to the code of the existing hybrid apps, and does not break their
advertising-supported business model.
I.
INTRODUCTION
Web apps are becoming more like native mobile apps, and
vice versa. When running on mobile devices, modern Web apps
often need to break out of the browser sandbox and directly
access local resources such as the camera, geolocation, ﬁle
system, etc. At the same time, many developers of mobile apps
prefer to write them in platform-independent, implement-once-
run-everywhere Web languages like JavaScript. The resulting
“hybrid” apps thus exhibit features of both Web and native
apps.
Web browsers are beginning to add mechanisms that ex-
pose local resources to Web code, but currently most hybrid
apps are developed using hybrid application frameworks such
as PhoneGap. The primary purpose of these frameworks is
to supply bridges that provide Web code with direct access to
local resources on the machine. These frameworks thus support
the development of portable mobile apps and the conversion
of existing Web apps into mobile apps. Their target platforms
include mobile-phone operating systems (OS) such as Android,
iOS, Windows Phone, and BlackBerry, as well as desktop OSes
such as MacOS.
hybrid applica6on 
(web code) 
iframe 
malicious  
adver6ser 
adver6sing 
broker 
embedded  
web browser 
hybrid  
framework  
b
r
i
d
g
e
b
r
i
d
g
e
…
device resources 
Fig. 1: Hybrid software stack
Permission to freely reproduce all or part of this paper for noncommercial
purposes is granted provided that copies bear this notice and the full citation
on the ﬁrst page. Reproduction for commercial purposes is strictly prohibited
without the prior written consent of the Internet Society, the ﬁrst-named author
(for reproduction of an entire paper only), and the author’s employer if the
paper was prepared within the scope of employment.
NDSS ’14, 23-26 February 2014, San Diego, CA, USA
Copyright 2014 Internet Society, ISBN 1-891562-35-5
http://dx.doi.org/10.14722/ndss.2014.23323
The software stack created by hybrid frameworks is
sketched in Fig. 1. A hybrid framework comprises two halves.
The local half is implemented in a platform-speciﬁc language
like Java, C#, or Objective-C. It runs as a local process in the
host machine’s OS and performs actual device access: reading
and writing the ﬁle system, working with the camera, etc. To
execute the app, the local half creates an instance of a platform-
speciﬁc embedded Web browser—for example, WebView in
Android, UIWebView in iOS, or WebBrowser in Windows
Phone—and runs the app’s code within this browser. The Web
half of the framework is a JavaScript library. The app’s code
includes this JavaScript library and uses its API to access local
resources on the device.
The access-control model of the software stack shown in
Fig. 1 is quite complex. Web content is governed by the same
origin policy, while local resource accesses are governed by
the OS’s discretionary access control policy. In contrast to
advertising-supported native apps, untrusted content in hybrid
apps is not included via a separate local library. Instead, it
is composed with the app’s own content like a Web mashup,
with different origins isolated in separate iframes, all executing
together in the same Web browser. Since the hybrid frame-
work provides Web content with the ability to access local
resources, it must correctly propagate origin information and
apply origin-based access control to resources outside the Web
browser. In particular, it must ensure that untrusted, foreign-
origin Web content included into the hybrid app (for example,
ads conﬁned in iframes) cannot access local resources that are
available to the app itself.
Our contributions. Our ﬁrst contribution is to demonstrate that
hybrid application frameworks do not correctly compose the
same origin policy and the local access-control policy. We will
use the term fracking for the generic class of vulnerabilities
that allow untrusted Web content to drill through the layers
of the stack shown in Fig. 1 and reach local resources on
the device, thus gaining the ability to steal the user’s contacts,
write into the device’s external storage, manipulate the camera,
etc. The technical details differ from framework to framework
and from bridge to bridge, but fracking vulnerabilities affect
all hybrid frameworks on all mobile and desktop platforms,
and consequently all hybrid apps based on any of these
frameworks.
Our second contribution is a critical analysis of the de-
fenses that hybrid frameworks deploy against fracking attacks.
We focus in particular on PhoneGap’s origin checks, which
are intended to ensure that Web content from untrusted origins
cannot invoke certain bridges to local resources. We demon-
strate that these defenses are ineffectual because of conceptual
mistakes,
issues in
embedded browsers that limit the visibility of the framework’s
local half into Web code inside the browser. Furthermore,
all hybrid frameworks are vulnerable to the chosen-bridge
attack. Even if the origin check for a particular kind of bridge
were implemented correctly, malicious Web content can simply
choose another, unprotected bridge and bypass the defense.
implementation bugs, and architectural
We also show that
the security properties that hybrid
frameworks aim (but fail) to enforce are inconsistent. We call
the correct property NoBridge: Web content from untrusted
origins cannot access the bridge. This is the property that
hybrid frameworks promise and that the developers of hybrid
apps expect and rely upon. Unfortunately, while promising
NoBridge to the developers, some frameworks instead enforce
a different property we call NoLoad: the hybrid app cannot
load any Web content from untrusted origins. NoLoad is much
cruder than NoBridge and breaks the business model of many
free apps because it prevents them from displaying third-party
ads or, in general, any third-party content. Furthermore, even
this property is enforced incorrectly.
Our third contribution is a large-scale survey of fracking
vulnerabilities, focusing on free, PhoneGap-based Android
apps. We chose PhoneGap for our survey because it is currently
the most popular hybrid framework and Android because its
current market share is over 80%.1
Our fourth contribution is a simple capability-based de-
fense called NOFRAK. We implemented a prototype of
NOFRAK as a patch to PhoneGap on Android, but conceptu-
ally NOFRAK is compatible with any hybrid framework, any
embedded browser, and any platform. It enforces the exact
security property that hybrid frameworks promise and app
developers already rely on. NOFRAK requires no changes to
the code of the existing hybrid apps and can be deployed
transparently, by modifying the framework but keeping the
same JavaScript API. Unlike prior defenses, NOFRAK is ﬁne-
grained and compatible with advertising-supported apps: an
app can load third-party content, but this content is blocked
from accessing local resources on the device. If necessary,
access to speciﬁc resources can be granted on a domain-by-
domain basis.
II. HYBRID APPS AND FRAMEWORKS
Hybrid applications (apps) are a new type of software that
is implemented in conventional Web code but also includes a
local component intended to execute outside the Web browser
on a mobile device or desktop computer (we will refer to the
local OS as the platform).
Hybrid apps are usually based on one of the hybrid
frameworks listed in Section II-A. The main reason for the
popularity of hybrid frameworks is the support they provide for
cross-platform, implement-once-deploy-on-any-OS app devel-
opment. Hybrid frameworks enable developers to write their
apps in portable Web languages such as HTML, JavaScript,
and CSS. The framework supplies the app’s local component
as well as the bridges (see Section IV) that allow the app’s Web
code to escape the browser sandbox and access local resources
on the machine, such as the geolocation, camera, contacts,
etc., thus relieving developers of the need to write their own
device-based code in platform-speciﬁc languages such as Java
or Objective-C.
The hybrid software stack is opaque and poorly understood
by many developers. Hybrid apps delegate security enforce-
ment—in particular, ensuring that foreign-origin Web content
included into the app cannot gain access to local resources—to
the underlying hybrid framework that creates and manages this
stack. Therefore, hybrid apps inherit all of the frameworks’
security ﬂaws and vulnerabilities.
A. Hybrid application frameworks
PhoneGap.
PhoneGap is a free, open-source framework
currently used by over 400,000 developers worldwide. It is
the most popular hybrid framework at the time of this writing.
PhoneGap supports app development on nine mobile and
1http://techcrunch.com/2013/11/12/windows-phone-android-gain-market-
share-while-apple-slips-despite-growth-in-iphone-shipments/
2
desktop platforms, including Android, iOS, Windows Phone,
Windows 8, MacOS, and Blackberry. PhoneGap development
tools were acquired by Adobe in 2011. Adobe’s cloud-based
PhoneGap Build enables “develop-once-deploy-everywhere,”
but if an app is maintained by the developer locally, a separate
project is required for each target platform.
WebWorks allows hybrid apps to access local resources
such as the camera, microphone, accelerometer, ﬁle system,
etc. Third-party extensions can expose other local functionali-
ties.3 Uniquely among hybrid frameworks, WebWorks supports
ﬁne-grained, domain-speciﬁc access control for local resources
(see Section VII-E).
By default, PhoneGap-based Android apps request from the
user and expose to the app’s Web code 16 resources, including
camera, ﬁne location, audio and video recording, reading and
writing contacts, writing external storage, etc. Individual apps
may choose not to request permissions to some or all of these
resources. Additional resources can be exposed by third-party
PhoneGap plugins.2
The latest versions of PhoneGap allow the developer
to whitelist authorized Web domains. PhoneGap then tries
to ensure that Web content from non-whitelisted domains
cannot access the local resources available to the app. In
Section VII-B, we explain why this defense is ineffectual.
MoSync. MoSync is a free, open-source framework that pro-
vides its own implementation of PhoneGap’s JavaScript API.
Therefore, hybrid apps designed to work with PhoneGap’s
API will work with MoSync. MoSync supports “develop-once-
deploy-everywhere” without requiring that the app be built in
the cloud.
By default, MoSync exposes access to Internet and ﬁle
storage, but apps can request more permissions if needed.
Unlike PhoneGap, MoSync does not appear to provide any
way for the app’s developer to specify that only certain Web
domains may access local resources.
Web Marmalade. Web Marmalade is a proprietary framework
currently used by over 50,000 developers on Android and iOS.
It provides its own implementation of PhoneGap’s JavaScript
API and supports “develop-once-deploy-everywhere” via a
local IDE, as opposed to cloud build. It does not appear to
provide any way for the app’s developer to specify that only
certain Web domains may access local resources.
appMobi. appMobi is a free framework. In February 2013,
appMobi development tools were acquired by Intel. Several
parts of the software stack were available as open source in
2011, but as of April 2013, appMobi’s git repository is empty.
appMobi supports “develop-once-deploy-everywhere” on eight
platforms and allows local and cloud build via Intel’s XDK.
appMobi provides its own implementation of PhoneGap’s
JavaScript API and uses a fork of PhoneGap on the local side.
An app can specify a domain whitelist via a JavaScript call.
BlackBerry WebWorks. WebWorks is an open-source hybrid
app development framework [4] for BlackBerry platforms,
including BlackBerry 5.0, BlackBerry PlayBook, and Black-
Berry 10. Unlike other frameworks, WebWorks was developed
by a platform provider and integrated with a custom embedded
Web browser. In contrast, other frameworks employ the plat-
form’s default embedded browser, such as WebView on An-
droid, WebBrowser on Windows Phone, etc. (see Section II-B).
Other hybrid development frameworks include RhoMobile,
AppCelerator Titanium, Appspresso, and CocoonJS.
embedded web browser 
hybrid applica5on JS code 
JS API calls 
hybrid framework  JS library 
b
r
i
d
g
e
hybrid 
framework    
b
r
i
d
g
e
device resources 
Fig. 2: Components of hybrid frameworks
B. Hybrid software stack
The software stack created by hybrid application frame-
works is shown in Figs. 1 and 2. This hybrid software stack is
generic and essentially platform-independent, except for minor
details (e.g., which embedded Web browser is used on a given
OS). The security ﬂaws of this stack, which are analyzed in the
rest of this paper, are not speciﬁc to a particular browser (e.g.,
WebView) or a particular way of constructing a bridge. These
ﬂaws are generic, too, and affect all platforms, browsers, and
frameworks.
The hybrid software stack is a recent entry into the Web