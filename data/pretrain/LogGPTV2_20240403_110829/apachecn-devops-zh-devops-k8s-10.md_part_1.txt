# 十、GCP 上的 Kubernetes
**谷歌云平台** ( **GCP** )在谷歌提供的公有云行业越来越受欢迎。GCP 有类似于 AWS 的概念，如 VPC、计算引擎、持久磁盘、负载平衡和一些托管服务。在本章中，您将通过以下主题了解 GCP 以及如何在 GCP 设置 Kubernetes:
*   了解 GCP
*   使用和理解 GCP 组件
*   使用**谷歌容器引擎** ( **GKE** )，托管的 Kubernetes 服务
# GCP 简介
GCP 于 2011 年正式启动。但不像 AWS 当初，GCP 先提供 **PaaS** ( **平台即服务**)。因此，您可以直接部署应用，而不是启动虚拟机。之后，继续增强支持各种服务的功能。
Kubernetes 用户最重要的服务是 GKE，这是一个托管的 Kubernetes 服务。因此，您可以从 Kubernetes 的安装、升级和管理中得到一些缓解。它采用现收现付的方式来使用 Kubernetes 集群。GKE 也是一个非常活跃的服务，不断及时地提供新版本的 Kubernetes，也不断地为 Kubernetes 提供新的功能和管理工具。
让我们看看 GCP 提供了什么样的基础和服务，然后探索 GKE。
# GCP 组件
GCP 提供了网络控制台和**命令行界面** ( **命令行界面**)。控制 GCP 的基础设施既简单又直接，但需要谷歌账户(如 Gmail)。一旦你有了谷歌账户，进入 GCP 注册页面([https://cloud.google.com/free/](https://cloud.google.com/free/))设置你的 GCP 账户创建。
如果想通过 CLI 进行控制，需要安装 Cloud SDK([https://cloud.google.com/sdk/gcloud/](https://cloud.google.com/sdk/gcloud/))，类似 AWS CLI，可以用来列表、创建、更新、删除 GCP 资源。安装云软件开发工具包后，您需要使用以下命令对其进行配置，以将其与 GCP 帐户相关联:
```
$ gcloud init
```
# VPC
与 AWS 相比，GCP 的 VPC 政策完全不同。首先，您不需要将 CIDR 前缀设置为 VPC，换句话说，您不能将 CIDR 设置为 VPC。相反，您只需向 VPC 添加一个或几个子网。由于子网总是伴随着某些 CIDR 区块，因此，GCP VPC 被确定为一组逻辑子网，VPC 内部的子网可以相互通信。
注意，GCP VPC 有两种模式，要么**自动**要么**自定义**。如果您选择自动，它将在每个区域上使用预定义的 CIDR 区块创建一些子网。例如，如果键入以下命令:
```
$ gcloud compute networks create my-auto-network --mode auto
```
它将创建 11 个子网，如下图所示(因为截至 2017 年 8 月，GCP 有 11 个地区):
![](img/00130.jpeg)
自动模式 VPC 可能是一个很好的开始。但是，在自动模式下，您不能指定 CIDR 前缀，来自所有地区的 11 个子网可能不适合您的使用情况。例如，如果您希望通过虚拟专用网集成到您的内部数据中心，或者希望仅从特定区域创建子网。
在这种情况下，选择自定义模式 VPC，然后您可以手动创建具有所需 CIDR 前缀的子网。键入以下命令创建自定义模式 VPC:
```
//create custom mode VPC which is named my-custom-network
$ gcloud compute networks create my-custom-network --mode custom  
```
因为自定义模式 VPC 不会创建任何子网，如下图所示，让我们将子网添加到此自定义模式 VPC:
![](img/00131.jpeg)
# 子网络
在 GCP，子网总是跨越区域内的多个区域(可用性区域)。换句话说，您不能在像 AWS 这样的单个区域上创建子网。创建子网时，您总是需要指定整个区域。
此外，没有像 AWS(路由和互联网网关或 NAT 网关的组合，以确定是公共子网还是私有子网)这样的公共子网和私有子网的重要概念。这是因为 GCP 的所有子网都有通往互联网网关的路由。
GCP 不使用子网级访问控制，而是使用**网络标签**进行主机(实例)级访问控制，确保网络安全。这将在下一节中更详细地描述。
这可能会让网络管理员感到紧张，但是，GCP 最佳实践为您带来了更加简化和可扩展的 VPC 管理，因为您可以随时添加子网来扩展整个网络块。
Technically, you can launch VM instance to set up as a NAT gateway or HTTP proxy, and then create a custom priority route for the private subnet that points to the NAT/proxy instance to achieve an AWS–like private subnet.
Please refer to the following online document for details:
[https://cloud.google.com/compute/docs/vpc/special-configurations](https://cloud.google.com/compute/docs/vpc/special-configurations)
还有一点，GCP·VPC 的一个有趣而独特的概念是，你可以在单个 VPC 中添加不同的 CIDR 前缀网络块。例如，如果您有自定义模式 VPC，则添加以下三个子网:
*   `subnet-a` ( `10.0.1.0/24`)来自`us-west1`
*   `subnet-b` ( `172.16.1.0/24`)来自`us-east1`
*   `subnet-c` ( `192.168.1.0/24`)来自`asia-northeast1`
以下命令将使用不同的 CIDR 前缀从三个不同的区域创建三个子网:
```
$ gcloud compute networks subnets create subnet-a --network=my-custom-network --range=10.0.1.0/24 --region=us-west1
$ gcloud compute networks subnets create subnet-b --network=my-custom-network --range=172.16.1.0/24 --region=us-east1
$ gcloud compute networks subnets create subnet-c --network=my-custom-network --range=192.168.1.0/24 --region=asia-northeast1  
```
结果将是下面的网络控制台。如果你熟悉 AWS VPC，你不会相信这些 CIDR 前缀组合在一个单一的 VPC！这意味着，每当您需要扩展网络时，您可以随意指定另一个 CIDR 前缀来添加到 VPC。
![](img/00132.jpeg)
# 防火墙规则
如前所述，GCP 防火墙规则对于实现网络安全非常重要。但 GCP 防火墙比 AWS **安全组** ( **SG** )更简单灵活。例如，在 AWS 中，当您启动 EC2 实例时，您必须分配至少一个与 EC2 和 SG 紧密耦合的 SG。另一方面，在 GCP，你不能直接分配任何防火墙规则。相反，防火墙规则和虚拟机实例通过**网络标签**松散耦合。因此，防火墙规则和虚拟机实例之间没有直接关联。下图是 AWS 安全组和 GCP 防火墙规则之间的比较。EC2 需要安全组，另一方面，GCP VM 实例只是设置了一个标签。这与相应的防火墙是否具有相同的标签无关。
![](img/00133.jpeg)
例如，为公共主机(使用网络标签`public`)和私有主机(使用网络标签`private`)创建防火墙规则，如下命令所示:
```
//create ssh access for public host
$ gcloud compute firewall-rules create public-ssh --network=my-custom-network --allow="tcp:22" --source-ranges="0.0.0.0/0" --target-tags="public"
//create http access (80/tcp for public host)
$ gcloud compute firewall-rules create public-http --network=my-custom-network --allow="tcp:80" --source-ranges="0.0.0.0/0" --target-tags="public"
//create ssh access for private host (allow from host which has "public" tag)
$ gcloud compute firewall-rules create private-ssh --network=my-custom-network --allow="tcp:22" --source-tags="public" --target-tags="private"
//create icmp access for internal each other (allow from host which has either "public" or "private")
$ gcloud compute firewall-rules create internal-icmp --network=my-custom-network --allow="icmp" --source-tags="public,private"
```
它创建了四个防火墙规则，如下图所示。让我们创建虚拟机实例来使用`public`或`private`网络标签，看看它是如何工作的:
![](img/00134.jpeg)
# 虚拟机实例
GCP 的虚拟机实例与 AWS EC2 非常相似。您可以从各种具有不同硬件配置的机器(实例)类型中进行选择。以及基于 Linux 或 Windows 操作系统或您定制的操作系统的操作系统映像，您可以选择。
正如在讨论防火墙规则时提到的，您可以指定零个或多个网络标签。标签不需要预先创建。这意味着您可以首先启动带有网络标签的虚拟机实例，即使没有创建防火墙规则。它仍然有效，但是在这种情况下没有应用防火墙规则。然后创建一个防火墙规则来获得一个网络标签。最终，防火墙规则将应用于虚拟机实例。这就是虚拟机实例和防火墙规则松散耦合的原因，这为用户提供了灵活性。
![](img/00135.jpeg)
在启动虚拟机实例之前，您需要首先创建一个 ssh 公钥，与 AWS EC2 相同。最简单的方法是运行以下命令来创建和注册新密钥:
```
//this command create new ssh key pair
$ gcloud compute config-ssh
//key will be stored as ~/.ssh/google_compute_engine(.pub)
$ cd ~/.ssh
$ ls -l google_compute_engine*
-rw-------  1 saito  admin  1766 Aug 23 22:58 google_compute_engine
-rw-r--r--  1 saito  admin   417 Aug 23 22:58 google_compute_engine.pub  
```
现在，让我们开始在 GCP 上启动一个虚拟机实例。
在`subnet-a`和`subnet-b`上部署两个实例作为公共实例(使用`public`网络标签)，然后在`subnet-a`上启动另一个实例作为私有实例(使用`private`网络标签):
```
//create public instance ("public" tag) on subnet-a
$ gcloud compute instances create public-on-subnet-a --machine-type=f1-micro --network=my-custom-network --subnet=subnet-a --zone=us-west1-a --tags=public
//create public instance ("public" tag) on subnet-b
$ gcloud compute instances create public-on-subnet-b --machine-type=f1-micro --network=my-custom-network --subnet=subnet-b --zone=us-east1-c --tags=public
//create private instance ("private" tag) on subnet-a with larger size (g1-small)
$ gcloud compute instances create private-on-subnet-a --machine-type=g1-small --network=my-custom-network --subnet=subnet-a --zone=us-west1-a --tags=private
//Overall, there are 3 VM instances has been created in this example as below
$ gcloud compute instances list
NAME                                           ZONE           MACHINE_TYPE  PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP      STATUS
public-on-subnet-b                             us-east1-c     f1-micro                   172.16.1.2   35.196.228.40    RUNNING
private-on-subnet-a                            us-west1-a     g1-small                   10.0.1.2     104.199.121.234  RUNNING
public-on-subnet-a                             us-west1-a     f1-micro                   10.0.1.3     35.199.171.31    RUNNING  
```
![](img/00136.jpeg)
您可以登录这些机器，检查防火墙规则是否按预期工作。首先，您需要向机器上的 ssh 代理添加一个 ssh 密钥:
```
$ ssh-add ~/.ssh/google_compute_engine
Enter passphrase for /Users/saito/.ssh/google_compute_engine: 
Identity added: /Users/saito/.ssh/google_compute_engine (/Users/saito/.ssh/google_compute_engine)  
```
然后检查 ICMP 防火墙规则是否可以拒绝来自外部的请求，因为 ICMP 只允许公共或私有的标记主机，所以它不能允许从您的机器 ping，如下图所示:
![](img/00137.jpeg)
另一方面，公共主机允许从您的机器进行 ssh，因为 public-ssh 规则允许任何(`0.0.0.0/0`)。
![](img/00138.jpeg)
当然，由于`internal-icmp`规则和`private-ssh`规则，该主机可以通过私有 IP 地址 ping 和 ssh 到`subnet-a` ( `10.0.1.2`)上的私有主机。
让我们 ssh 到一个私有主机，然后安装`tomcat8`和`tomcat8-examples`包(它将把`/examples/`应用安装到 Tomcat 上)。
![](img/00139.jpeg)
记住`subnet-a`是`10.0.1.0/24` CIDR 前缀，`subnet-b`是`172.16.1.0/24` CIDR 前缀。但是在同一个 VPC 内部，彼此之间是有联系的。这是使用 GCP 的一大好处和优势，您可以随时扩展网络地址块。
现在，将 nginx 安装到公共主机(`public-on-subnet-a`和`public-on-subnet-b`):
```
//logout from VM instance, then back to your machine
$ exit
//install nginx from your machine via ssh
$ ssh 35.196.228.40 "sudo apt-get -y install nginx"
$ ssh 35.199.171.31 "sudo apt-get -y install nginx"
//check whether firewall rule (public-http) work or not
$ curl -I http://35.196.228.40/
HTTP/1.1 200 OK
Server: nginx/1.10.3
Date: Sun, 27 Aug 2017 07:07:01 GMT
Content-Type: text/html
Content-Length: 612
Last-Modified: Fri, 25 Aug 2017 05:48:28 GMT
Connection: keep-alive
ETag: "599fba2c-264"
Accept-Ranges: bytes  
```
但是，此时，您不能在私有主机上访问 Tomcat。即使它有一个公共的 IP 地址。这是因为私有主机还没有任何允许 8080/tcp 的防火墙规则:
```
$ curl http://104.199.121.234:8080/examples/
curl: (7) Failed to connect to 104.199.121.234 port 8080: Operation timed out  
```
接下来，不仅仅是为 Tomcat 创建一个防火墙规则，还将设置一个负载平衡器，从一个负载平衡器配置 nginx 和 Tomcat 访问。
# 负载平衡
GCP 提供以下几种类型的负载平衡器:
*   第 4 层 TCP 负载平衡器
*   第 4 层 UDP 负载平衡器
*   第 7 层 HTTP(S)负载平衡器
第 4 层，TCP 和 UDP，负载平衡器类似于 AWS 经典 ELB。另一方面，第 7 层 HTTP 负载平衡器具有基于内容(上下文)的路由。例如，URL /img 将转发到实例-a，其他所有内容都将转发到实例-b。因此，它更像是一个应用层负载平衡器。
AWS also provides **Application Load Balancer** (**ALB** or **ELBv2**), which is quite similar to GCP Layer 7 HTTP(S) LoadBalancer. For details, please visit [https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/](https://aws.amazon.com/blogs/aws/new-aws-application-load-balancer/).