注18： 并不是所有资源都支持每种方法的。比如，CGI脚本查询可能就不支持文件PUT，而静态的HTML
文件则不接受POST方法。
代 理 ｜ 167
• Web Caching（《Web缓存》19）
160 Duane Wessels著，O’Reilly & Associates公司出版。
注19： 影印版由清华大学出版社出版。（编者注）
168 ｜ 第6章
第7章
缓 存
169
Web缓存是可以自动保存常见文档副本的HTTP设备。当Web请求抵达缓存时，
如果本地有“已缓存的”副本，就可以从本地存储设备而不是原始服务器中提取这
个文档。使用缓存有下列优点。
• 缓存减少了冗余的数据传输，节省了你的网络费用。
• 缓存缓解了网络瓶颈的问题。不需要更多的带宽就能够更快地加载页面。
• 缓存降低了对原始服务器的要求。服务器可以更快地响应，避免过载的出现。
• 缓存降低了距离时延，因为从较远的地方加载页面会更慢一些。
本章解释了缓存是怎样提高性能降低费用的、如何去衡量其有效性以及将缓存置于
何处可以发挥它的最大作用。我们还会解释HTTP如何保持已缓存副本的新鲜度，
缓存如何与其他缓存和服务器通信等问题。
7.1 冗余的数据传输
有很多客户端访问一个流行的原始服务器页面时，服务器会多次传输同一份文档，
每次传送给一个客户端。一些相同的字节会在网络中一遍遍地传输。这些冗余的数
据传输会耗尽昂贵的网络带宽，降低传输速度，加重Web服务器的负载。有了缓
存，就可以保留第一条服务器响应的副本，后继请求就可以由缓存的副本来应对了，
这样可以减少那些流入/流出原始服务器的、被浪费掉了的重复流量。
7.2 带宽瓶颈
缓存还可以缓解网络的瓶颈问题。很多网络为本地网络客户端提供的带宽比为远程
服务器提供的带宽要宽（参见图7-1）。客户端会以路径上最慢的网速访问服务器。
如果客户端从一个快速局域网的缓存中得到了一份副本，那么缓存就可以提高性
161 能——尤其是要传输比较大的文件时。
在图7-1中，Joe的五金商店旧金山分店的用户通过1.4Mbit/s的T1因特网连接，从亚
特兰大总店下载一个5MB的库存文件要花30秒的时间。如果在旧金山分店里缓存了这
个文档，本地用户通过以太网连接只要花费不到1秒的时间就可以获得同一份文档了。
表7-1说明了在几种不同的网速下，传输几种不同大小的文档时，带宽会对传输速
度产生什么样的影响。带宽会给较大的文档带来显而易见的时延，不同类型网络的
速度差异会非常明显。1一个54kbit/s的Modem传输一个5MB的文件需要749秒
（超过12分钟），而在快速以太网LAN中，只要不到一秒的时间。
注1： 这张表只列出了网络带宽对传输时间的影响。它假定网络效率为100%，而且不存在网络或应用程序
的处理时延。通过这种方式给出的时延是下限值。实际的时延要大一些，而小型对象的时延则主要是
由非带宽开销造成的。
170 ｜ 第7章
旧金山分店办公室
客户端 缓存
到缓存的快速连接 到服务器的慢速WAN
（100Mbit/s以太网） 连接（1.4Mbit/s的T1）
亚特兰大总店
服务器
图7-1 缓存可以改善由有限广域带宽造成的网络瓶颈
表7-1 带宽造成的传输时延，理想化情况（以秒为时间单位）
大型HTML JPEG 大型JPEG 大型文件
（15KB） （40KB） （150KB） （5MB）
拨号modem（56kbit/s） 2.19 5.85 21.94 748.98
DSL（256Kbit/s） 0.48 1.28 4.80 163.84
T1（1.4Mbit/s） 0.09 0.23 0.85 29.13
慢速以太网（10Mbit/s） 0.01 0.03 0.12 4.19
DS3（45Mbit/s） 0.00 0.01 0.03 0.93
快速以太网（100Mbit/s） 0.00 0.00 0.01 0.42 162
7.3 瞬间拥塞
缓存在破坏瞬间拥塞（Flash Crowds）时显得非常重要。突发事件（比如爆炸性新
闻、批量E-mail公告，或者某个名人事件）使很多人几乎同时去访问一个Web文
档时，就会出现瞬间拥塞（参见图7-2）。由此造成的过多流量峰值可能会使网络和
Web服务器产生灾难性的崩溃。
1998年9月11日，详细描述Kenneth Starr对美国总统克林顿调查情况的“Starr报
告”发布到因特网上去的时候，美国众议院的Web服务器每小时收到了超过三百万
次的请求，是其平均服务器负荷的50倍。据报道，新闻站点CNN.com的服务器每
秒钟平均会收到超过50 000次的请求。
缓 存 ｜ 171
芝加哥
旧金山
波士顿
洛杉矶
瞬间拥塞
亚特兰大
图7-2 瞬间拥塞会使Web服务器过载
7.4 距离时延
即使带宽不是问题，距离也可能成为问题。每台网络路由器都会增加因特网流量的
时延。即使客户端和服务器之间没有太多的路由器，光速自身也会造成显著的时延。
波士顿到旧金山的直线距离大约有 2700 英里。在最好的情况下，以光速传输
（186 000英里/秒）的信号可以在大约15毫秒内从波士顿传送到旧金山，并在30
163 毫秒内完成一个往返。2
假设某个Web页面中包含了20个小图片，都在旧金山的一台服务器上。如果波士
顿的一个客户端打开了4条到服务器的并行连接，而且保持着连接的活跃状态，光
速自身就要耗费大约1/4秒（240毫秒）的下载时间（参见图7-3）。如果服务器位
于（距离旧金山6700英里的）东京，时延就会变成600毫秒。中等复杂的Web页
面会带来几秒钟的光速时延。
将缓存放在附近的机房里可以将文件传输距离从数千英里缩短为数十米。
注2： 在实际应用中，信号的传输速度会比光速低一些，因此，距离时延会更加严重。
172 ｜ 第7章
连接1 连接2 连接3 连接4
连接请
求 客户端在波士顿， 30毫秒
OK 服务器在旧金山
GET Web页 面 光速 30毫秒的往返时间 30毫秒
Web页 面
GET图片1 连接请求 连接请求 连接请求
30毫秒 30毫秒 30毫秒 30毫秒
图片1 OK OK OK
GET图片2 GET图片3 GET图片4 GET图片5
30毫秒 30毫秒 30毫秒 30毫秒
图片2 图片3 图片4 图片5 光速时延
240
GET图片6 GET图片7 GET图片8 GET图片9
毫秒 30毫秒 30毫秒 30毫秒 30毫秒
图片6 图片7 图片8 图片9
GET图片10 GET图片11 GET图片12 GET图片13
30毫秒 30毫秒 30毫秒 30毫秒
图片1 0 图片11 图片12 图片1 3
GET图片14 GET图片15 GET图片16 GET图片17
30毫秒 30毫秒 30毫秒 30毫秒
图片14 图片15 图片16 图片17
GET图片18 GET图片19 GET图片20 GET图片21
30毫秒 30毫秒 30毫秒 30毫秒
图片18 图片19 图片20 图片2 1
图7-3 即便使用的是并行的持久连接，光速也会造成显著的时延
7.5 命中和未命中的
这样看来缓存是有所帮助的。但缓存无法保存世界上每份文档的副本。3 164
可以用已有的副本为某些到达缓存的请求提供服务。这被称为缓存命中（cache
hit），参见图7-4a。其他一些到达缓存的请求可能会由于没有副本可用，而被转发
给原始服务器。这被称为缓存未命中（cache miss），参见图7-4b。
7.5.1 再验证
原始服务器的内容可能会发生变化，缓存要不时对其进行检测，看看它们保存的
副本是否仍是服务器上最新的副本。这些“新鲜度检测”被称为HTTP 再验证
（revalidation）（参见图7-4c）。为了有效地进行再验证，HTTP定义了一些特殊的请
求，不用从服务器上获取整个对象，就可以快速检测出内容是否是最新的。
注3： 几乎没人能够买得起一个大得足以装下Web上所有文档的缓存。即便可以买得起巨大的“整个Web
的缓存”，有些文档也经常会发生变化，很多缓存中的内容都不是最新的。这样的话，在很多缓存中都
无法对其进行及时的更新。
缓 存 ｜ 173
（a）缓存命中
缓存
对象
客户端 缓存 服务器
（b）缓存未命中
服务 服务
器对象 器对象
客户端 缓存 服务器
（c）缓存再验证命中
新鲜度检测
缓存
对象 “仍然是新鲜的”
客户端 缓存 服务器
图7-4 缓存命中、未命中以及再验证
缓存可以在任意时刻，以任意的频率对副本进行再验证。但由于缓存中通常会包含
数百万的文档，而且网络带宽是很珍贵的，所以大部分缓存只有在客户端发起请
求，并且副本旧得足以需要检测的时候，才会对副本进行再验证。本章稍后会解释
HTTP的新鲜度检测规则。
缓存对缓存的副本进行再验证时，会向原始服务器发送一个小的再验证请求。如果
内容没有变化，服务器会以一个小的304 Not Modified进行响应。只要缓存知道副
本仍然有效，就会再次将副本标识为暂时新鲜的，并将副本提供给客户端（参见图
7-5a）这被称作再验证命中（revalidate hit）或缓慢命中（slow hit）。这种方式确实
要与原始服务器进行核对，所以会比单纯的缓存命中要慢，但它没有从服务器中获
165 取对象数据，所以要比缓存未命中快一些。
HTTP为我们提供了几个用来对已缓存对象进行再验证的工具，但最常用的是If-
Modified-Since首部。将这个首部添加到GET请求中去，就可以告诉服务器，只
有在缓存了对象的副本之后，又对其进行了修改的情况下，才发送此对象。
这里列出了在3种情况下（服务器内容未被修改，服务器内容已被修改，或者服务
器上的对象被删除了）服务器收到GET If-Modified-Since请求时会发生的情况：
• 再验证命中
如果服务器对象未被修改，服务器会向客户端发送一个小的 HTTP 304 Not
Modified响应。图7-6对此进行了描述。
174 ｜ 第7章
（a）再验证命中（缓慢命中）
新鲜度检测
缓存
对象 “仍然新鲜”
客户端 缓存 服务器
服务器对象与已缓存副本一样
（b）再验证未命中
新鲜度检测
服务 服务
器对象 器对象
客户端 缓存 服务器
已缓存副本过时了
图7-5 成功的再验证比缓存未命中要快，失败的再验证几乎和未命中的速度一样
带有If-Modified-Since首部的再验证请求
GET /announce.html HTTP/1.0
If-Modified-Since: Sat, 29 Jun 2002, 14:30:00 GMT
服务器
缓存（浏览器缓
HTTP/1.0 304 Not Modified
存或代理缓存）
Date: Wed, 03 Jul 2002, 19:18:23 GMT
Content-type: text/plain
Content-length: 67
Expires: Fri, 05 Jul 2002, 05:00:00 GMT
“仍然新鲜”响应
图7-6 HTTP使用If-Modified-Since首部进行再验证
• 再验证未命中
如果服务器对象与已缓存副本不同，服务器向客户端发送一条普通的、带有完整
内容的HTTP 200 OK响应。 166
• 对象被删除
如果服务器对象已经被删除了，服务器就回送一个404 Not Found响应，缓存也
会将其副本删除。
7.5.2 命中率
由缓存提供服务的请求所占的比例被称为缓存命中率（cache hit rate，或称为缓存
缓 存 ｜ 175
命中比例），4有时也被称为文档命中率（document hit rate）。命中率在0到1之间，
但通常是用百分数来描述的，0%表示每次请求都未命中（要通过网络来获取文
档），100%表示每次请求都命中了（在缓存中有一份副本）。5
缓存的管理者希望缓存命中率接近100%。而实际得到的命中率则与缓存的大小、
缓存用户兴趣点的相似性、缓存数据的变化或个性化频率，以及如何配置缓存有关。