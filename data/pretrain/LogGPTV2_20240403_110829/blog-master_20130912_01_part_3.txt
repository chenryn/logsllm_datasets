       ->subfield expressions may be appended to dereference more levels.   NOTE: the same dereferencing  operator  ->  
       is  used to refer to both direct containment or pointer indirection.  Systemtap automatically determines which.  
       The optional module tells the translator where to look for information about that type.  Multiple  modules  may  
       be  specified as a list with : separators.  If the module is not specified, it will default either to the probe  
       module for dwarf probes, or to "kernel" for functions and all other probes types.  
       The translator can create its own module with type information from a header surrounded by angle  brackets,  in  
       case  normal  debuginfo  is  not available.  For kernel headers, prefix it with "kernel" to use the appropriate  
       build system.  All other headers are build with default GCC parameters into a user  module.   Multiple  headers  
       may be specified in sequence to resolve a codependency.  
              @cast(tv, "timeval", "")->tv_sec  
              @cast(task, "task_struct", "kernel")->tgid  
              @cast(task, "task_struct",  
                    "kernel")->fs->umask  
       Values acquired by @cast may be pretty-printed by the  $ " and " $$ suffix operators, the same way as described  
       in the CONTEXT VARIABLES section of the stapprobes(3stap) manual page.  
       When in guru mode, the translator will also allow scripts to assign new values to members of typecasted  point-  
       ers.  
       Typecasting is also useful in the case of void* members whose type may be determinable at runtime.  
              probe foo {  
                if ($var->type == 1) {  
                  value = @cast($var->data, "type1")->bar  
                } else {  
                  value = @cast($var->data, "type2")->baz  
                }  
                print(value)  
              }  
```  
3\. man stapprobes  
```  
   CONTEXT VARIABLES  
       Many of the source-level context variables, such as function parameters, locals, globals visible in the  compi-  
       lation  unit, may be visible to probe handlers.  They may refer to these variables by prefixing their name with  
       "$" within the scripts.  In addition, a special syntax allows limited traversal of  structures,  pointers,  and  
       arrays.  More syntax allows pretty-printing of individual variables or their groups.  See also @cast.  
       $var   refers to an in-scope variable "var".  If it’s an integer-like type, it will be cast to a 64-bit int for  
              systemtap script use.  String-like pointers (char *) may be copied to systemtap string values using  the  
              kernel_string or user_string functions.  
       @var("varname")  
              an alternative syntax for $varname  
       @var("varname@src/file.c")  
              refers  to  the global (either file local or external) variable varname defined when the file src/file.c  
              was compiled. The CU in which the variable is resolved is the first CU in the module of the probe  point  
              which  matches  the  given  file  name  at  the  end  and  has  the  shortest file name path (e.g. given  
              @var("foo@bar/baz.c") and CUs with file name paths src/sub/module/bar/baz.c and src/bar/baz.c the second  
              CU will be chosen to resolve the (file) global variable foo  
       $var->field traversal via a structure’s or a pointer’s field.  This  
              generalized  indirection  operator  may be repeated to follow more levels.  Note that the .  operator is  
              not used for plain structure members, only -> for both purposes.  (This is because "." is  reserved  for  
              string concatenation.)  
       $return  
              is available in return probes only for functions that are declared with a return value.  
       $var[N]  
              indexes into an array.  The index given with a literal number or even an arbitrary numeric expression.  
       A number of operators exist for such basic context variable expressions:  
       $$vars expands to a character string that is equivalent to  
              sprintf("parm1=%x ... parmN=%x var1=%x ... varN=%x",  
                      parm1, ..., parmN, var1, ..., varN)  
       for  each  variable  in scope at the probe point.  Some values may be printed as =?  if their run-time location  
       cannot be found.  
       $$locals  
              expands to a subset of $$vars for only local variables.  
       $$parms  
              expands to a subset of $$vars for only function parameters.  
       $$return  
              is available in return probes only.  It expands to a string that is equivalent  to  sprintf("return=%x",  
              $return) if the probed function has a return value, or else an empty string.  
       & $EXPR  
              expands to the address of the given context variable expression, if it is addressable.  
       @defined($EXPR)  
              expands  to 1 or 0 iff the given context variable expression is resolvable, for use in conditionals such  
              as  
              @defined($foo->bar) ? $foo->bar : 0  
       $EXPR$ expands to a string with all of $EXPR’s members, equivalent to  
              sprintf("{.a=%i, .b=%u, .c={...}, .d=[...]}",  
                       $EXPR->a, $EXPR->b)  
       $EXPR$$  
              expands to a string with all of $var’s members and submembers, equivalent to  
              sprintf("{.a=%i, .b=%u, .c={.x=%p, .y=%c}, .d=[%i, ...]}",  
                      $EXPR->a, $EXPR->b, $EXPR->c->x, $EXPR->c->y, $EXPR->d[0])  
       For ".return" probes, context variables other than the "$return" value itself are only available for the  func-  
       tion call parameters.  The expressions evaluate to the entry-time values of those variables, since that is when  
       a snapshot is taken.  Other local variables are not generally accessible, since by the time a  ".return"  probe  
       hits, the probed function will have already returned.  
       Arbitrary  entry-time  expressions can also be saved for ".return" probes using the @entry(expr) operator.  For  
       example, one can compute the elapsed time of a function:  
              probe kernel.function("do_filp_open").return {  
                  println( get_timeofday_us() - @entry(get_timeofday_us()) )  
              }  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")