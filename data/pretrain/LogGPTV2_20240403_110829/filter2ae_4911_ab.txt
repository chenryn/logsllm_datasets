  * I_NetServerAuthenticate2
  * I_NetServerReqChallenge
  * I_NetServerTrustPasswordsGet
通过在网上搜索，我找到了下面[这篇文章](https://sudonull.com/post/27330-Getting-around-Windows-Defender-cheaply-and-cheerfully-obfuscating-Mimikatz-THunter-Blog)，它解释了如何用不同的结构建立一个新的 `netapi32.min.lib`。正如文章中所说，我们可以通过创建一个内容如下的 `.def`
文件来建立一个自定义的 `netapi32.min.lib`。
    LIBRARY netapi32.dll
    EXPORTS
      I_NetServerAuthenticate2 @ 59
      I_NetServerReqChallenge @ 65
      I_NetServerTrustPasswordsGet @ 62
之后，我们在 Visual Studio 开发者控制台中通过以下命令来构建 `netapi32.min.lib` 文件。
    lib /DEF:netapi32.def /OUT:netapi32.min.lib
我们将这个新文件嵌入到 `lib\x64\` 目录中，然后重新编译。再次运行 DefenderCheck，将无法检测到任何内容：
这意味着我们已经绕过了 Windows Defender 的 "实时保护 "功能。但如果我们启用云保护并将文件复制到另一个位置，它又无了。
### 0x04 替换更多的字符串
这里还有很多需要更换的字符。一开始，我们只是更换了明显的字符串。但在 Mimikatz 菜单中包含了每个功能函数的描述，例如 `privilege`
函数有如下描述：
所有的描述都需要进行删除或替换。我们可以将它们添加到上面提到的 bash 脚本中，以便一次性全部替换。可以全部替换，也可以保留一些无关紧要的特色，比如
`answer` 和 `ocffee`
许多 AV 产品都会标记二进制文件中与功能相关的加载 DLL 文件的区域。Mimikatz 从 `.DLL` 文件中加载了很多功能。为了找到
Mimikatz 源代码中所有相关的 DLL 文件，我们打开 Visual Studio，然后使用 `STRG + SHIFT + F`
组合键，这将打开整个项目的搜索。搜索 `.dll` 会给我们提供项目中使用的所有 DLL 文件名。我们还将在我们的 bash 脚本中使用不同的大小写来替换
DLL 名称。
`sekurlsa` 的子函数 `logonpasswords` 是最常用的函数，它几乎可以转存机器上所有的证书，因此，该函数也是 AV
的重点照顾对象。可以来看看
[kuhl_m_sekurlsa.c](https://github.com/gentilkiwi/mimikatz/blob/master/mimikatz/modules/sekurlsa/kuhl_m_sekurlsa.c)
，看看 `kprintf()` 中都有哪些可能被标记的字符串。我们一直在寻找误报率低的字符串，因为 AV
也不想意外地将其他二进制进行标记。我们最终会得到这样的字符串：
  * Switch to MINIDUMP, Switch to PROCESS
  * UndefinedLogonType, NetworkCleartext, NewCredentials, RemoteInteractive, CachedInteractive, CachedRemoteInteractive, CachedUnlock
  * DPAPI_SYSTEM, replacing NTLM/RC4 key in a session, Token Impersonation , UsernameForPacked, LSA Isolated Data
如果我们看一下默认的函数 [standard
kuhl_m_standard.c](https://github.com/gentilkiwi/mimikatz/blob/master/mimikatz/modules/kuhl_m_standard.c)，应该还有其他可能被标记的字符串。
  * isBase64InterceptInput, isBase64InterceptOutput
  * Credential Guard may be running, SecureKernel is running
这种方法也适用于其他的源代码文件，但篇幅的原因，就不多介绍了。总之，你替换的字符串越多，检测率就越低。
### 0x05 文件夹及文件结构
我还看了一下整个 Mimikatz 项目的结构，看看有哪些字符串是反反复复出现的。这个过程，有一点引起了我的注意：所有的变量名和函数名的头部都是以
`kuhl_` 和 `KULL_` 起头。如下图所示：
我们也可以通过以下方式进行替换：
很容易就能完全替换掉所有这些出现的地方。这可能也会大大改变生成文件的签名。所以我们也在脚本中加入以下几行。
    kuhl=$(cat /dev/urandom | tr -dc "a-z" | fold -w 4 | head -n 1)
    find windows/ -type f -print0 | xargs -0 sed -i "s/kuhl/$kuhl/g"
    kull=$(cat /dev/urandom | tr -dc "a-z" | fold -w 4 | head -n 1)
    find windows/ -type f -print0 | xargs -0 sed -i "s/kull/$kull/g"
    find windows/ -type f -name "*kuhl*" | while read FILE ; do
        newfile="$(echo ${FILE} |sed -e "s/kuhl/$kuhl/g")";
        mv "${FILE}" "${newfile}";
    done
    find windows/ -type f -name "*kull*" | while read FILE ; do
        newfile="$(echo ${FILE} |sed -e "s/kull/$kull/g")";
        mv "${FILE}" "${newfile}";
    done
    under=$(cat /dev/urandom | tr -dc "a-z" | fold -w 4 | head -n 1)
    find windows/ -type f -print0 | xargs -0 sed -i "s/_m_/$under/g"
    find windows/ -type f -name "*_m_*" | while read FILE ; do
        newfile="$(echo ${FILE} |sed -e "s/_m_/$under/g")";
        mv "${FILE}" "${newfile}";
    done
将上面提到的所有字符串添加到我们的 bash
脚本中，此时的脚本是长[这样](https://gist.github.com/S3cur3Th1sSh1t/cb040a750f5984c41c8f979040ed112a)的。
执行 bash 脚本，编译并上传到 Virustotal，结果如下:
在原有的基础上替换更多的字符串，看起来并没有能够很好的绕过 AV。但是在编写本文时，这个二进制文件足以绕过 Defender 的云保护。
### 0x06 还有更多要做的事情
如果还想更进一步，试图获得 FUD，其实可以做得更多。比如可以替换 fuction 名称，而不是使用大小写混淆；也可以通过所有的其他的 C
源码文件和库文件来搜索可能被标记的特征等，并将其进行替换或者删除不需要的函数。
再比如，Mimikatz 输出的错误信息也有可能是特征之一，如果我们并不需要它详细的错误信息，那么可以直接删除它们。可以使用 `STRG + SHIFT +
H` 组合键，搜索并替换整个项目中的字符串。例如以下操作：
大部分 AV/EDR 厂商也使用了关于 API 导入的检测方法。关于混淆 C/C++ 源码以隐藏 API 导入，Plowsec
有两篇非常好的文章。它们分别是 [Engineering antivirus
evasion](https://blog.scrt.ch/2020/06/19/engineering-antivirus-evasion/) 和
[Engineering antivirus evasion (Part
II)](https://blog.scrt.ch/2020/07/15/engineering-antivirus-evasion-part-ii/)。
在 Mimikatz 中，使用了很多 Windows API，为了能够更好的隐藏 API，可以借鉴以下的例子。例如要隐藏
LSAOpenSecret，在Mimikatz 中可以使用以下代码：
    typedef NTSTATUS(__stdcall* _LsaOSecret)(
        __in LSA_HANDLE PolicyHandle,
        __in PLSA_UNICODE_STRING SecretName,
        __in ACCESS_MASK DesiredAccess,
        __out PLSA_HANDLE SecretHandle
        );
    char hid_LsaLIB_02zmeaakLCHt[] = { 'a','d','v','a','p','i','3','2','.','D','L','L',0 };
    char hid_LsaOSecr_BZxlW5ZBUAAe[] = { 'L','s','a','O','p','e','n','S','e','c','e','t',0 };
    HANDLE hhid_LsaLIB_asdasdasd = LoadLibrary(hid_LsaLIB_02zmeaakLCHt);
    _LsaOSecret ffLsaOSecret = (_LsaOSecret)GetProcAddress(hhid_LsaLIB_asdasdasd, hid_LsaOSecr_BZxlW5ZBUAAe);
通过隐藏
`SamEnumerateUserDomain`、`SamOpenUser`、`LsaSetSecret`、`I_NetServerTrustPasswordsGet`
等 API，结合上面的技术，应该可以通过修改源代码来进行 FUD。
但源码修改只是达到目标的一种方式。通过对 Phras 的文章 [Designing and Implementing PEzor, an Open-Source PE Packer](https://iwantmore.pizza/posts/PEzor.html)
的学习，发现还有很多的方法可以实现，比如 Syscall 内联 Shellcode 注入，移除用户级别的 Hook ，生成具有多态性的可执行文件等等。
### 0x07 结论
我们通过字符串替换方法以及其他技术来构建一个自定义的 Mimikatz 二进制。我们发现，在替换了最常用的字符串后进行检测，检测率降低到 1/3
左右，但可以通过添加其他更多的字符串来降低检测率。其他技术，比如 API Import 隐藏之类的也会进一步降低检测率。
顺便说一下，使用本文中的 bash 脚本处理过的Mimikatz 二进制文件，是不会触发 AMSI 的，因此如果仅为了绕过
AMSI，则可以直接使用该脚本生成 Base64 编码的 Mimikatz，以便集成到别的工具，例如：`Invoke-ReflectivePEINjection` 及 subTee 的[C＃PE-Loader](https://github.com/S3cur3Th1sSh1t/Creds/blob/master/Csharp/PEloader.cs)。
我希望本文能够为需要定制 Mimikatz 的人有一些启发。