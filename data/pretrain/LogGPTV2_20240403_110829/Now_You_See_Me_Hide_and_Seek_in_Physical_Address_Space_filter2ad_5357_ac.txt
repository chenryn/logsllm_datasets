yes
no
yes
yes
no
no
no
no
yes
no
The north bridge then forwards the request either to the I/O hub
or the DRAM controller base on the ranges deﬁned by DRAM
Base/Limit and MMIO Base/Limit registers. Therefore, HIveS can
set the IOMMU to only allow a peripheral device to perform DMA
into assigned regions, thus preventing a full system memory acqui-
sition with DMA. When the IOMMU is not available on some old
systems, the DMA can also be redirected by manipulating the north
bridge using MMIO Base/Limit registers. The main idea is to mod-
ify the MMIO Base/Limit registers to bounce DMA reads back to
the I/O hub. The details can be found in [30].
4.2 Hiding from Cold Boot
There are two solutions to evade Cold Boot based memory ac-
quisition mechanisms: RAM-less encryption and Cache based I/O
storage.
RAM-less encryption. The basic idea is that attacker encrypts
all the memory contents in the HIveS memory with a secret key
stored in CPU registers [24, 33]. Since operating systems do not
use all the MTRR and IORR register pairs all the time, HIveS can
encrypt the HIveS memory using AES and store the encryption key
in unused MTRR or IORR registers. Thus, even if the physical
memory is completely acquired through Cold Boot, the contents of
HIveS are still being protected, because the encryption key in the
CPU registers is lost forever due to the system reset.
Cache based I/O storage. The idea is to save a small HIveS
memory only in the CPU cache [22, 26, 17] and then mask it with
I/O Shadowing technique. When the memory address is set to
cacheable in the page table entry and both RdMem and WrMem
bits in the IORR base register are set to 1, any write to that lo-
cation will trigger a cache line ﬁll if the memory contents are not
yet loaded in the cache. When the HIveS system is unlocked, the
attacker can simply write data into memory as usual. When the
HIveS system is locked, the HIveS memory is cached and masked
by I/O shadowing. Therefore, neither I/O devices nor the processor
can read out the HIveS memory in the cache via DMA. However,
it remains a challenge to maintain the contents in the cache consid-
ering the limited cache control provided by the x86 architecture [2,
3].
5.
IMPLEMENTATION AND EVALUATION
We build a prototype of HIveS on an x86 desktop with AMD
FX processor. The motherboard is ASUS M4 A96 R2.0, running
a AMD FX-8320 8-core processor with single bank DDR3 4GB
memory. The 4GB memory is relatively small but it shortens the
time for memory acquisition and it is large enough to demonstrate
all the functionality of HIveS.
To illustrate the effectiveness of the HIveS memory, we imple-
ment a keylogger rootkit called HIL that uses HIveS memory to
store the keystrokes so that the stolen information cannot be de-
tected by memory forensics. We implement HIL prototypes on both
Windows and Linux. On Ubuntu 13.04, we implement a Linux ker-
nel module to support all the techniques in HIveS. On 64-bit Win-
dows 7, we implement a kernel mode device driver as a keylogger
and use WinDbg debugger to conﬁgure the IORR pair.
We implement I/O shadowing, Blackbox Write, and TLB Cam-
ouﬂage techniques and evaluate their effectiveness using a number
of most updated software based memory forensic tools. We also
implement RAM-less encryption and cache based I/O Storage tech-
niques to demonstrate the capability of HIveS to evade Cold Boot
based physical memory forensics.
5.1
I/O Shadowing
Since modiﬁcation of MSR require privilege mode, we imple-
mented most of the functionalities in a kernel module. User space
programs can communicate with the kernel module through procfs
export. For I/O shadowing, the kernel module is responsible for
manipulating the IORR register to set the base and the size of the
HIveS memory, as well as the WrMem and RdMem ﬂag bits. With
the physical address and HIveS running mode passed in through
procfs, the module ﬁrst masks off the lower 12 bit of the physical
address, and inserts it into bits 12 to 47 in I/O Range Base register,
MSRC001_0016, since the physical addressing in AMD x64 is 47
bit. The bits 3 and 4 of the register are RdMem bit and WrMem bit
respectively. For I/O Shadowing, we clear both bit 3 and bit 4 to
redirect both read and write requests into the I/O space.
The IORR base register should always be written ﬁrst, since the
IORR mask register, MSRC001_0017, contains a valid bit, which
will immediately enable the IORR pair once this bit is set. There-
fore, we cannot set the two IORR registers in reverse order; oth-
erwise, the system will fail and hang itself. In the AMD FX sys-
tem [2], the valid bit is bit 11 of the IORR mask register.
Although the detailed HIveS implementation is different on Linux
and Windows, the workﬂow remains the same. We ﬁrst load HIveS
as a kernel module in the system. An 1MB area at physical address
offset of 0x10c800000 is allocated to be the HIveS memory. With
RdMem and WrMem both set, we ﬁll the memory with repeating
pattern of 0x12345678. Once the pattern is written, we ﬂush the
cache to make sure that these patterns are written into the mem-
ory. Then we enable I/O shadowing to lock the HIveS memory by
clearing both the WrMem and RdMem bits. At this point, all the
contents in the HIveS memory should be protected against memory
forensic tools.
We verify that none of the software based memory forensic tools
that we tested is able to capture the HIveS memory protected by
the I/O shadowing technique. Table 2 summarizes the tools that we
use in our experiments. Tools such as the Linux base memory ac-
quisition tool LiME [36] obtain the physical memory layout of the
system by parsing kernel data structure. For each valid memory re-
Table 2: Veriﬁcation against memory forensic tools
Tool
UnitTest
LiME
MemDump
DD
WinPmem
Mem Marshall
Memoryze
Dumpit
Tool Version OS
1.0
1.1
1.01
8.13
2.3.1
1.0
3.0
1.3.2
Examine IORR With HIveS Without HIveS
No
Linux
No
Linux
No
Linux
No
Linux
Windows No
Windows No
Windows No
Windows No
No Detection
No Detection
No Detection
No Detection
No Detection
No Detection
No Detection
No Detection
Identiﬁed
Identiﬁed
Identiﬁed
Identiﬁed
Identiﬁed
Identiﬁed
Identiﬁed
Identiﬁed
gion, it calls kmap function to map virtual pages to physical pages
to read the content.
Table 2 shows that none of these memory forensic tools can de-
tect the HIveS memory through searching the special repeating pat-
tern 0x12345678 when the I/O shadowing is enabled. However,
when the memory dumps are taken again after the I/O shadowing
is disabled, we can identify the repeating pattern in the memory
dumps. None of the tools can detect HIveS, since all the processor
memory accesses can be manipulated by the IORR registers and all
the software based tools utilize processor to access memory.
5.2 Blackbox Write and TLB Camouﬂage
Blackbox Write only provides write access to the HIveS memory
and prevents any read access. We implement it by clearing the Rd-
Mem bit and setting the WrMem bit. To disable Blackbox Write,
we simply clear the valid bit of the IORR pair. To verify its effec-
tiveness, we set up the keylogger to work in the Blackbox Write
mode. Instead of ﬁlling the HIveS memory with repeating pattern
0x12345678. We run the keylogger, and manually type in "this is a
HIveS blackbox write test!". When Blackbox Write is enabled, we
dump the memory using the memory acquisition tools, including
LiME, MemDump, and WinPmem, to capture the entire physical
memory images. And we verify that the sentence we typed was not
found in the acquired memory image. Immediately after the ﬁrst
round of memory dump, we disable Blackbox Write to allow both
read and write access to the HIveS memory and perform memory
dumping again. This time, we were able to ﬁnd the logs of what we
just typed.
TLB camouﬂage protects the HIveS memory by only allowing
read and write access to a single processor core. After pausing
all other cores, we ﬂush the TLBs of all cores. Next, we disable
all interrupts on the malicious core and then read the contents of
the HIveS memory into a temporary memory space. The kernel
module then goes in a busy loop accessing the memory location
continuously to sustain the TLB entry in the malicious core’s TLB.
We conﬁrm that only a single processor core can access the HIveS
memory by dumping the memory images using different processor
cores and searching the coded repeating pattern.
5.3 RAM-less Encryption
For RAM-less encryption, we use a secret key to XOR the plain-
text instead of using the AES function, since the feasibility of RAM-
less encryption has already been veriﬁed [24, 33] and our focus is
on testing the stability of the MSRs for storing the secret key. In
particular, we use the unused MTRR registers and IORR registers,
which can be identiﬁed by checking the valid bit. On our AMD
platform, there are eight MTRR pairs per core plus two shared core
IORR registers. When the valid bit is cleared, the register is not
used by the system. The bits provided by these registers are large
enough to store a short encryption key.
5.4 Cache based I/O Storage
We perform a simple experiment to verify that the cache based
I/O storage is able to keep the sensitive data in the cache only. Sim-
ilarly, a repeating pattern 0x12345678 is written into the HIveS
memory. Now the pattern should be stored in the cache. Next,
we execute an INVD instruction, which invalidates all cache con-
tent without writing them back to the physical memory. If the pat-
tern is indeed in the cache, after the execution of INVD instruction,
such written pattern should no longer be observable. In our exper-
iment, since the memory read back after INVD is not 0x12345678,
and therefore the modiﬁcations to the memory we wrote was truly
stored in the cache. However, when the processor is busy, such
contents stored in the cache is ﬂushed out to the physical DRAM
in a very short time.
6. HIVES LIMITATIONS AND
COUNTERMEASURES
6.1 HIveS Limitations
Though the prototype shows promising potential on using HIveS
to conceal malicious code and sensitive data in HIveS memory, the
system has some limitations.
First, since the basic idea behind HIveS is the manipulation of
physical address layout, system architecture with a ﬁxed or reli-
able way to retrieve the physical address layout is not vulnerable
to this attack. Furthermore, our implementation of HIveS relies on
manipulating hardware registers in the AMD processor [2], there-
fore porting of the malware to other platforms requires careful de-
sign changes and examinations. As with most other advanced anti-
forensic rootkits, HIveS requires kernel privilege to manipulate the
system registers, and thus it is not available to user space malwares.
Second, HIveS achieves stealthiness by redirecting memory ac-
cess on the hardware level. This inherently implies all software
based accesses to the memory are redirected. Therefore HIveS can-
not be used to store the current executing code. As a result, mal-
ware code that utilizes this storage, as presented in our prototype, is
left in the memory and could be captured and analyzed by forensic
examiners.
Lastly, HIveS focuses on defeating the software based memory
acquisition approaches, so it has to be augmented with other anti-
forensic mechanisms to defeat the hardware based memory acqui-
sition approaches. Those mechanisms increase the complexity of
HIveS and possibly make the targeted system unstable.
6.2 Countermeasures
HIveS is a system to subvert the organization of physical address
layout. In order to defeat HIveS, it is important to get a reliable
representation of the true address layout. Unfortunately, there is
currently no architecturally supported method to verify the truth-
fulness of the layout. For the rest of the discussion, we focus on
how to defeat our HIveS implementation on AMD platforms.
First, we know that the manipulation of IORR is essential in
HIveS, and since IORR registers are only available on AMD pro-
cessors, HIveS as a system does not work well in Intel family
processor from HIveS, though several techniques we presented in
HIveS may still apply.
Second, the use of IORR can be a good hint of the presence
It can be identiﬁed by simply
of HIveS memory in the system.
inspecting the valid bit in the IORR mask register. A forensic ex-
aminer can also detect the existence of HIveS by measuring the
timing for memory operations. When I/O shadowing is enabled, all
memory access goes through the I/O bus and takes much longer to
complete.
Note that legitimate I/O devices may also use the IORR to map
physical memory address to the I/O space. For instance, AGP video
driver in Linux kernel uses the IORR register in some cases. Since
AMD provides two pairs of IORR registers, a forensic examiner
can also examine the difference of the two pairs. Yet, such anal-