Beacon Object Files 
A Beacon Object File (BOF) is a compiled C program, written to a convention 
that allows it to execute within a Beacon process and use internal Beacon 
APIs. BOFs are a way to rapidly extend the Beacon agent with new post-
exploitation features. 
信标对象文件（BOF）是一个已编译的 C 程序，按照约定编写，使它可以在信
标进程中执行并使用内部信标 API。 BOF 是一种利用新的后开发功能快速扩
展 Beacon 代理的方法。 
What are the advantages of BOFs? 
One of the key roles of an command&control platform is to provide ways to 
use external post-exploitation functionality. Cobalt Strike already has tools to 
use PowerShell, .NET, and Reflective DLLs. These tools rely on an OPSEC 
expensive fork&run pattern that involves a process create and injection for 
each post-exploitation action. BOFs have a lighter footprint. They run inside of 
a Beacon process and are cleaned up after the capability is done. 
命令与控制平台的关键作用之一是提供使用外部开发后功能的方法。 Cobalt 
Strike 已经具有使用 PowerShell，.NET 和 Reflective DLL 的工具。 这些工具
依赖于 OPSEC 昂贵的分叉运行模式，该模式涉及针对每个开采后行动的过程
创建和注入。 转炉的占地面积较小。 它们在 Beacon 进程内部运行，并在功
能完成后清除。 
BOFs are also very small. A UAC bypass privilege escalation Reflective DLL 
implementation may weigh in at 100KB+. The same exploit, built as a BOF, is 
#include "beacon.h" 
void go(char * args, int alen) { 
      BeaconPrintf(CALLBACK_OUTPUT, "Hello World: %s", 
args); 
} 
Download beacon.h (you'll need it): 
下载 beacon.h（您将需要它）： 
https://www.cobaltstrike.com/downloads/beacon.h 
To compile this with Visual Studio: 
要使用 Visual Studio 进行编译，请执行以下操作： 
cl.exe&/c&/GS-&hello.c&/Fohello.o&
To compile this with x86 MinGW: 
要使用 x86 MinGW 进行编译： 
i686-w64-mingw32-gcc&-c&hello.c&-o&hello.o&
To compile this with x64 MinGW: 
要使用 x64 MinGW 进行编译： 
x86_64-w64-mingw32-gcc&-c&hello.c&-o&hello.o&
The above commands will produce a hello.o file. Use inline-execute in Beacon 
to run the BOF. 
上面的命令将产生一个 hello.o 文件。 在信标中使用 inline-execute 运行
BOF。 
beacon>&inline-execute&/path/to/hello.o&these&are&arguments 
beacon.h contains definitions for several internal Beacon APIs. The function 
go is similar to main in any other C program. It's the function that's called by 
inline-execute and arguments are passed to it. BeaconOutput is an internal 
Beacon API to send output to the operator. Not much to it. 
beacon.h 包含几个内部 Beacon API 的定义。 go 函数类似于其他任何 C 程序
中的 main 函数。 内联执行调用此函数，并将参数传递给该函数。 
BeaconOutput 是一个内部 Beacon API，用于将输出发送给操作员。 没什
么。 
Dynamic Function Resolution 
GetProcAddress, LoadLibraryA, GetModuleHandle, and FreeLibrary are 
available within BOF files. You have the option to use these to resolve Win32 
APIs you wish to call. Another option is to use Dynamic Function Resolution 
(DFR). 
在 BOF 文件中可以使用 GetProcAddress，LoadLibraryA，GetModuleHandle
和 FreeLibrary。 您可以选择使用它们来解析您要调用的 Win32 API。 另一种
选择是使用动态功能解析（DFR）。 
Dynamic Function Resolution is a convention to declare and call Win32 APIs 
as LIBRARY$Function. This convention provides Beacon the information it 
needs to explicitly resolve the specific function and make it available to your 
BOF file before it runs. When this process fails, Cobalt Strike will refuse to 
execute the BOF and tell you which function it couldn't resolve. 
动态函数解析是将 Win32 API 声明和调用为 LIBRARY $ Function 的约定。 此
约定为 Beacon 提供了显式解析特定功能所需的信息，并使其在运行前可用于
您的 BOF 文件。 当此过程失败时，Cobalt Strike 将拒绝执行 BOF，并告诉您
无法解决的功能。 
Here's an example BOF that uses DFR and looks up the current domain: 
这是使用 DFR 并查找当前域的 BOF 示例： 
#include  
#include  
#include  
#include "beacon.h" 
DECLSPEC_IMPORT DWORD WINAPI 
NETAPI32$DsGetDcNameA(LPVOID, LPVOID, LPVOID, LPVOID, 
ULONG, LPVOID); 
DECLSPEC_IMPORT DWORD WINAPI 
NETAPI32$NetApiBufferFree(LPVOID); 
void go(char * args, int alen) { 
DWORD dwRet; 
PDOMAIN_CONTROLLER_INFO pdcInfo; 
dwRet = NETAPI32$DsGetDcNameA(NULL, NULL, NULL, 
NULL, 0, &pdcInfo); 
if (ERROR_SUCCESS == dwRet) { 
BeaconPrintf(CALLBACK_OUTPUT, "%s", 
pdcInfo->DomainName); 
} 
NETAPI32$NetApiBufferFree(pdcInfo); 
} 
The above code makes DFR calls to DsGetDcNameA and NetApiBufferFree 
from NETAPI32. When you declare function prototypes for Dynamic Function 
Resolution, pay close attention to the decorators attached to the function 
declaration. Keywords, such as WINAPI and DECLSPEC_IMPORT are 
important. These decorations provide the compiler with the needed hints to 
pass arguments and generate the right call instruction. 
上面的代码从 NETAPI32 对 DsGetDcNameA 和 NetApiBufferFree 进行 DFR
调用。 当声明动态函数解析的函数原型时，请密切注意函数声明中附加的修饰
符。 诸如 WINAPI 和 DECLSPEC_IMPORT 之类的关键字很重要。 这些修饰
为编译器提供了必要的提示，以传递参数并生成正确的调用指令。 
Aggressor Script and BOFs 
You'll likely want to use Aggressor Script to run your finalized BOF 
implementations within Cobalt Strike. A BOF is a good place to implement a 
lateral movement technique, an escalation of privilege tool, or a new 
reconaissance capability. 
您可能需要使用 Aggressor Script 在 Cobalt Strike 中运行最终的 BOF 实现。 
BOF 是实施横向移动技术，特权升级工具或新的侦察能力的好地方。 
The &beacon_inline_execute function is Aggressor Script's entry point to run a 
BOF file. Here is a script to run a simple Hello World program: 
&beacon_inline_execute  函数是 Aggressor Script 的运行 BOF 文件的入口点。 
这是运行简单的 Hello World 程序的脚本： 
alias hello { 
local('$barch $handle $data $args'); 
# figure out the arch of this session 
$barch  = barch($1); 
# read in the right BOF file 
$handle = openf(script_resource("hello. $+ $barch 
$+ .o")); 
$data   = readb($handle, -1); 
closef($handle); 
# pack our arguments 
$args   = bof_pack($1, "zi", "Hello World", 1234); 
# announce what we're doing 
btask($1, "Running Hello BOF"); 
# execute it. 
beacon_inline_execute($1, $data, "demo", $args); 
} 
The script first determines the architecture of the session. An x86 BOF will 
only run in an x86 Beacon session. Conversely, an x64 BOF will only run in 
an x64 Beacon session. This script then reads target BOF into an Aggressor 
Script variable. The next step is to pack our arguments. 