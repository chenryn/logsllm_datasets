Datatype
Units
tip
Updateinterval(in se
30
Interval
Period
Actior
intervalsdefined
50Penod1-7.00:00-24:00
90
Showvalue
Asis
图5-9
101
---
## Page 118
Zabbix企业级分布式监控系统
Items的属性参数配置说明如表5-1所示。
表5-1
选
项
说
明
选择 Host 或者Template，也就是说，Items 是存在于Host 或者Template中的，不能
Host
单独存在
Item的名字，可以用宏（macros）变量：$1,$2，S9，代表Item名称的第1、2、
Name
9参数。举例：Free disk space on $1
如果Itemkey为“vfs.fs.size[/free]”，那么名称将会变成“Free diskspace on /”
Item的默认类型包括Zabbix agent、Simple checks、SNMP、Zabbix intermal、IPMI、JMX
Type
monitoring、Telent、SSH等多种监控方式。因监控方式的不同，Key的配置也会不同
Item的Key，通过选择菜单能查找出可以支持的Itemkeys，但自定义的Key不能通过
选择菜单查找出来，需要手动输入
对同一个主机来说，Key必须是唯一的，不能有重复。如果Key类型为Zabbix agent、
Key
"Zabbix agent(active)、Simple check'或者Zabbix aggregate'，Key值必须能被Zabbix-Agent
或Zabbix-Server所支持
对 Zabbix-Agent 所能支持的Key，请读者查看官方文档
https://www.zabbix.com/documentation/2.2/manual/config/items/itemtypes/zabbix_agent
来选择，如下图所示
Hostinterface192.168.151.200: 10050
Type of information
Age92.168151.200:10050
Data type
lnits
127:0.0.1:101
Host interface
其选项值来源于配置的多个监听接口，如下图所示
Agent interfaces
IP address
DNSname
Connect to
Port
192.168.151.200
devops.itnihao.
IPDNS
10050
127.0.0.1
PDNS
10050
Add
SNMPinterfaces
127.0.0.1
PONS
161
数据在进行类型转换之后存入数据库中
Numeric（unsigned）：64位无符号的整数
·Numeric（float）：浮点数类型（从Zabbix2.2开始，接收的值大小可以支持如1e+70、
Type ofinformation
1e-70.)
·Character：字符（字符串）类型数据限制为255B
·Log：日志文件，必须使用的Key为 log[]
·Text：文本（text）不限制大小
数据类型用于存储Items中Key所获取的数值值，用于存储在不同的表中，如history、
history_str等表
Data type
·Boolean：在数据存储的时候将原本的值替换为0或1，TRUE存储为1，FALSE存
储为0，所有的值都是区分大小写的。
102
---
## Page 119
第5章深入配置和使用
续表
选项
说
TRUE:true、t、yes、y、on、up、running、enabled、available
FALSE:false、f、no、n、off、down、unused、disabled、unavailable
另外，任何非O的数值都被认为是TRUE，O被认为是FALSE
Data type
·Octal：八进制数的数值格式
·Decimal：十进制数的数值格式
·Hexadecimal：十六进制数的数值格式
Zabbix自动执行数据类型的格式转换
如果设置了一个单位符号，Zabbix将会处理接收到的数据，并且把数值转换为需要显示
的单位。默认情况下，如果原始值超过1000，除以1000，并相应地显示。例如，设置bps
为单位，如果接收到的值为881764，将会显示为881.76Kbps
特殊情况有：当单位为B（byte）、Bps（bytes每秒）时，将会除以1024，如果单位设置
为B或Bps，Zabbix将会显示：1为1B/1Bps，1024为1KB/1KBps，1536为1.5KB/1.5KBps。
特殊处理与时间相关的单位如下。
·Unixtime：接收到的值转换为“yyyy.mm.ddhh:mm:ss”。为了能正确显示，接收到的值
Units
必须是一个数值类型（unsigned）。
·Uptime：接收到的值将会转换为“hh:mm:ss”或“Ndays，hh：mm:ss”。例如，接收的
值为881764（seconds），将会显示为“10days，04:56:04”。
·S：接收到的值将会转换为“yyymmmdddhhhmmmsssms”，参数为秒。
例如，如果接收到的值为881764（seconds），将会显示为“10d4h56m”。只显示3个主
要的单位，例如，“1m15d5h”或“2h4m46s”：如果没有day，将只会显示“1m5h”（不
会显示minutes、seconds或者milliseconds）：如果值小于0.001，将会显示为“｜#@这些字符，默认
情况下，Zabbix对这些参数是无法正常处理的，需要在zabbix_agentd.conf中开启
参数UnsafeUserParameters，并将其值设置为1，语句如下。
shell# vim /etc/zabbix/zabbix_agentd.conf
UnsafeUserParameters=l
前面已经介绍了Key名称的取值范围，也就是说，UserParameter中的命令包
含特殊字符必须开启UnsafeUserParameters=1的参数，然后重启Zabbix_Agentd
服务。
默认情况下，$1、$2、$3、$4代表位置参数1、2、3、4，如果定义的字符串
中出现$后面接数字，需要用$S，示例如下。
awk'(print$s2)
（3）Key返回的值
自定义参数可以返回文本（character、log、text）和空值，如果返回的是一个
无效值，则显示ZBX_NOTSUPPORTED。
107
---
## Page 124
Zabbix企业级分布式监控系统
（4）自定义Key的例子
在/etc/zabbix/zabbix_agentd.conf后面添加如下内容。
UserParameter=get.os.type, head -1/etc/issue
然后重启zabbix_agentd服务（注意，修改配置后必须重启服务）。
shell# service zabbix_agentd restart
运行测试命令，查看Key，语句如下。
CentOs release 6.5 (Final)
（5）子配置文件的配置
为了便于维护和分类管理，UserParameter的内容可以单独写一个配置文件。
shell# vim /etc/zabbix/zabbix_agentd.conf
Include=/etc/zabbix/zabbix_agentd.conf.d/
Include也就是zabbix_agent.conf中部分内容的子配置文件，这种方式在其他
开源软件中也是类似的做法，便于维护。子配置文件中通常会定义UserParameter。
注意，在/etc/zabbix/zabbix_agentd.conf.d/文件夹下所有的配置文件都会被当
作子配置文件，如果有重复的，会导致客户端Agent启动失败，如图5-15所示。
d.d]#1s
1X
sender-entd:11759.s
rzabbix
zabbix/7
34323
563usingc
"mysql.status[],echo.show global status wherevariable_n
bixagentd.d]/etc/init.d/zabbix-agent status
botazabbix zabbix aqentd.dl#
图5-15
（6）用户自定义参数的总结
·自定义Key的语法。
·特殊字符的处理。
·子配置文件的注意事项。
·自定义Key的步骤总结。
1）Agent配置文件修改。
shell# vim /etc/zabbix/zabbix_agentd.conf
#处理特殊字符
UnsafeUserParameters=l
108
---
## Page 125
第5章深入配置和使用
Include=/etc/zabbix/zabbix_agentd.conf.d/#子配置文件路径
2）子配置文件。
shell# vim /etc/zabbix/zabbix_agentd.conf.d/get_os_type.conf
UserParameter=get.os.type,head-1/etc/issue
#自定义key，如有参数传递，参考前面的内容
3）重启服务测试Key。
shell# service zabbix-agent restart
#重启服务
shell# zabbix_get -s 127.0.0.1 -k get.os.type
#测试Key获取参数
Cent0s release 6.4 (Final)
#Key获取的值
4）用zabbix_agentd查看Key是否被支持。
get.os.type
[t|CentOS release 6.5 (Final)]
如果能看到Key名称，且能看到获取到的数据，说明自定义的Key是正确的。
5）在Web页面添加Item，注意数据类型的选择。
5.3Items的类型
Zabbix的Items分为多种类型，这里只讨论主要的用法，对不常用的，读者
可自行参考官方文档。
https://www.zabbix.com/documentation/2.2/manual/config/items/itemtypes
5.3.1Zabbix-Agent
Agent用于从Zabbix-Agent采集数据，其工作方式分为被动模式（Passive）
和主动模式（Active），在默认的模板中，是被动模式的工作方式。
Zabbix-Agent支持的Itemkeys请读者参考本书附录部分，官方文档地址为：
https://www.zabbix.com/documentation/2.2/manual/config/items/itemtypes/zabbi
x_agent
下面对Linux下Agent key的各种用法进行说明，并对常用的Key进行分类。
1．网卡流量的监控Key
net.if.in[if, ]
其中，if 表示网卡接口，mode 表示想要取值的类型。通过查看文档可知，
mode的可选参数为bytes（默认）、packets、errors、dropped。
注意，凡是文档中所提的默认，在多个参数的时候，不填写参数，用逗号分
隔开，即使用默认的参数。
109
---
## Page 126
Zabbix企业级分布式监控系统
例如，net.if.in[if，]这个Key，mode默认的参数是bytes，所以
net.if.in[eth0]表示获取ethO的流量（bytes），与net.if.in[etho,bytes]效果相同。
用zabbix_get测试数据获取情况（zabbix_get的用法请参考3.7节）。
[root@www ~]# zabbix_get -s 127.0.0.1  -k net.if.in[eth0,bytes]
358589160
这里获取的值就是网卡的进流量。
如果想获取网卡接收的数据包数量，用net.if.in[ethO,packets]即可。
[root@www ~]# zabbix_get -s 127.0.0.1 -k net.if.in[eth0,packets]
257021
这里的packets其实就是ifconfig命令中看到的packets。
[root@www ~]# ifconfig
eth0 Link encap:Ethernet  HWaddr 00:0C:29:12:F6:05
inetaddr:192.168.1.9 Bcast:192.168.1.255 Mask:255.255.255.0
inet6 addr: fe80::20c:29ff:fe12:f605/64 Scope:Link
TX packets:165997 errors:0 dropped:0 overruns:0, carrier:0
collisions:0 txqueuelen:1000
RX bytes:357444550 (340.8 MiB) TX bytes:11420540 (10.8 MiB)
errors 和dropped的原理相同，在此不再重复。
另外，关于网卡流量的Key如下（具体用法见文档解释）。
net.if.out[if,]
net.if.collisions[if]
net.if.discovery
net.if.out[if,]
net.if.total[if,]
2.监控端口的Key
相关的Key如下。
net.tcp.listen[port]
net.tcp.port[,port]
net.tcp.service[service,,]
net.tcp.service.perf[service,,]
net.udp.listen[port]m
3．监控进程的 Key
kernel.maxfiles
kernel.maxproc
proc.num[,,,]
4.监控CPU和内存的Key
system.cpu.intr
110
---
## Page 127
第5章深入配置和使用
system.cpu.load[,]
system.cpu.num[]
system.cpu.switches
system.cpu.util[,,]
vm.memory.size[]
system.swap.in[,]
system.swap.out[,]
system.swap.size[,]
5.磁盘I/O的Key
vfs.dev.read[,,]
vfs.dev.write[,,]
vfs.fs.inode[fs,]"
6．文件监控的Key
vfs.file.cksum[file]
vfs.file.contents[file,]
vfs.file.exists[file]
vfs.file.md5sum[file]