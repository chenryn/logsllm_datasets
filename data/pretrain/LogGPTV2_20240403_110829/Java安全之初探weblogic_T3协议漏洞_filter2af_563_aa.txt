# Java安全之初探weblogic T3协议漏洞
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
在反序列化漏洞里面就经典的还是莫过于weblogic的反序列化漏洞，在weblogic里面其实反序列化漏洞利用中大致分为两种，一个是基于T3协议的反序列化漏洞，一个是基于XML的反序列化漏洞。当然也还会有一些SSRF和任意文件上传漏洞，但是在这里暂且不谈。
下面来列出两个漏洞类型的一些漏洞编号
基于T3协议漏洞：
CVE-2015-4582、CVE-2016-0638、CVE-2016-3510、CVE-2018-2628、CVE-2020-2555、CVE-2020-2883
基于XML:CVE-2017-3506、CVE-2017-10271、CVE-2019-2729
粗略的列了几个代表性的CVE漏洞。
在Weblogic中，有部分漏洞是基于上几个漏洞的补丁进行的一个绕过。而在前一段时间内，CVE-2020-14882和CVE-2020-14883里面14883就是基于14882的补丁去进行的一个绕过。
## 0x01 浅析T3协议
###  关于T3协议的絮絮叨叨
关于这个T3协议，他是Weblogic里面独有的一个协议，在前面写的一篇关于RMI的文章里面提到过RMI的传输过程是传输的序列化数据，而在接收后会进行一个反序列化的操作。在Weblogic中对RMI规范的实现使用T3协议。而在T3的传输过程也是一样的。
下面对T3协议的传输过程、如何执行的反序列化操作、T3协议的执行流程去进行一个分析。
在之前先来看一张weblogic进行反序列化的执行流程图。
这里借用了一个图片，在该漏洞的一个入口点是weblogic里面的方法调用了原生的反序列化方法进行一个反序列化操作。
而这里还需要知道该方法在传输完成后是如何进行调用的。关于原生反序列化的操作原理这里就不讲了，可以看到我的该篇文章。
[Java安全之原生readObject方法解读](https://www.cnblogs.com/nice0e3/p/14127885.html),这里主要来讲一下T3协议的相关内容。
###  T3协议概述
WebLogic Server 中的 RMI 通信使用 T3 协议在 WebLogic Server 和其他 Java 程序（包括客户端及其他
WebLogic Server 实例）间传输数据。
###  T3协议结构
在T3的这个协议里面包含请求包头和请求的主体这两部分内容。
###  请求包头
这里拿2个CVE-2015-4852的POC来进行讲解。
    t3 12.2.1 AS:255 HL:19 MS:10000000 PU:t3://us-l-breens:7001
这里就是他的请求包的头。
使用Wireshark对它进行抓包，由于配置的网卡抓不到包，靶机地址会在23段和1段的ip中来回切换。
这里为了能抓到包配置了一个nat模式的网卡，进行抓包，地址为192.168.23.130，改一下poc的目标地址，发送payload。
在这里在发送请求包头的时候，打了个断点，让脚本只发送请求包头数据，方便抓包。打开Wireshark抓包后发现，发送该请求包头后，服务端weblogic会有一个响应
HELO后面的内容则是被攻击方的weblogic版本号，在发送请求包头后会进行一个返回weblogic的版本号。
###  请求主体
在T3协议里面传输的都是序列化数据，这个在前面也说过，而传输中的数据分为七部分内容。第一部分为协议头。即`t3
12.2.3\nAS:255\nHL:19\nMS:10000000\n\n`这串数据。
来看到下面的图，图片取自z_zz_zzz师傅的[修复weblogic的JAVA反序列化漏洞的多种方法](http://drops.xmd5.com/static/drops/web-13470.html)文章。
看到第二到第七部分内容，都是`ac ed 00
05`,说明该串内容是序列化的数据。而如果需要去构造payload的话，需要在后面序列化的内容中，进行一个替换。将原本存在的序列化内容替换成我们payload的序列化内容，在传输完成后，进行反序列化达成攻击的目的。
    - 第一种生成方式为，将weblogic发送的JAVA序列化数据的第二到九部分的JAVA序列化数据的任意一个替换为恶意的序列化数据。
    - 第二种生成方式为，将weblogic发送的JAVA序列化数据的第一部分与恶意的序列化数据进行拼接。
## 0x02 漏洞环境搭建
###  环境搭建
这里借用了A-team 的weblogic漏洞环境项目来做搭建环境，省去不必要的麻烦。
漏洞环境地址：
jdk地址：
weblogic下载地址：
这里需要把下载好的jdk文件放在该项目的jdks文件夹下，weblogic的源码放在weblogics文件夹下。
编译运行
    docker build --build-arg JDK_PKG=jdk-7u21-linux-x64.tar.gz --build-arg WEBLOGIC_JAR=wls1036_generic.jar  -t weblogic1036jdk7u21 .
    docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic1036jdk7u21 weblogic1036jdk7u21
然后在这里需要去将一些weblogic的依赖Jar包给导出来进行远程调试。
    mkdir ./middleware
    docker cp weblogic1036jdk7u21:/u01/app/oracle/middleware/modules ./middleware/
    docker cp weblogic1036jdk7u21:/u01/app/oracle/middleware/wlserver ./middleware/
    docker cp weblogic1036jdk7u21:/u01/app/oracle/middleware/coherence_3.7/lib ./coherence_3.7/lib
如果不想这么麻烦的话可以直接运行对于的.sh脚本，比如这里安装的是1036 jdk是7u21
，直接运行`run_weblogicjdk7u21.sh`，自动安装以及自动从容器里面导出jar包。
###  远程调试
在这里将jar包复制到物理机上，然后打开IDEA创建一个空项目进行导入。
完成后就来配置远程调试
为了测试，这里使用WeblogicScan来扫描一下，看看在断点地方会不会停下。
在这里发现已经可以进行远程调试，后面我们就可以来分析漏洞了。
## 0x03 漏洞分析
###  漏洞复现
在这先来讲漏洞复现一下后，再进行漏洞的分析
还是拿exp为例子，但是我们这里是docker搭建的环境，也没有构造回显。常用的弹出计算器，就算执行了也没法显示出来，所以在这里使用创建文件的方式验证该漏洞是否利用成功。
    import socket
    import sys