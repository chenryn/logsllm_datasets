title:An End-to-End Measurement of Certificate Revocation in the Web's PKI
author:Yabing Liu and
Will Tome and
Liang Zhang and
David R. Choffnes and
Dave Levin and
Bruce M. Maggs and
Alan Mislove and
Aaron Schulman and
Christo Wilson
An End-to-End Measurement of
Certiﬁcate Revocation in the Web’s PKI
Yabing Liu∗ Will Tome∗ Liang Zhang∗ David Choffnes∗ Dave Levin†
Bruce Maggs‡ Alan Mislove∗ Aaron Schulman§ Christo Wilson∗
∗Northeastern University
†University of Maryland
‡Duke University and Akamai Technologies
§Stanford University
ABSTRACT
Critical to the security of any public key infrastructure
(PKI) is the ability to revoke previously issued certiﬁcates.
While the overall SSL ecosystem is well-studied, the fre-
quency with which certiﬁcates are revoked and the circum-
stances under which clients (e.g., browsers) check whether
certiﬁcates are revoked are still not well-understood.
In this paper, we take a close look at certiﬁcate revoca-
tions in the Web’s PKI. Using 74 full IPv4 HTTPS scans,
we ﬁnd that a surprisingly large fraction (8%) of the certiﬁ-
cates served have been revoked, and that obtaining certiﬁ-
cate revocation information can often be expensive in terms
of latency and bandwidth for clients. We then study the
revocation checking behavior of 30 diﬀerent combinations of
web browsers and operating systems; we ﬁnd that browsers
often do not bother to check whether certiﬁcates are re-
voked (including mobile browsers, which uniformly never
check). We also examine the CRLSet infrastructure built
into Google Chrome for disseminating revocations; we ﬁnd
that CRLSet only covers 0.35% of all revocations. Overall,
our results paint a bleak picture of the ability to eﬀectively
revoke certiﬁcates today.
Categories and Subject Descriptors
C.2.3 [Computer-Communication Networks]: Network
Operations; E.3 [Data Encryption]: Public Key Cryp-
tosystems, Standards
Keywords
SSL; TLS; PKI; HTTPS; X.509; Certiﬁcates; Revocation;
Extended validation, Web browsers, CRLSet
1.
INTRODUCTION
The Secure Sockets Layer (SSL) and Transport Layer Se-
curity (TLS) protocols secure a signiﬁcant fraction of Inter-
net traﬃc today. Coupled with a Public Key Infrastructure
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from Permissions@acm.org.
IMC’15, October 28–30, 2015, Tokyo, Japan.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-3848-6/15/10 ...$15.00.
DOI: http://dx.doi.org/10.1145/2815675.2815685.
(PKI), SSL1 provides authentication via certiﬁcate chains
and private communication via encryption.
Critical to the security of any PKI is the ability to revoke
a previously-issued certiﬁcate, that is, to invalidate it be-
fore it expires. If the private key corresponding to a given
certiﬁcate were compromised, the attacker could imperson-
ate the certiﬁcate owner or eavesdrop on encrypted traﬃc
sent to the certiﬁcate owner until the certiﬁcate’s expiry
date. Even more harrowing, if an intermediate certiﬁcate
were compromised, an attacker could issue valid certiﬁcates
for any domain (and, unfortunately, such attacks have oc-
curred in the past [5,31,48]). The only recourse a certiﬁcate
owner has is to request that their Certiﬁcate Authority (CA)
create and disseminate revocations: signed attestations that
the certiﬁcate should no longer be considered valid.
Successfully revoking a certiﬁcate requires action not only
from website administrators and CAs; clients, especially web
browsers, must request and respect revocations.
If any of
these principals fail to meet their responsibilities—if admin-
istrators fail to request revocations, CAs fail to distribute
them, or browsers fail to fetch them—users risk being sus-
ceptible to impersonation attacks.
And yet, surprisingly, security practitioners have devel-
oped a strikingly negative view towards certiﬁcate revoca-
tion, even going so far as to doubt the fundamental useful-
ness of revocations [27, 28, 32, 42, 46]. These objections are
largely rooted in the costs that the various parties incur in
supporting revocations and the tradeoﬀs that clients (i.e.,
web browsers) face when they are unable to obtain the re-
vocation status of certiﬁcates. While the incentives appear
at odds with proper security, the extent to which they have
led to inaction is largely unknown. This uncertainty leads to
a chicken-and-egg problem: administrators argue that they
need not revoke because clients rarely check, while clients
argue they need not check because administrators rarely re-
voke. Without a concrete understanding of revocation in
today’s PKI, it is unclear how to break this logjam and im-
prove the PKI’s handling of certiﬁcate revocation.
In this paper, we empirically evaluate the extent to which
all three parties involved—website administrators, CAs, and
browsers—meet their revocation responsibilities. Our inves-
tigation extends prior work in the measurement of the SSL
ecosystem; to date, most studies [7, 14] have focused on live
certiﬁcates (proper key lengths, trust aggregation among
CAs, etc), and there have been few studies of the critical
revocation mechanisms available today.
In particular, we
1TLS is the successor of SSL, but both use the same certiﬁcates.
We refer to “SSL certiﬁcates,” but our ﬁndings apply equally to both.
provide the ﬁrst end-to-end evaluation of the Web’s certiﬁ-
cate revocation ecosystem, with the following contributions:
First, we study website administrators’ revocation behavior
using 74 separate, full IPv4 port 443 scans between October
2013 and March 2015, collected by Rapid7 [40]. We select
all valid certiﬁcates from these scans, and then check their
revocation status every day, starting in October 2014. Over-
all, we ﬁnd that a surprisingly large fraction (> 8%) of these
certiﬁcates are revoked, and that almost 1% of certiﬁcates
that continue to be advertised are actually revoked. Addi-
tionally, we observe that OCSP Stapling, which addresses
many of the diﬃculties of obtaining revocation information,
is not widely deployed: only 3% of certiﬁcates are served by
hosts supporting OCSP Stapling.
Second, we examine the CA’s role in distributing certiﬁ-
cate revocation information. We ﬁnd that the most well-
established distribution method, CRLs, can impose signiﬁ-
cant bandwidth and latency overhead on clients: the median
certiﬁcate has a CRL of 51 KB, and some certiﬁcates have
CRLs up to 76 MB in size. At the same time, we observe that
checking certiﬁcate status via OCSP is signiﬁcantly cheaper
but still requires the client to delay accepting the connection
until the OCSP responder can be contacted.
Third, we examine client-side revocation checking behav-
ior, since clients are responsible for checking certiﬁcates’ re-
vocation status. We develop a test suite for web browsers
that includes 244 distinct certiﬁcate conﬁgurations. We de-
ploy this test suite to the most recent versions of all major
browsers on both mobile and desktop devices. Overall, we
ﬁnd that the fraction of times that revocation information is
actually checked is surprisingly low: Firefox only checks leaf
and EV certiﬁcates for revocations, and only if the certiﬁ-
cates have OCSP responders; all browsers except for Internet
Explorer assume that a leaf certiﬁcate is valid if revocation
information cannot be obtained; and not a single mobile
browser checks revocation information for any certiﬁcates.
In the process, we found three bugs in revocation checking
behavior and ﬁled bug reports with browser vendors.
Fourth, we examine the revocation checking policy for
Chrome in more detail, as Chrome also uses a Google-
curated subset of all CRLs called the CRLSet. Essentially,
Google pre-selects a subset of all revoked certiﬁcates and
pushes this information to Chrome browsers. Unfortunately,
our analysis shows that the CRLSet contains only 0.35% of
revoked certiﬁcates.
Taken together, our ﬁndings paint a bleak picture of cer-
tiﬁcate revocation on the Internet today. While a signiﬁ-
cant fraction of certiﬁcates are revoked, many clients will
never receive these revocations and will obliviously accept
the certiﬁcates as valid. Fortunately, our ﬁndings also point
towards potential improvements that could be implemented
in the very near term, including an improved CRLSet con-
struction based on Bloom Filters (§7).
Our analysis relied on both public sources of data and
those we collected ourselves. We make our data and our
browser “test suite” available to the research community at
http://www.sslresearch.org
2. BACKGROUND
SSL and TLS provide conﬁdentiality and integrity for the
vast majority of secure online communication. When com-
bined with a PKI, they also allow parties to authenticate
the identity of the other communicating party. In this sec-
tion, we provide a brief background of SSL/TLS and PKIs
relevant to our study, and detail the protocols that exist to
support certiﬁcate revocation. We refer the reader to the
book by Gutmann [20] for a more in-depth treatment of
these topics.
2.1 Certiﬁcates
A certiﬁcate is an attestation signed by an issuer that
binds a subject to a public key.
In the web’s PKI, the is-
suers are Certiﬁcate Authorities (CAs) such as Verisign or
GoDaddy, who possess their own certiﬁcates binding their
identities to their public keys. These CA certiﬁcates are,
in turn, signed by other CAs, and so on, terminating at a
small set of self-signed root certiﬁcates. Clients are assumed
to obtain these trusted root certiﬁcates out-of-band (e.g.,
most browsers and operating systems ship with a set of root
certiﬁcates).
The PKI does not include a widely accepted mechanism
for delegating partial authority to issue certiﬁcates to CAs.2
As a result, any CA can issue a certiﬁcate for any domain.
To verify a leaf certiﬁcate (i.e., a certiﬁcate that is not
permitted to sign other certiﬁcates, used by most websites),
a client needs to obtain a logical chain of certiﬁcates, leading
from a root certiﬁcate through zero or more intermediate
(CA) certiﬁcates, to the leaf certiﬁcate.3 The private keys
for each certiﬁcate are used to sign the certiﬁcate at the
next level, with the exception of the root (which is signed
by its own private key). To verify the leaf’s identity, the
client thus needs to verify that each certiﬁcate along this
chain has a correct signature, is still fresh (certiﬁcates have
a well-deﬁned period during which they can be accepted),
and has not been revoked.
The most common format for certiﬁcates on the Internet
today is X.509 [11], which contains an ASN.1 [34] encoding
of the certiﬁcate along with its signature. The X.509 format
allows for additional information to be supplied, including
a certiﬁcate’s serial number (unique for the issuer), the cer-
tiﬁcate’s validity period, and where to check whether the
certiﬁcate has been revoked.
Validating Identities. Ultimately, CAs exist to bind iden-
tities to public keys, and are therefore responsible for val-
idating their customers’ identities. Typically, a CA chal-
lenges an applicant to prove ownership of the domain for
which they are applying, for instance by requiring the ap-
plicant to post CA-chosen data at a URL in that domain;
this process is called Domain Validation (DV). To provide
greater assurance to clients that certiﬁcates were issued
properly, Extended Validation (EV) certiﬁcates are a mecha-
nism for CAs to assert that the identity veriﬁcation process
has followed a set of established criteria.
EV certiﬁcates follow the same format as X.509 certiﬁ-
cates, but simply contain an additional Policy Identifier
that indicates that a more thorough veriﬁcation was per-
formed. Many browsers display EV certiﬁcates diﬀerently
(typically with a green box in the address bar). As we will
see later in the paper, browsers often also perform a diﬀerent
set of revocation checks on EV certiﬁcates.
2The X.509 speciﬁcation includes the Name Constraints extension
for exactly this, but it is rarely used and few clients support it.
3Certiﬁcates can also be cross-signed [22] by other issuers for re-
dundancy, providing multiple valid chains for a given certiﬁcate.
2.2 Revocation
Most CAs allow entities who have been issued certiﬁcates
to later request to have them revoked. Revocations are rep-
resented by attestations signed by the same CAs who issued
the corresponding certiﬁcates. CAs are also responsible for
disseminating the revocation status for all certiﬁcates they
have issued.
When a client establishes an SSL connection, the server
presents a chain of certiﬁcates as part of the SSL handshake.
In addition to verifying the chain itself, the correct behavior
of the client is to ensure that all certiﬁcates in the chain4
have not been revoked before continuing with the connec-
tion. Each certiﬁcate typically includes information about
how and where to check for revocation information (i.e., a
protocol and a URL).
There are two predominant methods for disseminating re-
vocations: Certiﬁcate Revocation Lists (CRLs) and the On-
line Certiﬁcate Status Protocol (OCSP):
CRLs. CRLs are the most well-established means of dis-
seminating revocations. A CRL is simply an ASN.1-encoded
ﬁle that contains a list of (serial number, revocation times-
tamp, revocation reason) tuples, all of which are collectively
signed by the CA. Thus, checking the revocation status of
a certiﬁcate using a CRL involves downloading the CRL ﬁle
speciﬁed in the certiﬁcate and checking whether the certiﬁ-
cate’s serial number is listed in the CRL.
Similar to X.509 certiﬁcates, each CRL contains informa-
tion specifying the range of time that it is good for; CAs are
therefore required to re-issue CRLs periodically even if no
additional certiﬁcates have been revoked. Clients can there-
fore cache CRLs, but must download an updated CRL once
they expire.
CRLs have been criticized [15] for being an ineﬃcient
means of disseminating revocation information: clients must
download information about all of the CA’s revoked certiﬁ-
cates even though they are typically only interested in the
validity status of a single certiﬁcate. Thus, CRLs impose
on CAs and clients a burden of excessive communication
overhead.
OCSP. OCSP was designed to reduce the overhead of CRLs
by allowing clients to query the CA for the revocation status
of a single certiﬁcate. OCSP allows a client to generate an
HTTP request for the status of a given certiﬁcate’s serial
number. The URL that clients should query is stated in the
certiﬁcate. The CA returns a signed response that includes
the certiﬁcate’s current status (good, revoked, or unknown5),
as well as a validity period, meaning clients can cache the
response, typically on the order of days (longer than most
CRLs).
OCSP addresses many of the ineﬃciencies of CRLs, but
still requires request(s) to the CA(s) before a certiﬁcate can
be trusted. Additionally, using OCSP reveals information
about the users’ browsing behavior to CAs, a potential pri-
vacy risk. Thus, checking the revocation status of certiﬁ-
cates via OCSP still imposes a signiﬁcant burden on clients.
4The client need not check the revocation status of the root cer-
tiﬁcate, as root certiﬁcates can only be “revoked” by removing them
from the list of trusted certiﬁcates on clients.
5The OCSP speciﬁcation [44] states that the unknown response
“indicates that the status could not be determined by this responder”.
While the correct client behavior when receiving an unknown response
is the subject of some debate, it is clear that the response does not
indicate that certiﬁcate in question should be trusted.
OCSP Stapling. OCSP Stapling is an SSL/TLS exten-
sion that allows a server to cache OCSP responses and send
them to clients as part of the SSL handshake. Thus, when
communicating with a server that supports OCSP Stapling,
a client receives both the server’s certiﬁcate and an OCSP
statement of the certiﬁcate’s validity. The client can ver-
ify the OCSP statement and therefore be assured that the
certiﬁcate is not revoked. OCSP Stapling removes most of
the latency penalty associated with verifying a certiﬁcate’s