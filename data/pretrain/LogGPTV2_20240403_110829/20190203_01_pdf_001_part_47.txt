### Definition Node
For an example of adding a custom conflict handling function using PSQL, refer to Section 6.6.8.2. The custom handler name option must be specified if and only if the conflict resolution option or the standby conflict resolution option is set for custom conflict handling with the `C` value.

### -repgrouptype
- **Single-Master Replication System**: Specify `s`.
- **Multi-Master Replication System**: Specify `m`.
- **Default**: If omitted, the default is `s`.

### Examples

#### Example 1: Creating a Publication with Synchronization Method
In this example, a publication named `dept_emp` is created, containing the `EDB.DEPT` and `EDB.EMP` tables from an Oracle database. The replication method used is synchronization.
```sh
$ java -jar edb-repcli.jar -createpub dept_emp \
> -repsvrfile ~/pubsvrfile.prop \
> -pubdbid 1 \
> -reptype t \
> -tables EDB.DEPT EDB.EMP
```
**Output:**
```
Creating publication...
Tables:[[EDB.DEPT, TABLE], [EDB.EMP, TABLE]]
Filter clause:[]
Publication created.
```

#### Example 2: Creating a Publication with Snapshot-Only Method
In this example, a publication named `salesemp` is created, containing the `EDB.SALESEMP` view from an Oracle database. The replication method used is snapshot-only.
```sh
$ java -jar edb-repcli.jar -createpub salesemp \
> -repsvrfile ~/pubsvrfile.prop \
> -pubdbid 1 \
> -reptype s \
> -views EDB.SALESEMP
```
**Output:**
```
Creating publication...
Tables:[[EDB.SALESEMP, VIEW]]
Filter clause:[]
Publication created.
```

#### Example 3: Creating a Publication with Table Filters
In this example, a publication named `analysts_managers` is created, containing the `edb.dept` table and employees from the `edb.emp` table who are analysts or managers. The tables are in an Advanced Server database. The replication method used is snapshot-only.
```sh
$ java -jar edb-repcli.jar -createpub analysts_managers \
> -repsvrfile ~/pubsvrfile.prop \
> -pubdbid 2 \
> -reptype s \
> -tables edb.dept edb.emp \
> -tablesfilterclause "2:jobgrade_11:job IN ('ANALYST', 'MANAGER')"
```
**Output:**
```
Creating publication...
Tables:[[edb.dept, TABLE], [edb.emp, TABLE]]
Filter clause:[FilterName:jobgrade_11 FilterClause:job IN ('ANALYST', 'MANAGER') ]
Publication created.
```

#### Example 4: Creating a Publication for a Multi-Master Replication System
In this example, a publication named `emp_pub` is created for a multi-master replication system. One table filter is defined on the `edb.dept` table, and three table filters are defined on the `edb.emp` table. The `edb.dept` table is assigned node priority conflict resolution and latest timestamp as the standby conflict resolution strategy. The `edb.emp` table is assigned earliest timestamp conflict resolution and manual resolution (the default) as its standby strategy.
```sh
$ java -jar edb-repcli.jar -createpub emp_pub \
> -repsvrfile ~/pubsvrfile.prop \
> -pubdbid 3 \
> -reptype t \
> -tables edb.dept edb.emp \
> -tablesfilterclause "1:dept_10_20_30:deptno in (10, 20, 30)" \
> "2:dept_10:deptno = 10" \
> "2:dept_20:deptno = 20" \
> "2:dept_30:deptno = 30" \
> -conflictresolution 1:N 2:E \
> -standbyconflictresolution 1:L 2:M \
> -repgrouptype m
```
**Output:**
```
Creating publication...
Tables:[[edb.dept, TABLE], [edb.emp, TABLE]]
Filter clause:[FilterName:dept_10_20_30 FilterClause:deptno in (10, 20, 30), FilterName:dept_10 FilterClause:deptno = 10, FilterName:dept_20 FilterClause:deptno = 20, FilterName:dept_30 FilterClause:deptno = 30]
Conflict Resolution Option:[Node Priority, Earliest Timestamp]
Standby Conflict Resolution Option:[Latest Timestamp, Manual]
Publication created.
```

### 8.3.15 Printing a List of Publications (printpublist)
The `printpublist` command prints a list of publication names.

#### Synopsis
```sh
-printpublist -repsvrfile pubsvrfile [ -pubdbid dbid ] [ -printpubid ]
```

#### Parameters
- **pubsvrfile**: The file containing the publication server login information.
- **dbid**: If specified, only the publication names subordinate to the publication database definition specified by `dbid` are printed. If omitted, all publication names subordinate to the publication server are printed.
- **-printpubid**: Specify this parameter to print the publication IDs along with the publication names.

#### Example
```sh
$ java -jar edb-repcli.jar -printpublist -repsvrfile ~/pubsvrfile.prop
```
**Output:**
```
Printing publications ...
analysts_managers
dept_emp
emp_pub
salesemp
```

### 8.3.16 Printing a List of Tables in a Publication (printpublishedtables)
The `printpublishedtables` command prints a list of tables and views that belong to the given publication.

#### Synopsis
```sh
-printpublishedtables pubname -repsvrfile pubsvrfile
```

#### Parameters
- **pubname**: The name of the publication whose tables and views are to be printed.
- **pubsvrfile**: The file containing the publication server login information.

#### Example
```sh
$ java -jar edb-repcli.jar -printpublishedtables dept_emp -repsvrfile ~/pubsvrfile.prop
```
**Output:**
```
Printing tables under publication: dept_emp
EDB.DEPT
EDB.EMP
```

### 8.3.17 Printing a List of Filters in a Publication (printpubfilterslist)
The `printpubfilterslist` command prints a list of table filters that are defined in the given publication.

#### Synopsis
```sh
-printpubfilterslist pubname -repsvrfile pubsvrfile
```

#### Parameters
- **pubname**: The name of the publication whose table filters are to be printed.
- **pubsvrfile**: The file containing the publication server login information.

#### Example
```sh
$ java -jar edb-repcli.jar -printpubfilterslist analysts_managers -repsvrfile ~/pubsvrfile.prop
```
**Output:**
```
Printing publications ...
FilterID:47 FilterName:jobgrade_11 FilterClause:job IN ('ANALYST', 'MANAGER')
```

### 8.3.18 Adding Tables to a Publication (addtablesintopub)
The `addtablesintopub` command adds tables or views into an existing publication.

#### Synopsis
```sh
-addtablesintopub pubname -repsvrfile pubsvrfile [ -tables schema_t1.table_1 [ schema_t2.table_2 ] ...] [ -views schema_v1.view_1 [ schema_v2.view_2 ] ...] [ -tablesfilterclause "ordinal_t1:filtername_t1:filterclause_t1" [ "ordinal_t2:filtername_t2:filterclause_t2" ] ...] [ -viewsfilterclause "ordinal_v1:filtername_v1:filterclause_v1" [ "ordinal_v2:filtername_v2:filterclause_v2" ] ...] [ -conflictresolution ordinal_t1:{ E | L | N | M | C:customhandler_t1 } [ ordinal_t2:{ E | L | N | M | C:customhandler_t2 } ] ...] [ -standbyconflictresolution ordinal_t1:{ E | L | N | M | C:customhandler_t1 } [ ordinal_t2:{ E | L | N | M | C:customhandler_t2 } ] ...] [ -repgrouptype { m | s } ]
```

#### Parameters
- **pubname**: The name of the publication to which tables or views are to be added.
- **pubsvrfile**: The file containing the publication server login information.
- **schema_tn**: The name of the schema containing the nth table of the tables parameter list. This value is case-sensitive.
- **table_n**: The name of the nth table in the tables parameter list. This value is case-sensitive.
- **schema_vn**: For SMR only: The name of the schema containing the nth view of the views parameter list. This value is case-sensitive.
- **view_n**: For SMR only: The name of the nth view in the views parameter list. This value is case-sensitive.
- **ordinal_tn**: The ordinal number (position in the list counting from left to right starting with 1) of a table in the tables parameter list to which an attribute is to be applied.
- **filtername_tn**: The filter name to be assigned to the filter rule on the table.
- **filterclause_tn**: The filter clause to be applied to the table in the tables parameter list at the position indicated by `ordinal_tn`.
- **ordinal_vn**: For SMR only: The ordinal number (position in the list counting from left to right starting with 1) of a view in the views parameter list to which an attribute is to be applied.
- **filtername_vn**: The filter name to be assigned to the filter rule on the view.
- **filterclause_vn**: For SMR only: The filter clause to be applied to the view in the views parameter list at the position indicated by `ordinal_vn`.
- **-conflictresolution**: For MMR only: For the conflict resolution option, specify `E` for earliest timestamp conflict resolution, `L` for latest timestamp conflict resolution, `N` for node priority conflict resolution, `M` for manual conflict resolution, or `C` for custom conflict handling. The specified conflict resolution applies to the table in the position given by `ordinal_tn` counting from left to right in the tables parameter list. If omitted, the default is `E`.
- **-standbyconflictresolution**: For MMR only: For the standby conflict resolution option, specify `E` for earliest timestamp conflict resolution, `L` for latest timestamp conflict resolution, `N` for node priority conflict resolution, `M` for manual conflict resolution, or `C` for custom conflict handling. The specified conflict resolution applies to the table in the position given by `ordinal_tn` counting from left to right in the tables parameter list. If omitted, the default is `M`.
- **customhandler_tn**: For MMR only: For the conflict resolution option or the standby conflict resolution option, specify `customhandler_tn` as the function name with an optional schema prefix (formatted as `schema.function_name`) as given in the `CREATE FUNCTION` command for the custom conflict handling function created for the table in the tables parameter list at the position indicated by `ordinal_tn`. The custom conflict handling function must be added to the master definition node. See Section 6.6.8.2 for an example of adding the custom conflict handling function using PSQL. The custom handler name option must be specified if and only if the conflict resolution option or the standby conflict resolution option is set for custom conflict handling with the `C` value.
- **-repgrouptype**: Specify `s` if this command applies to a single-master replication system. Specify `m` if this command applies to a multi-master replication system. Note: This parameter is not required and may be completely omitted. It is present to provide support for its usage in previous xDB Replication Server CLI versions.

#### Example
```sh
$ java -jar edb-repcli.jar -addtablesintopub analysts_managers -repsvrfile ~/pubsvrfile.prop -tables edb.jobhist -views edb.salesemp
```
**Output:**
```
Adding tables to publication analysts_managers ...
Tables:[[edb.jobhist, TABLE], [edb.salesemp, VIEW]]
Filter clause:[null, null]
Publication updated successfully
```

### 8.3.19 Removing Tables from a Publication (removetablesfrompub)
The `removetablesfrompub` command removes tables from a publication.

#### Synopsis
```sh
-removetablesfrompub pubname -repsvrfile pubsvrfile [ -tables schema_t1.table_1 [ schema_t2.table_2 ] ...] [ -views schema_v1.view_1 [ schema_v2.view_2 ] ...]
```

#### Parameters
- **pubname**: The name of the publication from which tables or views are to be removed.
- **pubsvrfile**: The file containing the publication server login information.
- **schema_tn**: The name of the schema containing the nth table of the tables parameter list. This value is case-sensitive.
- **table_n**: The name of the nth table in the tables parameter list. This value is case-sensitive.
- **schema_vn**: The name of the schema containing the nth view of the views parameter list. This value is case-sensitive.
- **view_n**: The name of the nth view in the views parameter list. This value is case-sensitive.

#### Example
```sh
$ java -jar edb-repcli.jar -removetablesfrompub analysts_managers -repsvrfile ~/pubsvrfile.prop -tables edb.jobhist -views edb.salesemp
```
**Output:**
```
Removing tables and views from publication analysts_managers ...
Tables and views removed successfully
```

### 8.3.20 Adding Table Filters to a Publication (addfilter)
The `addfilter` command adds the definition of table filter rules to the specified publication. This makes the filter rules available for subsequent enablement on target subscriptions or non-MDN nodes. Enabling a filter rule on a specified, target subscription or non-MDN node results in the filtering of data during replication from the source table to the target table. If the filter rule is not enabled on a target subscription or non-MDN node, it has no impact during replication on such subscription or non-MDN node. See Section 8.3.38 for information on enabling table filter rules.

#### Synopsis
```sh
-addfilter pubname -repsvrfile pubsvrfile [ -tables schema_t1.table_1 [ schema_t2.table_2 ] ...]
```

This document provides a clear and structured guide to the various commands and their usage in the EDB Postgres Replication Server.