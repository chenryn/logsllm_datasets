title:Computationally complete symbolic attacker and key exchange
author:Gergei Bana and
Koji Hasebe and
Mitsuhiro Okada
Computationally Complete Symbolic Attacker and Key
Exchange
Gergei Bana∗
INRIA, Paris, France
PI:EMAIL
Graduate School of Systems and Information Engineering, University of Tsukuba
Koji Hasebe†
Tsukuba, Japan
PI:EMAIL
Mitsuhiro Okada‡
Department of Philosophy, Keio University, Tokyo, Japan
mitsu@abelard.ﬂet.keio.ac.jp
ABSTRACT
Recently, Bana and Comon-Lundh [7] introduced the notion of
computationally complete symbolic attacker to deliver uncondi-
tional computational soundness to symbolic protocol veriﬁcation.
First we explain the relationship between their technique and Fit-
ting’s embedding of classical logic into S4 [23]. Then, based on
predicates for “key usability”, we provide an axiomatic system in
their framework to handle secure encryption when keys are allowed
to be sent. We examine both IND-CCA2 and KDM-CCA2 encryp-
tions, both symmetric and asymmetric situations. For unforgeabil-
ity, we consider INT-CTXT encryptions. This technique does not
require the usual limitations of computational soundness such as
the absence of dynamic corruption, the absence of key-cycles or
unambiguous parsing of bit strings. In particular, if a key-cycle pos-
sibly corrupts CCA2 encryption, our technique delivers an attack.
If it does not endanger security, the security proof goes through.
We illustrate how our notions can be applied in protocol proofs.
Categories and Subject Descriptors
C.2.2 [Computer CommunicationNetworks]: Network Protocols
–Protocol Veriﬁcation
∗Partially supported by the ANR project ProSe ANR-2010-
VERS-004-01 and FCT project ComFormCrypt PTDC/EIA-
CCO/113033/2009. The work completed while this author was at
MSR-INRIA.
†Partially supported by JSPS KAKENHI Grant Number 24700022
‡Partially supported by Grant-in-Aid for Scientiﬁc Research
(MEXT-JSPS) #23120002 and #30224025, as well as by Program
for the Strategic Research Foundation (MEXT-Shigaku Zaidan)
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are not
made or distributed for proﬁt or commercial advantage and that copies bear
this notice and the full citation on the ﬁrst page. Copyrights for components
of this work owned by others than ACM must be honored. Abstracting with
credit is permitted. To copy otherwise, or republish, to post on servers or to
redistribute to lists, requires prior speciﬁc permission and/or a fee. Request
permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright 2013 ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516710
Keywords
Security Protocols; Computational Soundness
1.
INTRODUCTION
Approaches to computationally sound automated veriﬁcation of
security protocols can be divided into two groups. Works in one
[3, 20, 4, 17, 24] deﬁne symbolic adversaries, and soundness theo-
rems state that under certain circumstances, if there is no successful
symbolic attack, then there is no successful computational attack
either. The other group aims to work directly in the computational
model [21, 14, 9, 10, 8]. In this latter case, computational sound-
ness means that the properties on which symbolic manipulations
are conditioned hold computationally.
The ﬁrst group, where a symbolic attacker is deﬁned, gives hope
that already existing automated tools may be adopted for compu-
tationally sound veriﬁcation, but these soundness theorems require
large sets of assumptions. A number of assumptions, as well as
reasons why they are not realistic are discussed in [18]. Such as-
sumptions are, for example, that bit strings can be unambiguously
parsed into symbolic terms, or, that no key cycles occur, or, that all
keys are honestly generated, or, that there is no dynamic corruption.
Recently, Backes et al. in [2] showed a way to avoid some of these
problems such as key-cycles and badly generated keys, but for the
computational implementation of the encryption, they needed to
require a very strong notion called PROG-KDM security. More-
over, they still used an entire page to list all the further necessary
conditions (such as unambiguous parsing) limiting the computa-
tional implementation that they needed for soundness. But PROG-
KDM security and the other conditions are necessary only to re-
ceive computational guarantees for their symbolic analysis even if
computational security of the analyzed protocol holds without these
requirements. Their strong conditions are imposed on the compu-
tational implementation not for the security of the protocol, but for
the soundness of the analysis.
Recently, Bana and Comon-Lundh (BC) presented in [7] a new
kind of symbolic attacker. They called it computationally com-
plete symbolic adversary, as it is capable of doing everything that
a computational adversary is capable of. They observed that the
discrepancy between symbolic and computational proofs emerges
from the following fact: While the usual computational security
assumptions on the primitives (such as IND-CCA2 security of the
encryption) deﬁne what the adversary cannot violate (and the secu-
1231rity of the protocol is derived from the security of the primitives),
symbolic adversaries are deﬁned by listing all the adversarial ca-
pabilities (Dolev-Yao rules). Hence, to adjust the viewpoint of the
symbolic analysis to that of the computational, instead of listing ev-
ery kind of moves a symbolic adversary is allowed to do, Bana and
Comon-Lundh list a few rules (axioms) that the symbolic adversary
is not allowed to violate. Anything that does not contradict these
axioms is allowed for the adversary. Hence, a successful symbolic
attack in their case means that the violation of the security prop-
erty of the protocol is consistent with the axioms. The axioms that
are introduced must be computationally sound with respect to the
computational interpretation they deﬁned. Their general soundness
result is the following: Suppose that the computational implemen-
tation satisﬁes a set of axioms. If there is a successful PPT attacker
for which the number of sessions it exploits does not increase in-
deﬁnitely as the security parameter increases (there is a bound, but
it can be arbitrarily high), then there is also a successful symbolic
adversary complying with the set of axioms.
The difference between the original Dolev-Yao (DY) technique
and that of BC can be best understood from the following pictures.
In the DY technique, as more and more rules are added, the sym-
bolic adversarial capabilities are increasing, the symbolic adversary
covers more and more of the computational capabilities. However,
no-one has been able to come up with rules that properly cover all
possible computational capabilities. As Figure 1 shows, there are
always some computational capabilities that are not covered by the
DY ones. All computational soundness results that use the DY
symbolic adversaries in the end have to impose some signiﬁcant
limitations on the computational implementation.
In the BC approach, without axioms, the symbolic adversary is
allowed to do anything. As axioms are added, the symbolic adver-
sary’s capabilities are decreasing. Their main theorem is that if the
In [5], Bana et al.
axioms are computationally sound, the symbolic adversarial capa-
bilities cover all of the computational adversarial capabilities that
use bounded number of sessions. This is illustrated in Figure 2.
Clearly, if the symbolic adversary is too strong, security of proto-
cols cannot be proven. Therefore, the aim is to create a library of
axioms that are sound and are sufﬁcient to prove actual protocols.
introduced several modular, computation-
ally sound axioms, and veriﬁed secrecy and authentication of the
Needham-Schroeder-Lowe protocol to illustrate that the technique
can indeed be used to verify actual protocols. However, as Backes
et al. have pointed out in [2], the axioms in [5] were not suitable
when decryption keys were sent around in the course of the pro-
tocol (under encryptions for example, in a key distribution). The
current work aims to address this problem.
Before we describe this current work in detail, it is worth ask-
ing ourselves, does it really make sense to develop a new technique
when such tools as CryptoVerif and EasyCrypt exist? However,
EasyCrypt at its current stage is more for proving properties about
primitives, such as CCA2 security from hardness assumptions; it
is not suitable for more complex protocols. CryptoVerif is a very
powerful tool for protocol analysis, but if it fails to prove a proto-
col, other than its developer, it is difﬁcult for a user to know what
to do. The aim of the BC technique is to construct a relatively sim-
ple, intuitive system. If we remove the explanations, the axioms
in this paper are just a few lines, perhaps half a page, and most of
them are trivial. The BC technique is still lightweight compared to
CryptoVerif or EasyCrypt. BC does not use explicit probabilities,
neither game reductions. Proofs are readable to human, convenient
for human interaction if automated. NSL and the and the symmet-
ric Needham-Schroeder protocols were proven by hand, without
any assumption on parsing unambiguity. Available other proofs of
the NSL protocol including the one with CryptoVerif all assume
unambiguous parsing. The NSL proof with this technique reduces
to 2-3 pages with unambiguous parsing. For an initial decidability
result, see Comon et al. [19].
1.1 Our Work
In this paper we tackle the problem of key exchange, but along
the way we also present various other improvements on the orig-
inal work of Bana and Comon-Lundh. In their original work [7],
the general soundness theorem worked only for certain kinds of
ﬁrst-order formulas, and the non-negligible subsets of the compu-
tational execution had to satisfy a certain computability property.
Later, in the online version of their paper [6] they presented im-
proved computational semantics for the disjunction and existential
quantiﬁcation, and with that they could make the general sound-
ness proof work for any ﬁrst-order formula. But they still needed
the computability condition on the non-negligible subsets (not an
important limitation though, but not pretty). In this work, we re-
move this limitation with a trick in the soundness proof.
Bana and Comon-Lundh proved their general soundness theorem
directly from their deﬁnitions. This involved showing that although
computational semantics of their compound formulas are not de-
ﬁned as usual in Tarskian semantics, ﬁrst-order deduction rules and
axioms are valid with respect to their semantics too. As it turns
out, this actually follows from Fitting’s theorem of embedding ﬁrst-
order logic into ﬁrst-order S4 [23]. After introducing the basics, we
detail this relationship in the current work, and show how the BC
general soundness theorem follows from Fitting’s theorem.
In order to tackle key exchange, the necessary element to incor-
porate in the framework is key usability, an idea introduced in [22]
for a different framework. This notion is meant to express whether
a properly generated key, at a certain point of the protocol execu-
tion, is still usable for secure encryption or whether it has been
compromised. If a decryption key (or just a key in the symmetric
case) is sent in the clear, the encryption key associated to it cannot
be used for secure encryption any more. Or, a key that was sent in
a key cycle, may also have lost its capability to encrypt securely if
the encryption scheme is only IND-CCA2 secure. More generally,
keys can also be compromised in more subtle, non-trace fashion.
For overall consistency of notation, instead of key usability we
introduce the opposite, namely key compromise as a predicate. We
deﬁne key compromise predicates both for symmetric and asym-
metric encryptions, both for IND-CCA2 [12] and KDM-CCA2 [1,
15] cases, and also for INT-CTXT [13] unforgeability. There is
an essential difference from the way key usability was deﬁned in
[22], we explain that at our deﬁnition. (Furthermore, the axioms
in [22] were introduced to work for the Difﬁe-Hellmann key ex-
change, they are not helpful with other protocols.)
Further essential innovations of this paper are predicates repre-
senting adversarial derivability (computability) with oracle access.
This makes the axioms simpler than just using derivability as in
[5]. Depending on whether IND-CCA2 or KDM-CCA2 oracles are
Add MoreDY RulesComputationalAssumptionsAre Adjustedto SymbolicFormulationComputational AttackerDolev-Yao AttackerFigure 1AddComputationallySound AxiomsAdd MoreComputationallySound AxiomsComputational AttackerBana-Comon AttackerFigure 21232used, and on whether the encryption is symmetric or asymmetric,
we deﬁne four such derivability with oracle access predicates.
We introduce axioms and show that they are computationally
sound. The axioms are suitable for (but not limited to) inductive
reasoning: if something is uncompromised up-to a point, then cer-
tain newly sent messages do not destroy this property. They are
also entirely modular: Introducing further primitives will not de-
stroy the soundness of these axioms, they do not have to be proved
again.
If we want to prove a protocol that uses further primi-
tives such as signatures besides encryption, then we only have to
introduce new axioms for the new primitives. For encryption, the
current axioms can still be used unchanged. Hence, a library of ax-
ioms can be gradually developed by adding more and more axioms.
A nice feature of our new predicates for key usability and deriv-
ability with oracles is that we only have a single axiom requiring
CCA2 security of the encryption: the axiom stating that fresh keys