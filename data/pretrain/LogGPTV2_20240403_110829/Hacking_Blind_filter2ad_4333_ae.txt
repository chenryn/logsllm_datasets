resulting in a negative number. A check is performed if the
size (now negative) is smaller than the buffer size. The size is
then cast to an unsigned value passed as the length parameter
to read, making it possible to read a large chunk into a 4096-
byte buffer on the stack. Figure 14 shows the vulnerable code
in nginx.
c) Proprietary service: When sending a short string,
“OK” was read from the server. On a very long string, the
connection closed.
We ran Braille against all three attack scenarios, without
any application-speciﬁc optimizations, and the attack suc-
ceeded in all cases. We evaluate the following aspects:
1)
2)
3)
Performance: number of requests and time.
Stability: how robust the attack is.
Attack paired with source-code knowledge: whether
having access to the source code (but not the binary)
can make the attack better.
A. Performance
Table II shows the cumulative number of requests needed
for each attack phase. The attack can complete in under
4,000 requests, or 20 minutes. This is acceptable given that in
the past attacks on 32-bit ASLR required on average 32,768
requests [9]. In all cases, in about 1,500 requests the attack is
able to defeat canaries, ASLR and ﬁnd a stop gadget. That’s
how long it takes to go from zero knowledge to being able to
execute a useful code fragment. From then on, it’s a matter of
ﬁnding the BROP gadget which, depending on its popularity,
can take between 27 to 467 requests.
Table III shows how popular the BROP gadget is and how
many probes are expected to ﬁnd it in a sample set of binaries.
237
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
TABLE III.
BROP GADGET FREQUENCY.
Binary
proprietary service
MySQL
nginx
Apache
OpenSSH
BROP count
194
639
130
65
78
expected scan length (density)
154
501
566
860
972
dump bin
2222222
ﬁnd write
101
ﬁnd strcmp
61
stack reading
846
ﬁnd BROP gadget
469
ﬁnd PLT
702
Figure 15. Attack complexity for nginx. The number of requests needed
for each phase are shown. Broadly speaking, the attack’s complexity is split
in four parts: stack reading, ﬁnding the PLT, ﬁnding the BROP gadget, and
dumping the binary to ﬁnish the attack.
.text size
The data shows the number of BROP gadgets present, and
7×BROPcount (recall that 7 bytes can be skipped
their density:
per probe due to the size of the gadget). The BROP gadgets
appears very popular and can be found in under 1,000 address
probes. Note that in practice more requests will needed to
verify the gadget and weed out false positives.
After the BROP gadget is found, ﬁnding write takes
only a few additional requests, and can usually be found in
approximately 2,000 requests total. At this point the attack
is almost complete. One may choose to manually write
very speciﬁc parts of the binary to minimize the number of
requests based on the information learned. Otherwise, our
Braille tool starts dumping the binary from its start, until
the entire symbol table is dumped so that a shellcode can
be constructed. The attack typically completes within 500
additional requests (about 2,500 total). In the case of yaSSL, it
took many more requests to dump the binary because the buffer
being overﬂowed was very short and so Braille was limited in
how long the ROP chain could be. Braille was forced to dump
the binary in small chunks to ﬁnd a pop rdx; ret (a rare
gadget) before the rest of the binary could be downloaded in
larger chunks.
Figure 15 shows the complexity of the attack for nginx.
The attack’s overhead can be split into four parts: stack reading
(35%), ﬁnding the PLT (29%), ﬁnding the BROP gadget (20%)
and ﬁnishing off (16%). Note that if canaries are not used
(or can be bypassed, like in yaSSL) and the PIE ﬂag is not
used (the default) then stack reading can be avoided altogether.
Finding the PLT largely depends on the size of the executable
and how many PLT entries are skipped during a scan. The
BROP gadget scan will depend on its frequency, as previously
mentioned.
crash. nginx was fastest (only one minute) because a non-time
based stop gadget was used. An HTTP keep-alive connection
was used and so after the exploit request, a normal request was
sent to check if the connection was still alive. In the proprietary
server case instead, a timeout had to be used to determine if
the server was still alive which made the attack slower.
The attack clearly is noisy but we argue that if it executes
fast enough, the attacker may be able to perform whatever
activity he needs to do before getting caught. nginx for
example logs each crash, in a ﬁle owned by root. The server
runs as nobody so the attacker would not be able to erase
the logs. We notice, however, that the worker processes keep
ﬁle descriptors to the logs open, making it possible to write a
shellcode to call ftruncate to erase traces of the attack.
B. Stability
The three servers use worker processes very differently,
exercising BROP in different ways. In all cases the BROP
attack was reliable and completed unassisted without hanging
or causing denial-of-service.
MySQL is (typically) single process, multi-threaded. On a
crash, a script (mysqld safe) reexecutes the server. The BROP
attack works under the default conﬁguration (no PIE, but
canaries) despite the re-execution because the canary is never
hit thanks to how the bug is being exercised. If compiled with
the PIE ﬂag, the attack would not work as one couldn’t read
a (changing) return address from the stack to defeat ASLR.
This does not apply to nginx and the toy proprietary service
where due to their forking nature, the attack would succeed
even when PIE is used.
nginx has multiple worker processes and has a single-
threaded, event-based architecture. Most distributions conﬁg-
ure four worker processes by default. This makes it a tricky
scenario because an inﬁnite loop based stop gadget would hog
the worker completely, and one gets only four shots by default.
The stop gadget here was returning to a higher stack frame,
which avoided any blocking. With a specialized exploit, we
are able to exploit nginx even when conﬁgured to use a single
worker.
The proprietary server forked once per connection. This
makes the attack very reliable as there is a virtually inﬁnite
number of worker processes available. We did not know a
priori about the details of the server but it contained a few
unique things. The stack overﬂow was one stack frame above
the actual bug as there was a function that wrapped the read
system call. The server also contained a single loop, dependent
on a variable used to exit the loop when shutting the service
down. This created the additional challenge that the loop was
not easily usable as an inﬁnite loop gadget.
The stop gadgets for yaSSL+MySQL, nginx and the pro-
prietary server respectively were: futex, returning to a higher
call frame, and sleep.
The yaSSL+MySQL scenario offered a very small overﬂow
buffer and shows that BROP can work even with small buffers
(64 bytes are sufﬁcient).
The attack can complete within 20 minutes. MySQL took
a long time because it took a while for it to restart after each
The key to the success and stability of the BROP attack is
that the attacker needs to scan for a single item at any given
238
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
time. There are no dependencies between the items required for
the attack. Also, the items that are being looked for have very
prominent signatures (e.g., the PLT and BROP gadget) and no
false positives were found during the attack. The attack also
gets more robust as it progresses.
C. Source-code aid
If the attacker has some knowledge of the server (e.g.,
source code) the number of requests may be brought down.
In nginx for example, the attacker does not need to ﬁnd a
stop gadget because one is already present in a higher stack
frame. The attacker also has an idea of how large the binary
is and how many PLT entries there should be, making the
PLT scanning faster, e.g., by skipping more entries and starting
closer to the PLT. In the case of nginx, the overﬂow happens
right after a read call so rdi (the ﬁrst argument) has the socket
number. The attacker can exploit this fact by calling write
without setting rdi or calling dup2 to copy the ﬁle descriptor
to a ﬁxed number; by comparison the generic attack must
brute-force the ﬁle descriptor number. Knowing that reads are
non-blocking is also useful so that the IP fragmentation router
is used to trigger the overﬂow. With all this in mind, we wrote
an nginx optimized version of the BROP attack that took under
1,000 requests on a default Debian install (no canary or PIE).
This exploit should work on any distribution as it is not binary-
speciﬁc.
Source knowledge helped in the yaSSL case too. The
bug could be exploited in three ways, but only one allowed
circumventing canaries. All three vulnerabilities would have
to be revealed through remote fuzz testing and triggered
independently. BROP would only then succeed on the single
vulnerability where stack reading succeeds: the one where
canaries are not touched.
Based on source information, an attacker may determine
whether rdx has a sane value at the time of exploit. If so, the
attacker may skip having to ﬁnd strcmp to control rdx and
proceed with a more optimal attack.
We made some discoveries while blindly hacking the toy
proprietary service that would have been apparent upfront
given the source code and simpliﬁed the attack. During the
stack reading phase, we noticed that the number 4 was present
on the stack. This indeed was the socket number and the attack
could have avoided a ﬁle descriptor brute-force later on. Also,
when attempting to read the saved return address, a particular
return address was found that would force “OK” to be written
to the network. This could have been used as a stop gadget
avoiding having to scan for one.
Stack reading is a very useful tool when hacking blind. It
reveals whether canaries are used, frame pointers are enabled,
and possibly more. This helps in ﬁngerprinting the distribution
(based on defaults) or the environment being hacked. Stack
reading in the yaSSL case also noted revealed that the overﬂow
was occurring in the “opposite” direction due to pointer
arithmetic—the ﬁrst byte of the data being sent, rather than
the last one, was affecting whether the program crashed or
not.
XI. LIMITATIONS
The BROP attack has its limitations. We applied it only to
simple stack overﬂows. While it is a good starting point, many
vulnerabilities are more complex and heap-based.
Stack reading assumes that the attacker can overﬂow at
a byte granularity and controls the last byte being overﬂown
(e.g., a zero is not appended by the server).
The attack assumes that the same machine and process can
be hit after each attempt. Load balancers can cause the attack
to fail when PIE is used and canaries cannot be circumvented.
The attack also relies on a number of workers being
available and not ending up in a situation where all workers
become “stuck” in an inﬁnite loop. This makes the stop gadget
selection very important. Returning to a higher stack frame
is a key optimization here, where the worker is “resumed”
rather than caused to hang. If this cannot be done and there
are a limited number of worker processes, and the stop gadget
hangs them indeﬁnitely, the attack may not complete. nginx
is an example where this can happen as it can be conﬁgured
with a single worker and is event-based. However, BROP still
succeeds here because it is possible to return to a higher stack
frame.
XII. DISCUSSION
A. BROP in different OSes
Windows
(it
a fork-like API
so canaries and the text
lacks
has
only
CreateProcess)
segment’s
base address are guaranteed to be rerandomized after a crash,
making the system more robust against BROP-like attacks.
The Windows ABI also passes arguments in scratch registers
(e.g., rcx, rdx) making pop gadgets for them harder to ﬁnd.
Gadgets involving scratch registers are rare because they are
not preserved across function calls, so the compiler does not
need to save them to the stack. Such gadgets will likely only
exist as misaligned parses, making them less likely.
ASLR implementations vary by OS. Windows 8.1 and Mac
OS X randomize everything by default. Unfortunately, both
systems rerandomize system libraries only at reboot time. This
can create a BROP-like environment for leaking pointers to
system libraries. Reboots can be rare, especially on clients and
laptop systems where users may suspend and resume more
often than reboot. Mac OS X also only supports 16-bits of
entropy for ASLR, placing it far behind other 64-bit operating
systems. On Linux, the effectiveness of ASLR depends on the
distribution and its PIE conﬁguration. For example, Ubuntu
does not enable PIE by default, but has enabled it on a per-
application basis based on risk [16].
B. BROP beyond stack overﬂows
The BROP attack focuses on stack attacks, the simplest
possible scenario. We did not consider heap exploits, though
these might be possible. The bootstrap, for example, would
be different, as a stack pivot gadget would have to be found
after the stop gadget. A useful stack pivot gadget would be, for
example, mov rax, rsp; ret assuming that rax points
to an attacker-controlled buffer at the time of exploit. The
attacker can now set up a stack and ROP chains in that buffer.
239
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
TABLE IV.
CODE DIVERSITY WHEN THE SAME VERSION OF NGINX
(1.4.0) IS COMPILED WITH DIFFERENT DEBIAN LINUX VERSIONS.
Squeeze
Wheezy
Jessie (testing)
Text Size
0x5fc58
0x61f0c
0x5fbd2
Text Start
0x4031e0
0x4032f0
0x402ee0
# of Gadgets
206
255
323
C. Client-side vs. server-side
It may be possible to launch a BROP-like attack on
clients. Browsers like Chrome, for example, launch plugins
in a separate process for robustness. JavaScript can be used to
create multiple vulnerable plugin objects, attempt an exploit,
and detect whether they have crashed or not without user
interaction. We note, however, that there is typically lower
hanging fruit on the client-side. Having the execution power
of JavaScript available can offer more signaling mechanisms
to the attacker compared to a coarse-grained crash / no-crash
as used in server-side BROP.
An interesting distinction between client-side and server-
side is that often client-side attacks are less targeted. For
example, an attacker may want to own any given number of
clients to steal information or construct a botnet. This makes
exploits for older targets with fewer protections (e.g., Windows
XP) still valuable, as there still are people running those
conﬁgurations. Server-side attacks instead are often targeted as
one wants to attack a particular site. Relying on 32-bit targets
or speciﬁc binary installations, or simply moving on to the next
victim may not be an option. This makes BROP very valuable
on the server-side as it gives an attacker a larger hammer when
needed.
D. Variance in binaries
Counterintuitively, closed-source systems (though open-
binary) make writing exploits simpler. Many exploits that
target Windows are very robust as they build ROP chains
on DLLs that seldom change, and so only a few versions
exist. In an open-source setting,
there are multiple binary
variants and the attacker must build a different ROP chain for
each. Table IV shows the size and start address of different
distributions of the exact same nginx version. As we see there
is a lot of variability based on the build environment, the
version of the libraries it was linked against, and the compiler
version, even though the same Linux distribution was being
used. Even a single byte difference or offset will defeat a
statically precomputed ROP chain.
Worse for the attacker, a system may be manually compiled
by the end user, making it impossible for the attacker to build
a ROP chain ofﬂine as the binary is unknown. In such cases
BROP is a necessity. Even if a server uses a precompiled
binary, it can be difﬁcult to determine which particular one is
being used: remote OS ﬁngerprinting reveals an approximate
kernel version, not a distribution. BROP in fact can be used
to ﬁngerprint distributions and applications (e.g., based on
whether canaries are present, vsyscall behavior, etc.).
E. Remote fuzz testing
The BROP attack could be a powerful tool for hacking
proprietary closed-binary services when coupled with a remote
fuzz tester. We note that in two of the example applications