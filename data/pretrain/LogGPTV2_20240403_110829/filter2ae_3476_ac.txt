图中可以看到，原来的BLS指令被转化为了BHI指令，也就是`小于等于`的跳转逻辑变成了`大于`。这样一来，原本跳转的目标逻辑现在就可以紧贴到BHI指令下面。从而使得条件跳转指令的修复代码也和其它指令一样，成为一个连续的代码段。并且BHI后面的参数在Thumb16中将固定为12。那么对于多条条件跳转指令来说呢？如下图：
从图中可以看出来，又回到了最初从上到下一一对应，末尾跳转的形式。而之前新增的`pstInlineHook->backUpFixLengthList`数组依然保留了，因为当跳转的目标地址依然在备份代码范围内时需要用到它，[《Android
Inline Hook中的指令修复》](https://gtoad.github.io/2018/07/13/Android-Inline-Hook-Fix/)中会讲解，此处不再赘述。
## 使用说明（以Xposed为例）
使用者先找到想要Hook的目标，然后在本项目中写自己需要的Hook功能，然后在项目根目录使用`ndk-build`进行编译，需要注意的是本项目中需要严格控制arm和thumb模式，所以`/jni/InlineHook/`和`/jni/Interface/`目录下的Android.mk中`LOCAL_ARM_MODE
:=
arm`不要修改，因为现在默认是编译成thumb模式，这样一来第二步和自定义的Hook函数就不再是设计图中的ARM模式了。自己写的Hook功能写在InlineHook.cpp下，注意`constructor`属性，示例代码如下：
    //用户自定义的stub函数，嵌入在hook点中，可直接操作寄存器等改变游戏逻辑操作
    //这里将R0寄存器锁定为0x333，一个远大于30的值
    //@param regs 寄存器结构，保存寄存器当前hook点的寄存器信息
    //Hook功能函数一定要有这个pt_regs *regs输入参数才能获取stub中r0指向的栈上保存的全部寄存器的值。
    void EvilHookStubFunctionForIBored(pt_regs *regs)
    {
        LOGI("In Evil Hook Stub.");
        //将r0修改为0x333
        regs->uregs[0]=0x333;
    }
    void ModifyIBored() __attribute__((constructor));
    /**
     * 针对IBored应用，通过inline hook改变游戏逻辑的测试函数
     */
    void ModifyIBored()
    {
        LOGI("In IHook's ModifyIBored.");
        int target_offset = 0x43b8; //想Hook的目标在目标so中的偏移
        bool is_target_thumb = true; //目标是否是thumb模式？
        void* pModuleBaseAddr = GetModuleBaseAddr(-1, "libnative-lib.so"); //目标so的名称
        if(pModuleBaseAddr == 0)
        {
            LOGI("get module base error.");
            return;
        }
        uint32_t uiHookAddr = (uint32_t)pModuleBaseAddr + target_offset; //真实Hook的内存地址
        //之所以人来判断那是因为Native Hook之前肯定是要逆向分析一下的，那时候就能知道是哪种模式。而且自动识别arm和thumb比较麻烦。
        if(is_target_thumb){ 
            uiHookAddr++;
            LOGI("uiHookAddr is %X in thumb mode", uiHookAddr);
        }
        else{
            LOGI("uiHookAddr is %X in arm mode", uiHookAddr);
        }
        InlineHook((void*)(uiHookAddr), EvilHookStubFunctionForIBored);
    }
本项目在有Xposed框架的测试机上运行时，可以使用一个插件在APP的起始环节就加载本项目的so。本人使用这个插件加载so就很方便啦，不用重启手机，它会自动去系统路径下寻找文件名符合的so然后加载到目标APP中。这个插件的关键代码如下：
    public class HookToast implements IXposedHookLoadPackage{
        @Override
        public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpp) throws Throwable {
            String packageName="";
            String activityName="";
            String soName="";
            try{
                packageName = "com.sec.gtoad.inline_hook_test3"; //目标app
                activityName = "com.sec.gtoad.inline_hook_test3.MainActivity"; //目标app的启动activity
                soName = "InlineHook";                          //我们so的名称（libInlineHook.so）
            } catch (Exception e){
                XposedBridge.log("parse result " + e.getMessage());
                Log.w("GToad", "parse result " + e.getMessage());
            }
            if(!lpp.packageName.equals(packageName)) return;
            XposedBridge.log("load package: " + lpp.packageName);
            Log.w("GToad","load package: " + lpp.packageName);
            hookActivityOnCreate(lpp,activityName,soName,packageName); //当启动Activity开始创建时，就加载我们的so库
        }
        public static boolean loadArbitrarySo(XC_LoadPackage.LoadPackageParam lpp, String soname, String pkg) {
            if (lpp.packageName.equals(pkg)) {
                XposedBridge.log("trying to load so file: " + soname + " for " + pkg);
                Log.w("GToad","trying to load so file: " + soname + " for " + pkg);
                try {
                    Log.w("GToad","loading1");
                    // /vendor/lib:/system/lib 只要把我们的so放到这些目录之一插件就能找到
                    Log.w("GToad",System.getProperty("java.library.path")); 
                    System.loadLibrary(soname);
                    Log.w("GToad","loading2");
                } catch (Exception e) {
                    XposedBridge.log("failed to load so");
                    Log.w("GToad","failed to load so");
                    return false;
                }
                XposedBridge.log("" + soname + " loaded");
                Log.w("GToad","" + soname + " loaded");
                return true;
            }
            XposedBridge.log("" + pkg + " not found");
            Log.w("GToad","" + pkg + " not found");
            return false;
        }
            private void hookActivityOnCreate(final XC_LoadPackage.LoadPackageParam lpp, final String activityName, final String soName, final String packageName){
            try {
                XposedHelpers.findAndHookMethod(activityName, lpp.classLoader, "onCreate", Bundle.class, new XC_MethodHook() {
                    @Override
                    protected void beforeHookedMethod(MethodHookParam mhp) throws Throwable {
                        XposedBridge.log("before " + activityName + ".onCreate");
                        Log.w("GToad","before " + activityName + ".onCreate");
                        super.beforeHookedMethod(mhp);
                    }
                    @Override
                    protected void afterHookedMethod(MethodHookParam mhp) throws Throwable {
                        XposedBridge.log("after " + activityName + ".onCreate");
                        Log.w("GToad","after " + activityName + ".onCreate");
                        loadArbitrarySo(lpp,soName,packageName);
                        super.afterHookedMethod(mhp);
                    }
                });
            }  catch (Throwable e) {
                XposedBridge.log("" + activityName + ".onCreate " + e.getMessage());
            }
        }
    }
## 总结
本项目最终形式为一个so库，它可以与任何一个能加载它的工具进行配合，达到Native
Hook的效果。并且Hook的最小粒度单位是任意一条汇编指令，这在日常测试中作用很大。
真的非常感谢腾讯游戏安全实验室和ele7enxxh大牛的开源项目为本项目提供的参考。
## 文末说明
由于本项目的初衷是为了满足作者自身测试需求才做的，所以关于文中的一些解释与需求可能与别的同学的理解有偏差，这很正常。此处补充解释一下：
  1. 关于目前公开的Android Native Hook工具寥寥无几这一点我补充解释一下：唯一一个公开且接近于Java Hook的Xposed那样好用的工具可能就只是Cydia Substrate了。但是该项目已经好几年没更新，并且只支持到安卓5.0以前。还有一个不错的Native Hook工具是Frida，但是它的运行原理涉及调试，因此遇到反调试会相当棘手。由于本人反调试遇到的情况较多，所以Frida不怎么用。
  2. 为什么不在thumb-2模式设计时都使用thumb？因为第二部分写汇编的时候用arm写起来容易，而且文中解释过无论跳转前是arm还是thumb模式，跳转后想要用thumb模式都需要给地址+1，所以当然能用arm的地方就用arm，这样方便。并且如果有多个不同模式的Hook目标，这时用户自定义的Hook函数只能统一编译成同一个模式，所以选择ARM模式。
## 参考
[腾讯游戏安全实验室](http://gslab.qq.com/portal.php?mod=view&aid=168)
[ele7enxxh的博客](http://ele7enxxh.com/Android-Arm-Inline-Hook.html)
* * *