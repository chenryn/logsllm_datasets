### Type Definition: `acme_new_key_inner_jws`

```fsharp
type acme_new_key_inner_jws = {
  alg: string; // Signature algorithm used to sign this JWS
  jwk: DY.Crypto.bytes; // The new (public) account key
  inner_url: url; // The same URL as in the "outer" JWS
  inner_payload_account: url; // Account URL, a.k.a. kid
  inner_payload_old_key: DY.Crypto.bytes; // Old public key
  inner_signature: DY.Crypto.bytes // Signature over all of the above, using jwk
}
```

### Serialization Function

Given the above type definition, we implement a function to serialize an instance of `acme_new_key_inner_jws` into a single `DY.Crypto.bytes`. Note that `url` is another high-level data structure for which we have implemented similar serialization functions.

```fsharp
module DC = DY.Crypto // Define a shorthand

// Type of the serialization function
val serialize_acme_new_key_inner_jws: acme_new_key_inner_jws -> DC.bytes

// Implementation
let serialize_acme_new_key_inner_jws input_object =
  DC.concat (DC.string_to_bytes input_object.alg) (
    DC.concat input_object.jwk (
      DC.concat (serialize_url input_object.inner_url) (
        DC.concat (serialize_url input_object.inner_payload_account) (
          DC.concat input_object.inner_payload_old_key input_object.inner_signature
        )
      )
    )
  )
```

### Parsing Function

We also need a corresponding parsing function to convert `DY.Crypto.bytes` back into our high-level data structure. The return type of this function is a `result`, which can either be `Success` or `Error`. If the bytes do not encode a valid `acme_new_key_inner_jws`, an `Error` is returned.

```fsharp
val parse_acme_new_key_inner_jws: DC.bytes -> result<acme_new_key_inner_jws>

let parse_acme_new_key_inner_jws input_bytes =
  match DC.split input_bytes with
  | Error e -> Error e
  | Success (ser_alg, t1) ->
    match DC.split t1 with
    | Error e -> Error e
    | Success (jwk, t2) ->
      match DC.split t2 with
      | Error e -> Error e
      | Success (ser_url, t3) ->
        match DC.split t3 with
        | Error e -> Error e
        | Success (ser_acc, t4) ->
          match DC.split t4 with
          | Error e -> Error e
          | Success (old_key, sig) ->
            match DC.bytes_to_string ser_alg, parse_url ser_url, parse_url ser_acc with
            | Success alg, Success url, Success acc ->
              let obj: acme_new_key_inner_jws = {
                alg = alg;
                jwk = jwk;
                inner_url = url;
                inner_payload_account = acc;
                inner_payload_old_key = old_key;
                inner_signature = sig
              } in
              Success obj
            | _ -> Error "Wrong format of acme_new_key_inner_jws"
```

### Lemmas for Inverse Functions

Finally, we need to prove that the serialization and parsing functions are inverses of each other. This involves proving the following lemmas:

```fsharp
val parse_acme_new_key_inner_jws_lemma:
  inner_jws: acme_new_key_inner_jws ->
  Lemma
  (ensures (
    let serialized = serialize_acme_new_key_inner_jws inner_jws in
    parse_acme_new_key_inner_jws serialized == Success inner_jws
  ))

val parse_acme_new_key_inner_jws_lemma2:
  t: DC.bytes ->
  Lemma
  (requires (Success? (parse_acme_new_key_inner_jws t)))
  (ensures (
    let parsed = Success?.v (parse_acme_new_key_inner_jws t) in
    serialize_acme_new_key_inner_jws parsed == t
  ))
```

Thanks to F★'s theorem prover, we get the first lemma for free by asking F★ to come up with a proof on its own:

```fsharp
let parse_acme_new_key_inner_jws_lemma obj = ()
```

To prove the second lemma, we need to provide some simple annotations to tell F★ to use the corresponding lemma for values of the `url` type:

```fsharp
let parse_acme_new_key_inner_jws_lemma2 t =
  // Note that F★ has to prove here that t is a concatenation of bytes. This is implied
  // by the precondition to this lemma (see its type above).
  let Success (ser_alg, t1) = DC.split t in
  let Success (jwk, t2) = DC.split t1 in
  let Success (ser_url, t3) = DC.split t2 in
  let Success (ser_acc, t4) = DC.split t3 in
  // Instantiate similar lemmas for the two bytes representing URLs
  parse_url_lemma2 ser_url;
  parse_url_lemma2 ser_acc
```

Similar functions and lemmas exist for all our high-level data structures.

### Details on Integrity Properties

In the following sections, we provide more details on the integrity properties presented in Section 7.2, including the (simplified) F★ formulations and high-level overviews of the proofs. For the complete F★ proofs, refer to our supplementary material [10].

#### B.1 Server-Side Integrity

The server-side integrity property is formulated as an F★ lemma (slightly simplified for presentation):

```fsharp
val server_side_integrity_property:
  s: principal -> // any (server) principal
  trace_idx: nat -> // any trace index
  cert: certificate -> // any certificate
  dom: domain -> // any domain
  acc_pub_key: bytes -> // any public key
  DY unit
  (requires (λ t0 → // any trace t0 ...
    valid_trace t0 ∧ // .. that is valid
    server_issued_certificate_for_domain_with_account_key s trace_idx cert dom acc_pub_key ∧
    ¬(is_principal_corrupted_before len(t0) (domain_principal_mapping dom))))
  (ensures (λ t0 _t1 → (t0 == t1 ∧ (
    let client = domain_principal_mapping dom in
    client_sent_newOrder_request_for_domains client cert.domains ∧
    client_owns_public_key client acc_pub_key
  )))
```

**Proof Structure:**

- The state invariant of the server requires that whenever the server sets the status of an authorization to valid, the owner of the domain also owns the private key to the corresponding account public key.
- When receiving the CSR, the server verifies that the JWS containing the CSR is signed with this public key.
- The signature predicate ensures that the client that signed the JWS previously created an ACME order with the exact set of domains as in the CSR.
- These statements are encoded in the state invariant of the ACME server.
- The property can be easily proven from the guarantees provided by the `valid_trace` predicate.

#### B.2 Client-Side Integrity

The client-side integrity property is formulated as an F★ lemma (slightly simplified for presentation):

```fsharp
val client_side_integrity_property:
  c: principal -> // any (client) principal
  trace_idx: nat -> // any trace index
  cert: certificate -> // any certificate
  DY unit
  (requires (λ t0 → // any trace t0 ...
    valid_trace t0 ∧ // .. that is valid
    client_stores_certificate c cert trace_idx
  ))
  (ensures (λ t0 _t1 → (t0 == t1 ∧ (
    domains_previously_stored_in_order c cert.domains trace_idx
  )))
```

**Proof Structure:**

- The client-side integrity property is essentially implied by the trace invariant.
- The state invariant of the ACME client requires that whenever the client stores a certificate, there is a state entry in which it stores information about a CSR.
- The set of domains of the certificate must be the same as the domains used for this CSR.
- The client function that stores the certificate needs to ensure that this property holds true.
- The client state invariant also requires that the client previously updated its state and stored a state entry with data contained in an ACME order.
- When storing the CSR, the client uses the domains of an ACME order stored in one of its state entries, ensuring the condition of the state invariant holds true.

### Coverage of the ACME Standard

We illustrate the coverage of our model with respect to the ACME standard in Table 2. This table lists all relevant sections from [5] that describe either data structures or functionalities and points to places in our model where the respective part is implemented. See our supplementary material for the full code [10].

| **Relevant Sections of the ACME Standard** | **Counterparts in Our Model** |
|-------------------------------------------|-------------------------------|
| 6. Message Transport                      | - `generate_signature_for_jws_acme_request` (ACME.Data)<br>- `verify_jws_acme_request` (ACME.Server.HelperFunctions)<br>- `gen_http_request_with_server_domain_in_header` (ACME.Client.HelperFunctions) |
| 6.1 HTTPS Requests                        | - `generate_jws_acme_request` (ACME.Data)<br>- `verify_jws_acme_request` (ACME.Server.HelperFunctions) |
| 6.2 Request Authentication                | - `generate_jws_acme_request` (ACME.Data)<br>- `verify_jws_acme_request` (ACME.Server.HelperFunctions) |
| 6.3 GET and POST-as-GET Requests          | - `generate_jws_acme_request` (ACME.Data)<br>- `verify_jws_acme_request` (ACME.Server.HelperFunctions) |
| 6.4 Request URL Integrity                 | - `acme_server_new_nonce` (ACME.Server)<br>- `generate_jws_acme_request` (ACME.Data)<br>- `client_finds_valid_replay_nonce` (ACME.Client.HelperFunctions) |
| 6.5 Replay Protection                     | - `acme_server_new_nonce` (ACME.Server)<br>- `acme_client_request_replay_nonce_nw` (ACME.Client)<br>- `acme_client_receives_and_saves_replay_nonce_nw` (ACME.Client) |
| 6.6 Rate Limits                           | - (We do not enforce rate limits, a safe over-approximation.) |
| 6.7 Errors                                | - (We do not model aborting error messages. See also the discussion in Section 6.4.) |
| 7. Certificate Management                 | - `Type acme_account` (ACME.Data)<br>- `Type acme_order` (ACME.Data)<br>- `Type acme_authorization` (ACME.Data)<br>- `Type acme_challenge` (ACME.Data)<br>- `Type acme_status` (ACME.Data) |
| 7.1 Resources                             | - `acme_server_new_nonce` (ACME.Server)<br>- `acme_client_request_replay_nonce_nw` (ACME.Client)<br>- `acme_client_receives_and_saves_replay_nonce_nw` (ACME.Client) |
| 7.2 Getting a Nonce                       | - `acme_server_new_nonce` (ACME.Server) |
| 7.3 Account Management                    | - `acme_server_update_account_key` (ACME.Server) |
| 7.4 Applying for Certificate Issuance     | - `acme_client_orders_certificate_http` (ACME.Client)<br>- `acme_client_sends_CSR_http` (ACME.Client)<br>- `acme_client_retrieves_certificate_http` (ACME.Client)<br>- `acme_client_receives_and_saves_certificate` (ACME.Client)<br>- `acme_server_new_order` (ACME.Server)<br>- `acme_server_finalize_order` (ACME.Server)<br>- `acme_server_retrieve_cert` (ACME.Server) |
| 7.5 Identifier Authorization              | - `acme_client_send_authorization_request_i_http` (ACME.Client)<br>- `acme_client_receive_authorization_response_http` (ACME.Client)<br>- `acme_client_triggers_challenge_i_http` (ACME.Client)<br>- `acme_server_identifier_authz` (ACME.Server)<br>- `acme_server_challenge_response` (ACME.Server) |
| 7.6 Certificate Revocation                | - (Certificates in our model are valid indefinitely and cannot be revoked. See also the discussion in Section 6.4.) |
| 8. Identifier Validation Challenges       | - `acme_client_challenge_response_http` (ACME.Client)<br>- `acme_server_receive_challenge_verification_http` (ACME.Server) |
| 8.1 Key Authorizations                    | - (Challenges in our model remain in the processing state in case the validation does not succeed. See modeling decisions in Section 6.) |
| 8.2 Retrying Challenges                   | - `acme_client_challenge_response_http` (ACME.Client)<br>- `acme_server_trigger_challenge_verification` (ACME.Server)<br>- `acme_server_receive_challenge_verification_http` (ACME.Server) |
| 8.3 HTTP Challenge                        | - (As discussed in Section 6.4, we only model the HTTP challenge, which is structurally similar.) |
| 8.4 DNS Challenge                         | - (Not covered in our model.) |

From these restrictions on the client state implied by the state invariant, it follows that whenever the client stores a certificate in its state, it previously must have created an ACME order with the same set of domains as in the certificate.