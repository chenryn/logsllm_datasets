type acme_new_key_inner_jws = {
alg: string; // Signature algorithm used to sign this JWS
jwk: DY.Crypto.bytes; // The new (public) account key
inner_url: url; // The same url as in the "outer" JWS
inner_payload_account: url; // Account URL, a.k.a. kid
inner_payload_old_key: DY.Crypto.bytes; // Old public key
inner_signature: DY.Crypto.bytes // Signature over all of the above, using jwk
}
Given this definition, we implement a function to serialize an in-
stance of acme_new_key_inner_jws to a single DY‚òÖ bytes. Note
that url is another of our high-level data structures for which we
implemented similar serialization functions used here:
module DC = DY.Crypto // Define a shorthand
// Type of the serialization function
val serialize_acme_new_key_inner_jws: acme_new_key_inner_jws ‚Üí DC.bytes
// Implementation
let serialize_acme_new_key_inner_jws input_object =
DC.concat (DC.string_to_bytes input_object.alg) (
DC.concat input_object.jwk (
DC.concat (serialize_url input_object.inner_url) (
DC.concat (serialize_url input_object.inner_payload_account) (
DC.concat
input_object.inner_payload_old_key
input_object.inner_signature ))))
Of course, we also need a corresponding parsing function, turning
DY‚òÖ bytes into our high-level data structure. Note that the return
type of this function is a result, i.e., can either be Success 
or Error : If the bytes given to this function does
not encode an acme_new_key_inner_jws, an Error is returned.
val parse_acme_new_key_inner_jws: DC.bytes ‚Üí result acme_new_key_inner_jws
let parse_acme_new_key_inner_jws input_bytes =
match DC.split input_bytes with
| Error e ‚Üí Error e
| Success (ser_alg, t1) ‚Üí (
match DC.split t1 with
| Error e ‚Üí Error e
| Success (jwk, t2) ‚Üí (
match DC.split t2 with
| Error e ‚Üí Error e
| Success (ser_url, t3) ‚Üí (
match DC.split t3 with
| Error e ‚Üí Error e
| Success (ser_acc, t4) ‚Üí (
match DC.split t4 with
| Error e ‚Üí Error e
| Success (old_key, sig) ‚Üí (
match
DC.bytes_to_string ser_alg,
parse_url ser_url,
parse_url ser_acc
with
| Success alg, Success url, Success acc ‚Üí (
let obj:acme_new_key_inner_jws = {
alg = alg;
jwk = jwk;
inner_url = url;
inner_payload_account = acc;
inner_payload_old_key = old_key;
inner_signature = sig
} in
Success obj
)
| _‚Üí Error "Wrong‚ê£format‚ê£of‚ê£acme_new_key_inner_jws" )))))
Finally, we need to prove that serialization and parsing are inverses
of each other, i.e., we need to prove the following:
val parse_acme_new_key_inner_jws_lemma:
inner_jws:acme_new_key_inner_jws ‚Üí
Lemma
(ensures (
let serialized = serialize_acme_new_key_inner_jws inner_jws in
parse_acme_new_key_inner_jws serialized == Success inner_jws
))
val parse_acme_new_key_inner_jws_lemma2:
t:DC.bytes ‚Üí
Lemma
(requires (Success? (parse_acme_new_key_inner_jws t)))
(ensures (
let parsed = Success?.v (parse_acme_new_key_inner_jws t) in
serialize_acme_new_key_inner_jws parsed == t
))
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2615Thanks to F‚òÖ‚Äôs theorem prover, we get the first lemma for free ‚Äî
we just have to ask F‚òÖ to come up with a proof on its own:
let parse_acme_new_key_inner_jws_lemma obj = ()
To prove the second lemma, we have to provide some simple anno-
tations to tell F‚òÖ to use the corresponding lemma for values of the
url type:
let parse_acme_new_key_inner_jws_lemma2 t =
// Note that F‚òÖ has to prove here that t is a concatenation of bytes. This is implied
// by the precondition to this lemma (see its type above).
let Success (ser_alg, t1) = DC.split t in
let Success (jwk, t2) = DC.split t1 in
let Success (ser_url, t3) = DC.split t2 in
let Success (ser_acc, t4) = DC.split t3 in
// Instantiate similar lemmas for the two bytes representing URLs
parse_url_lemma2 ser_url;
parse_url_lemma2 ser_acc
Similar functions and lemmas exist for all our high-level data struc-
tures.
B DETAILS ON THE INTEGRITY PROPERTIES
In the following, we give more details on the integrity properties
presented in Section 7.2, in particular, the (simplified) F‚òÖ formu-
lations for both properties and simplified high-level overviews of
both proofs. We refer to our supplementary material [10] for the
complete F‚òÖ proofs.
B.1 Server-Side Integrity
The formulation of the server-side integrity property as an F‚òÖ
lemma looks as follows (slightly simplified for presentation):
val server_side_integrity_property:
s:principal ‚Üí // any (server) principal
trace_idx:nat ‚Üí // any trace index
cert:certificate ‚Üí // any certificate
dom:domain ‚Üí // any domain
acc_pub_key:bytes ‚Üí // any public key
DY unit
(requires (ùúÜ t0 ‚Üí ( // any trace t0 ...
valid_trace t0 ‚àß // .. that is valid
// the following predicate is true if the server s set its state at
// trace index trace_idx with a state entry in which it stored the certificate
// cert, the key acc_pub_key, and if the domain dom is one of the
// domains for which the certificate is issued
server_issued_certificate_for_domain_with_account_key s trace_idx
cert dom acc_pub_key ‚àß
// the following line requires that the principal that
// owns the domain is not corrupted by the attacker
¬¨(is_principal_corrupted_before len(t0) (domain_principal_mapping dom)))))
(ensures (ùúÜ t0 _t1 ‚Üí (t0 == t1 ‚àß (
// the client that owns the domain ...
let client = domain_principal_mapping dom in
// sent an order request for the domains of the certificate ...
client_sent_newOrder_request_for_domains client certificate.domains ‚àß
// and owns the private key to the account public key
// (ensured by the labeling of the key)
client_owns_public_key client acc_pub_key
))))
Proof Structure. As already explained in Section 7.1, the state
invariant of the server requires that whenever the server sets the
status of an authorization to valid, the owner of the domain also
owns the private key to the corresponding account public key
contained in the verification response (recall that this guarantee is
provided by the authenticated send predicate). The account public
key sent in the verification response is stored by the server.
When receiving the CSR, the server verifies that the JWS con-
taining the CSR is signed with this public key. Therefore, it follows
that the principal that owns the domain also owns the public key
that the server associates with the certificate (i.e., the predicate
client_owns_public_key holds true, see the post-condition of the
F‚òÖ representation of the theorem).
As already described in Section 7.1, the server obtains guar-
antees by the signature predicate when verifying the JWS. Be-
sides the guarantees mentioned in Section 7.1 regarding the private
key of the certificate, the signature predicate also states that the
client that signed the JWS previously created an acme order with
the exact set of domains as in the CSR (i.e., that the predicate
client_sent_newOrder_request_for_domains is fulfilled).
These statements (essentially the post-condition of the theorem)
are encoded in the state invariant of the ACME server.
As already described in Section 7.1, the final properties follow
from the valid_trace predicate, which also contains the (application-
specific) state invariants. Thus, the property can be easily proven
from the guarantees provided by valid_trace.
B.2 Client-Side Integrity
The formulation of the client-side integrity property as an F‚òÖ lemma
looks as follows (again slightly simplified for presentation):
val client_side_integrity_property:
c:principal ‚Üí // any (client) principal
trace_idx:nat ‚Üí // any trace index
cert:certificate ‚Üí // any certificate
DY unit
(requires (ùúÜ t0 ‚Üí ( // any trace t0 ...
valid_trace t0 ‚àß // .. that is valid
// the following predicate is true if the client c set a state at trace index
// trace_idx with a state entry in which it stored the certificate cert
client_stores_certificate c cert trace_idx
)))
(ensures (ùúÜ t0 _t1 ‚Üí (t0 == t1 ‚àß (
// the following predicate is true if the client c set a state prior to
// the trace index trace_idx in which it stored an ACME order with the
// domains of the certificate cert
domains_previously_stored_in_order c cert.domains trace_idx
))))
Proof Structure. As for the previous properties, the client-side in-
tegrity property is essentially implied by the trace invariant. Again,
the predicate that is central to this proof is the state invariant. The
state invariant of the ACME client requires that whenever the client
stores a certificate that it receives, there is a state entry in which it
stores information about a CSR (previously created by the client).
More precisely, the set of domains of the certificate must be the
same as the domains used for this CSR.
As already explained previously, the client function that stores
the certificate needs to ensure that this property holds true, or else,
the client would not be able to update its state.
Furthermore, the client state invariant has several requirements
on the state entries used for storing the CSR information mentioned
above. One of these requirements is that the client previously up-
dated its state, and in this state, stored a state entry with data
contained in an ACME order. More precisely, this order needs to
contain the same set of domains as stored for the CSR state entry.
Thus, when storing the CSR, the corresponding client function
needs to ensure that this condition holds true. In this case, when
constructing the CSR, the client uses the domains of an ACME
order stored in one of its state entries, and therefore, it can easily
be shown that the condition of the state invariant holds true.
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2616Relevant sections of [5]
6. Message Transport
6.1 HTTPS Requests
6.2. Request Authentication
6.3. GET and POST-as-GET Requests
6.4. Request URL Integrity
6.5. Replay Protection
6.6. Rate Limits
6.7. Errors
7. Certificate Management
7.1. Resources
7.1.1. Directory
7.1.2. Account Objects
7.1.3. Order Objects
7.1.4. Authorization Objects
7.1.5. Challenge Objects
7.1.6. Status Changes
7.2. Getting a Nonce
7.3. Account Management
7.4. Applying for Certificate Issuance
7.5. Identifier Authorization
7.6. Certificate Revocation
8. Identifier Validation Challenges
8.1. Key Authorizations
8.2. Retrying Challenges
8.3. HTTP Challenge
8.4. DNS Challenge
Coverage in our model (definitions in modules)
(We overapproximate by not using TLS, see modeling decisions in Section 6.)
generate_signature_for_jws_acme_request (ACME.Data), verify_jws_acme_request (ACME.Server.HelperFunctions)
gen_http_request_with_server_domain_in_header (ACME.Client.HelperFunctions)
generate_jws_acme_request (ACME.Data), verify_jws_acme_request (ACME.Server.HelperFunctions)
acme_server_new_nonce (ACME.Server), generate_jws_acme_request (ACME.Data),
client_finds_valid_replay_nonce (ACME.Client.HelperFunctions),
(We do not enforce rate limits, a safe over-approximation.)
(We do not model aborting error messages. See also the discussion in Section 6.4.)
(The directory only contains static meta-information about the server. We do not model the
directory.)
Type acme_account (ACME.Data)
Type acme_order (ACME.Data)
Type acme_authorization (ACME.Data)
Type acme_challenge (ACME.Data)
Type acme_status (ACME.Data)
acme_server_new_nonce (ACME.Server), acme_client_request_replay_nonce_nw (ACME.Client),
acme_client_receives_and_saves_replay_nonce_nw (ACME.Client)
We support account key rollover with the function acme_server_update_account_key (ACME.Server)
Client‚Äôs functions (ACME.Client): acme_client_orders_certificate_http, acme_client_sends_CSR_http,
acme_client_retrieves_certificate_http, acme_client_receives_and_saves_certificate
Server‚Äôs functions (ACME.Server): acme_server_new_order, acme_server_finalize_order,
acme_server_retrieve_cert
Client‚Äôs functions (ACME.Client): acme_client_send_authorization_request_i_http,
acme_client_receive_authorization_response_http, acme_client_triggers_challenge_i_http,
Server‚Äôs functions (ACME.Server): acme_server_identifier_authz, acme_server_challenge_response
(Certificates in our model are valid indefinitely and cannot be revoked. See also the discussion
in Section 6.4.)
acme_client_challenge_response_http (ACME.Client), acme_server_receive_challenge_verification_http (ACME.Server)
(Challenges in our model remain in the processing state in case the validation does not succeed.
See modeling decisions in Section 6.)
acme_client_challenge_response_http (ACME.Client), acme_server_trigger_challenge_verification (ACME.Server),
acme_server_receive_challenge_verification_http (ACME.Server)
(As discussed in Section 6.4, we only model the HTTP challenge, which is structurally similar.)
Table 2: Relevant sections of the ACME standard and their counterparts in our model
From these restrictions on the client state implied by the state
invariant, it follows that whenever the client stores a certificate in
its state, it previously must have created an ACME order with the
same set of domains as in the certificate.
C COVERAGE OF THE ACME STANDARD
We illustrate the coverage of our model w.r.t the ACME standard
in Table 2. In this table, we list all relevant sections from [5] that
describe either data structures or functionalities and point to places
in our model where the respective part is implemented. See our
supplementary material for the full code [10].
Session 10B: Crypto and Protocol Security CCS ‚Äô21, November 15‚Äì19, 2021, Virtual Event, Republic of Korea2617