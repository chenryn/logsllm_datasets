that FDm prefers mutation over merging to avoid a rapid growth
in document size. Also, ùëÅ1, ùëÅ2, and ùëÄ are all configurable and the
heuristic values we use are 50, 5, and 5.
4.4 Distributed Fuzzing Environment
Due to the enormous input space and high execution cost of a
browser, it is common practice to run multiple DOM fuzzer in-
stances in a cluster. FreeDom is also designed to be cluster-friendly
with a centralized network. Basically, each FreeDom instance runs
on a dedicated core of a client machine and exchanges fuzzing data
with a central server. During generation-based fuzzing, an FDg
instance simply transfers crash information to the server. When
performing mutation-based fuzzing, the server additionally main-
tains the overall code coverage and a queue storing the documents
in FD-IR that discover new code blocks. An FDm instance always
fetches a testcase from the head of the queue for mutation. Mean-
while, the testcase itself is moved to the tail of the queue. The FDm
instance also maintains a local coverage map that is periodically
updated with the global coverage from the server. A newly gener-
ated document that increases the local coverage is uploaded to the
server for verification. If the document indeed increases the overall
coverage, the server pushes it to the head of the queue for mutation.
In general, the fuzzing infrastructure adopted by FreeDom is light-
weight and fully utilizes large-scale resources for DOM fuzzing.
5 IMPLEMENTATION
FreeDom is implemented in around 30K lines of Python3 code,
which consists of three main components.
Fuzzing engine. The majority of the code is used to implement
FreeDom‚Äôs fuzzing engine. First, all the FD-IR structures of a doc-
ument from the DOM tree and its nodes, CSS rules, event han-
dlers and their APIs and context information down to thousands
of Values are implemented as Python classes, which have their
specific implementation of generation and mutation based on the
context. In addition, FreeDom utilizes Python Pickle to serialize
a document in FD-IR into a string for storage and deserialize the
string back to FD-IR structures for mutation. FreeDom currently
covers the most common DOM features supported by a modern
browser, including HTML, CSS, SVG, and WebGL.
Browser instance management.
FreeDom now supports
fuzzing Apple Safari (WebKit), Mozilla Firefox, and Google
Chrome. FreeDom compiles target browsers with AddressSanitizer
(ASan) [48] for memory-error detection. To automate browser
process creation and termination, FreeDom either uses existing
libraries [13, 35] for Firefox and WebKit on Linux or implements
custom scripts for Safari on macOS and Chrome on Windows.
Distributed fuzzing protocol. The current implementation of
FreeDom involves a central server that runs Redis [46], a fast in-
memory database, for storing fuzzing data. We use a Redis list to
store crashes. For FDm instances, we use an additional list to save
interesting documents and a set to record the distinct code blocks
that are covered in total.
Moreover, we introduce fewer than 10 lines of C++ code into
the WebKit project to increase browser throughput for FDm. Par-
ticularly, we determine the code point where the handling of an
onload event finishes. Then, we make the browser check whether
or not this happens in the main frame as the onload events in the
embedded frames (i.e., ) may take place in advance. If so,
we consider that the document is mostly processed but may still
have ongoing or planned transitions, animations, or painting tasks.
To leave a certain time for rendering those dynamic graphical ef-
fects, the browser sets an alarm clock on-the-fly, which will kill
itself within a fixed amount of time. This ad-hoc timeout value used
by FreeDom is 500ms considering the scale of its generated inputs.
Though the optimization requires source code modification, it is
Session 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9‚Äì13, 2020, Virtual Event, USA978FreeDom: Engineering a State-of-the-Art DOM Fuzzer
CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
technically straightforward to apply it in the same way to other
mainstream browsers like Chrome and Firefox with a tiny patch.
6 EVALUATION
We evaluate FreeDom by answering four questions:
‚Ä¢ Q1. How effective is FreeDom in discovering new bugs in the
‚Ä¢ Q2. Does FreeDom become state of the art due to its context-
‚Ä¢ Q3. How effective is coverage-driven mutation in fuzzing DOM
‚Ä¢ Q4. How does our browser optimization impact fuzzing through-
mainstream browsers (¬ß6.1)?
aware approach (¬ß6.2)?
engines (¬ß6.3)?
put and results (¬ß6.4)?
Experimental Setup. We run FreeDom and other DOM fuzzers in
a small fuzzing cluster that consists of five 24-core servers running
Ubuntu 18.04 with AMD Ryzen 9 3900X (3.8GHz) processors and
64GB memory. To display browser windows on a server without a
graphical device, we leverage X virtual frame buffer (Xvfb), which
is the most common solution in DOM fuzzing. Each fuzzer instance
owns a separated Xvfb session for running its generated inputs.
6.1 Discovering New DOM Engine Bugs
We have intermittently run FDg for finding zero-day vulnerabilities
in the DOM engines of all the mainstream browsers for two months.
By default, FDg fuzzes the HTML, CSS, and SVG standards together
since their corresponding implementations in a browser are closely
related. FDg separately fuzzes WebGL on different OS platforms,
whose implementation is independent of other browser components
but involves platform-dependent code. Table 5 lists a total of 24 bugs
found by FDg that have been confirmed by the browser vendors,
including 14 bugs in Safari/WebKit, four bugs in Chrome, and five
bugs in Firefox. Besides a few assertions, null dereferences, and
correctness issues, the vast majority of the bugs are security-critical,
which have helped us gain 10 CVEs and 65K USD bug bounty
rewards so far. The fuzzing results reflect that FreeDom is effective
in discovering new bugs in the latest DOM engines.
6.2 Effectiveness of Context-aware Fuzzing
To prove that FreeDom is state of the art with its context-aware
fuzzing approach, we compare the fuzzing performance of FDg
with that of Dharma [34] and Domato [11]. In this evaluation, we
always run 100 instances of every fuzzer in study on five machines
against an ASan build of WebKitGTK 2.28.0 on Linux for 24 hours
(see Appendix C for the detailed build options). According to public
record [11], Domato has found the most bugs in WebKit, which is
thus selected as our evaluation target. To retrieve the code coverage
of a document generated during the experiment, we re-run it with
an instrumented WebKit that profiles the visited basic blocks of the
DOM engine part (i.e., Source/WebCore/).
6.2.1 Comparison with Dharma. We first evaluate FDg with
Dharma, a generation-based fuzzer based on context-free gram-
mars. Dharma officially only provides the grammar file for SVG
documents with no support of HTML tags, CSS rules, and DOM
APIs. For a fair comparison, we use the original Dharma and
modify FDg to only generate the initial DOM tree with SVG tags
Figure 5: Achieved code coverage and triggered crashes of
FDg and Dharma when fuzzing SVG documents in WebKit
with 100 cores for 24 hours. Dharma fails to find any crash
during three fuzzing runs. In (b), we differentiate unique
crashes found by FDg based on their crashing PC values.
and attributes and skip the other two parts in a document. We also
configure the number of  elements, SVG nodes rooted in an
 element, and attributes of a node in a document output by
FDg to ensure that both fuzzers generate the inputs of similar size
and complexity. Both fuzzers execute a document for at most 5
seconds. The experiment is repeated for three times.
Figure 5 presents the experimental result. FDg visits 13.96% more
code blocks than Dharma on average. More importantly, FDg sta-
bly triggers at least 7 unique crashes during each fuzzing run and
totally discovers 18 unique ones. Meanwhile, Dharma fails to find
any crashes during the experiment. There is a higher chance that
Dharma may trigger a few of FDg‚Äôs crashes by adding more random
options for generating certain constant values like integers and
images into its grammar. Nevertheless, around 60% of the crashes
triggered by FDg involve SVG animations. Similar to Domato dis-
cussed in ¬ß3.1, Dharma, based on its context-free grammar, is not
aware of the exact element whose attributes are to be animated
and simply animates an attribute that is randomly selected from
30 candidates that are neither all animatable nor always owned
by the element. Therefore, Dharma rarely constructs a valid SVG
animation. By contrast, FDg is more likely to generate working
animations and manages to trigger those crashes, which prelim-
inarily reflects the effectiveness of context-aware generation in
DOM fuzzing.
6.2.2 Comparison with Domato. We then evaluate FDg and Do-
mato, both of which fuzz the HTML, SVG, and CSS specifications
together by default. Although the two fuzzers have completely dif-
ferent designs, we do not introduce any change to Domato‚Äôs fuzzing
engine and take great effort to configure FDg to generate the docu-
ments that have complexity similar to those generated by Domato.
We present the detailed composition of a random document gener-
ated by both fuzzers in Appendix D for reference. In addition, both
fuzzers run with a 5-second timeout and are evaluated three times.
Figure 6 presents the evaluation results. With nearly 3% more exe-
cutions, the overall code coverage of Domato is slightly higher than
that of FDg by 2.69% on average. Nevertheless, FDg triggers around
9.7√ó more crashes and 3√ó more unique ones than Domato. In par-
ticular, FDg discovers 112 unique crashes in three runs, 11 of which
have explicit security implications reported by ASan (i.e., heap
0.00.20.40.60.81.0Time(h)0.00.20.40.60.81.0010201012141618Blockcoveragerate(%)(a)CodecoverageFDgDharma01020020406080100Numberofcrashes(b)Crash#total(FDg)#unique(FDg)Session 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9‚Äì13, 2020, Virtual Event, USA979CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
Wen Xu, Soyeon Park, and Taesoo Kim
context complexity of such a PoC that Domato fails to produce, we
list an example in Appendix E for additional reference.
In a nutshell, our in-depth analysis shows that (1) the context-
aware approach adopted by FDg still manages to find the old types
of bugs that existing DOM fuzzers target by their context-free
grammars, and (2) the additional context information maintained
by FDg for generation is effective in finding many more bugs in
the latest DOM engines that have not been explored. Therefore, we
believe FreeDom‚Äôs design fundamentally outperforms the state-of-
the-art DOM fuzzer, Domato.
6.3 Effectiveness of Coverage-driven Fuzzing
We now evaluate FDm to understand the effectiveness of coverage
guidance in DOM fuzzing. Similarly, we launch 100 FDm instances
to fuzz the optimized build of WebKitGTK 2.28.0 on 100 cores for 24
hours. The DOM engine part of WebKit is instrumented for block
coverage measurement. Meanwhile, we introduce a tailored version
of FDm, called FDm-, whose merging phase is removed. We run FDm-
together with FDm to verify the effectiveness of testcase merging
(see ¬ß4.3.3) in DOM fuzzing. Both FDm and FDm- bootstrap with
two simple seeds: a blank document and a document with a single
 element under . Table 4 presents the fuzzing results,
and the average coverage growth is illustrated by Figure 7(a). We
interpret the evaluation results as follows.
Effectiveness of merging. FDm completely outperforms FDm-
with 1.8% more code coverage and 1.8√ó more unique crashes, two
of which are heap-related memory issues. By contrast, FDm- fails
to find any security-related crashes. All of the above facts indicate
that adopting document merging largely improves the performance
of coverage-guided DOM fuzzing.
Effectiveness of coverage-guided mutation. Compared to FDg,
FDm- and FDm visit around 1.2% and 2.62% more code blocks, re-
spectively. More importantly, FDm successfully discover three new
crashes, including two security-related ones that are never trig-
gered by running FDg for 24 hours. As a generation-based fuzzer,
FDg intends to generate a large-size document that contains a lot of
randomly chosen elements, attributes, and CSS rules and hopefully
covers various DOM features within one execution. Meanwhile,
FDm focuses on repetitive mutations and gradual growth of its in-
puts. Compared to FDg, FDm is more likely to trigger the crashes
that require strict or subtle settings. For example, one crash missed
by FDg is triggered by an SVG  element that has a single
attribute x="8192em". The element is required to have no surround-
ing elements and no additional attributes or CSS styles that affect
its text position, which is difficult to find in a document output by
FDg that has a deep element tree, 10 attributes for an element, and
50 CSS rules. The PoC of another new crash has three sibling 
elements to animate the same attribute of their parent. FDg selects
child elements and a parent attribute to be animated uniformly
from various available candidates and therefore rarely generates
such a document from a statistical perspective. By contrast, FDm
equipped with fine-grained mutation strategies manages to grow a
blank document into the inputs of these new crashes step by step.
Limitation of coverage-guided mutation. Unfortunately, we
witness the weak implication of code coverage for finding bugs
when comparing FDm to FDg. With 3.5√ó more executions and a
Figure 6: Achieved code coverage and triggered crashes of
FDg and Domato for a 24-hour run with 100 cores. Note
that we use a log scale on the right side to present the total
number of crashes. We differentiate unique crashes based
on their crashing PC values.
#Crashes
None
CDV1
Data Dependence
CDV2
N/A
N/A
CDV3
N/A
N/A
CDV4
N/A
5
78
34
20 (25.64%)
8 (10.25%)
1 (20.00%)
49 (62.82%)
9 (26.47%)
4 (80.00%)
21 (26.92%)
20 (58.82%)
Domato
FDg
Both
Table 3: The unique crashes discovered by Domato, FDg,
and both fuzzers during three 24-hour runs. We also count
the number of crashes that have one of the four types of
context-dependent values (CDVs) described in ¬ß3.1. Note
that some crashes that involve more than one type of CDVs
are counted more than once.
14 (17.94%)
1 (2.94%)
buffer overflow and use-after-free bugs rather than null pointer
dereferences and infinite recursions). By contrast, Domato only
finds a total of 39 unique crashes, three of which are security-related.
More importantly, 34 (87%) crashes found by Domato are also trig-
gered by FDg. The evaluation results indicate that the ability of
FreeDom to find bugs in the latest DOM engine largely surpasses
that of the state-of-the-art DOM fuzzer.
To further understand how context awareness enables FDg to
outperform Domato, we minimize the inputs of 117 unique crashes
found by both fuzzers into PoCs with the HTML minimizer provided
by ClusterFuzz. We then determine what types of data dependencies
(see ¬ß3.1) every PoC file involves through manual inspection, which
is presented in Table 3. Among the PoCs of 39 crashes found by
Domato, a majority of them do not contain any context-dependent
part. Around 25% of them have context-dependent CSS selectors
(i.e., CDV1), which Domato has certain chances to construct cor-
rectly through a fixed number of predefined elements, classes, and
tags. At most times, a minimized PoC generated by Domato only
remains the universal selector (i.e., *), which is context-free. Mean-
while, the context-dependent selectors generated by FDg are much
more likely to be valid and thus FDg manages to find another 49
crashes that require specific live elements to be styled. Furthermore,
during nearly 5 million executions in total, Domato fails to trigger
any crash but one that involves any of the other three types of
data dependencies, which are largely not addressed by its static
grammar. Contrary to Domato, FDg manages to generate a number
of PoCs that cover from CDV1 to CDV4. To have a grasp on the
0.00.20.40.60.81.0Time(h)0.00.20.40.60.81.001020404244464850Blockcoveragerate(%)(a)CodecoverageFDgDomato01020020406080100Numberofuniquecrashes(b)Crash#unique(FDg)#unique(Domato)#total(FDg)#total(Domato)102103104Numberofcrashes(logscale)Session 3E: Fuzzing/Trusted Execution Environments CCS '20, November 9‚Äì13, 2020, Virtual Event, USA980FreeDom: Engineering a State-of-the-Art DOM Fuzzer
CCS ‚Äô20, November 9‚Äì13, 2020, Virtual Event, USA
79.67
11.67
21
68.33
331.67
11
0
6
#Unique
#Security #New
#Crash
47058.67
Execs/s Coverage rate
47.40(¬±0.05)%
18.17
47.97(¬±0.18)%
74.73
48.64(¬±0.13)%
63.94
ID
FDg
FDm-
FDm
Table 4: Fuzzing results of running FreeDom with several
approaches against WebKit for 24 hours. We list the total
number of unique security-related crashes found in three
fuzzing runs and the average values for other metrics. The
New column presents the number of distinct crashes that are
only found by the coverage-guided mutation-based fuzzing.
-
1