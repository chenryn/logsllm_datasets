s ,Eu
s and Eu
y.
system [12]. This approach, however, is (i) vulnerable to re-
played sensor logs in cooperative stealthy attacks [19], and
(ii) orthogonal to PLC-Sleuth and thus not discussed here.
Also, the fact that G includes two types of edges/weights dif-
fers it from the traditional structure learning graphs [20,21].
Next we explain PLC-Sleuth’s classiﬁcation of nodes and
edges. For the ease of description, we use si, y j, and uk to
denote nodes belonging to S, Y, and U, respectively, and use
ey j
si and euky j to represent edges belonging to Ey
Setpoint Node Set S. A setpoint node si ∈ S denotes an
expected state of system, which will not ﬂuctuate when the
system is operating, as shown in Fig. 4(a) and Figs. 20(a)-
20(c) in Appendix.
Sensor Node Set Y. A sensor node y j ∈ Y captures the
system’s real-time state. Because of the environment noise
and the sensor measurement error, the readings of y j show
small but consistent vibrations, as observed in Fig. 4(b) and
Figs. 20(d)-20(n) in Appendix.
Command Node Set U. A command node uk ∈ U reﬂects
the actuation to achieve the pre-deﬁned system state, and
ﬂuctuates with the readings of the corresponding sensor. The
issued command uk will be smooth to protect the actuator, as
shown in Fig. 4(c) and Figs. 20(o)-20(q) in Appendix.
Error Weight Set Wy
wy j
si ∈ Wy
the corresponding setpoint si over the recent l samples,
s . The weight of control error edge
s captures the difference between system state y j and
w(y1,··· ,yd )
si
l
∑
t=1
= |
(si(t)− f (y1(t),··· ,yd(t)))|,
(3)
where d is the number of sensors used to estimate the system
state using function f , which can be obtained from control
algorithms’ expressions or binary ﬁles [22].
Command Weight Set Wu
y . Mutual information (MI) — a
metric commonly used to characterize conditional depen-
dency between variables using their posterior probability dis-
tribution [23] — is an intuitive metric to deﬁne command
weight wuky j ∈ Wu
y . Speciﬁcally, the weight of command edge
can be deﬁned as the normalized mutual information, i.e.,
wuk
y j =
I(xi,uk)
H(uk)
,
(4)
336    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
5000Time (0.5s)4.34.54.7Flow (L/min)5000Time (0.5s)3035u2 (%)(a) cooling water loop
(b) tower liquid level loop
(a) cooling water loop
(b) tower liquid level loop
Figure 5: Static correlations (calculated according to Eq. (4))
between SEDS’s commands and sensor readings.
Figure 6: Transition correlations (calculated according to
Eq. (7)) between SEDS’s commands and sensor readings.
where xi is the control error between si and y j, H(uk) is the
entropy of the recent sequence of commands uk, and I(xi,uk)
denotes the MI between xi and uk, which is calculated using
the joint probability density function of variable xi and uk
(denoted as p(ξ,η)) as
I(xi,uk) = ∑
ξ∈X
(cid:18) p(ξ,η)
p(ξ,η)log
p(ξ)p(η)
∑
η∈U
(cid:19)
(5)
However, because a variable’s posterior probability only
depicts static information, MI has limited ability to quantify
the dynamic correlation between sensor measurement y and
command u. Fig. 5 shows the scatter plot of SEDS’s sensor
readings {y2, y3} and control commands {u2, u3}, showing
their low correlation when only considering samples collected
at a given time instant — the weighting scheme in Eq. (4)
may not work well for PLC-Sleuth.
.
To mitigate the above limitation, we deﬁne a novel transi-
tion correlation, using the correlation between the two time
series of ∆u and y, as visualized in Fig. 6 where the close-
to-diagonal path indicates much stronger correlation (when
compared to Fig. 5).
Speciﬁcally, inspired by the fact that the command uk is
triggered according to the current and historical values of its
corresponding error series xi = si−yi, we deﬁne the transition
mutual information (TMI) as,
∑
η∈U1
T MI(xi,∆uk) = ∑
ξ∈X τ
(cid:18) p(ξ,η)
p(ξ,η)log
p(ξ)p(η)
where τ is the length of sequences used for characterizing
variables’ transitions. This way, PLC-Sleuth calculates the
command weight wuky j as
(cid:19)
(6)
,
Figure 7: Control graph of SEDS.
Note that, again, both the out-degree of {y1,y2,y3} and the in-
degree of {u1,u2,u3} are 1. The sensor variables {y4, . . . ,y11},
which are used for system monitoring only, are not shown in
Fig. 7 for clarity.
4 Design of PLC-Sleuth
Fig. 8 presents the logic ﬂow of PLC-Sleuth: constructing
the control graph G(V, E, W) of the system-of-interest by iden-
tifying the variable’s connections (i.e., edges E) and the corre-
sponding weight W, and monitoring the time series of weight
W u
y to detect and localize PLC attacks.
4.1 Construction of Control Graph
An intuitive way to construct the control graph is to have
system designers manually extract it from system documents
(e.g., engineering ﬂow diagrams, loop diagrams, logic dia-
grams, electrical control diagrams, etc.). However, this re-
quires signiﬁcant human efforts or ﬁeld-expertise and is error-
prone [24]. As an alternative, PLC-Sleuth constructs the
control graph G automatically with a data-driven approach,
using the historical (and normal) SCADA logs.
wuk
y j =
T MI(xi,∆uk)
H(∆uk)
.
(7)
4.1.1
Identifying Vertex Set
The weighting of MI and TMI are compared statistically
in Table 1 of Sec. 5.
Control Graph Example. As an example, Fig. 7 shows the
control graph G(VSEDS, ESEDS, WSEDS) of SEDS, where
VSEDS = {{s1,s2,s3},{y1,y2,y3},{u1,u2,u3}},
ESEDS = {{ey1
WSEDS = {{wy1
s3},{eu1
y1 ,eu2
s3},{wu1
y2 ,eu3
y1 ,wu2
s2 ,ey3
s2 ,wy3
s1 ,ey2
s1 ,wy2
y3}},
y2 ,wu3
y3}}.
PLC-Sleuth identiﬁes the nodes of G automatically using
the SCADA logs: (i) setpoint variables are of constant values,
(ii) sensor readings are of consistent and small vibrations, and
(iii) control commands are of continuous/smooth values, as
shown in Fig. 4. PLC-Sleuth ﬁrst identiﬁes the setpoint node
set S by ﬁnding the constant variables (i.e. H(si) = 0). Then
by calculating the vibrations-signal ratio (VSR) of variable y j,
PLC-Sleuth identiﬁes sensor node set Y from the variables
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    337
0.52.54.56.5flow measurement y2 (L/min)152535u2 (%)0.280.30.320.34level measurement y3 (m)10203040u3 (%)0.52.54.56.5flow measurement y2 (L/min)-0.20.20.6u2 (%)0.280.30.320.34level measurement y3 (m)-2-101u3 (%)s1y1s2y2s3y3u1u2u3coolingflowtowertemp.towerleveley1s1,wy1s1ey2s2,wy2s2ey3s3,wy3s3eu1y1,wu1y1eu2y2,wu2y2eu3y3,wu3y3Figure 8: Architecture of PLC-Sleuth.
with consistent ﬂuctuation. Here we deﬁne vibrations as the
curve crests/troughs y j(k) in y j, where y(cid:48)j(k)× y(cid:48)j(k + 1) m  µAlarm,LocationYVertex SetIdentiﬁcationhistorical dataPLC-SleuthControlGraphS, Y, UPLCPIIProgramPIOS, Y, UEdges Identiﬁcationonline dataEysIdentifyingEuyIdentifyingSingle Feedback LoopsCombinationMaster:EysIdentifyingErySlave:IdentifyingEuyEyrMultiple Feedback LoopsTracesTracesSCADAy1y2y3y4y5y6y7y8y9y10y11u1u2u3fluctuated variables in SEDS00.51VSRSensorCommande˜rm
˜yj of master loop not constructed by the transmit node, the
sensor node ˜yj is matched directly to the setpoint node ˜rm
of the slave loop. This process terminates when each of the
transfer node rm of the command edge erm
in master loop is
yj
matched with a slave loop. Then, by comparing the weights
of w ˜uk
˜y j), we determine the speciﬁc control
graph (i.e., single feedback loops or multiple feedback loops)
to which the nodes ˜si, ˜y j, ˜rm, ˆrn, ˜uk belong.
˜y j and w˜rm
˜y j (or wˆrn
4.2 Detection/Localization of PLC Intrusions
PLC-Sleuth then detects/localizes, at runtime, PLC intru-
sions using an online norm model constructed using G.
As illustrated in Sec. 2.3, tampering the control command
will violate the control invariants between commands and the
corresponding measurements. The violations of control invari-
ants will be observed as the changes of weights in G(V, E, W).
PLC-Sleuth uses a sliding window T to construct an online
detector that monitors the weights of edges in Eu
I(xi([t − T,t]),∆uk([t − T,t]))
y, by:
(8)
wuk
y j (t) =
H(∆uk([t − T,t]))
,
where xi([t − T,t]) corresponds to control errors of y j(t) in
window T and uk([t − T,t]) denotes the PLC’s control com-
mands in the same window.
Intrusion Detection. PLC-Sleuth uses a memory-based
method, such as the nonparametric CUmulative SUM
(CUSUM) [28], to alarm operators if an anomaly is detected
in Eq.(8). CUSUM is deﬁned recursively as
S0 = 0 and St = max(0, St−1 +|νt−1|− δ),
(9)
where νt is the weight error from the expected value ˆwuky j (t),
deﬁned as
y j (t)− ˆwuk
(10)
and δ is a small positive constant, set as δ > |νt−1| when
the system operates normally, preventing St from increasing