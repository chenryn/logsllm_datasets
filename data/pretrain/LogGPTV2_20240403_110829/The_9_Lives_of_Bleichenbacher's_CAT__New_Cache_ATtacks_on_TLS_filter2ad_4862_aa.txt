title:The 9 Lives of Bleichenbacher's CAT: New Cache ATtacks on TLS
Implementations
author:Eyal Ronen and
Robert Gillham and
Daniel Genkin and
Adi Shamir and
David Wong and
Yuval Yarom
(cid:19)(cid:17)(cid:18)(cid:26)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:1)(cid:52)(cid:90)(cid:78)(cid:81)(cid:80)(cid:84)(cid:74)(cid:86)(cid:78)(cid:1)(cid:80)(cid:79)(cid:1)(cid:52)(cid:70)(cid:68)(cid:86)(cid:83)(cid:74)(cid:85)(cid:90)(cid:1)(cid:66)(cid:79)(cid:69)(cid:1)(cid:49)(cid:83)(cid:74)(cid:87)(cid:66)(cid:68)(cid:90)
The 9 Lives of Bleichenbacher’s CAT:
New Cache ATtacks on TLS Implementations
Eyal Ronen
∗
, Robert Gillham
†
‡
, Daniel Genkin
, Adi Shamir
University of Michigan,
‡
§
¶
, David Wong
¶
Weizmann Institute,
†∗∗
, and Yuval Yarom
∗∗
NCC Group,
§
Data61
∗
†
Tel Aviv University,
University of Adelaide,
Abstract—At CRYPTO’98, Bleichenbacher published his sem-
inal paper which described a padding oracle attack against
RSA implementations that follow the PKCS #1 v1.5 standard.
Over the last twenty years researchers and implementors had
spent a huge amount of effort in developing and deploying
numerous mitigation techniques which were supposed to plug all
the possible sources of Bleichenbacher-like leakages. However,
as we show in this paper, most implementations are still vul-
nerable to several novel types of attack based on leakage from
various microarchitectural side channels: Out of nine popular
implementations of TLS that we tested, we were able to break the
security of seven implementations with practical proof-of-concept
attacks. We demonstrate the feasibility of using those Cache-like
ATacks (CATs) to perform a downgrade attack against any TLS
connection to a vulnerable server, using a BEAST-like Man in the
Browser attack. The main difﬁculty we face is how to perform
the thousands of oracle queries required before the browser’s
imposed timeout (which is 30 seconds for almost all browsers,
with the exception of Firefox which can be tricked into extending
this period). Due to its use of adaptive chosen ciphertext queries,
the attack seems to be inherently sequential, but we describe
a new way to parallelize Bleichenbacher-like padding attacks
by exploiting any available number of TLS servers that share
the same public key certiﬁcate. With this improvement, we
can demonstrate the feasibility of a downgrade attack which
could recover all the 2048 bits of the RSA plaintext (including
the premaster secret value, which sufﬁces to establish a secure
connection) from ﬁve available TLS servers in under 30 seconds.
This sequential-to-parallel transformation of such attacks can be
of independent interest, speeding up and facilitating other side
channel attacks on RSA implementations.
I. INTRODUCTION
“Those who’ll play with cats must expect to be scratched.”
– Miguel de Cervantes, Don Quixote.
The Public Key Cryptography Standard #1 (PKCS #1) [61]
is the main standard used for implementing the RSA public
key algorithm [59] in a large variety of security protocols.
Twenty years ago, Bleichenbacher [11] demonstrated that the
padding scheme deﬁned in PKCS #1 v1.5 (which is the
predominant mapping for converting shorter messages into
full length RSA plaintexts) is vulnerable to a padding oracle
attack. Speciﬁcally, given an indication whether the plaintext
which corresponds to a given ciphertext is correctly formatted,
an attacker can mount an adaptive chosen ciphertext attack
which recovers the full plaintext from any given ciphertext.
Since its publication, multiple Bleichenbacher-like attacks
have been demonstrated, exploiting a large variety of oracles,
including error messages [12, 42], timing variations [40, 48]
and memory access patterns [72]. After each attack, implemen-
tors adopted ad-hoc mitigation techniques in an effort to ensure
that the use of PKCS #1 v1.5 does not leak information on the
padding, resulting in complicated mitigation techniques that
are becoming increasingly difﬁcult to understand, implement,
and maintain. Thus, considering the number of demonstrated
attacks and the ongoing mitigation efforts, we set out in this
paper to answer the following basic question:
Are modern implementations of PKCS #1 v1.5 secure against
padding oracle attacks?
A. Our Contribution.
Regrettably, our answer to this question is negative, as the
vast majority of implementations we evaluated are still vul-
nerable to padding oracle attacks. Making the situation worse,
we show that padding oracle attacks can be made extremely
efﬁcient, via more careful analysis and novel parallelization
techniques. Finally, we show that while the use of RSA key
exchange is declining, padding oracles can be used to mount
downgrade attacks, posing them as a threat to the security of a
much larger number of connections. (Including those done via
protocols that do not even support the RSA key exchange.)
More speciﬁcally, our contributions are as follows.
New Techniques for Microarchitectural Padding Oracle
Attacks. We have tested nine fully patched implementations
of various RSA-based security protocols (OpenSSL, Amazon
s2n, MbedTLS, Apple CoreTLS, Mozilla NSS, WolfSSL,
GnuTLS, BearSSL and BoringSSL). While all of these imple-
mentations attempt to protect against microarchitectural and
timing side channel attacks, we describe new side channel
attack techniques which overcome the padding oracle counter-
measures. Notably, out of the nine evaluated implementations,
only the last two (BearSSL and BoringSSL) could not be
successfully attacked by our new techniques.
Downgrade Attacks. Next, we show the feasibility of per-
forming downgrade attacks against all of the deployed versions
of TLS, including the latest TLS 1.3 standard, which does
not even support RSA key exchange. More speciﬁcally, even
though the use of RSA in secure connections is diminishing
(only ≈ 6% of TLS connections currently use RSA [1, 51]),
this fraction is still too high to allow vendors to drop this
mode. Yet, as we show in Section VI, supporting this small
fraction of users puts everyone at risk, as it allows the attacker
(cid:165)(cid:1)(cid:19)(cid:17)(cid:18)(cid:26)(cid:13)(cid:1)(cid:38)(cid:90)(cid:66)(cid:77)(cid:1)(cid:51)(cid:80)(cid:79)(cid:70)(cid:79)(cid:15)(cid:1)(cid:54)(cid:79)(cid:69)(cid:70)(cid:83)(cid:1)(cid:77)(cid:74)(cid:68)(cid:70)(cid:79)(cid:84)(cid:70)(cid:1)(cid:85)(cid:80)(cid:1)(cid:42)(cid:38)(cid:38)(cid:38)(cid:15)
(cid:37)(cid:48)(cid:42)(cid:1)(cid:18)(cid:17)(cid:15)(cid:18)(cid:18)(cid:17)(cid:26)(cid:16)(cid:52)(cid:49)(cid:15)(cid:19)(cid:17)(cid:18)(cid:26)(cid:15)(cid:17)(cid:17)(cid:17)(cid:23)(cid:19)
(cid:21)(cid:20)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
to perform a downgrade attack by specifying RSA as the only
public key algorithm supported by the server.
Attack Efﬁciency. Rather then targeting premaster secrets of
individual connections, we adopt a BEAST-like [23] approach,
targeting instead the long term login tokens. As only a single
broken connection is sufﬁcient to recover the login token, in
Section VI we show that the query complexity of padding
oracle attacks can be substantially reduced (at the expense
of the success probability of breaking a speciﬁc connection),
while still preserving the attacker’s ability to extract login
tokens before the connection timeout enforced by almost all
web browsers.
Attack Parallelization.
As a ﬁnal contribution, we show
a novel relationship between padding oracle attacks and the
Closest Vector Problem (CVP). While some padding oracle
parallelization techniques exist [42], those techniques could
not overcome the sequential nature inherent in the use of adap-
tive chosen ciphertexts by (perfect) padding oracles attacks.
Using lattice reduction techniques we overcome this limitation
and are able to combine results from multiple parrallel attacks
targetting different servers that share the same RSA key. using
this technique, we show the feasibility of recovering a full
2048-bit RSA plaintext from ﬁve fully patched TLS servers
in under the 30 second timeout enforced by almost all web
browsers.
B. Software Versions and Responsible Disclosure
Our attacks were performed on the most updated versions of
the cryptographic libraries evaluated, as published at the time
of discovery. We compiled each library using its default compi-
lation ﬂags, leaving all side channel countermeasures in place.
Following the practice of responsible disclosure, we disclosed
our ﬁndings in August 2018 to all of the vendors mentioned in
this paper. We further participated in the design and the em-
pirical veriﬁcation of the proposed countermeasures. Updated
versions of the affected libraries were published concurrently
with the publication of a preprint of this paper, in a coordinated
public disclosure in November 2018. We note that, OpenSSL
patched two of the vulnerabilities we discovered independently
to and in parallel with our disclosure process. See Section IV-A
and Appendix A-A. The issues identiﬁed in this work have
been assigned the following CVE numbers: CVE-2018-12404,
CVE-2018-19608, CVE-2018-16868, CVE-2018-16869, and
CVE-2018-16870.
II. BACKGROUND
A. Padding Oracle Attacks on TLS
TLS has a long history of padding oracle attacks of different
types. Those attacks led to the development and implementa-
tion of new mitigation techniques, and then new attacks.
The Lucky 13 attack by AlFardan and Paterson [5] showed
how to use a padding oracle attack to break TLS CBC HMAC
encryption. Irazoqui et al. [39] and Ronen et al. [60] have
shown how to use cache attacks to attack code that has been
patched against the original attack.
After the publication of the Bleichenbacher attack,
the
TLS speciﬁcations deﬁned a new mitigation with the goal
of removing the oracle [19, 20, 21]. However,
it seems
that completely removing the oracle is a very difﬁcult task
as was shown by multiple cycles of new attacks and new
mitigations [12, 42, 48]. As we show in our paper, Bleichen-
bacher type attacks are still possible even on fully patched
implementations.
B. RSA PKCS #1 v1.5 Padding
In this section we describe the PKCS #1 v1.5 padding
standard, which dictates how a message should be padded
before RSA encryption. Let (N, e) be an RSA public key, let
(N, d) be the corresponding private key, and let (cid:2) be the length
of N (in bytes). The encryption of a message m containing
k ≤ (cid:2) − 11 bytes is performed as follows.
1) First, a random padding string PS of byte-length (cid:2) −
3 − k ≥ 8 is chosen such that PS does not contain any
zero-valued bytes.
to be 0x00||0x02||PS||0x00||m. Note that the
2) Set m∗
length of m∗
is exactly (cid:2) bytes.
3) Interpret m∗
as an integer 0 < m∗ < N and compute the
ciphertext c = m∗e mod N.
The decryption routine computes m(cid:3)
= cd mod N and parses
as a bit string. It then checks whether m(cid:3)
m(cid:3)
is of the from
= 0x00||0x02||PS(cid:3)(cid:3)||0x00||m(cid:3)(cid:3)
m(cid:3)
where P S(cid:3)(cid:3)
is a string
consisting of at least 8 bytes, all of them must be non-zero. In
case this condition holds the decryption routine returns m(cid:3)(cid:3)
.
Otherwise the decryption routine fails.
An alternative padding scheme, OAEP (Optimal asymmetric
encryption padding) is part of the newer versions of PKCS,
however TLS implementations do not use OAEP. Hence,
PKCS #1 v1.5 is the standard padding scheme used in TLS
implementations.
C. Bleichenbacher’s Attack on PKCS #1 v1.5 Padding
In this
section we provide a high level description
of Bleichenbacher’s “million message” attack [11] on the
PKCS #1 v1.5 padding standard described above. At a high
level, the attack allows an attacker to compute an RSA private
key operation (e.g., md mod N) on a message m of his choice
without knowing the secret exponent d.
Attack Prerequisites. Bleichenbacher’s attack assumes the
existence of an oracle Bl which given a ciphertext c as input
answers whether c can be successfully decrypted using RSA
PKCS #1 v1.5 padding as described above. More formally,
let (N, d) be an RSA private key. The oracle Bl performs the
following for every ciphertext c
(cid:2)
Bl(c) =
1 if cd mod N has a valid PKCS #1 v1.5 padding
0 otherwise
As was previously shown, such an oracle can be obtained by
several types of side channel leakage [12, 40, 42, 48, 72].
We now describe how an attacker can use the Bleichen-
bacher oracle Bl to perform an RSA secret key operation, such
(cid:21)(cid:20)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:49 UTC from IEEE Xplore.  Restrictions apply. 
Let c be an integer. To
as decryption or signature, on c without knowing the secret
exponent d. We refer the reader to [11] for a more complete
description.
High Level Attack Description.
compute m = cd mod N, the attack proceeds as follows.
• Phase 1: Blinding. The attacker repeatedly chooses random
integers s0 and computes c∗ ← c · se
0 mod N. The attacker
checks if c∗
is a valid PKCS #1 v1.5 ciphertext by evaluating
Bl(c∗
) =
1 is found. The phase and can be skipped completely if c
is already a valid PKCS #1 v1.5 ciphertext in which case
s0 = 1.
). This phase terminates when an s0 such that Bl(c∗
We note that when the oracle succeeds (Bl(c∗
) = 1) the at-
= m·s0 mod
tacker knows that the corresponding message m∗
N starts with 0x0002. Thus, it holds that m · s0 mod N ∈
[2B, 3B) where B = 28((cid:2)−2) and (cid:2) is the length of N in bytes.
Finally, the condition of m·s0 mod N ∈ [2B, 3B) implies that
there exists an integer r such that 2B ≤ m · s0 − rN < 3B,
or equivalently:
2B + rN
s0
≤ m < 3B + rN
s0
.
2B+rN
s0
s0
≤ m < 3B+rn
• Phase 2: Range Reduction.
Having established that
, the attacker proceeds to choose
a new random integer s, computes c∗ ← c · se mod N
and checks that Bl(c∗
) = 1. When a suitable s is found,
the adversary can further reduce the possible ranges of m,
see [11] for additional details. The attack terminates when
the possible range of m is reduced to a single candidate.
Attack Efﬁciency. For N consisting of 1024-bits, Bleichen-
bacher’s original analysis [11] requires about one million calls
to the oracle Bl (e.g., requiring the attacker to observe one
million decryptions). However, subsequent analysis has shown
that the attack is possible with as little as 3800 oracle queries
under realistic scenarios [7].
The Noisy Oracle Case. We note here that the Bleichen-
bacher attack does not require the oracle Bl to be perfect.
Speciﬁcally, the attack can handle one sided errors where
Bl(c) = 0 for some valid PKCS #1 v1.5 ciphertexts (i.e. false
negatives). All that the attack requires is that the attacker can
correctly identify valid PKCS #1 v1.5 ciphertext sufﬁciently
often.
D. Manger’s Attack
Following Bleichenbacher’s work, Manger [47] presented
another padding oracle attack that allows an attacker
to compute cd mod N without knowing the secret expo-
nent d. Manger’s attack, originally designed for attacking
PKCS #1 v2.0, can be adapted to the PKCS #1 v1.5 case.
The attack is more efﬁcient than the Bleichenbacher attack,
but it has different prerequisites.
Attack Prerequisites.
In this case we assume the existence
of an oracle Ma which given a ciphertext c answers whether
the most signiﬁcant byte of cd mod N is zero. More formally,
let (N, d) be an RSA private key. The oracle Ma outputs the
following for every ciphertext c
(cid:2)
Ma(c) =
1 if cd mod N starts with 0x00
0 otherwise
.
That is, the oracle outputs for a given ciphertext c whether
its decryption cd mod N lies in the interval [0, B − 1] or not,
where B = 28((cid:2)−1) and (cid:2) is the length of N in bytes.
Let c = me mod N be
High Level Attack Description.
a ciphertext. At a high level, Manger’s attack is very similar
to Bleichenbacher’s attack, requiring the attacker to choose a
value s, to compute c∗ ← c · se mod N and to query Ma in
an attempt to ﬁnd a c∗
Attack Efﬁciency. Manger’s attack requires a little more
than log2(N ) oracle calls to perform an RSA secret operation.
This compares favorably with the approximate one million
oracle calls required for the Bleichenbacher attack. However,
in contrast
to Bleichenbacher’s attack, which can tolerate
oracle false negatives, Manger’s attack requires a “perfect”
oracle which always answers correctly, without any errors.
E. The Interval Oracle Attack
such that Ma(c∗
) = 1.
Well before Bleichenbacher’s work, Ben-Or et al. [8] proved
the security of single RSA bits, by showing an algorithm for
decrypting RSA ciphertexts given one bit of plaintext leakage.