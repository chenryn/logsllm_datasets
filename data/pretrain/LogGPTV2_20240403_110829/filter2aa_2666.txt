# Binder Fuzzing with Drozer and Vulnerability Sharing
### @0xr0ot
#### Kcon Beijing 2016

**Contact Information:**
- Email: [Your Email]

## About Me
- **ID:** 0xr0ot (not 0xroot)
- **Role:** Security Researcher (2 years)
- **Focus:** Android Security
- **Interests:** Basketball

## Agenda
1. Introduction to Drozer
2. Binder Fuzzing Model
3. Case Studies
4. Exploitation Techniques

## Drozer Architecture
- **Console:** The command-line interface for interacting with the Drozer framework.
- **Agent:** The component that runs on the target device and executes commands.
- **Server:** The server that manages communication between the console and the agent.

## Functionality
- **Exploit Development**
- **Vulnerability Scanning**

## Design Principles
- **Reflection:** Dynamically accessing and modifying classes, fields, methods, and constructors.
- **Class Loading:** Loading classes at runtime to extend functionality.

## Drozer Modes
- **Direct Mode:** Direct interaction with the target device.
- **Infrastructure Mode:** Interaction through a server setup.

## Commands
- `drozer server start --port <port>`
- `drozer exploit build exploit.usb.socialengineering.usbdebugging --server <ip> --credentials <username> <password>`
- `drozer console connect --server <ip>:<port> --password`

## Writing a Module
- **Binder Fuzzing:**
  - Fuzz Intent
  - Fuzz Service Call

## Why Use Drozer?
- I am familiar with it, and it provides a robust framework for security testing.

## Fuzzing Model
- **Core:** Drozer module
- **Control Logic:** External Python script
- **Integration:** All functionalities can be integrated into a single Drozer module.

## Case Studies
### LockScreen Bypass (CVE-2016-3749)
- **Details:** A vulnerability that allows bypassing or clearing the lock screen.
- **Patch:** Provided by the vendor.
- **Impact:** My first high-severity issue.

### Fake Shutdown (Eavesdropping)
- **Affected Devices:** Samsung

### Capability Leak
- **Affected Devices:**
  - Nexus series (car mode)
  - Samsung (change theme)

### System DoS (Restart)
- **Affected Devices:**
  - Nexus (3)
  - Samsung (11)

## Video Demonstrations
- **LockScreen Bypass**
- **Fake Shutdown (Eavesdropping)**
- **Capability Leak**
- **System DoS (Restart)**

## Acknowledgements
- Thank you to all who contributed to this research.

## Good News
- Stay tuned for updates and further research.

## Exploitation Techniques (System Service Vulnerabilities)
- **Using AIDL File:**
  - The Android SDK tools generate an interface in Java based on the .aidl file.
  - If the .aidl file is not found, you can write the Java code manually.
  - **Reference:** [Android Bound Service](http://drops.wooyun.org/mobile/13676)

- **Using Java Reflection:**
  - Similar to using AIDL files but does not require the .aidl file.

- **Native Layer:**
  - Requires the Android source environment.

- **Shell Script:**
  - Example: `clear.sh`
  - Key Code:
    ```java
    Runtime runtime = Runtime.getRuntime();
    Process proc = runtime.exec(command);
    ```

## Summary
- **AIDL:** Easy to understand the nature of the vulnerability.
- **Java Reflection:** Simple and convenient.
- **Native:** Requires the Android source environment.
- **Shell Script:** Simple to implement.

Thank you for your attention!