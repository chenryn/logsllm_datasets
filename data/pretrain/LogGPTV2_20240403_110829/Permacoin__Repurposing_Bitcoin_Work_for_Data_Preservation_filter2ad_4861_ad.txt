(1 − p)pk
5.2 Local Storage vs. Outsourced Storage
Based on the above analysis, we now plug in typical practical
values for the parameters and investigate the economics of
local vs. outsourced storage.
Local storage. The cost of a scratch-off attempt depends on
two things, the power consumed and the cost of the equip-
ment. We consider two hardware conﬁgurations,
1. with SSD drives as the storage medium; and
2. using RAM as the storage medium.
Both are typical conﬁgurations that an amateur user can eas-
ily set up. Note that while it is possible to optimize the local
hardware conﬁguration further to have better amortized cost,
it is outside the scope of this paper to do so, since our goal is
to show that, even for an amateur user, local mining is eco-
nomically superior to outsourced storage mining.
First we estimate the cost of local mining using an SSD
and standard CPU. Today, the cost of a desktop containing
a high-end processor (Intel Core i7, 3.4GHz and 8 virtual
cores) is approximately $500. The cost of a 100GB SSD is
about $100. Amortized over three years, the effective cost
is 6.34e-6 $/second. We measured the power consumption
while mining to be about 40 watts; assuming an electricity
cost of 15 cents/kWh, the energy cost of mining is 1.67e-6
$/second in power. Note the mining cost is dominated by
equipment, not power. The latency for a single disk read of
up to 4096 bytes is measured at approximately 30 microsec-
onds.
We assume for now that the size of a ﬁle segment is 64
bytes, and every puzzle iteration requires hashing a single
leaf with two 120-bit secrets (y = 1). Computing a hash
over a message of less than 128 bytes takes no more than
∼ 15 microseconds on an ordinary CPU, suggesting that for
a single-threaded mining program, the SSD and CPU would
be in approximately equal utilization. Thus assuming an aver-
age of 30 microseconds per iteration, the cost of mining with
a local SSD is roughly 3.2e-10 $/iter.
Next we consider the cost of local mining using RAM
rather than an SSD. A 2GB stick of DDR3 SDRAM can
be purchased for about $20, and has a data transfer rate of
12, 800 megabytes per second. Assuming a segment size of
64 bytes, the average throughput of this memory is approx-
imately 200 million puzzle iterations per second. This is
483
faster than a single-threaded CPU performing signing oper-
ations can keep up with. On the other hand, many desktop
computers have a graphics processor (GPU) that can be used
to accelerate Bitcoin mining. Taking one example, the ATI
Radeon 6750 costs $100, consumes 150 watts, and can per-
form 150 million Bitcoin hashes per second. Thus, under this
scheme the GPU would be utilized approximately as much as
the RAM.
Outsourced storage. The cost of outsourced storage min-
ing may vary according to the pricing of the speciﬁc service
provider. Our goal is to show that under most conceivable
scenarios for outsourced mining, local mining will be supe-
rior. To demonstrate this, we consider a wide spectrum of
cost ranges for the outsourced storage setting, and show that
even when we unfairly favor the outsourced option by assum-
ing aggressive lower bounds for its cost, the local option is
still more more economical.
We consider multiple cost conﬁgurations for the out-
sourced storage option:
1. EC2. First, we rely on the pricing representative of to-
day’s high-end cloud providers. In particular, our esti-
mates are based of Amazon EC2’s pricing. EC2 charges
10 cents per gigabyte of transfer, and a base rate of 10
cents for the smallest virtual machine instance.
2. Bandwidth + CPU. Amazon EC2’s setup is not op-
timized for constant-use high-bandwidth applications.
Other rental services (such as http://1gb.com/
en/) offer “unmetered” bandwidth at a ﬁxed monthly
cost. To model this, we consider a cost lower bound by
assuming that the cloud provider charges nothing, and
that the user only needs to pay for its local CPU and the
bandwidth cost charged by the ISP.
Internet transit costs are measured in $ per mbps, per
month. Costs have diminished every year; the median
monthly cost of bulk bandwidth during 2013 has been
estimated at $1.71/mbps, corresponding to 0.53 cents
per gigabyte under constant use.4 Each puzzle iteration
requires transferring a ﬁle segment.
Since the SSD accounts for about 16% of the equipment
cost in the local SSD conﬁguration, and the CPU is ap-
proximately matched with the SSD in terms of utiliza-
tion, for this model we assume that the latency is equiv-
alent, but reduce the local equipment and power cost by
16%.
3. CPU only or bandwidth only. We consider an even more
aggressive lower bound for outsourcing costs.
In par-
ticular, we consider a scenario in which the user only
needs to pay for the local CPU; or she only needs to pay
the ISP for the bandwidth.
4According to an October 2013 press
ﬁrm TeleGeography:
search
com/press/press-releases/2013/10/08/ip-transit-
port-upgrades-yield-steeper-price-declines-for-
buyers/index.html
re-
http://www.telegeography.
release by market
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:14 UTC from IEEE Xplore.  Restrictions apply. 
While this is not realistic today, this lower bound models
a hypothetical future world where cloud costs are signif-
icantly lowered, or the scenario where a powerful adver-
sary can reimburse users’ mining costs assuming they
join its coalition.
Findings. Table 2 compares the costs of local mining to those
of outsourced storage.
Notice that in our protocol in Figure 2 one tunable param-
eter is the number of bytes that must be transferred between
the server and the client per iteration if storage were to be
outsourced to a server. In general, when more bytes are trans-
ferred per iteration, the bandwidth cost per iteration also in-
creases. In Table 2 we assume a conservative parameter set-
ting where only 64-byte segments are transferred.
Although latency is listed in the second-leftmost column,
the effect of latency is not accounted for in the rightmost To-
tal cost column, since this depends on the number of itera-
tions of the puzzle. Figure 6 illustrates that cost effective-
ness diminishes when the number of iterations is increased
sufﬁciently. The ﬁgure suggests that under almost all scenar-
ios, local mining is strictly more economical than outsourc-
ing storage, regardless of the number of iterations k for the
scratch-off attempt. We stress that this is true even when 1)
the local mining user did not spend too much effort at opti-
mizing its hardware conﬁguration; and 2) we give the out-
sourced storage option an unfair advantage by using an ag-
gressive lower bound for its costs. Recall that local mining
saves in cost for two reasons: 1) local storage and I/O costs
less than remote (in the latter case the client has to pay for
both the storage, disk I/O, and network bandwidth); and 2)
lower storage I/O latency gives the user an advantage in the
stochastic lottery against the “giant”.
The only exception is the “CPU only” entry in Table 2 — in
this case, the user is not paying anything for bandwidth, and
the only cost is for the CPU hashing operation. In this case,
the cost per iteration is lower for the outsourced option than
for the local CPU/SSD option (though even here GPU/RAM
with local storage remains more efﬁcient). However, longer
roundtrip latency to the remote storage will penalize the user
during the mining. Therefore, even in this case, we could dis-
courage outsourced storage by setting k very large (thousands
of iterations), so that the effect of longer storage I/O latency
dominates. For the rest of our analysis, we do include the
price of bandwidth in our model and so small values of k are
sufﬁcient.
5.3 Partial Storage Analysis
While the above analysis shows that a puzzle-solving con-
ﬁguration using local storage is typically more cost-effective
than a conﬁguration using remote cloud storage, we also wish
to consider a hybrid-strategy, in which the user chooses to
store just a fraction γ  4e3
iterations, the CPU/SSD conﬁguration with local storage is
more cost effective than the CPU-only (zero-cost bandwidth)
with remote storage.
sis only in the full version, and here just describe our result.
For all conﬁgurations that globally favor local storage in our
analysis above, an economically rational client will favor full
local storage over any partial local storage and for any hybrid
strategy.
6 File-Recovery Analysis
We now give further details on our adversarial model in
Permacoin—as well as our assumptions about the behavior
of rational players, as motivated by our economic analyses
above. Then we present a bound on the probability of recov-
ering the archived dataset F .
Adversarial model. Our adversarial model includes two
main assumptions:
• Bounded control. An adversary may control a coali-
tion of clients in the network (e.g., through malware,
bribery, etc.). We assume, however, that this coalition
is of bounded size and, in particular, the adversary can-
not control the entire network, i.e., that at least a fraction
of clients are uncompromised. We call these clients ra-
tional.
• Recoverable ﬁle segments. We assume that among the
rational users, a fraction will contribute all their seg-
ments in local storage during ﬁle recovery. We call these
clients good, and denote their number by g.
In favor of this second assumption, we note that any entity
interested in recovering F may be willing to pay users to do
so under extraordinary circumstances. (In this sense, Perma-
coin is a globally distributed analog of the Amazon Glacier
service, in which it is cheap to archive data, but relatively
expensive to perform recovery.)
484
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:01:14 UTC from IEEE Xplore.  Restrictions apply. 
Table 2: Costs per iteration for different mining conﬁgurations in Permacoin (mining with local storage vs. three forms of
cloud storage). Latency is the time to compute one iteration of the puzzle. Effective Latency accounts for the pipelining of
computation and storage requests. Equipment is the ﬁxed cost of the system. Total cost per iteration is shown assuming the
transfer of a 64-byte segment.
Model
CPU & SSD
GPU & RAM
EC2
CPU + BW
CPU Only
BW Only
Latency
45μs
600ns
30ms
30ms
30ms
30ms
Eff. Lat.
30μs
300ns
0
15μs
15μs
n/a
Equipment
$600
$700
$0.10/s
$500
$500
n/a
Power
40W
190W
n/a
33.6W
33.6W
n/a
Bandwidth
n/a
n/a
$.10/GB
Total
$2.10e-10/iter
$5.04e-14/iter
$8.39e-7/iter
$5.3e-3/GB $4.04e-10/iter
$8.76e-11/iter
$3.16-10/iter
n/a
$5.33e-3/GB
Rational-client model. The design of Permacoin incen-
tivizes a rational player to adopt the following behaviors,
which we assume in our security analysis:
• Honestly generated keys. As discussed in Section 3
economically rational players choose their public/secret
keys honestly.
• Local storage. As shown in our economic analysis in
Section 5, rational clients will store all of their assigned
segments locally. Further, we show below that the addi-
tional cost of omitting any fraction of the assigned seg-
ments increases sharply with the fraction omitted.
Recoverability bound. Rational users will store their as-
signed segments entirely. Some, however, may not choose
to contribute their segments during the process of recovering
F . (They may, for instance, be ofﬂine or have dropped out
of the system.) We now show how to bound the probability
of recovery failure under a relatively weak assumption: that
the total number of segments contributed by rational players
to recovery is at least a constant fraction of all assigned seg-
ments.
The proof is omitted due to space limitations, but may be
found in the full version of our paper [16].
It proceeds in
two steps. First, we ﬁrst prove recoverability of F with high
probability assuming that segments thrown away by users are
selected randomly. Then, we show that even if these seg-
ments are selected arbitrarily (e.g., if the users favor certain
segments over others—or even act maliciously), recoverabil-
ity still holds, except with negligible probability.
Let m = (cid:3)g be the total number of ﬁle segments stored by
good users, where g is the number of good users, and (cid:3) is the
number of segments stored by each user. The m ﬁle segments
are chosen randomly from the set of n encoded segments. We
model this as throwing m balls into n bins, and we wish to
cover f = (1 − 1