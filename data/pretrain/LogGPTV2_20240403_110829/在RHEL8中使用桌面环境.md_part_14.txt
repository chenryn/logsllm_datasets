# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#the-gvfs-system_managing-storage-volumes-in-gnome}GVFS 系统 {.title}
:::
GVFS 提供完整的虚拟文件系统基础架构，并处理 GNOME
桌面中的存储。它使用地址来根据
URI（统一资源标识符）标准进行完全识别，语法上类似于 Web 浏览器中的 URL
地址。这些地址采用 `schema://user@server/path`{.literal}
的形式，是决定服务类型的关键信息。
GVFS
有助于挂载资源。这些挂载在多个应用之间共享。在运行的桌面会话中对资源进行全局跟踪，这意味着即使您退出触发挂载的应用程序，它仍然可用于任何其他应用程序。多个应用可以同时访问挂载，除非受后端的限制。某些协议设计仅允许单个频道。
GVFS 在 `/run/media/`{.literal} 目录中挂载可移动介质。
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#overview-of-uri-string_managing-storage-volumes-in-gnome}GVFS URI 字符串的格式 {.title}
:::
您必须组成一个 URI 字符串才能使用后端服务。这个字符串是在 GVFS
中使用的基本标识符，它提供唯一标识所需的全部必要信息，如服务类型、后端
ID、绝对路径或用户名（如果需要）。您可以在 File [**地址**]{.strong}
栏中看到此信息，GTK+ 打开或保存文件对话框。
以下示例是 URI 字符串的一个基本形式，指向在
[*ftp.myserver.net*]{.emphasis} 域中运行的
FTP（文件传输协议）服务器的根目录(/)：
[**示例：指向 root FTP 目录的 URI 字符串**]{.strong}
``` screen
ftp://ftp.myserver.net/
```
[**示例：指向文本文件的 URI 字符串**]{.strong}
``` screen
ssh://PI:EMAIL/home/joe/todo.txt
```
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#mounting-a-storage-volume-in-gnome_managing-storage-volumes-in-gnome}在 GNOME 中挂载存储卷 {.title}
:::
在虚拟文件系统中，特定资源设置为自动挂载，但最常见的方法是手动触发挂载。
::: orderedlist
**流程**
1.  打开 [**Files**]{.strong} 应用。
2.  按 [**Ctrl**]{.keycap}+[**L**]{.keycap} 查看位置栏。
3.  输入格式良好的 URI 字符串。
    另外，[**file**]{.strong} 提供 [**Connect to server**]{.strong}
    对话框，您可以在 [**其他位置**]{.strong} → [**Connect to
    server**]{.strong} 中找到该对话框。
4.  当系统询问登录凭证时，在相关条目框中输入您的名称和密码。
5.  挂载过程完成后，您可以开始使用存储卷。
:::
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#unmounting-a-storage-volume-in-gnome_managing-storage-volumes-in-gnome}卸载 GNOME 中的存储卷 {.title}
:::
您可以按照以下步骤弹出或卸载资源。
::: orderedlist
**流程**
1.  单击所选挂载上的 [**Eject**]{.strong} 图标。
2.  等待挂载消失或通知显示安全移除。
:::
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#overview-of-fuse-daemon-in-gvfs_managing-storage-volumes-in-gnome}GVFS FUSE 守护进程概述 {.title}
:::
使用 GIO 库构建的应用程序可以访问 GVFS 挂载。另外，GVFS 提供了一个 FUSE
守护进程，它公开活跃的 GVFS 挂载。任何应用程序都可以使用标准 POSIX API
访问活跃的 GVFS 挂载，就像挂载是常规文件系统一样。
在某些应用中，额外的库依赖关系和新的虚拟文件系统(VFS)子系统可能不合适或过于复杂。因此，为了提高兼容性，GVFS
在用户空间(FUSE)守护进程中提供了一个文件系统，它通过挂载公开活动挂载以进行标准可移植操作系统接口(POSIX)访问。此守护进程会以透明的方式转换传入请求，以便为应用程序模拟本地文件系统。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
您可能会遇到应用程序和 GVFS 后端的某些组合问题。
:::
FUSE 守护进程以主 `gvfs 守护进程自动启动`{.literal}，并将其挂载放置在
`/run/user/UID/gvfs/`{.literal} 或 `~/.gvfs/`{.literal}
文件中作为回退。手动浏览可显示每个 GVFS
挂载的单独目录。当您使用非原生应用程序从 GVFS
位置打开文档时，系统会传递转换的路径作为参数。请注意，原生 GIO
应用程序会自动将此路径转换为原生 URI。
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#gio-tools-and-xdg-utils-in-gnome_managing-storage-volumes-in-gnome}GNOME 中的 GIO 工具和 xdg-utils {.title}
:::
GIO 提供一些对脚本或测试可能有用的命令。以下是一组 POSIX
命令对应命令，如下所示：
::: informaltable
  ------------------------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  命令                     Description
  `Gio cat`{.literal}      显示文件的内容.
  `gio mkdir`{.literal}    创建新目录.
  `gio rename`{.literal}   重命名文件.
  `gio mount`{.literal}    提供对 `gio`{.literal} 挂载功能的各个方面的访问。
  `gio set`{.literal}      设置文件上的 file 属性。
  `gio copy`{.literal}     制作文件的副本.
  `gio list`{.literal}     列出目录内容.
  `Gio move`{.literal}     将文件从一个位置移动到另一个位置.
  `gio remove`{.literal}   删除文件.
  `gio 垃圾箱`{.literal}   将文件或目录发送到回收器. ``{.literal}根据文件所在的位置，这可能是不同的文件夹，并非所有文件系统都支持这种概念。在文件驻留在用户主目录中的常见情形中，回收文件夹为 `$XDG_DATA_HOME/Trash`{.literal}。
  `Gio info`{.literal}     显示给定位置的信息。
  `Gio save`{.literal}     从标准输入中读取并将数据保存到给定位置。
  `Gio 树`{.literal}       以类似于树的格式，以递归方式列出指定位置的内容。如果未指定位置，则默认为当前目录。
  ------------------------ -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
以下附加命令提供更多对 GIO 细节的控制：
::: informaltable
  ------------------------- ------------------------------------------------------------------------------------------------------
  `Gio monitor`{.literal}   监控文件或目录的更改，如创建、删除、内容和属性更改，以及挂载和卸载影响所监控位置的操作。
  `Gio mime`{.literal}      如果未指定处理程序，则列出 mimetype 的注册和推荐应用程序，否则，它将设置为 mimetype 的默认处理程序。
  `gio open`{.literal}      使用注册用于处理此类文件的默认应用打开文件。
  ------------------------- ------------------------------------------------------------------------------------------------------
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
为方便用户 `，`{.literal} bash 完成作为软件包的一部分提供。
:::
所有这些命令都是原生 GIO 客户端，不需要运行回退 FUSE
守护进程。它们的目的不是 POSIX
命令的置入替换，实际上，支持的参数范围极小。在基本形式中，这些命令使用
URI 字符串作为参数，而不是本地路径。
所有这些都使 GNOME 在 `xdg-tools`{.literal} 中得到良好支持，这是一个
freedesktop.org 互操作性项目。例如，当检测到正在运行的 GNOME
会话时，`xdg-open`{.literal} 实用程序调用
`gio 会打开`{.literal}，并从正确的位置读取文件类型关联。
::: itemizedlist
**其它资源**
-   The `gio(1)`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#executing-the-gio-commands_managing-storage-volumes-in-gnome}执行 GIO 命令 {.title}
:::
以下是 GIO 命令使用的几个示例：
::: itemizedlist
-   要列出本地文件系统中的 /tmp 中的所有文件，请运行：
    ``` screen
    $ gio list file:///tmp
    ```
-   从远程机器列出文本文件的内容：
    ``` screen
    $ gio cat ssh://PI:EMAIL/home/joe/todo.txt
    ```
-   要将引用的文本文件复制到本地 /tmp 目录中，请运行：
    ``` screen
    $ gio copy ssh://PI:EMAIL/home/joe/todo.txt /tmp/
    ```
:::
::: itemizedlist
**其它资源**
-   The `gio`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#overview-of-gvfs-metadata_managing-storage-volumes-in-gnome}GVFS 元数据概述 {.title}
:::
GVFS
元数据存储实施为一组键值对，它们将信息绑定到特定的文件。因此，用户或应用程序有一个工具可用来保存为运行时信息设计的小型数据，如图标位置、最近播放位置、位置在文档中的位置、标志、记笔记等。
每当您移动文件或目录时，GVFS
会相应地移动元数据，以便元数据与对应的文件保持连接。GVFS
专用存储所有元数据，因此元数据仅在机器上可用。但是，GVFS
跟踪也会挂载和可移动介质。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
GVFS 在 `/run/media/`{.literal} 目录中挂载可移动介质。
:::
要查看和处理元数据，您可以使用：
::: itemizedlist
-   the `gio info`{.literal} 命令，
-   the `gio set`{.literal} 命令，或者
-   任何其它使用属性的原生 GIO 方法。
:::
::: itemizedlist
**其它资源**
-   The `gio`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#setting-custom-metadata-attribute_managing-storage-volumes-in-gnome}设置自定义 GIO 元数据属性 {.title}
:::
此流程描述了如何设置自定义元数据属性。
注意移动或重命名后特定 `信息`{.literal}
调用和数据持久性之间的区别（请注意，请注意 `gio info`{.literal}
命令输出）：
::: orderedlist
**流程**
1.  创建一个空文件。
    ``` screen
    $ touch /tmp/myfile
    ```
2.  查看此文件的元数据。
    ``` screen
    $ gio info -a 'metadata::*' /tmp/myfile
    uri: file:///tmp/myfile
    attributes:
    ```
3.  将字符串设置为此文件。
    ``` screen
    $ gio set -t string /tmp/myfile 'metadata::mynote' 'Please remember to delete this file!'
    ```
4.  查看元数据。
    ``` screen
    $ gio info -a 'metadata::*' /tmp/myfile
    uri: file:///tmp/myfile
    attributes:
      metadata::mynote: Please remember to delete this file!
    ```
5.  将此文件移到新位置。
    ``` screen
    $ gio move /tmp/myfile /tmp/newfile
    ```
6.  查看元数据。
    ``` screen
    $ gio info -a 'metadata::*' /tmp/newfile
    uri: file:///tmp/newfile
    attributes:
      metadata::mynote: Please remember to delete this file!
    ```
    当您使用 GIO API 移动文件时，元数据会保留。
:::
::: itemizedlist
**其它资源**
-   The `gio`{.literal} 手册页.
:::
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#password-management-of-gvfs-mounts_managing-storage-volumes-in-gnome}GVFS 挂载的密码管理 {.title}
:::
典型的 GVFS
挂载在其激活上进行身份验证，除非该资源允许匿名身份验证，或者根本不要求任何身份验证。在标准
GTK+ 对话框中，您可以选择存储或不存储密码。
当您选择持久存储时，密码存储在用户 `密钥环中`{.literal}。[**GNOME
密钥环**]{.strong}
是机密存储的一个中心位置。密码已加密，并在桌面会话启动时使用登录时提供的密码自动解锁。若要使用其他密码对其进行保护，您可以在第一次使用时设置密码。
[**密码和密钥**]{.strong} 应用有助于管理存储的密码和
`GNOME 密钥环`{.literal}。它允许删除个别记录或更改密码。
::: itemizedlist
**其它资源**
-   有关 [**密码和密钥**]{.strong} 的更多信息，请参阅直接嵌入在桌面中的
    [**密码和密钥**]{.strong} 帮助手册。
:::
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#accessing-gvfs-mounts-using-authentication_managing-storage-volumes-in-gnome}访问需要身份验证的 GVFS 挂载 {.title}
:::
这个步骤描述了如何使用身份验证访问 GVFS 挂载。
::: orderedlist
**流程**
1.  打开 [**文件**]{.strong}
2.  按 [**Ctrl**]{.keycap}+[**L**]{.keycap}激活地址栏
3.  输入需要身份验证的服务格式良好的 URI 字符串（例如
    `sftp://localhost/`{.literal}）。
    这时将显示凭据对话框，要求输入用户名、密码和密码存储选项。
4.  填写凭据并确认：
:::
:::
::: section
::: titlepage
# []{#managing-storage-volumes-in-gnome_using-the-desktop-environment-in-rhel-8.html#gvfs-back-ends_managing-storage-volumes-in-gnome}GVFS 后端 {.title}
:::
GVFS 中的后端提供对特定资源类型的访问。以下是可用 GVFS
后端及其规格列表：