对基于正则表达式的WAF，绕过WAF规则主要思考安全工程师写WAF规则时在想什么，容易忽略什么，推断一些可能绕过的方式，然后多次尝试进行验证。比起完整罗列绕过CASE，我更喜欢分析绕过思路。这次以最受关注的SQL注入、文件包含为例，分析一下绕过思路。
### 4.1. SQL注入绕过    
绕过SQL注入规则主要利用WAF规则本身的问题、未考虑到SQL语法变形、及后端数据库SQL语句语法特性。不同的数据库虽然遵守SQL标准，但是通常会加入特有的语法。WAF的防御策略要兼顾各种数据库的特殊语法，容易遗漏，从而被利用绕过WAF。以下MySQL为例，分析绕过SQL注入的一些思路。
4.1.1   注释符绕过    
`/*xxx*/`是注释，也可以充当空白符。因为 `/**/`可使得MySQL对sql语句(`union/**/select`)词法解析成功。事实上许多WAF都考虑到`/**/`可以作为空白分，但是waf检测 `/\*.*\*/`很消耗性能，工程师会折中，可能在检测中间引入一些特殊字符，例如：`/*\w+*/`。或者，WAF可能只中间检查n个字符`/\*.{,n}\*/`。根据以上想法，可以逐步测试绕过方法：
* 先测试最基本的：`union/**/select`
* 再测试中间引入特殊字：`union/*aaaa%01bbs*/select`
* 最后测试注释长度：`union/*aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa*/select`
同理，对于`/*!xxx*/`，可以采取类似的思路绕过WAF。
4.1.2   空白符绕过    
基于正则表达式的WAF， SQL注入规则使用正则表达式的“\s”匹配空格，例如”select\s+union”。利用正则表达式的空白符与MySQL空白符的不同可绕过WAF规则。如何这些MySQL的特性？通过fuzz,每次更改正常SQL语句的某部分，替换为其他字符，判断语法是否正确，即可判断出来MySQL语法特性。当然，也可以通过分析MySQL词法来发现语法特性，从而找到绕过方法。
利用空白符进行绕过，测试WAF时尽可能减少其他原因的影响，例如”union select”被拦截，只需把中间空白符替换为”%250C”, “%25A0”进行绕过测试。
* union%250Cselect
* union%25A0select
![waf9](../pictures/waf9.jpg)
4.1.3 函数分隔符    
对基于正则表达式的WAF，我们猜测安全工程师写WAF规则时，可能不知道函数名与左括号之间可以存在特殊字符，或者遗漏可以存在特殊字符。例如匹配函数”concat()”的规则写法，“concat(”或者”concat\s*(”，就没有考虑到一些特殊字符。相应的绕过方法，在特殊位置引入特殊的分隔符，逐个测试。这些特殊分隔符发现也是通过Fuzz出来的。
* concat%2520(
* concat/**/(
* concat%250c(
* concat%25a0(
举一反三，寻找类似的关键位置，Fuzz特殊字符，发现更多的绕过新方法。猜测工程师们写规则因为各种原因容易遗漏的点，进行绕过WAF检测。
4.1.4   浮点数词法解析    
利用MySQL解析浮点数的特点，正则表达式无法匹配出单词union，但是MySQL词法解析成功解析出浮点数、sql关键字union。
* select * from users where id=8E0union select 1,2,3,4,5,6,7,8,9,0
* select * from users where id=8.0union select 1,2,3,4,5,6,7,8,9,0
* select * from users where id=\Nunion select 1,2,3,4,5,6,7,8,9,0
4.1.5   利用error-based进行SQL注入    
Error-based的SQL注入函数非常容易被忽略，导致WAF规则过滤不完整。随着对MySQL研究越来越深，被发现可用于error-based SQL注入的函数越来越多，同时也给绕过WAF造就了更多机会。常见的函数：
* extractvalue(1, concat(0x5c,md5(3)));
* updatexml(1, concat(0x5d,md5(3)),1);
* GeometryCollection((select*from(select*from(select@@version)f)x))
* polygon((select*from(select name_const(version(),1))x))
* linestring() 
* multipoint() 
* multilinestring() 
* multipolygon() 
利用Error-based的SQL注入函数进行绕过时，可以结合函数分隔符，或其他方法灵活运用。
4.1.6   Mysql特殊语法    
最有效的发现手段，还是去读读MySQL词法分析源代码。和协议绕过类似，挖掘SQL标准与MySQL的词法分析差异是发现WAF SQL注入绕过的有效手段。以下是MySQL语法的一个特写(ps:不是我发现的)：
select{x table_name}from{x information_schema.tables};
4.1.7 综合利用实例    以上都是SQL注入绕过中的技术点，在实际渗透测试中，需要灵活综合利用才能达到完整绕过，读取数据数据。以下给出完整绕过WAF SQ注入检测的实例。如图，本例中综合多个绕过技术点，最终实现完整绕过实现读取数据。
* 利用浮点数词法解析，绕过union select 的检测。
* 同样，函数分隔符思想集和浮点数词法解析，绕过关键字from的检测。
* 最后空白分分割绕过INFORMATION_SCHEMA.TABLES的检查
![waf11](../pictures/waf11.png)  
### 4.2 文件包含    
文件包含分为相对路径、绝对路径文件包含。在相对路径文件包含中，最终根据Linux虚拟文件系统(vfs)的规则查找文件，通过分析vfs的文件路径解析规则，提取其中规则特点，用这些特点去绕过WAF。在绝对文件路径包含中，主要是根据攻击场景，WAF未过滤一些协议、未过滤某些特殊路径。
4.2.1          相对路径的绕过
写WAF文件包含规则时，如果检测单一的”../”，误报会非常多，所以WAF文件包含规则通常会检测连续的“../"。根据vfs解析路径的语法，解析到“//”文件路径不变，解析到“/./”文件路径依然。 通过避免连续的"../"，从而绕过WAF文件包含规则。Eg: `././..///./.././/../etc//passwd`，它等价于`../../../etc/passwd`。如图，一个实际的绕过WAF文件包含的 CASE
![waf13](../pictures/waf13.png)
​4.2.2 绝对路径的绕过（一）
* WAF没有考虑到路径中插入“/./”、“//”对于vfs解析路径是等价的，导致可被绕过。例如 /etc/./passwd 与 /etc/passwd 是等价的。还可以通过组合“/./”、“//”进行绕过，eg. /etc///.//././/passwd。
![waf15](../pictures/waf15.png)
* ​对于绝对路径文件包含，WAF一般会拦截常见路径，而不会防御所有的绝对路径。因此，在渗透测试中，可以包含其他的路径下一些文件，例如/usr/local/nginx/conf/nginx.conf。
![waf17](../pictures/waf17.png)
* 如果WAF只检测连续的../，检查开始路径为Linux的目录名，可以采用/wtt/../绕过WAF文件包含检测。 例如，“/wtt/../etc/passwd”， wtt不是Linux标准目录，不会被规则匹配。WAF只检测连续的../，但是只使用一个../，不被拦截。最终读取/etc/passwd文件。
4.2.2 绝对路径的绕过（二）    
利用WAF未检测的协议。PHP 文件包含支持的协议，在渗透测试中，看环境选择可行的方法
* file:// — Accessing local filesystem 
* http:// — Accessing HTTP(s) URLs 
* ftp:// — Accessing FTP(s) URLs 
* php:// — Accessing various I/O streams 
* zlib:// — Compression Streams data:// — Data (RFC 2397) 
* glob:// — Find pathnames matching pattern 
* phar:// — PHP Archive 
* ssh2:// — Secure Shell 2 
* rar:// — RAR 
* ogg:// — Audio streams 
* expect:// — Process Interaction Streams
## 5.     总结    
一个好WAF不是吹出来的，是实践检验出来的。研究WAF的绕过手段，是为了更好的提升WAF的防御能力。在研究突破的过程中，不要仅仅停留在正则表达式，基本漏洞原理，需要对涉及并深入更多的领域，例如HTTP协议理解和PHP、Tomcat对HTTP协议源码分析，MySQL词法分析，和Fuzz的思路等。在此过程中，会有许多乐趣，也会有各方面能力的提升。