2o4000
USART2
2o4000
x4000
SP2
l06009
esene
WDG
x4000
WWDG
s4000
RTC
s8000
esenec
4000
TIM4
4008
TM3
TM2
---
## Page 1009
CTF特训营：技术详解、解题方法与
27.2芯片手册的寻找与阅读1009/1144
图27-4datasheet中的内存映射图
通过阅读STM32F103的内存分布图，我们重点关注的方面真体
如下。首先，我们可以看到FlashMemory的内存范围是
0x08000000-0x0801FFFF，这段是什么意义呢？我们都知道单片机的
程序是存储在Flash里的，所以Flash的起始地址也就是程序开存放的
地址，也是我们使用IDA分析时需要指定的ROM加载地址，只有加载
在正确的地址上，才能正确地识别指令。其次是0×x20000000开始的
SRAM，这部分被称为内存，程序动态执行的变量都会存在该部分
最后要关注0x40000000开始的部分，这部分为外设寄存器映射地
址，当程序访问外设寄存器时，会使用这部分地址来访问。
最后，我们还需要了解芯片各个寄存器的地址以及功能，这部分
描述了寄存器每个二进制位对应的配置含义，有看重要的作用，例如
可以计算UART的波特率，CPU时钟配置的一个各引I脚定时器的状态
都是通过操作寄存器来设定的，因此，上面提到的寄存器读写，要想
知道具体完成了什么功能，还要参考这部分内容。而此部分内容较为
复杂，原厂并没有直接将这部分内容合并在Datasheet中，而是放在
了另一篇汇总文档中。文档的名称是“Cortex-M3programming
---
## Page 1010
CTF特训营：技术详解、解题方法与
27.2芯片手册的寻找与阅读
1010/1144
manual”，大家可以自行参考，此外，这篇文档也不仅仅只适用于此
款芯片，因为架构的共性，对于STM32F10xxx/20xxx/21xxx/L1xxxx这
么多系列都是适用的，大家在阅读和寻找参考资料时，也需要注意。
---
## Page 1011
CTF特训营：技术详解、解题方法与
27.3使用IDA手动寻找固件入口点1011/1144
27.3使用IDA手动寻找固件入口点
通过阅读STM32F103芯片的Datasheet，我们已经了解到了分析
所需要的必要信息，接下来以STM32F103的程序为例来简单分析
下。在分析的最开始，先要寻找入口点，入口点标识着程序开始执行
的位置，也是入手的关键。这里给出的例子的地址是htps:/l
www.jarvisoj.com
（ConfusedARM）。程序是一个Intelhex格式的
STM32程序，IDA可以直接识别并加载基地址，所以这里不存在固件
基地址分析的问题，那么我们接下来就来分析这个题目。
首先，我们需要用iDA加载这个hex文件，在加载之前需要注意
的是，在LoadaNewFile界面，Processortype要选择ARMLittle
endian[ARM]，这一步比较关键，因为lntelhex格式的文件并不包含
自标CPU的信息，所以最好自己指定，以方便分析，如图27-5所示。
---
## Page 1012
CTF特训营：技术详解、解题方法与
27.3使用IDA手动寻找固件入口点
1012/1144
 Load a new file
Load file C:\Users\vjh\DesktoplconfusedAEm.hexas
Intel Hex Object Format[hex.ldw]
Binary file
Processor type
ARM Little-endi an [AR]
Set
Analysis
Loading segment0x00000000
Enabled
Kernel options 1Kernel options 2
Loading offset
0x00000000
Indicator enabled
Processor options
Options
Loading options
Load resources
Fill segent gaps
Renane DLL entries
Create segments
Manual load
Create FLAT group
Create inports segment
Load as code segent
OK
Cancel
Help
图27-5IDA加载Intelhex格式文件的界面
点击确定后，IDA会自动完成分析，由于Intelhex格式的程序中
会包含基地址信息，所以IDA能够将程序加载到正常的基地址，因此
只需要选对CPU即可。加载后的界面如图27-6所示。
---
## Page 1013
CTF特训营：技术详解、解题方法与
27.3使用IDA手动寻找固件入口点
1013/1144
IDA - C)(Users/jwjh),Desk
dARM.hes
Edit
日
AO
X
Librury fmetion DataBegar fuotion Unplared IastruotionExtersal symbol
Fumetiens window
□x
IDA View-A
口
回
s
sub_8000124
000088005
sub_80001AC
seg000:0808aaee;File Nane
:C:\Users\ujh\Desktop\
sub_80001CA
seg088:08080808
：Fornat
:Intel Hex object Forn
sub_8000248
seg008: 08000000
sub_8000550
sege8s:n80o00ee;Processor
segeoo:nsooaaee;ARN architecture:netaarn
：ARM
8000560
sub_8000634
seg080: 08000000
：
Target assenbler:Generic assenbler
ub_80006A
seg000:08088880
xas afg
: Little endian
8000718
Be000088:0806as
ub_8000740
Seg000: 08000000
00000088:0086as
sub 80007F0
seg000: 08088000
: Segnent type:
Pure code
Seg008: 0800800e
AREA Seg00,CODE,RE
8000824
00000080:0006as
0RG 0x8000000
CODE32
seg009:08000000
DCD0x20000730,0x800
seg000:080000
DCD
x800010F,0x8000
ub_B000ac
nzee0nsn:ngabas
030
0x8000113,0x8008
830
DCU
0x17
8000A5
eq880:08000839
DCB
seg080:08000838
DCB
sub 8000AA
830
DCB
Bx19
图27-6IDA加载lntelhex文件后的界面
注意，IDA已经成功识别到程序加载到的基地址是0x08000000
与我们之前Datasheet所指的Flash存储区基地址相吻合，那么，程序
是从哪个地址开始执行的呢？注意任何单片机在上电或者Rese的时
候，都会事先进入ResetHandler去执行Reset代码，所以我们只需要
找到Reset向量的位置即可，也就是ResetHandler的位置。可以看到，
程序在开头定义了一些DCD，这部分并没有被IDA识别成代码，而事
---
## Page 1014
CTF特训营：技术详解、解题方法与
27.3使用IDA手动寻找固件入口点
1014/1144
实上这部分也确实并非代码，IDA在这方面还是比较智能的。下面简
单整理一下这些数据，如图27-7所示。
00000080:0005as
AREA Seg0OO,CODE,READURITE,ALIGH-0
seg000:08000000
；ORG0x8000008
seg000:08000000
CODE32
seg008:08000000
DCD 0x20000730,0x8000101,0x8008109,0x800010B,0x800010D
seg 000: 08000000
DCD
0x800010F,0x8000111,0,0,0,0
seg000:08000020
DCD
0x8000113,0x8000115,0
seg000: 0800003C
Bc008080:0005as
DCD
DCD
bx8000117
0x8000119
seg 000: 08 08004 8
DCD
0x800011B
seg000: 08 000044
DCD
seg000:08000048
0x800011B
0x800011B
DCD
seg000: 0808005 0
seg000:08000040
DCD
DCD
8110008x0
seg 008: 0808005 4
DCD
0x800011B
seg 000: 08000058
DCD
seg000:0800005C
DCD
0x8000501
0x800011B
seg000: 0800006 0
DCD
Bx800011B
seg 800: 08080064
seg000:08000068
DCD
0x800011B
DCD
0x800011B
seg 000: 0800006C
seg 000: 0800007 0
DCD
t2000080:0005a5
图27-7固件起始地址处的数据
我们先看第一个0x20000730，从前面的memorymap中可以看出
来，这部分是SRAM的地址。那么究竟是什么的地址呢？这里介绍一
些常识，在与硬件相关的程序中，一般都会定义一些中断向量的位置，
Reset也是其中一个中断向量，在复位时，硬件会自动将PC设置为
Rese的地址，而其他就是一些定时器、外设的中断向量位置。这个
表就称为中断向量表。所以，分析以0x08000000位置开始的内容是
中断向量表。那么在这张表中势必会包含Reset向量的位置。首先，
---
## Page 1015
CTF特训营：技术详解、解题方法与
27.3使用IDA手动寻找固件入口点
1015/1144
Reset代码不可能在SRAM区域中，那么第一个地址0x20000730，不
可能为Reset向量的位置。接着再来看第二个地址0x8000101，这个
地址是所有地址里面最低的地址，最有可能是Reset向量的位置，我
们到该地址处将数据转换成代码。这里还有一个需要注意的点，那就
是这个地址的最低位是1，这也就暗示着实际地址为0x8000100+1，
表示实际地址为0x8000100，且指令集为Thumb。所以我们需要先按
AIt+G将T寄存器值修改为1以将该段代码注释为CODE16，然后直接
在0x8000100地址处按C将数据转换为指令即可。最后结果如图27-8
所示。
seg000:080000EC
seg000:080000EC
CODE16
seg000:080000EC
seg000:080000EC1oc_80000EC
；CODE XREF:S
seg000:080000EC
；DATA XREF:S
seg000:080000EC
LDR.W
SP,-Bx20000730
seg000:080000F0
BL
1oc_8000188
seg000:080000F4
seg000: 080000F4
seg000:080000F4
Seg000:080000F4
Seg000:080000F4
sub_80000F4
：CODE XREF: S
Seg000:080000F4
LDR
R0,=(sub_8001084+1)
seg000: 080000F6
x8
R0;5ub_8001084
seg000:080000F6
;End of function sub_8eeeeFa
Seg000:080000F6
Seg000:080000F6
seg 000: 080000F8
off_80000F8
DCD sub_8001084+1
;DATA XREF:SI
seg000:080000FC
duord_80000FC
DCD 0x20000730
；DATA XREF:S(
Seg000:08000100
Seg000:08000100
LDR
R0,-(sub_8000A00+1)
seg000:08080102
BLX
RO;sub_8000A00
seg000:08000104
LDR
R0,=(10c_80000EC+1)
seg000:08000106
x8
R0;10c_80000EC
seg000:08000106:
seg000:08000188
DCB BxFE
seg000:08000109
DCB BxE7
seg000:08008108
DCB BxFE;
---
## Page 1016
CTF特训营：技术详解、解题方法与
27.3使用IDA手动寻找固件入口点1016/1144
图27-8将数据转为指令之后的效果
可见，IDA识别出了附近的函数调用，其中有意思的是
loc_80000EC这个位置，显然，这里设定了SP的值，也就是设定了堆
栈指针的位置为0x20000730，这个值是不是似曾相识？没错，在
Flash起始地址的值就是该值，它表明了初始堆栈指针的位置。看到
这里，应该很明显了，0x08000100地址确实就是整个程序的入口
点，也即Reset向量的位置，在该位置处的代码，设定了一系列初始
化操作（在sub_8000A00中），以及初始堆栈指针，最终跳至
loc_8000188执行。至此，我们已经找到了程序的入口点，可以进行
进一步的分析了。
寻找人口点的关键步骤总结如下：①用IDA加载程序，选择正确
的CPU；②找到中断向量表，寻找其中地址最小的指针；③跳至该指
针处，若IDA未能正确识别代码，则手动将该处数据转为指令（对于
ARM，需要自行确定该处是ARM还是THUMB指令集）。
---
## Page 1017
CTF特训营：技术详解、解题方法与
27.4寄存器地址和SRAM地址的处理方法
1017/1144
27.4寄存器地址和SRAM地址的处理方法
继续分析上节的例子，我们可以看到0x080000F6处有一个比较
大的跳转，一直跳转到了0x8001084，可以猜测跳转到的就是main函
数，跟踪进去看一下，如图27-9所示。
eg000:08001094
800128
sub_s0000Fh+2tj
nabas