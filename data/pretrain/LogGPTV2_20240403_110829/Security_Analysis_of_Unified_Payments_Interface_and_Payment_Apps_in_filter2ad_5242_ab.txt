providing her UPI PIN. Internally, the UPI payment interface
directly transfers money from Alice’s chosen bank account to
Bob’s bank account linked with his UPI ID.
2.2 UPI Specs for User Registration
The UPI speciﬁcations released by NPCI [44] provide "broad
guidelines" on the client-server handshake between a UPI app
and the UPI server. We discuss the protocol details available
to us from the speciﬁcation.
1. Set up a UPI user proﬁle: Once a UPI app gets a user’s
cell number, the app must send an outbound encrypted
SMS from Alice’s phone to the UPI server. This pro-
cess is automated and does not involve the user in order
to guarantee a strong association between a user’s cell
phone and her device. According to UPI, this is the “most
critical security requirement” of the protocol since all
money transactions from a user’s device are ﬁrst veriﬁed
based on this association. UPI calls this association of a
user’s device (identiﬁed by parameters such as Device
ID, App ID, and IMEI number) with her cell number as
device hard-binding. The combined cell number and de-
vice information (that represents this binding) is called
the device ﬁngerprint, which per the UPI spec is the ﬁrst
factor of authentication.
USENIX Association
29th USENIX Security Symposium    1501
Figure 2: BHIM User Registration Using 3FA
Passcode. The UPI spec considers application passcode
as optional and does not undertake responsibility for
passcode authentication. UPI leaves it up to a UPI app
vendor to authenticate the passcode. Thus, the respon-
sibility to completely authenticate a user is shared be-
tween two servers— the UPI server (that veriﬁes device
ﬁngerprint and UPI PIN), and a payment app server (that
veriﬁes an app passcode).
2. Add a bank account: A user’s request to add a bank must
be from the device registered with UPI. Internally, UPI
fetches the chosen bank’s account number and IFSC
code based on a user’s cell number for later transactions
through the UPI app.
3. Enable transactions: UPI allows transactions to be done
either using a cell number or an account number and
IFSC code or any UPI ID. UPI spec mandates that all
transactions must at least be 2FA using a cell phone (the
device ﬁngerprint) as one factor and the UPI PIN as
the second. The spec considers a cell phone as a “what
you have” factor, which allows UPI to provide “1-click
2-Factor Authentication” using the said two factors.
For apps that integrate with UPI, NPCI enforces application
security via a code review and certiﬁcation process. All com-
munication with the UPI server is over a PKI-based encrypted
connection. Currently, UPI has become the de facto standard
for mobile transactions.
2.3 Threat Model
We assume a normal user, Alice, who installs payment apps
from ofﬁcial sources such as Google Play; none of the pay-
ment apps contain extraneous malicious code. Alice has a
properly conﬁgured phone with Internet facility and prevents
physical access to it by untrusted parties.
On the other hand, the attacker, Eve, uses a rooted phone.
Eve can use any tool at her disposal to reverse engineer the
payment apps. We assume that Eve releases an apparently use-
ful unprivileged app called Mally that requests the following
two permissions—android.permission.INTERNET and an-
droid.permission.RECEIVE_SMS. Alice ﬁnds the app useful
and installs it, granting it the necessary permissions.
The permissions requested for Mally are not unusual for
Android. Recent versions of Android automatically grant the
INTERNET permission without a user prompt [15]. SMS
permissions have legitimate uses on Android, and about 15%
of the Android apps request them [20]. RECEIVE_SMS per-
mission only grants the permission to read incoming SMS
messages, but not read previously received messages or send
SMS messages. This permission is used by many popular
social media apps such as Telegram and WhatsApp, SMS/-
call blocker apps, and also security apps such as Kaspersky
Mobile Security and BitDefender.
We consider our threat model to be realistic for the follow-
ing reasons. First, according to the Android security review
for the last two years, India is among the top three countries
with the highest rate of potentially harmful applications such
as trojans and backdoors, sometimes pre-installed on Android
devices [24, 25]. Google has also recently released a warning
stating that 53% of the major attacks are because of malicious
apps that come pre-installed on low-cost smartphones [19].
To simplify some attack descriptions, we describe Mally
with the READ_PHONE_STATE or accessibility permissions.
We do this to show the many ways an adversary can get a
user’s information, e.g., a user’s cell number. However, in
such cases, we also show other attack vectors that require
neither of these two permissions.
3 Security Analysis
3.1 Methodology
In this section, we describe how we reverse-engineer UPI,
a proprietary protocol, to learn its authentication handshake.
Since we do not have access to UPI’s servers, we choose to
reverse engineer this application layer protocol through the
payment apps that support it.
Protocol Analysis. To reverse-engineer UPI, we ﬁrst un-
cover each step of the client-server authentication handshake
1502    29th USENIX Security Symposium
USENIX Association
with the goal of (i) understanding how UPI does device ﬁn-
gerprinting; and (ii) establishing the credentials required by a
user to set up an account and do transactions. Besides UPI’s
default authentication workﬂow, we also look for alternate
workﬂows or paths that could be leveraged to minimize the
credentials required by an attacker. Finally, we look for any
leaked user-speciﬁc attributes during protocol interactions
that could be leveraged later, if intercepted, by an adversary.
We triage our ﬁndings from different workﬂows to ﬁnd plau-
sible attack vectors and to verify potential exploits.
The approach we use to extract protocol data varies based
on the speciﬁcations of an app and the security defenses they
use. Since UPI 1.0 specs only state broad security guidelines
rather than protocol details, we examine multiple apps to know
whether the protocol varies across different apps. We analyze
BHIM, the ﬂagship app published by the same government
organization that maintains the UPI system and then conﬁrm
our ﬁndings by analyzing additional apps.
App Reversing-Engineering. One approach to capture the
protocol data sent and received by an app is to run it in a sand-
box. Sandbox tools such as CuckooDroid [14] use an emulator
for dynamic analysis. Hence, to test if the UPI apps can run in
a sandbox, we manually run each app in Android SDK’s built-
in emulator on a Linux host. However, we ﬁnd that these apps
do not run without a physical SIM card, which is unavailable
on an emulator. The apps also use anti-emulation techniques
that prevent them from running in an emulator.
Besides anti-emulation, we ﬁnd that the payment apps also
use several other defenses. For instance, all of them detect
a rooted phone and deter a user from running the app on
a rooted phone. Some apps also look for the presence of
hooking libraries such as Xposed [28] that typically require
root access to modify system ﬁles. That apart, all apps are
obfuscated, use encrypted communication, enforce session
timeout and account lockout, avoid storing or transmitting
data in the clear, and avoid using hard-coded credentials or
keys. The extent of security defenses used by these apps shows
that app developers have designed the apps with security in
mind. This is unlike ﬁndings by Reaves et al. [48] that found
basic security ﬂaws in Indian payment apps around 2015.
Our security assessments show that some apps, such as
BHIM, allow repackaging. We leverage this to instrument an
app’s code statically to learn speciﬁcs of the authentication
handshake, such as the name of the activity and method that
generated network trafﬁc. Because such speciﬁcs help with
precise analysis, we ﬁrst check whether the apps can be in-
strumented and repackaged. To instrument the app, we ﬁrst
disassemble it using APKTool [4], insert debug statements,
and then repackage it with our signature.
One question that arises is where to instrument in an app’s
code as this requires knowledge of the methods of the app we
want to instrument. Since we do not know this a priori, we
manually reverse-engineer the apps using the JEB [30] disas-
sembler and decompiler. Some times, JEB fails to decompile
certain classes that are control-ﬂow obfuscated. In such cases,
we use JDK’s javap command to read bytecode. We augment
our analysis with results from the static components of two
hybrid analyzers MobSF [21] and Drozer [26].
We could not repackage certain apps such as Google Pay. In
such cases, we intercept an app’s network trafﬁc using a TLS
man-in-the-middle proxy called mitmproxy [36]. We install
the OpenVPN app on our Android phone and an OpenVPN
service on a Linux host and conﬁgure the host’s ﬁrewall rules
to route trafﬁc to the mitmproxy. The setup also requires that
we install mitmproxy’s certiﬁcate on the phone. However,
we ﬁnd that starting Android Nougat, Android does not trust
user-installed certiﬁcates, and setting up a system certiﬁcate
requires root access, an impediment. Hence we conduct our
analysis on Android Marshmallow and Lollipop devices.
3.2 Analysis of BHIM & UPI 1.0 Protocol
Bharat Interface for Money (BHIM) [5] is the Indian govern-
ment’s reference implementation of a payment app over UPI
and was launched along with UPI 1.0. We discuss ﬁndings
from our analysis of BHIM’s user registration process for a
user Alice whose UPI ID is her cell number. We instrument
BHIM to see the protocol data it exchanges with the UPI
server during registration. We show an example of how we
instrument BHIM in the Appendix.
3.3 BHIM User Registration Protocol
Steps 1-10 on the left of Figure 3 are the steps of the client-
server handshake between BHIM version 1.3 and the UPI 1.0
server, with minimal and relevant protocol data shown. The
screen numbers (circled) on the left indicate the screenshot of
the app in Figure 2 that generated the trafﬁc. We describe the
ten steps of UPI’s default workﬂow below.
1. Step 1: When Alice starts BHIM, BHIM ﬁrst requests
Alice permission to send SMS messages (for later use)
(Figure 2, #2). Once BHIM gets the permission, BHIM
sends Alice’s device details such as the device’s Android
version, device ID, make, manufacturer, and model to
the UPI server as an HTTPS message.
2. Step 2: UPI server sends Alice a 13-digit registration
token that identiﬁes her device and waits to get the token
back from Alice as an SMS message.
3. Step 3: BHIM app sends the registration token as an
SMS message to the UPI server. BHIM waits for SMS
delivery conﬁrmation using the sendTextMessage API’s
deliveryIntent.
4. Step 4: When the UPI server receives the SMS, it (i)
learns that Alice got the token; and (ii) gets her cell
number from the message. The UPI server uses this in-
formation to hard-bind Alice’s cell number to her device.
USENIX Association
29th USENIX Security Symposium    1503
UPI server also sends a conﬁrmation to BHIM that it
received the SMS.
5. Step 5: BHIM requests a status of its device’s hard-
binding from the UPI server by sending the registration
token back to the server as an HTTPS message.
6. Step 6: The UPI server responds with a veriﬁcation status
that includes Alice’s customer ID, a registration token,
etc. back to Alice. By now, the UPI server has veriﬁed
both Alice and her device (Figure 2, #4).
7. Step 7: BHIM asks Alice to set a passcode (Figure 2,
#5). The app concatenates the SHA-256 hash of Alice’s
passcode with her cell number and sends it as an HTTPS
POST request to the UPI server.
8. Step 8: The UPI server issues a login token to Alice
(BHIM), which conﬁrms that her proﬁle is setup.
9. Step 9: BHIM then shows Alice a list of banks that
support UPI (Figure 2, #6). When Alice chooses her
bank from this list, BHIM sends a bank ID to the UPI
server.
10. Step 10: The UPI server sends Alice’s bank account
details such as her masked account number, the hash of
the account number, bank name, IFSC code, etc. back to
BHIM (Figure 2, #7).
The protocol description until now has seen two factors—
a) cell phone (and hence a device ﬁngerprint) as required by
the UPI spec; b) a secret passcode— both of which BHIM
sends to the UPI server during the handshake. For BHIM, this
means that the payment app server that authenticates a user’s
passcode and the UPI server that veriﬁes a device’s ﬁngerprint
is the same, a fact that is not surprising since the designers of
UPI also wrote BHIM.
Finally, to enable transactions, Alice sets a UPI PIN on
her bank account for which she needs her bank’s debit card
number and expiry date, as mentioned in Section 2.1.
Alternate Workﬂow1. In the default workﬂow described
above, BHIM sends the device registration token to the UPI
server as an SMS message for device hard-binding (Step 3).
In case the UPI server does not receive the SMS, thus failing
to hard-bind, BHIM provides an alternate workﬂow for hard-
binding, as shown in Figure 4a. BHIM prompts Alice to key-
in her cell number; BHIM sends the keyed-in cell number
along with the device registration token to the UPI server
as an HTTPS message. The UPI server sends an OTP to
Alice, which she must enter to complete device binding. The
remainder of the protocol proceeds as before.
Alternate Workﬂow2. If Alice, an already registered user,
changes her cell phone, then the UPI server has to re-bind her
cell number with the new cell phone. At the time of device
binding, the UPI server ﬁnds that an account for Alice already
Figure 3: BHIM User Registration Default+
+BHIM masks bank account number in step 10 of the handshake. The
authors masked the other info to safe-guard privacy.
exists and notiﬁes BHIM of the same (accountExists ﬂag in
Step 6). The UPI server prompts Alice for her passcode, and
once Alice is veriﬁed (Step 7), the server sends back Alice’s
bank account information that she previously added to BHIM
(Step 10). This workﬂow makes it convenient for Alice to
transfer her bank accounts to another phone, without going
through the hassle of adding all her bank accounts again.
3.3.1 Potential security holes—initial analysis
Before we describe the attacks on the UPI protocol, we ﬁrst
discuss three potential security holes that we observe:
1. Potential Security Hole #1: For an attacker Eve to take
over Alice’s account, one of the ﬁrst barriers to overcome
1504    29th USENIX Security Symposium
USENIX Association
(a) BHIM Alternate Handshake
(b) BHIM Attack Overview
(c) Overlay Attack
Figure 4: BHIM Alternate Handshake & Attack
is UPI’s device binding mechanism that binds Alice’s
cell number with her cell phone. For Eve to break the
binding, Eve must able to bind her cell phone with Al-
ice’s cell number. Though the default workﬂow makes
this hard, the alternate workﬂow1 provides a potential
fallback that allows Eve to send Alice’s cell number as
an HTTPS message from Eve’s phone.
2. Potential Security Hole #2: The alternate workﬂow1
uses OTP veriﬁcation for device-binding. If Alice, say,
enters a friend Bob’s cell number on her phone, the UPI
server will send the OTP to Bob’s phone. If Bob shares
that OTP with Alice, then Alice can conﬁrm the OTP
to the UPI server, which will hard-bind Alice’s phone
to Bob’s cell number. As a result, Bob will receive all
future SMS messages sent by the UPI server to Alice.
3. Potential Security Hole #3: In UPI’s default workﬂow,
Alice at no point provides a secret that she shares with
her bank to conﬁrm her identity. Nevertheless, the UPI