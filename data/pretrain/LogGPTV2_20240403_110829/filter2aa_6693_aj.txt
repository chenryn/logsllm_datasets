对于 常用的 处理器 子型号, GNU CC 始终 默认 保证 这种 一致性.
如何实现 结果一致 取决于 处理器 子型号.
.Sp
m88100 处理器 不对 内存引用 重新安排, 因此 访问结果 始终一致.
如果 使用了 `\|\c
.B \-m88100\c
\&\|' 选项, GNU CC 不产生 任何 针对 结果一致 的 特别指令.
.Sp
m88110 处理器 的 内存引用顺序 并不始终 符合 指令 请求的 引用顺序.
特别是 某条 读取指令 可能 在 先前的 存储指令 之前 执行.
多处理器 环境下, 乱序访问 扰乱了 易变内存访问 的 结果一致.
因此 当使用 `\|\c
.B \-m88000\c
\&\|' 或 `\|\c
.B \-m88110\c
\&\|' 选项时, GNU CC 在 适当的时候 产生 特别的指令 迫使 执行顺序 正确.
.Sp
这些 用于 保证 一致性 的 额外代码 有可能 影响 程序 的 性能. 如果 你 确认
能够 安全地 放弃 这种 保证, 你 可以 使用 `\|\c
.B \-mno-serialize-volatile\c
\&\|' 选项.
.Sp
如果 你 使用 `\|\c
.B \-m88100\c
\&\|' 选项, 但是 需要 在 m88110 处理器 上 运行时 的 结果一致, 
你 应该 加上 `\|\c
.B \-mserialize-volatile\c
\&\|' 选项.
.PP
.B \-msvr4
.TP
.B \-msvr3
打开 (`\|\c
.B \-msvr4\c
\&\|') 或 关闭 (`\|\c
.B \-msvr3\c
\&\|') 和 System V 第四版 (SVr4) 相关的 编译器扩展. 效果 如下:
.TP
\ \ \ \(bu
输出 哪种 汇编语法 (你 可以 使用 `\|\c
.B \-mversion\-03.00\c
\&\|' 选项 单独 选择).
.TP
\ \ \ \(bu
`\|\c
.B \-msvr4\c
\&\|' 使 C 预处理器 识别 `\|\c
.B #pragma weak\c
\&\|' 指令
.TP
\ \ \ \(bu
`\|\c
.B \-msvr4\c
\&\|' 使 GCC 输出 额外的 声明指令(declaration directive), 用于 SVr4.
.PP
除了 SVr4 配置, `\|\c
.B \-msvr3\c
\&\|' 是 所有 m88K 配置 的 默认选项.
.TP
.B \-mtrap\-large\-shift
.TP
.B \-mhandle\-large\-shift
包含 一些 指令, 用于 检测 大于 31 位 的 位移 (bit-shift); 
根据 相应的 选项, 对 这样 的 位移 发出 自陷 (trap) 或 执行 适当 的 处理代码.
默认情况下, GCC 对 大位移 不做 特别处理.
.TP
.B \-muse\-div\-instruction
很早以前 的 88K 型号 没有 (div) 除法指令, 因此 默认情况下 GCC 避免 产生
这条 指令. 而 这个 选项 告诉 GCC 该指令 是 安全的.
.TP
.B \-mversion\-03.00
在 DG/UX 配置 中 存在 两种 风格 的 SVr4. 这个选项 修改
.B \-msvr4 ,
选择 hybrid-COFF 或 real-ELF 风格. 其他 配置 均 忽略 该选项.
.TP
.B \-mwarn\-passed\-structs
如果 某个函数 把 结构 当做 参数 或 结果 传递, GCC 发出 警告.
随着 C 语言 的 发展, 人们 已经 改变了 传递 结构 的 约定, 它 往往 导致
移植问题. 默认情况下, GCC 不会 发出 警告.
.PP
下面的选项 用于 IBM RS6000:
.PP
.B \-mfp\-in\-toc
.TP
.B \-mno\-fp\-in\-toc
控制 是否 把 浮点常量 放到 内容表 (TOC) 中, 内容表 存放 所有的 全局变量
和 函数地址. 默认情况下, GCC 把 浮点常量 放到 这里; 如果 TOC 溢出, `\|\c
.B \-mno\-fp\-in\-toc\c
\&\|' 选项 能够 减少 TOC 的 大小, 这样 就可以 避免 溢出.
.PP
下面的 `\|\c
.B \-m\c
\&\|' 选项 用于 IBM RT PC:
.TP
.B \-min\-line\-mul
对于 整数乘法 使用 嵌入代码. 这是 默认选项.
.TP
.B \-mcall\-lib\-mul
对于 整数乘法 使用 \c
.B lmul$$\c
\& .
.TP
.B \-mfull\-fp\-blocks
生成 全尺寸 浮点数据块, 包括 IBM 建议 的 最少数量 的 活动空间 (scratch space).
这是 默认选项.
.TP
.B \-mminimum\-fp\-blocks
不要 在 浮点数据块 中 包括 额外的 活动空间. 这样 就 产生 较小 但是 略慢
的 可执行程序, 因为 活动空间 必须 动态分配.
.TP
.B \-mfp\-arg\-in\-fpregs
采用 不兼容 IBM 调用约定 的 调用序列, 通过 浮点寄存器 传送 浮点参数.
注意, 如果 指定了 这个选项, \c
.B varargs.h\c
\& 和 \c
.B stdargs.h\c
\& 将 无法 支持 浮点单元.
.TP
.B \-mfp\-arg\-in\-gregs
使用 正常的 调用约定 处理 浮点参数. 这是 默认选项.
.TP
.B \-mhc\-struct\-return
通过 内存 返回 大于 一个字 的 结构, 而不是 通过 寄存器.
用于 兼容 MetaWare HighC (hc) 编译器. 使用 `\|\c
.B \-fpcc\-struct\-return\c
\&\|' 选项 可以 兼容 Portable C 编译器 (pcc).
.TP
.B \-mnohc\-struct\-return
如果可以, 通过 寄存器 返回 某些 大于 一个字 的 结构. 这是 默认选项.
如果 打算 兼容 IBM 提供 的 编译器, 请使用 `\|\c
.B \-fpcc\-struct\-return\c
\&\|' 或
`\|\c
.B \-mhc\-struct\-return\c
\&\|' 选项.
.PP
下面的  `\|\c
.B \-m\c
\&\|' 选项 用于 MIPS 家族 的 计算机:
.TP
.BI "\-mcpu=" "cpu-type"
生成 指令 的 时候, 假设 默认的 机器类型 是
.I cpu-type .
默认情况下 的
.I cpu-type
是
.BR default ,
GCC 将选取 任何机型 上 都是 最长周期时间 的 指令, 这样 才能使 代码
在 所有的 MIPS 处理器 上 以 合理 的 速度 运行. 
.I cpu-type
的 其他 选择 是
.BR r2000 ,
.BR r3000 ,
.BR r4000 ,
和
.BR r6000 .
虽然 选定 某个 
.I cpu-type
后, GCC 将 针对 选定的 芯片 安排 对应的 工作, 但是 如果 不指定
.B \-mips2
或
.B \-mips3
选项, 编译器 不会 输出 任何 不符合 MIPS ISA (instruction set architecture)
一级 的 代码.
.TP
.B \-mips2
输出 MIPS ISA 二级指令 (可能的扩展, 如平方根指令).
.B \-mcpu=r4000
或
.B \-mcpu=r6000
选项 必须 和
.BR \-mips2 
联用.
.TP
.B \-mips3
输出 MIPS ISA 三级指令 (64位指令).
.B \-mcpu=r4000
选项 必须 和
.BR \-mips2 
联用. (译注: 疑为 \-mips3)
.TP
.B \-mint64
.TP
.B \-mlong64
.TP
.B \-mlonglong128
这些 选项 目前 不起作用.
.TP
.B \-mmips\-as
产生 用于 MIPS 汇编器 的 代码, 同时 使用
.B mips\-tfile
添加 普通的 调试信息. 对于 大多数 平台 这是 默认选项, 除了
OSF/1 参考平台, 它 使用 OSF/rose 目标 格式. 如果 打开了 任一个
.BR \-ggdb ,
.BR \-gstabs ,
或
.B \-gstabs+
选项开关,
.B mips\-tfile
程序 就把 stab 封装在 MIPS ECOFF 里面.
.TP
.B \-mgas
产生 用于 GNU 汇编器 的 代码.  在 OSF/1 参考平台 上 这是 默认选项,
它 使用 OSF/rose 目标 格式.
.TP
.B \-mrnames
.TP
.B \-mno\-rnames
.B \-mrnames
开关选项 告诉 输出代码 使用 MIPS 软件名称 说明 寄存器, 而不是 硬件名称
(就是说, 用
.B a0
代替
.BR $4 ).
GNU 汇编器 不支持
.B \-mrnames
选项, 而 MIPS 汇编器 则 运行 MIPS C 预处理器 处理 源文件.
.B \-mno\-rnames
是 默认选项.
.TP
.B \-mgpopt
.TP
.B \-mno\-gpopt
.B \-mgpopt
开关选项 要求 在 正文段 中 把 所有的 数据声明 写到 指令 前面, 使 各种 MIPS 
汇编器 对 短类型 全局 或 静态 数据项 (short global or static data items)
输出 单字内存访问 而不是 双字内存访问.
当 打开 编译优化 时, 这是 默认功能.
.TP
.B \-mstats
.TP
.B \-mno\-stats
每次 处理完 非嵌入函数 (non-inline function) 后,
.B \-mstats
开关选项 使 编译器 向 标准错误文件 输出 一行 关于 程序 的 统计资料
(保存的 寄存器 数目, 堆栈 大小, 等等).
.TP
.B \-mmemcpy
.TP
.B \-mno\-memcpy
.B \-mmemcpy
开关选项 使 所有 的 块移动 操作 调用 适当的 string 函数
.RB ( memcpy
或
.BR bcopy ),
而不是 生成 嵌入代码.
.TP
.B \-mmips\-tfile
.TP
.B \-mno\-mips\-tfile
当 MIPS 汇编器 生成
.B mips\-tfile
文件 (用于 帮助 调试) 后, 
.B \-mno\-mips\-tfile
开关选项 阻止 编译器 使用 
.B mips\-tfile
后期处理 (postprocess) 目标文件. 不运行
.B mips\-tfile
就 没有 调试器 关注的 局部变量. 另外, 
.B stage2
和
.B stage3
目标文件 将把 临时文件名 传递给 汇编器, 嵌在 目标文件 中, 这 意味着
不比较 目标文件 是否 相同.
.TP
.B \-msoft\-float
输出 包含 浮点库调用.
.I 警告: 
所需库 不是 GNU CC 的 一部分. 一般说来 使用 该机型 本地 C 编译器 的
相应部件, 但是 不能 直接 用于 交叉编译, 你 必须 自己 安排, 提供
交叉编译 适用的 库函数.
.TP
.B \-mhard\-float
输出 包含 浮点指令. 如果 编译器 没有 被改动, 这就是 默认选项.
.TP
.B \-mfp64
编译器 认为 状态字 的
.B FR
置位(on), 也就是说 存在 32 64-bit 浮点寄存器, 而不是 32 32-bit 浮点寄存器.
同时 必须 打开
.B \-mcpu=r4000
和
.B \-mips3
开关.
.TP
.B \-mfp32
认为 存在 32 32-bit 浮点寄存器. 这是 默认选项.
.PP
.B \-mabicalls
.TP
.B \-mno\-abicalls
输出 (或 不输出)
.BR \&.abicalls ,
.BR \&.cpload ,
和
.B \&.cprestore
伪指令, 某些 System V.4 版本 用于 位置无关代码.
.TP
.B \-mhalf\-pic
.TP
.B \-mno\-half\-pic
.B \-mhalf\-pic
开关选项 要求 把 外部引用 的 指针 放到 数据段, 并且 载入 内存, 而不放到
正文段. 该选项 目前 不起作用.
.TP
.B \-G num