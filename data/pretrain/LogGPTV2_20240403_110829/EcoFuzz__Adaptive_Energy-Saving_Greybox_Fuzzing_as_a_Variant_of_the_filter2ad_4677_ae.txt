28(+1)
1012(+155)
VUzzer
1(+0)
16(+0)
28(+1)
47(+6)
EcoFuzz
44(+4)
57(+4)
28(+1)
1252(+200)
In addition, EcoFuzz outperformed other AFL-type fuzzers
on who, with ﬁnding 3× more bugs than AFL. Therefore,
EcoFuzz is efﬁcient in discovering bugs in LAVA-M. Since
AFL-type fuzzers are deployed in our platform, where the
conﬁguration is slightly different from the cloud server, the
comparison of EcoFuzz with Angora and VUzzer in Table 5
may not be strict enough. Therefore, we implement EcoFuzz
on the same cloud server and do more analysis in Appendix
8.3.
5.6 Extended Application for EcoFuzz
The previous evaluation proved that EcoFuzz could ﬁnd more
paths than other AFL-type fuzzers in most cases with lower
average-cost. There are also certain speciﬁc cases, such as
when the test cases have slow execution speed and there is
a low upper bound of paths (e.g., fuzzing the IoT devices or
binary programs via QEMU), where EcoFuzz’s advantages
are prominent.
In such cases, EcoFuzz was applied on IoTHunter [37]
to fuzz the SNMP component [8]. In RoutterOS’6.44.3 stable
version, a vulnerability of SNMP component was observed.
This issue was declared to be a failure of the processing input
SNMP packet that may lead to a denial of service. The SNMP
process will crash and restart when the packet in POC is
received. Although SNMP does restart after a crash, repeated
crashes might create an extended Denial of Service (DoS)
condition, as shown in Table 8. Though we had submitted the
crash, Mikrotik company released a new version of 6.45beta54
that has patched the bug.
6 Discussion
Compared to other techniques, EcoFuzz can effectively ex-
plore more paths in the same number of executions. The
adaptive mechanism implemented by EcoFuzz enables Eco-
Fuzz to ﬂexibly revise subsequent energy allocations as per
the current utilization ratio of energy.
It is noteworthy that EcoFuzz developed AFL’s search strat-
egy and power schedule, not including the mutation strategies,
to be similar to that of AFLFast. That is, EcoFuzz does not
change the transition probability pi j, which is different from
FairFuzz. Though FairFuzz improves the efﬁciency of random
mutation, the result shows that EcoFuzz outperforms FairFuzz
in terms of the ability to explore more paths while consuming
less energy. Additionally, when testing the real-world soft-
ware, sometimes the ability to maximize the coverage while
saving energy is crucial for CGF. This has already been ex-
plained by implementing EcoFuzz for testing the IoT devices.
As EcoFuzz is built on AFL, EcoFuzz follows AFL’s ad-
vantages. Compared to VUzzer [29] or other greybox fuzzing
with taint analysis techniques, EcoFuzz’s execution speed is
higher. EcoFuzz also beneﬁts from certain techniques used
for enhancing AFL (e.g., CollAFL [13]), thus ensuring that
EcoFuzz’s performance can still be enhanced.
More importantly, regardless of which program analysis
technique is used, whether the goal is to maximize coverage
or explore rare branches, selecting an optimal seed to fuzz and
assigning suitable energy are crucial for enhancing efﬁciency.
The VAMAB model can still optimize the power schedule
of other fuzzers, whether they are AFL-type fuzzers or other
greybox fuzzers, by simply modifying the deﬁnition of goal
and rewards as per the actual requirement.
7 Related Work
7.1 Scheduling Algorithms in Fuzzing
As a novel work that focuses on improving AFL’s schedul-
ing algorithm, AFLFast proposed a crucial concept transi-
tion probability for illustrating the transition between differ-
ent paths, providing the direction of improving efﬁciency in
power schedule and search strategy [6]. However, AFLFast
did not conduct a deeper study of the transition probability.
In contrast, we developed a VAMAB model for explaining
the fuzzing process in terms of game theory and presented
the reward probability of depicting each seed’s ability to ﬁnd
new paths according to the transition probability. We also il-
lustrated the probability attenuation of reward probability and
stated the reward probability was not calculated accurately.
Moreover, the fuzzing process was classiﬁed into three states,
and the challenges of the different states were explained, fol-
lowed by suggesting optimal strategies for each state. Com-
pared to the Markov chain, our model reveals the challenges
in scheduling algorithms more profoundly.
Woo et al. [36] once stated searching over the parameter
space of blackbox fuzzing as the MAB problem. However, the
goal of Woo et al. was ﬁnding the highest number of unique
bugs, which is not applicable to CGF. If more energy is as-
signed to the seeds ﬁnding crashes, it may only trigger the
same crashes. This is one of the reasons for not selecting the
number of crashes as the target of our VAMAB model. On
2318    29th USENIX Security Symposium
USENIX Association
the other hand, aiming coverage helped in ﬁnding more seeds
exercising rare paths, thus aiding in ﬁnding unique crashes
in different functions. In addition, Patil et al. [26] modeled
the problem of deciding the number of random fuzzing it-
erations as Contextual Bandits (CB) problem between the
full reinforcement learning problem and MAB problem [18].
Patil et al. considered the seeds as arms and proposed mul-
tipliers of the test case’s energy, treating them as the arms
in the contextual bandit setting [26]. The aim of Patil et al.
was to determine the energy value from the test case contents
by using reinforcement learning techniques. However, their
work did not utilize the model for explaining the details of
the fuzzing process and only presented an algorithm to decide
a test case’s energy multiplier, given ﬁxed length contents
of the test case [26]. In contrast, we considered the trade-off
between exploration and exploitation of power schedules in
CGF in detail. Therefore, our VAMAB model is better suited
for modeling the scheduling algorithm of CGF than MAB or
CB. To the best of our knowledge, we are the ﬁrst to model
the scheduling problem as VAMAB.
7.2 Smart Seeds Generation or Selection
Certain directions for enhancing CGF can be understood
based on the VAMAB model. The ﬁrst research direction
is to improve the quality of the initial seeds, and this includes
selecting the seed inputs from a wealth of inputs [30] or gen-
erating well-distributed seed inputs for fuzzing programs that
process highly-structured inputs [33]. The core of these works
is providing the high reward probability seeds to the initial
state. As stated in Section 5.4, EcoFuzz can also beneﬁt from
a smart mechanism of seed generation. Besides, there are
researchers who aim to establish the mechanism for estimat-
ing each seed’s quality, which can help fuzzers accurately
select the seeds with high reward probability. Further, Zhao
et al. [44] designed a Monte Carlo-based probabilistic path
prioritization model for quantifying each path’s difﬁculty and
prioritizing them for concolic execution as well as implement-
ing a prototype system DigFuzz. Moreover, Böhme et al. [5]
proposed the Directed Greybox Fuzzing by using the distance
between the seeds and the target to measure the seeds’ quality.
Based on the VAMAB model, these researches provide cer-
tain methods for accurately estimating the reward probability
of their problem. EcoFuzz also uses the SPEM algorithm to
measure the quality of seeds. Moreover, the experiments in
our evaluation showed that the frequency of effective search-
ing in SPEM is approximately twice that of FidgetyAFL on
nm, which is regarded as a precise method for estimating the
quality of seeds. Besides, compared to AFLGo [5] and Dig-
Fuzz [44], EcoFuzz does not require additional program anal-
ysis techniques to achieve the same goals.
7.3 Greybox Fuzzing with Optimizing Muta-
tion Strategies
Several approaches focus on the second direction that en-
hances the mutation efﬁciency by using program analysis
techniques. Some approaches aim to ﬁnd locations in seed
inputs related to high-probability crash locations or to deter-
mine statements in the program [10,34], and other approaches
try to learn input format and utilize it for assisting mutation.
VUzzer [29] leveraged control- and data-ﬂow features of tar-
gets and used this information in the feedback loop for gen-
erating new inputs. However, VUzzer realized this function
based on Pin [20], which is slower than the techniques of
instruments used by EcoFuzz.
FairFuzz is implemented on AFL and can identify the parts
of the input that are crucial for satisfying the determined condi-
tions. In test cases generation, it avoids mutating these crucial
parts of the input and reduces the number of fuzz exercising
high-frequency paths [17]. Nevertheless, FairFuzz achieves
this function depending on the deterministic strategies being
implemented, which is not as effective as the random mutation.
In this paper, EcoFuzz was assessed against FairFuzz, and it
had been proved that, with the same number of executions,
EcoFuzz outperforms FairFuzz in exploring paths.
Some researchers aim to learn ﬁle formats and use them
in mutation to improve efﬁciency. Learn&Fuzz [14] used
sequence-based learning methods for the PDF’s structures.
Further, AFLSmart [28] kept the format attribute unchanged
in the mutation by providing prior knowledge. However, such
techniques require lots of initial ﬁles or prior knowledge, mak-
ing it difﬁcult to implement in testing real-world programs.
In contrast, EcoFuzz can be started conveniently.
8 Conclusion
In this paper, we proposed a variant of the Adversarial Multi-
Armed Bandit (VAMAB) model and used it for modeling the
scheduling problem in CGF. We also introduced the reward
probability for illustrating the ability of each seed to discover
new paths and explained problems such as the probability
attenuation. In addition, we classiﬁed the states of the seeds
set into three categories and illustrated the challenges and
opportunities in these states. Based on this, we proposed the
SPEM for measuring the reward probability and developed an
adaptive power schedule. We implemented these algorithms
on an adaptive energy-saving greybox fuzzer called EcoFuzz.
EcoFuzz explores more paths than six AFL-type fuzzers with
fewer executions, signiﬁcantly reducing the average-cost for
discovering a new path. Besides, EcoFuzz’s adaptive mecha-
nism and energy-saving advantages can help improve other
techniques. EcoFuzz was also compared with other works, and
their optimization directions were explained by the VAMAB
model, indicating that the applicability of our model is strong.
Since our VAMAB model is related to the reinforcement
USENIX Association
29th USENIX Security Symposium    2319
learning and the schedule algorithms of EcoFuzz are slightly
empirical, in the future, we may consider to optimize the
schedule algorithms and improve our work by implementing
some methods of reinforcement learning.
[9] Chen Chen, Baojiang Cui, Jinxin Ma, Runpu Wu, Jian-
chao Guo, and Wenqian Liu. A systematic review of
fuzzing techniques. Computers & Security, 75:118–137,
2018.
Acknowledgments
The authors would like to thank our shepherd Deian Ste-
fan and anonymous reviewers for their valuable comments
and helpful suggestions. The authors are supported in part
by Tianhe Supercomputer Project 2018YFB0204301, Na-
tional Science Foundation of Hunan Province in China
(2019JJ50729), and National Science Foundation China under
Grant 61902412 and 61902416.
References
[1] Peter Auer, Nicolo Cesa-Bianchi, and Paul Fischer.
Finite-time analysis of the multiarmed bandit problem.
Machine learning, 47(2-3):235–256, 2002.
[2] Peter Auer, Nicolo Cesa-Bianchi, Yoav Freund, and
Robert E Schapire. Gambling in a rigged casino: The
adversarial multi-armed bandit problem. In Proceedings
of IEEE 36th Annual Foundations of Computer Science,
pages 322–331. IEEE, 1995.
[3] Peter Auer, Nicolo Cesa-Bianchi, Yoav Freund, and
Robert E Schapire. The nonstochastic multiarmed ban-
dit problem. SIAM journal on computing, 32(1):48–77,
2002.
[4] Fabrice Bellard. Qemu, a fast and portable dynamic
translator. In USENIX Annual Technical Conference,
FREENIX Track, volume 41, page 46, 2005.
[5] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen,
and Abhik Roychoudhury. Directed greybox fuzzing. In
Proceedings of the 2017 ACM SIGSAC Conference on
Computer and Communications Security, pages 2329–
2344. ACM, 2017.
[6] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoud-
hury. Coverage-based greybox fuzzing as markov chain.
IEEE Transactions on Software Engineering, 2017.
[7] Sébastien Bubeck, Nicolo Cesa-Bianchi, et al. Regret
analysis of stochastic and nonstochastic multi-armed
bandit problems. Foundations and Trends R(cid:13) in Machine
Learning, 5(1):1–122, 2012.
[8] Jeffrey D Case, Mark Fedor, Martin L Schoffstall, and
James Davin. Simple network management protocol
(snmp). Technical report, 1990.
[10] Peng Chen and Hao Chen. Angora: Efﬁcient fuzzing by
principled search. In 2018 IEEE Symposium on Security
and Privacy (SP), pages 711–725. IEEE, 2018.
[11] Brendan Dolan-Gavitt. Of bugs and baselines, 2018.
[12] Brendan Dolan-Gavitt, Patrick Hulin, Engin Kirda, Tim
Leek, Andrea Mambretti, Wil Robertson, Frederick Ul-
rich, and Ryan Whelan. Lava: Large-scale automated
vulnerability addition. In 2016 IEEE Symposium on
Security and Privacy (SP), pages 110–121. IEEE, 2016.
[13] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu,
Kang Li, Zhongyu Pei, and Zuoning Chen. Collaﬂ: Path
sensitive fuzzing. In 2018 IEEE Symposium on Security
and Privacy (SP), pages 679–696. IEEE, 2018.
[14] Patrice Godefroid, Hila Peleg, and Rishabh Singh.
Learn&fuzz: Machine learning for input fuzzing. In
Proceedings of the 32nd IEEE/ACM International Con-
ference on Automated Software Engineering, pages 50–
59. IEEE Press, 2017.
[15] Siddharth Karamcheti, Gideon Mann, and David Rosen-
berg. Adaptive grey-box fuzz-testing with thompson
sampling. In Proceedings of the 11th ACM Workshop on
Artiﬁcial Intelligence and Security, pages 37–47. ACM,
2018.
[16] George Klees, Andrew Ruef, Benji Cooper, Shiyi Wei,
and Michael Hicks. Evaluating fuzz testing. In Proceed-
ings of the 2018 ACM SIGSAC Conference on Computer
and Communications Security, pages 2123–2138. ACM,
2018.
[17] Caroline Lemieux and Koushik Sen. Fairfuzz: A tar-
geted mutation strategy for increasing greybox fuzz test-
ing coverage. In Proceedings of the 33rd ACM/IEEE
International Conference on Automated Software Engi-
neering, pages 475–485. ACM, 2018.
[18] Lihong Li, Wei Chu, John Langford, and Robert E
Schapire. A contextual-bandit approach to personal-
ized news article recommendation. In Proceedings of
the 19th international conference on World wide web,
pages 661–670. ACM, 2010.
[19] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan,
Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix:
In Proceedings
program-state based binary fuzzing.
of the 2017 11th Joint Meeting on Foundations of Soft-
ware Engineering, pages 627–637. ACM, 2017.
2320    29th USENIX Security Symposium
USENIX Association
[20] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish
Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vi-
jay Janapa Reddi, and Kim Hazelwood. Pin: building
customized program analysis tools with dynamic instru-
mentation. In Acm sigplan notices, volume 40, pages
190–200. ACM, 2005.
[21] Chenyang Lyu, Shouling Ji, Chao Zhang, Yuwei Li, Wei-
Han Lee, Yu Song, and Raheem Beyah. {MOPT}:
In 28th
Optimized mutation scheduling for fuzzers.
{USENIX} Security Symposium ({USENIX} Security
19), pages 1949–1966, 2019.
[22] Richard McNally, Ken Yiu, Duncan Grove, and Damien
Gerhardy. Fuzzing: the state of the art. Technical report,
DEFENCE SCIENCE AND TECHNOLOGY ORGAN-
ISATION EDINBURGH (AUSTRALIA), 2012.
[23] Barton P Miller, Louis Fredriksen, and Bryan So. An
empirical study of the reliability of unix utilities. Com-
munications of the ACM, 33(12):32–44, 1990.
[24] Charlie Miller. Fuzz by number. In CanSecWest Con-
ference, 2008.
[25] James R Norris. Markov chains. Number 2. Cambridge
university press, 1998.
[26] Ketan Patil and Aditya Kanade. Greybox fuzzing
arXiv preprint