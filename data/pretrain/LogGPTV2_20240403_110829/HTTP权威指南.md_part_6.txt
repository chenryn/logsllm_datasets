确实为未来发展作出了一些令人兴奋的承诺。我们将在第2章较为详细地讨论
URN，而本书的其余部分讨论的基本上都是URL。
除非特殊说明，否则本书的其余部分都会使用约定的术语，并且会不加区别地使用
URI和URL。
1.4 事务
我们来更仔细地看看客户端是怎样通过HTTP与Web服务器及其资源进行事务处理
的。一个HTTP事务由一条（从客户端发往服务器的）请求命令和一个（从服务器
发回客户端的）响应结果组成。这种通信是通过名为HTTP报文（HTTP message）
的格式化数据块进行的，如图1-5所示。
包含命令和URI的HTTP请求报文
GET /specials/saw-blade.gif HTTP/1.0
Host: www.joes-hardware.com
因特网
HTTP/1.0 200 OK
客户端 www.joes-hardware.com
Content-type: image/gif
Content-length: 8572
包含事务结果的HTTP响应报文
图1-5 包含请求及响应报文的HTTP事务
1.4.1 方法
HTTP支持几种不同的请求命令，这些命令被称为HTTP方法（HTTP method）。每
条HTTP请求报文都包含一个方法。这个方法会告诉服务器要执行什么动作（获取
一个Web页面、运行一个网关程序、删除一个文件等）。表1-2列出了五种常见的
HTTP方法。
HTTP概述 ｜ 9
表1-2 一些常见的HTTP方法
HTTP方法 描 述
GET 从服务器向客户端发送命名资源
8
PUT 将来自客户端的数据存储到一个命名的服务器资源中去
DELETE 从服务器中删除命名资源
POST 将客户端数据发送到一个服务器网关应用程序
HEAD 仅发送命名资源响应中的HTTP首部
我们会在第3章详细讨论HTTP方法。
1.4.2 状态码
每条HTTP响应报文返回时都会携带一个状态码。状态码是一个三位数字的代码，
告知客户端请求是否成功，或者是否需要采取其他动作。表1-3显示了几种常见的
状态码。
表1-3 一些常见的HTTP状态码
HTTP状态码 描 述
200 OK。文档正确返回
302 Redirect（重定向）。到其他地方去获取资源
404 Not Found（没找到）。无法找到这个资源
伴随着每个数字状态码，HTTP还会发送一条解释性的“原因短语”文本（参见图
1-5中的响应报文）。包含文本短语主要是为了进行描述，所有的处理过程使用的都
是数字码。
HTTP软件处理下列状态码和原因短语的方式是一样的。
200 OK
200 Document attached
200 Success
200 All’s cool, dude
第3章详细解释了HTTP状态码。
1.4.3 Web页面中可以包含多个对象
应用程序完成一项任务时通常会发布多个HTTP事务。比如，Web浏览器会发布一
系列HTTP事务来获取并显示一个包含了丰富图片的Web页面。浏览器会执行一个
事务来获取描述页面布局的HTML“框架”，然后发布另外的HTTP事务来获取每
个嵌入式图片、图像面板、Java 小程序等。这些嵌入式资源甚至可能位于不同的服
10 ｜ 第1章
务器上，如图1-6所示。因此，一个“Web页面”通常并不是单个资源，而是一组
资源的集合。 9
因特网
服务器1
服务器2
客户端
图1-6 复合Web页面要为每个嵌入式资源使用一个单独的HTTP事务
1.5 报文
现在我们来快速浏览一下HTTP请求和响应报文的结构。第3章会深入研究HTTP
报文。
HTTP报文是由一行一行的简单字符串组成的。HTTP报文都是纯文本，不是二进
制代码，所以人们可以很方便地对其进行读写1。图1-7显示了一个简单事务所使用
的HTTP报文。
(a) 请求报文 (b) 响应报文
GET /test/hi-there.txt HTTP/1.0 起始行 HTTP/1.0 200 OK
Accept: text/* 首部 Content-type: text/plain
Accept-Language: en,fr Content-length: 19
主体 Hi! I’m a message!
图1-7 由一行行的简单文本结构组成的HTTP报文
注1： 有些程序员会抱怨HTTP的语法解析太困难了，这项工作需要很多技巧，而且很容易出错，尤其是在
设计高速软件的时候更是如此。二进制格式或更严格的文本格式可能更容易处理，但大多数HTTP程
序员都很欣赏HTTP的可扩展性以及可调试性。
HTTP概述 ｜ 11
从Web客户端发往Web服务器的HTTP报文称为请求报文（request message）。从
服务器发往客户端的报文称为响应报文（response message），此外没有其他类型的
10 HTTP报文。HTTP请求和响应报文的格式很类似。
HTTP报文包括以下三个部分。
• 起始行
报文的第一行就是起始行，在请求报文中用来说明要做些什么，在响应报文中说
明出现了什么情况。
• 首部字段
起始行后面有零个或多个首部字段。每个首部字段都包含一个名字和一个值，为
了便于解析，两者之间用冒号（:）来分隔。首部以一个空行结束。添加一个首
部字段和添加新行一样简单。
• 主体
空行之后就是可选的报文主体了，其中包含了所有类型的数据。请求主体中包括
了要发送给Web服务器的数据；响应主体中装载了要返回给客户端的数据。起
始行和首部都是文本形式且都是结构化的，而主体则不同，主体中可以包含任意
的二进制数据（比如图片、视频、音轨、软件程序）。当然，主体中也可以包含
文本。
简单的报文实例
图1-8显示了可能会作为某个简单事务的一部分发送的HTTP报文。浏览器请求资
源http://www.joes-hardware.com/tools.html。
在图1-8中，浏览器发送了一条HTTP请求报文。这条请求的起始行中有一个GET
命令，且本地资源为/tools.html。这条请求说明它使用的是1.0版的HTTP协议。请
求报文没有主体，因为从服务器上GET一个简单的文档不需要请求数据。
服务器会回送一条HTTP响应报文。这条响应中包含了HTTP的版本号（HTTP/1.0）、
一个成功状态码（200）、一个描述性的原因短语（OK），以及一块响应首部字
段，在所有这些内容之后跟着包含了所请求文档的响应主体。Content-Length
首部说明了响应主体的长度，Content-Type首部说明了文档的MIME类型。
12 ｜ 第1章
（a）请求报文
请求起始行（命令） GET /tools.html HTTP/1.0
User-agent: Mozilla/4.75 [en] (Win98; U)
Host: www.joes-hardware.com
请求首部 Accept: text/html, image/gif, image/jpeg
Accept-language: en
没有请求主体
客户端 www.joes-hardware.com
（b）响应报文
响应起始行 HTTP/1.0 200 OK
（状态） Date: Sun, o1 Oct 2000 23:25:17 GMT
Server: Apache/1.3.11 BSafe-SSL/1.38 (Unix)
响应首部 Last-modified: Tue, 04 Jul 2000 09:46:21 GMT
Content-length: 403
Content-type: text/html
Joe’s Tools
Tools Page
Hammers
Joe’s Hardware Online has the largest selection of
hammers on the earth.
响应主体 Drills
Joe’s Hardware has a complete line of cordless
and corded drills, as well as the latest in
plutonium-powered atomic drills, for those big
around the house jobs....
图1-8 http://www.joes-hardware.com/tools.html的GET事务实例
1.6 连接
概要介绍了HTTP报文的构成之后，我们来讨论一下报文是如何通过传输控制协议
（Transmission Control Protocol，TCP）连接从一个地方搬移到另一个地方去的。
1.6.1 TCP/IP
HTTP是个应用层协议。HTTP无需操心网络通信的具体细节；它把联网的细节都
交给了通用、可靠的因特网传输协议TCP/IP。 11
TCP提供了：
HTTP概述 ｜ 13
• 无差错的数据传输；
• 按序传输（数据总是会按照发送的顺序到达）；
• 未分段的数据流（可以在任意时刻以任意尺寸将数据发送出去）。
因特网自身就是基于TCP/IP的，TCP/IP是全世界的计算机和网络设备常用的层次
化分组交换网络协议集。TCP/IP隐藏了各种网络和硬件的特点及弱点，使各种类型
的计算机和网络都能够进行可靠地通信。
只要建立了TCP连接，客户端和服务器之间的报文交换就不会丢失、不会被破坏，
也不会在接收时出现错序了。
用网络术语来说，HTTP协议位于TCP的上层。HTTP使用TCP来传输其报文数
12 据。与之类似，TCP则位于IP的上层（参见图1-9）。
HTTP 应用层
TCP 传输层
IP 网络层
网络特有的链路接口 数据链路层
物理网络硬件 物理层
图1-9 HTTP网络协议栈
1.6.2 连接、IP地址及端口号
在HTTP客户端向服务器发送报文之前，需要用网际协议（Internet Protocol，IP）
地址和端口号在客户端和服务器之间建立一条TCP/IP连接。
建立一条TCP连接的过程与给公司办公室的某个人打电话的过程类似。首先，要拨
打公司的电话号码。这样就能进入正确的机构了。其次，拨打要联系的那个人的分
机号。
在TCP中，你需要知道服务器的IP地址，以及与服务器上运行的特定软件相关的
TCP端口号。
这就行了，但最初怎么获得HTTP服务器的IP地址和端口号呢？当然是通过URL
了！我们前面曾提到过，URL就是资源的地址，所以自然能够为我们提供存储资源
的机器的IP地址。我们来看几个URL：
14 ｜ 第1章
http://207.200.83.29:80/index.html
http://www.netscape.com:80/index.html
http://www.netscape.com/index.html
第一个URL使用了机器的IP地址，207.200.83.29以及端口号80。
第二个URL没有使用数字形式的IP地址，它使用的是文本形式的域名，或者称为
主机名（www.netscape.com）。主机名就是IP地址比较人性化的别称。可以通过一
种称为域名服务（Domain Name Service，DNS）的机制方便地将主机名转换为IP
地址，这样所有问题就都解决了。第2章会介绍更多有关DNS和URL的内容。
最后一个URL没有端口号。HTTP的URL中没有端口号时，可以假设默认端口号是80。
有了IP地址和端口号，客户端就可以很方便地通过TCP/IP进行通信了。图1-10显
示了浏览器是怎样通过HTTP显示位于远端服务器中的某个简单HTML资源的。 13
用户输入URL
（c）获取端口号（80）
（d）连接到161.58.228.45的端口80
http://www.joes-hardware.com:80/tools.html
因特网
（a）获取主机名
客户端 服务器
www.joes-hardware.com
（e）发送一条HTTP GET请求
（b）DNS
因特网
客户端 服务器
（f）从服务器读取HTTP响应
因特网
客户端 服务器
（g）关闭连接
Screen shot needed
因特网
客户端 服务器