### 1.4 事务

#### 1.4.1 方法
HTTP支持多种请求命令，这些命令被称为HTTP方法。每条HTTP请求报文都包含一个方法，用于指示服务器执行特定的操作（如获取Web页面、运行网关程序或删除文件）。表1-2列出了五种常见的HTTP方法。

**表1-2 一些常见的HTTP方法**

| HTTP方法 | 描述 |
| --- | --- |
| GET | 从服务器向客户端发送命名资源 |
| PUT | 将来自客户端的数据存储到一个命名的服务器资源中 |
| DELETE | 从服务器中删除命名资源 |
| POST | 将客户端数据发送到一个服务器网关应用程序 |
| HEAD | 仅发送命名资源响应中的HTTP首部 |

我们将在第3章详细讨论HTTP方法。

#### 1.4.2 状态码
每条HTTP响应报文返回时都会携带一个三位数的状态码，告知客户端请求是否成功，或者是否需要采取其他动作。表1-3显示了几种常见的状态码。

**表1-3 一些常见的HTTP状态码**

| HTTP状态码 | 描述 |
| --- | --- |
| 200 | OK。文档正确返回 |
| 302 | Redirect（重定向）。到其他地方去获取资源 |
| 404 | Not Found（未找到）。无法找到该资源 |

每个数字状态码还会伴随一条解释性的“原因短语”文本（参见图1-5中的响应报文）。虽然这些文本主要用于描述，但所有处理过程均基于数字码。例如：

- 200 OK
- 200 Document attached
- 200 Success
- 200 All’s cool, dude

这些状态码和原因短语在HTTP软件中的处理方式是相同的。第3章将详细解释HTTP状态码。

#### 1.4.3 Web页面中可以包含多个对象
完成一项任务的应用程序通常会发布多个HTTP事务。例如，Web浏览器会发布一系列HTTP事务来获取并显示一个包含丰富图片的Web页面。浏览器首先执行一个事务来获取描述页面布局的HTML框架，然后发布其他HTTP事务来获取每个嵌入式图片、图像面板、Java小程序等。这些嵌入式资源甚至可能位于不同的服务器上（如图1-6所示）。因此，一个“Web页面”实际上是一组资源的集合。

### 1.5 报文
现在我们快速浏览一下HTTP请求和响应报文的结构。第3章将深入研究HTTP报文。

HTTP报文由简单字符串组成，全部为纯文本格式，便于人们读写。图1-7展示了一个简单事务所使用的HTTP报文。

**图1-7 由一行行的简单文本结构组成的HTTP报文**

(a) 请求报文  
```
GET /test/hi-there.txt HTTP/1.0
Accept: text/*
Accept-Language: en,fr
```

(b) 响应报文  
```
HTTP/1.0 200 OK
Content-type: text/plain
Content-length: 19

Hi! I’m a message!
```

注：尽管某些程序员抱怨HTTP语法解析困难且容易出错，特别是在设计高速软件时，但大多数HTTP程序员赞赏其可扩展性和可调试性。

从Web客户端发往Web服务器的HTTP报文称为请求报文，从服务器发往客户端的报文称为响应报文。HTTP请求和响应报文的格式非常相似，包括以下三个部分：

- **起始行**：报文的第一行，在请求报文中说明要执行的操作，在响应报文中说明结果。
- **首部字段**：起始行后有零个或多个首部字段，每个字段包含一个名字和一个值，用冒号分隔。首部以空行结束。
- **主体**：空行之后是可选的报文主体，其中包含各种类型的数据。请求主体包含要发送给Web服务器的数据，响应主体则包含要返回给客户端的数据。起始行和首部都是文本形式且结构化，而主体可以包含任意二进制数据。

### 1.6 连接
在简要介绍HTTP报文的构成后，我们将讨论报文如何通过传输控制协议（TCP）连接从一个地方传输到另一个地方。

#### 1.6.1 TCP/IP
HTTP是一种应用层协议，它依赖于通用、可靠的因特网传输协议TCP/IP来处理网络通信的具体细节。TCP提供了无差错的数据传输、按序传输以及未分段的数据流。因特网基于TCP/IP，这是一种层次化的分组交换网络协议集，隐藏了各种网络和硬件的特点及弱点，确保不同类型计算机和网络之间的可靠通信。

一旦建立TCP连接，客户端和服务器之间的报文交换就不会丢失、损坏或错序。HTTP协议位于TCP之上，使用TCP传输其报文数据。类似地，TCP位于IP之上（参见图1-9）。

**图1-9 HTTP网络协议栈**

```
HTTP 应用层
TCP 传输层
IP 网络层
网络特有的链路接口 数据链路层
物理网络硬件 物理层
```

#### 1.6.2 连接、IP地址及端口号
在HTTP客户端向服务器发送报文之前，需要用网际协议（IP）地址和端口号在客户端和服务器之间建立一条TCP/IP连接。这一过程类似于拨打公司电话号码和分机号。在TCP中，你需要知道服务器的IP地址和与特定软件相关的TCP端口号。

URL提供了存储资源的机器的IP地址。例如：

- `http://207.200.83.29:80/index.html` 使用IP地址和端口号80。
- `http://www.netscape.com:80/index.html` 使用主机名和端口号80。
- `http://www.netscape.com/index.html` 没有端口号，默认端口号为80。

通过DNS机制可以方便地将主机名转换为IP地址。有了IP地址和端口号，客户端就可以通过TCP/IP进行通信。图1-10展示了浏览器如何通过HTTP显示远端服务器中的某个简单HTML资源。

**图1-10 浏览器通过HTTP显示远端服务器中的HTML资源**

用户输入URL  
(c) 获取端口号（80）  
(d) 连接到161.58.228.45的端口80  
`http://www.joes-hardware.com:80/tools.html`  
(e) 发送一条HTTP GET请求  
(f) 从服务器读取HTTP响应  
(g) 关闭连接

希望这些优化使内容更加清晰、连贯和专业。