for all i ∈ [m + 1],
(cid:26)real(i)(k, x; r)(cid:27)k∈N
c
≈(cid:26)ideal(i)(k, x; r)(cid:27)k∈N
where S = (S1, . . . , Sm+1) and Si = Simi(Ai) and where r
is chosen uniformly at random.
We now present a Lemma from [32] that we will use to
prove security. Informally, it asserts that to prove a protocol
Π secure in the presence of a non-cooperative adversary Ai it
suﬃces to show that the protocol is secure in the semi-honest
model (i.e., where all the adversaries follow the protocol)
and that it is secure when Ai is malicious and all the other
parties are honest.
Lemma 2.3
([32]). If a multi-party protocol Π between
n parties (P1, . . . , Pn) securely computes f in the presence
of (1) independent and semi-honest adversaries and (2) a
malicious Ai and honest {Aj }j6=i; then Π is also secure in
the presence of an adversary Ai that is non-cooperative with
respect to all other semi-honest adversaries.
3 Our Protocols
We describe our server-aided SFE protocols which are secure
in the presence of a covert and malicious server, respectively.
For simplicity of the description, we assume the output of
the computation is a single bit. Extending it to more than
one output bit is straightforward.
Notations and primitives. Denote by inp(Pi) the set of
input wires for Pi’s input bits and let m be the total number
of input bits, i.e., m = P |inp(i)|. Here we assume the
output of the computation is a single bit, but both protocols
can be easily adapted to handle multiple bit outputs.
801Let C be a circuit that computes the function f . Let
GC(C; r) be an algorithm that, given a boolean circuit C and
random coins r, outputs a garbled circuit eC. Let GI(m; r)
be an algorithm that, given an input length m and coins r,
returns 2m input labels:
W =(cid:18) w0
1
w1
1
. . . w0
m
. . . w1
m (cid:19) ,
i and w1
such that w0
i are the labels of 0 and 1, respectively,
for the ith input wire. If x is an m-bit string, we denote by
W|x the label vector (wx1
m ). Let GO(r) be an algo-
rithm that, given coins r, returns two output labels (ω0, ω1)
and let Dec(ω; r) be a decoding algorithm that, given an
output label ω and coins r, returns a bit b. Finally, let
1 , . . . , wxm
Eval(eC, W|x) be an evaluation algorithm that, given a gar-
bled circuit eC and a set of input labels W|x, returns an
output label ω. We require that for all circuits C and all
coins r,
Eval(cid:18)GC(cid:0)C; r(cid:1), W|x(cid:19) = ωf (x),
and (ω0, ω1) := GO(r). For security, we also require in-
and that for b ∈ {0, 1}, Dec(cid:0)ωb; r(cid:1) = b, where W := GI(m; r)
put/output privacy which guarantees that a pair (eC, W|x)
reveal no partial information about x and f (x); and unforge-
ability which guarantees that an incorrect evaluation can be
detected.
Our protocols make use of several standard cryptographic
primitives, including pseudo-random functions, commitments,
secret sharing and symmetric key encryption (see [23] and
references therein for thorough discussion of their security
property and pointers to instantiations). We will denote by
FK (·) a pseudo-random function with key K. Let H(·) be
a one-way function (we use SHA, but we only need its one-
wayness property); Com(m) be a commitment to message m;
and Enc(k, m) be a (deterministic) symmetric encryption of
a message m under a key K. Any standard instantiation of
the above primitives works for us but following previous im-
plementations [52], we use SHA-1 and SHA-256 as pseudo-
random functions and use them to implement all other prim-
itives (see Section 4.1). Share will denote the sharing algo-
rithm of a n-out-of-n secret sharing scheme, i.e., Share(n, x)
outputs n shares (σ1, . . . , σn) of x such that no partial infor-
mation about x can be recovered unless all shares are held.
Throughout, we will assume that sharing is instantiated with
the simple XOR secret sharing scheme which, given an input
i=1 ri ⊕ x), where each
ri is a |x|-bit string chosen uniformly at random. Last, we
denote by [n] the set {1, . . . , n}.
x, returns n shares (r1, . . . , rn−1,Ln−1
3.1 Security Against a Covert Server
Our ﬁrst protocol is fair and secure in the presence of a
covert server which, roughly speaking, means that the server
is dishonest but does not want to get caught. The covert ad-
versarial model was introduced by Aumann and Lindell [2]
and allows for more eﬃcient protocols than the standard
malicious model. Assuming that the server is covert (as op-
posed to fully malicious) seems natural in settings where
there are strong incentives not to cheat. If the server is a
large cloud provider (e.g., Amazon or Microsoft), this as-
sumption is quite reasonable since the provider’s reputation
is at stake. We note that for our protocol, if the communi-
cation between all parties and the server is digitally signed,
the parties can use the transcript as a proof that the server
cheated.
As for fairness, we observe that although it is unachievable
in the standard SFE setting (with a dishonest majority), it
is achievable in the server-aided setting, hence providing a
stronger security guarantee than standard SFE in this re-
spect.
Recall the server-aided setting where a set of parties (P1, . . . ,
Pn) each with a private input and a server S with no input
or output, want to collectively compute a function f over
their private inputs. Let C be a Boolean circuit of size |C|
that evaluates f and let x = (x1, . . . , xm) be a binary string
that represents the joint input of all the parties. Our con-
struction makes use of garbled circuits and a distributed OT
protocol. Next, we provide a high level overview of the pro-
tocol. A detailed description can be found in Figure 1.
Overview. S garbles a small number s1 (e.g., 16) of circuits
and sends them to P1. It then shares the input labels for
all the wires between all the parties (i.e., each party receives
a share of each label of each wire) and sends them some
secret information. Each party Pi communicates with all
the other parties once and uses the secret information it
received from S and the messages exchanged to generate
the label corresponding to his input. This mechanism can
be viewed as a special distributed OT protocol (where the
server plays the role of the sender) that allows each party
Pi to learn the label for its input xi, without the server or
the other parties {Pj }j6=i learning anything about it.
P1 then picks a circuit at random and asks the server to
reveal the randomness it used to construct all the other cir-
cuits. This randomness also includes the coins used for the
secret sharing of the labels. P1 checks that this randomness
is indeed correct and all the parties verify that their shares
are derived from it. Finally, all the parties send their labels
to P1 who evaluates the remaining circuit and returns the
result to all the parties.
Distributed OT. As discussed above, the distributed OT
protocol allows the parties to privately retrieve their labels
from the server, i.e., without the server or the other parties
learning anything about them. We construct such a protocol
based on black-box access to a PRF and without invoking a
standard OT protocol.
The server holds two inputs a0 and a1, and one of the
parties Pj holds a bit b. The distributed OT should let Pj
learn ab without revealing any additional information. The
intuition behind the construction is as follows: the server
secret shares a0 and a1 between all the parties, permuting
each pair of shares randomly. The server sends to Pj the per-
mutations that he used for all the parties. Pj asks for one
share from each party according to the bit b and the random
permutations he receives from the server. Note that the par-
ties do not learn any information about b since they do not
know the random permutations and Pj only learns one of a0
and a1 (assuming that at least one party does not cooperate
with Pj). This solution, however, is not enough since if one
of the shares is wrong, there is no way to determine if it
is the server’s fault or one of the parties. Thus, the server
commits to all the shares and sends those commitments to
the parties. Before requesting a share, Pj checks with the
other parties that they received the same commitments, and
only then proceeds with choosing the share.
802Achieving fairness. Unfortunately, the protocol as de-
scribed above does not provide fairness since P1 can abort
after seeing the output. We ﬁx this by hiding the output
from P1 until all the parties receive the same output label.
Consider a single output wire wi. The output of the garbled
circuit on this wire is a label and its translation to the real
output bit is only known to S. After P1 sends this label to
all the parties, the server sends hashes of the two possible
labels (one for the wire bit 0 and one for wire bit 1) in ran-
dom order. The parties check that the hash of the label they
have is equal to one of those hashes, and if so, they return
an ACK message to S. After all the parties return an ACK,
S sends the two labels to all the parties along with their
mappings to the output value. Now each party can map its
label to a corresponding output bit. One problem that arises
in this protocol is that the server can change the output to
whatever he wants by sending an incorrect mapping. We
solve this by simply asking S to commit to the mappings in
advance and having the parties check those commitments as
part of the randomness revealing stage.
Asymptotic efficiency. Let s be a statistical security pa-
rameters, n the number of parties, and m be the combined
length of all parties’ inputs. With our protocol, S and P1
work in time O(s · |C| + smn) while the other parties work
in time O(sm), where for the speciﬁc values s = 16 (as sug-
gested in [52]) we obtain a complexity of O(16 · |C| + 16mn)
and O(16m), respectively. We emphasize that we only use
inexpensive cryptographic primitives such as hash functions
and commitments.
In the full version of the paper we prove the following
theorem.
Theorem 3.1. The protocol fairly and securely computes
the circuit C in the following two corruption scenarios: (1)
The server is covert (but non-cooperative with respect to
the parties), while all other parties are semi-honest, (2) the
server is semi-honest, while all but one of the parties is ma-
licious (but non-cooperative with respect to the server).
3.2 Security Against a Malicious Server
Our second protocol is secure against a malicious server
and is described in detail in Figure 2. We now provide an
overview.
Overview. In this protocol we assume the parties share
randomness in the beginning. This can be achieved by sim-
ply running a simulatable coin tossing protocol [37, 33].
Such a protocol emulates the usual coin-ﬂipping function-
ality in the presence of arbitrary malicious adversaries and
allows a simulator who controls a single player to control the
outcome of the coin ﬂip.
Here, P1 is the garbler and S is the evaluator. P1 uses
the shared randomness to generate s garbled circuits which
it sends to the server S. To verify the correctness of the
garbling step, S and P1 execute a cut-and-choose protocol.
At the end of the cut-and-choose, S is left with λ circuits,
the majority of which are properly garbled (with high prob-
ability). Then, all the parties send the labels for their input
wires to S (they can compute these labels using the shared
randomness). Since this is done for multiple circuits, we
have to ensure that each party uses the same input in all
the circuits.
1,i| · · · |w0
λ,i(cid:1) and
1,i| · · · |w1
λ,i(cid:1), where wb
Input checking. There are several mechanisms to check
and enforce input consistency [45, 38, 40, 55, 32] but we de-
viate from previous approaches and introduce a new mecha-
nism that is more eﬃcient. In particular, we require that
for each wire i ∈ [m], each party send to S the follow-
ing two hashes permuted at random: H(cid:0)w0
H(cid:0)w1
j,i is the input label for bit b of
the ith wire of the jth circuit (for j ∈ [λ]). The server ver-
iﬁes that the hashes it received from diﬀerent parties are
the same. Assuming that at least one party is honest, this
implies the hash was honestly computed. Then, given the
labels for the ith input wire, S can compute their hash and
verify that the result indeed matches one of the two previ-
ously accepted hashes for the same wire. If the check passes
for all input wires, the server proceeds to the evaluation of
the remaining λ circuits. At the end of the evaluation, S is
left with λ output labels (the results of the λ evaluations).
If the server directly sends these labels to the parties, how-
ever, it will leak additional information to them (as already
pointed out in [32]).
We use a new technique for resolving this issue, that al-
lows the server to output a single value that represents the
majority output without revealing any additional informa-
tion. This new technique is more eﬃcient than the oblivious
cut-and-choose technique of [32].
Asymptotic efficiency. The complexity of the protocol
is as follows: let s be the security parameter (the number of
garbled circuits), λ  1) works in time O(λ2mi) where mi is the length
of his own input. Hence, the price of checking input consis-
tency is quadratic in the security parameter (alternatively,
using the techniques of [40, 55] this can be done at the cost
of a linear number of exponentiations). In many settings,
the size of the input is not too large, and as such, it is more
eﬃcient to have the parties work in time that is proportional
to the total input size than in time that is quadratic in the
security parameter. Furthermore, our approach can be com-
posed with the oblivious cut-and-choose technique so that
a party Pi can either work in time that is quadratic in the
security parameter (but only linear in his own input length),
or add to the work of all other parties, by having them do
additional work linear to Pi’s input length. We defer the
details of this composition to the full version of the paper.
In the full version of the paper we prove the following
theorem.
Theorem 3.2. The protocol fairly and securely computes
the circuit C in the following two corruption scenarios: (1)
The server is malicious (but non-cooperative with respect to
the parties), while all other parties are semi-honest, (2) the
server is semi-honest, while all but one of the parties is ma-