title:Type-Assisted Dynamic Buffer Overflow Detection
author:Kyung-suk Lhee and
Steve J. Chapin
USENIX Association
Proceedings of the
11th USENIX Security
Symposium
San Francisco, California, USA
August 5-9, 2002
© 2002 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
Type-Assisted Dynamic Buffer Overﬂow Detection
Kyung-suk Lhee and Steve J. Chapin
Center for Systems Assurance
Syracuse University
fklhee, PI:EMAIL
Abstract
Programs written in C are inherently vulnerable to buffer
overﬂow attacks. Functions are frequently passed point-
ers as parameters without any hint of their sizes. Since
their sizes are unknown, most run time buffer overﬂow
detection techniques instead rely on signatures of known
attacks or loosely estimate the range of the referenced
buffers. Although they are effective in detecting most
attacks, they are not infallible. In this paper we present
a buffer overﬂow detection technique that range checks
the referenced buffers at run time. Our solution is a small
extension to a generic C compiler that augments exe-
cutable ﬁles with type information of automatic buffers
(local variables and parameters of functions) and static
buffers (global variables in data / bss section) in order to
detect the actual occurrence of buffer overﬂow. It also
maintains the sizes of allocated heap buffers. A simple
implementation is described, with which we currently
protect vulnerable copy functions in the C library.
1 Introduction
Programs written in C are inherently vulnerable to buffer
overﬂow attacks. C allows primitive pointer manipu-
lation, which is usually necessary for array operation
because C has no ﬁrst-class array type. For example,
functions are passed the pointers as array parameters.
To ensure that buffers are not overﬂowed, it is the pro-
grammers’ responsibility to explicitly bounds check the
buffers. In practice, bounds checking is often neglected
or cannot be done since arrays are often passed without
any hint of their sizes. Many copy functions in the C
library such as strcpy(dest, src) are vulnerable this way,
making them a popular point of attack.
Various types of buffer overﬂow attacks have been dis-
covered. The simplest and the most popular among them
is the stack smashing attack [1]. The stack smashing at-
tack overﬂows a buffer to overwrite the return address
of a function, so that the return address points to the at-
tack code that is injected into the stack by the attacker,
rather than the legitimate call point. The control ﬂow
is directed to the attack code when the function returns.
The stack smashing attack exploits the stack conﬁgura-
tion and the function call mechanism. There are other
types of buffer overﬂow attacks that exploit data struc-
tures in the heap as well as in the stack. A survey on
various types of attacks is found in [7].
There are several run time solutions that are highly ef-
fective without much run time overhead. However, most
of them rely on the signatures of known attacks (or the
loosely estimated range of the referenced buffers) rather
than the detection of actual occurrence of buffer over-
ﬂow, since sizes of buffers are unknown at run time.
As a result, buffers can still be overﬂowed and they are
vulnerable to attacks that do not show such signatures.
Moreover, they are mostly built to defend against the
stack smashing attack and focus only on its signatures.
Buffer overﬂow techniques that can bypass those run
time solutions are found in [4, 15, 5, 11, 21, 16, 18],
and are discussed in Section 3.
Our goal is to increase the level of security in comput-
ing systems by devising a run time solution that is less
dependent on attack signatures. We propose a solution
that range checks the buffers at run time. Our solu-
tion is a small extension to the GNU C compiler that
augments executable ﬁles with type information of au-
tomatic buffers (local variables and parameters of func-
tions) and static buffers (global variables in data / bss
section) in order to detect the actual occurrence of buffer
overﬂow. It also maintains the sizes of allocated heap
buffers. Currently we use it to perform range checking
within the vulnerable copy functions in the C library.
2 Related work
2.1 StackGuard
The stack smashing attack overwrites the buffer, the re-
turn address and everything in between. StackGuard [6]
is a GNU C compiler extension that inserts a canary
word between the return address and the buffer so that an
attempt to alter the return address is detected by inspect-
ing the canary word before returning from a function1.
Programs needs to be recompiled with StackGuard to be
protected.
2.2 StackShield
StackShield [19] is also a GNU C compiler extension
that protects the return address. When a function is
called StackShield copies away the return address to a
non-overﬂowable area, and restores the return address
upon returning from a function. Even if the return ad-
dress on the stack is altered, it has no effect since the
original return address is remembered. As with Stack-
Guard, programs needs to be recompiled.
2.3 Libsafe
Libsafe [3] is an implementation of vulnerable copy
functions in C library such as strcpy(). In addition to
the original functionality of those functions, it imposes
a limit on the involved copy operations such that they do
not overwrite the return address. The limit is determined
based on the notion that the buffer cannot extend beyond
its stack frame. Thus the maximum size of a buffer is
the distance between the address of the buffer and the
corresponding frame pointer. Libsafe is implemented as
a shared library that is preloaded to intercept C library
function calls. Programs are protected without recompi-
lation unless they are statically linked with the C library.
Libsafe protects only those C library functions whereas
StackGuard and StackShield protect all functions.
1The name is derived from the coal mining practice of taking a
canary down with the workers. The canary was more sensitive to poi-
sonous gas than humans, so examining the state of the canary could
reveal a dangerous buildup of poison gas.
2.4 Solar Designer’s non-executable
patch
stack
The stack smashing attack injects an attack code in the
stack, which is executed when the function returns. One
of the core features of the Solar Designer’s Linux kernel
patch [17] is to make the stack segment non-executable.
This patch does not impose any performance penalty nor
does it require program recompilation (except for the op-
erating system kernel).
2.5 PaX
PaX [14] is a page-based protection mechanism that
marks data pages non-executable. Unlike Solar De-
signer’s stack patch, PaX protects heap as well as stack.
Since there is no execution permission bit on pages in
x86 processor, PaX overloads the supervisor/user bit on
pages and augments the page fault handler to distinguish
the page faults due to the attempts to execute code in data
pages. As a result, it imposes a run time overhead due
to the extra page faults. PaX is also available as a Linux
kernel patch.
2.6 Runtime array bounds checking
The pointer and array access checking technique by
Austin et al.
[2] is a source-to-source translator that
transforms C pointers into the extended pointer repre-
sentation called safe pointer, and inserts access checks
before pointer or array dereferences. The safe pointer
contains ﬁelds such as the base address, its size and the
scope of the pointer. Those ﬁelds are used by the access
check to determine whether the pointer is valid and is
within the range. Since it changes the pointer represen-
tation, it is not compatible with existing programs.
The array bounds and pointer checking technique by
Jones and Kelly [10] is an extension to the GNU C com-
piler that imposes the access check on C pointers and
arrays. Instead of changing the pointer representation,
it maintains a table of all the valid storage objects that
holds such informations as the base address and size
etc. The heap variables are entered into the table via
a modiﬁed malloc() function and deleted from the table
via a modiﬁed free() function. Stack variables are en-
tered into / deleted from the table by the constructor /
destructor function, which is inserted inside a function
deﬁnition at the point a stack variable enters / goes out
of the scope. The access check is done by substituting
the pointer and array operations with the functions that
perform bounds check using the table in addition to the
original operation. Since native C pointers are used, this
technique is compatible with existing programs.
The obvious advantage of array bounds checking ap-
proaches are that they completely eliminate buffer over-
ﬂow vulnerabilities. However, these are also the most
expensive solution, particularly for pointer- and array-
intensive programs since every pointer and array oper-
ation must be checked. This may not be suitable for a
production system.
2.7 Static analysis of array bounds checking
The integer range analysis by Wagner et al.
[20] is a
technique that detects possible buffer overﬂow in the
vulnerable C library functions. A string buffer is mod-
eled as a pair of integer ranges (lower bound, upper
bound) for its allocated size and its current length. A
set of integer constraints is predeﬁned for a set of string
operations (e.g. character array declaration, vulnerable
C library functions and assignment statements involving
them). Using those integer constraint, the technique an-
alyzes the source code by checking each string buffer to
see whether its inferred allocated size is at least as large
as its inferred maximum length.
The annotation-assisted static analysis technique by
Larochelle and Evans [12] based on LCLint [8] uses se-
mantic comments, called annotations, provided by pro-
grammers to detect possible buffer overﬂow. For exam-
ple, annotations for strcpy() contain an assertion that
the destination buffer has been allocated to hold at least
as many characters as are readable in the source buffer.
This technique protects any annotated functions whereas
the integer range analysis only protects C library func-
tions.
Generally, a pure compile-time analysis like the above
can produce many false alarms due to the lack of run
time information. For example, gets() reads its input
string from stdin so the size of the string is not known
at compile time. For such a case a warning is issued
as a possible buffer overﬂow.
In fact, all the legiti-
mate copy operations that accept their strings from un-
known sources (such as a command line argument or
an I/O channel) are ﬂagged as possible buffer overﬂows
(since they are indeed vulnerable). Without further ac-
tion, those vulnerabilities are identiﬁed but still open to
attack.
3 Exploitation techniques
The exploitation techniques presented in this section are
exemplary and they can bypass some of the run-time
defensive techniques. While the stack smashing attack
can exploit just a single vulnerable strcpy(), these tech-
niques usually require more vulnerabilities in the pro-
gram that are less likely to be found in real world.
Nonetheless, they identify different kinds of vulnerabili-
ties that may not be protected by current defensive tech-
niques.
Although we can apply multiple defensive techniques
for added protection, these exploitation techniques can
also be used in tandem to produce more sophisticated
attacks that are more difﬁcult to detect. However, none
of these exploits are possible if buffer overﬂow is pre-
vented. If programmers rely on C library functions to
overﬂow buffers, then our current implementation can
detect and prevent such attacks.
3.1 Return-into-libc
The return-into-libc exploit [18, 13] overﬂows a buffer
to overwrite the return address as the stack smashing at-
tack does. However it overwrites the return address with
the address of C library function such as system(). Since
it uses an existing code rather than a shellcode, Solar De-
signer’s non-executable stack patch or PaX cannot detect
this 2.
3.2 Other code pointers
Code pointers other than the return address can also be
overwritten, such as a function pointer variable [5], a
pointer to a shared library function in the global offset
table [21], the table of pointers to destructor functions
[15], or a C++ virtual function pointer [16]. Exploits
that alter those code pointers and not the return address
can bypass StackGuard, StackShield and Libsafe.
2They both provide guards against return-into-libc attacks, but they
can still be exploited. For example, we can use the procedure linkage
table entry of system() instead of the address of system() to bypass the
stack patch (where the address of system() can contain zero bytes) or
PaX (where the address of system() are unknown in advance due to the
random mapping of shared libraries).
3.3 Malloc() overﬂow
The malloc() overﬂow [11] exploits the heap memory
objects allocated via the memory allocator in the GNU
C library. The memory allocated by malloc() not only
includes the user requested block but also the data used
to manage the heap (size of the block, pointer to other
blocks and the like). The vulnerability is that a heap vari-
able can be overﬂowed to overwrite those management
data. Exploits based on this technique can bypass stack-
based defensive techniques such as StackGuard, Stack-
Shield, Libsafe and Solar Designer’s stack patch.
3.4
Indirect overﬂow via pointer
The indirect overﬂow via pointers [4] overﬂows a buffer
to overwrite a pointer, which is used subsequently to
overwrite a code pointer. With this technique it is pos-
sible to overwrite the return address without altering the
StackGuard canary word. It is also possible to overwrite
a memory area that is far from the overﬂowed buffer.
Bulba and Kil3r [4] gives examples that bypass Stack-
Guard, StackShield and Solar Designer’s stack patch.
4 Overview of Our Approach
Array bounds checking is a direct way to detect buffer
overﬂows, but it is difﬁcult to do because the type in-
formation (hence the size) of buffers are not available in
binary ﬁles except as optional debugging information in
the symbol table. To enable range checking on buffers at
run time, introduce an intermediary step in the compila-
tion that emits an additional data structure into the binary
ﬁle. This data structure describes the types of automatic
buffers and static buffers. These types are known at com-
pile time, so our data structure is complete for describing
automatic and static buffers (there are two exceptions in
which size of an automatic buffer cannot be determined
at compile time, which are discussed in Section 6.). For
example, buffers in a struct variable are safe from each
other as depicted in Figure 1.
For dynamically allocated (heap) objects, we maintain
a table that tracks those objects and their sizes. Range
checking is then done by looking up those data struc-
tures at run time. We use those data structures to perform
range checking of arguments to the vulnerable string
functions in the C library.
struct mybuf f
char buf1[32];
void (*fptr)();
char buf2[32];
g;
Figure 1: A struct containing two string buffers and a
function pointer.
Regardless of which of these types of attack is at-
tempted, buffers have to be overﬂowed in some way
for the attacks to succeed. Since our approach prevents
buffers from being overﬂowed it is insensitive to which
attack was chosen. To truly protect from all the possi-
ble buffer overﬂow attacks in the most efﬁcient way, we
need to identify all and only those vulnerable points in
the program. However it cannot be done without exten-
sive source code analysis. For the current implementa-
tion we protect only C library functions. We believe that
it is useful as a stand-alone protection system and can
be easily extended with compile time analysis to remove
bounds checking on “known-safe” function calls.
Our data structure for describing buffers is similar to the
type table in the Process Introspection Library [9], which
describes data types of savable memory blocks in order
to checkpoint and restart processes in a distributed, het-
erogeneous environment. The Process Introspection Li-
brary also deduces the type of a heap allocated memory
block, a capability that we currently lack, but which can
be similarly added.
5 Implementation
We implemented a prototype by extending the GNU C
compiler on Linux. We augment each object ﬁle with
type information of automatic and static buffers, leaving
the source code intact. Speciﬁcally, we intercept the out-
put of the gcc preprocessor and append to it a data struc-
ture describing the type information. The augmented ﬁle
is then piped into the next stage to complete the compi-
lation.
The type information of buffers are read by precompil-
ing the (preprocessed) source ﬁle with debugging op-
tion turned on, and parsing the resulting stabs debug-
ging statements. From the stabs debugging statements
we generate a type table, a data structure that associates
the address of each function with the information of the
function’s automatic buffers (their sizes and offsets to
the stack frame). The type table also contains the ad-