## Page 326
308
Linux程序设计
char *message:
int n:
printf (*fork progran starting`n*) :
pid = fork();
switch(pid)
case -1:
perror(*fork failed’);
exit(1):
case 0:
message *This is the child’:
n = 5:
break:
default:
n = 3;
break;
for: n > 0; n--1 {
puts (message) :
sleep(1) :
exit (0):
这个程序将产生两个进程。新创建（出生？）的子进程会输出消息五次；原进程（即父进
程）只输出消息三次。父进程将在子进程打印完它的全部消息之前结束，因此我们将在输出内
容里看到混杂着一个shell提示符。如下所示：
fork progran starting
5./fork
This is the parent
This is the child
This is the child
This is the parent
Thio is the parent
S This is the child
This is the child
This is the child
操作注释：
程序在调用fork的时候被分为两个独立的进程。程序靠fork的非零返回值确定父进程，父进
程设置了一个消息输出次数，两次输出之间间隔一秒。
10.3.1等待进程
当我们用fork启动一个子进程的时候，子进程就有了自己的生命，并将独立地运行。有时候、
我们需要知道某个子进程是否已经结束了。就拿刚才那个例子来说吧，父进程在子进程之前结
束了，可因为子进程仍在运行，所以我们看到的程序输出不太整齐。我们可以通过调用wait安排
父进程结束在子进程结束之后。
#1nclude 
#2nclude 
pid_t wait(int *stat_loc);
加入jaVa编程群：524621833
---
## Page 327
第10章进程和信号
309
wait系统调用会使父进程暂停执行，直到它的一个子进程结束为止。这个调用返回的是子进
程的PID，它通常是结束的子进程。状态信息允许父进程判定子进程的退出状态，即从子进程的
main函数返回的值或子进程中exin语句的退出码。如果stat_loc不是一个空指针，状态信息将被写
人它指向的位置。
我们可以用sys/wait.h文件里定义的宏解读状态信息。如表10-1所示：
表
10-1
宏定义
说
明
WIFEXITED(stat_val)
如果子进程正常结束，它就取一个非零值
如果WIFEXITED老零，它返回子进的退出码
WIFSIGNALED(stat_va1)
如果子进程因为一个未捕获的信号面终止、它就取一个非零侦
WTERMSIG(stat_val1
如果WIFSIGNALED非零，它返回~个信号代码
WIFSTOPPED (atat_va1)
如果子进程停止，它就取一个非零值
WSTOPSIG (stat_val)
如果WIFSTOPPED非零，它返回一个信号代码
动手试试：wait函数
我们对程序稍做修改，让它等待并检查子进程的退出状态。新程序的名字是wait.c。
include 
#include 
include 
include 
int main()
pid_t pid;
:afesseg, reuo
int exit_code;
int n;
printf(*fork program starting\n*);
pid = fork():
gwitch(pid)
case -1:
perror{"fork failed*);
case 0:
exit(1) :
message = *This is the child*;
exit_code = 37;
n = 5;
break;
default:
message = *This is the parent*;
n=3;
break:
exit_code x0:
1
for(: s > 0: n--) (
puts(message):
，
sleep (11 :
程序的这一部分等待子进程的完成。
加入iava编程群：524621833
---
## Page 328
310
Linux程序设计
if(pid = 0){
pid_t child_pid;
int stat_val;
child_pid = wait (&stat_val) :
printf(*Child has finished: PID = ed\n*. child_piG);
if (WIFEXITED(stat_val))
elce
printf(*Child cerminated abnormally”而不是
"")。
PID TTY STATTIME COMMAND
420 pp020:00(fork2)
接下去，如果父进程非正常地结束了，子进程就会自动把PID值为1的进程（即init）当作自
已的父进程。子进程现在是一个不再会运行的僵进程了，但因为它原来的父进程是非正常结束
的，所以init不得不“收养”下它。这个僵进程将保留在进程表里，直到被inin发现并处理掉为止、
到那时它才会从进程表里被副除掉。进程表越大，这一过程就越慢。我们应该尽量避免僵进程
的产生，因为在init进行清理之前，它们将一直消耗着系统的资源。
还有另外一个可以用来等待子进程的系统调用。它的名字是waitpid，你可以用它来等待某
个特定进程的结束。
#include 
#include 
pid_t waitpid(pid_t pid, int *stat_loc, int options) :
pid参数给出的是准备等待的那个子进程的PID。如果它是“-1"，waitpid将返回每一个子进
程的信息。类似于wait，如果stat_loc不是一个空指针的话，waitpid也会把状态信息写到它指向
的位置去。options参数允许我们改变waitpid的行为、其中最有用的一个选项是WNOHANG，它
的作用是防止waitpid把调用者的执行挂起。你可以用它查出子进程是否已经结束了；如果还没
有结束，程序将继续运行。其他选项与wait调用的相同。
因此，如果我们想让父进程周期性地检查某个特定的子进程是否已经结束，就可以使用下
面这样的调用：
waitpid (chi1d_pid. (int *) 0, wNOHANG 1;
如果子进程尚未结束或者尚未被意外终止，它将返回零：如果子进程已经结束，就将返回
child_pid。操作失败时waitpid将返回“-1”并设置errno变量。失败情况包括没有子进程（errno
加入jaVa编程群：524621833
---
## Page 330
312
Linux程序设计
10.3.3输入和输出重定向
已经打开的文件描述符将会在fork和exec调用中保持下来，这是一个事实。对进程这方面知
识的探索使我们能够改变程序的行为。下面这个例子使用了一个过滤器程序，这种程序从它自
已的标准输入读人数据，向自己的标准输出写数据，在输入和输出之间对数据要做一些必要的
转换处理。
动手试试：重定向
下面是一个非常简单的过滤器程序filter.c，它把输人转换为大写字母。
#incldde 
#include 
int nain()
while( (ch = getchar ()) 1= EOF)(
int ch;
putchar (toupper (ch1} :
exit(0):
1
编译并运行这个程序：
$./upper
hello THERE
D
HELLO THERE
$
我们可以用shell的重定向在把一个文件转换为大写：
S cat file.txt
this is the file, file.txt, it is all lower case,
#
$upper
#include 
int main(int arge. char *argv[1)
char *filename;
if （argc 1= 2）{
fprintf(stderr,*usage:useupper tile\n*);
exit(1) ;
上
filenane = argv[1]:
我们重新打开标准输人，在这样做的同时再次检查有无错误发生，然后通过execl调用upper
程序。
加入jaVa编程群：524621833
---
## Page 331
第10章进程和信号313
fprintf(stderr, *could not redirect stdin from file s\n*, tilename) ;
exit(2) ;
execl(*./upper*,*upper*,0);