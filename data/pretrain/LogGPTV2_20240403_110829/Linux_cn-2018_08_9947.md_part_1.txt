---
author: Angelos Chalaris
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6080
date: '2018-08-23 23:09:41'
editorchoice: false
excerpt: 在这篇文章中，我将尽可能客观的通过提供一些最小化的例子来比较这三个框架，以展示它们的能力。
fromurl: https://hackernoon.com/javascript-framework-comparison-with-examples-react-vue-hyperapp-97f064fb468d
id: 9947
islctt: true
largepic: /data/attachment/album/201808/23/230854lnotvaoeapi6oamv.jpg
permalink: /article-9947-1.html
pic: /data/attachment/album/201808/23/230854lnotvaoeapi6oamv.jpg.thumb.jpg
related: []
reviewer: wxy
selector: ''
summary: 在这篇文章中，我将尽可能客观的通过提供一些最小化的例子来比较这三个框架，以展示它们的能力。
tags:
- JavaScript
- 框架
thumb: false
title: JavaScript 框架对比及案例（React、Vue 及 Hyperapp）
titlepic: true
translator: Bestony
updated: '2018-08-23 23:09:41'
---
![](/data/attachment/album/201808/23/230854lnotvaoeapi6oamv.jpg)
在[我的上一篇文章中](https://hackernoon.com/i-abandonded-react-in-favor-of-hyperapp-heres-why-df65638f8a79)，我试图解释为什么我认为 [Hyperapp](https://hyperapp.js.org/) 是一个 [React](https://reactjs.org/) 或 [Vue](https://vuejs.org/) 的可用替代品，原因是，我发现它易于起步。许多人批评这篇文章，认为它自以为是，并没有给其它框架一个展示自己的机会。因此，在这篇文章中，我将尽可能客观的通过提供一些最小化的例子来比较这三个框架，以展示它们的能力。
### 耳熟能详的计时器例子
计时器可能是响应式编程中最常用的例子之一，极其易于理解：
* 你需要一个变量 `count` 保持对计数器的追踪。
* 你需要两个方法来增加或减少 `count` 变量的值。
* 你需要一种方法来渲染 `count` 变量，并将其呈现给用户。
* 你需要挂载到这两个方法上的两个按钮，以便在用户和它们产生交互时变更 `count` 变量。
下述代码是上述所有三个框架的实现：
![](/data/attachment/album/201808/23/230949x1ch5i1hhahri71h.png)
*使用 React、Vue 和 Hyperapp 实现的计数器*
这里或许会有很多要做的事情，特别是当你并不熟悉其中的一个或多个步骤的时候，因此，我们来一步一步解构这些代码：
* 这三个框架的顶部都有一些 `import` 语句
* React 更推崇面向对象的范式，就是创建一个 `Counter` 组件的 `class`。Vue 遵循类似的范式，通过创建一个新的 `Vue` 类的实例并将信息传递给它来实现。最后，Hyperapp 坚持函数范式，同时完全彼此分离 `view`、`state`和`action`。
* 就 `count` 变量而言， React 在组件的构造函数内对其进行实例化，而 Vue 和 Hyperapp 则分别是在它们的 `data` 和 `state` 中设置这些属性。
* 继续看，你可能注意到 React 和 Vue 有相同的方法来与 `count` 变量进行交互。 React 使用继承自 `React.Component` 的 `setState` 方法来修改它的状态，而 Vue 直接修改 `this.count`。 Hyperapp 使用 ES6 的双箭头语法来实现这个方法，而据我所知，这是唯一一个推荐使用这种语法的框架，React 和 Vue 需要在它们的方法内使用 `this`。另一方面，Hyperapp 的方法需要将状态作为参数，这意味着可以在不同的上下文中重用它们。
* 这三个框架的渲染部分实际上是相同的。唯一的细微差别是 Vue 需要一个函数 `h` 作为参数传递给渲染器，事实上 Hyperapp 使用 `onclick` 替代 `onClick` ，以及基于每个框架中实现状态的方式引用 `count` 变量。
* 最后，所有的三个框架都被挂载到了 `#app` 元素上。每个框架都有稍微不同的语法，Vue 则使用了最直接的语法，通过使用元素选择器而不是使用元素来提供最大的通用性。
#### 计数器案例对比意见
同时比较所有的三个框架，Hyperapp 需要最少的代码来实现计数器，并且它是唯一一个使用函数范式的框架。然而，Vue 的代码在绝对长度上似乎更短一些，元素选择器的挂载方式是一个很好的增强。React 的代码看起来最多，但是并不意味着代码不好理解。
### 使用异步代码
偶尔你可能需要处理异步代码。最常见的异步操作之一是发送请求给一个 API。为了这个例子的目的，我将使用一个[占位 API] 以及一些假数据来渲染一个文章列表。必须做的事情如下：
* 在状态里保存一个 `posts` 的数组
* 使用一个方法和正确的 URL 来调用 `fetch()` ，等待返回数据，转化为 JSON，并最终使用接收到的数据更新 `posts` 变量。
* 渲染一个按钮，这个按钮将调用抓取文章的方法。
* 渲染有主键的 `posts` 列表。
![](/data/attachment/album/201808/23/230953am606b3vgk60luui.png)
*从一个 RESTFul API 抓取数据*
让我们分解上面的代码，并比较三个框架：
* 与上面的技术里例子类似，这三个框架之间的存储状态、渲染视图和挂载非常相似。这些差异与上面的讨论相同。
* 在三个框架中使用 `fetch()` 抓取数据都非常简单，并且可以像预期一样工作。然而其中的关键在于， Hyperapp 处理异步操作和其它两种框架有些不同。当数据被接收到并转换为 JSON 时，该操作将调用不同的同步动作以取代直接在异步操作中修改状态。
* 就代码长度而言，Hyperapp 依然只用最少的代码行数实现了相同的结果，但是 Vue 的代码看起来不那么的冗长，同时拥有最少的绝对字符长度。
#### 异步代码对比意见
无论你选择哪种框架，异步操作都非常简单。在应用异步操作时， Hyperapp 可能会迫使你去遵循编写更加函数化和模块化的代码的方式。但是另外两个框架也确实可以做到这一点，并且在这一方面给你提供更多的选择。
### To-Do 列表组件案例
在响应式编程中，最出名的例子可能是使用每一个框架里来实现 To-Do 列表。我不打算在这里实现整个部分，我只实现一个无状态的组件，来展示三个框架如何创建更小的可复用的块来协助构建应用程序。
![](/data/attachment/album/201808/23/230955r5q3gll53b0495mr.png)
*示例 TodoItem 实现*
上面的图片展示了每一个框架一个例子，并为 React 提供了一个额外的例子。接下来是我们从它们四个中看到的：
* React 在编程范式上最为灵活。它支持函数组件，也支持类组件。它还支持你在右下角看到的 Hyperapp 组件，无需任何修改。
* Hyperapp 还支持 React 的函数组件实现，这意味着两个框架之间还有很多的实验空间。
* 最后出现的 Vue 有着其合理而又奇怪的语法，即使是对另外两个框架很有经验的人，也不能马上理解其含义。