### Using Git for Role Code Reuse

Git is one of two possible solutions for managing role code reuse in Ansible. A Git submodule is essentially a reference to another Git repository from within your main repository. It does not contain the actual code of the submodule but rather a reference that can be cloned and updated as needed.

#### Example: Using a Git Submodule

Suppose you are writing a playbook to install Apache 2 on a server, and instead of creating your own module, you decide to use Jeff Geerling's Apache 2 role from GitHub (https://github.com/geerlingguy/ansible-role-apache).

1. **Set Up Your Playbook Directory Structure:**
   - Ensure your playbook directory structure is created and checked into your version control system.
   - Create the `roles/` directory and navigate into it:
     ```sh
     $ mkdir roles
     $ cd roles
     ```

2. **Add the Submodule:**
   - Use the `git submodule add` command to check out the desired code, providing a directory name to clone it to. In this case, we'll call it `jeffgeerling.apache2`:
     ```sh
     $ git submodule add https://github.com/geerlingguy/ansible-role-apache.git jeffgeerling.apache2
     ```

3. **Commit the Changes:**
   - After adding the submodule, you will notice a new file called `.gitmodules` at the root of your working copy. Add this file and the newly created directory to your repository:
     ```sh
     $ git add ../.gitmodules jeffgeerling.apache2
     $ git commit -m "Added Apache2 submodule as role"
     $ git push
     ```

4. **Updating the Submodule:**
   - To update the submodule, navigate to the submodule directory and run a standard `git pull` command:
     ```sh
     $ cd jeffgeerling.apache2
     $ git pull
     ```

5. **Cloning with Submodules:**
   - When cloning the playbook directory for the first time from your Git server, the submodule will be recognized but not checked out. Run the following commands to initialize and update the submodule:
     ```sh
     $ git clone <your-repository-url>
     $ cd <your-repository-directory>
     $ git submodule init
     $ git submodule update
     ```

#### Using `ansible-galaxy` for Role Code Reuse

Another approach to manage role code reuse is by using the `ansible-galaxy` tool. This tool can clone roles from a valid Git URL.

1. **Create a `requirements.yml` File:**
   - In the base directory of your playbook structure, create a `requirements.yml` file. For the Apache 2 role, the file would look like this:
     ```yaml
     ---
     - src: https://github.com/geerlingguy/ansible-role-apache.git
       scm: git
     ```

2. **Install the Roles:**
   - Use the `ansible-galaxy` command to download the roles specified in `requirements.yml`:
     ```sh
     $ ansible-galaxy install -r requirements.yml --roles-path roles
     ```

3. **Updating the Roles:**
   - To update the roles, run the following command with the `--force` parameter to overwrite the existing versions:
     ```sh
     $ ansible-galaxy install -r requirements.yml --roles-path roles --force
     ```

### Managing Inventories

In our examples, we have used simple, static inventory files. However, in a real-world enterprise environment, managing hundreds of machines requires a more dynamic and scalable solution.

#### Dynamic Inventory Scripts

Ansible supports dynamic inventories, which can be generated by executable scripts. These scripts can extract inventory data from various infrastructure management systems and convert it into JSON format that Ansible understands.

1. **Available Dynamic Inventory Scripts:**
   - The Ansible project provides a variety of dynamic inventory scripts for different systems. You can find these scripts in the Ansible repository (https://github.com/ansible/ansible/tree/devel/contrib/inventory).

2. **Example: Using the EC2 Dynamic Inventory Script:**
   - Download and run the `ec2.py` script to generate a dynamic inventory from Amazon EC2:
     ```sh
     $ wget https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.py
     $ chmod +x ec2.py
     $ ./ec2.py
     ```
   - Ensure the required libraries, such as `boto`, are installed:
     ```sh
     $ sudo apt install python-boto  # On Ubuntu
     $ sudo yum install python2-boto  # On CentOS
     ```

3. **Configuring the Dynamic Inventory Script:**
   - Download the configuration file for the script:
     ```sh
     $ wget https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.ini
     ```
   - Edit the `ec2.ini` file to include your AWS account details and other necessary configurations.

#### Example: Working with the Cobbler Dynamic Inventory

Cobbler is an open-source provisioning system that can be used to manage PXE-based installs. Hereâ€™s how to set up a dynamic inventory with Cobbler:

1. **Install Cobbler:**
   - Install the minimum required Cobbler packages on a CentOS 7 system:
     ```sh
     $ sudo yum -y install cobbler cobbler-web
     ```

2. **Start the Cobbler Service:**
   - Start the Cobbler service:
     ```sh
     $ sudo systemctl start cobblerd.service
     ```

3. **Create Distro and Profile:**
   - Add a distro and profile for your systems:
     ```sh
     $ sudo cobbler distro add --name=CentOS --kernel=/boot/vmlinuz-3.10.0-957.el7.x86_64 --initrd=/boot/initramfs-3.10.0-957.el7.x86_64.img
     $ sudo cobbler profile add --name=webservers --distro=CentOS
     ```

4. **Disable SELinux (for testing purposes only):**
   - Temporarily disable SELinux:
     ```sh
     $ sudo setenforce 0
     ```

5. **Add Systems to Cobbler:**
   - Add two frontend web servers to the `webservers` group:
     ```sh
     $ cobbler system add --name=frontend01 --profile=webservers --dns-name=frontend01.example.com --interface=eth0
     $ cobbler system add --name=frontend02 --profile=webservers --dns-name=frontend02.example.com --interface=eth0
     ```

6. **Download and Configure the Cobbler Dynamic Inventory Script:**
   - Download the Cobbler dynamic inventory script and its configuration file:
     ```sh
     $ wget https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/cobbler.py
     $ wget https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/cobbler.ini
     $ chmod +x cobbler.py
     ```
   - Edit the `cobbler.ini` file to specify the Cobbler server's hostname or IP address.

7. **Test the Dynamic Inventory:**
   - Run an ad hoc command to test the dynamic inventory:
     ```sh
     $ ansible webservers -i cobbler.py -m ping
     ```

### Running One-off Tasks with Ansible

In the previous chapter, we used the `ansible webservers -i cobbler.py -m ping` command to test connectivity to all servers in the `webservers` group. Ad hoc commands are useful for performing one-off tasks without writing a full playbook.

By leveraging these techniques, you can build a robust and scalable automation architecture around Ansible, ensuring efficient role code reuse and accurate inventory management.