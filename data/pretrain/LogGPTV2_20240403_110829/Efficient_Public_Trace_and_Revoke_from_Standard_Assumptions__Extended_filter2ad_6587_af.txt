and relays it to the adversary 𝒜.
∙ When 𝒜 asks 𝒜ℱℰ to create a 𝑝id for some id, adversary
𝒜ℱℰ in turn asks the ℱℰ challenger to do the same.
The ℱℰ challenger randomly chooses a vector xid ←˒ Zℓ
and sends it to 𝒜ℱℰ who further relays it to 𝒜.
∙ When 𝒜 makes a key query for an identity id, adver-
sary 𝒜ℱℰ queries the ℱℰ challenger for a secret key.
Adversary 𝒜ℱℰ receives the corresponding skid from
the ℱℰ challenger and relays it to 𝒜.
∙ When 𝒜 chooses a set ℛ of up to 𝑟 revoked users, adver-
sary 𝒜ℱℰ makes |ℛ| key queries to the ℱℰ challenger.
Adversary 𝒜ℱℰ is given the set skid’s of corresponding
secret keys that is relayed to 𝒜. Recall that by the defi-
nition of the public traceability game, these queries can
be interleaved with extensions of the number of users
and user corruption queries, in an adaptive manner.
Note that since 𝒜 makes at most 𝑡 key queries and |ℛ| ≤ 𝑟,
adversary 𝒜ℱℰ makes at most 𝑡 + 𝑟 key queries for the ℱℰ
challenger.
𝑝
∙ Adversary 𝒜 finally produces a pirate decoder 𝒟4 and
chooses a suspect set 𝒮 of cardinality ≤ 𝑡 that con-
tains 𝒯 . Then, the adversary 𝒜ℱℰ executes the Trace
algorithm on 𝒪𝒟 to find 𝑖 such that |𝑝𝑖 − 𝑝𝑖−1| is
non-negligible. If Trace outputs ⊥ or index 𝑖 such that
id𝑖−1 ∈ 𝒯 , then 𝒜ℱℰ outputs a random bit. We say that
the event Abort occurs in such a case. Otherwise, it sets
y0 = v𝒮𝑖−1 + 𝑚· vℛ and y1 = v𝒮𝑖 + 𝑚· vℛ, and sends
them as challenge messages to the ℱℰ challenger.5
4Recall that we assume that 𝒟 is stateless/resettable and replies
independently to successive queries.
5 Here, 𝑚 and 𝑚′ are chosen as in Step (a), vℛ ∈ Zℓ
as in Step (c), and v𝒮𝑖−1 , v𝒮𝑖 ∈ Zℓ
𝑝 is chosen
𝑝 are chosen as in Step (d) of
algorithm Trace.
Session K1:  Secure ComputationCCS’17, October 30-November 3, 2017, Dallas, TX, USA2286∙ The ℱℰ challenger samples 𝑏 ←˒ {0, 1} and then sends
ℱℰ.Enc(pk, y𝑏) to 𝒜ℱℰ . The adversary 𝒜ℱℰ runs 𝒪𝒟
on input (𝐶𝑏, 𝑚), where 𝐶𝑏 = (ℱℰ.Enc(pk, y𝑏),ℛ).
Then 𝒪𝒟 outputs the bit 𝑏′ ∈ {0, 1}.
∙ Finally, adversary 𝒜ℱℰ outputs the same bit 𝑏′ ∈ {0, 1}
if 𝑝𝑖 − 𝑝𝑖−1 > 0 and 1 − 𝑏′ otherwise.
We first argue that 𝒜ℱℰ is a valid adversary against the ℱℰ
challenger. Recall that when Abort does not occur, we have
id𝑖−1 /∈ 𝒯 but id𝑖−1 ∈ 𝒮. The keys queried by 𝒜ℱℰ are for id ∈
ℛ∪𝒯 . This set ℛ∪𝒯 can be partitioned into ℛ∪ (𝒯 ∩𝒮𝑖−1)
and 𝒯 ∩ (𝒮1 ∖ 𝒮𝑖−1). Note that since id𝑖−1 ̸∈ 𝒯 , we have
𝒯 ∩ 𝒮𝑖−1 = 𝒯 ∩ 𝒮𝑖 and thus ℛ ∪ (𝒯 ∩ 𝒮𝑖−1) = ℛ ∪ (𝒯 ∩ 𝒮𝑖).
(1) For id ∈ ℛ, we have ⟨xid, y0⟩ = ⟨xid, y1⟩ = 0. For
id ∈ 𝒮𝑖−1 ∩ 𝒯 = 𝒮𝑖 ∩ 𝒯 , we have ⟨xid, y0⟩ = ⟨xid, y1⟩ =
𝑚 · ⟨xid, vℛ⟩. Hence for all id ∈ ℛ ∪ (𝒯 ∩ 𝒮𝑖−1) for
which the skid was queried by 𝒜ℱℰ , the inner products
⟨xid, y0⟩ and ⟨xid, y1⟩ have the same value.
(2) Similarly, for id ∈ 𝒯 ∩ (𝒮1 ∖ 𝒮𝑖−1), we have ⟨xid, y0⟩ =
⟨xid, y1⟩ = 𝑚′ · ⟨xid, vℛ⟩.
Hence, 𝒜ℱℰ is a valid adversary against the ℱℰ challenger.
We recollect that in the AD-TT game, we say that 𝒜 wins
if the decryption box 𝒟 output by it is such that when Trace
is executed on input 𝒪𝒟, it fails to identify a traitor. In such
a case, Trace either outputs ⊥ or it outputs an id𝑖−1 ̸∈ 𝒯 with
probability at least 1/𝜆𝑐. We next argue that if 𝒜 outputs 𝒟
that satisfies this winning condition of the AD-TT game, then
𝒜ℱℰ has non-negligible advantage in the above game. To see
this, we first observe that when Abort occurs, 𝒜ℱℰ returns a
random bit and it correctly guesses 𝑏 with probability 1/2.
Then, it suffices to show the following:
∙ In the above game, Abort does not occur with non-
∙ Conditioned on Abort not occurring, Trace outputs
negligible probability.
id𝑖−1 such that |𝑝𝑖 − 𝑝𝑖−1| is non-negligible.
Indeed, the combination of them implies that the advantage
of 𝒜ℱℰ is non-negligible, since |𝑝𝑖 − 𝑝𝑖−1| is the advantage of
𝒜ℱℰ conditioned on Abort not occurring.
The second item follows because if |𝑝𝑖 − 𝑝𝑖−1| is not suffi-
ciently large, Trace does not output id𝑖−1 at Step (f) of Trace
except for a negligible probability (because of the Hoeffding
bound). Next, we prove the first item. Since we are assuming
𝒟 satisfies the winning condition, when Trace is executed
on input 𝒪𝒟, it outputs ⊥ or it outputs an id𝑖−1 ̸∈ 𝒯 with
probability at least 1/𝜆𝑐. The claim now follows since the for-
mer event occurs only with negligible probability by Lemma
□
3.4.
4 TRACE AND REVOKE FROM
LEARNING WITH ERRORS
Recall that Agrawal et al. [4] provided a construction for
inner product functional encryption from LWE. Instantiating
our generic transformation of Section 3 with this scheme is
possible, but leads to reliance on LWE with subexponential
error rates. In Subsection 4.2, we provide a new construction
of an inner product functional encryption scheme from LWE
in a much weaker model than that considered in [4]. We
restrict to the setting of bounded collusions and also crucially
exploit the fact that the adversary’s key requests are random
vectors for our application as described in Section 3. The
performances of both resulting trace-and-revoke systems are
discussed in Subsection 4.1.
4.1 Two Trace-and-Revoke Constructions
Our IPFE to trace-and-revoke generic transformation cannot
be directly instantiated with the LWE-based IPFE over Z𝑝
from [4], because the key generation algorithm of the latter is
stateful: it keeps track of all the secret keys it has generated.
The statefulness necessity may be explained as follows. The
master secret key is an integer matrix with small entries.
When the attacker makes a key query for a vector modulo 𝑝,
it learns the integer product between a conversion to the
integers of that vector and the master secret key. If the key
generation algorithm does not maintain a state, then it does
not seem possible to prevent an adversary from making key
queries for vectors that are linearly dependent modulo 𝑝 but
linearly independent over the integers: the attacker could
then make valid key queries but still learn the master secret
key.
The Key Generation State is Unnecessary. In [4], it was
noted that if the vectors queried by the adversary are guar-
anteed to be linearly independent modulo 𝑝, then there is
no need for a stateful key generation algorithm. In our case,
there are as many vectors as users, each vector is uniformly
𝑝 and the adversary has access to ≤ 𝑟 + 𝑡 
and Z ←˒
0, as explained below. Sample A ←˒ Z𝑚×𝑛
𝐷2ℓ×𝑚Z,𝜎0
. Define
. Compute U = Z · A ∈ Z2ℓ×𝑛
msk := Z and pk := (A, U).
𝑞
𝑞
∙ ℱℰ.KeyGen(msk, x). Given x = (𝑥1, . . . , 𝑥2ℓ)𝑡 ∈ Z2ℓ
𝑝 ,
sample ¯𝑥𝑖 ←˒ 𝐷𝑝Z+𝑥𝑖,𝜎1 for 𝑖 ∈ [ℓ] and ¯𝑥𝑖 ←˒ 𝐷𝑝Z+𝑥𝑖,𝜎2
for 𝑖 ∈ [ℓ + 1, 2ℓ]. Set ¯x := (¯𝑥1, . . . , ¯𝑥2ℓ)𝑡 ∈ Z2ℓ and
x = ¯x𝑡 · Z ∈ Z𝑚. Note that we have ¯x ≡ x mod 𝑝 by
z𝑡
construction. Finally, return skx = (¯x, zx).
∙ ℱℰ.Enc(pk, y). To encrypt a vector y ∈ Z2ℓ
s ←˒ Z𝑛
𝑞 , e0, e1 ←˒ 𝐷𝑚Z,𝛼𝑞 and compute
𝑝 , sample
c0 = As + e0 ∈ Z𝑚
𝑞 ,
c1 = Us + e1 + 𝑝𝑘−1 · y ∈ Z2ℓ
𝑞 .
Then, return the ciphertext 𝐶 = (c0, c1).
∙ ℱℰ.Dec(skid, 𝐶). Given 𝐶 = (c0, c1) and a secret key
(¯x, zx) for x ∈ Z2ℓ
𝑝 , compute 𝜇′ = ⟨¯x, c1⟩−⟨zx, c0⟩ mod
𝑞 and output the value 𝜇 ∈ Z𝑝 that minimizes |𝑝𝑘−1 ·
𝜇 − 𝜇′|.
Setting the Parameters. We have to set the parameters so
that the correctness requirement is satisfied and the security
reduction from LWE𝑛,𝑚,𝑞,𝛼′ works, for some non-trivial error
rate 𝛼′. We require that
∙ 𝑝𝑘−1/4 > 𝜎0(𝜎1 + 𝜎2)𝛼𝑞
√
ℓ𝑚 · 𝜔(log3/2 𝜆), to ensure
that the error term in decryption has magnitude less
than 𝑝𝑘−1/4 with probability 1 − 𝜆−𝜔(1),
the security proof,
apply Lemma 2.5 in the security proof,
𝜆), to be able to apply Lemma 2.4 in
𝑚) and 𝜎0, 𝛼′𝑞 ≥ Ω(
√
∙ 𝜎1, 𝜎2 ≥ 𝑝 · Ω(
√
√
∙ 𝛼/𝛼′ ≥ Ω(𝜎0
𝜆), to be able to
∙ 𝜅 ≥ Ω(𝜆 + 𝐿 log 𝜆), to ensure the (overwhelmingly
likely) existence of a U as in Lemma 2.9 in the security
proof,
𝜎2 ≥ Ω(𝜅5/2
1 log3/2(ℓ𝜎1)), to be able to apply
Lemma 2.9 in the security proof with 𝜅 ≥ Ω(𝜆+𝐿 log 𝜆)
as above,
∙ 𝜎0 ≥ Ω(𝑝𝜅ℓ𝜎2) and 𝑞𝑛+1/𝑝𝑚 ≤ 2−Ω(𝜅), to be able to
√
ℓ𝜅 log ℓ), ℓ ≥ Ω(𝜅 log(𝜎1𝜅)), and
∙ 𝜎1 ≥ Ω(
ℓ𝜎2
√
apply Lemma 4.2 in the security proof.
To satisfy the above requirements and rely on LWE pa-
rameters for which all known attacks cost 2𝑜(𝜆), we may set
the parameters as follows. We choose 𝜅 = Θ(𝜆 + 𝐿 log 𝜆),
𝑝 = 𝜆𝜔(1), and:7
ℓ = ̃︀Θ((𝜆 + 𝐿) log 𝑝)
𝜎0 = ̃︀Θ((𝜆 + 𝐿)5(𝑝 log 𝑝)3𝜆)
𝜎2 = ̃︀Θ((𝜆 + 𝐿)3(𝑝 log 𝑝)2𝜆)
1/𝛼 = ̃︀Θ((𝜆 + 𝐿)9(𝑝 log 𝑝)6𝜆2)
1/𝛼′ = ̃︀Θ((𝜆 + 𝐿)14.5(𝑝 log 𝑝)9𝜆3) 𝑚 = ̃︀Θ(𝜆 + 𝐿)
𝑞 = ̃︀Θ((𝜆 + 𝐿)15(𝑝 log 𝑝)9𝜆3)
𝑛 = ̃︀Θ(𝜆)
√
𝜆)
𝜎1 = Θ(𝑝
𝑘 = Θ(1)
Decryption Correctness. To show the correctness of the
scheme, we first observe that, modulo 𝑞:
′
= ⟨¯x, c1⟩ − ⟨zx, c0⟩ = 𝑝𝑘−1 · ⟨x, y⟩ + ⟨¯x, e1⟩ − ⟨zx, e0⟩.
𝜇
Below, we show that the magnitude of the term ⟨¯x, e1⟩ −
√
ℓ𝑚· 𝜔(log3/2 𝜆) with probability
⟨zx, e0⟩ is ≤ 𝜎0(𝜎1 + 𝜎2)𝛼𝑞
1− 𝜆−𝜔(1). Thanks to the parameter choices, the latter upper
bound is smaller than 𝑝𝑘−1/4, which suffices to guarantee
decryption correctness.