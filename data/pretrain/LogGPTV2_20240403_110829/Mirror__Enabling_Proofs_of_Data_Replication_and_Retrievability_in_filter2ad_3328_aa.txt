title:Mirror: Enabling Proofs of Data Replication and Retrievability in
the Cloud
author:Frederik Armknecht and
Ludovic Barman and
Jens-Matthias Bohli and
Ghassan O. Karame
Mirror: Enabling Proofs of Data Replication  
and Retrievability in the Cloud
Frederik Armknecht, University of Mannheim; Ludovic Barman, Jens-Matthias Bohli,  
and Ghassan O. Karame, NEC Laboratories Europe
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/armknecht
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX Mirror: Enabling Proofs of Data Replication and Retrievability
in the Cloud
Frederik Armknecht
Ludovic Barman
University of Mannheim, Germany
NEC Laboratories Europe, Germany
PI:EMAIL
PI:EMAIL
Jens-Matthias Bohli
Ghassan O. Karame
NEC Laboratories Europe, Germany
NEC Laboratories Europe, Germany
Hochschule Mannheim, Germany
PI:EMAIL
PI:EMAIL
Abstract
Proofs of Retrievability (POR) and Data Possession
(PDP) are cryptographic protocols that enable a
cloud provider to prove that data is correctly stored
in the cloud. PDP have been recently extended
to enable users to check in a single protocol that
additional ﬁle replicas are stored as well. To conduct
multi-replica PDP, users are however required to
process, construct, and upload their data replicas
by themselves. This incurs additional bandwidth
overhead on both the service provider and the user
and also poses new security risks for the provider.
Namely, since uploaded ﬁles are typically encrypted,
the provider cannot recognize if the uploaded content
are indeed replicas. This limits the business models
available to the provider, since e.g., reduced costs for
storing replicas can be abused by users who upload
diﬀerent ﬁles—while claiming that they are replicas.
In this paper, we address this problem and pro-
pose a novel solution for proving data replication
and retrievability in the cloud, Mirror, which allows
to shift the burden of constructing replicas to the
cloud provider itself—thus conforming with the cur-
rent cloud model. We show that Mirror is secure
against malicious users and a rational cloud provider.
Finally, we implement a prototype based on Mirror,
and evaluate its performance in a realistic cloud set-
ting. Our evaluation results show that our proposal
incurs tolerable overhead on the users and the cloud
provider.
1
Introduction
The cloud promises a cost-eﬀective alternative for
small and medium enterprises to downscale/upscale
their services without the need for huge upfront in-
vestments, e.g., to ensure high service availability.
Currently, most cloud storage services guarantee
service and data availability [4, 6] in their Service
Level Agreements (SLAs). Availability is typically
ensured by means of full replication [4, 23]. Repli-
cas are stored onto diﬀerent servers—thus ensuring
data availability in spite of server failure. Storage
services such as Amazon S3 and Google FS provide
such resiliency against a maximum of two concur-
rent failures [30]; here, users are typically charged
according to the required redundancy level [4].
Nevertheless, none of today’s cloud providers ac-
cept any liability for data loss in their SLAs. This
makes users reluctant—and rightly so—when using
cloud services due to concerns with respect to the
integrity of their outsourced data [2, 7, 10]. These
concerns have been recently fueled by a number
of data loss incidents within large cloud service
providers [5, 10]. For instance, Google recently ad-
mitted that a small fraction of their customers’ data
was permanently lost due to lightning strikes which
caused temporary electricity outages [10].
To remedy this, the literature features a number
of solutions that enable users to remotely verify the
availability and integrity of stored data [11, 15, 16,
25, 34]. Examples include Proofs of Retrievability
(POR) [25, 34] which provide clients with the assur-
ance that their data is available in its entirety, and
Proofs of Data Possession (PDP) [12] which enable a
client to verify that its stored data has not undergone
any modiﬁcations. PDP schemes have been recently
extended to verify the replication of ﬁles [18, 22, 30].
These extensions can provide guarantees for the users
that the storage provider is replicating their data as
agreed in the SLA, and that they are indeed getting
the value for their money.
Notice, however, that existing solutions require
the users themselves to create replicas of their ﬁles,
appropriately pre-process the replicas (i.e., to cre-
ate authentication tags for PDP), and ﬁnally upload
all processed replicas in the cloud. Clearly, this in-
USENIX Association  
25th USENIX Security Symposium  1051
Table 1: Bandwidth cost in diﬀerent regions as pro-
vided by CloudFlare [3]. “% Peered” refers to the
percentage of traﬃc exchanged for free with other
providers.
Region
Europe
North America
Asia
Latin America
Australia
% Peered Eﬀective price/Mbps/Month
50%
20%
55%
60%
50%
$5
$8
$32
$32
$100
curs signiﬁcant burden on the users. Moreover, this
consumes considerable bandwidth from the provider,
that might have to scale up its bandwidth to ac-
commodate for such large upload requests. For ex-
ample, in order to store a 10 GB ﬁle together with
three replicas, users have to process and upload at
least 40 GB of content. Recall that the provider’s
bandwidth is a scarce resource; most providers, such
as AWS and CloudFlare, currently buy bandwidth
from a number of so-called Tier 1 providers to en-
sure global connectivity to their datacenters [3]. For
example, CloudFlare pays for maximum utilization
(i.e., maximum number of Mbps) used per month.
This process is costly (cf. Table 3) and is consid-
erably more expensive than acquiring storage and
computing resources [24].
Besides consuming the provider’s bandwidth re-
sources, this also limits the business models available
to the provider, since e.g., reduced costs for stor-
ing replicas can be oﬀered in the case where the
replication process does not consume considerable
bandwidth resources from the provider (e.g., when
the replication is locally performed by the provider).
Alternatively, providers can oﬀer reduced costs by
oﬀering infrequent/limited access to stored replicas,
etc. Amazon S3, for example, charges its users almost
25% of the underlying storage costs for additional
replication [1,9]. Users therefore have considerable in-
centives to abuse this service, and to store their data
at reduced costs as if they were replicas. Since the
outsourced data is usually encrypted, the provider
cannot recognize if the uploaded contents are indeed
replicas.
In this paper, we address this problem, and pro-
pose a novel solution for proving data replication
and retrievability in the cloud, Mirror, which goes
beyond existing multi-replica PDP solutions and en-
ables users to eﬃciently verify the retrievability of
all their replicas without requiring them to replicate
data by themselves. Notably, in Mirror, users need
to process/upload their original ﬁles only once irre-
spective of the replication undergone by their data;
here, conforming with the current cloud model [4],
the cloud provider appropriately constructs the repli-
cas given the original user ﬁles. Nevertheless, Mirror
allows users to eﬃciently verify the retrievability of
all data replicas—including those constructed by the
service provider.
To this end, Mirror leverages cryptographic puzzles
to impose signiﬁcant resource constraints—and thus
an economic disincentive—on a cloud provider which
creates the replicas on demand, i.e., whenever the
client initiates the veriﬁcation protocol. By doing so,
Mirror incentivizes a rational cloud provider to cor-
rectly store and replicate the clients’ data—otherwise
the provider risks detection with signiﬁcant probabil-
ity.
In summary, we make the following contributions
in this work:
• We propose a novel formal model and a security
model for proofs of replication and retrievability.
Our proposed model, PoR2, extends the POR
model outlined in [34] and addresses security
risks that have not been covered so far in existing
multi-replica PDP models.
• We describe a concrete PoR2 scheme, dubbed
Mirror that is secure in our enhanced security
model. Mirror leverages a tunable replication
scheme based on the combination of Linear Feed-
back Shift Registers (LFSRs) with the RSA-
based puzzle by Rivest [33]. By doing so, Mirror
shifts the burden of constructing replicas to the
cloud provider itself and is therefore likely to
be appreciated by cloud providers since it al-
lows them to trade their expensive bandwidth
resources with relatively cheaper computing re-
sources.
• We implement and evaluate a prototype based
on Mirror in a realistic cloud setting, and we
show that our proposal incurs tolerable over-
head on both the users and the cloud provider
when compared to existing multi-replica PDP
schemes.
The remainder of this paper is organized as fol-
lows. In Section 2, we introduce a novel model for
proofs of replication and retrievability. In Section 3,
we propose Mirror, an eﬃcient instantiation of our
proposed model, and analyze its security in Section 4.
In Section 5, we evaluate a prototype implementation
of Mirror in realistic cloud settings and compare its
performance to the multi-replica PDP scheme of [18].
In Section 6, we overview related work in the area,
and we conclude the paper in Section 7.
1052  25th USENIX Security Symposium 
USENIX Association
2
2 PoR2: Proofs of Replication and Re-
trievability
In this section, we introduce a formal model for proofs
of replication and retrievability, PoR2.
2.1 System Model
We consider a setting where a user U outsources
a ﬁle D to a service provider S who agrees to the
following two conditions:
1. Store the ﬁle D in its entirety.
2. Additionally store r replicas of D in their en-
tirety.
A PoR2 protocol aims to ensure to the user that
both conditions are kept without the need for users
to download the ﬁles and the replicas. Hence, our
model comprises a further party: the veriﬁer V who
runs the PoR2 scheme to validate that indeed the data
and suﬃcient copies are stored by S . In a privately-
veriﬁable scheme, the user and the veriﬁer consist
of the same entity; these roles might be however
diﬀerent in publicly-veriﬁable schemes.
As one can see, Condition 1 indirectly implies
that a PoR2 scheme needs to comprise a PDP or
POR scheme. Consequently, similar to the POR
model, a PoR2 involves a process for outsourcing the
original data, referred to as Store, and an interactive
veriﬁcation protocol Verify.
However, Condition 2 goes beyond common
POR/PDP requirements. Hence, one needs an ad-
ditional (possibly interactive) process denoted by
Replicate for generating the replicas and a second
process, dubbed CheckReplica, which checks the cor-
rectness of the replicas (in case the replicas were
created by the user). Moreover, the interactive ver-
iﬁcation protocol Verify needs to be extended such
that it veriﬁes the storage of the original ﬁle and the
copies computed by the service provider. In what
follows, we give a formal speciﬁcation of the proce-
dures and protocols involved in a PoR2 scheme. Our
model adapts and extends the original POR model
introduced in [25, 34]. In Section 2.2, we summarize
the relation between PoR2 and previous POR models.
The Store Procedure: This randomized procedure
is executed by the user once at the start. Store takes
as input the security parameter κ and the ﬁle (cid:31)D to be
outsourced, and produces a ﬁle tag τ that is required
to run the veriﬁcation procedure. Depending on
whether the scheme is private or public veriﬁable,
the veriﬁcation tag needs to be kept secret or can
be made public. The output of Store comprises the
ﬁle D that the service provider should store. D may
be diﬀerent from (cid:31)D, e.g., contain some additional
information, but (cid:31)D should be eﬃciently recoverable
from D. Finally, Store outputs public parameters
Π which allow the generation of r replicas D(i) of
the outsourced ﬁle. We assume that the number of
copies is (implicitly) given in the copy parameters Π,
possibly being speciﬁed in the SLA before. Summing
up, the formal speciﬁcation of Store is:
(D,τ,Π) ← Store(κ,(cid:31)D)
The Replicate Procedure: The Replicate procedure
is a protocol executed between the veriﬁer (who holds
the veriﬁcation tag τ) and the service provider to
generate replicas of the original ﬁle. To this end,
Replicate takes as inputs the copy parameters Π
and the outsourced ﬁle D, and outputs the r copies
D(1), . . . ,D (r). In addition, the provider gets a copy
tag τ∗ which allows him to validate the correctness
of the copies. Formally, we have:
Replicate :
[V : τ,Π; S : D,Π]
→ [V : τ; S : D(1), . . . ,D (r),τ∗]
Recall that the veriﬁer V refers to the party that
holds the veriﬁcation tag and may not necessarily be
a third party. This captures (i) the case where the
user creates the copies on his own at the beginning
(as discussed in [18]), and (ii) the case where this
replication process is completely outsourced to the
service provider (or even to a third party).
Observe that the output for the veriﬁer includes
again the veriﬁcation tag. This is the case since we
want to capture situations where the veriﬁcation tag
can be changed, depending on the protocol ﬂow of
Replicate. To keep the description simple, we denote
both values (the veriﬁcation tag as output of the Store
procedure and the potentially updated veriﬁcation
tag after running Replicate) by τ.
The CheckReplica Procedure:
The purpose of
the CheckReplica procedure, which is used by the
service provider, is to validate that the replicas have
been correctly generated, i.e., are indeed copies of the
original ﬁle. Notice that CheckReplica is mandatory
for a comprehensive model but is not necessary in the
case where the service provider replicates the data
itself (in this case the service provider can ensure
that the replication process is done correctly).
CheckReplica is executed between the veriﬁer and
the service provider. The veriﬁer V takes as input the
copy parameters Π and veriﬁcation tag τ, being his
output of the Replicate procedure (see above), while
the service provider S takes as input the uploaded
ﬁle D, a possible replica D∗ (together with a replica
USENIX Association  
25th USENIX Security Symposium  1053
3
index i ∈ {1, . . . ,r}), the copy parameters Π, and the
copy tag τ∗. CheckReplica then outputs a binary
decision expressing whether the service provider S
believes that D∗ is a correct i-th replica of D according
to the Replicate procedure and the copy parameters
Π.
CheckReplica: [V : τ,Π; S : τ∗,Π,D,D∗,i] → [S : dec]
The Verify Protocol: A veriﬁer V , i.e., the user
if the scheme is privately veriﬁable and possibly a
third party if the scheme is publicly veriﬁable, and
the provider S execute an interactive protocol to
convince the veriﬁer that both the outsourced D
and the r replicas D(1), . . . ,D (r) are correctly stored.
The input of V is the tag τ given by Store and the
copy parameters Π, while the input of the provider
S is the ﬁle D outsourced by the user and the r
replicas generated by the Replicate procedure. The
output dec ∈ {accept,reject} of the veriﬁer expresses
his decision, i.e., whether he accepts or rejects. It
holds that:
Verify :
[V : τ,Π; S : D,D(1), . . . ,D (r)] −→ [V : dec]
Note that Verify and CheckReplica aim for com-
pletely diﬀerent goals. The CheckReplica procedure
allows the service provider S to check if the repli-
cas have been correctly generated and hence protects
against a malicious customer who misuses the repli-
cas for storing additional data at lower costs. On
the other side, the Verify procedure enables a client
or veriﬁer V to validate that the ﬁle and all copies
are indeed stored in their entirety to provide secu-
rity against a rational service provider. For instance,
CheckReplica can be omitted if the replicas have been
generated by the service provider directly while Verify
would still be required.
2.2 Relation to Previous Models
Notice that the introduced PoR2 model covers and
extends both proofs of retrievability and proofs of
multiple replicas. For example in case that no replicas
are created at all, i.e., neither the Replicate nor the
CheckReplica procedures are used, the scheme reduces
to a standard POR according to the model given
in [34]. Observe that in such cases storage allocation
is a direct consequence of the incompressibility of the
ﬁle. Moreover, the multi-replica schemes presented so
far (see Section 6 for an overview) can be seen as PoR2
schemes where the correct replication requirement
is simply ignored. In fact, we argue that if existing
multi-replica schemes are coupled with a proof that
the replicas are honestly generated by the user, then
the resulting scheme would be a secure PoR2 scheme.
2.3 Attacker Model
Similar to existing work in the area [35,36], we adapt
the concept of the rational attacker model. Here,
rational means that if the provider cannot save any
costs by misbehaving, then he is likely to simply
behave honestly. In our particular case, the advan-
tage of the adversary clearly depends on the rela-
tion between storage costs and other resources (such
as computation), and on the availability of these
resources to the adversary. In the sequel, we cap-
ture such a rational adversary by restricting him to
a bounded number of concurrent threads of execu-
tion. Given that the provisioning of computational
resources would incur additional costs, our restric-
tion is justiﬁed by the fact that a rational adversary
would only invest in additional computing resources
if such a strategy would result in lower total costs
(including the underlying costs of storage).
Likewise, we assume that users are interested to