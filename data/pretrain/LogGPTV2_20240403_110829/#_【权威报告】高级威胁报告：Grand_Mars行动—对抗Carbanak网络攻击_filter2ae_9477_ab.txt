图 27 调用getsourcecode()函数
getsourcecode()函数从Pastebin上抓取数据，并将它存储在一个新文件中，名为“dttsg.txt”。最后执行GetCommand()。
图 28 getsourcecode()函数
“dttsg.txt”文件的结构如下图，并按照“last”和“code”分成了两部分，并提供另一个隐蔽信道。
图 29 从Pastebin中抓取的数据
“last”中的数据将会写入注册表，也许是为了跟踪最后执行的命令，
“code”中的数据作为一个参数，用base64编码过，允许攻击者执行以下命令，分别是“Destroy”、“GetCompInfo”、“GetProcList”和“RunCMDLine”，如下图所示，然而，在我们的调查中没有观察到这一特性的用法。
图 30 从Pastebin中抓取的参数
图 31 用于跟踪的Pastebin帐户
然后继续执行GetCommand()函数，它会再次连接Google
Docs，并使用了在LoadLinkSettings()函数中得到的spreadsheetkey，并将函数执行结果存储在LanCradDriver.ini文件中，该文件在最初是一个空文件，现在在此处的操作过程中，使它成为攻击的另一个关键组件。
图 32 从Google Docs中下载代码
实际的数据经过base64编码过，就像我们在Google spreadsheet中看到的，需要解码。该数据存储在LanCradDriver.ini文件中。
图 33 从Google spreadsheet下载的编码的PowerShell命令
LanCradDriver.ini文件中的数据需要利用VBScript脚本来执行，起初是一个编码过的PowerShell脚本。最后一步，TransbaseOdbcDriver.js利用wscript.exe执行LanCradDriver.vbs脚本。
图 34 执行LanCradDriver.ini中的代码
**LanCradDriver.vbs**
该文件的功能是读取和执行LanCradDriver.ini文件中的命令(通过TransbaseOdbcDriver.js脚本)。
表格 3 LanCradDriver.vbs文件的HASH
图 35 LanCradDriver.vbs
**LanCradDriver.ini**
正如我们之前讲到的，TransbaseOdbcDriver.js脚本从Google
Docs上读取了位于spreadsheet上的一个单元格，数据采用base64编码格式。在解码以后，解码的数据会重新存储到LanCradDriver.ini文件中。
表格 4 LanCradDriver.ini文件的HASH
下面刚是从Google
spreadsheet返回的一个PowerShell命令，并存储在LanCradDriver.ini文件中，在目标系统中，TransbaseOdbcDriver.js脚本会执行该PowerShell命令。
图 36 LanCradDriver.ini中的内容(部分内容)
在前面我们注意这个数据是用base64编码和压缩过的，这有利于隐藏真实的PowerShell命令。
在成功执行Transbaseodbcdriver.js脚本后，下面的图片显示的是文件夹中的内容。注意，此时的LanCradDriver.ini文件已经不是空文件了，因为它已经被Google
spreadsheet上的数据填充了。
图 37 执行Transbaseodbcdriver.js脚本后，LanCradDriver.ini文件被填充了
**行为总结**
总之，四个被释放文件的作用可以通过下面的流程图直观的表示出来：
图 38 释放文件的作用和执行顺序
下面的图表直观的呈现出了在整个攻击行动中，恶意软件使用的C&C机制，包括使用Pastebin、Google
Docs(spreadsheets)和Google Forms去控制受害人系统。
图 39 恶意软件C&C服务流程图
图 40 恶意软件在Google Spreadsheet不能用时的C&C服务流程图
使用这种C&C服务机制，虽然说不是很罕见，但是这足以表明，我们面对的是一个高度组织化和成熟化的攻击者，并不是一个投机份子、松散组织或孤狼攻击。
**  
**
**3、攻击持久化**
**PowerShell脚本**
此时此刻，从Google
Docs下载的PowerShell脚本已被解码，并在被感染的系统上执行了。正如图36所示的，使用了PowerShell压缩和Base64函数来隐藏有效载荷。在解析这些功能后，输出结果表明该脚本的目的是建立一个持久后门，经常被称为TCP反弹连接shell。
它的细节如下：
1) 该脚本连接到一个外部IP的80端口，然而，它并没有用HTTP协议来传输数据。
2) 分配内存，并创建线程的代码存在。
3) 然后接收一个源于外部IP的、经过异或加密的载荷。
4) 使用0x50密钥，解密载荷，并写入内存。
图 41 PowerShell中的TCP反弹SHELL
上面脚本的结果是，产生一个常驻内存的恶意软件，并给网络罪犯提供一个反弹shell。攻击者现在成功获得了进入目标基础设施的后门。PowerShell命令用于解码和执行该脚本。这种载荷传递方法和“PowerSploit”、“Veil
Framework”很相似，前者是一个PowerShell的Post-Exploitation框架，后者是一个众所周知的逃税杀毒检测的载荷工具。
**注册表自启动**
此外，攻击者利用了系统自启动位置(常见嫌疑犯)来实现持久化。为了在机器重启后能自启动，它在注册表中创建了下面的键值。
图 42 注册表持久化
计划任务
最后，又创建了一个计划任务，每30分钟会被触发一次，并无限循环。计划任务的名称是“SysCheks”，它会执行“starter.vbs”。
图 43 SysCheks计划任务持久化
所有东西都被复制在用户临时目录下，“C:UsersAppDataLocalTemp”，这也是非常常见的恶意软件行为，因为任何用户对这个文件夹都有完全的访问权限。
**  
**
**4、横向运动(横向攻击)**
**HASH传递**
在这次攻击行动的初始阶段，攻击者获得了进入本地Windows系统的管理帐户，并利用HASH传递偷了一个域证书，是高权限用户。
图 44 事件显示出HASH传递标识
上图显示的ID为4624的事件显示出，用户的一个本地帐户是从网络登录的(Logon Type:3)，并使用了随机的计算机名(Workstation
Name: T5NMapiY4kGetJDe)，可能是利用了一个自动化工具的结果。
HASH传递是攻击者成功控制一个系统时常用的技术，窃取凭据HASH，并使用它在另一个系统中执行认证。如果在目标基础设施中，共享相同的本地帐户，这种技术对攻击者会很有用。
最终，攻击者通过位于欧洲和美国的充当C&C服务器的多个资源，获得域权限、或企业域管理访问权、网络访问权。
对攻击基础架构的进一步调查显示出，入侵者在目标环境中在传播相似的PowerShell脚本、或嵌入批处理文件。大量的内部系统事件记录，如下图：
图 45用于传播的批处理文件
图 46 用于传播的PowerShell脚本
在整个攻击行动中，发现了多个PowerShell脚本，并且和最初从Google
Docs下载的PowerShell脚本是相似的。它们的最大不同点是C&C服务器的IP地址，是位于欧洲的多个主机中的一个。
**  
**
**5、更多恶意文件**
在同一时间和日期中，我们对文件系统活动进行取证分析时，又发现了多个释放到临时文件夹的恶意文件，它们是TransbaseOdbcDriver.js文件和其他配套文件：
1) AdobeUpdateManagementTool.vbs(连接C&C，并提取数据)。
2) UVZHDVlZ.exe(Carbanak的变种)。
3) Update.exe(Cobalt Strike的post-exploitation工具)。
4) 322.exe(TCP反弹shell)。
对这些可执行文件进行分析，发现它们有共同的恶意性质，主要用途是建立持久化或数据提取。
AdobeUpdateManagementTool.vbs
这是使用VBScript写的恶意脚本，主要功能是从攻击者那里接收命令，然后根据命令下载、执行EXE文件、执行VBScript或PowerShell脚本文件。并通过HTTP
POST隧道将窃取的数据发送到攻击者的IP地址。
尽管在我们的调查中，我们观察到的文件名称是“AdobeUpdateManagementTool.vbs”，但是攻击者在不同的攻击行动中使用不同的文件名是很常见的。
表格 5 AdobeUpdateManagementTool.vbs文件的HASH
AdobeUpdateManagementTool.vbs在执行时，会创建一个文件夹，名为“%AllUsersProfile%+“Dropebox”+”，例如C:ProgramDataDropeboxJoePC，并在该文件夹中释放出下面的文件：
screenshot__.ps1：截屏的PowerShell脚本。
screenshot__.png：通过上面的PowerShell脚本，截取的屏幕图片。
Exe__.exe：攻击者发送来的可执行文件。
Vb__.vbs：攻击者发送来的VBScript。
Ps1__.ps1：攻击者发送来的PowerShell脚本。
Insatller.vbs：攻击者发送来的VBS脚本更新器。
该恶意脚本给攻击者的C&C服务器发送一个特定的请求，并从服务器接收一个经过HASH(MD5)的命令。该命令会在被攻击的系统中执行。
表格 6 支持的命令示例
上图是每个命令执行后的结果，并通过HTTP POST请求发送到C&C服务器中，格式如下：
图 47 用HTTP POST请求向C&C服务器发送数据
HTTP POST数据中body的格式：
图 48 HTTP POST方式选项
在每次发送“命令-结果数据”期间，该脚本会循环进入睡眠模式，持续3到5分钟。
下面是识别出来的和这个脚本有关的C&C服务器IP(攻击者会经常改变他们的C&C服务器，因此这点IP是微不足道的，这些IP可能和将会进行的其它攻击行为的IP是不同的)：
• 148.251.18.75
• 95.215.46.221