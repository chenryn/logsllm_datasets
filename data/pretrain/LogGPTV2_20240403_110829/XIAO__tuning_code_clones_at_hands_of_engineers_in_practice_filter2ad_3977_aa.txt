title:XIAO: tuning code clones at hands of engineers in practice
author:Yingnong Dang and
Dongmei Zhang and
Song Ge and
Chengyun Chu and
Yingjun Qiu and
Tao Xie
1Microsoft Research Asia, China 
2Microsoft Corporation, USA 
3Alibaba Corporation, China, 4NC State University, USA  
XIAO: Tuning Code Clones at Hands of Engineers in 
Practice 
Yingnong Dang1, Dongmei Zhang1, Song Ge1, Chengyun Chu2, Yingjun Qiu3*, Tao Xie4 
{yidang;dongmeiz;songge;chchu}@microsoft.com, PI:EMAIL, PI:EMAIL 
ABSTRACT 
During  software  development,  engineers  often  reuse  a  code 
fragment  via  copy-and-paste  with  or  without  modifications  or 
adaptations.  Such  practices  lead  to  a  number  of  the  same  or 
similar  code  fragments  spreading  within  one  or  many  large 
codebases.  Detecting  code  clones  has  been  shown  to  be  useful 
towards  security  such  as  detection  of  similar  security  bugs  and, 
more generally, quality improvement such as refactoring of code 
clones. A large number of academic research projects have been 
carried out on empirical studies or tool supports for detecting code 
clones.  In  this  paper,  we  report  our  experiences  of  carrying  out 
successful technology transfer of our new approach of code-clone 
detection, called XIAO. XIAO has been integrated into Microsoft 
Visual Studio 2012, to be benefiting a huge number of developers 
in  industry.  The  main  success  factors  of  XIAO  include  its  high 
tunability,  scalability,  compatibility,  and  explorability.  Based  on 
substantial industrial experiences, we present the XIAO approach 
with emphasis on these success factors of XIAO. We also present 
empirical  results  on  applying  XIAO  on  real  scenarios  within 
Microsoft for the tasks of security-bug detection and refactoring.   
Categories and Subject Descriptors 
D.2.7 
Enhancement] 
General Terms 
Security, Algorithm 
Keywords 
Code  clone,  code  duplication,  duplicated  security  vulnerability, 
code-clone detection, code-clone search 
1.  INTRODUCTION 
During  software  development,  engineers  often  reuse  a  code 
fragment  via  copy-and-paste  with  or  without  modifications  or 
adaptations.  Such  practices  lead  to  a  number  of  the  same  or 
similar code fragments called code clones spreading within one or 
many large codebases. Detecting code clones [6][10][14][18][20] 
has been commonly shown to be useful towards various software-
[Distribution,  Maintenance, 
[Software  Engineering]: 
____________________________________ 
*  This  work  was  done  when  this  author  worked  for  Microsoft  Research 
Asia. 
Permission to  make digital  or hard copies  of  all  or part  of this  work  for 
personal or classroom use is granted without fee provided that copies are 
not made or distributed for profit or commercial advantage and that copies 
bear this notice and the full citation on the first page. To copy otherwise, to 
republish,  to  post  on  servers  or  to  redistribute  to  lists,  requires  prior 
specific permission and/or a fee. 
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA 
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00. 
369
engineering tasks such as bug detection and refactoring. 
In general, there are four main types of code clones [6][20]. Type-
I  clones  are  identical  code  fragments  except  for  variations  in 
whitespace, layout, or comments. Type-II clones are syntactically 
identical  fragments  except  for  variations  in  identifiers,  literals, 
types,  whitespace,  layout,  or  comments.  Type-III  clones  are 
copied  fragments  with  further  modifications  such  as  changed, 
added,  or  removed  statements,  in  addition  to  variations  in 
identifiers, literals, types, whitespace, layout, or comments. Type-
IV  clones  are  code  fragments  that  perform  similar  functionality 
but are implemented by different syntactic variants. 
Among these four types of code clones, type-III code clones with 
or  without  disordered  statements,  called  near-miss  code  clones, 
are of high practical interest because they may potentially have a 
negative impact on the code quality and increase maintenance cost 
[10].  For  example,  problems  might  occur  when  some  code  is 
changed  for  fixing  a  bug  but  the  same  fix  is  not  applied  to  its 
clones. Another example is inconsistent evolution of code clones, 
e.g., one piece of code is changed for supporting more data types, 
but  its  clones  are  not  changed  accordingly.  Figure  1  shows  an 
example  near-miss  clone  (which  indicates  a  bug)  reported  by  a 
Microsoft engineer. The difference between the code snippets A 
and  B  is  relatively  large:  one  statement  in  the  code  snippet  B 
(Line 16) is replaced by 4 statements in code snippet A (Lines 16-
19),  and  the  “if”  statement  in  code  snippet  B  (Lines  23-25)  is 
updated as Lines 24-28 in A with significant changes in the “if” 
condition. 
A  large  number  of  academic  research  projects  [20]  have  been 
carried out on empirical studies or tool supports for detecting code 
clones.    However,  in  practice,  so  far  few  such  research  projects 
have  resulted  in  substantial 
the 
empirical studies conducted by researchers themselves. Although 
a  few  integrated  development  environments  have  integrated  the 
generic  feature  of  code-clone  detection,  this  feature  has  limited 
support for real use in practice, and no industrial experiences are 
reported on the application of such feature.  
In  this  paper,  we  attempt  to  address  this  issue  and  share  to  the 
community  with  experiences  of  carrying  out  successful 
technology transfer of our new approach of code-clone detection 
[8], called XIAO. XIAO has already been used by a large number 
of  Microsoft  engineers  in  their  routine  development  work, 
especially  engineers 
team  at 
Microsoft  who  have  been  using  XIAO’s  online  clone-search 
service since May 2009 to help with their investigation on security 
bugs.  XIAO  has  been  integrated  into  Microsoft  Visual  Studio 
2012, to be benefiting a huge number of engineers in industry. 
Based  on  our  experiences  [8]  of  collaborating  with  Microsoft 
engineers  on  using  and  improving  XIAO  along  with  our 
from  a  security-engineering 
industry  adoption  beyond 
// 3 identical statements omitted here 
switch (biBitCount) 
{ 
// 9 identical statements omitted here 
4. 
5. 
15.  case 24: // 24bpp: Read colours from pixel 
16.  case 32:  
17.  palEntry.rgbRed    = ((RGBQUAD *)pPixel)->rgbRed; 
18.  palEntry.rgbGreen = ((RGBQUAD *)pPixel)->rgbGreen; 
19.  palEntry.rgbBlue    = ((RGBQUAD *)pPixel)->rgbBlue; 
20.  break; 
21.  default: // What else could it be? 
22.  return 0; 
23.  } 
24.  if (palEntry.rgbRed >= 0xFE && palEntry.rgbGreen >= 0xFE && 
25.  palEntry.rgbBlue >= 0xFE ||((palEntry.rgbRed >= 0xbf && 
26.  palEntry.rgbGreen >= 0xbf && palEntry.rgbBlue >= 0xbf) && 
27.  (palEntry.rgbRed <= 0xc1 && palEntry.rgbGreen <= 0xc1 && 
28.  palEntry.rgbBlue <= 0xc1))) 
29.     return FALSE; 
30.  return TRUE; 
Code Snippet A 
      // 3 identical statements omitted here 
4. 
5. 
switch (biBitCount) 
{ 
// 9 identical statements omitted here 
case 24: // 24bpp: Read colours from pixel 
15. 
16.     palEntry = *(RGBQUAD *)pPixel; 
17.       break; 
18.   
19.   
20.      default:    // What else could it be? 
21.      return 0; 
22.    } 
23.    if (palEntry.rgbRed == 0xFF && palEntry.rgbGreen == 
0xFF 
24.     &&palEntry.rgbBlue == 0xFF || palEntry.rgbRed == 0xC0  
25.     palEntry.rgbGreen == 0xC0 && palEntry.rgbBlue == 0xC0) 
26.   
27.       return FALSE; 
28.    return TRUE; 
Code Snippet B 
Figure 1. An example of near-miss code clones in a commercial codebase 
observations  on  real  use  of  XIAO  by  Microsoft  engineers,  we 
attribute  the  success  of  XIAO  to  four  main  factors:  its  high 
tunability, scalability, compatibility, and explorability. 
High tunability of XIAO is achieved with a new set of similarity 
metrics  in  XIAO,  reflecting  What  You  Tune  Is  What  You  Get 
(WYTIWYG):  users  can  intuitively  relate  tool-parameter  values 
with  the  tool  outputs,  and  easily  tune  tool-parameter  values  to 
produce  what  the  users  want.  For  example,  the  similarity-
parameter  value  of  100%  should  lead  to  outputs  of  two  exactly 
same cloned snippets, and the 80% value should lead to outputs of 
two cloned snippets with 80% similarity judged by the users. The 
parameters  of  the  proposed  metrics  in  XIAO  enable  users  to 
effectively control the degree of the syntactic difference between 
the two code snippets of a near-miss clone pair: the degree of the 
statement  similarity,  the  percentage  of  inserted/deleted/modified 
statements  in  the  clone  pair,  the  balance  between  the  code-
structure  similarity,  and  the  quantity  of  disordered  statements. 
Such high tunability of XIAO is critical in applying an approach 
of  code-clone  detection  such  as  XIAO  to  a  broad  scope  of 
software-engineering tasks such as refactoring and bug detection 
since  these  different  tasks  would  require  different  levels  of 
parameter values. 
High scalability of XIAO in analyzing enormous lines of code is 
achieved  with  a  well-designed  scalable  and  parallelizable 
algorithm with four steps. These four steps include preprocessing, 
coarse  matching,  fine  matching,  and  pruning.  Preprocessing 
transforms  source-code  information  to  filter  out  inessential 
information such as code comments, and map code entities such 
as  keywords  and 
information 
preprocessing  reduces  the  cost burden  of  the  actual  analysis.  To 
offer  high  scalability,  XIAO  splits  the  main  analysis  into  two 
steps:  coarse  matching  and  fine  matching.    Coarse  matching  is 
less  costly  but  less  accurate  than  fine  matching.  The  scope 
narrowed  down  by  coarse  matching  is  fed  to  fine  matching, 
achieving  a  good  balance  on  analysis  scalability  and  accuracy. 
The  step  of  pruning  further  improves  the  analysis  accuracy.  In 
addition,  the  clone-detection  algorithm  of  XIAO  can  be  easily 
parallelized.  XIAO  partitions  the  codebase  and  performs  code-
clone  detection  on  each  code-partition  pair.  Each  instance  of 
XIAO detects clones on a number of pairs. The results of all the 
instances are then merged. 
tokens.  Such 