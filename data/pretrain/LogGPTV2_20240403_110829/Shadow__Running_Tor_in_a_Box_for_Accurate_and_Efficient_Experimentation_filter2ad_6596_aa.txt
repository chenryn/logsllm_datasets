# Title: Shadow: Running Tor in a Box for Accurate and Efficient Experimentation

## Authors
- Rob Jansen, U.S. Naval Research Laboratory
- Nicholas Hopper, University of Minnesota

## Abstract
Tor is a large and popular overlay network that provides anonymity to its users and serves as a platform for anonymous communication research. Testing new design proposals and attacks on the live Tor network is challenging due to deployment issues and privacy concerns. Alternative experimentation techniques are limited in scale, accuracy, or reproducibility. We present Shadow, an architecture for running accurate and efficient Tor experiments on a single machine. We validate Shadow's accuracy by comparing it to a private Tor deployment on PlanetLab and live network performance statistics. To demonstrate Shadow's capabilities, we investigate circuit scheduling and find that the EWMA circuit scheduler can reduce aggregate client performance under certain loads when deployed across the entire Tor network. Our software runs without root privileges, is open source, and is publicly available for download.

## 1. Introduction
Tor is the most widely used application for providing anonymity to privacy-conscious Internet users. It achieves this by routing communication through a series of volunteer relays around the world, using Onion Routing to ensure that no single relay can learn both the true source and destination of any message. The goal of providing low-latency anonymity has led to extensive research on topics such as anonymity attacks and defenses, system design, performance, scalability, and the economics of volunteering relays.

Most Tor research, whether implementing a new design or analyzing potential attacks, benefits from or requires access to the live Tor network. However, such access can invade clients' privacy or be impractical. Testing small design changes in the real network would require propagating those changes to hundreds of thousands of Tor clients or thousands of volunteer relays, or both. Therefore, researchers often use alternative strategies for experimentation and testing.

### Tor Experimentation
One approach is to configure a parallel private test network using machines at a university or platforms like PlanetLab. While these deployments run real software over real hardware, they do not accurately reflect the public Tor network's conditions, are difficult to manage, and do not scale well. Another approach is simulation, which increases scalability but reduces accuracy. Simulators tend to become outdated and unmaintained, and results from one group may be inconsistent with or unverifiable by others.

### Tor in a Box
To improve the consistency, accuracy, and scalability of Tor experiments, we designed and developed Shadow, a unique simulation architecture. Shadow allows us to run a private Tor network on a single machine, controlling all aspects of the experiment. Results are repeatable and easily verifiable through independent analysis. Shadow simulates the network layer but links to and runs real Tor software, allowing us to experiment with new designs by directly implementing them into the Tor source code. This expedites the process of incorporating proposals into Tor, as software patches can be submitted to developers. Shadow supports multiple Tor software versions and focuses on usability and open-source principles, improving accessibility and promoting community adoption.

Shadow is a discrete-event simulator that uses techniques to run real applications in a simulation environment. Real applications are encapsulated in a plug-in wrapper, and Shadow manages memory regions for each node. Function interposition allows Shadow to intercept and redirect function calls to simulated counterparts. We run Tor using these techniques and symbol table manipulations without modifying the source code.

### Accurate Simulation
We validate Shadow's accuracy against a 402-node PlanetLab deployment, testing network performance using HTTP file transfers both directly and through a private Tor network. Although PlanetLab does not consistently represent the live Tor network, it allows us to test our ability to model a real, diverse network. We find that our results are reasonable, despite PlanetLab's highly variable behaviors due to overloaded CPUs.

To further validate Shadow's accuracy, we simulate a 1051-node topology with bandwidth and relay characteristics from a live Tor network consensus. We model the Internet using latency measurements between all PlanetLab nodes. We find that client performance in Shadow closely matches live statistics, with download time quartiles within 15% of live data for various download sizes.

### Improving Client Performance
Tor's popularity has led to network congestion and performance issues. Using Shadow, we investigate scheduling as a technique to improve client performance. In Section 6, we explore the EWMA circuit scheduler, which prioritizes bursty circuits ahead of bulk circuits. We confirm previous results and re-evaluate EWMA on small bottleneck topologies. However, our results from a network-wide deployment indicate that performance benefits are highly dependent on network load and a properly tuned half-life. We found that the scheduler reduces performance for Tor clients under certain network loads, a significant result since the EWMA scheduler is currently enabled by default for all updated Tor relays.

## 2. Requirements
### Accuracy
To produce consistent and representative results, Shadow should run a minimally-modified version of the native Tor software. This ensures that Tor's behavior in the simulated network closely mirrors its behavior in the live network. Additionally, Shadow must accurately model system-level interactions, including buffering, encryption/decryption, and non-blocking I/O. We also need to simulate TCP and UDP, manage network-level buffers, and model CPU delays for cryptographic operations.

Finally, an accurate network model is essential. Shadow requires models for network characteristics, including latency, reliability, AS-level topologies, and upstream/downstream capacities. It must also model Tor-specific characteristics, such as relay-contributed bandwidth, bandwidth distributions among entry, middle, and exit relays, and geographical distribution of relays. Shadow must incorporate network traffic from Tor clients and model accurate traffic distributions based on live Tor traffic patterns.

### Usability and Accessibility
A usable simulation framework is crucial for community adoption. Shadow should be simple to obtain, build, and configure, allowing for rapid deployment. Users should be able to run simulations with minimal overhead and little or no configuration. Advanced users should be able to modify simulations, generate new topologies, and configure network and system parameters. Simulation results should be easy to gather and parse for visualization and analysis. Shadow should run as a user-level process on a single machine with inexpensive hardware, making it accessible worldwide for easy comparison and verification.

## 3. Design
### Overview
Shadow is a discrete-event simulator that can run real applications as plug-ins with minimal modifications. Plug-ins link to Shadow libraries, and Shadow dynamically loads and executes the application code while simulating the network communication layer. Shadow was originally a fork of the Distributed Virtual Network (DVN) simulator, adding approximately 18,000 lines of code, including example plug-ins. An overview of Shadow's design is depicted in Figure 1, and details about the core simulation engine are provided in Appendix A.

### Simulation Script
Each simulation is bootstrapped with a script written in a custom scripting language. The script allows users to dynamically load multiple plug-ins, create and connect networks, and create nodes. Valid plug-ins are loaded by specifying a file path, and parameters such as latency, bandwidth, and CPU speed are specified either by loading a CDF data file or generating a CDF using a built-in generator. Hostnames can be specified for each node, and the script also specifies which plug-in to run and when to start each node.

Events are extracted from the script and spooled to the event scheduler. After parsing, the simulation begins by executing the first event and runs until there are no events remaining or the end time specified in the script is reached. Each node creation event triggers the allocation of a virtual node and its network, culminating in a callback to a Shadow plug-in for application instantiation.

### Shadow Plug-ins
A Shadow plug-in is an independent library containing applications to be simulated and a wrapper for integration with the Shadow simulation environment. Each plug-in implements a set of callbacks for communication with Shadow and can link to special utility libraries for IP address retrieval and logging.

#### Application Requirements
- **Asynchronous Execution:** Applications must be asynchronous to prevent simulator deadlocks. Asynchronicity can be achieved with a small amount of code in the plug-in wrapper or by using the libevent-2.0 library.
- **Single Process and Thread:** Applications must run as a single process and thread. Child processes or threads are currently unsupported and can lead to undefined behavior.
- **Variable State Registration:** Plug-ins must register all variable application state with Shadow to facilitate multiple virtual nodes running the same application. This is done by passing pointers to node-specific memory chunks and their sizes to a Shadow library function.

By meeting these requirements, Shadow provides a robust and flexible platform for accurate and efficient Tor experimentation.