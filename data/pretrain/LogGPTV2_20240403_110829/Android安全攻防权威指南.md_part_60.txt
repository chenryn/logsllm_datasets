---
## Page 270
### 第10章 攻击内核

在尝试加载 `ahh_setuid_mod.ko` 模块时，出现了错误消息：

```bash
root@android:/data/local/tmp # insmod ahh_setuid_mod.ko
insmod: init_module 'ahh_setuid_mod.ko' failed (Operation not permitted)
```

这是因为 `init_module` 函数返回了 -1，导致内核自动卸载该模块。退出 root 用户后，通过调用 `setuid(31337)` 可以重新获取 root 权限。

使用可加载的内核模块来扩展内核功能非常方便，但出于安全考虑，一些 Android 设备中的内核不支持可加载模块。可以通过检查 `/proc` 文件系统中的 `modules` 项或查找内核配置中的 `CONFIG_MODULES` 值来判断系统是否支持可加载模块。自 Android 4.3 发布以来，谷歌已禁用了所有 Nexus 设备的可加载内核模块支持。

#### 10.3.5 编译自定义内核

尽管 Linux 内核包含各种工具可以在运行时配置和扩展内核功能，但某些功能的修改需要重新编译内核。例如，启用调试工具可能需要在编译时添加完整的文件或函数。本章已经介绍了如何获取源代码、配置编译环境以及配置内核。本节将介绍如何为 AOSP 支持的 Galaxy Nexus 和三星 Galaxy S III 编译内核。

**1. AOSP 支持的设备**

对于搭载 Android 4.2.2 的 Galaxy Nexus，我们已经获得了正确的源代码并配置了编译环境。接下来，只需使用默认的 `make` 命令即可编译自定义内核：

```bash
dev:/android/src/kernel/omap $ make
[...]
Kernel: arch/arm/boot/zImage is ready
```

编译成功后，生成的内核镜像将位于 `arch/arm/boot` 目录下的 `zImage` 文件中。如果发生错误，则需要在编译前解决。10.3.6 和 10.3.7 节将介绍如何引导编译出的自定义内核。对于所有 AOSP 支持的设备（包括 Nexus 系列的所有设备），编译自定义内核的步骤应该是相同的。

**2. OEM 设备**

OEM 设备的内核编译方法与 AOSP 设备类似，但不同厂商的方法可能会有所不同。本节将以 Sprint 版三星 Galaxy S III (SPH-L710) 为例，介绍如何编译和测试自定义内核。目标是生成一个与现有内核兼容的新内核。

---
## Page 271
### 10.3 运行自定义内核代码

在编译之前，首先需要确定使用什么源代码。对于不同的厂商，寻找源代码的方法也不同。如果幸运的话，内核版本字符串会引用 AOSP GIT 仓库中的某个 commit 哈希。这种情况常见于较老的设备，因为厂商直接使用了谷歌提供的内核。可以使用以下命令查看设备的内核版本：

```bash
shell@android:/ $ cat /proc/version
Linux version 3.0.31-1130792 (se.infra@s8p132) (gcc version 4.6.x-google 20120106 (prerelease)) #2 SMP PREEMPT Mon Apr 15 19:05:47 KST 2013
```

不幸的是，Galaxy S III 的版本信息中没有包含 commit 哈希，因此需要使用其他方法。一种方法是使用 OEM 提供的内核源代码树。首先查看设备的指纹信息：

```bash
shell@android:/ $ getprop ro.build.fingerprint
samsung/sphepicatt/sphl710:4.1.2/JZO54K/L710VPBMD4:user/release-keys
```

从指纹信息中可以看到，`INCREMENTAL` 域值为 `L710VPBMD4`。有了设备型号（SPH-L710）和固件版本号，就可以去三星的开源网站上搜索相应的源代码。下载并解压缩 `Kernel.tar.gz` 和 `README_Kernel.txt` 文件：

```bash
dev:~/sph-l710 $ unzip SPH-L710_NA_JB_OpenSource.zip Kernel.tar.gz \
Archive: SPH-L710_NA_JB_OpenSource.zip
README_Kernel.txt
inflating: Kernel.tar.gz
dev:~/sph-l710 $ mkdir kernel
dev:~/sph-l710 $ tar zxf Kernel.tar.gz -C kernel
```

解压后，应阅读 `README_Kernel.txt` 文件，其中包含了所需的工具链和编译配置信息。根据指示，需要使用 `arm-eabi-4.4.3` 工具链和 `m2_spr_defconfig` 配置。不过需要注意的是，之前找到的内核版本号比 `README_Kernel.txt` 中的更权威。

下一步是搭建编译环境。根据 `README_Kernel.txt` 的建议，使用 AOSP 中的工具链。为了避免问题，尽量使用与设备相符合的编译环境。根据之前的指纹信息，目标设备的 `RELEASE` 为 4.1.2，`ID` 为 JZO54K。查询 Android 文档中的“Codenames, Tags, and Build Numbers”页面，可以发现对应的 tag 是 `android-4.1.2_r1`。初始化 AOSP 仓库：

```bash
dev:~/sph-l710 $ mkdir aosp && cd $_
dev:~/sph-l710/aosp $ repo init -u https://android.googlesource.com/platform/manifest -b android-4.1.2_r1
```

检出 AOSP 仓库正确版本的代码后，准备编译内核。但在编译之前，需要完成环境的初始化：

```bash
dev:~/sph-l710/aosp $ source build/envsetup.sh
dev:~/sph-l710/aosp $ lunch full-user
PLATFORM_VERSION=4.1.2
PLATFORM_VERSION_CODENAME=REL
TARGET_BUILD_VARIANT=user
TARGET_PRODUCT=full
TARGET_BUILD_TYPE=release
TARGET_BUILD_APPS=
TARGET_ARCH_VARIANT=armv7-a
TARGET_ARCH=arm
HOST_ARCH=x86
HOST_OS_EXTRA=Linux-3.2.0-54-generic-x86_64-with-Ubuntu-12.04-precise
HOST_OS=linux
HOST_BUILD_TYPE=release
BUILD_ID=JZO54K
OUT_DIR=out
dev:~/sph-l710/aosp $ export ARCH=arm
dev:~/sph-l710/aosp $ export SUBARCH=arm
dev:~/sph-l710/aosp $ export CROSS_COMPILE=arm-eabi-
```

这样，环境里就有了 AOSP 的预编译工具链。与编译 Galaxy Nexus 不同的是，这里要使用 `full-user` 编译配置。此外，还需要设置 `CROSS_COMPILE` 环境变量。检查编译器版本：

```bash
dev:~/sph-l710/aosp $ arm-eabi-gcc --version
arm-eabi-gcc (GCC) 4.6.x-google 20120106 (prerelease)
```

这个编译器版本与运行的内核版本字符串相匹配。理论上，使用这个工具链应该会生成一个与设备原内核基本相同且兼容的新内核。

根据 `README_Kernel.txt` 文件中的信息，配置和编译内核：

```bash
dev:~/sph-l710/aosp $ cd ~/sph-l710/kernel
dev:~/sph-l710/kernel $ make m2_spr_defconfig
# configuration written to .config
dev:~/sph-l710/kernel $ make
[...]
Kernel: arch/arm/boot/zImage is ready
```

如果一切按计划进行，内核会编译成功，并生成压缩的内核镜像 `arch/arm/boot/zImage`。在信息安全领域，事情往往不会这么顺利。编译内核时，可能会遇到如下错误：

```bash
Lzo/arch/arm/boot/compressed/piggy.lzo
/bin/sh: 1: lzo: not found
make[1]: *** [arch/arm/boot/compressed/vmlinux] Error 2
make[2]: *** [arch/arm/boot/compressed/piggy.lzo] Error 1
make: *** [zImage] Error 2
```

当系统缺乏 `lzo` 命令时，就会发生这个错误。三星使用 LZO 算法来压缩内核，牺牲存储空间以提高压缩速度。安装这个工具后，再次运行 `make` 命令，编译就会成功。

#### 10.3.6 制作引导镜像

Android 设备有两种典型的引导 Linux 内核的方式：正常启动过程（使用 boot 分区）和恢复启动过程（使用 recovery 分区）。这两个分区的文件结构相同，都有一个短头部、一个压缩的内核和一个初始的 ramdisk (initrd) 镜像。通常情况下，它们使用相同的内核，但也有例外。要替换这些模式下的内核，必须为新的内核重建分区镜像。本节关注的是 `boot.img`。

基于现有的引导镜像，为新编译出来的自定义内核创建引导镜像是最容易的。第一步是获取一个镜像。虽然使用原厂固件中的 `boot.img` 通常是可行的，但直接使用设备中的镜像更加可靠。因为设备的内核可能已经通过 OTA 升级了，所以使用直接从设备中获得的镜像能够确保系统正确启动。获得设备中镜像的方法，请参考 10.2.2 节。

下一步是从获得的引导镜像中提取文件。根据 10.2.3 节中的步骤操作，就能获得 `bootimg.cfg`、`zImage` 和 `initrd.img` 这几个文件。

注意：虽然解包和打包的操作经常在运行 ADB 的机器上进行，但事实上也能在被 root 的设备上进行。

可以使用 `abootimg` 工具来创建引导镜像。`abootimg` 支持两种使用情形：更新和创建。如果原始的 `boot.img` 不需要保存，那么可以直接更新镜像：

```bash
dev:~/android/src/kernel/omap/staging $ abootimg -u -k ../arch/arm/boot/zImage
reading kernel from ../arch/arm/boot/zImage
writing Boot Image cur-boot.img
```

上面的命令展示了如何使用 `abootimg` 的 `-u` 选项来更新 `boot.img`，可以实现将原本的内核更换成你自己的内核。也可以使用 `--create` 选项把内核、initrd 和可选的第二步引导装配成 `boot.img`。如果内核或 initrd 文件变大了，`abootimg` 命令会给出如下错误消息：

```bash
dev:~/android/src/kernel/omap/staging $ abootimg --create new-boot.img -f bootimg.cfg -k bigger-zImage -r initrd.img
reading kernel from bigger-zImage
reading ramdisk from initrd.img
```

只需使用 `-c` 选项或更新 `abootimg` 配置文件 `bootimg.cfg` 中的 `bootsize` 参数就能解决这个问题。

对于三星 Galaxy S III 手机，操作步骤几乎是一样的。可以从设备中获得引导镜像或原厂镜像。这次通过在 SamFirmware 网站检索设备型号，下载到原厂镜像 `KIES_HOME_L710VPBMD4_L710SPRBMD4_1130792_REV03_user_low_ship.tar.md5`。这个镜像应该与用来升级设备的镜像相同。可以按照如下命令来提取固件镜像和引导镜像：

```bash
dev:~/sgs3-md4 $ mkdir stock
dev:~/sgs3-md4 $ tar xf KIES*MD4*.tar.md5 -C stock
dev:~/sgs3-md4 $ mkdir boot && cd $_
dev:~/sgs3-md4/boot $ abootimg -x ./stock/boot.img
extracting kernel in zImage
writing boot image config in bootimg.cfg
extracting ramdisk in initrd.img
```

提取成功后，编译自定义引导镜像所需的准备就已经全部作好了。使用 `abootimg` 命令进行如下操作即可：

```bash
dev:~/sgs3-md4/boot $ mkdir --parents staging
dev:~/sgs3-md4/boot $ abootimg --create ../staging/boot.img -f bootimg.cfg
reading kernel from /home/dev/sph-l710/kernel/arch/arm/boot/zImage
reading ramdisk from initrd.img
```

---

希望优化后的文本能更好地帮助您理解和操作。如果有任何进一步的问题或需要更多的细节，请告诉我！