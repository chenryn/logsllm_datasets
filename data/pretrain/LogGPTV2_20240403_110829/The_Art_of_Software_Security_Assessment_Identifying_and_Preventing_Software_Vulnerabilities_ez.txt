server-side scripting of Web applications. The program code is embedded in the HTML 
page within special tags, and a server-side parser evaluates the code as the page is 
displayed. The actual language can be any ActiveScript-compliant language, 
including VBScript, JavaScript, and PerlScript. In practice, however, VBScript is the 
most common choice, so this discussion focuses on that language. 
ASP is primarily intended to function as a presentation tier in enterprise web 
applications. The Microsoft Distributed Network Architecture (DNA) 1.0 guidelines 
recommend COM objects for any logic tiers. They are generally implemented in Visual 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1120 
Basic or C++. However, many small- to medium-sized applications are developed 
entirely in ASP. 
ASP auditing comes pretty naturally to anyone familiar with PHP or JSP. The general 
structure and techniques are very similar, and the major differences are just 
language and platform semantics. 
SQL Injection 
Database access in ASP is typically performed using ActiveX Data Objects (ADO). You 
want to look for three main objects: Connection, Command, and RecordSet. The 
Connection object represents a full connection to an external database. It has an 
Execute() method that runs a SQL query on that connection and returns a RecordSet. 
The following code shows the most common way SQL queries are performed with the 
Connection object: 
    user = Request.Form("username") 
    Set Connection = Server.CreateObject("ADODB.Connection") 
    Connection.Open "DSN=testdsn; UID=xxx" 
    sqlStmt = "SELECT * FROM users WHERE name= '" & user & "'" 
    Set rs = Connection.Execute(sqlStmt) 
Developers can also use an ADO Command object, which is more flexible for stored 
procedures and parameterized queries. With this approach, users set properties in 
the Command object to tell it which connection to use and what SQL query it should run. 
The SQL query runs when the Command object's Execute() method is called. This 
process is demonstrated in the following code: 
  set cmd = Server.CreateObject("ADODB.Command") 
  Command.ActiveConnection = Connection 
  querystr = "SELECT * FROM users WHERE name='" & user & "'" 
  cmd.CommandText = querystr 
  Command.Execute 
A third common way to run a SQL query is for the application to create a RecordSet 
object and then call the Open() method, as shown in the following code: 
  user = Request.Form("username") 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1121 
  querystr = "SELECT * FROM users WHERE name='" & user & "'" 
  Set rs = Server.CreateObject("ADODB.Recordset") 
  rs.Open querystr, "DSN= 
All three of these types of statements are vulnerable to SQL injection attacks when 
handling user supplied data, so you should look for any instances of their use. ADO 
also supports parameterized queries via the Command object. You can identify these 
queries by the ? placeholder in the query string and the use of the CreateParameter() 
method to add bound parameters. 
For the sake of thoroughness, when auditing an ASP application for SQL problems, 
you will also want to search for specific strings to try to find all the database 
interaction code. Good search candidates are SQL substrings, such as INSERT, SELECT, 
or WHERE, as well as methods that manipulate the database, such as Execute() or 
Open(). 
File Access 
ASP access to the file system is usually performed with the 
Scripting.FileSystemObject object, which defines a number of methods for standard 
file manipulation tasks, such as creating, deleting, reading, writing, and renaming 
files. When performing a security audit, examine every use of the FileSystemObject, 
as most of the methods have security consequences if user input is involved. Here's 
an example of a problem-prone attempt to write a file with the CreateTextFile() 
method: 
username = Request.Form("username") 
path = server.MapPath("/profiles/") 
Set objFSO = Server.CreateObject("Scripting.FileSystemObject") 
Set objFSOFile = objFSO.CreateTextFile(path + "\" + username) 
This example is vulnerable to a direct path traversal attack, allowing an attacker to 
create an arbitrary text file on the system. The NUL-byte issue affects ASP code as 
well, so attackers can easily circumvent code that appends a suffix or file extension to 
a user-supplied filename. This code also demonstrates a good method for identifying 
locations that handle user supplied paths. The Server.MapPath() function is commonly 
used when manipulating file paths. It's responsible for converting a path in the Web 
tree into a real physical drive path. Therefore, it ends up being used in most code 
dealing with the file system, even if that code uses a mechanism other than 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1122 
FileSystemObject. In practice, you can find most file system manipulation code by 
performing a non-case-sensitive search for FileSystemObject, MapPath, and filename. 
Shell Invocation 
Shell invocation is not as natural of a task in ASP as it is in UNIX-based Web 
technologies. Typically, it's done using the Windows Scripting Host shell object, 
WshShell. This object provides Exec() and Run() methods; Run() starts a new 
Windows application, and Exec() starts a program within a child command shell and 
handles redirection of standard input, output, and error. Code that calls the shell is 
usually easy to find, as it generally has this idiom: 
set objShell = Server.CreateObject( "WScript.Shell" ) 
objShell.Run( thecommand ) 
If users can manipulate portions of the command string passed to WshShell, it's likely 
a serious exposure. 
File Inclusion 
Most file inclusion in ASP code is actually done by using SSIs. Because these 
directives are processed before the ASP interpreter runs, it isn't possible for 
dynamically constructed #include statements to work. In other words, you can't write 
code to create a filename at runtime and then include that file by using the  --> tag. 
That said, as of IIS 5.0 and ASP 3.0, two new methods are available for directing the 
ASP interpreter to process other files at runtime. The Server.Execute() method calls 
and embeds a separate ASP in the current ASP. It works like an include function but 
is a bit more involved in how it preserves the object model associated with the HTTP 
request. Effectively, it calls another ASP page like a subroutine. The MSDN entry 
provides a good example, which has been modified in the following example to 
demonstrate a security vulnerability. 
Company Name 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1123 
This code attempts to open a regionally localized page by constructing a filename 
from the language specified by the client. So the following ASP pages would be sitting 
in the same directory as the main welcome page: 
- EnWelcome.asp - 
- DeWelcome.asp 
- EsWelcome.asp - 
The obvious security hole is that the language isn't filtered, and users can control the 
argument to Server.Execute(). Because ASP is also susceptible to the NUL-byte 
termination issue, this means appending Welcome.asp doesn't interfere with the 
attacker's ability to specify arbitrary files. Note that this vulnerability is nowhere near 
as bad in the ASP environment as it is in PHP. In ASP, an attacker must supply a 
filename in the Web tree, and can't specify external files, which limits the attack 
somewhat. The best bet for attackers is to try to find a temporary file directory in the 
Web tree where they can upload a file containing VBScript. It also might be 
worthwhile to include other configuration and content files in the Web tree, as the ASP 
parser likely exposes their contents even if it doesn't see valid ASP. Often, if a system 
is built around ASP chaining mechanisms like this one, merely calling the wrong 
"inside" ASP file is enough to let attackers bypass authentication or authorization 
checks. 
Server.Transfer() transfers control from one ASP file to another. It's different from 
Execute() in that it hands complete control over and stops execution of the initial ASP 
page. The state of the system and the objects that make up the ASP environment are 
maintained, and the transfer occurs totally on the server side. Other Web 
technologies have implemented this feature in some fashion, as it works well for 
separating code and presentation logic. Developers could create one ASP file that 
does all the work with the database and business logic. This file could populate 
several temporary variables with the data that needs to be displayed. If this ASP code 
uses Server.Transfer() to transfer control to a second ASP, the second ASP can read 
those variables from the runtime environment it inherited, and then its code can focus 
on displaying the information in a graphically appealing fashion. 
Manipulation of the Server.Transfer() destination filename has more or less the 
same impact as with Server.Execute(). If developers mistakenly use these functions 
as analogues for Response.Redirect(), they can run into unexpected security issues. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1124 
These methods seem to work similarly to a redirect, but they perform a full transfer 
of control on the server side. The impact of improper filtering with these methods can 
lead to running arbitrary code and disclosing sensitive files. 
Inline Evaluation 
VBScript is the most common scripting language used for ASP. It provides a few 
mechanisms for dynamic runtime evaluation of code that prove interesting for 
security review. Execute() takes a string containing VBScript code and runs it through 
the interpreter. Eval() does more or less the same thing, except it treats its string as 
an expression, not a statement. These function are much the same, but the 
separation into two functions helps resolve an ambiguity in VBScript about 
interpreting the = operator. In Execute(), it's used for assignment, and in Eval(), it 
tests for equality. VBScript also has ExecuteGlobal(), which is just like Execute(), 
except it runs dynamically provided code in the global namespace of the currently 
running application. Thus, the dynamic code can define or modify variables used by 
other functions. 
Note the difference between this Execute() function and the Server.Execute() ASP 
method. This Execute() function is a VBScript language directive for dynamically 
interpreting code, and the Server.Execute() function is part of the ASP runtime object 
model/API for transferring control flow to another ASP script. If attackers can sneak 
metacharacter data into dynamically evaluated code for any of these methods, the 
results are categorically bad. They can use script code to perform whatever 
operations they choose or simply open a remote shell. 
Cross-Site Scripting 
ASP encodes HTML content using the Server.HTMLEncode() function for normal HTML 
and the Server.URLEncode() function for URLs. You should look for any user-malleable 
HTML output via other methods including Response.Write() and  %>. 
Configuration 
ASP programmers often use the .inc file extension for include files just as PHP 
programmers do. If the Web server isn't set up to handle the .inc file extension 
correctly, more often than not it just serves the include files as plain text when 
directly queried for them. It's usually worth checking for this error, as it's a common 
operational oversight. 
8.5.9 ASP.NET 
ASP.NET is Microsoft's successor to the Classic ASP platform; it provides the Web 
Services component of the .NET framework. The .NET framework is a 
language-independent virtual machine and a set of associated libraries. It's similar in 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1125 
many ways to the Java platform; both are platform-independent virtual machine 
environments, provide robust code access control, and have extremely rich default 
libraries. In practice, you can leverage a lot of the same techniques with both Java 
and ASP.NET, although naming and certain conventions differ. In particular, .NET 
provides the Common Language Runtime (CLR), which supports a variety of 
languages, so a source review of a .NET application might require knowledge of 
several languages. Fortunately, the most popular .NET languages are C# and VB.NET, 
which are similar to Java and Visual Basic, respectively. You will also want to be 
familiar with Classic ASP, as many of its conventions and potential security issues are 
share with ASP.NET. 
SQL Injection 
The .NET runtime provides the System.Data namespace for interacting with all data 
sources (collectively referred to as ADO.NET). A connection to a data source is 
generally established by using the SQLConnection class in the System.Data.SqlClient 
namespace, although a database-specific connection can be used, such as the 
OracleConnection class from the System.Data.Client namespace. The semantics are 
essentially the same, so this section sticks with the basic provider. 
After the connection is established, queries can be issued in a number of ways. The 
safest approach is to use parameterized SQL via the SqlCommand and SqlParameter 
classes. This approach follows the same general structure of parameterized queries 
discussed in Chapter 17(? [????.]). Here's an example of a parameterized query in 
C#: 
SqlCommand cmd = new SqlCommand( 
    "SELECT * FROM table WHERE name=@name", cn); 
cmd.CommandType= CommandType.Text; 
SqlParameter prm = new SqlParameter("@name",SqlDbType.VarChar,50); 
prm.Direction=ParameterDirection.Input; 
prm.Value = userInput; 
cmd.Parameters.Add(prm); 
SqlDataReader rdr = cmd.ExecuteReader(); 
This code fragment runs the parameterized command and attaches the result set to 
the data reader. It's a fairly common approach to SQL in .NET. However, here's a 
much shorter approach to the same statement: 
SqlCommand cmd = new SqlCommand( 
    "SELECT * FROM table WHERE name='" + userInput + "'", cn); 
cmd.CommandType= CommandType.Text; 
SqlDataReader rdr = cmd.ExecuteReader(); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1126 
This second statement is obviously vulnerable; the parameters aren't bound, and an 
attacker could supply SQL metacharacters for input. However, it still uses the same 
SqlCommand class as the parameterized query, so you need to make sure you look for 
any dynamic input in the query string. 
File Access 
Input and output are handled by the System.IO namespace, but you need to watch for 
other possible mechanisms. Like Java, .NET is an extensible language, and 
developers make use of various frameworks and wrappers. You can do simple 
searches for common file variable names, as suggested in the Java section. You can 
also look for calls to the path-handling methods of the Request object, especially 
Request.MapPath() and Request.MapPathSecure(), which are used to translate relative 
paths in the server context. 
Another consideration is that the vast majority of ASP.NET applications are on 
Windows systems (although the Mono project and DotGNU do produce cross-platform 
implementations). Therefore, you need to be aware of Windows file-handling quirks 
(discussed in Chapter 11(? [????.]), "Windows I: Objects and the File System"). 
Shell Invocation 
The Process class from the System.Diagnostics namespace is used for running and 
controlling other processes. By default, this class calls the appropriate shell handler 
based on the extension of the provided filename, so it is very similar to the 
ShellExecuteEx Win32 function. For example, this function calls cmd.exe if a file 
named test.bat is passed to it. This behavior can be controlled by setting the 
UseShellExecute property to false in the ProcessStartInfo class passed to 
Process.Start(). Here's a simple example of starting a batch file with a manually 
supplied command shell: 
ProcessStartInfo si = new ProcessStartInfo("cmd.exe"); 
si.Arguments = "/c test.bat" 
si.UseShellExecute = false; 
Process proc = Process.Start(si); 
However, here's an example that executes the file the using the default batch file 
handler: 
Process proc = Process.Start("test.bat"); 
The file extension is particularly important when starting a process, unless the 
ProcessStartInfo is set explicitly. Attackers who can manipulate the filename might 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1127 
be able to leverage this to start entirely different applications or force the 
interpretation of shell metacharacters. 
File Inclusion 
ASP.NET is like Java, in that it doesn't allow dynamic inclusion of script files. Files can 
be included, however, via this preprocessor directive: 
Of course, a vulnerability that allows a file to be written to the Web root could result 
in a dynamic execution vulnerability. Also, ASP.NET supports the Server.Transfer() 
and Server.Execute() methods provided by Classic ASP, so the security issues in the 
Classic ASP discussion also apply. Finally, there are situations that make it possible 
for developers to implement their own dynamic include capabilities, discussed in the 
next section. 
Inline Evaluation 
The .NET framework is language independent, so it doesn't quite support direct script 
evaluation. However, the System.CodeDom.Compiler namespace includes CodeProvider 
classes for common languages, such as C# and VB.NET. Using this namespace, 
developers can implement an inline evaluation routine fairly easily by just compiling 
and running the source code programmatically. Oddly enough, you might actually see 
this approach in production Web code, so you need to watch for any use of the 
System.CodeDom.Compiler namespace. 
Cross-Site Scripting 
ASP.NET prevents cross-site scripting attacks with the same basic filtering 
mechanisms as Classic ASP, including the Server.HTMLEncode() function for normal 
HTML and the Server.URLEncode() function for URLs. ASP.NET also provides some 
extra protection by explicitly denying requests containing the  characters; this 
behavior is controlled via the ValidateRequest page attribute. Some page controls 
also escape script data, although you will need to consult the documentation for each 
control to determine its exact behavior. 
Configuration 
ASP.NET applications are configured by using the web.config file at the root of the 
application directory. This file can override some settings in the global machine.config 
file found in the CONFIG subfolder of the .NET framework installation directory. The 
web.config file includes settings for application-wide authentication, ViewState 
security, server runtime parameters, and a variety of other details. The MSDN 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
1128 
provides extensive information on details of the web.config file, but the following 
sections touch on a few important points. 
ViewState 
The ViewState, stored in a client-side cookie, contains information on form parameter 
content, control status, and other display-specific information. By default, ViewState 
is protected with a secure message digest by using a secret in the validationKey 
attribute of the machineKey field in web.config. However, some controls can be bound 
to data sources that reveal column and table names along with other potential 
database schema. To address this problem, ViewState can also be encrypted by 
setting the validation attribute to AES or DES and providing a value for 
decryptionKey. If ViewState isn't encrypted, you can use one of many ViewState 
decoder tools to search for interesting information (a ViewState decoder is available 
from www.pluralsight.com/tools.aspx). The following simple ViewState section 
requires both authentication and encryption for all pages: 
Access Control 
ASP.NET allows an application to set sitewide access control enforced by the runtime 
engine. One of the most popular types of authentication is forms-based 
authentication; here's an example of a forms-based authentication section in 
web.config: 
    <forms  name="AuthLogin" 
            loginURL="login.aspx" 