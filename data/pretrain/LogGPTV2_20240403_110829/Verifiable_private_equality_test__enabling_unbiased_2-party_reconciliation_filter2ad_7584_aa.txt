title:Verifiable private equality test: enabling unbiased 2-party reconciliation
on ordered sets in the malicious model
author:Daniel A. Mayer and
Susanne Wetzel
Veriﬁable Private Equality Test: Enabling Unbiased 2-Party
Reconciliation on Ordered Sets in the Malicious Model
Daniel A. Mayer
Susanne Wetzel
{mayer, swetzel}@cs.stevens.edu
Stevens Institute of Technology
Castle Point on Hudson
Hoboken, New Jersey, USA
ABSTRACT
In this paper we introduce the novel notion called Veriﬁable
Private Equality Test (VPET) and propose an eﬃcient 2-
party protocol for its implementation. VPET enables two
parties to securely perform an arbitrary number of compar-
isons on a ﬁxed collection of (key, value) pairs and thus it is
more generic than existing techniques such as Private Equal-
ity Test and Private Set Intersection.
In addition, we demonstrate how higher-level protocols
such as Privacy-Preserving Reconciliation on Ordered Sets
(PROS) can be implemented using VPET.
Using simulation-based techniques, our new protocols are
proven secure in the malicious model. Furthermore, we
present a theoretical complexity analysis as well as a thor-
ough experimental performance evaluation of the C++ im-
plementation of our new VPET and PROS protocols.
[Computer-Communication
Categories and Subject Descriptors
C.2.0
Networks]:
General—Security and protection; C.2.2 [Computer-
Communication Networks]:
Network Protocols—
Applications; C.2.4 [Computer-Communication Net-
works]: Distributed Systems—Distributed Applications
General Terms
Security, Theory, Performance
Keywords
Private Equality Test, Multi-Party Computation, Malicious
Model, Cryptographic Protocol, Reconciliation
1.
INTRODUCTION
Privacy-preserving comparison techniques such as Private
Equality Test (PET) [21, 43, 7, 45, 32] and Private Set In-
tersection (PSI) [23, 27, 29, 30, 17, 20, 19] are prominent
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-0564-8/11/03 ...$10.00.
techniques which are frequently used in the greater con-
text of cryptographic protocols and speciﬁcally in privacy-
preserving data mining [42, 2, 1]. Recently, many real-world
applications with the need for privacy-preserving solutions
have emerged. One prominent example is cloud comput-
ing which encourages the delegation of computation or data
storage to third parties. In addition, the privacy awareness
of the general public is increasing [41, 47]. Given these de-
velopments, the demand for privacy-preserving protocols is
expected to continue to rise.
PET enables the comparison of two values while PSI com-
putes the intersection of two sets in a privacy-preserving
manner.
In this context, privacy-preserving refers to the
fact that the parties learn nothing but the intended result.
In particular, the individual inputs of the parties remain pri-
vate. It is important to note that PET may be considered a
special case of PSI for sets of size one. Various protocols for
both techniques oﬀering diﬀerent security guarantees have
been proposed in the literature. However, all solutions to
date only consider a one-time execution of the protocol, i.e.,
the parties involved either learn the result of a single com-
parison or the entire intersection of their input sets.
This paper has three main contributions. First, we intro-
duce the novel notion and an eﬃcient protocol for Veriﬁ-
able Private Equality Test (VPET) which provides a mid-
dle ground between PET and PSI. VPET allows for im-
proved control and ﬂexibility while guaranteeing security in
the presence of arbitrary adversaries. Speciﬁcally, VPET
enables two parties to perform an arbitrary number of com-
parisons on an immutable set of input values. The main
challenge in designing VPET is to enable both parties to per-
form such comparisons while preventing any change to the
parties’ original inputs in between comparisons. In partic-
ular, the straightforward approach of repeatedly executing
PETs does not constitute a solution since it does not prevent
parties from changing their inputs in between comparisons.
To overcome this shortcoming of existing solutions, our pro-
tocol ﬁrst requires both parties to commit to their input
values. Given this commitment, VPET then allows both
parties to verify that the correct input values were used in
every comparison.
Second, we show how our new VPET protocol can be
used to construct higher-level protocols with an example of
Privacy-Preserving Reconciliation of Ordered Sets (PROS)
[38, 39]. The PROS technique enables applications such as
voting and scheduling [35]. Our newly constructed PROS
protocol is the ﬁrst to provide security in the presence of
arbitrary adversaries.
Third, we conduct a thorough performance analysis of the
newly designed VPET and PROS protocols. We present a
theoretical complexity analysis as well as experimental per-
formance evaluations based on our C++ implementation.
Outline: Section 2 introduces security models and cryp-
tographic tools. In Section 3 we present our novel VPET
protocol and show that it is secure in the malicious model.
In Section 4 we then use VPET as an integral building block
in constructing a PROS protocol with security in the ma-
licious model. In addition, we present our theoretical and
experimental performance evaluation in Section 5. Finally,
in Section 6 we review related work.
2. PRELIMINARIES
2.1 Security Model
In this paper we assume an authenticated channel between
parties and consider the presence of an active adversary
which is allowed to behave maliciously by performing ar-
bitrary actions. In particular, the adversary may not follow
the protocol, i.e., it may not perform the required opera-
tions correctly. This is contrasted by the weaker notion of
a passive adversary, i.e., an adversary which is honest but
curious (also referred to as semi-honest) and has the goal
of learning as much as possible from the protocol execution.
This can informally be described as a party which follows
the protocol but may perform additional polynomial time
computations on the outcome as well as on all intermediate
results. Formal deﬁnitions for both types of adversaries are
given in [25].
Furthermore, we will
leverage the Random Oracle
Model to construct eﬃcient non-interactive zero knowledge
proofs [5].
2.2 Secure Multi-Party Computation
In secure Multi-Party Computation (MPC) two or more
parties wish to securely compute a function which is
known to all participants. This is commonly formalized as
f (x1, x2, . . . , xn, r) = (y1, y2, . . . , yn) where r is some ran-
domness used during the computation and xi and yi are the
input and output of party i (1 ≤ i ≤ n) [25, 16]. In this
context, secure refers to an execution which is performed
correctly and in such a way that all parties learn nothing
beyond the intended output of the function. In this paper
we focus on secure 2-party computation.
The concept of MPC was ﬁrst introduced by Yao [50] and
remained a purely theoretical framework for many years.
However, due to protocol improvements as well as progress
in computation and communication network speeds, MPC
has become practical in recent years [6, 48]. A comprehen-
sive discussion on MPC can be found in [25].
2.2.1 Simulation-Based Security in MPC
In this work we follow the common security deﬁnition
based on the simulation paradigm which compares the real-
world execution to an ideal-world model [40, 26, 4, 13, 25].
The ideal model deﬁnes what a protocol is intended to do
and which party receives which output. This can be un-
derstood as giving all inputs xi to an incorruptible trusted
third party (TTP) which computes the functionality Ff cor-
rectly and returns the correct outputs yi to each party i
(1 ≤ i ≤ n).
However, in the real world a protocol πf is executed to
compute the function f and in addition to the outputs yi
the adversary learns all exchanged messages as well as all
randomness used during the computation of f .
In order for the protocol πf to securely implement Ff ,
the real execution of πf must not disclose any more infor-
mation than what can be learned from the ideal execution.
To prove this, one shows that it is possible to construct
a simulator which, given the ideal output, can generate a
transcript which is identical to that of the real protocol ex-
ecution.
If such a transcript can be generated using only
the knowledge of the ideal execution, this implies that the
transcript cannot contain more information than the ideal
output and the protocol is called perfectly secure [13, 16, 25].
It should be noted that the following commonly known
limitations are inherent to MPC and can not be prevented:
Parties may refuse to participate in the protocol, parties
may substitute their own input, and parties may abort the
protocol before all parties have received the output [25].
2.2.2
One crucial tool in constructing complex secure protocols
is modular composition [40]. Given a protocol which securely
computes a certain functionality, modular composition al-
lows the use of that protocol as a secure building block (as
if it were computed by a TTP) when constructing higher-
level protocols. This can be formalized by introducing a
hybrid model in which both parties communicate (as in the
real world) but have trusted help for some computations (as
in the ideal world) [28]. In this work we will limit ourselves
to sequential modular composition which requires that the
execution of the secure sub-protocol is ﬁnished before the
execution of the main protocol continues. In [14], Canetti
generalized this notion by introducing universal composabil-
ity which allows protocols to be interleaved arbitrarily.
2.2.3 PET and PSI
PET is a two-party protocol in which both parties supply
a single input value. At the conclusion of the protocol one
party learns whether the two values are equal and the other
party learns nothing [21].
Sequential Modular Composition
PSI is a two-party protocol in which both parties supply
a private input set. At the conclusion of the protocol one
party learns the intersection of the two sets and the other
party learns nothing [23].
2.3 Notation
Throughout this paper we assume the following setup. Let
p, q be large primes such that q | p − 1 and let Z∗
q be the
cyclic subgroup of Z∗
p of order q with independently chosen,
random generators g, h. The public parameters are g, h, p, q.
2.4 Zero-Knowledge Signatures of Knowl-
edge
In the following we use signatures of knowledge to eﬃ-
ciently prove statements about discrete logarithms. Feige
et al.
introduced the notion of interactive Zero-Knowledge
Proofs Of Knowledge (ZKPOK) [22] which enable one party
to convince another party that the former knows some se-
cret. In [10, 11], Camenisch et al. proposed signatures of
knowledge which combine the notion of ZKPOK with a tech-
nique similar to Schnorr signatures [49].
In signatures of
knowledge, the random challenge used in interactive proof
systems is replaced by a call to a random oracle H, thus
making the scheme non-interactive and more eﬃcient.
2.4.1 Cryptographic Hardness Assumptions
Discrete Logarithm (Log) (DL) Assumption.
Let g be a generator of the cyclic group Z∗
and d ←r Z∗
P r [A (p, g, d) = x | d = gx mod q]  0 and
The Representation (REP) Problem.
The representation problem is a generalization of the dis-
crete log problem. Let (g1, . . . , gm) with gi (cid:54)= gj for i (cid:54)= j be
a vector of random generators of a group Z∗
q of prime order q.
Then for any y ∈ Z∗
q and any PPT algorithm A it holds that
P r(cid:2)A (q, (g1, . . . , gm), y) = (x1, . . . , xm) | y =(cid:81)m
(cid:3)  0 and suﬃciently large n [8, 9].
2.4.2
In this paper three types of signature of knowledge
schemes will be used: knowledge of discrete logarithm,
knowledge of equality of discrete logarithms, and knowledge
of a representation.
Signature of Knowledge of Discrete Log.
Notation: ZKDL (e | y = ge).
Computation: To prove the knowledge of e = logg y the
q and computes c = H(cid:0)y, g, gt(cid:1)
prover chooses t ←r Z∗
and r = t − c · e [49].
Veriﬁcation: Given c and r the veriﬁer can check whether
c ?= H (y, g, gryc).
Signature of Knowledge of Equality of Discrete Logs.
Notation: ZKEDL (e | y1 = ge ∧ y2 = he).
Computation1 : To prove the knowledge of e = logg y1 =
q and computes
c = H(cid:0)y1, y2, g, h, gt, ht(cid:1) and r = t − c · e [15].
logh y2 the prover chooses t ←r Z∗
Veriﬁcation: Given c and r the veriﬁer checks whether
c ?= H (y1, y2, g, h, gry1
c, nry2
c).
Signature of Knowledge of a Representation.
Notation2: ZKREP ((e1, e2) | y1 = ge1 ∧ y2 = ge2 · he1 ).
Computation: To prove the knowledge of (e1, e2) s.t.
q for
i = 1, 2 and computes c = H(cid:0)y1, y2, g, h, gt1 , gt2 · ht1(cid:1)
y1 = ge1∧y2 = ge2·he1 the prover chooses ti ←r Z∗
and ri = ti − c · ei for i = 1, 2 [11].
Veriﬁcation: Given c and r1, r2 the veriﬁer checks
whether c ?= H (y1, y2, g, h, yc
1 · gr1 , y2 · gr2 · hr1 ).
1Note: This scheme can be extended to simultaneously
prove the equality of more than two discrete logs in a