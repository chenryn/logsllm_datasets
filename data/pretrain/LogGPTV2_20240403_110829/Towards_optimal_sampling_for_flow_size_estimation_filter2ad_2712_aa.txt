title:Towards optimal sampling for flow size estimation
author:Paul Tune and
Darryl Veitch
Towards Optimal Sampling for Flow Size Estimation
Paul Tune and Darryl Veitch
CUBIN ∗
Dept. of E&E Engineering
University of Melbourne, Australia
ABSTRACT
The ﬂow size distribution is a useful metric for trafﬁc modeling and
management. It is well known however that its estimation based on
sampled data is problematic. Previous work has shown that ﬂow
sampling (FS) offers enormous statistical beneﬁts over packet sam-
pling, however it suffers from high resource requirements and is
not currently used in routers. In this paper we present Dual Sam-
pling, which can to a large extent provide ﬂow-sampling-like sta-
tistical performance for packet-sampling-like computational cost.
Our work is grounded in a Fisher information based approach re-
cently used to evaluate a number of sampling schemes, excluding
however FS, for TCP ﬂows. We show how to revise and extend the
approach to include FS as well as DS and others, and how to make
rigorous and fair comparisons. We show how DS signiﬁcantly out-
performs other packet based methods, but also prove that DS is
inferior to ﬂow sampling. However, since DS is a two-parameter
family of methods which includes FS as a special case, DS can be
used to approach ﬂow sampling continuously. We then describe a
packet sampling based implementation of DS and analyze its key
computational costs to show that router implementation is feasible.
Our approach offers insights into many issues, including how the
notions of ‘ﬂow quality’ and ‘packet gain’ can be used to under-
stand the relative performance of methods, and how the problem of
optimal sampling can be formulated. Our work is theoretical with
some simulation support and a case study on Internet data.
Categories and Subject Descriptors
H.1.1 [Systems and Information Theory]: Value of information;
C.2.3 [Network Operations]: Network monitoring; G.3 [Probability
and Statistics]: Nonparametric statistics
General Terms
Measurement, Theory
∗The authors are with the ARC Special Research Cen-
tre
(CUBIN),
an afﬁliated program of National
ICT Australia (NICTA)
(Email:{lsptune@ee.,dveitch@}unimelb.edu.au).
for Ultra-Broadband Information Networks
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’08, October 20–22, 2008, Vouliagmeni, Greece.
Copyright 2008 ACM 978-1-60558-334-1/08/10 ...$5.00.
Keywords
Sampling, ﬂow size distribution, Fisher information, Internet mea-
surement, routers.
1.
INTRODUCTION
The distribution of ﬂow size, that is the number of packets in a
ﬂow, is a useful metric for trafﬁc modeling and management, and
is important for security because of the role small ﬂows play in
attacks. As is now well known however, its estimation based on
sampled data is problematic.
Currently, sampling decisions in routers are made on a per-packet
basis, with only sampled packets being subsequently assembled
into (sampled) ﬂows. Dufﬁeld et al. [1] were the ﬁrst to point out
that simple packet sampling strategies such as ‘1 in N’ periodic or
i.i.d. (independent, identically distributed) packet sampling have
severe limitations, in particular a strong ﬂow length bias which al-
lows the tail of the ﬂow size distribution to be recovered, but dra-
matically obscures the details of small ﬂows. They explored the
use of TCP SYN packets to improve the resolution at the small
ﬂow end of the spectrum. Hohn et al. [2, 3] explored these difﬁcul-
ties further and pointed out that ﬂow sampling, where the sampling
decision is made directly on ﬂows, resulting in all packets belong-
ing to any sampled ﬂows being collected, has enormous statistical
advantages. However, ﬂow sampling has not been pursued further
nor found its way into routers, because it implies that lookups be
performed on every packet, which is very resource intensive.
More recently, Ribeiro et al. [4] explored the use of TCP se-
quence numbers to improve estimation for TCP ﬂows. The idea
is that the presence of packets which are not physically sampled
can be inferred by noting the increasing byte count given by the
sequence number ﬁelds of sampled packets. By using the Fisher
information as a metric of the effectiveness of sampling in retain-
ing information about the original ﬂow sizes, they showed that this
helps greatly to ‘ﬁll in the holes’ left by packet sampling. How-
ever, they did not address whether these techniques out-perform
ﬂow sampling.
In this paper we revisit ﬂow sampling (FS) in the context of TCP
ﬂows. Our ﬁrst contribution is to explain how the approach of [4]
can be reformulated and extended to include FS. This provides a
framework for our second contribution, proofs that ﬂow sampling
outperforms existing methods by a large margin, though they them-
selves greatly improve upon simple packet sampling. With the sta-
tistical reputation of FS thus reinforced, the challenge is to ﬁnd
methods which can somehow approach or approximate ﬂow sam-
pling in order to beneﬁt from its information theoretic efﬁciency,
but with lower resources requirements. We show how this can be
done.
The computational problem for FS can be described as follows.
First, trafﬁc sampling generally, and ﬂow metrics such as ﬂow size
in particular, are not only about tracking heavy hitters. To capture
the variety present in trafﬁc ﬂows and to provide the raw material
for a variety of current (and future) metrics, many ﬂows must be
sampled. This implies large ﬂow tables which in turn implies the
use of DRAM rather than SRAM for cost reasons [5]. However,
DRAM is not fast enough to perform lookups for every packet,
as required by a straightforward implementation of FS, for today’s
high capacity links. The question then becomes, how can ﬂow sam-
pling be implemented using per-packet decisions, in other words
using some form of packet sampling?
The main contribution of this paper is the introduction of Dual
Sampling (DS), a hybrid approach combining the advantages of
both packet and ﬂow sampling.
It is a two parameter sampling
family which includes FS as a special case and allows FS to be ap-
proached continuously, enabling a tradeoff of sampling efﬁciency
against computational cost. Computationally, it can be implemented
via a modiﬁed form of two-speed or ‘dual’ packet sampling which
circumvents the problem of slow DRAM. There is a cost in terms
of wasted samples, but we show that this can be borne in high speed
routers. Following [4], DS beneﬁts from the use of TCP sequence
numbers although it can also be used without them, and we provide
insight into how and when they have an impact. We show rigor-
ously that DS outperforms the methods proposed in [4].
Finally, we introduce SYN+SEQ+FIN, another sampling method
which enables ﬂow sampling to be perfectly achieved (aside from
errors in the mapping of byte to packet counts) at very low com-
putational cost, well below that even of packet sampling. Its dis-
advantage is that it exploits the TCP FIN ﬁeld, when not all TCP
ﬂows terminate correctly with a FIN packet.
With its explicit use of TCP protocol information in most cases,
our work applies to TCP ﬂows only. However, the ideas and results
could apply to other kinds of ﬂows provided that suitable substi-
tutes could be found for connection startup (SYN) ‘progress’ (se-
quence numbers) and termination (FIN). TCP ﬂows still constitute
the overwhelming majority of trafﬁc in the Internet.
The rest of the paper is organized as follows. Section 2 describes
our sampling framework and derives the Fisher information matrix
and its inverse explicitly. Section 3 deﬁnes the sampling methods,
and derives their main properties. Section 4 compares the methods
theoretically and derives further properties explaining their perfor-
mance, using the notions of ﬂow quality and packet gain. It also
compares them computationally and discusses their feasibility for
implementation. Section 5 applies the methods to real Internet data
and shows that DS performs favorably with ﬂow sampling in prac-
tice. We conclude and discuss future work in Section 6.
2. THE SAMPLING FRAMEWORK
In this section we establish a framework to deﬁne and analyze
sampling techniques applied to an idealized view of TCP ﬂows on
a link. Nominally, we imagine that such ﬂows are deﬁned by the
usual 5-tuple of origin and destination IP addresses, port numbers,
and TCP protocol ﬁeld together with a timeout. For the analysis we
make a number of simplifying assumptions:
(i) ﬂows begins with a SYN packet and have no others,
(ii) ﬂows are not split (this can occur through timeouts or ﬂow table
clearing),
(iii) all necessary protocol information (5-tuple, SYN/FIN bits and
sequence numbers) can be observed,
(iv) per-ﬂow sequence numbers count packets, not bytes.
Assumptions (iii) and (iv) will be discussed/relaxed when we deal
with real data in Section 5. Note that we do respect TCP’s per-ﬂow
random initialization of sequence numbers. Hence their absolute
value holds no information on the number of packets in a ﬂow, only
differences of sequence numbers matter.
2.1 Flows, Sampled Flows, and Likelihood
We consider a measurement interval containing Nf ﬂows. Let
mi denote the size of ﬂow i (the number of packets it contains). It
satisﬁes 1 ≤ mi ≤ W , where 1 ≤ W  k. By
deﬁnition B is a (column) stochastic matrix, that is each element
obeys bjk ≥ 0, and each column sums to unity.
The Sampling Experiment and its Outcome
The sampled ﬂow above includes the case, j = 0, where the ﬂow
‘evaporates’. It seems natural to conclude however that such cases
cannot be observed. This logically leads to an analysis based on
observations where j ≥ 1, which is effectively conditional: sample
ﬂow distributions given that at least one packet is sampled. This is
the approach adopted in [1, 4, 6] and in the literature generally. One
of the key differences in our work is that we show that it is possible
to observe the j = 0 case, leading to an unconditional formulation
which enjoys many advantages.
To see how this is possible we return to general context of Nf
ﬂows, each one of which will be sampled in this general sense.
Denote by N(cid:48)
f the number of ﬂows of size at least 1 after sampling.
The number of evaporated ﬂows is just Nf −N(cid:48)
f , but typically Nf is
not known and is regarded as a ‘nuisance parameter’ which must be
estimated. However, it can easily be measured by directly counting
the number of SYN packets, which equals the number of ﬂows.
For methods which are already assuming an ability to access and
perform speciﬁc actions based on whether a packet is a SYN or
not, accessing Nf is natural. It is also implementable, as a single
counter which conditionally increments based on a small number
of bits per packet is not difﬁcult even at the highest speeds [5].
In summary, by knowing Nf , every ﬂow gives rise to a sampled
ﬂow, each one of which is observable, either directly (j ≥ 1), or
indirectly (j = 0).
The chief advantage of the unconditional formulation is the very
simple form of the likelihood function for the experimental out-
come j for a single ﬂow. This makes the manipulation of the Fisher
information far more tractable, leading to new analytic results and
insights. The other big advantage is that ﬂow sampling can now
be included. In the conditional world ﬂow sampling is perfect -
by deﬁnition, if a ﬂow is sampled at all, all its packets will be and
(cid:80)W
θk > 0 for all k, is reasonable given the huge number of simulta-
neously active ﬂows (up to a million) in high end routers. There is
one more constraint, the equality constraint
k=1 θk = 1, which
must be included. As this complicates the Fisher information, we
ﬁrst deal with the unconstrained case.
The Unconstrained Fisher Information
The Fisher information is based on the likelihood and is deﬁned by
J((cid:126)θ) = E[(∇(cid:126)θ log f (j; (cid:126)θ))(∇(cid:126)θ log f (j; (cid:126)θ))T]
W(cid:88)
(∇(cid:126)θ log f (j; (cid:126)θ))(∇(cid:126)θ log f (j; (cid:126)θ))Tdj.
(cid:80)W
Here ∇(cid:126)θ log f (j; (cid:126)θ) = (1/dj)[bj1, . . . , bjW ]T because of the sim-
ple form (4) of the likelihood. This leads to the simple explicit
expression (J((cid:126)θ))ik =
, or equivalently
bjibjk
(5)
j=0
=
j=0
dj
dj =
bjkθk,
0 ≤ j ≤ W.
(2)
J((cid:126)θ) = BTD((cid:126)θ)B
(6)
so there is nothing to do! The unconditional framework allows the
missing part of the picture to be included, the fact that not all ﬂows
are sampled, enabling meaningful comparison.
The Sampled Flow Distribution
Our analysis is based on the idea of selecting a ‘typical’ ﬂow, and
that ﬂows are mutually independent (a reasonable assumption if
Nf is very large). Since ﬂows are in fact deterministic, this is only
meaningful if we introduce a supplementary random variable U,
a uniform over the Nf ﬂows available, which performs the ran-
dom ﬂow selection. This variable, which acts ‘invisibly’ behind
the scenes (and is rarely discussed), is not part of the random sam-
pling scheme itself, but is essential as it allows the (cid:126)θ parameters to
be treated as probabilities, even though they are not.
With this background established, the discrete distribution for a
sampled ﬂow originally of size k is very simple:
W(cid:88)
This can be expressed in matrix notation as
k=1
(cid:126)d = B(cid:126)θ
(3)
where (cid:126)d = [d1, d2, . . . , dW ]T is a (W + 1) × 1 column vector,
and (cid:126)θ a W × 1 column vector. The likelihood function for the
parameters is therefore simply
f (j; (cid:126)θ) = dj,
0 ≤ j ≤ W.
(4)
In the conditional framework commonly used j = 0 is missing,
and normalization is then needed to ensure probabilities add to one.
This implies a division of random variables, which greatly compli-
cates the likelihood.
2.2 The Fisher Information of a Sampled Flow
The parameter vector (cid:126)θ is the unknown we would like to estimate
from sampled ﬂows. Since here we are not concerned with speciﬁc
estimators of (cid:126)θ, but in the effectiveness of the underlying sampling
scheme, a powerful approach (introduced in [4]) is to use the Fisher
information [7] to access its efﬁciency in collecting information
about (cid:126)θ.
First some notation. Matrices are written in bold-face upper case
and vectors in bold-face lower case. The transpose of a matrix A
is denoted AT. The matrix In denotes the n × n identity matrix,
1n denotes an n × 1 vector such that 1n = [1, 1, ..., 1]T and 0n
denotes the n × 1 null vector. Given an n × 1 vector x, diag(x)
denotes an n × n matrix with diagonal entries x1, x2, . . . , xn and
zeros elsewhere.
DEFINITION 2.1. An n×n real matrix M is positive deﬁnite iff
for all vectors z ∈ Rn\{0n}, zTMz > 0, and is positive semidef-
inite iff zTMz ≥ 0.
For two matrices A and B, we write A > B to mean A − B > 0
in the positive deﬁnite sense. The operator | · | returns the size of a
vector or set.
The Fisher information is useful because its inverse is the Cramér
Rao lower bound (CRLB), which lower-bounds the variance of any
unbiased estimator of (cid:126)θ. In fact the Fisher information takes a dif-
ferent form depending on whether constraints are imposed on the
(cid:126)θ or not [8]. Inequality constraints are particularly problematic, so
we avoid them by assuming that each θj obeys 0 < θj < 1 (this en-
sures that the CRLB optimal solution cannot include boundary val-
ues, which would create bias and thereby invalidate the use of the
unbiased CRLB). Assuming that ﬂows exist for all sizes, i.e. that
where D((cid:126)θ) is a diagonal matrix with (D((cid:126)θ))jj = d
We will need to ﬁnd the inverse of J, but since B is not square,
this cannot be done naturally from (6) in terms of the inverse of B.
However if we re-express B as
−1
j−1.
(cid:183)
(cid:184)
B =
bT
0
˜B
b11
0
(7)
 ,
where bT
0 = [b01, . . . , b0W ] is the top row of B and
˜B =