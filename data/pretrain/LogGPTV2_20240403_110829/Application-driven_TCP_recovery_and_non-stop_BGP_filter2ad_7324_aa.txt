title:Application-driven TCP recovery and non-stop BGP
author:Robert Surton and
Ken Birman and
Robbert van Renesse
Application-Driven TCP Recovery
and Non-Stop BGP
Robert Surton, Ken Birman, and Robbert van Renesse
Department of Computer Science, Cornell University
Abstract—Some network protocols tie application state to
underlying TCP connections,
leading to unacceptable service
outages when an endpoint loses TCP state during fail-over or
migration. For example, BGP ties forwarding tables to its control
plane connections so that the failure of a BGP endpoint can lead
to widespread routing disruption, even if it recovers all of its state
but what was encapsulated by its TCP implementation. Although
techniques exist for recovering TCP state transparently, they
make assumptions that do not hold for applications such as BGP.
We introduce application-driven TCP recovery, a technique that
separates application recovery from TCP recovery. We evaluate
our prototype, TCPR, and show that it outperforms existing BGP
recovery techniques.
Keywords—TCP, fault
routing, Graceful Restart.
tolerance, middleware, BGP, non-stop
I.
INTRODUCTION
The state that deﬁnes a TCP connection is generally encap-
sulated within a network stack, while the usual socket interface
provides no mechanism for an application to checkpoint,
recover, or migrate that state. Unfortunately for an application
such as HTTP or BGP, written standards and legacy peers
prevent using a session layer to decouple application state
from connection state, so the network stack is a point of
vulnerability for the entire system.
In HTTP, for example, a client might submit a request
to a distributed web application in the cloud. If the request
modiﬁes application state, but the connection is reset, the client
can neither assume that the request was processed nor safely
resubmit it.
BGP is the protocol used by gateway routers to stitch the
Internet together out of smaller autonomous networks. Each
pair of neighboring routers maintains a TCP connection, which
they use to keep their routing tables in sync. between the BGP
routers that interconnect networks. If a router detects that one
of its connections has failed, it assumes that its link to that
neighbor has also failed, so it immediately withdraws all of its
affected routes—even if the neighbor immediately reconnects.
And once it does so, the new TCP connection cannot be used
to carry network updates or inform routing decisions until each
endpoint has transmitted its entire routing table. Meanwhile,
as network routing reconverges to accommodate the supposed
failure, which can take minutes, packet loss can increase 30-
fold due to transient routing loops and black holes [1], [2],
[3], [4].
This paper
introduces a new technique for
tolerating
connection failure, in the face of a network stack with no
interface to enable it, and legacy peers that preclude graceful
reconnection. We focus on BGP, because it challenges many
assumptions of prior work in the area, but our technique is
applicable to any use of TCP.
it
To understand how prior work could be effective for HTTP
is worth distinguishing between fault
but not for BGP,
masking and recovery [5]. Consider a technique in which a
backup network stack is kept synchronized with the primary,
used by the application. When the primary fails, the backup
replaces it. The fault has been masked, because the peer need
not be aware of the failover from primary to backup. However,
recovery has not taken place, because there is no longer a
backup, and a future fault will cause a failure.
Prior work handles recovery by starting a fresh copy of
the application, then replaying all of the peer’s input since the
connection was established. (Depending on how the particular
system deals with the network stack, the replay might be at
the application level or the packet level.) Under the assumption
that the application is fault-tolerant, the result is a valid backup
replica.
The beneﬁt of the replay-driven approach to recovery is
that the application can be treated as a black box, requiring no
modiﬁcations. However, not only does the approach assume
a deterministic application,
it also assumes that replay is
practical. The input to an HTTP server is usually a short
request. On the other hand, BGP connections persist for the
lifetime of a peering between two routers, and often carry
thousands of update messages per minute. Replaying such a
connection quickly becomes more burdensome than failure.
We introduce an application-driven approach. Our proto-
type, TCPR, is network middleware not unlike a NAT box,
which sends state gleaned from packets to the application, and
obeys the application to manipulate packets for recovery. By
accepting minor changes to the application, application-driven
recovery avoids the much greater burden of accepting re-
sponsibility for the application’s state. Furthermore, by giving
the application responsibility for checkpointing its connection
state along with its other state, we achieve a simple form of
application-driven recovery that is both lightweight and easy
to implement.
In addition to connection recovery, we also evaluate a stan-
dardized, BGP-speciﬁc approach to recovery called Graceful
Restart (GR). Because there are many reasons a connection
might close other than link failure, a router can enable GR for
a connection, informing its peer not to trigger reconvergence
immediately when the connection fails. Instead, the peer will
wait until a new connection is resynchronized and the link
is known to be down [6]. The time and update load to
resynchronize the connection is still necessary, but the routing
disruption is avoided.
978-1-4799-0181-4/13/$31.00 ©2013 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:58:18 UTC from IEEE Xplore.  Restrictions apply. 
SYN400
S Y N 3 0 0
( 4 0 1 )
401(301)
Fig. 1: A TCP connection begins with a SYN, SYN–ACK,
ACK handshake that establishes each endpoint’s initial se-
quence number.
Unfortunately, the assumption that the link survives can be
just as wrong as the assumption that the link fails. We introduce
a new approach to BGP analysis and use it to demonstrate
the inadequacy of GR, concluding that only true connection
recovery is sufﬁcient to protect the stability of the Internet.
II. DESIGN
We assume that we are given a fault-tolerant application
that can recover its own state, for example using checkpoints,
but depends on TCP connections that have inaccessible state
within a network stack. We will consistently refer to the
fault-tolerant application as the application, and to the remote
endpoints of its connections as its peers. We assume nothing
of the network stack, the application’s interface to it, or the
peers, other that what is speciﬁed by TCP [7].
A TCP connection consists of two independent streams of
bytes, one from the application to the peer and one in the
opposite direction. A TCP stream is reliable, in the sense that
each byte is delivered exactly once, in order. To that end, each
packet bears both a sequence number, indicating the position
of its ﬁrst data byte within its stream, and an acknowledgment,
indicating the next sequence number expected in the opposite
direction. An endpoint buffers each byte it sends, retransmit-
ting it as necessary, until it receives an acknowledgment with
a later sequence number.
When a connection is established, each endpoint chooses
an initial sequence number at random,
in order to avoid
confusion with packets that might still be in the network from
a previous connection between the same addresses. A packet
with the SYN ﬂag establishes a new stream and sets the initial
sequence number; for example, after the handshake in Figure 1,
the client’s ﬁrst data byte will have sequence number 401 (a
SYN counts as a byte sent), and the server’s ﬁrst data byte
will have sequence number 301. A packet too far in advance
of the expected sequence, or which bears a SYN ﬂag even
though the connection has already been established, will be
considered “unacceptable”.
TCP uses unacceptable packets to drive a non-transparent
form of connection recovery. If an endpoint with an established
connection receives an unacceptable packet, it replies with a
control packet, indicating the sequence number and acknowl-
edgment it thinks are current. However, if the connection is
SYN800
( 4 0 1 )
3 0 1
RST401
SYN800
S Y N 9 0 0
( 8 0 1 )
801(901)
Fig. 2: Continuing after Figure 1, the client fails and recon-
nects. Its SYN is unacceptable, so the server replies with an
empty packet. The reply is in turn unacceptable to the client,
which does not yet have a connection, so the client sends a RST
and the server deletes the state of the old connection. When the
client retransmits its SYN, they establish a new connection.
Application
TCPR
send
recv
Network stack
Fig. 3: TCPR is a packet ﬁlter interposed between the appli-
cation’s network stack and peers, which allows the application
to initiate connection recovery in a manner transparent to the
remote end-point.
not established, the endpoint replies by acknowledging the
unacceptable sequence number with the RST ﬂag, notifying
the remote endpoint and causing it to abort its connection. If
a recovering client attempts to reconnect, the connection will
recover as shown in Figure 2. The outcome is that the old
connection is aborted, and the two endpoints establish a new
one.
We build on TCP’s notion of recovery, and make it trans-
parent by interposing middleware between the application’s
network stack and peers, as shown in Figure 3. The middlebox,
TCPR, communicates with the application both implicitly,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:58:18 UTC from IEEE Xplore.  Restrictions apply. 
TCPR
SYN 800
( 8 0 1 )
S Y N 3 0 0
801 (301)
401(301)
Fig. 4: TCPR tracks acknowledgments, so that it can imme-
diately answer a recovery SYN. If the client from Figure 2
were an application using TCPR, TCPR would establish a new
connection locally and splice it back to the original, so neither
network stack is aware of the recovery.
through the behavior of the network stack, and directly, through
a side channel. TCPR maintains state for each connection, of
which the application also maintains a copy; the side channel
exists to synchronize those copies of the connection state.
From TCPR’s perspective, an application is just a side
channel and a set of connections whose packets can be manip-
ulated; without loss of generality, we will discuss how TCPR
enables a single process to protect a single connection. Our
goal for TCPR is to enable recovery with the simplest possible
middlebox and the least burden on the application, in terms of
code modiﬁcation, per-connection state, communication on the
side channel, and overhead versus unprotected TCP.
A. Resynchronizing
As before, the application signals its desire to recover when
its network stack sends a SYN in the middle of an established
connection. Rather than revealing recovery to the peer, TCPR
intercepts the SYN and establishes a new connection locally,
as shown in Figure 4.
As with any new connection, the application’s network
stack chooses an initial sequence number in a manner delib-
erately designed to be unacceptable to old peers. In order to
splice the new and old connections back together, TCPR’s per-
connection state includes the application’s and peer’s acknowl-
edgments, ack and peer ack respectively.
By deﬁnition, the peer expects that peer ack will be the
next sequence number it receives. Suppose the new connection
begins from some other value, seq. TCPR computes ∆ = seq−
peer ack, and for the life of the new connection, subtracts
∆ from the application’s sequence numbers, and adds ∆ to
the peer’s acknowledgments. Thus, translation occurs through
small header modiﬁcations on packets in ﬂight, much as a
network address translator remaps addresses and ports.
The opposite stream is simpler to resynchronize. TCPR
chooses its initial sequence number as ack − 1 (recall that
the SYN ﬂag implicitly occupies a byte), so that the new
connection expects the peer to continue from ack just as before.
However, TCP’s reliability depends not only on sequence
numbers, but on the send and receive buffers at each endpoint,
which enable data to be retransmitted until it is safe at the
remote endpoint. If the application migrates to a new machine
or its network stack loses its state, the lost buffers must be
recovered.
B. Recovering the Send Buffer
When an application calls send, success only indicates
that the argument has been copied into the send buffer in the
network stack. Should the send buffer be lost, some of its
contents might not yet have been sent, or might be dropped in
the network. Outside the network stack, only the application
itself knows what it intended to send, so TCPR depends on it
to replay what might be lost.
The application can use TCPR to learn how much of its
output is safe at any time, and this information is necessary
after resynchronization in order to know what to re-send. To
do so, the application requests the latest state from TCPR,
which includes peer ack. To translate from sequence numbers
to total bytes sent since an arbitrary checkpoint, the application
can simply subtract the value of peer ack from that checkpoint.
Note that unacknowledged data is not necessarily lost.
Some might have been delivered to the peer, although no
acknowledgment had arrived by the moment at which the
network stack lost its state. Thus, the application must repeat
whatever it sent the ﬁrst time. Generating all output determin-
istically is sufﬁcient, but isn’t necessary. For example, it is
also sufﬁcient for the application to checkpoint any data it is
preparing to send, so that it recovers not only the old value of
peer ack, but at least enough buffered data to recover. Beyond
that point, the application’s output is unconstrained. On the
other hand, a deterministic application does not need a buffer.
TCPR enables the most efﬁcient choice based on specialized
knowledge about each connection.
C. Recovering the Receive Buffer
When data arrives from the peer, the application’s network
stack buffers it until the application consumes it using recv.
The TCP standard considers such data safe to acknowledge
immediately; once acknowledged, the remote peer will remove
it from its send buffer. However, the application might not
yet have invoked recv and obtained the data,
let alone
checkpointed it. Accordingly, TCPR intercepts and modiﬁes
TCP acknowledgments to ensure that unsafe data will not be
acknowledged, relying on the recoverable application to tell
TCPR when received data is safely checkpointed. Delayed
acknowledgments were introduced with FT-TCP [8], which
acknowledges packets only after it has checkpointed them into
a “stable buffer”, all hidden from the application. Putting the
application in charge enables more ﬂexibility; for example,
the application could checkpoint raw input immediately, or
process whole application-layer messages and checkpoint the
resulting state changes—if some input causes no signiﬁcant
state changes, the application could acknowledge it without
waiting for a checkpoint at all.
Delaying an acknowledgment can inﬂate the peer’s estimate
of the round-trip time of the connection. However most TCP
implementations already delay acknowledgments by up to
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:58:18 UTC from IEEE Xplore.  Restrictions apply. 
500 ms to conserve bandwidth and prevent “silly window
syndrome” [9]. Zagorodnov et al. [8] evaluated a variety
of strategies for generating delayed acknowledgments from
an advancing checkpoint; TCPR uses the strategy they call
“Delayed”, which provides the best throughput for the fewest
packets.
By putting the application itself in charge of its acknowl-
edgments, TCPR lifts the end-to-end argument [10] for TCP’s
reliability from the host level to the application level.
D. Handling Options
TCPR supports the most common TCP options. The TCP
standard leaves up to 20 bytes in the TCP header for such
options, and speciﬁes three that all implementations must sup-
port (many more have subsequently been proposed). The three
standard options are No-Operation, End of Option List, and
Maximum Segment Size. The ﬁrst two are used to manipulate
padding, so they have no impact on a connection’s state. An
endpoint may advertise Maximum Segment Size with its SYN
packet to negotiate a packet size that avoids IP fragmentation.
TCPR simply passes the value through, and records it to ensure