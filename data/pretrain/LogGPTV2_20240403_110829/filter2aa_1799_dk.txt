play readable provider names instead of their GUIDs.
I 
The Trace Decode Helper Library consults the key to retrieve the provider’s binary file, parse its
resource section, and read the binary content of the events descriptor.
After the event descriptor is obtained, the Trace Decode Helper Library gains all the needed infor-
mation for decoding the event (by parsing the binary descriptor) and allows consumer applications 
to use the TdhGetEventInformation API to retrieve all the fields that compose the event’s payload and 
the correct interpretation the data associated with them. TDH follows a similar procedure for MOF and 
WPP providers (while TraceLogging incorporates all the decoding data in the event payload, which fol-
lows a standard binary format).
Note that all events are natively stored by ETW in an ETL log file, which has a well-defined uncom-
pressed binary format and does not contain event decoding information. This means that if an ETL file 
is opened by another system that has not acquired the trace, there is a good probability that it will not 
be able to decode the events. To overcome these issues, the Event Viewer uses another binary format: 
514 
CHAPTER 10 Management, diagnostics, and tracing
EVTX. This format includes all the events and their decoding information and can be easily parsed by 
any application. An application can use the EvtExportLog Windows Event Log API to save the events 
included in an ETL file with their decoding information in an EVTX file.
EXPERIMENT: Decoding an ETL file
Windows has multiple tools that use the EvtExportLog API to automatically convert an ETL log file 
and include all the decoding information. In this experiment, you use netsh.exe, but TraceRpt.exe 
also works well: 
1.
Open a command prompt and move to the folder where the ETL file produced by the
previous experiment (“Listing processes activity using ETW”) resides and insert
netsh trace convert input=process_trace.etl output=process_trace.txt dump=txt
overwrite=yes
2.
where process_trace.etl is the name of the input log file, and process_trace.
txt file is the name of the output decoded text file.
3.
If you open the text file, you will find all the decoded events (one for each line) with a
description, like the following:
[2]1B0C.1154::2020-05-01 12:00:42.075601200 [Microsoft-Windows-Kernel-Process]
Process 1808 started at time  2020 - 05 - 01T19:00:42.075562700Z by parent 6924
running in session 1 with name \Device\HarddiskVolume4\Windows\System32\notepad.
exe.
4.
From the log, you will find that rarely some events are not decoded completely or do
not contain any description. This is because the provider manifest does not include the
needed information (a good example is given from the ThreadWorkOnBehalfUpdate
event). You can get rid of those events by acquiring a trace that does not include their
keyword. The event keyword is stored in the CSV or EVTX file.
5.
Use netsh.exe to produce an EVTX file with the following command:
netsh trace convert input=process_trace.etl output=process_trace.evtx dump=evtx
overwrite=yes
6.
Open the Event Viewer. On the console tree located in the left side of the window,
right-click the Event Viewer (Local) root node and select Open Saved Logs. Choose the
just-created process_trace.evtx file and click Open.
7. 
In the Open Saved Log window, you should give the log a name and select a folder
to display it. (The example accepted the default name, process_trace and the default
Saved Logs folder.)
EXPERIMENT: Decoding an ETL file
Windows has multiple tools that use the EvtExportLog API to automatically convert an ETL log file 
and include all the decoding information. In this experiment, you use netsh.exe, but TraceRpt.exe 
also works well: 
1.
Open a command prompt and move to the folder where the ETL file produced by the 
previous experiment (“Listing processes activity using ETW”) resides and insert 
netsh trace convert input=process_trace.etl output=process_trace.txt dump=txt 
overwrite=yes
2.
where process_trace.etl is the name of the input log file, and process_trace.
txt file is the name of the output decoded text file. 
3.
If you open the text file, you will find all the decoded events (one for each line) with a 
description, like the following:
[2]1B0C.1154::2020-05-01 12:00:42.075601200 [Microsoft-Windows-Kernel-Process]
Process 1808 started at time  2020 - 05 - 01T19:00:42.075562700Z by parent 6924 
running in session 1 with name \Device\HarddiskVolume4\Windows\System32\notepad.
exe.
4.
From the log, you will find that rarely some events are not decoded completely or do 
not contain any description. This is because the provider manifest does not include the 
needed information (a good example is given from the ThreadWorkOnBehalfUpdate 
event). You can get rid of those events by acquiring a trace that does not include their 
keyword. The event keyword is stored in the CSV or EVTX file. 
5.
Use netsh.exe to produce an EVTX file with the following command:
netsh trace convert input=process_trace.etl output=process_trace.evtx dump=evtx 
overwrite=yes
6.
Open the Event Viewer. On the console tree located in the left side of the window, 
right-click the Event Viewer (Local) root node and select Open Saved Logs. Choose the 
just-created process_trace.evtx file and click Open. 
7.
In the Open Saved Log window, you should give the log a name and select a folder 
to display it. (The example accepted the default name, process_trace and the default 
Saved Logs folder.) 
CHAPTER 10 Management, diagnostics, and tracing
515
8.
The Event Viewer should now display each event located in the log file. Click the Date
and Time column for ordering the events by Date and Time in ascending order (from
the oldest one to the newest). Search for ProcessStart with Ctrl+F to find the event indi-
cating the Notepad.exe process creation:
9.
The ThreadWorkOnBehalfUpdate event, which has no human-readable description,
causes too much noise, and you should get rid of it from the trace. If you click one of
those events and open the Details tab, in the System node, you will find that the event
belongs to the WINEVENT_KEYWORD_ WORK_ON_BEHALF category, which has a key-
word bitmask set to 0x8000000000002000. (Keep in mind that the highest 16 bits of the
keywords are reserved for Microsoft-defined categories.) The bitwise NOT operation of
the 0x8000000000002000 64-bit value is 0x7FFFFFFFFFFFDFFF.
10. Close the Event Viewer and capture another trace with XPERF by using the following
command:
xperf -start TestSession -on Microsoft-Windows-Kernel-Process:0x7FFFFFFFFFFFDFFF
-f c:\process_trace.etl
11. Open Notepad or some other application and stop the trace as explained in the
“Listing processes activity using ETW” experiment. Convert the ETL file to an EVTX.
This time, the obtained decoded log should be smaller in size, and it does not contain
ThreadWorkOnBehalfUpdate events.
8.
The Event Viewer should now display each event located in the log file. Click the Date 
and Time column for ordering the events by Date and Time in ascending order (from 
the oldest one to the newest). Search for ProcessStart with Ctrl+F to find the event indi-
cating the Notepad.exe process creation:
9.
The ThreadWorkOnBehalfUpdate event, which has no human-readable description, 
causes too much noise, and you should get rid of it from the trace. If you click one of 
those events and open the Details tab, in the System node, you will find that the event 
belongs to the WINEVENT_KEYWORD_ WORK_ON_BEHALF category, which has a key-
word bitmask set to 0x8000000000002000. (Keep in mind that the highest 16 bits of the 
keywords are reserved for Microsoft-defined categories.) The bitwise NOT operation of 
the 0x8000000000002000 64-bit value is 0x7FFFFFFFFFFFDFFF. 
10. Close the Event Viewer and capture another trace with XPERF by using the following 
command:
xperf -start TestSession -on Microsoft-Windows-Kernel-Process:0x7FFFFFFFFFFFDFFF 
-f c:\process_trace.etl
11. Open Notepad or some other application and stop the trace as explained in the 
“Listing processes activity using ETW” experiment. Convert the ETL file to an EVTX. 
This time, the obtained decoded log should be smaller in size, and it does not contain 
ThreadWorkOnBehalfUpdate events.
516 
CHAPTER 10 Management, diagnostics, and tracing
System loggers 
What we have described so far is how normal ETW sessions and providers work. Since Windows XP, 
ETW has supported the concepts of system loggers, which allow the NT kernel to globally emit log 
events that are not tied to any provider and are generally used for performance measurements. At 
the time of this writing, there are two main system loggers available, which are represented by the NT 
kernel logger and Circular Kernel Context Logger (while the Global logger is a subset of the NT kernel 
logger). The NT kernel supports a maximum of eight system logger sessions. Every session that receives 
events from a system logger is considered a system session. 
To start a system session, an application makes use of the StartTrace API, but it specifies the EVENT_
TRACE_SYSTEM_LOGGER_MODE flag or the GUID of a system logger session as input parameters. 
Table 10-16 lists the system logger with their GUIDs. The EtwpStartLogger function in the NT kernel 
recognizes the flag or the special GUIDs and performs an additional check against the NT kernel log-
ger security descriptor, requesting the TRACELOG_GUID_ENABLE access right on behalf of the caller 
process access token. If the check passes, ETW calculates a system logger index and updates both the 
logger group mask and the system global performance group mask. 
TABLE 10-16 System loggers
INDEX
Name
GUID
Symbol
0
NT kernel logger
{9e814aad-3204-11d2-9a82-006008a86939}
SystemTraceControlGuid
1
Global logger
{e8908abc-aa84-11d2-9a93-00805f85d7c6}
GlobalLoggerGuid
2
Circular Kernel Context Logger
{54dea73a-ed1f-42a4-af71-3e63d056f174}
CKCLGuid
The last step is the key that drives system loggers. Multiple low-level system functions, which can 
run at a high IRQL (the Context Swapper is a good example), analyzes the performance group mask 
and decides whether to write an event to the system logger. A controller application can enable or 
disable different events logged by a system logger by modifying the EnableFlags bit mask used by the 
StartTrace API and ControlTrace API. The events logged by a system logger are stored internally in the 
global performance group mask in a well-defined order. The mask is composed of an array of eight 32-
bit values. Each index in the array represents a set of events. System event sets (also called Groups) can 
be enumerated using the Xperf tool. Table 10-17 lists the system logger events and the classification in 
their groups. Most of the system logger events are documented at https://docs.microsoft.com/en-us/
windows/win32/api/evntrace/ns-evntrace-event_trace_properties.
CHAPTER 10 Management, diagnostics, and tracing
517
TABLE 10-17 System logger events (kernel flags) and their group
Name
Description
Group
ALL_FAULTS
All page faults including hard, copy-on-write, demand-
zero faults, and so on
None
ALPC
Advanced Local Procedure Call
None
CACHE_FLUSH
Cache flush events
None
CC
Cache manager events
None
CLOCKINT
Clock interrupt events
None
COMPACT_CSWITCH
Compact context switch
Diag
CONTMEMGEN
Contiguous memory generation
None
CPU_CONFIG
NUMA topology, processor group, and processor index
None
CSWITCH
Context switch
IOTrace
DEBUG_EVENTS
Debugger scheduling events
None
DISK_IO
Disk I/O
All except SysProf, ReferenceSet, 
and Network
DISK_IO_INIT
Disk I/O initiation
None
DISPATCHER
CPU scheduler
None
DPC
DPC events
Diag, DiagEasy, and Latency
DPC_QUEUE
DPC queue events
None
DRIVERS
Driver events
None
FILE_IO
File system operation end times and results
FileIO
FILE_IO_INIT
File system operation (create/open/close/read/write)
FileIO
FILENAME
FileName (e.g., FileName create/delete/rundown)
None
FLT_FASTIO
Minifilter fastio callback completion
None
FLT_IO
Minifilter callback completion
None
FLT_IO_FAILURE
Minifilter callback completion with failure
None
FLT_IO_INIT
Minifilter callback initiation
None
FOOTPRINT
Support footprint analysis
ReferenceSet
HARD_FAULTS
Hard page faults
All except SysProf and Network
HIBERRUNDOWN
Rundown(s) during hibernate
None
IDLE_STATES
CPU idle states
None
INTERRUPT
Interrupt events
Diag, DiagEasy, and Latency
INTERRUPT_STEER
Interrupt steering events
Diag, DiagEasy, and Latency
IPI
Inter-processor interrupt events
None
KE_CLOCK
Clock configuration events
None
KQUEUE
Kernel queue enqueue/dequeue
None
LOADER
Kernel and user mode image load/unload events
Base
518 
CHAPTER 10 Management, diagnostics, and tracing
Name
Description
Group
MEMINFO
Memory list info
Base, ResidentSet, and 
ReferenceSet