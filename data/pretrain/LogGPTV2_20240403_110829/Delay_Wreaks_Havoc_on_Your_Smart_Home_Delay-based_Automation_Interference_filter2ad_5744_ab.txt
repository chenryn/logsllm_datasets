using both device states and time to define rule conditions,
Philips Hue only allows the usage of time in conditions, and
Amazon Alexa only supports trigger-action rules.
B. Inferring Home Configuration from Encrypted Traffic
Recent work has illustrated the effectiveness of inferring
smart home configuration information (i.e., device types,
automation apps,
the app-device bindings, etc.) from en-
crypted network traffic. Side-channel attacks can utilize the
metadata in the traffic, such as source/destination IP/MAC
addresses, DNS, packet lengths, frequencies, etc., to identify
device information (e.g., manufacturer, model) [18], [19], [20],
[21], [22], [23], [24] and recognize events/commands in real
time [25], [26], [27], [28], [29], [30]. By analyzing a sequence
of accurately-recognized IoT events/commands, routines and
automation rules can also be inferred [26], [31], [32], [30].
For instance, the device identification [18] and [19] achieve an
accuracy of 0.91 and 0.81, respectively. The average accuracy
for inferring events [29] is 0.97. The precision and F1 score
for inferring automation rules [26] are 1 and 0.96, respectively.
This work utilizes side-channel attacks to infer smart home
configuration information and build attacks.
C. Selective Event/Command Delaying
In smart home systems, most communication paths (see
Fig. 2) between an IoT device/hub and a platform go through
a home router.3 On IP/TCP links, events and commands are
typically transmitted using the SSL/TLS protocol, which runs
on top of the transport layer. Each pair of an IoT device/hub
and a cloud establishes a unique TLS session. IoT events and
commands are conveyed in a specific type of TLS record, i.e.,
Application record, whose type field in header is “0x17”.
Although TLS provides the confidentiality and order-
preserving features, neither TLS nor the upper application-
layer protocols used by smart home systems, such as HTTP
3An exception is the communication between non-IP devices and a local
platform ( 6 ).
and MQTT, have a strict liveness checking on messages. IoT
devices and clouds usually exchange TLS-protected heartbeat
(a.k.a., keep-alive) messages periodically. If an IoT device/-
cloud cannot receive a heartbeart request/reply or an event/-
command ack from the other side within a pre-defined time
period (usually tens of seconds; see Section V-B),
i.e., a
timeout occurs, it will actively disconnect the TCP connection
and try to reconnect. If an attacker succeeds in performing
a TCP hijacking attack (see Section II-D) between an IoT
device/hub and a platform, he can establish a TCP connection
with each side, becoming a relay node in the middle. Although
the MITM attacker cannot decrypt TLS-protected messages, he
can delay forwarding the messages. Delaying messages cannot
be detected by the IoT protocol stack as long as it does not
trigger a timeout. An attacker can recognize IoT events and
commands from the encrypted packets through side-channel
analysis (Section II-B) and selectively delay a specific event
or command, which is referred to as two attack primitives:
selective event delaying and selective command delaying. Our
prior work [16] discussed the two attack primitives in detail.
In this paper, we use the two primitives as a building block.
D. Attack Model
Who Can Launch the Attacks? We are concerned with an
attacker who can eavesdrop and delay the encrypted traffic
between IoT devices/hubs and the IoT cloud/local platforms.
For example, he can compromise the WiFi router in the victim
home, or perform ARP spoofing attacks [33], [34] from a
local IoT device (e.g., compromised by Mirai attacks [35],
[36]). When the attacker and the victim share a WiFi (e.g.,
at a company, hospital, or facility campus),
the attacker
can launch sniffing and ARP spoofing from his own device
conveniently. If an attacker has compromised an ISP router, he
can launch attacks at scale against many homes that use cloud-
based platforms. Through the attack, the attacker obtains two
capabilities: (1) passively analyzing traffic; and (2) actively
delaying events/commands.
Passive Observation. For this purpose, sniffing attacks are
sufficient (i.e., TCP hijacking is not needed). Specifically, the
attacker has access to headers of the data link, network and
transport layers (such as device MAC addresses, IP addresses
and ports), and the type and length of TLS records. The
attacker utilizes the techniques discussed in Section II-B to
obtain knowledge of the victim home and recognize events/-
commands from the traffic.
Active Delaying. The attacker selectively delays events/com-
mands transmitted over a hijacked TCP session. To evade
detection, the attacker does not discard any events/commands
or delay them for an excessive period. The delay range
(without being detected) depends on the type of IoT devices
and platforms (more details are given in Table IV).
III. EVENT/COMMAND DISORDER AND INCONSISTENCY
In a smart home where all IoT devices use the same TCP/IP
communication path to exchange events and commands with
a single platform, as shown in Fig. 3, two properties hold:
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
3287
Fig. 3: Single-platform single-path device connection.
Fig. 4: Single-platform multi-path device connection.
• Same Order. All events arrive at the IoT platform in the
same order as they arrived at the hub. This holds for all
events that are transmitted on the same TLS session (i.e.,
the hub-platform path), as each TLS record includes a
Message Authentication Code that checks data integrity and
the sequence number [37]. Likewise, a command sent earlier
by the platform arrives at the hub earlier.
• Consistency. The executions of all automation rules are
based on a consistent observation about the smart home,
because the same database maintained by the platform is
queried for data (e.g., device states, home mode, etc.).
Although existing research on CRI [38], [39], [6], [7], [8],
[26], [9], [40], [5] considers or implicitly assumes the single-
platform single-path (SPSP) deployment model, it does not
reflect the reality. Over time, users may purchase a variety
of IoT devices and connect them with multiple platforms.
Therefore, the following two deployment models are common
in reality: the single-platform multi-path (SPMP) model and
the multi-platform (MP) model. According to our online
survey (see Appendix A for details) including 85 realistic
smart homes, SPSP, SPMP and MP deployments account for
17.6%, 20.0% and 62.4%, respectively.
A. Single-Platform Multi-Path: Disorder
When IoT devices use multiple TCP/IP paths to exchange
messages with a platform, the same order property will not
hold true. Fig. 4 shows an example. Assuming that device A’s
transmission path (i.e., the TLS between device A and the
platform) is delayed, even if events from A are generated
earlier, its events may arrive at the platform later than those
of device B. We refer to this issue as a disorder. Note that this
issue could also happen to commands.
B. Multi-Platform: Disorder and Inconsistency
In multi-platform systems, there exist multiple TCP/IP paths
between IoT devices and platforms. Therefore, the disorder
issue certainly exists. Plus, when an IoT device is connected
to two or more platforms, the platforms may have different
observations on the same device’s state. This is because a
new event from the device may have different delays when
transmitted to the platforms (via different paths). As shown
in Fig. 5, a WeMo smart plug communicates with the WeMo
cloud (a.k.a., an endpoint cloud) through the Internet, and talks
in the local area network with a HomePod that hosts HomeKit
or with a SmartThings hub which forwards communication
Fig. 5: WeMo smart plug connected to three platforms: WeMo,
SmartThings, and HomeKit.
to the SmartThings cloud. Thus, the WeMo smart plug uses
three different paths to connect with the three platforms. The
transmission delays could create a time window, during which
platforms have inconsistent observations on the state of the
plug (i.e., ON/OFF). We refer to this issue as inconsistency.
In non-adversarial scenarios where the network delays are
usually small, e.g., less than one second, the disorder and
inconsistency issues are not severe. However, in the presence
of an attacker who intentionally delays events/commands, the
disorder and inconsistency issues may be manipulated by the
attacker to cause serious security and safety threats to a smart
home (e.g., leaving the front door unlocked when the owners
are not home), and this is discussed in Section IV.
IV. DELAY-BASED AUTOMATION INTERFERENCE ATTACKS
We consider an attacker who launches selective event/com-
mand delaying attacks to cause disorder and inconsistency
issues in order to interfere with home automation, leading
to incorrect, unexpected, and hazardous automation. These
attacks are collectively referred to as Delay-based Automation
Interference (DAI) attacks. Different from the well-studied
cross-rule interference problems (e.g., [5], [6], [7], [9]) due
to mis-programming or mis-configuration, DAI attacks ex-
ploit CRI problems in SPMP and MP systems that cannot
be detected by existing work. To systematically study and
categorize of DAI attacks, we use a formal approach process
calculus [41], [42] to model smart home deployments and
extend a notion of observation equivalence for identifying CRI
problems in a smart home. With the theoretic basis, we param-
eterize the configurations (including the message-transmission
delay) of a smart home system and enumerate the possible
configurations as well as the attacker’s strategies to find all
possible DAI attacks. Due to the page limits, we briefly present
the basic idea of the utilization of observation equivalence in
Section IV-A, and defer the complete formalization part to
Appendices B and C. The rest of this section is focused on
presenting the discovered attacks.
A. CRI Resistance Modeling
A smart home’s physical environment is denoted as E, and it
has two automation rules R1 and R2 that run on two platforms
L1 and L2, respectively (L1 and L2 may refer to the same or
different platforms). We use Sys = E◦(R1[D1 ▷L1]∥ R2[D2 ▷
L2]) to denote this smart home system, where D1 and D2
are the sets of devices involved in R1 and R2, respectively.
Communication paths between devices and platforms in Sys
suffer from delay attacks. Suppose a specification system
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
4288
Room
Garage
Kitchen
Living
Room
Bedroom
RID
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
Rule description (Format: When [trigger], if [condition], [action])
When the hall door is closed, if away mode, close garage door and set home mode. (arriving)
When the away button is pressed, set to away mode. (leaving)
When the hall door is closed, if home mode, open the garage door. (leaving)
When the car leaves, if away mode, close the garage door.
When the garage door is closed, if away mode, lock the front door and hall door.
When the user arrives, unlock the front door.
When the front door is unlocked, turn on the indoor camera.
When the front door is opened, if away mode, turn on all smart plugs.
When cook time (12pm, 7pm), if motion is active, turn on the heater in the kitchen.
When power high, if motion is inactive, turn off smart plug (that connects kettle, heater, etc.).
When door is unlocked, if the user is away, sound the alarm and call the police.
When motion is detected, turn on the humidifier and TV.
When the luminance drops below 20 lux, if motion is active, turn on the lights.
When the luminance exceeds 20 lux, if motion is inactive, turn off the lights.
When motion is detected, if user is at home, turn off camera.
When motion is detected, if user is away, ring alarm and send live video to security company.
When motion is detected, turn on the ceiling lamp.
When motion is detected, if luminance is below 20 lux, turn on the floor lamp.
Fig. 6: A smart home illustrating part of the deployed IoT devices and automation rules.
Sys∗ = E ◦ (R1[D1 ▷ L∗]∥ R2[D2 ▷ L∗]), where all devices
D1 ∪ D2 are connected to an oracle platform L∗, both rules
R1 and R2 run on L∗, and all its communication paths incur
identical delays. That is, Sys∗ runs the same rules and devices
in the same environment as Sys but suffers no DAI attacks.
Observation equivalence is a property that two or more
concurrent systems are indistinguishable regarding their ob-
servable implications (e.g., the states of sensors and actuators).
Therefore, if the real system Sys (with DAI attacks) and
specification system Sys∗ (without DAI attacks) are obser-
vationally equivalent while they evolve, i.e., the automation
results (resultant device states) are always the same no matter
how rules are triggered the same way in both systems, we say
that the two automation rules R1 and R2 in the deployment
Sys are CRI-resistant to DAI attacks. With this notion, we
not only can verify if rules are CRI-resistant after formalizing
a given smart home deployment, but also find all possible
types of DAI attacks by traversing different attack strategies
(i.e., which communication paths to delay). Due to the page
limit, we defer full details of the formal modeling, and the
methodology for observation equivalence analysis and DAI
attack categorization, to Appendices B and C, respectively.
B. An Example Smart Home
To help present DAI attacks, we first describe an example
smart home with multiple IoT devices and automation rules
deployed, as shown in Fig. 6. Regarding Rules 1-3, note
that whether a person enters or leaves, the resulting door
event sequence is the same (e.g., “unlocked → open →
closed → locked”), and therefore cannot be used to infer
whether the homeowner enters or leaves the home; to distin-
guish arriving/leaving behaviors, a mode with possible values,
such as home and away, can be set by the user manually
(like using a mobile companion app or an ADT system [43])
or automatically (based on a presence sensor or automation),
which then can be used to, e.g., open/close the garage door
correctly. The example will be used to present the new DAI
attacks in a more concrete fashion.
C. DAI Attacks
We summarize seven types of DAI attacks in Table I. For
each type, Table I lists the attack name, the section interpreting
Fig. 7: Condition overlapping attack. The conditions of Rules i and
j are satisfied when the device state is 0 and 1, respectively. Here, 0
and 1 broadly denote the values of a binary attribute, e.g., inactive
and active of a motion sensor.
Fig. 8: A scenario of condition overlapping attack (action conflict).
it, the rule pattern describing the attack, the message(s) that
should be delayed, the issue exploited and the consequence.
1) Condition Overlapping Attack: Existing works [6], [7],
[9], [10], [5], [11], [12], [13] assume that rules do not run
simultaneously if their conditions are exclusive, (e.g., “if
motion sensor is active” vs. “if motion sensor is inactive”). As
shown in Fig. 7, suppose the conditions of Rules i and j check
the state of a device, and this device has two possible states
0 and 1. When there are no attacks, the condition-satisfaction
period during which Rule i’s condition (e.g., “if the state is 0”)
is satisfied has no overlap with that of Rule j, (e.g., “if the state
is 1”). However, if Rules i and j run on two different platforms
A and B, respectively, by delaying the arrival of event 1 on
platform A and/or the arrival of event 0 on platform B (see
Fig. 7), the condition-satisfaction periods of the two rules will
have overlaps. As a result, if both rules are triggered during
the overlapping period, they will be executed during the same
period, violating the expectation that they are mutually ex-
clusive. We collectively define condition-overlapping attacks
(COA) as attacks that exploit inconsistency issues to cause
rules with exclusive conditions to run simultaneously. Under
this attack, rules that are considered interference-free by prior
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:33:31 UTC from IEEE Xplore.  Restrictions apply. 
5289
TABLE I: Summary of DAI attacks. The DAI attacks are derived from a systematic categorization show in Appendix C. The Rule Pattern
column shows the pattern of victim rules targeted by each DAI attack. Ri = (Ti, Ci, Ai), i = 1, 2 denotes two victim rules, where Ti,
Ci, Ai are the trigger, condition, and action, respectively. ⊥ denotes “mutually exclusive”; ∧ denotes “overlaps”; ¬ denotes that “mutually
contradictory”; ⇒ and ⇏ denotes “enables” and “disables”, respectively; <≈ denotes “is close but precedent to”; ⊣ denotes “requires”; ⊎
denotes “guarded by”.
Attack
(1) Condition Overlapping Attack (COA)
(1.1) COA - Action Conflict
(1.2) COA - Infinite Loop
(1.3) COA - Chained Execution
(2) Trigger-Cond. Overlapping Attack
(3) Condition Diverging Attack (CDA)
(3.1) CDA - Disabled Parallel Execution
(3.2) CDA - Disabled Chained Execution
(4) Action Disordering Attack
(5) Condition Disabling Attack
(6) Condition Enabling Attack
(7) Action Delaying Attack (ADA)
Section #
IV-C1
IV-C2
IV-C3
IV-C4
IV-C5
IV-C6
IV-C7