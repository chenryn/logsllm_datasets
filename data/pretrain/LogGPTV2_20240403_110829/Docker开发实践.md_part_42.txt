### Docker API操作指南

#### 1. 创建容器
- **方法**: `POST /containers/create`
- **请求示例**:
  ```sh
  $ curl -X POST -H "Content-Type: application/json" http://localhost:2376/containers/create -d '{
    "Hostname": "",
    ...
  }'
  ```
- **状态码**:
  - `201`: 创建成功。
  - `404`: 无该容器。
  - `406`: 容器不能附加为终端（容器已经停止）。
  - `500`: 服务器错误。

#### 2. 查看容器信息
- **方法**: `GET /containers/(id)/json`
- **请求示例**:
  ```sh
  GET /containers/4fa6e0f0c678/json HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 200 OK
  Content-Type: application/json
  {
    "Id": "4fa6e0f0c6786287e131c3852c58a2e01cc697a68231826813597e4994f1d6e2",
    "Created": "2013-05-07T14:51:42.041847+02:00",
    "Path": "date",
    "Args": [],
    ...
  }
  ```
- **状态码**:
  - `200`: 返回正常。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X GET http://localhost:2376/containers/4fa6e0f0c678/json
  ```

#### 3. 查看容器正在运行的进程
- **方法**: `GET /containers/(id)/top`
- **请求示例**:
  ```sh
  GET /containers/4fa6e0f0c678/top HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 200 OK
  Content-Type: application/json
  {
    "Titles":[
      "USER",
      "PID",
      "%CPU",
      "%MEM",
      "VSZ",
      "RSS",
      "TTY",
      "STAT",
      "START",
      "TIME",
      "COMMAND"
    ],
    "Processes":[
      ["root","20147","0.0","0.1","18060","1864","pts/4","S","10:06","0:00","bash"],
      ["root","20271","0.0","0.0","4312","352","pts/4","S+","10:07","0:00","sleep","10"]
    ]
  }
  ```
- **参数**:
  - `ps_arg`: ps命令的参数。
- **状态码**:
  - `200`: 返回正常。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X GET http://localhost:2376/containers/4fa6e0f0c678/top
  ```

#### 4. 获取容器日志
- **方法**: `GET /containers/(id)/logs`
- **请求示例**:
  ```sh
  GET /containers/4fa6e0f0c678/logs?stderr=1&stdout=1&timestamps=1&follow=1&tail=10 HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 200 OK
  Content-Type: application/vnd.docker.raw-stream
  {{ STREAM }}
  ```
- **参数**:
  - `follow`: 流式返回，默认值为`false`。
  - `stdout`: 显示标准输出，默认值为`false`。
  - `stderr`: 显示标准错误输出，默认值为`false`。
  - `timestamps`: 打印日志时间戳。
  - `tail`: 只打印末尾的N行。
- **状态码**:
  - `200`: 返回正常。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X GET http://localhost:2376/containers/4fa6e0f0c678/logs?stderr=1&stdout=1&timestamps=1&follow=1&tail=10
  ```

#### 5. 查看容器的文件系统变更
- **方法**: `GET /containers/(id)/changes`
- **请求示例**:
  ```sh
  GET /containers/4fa6e0f0c678/changes HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 200 OK
  Content-Type: application/json
  [
    {
      "Path":"/dev",
      "Kind":0
    }
  ]
  ```
- **状态码**:
  - `200`: 返回正常。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X GET http://localhost:2376/containers/4fa6e0f0c678/changes
  ```

#### 6. 导出容器
- **方法**: `GET /containers/(id)/export`
- **请求示例**:
  ```sh
  GET /containers/4fa6e0f0c678/export HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 200 OK
  Content-Type: application/octet-stream
  {{ TAR STREAM }}
  ```
- **状态码**:
  - `200`: 返回正常。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X GET http://localhost:2376/containers/4fa6e0f0c678/export
  ```

#### 7. 启动容器
- **方法**: `POST /containers/(id)/start`
- **请求示例**:
  ```sh
  POST /containers/(id)/start HTTP/1.1
  Content-Type: application/json
  ```
- **响应示例**:
  ```json
  HTTP/1.1 204 No Content
  ```
- **状态码**:
  - `204`: 无内容。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X POST http://localhost:2376/containers/4fa6e0f0c678/start
  ```

#### 8. 停止容器
- **方法**: `POST /containers/(id)/stop`
- **请求示例**:
  ```sh
  POST /containers/e90e34656806/stop?t=5 HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 204 No Content
  ```
- **参数**:
  - `t`: 延时多少秒后停止。
- **状态码**:
  - `204`: 无内容。
  - `304`: 容器已经停止。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X POST http://localhost:2376/containers/4fa6e0f0c678/stop
  ```

#### 9. 重启容器
- **方法**: `POST /containers/(id)/restart`
- **请求示例**:
  ```sh
  POST /containers/e90e34656806/restart?t=5 HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 204 No Content
  ```
- **参数**:
  - `t`: 延时多少秒后重启。
- **状态码**:
  - `204`: 无内容。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X POST http://localhost:2376/containers/4fa6e0f0c678/restart
  ```

#### 10. 杀死容器
- **方法**: `POST /containers/(id)/kill`
- **请求示例**:
  ```sh
  POST /containers/e90e34656806/kill HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 204 No Content
  ```
- **参数**:
  - `signal`: 发送给容器的信号，如`SIGINT`和`SIGKILL`。
- **状态码**:
  - `204`: 无内容。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X POST http://localhost:2376/containers/4fa6e0f0c678/kill?signal=SIGKILL
  ```

#### 11. 附加终端到容器
- **方法**: `POST /containers/(id)/attach`
- **请求示例**:
  ```sh
  POST /containers/16253994b7c4/attach?logs=1&stream=0&stdout=1 HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 200 OK
  Content-Type: application/vnd.docker.raw-stream
  {{ STREAM }}
  ```
- **参数**:
  - `logs`: 是否返回日志，默认值为`false`。
  - `stream`: 是否返回数据流，默认值为`false`。
  - `stdin`: 如果`stream=true`，则附加标准输入`stdin`，默认值为`false`。
  - `stdout`: 若`logs=1`，返回标准输出，若`stream=true`，附加标准输出，默认值为`false`。
  - `stderr`: 若`logs=true`，返回标准错误日志，若`stream=true`，附加到标准错误输出，默认值为`false`。
- **状态码**:
  - `200`: 返回正常。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X POST http://localhost:2376/containers/4fa6e0f0c678/attach?logs=1&stream=0&stdout=1
  ```

#### 12. 暂停容器
- **方法**: `POST /containers/(id)/pause`
- **请求示例**:
  ```sh
  POST /containers/e90e34656806/pause HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 204 No Content
  ```
- **状态码**:
  - `204`: 无内容。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X POST http://localhost:2376/containers/e90e34656806/pause
  ```

#### 13. 重新运行暂停容器
- **方法**: `POST /containers/(id)/unpause`
- **请求示例**:
  ```sh
  POST /containers/e90e34656806/unpause HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 204 No Content
  ```
- **状态码**:
  - `204`: 无内容。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X POST http://localhost:2376/containers/e90e34656806/unpause
  ```

#### 14. 等待容器停止
- **方法**: `POST /containers/(id)/wait`
- **请求示例**:
  ```sh
  POST /containers/16253994b7c4/wait HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 200 OK
  Content-Type: application/json
  {"StatusCode":0}
  ```
- **状态码**:
  - `200`: 返回正常。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X POST http://localhost:2376/containers/16253994b7c4/wait
  ```

#### 15. 删除容器
- **方法**: `DELETE /containers/(id)`
- **请求示例**:
  ```sh
  DELETE /containers/16253994b7c4?v=1 HTTP/1.1
  ```
- **响应示例**:
  ```json
  HTTP/1.1 204 No Content
  ```
- **参数**:
  - `v`: 删除关联的数据卷，默认值为`false`。
  - `force`: 强制删除，默认值为`false`。
- **状态码**:
  - `204`: 无内容。
  - `404`: 无该容器。
  - `500`: 服务器错误。
- **curl操作**:
  ```sh
  curl -X DELETE http://localhost:2376/containers/4fa6e0f0c678
  ```

#### 16. 从容器中复制目录或文件
- **方法**: `POST /containers/(id)/copy`
- **请求示例**:
  ```sh
  POST /containers/4fa6e0f0c678/copy HTTP/1.1
  ```

希望这些优化后的文档能帮助您更好地理解和使用Docker API。