title:Towards a Timely Causality Analysis for Enterprise Security
author:Yushan Liu and
Mu Zhang and
Ding Li and
Kangkook Jee and
Zhichun Li and
Zhenyu Wu and
Junghwan Rhee and
Prateek Mittal
Towards a Timely Causality Analysis
for Enterprise Security
Yushan Liu∗§, Mu Zhang†§¶, Ding Li‡¶, Kangkook Jee‡, Zhichun Li‡¶, Zhenyu Wu‡, Junghwan Rhee‡, Prateek Mittal∗¶
∗{yushan,pmittal}@princeton.edu, †PI:EMAIL, ‡ {dingli,kjee,zhichun,adamwu,rhee}@nec-labs.com
∗Princeton University, †Cornell University, ‡NEC Labs America
Abstract—The increasingly sophisticated Advanced Persistent
Threat (APT) attacks have become a serious challenge for enter-
prise IT security. Attack causality analysis, which tracks multi-hop
causal relationships between ﬁles and processes to diagnose attack
provenances and consequences, is the ﬁrst step towards under-
standing APT attacks and taking appropriate responses. Since
attack causality analysis is a time-critical mission, it is essential
to design causality tracking systems that extract useful attack
information in a timely manner. However, prior work is limited
in serving this need. Existing approaches have largely focused on
pruning causal dependencies totally irrelevant to the attack, but
fail to differentiate and prioritize abnormal events from numerous
relevant, yet benign and complicated system operations, resulting
in long investigation time and slow responses.
To address this problem, we propose PRIOTRACKER, a back-
ward and forward causality tracker that automatically prioritizes
the investigation of abnormal causal dependencies in the tracking
process. Speciﬁcally, to assess the priority of a system event, we
consider its rareness and topological features in the causality
graph. To distinguish unusual operations from normal system
events, we quantify the rareness of each event by developing
a reference model which records common routine activities in
corporate computer systems. We implement PRIOTRACKER, in
20K lines of Java code, and a reference model builder in 10K lines
of Java code. We evaluate our tool by deploying both systems in
a real enterprise IT environment, where we collect 1TB of 2.5
billion OS events from 150 machines in one week. Experimental
results show that PRIOTRACKER can capture attack traces that
are missed by existing trackers and reduce the analysis time by
up to two orders of magnitude.
I.
INTRODUCTION
The increasingly sophisticated Advanced Persistent Threat
(APT) attacks have become a serious challenge for enterprise
IT security. In the past decade, over 6000 severe incidents [1]
have been reported. Particularly,
large enterprises, such as
Target [2] and HomeDepot [3], have been intentionally targeted
§This work was conducted when Yushan Liu was an intern at NEC Labs,
mentored by Mu Zhang, who was a Researcher at NEC.
¶ Mu Zhang, Ding Li, Zhichun Li and Prateek Mittal are corresponding
authors.
Network and Distributed Systems Security (NDSS) Symposium 2018
18-21 February 2018, San Diego, CA, USA
ISBN 1-1891562-49-5
http://dx.doi.org/10.14722/ndss.2018.23254
www.ndss-symposium.org
and suffered signiﬁcant ﬁnancial loss and reputational damage.
APT attacks are conducted in multiple stages, including initial
compromise, internal reconnaissance, lateral movement and
eventually mission completion.
An intrusion may be detected at any of the stages. However,
detection by itself only reveals unconnected attack traces.
Besides, a large portion of individual attack footprints are
seemingly insigniﬁcant and thus not suspicious enough to
raise alarms. Hence, to see the forest from the trees, sys-
tem administrators must carefully perform attack causality
analysis [4]–[11], in order to achieve a complete and sound
understanding of a detected attack. This is the very ﬁrst step
towards a safe system recovery from cyber attacks. To do
so, administrators need to ﬁrst discover how the adversary
gained access to the system, and then determine both exposed
and hidden damage inﬂicted on the system, such as infor-
mation leakage, compromised ﬁles and installed backdoors.
More concretely, to identify the sequence of steps in an APT
attack, prior work reconstructs multi-hop causal dependencies
between OS-level system objects including processes, ﬁles and
sockets. Starting from a detected event, system dependencies
are traced backward and forward in temporal order, so as to
eventually reveal the attack provenances and uncover all the
consequences, respectively.
Despite the fact that attack causality analysis is performed
in a post-mortem fashion, it is a considerably time-sensitive
mission due to two reasons. First, a compromised system re-
quires complete cleanup before returning to normal operation.
Before recovery, ﬁnancial loss caused by decreased system
uptime can easily grow to millions of dollars [12]. A timely
causality analysis can accelerate the discovery of all attack
traces and reduce such recovery cost. Second, APT attacks are
performed in multiple stages. A detected point may not be the
very end of attack sequence and the intrusion could further
develop to cause more damage. A timely attack causality
analysis can help understand attack intentions and prevent
future damage.
As a result, we believe a practical security causality
analysis must take time limit into account and extract useful
attack information in a timely manner. Unfortunately, this has
been largely overlooked by the prior work. Previous efforts
have mainly focused on addressing the dependency explosion
problem [5], [6], [10], [11] via data reduction. Particularly, they
have attempted to eliminate irrelevant system dependencies
via either 1) heuristics-based pruning [4], [5] or 2) binary
instrumentation [6], [7] and taint analysis [8], [9]. However,
reducing the data volume of irrelevant dependencies does not
Fig. 1: Reduced Version of Forward Tracking Graph for the Attack Scenario. Rectangles represent processes; ovals denote ﬁles;
diamonds indicate sockets. Grey background represents one host, while white background denotes the other.
necessarily lead to a decrease in attack investigation time. Prior
studies still have to invest excessive time in analyzing relevant,
yet benign and complex OS events, which dominate the system
(see Figure 1 and Section II for an example). Essentially, this
is because they lack the capability of differentiating unusual
activities from common system operations. Therefore, they
have to treat all relevant dependencies, abnormal and normal,
equally and simply keep track of every causal relation.
To address this problem, we propose PRIOTRACKER, a
backward and forward causality tracker that automatically
prioritizes the search for abnormal causal dependencies in
the tracking process. We further formalize a time-constrained
causality analysis to be an optimization problem, which aims
to reveal the maximum number of anomalies within a certain
time limit.
To distinguish abnormal operations from normal system
events, we quantify the rareness of each event by developing
a reference model which records common routine activities in
corporate computer systems. To build such a model, we take
full advantage of the homogeneous IT environment in enter-
prises, and collect normal OS events from copious amounts
of peer systems. Consequently, we enable a “crowd-sourcing”
based method to distill outliers from regular behaviors.
We associate every event with a priority score and select
the event with the highest priority score in the process of track-
ing. The priority score of an event is computed based on its
rareness and other topological features in the causality graph.
We assign weights to these features, which are optimized using
the Hill Climbing algorithm to ﬁnd the maximum number
of rare events before a given deadline. Note that although
rareness and other topological features are heuristically chosen,
their weights are formally assigned using machine learning
algorithm to reﬂect their effectiveness.
Priority-based methods have been widely used in secu-
rity analyses. Previous efforts have been made to expedite
static data-ﬂow analysis [13], symbolic execution [14]–[16],
fuzzing [17] and digital forensics [18], [19] through measuring
the priority of either program-level constructs or user-level
physical entities. In contrast, we enable a priority-based anal-
ysis in a completely different domain, and therefore have to
address the unique challenge of quantifying priority in OS-
level dependency tracking. To the best of our knowledge,
we are the ﬁrst to accelerate attack causality analysis via
identifying and prioritizing abnormal causal relations.
We implement PRIOTRACKER in 20K lines of Java code,
and a reference model builder in 10K lines of Java code.
Our experiments are performed on 54 Linux and 96 Windows
machines used daily by researchers, developers and adminis-
trators in an anonymous IT enterprise. Over ten months, we
use an audit log system to capture OS-level events from host
machines and store them in a database. We also record the
common system operations to build the reference model. We
evaluate our tool on 8 attack cases, which involve 2.5 billion
OS events spanning one week, and 75 points of interest, which
generate 429,900 sophisticated causal relations. Experimental
results show that PRIOTRACKER can capture attack traces that
are missed by existing trackers and can reduce the analysis
time by up to two orders of magnitude.
In summary, this paper makes the following contributions:
• We are the ﬁrst to formalize timely attack causality
analysis and to introduce priority to attack graph
construction. We present PRIOTRACKER, an anomaly-
prioritized backward and forward causality tracker
which computes the priority score of a causal depen-
dency based on its rareness and topological charac-
teristics in the causality graph. We leverage the Hill
Climbing algorithm to optimize the feature weights in
the priority score.
• We create a reference model via observing the OS-
level activities from peer systems in homogeneous
enterprise hosts. Based upon this model, we propose
2
wget x.x.x.x:80 tar intellectual-property.tar scp ssh sshd intellectual-property.tar sshd sshd bash ftp y.y.y.y:21 sshd dash dash env run-parts run-parts run-parts run-parts run-parts run-parts run-parts run-parts dash dash dash dash uname uname uname dash dash dash uname grep dash dash dash dash grep date dash python2.7 bc cut ldconfig who scp dash dash dash dash find dash dpkg dpkg dash cat dpkg dash dash dash python3.4 cut date stat expr dash dash dash dash dash cat date dash stat gawk date scp cp dash dash known_hosts info_strealer.sh motd Relevant yet Normal ActivitiesAttack Tracesa “crowd-sourcing” based method to differentiate un-
usual behaviors from normal ones, and thus to assist
the computation of the priority score. Our reference
model is able to be customized based upon the sys-
tem events collected from any speciﬁc enterprise IT
environment.
• We have implemented PRIOTRACKER and a reference
model builder, and deployed them into a real-world
enterprise computer environment. We collect a dataset
that is orders of magnitude larger than the ones used
in previous work [9], [20]. Our experimental results
are promising, showing that PRIOTRACKER can ﬁnd
attack related activities signiﬁcantly faster than the
state-of-the-art technique.
II. OVERVIEW
In this section, we explain the notion of causality analysis
and forward tracking graph via a motivating attack scenario
example. Next, we introduce the problem statement, system
architecture and threat model.
A. Motivating Example: Forward Tracking the Impact of In-
sider Related Data Leaks
1) Attack Scenario: An employee worked at a com-
puter networking company which services a customer in the
semiconductor industry. In order to do business with the
semiconductor ﬁrm, the networking company had access to
the customer’s critical server which stored its most sensitive
intellectual property. When the networking company employee
got his new job in another semiconductor ﬁrm, he used his
remaining time at his old job to steal the sensitive data. To
do so, he downloaded a malicious BASH script to the data
server via HTTP, and executed the script in order to discover
and collect all the conﬁdential documents on the server. Then,
he compressed the ﬁles into a single tarball, transferred the
tarball to a low-proﬁle desktop computer via SSH, and ﬁnally
to the ﬁle server via FTP under his control.
uploaded it
Note that similar attack scenarios have happened in the real-
life insider incidents of DuPont [21], Barclays [22], Ellery
Systems [23], etc.
2) Causality Analysis: The incident was eventually caught
manually by his colleagues in the new company, and thus
reported to the victim semiconductor ﬁrm. The corporate IT
administrators then started an investigation and discovered
the malicious script on the data server. Furthermore, to fully
recover from this attack, they also expected to locate and
destroy all the copies of leaked sensitive ﬁles, so that these
copies would not be accessed by any other unauthorized
personnel in the future. To this end, they leveraged attack
causality analysis [4], [5] to conduct causal dependency for-
ward tracking, which connects the OS-level objects (ﬁles,
processes and sockets) via system events in temporal order.
3) Forward Tracking Graph: Figure 1 demonstrates the
resulting dependency graph of forward tracking in this attack
case. In the dependency graph, each node represents a process,
ﬁle or network socket. An edge between two nodes indicates a
system event involving two objects (such as process creation,
ﬁle read or write, network access, etc.). Multiple edges are
chained together based on their temporal order.
Particularly, Figure 1 exposes all the subsequent system
events that are caused by the data exﬁltration incident. The
graph begins with the network event where malicious script
info stealer.sh is downloaded by wget from x.x.x.x:80 to the
server machine. The script is then executed in dash, which
consequently locates sensitive ﬁles and triggers tar to compress
the discovered documents into one single ﬁle, intellectual-
property.tar. The tarball is further delivered to another Linux
desktop using the scp (cid:32) ssh (cid:32) sshd (cid:32) scp channel. Once
the ﬁle has reached the desktop system, a new copy is made
and eventually sent to remote cite y.y.y.y:21 through ftp.
In the meantime, the result graph also reveals that sshd
executes massive Linux commands through triggering a series
of run-parts programs. In fact, many of these Linux commands
are intended to update the environmental variables, such as
motd (i.e., message of the day), so as to create a custom
login interface. These are relevant activities that are caused
by scp operation but are relatively more common behaviors
compared to transferring a previously unseen ﬁle. However,
existing causality trackers cannot differentiate them from the
real attack activities. Thus, they may spend a huge amount of
time analyzing all the events introduced due to run-parts, even
before studying data breach through ftp. To our experience, this
could delay the critical attack investigation for a signiﬁcant
long period of time, ranging from minutes to hours depend-
ing on different cases. Unfortunately, Verizon Data Breach
Report [24] discovered that nearly 90 percent of intrusions
saw data exﬁltration just minutes after compromise. Thus, any
delay in incident response literally means more lost records,
revenue and company reputation.
In this case, the large causal graph is caused mostly by
intensive process creations. Process forking leads to a greater
amount of dependencies particularly in forward tracking than
in backtracking because one process only has one parent but
may have multiple children. However, it is noteworthy that,
the delay of attack inspection is a common problem for both
forward and backward dependency tracking. Excessive ﬁle or
network accesses can also take up a signiﬁcant portion of
analysis time in both practices.
Also note that, the lack of analysis priority is orthogonal to
the data quantity problem which has been intensively studied
by prior data reduction efforts [6], [7], [25]. Even if the overall
data volume has been reduced, a security dependency analy-
sis, without distinguishing between common and uncommon
actions, can still be much delayed due to tracking the huge
amount of normal activities.
B. Problem Statement
To address this problem, we propose PRIOTRACKER,
which prioritizes the investigation of abnormal operations
based upon the differentiation between routine and unusual
events. Concretely speaking, we expect PRIOTRACKER to
meet the following requirements.
•
•
Accuracy. Given sufﬁcient analysis time, our causality
tracker must capture all the critical activities. It must
not miss system events caused by attacks.
Time Effectiveness. Incident response is time crit-
ical and thus a practical attack investigation must
3
•
be subject to time constraints. Given limited analysis