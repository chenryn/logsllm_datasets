# Performance Analysis of Cryptographic Algorithms on Palm Devices

## 6. Hash Functions

In this section, we present the performance measurements of MD2, MD4, MD5, and SHA-1. These algorithms were ported from open-source C code and implemented in a system library format. The test results are summarized in Table 8.

When the hash functions are integrated directly into the application code, we observed a slight improvement in hashing speed for all these functions, ranging from 1% to 4%. This improvement is due to the reasons explained in Section 2.1. The relative speeds of these hash functions running on Palm devices are depicted in Figure 3. Specifically, the speed of SHA-1 is approximately 47% of that of MD5.

### Figure 3: Performance of MD2, MD4, MD5, and SHA-1

| Algorithm | Speed (msec) |
|-----------|--------------|
| MD2       | 15000        |
| MD4       | 10000        |
| MD5       | 5000         |
| SHA-1     | 0            |

## 7. Multiple Precision Integer Arithmetic Operations

Many public-key cryptosystems require computations in \(\mathbb{Z}_n\), the integers modulo \(n\) where \(n\) is a large positive integer with hundreds of digits. In addition to \(\mathbb{Z}_n\), other algebraic structures such as polynomial rings, finite fields, and finite cyclic groups are also extensively used. Efficient implementations of these operations are crucial in modern applied cryptography.

In this section, we describe a multiple-precision integer arithmetic system library developed for Palm OS, called MPLib. MPLib contains functions to perform multiple-precision integer arithmetic operations and other related algorithms. There is no limit to the precision of the integers, except for the available dynamic memory managed by the Palm OS. MPLib has a rich set of functions with a regular interface. A complete list of the functions currently supported by MPLib can be found in the User’s Manual [16].

### Testing the Speed of MPLib Algorithms

To test the speeds of the MPLib algorithms, we used a similar approach to that of testing the speeds of ciphers and hash functions. Below is the pseudo-code for testing the speed of a 512-bit modular multiplication (\(a \cdot b \mod d\)):

```plaintext
for t = 0; t < samples; t++ {
    a = randGen(512);
    b = randGen(512);
    d = randGen(512);
    Start Timer;
    for c = 0; c < calls; c++ {
        MPLib_mod_mul(m, a, b, d);
    }
    Stop Timer;
}
```

For each sample, the testing program randomly generates three 512-bit integers \(a\), \(b\), and \(d\). The modular multiplication function of MPLib is then called for `calls` times, and the time taken for these computations is recorded.

### Table 9: Speed of 512-bit Modular Reduction

| Device   | Speed (msec) | Average Tick Count |
|----------|--------------|--------------------|
| Palm V   | 3.13         | 320                |
| Palm IIIc| 1.88         | 192                |

### Table 12: Speed of 512-bit Modular Inverse

| Device   | Speed (msec) | Average Tick Count |
|----------|--------------|--------------------|
| Palm V   | 1,381        | 4,420              |
| Palm IIIc| 998          | 3,194              |

This implementation uses the extended Euclidean algorithm, which is significantly more expensive than other operations. On Palm V, the average time to perform one 512-bit modular inverse is over one second. When designing a cryptosystem for PalmPilot, it is advisable to minimize or eliminate calls to the modular inverse operation for large integers.

### Table 13: Speed of 512-bit Modular Exponentiation

| Exponent Size | Speed (msec) | Average Tick Count |
|----------------|--------------|--------------------|
| 512-bit        | 310,112      | 96.91 sec          |
| 512-bit (exp = 3) | 710          | 2,273              |
| 512-bit (exp = 65,537) | 2,627        | 8,407              |

### Table 10: Speed of 512-bit Modular Addition

| Device   | Speed (msec) | Average Tick Count |
|----------|--------------|--------------------|
| Palm V   | 3.28         | 336                |
| Palm IIIc| 2.21         | 226                |

Modular reduction and modular addition are relatively fast due to their simplicity. The cost of these operations can be ignored for most applications.

### Table 11: Speed of Modular Multiplication

| Operation        | Speed (msec) | Average Tick Count |
|------------------|--------------|--------------------|
| 512-bit Mod Mult | 107          | 341                |
| 1024-bit Mod Mult| 410          | 1,311              |

The 512-bit modular multiplication takes about 100 msec, which is still feasible for many applications. However, modular exponentiation is very expensive if the exponent is large. For example, computing a 512-bit modular exponentiation for a 512-bit exponent requires over one minute of pure computation time. If the exponent is small (e.g., exponent = 3), the time taken is significantly shorter. The results suggest that Palm devices are only suitable for limited computation of modular exponentiation for most applications. For instance, conducting one RSA encryption or signature verification may be acceptable, but RSA decryption or signature generation may not be feasible.

### Figure 4: Performance of Modular Multiplication, Modular Inverse, and Modular Exponentiation

[Figure 4: Performance of Modular Multiplication, Modular Inverse, and Modular Exponentiation]

## 8. Suggestions and Conclusions

SSC2 provides the most efficient keystream generation and encryption speed in most cases, outperforming ARC4 by 10%. Additionally, it requires less memory space for storing internal states than ARC4. SEAL 3.0 is highly efficient for encrypting large data, making it useful for real-time data streams if precomputation of key setup tables is allowed or the overhead of key setup is not an issue. However, SEAL 3.0 requires a large memory chunk (over 3KB) for storing T, S, and R tables, which may be problematic for low-power devices with limited memory.

Block ciphers are much slower than stream ciphers. Although they are relatively fast for small data blocks compared to public-key encryption, our results show that stream ciphers like SSC2 and ARC4 should be used whenever possible.

For applications requiring highly efficient algorithms, the code should be integrated directly into the applications to eliminate any system trap instructions. Hand-coded optimization is always possible through a closer inspection of the assembly code derived from a compiled program.

---

**References:**

[1] J. Daemen and V. Rijmen. AES Proposal: Rijndael. AES Algorithm Submission, Sep 1999. http://www.nist.gov/aes.
[2] Stephen R. Dussé and Burton S. Kaliski Jr. A cryptographic library for the Motorola DSP56000. In I.B. Damgård, editor, Advances in Cryptology — Eurocrypt ’90, pages 230–244, New York, 1990. Springer-Verlag.
[3] B.S. Kaliski, Jr. RFC 1319: The MD2 Message-Digest Algorithm. IETF RFC 1319, Apr 1992.
[4] NIST FIPS PUB 180-1. Secure Hash Standard, Apr 1995.
[5] Ronald Rivest. RFC 1320: The MD4 Message-Digest Algorithm. IETF RFC 1320, Apr 1992.
[6] Ronald Rivest. RFC 1321: The MD5 Message-Digest Algorithm. IETF RFC 1321, Apr 1992.
[7] Phillip Rogaway and Don Coppersmith. A software-optimized encryption algorithm. Journal of Cryptology, 11(4), First Quarter 1998.
[8] Bruce Schneier. Applied Cryptography: protocols, algorithms, and source code in C. John Wiley & Sons, Inc., second edition, 1996.
[9] Duncan S. Wong and Agnes H. Chan. Efficient and mutually authenticated key exchange for low power computing devices. to appear in Proc. of ASIACRYPT 01, Dec 2001.
[10] Duncan S. Wong and Agnes H. Chan. Mutual authentication and key exchange for low power wireless communications. to appear in IEEE MILCOM 2001 Conference Proceedings, Oct 2001.
[11] Muxiang Zhang, Christopher Carroll, and Agnes H. Chan. The software-oriented stream cipher SSC2. Fast Software Encryption Workshop 2000, 2000.