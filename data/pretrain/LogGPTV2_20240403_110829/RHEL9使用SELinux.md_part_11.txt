:::
您需要具有管理特权才能为用户分配类别。然后用户可以为文件分配类别。要修改文件的类别，用户必须拥有该文件的访问权限。用户只能为为其分配的类别分配一个文件。
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
系统将类别访问规则与传统的文件访问权限合并。例如，如果具有
`bigfoot`{.literal} 类别的用户使用 Discretionary Access
Control(DAC)来阻止其他用户对文件的访问，则其他 `bigfoot`{.literal}
用户可以访问该文件。分配给所有可用类别的用户仍无法访问整个文件系统。
:::
::: itemizedlist
**先决条件**
-   SELinux 模式设置为 `enforcing`{.literal}。
-   SELinux 策略被设置为 `targeted`{.literal} 或 `mls`{.literal}。
-   已安装 `policycoreutils-python-utils`{.literal} 软件包。
-   对 Linux 用户的访问权限和权限：
    ::: itemizedlist
    -   分配给 SELinux 用户。
    -   分配给要为其分配该文件的类别。如需更多信息，请参阅 [MCS
        中的用户分配类别](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/using_selinux/index#proc_assigning-categories-to-users-in-mcs_assembly_using-multi-category-security-mcs-for-data-confidentiality){.link}。
    :::
-   访问您要添加到该类别中的文件的访问权限和权限。
-   为进行验证：对尚未分配给此类别的 Linux 用户访问和权限
:::
::: itemizedlist
**步骤**
-   为文件添加类别：
    ``` screen
    $ chcat -- +,+ 
    ```
    使用 `setrans.conf`{.literal} 文件中的类别号 `c0`{.literal} 到
    `c1023`{.literal} 或 category 标签。如需更多信息，请参阅 [MCS
    中的定义类别标签](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/using_selinux/index#proc_defining-category-labels-in-mcs_assembly_using-multi-category-security-mcs-for-data-confidentiality){.link}。
    您可以使用相同的语法从文件中删除类别：
    ``` screen
    $ chcat -- -,- 
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    删除类别时，必须在使用 `-`{.literal} 语法前在命令行中指定
    `--`{.literal}。否则，`chcat`{.literal}
    命令可能会错误地认为类别被删除作为一个命令选项。
    :::
:::
::: orderedlist
**验证**
1.  显示文件的安全上下文，以验证它具有正确的类别：
    ``` screen
    $ ls -lZ 
    -rw-r--r--    root:object_r:user_home_t:__:__ 
    ```
    文件的特定安全上下文可能有所不同。
2.  可选：当作为未分配给与该文件相同的类别的 Linux
    用户登录时，尝试访问该文件：
    ``` screen
    $ cat 
    cat: : Permission Denied
    ```
:::
::: itemizedlist
**其他资源**
-   `semanage(8)`{.literal} 手册页。
-   `chcat(8)`{.literal} 手册页。
:::
:::
:::
[]{#writing-a-custom-selinux-policy_using-selinux.html}
::: chapter
::: titlepage
# []{#writing-a-custom-selinux-policy_using-selinux.html#writing-a-custom-selinux-policy_using-selinux}第 8 章 编写自定义 SELinux 策略 {.title}
:::
本节介绍了如何编写和使用可让您运行受 SELinux
限制的应用程序的自定义策略。
::: section
::: titlepage
# []{#writing-a-custom-selinux-policy_using-selinux.html#custom-selinux-policies-and-related-tools_writing-a-custom-selinux-policy}自定义 SELinux 策略和相关工具 {.title}
:::
SELinux 安全策略是 SELinux 规则的集合。策略是 SELinux 的核心组件，它由
SELinux 用户空间工具载入内核。内核强制使用 SELinux
策略来评估系统中的访问请求。默认情况下，SELinux
拒绝所有请求，但与载入策略中指定的规则对应的请求除外。
每个 SELinux 策略规则都描述了进程和系统资源间的交互：
``` screen
ALLOW apache_process apache_log:FILE READ;
```
您可以按如下所示读取此示例规则：[*[**Apache**]{.strong}
进程可以[**读取**]{.strong}其[**日志文件**]{.strong}。*]{.emphasis}在此规则中，`apache_process`{.literal}
和 `apache_log`{.literal} 是 [**labels**]{.strong}。SELinux
安全策略为进程分配标签并定义与系统资源的关系。这样，策略可将操作系统实体映射到
SELinux 层。
SELinux 标签作为文件系统的扩展属性保存，如 `ext2`{.literal}。您可以使用
`getfattr`{.literal} 实用程序或 `ls -Z`{.literal} 命令列出它们，例如：
``` screen
$ ls -Z /etc/passwd
system_u:object_r:passwd_file_t:s0 /etc/passwd
```
其中 `system_u`{.literal} 是 SELinux 用户，`object_r`{.literal} 是
SELinux 角色的示例，`passwd_file_t`{.literal} 是 SELinux 域。
`selinux-policy`{.literal} 软件包提供的默认 SELinux 策略包含作为 Red Hat
Enterprise Linux 9
一部分且由软件包在存储库中提供的应用程序和守护进程规则。没有被这个发布策略中的规则描述的应用程序不会被
SELinux 限制。要更改它，您必须使用包含额外定义和规则的 policy
模块来修改策略。
在 Red Hat Enterprise Linux 9 中，您可以查询已安装的 SELinux 策略并使用
`sepolicy`{.literal} 工具生成新策略模块。`sepolicy`{.literal}
生成的脚本以及 policy 模块始终包含一个使用 `restorecon`{.literal}
实用程序的命令。这个工具是修复文件系统中所选部分问题的基本工具。
::: itemizedlist
**其他资源**
-   `sepolicy(8)`{.literal} 和 `getfattr(1)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#writing-a-custom-selinux-policy_using-selinux.html#creating-and-enforcing-an-selinux-policy-for-a-custom-application_writing-a-custom-selinux-policy}为自定义应用程序创建并强制 SELinux 策略 {.title}
:::
这个示例步骤提供了通过 SELinux
保护简单守护进程的步骤。将守护进程替换为您自定义应用程序，并根据应用程序和安全策略的要求修改示例中的规则。
::: itemizedlist
**先决条件**
-   `policycoreutils-devel`{.literal} 软件包及其依赖项安装在您的系统中。
:::
::: orderedlist
**步骤**
1.  在本例中，准备一个简单的守护进程，它将打开
    `/var/log/messages`{.literal} 文件进行写入：
    ::: orderedlist
    1.  创建一个新文件，然后在您选择的文本编辑器中打开：
        ``` screen
        $ vi mydaemon.c
        ```
    2.  插入以下代码：
        ``` programlisting
        #include 
        #include 
        FILE *f;
        int main(void)
        {
        while(1) {
        f = fopen("/var/log/messages","w");
                sleep(5);
                fclose(f);
            }
        }
        ```
    3.  编译文件：
        ``` screen
        $ gcc -o mydaemon mydaemon.c
        ```
    4.  为您的守护进程创建一个 `systemd`{.literal} 单元文件：
        ``` screen
        $ vi mydaemon.service
        [Unit]
        Description=Simple testing daemon
        [Service]
        Type=simple
        ExecStart=/usr/local/bin/mydaemon
        [Install]
        WantedBy=multi-user.target
        ```
    5.  安装并启动守护进程：
        ``` screen
        # cp mydaemon /usr/local/bin/
        # cp mydaemon.service /usr/lib/systemd/system
        # systemctl start mydaemon
        # systemctl status mydaemon
        ● mydaemon.service - Simple testing daemon
           Loaded: loaded (/usr/lib/systemd/system/mydaemon.service; disabled; vendor preset: disabled)
           Active: active (running) since Sat 2020-05-23 16:56:01 CEST; 19s ago
         Main PID: 4117 (mydaemon)
            Tasks: 1
           Memory: 148.0K
           CGroup: /system.slice/mydaemon.service
                   └─4117 /usr/local/bin/mydaemon
        May 23 16:56:01 localhost.localdomain systemd[1]: Started Simple testing daemon.
        ```
    6.  检查新守护进程是否没有被 SELinux 限制：
        ``` screen
        $ ps -efZ | grep mydaemon
        system_u:system_r:unconfined_service_t:s0 root 4117    1  0 16:56 ?        00:00:00 /usr/local/bin/mydaemon
        ```
    :::
2.  为守护进程生成自定义策略：
    ``` screen
    $ sepolicy generate --init /usr/local/bin/mydaemon
    Created the following files:
    /home/example.user/mysepol/mydaemon.te # Type Enforcement file
    /home/example.user/mysepol/mydaemon.if # Interface file
    /home/example.user/mysepol/mydaemon.fc # File Contexts file
    /home/example.user/mysepol/mydaemon_selinux.spec # Spec file
    /home/example.user/mysepol/mydaemon.sh # Setup Script
    ```
3.  使用上一命令创建的设置脚本使用新策略模块重建系统策略：
    ``` screen
    # ./mydaemon.sh
    Building and Loading Policy
    + make -f /usr/share/selinux/devel/Makefile mydaemon.pp
    Compiling targeted mydaemon module
    Creating targeted mydaemon.pp policy package
    rm tmp/mydaemon.mod.fc tmp/mydaemon.mod
    + /usr/sbin/semodule -i mydaemon.pp
    ...
    ```
    请注意，设置脚本使用 `restorecon`{.literal}
    命令重新标记文件系统的对应部分：
    ``` screen
    restorecon -v /usr/local/bin/mydaemon /usr/lib/systemd/system
    ```
4.  重启守护进程，检查它现在被 SELinux 限制：
    ``` screen
    # systemctl restart mydaemon
    $ ps -efZ | grep mydaemon
    system_u:system_r:mydaemon_t:s0 root        8150       1  0 17:18 ?        00:00:00 /usr/local/bin/mydaemon
    ```
5.  由于守护进程现在受 SELinux 限制，SELinux 也阻止它访问
    `/var/log/messages`{.literal}。显示对应的拒绝信息：
    ``` screen
    # ausearch -m AVC -ts recent
    ...
    type=AVC msg=audit(1590247112.719:5935): avc:  denied  { open } for  pid=8150 comm="mydaemon" path="/var/log/messages" dev="dm-0" ino=2430831 scontext=system_u:system_r:mydaemon_t:s0 tcontext=unconfined_u:object_r:var_log_t:s0 tclass=file permissive=1
    ...
    ```
6.  您还可以使用 `sealert`{.literal} 工具获取更多信息：
    ``` screen
    $ sealert -l "*"
    SELinux is preventing mydaemon from open access on the file /var/log/messages.
     Plugin catchall (100. confidence) suggests *
    If you believe that mydaemon should be allowed open access on the messages file by default.
    Then you should report this as a bug.
    You can generate a local policy module to allow this access.
    Do
    allow this access for now by executing:
    # ausearch -c 'mydaemon' --raw | audit2allow -M my-mydaemon
    # semodule -X 300 -i my-mydaemon.pp
    Additional Information:
    Source Context                system_u:system_r:mydaemon_t:s0
    Target Context                unconfined_u:object_r:var_log_t:s0
    Target Objects                /var/log/messages [ file ]
    Source                        mydaemon
    ...
    ```
7.  使用 `audit2allow`{.literal} 工具推荐更改：
    ``` screen
    $ ausearch -m AVC -ts recent | audit2allow -R
    require {
    	type mydaemon_t;
    }
    #============= mydaemon_t ==============
    logging_write_generic_logs(mydaemon_t)
    ```
8.  因为 `audit2allow`{.literal}
    所推荐的规则在某些情况下可能不正确，所以只使用其输出的一部分来查找对应的策略接口：