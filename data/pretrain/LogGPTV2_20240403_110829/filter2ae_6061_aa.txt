## 前言
刚开始实战代码审计,去github上找了几个100+ stars 的项目练手.
本来看着大佬们找sql注入,xss这种漏洞的文章挺简单的,以为自己上手随便搞搞也能弄几个.
现实很残酷,当代码量到几万行,甚至十万行级别,静态审计一下就把自己搞晕了,动态调试又问题一堆.并非想象中这么容易.
没有成果给自己一个正向的激励,很难坚持代码审计这样枯燥的事情.所以写了这个思路来帮助和我一样菜的菜鸡找到自己的第一个漏洞.
## 正文
### 0x01 代码审计中的信息收集
一个cms代码量确实不少,通读代码耗时长,效果也不一定好.而一个功能点如果之前出过漏洞,特别是多次出现漏洞的地方,证明开发者对这个漏洞的理解不充分,很容易再次绕过补丁.这样,一整个CMS的代码审计就可以降维到一道ctf题目.特别是对于经常参加ctf的各位大佬来说,这样的代码审计更加简单休闲.我记得之前也有机构统计过,出过漏洞的地方更容易再次出现漏洞,普通CMS的开发者通常不是专业的安全人员,也不一定有专业的安全专家协助修复,再次出现漏洞的可能性就更大了.
我以github上的一个百星icms为例.
icms github链接:  \
在issue中搜索SSRF
[https://github.com/idreamsoft/iCMS/issues?utf8=%E2%9C%93&q=is%3Aissue+ssrf](https://github.com/idreamsoft/iCMS/issues?utf8=✓&q=is%3Aissue+ssrf)
在cve列表中查找,应该对应的就是这三个cve了
可以看到这个功能点已经出现了三次的绕过与过滤.
大致了解下这个功能点,是一个自动更新文章的爬虫,多处都可以控制url参数.
点开issue查看具体信息,我们从最早出现漏洞的版本看起.
通过查看具体的commits,可以找到开发者修复漏洞的思路.这给我们代码审计带来很大的便利.
### CVE-2018-14514 漏洞分析
commit: 
提交者详细描述了漏洞信息,只指出了一个点,但根据作者修复的commit,有两处都存在SSRF漏洞.
SSRF:
    public static function postUrl($url, $data) {
            is_array($data) && $data = http_build_query($data);
            $options = array(
                CURLOPT_URL    => $url,
                ...
            );
            $ch = curl_init();
            curl_setopt_array($ch,$options);
            $responses = curl_exec($ch);
            curl_close ($ch);
            return $responses;
        }
与`icms7.0.9\app\spider\spider_tools.class.php` 604行,关键代码:
    public static function remote($url, $_count = 0) {
        $url = str_replace('&amp;', '&', $url);
        if(empty(spider::$referer)){
            $uri = parse_url($url);
            spider::$referer = $uri['scheme'] . '://' . $uri['host'];
        }
        self::$curl_info = array();
        $options = array(
            CURLOPT_URL                  => $url,
            ...
        );
        spider::$cookie && $options[CURLOPT_COOKIE] = spider::$cookie;
        if(spider::$curl_proxy){
            $proxy   = self::proxy_test();
            $proxy && $options = iHttp::proxy($options,$proxy);
        }
        if(spider::$PROXY_URL){
            $options[CURLOPT_URL] = spider::$PROXY_URL.urlencode($url);
        }
        $ch = curl_init();
        curl_setopt_array($ch,$options);
        $responses = curl_exec($ch);
        ...
    }
两处都是因为使用了curl,且无安全措施,只需要url参数可控即可进行SSRF攻击.
可以看到icms7.0.9版本没有做任何的验证,并且可以使用任意协议访问任意ip与端口.因此如果有redis或无密码的mysql或者一些其他容易被攻击的服务,可以getshell.因为这里重点不是通过SSRF如何getshell
,因此不做getshell的验证.
我们找一处漏洞点测试,有很多处都调用了remote函数,全局搜索即可,我们找一个能即时回显的点测试.
payload:`http://ip/admincp.php?app=spider&do=testdata&url=dict://127.0.0.1:8000&rid=2&pid=0&title=m09ic`
监听端口观察是否有数据过来.
很明显收到了.
### CVE-2018-14514 补丁分析
我们再来看看作者是如何修复的,commit:
    public static function remote($url, $_count = 0) {
        if(!iHttp::is_url($url,true)){
            if (spider::$dataTest || spider::$ruleTest) {
                echo "{$url} 请求错误:非正常URL格式,因安全问题只允许抓取 http:// 或 https:// 开头的链接";
            }
            return false;
        }
作者添加了一个判断函数
    public static function is_url($url,$strict=false) {
        $url = trim($url);
        if($strict){
        return (stripos($url, 'http://') === 0 || stripos($url, 'https://') === 0);
        }
        if (stripos($url, 'http://') === false && stripos($url, 'https://') === false) {
        return false;
        } else {
        return true;
        }
    }
先判断url是否以`http://`开头,才开始解析,这样就限制了危险的协议,减轻了危害程度,大部分情况很难getshell.但是SSRF漏洞依然存在.
可以发现,作者对SSRF漏洞的认识并不到位,认为不能getshell就可以了.但是实际上,用HTTP协议也并非完全不可能getshell,内网有可能存在一些可以被GET请求getshell的服务,比如thinkphp的几个RCE,就算不能RCE,SSRF也可以直接被用来进行内网信息收集,同样是不可忽视的漏洞.
### CVE-2018-14858 补丁分析
显然只允许http与https开头的url访问,SSRF依然存在,于是在icms7.0.11版本,又有人提交了SSRF漏洞,并获得了一个CVE编号.漏洞成因与上一个漏洞一致,作者的过滤措施虽然缓解了该漏洞的危害,但是漏洞依然存在.下面是作者在issue中的回复:
提交者除了提交漏洞,还简单说明了几种常见的ssrf绕过手法,比如不同格式的ip地址.
这是作者在[issue33](https://github.com/idreamsoft/iCMS/issues/33)下的回复.