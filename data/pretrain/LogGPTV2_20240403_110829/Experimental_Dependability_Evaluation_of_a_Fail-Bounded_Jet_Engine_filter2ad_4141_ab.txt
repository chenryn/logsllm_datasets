### 4.1. Errors Detected by MPC565 Exceptions

As shown in Table 1, 31.5% and 6.4% of all faults injected into registers and memory, respectively, are detected by MPC565 hardware exceptions [12]. When an exception is triggered, the experiment is stopped, and a new one is initiated. In a real system, the FADEC node should cease producing results and hand over control to a backup system when an exception is triggered. The processor was configured to enter the Checkstop State (CHSTP) instead of taking the Machine Check Exception (MCE) itself when an MCE occurs.

- CHSTP occurred for 52.4% and 26.6% of the hardware exceptions observed for faults injected into registers and memory, respectively.
- Floating-Point Assist Exceptions (FPASE) were observed in 19.0% and 50.6% of the cases.
- Software Emulation Exceptions (SEE) occurred in 15.2% and 7.8% of the exceptions.
- External Breakpoint Exceptions (EBRK) were observed in 3.3% and 13.0% of the cases.
- Alignment Exceptions (ALE) were seen in 9.5% and 1.9% of the cases.
- The remaining 13 exceptions of the MPC565 were seldom or never triggered.

### 4.2. Errors Detected by Executable Assertions

When an error is detected by the FADEC control software, such as when engine parameters exceed fixed or dynamic bounds, the controller determines whether the error is negligible or if it should transfer control to a backup system to prevent a critical event. The FADEC prototype software includes several mechanisms for detecting errors and collecting status information. Severe errors will trigger at least one of the 17 final executable assertions, denoted as EA1 to EA17, as visualized in Figure 4.

**Table 2: Executable Assertions**

| Acronym | Description |
|---------|-------------|
| EA1, EA2 | Engine operating over limits |
| EA3 - EA5 | Erroneous temperature input |
| EA6, EA7 | Erroneous speed input |
| EA8 | Erroneous pressure input |
| EA9, EA10 | Erroneous position measurement |
| EA11 - EA15 | Erroneous servo system |
| EA16, EA17 | Erroneous discrete output |

### 4.3. Critical Failures Due to Faults in Memory

Errors in the stack area, data area, and read-only data (rodata) area of the SRAM memory were either:
- Detected by hardware exceptions or executable assertions (208 errors),
- Undetected bounded failures (235 errors), or
- Mission or flight critical failures (71 errors).

- 65.3% of the critical failures were due to faults injected into the data area.
- 34.7% of the critical failures were due to faults injected into the read-only data area.
- No critical failures were observed for faults injected into the stack area.

The 71 critical failures observed for faults injected into memory can be categorized into three main groups:

**Group 1: Errors Resulting in a Lost Afterburner**
- Over 59% (42 experiments) of the observed critical failures showed behavior similar to that in Figure 5.
- For at least 35 of these, a unique boolean used for initialization changed state, causing re-initialization.
- These errors resulted in lost afterburner control but normal core engine control.
- Afterburner failures are considered mission-critical but not flight-critical, as long as the exhaust nozzle area (A8) is correctly controlled.

**Group 2: Error in Read-Only Data for Type Conversion**
- The source code for the FADEC model prototype is mainly generated from MATRIXx, with an additional software module required.
- Different data types are used in the FADEC model compared to the additional software module, necessitating type conversions using a read-only converter mask.
- A faulty value in the converter mask due to a bit-flip would permanently corrupt subsequent boolean-to-float conversions.
- In 12 experiments (16.9% of all critical failures), this fault caused system behavior similar to that shown in Figure 6.

**Group 3: FADEC Produced NaN (Not a Number) Double Precision Floats**
- In eight experiments, the FADEC node produced erroneous control outputs resulting in NaN floats.
- Arithmetic with NaN floats propagates the error quickly.
- Five out of eight NaN errors were detected by EAs, while the remaining three resulted in flight-critical failures.
- Figure 7 shows the engine behavior, where only the Compressor Variable Geometry (CVG) value stays within reasonable bounds.

**Group 4: Others**
- The system behavior for the remaining 14 (19.7%) critical failures cannot be visualized by a representative plot.
- Seven experiments converged to nominal behavior within the observed time interval, while seven did not.
- Eight of these failures are considered flight-critical.

### 4.4. Critical Failures Due to Faults in Registers

- Only 0.3% of the faults injected into registers resulted in critical failures (compared to 3.0% for memory).
- Nine mission-critical and one flight-critical failure were observed for register faults.
- Due to a design flaw in the commercial debug environment, only the 32 least significant bits of each 64-bit register could be reached, corresponding to the 32 least significant bits of the mantissa part of the float.
- This limitation likely affected the number of critical failures observed.
- Figure 8 shows the most severe behavior, a transient engine failure, where the core engine fuel flow (WFM) is lower than normal, resulting in too low compressor outlet pressure (PS3), fan (NL), and compressor speed (NH).

### 5. Conclusions

We have experimentally evaluated a prototype FADEC jet engine controller executing on the COTS microcontroller Motorola MPC565, intended for UAV applications. Transient faults were injected into the FADEC prototype to assess the efficiency of the nominal error detection mechanisms. The fault injection experiments were conducted using a pre-injection analysis of the assembly code to avoid non-effective faults. However, most of the faults were still non-effective (69.4%) or caused bounded failures (7.0%) with minor effects on the UAV, suggesting inherent robustness in the FADEC node. The hardware exceptions of MPC565 detected 20.1% of the errors, while the executable assertions in the FADEC software detected 1.9%. Critical failures, which could potentially lead to the loss of the UAV, were observed in 1.6% of the experiments. Most critical failures were caused by errors affecting boolean states in the software, either directly or through type conversions. Therefore, special care should be taken in declaring and using booleans in software.

### Acknowledgements

This work was financed by NFFP (Swedish National Flight Research Program). We want to specially thank ALTIUM LIMITED for sponsoring us with the Tasking compiler used in this study.

### References

[References listed as provided]

---

This optimized version aims to improve clarity, coherence, and professionalism, making the text more accessible and easier to understand.