# Introduction

This document provides an in-depth analysis of the vulnerabilities and the effectiveness of generated patches for a set of Android applications. The focus is on the identification and mitigation of security issues, such as SQL injection, delegation attacks, and exposed interfaces.

## Vulnerable Applications

The following list identifies the vulnerable applications by their package names and version codes:

- `hu.tagsoft.ttorrent.lite-15`
- `jp.hotpepper.android.beauty.hair-12`

## Threat Description

### Types of Threats
- **Exposed Interface**: Interfaces that are accessible to external entities without proper validation.
- **Leaked Capability**: Capabilities that can be exploited by malicious actors.
- **SQL Injection**: Malicious SQL code injected into a query.
- **Delegation Attack**: Exploiting a trusted relationship to gain unauthorized access.

### Components Affected
- **Activity**: Main entry points for user interaction.
- **Service**: Long-running operations in the background.
- **Raw Query**: Direct SQL queries to the database.
- **Internet**: Network-related capabilities.
- **Selection Query**: Queries that involve user selection.

### Threat Distribution
- **SQL Injection**: Repeatedly identified across multiple components.
- **Delegation Attack**: Identified in several instances.

## Impact Analysis

### App Size Increase
- **Figure 7** illustrates the relative app size increase at different stages of patching.
- The average increase after patch statement placement is 41.6%.
- Some apps show a significant increase, up to 130%.

### Patch Optimization
- Four phases of patch optimization are applied.
- The final average size of the patch code is reduced to 15.9%.

## Detailed Analysis

### Simple Exploitation Paths
- Apps with straightforward paths (e.g., App 4, 7, 8, 9, 11, 12) directly use Intent data for web requests or database queries.
- Blocking the exposed interface is often sufficient.

### Pop-up Dialogs
- Apps like `com.akbur.mathsworkout` (version code 92) and `com.cnbc.client` (version codes 1208 and 1209) require user consent before executing sensitive operations.
- Our approach ensures necessary checks without unnecessary interventions.

### Selection Views
- Apps providing selection views (e.g., App 1, 14, 16) only exploit if an item is selected.
- Example: `CN.MyPrivateMessages` (version code 52).

### Multiple Threads
- Apps creating new threads (e.g., App 2, 10, 15) pass manipulated input across threads, making it difficult to reproduce and confirm vulnerabilities.

## Effectiveness Evaluation

### Benign Context
- Automated testing with Monkey and manual examination ensure no interruptions in normal usability.
- No crashes observed, indicating the feasibility of our approach.

### Under Attacks
- Custom Intents sent to trigger component hijacking.
- Successful attacks on 6 vulnerable apps (App 1, 2, 4, 5, 6, 10) were mitigated with warning dialogs.

### Performance Evaluation

#### Patch Generation
- Most apps (13 out of 16) processed within 60 seconds.
- Slice computation is the most time-consuming step.

#### Runtime Performance
- Average slowdown of 2% under normal circumstances.
- Worst-case scenario shows an average overhead of 5% with a maximum of 9.6%.

## Discussion

### Limitations and Future Directions
- **Soundness of Patch Generation**: Potential false positives from static analysis, but not observed in practice.
- **Conversion Between Dalvik Bytecode and Jimple IR**: Challenges in translation, but manageable with current tools.

By addressing these vulnerabilities and optimizing the patching process, we aim to enhance the security and performance of Android applications.