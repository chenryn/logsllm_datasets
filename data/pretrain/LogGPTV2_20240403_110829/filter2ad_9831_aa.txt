**作者：蚂蚁安全实验室  
原文链接：**
近日， **蚂蚁集团与南洋理工大学、中国科技大学联合论文《APICRAFT: Fuzz Driver Generation for Closed-source SDK Libraries》入选网络安全领域四大顶会之一USENIX Security 2021** 。
在黑盒的自动化漏洞挖掘过程中，闭源SDK库缺失源代码、API接口未知，而逆向成本高、效果差等问题，常常困扰安全研究者。
基于遗传算法，研究团队的APICraft 框架技术能对闭源SDK的API依赖关系进行最大程度的挖掘和还原，很好地解决了闭源SDK库的fuzz
driver自动化生成难题，从而实现在0人工干预下挖掘漏洞。
通过运用这项技术方案，截止2021年2月，蚂蚁安全光年实验室已向Apple提交142个macOS系统库漏洞，并已收获54个Apple官方致谢。
**蚂蚁光年安全实验室林性伟也因此获得安全届的奥斯卡大奖—2021年Pwnie Award “Most Innovative Research”奖提**
**名。**
以下是他的技术分享
## 01 背景
在fuzzing过程中，安全研究员需要构建好一个应用程序用来接收fuzzer提供的fuzz input，这个应用程序我们称之为fuzz
driver。过往的fuzzing相关研究大多针对于fuzzing引擎本身的优化提升，包括种子变异策略以及调度算法的优化，增加多维度的反馈，以及提升fuzzer速度等，这些研究已经将fuzzing研究变为红海，极其“内卷”。
而我们关注到，如何自动化地构建一个高质量的fuzz driver其实是一个同样关键的问题。直观来看，如果一个fuzz
driver能够调用更多SDK提供的API，有更丰富的程序行为，那它在fuzzing过程中必然会有更高的覆盖率，从而更容易触发漏洞。因此如何生成高质量的fuzz
driver是个值得深究的研究问题。
这篇文章主要解决了如何针对闭源SDK自动化生成高质量的fuzz driver问题。
### 1.1 实例
图 1：基于 CoreText库的两个 fuzz driver
图1是一个构建fuzz driver的例子，以macOS CoreText库为例，图1有两个fuzz drivers，分别是Consumer
1以及Consumer 2，将具体API简化，以伪代码形式来表现（ **下面的序号标识了每个API调用，与图1相对应** ）：
1.Consumer 1调用ProviderCreateWithData API创建了一个DataProvider对象prov；
2.基于prov对象创建了Font对象font；
3.最后计算出font对象的LeadingSpace的double值。
4.而Consumer 2调用CreateFontDescriptor API创建了FontDescriptor对象desc；
5.再基于desc对象创建Font对象font；
6.最后计算font对象的LeadingSpace值。
图 2：不同的fuzz driver组合方式
图2是简化出来的API调用序列。(a)是原始的调用序列，(b)是我们将Consumer 1与Consumer 2进行了一个交叉变换，将Consumer
1的序列号1调用与Consumer 2的序列号4调用交换，但我们会发现，这个交叉变换并没有用。因为1与4的调换，只是改变了从raw
data创建font对象的方式，并没有改变后续API调用的语义，后续的2->5，2->3都是没有变化的。所以我们其实是想要
(c)这种的组合，将3调用与5调用组合在一起。并且可能由于调用时序的不同会有意想不到的结果。比如先调用3计算LeadingSpace的double值，再调用5计算LeadingSpace可能会导致整数溢出漏洞。
从这个例子来看单纯依赖人工进行fuzz driver 构建耗费时间且容易出（error-prone）。需要一个自动化的框架来辅助完成这个fuzz
driver构建过程。
## 02 系统总览
图 3：APICraft系统总览
我们设计并实现了APICraft系统用于针对闭源SDK fuzz
driver自动化生成工作。图3是整体的系统框架总览。APICraft整体设计思路可以概括为Collect-Combine。
  1. **Collect** ：APICraft会对使用相关SDK的GUI应用程序进行动态trace，用于收集GUI应用程序的动态行为信息，包括GUI应用程序调用SDK API的data dependency以及control dependency等。
  2. **Combine** ：随后将这些dependency解析好之后进行多目标优化的遗传算法（Multi-Objective genetic algorithm）的变异进化。产生合乎我们要求的fuzz driver。
## 03 框架设计
框架设计章节将详细介绍APICraft框架的设计与实现细节。
### 3.1 API Function Dependency信息收集
首先是如何收集（Collect）API function dependency信息。APICraft最终目标是想自动化的完成fuzz driver
构建过程，而人工构建fuzz driver最核心的部分基于SDK提供的API构建API调用序列，API调用序列包含了data
dependency以及control dependency。APICraft需要收集data dependency以及control
dependency信息，用于作为后续的多目标遗传算法的变异进化的基因/染色体。
#### 3.1.1 Data Dependency
##### 3.1.1.1 定义
图 4：Data Dependency定义
在data dependency中，APICraft定义两个函数A与B有data
dependency的关系在于，函数A的某个输入参数是函数B的输出参数/返回值，或者函数B的某个输入参数是函数A的输出参数/返回值。如果函数A与B存在data
dependency，以图4的公式来表征，即函数A的输出参数/返回值会被用作函数B的输入参数。
APICraft定义了两类的API Data Dependency：
  1. **return value** ：函数A的返回值（return value）被用做函数B的输入参数；
  2. **output parameter** ：函数A的输出参数（output paramater，一般是以指针形式存在）被用做函数B的输入参数。 
如果两个API函数满足data dependency关系，那这两个API函数就有时序调用关系。
##### 3.1.1.2 解析
图 5：APICraft实现框架图
当APICraft收集完程序动态行为信息后，需要将信息解析成相应的data dependency。具体的解析步骤是：
  1. 由图5所示，在预处理阶段，APICraft会通过SDK提供的头文件解析出每个API的参数与返回值的类型信息；
  2. 而参数与返回值的值是由动态获取到的， **APICraft基于function interposition机制实现了一套轻量级的动态trace框架** ，基于该trace框架，APICraft能够获取到动态运行过程中API函数进入前以及退出之后的参数与返回值信息，具体包括了thread id，nested level，以及会递归的将函数的参数值，返回值，输出参数值dump出来；
  3. APICraft基于thread id来将不同线程的trace信息区分开；
  4. APICraft会筛掉nested level大于1的API。APICraft针对的API函数都是SDK头文件里面提供的合法调用API。在动态trace过程，如果某个API不是由其他API所调用，即由我们的GUI应用所调用，他的nested level就是1，如果该API是在另外的API所调用的，那他的nested level就是2，以此类推。在fuzz driver生成的应用场景中，我们关注的是API函数如何正确地被GUI应用所调用，而不关注API内部调用的逻辑。APICraft需要演化学习的是GUI应用程序的程序行为逻辑，因此不关注SDK库内部调用的逻辑；
  5. 区分输出参数：如果一个参数类型是指针，APICraft会监控该指针指向的内容在进API函数前，以及退出API函数之后是否有变化，如果有的话，则该参数会被判别为输出参数； 
  6. 结合类型（type）信息以及值（value）信息进行data dependency匹配：APICraft认为即使在类型信息一致的情况下，两个值为0的比对是不匹配的，因为值为0基本无意义。随后APICraft会将typedef给展开，如果类型不一致，APICraft会看两个比对对象的类型信息是否能够转换，如果（1） 两个比对对象的基本类型是一致的，只是修饰符不一样，比如const这种修饰词；（2）如果是指针类型的话，并且两者指针大小一致，或者对象之一指针是 _void_ 类型的。上述情形都是可转换的，两个对象可被匹配上。
图 6：Data Dependency解析算法
图6所示算法是APICraft Data Dependency解析算法，输入T是收集到的API函数的调用序列信息，输出R是解析完的data
dependency的集合。
1.初始化阶段，R以及cache都将初始化为空；
2.算法会遍历每个函数A，在第8?中，算法会将output值不为0的函数加入cache中，cache是个字典类型，key为output的值，value为函数A的
output实例；
3.在第4行中，算法会遍历函数的每个输入参数（input
parameter），用输入参数的值（value）当作key从cache中取出相应的函数的output，看看是否有函数的输入参数与另外函数的output类型与值匹配上的。如果有的话就加到集合R中。