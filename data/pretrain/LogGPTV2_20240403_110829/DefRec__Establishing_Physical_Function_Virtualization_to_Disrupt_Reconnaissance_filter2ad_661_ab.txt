from which we build virtual nodes, and the communication
channels between the aforementioned components. Those com-
munication channels, such as the one connecting SDN appli-
cations and the seed devices, can be protected by SSL/TLS,
to prevent adversaries’ eavesdropping. These assumptions are
typical in work that studies attacks targeting SDN [70], [74].
Compromising SDN controllers or edge switches requires
adversaries to invoke or inject certain network events [70].
Because DefRec performs simple activities, e.g., sending out
network trafﬁc on behalf of virtual nodes, we can ensure the
assumptions made in the threat model by monitoring anomaly
events from/to SDN controllers [15].
DefRec’s objective is to increase adversaries’ reconnais-
sance efforts. Even if adversaries learn the identities of virtual
nodes and real devices, we can reconﬁgure power systems,
e.g., changing IP addresses of real devices, to disrupt their
future reconnaissance. In addition, adversaries still need to face
existing defense mechanisms, such as IDSs designed for active
attacks. We believe that PFV can also help the design of IDSs
for active attacks, which we leave to future work.
For Attacks Requiring Little or No Reconnaissance.
DefRec does not focus on attacks that require no or little
Fig. 3: Design overview: (i) PFV constructs virtual nodes that follow the actual
implementations of seed devices; and (ii) DefRec speciﬁes security policies based
on PFV to randomize communications and to craft decoy data for virtual nodes.
Fig. 4: Components of PFV: hook network
interactions with real devices based on virtual
nodes template and runtime proﬁling.
reconnaissance, including adversaries that (i) target applica-
tions storing or using all network conﬁgurations and physical
data in a single location, (ii) have already compromised a
large number of physical devices, (iii) perform attacks through
random physical disruptions or data compromises, and (iv)
have a direct access to a large number of physical devices,
e.g., through Internet-of-things (IoT) [64]. For the ﬁrst case,
it is necessary to dedicate specialized protections on those
critical applications, such as running them in an isolated and
trusted environment like Intel SGX [12], which has already
been applied in critical power grid applications [32], [62].
For the second type of attacks, adversaries can introduce
physical damage without reconnaissance. As shown in [41],
[42], if adversaries can compromise 50% of physical devices,
they can very likely introduce physical damage through ran-
dom active attacks (probability is more than 60%). As normal
control operations seldom involve such a large number of
physical devices, this type of attack can trigger alerts under
existing protection mechanisms.
For the third and fourth types of attacks that require little
reconnaissance, we can still remedy them by enhancing PFV
with different security policies. The insight is that in random or
IoT-based attacks, adversaries rely on numerous control com-
mands to change power grids’ physical state, mainly through
active attacks. Without knowing the identities of real physical
devices, their malicious activities can access virtual nodes and
raise alerts. We leave the formal analysis of detecting those
attacks based on PFV to future work.
For Attacks on Data Privacy. Disrupting adversaries’
reconnaissance is different from protecting the privacy of
physical data. The proposed security policies are to achieve
RO1–RO3, which may not be consistent with policies to
prevent the leaking of physical data. We leave the design of
privacy-preserving policy to future work.
III. DESIGN OVERVIEW OF DEFREC BASED ON PFV
In Figure 3, we present the design of DefRec, including the
components of PFV and two security policies implemented on
top of it (details are presented in Section IV and Section V).
We position PFV as a complementary service to defense
mechanisms, such as the design and implementation of the
proposed security policies to disrupt and mislead adversaries’
4
reconnaissance. We believe that PFV’s functionality is not
limited to DefRec, but can be used in other security solutions.
A. Components of PFV
The objective of PFV is to build lightweight virtual nodes
that follow the implementation of network stack, system invari-
ants, and physical state variations of real devices. In Figure 4,
we present three components of PFV in detail.
Virtual Node Templates. We use these templates to
contain basic conﬁgurations of the target control networks.
For example, the templates include network stack information,
such as IP addresses that can be assigned to virtual nodes, and
the speciﬁcation of application-layer protocols used to deliver
physical data and control operations. Conﬁgurations stored in
the templates are not speciﬁc to the context of a power grid.
Proﬁle of Seed Devices. We select a few end devices as
seed devices and proﬁle three aspects of each.
• The actual implementation of network stack can be different
from the protocol speciﬁcation. For example, the DNP3 pro-
tocol used in power grids speciﬁes 37 function codes [29],
but the SEL 751A relay used in our experiment implements
only 14 of them [60].
• System invariants refer to the characteristics that can be used
to identify or ﬁngerprint real devices, such as the latency of
executing control commands [18].
• Physical state variations usually fall
in a deterministic
range for a speciﬁc power system, such as voltage mag-
nitudes varying within the range of ±5% around a nominal
value [20].
The device proﬁle includes a range of variations for a
certain property observed at runtime (e.g., command execution
time) and the probability distribution over that range. We
only need to select one seed device to represent each vendor
or model, based on which we proﬁle the runtime behavior.
The device proﬁle makes network ﬂows from virtual nodes
follow the probabilistic behavior of real devices, rather than
replicating the same pattern. In this paper, DefRec focuses
on the reconnaissance of power grids’ applications. As such,
we build virtual nodes following these three aspects of seed
devices. When using DefRec for other applications, we can
proﬁle other application-speciﬁc knowledge.
lors the application-layer payloads of network packets sent
out by virtual nodes to (i) avoid leaking real physical data
and (ii) introduce entropy (according to the device proﬁle) to
the data sent out by virtual nodes. A method for tailoring the
payloads is beyond the range of PFV design. In Section V,
we craft decoy data for virtual nodes to mislead adversaries.
• Redirect control operation without physical impact. If a
control operation (e.g., turn off a circuit switch) reaches
a virtual node, we redirect it to a seed device, connecting
to a switch that is already turned off, such that the operation
introduces no physical impacts on the power grid.
To reduce the implementation complexity and runtime
overhead (caused by SDN), we further enhance the packet
hooking component with two design options.
• Take advantage of edge switches. As shown in Figure 4, we
choose to attach PFV components to edge switches, which
brings two beneﬁts. First, we can reduce controller-switch
latency. The latency of fewer than 2 milliseconds (found in
our experiments and speciﬁed in IEC 61850 [23]) is within
the range of the system invariant of seed devices. Second, we
can reduce the number of switches in the communication
path connecting the seed device and the packet hooking
component. Consequently, we only need to include the edge
switch in the TCB.
• “Cache” interactions with seed devices. Because commu-
nications in power grids experience little variation and
are repetitive in nature, we can optionally (determined by
system administrators) cache requests and the corresponding
responses. For example, we only need to cache “request-
response” pairs for around fourteen conﬁgurations for the
ION 7550 power meter shown in Figure 5. When an
incoming request matches an entry in the cache, we directly
respond according to the proﬁle of the device model without
redirecting it to seed devices.
“Caching” can signiﬁcantly reduce the frequency of the
interaction with seed devices, while making responses from
the virtual nodes still follow the network implementation,
system invariants, and physical state variations of real
devices. If we can perform sufﬁcient caching in advance,
we can completely avoid the interaction with seed devices,
allowing us to further remove seed devices from the TCB.
Implementation. We can implement PFV based on any
network manipulation techniques. However, the network pro-
grammability and visibility enabled by SDN can signiﬁcantly
beneﬁt the design and implementation of PFV and security
policies. Also, SDN-enabled networks are being designed and
deployed for power system substations [59], which make it
feasible to deploy PFV in real utility environments (in our
testbed, we have successfully implemented them with real
physical devices).
Built on lightweight SDN controller applications, PFV
requires no modiﬁcations to (i) existing control operations
from energy management systems, (ii) physical conﬁgurations
of substations, or (iii) existing network routing/forwarding
conﬁgurations in control networks.
B. Security Policies based on PFV
Based on PFV, DefRec speciﬁes security policies to achieve
anti-reconnaissance objectives deﬁned in Section II-B. As
Fig. 5: DNP3 conﬁguration in Schneider Electric ION 7550 power
meters: specifying four data formats for analog inputs.
We can practically implement the proﬁles of seed devices
with a little storage overhead. We do not rely on proprietary
instrumentation on physical devices. Instead, we can select
existing IEDs as seed devices by reusing spare Ethernet ports
(e.g., the SEL 751A relay can include up to three Ethernet
ports [60]). Then we can extract knowledge from network
packets ( e(cid:13) and f(cid:13) in Figure 4) through the “protocol parser”
in the packet hooking component. Because a substation tends to
deploy devices from the same vendors to reduce conﬁguration
complexity [18], we expect to proﬁle a small number of models
in a substation. Also, many physical devices include a small
number of conﬁgurations for a few deterministic functions.
For example, as shown in Figure 5, the Schneider Electric
ION7550 power meter [58] used in our experiments only
allows at most four data formats for analog inputs, binary
inputs, and binary counters (due to space limitations, only the
tab of “analog inputs” is shown).
Packet Hooking. This component uses SDN’s programma-
bility to hook network packets from seed devices; it tailors
these packets based on the information from device proﬁles
and virtual node templates, and uses the resultant packets as
the network ﬂows from virtual nodes.
As shown in Figure 4, when network packets reach an
edge switch, a protocol parser extracts header information
from the packets; a trafﬁc regulator redirects them to a seed
device if their destinations are virtual nodes (network ﬂow c(cid:13)
and e(cid:13) in Figure 4). Upon receiving the forwarded packets,
the seed device responds ( f(cid:13)). The responding packets serve
two purposes: (i) building the device proﬁle and (ii) serving
as the input to a protocol encoder, which tailors the network
packets according to the system invariants and physical state
variations proﬁled before. The tailored packets, which are not
deterministic but follow the same probabilistic properties of
seed devices, are sent out by virtual nodes as the responses
for the original request ( d(cid:13)). The responses from seed devices
reﬂect the actual implementation of the whole network stack,
including the TCP/IP implementation. Consequently, virtual
nodes are able to respond to lower layer network probing, e.g.,
ARP requests.
There are two requirements for the packet hooking com-
ponent so that virtual nodes follow the runtime behavior of
seed devices without causing physical damage and revealing
the real physical state of a power grid.
• Tailor application-layer payloads. A protocol encoder tai-
5
shown in Figure 3,
to achieve RO1 and RO2 related to
the reconnaissance of power grid networks, we present in
Section IV a disruption policy that randomizes network com-
munications. To achieve RO3, in Section V, we propose an
attack-misleading policy that crafts decoy data for virtual
nodes. Consequently, adversaries collect misleading informa-
tion about a power grid different from the one under protection
(e.g., the power grid with virtual nodes highlighted in orange
in Figure 3). Based on such information, adversaries design
ineffective attacks.
IV. DISRUPTION POLICY: RANDOMIZE
COMMUNICATIONS
The disruption policy deployed in DefRec is to achieve
the anti-reconnaissance objectives RO1 and RO2. To disrupt
passive attacks in RO1, we randomize network packets issued
to both real devices and virtual nodes, signiﬁcantly increasing
the time for adversaries to stealthily identify real devices
(Section IV-A). To disrupt proactive attacks in RO2, we
introduce randomness when responding to probing of virtual
nodes, revealing adversaries’ existence with a high probability
while reducing the information an adversary can learn (Sec-
tion IV-B).
A. Randomize Request Patterns
Adversaries can use passive attacks to stealthily identify
real physical devices, if we issue requests only to real devices
(such as a(cid:13) in Figure 4). To address this problem, we random-
ize request patterns as follows:
• Add requests to randomly selected virtual nodes. Because
accessing this set of virtual nodes is part of the disruption
policy, we regard them as “accessible virtual nodes” and
accessing them will not raise alerts. When we change the
addresses of accessible virtual nodes, we always leave the
addresses of a subset of virtual nodes unchanged. Otherwise,
adversaries can conveniently identify real devices because
their addresses remain unchanged.
• Issue requests to randomly selected real devices. This ran-
domization activity further balances the number of requests
sent to real devices and requests to accessible virtual nodes.
It prevents adversaries from identifying real devices based
on the biased distribution of the number of network packets
sent to the real devices.
Sending requests to randomly selected real devices has
become feasible as modern power grids deploy a large
number of devices to collect redundant measurements.
Consequently, we can issue requests to randomly selected
real devices as long as they collect the set of “necessary
measurements” (or basic measurements) [45]. As the set
of necessary measurements are not ﬁxed but vary with
system state, the requests issued to the real devices are
continuously randomized. Currently, many work exploits
this property to reduce communication overhead with negli-
gible impact [21], [40], [47]. In Appendix A, we also show
that such impact is negligible, as the accuracy of common
control operation is at least 99.8%.
Security Argument. We assume that
there are n real
devices and m virtual nodes, which include m1 accessible
nodes. The detailed derivation and evaluation of the following
6
(cid:1) ×(cid:0)n(cid:48)+m1
virtual nodes is ((cid:0) n
security argument can be found in Appendix A. The probability
that an adversary will successfully identify all accessible
requests to n(cid:48) randomly selected real devices and m1 randomly
selected virtual nodes; this probability decreases exponentially
with n(cid:48) and m1.
(cid:1))−1, if the adversary issues
m1
n(cid:48)
B. Probabilistic Dropping Protocol to Isolate Proactive At-
tacks
Adversaries can perform proactive attacks to probe physi-
cal devices or virtual nodes and use the responses to identify
real devices. Probing accessible virtual nodes always results
in responses. In this section, we present a procedure to han-
dle proactive probing destined to other “inaccessible” virtual
nodes, which is suspicious, as the requests are neither from
legitimate applications nor DefRec. However, directly isolating
the probing machine can immediately reveal the identity of an
inaccessible virtual node.
We propose a “probabilistic dropping” protocol that signif-
icantly reduces the effectiveness of adversaries’ probing activ-
ities, making it info-theoretically challenging for an adversary
to determine which devices are real.
• We label an identity as suspicious if it accesses an inaccessi-
ble virtual node and isolates this suspicious identity from the
network (e.g., dropping following incoming packets) with
the probability p0.
• For the k-th access from the suspicious identity to either
virtual or real devices (k ≥ 1), we isolate the suspicious
identity with a probability pk. If the suspicious identity is
not isolated on this access, it will receive a response.
• We set a threshold δ for the maximum number of accesses
allowed for the suspicious identity.
We model the event to isolate a suspicious identity after
the access to an inaccessible virtual node as a series of biased
(cid:81)k−1
coin ﬂips with increasing probability. The probability that the
suspicious identity is isolated at its k-th access is Qk = pk ×
j=0 (1 − pj) for 1 ≤ k ≤ δ.