在推出我们自己的 pod 之前，让我们先快速了解一下如何与我们正在运行的 pod 进行交互，从如何找到更多关于 pod 的信息开始:
```
$ kubectl describe --namespace kube-system pods kube-scheduler-docker-for-desktop 
```
前面的命令将打印出`kube-scheduler-docker-for-desktop`吊舱的详细信息。您可能会注意到，我们必须使用`--namespace`标志来传递名称空间。如果我们没有，那么`kubectl`将默认为默认名称空间，其中没有名为`kube-scheduler-docker-for-desktop`的 pod 运行。
命令的完整输出如下所示:
```
Name: kube-scheduler-docker-for-desktop
Namespace: kube-system
Node: docker-for-desktop/192.168.65.3
Start Time: Sat, 22 Sep 2018 14:10:14 +0100
Labels: component=kube-scheduler
 tier=control-plane
Annotations: kubernetes.io/config.hash=6d5c9cb98205e46b85b941c8a44fc236
 kubernetes.io/config.mirror=6d5c9cb98205e46b85b941c8a44fc236
 kubernetes.io/config.seen=2018-09-22T11:07:47.025395325Z
 kubernetes.io/config.source=file
 scheduler.alpha.kubernetes.io/critical-pod=
Status: Running
IP: 192.168.65.3
Containers:
 kube-scheduler:
 Container ID: docker://7616b003b3c94ca6e7fd1bc3ec63f41fcb4b7ce845ef7a1fb8af1a2447e45859
 Image: k8s.gcr.io/kube-scheduler-amd64:v1.10.3
 Image ID: docker-pullable://k8s.gcr.io/kube-scheduler-amd64@sha256:4770e1f1eef2229138e45a2b813c927e971da9c40256a7e2321ccf825af56916
 Port: 
 Host Port: 
 Command:
 kube-scheduler
 --kubeconfig=/etc/kubernetes/scheduler.conf
 --address=127.0.0.1
 --leader-elect=true
 State: Running
 Started: Sat, 22 Sep 2018 14:10:16 +0100
 Ready: True
 Restart Count: 0
 Requests:
 cpu: 100m
 Liveness: http-get http://127.0.0.1:10251/healthz delay=15s timeout=15s period=10s #success=1 #failure=8
 Environment: 
 Mounts:
 /etc/kubernetes/scheduler.conf from kubeconfig (ro)
Conditions:
 Type Status
 Initialized True
 Ready True
 PodScheduled True
Volumes:
 kubeconfig:
 Type: HostPath (bare host directory volume)
 Path: /etc/kubernetes/scheduler.conf
 HostPathType: FileOrCreate
QoS Class: Burstable
Node-Selectors: 
Tolerations: :NoExecute
Events: 
```
如您所见，有很多关于 pod 的信息，包括容器列表；我们只有一个叫`kube-scheduler`的。我们可以看到容器标识、使用的映像、启动容器时使用的标志，以及 Kubernetes 调度程序用来启动和维护 pod 的数据。
现在我们知道了一个容器名，我们可以开始与它交互了。例如，运行以下命令将打印一个容器的日志:
```
$ kubectl logs --namespace kube-system kube-scheduler-docker-for-desktop -c kube-scheduler 
```
![](img/f153d87e-fd6b-40e0-a0c2-bd142037ee33.png)
运行以下命令将获取容器中每个容器的`logs`:
```
$ kubectl logs --namespace kube-system kube-scheduler-docker-for-desktop
```
像 Docker 一样，您也可以在您的荚和容器上执行命令。例如，以下命令将运行`uname -a`命令:
Please ensure you add the space after the `--` in the following two commands. Failing to do so will result in errors.
```
$ kubectl exec --namespace kube-system kube-scheduler-docker-for-desktop -c kube-scheduler -- uname -a
$ kubectl exec --namespace kube-system kube-scheduler-docker-for-desktop -- uname -a
```
同样，我们可以选择在命名容器上运行命令，或者在 pod 内的所有容器上运行命令:
![](img/8ea74f60-7de1-418a-8bcb-7499fa8c9d1b.png)
让我们通过安装和登录基于网络的仪表板来了解更多关于 Kubernetes 集群的信息。虽然默认情况下 Docker 不提供这个功能，但是使用 Kubernetes 项目提供的定义文件安装它很简单。我们只需要运行以下命令:
```
$ kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
```
![](img/20527938-448d-441a-bee4-90a1f5db0896.png)
创建服务和部署后，启动需要几分钟时间。您可以通过运行以下命令来检查状态:
```
$ kubectl get deployments --namespace kube-system
$ kubectl get services --namespace kube-system
```
一旦您的输出如下所示，您的仪表板就应该安装完毕并准备好了:
![](img/1f52f317-e1e9-4018-ac30-f73aa6933cfa.png)
现在我们已经运行了仪表板，我们将找到访问它的方法。我们可以使用`kubectl`中内置的代理服务来做到这一点。只需运行以下命令来启动它:
```
$ kubectl proxy
```
![](img/315bb32e-3b82-4a00-b8af-91af2501ccd3.png)
这将启动代理并打开您的浏览器，转到`http://127.0.0.1:8001/version/`将向您显示关于您的集群的一些信息:
![](img/6750c373-4a9e-4a2f-a7e0-b391af94acba.png)
然而，这是我们想要看到的仪表板。可在`http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/`进入。
当您第一次在浏览器中打开网址时，会出现一个登录屏幕。当我们通过代理访问仪表板时，我们只需按下**跳过**按钮:
**![](img/ddd8e4aa-30aa-4377-a812-693beee5b196.png)**
登录后，您将能够看到集群上的大量信息:
![](img/5f146b4a-3f88-4d8f-9c2b-eec242281cbe.png)
现在我们已经启动并运行了我们的集群，我们现在可以看看启动几个示例应用。
# 库柏人和其他 Docker 工具
当我们启用 Kubernetes 时，我们选择 Kubernetes 作为 Docker 栈命令的默认编排器。在前一章中，Docker `stack`命令将在 Docker Swarm 中启动我们的 Docker Compose 文件。我们使用的 Docker 编写如下所示:
```
version: "3"
services:
 cluster:
 image: russmckendrick/cluster
 ports:
 - "80:80"
 deploy:
 replicas: 6
 restart_policy:
 condition: on-failure
 placement:
 constraints:
 - node.role == worker
```
在 Kubernetes 上启动应用之前，我们需要稍作调整并删除位置，这使得我们的文件看起来如下所示:
```
version: "3"
services:
 cluster:
 image: russmckendrick/cluster
 ports:
 - "80:80"
 deploy:
 replicas: 6
 restart_policy:
 condition: on-failure
```
文件编辑完成后，运行以下命令将启动`stack`:
```
$ docker stack deploy --compose-file=docker-compose.yml cluster
```
![](img/1a9cfbdc-f787-4737-b52f-c5197eec5a00.png)
如您所见，Docker 会等到栈可用后再返回您的提示。我们还可以运行我们在 Docker Swarm 上启动栈时用来查看栈信息的命令:
```
$ docker stack ls
$ docker stack services cluster
$ docker stack ps cluster
```
![](img/db628bed-b212-4e3a-9ab8-a28cd4264f59.png)
我们也可以使用`kubectl`看到细节:
```
$ kubectl get deployments