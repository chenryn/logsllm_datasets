title:ALCHEMY: A Language and Compiler for Homomorphic Encryption Made
easY
author:Eric Crockett and
Chris Peikert and
Chad Sharp
Alchemy: A Language and Compiler for
Homomorphic Encryption Made easY
Eric Crockett
University of Michigan and
Georgia Institute of Technology
Chris Peikert
University of Michigan
Chad Sharp
University of Michigan
ABSTRACT
Fully Homomorphic Encryption (FHE) is a cryptographic “holy
grail” that allows a worker to perform arbitrary computations on
client-encrypted data, without learning anything about the data
itself. Since the first plausible construction in 2009, a variety of
FHE implementations have been given and used for particular ap-
plications of interest. Unfortunately, using FHE is currently very
complicated, and a great deal of expertise is required to properly
implement nontrivial homomorphic computations.
This work introduces Alchemy, a modular and extensible system
that simplifies and accelerates the use of FHE. Alchemy compiles
“in-the-clear” computations on plaintexts, written in a modular
domain-specific language (DSL), into corresponding homomorphic
computations on ciphertexts—with no special knowledge of FHE
required of the programmer. The compiler automatically chooses
(most of the) parameters by statically inferring ciphertext noise
rates, generates keys and “key-switching hints,” schedules appro-
priate ciphertext “maintenance” operations, and more. In addition,
its components can be combined modularly to provide other useful
functionality, such logging the empirical noise rates of ciphertexts
throughout a computation, without requiring any changes to the
original DSL code.
As a testbed application, we demonstrate fast homomorphic
evaluation of a pseudorandom function (PRF) based on Ring-LWR,
whose entire implementation is only a few dozen lines of simple
DSL code. For a single (non-batched) evaluation, our unoptimized
implementation takes only about 10 seconds on a commodity PC,
which is more than an order of magnitude faster than state-of-
the-art homomorphic evaluations of other PRFs, including some
specifically designed for amenability to homomorphic evaluation.
CCS CONCEPTS
• Security and privacy → Public key encryption; • Software and
its engineering → Software design techniques;
KEYWORDS
fully homomorphic encryption; domain-specific languages; compil-
ers
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243828
ACM Reference Format:
Eric Crockett, Chris Peikert, and Chad Sharp. 2018. Alchemy: A Language
and Compiler for, Homomorphic Encryption Made easY. In CCS ’18: 2018
ACM SIGSAC Conference on Computer & Communications Security Oct. 15–
19, 2018, Toronto, ON, Canada. ACM, New York, NY, USA, 18 pages. https:
//doi.org/10.1145/3243734.3243828
1 INTRODUCTION
Fully Homomorphic Encryption (FHE) is a powerful cryptographic
concept that allows a worker to perform arbitrary computations on
client-encrypted data, without learning anything about the data it-
self. Although first envisioned 40 years ago [49] as a cryptographic
“holy grail,” no plausible candidate FHE scheme was known until
Gentry’s seminal work in 2009 [26, 27]. Motivated by FHE’s po-
tential to enable new privacy-sensitive applications and enhance
existing ones, a flurry of research activity has led to FHE schemes
with better efficiency, stronger security assurances, and specialized
features. (See [3, 4, 11–15, 18–20, 30–32, 51, 52] for a sampling.) In
addition, there are a variety of real-world FHE implementations
which have been used for particular applications of interest (see,
e.g., [17, 22, 25, 29, 33, 38, 46]).
Unfortunately, using current FHE implementations for non-trivial
homomorphic computations is quite complicated: First, one must
express the desired “in the clear” computation (on plaintexts) in
terms of the FHE scheme’s “instruction set,” i.e., the basic homo-
morphic operations it natively supports. This is non-trivial because
the operations (which can vary based on the scheme) are typically
algebraic ones like addition and multiplication on finite fields, and
sometimes other functions like permutations on fixed-sized arrays
of field elements. Thus, one needs to “arithmetize” the desired com-
putation in terms of these operations, as efficiently as possible for
the instruction set at hand. (Moreover, the instruction set can some-
times depend on the choice of plaintext and ciphertext rings, which
can also affect the third step below.)
Second, FHE ciphertexts accumulate “errors” or “noise” under
homomorphic operations, and too much noise causes the result to
decrypt incorrectly—so proper noise management is essential. In
addition, the ciphertext “degree” increases under certain operations,
but can be brought back down using other means. So along with
homomorphic operations that perform meaningful work on the
plaintext, one must also carefully schedule appropriate “mainte-
nance” operations, such as linearization and other forms of key
switching, and rescaling (also known as modulus switching) to keep
the ciphertext noise and size under control.
Third, one must choose appropriate ciphertext parameters for
the desired level of security, i.e., dimensions and moduli that are
compatible with the noise rates at the various stages of the compu-
tation (and also consistent with any restrictions inherited from the
first step). Importantly, the choice of parameters itself affects the
noise growth incurred by the homomorphic operations, so one may
need several cycles of trial and error until the parameters stabilize.
Lastly, one also needs to generate all the needed keys and aux-
iliary key-switching “hints” that are needed for the maintenance
operations, and to encrypt the input plaintexts under the appropri-
ate keys.
In summary, the above process requires a great deal of expertise
in both the theory of FHE and the quirks of its particular imple-
mentation, in addition to a lot of manual programming and trial-
and-error. Perhaps for this reason, most applications of FHE to date
have been ad-hoc, one-off implementations, with complex code that
is hard to debug and which obscures the nature of the underlying
computation.
1.1 Contributions
This work introduces Alchemy, a system that greatly simplifies and
accelerates the implementation of homomorphic computations.1 In
short, Alchemy automatically and safely transforms “in-the-clear”
computations on plaintexts into corresponding homomorphic com-
putations on ciphertexts. Crucially, this requires no detailed knowl-
edge of particular FHE schemes on the part of the programmer. One
simply writes (and runs, and debugs) a program that describes a
desired plaintext computation, and then obtains a matching homo-
morphic computation with very little additional effort.
At a more technical level, Alchemy consists of two main pieces:
(1) domain-specific languages (DSLs) for expressing plaintext and
ciphertext computations, including both “native” operations and a
library of higher-level functions built out of them; and (2) a compiler
that transforms plaintext programs into corresponding homomor-
phic ones. The compiler automatically handles the cumbersome
and delicate tasks of choosing (most of the) parameters, generating
keys and hints, scheduling appropriate “maintenance” operations
to control the ciphertext size and noise, encrypting inputs and de-
crypting outputs under appropriate keys, etc. In addition, it uses
a strict type system to statically—i.e., at compile time—track the
ciphertext noise to choose appropriate moduli, and to check that
other parameters satisfy arithmetic conditions required for correct
computation. Finally, the various pieces of the compiler can be
composed modularly to provide additional useful functionality.
In summary, Alchemy lets programmers write clear and con-
cise code describing what they really care about—the plaintext
computation—and produces a corresponding homomorphic compu-
tation without requiring expertise in the intricacies of FHE. In Sec-
tion 1.2 we describe the approach in more detail, and in Sections 1.3
and 5 we give some simple and then more advanced examples to
demonstrate Alchemy’s convenience and flexibility.
Application: homomorphic PRF evaluation. As a full-scale testbed
application, in Section 5 we demonstrate fast homomorphic eval-
uation of a candidate pseudorandom function (PRF) based on the
Learning With Rounding over Rings (Ring-LWR) problem [6]. In
the non-batched setting, our (still unoptimized) implementation is
more than one order of magnitude faster than prior homomorphic
evaluations of other PRFs. In addition, the programmer-written
implementation of the “plaintext” PRF computation is only a few
dozen lines of very simple and transparent code; Alchemy handles
everything else.
It has long been understood that homomorphic evaluation of
symmetric-key primitives like PRFs is a very useful tool in the the-
ory and practice of FHE (see, e.g., [26, 28, 33]). For example, it allows
a client to encrypt its data using symmetric-key encryption—which
is much faster and more compact than FHE encryption—while still
allowing a worker to compute on the data homomorphically. The
worker first homomorphically evaluates the symmetric decryption
circuit on an FHE encryption of the user’s secret key, resulting in
an FHE encryption of the user’s data. From there the worker can
homomorphically evaluate the actual function of interest.
Prior work has homomorphically evaluated PRFs like the AES
block cipher [18, 24, 33, 45] and the “LowMC” cipher [1], which was
specially designed to have low multiplicative depth for amenability
to FHE and multi-party computation (MPC). On standard laptop-
class hardware, highly optimized state-of-the-art implementations
require a few minutes (or much more) for a single AES or LowMC
evaluation. They can also use SIMD techniques to compute scores
of evaluations at once, resulting in amortized rates of a few seconds
per block, or even sub-second rates for LowMC amortized over
hundreds of blocks. However, the latency remains in the several
minutes, which makes its unsuitable for many scenarios.
By constrast, our homomorphic evaluation of a Ring-LWR PRF
takes only about twelve seconds for a single evaluation on com-
modity hardware.2 This is primarily due to its use of rich natively
supported FHE operations like “ring switching” [22, 30] and SIMD
operations on “slots” [51], its small number of such operations, and
its low multiplicative depth (over a large ring). This good “algebraic
fit” of Ring-LWR for homomorphic evaluation was previously noted
in [3, 5], and our work confirms it in practice.
1.2 Overview of Alchemy
As already mentioned, Alchemy is a collection of domain-specific
languages (DSLs) for expressing plaintext and ciphertext compu-
tations, and interpreters that act on programs written in these lan-
guages. Here “interpreters” is broadly defined, and encompasses
evaluators, optimizers, and, most significantly, compilers that trans-
form programs from one DSL to another.
Alchemy is highly modular and extensible. Each DSL is made
up of small, easy-to-define components corresponding to particular
operations or language features, which can be combined arbitrarily.
Interpreters can support any subset of the language components,
and are easy to extend to new ones. In addition, Alchemy’s inter-
preters are easy to compose with each other to perform a variety
of different tasks. For example, starting from a single plaintext
program one can: evaluate it “in the clear,” compile it to a cor-
responding homomorphic computation, print a representation of
both programs, encrypt a plaintext and perform the homomorphic
computation on it, and track the ciphertext noise throughout.
Another key property of Alchemy is static safety: any well-
formed program, and only well-formed programs, should be ac-
cepted by an interpreter, and the possibility of runtime errors should
1Alchemy is publicly available under a free and open-source license at https://github.
com/cpeikert/ALCHEMY.
2There are limited opportunities for even faster amortized rates via batch evaluation;
we leave these for future work.
be minimized or even eliminated. For these purposes, the Alchemy
DSLs are functional (pure) and statically typed, in a rich type system
that supports strong type inference.
• Purity means that a function always yields the same out-
put when given the same inputs (no side effects or global
variables), which is a good match for the arithmetic func-
tions and circuits that are common targets for homomorphic
computation.
• Static typing means that every expression has a type that is
known at compile time, and only well-formed expressions
typecheck. This allows many common programming errors—
both in DSL code, and in Alchemy’s own interpreters—to be
caught early on. The type system is very rich, allowing many
safety properties to be encoded into types and automatically
verified by the type checker.
• Type inference ensures that (almost) all types in DSL expres-
sions can be automatically determined by the type system,
and need not be explicitly specified by the programmer. This
makes code more concise, and easier to understand and check
for correctness.
All the above-described properties are obtained by defining the
DSLs and interpreters in the host language Haskell, from which
Alchemy directly inherits its basic syntax, rich data types, and
safety features—with no special implementation effort or extra
complexity. As its underlying FHE implementation, Alchemy uses
a BGV-style [12] cryptosystem as refined and implemented in
Λ◦λ [22], a recent Haskell framework for FHE and lattice-based cryp-
tography more generally. However, we emphasize that Alchemy
compilers can easily target other FHE schemes and implementa-
tions, not just those based on Λ◦λ and Haskell.
Languages. Domain-specific languages (DSLs) have long been
recognized as powerful tools for working in particular problem
domains; e.g., LATEX is a (Turing-complete) DSL for typesetting doc-
uments, and the MATLAB language is targeted toward numerical
computing and linear algebra.
Alchemy’s first main ingredient is a collection of modular and
extensible DSLs for expressing both “in the clear” computations
on plaintexts, and homomorphic computations on ciphertexts. Fol-
lowing the powerful “typed tagless final” approach to embedded
language design [41], each DSL is the union of several independent
and composable language components. Alchemy defines language
components for the following DSL features:
simple data structures like tuples and lists;
• data types for plaintexts rings and FHE ciphertexts, and
• basic arithmetic operations like addition and multiplication,
along with more advanced ones like arbitrary linear func-
tions between plaintext rings;
• ciphertext operations as supported by the underlying FHE
• programmer-defined functions, including higher-order func-
tions (i.e., those that operate on other functions);
• and even specific forms of side effects, via monads.
implementation;
It is easy to introduce additional data types and language features
as needed, simply by defining more language components.
Both the plaintext and ciphertext DSLs include the generic lan-
guage components for data structures, arithmetic operations, and
functions. In addition, each one includes the components that re-
late specifically to plaintext or ciphertext operations. Because the
plaintext DSL involves relatively simple data types and operations,
it is easy for the programmer to hand-write code to express a de-
sired computation. By contrast, proper use of the ciphertext DSL
is significantly more complicated—e.g., ciphertext types involve
many more parameters, and FHE operations must be appropriately
scheduled—so it is not intended for human use (though nothing
prevents this). Instead, it is the target language for Alchemy’s
plaintext-to-ciphertext compiler. As we will see, having a dedi-
cated ciphertext DSL allows for homomorphic computations to be
acted upon in various useful ways beyond just executing them, e.g.,
tracking noise growth or optimizing away redundant operations.
Alchemy also provides a variety of useful higher-level functions
and combinators that are written in the DSLs. These include “arith-
metized” versions of functions that are not natively supported by
FHE schemes, but can be expressed relatively efficiently in terms