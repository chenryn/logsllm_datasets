inside e, revealing only the upper bound p2 of the delegation to the rest of the
program. Programmers can then use the new expression open (α, x) = e1 in e2 to
interact with the package e1 inside the scope of e2.
The main feature of existential packages is that they are ﬁrst-class values which
can be freely passed around. The distributed banking example in Figure 11 illus-
trates such practical use of existential types.
3.1 Dynamic semantics
The operational semantics of λRP, shown in Figure 2, is standard [Pierce 2002],
except for the addition of the acts-for hierarchy and the if-acts-for test. We use
4Existential types can be encoded in terms of universal types, following Reynolds’ encoding (but
requires a whole program analysis). For clarity, we include existential types here as primitives.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
10
Stephen Tse and Steve Zdancewic
A, case (inl v) v1 v2 −→ A, v1 v
A, case (inr v) v1 v2 −→ A, v2 v
A, (λx: t. e) v −→ A, e{v/x}
A, (Λα (cid:22) p. e) [X] −→ A, e{X/α}
A, open (α, x) = (pack (X1 (cid:22) X2, v)) in e −→ A, e{X1/α, v/x}
A ‘ X1 (cid:22) X2
A, if (X1 (cid:22) X2) e3 e4 −→ A, e3
A ‘ X1 6(cid:22) X2
A, if (X1 (cid:22) X2) e3 e4 −→ A, e4
A, e1 −→ A, e2
A, E[e1] −→ A, E[e2]
Fig. 2. Evaluation rules of λRP
(E-CaseInl)
(E-CaseInr)
(E-Fun)
(E-All)
(E-Some)
(E-IfDelYes)
(E-IfDelNo)
(E-Context)
the notation A, e −→ A, e0 to mean that an acts-for hierarchy A and a program e
make a small step of evaluation to become A and e0. The evaluation of a program
is the reﬂexive and transitive closure of the small-step evaluation. Note that A is
used but never changed here; Section 4.2 considers run-time modiﬁcation of A via
delegation.
In Figure 2, E-Fun says that, if an abstraction λx: t. e is applied to a value v, then
v is substituted for x in e. Similarly, by E-All, if a polymorphic term Λα (cid:22) p. e
is instantiated to a principal X, then X is substituted for α in e. E-Some does
both the term and the type substitutions when opening up a package. We use the
notation e{v/x} and e{X/α} for capture-avoiding substitutions.
E-CaseInl and E-CaseInr are rules for conditional test of tagged values: If the
test condition is a left-injection inl v, the ﬁrst branch is applied to v. For example,
using the Boolean encoding described earlier,
if (true) Alice Bob
def= case (inl *) (λy : 1. Alice) (λy : 1. Bob)
−→ (λy : 1. Alice) *
−→ Alice
E-IfDelYes and E-IfDelNo, unlike the other rules above, use the acts-for hierarchy
A to check delegation at run-time.
If A proves that principal X1 delegates to
principal X2, the result of an if-acts-for term is the ﬁrst branch; otherwise, the
result is the second branch.
E-Context speciﬁes the congruence rules for evaluation with contexts.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
11
x : t ∈ Γ
∆; Γ ‘ x : t
∆ ‘ l
∆; Γ ‘ * : 1l
∆; Γ ‘ e : t1 ∆ ‘ l
∆; Γ ‘ inl e : (t1 + t2)l
∆; Γ ‘ e : t2 ∆ ‘ l
∆; Γ ‘ inr e : (t1 + t2)l
∆; Γ ‘ e : (t1 + t2)l ∆; Γ ‘ v1 : (t1 → t)l ∆; Γ ‘ v2 : (t2 → t)l
∆; Γ ‘ case e v1 v2 : t t l
∆; Γ, x : t1 ‘ e : t2 ∆ ‘ l
∆; Γ ‘ λx: t1. e : (t1 → t2)l
∆; Γ ‘ e1 : (t1 → t2)l ∆; Γ ‘ e2 : t1
∆; Γ ‘ e1 e2 : t2 t l
∆; Γ ‘ e1 : (Pp)l ∆; Γ ‘ e2 : (Pq)l ∆, p (cid:22) q; Γ ‘ e3 : t ∆; Γ ‘ e4 : t
∆; Γ ‘ if (e1 (cid:22) e2) e3 e4 : t t l
∆ ‘ l
∆; Γ ‘ X : (PX)l
∆, α (cid:22) p; Γ ‘ e : t α 6∈ ftv(Γ) ∆ ‘ l
∆; Γ ‘ Λα (cid:22) p. e : (∀α (cid:22) p. t)l
∆; Γ ‘ e : (∀α (cid:22) q. t)l ∆ ‘ p (cid:22) q
∆; Γ ‘ e [p] : t{p/α} t l
∆; Γ ‘ e : t{p/α} ∆ ‘ p (cid:22) q ∆ ‘ l
∆; Γ ‘ pack (p (cid:22) q, e) : (∃α (cid:22) q. t)l
∆; Γ ‘ e1 : (∃α (cid:22) p. t1)l
∆, α (cid:22) p; Γ, x : t1 ‘ e2 : t2
α 6∈ ftv(Γ) ∪ ftv(t2)
∆; Γ ‘ open (α, x) = e1 in e2 : t2 t l
∆; Γ ‘ e : t1 ∆ ‘ t1 ≤ t2
∆; Γ ‘ e : t2
Fig. 3. Typing rules of λRP
(T-Var)
(T-Unit)
(T-Inl))
(T-Inr)
(T-Case)
(T-Fun)
(T-App)
(T-IfDel)
(T-Name)
(T-All)
(T-Inst)
(T-Pack)
(T-Open)
(T-Sub)
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
12
Stephen Tse and Steve Zdancewic
∆ ‘ u ≤ u0 ∆ ‘ l v l0
∆ ‘ ul ≤ u0
∆ ‘ u ≤ u
l0
∆ ‘ u ≤ u0 ∆ ‘ u0 ≤ u00
∆ ‘ u ≤ u00
2
∆ ‘ t1 ≤ t0
∆ ‘ (t1 + t2) ≤ (t0
∆ ‘ t0
∆ ‘ (t1 → t2) ≤ (t0
1 ∆ ‘ t2 ≤ t0
1 + t0
2)
1 ≤ t1 ∆ ‘ t2 ≤ t0
1 → t0
2)
2
∆ ‘ p0 (cid:22) p ∆, α (cid:22) p0 ‘ t ≤ t0
∆ ‘ (∀α (cid:22) p. t) ≤ (∀α (cid:22) p0. t0)
(S-Label)
(S-Reﬂ)
(S-Trans)
(S-Sum)
(S-Fun)
(S-All)
Fig. 4. Subtyping rules of λRP
3.2 Static semantics
Our type system, shown in Figure 3, is similar to those previously proposed [Heintze
and Riecke 1998; Pottier and Conchon 2000; Zdancewic and Myers 2002], except
for the addition of rules for run-time principals. The notation ∆; Γ ‘ e : t means
that a program e has type t under the hierarchy ∆ and the term environment Γ.
To explain how the type system keeps track of information ﬂow, consider the
typing rule T-Case for a case term. The test condition has type (t1 + t2)l, the ﬁrst
branch must be a function of type t1 → t, and the second branch must be a function
of type t2 → t. This typing rule matches the operational semantics of E-CaseInl
and E-CaseInr mentioned above. The label of the inputs (the test condition and
the branches) will be folded into the label of the output as in t t l. We deﬁne
tt l = (ul0)t l = u(l0 t l) so that the output always has a label as high as the input’s
label. For all elimination forms (T-App, T-IfDel and T-Inst), this restriction on
the output label is used to rule out implicit information ﬂows [Heintze and Riecke
1998; Zdancewic and Myers 2002].
T-Var (variables), T-Unit (units), T-Inl (left injections), T-Inr (right injections),
T-Fun (functions), T-App (applications), T-Sub (subsumption) are standard rules
for lambda calculus with subtyping [Pierce 2002].5 Figure 4 shows the subtyping
rules of λRP. Note the absence of subtyping for singletons; it is unsound to combine
subtyping and singletons [Aspinall 1994].
By T-Name, a principal constant X has type (PX)l. This singleton property ties
the static type information and the run-time identity of principals—if a program
expression has type (PX)l, it is guaranteed to evaluate to the constant X (because of
5By Barendregt’s variable convention, a binding variable is chosen fresh with respect to the current
context. In particular, x does not occur free in Γ and α does not occur free in ∆ in rules T-Fun,
T-All and T-Open.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
13
type preservation and canonical forms). The extra condition ∆ ‘ l checks that the
label l is well-formed under hierarchy ∆, meaning that all free principal variables
of l are contained in ∆.
T-All indicates that a polymorphic term Λα (cid:22) p. e is well-typed if the body e is
well-typed under hierarchy ∆ extended with the additional delegation α(cid:22)p. The
extra condition α 6∈ ftv(Γ) ensures the well-formedness of the environment—α is a
fresh variable. T-Inst requires the left term to be a polymorphic term and that the
delegation constraint ∆ ‘ p (cid:22) q on the instantiated principal is known statically.
T-Pack and T-Open are similar to T-All and T-Inst. The additional restriction
α 6∈ ftv(t2) prevents the escape of the lexically-scoped type variable α. This restric-
tion is an important detail for a sound type system with existential types [Pierce
2002].
T-IfDel is similar to T-All in that it extends ∆ with α(cid:22)p, but it does the extension
only for the ﬁrst branch. This matches the operational semantics of E-IfDelYes and
E-IfDelNo in Figure 2. Extending ∆ for the ﬁrst branch reﬂects the run-time
information that the branch is run only when α(cid:22)p holds at run-time. For example,
when type-checking the program g at the beginning of this section, the function
application print s will be type-checked in a context where M (cid:22) α. Because
M (cid:22) α ‘ {M :!} v {α:!} the function application is permitted—inside the ﬁrst
branch of the if-acts-for, a value of type bool{M :!} can be treated as though it has
type bool{α:!}.
The following shows the safety of the type system with respect to the operational
semantics.
Theorem 1 (Type-safety).
(1 ) Progress: If A ‘ e : t, then e = v or A, e −→ A, e0 for some e0.
(2 ) Preservation: If A ‘ e : t and A, e −→ A, e0, then A ‘ e0 : t.
The proof for this theorem is similar to those for languages with subtyping [Pierce
2002]. Since type-safety also holds for our full language with declassiﬁcation and
authority (to be introduced in Section 4), we present the full proof altogether as
Theorem 6 in Section 5. Theorem 1 here is a specialized version of Theorem 6
where the authority π is empty.
3.3 Noninterference
This section proves a noninterference theorem [Goguen and Meseguer 1982], which
is the ﬁrst main theoretical result of this paper. The intuition is that in secure
programs, high-security inputs do not interfere with low-security outputs.
Formally, the noninterference theorem states that if a Boolean program e of low
security l is well-typed and contains a free variable x of high security l0, and if
values v and v0 have the same type and security as x, then substituting either v or
v0 for x in e will evaluate to the same Boolean value v0. We use Boolean so that
the equivalence of the ﬁnal values can be observed syntactically. This result means
that a low-security observer cannot use a well-typed program e to learn information
about the high-security input x.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
14
Stephen Tse and Steve Zdancewic
A, e −→∗ A, v A, e0 −→∗ A, v0 A ‘ v ∼ζ v0 : t
A ‘ e ≈ζ e0 : t
A ‘ l 6v ζ
A ‘ v ∼ζ v0 : ul
A ‘ * ∼ζ * : 1l
A ‘ v ∼ζ v0 : t1
A ‘ inl v ∼ζ inl v0 : (t1 + t2)l
∀(A ‘ v2 ∼ζ v0
2) : t2 t l
A ‘ v ∼ζ v0 : t2
A ‘ inr v ∼ζ inr v0 : (t1 + t2)l
2 : t1). A ‘ (v v2) ≈ζ (v0 v0
A ‘ v ∼ζ v0 : (t1 → t2)l
A ‘ X ∼ζ X : (PX)l
∀(A ‘ X (cid:22) p). A ‘ (v [X]) ≈ζ (v0 [X]) : t{X/α} t l
A ‘ v ∼ζ v0 : (∀α (cid:22) p. t)l
A ‘ v ∼ζ v0 : t{X1/α}
A ‘ pack (X1 (cid:22) X2, v) ∼ζ pack (X1 (cid:22) X2, v0) : (∃α (cid:22) X2. t)l
(R-Term)
(R-Label)
(R-Unit)
(R-Inl)
(R-Inr)