First, Android does not allow to use traditional System
V based IPC or RPC protocols, but Android applications
need to use binder, a custom implementation of IPC/RPC
protocol. Binder communication is an important source to
capture causal relations between processes.
Second, Android provides various Android-speciﬁc APIs
such as framework APIs, system APIs, and resource APIs.
The API usage often represents high-level program seman-
tics.
Most Android applications are written in Java, but An-
droid also allows developers to write code in native com-
ponents (C or C++) to enhance the performance. Native
components can invoke methods in Java libraries and also
directly call lower-level instructions such as system calls.
3.1 Android API Logging
API logger captures application’s activities at the API
level to reason about how it interacts with the Android run-
time framework. It can also capture an interaction between
native components and Android APIs. We directly instru-
ment Android source code to capture important APIs with
their arguments and return values. In particular, we iden-
tify the set of Android APIs that potentially induce causal
relations with system objects such as the device resources
or private data. We instrument 21 Android APIs and they
mainly fall into three categories:
• Framwork APIs: We capture APIs that can handle
Android framework resources. For instance, SMSMan-
ager APIs can send and receive SMS messages, Tele-
phonyManager APIs can call or receive calls and also
get device’s IMEI number. PackageManager APIs al-
low to install or uninstall APK packages and also scan
installed application lists.
• System APIs: We monitor APIs that can access cam-
era, GPS, and microphone deﬁned in Camera, Loca-
tion and MediaRecorder classes, respectively.
• Resource APIs: We log APIs that can access device
contents such as a local storage or a database. For in-
stance, we capture SQLite database APIs and content
provider APIs.
Our instrumented code snippets collect API information
and send it to system call logger where we assign each event
a global timestamps to show the happens-before relations
between diﬀerent logs. We store API information into heap
memory, and we use openat() system call to deliver the data
to system call layer. openat has three arguments, (int fd,
char* path, int oflag) and we use fd as an indicator of
log type. For example we use -255 for API and -256 for
Binder. path points to the process heap memory where we
store API information. Note that we can send an arbitrary
length of data through the memory. openat with a negative
fd simply returns an error from the kernel and does not
cause any side-eﬀect only except Linux errno [9]. When a
system call fails, the kernel sets an errno to indicate a reason
of the error. We save the current errno before openat and
restore it after the system call to avoid a side eﬀect from
errno.
Alternative approach: We studied an alternative approach
that can reduce the manual instrumentation. The idea started
from an observation that most API calls from Android ap-
4
Figure 3: An overview of binder protocol.
plications invoke DoCall(), Invoke() or Execute() methods
deﬁned in Android runtime class. Then they search the des-
tination API address and jump to the target API. If the
call arrives at DoCall(), Invoke() or Execute(), the target
API name and their arguments can be retrieved from Shad-
owFrame data structure. Our idea is to instrument only those
three methods to capture API calls and their arguments. We
can monitor all API calls go through those methods and we
can detect APIs we are interested (e.g., SQLite query) by
simple string comparison.
However, it has a limitation. We cannot guarantee that
all APIs are going through runtime methods. For instance,
if Android compiler (dex2oat) optimization applies method
inlining or direct oﬀset calling, the application can directly
jump to the target API without passing through aforemen-
tioned runtime methods. Native components are another
problem.
It can directly call Android APIs and runtime
methods cannot observe them either. This approach has
advantage as the user can easily conﬁgure API list to mon-
itor and minimize Android modiﬁcation, but we decide not
to use it due to above limitations.
Another approach we considered is APK rewriting. It can
directly instrument arbitrary codes in APK ﬁle, but this ap-
proach has limitations. APK rewriting or static instrumen-
tation is known to be vulnerable to the code obfuscation,
and it cannot instrument native code. Furthermore, An-
droid applications can load an additional code at runtime,
called dynamic loading code. Android attacks techniques
often use dynamic loading code [54, 68, 32, 57] to avoid of-
ﬂine analysis systems, but APK rewriting technique cannot
handle dynamically loaded codes.
3.2 Binder Logging
Another challenge to build an eﬀective forensic analysis
system for Android is its unique Inter-Process Communica-
tion (IPC) mechanism. Android applications are not allowed
to use traditional System V based IPC or RPC protocols,
but required to use Android binder, a custom implementa-
tion of the OpenBinder protocol [5]. Android applications
use binder protocols to invoke methods of remote objects
(e.g., services or activities) to interact with other applica-
tions. For instance, in order to send SMS message, Android
applications need to invoke remote procedure, sendTextMes-
sage provided by com.android.sms process (i.e., SMSMan-
Binder DriverClient ProcessServer Processlibbinder.solibbinder.soserve the clientstruct binder_transaction_data {                .    /* transaction data */    const void *buffer;    const void *offsets;                .}User-spaceKernel-spaceUser-space669ager). Similarly, Android applications use binder to access
photos, contacts, map or other data stored in Android’s
main storage.
In fact, all 31 Android malwares we have
inspected use binder calls to steal information or to send
unauthorized text message. The user application also can
be a service provider. For instance, Facebook and Twitter
provide sign-in services that enable people to log into the
app with Facebook or Twitter accounts.
Consequently, IPCs or RPCs are important sources for
forensic analysis but existing Linux-based logging techniques
cannot eﬀectively capture them. We need to understand se-
mantics of binder protocol (e.g., client’s and server’s process
ids, invoked remote method and a data object that is trans-
ferred between the client and the server) and capture them.
Figure 3 shows a simpliﬁed data ﬂow in the binder proto-
col. To provide a service to other processes, the server ﬁrst
registers a service into ServiceManager, a special binder ob-
ject that is used as a registry and lookup service for other
binder objects. Once the service is registered, client pro-
cesses can ﬁnd and interact with it through binder protocol.
The client (or caller) process X ﬁrst interacts with Service-
Manager to ﬁnd the remote method name and invokes the
remote method. The binder protocol sends BC_TRANSACTION
message to Binder driver. It is delivered to Binder driver
with multiple ioctl system calls. Then the Binder driver
lookups a server process Y who can provide the service to
the client X, and sends BR_TRANSACTION message to process
Y. When the process Y ﬁnishes, it sends BC_REPLY message
to the Binder driver and the driver forwards it to process X
via BR_REPLY.
We log BR_TRANSACTION and BC_REPLY messages along
with the information of the client (process X) and the server
(process Y). We assume that all server’s behaviors between
BR_TRANSACTION and BC_REPLY are causally related to the
client process. If the server concurrently receives requests
from multiple clients, our conservative assumption may in-
troduce false positives, but we will not miss any information.
In practice, we do not observe any false dependences in our
experiments.
In some cases, BR_TRANSACTION or BC_REPLY contains a
message shared between the client and server that can be in-
formative for the forensic analysis (e.g., SMS message, a re-
cipient’s number, IMEI). Figure 3 also presents a data struc-
ture that BR_TRANSACTION and BC_REPLY use. “void *buﬀer”
contains a shared memory address that can be accessed by
both the client and server. We log the ﬁrst 128 bytes of the
buﬀer if it can be a useful information for forensic analysis.
We log the buﬀer that goes to SMSManager or sent from
TelephonyManager because they possibly contain outgoing
SMS message or devices’s IMEI number. Note that logging
the ﬁrst 128 bytes is enough in our evaluation scenarios and
the length of data to be logged can be easily tunned to meet
one’s demand of security level.
Alternative Approaches:
In API-layer, it is possible to
capture intent calls which initiate binder protocols. How-
ever it has following limitations. Intent declares a recip-
ient by an action string or a component name. At the
run-time, we can specify the recipient process, but that in-
formation might not be available in post-mortem forensic
analysis. Note that arbitrary applications can register the
service, and service name alone is not enough information
to understand the behaviors. Furthermore, native compo-
Figure 4: System call logging overview.
nent can use binder protocol through binder library without
using intent API.
CopperDroid [63] proposed a technique that analyzes the
semantics of binder via ioctl system call. However, Cop-
perDroid is build on top of QEMU and it requires the out-
of-the-box analysis to understand a payload of each ioctl
calls. Unfortunately, their technique could be too heavy to
be implemented in a real device.
Accordingly, we decide to monitor IPC/RPC in the binder
library (libbinder.so) where we can collect all information.
3.3 System call Logging
In the previous sections, we discussed Android API and
binder logging techniques to monitor high-level application
behaviors and interactions between applications or services.
However, they are not enough to fully capture application
behaviors. For instance, Android applications can contain
native components written in C/C++. Native components
can directly invoke lower-level instruction such as system
calls that API logger can not observe. Malicious apps fre-
quently hide their activities in native code [61, 17, 56, 52] to
evade the Java-code analysis techniques [21, 37, 47, 50, 64,
69]. Recent study [17] shows that 37% of Android applica-
tions (446k out of 1.2 million Android apps) potentially use
native components. Therefore we develop system call logger
that can capture system calls from native components.
System call logging is a popular technique in traditional
desktop or server forensics. For instance, Linux Audit [11] is
a default package in most Linux distributions, and DTrace [8]
is shipped with FreeBSD operating system. Linux Audit is
also available in Android [4], however, it causes too much
run-time overhead (up to 38%) and space consumption to
use in practice (e.g., always-on forensic logging) in resource-
constrained mobile devices. To address this problem, we
have developed a light-weight system call logging module for
Android. We borrow an idea from state-of-the-art Linux sys-
tem call logging techniques, ProTracer [49] and Sysdig [12].
Thankfully, Sysdig is an open-source project under GNU
General Public Licenses (free to share and change the code),
and we reuse part of their code to build our logger for An-
droid. Our system call logger causes only 1.99% ∼ 4.56%
run-time overhead in Nexus 6 smartphone.
Similar to ProTracer [49] and Sysdig [12], our system con-
sists of two parts, a kernel module and a user-space dae-
mon process. Figure 4 shows the architecture of our system.
The kernel module leverages tracepoints [15] to capture
the entry and exit of each system call (e.g,. sysenter and
5
Kernel Module1) Capture the entry and exit of selected system calls2) copy system call     information to     a ring buﬀerMulti-threaded daemon process4) store into a local ﬁle or    send to a server via network3) copy from     a ring buﬀerUser-spaceKernel-spaceRing Buffer for core #2Ring Buffer for core #1670Benchmark
Linux
Runtime Overhead
DroidForensics DroidForensics
Linux
Space Consumption
DroidForensics DroidForensics
PCMark-work
Android-
TabletMark-web/email
6.0.1 r42 TabletMark-photo/video
3DMark
PCMark-work
Android-
5.1.0 r3
TabletMark-web/email
TabletMark-photo/video
3DMark
Average
Audit [4] without comp.
15.31%
22.61%
37.38%
18.98%
18.34%
24.19%
38.73%
19.15%
24.34%
0.26%
1.44%
1.41%
3.12%
1.84%
3.77%
2.21%
3.19%
2.16%
with comp.
1.99%
3.57%
2.12%
3.75%
2.32%
4.14%
3.41%
4.05%
3.17%
Audit [4] without comp.
166MB
590MB
612MB
56MB
150MB
612MB
661MB
59MB
363MB
110MB
402MB
509MB
44MB
101MB
421MB
469MB
46MB
263MB
with comp.
16MB
61MB
64MB
7.3MB
14MB
67MB
69MB
8.1MB
38.3MB
Table 1: Overhead of system call logging: Linux Audit and DroidForensics’ system call logger.
sysexit). At runtime, the kernel module collects system
call information and stores it into a kernel ring buﬀer. To
avoid race conditions, we generate a separate ring buﬀer for
each CPU cores. The user-space daemon reads from ring
buﬀers, compresses them and sends to the local ﬁle or an
outer server through the network. We only capture forensic-
related system calls such as calls that aﬀect other processes
(e.g., fork, kill) or other system objects (e.g., read, write,
recv, send). We record 52 out of 328 system calls. Our se-
lection of system calls are similar to previous Linux-based