么被停止了。
如果在有已停止作业存在的情况下，你仍旧想退出shell，只要再输人一遍exit命令就行了。
shell会退出，终止已停止作业。或者，既然你已经知道了已停止作业的PID，就可以用ki11命令
来发送一个SIGKILL信号来终止它。
S ki11 -9 2456
[1] + Ki1led
sleep 100
在终止作业时，最开始你不会得到任何回应。但下次如果你做了能够产生shell提示符的操作
（比如按回车键），你就会看到一条消息，显示作业已经被终止了。每当shell产生一个提示符时，
它就会显示shell中状态发生改变的作业的状态。在你终止一个作业后，下次强制shell生成一个提
示符时，shell会显示一条消息，说明作业在运行时被终止了。
---
## Page 349
334
第16章控制脚本
16.1.3捕获信号
也可以不忽略信号，在信号出现时捕获它们并执行其他命令。trap命令允许你来指定shell
脚本要监看并从shell中拦截的Linux信号。如果脚本收到了trap命令中列出的信号，该信号不再
由shell处理，而是交由本地处理。
trap命令的格式是：
trap cosmanda signaIa
非常简单！在trap命令行上，你只要列出想要shell执行的命令，以及一组用空格分开的待捕
获的信号。你可以用数值或Linux信号名来指定信号。
这里有个简单例子，展示了如何使用trap命令来忽略sIGINTr信号，并控制脚本的行为。
S cat testl.sh
 Testing algmal trapping
#1/bin/bash
trap *echo * Sorry!I have trapped Ctr1C'* SIGINT
echo Thia Le a teat script
count=1
#
vhi1e [ $count -1e 10 1
do
echo *Loop #$count *
count=S[ $count + 1 ]
sleep 1
Gone
echo *rhia la the end of the test script*
#
#
本例中用到的trap命令会在每次检测到sIGINT信号时显示一行简单的文本消息。捕获这些
信号会阻止用户用bashshell组合键Ctrl+C来停止程序。
$./test1.sh
Thia la a teat scxipt
Loop #1
Loop #2
Loop #3
Loop #4
^C Sorry! I have trapped Ctr1C
Loop 5
Loop #7
Loop #6
^C Sorry1 I have trapped Ccx1C
Loop #8
Loop #10
Loop #9
This la the end of the test scrlpt
---
## Page 350
16.1处理信号
335
每次使用Ctrl+C组合键，脚本都会执行trap命令中指定的echo语句，而不是处理该信号并
允许shell停止该脚本。
16.1.4捕获脚本退出
16
除了在shell脚本中捕获信号，你也可以在shell脚本退出时进行捕获。这是在shell完成任务时
执行命令的一种简便方法。
要捕获shell脚本的退出，只要在trap命令后加上EXIT信号就行。
S cat test2.sh
1/bin/bash
 Trapping the script exit
trap *echo Goodbye...* EXIT
count=1
while [$count -le 5 ]
do
qumoos doo, oa
[ +qunoo $=qunoo
sleep 1
done
S./test2.sh
Loop #1
Loop #3
Loop
2
Loop 4
Loop #5
Goodbye. .
当脚本运行到正常的退出位置时，捕获就被触发了，shell会执行在trap命令行指定的命令。
如果提前退出脚本，同样能够捕获到EXIT。
S./test2.sh
Loop #2
Loop 1
Loop #3
*CGoodlbye. .*
因为SIGINT信号并没有出现在trap命令的捕获列表中，当按下Ctrl+C组合键发送SIGINT信
号时，脚本就退出了。但在脚本退出前捕获到了EXIT，于是shell执行了trap命令。
16.1.5修改或移除捕获
要想在脚本中的不同位置进行不同的捕获处理，只需重新使用带有新选项的trap命令。
---
## Page 351
336
第16章控制脚本
S cat teat3.sh
 Hodifying a set trap
1/bin/bash
IoIs ..*peddex sT -xo --·Axxog . ouoo, dex
count=1
vhi1e [ $count -1e 5 1
dlo
echo *Loop #$count*
[T +umoos 1s=quno2
sleep 1
Gone
aNIoIs .,idexa oqa peTarpou I . ouos, dex
#
count=1
#
[s ↑- qunoos  oTqR
do
echo *Second Loop #$count*
count=$[ $count + 1 ]
sleep 1
Gone
#
修改了信号捕获之后，脚本处理信号的方式就会发生变化。但如果一个信号是在捕获被修改
前接收到的，那么脚本仍然会根据最初的trap命令进行处理。
S./test3.ah
Loop #1
L0op #2
Loop #3
^C Sorry.-- Ctr1-C ia trapped.
Loop #5
Loop #4
t# dool puooes
Second Loop #2
^C I nodiried the trap!
Second Loop #3
Second Loop #4
Second Loop #5
也可以删除已设置好的捕获。只需要在trap命令与希望恢复默认行为的信号列表之间加上
两个破折号就行了。
S cat test3b.sh
 Renoving a set trap
1/bin/bash
trap *echo + Sorry... Ctr1-C ia trapped,** SIGIMT
#
count=1
---
## Page 352
16.1处理信号
337
whi1e [ Scount -1e 5 1
do
echo *Loop #$count*
αleep 1
[  + qumoos 1s=qumo
done
16
Remove the trap
echo *I juat removed the trap*
trap
INIDIS --
count=1
whlle [ $count -le 5 ]
do
echo *Second Loop I$count *
[ t + atmoo$ 1s=qumoo
αleep 1
done
$./test3b.ab
Loop #1
Loop
Loop
#2
Loop
#4
#3
I just removed the trap
Loop #5
Second Loop #1
# doo puooeg
E# doo puooeg
^C
$
跨门也可以在trap命令后使用单破折号来恢复信号的默认行为。单破折号和双破折号都可以
正常发挥作用。
移除信号捕获后，脚本按照默认行为来处理SIGINT信号，也就是终止脚本运行。但如果信
号是在捕获被移除前接收到的，那么脚本会按照原先trap命令中的设置进行处理。
$./test3b.sh
Loop 1
Loop #3
Loop #2
^C Sorry... Ctr1-C is trappedl.
Loop #4
Loop #5
I just removed the trap
Second Loop 1
Second Loop 2
$
*C
---
## Page 353
338
第16章控制脚本
在本例中，第一个Ctul+C组合键用于提前终止脚本。因为信号在捕获被移除前已经接收到了，
脚本会照旧执行trap中指定的命令。捕获随后被移除，再按Curl+C就能够提前终止脚本了。
16.2以后台模式运行脚本
直接在命令行界面运行shell脚本有时不怎么方便。一些脚本可能要执行很长一段时间，面你
可能不想在命令行界面一直干等着。当脚本在运行时，你没法在终端会话里做别的事情。幸好有
个简单的方法可以解决。
在用ps命令时，会看到运行在Linux系统上的一系列不同进程。显然，所有这些进程都不是
运行在你的终端显示器上的。这样的现象被称为在后台（background）运行进程。在后台模式中，
进程运行时不会和终端会话上的STDIN、STDOUT以及STDERR关联（参见第15章）。
也可以在shell脚本中试试这个特性，允许它们在后台运行面不用占用终端会话。下面几节将
会介绍如何在Linux系统上以后台模式运行脚本。
16.2.1后台运行脚本
以后台模式运行shell脚本非常简单。只要在命令后加个&符就行了。
+ 1/bin/bash
 Test running in the background
vhile [ $count -le 10 ]
count=1
do
[T + qunos s=quno
sleep 1
done
+
./test4.sh&
[1]3231
当&符放到命令后时，它会将命令和bash shell分离开来，将命令作为系统中的一个独立的后
台进程运行。显示的第一行是：
[1]  3231
方括号中的数字是shell分配给后台进程的作业号。下一个数是Linux系统分配给进程的进程
ID（PID）。Linux系统上运行的每个进程都必须有一个唯一的PID。
一旦系统显示了这些内容，新的命令行界面提示符就出现了。你可以回到shell，面你所执行
的命令正在以后台模式安全的运行。这时，你可以在提示符输人新的命令
当后台进程结束时，它会在终端上显示出一条消息：
[1]   Done
 /test4, sh
---
## Page 354
16.2以后台模式运行脚本
69
这表明了作业的作业号以及作业状态（Done），还有用于启动作业的命令。
注意，当后台进程运行时，它仍然会使用终端显示器来显示STDOUT和STDERR消息。
#1 /bin/ba.sh.
16
 Test running in the background with output
while [ $count -1e 5 ]
count=]
d.o
echo *Loop #$count*
sleep 5
done
[ +qunoo$=qunoo
echo *7est script is conplete*
S./test5.sh 
$ Start the test script
[1]3275
Loop #2
Loop 1
Loop
Loop #4
Test script is conplete
Loop
5
[1] Done
 /test5 .eh
你会注意到在上面的例子中，脚本test5.sh的输出与shell提示符混杂在了一起，这也是为什么
Start the test script会出现在提示符旁边的原因。
在显示输出的同时，你仍然可以运行命令。
S./test5.sh 
[1]3319
$ Start the test script
Loop 2
Loop 1
Loop #3
myprog myprog.c
1s myprog*
$ Loog 4
Test
Loop #5
script is conplete
[1] Done
 /test5 .eh
6$