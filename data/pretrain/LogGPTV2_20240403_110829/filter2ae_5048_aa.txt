作者：LoRexxar 原文连接：
文章是之前发表在安全智库的文章，主要是一些CSP的分析和一部分bypass CSP的实例
最近接触了很多次关于csp的东西，但是发现wooyun知识库只有2年前的[浏览器安全策略说之内容安全策略CSP]),实际阅读却发现和现在的语法差异很大，于是整理了这篇文章
# 什么是CSP?
**Content Security Policy**
（CSP）内容安全策略，是一个附加的安全层，有助于检测并缓解某些类型的攻击，包括跨站脚本（XSS）和数据注入攻击。
简单来说，csp就是为了减少xss，csrf等攻击的，是通过控制可信来源的方式，类似于同源策略…
CSP以白名单的机制对网站加载或执行的资源起作用。在网页中，这样的策略通过 HTTP 头信息或者 meta
元素定义。CSP虽然提供了强大的安全保护，但是他也造成了如下问题：Eval及相关函数被禁用、内嵌的JavaScript代码将不会执行、只能通过白名单来加载远程脚本。这些问题阻碍CSP的普及，如果要使用CSP技术保护自己的网站，开发者就不得不花费大量时间分离内嵌的JavaScript代码和做一些调整…
# 支持CSP的浏览器
Content Security Policy 最早在firefox 23中实现，当时使用的是 X-Content-Security-Policy，它使用了前置词的内容安全性策略，并以W3C CSP1.0规范作为标准
CSP主要有三个header，分别是：Content-Security-Policy，X-Content-Security-Policy，X-WebKit-CSP
  * Content-Security-Policy  
chrome 25+，Firefox 23+，Opera 19+
  * X-Content-Security-Policy  
Firefox 23+，IE10+
  * X-WebKit-CSP  
Chrome 25+
平时见的比较多的都是第一个Content Security Policy
# CSP语法
这一部分的东西基本都是来自于[w3c的文档](https://www.w3.org/TR/CSP3/#source-expression)
## CSP的来源
我们经常见到的CSP都是类似于这样的：
    header("Content-Security-Policy:default-src 'none'; connect-src 'self'; frame-src 'self'; script-src xxxx/js/ 'sha256-KcMxZjpVxhUhzZiwuZ82bc0vAhYbUJsxyCXODP5ulto=' 'sha256-u++5+hMvnsKeoBWohJxxO3U9yHQHZU+2damUA6wnikQ=' 'sha256-zArnh0kTjtEOVDnamfOrI8qSpoiZbXttc6LzqNno8MM=' 'sha256-3PB3EBmojhuJg8mStgxkyy3OEJYJ73ruOF7nRScYnxk=' 'sha256-bk9UfcsBy+DUFULLU6uX/sJa0q7O7B8Aal2VVl43aDs=';font-src xxxx/fonts/ fonts.gstatic.com; style-src xxxx/css/ fonts.googleapis.com; img-src 'self'");
里面包括了各种各样的写法：
1、none和self，none代表什么都不匹配，self代表匹配同源的来源  
2、类似于[https://example.com/path/to/file.js这样的会匹配特殊的文件，或者https://example.com/这样会匹配源下的所有。](https://example.com/path/to/file.js%E8%BF%99%E6%A0%B7%E7%9A%84%E4%BC%9A%E5%8C%B9%E9%85%8D%E7%89%B9%E6%AE%8A%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E6%88%96%E8%80%85https://example.com/%E8%BF%99%E6%A0%B7%E4%BC%9A%E5%8C%B9%E9%85%8D%E6%BA%90%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E3%80%82)  
3、第三种是类似于https:，会匹配所有包含这个特殊的格式的来源。  
4、也有可能是example.com这样的，会匹配所有这个host的来源，或者会有*.example.com,会匹配这个host的所有子域。  
5、第五种是类似于nonce-qwertyu12345会匹配一个特殊的节点。  
6、当然还有加密过的类似于sha256-abcd…同样会匹配页面中一个特殊的节点（每次修改这个值都会改变）。
在文档上能够找到一个详细的例子：
    serialized-source-list = ( source-expression *( RWS source-expression ) ) / "'none'"
    source-expression      = scheme-source / host-source / keyword-source
                             / nonce-source / hash-source
    ; Schemes:
    scheme-source = scheme ":"
                    ; scheme is defined in section 3.1 of RFC 3986.
    ; Hosts: "example.com" / "*.example.com" / "https://*.example.com:12/path/to/file.js"
    host-source = [ scheme-part "://" ] host-part [ port-part ] [ path-part ]
    scheme-part = scheme
    host-part   = "*" / [ "*." ] 1*host-char *( "." 1*host-char )
    host-char   = ALPHA / DIGIT / "-"
    port-part   = ":" ( 1*DIGIT / "*" )
    path-part   = path
                  ; path is defined in section 3.3 of RFC 3986.
    ; Keywords:
    keyword-source = "'self'" / "'unsafe-inline'" / "'unsafe-eval'" 
    ; Nonces: 'nonce-[nonce goes here]'
    nonce-source  = "'nonce-" base64-value "'"
    base64-value  = 1*( ALPHA / DIGIT / "+" / "/" / "-" / "_" )*2( "=" ) 
    ; Digests: 'sha256-[digest goes here]'
    hash-source    = "'" hash-algorithm "-" base64-value "'"
    hash-algorithm = "sha256" / "sha384" / "sha512"
有个小问题是关于使用ip的
使用ip尽管符合上述语法，但是直接对ip地址的请求的安全性本身就是受到怀疑的，如果可以最好还是用域名。
## CSP的属性
### child-src
child-src指令管理了套嵌浏览的部分（类似于iframe、frame标签）
会匹配iframe和frame标签
    举一个页面的例子:
    首先设置csp
    Content-Security-Policy: child-src https://example.com/
    而下面的请求会被CSP拦截
### connect-src
connect-src指令限制了可使用的脚本加载的url，会阻止a的ping属性，也控制着websocket的连接，有点难描述，举个例子。
    ...
这样的请求都会返回网络错误。
### default-src
default-src作为所有其他指令的备用，一般来说default-src ‘none’; script-src
‘self’这样的情况就会是script-src遵循self，其他的都会使用none。（也就是说除了被设置的指令以外，其余指令都会被设置为default-src指令所设置的属性）
    如果设置了
    Content-Security-Policy: default-src 'self'; script-src https://example.com
    就会出现
    Content-Security-Policy: child-src 'self';
                             connect-src 'self';
                             font-src 'self';
                             img-src 'self';
                             media-src 'self';
                             object-src 'self';
                             script-src https://example.com;
                             style-src 'self'
    这样的情况
### font-src
font-src指令限制了所有可以被加载的字体资源。
    举个例子:
    Content-Security-Policy: font-src https://example.com/
    下面的请求都会返回错误
### img-src
img-src指令限制着所有可以加载的图片资源的来源
    举个例子:
    Content-Security-Policy: img-src https://example.com/
    下面的请求会返回错误:
### manifest-src
manifest-src指令限制了从应用清单可以加载的url。
这个属性不太熟，比较常见的就是link
    举个例子：
    Content-Security-Policy: manifest-src https://example.com/
    下面的请求会返回错误:
### media-src
media-src指令限制令额所有从视频、音频、和相关的文本来源.
这个属性主要针对的是audio video以及连带的文本
    Content-Security-Policy: media-src https://example.com/
    下面的请求都会返回错误:
### object-src
object-src限制了所有从插件加载的来源.
不太熟的属性，好像是和flash相关的。
    举个例子:
    Content-Security-Policy: object-src https://example.com/