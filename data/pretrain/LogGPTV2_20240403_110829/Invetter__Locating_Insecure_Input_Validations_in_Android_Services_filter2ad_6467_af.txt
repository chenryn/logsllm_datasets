more challenging. Specifically, we are not aware of any good learn-
ing strategies (e.g., by co-location or co-occurrence) that can be
generally applied. This is why instead of learning “sensitive inputs”,
we choose to learn “sensitive input validations” — as the latter can
be learned by co-occurrence.
Recommendations for implementing secure validations.
This paper reveals vulnerabilities caused by insecure input vali-
dations. By comparing insecure and secure input validation imple-
mentations, we recommend that sensitive input validation should
be performed in the following way: First, all the data derived from
Android apps, including Android SDK, should not be trusted. To
validate the app identity, system controlled app signatures (e.g.
information managed by the Binder mechanism) should be used.
Besides, any system level access controls should not be placed in
user apps or Android SDK. Then, vendor customization should
be more careful when modifying system services, so that not to
remove sensitive input validation.
8 RELATED WORK
In this section, we review related prior research and compare our
work with those studies.
Vulnerability detection in Android. The problem of security
vulnerabilities in Android has been extensively studied. Unixdo-
main [27] and ION [35] study the Android socket and low-level
heap interfaces, and report unprotected public interfaces by finding
missing permission validations. ASV [15] discovered a design trait
in the concurrency control mechanism of Android system server,
which may be vulnerable to DOS attacks. Besides, IntentScope [17]
shows that some Android components, e.g. services, accept inter-
component access from other components, e.g. apps, and because
some components mis-configured their intent filters, they can be
accessed by unauthorized apps. This paper also discuss access con-
trol of Android framework. Moreover, Zhang [37] shows that in
Android, after the app is uninstalled, some app data is not com-
pletely removed, causing privacy leakage. These works focus on a
specific vulnerability pattern, e.g. concurrency bugs. Different from
the work above, this paper focuses on input validation problems in
Android framework.
Additionally, some works focus on discussing the explicit permis-
sion based access control mechanism of Android. Felt [10] shows
that pre-installed apps can access critical system resources, mean-
while they may open interfaces that accept requests from low priv-
ileged apps. Since the access control in these apps may be weak,
low privileged malicious apps can utilize them as a step stone to
access high privileged resources. Kratos [26] compares the permis-
sion enforcement along different calling stacks of Android system
services, and finds vulnerabilities ranging from privilege escalation
to DoS. Besides, AceDroid [33] focuses on the inconsistent permis-
sion enforcement introduced by different vendors. Similar to our
purpose, buzzer [6] also aims to find incorrect input validations
in Android services, but unfortunately, we find that most of their
works are done manually, and only several vulnerabilities which
crash the services can be detected automatically. Gu, et al. [31] does
not formally define sensitive input validations and relies on a set of
manually-created lists of sensitive APIs. In addition, their system
reports 22 vulnerabilities but only 3 are related to incorrect sensi-
tive input validations (many are repeated invocations of APIs that
crash the system which is beyond our scope). By carefully studying
the 3 reported input validations, we notice that 2 of them are also
located by Invetter (one is listed in Table 4, and the other is dis-
carded during manual verification because of the low severeness),
and the remaining one was already fixed by Google. In this paper,
we discuss incorrect security forced input validations in Android
services, and weakened access controls in customized Android im-
ages. Our systematical approach reveals 86 vulnerabilities, among
which 20 are confirmed exploitable, from 8 Android images. To
the best of our knowledge, they are not systematically studied in
existing work.
Weakened access controls in Android customizations. The
security risks introduced by the customization of Android system
images are also studied before. Prior researches [1, 9, 10] focus
on the pre-installed apps in Android factory images and report
the presence of several kinds of the vulnerabilities, such as over-
privileged, permission re-delegation, hanging attribute references,
etc. Unlike these works, this paper focuses on the vulnerabilities
inside Android system services.
Other related studies [2, 11, 14, 30] find that customized system
images modify security configurations, and incorrect modifications
bring in security vulnerabilities. Like these papers, we also discuss
weakened security enforcement in customized images. However,
we focus on identifying insecure validations inside Android system
services, which requires deep understanding of the service code.
Static analysis on Android. We detect the vulnerabilities in An-
droid framework by using static analysis. Techniques serving the
similar purpose have been extensively studied [2, 4, 5, 26]. As one
of the most popular techniques used to analyze Android framework
as well as apps, static taint analysis monitors the data propagation
along Android framework as well as apps [3, 12, 18, 23, 29, 34]. They
answer the question of what data(source) flows into what destina-
tion(sink). Their use of static analysis techniques and source/sink
flow control is an important concept in our work. We use static
taint analysis to track the propagation of service input. PScout [4]
and Axplorer [5] use static analysis to enumerate all permission
checks in the Android framework and map all the permission us-
age to the corresponding system methods. Although they reveal
what permissions are enforced in a given method, they cannot find
missing validations. A similar work is Kratos, which finds missing
security validations by comparing permission enforcement along
different calling stacks. However, since its analysis is built on top
of the call graph, it cannot find finer-grained inconsistencies which
can be revealed in this paper. Besides, none of the above approaches
can identify incorrect sensitive input validation.
Other input validations. The traditional input validation stud-
ies mainly focus on the web apps (SQL injection) and programs
that are not memory-safe (C/C++ programs and OS kernel). For
example, Mokhov, et al [20] studies the vulnerabilities in Linux
kernel, with regards to two input validation errors: buffer over-
flow and boundary condition error. Scholte, et al. [25] studies the
evolution of input validations vulnerabilities in web apps. They
find that these vulnerabilities have not changed significantly and
most of them result from the missing check of structural input
strings. Yamaguchi, et al. [32] uses code property graph to char-
acterize known vulnerability types in Linux kernel, such as buffer
overflow, integer overflow, format string vulnerability and memory
corruption. In particular, these vulnerabilities rely on a small set
of well-defined sensitive input (e.g. user-space pointers) as input
to static taint analysis. However, our paper focuses on the oppo-
site end of the spectrum where we are not even clear what input
should be considered sensitive. Different from the above studies
that focus on well-known sensitive input, our paper focuses on the
sensitive input validations in Android system services, which are
unstructured, ill-defined and fragmented.
9 CONCLUSION
In this work, we make the first attempt to systematically study the
input validations used in Android framework. We propose Invetter,
a static analysis framework which focuses on the sensitive input
validations in the Android framework and in the customized third-
party system services. We demonstrate the effectiveness of our
approach by applying Invetter on 4 versions of Android AOSP
framework, and another 4 third-party vendors’ Android images.
Finally, Invetter reports 20 exploitable vulnerabilities which can
lead to various kinds of attacks, such as privilege escalation and
privacy leakage. Actually, most of these attacks do not require
any permission and can be conducted by any app installed on the
victim’s mobile device. Our findings show that a critical way to well
implement the access control should both consider the Android
permission and the inputs.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their insightful
comments that helped improve the quality of the paper. This work
was supported in part by the National Natural Science Foundation
of China (U1636204, 61602121, U1736208, 61602123), the National
Program on Key Basic Research (NO. 2015CB358800). Yuan Zhang
was supported in part by the Shanghai Sailing Program under Grant
16YF1400800. Min Yang is corresponding author of Shanghai Insti-
tute of Intelligent Electronics & Systems, and Shanghai Institute for
Advanced Communication and Data Science, and was supported in
part by the K.C.Wong education foundation, Hong Kong.
[2] Aafer, Y., Zhang, X., and Du, W. Harvesting inconsistent security configurations
REFERENCES
[1] Aafer, Y., Zhang, N., Zhang, Z., Zhang, X., Chen, K., Wang, X., Zhou, X., Du,
W., and Grace, M. Hare hunting in the wild android: A study on the threat of
hanging attribute references. In CCS (2015).
in custom android roms via differential analysis. In USENIX (2016).
[3] Arzt, S., Rasthofer, S., Fritz, C., SPRIDE, E.-B.-E., Bartel, A., Klein, J., Traon,
Y.-L., Octeau, D., and McDaniel, P. Flowdroid: Precise context, flow, field,
object-sensitive and lifecycle-aware taint analysis for android apps.
In Acm
Sigplan Notices (2014).
[4] Au, K.-W.-Y., Zhou, Y., Huang, Z., and Lie, D. Pscout: analyzing the android
permission specification. In CCS (2012).
[5] Backes, M., Bugiel, S., Derr, E., McDaniel, P., Octeau, D., and Weisgerber,
S. On demystifying the android application framework: Re-visiting android
permission specification analysis. In USENIX (2016).
bilities associated with android system services. In ACSAC (2015).
id=com.sndurkin.notificationcheck.
[7] Durkin, S. Notification check, 2014. https://play.google.com/store/apps/details?
[6] Cao, C., Gao, N., and Peng, L. Towards analyzing the input validation vulnera-
[9] Felt, A.-P., Chin, E., Hanna, S., Song, D., and Wagner, D. Android permissions
[8] Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung, J., McDaniel, P., and
Sheth, A. N. Taintdroid: An information-flow tracking system for realtime
privacy monitoring on smartphones. In OSDI (2010).
demystified. In CCS (2011).
and defenses. In USENIX (2011).
ison of android customizations. In WISEC (2015).
[10] Felt, A.-P., Wang, H. J., and Moshchuk, A. Permission re-delegation: Attacks
[11] Gallo, R., Hongo, P., and Dahab, R. Security and system architecture: Compar-
Operating
system
market
[12] Gibler, C., Crussell, J., Erickson, J., and Chen, H. Androidleaks: Automatically
detecting potential privacy leaks in android applications on a large scale. In Trust
(2012).
2018.
share,
https://developer.android.com/guide/topics/permissions/index.html.
[14] Grace, M., Zhou, Y., Wang, Z., and Jiang, X. Systematic detection of capability
[13] Google.
leaks in stock android smartphones. In NDSS (2012).
[15] Huang, H., Zhu, S., Chen, K., and Liu, P. From system services freezing to
system server shutdown in android: All you need is a loop in an app. In CCS
(2015).
[16] Huang J, Li Z, X. X. e. a. Supor: Precise and scalable sensitive user input detection
[18] Lu, L., Li, Z., Wu, Z., Lee, W., and Jiang, G. CHEX: Statically Vetting Android
[17] Jing, Y., Ahn, G.-J., Doupe, A., and Yi, J.-H. Checking intent-based communica-
for android apps. In USENIX (2015).
tion in android with intent space analysis. In CCS (2016).
Apps for Component Hijacking Vulnerabilities. In CCS (2012).
[19] Miller, G. A. Wordnet: A lexical database for english. In Communications of the
ACM (1995).
[20] Mokhov S A, Laverdiere M A, B. D. Taxonomy of linux kernel vulnerability solu-
tions. In Innovative Techniques in Instruction Technology, E-learning, E-assessment,
and Education. Springer (2008).
[21] Nan Y, Yang M, Y. Z. e. a. Uipicker: User-input privacy identification in mobile
applications. In USENIX (2015).
system market
https://www.netmarketshare.com/operating-system-market-
share.aspx?qprid=8&qpcustomd=1&qpsp=2017&qpnp=1 &qptimeframe=Y.
[22] NetMarketShare.
[23] Octeau, D., McDaniel, P., Jha, S., Bartel, A., and Bodden, E. Effective inter-
component communication mapping in android with epicc: An essential step
towards holistic security analysis. In USENIX (2013).
[24] research group, S. Soot, 2017. https://github.com/Sable/soot.
[25] Scholte T, Balzarotti D, K. E. Quo vadis? a study of the evolution of input
Operating
share,
2017.
validation vulnerabilities in web applications. In International Conference on
Financial Cryptography and Data Security. Springer (2011).
[26] Shao, Y., Ott, J., Chen, Q. A., Qian, Z., and Mao, Z. M. Kratos: Discovering
Inconsistent Security Policy Enforcement in the Android Framework. In NDSS
(2016).
[27] Shao, Y., Ott, J., Jia, Y.-J., Qian, Z., and Mao, Z. The misuse of android unix
[31] Yacong, G., Yao, C., and LingYun, Y. Exploiting android system services through
[30] Wu, L., Grace, M., Zhou, Y., Wu, C., and Jiang, X. The impact of vendor
domain sockets and security implications. In CCS (2016).
[28] Tan, P.-N., Michael, S., and Kumar, V. Introduction to data mining. In Addison-
Wesley (2005).
[29] Wei, F., Roy, S., Ou, X., et al. Amandroid: A Precise and General Inter-
Component Data Flow Analysis Framework for Security Vetting of Android
Apps. In CCS (2014).
customizations on android security. In CCS (2013).
bypassing service helpers. In SecureComm (2016).
[32] Yamaguchi, F., Golde, N., Arp, D., and Rieck, K. Modeling and discovering
vulnerabilities with code property graphs. In Security and Privacy (SP), 2014 IEEE
Symposium on (2014), IEEE, pp. 590–604.
[33] Yousra, A., Jianjun, H., and Yi, S. Acedroid: Normalizing diverse android access
control checks for inconsistency detection. In NDSS (2018).
[34] Yuhong, N., Zhemin, Y., and XiaoFeng, W. Finding clues for your secrets:
Semantics-driven, learning-based privacy discovery in mobile apps. In NDSS
(2018).
[35] Zhang, H., She, D., and Qian, Z. Android ion hazard: The curse of customizable
[36] Zhang, M., and Duan, Y. Semantics-aware android malware classification using
memory management system. In CCS (2016).
weighted contextual api dependency graphs. In CCS (2014).
[37] Zhang, X., Ying, K., Aafer, Y., Zhenshen, Q., and Wenliang, D. Life after app
uninstallation: Are the data still alive? data residue attacks on android. In NDSS
(2016).