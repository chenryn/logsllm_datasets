### Challenges in Learning Strategies
The identification of effective learning strategies, such as those based on co-location or co-occurrence, remains a significant challenge. This is why, instead of attempting to learn "sensitive inputs," we focus on learning "sensitive input validations." The latter can be effectively learned through co-occurrence.

### Recommendations for Secure Input Validations
This paper highlights the vulnerabilities associated with insecure input validations. By comparing insecure and secure validation implementations, we recommend the following approach for sensitive input validation:
1. **Trust No Data**: Do not trust any data derived from Android apps, including the Android SDK.
2. **App Identity Validation**: Use system-controlled app signatures (e.g., information managed by the Binder mechanism) to validate app identity.
3. **Access Control Placement**: Ensure that system-level access controls are not placed in user apps or the Android SDK.
4. **Vendor Customization Caution**: Be cautious when modifying system services to avoid removing sensitive input validations.

### Related Work
In this section, we review and compare our work with prior research.

#### Vulnerability Detection in Android
Security vulnerabilities in Android have been extensively studied. For example:
- **Unixdomain [27]** and **ION [35]**: These studies examine Android sockets and low-level heap interfaces, reporting unprotected public interfaces due to missing permission validations.
- **ASV [15]**: This study discovered a design flaw in the concurrency control mechanism of the Android system server, making it vulnerable to DOS attacks.
- **IntentScope [17]**: This paper highlights that some Android components, such as services, accept inter-component access from other components, leading to unauthorized access due to misconfigured intent filters.
- **Zhang [37]**: This work shows that some app data remains after uninstallation, causing privacy leaks.

These studies focus on specific vulnerability patterns, whereas our paper addresses input validation issues in the Android framework.

#### Explicit Permission-Based Access Control
Some works discuss the explicit permission-based access control mechanism in Android:
- **Felt [10]**: This study reveals that pre-installed apps can access critical system resources and may open interfaces to low-privileged apps, potentially leading to privilege escalation.
- **Kratos [26]**: This research compares permission enforcement along different calling stacks of Android system services, identifying vulnerabilities ranging from privilege escalation to DoS.
- **AceDroid [33]**: This work focuses on inconsistent permission enforcement introduced by different vendors.

**Buzzer [6]** aims to find incorrect input validations in Android services, but most of their work is manual, and only a few vulnerabilities that crash services are detected automatically. **Gu et al. [31]** do not formally define sensitive input validations and rely on manually-created lists of sensitive APIs. Their system reports 22 vulnerabilities, but only 3 are related to incorrect sensitive input validations. In our paper, we systematically study incorrect security-enforced input validations and weakened access controls in customized Android images, revealing 86 vulnerabilities, with 20 confirmed exploitable across 8 Android images.

#### Weakened Access Controls in Customized Android Images
Prior research has also examined the security risks introduced by customizations in Android system images:
- **Aafer et al. [1, 9, 10]**: These studies focus on pre-installed apps in Android factory images, reporting over-privileged, permission re-delegation, and hanging attribute reference vulnerabilities.
- **Other Studies [2, 11, 14, 30]**: These works find that customized system images modify security configurations, leading to security vulnerabilities.

Our paper, however, focuses on vulnerabilities within Android system services, requiring a deep understanding of the service code.

#### Static Analysis on Android
We use static analysis to detect vulnerabilities in the Android framework. Techniques like taint analysis [3, 12, 18, 23, 29, 34] monitor data propagation in the Android framework and apps. PScout [4] and Axplorer [5] enumerate all permission checks in the Android framework, mapping permission usage to system methods. Kratos finds missing security validations by comparing permission enforcement along different calling stacks, but it cannot identify finer-grained inconsistencies. Our approach uses static taint analysis to track the propagation of service input, focusing on identifying incorrect sensitive input validations.

#### Other Input Validations
Traditional input validation studies mainly focus on web applications (SQL injection) and non-memory-safe programs (C/C++ and OS kernel). For instance:
- **Mokhov et al. [20]**: This study examines Linux kernel vulnerabilities related to buffer overflow and boundary condition errors.
- **Scholte et al. [25]**: This work analyzes the evolution of input validation vulnerabilities in web applications, finding that most result from missing structural input string checks.
- **Yamaguchi et al. [32]**: This research uses code property graphs to characterize known vulnerability types in the Linux kernel, such as buffer overflow, integer overflow, format string vulnerability, and memory corruption.

Our paper, however, focuses on unstructured, ill-defined, and fragmented sensitive input validations in Android system services, where it is unclear what input should be considered sensitive.

### Conclusion
In this work, we present the first systematic study of input validations in the Android framework. We propose Invetter, a static analysis framework that focuses on sensitive input validations in the Android framework and customized third-party system services. Applying Invetter to 4 versions of the Android AOSP framework and 4 third-party vendor images, we report 20 exploitable vulnerabilities, leading to various attacks such as privilege escalation and privacy leakage. Our findings highlight the importance of considering both Android permissions and inputs in implementing robust access controls.

### Acknowledgments
We thank the anonymous reviewers for their insightful comments, which significantly improved the quality of the paper. This work was supported in part by the National Natural Science Foundation of China (U1636204, 61602121, U1736208, 61602123), the National Program on Key Basic Research (NO. 2015CB358800), the Shanghai Sailing Program (16YF1400800), and the K.C. Wong Education Foundation, Hong Kong.

### References
[References listed here as provided in the original text]

This revised version enhances the clarity, coherence, and professionalism of the text, making it more suitable for academic and technical audiences.