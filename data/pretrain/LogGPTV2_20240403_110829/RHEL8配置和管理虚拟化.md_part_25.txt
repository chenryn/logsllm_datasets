::: title
**建议**
:::
不要使用此流程将整个磁盘分配为存储池（例如
`/dev/sdb`{.literal}）。不应该为虚拟机授予对整个磁盘或块设备的写入权限。此方法应当仅用于分配分区（例如，`/dev/sdb1`{.literal}）到存储池。
::: itemizedlist
**先决条件**
-   确保您的管理程序支持基于文件系统的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'fs' supported='yes'"
    ```
    如果该命令显示任何输出结果，则代表支持基于文件的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal}
    命令定义和创建文件系统类型存储池。例如，要创建一个名为
    `guest_images_fs`{.literal} 的存储池，它使用
    [**/dev/sdc1**]{.strong} 分区，并挂载到 /guest_images 目录中：
    ``` literallayout
    # virsh pool-define-as guest_images_fs fs --source-dev /dev/sdc1 --target /guest_images
    Pool guest_images_fs defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看
    ["基于文件系统的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#filesystem-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于文件系统的存储池参数"){.xref}。
2.  [**定义存储池目标路径**]{.strong}
    使用 `virsh pool-build`{.literal}
    命令，为预格式化的文件系统存储池存储池目标路径创建存储池目标路径，初始化存储源设备，以及定义数据格式。
    ``` literallayout
    # virsh pool-build guest_images_fs
      Pool guest_images_fs built
    # ls -la /guest_images
      total 8
      drwx------.  2 root root 4096 May 31 19:38 .
      dr-xr-xr-x. 25 root root 4096 May 31 19:38 ..
    ```
3.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令，验证池是否已创建好。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_fs      inactive   no
    ```
4.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_fs
      Pool guest_images_fs started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
5.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，通过 `virsh`{.literal} 命令定义的存储池不会设置为每次
    libvirtd 启动时自动启动。使用 `virsh pool-autostart`{.literal}
    命令将存储池配置为自动启动。
    ``` literallayout
    # virsh pool-autostart guest_images_fs
      Pool guest_images_fs marked as autostarted
    ```
:::
::: orderedlist
**验证**
1.  使用 `virsh pool-info`{.literal} 命令验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_fs
      Name:           guest_images_fs
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
2.  验证文件系统上目标路径中是否存在 `丢失+found`{.literal}
    目录，表示已挂载该设备。
    ``` literallayout
    # mount | grep /guest_images
      /dev/sdc1 on /guest_images type ext4 (rw)
    # ls -la /guest_images
      total 24
      drwxr-xr-x.  3 root root  4096 May 31 19:47 .
      dr-xr-xr-x. 25 root root  4096 May 31 19:38 ..
      drwx------.  2 root root 16384 May 31 14:18 lost+found
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-glusterfs-based-storage-pools-using-the-cli_creating-storage-for-virtual-machines-using-the-cli}使用 CLI 创建基于 GlusterFS 的存储池 {.title}
:::
GlusterFS
是一个用户空间文件系统，使用用户空间(FUSE)软件接口中的文件系统。如果要在
Gluster 服务器上有一个存储池，您可以使用 `virsh`{.literal}
实用程序创建基于 GlusterFS 的存储池。
::: itemizedlist
**先决条件**
-   在主机上创建基于 GlusterFS 的存储池前，先准备 Gluster。
    ::: orderedlist
    1.  使用以下命令列出 Gluster 服务器的状态来获取 Gluster 服务器的 IP
        地址：
        ``` literallayout
        # gluster volume status
        Status of volume: gluster-vol1
        Gluster process                           Port	Online	Pid
        ------------------------------------------------------------
        Brick 222.111.222.111:/gluster-vol1       49155	  Y    18634
        Task Status of Volume gluster-vol1
        ------------------------------------------------------------
        There are no active volume tasks
        ```
    2.  如果没有安装，请安装 `glusterfs-fuse`{.literal} 软件包。
    3.  如果没有启用，请启用 `virt_use_fusefs`{.literal}
        布尔值。检查是否已启用。
        ``` literallayout
        # setsebool virt_use_fusefs on
        # getsebool virt_use_fusefs
        virt_use_fusefs --> on
        ```
    :::
-   确保您的管理程序支持基于 GlusterFS 的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'gluster' supported='yes'"
    ```
    如果 命令显示任何输出，则支持基于 GlusterFS 的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal} 命令定义和创建基于 GlusterFS
    的存储池。例如，要创建一个名为 `guest_images_glusterfs`{.literal}
    的存储池，它使用名为 `gluster-vol1`{.literal} 且 IP 为
    `111.222.111.222`{.literal} 的 Gluster 服务器，并且挂载到 Gluster
    服务器的根目录中：
    ``` literallayout
    # virsh pool-define-as --name guest_images_glusterfs --type gluster --source-host 111.222.111.222 --source-name gluster-vol1 --source-path /
    Pool guest_images_glusterfs defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看 ["glusterfs
    基于存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#glusterfs-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "glusterfs 基于存储池参数"){.xref}。
2.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令，验证池是否已创建好。
    ``` literallayout
    # virsh pool-list --all
      Name                    State      Autostart
      --------------------------------------------
      default                 active     yes
      guest_images_glusterfs  inactive   no
    ```
3.  [**启动存储池**]{.strong}
    使用 `virsh pool-start`{.literal} 命令挂载存储池。
    ``` literallayout
    # virsh pool-start guest_images_glusterfs
      Pool guest_images_glusterfs started
    ```
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    `virsh pool-start`{.literal}
    命令仅适用于持久性存储池。临时存储池创建时会自动启动。
    :::
4.  [**\[可选\]自动启动过程**]{.strong}
    默认情况下，通过 `virsh`{.literal} 命令定义的存储池不会设置为每次
    libvirtd 启动时自动启动。使用 `virsh pool-autostart`{.literal}
    命令将存储池配置为自动启动。
    ``` literallayout
    # virsh pool-autostart guest_images_glusterfs
      Pool guest_images_glusterfs marked as autostarted
    ```
:::
::: itemizedlist
**验证**
-   使用 `virsh pool-info`{.literal} 命令验证存储池是否处于
    `running`{.literal}
    状态。检查报告的大小是否如预期，以及是否正确配置了自动启动。
    ``` literallayout
    # virsh pool-info guest_images_glusterfs
      Name:           guest_images_glusterfs
      UUID:           c7466869-e82a-a66c-2187-dc9d6f0877d0
      State:          running
      Persistent:     yes
      Autostart:      yes
      Capacity:       458.39 GB
      Allocation:     197.91 MB
      Available:      458.20 GB
    ```
:::
:::
::: section
::: titlepage
## []{#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#creating-iscsi-based-storage-pools-using-the-cli_creating-storage-for-virtual-machines-using-the-cli}使用 CLI 创建基于 iSCSI 的存储池 {.title}
:::
互联网小型计算机系统接口(iSCSI)是基于 IP
的存储网络标准，用于连接数据存储设施。如果要在 iSCSI
服务器上有一个存储池，您可以使用 `virsh`{.literal} 实用程序创建基于
iSCSI 的存储池。
::: itemizedlist
**先决条件**
-   确定您的管理程序支持基于 iSCSI 的存储池：
    ``` literallayout
    # virsh pool-capabilities | grep "'iscsi' supported='yes'"
    ```
    如果该命令显示任何输出结果，则代表支持基于 iSCSI 的池。
:::
::: orderedlist
**流程**
1.  [**创建存储池**]{.strong}
    使用 `virsh pool-define-as`{.literal} 命令定义和创建 iSCSI
    类型的存储池。例如，要创建一个名为 `guest_images_iscsi`{.literal}
    的存储池，它使用
    `server1. example.com 上的 theiqn.2010-05.com.example.`{.literal}
    server1:iscsirhel7guest``{=html} IQN，并挂载到
    `/dev/disk/by-path`{.literal} 路径中：
    ``` literallayout
    # virsh pool-define-as --name guest_images_iscsi --type iscsi --source-host server1.example.com --source-dev iqn.2010-05.com.example.server1:iscsirhel7guest --target /dev/disk/by-path
    Pool guest_images_iscsi defined
    ```
    如果您已经有要创建的存储池的 XML 配置，也可以根据 XML
    定义池。详情请查看 ["基于 iSCSI
    的存储池参数"一节](#managing-storage-for-virtual-machines_configuring-and-managing-virtualization.html#iscsi-based-storage-pool-parameters_assembly_parameters-for-creating-storage-pools "基于 iSCSI 的存储池参数"){.xref}。
2.  [**验证是否已创建池**]{.strong}
    使用 `virsh pool-list`{.literal} 命令，验证池是否已创建好。
    ``` literallayout
    # virsh pool-list --all
      Name                 State      Autostart
      -----------------------------------------
      default              active     yes
      guest_images_iscsi   inactive   no
    ```
3.  [**启动存储池**]{.strong}