value 选项和 list-max-ziplist-entries 选项的说明。
8.3.1编码转换
意一个不能被满足时，对象的编码转换操作就会被执行，原本保存在压缩列表里的所有列表
以下代码展示了列表对象因为保存了长度太大的元素而进行编码转换的情况：
对于使用 ziplist 编码的列表对象来说，当使用 ziplist 编码所需的两个条件的任
以上两个条件的上限值是可以修改的，具体请看配置文件中关于 list-max-Ziplist-
"linkedlist"
redis> OBJECT ENCODING integers
编码已改变
(integer) 513
#再向列表对象推入一个新元素，使得对象保存的元素数量达到513.个
"ziplist"
redis> OBJECT ENCODING integers
redis> LLEN integers
redis> EVAL "for i=l, 512 do redis.call('RPUsH', KEYS[l],i)end" 1 "integers"
#列表对象包含512个元素
除此之外，以下代码展示了列表对象因为保存的元素数量过多而进行编码转换的情况：
"linkedlist"
redis> OBJECT ENCODING blah
编码已改变
(integer)4
#将一个 65 字节长的元素推入列表对象中
"ziplist"
redis> OBJECT ENCODING blah
#所有元素的长度都小于64字节
口 列表对象保存的元素数量小于 512个；不能满足这两个条件的列表对象需要使用
口列表对象保存的所有字符串元素的长度都小于64字节；
当列表对象可以同时满足以下两个条件时，列表对象使用ziplist 编码：
(nil)
(integer)3
linkedlist 编码。
---
## Page 75
压缩列表节点推人到压缩列表表尾，因此：
希对象时，程序会先将保存了键的压缩列表节点推人到压缩列表表尾，然后再将保存了值的
8.4
表 8-8 列出了其中一部分列表键命令，以及这些命令在不同编码的列表对象下的实现方法。
8.3.2
LSET
LTRIM
LREM
LINSERT
LLEN
LINDEX
RPOP
LPOP
RPUSH
LPUSH
因为列表键的值为列表对象，
口保存了同一键值对的两个节点总是紧挨在一起，保存键的节点在前，保存值的节点
ziplist 编码的哈希对象使用压缩列表作为底层实现，每当有新的键值对要加入到哈
命令
哈希对象的编码可以是 ziplist 或者hashtable。
在后：
哈希对象
列表命令的实现
Insert 函数，将一个包含给定元素的新节点插
表指定索引上的现有节点，然后调用 ziplist-
缩列表中所有不在指定索引范围内的节点
函数删除包含了给定元素的节点
的其他位置时，使用 ziplistInsert 函数
用 ziplistPush 函数；插人新节点到压缩列表
指定节点，然后返回节点所保存的元素
调用 ziplist Delete 函数删除表尾节点
尾节点，在向用户返回节点所保存的元素之后，
调用 ziplistDelete 函数删除表头节点
头节点，在向用户返回节点所保存的元素之后，
人到相同索引上面
调用 ziplistDelete 函数。先删除压缩列
缩列表的表尾 
缩列表的表头 
遍历压缩列表节点，并调用 ziplistDelete
插人新节点到压缩列表的表头或者表尾时，使
调用 ziplistLen 函数返回压缩列表的长度 
调用 ziplistIndex 函数定位压缩列表中的
调用ziplistIndex 函数定位压缩列表的表
调用 ziplistIndex 函数定位压缩列表的表
调用 ziplistPush 函数，将新元素推人到压
调用 ziplistPush 函数，将新元素推人到压
ziplist 编码的实现方法
所以用于列表键的所有命令都是针对列表对象来构建的，
表 8-8列表命令的实现
索引上的节点，然后通过赋值操作更新节点的值
数删除链表中所有不在指定索引范围内的节点
数删除包含了给定元素的节点
到双端链表的指定位置
节点，然后返回节点所保存的元素
listDelNode 函数删除表尾节点
点，在向用户返回节点所保存的元素之后，调用
listDelNode 函数删除表头节点
点，在向用户返回节点所保存的元素之后，调用
人到双端链表的表尾
人到双端链表的表头
调用 listIndex 函数，定位到双端链表指定
遍历双端链表节点，并调用 1istDelNode 函
遍历双端链表节点，并调用1istDelNode 函
调用listInsertNode 函数，将新节点插人
调用 listLength 函数返回双端链表的长度
调用listIndex函数定位双端链表中的指定
调用 listLast 函数定位双端链表的表尾节
调用 listFirst 函数定位双端链表的表头节
调用 listAddNodeTai1 函数，将新元素推
调用 listAddNodeHead 函数，将新元素推
linkedist 编码的实现方法
第8章
对
L
---
## Page 76
72·第一部分数据结构与对象
编码的哈希对象，那么这个哈希对象应该会是图8-11所示的样子。
值对都使用一个字典键值对来保存：
子，其中对象所使用的压缩列表如图 8-10 所示。
编码，那么这个值对象将会是图8-9所示的样
键的值：
zlbyteszltail
举个例子，如果前面 profile 键创建的不是 ziplist 编码的哈希对象，而是 hashtable
口字典的每个键都是一个字符串对象，对象中保存了键值对的键；
另一方面，hashtable 编码的哈希对象使用字典作为底层实现，哈希对象中的每个键
如果profile键的值对象使用的是ziplist
口字典的每个值都是一个字符串对象，对象中保存了键值对的值。
redis> HsET profile age 25
redis> HSET profile name "Tom"
举个例子，如果我们执行以下HSET命令，那么服务器将创建一个列表对象作为profile
口先添加到哈希对象中的键值对会被放在压缩列表的表头方向，而后来添加到哈希对
(integer) 1
(integer) 1
(integer)
象中的键值对会被放在压缩列表的表尾方向。
L
REDIS_ENCODING_HT
zllen"name"
第一个添加的键值对
REDIS_HASH
redisobject
图 8-1lhashtable 编码的 profile 哈希对象
encoding
图8-10profile哈希对象的压缩列表底层实现
ptr
type
:键
"Tom"
Stringobject
Stringobject
Stringobject
"age*25
第二个添加的键值对
"name"
dict
图 8-9 ziplist 编码的 profile 哈希对象
REDIS_ENCODING_ZIPLIST
"career""Programmer"zlend
Stringobject
 Stringobject
Stringobject
REDIS_HASH
redisobject
encoding
"Tom"
ptr
type
25
最新添加的键值对
压缩列表
---
## Page 77
示了这种情况的一个示例：
对都会被转移并保存到字典里面，对象的编码也会从 ziplist 变为 hashtable。
意一个不能被满足时，对象的编码转换操作就会被执行，原本保存在压缩列表里的所有键值
value 选项和 hash-max-ziplist-entries 选项的说明。
注意
8.4.1
最后，以下代码展示了哈希对象因为包含的键值对数量过多而引起编码转换的情况：
对于使用ziplist 编码的列表对象来说，当使用 ziplist 编码所需的两个条件的任
这两个条件的上限值是可以修改的，具体请看配置文件中关于hash-max-ziplist-
"hashtable"
编码已改变
#向哈希对象添加一个新的键值对，值的长度为68字节
#哈希对象只包含一个键和值都不超过64个字节的键值对
除了键的长度太大会引起编码转换之外，值的长度太大也会引起编码转换，以下代码展
"hashtable"
redis> OBJECT ENCODING book
#哈希对象只包含一个键和值都不超过 64 个字节的键值对
以下代码展示了哈希对象因为键值对的键长度太大而引起编码转换的情况：
口 哈希对象保存的键值对数量小于 512个；不能满足这两个条件的哈希对象需要使用
当哈希对象可以同时满足以下两个条件时，哈希对象使用ziplist 编码：
redis>
(integer)
redis>
redis> OBJECT ENCODING blah
#编码已改变
(integer) 1
#向哈希对象添加一个新的键值对，键的长度为66字节
(integer) 1
口哈希对象保存的所有键值对的键和值的字符串长度都小于64字节；
hashtable 编码。
编码转换
string
OBJECT ENCODING blah
 HSET biah story
OBJECT ENCODING book
"many string ... many string ... many string ... many
第8章
---
## Page 78
74+3
表 8-9列出了其中一部分哈希键命令，
8.4.2哈希命令的实现
HGETALL
HLEN
HDEL
HEXISTS
HGET
HSET
命令
因为哈希键的值为哈希对象，
第一部分 数据结构与对象
"hashtable"
redis> OBJECT ENCODING numbers
#编码改变
(integer) 513
redis> HLEN numbers
redis> HMSE
#再向哈希对象添加一个新的键值对，使得键值对的数量变成513个
"ziplist"
redis> OBJECT ENCODING numbers
(integer) 512
redis> HLEN numbers
(nil)
redis> EVAL
#创建一个包含 512 个键值对的哈希对象
和值（都是节点）
的键值对的数量
数量，将这个数量除以2，得出的结果就是压缩列表保存
值节点都删除掉
所对应的节点，然后将相应的键节点、以及键节点旁边的
话就说明键值对不存在
所对应的节点，如果找到的话说明键值对存在，没找到的
指针移动到键节点旁边的值节点，最后返回值节点
定键所对应的节点，然后调用 ziplistNext 函数，将
到压缩列表的表尾
的表尾，然后再次调用ziplistPush 函数，将值推人
遍历整个压缩列表，片
调用 ziplistFind 函数，在压缩列表中查找指定键 
调用 ziplistFind 函数，在压缩列表中查找指定键
首先调用 ziplistFind 函数，在压缩列表中查找指
首先调用 ziplistPush 函数，将键推人到压缩列
用ziplistLen函
ET
"for i=l, 512 do redis.call('HsET', KEYS[1l, i, i)end" 1 "numbers"
numbers
ziplist 编码实现方法
"key"
用ziplistGeti
数，取得日
所以用于哈希键的所有命令都是针对哈希对象来构建的，
"value"
表 8-9
，以及这些命令在不同编码的哈希对象下的实现方法。
压缩列表包含节点的
哈希命令的实现
函数返回所有键
的
表
数返回字典的值
数返回字典的键，
包含的键值对数量
的键值对数量，这个数量就是哈希对象
所对应的键值对从字典中删除掉
在，没找到的话就说明键值对不存在
找给定键，如果找到的话说明键值对存
返回该键所对应的值
给定键，然后调用 dictGetVal 函数,
调用 dictSize 函数，返回字典包含
调用 dictDelete 函数，将指定键
调用 dictFind 函数，在字典中查找
到字典里面
遍历整个字典，
调用 dictFind 函数，在字典中查
调用 dictAdd 函数，将新节点添加
hashtable 编码的实现方法
用dictGetVa1
用dictGetKey
---
## Page 79
entries 选项的说明。
注意
8.5.1编码的转换
个字符串对象，
存在整数集合里面。
8.5
 第二个条件的上限值是可以修改的，具体请看配置文件中关于 set-max-intset-
不能满足这两个条件的集合对象需要使用hashtable 编码。
当集合对象可以同时满足以下两个条件时，对象使用intset 编码：
举个例子，以下代码将创建一个如图 8-13 所示的 hashtable 编码集合对象：
另一方面，hashtable 编码的集合对象使用字典作为底层实现，字典的每个键都是-
举个例子，以下代码将创建一个如图 8-12所示的intset 编码集合对象：
intset 编码的集合对象使用整数集合作为底层实现，集合对象包含的所有元素都被保
口集合对象保存的元素数量不超过512个。
口集合对象保存的所有元素都是整数值；
集合对象的编码可以是intset 或者hashtable。
(integer)3
(integer) 3
redis> SADD numbers 1 3 5
集合对象
REDIS_ENCODING_INTSET
，每个字符串对象包含了一个集合元素，而字典的值则全部被设置为NULL。
REDIS_SET
redisobject
encoding
REDIS_ENCODING_HT
ptr