improve veriﬁcation efﬁciency, we provide implementation
results that suggest this scheme is practical for real-world use.
A tight reduction proves our scheme secure under standard
cryptographic assumptions. We leave formalization of end-
to-end security and protection against distribution attacks as
interesting open problems.
ACKNOWLEDGMENTS
We thank Michael Walﬁsh for ﬁrst alerting us to the
distribution attack. We also thank Petar Maymounkov and
Benny Pinkas for helpful discussions, and our shepherd Dan
Wallach for his feedback. This research was conducted as
part of the IRIS project (http://project-iris.net/),
supported by the NSF under Cooperative Agreement No. ANI-
0225660. Maxwell Krohn is supported by an MIT EECS
Fellowship, Michael Freedman by an NDSEG Fellowship, and
David Mazi`eres by an Alfred P. Sloan Research Fellowship.
REFERENCES
[1] S. Saroui, K. P. Gummadi, R. J. Dunn, S. D. Gribble, and H. M.
Levy, “An analysis of Internet content delivery systems,” in Proc. 5th
Symposium on Operating Systems Design and Implementation (OSDI),
Boston, MA, Oct. 2002.
[2] M. Luby, M. Mitzenmacher, A. Shokrollahi, D. Spielman, and V. Ste-
mann, “Practical loss-resilient codes,” in Proc. 29th Annual ACM
Symposium on Theory of Computing (STOC), El Paso, TX, May 1997.
[3] M. Luby, “LT codes,” in Proc. 43rd Annual Symposium on Foundations
of Computer Science (FOCS), Vancouver, Canada, Nov. 2002.
[4] P. Maymounkov, “Online codes,” NYU, Tech. Rep. 2002-833, Nov.
2002.
[5] A. Shokrollahi, “Raptor codes,” Digital Fountain, Inc., Tech. Rep.
DF2003-06-001, June 2003.
[6] J. Byers, M. Luby, M. Mitzenmacher, and A. Rege, “A Digital Fountain
approach to reliable distribution of bulk data,” in Proc. ACM SIGCOMM
’98, Vancouver, Canada, Sept. 1998.
[7] J. Byers, M. Luby, and M. Mitzenmacher, “Accessing multiple mirror
sites in parallel: Using Tornado codes to speed up downloads,” in Proc.
IEEE INFOCOM ’99, New York, NY, Mar. 1999.
[8] J. Byers, J. Considine, M. Mitzenmacher, and S. Rost, “Informedcontent
delivery across adaptive overlay networks,” in Proc. ACM SIGCOMM
’02, Aug. 2002.
[9] P. Maymounkov and D. Mazi`eres, “Rateless codes and big downloads,”
in Proc. 2nd International Workshop on Peer-to-Peer Systems (IPTPS),
Berkeley, CA, Feb. 2003.
[10] M. Castro, P. Druschel, A.-M. Kermarrec, A. Nandi, A. Rowstron,
and A. Singh, “Splitstream: High-bandwidth multicast in a cooperative
environment,” in Proc. 18th ACM Symposium on Operating Systems
Principles (SOSP), Bolton’s Landing, NY, Oct. 2003.
[11] D. Kosti´c, A. Rodriguez, J. Albrecht, and A. Vahdat, “Bullet: High
bandwidth data dissemination using an overlay mesh,” in Proc. 18th
ACM Symposium on Operating Systems Principles (SOSP), Bolton’s
Landing, NY, Oct. 2003.
[12] L. Rizzo, “Effective erasure codes for reliable computer communication
protocols,” ACM Computer Communication Review, vol. 27, no. 2, Apr.
1997.
[13] FIPS 180-1, Secure Hash Standard, U.S. Department of Com-
merce/N.I.S.T., National Technical Information Service, Springﬁeld, VA,
Apr. 1995.
[14] C. Karlof, N. Sastry, Y. Li, A. Perrig, and J. Tygar, “Distillation codes
and applications to DoS resistant multicast authentication,” in Proc.
11th Network and Distributed Systems Security Symposium (NDSS), San
Diego, CA, Feb. 2004.
[15] R. C. Merkle, “A digital signature based on a conventional encryption
function,” in Advances in Cryptology—CRYPTO ’87, Santa Barbara, CA,
Aug. 1987.
[16] National Institute of Standards and Technology, “Digital Signature
Standard (DSS),” Federal Information Processing Standards Publication
186-2, U.S. Dept. of Commerce/NIST, 2000.
[17] T. P. Pedersen, “Non-interactive and information-theoretic secure veri-
ﬁable secret sharing,” in Advances in Cryptology—CRYPTO ’91, Santa
Barbara, CA, Aug. 1991.
[18] D. Chaum, E. van Heijst, and B. Pﬁtzmann, “Cryptographically strong
undeniable signatures, unconditionally secure for the signer,” in Ad-
vances in Cryptology—CRYPTO ’91, Santa Barbara, CA, Aug. 1991.
[19] M. Bellare, J. Garay, and T. Rabin, “Fast batch veriﬁcation for modular
exponentiation and digital signatures,” in Advances in Cryptology—
EUROCRYPT 98, Helsinki, Finland, May 1998.
[20] M. O. Rabin, “Digitalized signatures and public key functions as
intractable as factorization,” MIT Laboratory for Computer Science,
Tech. Rep. TR-212, Jan. 1979.
[21] M. Bellare, O. Goldreich, and S. Goldwasser, “Incremental cryptogra-
phy: The case of hashing and signing,” in Advances in Cryptology—
CRYPTO ’94, Santa Barbara, CA, Aug. 1994.
[22] R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas,
“Multicast security: A taxonomy and some efﬁcient constructions,” in
Proc. IEEE INFOCOM ’99, New York, NY, 1999.
[23] R. Gennaro and P. Rohatgi, “How to sign digital streams,” in Advances
in Cryptology—CRYPTO ’97, Santa Barbara, CA, Aug. 1997.
[24] C. K. Wong and S. S. Lam, “Digitalsignatures for ﬂows and multicasts,”
in Proc. IEEE International Conference on Network Protocols, Austin,
TX, Oct. 1998.
[25] P. Rohatgi, “A compact and fast hybrid signature scheme for multicast
packet authentication,” in Proc. 6th ACM Conference on Computer and
Communication Security (CCS), Singapore, Nov. 1999.
[26] P. Golle and N. Modadugu, “Authenticated streamed data in the pre-
sernce of random packet loss,” in Proc. Network and Distributed System
Security Symposium (NDSS), San Diego, CA, Feb. 2001.
[27] S. Miner and J. Staddon, “Graph-based authentication of digital
streams,” in Proc. IEEE Symposium on Security and Privacy, Oakland,
CA, May 2000.
[28] A. Pannetrat and R. Molva, “Efﬁcient multicast packet authentication,”
in Proc. Network and Distributed System Security Symposium (NDSS),
San Diego, CA, Feb. 2003.
[29] J. M. Park, E. K. P. Chong, and H. J. Siegel, “Efﬁcient multicast stream
authentication using erasure codes,” ACM Trans. Inf. Syst. Secur., vol. 6,
no. 2, 2003.
[30] S. Cheung, “An efﬁcient message authentication scheme for link state
routing,” in Proc. 13th Annual Computer Security Applications Confer-
ence, San Diego, CA, Dec. 1997.
[31] R. Anderson, F. Bergadano, B. Crispo, J.-H. Lee, C. Manifavas, and
R. Needham, “A new family of authentication protocols,” Operating
Systems Review, vol. 32, no. 4, Oct. 1998.
[32] A. Perrig, R. Canetti, D. Song, and D. Tygar, “Efﬁcient authentication
and signature of multicast streams over lossy channels,” in Proc. IEEE
Symposium on Security and Privacy, Oakland, CA, May 2000.
[33] ——,“Efﬁcient and secure source authentication for multicast,” in
Proc. Network and Distributed System Security Symposium (NDSS), San
Diego, CA, Feb. 2001.
[34] A. Perrig, “The BiBa one-time signature and broadcast authentication
protocol,” in Proc. 8th ACM Conference on Computer and Communica-
tion Security (CCS), Philadelphia, PA, Nov. 2001.
[35] J. Benaloh and M. de Mare, “One-way accumulators: A decentral-
ized alternative to digital sinatures,” in Advances in Cryptology—
EUROCRYPT 93, Lofthus, Norway, May 1993.
[36] N. Bari´c and B. Pﬁtzmann, “Collision-free accumulators and fail-
stop signature schemes without trees,” in Advances in Cryptology—
EUROCRYPT 97, Konstanz, Germany, May 1997.
[37] M. Bellare and D. Micciancio, “A new paradigm for collision-free
hashing: Incrementality at reduced cost,” in Advances in Cryptology—
EUROCRYPT 97, Konstanz, Germany, May 1997.
[38] J. Camenisch and A. Lysyanskaya, “Dynamic accumulators and appli-
cation to efﬁcient revocation of anonymous credentials,” in Advances in
Cryptology—CRYPTO 2002, Santa Barbara, CA, Aug. 2002.
[39] G. Tsudik and S. Xu, “Accumulating composites and improved group
signing,” in Advances in Cryptology—ASIACRYPT-2003, Taipei, Taiwan,
Nov. 2003.
[40] S. Micali and R. Rivest, “Transitive signature schemes,” in Progress in
Cryptology — CT-RSA 2002, San Jose, CA, Feb. 2002.
[41] S. Chari, T. Rabin, and R. Rivest, “An efﬁcient signature scheme for
route aggregation,” Feb. 2002.
[42] R. Johnson, D. Molnar, D. Song, and D. Wagner, “Homomorphic
signature schemes,” in Progress in Cryptology — CT-RSA 2002, San
Jose, CA, Feb. 2002.
APPENDIX I
CORRECTNESS OF BATCHED VERIFICATION
(i.e.,
Consider the batched veriﬁcation algorithm given in Sec-
tion IV-D. To prove it correct
that correct check
blocks will be validated), let us examine an arbitrary hash
(G; HG(F )). For notational convenience, we write y and y 0
computed in Step 4 in terms of an element g 2   p of order q
and row vector r such that g r = g mod p. These elements
are guaranteed to exist, even if they cannot be computed
efﬁciently. Thus,
m
m
y0 =
gzi
i =
Yi=1
Yi=1
grizi = g
m
i=1 ziri = grz
By the deﬁnition of z from Step 2, we conclude y 0 = grCs.
Now we examine the other side of the veriﬁcation, y.
Recalling Equation 1, rewrite hashes of check blocks in terms
of a common generator g:
hG(cj ) =
m
Yi=1
grici;j = g
m
i=1 rici;j = grcj
As noted in Step 3, for an honest sender, (cid:13)j = hG(cj ).
Thus, we can write that (cid:13)j = gsj rcj . Combining with the
computation of y in Step 4:
y =
t
Yj=1
gsj rcj = g
t
j=1 sj rcj = grCs
Thus we have that y0 (cid:17) y mod p, proving the correctness of
the validator.
APPENDIX II
PROOF OF THEOREM 1
We now prove the security of the batched veriﬁcation
scheme by proving Theorem 1 given in Section VI-B. Our
proof follows that from [19], with some additional complexity
due to our multi-dimensional representation of a ﬁle.
Consider the hash function family h parameterized by
((cid:21)p; (cid:21)q; m). For any ﬁle size n, batch size t < n, consider an
arbitrary adversary A0 that ((cid:28) 0; "0)-attacks the encoding veriﬁer
V. Based on this adversary, deﬁne a CRHF-adversary A(G)
that works as follows:
Algorithm A(G)
1) (F; X; C)   A0(G; m; n; t)
2) If F is not m (cid:2) n or X is not n0 (cid:2) t or C is
not m (cid:2) t then Fail.
3) F 0   P(F )
4) If F 0X = C, then Fail
5) If V(HG(F 0); G; X; C) = Reject, then Fail.
6) If HG(F 0X) 6= HG(C), then Fail.
7) Find a column j such that F 0xj 6= cj. Return
(F 0xj; cj).
By our selection of the adversary A0, running it in Step 1 will
require time complexity (cid:28) 0 and will succeed in the experiment
given in Deﬁnition 2 with probability "0. By construction, A
corresponds naturally to the steps of our deﬁnitional experi-
ment in Equation 5. Step 2 enforces appropriate dimensional-
ity. Step 4 enforces the requirements that hX; Ci not be a legal
encoding, given in Equation 5 by F 0X 6= C. Step 5 requires
that the veriﬁer V accepts the “forged” input. We can conclude
that the Algorithm A will arrive at Step 6 with probability "0.
We now argue that A fails at Step 6 with probability 2(cid:0)l.
To arrive at this step, the veriﬁer V as deﬁned in Section IV-D
must have output Accept. Using the same manipulations as
those given in Appendix I, we take the fact that V accepted
to mean that:
grF 0X s (cid:17) grCs mod p
(6)
Note that the exponents on both sides of the equation are
scalars. Because g has order q, we can say that these exponents
are equivalent mod q; that is rF 0Xs (cid:17) rCs mod q, and
rearranging,
r (F 0X (cid:0) C) s (cid:17) 0 mod q:
(7)
If the algorithm A0 fails at Step 6, then HG(F 0X) 6=
HG(C). Rewriting these row vectors in terms of the g and
r, we have that grF 0X 6(cid:17) grC mod p. Recalling that g is order
q and that exponentiation of a scalar by a row vector is deﬁned
 
 
 
component-wise, we can write that rF 0X 6(cid:17) rC mod q, and
consequently:
r (F 0X (cid:0) C) 6(cid:17) 0 mod q
(8)
Let K = fk j ak 6= 0g. Then compute the product:
i = Yk2K
gzi
A[i][ak][k]
The storage requirement for the table A is m(2x (cid:0) 1)((cid:21)q (cid:0)
1)(cid:21)p=x bits, which is exponential in x. Disregarding the one-
time precomputation in Step 1, the computation of zi in Step 2
costs ((cid:21)q (cid:0) 1) MultCost(p)=x. Compared to the conventional
iterative-squaring technique, this method achieves a factor of
x=2 speed-up.
Setting x = 8, the size of the tables jAj = 510 MB, and
we can hash a 1 GB ﬁle with global parameters in less than
2 hours (of course hashing is much faster in the per-publisher
model).
For convenience, let the 1 (cid:2) t row vector u = r(F 0X (cid:0) C).
Equation 8 gives us that u 6(cid:17) 0 mod q; thus some element of
u must be non-zero. For simplicity of notation, say that u1
is the ﬁrst non-zero cell, but our analysis would hold for any
index. Equation 7 gives us that us (cid:17) 0 mod q. Since u1 6= 0,
it has a multiplicative inverse, u(cid:0)1
q. Therefore:
1 , in   (cid:3)
s1 (cid:17) (cid:0)(cid:0)u(cid:0)1
1 (cid:1)
t
Xj=2
ujsj mod q
(9)
Referring to Step 1 of veriﬁer V, s1 was selected at random
from 2l possible values; consequently, the probability of its
having the particular value in Equation 9 is at most 2(cid:0)l. Thus,
A can fail at Step 6 with probability at most 2(cid:0)l.
Combining our results, we have that algorithm A will reach
Step 7 with probability "0 (cid:0)2(cid:0)l. At this point in the algorithm,
A is assured that F 0X 6= C, since execution passed Step 4.
If we consider this inequality column-wise, we conclude there
must be some j 2 f1; :::; tg such that F 0xj 6= cj, where xj
and cj are the jth columns of X and C, respectively. Because
Step 6 guarantees that HG(F 0X) = HG(C) at this point in
the algorithm, we can use the deﬁnition of HG to claim that
for all j, hG(F 0xj) = hG(cj ). Thus, (F 0xj ; cj) represents a
hash collision for the hash function hG.
Analyzing the time-complexity of A, Step 1 completes with
time-complexity (cid:28) 0, the matrix multiplication F 0X in Step 4
requires mt multiplications in   q, and the hash computations
in Step 6 each require tm=2 multiplications in   (cid:3)
p, assuming
the usual precomputations. Therefore, A has a time complexity
given by (cid:28) = (cid:28) 0 + mt(MultCost(q) + MultCost(p)).
is successful
Therefore, we have shown that
if an adversary A0
in a ((cid:28) 0; "0)-attack against V,
exists that
is ((cid:28); ")-successful
then another adversary A exists that
in ﬁnding collisions
the hash function h, where
(cid:28) 0 = (cid:28) (cid:0) mt(MultCost(q) + MultCost(p)) and " = "0 + 2(cid:0)l.
This completes the proof of Theorem 1.
for
APPENDIX III
k-ARY EXPONENTIATION
In order to speed up global hash generation, one can make
an exponential space-for-time tradeoff, using k-ary exponenti-
ation. That is, we can speed up each exponentiation by a factor
of x=2 while costing a factor of (2x (cid:0) 1)=x in core memory.
For simplicity, assume that xj((cid:21)q (cid:0) 1):
1) For 1 (cid:20) i (cid:20) m, for 0 < j < 2x, for 0 (cid:20) k < ((cid:21)q (cid:0)1)=x,
. Store each value in an array A under
precompute gj2kx
the index A[i][j][k].
i
2) To compute gzi
i , write zi in base 2x:
zi = a0 + a12x + a222x + (cid:1) (cid:1) (cid:1) + a((cid:21)q (cid:0)1)=x(cid:0)12(cid:21)q (cid:0)x