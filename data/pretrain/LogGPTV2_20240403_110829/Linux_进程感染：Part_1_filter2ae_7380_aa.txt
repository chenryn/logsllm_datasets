# Linux 进程感染：Part 1
|
##### 译文声明
本文是翻译文章，文章原作者 tarlogic，文章来源：tarlogic.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
在红队需要执行的各种任务中有一项因其使用的技术而引人注目：在系统中植入APT（高级持续性威胁），并确保它的持久性。不幸的是，这种持久性机制大多依赖于通过一种或多种激活技术(例如shell脚本、别名、链接、系统启动脚本等)在不同位置保存可执行文件的副本，因此蓝队只需找到这些副本就能进行分析。
虽然安全人员迟早会发现到底发生了什么，但可以通过一些技术使得在受感染的计算机中难以(或者至少延迟)检测APT。在本文中，我们将详细介绍一种基于进程树而不是常规的基于文件系统存储的持久性机制。
## 前提条件
这种技术应用于x86-64
GNU/Linux，尽管理论上可以很容易地扩展到任何具有较为完整的调试API的操作系统。最起码的要求是：任何现代GCC版本都能进行这项工作。
## 使用其他进程的地址空间作为仓库
这种技术的思想是将正在运行的非特权进程的地址空间作为存储区域，方法是在其中注入两个线程：第一个线程将试图感染其他进程，而另一个线程将包含攻击载荷(在本例中，用于确保文件系统持久性)。如果文件被删除，它将通过别名还原。
这种技术受到机器正常运行时间的严格限制，因此它应该用于不会频繁重启的系统。在其他系统中，它可以被当作一种补充的持久性机制。
## 注入
显然最关键一步之一就是代码注入本身。由于不可能事先知道代码在受害者地址空间中的地址，所以代码应该是PIC(position-independent
code，与位置无关的代码)。这显然表明需要借助动态库，因为它们在实际应用时会按照预期出现在内存中。但存在一些缺点：
  * 注入的大部分信息将是元数据
  * 解析和加载库所需的代码，虽然不是过于复杂，但与攻击载荷的大小相比，也是不可忽略的。
  * 共享库使用常见文件格式，导致生成的文件易于分析。
理想情况下，注入应该尽可能小：几个代码页，或者再多一个用于数据。而这其中还可能包含链接脚本。不论如何，为了证明这个概念，我们将实现一个共享库。
另一个需要记住的限制是，目标进程不需要作为动态可执行文件加载(因此，C库可能不需要动态加载)。另外，在加载的共享库上手工解析符号是很麻烦的，因为依赖于ABI，而且几乎无法维护。这意味着需要手工重新实现许多标准C函数。
另外，注入需要依赖ptrace系统调用。如果进程没有足够的权限(或者管理员禁用了这个功能)，就无法使用这种技术。
最后还会遇到动态内存使用限制的问题。动态内存的使用涉及处理堆，而堆的内部结构没有标准。通常不会在程序的地址空间中保持较大的内存占用，应该尽可能少地使用动态内存来减少内存占用。
## 概念证明
概念证明如下：
  * 这个库将包含两个入口点。入口点的位置可以事先知道(因为它们位于从可执行文件开始的固定距离)，并且对应于注入线程主函数的开始处。
  * 注入线程将列出系统中所有正在运行的进程，查找可能受攻击的进程。
  * 将尝试对每个进程进行ptrace(PTRACE_SEIZE)，并读取内存，以便检测是否已被感染。
  * 为了准备目标地址空间，必须注入系统调用。这些系统调用必须分配必要的内存页来存储注入的代码。
  * 生成两个线程并继续执行调试的进程。
每一个阶段都需要进行一些仔细的准备，下面将详细介绍。
## 准备环境
为了让代码尽可能简洁，使用一个编译为共享库的小型C程序作为入口点。此外，为了在使用程序前进行测试，将提供另一个在库中运行特定符号的小型C程序。为了简化开发，还将包括一个包含所有构建规则的Makefile。
对于可注入库的入口点，将使用以下模板：
    void
    persist(void)
    {
      /* Implement me */
    }
    void
    propagate(void)
    {
      /* Implement me */
    }
执行入口点初始执行的程序将命名为“spawn.c”，如下所示：
    #include 
    #include 
    #include 
    int
    main(int argc, char *argv[])
    {
      void *handle;
      void (*entry)(void);
      if (argc != 3) {
        fprintf(stderr, "Usagen%s file symboln", argv[0]);
        exit(EXIT_FAILURE);
      }
      if ((handle = dlopen(argv[1], RTLD_NOW)) == NULL) {
        fprintf(stderr, "%s: failed to load %s: %sn", argv[0], argv[1], dlerror());
        exit(EXIT_FAILURE);
      }
      if ((entry = dlsym(handle, argv[2])) == NULL) {
        fprintf(stderr, "%s: symbol `%s' not found in %sn", argv[0], argv[2], argv[1]);
        exit(EXIT_FAILURE);
      }
      printf("Symbol `%s' found in %p. Jumping to function...n", argv[2], entry);
      (entry) ();
      printf("Function returned!n");
      dlclose(handle);
      return 0;
    }
最后，编译这两个程序的Makefile，如下所示：
    CC=gcc
    INF_CFLAGS=--shared -fPIE -fPIC -nostdlib
    all : injectable.so spawn
    injectable.so : injectable.c
            $(CC) $(INF_CFLAGS) injectable.c -o injectable.so
    spawn : spawn.c
            $(CC) spawn.c -o spawn -ldl
运行make命令编译所有内容：
    % make
    (…)
    % ./spawn injectable.so propagate
    Symbol `propagate' found in 0x7ffff76352ea. Jumping to function...
    Function returned!
## 系统调用
对于上面的Makefile，需要注意的是，injectable.so是通过-nostdlib编译的(这是必需的)，因此我们将不能访问高级C系统调用接口。为了突破这一限制，需要混合使用C和内联汇编，以便与操作系统进行交互。
通常情况下，x86-64
Linux系统调用是通过syscall指令执行的(而在较早的x86系统中，则使用0x80中断)。在任何情况下，基本思想都是一样的：寄存器使用系统调用参数填充，然后通过一些特殊指令调用系统。%rax的内容由系统调用函数代码初始化，其参数按%rdi、%rsi、%rdx、%r10、%r8和%r9的顺序传递。返回值存储在%rax中，错误用负返回值表示。因此，在汇编中使用write()系统调用的简单“hello
world”如下所示：
        movq $1, %rax           // Syscall code for write(): 1
        movq $1, %rdi           // Arg 1: File descriptor (stdout)
        leaq %rip(saludo), %rsi // Arg 2: Buffer address
        movq $11, %rdx          // Arg 3: size (11 bytes)
        syscall                 // All set, call the kernel
    […]
    saludo: .ascii “Hola mundon”
得益于GCC的内联汇编语法，在C中使用汇编语言是相当容易的，而且由于它的简洁性，它可以被简化成一句代码。GCC的write wrapper可以简化为：
    #include 
    #include 
    ssize_t
    write(int fd, const void *buffer, size_t size)
    {
      size_t result;
      asm volatile(“syscall” : “=a” (result) : “a” (__NR_write), “S” (fd), “D” (buffer), ”d” (size);
      return result;
    }
在“syscall”之后传递的值指定在执行汇编代码之前如何初始化寄存器。在这种情况下，%rax(specifier:“a”)被初始化为`__NR_write`(扩展到系统调用代码以进行写入的宏，如syscall.h中定义的那样)、带有buffer地址的%rdi(specifier:“D”)、%rsi(specifier:“S”)和包含字符串大小的%rsi(specifier:“S”)。返回值被收集回%rax(specifier:“=a”，等号表示“结果”是一个只写的值，编译器不需要担心它的初始值)。
由于字符串解析在许多程序中很常见，而且通常都需要这一步，编写strlen的实现(按照string.h中的原型)来度量字符串长度是很方便的：
    size_t
    strlen(const char *buffer)
    {
      size_t len = 0;
      while (*buffer++)
        ++len;
      return len;