}
Udp
{\"type\":\"UdpInput\",
\"address\":\":514\",
\"mappings\":\"192.168.1.1:appname_1:tag_1:utf-8;192.168.1.2:appname_2:tag_2:gbk\"
}
脚本
{\"type\":\"ProcessInput\",
\"bin\":\"/bin/ls\",
\"args\":\[\"/var/log\"\],
\"ticker_interval\":60,
\"appname\":\"ls_process_input\",
\"tag\":\"ls\",
\"charset\":\"utf-8\"
Windows事件日志
｛\"type\":\"EventlogInput\",
\"filter_stmt\":\"LogFile = \'Security\'\",
\"appname\":\"eventlog\",
\"tag\":\"security\"
}
性能日志
{\"type\":\"StatInput\",
\"appname\":\"stat\",
\"tag\":\"stat_tag\"
}
应答：
{\"result\":true,
\"reason\":\"Success\"}
2.修改配置
请求：
heka_ip:heka_port/modifyHekaConfig
根据类型不同，请求中的字段有别，除新增配置里已有的类型外，"其他"类型的配置，只在modifyConfig里存在
{\"compressed\":false,
\"sleep_every_bytes\":1024000}
应答：
{\"result\":true,
\"reason\":\"Success\"}
3.删除配置
请求：
heka_ip:heka_port/delHekaConfig
{\"type\":\"LogstreamerInput\",
\"source\":\"/var/log\"}
应答：
{\"result\":true,
\"reason\":\"Success\"}
4.查询目录
heka_ip:heka_port/ls
请求：
{\"root_dir\":\"/var\"}
应答：
{\"result\":true,
\"reason\":\"Success\",
\"dirs\":\[\"log\"\],
\"files\":\[\"messages\", \"messages1\"\]
}
5.预览黑白名单结果
heka_ip:heka_port/previewMatchFiles
请求:
{\"path\":\"/var/log\",
\"white_list\":\"\\.log\",
\"balck_list\":\"\"
}
应答:
{\"result\":true,
\"reason\":\"Success\",
\"files\":\[\"/var/log/1.log\", \"/var/log/2.log\"\]
}
6.预览分行效果
heka_ip:heka_port/previewSplitResult
请求：
{\"path\":\"/var/log/messages\",
\"split_regex\":\"\\n(\\d)\",
\"charset\":\"utf-8\"
}
应答:
{\"result\":true,
\"reason\":\"Success\",
\"events\":\[\"2014-01-01 00:00:00 hello world\", \"2014-01-01 00:01:01
goodbye world\"\]
}
#### 4.资源协调 {#资源协调 .list-paragraph}
一个针对大型分布式系统的高可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。由3台或3台以上奇数台服务器组建完成，具有如下3个特性：
1.提供丰富的构件来实现多种协调数据结构和协议。
2.访问原子性，客户端要么读到所有数据，要么读取失败，不会出现只读取部分的情况。
3.具有高可用性，帮助系统避免单点故障，故障时可以快速删掉故障服务器。故障回复时，重新加入到集群。
##### 4.1模块架构 {#模块架构-1 .list-paragraph}
![](media/image4.png){width="5.772916666666666in"
height="4.145138888888889in"}
##### 4.2各模块交互 {#各模块交互 .list-paragraph}
![](media/image7.png){width="6.688194444444444in"
height="5.413888888888889in"}
#### 5.消息系统 {#消息系统-1 .list-paragraph}
用于消息的持久化和缓存。该系统使用磁盘文件做持久化，顺序进行读写，以append方式写入文件。为减少内存copy，集群使用sendfile发送数据，通过合并message提升性能。集群本身不储存每个消息的状态，而使用（consumer/topic/partition）保存每个客户端状态，大大减小了维护每个消息状态的麻烦。在消息推拉的选择上，集群使用拉的方式，避免推的方式下存在的各个客户端的处理能力、流量等不同产生不确定性。以多机形式形成集群，建议3台或3台以上奇数台服务器组建，并且支持分区副本。
##### 5.1模块架构 {#模块架构-2 .list-paragraph}
![](media/image8.png){width="5.772916666666666in"
height="4.395833333333333in"}
#### 6.数据处理 {#数据处理 .list-paragraph}
> 采用了业界最先进的流式大数据处理架构Spark
> Streaming，构建的高性能、分布式日志处理架构可以每秒钟分析10万条日志，每天可以处理TB级的日志量，而且处理延时非常短，可以让用户搜索、分析几秒钟之前产生的日志。
>
> 处理延时非常短，可以让用户搜索、分析几秒钟之前产生的日志。
>
> 流式计算集群具有如下特性：
>
> 轻量级快速处理：
>
> 着眼大数据处理，速度往往被置于第一位。Spark允许Hadoop集群中的应用程序在内存中以100倍的速度运行，即使在磁盘上运行也能快10倍。Spark通过减少磁盘IO来达到性能提升，它们将中间处理数据全部放到了内存中。
>
> 无数据丢失：
>
> 系统需要保证无数据丢失，这也是系统高可用性的保证。系统为了无数据丢失，需要在数据处理失败的时候选择另外的执行路径进行replay（系统不是简单的重新提交运算，而是重新执行调度，否则按照来源的call
> stack有可能使得系统永远都在相同的地方出同样的错误）。
>
> 容错透明：
>
> 用户不会也不需要关心容错。系统会自动处理容错，调度并且管理资源，而这些行为对于运行于其上的应用来说都是透明的。
##### 6.1模块架构 {#模块架构-3 .list-paragraph}
> ![](media/image9.png){width="5.777083333333334in"
> height="5.064583333333333in"}
#### 7.数据检索 {#数据检索 .list-paragraph}
索引集群是一个的分布式搜索引擎，具备高可靠性和高性能。支持时间文本索引和全文检索，提供丰富的api用于索引、检索、修改大多数配置。能够快速搜索数百亿的日志以及TB级的数据，结构化或者非结构化的数据都可以。
集群由2台及2台以上节点组成，其中一个为主节点，节点通过选举产生，主从节点是对于整个集群内部来说的，从外部来看整个集群，逻辑上是一个整体，与任何一个节点的通信和与整个集群通信是完全一致的。集群自动创建索引，通过配置我们可以非常方便的调整索引分片和索引副本。通过索引分片技术，一个大的索引被拆分成多个，然后分布在不同的节点上，以构成分布式搜索。索引副本的作用一是提供系统的容错性，当摸个节点摸个分片损毁或丢失时，可以从副本中恢复；二是提供查询效率，集群内部会自动实现搜索请求的负载均衡。
##### 7.1模块架构 {#模块架构-4 .list-paragraph}
> ![](media/image10.png){width="5.772916666666666in"
> height="4.691666666666666in"}
#### 8.后台系统 {#后台系统 .list-paragraph}
提供对各个模块的管理接口，均为通过Restful接口管理。
##### 8.1接口设计 {#接口设计 .list-paragraph}
###### 8.1.1 账号（Accounts）管理 {#账号accounts管理 .list-paragraph}
在本系统中以租户为单位管理用户账号，系统为每一个租户（比如yottabyte）分配一个token，做为它的唯一标识。一个租户下的用户分成如下三种角色：
owner，创建该租户的用户就是owner，它可以负责创建/修改/删除
admin/user用户，修改付费计划
admin，与owner相比，只是不能修改付费计划，其它权限都一样
user
account信息保存在ElasticSearch的system索引中，type名为accounts。scheme
mapping如下描述：
{
\"mapping\" : {
\"accounts\" : {
\"properties\" : {
\"id\" : {\"type\":\"string\", \"store\":\"yes\",
\"index\":\"not_analyzed\"},
\"name\" : {\"type\":\"string\", \"store\":\"yes\",
\"index\":\"not_analyzed\"},
\"full_name\" : {\"type\":\"string\", \"store\":\"yes\",
\"index\":\"not_analyzed\"},
\# passwd使用md5签名
\"passwd\" : {\"type\":\"string\", \"store\":\"yes\", \"index\":\"no\"},
\# domain用来记录用户所属域名
\"domain\" : {\"type\":\"string\", \"store\":\"yes\",
\"index\":\"not_analyzed\"},
\"phone\" : {\"type\":\"string\", \"store\":\"yes\", \"index\":\"no\"},
\"email\" : {\"type\":\"string\", \"store\":\"yes\", \"index\":\"no\"},
\"company\" : {\"type\":\"string\", \"store\":\"yes\",
\"index\":\"no\"},
\# access_type表示用户权限类型，owner/admin/user
\"access_type\" : {\"type\":\"string\", \"store\":\"yes\",
\"index\":\"not_analyzed\"},
\# 用来记录用户行为，内容是一个json串，格式如{"search\":\"xx\",
\"dashboard\": \"xx\"},
\"actions\" : {\"type\":\"string\", \"store\":\"yes\", \"index\":no},
\# 记录趋势图，内容是一个json串，格式如{"\$id\":\[\"\$name\",
\"\$content\"\], \"\$id2\":\[\"\$name2\", \"\$content2\"\]},
\"trends\" : {\"type\":\"string\", \"store\":\"yes\", \"index\":no}
}
}
}
}
id的生成格式：timestamp_domain，其中timestamp是精确到秒的时间戳。比如1404109555_yottabyte
系统提供以下HTTP接口用来管理accounts
  --------------------------------------------------------------- ------------------------------------------------------------------------------------------------------------ ---------------------------------------------------
  创建account                                                     act=create_account &\                                                                                        成功返回{\"result\":\"true\"}\
                                                                  token=xx &\                                                                                                  失败返回{\"result\":\"false\", \"error\":\"xxx\"}
                                                                  operator=xx &\                                                                                               
                                                                  name=xx &\                                                                                                   
                                                                  full_name=xx &\                                                                                              
                                                                  passwd=xx &\                                                                                                 
                                                                  phone=xx &\                                                                                                  
                                                                  email=xx &\                                                                                                  
                                                                  company=xx &\                                                                                                
                                                                  access_type=xx                                                                                               
  检查用户名是否已存在                                            act=check_account_name_existed&token=xx&name=xx                                                              成功返回{\"result\":\"true\"}\
                                                                                                                                                                               失败返回{\"result\":\"false\"}
  检查用户是否是owner                                             act=check_owner&token=xx&name=xx                                                                             成功返回{\"result\":\"true\"}\
                                                                                                                                                                               失败返回{\"result\":\"false\"}
  检查是否具有admin权限（owner或admin)                            act=check_admin&token=xx&name=xx                                                                             成功返回{\"result\":\"true\"}\
                                                                                                                                                                               失败返回{\"result\":\"false\"}
  更新account（只更新设置的key)                                   act=update_account&token=xx&operator=xx&id=xx&name=xx&passwd=xx&phone=xx&email=xx&company=xx&acess_type=xx   成功返回{\"result\":\"true\"}\
                                                                                                                                                                               失败返回{\"result\":\"false\", \"error\":\"xxx\"}
  重置passwd                                                      act=reset_passwd &\                                                                                          成功返回{\"result\":\"true\"}\
                                                                  domain=xx &\                                                                                                 失败返回{\"result\":\"false\", \"error\":\"xxx\"}
                                                                  name=xx &\                                                                                                   
                                                                  email=xx &\                                                                                                  
                                                                  passwd=xx                                                                                                    
  删除account                                                     act=delete_account &\                                                                                        成功返回{\"result\":\"true\"}\
                                                                  token=xx &\                                                                                                  失败返回{\"result\":\"false\", \"error\":\"xxx\"}
                                                                  operator=xx &\                                                                                               
                                                                  id=xx                                                                                                        
  根据account_id获取某个用户的信息                                act=get_account&token=xx&id=xx                                                                               
  获取account列表                                                 act=get_account_list&token=xx                                                                                返回所有account列表，每个account用如下json描述：\
                                                                                                                                                                               {\
                                                                                                                                                                               \"id\":\"xxx\",\
                                                                                                                                                                               \"name\":\"xxx\",\
                                                                                                                                                                               \"access_type\":\"owner\|admin\|user\",\
                                                                                                                                                                               \"phone\":\"xxx\",\
                                                                                                                                                                               \"email\":\"xxx\",\
                                                                                                                                                                               \"company\":\"xxx\"\
                                                                                                                                                                               }
  添加用户action(采用post方式发送数据)                            act=add_account_action &\                                                                                    成功返回{\"result\":true}\
                                                                  token=xx &\                                                                                                  失败返回{\"result\":false, \"error\":\"xxx\"}
                                                                  id=xx  &\                                                                                                    
                                                                  categoy=xx   -d  \$content                                                                                   
  删除用户action                                                  act=delete_account_action &\                                                                                 成功返回{\"result\":true}\
                                                                  token=xx &\                                                                                                  失败返回{\"result\":false, \"error\":\"xxx\"}
                                                                  id=xx &\                                                                                                     
                                                                  category=xx                                                                                                  
  获取用户行为                                                    act=get_account_action &\                                                                                    成功返回{\"result\":true, \"content\":\"xx\"}\
                                                                  token=xx &\                                                                                                  失败返回{\"result\":false, \"error\":\"xxx\"}
                                                                  id=xx &\                                                                                                     
                                                                  category=xx                                                                                                  
  添加trend                                                       act=add_account_trend &\                                                                                     成功返回{\"result\":true}\
                                                                  token=xx &\                                                                                                  失败返回{\"result\":false, \"error\":\"xxx\"}
                                                                  id=xx &\                                                                                                     
                                                                  name=xx -d \$content                                                                                         
  删除trend                                                       act=delete_account_trend &\                                                                                  成功返回{\"result\":true}\
                                                                  token=xx &\                                                                                                  失败返回{\"result\":false, \"error\":\"xxx\"}
                                                                  id=xx &\                                                                                                     
                                                                  trend_id=xx                                                                                                  
  更新trend名字                                                   act=update_account_trend_name &\                                                                             成功返回{\"result\":true}\
                                                                  token=xx &\                                                                                                  失败返回{\"result\":false, \"error\":\"xxx\"}
                                                                  id=xx &\                                                                                                     
                                                                  trend_id=xx &\                                                                                               
                                                                  name=xx                                                                                                      
  获取trend信息，如果不设置trend_id，返回\                        act=get_account_trend &\                                                                                     成功返回{\"result\":true,\
  （trend_id，name）的列表，如果设置trend_id，返回对应的content   token=xx &\                                                                                                  \"trends\":{\"id\" : \"name\", \"id2\" : \"name\"}\
                                                                  id=xx &\                                                                                                     失败返回{\"result\":false, \"error\":\"xxx\"}
                                                                  trend_id=xx                                                                                                  
  --------------------------------------------------------------- ------------------------------------------------------------------------------------------------------------ ---------------------------------------------------
###### 8.1.2租户管理 {#租户管理 .list-paragraph}
每个租户都需要分配一个Token，以及流量限制、付费计划等。租户可以重置token，重置之后旧的token还能使用一段时间。
租户账号表保存在ES的system索引中，Type名为domains，其scheme
mapping如下：
{
\"mapping\" : {
\"domains\" : {