, vpub, hSig, h1, h2).
sk,1, addrold
sk,2, cnew
sk,2
1
, cnew
).
2
, cmnew
, vpub, info, ∗), where
Receive
• INPUTS:
– public parameters pp
– recipient address key pair (addrpk, addrsk)
– the current ledger L
• OUTPUTS: set of received coins
1) Parse addrpk as (apk, pkenc).
2) Parse addrsk as (ask, skenc).
3) For each Pour transaction txPour on the ledger:
, cmnew
and ∗ as (pksig, h1, h2, πPOUR, C1, C2, σ).
2
a) Parse txPour as (rt, snold
b) For each i ∈ {1, 2}:
2 , cmnew
1 , snold
1
, vpub, info, ∗),
i) Compute (vi, ρi, ri, si) := Denc(skenc, Ci).
ii) If Denc’s output is not ⊥, verify that:
• cmnew
• sni := PRFsn
ask
i
equals COMMsi (vi(cid:107)COMMri (apk(cid:107)ρi));
(ρi) does not appear on L.
iii) If both checks succeed, output
ci := (addrpk, vi, ρi, ri, si, cmnew
).
i
Fig. 2: Construction of a DAP scheme using zk-SNARKs and other ingredients.
the maximum value of a coin, vmax, and the depth of the
Merkle tree, dtree.
is a complete (cf. Deﬁnition III.1) and secure (cf. Deﬁni-
tion III.2) DAP scheme.
D. Completeness and security
Our main theorem states that the above construction is indeed
a DAP scheme.
Theorem IV.1. The tuple Π = (Setup, CreateAddress, Mint,
Pour, VerifyTransaction, Receive), as deﬁned in Section IV-C,
We provide a proof of Theorem IV.1 in the extended version of
this paper [26]. We note that our construction can be modiﬁed to
yield statistical (i.e., everlasting) anonymity; see the discussion
in the extension section of the full version of this paper.
Remark (trusted setup). Security of Π relies on a trusted party
469
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
running Setup to generate the public parameters (once and for
all). This trust is needed for the transaction non-malleability
and balance properties but not for ledger indistinguishability.
Thus, even if a powerful espionage agency were to corrupt
the setup, anonymity will still be maintained. Moreover, if
one wishes to mitigate the trust requirements of this step, one
can conduct the computation of Setup using secure multiparty
computation techniques; we leave this to future work.
V. ZEROCASH
We describe a concrete instantiation of a DAP scheme; this
instantiation forms the basis of Zerocash. Later, in Section VI,
we discuss how Zerocash can be integrated with existing ledger-
based currencies.
A. Instantiation of building blocks
We instantiate the DAP scheme construction from Section IV
(see Figure 2), aiming at a level of security of 128 bits. Doing
so requires concrete choices, described next.
CRH, PRF, COMM from SHA256. Let H be the SHA256
compression function, which maps a 512-bit input to a 256-
bit output. We mostly rely on H, rather than the “full”
hash, since this sufﬁces for our ﬁxed-size single-block inputs,
and it simpliﬁes the construction of CPOUR. We instantiate
CRH, PRF, COMM via H (under suitable assumptions on H).
First, we instantiate the collision-resistant hash function CRH
as H(z) for z ∈ {0, 1}512; this function compresses “two-to-
one”, so it can be used to construct binary Merkle trees.13
Next, we instantiate the pseudorandom function PRFx(z) as
H(x(cid:107)z), with x ∈ {0, 1}256 as the seed, and z ∈ {0, 1}256 as
the input.14 Thus, the derived functions are PRFaddr
(z) :=
H(x(cid:107)00(cid:107)z), PRFsn
x (z) := H(x(cid:107)01(cid:107)z) and PRFpk
x
x (z) :=
H(x(cid:107)10(cid:107)z), with x ∈ {0, 1}256 and z ∈ {0, 1}254.
As for the commitment scheme COMM, we only use it in
the following pattern:
k := COMMr(apk(cid:107)ρ)
cm := COMMs(v(cid:107)k)
Due to our instantiation of PRF, apk is 256 bits. So we can
set ρ also to 256 bits and r to 256 + 128 = 384 bits; then we
can compute k := COMMr(apk(cid:107)ρ) as H(r(cid:107)[H(apk(cid:107)ρ)]128).
Above, [·]128 denotes that we are truncating the 256-bit string
to 128 bits (say, by dropping least-signiﬁcant bits, as in our
implementation). Heuristically, for any string x ∈ {0, 1}128,
the distribution induced by H(r(cid:107)x) is 2−128-close to uniform,
and this forms the basis of the statistically-hiding property. For
computing cm, we set coin values to be 64-bit integers (so that,
in particular, vmax = 264 − 1 in our implementation), and then
compute cm := COMMs(v(cid:107)k) as H(k(cid:107)0192(cid:107)v). Noticeably,
13A single exception: we still compute hSig according to the full hash
SHA256, rather than its compression function, because there is no need for
this computation to be veriﬁed by CPOUR.
14This assumption is reminiscent of previous works analyzing the security
of hash-based constructions (e.g., [28]). However in this work we assume
that a portion of the compression function is the seed for the pseudorandom
function, rather than using the chaining variable as in [28].
sk,i(cid:107)0256);
sk,i(cid:107)01(cid:107)[ρold
to root rt, in a CRH-based Merkle tree;
pk,i = H(aold
i = H(aold
i = H(H(rold
i = H(H(rnew
• aold
• snold
• cmold
• cmnew
• hi = H(aold
Moreover, POUR checks that vnew
with vold
1 + vold
]254);
i (cid:107)[H(aold
pk,i(cid:107)ρold
pk,i(cid:107)ρnew
(cid:107)[H(anew
sk,i(cid:107)10(cid:107)[hSig]254).
2 ≥ 0 and vold
1 + vnew
2 < 264.
1 , vold
i
i
i )]128)(cid:107)0192(cid:107)vold
i );
)]128)(cid:107)0192(cid:107)vnew
i
i
); and
2 + vpub = vold
2 ,
1 + vold
above we are ignoring the commitment randomness s. The
reason is that we already know that k, being the output of a
statistically-hiding commitment, can serve as randomness for
the next commitment scheme.
Instantiating the NP statement POUR. The above choices
imply a concrete instantiation of the NP statement POUR
(see Section IV-B). Speciﬁcally, in our implementation, POUR
checks that the following holds, for each i ∈ {1, 2}:
• pathi is an authentication path for leaf cmold
i with respect
Finally, as mentioned, in order for CPOUR to be well-deﬁned,
we need to ﬁx a Merkle tree depth dtree. In our implementation,
we ﬁx dtree = 64, and thus support up to 264 coins.
Instantiating Sig.
For the signature scheme Sig, we use
ECDSA to retain consistency and compatibility with the
existing bitcoind source code. However, standard ECDSA is
malleable: both (r, s) and (r,−s) verify as valid signatures. We
use a non-malleable variant, where s is restricted to the “lower
half” of ﬁeld elements. While we are not aware of a formal
SUF-CMA proof for this variant, its use is consistent with
proposals to resolve Bitcoin transaction malleability [29].15
Instantiating Enc. For the encryption scheme Enc, we use
the key-private Elliptic-Curve Integrated Encryption Scheme
(ECIES) [30, 31]; it is one of the few standardized key-private
encryption schemes with available implementations.
For further details about efﬁciently realizing these in the
arithmetic circuit for POUR, see the full version of this paper.
VI. INTEGRATION WITH EXISTING LEDGER-BASED
CURRENCIES
Zerocash can be deployed atop any ledger (even one main-
tained by a central bank.) Here, we brieﬂy detail integration
with the Bitcoin protocol. Unless explicitly stated otherwise,
in the following section when referring to Bitcoin, and its unit
of account bitcoin (plural bitcoins), we mean the underlying
protocol and software, not the currency system. ( The discussion
holds, with little or no modiﬁcation, for many forks of Bitcoin,
a.k.a. “altcoins”, such as Litecoin.)
By introducing new transaction types and payment semantics,
Zerocash breaks compatibility with the Bitcoin network. While
Zerocash could be integrated into Bitcoin (the actual currency
and its supporting software) via a “ﬂag day” where a super-
majority of Bitcoin miners simultaneously adopt the new
software, we neither expect nor advise such integration in the
near future and suggest using Zerocash in a separate altcoin.
15In practice, one might replace this ECDSA variant with an EC-Schnorr
signature satisfying SUF-CMA security with proper encoding of EC group
elements; the performance would be similar.
470
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
Integrating Zerocash into Bitcoin consists of adding a new
transaction type, Zerocash transactions, and modifying the
protocol and software to invoke Zerocash’s DAP interface to
create and verify these transactions. Two approaches to doing
so are described next, followed by a discussion of anonymizing
the network layer.
A. Integration by replacing the base currency
One approach is to alter the underlying system so that
all monetary transactions are done using Zerocash, i.e., by
invoking the DAP interface and writing/reading the associated
transactions in the distributed ledger.
As seen in Section III,
this sufﬁces to offer the core
functionality of payments, minting, merging, splitting, etc.,
while assuring users that all transactions using this currency
are anonymous. However, this has several drawbacks: all
transactions incur the cost of generating a zk-SNARK proof;
the scripting feature of Bitcoin is lost; and Bitcoin’s ability to
spend unconﬁrmed transactions is lost.
B. Integration by hybrid currency
A different approach is to extend Bitcoin with a parallel,
anonymized currency of “zerocoins,” existing alongside bit-
coins, using the same ledger, and with the ability to convert
freely between the two. The behavior and functionality of
regular bitcoins is unaltered; in particular, they may support
functionality such as scripting.
In this approach, the Bitcoin ledger consists of Bitcoin-style
transactions, containing inputs and outputs [20]. Each input is
either a pointer to an output of a previous transaction (as in plain
Bitcoin), or a Zerocash pour transaction (which contributes its
public value, vpub, of bitcoins to this transaction). Outputs
are either an amount and destination public address/script
(as in plain Bitcoin), or a Zerocash mint transaction (which
consumes the input bitcoins to produce zerocoins). The usual
invariant over bitcoins is maintained and checked in plain
view: the sum of bitcoin inputs (including pours’ vpub) must
be at least the sum of bitcoin outputs (including mints’ v),
and any difference is offered as a transaction fee. However,
the accounting for zerocoins consumed and produced is done
separately and implicitly by the DAP scheme.
fabricate an additional block solely for a targeted user. Spending
any coins with respect to the updated Merkle tree in this
“poison-pill” block will uniquely identify the targeted user. To
mitigate such attacks, users should check with trusted peers
their view of the block chain and, for sensitive transactions,
only spend coins relative to blocks further back in the ledger
(since creating the illusion for multiple blocks is far harder).
VII. EXPERIMENTS
To measure the performance of Zerocash, we ran several
experiments. First, we benchmarked the performance of the
zk-SNARK for the NP statement POUR (Section VII-A) and
of the six DAP scheme algorithms (Section VII-B). Second,
we studied the impact of a higher block veriﬁcation time via a
simulation of a Bitcoin network (Section VII-C).
A. Performance of zk-SNARKs for pouring coins
Our zk-SNARK for the NP statement POUR is obtained by
constructing an arithmetic circuit CPOUR for verifying POUR,
and then invoking the generic implementation of zk-SNARK
for arithmetic circuit satisﬁability of [16] (see Section II-C).
The arithmetic circuit CPOUR is built from scratch and hand-
optimized to exploit nondeterministic veriﬁcation and the large
ﬁeld characteristic.
Figure 3 reports performance characteristics of the resulting
zk-SNARK for POUR. This includes three settings: single-
thread performance on a laptop machine; and single-thread
and multi-thread performance on a desktop machine. (The
time measurements are the average of 10 runs, with standard
deviation under 2.5%.)
B. Performance of Zerocash algorithms
In Figure 4 we report performance characteristics for each
of the six DAP scheme algorithms in our implementation. Note
that these numbers do not include the costs of maintaining the
Merkle tree because doing so is not the responsibility of these
algorithms. Moreover, for VerifyTransaction, we separately
report the cost of verifying mint and pour transactions and, in
the latter case, we exclude the cost of scanning L (as this cost
depends on L). Finally, for the case of Receive, we report the
cost to process a given pour transaction in L.
C. Additional anonymity considerations
C. Large-scale network simulation
Zerocash only anonymizes the transaction ledger. Network
trafﬁc used to announce transactions, retrieve blocks, and
contact merchants will still leak identifying information (e.g.,
IP addresses). Thus users need some anonymity network to
safely use Zerocash. The most obvious way to do this is via
Tor [32]. Given that Zerocash transactions are not low latency
themselves, Mixnets (e.g., Mixminion [33]) are also a viable
way to add anonymity (and one that is not as vulnerable to
trafﬁc analysis as Tor). Using mixnets that provide email-like
functionality has the added beneﬁt of providing an out-of-band
notiﬁcation mechanism as a replacement to Receive.
Additionally, although in theory all users have a single
view of the block chain, a powerful attacker could potentially
Because Bitcoin mining typically takes place on dedicated
GPUs or ASICs, the CPU resources to execute the DAP scheme
algorithms are often of minimal consequence to network
performance. There is one potential exception to this rule: the
VerifyTransaction algorithm must be run by all of the network
nodes in the course of routine transaction validation. The time
it takes to perform this veriﬁcation can have signiﬁcant impact
on network performance.
In the Zerocash implementation (as in Bitcoin), every Zero-
cash transaction is veriﬁed at each hop as it is forwarded though
the network and, potentially, again when blocks containing the
transaction are veriﬁed. Verifying a block consists of checking
the proof of work and validating the contained transactions.
471
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:57:49 UTC from IEEE Xplore.  Restrictions apply. 
Intel
Core i7-2620M
@ 2.70GHz
12GB of RAM
1 thread
7 min 48 s
2 min 55 s
8.5 ms
KeyGen
Prove
Verify
Time
Proving key
Veriﬁcation key
Time
Proof
Time
Intel
Core i7-4770
@ 3.40GHz
16GB of RAM
8 threads
4 min 11 s
1 thread