### Quality of Service (QoS) in Data Networks

For data networks, QoS generally focuses on specific dimensions such as bandwidth, latency, jitter, and packet loss (Nahrstedt and Smith 1996). To address these aspects, a QoS model must be developed that allows for the specification of workflow QoS metrics. This model enables suppliers to define the duration, quality, cost, and fidelity of the services and products to be delivered. Specifications can be set at design-time when building workflow applications or adjusted at run-time.

### QoS Model Dimensions

Based on previous studies and our experience in the workflow and process domains, we construct a QoS model composed of the following dimensions: time, cost, reliability, and fidelity. These four dimensions will form the basis of a QoS framework suitable for Grid/Web services.

#### Definitions of QoS Dimensions

1. **Response Time**: For a Web service, response time is defined as the time elapsed between the arrival of a service request and its completion. It is the sum of waiting time and actual processing time.
2. **Cost**: Cost represents the expenses associated with the execution of Grid/Web services. It is a critical factor for organizations aiming to reduce their internal process and service costs.
3. **Reliability**: Reliability refers to the likelihood that a service will perform as expected by users. It is given as the ratio of successful executions to scheduled executions and is a function of the failure rate.
4. **Fidelity**: Fidelity reflects how well a product is being produced or how well a service is being rendered. It is treated as a vector composed of fidelity attributes, each representing a property or characteristic of the product or service.

### QoS Estimation and Monitoring

To ensure that workflows meet the specified QoS requirements, algorithms and methods must be developed to estimate the QoS both before instances are started and during their execution. Pre-instantiation estimation allows suppliers to verify that the workflow processes will indeed exhibit the desired QoS. Continuous monitoring during execution enables the SoM infrastructure to compute QoS metrics and register any deviations from the initial requirements.

### QoS Control Mechanisms

Control mechanisms must be available to manage the QoS of applications. If an application does not behave according to initial requirements, control measures are necessary. For example, if a task fails and the QoS specifications for time are no longer met, the SoM infrastructure raises a warning, alert, or exception. The faulty task must then be replaced by an equivalent task to restore system soundness. This replacement can be achieved through dynamic changes to the instances, either manually or automatically (Cardoso, Luo et al. 2001).

### Creation of QoS Estimates

Determining useful estimates for the QoS properties of a Web service can be challenging. A combination of a priori estimates from designers and estimates computed from prior executions is used, with historical data playing a larger role as more data is collected. Additional complexities arise because QoS is parametric. For instance, the response time of a service that takes an XML document as input depends on the document's size. Estimates for composite Web services can be created in two ways: (a) creating estimates for the entire composite service similar to atomic services, or (b) synthesizing aggregate estimates from the QoS properties of the component services. Synthesizing aggregate estimates requires solving problems such as determining branching probabilities and dealing with correlations between individual services.

### Simulation and Mathematical Methods

While mathematical methods can be effectively used, simulation analysis (Miller, Cardoso et al. 2002) is another alternative. Simulation can play a crucial role in fine-tuning QoS metrics by exploring "what-if" scenarios. Workflow specification documents need to be translated into simulation model specification documents to facilitate rapid feedback. In our project, this involves a loosely-coupled integration of the METEOR WfMS and the JSIM simulation system (Nair, Miller et al. 1996; Miller, Nair et al. 1997; Miller, Seila et al. 2000).

### Computing Process QoS

Comprehensive solutions to the challenges in synthesizing QoS for composite services are discussed in detail (Cardoso, Luo et al. 2001; Cardoso, Miller et al. 2002). A mathematical model and a network reduction algorithm are presented for computing aggregate QoS properties step-by-step. The set of reduction rules that can be applied to a composite service corresponds to the inverse operations used to construct a network of services. We use six distinct reduction systems: sequential, parallel, conditional, fault-tolerant, loop, and network systems.

### System Implementation

To enable SoM to support efficient QoS management, several enhancements need to be made to the middleware infrastructure. These include the development and support of a comprehensive QoS model and the implementation of methodologies (mathematical models and simulation) to compute and predict QoS. We have developed a stochastic workflow reduction algorithm (SWR) for the step-by-step computation of QoS metrics. Our work has been carried out for the METEOR system to allow the specification, computation, and management of QoS. The support of QoS requires the modification and extension of several workflow system components and the development of additional modules.

### Future Work

Descriptions of QoS for Grid/Web services need to be stored in a manner suitable for automatic processing. We are working on defining and using an extended Web Services Description Language (WSDL) to describe services, and an extended Web Services Flow Language (WSFL) for composite services. The extended WSDL should provide additional information prescribed by the OGSA, including discovery, soft state destruction, explicit destruction, notification source, notification sink, registry, factory, factory primary key, handle mapper, and manageability. These descriptions will be stored in repositories compatible with UDDI registries, allowing Grid services to be located through advanced query/search mechanisms.

We also aim to save descriptions of composite Grid services made up of component services using WSFL+QoS. This specification will indicate the process logic for a composite service and will be created with our SoM application builder and stored in the repository. The SoM Process Control (SPC) engine, built upon the METEOR architecture, will be responsible for executing the designed SoM applications.

As we extend WSFL, we will keep track of its progress and ensure it aligns with the evolving standards and requirements.