be able to deny performing actions on the system as there will be no record.
Pop quiz
6
Which of the STRIDE threats does rate-limiting protect against?
a
Spoofing
b
Tampering
c
Repudiation
d
Information disclosure
e
Denial of service
f
Elevation of privilege
7
The WebAuthn standard (https://www.w3.org/TR/webauthn/) allows hardware
security keys to be used by a user to authenticate to a website. Which of the
three authentication factors from section 1.5.1 best describes this method of
authentication?
The answers are at the end of the chapter.
26
CHAPTER 1
What is API security?
6
e. Rate-limiting primarily protects against denial of service attacks by preventing
a single attacker from overloading the API with requests.
7
A hardware security key is something you have. They are usually small devices
that can be plugged into a USB port on your laptop and can be attached to
your key ring.
Summary
 You learned what an API is and the elements of API security, drawing on aspects
of information security, network security, and application security.
 You can define security for your API in terms of assets and security goals. 
 The basic API security goals are confidentiality, integrity, and availability, as well
as accountability, privacy, and others.
 You can identify threats and assess risk using frameworks such as STRIDE.
 Security mechanisms can be used to achieve your security goals, including encryp-
tion, authentication, access control, audit logging, and rate-limiting.
27
Secure API development
I’ve so far talked about API security in the abstract, but in this chapter, you’ll dive in
and look at the nuts and bolts of developing an example API. I’ve written many APIs
in my career and now spend my days reviewing the security of APIs used for critical
security operations in major corporations, banks, and multinational media organiza-
tions. Although the technologies and techniques vary from situation to situation and
from year to year, the fundamentals remain the same. In this chapter you’ll learn how
to apply basic secure development principles to API development, so that you can
build more advanced security measures on top of a firm foundation.
2.1
The Natter API
You’ve had the perfect business idea. What the world needs is a new social network.
You’ve got the name and the concept: Natter—the social network for coffee morn-
ings, book groups, and other small gatherings. You’ve defined your minimum viable
This chapter covers
 Setting up an example API project
 Understanding secure development principles
 Identifying common attacks against APIs
 Validating input and producing safe output
28
CHAPTER 2
Secure API development
product, somehow received some funding, and now need to put together an API and
a simple web client. You’ll soon be the new Mark Zuckerberg, rich beyond your dreams,
and considering a run for president.
 Just one small problem: your investors are worried about security. Now you must
convince them that you’ve got this covered, and that they won’t be a laughing stock on
launch night or faced with hefty legal liabilities later. Where do you start?
 Although this scenario might not be much like anything you’re working on, if
you’re reading this book the chances are that at some point you’ve had to think about
the security of an API that you’ve designed, built, or been asked to maintain. In this
chapter, you’ll build a toy API example, see examples of attacks against that API, and
learn how to apply basic secure development principles to eliminate those attacks.
2.1.1
Overview of the Natter API
The Natter API is split into two REST endpoints, one for normal users and one for mod-
erators who have special privileges to tackle abusive behavior. Interactions between
users are built around a concept of social spaces, which are invite-only groups. Anyone
can sign up and create a social space and then invite their friends to join. Any user in
the group can post a message to the group, and it can be read by any other member of
the group. The creator of a space becomes the first moderator of that space.
 The overall API deployment is shown in figure 2.1. The two APIs are exposed over
HTTP and use JSON for message content, for both mobile and web clients. Connec-
tions to the shared database use standard SQL over Java’s JDBC API.
Natter API
Moderation API
HTTP
SQL
Clients
The Natter API handles
creation of social spaces
and keeping track of
messages within a space.
The Moderation API allows
privileged users (moderators)
to delete offensive messages.
The database stores
messages and social
space metadata.
Message
database
Web UI
Mobile UI
Figure 2.1
Natter exposes two APIs—one for normal users and one for moderators. For 
simplicity, both share the same database. Mobile and web clients communicate with the 
API using JSON over HTTP, although the APIs communicate with the database using SQL 
over JDBC.
29
The Natter API
The Natter API offers the following operations:
 A HTTP POST request to the /spaces URI creates a new social space. The user
that performs this POST operation becomes the owner of the new space. A
unique identifier for the space is returned in the response.
 Users can add messages to a social space by sending a POST request to /spaces/
/messages where  is the unique identifier of the space.
 The messages in a space can be queried using a GET request to /spaces/
/messages. A since= query parameter can be used to
limit the messages returned to a recent period.
 Finally, the details of individual messages can be obtained using a GET request
to /spaces//messages/.
The moderator API contains a single operation to delete a message by sending a
DELETE request to the message URI. A Postman collection to help you use the API is
available from https://www.getpostman.com/collections/ef49c7f5cba0737ecdfd. To
import the collection in Postman, go to File, then Import, and select the Link tab.
Then enter the link, and click Continue.
TIP
Postman (https://www.postman.com) is a widely used tool for exploring
and documenting HTTP APIs. You can use it to test examples for the APIs
developed in this book, but I also provide equivalent commands using simple
tools throughout the book.
In this chapter, you will implement just the operation to create a new social space.
Operations for posting messages to a space and reading messages are left as an exer-
cise. The GitHub repository accompanying the book (https://github.com/NeilMadden/
apisecurityinaction) contains sample implementations of the remaining operations in
the chapter02-end branch.
2.1.2
Implementation overview
The Natter API is written in Java 11 using the Spark Java (http://sparkjava.com)
framework (not to be confused with the Apache Spark data analytics platform). To
make the examples as clear as possible to non-Java developers, they are written in a
simple style, avoiding too many Java-specific idioms. The code is also written for clarity
and simplicity rather than production-readiness. Maven is used to build the code
examples, and an H2 in-memory database (https://h2database.com) is used for data
storage. The Dalesbred database abstraction library (https://dalesbred.org) is used to
provide a more convenient interface to the database than Java’s JDBC interface, with-
out bringing in the complexity of a full object-relational mapping framework.
 Detailed instructions on installing these dependencies for Mac, Windows, and
Linux are in appendix A. If you don’t have all or any of these installed, be sure you
have them ready before you continue.
30
CHAPTER 2
Secure API development
TIP
For the best learning experience, it is a good idea to type out the listings
in this book by hand, so that you are sure you understand every line. But if
you want to get going more quickly, the full source code of each chapter is
available on GitHub from https://github.com/NeilMadden/apisecurityin-
action. Follow the instructions in the README.md file to get set up.
2.1.3
Setting up the project
Use Maven to generate the basic project structure, by running the following com-
mand in the folder where you want to create the project:
mvn archetype:generate \
➥    -DgroupId=com.manning.apisecurityinaction \
➥    -DartifactId=natter-api \
➥    -DarchetypeArtifactId=maven-archetype-quickstart \
➥    -DarchetypeVersion=1.4 -DinteractiveMode=false
If this is the first time that you’ve used Maven, it may take some time as it downloads
the dependencies that it needs. Once it completes, you’ll be left with the following
project structure, containing the initial Maven project file (pom.xml), and an App
class and AppTest unit test class under the required Java package folder structure.
natter-api
├── pom.xml       
└── src
    ├── main
    │   └── java
    │       └── com
    │           └── manning
    │               └── apisecurityinaction
    │                   └── App.java         
    └── test
        └── java
            └── com
                └── manning
                    └── apisecurityinaction
                        └── AppTest.java      
You first need to replace the generated Maven project file with one that lists the
dependencies that you’ll use. Locate the pom.xml file and open it in your favorite edi-
tor or IDE. Select the entire contents of the file and delete it, then paste the contents
of listing 2.1 into the editor and save the new file. This ensures that Maven is config-
ured for Java 11, sets up the main class to point to the Main class (to be written
shortly), and configures all the dependencies you need.
NOTE
At the time of writing, the latest version of the H2 database is 1.4.200,
but this version causes some errors with the examples in this book. Please use
version 1.4.197 as shown in the listing.
The Maven 
project file
The sample Java class 
generated by Maven
A sample unit 
test file
31
The Natter API
  4.0.0  
  com.manning.api-security-in-action
  natter-api
  1.0.0-SNAPSHOT  
    11    
    11    
      com.manning.apisecurityinaction.Main     
      com.h2database      
      h2            
      1.4.197             
      com.sparkjava       
      spark-core    
      2.9.2               
      org.json            
      json          
      20200518            
      org.dalesbred       
      dalesbred     
      1.3.2               
      org.slf4j            
      slf4j-simple   
      1.7.30               
You can now delete the App.java and AppTest.java files, because you’ll be writing new
versions of these as we go.
Listing 2.1
pom.xml
Configure Maven 
for Java 11.
Set the main class 
for running the 
sample code.
Include the latest 
stable versions of H2, 
Spark, Dalesbred, 
and JSON.org.
Include slf4j to 
enable debug 
logging for Spark.
32
CHAPTER 2
Secure API development
2.1.4
Initializing the database
To get the API up and running, you’ll need a database to store the messages that
users send to each other in a social space, as well as the metadata about each social
space, such as who created it and what it is called. While a database is not essential for
this example, most real-world APIs will use one to store data, and so we will use one
here to demonstrate secure development when interacting with a database. The
schema is very simple and shown in figure 2.2. It consists of just two entities: social
spaces and messages. Spaces are stored in the spaces database table, along with the
name of the space and the name of the owner who created it. Messages are stored in
the messages table, with a reference to the space they are in, as well as the message
content (as text), the name of the user who posted the message, and the time at which
it was created.
Using your favorite editor or IDE, create a file schema.sql under natter-api/src/main/
resources and copy the contents of listing 2.2 into it. It includes a table named spaces
for keeping track of social spaces and their owners. A sequence is used to allocate
unique IDs for spaces. If you haven’t used a sequence before, it’s a bit like a special
table that returns a new value every time you read from it. 
 Another table, messages, keeps track of individual messages sent to a space, along
with who the author was, when it was sent, and so on. We index this table by time, so
that you can quickly search for new messages that have been posted to a space since a
user last logged on.
Space
Message
space_id
name
owner
author
msg_time
msg_txt
A space represents
a social space in
the Natter API.
Messages within a space
are represented by the
messages table.
Attributes of a message
include the name of the
author, the time and
the contents.
Spaces and messages
have unique ids created
automatically from a
database sequence.
A space can have
many messages, but
each message is in
exactly one space.
msg_id
space_id
Figure 2.2
The Natter database schema consists of social spaces and messages within those 
spaces. Spaces have an owner and a name, while messages have an author, the text of the message, 
and the time at which the message was sent. Unique IDs for messages and spaces are generated 
automatically using SQL sequences.
33
The Natter API
CREATE TABLE spaces(            
    space_id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    owner VARCHAR(30) NOT NULL
);
CREATE SEQUENCE space_id_seq;    
CREATE TABLE messages(                                 
    space_id INT NOT NULL REFERENCES spaces(space_id),
    msg_id INT PRIMARY KEY,
    author VARCHAR(30) NOT NULL,
    msg_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    msg_text VARCHAR(1024) NOT NULL
);
CREATE SEQUENCE msg_id_seq;
CREATE INDEX msg_timestamp_idx ON messages(msg_time);    
CREATE UNIQUE INDEX space_name_idx ON spaces(name);
Fire up your editor again and create the file Main.java under natter-api/src/main/
java/com/manning/apisecurityinaction (where Maven generated the App.java for
you earlier). The following listing shows the contents of this file. In the main method,
you first create a new JdbcConnectionPool object. This is a H2 class that implements
the standard JDBC DataSource interface, while providing simple pooling of connec-
tions internally. You can then wrap this in a Dalesbred Database object using the
Database.forDataSource() method. Once you’ve created the connection pool, you
can then load the database schema from the schema.sql file that you created earlier.
When you build the project, Maven will copy any files in the src/main/resources file
into the .jar file it creates. You can therefore use the Class.getResource() method to
find the file from the Java classpath, as shown in listing 2.3.
package com.manning.apisecurityinaction;
import java.nio.file.*;
import org.dalesbred.*;
import org.h2.jdbcx.*;
import org.json.*;
public class Main {
  public static void main(String... args) throws Exception {
    var datasource = JdbcConnectionPool.create(              
        "jdbc:h2:mem:natter", "natter", "password");         
    var database = Database.forDataSource(datasource);
    createTables(database);
  }
  private static void createTables(Database database) 
      throws Exception {
Listing 2.2
The database schema: schema.sql
Listing 2.3
Setting up the database connection pool
The spaces table describes who 
owns which social spaces.
We use sequences to ensure 
uniqueness of primary keys.
The messages 
table contains the 
actual messages.
We index messages 
by timestamp to 
allow catching up on 
recent messages.
Create a JDBC 
DataSource object 
for the in-memory 
database.
34
CHAPTER 2