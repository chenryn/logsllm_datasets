o
c
e
s
(
e
m
T
i
0.0
0
100
200
300
ACL Rule length
400
500
600
700
800
Figure 7: Performance on checking individual ﬁrewalls.
k=4
6
8
10
12
14
16
18
20
k=5
6
8
10
12
14
16
18
20
Number of Firewalls
Figure 8: Performance on checking distributed ﬁrewalls.
Since checking each path separately would not scale, FIRE-
MAN uses the following techniques to improve its scalabil-
ity. First, FIREMAN avoids unnecessary nodes and branch-
ing. Since ﬁrewalls and ACLs are rarely deployed in the
network core, FIREMAN can reduce the number of nodes
by combining a network of routers without ACLs into a sin-
gle abstract virtual node. For instance, FIREMAN treats
the DMZ in Figure 2 as a single node. Second, FIREMAN
merges the paths where possible using Equations in Table 5
from Section 4. For example, consider the ACL tree in Fig-
ure 4. Instead of traversing
outside → W 0 → Z0 → inside
and
outside → X0 → X1 → Z0 → inside
separately, FIREMAN merges the two paths at Z0. Finally,
FIREMAN saves intermediate results for reuse later. In Fig-
ure 4, FIREMAN checks the ACLs W 0, X0 and X1 only
once because the left and the right branches are symmet-
ric. When an ACL appears multiple times in an ACL tree,
FIREMAN rechecks the ACL while traversing the tree only
if the ACL receives different input sets on different paths.
In Figure 8, we randomly generated a network of m ﬁre-
walls, where each ﬁrewall connects to k other ﬁrewalls.
When either m or k was small, distributed checking ﬁn-
ished within seconds. When m > 15 and k > 5, distributed
checking took several minutes. Even in the worst case with
m = 20 and k = 5 (which we think is rare in enterprise
networks), FIREMAN completed in under 20 minutes. Be-
cause FIREMAN runs ofﬂine, we believe that FIREMAN
is scalable enough to check most distributed ﬁrewalls effec-
tively.
There are numerous studies on network topology, IP con-
nectivity [5, 18, 28], and router conﬁgurations [10, 13, 14,
25]. Maltz et al. [26] reverse engineered routing design in
operational networks using static analysis on dumps of the
local conﬁguration state from each router. These conﬁg-
uration ﬁles were automatically processed to abstract rout-
ing process graphs, route pathway graphs and address space
structures. With these abstractions, network structure and
routing operation in a global view were retrieved for further
analysis. The subsequent work by the same authors [16]
presented a uniﬁed modeling of packet ﬁlters and routing
protocols to characterize reachability of a network. Our
work makes another step towards understanding how dis-
tributed ﬁrewalls, as one of the “packet transformers” in the
network, inﬂuence end-to-end behavior.
Firmato and Fang [3, 27] are a set of management and
analysis tools that interact with users on queries about ﬁre-
wall rules. Lumeta [30] improved the usability of Fang
6
8
10
12
14
16
18
20
6. Related Work
k=3
)
s
d
n
o
c
e
S
(
e
m
T
g
n
i
s
s
e
c
o
r
P
i
1.6
1.4
1.2
1.0
0.8
0.6
0.4
0.2
0.0
4
60
50
40
30
20
10
0
4
1200
1000
800
600
400
200
0
4
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
by automating the queries to check if ﬁrewalls are conﬁg-
ured according to user expectations. Both tools take a min-
imum network topology description and ﬁrewall conﬁgu-
rations as input to build an internal representation of ﬁre-
wall rules which users can query. Such tools are essentially
lightweight testing tools and do not offer the advantage of
full coverage as static analysis tools do. Our goal is differ-
ent and focus on checking for misconﬁgurations.
Guttman and Herzog [19, 20] proposed formal model-
ing approach to ensure network-wide policy conformance.
They used BDDs to model “abstract packet”. Their goal
was to verify that ﬁlters in a network implement a high-
level policy, rather than to look for internal inconsistencies
in the policies.
The work closest to ours is “Firewall Policy Advisor” by
Al-Shaer and Hamed [1,2]. Our classiﬁcation of misconﬁg-
urations is inspired by them, but are more general and com-
plete. The key distinction of FIREMAN is its capability to
evaluate ﬁrewall conﬁgurations as a whole piece, not just
limited to relation between two ﬁrewall rules. In addition
to inconsistencies, FIREMAN also checks for policy vio-
lations and inefﬁciencies. Furthermore, FIREMAN works
on any network topology and requires only a linear traver-
sal through the rules. Our experiment running FIREMAN
captured all misconﬁgurations in their sample scripts [2]
Gouda and Liu [17] devised a ﬁrewall decision diagram
(FDD) to assist the design of ﬁrewalls, in order to reduce
the size of conﬁguration while maintaining its consistency
and completeness. Their focus is on the efﬁciency of a sin-
gle ﬁrewall. They also proposed to design multiple versions
of the same ﬁrewall and check the equivalence among the N
versions using FDD [23]. Eronen and Zitting [12] described
an expert system based on Eclipse, a constraint logic pro-
gramming language to render Cisco router access lists.
Hazelhurst et al. [21] proposed to use BDD to represent
ﬁrewall rules and access lists. Their goal was to achieve fast
lookup through better hardware router implementation us-
ing BDDs. We chose BDD to represent not only individual
rules but also the collective behavior of whole set of rules.
Our focus is on checking the security properties of ﬁrewall
rules on existing architectures.
7. Conclusions
In this paper, we have presented a novel static analysis
approach to check ﬁrewall conﬁgurations. First, we have
proposed a framework for modeling individual and dis-
tributed ﬁrewalls. Second, we have designed a static analy-
sis algorithm to discover various misconﬁgurations such as
policy violations, inconsistencies and inefﬁciencies, at vari-
ous levels including intra-ﬁrewall, inter-ﬁrewall, and cross-
path. Our technique is based on symbolic model checking,
using binary decision diagrams to compactly represent and
efﬁciently process ﬁrewall rules. Compared to other related
research, our method is scalable and offers full-coverage of
all possible IP packets and data paths. Our analysis algo-
rithm is both sound and complete, thus has no false nega-
tives and false positives.
We have implemented our approach in a toolkit called
FIREMAN, which uses BDDs to represent ﬁrewall rules.
Inspecting misconﬁgurations is fast, scalable and requires a
minimum amount of memory. In our experiments, FIRE-
MAN was able to uncover misconﬁgurations on ﬁrewalls
running in production environment. We believe FIREMAN
is a useful and practical tool for network administrators as
well as personal ﬁrewall users.
8. Acknowledgment
This work was supported in part by NSF grant NeTS-
NBD #0520320. We would like to thank Monica Chow,
Alex Liu, David Molnar, Daniel Oxenhandler, Ashwin Srid-
haran, Jimmy Su for their helpful feedback on draft versions
of this paper. We would also like to thank the anonymous
reviewers for their valuable comments.
References
[1] E. Al-Shaer and H. Hamed. Firewall policy advisor for
anomaly detection and rule editing. In Proc. IEEE/IFIP In-
tegrated Management Conference (IM’2003), March 2003.
[2] E. Al-Shaer and H. Hamed. Discovery of policy anoma-
lies in distributed ﬁrewalls. In Proc. IEEE Infocomm, Hong
Kong, Mar 2004.
[3] Y. Bartal, A. J. Mayer, K. Nissim, and A. Wool. Firmato:
In Proc. 20th IEEE
A novel ﬁrewall management toolkit.
Symposium on Security and Privacy, 1999.
[4] R. E. Bryant. Graph-based algorithms for boolean function
manipulation. IEEE Trans. Computers, 35(8), 1986.
[5] CAIDA.
Skitter
tool.
http://www.caida.org/tools/measurement/skitter.
[6] D. B. Chapman. Network (in)security through IP packet ﬁl-
tering.
In Proceedings of the Third Usenix Unix Security
Symposium, pages 63–76, Baltimore, MD, September 1992.
[7] H. Chen, D. Wagner, and D. Dean. Setuid demystiﬁed. In
Proceedings of the Eleventh USENIX Security Symposium,
San Francisco, CA, 2002.
[8] W. R. Cheswick, S. M. Bellovin, and A. D. Rubin. Firewalls
and Internet Security: Repelling the Wily Hacker. Addison-
Wesley, 2003.
[9] T. Cymru. The Team Cymru Bogon List v2.5 02 AUG 2004.
http://www.cymru.com/Documents/bogon-list.html, 2004.
[10] D. Caldwell, A. Gilbert, J. Gottlieb, A. Greenberg,G. Hjalm-
tysson, and J. Rexford. The cutting edge of IP router conﬁg-
uration. In ACM HotNets, 2003.
[11] D. Engler, D. Y. Chen, S. Hallem, A. Chou, and B. Chelf.
Bugs as deviant behavior: A general approach to inferring
errors in systems code. In Proceedings of ACM Symposium
on Operating Systems Principles (SOSP), October 2001.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
[12] P. Eronen and J. Zitting. An expert system for analyzing ﬁre-
wall rules. In Proc. 6th Nordic Worksh. Secure IT Systems,
2001.
[13] N. Feamster. Practical veriﬁcation techniques for wide-area
routing. In ACM SIGCOMM HotNets-II, 2003.
[14] N. Feamster and H. Balakrishnan. Detecting BGP con-
ﬁguration faults with static analysis.
In 2nd Symposium
on Networked Systems Design and Implementation (NSDI),
Boston, MA, May 2005.
wizards
security
[15] Firewall
list.
http://honor.icsalabs.com/mailman/listinfo/ﬁrewall-wizards.
[16] G. Xie, J. Zhan, D. Maltz, H. Zhang, A. Greenberg, and J.
Rexford. On static reachability analysis of IP networks. In
IEEE INFOCOM, 2005.
mailing
[17] M. G. Gouda and X.-Y. A. Liu. Firewall design: consistency,
In Proc. ICDCS 24, Mar
completeness and compactness.
2004.
[18] R. Govindan and H. Tangmunarunkit. Heuristics for Internet
Map Discovery. In IEEE INFOCOM, 2000.
[19] J. D. Guttman. Filtering postures: Local enforcement for
global policies. In Proc. IEEE Symp. on Security and Pri-
vacy, 1997.
[20] J. D. Guttman and A. L. Herzog. Rigorous automated net-
work security management. International Journal of Infor-
mation Security, 4(1-2), 2005.
[21] S. Hazelhurst, A. Attar, and R. Sinnappan. Algorithms for
improving the dependability of ﬁrewall and ﬁlter rule lists.
In DSN ’00: Proceedings of the 2000 International Confer-
ence on Dependable Systems and Networks, 2000.
version
Lind-Nielsen.
[22] J.
Buddy
2.4.
http://sourceforge.net/projects/buddy, 2004.
[23] A. X. Liu and M. G. Gouda. Diverse ﬁrewall design. In Proc.
IEEE International Conference on Dependable Systems and
Networks (DSN-04), Florence, Italy, June 2004.
[24] A. X. Liu and M. G. Gouda. Complete redundancy detection
in ﬁrewalls. In Proc. 19th Annual IFIP Conference on Data
and Applications Security, 2005.
[25] R. Mahajan, D. Wetherall, and T. Anderson. Understanding
BGP Misconﬁguration. In ACM SIGCOMM, 2002.
[26] D. Maltz, G. Xie, J. Zhan, H. Zhang, G. Hjalmtysson, and
A. Greenberg. Routing design in operational networks: A
look from the inside. In Proc. SIGCOMM’04, 2004.
[27] A. Mayer, A. Wool, and E. Ziskind. Fang: A ﬁrewall anal-
ysis engine. In Proc. IEEE Symposium on Security and Pri-
vacy, 2000.
[28] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP
topologies with Rocketfuel. In ACM SIGCOMM, 2002.
[29] Netﬁlter. Linux netﬁlter. http://www.netﬁlter.org.
[30] A. Wool. Architecting the Lumeta ﬁrewall analyzer. In Proc.
10th USENIX Security Symposium, Washington, D.C., 2001.
[31] A. Wool. A quantitative study of ﬁrewall conﬁguration er-
rors. IEEE Computer, 37(6), 2004.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply.