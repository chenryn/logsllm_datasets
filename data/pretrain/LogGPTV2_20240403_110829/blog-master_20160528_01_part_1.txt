## 深入浅出PostgreSQL B-Tree索引结构       
### 作者                                                                                                               
digoal                                                                                                                
### 日期                                                                                                              
2016-05-28                        
### 标签                                                                                                              
PostgreSQL , b-tree , 索引结构                                              
----                                                                                                              
## 背景          
PostgreSQL B-Tree是一种变种(high-concurrency B-tree management algorithm)，算法详情请参考        
src/backend/access/nbtree/README        
PostgreSQL 的B-Tree索引页分为几种类别         
```      
meta page      
root page         #  btpo_flags=2      
branch page    #  btpo_flags=0      
leaf page         #  btpo_flags=1      
如果即是leaf又是root则  btpo_flags=3。        
```      
其中meta page和root page是必须有的，meta page需要一个页来存储，表示指向root page的page id。        
随着记录数的增加，一个root page可能存不下所有的heap item，就会有leaf page，甚至branch page，甚至多层的branch page。        
一共有几层branch 和 leaf，就用btree page元数据的 level 来表示。        
![4](20160528_01_pic_001.png)      
我们可以使用pageinspect插件，内窥B-Tree的结构。        
层次可以从bt_page_stats的btpo得到，代表当前index page所处的层级。        
注意层级并不是唯一的，例如btpo=3的层级，可能有分几个档。        
打个比喻，腾讯的技术岗位级别T3，对应T3这个级别又有几个小的档位。和这里的含义差不多，只是没有区分小档位的值，但是后面我们能看到它的存在。          
btpo=0级表示最底层，处于这个层级的index pages存储的items(ctid)是指向heap page的。          
类别和层级不挂钩，类别里面又可以有多个层级，但是只有层级=0的index page存储的ctid内容才是指向heap page的;  其他层级index page存储的ctid内容都是指向同层级其他index page(双向链表)，或者指下级的index page。         
1\.         
0层结构，只有meta和root页。        
root页最多可以存储的item数，取决于索引字段数据的长度、以及索引页的大小。        
![1](20160528_01_pic_002.png)      
例子        
```      
postgres=# create extension pageinspect;      
postgres=# create table tab1(id int primary key, info text);      
CREATE TABLE      
postgres=# insert into tab1 select generate_series(1,100), md5(random()::text);      
INSERT 0 100      
postgres=# vacuum analyze tab1;      
VACUUM      
```      
查看meta page，可以看到root page id = 1 。         
索引的level = 0，  说明没有branch和leaf page。        
```      
postgres=# select * from bt_metap('tab1_pkey');      
 magic  | version | root | level | fastroot | fastlevel       
--------+---------+------+-------+----------+-----------      
 340322 |       2 |    1 |     0 |        1 |         0      
(1 row)      
```      
根据root page id = 1查看root page的stats        
btpo=0 说明已经到了最底层         
btpo_flags=3，说明它既是leaf又是root页。        
```      
postgres=# select * from bt_page_stats('tab1_pkey',1);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     1 | l    |        100 |          0 |            16 |      8192 |      6148 |         0 |         0 |    0 |          3      
(1 row)      
```      
btpo_prev和btpo_next分别表示该页的相邻页（branch page是双向链表）。        
btpo_flags 可以在代码中查看(src/include/access/nbtree.h)，一共有几个         
```      
/* Bits defined in btpo_flags */      
#define BTP_LEAF                (1 << 0)        /* leaf page, i.e. not internal page */      
#define BTP_ROOT                (1 << 1)        /* root page (has no parent) */      
#define BTP_DELETED             (1 << 2)        /* page has been deleted from tree */      
#define BTP_META                (1 << 3)        /* meta-page */      
#define BTP_HALF_DEAD   (1 << 4)        /* empty, but still in tree */      
#define BTP_SPLIT_END   (1 << 5)        /* rightmost page of split group */      
#define BTP_HAS_GARBAGE (1 << 6)        /* page has LP_DEAD tuples */      
#define BTP_INCOMPLETE_SPLIT (1 << 7)   /* right sibling's downlink is missing */      
```      
查看0级 page存储的ctid (即items)          
0级ctid 表示存储的是 heap页的寻址。  （如果是多层结构，那么branch page中的ctid， 它表示的是同级btree页(链条项ctid)或者下级btree页的寻址）  。          
当ctid指向heap时， data是对应的列值。(多级结构的data意义不一样，后面会讲)            
```      
postgres=# select * from bt_page_items('tab1_pkey',1);      
 itemoffset |  ctid   | itemlen | nulls | vars |          data                 
------------+---------+---------+-------+------+-------------------------      
          1 | (0,1)   |      16 | f     | f    | 01 00 00 00 00 00 00 00      
          2 | (0,2)   |      16 | f     | f    | 02 00 00 00 00 00 00 00      
...      
         99 | (0,99)  |      16 | f     | f    | 63 00 00 00 00 00 00 00      
        100 | (0,100) |      16 | f     | f    | 64 00 00 00 00 00 00 00      
(100 rows)      
```      
根据ctid 查看heap记录        
```      
postgres=# select * from tab1 where ctid='(0,100)';      
 id  |               info                     
-----+----------------------------------      
 100 | 68b63c269ee8cc2d99fe204f04d0ffcb      
(1 row)      
```      
2\.         
1层结构，包括meta page, root page, leaf page.        
![2](20160528_01_pic_003.png)      
例子        
```      
postgres=# truncate tab1;      
TRUNCATE TABLE      
postgres=# insert into tab1 select generate_series(1,1000), md5(random()::text);      
INSERT 0 1000      
postgres=# vacuum analyze tab1;      
VACUUM      
```      
查看meta page，可以看到root page id = 3, 索引的level = 1。        
level = 1 表示包含了leaf page。        
```      
postgres=# select * from bt_metap('tab1_pkey');      
 magic  | version | root | level | fastroot | fastlevel       
--------+---------+------+-------+----------+-----------      
 340322 |       2 |    3 |     1 |        3 |         1      
(1 row)      
```      
根据root page id  查看root page的stats        
btpo = 1 说明还没有到最底层（最底层btpo=0, 这种页里面存储的ctid才代表指向heap page的地址）        
btpo_flags=2 说明这个页是root page        
```      
postgres=# select * from bt_page_stats('tab1_pkey',3);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     3 | r    |          3 |          0 |            13 |      8192 |      8096 |         0 |         0 |    1 |          2      
(1 row)      
```      
查看root page存储的  leaf page items (指向leaf page)          
一共3个leaf pages, data存储的是这个leaf page存储的最小值。          
```      
postgres=# select * from bt_page_items('tab1_pkey',3);      
 itemoffset | ctid  | itemlen | nulls | vars |          data                 
------------+-------+---------+-------+------+-------------------------      
          1 | (1,1) |       8 | f     | f    |       
          2 | (2,1) |      16 | f     | f    | 6f 01 00 00 00 00 00 00      
          3 | (4,1) |      16 | f     | f    | dd 02 00 00 00 00 00 00      
(3 rows)      
```      
第一条为空，是因为这个leaf page是最左边的PAGE，不存最小值。        
对于有右leaf page的leaf page，第一条存储的heap item为该页的右链路。        
第二条才是起始ITEM。        
另外需要注意，虽然在item里面只存储右链，leaf page还是双向链表，在stats能看到它的prev 和next page。        
根据leaf page id查看stats          
最左leaf page = 1        
prev btpo 指向meta page       
```      
可以看到btpo = 0了，说明这个页是底层页。        
btpo_flags=1 说明是leaf page        
postgres=# select * from bt_page_stats('tab1_pkey',1);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     1 | l    |        367 |          0 |            16 |      8192 |       808 |         0 |         2 |    0 |          1      
(1 row)      
```      
next btpo 指向meta page       
最右leaf page = 4        
btpo_flags=1 说明是leaf page        
```      
postgres=# select * from bt_page_stats('tab1_pkey',4);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     4 | l    |        268 |          0 |            16 |      8192 |      2788 |         2 |         0 |    0 |          1      
(1 row)      
```      
中间leaf page = 2        
btpo_flags=1 说明是leaf page        
```      
postgres=# select * from bt_page_stats('tab1_pkey',2);      
 blkno | type | live_items | dead_items | avg_item_size | page_size | free_size | btpo_prev | btpo_next | btpo | btpo_flags       
-------+------+------------+------------+---------------+-----------+-----------+-----------+-----------+------+------------      
     2 | l    |        367 |          0 |            16 |      8192 |       808 |         1 |         4 |    0 |          1      
(1 row)      
```      
查看leaf page存储的 heap ctid (即heap items)          