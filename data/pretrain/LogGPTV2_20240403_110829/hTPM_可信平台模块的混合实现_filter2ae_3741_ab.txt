  * 片外漏洞基于硬件的TPM通过南桥通过串行总线连接到CPU。该总线代表了新的攻击面，因为它从外部暴露于攻击者并可以物理访问主板。请注意，基于CPU的TPM解决方案回避了这一攻击面，因为它没有通往CPU的单独总线。
  * 安全事件响应敏捷性基于硬件的TPM功能被实现为硬件。因此，由于需要固件更新或重新设计硬件，因此难以及时对安全事件做出反应。例如，在2017年，发现了ROCA漏洞，该漏洞利用一种加密漏洞，可以从公钥中恢复密钥对的私钥。如果在硬件中发现了这种基本错误，则从根本上修复该漏洞的唯一方法是更换硬件或将变通办法放入固件中。更新固件或修复硬件是一个昂贵的过程，会导致更长的零日漏洞。
  * 缺乏端到端的保护意识一些关键数据（例如身份验证数据）驻留在内存中，并传输到TPM以进行启封操作。另外，在未绑定或未密封所需的密钥之后，NVRAM外部会发生许多实际的加密操作。攻击者可以发起各种软件攻击或内存攻击，例如冷启动攻击或DMA攻击。基于硬件的TPM缺少对机密信息（例如，身份验证数据（例如，PIN，生物识别等）或释放到RAM的密钥）的端到端保护。这不是TPM的固有弱点，因为它不在TPM设计范围内。但是，我们仍然需要一个整体的安全解决方案来最终保护关键任务应用程序。
图1 硬件TPM的加密性能
###  2.2基于软件的TPM
​
在基于软件的TPM中，所有TPM功能都在软件中实现。该软件实现可以包含在受信任的执行环境（例如TrustZone），单独的虚拟机或仅在单独的进程中。基于纯软件的解决方案容易受到软件错误的影响，并且缺乏硬件支持的强化。进一步来说：
  * 缺乏硬件级别的保护由于这些秘密完全由软件处理，因此容易受到各种侧通道攻击，故障攻击，微体系结构攻击（例如Meltdown，Spectre攻击）和基于软件漏洞的攻击。它也容易受到试图从DRAM读取机密的内存攻击。
  * 基于硬件的熵TPM规范需要一个真正的随机数生成器（RNG）。真正的RNG通过具有一个熵池来构造，该熵池的熵由诸如电压和温度之类的硬件熵源提供。它需要特殊的硬件来收集经统计证明的真实随机种子。纯软件解决方案缺乏真正的随机数生成功能，因为它不符合TPM规范，因此成为一个问题。
  * 安全证书保障某些应用程序需要严格的安全认证合规性，例如PCIDSS（支付卡行业数据安全标准），HIPPA（健康保险可移植性和责任法案），FIPS（联邦信息处理标准）等。通常，它需要硬件的信任和保护。因此，纯软件解决方案无法满足行业要求。
  * 预引导环境TPM在预启动环境中使用，例如Bitlocker加密操作和设备证明。由于在系统的预引导阶段需要TPM，因此纯软件TPM在尝试提供所有必需的功能方面将存在固有的困难，因为基于软件的TPM的全部功能只有在配置了所有必需的软件堆栈之后才可用。请注意，根据引导流程和低级CPU原语，在预引导环境中可能会使用完整的软件TPM。例如，在fTPM中，TrustZone在正常启动世界引导加载程序之前已完全启动。在这种情况下，不会有任何问题。但是，此问题在其他预引导环境中仍然存在。
## 提出的混合TPM架构
​ 我们提出了一种新颖的设计来实现hTPM并实现上一节中描述的设计目标。总体架构如图2所示。
图2 TPM结构
​首先，我们的S模式TPM与正常的世界操作系统安全隔离。我们利用基于Windows10的虚拟化来提供关键的隔离属性。请注意，我们的建议可以应用于其中集成了虚拟化技术的其他商品操作系统。窗口10引入了一种新的安全功能，称为虚拟安全模式（VSM）。VSM利用Hyper-V虚拟机管理程序和第二级地址转换（SLAT）来创建一组称为虚拟信任级（VTL）的模式。这种新的软件体系结构创建了一个安全边界，以防止在一个VTL中运行的进程访问另一个VTL的内存。这种隔离的好处包括在保护资产（例如密码散列和Kerberos密钥）的同时，可以进一步缓解内核漏洞。内核模式和用户模式代码的传统模型分别在CPU环0和环3中运行。在VSM模型中，在传统模型中运行的代码在VTL0中执行，并且无法访问特权更高的用户VTL1。VTL是分层的，这意味着在VTL1中运行的任何代码都比在VTL0中运行的代码更具特权。VTL隔离由Hyper-V管理程序创建，该管理程序在引导时使用二级地址转换（SLAT）分配内存空间。它会在系统运行时动态地继续执行此操作，从而保护安全内核指定需要从VTL0保护的内存，因为该内存将用于包含机密信息。当为两个VTL分配了单独的内存块时，通过为具有适当访问权限的VTL1和VTL0分配独占内存块，为VTL1创建了安全的运行时环境。Trustlet是可信任进程的缩写，是在VSM安全模式下作为IUM进程运行的程序。它们通过将它们编组到在VTL0环0中运行的Windows内核来完成系统调用。VSM创建一个小型执行环境，包括在VTL1中执行的小型安全内核，该内核与在VTL0中运行的内核和驱动程序隔离。明显的安全性好处是将VTL1中的trustlet用户模式页面与VTL0内核中运行的驱动程序隔离。即使VTL0的内核模式受到恶意软件的破坏，它也无权访问委托人。
​
我们的软件TPM在VTL1内部实现，并且所有关键任务操作都在VTL1容器内完全隔离并受到保护。例如，使用用户凭证进行的密钥启封是在VTL1S-ModeTPM内部处理的，并且永远不会暴露给普通的操作系统。此外，从dTPM派生的主密钥仅保留在VTL1的安全内存中，在引导阶段，信任将从H模式TPM传输到该安全内存中。
​
其次，TPM状态安全地存储在非易失性存储器中，以便可以在重新启动或睡眠后恢复该状态。我们使用从VTL1存储密钥派生的密钥来加密状态信息并将其存储在文件系统中。由于使用仅VTL1知道的密钥对其进行加密，因此无法对其进行篡改。另外，我们不存储派生密钥，而是即时从VTL1主密钥派生的，以减少攻击面。
​
第三，我们通过利用基于虚拟化的隔离和硬件TPM来实现深度防御。根密钥（例如SRK，EK，AIK）通过硬件保护安全地存储在H模式TPM中，并且用作基于硬件的信任根。VSM通过使用隔离的环境来提供额外的防御深度。普通操作系统无法直接访问dTPM内部的根密钥。它应该通过VSM，并且VSM充当密钥管理中的附加防火墙。
​
第四，我们通过信任转移和H模式与S模式之间的安全通信通道建立，在H模式与S模式之间建立了无缝的信任信任关系。为此，我们生成了多个VTL1主密钥。一个密钥是从dTPM的SRK派生的存储主密钥。另一个密钥是通信主密钥，用于保护VTL1和dTPM之间的通信。分别来自通信主密钥的机密性和完整性保护密钥。VTL1存储密钥和通信主密钥都是在引导过程中派生的。为避免密钥被盗用，将密钥密封到VTL1映像和设备配置的状态。另外，关键是当且仅当它在启动过程中通过dTPM的设备认证时，才被密封。密钥是针对TPM的状态密封的，TPM的状态通过PCR的子集表示。密封的信息使用公钥加密，并且仅在所选PCR处于密封时的确切状态下才能解密。一旦从dTPM根密钥派生VTL1主密钥并将其放置在VTL1的受保护安全存储器中，就只能从VTL1进行访问，并且信任建立完成。
​
第五，我们为基于硬件的TPM和基于软件的TPM提供了完全双重模式，这意味着VTL1可以完全控制以根据应用程序的需求使用其中一种。为了提高可用性，我们的参考实现的构造如图3所示。所有应用程序需要做的是调用相同的包装器API，并设置一个标志以指示它打算使用H模式TPM还是S模式TPM。然后，包装程序根据该标志将应用程序的请求路由到硬件TPM或软件TPM。标志的完整性受到保护，因为它是应用程序可执行映像的一部分。
图3 整体软件架构
## 性能评估
​
dTPM由于其低成本的设计原理而存在严重的性能问题，如图1所示。它对要求高操作质量的应用提出了可用性挑战。由于其操作的数学特性（例如大质数搜索，模幂运算），RSA密钥生成，解密和签名的速度特别慢。我们展示了如何通过我们提出的hTPM方案显着提高性能。我们已经使用TPM参考实现版本1.16实现了hTPM。用户只需设置标志以映射相应的功能指针，即可在H模式和S模式之间切换。我们从DELL和HP中选择了商用OEM设备，并使用英飞凌和NuvotondTPM进行了性能评估。戴尔计算机使用英特尔至强CPUE5-1650v43.60GHz，3601Mhz6核，12个逻辑处理器。戴尔计算机的TPM是NuvotonTechnology（NTC），具有1.3.2.8和TPM规范版本2.0。HP使用IntelXeonCPUE3-1505Mv63GHz，300Mhz，4个内核，8个逻辑处理器。HP机器的TPM使用Infineon（IFX）版本7.61.2785.0和TPM规范版本2.0。
## 结论
​
对于要求高操作性能，可用性和端到端系统安全性保证的应用，纯硬件和纯软件TPM解决方案都构成了重大挑战。在本文中，我们提出了混合TPM方案，其中我们有效地结合了基于硬件的TPM和基于软件的TPM的优点。我们提出了一种复杂的设计，以克服实施hTPM的技术和安全挑战。我们的风险分析表明，hTPM设计可提供最高级别的安全保证，并可以有效地减轻实施hTPM的可能风险。此外，我们对参考hTPM实施方案的性能分析表明，通过安全利用现代CPU的高性能，与dTPM相比，性能有了显着提高。