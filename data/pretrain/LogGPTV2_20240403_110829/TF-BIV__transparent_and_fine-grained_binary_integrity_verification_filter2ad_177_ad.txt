(cid:32)
(cid:32)
(cid:32)
TF-BIV
(cid:35): not supported(cid:71)(cid:35): partially supported(cid:32): fully supported
purpose. The DMA attacks may modify the physical memory di-
rectly, bypassing the permission checking in MMU. As a result,
code may be modified without causing a VM exit. IOMMU [69] may
be integrated to prevent illegal DMA attacks.
5.2 Comparison with Existing Solutions
Various hypervisor-based solutions [5, 19, 36, 47, 54, 59] have been
proposed for the integrity verification and protection for different
purposes. Patagonix [54] verifies all the binaries before execution
to detect the rootkits. HIMA [5] prevents the execution of unau-
thorized binaries. InkTag [36], AppShield [19] and AppSec [59]
protect the integrity of the critical process even when the guest
OS is untrusted. En-ACCI [47] aims to enhance the authentication
mechanism of the cloud-based cryptographic services by checking
the integrity of the caller. Table 1 compares these solutions based
on the design goals described in Section 4.1.
Isolation: The integrity validator needs to be isolated from the
guest VM, and any activity in the guest VM should never harm the
correctness of verification results. All these solutions aim to achieve
this based on virtualization. Patagonix and TF-BIV achieve the full
isolation, as Patagonix utilizes the VMM’s control of the MMU
while TF-BIV relies on the hardware feature to discover the code
execution and trigger the integrity verification executed in VMM.
However, HIMA requires kernel patch (PaX [76]) to enforce W⊕X
support, which may impact the verification result if the patching
is subverted. En-ACCI relies on the semantic information provide
by VMI and thus is vulnerable to the VMI subversion attacks (e.g.,
DKSM [7]). InkTag, AppShield and AppSec require the protected bi-
naries to issue a hypercall at the startup, which triggers the integrity
verification performed in the VMM.
TOCTTOU consistency: Once a code page has been verified, it
should not be changed any more. Patagonix and HIMA use shadow
page table to translate the GVA to HPA while AppSec and TF-
BIV adopt EPT to translate the GPA to HPA. They achieve full
TOCTTOU consistency as the VMM configures the verified pages
non-writable based on the mechanisms provided by shadow page
table or EPT. En-ACCI fails to provide TOCTTOU consistency as it
doesn’t provide any protection for the verified code pages. InkTag
and AppShield isolate the critical application from the untrusted
guest OS by adopting two EPTs, one for the critical application
and one for all the others, while the code is verified before being
executed in the isolated environment.
Transparency: The to-be-protected binaries and VM OS should
not need any modification. In Patagonix, En-ACCI and TF-BIV, the
integrity checking is transparent to the guest OS and the target
programs because the solution is deployed directly in the VMM
without any modification (e.g., hooks, drivers, libraries) in the guest
VM. For Patagonix and TF-BIV, the integrity verification is trig-
gered and performed in VMM directly if the permission on the
physical frames (i.e., non-executable) is violated. En-ACCI invokes
the verification in VMM directly once the VMM captures a crypto-
graphic service invocation. HIMA doesn’t require any modification
to most OS kernels which provide native support of W⊕X, while
others (e.g., Linux kernel v2.6.18) need to be patched with PaX [76].
InkTag and AppShield require the modification and redeployment
of the specified applications for invoking a set of hypercalls to
trigger the protection provided by VMM. AppSec requires the VM
to deploy a safe loader, which distinguishes S-processes from oth-
ers and invokes hypercalls to trigger the integrity verification for
S-processes.
Fine-grained Verification: In TF-BIV, InkTag, AppShield and
AppSec, only the specified processes are thoroughly checked while
the others may be installed and updated arbitrarily. The details
for identifying the S-process in TF-BIV are provided in Section 4.
In InkTag and AppShield, the programs declare they are sensitive
by invoking the corresponding hypercall actively. In AppSec, the
safe loader, running in VM, distinguishes the S-process from others.
Patagonix and HIMA verify all the binaries before execution, at-
tempting to provide a safe environment without rootkits. En-ACCI
fails to perform thorough verification for S-process, as it doesn’t
verify the dependent libraries.
6 THE APPLICATION IN CLOUD-BASED
CRYPTOGRAPHIC SERVICES
We integrate TF-BIV with a cloud-based cryptographic service.
TF-BIV provides integrity verification for the programs that need
access to cryptographic keys stored outside of the VM.
Motivation. Cloud-based cryptographic service is a sensitive ser-
vice, the abuse of which may introduce significant damages. For
example, the abuse of the cryptographic signing service may re-
sult in an illegal transaction. For the cloud-based cryptographic
service, usually the cryptographic algorithms are semantically se-
cure and the cryptographic key is strong enough. However, the
authentication and authorization mechanisms are often too weak
to prevent the adversary from abusing the cryptographic service.
As described in Section 1, the existing authentication mechanism
of the cloud-based cryptographic service is based on identification
and passwords, and the service is authorized to the entire VM once
the authentication passed, even only one or a small number of
processes running in the VM actually need to invoke the service.
Therefore, the adversary, who obtains the leaked identification and
passwords [13, 75], may exploit the vulnerability of the VM OS or
any application, to illegally access the cryptographic computations
for his purpose.
6.1 Integration into Cloud-based Service
When using TF-BIV to protect cloud-based cryptographic service,
the tenants need to specify a list of binaries that are authorized to
invoke the cloud-based cryptographic service. TF-BIV analyzes the
dependency of the binary, calculates the reference hash values for
Figure 3: TF-BIV applied in cloud-based cryptographic ser-
vice.
each code page of the authorized binaries and the dependency (i.e.,
the OS kernel, LKMs and shared libraries), and stores the reference
hash values in the database.
An overview of the integration of TF-BIV in the authorization of
cloud-based cryptographic service is provided in Figure 3. Firstly,
TF-BIV transparently identifies and verifies the integrity of the
S-processes (and the dependencies) in the corresponding VM exit
handlers as described in Section 4, and maintains a list of verified S-
processes. Then, before sending the cryptographic service request
to the remote cryptographic service provider and returning the
response to the requester, the agent deployed in the VMM identifies
the process that issues the cryptographic request, and transmits
the request and response only if the process is in the S-process list.
As the real-world cloud-based cryptographic services [2, 20, 34,
55] usually provides the service through HTTPS connections, we
deploy the agent in the network card emulator. When the IP address
and port indicate that an HTTPS connection to the cloud-based
cryptographic service is established or being used, the process
corresponding to this HTTPS connection needs to be located to
enforce the process-level authorization. If the process is not in the
list of verified S-processes, the HTTPS connection will be dropped
directly.
The semantics information of the guest VM OS is required to iden-
tify the process corresponding to the HTTPS connection. In addition
to the assumption described in Section 3, we assume that the profile
of OS kernel (i.e., the kernel data structure and the logical addresses
of the essential kernel symbols) is not tampered with during the
integration. Specifically, in our implementation, the adopted kernel
data structures include task_stuct, mm_struct, files_struct,
fdtable and file, while the used system symbols are init_task,
socket_operation and socket_dentry_operation. TF-BIV veri-
fies the integrity of the kernel code, and may integrate OSck [35]
or KI-MON [50] to protect the kernel data for the correctness of
obtained semantics information.
7 IMPLEMENTATION
We have implemented a prototype of TF-BIV based on QEMU-KVM
v1.7.1, and have integrated it in the process-level authorization for
a cloud-based cryptographic service.
7.1 TF-BIV Implementation
TF-BIV is implemented as a KVM component. In details, TF-BIV sets
MTF flag and CR3-load exiting flag in VMCS, configures the EPT
KMSMonitored VMUser AppNetwork Card EmulatorTF-BIVVMMUser SpaceKernel VM ExitVM EntryVM Exit Handlerhttps Reference Hashes and OS Profileentries to trigger necessary VM exits, and completes the identifica-
tion and integrity verification of the processes in the corresponding
VM exit handlers. All the implementation is completed with less
than 1000 lines of code.
As described in Section 4, TF-BIV triggers four VM exits (CR3-
load exiting, MTF exiting, EPT NW exiting, and EPT NX exiting), for
tracking the S-process creation, monitoring the memory page and
modification of S-processes, and verifying the integrity of the code
for S-process. TF-BIV invokes the function vmcs_write to set the
corresponding bit in VMCS to register each VM exit events. For the
CR3-load exit event, TF-BIV sets the Cr3-load exiting bit, clears
the Cr3-target value and configures the Cr3-target count to 0
in VMCS, which causes a VM exit once an instruction loads any value
to the CR3 register. In the corresponding handler, TF-BIV checks
whether the process is a newly created and identifies the newly
created process by comparing the code page with the reference
hash values.
For different types of code (i.e., kernel, LKMs, S-processes, and
shared libraries), various analyzers are adopted to generate the
reference hash values. For S-processes and shared libraries, the an-
alyzer obtains the .text content, entry point, offset and alignment
from the ELF file directly, and adopts the hash algorithm to generate
the reference hash value for each code page, which is stored with
the offset information in the database. For S-processes, the code
page containing the entry point will be identified to accelerate the
identification of S-process. The kernel and LKM will modify the in-
structions for optimization based on the hardware platform, which
is specified in a special section [54]. TF-BIV simulates the loading
process of the kernel and LKM in the target platform, and generates
the corresponding reference hash values. For LKM, the analyzer
parses the binary according to the section header table and an array
of Elf64_Shdr structures to obtain the .text, .data and symbols
To monitor the memory pages for S-processes, TF-BIV invokes
the functions vmcs_read to obtain the base physical address of
S-process from the CR3 register, identifies the memory areas cor-
responding to the memory pages, and sets the page table pointed
by CR3 value as non-writable in the handler of CR3-load exiting.
Once a VM exit event occurs due to the modification of S-process’s
page table, TF-BIV makes the page table as writable by configuring
the corresponding EPT entries and sets the MTF bit in VMCS to ob-
tain the stable version of the page table before the first instruction
of the newly mapped code page executed. In the handler of MTF
exiting, TF-BIV clears the MTF bit and sets the memory pages as
non-writable again to capture the further modification.
To register EPT violation events, TF-BIV sets the access bits
on the pte entry in EPT. According to the exit-qualification
obtained from VMCS, the corresponding functions will be invoked
to handle the EPT violation events. For each loaded code page,
TF-BIV sets it as non-executable by configuring the pte entry. In
the handler, TF-BIV invokes vmcs_read for the GVA of page fault
from the CR2 register, obtains the memory area information from
task_struct.mm, identifies the binaries for the process, verifies
the integrity according to the type of the code, and sets the code
page as executable but non-writable once the integrity verification
passed. In the handler of EPT NW exiting, TF-BIV sets the modified
code page as non-executable again for the re-verification.
for the init and core blocks. For the relocatable addresses in each
binary, TF-BIV sets them as zero in calculating the hash values.
7.2 Integration
When TF-BIV is applied to the cloud-based cryptographic ser-
vice for process-level authorization, we need to find the process
that issues network connection between the VM and the service
provider. To achieve this, we modify the e1000 card emulator in
QEMU with less than 400 lines of code. In details, in the func-
tions e1000_send_packet (sending network packets) and e1000_
receive_iov (receiving network packets), we find the process cor-
responding to the TCP packets whose IP address and port are con-
sistent with these of the service provider, and transmit the data
only when the process is in the S-process list.
We find the process corresponding to the packets based on the
guest OS profile, which is generated by the memory forensics tool
volatility [80] and dwarf-tools. For example, in Linux, because the
network connection is processed as a file, we parse the files of
the type files_struct for each process (i.e., each element of the
type task_struct in the kernel variable tasks) to obtain the files
opened by each process. After parsing the kernel data structure
file for each file, we check whether the file represents a network
connection. This is achieved by checking the socket_file_ops
function pointer array. We parse the dentry further to obtain the
IP address and port, and check whether the connection is related
to the cryptographic service. Finally, we obtain the base physical
address through the variable pgd, which is a member of the data
structure mm_struct. The obtained base physical address is used to
check whether the process is authorized to invoke the cryptographic
service.
8 PERFORMANCE EVALUATION
We have evaluated the performance overhead imposed by TF-BIV to
the startup of guest VM and to the host CPU. We have also evaluated