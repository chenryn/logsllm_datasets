.\" -*- nroff -*-
.\" manual page [] for chat 1.8
.\" SH section heading
.\" SS subsection heading
.\" LP paragraph
.\" IP indented paragraph
.\" TP hanging label
.TH CHAT 8 "22 May 1999" "Chat Version 1.22"
.SH NAME
chat \- 与数据机自动沟通的指令稿
.SH "总览 SYNOPSIS"
.B chat
[
.I options
]
.I script
.SH "描述 DESCRIPTION"
.LP
\fIchat\fR 程式在电脑与数据机之间定义沟通交换事宜。 它最主要的
目的是用来在点对点协定的隐形程式 (pppd) 以及远端的 pppd  程序
之间建立连线。
.SH "选项 OPTIONS"
.TP
.B -f \fI
从 chat 档案读取 chat 指令稿。这个选项的使用与 chat 的
令稿参数互斥(mutually exclusive)。使用者必须具有存取该
档案的读取权。在档案中允许多线(multiple lines)设定。应
该要以空白或是横向定位(horizontal tab)字元来分隔字串。
.TP
.B -t \fI
对于所要接收的期待字串(expected string)设定逾时限制。  如果在该时间限制内没有接收到该字串的话那么就不送出回复  字串(reply string)。 可以送出一个变通(alternate)的回复  或者如果没有变通的回复字串则该指令稿将会失败。一个失败  的指令稿将会使得 chat 程式以一个非零的错误码结束。
.TP
.B -r \fI
Set the file for output of the report strings. If you use the keyword
\fIREPORT\fR, the resulting strings are written to this file. If this
option is not used and you still use \fIREPORT\fR keywords, the
\fIstderr\fR file is used for the report strings.
.TP
.B -e
Start with the echo option turned on. Echoing may also be turned on
or off at specific points in the chat script by using the \fIECHO\fR
keyword. When echoing is enabled, all output from the modem is echoed
to \fIstderr\fR.
.TP
.B -E
Enables environment variable substituion within chat scripts using the
standard \fI$xxx\fR syntax.
.TP
.B -v
要求 chat 指令稿以冗长(verbose)模式执行。 这个 chat 程  式接下来会将所有从数据机接收的文字以及输出的字串记录到  SYSLOG 去。The default is to log through the SYSLOG;
the logging method may be altered with the -S and -s flags.
.TP
.B -V
Request that the \fIchat\fR script be executed in a stderr verbose
mode. The \fIchat\fR program will then log all text received from the
modem and the output strings sent to the modem to the stderr device. This
device is usually the local console at the station running the chat or
pppd program.
.TP
.B -s
Use stderr.  All log messages from '-v' and all error messages will be
sent to stderr.
.TP
.B -S
Do not use the SYSLOG.  By default, error messages are sent to the
SYSLOG.  The use of -S will prevent both log messages from '-v' and
error messages from being sent to the SYSLOG.
.TP
.B -T \fI
Pass in an arbitary string, usually a phone number, that will be
substituted for the \\T substitution metacharacter in a send string.
.TP
.B -U \fI
Pass in a second string, usually a phone number, that will be
substituted for the \\U substitution metacharacter in a send string.
This is useful when dialing an ISDN terminal adapter that requires two 
numbers.
.TP
.B script
script 如果指令稿没有以 -f 选项指定在档案里那么该指令稿会如同  参数般被包含在 chat 程式里。
.SH "CHAT 脚本 SCRIPT"
.LP
\fIchat\fR 脚本定义通讯过程
.LP
一个指令稿里包含一个或多个〞期待对方送出(expect-send)〞的配对
字串(pairs of string)，以空白隔开，还有一个选择性的〞期待对方
送出之候补(subexpect-subsend)〞配对字串，以短线(dash)隔开。像
下面这个例子：
.IP
ogin:-BREAK-ogin: ppp ssword: hello2u2
.LP
这一行指示 chat 程式应该期待 "ogin:" 这个字串。如果在所分配的
时间区间内接收签入提示失败的话， 那它就送出一个中断程序(break
sequence)给远端然后期待 "ogin:" 这个字串。 如果第一个 "ogin:"
被接收到那么中断程序就不会产生。
.LP
一旦它接收到该签入提示则 chat 程式将会送出 ppp 这个字串然后期
待 "ssword:" 这个提示。当它接收到密码提示以后，它将会送出密码
hello2u2 。
.LP
一般在回复字串后面会跟著送出一个机架返回(carriage return)。在
〞期待〞字串里除非以 \r  字元程序(character sequence)指定为必
须否则不会期待它的出现。
.LP
期待程序(expect sequence)应该只包含辨认字串所需要的资料。因为
它一般是储放在磁碟档案里，它不应该包含变动的资讯。 通常以期待
字串来寻找时间字串(time strings)， 网路辨识字串(network iden-
tification strings)，或是其它变动的资料是不被接受的。
.LP
为求协助修正在初始化程序中(initial sequence) 可能会传送错误的
字元，所以寻找 "ogin:" 这个字串而不是 "login:" 。 开头的  "l"
字元可能接收错误而你永远找不到该字串， 即使它已经被系统送出。
因此缘故，指令稿寻找 "ogin:" 而不是 "login:" 以及 "ssword" 而
不是 "password:" 。
.LP
一个非常简单的指令稿看起来可能像这样：
.IP
ogin: ppp ssword: hello2u2
.LP
换句话说， 期待 ...ogin:,  送出 ppp,  期待 ...ssword:, 再送出
hello2u2 。
.LP
在实际使用上，简单的指令稿是罕见的。最少最少， 原先的字串没有
被接收时你应该要把候补期待(sub-sequences)包括进来。例如，考虑
下面这个例子：
.IP
ogin:--ogin: ppp ssword: hello2u2
.LP
这会是一个比前面所用的简单指令稿更好的指令稿。 这个会寻找相同
同的 login: 提示，然而, 如果没有接收到的话， 会送出一个单独的
返回程序(return sequence)并且它会接著再次寻找 login: 。要是杂
杂讯掩盖掉第一个 login 提示那么接著送出空线路(empty line)经常
将会再次产生签入提示。
.SH COMMENTS
Comments can be embedded in the chat script. A comment is a line which
starts with the \fB#\fR (hash) character in column 1. Such comment
lines are just ignored by the chat program. If a '#' character is to
be expected as the first character of the expect sequence, you should
quote the expect string.
If you want to wait for a prompt that starts with a # (hash)
character, you would have to write something like this:
.IP
# Now wait for the prompt and send logout string
.br
\'# ' logout
.LP
.SH SENDING DATA FROM A FILE
If the string to send starts with an at sign (@), the rest of the
string is taken to be the name of a file to read to get the string to
send.  If the last character of the data read is a newline, it is
removed.  The file can be a named pipe (or fifo) instead of a regular
file.  This provides a way for \fBchat\fR to communicate with another
program, for example, a program to prompt the user and receive a
password typed in.
.LP
.SH "放弃字符串 ABORT STRINGS"
许多数据机会以字串来回报呼叫的状况。 这些字串可能是 CONNECTED
或是 NO CARRIER 或是 BUSY 。 通常要是数据机连线到远端失败的话
应该会希望结束指令稿。 困难是指令稿不会确实地知道它可能接收到
哪个数据机字串。在某次尝试时， 他可能接收到 BUSY 然而下次它可
能接收到 NO CARRIER 。
.LP
这些〞失败〞字串可以用 ABORT 程序指定到指令稿中。像是下面这个
例子般地写到指令稿里：
.IP
ABORT BUSY ABORT 'NO CARRIER' '' ATZ OK ATDT5551212 CONNECT
.LP
这个程序将不会期待什么；而且接著送出 ATZ 这个字串。对此期待的
回应是 OK 这个字串。当它接收到 OK 时，字串 ADTD5551212 就进行
拨号。期待字串是 CONNECT 。 如果字串 CONNECT 被接收到那么就会
执行指令稿其余的部份。然而，要是数据机发现电话忙线， 他将会送
出 BUSY 这个字串。 这会使得该字串符合失败字元程序(abort char-
acter)。 这个指令稿将会因为它发现一个失败字串(abort string)而
失败(fail)。如果他接收到的是 NO CARRIER 字串， 它也会因为同样
的原因而失败。不是可以接收到字串就是字串将终结 chat 指令稿。
.SH CLR_ABORT STRINGS
This sequence allows for clearing previously set \fBABORT\fR strings.
\fBABORT\fR strings are kept in an array of a pre-determined size (at
compilation time); \fBCLR_ABORT\fR will reclaim the space for cleared
entries so that new strings can use that space.
.SH SAY STRINGS
The \fBSAY\fR directive allows the script to send strings to the user
at the terminal via standard error.  If \fBchat\fR is being run by
pppd, and pppd is running as a daemon (detached from its controlling
terminal), standard error will normally be redirected to the file
/etc/ppp/connect-errors.
.LP
\fBSAY\fR strings must be enclosed in single or double quotes. If
carriage return and line feed are needed in the string to be output,
you must explicitely add them to your string.
.LP
The SAY strings could be used to give progress messages in sections of
the script where you want to have 'ECHO OFF' but still let the user
know what is happening.  An example is:
.IP
ABORT BUSY 
.br
ECHO OFF 
.br
SAY "Dialling your ISP...\\n" 
.br
\'' ATDT5551212 
.br
TIMEOUT 120
.br
SAY "Waiting up to 2 minutes for connection ... "
.br
CONNECT '' 
.br
SAY "Connected, now logging in ...\n"
.br
ogin: account
.br
ssword: pass
.br
$ \c
SAY "Logged in OK ...\n"
\fIetc ...\fR
.LP
This sequence will only present the SAY strings to the user and all
the details of the script will remain hidden. For example, if the
above script works, the user will see:
.IP
Dialling your ISP...
.br
Waiting up to 2 minutes for connection ... Connected, now logging in ...
.br
Logged in OK ...
.LP
.SH REPORT STRINGS
A \fBreport\fR string is similar to the ABORT string. The difference
is that the strings, and all characters to the next control character
such as a carriage return, are written to the report file.
.LP
The report strings may be used to isolate the transmission rate of the
modem's connect string and return the value to the chat user. The
analysis of the report string logic occurs in conjunction with the
other string processing such as looking for the expect string. The use
of the same string for a report and abort sequence is probably not
very useful, however, it is possible.
.LP
The report strings to no change the completion code of the program.