### Channel Measurement and Data Transfer at Low Bitrates

Although impractical for supporting high data transfer rates, backscatter communication can still be useful for channel measurement at extremely low bitrates. Consider the scenario where a peripheral device transmits to a central station using a polymorphic radio. To measure the channel, a short training sequence of a few bits can be transmitted, and the Received Signal Strength (RSS) can be estimated by correlating the received signal with the training sequence. Since the training sequence can be as short as a few bits, the backscatter bitrate can be as low as a few kilobits per second, allowing it to operate over longer distances (e.g., 75 meters at 2.9 kbps [49]). Figure 2(b) illustrates this concept: the grey line representing backscatter RSS is below the receive sensitivity at 100 kbps but mostly above the sensitivity at 3 kbps.

The primary benefit of using backscatter for channel measurement is enhanced visibility into the channel with near-zero power consumption. This additional visibility allows for more judicious use of the active radio in two ways:
1. **Bitrate Selection**: We can select the best bitrate for the active radio even after a long sleep period.
2. **Timing Optimization**: We can choose the best times to wake up the active radio by selecting moments when the RSS is strongest. The figure demonstrates these advantages, showing how leveraging backscatter for channel visibility enables the selection of optimal active bitrates (represented by line segments) and the best times for active transmission (represented by peaks).

It is important to note that this approach does not directly apply to scenarios where the peripheral is receiving data from the central station. An envelope detector does not provide signal strength information, making it unsuitable for channel measurement. Therefore, we use passive-assisted active transmission solely for uplink communication from the peripheral to the central station.

### Morpho PHY Layer Design

The main challenge at the Physical (PHY) layer is seamlessly integrating passive and active radio components to enable transparent switching between various modes without the application perceiving the switching behavior. To achieve this, we designed the Morpho hardware to facilitate rapid and seamless switching.

**Figure 3: Building blocks of Morpho hardware.**

To illustrate the need for a new design, consider a strawman solution for an active-passive radio that simply connects an active radio like Bluetooth Low Energy (BLE) with a passive radio (e.g., WISP) and switches between them as needed (similar to BLISP [19]). Such a design is inefficient due to the lack of configurability. Most radio ICs have the TX and RX components tied together, limiting the ability to mix-and-match different possibilities. For example, low-power active radios like BLE turn on both the TX and RX components when switching from sleep mode, assuming active-mode ACKs will follow the data packet. Additionally, most commercial radios incur setup delays upon receiving commands, making rapid switching difficult. In contrast, our goal is to have the flexibility to rapidly switch between all four combinations of passive and active RX/TX.

#### 4.1 Morpho Sensor Architecture

Morpho is designed for one-hop asymmetric settings where the peripheral (e.g., IoT sensor or mobile accessory) is resource-constrained, while the central station (e.g., access point or edge cloud) is resource-rich. The radio architecture on the peripheral is shown in Figure 3 (upper block).

- **Morpho TX**: The Morpho transmitter includes an ultra-low power RF oscillator that shares the antenna path.

### Experimental Setup and Evaluation

#### 7.1 Morpho Prototype

One issue encountered was the unavailability of ultra-low power RF oscillators with tight sleep-active transition times as stand-alone components for PCB-level integration. Therefore, we custom-designed a Collpitt LC oscillator and integrated it with the backscatter radio (RF oscillator block in Figure 3). The oscillator was first designed in ADS simulation to tune its LC components and micro-strip track lengths to the desired frequency and output power. It was then implemented on a PCB with an NXP BFU690F NPN RF transistor [35]. The Collpitt oscillator has an output power of +1.1 dBm, a wakeup time of 25-35 µs, and generates a 910 MHz carrier.

Other key components include:
- **Backscatter Switch**: ADG902 SPST RF switch [3].
- **Envelope Detectors**: HSMS-285C Schottky diodes [6].
- **ASK Modulation**: ADEX-10L+ passive mixer [31] for higher-order ASK modulations.
- **Mode Switching**: ADG919 SPDT RF switches [4] for multiplexing between [Tx/Rx ⇄ antenna] paths and switching between active and passive modes.
- **Antenna Splitter**: ADP-2-10+ RF power splitter [32] to split the Tx and Rx paths to the antenna.
- **Antenna**: W1910 1dBi small whip antenna [40].

On the digital side, the packetizer, MAC layer controller, and the low-bit-rate sequence generator for measurement are implemented externally on an AGLN250 low-power FPGA development board [30], which connects to the prototype via the connectors shown in Figure 8.

#### 7.2 Base Station Implementation

Our base station is built based on a X300 USRP [13] operating at +30 dBm carrier. To support both backscatter and active modes, we use an ADG902 evaluation board [3] to turn the carrier on and off. The decision engine and data decoding stack are implemented inside a Mac mini computer connected to the USRP and the ADG902 switch. The UBX-40 daughter board has a -100 dBm noise level for 1 MHz bandwidth.

On the software side, we run switching and control tasks in MATLAB, transferring raw IQ samples from the USRP to the MATLAB environment using a TCP socket. There is a 200-300 µs latency in the connection, which has a minimal effect on overall performance. Within MATLAB, we implemented several software modules, including backscatter RSSI measurement, active RSSI measurement, ASK demodulation, data imputation, and prediction engine.

### Evaluation

Our evaluation combines trace-driven and real experiments. To compare different communication strategies under the same channel dynamics, we benchmark and compare results on traces where we simultaneously collected data from active and passive radios. The application studies are based on a live implementation.

#### 8.1 Hardware Micro-Benchmarks

We start with hardware micro-benchmarks before presenting overall performance results. Table 2 benchmarks the performance of Morpho at the hardware level. The most significant optimization is the ability to switch within tens of microseconds between passive and active modes, enabling swift responses to channel dynamics. The results also show that we operate at extremely low power levels while measuring the channel via backscatter. Our Colpitt oscillator performs efficiently at output power levels typically used by low-power radios.

The table also highlights the benefits of using both a high-rate, short-range detector and a long-range, low-rate detector. The fast detector supports good bitrates of 32-128 kbps but operates only at high RSS levels of roughly -50 dBm. The slow detector, on the other hand, operates at lower bitrates (up to 10 kbps) but can function at much lower RSS levels (down to -90 dBm).

#### 8.2 Benefits of Prediction

**Table 4: Benefits of prediction.**

| Method | T1 (bits/µJ) | T2 (bits/µJ) | T3 (bits/µJ) | T4 (bits/µJ) |
|--------|--------------|--------------|--------------|--------------|
| Baseline (use prev. slot RSSI) | 685 | 545 | 321 | 244 |
| Morpho Prediction | 1092 | 968 | 535 | 556 |

**Benefits of predicting active channel:** Our prediction scheme improves energy efficiency by approximately two times compared to a baseline method that assumes the current slot's RSS is the same as the previous slot's RSS. The naive prediction method cannot handle dynamic channel conditions effectively.

#### 8.3 Application-Layer Performance

We now evaluate two applications that leverage Morpho and assess how the radio can improve their performance. These results are based on full hardware-software integration for live experimentation.

**Eye Tracking:**
- **Figure 13: Prototype of eye tracker with Morpho.**
- **Table 5: Optimizing eye tracking with Morpho.**

| Method | Gaze Error (all dist.) | Gaze Error (short dist.) |
|--------|-----------------------|-------------------------|
| Active | 9.1 ± 5.7 | 3.6 ± 3.4 |
| Backscatter | 17.8 ± 8.6 | 8.8 ± 6.0 |
| Morpho | 10.6 ± 7.4 | 2.7 ± 2.7 |

For this evaluation, we assume the eye tracker has a fixed power budget of 100 µW for every gaze location update at a 30 Hz frame rate. The tracker adjusts the sampling rate based on the available budget. When communication costs more, it samples less, and vice versa. We followed the same procedure as in Table 1, moving around a room in a scripted manner while running a live version of the eye tracker.

Morpho reduces gaze error by about 3× over an active-only approach and 4-5× over a backscatter-only approach, both at short distances and across all distances. The improvements occur because Morpho can use saved communication energy for sensing, transmitting more samples and improving accuracy.

**Voice Audio Streaming:**
- **Table 6: Audio voice quality over Morpho versus duty-cycled active and backscatter-only.**

| Method | Short Distance MOS | All Distance MOS | Short Distance bits/nJ | All Distance bits/nJ |
|--------|---------------------|-------------------|------------------------|----------------------|
| Active | 4.4 | 4.3 | 0.17 | 0.17 |
| Backscatter | 2.85 | 2.51 | 100 | 100 |
| Morpho | 4.1 | 4.0 | 1.74 | 0.98 |

For this experiment, we attached Morpho to a shirt and transmitted a stored audio stream via different modes. We used typical audio streaming parameters (40 kbps rate, 125-byte audio packets, and 30 ms latency). We followed the same procedure as the eye tracking example, moving across different locations in the room while the data was being transmitted. The Mean Opinion Score (MOS) of the audio stream [41] was computed.

Table 6 shows that the MOS score for Morpho is marginally lower than for the active radio, primarily due to bitrate changes when switching between active and passive modes. However, energy efficiency is four times higher across all distances and an order of magnitude higher at short distances. Backscatter has a considerably lower MOS score but very high energy efficiency. Thus, Morpho leverages the channel to improve energy efficiency without significantly compromising audio quality.