成为KDE中最紧密、最友好、最高效的团队。个人之间的差异和过
去的怨恨都被抛在一边，新加入的成员彻底地改变了大家的态度。
现在，绝大多数的沟通和开发方面的交流都是通过一个邮件列表完
成的（），开发人员还可以使用一个公共的
1196
---
## Page 1198
IRC频道（#kontact），当你问及大家的工作时，得到的回答一定是
“KDEPIM"，而不是"KMail"或"KAddressBook。
在企业环境中，个人信息管理是个关键应用。随着KDE应用程序在
很多大型组织中得到了广泛的应用，使得专业化服务、代码修改、
扩展、打包等（分发工作的一部分，主要是针对个人应用和部署的
场合）需求都在稳定增长，这反过来了也创造了一个提供以上服务
的企业生态系统。这些公司自然会首选雇佣最有资格完成这些工作
的人，也就是这些KDEPIM项目的并发人员。正因为如此，对于
KDEPIM项目中最主要的、活跃的代码贡献者而言，KDEPIM的开
发工作已经成为其公司日常工作的一部分。他们中也有一些人不是
直接从事KDE项目的并发工作，而是全职的C++和Qt开发人员。他
们仍然是志愿者，特别是那些新的代码贡献者，不过核心开发小组
都是由专业人士组成的。I!L由于PIM基础设施对于绝大多数计算机
用户而言都是十分重要的，不管是个人还是商业环境中都是这样，
KDEPIM技术决策过程的指导原则逐渐变得很实用。如果一个想法
无法在合理的时间周期内达到可靠的工作成果，它就会被放弃。对
于所有的修改，都会仔细地分析它对核心功能的潜在影响，这些核
心功能在任何时候都必须处于可运作的状态。对于实验性的、有风
险的决策，项目并没有提供太多的空间。从这个角度而言，该项目
他部分以及其他常见的并源软件有些不同。正如前面所说的那样，
这样的做法并不永远是积极的，因为它必将会阻碍创新性和创造
性。
1]这是令人惊讶的，因为在我们的直觉中，并源软件都是由拥有
大把自由支配时间的学生开发的，但近几年来的事实证明，多半成
功的开源软件项目实际上都是由专业人土开发和维护的。Karim
Lakhani、Bob Wolf、Jeff Bates和Chris Dibona发表的Hacker Survey
v0.73（2002年6月24日，BostonConsultingGroup发布，
http://freesoftware.mit.eduw/papers/lakhaniwolf.pdf）就是一个实证。
12.3.2Akonadi的演化
KDEPIM社区的会议很有规律，有年会以及其他大型的并发人员聚
会，也有一些由5～10名开发人员参与的小型sprint会议。他们会通
过几天的时间、聚焦于某个特定问题的方式进行讨论和编码。这些
会议为讨论大家关心的主要问题、做出大的决策、制定路线、排定
优先级等工作提供了良好的机会。在这些会议中，实现了诸如
1197
---
## Page 1199
Akonadi的第一次发布版本、后续的稳定版本的架构奠定了基础。本
小节接下来的内容将回顾一下本项目中最重要的决策点，我们将从
得出第一个基础性观点的会议并始。
2005年1月，大家在这个每年的冬季会议上碰面时，KDEPIM的基础
设施中的有一些部分初步显露出了不胜负荷的迹象。支持联系人、
日历信息的多种后端实现的抽象KResources、电子邮件应用程序
KMail的存储层中当时所做的一些基本假设都开始变得不再有效。
它的假设主要包括：
想载入地址薄或日历信息的应用程序是十分有限的：也就是说：
KAddressbook和KOrganizer是使用这些信息的主要应用程序。同
样，它假设只有KMail需要访问系统中存储的电子邮件信息。因此
修改通知、并发访问方面的支持是不需要的，或者是很少见的，也
就没有提供正确的锁定机制。
数据总量是十分有限的。毕竞，用户通常需要管理的联系人、约
会、任务会有多少？它假设需要处理的数量级是“百”。
只有C++和Qt程序库、KDE应用程序需要访问这些信息。
会有多种不同的后端实现“在线”工作，它们可以访问存储在服务器
上的数据，而无需将大量数据复制到本地。
对数据的读/写操作是同步的、足够快速的，锁定用户界面的时间
几乎可以忽略不计。
出席2005年年会的人们存在一些意见的分歧，有些人看到的需求是
基于当前用户的实际使用场景的，而有些则是从未来的使用场景角
度看到的潜在需求，这些东西可能是当前三个主要的子系统的设计
无法满足的。数据量在不断上升，源于多个客户端的并发访问变得
越来越多，越来越多的复杂的错误场景给系统的健壮性、可靠性带
来了更大的压力，使事务存储层与用户界面彻底分离的需求越来越
明显。在移动设备上调用KDEPIM程序库时，数据传输将通过低带
宽、高延迟的网络上进行，网络连接经常是不可靠的，这些用户数
据的访问能力要求已经超出了传统的在应用程序内部的访问，而是
在桌面环境中各种的应用都会需要访问它。需要支持的访问不再限
于C++和Qt中，还会涉及脚本语言、进程间通信、Web和网格技术
所带来的访问需求。
1198
---
## Page 1200
虽然这些高级别的问题和目标曾经是无可非议的，有些并发团队遇
到的痛苦是十分具体的，但对每个并发人员而言强度不尽相同，因
此大家对如何解决当前紧急的挑战也有着千差万别的意见。其中一
个问题是当需要在地址薄中查询一个联系人信息时，需要将整个地
址薄载入内存中，因此如果地址薄比较庞大并且包含图片和其他附
件的话，速度就会变得很慢，同时会消耗很多内存。由于它是通过
一个程序库来访问的，每个进程每次初始化这个程序库时就会创建
一个独立的地址簿，而通常在KDE桌面环境中会运行电子邮件、地
址簿、日程安排等应用程序，有时还会有约会提醒进程，因此内存
中就经常可能出现4个甚至更多个地址薄副本。
为了修正在内存中载入多个地址簿副本的问题，这些应用程序的维
护人员提出采用一种基于客户端/服务器模式的方法。更简单的方法
是仅由一个进程负责在内存中保存实际数据。当地址薄被载入到内
存之后，所有对该数据的访问都需要通过IPC机制，现在最常用的
是KDE提供的远程进程调用基础设施DCOP。这样的做法还将隔离
访问同一个联系人数据后台服务（如群件服务）的通信，还有人更
关心原来的构架。虽然经过了允长的讨论，关于内存覆盖区的问题
已经通过该方法解决了，但还存在一些主要的问题。最显著的是锁
定机制、冲突确定还需要在服务层上实现。同时由于现在针对日程
安排的API是形式多样的（因此是基于指针机制的），所以对数据
进行序列化是十分困难的，这要通过DCOP传输就需要对数据进行
序列化。通过IPC接口传输数据始终是十分缓慢的，因此也会引发
一些令人关注的问题，特别是用来访问电子邮件的服务，因此它需
要提供一个建议信息。
对于内存覆盖区的问题，该会议讨论出了一种更好的解决方案，那
就是通过更为灵活的、针对磁盘缓存和内存信息的共享机制，或许
可以考虑使用内存映射文件来解决。鉴于改成基于客户端/服务器架
构方案的复杂性，大家认为挑战很大，而且无法证明其带来的利益
能够抵消妨碍系统正常工作（虽然现在的效果不太令人满意）的风
险。作为一种可行的备选方案，Evolution团队采用了Evolution数据
服务（EvolutionDataServer,EDS）方法被认为是有价值的探索，
Evolution是GNOME项目中开发的与Akonadi竞争的PIM套件，它是
基于glib和GTK程序库栈，用C语言开发的。
在会议上提出数据服务观点的建议者有些失望，在接下来的几个月
中没有太多进展。后来对EDS的基础代码进行了一些尝试性修改，
其目的是为KDE调用该程序库提供支持，但最终发现这将涉及C和
1199
---
## Page 1201
C++世界的连接问题，特别是思维模式和API样式都存在不同，这样
完成的解决方案最好的情况也是不够优雅的，最差的情况则是不可
靠、不完整。EDS使用的是CORBAKDE最初采用的也是CORBA
只不过后来出于种种原因改成了DCOP，因此它并不吸引人。拒绝
采用EDS作为KDE新的PIM数据基础设施的关键原因还是技术上的
判断，同时也是一些对C的偏见，大家不喜欢C语言实现，认为它的
可维护性不好，还有一些“这样做没有创新”的感觉。
到了2005年底，年初讨论的问题开始变得越来越紧急。在诸如桌面
搜索代理程序、语义标签、链接框架等都难以访问电子邮件信息。
实现电子邮件处理功能的应用程序，都拥有自己的用户界面，在此
可以访问搜索出来的电子邮件里的附件，可以打开并对其进行编
辑。这些类似的可用性和性能问题开始增加人们对原有基础设施的
忧虑。
在印度班加罗尔召开的年会上，负责Evolution的开发团队中的主要
成员都参加了，我们就拥有了一次和他们讨论这些问题的机会，同
时也可以向他们询问EDS方面的经验。在这些集会中，很明显看出
他们正面临着KDEPIM团队所发现的相似问题，他们也正考虑着相
似的解决方案，但都不认为在EDS的基础上进行扩展使其支持电子
邮件，或者将其移植到CORBA架构上是可行的做法。来自Evolution
团队的结论是：如果KDEPIM开发团队针对PIM数据访问构建了新
的基础设施，那么他们至少会在概念层面共享其成果，如果它们不
是以独立的C+和KDE程序库的形式提供，那么将可能共享其具体
实现。
未来可能在整个开源桌面软件中共享这一基础设施，另外如果能够
正确地完成该工作，那么将对很多开发社区而言都是有用的，而不
砝码。它将以协议或IPC机制的形式提供一个集成点，而不是一个
需要链接到程序中的程序库，因此对于其他工具集、语言和开发范
型都是开放的。从这一个在KDE和GNOME间共享PIM服务器的场
景，我们也可以看到DBUS栈越来越可能成为跨桌面、跨平台的IPC
和桌面总线系统，现在它也正被所有桌面环境项目所采用，并通过
Freedesktop.org网站实现共享。
另外还有一个跨项目传播的有趣实例，有些PostgreSQL数据库项目
的开发人员也参与了那年的年会，并参与了该主题的一些讨论。他
们感兴趣的是如何有效地管理、访问以及查询结构复杂、规模庞大
1200
---
## Page 1202
的数据，诸如用户邮件、事件、联系人等。他们认为自己的经验和
其开发的软件都将成为这样的系统中的重要部分。他们带来了许多
诸如搜索效率、类型扩展性设计思想等方面的观点，同时还提出了
许多可操作性角度的想法，诸如如何备份这样的系统、如何确保数
据的完整性和健壮性等问题。
几个月之后，在德国Osnabrueck召开的年会上关于PIM数据服务器的
概念再次提到前台，这次有了更多开发电子邮件应用方面的支持
者。这些人都是一年前置疑关于可能会影响性能、增加复杂性-观
点的人。它所引入的视角超出了KDE项目的范围，他们采用的实际
上就是一年前大家所建议的方法之一，只不过当时大家都没有觉悟
甚至没有尝试过，这些压力日增的团队关起门来搭建了一个骨架，
最终使反对者们重新审视其观点，并认真考虑这一分裂性的修改。
在前一年的这些会议上，通过并发人员们的讨论，使得一个非技术
方面的问题得到了答案。团队开始清楚地意识到他们最大的问题是
缺乏新的并发人员加盟项目，而其背后的原因就是他们为项目并发
的是难以使用的、令人不够愉快的程序库或应用程序。更可怕的
是，当前的开发人员不可能永远承担贡献者的责任，而且他们无法
将其学习到的东西传给下一代以保持项目的活性。该解决方案让人
的感觉是对尽可能融合当前KDEPIM并发人员的经验和知识予以了
同样的关注和努力，它可以成为KDE项目下一代责献者的工作基
础，而不仅仅是在构建一个更好的PIM工具。其目标是创建使开发
过程更加轻松愉快、文档更齐全、神秘性更低、更现代的并发平
台。它希望能够吸引新的贡献者，使PIM领域的创新工作不必陷于
令人不快和复杂难解而又不得不用的基础设施中。客户端/服务器方
法似乎能够利于该目标的实现。
要注意的是，这一基础性决策将彻底地改写KDEPIM的数据存储基
础设施，这也意味着需要重新编写系统中很大部分的代码。我们接
少，以某种特殊方式维护4.0版本，毕竞这么大的一次重构在完成之
前会发现很多的变故。也就是说，在KDE4.0中实际上是没有
KDEPIM的，因此将替换上一个有些粗糙但义十分必要的过渡品。
当团队认同这一决策之后，就提出了如下所示的使命描述：
我们的目标是设计一个可扩展的、跨桌面坏境的PIM数据及元数据
的存储服务，提供并发的读、写和查询访问支持。它将提供唯一的