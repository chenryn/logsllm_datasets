title:VASA: Vector AES Instructions for Security Applications
author:Jean-Pierre M&quot;unch and
Thomas Schneider and
Hossein Yalame
VASA: Vector AES Instructions for Security Applications
Jean-Pierre Münch
Thomas Schneider
Hossein Yalame
TU Darmstadt
Darmstadt, Germany
PI:EMAIL
TU Darmstadt
Darmstadt, Germany
PI:EMAIL
TU Darmstadt
Darmstadt, Germany
schneider@encrypto.cs.tu-
darmstadt.de
ABSTRACT
Due to standardization, AES is today’s most widely used block
cipher. Its security is well-studied and hardware acceleration is
available on a variety of platforms. Following the success of the
Intel AES New Instructions (AES-NI), support for Vectorized AES
(VAES) has been added in 2018 and already shown to be useful to
accelerate many implementations of AES-based algorithms where
the order of AES evaluations is fixed a priori.
In our work, we focus on using VAES to accelerate the computa-
tion in secure multi-party computation protocols and applications.
For some MPC building blocks, such as OT extension, the AES oper-
ations are independent and known a priori and hence can be easily
parallelized, similar to the original paper on VAES by Drucker et
al. (ITNG’19). We evaluate the performance impact of using VAES
in the AES-CTR implementations used in Microsoft CrypTFlow2,
and the EMP-OT library which we accelerate by up to 24%.
The more complex case that we study for the first time in our
paper are dependent AES calls that are not fixed yet in advance
and hence cannot be parallelized manually. This is the case for
garbling schemes. To get optimal efficiency from the hardware,
enough independent calls need to be combined for each batch of
AES executions. We identify such batches using a deferred execu-
tion technique paired with early execution to reduce non-locality
issues and more static techniques using circuit depth and explicit
gate independence. We present a performance and a modularity-
focused technique to compute the AES operations efficiently while
also immediately using the results and preparing the inputs. Us-
ing these techniques, we achieve a performance improvement via
VAES of up to 244% for the ABY framework and of up to 28% for
the EMP-AGMPC framework. By implementing several garbling
schemes from the literature using VAES acceleration, we obtain a
171% better performance for ABY.
KEYWORDS
privacy preserving machine learning, secure multi-party computa-
tion, VAES.
ACM Reference Format:
Jean-Pierre Münch, Thomas Schneider, and Hossein Yalame. 2021. VASA:
Vector AES Instructions for Security Applications. In Annual Computer
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8579-4/21/12...$15.00
https://doi.org/10.1145/3485832.3485897
Security Applications Conference (ACSAC ’21), December 6–10, 2021, Virtual
Event, USA. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/
3485832.3485897
1 INTRODUCTION
The primitive of choice for encryption and similar tasks is AES. It
is used for communication encryption [71, 83], disk storage encryp-
tion [21, 34], and database encryption [72] among other applica-
tions. To improve the performance and resource utilization of this
important primitive, the AES-NI extension to the x86 instruction set
was introduced [5, 56] with common implementations computing
AES-128 with ∼ 1.3 cycles/byte on one core [2].
History of VAES. Further improving on this, Intel has developed
support for vector AES (VAES) instructions [33] and shipped it
starting with their Ice Lake microarchitecture [35]. These VAES
instructions compute a single round of AES on different blocks,
using multiple different round keys [33, 56]. The original paper
of [33] already discussed the importance of batching data to the
vector AES-NI instructions and microarchitectural properties of
these instructions. The authors demonstrated how to apply VAES to
several modes of operations of block ciphers such as AES-CTR, AES-
CBC, AES-GCM, and AES-GCM-SIV with up to 4× performance
improvements. This increased throughput of AES in standard modes
of operation can yield direct performance improvements for ap-
plications such as storage encryption, disk encryption, database
encryption, or secure channels (TLS) [21, 34, 72, 83, 86] and VAES
is already included in the popular OpenSSL library [89]. Subse-
quently, Drucker and Gueron showed how to use VAES to accelerate
Pseudo-Random Functions (PRFs) and Pseudo-Random Generators
(PRGs) [30]. Multiple NIST Post Quantum Cryptography Project
candidates use Deterministic Random Bit Generators (DRBGs) for
which the implementation of Drucker and Siri achieves up to 4×
performance improvement using VAES [29]. The contribution of
this VAES-accelerated DRBG was evaluated for the post-quantum
secure multivariate-polynomial signature scheme Rainbow [26]
in [31], and for the key encapsulation mechanism BIKE [6] in [32].
Our Motivation. What is common to all these applications of VAES
studied before is that the algorithm is fixed beforehand, and hence
the parallelization can be done manually. For maximum throughput
with VAES, the main challenge is to batch enough independent AES
calls together for the AES hardware units to be constantly busy and
not idle when processing blocks.
However, finding a good batching becomes much more challeng-
ing when the algorithm and hence sequence of AES operations is
not fixed in advance. Some AES operations can depend on the out-
put of others but some do not and many small memory-abstracted
library invocations are expensive. This batching problem and its
solutions are not unique to AES on x86-64 using VAES (which is
131ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Jean-Pierre Münch, Thomas Schneider, and Hossein Yalame
Table 1: Summary of our performance improvements. New Batched AES-NI indicates whether the implementation received
an additional batching AES-NI implementation. VAES indicates whether the performance improvement includes VAES.
our focus). It can be generalized to all non-trivial implementations
of cryptographic primitives which includes pipelined AES imple-
mentations on ARM [7], bitsliced AES implementations [17, 63]
as well as more unusual techniques like instance-vectorized hash
functions. A natural area where such complex dependencies oc-
cur is Secure Multi-party Computation (MPC), especially garbled
circuits [10, 40, 67, 85, 95, 97], which is why we use them for as-
sessing the performance impact for VAES. More concretely, with
garbled circuits, typically binary circuits using primarily AND and
XOR gates are evaluated with XOR gates only requiring XOR oper-
ations [67], whereas AND gates do require AES operations to be
and sending ciphertexts. These garbled circuits can then be used
for high performance secure two-party computation, interactive
zero-knowledge proofs of arbitrary statements [44, 60, 97], and
other applications.
MPC allows to securely compute a public function on private
input data provided by multiple parties and hence is an interactive
way for computing under encryption. Since several years, a multi-
tude of companies, including Alibaba, Bosch, NTT, and Unbound
among many others in the MPC Alliance [4], are working on MPC
technology. We study the ABY framework [25] for passively secure
two-party computation and the EMP-AGMPC [90, 92] framework
for actively secure multi-party computation. As we are manually
changing the implementation of these schemes without changing
the protocols, we substantially increase the deployability of these
frameworks and dependent works as well as providing guidance to
how similar effects can be achieved for similar frameworks.
Privacy-preserving machine-learning (PPML) is a popular ap-
plication of MPC. Here, general machine-learning techniques are
run on private data while also protecting the model parameters.
The private output is the inference or training result [39]. PPML
has become a hot topic in recent years and gained the attention of
major software, service and hardware vendors, e.g., Facebook [66],
Google [16], Intel [15], and Microsoft [82], all of whom are working
on increasing its practicality. Applications of PPML include private
healthcare-based inference, e.g., to predict illnesses [22, 69, 84], pri-
vate healthcare model training to acquire models without having
to reveal patient data [1], and private clustering to partition data
according with common features [73]. In particular, in this work,
we discuss private ML inference in the state-of-the-art framework
Microsoft CrypTFlow2 [82] where one party holds a pre-trained
model and the other a data item to be classified and then the proto-
col allows classification using the model without the two parties
revealing their private inputs. We improve CrypTFlow2 [82] using
VAES. As our focus lies on manual implementation improvements,
we substantially increase such PPML applications’ deployability
without sacrificing compatibility or security.
Our Contributions. Our main contributions are as follows:
• We expand the focus of VAES from microarchitectural issues
where the order of AES operations is fixed a priori, to proto-
col and implementation design where the sequence of AES
operations is not known in advance. For this, we introduce
automatic batch identification and computation techniques
for efficient use of AES in complex security applications.
• We report the first performance measurements for VAES
in the area of Multi-Party Computation (MPC) and show
performance improvements for the MPC frameworks ABY,
EMP-OT and EMP-AGMPC, as well as the PPML framework
CrypTFlow2. Our improvements are summarized in Table 1.
• We provide our implementations for re-use by others and
as guidance for future implementation efforts at https://
encrypto.de/code/VASA.
Outline. The rest of this paper is organized as follows: We start
with providing the necessary background on the investigated types