# VASA: Vector AES Instructions for Security Applications

## Authors
- Jean-Pierre Münch
- Thomas Schneider
- Hossein Yalame

### Affiliations
- TU Darmstadt, Darmstadt, Germany
- Contact: schneider@encrypto.cs.tu-darmstadt.de

## Abstract
AES is the most widely used block cipher due to its standardization and well-studied security. Hardware acceleration for AES is available on various platforms, including the Intel AES New Instructions (AES-NI). In 2018, support for Vectorized AES (VAES) was added, which has proven useful for accelerating many AES-based algorithms with fixed evaluation orders.

In this work, we explore the use of VAES to enhance secure multi-party computation (MPC) protocols and applications. For some MPC building blocks, such as OT extension, the AES operations are independent and known a priori, making them easily parallelizable. We evaluate the performance impact of using VAES in AES-CTR implementations, such as those used in Microsoft CrypTFlow2 and the EMP-OT library, achieving up to a 24% speedup.

We also study the more complex case of dependent AES calls that are not fixed in advance and thus cannot be manually parallelized. This is particularly relevant for garbling schemes. To achieve optimal efficiency, we need to combine enough independent calls for each batch of AES executions. We identify these batches using deferred execution techniques paired with early execution to reduce non-locality issues and more static techniques based on circuit depth and explicit gate independence. Our techniques improve the performance of the ABY framework by up to 244% and the EMP-AGMPC framework by up to 28%. By implementing several garbling schemes with VAES acceleration, we achieve a 171% performance improvement for ABY.

## Keywords
- Privacy-preserving machine learning
- Secure multi-party computation
- VAES

## ACM Reference Format
Jean-Pierre Münch, Thomas Schneider, and Hossein Yalame. 2021. VASA: Vector AES Instructions for Security Applications. In Annual Computer Security Applications Conference (ACSAC '21), December 6–10, 2021, Virtual Event, USA. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3485832.3485897

## 1 Introduction
AES is the preferred primitive for encryption and similar tasks, widely used in communication, disk storage, and database encryption. To enhance the performance and resource utilization of AES, the AES-NI extension to the x86 instruction set was introduced, with common implementations computing AES-128 at approximately 1.3 cycles/byte on one core.

### History of VAES
Intel further improved AES performance by introducing vector AES (VAES) instructions, first shipped with the Ice Lake microarchitecture. These instructions compute a single round of AES on different blocks using multiple round keys. The original paper [33] discussed the importance of batching data for VAES and demonstrated up to 4× performance improvements in various modes of operation, such as AES-CTR, AES-CBC, AES-GCM, and AES-GCM-SIV. This increased throughput can directly benefit applications like storage, disk, and database encryption, as well as secure channels (TLS). Subsequent work by Drucker and Gueron showed how to use VAES to accelerate Pseudo-Random Functions (PRFs) and Pseudo-Random Generators (PRGs) [30], achieving up to 4× performance improvements for Deterministic Random Bit Generators (DRBGs) used in post-quantum cryptography candidates [29].

### Our Motivation
Previous applications of VAES have focused on algorithms with fixed sequences of AES operations, allowing manual parallelization. However, when the sequence is not fixed, finding an efficient batching strategy becomes challenging. Some AES operations may depend on others, while others do not, and small memory-abstracted library invocations can be expensive. This batching problem is not unique to VAES and can be generalized to other cryptographic primitives, including pipelined AES implementations on ARM, bitsliced AES, and instance-vectorized hash functions.

A natural area where such complex dependencies occur is in Secure Multi-party Computation (MPC), especially in garbled circuits. Garbled circuits typically evaluate binary circuits using AND and XOR gates, with AND gates requiring AES operations for generating and sending ciphertexts. These circuits can be used for high-performance secure two-party computation, interactive zero-knowledge proofs, and other applications.

MPC allows secure computation of public functions on private input data from multiple parties. Many companies, including Alibaba, Bosch, NTT, and Unbound, are working on MPC technology. We study the ABY framework for passively secure two-party computation and the EMP-AGMPC framework for actively secure multi-party computation. By manually changing the implementation without altering the protocols, we increase the deployability of these frameworks and provide guidance for similar frameworks.

Privacy-preserving machine learning (PPML) is a popular application of MPC, where general machine-learning techniques are run on private data while protecting model parameters. PPML has gained attention from major vendors like Facebook, Google, Intel, and Microsoft. Applications include private healthcare inference, private healthcare model training, and private clustering. In this work, we discuss PPML in the state-of-the-art framework Microsoft CrypTFlow2, where one party holds a pre-trained model and the other a data item to be classified. We improve CrypTFlow2 using VAES, increasing its deployability without sacrificing compatibility or security.

### Our Contributions
- **Expanded Focus**: We extend the focus of VAES from microarchitectural issues to protocol and implementation design, introducing automatic batch identification and computation techniques.
- **Performance Improvements**: We report the first performance measurements for VAES in MPC and show improvements for the ABY, EMP-OT, EMP-AGMPC, and CrypTFlow2 frameworks. Our improvements are summarized in Table 1.
- **Open Source**: We provide our implementations for re-use and future guidance at https://encrypto.de/code/VASA.

### Outline
The rest of this paper is organized as follows: We start with the necessary background on the investigated types of AES and MPC, followed by a detailed description of our techniques and experimental results.