this atomic patch activation very efﬁciently thereby making it
suitable for hard real-time constraints.
Our approach enhances the instrumentation-based hot-
patching approach without requiring binary instrumentation
and additional software layers. The key idea is to replace
instructions during run-time using the on-board debugging
unit, which is readily available on commercial off-the-shelf
processors. Using the hardware breakpoint capability of the
on-board debugging unit, trampolines can be inserted on-the-
ﬂy. The amount of available trampolines is dependent on the
board’s number of hardware breakpoints.
Modern microcontrollers feature a debugging unit allowing
developers to insert these so-called breakpoints. A breakpoint
allows developers to stop and restart the execution of the
CPU at arbitrary points. This is used to inspect the CPU
and peripherals,
investigating software issues. However, a
debugging unit can also implement additional functionality
such as the capability to exchange a single instruction. For
instance, this feature is implemented in the FPB debugging
unit of ARM Cortex-M3/M4 processors [23]. This unit can
temporarily stop the CPU, drop the fetched instruction, and
fetch a new instruction. Hence, we can leverage this behavior
to redirect the control ﬂow to newly deployed hotpatches.
Since the redirection to patched code is performed hardware-
assisted, the overhead is negligible and constant. A detailed
analysis of the performance of the FPB unit is performed in
Section VII-B.
B. Design
As alluded to earlier, we have designed a hotpatching
solution based on existing built-in hardware features used for
debugging. A high-level overview of our HERA architecture
5
meta-information like patch insertion point and trampoline
to respective data structures (FPB conﬁguration). Once patch
processing is ﬁnished, the updater task notiﬁes the hardware-
unit with an atomic instruction to activate the patch. After
this hardware switchover, the FPB starts to insert trampolines
through its hardware breakpoint functionality. Figure 2b shows
how the trampoline insertion and patch execution is handled
from the scheduler point of view. The RTOS is properly
scheduling all its tasks to meet the deadlines. The patch is
inserted on-the-ﬂy by exchanging a single instruction of the
task with a trampoline. Hence, the patch code itself is part
of the normal scheduling process, just handled like any other
code fragment of the same task. From a high level perspective,
this approach resembles an in-place patching based on a
trampoline [40]. The crucial difference is that the trampoline
insertion is efﬁciently performed through commodity hardware
and without interrupting the ordinary execution of the currently
running tasks.
(1) Patch Preparation. This step prepares for an atomic
switchover or atomic patch enable. All actions taken in the
preparation step are uncritical and do not inﬂuence the appli-
cation as they take place in a low priority or IDLE task. Recall,
as previously described in Section II and shown in Figure 1 an
RTOS system commonly uses priority-based scheduling. Given
enough resources, this strategy will meet all deadlines of the
scheduled tasks. The IDLE state is only entered when there are
no concurrent tasks scheduled. For some architectures a direct
control-ﬂow redirection to RAM is not possible. Therefore, we
use a preconﬁgured trampoline in ROM and a so-called dis-
patcher, which chooses the appropriate patch by checking the
control-ﬂow information stored on the stack. The preparation
step includes the following steps: (1) Receive the patch from
an external source, (2) verify the patch by checking its integrity
and origin, (3) parse the meta-information from the patch
format, (4) store the patch in selected memory area1 (RAM),
(5) add a new entry to the dispatcher2, (6) conﬁgure the
patching unit with insertion point and corresponding branching
instruction (trampoline conﬁguration), (7) trigger the atomic
switchover.
(2) Switchover. After
the atomic
switchover and the trampoline insertion process have to be
performed. The patch is enabled by setting a hardware break-
point [23]. This breakpoint,
typically used for debugging,
can be activated by a single assembly instruction, writing a
designated hardware register. A single assembly instruction
on a CPU is atomic by deﬁnition. The breakpoint uses the
preconﬁgured data (insertion point and branching instruction)
to perform the insertion of the trampoline during run-time. As
shown in Figure 3, the debugging unit continuously monitors
all instructions the CPU is executing. Each conﬁgured break-
point has a comparator that triggers an event in case the CPU
reaches a preconﬁgured memory location, identiﬁed by a mem-
ory address. This memory location is the insertion point for
the trampoline. A breakpoint event usually shifts control to an
external debugger. For the sake of hotpatching, we replace the
breakpoint with a trampoline, i.e., branching instruction, thus
inserting the patch. This process runs continuously without
the patch preparation,
1A special memory area is reserved as designated patch data storage.
2Only required on architectures with no direct control-ﬂow redirection from
ROM to RAM.
(a) Component View: The low-priority updater task modiﬁes hardware
to enable a higher priority task patch in real-time through atomic
jump.
(b) Sequence View: The patch is added with a hardware supported
trampoline and properly scheduled through the RTOS.
Figure 2: High-level architecture and functionality of the
HERA framework.
and its functionality is depicted in Figure 2. Figure 2a shows
the combination of hardware patching unit, real-time operating
system (RTOS), and the HERA framework. An exemplary up-
date and patching process is outlined in the sequence diagram
in Figure 2b.
As shown in Figure 2, there are two main steps to patch
the system: (1) patch preparation and (2) switchover. The
patch preparation covers the updater mechanism and patch
processing steps such that the patch can be reached without any
issue by a trampoline. The switchover covers the notiﬁcation
of the hardware patching unit (atomic switchover) and the
hardware-assisted trampoline insertion during run-time.
Our system is based on a RTOS which ensures that
all deadlines are met through priority-based scheduling. The
RTOS is running different tasks with different priority lev-
els. Independent of the priority, a task may suffer from a
vulnerability that needs to be quickly mitigated through a
hotpatch. This hotpatch needs to be received, veriﬁed, and
properly instantiated onto the embedded system. The updater
task is executed in background and interrupted by higher-
priority tasks to avoid any disturbance on time-critical tasks.
Hence, we do schedule the updater task with either low priority
or within the idle-time. The updater task is responsible for the
patch preparation (1) as well as the switchover (2) step. The
updater distinguishes between patch code, i.e., mitigation code
precompiled for the target architecture and meta-information
like patch size or patch insertion point. Meta-information
includes all required information to apply the patch code. Both
patch code and meta-information are packaged within a patch
format. In particular, the updater copies the patch code to a
patch slot in RAM and prepares the switchover by adding
6
HardwareRTOSHigh priorityUpdater taskPatching unitLow priorityPatchTask 1Task ...Task NTask 2Patch appliedTriggers atomic switchoverSoftwareTrampoline codePatch insertionHERAHigh-priority taskLow-priority taskUpdater task (IDLE)TimeAtomic jumpto patched codecovers the process ﬂow of the trampoline (patch) insertion
mechanism, which consists of: (1) continuous monitoring of
the currently executed instruction, (2) instruction replacement
on breakpoint hit, (3) control-ﬂow redirection to a dispatcher,
(4) dispatcher redirection to the appropriate patch, (5) patch
execution, and (6) return and continued execution.
Figure 4 shows the process of on-the-ﬂy breakpoint in-
sertion as well as the interdependence between RAM and
ROM memory. This interdependency is necessary as embedded
system ﬁrmware is placed in read-only memory, which is only
writable during programming. Some microcontrollers allow
for page-rewrites during run-time. However, this would likely
affect a signiﬁcant portion, usually a page, of the stored
ﬁrmware and thus the running RTOS. Furthermore, the process
of page writing and erasing is very energy consuming [47]. As
a consequence, direct ﬁrmware manipulation is not feasible.
Therefore, we allocate our hotpatch to RAM which allows us to
perform byte-wise writing in contrast to block-writing on page
granularity to ROM. The jump_section (ROM) in Figure 4 is
used to redirect the code execution to the stored patch in RAM
via a small patch dispatcher. The jump_section and dispatcher
are needed as our chosen proof-of-concept platform does not
support direct branching from ROM to RAM. The RAM is out
of range for a branch instruction.
Limitations. Our main scope are security patches for mem-
ory corruption vulnerabilities which typically require adding
further checks replacing code parts. Furthermore, HERA can
also be used to add further functionality, e.g., by adding
new code parts. In case of complex updates, which require
change in state or data structures, the HERA framework needs
to be extended to allow state transfer, i.e., the migration of
information from old to new data structures, thus ensuring a
consistent program state. This is not necessary for typical se-
curity patches, as these are typically small and featureless [51].
Hotpatches should be as simple as possible, as they have to
work during run-time. Different devices have varying memory
content and state, hence changing values of variables and data
structures is a delicate task.
HERA hotpatches are not reboot-safe as they are not
stored in persistent memory. Hence, if a device is rebooted
unexpectedly, the hotpatch is removed. This is due to the fact
that writing persistent ﬂash memory is often not feasible (see
Section V-B). In order to cope with reboots, the updater has to
be modiﬁed to automatically check for hotpatches and apply
them upon every start. If indeed non-volatile writable memory
is available, HERA can easily be extended to support persistent
hotpatches.
The number of different patches that can be applied is
limited by the number of breakpoints that the processor can
keep. It
is possible to ﬁx multiple issues using a single
breakpoint, as the breakpoint is just the entry point to the
patch. So it is possible to replace a larger code segment,
tackling several vulnerabilities using just a single breakpoint.
Furthermore, the HERA framework focuses on hotpatching,
i.e., ﬁxing security issues until the next regular possibility for
full system patching. After applying the full system patch, all
breakpoints are free again for further hotpatches.
Figure 3: Hardware Architecture Overview: Hardware sup-
ported run-time trampoline insertion through debugging unit
(FPB).
Figure 4: Patch Process Flow: Run-time trampoline insertion
through debugging unit (FPB).
impacting the behavior of the processor. As breakpoints can
be conﬁgured independently from each other, new trampolines
can be added and deleted without disabling previous patches.
This is important in order to support hotpatching different
vulnerabilities that might affect a system over time.
Since different processors vary in programming models
for their built-in debugging unit, we will focus on the ARM
FPB unit as our proof-of-concept
implementation is using
it. Figure 3 shows the hardware perspective of our patching
solution. The FPB unit has a ﬁxed number of breakpoints
(comparators) that continuously monitor the currently executed
instruction. The debugging unit is attached to the CPU, which
enables it to interrupt the processor’s execution and replace the
fetched instruction with another instruction, i.e., the trampoline
instruction. Each breakpoint references an instruction, it will
load instead of the aborted instruction on a breakpoint hit.
These instructions are stored in a data structure called patch
table allocated in the microcontroller’s RAM region. Figure 4
7
InstructionInstructionInstructionInstructionMemoryCPUExecutionBreakpointBreakpointFPB unit with hardware breakpointsPatch TableData structure withreplacement instructionsBL JUMP_SECTIONBL JUMP_SECTIONCPU interruptand instructionreplacementAddressAddressAddressAddressCurrent instructionReplace instructionwith patch tableentryInstructionaddress matchespatch Table?noExecute and continueto next intstructionpush {r7, lr}LDR pc, 0x20(jump to dispatcher)identify patchjump to patchExecute patchROMRAMRAMreturn(jump back)RAMInstructionInstructionInstructionMemoryCurrentinstructionYes123456VI.
IMPLEMENTATION
Based on the assumptions and design decisions made
in Section V, we implemented a prototype of HERA as a
library which uses the FPB unit of the ARM Cortex-M4
platform. The NUCLEO-F446RE development board from
STMicroelectronics serves as a Cortex-M4 platform reference.
With an ARM Cortex-M4 CPU and only 512 kB of ﬂash
memory and 128 kB of SRAM [52], it represents a typical
Cortex-M based embedded system. Any embedded system
such as the used NUCLEO-F446RE is constrained by different
properties depending on the chip or the application context. A
categorization of constraints is given by Bormann, Ersue, and
Keranen [53]. In Section VI-A, we discuss the conﬁguration
of a debugging unit for run-time hotpatching and provide a
proof-of-concept implementation. In Section VI-B, we provide
guidelines how hotpatches can be created within the develop-
ment cycle. Section VI-D discusses necessary preconditions
for successful patching.
A. HERA Library
The core of our hotpatching approach is the use of de-
bugging units integrated into modern microcontrollers, cf.
Section V-B. These units often provide a code remapping
mechanism in addition to their breakpoint functionality (Sec-
tion V-A). The code remapping feature allows to drop the
execution of an instruction at a previously selected memory
location (memory address) and load another instruction from
memory. Hence, control-ﬂow can be manipulated by exchang-
ing an instruction with a branch. With the aid of the code
remapping mechanism, trampolines can be inserted during run-
time. The conﬁguration of code remapping generally requires
the same information as a breakpoint: (1) insertion point,
(2) trampoline, and (3) hardware breakpoint. The insertion
point speciﬁes the memory address, where the breakpoint
should halt the CPU execution and perform the trampoline
insertion. The trampoline is a branch instruction, that redi-
rects control-ﬂow from the insertion point to the patch. The
hardware breakpoint of the debugging unit is used for run-
time trampoline insertion. The debugging unit has a limited
amount of hardware breakpoints, which represent a patch slot
in HERA.
Since debugging units can differ in their programming
model, we opted to choose the well-known ARM embedded
platform [18], [19] for our prototype implementation; speciﬁ-
cally, the ARM Cortex-M4 and the NUCLEO-F446RE board.
The integrated debugging unit
is called FPB (Flash Patch
and Breakpoint) [23] and includes a code remapping feature.
Note that HERA can be implemented on any architecture that
provides a debugging unit with code remapping capability;
only the hardware-related conﬁguration needs to be adjusted
to the target architecture. For industrial-grade usage the patch
and dispatcher loading process need to be extended. To achieve
code remapping, the FPB unit requires the same input as any
other debugging unit: insertion point, trampoline, and hardware
breakpoint. This input is stored together with the conﬁguration