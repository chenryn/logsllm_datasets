λ1 (cid:3) λ2 the attacker will need to send many more chaﬀ packets on the faster
stream, so λ1 = λ2 will be the best choice for the attacker.
We model the Poisson processes as binomials. We choose to approximate
the two independent Poisson processes of rate λ as two independent binomial
processes, for cleaner analysis. To generate these processes, we assume that the
attacker ﬂips two coins, each with λ bias (of getting a head), at each time step3.
He has to send a packet (either a real packet or chaﬀ) on a stream when its
corresponding coin turns up heads, and should send nothing when the coin turn
up as tails. That way, he ensures that the two streams model two independent
binomial processes exactly. Since the attacker generates the independent bino-
mial processes, he could ﬂip coins ∆ or more time steps ahead, and then decide
whether a non-chaﬀ packet can be sent across for a particular coin ﬂip that obeys
all constraints, or if it has to be chaﬀ.
We now show how the attacker could simulate two independently-generated
binomial processes with minimum chaﬀ. First, the attacker generates two se-
quences of independent coin ﬂips. The following algorithm, Bounded-Greedy-
Match, then produces a strategy that minimizes chaﬀ for the attacker, for any
pair of sequences of coin ﬂips. Given two sequences of coin ﬂips, the attacker
matches a head in ﬁrst stream at time t to the ﬁrst unmatched head in the
second stream in the time interval [t, t + ∆]. All matched heads become real
(stepping-stone) packets, and all the remaining heads become chaﬀ. An example
of the operation of the algorithm is shown in Fig. 5.2.
The following theorem shows that Bounded-Greedy-Match will allow the
attacker to produce the minimum amount of chaﬀ needed, when the attacker
simulates two binomial processes that were generated independently.
3 We could, equivalently, assume that the attacker ﬂips a coin with λ
a time step. As k → ∞, the binomial approaches a Poisson process of rate λ.
k bias k times in
274
Avrim Blum, Dawn Song, and Shobha Venkataraman
H
T
H
H
TT
T
H
H
TT
HH
H
TT
H
TT
TT
TT
H
HH
Normal Packets
Normal Packets
Chaff
Chaff
Fig. 4. An illustration of the matching produced by the algorithm Bounded-Greedy-
Match on two given sequences, with ∆ = 2
Theorem 8. Given any pair of sequences of coin ﬂips generated by two indepen-
dent binomial processes, Bounded-Greedy-Match minimizes the chaﬀ needed
for a pair of stepping-stone streams to mimic the given pair of sequences.
Proof. Suppose not, i.e., suppose there exists a sequence pair of coin ﬂips σ
for which Bounded-Greedy-Match is not optimal. Let S be the strategy
(cid:5) be a better matching
produced by Bounded-Greedy-Match for σ. Let S
(cid:5)). Then there exists a head in σ such that
strategy, so that Chaﬀ (S) > Chaﬀ (S
(cid:5), but not through S.
(cid:5) through S
h is matched with a head h
(cid:5) on the second
(cid:5) must be
(cid:5) should be in [t, t + ∆], and h
stream. For S to be a valid match, h
(cid:5) is matched to
unmatched under S
another (earlier than t) head on the ﬁrst stream under S (otherwise Bounded-
(cid:5) on S).
Greedy-Match would have generated a match between h and h
Assume, wlog, that h is on the ﬁrst stream at time t, and h
(cid:5) to any other head. Let us suppose that h
We track chain of the matching heads in the sequence backwards (starting
from h) in this way: we take the currently matched head in one strategy, and
look for the head that matches it in the other strategy. When this chain of
matchings stops, we must have an unmatched head, and one of following two
cases (the manner in which we trace the chain of matching heads, along with
the assumption that the unmatched head h is on the ﬁrst stream, implies that
we ﬁnd only matched heads on the second stream of S, and the ﬁrst stream of
(cid:5)):
S
– Case 1 : The unmatched head is in stream 1 of S
(cid:5). In this case, an unmatched
(cid:5), and therefore, this
head in S correlates with an unmatched head in S
particular case is not our counterexample, since each unmatched head under
S will correspond to an unmatched head under S
(cid:5).
– Case 2 : The unmatched head is in stream 2 of S. In this case, we have to
(cid:5); we have
have reached this head (call it g0) from its matching head g1 in S
to reach g1 from matched head g2 in S. Since we are tracing backwards in
time, time of g2 is greater than the time of g0. However, since g0 can be
matched to g1, we have a contradiction, since we are not matching the head
g1 to the earliest available head g0, as per Bounded-Greedy-Match.
The analysis when h is on the second stream of S is similar.
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
275
Thus, with the algorithm Bounded-Greedy-Match, every unmatched head
(cid:5), therefore, Chaﬀ (S) ≤
(cid:4)(cid:5)
in S must have a corresponding unmatched head in S
Chaﬀ (S
(cid:5)), creating a contradiction.
Stream 1
g1g1
h4h4
h2h2
hh
Stream 1
g1g1
h4h4
h2h2
hh
Stream 2
g2g2
h5h5
h3h3
h’h’
Stream 2
g2g2
h5h5
h3h3
h’h’
Strategy S: Case 1
(a)
Strategy S’: Case 1
(b)
Stream 1
g1g1
h4h4
h2h2
hh
Stream 1
g1g1
h4h4
h2h2
hh
Stream 2
g0g0
g2g2
h5h5
h3h3
h’h’
Stream 2
g0g0
g2g2
h5h5
h3h3
h’h’
Strategy S: Case 2
(c)
Strategy S’: Case 2
(d)
Fig. 5. The proof of Theorem 8. All the ﬁgures give an illustration of how the heads
are traced back. (a) and (b) show case 1 of the proof, and (c) and (d) show case 2 of
(cid:1)
. h is matched to h
the proof. By assumption, h is unmatched in S and matched in S
in the strategy S
, call
it h3; use h3 to ﬁnd h4 in S, h4 to ﬁnd h5 in S
, and so on. We continue tracing the
matches of heads backwards in this manner until we stop, reaching either case 1 or
, and in S, g0 is unmatched in S, but
case 2. In case 1, g1 is unmatched in strategy S
g1 is not matched greedily.
is matched to h2; then, we look at h2’s match in S
(cid:1)
(cid:1)
(cid:1)
; in S, h
(cid:1)
(cid:1)
(cid:1)
Now we examine upper bounds on the chaﬀ that will need to be sent by
the attacker, in terms of the total packets sent. We give an upper bound on the
amount of chaﬀ that the attacker must send in Bounded-Greedy-Match. We
note that our analysis shows how the attacker could do this if he mimics two
independent Poisson processes, but it may not be necessary for him to do this
in order to evade detection.
Theorem 9. If the attacker ensures that his stepping-stone streams mimic two
truly independent Poisson processes, then, under Bounded-Greedy-Match,
+ 0.05 fraction
the attacker will not need to send more than
(cid:5)
√
2λ∆−2
1
2λ(1−2λ)∆
of packets as chaﬀ in expectation, when the Poisson rates of the streams are
equal with rate λ.
Proof. We divide the total time (coin ﬂips) into intervals that are ∆ long, and
examine the expected diﬀerence in one of these intervals. Notice that for the
276
Avrim Blum, Dawn Song, and Shobha Venkataraman
packets that are within a speciﬁc ∆ interval, matches are not dependent on the
times when they were generated. (i.e., any pair of packets in this interval is no
further than ∆ apart in time, and therefore, could be made a valid match). Many
more packets than this can be matched, across the interval boundaries, but this
gives us an easy upper bound.
Consider the packets in the union of the two streams in this interval. Each
packet in this union can also be considered as though it were generated from
a (diﬀerent) unbiased coin, with heads as stream 1 and tails as stream 2; once
again, we have a uniform random walk. Since every head can be matched to any
available tail, the amount of chaﬀ is the expected (absolute) diﬀerence in the
number of heads and tails. Call this diﬀerence Z, and the packets on the union
of the streams X. X is then a binomial with parameters 2λ, and ∆. Therefore,
E[X] = 2λ∆. The expectation of Z
X is then the following:
E[ Z
X
] =
E[Z|X = x]P (X = x)
(cid:6)
(cid:6)
x
=
1
x
1√
x
1√
≤ 0.05 +
2λ∆ − 2σ
P (X = x)
x
(cid:5)
2λ(1 − 2λ)∆.
, where σ =
(cid:5)
Since every interval of size ∆ is identical, the attacker needs to send no more
(cid:4)(cid:5)
√
2λ∆−2
+ 0.05 fraction as chaﬀ in expectation.
1
2λ(1−2λ)∆
than
6 Conclusion
In this paper, we have proposed and analyzed algorithms for stepping-stone de-
tection using techniques from Computational Learning Theory and the analysis
of random walks. Our results are the ﬁrst to achieve provable (polynomial) up-
per bounds on the number of packets needed to conﬁdently detect and identify
encrypted stepping-stone streams with proven guarantees on the probability of
falsely accusing non-attacking pairs. Moreover, our methods and analysis rely
on very mild assumptions, especially in comparison with previous work. We also
examine the consequences when the attacker inserts chaﬀ into the stepping-stone
traﬃc, and give bounds on the amount of chaﬀ that an attacker would have to
send to evade detection. Our results are based on a new approach which can
detect correlation of streams at a ﬁne-grained level. Our approach may apply to
more generalized traﬃc analysis domains, such as anonymous communication.
Acknowledgements
This work was supported in part by NSF grants CCR-0105488 and NSF-ITR
CCR-0122581.
Detection of Interactive Stepping Stones: Algorithms and Conﬁdence Bounds
277
References
1. Staniford-Chen, S., Heberlein, L.T.: Holding intruders accountable on the internet.
In: Proceedings of the 1995 IEEE Symposium on Security and Privacy, Oakland,
CA (1995) 39–49
2. Zhang, Y., Paxson, V.: Detecting stepping stones.
In: Proceedings of the 9th
USENIX Security Symposium. (August 2000) 171–184
3. Yoda, K., Etoh, H.: Finding a connection chain for tracing intruders. In: F. Gup-
pens, Y. Deswarte, D. Gollmann and M. Waidner, editors, 6th European Sympo-
sium on Research in Computer Security – ESORICS 2000 LNCS-1895, Toulouse,
France (October 2000)
4. Donoho, D., Flesia, A.G., Shankar, U., Paxson, V., Coit, J., Staniford, S.: Mul-
tiscale stepping-stone detection: Detecting pairs of jittered interactive streams by
exploiting maximum tolerable delay. In: Fifth International Symposium on Recent
Advances in Intrusion Detection, Lecture Notes in Computer Science 2516, New
York, Springer (2002)
5. Wang, X., Reeves, D.: Robust correlation of encrypted attack traﬃc through
In: Proceedings of the
stepping stones by manipulation of inter-packet delays.
2003 ACM Conference on Computer and Communications Security (CCS 2003),
ACM Press (2003) 20–29
6. Kearns, M., Vazirani, U.: An Introduction to Computational Learning Theory.
MIT Press (1994)
7. Valiant, L.: A theory of the learnable. Communications of the ACM 27 (1984)
1134–1142
8. Blumer, A., Ehrenfeucht, A., Haussler, D., Warmuth, M.K.: Occam’s razor. Infor-
mation Processing Letters 24 (1987) 377–380
9. Stoll, C.: The Cuckoo’s Egg: Tracking a Spy through the Maze of Computer
Espionage. Pocket Books (2000)
10. Wang, X., Reeves, D., Wu, S., Yuill, J.: Sleepy watermark tracing: An active
network-based intrusion response framework. In: Proceedings of the 16th Interna-
tional Information Security Conference (IFIP/Sec’01). (2001) 369–384
11. Wang, X., Reeves, D., Wu, S.:
Inter-packet delay-based correlation for trac-
ing encrypted connections through stepping stones. In D.Gollmann, G.Karjoth,
M.Waidner, eds.: 7th European Symposium on Research in Computer Security
(ESORICS 2002), Lecture Notes in Computer Science 2502, Springer (2002) 244–
263
12. Wang, X.: The loop fallacy and serialization in tracing intrusion connections
through stepping stones. In: Proceedings of the 2004 ACM Symposium on Ap-
plied Computing, Nicosia, Cyprus, ACM Press (2004) 404–411
13. Paxson, V., Floyd, S.: Wide-area traﬃc: The failure of poisson modeling.
IEEE/ACM Transactions on Networking 3 (1995) 226–244