### Attacker Strategy and Chaﬀ Packet Optimization

When \(\lambda_1\) and \(\lambda_2\) are the rates of two independent Poisson processes, the attacker must send more chaﬀ packets on the faster stream. Therefore, setting \(\lambda_1 = \lambda_2\) is the optimal choice for the attacker.

#### Modeling Poisson Processes as Binomials

To simplify the analysis, we model the Poisson processes as binomial processes. Specifically, we approximate the two independent Poisson processes with rate \(\lambda\) as two independent binomial processes. The attacker simulates these processes by flipping two coins, each with a probability \(\lambda\) of landing heads, at each time step. If a coin lands heads, the attacker sends a packet (either a real packet or chaﬀ) on the corresponding stream; if it lands tails, no packet is sent. This ensures that the two streams follow two independent binomial processes.

The attacker can flip the coins \(\Delta\) or more time steps ahead and decide whether to send a non-chaﬀ packet or a chaﬀ packet based on the constraints. This allows the attacker to pre-plan and minimize the number of chaﬀ packets.

#### Bounded-Greedy-Match Algorithm

We now present the Bounded-Greedy-Match algorithm, which helps the attacker simulate two independently-generated binomial processes with the minimum amount of chaﬀ. The algorithm works as follows:

1. **Generate Two Sequences of Coin Flips**: The attacker generates two sequences of independent coin flips.
2. **Match Heads in Time Intervals**: For each head in the first stream at time \(t\), the algorithm matches it to the first unmatched head in the second stream within the time interval \([t, t + \Delta]\). All matched heads become real (stepping-stone) packets, and all remaining heads become chaﬀ.

An example of the operation of the Bounded-Greedy-Match algorithm is shown in Figure 5.2.

### Theorem: Minimum Chaﬀ Generation

**Theorem 8**: Given any pair of sequences of coin flips generated by two independent binomial processes, the Bounded-Greedy-Match algorithm minimizes the amount of chaﬀ needed for a pair of stepping-stone streams to mimic the given pair of sequences.

**Proof**:
Assume, for contradiction, that there exists a sequence pair \(\sigma\) for which Bounded-Greedy-Match is not optimal. Let \(S\) be the strategy produced by Bounded-Greedy-Match for \(\sigma\), and let \(S'\) be a better matching strategy such that \(\text{Chaﬀ}(S) > \text{Chaﬀ}(S')\).

Consider a head \(h\) in \(\sigma\) that is matched to a head \(h'\) in the second stream under \(S'\), but not under \(S\). For \(S\) to be a valid match, \(h'\) must be unmatched under \(S\), and \(h\) must be matched to an earlier head in the first stream under \(S\). Tracing back the chain of matches, we encounter two cases:

- **Case 1**: The unmatched head is in stream 1 of \(S'\). In this case, each unmatched head under \(S\) corresponds to an unmatched head under \(S'\), which contradicts our assumption.
- **Case 2**: The unmatched head is in stream 2 of \(S\). Tracing back, we find a head \(g_0\) in stream 2 of \(S\) that is unmatched. This head \(g_0\) can be matched to an earlier head \(g_1\) in stream 1 of \(S\), leading to a contradiction because Bounded-Greedy-Match would have matched \(g_1\) to the earliest available head \(g_0\).

Thus, every unmatched head in \(S\) must have a corresponding unmatched head in \(S'\), implying \(\text{Chaﬀ}(S) \leq \text{Chaﬀ}(S')\), which is a contradiction. Therefore, Bounded-Greedy-Match is optimal.

### Upper Bound on Chaﬀ

**Theorem 9**: If the attacker ensures that his stepping-stone streams mimic two truly independent Poisson processes, then, under Bounded-Greedy-Match, the attacker will not need to send more than \(\frac{\sqrt{2\lambda\Delta - 2}}{2\lambda(1 - 2\lambda)\Delta} + 0.05\) fraction of packets as chaﬀ in expectation, when the Poisson rates of the streams are equal with rate \(\lambda\).

**Proof**:
We divide the total time into intervals of length \(\Delta\) and examine the expected difference in one of these intervals. For packets within a specific \(\Delta\) interval, matches are not dependent on the times when they were generated. Each packet in the union of the two streams can be considered as though it were generated from an unbiased coin, with heads as stream 1 and tails as stream 2. The amount of chaﬀ is the expected absolute difference in the number of heads and tails, denoted as \(Z\). The expected value of \(Z\) is given by:

\[
E\left[\frac{Z}{X}\right] = \sum_{x} E[Z|X = x] P(X = x) \leq 0.05 + \frac{\sqrt{2\lambda\Delta - 2}}{2\lambda(1 - 2\lambda)\Delta}
\]

Since every interval of size \(\Delta\) is identical, the attacker needs to send no more than \(\frac{\sqrt{2\lambda\Delta - 2}}{2\lambda(1 - 2\lambda)\Delta} + 0.05\) fraction of packets as chaﬀ in expectation.

### Conclusion

In this paper, we propose and analyze algorithms for stepping-stone detection using techniques from Computational Learning Theory and the analysis of random walks. Our results provide provable upper bounds on the number of packets needed to detect and identify encrypted stepping-stone streams, with guarantees on the probability of false accusations. We also examine the impact of chaﬀ insertion by the attacker and provide bounds on the amount of chaﬀ required to evade detection. Our approach is based on detecting fine-grained correlations and may be applicable to more generalized traffic analysis domains, such as anonymous communication.

### Acknowledgements

This work was supported in part by NSF grants CCR-0105488 and NSF-ITR CCR-0122581.

### References

1. Staniford-Chen, S., Heberlein, L.T.: Holding intruders accountable on the internet. In: Proceedings of the 1995 IEEE Symposium on Security and Privacy, Oakland, CA (1995) 39–49
2. Zhang, Y., Paxson, V.: Detecting stepping stones. In: Proceedings of the 9th USENIX Security Symposium. (August 2000) 171–184
3. Yoda, K., Etoh, H.: Finding a connection chain for tracing intruders. In: F. Guppens, Y. Deswarte, D. Gollmann and M. Waidner, editors, 6th European Symposium on Research in Computer Security – ESORICS 2000 LNCS-1895, Toulouse, France (October 2000)
4. Donoho, D., Flesia, A.G., Shankar, U., Paxson, V., Coit, J., Staniford, S.: Multiscale stepping-stone detection: Detecting pairs of jittered interactive streams by exploiting maximum tolerable delay. In: Fifth International Symposium on Recent Advances in Intrusion Detection, Lecture Notes in Computer Science 2516, New York, Springer (2002)
5. Wang, X., Reeves, D.: Robust correlation of encrypted attack traffic through stepping stones by manipulation of inter-packet delays. In: Proceedings of the 2003 ACM Conference on Computer and Communications Security (CCS 2003), ACM Press (2003) 20–29
6. Kearns, M., Vazirani, U.: An Introduction to Computational Learning Theory. MIT Press (1994)
7. Valiant, L.: A theory of the learnable. Communications of the ACM 27 (1984) 1134–1142
8. Blumer, A., Ehrenfeucht, A., Haussler, D., Warmuth, M.K.: Occam’s razor. Information Processing Letters 24 (1987) 377–380
9. Stoll, C.: The Cuckoo’s Egg: Tracking a Spy through the Maze of Computer Espionage. Pocket Books (2000)
10. Wang, X., Reeves, D., Wu, S., Yuill, J.: Sleepy watermark tracing: An active network-based intrusion response framework. In: Proceedings of the 16th International Information Security Conference (IFIP/Sec’01). (2001) 369–384
11. Wang, X., Reeves, D., Wu, S.: Inter-packet delay-based correlation for tracing encrypted connections through stepping stones. In D.Gollmann, G.Karjoth, M.Waidner, eds.: 7th European Symposium on Research in Computer Security (ESORICS 2002), Lecture Notes in Computer Science 2502, Springer (2002) 244–263
12. Wang, X.: The loop fallacy and serialization in tracing intrusion connections through stepping stones. In: Proceedings of the 2004 ACM Symposium on Applied Computing, Nicosia, Cyprus, ACM Press (2004) 404–411
13. Paxson, V., Floyd, S.: Wide-area traffic: The failure of Poisson modeling. IEEE/ACM Transactions on Networking 3 (1995) 226–244