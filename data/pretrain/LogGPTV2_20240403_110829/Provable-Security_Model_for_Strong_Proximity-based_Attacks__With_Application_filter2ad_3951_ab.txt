AC=MACKs
SDAD= SignP r ivC (AC, NR , td , NC ,..)
(ATC)
(ATC,data,σ′
1, ...,)
SDAD, AC
To Bank: AC,...
Check SDAD
Figure 2: PayCCR [7]: Mastercard’s RRP with Collusive-Relay
Protection & No Changes to the Issuing Bank
is the card who does the verification of the timestamping signatures.
3 VALIDATED DISTANCE-BOUNDING
PROTOCOLS
In this section, we introduce the notion of validated distance-bounding
(v-DB). We then discuss this definition w.r.t. existing lines in the
field.
3.1 v-DB Definitions
This is an augmented DB protocol in the sense that the following
two aspects are added to a “standard” DB protocol:
a. the proximity-checking algorithm is portable and, unlike in
traditional DB, it can be added not only to the reader, but
–alternatively– it can be added to the card;
b. the proximity-checking is validated in the sense that, in an
v-DB protocol, after the proximity-checking phase is finished,
a protocol party will re-verify that the proximity-checking
was performed as expected.
In other words, the above means that –unlike in standard DB–
in a v-DB protocol, the reader may or may not be the one to under-
take the RTT measurements, but –no matter which protocol party
performed the measurements– these are certainly re-checked by
another algorithm in the protocol. We now formalise this below.
Definition 3.1. Validated Distance-Bounding Protocols. A val-
idated distance-bounding (v-DB) protocol is a tuple
Π = (C,R, T , PC,W, B), where B denotes the distance bound
and C,R, T , PC,W are ppt2. algorithms as follows:
• C is the card algorithm and R is the reader algorithm in an
unilateral authentication protocol where C authenticates to
R;
• T is a tamper-resistant, trusted execution environment;
• the tuple (PC, T ) form a proximity-checking functionality:
(PC, T ) checks that d (C,R) ≤ B;
• the tuple (PC, T ) is directly used by one authentication
party: be it by C or by R;
• R and (PC, T ) respectively have public outputs OutR and
in {0, 1} (success/failure of the authentication
Out(PC,T )
and proximity-checking respectively), as well as private out-
puts denoting their transcripts, denoted τR and, resp., τPC;
• W is the proximity validating algorithm: given the private
output of (PC, T ), the algorithm W checks the correctness
of public output of (PC, T ).
• W has a public output OutW .
Def. 3.1 says that a validated distance-bounding (v-DB) protocol
is composed of two primitives. First, it comprises the authenti-
cation primitive that implements the mechanisms of C authen-
ticating to R. Second, it includes the proximity-checking primi-
tive facilitated by (PC, T ), which is aimed to verify that the de-
vices/parties running C and resp. R are at a distance of no more
than B from one another. Note that the validating algorithm W
solely re-verifies the proximity- checking, without the authentication
side (i.e., W operates on the private output (PC, T ) only, without
that of R).
Remark 1: W.r.t. above, we note:
2All measures of complexity and probability are asymptotic in a security parameter s.
Session 2: Authentication ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan89(1) Since the authentication and proximity checking algorithms
are separated, one can clearly differentiate the corruption of
one or the other, thus yielding a finer threat model than in
“standard DB” [1], and propose specialised security proper-
ties.
(2) Unlike in “standard DB”, in v-DB, the proximity-checking
can sit either with C or R. Here, W only re-verifies the
proximity-checking dimension of the protocol between C
and R. That means, that whilst we introduced v-DB on top
of unilateral authentication, in fact v-DB is agnostic of the
underlying protocol run by C and R and that v-DB would
work the same if this latter protocol were something other
than authentication.
We now move to the notion of a validated distance-bounding
system, which intuitively takes a v-DB protocol to the implemen-
tation level. To this end, some setup phases are run, algorithms
are instantiated and loaded onto devices, and –importantly– the
proximity-checking algorithm is fixed on one side: on the card-
implementing side, or on the reader-implementing side. We for-
malise this in Def. 3.2 below.
Definition 3.2. Validated Distance-Bounding (v-DB) Systems.
Given a v-DB protocol Π and ppt. algorithm X, a validated distance-
bounding system Πreal (v-DB system, for short) is a concrete repre-
sentation of v-DB and X, written v-DBreal =(C, PC,T , R,W , X , B), as
follows:
– the bound B is instantiated,
– the card and reader algorithms are set up3 correctly to run the
unilateral authentication protocol in v-DB,
– the proximity-checking algorithm (PC, T ) is set up4 correctly
and is coupled with the card algorithm or with the reader algorithm,
– the validating algorithm W is set up5 correctly and coupled with
the card algorithm or with the reader algorithm opposite to how
the proximity-checking algorithm is coupled, or –alternatively– it
is coupled with X,
– after this coupling and setup, all algorithms in Π are loaded onto
communicating devices.
By enumerating where (PC, T ) and W can “sit” in a v-DB sys-
tem, we obtain the following classes of v-DB systems.
Definition 3.3. Classes of v-DB Systems. Consider a v-DB sys-
tem denoted as v-DBreal =(C, PC,T , R,W , X , B) be . If the proximity-
checking algorithm is coupled with the card and the validating algo-
rithm is coupled with the reader, we write Πreal =([C, PC,T ], [R,W ], B),
and we call this card-checked and reader-validated distance-bounding
system. The [C, PC,T ] tuple is called a card coupling.
If the proximity-checking algorithm is coupled with the reader
and the validating algorithm is coupled with the card, we write
Πreal =([R, PC,T ], [C,W ], B), and we call this reader-checked and
card-validated distance-bounding system. The [R, PC,T ] tuple is
called a reader coupling.
If the proximity-checking algorithm is coupled with the card and
the validating algorithm is coupled with X, we write
3All PKI involved or any cryptographic keys pre-shared are all set up.
4E.g., PC is set up with the same B as instantiated.
5E.g., W is set up with the same B as instantiated.
Πreal =([C, PC,T ], R, [W , X], B), and we call this card-checked and
X-validated distance-bounding system.
If the proximity-checking algorithm is coupled with the reader
and the validating algorithm is coupled with X, we write
Πreal =([R, PC,T ], C, [W , X], B), and we call this reader-checked and
X-validated distance-bounding system.
The Scope of v-DB Systems. With Def. 3.3 in place, one can
now see that v-DB systems are paramount in cases where access
to services are provided based on proximity checking, and where
the “traditional” party ascertaining proximity may have incentives
to misbehave and not execute its role correctly. In such cases, the
output by T will aid another party in the protocol to run W as to
re-verify that the proximity-checking was indeed performed, even
by a potentially corrupt proximity-checker. We detail this below.
In reader-checked systems, Def. 3.2 aims to formalise the fol-
lowing: a v-DB protocol is run between a card and a reader, and
the reader does the proximity-checking PC assisted by a trusted
execution environment denoted T . In this case, the card or a 3rd
party X re-validates that the proximity-checking was done cor-
rectly. Intuitively, in this case, the trusted execution environment T
will prevent the reader from cheating and from not performing the
proximity-checking PC correctly. An example of where a reader
may wish to cheat and not perform the proximity-checking is that
where its core function is orthogonal to the closeness of the card:
i.e., in EMV, the reader just wants to take a payment, and would
arguably still take payment from a card that was afar.
In card-checked systems, Def. 3.2 formalises a situation akin to
that of reader-checked systems, only that –in this case– the roles
of the card and reader are inverted. That is to say, imagine that
a card is tasked with checking its proximity to the reader that is
mobile. Assume this card has an incentive to lie about the proximity-
checking (e.g., in order to allow a far-away reader to authenticate
it). Then, in card-checked v-DB systems, we add T on board the card
and the re-verifier W (which can sit with the reader or a 3rd party)
will use T ’s outputs to detect that such a corrupted card may wish
to fault the system.
3.2 v-DB’s Place in the Field of
Distance-Bounding
Examples of v-DB Systems & Related Definitions. The for-
malisation of v-DB systems is introduced for the first time in this
paper. However, we can point to two existent systems that fit this
description. PayBCR in [7] is a reader-checked and bank-validated
v-DB system, whilst PayCCR in the same [7] is a reader-checked and
card-validated v-DB system.
We are not aware of card-checked v-DB. Whilst there exist pro-
tocols where the card does check the proximity to the reader (e.g.,
mutual distance-bounding [2]), in these cases there is no validation
(via another algorithm W ) of this checking by the card.
Definitions Relating to v-DB Systems. Vaudenay and Kilinc,
in [15], augment distance-bounding protocols by adding a Hard-
ware Security Module (HSM) to cards, which is akin to Def. 3.2
coupling T and C. That said, the Kilinc-Vaudenay systems yielded
are not card-checked (i.e., PC is not on the card side) and, moreover,
no validating algorithm is present. In other words, the security
Session 2: Authentication ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan90reasons and mechanisms of [15] are different: therein, cards are
augmented with HSMs mainly to protect against a threat called
terrorist-fraud [9] and not with our purpose of aiding to the proximity-
checking mechanism per se, and –unlike herein – there is no di-
mension of re-validation of said proximity-checking by another
party.
On a similar note, in [10], the authors look at mixing proximity-
checking with roots of trust, akin to Def. 3.2 putting together T
and PC. There are two notable differences between [10] and our
definitions. (1) In [10], software roots of trust and –in fact– spe-
cific ones (i.e., Intel SGX) are envisaged to stand in for T and the
proximity-checking algorithm is also fixed; this is clearly not the
case in this work. (2) In [10], there is no aspect of re-validation of
said proximity-checking by another party.
We sum up that Defs. 3.1 and 3.2 introduce a new primitive/protocol
that was not defined before; however, we can see that they do offer
some formalisation6 for the contactless payment protocols pub-
lished at Financial Crypto 2019, in [7].
4 A FORMAL MODEL FOR VALIDATED
DISTANCE BOUNDING
In this section, we will present a formalism that captures the exe-
cution and threat models for v-DB protocols and systems.
In this model, we will be able to formally express for the first
time certain fine-grained corruptions, which will be the basis of
putting forward new security properties. For instance, in a v-DB sys-
real =([R, PC,T ], [C,W ], X , B), a man-in-the-middle (MiM) at-
tem Π
tacker can corrupt the R and/or the PC sides of the reader-coupling
[R, PC,T ] and, as such, this yields collusive attacks whereby the
corrupted reader can strengthen MiM attacks.
In the model that we are about to introduce, it is possible to
capture other types of strong, collusive attacks that had not been
introduced in the past. One example of that is our Definition 4.4 of
strong distance-fraud, as well as the new attacks such as the ones
we discuss in Section 5.
4.1 Execution Model.
v-DB Parties. In this paragraph, we detail part of the setup in a v-
real, presented in Def. 3.2. Let Π = (C,R, T , PC,W, B)
DB system Π
real,
be a v-DB protocol. To create the corresponding v-DB system Π
the algorithms in Π are loaded onto devices: e.g., physical RFID cards,
NFC-enabled phones, EMV payment terminals, etc. This loading
is done in accordance with the coupling presented in Def. 3.2: i.e.,
algorithms coupled together are loaded on the same device. For
real =([C, PC,T ], [R,W ], X , B), the card algorithm
instance, in this Π
C, the proximity-checking algorithm PC and the trusted execution
environment will be loaded on the same device [C, PC,T ], whereas
the reader algorithm R and validating algorithm W will be loaded
on the same device [R,W ]. We refer to devices that have the card
algorithm C on them as card devices, and devices that have the
reader algorithm R on them as reader devices.
The ppt. algorithm X inside Π
real is also loaded onto a compu-
tational machine. When the algorithm and machine X are present
in a concrete v-DB system, it is because we are faced with an X-
validated distance-bounding system; in this case, as in Def. 3.2, note
that the machine X also has algorithm W loaded on it. We stress
that this machine onto which X (and then W ) are loaded, i.e., the X
machine, is not referred to as a device.
We consider a ppt. adversary who can corrupt (card and
reader) devices (but not both the designated card and the desig-
nated reader in a given security experiment). We will define the
full corruption model later. We consider that the adversary has his
own adversarial devices, running arbitrary ppt. algorithms.
A party is an executing device (be it card, reader or adversary-
owned device), or an executing X machine. Each party Y has a
unique public identifier i and, as such, it is denoted Yi.
Sessions. We allow multiple parties of the same type. Also, each
party can execute multiple concurrent runs. One run of a party is
called a session. If one execution is run on a card-device or reader-
device, then it is a card session or a reader session, respectively. We
write Y i for the i-th session of a party Y.
Each card and reader party involved in an execution has a status:
active or inactive. When a card or reader is inactive, it ignores all
incoming messages. Initially, all are inactive. A party is only active
when it is involved in one or more sessions, and becomes inactive
again when this/these finish.
The chronologically-ordered list of the messages sent and re-
ceived by a party in a session is called the transcript of the session.
All sessions are attributed a unique identifier. (e.g., via the applica-
tion of the pseudorandom function to the transcript). A session is
full if its transcript contains the last message of the specification.
Otherwise a session is partial.
The transcripts of a card-session and “corresponding” sessions of
other types (reader, X) may differ, due to adversarial manipulation
of messages.
If a series of partial sessions of type card, reader and (potential)
X, with or without adversarial parties involved, that when put
together make a partial execution of Π, then they form a partial
macro-session. If this leads to a full session of the party onboarded
with W , then the macro-session is said to be full.
4.2 Physical & Communication Model.
From here on, we describe a DB-driven model that focuses mainly
on the communication between card and reader devices, in a con-
current setting and in the presence of an adversary. Unlike in tra-
ditional DB model, we will also consider the communication with
the X machine, which will remain honest. Also, unlike in a tradi-
tional DB model, the adversary will be able to corrupt devices in a
fine-grained manner: i.e., just one specific algorithm on a device,
as opposed to the whole device.
v-DB system.
Let Π = (C,R, T , PC,W, B) be a v-DB protocol, and Π
We assume that there is a global clock.
real be a
6We say “some” due to the fact that v-DB protocols/systems do not attempt to formalise
the underlying protocol between C and R, i.e., payment in the case of [7]; v-DB only
focuses on proximity-checking aspects.
4.2.1 Computation. We assume that the computation of mes-
sages to send out, as well as the write and the read to memory are