### AC = MACKs
SDAD = SignPrivC(AC, NR, td, NC, ...)
(ATC)
(ATC, data, σ′1, ...,)
SDAD, AC
To Bank: AC, ...
Check SDAD
**Figure 2: PayCCR [7]: Mastercard’s RRP with Collusive-Relay Protection & No Changes to the Issuing Bank**

The card is responsible for verifying the timestamping signatures.

## 3. VALIDATED DISTANCE-BOUNDING PROTOCOLS

In this section, we introduce the concept of validated distance-bounding (v-DB) protocols and discuss their definition in relation to existing work in the field.

### 3.1 v-DB Definitions

A validated distance-bounding (v-DB) protocol is an augmented version of a standard distance-bounding (DB) protocol, incorporating two key enhancements:

1. **Portability of Proximity-Checking Algorithm**: The proximity-checking algorithm can be added not only to the reader but also to the card.
2. **Validation of Proximity-Checking**: After the proximity-checking phase, a protocol party re-verifies that the proximity-checking was performed as expected.

In other words, in a v-DB protocol, the reader may or may not perform the round-trip time (RTT) measurements, but these measurements are always re-checked by another algorithm in the protocol. We formalize this below.

#### Definition 3.1: Validated Distance-Bounding Protocols

A validated distance-bounding (v-DB) protocol is a tuple Π = (C, R, T, PC, W, B), where:
- **B** denotes the distance bound.
- **C** is the card algorithm, and **R** is the reader algorithm in a unilateral authentication protocol where C authenticates to R.
- **T** is a tamper-resistant, trusted execution environment.
- The tuple (PC, T) forms a proximity-checking functionality that checks if the distance d(C, R) ≤ B.
- (PC, T) is used directly by one authentication party, either C or R.
- **R** and (PC, T) have public outputs OutR and Out(PC,T) in {0, 1} (success/failure of the authentication and proximity-checking, respectively), and private outputs τR and τPC.
- **W** is the proximity-validating algorithm that, given the private output of (PC, T), checks the correctness of the public output of (PC, T).
- **W** has a public output OutW.

Definition 3.1 states that a v-DB protocol consists of two primitives:
1. **Authentication Primitive**: Implements the mechanisms of C authenticating to R.
2. **Proximity-Checking Primitive**: Facilitated by (PC, T), it verifies that the devices running C and R are within a distance of no more than B from each other. The validating algorithm W solely re-verifies the proximity-checking, without involving the authentication side.

**Remark 1:**
- Since the authentication and proximity-checking algorithms are separated, one can clearly differentiate the corruption of one or the other, leading to a finer threat model and specialized security properties.
- In v-DB, the proximity-checking can be performed by either C or R, and W only re-verifies the proximity-checking dimension of the protocol between C and R. This means v-DB is agnostic of the underlying protocol run by C and R and would work the same if the underlying protocol were something other than authentication.

### 3.2 Validated Distance-Bounding Systems

We now move to the notion of a validated distance-bounding system, which takes a v-DB protocol to the implementation level. Some setup phases are run, algorithms are instantiated and loaded onto devices, and the proximity-checking algorithm is fixed on one side: either the card or the reader. We formalize this in Definition 3.2.

#### Definition 3.2: Validated Distance-Bounding (v-DB) Systems

Given a v-DB protocol Π and a probabilistic polynomial-time (ppt) algorithm X, a validated distance-bounding system Πreal (v-DB system) is a concrete representation of v-DB and X, written v-DBreal = (C, PC, T, R, W, X, B), as follows:
- **B** is instantiated.
- The card and reader algorithms are set up correctly to run the unilateral authentication protocol in v-DB.
- The proximity-checking algorithm (PC, T) is set up correctly and coupled with either the card algorithm or the reader algorithm.
- The validating algorithm W is set up correctly and coupled with the card algorithm or the reader algorithm, opposite to how the proximity-checking algorithm is coupled, or alternatively, it is coupled with X.
- After this coupling and setup, all algorithms in Π are loaded onto communicating devices.

By enumerating where (PC, T) and W can "sit" in a v-DB system, we obtain the following classes of v-DB systems.

#### Definition 3.3: Classes of v-DB Systems

Consider a v-DB system denoted as v-DBreal = (C, PC, T, R, W, X, B). If the proximity-checking algorithm is coupled with the card and the validating algorithm is coupled with the reader, we write Πreal = ([C, PC, T], [R, W], B), and call this a card-checked and reader-validated distance-bounding system. The [C, PC, T] tuple is called a card coupling.

If the proximity-checking algorithm is coupled with the reader and the validating algorithm is coupled with the card, we write Πreal = ([R, PC, T], [C, W], B), and call this a reader-checked and card-validated distance-bounding system. The [R, PC, T] tuple is called a reader coupling.

If the proximity-checking algorithm is coupled with the card and the validating algorithm is coupled with X, we write Πreal = ([C, PC, T], R, [W, X], B), and call this a card-checked and X-validated distance-bounding system.

If the proximity-checking algorithm is coupled with the reader and the validating algorithm is coupled with X, we write Πreal = ([R, PC, T], C, [W, X], B), and call this a reader-checked and X-validated distance-bounding system.

### 3.3 Scope of v-DB Systems

v-DB systems are crucial in scenarios where access to services is based on proximity checking, and the traditional party ascertaining proximity may have incentives to misbehave. In such cases, the output by T will aid another party in the protocol to run W and re-verify that the proximity-checking was indeed performed, even by a potentially corrupt proximity-checker.

In reader-checked systems, a v-DB protocol is run between a card and a reader, and the reader does the proximity-checking PC assisted by a trusted execution environment T. The card or a third party X re-validates that the proximity-checking was done correctly. For example, in EMV, the reader just wants to take a payment and might still take payment from a card that is far away.

In card-checked systems, the roles of the card and reader are inverted. If a card is tasked with checking its proximity to a mobile reader and has an incentive to lie about the proximity-checking, then in card-checked v-DB systems, T is added to the card, and the re-verifier W (which can sit with the reader or a third party) will use T's outputs to detect such corruption.

### 3.4 v-DB’s Place in the Field of Distance-Bounding

#### Examples of v-DB Systems & Related Definitions

The formalization of v-DB systems is introduced for the first time in this paper. However, two existing systems fit this description: PayBCR in [7] is a reader-checked and bank-validated v-DB system, while PayCCR in the same [7] is a reader-checked and card-validated v-DB system.

We are not aware of any card-checked v-DB systems. While there are protocols where the card checks the proximity to the reader (e.g., mutual distance-bounding [2]), these do not include validation via another algorithm W.

#### Definitions Relating to v-DB Systems

Vaudenay and Kilinc, in [15], augment distance-bounding protocols by adding a Hardware Security Module (HSM) to cards, similar to Def. 3.2 coupling T and C. However, the Kilinc-Vaudenay systems are not card-checked (i.e., PC is not on the card side), and no validating algorithm is present. The security reasons and mechanisms in [15] differ: HSMs are mainly to protect against terrorist-fraud [9], and there is no re-validation of proximity-checking by another party.

Similarly, in [10], the authors mix proximity-checking with roots of trust, akin to Def. 3.2 putting together T and PC. There are two notable differences:
1. [10] envisions specific software roots of trust (e.g., Intel SGX) and fixes the proximity-checking algorithm, which is not the case here.
2. [10] does not include re-validation of proximity-checking by another party.

Definitions 3.1 and 3.2 introduce a new primitive/protocol that was not defined before, offering some formalization for the contactless payment protocols published at Financial Crypto 2019 in [7].

### 4. A FORMAL MODEL FOR VALIDATED DISTANCE BOUNDING

In this section, we present a formalism that captures the execution and threat models for v-DB protocols and systems. This model allows us to formally express fine-grained corruptions, which will be the basis for new security properties.

#### 4.1 Execution Model

**v-DB Parties:**
In a v-DB system Πreal, presented in Def. 3.2, let Π = (C, R, T, PC, W, B) be a v-DB protocol. To create the corresponding v-DB system Πreal, the algorithms in Π are loaded onto devices: e.g., physical RFID cards, NFC-enabled phones, EMV payment terminals, etc. This loading is done in accordance with the coupling presented in Def. 3.2: algorithms coupled together are loaded on the same device.

For instance, in Πreal = ([C, PC, T], [R, W], X, B), the card algorithm C, the proximity-checking algorithm PC, and the trusted execution environment T are loaded on the same device [C, PC, T], whereas the reader algorithm R and validating algorithm W are loaded on the same device [R, W]. Devices with the card algorithm C are called card devices, and those with the reader algorithm R are called reader devices.

The ppt algorithm X inside Πreal is loaded onto a computational machine. When X and W are present in a concrete v-DB system, it is an X-validated distance-bounding system, and the machine X also has algorithm W loaded on it. This machine is not referred to as a device.

We consider a ppt adversary who can corrupt (card and reader) devices (but not both the designated card and the designated reader in a given security experiment). The adversary has their own adversarial devices, running arbitrary ppt algorithms.

A party is an executing device (card, reader, or adversary-owned device) or an executing X machine. Each party Y has a unique public identifier i and is denoted Yi.

**Sessions:**
We allow multiple parties of the same type, and each party can execute multiple concurrent runs. One run of a party is called a session. If one execution is run on a card-device or reader-device, it is a card session or a reader session, respectively. We write Yi for the i-th session of a party Y.

Each card and reader party involved in an execution has a status: active or inactive. When a card or reader is inactive, it ignores all incoming messages. Initially, all are inactive. A party is only active when it is involved in one or more sessions and becomes inactive again when these finish.

The chronologically-ordered list of the messages sent and received by a party in a session is called the transcript of the session. All sessions are attributed a unique identifier (e.g., via the application of a pseudorandom function to the transcript). A session is full if its transcript contains the last message of the specification; otherwise, it is partial.

The transcripts of a card-session and corresponding sessions of other types (reader, X) may differ due to adversarial manipulation of messages.

If a series of partial sessions of type card, reader, and (potential) X, with or without adversarial parties involved, form a partial execution of Π, they form a partial macro-session. If this leads to a full session of the party onboarded with W, the macro-session is said to be full.

#### 4.2 Physical & Communication Model

We describe a DB-driven model focusing on the communication between card and reader devices in a concurrent setting and in the presence of an adversary. Unlike in a traditional DB model, we also consider the communication with the X machine, which remains honest. The adversary can corrupt devices in a fine-grained manner: just one specific algorithm on a device, rather than the whole device.

**v-DB System:**
Let Π = (C, R, T, PC, W, B) be a v-DB protocol, and Πreal be a v-DB system. We assume there is a global clock.

**4.2.1 Computation:**
We assume the computation of messages to send out, as well as the write and read to memory, are performed in constant time.