(cid:3)(cid:10).
, t
, pc
, w
, s
(cid:3)
(cid:3)
(cid:3)
(cid:3)
and (s
(cid:3)
, w
(cid:3)) (cid:23) (m
(cid:3)
(cid:3)).
, h
702
We can now state functional correctness of the garbage col-
lection scheme. Intuitively, the reachable heap does not change
when interleaving the reductions with garbage collections. This
is expressed as a pair of theorems, in the style of the work
by Morrisett et al. [22]. The ﬁrst theorem states that running the
GC followed by a regular transition is comparable to running a
regular transition. The second one states that running a regular
transition is comparable to running the GC followed by a
regular transition.
Note that in the statements of the theorems below the
time component of the conﬁgurations is reset. This ensures
the result of running command x := time() is the
that
same. Furthermore, the ﬁrst theorem additionally qualiﬁes the
semantics to be unbounded in maximum available size. This
is needed because otherwise the execution may run out of
available heap.
Theorem 1 (Functional correctness for unbound heaps with
time reset). Consider memory m and heaps h and w such
that (m, h) and (m, w) are free of dangling pointers. If
(cid:9)c, pc, m, h, t(cid:10) (cid:3)(cid:3)(cid:4) (cid:9)c, pc, m, w, t
(cid:3)(cid:3)(cid:10) and (cid:9)c, pc, m, w, t(cid:10) ω
(cid:9)c
(cid:3)(cid:10)
(cid:3)
(cid:3)
(cid:3)
, m
, pc
, t
(cid:3)
and (m
, w
(cid:3)(cid:10) then (cid:9)c, pc, m, h, t(cid:10) ω
, w
, t
(cid:3)) (cid:23) (s
(cid:3)
, h
(cid:3) (cid:9)c
(cid:3)
, h
(cid:3)).
, pc
, s
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
Theorem 2 (Functional correctness with time reset). Con-
sider memory m and heaps h such that (m, h) is free of
(cid:3) (cid:9)c
dangling pointers. If (cid:9)c, pc, m, h, t(cid:10) mx
(cid:3)(cid:10) then
, t
(cid:3)(cid:3)(cid:10) and (cid:9)c, pc, m, w, t(cid:10) mx
(cid:9)c, pc, m, h, t(cid:10) (cid:3)(cid:3)(cid:4) (cid:9)c, pc, m, w, t
(cid:3)) (cid:23) (m
(cid:3)(cid:10) and (s
(cid:9)c
(cid:3)).
(cid:3)
(cid:3)
, h
, t
D. GC or normal steps
(cid:3)
, m
(cid:3)
, h
, pc
, pc
, w
, w
, s
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
(cid:3)
As a ﬁnal element in this section, we deﬁne a top-level GC
or normal step as a transition function that nondeterministically
interleaves normal and collection steps.
NORMAL-STEP
(cid:3) (cid:9)c
(cid:9)c, pc, m, h, t(cid:10) mx
(cid:3)
(cid:9)c, pc, m, h, t(cid:10) mx−→ (cid:9)c
(cid:3)
, pc
(cid:3)
, pc
(cid:3)
, m
(cid:3)
(cid:3)
, h
(cid:3)
, m
(cid:3)(cid:10)
, t
(cid:3)(cid:10)
(cid:3)
, t
, h
GC-STEP
(cid:9)c, pc, m, h, t(cid:10) (cid:3)(cid:3)(cid:4) (cid:9)c, pc, m, h
(cid:3)(cid:10)
(cid:3)
, t
(cid:9)c, pc, m, h, t(cid:10) mx−→ (cid:9)c, pc, m, h
(cid:3)(cid:10)
(cid:3)
, t
We use this top-level relation in studying security properties
of our programs in Section VII.
VI. TYPE SYSTEM
In addition to the secure garbage collection described in
the previous section, our enforcement mechanism additionally
relies on a typing discipline. The typing discipline is mostly
standard for an imperative security-typed language with ar-
rays [10, 39, 25, 31, 9], with a few minor technical deviations
that we explain below. In particular, the type system ensures
not only conﬁdentiality, but also integrity by viewing values
that depend on time commands as tainted. This restricts the
extent to which the result of the time command affects the
control ﬂow or the heap shape of the program.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
WF-INT
(cid:2) (cid:24)wf int ξ
WF-ARRAY
(cid:2) (cid:25) (cid:2)p
(cid:2)ref (cid:25) (cid:2)p
(cid:2) (cid:24)wf array(cid:2)p
[τ ] ((cid:2)ref ,◦)
(cid:2)p (cid:24)wf τ
Fig. 11: Type well-formedness
A. Time taint and generalized security levels
We introduce a time lattice; a two-point lattice with the
elements ◦ and •. Here, ◦ corresponds to to untainted values,
and • corresponds to tainted values. We let ι range over
elements of this lattice, and deﬁne an ordering (cid:25)t such that
for all ι ∈ {◦,•} it holds that ι (cid:25)t ι, and ◦ (cid:25)t •. We deﬁne
the corresponding least upper bound operator as (cid:26)t.
A generalized security level ξ is a combination of both a
conﬁdentiality level (cid:2) and a taint level ι. With this, we have the
following grammar for the security levels in the type system.
ι ::= ◦ | •
ξ ::= ((cid:2), ι)
We lift lattice operations to generalized security levels, and
denote the resulting ordering and least upper bound operations
as (cid:27) and (cid:6), respectively.
Types are given by the following grammar
σ ::= int | array(cid:2)[τ ]
τ ::= σ ξ
Here, τ is a security annotated type that consist of a base
type with a security level. Base types σ are either integers or
arrays of some type τ that specify the conﬁdentiality level of
the partition where the array lives.
Given a base type σ and security levels ξ1, ξ2, deﬁne the
operator for raising of the type σ ξ1 to level ξ2 as
(σ ξ1)ξ2 (cid:2) σ (ξ1 (cid:6) ξ2)
The lattice ordering (cid:27) induces a subtyping relation on the
types
ξ1 (cid:27) ξ2
σ1 = σ2
σ1 ξ1 <: σ2 ξ2
Note that invariance in the base types, even if the base type
[τ ] ((cid:2)ref ,◦), is required because the arrays are
is array(cid:2)p
mutable [24].
B. Well-formedness of reference types
Figure 11 presents well-formedness conditions of types w.r.t.
references. The security level on the left-hand side of the
turnstile is a lower bound on the heap level that can store
values of type τ. A type τ is well-formed when ⊥ (cid:24)wf τ. These
rules prevent creation of references from the high partitions
into the low ones, and are later lifted to deﬁne well-formedness
of conﬁgurations.
703
T-INT
Γ (cid:24) n : int ξ
T-VAR
Γ (cid:24) x : Γ(x)
T-NULL⊥ (cid:24)wf array(cid:2)[τ ]((cid:2)ref ,◦)
Γ (cid:24) null : array(cid:2)[τ ] ((cid:2)ref ,◦)
T-OP
Γ (cid:24) ei : int ξi
i = 1, 2
Γ (cid:24) e1 op e2 : int (ξ1 (cid:6) ξ2)
Fig. 12: Typing rules for expressions
C. Typing rules
We assume a memory typing environment Γ that maps
variable names to types. In the remaining of the paper, we
require that the memory typing environments are well-formed
w.r.t. all types deﬁned in it. The typing judgment for expressions
has form Γ (cid:24) e : τ. Figures 12 presents the typing rules for
expressions.
The typing judgment for commands has form Γ, pc (cid:24) c.
Figure 14 present the typing rules for commands, where pc is
the static program counter level. The rule (T-SKIP) is trivial.
Rule (T-ASSIGN) is standard in how it prevents both implicit
and explicit information ﬂows using the program counter level.
The rule (T-TIME) requires the assigned variable to be marked
as tainted, and is otherwise similar to assignment in its treatment
of implicit ﬂows. Rule (T-IF) is slightly non-standard. First, it
prevents branching on high data if the pc is low. Note that the
rule does not raise the level of the program counter label in the
branches. Instead, high conditionals must occur syntactically
in a scope where the pc-level is explicitly raised using at
command. Second, branching on high values is allowed only if
the value is not tainted by time commands. This is visualized
in Figure 13. Rule (T-WHILE) imposes a similar restriction,
and is otherwise standard.
Rule (T-NEW) requires that both pc-level and the level of
the expression that determines the size of the array ﬂow to
the variable that stores the reference. This prevents the size
of a high array from depending on low values. The level (cid:2)
on the command that is interpreted by the allocation semantic
(cf. Rule (S-New) in Section V) must be as restrictive as the
level (cid:2)2 of the reference.
Rule (T-SET) requires that both the pc-level and the
expression used for indexing ﬂow to the level of the array
reference. This prevents indexing into a low array using high
expressions. It also requires the type of the right-hand side
expression to ﬂow to the type of the array on the left, taking
implicit ﬂows via pc-level into account.
Rule (T-GET) is similar. It requires that the pc-level and the
level of the index expression ﬂows to the level of the array
reference, and rules out both explicit and implicit ﬂows in the
assignment.
Finally, rules (T-AT) raises the level of pc, Furthermore, an
explicit time bound is provided for this command, which allows
the programmer to control the time consumed by commands
when the pc is high.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:19:35 UTC from IEEE Xplore.  Restrictions apply. 
((cid:29),•)
(⊥,•)
((cid:29),◦)
(⊥,◦)
Fig. 13: Lattice for conﬁdentiality and integrity. Branching and
heap manipulation is allowed on values whose type is in the
gray area.
T-SKIP
Γ, pc (cid:24) skip
T-ASSIGN
Γ (cid:24) e : σ ξ
σ (ξ (cid:6) (pc,◦)) <: Γ(x)
Γ, pc (cid:24) x := e
T-IF
Γ (cid:24) e : int ((cid:2),◦)
(cid:2) (cid:25) pc
Γ, pc (cid:24) ci
Γ, pc (cid:24) if e then c1 else c2
i = 1, 2
T-WHILE
Γ (cid:24) e : int ((cid:2),◦)
(cid:2) (cid:25) pc
Γ, pc (cid:24) c
Γ, pc (cid:24) while e do c
T-SEQ
Γ, pc (cid:24) ci
i = 1, 2
Γ, pc (cid:24) c1; c2
T-NEW
Γ (cid:24) esize : int ((cid:2)size ,◦)
Γ(x) = array(cid:2)[τ ] ((cid:2)x,◦)
Γ (cid:24) einit : τ
pc (cid:26) (cid:2)size (cid:25) (cid:2)x
Γ, pc (cid:24) x := new(cid:2)(esize , einit )
T-SET
Γ (cid:24) eidx : int ξidx
Γ (cid:24) e : σ ξ
ξidx (cid:6) (pc,◦) (cid:27) ξx
Γ(x) = array(cid:2)[τ ] ξx
σ (ξx (cid:6) ξ) <: τ
Γ, pc (cid:24) x[eidx ] := e
T-GET
Γ (cid:24) eidx : int ξidx
Γ(y) = array(cid:2)[σ ξ] ξy
(pc,◦) (cid:6) ξidx (cid:27) ξy
σ (ξ (cid:6) ξy) <: Γ(x)
Γ, pc (cid:24) x := y[e]
T-TIME
Γ(x) = int ((cid:2),•)
pc (cid:25) (cid:2)
Γ, pc (cid:24) x := time()
T-AT
Γ (cid:24) e : int ((cid:2)
(cid:3)
,◦)
(cid:3) (cid:25) pc (cid:25) (cid:2)
(cid:2)
Γ, (cid:2) (cid:24) c
Γ, pc (cid:24) at (cid:2) with bound e do c
Fig. 14: Typing rules for the surface language commands
Because the information ﬂow constraints imposed by the
type system are standard, they can also be enforced using
dynamic or hybrid monitors [32, 5].
Note that the type system permits time measurements in both
low and high context; this directly models attacker capability
to make internal timing measurements (cf. Section III); weaker
attacker models, i.e., the ones where attacker does not have
access to system clock but only to network messages, can be
addressed in a similar manner.
1) Properties of the type-system: The type system ensures
two important properties. To state these, we need a heap typing
environment [38] that maps allocated locations to types.
Deﬁnition 5 (Heap typing environment). A heap typing is a
partial function Σ : Loc → τ that maps heap locations to their
types.
The intuition for Σ is that given a location loc, allocated
by a command x := new(cid:2)(e, einit ), where Γ (cid:24) einit : τ, we
have Σ(loc) = τ. Similarly to memory typing environments,
we assume that types deﬁned by the heap typing environment
are well-formed.
We can now state the ﬁrst property, which we split into two
sub-properties: one for typing environments Γ, and one for
heap typing environments Σ.
First, the typing environment Γ gives us an adequate view
of the heap level of locations. More speciﬁcally, if a variable x
points to a location loc, then the heap level of loc equals to
the partition level speciﬁed by Γ(x).
Similarly, we can state this property for a heap typing
environment Σ. Let loc be a location. Then Σ(loc) records
the type of the “content” stored at loc. So, if Σ(loc) =
[τ ] ((cid:2)ref ,◦) it means that the content of location loc
array(cid:2)p
has a heap level of (cid:2)p. That is, following loc twice leads to a
heap allocation with a heap level equal to (cid:2)p.