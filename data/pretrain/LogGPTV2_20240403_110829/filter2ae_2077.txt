## 由JSON CSRF到FormData攻击
原文链接：
首先：你们必须知道CSRF攻击，如果不知道，那么这里是一个简短的介绍：
CSRF是一种攻击，它迫使最终用户在当前对其进行身份验证的Web应用程序上执行不需要的操作。CSRF攻击专门针对状态变化请求，CSRF攻击可以强制用户执行状态转换请求，如转移资金，更改其电子邮件地址，甚至危及整个Web应用程序。
来源：[https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_\(CSRF))
那么在JSON CSRF中有什么独特之处，在JSON CSRF中，发送到服务器的数据是JSON格式，而Content-Type是 **Content-Type：application/json** ，
现在的问题是我们无法发送 **Content-Type：application/json** ，使用常规HTML表单，只能通过XML
HTTP请求或简单地通过AJAX请求到服务器，
但由于CORS策略我们不能这样做，除非服务器允许超过自定义的Origin和在响应中为 **Access-Control-Allow-Credentials：true**
所有这一切只有在没有Anti-CSRF保护令牌或其他CSRF保护机制的情况下才有可能发生。
现在，如果我们将 **Content-Type** 从 **application/json** 更改为 **text/plain**
的时候响应中没有错误并且表单提交成功，我们可以通过创建具有属性 **enctype=”text/plain”** 的HTML表单来执行CSRF攻击。
现在让我们来看看现实生活中的案例：
以下是发送到服务器以更改用户个人信息的JSON请求
现在，我们可以尝试如果改变Content-Type中的 **application/json** 为 **text/plain**
，是不是还可以工作，如果工作并且可以收到相同的结果 **application/json** ，说明没有错误，则会得到下面的JSON信息：
我在JSON数据的末尾附加了 **“balance”:”’ value=’true”}’** 用来平衡请求中发送的 **additional =**
现在，如果 **text/plain** 方法不起作用，那么我们还有另一个选项，只需发送带有Content-Type的表单数据 **Content-Type: application/x-www-form-urlencoded**
。这是最常见，最简单的表单提交类型。现在创建一个包含JSON数据中所有字段的HTML表单。
提交表单以测试它是否正常工作。