Linux kernel. This, on the other hand, makes the hash
much slower. The Linux version has a throughput which
is three to four times higher, due to, e.g., loop unrolling.
Figure 4 shows that booting linux with our SHA-1
implementation takes 0.315 seconds compared to 0.084
seconds for a heavily optimized sha1sum version. As
booting a system usually takes minutes a performance
penalty of 0.231 seconds is acceptable here.
Figure 5 shows the source and binary sizes for BIOS,
GRUB and OSLO. We also give the size of gzip com-
pressed binaries in this table as this reduces the effect of
empty sections in the images. Unfortunately, the source
code of the HP BIOS is not available. A similar but older
Award BIOS consists of around 150 thousand lines of
assembler code. The numbers given for GRUB do not
include the drivers used to boot from a network. Adding
them would nearly double the given numbers.
OSLO is an order of magnitude smaller than GRUB
and two orders of magnitude smaller than the BIOS we
examined. If we presume the principle more code equals
more bugs and neglect the effect of a code size optimiz-
ing compiler, we can deduce that OSLO has a signiﬁ-
cantly smaller number of bugs due to its size compared
to GRUB or the BIOS.
One could argue that in an ordinary system like Win-
dows or Linux, where the TCB of an application consists
of million lines of code with programs consuming tens
or hundreds of megabytes, the size of GRUB and the
BIOS does not matter. That is perhaps true, but as the
trend in secure systems goes to small kernels and hy-
pervisors [10, 13, 29, 32], architectures like L4/NIZZA
or Xen can very well beneﬁt from the TCB reduction
through OSLO.
In summary, OSLO promises a smaller attack surface
due to its minimal size and since it uses a DRTM miti-
gates the TPM reset and the BIOS attacks as outlined
in Section 3.1.
5 Related Work
Previous research showed the vulnerability of trusted
computing platforms against hardware attacks. Kursawe
et al. [18] eavesdrop on the LPC bus to capture and anal-
yse the communication between the CPU and the TPM.
They only perform a passive attack, but describe that an
active hardware attack on the LPC bus could be used to
fool the TPM about the platform state. Untrusted code
can then pretend to the TPM to be a DRTM.
Limitations of the trusted computing speciﬁcation
and its implementations are described in the literature
multiple times. Bruschi et al. [4] showed that an au-
thorization protocol of TPMs is vulnerable to replay at-
tacks. Sadeghi et al. [27] reported that many TPM im-
plementations do not meet the TCG speciﬁcation. Gar-
riss et al. [8] found out that a public computing kiosk that
uses remote attestation to prove which software is run-
ning is vulnerable to boot-between attestation attacks.
They suggest a reboot counter in the TPM to make re-
boots visible to remote parties. Such a counter will not
help against our TPM reset attack as it needs to detect
whether a TPM was switched on later than the whole
platform4, a property a reboot counter cannot achieve.
234
16th USENIX Security Symposium
USENIX Association
There are more sophisticated BIOS attacks men-
tioned in the literature. Heasman [12], for example,
showed at the Blackhat Federal 2006 that a rootkit can
be hidden in ACPI code which is usually stored in the
BIOS. In a subsequent paper [11], he describes how a
rootkit can persist in a system with a secured BIOS by
using other ﬂash chips.
In both cases only TPM-less
systems were considered. By combining our attack to
disable the CRTM with Heasman’s work it seems possi-
ble to hide a rootkit in the BIOS but report correct hash
values to the TPM.
To generally prevent BIOS attacks, Phoenix Tech-
nologies offers a ﬁrmware called TrustedCore [26] that
allows only signed updates. Intel Active Management
Technology [15] has also this feature.
Sailer et al. [28] describe an architecture for an in-
tegrity measurement system for Linux using a static root
of trust. As they focus on the enhancements of the
operating system, the architecture is not limited to an
SRTM. There implementation could easily beneﬁt from
the smaller attack surface of a secure loader like OSLO.
A switch to a DRTM based OSLO-like approach can
shorten the trust chain, minimize the TCB, and is less
vulnerable to TPM and BIOS attacks.
Acknowledgements
We would like to thank Hermann Härtig, Michael Pe-
ter, Udo Steinberg, Neal Walﬁeld, Carsten Weinhold,
and Björn Döbel for their comments. Additionally we
would like to thank Adrian Perrig, Jonathan McCune
and the reviewers for their suggestions to improve the
paper. Special thanks go to Adam Lackorzynski for pro-
viding the hardware in time.
Notes
1There exist also TPMs on daughterboards. Their security value is
limited as exchanging them is quite easy.
2Firmware on adapter cards
3It would be quite unfair to disclose the vendor name here.
4e.g., by holding the reset line of a TPM while powering the ma-
chine up
6 Future Work and Conclusion
References
OSLO is not feature complete yet. We plan to ﬁnish
the implementation of the DMA protection. Moreover,
we want to add ACPI event-log support. This should
allow the integration of OSLO into larger projects that
use the event-log for remote attestation.
A port of OSLO to use the senter instruction on an
Intel TET platform could demonstrate that the mulitboot
chainloader design is portable or show that senter im-
plies an integrated design as it is proposed for Xen [38].
The search for new attack points of other trusted com-
puting implementations is also part of our future work.
It was not necessary to look at more sophisticated at-
tack points such as buffer overﬂows or the strength of
cryptographic algorithms to ﬁnd the bugs and attacks we
presented in this paper. If we compare this to a simi-
lar analysis of another secure system, such as the one
of an RFID chip [3], we have to conclude that current
trusted computing implementations are not resilient to
even simple attacks. Moreover, the current implemen-
tations do not meet the assumptions of a secure design.
Even a small bug in them can compromise the additional
security obtained by a TPM.
We suspect that most of the platforms are vulnera-
ble to the TPM reset and many of them to the BIOS at-
tack. As a consequence the software still based on an
SRTM, such as Microsoft’s Bitlocker, cannot provide
secure TPM-driven encryption and attestation on these
systems.
[1] AMD. Secure Virtual Machine Architecture Ref-
erence Manual, May 2005.
[2] BitLocker Drive Encryption: Technical Overview.
URL: http://technet.microsoft.com/
en-us/windowsvista/aa906017.aspx.
[3] Steve Bono, Matthew Green, Adam Stubbleﬁeld,
Ari Juels, Avi Rubin, and Michael Szydlo. Security
analysis of a cryptographically-enabled RFID de-
vice. In USENIX Security Symposium, Baltimore,
Maryland, USA, July 2005. USENIX.
[4] D. Bruschi, L. Cavallaro, A. Lanzi, and M. Monga.
Attacking a Trusted Computing Platform - Improv-
ing the Security of the TCG Speciﬁcation. Tech-
nical Report RT 05-05, Universit‘a degli Studi di
Milano, Milano MI, Italy, May 2005.
[5] eCryptfs:
An
Enterprise-class
graphic
http://ecryptfs.sourceforge.net.
Filesystem for Linux.
Crypto-
URL:
[6] EMSCB
downloads.
URL:
http:
//www.emscb.com/content/pages/
turaya.downloads.
[7] Enforcer Project. URL: http://enforcer.
sourceforge.net.
USENIX Association
16th USENIX Security Symposium
235
[8] Scott Garriss, Ramón Cáceres, Stefan Berger,
Reiner Sailer, Leendert van Doorn, and Xiaolan
Zhang. Towards Trustworthy Kiosk Computing.
In "Proceedings of the 8th IEEE Workshop on Mo-
bile Computing Systems & Applications (HotMo-
bile 2007)". IEEE Computer Society Press, Febru-
ary 2007.
[9] David Grawrock. The Intel Safer Computing Ini-
tiative. Intel Press, January 2006.
[10] Hermann Härtig, Michael Hohmuth, Norman
Feske, Christian Helmuth, Adam Lackorzynski,
Frank Mehnert, and Michael Peter. The Nizza
secure-system architecture.
In Proceedings of
the 1st International Conference on Collaborative
Computing: Networking, Applications and Work-
sharing (CollaborateCom 2005), December 2005.
[20] John Marchesini, Sean W. Smith, Omen Wild, and
Rich MacDonald. Experimenting with tcpa/tcg
hardware, or: How i learned to stop worrying and
love the bear. Technical Report TR2003-476, Dart-
mouth College, Hanover, NH, December 2003.
[21] H. Maruyama, F. Seliger, N. Nagaratnam,
T. Ebringer, S. Munetoh, S. Yoshihama, and
T. Nakamura. Trusted Platform on Demand. Tech-
nical Report RT0564, IBM Corporation, February
2004.
[22] Multiboot
Speciﬁcation.
URL: http:
//www.gnu.org/software/grub/
manual/multiboot/multiboot.txt.
[23] Chris J. Mitchell, editor. Trusted Computing. IEE,
London, Nov 2005.
[11] John Heasman. Implementing and Detecting a PCI
Rootkit. November 2006.
[24] OSLO - Open Secure LOader. URL: http://
os.inf.tu-dresden.de/~kauer/oslo.
[12] John Heasman.
Implementing and Detecting an
ACPI Rootkit. In BlackHat Federal, January 2006.
[25] Siani Pearson, editor. Trusted Computing Plat-
forms. Prentice Hall International, Aug 2002.
[13] Christian Helmuth, Alexander Warg, and Norman
Feske. Mikro-SINA—Hands-on Experiences with
the Nizza Security Architecture. In Proceedings of
the D.A.CH Security 2005, Darmstadt, Germany,
March 2005.
[14] Intel Corporation. LaGrande technology prelim-
Intel Publication
inary architecture speciﬁcation.
no. D52212, May 2006.
[15] Intel Advanced Management Technology. URL:
http://www.intel.com/technology/
manage/iamt.
[16] Bernhard Kauer. Authenticated Booting for L4.
Study thesis, TU Dresden, November 2004.
[17] Kexec Article.
URL: http://lwn.net/
Articles/15468.
[18] Klaus Kursawe, Dries Schellekens, and Bart Pre-
neel. Analyzing trusted platform communication.
In ECRYPT Workshop, CRASH - CRyptographic
Advances in Secure Hardware, September 2005.
[19] Rich MacDonald, Sean W. Smith, John March-
esini, and Omen Wild. Bear: An Open-Source Vir-
tual Secure Coprocessor based on TCPA. Tech-
nical Report TR2003-471, Dartmouth College,
Hanover, NH, August 2003.
[26] Phoenix Technologies, TrustedCore. URL: http:
//www.phoenix.com/en/Products/
Core+System+Software/TrustedCore.
[27] Ahmad-Reza Sadeghi, Marcel Selhorst, Chris-
tian Stüble, Christian Wachsmann, and Marcel
Winandy. TCG Inside? - A Note on TPM Spec-
iﬁcation Compliance. In The First ACM Workshop
on Scalable Trusted Computing (STC’06), Novem-
ber 2006.
[28] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn.
Design and Implementation of a TCG-based In-
tegrity Measurement Architecture. In Proceedings
of the USENIX Security Symposium, August 2004.
[29] Reiner Sailer, Trent Jaeger, Enriquillo Valdez,
Ramón Cáceres, Ronald Perez, Stefan Berger,
John Linwood Grifﬁn, and Leendert van Doorn.
Building a MAC-Based Security Architecture for
the Xen Open-Source Hypervisor.
In ACSAC,
pages 276–285, 2005.
[30] Lenin Singaravelu, Calton Pu, Hermann Hartig,
and Christian Helmuth. Reducing tcb complex-
ity for security-sensitive applications: Three case
studies. In EuroSys 2006, April 2006.
[31] SYSLINUX Project.
//syslinux.zytor.com.
URL:
http:
236
16th USENIX Security Symposium
USENIX Association
[32] Richard Ta-Min, Lionel Litty, and David Lie.
Splitting Interfaces: Making Trust Between Appli-
cations and Operating Systems Conﬁgurable.
In
7th USENIX Symposium on Operating Systems De-
sign and Implementation (OSDI 2006), November
2006.
[33] TCG: Trusted Computing Group. URL: https:
//www.trustedcomputinggroup.org.
[34] TCG PC Client
Implementation Speciﬁca-
tion for Conventional BIOS. URL: https:
//www.trustedcomputinggroup.org/
specs/PCClient.
[35] TrustedGRUB. URL: http://www.prosec.
rub.de/trusted_grub.html.
[36] GRUB TCG Patch to support Trusted Boot. URL:
http://trousers.sourceforge.net/
grub.html.
[37] Wave’s Embassy Security Center. URL: http:
//www.wave.com/products/esc.html.
[38] [Xen-devel] Intel(R) LaGrande Technology sup-
URL: http://lists.xensource.
port.
com/archives/html/xense-devel/
2006-09/msg00047.html.
USENIX Association
16th USENIX Security Symposium
237