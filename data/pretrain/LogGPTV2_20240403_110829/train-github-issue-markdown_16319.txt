**I'm submitting a ...** (check one with "x")
    [ ] bug report => search github for a similar issue or PR before submitting
    [x] feature request
    [ ] support request => Please do not submit support request here, instead see https://github.com/angular/angular/blob/master/CONTRIBUTING.md#question
**Current behavior**
now schemas are not extendable, only hard-coded `CUSTOM_ELEMENT_SCHEMA` and
`NO_ERRORS_SCHEMA` available. if a user want to add new schema, they have to
modify
`DomElementSchemaRegistry.hasElement`,`DomElementSchemaRegistry.prototype.hasProperty`
or other compiler methods to do it. like this  
https://github.com/moecube/electron-schema/blob/master/index.ts
**Expected behavior**
angular/packages/compiler/src/schema/dom_element_schema_registry.ts
Line 287 in 5b141fb
|  if (schemaMetas.some((schema) => schema.name === NO_ERRORS_SCHEMA.name)) {  
---|---  
make
`DomElementSchemaRegistry.hasElement`,`DomElementSchemaRegistry.prototype.hasProperty`
and other compiler methods to read schemaMetas not only name, but also some
contents, for example, a `string[]` like SCHEMA defined in
angular/packages/compiler/src/schema/dom_element_schema_registry.ts
Line 79 in 5b141fb
|  const SCHEMA:  
---|---  
then user can just declare something like
    const ELECTRON_SCHEMA = ['webview^[HTMLElement]|src,...']
then put it in ngModule.schemas .
    @NgModule({
      // ...
      schemas: [ELECTRON_SCHEMA]
    })
    export class AppModule {
    }
for more clearly, it could be a interface rather than a string, like..
    interface SchemaData {
      tagName: string
      type: string
      attributes: string[]
      ... // other security-related fields
    }
for more dynamic use, it could also be a function-based interface, it can
combined with normal SchemaMetadata interface, for example:
    interface SchemaMeta {
      name: string
      hasElement?(tagName, schemaMetas): boolean
      hasProperty?(tagName, propName, schemaMetas): boolean
      ... // other security-related methods
    }
then `CUSTOM_ELEMENTS_SCHEMA` and `NO_ERROES_SCHEMA` could also be a normal
SchemaMeta, and don't need hard-code in compiler, like
    class NO_ERROES_SCHEMA implements SchemaMetadata {
      name: 'no-errors-schema'
      hasElement(tagName, schemaMetas) {return true}
      hasProperty(tagName, propName, schemaMetas) {return true}
    }