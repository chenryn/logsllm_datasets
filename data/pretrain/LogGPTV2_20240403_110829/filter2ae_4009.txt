# 漏洞分析：CVE-2016-5007 - Spring Security / MVC路径匹配不一致

## 译文声明
本文为翻译文章，原文来源：0c0c0f  
原文链接：[http://mp.weixin.qq.com/s?__biz=MzAwMzI0MTMwOQ==&mid=2650173852&idx=1&sn=6b4a6c36c456b5e475b5247451c6dd81&chksm=833cf5aeb44b7cb895e1f67f8f6680e1a22124ce5e9e38d8a5e5321099f40e8acc01ac9e3c85&mpshare=1&scene=1&srcid=1117PR1ptIybF6zqX4Ek2Teo#rd](http://mp.weixin.qq.com/s?__biz=MzAwMzI0MTMwOQ==&mid=2650173852&idx=1&sn=6b4a6c36c456b5e475b5247451c6dd81&chksm=833cf5aeb44b7cb895e1f67f8f6680e1a22124ce5e9e38d8a5e5321099f40e8acc01ac9e3c85&mpshare=1&scene=1&srcid=1117PR1ptIybF6zqX4Ek2Teo#rd)  
译文仅供参考，具体内容及含义请以原文为准。

## 概要
- **编辑**：Spring by Pivotal
- **产品名称**：Spring Web + Spring Security / Spring Boot
- **标题**：Spring Security / MVC路径匹配不一致
- **CVE ID**：CVE-2016-5007
- **Intrinsec ID**：ISEC-V2016-01
- **风险级别**：中
- **漏洞利用**：远程
- **影响**：请求授权绕过

## 描述
该漏洞影响使用`HttpSecurity.authorizeRequests`进行URL访问控制的Spring Web和Spring Security应用。以下是一个典型的配置示例：

```java
protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
        .antMatchers("/resources/**", "/signup", "/about").permitAll()
        .antMatchers("/admin/**").hasRole("ADMIN")
        .antMatchers("/db/**").access("hasRole('ADMIN') and hasRole('DBA')")
        .anyRequest().authenticated()
        .and()
        // ...
        .formLogin();
}
```

在这个例子中，用户"User"不是管理员，因此无法访问"/admin/"目录。然而，通过在URL中的"admin"前后附加空格（或其他空白字符），可以轻易绕过安全过滤器。例如：

- 附加空格（浏览器自动编码为"%20"）：
  ```
  %0D/admin/
  ```
- 前置空格：
  ```
  /%20admin/
  ```

问题在于，用于访问控制的第一个匹配器是严格的，"admin "被认为不同于"admin"。而用于查找控制器的第二个匹配器会删除每个URL令牌前后的空白字符，因此"admin "变为"admin"。这种严格性不匹配导致了这种情况：访问控制匹配器未能识别受保护的路径，从而应用默认的“允许”规则，而控制器查找器匹配器找到了受保护的控制器。

此漏洞的危害程度取决于在越权查看页面后查询数据时是否有校验当前用户的session。

## 受影响版本
- Spring Security 3.2.x, 4.0.x, 4.1.0
- Spring框架 3.2.x, 4.0.x, 4.1.x, 4.2.x
- 其他不受支持的版本也可能受到影响

## 解决方案
- 升级到Spring Security 4.1.1+ 和 Spring Framework 4.3.1+，并使用`MvcRequestMatcher`。
- 对于Spring Framework 3.2.x, 4.0.x, 4.1.x, 4.2.x的用户，可以通过MVC Java配置或MVC命名空间将`AntPathMatcher`的`trimTokens`属性设置为“false”。
- 此外，应用程序应始终使用Spring Security的一种机制（例如添加`@Secured`注解），在业务层进行额外的授权，以补充基于URL的授权。

## 测试案例
目标是基于拦截器的访问控制，但系统在拦截判断时采用完全匹配模式校验，因此可以轻易绕过：

- 阻止访问：
  ```
  http://xxx.com:8000/security/security!admin.action
  ```
- 绕过拦截：
  ```
  http://xxx.com:8000////security/security!admin.action
  ```

## 总结
这两个漏洞产生的原因在于规则检测前的数据处理工作。在`do_work(a)`时已经不知道`do_check(a)`的内容，只能保证输入`a`不变，能做事就做，否则反馈错误。此类问题在代码审计中应多加关注。

## 参考链接
[原文链接](http://mp.weixin.qq.com/s?__biz=MzAwMzI0MTMwOQ==&mid=2650173852&idx=1&sn=6b4a6c36c456b5e475b5247451c6dd81&chksm=833cf5aeb44b7cb895e1f67f8f6680e1a22124ce5e9e38d8a5e5321099f40e8acc01ac9e3c85&mpshare=1&scene=1&srcid=1117PR1ptIybF6zqX4Ek2Teo#rd)