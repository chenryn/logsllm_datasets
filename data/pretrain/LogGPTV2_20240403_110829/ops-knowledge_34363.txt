To obtain a list of programs, including their icons and names, as displayed in the Applications tab of Windows Task Manager, you will need to use specific Windows APIs. For this task, you can utilize the `EnumWindows` function to enumerate all top-level windows, and then use `GetWindowText` and `SendMessage` with the `WM_GETICON` message to retrieve the application icon. Additionally, you can use the `CreateToolhelp32Snapshot` and `Process32First`/`Process32Next` functions from the Toolhelp32 API to get more detailed information about the processes.

Here is a high-level overview of the steps:
1. Use `EnumWindows` to enumerate all top-level windows.
2. For each window, use `GetWindowText` to get the window title (which often corresponds to the application name).
3. Use `SendMessage` with the `WM_GETICON` message to retrieve the application icon.
4. Optionally, use the Toolhelp32 API to get additional process information.

For Ubuntu, you can achieve similar functionality using the `/proc` filesystem and some additional libraries. The `/proc` filesystem contains information about running processes, and you can read this information to get the process names. To get the application icons, you can use the `libappindicator` or `GtkIconTheme` libraries.

Here is a high-level overview of the steps for Ubuntu:
1. Read the `/proc` filesystem to get a list of running processes and their names.
2. Use `GtkIconTheme` or `libappindicator` to look up the icons associated with the applications.

### Example Code Snippets

#### Windows
```cpp
#include <windows.h>
#include <tlhelp32.h>
#include <psapi.h>
#include <tchar.h>

void EnumerateApplications() {
    EnumWindows([](HWND hwnd, LPARAM lParam) -> BOOL {
        TCHAR windowTitle[256];
        GetWindowText(hwnd, windowTitle, sizeof(windowTitle)/sizeof(TCHAR));
        if (_tcslen(windowTitle) > 0) {
            HICON hIcon = (HICON)SendMessage(hwnd, WM_GETICON, ICON_BIG, 0);
            if (hIcon) {
                // Process the icon and window title
                _tprintf(_T("Window Title: %s\n"), windowTitle);
                // You can now use hIcon for further processing
            }
        }
        return TRUE;
    }, 0);
}

int main() {
    EnumerateApplications();
    return 0;
}
```

#### Ubuntu
```c
#include <gtk/gtk.h>
#include <dirent.h>
#include <unistd.h>
#include <sys/types.h>

void EnumerateApplications() {
    DIR *dir;
    struct dirent *ent;
    GtkIconTheme *icon_theme;
    GError *error = NULL;

    dir = opendir("/proc");
    if (dir != NULL) {
        while ((ent = readdir(dir)) != NULL) {
            if (isdigit(ent->d_name[0])) {
                char path[256];
                snprintf(path, sizeof(path), "/proc/%s/cmdline", ent->d_name);
                FILE *cmdline = fopen(path, "r");
                if (cmdline) {
                    char cmdline_buffer[256];
                    fgets(cmdline_buffer, sizeof(cmdline_buffer), cmdline);
                    fclose(cmdline);

                    // Remove trailing null characters
                    cmdline_buffer[strcspn(cmdline_buffer, "\n")] = 0;

                    if (strlen(cmdline_buffer) > 0) {
                        // Look up the icon
                        icon_theme = gtk_icon_theme_get_default();
                        const gchar *icon_name = g_content_type_get_icon(g_content_type_guess(cmdline_buffer, NULL, 0, &error));
                        if (icon_name && !error) {
                            GdkPixbuf *pixbuf = gtk_icon_theme_load_icon(icon_theme, icon_name, 48, GTK_ICON_LOOKUP_FORCE_SVG, &error);
                            if (pixbuf && !error) {
                                // Process the pixbuf and cmdline_buffer
                                printf("Application: %s\n", cmdline_buffer);
                                // You can now use pixbuf for further processing
                                g_object_unref(pixbuf);
                            } else {
                                g_printerr("Failed to load icon: %s\n", error->message);
                                g_error_free(error);
                            }
                        }
                    }
                }
            }
        }
        closedir(dir);
    }
}

int main(int argc, char *argv[]) {
    gtk_init(&argc, &argv);
    EnumerateApplications();
    return 0;
}
```

These code snippets provide a starting point for enumerating applications and retrieving their icons on both Windows and Ubuntu. You may need to adapt them to fit your specific requirements and handle additional edge cases.