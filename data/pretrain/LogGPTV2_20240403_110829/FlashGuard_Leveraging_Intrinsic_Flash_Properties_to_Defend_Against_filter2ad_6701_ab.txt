### 文件类型统计

| 文件类型 | 数量 | 占比 (%) | 平均大小 (KB) | 总大小 (MB) | 大小占比 (%) |
|----------|------|----------|---------------|-------------|--------------|
| pdf      | 2378 | 24.08    | 565.27        | 1312.70     | 30.28        |
| html     | 2117 | 21.43    | 59.15         | 122.29      | 2.82         |
| jpg      | 1073 | 10.86    | 335.08        | 351.12      | 8.10         |
| doc      | 797  | 8.07     | 361.92        | 281.69      | 6.50         |
| txt      | 788  | 7.98     | 553.89        | 426.23      | 9.83         |
| xls      | 584  | 5.91     | 587.68        | 335.16      | 7.73         |
| ppt      | 501  | 5.07     | 2110.94       | 1032.80     | 23.82        |
| xml      | 353  | 3.57     | 132.59        | 45.71       | 1.10         |
| gif      | 349  | 3.53     | 81.64         | 27.83       | 0.64         |
| ps       | 208  | 2.11     | 764.85        | 155.36      | 3.58         |
| csv      | 188  | 1.90     | 202.77        | 37.23       | 0.86         |
| gz       | 128  | 1.30     | 628.64        | 78.58       | 1.81         |
| log      | 99   | 1.00     | 170.80        | 16.51       | 0.38         |
| unk      | 59   | 0.60     | 358.53        | 20.66       | 0.48         |
| eps      | 40   | 0.41     | 516.59        | 20.18       | 0.47         |
| png      | 39   | 0.39     | 312.85        | 11.92       | 0.27         |
| others   | 141  | 1.77     | 343.62        | 48.88       | 1.13         |
| **总计** | **9876** | **100**  | **-**         | **4334.67** | **100**      |

### 观察与分析

#### 观察 1
勒索软件通常会在短时间内迅速锁定数据，且加密的数据量相对较小。例如，CTB-Locker、JigSaw、Mobef 和 Petya 等家族的加密时间甚至少于 20 分钟。此外，一些勒索软件仅加密小文件或特定扩展名的文件。

**影响：**
勒索软件倾向于最小化被终止和捕获的风险，或者勒索软件作者希望快速收取赎金。

#### 观察 2
勒索软件变种会积极尝试删除受害者可能用来恢复攻击的所有手段。例如，Cerber 首先提升其权限，然后使用 WMIC 工具删除 Shadow Copies。

**影响：**
勒索软件可以获得内核权限以终止或破坏基于软件的防御系统，如显式数据备份。

### 系统架构

图 1 展示了使用 SSD 的系统架构。FlashGuard 的主要思想是在 SSD 固件的 Flash Translation Layer (FTL) 中实现。

### 威胁模型

本文重点研究针对加密勒索软件的防御，因此排除了非加密勒索软件造成的损害。假设加密勒索软件必须能够恢复用户数据，因为支付赎金后数据无法访问和恢复会显著影响勒索软件攻击的收益。我们只考虑持久存储上的数据被勒索软件覆盖或删除的情况。目标不仅包括用户级应用程序创建的文件（如 .docx 和 .zip），还包括文件系统所需的元数据文件（如 Master File Table）。

### 方法概述

在本节中，我们简要介绍了 SSD 的技术背景，并讨论了如何利用 SSD 的内在特性构建轻量级数据恢复系统以抵御加密勒索软件。

#### 4.1 SSD 技术背景

与传统的 HDD 一样，商品 SSD 采用块接口来封装闪存设备的特性（见图 1）。因此，它给上层软件系统（如文件系统）的印象是 SSD 和 HDD 以相同的方式执行存储操作。然而，在硬件层面，SSD 与 HDD 有根本的区别。HDD 在逻辑覆盖时会物理地覆盖磁盘上的数据（如图 2-a 所示），而 SSD 会将新数据写入预先擦除的空闲页（即 out-of-place 写），并稍后执行垃圾回收 (GC) 来清理旧数据。每个闪存块的耐久性有限，只能进行几千次擦除操作，因此均匀老化非常重要。SSD 通过 out-of-place 写和 GC 来克服这些缺点，并在 FTL 中维护虚拟到物理地址的映射。

#### 4.2 设计原理

为了索取赎金，勒索软件通常会用加密内容覆盖用户文件。如 § 4.1 所述，SSD 自然保留了被上层程序覆盖的数据的旧副本。因此，SSD 可以设计为一个恢复系统，保存可能被勒索软件篡改的数据。此外，SSD 在固件级别有一个间接层来管理数据。在此基础上构建恢复系统，可以自然地将其与操作系统隔离，使其抵抗恶意软件通常用于逃避反病毒检测的攻击。利用 SSD 的内在特性，还可以最小化恢复系统的代码空间。因此，SSD 自然减少了恢复系统的攻击面。

### 设计与实现

FlashGuard 包括两个主要组件：Ransomware-aware Flash Translation Layer (RFTL) 和数据恢复工具。RFTL 旨在保存可能被加密勒索软件覆盖的数据，而恢复工具则用于受害者在意识到勒索软件感染时抵消对其文件的损害。

#### 5.1 Ransomware-aware FTL

现代 SSD 的 FTL 维护四个数据结构（见图 3 中的 1、2、3、4）以支持实际中的 out-of-place 写和 GC 功能。对于每次 I/O 访问，地址映射表 1 会检查以将逻辑页地址 (LPA) 转换为物理页地址 (PPA)。为了性能原因，最近访问的映射表条目 1 存储在一个位于小而快的 SRAM 中的缓存（RFTL 中使用 LRU 策略）。如果映射条目未缓存，FTL 将检查全局映射目录 (GMD) 2 以定位相应的翻译页，并将映射条目放入地址映射缓存。

某些存储操作后，某些闪存块中的页可能变得无效。为了协助 GC 操作，FTL 通常使用块有效性表 (BVT) 3 来跟踪每个块中的有效页数，并确定该块是否应被垃圾收集。由于 BVT 以块级粒度索引，因此它很小，可以完全存储在 SRAM 中。一旦选择了一个块作为 GC 候选，页有效性表 (PVT) 4 将被访问以检查哪些页是有效的，并应移动到新的闪存块。PVT 可以是传统的页有效性位图 (PVB) 或最近优化的版本，后者使用日志结构合并树来减少每个物理块的位图索引的空间需求 [8]。在本文中，我们采用后一种设计以获得更好的性能。我们将通过示例（见 § 5.2 和 § 5.3）说明这些数据结构如何与 FlashGuard 中的其他组件协作。

为了增强 SSD 对抗勒索软件攻击的能力，一个直接的解决方案是保留所有无效页直到检测到勒索软件。这有两个主要原因不可行。首先，SSD 会迅速充满陈旧数据，使其无法使用并导致资源效率低下。其次，GC 操作将更频繁地执行以压缩和收集空闲块，从而显著影响存储性能。

因此，希望 SSD 只保留被加密勒索软件篡改的数据的旧副本。根据我们的研究（§ 2）和 CryptoDrop [44]，勒索软件加密的数据量通常小于 1GB。持有如此小的数据集对通常具有 TB 级存储容量的商品 SSD 影响甚微。然而，由于底层 FTL 没有任何关于接收到的存储命令的语义信息，因此追踪被加密勒索软件篡改的页具有挑战性。为此，我们提出了 Ransomware-aware FTL 来追踪可能导致勒索软件的无效页。RFTL 仅增加了一个额外的数据结构：读取跟踪表 (RTT) 5，对现有固件实现进行了最小修改。

我们基于以下见解提出 RTT：勒索软件通常从磁盘读取用户数据，对其进行加密，然后覆盖或删除原始副本 [19, 44]。因此，如果某个页已被读取并在稍后变得无效，它可能是被勒索软件加密的受害页。我们使用 RTT 5 来跟踪已读取的页，并利用 PVT 4 来检查其是否有效。RTT 和 PVT 提供了决定是否保留该页的提示。

### 垃圾回收在 RFTL 中

垃圾回收是 SSD 中的一个重要组件，通过压缩已使用的闪存块并确保所有闪存块均匀老化来提供未来的空闲块。它还在保留被勒索软件篡改的数据的旧副本方面发挥关键作用。当 GC 执行时，它首先选择候选块，将这些块中的有效页移动到新的空闲块，然后擦除这些候选块以备将来使用。

**核心思想：** 为了使 SSD 能够保存数据以进行恢复，我们在 RFTL 中提出了一种新的 GC 方案。具体而言，RFTL 检查 GC 候选块中的无效页是否已被读取。GC 将保留这些页。从未被读取的无效页将被丢弃/擦除。背后的直觉是勒索软件需要在执行加密之前从 SSD 读取数据，因此从未被读取的页不可能是被勒索软件损坏的数据的一部分。

我们描述了算法 1 中的新 GC 方案，并讨论其过程如下。

**GC 过程：** 当 SSD 中的空闲块数量低于阈值（商品 SSD 中所有闪存块的 10% - 40%）时，GC 将被触发以释放空间。现有的 GC 通常采用贪心算法来选择 GC 候选块。具体来说，它选择有效页数最少的块。此选择过程可以通过查找 BVT 3 快速完成，BVT 3 跟踪每个块的有效页数。

与当前的 GC 候选块选择方案不同，RFTL 将那些保留的无效页（RIP 设置为保留）视为有效页。因此，RFTL 选择有效页数和保留无效页数最少的块。这种 GC 方案意味着具有多个保留用于恢复的无效页的块可能会延迟其收集（见图 5），从而减少将保留无效页复制到新空闲块所引起的额外 GC 开销。

一旦选择了候选闪存块，RFTL 检查 PVT 4 并搜索该块中的有效页。由于通常采用懒惰策略来更新 PVT，PVT 中的信息可能已经过时。为了解决这个问题，RFTL 通过查看 OOB 元数据双重检查 PVT 指示的每个有效页。它从 OOB 元数据中检索 LPA，并通过地址映射表 1 查找相应的 PPA。如果检索到的 PPA 与该页的 PPA 相同，则 RFTL 认为其有效。

给定一个候选闪存块，RFTL 将其有效页迁移到新的空闲块，并擦除候选块以备将来使用。