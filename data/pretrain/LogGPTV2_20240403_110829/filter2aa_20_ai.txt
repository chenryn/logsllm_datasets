（b）必要时转换字符编码
（c）检验参数字符串的有效性
之所以检验字符编码的有效性是因为存在利用字符编码的攻击手段 4
 （参考第 6 章）。虽然理论上只要确保所有使用字符串的地方都能正确处理字符编码就不会有问题，但现实中由于编程语言的漏洞或者写代码时的疏忽，安全隐患却防不胜防。而另一方面，如果 Web 应用能够将字符编码不正确的数据拒之门外，就能抵御利用非法字符编码发动的攻击。
4
 此外，因为程序的正常运行也要求字符编码没有问题，所以检验字符编码有效性也是为了保证程序的正常运行。
（b）处理中的转换字符编码，指的是在 HTTP 消息与程序内部使用的字符编码不一致的情况下需要进行的处理。
（c）处理中的校验输入值，与其说是安全性方面的要求，不如说是依据应用软件规格执行的操作，但不管怎样，从结果上来看确实对提升应用的安全性起到了辅助作用。
下面让我们来分别看一下上述 3 点的详细内容。
检验字符编码
PHP 中能使用 mb_check_encoding
 函数检验字符编码。
格式清单 mb_check_encoding 函数
bool mb_check_encoding(string $var, string $encoding)
第一个参数 $var
 是检验对象字符串，第二个参数 $encoding
 是字符编码。$encoding
 可以省略，省略时函数使用 PHP 的内部字符编码。如果 $var
 字符串的字符编码正确则函数返回 true。
其他编程语言中检验字符编码的方法请参考第 6 章。
转换字符编码
转换字符编码的方法因编程语言而异。总体上可分为自动转换字符编码的语言和在脚本中手动转换字符编码的语言。PHP 中通过设置 php.ini 文件，可切换上述两种方式。
表 4-2 主流 Web 开发语言中提供的转换字符编码的方法
语言
自动转换
手动转换
PHP
php.ini 等
mb_convert_encoding
Perl
×
Encode::decode
Java
setCharacterEncoding
String 类
ASP.NET
Web.config
×
表 4-2 中归纳了主流 Web 开发语言中提供的转换字符编码的方法。接下来、让我们以手动转换字符编码的方式为例进行说明。
PHP 中使用 mb_convert_encoding
 函数来手动转换字符编码。
格式清单 mb_convert_encoding 函数
string mb_convert_encoding(string $str, string $to_encoding, string $from_encoding)
mb_convert_encoding
 函数的 3 个参数分别为：转换前的字符串、转换后的字符编码、转换前的字符编码。返回值为转换后的字符串。
检验并转换字符编码的实例
这里我们来看一个检验并转换字符编码的实例。以下 PHP 脚本表示的是接收 Shift_JIS 编码的文字列 name
 后将其显示在页面上。脚本的内部编码为 UTF-8，所以需要使用 mb_convert_encoding
 函数来转换文字编码。
代码清单 /42/42-001.php
名字为  
正常情况下执行结果如图 4-3 所示。
图 4-3 42-001.php 执行结果示例（正常情况）
下图为使用不符合 Shift_JIS 编码的字符串 %82%21 时的页面显示。由于 Shift_JIS 双字节的第二个字节必须是 0x40 以上的值，而 %20 不符合要求，所以是无效的 Shift_JIS 数据。相关详情可参考第 6 章。
图 4-4 输入值不符合 Shift_JIS 编码
专栏：字符编码的自动转换与安全性
前面提到 PHP 中能通过编辑 php.ini 使字符编码自动转换。其实，也有些编程语言，如 Java 与 .NET，主要使用自动转换字符编码。
转换字符编码时，不正确的字符会被删除或被替换为其他字符（?
 或者 Unicode 的替换字符 U+FFFD），因此，即便是自动转换字符，也能够防御利用字符编码的攻击手段。
虽然使用自动转换能让写代码的工程轻松不少，但也存在以下缺点。
用户没有注意到程序内部出现了文字乱码而继续操作
迁移服务器等导致 php.ini 文件被改变后，会有丢失校验操作的风险
因此，本书专门介绍了检验字符编码和手动转换字符编码的方法。
至于如何选择自动转换与手动转换，需要在了解两者各自的优缺点的前提下，在开发团队中达成统一认识，或者在进行各个项目时分别选择。
输入校验
处理完字符编码的相关操作后，就进入到了输入校验的阶段。下面，让我们首先了解一下 Web 应用中输入校验的概要，并在此基础上探讨输入校验与安全性的关系。
输入校验的目的
为了理解输入校验的目的，我们首先来看一下没有对输入值进行校验的 Web 应用的情况。如果 Web 应用没有对输入值进行校验的话，或许就会出现以下现象。
用户在只接受数值的项目中填入了字母或标点符号，导致保存至数据库时发生错误
更新处理时中途发生错误，导致数据库的不一致性
用户填写完很多项目后点击确认按钮时因发生了内部错误而不得不全部重新填写
程序在用户漏填邮箱地址的情况下依然执行发送邮件的处理
像这样，不校验输入值会导致应用程序内部业务逻辑在中途发生错误，以及乍一看似乎很正常，但相关操作在后台其实根本没有被处理，或者没有被处理完等问题。
而输入校验就是为了减少此类事故的发生。然而，输入校验说到底也只是对字符串的格式进行检查，格式以外的其他条件（如是否还有库存，账户余额是否充足等）则并不会得到检验。因此，输入校验并不能消灭所有的错误，但是通过尽早通知用户输入存在不妥并让其改正，可以使应用的易用性得到提高。
综上，输入校验的目的可以被总结如下。
尽早发现输入错误并提示用户重新输入，提高了易用性
防止错误处理造成数据不一致等，提高了系统的可靠性
输入校验与安全性
虽然输入校验的主要目的并不是安全性，但有时却也能对提高应用的安全性大有裨益。例如以下情况。
在有些参数忘了防范 SQL 注入攻击的情况下，因为输入检验时只允许字母和数字，所以就能避免损害
在 PHP 中使用了非二进制安全的函数（稍后讲述）的情况下，因为输入校验时过滤了控制字符，所以就能避免损害
在页面显示处理函数中对字符编码的指定有所疏忽时，因为输入校验时检验了字符编码的有效性，所以就能避免损害 5
二进制安全与空字节攻击
刚才出现了“二进制安全”这个用语。二进制安全是指，不管输入值是怎样的字节列都能将其原封不动地进行处理的功能，特别是当包含零值字节（NULL 字节，PHP 中记为 \0）时也能正确处理。
空字节之所以特殊，是因为在 C 语言以及 Unix 与 Windows 的 API 中规定空字节为字符串的结尾。因此，底层为 C 语言的 PHP 以及其他脚本语言中，有些函数不能正确处理空字节。而这类函数就被称为不是二进制安全的函数。
利用空字节的攻击手段被称为空字节攻击。空字节攻击本身并不造成伤害，而是通常被用于绕过其他安全隐患的防范策略。
以下为没有进行空字节攻击防范的范例脚本。42-002.php 使用正则表达式 ereg
 检验变量 $p
 的值中仅包含数字。
代码清单 /42/42-002.php
$p
 只包含数字的情况下，页面显示应该一切正常。接下来，我们来尝试用如下 URL 来执行 42-002.php。
http://example.jp/42/42-002.php?p=1%00
运行结果如图 4-5 所示。
图 4-5 绕过 ereg 检验的安全隐患
浏览器中执行了 JavaScript 代码，弹出“XSS”的对话框，这就是跨站脚本漏洞（XSS），具体内容将在 4.3 节中详述，但在此也可以看出使用 ereg
 的检验是能被绕过的。
ereg 检验被绕过的原因
ereg
 检验被绕过的原因是 URL 中含有 %00。%00 就是空字节，由于 ereg
 函数不是二进制安全的函数，因此，检验对象字符串中如果含有空字节，就会被视作字符串的结束（图 4-6）。
图 4-6 空字节攻击
由于 …
 以后的字符串被检验函数忽略，检验对象字符串变成了“1”，满足“仅限数字”的要求，因此便通过了检验。而 JavaScript 得以被执行的原因也就是如此。
前面已经说过，空字节攻击很少能独自造成损害，而是通常被用来在其他安全隐患防范策略的疏漏中见缝插针。而除了 XSS 外，常与空字节攻击组合使用的还有目录遍历攻击（参考 4.10.1 节）。
虽然在应用中全部使用二进制安全的函数就能完全防御空字节攻击，但实际实现起来却颇为困难。因为很多情况下函数的参考文档中都没有明确记载该函数是否二进制安全。因此，行之有效的策略为，在应用程序的入口处使用二进制安全的函数检验输入值中是否有空字节，如果含有空字节就报错。
仅校验输入值并不是安全性策略
至此，读者们或许会产生以下疑问：如果在输入阶段就将所有的非法输入值过滤掉，是不是就能确保应用的安全性了呢？而且在输入阶段就将安全隐患全部搞定的话，之后的工作也更轻松了呢。
但遗憾的是这并不可行。因为输入阶段实施的校验并不能成为安全隐患的防范策略。输入校验是根据应用程序的软件规格而实施的操作。例如，假设规格书中规定允许输入任何字符，那么，在输入阶段就无法进行任何安全性防范措施。
因此，输入校验的作用最多也就是为安全机制多加一层保障。
输入校验的依据是应用程序的规格
输入校验时的基准是应用程序的规格。例如电话号码应该全部是数字、用户 ID 应该是 8 位的字母或数字等，各参数允许的字符种类以及长度都应根据应用的要求规格进行设置。
校验控制字符
刚才已经提到输入校验的基准是应用程序的规格，但为了在应用的规格中规定“允许输入任何字符”的情况下也能够进行验证，就需要校验控制字符。
控制字符是指，换行符（CR 和 LF）和 Tab 等通常不显示在页面上的、ASCII 编码中 0x20 以下以及 0x7F（DELETE）的字符。前面讲到的空字节也是控制字符。由于 Web 应用中的输入参数多为文本格式，所以应当限制控制字符的输入，然而也有一些 Web 应用未对控制字符进行处理。
单行的文本输入框（input 要素的 type 属性值为 text 或 password）中，由于按常规的输入方法无法输入控制字符，因此多数情况下所有的控制字符都会遭到拒绝。textarea 元素中能够输入换行和 Tab，但是否允许 Tab 则要由规格决定。
校验字符数
应用程序的规格文档中应当明确定义所有输入项目的最大字符数。如果是要保存到数据库的值，最大字符数理应与表字段的最大字符数一致。而即使有些输入项目没有物理上的上限值限制，为了保证程序的正常运行，也同样需要确定最大字符数。
某些情况下，校验最大字符数能使应用的安全性更为稳固。由于攻击 Web 应用有时需要用到很长的字符串，因此，假设限制字符串的最大长度为 10 的话，那么就能使攻击者在发现 SQL 注入隐患时也无法实施攻击。虽然我们不能对校验字符数的效果抱有过多期待，但也应该认识到校验字符数的必要性以及其对安全性的帮助。
哪些参数需要校验
输入校验的对象为所有的参数。hidden 参数、单选框、select 元素等也不例外。Cookie 中包含会话 ID 以外的值的情况下，Cookie 值也是校验对象。此外，应用中用到了 Referer 等 HTTP 消息头时也需要进行校验。
PHP 的正则表达式库
利用正则表达式能够便利地实现输入校验。PHP 中可以利用的正则表达函数有 ereg
 、preg
 、mb_ereg3
 大类。其中，ereg
 由于不是二进制安全的，因此在 PHP5.3 及以后的版本中已被废弃，而改用了 preg
 或 mb_ereg
 。preg