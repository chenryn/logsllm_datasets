# Optimized Text

## Trace Analysis
| #instr | % | Code (byte) | Data (byte) | Trace (#instr) |
|--------|---|-------------|-------------|----------------|
| 473    | 0% | 3880        | 635         | 6960           |
| 676    | 79% | 4592        | 1150        | 17336          |
| 2412   | 347% | 7112        | 1326        | 8000           |
| 1049   | 106% | 6944        | 1293        | 3728           |
| 425    | 0% | 3728        | 245         | 4952           |
| 580    | 33% | 3904        | 424         | 6368           |
| 708    | 71% | 5328        | 391         | 4664           |
| 524    | 25% | 6688        | 385         | -              |

### Low Optimization
- **No Fault Tolerance**
  - C
  - AspectC++Ext
  - AspectC++Opt

### High Optimization
- **No Fault Tolerance**
  - C
  - AspectC++Ext
  - AspectC++Opt

### Redundancy Implementation
Redundancy implementation, although it has slightly higher time overhead, both types of memory consumption are still lower.

## Overhead Analysis
| #instr | % | Code (byte) | Data (byte) | Trace (#instr) |
|--------|---|-------------|-------------|----------------|
| 473    | 0% | 3880        | 635         | 6960           |
| 676    | 317% | 4592        | 1150        | 17336          |
| 2412   | 1051% | 7112        | 1326        | 8000           |
| 1049   | 440% | 6944        | 1293        | 3728           |
| 425    | 0% | 3728        | 245         | 4952           |
| 580    | 285% | 3904        | 424         | 6368           |
| 708    | 777% | 5328        | 391         | 4664           |
| 524    | 297% | 6688        | 385         | -              |

### High Optimization
- **No Fault Tolerance**
  - C
  - AspectC++Ext
  - AspectC++Opt

This analysis suggests that AspectC++Opt would cause less overhead than C for the pure control flow checking mechanism when using a high level of optimization. As seen in Table X, this is indeed the case. However, AspectC++Ext also causes less time overhead than C. This was not observed in earlier studies because the low overhead for this mechanism was masked by the very large overhead for the time redundancy mechanism. The differences in overhead for the two mechanisms are due to the type of advice used during their implementation. The DS-CFC mechanism can be written with before- and after-advice, which, when combined with compiler optimization, produce very effective code for both versions of AspectC++. In contrast, the time redundancy mechanism requires around-advice, which causes significant overhead with AspectC++Ext.

Another notable point from Table X is that C and AspectC++Opt give negative dynamic memory overhead with high-level compiler optimization. This is because the fault-tolerant variants have lower stack usage compared to the implementation without fault tolerance.

## Table X: Overhead for the DS-CFC Mechanism
### Low Optimization
- **No Fault Tolerance**
  - C
  - AspectC++Ext
  - AspectC++Opt

### High Optimization
- **No Fault Tolerance**
  - C
  - AspectC++Ext
  - AspectC++Opt

| Metric       | C      | AspectC++Ext | AspectC++Opt |
|--------------|--------|--------------|--------------|
| Code (byte)  | 3880   | 4592         | 7112         |
| Data (byte)  | 635    | 1150         | 1326         |
| Trace (#instr)| 473    | 520          | 686          |

## Related Work
Apart from our earlier work, few publications exist on using aspect-oriented languages for fault tolerance. Most related is the work by Afonso et al. [17], who evaluate the performance impact of using AspectC++ for implementing fault tolerance. They apply thread-level recovery blocks to a target application. Hameed et al. [18] use AOP for software fault tolerance, while Fabry [19] defines custom-built AOP languages for a transparent reusable distributed replication framework. Herrero et al. [20] define an AOP language specifically for writing object replication policies. In [21], AOP is used to move some functionality from the FT-CORBA middleware to the application while retaining transparency. However, none of these studies include fault injection experiments for evaluating the techniques.

## Conclusion
We presented an experimental study where the fault coverage of two software-based fault tolerance mechanisms was estimated by fault injection. The goals were to evaluate the fault coverage provided by the mechanisms, investigate the impact of compiler optimization on fault coverage, and assess the feasibility of using aspect-oriented programming for implementing software-based fault tolerance.

Both mechanisms achieved substantial improvements in fault coverage compared to no software mechanisms. The DS-CFC mechanism varied between 88% and 95%, while the TTR-FR mechanism achieved 93% to 96%. Compiler optimization significantly reduced the fault coverage of hardware exceptions, but this was largely compensated by higher fault coverage for software mechanisms or a higher proportion of errors with no effect.

The optimized programs using DS-CFC and TTR-FR showed a small reduction in fault coverage, but they are smaller and have a lower exposure to faults. Thus, we cannot conclude that compiler optimizations will lead to lower system reliability.

Regarding the feasibility of using aspect-oriented programming for fault tolerance, the difference in fault coverage between C and AspectC++ programs is small, with a slight advantage for AspectC++ programs. AspectC++Opt programs generally have much lower time overhead than those produced with AspectC++Ext, and the differences in time overhead for C and AspectC++Opt programs are small with compiler optimizations.

In summary, we found no major disadvantages of using aspect-oriented programming for implementing software-based fault tolerance. Future work will extend the study to more application programs, additional fault tolerance mechanisms, and other fault models.

## Acknowledgements
We thank Daniel Skarin and Raul Barbosa for designing and implementing the GOOFI-2 tool, and Volvo Technology and Martin Sanfridson for providing the brake-by-wire application. This research was conducted within the CEDES project, funded by IVSS – Intelligent Vehicle Safety Systems.

## References
[1] Borkar, S.: Designing reliable systems from unreliable components: The challenges of transistor variability and degradation. IEEE Micro, vol.25, no.6, pp. 10-16, Nov.-Dec., 2005.
[2] Reick, K., Sanda, P.N., Swaney, S., Kellington, J.W., Mack, M.J., Floyd, M.S., Henderson, D.: Fault-Tolerant Design of the IBM Power6 Microprocessor. IEEE Micro, vol.28, no.2, pp.30-38, March-April, 2008.
[3] Oh, N., Shirvani, P., McCluskey, E. J.: Control-Flow Checking by Software Signatures, Center for Reliable Computing, Stanford Univ., CA, CRC-TR-00-4 (CSL TR num 00-800), 2000.
[4] Aidemark, J., Vinter, J., Folkesson, P., Karlsson, J.: Experimental evaluation of a brake-by-wire time-redundant execution application. International Conference on Dependable Systems and Networks (DSN 2002), 2002.
[5] Andrews, D.: Using Executable Assertions for Testing and Fault Tolerance. Proc. 9th Int'l Symposium on Fault-Tolerant Computing, pp. 102-105, June, 1979.
[6] Huang, K.-H., Abraham, J.A.: Algorithm-based fault tolerance for matrix operations. IEEE Trans. Computers, 1984.
[7] Wappler, U., Fetzer, C.: Software encoded processing: Building dependable systems with commodity hardware. In The 26th International Conference on Computer Safety, Reliability and Security (SafeComp 2007), 2007.
[8] Benso, A., Chiusano, S., Prinetto, P., Tagliaferro, L.: A C/C++ Source-to-Source Compiler for Dependable Applications. International Conference on Dependable Systems and Networks (DSN 2000), June, 2000.
[9] Li, A. and Hong, B., “Software implemented transient fault detection in space computer”, Aerospace Science and Technology, 11 (2-3): 245-252, 2007.
[10] Elrad, T., Filman, R.E., Bader, A.: Aspect-oriented programming: introduction. Communications of the ACM, 44(10) (2001) 29-32.
[11] Alexandersson, R., Öhman, P.: Implementing Fault Tolerance Using Aspect-Oriented Programming. In proceedings of the 3rd Latin-American Symposium on Dependable Computing (LADC 2007), Morelia, Mexico, 2007.
[12] Spinczyk, O., Gal, A., Schröder-Preikschat, W.: AspectC++: An Aspect-Oriented Extension to C++. In: 40th International Conference on Technology of Object-Oriented Languages and Systems (TOOLS Pacific 2002), Sydney, Australia, pp. 18-21, 2002.
[13] Alexandersson, R., Öhman, P.: On Hardware Resource Consumption for Aspect-Oriented Implementation of Fault Tolerance. In: 8th European Dependable Computing Conference, Valencia, Spain, April 28-30, 2010.
[14] Skarin, D., Barbosa, R., Karlsson, J., “GOOFI-2: A tool for experimental dependability assessment,” in Proceedings of the 40th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN 2010), Jun./Jul., 2010.
[15] Barbosa, R., Vinter, J., Folkesson, P., Karlsson, J.,”Assembly-level pre-injection analysis for improving fault injection efficiency,” in Proc. Fifth European Dependable Computing Conference, Budapest, Hungary, 2005.
[16] Skarin, D., Karlsson, J., “Software Implemented Detection and Recovery of Soft Errors in a Brake by Wire System,” in Seventh European Dependable Computing Conference (EDCC-7), pp. 145-154, 2008.
[17] Afonso, F., Silva, C., Brito, N., Montenegro, S., Tavares, A.: Aspect-Oriented Fault Tolerance for Real-Time Embedded Systems. In: ACP4IS '08: 7th workshop on Aspects, components, and patterns for infrastructure software, 2008.
[18] Hameed, K., Williams, R., Smith. J.: Aspect Oriented Software Fault Tolerance. Proceedings of the World Congress on Engineering 2009 Vol I WCE 2009, London, U.K., July 1 - 3, 2009.
[19] Fabry, J.: A Framework for Replication of Objects using Aspect-Oriented Programming. Phd Thesis, University of Brussel, 1998.
[20] Herrero, J.L., Sanchez, F., Toro, M.: Fault tolerance as an aspect using JReplica. In Proceedings of the Eighth IEEE Workshop on Future trends of Distributed Computing Systems, pp. 201-207, 31 Oct.-2 Nov, 2001.
[21] Szentivanyi, D., Nadjm-Tehrani, S.: Aspects for improvement of performance in fault-tolerant software. In Proceedings of the 10th IEEE Pacific Rim International Symposium on Dependable Computing, pp. 283-291, 3-5 March, 2004.