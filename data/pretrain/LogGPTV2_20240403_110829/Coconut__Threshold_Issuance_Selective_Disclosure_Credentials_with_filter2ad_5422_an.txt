−1
(cid:48)
(cid:48)
(cid:48)
b) Correctness and explanation: The Setup algorithm
generates the public parameters. Credentials are elements of
G1, while veriﬁcation keys are elements of G2. Figure 2
illustrates the protocol exchanges.
To keep an attribute m ∈ Fp hidden from the author-
the users run PrepareBlindSign to produce Λ =
ities,
1 ),
(γ, cm, c, πs). They create an El-Gamal keypair (d, γ = gd
pick a random o ∈ Fp, and compute a commitment cm =
1. Then, the users compute h = H(cm) and the encryption
1 ho
gm
of hm as below:
c = Enc(hm) = (a, b) = (gk
1 , γkhm),
where k ∈ Fp. Finally, the users send (Λ, φ) to the signer,
where πs is a zero-knowledge proof ensuring that m sat-
isﬁes the application-speciﬁc predicate φ, and correctness
of γ, cm, c (). All the zero-knowledge proofs required by
Coconut are based on standard sigma protocols to show
knowledge of representation of discrete logarithms; they are
based on the DH assumption [17] and do not require any
trusted setup.
To blindly sign the attribute, each authority i veriﬁes the
proof πs, and uses the homomorphic properties of El-Gamal
to generate an encryption ˜c of hxi+yi·m as below:
, γkyihxi+yi·m)
˜c = (ay, hxibyi) = (gkyi
1
Note that every authority must operate on the same element
h. Intuitively, generating h from h = H(cm) is equivalent to
computing h = g ˜r