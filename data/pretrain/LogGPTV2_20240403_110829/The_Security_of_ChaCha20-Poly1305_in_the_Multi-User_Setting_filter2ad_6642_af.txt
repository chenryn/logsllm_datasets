queries such that:
length of
key
the
be
𝑘
Adv
muAE
ChaCha20-Poly1305[𝜋](A) ≥ 𝑝𝑑
2𝑘+2 .
The previous attack can be adapted to verification queries instead
of encryption queries, yielding the following variant.
Proposition 7.3. Let
the
ChaCha20-Poly1305 AEAD scheme. There exists an adversary A,
that makes one permutation query and 𝑞𝑣 ≤ 2𝑘 verification queries
such that:
length of
key
the
be
𝑘
Adv
muAE
ChaCha20-Poly1305[𝜋](A) ≥ 𝑞𝑣
2𝑘+1 .
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1990Key collision attack. The key recovery attacks above can be modi-
fied to obtain key collision attacks. Instead of using permutation
queries, these rely on encryption queries to detect key collisions
between users. While this does not allow key recovery, it suffices
to distinguish between the real and ideal games.
This modification applied to the attack from Proposition 7.2 gives
us the attack in Proposition 7.4, which can also be seen as an adap-
tation of the key collision attack of [10] for a 𝑑-repeating adversary.
We note that, although stated here as an attack against ChaCha20-
Poly1305, it extends to a generic attack against any deterministic
AE scheme with positive ciphertext expansion in the multi-user
setting, similar to the one of [10].
Proposition 7.4. Let
the
be
ChaCha20-Poly1305 AEAD scheme. There exists a 𝑑-repeating ad-
versary A, that makes 2 ≤ 𝑞𝑒 ≤ 2𝑘+1
𝑑−1 encryption queries such that:
length of
key
the
𝑘
muAE
ChaCha20-Poly1305[𝜋](A) ≥ 𝑞𝑒(𝑑 − 1)
2𝑘+3
.
Adv
Block collision attack. Finally, the following attacks distinguish the
output of the ChaCha20 block function from the output of a random
function due to block collisions. By construction, the ChaCha20
block function outputs can have collisions for different inputs, but
there cannot be collisions among the outputs of the ChaCha20
permutation. The first attack is a direct application of the idea that,
for a single user, we can detect collisions by canceling the feed
forward and looking at the difference between two values 𝐶𝑖 ⊕ 𝑀𝑖.
In the second attack, we exploit the encryption queries of multiple
users, looking only at the non-key parts of 𝐶𝑖 ⊕ 𝑀𝑖. This gives
us access to a truncated part of the ChaCha20 permutation and
reduces to the problem of distinguishing a truncated permutation
from a random function.
Proposition 7.5. Let 𝑛, 𝑘 be the block and key length of the
ChaCha20-Poly1305 AEAD scheme. There exists an adversary A
that encrypt at most 𝐵 blocks per user for a total number of 𝜎𝑒 ≤ 2𝑛+1
𝐵−1
encrypted blocks across all users such that:
Proposition 7.6. Let 𝑛, 𝑘 be the block and key length of the
ChaCha20-Poly1305[𝜋] AEAD scheme, where the underlying
ChaCha20 permutation 𝜋 is modeled as an ideal random permu-
tation. There exists an adversary A encrypting a total number of
𝜎𝑒 ≤ min(cid:16)2 𝑛−𝑘
2
.
muAE
ChaCha20-Poly1305[𝜋](A) ≥ 𝜎𝑒(𝐵 − 1)
2𝑛+2
, 2𝑛−𝑘−1(cid:17)
ChaCha20-Poly1305[𝜋](A) ≥ 𝜎𝑒(𝜎𝑒 − 1)
2𝑛+2
blocks such that:
muAE
.
Adv
Adv
Matching the bound. The presented attacks closely match the
most significant and some further terms in the bound of Theo-
rem 6.1:
Proposition 7.1: first term, ≈ 𝑞𝑣·𝑐·ℓ𝑚2𝑡
Proposition 7.2: first half of second term, ≈ 𝑝𝑑
2𝑘 ,
2𝑘 , up to a factor of 2(𝑛 − 𝑘).
Proposition 7.4: second half of second term, ≈ 𝑞𝑒𝑑
2𝑘 .
Proposition 7.3: fourth term, ≈ 𝑞𝑣
Proposition 7.6: fifth term, ≈ 𝜎2
2𝑘 , up to a factor of 2(𝑛 − 𝑘 + 4𝑡).
𝑒2𝑛 , up to a factor of 4.
and third term ≈ 𝑝
.
7.2 Nonce randomization
The record protocols of TLS 1.3 [29], DTLS 1.3 [30] and QUIC [31]
use a nonce-randomization technique to counter large-scale multi-
user attacks. Analyzing this technique for the GCM mode, Bellare
and Tackmann [4] provided the first multi-user treatment. Hoang,
Tessaro, and Thiruvengadam [15] captured the nonce-randomization
mechanism as a generic transform XN, which we recall in Fig-
ure 6. The XN transform turns an AEAD scheme 𝛱 into a nonce-
randomized scheme 𝛱∗, and [15] showed that a generic adversary
against the multi-user security of 𝛱∗ can be reduced to the secu-
rity of 𝛱 against a strongly 𝑑-repeating adversary via an adaptive
balls-into-bins argument.
We reuse our Lemma A.1 to obtain a generalization of [15,
Lemma 4.1 and Theorem 4.2]; their version emerges from our The-
orem 7.7, when setting 𝛿 = 1/2. The proof of the following theorem
can be found in Appendix D.
Theorem 7.7 (Multi-user security of the XN transform).
Let 𝛱[𝜋] = (K, E, D) be a nonce-based AEAD scheme with nonce
length 𝑏 defined on top an ideal permutation 𝜋, and let 𝛱∗[𝜋] =
XN(𝛱[𝜋]) for the XN transform defined in Figure 6. Let A be a nonce-
respecting adversary against 𝛱∗ making at most 𝑞𝑒 Enc queries and
𝑞𝑣 Vf queries. Then, for some fixed 𝛿 > 0, we can construct an
adversary B of the same concrete query complexity as A which is
• 𝑑-repeating for 𝑑 =
• strongly 𝑑-repeating for 𝑑 =
2𝑏 · (𝛿+1)·𝑏
(cid:109) − 1, if 𝑞𝑒 ≤ 2𝑏 · (𝛿+1)·𝑏
(cid:109)−1, if 𝑞𝑒 +𝑞𝑣 ≤
max(1,𝑏−log2(𝑞𝑒+𝑞𝑣))
max(1,𝑏−log2(𝑞𝑒))
(𝛿+1)·𝑏
(𝛿+1)·𝑏
(cid:108)
(cid:108)
3
3
such that
Adv
𝛱∗[𝜋](A) ≤ Adv
muAE
muAE
𝛱 [𝜋] (B) + 1
2𝛿𝑏
.
Note that both 𝑑 and 𝑑 are less or equal to (𝛿 + 1) · 𝑏, even for
a number of queries above 2𝑏, improving over [15] even when
𝛿 = 1/2.
We can combine Theorem 7.7 with our multi-user AE security
result for ChaCha20-Poly1305 in Theorem 6.1 to obtain the follow-
ing bound for the nonce-randomized usage of ChaCha20-Poly1305
(where 𝑛 = 512, 𝑘 = 256, 𝑡 = 128, and 𝑏 = 96), against an adversary
that is not necessarily 𝑑-repeating. We emphasize that to obtain
this result, we only need to use Theorem 7.7 with a reduction ad-
versary B that is 𝑑-repeating and not strongly 𝑑-repeating, as this
assumption is enough to use Theorem 6.1.
Theorem 7.8 (Multi-user security of nonce-randomized
ChaCha20-Poly1305). Let ChaCha20-Poly1305[𝜋] be the AEAD
scheme described in Figure 3 having parameters 𝑛, 𝑘, 𝑡, 𝑐, 𝑏 and its
underlying permutation 𝜋 modelled as a random permutation. Let A
be an adversary against the multi-user AE security of XN(ChaCha20-
Poly1305[𝜋]) making at most 𝑝 ideal permutation queries, 𝑞𝑒 encryp-
tion queries totaling at most 𝜎𝑒 encrypted blocks, and 𝑞𝑣 verification
queries. Further, let ℓ𝑚 denote the maximum size in 𝑡-bit blocks (in-
cluding associated data) that A is allowed to query to its encryption
Session 6D: Authentication and Privacy CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1991procedure K∗()
1 : 𝐾 ←$ K
2 :
3 :
𝐽 ←$ {0, 1}𝑟
return 𝐾 ∥𝐽
procedure E∗(𝐾∥𝐽, 𝑁 , 𝐴𝐷, 𝑀)
1 : 𝑁 ∗ ← 𝑁 ⊕ 𝐽
2 : 𝐶 ← E(𝐾, 𝑁 ∗, 𝐴𝐷, 𝑀)
3 :
return 𝐶
procedure D∗(𝐾∥𝐽, 𝑁 , 𝐴𝐷, 𝐶
1 : 𝑁 ∗ ← 𝑁 ⊕ 𝐽
2 : 𝑀 ← D(𝐾, 𝑁 ∗, 𝐴𝐷, 𝐶)
3 :
return 𝑀
Figure 6: The XN transform of an AEAD scheme 𝛱 = (K, E, D) into a nonce-randomized AEAD scheme 𝛱∗ = (K∗, E∗, D∗).
and verification oracles. Then:
2𝑡
2𝑘
muAE
Adv
+2𝑝 · (𝑛 − 𝑘)
XN(ChaCha20-Poly1305[𝜋])(A) ≤ 𝑞𝑣(𝑐ℓ𝑚 + 3)
+ 2𝑞𝑣 · (𝑛 − 𝑘 + 4𝑡)
2𝑘
+ 1
22𝑡−2 +
+ 𝑑(𝑝 + 𝑞𝑒)
+ (𝜎𝑒 + 𝑞𝑒)2
2𝑛+1
2𝑛−𝑘−2 + 1
1
𝑏 · 22𝑡−1.
· 2𝑛−𝑘(cid:17)
where 𝑑 =
In the above we further require that: 𝑛 − 𝑘 ≤ 2𝑘−2, 𝜎𝑒 ≤ 𝑛−𝑘
6
𝑞𝑒 ≤ 2𝑏 · (𝛿+1)·𝑏
, 𝑞𝑣 ≤ 2𝑛−2, 𝑝 ≤ min(cid:16) 2𝑡−1
(cid:109) − 1, for any 0 < 𝛿 ≤ 𝑡
max(1,𝑏−log2(𝑞𝑒))
· 22𝑡 , 𝑛−𝑘−1
6
(cid:108)
3
,
2𝛿𝑏
· 2𝑛−𝑘,
.
2𝑘
(𝛿+1)·𝑏
6
Note that as long as 𝛿 ≤ 𝑡
𝑏 · 22𝑡−1, the restriction on 𝑑 from
Theorem 7.7 is satisfied. We will next discuss and interpret the above
bound for nonce-randomized ChaCha20-Poly1305. In particular, we
will see how to pick 𝛿 such that the term 1
2𝛿𝑏 induced through nonce
randomization does not dominate the overall bound.
7.3 Interpreting the Bounds
The dominant term. A closer look at Theorems 6.1 and 7.7 tells us
that the most significant term in our bounds for practical scenarios
is likely to be 𝑞𝑣·𝑐·ℓ𝑚2𝑡
. This is mainly due to the fact that for current
ChaCha20-Poly1305 parameters, the block size is large (𝑛 = 512)
and the key size 𝑘 = 256 of ChaCha20 is twice as big as the tag size
𝑡 = 128 of Poly1305, where the latter is effectively further reduced
by the factor 𝑐 = 3 · 224 due to the clamping of 22 bits in the hash
key 𝑟 (cf. Definition 3.1 and Theorem 3.4). Hence, for the ChaCha20
-Poly1305 parameters, this term in practical scenarios dominates
the second-most significant term: 𝑞𝑣·𝑐·ℓ𝑚2𝑡
, as long as the