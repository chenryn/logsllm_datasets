全国嵌入式人才培训基地
: %d\nmsg: %s\n", p->number, p->msg);
起始页
一级
而一定要用两层指针的函数接口？
，实现者的责任是完成分配内存和
，传出的指针指向静态内存
4.返回值是指针的情况
下一页
在
---
## Page 437
以下是一个完整的例子。
4.返回值是指针的情况 请点评
于这两种情况的函数接口相同，应该在文档中说明是哪一种情况。
也分为两种情况：第一种是传出指向静态内存或已分配的动态内存的指针，
返回值显然是传出的而不是传入的，如果返回值传出的是指针，
上一页
例 24.5.返回指向已分配内存的指针
表 24.5.返回指向已分配内存的指针示例：unit_t*func(void);
2．将返回值保存下来以备后用
1．调用函数
char *get_a_day(int idx)
extern char *get_a_day(int idx);
这种情况通常还要实现-
"Tuesday"
static const char *msg[] = {"Sunday",
#endif
#define 
#ifndef
/* ret _ptr.h.
return buf;
static char buf[20];
调用者
"Wednesday"
*
第二种是在函数中动态分配内存并传出指向这块内存的指针，例
msg[idx]);
4.返回值是指针的情况
一个释放内存的函数,
全国嵌入式人才培训基地
第24 章函数接口
'"Thursday",
2．返回一个指针
规定返回值指针的类型unit_t 
"Friday", "Saturday"};
实现者
"Monday"
所以有和malloc(3)对应的free(3）。由
，和上一节通过参数传出指针类似
例
下一
贝
---
## Page 438
以下是一个完整的例子。
这个程序的运行结果是sunday Monday吗？请读者自己分析一下。
例 24.6.动态分配内存并返回指针
表 24.6.动态分配内存并返回指针示例：unit_t*alloc_unit(void); void
free_unit(unit_t *p);
3．调用free_unit释放内存
2．将返回值保存下来以备后
1．调用alloc_unit分配内存
用
unit_t *alloc_unit(void)
#include 
#include 
#endif
extern
extern unit_t *alloc_unit(void)
typedef struct {
#include
#define
#ifndef
int main(void)
#include
#include 
 unit_t; 
/* main.c */
*
ret allocator.h
(( Tun)yoazTs)otteu = d tun
int number;
调用者
return 0;
printf("%s %s\n", get_a_day(0), get_a_day(1));
RET
"ret_allocator.h"
*msg;
 2．alloc_unit分配内存并返回指向该内存的指
1．规定返回值指针的类型unit_t *
针
实现者
438
---
## Page 439
3.两层指针的参数
为什么？
思考一下，
 通过参数分配内存需要两层的指针，
(dx 24Tun)Tun aaxJ pToA
int main(void)
free_unit(p);
printf("number: %d\nmsg: %s\n", p->number, p->msg);
()Tun ooTte = dx Tun 
free(p);
free(p->msg);
strcpy(p->msg,
：NULL;
exit(1);
 printf(
*/
"out of memory\n");
全国嵌入式人才培训基地
起始页
上一级
，而通过返回值分配内存就只需要返回一层的指针，
5.回调函数
3
下一页
---
## Page 440
以下是一个简单的例子。实现了一个repeat_three_times函数，可以把调用者传来的任何回调函数
回调函数（Callback Function）。例如qsort(3)和bsearch(3）。
如果参数是一个函数指针，调用者可以传递一个函数的地址给实现者，让实现者去调用它，这称为
5.回调函数 请点评
连续执行三次。
二
例24.7.回调函数
表 24.7.回调函数示例：void func(void（*f)(void *），void *p);
2．把回调函数传给参数f，把
1．提供一个回调函数，
按void*类型传给参数p
准备传给回调函数的参数
一个准备传给回调函数的参
void repeat_three_times(callback_t f, void *para)
#include 
#endif
extern void repeat_three_times(caiiback_t, void *);
"!(+ ptoa)(a yoeqtteo*） pro4 yapad
#define PARA_CALLBACK_H
#ifndef
*
 para_callback.h.
f(para);
调用者
"para_callback.h"
CALLBACK
再提供
全国嵌入式人才培训基地
第24 章函数接口
H
5.回调函数
 1．在适当的时候根据调用者传来的函数指
交给回调函数，即调用f(p)；
针f调用回调函数，
实现者
，将调用者传来的参数p转
下一页
---
## Page 441
不知道怎样去比较两个对象的大小，调用者需要提供一
数可以在任意一组对象中找出最大值，
回调函数的一个典型应用就是实现类似C++的泛型算法（Generics Algorithm）
的回调函数中就应该知道参数要转换成char*型来解释。
数，而不关心它到底指向什么数据类型。调用者知道自己传的参数是char*型的，那么在自已提供
释由调用者规定，
回顾一下前面几节的例子，
例 24.8.泛型算法
void *max(void *data[l, int num, cmp_t cmp)
#include 
/* generics.c */
#endif
extern void
typedef int (*cmp_t)(void *!
#define
int main(void)
(wnu pTo4)siaqunu 4unoo pToA
void say_hello(void *str)
#include 
#include 
/* main.c */
 对于实现者来说就是-
putchar('
 printf("Hello %s\n",(const char *)str);
return temp;
for(i=1;
void 
int ,i;.
return 0;
repeat
for(i=l; 
int i;
if(cmp(temp; 
"generics.h"
，参数类型都是由实现者规定的。而本例中回调函数的参数按什么类型解
printf(
"para_callback.h"
 *max(void *data[], int num, cmp_t cmp);
iscore);
&list[3]};
int main(void)
>score)
>score)
(q* pToA 'ex pTo4)4uapn4s duo zuT
typedef struct 
#include
#include 
/* main.c */
 student_t;
 return 0;
-(q(+ uapnzs)) 
/* registry.c */
一个插入排序的函数和一个折半查找的函数。
func();
 func = f;
"registry.h"
，返回值同样也可以是函数指针，
全国嵌入式人才培训基地
，可以对一组任意类型的对象做快速排序。请读者仿照那
起始页
上一级
6.可变参数
下一页
返
---
## Page 444
在stdarg.h头文件中。这些宏是如何取出可变参数的呢？我们首先对照反汇编分析在调
要处理可变参数,
以后还会见到更多这样的函数。现在我们实现一个简单的myprintf函数:
到目前为止我们只见过一个带有可变参数的函数printf:
6.可变参数请点评
例 24.9.用可变参数实现简单的printf函数
int printf(const char *format, ...);
through 
void myprintf(const 
int main(void)
，需要用C到标准库的va_list类型和va_start、va_arg、va_end宏，
va_end(ap);
char c;
default:
case 
case
putchar(c);
char
's':
char ch = va_arg(ap, int);
 char is promoted to int when passed
*format++)
format）;
全国嵌入式人才培训基地
第 24 章函数接口
'1',
6.可变参数
"hello");
，这些定义
444
---
## Page 445
存中是连续存放的，
这些参数是从右向左依次压栈的，
用myprintf函数时这些参数的内存布局。
占4个字节。
例 24.10.stdarg.h的一种实现
esp
esp+4
esp+8
图 24.6.myprintf函数的参数布局
80484dc:
8
8
80484cc:
30484d5:
30484d4:
30484cd:
。现在给出-
0x80485b0
80485b6
#endif
#define
#define
#define va_arg(ap;,
#define
0x31
#define
/*
stdarg.h.
 macros
 每个参数都对齐到4字节边界。第一个和第三个参数都是指针类型，
(void)((ap)
 char
va
va
_STDARG
end(ap)
e8
C
co
Bnd(x, bnd)
standard header */ 
7
0
c\ts\nlo
hello\o
43
4424 04 31 0000
，所以第一个参数靠近栈顶，
（(ap)
(void)0
ff 
人
ff
十=
"hello");
_Bnd(T， 3U)）－_Bnd(T，3U)))
，这个实现出自[Standard C Library]:
x
call
movl
movl
，第三个参数靠近栈底。
$0x31,0x4(%esp)
$0x80485b0,0x8(%esp)
bnd+1
。这些参数在内
各占4个字
---
## Page 446
还有一种方法可以确定可变参数的个数，就是在参数列表的末尾传一个Sentinel，
正确，
者的责任，
Promotion"讲过Default Argument Promotion规则，传递char型的可变参数时要提升为int型。
个传入的字符串。
因此要求char型的可变参数必须按int型来取，
何作用，
如_Bnd(char，3U)的值是4，
这个头文件中的内部宏定义
来，
 实现者是没有办法避免错误的。
例24.11.根据Sentinel判断可变参数的个数