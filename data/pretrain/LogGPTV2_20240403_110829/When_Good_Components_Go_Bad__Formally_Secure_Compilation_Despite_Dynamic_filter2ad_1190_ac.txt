Abate et al.
something useful under the assumption that the attacker has not
actually discovered how to compromise C1 or C2.
Properties S1, S2, W1, W2 are all safety properties [54]—inspired,
in this case, by the sorts of “correspondence assertions” used to
specify authenticity in security protocols [33, 86]. A trace property
is a safety property if, within any (possibly infinite) trace that
violates the property, there exists a finite “bad prefix” that violates
it. For instance here is a bad prefix for S2 that includes a call to
E.write() with no preceding call to C0.valid(data):
[ C0 . main ( ) ; C2 . init ( ) ; Ret ; E . read ; Ret ( x ) ; C1 . parse ( x ) ;
Ret ( y ) ; C2 . process ( y ) ; Ret ( data ) ; E . write (  ) ]
The program from Figure 2 cannot produce traces with this bad pre-
fix, but it could do so if we removed the validity check in C0.main();
this variant would invalidate safety property S2.
Compiler correctness is often phrased in terms of preserving
trace properties in general [58] (and thus safety properties as a
special case). However, this is often predicated on the assumption
that the source program has no undefined behavior; if it does, all se-
curity guarantees are lost, globally. By contrast, we want our secure
compilation criterion to still apply even when some components
are dynamically compromised by encountering undefined behavior.
In particular, we want to ensure that dynamically compromised
components are not able to break the safety properties of the system
at the target level any more than equally privileged components
without undefined behavior already could in the source.
We call our criterion Robustly Safe Compartmentalizing Compila-
tion (RSCC). It is phrased in terms of a “security game,” illustrated
in Figure 3 for our running example. With an RSCC compilation
chain, given any execution of the compiled and linked components
C0↓, C1↓ and, C2↓ producing trace t in the target language, we can
explain any (intuitively bad) finite prefix m of t (written m ≤ t) in
terms of the source language. As soon as any component of the
program has an undefined behavior though, the semantics of the
source language can no longer directly help us. Similar to Comp-
Cert [58], we model undefined behavior in our source language as
a special event Undef(Ci) that terminates the trace. For instance, in
step 0 of Figure 3, component C1 is the first to encounter undefined
behavior after producing a prefix m1 of m.
Since undefined behavior can manifest as arbitrary target-level
behavior, the further actions of component C1 can no longer be
explained in terms of its source code. So how can we explain the
rest of m in the source language? Our solution in RSCC is to require
that one can replace C1, the component that encountered undefined
behavior, with some other source component A1 that has the same
interface and can produce its part of the whole m in the source
language without itself encountering undefined behavior. In order
to replace component C1 with A1 we have to go back in time and
re-execute the program from the beginning obtaining a longer trace,
in this case m2·Undef(C2) (where we write “·” for appending the
event Undef(C2) to m2). We iterate this process until all components
that encountered undefined behavior have been replaced with new
source components that do not encounter undefined behavior and
produce the whole m. In the example dynamic compromise scenario
from Figure 3, this means replacing C1 with A1 and C2 with A2, after
which the program can produce the whole prefix m in the source.
The trace prefixes m, m1, m2 might, for instance, be:
m = [ C0 . main ( ) ; C2 . init ( ) ; Ret ; E . read ; Ret ( x ) ; C1 . parse ( x ) ;
Ret ( y ) ; C2 . process ( y ) ; Ret ( d ) ;
C0 . valid ( d ) ; Ret ( true ) ; E . write (  ) ]
m1 = [ C0 . main ( ) ; C2 . init ( ) ; Ret ; E . read ; Ret ( x ) ; C1 . parse ( x ) ]
m2 = [ C0 . main ( ) ; C2 . init ( ) ; Ret ; E . read ; Ret ( x ) ; C1 . parse ( x ) ;
Ret ( y ) ; C2 . process ( y ) ]
Figure 3: The RSCC dynamic compromise game for our ex-
ample. We start with all components being uncompromised
(in green) and incrementally replace any component that en-
counters undefined behavior with an arbitrary component
(in red) that has the same interface and will do its part of
the trace prefix m without causing undefined behavior.
Let’s now use this RSCC security game to deduce that in our
example from Figure 2, even compromising both C1 and C2 does
not break property S2 at the target level. Assume, for the sake of a
contradiction, that a trace of our compiled program breaks property
S2. Then there exists a finite prefix “m · E.write()” such
that C0.valid(data) does not appear in m. Using RSCC we obtain
that there exists some dynamic compromise scenario explaining m
in the source. The simplest case is when no components are com-
promised. The most interesting case is when this scenario involves
the compromise of both C1 and C2 as in Figure 3. In this case, re-
placing C1 and C2 with arbitrary A1 and A2 with the same interfaces
allows us to reproduce the whole bad prefix m in the source (step 2
from Figure 3). We can now reason in the source, either informally
or using a program logic for robust safety [75], that this cannot
happen, since the source code of C0 does call C0.valid(data) and
only if it gets true back does it call E.write().
5
I0I1I2C0C1C2∀mfinite prefix of t(m≤t)∃a dynamic compromise scenario explaining min sourcefor instance ∃[A1,A2] leading to compromise sequence:↓↓↓⇝tI0I1I2C0C1C2⇝*m1·Undef(C1)↯(0)(1)I0I1I2C0A1C2⇝*m2·Undef(C2)↯(2)I0I1I2C0A1A2⇝*   m≤ ≤ Suppose running compiled components C0↓, C1↓, C2↓with interfaces I0, I1, I2yields trace t:Then:When Good Components Go Bad
Abate et al.
While in this special case we have only used the last step in
the dynamic compromise sequence, where all compromised com-
ponents have already been replaced (step 2 from Figure 3), the
previous steps are also useful in general for reasoning about the
code our original components execute before they get compromised.
For instance, this kind of reasoning is crucial for showing property
W2 for the original example from Figure 1. Property W2 gives up on
the validity of the written data only if C2 receives a y that exploits
C2.handle(y) (vulnerability V3). However, as discussed above, a
compromised C1 could, in theory, try to compromise C2 by calling
C2.process without proper initialization (exploiting vulnerability
V2). Showing that this cannot actually happen requires using step
0 of the game from Figure 3, which gives us that the original com-
piled program obtained by linking C0↓, C1↓ and, C2↓ can produce
the trace m1 · Undef(C1), for some prefix m1 of the bad trace prefix
in which C2.process is called without calling C2.init first. But it
is easy to check that the straight-line code of the C1.main() proce-
dure can only cause undefined behavior after it has called C2.init,
contradicting the existence of a bad trace exploiting V2.
3 FORMALLY DEFINING RSCC
For pedagogical purposes, we define RSCC in stages, incrementally
adapting the existing notion of Robustly Safe Compilation (RSC)
introduced by Abate et al. [7] (and reviewed in §3.1). We first bring
RSC to unsafe languages with undefined behavior (§3.2), and then
further extend its protection to any set of mutually distrustful com-
ponents (§3.3). These ideas lead to the more elaborate RSCC property
(§3.4), which directly captures the informal dynamic compromise
game from §2. These definitions are generic, and will be illustrated
with a concrete instance in §4. Finally, we describe an effective and
general proof technique for RSCC (§3.5).
3.1 RSC: Robustly Safe Compilation
RSC [7] is a recent criterion for secure compilation that captures the
preservation of all robust safety properties—i.e., safety properties
that hold in the presence of arbitrary adversarial contexts [33, 53,
75]. A trace property (i.e., a set of potentially infinite traces built
over events like I/O with the environment [58]) is a safety prop-
erty [54] if any trace violating it has a finite “bad prefix” that already
violates it. We focus on robust safety since it captures many im-
portant program properties (e.g., robust partial correctness), while
allowing for a simple secure-compilation proof technique (§3.5).
RSC is a property of a whole compilation chain: the source lan-
guage and its trace-based big-step operational semantics (we write
P⇝t to mean that the complete program P can produce trace t),
plus its compiler (P↓), source and target linking (where CS[P] de-
notes linking a partial program P with context CS to obtain a whole
source program, and CT [PT ] does the same in the target), and target-
level semantics (PT ⇝t) including for instance the target machine,
loader, and deployed protection mechanisms.
Definition 3.1. A compilation chain provides RSC iff
. CS[P]⇝t
∀P CT t . CT [P↓]⇝t ⇒ ∀m≤t . ∃CS t
That is, RSC holds for a compilation chain if, for any partial
source program P and any target context CT , where CT linked with
the compilation of P can produce a trace t in the target (CT [P↓]⇝t),
′ ∧ m≤t
′
′
.
6
and for any finite prefix m of trace t (written m ≤ t), we can
construct a source-level context CS that can produce prefix m in
the source language when linked with P (i.e., CS[P]⇝t′ for some t′
so that m ≤ t′). Intuitively, if we think of the contexts as adversarial
and m as a bad behavior, RSC says that any finite attack m that a
target context CT can mount against P↓ can already be mounted
against P by some source context CS . So proving RSC requires that
we be able to back-translate each finite prefix m of CT [P↓] into
a source context CS that performs m together with the original
program P. Conversely, any safety property that holds of P when
linked with an arbitrary source context will still hold for P↓ when
linked with an arbitrary target context [7].
As in CompCert, we assume that the traces are exactly the same
in the source and target languages. We anticipate no trouble relax-
ing this to an arbitrary relation between source and target traces.
3.2 RSCDC: Dynamic Compromise
The RSC criterion above is about protecting a partial program
written in a safe source language against adversarial target-level
contexts. We now adapt the idea behind RSC to an unsafe source
language with undefined behavior, in which the protected partial
program itself can become compromised. As explained in §2, we
model undefined behavior as a special Undef event terminating
the trace: whatever happens afterwards at the target level can no
longer be explained in terms of the code of the source program.
We further assume that each undefined behavior in the source lan-
guage can be attributed to the part of the program that causes it by
labeling the Undef event with “blame the program” (P) or “blame
the context” (C) (while in §3.3 we will blame the precise component
encountering undefined behavior).
Definition 3.2. A compilation chain provides Robustly Safe Compi-
lation with Dynamic Compromise (RSCDC) iff
∀P CT t . CT [P↓]⇝t ⇒ ∀m≤t . ∃CS t
′≺Pm).
. CS[P]⇝t
Roughly, this definition relaxes RSC by forgoing protection for
the partial program P after it encounters undefined behavior. More
precisely, instead of always requiring that the trace t′ produced by
CS[P] contain the entire prefix m (i.e., m≤t′), we also allow t′ to be
itself a prefix of m followed by an undefined behavior in P, which
we write as t′≺Pm (i.e., t′≺Pm ≜ ∃m′≤m. t′=(m′ · Undef(P))). In
particular, the context CS is guaranteed to be free of undefined
behavior before the whole prefix m is produced or P encounters
undefined behavior. However, nothing prevents CS from passing
values to P that try to trick P into causing undefined behavior.
To illustrate, consider the partial program P defined below.
′∧(m≤t
′∨t
′
program P {
import E . write ; export foo ;
foo ( x )
{
y := P . process ( x ) ;
E . write ( y ) ;
context CS {
import E . read , P . foo ;
main ( )
{
x := E . read ( ) ;
P . foo ( x ) ;
}
/ /
process ( x )
{
. . .
}
can e n c o u n t e r Undef
f o r
some x
}
}
}
Suppose we compile P with a compilation chain that satisfies RSCDC,
link the result with a target context CT obtaining CT [P↓], execute
this and observe the following finite trace prefix:
m = [ E . read ( ) ; Ret ( " feedbeef " ) ; P . foo ( " feedbeef " ) ; E . write ( " bad " ) ]
When Good Components Go Bad
Abate et al.
According to RSCDC there exists a source-level context CS (for
instance the one above) that explains the prefix m in terms of the
source language in one of two ways: either CS[P] can do the entire
m in the source, or CS[P] encounters an undefined behavior in P
after a prefix of m, for instance the following one:
t′ = [ E . read ( ) ; Ret ( " feedbeef " ) ; P . foo ( " feedbeef " ) ; Undef ( P ) ]
As in CompCert [58, 70], we treat undefined behaviors as ob-
servable events at the end of the execution trace, allowing compiler
optimizations that move an undefined behavior to an earlier point
in the execution, but not past any other observable event. While
some other C compilers would need to be adapted to respect this
discipline [70], limiting the temporal scope of undefined behavior
is a necessary prerequisite for achieving security against dynamic
compromise. Moreover, if trace events are coarse enough (e.g., sys-
tem calls and cross-component calls) we expect this restriction to
have a negligible performance impact in practice.
One of the top-level CompCert theorems does, in fact, already
capture dynamic compromise in a similar way to RSCDC. Using our
notations this CompCert theorem looks as follows:
∀P t . (P↓)⇝t ⇒ ∃t′. P⇝t′ ∧ (t′=t ∨ t′≺t)
This says that if a compiled whole program P↓ can produce a trace
t with respect to the target semantics, then in the source P can
produce either the same trace or a prefix of t followed by unde-
fined behavior. In particular this theorem does provide guarantees
to undefined programs up to the point at which they encounter
undefined behavior. The key difference compared to our secure
compilation chains is that CompCert does not restrict undefined
behavior spatially: in CompCert undefined behavior breaks all secu-
rity guarantees of the whole program, while in our work we restrict
undefined behavior to the component that causes it. This should
become clearer in the next section, where we explicitly introduce
components, but even in RSCDC we can already imagine P↓ as a set
of uncompromised components for trace prefix m, and CT as a set
of already compromised ones.
MD: Mutually Distrustful Components
A smaller difference with respect to the CompCert theorem
is that (like RSC) RSCDC only looks at finite prefixes in order to
simplify the difficult proof step of context back-translation, which
is not a concern that appears in CompCert and the usual verified
compilers. Appendix A precisely characterizes the subclass of safety
properties that is preserved by RSCDC even in adversarial contexts.
3.3 RSCDC
RSCDC gives a model of dynamic compromise for secure compi-
lation, but is still phrased in terms of protecting a trusted partial
program from an untrusted context. We now adapt this model to
protect any set of mutually distrustful components with clearly spec-
ified privileges from an untrusted context. Following Juglaret et
al.’s work in the full abstraction setting [45], we start by taking both
partial programs and contexts to be sets of components; linking a
program with a context is then just set union. We compile sets of
components by separately compiling each component. Each com-
ponent is assigned a well-defined interface that precisely captures
its privilege; components can only interact as specified by their in-
terfaces. Most importantly, context back-translation respects these
interfaces: each component of the target context is mapped back to a
source component with exactly the same interface. As Juglaret et al.
argue, least-privilege design crucially relies on the fact that, when