C
Yj=1
T (mij )aj mod N ,
and accepts if T = gM mod N and the skip list proof veriﬁes.
The Challenge procedure can also be made more efﬁcient by
using the ideas in [2]. First, instead of sending random values aj
separately, the client can simply send a random key to a pseudo-
random function that will generate those values. Second, a key to
a pseudo-random permutation can be sent to select the indices of
the challenged blocks 1 ≤ ij ≤ n (j = 1, . . . , C). The deﬁnitions
of these pseudo-random families can be put into the public key.
See [2] for more details on this challenge procedure. We can now
outline our main result (for the proof of security see Section 5):
THEOREM 1. Assume the existence of a collision-resistant
hash function and that the factoring assumption holds. The dy-
namic provable data possession scheme presented in this section
(DPDP I) has the following properties, where n is the current num-
ber of blocks of the ﬁle, f is the fraction of tampered blocks, and
C = O(1) is the number of blocks challenged in a query:
1. The scheme is secure according to Deﬁnition 2;
2. The probability of detecting a tampered block is 1−(1−f )C;
3. The expected update time is O(log n) at both the server and
the client whp;
4. The expected query time at the server, the expected veriﬁca-
tion time at the client and the expected communication com-
plexity are each O(log n) whp;
5. The client space is O(1) and the expected server space is
O(n) whp.
Note that the above results hold in expectation and with high prob-
ability due to the properties of skip lists [26].
5. SECURITY
In this section we, prove the security of our DPDP scheme.
While our proof refers speciﬁcally to the DPDP I scheme, it also ap-
plies to the DPDP II scheme discussed in the next section. Indeed,
LEMMA 2. Assuming the existence of a collision-resistant hash
function, the proofs generated using our rank-based authenticated
skip list guarantees the integrity of its leaves T (mi) with non-
negligible probability.
THEOREM 2
(SECURITY OF CORE DPDP PROTOCOL).
The DPDP protocol without
tags is secure in the standard
model according to Deﬁnition 2 and assuming the existence of a
collision-resistant hash function.
Proof:
(Sketch) Assume that the adversary wins the data pos-
session game in Deﬁnition 2. Then, the challenger can either
extract the challenged blocks (if the blocks have not been tampered
with) or ﬁnd a collision for the hash function (if the blocks have
been tampered with). The challenger achieves this by means
of two sub-entities: An extractor who extracts the challenged
blocks from the adversary’s proof, and a reductor who breaks
the collision-resistance if the extractor fails to extract the original
blocks since the reductor has access to the original blocks. 2
Next, we analyze our improved DPDP construction that uses
tags. In this case, we need also the following standard assumption:
DEFINITION 4
(FACTORING ASSUMPTION). For all PPT ad-
versaries A and large-enough number N = pq which is a product
of two primes p and q, the probability that A can output p or q
given N is negligible in the size of p and q.
THEOREM 3
(SECURITY OF DPDP PROTOCOL WITH TAGS).
The DPDP protocol with tags is secure in the standard model
according to Deﬁnition 2, assuming the existence of a collision-
resistant hash function and that the factoring assumption holds.
Proof: (Sketch) Assume that the adversary wins the data posses-
sion game in Deﬁnition 2. Then, by using similar arguments as
in Theorem 2, we can show that the challenger can either extract
the challenged blocks, or break the collision-resistance of the hash
function used, or break the factoring assumption. 2
For the full proofs of the above results, please refer to the ex-
tended version of the paper [9].
Concerning the probability of detection, the client probes C
blocks by calling the Challenge procedure. Clearly, if the server
tampers with a block other than those probed, the server will not
be caught. Assume now that the server tampers with t blocks. If
the total number of blocks is n, the probability that at least one of
the probed blocks matches at least one of the tampered blocks is
1 − ((n − t)/n)C, since choosing C of n − t non-tampered blocks
has probability ((n − t)/n)C.
6. RANK-BASED RSA TREES
We now describe how we can use ideas from [25] to implement
the DPDP II scheme (see Table 1), which has a higher probability
of detection, maintains logarithmic communication complexity but
has increased update time.
In [25], a dynamic authenticated data structure called RSA tree is
presented that achieves constant expected query time (i.e., time to
construct the proof), constant proof size, and O(nǫ log n) expected
219amortized update time, for a given 0 < ǫ < 1. We can add rank
information to the RSA tree by explicitly storing ranks at the in-
ternal nodes. Using this data structure allows the server to answer
O(log n) challenges with O(log n) communication cost since the
proof for a block tag has O(1) size.
The reason for sending additional challenges is the fact that the
probability p of detection increases with number C of challenges,
since p = 1 − (1 − f )C, where f is the fraction of tampered
blocks. Therefore, by using an RSA tree with ranks to implement
DPDP, we obtain the same complexity measures as DPDP I, except
for the update time, which increases from O(log n) to O(nǫ log n)
(expected amortized), and achieve an improved probability of de-
tection equal to 1 − (1 − f )Ω(log n).
Using the above provably secure authenticated data structure
based on [25] to secure the tags (where security is based on the
strong RSA assumption), we obtain the following result:
THEOREM 4. Assume the strong RSA assumption and the fac-
toring assumption hold. The dynamic provable data possession
scheme presented in this section (DPDP II) has the following prop-
erties, where n is the current number of blocks of the ﬁle, f is the
fraction of tampered blocks, and ǫ is a given constant such that
0 < ǫ < 1:
1. The scheme is secure according to Deﬁnition 2;
2. The probability of detecting a tampered block is
1 − (1 − f )Ω(log n);
3. The update time is O(nǫ log n) (expected amortized) at the
server and O(1) (expected) at the client;
4. The expected query time at the server, the expected veriﬁ-
cation time at the client and the worst-case communication
complexity are each O(log n);
5. The client space is O(1) and the server space is O(n).
Note that sending O(log n) challenges in [2, 3] or DPDP I would
increase the communication complexity from O(1) to O(log n)
and from O(log n) to O(log2 n), respectively.
7. EXTENSIONS AND APPLICATIONS
Our DPDP scheme supports a variety of distributed data out-
sourcing applications where the data is subject to dynamic updates.
In this section, we describe extensions of our basic scheme that
employ additional layers of rank-based authenticated dictionaries
to store hierarchical, application-speciﬁc metadata for use in net-
worked storage and version control.
7.1 Variable-sized blocks
We now show how we can augment our hashing scheme to sup-
port variable-sized blocks (e.g., when we want to update a byte of
a certain block). Recall that our ranking scheme assigns each in-
ternal node u a rank r(u) equivalent to the number of bottom-level
nodes (data blocks) reachable from the subtree rooted at u; these
nodes (blocks) are conventionally assigned a rank equal to 1. We
support variable-sized blocks by deﬁning the rank of a node at the
bottom level to be the size of its associated block (i.e., in bytes).
Each internal node, in turn, is assigned a rank equivalent to the
amount of bytes reachable from it. Queries and proofs proceed the
same as before, except that ranks and intervals associated with the
search path refer to byte offsets, not block indices, with updates
phrased as, e.g., “insert m bytes at byte offset i”. Such an update
would require changing only the block containing the data at byte
index i. Similarly, modiﬁcations and deletions affect only those
blocks spanned by the range of bytes speciﬁed in the update.
7.2 Directory hierarchies
We can also extend our DPDP scheme for use in storage systems
consisting of multiple ﬁles within a directory hierarchy. The key
idea is to place the start node of each ﬁle’s rank-based authenti-
cated structure (from our single-ﬁle scheme) at the bottom node of
a parent dictionary used to map ﬁle names to ﬁles. Using key-based
authenticated dictionaries [24], we can chain our proofs and update
operations through the entire directory hierarchy, where each di-
rectory is represented as an authenticated dictionary storing its ﬁles
and subdirectories. Thus, we can use these authenticated dictionar-
ies in a nested manner, with the start node of the topmost dictionary
representing the root of the ﬁle system.
This extension provides added ﬂexibility for multi-user environ-
ments. Consider a system administrator who employs an untrusted
storage provider. The administrator can keep the authenticated
structure’s metadata corresponding to the topmost directory, and
use it to periodically check the integrity of the whole ﬁle system.
Each user can keep the label of the start node of the dictionary cor-
responding to her home directory, and use it to independently check
the integrity of her home ﬁle system at any time, without need for
cooperation from the administrator.
Since the start node of the authenticated structure of the directory
hierarchy is the bottom-level node of another authenticated struc-
ture at a higher level in the hierarchy, upper levels of the hierarchy
must be updated with each update to the lower levels. Still, the
proof complexity stays relatively low: For example, for the rank-
based authenticated skip list case, if n is the maximum number of
leaves in each skip list and the depth of the directory structure is d,
then proofs on the whole ﬁle system have expected O(d log n) size
and computation time whp.
7.3 Version control
We can build on our extensions further to efﬁciently support a
versioning system (e.g., a CVS repository, or versioning ﬁlesys-
tem). Such a system can be supported by adding another additional
layer of key-based authenticated dictionaries [24], keyed by revi-
sion number, between the dictionaries for each ﬁle’s directory and
its data, chaining proofs as in previous extensions. As before, the
client needs only to store the topmost basis; thus we can support
a versioning system for a single ﬁle with only O(1) storage at the
client and O(log n + log v) proof complexity, where v is the num-
ber of the ﬁle versions. For a versioning system spanning multiple
directories, let v be the number of versions and d be the depth of
the directory hierarchy. The proof complexity for the versioning
ﬁle system has expected size O(d(log n + log v)).
The server may implement its method of block storage indepen-
dently from the dictionary structures used to authenticate data; it
does not need to physically duplicate each block of data that ap-
pears in each new version. However, as described, this extension
requires the addition of a new rank-based dictionary represent-
ing ﬁle data for each new revision added (since this dictionary is
placed at the leaf of each ﬁle’s version dictionary). In order to be
more space-efﬁcient, we could use persistent authenticated dictio-
naries [1] along with our rank mechanism. These structures handle
updates by adding some new nodes along the update path, while
preserving old internal nodes corresponding to previous versions
of the structure, thus avoiding unneeded replication of nodes.
8. PERFORMANCE EVALUATION
We evaluate the performance of our DPDP I scheme (Sec-
tion 4.2) in terms of communication and computational overhead,
in order to determine the price of dynamism over static PDP. For
ease of comparison, our evaluation uses the same scenario as in
220PDP [2], where a server wishes to prove possession of a 1GB ﬁle.
As observed in [2], detecting a 1% fraction of incorrect data with
99% conﬁdence requires challenging a constant number of 460
blocks; we use the same number of challenges for comparison.
1250
1000
750
500
250
600
400
200
0
2
)
)
B
B
K
K
(
(
e
e
z
z
i
i
s
s
f
f
o
o
o
o
r
r
P
P
)
)
s
s
m
m
(
(
f
f
o
o
o
o
r
r
p
p
r
r
e
e
v
v
r
r
e
e
s
s
e
e
t
t
u
u
p