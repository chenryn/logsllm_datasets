work is about 100 ExaHash/s, i.e. solving 1021 puzzles per second.
Nevertheless, we believe our results can be extended to the discrete
setting.
We first explain the model in the specific context of Nakamoto’s
Proof-of-Work longest chain protocol, and then generalize it to a
unified model for all three classes of protocols we study in this
paper.
2.1 Modeling proof-of-work longest chain
The blockchain is run on a network of n honest nodes and a set
of malicious nodes. Each honest node mines blocks, adds them to
the tip of the longest chain in its current view of the blocktree and
broadcasts the blocks to other nodes. Malicious nodes also mine
blocks, but they can be mined elsewhere on the blocktree, and they
can also be made public at arbitrary times. Due to the memoryless
nature of the puzzle solving and the fact that many attempts are
tried per second, we model the block mining processes as Poisson
with rates proportional to the hashing power of the miner.
Because of network delay, different nodes may have different
views of the blockchain. Like the ∆-synchronous model in [PSS17],
we assume there is a bounded communication delay ∆ seconds
between the n honest nodes. We assume malicious nodes have zero
communication delay among each other, and they can always act
in collusion, which in aggregate is referred as the adversary. Also
the adversary can delay the delivery of all broadcast blocks by up
to ∆ time. Hence, the adversary has the ability to have one message
delivered to honest nodes at different times, all of which has to be
within ∆ time of each other.
More formally, the evolution of the blockchain can be modeled
as a process {(T(t), C(t), T (p)(t), C(p)(t)) : t ≥ 0, 1 ≤ p ≤ n}, n
being the number of honest miners, where:
• T(t) is a tree, and is interpreted as the mother tree consisting
of all the blocks that are mined by both the adversary and
the honest nodes up until time t, including blocks that are
kept in private by the adversary and including blocks that
are mined by the honest nodes but not yet heard by other
honest nodes in the network.
• T (p)(t) is an induced (public) sub-tree of the mother tree
T(t) in the view of the p-th honest node at time t. It is
the collection of all the blocks that are mined by node p or
received from other nodes up to time t.
• C(p)(t) is a longest chain in the tree T (p)(t), and is inter-
preted as the longest chain in the local view of the p-th
honest node on which it is mining at time t. Let L(p)(t) de-
note the depth, i.e the number of blocks in C(p)(t) at time
t.
• C(t) is the common prefix of all the local chains C(p)(t) for
1 ≤ p ≤ n.
The process evolution is as follows.
• M0: T(0) = T (p)(0) = C(p)(0), 1 ≤ p ≤ n is a single root
block, the genesis block.
• M1: Adversary blocks are mined following a Poisson process
at rate λa. When a block is mined by the adversary, the
mother tree T(t) is updated. The adversary can choose which
block in T(t) to be the parent of the adversary block (i.e. the
adversary can mine anywhere in the tree T(t).)
• M2: Honest blocks are mined at a total rate of λh across
all the honest nodes, independent at each honest node and
independent of the adversary mining process. When a block
is mined by the honest node p, the sub-tree T (p)(t) and the
longest chain C(p)(t) is updated. According to the longest
chain rule, this honest block is appended to the tip of C(p)(t).
The mother tree T(t) is updated accordingly.
• M3: T (p)(t) and C(p)(t) can also be updated by the adversary,
in two ways: i) a block (whether is honest or adversary)
must be added to T (p)(t) within time ∆ once it has appeared
in T (q) for some q (cid:44) p, and the longest chain C(p)(t) is
extended if the block is at its tip; ii) the adversary can replace
T (p)(t−) by another sub-tree T (p)(t) from T(t) as long as
the new sub-tree T (p)(t) is an induced sub-tree of the new
tree T (p)(t), and can update C(p)(t−) to a longest chain in
T(p)(t). 4
at any time.
honest nodes, but no more than ∆ time.
We highlight the capabilities of the adversary in this model:
• A1: Can choose to mine on any one block of the tree T(t)
• A2: Can delay the communication of blocks between the
• A3: Can broadcast privately mined blocks at times of its own
choosing: when private blocks are made public at time t to
node p, then these nodes are added to T (p)(t−) to obtain
T (p)(t). Note that by property M3(i), when private blocks
appear in the view of some honest node p, they will also
appear in the view of all other honest nodes by time t + ∆.
• A4: Can switch the p-th honest node’s mining from one
longest chain to another of equal length at any time, even
when its view of the tree does not change. In this case,
T (p)(t) = T (p)(t−) but C(p)(t) (cid:44) C(p)(t−).
The question is on what information can the adversary base in
making these decisions? We will assume a causal adversary which
has full knowledge of all past mining times of the honest blocks
and the adversary blocks.
Proving the security (persistence and liveness) of the protocol
boils down to providing a guarantee that the chain C(t) converges
fast as t → ∞ and that honest blocks enter regularly into C(t)
regardless of the adversary’s strategy.
2.2 From PoW to a unified model
The model introduced in the last section can serve as a unified
model for all three classes of protocols we study in this paper. The
4All jump processes are assumed to be right-continuous with left limits, so that
C(t), T(t) etc. include the new arrival if there is a new arrival at time t.
key difference between these classes of protocols is how the lottery
in winning block proposal slots is conducted. This difference can
be encapsulated by changing only one modeling assumption: M1,
the assumption on the adversary mining process (Figure 4). In
particular, the assumption on the honest behavior (M2) remains
the same,
• M1-PoW (Proof-of-Work): The original assumption we al-
ready had: Adversary blocks are mined according to a Pois-
son process at rate λa, and the mined block can be appended
to any parent block but only one, of the adversary’s choosing,
in the current mother tree T(t). This models the random
attempts at solving the hash puzzle on one of the existing
blocks.
• M1-PS (Praos/SnowWhite Proof-of-Stake model): The ad-
versary blocks are mined5 according to a Poisson process
at rate λa (similar to PoW), but the adversary is allowed to
append a version of each mined block simultaneously at all
the blocks in the current tree T(t).
• M1-Chia (Chia Proof-of-Space model): The adversary blocks
are mined according to multiple independent Poisson pro-
cesses of rate λa, one at each block of the current tree T(t).
A new block is appended to the tree at a certain block when
a mining event happens.
Under M1-PoW, miners can only mine on one parent block at
a time, a consequence of conservation of work. Hence, the mined
block can only be appended to one of the parent blocks. In M1-PS
and M1-Chia, the adversary is able to mine new blocks on all of
the existing blocks of the blocktree. This is a consequence of the
phenomenon of Nothing-at-stake: the same resource (stake in PoS,
disk space in PoSpace) can be used by the nodes to participate
in random lotteries at all parent blocks to propose new blocks.
Hence, unlike under assumption M1-PoW, the overall mining rate
of adversary blocks increases as the tree T(t) grows over time
under both M1-PS and M1-Chia. However, the mining events
across different blocks are fully dependent in M1-PS and completely
independent in M1-Chia. This is a consequence of the difference of
how randomness is used in running the lotteries at different blocks.
In the case of Praos/SnowWhite, the same randomness is used. In
the case of Chia, independent randomness is used.
We note that it may appear that the capability A1 of the adver-
sary (choosing where to mine), which is present in M1-PoW, is
gone under M1-PS and M1-Chia. However, the reason is that the
adversary does not have to choose because it can mine everywhere
simultaneously. Thus the adversary is actually more powerful un-
der the M1-PS and M1-Chia conditions because the adversary has
at its disposal much larger number of adversary blocks to attack
the protocol. Somewhat surprisingly, our security threshold results
show that this extra power is not useful in Praos/SnowWhite but
useful in Chia.
The modeling assumptions for these protocols will be justified
in more details in the following two subsections. The reader who is
comfortable with these assumptions can go directly to Section 3.
5In these Proof-of-Stake protocols, block proposal slots are won by conducting lotteries
using the keys of the stake holders rather than by solving difficult computational
puzzles as in Proof-of-Work protocols. However,for convenience, we use the term
"mining" to denote the winning of any type of lotteries.
Figure 4: Three models for adversary block mining. In all models, adversary blocks are visualized as arriving via Poisson
queues, and the focus is on how the block at the head of each queue is appended to the blocktree. In the PoW model, each
adversary block can be appended to exactly one of the parent blocks of the existing blocktree. In the Paos/SnowWhte model,
each adversary block can be appended to all possible parents blocks. In the Chia PoSpace model, the adversary blocks are
mined independently on the parent blocks of the existing tree.
2.3 Ouroboros Praos and Snow White
Proof-of-Stake model
This section shows how Ouroboros Praos [DGKR18] and Snow
White [BPS16] Proof-of-Stake protocols can be modeled using as-
sumption M1-PS as mentioned earlier. Both of these are Proof-of-
Stake protocols, which means nodes get selected to create blocks
in proportion to the number of coins (=stake) that they hold rather
than the computation power held by the nodes. While the two
protocols are similar at the level required for the analysis here, for
concreteness, we will describe here the relation with Ouroboros
Praos, which can handle adaptive corruption of nodes.
We consider here only the static stake scenario - the stake of var-
ious nodes is fixed during the genesis block and assume that there
is a single epoch (the composition of epochs into a dynamic stake
protocol can be done using the original approach in [DGKR18]).
The common randomness as well as the stake of various users is
fixed at genesis (more generally, these are fixed at the beginning of
each epoch for the entire duration of the epoch). For this protocol,
we will assume that all nodes have a common clock (synchronous
execution). At each time t, every node computes a verifiable random
function (VRF) of the current time, the common randomness and
the secret key. If the output value of the VRF is less than a certain
threshold, then that node is allowed to propose a block at that time,
to which it appends its signature. The key property of the VRF is
that any node with knowledge only of the public key can validate
that it was obtained with a node possessing the corresponding se-
cret key. An honest node will follow the prescribed protocol and
thus only create one block which it will append to the longest chain
in its view. However, a winning dishonest node can create many
different blocks mining on top of distinct chains. Blocks which are
well-embedded into the longest-chain are considered confirmed.
Now, we explain the connection of the protocol to our modeling
in the earlier section. The first assumption is that time is quantized
so finely that the continuous time modeling makes sense - this
assumes that there is no simultaneous mining at any time point.
However, if nodes mine blocks close to each other in time, they
can be forked due to the delay ∆ in the propagation time (thus we
model concurrent mining through the effect of the propagation
delay rather than through discrete time). Second, the honest action
is to grow the longest chain through mining a new block at the tip
- this justifies M2 (here λh is proportional to the total honest stake).
The adversaries can mine blocks which can be appended to many
different positions in the blockchain. We assume that in the worst
case, every adversary arrival contributes to a block extending every
single block in the tree. We note that furthermore, there is another
action, which is that the adversary can create many different blocks
at any given position of the blockchain. Since this action does
not increase the length of any chain or increase future mining
opportunities, we do not need to model this explicitly. However, we
point out that, since we show that a certain prefix of the blockchain
ending at a honest block remains fixed for all future, that statement
continues to hold even under this expanded adversary action space.
2.4 Chia Proof-of-Space model
Chia consensus [CP19] incorporates a combination of Proof of
Space (PoSpace) and Proof of time, and is another energy efficient
alternative to Bitcoin. PoSpace [AAC+17, DFKP15] is a crypto-
graphic technique where provers can efficiently generate proofs
to show that they allocate unused hard drive space for storage
space. Proof of time is implemented by a Verifiable Delay Function
(VDF) [BBBF18, Pie18] that requires a certain amount of sequential
computations to execute, but can be verified far quicker: a VDF
takes a challenge c ∈ {0, 1}w and and a time parameter t ∈ Z+ as
input, and produces a output τ and a proof π in (not much more
than) t sequential steps; the correctness of output τ can be verified
with the proof π in much less than t steps. PoSpace enables Sybil
resistance by restricting participation to nodes that have reserved
enough hard disk space and VDF enables coordination without hav-
ing synchronized clocks as well as preventing long-range attacks
[PKF+18].
In Chia, each valid block B contains a PoSpace σ and a VDF
output τ. A Chia full node mines a new block (Bi, with i denoting
the depth of the block from Genesis) as follows:
(1) It first picks the block Bi−1, at the tip of the longest chain in
its local view of the blocktree, as the parent block that the
newly generated block Bi will be appended to.
(2) It draws a challenge c1 deterministically from Bi−1 and gen-
erates a valid PoSpace σi based on c1 and a large file of size
at least M bits it stores.
(3) It computes a valid VDF output τi based on a challenge c2 and
a time parameter t, where c2 is also drawn deterministically
from Bi−1 and t is the hash of σi multiplied by a difficulty
parameter T (i.e. t = 0.H(σi)×T where H is a cryptographic
hash function).
(4) A new block Bi comprised of σi, τi and some payload (ex-
ample: transactions) is appended to Bi−1 in the blocktree.
For each node, the “mining” time of a new block follows a uni-
form distribution in (0,T): this is because the hash function H out-
puts a value that is uniformly distributed over its range. Suppose
there are N full nodes in the Chia network, then the inter-arrival
block time in Chia consensus would be min(U1, U2, · · · , UN ), where
Ui ∼ Unif(0,T) for 1 ≤ i ≤ N . Then the expected inter-arrival block
time is
∫ T
0
E[min(U1, U2, · · · , UN )] =
(1 − t/T)N dt = T
N + 1 .
So to maintain a fixed inter-arrival block time (example: 10 min-
utes in Bitcoin), the difficulty parameter T needs to be adjusted
linearly as number of full nodes N grows. We also observe that the
chance for a node storing two large files each of size at least M
bits to find the first block is exactly doubled compared with a node
storing one file, which provides Sybil resistance to Chia. Further we
can model the mining process in Chia as a Poisson point process for
large N . Fixing a parent block in the block tree, the number of new
blocks mined in time t follows a binomial distribution bin(N , t/T),
which approaches a Poisson distribution Poi(N t/T) when N → ∞
and N/T → C for some constant C.
Assume there are n honest nodes each controlling M bits of space,
and the adversary has a · M bits of space, then the mining processes
of honest blocks and adversary blocks are Poisson point processes
with rate λh and λa respectively, where λh and λa are proportional
to total size of disk space controlled by honest nodes (n · M) and
the adversary (a · M) respectively. Also while the honest nodes are
following the longest chain rule, the adversary can work on multiple
blocks or even all blocks in the block tree as a valid PoSpace is easy
to generate and the adversary can compute an unlimited amount
of VDF outputs in parallel; a similar phenomenon occurs in Proof-
of-Stake blockchains where it is termed as the Nothing-at-Stake
(NaS) attack [BDK+19]. Hence, we can model the adversary blocks
as generated according to multiple independent Poisson processes
of rate λa, one at each block of the current tree T(t). A new block
is appended to the tree at a certain block when a generation event
happens. Like in the model for Ouroboros Praos and Snow White,
the total rate of adversary block generation increases as the tree
grows; however the generation events across different blocks are
independent rather than fully dependent.
3 BLOCKTREE PARTITIONING AND
NAKAMOTO BLOCKS
In this section, we will introduce the concept of blocktree parti-
tioning to represent a general adversary attack as a collection of
adversary trees racing against a fictitious honest chain. Using this
representation, we define the key notion of Nakamoto blocks as
honest blocks that are the winners of the race against all the past
trees, and show that if a block is a Nakamoto block, then the block
will forever remain in the longest chain. The results in this section
apply to all three models. In fact, they are valid for any assumption
on the adversary mining process in M1 in the model in Section 2.1,
because no statistical assumptions are made. In Section 4, we will
perform security analysis in all three backbone models using the
tool of Nakamoto blocks, by showing that they occur frequently
with high probability whenever the adversary power is not suffi-
cient to mount a successful private attack. This proves the liveness
and persistency of the protocols.
First, we introduce the concept of blocktree partitioning and
define Nakamoto blocks in the simpler case when ∆ = 0, and then
we extend to general ∆. The unrealistic but pedagogically useful
zero-delay case allows us to focus on the capability of the adversary
to mine and publish blocks, while the general case brings in its
capability to delay the delivery of blocks by the honest nodes as
well.
3.1 Network delay ∆ = 0
3.1.1 Blocktree partitioning
Let τ h
be the mining time of the i-th honest and adversary
i
blocks respectively; τ h0 = 0 is the mining time of the genesis block,
which we consider as the 0-th honest block.
and τ a
i
Definition 3.1. Blocktree partitioning Given the mother tree
T(t), define for the i-th honest block bi , the adversary tree Ti(t) to
be the sub-tree of the mother tree T(t) rooted at bi and consists of
all the adversary blocks that can be reached from bi without going
through another honest block. The mother tree T(t) is partitioned
into sub-trees T0(t), T1(t), . . . Tj(t), where the j-th honest block is the
last honest block that was mined before time t.
See Figure 2(b) for an example.
The sub-tree Ti(t) is born at time τ h
i
as a single block bi and
then grows each time an adversary block is appended to a chain
of adversary blocks from bi. Let Di(t) denote the depth of Ti(t);
Di(τ h
i ) = 0.
3.1.2 Nakamoto blocks
Let Ah(t) be the number of honest blocks mined from time 0 to
t. Ah(t) increases by 1 at each time τ h
. We make the following
important definition.
i
Definition 3.2. (Nakamoto block for ∆ = 0) Define
i ) for all t > τ h
ij = event that Di(t) < Ah(t) − Ah(τ h
0
E
j
(4)
for some i < j. The j-th honest block is called a Nakamoto block if
0
j =
F
0
ij