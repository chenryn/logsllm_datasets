last-branch predicate. After our technique analyzes every
predicate in ρf1, the newly reduced path condition is ρf1(cid:3) :=
c > 0∧d+1 > 0∧s! = null∧0  0∧ d + 1 > 0∧ s! = null∧ 0  0∧ d + 1 > 0∧ s! = null ∧ 0  0 ∧ s! = null) ∧ ∃i, (i  0 ∧ d + 1 > 0 ∧ s! =
null) ∧ ∃i, (i < s.length ∧ s[i] == null)). In the end,
PREINFER infers the ground-truth precondition (¬α) at Line
5 of Figure 1.
III. PRELIMINARIES AND PROBLEM DEFINITION
In this section, we formally deﬁne the terms used in the
paper and the problem that PREINFER intends to address.
Deﬁnition 1. A method-entry state s for the method under
test m is a concrete-value assignment over the method input
— the variables being used in m (e.g., the parameters of m,
the receiver object’s ﬁelds) before invocation.
A method execution of method m with its method-entry
state s is denoted as m[[s]].
Deﬁnition 2. An assertion-containing location e denotes a
program location containing an assertion check4. When a
method execution reaches an assertion-containing location
and violates the assertion check, the execution aborts with
an exception.
The exception can be (1) implicit such as DivideByZe-
roException or (2) explicit, from explicitly written assertion
checks, such as Assert.IsTrue().
We assume that the method under test m is deterministic
and sequential. A method execution m[[s]] is failing if it
reaches an assertion-containing location and aborts due to an
assertion violation; otherwise, m[[s]] is passing. Therefore,
the set of all possible method executions Iall of m can be
partitioned into two disjoint subsets Iall = If ail ∪ Ipass
where If ail is the set of all the failing method executions
and Ipass is the set of all the passing method executions.
Next we deﬁne a precondition candidate and its relationship
with method executions.
Deﬁnition 3. A precondition candidate ψ of method m is a
predicate over the parameters of method m. The complexity
of ψ, denoted as |ψ|, is the number of logical connectives
and quantiﬁers in ψ. The evaluation of ψ under the assign-
ment from method-entry state s is denoted as s(ψ).
Deﬁnition 4. A precondition candidate ψ validates method
execution m[[s]]
if s(ψ) is true. Let I ψ be the set of
all possible method executions validated by precondition
candidate ψ, i.e., I ψ = {m[[s]] | s(ψ)}.
A precondition ψ prevents a failing test (method inputs)
if its method execution is not in I ψ. We denote ideal pre-
condition candidates as sufﬁcient, necessary, and succinct.
A sufﬁcient precondition candidate is a precondition that
invalidates all method executions in If ail, but may also
invalidate some method executions in Ipass. That
is, a
sufﬁcient precondition prevents all failing tests and possibly
some passing tests. Dually, a necessary precondition can-
didate validates all method executions in Ipass, but may
also validate some method executions in If ail. That
is,
a necessary precondition prevents only failing tests but
possibly not all of them. Formally, ψ is sufﬁcient if and
only if I ψ ∩ If ail = ∅; ψ is necessary if and only if
Ipass ⊂ I ψ ≡ I ψ ∩ Ipass = ∅ (I ψ denotes the complement
of I ψ). It is also desirable for ψ to have the relatively low
complexity |ψ| with respect to the ideal complexity (the
∗). The reason
complexity of the ground-truth precondition ψ
is that more succinct precondition candidates generally incur
lower runtime-checking cost and lower human efforts for
inspection and understanding.
We next deﬁne path conditions used to infer precondition
candidates. Given method execution m[[s]], the execution
path p can be captured by path condition, ρ. The path con-
dition is a conjunction of predicates ρ = φ1 ∧ φ2 ∧···∧ φ|ρ|
collected from the executed branch conditions in m and its
(direct and indirect) callee methods along the executed path
p. Note that φ1 is from the predicate in the ﬁrst branch
appearing in the executed path and φ|ρ| is the last-branch
predicate. This predicate is derived from the last branch in
the executed path and is also an assertion-check predicate
when p is a failing. A path condition ρ can also be viewed as
a list of predicates [φ1, φ2, . . . , φ|ρ|]. More precisely, ρ is a
logic formula that characterizes the inputs for which method
m executes along execution path p. Each variable appearing
in ρ is from the method input (deﬁned in its method-entry
state s), while each predicate appearing in ρ is over some
ﬁrst-order theory. A path condition ρ for execution path p is
sound if every variable assignment satisfying ρ deﬁnes an
execution of m that follows p [6]. In this work, we assume
that a path condition is sound.
Given path p that reaches assertion-containing location e
(without considering the path executed after e) in a method
m, a p-assertion-violating condition is a predicate over the
method input deﬁned in method-entry state s such that if
any p-following inputs (i.e., those inputs whose execution
follows p) satisfy the predicate, then the assertion check
in e fails and the corresponding method execution m[[s]] is
failing; otherwise, the assertion in e is not violated and thus
m[[s]] is a passing one.
A. Problem Outline and Overview
4In our work, we consider both explicit assertion checks written by
developers in production code or test code and implicit assertion checks
automatically inserted by the language runtime or the underlying Pex test
generation tool [5].
In this section, we ﬁrst elaborate on our target problem
for clarity purposes. Then, we formally deﬁne two key
components of our dynamic predicate pruning technique as
681
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:29:38 UTC from IEEE Xplore.  Restrictions apply. 
=⇒ α
∈ Pf ail, ρfk
∈ Ppass, ρn =⇒ ¬α
relations namely c-depend and d-impact. We conclude by
illustrating the abstraction of our collection-element gener-
alization technique to summarize overly speciﬁc predicates.
Overly speciﬁc predicates are those derived from conditions
in branches located in loops including the loop header. In
this work, we focus on those overly speciﬁc predicates
that contain collection elements and integer values that
change during each iteration of loops [7]. Given a failing
path condition, ρfk, all inputs satisfying ρfk will induce
executions that reach an assertion-containing location, e, and
satisfy its p-assertion-violating condition. Given a passing
path condition, ρpi, all inputs satisfying ρpi will induce
executions that do not reach e or reach e but do not
∧ ρpi
satisfy the p-assertion-violating condition. Thus, ρfk
is unsatisﬁable. Based on such observation,
the goal of
PREINFER is to infer a condition that is a generalization
from the initial failing runs (by pruning irrelevant predicates)
but
is precise enough to avoid capturing behavior from
passing runs. Formally, PREINFER aims to infer a condition
α with the lowest complexity (i.e., with the minimum |α|)
that satisﬁes the following criteria:
• ∀ρfk
• ∀ρpi
Note that the given set Pf ail typically includes only a
subset of all possible failing path conditions due to the
limited resources allocated to the used test generation tool.
A program with loops can also contain inﬁnitely many
paths. Intuitively, in the best case of being able to generalize
perfectly, α captures all failing path conditions in the given
Pf ail and even all other failing path conditions not
in
Pf ail. In the worse case of not being able to generalize, α
captures only failing path conditions in the given set Pf ail.
To produce α, given an input set of failing path condi-
}, our algorithm removes the predicates
tions {ρf1 , ..., ρfk
from each ρfi to produce a reduced set of path conditions
, ..., ρfk
Pf ail
(cid:2)| ≤ |ρfi|
• |ρfi
(cid:2)), i.e., ρpi ∧
• ∀ρpi ∈ Ppass∀ρfk
(cid:2) is unsatisﬁable.
ρfk
(cid:2) ∨ ··· ∨
The algorithm then computes a condition α = ρf1
(cid:2). By removing predicates from each ρfi to form ρfi
(cid:2),
ρfk
(cid:2) can include duplicate predicates,
the resulting set of ρfi
and these duplicates are removed, further simplifying α. It
∧ α), so the result
is obvious to see that ∀ρpi
condition α is a generalization from all the failing runs and
does not capture behavior from all the passing runs. Next,
we deﬁne two binary relations to determine the predicates
that can be removed. Predicates in path conditions can be
in a c-depend or a d-impact relation w.r.t. the last-branch
predicate.
Deﬁnition 5. A predicate φi
[φ1, φ2, . . . ,∧φi−1,∧φi, . . . , φ|ρ|] is in a c-depend relation
w.r.t. the last-branch predicate (φ|ρ|) if the concrete execu-
(cid:2)} such that
(cid:2) ∈ Pf ail
(cid:2)
∈ Ppass,¬(ρpi
in a failing path ρfi
,¬(ρpi ∧ ρfk
=
(cid:2) = {ρf1
(cid:2)
tions of all inputs that satisfy φ1 ∧ φ2 ∧···∧ φi−1 ∧¬φi do
not reach the assertion-containing location.
To decide whether predicate φi is in c-depend, we con-
sider only the executions that reach the branch condition of
φi. Those executions can be partitioned into two sets: the
executions whose evaluation of φi is true and the executions
whose evaluation of φi is false. Now we can conclude that
predicate φi
is in c-depend if and only if only one set
contains a path reaching the assertion-containing location.
Deﬁnition 6. A predicate φi
[φ1, φ2, . . . ,∧φi−1,∧φi, . . . , φ|ρ|] is in a d-impact relation
w.r.t. the last-branch predicate (φ|ρ|) if there exists an input
that satisﬁes φ1 ∧ φ2 ∧ ··· ∧ φi−1 ∧ ¬φi, and whose
concrete execution reaches the assertion-containing location
but whose symbolic expression of the p-assertion-violating
condition (from the assertion-containing location) is differ-
ent than the symbolic expression of φ|ρ|.
in a failing path ρfi
=
These two relations deﬁne membership of predicates in
the reduced path conditions. The reduced path conditions,
composed of only predicates in c-depend or d-impact re-
lations, ensure location reachability and expression preser-
vation. In other words, predicate φi ∈ ρfi
if and only
is in a c-depend or d-impact relation. Intuitively,
if φi
the aim is to identify and remove those predicates whose
valuation (true, false) is irrelevant to whether or not the paths
containing those predicates reach the assertion-containing
location (location reachability) and the symbolic expressions
of the predicates from the assertion-containing location of
those paths are the same (expression preservation).
(cid:2)
(cid:2)
(cid:2)
, ..., ρfk
from the set {ρf1
After pruning, each predicate φ in each reduced path
(cid:2)} is either in
condition ρf1
a c-depend or d-impact relation. However, a subset of
these predicates may be repetitive only differing by a
factor of the iteration count of some loop. We denote
these predicates as overly speciﬁc. These overly speciﬁc
predicates provide an opportunity to infer more succinct
preconditions while retaining precision. Our approach in-
cludes one additional generalization step to summarize
these predicates into more concise representations. To con-
duct generalization, we want to construct formulas of the
˙(A(x1, . . . , xn) ∧ B(x1, . . . , xn)) or
form (1) ∃x1, . . . , xn
(2) ∀x1, . . . , xn
˙(A(x1, . . . , xn) → B(x1, . . . , xn)) where
A and B are sets of predicates in terms of the bounded
variables. In particular, predicates in A restrict the domain
of the bounded variables, x1, . . . , xn, while predicates in B
express the violated property(ies) in terms of the bounded
(cid:2), we instantiate formulas of
variables. Then, for each ρfi
(cid:2),
the preceding form 1 or 2, based on the predicates in ρfi
to create candidate formulas. Then, we choose a candi-
date C based on the number of subsumed overly speciﬁc
(cid:2). Finally, our generalization step uses C
predicates in ρfi
(cid:2)(cid:2) = [φ1,∃i.φA(i) ∧ φB(i), . . . , φ|ρ|] or
to construct ρfi
682
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:29:38 UTC from IEEE Xplore.  Restrictions apply. 
SP [p] ← Last(p)
p ← p\ Last(p)
Algorithm 1 Dynamic Predicate Pruning
1: function PREDICATEPRUNING(pf , Ppass, Pf ail)
SP ←Map from a path to its slice
2:
for each path p ∈ Ppass ∪ Pf ail ∪ {pf} do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
IsD-Impact(SP, b, pf , Pf ail) then
Add b to SP [pf ]
for each path p ∈ Ppass ∪ Pf ail ∧ b ∈ p do
end for
for each path p ∈ Ppass∪Pf ail∪{pf}∧b ∈ p
end for
while pf (cid:17)= ∅ do
b ← Last(pf )
if IsC-Depend(SP, b, pf , Ppass)∨
Add b to SP [p]
else
p ← p\ b
do
end for
17:
18:
19:
20:
21:
22: end function
end if
end while
return SP [pf ]
(cid:2)(cid:2) = [φ1,∀i.φA(i) → φB(i), . . . , φ|ρ|] such that:
ρfi
(cid:2)(cid:2)| ≤ |ρfi
• |ρfi
(cid:2)| ≤ |ρfi|
(cid:2)(cid:2) ∨ ··· ∨ ρfk
• αgen = ρf1
∧ αgen) is
∈ Ppass,¬(ρpi
• ∀ρpi
unsatisﬁable.
Finally, our approach produces ¬αgen as a precondition
candidate.
∧ αgen), i.e., each (ρpi
(cid:2)(cid:2)
IV. APPROACH
PREINFER takes as input a method m, an assertion-
containing location e, and a test suite containing pass-
ing tests and failing tests (e.g., satisfying the p-assertion-
violating condition at e). PREINFER executes the tests and
collects the path conditions of the tests. Then, PREINFER ap-
plies the technique of dynamic predicate pruning to remove
irrelevant predicates and the technique of collection-element
generalization to generalize overly speciﬁc predicates to
infer a precondition candidate for each assertion-containing
location e in m.
A. Dynamic Predicate Pruning
Algorithm 1 shows the technique of dynamic predicate