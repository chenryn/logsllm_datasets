    }
    }
    @Override
    public void onServiceDisconnected(ComponentName name) {
    // TODO Auto-generated method stub
    }
    };
接着,通过next_intent传递key和iv,即可开启webActivity,des解密成功后,加载正确flagUrl。获取flag。
    String key = etKey.getText().toString();
    String iv = etIv.getText().toString();
    String content = "loading";
    b data = new b(key,iv, content);
    Intent intent = new Intent("com.example.wawawa.Misc_SERVICE");
    intent.putExtra("CLASS_NAME", "com.example.wawawa.WebActivity");
    intent.putExtra("KEY", data);
    startService(intent);
#
# **0x03 Mobile450-Target**
> This APK has a vulnerability, please use it to start the target activity.The
> flag should include RCTF{}.
> [Package_b6411947d3b360182e8897be40064023](https://github.com/Xbalien/RCTF2015-MOBILE/blob/master/Target/Package_b6411947d3b360182e8897be40064023)
##
## 出题思路:开放本地端口 + PendingIntent + 运行时自窜改
该题出题思路参考了@小荷才露尖尖角的浅谈Android开放网络端口的安全风险[[2]](http://drops.wooyun.org/mobile/6973),X-team的PendingIntent双无intent可导致的能力泄露[[3]](http://xteam.baidu.com/?p=77)
以及运行时自篡改代码[[4]](http://blog.csdn.net/freshui/article/details/13620647)。
出题本意是,通过该apk开放的一个本地端口,传递相关参数,最后触发主dex中的PendingIntent双无Intent的通知,获取相关通  
知后修改intent内容开启TargetActivty.其中向端口中传递的能够正确触发双无Intent的参数的md5(输入参数)即为flag。  
(但dex几处代码经过so的自篡改,因此需要获取真正加载的代码)
Manifest:TargetActiviy使用了signature的权限进行保护
因此,想要启用该activity需要有next-intent或者能力泄露,通过查看ListenService定位到了一处双无intent。  
因此触发ListenService逻辑至allow代码逻辑即可(allow逻辑代码是13年开发的重打包加固的app中修改的[[5]](https://github.com/Xbalien/GuardDroid))。
    Intent v2_1 = new Intent();
    if("reject".equals(arg9)) {
    v2_1.setClassName(this.a, "com.ui.MainTabHostActivity");
    v1.setLatestEventInfo(this.a.getApplicationContext(), "Guard", ((CharSequence)arg10),
    PendingIntent.getActivity(this.a, 0, v2_1, 0));
    ((NotificationManager)v0).notify(1, v1);
    Log.d("CoreListenService", arg9);
    }
    if("allow".equals(arg9)) {
    v1.setLatestEventInfo(this.a.getApplicationContext(), "Guard", ((CharSequence)arg10),
    PendingIntent.getActivity(this.a, 0, v2_1, 0));
    ((NotificationManager)v0).notify(1, v1);
    Log.d("CoreListenService", arg9);
    }
该逻辑是,在内存中存在一个设定了allow的条件,就是name为test,perm为READ_F的消息才能被设置为allow。
    if(GuardApplication.a.get("test") == null) {
    GuardApplication.a.put("test", Integer.valueOf(0));
    }
    GuardApplication.a.put("test", Integer.valueOf(b.b.get("READ_F").intValue() | GuardApplication
    .a.get("test").intValue()));
但listenService是未导出组件,无法直接调用,因此只能另寻他路。
在apk assets目录下存放了一个d文件,该文件其实是加密后的dex文件。通过查看加载调用GuardApplication可以发现:
首先通过b()对d复制、解密操作,解密之后加载com.example.dynamic.Init类,执行其中的a方法。  
b()最终是异或36,但是该异或代码在运行时加载的so中进行了修改,异或了18,因此通过36异或出来的d并不是真正的dex。加载后的dex以及  
odex我也删除掉了。
    public void a() {
    this.b();
    String v1 = this.e.getCacheDir().getPath();
    DexClassLoader v0 = new DexClassLoader(String.valueOf(this.e.getDir(Load.b, 0).getPath()) +
    "/" + Load.d, v1, null, this.e.getClassLoader());
    try {
    Class v0_2 = v0.loadClass("com.example.dynamic.Init");
    Constructor v2 = v0_2.getConstructor(Context.class);
    Method v0_3 = v0_2.getMethod("a");
    this.f = v2.newInstance(this.e);
    v0_3.invoke(this.f);
    }
    catch(Exception v0_1) {
    v0_1.printStackTrace();
    }
    new File(v1, "bb.dex").delete();
    new File(this.e.getDir(Load.b, 0).getPath(), "bb.jar").delete();
    }
so存在简单的ptrace以及traceid反调试,想办法获取到d.dex后,进行反编译:可以知道该dex加载后开启了127.0.0.1:20151端口。处于监听状态获取数据交互。
    public ServerSocketThread(Context arg2) {
    super();
    this.c = arg2;
    this.b = 20151;
    }
    public final void run() {
    try {
    this.a = new ServerSocket();
    this.a.bind(new InetSocketAddress(InetAddress.getLocalHost(), this.b));
    while(true) {
    Socket v0_1 = this.a.accept();
    Log.d("socket", "Socket Acccept!Address=" + v0_1.getInetAddress().toString());
    if(v0_1 != null) {
    new b(this.c, v0_1).start();
    }
    Log.d("socket", "Socket Execute Thread Started!Address=" + v0_1.getInetAddress().toString());
    }
    }
    catch(Exception v0) {
    v0.printStackTrace();
    return;
    }
    }
其中,处理逻辑中,找到一处可以通过接受端口传递进来的参数,进行不同的逻辑处理,最后解析参数触发startservice,调用主dex中任意service以及extras的逻辑。
    public class a {
    public static final String b = "mobile://rois/?";
    static {
    a.a = new HashMap();
    a.a.put("start", Integer.valueOf(3));
    a.a.put("handle", Integer.valueOf(4));
    a.a.put("test", Integer.valueOf(1));
    a.a.put("location", Integer.valueOf(2));
    a.a.put("getinfo", Integer.valueOf(5));
    a.a.put("sms", Integer.valueOf(6));
    a.a.put("contact", Integer.valueOf(7));
    }
    public a() {
    super();
    }
    }
因此,nc 127.0.0.1
20151,向该端口传递数据,尝试触发该逻辑,以下逻辑为需要触发的逻辑。接受参数后,会对xx=xx&xx=xx&xx=xx之类的输入,进行解析。获取到相关的输入数据后,构造特定的Intent,包括组件名,extras数据等等,最后通过startservice将intent传递到主dex的逻辑中。
    label_184:
        if(!v1[1].startsWith("cm=")) {
            goto label_93;
        }
        if(!v1[2].startsWith("ac=")) {
            goto label_93;
        }
        if(!v1[3].startsWith("extr=")) {
            goto label_93;
        }
        v0_4 = v2.getQueryParameter("cm");
        v1_1 = v2.getQueryParameter("ac");
        String v2_2 = v2.getQueryParameter("extr");
        Intent v3_1 = new Intent();
        if(v0_4 != null) {
            v3_1.setComponent(new ComponentName(this.a, v0_4));
        }
        if(("true".equals(v1_1)) && v2_2 != null) {
            System.out.println(v2_2);
            v0_5 = v2_2.split("-");
            if(v0_5.length == 6) {
                v3_1.putExtra(v0_5[0], v0_5[1]);
                v3_1.putExtra(v0_5[2], v0_5[3]);
                v3_1.putExtra(v0_5[4], v0_5[5]);
            }
        }
        this.a.startService(v3_1);
触发调用listenService的逻辑后,intent根据相关解析相关逻辑约束,在满足某约束的输入下,进而发送双无intent的通知。该输入MD5就是所谓的flag。
(但在ListenService中我留了一个坑,v1.getString("perm", "per"),其中key
"perm"我在so自篡改成了PERM)。
    public int onStartCommand(Intent arg5, int arg6, int arg7) {
    if(arg5 != null) {
    Bundle v1 = arg5.getExtras();
    Iterator v2 = v1.keySet().iterator();
    while(v2.hasNext()) {
    v2.next();
    }
    if(v1 != null) {
    String v0 = v1.getString("name", "name");
    if("log".equals(v1.getString("action", "act"))) {
    this.b = new com.service.ListenService$b(this, ((Context)this), v0, v1.getString(
    "perm", "per"));
    this.c = new Thread(this.b);
    this.c.start();
    }
    }
    }
    return super.onStartCommand(arg5, arg6, arg7);
    }
因此向监听端口发送:action=start&cm=com.service.ListenService&ac=true&extr=name-test-action-log-PERM-READ_F
即可触发allow通知,该通知存放一个双无intent.再通过修改intent即可触发TargetActivity.
ps:自己反编译混淆后的apk才发现看得还是挺蛋疼的,又坑了大家一波。
#
# **0x04 小结**
此次RCTF2015
Mobile类题目,我尝试了一些漏洞的思路进行出题,也许还会存在我没有考虑到的问题,也或许获取flag的方式让大家不解,包括让大家入坑的都请见谅哈。希望有兴趣童鞋可以尝试把Mobile的CTF题出得更全面、更有意思。
最后。参加RCTF的小伙伴们。
#
# 0x05 参考
  1. [http://jaq.alibaba.com/blog.htm?spm=0.0.0.0.v5UAtC&id=76](http://jaq.alibaba.com/blog.htm?spm=0.0.0.0.v5UAtC&id=76)
  2. 
  3. 
  4. 
  5. 