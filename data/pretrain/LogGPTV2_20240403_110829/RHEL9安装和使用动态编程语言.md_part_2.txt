:::
您可以使用 `pip`{.literal} 安装程序，或使用 DNF 软件包管理器在系统中安装
Python 软件包。DNF 使用 RPM 软件包格式，它提供对软件的下游控制。
原生 Python 软件包的打包格式由 [Python
打包授权机构(PyPA)规范定义](https://www.pypa.io/en/latest/specifications/){.link}。大多数
Python 项目使用 `distutils`{.literal} 或 `setuptools`{.literal}
实用程序进行打包，并在 `setup.py`{.literal}
文件中定义的软件包信息。然而，创建原生 Python
软件包的可能性随着时间推移而演进。有关新兴打包标准的更多信息，请参阅
[pyproject-rpm-macros](https://gitlab.com/redhat/centos-stream/rpms/pyproject-rpm-macros/){.link}。
本章论述了如何将 `setup.py`{.literal} 的 Python 项目打包到一个 RPM
软件包中。与原生 Python 软件包相比，此方法提供以下优点：
::: itemizedlist
-   可以对 Python 和非 Python 软件包的依赖项，并严格由 `DNF`{.literal}
    软件包管理器强制执行。
-   您可以用加密的方式为软件包签名。使用加密签名，您可以验证、集成和测试
    RPM 软件包的内容与操作系统的其余部分。
-   您可以在构建过程中执行测试。
:::
::: section
::: titlepage
# []{#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#con_spec-file-description-for-a-python-package_assembly_packaging-python-3-rpms}Python 软件包的 SPEC 文件描述 {.title}
:::
SPEC 文件包含 `rpmbuild`{.literal} 实用程序用于构建 RPM
的指令。这些说明包含在一系列部分中。SPEC
文件有两个主要部分，它们定义了该部分：
::: itemizedlist
-   preamble（包含一系列在 Body 中使用的元数据项）
-   正文（包含指令的主要部分）
:::
与非 Python RPM SPEC 文件相比，适用于 Python 项目的 RPM SPEC
文件有一些特定信息。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
Python 库的任何 RPM 软件包的名称必须始终包含 `python3-`{.literal} 前缀。
:::
其他具体信息可在以下 [**适用于 `python3-pello`{.literal} 软件包 的 SPEC
文件示例**]{.strong} 中显示。有关此类特定描述，请查看示例中的备注。
``` programlisting
Name:           python-pello                                          
Version:        1.0.2
Release:        1%{?dist}
Summary:        Example Python library
License:        MIT
URL:            https://github.com/fedora-python/Pello
Source:         %{url}/archive/v%{version}/Pello-%{version}.tar.gz
BuildArch:      noarch
BuildRequires:  python3-devel                                         
# Build dependencies needed to be specified manually
BuildRequires:  python3-setuptools
# Test dependencies needed to be specified manually
# Also runtime dependencies need to be BuildRequired manually to run tests during build
BuildRequires:  python3-pytest >= 3
%global _description %{expand:
Pello is an example package with an executable that prints Hello World! on the command line.}
%description %_description
%package -n python3-pello                                             
Summary:        %{summary}
%description -n python3-pello %_description
%prep
%autosetup -p1 -n Pello-%{version}
%build
# The macro only supported projects with setup.py
%py3_build                                                            
%install
# The macro only supported projects with setup.py
%py3_install
%check                                                                
%{pytest}
# Note that there is no %%files section for the unversioned python module
%files -n python3-pello
%doc README.md
%license LICENSE.txt
%{_bindir}/pello_greeting
# The library files needed to be listed manually
%{python3_sitelib}/pello/
# The metadata files needed to be listed manually
%{python3_sitelib}/Pello-*.egg-info/
```
::: calloutlist
  -------------------------------------------------------------------------------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  [![1](images/callouts/1.png)](#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#CO1-1)   将 Python 项目打包到 RPM 中时，始终将 `python-`{.literal} 前缀添加到项目的原始名称。这里的原始名称为 `pello`{.literal}，因此 [**源 RPM(SRPM)**]{.strong} 的名称是 `python-pello`{.literal}。
  [![2](images/callouts/2.png)](#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#CO1-2)   [**BuildRequires**]{.strong} 指定构建并测试此软件包所需的软件包。在 [**BuildRequires**]{.strong} 中，始终包括提供构建 Python 软件包所需工具的项目： `python3-devel`{.literal} 和您软件包所需的相关项目，如 `python3-setuptools`{.literal} 或在 [**%check**]{.strong} 部分中运行测试所需的运行时和测试依赖关系。
  [![3](images/callouts/3.png)](#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#CO1-3)   当为二进制 RPM 选择名称时（用户可以安装的软件包）时，添加版本化的 Python 前缀，即当前 `python3-`{.literal}。因此，生成的二进制 RPM 将命名为 `python3-pello`{.literal}。
  [![4](images/callouts/4.png)](#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#CO1-4)   [**%py3_build**]{.strong} 和 [**%py3_install**]{.strong} macros 宏分别运行 `setup.py build`{.literal} 和 `setup.py install`{.literal} 命令，使用附加参数来指定安装位置、要使用的解释器以及其他详情。
  [![5](images/callouts/5.png)](#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#CO1-5)   [**%check**]{.strong} 部分应该运行打包项目的测试。确切的命令取决于项目本身，但可以使用 [**%pytest**]{.strong} 宏以 RPM 友好的方式运行 `pytest`{.literal} 命令。[**%{python3}**]{.strong} 宏包含 Python 3 解释器的路径，即 `/usr/bin/python3`{.literal}。我们建议使用宏，而不是字面上的路径。
  -------------------------------------------------------------------------------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
:::
::: section
::: titlepage
# []{#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#con_common-macros-for-python-3-rpms_assembly_packaging-python-3-rpms}Python 3 RPM 的常见宏 {.title}
:::
在 SPEC 文件中，始终使用以下 Macros [*用于 Python 3 RPM*]{.emphasis}
表而不是硬编码其值的宏。
::: table
[]{#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#idm139856434727792}
**表 3.1. Python 3 RPM 宏**
::: table-contents
  Macro                  常规定义                             描述
  ---------------------- ------------------------------------ --------------------------------------------------------------------------------------------------------------------------------------------
  %{python3}             /usr/bin/python3                     Python 3 解释器
  %{python3_version}     3.9                                  Python 3 解释器的 major.minor 版本
  %{python3_sitelib}     /usr/lib/python3.9/site-packages     安装纯 Python 模块的位置
  %{python3_sitearch}    /usr/lib64/python3.9/site-packages   安装包含特定于架构扩展模块的模块的位置
  %py3_build                                                  使用适用于 RPM 软件包的参数运行 `setup.py build`{.literal} 命令
  %py3_install                                                使用适用于 RPM 软件包的参数运行 `setup.py install`{.literal} 命令
  %{py3_shebang_flags}   s                                    Python 解释器指令宏的默认标记集，`%py3_shebang_fix`{.literal}
  %py3_shebang_fix                                            将 Python 解释器指令改为 `#! %{python3}`{.literal}，保留任何现有标志（如果找到），并添加在 `%{py3_shebang_flags}`{.literal} 宏中定义的标记
:::
:::
::: itemizedlist
**其他资源**
-   [上游文档中的 Python
    宏](https://docs.fedoraproject.org/en-US/packaging-guidelines/Python_201x/#_macros){.link}
:::
:::
::: section
::: titlepage
# []{#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#proc_using-automatically-generated-dependencies-for-python-rpms_assembly_packaging-python-3-rpms}为 Python RPM 使用自动生成的依赖项 {.title}
:::
以下流程描述了如何在将 Python 项目打包为 RPM 时使用自动生成的依赖项。
::: itemizedlist
**先决条件**
-   RPM 的 SPEC 文件存在。如需更多信息，请参阅 [Python 软件包的 SPEC
    文件描述](#assembly_packaging-python-3-rpms_installing-and-using-dynamic-programming-languages.html#con_spec-file-description-for-a-python-package_assembly_packaging-python-3-rpms "Python 软件包的 SPEC 文件描述"){.link}。
:::
::: orderedlist
**步骤**
1.  确保以下包含上游提供元数据的目录之一包含在生成的 RPM 中：
    ::: itemizedlist
    -   `.dist-info`{.literal}
    -   `.egg-info`{.literal}
        RPM 构建过程会自动从这些目录中生成虚拟
        `pythonX.Ydist`{.literal}，例如：
        ``` screen
        python3.9dist(pello)
        ```
        然后，Python 依赖项生成器读取上游元数据，并使用生成的
        `pythonX.Ydist`{.literal} 虚拟提供为每个 RPM
        软件包生成运行时要求。例如，生成的要求标签可能如下所示：
        ``` screen
        Requires: python3.9dist(requests)
        ```
    :::
2.  检查生成的要求。
3.  要删除其中的一些生成的需要，请使用以下方法之一：
    ::: orderedlist
    1.  在 SPEC 文件的 `%prep`{.literal} 部分中修改上游提供的元数据。
    2.  使用
        [上游文档](https://fedoraproject.org/w/index.php?title=Packaging:AutoProvidesAndRequiresFiltering&oldid=530706){.link}
        中描述的依赖项自动过滤。
    :::
4.  要禁用自动依赖项生成器，请在主软件包的 `%description`{.literal}
    声明中包含 `%{?python_disable_dependency_generator}`{.literal} 宏。
:::
::: itemizedlist
**其他资源**
-   [自动生成的依赖项](https://docs.fedoraproject.org/en-US/packaging-guidelines/Python_201x/#_automatically_generated_dependencies){.link}
:::
:::
:::
[]{#assembly_handling-interpreter-directives-in-python-scripts_installing-and-using-dynamic-programming-languages.html}
::: chapter
::: titlepage
# []{#assembly_handling-interpreter-directives-in-python-scripts_installing-and-using-dynamic-programming-languages.html#assembly_handling-interpreter-directives-in-python-scripts_installing-and-using-dynamic-programming-languages}第 4 章 在 Python 脚本中处理解释器指令 {.title}
:::
在 Red Hat Enterprise Linux 9 中，可执行 Python
脚本应该使用解析程序指令（也称为 hashbangs 或 shebangs），至少指定主要
Python 版本。例如：
``` literallayout
#!/usr/bin/python3
#!/usr/bin/python3.9
```
在构建任何 RPM
软件包时，`/usr/lib/rpm/redhat/brp-mangle-shebangs`{.literal} buildroot
策略(BRP)脚本会自动运行，并尝试在所有可执行文件中更正解释器指令。
当遇到带有模糊的解释解释器指令的 Python 脚本时，BRP
脚本会生成错误，例如：
``` literallayout
#!/usr/bin/python
```
或者
``` literallayout
#!/usr/bin/env python
```
::: section
::: titlepage
# []{#assembly_handling-interpreter-directives-in-python-scripts_installing-and-using-dynamic-programming-languages.html#proc_modifying-interpreter-directives-in-python-scripts_assembly_handling-interpreter-directives-in-python-scripts}修改 Python 脚本中的解释器指令 {.title}
:::
使用以下步骤修改 Python 脚本中的解释器指令，以便在 RPM 构建时出现错误。
::: itemizedlist
**先决条件**
-   Python 脚本中的一些解释器指令会导致构建错误。
:::
::: itemizedlist
**步骤**
-   要修改解释器指令，请完成以下任务之一：
    ::: itemizedlist
    -   在您的 SPEC 文件的 `%prep`{.literal} 部分中使用以下宏：
        ``` literallayout
        # %py3_shebang_fix SCRIPTNAME …​
        ```
        [*SCRIPTNAME*]{.emphasis} 可以是任何文件、目录或文件和目录列表。
        因此，列出的所有文件以及列出目录中所有 `.py`{.literal}
        文件都会修改其解释器指令以指向
        `%{python3}`{.literal}。将保留原始解释器指令的现有标记，并将添加
        `%{py3_shebang_flags}`{.literal} 宏中定义的其他标志。您可以在
        SPEC 文件中重新定义 `%{py3_shebang_flags}`{.literal}
        宏，以更改将要添加的标志。
    -   从 `python3-devel`{.literal} 软件包应用 `pathfix.py`{.literal}
        脚本：
        ``` literallayout
        # pathfix.py -pn -i %{python3} PATH …​
        ```
        您可以指定多个路径。如果 `PATH`{.literal} 是一个目录，则
        `pathfix.py`{.literal} 会递归扫描与模式
        `^[a-zA-Z0-9_]+\.py$`{.literal} 匹配的 Python
        脚本，而不仅仅是具有模糊的解释器指令。将上述命令添加到
        `%prep`{.literal} 部分，或者在 `%install`{.literal} 部分的末尾。
    -   修改打包的 Python 脚本，以便它们符合预期格式。为此，您也可以使用
        RPM 构建进程之外的 `pathfix.py`{.literal} 脚本。在 RPM
        构建之外运行 `pathfix.py`{.literal} 时，将上面的示例中的
        `%{python3}`{.literal} 替换为解释器指令的路径，如
        `/usr/bin/python3`{.literal}。
    :::
:::
::: itemizedlist
**其它资源**
-   [解释器调用](https://docs.fedoraproject.org/en-US/packaging-guidelines/Python/#_interpreter_invocation){.link}
:::
:::
:::
[]{#assembly_using-the-php-scripting-language_installing-and-using-dynamic-programming-languages.html}
::: chapter
::: titlepage
# []{#assembly_using-the-php-scripting-language_installing-and-using-dynamic-programming-languages.html#assembly_using-the-php-scripting-language_installing-and-using-dynamic-programming-languages}第 5 章 使用 PHP 脚本语言 {.title}
:::
超文本 Preprocessor(PHP)是主要用于服务器端脚本的通用脚本语言，可让您使用
Web 服务器运行 PHP 代码。
::: section
::: titlepage
# []{#assembly_using-the-php-scripting-language_installing-and-using-dynamic-programming-languages.html#installing-the-php-scripting-language_assembly_using-the-php-scripting-language}安装 PHP 脚本语言 {.title}
:::
这部分论述了如何安装 PHP。