Core 
Core 
Network
Network
Malicious 
Malicious 
DNS 
DNS 
Server
Server
Malicious 
Malicious 
HTTP 
HTTP 
Server
Server
Original
Original
DNS 
DNS 
Server
Server
Original 
Original 
HTTP 
HTTP 
Server
Server
AKA
AKA
2
2
5
5
Original
Original
destIP
destIP
Original
Original
srcIP
srcIP
3
3
Manipulated
Manipulated
destIP
destIP
Malicious
Malicious
srcIP
srcIP
4
4
Fig. 4. ALTER: Overview of the DNS redirection attack. We deploy a malicious relay as a MitM between the UE and the commercial network and alter the
destination IP address of a DNS request to redirect messages to our malicious DNS server. Eventually, the UE connects to the malicious HTTP server.


	
		
suggest this method for increasing the attack robustness but
use Ô¨Åxed values for the demonstration of ALTER.











"
!




	

 
Fig. 5. PDCP lengths of DNS requests in comparison to average TCP SYN
packets. We distinguish the relative frequencies of DNS requests in the uplink
UL (solid lines) and downlink DL (dotted lines) and the average of SYN
packets (vertical lines), respectively. The statistic is based on the corpus of
traces for our website Ô¨Ångerprinting.
other transmissions through our relay. This is challenged by
the fact that we receive encrypted data, i. e., we cannot identify
DNS requests by their disclosed payload. We overcome this
by identifying packets through their length: DNS packets are
usually smaller than other TCP packets.
Using this simple classiÔ¨Åcation method holds the risk of
confusing DNS requests with TCP SYN packets of comparable
length. We use our large corpus of website Ô¨Ångerprinting traces
to analyze the frequency of DNS, TCP SYN, and all other types
of packets in the up- and downlink stream (cf. Figure 5). In the
downlink direction, the distribution of DNS packet lengths and
the average TCP SYN length differ signiÔ¨Åcantly and allow for
a reliable distinction. This becomes more challenging in the
uplink direction, therefore, we suggest an interactive approach
for increasing the reliability of the decision.
Using the packet length as a Ô¨Ålter, we separate approxi-
mately 96.21 % of other TCP packets from a set of 3.79 %
of either TCP SYN or DNS packets. The relay then alters the
destination IP address of the candidate packets and tests the
response of the DNS server, i. e., if we receive a valid response
the packet was a DNS request and we forward the altered
packet. In all other cases, we forward an unaltered packet. We
3) Packet ModiÔ¨Åcation: Once we have identiÔ¨Åed a DNS
packet, we alter the destination IP address for the redirection.
We do this by applying a manipulation mask to the original
IP and Ô¨Çip bits in a way that results in the malicious server
address. In this manipulation, we must maintain the validity of
the IP and UDP header. Packet headers are protected against
transmission errors through a 16 bit checksum of the header
elements [25]. We need to consider this protection mechanism
when manipulating the destination IP address, as an invalid
checksum results in discarding the IP packet at the Ô¨Årst router
on the transmission path [26].
Calculating the Manipulation Mask. LTE user data is en-
crypted in AES in counter mode, i. e., the sender computes
the ciphertext c by XORing ‚äï the output of the encryption
algorithm with the plaintext m [27]. However, the encryption
algorithm is malleable, and an adversary can modify a cipher-
text into another ciphertext which later decrypts to a related
plaintext.
In particular, an active attacker can add a manipulation
mask via ‚äï to the ciphertext c, with the goal of Ô¨Çipping
certain bits in the message (see Figure 6). On the receiver side,
by again
the message is decrypted to obtain the plaintext m
with the same output
XORing the manipulated ciphertext c
of the encryption algorithm. As a result, we can Ô¨Ånd the same
bit Ô¨Çips as in the manipulation mask when inspecting the
(cid:2)
. For performing the manipulation in
manipulated plaintext m
a precise manner, the original plaintext m must be known to
the attacker to compute the manipulation mask:
(cid:2)
(cid:2)
mask = m ‚äï m
(cid:2)
.
(4)
The mask is Ô¨Çexible in a sense that it does not necessarily
cover the whole ciphertext c, but can be restricted to the
destination IP Ô¨Åeld. We know the exact offset to the IP address,
as the IP header is embedded at the beginning of the PDCP
frame. Therefore, we can apply the manipulation mask without
causing collateral damage in other parts of the payload and
(cid:18)(cid:18)(cid:19)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:42 UTC from IEEE Xplore.  Restrictions apply. 
Plaintext m
EEAX
EEA2: AES
IV (Direction, ‚Ä¶)
Key
Sender
Ciphertext c
Manipulation Mask
Active
Attacker
Manipulated 
Ciphertext c‚Äô
Receiver
Manipulated 
Plaintext m‚Äô
EEAX
EEA2: AES
IV (Direction, ‚Ä¶)
Key
Fig. 6. Overview of ALTER attack: We manipulate the destination IP address
of a DNS request using a speciÔ¨Åc manipulation mask. While maintaining the
header checksums of the packet, the manipulated plaintext m(cid:2) leads to a
redirection of the packet.
keep changes in the original message to a minimum. For
setting a speciÔ¨Åc new destination IP address, we beneÔ¨Åt from
the fact that IP addresses of DNS servers in mobile networks
are set by the core network, i. e., we can easily obtain the static
address of the provider‚Äôs default DNS server.
Compensation for Changes. Applying the manipulation mask
results in bit Ô¨Çips within the ciphertext of the packet. Even
though we know where to Ô¨Ånd the IP address Ô¨Åeld and can
determine an exact mask for the desired address update, this
still results in changes of the original payload. Consequently,
we compromise the validity of any checksum in the packet
and cause a drop of the packet during the transmission. If we
restrict our bit manipulation to the target IP, only addresses
of the same 16-bit sum as the original DNS resolver are valid
candidates.
We can circumvent this when all modiÔ¨Åcations made to
the header sum up to zero, i. e., when changing additional
bits besides the target IP address, we can restore the original
checksum and assure its validity. Having these options for
compensation, we gain more degrees of freedom in setting
the malicious destination IP address. In the following, we
introduce the necessary steps for compensating the IP and
UDP header checksum through additional bit manipulations.
IP Header Checksum. We beneÔ¨Åt from the fact that, besides
the destination IP address Ô¨Åeld, all other non-routing Ô¨Åelds
in the IP header are open to modiÔ¨Åcations as long as we
can predict or know their contents. A good candidate for
compensation in the uplink is the Time To Live (TTL) Ô¨Åeld,
as we can determine the value and a modiÔ¨Åcation has only
minor inÔ¨Çuence on the routing. We can obtain the default
value for the UE‚Äôs TTL by empirical analyses or by analyzing
the operating system of the mobile phone. We know that
the TTL is not decremented, when we are manipulating the
packet before the Ô¨Årst router, hence, we know the exact value.
Adjusting the TTL Ô¨Åeld is already sufÔ¨Åcient to achieve a valid
checksum. The target IP address must fulÔ¨Åll the following
requirements:
The 16-bit sum of the original IP address, represented by
its octet, e. g., ip_a.ip_b.ip_c.ip_d, must equal the
sum of the target IP plus the TTL Ô¨Åeld (cf. Figure 7). In
this case, the checksum remains valid even though the IP
address and the TTL are manipulated. The TTL Ô¨Åeld can be
incremented or decremented. We need to ensure that packets
with a decremented TTL can still reach the malicious server
within the remaining time until the hop limit is reached.
In the downlink direction, the exact value of the TTL Ô¨Åeld
is unknown, since it depends on the number of hops that
were traversed previously to reaching our malicious relay. This
prevents us from altering the TTL Ô¨Åeld in a deterministic
way. Rather than manipulating the TTL Ô¨Åeld, we exploit the
identiÔ¨Åcation Ô¨Åeld of the IP packet. This Ô¨Åeld is used for
the fragmentation of IP packets and is a 16 bit value. Since
we are in control of the malicious DNS server, we set the
identiÔ¨Åcation Ô¨Åeld of the IP packet to a predetermined value.
Manipulating the source IP address in downlink direction at
the relay, we can now use the identiÔ¨Åcation Ô¨Åeld to compensate
any differences to the original IP address. Consequently, the
IP header checksum remains valid on the downlink path and
the UE accepts the packet.
We emphasize that the above limitation only applies for
IPv4 transmissions, as IPv6 transmissions do not use any
header checksums. Consequently, we do not face any limi-
tations in the choice of the target host for IPv6 and the attack
can be performed without restrictions.
UDP Header Checksum. Similar to the IP header checksum,
altering the IP address also affects the UDP checksum that is
a 16 bit sum over the IP pseudo header and UDP payload [28].
While running the malicious servers helps to ignore checksums
in the uplink direction, we must assure a successful checksum
validation in downlink direction for the UE to accept the DNS
response. For the downlink direction, we beneÔ¨Åt from the fact
that UDP checksums set zero should be ignored by the UDP
stack [28]. Simply setting the UDP checksum of the DNS
response to zero circumvents the checksum validation and the
DNS response remains valid, even in cases where the IP source
address is modiÔ¨Åed.
C. Experiments
We demonstrate the feasibility of ALTER in a realistic setup
using a commercial network, phone, and SIM card. In the
following, we describe the experimental setup including details
Original
ip.a     ip.b
ip.c     ip.d
TTL      00
‚àë 
!
=
‚àë 
Target
ip.a'   ip.b'
ip.c'   ip.d'
TTL'     00'
Fig. 7. Manipulations to the IP address must sum up to zero for maintaining
valid checksums. We can modify additional non-routing Ô¨Åelds to gain more
degrees of freedom for the address manipulation.
(cid:18)(cid:18)(cid:20)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:42 UTC from IEEE Xplore.  Restrictions apply. 
of the malicious relay. In our demo exploit, we redirect a
benign DNS request for the domain example.org to a DNS
server under our control, which then replies with a malicious
IP address. The technical setup and experimental results are
as follows.
1) Setup: We use the following components for our exper-
imental setup, as depicted in Figure 9.
‚Ä¢ UE. We use a COTS mobile phone (LG Nexus 5) isolated
from outside radio connections using a shielding box
with a commercial SIM card, capable of connecting to
a legitimate real-world LTE network. To operate the UE
in a deterministic way within the shielding box, we use
the Android Debug Bridge (ADB). Furthermore, we use
SIMtrace [29] to extract the session key so that we can
later analyze the traces recorded by the malicious relay.
‚Ä¢ Malicious Relay. Our malicious relay consists of two
SDRs with a modiÔ¨Åed version of the srsLTE v17.09
stack implementation [14]. The Ô¨Årst SDR emulates an
eNodeB towards the UE, while the second SDR emulates
the UE towards the commercial network.
‚Ä¢ Commercial eNodeB and Network. We connect to a
commercial network and use a SIM card according to
the analyzed commercial network.
‚Ä¢ Malicious DNS Server. To operate our rogue DNS server,
we use a virtual Ubuntu v16.04 server entity in the
Amazon AWS cloud running a DNS server. We use a
modiÔ¨Åed conÔ¨Åguration of the DNS server for redirecting
requests to the malicious HTTP server. The DNS server
can be reached via an IP address matching the require-
ments described in Figure 7.
‚Ä¢ Malicious HTTP Server. The rogue HTTP server uses
the same Amazon AWS instance as the malicious DNS
server and hosts an Apache web server in standard
conÔ¨Åguration.
While the DNS and HTTP server function as proof-of-
concept destinations for the redirection of DNS packets and
do not depend on any characteristic conÔ¨Ågurations, the speci-
Ô¨Åcation of the malicious relay is crucial for the ALTER attack.
Our implementation of this relay is as follows.
Malicious Relay. Figure 8 depicts the architecture of the
malicious relay based upon the open source srsLTE stack [14].
Towards the victim UE, the relay emulates a genuine eNodeB
(left side) by broadcasting the identiÔ¨Åers for the corresponding
network. This is represented by the eNodeB component of the
relay. Towards the network, the relay acts as a UE (right side).
Both components (eNodeB and UE) forward control plane and
user plane messages in up- and downlink direction.
We leave the physical layer of the UE and the eNodeB
component unaltered according to the original implementa-
tions of srsUE and srsENB, respectively. On the MAC layer of
the eNodeB, we add a component for guessing the encrypted
conÔ¨Åguration parameters (scheduling requests, channel quality
indicator), as introduced in Section IV-B1. The RLC layer
simply passes messages to the PDCP layer, which then distin-
guishes user and control plane messages. We add a message
guessing module on the RRC layer for the eNodeB and the UE
UE
RRC
PDCP