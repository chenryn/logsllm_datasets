tion threats and will likely improve as they mature, we believe
that two new strategies could be developed in the near future
to increase both host protection and user awareness.
4.2.1
”Best before” date
As quantiﬁed earlier, a signiﬁcant fraction of the Web browsers
used to navigate the Internet on a daily basis have been iden-
tiﬁed as being not up-to-date in terms of having the latest se-
curity patches applied. As such, they put the users that rely
upon them at risk and infections by malware from the Web
can expose personal data stored on their hosts to attackers. We
believe that, in the majority of cases, the absence of critical
or important updates to the Web browsers can be attributed to
three important factors; technological (can’t do), motivational
(don’t care), or informational (don’t know).
When designing a solution for the vulnerable Web browser
problem, it is important to consider the three parties involved:
the end user, the Web browser vendor, and the Web service
provider. Each of these may intervene and help remedy the
problem in different ways.
We believe that a critical path to increasing the security of
Web browsers (indeed any and all inter-networked applica-
tions including online game clients) involves making the user
aware of the risk they are exposing themselves and their host
to, but without introducing additional complexity.
Almost all users are familiar with the concept of ”sell by”,
”expires on”, or ”best before” date stamps on perishable goods.
Consumers tend to rely on this date information in order to de-
cide whether to purchase the goods, when to use the goods
and when to dispose of the goods. Once a particular perish-
able good has exceeded its ”best before” date, the consumer is
forced to evaluate their personal risk to using it or disposing
of it. The greater the lapse between the ”best before” date and
the current date, the more risk the consumer assumes by not
disposing of it.
Given the state of the software industry and the growing
threat of exploitable vulnerabilities within all applications (not
just Web browsers), we believe that the establishment of a
”best before” date for all new software releases could prove
an invaluable means to educating the user to patch or ”refresh”
their software applications. The same ”best before” date infor-
mation could also be leveraged by Internet businesses to help
evaluate or mitigate the risk of customers who are using out of
date software and are consequently at a higher risk of having
been compromised.
In Table 5, we compare the mechanisms of the software in-
dustry with the practices of the food industry.
In general, the food industries implementation of a "best be-
fore" date has been accepted as a valuable contribution in en-
abling consumers to evaluate the integrity of their purchase
and the likelihood of spoilage. As illustrated above, the ecosys-
tem developed by the food industry provides a good compari-
son with inadequacies commonly identiﬁed with the software
industry. By developing a "best before" system for software
applications, we believe that both users and businesses could
be better informed - particularly in the realm of Web browsers
and plug-in applications.
A public mindset change is required to counter evolving In-
ternet threats, and a "best before" dating system would make
visible the risks of using out-dated and insecure software. In-
stead of assuming software to be secure, a "best before" dating
system would enable the notiﬁcation of upcoming expiration
and risk associated with out of date or unpatched software so
that the user is aware of the need to keep installed software
"fresh". While the "best before" date for software is not ac-
tually known at the time of a software release, it will be de-
ﬁned upon detection and availability of a security patch for an
already released version. Therefore, it has to be queried fre-
quently by software in use.
In order to achieve a viable "best before" dating system, soft-
ware vendors need to follow stricter practices in the alloca-
tion of version number information and make those version
numbers more accessible. For example Firefox, Safari, and
Opera send detailed version information in the USER-AGENT
header ﬁeld, while Internet Explorer only provides major ver-
sion information (excluding patch information). This detailed
level of information enables service providers to remotely es-
tablish the patching level of the Web browser and perhaps im-
plement their own "best before" look-up services. For exam-
ple, an online banking service may use the version information
supplied by the user’s Web browser to establish when the soft-
ware was last updated and to assess the level of risk the host
has been compromised with malware. Armed with that infor-
mation, the banking application may decide to implement ad-
ditional safeguards and inspection on subsequent transactions
by the user.
While some may argue that more detailed version informa-
tion within the Web browser USER-AGENT ﬁeld makes it
easier for an attacker to target speciﬁc versions of a Web browser,
this is irrelevant given current attack methodologies that sim-
ply iterate through ten’s or hundred’s of exploits hoping that
one will work. Access to such version information by the at-
tacker would not increase the probability of exploitation, but
merely reduce the volume of data sent to the browser by the
attacker’s malicious server.
Visualizing a ”best before” date
We believe that the "best before" dating concept could be
built into most existing software applications, and thereby pro-
vide a convenient and persistent validation of the likely in-
tegrity of the software. For example, popular Web browsers
Food Industry
Software Industry
User mindset
(today)
Food is a perishable good
Some software is used for years without
update (to prevent compatibility issues)
Information and awareness
The "best before" date is easily accessi-
ble and clearly visible on all products.
Well
accepted
and
enforced
stan-
dard/practice.
If at all, the patch level of the browser
is only visible upon request.
If at all,
the state of auto-update
(enabled/disabled/last checked) is only
visible upon request.
No
standard
or
requirement
for
software vendors to make security
information available in their product
to the end user (e.g., display patch level
or auto-update disabled).
User
The consumer checks the expiration
date before using food
A consumer is free to eat food af-
ter the "best before" date expired.
However, he does so at his own risk
and he is aware of it.
Software version information is avail-
able, but not all software packages are
capable of automatically checking for
updates.
No restriction for a user to work
with insecure, old and unsupported
software. Users are typically not aware
of the risk.
Service provider (reseller or
web service provider)
Retailers
are
typically
not
legally
allowed to sell products after the "best
before" date.
Vendor is liable for damages.
Web service providers do not check for
insecure versions of Web browsers or
browser plug-ins.
No liability for software vendors.
Manufacturer or producer
Producer may be liable if food sold be-
fore expiration turns out to be bad.
No liability for software vendors.
A vendor is not obliged to provide
software updates
Table 5: Comparison of the users’ mindset with regard to the food industry and the software industry
Figure 5: Example "best before" implementation on Web browser
could display a visual warning of expiry and how many patches
are currently missing as illustrated in Figure 5.
Armed with more concise USER-AGENT version informa-
tion, popular websites could also visually alert users (see Fig-
ure 6) to the fact that their Web browser is operating beyond
its "best before" date and any missing updates (including pro-
viding shortcuts to the location of appropriate updates).
4.2.2
Authentic sources of most recent plug-in
versions
As previously discussed, auto-update mechanisms can be a
valuable device for keeping Web browsers up to date with the
latest security patches and ﬁxes. However, auto-update mech-
anisms typically do not encompass plug-ins not produced by
the vendor or plug-ins not provided as part of a default in-
stallation. The Firefox Web browser auto-update mechanism
is alerting users to compatible updates for plug-ins installed
through, and registered by, the browser - but typically only
encompasses a handful of plug-in applications commonly ac-
cessible through Web browser technologies. We believe that
there are two key reasons for this - no convenient method of
checking and cataloguing of installed plug-ins on the host, and
no authoritative source of plug-in current version information
(assisted by an update location).
Any examination of the last few years of vulnerability dis-
closures will reveal a plethora of critical, remotely exploitable,
vulnerabilities in practically all plug-in technologies (e.g., Mi-
crosoft ActiveX, Adobe Flash, Apple QuickTime, etc.). These
browser plug-ins must be similarly patched and updated, just
like the Web browser itself. In order to achieve this, it is vi-
Figure 6: Example "best before" implementation on a popular Web service, e.g., Wikipedia
tal that the version information for an installed plug-in can
be quickly compared with an authoritative source to discover
whether the host has the most current and secure version.
However, it is inefﬁcient for the different engineering teams
of Web browsers and plug-ins to each develop independent so-
lutions for the same problem. We propose that information of
the most recent secure version of browsers and popular plug-
ins should be systematically collected by trusted organizations
and made accessible using a standardized querying process
that also ensures a degree of conﬁdence and authenticity in the
version information. Using this process, Web browsers could
easily check the status of the installed plug-ins and inform the
user accordingly, as well as provide the information necessary
to download and install the latest update. The same protocol
could also be used by Web service operators to check the "best
before" date information of client browsers and plug-ins re-
questing their services, as suggested in Section 4.2.1.
Conveniently, services and processes to collect and dissemi-
nate relevant security information to the public do already ex-
ist: CERTs and several private security information providers
[23, 24, 25, 26, 27] already process vulnerability and patch
information of various vendors and software packages. Pro-
viding secure version information on a standardized protocol
would be in-line with their existing activities.
For plug-in technologies not registered or recorded by a search-
able central authority (such as plug-ins no longer supported by
the vendor that created them), the use of a "best before" dating
system, reinforced by Web browser actions such as disabling
all access and calls to the component, would likely aid in pro-
tecting vulnerable hosts.
5.
CONCLUSION
Access to Google’s global Web server logs enabled the au-
thors to provide the ﬁrst in-depth global perspective on the
state of insecurity for Web browser technologies. Understand-
ing the nature of the threats against Web browser and their
plug-in technologies is important for continued Internet usage.
As more users and organizations depend upon these browser
technologies to access ever more complex and distributed busi-
ness applications, any threats to the underlying platform equate
to a direct risk to business continuity and integrity.
By measuring the patching processes of Web browser user
populations, we have been able to identify the potential global
scale of Web-based malicious exploitation of browser tech-
nologies and prove how existing mechanisms such as Firefox’s
auto-update can outperform more complex and less timely so-
lutions.
Based on direct measurements of the adoption of new Web
browser updates based upon available USER-AGENT major
and minor browser software version numbers, and by com-
bining that data with Secunia’s latest PSI local-host scanning
results for plug-in patch adoption (even though sample sizes
are radically different), we quantiﬁed the lower bounds of the
Web browser population vulnerable to attacks through security
weaknesses.
Unfortunately, just like a ﬂoating iceberg, we were only able
to measure and accurately estimate the tip above the water.
The tip of the Web browser insecurity iceberg was measured to
be 637 million (or 45.2%) Internet users at risk worldwide due
to not running the latest most secure browser version. Mean-
while, hidden below the surface, the iceberg extends further
encompassing users that rely on outdated vulnerable browser
plug-ins. Due to an inability to passively enumerate the ver-
sions of any plug-ins hosts have installed (due to this informa-
tion not typically being imparted in HTTP requests logged by
Web servers), this was out of scope for our passive measure-
ment based study.
To help combat existing and rapidly evolving threats such as
malicious drive-by downloads, we have proposed the concept
of a "best before" date for software and related mechanisms
to tackle user awareness and provide a vehicle for online busi-
nesses to better assess the risk level of their customers’ hosts.
While none of the mechanisms proposed within this paper
can guarantee to fully protect against exploitation, we are con-
ﬁdent that widespread adoption and improvements of these
technologies would dramatically reduce the dimensions of the
insecurity iceberg and shrink the attack surface.
Acknowledgements
We would like to thank Bernhard Plattner, Head of the Com-
munication Systems Group at ETH Zurich, for his valuable
feedback and support for this paper.
6.
REFERENCES
[1] Dan Goodin, TheRegister, “Attack code in the wild
targets new (sort of) Adobe Flash vuln,” http://www.
theregister.co.uk/2008/05/27/new_adobe_ﬂash_vuln,
May 2008.
[2] Adobe Inc., “Browser plug-in Market Shares,”
http://www.adobe.com/products/player_census/
ﬂashplayer/tech_breakdown.html.
[3] IBM Internet Security Systems - X-Force, “IBM
Internet Security Systems X-Force 2007 Trend
Statistics,” http://www.ibm.com/services/us/iss/pdf/etr_
xforce-2007-annual-report.pdf, December 2007.
[4] Heise security, “Hundreds of thousands of web pages
infected with malicious JavaScript,”
http://www.heise-online.co.uk/news/, April 2008.
[5] Websense, “Mass Attack JavaScript injection - UN and
UK Government websites compromised,” http:
//securitylabs.websense.com/content/Alerts/3070.aspx,
April 2008.
[6] Dan Goodin, TheRegister, “Trend Micro gets slashed in
attack of the killer iframes,” http://www.theregister.co.
uk/2008/03/13/trend_micro_website_infected, March
2008.
[7] F-Secure Inc., “Mass SQL Injection,” http:
//www.f-secure.com/weblog/archives/00001427.html,
April 2008.
[8] SANS, “Mass File Injection Attack,”
http://isc.incidents.org/diary.html?storyid=4405, May
2008.
[9] N. Provos, D. McNamee, P. Mavrommatis, K. Wang,
and N. Modadugu, “The Ghost In The Browser -
Analysis of Web-based Malware.” In Proceedings of
HotBots 2007, Usenix, April 2007.
[10] NetApplications.com, “Search Engine Market Share,”
http://marketshare.hitslink.com/articles.aspx, March
2008.
[11] NetApplications.com, “Search Engine Worldwide
Market Share,”
http://marketshare.hitslink.com/report.aspx?qprid=4,
April 2008.
[12] Janco Associates Inc., “Browser and OS Market Share
White Paper,”
http://www.itproductivity.org/browser.php, June 2008.
[13] NetApplications.com, “Browser Market Share,”
http://marketshare.hitslink.com/report.aspx?qprid=3.
[14] OneStat.com, “OneStat WebAnalytics,”
http://www.onestat.com/html/aboutus_
pressbox53-ﬁrefox-mozilla-browser-market-share.html.
[15] Jupitermedia Corporation, “TheCounter.com. Web
Analytics,” http:
//www.thecounter.com/stats/2008/June/browser.php.
[16] T. Berners-Lee, R. Fielding, and H. Nielsen, “Hypertext
transfer protocol - HTTP/1.0. RFC 1945, Internet
Engineering Task Force,” IETF RFC 1945, May 1996.
[17] Secunia, “Secunia PSI study: 28% of all detected
applications are insecure; current last month statistics,”
http://secunia.com/blog/11/.
[18] B. Livingston, “Is IE 7 Really More Secure Than IE 6?”
http://itmanagement.earthweb.com/columns/executive_
tech/article.php/3639566, October 2006.
[19] S. Hardmeier, “Microsoft Better Browsing - Internet
Explorer 7 offers improved security and productivity,”
http://windowshelp.microsoft.com/Windows/en-us/help/
a426bb85-708c-4b75-87e2-874f9be3b4aa1033.mspx,
October 2006.
[20] Internet World Statistics, “World Internet Users and
Population Statsitics,”
http://www.internetworldstats.com/stats.htm, March
2008.
[21] Secunia Inc., “Secunia Software Inspector Statistics,”
http://secunia.com/software_inspector_statistics, May
2008.
[22] CNET, “Mozilla CEO says Apple’s Safari auto-update
’wrong’,”
http://news.cnet.com/8301-10784_3-9901006-7.html,
May 2008.
[23] US-CERT, “United States Computer Emergency
Readiness Team (US-CERT),” http://www.us-cert.gov.
[24] Secunia Inc., “Secunia,” http://www.secunia.com.
[25] IBM Internet Security Systems - X-Force, “IBM ISS
X-Force,” http://xforce.iss.net.
[26] SecurityFocus/Symantec, “SecurityFocus,”
http://www.securityfocus.com.
[27] FrSIRT, “French Security Incident Response Team
(FrSIRT),” http://www.frsirt.com.