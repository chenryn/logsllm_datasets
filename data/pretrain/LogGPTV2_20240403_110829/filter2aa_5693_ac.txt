                .withMarkupLanguage(MarkupLanguage.ASCIIDOC)
                .build();
        Swagger2MarkupConverter.from(remoteSwaggerFile)
                .withConfig(config)
                .build()
                .toFolder(outputDirectory);
    }
}
```
以上代码内容很简单，大致说明几个关键内容：
- MarkupLanguage.ASCIIDOC：指定了要输出的最终格式。除了 ASCIIDOC 之外，还有 MARKDOWN 和 CONFLUENCE_MARKUP，分别定义了其他格式，后面会具体举例。
- from(remoteSwaggerFile)：指定了生成静态部署文档的源头配置，可以是这样的 URL 形式，也可以是符合 Swagger 规范的 String 类型或者从文件中读取的流。如果是对当前使用的 Swagger 项目，我们通过使用访问本地 Swagger 接口的方式，如果是从外部获取的 Swagger 文档配置文件，就可以通过字符串或读文件的方式
- toFolder(outputDirectory)：指定最终生成文件的具体目录位置
在执行了上面的测试用例之后，我们就能在当前项目的 src 目录下获得如下内容：
可以看到，这种方式在运行之后就生成出了4个不同的静态文件。
**输出到单个文件**
如果不想分割结果文件，也可以通过替换 toFolder(Paths.get("src/docs/asciidoc/generated")) 为 toFile(Paths.get("src/docs/asciidoc/generated/all"))，将转换结果输出到一个单一的文件中，这样可以最终生成 html 的也是单一的。
**通过 Maven 插件来生成**
除了通过上面编写 Java 代码来生成的方式之外，swagger2markup 还提供了对应的 Maven 插件来使用。对于上面的生成方式，完全可以通过在 pom.xml 中增加如下插件来完成静态内容的生成。
```xml
    io.github.swagger2markup
    swagger2markup-maven-plugin
    1.3.3
        http://localhost:8080/v2/api-docs
        src/docs/asciidoc/generated-by-plugin
            ASCIIDOC
```
在使用插件生成前，需要先启动应用。然后执行插件，就可以在 src/docs/asciidoc/generated-by-plugin 目录下看到也生成了上面一样的 adoc 文件了。
**生成HTML**
在完成了从 Swagger 文档配置文件到 AsciiDoc 的源文件转换之后，就是如何将 AsciiDoc 转换成可部署的 HTML 内容了。这里继续在上面的工程基础上，引入一个 Maven 插件来完成。
```xml
    org.asciidoctor
    asciidoctor-maven-plugin
    1.5.6
   	    src/docs/asciidoc/generated
   	    src/docs/asciidoc/html
   	    html
   	    coderay
            left
```
通过上面的配置，执行该插件的 asciidoctor:process-asciidoc 命令之后，就能在 src/docs/asciidoc/html 目录下生成最终可用的静态部署 HTML 了。在完成生成之后，可以直接通过浏览器来看查看，你就能看到类似下图的静态部署结果：
## 找回启动日志中的请求路径列表
Spring构建的Web应用在启动的时候，都会输出当前应用创建的HTTP接口列表。
这些日志接口信息是由 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping 类在启动的时候，通过扫描 Spring MVC 的 @Controller、@RequestMapping 等注解去发现应用提供的所有接口信息。然后在日志中打印，以方便开发者排查关于接口相关的启动是否正确。
从Spring Boot 2.1.0版本开始，就不再打印这些信息了，完整的启动日志变的非常少.
**找回日志中请求路径列表**
为什么在Spring Boot 2.1.x版本中不再打印请求路径列表呢？
主要是由于从该版本开始，将这些日志的打印级别做了调整：从原来的INFO调整为TRACE。所以，当我们希望在应用启动的时候打印这些信息的话，只需要在配置文件增增加对RequestMappingHandlerMapping类的打印级别设置即可，比如在application.properties中增加下面这行配置：
```conf
logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=trace
```
在增加了上面的配置之后重启应用，便可以看到更多的日志打印
---
## 使用SpringFox3生成Swagger文档
创建一个Spring Boot项目
pom.xml中添加依赖
```xml
    io.springfox
    springfox-boot-starter
    3.0.0
```
应用主类增加注解 @EnableOpenApi 和 @EnableWebMvc
```java
@EnableWebMvc
@EnableOpenApi
@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}
```
配置一些接口例子
```java
@Api(tags="用户管理")
@RestController
public class UserController {
    @ApiOperation("创建用户")
    @PostMapping("/users")
    public User create(@RequestBody @Valid User user) {
        return user;
    }
    @ApiOperation("用户详情")
    @GetMapping("/users/{id}")
    public User findById(@PathVariable Long id) {
        return new User("bbb", 21, "上海", "PI:EMAIL");
    }
    @ApiOperation("用户列表")
    @GetMapping("/users")
    public List list(@ApiParam("查看第几页") @RequestParam int pageIndex,
                           @ApiParam("每页多少条") @RequestParam int pageSize) {
        List result = new ArrayList<>();
        result.add(new User("aaa", 50, "北京", "PI:EMAIL"));
        result.add(new User("bbb", 21, "广州", "PI:EMAIL"));
        return result;
    }
    @ApiIgnore
    @DeleteMapping("/users/{id}")
    public String deleteById(@PathVariable Long id) {
        return "delete user : " + id;
    }
}
@Data
@NoArgsConstructor
@AllArgsConstructor
@ApiModel("用户基本信息")
public class User {
    @ApiModelProperty("姓名")
    @Size(max = 20)
    private String name;
    @ApiModelProperty("年龄")
    @Max(150)
    @Min(1)
    private Integer age;
    @NotNull
    private String address;
    @Pattern(regexp = "^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$")
    private String email;
}
```
启动应用！访问 swagger 页面：http://localhost:8080/swagger-ui/index.html
SpringFox3 移除了原来默认的 swagger 页面路径：http://host/context-path/swagger-ui.html，新增了两个可访问路径：http://host/context-path/swagger-ui/index.html 和 http://host/context-path/swagger-ui/
通过调整日志级别，还可以看到新版本的 swagger 文档接口也有新增，除了以前老版本的文档接口 /v2/api-docs 之外，还多了一个新版本的 /v3/api-docs 接口。
---
## 使用消息转换器扩展XML格式的请求和响应
Spring Boot 中处理 HTTP 请求的实现是采用的 Spring MVC。而在 Spring MVC 中有一个消息转换器这个概念，它主要负责处理各种不同格式的请求数据进行处理，并包转换成对象，以提供更好的编程体验。
在 Spring MVC 中定义了 HttpMessageConverter 接口，抽象了消息转换器对类型的判断、对读写的判断与操作，具体可见如下定义：
```java
public interface HttpMessageConverter {
    boolean canRead(Class clazz, @Nullable MediaType mediaType);
    boolean canWrite(Class clazz, @Nullable MediaType mediaType);
    List getSupportedMediaTypes();
    T read(Class clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException;
    void write(T t, @Nullable MediaType contentType, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException;
}
```
HTTP 请求的 Content-Type 有各种不同格式定义，如果要支持 Xml 格式的消息转换，就必须要使用对应的转换器。Spring MVC 中默认已经有一套采用 Jackson 实现的转换器 MappingJackson2XmlHttpMessageConverter。
**引入Xml消息转换器**
在传统Spring应用中，我们可以通过如下配置加入对Xml格式数据的消息转换实现：
```java
@Configuration
public class MessageConverterConfig1 extends WebMvcConfigurerAdapter {
    @Override
    public void configureMessageConverters(List> converters) {
        Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.xml();
        builder.indentOutput(true);
        converters.add(new MappingJackson2XmlHttpMessageConverter(builder.build()));
    }
}
```
在 Spring Boot 应用不用像上面这么麻烦，只需要加入 jackson-dataformat-xml 依赖，Spring Boot 就会自动引入 MappingJackson2XmlHttpMessageConverter 的实现：
```xml
    com.fasterxml.jackson.dataformat
    jackson-dataformat-xml
```
同时，为了配置Xml数据与维护对象属性的关系所要使用的注解也在上述依赖中，所以这个依赖也是必须的。
**定义对象与Xml的关系**
做好了基础扩展之后，下面就可以定义Xml内容对应的Java对象了，比如：
```java
@Data
@NoArgsConstructor
@AllArgsConstructor
@JacksonXmlRootElement(localName = "User")
public class User {
    @JacksonXmlProperty(localName = "name")
    private String name;
    @JacksonXmlProperty(localName = "age")
    private Integer age;
}
```
其中：@Data、@NoArgsConstructor、@AllArgsConstructor是lombok简化代码的注解，主要用于生成get、set以及构造函数。@JacksonXmlRootElement、@JacksonXmlProperty注解是用来维护对象属性在xml中的对应关系。
上述配置的User对象，其可以映射的Xml样例如下
```xml
	aaaa
	10
```
**创建接收xml请求的接口**
完成了要转换的对象之后，可以编写一个接口来接收xml并返回xml，比如：
```java
@Controller
public class UserController {
    @PostMapping(value = "/user",
        consumes = MediaType.APPLICATION_XML_VALUE,
        produces = MediaType.APPLICATION_XML_VALUE)
    @ResponseBody
    public User create(@RequestBody User user) {
        user.setName("didispace.com : " + user.getName());
        user.setAge(user.getAge() + 100);
        return user;
    }
}
```
---
## Source & Reference
- [Spring Boot 2.x基础教程：构建RESTful API与单元测试](https://blog.didispace.com/spring-boot-learning-21-2-1/)
- [Spring Boot 2.x基础教程：使用Swagger2构建强大的API文档](https://blog.didispace.com/spring-boot-learning-21-2-2/)
- [Spring Boot 2.x基础教程：JSR-303实现请求参数校验](https://blog.didispace.com/spring-boot-learning-21-2-3/)
- [spring boot中使用Bean Validation做优雅的参数校验](https://blog.csdn.net/w57685321/article/details/106783433)
- [Spring Boot 2.x基础教程：Swagger接口分类与各元素排序问题详解](https://blog.didispace.com/spring-boot-learning-21-2-4/)
- [Spring Boot 2.x基础教程：Swagger静态文档的生成](https://blog.didispace.com/spring-boot-learning-21-2-5/)
- [Spring Boot 2.x基础教程：找回启动日志中的请求路径列表](https://blog.didispace.com/spring-boot-learning-21-2-6/)
- [Spring Boot 2.x基础教程：使用SpringFox 3生成Swagger文档](https://blog.didispace.com/spring-boot-learning-21-2-7/)
- [Spring Boot 2.x基础教程：如何扩展XML格式的请求和响应](https://blog.didispace.com/spring-boot-learning-21-2-8/)