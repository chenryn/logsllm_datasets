# Kernel Pwn 学习之路(一)
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 前言
由于关于Kernel安全的文章实在过于繁杂，本文有部分内容大篇幅或全文引用了参考文献，若出现此情况的，将在相关内容的开头予以说明，部分引用参考文献的将在文件结尾的参考链接中注明。
本文主要介绍了Kernel的相关知识以及栈溢出在Kernel中的利用，更多的利用思路以及更多的实例将在后续文章中说明
## 0x02 kernel简介
📚：本部分全文引用了[CTF-Wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/)的相关内容。
###  什么是Kernel
kernel 也是一个程序，用来管理软件发出的数据 I/O 要求，将这些要求转义为指令，交给 CPU 和计算机中的其他组件处理，kernel
是现代操作系统最基本的部分。
kernel 最主要的功能有两点：
  1. 控制并与硬件进行交互
  2. 提供 application 能运行的环境
包括 I/O，权限控制，系统调用，进程管理，内存管理等多项功能都可以归结到上边两点中。
需要注意的是， **kernel 的 crash 通常会引起重启** 。
###  Ring Model
intel CPU 将 CPU 的特权级别分为 4 个级别：Ring 0, Ring 1, Ring 2, Ring 3。
Ring 0 只给 OS 使用，Ring 3 所有程序都可以使用，内层 Ring 可以随便使用外层 Ring 的资源。
使用 Ring Model 是为了提升系统安全性，例如某个间谍软件作为一个在 Ring 3
运行的用户程序，在不通知用户的时候打开摄像头会被阻止，因为访问硬件需要使用 being 驱动程序保留的 Ring 1 的方法。
大多数的现代操作系统只使用了 Ring 0 和 Ring 3。
###  Model Change
####  user space to kernel space
当发生 `系统调用`，`产生异常`，`外设产生中断`等事件时，会发生用户态到内核态的切换，具体的过程为：
  1. 通过 `swapgs` 切换 GS 段寄存器，将 GS 寄存器值和一个特定位置的值进行交换，目的是保存 GS 值，同时将该位置的值作为内核执行时的 GS 值使用。
  2. 将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里，将 CPU 独占区域里记录的内核栈顶放入`RSP/ESP`。
  3. 通过 push 保存各寄存器值，具体的 [代码](http://elixir.free-electrons.com/linux/v4.12/source/arch/x86/entry/entry_64.S) 如下: 
        ENTRY(entry_SYSCALL_64)
    /* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 */
    SWAPGS_UNSAFE_STACK
    /* 保存栈值，并设置内核栈 */
    movq %rsp, PER_CPU_VAR(rsp_scratch)
    movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp
    /* 通过push保存寄存器值，形成一个pt_regs结构 */
    /* Construct struct pt_regs on stack */
    pushq  $__USER_DS                /* pt_regs->ss */
    pushq  PER_CPU_VAR(rsp_scratch)  /* pt_regs->sp */
    pushq  %r11                      /* pt_regs->flags */
    pushq  $__USER_CS                /* pt_regs->cs */
    pushq  %rcx                      /* pt_regs->ip */
    pushq  %rax                      /* pt_regs->orig_ax */
    pushq  %rdi                      /* pt_regs->di */
    pushq  %rsi                      /* pt_regs->si */
    pushq  %rdx                      /* pt_regs->dx */
    pushq  %rcx tuichu               /* pt_regs->cx */
    pushq  $-ENOSYS                  /* pt_regs->ax */
    pushq  %r8                       /* pt_regs->r8 */
    pushq  %r9                       /* pt_regs->r9 */
    pushq  %r10                      /* pt_regs->r10 */
    pushq  %r11                      /* pt_regs->r11 */
    sub $(6*8), %rsp                 /* pt_regs->bp, bx, r12-15 not saved */
  4. 通过汇编指令判断是否为 `x32_abi`。
  5. 通过系统调用号，跳到全局变量 `sys_call_table` 相应位置继续执行系统调用。
####  kernel space to user space
退出时，流程如下：
  1. 通过 `swapgs` 恢复 GS 值
  2. 通过 `sysretq` 或者 `iretq` 恢复到用户控件继续执行。如果使用 `iretq` 还需要给出用户空间的一些信息(`CS, eflags/rflags, esp/rsp` 等)
####  关于 syscall
系统调用，指的是用户空间的程序向操作系统内核请求需要更高权限的服务，比如 IO 操作或者进程间通信。系统调用提供用户程序与操作系统间的接口，部分库函数（如
scanf，puts 等 IO 相关的函数实际上是对系统调用的封装 （read 和 write)）。
> 在 _/usr/include/x86_64-linux-gnu/asm/unistd_64.h_ 和
> _/usr/include/x86_64-linux-gnu/asm/unistd_32.h_ 分别可以查看 64 位和 32 位的系统调用号。
>
> 同时推荐一个很好用的网站 [Linux Syscall
> Reference](https://syscalls.kernelgrok.com/)，可以查阅 32 位系统调用对应的寄存器含义以及源码。64
> 位系统调用可以查看 [Linux Syscall64 Reference](https://syscalls64.paolostivanin.com/)
####  关于 ioctl
在 man 手册中，关于这个函数的说明如下：
    NAME
           ioctl - control device
    SYNOPSIS
           #include 
           int ioctl(int fd, unsigned long request, ...);
    DESCRIPTION
           The ioctl() system call manipulates the underlying device parameters of special
           files.  In particular, many  operating  characteristics  of  character  special
           files  (e.g., terminals) may be controlled with ioctl() requests.  The argument
           fd must be an open file descriptor.
           The second argument is a device-dependent request code.  The third argument  is
           an  untyped  pointer  to  memory.  It's traditionally char *argp (from the days
           before void * was valid C), and will be so named for this discussion.
           An ioctl() request has encoded in it whether the argument is an in parameter or
           out  parameter, and the size of the argument argp in bytes.  Macros and defines
           used in specifying an ioctl() request are located in the file .
可以看出 ioctl 也是一个系统调用，用于与设备通信。
`int ioctl(int fd, unsigned long request, ...)` 的第一个参数为打开设备 (open) 返回的
[文件描述符](http://m4x.fun/post/play-with-file-descriptor-1/)，第二个参数为用户程序对设备的控制命令，再后边的参数则是一些补充参数，与设备有关。
> 使用 ioctl 进行通信的原因：
>
> 操作系统提供了内核访问标准外部设备的系统调用，因为大多数硬件设备只能够在内核空间内直接寻址, 但是当访问非标准硬件设备这些系统调用显得不合适,
> 有时候用户模式可能需要直接访问设备。
>
>
> 比如，一个系统管理员可能要修改网卡的配置。现代操作系统提供了各种各样设备的支持，有一些设备可能没有被内核设计者考虑到，如此一来提供一个这样的系统调用来使用设备就变得不可能了。
>
> 为了解决这个问题，内核被设计成可扩展的，可以加入一个称为设备驱动的模块，驱动的代码允许在内核空间运行而且可以对设备直接寻址。一个 Ioctl
> 接口是一个独立的系统调用，通过它用户空间可以跟设备驱动沟通。对设备驱动的请求是一个以设备和请求号码为参数的 Ioctl
> 调用，如此内核就允许用户空间访问设备驱动进而访问设备而不需要了解具体的设备细节，同时也不需要一大堆针对不同设备的系统调用。
###  内核态函数调用
相比用户态库函数，内核态的函数有了一些变化：
  1. `printf()`变更为 **`printk()`** ，但需要注意的是`printk()` **不一定会把内容显示到终端上，但一定在内核缓冲区里** ，可以通过 `dmesg` 查看效果。
  2. `memcpy()` 变更为 **`copy_from_user()/copy_to_user()`**
    * copy_from_user() 实现了将用户空间的数据传送到内核空间
    * copy_to_user() 实现了将内核空间的数据传送到用户空间
  3. `malloc()`变更为 **`kmalloc()`** ，内核态的内存分配函数，和`malloc()`相似，但使用的是 `slab/slub` 分配器
  4. `free()`变更为 **`kfree()`** ，同 `kmalloc()`
同时，`kernel`负责管理进程，因此 kernel 也记录了进程的权限。`kernel`中有两个可以方便的改变权限的函数：
  1. **`int commit_creds(struct cred *new)`**
  2. **`struct cred* prepare_kernel_cred(struct task_struct* daemon)`**
**从函数名也可以看出，执行`commit_creds(prepare_kernel_cred(0))` 即可获得 root 权限，0 表示 以 0
号进程作为参考准备新的 credentials。**
> 更多关于 `prepare_kernel_cred` 的信息可以参考
> [源码](https://elixir.bootlin.com/linux/v4.6/source/kernel/cred.c#L594)
执行 `commit_creds(prepare_kernel_cred(0))` 也是最常用的提权手段，两个函数的地址都可以在
`/proc/kallsyms` 中查看（较老的内核版本中是 `/proc/ksyms`）。
⚠️： **一般情况下，/proc/kallsyms 的内容需要 root 权限才能查看，若以非root权限查看将显示为0地址。**
###  struct cred – 进程权限结构体
内核使用`cred`结构体记录进程的权限，每个进程中都有一个 cred
结构，这个结构保存了该进程的权限等信息(`uid，gid`等），如果能修改某个进程的`cred`，那么也就修改了这个进程的权限。结构体[源码](https://code.woboq.org/linux/linux/include/linux/cred.h.html#cred)如下:
    struct cred {
        atomic_t    usage;
    #ifdef CONFIG_DEBUG_CREDENTIALS
        atomic_t    subscribers;           /* number of processes subscribed */
        void        *put_addr;
        unsigned    magic;
    #define CRED_MAGIC  0x43736564
    #define CRED_MAGIC_DEAD 0x44656144
    #endif
        kuid_t      uid;                   /* real UID of the task */
        kgid_t      gid;                   /* real GID of the task */
        kuid_t      suid;                  /* saved UID of the task */
        kgid_t      sgid;                  /* saved GID of the task */
        kuid_t      euid;                  /* effective UID of the task */
        kgid_t      egid;                  /* effective GID of the task */
        kuid_t      fsuid;                 /* UID for VFS ops */
        kgid_t      fsgid;                 /* GID for VFS ops */
        unsigned    securebits;            /* SUID-less security management */
        kernel_cap_t    cap_inheritable;   /* caps our children can inherit */
        kernel_cap_t    cap_permitted;     /* caps we're permitted */
        kernel_cap_t    cap_effective;     /* caps we can actually use */
        kernel_cap_t    cap_bset;          /* capability bounding set */
        kernel_cap_t    cap_ambient;       /* Ambient capability set */
    #ifdef CONFIG_KEYS
        unsigned char   jit_keyring;       /* default keyring to attach requested
        /* keys to */
        struct key __rcu *session_keyring; /* keyring inherited over fork */
        struct key  *process_keyring;      /* keyring private to this process */
        struct key  *thread_keyring;       /* keyring private to this thread */
        struct key  *request_key_auth;     /* assumed request_key authority */
    #endif
    #ifdef CONFIG_SECURITY
        void        *security;             /* subjective LSM security */
    #endif
        struct user_struct *user;          /* real user ID subscription */
        struct user_namespace *user_ns;    /* user_ns the caps and keyrings are relative to. */
        struct group_info *group_info;     /* supplementary groups for euid/fsgid */
        struct rcu_head rcu;               /* RCU deletion hook */
    } __randomize_layout;
###  内核保护机制
  1. smep: Supervisor Mode Execution Protection，当处理器处于 `ring 0` 模式，执行 **用户空间** 的代码会触发页错误。（在 arm 中该保护称为 `PXN`)
  2. smap: Superivisor Mode Access Protection，类似于 smep，当处理器处于 `ring 0` 模式，访问 **用户空间** 的数据会触发页错误。
  3. MMAP_MIN_ADDR：控制着mmap能够映射的最低内存地址，防止用户非法分配并访问低地址数据。
  4. KASLR：Kernel Address Space Layout Randomization(内核地址空间布局随机化)，开启后，允许kernel image加载到VMALLOC区域的任何位置。
⚠️： **Canary, DEP, PIE, RELRO 等保护与用户态原理和作用相同。**
## 0x03 LKMs 介绍
###  什么是LKMs
LKMs(Loadable Kernel Modules)称为可加载核心模块(内核模块)，其可以看作是运行在内核空间的可执行程序，包括:
  * 驱动程序（Device drivers） 
    * 设备驱动
    * 文件系统驱动
    * …
  * 内核扩展模块 (modules)
LKMs 的文件格式和用户态的可执行程序相同，Linux 下为 ELF，Windows 下为 exe/dll，mac 下为 MACH-O，因此我们可以用
IDA 等工具来分析内核模块。
模块可以被单独编译， **但不能单独运行** 。它在运行时被链接到内核作为内核的一部分在内核空间运行，这与运行在用户控件的进程不同。
模块通常用来实现一种文件系统、一个驱动程序或者其他内核上层的功能。
> Linux 内核之所以提供模块机制，是因为它本身是一个单内核 (monolithic
> kernel)。单内核的优点是效率高，因为所有的内容都集合在一起，但缺点是可扩展性和可维护性相对较差，模块机制就是为了弥补这一缺陷。
**通常情况下，Kernel漏洞的发生也常见于加载的LKMs出现问题。**
###  内核中的模块相关指令
  1. **insmod** : 将指定模块加载到内核中。
  2. **rmmod** : 从内核中卸载指定模块。
  3. **lsmod** : 列出已经加载的模块。
  4. **modprobe** : 添加或删除模块，modprobe 在加载模块时会查找依赖关系。
###  file_operations 结构体
用户进程在对设备文件进行诸如read/write操作的时候，
**系统调用通过设备文件的主设备号找到相应的设备驱动程序，然后读取这个数据结构相应的函数指针，接着把控制权交给该函数，这是Linux的设备驱动程序工作的基本原理。**
内核模块程序的结构中包括一些call
back回调表，对应的函数存储在一个file_operations(fop)结构体中，这也是相当重要的结构体，结构体中实现了的回调函数就会静态初始化函数地址，而未实现的函数，值为NULL。
例如：
Events | User functions | Kernel functions  
---|---|---  
Load | insmod | module_init()  