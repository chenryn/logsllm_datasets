13
14
4
Figure 11: An example of injected conditions. Code related
to the injected conditions is highlighted in green.
were conducted on a machine with an Intel Core i7-7700 CPU @
3.60GHz with 16GB of RAM.
Datasets. (1) Dataset-I includes 136 official (84) and third-party (52)
apps randomly collected from the SmartThings GitHub repo [15].
Note that many apps that contain only one path are not selected.
(2) As many official and third-party apps contain a small number
of paths, we create Dataset-II including 64 hand-crafted apps with
more paths and more complex conditional statements. E.g., we pur-
posely add more branch conditions to the original official and third-
party apps. The injected conditions involve platform APIs, user
inputs, and/or environment variables to make the path exploration
more challenging. Note that it is not uncommon that users of Smart-
Things modify existing smart apps for their purposes [62, 63, 70].
Figure 11 shows an example of injected conditions, where part
of the injected code is highlighted in green. The original smart
app will turn on the light (Line 12) if motion is detected (Line 9).
Four conditions are injected to control the light on (Line 11): i)
whether the current illuminance is lower than a user input tooDark,
ii) whether the motion is detected after a period of time threshold
determine by a user input delayMins, iii) whether the status of the
lock sensor (an environment variable) is locked, and iv) whether the
current mode returned by the platform APIs, getLocation() and
getCurrentMode(), is “Home”. (3) Dataset-III includes 8 apps with
different types of bugs inserted by us, which is used, together with
Dataset-I, to demonstrate Westworld’s bug finding capability.
8.3 Feasibility
To demonstrate the feasibility of selective code-segment fuzzing,
we seek to understand the impact of symbolic inputs on the number
of fuzzing iterations. We use Dataset-I.
The number of symbolic inputs contained in each app. The
results show that 1) the average numbers of user inputs and envi-
ronment variables are 3.24 and 1.73, respectively; 2) the maximum
numbers of user inputs and environment variables are 13 and 6,
respectively; and 3) all apps have at least one user input and one
environment variable. Thus, if environment variables are not set
as symbolic but simply use the concrete values, it is unlikely to
achieve high path coverage testing of smart apps.
The number of TSVs, and the number and categories of ISIs.
We have the following findings. (a) The maximum number of TSVs
that an app contains is 3. (b) The maximum number of ISIs (i.e.,
symbolic inputs that a TSV relies on) for any given TSV is 3. (c) All
the ISIs belong to Category-I and Category-II (Section 6.3); e.g., the
location id, belonging to Category-III, is only used to form a message
about the app. We can conclude that Westworld equipped with
selective code-segment fuzzing is feasible for analyzing smart apps.
The number of ISI values selected for fuzzing. For a symbolic
input in Category-I, we iterate over all its values to achieve high
path coverage. E.g., in Figure 4, if we do not fuzz all the values of
location.mode (Line 22), some paths may be unexplored (Line 24).
For symbolic inputs in Category-II, we set n = 10 and m = 1,
i.e., one value is selected from each of ten equal parts (Section 6.3).
The code-segment summary containing ten value-pairs of TSV and
ISIs is combined with symbolic path conditions and solved by the
constraint solver. If the constraint solver cannot find satisfying
assignments given the current summary, Westworld will fuzz
using more values from the domain and update the summary until
satisfying assignments are found.
We make the choices for n and m with the following empirical
considerations: i) the time t1 used by fuzzing to obtain the code-
segment summary, ii) the time t2 used by the SMT solver to find
satisfying assignments, and iii) the maximum size of messages al-
lowed by the Smartthings Platform. Specifically, if more values
are selected for fuzzing, both t1 and t2 are increased and the code-
segment summary contained in the returned message will be too
long and truncated by the SmartThings platform (e.g., in our experi-
ments, around 76.3% messages are truncated if 20 values are fuzzed).
On the other hand, if less values are selected for fuzzing, the SMT
solver may not find satisfying assignments given the current sum-
mary, and a new fuzzing request with newly selected values will be
needed, which is expensive due to the communication cost (e.g., in
our experiments, around 11.5% code-segments need a second round
of fuzzing if only 5 values are selected). In short, the more values
are selected, the more comprehensive the code-segment summary
is; however, on the other hand, it also introduces longer time for
obtaining the summary, larger overload for the constraint solving,
and higher risks of truncating messages. Thus, the selection of the
parameter values is a trade-off between these factors.
8.4 Completeness and Precision
We use Dataset-I and Dataset-II. The lines of code (LOC) of the
apps are in the range of [43, 2058]. They are divided into several
parts based on the number of paths, as shown in Table 1. We com-
pare Westworld to three baselines: a grey-box fuzzer, a concolic
executor (without fuzzing assisted), and manual testing.
Comparison with Grey-box Fuzzer. For comparison, we devel-
oped a grey-box fuzzer. We apply the coverage-guided input gen-
eration technique used in American Fuzzy Lop (AFL) [1], and use
990ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Lannan Luo, Qiang Zeng, Bokai Yang, Fei Zuo, and Junzhe Wang
Table 2: Completeness result (%) (full path coverage is attained by Westworld after a minor implementation change).
Westworld
Fuzzer
Concolic executor
Dataset-I
Dataset-II
Dataset-I
Dataset-II
Dataset-I
Dataset-II
# of paths
in apps
≥ 20
[15, 20)
[10, 15)
[5, 10)
[2, 5)
Max Min Avg Max Min Avg Max Min Avg Max Min Avg Max Min Avg Max Min Avg
100
22.3
38.8
100
40.3
100
38.2
100
100
56.4
69.6
68.4
70.4
82.4
100
22.4
28.6
27.3
30.5
37.2
43.3
46.7
43.3
69.3
74.9
46.8
58.3
67.2
78.8
86.4
14.3
22.6
36.4
31.5
42.4
20.0
42.7
51.0
43.4
62.5
72.4
73.5
76.4
100
100
12.8
24.1
33.2
25.5
32.0
28.3
30.6
32.3
35.5
56.2
45.7
50.8
48.3
64.3
80.2
44.6
50.2
65.5
67.2
73.2
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
100
Selenium [24] to mount fuzzing. AFL employs evolutionary algo-
rithms, which uses a feedback loop to assess how good an input
is, and retain any input that discovers a new path for generating
new inputs. For each environment input, we make sure its value is
valid; e.g., humidity is an integer between 0 and 100. The process is
terminated when the maximum time (4 hours) is reached.
Table 2 shows the results, including the number of paths, the
number of apps, and the maximum, minimum, and average path
coverage for Westworld and the fuzzer. The fuzzer cannot reach
complete path coverage for most apps. There are two main reasons.
(1) Values returned by platform API calls are not under the control
of the fuzzer, and thus the branches depending on them cannot be
all explored. (2) If a variable influenced by a user input is involved
in a condition, often it is difficult for the fuzzer to generate an
appropriate value to satisfy the condition. E.g., the platform API
getTwcConditions returns the weather data containing the outside
temperature, which is not under the control of the fuzzer, causing
a branch depending on the outside temperature to be unexplored.
Westworld achieves complete path coverage for all the official
and third-party apps under testing. There is a special case, the smart
app DoubleTapModeChange, which contains a condition invoking
isPhysical to check whether or not an event is from the physical
actuation of an IoT device. As we launch the apps from the IDE
simulator, two paths (among 16 paths) are not explored, with a path
coverage of 87.5% (= 14/16). After we consider the return value of
isPhysical as environment data, all paths are explored. For the
apps in Dataset-II (created by us with more paths and more complex
conditional statements), Westworld can successfully explore and
analyze all the paths.
Comparison with Concolic Executor. We also developed a con-
colic executor without fuzzing. The purpose is to demonstrate the
benefit of selective code-segment fuzzing in improving path con-
verge. The concolic executor considers user inputs and environment
variables as symbolic inputs (the same as Westworld). It executes
an app with given inputs, and gathers symbolic path constraints
along execution. During path exploration, when a platform API is
met, it uses the concrete values to execute the platform API. But
it does not consider the return variable of the platform API as a
TSV or apply fuzzing to analyze it to improve path coverage. As
shown in Table 2, the concolic executor cannot achieve full path
coverage for most apps. The reason is that it uses concrete values to
simplify symbolic path constraints, which sacrifices completeness
(Section 2.2). Taking the app in Figure 4 as an example, the true
branch of the second if statement (Line 24) cannot be explored by
the concolic executor. The value of alreadySet is determined by the