title:AdGraph: A Graph-Based Approach to Ad and Tracker Blocking
author:Umar Iqbal and
Peter Snyder and
Shitong Zhu and
Benjamin Livshits and
Zhiyun Qian and
Zubair Shafiq
2020 IEEE Symposium on Security and Privacy
ADGRAPH: A Graph-Based Approach to Ad and Tracker Blocking
Umar Iqbal∗†
Peter Snyder†
∗University of Iowa
Shitong Zhu‡
†Brave Software
Benjamin Livshits†¶
‡UC Riverside
Zhiyun Qian‡
Zubair Shaﬁq∗
¶Imperial College London
Abstract—User demand for blocking advertising and tracking
online is large and growing. Existing tools, both deployed and
described in research, have proven useful, but lack either the
completeness or robustness needed for a general solution. Existing
detection approaches generally focus on only one aspect of
advertising or tracking (e.g. URL patterns, code structure),
making existing approaches susceptible to evasion.
In this work we present ADGRAPH, a novel graph-based
machine learning approach for detecting advertising and tracking
resources on the web. ADGRAPH differs from existing approaches
by building a graph representation of the HTML structure, net-
work requests, and JavaScript behavior of a webpage, and using
this unique representation to train a classiﬁer for identifying
advertising and tracking resources. Because ADGRAPH considers
many aspects of the context a network request takes place in,
it is less susceptible to the single-factor evasion techniques that
ﬂummox existing approaches.
We evaluate ADGRAPH on the Alexa top-10K websites, and
ﬁnd that it is highly accurate, able to replicate the labels of
human-generated ﬁlter lists with 95.33% accuracy, and can even
identify many mistakes in ﬁlter lists. We implement ADGRAPH
as a modiﬁcation to Chromium. ADGRAPH adds only minor
overhead to page loading and execution, and is actually faster
than stock Chromium on 42% of websites and AdBlock Plus
on 78% of websites. Overall, we conclude that ADGRAPH is
both accurate enough and performant enough for online use,
breaking comparable or fewer websites than popular ﬁlter list
based approaches.
I. INTRODUCTION
The need for content blocking on the web is large and
growing. Prior research has shown that blocking advertising
and tracking resources improves performance [26], [43], [56],
privacy [35], [42], [52], and security [44], [54], in addition to
making the browsing experience more pleasant [23]. Browser
vendors are increasingly integrating content blocking into
their browsers [41], [57], [63], and user demand for content
blocking is expected to grow in future [33], [34].
While existing content blocking tools are useful,
they
are vulnerable to practical, realistic countermeasures. Current
techniques generally block unwanted content based on URL
patterns (using manually-curated ﬁlter lists which contain rules
that describe suspect URLs), or patterns in JavaScript behavior
or code structure. Such approaches fail against adversaries who
rotate domains quickly [39], proxy resources through trusted
domains (e.g. the ﬁrst party, CDNs) [20], or restructure or
obfuscate JavaScript [51], among other common techniques.
As a result, researchers have proposed several alternative
approaches to content blocking. While these approaches are
interesting, they are either incomplete or susceptible to trivial
circumvention from even mildly determined attackers. Exist-
ing proposals suggest ﬁlter lists, pre-deﬁned heuristics, and
machine learning (ML) approaches that leverage network or
code analysis for identifying unwanted web content, but fail
to consider enough context to avoid trivial evasions.
This work presents ADGRAPH, an accurate and perfor-
mant graph-based ML approach for detecting and blocking
unwanted (advertising and tracking) resources on the web. AD-
GRAPH makes blocking decisions using a novel graph repre-
sentation of a webpage’s past and present HTML structure, the
behavior and interrelationships of all executed JavaScript code
units, and the destination and cause of all network requests that
have occurred up until the considered network request. This
contextually-rich blocking approach allows ADGRAPH to both
identify unwanted resources that existing approaches miss, and
makes ADGRAPH more robust against simple evasions that
ﬂummox existing approaches.
ADGRAPH is designed for both online (i.e.
in-browser,
during page execution) and ofﬂine (i.e. for ﬁlter list construc-
tion) deployment. ADGRAPH is performant enough for online
deployment; its performance is comparable to stock Chromium
and better than Adblock Plus. ADGRAPH can also be used
ofﬂine to create or augment ﬁlter lists used by extension-based
content blocking approaches. This dual deployment strategy
can beneﬁt users of ADGRAPH directly as well as users of
extension-based content blocking approaches.
This work makes the following contributions to the problem
of identifying and blocking advertising and tracking resources
on the web.
1) A graph-based ML approach to identify advertising
and tracking resources in websites based on the HTML
structure, JavaScript behavior, and network requests made
during execution.
2) A large scale evaluation of ADGRAPH’s ability to detect
advertising and tracking resources on popular websites.
We ﬁnd that ADGRAPH is able to replicate the labels
of human-generated ﬁlter lists with 95.33% accuracy.
Further, ADGRAPH is able to outperform existing ﬁlter
lists in many cases, by correctly distinguishing ad/tracker
resources from benign resources in cases where existing
ﬁlter lists err.
3) A performant implementation of ADGRAPH as a patch
to Chromium.1 Our approach modiﬁes the Blink and
V8 components in Chromium to instrument and attribute
document behavior in a way that exceeds existing prac-
tical approaches, without signiﬁcantly affecting browser
performance. ADGRAPH loads pages faster than stock
1Since ADGRAPH is designed and implemented in Chromium, it can be
readily deployed on other Chromium based browsers (e.g. Chrome, Brave).
© 2020, Umar Iqbal. Under license to IEEE.
DOI 10.1109/SP40000.2020.00005
763
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
Chromium on 42% of pages, and faster than AdBlock
Plus on 78% of pages.
4) A breakage analysis of ADGRAPH’s impact on popular
websites. ADGRAPH has a noticeable negative affect on
benign page functionality at rates similar to ﬁlter lists
(affecting 15.0% versus 11.4% of websites respectively)
and majorly affects page functionality less than ﬁlter lists
(breaking 5.9% versus 6.4% websites, respectively).
The rest of this paper is structured as follows. Section II
presents existing work on the problem of ad and tracker block-
ing, and discusses why existing approaches are insufﬁcient as
comprehensive blocking solutions. Section III describes the
design and implementation of ADGRAPH. Section IV presents
an evaluation of ADGRAPH’s effectiveness as a content block-
ing solution, in terms of blocking accuracy, performance, and
effect on existing websites. Section V describes ADGRAPH’s
limitations, how ADGRAPH can be further improved, and
potential uses for ADGRAPH in ofﬂine scenarios. Section VI
concludes the paper.
II. BACKGROUND AND RELATED WORK
A. Problem Difﬁculty
Ad and tracker blocking is a well studied topic (e.g. [36],
[37], [45], [46], [49], [58], [64], [65]). However, existing work
is insufﬁcient to form a comprehensive and robust blocking
solution.
Many existing approaches (e.g. [37], [45]) are vulnerable
to commonly deployed countermeasures, such as evading
domain-based blocking through domain generation algorithms
(DGA) [39], hosting tracking related code on the ﬁrst-party
domain [20], spreading tracking related behavior across mul-
tiple code units, and code obfuscation [51]. Much related work
in the area is unable to reason about domains that host both
“malicious” (ads and tracking) and “benign” (functional or
user desireable) content, and end up over or under labeling
resources.
Other existing work (e.g. [36], [49]) lacks realistic eval-
uations. Sometimes this takes the form of an ambiguous
comparison to ground truth (making it challenging to ascertain
the usefulness of the technique as a deployable solution). Other
cases target advertising or tracking, but not both together. Still
other cases target only a subset of advertising or tracking
related resources (e.g. scripts or images), but fail to consider
other ways advertising or tracking can be carried out (e.g.
iframes and CSS styling rules).
Further existing work (e.g. [46], [64]) presents a strategy
for blocking resources, but lacks an evaluation of how much
benign (i.e. user desirable) functionality the approach would
break. This leaves a proposal for preventing a subset of an
application’s code from executing, without an understanding of
how it effects the functioning of the overall application (user-
serving or otherwise). These approaches may fail to separate
the wheat from the chaff; they may prevent advertising and
tracking, but at the expense of breaking desirable functionality.
The rest of this section reviews existing work on blocking
advertising and tracking content on the web. Emphasis is given
both on the contributions of each work, and why each work
is incomplete as a deployable, real-world blocking solution.
B. Existing Blocking Techniques
This subsection describes existing tracking and advertising
blocking work, categorized by the types of evasions each
approach is vulnerable to. Our goal is not to lessen the con-
tributions of existing work (which are many and signiﬁcant),
but merely to highlight the kinds of practical and deployed
evasions each is vulnerable to, to further motivate the need
for a more comprehensive solution.
Note that many blocking approaches discussed here are
vulnerable to multiple evasions. In these cases, we discuss
only one category of evasion the work is vulnerable to. Table I
summarily compares the strengths and weaknesses of existing
approaches.
Domain Based Blocking. Many existing content blocking
approaches attempt to prevent advertising and tracking by
identifying suspect domains (eTLD+1), and blocking all re-
quests to resources on such domains. These approaches are
insufﬁcient for several reasons. First, determined advertising
and tracking services can use DGA to serve their content from
quickly changing domains that are unpredictable to the client,
but known to the adversary. Such evasions trivially circumvent
approaches that depend primarily, or only, on domain blocking
strategies [39]. Similarly,
in many cases, domain-focused
approaches are easily circumvented by proxying the malicious
resource through the ﬁrst-party domain [20]. A comprehensive
blocking solution should be able to account for both of these
evasion strategies.
AdBlock Plus [1], uBlock Origin [30], Ghostery [15], and
Disconnect [8] are all popular and deployed solutions that
depend solely or partially on the domain of the request, and
are thus vulnerable to the above discussed approaches. These
approaches use ﬁlter lists, which describe hosts, paths, or both
of advertising and tracking resources.
Gugelmann et al. [45] developed a ML-based approach for
augmenting ﬁlter lists, by using existing ﬁlter lists as ground
truth, and training a classiﬁer based on the HTTP and domain-
request behavior of additional network requests. Bhagavatula
et al. [37] developed a ML-based approach for generating
future domain-and-path based ﬁlter lists, using the rules in
existing ﬁlter lists as ground truth. These approaches may be
useful in identifying additional suspect content, but are easily
circumvented by an attacker willing to take any of the domain
hiding or rotating measures discussed earlier.
Yu et al. [65] described a method for detecting tracking
related domains by looking for third-parties that receive similar
unique tokens across a signiﬁcant number of ﬁrst-parties. This
approach hinges on an attacker using the same receiving do-
main over a large number of hosting domains. Apple’s Safari
browser includes a similar technique called Intelligent Track-
ing Protection [63], that identiﬁes tracking related domains by
looking for third-party contexts that access state without user
interaction. Privacy Badger [25] also identiﬁes tracking related
domains by looking for third-party domains that track users
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:17:00 UTC from IEEE Xplore.  Restrictions apply. 
764
Approach
Bau et al. [36]
Yu et al. [65]
Wu et al. [64]
Shuba et al. [58]
Kaizer and Gupta [49]
Ikram et al. [46]
Gugelmann et al. [45]
Bhagavatula et al. [37]
Ad/Tracker
Blocking
Tracker
Tracker
Tracker
Ads
Tracker
Tracker
Ads,Tracker
Ads
Domain/URL
Blocking
Domain
Domain
Domain
URL
Domain
URL
Domain
URL
1st,3rd Party
Blocking
3rd party
3rd party
3rd party
1st,3rd party
3rd party
1st,3rd party
3rd party
1st,3rd party
DGA
Susceptibility
Code Structure
Susceptibility
Cross JS Collaboration
Susceptibility
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
-
No
No
No
Yes
Yes
No
No
-
No
Yes
No
Yes
Yes
Yes
No
Breakage
Analysis
No (-)
Yes (25%)
No (-)
No (-)
No (-)
No (-)
No (-)
No (-)
TABLE I: Comparison of the related work, including the practical evasions and countermeasures each is vulnerable to. Ad/Tracker Blocking
column represents blocking of ads, trackers, or both. Domain/URL Detection column represents blocking at domain or URL level. 1st,3rd
Party Blocking column, represents blocking of third-party requests, ﬁrst-party requests, or both. In DGA Susceptibility, Code Structure
Susceptibility, and Cross JS Collaboration Susceptibility columns, Yes and No represent that the approach’s susceptibility to speciﬁed
countermeasure. The Breakage Analysis column represents whether the breakage analysis was performed by the approach and their results.
(e.g., by setting identifying cookies) on three or more sites.
These techniques do not attempt to block advertising, and also
require that the attacker use consistent domains. Bau et al. [36]
proposed building a graph of resource-hosting domains and
training a ML classiﬁer based on commonalities of third-party
hosted code, again relying on hosting domains being distinct,
consistent, and long lasting.
JavaScript Code Unit Classiﬁcation. Other blocking ap-
proaches attempt to identify undesirable code based on the
structure or behavior of JavaScript code units. Such approaches
take as input a single code unit (and sometimes the resulting