title:Changing of the Guards: Certificate and Public Key Management on the
Internet
author:Carl Magnus Bruhner and
Oscar Linnarsson and
Mat&apos;us Nemec and
Martin F. Arlitt and
Niklas Carlsson
Changing of the Guards: Certiﬁcate
and Public Key Management
on the Internet
Carl Magnus Bruhner1, Oscar Linnarsson1, Matus Nemec1, Martin Arlitt2,
and Niklas Carlsson1(B)
1 Link¨oping University, Link¨oping, Sweden
PI:EMAIL, PI:EMAIL
2 University of Calgary, Calgary, Canada
Abstract. Certiﬁcates are the foundation of secure communication over
the internet. However, not all certiﬁcates are created and managed in a
consistent manner and the certiﬁcate authorities (CAs) issuing certiﬁ-
cates achieve diﬀerent levels of trust. Furthermore, user trust in pub-
lic keys, certiﬁcates, and CAs can quickly change. Combined with the
expectation of 24/7 encrypted access to websites, this quickly evolving
landscape has made careful certiﬁcate management both an important
and challenging problem. In this paper, we ﬁrst present a novel server-
side characterization of the certiﬁcate replacement (CR) relationships in
the wild, including the reuse of public keys. Our data-driven CR analysis
captures management biases, highlights a lack of industry standards for
replacement policies, and features successful example cases and trends.
Based on the characterization results we then propose an eﬃcient solu-
tion to an important revocation problem that currently leaves web users
vulnerable long after a certiﬁcate has been revoked.
1 Introduction
initiatives (e.g.,
Aided by several
[1,16,68]), the last decade saw a major
shift from non-encrypted to encrypted web traﬃc. Today, most websites use
HTTPS [9,14,37] and other TLS-based protocols (e.g., QUIC [48]) to deliver
their content. These protocols rely heavily on X.509 certiﬁcates. At a high-
level, before a secure and trusted connection can be established, the server must
present the client with a valid X.509 certiﬁcate that maps the server’s public
key to the server’s domain and that has been issued (and signed) by a rec-
ognized Certiﬁcation Authority (CA) that is trusted by the client. Since users
expect 24/7 secure access to trusted services, it is therefore important that the
servers present clients with a valid and trusted certiﬁcate. This has made careful
certiﬁcate management an important problem.
Careful certiﬁcate management is also a challenging problem, as not all cer-
tiﬁcates are created and managed in the same way. From a domain administrator
perspective, there are many issues to consider. For example, there are many issu-
ing CAs and certiﬁcate types with diﬀerent issuing processes and costs, the trust
c(cid:2) The Author(s), under exclusive license to Springer Nature Switzerland AG 2022
O. Hohlfeld et al. (Eds.): PAM 2022, LNCS 13210, pp. 50–80, 2022.
https://doi.org/10.1007/978-3-030-98785-5_3
Changing of the Guards: Certiﬁcate and Public Key Management
51
and usage of diﬀerent CAs is changing over time, diﬀerent services have diﬀerent
security requirements, and the trust in individual keys may quickly change.
To complicate the situation, for a number of reasons [76] modern browsers
do not perform suﬃcient revocation checks [28] to protect users against man-
in-the-middle attacks made possible by compromised keys even after they have
been revoked by the domain owner and its CA [55]. While Chrome and Firefox
browsers periodically (e.g., with software updates) push a proprietary set of
revocations to their users [41,59], the frequency and size of such revocation
sets leave clients vulnerable long after most compromised certiﬁcates have been
revoked. The situation appears most pressing for mobile browsers. For example,
Liu et al. [55] found that not a single native mobile browser on iOS, Android, or
Windows Phones checks the revocation status of certiﬁcates. Finally, regardless
of the choices made by the websites and CAs to address these challenges, websites
(with the help of the CAs) need to make sure that they always can present their
clients with valid and trusted certiﬁcates.
In this paper, we (1) present a novel server-side characterization of the certiﬁ-
cate replacement (CR) relationships observed in practice, which provides insights
into biases in how services manage their certiﬁcates; (2) examine the subset of
CRs that reuse the same key when a certiﬁcate is replaced; and (3) demonstrate
how targeted modiﬁcations to how CRs with reused keys are handled can reduce
the reliance of revocation checks and solve this revocation problem.
Our analysis is based on data extracted from all biweekly scans of port 443
(Oct. 30, 2013 to Jul. 13, 2020) done within Rapid7’s Project Sonar [2]. After
presenting our methodology (Sect. 2), we characterize the full set of CRs (Sect. 3)
that highlights positive trends and behaviors. For this analysis, we use misman-
agement indicators and study how much safety margin servers use (e.g., in terms
of validity period overlap), diﬀerences in the timing of validity periods and when
certiﬁcate changes actually are observed, and whether there are replacement
diﬀerences based on validity type, key reuse, CA changes, and CA selection.
Our characterization demonstrates and highlights the eﬀects of a lack of gen-
eral industry standards for replacement policies [38]. This includes, for example,
a clear discrepancy in the overlap patterns between the top-issuing CAs, divid-
ing those having automated renewal/replacement support and those dependent
on manual eﬀort. However, despite several of the CAs issuing cheaper domain
validated (DV) certiﬁcates with shorter validity periods using common validity-
period overlaps, the least gaps (deﬁned as CRs in which the validity periods of
the replaced and replacing certiﬁcates are non-overlapping) and early/late usage
of certiﬁcates are still associated with more expensive certiﬁcates using extended
validation (EV). Positive trends include a decreasing fraction of CRs with gaps,
and a decreasing fraction of certiﬁcates being observed in use before they are
valid or after they have expired. We also observe that the decision to change
CAs often is associated with gaps, but that the decision to reuse keys is not.
The later parts of the paper look closer at two particularly interesting aspects
identiﬁed in the dataset and motivated by our ﬁndings, respectively. First, we
study the subset of CRs in which the same key is reused by the replacing cer-
52
C. M. Bruhner et al.
tiﬁcate. Here, we also examine the “replacement chains” that are formed when
the same key is reused for a series of consecutive CRs in which the replacing
certiﬁcate of CR i is the replaced certiﬁcate in CR i + 1 of the series. Through-
out the paper, we call such a CR and chain a Same Key CR (SKCR) and an
SKCR chain, respectively. Our analysis highlights big diﬀerences in how cus-
tomers of diﬀerent CAs reuse keys. While the customers of three CAs (Sectigo,
GlobalSign, Go Daddy) had higher than 65% key reuse, the customers of several
other CAs (e.g., Google, cPanel, Amazon, Microsoft) typically did not appear to
reuse keys. Encouragingly, the three CAs with the most key reuse achieved sub-
stantially fewer gaps when reusing keys than when not reusing keys. However,
while SKCRs make up only 14% of Let’s Encrypt’s customers’ CRs, they present
the perhaps most interesting use case. For example, by combining longer key-
reuse chains with consistent issuing of 90-day certiﬁcates with 30-day overlaps,
their customers achieve high relative key utilization (e.g., aggregated lifetime
compared to aggregate validity period over the certiﬁcate making up the reuse
chains) without having to frequently replace the public keys used on their servers.
Finally, motivated by the eﬀectiveness and potential of some of the observed
automation solutions and trends, we outline a new way (Sect. 5) to address the
currently open revocation problem discussed above. Our solution framework is
based on observations highlighted in the paper, takes some current trends to the
extreme, and combines the use of short-lived three-phase certiﬁcates (modiﬁca-
tion of an idea by Rivest [66]). It also introduces the new concept of parent-
child certiﬁcate relationships and new simple management rules. The frame-
work ensures eﬃcient use of certiﬁcates in such a way that it does not need to
increase how frequently servers change their public keys or how frequently cer-
tiﬁcates must be logged in Certiﬁcate Transparency (CT) logs [50]. Using our
CR datasets, we also demonstrate and quantify the reduced overhead that these
eﬃciencies of our approach would provide when some set of CAs select to reduce
their certiﬁcate lifetimes using our approach rather than naively.
In summary, the paper provides both new insights into the status of current
HTTPS certiﬁcate management (Sect. 3), including the reuse of keys (Sect. 4),
and novel solutions to improve certiﬁcate management and to address the cur-
rently unresolved revocation problem so far unsatisfactorily handled by browsers
(Sect. 5).
2 Analysis Methodology
Rapid7 Dataset: We used two certiﬁcate datasets [3] from Project Sonar [2].
These datasets consist of biweekly scans of the IPv4 address space, collected
using Rapid7’s extensions [4] of ZMap [35]. First, we used all HTTPS certs ﬁles
between 2013-10-30 and 2020-07-13 to extract the full Privacy-Enhanced Mail
(PEM) [44,54] encoded certiﬁcates and their SHA-1 ﬁngerprints. Second, for our
observation-based statistics, we used the corresponding hosts ﬁles collected for
port 443 to determine at what IP addresses and time these certiﬁcates were
observed (using the SHA-1 ﬁngerprints for mapping between the ﬁles).
Changing of the Guards: Certiﬁcate and Public Key Management
53
notBefore
Birth
Death
notAfter
time
onset
Certificate
Lifetime
Validity time
Observation
overlap
Fig. 1. Replacement relation between two certiﬁcates. (Color ﬁgure online)
Identifying and Extracting CR Relationships: Using the above datasets,
we identify certiﬁcate replacement (CR) relationships. Here, we deﬁne a CR
to exist between a pair of certiﬁcates under the following conditions. (1) The
two certiﬁcates were observed at the same IP address (and port number). (2)
The two subjectCN either matched perfectly or matched after following three
wildcard rules: wildcards are only allowed to be used at the lowest domain level,
at the third domain level and down, and only one wildcard is allowed per match.
(3) The validity period of the replacing certiﬁcate must begin later than the
beginning of the validity period of the replaced certiﬁcate and must extend past
the end of the validity of the replaced certiﬁcate. Figure 1 shows a toy example
with overlapping validity periods (green color) and the ﬁrst certiﬁcate of the CR
only were observed during three scans (ﬁrst three red markers). Here, the validity
period is deﬁned as the time between the notBefore and notAfter values in the
certiﬁcate, and following the terminology used by Chung et al. [29], the lifetime
is deﬁned as the time period between the ﬁrst scan when a certiﬁcate is observed
(referred to as its birth) and the last scan it is observed (referred to as its death).
In addition to extracting information about the individual certiﬁcates and
diﬀerent metrics related to their relative validity periods (e.g., the overlap in
Fig. 1), we also extract information regarding when the two certiﬁcates were
seen in use. Of particular interest here are cases when the servers present their
certiﬁcates before the validity period has started or after it has expired.
Multi-step CR Identiﬁcation and Extraction: We performed a series of
processing steps to create an aggregated dataset including all CR relationships.
– Step 1 (parse + process certiﬁcates): Using a Node.js library node-
forge 1 and OpenSSL (when node-forge was unable to parse a certiﬁcate) we
extracted data from the certiﬁcates, including (1) certiﬁcate identiﬁers and
basic information, (2) issuer and subject identiﬁers, (3) CA status and chain
info (e.g., we determined whether the subject is a CA and whether it is
self-signed, self-issued, or signed by third party), (4) validity period, (5) ver-
iﬁcation type (determined based on the Object Identiﬁers (OIDs) [5,7]), and
(6) public key properties.
– Steps 2+3 (extract birth and death): We next identify the birth and
death of each certiﬁcate, respectively. In these steps, the output ﬁles were
1 Available at: https://www.npmjs.com/package/node-forge/v/0.9.0.
54
C. M. Bruhner et al.
Y
Y
1
3
Y
Negative Y
2
4
Certiﬁcate birth
Certiﬁcate death
Observation without certiﬁcate
Fig. 2. Certiﬁcate replacement search order.
sorted based on the ﬁrst birth (step 2) and last death (step 3). We also keep
track of IP addresses and the number of observations.
– Step 4 (extract CR relations): CRs were identiﬁed one certiﬁcate at a time
based on each certiﬁcate’s birth. For each certiﬁcate, we search backwards in
time from its time of death (increasing overlap); stopping as soon as we ﬁnd
a matching CR. If no such CR is found, we instead search for births forward
in time (decreasing overlaps) until either such CR is found or no CR can be
identiﬁed for the certiﬁcate. (Fig. 2 illustrates the search order.) For every
match, the precision diﬀerence between the subjectCN is stored, indicating