# Changing of the Guards: Certificate and Public Key Management on the Internet

**Authors:**
- Carl Magnus Bruhner
- Oscar Linnarsson
- Matus Nemec
- Martin F. Arlitt
- Niklas Carlsson

**Affiliations:**
1. Linköping University, Linköping, Sweden
2. University of Calgary, Calgary, Canada

**Abstract:**
Certificates are the foundation of secure communication over the internet. However, the creation and management of certificates are not uniform, and certificate authorities (CAs) vary in their levels of trust. User trust in public keys, certificates, and CAs can change rapidly. Combined with the expectation of 24/7 encrypted access to websites, this dynamic landscape makes careful certificate management both essential and challenging. In this paper, we present a novel server-side characterization of certificate replacement (CR) relationships, including the reuse of public keys. Our data-driven CR analysis reveals management biases, highlights the lack of industry standards for replacement policies, and identifies successful practices and trends. Based on these findings, we propose an efficient solution to a critical revocation problem that currently leaves web users vulnerable long after a certificate has been revoked.

## 1. Introduction

Over the past decade, there has been a significant shift from non-encrypted to encrypted web traffic, driven by various initiatives [1, 16, 68]. Today, most websites use HTTPS [9, 14, 37] and other TLS-based protocols (e.g., QUIC [48]) to deliver their content. These protocols rely heavily on X.509 certificates. Before a secure and trusted connection can be established, the server must present the client with a valid X.509 certificate, which maps the server’s public key to its domain and is issued and signed by a recognized and trusted CA. Given the expectation of 24/7 secure access to trusted services, it is crucial that servers present clients with valid and trusted certificates. This has made careful certificate management an important yet challenging task.

Certificate management is complex due to the variability in how certificates are created and managed. From a domain administrator's perspective, there are numerous considerations, such as the choice of issuing CAs, the type of certificates, and the associated costs. The trust and usage of different CAs change over time, and different services have varying security requirements. Additionally, the trust in individual keys can quickly change.

Modern browsers do not perform sufficient revocation checks [28], leaving users vulnerable to man-in-the-middle attacks even after compromised keys have been revoked [55]. While Chrome and Firefox periodically push proprietary sets of revocations to their users [41, 59], the frequency and size of these revocation sets often leave clients vulnerable. This issue is particularly pressing for mobile browsers, as Liu et al. [55] found that no native mobile browser on iOS, Android, or Windows Phones checks the revocation status of certificates. Regardless of the choices made by websites and CAs, it is essential that they can always present their clients with valid and trusted certificates.

In this paper, we:
1. Present a novel server-side characterization of certificate replacement (CR) relationships, providing insights into biases in certificate management.
2. Examine the subset of CRs that reuse the same key when a certificate is replaced.
3. Demonstrate how targeted modifications to the handling of CRs with reused keys can reduce reliance on revocation checks and solve the revocation problem.

Our analysis is based on data extracted from all biweekly scans of port 443 (October 30, 2013, to July 13, 2020) conducted within Rapid7’s Project Sonar [2]. After presenting our methodology (Section 2), we characterize the full set of CRs (Section 3), highlighting positive trends and behaviors. We use mismanagement indicators and study the safety margins used by servers, differences in the timing of validity periods, and whether there are replacement differences based on validity type, key reuse, CA changes, and CA selection.

Our characterization highlights the effects of the lack of general industry standards for replacement policies [38]. For example, there is a clear discrepancy in overlap patterns between top-issuing CAs, dividing those with automated renewal/replacement support and those dependent on manual effort. Despite several CAs issuing cheaper domain-validated (DV) certificates with shorter validity periods using common validity-period overlaps, the least gaps (defined as CRs where the validity periods of the replaced and replacing certificates are non-overlapping) and early/late usage of certificates are still associated with more expensive extended validation (EV) certificates. Positive trends include a decreasing fraction of CRs with gaps and a decreasing fraction of certificates being observed in use before they are valid or after they have expired. We also observe that changing CAs is often associated with gaps, but reusing keys is not.

The later parts of the paper focus on two particularly interesting aspects identified in the dataset and motivated by our findings. First, we study the subset of CRs where the same key is reused by the replacing certificate. We also examine "replacement chains" formed when the same key is reused for a series of consecutive CRs. Our analysis highlights significant differences in how customers of different CAs reuse keys. While customers of three CAs (Sectigo, GlobalSign, Go Daddy) had higher than 65% key reuse, customers of several other CAs (e.g., Google, cPanel, Amazon, Microsoft) typically did not reuse keys. Encouragingly, the three CAs with the most key reuse achieved substantially fewer gaps when reusing keys. Let’s Encrypt’s customers, who make up only 14% of SKCRs, present an interesting use case. By combining longer key-reuse chains with consistent issuing of 90-day certificates with 30-day overlaps, their customers achieve high relative key utilization without frequently replacing public keys.

Finally, motivated by the effectiveness and potential of some observed automation solutions and trends, we outline a new approach (Section 5) to address the unresolved revocation problem. Our solution framework is based on observations highlighted in the paper, takes current trends to the extreme, and combines the use of short-lived three-phase certificates (a modification of an idea by Rivest [66]). It introduces the concept of parent-child certificate relationships and simple management rules. The framework ensures efficient use of certificates without increasing the frequency of public key changes or the need for frequent logging in Certificate Transparency (CT) logs [50]. Using our CR datasets, we demonstrate and quantify the reduced overhead that our approach would provide if CAs choose to reduce their certificate lifetimes using our method rather than naively.

In summary, the paper provides new insights into the current state of HTTPS certificate management, including key reuse, and proposes novel solutions to improve certificate management and address the unresolved revocation problem handled inadequately by browsers.

## 2. Analysis Methodology

### 2.1 Rapid7 Dataset
We used two certificate datasets from Project Sonar [2], consisting of biweekly scans of the IPv4 address space collected using Rapid7’s extensions [4] of ZMap [35]. First, we extracted the full Privacy-Enhanced Mail (PEM) encoded certificates and their SHA-1 fingerprints from all HTTPS certs files between October 30, 2013, and July 13, 2020. Second, for our observation-based statistics, we used the corresponding hosts files collected for port 443 to determine the IP addresses and times at which these certificates were observed (using the SHA-1 fingerprints for mapping between the files).

### 2.2 Identifying and Extracting CR Relationships
Using the above datasets, we identified certificate replacement (CR) relationships. A CR exists between a pair of certificates if:
1. The two certificates were observed at the same IP address (and port number).
2. The two subjectCN either matched perfectly or matched after following three wildcard rules: wildcards are only allowed at the lowest domain level, at the third domain level and down, and only one wildcard is allowed per match.
3. The validity period of the replacing certificate begins later than the beginning of the validity period of the replaced certificate and extends past the end of the validity of the replaced certificate.

Figure 1 shows a toy example with overlapping validity periods (green color) and the first certificate of the CR observed during three scans (first three red markers). The validity period is defined as the time between the notBefore and notAfter values in the certificate, and the lifetime is defined as the time period between the first scan when a certificate is observed (referred to as its birth) and the last scan it is observed (referred to as its death).

In addition to extracting information about the individual certificates and different metrics related to their relative validity periods (e.g., the overlap in Figure 1), we also extract information regarding when the two certificates were seen in use. Of particular interest are cases where servers present their certificates before the validity period has started or after it has expired.

### 2.3 Multi-step CR Identification and Extraction
We performed a series of processing steps to create an aggregated dataset including all CR relationships:

1. **Parse and Process Certificates:** Using a Node.js library node-forge and OpenSSL (when node-forge was unable to parse a certificate), we extracted data from the certificates, including:
   - Certificate identifiers and basic information.
   - Issuer and subject identifiers.
   - CA status and chain info (e.g., whether the subject is a CA and whether it is self-signed, self-issued, or signed by a third party).
   - Validity period.
   - Verification type (determined based on the Object Identifiers (OIDs) [5, 7]).
   - Public key properties.

2. **Extract Birth and Death:** We identified the birth and death of each certificate, respectively. The output files were sorted based on the first birth (step 2) and last death (step 3). We also kept track of IP addresses and the number of observations.

3. **Extract CR Relations:** CRs were identified one certificate at a time based on each certificate’s birth. For each certificate, we searched backwards in time from its time of death (increasing overlap); stopping as soon as we found a matching CR. If no such CR was found, we instead searched for births forward in time (decreasing overlaps) until either such CR was found or no CR could be identified for the certificate. Figure 2 illustrates the search order. For every match, the precision difference between the subjectCN is stored, indicating the degree of similarity.

This structured approach allows us to comprehensively analyze the CR relationships and draw meaningful insights into the management of certificates and public keys on the internet.