### 注意 {.title}
NBDE 客户端系统角色仅支持 Tang 绑定。这意味着您目前无法将其用于 TPM2
绑定。
:::
::: itemizedlist
**先决条件**
-   访问一个或多个 [*受管节点*]{.emphasis} （这是您要使用 NBDE
    客户端系统角色配置的系统）。
-   Ansible Core 软件包安装在控制机器上。
-   `rhel-system-roles`{.literal} 软件包安装在您要运行 playbook
    的系统中。
:::
::: orderedlist
**步骤**
1.  准备包含 Clevis 客户端设置的 playbook。您可以从头开始，或使用
    `/usr/share/ansible/roles/rhel-system-roles.nbde_client/examples/`{.literal}
    目录中的一个 playbook 示例。
    ``` screen
    # cp /usr/share/ansible/roles/rhel-system-roles.nbde_client/examples/high_availability.yml ./my-clevis-playbook.yml
    ```
2.  在您选择的文本编辑器中编辑 playbook，例如：
    ``` screen
    # vi my-clevis-playbook.yml
    ```
3.  添加所需参数。以下 playbook 示例配置 Clevis 客户端，以便在两个 Tang
    服务器中至少有一个可用时自动解锁两个 LUKS 加密卷：
    ``` screen
    ---
    - hosts: all
      vars:
        nbde_client_bindings:
          - device: /dev/rhel/root
            encryption_key_src: /etc/luks/keyfile
            servers:
              - http://server1.example.com
              - http://server2.example.com
          - device: /dev/rhel/swap
            encryption_key_src: /etc/luks/keyfile
            servers:
              - http://server1.example.com
              - http://server2.example.com
      roles:
        - rhel-system-roles.nbde_client
    ```
4.  应用完成的 playbook:
    ``` screen
    # ansible-playbook -i host1,host2,host3 my-clevis-playbook.yml
    ```
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
通过使用在安装了 Clevis 的系统上的 `grubby`{.literal}
工具来确保在早期引导期间 Tang pin 的网络可用：
``` screen
# grubby --update-kernel=ALL --args="rd.neednet=1"
```
:::
::: itemizedlist
**其他资源**
-   有关 NBDE 客户端系统角色的参数和附加信息，请安装
    `rhel-system-roles`{.literal} 软件包，并查看
    `/usr/share/doc/rhel-system-roles/nbde_client/`{.literal} 和
    `/usr/share/ansible/roles/rhel-system-roles.nbde_client/`{.literal}
    目录。
:::
:::
::: section
::: titlepage
# []{#configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption_security-hardening.html#additional-resources_configuring-automated-unlocking-of-encrypted-volumes-using-policy-based-decryption}其他资源 {.title}
:::
::: itemizedlist
-   `tang(8)`{.literal}、`clevis(1)`{.literal}、`jose(1)`{.literal} 和
    `clevis-luks-unlockers(7)`{.literal} 手册页
-   [如何设置多个 LUKS 设备（Clevis + Tang
    解锁）的网络绑定磁盘加密](https://access.redhat.com/articles/4500491){.link}
    知识库文章
:::
:::
:::
[]{#auditing-the-system_security-hardening.html}
::: chapter
::: titlepage
# []{#auditing-the-system_security-hardening.html#auditing-the-system_security-hardening}第 11 章 审计系统 {.title}
:::
审计不会为您的系统提供额外的安全，而是用于发现系统上使用的安全策略的违规。可以通过其他安全措施(如
SELinux)进一步防止这些违规。
::: section
::: titlepage
# []{#auditing-the-system_security-hardening.html#linux-audit_auditing-the-system}Linux 审计 {.title}
:::
Linux
审计系统提供了一种方式来跟踪系统上与安全相关的信息。根据预配置的规则，审计会生成日志条目，来尽可能多地记录系统上所发生的事件的相关信息。对于关键任务环境而言至关重要，可用来确定安全策略的违反者及其所执行的操作。
以下列表总结了审计可以在其日志文件中记录的一些信息：
::: itemizedlist
-   事件的日期、时间、类型和结果.
-   主题和对象的敏感度标签。
-   事件与触发事件的用户身份的关联。
-   对审计配置的所有修改，以及对访问审计日志文件的尝试。
-   所有身份验证机制的使用，如 SSH 和 Kerberos 等。
-   对任何受信任数据库的修改，如 `/etc/passwd`{.literal}。
-   尝试将信息导入系统或从系统导出。
-   根据用户身份、主题和对象标签以及其他属性包含或排除事件。
:::
审计系统的使用也是许多安全相关认证的一项要求。审计旨在满足或超出以下认证或合规指南的要求：
::: itemizedlist
-   受控访问保护配置文件(CAPP)
-   标记的安全保护配置文件(LSPP)
-   规则集基本访问控制(RSBAC)
-   国家工业安全计划操作手册(NISPOM)
-   联邦信息安全管理法案(FISMA)
-   支付卡行业 - 数据安全标准(PCI-DSS)
-   安全技术实施指南(STIG)
:::
审计还包括：
::: itemizedlist
-   由国家信息保障合作伙伴(NIAP)和最佳安全行业(BSI)评估。
-   在红帽企业 Linux 5 上认证为 LSPP/CAPP/RSBAC/EAL4+
-   已认证在 Red Hat Enterprise Linux 6
    上的操作系统保护配置文件/评估保证级别 4+(OSPP/EAL4+)
:::
::: variablelist
**使用案例**
[监视文件访问]{.term}
:   审计可以跟踪文件或目录是否已被访问、修改、执行或文件属性是否已被改变。例如，这有助于检测对重要文件的访问，并在其中一个文件损坏时提供审计跟踪。
[监控系统调用]{.term}
:   可将审计配置为在每次使用特定系统调用时生成日志条目。例如，这可用于通过监控
    `settimeofday`{.literal}、`clock_adjtime`{.literal}
    和其他与时间相关的系统调用来跟踪对系统时间的修改。
[记录用户运行的命令]{.term}
:   审计可以跟踪文件是否已被执行，因此可以定义一个规则以记录每次特定命令的执行。例如，可以对
    `/bin`{.literal}
    目录中的每个可执行文件定义一个规则。然后，可以按用户 ID
    搜索生成的日志条目，以生成每个用户所执行的命令的审计跟踪。
[记录系统路径名称的执行]{.term}
:   除了观察在规则调用时将路径转换为 inode
    的文件访问之外，审计现在还可以观察路径的执行，即使路径在规则调用中不存在，或者在规则调用后文件被替换了。这允许规则在升级程序可执行文件后或甚至在其安装之前继续运行。
[记录安全事件]{.term}
:   `pam_faillock`{.literal}
    认证模块能够记录失败的登录尝试。也可以将审计设置为记录失败的登录尝试，并提供试图登录的用户的额外信息。
[搜索事件]{.term}
:   审计提供了 `ausearch`{.literal}
    工具，可用于过滤日志条目，并根据多个条件提供完整的审计跟踪。
[运行总结报告]{.term}
:   `aureport`{.literal}
    实用程序可用于生成记录事件的日常报告等。然后，系统管理员可以分析这些报告，并进一步调查可疑的活动。
[监控网络访问]{.term}
:   `nftables`{.literal}、`iptables`{.literal} 和 `ebtables`{.literal}
    工具可以配置为触发审计事件，使系统管理员能够监控网络访问。
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
系统性能可能会受到影响，具体取决于审计所收集的信息量。
:::
:::
::: section
::: titlepage
# []{#auditing-the-system_security-hardening.html#audit-system-architecture_auditing-the-system}审计系统架构 {.title}
:::
审计系统由两个主要部分组成：用户空间应用程序和工具，以及内核端系统调用处理。内核组件接收用户空间应用程序的系统调用，并通过以下过滤器对其进行过滤：[**user**]{.strong}、[**task**]{.strong}、[**fstype**]{.strong}
或 [**exit**]{.strong}。
系统调用通过 [**exclude**]{.strong}
过滤器后，它将通过上述其中一个过滤器发送，该过滤器根据审计规则配置将其发送到审计守护进程，以进行进一步处理。
用户空间审计守护进程从内核收集信息，并在日志文件中创建条目。其他审计用户空间工具与审计守护进程、内核审计组件或审计日志文件进行交互：
::: itemizedlist
-   `auditctl`{.literal} -
    审计控制工具与内核审计组件进行交互，以管理规则并控制事件产生进程的许多设置和参数。
-   其余的审计工具将审计日志文件的内容作为输入，并根据用户的要求生成输出。例如，`aureport`{.literal}
    工具生成所有记录的事件的报告。
:::
在 RHEL 9 中，Audit 分配程序守护进程(`audisp`{.literal})功能集成到 Audit
守护进程中(`auditd`{.literal})。用于实时分析程序与审计事件交互的插件配置文件默认位于
`/etc/audit/plugins.d/`{.literal} 目录中。
:::
::: section
::: titlepage
# []{#auditing-the-system_security-hardening.html#configuring-auditd-for-a-secure-environment_auditing-the-system}为安全环境配置 auditd {.title}
:::
默认的 `auditd`{.literal}
配置应该适合于大多数环境。但是，如果您的环境必须满足严格的安全策略，建议对
`/etc/audit/auditd.conf`{.literal}
文件中的审计守护进程配置进行以下设置：
::: variablelist
[log_file]{.term}
:   包含审计日志文件的目录（通常为
    `/var/log/audit/`{.literal}）应位于单独的挂载点上。这可以防止其他进程消耗此目录的空间，并为审计守护进程提供准确的剩余空间检测。
[max_log_file]{.term}
:   指定单个审计日志文件的最大大小，必须设置为充分利用保存审计日志文件的分区上的可用空间。
[max_log_file_action]{.term}
:   一旦达到 `max_log_file`{.literal}
    中设置的限制，决定要采取什么行动，应将其设置为
    `keep_logs`{.literal}，以防止审计日志文件被覆盖。
[space_left]{.term}
:   指定磁盘上剩余的可用空间量，其是`space_left_action`{.literal}参数中设置的触发时所采取的操作。必须设置一个数字，让管理员有足够的时间来响应，并释放磁盘空间。`space_left`{.literal}
    的值取决于审计日志文件的生成速度。
[space_left_action]{.term}
:   建议将 `space_left_action`{.literal} 参数设置为 `email`{.literal} 或
    使用适当通知方法的 `exec`{.literal}。
[admin_space_left]{.term}
:   指定绝对最小可用空间量，其是 `admin_space_left_action`{.literal}
    参数中设置的触发时所采取的操作，必须设置一个值，为记录管理员所执行的操作保留足够的空间。
[admin_space_left_action]{.term}
:   应设置为 `single`{.literal}
    来将系统置于单用户模式，并允许管理员释放一些磁盘空间。
[disk_full_action]{.term}
:   指定当保存审计日志文件的分区上没有可用空间时触发的操作，必须设置为
    `halt`{.literal} 或
    `single`{.literal}。当审计无法记录事件时，这可确保系统关闭或以单用户模式运行。
[disk_error_action]{.term}
:   指定当在包含审计日志文件的分区上检测到错误时触发的操作，必须设置为
    `syslog`{.literal}、`single`{.literal}
    或`halt`{.literal}，具体取决于您处理硬件故障的本地安全策略。
[flush]{.term}
:   应设置为 `incremental_async`{.literal}。它与 `freq`{.literal}
    参数相结合，该参数决定了在强制与硬盘进行硬盘同步前可以将多少条记录发送到磁盘。`freq`{.literal}
    参数应设置为`100`{.literal}。这些参数可确保审计事件数据与磁盘上的日志文件同步，同时保持良好的活动性能。
:::
其余配置选项应根据您的本地安全策略来设置。
:::
::: section
::: titlepage
# []{#auditing-the-system_security-hardening.html#starting-the-audit-service_auditing-the-system}启动和控制 auditd {.title}
:::
在配置了 `auditd`{.literal} 后，启动服务以收集 Audit
信息并将它存储在日志文件中。以 root 用户身份运行以下命令来启动
`auditd`{.literal} ：
``` screen
# service auditd start
```
将 `auditd`{.literal} 配置为在引导时启动：
``` screen
# systemctl enable auditd
```
您可以使用 `# auditctl -e 0`{.literal} 命令暂时禁用
`auditd`{.literal}，并使用 `# auditctl -e 1`{.literal} 重新启用它。
可以使用 `service auditd action`{.literal} 命令对 `auditd`{.literal}
执行许多其他操作，其中 [*action*]{.emphasis} 可以是以下之一：
::: variablelist
[`stop`{.literal}]{.term}
:   停止 `auditd`{.literal}。
[`restart`{.literal}]{.term}
:   重新启动 `auditd`{.literal}。
[`reload`{.literal} 或 `force-reload`{.literal}]{.term}
:   重新加载 `/etc/audit/auditd.conf`{.literal} 文件中
    `auditd`{.literal} 的配置。