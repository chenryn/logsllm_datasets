ward facing services (e.g., HTTP) upon infection, which
prevents infected devices from being scanned. Second,
Censys scans often take more than 24 hours to complete,
Figure 2: Mirai Operation—Mirai bots scan the IPv4 address
space for devices that run telnet or SSH, and attempt to log in us-
ing a hardcoded dictionary of IoT credentials. Once successful,
the bot sends the victim IP address and associated credentials to
a report server, which asynchronously triggers a loader to infect
the device. Infected hosts scan for additional victims and accept
DDoS commands from a command and control (C2) server.
listened for attack commands from the command and con-
trol server (C2) while simultaneously scanning for new
victims.
Malware phylogeny While not directly related to
our study, the Mirai family represents an evolution of
BASHLITE (otherwise known as LizardStresser, Torlus,
Gafgyt), a DDoS malware family that infected Linux
devices by brute forcing default credentials [86]. BASH-
LITE relied on six generic usernames and 14 generic pass-
words, while the released Mirai code used a dictionary
of 62 username/password pairs that largely subsumed
BASHLITE’s set and added credentials speciﬁc to con-
sumer routers and IoT devices. In contrast to BASHLITE,
Mirai additionally employed a fast, stateless scanning
module that allowed it to more efﬁciently identify vulner-
able devices.
3 Methodology
Our study of Mirai leverages a variety of network vantage
points: a large, passive network telescope, Internet-wide
scanning, active Telnet honeypots, logs of C2 attack
commands, passive DNS trafﬁc, and logs from DDoS
attack targets. In this section, we discuss our data sources
and the role they play in our analysis. We provide a
high-level summary in Table 1.
USENIX Association
26th USENIX Security Symposium    1095
Command & Control LoaderReport ServerDevicesInfrastructureAttackerDDoS Target(cid:6)(cid:1)Send command(cid:4)(cid:1)Dispatch(cid:8) Attack (cid:1)Report(cid:2)(cid:1)Scan(cid:1)(cid:5)(cid:1)Load(cid:1) (cid:7)(cid:1)RelayVictimBotsRole
Growth and size
Data Source
Network telescope
Collection Site
Merit Network, Inc.
Collection Period
07/18/2016–02/28/2017
Data Volume
370B packets, avg. 269K IPs/min
Device composition
Active scanning
Censys
07/19/2016–02/28/2017
136 IPv4 scans, 5 protocols
Ownership & evolution
Attack characterization
Telnet honeypots
Telnet honeypots
Malware repository
DNS—active
DNS—passive
C2 milkers
DDoS IP addresses
DDoS IP addresses
DDoS IP addresses
AWS EC2
Akamai
VirusTotal
Georgia Tech
Large U.S. ISP
Akamai
Akamai
Google Shield
Dyn
11/02/2016–02/28/2017
11/10/2016–02/13/2017
05/24/2016–01/30/2017
08/01/2016–02/28/2017
08/01/2016–02/28/2017
09/27/2016–02/28/2017
09/21/2016
09/25/2016
10/21/2016
141 binaries
293 binaries
594 binaries
290M RRs/day
209M RRs/day
64.0K attack commands
12.3K IP addresses
158.8K IP addresses
107.5K IP addresses
Table 1: Data Sources—We utilized a multitude of data perspectives to empirically analyze the Mirai botnet.
Protocol
HTTPS
FTP
Telnet
CWMP
SSH
Total
Banners
342,015
318,688
472,725
505,977
148,640
Devices Identiﬁed
(79.4%)
271,471
144,322
(45.1%)
(22.0%)
103,924
(7.0%)
35,163
8,107
(5.5%)
1,788,045
587,743
(31.5%)
Table 2: Devices Identiﬁed—We identiﬁed device type, model,
and/or vendor for 31.5% of active scan banners. Protocol ban-
ners varied drastically in device identiﬁability, with HTTPS
certiﬁcates being most descriptive, and SSH prompts being the
least.
during which devices may churn to new IP addresses. Fi-
nally, Censys executes scans for different protocols on
different days, making it difﬁcult to increase label speci-
ﬁcity by combining banners from multiple services. We
navigated these constraints by restricting our analysis
to banners that were collected within twenty minutes of
scanning activity (the time period after which we expire
a scan). This small window mitigates the risk of erro-
neously associating the banner data of uninfected devices
with Mirai infections due to DHCP churn.
Post-ﬁltering, our dataset included 1.8 million banners
associated with 1.2 million Mirai-infected IP addresses
(Table 2). We had the most samples for CWMP, and
the least for SSH. We caution that devices with open
services that are not closed by Mirai (e.g., HTTPS and
FTP) can appear repeatedly in Censys banner scans during
our measurement window (due to churn) and thus lead to
over counting when compared across protocols. As such,
we intentionally explored protocols in isolation from one
another and limited ourselves to measurements that only
consider relative proportions rather than absolute counts
of infected hosts.
Finally, we processed each infected device’s banner to
identify the device manufacturer and model. We ﬁrst ap-
plied the set of regular expressions used by Nmap service
probes to ﬁngerprint devices [58]. Nmap successfully
handled 98% of SSH banners and 81% of FTP banners,
but matches only 7.8% of the Telnet banners. In order to
increase our coverage and also accommodate HTTPS and
CWMP (which Nmap lacks probes for), we constructed
our own regular expressions to map banners to device
manufacturers and models. Unfortunately, we found that
in many cases, there was not enough data to identify a
model and manufacturer from FTP, Telnet, CWMP, and
SSH banners and that Nmap ﬁngerprints only provide
generic descriptions. In total, we identiﬁed device type
and/or model and manufacturer for 31.5% of banners
(Table 2). We caution that this methodology is suscepti-
ble to misattribution in instances where port-forwarding
and Universal Plug and Play (UPnP) are used to present
multiple devices behind a single IP address, making the
distinction between middlebox and end-device difﬁcult.
3.3 Telnet Honeypots
To track the evolution of Mirai’s capabilities, we collected
binaries installed on a set of Telnet honeypots that mas-
queraded as vulnerable IoT devices. Mechanically, we
presented a BusyBox shell [92] and IoT-consistent device
banner. Our honeypots logged all incoming Telnet traf-
ﬁc and downloaded any binaries that attackers attempted
to install on the host via wget or tftp (the methods of
infection found in Mirai’s original source). In order to
avoid collateral damage, we blocked all other outgoing
requests (e.g., scanning and DoS trafﬁc).
We logged 80K connection attempts from 54K IP ad-
dresses between November 2, 2016 and February 28,
2017, collecting a total 151 unique binaries. We ﬁltered
out executables unrelated to Mirai based on a YARA sig-
nature that matched any of the strings from the original
source code release, leaving us with 141 Mirai binaries.
We supplemented this data with 293 binaries observed by
honeypots operated by Akamai, which served a similar
purpose to ours, but were hosted on a different public
1096    26th USENIX Security Symposium
USENIX Association
cloud provider. As a ﬁnal source of samples, we included
594 unique binaries from VirusTotal [90] that we scanned
for using the YARA rules mentioned above. In total, we
collected 1,028 unique Mirai samples.
We analyzed the binaries for the three most common ar-
chitectures— MIPS 32-bit, ARM 32-bit, and x86 32-bit—
which account for 74% of our samples. We extracted
the set of logins and passwords, IP blacklists, and C2 do-
mains from these binaries, identifying 67 C2 domains and
48 distinct username/password dictionaries (containing a
total 371 unique passwords).
3.4 Passive & Active DNS
Following the public release of Mirai’s source code, com-
peting Mirai botnet variants came into operation. We
disambiguated ownership and estimate the relative size
of each Mirai strain by exploring passive and active DNS
data for the 67 C2 domains that we found by reverse engi-
neering Mirai binaries. We also leveraged our DNS data
to map the IP addresses present in attack commands to
victim domain names.
From a large U.S. ISP, we obtained passive DNS data
consisting of DNS queries generated by the ISP’s clients
and their corresponding responses. More speciﬁcally,
we collected approximately 209 million resource records
(RRs)—queried domain name, and associated RDATA—
and their lookup volumes aggregated on a daily basis.
For our active DNS dataset, we obtained 290 million
RRs per day from Thales, an active DNS monitoring
system [44]. Both datasets cover the period of August 1,
2016 to February 28, 2017.
Using both passive and active DNS datasets, we per-
formed DNS expansion to identify shared DNS infrastruc-
ture by linking related historic domain names (RHDN)
and related historic IPs (RHIPs) [5]. This procedure be-
gan with the seed set of C2 domains and IPs extracted
during reverse engineering of our honeypotted binaries.
For a given seed foo.com, we identiﬁed the IP addresses
that foo.com previously resolved to and added them to
a growing set of domains and IPs. We additionally per-
formed the reverse analysis, starting from an IP and ﬁnd-
ing any domain names that concurrently resolved it. Thus,
even from a single domain name, we iteratively expanded
the set of related domain names and IP addresses to con-
struct a graph reﬂecting the shared infrastructure used
by Mirai variants. In total, we identiﬁed 33 unique DNS
clusters that we explore in detail in Section 5.
3.5 Attack Commands
To track the DDoS attack commands issued by Mirai
operators, Akamai ran a “milker” from September 27,
2016–February 28, 2017 that connected to the C2 servers
found in the binaries uploaded to their honeypots. The
service simulated a Mirai-infected device and communi-
cated with the C2 server using a custom bot-to-C2 proto-
col, which was reverse engineered from malware samples
prior to source code release. In total, Akamai observed
64K attack commands issued by 484 unique C2 servers
(by IP address). We note that a naive analysis of attack
commands overestimates the volume of attacks and tar-
gets: individual C2 servers often repeat the same attack
command in rapid succession, and multiple distinct C2
servers frequently issued the same command. To account
for this, we heuristically grouped attack commands along
two dimensions: by shared C2 infrastructure and by tem-
poral similarity. We collapsed matching commands (i.e.,
tuples of attack type, duration, targets, and command op-
tions) that occur within 90 seconds of each other, which
yielded 15,194 attacks from 146 unique IP clusters. Our
attack command coverage includes the Dyn attack [36]
and Liberia attacks [45]. We did not observe attack com-
mands for Krebs on Security and OVH, which occurred
prior to the milker’s operation.
3.6 DDoS Attack Traces