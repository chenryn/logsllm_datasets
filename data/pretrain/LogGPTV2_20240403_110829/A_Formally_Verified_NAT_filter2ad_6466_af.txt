### Optimized Implementation and Performance Impact

We optimized our implementation at the instruction level, resulting in an overall slower access time. This is due to the increased number of candidate memory locations for each item on average. The performance difference is most pronounced for lookups that do not find a match, as these require searching all candidate memory locations.

### Summary of Experimental Evaluation

Our experimental evaluation demonstrates that it is feasible to develop a NAT network function that offers competitive performance while being formally verified.

### Discussion

Developing and verifying VigNAT represents a significant step toward the broader goal of creating verified, high-performance network functions (NFs). The Vigor approach and prototype, while promising, have several limitations and offer opportunities for future research. In this section, we discuss some of these aspects.

#### Proof Failures and Model Validity

Vigor ensures that no incorrect proofs are produced, but it may fail to prove a property that actually holds for a given NF if the model used is invalid. For example, if Vigor uses an overly abstract model, such as model (b) from Figure 4 in §3, it cannot prove that the NF correctly implements the discard protocol, even though it does. If a proof fails and the reported reason does not lead to a bug in the code, it may be that the NF exercises libVig functionality that is not properly captured by the symbolic model. In such cases, the NF developer can request a more detailed model from the libVig developers.

#### Concurrency Verification

The current version of Vigor cannot verify concurrent code. We anticipate that the development and verification of useful concurrent data structures will be the most significant challenge.

#### Legacy Code Verification

We have not yet applied Vigor to mature, legacy code. Such software often has state-handling code scattered throughout, making refactoring to use libVig data structures challenging. Additionally, it would require annotating loops and extracting loop invariants, although we expect to automate these tasks using known techniques [23, 47].

#### Reducing Human Effort

To reduce the human effort needed to expand libVig and use Vigor, we aim to automate most tasks:
1. **Automatic Lemma Generation**: Many lemmas required for Step 3 are boiler-plate, and we should be able to generate them automatically.
2. **Simple Over-Approximate Models**: For proving low-level properties, simple over-approximate models that leave outputs unconstrained can be generated automatically. Techniques that learn invariants from traces [13, 45] can also refine symbolic models or produce initial drafts for libVig contracts.
3. **Intermediate Lemmas**: Much of the effort in verifying libVig involves writing intermediate lemmas to bridge logical gaps that VeriFast cannot make on its own. Using a proof assistant or a more powerful theorem prover would reduce this effort [4, 12].
4. **Formal Contract Generation**: Generating formal contracts that specify standards (e.g., as described in an RFC) will always require manual effort. However, standards often have a structure amenable to natural language processing, so automated techniques [37] could generate first drafts, which can then be refined by humans.

### Related Work

As described in §2, our work on VigNAT falls under the broader umbrella of "data-plane verification" within the area of NF verification. The closest work to ours is that of Dobrescu et al. [19], who verified NFs written in Click [35], including a NAT. They proved low-level properties such as crash freedom and bounded execution. Their approach relies on exhaustive symbolic execution of individual Click elements and on-demand composition of the resulting analyses to reason about Click pipelines. Like Vigor, their approach puts all state in special data structures but does not verify the data structures themselves or that the NF uses them correctly. Therefore, Dobrescu et al.'s work cannot prove semantic properties, unlike the "lazy proofs" technique we described here.

Network verification, which focuses on verifying network properties such as reachability and loops, is a related but distinct area. There is a substantial body of prior work in this area [24, 25, 30–32, 38, 39, 46, 52, 55, 59]. Stoenescu et al. [55] focus on network verification but rely on more detailed NF models than other work in this area, testing their models for faithfulness to the corresponding NF implementations. Vigor, on the other hand, formally verifies that the models are guaranteed to be valid for the proof, ensuring that replacing a model with the corresponding implementation preserves the proof, modulo the assumptions in §5.4.

Many researchers have applied verification techniques to networked and distributed systems, sharing tools and techniques such as symbolic execution, formal contracts, and proof checkers. However, the approach of using different verification techniques for different parts of the code and combining the results through lazy proofs is novel. Musuvathi et al. [41] tested the Linux TCP implementation for conformance to a formal specification. Bishop et al. [3] tested several implementations of TCP/IP and the sockets API for conformance to a formal specification. Kuzniar et al. [36] tested OpenFlow switches for interoperability with reference implementations. Hawblitzel et al. [26] verified network applications written in Dafny—a high-level language with built-in verification support. Beringer et al. [2] verified an OpenSSL implementation, proving functional correctness and cryptographic properties.

There is significant prior work on verifying properties of systems software, much of which can be applied to NF verification. For example, seL4 [34], CompCert [54], and FSCQ [11] show how to prove semantic properties of systems. Unfortunately, they all require the use of high-level (sometimes esoteric) programming languages and deep expertise in verification, which we consider a high barrier to adoption. The motivation behind Vigor is to make the verification of network functions accessible to most (ideally all) NF developers.

### Conclusion

We presented a NAT box along with a technique and toolchain for proving that it is semantically correct according to a formal interpretation of RFC 3022. Our main contribution is exploiting the specifics of NF structure to propose a new verification technique that combines exhaustive symbolic execution with formal proof checking based on separation logic. This technique, called "lazy proofs," can scalably prove both low-level and semantic properties of our NF. Experimental results demonstrate the practicality of our approach: the verified NAT box performs as well as an unverified DPDK NAT and outperforms the standard Linux NAT. We hope our technique will eventually generalize to proving properties of many other software NFs, thereby amortizing the tedious work that has gone into building a library of verified NF data structures.

### Acknowledgments

We thank Jonas Fietz, Vova Kuznetsov, Christian Maciocco, Mia Primorac, Martin Vassor, and Jonas Wagner for insightful technical discussions, as well as the members of the Network Architecture Lab and Dependable Systems Lab at EPFL for valuable feedback. We also thank our shepherd, Arjun Guha, and the anonymous reviewers for their comments and guidance. This work is supported by a Swiss National Science Foundation Starting Grant and an Intel grant.

### References

[References listed as provided, with no changes made to the content or formatting.]

---

This revised text aims to be more clear, coherent, and professional, while maintaining the original content and structure.