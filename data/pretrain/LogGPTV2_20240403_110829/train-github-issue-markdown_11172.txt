`versioninfo()`
    julia> versioninfo()
    Julia Version 1.5.1
    Commit 697e782ab8 (2020-08-25 20:08 UTC)
    Platform Info:
      OS: macOS (x86_64-apple-darwin19.5.0)
      CPU: Intel(R) Core(TM) m3-7Y32 CPU @ 1.10GHz
      WORD_SIZE: 64
      LIBM: libopenlibm
      LLVM: libLLVM-9.0.1 (ORCJIT, skylake)
Currently:
    julia> f(;x) = "x = $x"
    f (generic function with 1 method)
    julia> f(x=1)
    "x = 1"
    julia> f(;y) = "y = $y"
    f (generic function with 1 method)
    julia> f(x=1)
    ERROR: UndefKeywordError: keyword argument y not assigned
    Stacktrace:
     [1] top-level scope at REPL[7]:1
x and y are not specified by default, so this cannot be treated as function
redefinition.
However, I understand the problem here: while `f(;x)`, `f(;y)` or `f(;x=1)`,
`f(;y)` are different function definitions, `f(;x=1)`, `f(;y=2)` contain
function redefinition.
Expected behavior:
    julia> f(;x) = "x = $x"
    f (generic function with 1 method)
    julia> f(;y) = "y = $y"
    f (generic function with 2 methods)
    julia> f(x=1)
    "x = 1"
    julia> f(y=1)
    "y = 1"
    julia> g(;x=1) = "x = $x"
    g (generic function with 1 method)
    julia> g()
    "x = 1"
    julia> g(;y=2) = "y = $y"
    g (generic function with 2 methods)
    julia> g()
    "y = 2"
    julia> g(x=8)
    "x = 8"
    julia> g(y=12)
    "y = 12"
This way it's probably less confusing.
PS: This example here is only to show the problem, here it is probably easier
just to use `f(; kw...)` and process them later. However, sometimes different
argument names correspond to completely different characteristics of a
function so it would be easier to just define them as 2 different functions
rather than processing kw args.