---
author: Dedoimedo
category: 容器与云
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 13239
date: '2017-09-21 08:54:00'
editorchoice: false
excerpt: 简单来讲，如果你在用一个旧版本的 Docker，你必须手动配置 Swarm 来创建 Docker 集群。从 1.12 版开始，Docker 引擎集成了一个原生的实现来支持无缝的集群设置。
fromurl: http://www.dedoimedo.com/computers/docker-swarm-intro.html
id: 8888
islctt: true
largepic: /data/attachment/album/201709/21/000157kapl2p7l32h2lyz2.jpg
permalink: /article-8888-1.html
pic: /data/attachment/album/201709/21/000157kapl2p7l32h2lyz2.jpg.thumb.jpg
related:
- displayorder: 0
  raid: 8892
reviewer: ''
selector: ''
summary: 简单来讲，如果你在用一个旧版本的 Docker，你必须手动配置 Swarm 来创建 Docker 集群。从 1.12 版开始，Docker 引擎集成了一个原生的实现来支持无缝的集群设置。
tags:
- Docker
- Swarm
- 编排
thumb: false
title: Docker 引擎的 Swarm 模式：入门教程
titlepic: true
translator: vizv
updated: '2017-09-21 08:54:00'
---
![](/data/attachment/album/201709/21/000157kapl2p7l32h2lyz2.jpg)
Swarm，听起来像是一个朋克摇滚乐队。但它确实是个新的编排机制，抑或者是，一个 [Docker](http://www.dedoimedo.com/computers/docker-guide.html) 现有编排体制的改进。简单来讲，如果你在用一个旧版本的 Docker，你必须手动配置 Swarm 来创建 Docker 集群。从 [1.12 版](https://blog.docker.com/2016/06/docker-1-12-built-in-orchestration/)开始，Docker 引擎集成了一个原生的实现（LCTT 译注：见下文）来支持无缝的集群设置。也就是为什么会有这篇文章。
在这篇教程中，我将带你体验一下编排后的 Docker 将能做的事情。这篇文章并不是包含所有细节（如 BnB 一般）或是让你对其全知全能，但它能带你踏上你的集群之路。在我的带领下开始吧。
![Teaser](/data/attachment/album/201709/21/000230rz2ii4w4mtmiwwg4.jpg)
### 技术概要
如果把 Docker 详细而又好用的文档照搬到这里那将太丢人了，所以我将简要概括下这个技术的概要。我们已经有了 Docker，对吧。现在，你想要更多的服务器作为 Docker 主机，但同时你希望它们属于同一个逻辑上的实体。也就是说，你想建立一个集群。
![](/data/attachment/album/201709/21/000244rmm07lzl8lmszl8s.gif)
我们先从一个主机组成的集群开始。当你在一个主机上初始化一个 Swarm 集群，这台主机将成为这个集群的 管理者   （    manager    ） 。从技术角度来讲，它成为了 共识组   （    consensus group    ） 中的一个 节点   node 。其背后的数学逻辑建立在 [Raft](https://en.wikipedia.org/wiki/Raft_%28computer_science%29) 算法之上。 管理者   （    manager    ） 负责调度任务。而具体的任务则会委任给各个加入了 Swarm 集群的 工作者   （    worker    ） 节点。这些操作将由 Node API 所管理。虽说我讨厌 API 这个词汇，但我必须在这里用到它。
Service API 是这个实现中的第二个组件。它允许 管理者   （    manager    ） 节点在所有的 Swarm 集群节点上创建一个分布式的服务。这个服务可以 被复制   （    replicated    ） ，也就是说它们（LCTT 译注：指这些服务）会由平衡机制被分配到集群中（LCTT 译注：指 replicated 模式，多个容器实例将会自动调度任务到集群中的一些满足条件的节点），或者可以分配给全局（LCTT 译注：指 global 模式），也就是说每个节点都会运行一个容器实例。
此外还有更多的功课需要做，但这些信息已经足够你上路了。现在，我们开始整些实际的。我们的目标平台是 [CentOS 7.2](http://www.dedoimedo.com/computers/lenovo-g50-centos-xfce.html)，有趣的是在我写这篇教程的时候，它的软件仓库中只有 1.10 版的 Docker，也就是说我必须手动更新以使用 Swarm。我们将在另一篇教程中讨论这个问题。接下来我们还有一个跟进的指南，其中涵盖了如何将新的节点加入我们现有的集群（LCTT 译注：指刚刚建立的单节点集群），并且我们将使用 [Fedora](http://www.dedoimedo.com/computers/fedora-24-gnome.html) 进行一个非对称的配置。至此，请确保正确的配置已经就位，并有一个工作的集群启动并正在运行（LCTT 译注：指第一个节点的 Docker 已经安装并已进入 Swarm 模式，但到这里笔者并没有介绍如何初始化 Swarm 集群，不过别担心下章会讲）。
### 配置镜像和服务
我将尝试配置一个负载均衡的 [Apache](https://hub.docker.com/_/httpd/) 服务，并使用多个容器实例通过唯一的 IP 地址提供页面内容。挺标准的吧（LCTT 译注：指这个负载均衡的网页服务器）。这个例子同时也突出了你想要使用集群的大多数原因：可用性、冗余、横向扩展以及性能。当然，你同时需要考虑[网络](http://www.dedoimedo.com/computers/docker-networking.html)和[储存](http://www.dedoimedo.com/computers/docker-data-volumes.html)这两块，但它们超出了这篇指南所涉及的范围了。
这个 Dockerfile 模板其实可以在官方镜像仓库里的 httpd 下找到。你只需一个最简单的设置来起步。至于如何下载或创建自己的镜像，请参考我的入门指南，链接可以在这篇教程的顶部可以找到。
```
docker build -t my-apache2 .
Sending build context to Docker daemon 2.048 kB
Step 1 : FROM httpd:2.4
Trying to pull repository docker.io/library/httpd ...
2.4: Pulling from docker.io/library/httpd
8ad8b3f87b37: Pull complete
c95e1f92326d: Pull complete
96e8046a7a4e: Pull complete
00a0d292c371: Pull complete
3f7586acab34: Pull complete
Digest: sha256:3ad4d7c4f1815bd1c16788a57f81b413...a915e50a0d3a4
Status: Downloaded newer image for docker.io/httpd:2.4
 ---> fe3336dd034d
Step 2 : COPY ../public-html/ /usr/local/apache2/htdocs/
...
```
![Image created](/data/attachment/album/201709/21/000246mzzz2mi2bkasnn2c.png)
在你继续下面的步骤之前，你应该确保你能无错误的启动一个容器实例并能链接到这个网页服务器上（LCTT 译注：使用下面的命令）。一旦你确保你能连上，我们就可以开始着手创建一个分布式的服务。
```
docker run -dit --name my-running-app my-apache2
```
将这个 IP 地址输入浏览器，看看会出现什么。
### Swarm 初始化和配置
下一步就是启动 Swarm 集群了。你将需要这些最基础的命令来开始，它们与 Docker 博客中的例子非常相似：
```
docker service create --name frontend --replicas 5 -p 80:80/tcp my-apache2:latest
```
这里我们做了什么？我们创建了一个叫做 `frontent` 的服务，它有五个容器实例。同时我们还将主机的 80 端口和这些容器的 80 端口相绑定。我们将使用刚刚新创建的 Apache 镜像来做这个测试。然而，当你在自己的电脑上直接键入上面的指令时，你将看到下面的错误：
```
docker service create --name frontend --replicas 5 -p 80:80/tcp my-apache2:latest
Error response from daemon: This node is not a swarm manager. Use "docker swarm init" or "docker swarm join" to connect this node to swarm and try again.
```
这意味着你没有将你的主机（节点）配置成一个 Swarm  管理者   （    manager    ） 。你可以在这台主机上初始化 Swarm 集群或是让它加入一个现有的集群。由于我们目前还没有一个现成的集群，我们将初始化它（LCTT 译注：指初始化 Swarm 集群并使当前节点成为 manager）：