---
author: Seth Kenlon
category: 软件开发
comments_data:
- date: '2022-06-25 16:41:50'
  message: 不要学，都是过时的语言，语法晦涩难懂。尤其是clisp为了兼容和面向对象，就是个缝合怪，语法还缺乏一致性。那怕你去学习scheme和racket都比这好。
  postip: 113.90.145.82
  username: 来自广东深圳的 Firefox 101.0|Mac 10.15 用户
count:
  commentnum: 1
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 5554
date: '2022-06-24 12:40:00'
editorchoice: false
excerpt: 许多大型代码库中都有 Lisp 代码的身影，因此，熟悉一下这门语言是一个明智之举。
fromurl: https://opensource.com/article/21/5/learn-lisp
id: 14751
islctt: true
largepic: /data/attachment/album/202206/24/124147v0loy4e3y0hneih8.jpg
permalink: /article-14751-1.html
pic: /data/attachment/album/202206/24/124147v0loy4e3y0hneih8.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 许多大型代码库中都有 Lisp 代码的身影，因此，熟悉一下这门语言是一个明智之举。
tags:
- Lisp
thumb: false
title: 一起来学习 Lisp 编程语言吧！
titlepic: true
translator: lkxed
updated: '2022-06-24 12:40:00'
---
> 
> 许多大型代码库中都有 Lisp 代码的身影，因此，熟悉一下这门语言是一个明智之举。
> 
> 
> 
![](/data/attachment/album/202206/24/124147v0loy4e3y0hneih8.jpg)
早在 1958 年，Lisp 就被发明出来了，它是世界上第二古老的计算机编程语言（LCTT 译注：最古老的编程语言是 Fortran，诞生于 1957 年）。它有许多现代的衍生品，包括 Common Lisp、Emacs Lisp（Elisp）、Clojure、Racket、Scheme、Fennel 和 GNU Guile 等。
那些喜欢思考编程语言的设计的人，往往都喜欢 Lisp，因为它的语法和数据有着相同的结构：Lisp 代码实际上是 一个列表的列表   a list of lists ，它的名字其实是 “ 列表处理   LISt Processing ” 的简写。而那些喜欢思考编程语言的美学的人，往往都讨厌 Lisp，因为它经常使用括号来定义范围；事实上，编程界也有一个广为流传的笑话：Lisp 代表的其实是  “大量烦人的多余括号”   Lots of Irritating Superfluous Parentheses 。
不管你是喜欢还是讨厌 Lisp 的设计哲学，你都不得不承认，它都是一门有趣的语言，过去如此，现在亦然（这得归功于现代方言 Clojure 和 Guile）。你可能会惊讶于在任何特定行业的大代码库中潜伏着多少 Lisp 代码，因此，现在开始学习 Lisp，至少熟悉一下它，不失为一个好主意。
### 安装 Lisp
Lisp 有很多不同的实现。比较流行的开源版本有 [SBCL](http://sbcl.org)、[GNU Lisp](http://clisp.org) 和 [GNU Common Lisp](https://www.gnu.org/software/gcl/)（GCL）。你可以使用发行版的包管理器安装它们中的任意一个，在本文中，我是用的是 `clisp`（LCTT 译注：也就是 GNU Lisp，一种 ANSI Common Lisp 的实现）。
以下是在不同的 Linux 发行版中安装 `clisp` 的步骤。
在 Fedora Linux 上，使用 `dnf`：
```
$ sudo dnf install clisp
```
在 Debian 上，使用 `apt`：
```
$ sudo apt install clisp
```
在 macOS 上，使用 [MacPorts](https://opensource.com/article/20/11/macports) 或者 [Homebrew](https://opensource.com/article/20/6/homebrew-linux)：
```
# 使用 MacPorts
$ sudo port install clisp
# 使用 Homebrew
$ brew install clisp
```
在 Windows 上，你可以使用 [clisp on Cygwin](https://cygwin.fandom.com/wiki/Clisp) 或者从 [gnu.org/software/gcl](http://mirror.lagoon.nc/gnu/gcl/binaries/stable) 上下载 GCL 的二进制文件。
虽然我使用 `clisp` 命令来运行 Lisp 代码，但是本文中涉及到的大多数语法规则，对任何 Lisp 实现都是适用的。如果你选择使用一个不同的 Lisp 实现，除了用来运行 Lisp 代码的命令会和我不一样外（比如，你可能要用 `gcl` 或 `sbcl` 而不是 `clisp`），其它的所有东西都是相同的。
### 列表处理
Lisp 源代码的基本单元是 “ 表达式   expression ”，它在形式上是一个列表。举个例子，下面就是一个列表，它由一个操作符（`+`）和两个整数（`1` 和 `2`）组成：
```
(+ 1 2)
```
同时，它也是一个 Lisp 表达式，内容是一个符号（`+`，会被解析成一个加法函数）和它的两个参数（`1` 和 `2`）。你可以在 Common Lisp 的交互式环境（即 REPL）中运行该表达式和其它表达式。如果你熟悉 Python 的 IDLE，那么你应该会对 Lisp 的 REPL 感到亲切。（LCTT 译注：REPL 的全称是 “Read-Eval-Print Loop”，意思是 “‘读取-求值-输出’循环”，这个名字很好地描述了它的工作过程。）
要进入到 REPL 中，只需运行 Common Lisp 即可：
```
$ clisp
[1]>
```
在 REPL 提示符中，尝试输入一些表达式：
```
[1]> (+ 1 2)
3
[2]> (- 1 2)
-1
[3]> (- 2 1)
1
[4]> (+ 2 3 4)
9
```
### 函数
在了解了 Lisp 表达式的基本结构后，你可以使用函数来做更多有用的事。譬如，`print` 函数可以接受任意数量的参数，然后把它们都显示在你的终端上，`pprint` 函数还可以实现格式化打印。还有更多不同的打印函数，不过，`pprint` 在 REPL 中的效果就挺好的：
```
[1]> (pprint "hello world")
"hello world"
[2]>
```
你可以使用 `defun` 函数来创建一个自定义函数。`defun` 函数需要你提供自定义函数的名称，以及它接受的参数列表：
```
[1]> (defun myprinter (s) (pprint s))
MYPRINTER
[2]> (myprinter "hello world")
"hello world"
[3]>
```
### 变量
你可以使用 `setf` 函数来在 Lisp 中创建变量：
```
[1]> (setf foo "hello world")
"hello world"
[2]> (pprint foo)
"hello world"
[3]>
```
你可以在表达式里嵌套表达式（就像使用某种管道一样）。举个例子，你可以先使用 `string-upcase` 函数，把某个字符串的所有字符转换成大写，然后再使用 `pprint` 函数，将它的内容格式化打印到终端上：
```
[3]> (pprint (string-upcase foo))
"HELLO WORLD"
[4]>