The address is 10.100.194.201:4321
把 etcd、Registrator 和confd 组合在一起，就有了一个既简单又强大的方法来
Registrator
与 Zookeeprer 和 etcd 不同，Consul 实现了内置的服务发现系统，所以不需要
Consul是强一致性数据存储，它使用gossip来形成动态集群。它支持分层的键
在给出最终意见之前，让我们来看看实现相同目的的另外一套工具组合。毕
容器
如果模板有任何变化或者etcd 的数据被更新，那么运行中的confd 将确保所
容器
节点-01
图8-8 多节点及Docker 容器、etcd、Registrator 和confd
etcd
容器
容器
confd
容
容器
器
节点-02
etcd
容器
容器
confd
容器
容器
一方面，这三个工
节点-03
etcd
容器
容器
confd
8.1服务注册表121
---
## Page 136
122
第8章发现服务一
sudo consulagent\
建几个目录。Consul的数据在data目录下，配置文件在config目录下。
包，
sudo mkdir -p /data/consul/{data,config,ui}
sudomv consul /usr/local/bin/consul
unzip consul_0.6.4_1inux_amd64.zip
wget https://releases.hashicorp.com/consul/0.6.4/consul_0.6.4_1inux_amd64.zip
sudo apt-get install -yunzip
安装Consul
服务和服务所在节点的信息，
支持，gossip 系统不但支持同一集群内的多个节点，还支持跨数据中心的节点。
手工解决方案或使用第三方工具。对多数据中心，Consul 提供了开箱即用的原生
端只需要注册服务并使用DNS或HTTP接口来实现服务发现。另外两个工具需要
他们自己的服务发现系统。另一方面，Consul提供了内置的服务发现框架。客户
运行的服务的运行状况检查。
自己实现或者使用第三方的。其服务发现系统还包括其他功能，如节点和在其上
rm-fconsul_0.6.4_1inux_amd64.zip
习，
（time-to-live）、定制脚本甚至Docker命令，还提供了易于扩展的运行状况检查。
，解压缩，把它放到/usr/local/bin目录下，删除不需要的zip文件，最后再创
-client=0.0.0.01
-bind=10.100.198.200\
-config-dir/data/consul/config
-data-dir/data/consul/data\
-bootstrap-expect1\
-server\
接下来可以运行consul：
默认的 Ubuntu 发行版没有unzip，需要先把它安装上。然后下载 Consul 压缩
我们将在cd节点配置Consul:
和以前一样，可以先试试手工安装命令，再使用Ansible使其自动化。作为练
Consul 还有另外一个有别于其他工具的很好的功能。它不但可以发现部署的
node=cd\
一方面，Zookeeper和etcd只提供了原始的键/值存储，并要求应用开发者建立
一—分布式服务的关键
而且可以通过HTTP和TCP请求、TTL
---
## Page 137
的，因为只有它一个在运行）。
[INFo] raft:Disabling EnableSingleNode(bootstrap)
[INFO]
[INFo] raft:Election won.Tally:1
[INFO] raft: Node at 10.100.198.200:8300 [Candidate] entering Candidatestate
[WARN]raft:Heartbeat
[ERR]agent:failed tos
[INFo] consul:adding WAN server cd.dc1（Addr:10.100.198.200:8300)（DC:dc1)
[INFO]
[INFO]
==> Consul agent running!
==> Starting Consul agent...
cat/tmp/consul.1og
[INFO]
INFO]
[WARN]
[WARN]
INFo] serf:EventMemberJoin:cd 10.100.198.200
行（&）。
端可以与之进行连接（0.0.0.0表示所有的）。最后重定向输出并确保它在后台运
的位置：ui、data和config。然后指定节点的名字，将要绑定的地址和哪些客户
来运行，并且只有一个服务器的实例（-bootstrapexpect 1）。紧接着是关键目录
INFO]
随着Consul的运行，让我们看看如何把一些数据放进去。
Gossip encrypt: false,RPC-TLS:false, TLS-Incoming: false
日志文件的输出应当与以下内容类似（为简洁起见，删除了时间戳）。
下面让我们来验证Consul正确启动了。
运行Consul 非常简单。我们指定它应当把代理（agent）作为服务器（server）
>/tmp/consul.log&
-ui\
consul:New leaderelected:cd
consul:cluster leadership acquired
raft:Node at 10.100.198.200:8300[Leader] entering Leader state
serf:Failed to re-joinanypreviouslyknown node
consul:adding LAN server cd(Addr:10.100.198.200:8300)(Dc:dc1)
raft:
serf:
Cluster Addr:10.100.198.200 (LAN:8301,WAN: 8302)
serf:Failed to re-join anypreviously known node
C1ientAddr:0.0.0.0（HTTP:8500,HTTPS:-1,DNS:8600,RPC:8400)
Datacenter:'dc1'
Node name:'cd'
Atlas:
Server:
Nodeat 10.100.198.200:8300[Fo11ower]
EventMemberJoin:cd.dc1 10.100.198.200
true（bootstrap:true)
timeout reached, starting election
syncremote state:No cluster leader
]entering Followerstate
8.1服务注册表123
---
## Page 138
124
第8章发现服务一
cur1http://localhost:8500/v1/kv/?recurse\
存版本信息或任何可以表示为整数的信息
里嵌入了键 msg2。最后一行命令为键 msg3 加入值为 1234 的flags。flags 可以保
curl-X PUT -d'this is another test'\
curl-X PUT -d'this is a test'\
http://localhost:8500/v1/kv/messages/msg2
http://1ocalhost:8500/v1/kv/msg1
因为使用了recurse 查询，所以从根开始递归返回所有的键。
命令的输出如下（不保证顺序）：
让我们看看如何查询刚刚保存的信息：
第一行命令生成值为 this is a test 的键 msg1。第二行命令在父键messages
jq'.
一分布式服务的关键
"Value":"dGhpcyBpcyBhIHRlc3Q="
"ModifyIndex":140,
"LockIndex":0,
"Key":“msg1",
"Flags": 0,
"CreateIndex":140,
ModifyIndex":147,
LockIndex":0,
"Key": "messages/msg3",
"Flags":1234,
"CreateIndex":142,
"ModifyIndex":141,
"LockIndex":0,
"Key":"messages/msg2"
"Flags":0,
"CreateIndex":141,
---
## Page 139
仅供非商业用途或交流学习使用
及很多加入其中的非服务器代理。另一方面，如果节点数量确实很大，那么可以
务器模式。根据节点的数量，可以选择三个以服务器模式运行的Consul代理，以
cur1-X DELETEhttp://localhost:8500/v1/kv/?recurse
curl-X DELETE http://localhost:8500/v1/kv/messages/msg2
msg2的命令如下：
this isa test
curlhttp://localhost:8500/v1/kv/msg1?raw
curl http://1oca1host:8500/v1/kv/msg1\
东西，但是大小是有限制的。
的。不是所有的东西都可以表示成文本，所以你可以在Consul的键/值里保存任何
Consul 还可以保存别的文本，实际上，在底层，所有的东西都是以二进制存储
我们部署的Consul代理被设置为服务器。然而，大多数代理不需要运行在服
还可以递归地删除：
正如你可能猜到的一样，Consul 键是很容易删除的。例如，删除 messages/
这次我们使用了raw查询参数，所以结果只是查询的键的值：
最后，可以只查询值：
输出跟以前一样，但只是键msg1的：
b|
还可以单独查询一个键，命令如下：
我们可以看到所有插入的键，但是值是使用base64编码的。除了文本，
"ModifyIndex":140,
"LockIndex":0,
'Key":"msg1"
"Flags": 0,
"CreateIndex":140,
8.1服务注册表125
---
## Page 140
仅供非商业用途或交流学习使用
126第8章发现服务——分布式服务的关键
们将要使用的配置与目前的配置非常相似，但还有几个新的没有见过的细节。
置它。因为已经在使用Ansible了，所以将为Consul 再生成一个新的role。虽然我
现集群中的节点，不需要我们告之它们的位置。
数量增加时，管理这样一个列表往往会更复杂。使用 gossip 协议，Consul 能够发
我们指定集群中的服务器列表，与之相比，Consul是一个有用的改进。当服务器
理成员关系并在集群中广播消息，所以并不需要加入一个以上的代理。etcd 要求
就是增加了注册在Consul 中的集群节点的数量。因为 Consul使用 gossip协议来管
们之间同步。如果继续在其他服务器上安装 Consul 代理并将它们加入进来，效果
consuljoin 10.100.198.200
运行它）：
要使其加入在另外一台服务器上运行的Consul代理。这么做的命令如下（请不要
-bootstrap-expect 1。但是，在集群中的一个服务器上运行 Consul是不够的，需
sudo consul agent\
演示环境，配置一个Consul代理在服务器模式下运行绰绰有余。
生故障就会丢失数据。在我们的例子中，由于集群只有三个节点，并且这是一个
将在服务器模式下运行的代理数量增加到五个。如果只有一个服务器在运行，发
在Ansible role roles/consul/tasks/main.yml，前两个任务如下：
介绍了Consul的基础知识，现在来看看如何在集群中的所有服务器上自动配
执行这条命令的效果就是两个服务器上的代理被配置为一个集群，数据在它
跟以前执行的命令相比，唯一的不同是删除了参数-server
>/tmp/consul.log&
-client=0.0.0.0\
-bind=10.100.197.202\
-config-dir/data/consul/config\
-data-dir/data/consul/data\
node=serv-disc-02\
和
---
## Page 141
录和文件的列表，包括源、目的和模式。
分开可以更容易修改它们的值。这种情况下，可以使用一种简单的JSON格式的目
的变量数组。
shell:"nohup consul agent {{ consul_extra }}\
name:Is running
>{{ logs_dir }}/consul.log 2>&1 &"
-node={{ ansible_hostname }}\
-config-dir/data/consul/config
-data-dir/data/consul/data\
client=0.0.0.0\
-bind={{ip}}\
让我们继续 roles/consul/tasks/main.yml中的任务。第三个任务如下：
尽管可以在文件 roles/consul/tasks/main.yml中指定所有的变量，但把它们
files:[
directories:
logs_dir:/data/consul/logs
让我们来看看这些变量，它们定义在roles/consul/defaults/main.yml中：
下面从建立目录和复制文件开始。两个任务都使用了在with_itemstag 中指定
{ src:‘ui'，dest:'/data/consul'，mode:'0644′}
{ src: 'consul', dest:'/usr/local/bin/consul', mode: ‘0755′ },
-/data/consul/config
-/data/consul/data
tags:[consul]
with_items:files
copy:
name:Filesarecopied
tags:[consul]
with_items: directories
file:
name:Directoriesare created
dest:"{{ item.dest }}"
src: "{{ item.src }}"
state:directory
path:"{{ item }}"
8.1服务注册表127
---
## Page 142
128
第8章发现服务一
来实现的。
个用途用于决定是否要运行该任务。这是通过 when:consul_server_ip is defined
consul_server_ip，它有两个用途。第一个用途是为 shell命令提供参数值。第二
加入集群。该任务运行的命令与我们手工执行的命令相同，只不过增加了变量
个）任务，程序如下：
他地址，定义了consul_server_ip变量，稍后很快就会讨论到。
10.100.194.20[2:3] consul_server_ip="10.100.194.201"
让我们看看该文件的内容，如下：
main.yml文件里，与此不同，consul_extra定义在hosts/serv-disc清单文件中。
同定义在 consul_extra 变量中。之前是把变量定义在 roles/consul/defaults/
个集群。使 Consul 运行于服务器模式的命令不同于非服务器模式，我们把这些不
他节点至少应该加入一个节点，所以 Consul 可以使用 gossip 协议把信息传播到整
有风险的。它等同于在我们手动执行命令的基础上又加了几个变量。
hosts: consul
10.100.194.201 consul_extra="-server-bootstrap"
consul]
remote_user:vagrant
tags: [consul]
因为Consul 保证了同一时间只有一个进程在运行，所以多次运行该任务是没
最后，我们有了consul.yml playbook，内容如下：
这个任务确保每个Consul 代理，除了运行在服务器模式中的那个以外，都能
让我们跳到文件 roles/consul/tasks/main.yml中定义的第四个（也是最后一
在服务器IP 地址的右侧定义变量。这种情况下，由.201充当服务器。对于其
如果你还记得手工运行Consul的命令，
name:Has joined