it
is still possible to further improve the performance of
Differential Training by adopting a more accurate noise ratio
estimation algorithm in its outlier detection. We leave this as
a future work.
B. Generalization on Differential Training
Differential Training is designed to identify and correct
wrongly-labeled data samples for Android malware detection.
In this paper, we consider Android malware detection as
a binary classiﬁcation problem, where each app is labeled
either benign or malicious. While we expect that the idea
of Differential Training can be generalized to other ﬁelds
for identifying data samples whose labels are misclassiﬁed,
it cannot be directly applied to correcting wrong labels for
multiclass classiﬁcation. This is because Differential Training
simply ﬂips the labels for identiﬁed noise samples to correct
them. For multiclass classiﬁcation, additional effort is to be
made on how to correct wrong labels.
XI. RELATED WORKS
1) Android Malware Detection: Early research on Android
malware detection incorporates traditional machine learning
approaches such as k nearest neighbors (kNN) [35], [42],
[32], support vector machine (SVM) [55], [47] or Decision
trees [18], [52] with manually selected features such as system
calls [12], [13], permissions [39], embedded strings [10],
APIs [42], [31], [53], and communication intents [48]. Later
research tends to focus on deep learning algorithms and
automatic feature engineering for Android malware detection.
Maldozer [24], R2-D2 [21] and DroidDetector [38] are several
examples that rely on convolutional neural networks to perform
malware detection based on APIs vectors, while some other
malware detection approaches make use of recurrent neural
networks to process sequential app inputs such as API call
sequences [30], [45], [49]. There also exist hybrid approaches
(e.g., [25]) that combine multiple types of malware detection
models for malware detection. A common assumption taken in
the existing malware detection research is that all training apps
are correctly-labeled; however, it is difﬁcult, if not possible,
to obtain noise-free large-scale training data in practice due
to the high complexity of malware detection and the fast
evolvement of app development. It is thus important to study
the impact of label noises to malware detection and improve
the performance of malware detection given noisy training
data. Differential Training is complementary to the previous
research on malware detection since it provides a generic
framework to reduce label noises in training data and can work
with any Android malware detection approach for improved
performance.
2) The Label Noise Problem in Machine Learning: The
label noise problem has been recently addressed in the ma-
chine learning literature, where the focus is on how to train
classiﬁcation models that are tolerant to label noises. Various
approaches have been developed to alleviate the negative
effects of wrongly-labeled samples in model training so as
to improve the quality of the ﬁnally-trained models.
One approach adjusts the loss calculation in the process of
model training according to label noise estimation [29], [54].
Another approach relies on the models of special structure
that can reduce the impact caused by label noise in model
training [41], [34]. And other approaches aim at training noise-
tolerant models for various purposes [17], [28], [44]. All of
these approaches perform noise detection according to the ﬁnal
states of input samples in either training phase or testing phase.
According to Schein, et al., the intermediate states of an
input sample are useful in measuring the uncertainty between
the predicted label and the actual label of the sample in the
process of model training [36]. Inspired by this, Chang et
al. accelerated the process of model training [14]. However,
the intermediate states of input samples during model training
have not been utilized to process noisy samples except in Co-
Teaching [20], where the individual loss value of each input
sample in each mini-batch is examined during model training.
Different from all these works, Differential Training detects
label noises by examining all loss values for each input sample
in the whole training process.
XII. CONCLUSION
In this paper, we proposed Differential Training as a
generic framework to detect and reduce label noises from
training data for any machine learning-based Android malware
detection. Differential Training is novel due to (i) the use
of intermediate states of input samples in the whole training
process for noise detection, (ii) the use of downsampled set
to maximize the differences between wrongly-labeled samples
and correctly-labeled samples, and (iii) the use of outlier
detection algorithms for not relying on even a small set of
correctly-labeled training samples.
Our experimental results show that Differential Training
reduces 87.4%, 82.6% and 64.7% wrong labels in the training
sets of SDAC, Drebin and DeepReﬁner, respectively in the
default setting where the noise ratio is set to 10%. With noise
reduced, the F-scores of these malware detection approaches
improve from 89.04%, 73.20% and 91.37% to 97.19%, 84.40%
and 93.41%, respectively. The improved F-scores are close
to their upper bounds (97.71%, 93.34% and 93.59%). Our
experiments also show that the performance of Differential
Training is consistent for processing datasets at various noise
ratios, and it is superior to the state-of-the-art robust learning
12
algorithms Co-Teaching and Decoupling for training robust
deep neural networks with noisy labels.
ACKNOWLEDGMENT
Yingjiu Li was supported in part by the Ripple University
Blockchain Research Initiative.
REFERENCES
[1]
[2]
[3]
[4]
[5]
https://scikit-learn.org/stable/modules/generated/
“Neurips’18: Co-teaching: Robust training of deep neural networks with
extremely noisy labels,” https://github.com/bhanML/Co-teaching.
“NIPS 2017: Decoupling "when to update" from "how to update",”
https://github.com/emalach/UpdateByDisagreement.
“PyOD,” https://pyod.readthedocs.io/en/latest/.
“Scikit-learn,”
sklearn.covariance.EllipticEnvelope.html.
“TensorFlow,” https://www.tensorﬂow.org/api_docs/python/
tf/keras/callbacks/EarlyStopping.
“Wasserstein,” https://en.wikipedia.org/wiki/Wasserstein_metric.
“VirusTotal,” https://www.virustotal.com/, 2004.
[6]
[7]
[8] K. Allix, T. F. Bissyandé, J. Klein, and Y. Le Traon, “Androzoo:
Collecting millions of Android apps for the research community,” in
IEEE Working Conference on Mining Software Repositories (MSR).
IEEE, 2016.
[9] S. Arora, S. S. Du, W. Hu, Z. Li, and R. Wang, “Fine-grained analysis of
optimization and generalization for overparameterized two-layer neural
networks,” in International Conference on Machine Learning (ICML),
2019.
[10] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, K. Rieck, and
C. Siemens, “DREBIN: Effective and explainable detection of Android
malware in your pocket,” in The Network and Distributed System
Security Symposium (NDSS), 2014.
[11] F. A. Breve, L. Zhao, and M. G. Quiles, “Semi-supervised learning
from imperfect data through particle cooperation and competition,” in
The 2010 International Joint Conference on Neural Networks (IJCNN).
IEEE, 2010.
I. Burguera, U. Zurutuza, and S. Nadjm-Tehrani, “Crowdroid: behavior-
based malware detection system for Android,” in Proceedings of the
1st ACM workshop on Security and privacy in smartphones and mobile
devices (SPSM), 2011.
[12]
[13] G. Canfora, E. Medvet, F. Mercaldo, and C. A. Visaggio, “Detecting
(a)ndroid malware using sequences of system calls,” in Proceedings of
the 3rd International Workshop on Software Development Lifecycle for
Mobile (MobileDeLi), 2015.
[14] H.-S. Chang, E. Learned-Miller, and A. McCallum, “Active bias:
Training more accurate neural networks by emphasizing high variance
samples,” in Advances in Neural Information Processing Systems (AIP-
S), 2017.
[15] F. Dernoncourt, J. Y. Lee, O. Uzuner, and P. Szolovits, “De-
identiﬁcation of patient notes with recurrent neural networks,” Journal
of the American Medical Informatics Association (JAMIA), 2017.
[16] S. S. Du, X. Zhai, B. Poczos, and A. Singh, “Gradient descent prov-
ably optimizes over-parameterized neural networks,” in International
Conference on Learning Representations (ICLR), 2018.
[18]
[17] B. Frénay and M. Verleysen, “Classiﬁcation in the presence of label
noise: a survey,” IEEE Transactions on Neural Networks and Learning
Systems, 2013.
J. Garcia, M. Hammad, and S. Malek, “Lightweight, obfuscation-
resilient detection and family identiﬁcation of Android malware,” ACM
Transactions on Software Engineering and Methodology (TOSEM),
2018.
J. Goldberger and E. Ben-Reuven, “Training deep neural-networks using
a noise adaptation layer,” in 5th International Conference on Learning
Representations, (ICLR), 2017.
[19]
[20] B. Han, Q. Yao, X. Yu, G. Niu, M. Xu, W. Hu, I. Tsang, and
M. Sugiyama, “Co-teaching: Robust training of deep neural networks
with extremely noisy labels,” in Advances in Neural Information Pro-
cessing Systems (NIPS), 2018.
13
[21] T. Hsien-De Huang and H.-Y. Kao, “R2-D2: Color-inspired convolu-
tional neural network (cnn)-based Android malware detections,” in 2018
IEEE International Conference on Big Data (Big Data).
IEEE, 2018.
[22] L. Jiang, Z. Zhou, T. Leung, L.-J. Li, and L. Fei-Fei, “MentorNet:
Learning data-driven curriculum for very deep neural networks on
corrupted labels,” in International Conference on Machine Learning
(ICML), 2018.
[23] A. Kantchelian, M. C. Tschantz, S. Afroz, B. Miller, V. Shankar,
R. Bachwani, A. D. Joseph, and J. D. Tygar, “Better malware ground
truth: Techniques for weighting anti-virus vendor labels,” in 8th ACM
Workshop on Artiﬁcial Intelligence and Security (AISec). ACM, 2015.
[24] E. B. Karbab, M. Debbabi, A. Derhab, and D. Mouheb, “MalDozer:
Automatic framework for Android malware detection using deep learn-
ing,” Digital Investigation, 2018.
[25] T. Kim, B. Kang, M. Rho, S. Sezer, and E. G. Im, “A multimodal deep
learning method for Android malware detection using various features,”
IEEE Transactions on Information Forensics and Security (TIFS), 2018.
[26] Y. Li, J. Yang, Y. Song, L. Cao, J. Luo, and L.-J. Li, “Learning from
noisy labels with distillation,” in Proceedings of the IEEE International
Conference on Computer Vision (ICCV), 2017.
[27] E. Malach and S. Shalev-Shwartz, “Decoupling "when to update"
from "how to update",” in Advances in Neural Information Processing
Systems (NIPS), 2017.
[28] A. Menon, B. Van Rooyen, C. S. Ong, and B. Williamson, “Learn-
ing from corrupted binary labels via class-probability estimation,” in
International Conference on Machine Learning (ICML), 2015.
[29] N. Natarajan, I. S. Dhillon, P. K. Ravikumar, and A. Tewari, “Learning
information processing
with noisy labels,” in Advances in neural
systems (NIPS), 2013.
[30] R. Nix and J. Zhang, “Classiﬁcation of Android apps and malware using
deep neural networks,” in 2017 International joint conference on neural
networks (IJCNN).
IEEE, 2017.
[31] L. Onwuzurike, M. Almeida, E. Mariconti, J. Blackburn, G. Stringhini,
and E. De Cristofaro, “A family of droids-Android malware detection
via behavioral modeling: Static vs dynamic analysis,” in 2018 16th
Annual Conference on Privacy, Security and Trust (PST).
IEEE, 2018.
[32] L. Onwuzurike, E. Mariconti, P. Andriotis, E. D. Cristofaro, G. Ross,
and G. Stringhini, “MaMaDroid: Detecting Android malware by build-
ing Markov chains of behavioral models (extended version),” ACM
Transactions on Privacy and Security (TOPS), 2019.
[33] X. Pan, X. Wang, Y. Duan, X. Wang, and H. Yin, “DarkHazard:
Learning-based, large-scale discovery of hidden sensitive operations
in Android apps,” in The Network and Distributed System Security
Symposium (NDSS), 2017.
[34] G. Patrini, A. Rozza, A. Krishna Menon, R. Nock, and L. Qu, “Making
deep neural networks robust to label noise: A loss correction approach,”
in Proceedings of the IEEE Conference on Computer Vision and Pattern
Recognition (CVPR), 2017.
[35] A. Saracino, D. Sgandurra, G. Dini, and F. Martinelli, “Madam:
Effective and efﬁcient behavior-based Android malware detection and
prevention,” IEEE Transactions on Dependable and Secure Computing
(TDSC), 2016.
[36] A. I. Schein and L. H. Ungar, “Active learning for logistic regression:
an evaluation,” Machine Learning, 2007.
[37] B. Settles, “Active learning literature survey,” Tech. Rep., 2009.
[38]
J. Shen, Z. Chen, S. Wang, Y. Zhu, and M. U. Hassan, “DroidDetector:
a trafﬁc-based platform to detect Android malware using machine
learning,” in Third International Workshop on Pattern Recognition
(IWPR).
International Society for Optics and Photonics, 2018.
[39] A. Skovoroda and D. Gamayunov, “Automated static analysis and
classiﬁcation of Android malware using permission and API calls
models,” in 2017 15th Annual Conference on Privacy, Security and
Trust (PST).
IEEE, 2017.
[40] N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and R. Salakhut-
dinov, “Dropout: a simple way to prevent neural networks from over-
ﬁtting,” The Journal of Machine Learning Research (JMLR), 2014.
[41] S. Sukhbaatar, J. B. Estrach, M. Paluri, L. Bourdev, and R. Fergus,
“Training convolutional networks with noisy labels,” in International
Conference on Learning Representations (ICLR), 2015.
[42] M. Sun, X. Li, J. C. Lui, R. T. Ma, and Z. Liang, “Monet: a user-oriented
behavior-based malware variants detection system for Android,” IEEE
Transactions on Information Forensics and Security (TIFS), 2016.
[43] R. Tsuchida, F. Roosta, and M. Gallagher, “Invariance of weight dis-
tributions in rectiﬁed MLPs,” in International Conference on Machine
Learning (PMLR), 2018.
[44] Y. Wang, W. Liu, X. Ma, J. Bailey, H. Zha, L. Song, and S.-T. Xia,
“Iterative learning with open-set noisy labels,” in Proceedings of the
IEEE Conference on Computer Vision and Pattern Recognition (CVPR),
2018.
[45] X. Xiao, S. Zhang, F. Mercaldo, G. Hu, and A. K. Sangaiah, “Android
malware detection based on system call sequences and LSTM,” Multi-
media Tools and Applications, 2019.
[47]
[46] B. Xie, Y. Liang, and L. Song, “Diverse neural network learns true
target functions,” in Artiﬁcial Intelligence and Statistics (PMLR), 2017.
J. Xu, Y. Li, R. Deng, and K. Xu, “SDAC: A Slow-aging solution
for Android malware detection using semantic distance based API
clustering,” IEEE Transactions on Dependable and Secure Computing
(TDSC), 2020.
[48] K. Xu, Y. Li, and R. H. Deng, “ICCDetector: ICC-based malware
detection on Android,” IEEE Transactions on Information Forensics
and Security (TIFS), 2016.
[49] K. Xu, Y. Li, R. H. Deng, and K. Chen, “Deepreﬁner: Multi-layer
Android malware detection system applying deep neural networks,” in
2018 IEEE European Symposium on Security and Privacy (EuroS&P).
IEEE, 2018.
[50] L.-K. Yan and H. Yin, “DroidScope: Seamlessly reconstructing the OS
and Dalvik semantic views for dynamic Android malware analysis,” in
USENIX security symposium, 2012.
[51] C. Yang, Z. Xu, G. Gu, V. Yegneswaran, and P. Porras, “DroidMiner:
Automated mining and characterization of ﬁne-grained malicious be-
haviors in Android applications,” in European Symposium on Research
in Computer Security (ESORICS). Springer, 2014.
[52] S. Y. Yerima, S. Sezer, and I. Muttik, “Android malware detection
using parallel machine learning classiﬁers,” in Next Generation Mobile
Applications, Services and Technologies (NGMAST).
IEEE, 2014.
[53] M. Zhang, Y. Duan, H. Yin, and Z. Zhao, “Semantics-aware Android
malware classiﬁcation using weighted contextual API dependency
graphs,” in ACM SIGSAC conference on computer and communications
security (CCS), 2014.
[55]
[54] Z. Zhang and M. Sabuncu, “Generalized cross entropy loss for train-
ing deep neural networks with noisy labels,” in Advances in neural
information processing systems (NIPS), 2018, pp. 8778–8788.
J. Zhu, Z. Wu, Z. Guan, and Z. Chen, “API sequences based malware
detection for Android,” in 2015 IEEE 12th Intl Conf on Ubiquitous In-
telligence and Computing and 2015 IEEE 12th Intl Conf on Autonomic
and Trusted Computing and 2015 IEEE 15th Intl Conf on Scalable
Computing and Communications and Its Associated Workshops (UIC-
ATC-ScalCom).
IEEE, 2015.
14