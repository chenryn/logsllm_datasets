Note that no length value is stored in this header, since the
authentication tag serves to determine whether the message
is legitimate, and the inner IP packet already has a length
ﬁeld in its header. The encapsulated packet itself is zero
padded (without modifying the IP packet’s length ﬁeld) before
encryption to complicate traﬃc analysis, though that zero
padding should never increase the UDP packet size beyond
the maximum transmission unit length. Prior to msg.packet,
there are exactly 16 bytes of header ﬁelds, which means that
decryption may be done in-place and still achieve natural
memory address alignment, allowing for easier implementation
in hardware and a signiﬁcant performance improvement on
many common CPU architectures. This is in part the result of
the 3 bytes of reserved zero ﬁelds, making the ﬁrst four bytes
readable together as a little-endian integer.
m(cid:48)
The msg.counter value is a nonce for the ChaCha20-
Poly1305 AEAD and is kept track of by the recipient using
. It also functions to avoid reply attacks. Since WireGuard
N r ec v
operates over UDP, messages can sometimes arrive out of
order. For that reason we use a sliding window to keep track
of received message counters, in which we keep track of
the greatest counter received, as well as a window of prior
messages received, using the algorithm detailed by appendix
C of RFC2401 [13] or by RFC6479 [25], which uses a larger
bitmap while avoiding bitshifts, enabling more extreme packet
reordering that may occur on multi-core systems.
7) Under Load: Cookie Reply Message: As mentioned in
section V-C, when a message with a valid msg.mac1 is received,
but msg.mac2 is invalid or expired, and the peer is under load,
the peer may send a cookie reply message. Im(cid:48) is determined
from the msg.sender ﬁeld of the message that prompted this
cookie reply message, msg:
type (cid:66) 0x3 (1 byte)
reserved (cid:66) 03 (3 bytes)
receiver (cid:66) Im(cid:48) (4 bytes)
salt (cid:66) ρ32 (32 bytes)
cookie ((cid:76)16 bytes)
The secret variable, Rm, changes every two minutes to a random
value, Am(cid:48) represents the subscript’s external IP address, and
M represents the msg.mac1 value of the message to which
this is in reply. The remaining encrypted cookie reply ﬁeld is
populated as such:
τ (cid:66) Mac(Rm, Am(cid:48), 16)
(cid:107) msg.salt, 32), 0, τ, M)
msg.cookie (cid:66) Aead(Mac(Q, S pub
By using M as the additional authenticated data ﬁeld, we bind
the cookie reply to the relevant message, in order to prevent
m
8
peers from being attacked by sending them fraudulent cookie
reply messages. A random salt is added to the message to avoid
key reuse. Also note that this message is smaller than either
the handshake initiation message or the handshake response
message, avoiding ampliﬁcation attacks.
Upon receiving this message, if it is valid, the only thing
the recipient of this message should do is store the cookie
along with the time at which it was received. The mechanism
described in section VI will be used for retransmitting hand-
shake messages with these received cookies; this cookie reply
message should not, by itself, cause a retransmission.
VI. Timers & Stateless UX
From the perspective of the user, WireGuard appears
stateless. The private key of the interface is conﬁgured, followed
by the public key of each of its peers, and then a user may
simply send packets normally. The maintenance of session
states, perfect forward secrecy, handshakes, and so forth is
completely behind the scenes, invisible to the user. While
similar automatic mechanisms historically have been buggy and
disastrous, WireGuard employs an extremely simple timer state
machine, in which each state and transitions to all adjacent states
are clearly deﬁned, resulting in total reliability. There are no
anomalous states or sequences of states; everything is accounted
for. It has been tested with success on 10 gigabit intranets as
well as on low-bandwidth high-latency transatlantic commercial
airline Internet. The simplicity of the timer state machine is
owed to the fact that only a 1-RTT handshake is required, that
the initiator and responder can transparently switch roles, and
that WireGuard breaks down traditional layering, as discussed
in section I, and can therefore use intra-layer characteristics.
A. Preliminaries
The following constants are used for the timer state system:
Symbol
Rekey-After-Messages
Reject-After-Messages
Rekey-After-Time
Reject-After-Time
Rekey-Attempt-Time
Rekey-Timeout
Keepalive-Timeout
Value
264 − 216 − 1 messages
264 − 24 − 1 messages
120 seconds
180 seconds
90 seconds
5 seconds
10 seconds
Under no circumstances will WireGuard send an initiation
message more than once every Rekey-Timeout. A secure session
is created after the successful receipt of a handshake response
message (section V-D3), and the age of a secure session
is measured from the time of processing this message and
the immediately following derivation of transport data keys
(section V-D5).
B. Transport Message Limits
After a secure session has ﬁrst been established, WireGuard
will try to create a new session, by sending a handshake
initiation message (section V-D2), after it has sent Rekey-After-
Messages transport data messages or after the current secure
session is Rekey-After-Time seconds old, whichever comes ﬁrst.
If this secure session was created by a responder rather than an
initiator, the reinitiation is prompted instead after (Rekey-After-
Time + Rekey-Timeout × 2) seconds, in order to prevent the
“thundering herd” problem in which both parties repeatedly try
to initiate new sessions at the same time. After Reject-After-
Messages transport data messages or after the current secure
session is Reject-After-Time seconds old, whichever comes
ﬁrst, WireGuard will refuse to send any more transport data
messages using the current secure session, until a new secure
session is created through the 1-RTT handshake.
C. Key Rotation
New secure sessions are created approximately every Rekey-
After-Time seconds (which is far more likely to occur before
Rekey-After-Messages transport data messages have been
sent), due to the transport message limits described above in
section VI-B. This means that the secure session is constantly
rotating, creating a new ephemeral symmetric session key
each time, for perfect forward secrecy. But, keep in mind
that after an initiator receives a handshake response message
(section V-D3),
the responder cannot send transport data
messages (section V-D6) until it has received the ﬁrst transport
data message from the initiator. And, further, transport data
messages encrypted using the previous secure session might
be in transit after a new secure session has been created. For
these reasons, WireGuard keeps in memory the current secure
session and the previous secure session. Every time a new secure
session is created, the existing one rotates into the “previous”
slot, and the new one occupies the “current” slot. The “previous-
previous” one is then discarded and its memory is zeroed (see
section VII-D for a discussion of memory zeroing). If no new
secure session is created after (Reject-After-Time × 3) seconds,
both the current secure session and the previous secure session
are discarded and zeroed out.
D. Handshake Initiation Retransmission
The ﬁrst time the user sends a packet over a WireGuard
interface, the packet cannot immediately be sent, because no
current session exists. So, after queuing the packet, WireGuard
sends a handshake initiation message (section V-D2).
After sending a handshake initiation message, because of
a ﬁrst-packet condition, or because of the limit conditions of
section VI-B, if a handshake response message (section V-D3)
is not subsequently received after Rekey-Timeout seconds, a
new handshake initiation message is constructed (with new
random ephemeral keys) and sent. This reinitiation is attempted
for Rekey-Attempt-Time seconds before giving up. Critically
important future work includes adjusting the Rekey-Timeout
value to use exponential backoﬀ, instead of the current ﬁxed
value.
E. Passive Keepalive
Most importantly, and most elegant, WireGuard implements
a passive keepalive mechanism to ensure that sessions stay
active and allow both peers to passively determine if a con-
nection has failed or been disconnected. If a peer has received
a validly-authenticated transport data message (section V-D6),
but does not have any packets itself to send back for Keepalive-
Timeout seconds, it sends a keepalive message. A keepalive
message is simply a transport data message with a zero-length
encapsulated encrypted inner-packet. Since all other transport
data messages contain IP packets, which have a minimum
length of min((cid:107)IPv4 header(cid:107), (cid:107)IPv6 header(cid:107)), this keepalive
message can be easily distinguished by simple virtue of having
a zero length encapsulated packet. (Note that the msg.packet
ﬁeld of the message will in fact be of length 16, the length
of the Poly1305 [5] authentication tag, since a zero length
plaintext still needs to be authenticated, even if there is nothing
to encrypt.)
This passive keepalive is only sent when a peer has nothing
to send, and is only sent in circumstances when another peer is
sending authenticated transport data messages to it. This means
that when neither side is exchanging transport data messages,
the network link will be silent.
Because every transport data message sent warrants a reply
of some kind—either an organic one generated by the nature
of the encapsulated packets or this keepalive message—we can
determine if the secure session is broken or disconnected if a
transport data message has not been received for (Keepalive-
Timeout + Rekey-Timeout) seconds, in which case a handshake
initiation message is sent to the unresponsive peer, once every
Rekey-Timeout seconds, as in section VI-D, until a secure
session is recreated successfully or until Rekey-Attempt-Time
seconds have passed.
F. Interaction with Cookie Reply System
As noted in sections V-C and V-D7, when a peer is under
load, a handshake initiation message or a handshake response
message may be discarded and a cookie reply message sent.
On receipt of the cookie reply message, which will enable the
peer to send a new initiation or response message with a valid
msg.mac2 that will not be discarded, the peer is not supposed
to immediately resend the now valid message. Instead, it should
simply store the decrypted cookie value from the cookie reply
message, and wait for the expiration of the Rekey-Timeout
timer for retrying a handshake initiation message. This prevents
potential bandwidth generation abuse, and helps to alleviate the
load conditions that are requiring the cookie reply messages in
the ﬁrst place.
VII. Linux Kernel Implementation
The implementation of WireGuard inside the Linux kernel
has a few goals. First, it should be short and simple, so that
auditing and reviewing the code for security vulnerabilities is
not only easy, but also enjoyable; WireGuard is implemented
in less than 4,000 lines of code (excluding cryptographic
primitives). Second, it must be extremely fast, so that it is
competitive with IPsec on performance. Third, it must avoid
allocations and other resource intensive allocations in response
to incoming packets. Forth, it must integrate as natively and
smoothly as possible with existing kernel infrastructure and
userland expectations, tools, and APIs. And ﬁfth, it must be
buildable as an external kernel module without requiring any
changes to the core Linux kernel. WireGuard is not merely an
academic project with never-released laboratory code, but rather
a practical project aiming for production-ready implementations.
9
A. Queuing System
The WireGuard device driver has ﬂags indicating to the
kernel that it supports generic segmentation oﬄoad (GSO),
scatter gather I/O, and hardware checksum oﬄoading, which
in sum means that the kernel will hand “super packets” to
WireGuard, packets that are well over the MTU size, having
been priorly queued up by the upper layers, such as TCP or
the TCP and UDP corking systems. This allows WireGuard to
operate on batch groups of outgoing packets. After splitting
packets into ≤MTU-sized chunks, WireGuard attempts to
encrypt, encapsulate, and send over UDP all of these at once,
caching routing information, so that it only has to be computed
once per cluster of packets. This has the very important eﬀect
of also reducing cache misses: by waiting until all individual
packets of a super packet have been encrypted and encapsulated
to pass them oﬀ to the network layer, the very complicated and
CPU-intensive network layer keeps instructions, intermediate
variables, and branch predictions in CPU cache, giving in many
cases a 35% increase in sending performance.
As well, as mentioned in section VI-D, sometimes outgoing
packets must be queued until a handshake completes success-
fully. When packets are ﬁnally able to be sent, the entire queue
of existing queued packets along are treated as a single super
packet, in order to beneﬁt from the same optimizations as
above.
Finally, in order to prevent against needless allocations, all
packet transformations are done in-place, avoiding the need for
copying. This applies not only to the encryption and decryption
of data, which occur in-place, but also to certain user space
data and ﬁles sent using sendfile(2); these are processed
using this zero-copy super packet queuing system.
Future work on the queuing system could potentially involve
integrating WireGuard with the FlowQueue [11]-CoDel [20]
scheduling algorithm.
B. Softirq & Parallelism
The xfrm layer, in contrast to WireGuard, has the advantage
that it does not need to do cryptography in softirq, which opens
it up to a bit more ﬂexibility. However, there is precedent for
doing cryptographic processing in softirq on the interface level:
the mac802111 subsystem used for wireless WPA encryption.
WireGuard, being a virtual interface that does encryption, is
not architecturally so much diﬀerent from wireless interfaces
doing encryption at the same layer. While in practice it does
work very well, it is not parallel. For this reason, the kernel’s
padata system is used for parallelizing into concurrent workers
encryption and decryption operations for utilization of all CPUs
and CPU cores. As well, packet checksums can be computed
in parallel with this method. When sending packets, however,
they must be sent in order, which means each packet cannot
simply be sent immediately after it is encrypted. Fortunately,
the padata API divides operations up into a parallel step,
followed by an in-order serial step. This is also helpful for
parallel decryption, in which the message counter must be
checked and incremented in the order that packets arrive, lest
they be rejected unnecessarily. In order to reduce latency, if
there is only a single packet in a super packet and its length is
less than 256 bytes, or if there is only one CPU core online,
the packet is processed in softirq.
Likewise, handshake initiation and response messages and
cookie reply messages are processed on a separate parallel low-
priority worker thread. As mentioned in section V-C, ECDH
operations are CPU intensive, so it is important that a ﬂood of
handshake work does not monopolize the CPU. Low priority
background workqueues are employed for this asynchronous
handshake message handling.
C. RTNL-based Virtual Interface & Containerization
In order to integrate with the existing ip(8) utilities and
the netlink-based Linux user space, the kernel’s RTNL layer
is used for registering a virtual interface, known inside the
kernel as a “link”. This easily gives access to the kernel APIs
accessed by ip-link(8) and ip-set(8). For conﬁguring the
interface private key and the public keys and endpoints of
peers, initially the RTM_SETLINK RTNL message was used, but
this proved to be too limited. It proved to be much cleaner to
simply implement an ioctl(2)-based API, passing a series
of structures back and forth, through two diﬀerent functions:
WG_GET_DEVICE and WG_SET_DEVICE. At the moment, a separate