app=nginx,pod-template-hash=5c689d88bb
nginx-deployment-5c689d88bb-jc8hr 1/1 Running 0 13m
app=nginx,pod-template-hash=5c689d88bb
2. 更新Deployment
一般对应用程序升级或者版本迭代时，会通过Deployment对Pod进行滚动更新。
注 意
当且仅当Deployment的Pod模板（即.spec.template）更改时，才会触发Deployment更新，
例如更新label（标签）或者容器的image（镜像）。
假如更新Nginx Pod的image使用nginx:1.9.1：
[root@K8S-master01 2.2.8.1]# kubectl set image deployment nginx-deployment
nginx=nginx:1.9.1 --record
deployment.extensions/nginx-deployment image updated
当然也可以直接编辑Deployment，效果相同：
[root@K8S-master01 2.2.8.1]# kubectl edit
deployment.v1.apps/nginx-deployment
deployment.apps/nginx-deployment edited
使用kubectl rollout status查看更新状态：
[root@K8S-master01 2.2.8.1]# kubectl rollout status
deployment.v1.apps/nginx-deployment
Waiting for deployment "nginx-deployment" rollout to finish: 1 out of 3 new
replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 2 out of 3 new
replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 2 out of 3 new
replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 2 out of 3 new
replicas have been updated...
Waiting for deployment "nginx-deployment" rollout to finish: 1 old replicas
are pending termination...
Waiting for deployment "nginx-deployment" rollout to finish: 1 old replicas
第2章 Docker及Kubernetes基础 | 73
are pending termination...
deployment "nginx-deployment" successfully rolled out
查看ReplicaSet：
[root@K8S-master01 2.2.8.1]# kubectl get rs
NAME DESIRED CURRENT READY AGE
nginx-deployment-5c689d88bb 0 0 0 34m
nginx-deployment-6987cdb55b 3 3 3 5m14s
通过describe查看Deployment的详细信息：
[root@K8S-master01 2.2.8.1]# kubectl describe deploy nginx-deployment
Name: nginx-deployment
Namespace: default
CreationTimestamp: Thu, 24 Jan 2019 15:15:15 +0800
Labels: app=nginx
Annotations: deployment.kubernetes.io/revision: 2
kubernetes.io/change-cause: kubectl set image deployment
nginx-deployment nginx=nginx:1.9.1 --record=true
Selector: app=nginx
Replicas: 3 desired | 3 updated | 3 total | 3 available | 0
unavailable
StrategyType: RollingUpdate
MinReadySeconds: 0
RollingUpdateStrategy: 25% max unavailable, 25% max surge
Pod Template:
Labels: app=nginx
Containers:
nginx:
Image: nginx:1.9.1
Port: 80/TCP
Host Port: 0/TCP
Environment: 
Mounts: 
Volumes: 
Conditions:
Type Status Reason
---- ------ ------
Available True MinimumReplicasAvailable
Progressing True NewReplicaSetAvailable
OldReplicaSets: 
NewReplicaSet: nginx-deployment-6987cdb55b (3/3 replicas created)
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal ScalingReplicaSet 36m deployment-controller Scaled up replica
set nginx-deployment-5c689d88bb to 3
Normal ScalingReplicaSet 7m16s deployment-controller Scaled up replica
set nginx-deployment-6987cdb55b to 1
Normal ScalingReplicaSet 5m18s deployment-controller Scaled down
replica set nginx-deployment-5c689d88bb to 2
Normal ScalingReplicaSet 5m18s deployment-controller Scaled up replica
set nginx-deployment-6987cdb55b to 2
Normal ScalingReplicaSet 4m35s deployment-controller Scaled down
replica set nginx-deployment-5c689d88bb to 1
74 | 再也不踩坑的Kubernetes实战指南
Normal ScalingReplicaSet 4m34s deployment-controller Scaled up replica
set nginx-deployment-6987cdb55b to 3
Normal ScalingReplicaSet 3m30s deployment-controller Scaled down
replica set nginx-deployment-5c689d88bb to 0
在 describe 中可以看出，第一次创建时，它创建了一个名为 nginx-deployment-5c689d88bb 的
ReplicaSet，并直接将其扩展为 3 个副本。更新部署时，它创建了一个新的 ReplicaSet，命名为
nginx-deployment-6987cdb55b，并将其副本数扩展为1，然后将旧的ReplicaSet缩小为2，这样至少
可以有2个Pod可用，最多创建了4个Pod。以此类推，使用相同的滚动更新策略向上和向下扩展
新旧ReplicaSet，最终新的ReplicaSet可以拥有3个副本，并将旧的ReplicaSet缩小为0。
3. 回滚Deployment
当新版本不稳定时，可以对其进行回滚操作，默认情况下，所有Deployment的rollout历史都
保留在系统中，可以随时回滚。
假设我们又进行了几次更新：
[root@K8S-master01 2.2.8.1]# kubectl set image deployment nginx-deployment
nginx=dotbalo/canary:v1 --record
[root@K8S-master01 2.2.8.1]# kubectl set image deployment nginx-deployment
nginx=dotbalo/canary:v2 --record
使用kubectl rollout history查看部署历史：
[root@K8S-master01 2.2.8.1]# kubectl rollout history
deployment/nginx-deployment
deployment.extensions/nginx-deployment
REVISION CHANGE-CAUSE
1 
2 kubectl set image deployment nginx-deployment nginx=nginx:1.9.1
--record=true
3 kubectl set image deployment nginx-deployment nginx=dotbalo/canary:v1
--record=true
4 kubectl set image deployment nginx-deployment nginx=dotbalo/canary:v2
--record=true
查看Deployment某次更新的详细信息，使用--revision指定版本号：
[root@K8S-master01 2.2.8.1]# kubectl rollout history
deployment.v1.apps/nginx-deployment --revision=3
deployment.apps/nginx-deployment with revision #3
Pod Template:
Labels: app=nginx
pod-template-hash=645959bf6b
Annotations: kubernetes.io/change-cause: kubectl set image deployment
nginx-deployment nginx=dotbalo/canary:v1 --record=true
Containers:
nginx:
Image: dotbalo/canary:v1
Port: 80/TCP
Host Port: 0/TCP
Environment: 
Mounts: 
Volumes: 
第2章 Docker及Kubernetes基础 | 75
使用kubectl rollout undo回滚到上一个版本：
[root@K8S-master01 2.2.8.1]# kubectl rollout undo
deployment.v1.apps/nginx-deployment
deployment.apps/nginx-deployment
再次查看更新历史，发现REVISION5回到了canary:v1：
[root@K8S-master01 2.2.8.1]# kubectl rollout history
deployment/nginx-deployment
deployment.extensions/nginx-deployment
REVISION CHANGE-CAUSE
1 
2 kubectl set image deployment nginx-deployment nginx=nginx:1.9.1
--record=true
4 kubectl set image deployment nginx-deployment nginx=dotbalo/canary:v2
--record=true
5 kubectl set image deployment nginx-deployment nginx=dotbalo/canary:v1
--record=true
使用--to-revision参数回到指定版本：
[root@K8S-master01 2.2.8.1]# kubectl rollout undo deployment/nginx-deployment
--to-revision=2
deployment.extensions/nginx-deployment
4. 扩展Deployment
当公司访问量变大，三个Pod已无法支撑业务时，可以对其进行扩展。
使用kubectl scale动态调整Pod的副本数，比如增加Pod为5个：
[root@K8S-master01 2.2.8.1]# kubectl scale
deployment.v1.apps/nginx-deployment --replicas=5
deployment.apps/nginx-deployment scaled
查看Pod，此时Pod已经变成了5个：
[root@K8S-master01 2.2.8.1]# kubectl get po
NAME READY STATUS RESTARTS AGE
nginx-deployment-5f89547d9c-5r56b 1/1 Running 0 90s
nginx-deployment-5f89547d9c-htmn7 1/1 Running 0 25s
nginx-deployment-5f89547d9c-nwxs2 1/1 Running 0 99s
nginx-deployment-5f89547d9c-rpwlg 1/1 Running 0 25s
nginx-deployment-5f89547d9c-vlr5p 1/1 Running 0 95s
5. 暂停和恢复Deployment更新
Deployment支持暂停更新，用于对Deployment进行多次修改操作。
使用kubectl rollout pause暂停Deployment更新：
[root@K8S-master01 2.2.8.1]# kubectl rollout pause
deployment/nginx-deployment
deployment.extensions/nginx-deployment paused
然后对Deployment进行相关更新操作，比如更新镜像，然后对其资源进行限制：
[root@K8S-master01 2.2.8.1]# kubectl set image
deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1
76 | 再也不踩坑的Kubernetes实战指南
deployment.apps/nginx-deployment image updated
[root@K8S-master01 2.2.8.1]# kubectl set resources
deployment.v1.apps/nginx-deployment -c=nginx --limits=cpu=200m,memory=512Mi
deployment.apps/nginx-deployment resource requirements updated
通过rollout history可以看到没有新的更新：
[root@K8S-master01 2.2.8.1]# kubectl rollout history
deployment.v1.apps/nginx-deployment
deployment.apps/nginx-deployment
REVISION CHANGE-CAUSE
1 
5 kubectl set image deployment nginx-deployment nginx=dotbalo/canary:v1
--record=true
7 kubectl set image deployment nginx-deployment nginx=dotbalo/canary:v2
--record=true
8 kubectl set image deployment nginx-deployment nginx=dotbalo/canary:v2
--record=true
使用kubectl rollout resume恢复Deployment更新：
[root@K8S-master01 2.2.8.1]# kubectl rollout resume
deployment.v1.apps/nginx-deployment
deployment.apps/nginx-deployment resumed
可以查看到恢复更新的Deployment创建了一个新的RS（复制集）：
[root@K8S-master01 2.2.8.1]# kubectl get rs
NAME DESIRED CURRENT READY AGE
nginx-deployment-57895845b8 5 5 4 11s
可以查看Deployment的image（镜像）已经变为nginx:1.9.1
[root@K8S-master01 2.2.8.1]# kubectl describe deploy nginx-deployment
Name: nginx-deployment
Namespace: default
CreationTimestamp: Thu, 24 Jan 2019 15:15:15 +0800
Labels: app=nginx
Annotations: deployment.kubernetes.io/revision: 9
kubernetes.io/change-cause: kubectl set image deployment
nginx-deployment nginx=dotbalo/canary:v2 --record=true
Selector: app=nginx
Replicas: 5 desired | 5 updated | 5 total | 5 available | 0
unavailable
StrategyType: RollingUpdate
MinReadySeconds: 0
RollingUpdateStrategy: 25% max unavailable, 25% max surge
Pod Template:
Labels: app=nginx
Containers:
nginx:
Image: nginx:1.9.1
Port: 80/TCP
Host Port: 0/TCP
第2章 Docker及Kubernetes基础 | 77
6. 更新Deployment的注意事项
（1）清理策略
在默认情况下，revision 保留 10 个旧的 ReplicaSet，其余的将在后台进行垃圾回收，可以
在.spec.revisionHistoryLimit设置保留ReplicaSet的个数。当设置为0时，不保留历史记录。
（2）更新策略
 .spec.strategy.type==Recreate，表示重建，先删掉旧的Pod再创建新的Pod。
 .spec.strategy.type==RollingUpdate，表示滚动更新，可以指定maxUnavailable和maxSurge
来控制滚动更新过程。
 .spec.strategy.rollingUpdate.maxUnavailable，指定在回滚更新时最大不可用的Pod数量，
可选字段，默认为25%，可以设置为数字或百分比，如果maxSurge为0，则该值不能
为0。
 .spec.strategy.rollingUpdate.maxSurge可以超过期望值的最大Pod数，可选字段，默认为
25%，可以设置成数字或百分比，如果maxUnavailable为0，则该值不能为0。
（3）Ready策略
.spec.minReadySeconds是可选参数，指定新创建的 Pod应该在没有任何容器崩溃的情况下
视为 Ready（就绪）状态的最小秒数，默认为 0，即一旦被创建就视为可用，通常和容器探针
连用。
2.2.7 StatefulSet
StatefulSet（有状态集）常用于部署有状态的且需要有序启动的应用程序。
1. StatefulSet的基本概念
StatefulSet主要用于管理有状态应用程序的工作负载API对象。比如在生产环境中，可以部署
ElasticSearch 集群、MongoDB 集群或者需要持久化的RabbitMQ 集群、Redis集群、Kafka 集群和
ZooKeeper集群等。
和 Deployment 类似，一个 StatefulSet 也同样管理着基于相同容器规范的 Pod。不同的是，
StatefulSet为每个Pod维护了一个粘性标识。这些Pod是根据相同的规范创建的，但是不可互换，
每个Pod都有一个持久的标识符，在重新调度时也会保留，一般格式为StatefulSetName-Number。
比如定义一个名字是Redis-Sentinel的StatefulSet，指定创建三个Pod，那么创建出来的Pod名字就
为Redis-Sentinel-0、Redis-Sentinel-1、Redis-Sentinel-2。而StatefulSet创建的Pod一般使用Headless
Service（无头服务）进行通信，和普通的Service的区别在于Headless Service没有ClusterIP，它使
用的是Endpoint进行互相通信，Headless一般的格式为：
statefulSetName-{0..N-1}.serviceName.namespace.svc.cluster. local。
说明：
 serviceName为Headless Service的名字。
 0..N-1为Pod所在的序号，从0开始到N-1。
78 | 再也不踩坑的Kubernetes实战指南
 statefulSetName为StatefulSet的名字。
 namespace为服务所在的命名空间。
 .cluster.local为Cluster Domain（集群域）。
比如，一个 Redis 主从架构，Slave 连接 Master 主机配置就可以使用不会更改的 Master 的
Headless Service，例如Redis从节点（Slave）配置文件如下：
port 6379
slaveofredis-sentinel-master-ss-0.redis-sentinel-master-ss.public-service.
svc.cluster.local 6379
tcp-backlog 511
timeout 0
tcp-keepalive 0
……
其中，redis-sentinel-master-ss-0.redis-sentinel-master-ss.public-service.svc.cluster.local 是 Redis
Master的Headless Service。具体Headless可以参考2.2.13节。
2. 使用StatefulSet
一般StatefulSet用于有以下一个或者多个需求的应用程序：
 需要稳定的独一无二的网络标识符。
 需要持久化数据。
 需要有序的、优雅的部署和扩展。
 需要有序的、自动滚动更新。
如果应用程序不需要任何稳定的标识符或者有序的部署、删除或者扩展，应该使用无状态的
控制器部署应用程序，比如Deployment或者ReplicaSet。
3. StatefulSet的限制
StatefulSet是Kubernetes 1.9版本之前的beta资源，在1.5版本之前的任何Kubernetes版本都
没有。
Pod 所用的存储必须由 PersistentVolume Provisioner（持久化卷配置器）根据请求配置
StorageClass，或者由管理员预先配置。
为了确保数据安全，删除和缩放StatefulSet不会删除与StatefulSet关联的卷，可以手动选择性
地删除PVC和PV（关于PV和PVC请参考2.2.12节）。
StatefulSet目前使用Headless Service（无头服务）负责Pod的网络身份和通信，但需要创建此
服务。
删除一个StatefulSet时，不保证对Pod的终止，要在StatefulSet中实现Pod的有序和正常终止，
可以在删除之前将StatefulSet的副本缩减为0。
4. StatefulSet组件
定义一个简单的StatefulSet的示例如下：
apiVersion: v1
kind: Service
第2章 Docker及Kubernetes基础 | 79
metadata:
name: nginx
labels:
app: nginx
spec: