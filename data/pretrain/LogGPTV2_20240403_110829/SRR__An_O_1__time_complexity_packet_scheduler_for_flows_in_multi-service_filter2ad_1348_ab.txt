bps
bps
2,
2,
−k
}1
K
2,
f
w
f
k
∑−
= 1
=
0
n
a
n
, 2
nf
 where 
, ∈nfa
}1,0{
. 
Definition 2: The binary coefficients 
nfa ,
 of 
fw form a Weight 
Vector of 
WV
f
flow , which is defined as, 
=
f
a
{
a
,
,
,
K−
)2
f
(,
k
−
)1
f
(,
k
a
}
f
0,
.                  (3) 
WM
=
,
Nf
WV
1
WV
2
M
WV
, ∈j
N
=
a
(,1
a
(,2
−
)1
k
−
)1
k
a
(,1
a
(,2
−
)2
k
−
)2
k
M
kN
(,
a
M
kN
(,
−
)2
a
−
)1
≤≤
.
 (4) 
a
0,1
a
0,2
K
K
MO
a
K
≤≤
−
N
0,
Definition  3:  The  Weight  Matrix  corresponding  to  flows 
f
,
1 K  is defined as 
f
,
2
ia
}1,0{
,  and 
where 
.  We 
number  the  column  of  the  Weight  Matrix  from  left  to  right  as 
column
column
column
0
Ni
0,
)1
−
1
1
k
. 
,
,
,
(
j
k
k
K−
2
fa
(,
1
)
=−ik
fa
3.  THE SMOOTHED ROUND ROBIN 
SCHEDULER 
kN ×  Weight Matrix to form 
We combine the kkth WSS and the 
the  Smoothed  Round  Robin  (SRR)  scheduler.  The  basic  idea  of 
SRR is based on the scanning of the WSS and the corresponding 
Weight  Matrix.  The  WSS  is  scanned  term  by  term.  When  the 
current  term  is  element  i , 
column − of  the  Weight  Matrix  is 
selected. For each occurrence of 
in this column, packet 
ik
from flow corresponding to the row of 
−   is scheduled. 
ik
)
(,
In the following of this section,  the formal description of SRR is 
given. 
3.1  Formal Description of SRR 
In  this  paper,  we  focus  on  packet  scheduler,  and  consider  the 
packet  classification  the  function  of  the  packet  classifier,  the 
assignment  of  weights  to  flows  the  function  of  the  admission 
controller,  and  that  all  the  input  packets  are  queued  to  their 
corresponding  queues  by  the  packet  enqueuer.  The  tasks  of  the 
packet  scheduler  are  to  choose  and  forward  packets  and  to 
maintain related data structures of the scheduler. 
In a packet network, if the packet length of a flow is greater than 
the  Maximum  Transmission  Unit  (MTU)  of  the  output  link,  the 
system  will  fragmentize  the  packet  into  small  pieces.  Therefore, 
we assume that the maximum packet length of all the flows is the 
MTU of the output link, and denote it as  maxL
. 
maxK
In SRR, we assume  that  the  maximum  order  of  WSS  is 
maxK . 
When 
=32,  if  the  bandwidth  assignment  granularity  is 
1bps,  the  set  of  rates  that  can  be  provided  by  SRR  is 
bps
1{
; if the granularity is 1kbps, the 
set of rates is 
bps
,
3,
kbps
1{
Gbps
3,
}
kbps
4,
kbps
Tbps
}
L
2,
bps
2,
4,
. 
,
L
We  assume  that  a  flow  can  be  deleted  explicitly  by  a  command 
(i.e., by some kinds of signaling protocols) or implicitly by SRR 
when the queue corresponding to that flow is empty. 
We adopt the following notations for the scheduler: 
maxK  
M  
kS  
k  
cP  
queue
fP  
fL  
fw  
f
f
deficit
iDL  
dlP  
maxL
C  
The maximum order of the WSS used by SRR; 
Weight Matrix of all the active flows; 
The kth WSS currently used by the scheduler; 
The order of the current WSS used by SRR; 
Index  of  the  current  scanning  position  of  the  WSS, 
ranging from 1 to 
Queue of the received packets of 
FIFO; 
Packet that is at the head of 
flow , which is a 
queue ; 
2 −k
1
; 
f
f
Length of 
fP ; 
f
register 
flow ,  it  is  a  normalized  value 
to  memorize  how  many  bytes 
Weight  of 
according to the bandwidth assignment granularity; 
A 
flow should bring to the next round; 
The  ith  double  link, 
double links in SRR; 
Pointer to a node of a double link; 
.  There  are 
Ki next; /*initialization*/ 
while(in busy-period){ 
f=Pdl  ->fid; 
deficitf  = deficitf  + Lmax; 
while(deficitf  > 0){ 
} 
if(Pdl->next!=tailcol){ 
Pdl=Pdl->next; 
}else{ 
if(Lf next; /* points to the first non-zero term of 
loop:  Pc=Pc+1; 
this column*/ 
} 
 } 
} 
Add_flow(w) { /* w is the weight assigned to this flow */ 
 local variable: f; 
 f=get_flowId( ) ; /*get a new flow ID for this flow */ 
 assign deficitf, queuef  ; /* deficitf=0, queuef is empty */ 
 use w to form a Weight Vector as shown in Equation 3; 
 add the vector to the last row of Matrix M; 
 insert  nodes  into  DL0,  DL1,  …,  DLKmax-1   according  to  the 
coefficients of w; 
 if(new columns are added into M) 
 update k; 
} 
Del_flow( f ) { /* f is the flow ID of this flow */ 
remove the corresponding row from M; 
remove deficitf, queuef; 
remove nodes from DL0, DL1, …, DLKmax-1 according to the 
coefficients of wf ; 
if(empty columns are deleted from M){ 
 update k; 
Pc = Pc mod (2k );  
} 
} 
Figure 2.  Description of SRR 
f
j
j
j
(,
)1
,
>
−
1
2
a
−
)1
of 
w
−j
,
K−
2
new 
, 
∑ −
=
j
1
=
n
0
columns 
this 
=
)1
clolumn
flow 
new 
column
,
The Weight Matrix   is adjusted dynamically in SRR. When a new 
flow comes, a new row will be added into M as the last row. If the 
n
weight 
f
(,
j
fak
numbered 
(
,
column
will  be  added  into 
M, and the order of the WSS is adjusted to j (ij.e., k=j). When a 
flow leaves SRR, the corresponding row of M will be deleted. If 
column become  empty, 
the 
these columns will be removed from M, then the order of the WSS 
is adjusted to i (i.e., k=i).  
 is the kkth WSS defined by equation (1), the 
S k
order of the WSS used in SRR is adjusted dynamically according 
to the column number of M. 
clolumn
column
maxKk
≤≤
K−
2
1(
−
1
,
,
,
)
k
k
k
i
 is borrowed from DRR [23] to memorize the bytes that 
deficit
flow  can bring into the next round. 
f
f
i
i
max −
1
maxK
KDL
 double  links  named
0DL ,  K,1DL
,
 in 
There  are 
iDL is  used  to  link  the  non-zero  terms  of 
column of  M. 
SRR. 
iDL  has a head, and a tail. Each node of the link has three 
Each 
fields, next, prev and fid. next is a pointer points to the next node, 
prev  is  a  pointer  points  to  the  previous  node,  and  fid  is  a  field 
iDL  is defined to be empty if all the terms of 
contains the flow id. 
column  are zero. These links are used here to reduce the time 
complexity of SRR. Double link data structure is chosen to reduce 
the time complexity of flow deletion. 
The  busy-period  in  Schedule  has  the  same  meaning  as  that  in 
[19]. At the beginning of SRR, M and the double links are empty. 
When  the  first  flow  comes,  Add_flow  will  be  called.  Then 
Schedule  will  be  invoked.  After  Del_flow  deletes  the  last  flow, 
the system enters idle state waiting for the next busy-period. Since 
Add_flow and  Del_flow  need  to  update  at  most  k  double  links, 
their time complexities are in proportion to k, which is the current 
order of WSS used by SRR. 
Since M is adjusted dynamically according to the weights of flows 
in SRR, SRR has the following property. 
Proposition  5:  The  double  link 
where k is the order of the WSS currently in use in SRR. 
1−kDL  is  not  empty  in  SRR, 
In  the  following  section,  properties  such  as  the  long-term  and 
short-term  fairness,  schedule  delay  bound,  scalability,  time  and 
space complexity of SRR will be analyzed. 
4.  PROPERTIES OF SRR 
Since SRR always forwards packets when there are active flows in 
the system, it is work-conserving. 
SRR finishes a round when it starts from the first term of the kth 
WSS,  and  after  visiting  all  the 
 terms,  back  to  the 
beginning of the sequence again. 
flow  
f
fw  times  in  a  round,  where 
2 −k
1
f
flow . 
Theorem  1:  SRR  visits 
fw  is the weight of 
Proof:  From  Proposition  2  and 
column (and  therefore  all  the  terms  belong  to 
the  Weight  Matrix  M  will  be  visited 
w
, 2
nf
f
flow will be visited 
,  where 
fw  times in a round. □ 
nfa , belongs  to 
∑ −
1
=
0
=
a
k
n
n
i
f
the  description  of  SRR, 
column )  of 
i2 times  in  a  round.  Since 
column , 
i
n
Thus each flow gets its share in a round according to its weight. 
The  following  lemma  is  obvious  according  to  the  working 
procedure of SRR. 
Lemma  1: Suppose 
by SRR x times from time 0 to t, and 
f
flow is backlogged, and has been visited 
 denotes the bytes 
t
),0(
S f
served by SRR of 
−
(
x
)1
L
max
f
flow , then, 
<
≤
t
),0(
S
f
xL
max
                         (5) 
≤
2
S
f
t
),0(
w
f
S
−
t
),0(
g
w
g
kL
min(
max
ww
,
g
f
+
)
f
f
<
V
t
),0(
w
L
max
ww
min(
,
g
f
V
g
−
=
)
+
L
max
t
),0(
w
g
+
k
L
)2
(
max
ww
min(
,
g
2
f
.
)
L
max
ww
min(
,
g
f
)
□ 
V f
t
),0(
the times 
4.1  Fairness of the Scheduler 
flow visited by SRR from time 0 to t, 
Let 
and τthe time the scheduler finishes a round. From Theorem 1, it 
is  easy  to  see  that  at  the  end  of  a  round,  for  any  pair  of  active 
flows f, g, the following equation holds, 
Lemma 2: 
f
p
4.2  Schedule Delay Bound of SRR 
aT is  the  time  a  packet  becomes  the  head  of 
queue ,  and 
If 
dT is the time that the scheduler finishes transmitting the packet, 
p
T
p
. 
we name the schedule delay for this packet, 
a
fD the scheduler delay 
p
We further name the maximum value of 
T
p
d
D
=
−
p
f
f
V
f
τ
),0(
w
f
V
g
−
τ
),0(
w
g
=
0
                        (6) 
bound of 
flow , that is,  
Lemma  2  shows  the  long-term  fairness  of  SRR.  However,  SRR 
can provide more than this. For any pair of active flows f, g, we 
have the following theorem. 
Theorem 2: For any pair of backlogged flows f, g in SRR, 
Vw
f
g
),0(
Vwt
g
−
t
),0(
f
≤
k
2
max(
ww
,
f
)
g
  (7) 
k  is  the  order  of  the  current  WSS  used  by  SRR.  The  proof  of 
Theorem 2 is given in the Appendix B. 
From Theorem 2, there exists following corollary. 
Corollary 1: For any pair of backlogged flows f, g in SRR, 
S
f
t
),0(
w
f
S
g
−
t
),0(
w
g
<
2
+
k
(
min(
L
)2
max
ww
,
f
g
          (8) 
)
S f
where 
flow ,
f
,
S g
t
),0(
t
),0(
flow  from time 0 to t, respectively. 
g
denote  the  service  received  by 
Proof: From Lemma 1, the following 2 inequalities hold, 
Lt
),0(
Lt
),0(
)1),0(
)1),0(
t
),0(
t
),0(
V
(
V
(
V
V
≤
≤
L