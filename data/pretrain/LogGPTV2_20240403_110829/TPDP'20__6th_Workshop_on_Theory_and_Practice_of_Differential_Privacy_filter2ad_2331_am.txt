security parameter and n is a number of customers and outputs (k1, . . . , kn, bk , tk ), where
ki ∈ {0, 1}d is the decryption key for user i, bk is the broadcast key, and tk is the tracing key.
2. The (randomized) encryption algorithm Encbk (m) takes as input the broadcast key bk and a
message m ∈ {0, 1} and outputs a ciphertext c.
3. The decryption algorithm Decki(c) takes as input a user key ki and a ciphertext c and outputs
a message m ∈ {0, 1}. We require that it always holds that Decki(Encbk (m)) = m for keys
(ki, bk ) that are output by Gen.
4. The syntax of the (randomized) tracing algorithm Trace will be described below (as there are
two variants).
We will consider two diﬀerent scenarios for tracing, depending on the type of pirates that we
wish to trace and the access that Trace has to those pirates. Each will give us diﬀerent types of
lower bounds for diﬀerential privacy.
Stateless Pirates Here the the tracer can run the pirate decryption program many times from
its same initial state, but on diﬀerent ciphertexts as input. For example, this models the
scenario where the pirate decryption program is a piece of software whose code is given to the
tracer. We want to be able to trace given any pirate program that is correctly able to decrypt
proper encryptions with high probability (though the tracer will feed the pirate malformed
ciphertexts that are neither encryptions of 0 or 1 to help in identifying one of the colluders).
This is the original and most standard notion of traitor-tracing in the literature.
51
Stateful but Cooperative Pirates Here the tracer can submit a sequence of ciphertexts to the
pirate, but the pirate may answer them in a correlated fashion, for example, changing its
behavior to evade tracing if it receives and detects a malformed ciphertext. However, we will
only require tracing for “cooperative” pirates, which still correctly distinguish encryptions
of 0 from 1 even if they receive some other malformed ciphertexts. Tracing stateful pirates
is well-motivated for traitor-tracing; the “cooperativeness” condition is less natural in that
context, but arises naturally in our application to diﬀerential privacy lower bounds.
We now formalize these two requirements.
Deﬁnition 6.2 (tracing stateless pirates). A traitor-tracing scheme (Gen, Enc, Dec, Trace) is secure
against stateless pirates if the following holds for every n = poly(d), and every S ⊆ [n]: let P be a
probabilistic poly(d)-time algorithm that given the keys (ki)i∈S outputs a boolean circuit ˜P . Then:
Pr[Trace( ˜P , tk ) /∈ S and ˜P is a useful decryptor] ≤ negl(d),
where the probabilities are taken over (k1, . . . , kn, bk , tk ) ← Gen(1d, 1n), ˜P ← P((ki)i∈S), and the
coins of Trace and P. The condition that ˜P is a useful decryptor means that for every m ∈ {0, 1},
Pr[ ˜P (Encbk (m)) = m] = 1, where the probability is taken over the coin tosses of Enc. (In the
literature, tracing is typically required even for pirates that have just a nonnegligible advantage
in distinguishing encryptions of 0 from encryptions of 1, but tracing pirate decoders that always
decrypt correctly will suﬃce for our purposes.)
Deﬁnition 6.3 (tracing stateful pirates). A traitor-tracing scheme (Gen, Enc, Dec, Trace) is secure
against stateful but cooperative pirates if there is a polynomial function k(·,·) (called the tracing
query complexity) such that for every n = poly(d), and every S ⊆ [n], the following holds for
k = k(d, n): Let P be any probabilistic poly(d)-time algorithm that given the keys (ki)i∈S and a
sequence (c1, . . . , ck) of ciphertexts, outputs a sequence (m1, . . . , mk) ∈ {0, 1}k.
Pr[TraceP((ki)i∈S ,·)(tk ) /∈ S and P cooperates] ≤ negl(d),
where the probabilities are taken over (k1, . . . , kn, bk , tk ) ← Gen(1d, 1n), and the coins of Trace.
We require that Trace makes only one query (c1, . . . , ck) to P (amounting to feeding k = k(d, n)
nonadaptively chosen ciphertexts to P), and say that P cooperates if for every coordinate j where
cj is in the support of Encbk (bj) for some bj ∈ {0, 1}, we have bj = mj.
We note that tracing stateless pirates is easier than tracing stateful but cooperative pirates,
because whenever ˜P is a useful decryptor, using it to decrypt each ciphertext will qualify as coop-
erating.
Theorem 6.4 (traitor-tracing schemes against stateful pirates [28, 102]). Assuming one-way func-
tions exist, there exists a traitor-tracing scheme secure against stateful but cooperative pirates with
tracing query complexity k(n, d) = ˜O(n2).
Proof sketch. The key generation, encryption, and decryption are as in the original construction
of Chor et al. [28] (which was for stateless pirates). Fix a secure private-key encryption system
(Enc0, Dec0) (which exists if one-way functions exist). Gen(1d, 1n) generates independently keys
k1, . . . , kn for the encryption system (Enc0, Dec0) and sets tk = bk = (k1, k2, . . . , kn). Encoding is
given by:
Encbk(b) = (Enc0
kn(b))
k1(b), Enc0
k2(b), . . . , Enc0
52
and decryption for user i by:
Decki(c1, . . . , cn) = Dec0
ki
(ci).
The tracing algorithm is from Ullman [102], and utilizes ﬁngerprinting codes in order to minimize
the tracing query complexity and handle stateful but cooperative pirates. TraceP (tk , bk ) ﬁrst
generates a ﬁngerprinting codebook, namely an n × k matrix C ← Genf.p.(1n).
(Recall from
Theorem 5.18 that we can take k = ˜O(n2).) It then creates ciphertexts c(1), c(2), . . . , c(k) by
c(j)
i = Enc0
ki
(Ci,j).
The tracing algorithm queries its oracle P ((ki)i∈S, c(1), c(2), . . . , c(k)) to get answers w = (w1, . . . , wk),
and runs the tracing algorithm of the ﬁngerprinting code Tracef.p.(C, w) to get a suspect i. It out-
puts this i.
We sketch the correctness of this tracing scheme:
if the pirate algorithm is computationally
bounded then it cannot learn any information about the messages encrypted by private keys of
users not participating in S, so w essentially depends only on the rows of C in S. We now observe
that w is feasible when P is cooperative, except with negligible probability. Indeed, if all entries of
column j of CS agree on value bj, then to P, c(j) is indistinguishable from a valid encryption of bj,
and hence wj = bj with all but negligible probability.
We now show that such traitor-tracing schemes imply the hardness of answering many counting
queries with diﬀerential privacy, a result due to Ullman [102].
Theorem 6.5 (tracing stateful pirates ⇒ hardness of answering many queries [102]). If there
exists a traitor-tracing scheme secure against stateful but cooperative pirates with tracing query
complexity k(d, n), then every (1, 1/10n)-diﬀerentially private mechanism for answering k = k(n +
1, d) eﬃciently computable counting queries with error α  0 such that there is no n = poly(d) and polynomial-time (1, 1/10n)-
diﬀerentially private mechanism that given a dataset with n individuals over X = {0, 1}d outputs a
synthetic dataset approximating all the counting queries in Qconj
(d) (i.e. all the 2-way marginals)
marginals to within additive error at most α.
2
We note that the requirement that the mechanism produces a synthetic dataset cannot be
√
removed from the theorem. Indeed, recall that the Laplace Mechanism and Advanced Composition
will approximate all k = Θ(d2) 2-way conjunctions within error α = ˜O(
k)/εn = ˜O(d)/εn in time
poly(n, d). So for n = poly(d), we get vanishingly small error in polynomial time.
Proof. The main ingredients in the proof are digital signature schemes and probabilistically check-
able proofs. We will use digital signatures to construct datasets for which it is hard to generate
synthetic data that preserves the answer to a cryptographically deﬁned query, and then we will use
PCPs to transform this cryptographic query into a collection of 2-way conjunctions.