print \"Sell More: Give discount on\", \$2, \"immediately!\"
}
END {
> print \"\-\-\--\"
}
Next, execute the sample awk program using pgawk (instead of just
calling awk).
\$ pgawk -f profiler.awk items.txt
Report Generated On:Mon Jan 31 08:35:59 PST 2011 Sell More: Give
discount on HD Camcorder immediately! Buy More: Order Refrigerator
immediately!
Sell More: Give discount on MP3 Player immediately! Sell More: Give
discount on Tennis Racket immediately! Buy More: Order Laser Printer
immediately!
\-\-\--
By default pgawk creates a file called profiler.out (or awkprof.out).
You can specify your own profiler output file name using \--profiler
option as shown below.
\$ pgawk \--profile=myprofiler.out -f profiler.awk items.txt
View the default awkprof.out to understand the execution counts of the
individual awk statements.
\$ cat awkprof.out
> \# gawk profile, created Mon Jan 31 08:35:59 2011
>
> \# BEGIN block(s) BEGIN {
>
> 1 FS = \",\"
1.  print (\"Report Generated On:\" strftime(\"%a %b
%d %H:%M:%S %Z %Y\", systime()))
> }
>
> \# Rule(s) 5 {
>
> 5 if (\$5 \ }
>
> \# END block(s) END {
>
> 1 print \"\-\-\--\"
>
> }
While reading the awkprof.out, please keep the following in mind:
-   The column on the left contains a number. This indicates how many
    > times that particular awk command has executed. For example, the
    > print statement in begin executed only once (duh!). The while lop
    > executed 6 times.
-   For any condition checking, one on the left side, another on the
    > right side after the parenthesis. The left side indicates how many
    > times the pattern was checked. The right side indicate how many
    > times it was successful. In the above example, if was executed 5
    > times, but it was successful 2 times as indicated by ( \# 2 ) next
    > to the if statement.
## Bit Manipulation
Just like C, awk can manipulate bits. You might not need this on your
day to day awk programming. But, this goes to show how much you can do
with the awk program.
Following table shows the single digit decimal number and its binary
equivalent.
+------------+---------------------------------------------------------+
| > *        | > **Binary**                                            |
| *Decimal** |                                                         |
+============+=========================================================+
| > 2        | > 10                                                    |
+------------+---------------------------------------------------------+
| > 3        | > 11                                                    |
+------------+---------------------------------------------------------+
| > 4        | > 100                                                   |
+------------+---------------------------------------------------------+
| > 5        | > 101                                                   |
+------------+---------------------------------------------------------+
| > 6        | > 110                                                   |
+------------+---------------------------------------------------------+
| > 7        | > 111                                                   |
+------------+---------------------------------------------------------+
| > 8        | > 1000                                                  |
+------------+---------------------------------------------------------+
| > 9        | > 1001                                                  |
+------------+---------------------------------------------------------+
#### AND
For an AND output to be 1, both the bits should be 1.
> • 0 and 0 = 0
>
> • 0 and 1 = 0
>
> • 1 and 0 = 0
>
> • 1 and 1 = 1
For example, let us do AND between the decimal 15 and 25. The and output
of 15 and 25 is binary 01001, which is decimal 9.
> • 15 = 01111
>
> • 25 = 11001
• 15 and 25 = 01001
#### OR
For an OR output to be 1, either one of the bits should be 1.
> • 0 or 0 = 0
>
> • 0 or 1 = 1
>
> • 1 or 0 = 1
>
> • 1 or 1 = 1
For example, let us do OR between the decimal 15 and 25. The or output
of 15 and 25 is binary 11111, which is decimal 31.
> • 15 = 01111
>
> • 25 = 11001
• 15 or 25 = 11111
#### XOR
For XOR output to be 1, only one of the bits should be 1. When both the
bits are 1, xor will return 0.
> • 0 xor 0 = 0
>
> • 0 xor 1 = 1
>
> • 1 xor 0 = 1
>
> • 1 xor 1 = 0
For example, let us do XOR between the decimal 15 and 25. The xor output
of 15 and 25 is binary 10110, which is decimal 22.
> • 15 = 01111
>
> • 25 = 11001
>
> • 15 xor 25 = 10110
#### Complement
Complement Makes 0 as 1, and 1 as 0.
For example, let us complement decimal 15.
> • 15 = 01111
• 15 compl = 10000
#### Left Shift
This function shifts the bits to the left side; you can specify how many
times it should do the shift. 0s are shifted in from the right side.
For example, let us left shift (two times) decimal 15. The lshift twice
output of 15 is binary 111100, which is decimal 60.
> • 15 = 1111
-   lshift twice = 111100
#### Right Shift
This function shifts the bits to the right side; you can specify how
many times it should do the shift. 0s are shifted in from the left side.
For example, let us right shift (two times) decimal 15. The lshift twice
output of 15 is binary 0011, which is decimal 3.
> • 15 = 1111
-   lshift twice = 0011
#### Awk Example using Bit Functions
> \$ cat bits.awk BEGIN {
>
> number1=15 number2=25
>
> print \"AND: \" and(number1,number2); print \"OR: \"
> or(number1,number2) print \"XOR: \" xor(number1,number2) print
> \"LSHIFT: \" lshift(number1,2) print \"RSHIFT: \" rshift(number1,2)
>
> }
>
> \$ awk -f bits.awk AND: 9
>
> OR: 31
>
> XOR: 22
>
> LSHIFT: 60
>
> RSHIFT: 3
## User Defined Functions
Awk allows you to define user defined functions. This is extremely
helpful when you are writing a lot of awk code and end-up repeating
certain pieces of code every time. Those pieces could be fit into a user
defined function.
**Syntax:**
> function fn-name(parameters)
>
> {
>
> function-body
>
> }
In the above syntax:
-   fn-name is the function name: Just like an awk variable, an awk user
    > defined function name should begin with a letter. The rest of the
    > characters can be numbers, or alphabetic characters, or
    > underscore. Keywords cannot be used as function name.
-   parameters: Multiple parameters are separated by comma. You can also
    > create a user defined function without any parameter.
-   function-body: One or more awk statements.
If you\'ve already used a name for a variable inside the awk program,
you cannot use the same name for your user defined function.
The following example creates a simple user defined function called
discount that gives a discount in the prices for the specified
percentage. For example, discount(10) gives 10% discount on the price.
For any items where the quantity is \ FS=\",\"
>
> OFS=\",\"
}
{
> if (\$5 \
> print \$1,\$2,\$3,discount(10),\$5 else
>
> print \$1,\$2,\$3,discount(50),\$5
}
function discount(percentage)
{
> return \$4 - (\$4\*percentage/100)
}
\$ awk -f function.awk items.txt 101,HD Camcorder,Video,189,10
102,Refrigerator,Appliance,765,2 103,MP3 Player,Audio,135,15 104,Tennis
Racket,Sports,95,20 105,Laser Printer,Office,427.5,5
Another good use of creating a custom function is to print debug
messages.
> **Following is a simple mydebug function:**
\$ cat function-debug.awk
{
> i=2; total=0; while (i \
> mydebug(\"quantity is \" \$i); total = total + \$i;
>
> i++;
>
> }
>
> print \"Item\", \$1, \":\", total, \"quantities sold\";
}
function mydebug ( message ) { printf(\"DEBUG\[%d\]\>%s\\n\", NR,
message )
}
Partial output is shown below.
\$ awk -f function-debug.awk items-sold.txt DEBUG\[1\]\>quantity is 2
DEBUG\[1\]\>quantity is 10
DEBUG\[1\]\>quantity is 5
DEBUG\[1\]\>quantity is 8
DEBUG\[1\]\>quantity is 10
DEBUG\[1\]\>quantity is 12
Item 101 : 47 quantities sold
DEBUG\[2\]\>quantity is 0
DEBUG\[2\]\>quantity is 1
DEBUG\[2\]\>quantity is 4
DEBUG\[2\]\>quantity is 3
DEBUG\[2\]\>quantity is 0
DEBUG\[2\]\>quantity is 2
Item 102 : 10 quantities sold
## Language Independent Output (Internationalization)
When you write an awk script to print a report, you might specify the
report header and footer information using the print command. You might
define the header and footer static values in English. What if you want
to execute the report output for some other language? You might end-up
copying this awk script to another awk script and modify all the print
statements to have the static values displayed in appropriate values.
Probably an easier way is to use internationalization where you can use
the same awk script, but change the static values of the output during
run time.
This technique is also helpful when you have a huge program, but you
end-up changing the printed static output frequently for some reason. Or
you might want the users to customize the awk output by changing the
static displayed text to something of their own.
This simple example shows the 4 high level steps to implement
internalization in awk.
#### Step 1 - Create text domain
Create a text domain and bind it to the directory where the awk program
should look for the text domain. In this example it is set to the
current directory.
\$ cat iteminfo.awk BEGIN {
> FS=\",\"
>
> TEXTDOMAIN = \"item\"
>
> bindtextdomain(\".\")
>
> print \_\"START_TIME:\" strftime(\"%a %b %d %H:%M:%S %Z
%Y\",systime());
> printf \"%-3s\\t\", \_\"Num\";
>
> printf \"%-10s\\t\", \_\"Description\" printf \"%-10s\\t\", \_\"Type\"
>
> printf \"%-5s\\t\", \_\"Price\" printf \"%-3s\\n\", \_\"Qty\"
>
> printf
\_\"\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
\\n\"
}
{
> printf \"%-3d\\t%-10s\\t%-10s\\t\$%-.2f\\t%03d\\n\",
\$1,\$2,\$3,\$4,\$5
}
Note: The above example has \_ in front of all the strings that are
allowed to be customized. Having \_ (underscore) in front of a string
doesn\'t change the way how it is printed, i.e. it will print without
any issues as shown below.
\$ awk -f iteminfo.awk items.txt START_TIME:Sat Mar 05 09:15:13 PST 2011
Num Description Type Price Qty
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
101. HD Camcorder Video \$210.00 010
102. Refrigerator Appliance \$850.00 002
103. MP3 Player Audio \$270.00 015
+-----+------------------------------+--------------------------------+
| >   | > Tennis Racket Sports       | > \$190.00 020                 |
| 104 |                              |                                |
+=====+==============================+================================+
| >   | > Laser Printer Office       | > \$475.00 005                 |
| 105 |                              |                                |
+-----+------------------------------+--------------------------------+
#### Step 2: Generate .po
Generate portable object file (extension .po) as shown below. Please
note that instead of \--gen-po, you can also use \"-W gen-po\"
> \$ gawk \--gen-po -f iteminfo.awk \> iteminfo.po
>
> \$ cat iteminfo.po
>
> #: iteminfo.awk:5 msgid \"START_TIME:\" msgstr \"\"
>
> #: iteminfo.awk:6 msgid \"Num\" msgstr \"\"
>
> #: iteminfo.awk:7 msgid \"Description\" msgstr \"\"
>
> #: iteminfo.awk:8 msgid \"Type\" msgstr \"\"
>
> #: iteminfo.awk:9 msgid \"Price\" msgstr \"\"
>
> #: iteminfo.awk:10 msgid \"Qty\" msgstr \"\"
#: iteminfo.awk:11
msgid
\"\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--\\
n\" \"\"
msgstr \"\"
Now, modify this portable object file and change the message string
accordingly. For example, if you want to call \"Report Generated on:\"
(Instead of the \"START_TIME:\"), edit the iteminfo.po file and change
the msgstr right below the msgid for \"START_TIME:\"
\$ cat iteminfo.po
#: iteminfo.awk:5 msgid \"START_TIME:\"
msgstr \"Report Generated On:\"
Note: In this example, the rest of the msgstr strings are left empty.
#### Step 3: Create message object
Create message Object file (from the portable object file) using msgfmt
command.
If the iteminfo.po has all the msgstr empty, it will not produce any
message object file, as shown below.
\$ msgfmt -v iteminfo.po
0 translated messages, 7 untranslated messages.
Since we created one message translation, it will create the messages.mo
file.
\$ msgfmt -v iteminfo.po
1 translated message, 6 untranslated messages.
\$ ls -1 messages.mo messages.mo
Copy this message object file to the message directory that you should
create under current directory.
\$ mkdir -p en_US/LC_MESSAGES
\$ mv messages.mo en_US/LC_MESSAGES/item.mo
Note: The destination file name should match the name we gave in the
TEXTDOMAIN variable of the original awk file. TEXTDOMAIN = \"item\"
#### Step 4: Verify the message
Now you see that it doesn\'t display \"START TIME:\" anymore. It should
the translated string \"Report Generated On:\" in the output.
\$ gawk -f iteminfo.awk items.txt