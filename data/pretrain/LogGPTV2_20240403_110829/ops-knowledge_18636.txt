User: How to Set SSH Key Authentication to Implement More Secure Remote Login Operation?
Assistant: SSH key authentication is a more secure remote login method. Compared with traditional username and password authentication, it uses an asymmetric encryption algorithm to improve login security. Here are the steps on how to set up SSH key authentication to achieve more secure remote login operations: 1. Generate an SSH key pair Use the command line tool on the local terminal to generate an SSH key pair: ``` $ ssh-keygen -t rsa ``` When prompted for a filename, you can use the default or customize the filename. The generated SSH key pair includes a public key file (the default is "id_rsa.pub") and a private key file (the default is "id_rsa"). 2. Copy the public key file to the remote server Use SCP or other file transfer tools to copy the public key file to the "~/.ssh/authorized_keys" file on the remote server, where "~" indicates the user's home directory. ``` $ scp ~/.ssh/id_rsa.pub user@remote-server:~/.ssh/authorized_keys ``` 3. Configure the SSH server to open the SSH configuration file on the remote server (the default is "/etc/ssh /sshd_config"): ``` $ sudo vim /etc/ssh/sshd_config ``` Make sure the following configuration items are enabled: ``` PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys ``` 4. Restart the SSH server to save the configuration file and Restart the SSH server: ``` $ sudo systemctl restart sshd ``` Now you can use the private key file to log in to the remote server without entering a password: ``` $ ssh user@remote-server -i ~/.ssh/id_rsa ``` If the private key file is protected, only the user holding the private key file can log in to the remote server. This increases the security of the login.