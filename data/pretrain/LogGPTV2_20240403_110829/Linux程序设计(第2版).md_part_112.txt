gtk_widget_set_usize(clock_app. 220, 300):
gnone_app_set_contents (GNoME_APP （clock_app).canvas):
gnome_app_create_toolbar (GNOME_APP (clock_app),toolbax);
clock_outline = gnome_canvas_iten_new (gnome_canvas_root (GNoME_CANVAS (canvas)),
GNOME_TYPE_CANVAS_ELLIPSE.
"y1°,0.0.
"x1·,0.0,
'x2*,
CANVAS_SIZE,
“outline_color','yellow*,
'y2*,
CANVAS_SIZE,
0srunupx.
NULL) :
20）我们在这里创建出60个圆点来标记我们时钟上的分钟位置。如下所示：
for (dots =0;dots <60:dots++]{
create_dot ( dots, canvas):
21）下面这个菌数很关键，它每隔1000毫秒调用一次redraw函数来刷新我们的时钟。
gtk_timeout_add(1000.redraw, canvas) ;
redraw(canvas); /* make sure our hands are created before we dispiay the clock */
gtk_widget_show_all(clock_app):
gtk_maini}:
return 0:
以上是这个时钟程序的完整代码。当我们编译并运行这个程序的时候，将会在屏幕上看到
我们的时钟滴滴答答地走着。图17-11是这几个窗口的显示画面。
ind ririble
X
图17-11
加入jaVa编程群：524621833
---
## Page 600
582Linux程序设计
操作注释：
这个程序好像挺长，可它从本质上讲还只是一个相当简单的程序。这个时钟程序的关键是
gtk_timeout_add函数，它会每过一秒调用redraw函数一次。在redraw函数里，我们计算出表针都
应该指向什么地方，设置好坐标数组，然后调用gnome_canvas_item_set刷新画布上的项目。
对属性对话框函数我们得多说几句。我们创建了一个用来切换秒针可见状态的选择框素材
和一个控制画布缩放比例的滑块素材。我们在处理复选框和滑块素材的状态改变情况时采取的
做法是不同的。我们会等到ok或者apply按钮被按下之后才会去根据选择框的状态改变秒计的可
见性：但画布的缩故比例会通过滑块素材产生的value_changed信号随着滑块素材的移动立刻反
应出来。这就产生了随滑块素材的调整即时缩放时钟的效果。
也许你惠意创建一个抗失真的画布来给出一个高画面质量的时钟，但千万要谨慎从事！它
可能会占用大量的资源。你只须把画布的创建语句修改为下面这样就可以达到目的：
gtk_widget_puah_visual(gdk_rgb_get_vigual());
gtk_widget_push_colormap(gdk_rgb_get_cmap());
画布直线是通过指定一个直线上的点的数组面出来的，你必须用下面这条语句创建和初
始化：
其中的num_of_points是你想在画布上串起来的点的个数，所以这个数组的长度将是这个数
字的两倍，x坐标将被放在偶数编号的元素里，y坐标将被放在奇数元素里。
我们没有使用分开的时针和分针，我们用一条直线把时针位置和中心点连起来，然后再连
到分钟位置，所以要给gnome_canvas_points传递一个“3”。这样做与时针分针分开创建相比并
没有什么特别的好处，我们只是通过它来演示两条直线的join-style相交属性的用法面已，这个
属性在例子里被设置为GDK_JOIN_ROUND。
在我们结束之前，再对画布素材多说凡句。
画布上的项目和组可以重叠摆放。最后创建的素材总是被放在最顶上：如果你想改变这个
重叠次序，就需要调用gnome_canvas_item_lower或gnome_canvas_item_raise函数。画布支持文
本和图像，还支持简单的图形元素如直线、矩形、椭圆和多边形等。画布上的项目可以连接信
号处理器。
下面该是什么了？我们可以说是飞快地抵达了我们GNOME之旅的终点，但大家应该对
GNOME素材的使用方法和GNOME程序的设计方法有了足够的认识，应该能参考着Web网上的
资料来编写自已的应用程序了。部分重要资料可以通过查阅头文件的办法获得：这类头文件的
注释文档一般都比较齐备，并且差不多都可以在/usr/include子目录里找到。
3.GNOME中的CD唱盘管理软件
读者可以在Wrox出版社的Web站点www.wrox.com上找到CD唱盘管理软件的GNOME前端的
源代码，它用到的素材就更多了，我们都给它们加上了必要的说明。本章的程序示例全都可以
在该站点上找到（如图17-12所示）。
加入jaVa编程群：524621833
---
## Page 601
第17章使用GTK+进行GNOME程序设计
583
lleSdltelp
日
Delrte-Find
Ddt
Crtolog EntryTitle
Too eor ly to soy
Artiet
728
Eternity’s Surise
Cheese
beP
CD125
CD4e3
Clovsical
Suvnr hogic
Clossica!
John Tevener
cD267
FiveLeoves Loft
Folk
Nick Drdke
S9200
Blues Etudes
Nirron)
CD111
 night ot the Operα
Rock
Cacar Peter son
T2
Queen
rod ne.Title
punb
Yer y ape
niik It)
Pennyroyal Teo
Rodio Fr ienely unit Shifter
Tourette's
Delete
图17-12
很明显没有足够的篇幅来讨论所有的事，而且毫无疑问我们只是刚接触到GNOME的皮毛。
从某种意义上讲，一本书还是只介绍基本概念最好，因为任何一本详细介绍GNOME最新开发成
果的书面材料很快就都过时了。
GNOME是一个繁忙而又人才济济的大家庭。现时期，世界范围大约有300名程序员定期对
这个项目进行着研究和贡献。也许这一章的学习激发了你足够的创造力，使你成为其中的一员
也说不定。祝你好运，GNOME愉快！
17.2本章总结
我们在这一章里学习了GNOME的基本概念和利用GNOME提供的材料来编写应用程序的基
本方法。
我们向大家介绍了基础性的开发工具包GTK+，学习了它几个素材的使用方法。另外，我们
还学习了GNOME画布素材的使用方法。
加入jaVa编程群：524621833
---
## Page 602
第18章Per程序设计语言
LarryWall的Perl程序设计语言身处shell和C语言之间，并从许多标准的UNIX工具那里吸取
大量营养，这使它非常适合于完成文本处理、CGI脚本程序设计以及系统管理方面的任务。回
时，我们还将看到Perl的扩展性也非常好（你甚至可以通过PerITk扩展用它来编写图形化的用户
操作界面）我们完全可以这样说：只要是能用C语言做到的事情，用Peri也同样可以做到，而且
可能会更简单。Perl非常容易学习，因为它借鉴了各种程序设计语言和工具性程序，其中肯定存
你已经非常熟恶的。C和shell程序员会特别感到如鱼得水，面sed、awk、Basic和Tel程序员也不
会觉得它陌生。
Perl最优秀的特色之一就是它在操作系统的顶部提供了个与计算机平台无关的UNIX风格
的柚象层面，这句话是什么意思呢？是这样的：Per1可以运行在许多种计算机平台上，比如
Windows、苹果公司的Macintosh以及任何看起来像UNIX的东西上。你可以把我们学过的与
Linux程序设计有关的各种想法都带过来，而不管我们正在使用的系统是哪一种，Peri都可以尽
可能好地实现它们。事实上，你可以假定任何目标操作系统的外观和行为都与Linux完全一致，
而这种对待事物的方法很让人高兴一一我想你肯定会同意这--观点的。
在这一章里，我们将学习如何编写基本的Peril脚本程序，并且会把我们前面学过的知识运用
到Perl里来，我们不打算在这一章里涉及到Perl语言的所有方面，只是想把最有用和最常用的内
容介绍给大家：另外，我们还将用Perl再次实现大家都很熟悉了的CD唱盘管理软件。
18.1Perl语言简介
我们从学习Perl语言的基本概念入手，它们是变量、操作符和函数、规则表达式以及文件的
输人输出。后面内容里的信息量是很大的，面我们要到本章结束时才会把它们串在一起。但马
上就要出现的那些概念对读者来说都应该是比较熟悉的，所以阅读量应该不会太大。
首先，我个人认为，我们应该检查大家的系统上是不是已经安装了Perl。大多数Linux现在
都自带有Perl.所以大家只需敲人“perl-v”看看屏幕上会不会出现以下的内容：
This is per1, version 5.005_03 buiit 1or i386-1inux
Copyriqht 1987-1999. Larry %a11
Per1 msy be copied only under the terng of either c
Generai Public License, which may be tound in the Per1 5.0 source k1t.
che Artistic License or the GNU
Conplete documentation for Perl. including FAQ lists, should be found on this systen
browser at hctp: //www.perl.com/ . the Per1 wcme Page.
using 'man perl' or 'perldoc perl'.If you have access to the Internet. point your
如果没有上述内容，请检查你的路径设置和Linux的软件包管理器（如果你有的话），看看
自己到底把Perl安装到哪儿去了。如果根本就没有安装，你可以从这儿个来源获得一份最新的
Perl版本：Linux发行版本的CD盘、Linux发行商FTP站点的contrib或main目录、或者从CPAN那
加入jaVva编程群：524621833
---
## Page 603
第18章Perl程序设计语言585
里弄一份源代码来（CPAN是“ComprehensivePerlArchiveNetwork”的字头缩写，意思是“智
能化Perl档案网"，我们稍后有专题介绍它）。在Perl的主页htp：//www.perl.com/上有大关于
Perl的文档、新闻、通用性资料。
18.1.1“Hello”Perl程序
首光，我们来看看简单的Perl程序是什么样子的，怎样才能运行它。这是我们的脚本程序，
我们给它起名为hello.pl。如下所示：
现在，我们在命令行上通过Perl解释器来运行它：
perl bello.p1
Hel:o. World
一切按计划进行，Perl打了个招呼并把我们返回到shel提示符处。我们可以用“#！”记号把
Perl解释器的安装位置告诉Linux，这与当初编写shell脚本程序时的做法是完全一样的。我们把
hello.pl修改为下面的样子：
#1/usr/bin/perl -w
hello.pl,version 2
print *Rello, World\n′;
接下来，我们需要给这个文件设置上可执行权限才能直接运行它。如下所示：
S chmod 755 be11o.p1
现在，我们就可以像对待shell脚本程序那样运行这个文件了，如下所示：
S./bello.p1
从这个例子里我们可以看出：
1）Perl语句和C语言语句一样都是以分号结尾的。字符串里的换行符也像C语言里那样用
"n”来表示。所有其他的“巨字符”（即控制字符序列）都完全借鉴自C语言。
2）类似于shell和Tel语言中的用法，注释行是以“#”字符开始的（注意“#！”的特殊含义，
这也与shell一样）。
3）第一行里的“-w”是perl解释器的一个选项，它的作用是打开全部警告功能，我们强烈推
荐这种做法。虽然Perl对代码的书写格式并没有太严格的要求，但如果我们的脚本程序能够通过
“-w”测试的话，它们将运行得更可靠。
18.1.2Perl语言中的变量
Perl语言有三种变量类型，它们是：标量（scalar）、数组（array）和哈希表（hash）
1.标量
标量是普通的字符串和数字；它们的表达方式和操作方式与shel变量有很多共同之处。可
加入jaVa编程群：524621833
---
## Page 604
586Linux程序设计
以把我们的脚本程序重新写成下面这个样子：
abesses rurad
C语言程序员可能更愿意写成“print（Smessage)：”的样子，没问题。Perl语言对print这类函
数是否加有括号并不是太在意：但如集加上括号有助于提高可读性，那就不要去掉它们。另外。
赋值语句的等号两头可以有空格，这与C语言类似、与shell相反。值得注意的是我们不必象C语
言那样为变量分配和回收内存空间，也不需要事先声明它们：Per会负责所有这类事情，让程序
员专心编写出好程序来。
C语言程序员也许更愿意用printf来替代print：Peri也确实准备了一个printf函数，它的功能
与C和shel1里的同名函数是一样的。但print的执行效率要更高一些，所以除非需要用到函数
printf的格式编排功能，最好是坚持使用print函数。
2.数组
数组是列表（list）的变量形式，正如Tcl语言中一样。但数组变量不是以“$”而是以“@”
字符打头的。下面是一个简单的列表：
(1, 2, 3, 4)
我们用下面这条语句把它放到一个变量里去：
@mylist =(1, 2, 3, 4 1:
如果想把数据再从数组里取出来应该怎么办？我们先来看看下面这段列表操作，然后再解
释发生了什么事情。
print Smesoage[3), {message[1]. $message[2)。 Smessage[0];
Bmessage =(*\n*,**,*World,*Hello,*);
好了，你肯定知道它会输出什么样的结果，但这是怎么做到的呢？引起我们注意的第一件
事情是print可以有好几个用逗号隔开的参数，它们实际上构成了一个列表，但这并不是个重要
问题（它稍后会变得重要起来）。
接下来，大家应该注意到虽然那个数组叫做@message，但引用其中的元素时我们使用的却
就容易理解了：当我们一个个地引用着数组的元素时，我们实际“想要”的是它的标量值而
系，光是$message自个代表不了数组中的任何元素。）
最后，数组中的第一个元素下标是0，如果读者习惯于C语言会觉得很舒服，可如果读者习
惯于使用BASlC、Pascal或sed/awk编程就会有点不适应。如果意，你完全可以把数组中第一
个元素的编号改为！，但这样做的后果往往擎大于利，所以最好是不要去管它。
也许你想取出的不是单个的元素而是一个范围，或者叫做一个数组切片。指定元素的范围区
间就能达到这一目的，但这次要注意，我们“想要”的是一个列表面不是一个标量。如下所示：
Sa（ero*，"one",*two*，"thxce，*four）：
b= wa(0,2..31:#@bis(*zero*,*two*,three*);
Reducing it to one statement:
b-[*zero*,*one*，*two*,*three′,“four*)[0,2..3]:
加入jaVa编程群：524621833
---
## Page 605
第18章Perl程序设计语言587
Perl会对列表自动进行平面化，这句话的意思是说列表里不能再有其他的列表，数组也不能
是多维的（你可以通过引用来实现多维列表或数组，但这超出了本章的讨论范围。具体操作办
法请参考perlref和perllol的使用手册页）。这就意味着下面这些语句功能是相同的：
{"zero"，*one*.“two*，“three*.*four′);
B[*zero”，*one*，（*tvo*,*three*}，“four′}：
ea = [@half. 9half21;
half a