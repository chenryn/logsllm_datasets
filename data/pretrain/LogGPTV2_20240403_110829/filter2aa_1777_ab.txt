# Exchange Server Security and Exploitation

## Backend Rehydration Module

### Request Handling Flow
1. **GetTargetBackEndServerUrl**
2. **CreateServerRequest**
3. **GetServerResponse**

### Response Section
- **CopyHeadersToClientResponse**
- **CopyCookiesToClientResponse**

### Request Lifecycle
- **BeginRequest**
- **AuthenticateRequest**
- **AuthorizeRequest**
- **MapRequestHandler**
- **EndRequest**
- **IHttpHandler**
- **LogRequest**

### Authentication and Token Processing
```csharp
// IIS has implicitly done the Authentication and set the User.Identity to current HttpContext object
private void OnAuthenticateRequest(object source, EventArgs args) {
    if (httpContext.Request.IsAuthenticated) {
        this.ProcessRequest(httpContext);
    }
}

private void ProcessRequest(HttpContext httpContext) {
    CommonAccessToken token;
    if (this.TryGetCommonAccessToken(httpContext, out token)) {
        // Further processing...
    }
}
```

### Token Serialization Check
```csharp
private bool TryGetCommonAccessToken(HttpContext httpContext, out CommonAccessToken token) {
    string text = httpContext.Request.Headers["X-CommonAccessToken"];
    bool flag = this.IsTokenSerializationAllowed(httpContext.User.Identity as WindowsIdentity);
    if (!flag) {
        throw new BackendRehydrationException("Token serialization not allowed");
    }
    token = CommonAccessToken.Deserialize(text);
    httpContext.Items["Item-CommonAccessToken"] = token;
    return true;
}

private bool IsTokenSerializationAllowed(WindowsIdentity windowsIdentity) {
    bool flag2 = LocalServer.AllowsTokenSerializationBy(clientSecurityContext);
    return flag2;
}

private static bool AllowsTokenSerializationBy(ClientSecurityContext clientContext) {
    return LocalServer.HasExtendedRightOnServer(clientContext, WellKnownGuid.TokenSerializationRightGuid);  // ms-Exch-EPI-Token-Serialization
}
```

### Authentication Flow Summary
1. **Frontend IIS** authenticates the request (Windows or Basic authentication) and serializes the current Identity to the `X-CommonAccessToken` HTTP header.
2. **Frontend** generates a Kerberos ticket by its HTTP SPN to the `Authorization` HTTP header.
3. **Frontend** proxies the HTTP request to the **Backend**.
4. **Backend IIS** authenticates the request and checks if the authenticated user has the `TokenSerialization` right.
5. **Backend** rehydrates the user from the `X-CommonAccessToken` HTTP header.

## Known Vulnerabilities

### ProxyLogon
- **Description**: A well-known vulnerability in Microsoft Exchange Server that allows an unauthenticated attacker to execute arbitrary code through an exposed 443 port.
- **Chained Bugs**:
  - **CVE-2021-26855**: Pre-auth SSRF leads to Authentication Bypass.
  - **CVE-2021-27065**: Post-auth Arbitrary-File-Write leads to RCE.

### ProxyOracle
- **Description**: An exploit that allows an unauthenticated attacker to recover the victim's username and password in plaintext format by pushing the user to open a malicious link.
- **Chained Bugs**:
  - **CVE-2021-31195**: Reflected Cross-Site Scripting.
  - **CVE-2021-31196**: Padding Oracle Attack on Exchange Cookies Parsing.

### ProxyShell
- **Description**: An exploit chain demonstrated at Pwn2Own 2021 that allows an unauthenticated attacker to execute arbitrary commands on Microsoft Exchange Server through an exposed 443 port.
- **Chained Bugs**:
  - **CVE-2021-34473**: Pre-auth Path Confusion leads to ACL Bypass.
  - **CVE-2021-34523**: Elevation of Privilege on Exchange PowerShell Backend.
  - **CVE-2021-31207**: Post-auth Arbitrary-File-Write leads to RCE.

### Mitigations
1. Keep Exchange Server up-to-date and avoid exposing it to the Internet, especially the web part.
2. Microsoft has enhanced the CAS Frontend in April 2021, mitigating the authentication part of the attack surface and reducing the "pre-auth" effectively.
3. Consider moving to Office 365 Exchange Online (just kidding).

### Conclusion
- Modern problems require modern solutions.
- Understanding the architecture from a higher point of view is crucial.
- The Exchange CAS remains a good attack surface, but the lack of "pre-auth" bugs may reduce its impact.
- Exchange is still a valuable target for bug hunting.
- Even if you find a critical bug like ProxyLogon, Microsoft will not reward you with a bounty because Exchange Server On-Prem is out of scope.

---

Thank you for your attention!

[Blog Link](https://blog.orange.tw)