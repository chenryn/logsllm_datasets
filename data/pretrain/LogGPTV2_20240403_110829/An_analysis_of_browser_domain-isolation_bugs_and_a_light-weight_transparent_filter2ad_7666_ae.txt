### Attempts to Guess
More fundamentally, even for a browser not using the wide-character representation, the attack still lacks an important prerequisite: there is no way for the attacker's frame to detect a syntax error in the victim's frame, as the two frames are in different domains. In other words, for the probing attack to succeed, the attacker's frame would already need the capability to communicate with the victim's frame (e.g., through the `onerror` method of the victim's frame). However, this prerequisite is precisely the domain-isolation violation that the attacker aims to achieve. This creates a cyclical cause-and-effect situation. Therefore, XOR-probing is not a genuine concern for the accenting mechanism.

### Potential Weakness in Accenting Single Wide-Character Object Names
Another issue related to XOR probing is the potential weakness in accenting an object name that contains only one wide-character. As discussed in the last paragraph of Section 5.5, we need to pad another wide-character so that the object name is four bytes long.

### Application Compatibility
While our technique is designed to offer protection for the browser, it is also crucial that the technique remains fully transparent to existing web applications. If the mechanism were not transparent and caused web applications to malfunction, it would present a significant deployment hurdle.

#### Table 1: Representative Web Applications

| App | Description |
| --- | --- |
| Virtual Earth | Microsoft’s map service, featuring road maps, satellite maps, bird-eye views, and driving direction planners. It supports rich user interactions such as zooming, drag-and-drop, and gadget moving. |
| Google Map | Google’s map service, including road maps, satellite maps, and driving direction planners. It also supports rich user interaction capabilities. |
| Citi Bank | An online banking application offering user authentication, electronic bank statements, and other banking services. |
| Hotmail | A popular web-based email system. |
| CNN | A popular news page containing many browser features. |
| Netflix | A popular movie-rental application with a user-specific interface. |
| YouOS | A web operating system providing a Unix/Linux-style environment within the browser, supporting rich user interactions. |
| Outlook Web Access | A web-based email system providing the user interface of Microsoft Outlook in the browser, with similar user interaction capabilities. |
| Slashdot | A popular technology-related news website, similar to a blogging site. |

To ensure the transparency of our implementation, our modified IE executable was tested on numerous web applications, as shown in Table 1. We intentionally selected applications with rich user interaction capabilities to thoroughly test the mechanism. All these applications ran properly in our IE executable.

### Legitimate Cross-Frame Communications
In addition to testing popular web applications, we conducted another test to verify that our mechanism is fully transparent to legitimate cross-frame communications. The attacks discussed earlier are convoluted scenarios to achieve illegitimate cross-frame communications. In our transparency test, each attack scenario was converted into a legitimate cross-frame access scenario by loading all frames with pages from the same domain (http://payroll). Thus, each previous attack script became a script with convoluted but legitimate cross-frame accesses. We observed that all these scripts ran successfully, and all cross-frame accesses occurred as expected. This provides strong evidence that the script accenting mechanism does not affect communications conforming to the same-origin policy.

### Performance
The accenting mechanism is applied in two situations:
1. **Script Transmission:** When a frame sends a script to another frame, the performance overhead is negligible because it simply applies an XOR primitive to every 4-byte word in a string. This is insignificant compared to the runtime overhead for sending, receiving, compiling, and merging the script.
2. **DOM Object Name Querying:** Name querying occurs frequently during script execution. For each query, we perform an accenting and de-accenting operation, which may incur noticeable performance overhead. However, the overhead should be minimal because each name query involves a deep stack of function calls from `jscript.dll` to `mshtml.dll`, which is already a non-trivial operation.

To measure the upper bound of the performance overhead, we queried `window.document.body.innerText` 400,000 times. The execution times for the original IE and our modified IE were 17.812 seconds and 18.374 seconds, respectively, resulting in a 3.16% performance overhead.

**Figure 8: Page Initialization Times With and Without Script Accenting**

Note that this is the worst-case result, as the test is a stress test that does nothing but querying names. To estimate the impact on end-to-end browsing time, we measured the page initialization time of popular websites. The initialization time includes page downloading and the execution of the main script on the page. The measurement was made by subscribing to the `BeforeNavigate` and `NavigateComplete` events of the browser [12]. For each page, we measured 50 times. The results, shown in Figure 8, indicate that the standard deviations are much larger than the differences between the average numbers for the original IE executable and our modified IE. We believe the differences are due to network conditions, and the script accenting mechanism has almost no effect on the user's browsing experience.

### Conclusions
Browsers' isolation mechanisms are critical for users' safety and privacy on the web. Achieving proper isolation, however, has proven to be challenging. Historical data show that even well-defined isolation policies can be surprisingly error-prone, and browser isolation bugs have been exploited in most major browser products. To the best of our knowledge, this is the first focused academic study of real-world browser isolation bugs.

We analyzed the implementation of IE’s domain-isolation mechanism and previously reported attacks. The analysis revealed that these attacks involve complicated HTML/script behaviors, such as function aliasing, the excessive expressiveness of navigation methods, the semantics of user events, and IE’s interactions with other system components, which are very difficult to anticipate by developers.

In this paper, we proposed the script accenting technique as a lightweight, transparent defense against these attacks. A prototype was implemented on IE, and the evaluation showed that all known attacks were defeated due to the mismatch of the accents of the accessor frame and the accessee frame. We also demonstrated that the mechanism is fully transparent to existing web applications. Despite a 3.16% worst-case performance overhead, the measurement of end-to-end browsing time did not show any noticeable slowdown.

The basic idea of accenting is that origin identities can be piggybacked on communications at the interfaces between different system components without affecting their internal logic. This concept can be generally applied to other isolation mechanisms. For example, even within a frame, the browser needs to enforce domain isolation for XML objects and XMLHttpRequest objects, whose domains may differ from the frame's domain. Beyond its current implementation on IE, we believe the same idea can be applied to other browsers if they have well-defined interfaces between their HTML engines and script engines. More broadly, non-browser platforms also need to enforce domain isolation. For instance, CLR, the runtime environment for the .NET framework, uses Application Domain as a security infrastructure. We speculate that the idea of accenting might also be applicable to platforms like CLR.

### Acknowledgements
We thank our colleagues Emre Kiciman and Helen J. Wang for valuable discussions and suggestions. Anonymous reviewers provided insightful feedback to improve the quality of the paper. We also thank our shepherd Dan Boneh for guiding us towards the final version. Jose Meseguer helped us better understand the concept of non-interference.

### References
[1] Firefox Cross-Frame Vulnerabilities. Security Focus Vulnerability Database. Bug IDs: 10877, 11177, 12465, 12884, 13231, 20042. http://www.securityfocus.com/bid  
[2] Opera Cross-Frame Vulnerabilities. Security Focus Vulnerability Database. Bug IDs: 3553, 4745, 6754, 8887, 10763. http://www.securityfocus.com/bid  
[3] Netscape Navigator Cross-Frame Vulnerabilities. Security Focus Vulnerability Database. Bug IDs: 11177, 13231. http://www.securityfocus.com/bid  
[4] A. Clover. CSS visited pages disclosure, 2002. http://seclists.org/lists/bugtraq/2002/Feb/0271.html  
[5] Don Box. Essential COM. ISBN 0-201-63446-5. Addison Wesley.  
[6] Richard S. Cox, Jacob G. Hansen, Steven D. Gribble, and Henry M. Levy: "A Safety-Oriented Platform for Web Applications," IEEE Symposium on Security and Privacy, 2006  
[7] Douglas Crockford. "JSONRequest," http://www.json.org/JSONRequest.html  
[8] E. W. Felten and M. A. Schneider, “Timing attacks on web privacy,” in Proc. ACM Conference on Computer and Communications Security, 2000  
[9] J. A. Goguen and J. Meseguer, “Security policies and security models,” in Proc. 1982 IEEE Symposium on Security and Privacy  
[10] Collin Jackson, Andrew Bortz, Dan Boneh, and John C. Mitchell. "Protecting Browser State from Web Privacy Attacks," in Proc. the 15th ACM World Wide Web Conference, Edinburgh, Scotland, 2006.  
[11] Martin Johns. "SessionSafe: Implementing XSS Immune Session Handling," in Proc. the 11th European Symposium on Research in Computer Security, Hamburg, Germany, September, 2006  
[12] MSDN Online. http://msdn.microsoft.com  
[13] The "Javascript:" Protocol. http://www.webreference.com/js/column35/protocol.html  
[14] Benjamin Livshits and Monica S. Lam. "Finding Security Vulnerabilities in Java Applications with Static Analysis," in Proc. Usenix Security Symposium, Baltimore, Maryland, August 2005.  
[15] Wei Xu, Sandeep Bhatkar, and R. Sekar. "Taint-Enhanced Policy Enforcement: A Practical Approach to Defeat a Wide Range of Attacks," in Proc. the 15th USENIX Security Symposium, Vancouver, BC, Canada, July 2006.  
[16] The XMLHttpRequest Object. W3C Working Draft 27 September 2006. http://www.w3.org/TR/XMLHttpRequest/  
[17] Cross-site scripting. http://en.wikipedia.org/wiki/Cross_site_scripting  
[18] Common Language Runtime (CLR). MSDN Online. http://msdn2.microsoft.com/en-us/netframework/aa497266.aspx