attempts  to  guess.  More  fundamentally,  even  for  a  browser  not 
using  the  wide-character  representation,  the  attack  still  lacks  an 
important prerequisite – there is no way for the attacker frame to 
detect a syntax error in the victim frame, because the two frames 
are in different domains. In other words, for the probing attack to 
succeed,  the  attacker  frame  already  needs  the  capability  to 
communicate  with  the  victim  frame  (e.g.,  through  the onerror 
method of the victim frame), but such a prerequisite is exactly the 
domain-isolation violation that the attacker tries to achieve. This is 
a cyclical cause-and-effect situation. Therefore, the XOR-probing is 
not a real concern of the accenting mechanism.  
Another  issue  related  to  XOR  probing  is  the  potential 
weakness  in  accenting  an  object  name  that  has  only  one  wide-
character. We have discussed this in the last paragraph in Section 
5.5: we need to pad another wide-character so that the object name 
is four-byte long. 
6.3  Application Compatibility 
Although  our  technique  is  to  offer  the  protection  for  the 
browser, it is also important that the technique is fully transparent 
to existing web applications. It would be a significant deployment 
hurdle  if  the  mechanism  is  not  transparent  to  current  browser 
features and causes web applications to malfunction.  
Table 1: Representative Web Applications 
App 
Virtual 
Earth 
Google 
Map 
Citi Bank 
Hotmail  
CNN  
Netflix  
YouOS  
Outlook 
Web 
Access 
Slashdot 
Description of the Web Application 
Microsoft’s  map  service.  The  features  include  the  road 
map, the satellite map, the bird eye view, and the driving 
direction  planner.  It  supports  rich  user  interactions, 
including  zooming  the  map,  drag-and-drop,  and  gadget 
moving, etc.  
Google’s map service. The features include the road map, 
the  satellite  map  and  the  driving  direction  planner.  It 
supports rich user interaction capabilities. 
An online banking application. The features include user 
authentication,  electronic  bank  statement  and  other 
banking services. 
A popular web-based email system. 
A  popular  news  page  which  contains  many  browser 
features,  
A  popular  movie-rental  application.  The  page  is  user-
specific. 
A web operating system. It provides the user a unix/linux-
style operating system inside the browser. It supports rich 
user interactions. 
A web-based email system. It provides the user interface 
of Microsoft Outlook in the browser. The user interaction 
capabilities of Outlook Web Access are similar to those of 
Microsoft Outlook.  
A popular technology-related news website. It is similar to 
a blogging site. 
As  stated  earlier,  if  the  accenting  was  not  performed 
comprehensively  in  all  legitimate  execution  paths,  normal 
browser functionalities would be broken because scripts could not 
be correctly deaccented and compiled. To verify the transparency 
of  our  implementation,  our  modified  IE  executable  has  been 
tested  on  many  web  applications.  Table  1  shows  a  number  of 
representative  examples.  We  intentionally  selected  the  web 
applications with rich user interaction capabilities in order to test 
the  transparency  of  the  mechanism.  We  observed  that  all  these 
applications run properly in our IE executable.  
In  addition  to  the  popular  web  applications,  we  conducted 
another test to verify that our mechanism is fully transparent to 
legitimate  cross-frame  communications:  the  attacks  discussed 
earlier  are  interesting  and  convoluted  scenarios  to  accomplish 
illegitimate cross-frame communications. In our transparency test, 
each attack scenario was converted into a legitimate cross-frame 
access scenario by loading all frames with pages from the domain 
http://payroll.  Therefore,  each  previous  attack  script  became  a 
script containing convoluted but legitimate cross-frame accesses. 
We observed that all these scripts ran successfully, and all cross-
frame  accesses  happened  as  expected.  This  is  a  good  evidence 
that 
script  accenting  mechanism  does  not  affect 
communications conforming to the same-origin policy. 
6.4  Performance 
the 
As  described  previously, 
the  accenting  mechanism 
is 
performed in two situations: (1) When a frame sends a script to 
another frame. The performance overhead incurred by our code is 
negligible  in  this  situation  because  it  simply  applies  an  XOR 
primitive  on  every  4-byte  word in a  string. This  is  insignificant 
compared  to  the  runtime  overhead  for  the  sending,  receiving, 
compiling and merging of the script. (2) When a script queries the 
name  of  a  DOM  object.  Name  querying  happens  frequently 
during  the  execution  of  a  script.  We  perform  an  accenting 
operation  and  a  de-accenting  operation  for  every  query,  which 
may  incur  noticeable  performance  overhead.  Intuitively,  the 
overhead should not be significant because every name query is 
made  through  a  deep  stack  of  function  calls  from  jscript.dll  to 
mshtml.dll, which is already a non-trivial operation. To measure 
the  upper  bound  of  the  performance  overhead,  we  queried 
window.document.body.innerText  for  400,000  times. 
The execution times for the original IE and our modified IE are 
17.812  seconds  and  18.374  seconds,  respectively.  The  observed 
performance overhead is 3.16%.  
n
i
e
m
Ti
n
o
i
t
a
z
i
l
a
i
t
i
n
s
d
n
o
c
e
s
i
l
l
i
M
I
e
g
a
P
400
300
200
100
0
www.google.com map.google.com map.live.com
Our IE executable
Original IE executable
slashdot.com
Figure 8: Page Initialization Times With and Without Script 
Accenting 
Note that this is the worst-case result, because the test is a 
stress test that does nothing but querying names. To estimate how 
the performance overhead affects the end-to-end browsing time, 
we measured the page initialization time of popular websites. The 
initialization  time  includes  the  page  downloading  and  the 
execution  of  the  main  script  on  the  page.  The  measurement  is 
made  by  subscribing  a 
the 
recording 
function 
time 
to 
BeforeNavigate  and  the  NavigateComplete  events  of 
the  browser  [12].  For  each  page,  we  measured  50  times.  The 
result is shown in Figure 8, where we see the standard deviations 
much larger than the differences between the average numbers for 
the original IE executable and our IE executable. We believe that 
the differences are caused by network conditions, and the script 
accenting  mechanism  has  almost  no  effect  on  user’s  browsing 
experience.     
7.  CONCLUSIONS  
Browsers’ isolation mechanisms are critical to users’ safety 
and  privacy  on  the  web.  Achieving  proper  isolations,  however, 
has proven to be difficult. Historical data show that even for well-
defined  isolation  policies,  the  current  enforcement  mechanisms 
can be surprisingly error-prone. Browser isolation bugs have been 
exploited  on  most  major  browser  products.  To  the  best  of  our 
knowledge, this is the first focused academic study of real-world 
browser isolation bugs.  
the  attack 
in 
We  analyzed  the  implementation  of  IE’s  domain-isolation 
mechanism  and  the  previously  reported  attacks.  The  analysis 
showed 
involve  complicated 
HTML/script  behaviors 
the 
function  aliasing,  the  excessive  expressiveness  of  navigation 
methods, the semantics of user events and IE’s interactions with 
other system components, which are very difficult to anticipate by 
the developers.  
scenarios 
the  navigation  mechanism, 
In this paper, we proposed the script accenting technique as 
a  light-weight  transparent  defense  against  these  attacks.  A 
prototype  has  been  implemented  on  IE.  The  evaluation  showed 
that all known attacks were defeated because of the mismatch of 
the accents of the accessor frame and the accessee frame. We also 
showed  that  the  mechanism  is  fully  transparent  to  existing  web 
applications. Despite a 3.16% worse-case performance overhead, 
the measurement of end-to-end browsing time did not show any 
noticeable slowdown. 
that 
The  basic  idea  of  the  accenting  is  that  the  origin  identities 
can be piggybacked on communications at the interfaces between 
different system components without affecting their internal logic. 
This can be a general idea to apply in other isolation mechanisms. 
For example, even within a frame, the browser needs to enforce 
domain isolation for XML objects and XMLHTTPRequest objects, 
whose domains may be different from the domain of the frame. In 
addition to its current implementation on IE, we think the same 
idea can be applied on other browsers if they have well-defined 
interfaces between their HTML engines and script engines. More 
broadly, non-browser platforms need to enforce domain isolation 
as  well.  For  example,  CLR  is  the  runtime  environment  for 
the  .NET  framework  [18]  and  Application  Domain  is  a  security 
infrastructure  in  CLR.  We  speculate  that  the  idea  of  accenting 
might also be applicable to platforms like CLR.  
ACKNOWLEDGEMENTS 
We thank our colleagues Emre Kiciman and Helen J. Wang 
for valuable discussions and suggestions. Anonymous reviewers 
provided insightful feedbacks to help improve the quality of the 
paper. We also thank our shepherd Dan Boneh for instructing us 
towards  the  final  version.  Jose  Meseguer  helped  us  better 
understand the concept of non-interference.  
REFERENCES: 
[1]  Firefox Cross-Frame Vulnerabilities. Security Focus 
Vulnerability Database. Bug IDs: 10877, 11177, 12465, 
12884, 13231, 20042. http://www.securityfocus.com/ bid 
[2]  Opera Cross-Frame Vulnerabilities. Security Focus 
Vulnerability Database. Bug IDs: 3553, 4745, 6754, 8887, 
10763. http://www.securityfocus.com/bid 
[3]  Netscape Navigator Cross-Frame Vulnerabilities. Security 
Focus Vulnerability Database. Bug IDs: 11177, 13231. 
http://www.securityfocus.com/bid 
[4]  A. Clover. CSS visited pages disclosure, 2002. 
http://seclists.org/lists/bugtraq/2002/Feb /0271.html. 
[5]  Don Box. Essential COM. ISBN 0-201-63446-5. Addison 
Wesley. 
[6]  Richard S. Cox, Jacob G. Hansen, Steven D. Gribble and 
Henry M. Levy: "A Safety-Oriented Platform for Web 
Applications," IEEE Symposium on Security and Privacy, 
2006 
[7]  Douglas Crockford. "JSONRequest," http://www. 
json.org/JSONRequest.html 
[8]  E. W. Felten and M. A. Schneider, “Timing attacks on web 
privacy,” in Proc.ACM Conference on Computer and 
Communications Security, 2000 
[9]  J. A. Goguen and J. Meseguer, “Security policies and 
security models,” in Proc. 1982 IEEE Symposium on 
Security and Privacy 
[10] Collin Jackson, Andrew Bortz, Dan Boneh, and John C. 
Mitchell. "Protecting Browser State from Web Privacy 
Attacks," in Proc. the 15th ACM World Wide Web 
Conference, Edinburgh, Scotland, 2006. 
[11] Martin Johns. "SessionSafe: Implementing XSS Immune 
Session Handling," in Proc. the 11th European Symposium 
on Research in Computer Security, Hamburg, Germany, 
September, 2006 
[12] MSDN Online. http://msdn.microsoft.com 
[13] The "Javascript:" Protocol. http://www.webreference. 
com/js/column35/protocol.html 
[14] Benjamin Livshits and Monica S. Lam. "Finding Security 
Vulnerabilities in Java Applications with Static Analysis," in 
Proc. Usenix Security Symposium, Baltimore, Maryland, 
August 2005. 
[15] Wei Xu, Sandeep Bhatkar and R. Sekar. "Taint-Enhanced 
Policy Enforcement: A Practical Approach to Defeat a Wide 
Range of Attacks," in Proc. the 15th USENIX Security 
Symposium, Vancouver, BC, Canada, July 2006. 
[16] The XMLHttpRequest Object. W3C Working Draft 27 
September 2006. http://www.w3.org/TR/ XMLHttpRequest/ 
[17] Cross-site scripting. http://en.wikipedia.org/wiki/Cross 
_site_scripting 
[18] Common Language Runtime (CLR). MSDN Online. 
http://msdn2.microsoft.com/en-us/netframework/aa497 
266.aspx