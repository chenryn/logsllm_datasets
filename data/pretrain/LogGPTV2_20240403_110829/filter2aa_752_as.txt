#include  
#include  
#include  
#include  
#include  
#include  
#include  
#define FILE_LENGTH 0x100 
/* 在从 low 到 high 的范围中返回一个平均分布的随机数 */ 
int random_range (unsigned const low, unsigned const high) 
{ 
  unsigned const range = high - low + 1; 
  return low + (int) (((double) range) * rand() / (RAND_MAX + 1.0)); 
} 
int man (int argc, char* const argv[]) 
{ 
  int fd; 
  void* file_memory; 
  /* 为随机数发生器提供种子 */ 
  srand (time (NULL)); 
  /* 准备一个文件使之长度足以容纳一个无符号整数 */ 
www.AdvancedLinuxProgramming.com 
89
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
  fd = open (argv[1], O_RDWR | O_CREAT, S_IRUSR | S_IWUSR); 
  lseek (fd, FILE_LENGTH+1, SEEK_SET); 
  write (fd, "", 1); 
  lseek (fd, 0, SEEK_SET); 
  /* 创建映射内存 */ 
  file_memory = mmap (0, FILE_LENGTH, PROT_WRITE, MAP_SHARED, fd, 
0); 
  close (fd); 
  /* 将一个随机整数写入映射的内存区域 */ 
  sprintf((char*) file_memory, "%d\n", random_range (-100, 100)); 
  /* 释放内存块（不是必需，因为程序即将退出而映射内存将被自动释放） */ 
  munmap (file_memory, FILE_LENGTH); 
  return 0; 
} 
上面的 mmap-write 程序打开了一个指定的文件（如果不存在则创建它）。传递给 open
的第二个参数表明以读写模式创建文件。（译者注：原文为第三个参数，疑为笔误。）因为我
们不知道文件的长度，我们利用 lseek 确保文件具有足够容纳一个整数的长度，然后将游
标移动到文件的开始位置。 
程序在将文件映射到内存之后随即关闭了文件描述符，因为我们不再需要通过这个描述
符操作文件。随后程序将一个随机整数写入映射内存，从而也写入了文件内容本身；之后程
序取消了内存映射。对 munmap 的调用不是必须的，因为 Linux 会在程序结束的时候自动取
消全部内存映射。 
代码列表 5.6 （mmap-read.c）从文件映射内存中读取一个整数，然后将其倍增 
#include  
#include  
#include  
#include  
#include  
#include  
#define FILE_LENGTH 0x100 
int main (int argc, char* const argv[]) 
{ 
  int fd; 
  void* file_memory; 
  int integer; 
  /* 打开文件 */ 
www.AdvancedLinuxProgramming.com 
90
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
  fd = open (argv[1], O_RDWR, S_IRUSR | S_IWUSR); 
  /* 创建映射内存 */ 
  file_memory = mmap (0, FILE_LENGTH, PROT_READ | PROT_WRITE, 
MAP_SHARED, fd, 0); 
  close (fd); 
  /* 读取整数，输出，然后将其倍增 */ 
  sscanf (file_memory, "%d", %integer); 
  printf ("value: %d\n", integer); 
  sprintf ((char*) file_memory, "%d\n", 2 * integer); 
  /* 释放内存（非必须，因为程序就此结束）*/ 
  munmap (file_memory, FILE_LENGTH); 
  return 0; 
} 
上面的 mmap-read 程序从文件中读取一个整数值，将其倍增并写回到文件中。首先它
以读写模式打开文件。因为我们确信文件足以容纳一个整数，我们不必像前面的程序那样使
用 lseek。程序从内存中用 sscanf 读取这个值，然后用 sprintf 将值写回内存中。 
这里是某次运行这个程序的结果。它将文件/tmp/integer-file 映射到内存。 
  % ./mmap-write /tmp/integer-file 
  % cat /tmp/integer-file 
  42 
  % ./mmap-read /tmp/integer/file 
  value: 42 
  % cat /tmp/integer-file 
  84 
我们可以看到，程序并没有调用 write 就将数字写入了文件，同样也没有用 read 就
将数字读回。注意，仅出于演示的考虑，我们将数字转换为字符串进行读写（通过使用
sprintf 和 sscanf）——一个内存映射文件的内容并不要求为文本格式。你可以在其中存
取任意二进制数据。 
5.3.3 对文件的共享访问 
不同进程可以将同一个文件映射到内存中，并借此进行通信。通过指定 MAP_SHARED
标志，所有对映射内存的写操作都会直接作用于底层文件并且对其它进程可见。如果不指定
这个标志，Linux 可能在将修改写入文件之前进行缓存。 
除了使用 MAP_SHARED 标志，你也可以通过调用 msync 强制要求 Linux 将缓存的内
容写入文件。它的前两个参数与 munmap 相同，用于指明一个映射内存块。第三个参数可以
接受如下标志位： 
· MS_ASYNC——计划一次更新，但是这次更新未必在调用返回之前完成。 
· MS_SYNC——立刻执行更新；msync 调用会导致进程阻塞直到更新完成。 
MS_SYNC 和 MS_ASYNC 不能同时使用。 
· MS_INVALIDATE——其它所有进程对这个文件的映射都会失效，因此它们可以
www.AdvancedLinuxProgramming.com 
91
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
看到被修改过的值。 
例如，要更新一块从 mem_addr 开始的、长度为 mem_length 的共享内存块需要使用
如下调用： 
msync (mem_addr, mem_length, MS_SYNC | MS_INVALIDATE); 
与使用共享内存一样，使用文件映射内存的程序之间必须遵循一定的协议以避免竞争状
态的发生。例如，可以通过一个信号量协调多个进程一块内存映射文件的并发访问。除此之
外你还可以使用第八章 8.3 节“fcntl：锁定与其它文件操作”中介绍的方法对文件进行读
写锁定。 
5.3.4 私有映射 
在 mmap 中指定 MAP_PRIVATE 可以创建一个写时复制（copy-on-write）区域。所有对
映射区域内存内容的修改都仅反映在当前程序的地址空间中；其它进程即使映射了同一个文
件也不会看到这些变化。与普通情况下直接写入所有进程共享的页面中的行为不同，指定
MAP_PRIVATE 进行映射的进程只将改变写入一份私有副本中。该进程随后执行的所有读写
操作都针对这个副本进行。 
5.3.5 mmap 的其它用途。 
系统调用 mmap 还可以用于除进程间通信之外的其它用途。一个常见的用途就是取代
read 和 write。例如，要读取一个文件的内容，程序可以不再显式地读取文件并复制到内
存中，而是将文件映射到地址空间然后通过内存读写操作来操作文件内容。对于一些程序而
言这样更方便，也可能具有更高的效率。 
许多程序都使用了这样一个非常强大的高级技巧：将某种数据结构（例如各种 struct 
结构体的实例）直接建立在映射内存区域中。在下次调用过程中，程序将这个文件映射回内
存中，此时这些数据结构都会恢复到之前的状态。不过需要注意的是，这些数据结构中的指
针都会失效，除非这些指针都指向这个内存区域内部并且这个内存区域被特意映射到与之前
一次映射位置完全相同的地址。 
另一个相当有用的技巧是将设备文件/dev/zero 映射到内存中。这个文件，将在第六
章“设备” 6.5.2 节“/dev/zero”中介绍到的，将自己表现为一个无限长且内容全部为 0
字节的文件。对/dev/zero 执行的写入操作将被丢弃，因此由它映射的内存区域可以用作
任何用途。自定义的内存分配过程经常通过映射/dev/zero 以获取整块经过初始化的内存。 
5.4 管道 
管道是一个允许单向信息传递的通信设备。从管道“写入端”写入的数据可以从“读取
端”读回。管道是一个串行设备；从管道中读取的数据总保持它们被写入时的顺序。一般来
说，管道通常用于一个进程中两个线程之间的通信，或用于父子进程之间的通信。 
在 shell 中，| 符号用于创建一个管道。例如，下面的程序会使 shell 创建两个子进程，
一个运行 ls 而一个运行 less： 
% ls | less 
Shell 同时还会创建一个管道，将运行 ls 的子进程的标准输出连接到运行 less 的子进
程的标准输入。由 ls 输出的文件名将被按照与发送到终端时完全相同的顺序发送到 less
的标准输入。 
管道的数据容量是有限的。如果写入的进程写入数据的速度比读取进程消耗数据的速度
www.AdvancedLinuxProgramming.com 
92
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
更快，且管道无法容纳更多数据的时候，写入端的进程将被阻塞，直到管道中出现更多的空
间为止。换言之，管道可以自动同步两个进程。 
5.4.1 创建管道 
要创建一个管道，请调用 pipe 命令。提供一个包含两个 int 值的数组作为参数。Pipe
命令会将读取端文件描述符保存在数组的第 0 个元素而将写入端文件描述符保存在第 1 个
元素中。举个例子，考虑如下代码： 
int pipe_fds[2]; 
int read_fd; 
int write_fd; 
pipe (pipe_fds); 
read_fd = pipe_fds[0]; 
write_fd = pipe_fds[1]; 
对文件描述符 write_fd 写入的数据可以从 read_fd 中读回。 
5.4.2 父子进程之间的通信 
通过调用 pipe 得到的文件描述符只在调用进程及子进程中有效。一个进程中的文件描
述符不能传递给另一个无关进程；不过，当这个进程调用 fork 的时候，文件描述符将复制
给新创建的子进程。因此，管道只能用于连接相关的进程。 
列表 5.7 中的程序中，fork 产生了一个子进程。子进程继承了指向管道的文件描述符。
父进程向管道写入一个字符串，然后子进程将字符串读出。实例程序将文件描述符利用
fdopen 函数转换为 FILE *流。因为我们使用文件流而不是文件描述符，我们可以使用包括
printf 和 scanf 在内的标准 C 库提供的高级 I/O 函数。 
代码列表 5.7 （pipe.c）通过管道与子进程通信 
#include  
#include  
#include  
/* 将 COUNT 份 MESSAGE 的副本写入 STREAM，每次写入之后暂停 1 秒钟 */ 
void writer (const char* message, int count, FILE* stream) 
{ 
  for (; count > 0; --count) { 
    /* 将消息写入流，然后立刻发送 */ 
    fprintf (stream, "%s\n", message); 
    fflush (stream); 
    /* 休息，休息一会儿 */ 
    sleep (1); 
www.AdvancedLinuxProgramming.com 
93
  } 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
} 
/* 从流中读取尽可能多的随机字符串 */ 
void reader (FILE* stream) 
{ 
  char buffer[1024]; 
  /* 从流中读取直到流结束。 fgets 会不断读取直到遇见换行或文件结束符。 */ 