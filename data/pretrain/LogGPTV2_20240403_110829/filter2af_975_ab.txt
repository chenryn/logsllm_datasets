            print(message)
    process = frida.get_remote_device().attach("com.tencent.mm")
    script = process.create_script(jscode)
    script.on("message",message)
    script.load()
    sys.stdin.read()
首先发送一个纯文本pyq
可以看到hook返回的值是9
再发一个纯图片动态
可以看到返回值是0
在这里有一个奇怪的现象，就是如果是发表文字动态的话（长按右上角照相机），那么hook返回的值立刻就返回到了终端上面，但是图片的话并不是，而是要选择完内容之后才返回的。所以可以猜测视频的值就是14。
这里实际测试一下
发现值确实为14
因为本菜鸟没怎么发过pyq，所以为了考虑其他可能性，还尝试了：文字+图片、文字+视频的pyq，结果返回值就是和图片、视频一致。本来还想测试图片+视频的返回值，没想到图片和视频不能同时发（憨憨一个）
**小结一下：  
9：纯文本动态  
0：纯图片、图片+文字动态  
14：纯视频、视频+文字动态  
**
####  4.0.2 方法分析
找到了不同this.wUI对应的值，接下来就要找到不同类型的动态对应的方法。
还是回到ai这个函数中，可以找到一段switch case的代码。这里就是对不同类型的pyq进行不同的处理。
首先找到case 9，也就是处理纯文本动态的地方。可以看到此时用的是ag这个方法
对比case0和case14,也就是图片和视频的方法，发现都调用了MU这个方法
结合实际发动态判断类型的时候也是，如果是文字动态，那么长按摄像头就可以判断出是文字动态，但是图片和视频动态却需要当具体的文件选择之后才能判断。符合真实情况。所以猜测MU这个函数中有对图片和视频进行判断。所以跟进MU这个函数。果不其然，所以可以得到
**视频图片动态调用的方法是ak，视频动态调用的方法是af**
**  
总结一下：  
文字动态类型值为9，对应的调用方法：com.tencent.mm.plugin.sns.ui.ag**
**图片动态类型值为0，对应的调用方法：com.tencent.mm.plugin.sns.ui.ak**
**视频动态类型值为14，对应的调用方法：com.tencent.mm.plugin.sns.ui.af**
####  4.0.3 参数分析
通过上述的分析可以知道，pyq动态基本上都是a方法，所以回到onMenuItemClick，看看a方法的参数，可以发现这里的this.desc是第四个参数，并且还有一些诸如privated之类的参数，联想实际动态发送，猜测可能是发送动态的权限设置
仔细分析一下前后的代码，根据这些参数名有一些猜测，比如private有可能就是动态的权限设置，this.desc可能是文字描述，getAtList可能是@的好友名单吧。其他的就不是很清楚了。所以为了搞清楚这些参数的具体含义，需要继续使用frida进行hook
为了简单起见，这里就以文字动态的调用方法com.tencent.mm.plugin.sns.ui.ag来写hook代码。当每次用户发送完pyq之后，会将参数的返回值回显在终端上面。完整代码如下：
    import frida
    import sys
    jscode ='''
    Java.perform(function(){
    var ag = Java.use('com.tencent.mm.plugin.sns.ui.ag');
    var ag_a = ag.a.overload("int","int","org.b.d.i","java.lang.String","java.util.List","com.tencent.mm.protocal.protobuf.blw","java.util.LinkedList","int","boolean","java.util.List","com.tencent.mm.pointers.PInt","java.lang.String","int","int");
    ag_a.implementation = function(isPrivate,syncFlag2,twitterAccessToken,desc,atList,location,list1,pasterLen,bool1,list2,pint1,str1,num1,num2){
        var ret = ag_a.call(this,isPrivate,syncFlag2,twitterAccessToken,desc,atList,location,list1,pasterLen,bool1,list2,pint1,str1,num1,num2);
        console.log("************Basic Info************");
        console.log("isPrivate = " + isPrivate);
        console.log("syncFlag2 = " + syncFlag2);
        console.log("twitterAccessToken = " + twitterAccessToken);
        console.log("desc = " + "'" + desc + "'");
        if(atList.size()>0){
            for(var i=0;i<atList.size();i++){
                console.log("atList[" + i + "] = " + atList.get(0));
            }
        }
        if(location != null){
            if(location.CsI.value != null){
                console.log("location.CsI = " + location.CsI.value)
            }
             if(location.CsJ.value != null){
                console.log("location.CsJ = " + location.CsJ.value)
            }
             if(location.Dnw.value != null){
                console.log("location.Dnw = " + location.Dnw.value)
            }
             if(location.Dnx.value != null){
                console.log("location.Dnx = " + location.Dnx.value)
            }
             if(location.wUK.value != null){
                console.log("location.wUK = " + location.wUK.value)
            }
             if(location.wUM.value != null){
                console.log("location.wUM = " + location.wUM.value)
            }
             if(location.country != null){
                console.log("location.country = " + location.country.value)
            }
        }
        console.log("list1 = " + list1);
        console.log("pasterLen = " + pasterLen);
        console.log("bool1 = " + bool1);
        if(list2 != null){
            console.log("list2 = " + list2.size());
        }
        else{
            console.log("list2 = " + list2);
        }
        console.log("pint1 = " + pint1.value.value);
        console.log("str1 = " + str1);
        console.log("num1 = " + num1);
        console.log("num1 = " + num1);
        return ret;
    }
    }
    );
    '''
    def message(message,data):
        if message["type"] == 'send':
            print("[*] {0}".format(message["payload"]))
        else:
            print(message)
    process = frida.get_remote_device().attach("com.tencent.mm")
    script = process.create_script(jscode)
    script.on("message",message)
    script.load()
    sys.stdin.read()
首先对于位置参数进行测试，发pyq的时候设置一下位置
可以看到，将地址设置在了利生写字楼（我也不知道这是哪），终端回显的信息如下：
猜测是经纬度，在在线网站上，搜索这个地址，得到基本相同的经纬度（不完全一样可能是地点还是有一点偏差）
接着对@用户参数进行测试，可以看到这里存储的@用户的微信ID(这里通过测试发现一个结论：微信在创建的时候有一个初始的微信号，都是wxid_xxxx之类的，非常难记，于是乎微信用户有一次机会修改自己的微信号，但是在这里测试发现，得到的还是初始的那个微信号，所以微信服务器应该还是按照原始的wxid进行处理的)
最后对谁可以看进行测试。总体来看公开、部分可见和部分不可见都是0，私密设为1。理论上应该有一个列表用来记录可见或不可见的人，这里就没有继续研究下去了，感兴趣的师傅可以进行一下完善
**  
最后可以得到如下结果  
privated(int)：动态是否私密：0公开，1私密**  
 **  
desc(String)：朋友圈的文本**  
 **  
AtList(List)：@人的wxid**  
 **  
Location(com.tencent.mm.protocal.protobuf.blw)：定位信息  
**
###  4.1 文字动态分析
通过之前的分析可以知道文字动态调用的方法是com.tencent.mm.plugin.sns.ui.ag。跟进去看看能否调用，发现有Activity类型的参数。Activity类型的参数是很难构造的，所以放弃构造com.tencent.mm.plugin.sns.ui.ae类来调用a方法。
于是直接去看a方法，看能不能找到有用的东西。由于是文字动态，所以我们着重关注传入的文本，即com.tencent.mm.plugin.sns.ui.SnsUploadUI类的desc成员，在a方法中它是第4个参数：发现第四个参数str只用到了一次，就是str传给了azVar.ans
这个azVar也是在a方法中声明的，这边使用2这个参数传入az这个方法就能创建azVar。这里就不分析这个参数的含义了。在使用的时候传入同样的参数即可
在a方法的结尾有一个commit的方法，猜测有可能就是发布朋友圈的方法
跟到commit中看一下
之后可以写一段代码来测试一下能否使用脚本来发送文本pyq，以下是完整代码：
    # -*- coding: UTF-8 -*-    import frida
    import sys
    jscode ='''
    if(Java.available)
    {
        Java.perform(function(){
            var az_class = Java.use("com.tencent.mm.plugin.sns.model.az");
            var desc = "文本朋友圈";
            var azInstance = az_class.$new(2);
            azInstance.ans(desc);
            azInstance.commit();
        });
    }
    '''
    def message(message,data):
        if message["type"] == 'send':
            print("[*] {0}".format(message["payload"]))
        else:
            print(message)
    process = frida.get_remote_device().attach("com.tencent.mm")
    script = process.create_script(jscode)
    script.on("message",message)
    script.load()