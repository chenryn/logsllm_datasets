        delta = (x1t - x0t) * margin
    build/lib.linux-x86_64-2.7/matplotlib/tests/test_axes.py::test_pyplot_axes
      /build/matplotlib-2.2.2/build/lib.linux-x86_64-2.7/matplotlib/cbook/deprecation.py:107: MatplotlibDeprecationWarning: Using pyplot.axes(ax) with ax an Axes argument is deprecated. Please use pyplot.sca(ax) instead.
        warnings.warn(message, mplDeprecation, stacklevel=1)
    build/lib.linux-x86_64-2.7/matplotlib/tests/test_image.py::test_empty_imshow[make_norm2]
      /build/matplotlib-2.2.2/build/lib.linux-x86_64-2.7/matplotlib/colors.py:1133: RuntimeWarning: invalid value encountered in greater
        masked = np.abs(a) > self.linthresh
    build/lib.linux-x86_64-2.7/matplotlib/tests/test_image.py::test_full_invalid
      /build/matplotlib-2.2.2/build/lib.linux-x86_64-2.7/matplotlib/image.py:405: UserWarning: Warning: converting a masked element to nan.
        dv = (np.float64(self.norm.vmax) -
      /build/matplotlib-2.2.2/build/lib.linux-x86_64-2.7/matplotlib/image.py:406: UserWarning: Warning: converting a masked element to nan.
        np.float64(self.norm.vmin))
      /build/matplotlib-2.2.2/build/lib.linux-x86_64-2.7/matplotlib/image.py:412: UserWarning: Warning: converting a masked element to nan.
        a_min = np.float64(newmin)
      /build/matplotlib-2.2.2/build/lib.linux-x86_64-2.7/matplotlib/image.py:417: UserWarning: Warning: converting a masked element to nan.
        a_max = np.float64(newmax)
      /build/matplotlib-2.2.2/build/lib.linux-x86_64-2.7/matplotlib/colors.py:916: UserWarning: Warning: converting a masked element to nan.
        dtype = np.min_scalar_type(value)
      /usr/lib/python2.7/dist-packages/numpy/ma/core.py:716: UserWarning: Warning: converting a masked element to nan.
        data = np.array(a, copy=False, subok=subok)
    -- Docs: http://doc.pytest.org/en/latest/warnings.html
python 2.7.15 debug flavor:
    =================================== FAILURES ===================================
    _______________ test_save_animation_smoketest[pillow-movie.gif] ________________
    self = 
    func =  at 0x7f4fd42b1e28>, when = 'call'
        def __init__(self, func, when):
            #: context of invocation: one of "setup", "call",
            #: "teardown", "memocollect"
            self.when = when
            self.start = time()
            try:
    >           self.result = func()
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:189: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    >   return CallInfo(lambda: ihook(item=item, **kwds), when=when)
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:175: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = , args = ()
    kwargs = {'item': }
    notincall = set([])
        def __call__(self, *args, **kwargs):
            if args:
                raise TypeError("hook calling supports only keyword arguments")
            assert not self.is_historic()
            if self.argnames:
                notincall = set(self.argnames) - set(['__multicall__']) - set(
                    kwargs.keys())
                if notincall:
                    warnings.warn(
                        "Argument(s) {} which are declared in the hookspec "
                        "can not be found in this hook call"
                        .format(tuple(notincall)),
                        stacklevel=2,
                    )
    >       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:617: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    hook = 
    methods = [, , ]
    kwargs = {'item': }
        def _hookexec(self, hook, methods, kwargs):
            # called from all hookcaller instances.
            # enable_tracing will set its own wrapping function at self._inner_hookexec
    >       return self._inner_hookexec(hook, methods, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:222: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    hook = 
    methods = [, , ]
    kwargs = {'item': }
        self._inner_hookexec = lambda hook, methods, kwargs: \
            hook.multicall(
                methods, kwargs,
    >           firstresult=hook.spec_opts.get('firstresult'),
            )
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:216: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    item = 
        def pytest_runtest_call(item):
            _update_current_test_var(item, 'call')
            try:
    >           item.runtest()
    /usr/lib/python2.7/dist-packages/_pytest/runner.py:106: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
        def runtest(self):
            """ execute the underlying test function. """
    >       self.ihook.pytest_pyfunc_call(pyfuncitem=self)
    /usr/lib/python2.7/dist-packages/_pytest/python.py:1171: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = , args = ()
    kwargs = {'pyfuncitem': }
    notincall = set([])
        def __call__(self, *args, **kwargs):
            if args:
                raise TypeError("hook calling supports only keyword arguments")
            assert not self.is_historic()
            if self.argnames:
                notincall = set(self.argnames) - set(['__multicall__']) - set(
                    kwargs.keys())
                if notincall:
                    warnings.warn(
                        "Argument(s) {} which are declared in the hookspec "
                        "can not be found in this hook call"
                        .format(tuple(notincall)),
                        stacklevel=2,
                    )
    >       return self._hookexec(self, self._nonwrappers + self._wrappers, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:617: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    hook = 
    methods = [, ]
    kwargs = {'pyfuncitem': }
        def _hookexec(self, hook, methods, kwargs):
            # called from all hookcaller instances.
            # enable_tracing will set its own wrapping function at self._inner_hookexec
    >       return self._inner_hookexec(hook, methods, kwargs)
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:222: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    hook = 
    methods = [, ]
    kwargs = {'pyfuncitem': }
        self._inner_hookexec = lambda hook, methods, kwargs: \
            hook.multicall(
                methods, kwargs,
    >           firstresult=hook.spec_opts.get('firstresult'),
            )
    /usr/lib/python2.7/dist-packages/pluggy/__init__.py:216: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    pyfuncitem = 
        @hookimpl(trylast=True)
        def pytest_pyfunc_call(pyfuncitem):
            testfunction = pyfuncitem.obj
            if pyfuncitem._isyieldedfunction():
                testfunction(*pyfuncitem._args)
            else:
                funcargs = pyfuncitem.funcargs
                testargs = {}
                for arg in pyfuncitem._fixtureinfo.argnames:
                    testargs[arg] = funcargs[arg]
    >           testfunction(**testargs)
    /usr/lib/python2.7/dist-packages/_pytest/python.py:147: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    tmpdir = local('/tmp/pytest-of-pbuilder/pytest-1/test_save_animation_smoketest_6')
    writer = 'pillow', output = 'movie.gif'
        @pytest.mark.parametrize('writer, output', WRITER_OUTPUT)
        def test_save_animation_smoketest(tmpdir, writer, output):
            try:
                # for ImageMagick the rcparams must be patched to account for
                # 'convert' being a built in MS tool, not the imagemagick
                # tool.
                writer._init_from_registry()
            except AttributeError:
                pass
            if not animation.writers.is_available(writer):
                pytest.skip("writer '%s' not available on this system" % writer)
            fig, ax = plt.subplots()
            line, = ax.plot([], [])
            ax.set_xlim(0, 10)
            ax.set_ylim(-1, 1)
            dpi = None
            codec = None
            if writer == 'ffmpeg':
                # Issue #8253
                fig.set_size_inches((10.85, 9.21))
                dpi = 100.
                codec = 'h264'
            def init():
                line.set_data([], [])
                return line,
            def animate(i):
                x = np.linspace(0, 10, 100)
                y = np.sin(x + i)
                line.set_data(x, y)
                return line,
            # Use temporary directory for the file-based writers, which produce a file
            # per frame with known names.
            with tmpdir.as_cwd():
                anim = animation.FuncAnimation(fig, animate, init_func=init, frames=5)
                try:
                    anim.save(output, fps=30, writer=writer, bitrate=500, dpi=dpi,
    >                         codec=codec)
    build/lib.linux-x86_64-2.7-pydebug/matplotlib/tests/test_animation.py:174: 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    self = 
    filename = 'movie.gif'
    writer = , fps = 30
    dpi = 100.0, codec = 'mpeg4', bitrate = 500, extra_args = None, metadata = None
    extra_anim = None, savefig_kwargs = {}
        def save(self, filename, writer=None, fps=None, dpi=None, codec=None,
                 bitrate=None, extra_args=None, metadata=None, extra_anim=None,
                 savefig_kwargs=None):
            '''Saves a movie file by drawing every frame.
                Parameters
                ----------
                filename : str
                    The output filename, e.g., :file:`mymovie.mp4`.
                writer : :class:`MovieWriter` or str, optional
                    A `MovieWriter` instance to use or a key that identifies a
                    class to use, such as 'ffmpeg'. If ``None``, defaults to
                    :rc:`animation.writer`.
                fps : number, optional
                   Frames per second in the movie. Defaults to ``None``, which will use
                   the animation's specified interval to set the frames per second.
                dpi : number, optional
                   Controls the dots per inch for the movie frames.  This combined with
                   the figure's size in inches controls the size of the movie.  If
                   ``None``, defaults to :rc:`savefig.dpi`.
                codec : str, optional
                   The video codec to be used. Not all codecs are supported
                   by a given :class:`MovieWriter`. If ``None``, default to
                   :rc:`animation.codec`.
                bitrate : number, optional
                   Specifies the number of bits used per second in the compressed
                   movie, in kilobits per second. A higher number means a higher
                   quality movie, but at the cost of increased file size. If ``None``,
                   defaults to :rc:`animation.bitrate`.