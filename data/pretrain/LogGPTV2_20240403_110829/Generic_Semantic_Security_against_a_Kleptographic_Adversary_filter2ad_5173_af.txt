bW ‚Üê W RGimpl(1Œª)
 RGimpl
execute phase
A
A
C
Œ≤ ‚Üê {impl,spec}
for i = 1 to q
ri ‚Üê RGŒ≤(1Œª)
(cid:48)
bC := 1 if Œ≤ = Œ≤
bC := 0 otherwise


1q
r1, . . . , rq -
(cid:48)
Œ≤
Figure 11: Game for stego-free randomness generation with trusted amalgamation.
26
A.2 Stego-free randomized algorithms with public input distributions
spec,RG1
DeÔ¨Ånition A.2. For a randomize algorithm G, consider a speciÔ¨Åcation Gspec := (RGspec,dGspec), where
RGspec := (RG0
spec, Œ¶spec), and dGspec is deterministic. We say such speciÔ¨Åcation Gspec is stego-
free with a trusted amalgamation in the oÔ¨Ñine watchdog model, if there exists an oÔ¨Ñine ppt watchdog
W, for any ppt adversary A playing the following game (see Figure 12) with challenger C, such that,
either,
(cid:12)(cid:12)(cid:12)Pr[bC = 1]‚àí 1
2
AdvA is negligible, or, DetW,A is non-negligible.
(cid:12)(cid:12)(cid:12), and, DetW,A(1Œª) =
(cid:12)(cid:12)(cid:12)Pr[W Gimpl(1Œª) = 1]‚àí Pr[W Gspec(1Œª) = 1]
(cid:12)(cid:12)(cid:12) ,
where AdvA(1Œª) =
A
A
test phase
W
bW ‚Üê W Gimpl,IG(1Œª)
 Gimpl,IG
execute phase
C
Œ≤ ‚Üê {impl,spec}
D = {x1, . . . , xt}
for i = 1 to q
mi ‚Üê IG(1Œª)
for j = 1 to t
ri,j ‚Üê RGŒ≤(1Œª)
yi,j = dGimpl(ri,j, xj, mi)

1q
(cid:48)
bC := 1 if Œ≤ = Œ≤
bC := 0 otherwise

Œ≤
{yi,j}i‚àà[q],j‚àà[t]-
(cid:48)
Figure 12: Game for stego-free randomized algorithm with trusted amalgamation.
instance generator, and D is a poly-size input domain.
IG is the
27
A.3 Subversion resistant symmetric-key encryption with long messages
DeÔ¨Ånition A.3. For any randomized symmetric-key encryption scheme, consider a speciÔ¨Åcation Espec :=
(KGspec,Encspec, Decspec). We say speciÔ¨Åcation Espec is subversion resistant with a trusted addition
and amalgamation in the oÔ¨Ñine watchdog model, if there exists an oÔ¨Ñine ppt watchdog W, for any
ppt adversary A, playing the game deÔ¨Åned in Figure 13, either,
where AdvA(1Œª) = |Pr[bC = 1]‚àí 1
|, and DetW,A(1Œª) = |Pr[W Eimpl(1Œª) = 1]‚àí Pr[W Espec(1Œª) = 1]|,
2
AdvA is negligible, or, DetW,A is non-negligible.
A
A
test phase
W
bW ‚Üê W Eimpl(1Œª)
 Eimpl
execute phase
C
K ‚Üê KGimpl(1Œª)
for i = 1 to q
(cid:48)
(cid:48)
i = Encimpl(K, m
c
(cid:48)
(cid:48)
1, . . . , m
 m
q
(cid:48)
(cid:48)
(cid:48)
c
1, . . . , c
q
(cid:48)
-
(cid:48)
i)
b ‚Üê {0,1}
c = Encimpl(K, mb)
 m0, m1
c
-
(cid:48)(cid:48)
(cid:48)(cid:48)
(cid:48)(cid:48)
1 , . . . , m
q
 m
(cid:48)(cid:48)
(cid:48)(cid:48)
(cid:48)(cid:48)
c
1 , . . . , c
q
-
(cid:48)(cid:48)
i )
(cid:48)
b

for i = 1 to q
(cid:48)(cid:48)
(cid:48)(cid:48)
i = Encimpl(K, m
c
(cid:48)
bC := 1 if b = b
bC := 0 otherwise
Figure 13: Subversion-resistant symmetric-key encryption with trusted addition.
28
A.4 Subversion resistant public key encryption with long messages
DeÔ¨Ånition A.4. For any public key encryption scheme, consider a speciÔ¨Åcation Espec := (KGspec,
Encspec,Decspec). We say speciÔ¨Åcation Espec is subversion resistant with a trusted addition and
amalgamation in the oÔ¨Ñine watchdog model, if there exists an oÔ¨Ñine ppt watchdog W, for any ppt
adversary A, such that, at least one of the following conditions hold in the game deÔ¨Åned in Figure 14:
where AdvA(1Œª) = |Pr[bC = 1]‚àí 1
|, and DetW,A(1Œª) = |Pr[W Eimpl(1Œª) = 1]‚àí Pr[W Espec(1Œª) = 1]|.
2
DetW,A is non-negligible, or, AdvA is negligible,
test phase
W
bW ‚Üê W Eimpl(1Œª)
 Eimpl
execute phase
A
A
C
(cid:48)
(pk, sk) ‚Üê KGimpl(1Œª)
for i = 1 to q
‚Üê Encimpl(pk, m
(cid:48)
c
i
pk
-
(cid:48)
(cid:48)
1, . . . , m
q
(cid:48)
 m
(cid:48)
(cid:48)
c
1, . . . , c
q
(cid:48)
-
(cid:48)
i)
b ‚Üê {0,1}
c = Encimpl(pk, mb)
for i = 1 to q
(cid:48)(cid:48)
(cid:48)(cid:48)
c
i
‚Üê Encimpl(pk, m
(cid:48)
bC := 1 if b = b
bC := 0 otherwise
 m0, m1
c
-
(cid:48)(cid:48)
(cid:48)(cid:48)
(cid:48)(cid:48)
1 , . . . , m
 m
q
(cid:48)(cid:48)
(cid:48)(cid:48)
(cid:48)(cid:48)
c
1 , . . . , c
q
-
(cid:48)(cid:48)
i )
(cid:48)
b

Figure 14: Subversion-resistant public key encryption supporting large messages.
29
B An attack on single-source randomness primitives
Subverted randomness generation attack: In the following attack on pubic key encryption, the
adversary honestly implements the key generation and decryption, and only subverts the encryp-
tion algorithm. Suppose the speciÔ¨Åcation of the (public-key) encryption algorithm is deÔ¨Åned as
Encspec := (RGspec,dEncspec, Œ¶spec). The meaning of each component is self-evident: RGspec generates
uniformly random bits r0, the function Œ¶spec ‚Äúcleans‚Äù r0 to produces the Ô¨Ånal random bits r, and,
Ô¨Ånally, dEncspec takes the random bits r, the encryption key pk, and the message bit as inputs and
produces a ciphertext C.
The attack: The adversary A Ô¨Årst randomly chooses a backdoor z, and prepares the subverted
implementation Enczimpl := (RGimpl,dEncimpl, Œ¶impl) with the backdoor embedded. In particular,
RGimpl := RGzimpl carries out rejection sampling to ensure that the ciphertext encrypting 0 and
the ciphertext encrypting 1 can be distinguished by applying a PRF (using z as the key); the
algorithms dEncimpl and Œ¶impl are honestly implemented (that is, identical to the speciÔ¨Åcations).
Later the adversary A can easily learn secret information (indeed, the plaintext) from the ciphertext
generated by the subverted algorithms by applying the PRF (using her backdoor z as the key). See
Figure 15 for detailed description.
RGzimpl(pk):
Repeat:
r0 ‚Üê RGspec
c0 = dEncspec(pk,0; Œ¶spec(r0))
c1 = dEncspec(pk,1; Œ¶spec(r0))
Until: PRF(z, c0) = 0‚àß PRF(z, c1) = 1
Return r0
A(z, C):
b = PRF(z, C)
Return b
Figure 15: Subverted randomness generation and the message recovery algorithms
Security analysis. Due to the rejection sampling condition, it is easy to see that the adversary
deÔ¨Åned in Figure 15 can determine the plaintext bit perfectly from the ciphertext. As for the
detection probability, the randomness output by RGspec is a uniform Œª-bit string; in contrast, the
randomness output by RGimpl is a string selected uniformly from a (random) subset S of {0,1}Œª
(determined by the PRF). The subset S consists of all strings that carry 0 and 1 to ciphertexts
satisfying a criterion given by the PRF. Let us think of the PRF as a random function, that means the
rejection sampling condition will be satisÔ¨Åed with probability 1/4 for each r0 uniformly sampled.
Essentially, we can consider S as a random subset of {0,1}Œª with (expected) size 2(cid:96)‚àí2. If there is
no collision when W asks q queries, then the q diÔ¨Äerent bit strings observed by W can come from
either of the whole space {0,1}Œª or a subset S (with size larger than q). This means conditioned on
no collision, no watchdog can tell apart RGimpl from RGspec. Using the total probability theorem,