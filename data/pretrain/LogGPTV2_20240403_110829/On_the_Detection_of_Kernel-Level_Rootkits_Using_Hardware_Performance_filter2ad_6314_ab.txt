of multiple attack mechanisms and exhibit more than one
type of functionality. By making use of specialized, syn-
thetic rootkits, we are able to more precisely link impacted
performance counters with the speciﬁc attack mechanism or
functionality that causes the impact.
Our synthetic rootkits focus on three major attack mech-
anisms that are found in rootkits on the Windows 7 plat-
form: I/O Request Packet (IRP) Hooking, System Service
Dispatch Table (SSDT) Hooking and Direct Kernel Object
Manipulation (DKOM). Table 1 gives a brief summary of the
ﬁve synthetic rootkits used in this work and each of them is
described in more detail below.
SR1: Network port ﬁltering using IRP Hooking SR1
makes use of a technique called I/O Request Packet (IRP)
hooking, which is a type of function pointer hijacking. Each
device in Windows is represented as a device object in the
OS managed by the I/O Manager. Whenever communica-
tion is supposed to take place between the device and an
application, an I/O request packet is created and it passes
through an abstraction layer. The abstraction layer con-
sists of several drivers that each perform diﬀerent functions
(for example, the disk driver deals with disk read/write re-
quests). For each driver, there are several major functions
that are called whenever an IRP passes through the driver.
These functions are listed in a table of function pointers.
When a rootkit performs IRP hooking, it replaces one or
more of these function pointers with a pointer to a custom-
built, malicious version of the function that has been loaded
by the rootkit into OS memory (in a loadable, kernel-level
driver, for example). The malicious versions of these func-
tions can then modify the contents of the IRP or further
divert control-ﬂow as required.
Using this technique, we have hooked a function pointer
in the network driver in order to ﬁlter out all the outgo-
ing network connections on port 80. To accomplish this,
we needed to hook within the driver loaded from TCPIP.SYS
and ﬁlter the list of active network connections before it is
passed from the kernel to the application layer (where it is
ultimately displayed to the user). The driver object, \\DE-
VICE\\TCP, further points to a table containing the major
IRPs. The IRP we focus is IRP_MJ_DEVICE_CONTROL, which
originally calls an IRP handler (the default IRP handler).
The IRP handler returns the requested network data.
In IRP_MJ_DEVICE_CONTROL, we look at the IOCTL_TCP_QUERY
control code which returns the list of network ports currently
in use to netstat.exe.
To ﬁlter the results, IRP_MJ_DEVICE_CONTROL is shifted to
point to our custom-designed IRP handler. The custom IRP
handler further calls the default handler that returns the
required data and ﬁlls the output buﬀer. Once the required
data returns, we can process the data in the output buﬀer
according to our needs. To hide outgoing connections on
port 80 all that needs to be done is to change the status
value of each object in the buﬀer related to port 80 to 0.
After the parsing is done, we send it to the requester. Fig. 2
illustrates IRP hooking.
SR2: File Hiding using IRP Hooking Our next syn-
thetic rootkit, SR2, uses the same attack mechanism as SR1,
but in this case it is used to hide a ﬁle rather than a network
connection.
A ﬁle system ﬁlter driver can ﬁlter I/O operations for one
or more ﬁle systems or ﬁle system volumes. Depending on
the nature of the driver, ﬁlter can mean log, observe, modify,
or even prevent. Typical applications for ﬁle system ﬁlter
drivers include anti-virus utilities, encryption programs, and
hierarchical storage management systems [17].
In this technique, we obtain a handler on the IRP function
IRP_MJ_CREATE. This function helps us with retrieving the
485Figure 1: Data Collection Process
(a) Before IRP Hooking
(a) Before SSDT Hooking
(b) After IRP Hooking
Figure 2: Visualizing IRP Hooking
(b) After SSDT Hooking
Figure 3: Visualizing SSDT Hooking
name of the ﬁles as soon as they are opened. Every time
IRP_MJ_CREATE returns it sends back all the details of the
ﬁle opened to our custom-function. Once we have the ﬁle
name we can check the extension of the ﬁle and not let it
proceed. In our case, we hide ﬁles with the xml extension
under the Windows directory.
SR3: Process Hiding using SSDT Hooking While
IRP hooking involves modifying function pointers in various
drivers, another location in Windows that can be hooked
is the System Service Dispatch Table (SSDT), which is the
Windows equivalent of the Linux system call table. This
table consists of pointers to service functions exposed to
ntoskrnl.exe. This table is accessed whenever a system
service is requested.
Hooking a function pointer in the SSDT allows an attacker
to eﬀectively replace any of the OS system calls. Fig. 3
illustrates this.
We applied this technique in SR3 for the purpose of hiding
processes. We hook the service function NtQuerySystemIn-
formation() with a malicious version that calls the original
version in order to retrieve the list of running processes and
then ﬁlters it prior to returning the results back to the user
space application that made the request. NtQuerySystem-
Information() returns the list of processes as a linked list.
To ﬁlter the given process (by name), the process is discon-
nected from the linked list. Finally, the new, ﬁltered linked
list is returned.
Our aim using this technique is that the processes se-
lected by the rootkit to be hidden should be invisible to
applications such as the Task Manager or Process Explorer.
In addition, they should not be available for Windows API
functions and other process APIs.
SR4: File Hiding using SSDT Hooking Our SR4
rootkit applies SSDT hooking for the purpose of hiding ﬁles.
We hook the service function called NtQueryDirectoryFile().
Whenever the above mentioned function is called our ma-
licious version is executed instead of the original function.
The way ﬁles are hidden is very similar to the way processes
are hidden in SR3. When the NtQueryDirectoryFile() rou-
tine is called it returns a structure array that represents a
ﬁle. The two ﬁelds required are the FileName and NextFile-
Offset. To hide a ﬁle by its name, the NextFileOffset of
the current ﬁle is set to the NextFileOffset address of the
ﬁle structure to be removed. Similar to SR3, the ﬁltered
structure array is then returned to user space.
Speciﬁcally, SR4 hides ﬁles with names starting with com.
SR5: Direct Kernel Object Manipulation Direct Ker-
nel Object Manipulation (DKOM) is a rootkit technique
that involves hiding things without the need to hook func-
tion pointers or execute injected code. This is very diﬀerent
from the IRP and SSDT hooking attacks described thus far.
In order to accomplish this, the rootkit directly modiﬁes OS
data structures in memory in order to remove references to
items that the user intends to hide.
SR5 uses DKOM to hide processes. Under Windows, ev-
ery active process is associated with a struct EPROCESS in
kernel memory. This struct consists of a ListEntry (a linked
list) variable with the name ActiveProcessLink. This Lis-
tEntry further consists of two entries, FLINK and BLINK. The
FLINK member of this struct points to the next entry (pro-
cess) in the doubly-linked list while the BLINK member points
to the previous entry (process). In order to hide a speciﬁc
process with a given PID, all we have to do is disconnect
it from the doubly-linked list. To do this, we set the FLINK
of the process preceding the process we want to hide to the
FLINK of the process we are hiding. The same is done with
the BLINK of the next process, which is set to the BLINK of
the process being hidden. This involves the direct modi-
ﬁcation of kernel memory, and the rootkit can completely
unload itself after those modiﬁcations occur.
OS (Windows 7)ProfilingBenchmarkIntel VTuneSyntheticRootkitsHPCTracesFeatureSelectionFeatures486Table 2: Trace Background Workload Conditions
Name Description
Quiet
The proﬁling benchmark is executed and there
are no background processes running (except
those required by Windows).
Noisy 1 The proﬁling benchmark is executed and there
are two background processes running: Down-
loading a large ﬁle over HTTP and listing of
the Windows directory in a loop.
3.2 Proﬁling Benchmark
One unique aspect of rootkits when compared to other
types of malware is that after they are installed, they do
not execute in the context of their own process. Rootkits
that use hooking, for example, have their code executed in
the context of whatever process requested the relevant ﬁle
or process information from the OS kernel. This means that
in order to properly collect the HPC data for a rootkit, we
cannot proﬁle the rootkit itself.
Instead, we must proﬁle
another application that causes the rootkit functionality to
be triggered.
In this work we construct a proﬁling benchmark that col-
lects data from the OS that a rootkit might like to hide. The
benchmark calls a variety of system programs to gather po-
tentially hidden information. The system programs called
by the benchmark are: netstat, ping, tasklist, open,
taskkill, and dir.
The benchmark is a continuous loop, but we limit its run-
time in our tests to be about 45 seconds.
3.3 Testing Platform
Our test platform (where rootkit infection is performed)
is a Windows 7 virtual machine running on VMWare Work-
station version 10. We chose VMWare because it allows for
easy rollback of the OS after infection (which allows us to
easily repeat experiments) and because it has support for
virtualizing HPCs. All of the security measures on the sys-
tem were manually disabled.
In order to capture the HPC traces of the proﬁling bench-
mark, Intel VTune 2015 [11] was used. VTune allows ap-
plications to be run while capturing a conﬁgurable set of
HPCs.
In order to allow us to collect many traces quickly, we
ran our system on multiple computers with diﬀerent CPUs:
Both Intel Ivy Bridge and Intel Broadwell. Both types of
CPUs have full support for HPCs.
3.4 Gathering HPC Traces
For each of our synthetic rootkits, we infected the system
with the synthetic rootkit and then used VTune to capture
the HPC traces of the execution of our proﬁling benchmark.
A trace is made up of the ﬁnal HPC values captured after
the entire, 45 second run of the proﬁling benchmark. This
means the traces are not a time series, and no sampling is
performed. The raw value of each HPC at the end of the 45
second run is used. Even though every run of the benchmark
is ﬁxed at 45 seconds, minor variations in the number of
clock cycles per run were observed due to the other activity
on the system at the time.
In order to correct for this,
traces were scaled (through simple division) to ensure that
all traces are normalized to a ﬁxed number of clock cycles.
As mentioned previously, there are over 400 HPCs avail-
able to be captured. In order to reduce this number, we did
some initial rootkit proﬁling using our benchmark and cap-
tured all the HPCs supported by VTune and the hardware.
A number of the HPCs were zero for all of these initial tests,
and so we removed them from our list, after which 244 HPCs
remained.
Due to limitations in the hardware, only four diﬀerent
HPCs can be reliably captured simultaneously. This means
that in order to capture data for all 244 HPCs, the bench-
mark needs to be repeated 61 times, with each run capturing
4 diﬀerent HPCs. We then combine all of the HPC data to
produce one trace with all 244 HPCs.
In order to ensure a variety of background workloads dur-
ing trace capture, we made use of the two diﬀerent back-
ground workload conditions listed in Table 2. Whenever a
trace was captured, one of these two conditions was true. For
each testing condition and rootkit combination, 50 traces
were collected for a total of 500 infected traces. Given that
the proﬁling benchmark requires 45 seconds per execution,
and 61 executions are required to capture all 244 HPCs, it
takes about 45 minutes to capture one trace. To capture
all 500 traces requires a little over two weeks on a single
machine.
In addition, the same procedure is then repeated to gather
traces from a clean system which is not infected by any of
the rootkits. For the clean system we collect 300 additional
traces under each of the two testing conditions. This gives
us a total of 1100 traces.
3.5 Most Signiﬁcant HPCs
With the 500 traces collected from the ﬁve synthetic rootk-
its and 600 clean traces, the next step is to determine which
of the HPCs are most signiﬁcant for detecting each type of
rootkit.
For each synthetic rootkit, we determine the most sig-
niﬁcant HPCs using WEKA [8]. To select the attributes,
we use the Gain Ratio Attribute Evaluation Algorithm with
full-training set as the selection mode. Once we have the
results of the algorithm for each synthetic rootkit, we select
only the most signiﬁcant HPCs (HPCs with conﬁdence level
of 1).
Table 3 summarizes the results of our experiments. In to-
tal, we identify 16 unique HPCs that are the most signiﬁcant
with respect to the synthetic rootkits. There are a number
of observations that can be made from these results.
Synthetic rootkits that use the same mechanism have sig-
niﬁcant overlap in terms of the most signiﬁcant HPCs. SR1
and SR2 (IRP hooking) share 2/3 HPCs, while SR3 and
SR4 (SSDT hooking) share 9/12 HPCs. This is in contrast
to the sharing seen between rootkits with the same func-
tionality but diﬀerent mechanisms. SR2 and and SR4 both
perform ﬁle hiding, but do not share any of the most signif-
icant HPCs.
Also of interest, but not surprising, is that SR5, the DKOM
based rootkit, did not have any HPCs appear as signiﬁcant.
A DKOM based attack directly manipulates the kernel data
structures beforehand, meaning that no rootkit code exe-
cutes during the run of the proﬁling benchmark. This is a
strong indication that HPCs are not a suitable method for
detecting DKOM based attacks, and highlights a limitation
of using this approach for rootkit detection.
In order to visualize the traces, we applied Principal Com-
ponent Analysis (PCA) to our synthetic rootkit traces in or-
487Table 3: Most Signiﬁcant HPCs For Synthetic Rootkits
Mechanism Most Signiﬁcant HPCs
IRP Hooking
IRP Hooking
SSDT
Hooking
SSDT
Hooking
BR_INST_RETIRED.NEAR_TAKEN
BR_INST_RETIRED.NOT_TAKEN
BR_MISP_EXEC.ALL_BRANCHES
BR_INST_RETIRED.NEAR_TAKEN
BR_INST_RETIRED.NOT_TAKEN
ICACHE.IFETCH_STALL
BR_INST_RETIRED.NOT_TAKEN
BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET
BR_INST_RETIRED.NEAR_CALL_R3
MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_NONE_PS
L2_RQSTS.ALL_RFO
L2_LINES_OUT.DEMAND_DIRTY
L2_TRANS.L2_WB
L2_RQSTS.DEMAND_DATA_RD_HIT
L2_RQSTS.DEMAND_DATA_RD_MISS
L1D_PEND_MISS.PENDING_CYCLES
L2_RQSTS.ALL_PF
ICACHE.IFETCH_STALL
BR_INST_EXEC.TAKEN_INDIRECT_JUMP_NON_CALL_RET
MEM_LOAD_UOPS_L3_HIT_RETIRED.XSNP_NONE_PS
L2_RQSTS.ALL_RFO
L2_LINES_OUT.DEMAND_DIRTY
L2_TRANS.L2_WB
L2_RQSTS.DEMAND_DATA_RD_HIT