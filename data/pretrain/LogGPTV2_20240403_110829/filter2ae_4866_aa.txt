## 同源策略
### 什么是同源策略
同源策略(Same Origin Policy)是一种约定，是浏览器最基本也是最核心的安全功能。可以说Web是构建在同源策略的一种实现。
**浏览器的同源策略，限制了来自不同源的“document”或脚本，对当前“document”读取或设置某些属性。**  
SOP影响范围包括：普通的HTTP请求、XMLHttpRequest、XSLT、XBL。
### 判断是否同源
影响源的因素：
  * HOST
  * 域名或IP地址
  * 子域名
  * 端口
  * 协议
文件所在域不重要，重要的是文件解析加载所在的域。
URL | Outcome | Reason  
---|---|---  
 | success |  
 | success |  
 | failure | diffrent protocol  
 | failure | diffrent port  
 | failure | diffrent host  
## 跨域
### 业务环境中一些跨域场景
  1. 比如后端开发完一部分业务代码后，提供接口给前端用，在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问的问题。
  2. 程序员在本地做开发，本地的文件夹并不是在一个域下面，当一个文件需要发送ajax请求，请求另外一个页面的内容的时候，就会跨域。
  3. 电商网站想通过用户浏览器加载第三方快递网站的物流信息。
  4. 子站域名希望调用主站域名的用户资料接口，并将数据显示出来。
### 跨域方法
#### HTML标签
`   `等带`src`属性的标签都可以跨域加载资源，而不受同源策略的限制。  
每次加载时都会由浏览器发送一次GET请求，通过`src`属性加载的资源，浏览器会限制JavaScript的权限，使其不能读写返回的内容。
常见标签：
在CSS中，`@font-face`可以引入跨域字体。
#### document.domain
同一主域不同子域之间默认不同源，但可以设置`document.domain`为相同的高级域名来使不同子域同源。
`document.domain`只能向上设置更高级的域名，需要载入`iframe`来相互操作。
    //父域的运行环境是http://localhost:9092/
    //同样在部署在同一台服务器上的不同端口的应用也是适用的
#### window.name
window.name有一个奇妙的性质，  
页面如果设置了window.name，那么在不关闭页面的情况下，  
即使进行了页面跳转location.href=...，这个window.name还是会保留。
利用window.name的性质，我们可以在iframe中加载一个跨域页面。
这个页面载入之后，让它设置自己的window.name，  
然后再让它进行当前页面的跳转，跳转到与iframe外的页面同域的页面，  
此时window.name是不会改变的。
这样，iframe内外就属于同一个域了，且window.name还是跨域的页面所设置的值。
假设我们有3个页面，
> a.com/index.html  
>  a.com/empty.html  
>  b.com/index.html
（1）在a.com/index.html 页面中嵌入一个iframe，设置src为b.com/index.html  
（2）b.com/index.html 载入后，设置window.name，然后再使用location.href='a.com/empty.html'
跳转到与iframe外页面同域的页面中。  
（3）在a.com/index.html
页面中，就可以通过`$('iframe').contentWindow.name`来获取iframe内页面a.com/empty.html
的`window.name`值了，而这个值正是b.com/index.html 设置的。
#### window.postMessage
`window.postMessage(message, targetOrgin)`方法是html5新引进的特性。  
调用postMessage方法的window对象是指要接受消息的哪一个window对象，该方法的第一个参数message为要发送的消息，类型只能为字符串；第二个参数targetOrgin用来限定接收消息的那个window对象所在的域，如果不想限定域，可以使用通配符*。
需要接收消息的window对象，可是通过监听自身的message时间来获取传过来的消息，消息内容存储在该事件对象的data属性中。
#### location.hash
location.hash 方式跨域，是子框架具有修改父框架 src 的 hash 值，通过这个属性进行传递数据，且更改 hash
值，页面不会刷新。但是传递的数据的字节数是有限的。
详细参考：  
a.html欲与b.html跨域相互通信，通过中间页c.html来实现。
三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。  
具体实现步骤：一开始a.html给b.html传一个hash值，然后b.html收到hash值后，再把hash值传递给c.html，最后c.html将结果放到a.html的hash值中。
#### flash
flash有自己的一套安全策略，服务器可以通过crossdomain.xml文件来声明能被哪些域的SWF文件访问，SWF也可以通过API来确定自身能被哪些域的SWF加载。  
具体见：
#### JSONP
JSON with
Padding，就是利用script标签没有跨域限制的特性，使得网页可以从其他来源域动态获取Json数据。JSONP跨域请求一定需要对方的服务器支持才可以。
JSONP实现流程：  
1.定义一个 回调函数 handleResponse 用来接收返回的数据
    function handleResponse(data) {
        console.log(data);