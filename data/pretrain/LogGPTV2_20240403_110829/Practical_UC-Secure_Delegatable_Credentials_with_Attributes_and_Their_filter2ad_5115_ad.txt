over ℱsmt.
• 𝒫j, upon receiving ⟨σi , cpki⟩L
i =1 from 𝒫i over ℱsmt, verifies
Sibi−1.Verify1(cpki−1, σi , cpki , (cid:174)ai) for i = 1, . . . , L. It stores
cred ← (⟨σi , (cid:174)ai , cpki⟩L
i =1, cskL) in ℒcred. Output (DELEGATE,
sid, ssid, (cid:174)a1, . . . , (cid:174)aL,𝒫i).
:
Present. A user can present a credential she owns, while also
signing a message m. The disclosed attributes are described by
(cid:174)a1, . . . , (cid:174)aL. Let (cid:174)ai = ai,1, . . . , ai,n ∈ (A ∪ ⊥)n. If ai, j ∈ A, the user
shows it possesses this attribute. If ai, j = ⊥, the user does not show
the attribute. Let D be the set of indices of disclosed attributes, i.e.,
the set of pairs (i, j) where ai, j (cid:44) ⊥.
(3) 𝒫i, upon receiving input (PRESENT, sid, m, (cid:174)a1, . . . , (cid:174)aL) with
(cid:174)ai ∈ (Ai ∪ ⊥)ni for i = 1, . . . , L:
• Look up a credential cred = (⟨σi , (cid:174)a′
i =1, cskL) in ℒcred,
′ for i = 1, . . . , L. Abort if no such credential
such that (cid:174)ai ≼ (cid:174)ai
was found.
• Create an attribute token by proving knowledge of the cre-
i , cpki⟩L
dential:
at ← NIZK(cid:8)(σ1, . . . , σL, cpk1, . . . , cpkL, ⟨a
L
1 = Sibi−1.Verify1(cpki−1, σi , cpki , a
i =1
′
i, j⟩i(cid:60)D , tag) :
′
′
i,1, . . . , a
i,ni
∧ 1 = Sib.Verify2(cpkL, tag, m)(cid:9)
)
• Output (TOKEN, sid, at).
Verify. A user can verify an attribute token by verifying the zero
knowledge proof.
(4) 𝒫i, upon receiving input (VERIFY, sid, at, m, (cid:174)a1, . . . , (cid:174)aL):
• Verify the zero-knowledge proof at with respect to m and
(cid:174)a1, . . . , (cid:174)aL. Set f ← 1 if valid and f ← 0 otherwise.
• Output (VERIFIED, sid, f ).
4.3 Security of Πdac
We now prove the security of our generic construction.
Theorem 4.1. Our delegatable credentials protocol Πdac securely
realizes ℱdac (as defined in Section 3), in the (ℱsmt,ℱca,ℱcrs)-hybrid
model, provided that
• Sibi is a secure sibling signature scheme (as defined in Sec-
tion 2.5),
• NIZK is a simulation-sound zero-knowledge proof of knowl-
edge.
To prove Theorem 4.1, we have to show that there exists a simu-
lator 𝒮 as a function of 𝒜 such that no environment can distinguish
Πdac and 𝒜 from ℱdac and 𝒮. The full proof is given in Appendix A,
we present a proof sketch below.
Proof sketch. We sketch a satisfying simulator 𝒮 and argue
that with this simulator the real and ideal worlds are indistinguish-
able.
Setup. In the setup, ℱdac lets 𝒮 define algorithms Present and
Ver, and ℱdac will later use Present to generate attribute tokens. If
the issuer is honest, 𝒮 simiulates the issuer in the real world and
knows its secret key isk. If ℐ is corrupt, 𝒮 can extract isk from πisk,
which is a part of the issuer public key, using the CRS trapdoor
(decryption key). It defines Present to first issue a credential of
the desired level and containing the requested attributes using isk,
and to then prove knowledge of the credential as in the real world
algorithm. It defines Ver as the real world verification algorithm.
Delegate. If both the delegator and delegatee are honest, 𝒮 has
to simulate the real world protocol without knowing the attribute
values. In Πdac, delegation takes place over secure channel ℱsmt.
This allows 𝒮 to simulate with dummy attribute values. If the
delegator or delegatee is corrupt, 𝒮 learns all attribute values and
has all the information it needs to simulate the real world protocol.
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA690Present. Credential presentation is non-interactive, meaning that
there is no network communication to simulate for 𝒮. We do have
to argue that the output of the real world is indistinguishable from
the output in the ideal world. ℱdac first checks whether the user
has the required credential for this presentation and aborts if this
is not the case. In the real world, an honest signer also aborts if he
does not possess the required credential for a presentation. Then,
ℱdac computes the attribute token using Present, and only outputs
it if it verifies with Ver. This will always be the case for the Present
and Ver that 𝒮 defined: by completeness of the sibling signatures,
it will create valid signatures, and by completeness of the NIZK,
the resulting attribute token will be valid. This shows that the ℱdac
outputs an attribute token if and only if an honest signer would
output an attribute token.
The attribute tokens that ℱdac computed with Present differ
from the ones computed in the real world: a real world party reuses
one credential every time it signs, whereas Present creates a fresh
credential for every presentation. By witness indistinguishability
of NIZK, this is indistinguishable.
Verify. Verify again is non-interactive, so 𝒮 does not have to
simulate anything, but the outputs from the real and ideal world
should be indistinguishable. 𝒮 defined Ver as the real world verifica-
tion algorithm, so both worlds use the same verification algorithm.
There is one difference: ℱdac prevents forgeries. This difference is
indistinguishable under the unforgeability of the sibling signature
schemes and the soundness of NIZK proof system.
(cid:3)
5 A CONCRETE INSTANTIATION USING
PAIRINGS
We propose an efficient instantiation of our generic construction
based on the Groth-Schnorr sibling signatures SibGS that we intro-
duced in Sec. 2.5.
In the generic construction, we have a sibling signature scheme
Sibi for each delegation level i, where Sibi must sign the public
key of Sibi +1. Groth signature scheme uses bilinear group Λ =
(q, G1, G2, Gt, e, д1, д2). Recall that Groth1 signs messages in G1
with a public key in G2, while Groth2 signs messages in G2 with
a public key in G1. Therefore, we set Sib2n to SibGS1 and Sib2n+1
to SibGS2. This means that we have attribute sets1 A2n = G1 and
A2n+1 = G2.
In addition to the bilinear group, SibGS1 requires parameters
y1,1, . . . , y1,n+1 ∈ G1, where n is the maximum number of at-
tributes signed at an odd level (n = maxi =1,3, ...(ni)), and SibGS2
requires y2,1, . . . , y2,n+1 ∈ G2, for n the maximum number of at-
tributes signed at an even level (n = maxi =2,4, ...(ni)). ℱcrs provides
both the bilinear groups Λ and the yi, j values.
We consider Level-0 to be an even level and, therefore, the issuer
key pair is (ipk = дisk2 , isk). The issuer must prove knowledge of
its secret key isk in πisk such that isk is online extractable. This
extractability is required for the UC-security proof to work.
This can be achieved by verifiably encrypting the secret key to
a public key encryption key in the CRS using the techniques of
1Alternatively, one could define a single attribute set A for all levels and use in-
: A→G2, such as setting A = Zq and
: A→G1 and f2
jective functions f1
f1(a) = дa1 , f2(a) = дa2 ), but for ease of presentation we omit this step and work
directly with attributes in G1 and G2.
Camenisch and Shoup [11]. In the security proof, the simulator
controls the CRS and hence knows the decryption key, and can
therefore extract isk without rewinding.
If we only care about standalone security (rather than universal
composability) and do not require the online extraction property, it
is sufficient to prove πisk ← SPK{isk : ipk = дisk2 } from which the
secret key can be extracted in the proof using rewinding.
5.1 A Concrete Proof for the Attribute Tokens
What remains to show is how to efficiently instantiate the zero-
knowledge proof that constitutes the attribute tokens. Since we
instantiate Sib2i with SibGS1 and Sib2i +1 with SibGS2, we can
rewrite the proof we need to instantiate as follows.
at ← NIZK(cid:8)(σ1, . . . , σL, cpk1, . . . , cpkL, ⟨a
L
L
1 = SibGS1.Verify1(cpki−1, σi , cpki , a
1 = SibGS2.Verify1(cpki−1, σi , cpki , a
i =1,3, ...
i =2,4, ...
′
i, j⟩i(cid:60)D , tag) :
′
i,ni
′
i,1, . . . , a
)
)
∧ 1 = SibGSb.Verify2(cpkL, tag, m)(cid:9)
′
i,1, . . . , a
′
i,ni
i , s′
i,1, . . . , t′
i , t′
The proof has three parts: First, it proves all the odd-level creden-
tial links by proving that σi is valid using SibGS1.Verify1. Second,
it proves the even-level credential links by proving that σi verifies
with SibGS2.Verify1. Finally, it proves that the user signed message
m with SibGSb.Verify2, where b depends on whether L is even or
odd.
The abstract zero-knowledge proof can be efficiently instanti-
ated with a generalized Schnorr zero-knowledge proof. Let σi =
(ri , si , ti,1, . . . , ti,ni +1). First, we use the fact that Groth is random-
izable and randomize each signature to (r′
i,ni +1). As
r′
is now uniform in the group, we can reveal the value rather than
i
proving knowledge of it. Next, we use a Schnorr-type proof depicted
in Fig. 3 to prove knowledge of the s and t values of the signatures,
the undisclosed attributes, the credential public keys, and the cre-
dential secret key. The concrete zero-knowledge proof contains the
same parts as described for the abstract zero-knowledge proof. The
third part, proving knowledge of tag, is somewhat hidden. Recall
that we instantiate SibGSb.Verify2 with Schnorr signatures, which
means the signature is a proof of knowledge of cskL. This can effi-
ciently be combined with other two parts of the proof: instead of
proving knowledge of cpkL, we prove knowledge of cskL.
5.2 Optimizing Attribute Token Computation
There is a lot of room for optimization when computing zero-
knowledge proofs such as the one depicted in Fig. 3. We describe
how to efficiently compute this specific proof, but many of these
optimizations will be applicable to other zero-knowledge proofs in
pairing-based settings.
Computing attribute tokens. The pairing operation is the most
expensive operation in bilinear groups, so for the efficiency of the
scheme it is beneficial to minimize the amount of pairings computed.
We can use some optimizations in computing the zero-knowledge
Session C5:  Using BlockchainsCCS’17, October 30-November 3, 2017, Dallas, TX, USA691(cid:110)(⟨s
L
′
i , t
SPK
i =1,3, ...
L
i =2,4, ...
(cid:32)

j:(i, j)∈D
(cid:32)
e(y1,1, д2)(cid:2)e(д1, ipk)(cid:3)
(cid:2)e(y1,1, ipk)(cid:3)
i =1 = e(s

′
i, j⟩i =1, ...,L, j=1, ...,ni , ⟨ai, j⟩i(cid:60)D , ⟨cpki⟩i =1, ...,L−1, cskL) :
i(cid:44)1 ∧
−1
i(cid:44)L
i =1 = e(t
′
i,1, r
1Gt
−1
′
(cid:2)e(д1, д
′
i, j+1, r
j:(i, j)∈D
′
′
i , r
i)(cid:2)e(д
1 , cpki−1)(cid:3)
i)(cid:2)e(cpki , д
2 )(cid:3)
e(ai, j , д2)(cid:2)e(y1, j+1, ipk)(cid:3)
i =1 = e(t

(cid:2)e(y1, j+1, ipk)(cid:3)
2, j+1) ∧ 
j:(i, j)(cid:60)D
−1
2 ) ∧ 1Gt = e(r
′
i , t
1Gt
−1
i =1 = e(t
′
i,1)e(cpki−1, y
−1
1Gt = e(r
j:(i, j)(cid:60)D
e(д1, y2,1) = e(r
′
i , s
′
i)e(cpki−1, д
e(д1, ai, j) = e(r
′
i , t
′
i, j+1)e(cpki−1, y
−1
−1