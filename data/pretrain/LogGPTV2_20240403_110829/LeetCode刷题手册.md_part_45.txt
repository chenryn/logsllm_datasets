//初始化线段树，节点内的值都赋值为0，即计数为0
sort.Ints(sumArray)
// 排序是为了使得线段树中的区间 eft{ 
st.UpdateCount(prefixSum[i])
//插入的prefixsum[i］即是j
return 0
 res += st.Query(lower, upper)
res += st.Query(lower+prefixsum[i-1], upper+prefixsum[i-1]]
if tmp = lower {
if i == j{ 
} else{ 
 res++
[]swnu =+ du 
tmp = nums[i]
---
## Page 439
代码
这道题思路也是一样的，分别把奇数和偶数都放在2个链表中，最后首尾拼接就是答案。
解题思路
值放在另外一个链表中，最后2个链表首尾拼接一下就是答案。
这道题和第 86 题非常类型。第 86 题是把排在某个点前面的小值放在一个链表中，排在某个点后端的大
题目大意
Note:
Example 2: 
Example 1: 
time complexity.
(sapou)o pue Aaixalduos aeds (l)o u! un pinous weloud au 'aeld u!l op ot 1->3->5->6->4->7->NULL 
Output: 1->3->5->2->4->NULL
func oddEvenList(head *ListNode) *ListNode {
Input: 1->2->3->4->5->NULL
even := evenHead 
evenHead := &ListNode{val: O, Next: nil}
odd := oddHead 
oddHead := &ListNode{Val: O, Next: nil}
 type ListNode struct { 
 Definition for singly-linked list.
 Val int 
Next *ListNode
---
## Page 440
Example 2: 
Example 1: 
diagonally or move outside of the boundary (i.e. wrap-around is not allowed).
 From each cell, you can either move to four directions: left, right, up or down. You may NOT move 
 Given an integer matrix, find the length of the longest increasing path.
题目
329. Longest Increasing Path in a Matrix
Explanation: The longest increasing path is [1, 2, 6, 9].
output: 4 
Input: nums = 
[2,1,1]
[6,6,8],
[9,9,4],
return oddHead.Next
odd.Next = evenHead.Next 
even.Next = nil 
for head != nil {
count := 1 
}else { 
if count%2 == 1 
count++ 
head = head.Next
even = even.Next
even.Next = head
xan'ppo = ppo 
 odd.Next = head
---
## Page 441
代码
解题思路
动。你不能在对角线方向上移动或移动到边界外（即不允许环绕），
给定一个整数矩阵，找出最长递增路径的长度。对于每个单元格，你可以往上，下，左，右四个方向移
题目大意
func isInIntBoard(board [][]int, x, y int) boo］ {
·给出一个矩阵，要求在这个矩阵中找到一个最长递增的路径。路径有上下左右 4个方向。
func longestIncreasingPath(matrix [][]int) int {
package leetcode
+
not allowed.
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is
Output: 4 
Input: nums = 
"math"
mport 
return res
for i, v := range matrix {
for i := O; i 0 {
 return cache[x][y]
if isInIntBoard(board，nx,ny) {
nx := x + dir[i][0]
 return 0
ny := y + dir[i][1]
 count = max(count, searchPath(board, cache, board[x][y], nx, ny)+1)
6
6
###
---
## Page 443
代码
且 diff 在完成时将为零。最后判断一下 diff 是不是为 〇即可判断它是否是正确的二叉树的前序序列化。
null，我们将 diff 增加 2，因为它提供两个出度。如果序列化是正确的，则 diff 应该永远不会为负，并
indegree。当下一个节点到来时，我们将 diff减 1，因为这个节点提供了一个度。如果这个节点不为
我们开始构建这颗树，在构建过程中，我们记录出度和度之间的差异 diff =outdegree －
替了，所以肯定有 2 个孩子)；所有的 null结点只有 0 个出度，1 个入度(0 个孩子和1 个父亲)。
(除了root 结点)必然有 2 个出度，1个入度(2 个孩子和1 个父亲，孩子可能为空，但是这一题用"#"代
这道题有些人用栈，有些用栈的深度求解。换个视角。如果叶子结点是 null，那么所有非 null 的结点
解题思路
的可行算法。
给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下
题目大意
Example 3: 
 Example 2:
 Example 1: 
func isvalidserialization(preorder string) bool {
import "strings"
package leetcode
Output: false
Input: "9,#,#,1"
Output: false
Input: "1,#" 
output: true
Input: "9,3,4,#,#,1,#,#,2,#,6,#,#"
nodes, diff := strings.split(preorder, ","), 1
---
## Page 444
 Example 2:
Example 1: 
 Determine the maximum amount of money the thief can rob tonight without alerting the police.
automatically contact the police if two directly-linked houses were broken into on the same night.
tour, the smart thief realized that "all houses in this place forms a binary tree". It will
area, called the "root." Besides the root, each house has one and only one parent house. After a
The thief has found himself a new place for his thievery again. There is only one entrance to this
题目
337.HouseRobber Ill
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Output: 7
Input: [3,2,3,null,3,null,1] 
return diff == 0 
if diff0 
×&-× =>得到最低位的1
× =×＆（×-1）清零最低位的1 
x&1==1or==0，可以用 x&1 判断奇偶性，X&1>0 即奇数。
---
## Page 447
代码
解题思路
给定一个整数(32 位有符号整数)，请编写一个函数来判断它是否是 4的幂次方。
题目大意
Follow up: Could you solve it without loops/recursion?
Example 2: 
Example 1: 
Given an integer (signed 32 bits), write a function to check whether it is a power of 4.
题目
342. Power of Four
·判断一个数是不是 4 的 n 次方。
Output: false
+
Input: 5 
Output: true
Input: 16 
func countBits(num int) []int {
package leetcode 
么（2^n-1）或者（2^n+1）中一定有一个是3 的倍数。所以 4^n-1一定是 3 的倍数。
这一题最简单的思路是循环，可以通过。但是题目要求不循环就要判断，这就需要用到数论的知识
return bits
for i := l; i = 4 { 
return num > 0 && (num&(num-1)) == 0 && (num-1)%3 == 0
return num == 
if num%4 == 0 {
 num = num / 4
return false
else { 
---
## Page 449
Example 2: 
Example 1: 
You may assume all the characters consist of printable asci characters.
place with O(1) extra memory.
Do not allocate extra space for another array, you must do this by modifying the input array in-
Write a function that reverses a string. The input string is given as an array of characters char[.
题目
344. Reverse String
代码
Output: ["o","",""","e","h"] 
Input: ["h","e","l","l","o"] 
func integerBreak(n int) int {
●这一题的动态转移方程是 dp[i]= max(dp[i]，j *（i － j)，j* dp[i-j]]，一个数分解
·这一题是DP的题目，将一个数字分成多个数字之和，至少分为2个数字之和，求解分解出来的数
package leetcode
return dp[n]
dp[0]，dp[1] = 1， 1 
dp := make([]int, n+l)
字乘积最大是多少。
for i := l; i <= n; i++ {
dp[i-j] 下标小于i，所以 dp[i-j] 在计算 dp[i] 的时候一定计算出来了。
成  和i－j 两个数字，或者分解成  和 更多的分解数，更多的分解数即是 dp[i-j]，由于
for j := 1; j < i; j++ {
dp[i] = max(dp[i]，j*max(dp[i-j]，i-j))
// dp[i] = max(dp[i]，j ＊ (i － j)，j*dp[i-j]]
---
## Page 450
 Example 2:
 Example 1:
Write a function that takes a string as input and reverse only the vowels of a string.
345. Reverse Vowels of a String
题目
代码
这一题的解题思路是用2个指针，指针对撞的思路，来不断交换首尾元素，即可。
解题思路
题目要求我们反转一个字符串。
题目大意
Output: "holle"
Input: "hello"
package leetcode
Output: ["h","a","n","n","a","H"]
func reversestring(s []byte) {
Input: ["H","a","n","n","a","h"] 
Y
s[i]， s[j] = s[j]， s[i] 
j--
i++
---
## Page 451
代码
路一样。
这一题的解题思路是用2个指针，指针对撞的思路，来不断交换首尾元素，即可。这一题和第 344 题思
解题思路
题目要求我们反转字符串中的元音字母。需要注意字母大小写。
题目大意
func isVowels(s byte) bool {