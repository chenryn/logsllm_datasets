[37] Jan Pennekamp, Jens Hiller, Sebastian Reuter, Wladimir De la Cadena, Asya
Mitseva, Martin Henze, Thomas Engel, Klaus Wehrle, and Andriy Panchenko.
2019. Multipathing Traffic to Reduce Entry Node Exposure in Onion Routing. In
Proceedings of the 27th annual IEEE International Conference on Network Protocols
(ICNP). IEEE, Chicago, IL, USA.
[38] Mike Perry. 2011. Experimental Defense for Website Traffic Fingerprinting. https:
//blog.torproject.org/experimental-defense-website-traffic-fingerprinting. (Ac-
cessed: January 2020).
[39] The Tor Project. 2020. Tor Browser. https://www.torproject.org/projects/
torbrowser.html.en. (Accessed: March 2020).
[40] The Tor Project. 2020. Tor Metrics. https://metrics.torproject.org/. (Accessed:
[41] The Tor Project. 2020. Tor Rendezvous Specification ‚Äì Version 3. https://gitweb.
torproject.org/torspec.git/tree/rend-spec-v3.txt.
[42] Tobias Pulls and Rasmus Dahlberg. 2020. Website Fingerprinting with Website
Oracles. In Proceedings on Privacy Enhancing Technologies (PoPETS). Sciendo,
Montreal, Canada.
[43] Vera Rimmer, Davy Preuveneers, Marc Ju√°rez, Tom van Goethem, and Wouter
Joosen. 2018. Automated Website Fingerprinting through Deep Learning. In
Proceedings of the 25th Network and Distributed System Security Symposium (NDSS).
Internet Society, San Diego, CA, USA.
[44] Payap Sirinam, Mohsen Imani, Marc Juarez, and Matthew Wright. 2018. Deep Fin-
gerprinting: Undermining Website Fingerprinting Defenses with Deep Learning.
In Proceedings of the 25th ACM SIGSAC Conference on Computer and Communica-
tions Security (CCS). ACM, Toronto, ON, Canada.
[45] Payap Sirinam, Nate Mathews, Mohammad Saidur Rahman, and Matthew Wright.
2019. Triplet Fingerprinting: More Practical and Portable Website Fingerprinting
with N-Shot Learning. In Proceedings of the 26th ACM SIGSAC Conference on
Computer and Communications Security (CCS). ACM, London, United Kingdom.
[46] Michael Carl Tschantz, Sadia Afroz, Anonymous, and Vern Paxson. 2016. SoK:
Towards Grounding Censorship Circumvention in Empiricism. In Symposium on
Security and Privacy (S&P). IEEE, San Jose, CA, USA, 914‚Äì933.
[47] Tao Wang, Xiang Cai, Rishab Nithyanand, Rob Johnson, and Ian Goldberg. 2014.
Effective Attacks and Provable Defenses for Website Fingerprinting. In Proceed-
ings of the 24th USENIX conference on Security Symposium. USENIX Association,
San Diego, CA, USA.
[48] Tao Wang and Ian Goldberg. 2013. Improved Website Fingerprinting on Tor. In
Proceedings of the 12th ACM Workshop on Workshop on Privacy in the Electronic
March 2020).
Society (WPES). ACM, Berlin, Germany.
[49] Tao Wang and Ian Goldberg. 2015. On Realistically Attacking Tor with Web-
site Fingerprinting. In Proceedings on Privacy Enhancing Technologies (PoPETs).
Philadelphia, PA, USA.
[50] Tao Wang and Ian Goldberg. 2017. Walkie-Talkie: An Efficient Defense Against
Passive Website Fingerprinting Attacks. In Proceedings of the 26th USENIX con-
ference on Security Symposium. USENIX Association, Vancouver, BC, Canada.
[51] Charles Wright, Scott Coull, and Fabian Monrose. 2009. Traffic Morphing: An
Efficient Defense Against Statistical Traffic Analysis. In Proceedings of the 16th
Anual Network and Distributed System Security Symposium (NDSS). Internet
Society, San Diego, CA, USA.
[52] Junhua Yan and Jasleen Kaur. 2018. Feature Selection for Website Fingerprint-
ing. In 18th Privacy Enhancing Technologies Symposium (PETS). DE GRUYTER,
Barcelona, Spain, 200‚Äì219.
[53] L. Yang and F. Li. 2015. mTor: A Multipath Tor Routing Beyond Bandwidth
Throttling. In IEEE Conference on Communications and Network Security (CNS).
IEEE, Florence, Italy.
A OPTIMIZING BATCHED WEIGHTED
RANDOM STRATEGY
An important design choice for our novel splitting scheme BWR is
the size of each batch. Since some state-of-the-art WFP attacks rely
on features extracted from consecutive sequences of 30 to 40 Tor
cells within a given traffic trace [19, 47], we argue that the number
ùëõ of cells in a single batch should lie around those values in order
to disturb useful features. Based on this, we investigated different
intervals for ùëõ by using five entry ORs for each user‚Äôs multipath
connection and summarize the classification accuracy obtained for
each of these intervals in a closed-world scenario in Table 5.
Table 5: Accuracy (in %) for different intervals of the batch
size ùëõ needed in our BWR strategy.
k-FP
DF
Batch size ùëõ [30, 40]
16.05
8.36
6.70
4.75
CUMUL
ùëò-NN
[30, 90]
17.98
7.95
6.50
4.50
[50, 70]
13.46
6.58
4.63
3.15
[60, 80]
18.00
8.20
8.44
5.20
[90, 120]
17.76
6.70
7.31
4.80
We present the experimental results for four state-of-the-art
classifiers, k-FP, CUMUL, k-NN, and DF. As we can see, the most
promising results were obtained when uniformly sampling ùëõ from
the interval ùëõ ‚àà [50, 70]. Hence, we consider this interval as a good
choice and use it for all experiments in our work.
B SUPPORT OF HTTP RANGE OPTION
In its second mode of operation, TrafficSliver-App first needs to
determine whether an HTTP request can be decomposed into multi-
ple partial requests by verifying several conditions. To this end, the
response corresponding to a given request should possess a non-
empty body. This does not apply, for instance, for an HTTP HEAD
request and, thus, such requests cannot be split by our defense.
Next, the request should be idempotent, i.e., if the same request is
sent multiple times, this does not result in different responses [15].
Otherwise, consecutive partial requests might not correctly fetch
parts of the same object. An HTTP POST method is an example of
a non-idempotent request and, thus, does not support the range
option. Although an HTTP PUT request is idempotent and the
response corresponding to it can have a body, the range option is
not supported for this type of request. A reason for this is that the
body constitutes a confirmation of data uploaded or modified on
Table 6: HTTP methods whose resources are not splittable.
HTTP
method
HEAD
GET
PATCH
PUT
POST
OPTIONS
DELETE
Number of
Fraction of non-
requests splittable resources [%]
0.038
23.89
0.0004
0.016
4.1742
0.6111
0.0003
379
942,134
4
154
41,327
6,050
3
the server side only, i.e., it does not contain any resource download.
Thus, the range option is applicable only for HTTP GET requests
and is supported for them only. Furthermore, the web server needs
to support the range option requested via an HTTP GET method.
Many web servers do not support the range option as it is only
beneficial for the user. On the server side, the use of the range
option produces additional overhead as it increases the number of
requests to be handled for the same amount of data. Moreover, the
server should not enforce a compression for the given resource.
Due to the incompatibility of the range option with compression,
our defense disables a potential compression for each requested
resource. Nevertheless, some web servers ignore this and still com-
press the data. Finally, the size of each requested resource should
be known to correctly apply one of our splitting strategies (see
Section 6). Otherwise, our defense is not able to create multiple
partial requests.
In the following, we evaluate the extent to which the range op-
tion is adopted on the Web. To do this, we considered Alexa Top list
of the 100,000 most popular sites. We used the same experimental
setup presented in Section 7 to automatically visit the index pages of
these websites. We kept track of the HTTP requests and responses
exchanged during each page load and used them to retrieve infor-
mation about the size, the type, and the location of the requested
resources as well as the status codes indicating the accessibility
and splittability of each resource. We excluded web objects whose
HTTP responses indicated either a redirection or a client or server
error. In total, we collected 3,943,239 unique web resources after
visiting 60,054 accessible sites. In particular, 2,953,188 (74.89%) from
the collected web resources supported the HTTP range option.
Since our defense is able to split only those resources that are
requested via HTTP GET method, we further examined the type
of methods of those requests whose resources are not splittable.
Table 6 summarizes the obtained results. Based on the statistics
presented in the table, we observe that non-GET requests represent
only 1.22% of all sent requests. This, in turn, indicates the high
degree of applicability of our defense. On the other hand, still 23.89%
of all GET requests point to a non-splittable resource.
Unlike HTTPOS [30], the second mode of operation of our de-
fense depends mainly on the percentage of splittable web objects
within a singe website. Therefore, we further measured the support
of the HTTP range option for requests within a single website. To
do this, we computed the support rate either by taking into account
all resources needed to load a given website or by considering only
those resources which belong to the website. Websites often share
100
90
80
70
60
50
40
30
20
10
]
%
[
s
e
t
i
s
b
e
w
f
o
n
o
i
t
c
a
r
F
Number of resources (internal + external)
Number of resources (internal only)
Resource sizes (internal + external)
Resource sizes (internal only)
0
10
20
30
40
50
60
70
80
90
100
Fraction of splittable resources [%]
Figure 8: Complementary cumulative distribution function
(CCDF) for the fraction of splittable resources.
a significant part of their external embedded content. Therefore,
even if external resources within a website cannot be split, they
may not reveal any specific patterns for this website as the same
resources need to be fetched for many other websites. We com-
puted the support rate either by counting the number of splittable
(internal) resources and dividing it by the total number of (internal)
resources needed to load a given website or by summing the sizes
of the splittable (internal) resources and dividing it by the total size
of all (internal) resources of a website. Both metrics are equally
relevant to evaluate the feasibility of our defense in practice. Even
if the support of HTTP range requests with respect to the number
of splittable resources is limited, the size of the splittable resources
may represent a significant part of the whole website. This, in turn,
means that even if we have a large number of non-splittable re-
sources, they are too small and may be transmitted through a single
Tor cell without a need to be split.
Figure 8 shows the minimum support rate of the HTTP range
option when considering all resources within a website and only
those resources belonging to a given website. Here, we observe that
the support rate in terms of resource sizes is significantly higher
than the support rate in terms of the number of resources. While
50% of the websites contain at least 80% splittable resources, 80%
of the websites have splittable resources representing at least 80%
of the total website size. On the other hand, we need to consider
the fact that we do not always have a size information for each
collected resource. Overall, we observed 242,899 (6.16%) from all
collected web resources for which we did not obtain any data about
their size. When we consider only the resources belonging to a
given website, we see that 60% of the websites contain at least 90%
splittable internal resources. In terms of resources sizes, 80% of the
websites have splittable resources representing at least 90% of the
total website size. This indicates the higher percentage of splittable
resources, which contain unique patterns for a given website.
C AUTHORS‚Äô CONTRIBUTIONS
Both TrafficSliver defenses were proposed and designed by Andriy
Panchenko. The former version of TrafficSliver-Net was imple-
mented by Daniel Forster under guidance of Andriy Panchenko.
Further design details for TrafficSliver-Net were provided by Jens
Hiller, Jan Pennekamp, Wladimir De la Cadena, and Asya Mitseva.
The current version of TrafficSliver-Net was reimplemented by
Sebastian Reuter under guidance of Jens Hiller. Bandwidth and
latency performance evaluation of both TrafficSliver defenses and
comparison with related work was performed by Wladimir De la
Cadena with the support of Asya Mitseva. Complementary net-
work performance of TrafficSliver-Net was evaluated by Sebastian
Reuter under guidance of Jens Hiller. The traffic-splitting strategies
for TrafficSliver-Net were designed and implemented by Wladimir
De la Cadena in consultation with Andriy Panchenko and Asya
Mitseva. The training strategies for multiple malicious entry ORs
were suggested by Wladimir De la Cadena in consultation with
Andriy Panchenko, Asya Mitseva, Jens Hiller, and Jan Pennekamp.
TrafficSliver-App was implemented by Julian Filter under guidance
of Andriy Panchenko and Asya Mitseva and further extended by
Asya Mitseva. All traffic traces necessary for the evaluation were
collected by Asya Mitseva. The experiments with WFP classifiers
were conducted by Wladimir De la Cadena. The manuscript was
written by Asya Mitseva and Andriy Panchenko. It was further
reviewed by most and approved by all authors.