### References

1. Jan Pennekamp, Jens Hiller, Sebastian Reuter, Wladimir De la Cadena, Asya Mitseva, Martin Henze, Thomas Engel, Klaus Wehrle, and Andriy Panchenko. 2019. Multipathing Traffic to Reduce Entry Node Exposure in Onion Routing. In Proceedings of the 27th Annual IEEE International Conference on Network Protocols (ICNP). IEEE, Chicago, IL, USA.

2. Mike Perry. 2011. Experimental Defense for Website Traffic Fingerprinting. https://blog.torproject.org/experimental-defense-website-traffic-fingerprinting. (Accessed: January 2020).

3. The Tor Project. 2020. Tor Browser. https://www.torproject.org/projects/torbrowser.html.en. (Accessed: March 2020).

4. The Tor Project. 2020. Tor Metrics. https://metrics.torproject.org/. (Accessed: March 2020).

5. The Tor Project. 2020. Tor Rendezvous Specification – Version 3. https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt.

6. Tobias Pulls and Rasmus Dahlberg. 2020. Website Fingerprinting with Website Oracles. In Proceedings on Privacy Enhancing Technologies (PoPETS). Sciendo, Montreal, Canada.

7. Vera Rimmer, Davy Preuveneers, Marc Juárez, Tom van Goethem, and Wouter Joosen. 2018. Automated Website Fingerprinting through Deep Learning. In Proceedings of the 25th Network and Distributed System Security Symposium (NDSS). Internet Society, San Diego, CA, USA.

8. Payap Sirinam, Mohsen Imani, Marc Juarez, and Matthew Wright. 2018. Deep Fingerprinting: Undermining Website Fingerprinting Defenses with Deep Learning. In Proceedings of the 25th ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, Toronto, ON, Canada.

9. Payap Sirinam, Nate Mathews, Mohammad Saidur Rahman, and Matthew Wright. 2019. Triplet Fingerprinting: More Practical and Portable Website Fingerprinting with N-Shot Learning. In Proceedings of the 26th ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, London, United Kingdom.

10. Michael Carl Tschantz, Sadia Afroz, Anonymous, and Vern Paxson. 2016. SoK: Towards Grounding Censorship Circumvention in Empiricism. In Symposium on Security and Privacy (S&P). IEEE, San Jose, CA, USA, 914–933.

11. Tao Wang, Xiang Cai, Rishab Nithyanand, Rob Johnson, and Ian Goldberg. 2014. Effective Attacks and Provable Defenses for Website Fingerprinting. In Proceedings of the 24th USENIX Conference on Security Symposium. USENIX Association, San Diego, CA, USA.

12. Tao Wang and Ian Goldberg. 2013. Improved Website Fingerprinting on Tor. In Proceedings of the 12th ACM Workshop on Privacy in the Electronic Society (WPES). ACM, Berlin, Germany.

13. Tao Wang and Ian Goldberg. 2015. On Realistically Attacking Tor with Website Fingerprinting. In Proceedings on Privacy Enhancing Technologies (PoPETs). Philadelphia, PA, USA.

14. Tao Wang and Ian Goldberg. 2017. Walkie-Talkie: An Efficient Defense Against Passive Website Fingerprinting Attacks. In Proceedings of the 26th USENIX Conference on Security Symposium. USENIX Association, Vancouver, BC, Canada.

15. Charles Wright, Scott Coull, and Fabian Monrose. 2009. Traffic Morphing: An Efficient Defense Against Statistical Traffic Analysis. In Proceedings of the 16th Annual Network and Distributed System Security Symposium (NDSS). Internet Society, San Diego, CA, USA.

16. Junhua Yan and Jasleen Kaur. 2018. Feature Selection for Website Fingerprinting. In 18th Privacy Enhancing Technologies Symposium (PETS). DE GRUYTER, Barcelona, Spain, 200–219.

17. L. Yang and F. Li. 2015. mTor: A Multipath Tor Routing Beyond Bandwidth Throttling. In IEEE Conference on Communications and Network Security (CNS). IEEE, Florence, Italy.

### A. Optimizing Batched Weighted Random Strategy

An important design choice for our novel splitting scheme, BWR, is the size of each batch. Given that some state-of-the-art website fingerprinting (WFP) attacks rely on features extracted from consecutive sequences of 30 to 40 Tor cells within a given traffic trace [19, 47], we argue that the number \( n \) of cells in a single batch should be around these values to disrupt useful features. Based on this, we investigated different intervals for \( n \) by using five entry ORs for each user’s multipath connection. Table 5 summarizes the classification accuracy obtained for each interval in a closed-world scenario.

**Table 5: Accuracy (in %) for different intervals of the batch size \( n \) needed in our BWR strategy.**

| Classifier | Batch Size \( n \) [30, 40] | [30, 90] | [50, 70] | [60, 80] | [90, 120] |
|------------|-----------------------------|-----------|-----------|-----------|-----------|
| k-FP       | 16.05                       | 17.98     | 13.46     | 18.00     | 17.76     |
| DF         | 8.36                        | 7.95      | 6.58      | 8.20      | 6.70      |
| CUMUL      | 6.70                        | 6.50      | 4.63      | 8.44      | 7.31      |
| k-NN       | 4.75                        | 4.50      | 3.15      | 5.20      | 4.80      |

We present the experimental results for four state-of-the-art classifiers: k-FP, CUMUL, k-NN, and DF. As shown, the most promising results were obtained when uniformly sampling \( n \) from the interval \( n \in [50, 70] \). Therefore, we consider this interval as a good choice and use it for all experiments in our work.

### B. Support of HTTP Range Option

In its second mode of operation, TrafficSliver-App first needs to determine whether an HTTP request can be decomposed into multiple partial requests by verifying several conditions. Specifically, the response corresponding to a given request should have a non-empty body, which does not apply to an HTTP HEAD request. Additionally, the request should be idempotent, meaning that sending the same request multiple times does not result in different responses [15]. Non-idempotent requests, such as HTTP POST, do not support the range option. Although HTTP PUT is idempotent and the response can have a body, the range option is not supported for this type of request because the body confirms data uploaded or modified on the server side, not resource download.

**Table 6: HTTP methods whose resources are not splittable.**

| HTTP Method | Number of Requests | Fraction of Non-Splittable Resources [%] |
|-------------|--------------------|------------------------------------------|
| HEAD        | 379                | 0.038                                    |
| GET         | 942,134            | 23.89                                    |
| PATCH       | 4                  | 0.0004                                   |
| PUT         | 154                | 0.016                                    |
| POST        | 41,327             | 4.1742                                   |
| OPTIONS     | 6,050              | 0.6111                                   |
| DELETE      | 3                  | 0.0003                                   |

The range option is applicable only for HTTP GET requests and is supported for them only. Furthermore, the web server must support the range option requested via an HTTP GET method. Many web servers do not support the range option as it is only beneficial for the user, while on the server side, it produces additional overhead. Additionally, the server should not enforce compression for the given resource due to the incompatibility of the range option with compression. Our defense disables potential compression for each requested resource, although some web servers may still compress the data. Finally, the size of each requested resource must be known to correctly apply one of our splitting strategies (see Section 6). Otherwise, our defense cannot create multiple partial requests.

To evaluate the extent to which the range option is adopted on the Web, we considered the Alexa Top list of the 100,000 most popular sites. Using the same experimental setup presented in Section 7, we automatically visited the index pages of these websites, tracking HTTP requests and responses exchanged during each page load. We excluded web objects whose HTTP responses indicated either a redirection or a client or server error. In total, we collected 3,943,239 unique web resources after visiting 60,054 accessible sites, of which 2,953,188 (74.89%) supported the HTTP range option.

Since our defense can split only those resources requested via HTTP GET, we examined the types of methods of those requests whose resources are not splittable. Table 6 summarizes the results, showing that non-GET requests represent only 1.22% of all sent requests, indicating a high degree of applicability of our defense. However, 23.89% of all GET requests point to a non-splittable resource.

Unlike HTTPOS [30], the second mode of operation of our defense depends mainly on the percentage of splittable web objects within a single website. Therefore, we further measured the support of the HTTP range option for requests within a single website. We computed the support rate either by considering all resources needed to load a given website or by considering only those resources belonging to the website. Websites often share a significant part of their external embedded content, so even if external resources within a website cannot be split, they may not reveal specific patterns for that website as the same resources need to be fetched for many other websites.

We computed the support rate either by counting the number of splittable (internal) resources and dividing it by the total number of (internal) resources needed to load a given website or by summing the sizes of the splittable (internal) resources and dividing it by the total size of all (internal) resources of a website. Both metrics are equally relevant to evaluate the feasibility of our defense in practice. Even if the support of HTTP range requests with respect to the number of splittable resources is limited, the size of the splittable resources may represent a significant part of the whole website.

**Figure 8: Complementary cumulative distribution function (CCDF) for the fraction of splittable resources.**

- **Number of resources (internal + external)**
- **Number of resources (internal only)**
- **Resource sizes (internal + external)**
- **Resource sizes (internal only)**

Figure 8 shows the minimum support rate of the HTTP range option when considering all resources within a website and only those resources belonging to a given website. We observe that the support rate in terms of resource sizes is significantly higher than the support rate in terms of the number of resources. While 50% of the websites contain at least 80% splittable resources, 80% of the websites have splittable resources representing at least 80% of the total website size. Overall, we observed 242,899 (6.16%) from all collected web resources for which we did not obtain any data about their size. When considering only the resources belonging to a given website, 60% of the websites contain at least 90% splittable internal resources. In terms of resource sizes, 80% of the websites have splittable resources representing at least 90% of the total website size, indicating a higher percentage of splittable resources containing unique patterns for a given website.

### C. Authors' Contributions

Both TrafficSliver defenses were proposed and designed by Andriy Panchenko. The initial version of TrafficSliver-Net was implemented by Daniel Forster under the guidance of Andriy Panchenko. Further design details for TrafficSliver-Net were provided by Jens Hiller, Jan Pennekamp, Wladimir De la Cadena, and Asya Mitseva. The current version of TrafficSliver-Net was reimplemented by Sebastian Reuter under the guidance of Jens Hiller. Bandwidth and latency performance evaluation of both TrafficSliver defenses and comparison with related work were performed by Wladimir De la Cadena with the support of Asya Mitseva. Complementary network performance of TrafficSliver-Net was evaluated by Sebastian Reuter under the guidance of Jens Hiller. The traffic-splitting strategies for TrafficSliver-Net were designed and implemented by Wladimir De la Cadena in consultation with Andriy Panchenko and Asya Mitseva. The training strategies for multiple malicious entry ORs were suggested by Wladimir De la Cadena in consultation with Andriy Panchenko, Asya Mitseva, Jens Hiller, and Jan Pennekamp. TrafficSliver-App was implemented by Julian Filter under the guidance of Andriy Panchenko and Asya Mitseva and further extended by Asya Mitseva. All traffic traces necessary for the evaluation were collected by Asya Mitseva. The experiments with WFP classifiers were conducted by Wladimir De la Cadena. The manuscript was written by Asya Mitseva and Andriy Panchenko and was further reviewed by most and approved by all authors.