171
trusted application code
untrusted application code
state handler
service code 
LaStGT library
SMM  
(state map manager)
other 
untrusted 
software
address  
space
changes
accept
/deny
(possibly) 
trusted 
privileged 
code
run/ 
resume
fault
organize 
state maps
disk/network 
I/O
OS
untrusted 
privileged
code
Supervisor
state maps
SGX/TPM
                                             Hardware
trusted hardware
untrusted hardware
Fig. 3: LASTGT’s system architecture.
code, even malicious, is allowed to (be loaded, identiﬁed and)
run in the trusted execution environment.
It is up to V to validate replies by verifying the attestation
of the identities of the executed service code and the input
data, which are assumed to be known to V , and of the output
data which is assumed to be ultimately delivered to V . Also, V
is able to determine whether the attestation has been issued by
a trusted component. Under the implementations that we con-
sider, this is equivalent either to knowing the public attestation
key of the trusted component certiﬁed by the manufacturer, or
to contacting a trusted Attestation Veriﬁcation Service [31].
The content of the signed message (which includes the code
identity) is part of LASTGT’s design (§5.4).
DoS attacks are not considered, since untrusted code can
deny the use of the trusted component. The complexity to break
cryptographic algorithms is assumed to exceed the adversary’s
capabilities. Side-channel attacks are not considered. Finally,
the correctness of the executed trusted code is out of scope
and up to the service developers.
5. DESIGN OF LASTGT
We introduce the architecture of LASTGT (§5.1) and de-
scribe how data is protected at the source (§5.2), processed by
the service provider (§5.3), and veriﬁed by the client (§5.4).
In §6 we detail implementations on two TC architectures.
5.1 Architecture
In the architecture (Fig. 3), we distinguish between three
types of components, namely from the bottom up: hardware
(CPU, memory, security chips, disk, TC hardware, etc.), priv-
ileged code (OS, drivers, etc.) and user-level (or application-
level, non-privileged) code. We also distinguish between two
types of code execution: trusted code (left) and untrusted code
(right) run respectively inside and outside of the trusted envi-
ronment. Depending on the TC component, the Supervisor’s
privileged code must be trusted (e.g., in XMHF-TrustVisor)
or can be untrusted (e.g., in SGX), as discussed in §6. The
two hardware/software stacks represent the trusted and the
untrusted execution environments. A hardware-based (e.g., a
TPM and Intel TXT, Intel SGX) isolation mechanism prevents
untrusted code from tampering with its trusted counterpart.
User-level code includes both untrusted and trusted code.
The trusted user-level code is transferred and identiﬁed at
runtime within the trusted environment. The untrusted code
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:21:49 UTC from IEEE Xplore.  Restrictions apply. 
Component Functionality
Trusted TC
arch.
service code self-contained general pur-
 any
state handler
SMM
Supervisor
 any
pose service
check modiﬁcations to se-
cure address space; data
validation and protection
organization of state in
memory; proposal of new
memory maps
(un)map pages in trusted
application address space;
switch among components
proposal of modiﬁcations
to secure address space
TABLE I: LASTGT’s software components.
any



Implem.
app-level
code
app-level
code
app-level
code
hyper-
visor
XMHF-
Trust-
Visor
SGX OS-level
driver
organizes data and memory for the trusted user-level code,
which validates the data before using it. Table I lists key soft-
ware modules in LASTGT, where they execute, and what im-
plementation they apply to. We discuss how they work together
to bring data securely into the trusted environment in §5.3.
5.2 From User Data to LASTGT-compatible State
The data produced by the data source has to be protected
for client veriﬁcation and structured for secure and efﬁcient
processing on LASTGT. How data is structured and protected
impacts the efﬁciency of computing the metadata at the data
source, the performance of verifying the data at the untrusted
provider (e.g., how much data has to be loaded to verify data
that is used) and the veriﬁcation effort at the client.
This leads to the following requirements for protecting
the data. First, it should be efﬁcient and incremental, so the
metadata can be computed as data is produced. Second, it
should enable piece-wise data validation, so to handle only
subsets of data in memory. Third, it should enable constant
time veriﬁcation by the client.
LASTGT provides these features by pre-processing the
user data into a LASTGT state hierarchy of sub-components,
consisting of blocks of user data at the leaves and structural
and authentication metadata higher up in the tree (Fig. 5). Each
component has a cryptographic identity that depends on its
sub-components’ identities, and ultimately on the user data.
These identities form a cryptographic hash tree optimized for
a large state, as described in §6.1.1. The structure is built
using an incremental procedure and allows piece-wise data
loading and validation through the concepts of data chunks and
blocks. Also, it enables constant time veriﬁcation at the client
by checking the state identity, i.e., the identity of the root.
5.3 Data Processing at the Untrusted Provider
We describe how LASTGT manages the service code ex-
ecution (§5.3.1), how data is read from disk (§5.3.2), loaded
into the trusted environment (§5.3.3) and reclaimed (§5.3.4).
5.3.1
Service Execution
A LASTGT execution begins by registering the state root
identity (provided by the data source) with the state handler
in the trusted execution environment (§6.1.3). This is a one-
time procedure that must be secure since the integrity of the
entire state hierarchy, including the user state, depends on the
correctness of the state root identity. It is not necessary to load
the full state upfront, since the root is sufﬁcient to validate any
data loaded during execution. When the service terminates, the
registered (root) identity is also included in the attestation so
that a client can verify it.
though without
The service code is then executed and it uses regular
I/O calls to access user data,
issuing any
system call. I/O calls use the LASTGT library to get access
to the user data. The library has a memory-mapped view
of the state hierarchy, which it traverses beginning from the
registered state root to access the data. As the data, including
the metadata, is not available upfront in the isolated memory,
its execution is interrupted by page faults, which are handled
by the Supervisor, as described in the next section.
In-Memory Embedded Locators (IMELs). A naive loading
would allocate (for example) 240 virtual addresses upfront for
a state of 1TB, and each page access would trigger a page fault.
This is feasible on 64-bit architectures, but the SMM would
have to ask the OS for many virtual address mappings, most
of which may not be used. Also, the OS may be required to
remap physical pages and maybe do some paging to disk. This
would occur similarly for the Supervisor while managing pages
in the trusted execution environment, thus adding overhead. In
addition, platforms like TrustVisor use 32-bit addresses.
To deal with these overheads and constraints, LASTGT uses
IMELs to reuse addresses and memory. IMELs are memory
pages embedded in the state hierarchy at runtime between
a parent and a child component (e.g., a master-chunk and a
chunk). Speciﬁcally, a parent points to an IMEL that contains
the address of its child, rather than pointing to its child directly.
By not loading the IMEL in isolated memory when the parent
component is ﬁrst loaded, this makes the service code raise a
page fault on a memory page that contains an address, rather
than the child component. So IMELs just provide positions in
memory. They can be ﬁlled at runtime and loaded in isolated
memory together with the child components they reference.
Similarly, they can be unloaded together with the component,
so to reuse the allocated memory with other data.
5.3.2 Loading state from disk into untrusted memory
The Supervisor ofﬂoads to the untrusted SMM the handling
of page faults related to data that is not yet in main memory.
In particular, it does so by transferring control and providing
the fault address to the SMM (§6.1.5). Ofﬂoading such task to
user-level code moves the code out of the Supervisor’s TCB,
which is important in architectures where the Supervisor must
be trusted. The SMM uses the fault address to ﬁgure out what
state component (see hierarchy in Fig. 5) should be loaded
from disk. It then loads the component from disk and places it
into untrusted memory. For any component that is in memory
(e.g., chunks, IMELs, etc.), the SMM maintains a map item in
a map list (Fig. 7, §6.1.2). Such list is updated before the SMM
returns control to the Supervisor. These maps will be used by
the Supervisor for moving pages into the trusted environment,
and by the state handler for validation.
5.3.3 Authenticated lazy loading from untrusted memory
LASTGT optimizes loading data from untrusted memory
into the isolated memory using authenticated lazy loading, i.e.,
pages or blocks are loaded on demand (§6.1.4). This is done
172
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:21:49 UTC from IEEE Xplore.  Restrictions apply. 
state 
handler
register, 
validate
service 
code
LaStGT  
exit adaptation
lib
createEnvironment, 
runAt, mapIn, mapOut
architecture-
adaptation library
                        SMM 
loadState, 
storeState
state 
handler
register, 
validate
service 
code
LaStGT  
lib
isolateMemory, 
unisolateMemory
Supervisor 
OS
memory
management
trap-handler
dispatcher
Nested 
Page  
Tables
unisolateMemory, isolateMemory
OS
Hypervisor
Hardware
TPM
Hardware
runAt, createEnvironment, mapIn, mapOut
runAt, createEnvironment, mapIn, mapOut
SMM
loadState, 
storeState
call
hyper-call
wrapper
system-call
SMM
loadState, 
storeState
state 
handler
register, 
validate
service 
code
LaStGT  
lib
trap 
handler
dispatcher
SGX Kernel 
Driver 
isolateMemory
OS
unisolateMemory
EEXIT
     SGX / CPU 
EENTER,ERESUME
EMODT,ETRACK,EREMOVE
EACCEPT(COPY)
EAUG
ECREATE, 
EADD, 
EEXTEND, 
EINIT 
(a) LASTGT generic implementation.
(b) Trustvisor-speciﬁc implementation.
(c) SGX-speciﬁc implementation.
Fig. 4: LASTGT abstraction of non-common mechanisms (4a, black boxes). TC-architecture-speciﬁc implementations (4b and 4c).
either after a page fault on data already in untrusted memory
or after data has been fetched from disk. In particular, the
Supervisor handles page faults by simply using the memory
maps to locate the pages and to map them. The state handler
is then invoked to validate them.
Page and data validation are performed within the trusted
environment by the state handler before the service code
can access the data. This ensures that the library (and thus