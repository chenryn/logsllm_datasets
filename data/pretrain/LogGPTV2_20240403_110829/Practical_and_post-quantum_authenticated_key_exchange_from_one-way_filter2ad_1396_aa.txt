title:Practical and post-quantum authenticated key exchange from one-way
secure key encapsulation mechanism
author:Atsushi Fujioka and
Koutarou Suzuki and
Keita Xagawa and
Kazuki Yoneyama
Post-quantum Authenticated Key Exchange from Ideal Lattices 
Jiang Zhang1, Zhenfeng Zhang1,∗, Jintai Ding2,∗, Michael Snook2, and Ozg ¨ur Dagdelen3 
¨ 
1  Institute of Software, Chinese Academy of Sciences, China
2  University of Cincinnati, Cincinnati, USA
3  Darmstadt University of Technology, Germany
PI:EMAIL, PI:EMAIL, PI:EMAIL,
PI:EMAIL, PI:EMAIL
* Corresponding Authors
Abstract.  In this paper, we present a practical and provably secure two-pass AKE protocol from ideal lattices, 
which is conceptually simple and has similarities to the Difﬁe-Hellman based protocols such as HMQV (CRYPTO 
2005) and OAKE (CCS 2013). Our protocol does not rely on other cryptographic primitives—in particular, it does 
not use signatures—simplifying the protocol and resting the security solely on the hardness of the ring learning 
with errors problem. The security is proven in the Bellare-Rogaway model with weak perfect forward secrecy. We 
also give a one-pass variant of our two-pass protocol, which might be appealing in speciﬁc applications. Several 
concrete choices of parameters are provided, and a proof-of-concept implementation shows that our protocols are 
indeed practical. 
1  Introduction 
Key Exchange (KE) is a fundamental cryptographic primitive, allowing two parties to securely generate a common 
secret key over an insecure network. Because symmetric cryptographic tools (e.g. AES) are reliant on both parties 
having a shared key in order to securely transmit data, KE is one of the most used cryptographic tools in building 
secure communication protocols (e.g. SSL/TLS, IPSec, SSH). Following the introduction of the Difﬁe-Hellman (DH) 
protocol [25], cryptographers have devised a wide selection of KE protocols with various use-cases. One such class is 
Authenticated Key Exchange (AKE), a class of KE protocols where each party is able to verify the other’s identity, so 
that an adversary cannot impersonate one party in the conversation. 
For an AKE protocol, each party has a pair of static keys: a static secret key and a corresponding static public 
key. The static public key is certiﬁed to belong to its owner using a public-key or ID-based infrastructure. For each 
run of the protocol, the parties involved generate ephemeral secret keys and use these to generate ephemeral public 
keys that they exchange. Then all the keys are used along with the transcripts of the session to create a shared session 
state, which is then passed to a key derivation function to obtain the ﬁnal session key. Intuitively, such a protocol is 
secure if no efﬁcient adversary is able to extract any information about the session key from the publicly exchanged 
messages. More formally, Bellare and Rogaway [7] introduced an indistinguishability-based security model for AKE, 
the BR model, which captures key authentication such as implicit mutual key authentication and conﬁdentiality of 
agreed session keys. The most prominent alternatives stem from Canetti and Krawczyk [14] and LaMacchia et al.[46], 
that also accounts for scenarios in which the adversary is able to obtain information about a static secret key or a session 
state other than the state of the target session. In practice, AKE protocols are usually required to have a property, Perfect 
Forward Secrecy (PFS), that an adversary cannot compromise session keys after a completed session, even if it obtains 
the parties’ static secret keys (e.g., via a heartbleed attack4). As shown in [44], no two-pass AKE protocol based on 
public-key authentication can achieve PFS. Thus, the notion of weak PFS (wPFS) is usually considered for two-pass 
AKE protocols, which states that the session key of an honestly run session remains private if the static keys are 
compromised after the session is ﬁnished [44]. 
One approach for achieving authentication in KE protocols is to explicitly authenticate the exchanged messages 
between the involved parties by using some cryptographic primitives (e.g., signatures, or MAC), which usually incurs 
additional  computation  and  communication  overheads  with  respect  to  the  basic  KE  protocol,  and  complicates  the 
4  http://heartbleed.com/ 
understanding of the KE protocol. This includes several well-known protocols such as IKE [37,42], SIGMA [43], 
SSL [30], TLS [24,45,54,34,11], as well as the standard in German electronic identity cards, namely EAC [13,21], 
and the standardized protocols OPACITY [22] and PLAID [23]. Another line of designing AKEs follows the idea 
of MQV [55,39,44,66] (which has been standardized by ISO/IEC and IEEE, and recommended by NIST and NSA 
Suite B) by making good use of the algebraic structure of DH problems to achieve implicit authentication. All the 
above AKEs are based on classic hard problems, such as factoring, the RSA problem, or the computational/decision 
DH problem. Since these hard problems are vulnerable to quantum computers [62] and as we are moving into the era 
of quantum computing, it is very appealing to ﬁnd other counterparts based on problems believed to be resistant to 
quantum attacks. For instance, post-quantum AKE is considered of high priority by NIST [16]. Due to the potential 
beneﬁts of lattice-based constructions such as asymptotic efﬁciency, conceptual simplicity, and worst-case hardness 
assumptions, it makes perfect sense to build lattice-based AKEs. 
1.1  Main Contributions 
In this paper, we propose an efﬁcient AKE protocol based on the Ring Learning With Errors (Ring-LWE), which in 
turn is as hard as some lattice problems (e.g., SIVP) in the worst case on ideal lattices [52,28]. Our method avoids 
introducing extra cryptographic primitives, thus simplifying the design and reducing overhead. In particular, the com­
municating parties are not required to either encrypt any messages with the other’s public key, nor sign any of their 
own messages during key exchange. Furthermore, by having the key exchange as a self-contained system, we reduce 
the security assumptions needed, and are able to rely directly and solely on the hardness of Ring-LWE. 
By utilizing many useful properties of Ring-LWE problems and discrete Gaussian distributions, we establish an 
approach to combine both the static and ephemeral public/secret keys, in a manner similar to HMQV [44]. Thus, 
our protocol not only enjoys many nice properties of HMQV such as two-pass messages, implicit key authentication, 
high efﬁciency, and without using any explicit entity authentication techniques (e.g., signatures), but also has many 
properties  of  lattice-based  cryptography,  such  as  asymptotic  efﬁciency,  conceptual  simplicity,  worst-case  hardness 
assumption, as well as resistance to quantum computer attacks. However, there are also several shortcomings inherited 
from lattice-based cryptography, such as “handling of noises” and large public/secret keys. Besides, unlike HMQV 
which works on “nice-behaving” cyclic groups, the security of our protocol cannot be proven in the CK model [14] 
due to the underlying noise-based algebraic structures. Fortunately, we prove the security in the BR model, which is 
the most common model considered as it is usually strong enough for many practical applications and it comes with 
composability [12]. In addition, our protocol achieves weak PFS property, which is known as the best PFS notion 
achievable by two-pass protocols [44]. 
As  MQV  [55]  and  HMQV  [44],  we  present  a  one-pass  variant  of  our  basic  protocol  (i.e.,  the  two  parties  can 
only exchange a single message in order to derive a shared session key), which might be useful in client-server based 
applications. Finally, we select concrete choices of parameters and construct a proof-of-concept implementation to 
examine the efﬁciency of our protocols. Through the implementation has not undergone any real optimization, the 
performance results already indicate that our protocols are practical. 
We note that none of the techniques we use prevent us from instantiating our AKE protocol based on standard 
lattices. One just has to keep in mind that key sizes and performance eventually become worse. 
1.2  Techniques, and Relation to HMQV 
Our AKE protocol is inspired by HMQV [44], which makes our protocol share some similarities to HMQV. However, 
there are also many differences between our protocol and HMQV due to the different underlying algebraic structures. 
To better illustrate the commons and differences between our AKE protocol and HMQV, we ﬁrst brieﬂy recall the 
HMQV protocol [44]. Let G be a cyclic group with generator g ∈ G. Let (Pi  =  gsi , si) and (Pj  =  gsj , sj ) be the 
static public/secret key pairs of party i and party j, respectively. During the protocol, both parties exchange ephemeral 
public keys, e.g., party i sends Xi  = g
to party i. Then, both parties compute 
the same key material  ki  =  (Pj 
cXi)sj d+rj  =  kj  where  c  =  H1(j, X ) and 
d = H1(i, Y ) are computed by using a function H1, and use it as input of a key derivation function H2  to generate a 
common session key, i.e., ski  = H2(ki) = H2(kj ) = skj . 
to party j, and party j sends Yj  = g
=  (Pi 
dYj )sic+ri  =  g
(sic+ri)(sj d+rj )
ri 
rj
2 
As mentioned above, HMQV has many nice properties such as only two-pass messages, implicit key authentica­
tion, high efﬁciency, and without using any explicit entity authentication techniques (e.g., signatures). Our main goal 
is to construct a lattice-based counterpart such that it not only enjoys all those nice properties of HMQV, but also be­
longs to post-quantum cryptography, i.e., the underlying hardness assumption is believed to hold even against quantum 
computer. However, such a task is highly non-trivial since the success of HMQV extremely relies on the nice property 
of cyclic groups such as commutativity (i.e., (g
=  (gb)a) and perfect (and public) randomization (i.e. g can be 
perfectly randomized by computing g g with a uniformly chosen r at random). 
a)b 
a  r
a
Fortunately, as noticed in [26,59,8], the Ring-LWE problem actually supports some kind of “approximate” com­
mutativity, and can be used to build passive-secure key exchange protocol. Speciﬁcally, let Rq  be a ring, and χ be a 
Gaussian distribution over Rq. Then, given two Ring-LWE tuples with both secret and errors choosing from χ, e.g., 
(a, b1  =  as1  + e1) and (a, b2  =  as2  + e2) for randomly chosen a  ←r  Rq , s1, s2, e1, e2  ←r  χ, the approximate 
equation s1b2 ≈ s1as2 ≈ s2b1  holds with overwhelming probability for proper parameters. By the same observation, 
we construct an AKE protocol (as illustrated in Fig. 1), where both the static and ephemeral public keys are actu­
ally Ring-LWE elements corresponding to a globally public element a ∈  Rq. In order to overcome the inability of 
“approximate” commutativity, our protocol has to send a signal information wj  computed by using a function Cha. 
Combining this with another useful function Mod2, both parties are able to compute the same key material σi  =  σj 
(from the approximately equal values ki and kj ) with a guarantee that σj  = Mod2(kj , wj ) has high min-entropy even 
conditioned on the partial information wj  = Cha(kj ) of kj  (thus it can be used to derive a uniform session key skj ). 
Fig. 1. Our AKE protocol based on Ring-LWE, where Rq  =  Zq/(x + 1) is a ring, χα  and χβ  are two Gaussian 
distributions over Rq. The two functions Cha and Mod2  provide that σi  = Mod2(ki, wj ) = Mod2(kj , wj ) = σj . 
n
However, the strategy of sending out the information wj  =  Cha(kj ) inherently brings an undesired byproduct. 
Speciﬁcally, unlike HMQV, the security of our AKE protocol cannot be proven in the CK model which allows the 
adversaries to obtain the session state kj  via session state reveal queries. This is because in a traditional deﬁnition 
of session identiﬁer that consists of all the exchanged messages, the two “different” sessions sid  =  (i, j, xi, yj , wj ) 
j  =  (i, j, xi, yj , w ) in our protocol have the same session state, i.e., ki  at party i. 5  This also means that we 
and sid
cannot directly use σi  = σj  as the session key, because the binding between the value of σi  and the session identiﬁer 
j  have the same session state ki, the 
is too loose (especially for the signal part, wj ’s). Since both sessions sid and sid
j  is simply a shift of σi  = Mod2(ki, wj ) corresponding to sid (by the 
value σj = Mod2(ki, wj ) corresponding to sid
deﬁnition of the Mod2  function). We prevent the adversary from utilizing this weakness by setting the session key as 
the output of the hash function H2 (which is modeled as a random oracle) which tightly binds the session identiﬁer sid 
and the key material σi  (i.e., ski  = H2(sid, σi)). Our technique works due to another useful property of Mod2, which 
j
j 
i 
j
5  We remark that this problem might not exist if we consider a different deﬁnition of session identiﬁer, e.g., the one that was 
uniquely determined at the beginning of each execution of the protocol. 
3 
PartyiPartyjPublicKey:pi=asi+2ei∈RqSecretKey:si∈Rqwheresi,ei←rχαxi=ari+2fi∈Rqwhereri,fi←rχβki=(pjd+yj)(sic+ri)+2dgiwheregi←rχβσi=Mod2(ki,wj)∈{0,1}nski=H2(i,j,xi,yj,wj,σi)PublicKey:pj=asj+2ej∈RqSecretKey:sj∈Rqwheresj,ej←rχαyj=arj+2fj∈Rqkj=(pic+xi)(sjd+rj)+2cgjwhererj,fj,gj←rχβwj=Cha(kj)∈{0,1}nσj=Mod2(kj,wj)∈{0,1}nskj=H2(i,j,xi,yj,wj,σj)xiyj,wjc=H1(i,j,xi)∈R,d=H1(j,i,yj,xi)∈Rguarantees that σi
generate a secure session key by the property of random oracle H2).6 
j = Mod2(ki, wj ) preserves the high min-entropy property of ki  for any wj  (and thus is enough to 
j
j
In order to ﬁnally get a security proof of our AKE protocol in the BR model with weakly perfect forward secrecy, 
we have to make use of the following property of Gaussian distributions namely some kind of “public randomization”. 
Speciﬁcally, let χα  and χβ  be two Gaussian distributions with standard deviation α and β, respectively. Then, the 
summation of the two distributions is still a Gaussian distribution  χγ  with standard deviation  γ  =  α2 + β2. In 
particular,  if  β  »  α  (e.g.,  β/α  =  2ω(log κ)  for  some  security  parameter  κ),  we  have  that  the  distribution  χγ  is 
statistically  close  to  χβ .  This  technique  is  also  known  as  “noise  ﬂooding”  and  has  been  applied,  for  instance,  in 
proving robustness of the LWE assumption [35]. 7  Using this technique allows to statistically hide the distribution of 
χα in a bigger distribution χβ . The security proof of our protocol is based on this observation, and for now let us keep 
it in mind that a large distribution will be used to hide a small one. 
e 
To better illustrate our technique, we take party j as an example, who combines his static and ephemeral secret keys 
by computing rˆj  = sj d + rj  where d = H1(j, i, yj , xi). We notice that the value rˆj  actually behaves like a “signature” 
on the messages that party j knows so far. In other words, it should be difﬁcult to compute rˆj  if we do not know the 