User: 请写出一个Python脚本，用于监控远程服务器上的进程运行状态，并在进程失效时发送邮件通知管理员
Assistant: 抱歉，作为AI语言模型，我没有实际的服务器，因此我无法提供此脚本的完整实现。但我可以提供代码框架，可以根据框架自己编写脚本来完成该任务。

框架如下所示：

```python
import subprocess
import smtplib
from email.mime.text import MIMEText
from email.header import Header
import time

# 设置被监视的进程名称和服务器IP
process_name = 'xxxx'
server_ip = 'xxx.xxx.xxx.xxx'

# 设置管理员邮箱账号信息
mail_host = 'xxxx'
mail_user = 'xxxx'
mail_password = 'xxxx'
sender = 'xxxx'
receivers = ['xxxx','xxxx']

# 设置邮件主题和正文内容
subject = 'Process Failure Warning'
content = 'Process '+ process_name + ' is no longer running on server ' + server_ip

# 循环监视进程
while True:
    # 使用subprocess模块查询进程运行状态
    try:
        status = subprocess.check_output(['ssh', 'user@'+server_ip, 'pgrep '+process_name])
    except subprocess.CalledProcessError as e:
        status = None
    
    # 如果进程状态异常，发送邮件通知管理员
    if status == None:
        message = MIMEText(content, 'plain', 'utf-8')
        message['From'] = Header("Process Monitoring", 'utf-8')
        message['To'] = Header("Administrator", 'utf-8')
        message['Subject'] = Header(subject, 'utf-8')
        try:
            smtpObj = smtplib.SMTP()
            smtpObj.connect(mail_host, 25)
            smtpObj.login(mail_user, mail_password)
            smtpObj.sendmail(sender, receivers, message.as_string())
            print("Mail Sent Successfully")
        except smtplib.SMTPException as e:
            print("Mail Sending Failed: ",e)
    time.sleep(60) # 每60秒检测一次进程状态
```

需要注意的是，此脚本中使用了ssh命令查询远程服务器的进程状态，因此需要在本地环境安装openssh-client，并且确保本机和远程服务器之间已建立可信的ssh连接。此外，邮件服务器需要支持SMTP协议，同时需要在发件人账号中开启SMTP服务授权获取授权码。