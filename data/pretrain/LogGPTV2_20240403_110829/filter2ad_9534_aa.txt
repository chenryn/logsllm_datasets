## 1.前言
本文将从网络通信原理浅析在android中出现的一些代理转发检测，这些功能会使我们测试app时出现 **抓不到包** 或者 **应用闪退**
等情况，针对这种场景，我搭建了测试环境，并对其场景展开分析与实施应对方案。
## 2.OSI 7层网络模型
网络通信嘛，首先得知道什么是OSI 7层模型。下面是百度的解释：
>
> 为了使不同计算机厂家生产的计算机能够相互通信，以便在更大的范围内建立计算机网络，国际标准化组织（ISO）在1978年提出了“开放系统互联参考模型”，即著名的OSI/RM模型（Open
> System Interconnection/Reference Model）。
>
> 它将计算机网络体系结构的通信协议划分为七层，自下而上依次为：
>
> [物理层](https://baike.baidu.com/item/物理层)（Physics
> Layer）、[数据链路层](https://baike.baidu.com/item/数据链路层)（Data Link
> Layer）、[网络层](https://baike.baidu.com/item/网络层/4329439)（Network
> Layer）、[传输层](https://baike.baidu.com/item/传输层)（Transport
> Layer）、[会话层](https://baike.baidu.com/item/会话层)（Session
> Layer）、[表示层](https://baike.baidu.com/item/表示层)（Presentation
> Layer）、[应用层](https://baike.baidu.com/item/应用层/16412033)（Application Layer）
使用网络数据的传输离不开网络协议七层模型，通过理解每一层协议的分工，也就能对网络故障逐一排查，这样的思维逻辑在安卓应用中也同样适用。
**OSI 7层模型** 各层功能及对应的协议、设备如下表所示：
OSI对应的层 | 功能 | TCP/IP对应的协议 | 设备  
---|---|---|---  
应用层 | 文件传输，电子邮件，文件服务，虚拟终端 | TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet | /  
表示层 | 数据格式化，代码转换，数据加密 | / | /  
会话层 | 解除或建立与别的接点的联系 | / | /  
传输层 | 提供端对端的接口 | TCP，UDP | 四层交换机和四层路由  
网络层 | 为数据包选择路由 | IP，ICMP，RIP，OSPF，BGP，IGMP | 三层交换机和路由  
数据链路层 | 传输有地址的帧以及错误检测功能 | ARP，RARP，MTU，SLIP，CSLIP，PPP | 网桥、交换机、网卡  
物理层 | 以二进制数据形式在物理媒体上传输数据 | ISO2110，IEEE802，IEEE802.2 | 中继器、集线器、双绞线  
知识点：HTTPS协议是`HTTP+SSL`
根据上表可知，SSL做数据加密是在表示层，也就是说，HTTPS实际上是建立在SSL之上的HTTP协议，而普通的HTTP协议是建立在TCP协议之上的。所以，当HTTPS访问URL时，由于URL在网络传送过程中最后是处于HTTP协议数据报头中，而HTTP协议位于SSL的上层，所以凡是HTTP协议所负责传输的数据就全部被加密了；但是IP地址并没加密，因为处理IP地址的协议（网络层）位于处理SSL协议（表示层）的下方。
额，说了这么多，就是要告诉你一个重要的关键点：数据的封装是`自下而上`的
！在网络数据处理方面，如果是上层做了检测处理，则需要在同层或下层进行逻辑绕过，这就是攻与防的关键了，偷家（底层）才是硬道理。
接下来，我们再理解一下代理与VPN。
## 3.代理与VPN
### 3.1、代理
**代理（proxy）** 也称网络代理，是一种特殊的网络服务，允许一个终端（一般为客户端）通过这个服务与另外一个终端（一般为服务器）进行非直接的连接。
一个`完整的代理请求过程`为：客户端首先根据代理服务器所使用的 **代理协议** ，与 **代理服务器**
创建连接，接着按照协议请求对目标服务器创建连接、或者获得目标服务器的指定资源。
### 3.2、VPN
**VPN** （virtual private network）（ **虚拟专用网络** ）是常用于连接中、大型企业或团体间私人网络的通讯方法。它利用
**隧道协议（Tunneling Protocol）** 来达到发送端认证、消息保密与准确性等功能。
### 3.3、代理和VPN的区别
从各自的定义，我们就能看出VPN的特点是采取 **隧道协议** 进行数据传输和保护；而代理使用的则是对应的 **代理协议** 。
下面是VPN和代理的常用协议：
| 协议名称  
---|---  
VPN | OpvenVPN、IPsec、IKEv2、PPTP、L2TP、WireGuard等  
代理 | HTTP、HTTPS、SOCKS、FTP、RTSP等  
VPN 协议大多是作用在 OSI 的第二层和第三层之间，所以使用 VPN 时，几乎能转发所有的流量。
而代理协议多作用在应用层，最高层。
## 4.安卓代理检测
知道了代理与VPN的作用后，在APP中，如果开发人员在代码中添加了一些网络层的检测机制，而这些机制恰恰又是针对工作层协议进行的检测，那么只要分析出工作在IOS的哪一层，抢先一步在下层做出应对，那APP在上层无论怎么检测，都没有用。下面将对测试场景进行详细分析。
抓包的步骤：
1.在客户端（手机）中设置代理服务器的地址
2.开启代理服务器（burp）的代理功能
如果在客户端对代理服务进行过滤，禁止客户端通过代理服务器进行访问Internet，添加如下代码：
    connection = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);
官方对于 **Proxy.NO_PROXY** 的描述如下：
    /**
     * A proxy setting that represents a {@code DIRECT} connection,
     * basically telling the protocol handler not to use any proxying.
     * Used, for instance, to create sockets bypassing any other global
     * proxy settings (like SOCKS):
     * 
     * {@code Socket s = new Socket(Proxy.NO_PROXY);}
     *
     */public final static Proxy NO_PROXY = new Proxy();
    // Creates the proxy that represents a {@code DIRECT} connection.private Proxy() {
        type = Type.DIRECT;
        sa = null;
    }
**NO_PROXY** 实际上就是type属性为 **DIRECT** 的一个Proxy对象，这个type有三种：
  * DIRECT
  * HTTP
  * SOCKS
所以，Proxy.NO_PROXY的意思是connection的请求是 **直连** 。
此时若通过系统进行代理，app对外请求会失效，也就是视觉上看到的卡死状态，就是不让走系统代理。
安卓手机上设置 **系统代理** 即是在【设置】-【WLAN】-【修改网络】手动设置代理。
**针对不走系统代理的情况有如下两种应对：**
1、使用基于`VPN`模式的`Postern`
2、使用基于`iptables`的`ProxyDroid`
对此，我做出了如下一些测试：
### 4.1、使用系统代理
APP关键代码如下：
    private void sendRequestWithHttpURLConnection(){
            new Thread(new Runnable() {
                @Override
                public void run() {
                    HttpURLConnection connection = null;
                    BufferedReader reader = null;
                    try{
                        URL url = new URL("http://www.baidu.com");
                        connection = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);
                        connection.setRequestMethod("GET");
                        InputStream in = connection.getInputStream();
                        reader = new BufferedReader(new InputStreamReader(in));
                        StringBuilder response = new StringBuilder();
                        String line;
                        while ((line = reader.readLine()) != null){
                            response.append(line);
                        }
                        showResponse(response.toString());
                    } catch (Exception e){
                        e.printStackTrace();
                    } finally {