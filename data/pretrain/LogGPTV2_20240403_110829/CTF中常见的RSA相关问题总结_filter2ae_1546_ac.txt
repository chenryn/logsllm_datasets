解密方法是参照维基百科的，截图如下：
### 例子：Jarvis OJ hard RSA
解题脚本
    import gmpy2,libnum
    n=0xC2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD
    p=275127860351348928173285174381581152299
    q=319576316814478949870590164193048041239
    e=2
    c=int(open('hardRSA.rar/flag.enc','rb').read().encode('hex'),16)
    mp=pow(c,(p+1)/4,p)
    mq=pow(c,(q+1)/4,q)
    yp=gmpy2.invert(p,q)
    yq=gmpy2.invert(q,p)
    r=(yp*p*mq+yq*q*mp)%n
    rr=n-r
    s=(yp*p*mq-yq*q*mp)%n
    ss=n-s
    print libnum.n2s(r)
    print libnum.n2s(rr)
    print libnum.n2s(s)
    print libnum.n2s(ss)
## Wiener's Attack
**适用情况：e过大或过小。**
工具：
在e过大或过小的情况下，可使用算法从e中快速推断出d的值。详细的算法原理可以阅读：[低解密指数攻击](https://www.tr0y.wang/2017/11/06/CTFRSA/index.html#%E4%BD%8E%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB)
。
    from Crypto.PublicKey import RSA
    import ContinuedFractions, Arithmetic
    def wiener_hack(e, n):
        # firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git !
        frac = ContinuedFractions.rational_to_contfrac(e, n)
        convergents = ContinuedFractions.convergents_from_contfrac(frac)
        for (k, d) in convergents:
            if k != 0 and (e * d - 1) % k == 0:
                phi = (e * d - 1) // k
                s = n - phi + 1
                discr = s * s - 4 * n
                if (discr >= 0):
                    t = Arithmetic.is_perfect_square(discr)
                    if t != -1 and (s + t) % 2 == 0:
                        print("Hacked!")
                        return d
        return False
### 例子：2018强网杯nextrsa-Level2
    n = 0x92411fa0c93c1b27f89e436d8c4698bcf554938396803a5b62bd10c9bfcbf85a483bd87bb2d6a8dc00c32d8a7caf30d8899d90cb8f5838cae95f7ff5358847db1244006c140edfcc36adbdcaa16cd27432b4d50d2348b5c15c209364d7914ef50425e4c3da07612cc34e9b93b98d394b43f3eb0a5a806c70f06697b6189606eb9707104a7b6ff059011bac957e2aae9ec406a4ff8f8062400d2312a207a9e018f4b4e961c943dfc410a26828d2e88b24e4100162228a5bbf0824cf2f1c8e7b915efa385efeb505a9746e5d19967766618007ddf0d99525e9a41997217484d64c6a879d762098b9807bee46a219be76941b9ff31465463981e230eecec69691d1L
    e = 0x6f6b385dd0f06043c20a7d8e5920802265e1baab9d692e7c20b69391cc5635dbcaae59726ec5882f168b3a292bd52c976533d3ad498b7f561c3dc01a76597e47cfe60614f247551b3dbe200e2196eaa001a1d183886eeacddfe82d80b38aea24de1a337177683ed802942827ce4d28e20efef92f38f1b1a18c66f9b45f5148cceabfd736de8ac4a49e63a8d35a83b664f9f3b00f822b6f11ff13257ee6e0c00ca5c98e661ea594a9e66f2bd56b33d9a13f5c997e67a37fcf9a0c7f04d119fe1ba261127357e64a4b069aefed3049c1c1fe4f964fd078b88bedd064abea385cfebd65e563f93c12d34eb6426e8aa321033cfd8fe8855b9e74d07fe4f9d70de46fL
    d = wiener_hack(e, n)
    print d  #42043
## 私钥文件修复
**适用情况：提供破损的私钥文件。**
### 例题：Jarvis OJ-God Like RSA
参考 
修复存储私钥的文件，得到p和q。
## LSB Oracle Attack
**适用情况：可以选择密文并泄露最低位。**
在一次RSA加密中，明文为m，模数为n，加密指数为e，密文为c。我们可以构造出`c'=((2^e)*c)%n=((2^e)*(m^e))%n=((2*m)^e)%n`
， 因为m的两倍可能大于n，所以经过解密得到的明文是 `m'=(2*m)%n` 。我们还能够知道 `m'` 的最低位`lsb` 是1还是0。
因为n是奇数，而`2*m` 是偶数，所以如果`lsb` 是0，说明`(2*m)%n` 是偶数，没有超过n，即`mn/2.0`
。举个例子就能明白`2%3=2` 是偶数，而`4%3=1` 是奇数。以此类推，构造密文`c"=(4^e)*c)%n` 使其解密后为`m"=(4*m)%n`
，判断`m"` 的奇偶性可以知道`m` 和 `n/4` 的大小关系。所以我们就有了一个二分算法，可以在对数时间内将m的范围逼近到一个足够狭窄的空间。
更多信息可参考：[RSA Least-Significant-Bit Oracle
Attack](https://introspelliam.github.io/2018/03/27/crypto/RSA-Least-Significant-Bit-Oracle-Attack/) 和 [RSA least significant bit oracle
attack](https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack) 。
Python实现：
    import decimal
    def oracle():
        return lsb == 'odd'
    def partial(c, e, n):
        k = n.bit_length()
        decimal.getcontext().prec = k  # for 'precise enough' floats
        lo = decimal.Decimal(0)
        hi = decimal.Decimal(n)
        for i in range(k):
            if not oracle(c):
                hi = (lo + hi) / 2
            else:
                lo = (lo + hi) / 2
            c = (c * pow(2, e, n)) % n
            # print i, int(hi - lo)
        return int(hi)
### 例子：QCTF2018-XMan选拔赛/Baby RSA
题目如下
    e = 0x10001
    n = 0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db
    c = 0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0
    λ nc 47.96.239.28 23333
    ----------------------------- baby rsa -----------------------------    Come and Decode your data
    If you give me ciphertext, I can tell you whether decoded data is even or odd
    You can input ciphertext(hexdecimal) now
    1
    odd
解题脚本：
    # -*- coding: utf-8 -*-    # by https://findneo.github.io/
    # ref:
    # https://crypto.stackexchange.com/questions/11053/rsa-least-significant-bit-oracle-attack
    # https://ctf.rip/sharif-ctf-2016-lsb-oracle-crypto-challenge/
    # https://introspelliam.github.io/2018/03/27/crypto/RSA-Least-Significant-Bit-Oracle-Attack/
    import libnum, gmpy2, socket, time, decimal
    def oracle(c1):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        hostname = '47.96.239.28'
        port = 23333
        s.connect((hostname, port))
        s.recv(1024)
        s.send(hex(c1)[2:].strip("lL") + '\n')
        res = s.recv(1024).strip()
        s.close()
        if res == 'even': return 0
        if res == 'odd':
            return 1
        else:
            assert (0)
    def partial(c, n):
        global c_of_2
        k = n.bit_length()
        decimal.getcontext().prec = k  # allows for 'precise enough' floats
        lower = decimal.Decimal(0)
        upper = decimal.Decimal(n)
        for i in range(k):
            possible_plaintext = (lower + upper) / 2
            # lower==0 when i<1809
            flag = oracle(c)
            if not flag:
                upper = possible_plaintext  # plaintext is in the lower half
            else:
                lower = possible_plaintext  # plaintext is in the upper half
            c = (c * c_of_2) % n  # multiply y by the encryption of 2 again
            print i, flag, int(upper - lower)
            # time.sleep(0.2)
        # By now, our plaintext is revealed!
        return int(upper)
    def main():
        print "[*] Conducting Oracle attack..."
        return partial((c * c_of_2) % n, n)
    if __name__ == '__main__':
        e = 0x10001
        n = 0x0b765daa79117afe1a77da7ff8122872bbcbddb322bb078fe0786dc40c9033fadd639adc48c3f2627fb7cb59bb0658707fe516967464439bdec2d6479fa3745f57c0a5ca255812f0884978b2a8aaeb750e0228cbe28a1e5a63bf0309b32a577eecea66f7610a9a4e720649129e9dc2115db9d4f34dc17f8b0806213c035e22f2c5054ae584b440def00afbccd458d020cae5fd1138be6507bc0b1a10da7e75def484c5fc1fcb13d11be691670cf38b487de9c4bde6c2c689be5adab08b486599b619a0790c0b2d70c9c461346966bcbae53c5007d0146fc520fa6e3106fbfc89905220778870a7119831c17f98628563ca020652d18d72203529a784ca73716db
        c = 0x4f377296a19b3a25078d614e1c92ff632d3e3ded772c4445b75e468a9405de05d15c77532964120ae11f8655b68a630607df0568a7439bc694486ae50b5c0c8507e5eecdea4654eeff3e75fb8396e505a36b0af40bd5011990663a7655b91c9e6ed2d770525e4698dec9455db17db38fa4b99b53438b9e09000187949327980ca903d0eef114afc42b771657ea5458a4cb399212e943d139b7ceb6d5721f546b75cd53d65e025f4df7eb8637152ecbb6725962c7f66b714556d754f41555c691a34a798515f1e2a69c129047cb29a9eef466c206a7f4dbc2cea1a46a39ad3349a7db56c1c997dc181b1afcb76fa1bbbf118a4ab5c515e274ab2250dba1872be0
        c_of_2 = pow(2, e, n)
        m = main()
        # m = 560856645743734814774953158390773525781916094468093308691660509501812349
        print libnum.n2s(m)
        # QCTF{RSA_parity_oracle_is_fun}
## 选择密文攻击
**适用情况：可以构造任意密文并获得对应明文。**
这个好理解，在一个RSA加密过程中，明文为m，密文为c，模数为n，加密指数为e，选取x以满足`gcd(x,n)==1` 从而使x模n的逆存在，构造密文
`c'=c*(x^e)` 使解密后明文为 `m'=(m*x)%n` ，则`m=m'*x^-1(mod n)` 。可参看`模意义下的运算法则部分` 。
## 广播攻击
**适用情况：模数n、密文c不同，明文m、加密指数e相同。一般会是e=k，然后给k组数据**
使用不同的模数n，相同的公钥指数e加密相同的信息。就会得到多个(m^e) ==ci (mod
ni)，将(m^e)视为一个整体M，这就是典型的中国剩余定理适用情况。按照本文的`中国剩余定理`小节容易求得m^e的值，当e较小时直接开e方即可，可使用`gmpy2.iroot(M,e)`
方法。
Python实现：参见本文 `中国剩余定理`小节。
### 例子：2018强网杯nextrsa-Level9
    m = random.randint(0x100000000000, 0xffffffffffff)
    e = 3
    n1 = 0x43d819a4caf16806e1c540fd7c0e51a96a6dfdbe68735a5fd99a468825e5ee55c4087106f7d1f91e10d50df1f2082f0f32bb82f398134b0b8758353bdabc5ba2817f4e6e0786e176686b2e75a7c47d073f346d6adb2684a9d28b658dddc75b3c5d10a22a3e85c6c12549d0ce7577e79a068405d3904f3f6b9cc408c4cd8595bf67fe672474e0b94dc99072caaa4f866fc6c3feddc74f10d6a0fb31864f52adef71649684f1a72c910ec5ca7909cc10aef85d43a57ec91f096a2d4794299e967fcd5add6e9cfb5baf7751387e24b93dbc1f37315ce573dc063ecddd4ae6fb9127307cfc80a037e7ff5c40a5f7590c8b2f5bd06dd392fbc51e5d059cffbcb85555L
    n2 = 0x60d175fdb0a96eca160fb0cbf8bad1a14dd680d353a7b3bc77e620437da70fd9153f7609efde652b825c4ae7f25decf14a3c8240ea8c5892003f1430cc88b0ded9dae12ebffc6b23632ac530ac4ae23fbffb7cfe431ff3d802f5a54ab76257a86aeec1cf47d482fec970fc27c5b376fbf2cf993270bba9b78174395de3346d4e221d1eafdb8eecc8edb953d1ccaa5fc250aed83b3a458f9e9d947c4b01a6e72ce4fee37e77faaf5597d780ad5f0a7623edb08ce76264f72c3ff17afc932f5812b10692bcc941a18b6f3904ca31d038baf3fc1968d1cc0588a656d0c53cd5c89cedba8a5230956af2170554d27f524c2027adce84fd4d0e018dc88ca4d5d26867L
    n3 = 0x280f992dd63fcabdcb739f52c5ed1887e720cbfe73153adf5405819396b28cb54423d196600cce76c8554cd963281fc4b153e3b257e96d091e5d99567dd1fa9ace52511ace4da407f5269e71b1b13822316d751e788dc935d63916075530d7fb89cbec9b02c01aef19c39b4ecaa1f7fe2faf990aa938eb89730eda30558e669da5459ed96f1463a983443187359c07fba8e97024452087b410c9ac1e39ed1c74f380fd29ebdd28618d60c36e6973fc87c066cae05e9e270b5ac25ea5ca0bac5948de0263d8cc89d91c4b574202e71811d0ddf1ed23c1bc35f3a042aac6a0bdf32d37dede3536f70c257aafb4cfbe3370cd7b4187c023c35671de3888a1ed1303L
    c1 = pow(m, e, n1)
    c2 = pow(m, e, n2)
    c3 = pow(m, e, n3)
    print m == gmpy2.iroot(CRT([n1, n2, n3], [c1, c2, c3]), e)[0]
# 后话
RSA可谓现代密码学的中流砥柱，关于它的可行攻击方法研究还有很多，诸如Timing Attack ，Padding oracle attack，Side-channel analysis attacks等类型的攻击，本文仅介绍了一些通俗易懂的方法，读者还可以阅读 [CTF
wiki中的非对称加密部分](https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_theory/) ，以及以 [RSA
(cryptosystem)](https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29)
为目录结合谷歌进行进一步学习。
# 参考链接
[Practical Padding Oracle Attacks on RSA](http://secgroup.dais.unive.it/wp-content/uploads/2012/11/Practical-Padding-Oracle-Attacks-on-RSA.html)
[CTF wiki中的非对称加密部分](https://ctf-wiki.github.io/ctf-wiki/crypto/asymmetric/rsa/rsa_theory/)