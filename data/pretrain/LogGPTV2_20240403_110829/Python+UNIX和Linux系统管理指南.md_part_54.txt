Python'ls'
no_options.py
hello_world_optparse.py
-h, --help
--version
.svn
0.1a
--version show program's version number and exit
Options:
Python ‘ls'
 show this help message and exit
 command clone
command clone
prog="pyls",
www.TopSage.com
PDG
---
## Page 401
接下来是“--verbose”模式：
等级的情况。首先是正常方式：
通过使用“--verbose”
if
Filename:
Filename: ics13342
$ python true_false.py --verbose /tmp
aweu
Filename: ics12158
Filename: ics10003
Filename:
Filename:
Filename: amt.log
summary.txt
MobileSync.lock.f9e26440fe5adbb6bc42d7bf8f87c1e5fc61a7fe
icssuis501
hsperfdata_ngift
authTokenData
alm.log
$ python true_false.py /tmp
ics13342
ics12158
ics10003
helloworld
FLEXnet
amt.log
else:
options, arguments = p-parse_args()
p.add_option("--verbose",
p.print_help()
else:
elif options.quiet:
if options.verbose:
filename in os.listdir(path):
icssuis501
hsperfdata_ngift
FLEXnet
 print filename
pass
help="Enables Verbose Output",defauIt=False)
.
，我们有效地设置stdout的余等级。让我们看一下每一冗余
1：
version="o.1a",
www.TopSage.com
命令行丨387
款乎
---
## Page 402
在一个典型的Unix命令行工具中，例如tcpdump，如果你指定了-vvv，相比于仅使用
记数选项使用模式
使用True/False选项的最为精华的内容。
除非有人指定了“--option”，
语句被执行，在实际的文件名前输出“Filename”
当我们设置“--verbose”选项，options.verbose的值为True，作为结果，我们的条件
def main():
#!/usr/bin/env python
例13-7：记数选项使用模式
以参见例13-7。
器，对每次指定的选项计数。例如，如果你希望在你的工具中添加同样级别的余，可
-v或-vv将获得更多的冗余输出。你可以让optparse做相同的事情，通过添加一个计数
通过使用一个自动增加计数的设计模式，可以确保仅一个选项，却可以做三件不同的事
if
importos
388
p = optparse.optionParser(description="python 'ls' command clone",
Filename:summary.txt
Filename: MobileSync.lock.f9e26440fe5adbb6bc42d7bf8f87c1e5fc61a7fe
p.add_option("-v", action="count"
else:
p.print_help()
if options.verbose:
for
第13章
 print "Verbose Mode Enabled at Level: %s" % options.verbose
else:
 print filename
print "Filename: %s " % filename
print
"Filename:%s
，且设置选项option的值为True。这是在optparse中有关
prog="pyls",
version="o.1a",
os.path.getsize(fulipath))
www.TopSage.com
。值得注意的是，在我们的脚本中，
%(filename,
，这等同于设置默认值为False，
PDG
---
## Page 403
def main():
#1/usr/bin/env python
例13-8：选择使用模式
使用之前的示例，例13-8展示了使用新选项时的情况。
有时展示选项的一些选择是比较容易的。在上一个示例中，我们创建了选项
选择使用模式
置options.verbose为2。在实际的程序中，没有选项，仅输出文件名；使用“-v”将输
import
import optparse
的输出结果：
options, arguments = p.parse_args()
p.add_option("--chatty",
Filename: summary.txt | Byte Size: 382
Filename:M
Filename:icssuis501|
Filename:ics14183
Filename:
Filename:
Filename:
Filename:
Filename:
Filename: alm.log
oS
if options.chatty ==
ics12158
MobileSync.1ock.f9e26440fe5adbb6bc42d7bf8f87c1e5fc61a7fe | Byte Size: 0
ics10003
amt.l1og
helloworld
Byte Size:3038
Byte Size:0
Byte Size:0
Byte Size:
Byte Size
Byte Size
Byte Size: 0
"verbose":
"-c",
，我们可以让其从“--chatty”选项的结果中进行选择。
prog="pyls",
|Byte Size: 102
"verbose":
version="o.1a",
www.TopSage.com
o
”% filename
"verbose", "quiet"],
命令行丨389
---
## Page 404
390丨第13章
的示例中，我们为选项放一个print语句来显示其在程序中的样子。以下是一个最终使用
或许你注意到，在顶部的输出中有“chatty”作为关键字和“verbose”作为值。在上面
指定的选项中进行选择。以下是当命令正确运行时，命令的执行结果：
使用选项的一个方便之处是能够减少对用户输入正确的命令参数的依赖。用户仅可以从
如果给选项指定了错误的参数，会得到另一个错误，告诉我们可用的选项：
“--chatty”和“quiet”选项的示例：
如果就像之前示例中所演示的那样，运行不带选项的命令，会得到下面的错误结果：
Filename: summary.txt
pyls: error: option --chatty: invalid choice: 'nuclear' (choose from 'normal',
Usage: pyls [directory]
$ python choices.py --chatty=nuclear /tmp
Filename: .aksusb
pyls: error: --chatty option requires an argument
Usage: pyls [directory]
$ python choices.py --chatty
Filename:
Filename:
Filename:
VerboseModeEnabled
else:
p.print_help()
else:
elif options.chatty == "quiet":
：MobileSync.lock.f9e26440fe5adbb6bc42d7bf8f87c1e5fc61a7fe
ics13342
ics12158
ics10003
helloworld
FLEXnet
authTokenData
amt.log
print filename
pass
www.TopSage.com
DG
---
## Page 405
如果正确指定了“--dir”选项的参数个数，会得到如下的结果：
def main():
#1/usr/bin/env python
import optparse
例13-9：对两个目录列表输出
if
importos
的。例13-9是一个精心设计的示例，其中我们让ls命令同时输出两个目录的内容。
默认情况下，一个optparse选项只能有一个参数，但是可以指定参数的个数也是可以
具有多参数的选项使用模式
pymultils: error: --dir option requires 2 arguments
options, arguments = p.parse_args()
p.add_option("--dir", action="store",
p = optparse.OptionParser(description="Lists contents of two directories",
MobileSync.lock.f9e26440fe5adbb6bc42d7bf8f87c1e5fc61a7fe
hsperfdata_ngift
FLEXnet
pymultils: error: --dir option requires 2 arguments
[ngift@Macintosh-8][H:10238][J:o]# python multiple_option_args.py --dir /tmp -
icssuis501
ics15392
helloworld
else:
ics14183
ics13342
cs12158
ics10003
aksusb
p.print_help()
for dir in options.dir:
for
print
 print filename
filename in os.listdir(dir):
"Listing of %s:\n" % dir
prog="pymultils",
]8o1d%=a8esn
version="o.1a",
www.TopSage.com
,dest="dir", nargs=2)
[--dir dir1 dir2]")
XC
命令行丨391
---
## Page 406
有时，你发现自己正在使用一个命令行工具，而该工具不是你真正想要的。它或许需
Kudzu使用模式：Python中的封装工具
我们探索一些这方面的技术。
合Python和Unix工具，我们有了新的思路，问题可以用不同的方式来解决。在这一节,
自定义的rsync版本，怎么样？这些Unix2.0的“mashups”与Web2.0非常相似。通过混
无法轻松做到的。混合dd命令和线程、队列、tcpdump和Python的正则表式库或是一个
另外，混合一个命令行工具和纯Pyton可以创建更有意义的工具，而这在C或是Bash中是
使用subprocess和optparse来修改一个本地UNIX工具。
要）的配置文件，或是你选择为其他选项创建默认。不管需求如何，毫无问题，你可以
需要是非常简单的。你或许选择整合一个包含了一些参数（该参数为你使用的选项所需
非常有意义的检测方法。封装一个已有的Python命令行工具或修改其行为以适应特定的
用Python的Unix命令行工具来创建一个新的命令行工具。这些创建的新工具提供了一个
它们的API，来封装已有的命令行工具以创建新的命令行工具。或是混合一个或多个使
snmpdf时的输出结果：
功能，使其能够做你希望完成的工作是非常简便的。我们喜欢称其为“Kudzu”设计模
要太多的选项，或许参数的顺序与你希望使用的顺序相反。使用Python修改一个工具的
在第10章，我们看到了一些使用subprocess模块的通用方法。通过使用Python以及修改
对于这个示例，我们将封装snmpdf命令与Python，以简化使用。首先查看一下正常运行
部。Kudzu遵循自然习惯，创建可选的场景。使用Python，并且如果你选择了Kudzu，就
式。或许你还不熟悉Kudzu，Kudzu就像是一根快速生长的藤蔓，由日本发展到美国南
工具中
Unix Mashups:
392
可以在你的Unix环境中做相同的事情。
iTunes
.localized
Listing of /Users/ngift/Music:
.DS_Store
summary.txt
Swap Space
Description
[ngift@Macintosh-8][H:10285][J:0]# snmpdf -c public -v 2c example.com
Memory
1第13章
Buffers
整合Shell命令到Python命令行
1012084
2067636
2067636
(kB
www.TopSage.com
1990704
249560
Used
64
Available Used%
1012020
1818076
76932
%96
12%
---
## Page 407
本的灵活性。
optparse进行处理，且不使用硬代码脚本的好处是，我们具有修只需改选项而不修改脚