# Bug report
[Note: unclear to me whether this issue comes from Webpack, Babel, or the
combination of the two, @Timer suggested bringing this here]
**What is the current behavior?**
Bundling an ES6 module using the rest/spread syntax somewhere in the file
works, but if the same file uses a CommonJS format instead, it throws a
bundling error unrelated to the syntax.
**Steps to reproduce.**
  1. Create a vanilla create-react-app app with react-scripts@2.1.2.
  2. Create two files: `src/es6.js` and `src/cjs.js`.
    // es6.js
    export default ({ foo, ...rest }) => true;
    // cjs.js
    module.exports = ({ foo, ...rest }) => true;
  3. Run `npm start` or `yarn start`.
  4. Import both of them into App.js, one at a time:
    import es6 from "./es6.js";
    // then
    import cjs from "./cjs.js";
A full repro is here: https://github.com/veltman/webpack-babel-bug-repro
**What is the expected behavior?**
Importing either file should bundle successfully. Instead, importing the ES6
module works, but importing the CJS version throws one of two errors during
bundling, depending on whether it's the first attempt to build or a subsequent
attempt:
    Attempted import error: './cjs.js' does not contain a default export (imported as 'cjs').
    or
    TypeError: Cannot assign to read only property 'exports' of object '#'
This appears to be specific to the language features being used. If I replace
the rest/spread with plain destructuring (`({ foo, bar }) => true`), both
files work, they're transpiled and bundled without an error.
webpack version: 4.19.1  
Node.js version: 10.13.0  
Operating System: OS X  
Additional tools: react-scripts