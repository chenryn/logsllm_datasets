Oracle Database 11g/12c
To Amazon Aurora with PostgreSQL Compatibility (9.6.x)
Migration Playbook
Version: 1.1, January 2018
Written by: David Yahalom, Nimrod Keinan
1
© 2017, Amazon Web Services, Inc. or its affiliates. All rights reserved. Document written by David Yahalom and Nimrod
Keinan.
Notices
This document is provided for informational purposes only. It represents AWS’s current product offerings and practices
as of the date of issue of this document, which are subject to change without notice. Customers are responsible for
making their own independent assessment of the information in this document and any use of AWS’s products or
services, each of which is provided “as is” without warranty of any kind, whether express or implied. This document
does not create any warranties, representations, contractual commitments, conditions or assurances from AWS, its
affiliates, suppliers or licensors. The responsibilities and liabilities of AWS to its customers are controlled by AWS
agreements, and this document is not part of, nor does it modify, any agreement between AWS and its customers.
2
Introduction
To migrate an Oracle database to Amazon Aurora with PostgreSQL Compatibility, you usually need to perform
both automated and manual tasks. The automated tasks involve data migration and schema conversion using
the AWS Database Migration Service (AWS DMS) and AWS Schema Conversion Tool (AWS SCT). The manual
tasks involve post-migration “touch-ups” for certain database objects that can’t be migrated automatically.
This whitepaper primarily focuses on the manual aspects of database migration and includes step-by-step
instructions that you can adapt for your own requirements. In this document, we focus on how to manually
migrate specific Oracle database objects and features to Amazon Aurora with PostgreSQL Compatibility
equivalents. We also include a brief overview that explains how to use the AWS Schema Conversion Tool (AWS
SCT) for automatic migrations of schema objects. You can use this document as a supplementary guide for
your database migrations – both as a guide to expand your PostgreSQL competency if you come from an
Oracle database background and as a reference to help build Oracle-comparable functionality in Amazon
Aurora with PostgreSQL compatibility
This document does not yet cover all Oracle Database features and capabilities from a migration perspective.
For the first release, we focus on some of the most important features and will continue to expand the
Playbook document over time. Not all Oracle features have direct and fully compatible equivalents in
PostgreSQL. In these cases, we present our recommendations for the best-possible equivalent features in
Amazon Aurora with PostgreSQL compatibility.
We also plan to expand this document in the future and add new chapters specifically dedicated to advanced
topics such as Oracle security, High Availability and Disaster Recovery, Performance Tuning, and more.
Disclaimer
The various code snippets, commands, guides, best practices, and scripts included in this document should be
used for reference only and are provided as-is without warranty. Please be sure to test all of the code,
commands, best practices, and scripts outlined in this document in a non-production environment first.
Amazon and its affiliates are not responsible for any direct or indirect damage that can occur from the
information contained in this document.
3
Automatic Schema Migration
Help Section
Link Using the AWS Schema Conversion Tool for automatic schema conversion
SQL & PL/SQL (Manual)
Oracle Feature Aurora PostgreSQL Compatibility
Feature
Link Anonymous Block Do Yes
Link Execute Immediate Execute & Prepare Yes
Link DBMS_RANDOM random() Yes*
Link DBMS_OUTPUT RAISE Yes
Link Procedures & Functions Functions Yes*
Link User Defined Functions Functions Yes*
(UDFs)
Link UTL_FILE N/A None
Link JSON Document Support JSON Document Support Yes*
Link OLAP Functions Window Functions Yes
Link PL/SQL Cursors Cursors Yes
Link Single Row & Aggregate Single Row & Aggregate Yes
Functions Functions
Link Merge SQL Merge Yes
Link Create Table As Select (CTAS) Create Table As Select (CTAS) Yes
Link Common Table Expression Common Table Expression Yes
(CTE) (CTE)
Link Insert From Select Insert From Select Yes
Link Inline Views Inline Views Yes
Link DB Hints Query Planning Yes*
4
Tables & Indexes (Manual)
Oracle Feature Aurora PostgreSQL Compatibility
Feature
Link Index Organized Tables (IOTs) PostgreSQL “Cluster” Tables Yes*
Link Common Data Types Common Data Types Yes
Link Table Constraints Table Constraints Yes
Link Table Partitioning including: Table Partitioning including: Yes*
RANGE, LIST, HASH, RANGE, LIST
COMPOSITE, Automatic LIST
Link Exchange and Split Partitions N/A None
Link Temporary Tables Temporary Tables Yes*
Link Unused Columns ALTER TABLE DROP COLUMN Yes
Link Virtual Columns Views and/or Function as a Yes*
Column
Link User Defined Types (UDTs) User Defined Types (UDTs) Yes
Link Read Only Tables and Table Read Only Roles and/or Yes*
Partitions Triggers
Link Index Types Index Types Yes*
Link B-Tree Indexes B-Tree Indexes Yes
Link Composite Indexes Multi-Column Indexes Yes
Link BITMAP Indexes BRIN Indexes Minimal
Link Function-Based Indexes Expression Indexes Yes
Link Local and Global Partitioned Partitioned Indexes Yes*
Indexes
Link Identity Columns Serial Data Type Yes*
Link MVCC MVCC Yes*
(Table and Row Locks) (Table and Row Locks)
Link Character Sets Encoding Yes*
Link Transaction Model Transactional Model Yes*
Link LOBs and SecureFile LOBs LOBs Yes*
Database Objects (Manual)
Oracle Feature Aurora PostgreSQL Compatibility
Feature
Link Materialized Views Materialized Views Yes*
Link Common Data Types Common Data Types Yes
Link Oracle Triggers PostgreSQL Trigger Procedure Yes*
Link Views Views Yes
Link Sequences Sequences Yes
5
Link Database Links PostgreSQL DBLink and Yes*
FDWrapper
6
Database Administration (Manual)
Oracle Feature Aurora PostgreSQL Compatibility
Feature
Link Recovery Manager (RMAN) Amazon Aurora Snapshots Yes
Link Flashback Database Amazon Aurora Snapshots Yes
Link 12c Multi-Tenant Databases Yes*
Architecture: PDBs and CDB
Link Tablespaces and DataFiles Tablespaces Yes*
Link Data Pump pg_dump and pg_restore Yes
Link Resource Manager Separate Amazon Aurora Yes
Clusters
Link Database Users Database Roles Yes
Link Database Roles Database Roles Yes
Link SGA & PGA Memory Memory Buffers Yes
Link V$ Views & the Data System Catalog Tables, Yes*
Dictionary Statistics Collector, Amazon
Aurora Performance Insights
Link Log Miner Logging Options Yes
Link Instance & Database Amazon Aurora Parameter Yes
Parameters (SPFILE) Groups
Link Session Parameters Session Parameters Yes
Link Alert.log (error log) Error Log via AWS Yes
Management Console
Link Automatic and Manual Automatic and Manual Yes
Statistics Collection Statistics Collection
Link Viewing Execution Plans Viewing Execution Plans Yes
7
Automatic Migration of Oracle Schema Objects
Using the AWS Schema Conversion Tool
8
Automatic Schema Migration
[Back to TOC]
This section provides a step-by-step process for using the AWS Schema Conversion Tool (AWS SCT) to migrate
an Oracle database to an Aurora with PostgreSQL compatibility database cluster. Amazon SCT can
automatically migrate most of the database objects.
While this document primarily covers the best practices, feature-parity aspects of manual database
migrations, and Oracle to Amazon Aurora with PostgreSQL compatibility migration best practices, we
recommend using AWS SCT as the first step of the process.
AWS SCT is a downloadable Java utility that runs locally on your computer. It connects to the source and
target databases, scans the source database schema objects (tables, views, indexes, procedures, etc.), and
converts them to the target database objects.
For more information, see
http://docs.aws.amazon.com/SchemaConversionTool/latest/userguide/Welcome.html
9
Download AWS SCT and Install JDBC Drivers
JDBC drivers are required for database connectivity to both the source and target databases.
1. Download SCT:
http://docs.aws.amazon.com/SchemaConversionTool/latest/userguide/CHAP_SchemaConversionTool.Installing.h
tml
2. Download the Oracle JDBC Driver (ojdbc7.jar):
http://www.oracle.com/technetwork/database/features/jdbc/jdbc-drivers-12c-download-1958347.html
3. Download the PostgreSQL JDBC Driver (postgresql-9.4-1204.jdbc42.jar):
https://jdbc.postgresql.org/download.html
Configure SCT for Database Migration
1. Launch SCT.
2. Choose the JAR files path under SCTs Global Settings
3. Click Global Settings > Drivers
4. Add the file path to the Oracle and the PostgreSQL JDBC drivers
5. Use the following filenames:
Oracle JDBC JAR -
ojdbc7.jar
PostgreSQL JDBC JAR -
postgresql-9.4-1204.jdbc42.jar
6. Click OK.
10
AWS SCT – Database Migration Project Configuration
Create a new SCT project which will guide you, step-by-step, through the schema conversion process.
1. Click SCT > File > New Project Wizard
2. Select a source database for migration (the Oracle Database to migrate to Aurora with PostgreSQL
Compatibility).
3. Enter a project name, specify the location of the SCT project files, choose the source database
workload characteristics (OLTP or OLAP), and select the source database engine (Oracle).
11
4. Configure the source database connection properties:
• Server hostname
• Oracle Net Listener port number
• Oracle Database SID
• Privileged username and password. For example, the Oracle user.
system
5. Click Next.
6. Select the source Oracle schema for migration.
12
7. SCT analyzes the source database schema objects and produces the Database Migration
Assessment report. Review the report.
8. Specify the target database configuration:
• Target Database Engine: Amazon Aurora (PostgreSQL compatible).
• Server hostname: Aurora Cluster Endpoint.
• Server port number: 5432 (default PostgreSQL network port).
• Database: The name of the target database that will store the migrated schema objects.
• The privileged target database username and password. Deployment of the converted
schema in the target database will use these credentials.
13
9. Click Finish when you are done. Note that at this stage in the process the migrated target schema
has not yet been deployed to your target database.
10. Explore the AWS SCT Project Main Page and the other information pages. Select Oracle schema
objects from the left Oracle pane to view the Oracle syntax.
Source - Oracle Source - Oracle Target -PostgreSQL Target - PostgreSQL
Schema Details Object Details Object Details Schema Details
14
AWS SCT – Database Migration Assessment
1. Explore the objects in your source database and be sure to note any database objects that SCT
cannot automatically migrate to your target database syntax. SCT flags objects with potential
migration issues with a RED exclamation mark. These objects require manual intervention for
successful migration.
2. Right click the Oracle schema for migration and select Create Report to view the complete
Database Migration Assessment report.
3. Click the Action Items tab. This section of the report provides information about potential
migration issues.
15
4. Click the migration issues highlighted by SCT to view a detailed overview of the exact source syntax
that failed the automatic migration process.
16
AWS SCT – Convert Source to Target Database Syntax
This step converts the source database schema objects to your target database using target database syntax.
1. Right click the Oracle Schema and select Convert Schema.
2. The new schema and objects appear in the right-side pane under the target database. Compare the
source database objects (left-side pane) to the converted target database objects (right-side pane).
Note that the converted schema has not yet been deployed to the target PostgreSQL database.
3. Examine any gaps in objects that AWS SCT could not automatically convert.
17
AWS SCT – Deploy the Converted Schema to the Target Database
1. In the right-side Target Database pane, right click the PostgreSQL schema corresponding to the
source database schema name.
2. Select Apply to database.
3. Click Yes to continue. This step creates the new schema in the target database.
18
Manual Migration and Best Practices of
Oracle Schema Objects and Database Features
19
Migrating from: Oracle Anonymous Block
[Back to TOC]
Overview
Oracle’s PL/SQL is a procedural extension of SQL. The PL/SQL program structure divides the code into blocks
that can be distinguished by the following keywords: , , and .
DECLARE BEGIN EXCEPTION, END
An unnamed PL/SQL code block (code not stored in the database as a procedure, function, or package) is
known as an anonymous block. An anonymous block serves as the basic unit of Oracle PL/SQL and contains
the following code sections:
• The Declarative Section (Optional)
Contains variables (names, data types, and initial values).
• The Executable Section (Mandatory)
Contains executable statements (each block structure must contain at least one executable PL/SQL
statement).
• The Exception-Handling Section (Optional)
Contains elements for handling exceptions or errors in the code.
Examples
Simple structure of an Oracle Anonymous Block:
SQL> SET SERVEROUTPUT ON;
SQL> BEGIN
DBMS_OUTPUT.PUT_LINE('hello world');
END;
/
hello world
PL/SQL procedure successfully completed.
20
Oracle PL/SQL Anonymous blocks can contain advanced code elements such as functions, cursors, dynamic
SQL, and conditional logic. The following anonymous block uses a cursor, conditional logic, and exception-
handling:
SQL> SET SERVEROUTPUT ON;
SQL> DECLARE
v_sal_chk NUMBER;
v_emp_work_years NUMBER;
v_sql_cmd VARCHAR2(2000);
BEGIN
FOR v IN (SELECT EMPLOYEE_ID, FIRST_NAME||' '||LAST_NAME AS
EMP_NAME, HIRE_DATE, SALARY FROM EMPLOYEES)
LOOP
v_emp_work_years:=EXTRACT(YEAR FROM SYSDATE) - EXTRACT (YEAR FROM
v.hire_date);
IF v_emp_work_years>=10 and v.salary ”.
For additional details:
https://docs.oracle.com/cd/B28359_01/appdev.111/b28370/controlstructures.htm#CJAEDEIH
21
Migration to: PostgreSQL DO
[Back to TOC]
Overview
PostgreSQL version 9.6 supports capabilities similar to Oracle’s anonymous blocks. In PostgreSQL, you can
execute PL/pgSQL code that is not stored in the database as an independent code segment using a PL/pgSQL
statement.
DO
PL/pgSQL is a PostgreSQL extension to the ANSI SQL and has many similar elements to Oracle PL/SQL.
PostgreSQL DO uses a similar code structure to an Oracle anonymous block:
• Declarative Section (Optional)
• Executable Section (Mandatory)
• Exception-Handling Section (Optional)
Examples
PostgreSQL DO simple structure:
psql=> SET CLIENT_MIN_MESSAGES = 'debug';
-- Equivalent To Oracle SET SERVEROUTPUT ON
psql=> DO $$
BEGIN
RAISE DEBUG USING MESSAGE := 'hello world';
END $$;
DEBUG: hello world
DO
The PostgreSQL PL/pgSQL statement supports the use of advanced code elements such as functions,
DO
cursors, dynamic SQL, and conditional logic.
22
The following example is a more complex PL/pgSQL code structure converted from Oracle’s “employee
DO
bonus” PL/SQL anonymous block example presented in the previous section:
psql=> DO $$
DECLARE
v_sal_chk DOUBLE PRECISION;
v_emp_work_years DOUBLE PRECISION;
v_sql_cmd CHARACTER VARYING(2000);
v RECORD;
BEGIN
FOR v IN
SELECT employee_id, CONCAT_WS('', first_name, ' ', last_name) AS
emp_name, hire_date, salary
FROM employees
LOOP
v_emp_work_years := EXTRACT (YEAR FROM now()) - EXTRACT (YEAR FROM
v.hire_date);
IF v_emp_work_years >= 10 AND v.salary <= 6000 THEN
RAISE DEBUG USING MESSAGE := CONCAT_WS('', 'Consider a Salary
Raise for: ', v.emp_name);
END IF;
END LOOP;
EXCEPTION
WHEN others THEN
RAISE DEBUG USING MESSAGE := CONCAT_WS('', 'CODE ERR: ',
SQLERRM);
END $$;
For additional information on PostgreSQL DO:
https://www.postgresql.org/docs/current/static/sql-do.html
23
Migrating from: Oracle EXECUTE IMMEDIATE
[Back to TOC]
Overview
Oracle’s statement can be used to parse and execute a dynamic SQL statement or an
EXECUTE IMMEDIATE
anonymous PL/SQL block. It also supports bind variables.
Example
Run a dynamic SQL statement from within a PL/SQL procedure:
1. Create a PL/SQL procedure named .
raise_sal
2. Define a SQL Statement with a dynamic value for the column name included in the where statement.
3. Use the command supplying the two bind variables to be used as part of the
EXECUTE IMMEDIATE
statement:
SELECT
-
amount
-
col_val
CREATE OR REPLACE PROCEDURE raise_sal (col_val NUMBER,
emp_col VARCHAR2, amount NUMBER) IS
col_name VARCHAR2(30);
sql_stmt VARCHAR2(350);
BEGIN
-- determine if a valid column name has been given as input
SELECT COLUMN_NAME INTO col_name FROM USER_TAB_COLS
WHERE TABLE_NAME = 'EMPLOYEES' AND COLUMN_NAME = emp_col;
-- define the SQL statment (with bind variables)
sql_stmt := 'UPDATE employees SET salary = salary + :1 WHERE '
|| col_name || ' = :2';
-- Execute the command
EXECUTE IMMEDIATE sql_stmt USING amount, col_val;
END raise_sal;
/
4. Run the DDL operation from within an command:
EXECUTE IMMEDIATE
EXECUTE IMMEDIATE 'CREATE TABLE link_emp (idemp1 NUMBER, idemp2 NUMBER)';
EXECUTE IMMEDIATE 'ALTER SESSION SET SQL_TRACE TRUE';
5. Run an anonymous block with bind variables using :
EXECUTE IMMEDIATE
raise_sal
EXECUTE IMMEDIATE 'BEGIN (:col_val, :col_name, :amount); END;'
USING 134, 'EMPLOYEE_ID', 10;
For additional details:
https://docs.oracle.com/database/121/LNPLS/dynamic.htm#LNPLS01115
24
Migration to: PostgreSQL PL/pgSQL Execute & Prepare
[Back to TOC]
Overview