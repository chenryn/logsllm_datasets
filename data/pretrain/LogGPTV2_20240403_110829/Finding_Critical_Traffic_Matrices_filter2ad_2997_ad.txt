achieved by 24 critical trafﬁc matrices produced by CritAC.
This demonstrates the advantage of being criticalness aware.
5.2 OSPF Route Optimization
Open Shortest Path First (OSPF) [13] and Intermediate
System-Intermediate System (IS-IS) [3] are the two most
commonly used intra-domain routing protocols today.
In
these protocols, which are functionally identical, each link
is associated with a positive weight, and the length of a path
is deﬁned as the sum of the weights of all links on that path.
Trafﬁc is routed along the shortest path(s). In case of ties
where several outgoing links are on shortest paths to the des-
tination, the ﬂow is split roughly evenly.
Over the years, many methods [8, 14, 10, 6, 2] have been
proposed to obtain a set of link weights that minimizes the
level of congestion in the resulting shortest-path-routed net-
work. We refer to such a method as an OSPF optimizer,
though the resulted weight setting is equally applicable to
IS-IS routing.
In our evaluation, we have used the approach in [8, 9],
which is based on a so-called local search technique [1]. The
method uses heuristics to iteratively improve the weight set-
ting, changing one or a few weights in each iteration. We ran
each problem conﬁguration for 5000 iterations – each taking
a few minutes on average. Since the problem of ﬁnding an
optimal weight setting is NP-hard [8], we cannot guarantee
ﬁnding the true optimum. The quality of the ﬁnal weight
setting is affected by random choices made through the iter-
ations, causing some variance in the quality of the outcome.
To evaluate the performance of different methods in the
context of OSPF route optimization, we have conducted a
number of experiments in both ofﬂine and online settings.
In the ofﬂine setting, we ﬁrst obtain a set of critical trafﬁc
matrices from 1000 input trafﬁc matrices using one of our
algorithms; then we feed the obtained critical trafﬁc matrices
to the OSPF optimizer and compute for a set of OSPF link
weights; we test the performance of these weights on the
same 1000 input trafﬁc matrices. In the online setting, we
optimize routing using critical trafﬁc matrices derived from
the ﬁrst 500 trafﬁc matrices and then test the performance
of the obtained routing conﬁguration on the next 500 trafﬁc
matrices.
As in [10], we pick max-utilization as the performance
metric for route optimization in our evaluation. The utiliza-
tion of a link is deﬁned as the ratio of its load over its ca-
pacity, and the max-utilization is the maximum utilization
of all links in the network. Other works have used more so-
phisticated metrics, such as the total utilization cost of all
links in the network (e.g., [14, 8]). However they are dif-
ﬁcult to interpret and do not provide additional insights for
our purpose, thus are not used. Furthermore, since the exact
value of link utilization is considered proprietary, we nor-
malize the max-utilization by the maximum link utilization
achieved by the default weight setting – InvCap. For ex-
ample, a normalized max-utilization of 0.7 means that the
corresponding weight setting performs 30% (1− 0.7) better
than InvCap.
Figure 4(a) shows the results for the ofﬂine setting when
we take the ﬁrst 1000 trafﬁc matrices as input. We ob-
serve that when the number of critical trafﬁc matrices al-
lowed is big enough (e.g., 12 or 24), CritAC signiﬁcantly
outperforms Hierarchical Head, TopN, and TopConsecN.
In addition, compared to the default weight setting (InvCap),
CritAC is able to reduce max-utilization by over 35%. In-
terestingly, K-means Head performs slightly better than
CritAC, although the difference is very small (below 2%).
This small discrepancy rises because the OSPF optimizer
[9] in our evaluation optimizes the average max-utilization
for the input trafﬁc matrices, which usually produces good,
however not necessarily the best maximum max-utilization
over all trafﬁc matrices.
Figure 4(b) shows the results for the online setting when
we take the ﬁrst 500 trafﬁc matrices as input. Again, we
see that CritAC consistently achieves good performance –
the results are either signiﬁcantly better than or close to that
of alternative methods. Since the results are consistent with
that of ofﬂine setting, it demonstrates that the critical trafﬁc
matrices identiﬁed by CritAC are robust enough for on-line
analysis in the context of route optimization.
Overall, the results in this subsection have suggested that
(a) Trafﬁc demand oversizing ratio
(b) Weighted trafﬁc demand oversizing ratio
(c) Link load oversizing ratio
(d) Weighted link load oversizing ratio
Figure 3. Oversizing ratios for different clustering based methods.
it is sufﬁcient to only use a small number (e.g., 12) of criti-
cal trafﬁc matrices for OSPF route optimization and CritAC
can provide good input for this purpose.
5.3 Network Survivability Analysis
A well engineered network should work well not only
under normal conditions, but also under common failures.
Network survivability analysis is the key network engineer-
ing application that makes this possible. The basic task of
network survivability analysis is to simulate the network un-
der all single or dual shared-risk-device-group failures (e.g.,
link, router, or ﬁber span failures). For a large network, the
possible failure scenarios can be very large. Thus it maybe
either infeasible or computationally very expensive to test all
failure scenarios on a large number of input trafﬁc matrices.
In this section, we examine the performance of using only
the critical trafﬁc matrices for network survivability analy-
sis. Our basic evaluation methodology is as follows. We
ﬁrst use one of our algorithms to obtain a set of critical traf-
ﬁc matrices from an input set of measured trafﬁc matrices;
we then perform survivability analysis based on the output
set of the critical trafﬁc matrices and compare the predicted
performance to the “true” performance when survivability
analysis is based on all measured trafﬁc matrices.
In our evaluation, we use InvCap as the routing conﬁg-
uration, and the max-utilization as our performance metric.
The survivability analysis we perform consists of simulat-
ing all possible single link failures and computing the max-
utilization under each failure scenario. Given a failure sce-
nario f, we use predictedMaxUt(f) and trueMaxUt(f) to
denote the max-utilization computed using the critical traf-
ﬁc matrices and original trafﬁc matrices, respectively. We
then compute the empirical Cumulative Distribution Func-
tion (CDF) for predictedMaxUt(f)/ maxf{trueMaxUt(f)}
(again because the exact value of predictedMaxUt(f) is con-
sidered proprietary).
The results are summarized in Figure 5. To avoid putting
too many curves into the same plot, we partition the compar-
ison into two parts. The left column of Figure 5 compares
CritAC against direct clustering based methods: K-means
Head, Hierarchical Head, and peak-all-element; the right
column compares CritAC against total volume based meth-
ods: TopN, TopConsecN, and Top1. We also vary the num-
ber of critical trafﬁc matrices. In Figure 5, the two plots in
each row shares the same number of critical trafﬁc matrices.
From Figure 5, it is evident that the total volume based
methods tend to underestimate the max-utilization for a
considerable fraction of failure scenarios.
Such under-
estimation can be quite undesirable in network reliabil-
ity analysis in that it may cause serious problems to go
undetected during the analysis process (and become evi-
 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 20 40 60 80 100 120 140 160 180 200Over Sizing RatioNumber of Critical TMsHier. HeadK-means HeadCritAC 0 0.2 0.4 0.6 0.8 1 1.2 20 40 60 80 100 120 140 160 180 200Over Sizing RatioNumber of Critical TMsHier. HeadK-means HeadCritAC 0 0.2 0.4 0.6 0.8 1 1.2 20 40 60 80 100 120 140 160 180 200Over Sizing RatioNumber of Critical TMsHier. HeadK-means HeadCritAC 0 0.2 0.4 0.6 0.8 1 1.2 20 40 60 80 100 120 140 160 180 200Over Sizing RatioNumber of Critical TMsHier. HeadK-means HeadCritACdata demonstrated that a small number (e.g., 12) of critical
trafﬁc matrices sufﬁce to cover all the worst-case scenarios
without being overly conservative.
References
[1] E. H. Aarts and J. K. Lenstra. Local Search in Combinatorial
Optimization. John Wiley & Sons, Inc., 1997.
[2] L. S. Buriol, M. G. C. Resende, C. C. Ribeiro, and M. Thorup.
A memetic algorithms for OSPF routing. In Proceedings of
6th INFORMS Telecom, pages 187–188, 2002.
[3] R. Callon. Use of OSI IS-IS for routing in TCP/IP and
IETF RFC 1195, Dec. 1990. http:
dual environments.
//search.ietf.org/rfc/rfc1195.txt.
[4] Cisco.
Conﬁguring OSPF, 2001.
Documentation at
http://www.cisco.com/univercd/cc/td/doc/
product/software/ios121/121cgcr/ip_c/
ipcprt2/1cdospf.htm.
[5] R. O. Duda, P. E. Hart, and D. G. Stork. Pattern Classiﬁca-
tion. John Wiley & Sons, Inc., 2000.
[6] M. Ericsson, M. Resende, and P. Pardalos. A genetic algo-
rithm for the weight setting problem in OSPF routing. J.
Combinatorial Optimization, 6(3):299–333, 2002.
[7] A. Feldmann, A. Greenberg, C. Lund, N. Reingold, J. Rex-
ford, and F. True. Deriving trafﬁc demands for operational IP
networks: Methodology and experience. IEEE/ACM Trans-
actions on Networking, 9(3):265–279, 2001.
[8] B. Fortz and M. Thorup. Internet trafﬁc engineering by opti-
mizing OSPF weights. In Proceedings of IEEE INFOCOM,
pages 519–528, 2000.
[9] B. Fortz and M. Thorup. Optimizing OSPF/IS-IS weights in a
changing world. IEEE Journal on Selected Areas in Commu-
nications (Special Issue on Recent Advances on Fundamen-
tals of Network Management), 20(4):756–767, 2002.
[10] F. Lin and J. Wang. Minimax open shortest path ﬁrst rout-
ing algorithms in networks supporting the SMDS services. In
Proceedings of IEEE International Conference on Communi-
cations (ICC), volume 2, pages 666–670, 1993.
[11] J. MacQueen. Some methods for classiﬁcation and analy-
sis of multivariate observations. In Proceedings of the Fifth
Berkeley Symposium on Mathematical Statistics and Proba-
bility, volume 1, pages 281–297, 1967.
[12] A. Medina, N. Taft, K. Salamatian, S. Bhattacharyya, and
C. Diot. Trafﬁc matrix estimation: Existing techniques and
new directions.
In Proceedings of ACM SIGCOMM, Aug.
2002.
[13] J. T. Moy. OSPF version 2.
IETF RFC 2328, Apr. 1998.
http://search.ietf.org/rfc/rfc2328.txt.
[14] K. Ramakrishnan and M. Rodriguez. Optimal routing in
shortest-path data networks. Lucent Bell Labs Technical Jour-
nal, 6(1), 1994.
[15] Y. Zhang, M. Roughan, N. Dufﬁeld, and A. Greenberg. Fast
accurate computation of large-scale IP trafﬁc matrices from
link loads. In Proceedings of ACM SIGMETRICS, 2003.
[16] Y. Zhang, M. Roughan, C. Lund, and D. Donoho. An
information-theoretic approach to trafﬁc matrix estimation.
In Proceedings of ACM SIGCOMM, 2003.
(a) ofﬂine performance
(b) online performance
Figure 4. Performance of route optimization.
it
in that
dent later during actual operations). In contrast, the clus-
tering based methods are guaranteed to never underesti-
mate. Among the clustering based methods, CritAC clearly
performs the best
leads to the least amount
of overestimation. Finally, compared with the real max-
utilization, we see that for CritAC with 12 or 24 critical
trafﬁc matrices, maxf predictedMaxUt(f) is very close to
maxf trueMaxUt(f) – the difference is always below 3%.
These results suggest that CritAC can be used to signiﬁ-
cantly reduce the number of trafﬁc matrices that need to be
tested for reliability analysis.
6 Conclusion
In this paper, we deﬁned the critical trafﬁc matrices se-
lection (CritMat) problem. We identiﬁed its properties and
requirements in the context of network design and analy-
sis. Based on these properties, we developed a mathemati-
cal formalization of the problem. We conducted complexity
analysis of CritMat and showed that it is NP-hard. Fur-
thermore, we proposed several clustering-based approxima-
tion algorithms to solve the problem and evaluated and com-
pared their performance using application independent met-
rics. Finally, we applied our techniques to two network en-
gineering applications – OSPF route optimization and net-
work survivability analysis. Our results using real network
 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85TopConsNTopNCritACK-meansHier.MaxUt / MaxUt(InvCap)Method6 critical TMs12 critical TMs24 critical TMs 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85TopConsNTopNCritACK-meansHier.MaxUt / MaxUt(InvCap)Method6 critical TMs12 critical TMs24 critical TMs(a) CritAC vs. direct clustering (6 critical TMs)
(b) CritAC vs. using high-volume TMs (6 critical TMs)
(c) CritAC vs. direct clustering (12 critical TMs)
(d) CritAC vs. using high-volume TMs (12 critical TMs)
(e) CritAC vs. direct clustering (24 critical TMs)
(f) CritAC vs. using high-volume TMs (24 critical TMs)
Figure 5. Performance comparison between CritAC and alternative methods in network survivability
analysis.
 0 10 20 30 40 50 60 70 80 90 100 0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4percentage of failure scenarios (%)predictedMaxUt(f) / maxf { trueMaxUt(f) }TrueCritACHier. HeadK-means HeadPeak-all-elements 0 10 20 30 40 50 60 70 80 90 100 0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4percentage of failure scenarios (%)predictedMaxUt(f) / maxf { trueMaxUt(f) }TrueCritACTopNTopConsecNTop1 0 10 20 30 40 50 60 70 80 90 100 0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4percentage of failure scenarios (%)predictedMaxUt(f) / maxf { trueMaxUt(f) }TrueCritACHier. HeadK-means HeadPeak-all-elements 0 10 20 30 40 50 60 70 80 90 100 0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4percentage of failure scenarios (%)predictedMaxUt(f) / maxf { trueMaxUt(f) }TrueCritACTopNTopConsecNTop1 0 10 20 30 40 50 60 70 80 90 100 0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4percentage of failure scenarios (%)predictedMaxUt(f) / maxf { trueMaxUt(f) }TrueCritACHier. HeadK-means HeadPeak-all-elements 0 10 20 30 40 50 60 70 80 90 100 0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4percentage of failure scenarios (%)predictedMaxUt(f) / maxf { trueMaxUt(f) }TrueCritACTopNTopConsecNTop1