### 5.2 OSPF Route Optimization

Open Shortest Path First (OSPF) [13] and Intermediate System-Intermediate System (IS-IS) [3] are the two most commonly used intra-domain routing protocols today. In these functionally identical protocols, each link is assigned a positive weight, and the length of a path is defined as the sum of the weights of all links on that path. Traffic is routed along the shortest path(s). In the event of ties, where multiple outgoing links are on the shortest paths to the destination, the flow is split approximately evenly.

Over the years, numerous methods [8, 14, 10, 6, 2] have been proposed to determine a set of link weights that minimizes congestion in the resulting shortest-path-routed network. Such a method is referred to as an OSPF optimizer, and the resulting weight settings are equally applicable to IS-IS routing.

In our evaluation, we utilized the approach described in [8, 9], which employs a local search technique [1]. This method uses heuristics to iteratively improve the weight setting by changing one or a few weights in each iteration. Each problem configuration was run for 5000 iterations, with each iteration taking a few minutes on average. Since finding an optimal weight setting is NP-hard [8], we cannot guarantee finding the true optimum. The quality of the final weight setting is influenced by random choices made during the iterations, leading to some variance in the outcome.

To evaluate the performance of different methods in the context of OSPF route optimization, we conducted experiments in both offline and online settings. In the offline setting, we first obtained a set of critical traffic matrices from 1000 input traffic matrices using one of our algorithms. We then fed these critical traffic matrices to the OSPF optimizer to compute a set of OSPF link weights. The performance of these weights was tested on the same 1000 input traffic matrices. In the online setting, we optimized routing using critical traffic matrices derived from the first 500 traffic matrices and then tested the performance of the obtained routing configuration on the next 500 traffic matrices.

As in [10], we chose max-utilization as the performance metric for route optimization in our evaluation. The utilization of a link is defined as the ratio of its load over its capacity, and the max-utilization is the maximum utilization of all links in the network. Other works have used more sophisticated metrics, such as the total utilization cost of all links in the network (e.g., [14, 8]). However, these metrics are difficult to interpret and do not provide additional insights for our purpose, so they were not used. Furthermore, since the exact value of link utilization is considered proprietary, we normalized the max-utilization by the maximum link utilization achieved by the default weight setting – InvCap. For example, a normalized max-utilization of 0.7 means that the corresponding weight setting performs 30% (1 - 0.7) better than InvCap.

Figure 4(a) shows the results for the offline setting when we take the first 1000 traffic matrices as input. We observe that when the number of critical traffic matrices is sufficiently large (e.g., 12 or 24), CritAC significantly outperforms Hierarchical Head, TopN, and TopConsecN. Additionally, compared to the default weight setting (InvCap), CritAC is able to reduce max-utilization by over 35%. Interestingly, K-means Head performs slightly better than CritAC, although the difference is very small (below 2%). This minor discrepancy arises because the OSPF optimizer [9] in our evaluation optimizes the average max-utilization for the input traffic matrices, which usually produces good, but not necessarily the best, maximum max-utilization over all traffic matrices.

Figure 4(b) shows the results for the online setting when we take the first 500 traffic matrices as input. Again, we see that CritAC consistently achieves good performance – the results are either significantly better than or close to those of alternative methods. Since the results are consistent with those of the offline setting, it demonstrates that the critical traffic matrices identified by CritAC are robust enough for online analysis in the context of route optimization.

Overall, the results in this subsection suggest that it is sufficient to use a small number (e.g., 12) of critical traffic matrices for OSPF route optimization, and CritAC can provide good input for this purpose.

### 5.3 Network Survivability Analysis

A well-engineered network should perform well not only under normal conditions but also under common failures. Network survivability analysis is a key application that ensures this. The basic task of network survivability analysis is to simulate the network under all single or dual shared-risk-device-group failures (e.g., link, router, or fiber span failures). For a large network, the possible failure scenarios can be very large, making it infeasible or computationally expensive to test all failure scenarios on a large number of input traffic matrices.

In this section, we examine the performance of using only the critical traffic matrices for network survivability analysis. Our basic evaluation methodology is as follows: We first use one of our algorithms to obtain a set of critical traffic matrices from an input set of measured traffic matrices. We then perform survivability analysis based on the output set of critical traffic matrices and compare the predicted performance to the "true" performance when survivability analysis is based on all measured traffic matrices.

In our evaluation, we use InvCap as the routing configuration and max-utilization as our performance metric. The survivability analysis we perform consists of simulating all possible single link failures and computing the max-utilization under each failure scenario. Given a failure scenario \( f \), we use \( \text{predictedMaxUt}(f) \) and \( \text{trueMaxUt}(f) \) to denote the max-utilization computed using the critical traffic matrices and original traffic matrices, respectively. We then compute the empirical Cumulative Distribution Function (CDF) for \( \frac{\text{predictedMaxUt}(f)}{\max_f \text{trueMaxUt}(f)} \) (again, because the exact value of \( \text{predictedMaxUt}(f) \) is considered proprietary).

The results are summarized in Figure 5. To avoid cluttering the plot with too many curves, we partition the comparison into two parts. The left column of Figure 5 compares CritAC against direct clustering-based methods: K-means Head, Hierarchical Head, and peak-all-element. The right column compares CritAC against total volume-based methods: TopN, TopConsecN, and Top1. We also vary the number of critical traffic matrices. In Figure 5, the two plots in each row share the same number of critical traffic matrices.

From Figure 5, it is evident that the total volume-based methods tend to underestimate the max-utilization for a considerable fraction of failure scenarios. Such underestimation can be undesirable in network reliability analysis, as it may cause serious problems to go undetected during the analysis process and become evident later during actual operations. In contrast, the clustering-based methods are guaranteed to never underestimate. Among the clustering-based methods, CritAC clearly performs the best and leads to the least amount of overestimation. Finally, compared with the real max-utilization, we see that for CritAC with 12 or 24 critical traffic matrices, \( \max_f \text{predictedMaxUt}(f) \) is very close to \( \max_f \text{trueMaxUt}(f) \) – the difference is always below 3%.

These results suggest that CritAC can be used to significantly reduce the number of traffic matrices that need to be tested for reliability analysis.

### 6 Conclusion

In this paper, we defined the critical traffic matrices selection (CritMat) problem. We identified its properties and requirements in the context of network design and analysis. Based on these properties, we developed a mathematical formalization of the problem. We conducted a complexity analysis of CritMat and showed that it is NP-hard. Furthermore, we proposed several clustering-based approximation algorithms to solve the problem and evaluated and compared their performance using application-independent metrics. Finally, we applied our techniques to two network engineering applications: OSPF route optimization and network survivability analysis. Our results using real network data demonstrated that a small number (e.g., 12) of critical traffic matrices suffice to cover all the worst-case scenarios without being overly conservative.