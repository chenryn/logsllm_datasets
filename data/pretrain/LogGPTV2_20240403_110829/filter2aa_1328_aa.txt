1
Google Drive 上传⼯具编写
有⼀天，有⼈找我帮忙写⼀个⼯具，被我义正⾔辞的拒绝了。我可不帮⼈写⼯具，我只是爱学习。 
这部分内容，官⽅⽂档写得很是清楚。Google 提供的 APIs 访问是基于 Oauth2.0 认证的，其流程可以
⼤致分为以下⼏个步骤： 
1. 客户端 App 发起认证（若⽤户没有登录，则需要先登录） 
2. 弹出授权⻚⾯，⽤户点击允许后，Google 认证服务器给我们返回⼀个授权码（Authorization 
code） 
3. 客户端获取到授权码以后，⽤授权码向认证服务器请求 Access Token 
4. 服务器验证授权码⽆误后返回 Access Token ⾄客户端 
5. 拿到 Access Token 以后，就可以访问 Google APIs 了（其实这⾥还会返回⼀个Refresh token） 
⼤家直接看下⾯的图可能会⽐较好理解⼀点： 
上⾯的流程只是基于第⼀次获取 Access Token 的情况，因为 Access Token 是有期限的，默认是1个⼩
时，Access Token 过期之后，就需要通过 Refresh Token 来向 Google 认证服务器申请⼀个新的 
Access token，不需要经历上⾯的1,2,3步。 
0x00 基本认证 
2
Refresh Token 并不是⼀直有效的，在下⾯的⼏种情况下将会失效： 
⽤户撤销了对应⽤程序的授权 
该 Refresh Token 已超过 6 个⽉未使⽤ 
⽤户修改了密码，并且 Refresh Token 授权的 Scope 包含了 Gmail 
⽤户账号的 Refresh Token 数量已超出最⼤数量 
⽤户属于具有有效会话控制策略的 Google Cloud Platform 组织 
⽬前每个⽤户账号每个授权凭证有 25 个 Refresh Token 的数量限制，如果超过了这个限制，当你新建
⼀个 Refresh token 的时候将会使最早创建那个失效。⼀般来说，我们在经过⽤户授权，拿到授权码请
求到 Refresh Token 后，必须把它缓存起来，以便后续更新 Access Token。 
因此在实际使⽤时，使⽤ Refresh Token 来申请 Access Token 即可。 
登录 Google，访问 https://console.cloud.google.com/cloud-resource-manager?organizationId=0 
点击创建项⽬ 
0x01 Refresh Token 期限 
●
●
●
●
●
0x02 实操获取 Token 
2.1 创建应⽤及 OAuth 客户端 ID 
3
项⽬名称可⾃定义。创建后进⼊ 【API 和服务】-> 【OAuth 同意屏幕】 
4
5
完成之后，进⼊【凭证】创建 OAuth 客户端 ID。 
应⽤类型选择【桌⾯应⽤】-> 【创建】。 
成功获取到想要的客户端 ID 和 客户端密钥。 
还有两步，差点忘了。 
6
选择【库】，搜索 【Google Drive API】-> 【启⽤】 
组装⼀下连接，放⼊浏览器中访问： 
2.2 获取 Authorization code 
Plain Text
复制代码
https://accounts.google.com/o/oauth2/auth?client_id=[Application Client 
Id]&redirect_uri=http://localhost&scope=[Scopes]&response_type=code
1
7
由于我这⾥已经登录了账号，因此直接点⼊账号即可。 
8
成功获取 code。 
关于常⽤的 Scope 
POST 请求以下内容： 
2.3 获取 Access Token 和 Refresh Token 
Scope 
描述 
https://www.googleapis.com/a
uth/drive.file 
对应⽤程序创建或打开的⽂件进⾏逐个访问 
https://www.googleapis.com/a
uth/drive 
访问⽤户所有⽂件的完全、允许的范围。只有在严格需要的情
况下，才会申请这个范围。 
https://www.googleapis.com/a
uth/drive.appdata 
允许访问 应⽤程序数据⽂件夹 
9
成功获取到两个 Token。 
由于每个 Access Token 有效时间很短。因此当 Access Token 过期后，服务器需要使⽤ Refresh 
Token 来获取新的 Access Token 。 
2.4 通过 Refresh Token 获取 Access Token 
Plain Text
复制代码
https://accounts.google.com/o/oauth2/token
httpBody:
code={0}&client_id={1}&client_secret={2}&redirect_uri=
{3}&grant_type=authorization_code
1
2
3
4
Plain Text
复制代码
https://accounts.google.com/o/oauth2/token
httpBody:
refresh_token={0}&client_id={1}&client_secret=
{2}&grant_type=refresh_token
1
2
3
4
10
因此我们需要将  refresh_token 进⾏保存。 
通过  System.Diagnostics.Process.Start(url) 来启动默认浏览器进⾏认证。 
重定向 URL 是通过 HttpListener 起⼀个监听，也可以直接起 Socket 进⾏监听。这样做是为了⽅便获
取 code。 
在获取 code 后，就可以获取 Token 了。 
0x03 代码实现获取 Token 
C#
复制代码
public void GetGoogleAuthorizationCode()
{
    string scope = "https://www.googleapis.com/auth/drive.file 
https://www.googleapis.com/auth/drive 
https://www.googleapis.com/auth/drive.appdata";
    string url = 
string.Format("https://accounts.google.com/o/oauth2/auth?client_id=
{0}&redirect_uri={1}&scope={2}&response_type=code",
                               HttpUtility.UrlEncode(client_id),
                               HttpUtility.UrlEncode(redirectUrl),
                               HttpUtility.UrlEncode(scope)
                              );
    System.Diagnostics.Process.Start(url);
}
1
2
3
4
5
6
7
8
9
10
11
C#
复制代码
public string[] GetGoogleToken(string code)
{
    string[] token = new string[] { };
    string url = "https://accounts.google.com/o/oauth2/token";
    string httpBody = string.Format("code={0}&client_id=
{1}&client_secret={2}&redirect_uri={3}&grant_type=authorization_code",
                                    HttpUtility.UrlEncode(code),
                                    HttpUtility.UrlEncode(client_id),
                                    HttpUtility.UrlEncode(client_secret),
                                    HttpUtility.UrlEncode(redirectUrl)
                                   );
    try
    {
        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
        request.Method = "POST";
        request.ContentType = "application/x-www-form-urlencoded";
        using (var writer = new StreamWriter(request.GetRequestStream()))
        {
            writer.Write(httpBody);
        }
        HttpWebResponse response = 
(HttpWebResponse)request.GetResponse();
        using (var reader = new 
StreamReader(response.GetResponseStream()))
        {
            string result = reader.ReadToEnd();
            Console.WriteLine(result);
        }
    }
    catch (WebException ex)
    {
        HttpWebResponse responseEx = ex.Response as HttpWebResponse;
        using (var reader = new 
StreamReader(responseEx.GetResponseStream()))
        {
            string result = reader.ReadToEnd();
            Console.WriteLine(result);
        }
        Console.WriteLine();
    }
    return token;
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
12
https://developers.google.com/drive/api/v3/reference 
https://developers.google.com/drive/api/v3/reference/files 
由于官⽅已经更新⾄ V3 版本，但很多例⼦都是使⽤ V2 来讲述，因此这⾥我就直接使⽤ V3 版本进⾏演
示。 
此⽅法通过两个单独的 URI 提供⽂档数据上传功能。更多详情，请参阅⽂件数据上传⽂档。 
上传 URI，⽤于⽂档数据上传请求 
元数据 URI，仅⽤于元数据请求 
0x04 上传流程 
4.1 [⽂件 -> 创建] API 要求 
4.1.1 HTTP 请求 
●
●
4.1.2 请求参数 
}
42
C#
复制代码
POST https://www.googleapis.com/upload/drive/v3/files
1
C#
复制代码
POST https://www.googleapis.com/drive/v3/files
1
13
这些参数都是可选参数 
从上述的请求参数 uploadType 来看，可以执⾏三种类型的上传： 
1. 简单上传 ( uploadType=media)：使⽤此上传类型可快速传输⼩型⽂件（5 MB 或更少），⽽⽆需
4.1.3 请求正⽂ 
4.2 上传类型的选择 
参数名称 
类型 
描述 
必需的查询参数 
uploadType 
strin
g 
对URI的上传请求的类型。如果您正在上传数据（使⽤URI），则此
字段是必需的。如果您正在创建仅元数据⽂件，则不需要此字段。 
media-简单上传。仅⽂档数据，不上传任何元数据。 
multipart-分段上传。在⼀个请求中上传⽂档数据及其元数据。 
resumable-可恢复上传。以可恢复的⽅式上传⽂件，⾄少两个
请求，其中第⼀个请求包含元数据。 
●
●
●
可选查询参数 
ignoreDefaultVisibili
ty
bool
ean 
是否忽略域对已创建⽂件的默认可⻅性设置。(默认: false) 
includePermissions
ForView 
strin
g 
是否在新的 head 版本中设置 'keepForever' 字段。(默认: false) 
ocrLanguage 
strin
g 
图像导⼊期间 OCR 处理的语⾔提示（ISO 639-1 代码）。 
supportsAllDrives 
bool
ean 
请求的应⽤程序是否同时⽀持“我的云端硬盘”和共享云端硬盘。(默
认: false) 
useContentAsIndex
ableText 
bool
ean 
是否将上传的内容⽤作可索引⽂本。(默认: false) 
参数名称 
类型 
描述 
name 
string 
⽂件的名称。这在⽂件夹中不⼀定是唯⼀的。 
description 
string 
⽂件的简短描述 
14
提供元数据。 
2. 分段上传 ( uploadType=multipart)：使⽤此上传类型可在单个请求中快速传输⼩⽂件（5 MB 或更
少）和描述⽂件的元数据。 
3. 可恢复上传 ( uploadType=resumable)：对于⼤⽂件（⼤于 5 MB）以及⽹络中断的可能性很⾼的情
况（例如从移动应⽤程序创建⽂件时），请使⽤此上传类型（可断点续传）。 
写这类⼯具，肯定是要传输⼤⽂件的。因此毫不犹豫的选择 Resumable 类型 
此协议允许在通信故障中断数据流后恢复上传操作。它可以在发⽣⽹络故障时减少带宽使⽤，因为在恢
复上传时，可实现断点续传。 
使⽤可恢复上传的步骤包括： 
1.
开始⼀个可恢复的会话 ：向包含  /upload/ 的 URL 发起请求，如果有元数据，则⼀并发送。 
2.
保存可恢复会话 URI ：保存初始请求响应中返回的会话 URI；后续的请求将会⽤到该会话 URL。 
3.
上传⽂件 ：将⽂档数据发送到可恢复会话 URI。 
此外，使⽤可恢复上传的应⽤程序需要⽤⾃定义代码来实现恢复中断的上传。如果上传中断，则需要获
取上传了多少数据，然后从该点继续上传。 
注意：可恢复会话 URI 会在申请的⼀周后过期。 
要启动可恢复上传，需要向包含  /upload/ 的 URI 发出 POST 或 PUT 请求，并添加查询参数  uploa
dType=resumable ，例如： 
对于这个请求，要嘛 body 为空，要嘛 body 只能包含元数据。在获取会话 URL 后，再传输要上传的实
际数据。 
在该请求中，需要使⽤以下 Http 标头: 
X-Upload-Content-Typ ：设置为后续请求中要传输的数据的 MIME 类型。 
4.3 使⽤ Resumable 上传类型 
4.3.1 启动可恢复会话 
●
C#
复制代码
POST https://www.googleapis.com/upload/drive/v3/files?
uploadType=resumable
1
15