}
fmt.Println()
}
//编写一个主函数测试，测试
funcmain() {
//先创建一个队列
queue :=&Queue{
maxSize: 5,
front : -1,
rear : -1,
}
varkey string
varval int
for{
fmt.Println("1. 输入add 表示添加数据到队列")
fmt.Println("2. 输入get 表示从队列获取数据")
fmt.Println("3. 输入show 表示显示队列")
fmt.Println("4. 输入exit 表示显示队列")
fmt.Scanln(&key)
switch key {
case"add":
fmt.Println("输入你要入队列数")
fmt.Scanln(&val)
err :=queue.AddQueue(val)
iferr!= nil {
fmt.Println(err.Error())
} else{
fmt.Println("加入队列ok")
}
case"get":
val,err :=queue.GetQueue()
iferr!= nil {
fmt.Println(err.Error())
} else{
fmt.Println("从队列中取出了一个数=",val)
}
case"show":
queue.ShowQueue()
case"exit":
os.Exit(0)
}
}
}
对上面代码的小结和说明：
1） 上面代码实现了基本队列结构，但是没有有效的利用数组空间
2） 请思考，如何使用数组 实现一个环形的队列
20.5.4 数组模拟环形队列
分析思路:
1) 什么时候表示队列满 (tail +1) %maxSize =hed
2) tail== head 表示空
3) 初始化时， tail=0head = 0
4) 怎么统计该队列有多少个元素 (tail +maxSize- head ) %maxSize
代码实现：
package main
import(
"fmt"
"errors"
"os"
)
//使用一个结构体管理环形队列
type CircleQueue struct {
maxSizeint// 4
array [5]int// 数组
head int//指向队列队首 0
tailint //指向队尾 0
}
//如队列 AddQueue(push) GetQueue(pop)
//入队列
func(this *CircleQueue) Push(val int) (err error){
ifthis.IsFull() {
return errors.New("queuefull")
}
//分析出 this.tail 在队列尾部，但是包含最后的元素
this.array[this.tail]= val //把值给尾部
this.tail=(this.tail +1) %this.maxSize
return
}
//出队列
func(this *CircleQueue) Pop()(val int, err error) {
ifthis.IsEmpty() {
return 0,errors.New("queueempty")
}
//取出,head 是指向队首，并且含队首元素
val =this.array[this.head]
this.head =(this.head +1) %this.maxSize
return
}
//显示队列
func(this *CircleQueue) ListQueue() {
fmt.Println("环形队列情况如下：")
//取出当前队列有多少个元素
size:=this.Size()
ifsize== 0{
fmt.Println("队列为空")
}
//设计一个辅助的变量，指向 head
tempHead :=this.head
fori :=0; i = newHeroNode.no {
//说明newHeroNode 就应该插入到temp 后面
break
} elseiftemp.next.no== newHeroNode.no {
//说明我们额链表中已经有这个no,就不然插入.
flag =false
break
}
temp= temp.next
}
if!flag {
fmt.Println("对不起，已经存在no=",newHeroNode.no)
return
} else{
newHeroNode.next=temp.next
temp.next=newHeroNode
}
}
//显示链表的所有结点信息
funcListHeroNode(head *HeroNode) {
//1. 创建一个辅助结点[跑龙套, 帮忙]
temp:= head
// 先判断该链表是不是一个空的链表
iftemp.next== nil{
fmt.Println("空空如也。。。。")
return
}
//2. 遍历这个链表
for{
fmt.Printf("[%d ,%s ,%s]==>", temp.next.no,
temp.next.name, temp.next.nickname)
//判断是否链表后
temp= temp.next
iftemp.next== nil{
break
}
}
}
funcmain() {
//1. 先创建一个头结点,
head :=&HeroNode{}
//2. 创建一个新的 HeroNode
hero1:=&HeroNode{
no:1,
name: "宋江",
nickname: "及时雨",
}
hero2:=&HeroNode{
no:2,
name: "卢俊义",
nickname: "玉麒麟",
}
hero3:=&HeroNode{
no:3,
name: "林冲",
nickname: "豹子头",
}
hero4:=&HeroNode{
no:3,
name: "吴用",
nickname: "智多星",
}
//3. 加入
InsertHeroNode2(head, hero3)
InsertHeroNode2(head, hero1)
InsertHeroNode2(head, hero2)
InsertHeroNode2(head, hero4)
//4. 显示
ListHeroNode(head)
}
 删除结点：
20.6.4 双向链表的应用实例
 示意图
 代码实现
package main
import(
"fmt"
)
//定义一个 HeroNode
type HeroNodestruct {
no int
name string
nicknamestring
pre *HeroNode //这个表示指向前一个结点
next *HeroNode//这个表示指向下一个结点
}
//给双向链表插入一个结点
//编写第一种插入方法，在单链表的最后加入.[简单]
funcInsertHeroNode(head *HeroNode, newHeroNode *HeroNode) {
//思路
//1. 先找到该链表的最后这个结点
//2. 创建一个辅助结点[跑龙套, 帮忙]
temp:= head
for{
iftemp.next== nil{ //表示找到最后
break
}
temp= temp.next// 让temp 不断的指向下一个结点
}
//3. 将 newHeroNode 加入到链表的最后
temp.next=newHeroNode
newHeroNode.pre= temp