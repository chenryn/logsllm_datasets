title:TIFF: Using Input Type Inference To Improve Fuzzing
author:Vivek Jain and
Sanjay Rawat and
Cristiano Giuffrida and
Herbert Bos
TIFF: Using Input Type Inference To Improve Fuzzing
Vivek Jain
International Institute of Information Technology
Hyderabad, India
PI:EMAIL
Cristiano Giuffrida
Vrije Universiteit
Amsterdam, NL
PI:EMAIL
ABSTRACT
Developers commonly use fuzzing techniques to hunt down all
manner of memory corruption vulnerabilities during the testing
phase. Irrespective of the fuzzer, input mutation plays a central role
in providing adequate code coverage, as well as in triggering bugs.
However, each class of memory corruption bugs requires a different
trigger condition. While the goal of a fuzzer is to find bugs, most
existing fuzzers merely approximate this goal by targeting their
mutation strategies toward maximizing code coverage.
In this work, we present a new mutation strategy that maximizes
the likelihood of triggering memory-corruption bugs by generating
fewer, but better inputs. In particular, our strategy achieves bug-
directed mutation by inferring the type of the input bytes. To do
so, it tags each offset of the input with a basic type (e.g., 32-bit
integer, string, array etc.), while deriving mutation rules for specific
classes of bugs. We infer types by means of in-memory data-structure
identification and dynamic taint analysis, and implement our novel
mutation strategy in a fully functional fuzzer which we call TIFF
(Type Inference-based Fuzzing Framework). Our evaluation on real-
world applications shows that type-based fuzzing triggers bugs much
earlier than existing solutions, while maintaining high code coverage.
For example, on several real-world applications and libraries (e.g.,
poppler, mpg123 etc.), we find real bugs (with known CVEs) in
almost half of the time and upto an order of magnitude fewer inputs
than state-of-the-art fuzzers.
CCS CONCEPTS
• Security and privacy  Software security engineering;
KEYWORDS
Fuzzing, vulnerability/bug detection, Taint-flow analysis, security,
type inference, data-structure Identification
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6569-7/18/12. . . $15.00
https://doi.org/10.1145/3274694.3274746
505
Sanjay Rawat
Vrije Universiteit
Amsterdam, NL
PI:EMAIL
Herbert Bos
Vrije Universiteit
Amsterdam, NL
PI:EMAIL
ACM Reference Format:
Vivek Jain, Sanjay Rawat, Cristiano Giuffrida, and Herbert Bos. 2018. TIFF:
Using Input Type Inference To Improve Fuzzing. In 2018 Annual Computer
Security Applications Conference (ACSAC ’18), December 3–7, 2018, San
Juan, PR, USA. ACM, New York, NY, USA, 13 pages. https://doi.org/10.
1145/3274694.3274746
INTRODUCTION
1
Ever since Barton Miller introduced the concept of fuzzing almost 3
decades ago [35], fuzzing has played a vital role in discovering bugs
and evolved from a "dumb" (but effective) software testing technique
to a range of sophisticated, "smart" methods for the systematic
security analysis of real-world software [10, 12, 13, 22, 24, 26, 40,
47, 50, 51].
Irrespective of the complexity and nature of the analysis, most
modern fuzzers at heart consist of very similar building blocks to
implement an evolutionary fuzzing strategy. Specifically, at their
core, they all contain a component that generates inputs for each
new test iteration by mutating the inputs of the previous iterations.
Likewise, most fuzzers have a component to assess how well a set of
input bytes performs with respect to some objective. The objective
of the mutation may differ, depending on the fuzzing strategy. For
instance, for directed fuzzing, the mutation needs to overcome the
challenge of path diversion, where the mutation operation should
generate inputs that drive the execution of the application towards a
target, whereas for coverage-based fuzzing, the mutation operation
should generate a diverse set of inputs to execute as many different
paths in the application as possible. As a result, mutation in directed
fuzzing is typically more constrained by design. Coverage-based
fuzzing, on the other hand, is more welcoming to different mutation
strategies while adhering to a set of coverage-oriented heuristics. Of
course, the freedom to mutate inputs can easily lead to the generation
of many uninteresting or invalid inputs for every interesting one [18],
and as a result, there have been several attempts to mutate more
sensibly in coverage-based fuzzing [10, 13, 40, 47]. However, in
this paper we will show that even the most advanced fuzzers still
generate a lot of useless inputs and because of this fail to satisfy the
specific conditions for triggering a bug. We then demonstrate how
knowledge of types helps overcome this issue.
While the ultimate aim of fuzzing is to find bugs, most mutation
strategies in coverage-based fuzzers focus on modifying bytes of
an input such that the program executes previously unseen code.
For example, Driller [47] relies on concolic execution to find and
solve branch constraints to get new inputs that execute different
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Vivek Jain, Sanjay Rawat, Cristiano Giuffrida, and Herbert Bos
paths. Similarly, VUzzer [40] uses dynamic taint analysis (DTA) to
detect bytes (“offsets”) in the input that end up as operands in cmp
instructions and changes them to trigger new paths. However, the
mutation of most input bytes still relies on random, input format-
agnostic values.
The key insight in this paper is that in the end, in existing solutions
it is exactly this random mutation that triggers the bug conditions—
mostly by brute forcing many bytes. In other words, while the smart
mutation strategies in today’s fuzzers help achieve good code co-
verage, they still spend a huge amount of mutation effort on trig-
gering a bug by randomly trying, say, hundreds or thousands of bit
flips.
In contrast, we propose a new mutation strategy that uses input
type inference to address this aspect of input mutation not only for
code-coverage maximization, but also for maximizing the likelihood
of triggering memory corruption bugs. In particular, we show that
by inferring types for every offset of the input, we can prioritize not
just important offsets, but also the values at those offsets to improve
coverage of both code and bugs (Section 3).
For instance, to achieve good code coverage, we determine which
input bytes influence the program’s control flow (e.g., end up as
operands in cmp instructions) and mutate them in accordance with
their inferred types. Thus, we modify an 8-bit integer to adhere to
their types: the integer may take several interesting values in between
0 and 256. Doing so reduces the number of runs with invalid inputs
and covers more code with the same number of inputs. Likewise, for
bug detection, the same type inference allows us to mutate certain
offsets of the input to trigger certain classes of bugs. For instance,
an integer overflow, by definition, involves data of type INT. If we
can infer that certain bytes in the input are of type INT, we can
mutate them with interesting INT values (e.g., a very large integer)
to increase the chance of an integer overflow.
To infer the types of offsets in the input, we use in-memory data
structure identification (DSI) techniques to identify the types of each
memory address used by the application, and dynamic taint analysis
(DTA) to map what input bytes end up in what memory locations. By
combining these two mappings, we associate a type with each byte or
combination of bytes of the tainted input (Section 4). Our prototype
implementation, TIFF, currently builds on two existing dynamic
type inference methods [32, 45], but is agnostic to the particular
method used and can work with other DSI techniques as well. The
types that we consider (infer) in this paper are integers of size 8-, 16-
and 32-bits (without inferring signedness) and struct/arrays
of these basic types. For few cases, we are able to infer signedness of
the offsets precisely (thanks to the technique, stated in Reward [32]).
As we shall see, by mutating inputs in a type-consistent manner
(Section 5), TIFF triggers bugs much earlier than other systems
by focusing on the most interesting offsets and values in the input.
Ultimately, TIFF shows that type-inference techniques can help
reduce the gap between grammar-based generational fuzzers (which
are more effective thanks to knowledge of the input format) and
modern mutational fuzzers (which can better support arbitrary real-
world applications with unknown input format, at the cost of a less
efficient fuzzing strategy).
Focusing on common low-level bugs such as integer and buf-
fer overflows, we evaluated our TIFF prototype on two datasets:
LAVA-M [18] and MA (miscellaneous applications, which consists
of several real-world applications and libraries (see Table 2). Our
evaluation shows that type-based mutation triggers bugs an order of
magnitude faster than state-of-the-art fuzzers (Section 7).
This paper makes the following contributions:
• We motivate the issue of performing mutation more effecti-
vely by finding gaps in the way modern fuzzers perform
mutation.
• By applying the existing input reverse-engineering and DSI
techniques, we present a new type inference-based mutation
strategy that enhances code coverage as well as the probability
of triggering memory corruption bugs.
• We implement the proposed technique in a fully functional
fuzzer, called TIFF, which will be made open source soon (up-
dates can be found on https://www.vusec.net/projects/#testing).
• We evaluate TIFF on several real-world applications to empi-
rically show its effectiveness.
2 MOTIVATION
In this section, we provide background on evolutionary fuzzers to
set the stage for the technique proposed in this paper. Moreover, we
evidence the limitations of current state-of-the-art fuzzing techniques
by means of a motivating example.
2.1 Evolutionary Fuzzing
Evolutionary fuzzing is a special case of the application of evoluti-
onary algorithms for input generation [30]. Like any evolutionary
algorithm, evolutionary fuzzing involves mutation operators, fitness
criterion, and a feedback loop to generate newer generations of
inputs.
As an example, AFL [51] is a state-of-the-art evolutionary fuzzer
that uses genetic algorithms to drive its input generation. In AFL, the
fitness criterion for an input is its ability to execute a newer edge in
the control-flow graph. With its simple fitness criterion and mutation
strategy, AFL’s feedback loop selects inputs that in one run have
discovered new edges for the next generation. It should be noted that
AFL has no feedback on its mutation strategy, i.e., it does not know
where in the input to mutate to maximize the chance of discovering
new basic blocks. This causes AFL to waste a lot of mutation time
on invalid/uninteresting inputs. AFLFast [10] addresses this problem
by assigning a probability to each input based on how often paths are
taken (high- or low-frequency) and uses power schedules to select
inputs for mutation. However, it still does not solve another common
problem for fuzzers, which is how to locate the most appropriate
offsets in the inputs to mutate. A more recent solution, VUzzer [40],
addressed this problem of finding interesting offsets for mutation by
making use of dynamic taint analysis (DTA).
VUzzer is an evolutionary fuzzer that fuels its evolutionary fuz-
zing loop by considering data- and control-flow features of the
application being fuzzed. VUzzer selectively applies DTA to check
which bytes in the input reach instructions such as cmp, which com-
monly determine branch outcomes. It uses this information to infer
the presence of magic bytes and markers in the input file, which
are later used to mutate inputs (thereby reducing brute forcing such
values). VUzzer applies the expensive DTA technique in a selective
manner to find other interesting offsets. While mutating an input,
506TIFF: Using Input Type Inference To Improve Fuzzing
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
5 } i f d ;
6
7 / / Pre :
8 i n t
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26 . . .
27 }
f i l e
c o n t e n t s
i n f b u f ,
f i l e
i n f s i z e
f s i z e ) {
f b u f , 4 ) ;
i f d _ o f f s e t ;
i d e n t i f i e r [ 4 ] ;
" I I * \ 0 " , h . i d e n t i f i e r , 4 ) == 0 ) {
s i z e
t i f f I m a g e B e g i n ( char * f b u f , u i n t 3 2 _ t
s t r u c t h e a d e r {
char
u i n t 3 2 _ t
} h ;
memcpy ( h . i d e n t i f i e r ,
i f (memcmp(
i f d i 1 ;
memcpy(&h . i f d _ o f f s e t ,
i f ( h . i f d _ o f f s e t + s i z e o f ( u i n t 1 6 _ t ) > f s i z e
e x i t ( 0 ) ;
memcpy(& i 1 . n o _ e n t r i e s ,
u i n t 1 6 _ t
i f ( h . i f d _ o f f s e t +2+ a l l o c _ s z > f s i z e )
e x i t ( 0 ) ;
i 1 . t a g l i s t = m a l l o c ( a l l o c _ s z ) ;
memcpy ( i 1 . t a g l i s t
} e l s e
f b u f +4 , 4 ) ;
e x i t ( 0 ) ;
)
a l l o c _ s z =12* i 1 . n o _ e n t r i e s ; ← BUG: overflow!
f b u f +h . i f d _ o f f s e t , 2 ) ;
, f b u f +h . i f d _ o f f s e t +2 ,12* i 1 . n o _ e n t r i e s ) ;
Listing 1: Motivating example that illustrates issues in existing
fuzzers
Although the bug trivially depends on specific bytes of the input
file, it is very hard for general-purpose fuzzers, such as VUzzer [40]
or AFL [51], to mutate the input at those bytes and trigger the bug.
Specifically, when we ran this (trivial) code snippet with VUzzer, it
took as many as 5,000 inputs for VUzzer to crash the application. In
contrast, TIFF produced a crash in just 200 inputs. In the following,
we explain the reason behind this.
(1) Since the cmp for line 17 uses h.ifd_offset as its ope-
rand, fuzzers such as VUzzer will mutate the value of h.ifd_offset
and in doing so change the position of the first ifd offset. In
contrast, TIFF only changes the intended offset value to try
and trigger the bug and this enables it to produce a crash in
the given example much sooner.
(2) To trigger the integer overflow on line 20, the fuzzer needs to
pick a suitable value for i1.no_entries, so that alloc_sz
becomes too small and a heap overflow occurs on line 24. Ex-
isting fuzzers simply try to mutate these bytes in the input
in a random way. In contrast, TIFF is aware of the type of
i1.no_entries and quickly triggers the bug by choosing
interesting INT16 values (that may cause integer overflows).
2.3 Lessons learned
In the light of the above example, it becomes clear that: (i) tailoring
the mutation to some interesting values to trigger specific vulne-
rabilities may boost the fuzzing process, (ii) we can increase the
probability of triggering these specific vulnerabilities if we know the
types of these offsets, (iii) mutating at every offset of the input may
not produce any interesting input, and (iv) mutating at an offset with
random values may not produce any interesting input either.
As we can note, in general, there may be several offsets that are
used by the application, and many of them are used in a sensitive
way. If we target these offsets and mutate them according to the way
these are used by the application, we may perform mutations more
efficiently. Therefore, to understand how certain offsets are used by
the application, we infer the types of those offsets. Subsequently,
Figure 1: A high-level structure of a tiff file: an 8-byte header is
followed by a sequence of image file directory (IFD) structures.
it particularly targets such offsets (applying several mutation ope-
rations). By doing so, VUzzer is able to generate valid inputs that
traverse different parts of the application quickly.
While VUzzer presents a promising approach to mutate inputs
by targeting only interesting offsets in the input, we observe that,
apart from detecting magic bytes/markers, it just makes an educated
guess in mutating other offsets. Such a blind mutation may not be
effective to trigger bugs. In order to illustrate these issues in a more
concrete manner, we now present a motivating example.
2.2 Motivating Example
To bring forth the key idea behind the proposed technique, we con-
sider an example of an input format (tiff )and its processing by an
application (libtiff ).
Figure 1 shows the organization of a tiff file. It has an 8-byte
header in which the last 4 bytes determine the position of the image
file directory (I F D) offsets. The bytes between the I F D offset po-
sition and the header bytes may or may not be processed by the
application, depending on the other tags and the file size. Therefore,
determining how the application processes these bytes is crucial to
have a meaningful mutation of bytes.
In the I F D structure, the first 2 bytes determine the number of
12-byte tags and are followed by specified numbers of such fields.
Listing 1 shows an example of vulnerable C code which parses
the tiff file format. It is based on the TIFFRGBAImageBegin()
function of the libtiff library [31], with an artificially injected bug.