### Title: BlackHat US-18: Follow the White Rabbit: Simplifying Fuzz Testing with FuzzExMachina

Setting up a fuzzing pipeline is a time-consuming and labor-intensive process, often requiring the identification of fuzzable programs and the configuration of the fuzzer. Typically, only large software projects with dedicated testing teams can afford to integrate fuzz testing into their Security Development Lifecycle (SDL). Smaller projects with limited resources are often unable to leverage this effective technique, leading to an unnecessarily insecure software landscape. This is particularly true for less popular software applications, which are frequently overlooked due to a lack of resources and user-friendly tools.

Reducing the skill level and effort required to set up a fuzzing pipeline can significantly enhance the security of today's software. To address this challenge, we developed FuzzExMachina (FExM), an easy-to-use framework that minimizes manual effort. By employing intelligent input inference methods and containerization, FExM automates the entire fuzzing pipeline in a scalable manner. It supports acquiring binaries from various sources, including black-box binaries and source code repositories.

In cases where FExM cannot automatically achieve high coverage, it transitions users to a novel AFL mode called "Afl-TimeWarp." This mode allows users to set up test cases without needing to modify or understand the underlying code, enabling deeper program state fuzzing without writing a single line of code. This aligns with FExM's philosophy of keeping things simple for users.

To evaluate the effectiveness of our framework, we conducted fuzzing on over one hundred packages from the Arch Linux package repository with minimal effort. Within just a few days, we identified 11 crashes, six of which were exploitable. This demonstrates FExM's capability for automated, distributed fuzzing, crash exploitability classification, and its user-friendly web front end for navigating security issues.

Our work effectively integrates fuzzing into the security development lifecycle, making it accessible and practical for a wide range of software projects.