### SSL/TLS Channels and Padding Oracle Attacks

In 2011, B. Brumley and Tuveri demonstrated that remote attacks exploiting padding oracle vulnerabilities in SSL/TLS channels were still feasible [15]. This indicated that the underlying weaknesses in the OpenSSL library had not been adequately addressed. Subsequently, SSL libraries continued to be targets of timing attacks. For example, the "Lucky 13" attack by AlFardan and Paterson exploited timing variations in the processing of padding in the CBC mode of operation across multiple common SSL/TLS libraries [16], similar to the approach described by Canvel et al. [14]. In 2015, Albrecht and Paterson presented a variant of this attack targeting Amazon’s s2n implementation of TLS [17].

In 2016, Yarom, Genkin, and Heninger introduced the "CacheBleed" attack, which revealed that the "scatter-gather" implementation technique, recommended by Intel [18] and implemented in OpenSSL as a cache-timing attack countermeasure, was insufficient to prevent such attacks [19]. The same year, Kaufmann et al. showed that even carefully written C code could be compiled into binaries vulnerable to timing attacks [20].

### Certification and Standardization-Related Attacks

Certification schemes, such as the Common Criteria, often require certified products to have countermeasures against a range of side-channel attacks, including timing attacks. However, certified hardware has not been immune to timing attacks. The Minerva group of vulnerabilities in ECDSA implementations, including a Common Criteria-certified smartcard, is a recent example [21]. Additionally, various timing attacks have been proposed against post-quantum cryptography (PQC) implementations, including attacks on the BLISS signature scheme used in the strongSwan IPsec implementation [22]–[24] and candidates in NIST’s PQC standardization effort [25]–[27].

Despite these academic findings, the practical exploitability of timing attacks is often questioned by practitioners. Security audit companies attempt to identify timing vulnerabilities in software [28], but they note:
"Even though there is basic awareness of timing side-channel attacks in the community, they often go unnoticed or are flagged during code audits without a true understanding of their exploitability in practice."

### Tools for Detecting Timing Vulnerabilities

We provide a brief overview of the tools considered in our survey, classified according to their broad approach: runtime statistical tests, dynamic instrumentation, or formal analysis. Our approach and choice of tools are based on an earlier paper [8], with updates reflecting current usage.

**Statistical Test Tools** [29] compute the execution time of a large number of runs of the target program and verify whether secret data influences the execution time. These tools are easy to install and run, even at scale, and operate on executable code, ruling out compiler-induced violations of the constant-time policy. However, they provide only weak, informal guarantees.

**Dynamic Instrumentation Tools** [6], [30]–[41] instrument programs to track information flow during (concrete or symbolic) execution. They are generally easy to install and use, even at scale, and can be implemented at source, intermediate, or assembly levels, providing formal guarantees. However, dynamic techniques may be unsound, particularly in loop analysis, potentially missing constant-time violations.

**Formal Analysis Tools** [42]–[52] provide strong guarantees that programs do not violate constant-timeness. Some tools are precise, rejecting only programs that violate constant-timeness, and ensure soundness, which ensures the absence of constant-time violations. However, these tools are often implemented at source or intermediate levels, frequently require user interaction, and can be challenging to install or use at scale.

Table I summarizes key tools and their main characteristics, focusing on their target and whether they provide formal guarantees (No, Partial, Yes, Other). "Partial guarantees" cover tools that perform dynamic analysis, while "Guarantees" cover tools that are sound and detect all constant-time violations. Classification can be challenging, so we err on the generous side. Tools establishing properties other than constant-time are tagged as "Other."

### Libraries Included in the Survey

Cryptographic libraries, often used in protocols like TLS and running on shared hardware, must resist timing attacks. We invited developers of widely used TLS libraries and smaller, popular libraries, focusing on C/C++ implementations, the most common language for cryptographic libraries. We also included some Java, Rust, and Python libraries if they could be analyzed by the tools or contained C parts.

Our selection of libraries is based on our knowledge and quantitative data on user and developer numbers. We included newer primitives to complement the responses from the first group. Nemec et al. [58] reported that OpenSSL is prevalent, reaching almost 85% within the current Alexa top 1M domains and more than 96% for client-side SSH keys used by GitHub users. We only included libraries with open development models to facilitate data collection.

Table II lists the libraries included in the survey, indicating whether at least one developer participated, and the actions performed in their Continuous Integration (CI) pipelines. This information was extracted from documentation and public CI pipelines, double-checked by two authors, with disagreements resolved through discussion.

### Additional Related Work

Having discussed timing attacks and tools for constant-time analysis, we briefly cover other related work. Table I provides a classification of the tools included in the survey, and Table II lists the libraries and their participation status.

| Tool | Target | Technique | Guarantees |
|------|--------|-----------|------------|
| ABPV13 [42] | Binary | Formal | Sound |
| Binsec/Rel [30] | C | Symbolic | Sound with restrictions |
| Blazer [43] | Java | Formal | Sound |
| BPT17 [31] | C | Symbolic | Sound with restrictions |
| CacheAudit [44] | Binary | Formal | Sound |
| CacheD [32] | Binary | Dynamic | No guarantee |
| COCO-CHANNEL [33] | Java | Symbolic | Sound with restrictions |
| ctgrind [6] | Binary | Dynamic | No guarantee |
| ct-fuzz [34] | Binary | Trace | No guarantee |
| ct-verif [45] | LLVM | Formal | Sound |
| CT-WASM [46] | WASM | Formal | Sound |
| DATA [35], [36] | Java | Dynamic | No guarantee |
| dudect [29] | Binary | Statistics | No guarantee |
| FaCT [47] | DSL | Formal | Sound |
| FlowTracker [48] | LLVM | Symbolic | Sound with restrictions |
| haybale-pitchfork [37] | Binary | Dynamic | No guarantee |
| KMO12 [49] | Binary | Dynamic | No guarantee |
| MemSan [38] | LLVM | Dynamic | No guarantee |
| MicroWalk [39] | Binary | Dynamic | No guarantee |
| SC-Eliminator [53] | LLVM | Formal | Sound |
| SideTrail [50] | LLVM | Symbolic | Sound with restrictions |
| Themis [51] | Java | Formal | Sound |
| timecop [40] | Binary | Dynamic | No guarantee |
| tis-ct [41] | Binary | Dynamic | No guarantee |
| VirtualCert [52] | LLVM | Formal | Sound |

| Library | Particip. | Build | Test | Fuzz | CT Test |
|---------|-----------|-------|------|------|---------|
| OpenSSL | ✓ | ✓ | ✓ | ✓ | ✓ |
| LibreSSL | ✓ | ✓ | ✓ | ✓ | ✓ |
| BoringSSL | ✓ | ✓ | ✓ | ✓ | ✓ |
| BearSSL | ✓ | ✓ | ✓ | ✓ | ✓ |
| Botan | ✓ | ✓ | ✓ | ✓ | ✓ |
| Crypto++ | ✓ | ✓ | ✓ | ✓ | ✓ |
| wolfSSL | ✓ | ✓ | ✓ | ✓ | ✓ |
| mbedTLS | ✓ | ✓ | ✓ | ✓ | ✓ |
| Amazon s2n | ✓ | ✓ | ✓ | ✓ | ✓ |
| MatrixSSL | ✓ | ✓ | ✓ | ✓ | ✓ |
| GnuTLS | ✓ | ✓ | ✓ | ✓ | ✓ |
| NSS | ✓ | ✓ | ✓ | ✓ | ✓ |
| libtomcrypt | ✓ | ✓ | ✓ | ✓ | ✓ |
| libgcrypt | ✓ | ✓ | ✓ | ✓ | ✓ |
| Nettle | ✓ | ✓ | ✓ | ✓ | ✓ |
| Microsoft SymCrypt | ✓ | ✓ | ✓ | ✓ | ✓ |
| Intel IPP crypto | ✓ | ✓ | ✓ | ✓ | ✓ |
| cryptlib | ✓ | ✓ | ✓ | ✓ | ✓ |
| libsecp256k1 | ✓ | ✓ | ✓ | ✓ | ✓ |
| NaCl | ✓ | ✓ | ✓ | ✓ | ✓ |
| libsodium | ✓ | ✓ | ✓ | ✓ | ✓ |
| monocypher | ✓ | ✓ | ✓ | ✓ | ✓ |
| BouncyCastle* | ✓ | ✓ | ✓ | ✓ | ✓ |
| OpenJDK | ✓ | ✓ | ✓ | ✓ | ✓ |
| dalek-cryptography† | ✓ | ✓ | ✓ | ✓ | ✓ |
| ring† | ✓ | ✓ | ✓ | ✓ | ✓ |
| RustCrypto† | ✓ | ✓ | ✓ | ✓ | ✓ |
| rustls† | ✓ | ✓ | ✓ | ✓ | ✓ |
| python-ecdsa | ✓ | ✓ | ✓ | ✓ | ✓ |
| micro-ecc | ✓ | ✓ | ✓ | ✓ | ✓ |
| tiny-AES-c | ✓ | ✓ | ✓ | ✓ | ✓ |
| PQCrypto-SIDH | ✓ | ✓ | ✓ | ✓ | ✓ |
| csidh | ✓ | ✓ | ✓ | ✓ | ✓ |
| constant-csidh-c-implementation | ✓ | ✓ | ✓ | ✓ | ✓ |
| ARMv8-CSIDH | ✓ | ✓ | ✓ | ✓ | ✓ |
| SPHINCS+ | ✓ | ✓ | ✓ | ✓ | ✓ |

Total = 36

This structured approach provides a comprehensive overview of the tools and libraries, facilitating a better understanding of the current landscape in detecting and mitigating timing vulnerabilities.