# GNU Readline Library
## Edition 6.1, for Readline Library Version 6.1
### October 2009
#### Authors:
- Chet Ramey, Case Western Reserve University
- Brian Fox, Free Software Foundation

This manual provides a comprehensive guide to the GNU Readline Library (version 6.1, released on October 9, 2009). The library is designed to ensure a consistent user interface across various programs that offer a command-line interface.

### Copyright
© 1988–2009 Free Software Foundation, Inc.

### Permissions
- **Verbatim Copies**: Permission is granted to make and distribute verbatim copies of this manual, provided the copyright notice and permission notice are preserved on all copies.
- **Modification and Distribution**: Permission is granted to copy, distribute, and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation, with no Invariant Sections, and with the Front-Cover texts being "A GNU Manual". The Back-Cover Texts are as follows: "You are free to copy and modify this GNU manual. Buying copies from GNU Press supports the FSF in developing GNU and promoting software freedom."

### Published by
Free Software Foundation  
59 Temple Place, Suite 330,  
Boston, MA 02111-1307  
USA

---

## Table of Contents
1. Command Line Editing
   1.1 Introduction to Line Editing
   1.2 Readline Interaction
      1.2.1 Readline Bare Essentials
      1.2.2 Readline Movement Commands
      1.2.3 Readline Killing Commands
      1.2.4 Readline Arguments
      1.2.5 Searching for Commands in the History
   1.3 Readline Init File
      1.3.1 Readline Init File Syntax
      1.3.2 Conditional Init Constructs
      1.3.3 Sample Init File
   1.4 Bindable Readline Commands
      1.4.1 Commands For Moving
      1.4.2 Commands For Manipulating The History
      1.4.3 Commands For Changing Text
      1.4.4 Killing And Yanking
      1.4.5 Specifying Numeric Arguments
      1.4.6 Letting Readline Type For You
      1.4.7 Keyboard Macros
      1.4.8 Some Miscellaneous Commands
   1.5 Readline vi Mode

2. Programming with GNU Readline
   2.1 Basic Behavior
   2.2 Custom Functions
      2.2.1 Readline Typedefs
      2.2.2 Writing a New Function
   2.3 Readline Variables
   2.4 Readline Convenience Functions
      2.4.1 Naming a Function
      2.4.2 Selecting a Keymap
      2.4.3 Binding Keys
      2.4.4 Associating Function Names and Bindings
      2.4.5 Allowing Undoing
      2.4.6 Redisplay
      2.4.7 Modifying Text
      2.4.8 Character Input
      2.4.9 Terminal Management
      2.4.10 Utility Functions
      2.4.11 Miscellaneous Functions
      2.4.12 Alternate Interface
      2.4.13 A Readline Example
   2.5 Readline Signal Handling
   2.6 Custom Completers
      2.6.1 How Completing Works
      2.6.2 Completion Functions
      2.6.3 Completion Variables
      2.6.4 A Short Completion Example

Appendix A: GNU Free Documentation License
Concept Index
Function and Variable Index

---

## Chapter 1: Command Line Editing

### 1.1 Introduction to Line Editing
This section describes the basic features of the GNU command line editing interface. The following notation is used to represent keystrokes:

- `C-k` (Control-K): The character produced when the `k` key is pressed while the Control key is held down.
- `M-k` (Meta-K): The character produced when the Meta key (labeled as ALT on many keyboards) is held down and the `k` key is pressed. If you do not have a Meta key, you can achieve the same effect by pressing `ESC` followed by `k`.
- `M-C-k` (Meta-Control-K): The character produced by metafying `C-k`.

Other keys with their own names include:
- `DEL`, `ESC`, `LFD`, `SPC`, `RET`, and `TAB`. If your keyboard lacks an `LFD` key, typing `C-j` will produce the desired character. The `RET` key may be labeled as `Return` or `Enter` on some keyboards.

### 1.2 Readline Interaction
The Readline library provides a set of commands for manipulating text as you type it, allowing you to correct typos without retyping the entire line. Here are the essential commands for editing the text of an input line:

- `C-b`: Move back one character.
- `C-f`: Move forward one character.
- `DEL` or `Backspace`: Delete the character to the left of the cursor.
- `C-d`: Delete the character underneath the cursor.
- `Printing characters`: Insert the character into the line at the cursor.
- `C-_` or `C-x C-u`: Undo the last editing command. You can undo all the way back to an empty line.

### 1.2.2 Readline Movement Commands
In addition to the basic movement commands, the following commands allow for more rapid navigation within the line:

- `C-a`: Move to the start of the line.
- `C-e`: Move to the end of the line.
- `M-f`: Move forward a word (composed of letters and digits).
- `M-b`: Move backward a word.
- `C-l`: Clear the screen and reprint the current line at the top.

### 1.2.3 Readline Killing Commands
Killing text means deleting it but saving it for later use, typically by yanking (re-inserting) it back into the line. The text is saved in a kill ring, which is not line-specific. Here are the commands for killing text:

- `C-k`: Kill the text from the current cursor position to the end of the line.
- `M-d`: Kill from the cursor to the end of the current word, or, if between words, to the end of the next word.
- `M-DEL`: Kill from the cursor to the start of the current word, or, if between words, to the start of the previous word.
- `C-w`: Kill from the cursor to the previous whitespace.

To yank the text back into the line:

- `C-y`: Yank the most recently killed text back into the buffer at the cursor.
- `M-y`: Rotate the kill ring and yank the new top. This can only be done if the prior command was `C-y` or `M-y`.

### 1.2.4 Readline Arguments
Numeric arguments can be passed to Readline commands. These arguments can act as repeat counts or determine the direction of the command. To pass a numeric argument, type meta digits before the command. For example, to delete the next ten characters, you could type `M-1 0 C-d`.

### 1.2.5 Searching for Commands in the History
Readline provides commands for searching through the command history for lines containing a specified string. There are two search modes: incremental and non-incremental.

- **Incremental Search**:
  - `C-r`: Search backward in the history for a particular string.
  - `C-s`: Search forward through the history.
  - `C-g`: Abort an incremental search and restore the original line.
  - `C-r` or `C-s` can be used to find other matching entries in the history list.
  - Any other key sequence bound to a Readline command will terminate the search and execute that command.

- **Non-incremental Search**:
  - Reads the entire search string before starting to search for matching history lines.
  - The search string may be typed by the user or be part of the contents of the current line.

### 1.3 Readline Init File
The Readline library comes with a set of Emacs-like keybindings installed by default, but users can customize these bindings. Customization is achieved by placing commands in an `inputrc` file, typically located in the user's home directory. The name of this file is taken from the value of the `INPUTRC` environment variable. If `INPUTRC` is unset, the default is `~/.inputrc`. If that file does not exist or cannot be read, the ultimate default is `/etc/inputrc`.

When a program using the Readline library starts up, the init file is read, and the key bindings are set.

---

This optimized version aims to provide a clear, coherent, and professional presentation of the GNU Readline Library documentation.