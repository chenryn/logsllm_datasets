### Improvements for FIFUZZ

FIFUZZ has several areas where it can be further enhanced. Firstly, the static analysis used to identify potential error sites currently produces a significant number of false positives. We plan to reduce these false positives by implementing the strategies outlined in Section 6.1. Secondly, we aim to improve FIFUZZ's performance through various means, such as eliminating unnecessary error sequences, implementing lightweight runtime monitoring, and leveraging multi-threading, as discussed in Section 6.4. Finally, while FIFUZZ is currently used to test C programs, we intend to extend its capabilities to test programs written in other programming languages, such as C++ and Java.

### Acknowledgments

We would like to express our gratitude to our shepherd, Deian Stefan, and the anonymous reviewers for their valuable feedback on this paper. This work was primarily supported by the China Postdoctoral Science Foundation under Project 2019T120093. Kangjie Lu received partial support from the NSF award CNS-1931208. The opinions, findings, conclusions, and recommendations presented in this material are those of the authors and do not necessarily reflect the views of the NSF. Jia-Ju Bai is the corresponding author.

### References

1. **American Fuzzy Lop**. http://lcamtuf.coredump.cx/afl/
2. **A Collection of Vulnerabilities Discovered by the AFL Fuzzer**. https://github.com/mrash/afl-cve
3. **ARM System Trace Macrocell (STM)**. https://community.arm.com/tools/b/blog/posts/introduction-to-arm-s-system-trace-macrocell
4. **ASan: Address Sanitizer**. https://github.com/google/sanitizers/wiki/AddressSanitizer
5. **ASan Performance**. https://github.com/google/sanitizers/wiki/AddressSanitizerPerformanceNumbers
6. **ASCHERMANN, C., FRASSETTO, T., HOLZ, T., JAUERNIG, P., SADEGHI, A.-R., AND TEUCHERT, D.** NAUTILUS: Fishing for Deep Bugs with Grammars. In Proceedings of the 26th Network and Distributed Systems Security Symposium (NDSS) (2019).
7. **ASCHERMANN, C., SCHUMILO, S., BLAZYTKO, T., GAWLIK, R., AND HOLZ, T.** REDQUEEN: Fuzzing with Input-to-State Correspondence. In Proceedings of the 26th Network and Distributed Systems Security Symposium (NDSS) (2019).
8. **ASKAROV, A., AND SABELFELD, A.** Catch Me If You Can: Permissive Yet Secure Error Handling. In Proceedings of the 4th International Workshop on Programming Languages and Analysis for Security (PLAS) (2009), pp. 45–57.
9. **BAI, J.-J., WANG, Y.-P., LIU, H.-Q., AND HU, S.-M.** Mining and Checking Paired Functions in Device Drivers Using Characteristic Fault Injection. Information and Software Technology (IST) 73 (2016), 122–133.
10. **BAI, J.-J., WANG, Y.-P., YIN, J., AND HU, S.-M.** Testing Error Handling Code in Device Drivers Using Characteristic Fault Injection. In Proceedings of the 2016 USENIX Annual Technical Conference (2016), pp. 635–647.
11. **BANABIC, R., AND CANDEA, G.** Fast Black-Box Testing of System Recovery Code. In Proceedings of the 7th European Conference on Computer Systems (EuroSys) (2012), pp. 281–294.
12. **GNU Binutils**. http://www.gnu.org/software/binutils/
13. **BÖHME, M., PHAM, V.-T., AND ROYCHOUDHURY, A.** Coverage-Based Greybox Fuzzing as Markov Chain. In Proceedings of the 23rd International Conference on Computer and Communications Security (CCS) (2016), pp. 1032–1043.
14. **CABRAL, B., AND MARQUES, P.** Exception Handling: A Field Study in Java and .NET. In Proceedings of the 2007 European Conference on Object-Oriented Programming (ECOOP) (2007), pp. 151–175.
15. **CHEN, Y., GROCE, A., ZHANG, C., WONG, W.-K., FERN, X., EIDE, E., AND REGEHR, J.** Taming Compiler Fuzzers. In Proceedings of the 34th International Conference on Programming Language Design and Implementation (PLDI) (2013), pp. 197–208.
16. **Clang: An LLVM-Based Compiler for C/C++ Programs**. https://clang.llvm.org/
17. **CLOC: Count Lines of Code**. https://cloc.sourceforge.net
18. **CONG, K., LEI, L., YANG, Z., AND XIE, F.** Automatic Fault Injection for Driver Robustness Testing. In Proceedings of the 2015 International Symposium on Software Testing and Analysis (ISSTA) (2015), pp. 361–372.
19. **CVE-2019-7846**. https://nvd.nist.gov/vuln/detail/CVE-2019-7846
20. **CVE-2019-2240**. https://nvd.nist.gov/vuln/detail/CVE-2019-2240
21. **CVE-2019-1750**. https://nvd.nist.gov/vuln/detail/CVE-2019-1750
22. **CVE-2019-1785**. https://nvd.nist.gov/vuln/detail/CVE-2019-1785
23. **EBERT, F., AND CASTOR, F.** A Study on Developers’ Perceptions About Exception Handling Bugs. In Proceedings of the 2013 International Conference on Software Maintenance (ICSM) (2013), pp. 448–451.
24. **FFmpeg: A Complete, Cross-Platform Solution to Record, Convert, and Stream Audio and Video**. https://ffmpeg.org/
25. **FU, C., RYDER, B. G., MILANOVA, A., AND WONNACOTT, D.** Testing of Java Web Services for Robustness. In Proceedings of the 2004 International Symposium on Software Testing and Analysis (ISSTA) (2004), pp. 23–34.
26. **GAN, S., ZHANG, C., QIN, X., TU, X., LI, K., PEI, Z., AND CHEN, Z.** CollAFL: Path-Sensitive Fuzzing. In Proceedings of the 39th IEEE Symposium on Security and Privacy (2018), pp. 679–696.
27. **GODEFROID, P., KIEZUN, A., AND LEVIN, M. Y.** Grammar-Based Whitebox Fuzzing. In Proceedings of the 29th International Conference on Programming Language Design and Implementation (PLDI) (2008), pp. 206–215.
28. **GUNAWI, H. S., RUBIO-GONZÁLEZ, C., ARPACI-DUSSEAU, A. C., ARPACI-DUSSEAU, R. H., AND LIBLIT, B.** EIO: Error Handling Is Occasionally Correct. In Proceedings of the 6th International Conference on File and Storage Technologies (FAST) (2008), pp. 207–222.
29. **HOLLER, C., HERZIG, K., AND ZELLER, A.** Fuzzing with Code Fragments. In Proceedings of the 21st USENIX Security Symposium (2012), pp. 445–458.
30. **Honggfuzz: Security-Oriented Fuzzer with Powerful Analysis Options**. https://github.com/google/honggfuzz
31. **Intel Processor Tracing (PT)**. https://software.intel.com/en-us/blogs/2013/09/18/processor-tracing
32. **JANA, S., KANG, Y. J., ROTH, S., AND RAY, B.** Automatically Detecting Error Handling Bugs Using Error Specifications. In Proceedings of the 25th USENIX Security Symposium (2016), pp. 345–362.
33. **KANG, Y., RAY, B., AND JANA, S.** APEx: Automated Inference of Error Specifications for C APIs. In Proceedings of the 31st International Conference on Automated Software Engineering (ASE) (2016), pp. 472–482.
34. **KERY, M. B., LE GOUES, C., AND MYERS, B. A.** Examining Programmer Practices for Locally Handling Exceptions. In Proceedings of the 13th International Working Conference on Mining Software Repositories (MSR) (2016), pp. 484–487.
35. **KIKUCHI, N., YOSHIMURA, T., SAKUMA, R., AND KONO, K.** Do Injected Faults Cause Real Failures? A Case Study of Linux. In Proceedings of the 25th International Symposium on Software Reliability Engineering Workshops (ISSRE-W) (2014), pp. 174–179.
36. **KING, J. C.** Symbolic Execution and Program Testing. Communications of the ACM 19, 7 (1976), 385–394.
37. **LAWALL, J., LAURIE, B., HANSEN, R. R., PALIX, N., AND MULLER, G.** Finding Error Handling Bugs in OpenSSL Using Coccinelle. In Proceedings of the 2010 European Dependable Computing Conference (EDCC) (2010), pp. 191–196.
38. **LEMIEUX, C., AND SEN, K.** FairFuzz: A Targeted Mutation Strategy for Increasing Greybox Fuzz Testing Coverage. In Proceedings of the 33rd International Conference on Automated Software Engineering (ASE) (2018), pp. 475–485.
39. **MARINESCU, P. D., AND CANDEA, G.** LFI: A Practical and General Library-Level Fault Injector. In Proceedings of the 39th International Conference on Dependable Systems and Networks (DSN) (2009), pp. 379–388.
40. **MENDONCA, M., AND NEVES, N.** Robustness Testing of the Windows DDK. In Proceedings of the 37th International Conference on Dependable Systems and Networks (DSN) (2007), pp. 554–564.
41. **MSan: Memory Sanitizer**. https://github.com/google/sanitizers/wiki/MemorySanitizer
42. **MYTKOWICZ, T., COUGHLIN, D., AND DIWAN, A.** Inferred Call Path Profiling. In Proceedings of the 24th International Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA) (2009), pp. 175–190.
43. **NATELLA, R., COTRONEO, D., DURAES, J., AND MADEIRA, H.** Representativeness Analysis of Injected Software Faults in Complex Software. In Proceedings of the 40th International Conference on Dependable Systems and Networks (DSN) (2010), pp. 437–446.
44. **NATELLA, R., COTRONEO, D., DURAES, J. A., AND MADEIRA, H. S.** On Fault Representativeness of Software Fault Injection. IEEE Transactions on Software Engineering (TSE) 39, 1 (2013), 80–96.
45. **PADHYE, R., LEMIEUX, C., SEN, K., PAPADAKIS, M., AND LE TRAON, Y.** Semantic Fuzzing with Zest. In Proceedings of the 2019 International Symposium on Software Testing and Analysis (ISSTA) (2019), pp. 329–340.
46. **Aacsbr: Check That Sample Rate Is Not 0 Before Division**. http://github.com/ffmpeg/ffmpeg/commit/a50a5ff29e
47. **Found Bug: Libav: Divide-by-Zero in sbr_make_f_master**. https://blogs.gentoo.org/ago/2016/09/21/libav-divide-by-zero-in-sbr_make_f_master-aacsbr-c/
48. **CVE-2016-7499**. https://nvd.nist.gov/vuln/detail/CVE-2016-7499
49. **Frame: Fix the Error Path in av_frame_copy_props**. http://github.com/ffmpeg/ffmpeg/commit/a53551cba8
50. **PHAM, V.-T., BÖHME, M., SANTOSA, A. E., CACIULESCU, A. R., AND ROYCHOUDHURY, A.** Smart Greybox Fuzzing. IEEE Transactions on Software Engineering (TSE) (2019).
51. **RAWAT, S., JAIN, V., KUMAR, A., COJOCAR, L., GIUFFRIDA, C., AND BOS, H.** VUzzer: Application-Aware Evolutionary Fuzzing. In Proceedings of the 24th Network and Distributed Systems Security Symposium (NDSS) (2017), pp. 1–14.
52. **ROSENBERG, H. A., AND SHIN, K. G.** Software Fault Injection and Its Application in Distributed Systems. In Proceedings of the 23rd International Symposium on Fault-Tolerant Computing (FTCS) (1993), pp. 208–217.
53. **SAHA, S., LOZI, J., THOMAS, G., LAWALL, J. L., AND MULLER, G.** Hector: Detecting Resource-Release Omission Faults in Error-Handling Code for Systems Software. In Proceedings of the 43rd International Conference on Dependable Systems and Networks (DSN) (2013), pp. 1–12.
54. **SHAH, H., GÖRG, C., AND HARROLD, M. J.** Why Do Developers Neglect Exception Handling? In Proceedings of the 4th International Workshop on Exception Handling (WEH) (2008), pp. 62–68.
55. **SUSSKRAUT, M., AND FETZER, C.** Automatically Finding and Patching Bad Error Handling. In Proceedings of the 2006 European Dependable Computing Conference (EDCC) (2006), pp. 13–22.
56. **Tsan: Thread Sanitizer**. https://github.com/google/sanitizers/wiki/ThreadSanitizerCppManual
57. **UBSan: Undefined Behavior Sanitizer**. https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html
58. **VAN DER VEEN, V., FRATANTONIO, Y., LINDORFER, M., GRUSS, D., MAURICE, C., VIGNA, G., BOS, H., RAZAVI, K., AND GIUFFRIDA, C.** Drammer: Deterministic Rowhammer Attacks on Mobile Platforms. In Proceedings of the 23rd International Conference on Computer and Communications Security (CCS) (2016), pp. 1675–1689.
59. **WANG, J., CHEN, B., WEI, L., AND LIU, Y.** Skyfire: Data-Driven Seed Generation for Fuzzing. In Proceedings of the 38th IEEE Symposium on Security and Privacy (2017), pp. 579–594.
60. **WANG, J., CHEN, B., WEI, L., AND LIU, Y.** Superion: Grammar-Aware Greybox Fuzzing. In Proceedings of the 41st International Conference on Software Engineering (ICSE) (2019), pp. 724–735.
61. **WEIMER, W., AND NECULA, G. C.** Finding and Preventing Run-Time Error Handling Mistakes. In Proceedings of the 19th International Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA) (2004), pp. 419–431.
62. **WU, W., CHEN, Y., XU, J., XING, X., GONG, X., AND ZOU, W.** FUZE: Towards Facilitating Exploit Generation for Kernel Use-After-Free Vulnerabilities. In Proceedings of the 27th USENIX Security Symposium (2018), pp. 781–797.
63. **XU, W., LI, J., SHU, J., YANG, W., XIE, T., ZHANG, Y., AND GU, D.** From Collision to Exploitation: Unleashing Use-After-Free Vulnerabilities in the Linux Kernel. In Proceedings of the 22nd International Conference on Computer and Communications Security (CCS) (2015), pp. 414–425.
64. **YANG, X., CHEN, Y., EIDE, E., AND REGEHR, J.** Finding and Understanding Bugs in C Compilers. In Proceedings of the 32nd International Conference on Programming Language Design and Implementation (PLDI) (2011), pp. 283–294.
65. **YUN, I., LEE, S., XU, M., JANG, Y., AND KIM, T.** QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In Proceedings of the 27th USENIX Security Symposium (2018), pp. 745–761.
66. **ZHANG, H., SHE, D., AND QIAN, Z.** Android ION Hazard: The Curse of Customizable Memory Management System. In Proceedings of the 23rd International Conference on Computer and Communications Security (CCS) (2016), pp. 1663–1674.
67. **ZHANG, P., AND ELBAUM, S.** Amplifying Tests to Validate Exception Handling Code. In Proceedings of the 34th International Conference on Software Engineering (ICSE) (2012), pp. 595–605.
68. **ZUO, C., WU, J., AND GUO, S.** Automatically Detecting SSL Error-Handling Vulnerabilities in Hybrid Mobile Web Apps. In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security (2015), pp. 591–596.

### Appendix

We randomly selected 50 out of the 317 alerts reported by FIFUZZ in the 9 tested applications. These 50 alerts are caused by 36 distinct bugs based on their root causes. The "Error points" column shows the call stacks of the error points (ErrPtx) that trigger the alert. Each call stack provides the information of each function call, including the name of the called function and the code line number of the function call. The "Source file" and "Line" columns respectively show the source file name and the code line number where the alert occurs. The "State" column indicates the current status of our bug report: "F" means the bug has been confirmed and fixed; "C" means the bug has been confirmed but not fixed yet; "R" means the bug report has not been replied to.

| Program | Error Points | Source File | Line | Alert Type | State |
|---------|--------------|-------------|------|------------|-------|
| vim     | ErrPt1: main -> common_init(173) -> alloc(934) -> lalloc(827) -> malloc(924) | message.c | 4334 | null-pointer dereference | F |
| vim     | ErrPt1: main -> mch_early_init(115) -> alloc(3212) -> lalloc(827) -> malloc(924) | message.c | 4334 | null-pointer dereference | F |
| vim     | ErrPt1: main -> termcapinit(384) -> set_termname(2571) -> set_shellsize(2069) -> screenclear(3466) -> screenalloc(8744) -> lalloc(8495) -> malloc(924) | screen.c | 8664 | null-pointer dereference | F |
| vim     | ErrPt1: main -> termcapinit(384) -> set_termname(2571) -> set_shellsize(2069) -> screenclear(3466) -> screenalloc(8744) -> win_alloc_lines(8507) -> alloc_clear(5085) -> lalloc(851) -> malloc(924) | screen.c | 8664 | null-pointer dereference | F |
| vim     | ErrPt1: main -> vim_main2(444) -> create_windows(728) -> open_buffer(2750) -> ml_open(167) -> ml_new_data(392) -> mf_new(4015) -> mf_alloc_bhdr(379) -> alloc(898) -> lalloc(827) -> malloc(924) | misc2.c | 4446 | null-pointer dereference | F |
| vim     | ErrPt1: main -> common_init(173) -> set_init_1(1010) -> set_options_default(3522) -> set_option_default(3847) -> set_string_option_direct(3769) -> vim_strsave(5976) -> alloc(1279) -> lalloc(827) -> malloc(924) | charset.c | 1456 | null-pointer dereference | F |
| vim     | ErrPt1: main -> common_init(173) -> set_init_1(1010) -> set_options_default(3522) -> set_option_default(3847) -> set_string_option_direct(3769) -> set_string_option_global(5987) -> vim_strsave(6083) -> alloc(1279) -> lalloc(827) -> malloc(924) | charset.c | 1456 | null-pointer dereference | F |
| vim     | ErrPt1: main -> command_line_scan(200) -> alist_add(2495) -> buflist_add(6688) -> buflist_new(3309) -> buf_copy_options(2036) -> vim_strsave(11649) -> alloc(1279) -> lalloc(827) -> malloc(924) | option.c | 8422 | null-pointer dereference | F |
| vim     | ErrPt1: main -> command_line_scan(200) -> save_typebuf(2365) -> alloc_typebuf(1332) -> alloc(1286) -> lalloc(827) -> malloc(924) | getchar.c | 1313 | double free | F |
| vim     | ErrPt1: main -> command_line_scan(200) -> save_typebuf(2365) -> alloc_typebuf(1332) -> alloc(1287) -> lalloc(827) -> malloc(924) | getchar.c | 1317 | double free | F |
| vim     | ErrPt1: main -> init_highlight(413) -> do_highlight(415) -> syn_check_group(859) -> vim_strsave_up(3066) -> lalloc(827) -> malloc(924) | highlight.c | 871 | null-pointer dereference | F |
| vim     | ErrPt1: main -> vim_main2(444) -> create_windows(728) -> open_buffer(2750) -> readfile(233) -> next_fenc(893) -> enc_canonize(2789) -> alloc(4323) -> lalloc(827) -> malloc(924) | fileio.c | 2320 | freeing invalid pointer | F |
| vim     | ErrPt1: main -> vim_main2(444) -> main_loop(903) -> msg_attr(1286) -> msg_attr_keep(122) -> set_vim_var_string(142) -> vim_strsave(7119) -> alloc(1279) -> lalloc(827) -> malloc(924) | message.c | 1437 | use after free | F |
| vim     | ErrPt1: main -> vim_main2(444) -> main_loop(903) -> normal_cmd(1370) -> do_pending_operator(1133) -> op_delete(1816) -> do_join(2079) -> alloc(4557) -> lalloc(827) -> malloc(924) | ops.c | 4559 | null-pointer dereference | F |
| vim     | ErrPt1: main -> vim_main2(444) -> load_start_packages(492) -> do_in_path(2317) -> alloc(1864) -> lalloc(827) -> malloc(924) <br> ErrPt2: main -> vim_main2(444) -> wait_return(680) -> hit_return_msg(1078) -> msg_puts_attr_len(1961) -> alloc(2588) -> lalloc(827) -> malloc(924) | message.c | 2589 | null-pointer dereference | F |
| vim     | ErrPt1: main -> source_startup_scripts(432) -> do_source(3051) -> fix_fname(2759) -> FullName_save(4817) -> vim_FullName(3082) -> mch_FullName(4479) -> fchdir(2589) <br> ErrPt2: main -> vim_main2(444) -> wait_return(680) -> hit_return_msg(1078) -> msg_putchar(1267) -> msg_putchar_attr(1369) -> msg_puts_attr(1386) -> msg_puts_attr_len(1961) -> msg_puts_printf(2008) -> alloc(2588) -> lalloc(827) -> malloc(924) | message.c | 2589 | null-pointer dereference | F |
| bison   | ErrPt1: main -> uniqstrs_new(86) -> hash_initialize(160) -> malloc(605) | hash.c | 251 | null-pointer dereference | F |
| bison   | ErrPt1: main -> reader(104) -> symbols_new(714) -> hash_initialize(776) -> malloc(605) | hash.c | 251 | null-pointer dereference | F |
| bison   | ErrPt1: main -> muscle_init(87) -> hash_initialize(129) -> calloc(626) | hash.c | 251 | null-pointer dereference | F |
| bison   | ErrPt1: main -> generate_states(124) -> allocate_storage(358) -> state_hash_new(168) -> hash_initialize(362) -> calloc(626) | hash.c | 251 | null-pointer dereference | F |
| bison   | ErrPt1: main -> tables_generate(152) -> pack_table(802) -> bitset_create(727) -> bitset_alloc(163) -> bitset_init(138) -> vbitset_init(88) -> vbitset_resize(989) -> realloc(77) | vector.c | 81 | null-pointer dereference | F |
| ffmpeg  | ErrPt1: main -> ffmpeg_parse_options(4872) -> open_files(3317) -> open_input_file(3277) -> avformat_alloc_context(1041) -> av_mallocz(151) -> av_malloc(238) -> posix_memalign(87) | dict.c | 205 | null-pointer dereference | R |
| ffmpeg  | ErrPt1: main -> ffmpeg_parse_options(4872) -> open_files(3331) -> open_output_file(3277) -> avformat_alloc_output_context2(2152) -> avformat_alloc_context(151) -> av_mallocz(151) -> av_malloc(238) -> posix_memalign(87) | dict.c | 205 | null-pointer dereference | R |
| ffmpeg  | ErrPt1: main -> ffmpeg_parse_options(4872) -> open_files(3331) -> open_output_file(3277) -> new_audio_stream(2236) -> new_output_stream(1859) -> avcodec_alloc_context3(1387) -> init_context_defaults(163) -> av_opt_set(141) -> set_string_number(484) -> av_expr_parse_and_eval(292) -> av_expr_parse(751) -> av_malloc(687) -> posix_memalign(87) | options.c | 141 | assertion failure | R |
| ffmpeg  | ErrPt1: main -> transcode(4894) -> transcode_step(4692) -> process_input(4638) -> process_input_packet(4518) -> decode_audio(2619) -> send_frame_to_filters(2337) -> ifilter_send_frame(2270) -> configure_filtergraph(2189) -> avfilter_graph_parse2(1056) -> parse_filter(427) -> av_get_token(184) -> av_malloc(151) -> posix_memalign(87) | avstrings.c | 87 | null-pointer dereference | R |
| ffmpeg  | ErrPt1: main -> ffmpeg_parse_options(4872) -> open_files(3317) -> open_input_file(3277) -> avformat_find_stream_info(1126) -> avcodec_open2(3674) -> av_mallocz(624) -> av_malloc(238) -> posix_memalign(87) | utils.c | 491 | null-pointer dereference | R |
| ffmpeg  | ErrPt1: main -> transcode(4894) -> transcode_step(4692) -> reap_filters(4648) -> init_output_stream(1442) -> avcodec_open2(3517) -> ff_ac3_float_encode_init(935) -> ff_ac3_encode_init(138) -> allocate_buffers(2481) -> ff_ac3_float_allocate_sample_buffers(2331) -> av_mallocz(49) -> av_malloc(238) -> posix_memalign(87) | mem.c | 223 | null-pointer dereference | R |
| ffmpeg  | ErrPt1: main -> transcode(4894) -> transcode_step(4692) -> process_input(4638) -> process_input_packet(4518) -> decode_audio(2619) -> send_frame_to_filters(2337) -> ifilter_send_frame(2270) -> configure_filtergraph(2189) -> avfilter_graph_config(1109) -> graph_config_formats(1275) -> query_formats(1164) -> ff_merge_channel_layouts(499) -> av_realloc_array(242) -> av_realloc(202) -> realloc(144) | avfiltergraph.c | 583 | use after free | R |
| ffmpeg  | ErrPt1: main -> transcode(4894) -> transcode_step(4692) -> process_input(4638) -> process_input_packet(4518) -> decode_audio(2619) -> send_frame_to_filters(2337) -> ifilter_send_frame(2270) -> configure_filtergraph(2189) -> configure_output_filter(1106) -> configure_output_audio_filter(685) -> choose_channel_layouts(606) -> avio_close_dyn_buf(194) -> avio_flush(1431) -> flush_buffer(241) -> writeout(184) -> dyn_buf_write(163) -> av_reallocp(1319) -> av_realloc(173) -> realloc(144) | ffmpeg_filter.c | 179 | null-pointer dereference | R |
| ffmpeg  | ErrPt1: main -> ffmpeg_parse_options(4872) -> open_files(3331) -> open_output_file(3277) -> avio_open2(2558) -> ffio_open_whitelist(1180) -> ffio_fdopen(1169) -> av_strdup(1007) -> av_realloc(256) -> realloc(144) | mem.c | 233 | double free | R |
| ffmpeg  | ErrPt1: main -> ffmpeg_parse_options(4872) -> open_files(3317) -> open_input_file(3277) -> avformat_open_input(1104) -> init_input(573) -> io_open_default(438) -> ffio_open_whitelist(124) -> ffio_fdopen(1169) -> av_strdup(1007) -> av_realloc(256) -> realloc(144) | mem.c | 233 | double free | R |
| ffmpeg  | ErrPt1: main -> ffmpeg_parse_options(4872) -> open_files(3317) -> open_input_file(3277) -> avformat_find_stream_info(1126) -> avcodec_open2(3674) -> av_opt_set_dict(634) -> av_opt_set_dict2(1605) -> av_dict_set(1590) -> av_strdup(87) -> av_realloc(256) -> realloc(144) <br> ErrPt2: main -> ffmpeg_parse_options(4872) -> open_files(3317) -> open_input_file(3277) -> avformat_find_stream_info(1126) -> try_decode_frame(3903) -> avcodec_open2(3050) -> ff_decode_bsfs_init(736) -> av_bsf_alloc(232) -> av_mallocz(86) -> av_malloc(238) -> posix_memalign(87