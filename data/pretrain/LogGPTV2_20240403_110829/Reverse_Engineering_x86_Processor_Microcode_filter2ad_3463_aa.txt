title:Reverse Engineering x86 Processor Microcode
author:Philipp Koppe and
Benjamin Kollenda and
Marc Fyrbiak and
Christian Kison and
Robert Gawlik and
Christof Paar and
Thorsten Holz
Reverse Engineering x86 Processor Microcode
Philipp Koppe, Benjamin Kollenda, Marc Fyrbiak, Christian Kison, Robert Gawlik,  
Christof Paar, and Thorsten Holz, Ruhr-University Bochum
https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/koppe
This paper is included in the Proceedings of the 26th USENIX Security SymposiumAugust 16–18, 2017 • Vancouver, BC, CanadaISBN 978-1-931971-40-9Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIXReverse Engineering x86 Processor Microcode
Philipp Koppe, Benjamin Kollenda, Marc Fyrbiak, Christian Kison,
Robert Gawlik, Christof Paar, and Thorsten Holz
Ruhr-Universit¨at Bochum
Abstract
Microcode is an abstraction layer on top of the phys-
ical components of a CPU and present in most general-
purpose CPUs today. In addition to facilitate complex and
vast instruction sets, it also provides an update mechanism
that allows CPUs to be patched in-place without requiring
any special hardware. While it is well-known that CPUs
are regularly updated with this mechanism, very little is
known about its inner workings given that microcode and
the update mechanism are proprietary and have not been
throughly analyzed yet.
In this paper, we reverse engineer the microcode seman-
tics and inner workings of its update mechanism of con-
ventional COTS CPUs on the example of AMD’s K8 and
K10 microarchitectures. Furthermore, we demonstrate
how to develop custom microcode updates. We describe
the microcode semantics and additionally present a set of
microprograms that demonstrate the possibilities offered
by this technology. To this end, our microprograms range
from CPU-assisted instrumentation to microcoded Tro-
jans that can even be reached from within a web browser
and enable remote code execution and cryptographic im-
plementation attacks.
1
Introduction
Similar to complex software systems, bugs exist in vir-
tually any commercial Central Processing Unit (CPU)
and can imply severe consequences on system security,
e.g., privilege escalation [22, 36] or leakage of cryp-
tographic keys [11]. Errata sheets from embedded to
general-purpose processors list incorrect behavior with
accompanying workarounds to safeguard program exe-
cution [4, 29]. Such workarounds contain instructions
for developers on how these bugs can be bypassed or
mitigated, e.g., by means of recompilation [40] or bi-
nary re-translation [26]. However, these interim solutions
are not suited for complex design errors which require
hardware modiﬁcations [48]. Dedicated hardware units
to counter bugs are imperfect [36, 49] and involve non-
negligible hardware costs [8]. The infamous Pentium fdiv
bug [62] illustrated a clear economic need for ﬁeld up-
dates after deployment in order to turn off defective parts
and patch erroneous behavior. Note that the implementa-
tion of a modern processor involves millions of lines of
HDL code [55] and veriﬁcation of functional correctness
for such processors is still an unsolved problem [4, 29].
Since the 1970s, x86 processor manufacturers have
used microcode to decode complex instructions into series
of simpliﬁed microinstructions for reasons of efﬁciency
and diagnostics [43]. From a high-level perspective, mi-
crocode is an interpreter between the user-visible Com-
plex Instruction Set Computer (CISC) Instruction Set Ar-
chitecture (ISA) and internal hardware based on Reduced
Instruction Set Computer (RISC) paradigms [54]. Al-
though microcode was initially implemented in read-only
memory, manufacturers introduced an update mechanism
by means of a patch Random Access Memory (RAM).
Once erroneous CPU behavior is discovered, manu-
facturers publish a microcode update, which is loaded
through the BIOS/UEFI or operating system during the
boot process. Due to the volatility of the patch RAM, mi-
crocode updates are not persistent and have to be reloaded
after each processor reset. On the basis of microcode
updates, processor manufacturers obtain ﬂexibility and
reduce costs of correcting erroneous behavior. Note that
both Intel and AMD deploy a microcode update mecha-
nism since Pentium Pro (P6) in 1995 [15, 30] and K7 in
1999 [2, 15], respectively. Unfortunately, CPU vendors
keep information about microcode secret. Publicly avail-
able documentation and patents merely state vague claims
about how real-world microcode might actually look like,
but provide little other insight.
Goals. In this paper, we focus on microcode in x86
CPUs and our goal is to answer the following research
questions:
USENIX Association
26th USENIX Security Symposium    1163
1. What is microcode and what is its role in x86 CPUs?
2. How does the microcode update mechanism work?
3. How can the proprietary microcode encoding be
reverse engineered in a structured, semi-automatic
way?
4. How do real-world systems proﬁt from microcode
and how can malicious microcode be leveraged for
attacks?
In order to answer question (1), we emphasize that in-
formation regarding microcode is scattered among many
sources (often only in patents). Hence, an important part
of our work is dedicated to summarize this prerequisite
knowledge forming the foundation to answer the more
in-depth research questions. Furthermore, we tackle short-
comings of prior attempted security analyses of x86 mi-
crocode, which were not able to reverse engineer mi-
crocode [6, 15]. We develop a novel technique to reverse
engineer the encoding and thus answer question (2). After
we obtain a detailed understanding of the x86 microcode
for several CPU architectures, we can address question (3).
As a result, we obtain an understanding of the inner work-
ings of CPU updates and can even generate our own up-
dates. In particular, we focus on potential applications of
microprograms for both defensive and offensive purposes
to answer question (4). We demonstrate how a micropro-
gram can be utilized to instrument a binary executable on
the CPU layer and we also introduce different kinds of
backdoors that are enabled via microcode updates.
Our analysis focuses on the AMD K8/K10 microarchi-
tecture since these CPUs do not use cryptographic signa-
tures to verify the integrity and authenticity of microcode
updates. Note that Intel started to cryptographically sign
microcode updates in 1995 [15] and AMD started to de-
ploy strong cryptographic protection in 2011 [15]. We
assume that the underlying microcode update mechanism
is similar, but cannot analyze the microcode updates since
we cannot decrypt them.
Contributions. In summary, our main contributions in
this paper are as follows:
• In-depth Analysis of Microcode. We provide an
in-depth overview of the opaque role of microcode
in modern CPUs. In particular, we present the funda-
mental principles of microcode updates as deployed
by vendors to patch CPU defects and errors.
• Novel RE Technique. We introduce the ﬁrst semi-
automatic reverse engineering technique to disclose
microcode encoding of general-purpose CPUs. Fur-
thermore, we describe the design and implementa-
tion of our framework that allows us to perform this
reverse engineering.
• Comprehensive Evaluation. We demonstrate the
efﬁcacy of our technique on several Commercial Off-
The-Shelf (COTS) AMD x86 CPU architectures. We
provide the microcode encoding format and report
novel insights into AMD x86 CPU internals. Addi-
tionally, we present our hardware reverse engineer-
ing ﬁndings based on delayering actual CPUs.
• Proof-of-Concept Microprograms. We are the
ﬁrst to present fully-ﬂedged microprograms for x86
CPUs. Our carefully chosen microprograms high-
light beneﬁts as well as severe consequences of un-
veiled microcode to real-world systems.
2 Related Work
Before presenting the results of our analysis process, we
brieﬂy review existing literature on microprogramming
and related topics.
Microprogramming. Since Wilkes’ seminal work in
1951 [61], numerous works in academia as well as in-
dustry adopted and advanced microprogrammed CPU
designs. Diverse branches of research related to micro-
programming include higher-level microcode languages,
microcode compilers and tools, and microcode veriﬁca-
tion [5, 43, 56]. Other major research areas focus on
optimization of microcode, i.e., minimizing execution
time and memory space [32]. In addition, several applica-
tions of microprogramming were developed [27] such as
diagnostics [41].
Since microcode of today’s x86 CPUs has not been
publicly documented yet, several works attempted a high-
level security analysis for CPUs from both Intel and
AMD [6, 15]. Even though these works reported the
workings of the microcode update mechanism, the pur-
pose of ﬁelds within the microcode update header, and
the presence of other metadata, none of the works was
able to reverse engineer the essential microcode encoding.
Hence, they were not able to build microcode updates on
their own.
We want to note that Arrigo Triulzi presented at
TROOPERS’15 and ’16 that he had been able to patch
the microcode of an AMD K8 microarchitecture [59, 60].
However, he did neither publish the details of his reverse
engineering nor the microcode encoding.
Imperfect CPU Design. Although microcode updates
can be leveraged to rectify some erroneous behavior, it
is not a panacea. Microcode updates are able to degrade
performance due to additional condition checks and they
cannot be applied in all cases. An infamous example is
AMD’s K7, where the microcode update mechanism itself
was defective [2, 15]. In order to tackle these shortcom-
ings, diverse techniques have been proposed including dy-
1164    26th USENIX Security Symposium
USENIX Association
namic instruction stream editing [16], ﬁeld-programmable
hardware [49], and hardware checks [8, 36].
Trusted Hardware. The security of applications and
operating systems builds on top of the security of the un-
derlying hardware. Typically software is not designed to
be executed on untrusted or potentially malicious hard-
ware [11, 20, 22]. Once hardware behaves erroneously
(regardless of whether deliberately or not), software se-
curity mechanisms can be invalidated. Numerous secure
processors have been proposed over the years [18, 23, 37].
Commercially available examples include technologies
such as Intel SGX [17] and AMD Paciﬁca [3].
However, the periodicity of security-critical faults [4,
29] and undocumented debug features [22] in closed-
source CPU architectures challenges their trustworthi-
ness [17, 45].
3 Microcode
As noted earlier, microcode can be seen as an abstraction
layer on top of the physical components of a CPU. In
this section, we provide a general overview of the mecha-
nisms behind microcode and also cover details about the
microcode structure and update mechanism.
3.1 Overview
The ISA provides a consistent interface to software and
deﬁnes instructions, registers, memory access, I/O, and
interrupt handling. This paper focuses on the x86 ISA,
and to avoid confusion, we refer to x86 instructions as
macroinstructions. The microarchitecture describes how
the manufacturer leveraged processor design techniques
to implement the ISA, i.e., cache size, number of pipeline
stages, and placement of cells on the die. From a high-
level perspective, the internal components of a processor
can be subdivided into data path and control unit. The data
path is a collection of functional units such as registers,
data buses, and Arithmetic Logic Unit (ALU). The con-
trol unit contains the Program Counter (PC), the Instruc-
tion Register (IR) and the Instruction Decode Unit (IDU).
The control unit operates diverse functional units in order
to drive program execution. More precisely, the control
unit translates each macroinstruction to a sequence of
actions, i.e., retrieve data from a register, perform a cer-
tain ALU operation, and then write back the result. The
control signal is the collection of electrical impulses the
control unit sends to the different functional unit in one
clock cycle. The functional units produce status signals
indicating their current state, i.e., whether the last ALU
operation equals zero, and report this feedback to the con-
trol unit. Based on the status signals, the control unit may
alter program execution, i.e., a conditional jump is taken
if the zero ﬂag is set.
The IDU plays a central role within the control unit and
generates control signals based on the contents of the in-
struction register. We distinguish between two IDU imple-
mentation concepts: (1) hardwired and (2) microcoded.
Hardwired Decode Unit. A hardwired decode unit is
implemented through sequential logic, typically a Finite
State Machine (FSM), to generate the instruction-speciﬁc
sequence of actions. Hence, it provides high efﬁciency
in terms of speed. However, for complex ISAs the lack
of hierarchy in an FSM and state explosion pose chal-
lenging problems during the design and test phases [50].
Hardwired decode units inhibit ﬂexible changes in the
late design process, i.e., correcting bugs that occurred
during test and veriﬁcation, because the previous phases
have to be repeated. Furthermore, post-manufacturing
changes (to correct bugs) require modiﬁcation of the hard-
ware, which is not (economically) viable for deployed
CPUs [62]. Hence, hardwired decode units are suited for
simple ISAs such as RISC processors like SPARC and
MIPS.
Microcoded Decode Unit.
In contrast to the hard-
wired approach, the microcoded IDU does not generate
the control signals on-the-ﬂy, but rather replays precom-
puted control words. We refer to one control word as
microinstruction. A microinstruction contains all con-
trol information required to operate all involved func-
tional units for one clock cycle. We refer to a plurality
of microinstructions as microcode. Microinstructions are
fetched from the microcode storage, often implemented
as on-chip Read-Only Memory (ROM). The opcode bytes
of the currently decoded macroinstruction are leveraged
to generate an initial address, which serves as the en-
try point into microcode storage. Each microinstruction
is followed by a sequence word, which contains the ad-
dress to the next microinstruction. The sequence word
may also indicate that the decoding process of the cur-
rent macroinstruction is complete. It should be noted that
one macroinstruction often issues more than one microin-
struction. The microcode sequencer operates the whole
decoding process, successively selecting microinstruc-
tions until the decode complete indicator comes up. The
microcode sequencer also handles conditional microcode
branches supported by some microarchitectures. Precom-
puting and storing control words introduces ﬂexibility:
Changes, patches, and adding new instructions can be
moved to the late stages of the design process. The design
process is simpliﬁed because changes in decode logic
only require adaption of the microcode ROM content. On
the downside, decoding latency increases due to ROM
fetch and multistage decode logic. A microcoded IDU is
the prevalent choice for commercial CISC processors.
USENIX Association
26th USENIX Security Symposium    1165
3.2 Microcode Structure
Two common principles exist to pack control signals
into microinstructions. This choice greatly inﬂuences
the whole microarchitecture and has a huge impact on the
size of microcode programs.
Horizontal Encoding. The horizontal encoding desig-
nates one bit position in the microinstruction for each con-
trol signal of all functional units. For the sake of simple
logic and speed, no further encoding or compression is ap-
plied. This results in broad control words, even for small
processors. The historical IBM System/360 M50 pro-
cessor with horizontally-encoded microcode used 85-bit
control words [53]. The nature of horizontal microcode
allows the programmer to explicitly address several func-
tional units at the same time to launch parallel computa-
tions, thus using the units efﬁciently. One disadvantage is
the rather large microcode ROM due to the long control
words.
Vertical Encoding. Vertically encoded microcode may
look like a common RISC instruction set. The microin-
struction usually contains an opcode ﬁeld that selects the
operation to be performed and additional operand ﬁelds.
The operand ﬁelds may vary in number and size depend-
ing on the opcode and speciﬁc ﬂag ﬁelds. Bit positions
can be reused efﬁciently, thus the microinstructions are
more compact. The lack of explicit parallelism simpliﬁes
the implementation of microcode programs, but may im-
pact performance. One encoded operation may activate
multiple control signals to potentially several functional
units. Hence, another level of decoding is required. The
microcode instruction set and encoding should be cho-
sen carefully to keep the second-level decoding overhead
minimal.
3.3 Microcode Updates
One particular beneﬁt of microcoded microarchitectures
is the capability to install changes and bug ﬁxes in the late
design process. This advantage can be extended even fur-
ther: With the introduction of microcode updates, one can
alter processor behavior even after production. Manufac-
turers leverage microcode patches for debugging purposes
and ﬁxing processor errata. The well-known fdiv bug [62],
which affected Intel Pentium processors in 1994, raised
awareness that similarly to software, complex hardware is
error-prone, too. This arguably motivated manufacturers
to drive forward the development of microcode update
mechanisms. Typically, a microcode patch is uploaded
to the CPU by the motherboard ﬁrmware (e.g., BIOS
or UEFI) or the operating system during the early boot
process. Microcode updates are stored in low-latency,
volatile, on-chip RAM. Consequently, microcode patches
are not persistent. Usually, the microcode patch RAM
is fairly limited in size compared to microcode ROM.
A microcode patch contains a number of microinstruc-
tions, sequence words, and triggers. Triggers represent
conditions upon which the control is transferred from
microcode ROM to patch RAM. In a typical use case,
the microcode patch intercepts the ROM entry point of
a macroinstruction. During instruction decode, the mi-
crocode sequencer checks the triggers and redirects con-
trol to the patch RAM if needed. A typical microcode
program residing in patch RAM then may, for example,
sanitize input data in the operands and transfer control
back to the microcode ROM.