    *第 9 行*创建一个注释，将该资源声明为`pre-upgrade`钩子。*第 10 行*创建一个`helm.sh/hook-weight`注释，以确定与其他升级前挂钩相比，该资源的创建顺序。权重以升序运行，因此该资源将在其他升级前资源之前创建。
5.  创建`persistentvolumeclaim.yaml`文件后，我们将创建最终的预升级模板`job.yaml`。将以下内容复制到您的`backup/job.yaml`文件中(该文件也可以从位于 https://github . com/PacktPublishing/-Learn-Helm/blob/master/Helm-charts/chaRTS/guest book/templates/backup/job . YAML 的 Packt 存储库中复制):
![](img/Figure_5.8.jpg)
图 5.8:备份/作业模板
让我们浏览一下这个`job.yaml`模板的第部分，了解它是如何创建的。
*第 9 行*再次将该模板定义为升级前挂钩。*第 11 行*将钩重设置为`1,`，表示该资源将在另一个预升级`PersistentVolumeClaim`后创建。
*第 10 行*设置一个新的注释，以确定何时删除该作业。默认情况下，Helm 不会管理超出初始创建的钩子，这意味着当`helm uninstall`命令运行时，钩子不会被删除。`helm.sh/hook-delete-policy`注释用于确定删除资源的条件。该作业包含`before-hook-creation`删除策略，该策略指示如果名称空间中已经存在该作业，它将在`helm upgrade`命令期间被删除，从而允许在其位置创建新作业。该作业还将具有`hook-succeeded`删除策略，如果成功运行，将导致其被删除。
*第 19 行*执行`dump.rdb`文件的备份。它连接到 Redis 主服务器，保存数据库的状态，并将文件复制到备份 PVC。
*第 29 行*和*第 32 行*分别定义了 Redis 主聚氯乙烯和备用聚氯乙烯。这些 PVC 由作业装载，以便复制`dump.rdb`文件。
如果您已经按照执行了前面的每个步骤，那么您已经为您的 Helm 图表创建了升级前挂钩。让我们继续下一节来创建回滚前挂钩。之后，我们将重新部署`guestbook`图表，以查看这些挂钩的运行情况。
### 创建回滚前挂钩来恢复数据库
虽然升级前挂钩被写入以将`dump.rdb`文件从 Redis 主 PVC 复制到备份 PVC，但是`pre-rollback`挂钩可以被写入以执行反向操作，从而将数据库恢复到以前的快照。
按照以下步骤创建回滚前挂钩:
1.  创建`templates/restore`文件夹，该文件夹将用于包含预回滚挂钩，如下所示:
    ```
    $ mkdir guestbook/templates/restore
    ```
2.  接下来，脚手架一个空的`job.yaml`模板，将用于恢复数据库，如下所示:
    ```
    $ touch guestbook/templates/restore/job.yaml
    ```
3.  您可以通过参考位于 https://github . com/Packt publishing/-Learn-Helm/tree/master/Helm-charts/charts/guest book/templates/restore 的 Packt 存储库来检查您是否创建了正确的结构[。](https://github.com/PacktPublishing/-Learn-Helm/tree/master/helm-charts/charts/guestbook/templates/restore)
4.  接下来，让我们向`job.yaml`文件添加内容。将以下内容复制到您的`restore/job.yaml`文件中(该文件可以是[文件，因此可以从位于 https://github . com/PacktPublishing/-Learn-Helm/blob/master/Helm-charts/c](https://github.com/PacktPublishing/-Learn-Helm/blob/master/helm-charts/charts/guestbook/templates/restore/job.yaml)harts/guest book/templates/restore/job . YAML 的 Packt 存储库中复制):
![Figure 5.9: The rollback/job.yaml template ](img/Figure_5.9.jpg)
图 5.9:回滚/作业模板
*此模板的第 7 行*将此资源声明为`pre-rollback`钩子。
实际数据恢复在*18*和 *19* 行进行。*第 18 行*将`dump.rdb`文件从备份 PVC 复制到 Redis 主 PVC。复制后，*第 19 行*重新启动数据库，以便重新加载快照。用于重新启动 Redis 数据库的命令将返回一个失败的退出代码，因为与数据库的连接将意外终止，但这可以通过在命令后附加`|| true`来解决，这将否定退出代码。
*第 29 行*定义了 Redis 主卷，*第 32 行*定义了所需的备份卷，该卷由它要回滚到的版本决定。
随着升级前和回滚前生命周期挂钩的创建，让我们通过在 minikube 环境中运行它们来看看它们是如何工作的。
### 执行生命周期挂钩
为了运行您创建的生命周期挂钩，您必须首先通过运行`helm install`命令再次安装图表，如下所示:
```
$ helm install my-guestbook guestbook -n chapter5
```
当每个 Pod 报告`1/1` `Ready`状态时，按照显示的发行说明访问您的留言簿应用。请注意，访问应用的端口将与以前不同。
进入留言簿前端后，写一条信息。在下面的截图中可以看到一条示例消息:
![Figure 5.10: The Guestbook frontend upon installing the Guestbook chart and entering a message ](img/Figure_5.10.jpg)
图 5.10:安装留言簿图表并输入消息时的留言簿前端
一旦消息被写入，并且其文本显示在**提交**按钮下，运行`helm upgrade`命令以触发预升级挂钩。`helm upgrade`命令会短暂挂起，直到备份完成，在这里可以看到:
```
$ helm upgrade my-guestbook guestbook -n chapter5
```
当命令返回时，您应该会发现 Redis 主 PVC 以及一个新创建的 PVC，称为`redis-data-redis-master-0-backup-1`，可以在这里看到:
```
$ kubectl get pvc -n chapter5
NAME                                 STATUS
redis-data-redis-master-0            Bound
redis-data-redis-master-0-backup-1   Bound
```
该聚氯乙烯包含一个数据快照，可用于在回滚前生命周期阶段恢复数据库。
现在让我们继续向留言簿前端添加额外的消息。您应该在**提交**按钮下显示两条消息，如下图所示:
![Figure 5.11: Guestbook messages before running the rollback ](img/Figure_5.11.jpg)
图 5.11:运行回滚之前的留言簿消息
现在，运行`helm rollback`命令恢复到第一个版本。该命令将短暂挂起，直到恢复过程完成，可以在此处看到:
```
$ helm rollback my-guestbook 1 -n chapter5
```
当这个命令返回时，在浏览器中刷新你的留言簿前端。您将看到升级后添加的消息消失，因为它在进行数据备份之前并不存在，如下图所示:
![Figure 5.12: The Guestbook frontend after the pre-rollback life cycle phase is complete ](img/Figure_5.12.jpg)
图 5.12:回滚前生命周期阶段完成后的留言簿前端
虽然这个备份和恢复场景是一个简单的用例，但它展示了在图表中添加 Helm 生命周期挂钩所能提供的众多可能性之一。
重要说明
通过将`--no-hooks`标志添加到相应的生命周期命令(`helm install`、`helm upgrade`、`helm rollback`或`helm uninstall`)中，可以跳过钩子。应用此命令的命令将跳过该生命周期的钩子。
我们现在将重点关注用户输入验证以及如何进一步改进留言簿图表，以帮助防止提供不正确的值。
## 添加输入验证
使用 Kubernetes 和 Helm 时，当创建新资源时，输入验证由 Kubernetes **应用编程接口** ( **API** )服务器自动执行。这意味着如果 Helm 创建了无效资源，API 服务器将返回错误消息，导致安装失败。尽管 Kubernetes 执行本机输入验证，但仍可能有图表开发人员希望在资源到达 API 服务器之前执行验证的情况。
让我们开始探索如何通过使用`guestbook`Helm 图表中的`fail`功能来执行输入验证。
### 使用失败功能
`fail`功能用于模板渲染立即失败。当用户提供的值无效时，可以使用该函数。在本节中，我们将实现一个示例用例来限制用户输入。
您的`guestbook`图表的`values.yaml`文件包含一个名为`service.type`的值，用于确定应该为前端创建的服务类型。这个值可以在这里看到:
```
service:
  type: NodePort
```
我们将该值设置为默认为`NodePort`，但从技术上讲，也可以使用其他服务类型。假设您希望将服务类型限制为仅`NodePort`和`ClusterIP`服务。这个动作可以使用`fail`功能来执行。
按照以下步骤限制您的`guestbook`图表中的服务类型:
1.  Locate the `templates/service.yaml` service template. This file contains a line that sets the service type depending on the `service.type` value, as illustrated here:
    ```
    type: {{ .Values.service.type }}
    ```
    在设置服务类型之前，我们应该先检查`service.type`值是否等于`ClusterIP`或`NodePort`。这可以通过在适当的设置列表中设置一个变量来实现。然后，可以执行检查以确定`service.type`值包括在有效设置列表中。如果是，则继续设置服务类型。否则，应停止图表渲染，并向用户返回错误消息，通知他们有效的`service.type`输入。
2.  复制下图所示的`service.yaml`文件，实现*步骤 1* 中描述的逻辑。此文件也可以从 Packt 存储库中复制，网址为 https://github . com/Packtpublishing/-Learn-Helm/blob/master/Helm-charts/charts/guest book/templates/service . YAML:
![](img/Figure_5.13.jpg)
图 5.13:在 service.yaml 模板中实现的服务类型验证
*第 8 行*至*第 13 行*表示输入验证。*第 8 行*创建了一个名为`serviceTypes`的变量，该变量等于正确服务类型的列表。*第 9 行*至*第 13 行*代表一个`if`动作。第 9 行中的`has`功能将检查`service.type`值是否包含在`serviceTypes`中。如果是，渲染将进入*第 10 行*设置服务类型。否则，渲染将进行到*第 12 行*。*第 12 行*使用`fail`功能暂停模板渲染，并向用户显示关于有效服务类型的消息。
尝试通过提供无效的服务类型来升级您的`my-guestbook`版本(如果您已经卸载了您的版本，安装也就足够了)。为此，请运行以下命令:
```
$ helm upgrade my-guestbook . -n chapter5 --set service.type=LoadBalancer
```
如果您在前面的*步骤 2* 中所做的更改成功，您应该会看到类似如下的消息:
```
Error: UPGRADE FAILED: template: guestbook/templates/service.yaml:12:6: executing 'guestbook/templates/service.yaml' at : error calling fail: value 'service.type' must be either 'ClusterIP' or 'NodePort'
```
虽然用`fail`验证用户的输入是确保所提供的值符合某一组约束的好方法，但也有一些情况需要确保用户一开始就提供了某些值。这可以通过使用`required`功能来实现，这将在下一节中解释。
### 使用所需的功能
`required`功能与`fail`一样，也用于暂停模板渲染。不同之处在于，与`fail`不同的是，`required`功能用于确保在渲染图表模板时不将值留空。
回想一下，您的图表包含一个名为`image.repository`的值，如下图所示:
```
image:
  repository: gcr.io/google-samples/gb-frontend
```
该值用于确定将要部署的映像。鉴于该值对 Helm 图表的重要性，我们可以使用`required`功能来支持它，以确保图表安装时它始终有一个值。虽然我们目前在这个图表中提供了一个默认值，但是如果您想确保用户总是提供他们自己的容器映像，添加`required`功能将允许您删除这个默认值。
按照以下步骤针对`image.repository`值执行`required`功能:
1.  定位`templates/deployment.yaml`图表模板。该文件包含一条基于`image.repository`值设置容器映像的线(`appName`图表设置也有助于设置容器映像，但对于本例，我们将只关注`image.repository`，如下图所示:
    ```