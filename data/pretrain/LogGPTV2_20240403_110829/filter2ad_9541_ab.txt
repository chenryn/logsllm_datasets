](https://images.seebug.org/content/images/2018/10/bbc808f6-fa53-4654-a63e-e0727887a074.jpeg-w331s)
可以看到这里是在 Jre 自带的过滤（JEP290）不可用的情况下才会使用自身实现的方法进行过滤，如果检测到是在黑名单中会抛出异常 Unauthorized
deserialization attempt。看下 isBlacklistedLegacy 方法：
![
](https://images.seebug.org/content/images/2018/10/be28104a-c48d-479f-a66c-999e024671f4.jpeg-w331s)
可以看到要是类名第一个字符为 [（在字段描述符中是数组）或是 primitiveTypes（一些基础数据类型）中的其中一个，是不会进行检测的。
![
](https://images.seebug.org/content/images/2018/10/a11103a9-8578-4d99-8e14-ed9a56da7914.jpeg-w331s)
检测的地方有两个，一个是类名，一个包名，只要其中一个出现在 LEGACY_BLACKLIST 中便会像前面看到的抛出异常。下面来看一下
LEGACY_BLACKLIST 的值是从哪里来的。
看 WebLogicObjectInputFilter 的一个初始化方法：
![
](https://images.seebug.org/content/images/2018/10/5549da23-66ab-4dc5-a56c-ac0fd94f8d8c.jpeg-w331s)
在 Jre 的过滤不可用的情况下会设置 LEGACY_BLACKLIST 的值，跟入 getLegacyBlacklist 方法：
![
](https://images.seebug.org/content/images/2018/10/c6e13597-ed27-4b22-9d5d-4da3ed614cf4.jpeg-w331s)
值来自于 WebLogicFilterConfig 类的成员变量 BLACKLIST，BLACKLIST 的值由
constructLegacyBlacklist 方法生成：
![
](https://images.seebug.org/content/images/2018/10/67c8d9a2-9005-4ef4-a90a-6f047d5c13c2.jpeg-w331s)
这里的参数var1，var2 和 var3 对应着
![
](https://images.seebug.org/content/images/2018/10/08a570a5-a042-4bd4-9258-f8c198287c1a.jpeg-w331s)
也就是说还可以通过启动参数来控制是否添加黑名单，动态添加或删除一些黑名单。默认情况下的话黑名单就是来自 WebLogicFilterConfig 类中的
DEFAULT_BLACKLIST_PACKAGES 和 DEFAULT_BLACKLIST_CLASSES 了。
打了十月份补丁之后的黑名单如下：
    private static final String[] DEFAULT_BLACKLIST_PACKAGES = new String[]{"org.apache.commons.collections.functors", "com.sun.org.apache.xalan.internal.xsltc.trax", "javassist", "java.rmi.activation", "sun.rmi.server"};
    private static final String[] DEFAULT_BLACKLIST_CLASSES = new String[]{"org.codehaus.groovy.runtime.ConvertedClosure", "org.codehaus.groovy.runtime.ConversionHandler", "org.codehaus.groovy.runtime.MethodClosure", "org.springframework.transaction.support.AbstractPlatformTransactionManager", "java.rmi.server.UnicastRemoteObject", "java.rmi.server.RemoteObjectInvocationHandler", "com.bea.core.repackaged.springframework.transaction.support.AbstractPlatformTransactionManager", "java.rmi.server.RemoteObject"};
#### 2.2 WebLogic 使用 JEP290 做的过滤
JEP290 是 Java9 新添加可以对序列化数据进行检测的一个特性。之后往下对 8u121，7u131 和 6u141
这几个版本也支持了。该特性可用于对序列化数据的最大字节数，深度，数组大小和引用数进行限制，当然还有对类的检测了。使用这个的方法可以为实现
ObjectInputFilter 接口（低版本的 JDK 只在 sun.misc 包中有这个类，Java9 以上在 java.io 包中，目前
Oracle 对 Java9 和 Java10 都停止支持了，最新为 Java11），然后重写 checkInput 方法来对序列化数据进行检测。高版本的
JDK 中 RMI 就有用到这个来做过滤，看下 WebLogic 是如何使用的，JDK 版本为 8u152。
WebLogic 是通过反射来获取到 java.io.ObjectInputFilter 或是 sun.misc.ObjectInputFilter
的各个方法的方式来实现一个 JreFilterApiProxy 对象：
![
](https://images.seebug.org/content/images/2018/10/671eb5be-f868-4bcc-9f30-d91bb67b36f5.jpeg-w331s)
determineJreFilterSupportLevel 方法：
![
](https://images.seebug.org/content/images/2018/10/b03692c9-f47c-4155-b0d1-d2fadf7c18c5.jpeg-w331s)
后面的流程大抵如下，根据 DEFAULT_BLACKLIST_PACKAGES 和 DEFAULT_BLACKLIST_CLASSES 的值来给
WebLogicFilterConfig 对象中的成员变量 serialFilter 赋值，serialFilter 的值是作为 JEP290
对序列化数据进行检测的一个格式（里面包含需要做检测的默认值，用分号隔开。包名后面需要带星号，包名或者类名前面带感叹号的话表示黑名单，没有则表示白名单。这些在
ObjectInputFilter 这个接口的方法中都能看到）。接下来就是反射调用 setObjectInputFilter 方法将
serialFilter 的值赋给 ObjectInputStream 中的 serialFilter（假如 ObjectInputStream 对象中的
serialFilter 值为空是不会对序列化数据进行检测的）。看一下 WebLogic 设置好的 serialFilter：
![
](https://images.seebug.org/content/images/2018/10/277c67a7-5a21-4bde-87e6-0616346c463e.jpeg-w331s)
再看 ObjectInputStream 这边，图的左下可以看到从反序列化到进入检测的调用栈：
![
](https://images.seebug.org/content/images/2018/10/be929741-369c-474a-9720-e675e48ec8df.jpeg-w331s)
跟入 checkInput 方法：
![
](https://images.seebug.org/content/images/2018/10/27e001cb-899f-4c2d-b412-607e011926c1.jpeg-w331s)
前面有些常规的检测，红圈部分是针对 serialFilter 里的格式进行检测的，这里用到了 `Function` 接口和 lambda
语法。看下 ObjectInputFilter 接口中的内部类 Global 的代码块就能明白这里是咋做的检测了。
![
](https://images.seebug.org/content/images/2018/10/5d94079b-a68d-4f47-92da-b6cedf415aee.png-w331s)
看到它是做的字符串对比（类名和包名）。再回到 ObjectInputStream 类中的 filterCheck 方法代码块的下面：
![
](https://images.seebug.org/content/images/2018/10/e1d1ef0b-06bd-4644-84d1-7cb237a4bb2c.jpeg-w331s)
只要返回的状态是空或者 REJECTED 就直接会抛出异常结束反序列流程了。其它的返回状态只做一个日志记录。
#### 2.3 小结
这一章中可以看到 WebLogic 针对反序列化的防御方法有两种，分别对应着 JEP290 不可用和可用的这两种情况。JEP290
这个的代码逻辑还是挺长的，所以在写分析的时候并没有把每一步的具体内容都写上。这两种方法都是用黑名单的方式来做的过滤，其实它们也不是不能做成白名单，个人觉得白名单的方式应该很容易影响程序的功能，因为
Java
中各种接口和类的封装导致搞不清在反序列化的时候会用到哪些接口或类，所以写代码的时候不好去确定这样一个白名单出来。目前来看这样的过滤方式只有说是在找到新的
Gadget 的情况下才能绕过，从另一个角度来看这样的过滤也使得这里会一直存在问题，只是问题还没被发现。
### 0x03 WebLogic 远程调试及10月补丁修复的漏洞
#### 3.1 WebLogic 远程调试
修改 domain/bin/setDomainEnv.sh，设置 debugFlag 为true
![
](https://images.seebug.org/content/images/2018/10/68d4603e-f6dd-46d6-a38b-97e16b5b8a53.jpeg-w331s)
这样启动的时候会监听 8453 作为调试端口，然后使用 Idea 之类的 IDE 建立一个远程调试的配置连接到该端口就可以。需要把 WebLogic 中
jar 包添加到项目中去。因为 WebLogic 没有源码，调试时的代码都是反编译得到的，所以有监控不到变量或者执行的位置跟代码行对不上的问题。
#### 3.2 CVE-2018-3245
这个洞是 7 月份 CVE-2018-2893 的补丁还没有修复完善导致的绕过，涉及到 JRMPClient 这个 Gadget
的构造，具体可以参考[Weblogic JRMP反序列化漏洞回顾](https://xz.aliyun.com/t/2479 "Weblogic
JRMP反序列化漏洞回顾")
这里提一点，黑名单中添加的类名不是直接序列化对象的类名而是它的父类类名能做到过滤效果的原因是在序列化数据中是会带上父类类名的。
#### 3.3 CVE-2018-3191
这个 Gadget 不是新的，只是在 com.bea.core.repackaged.springframework 这个包里还有相关的类。
结合第一章提到的 readObject 这个 Gadget 是非常好理解的，只是还需要知道 JNDI 的利用方式才能完整实现利用。
com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager
这个类在进行反序列化的时候会触发 JNDI 查询，结合针对 JNDI 的利用便可以做到代码执行的效果。
JtaTransactionManager 类的 readObject 方法：
![
](https://images.seebug.org/content/images/2018/10/69106c29-81b5-43fa-849b-acc8a2eb0e96.jpeg-w331s)
进入 initUserTransactionAndTransactionManager 方法：
![
](https://images.seebug.org/content/images/2018/10/1e48a130-2844-4e80-ab0f-9c33cb0dcef2.jpeg-w331s)
进入 lookupUserTransaction 方法再往下跟很快就可以看到 JDNI 的查询方法 lookup：
![
](https://images.seebug.org/content/images/2018/10/3cb5fe45-0ef3-486c-9ccf-a8e734a10185.jpeg-w331s)
针对 JNDI 的一个利用前提便是 lookup 方法的参数可控，即 name 的值能被传入成一个 RMI 或者 LDAP
的绝对路径。从前面的代码可以知道这里的 name 的值来自于 JtaTransactionManager 类中的成员变量
transactionManagerName，因此只要设置 transactionManagerName 值为可控的 RMI 地址，然后将
JtaTransactionManager 对象序列化后通过 T3 协议传输给 WebLogic 便可以在 T3 协议对数据进行反序列化的时候完成利用。
利用演示：
![
](https://images.seebug.org/content/images/2018/10/f2dc42a2-7967-4b18-893a-a4b890ed06a0.jpeg-w331s)
因为是针对 JDNI 的利用，所以要想在默认的情况下进行利用需要 JDK 的版本小于 8u121 或者 7u131（因为高于这些版本默认情况下已经将
trustURLCodebase 的值设为 false，使得不能做远程类加载），同时服务器需要能够连接外网。
#### 0x04 参考链接
  * [Combating Java Deserialization Vulnerabilities with Look-Ahead Object Input Streams (LAOIS)](https://www.nccgroup.trust/us/our-research/combating-java-deserialization-vulnerabilities-with-look-ahead-object-input-streams-laois/ "Combating Java Deserialization Vulnerabilities with Look-Ahead Object Input Streams \(LAOIS\)")
  * [Weblogic CVE-2018-3191分析](https://mp.weixin.qq.com/s/ebKHjpbQcszAy_vPocW0Sg "Weblogic CVE-2018-3191分析")
* * *