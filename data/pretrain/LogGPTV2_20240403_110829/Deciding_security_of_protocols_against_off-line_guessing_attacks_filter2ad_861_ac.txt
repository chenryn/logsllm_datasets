X ? t, where in the latter case, X may appear only
once in C;
• σ is an idempotent substitution satisfying dom(σ) ∩
var(Φ; Ψ;C) = ∅.
We introduce quantiﬁers on second-order variables ∀β for
technical reasons regarding the termination of the proce-
dure on convergent subterm rewriting systems. Those will
be used in Section 4.3 and may be safely ignored for the
moment. We apply the usual conventions on binders ∀β.
Notably, equality between quantiﬁed expressions is under-
stood modulo renaming of bound variables and deletion of
useless ones (i.e. ∀β.M = ∀(β ∩ var(M )).M ). We let
var(∀β.M  t) = var(M ) ∪ var(t) − β, var(∀β.M ./ N ) =
var(M )∪ var(N )− β. Substitutions are applied accordingly:
(∀β.M  t)σ = ∀β.M σ  tσ if β ∩ var(σ) = ∅. Besides we
see ./ as a commutative symbol.
The cryptographic intuition behind the four sets Φ; Ψ;C; σ
of each constraint system is the following. A frame rule
∀β.M  t in Φ records the fact that a term t is computable
(or deducible [1]) by the intruder using any computation (or
recipe) M µ, with dom(µ) ⊆ β. Initially, recipes are simply
parameters w1 . . . wam and the set of rules is simply a frame
 tam}. During the procedure, new facts
{w1  t1, . . . , wam
are inferred. For instance, if w1  enc(a, b) and w2  b, we
may add dec(w1, w2)  a.
Equations ∀β.M ./ N in Ψ correspond to relations that
intuitively any two computa-
are visible to the intruder:
tions M µ and N µ, dom(µ) ⊆ β, yield the same result when
parameters are substituted with their actual values. For in-
stance, given the two rules w1  h(n) and w2  n, a visible
equation is w1 ./ h(w2).
C is a set of constraints: either deducibility constraints
X ? t, meaning that t must be computable by the in-
truder using a (yet) unknown recipe X, or equality con-
straints t1 =?R t2, so as to account for tests done by honest
participants. Finally, σ is used to record the solved variables
of a system.
A closed (well-formed) substitution θ with dom(θ) = Y is
a solution to Σ = Φ; Ψ;C; σ, written θ |= Σ, iﬀ there exists
a closed (well-formed) substitution λ with dom(λ) ⊇ var(Σ)
such that:
• for every constraint X ? t in C, there exist an m-
ary (public closed) context C, some rules ∀β1.M1 
t1 . . .∀βm.Mm  tm ∈ Φ, some closed substitutions
µ1 . . . µm with dom(µi) ⊆ βi such that
Xλ = C[M1µ1λ . . . Mmµmλ] and tλ = C[t1λ . . . tmλ];
• for every equation t1 =?R t2 in C, t1λ =R t2λ;
• λ extends σ, in the sense that σλ = λ;
• λ is related to θ, meaning that for all X ∈ Y, we have
Xθ =R∪Ψλ Xλ.
 tam} and
We have used =R∪Ψλ to denote the equivalence relation as-
sociated to the rewriting rules in R and the equations in
Ψλ—seen as pairs of rewriting rules, one for each direction.
We may write θ, λ |= Σ to specify a λ associated to a solution
θ.
Intruder constraint systems of Section 2 are seen as ex-
tended constraint systems Σ = Φ;∅;C;∅ where, using the
notations of Section 2, we let
Φ = {w1  t1, . . . , wam
n}.
C = {X1 ? x1, . . . , Xm ? xm, s1 =?R s
0
0
1, . . . , sn =?R s
Solutions to such a Σ are deﬁned equivalently using the def-
inition of intruder constraint systems or that of extended
constraint systems. Notice that, due to the regularity con-
ditions on intruder constraint systems (Section 2), for every
solution θ, there exists a unique λ (up to =R, once restricted
to var(Σ) ) such that θ, λ |= Σ.
A constraint system Σ = Φ; Ψ;C; σ is pre-solved iﬀ C is of
the form above, that is, the right-hand sides of deducibility
constraints X ? t in C are pairwise distinct variables. It is
solved iﬀ besides C contains no equality constraints t1 =?R t2.
Fact 2. Every solved constraint system Σ is satisﬁable.
Indeed, let λ0 assign fresh public constants to every unsolved
variable in Σ, ensuring that Xλ0 = xλ0 for each X ? x in Σ,
but for any other pair of unsolved variables v1, v2, v1λ 6= v2λ.
Let λ = σλ0 and deﬁne θ as the restriction of λ to Y. Then
θ is a solution to Σ.
In the following, we call such a θ a
principal solution of Σ.
Our goal in the next subsection is to describe a set of
transformation rules that is sound and complete in the fol-
lowing sense: for all intruder constraint system Σ = Φ;∅;C;∅
with Φ and C written as above,
• (soundness) for every Σ0, if Σ =⇒∗ Σ0 and θ |= Σ0
then θ |= Σ; moreover the set of equations Ψ0 of Σ0 is
sound w.r.t. Σ: for all ∀β.M ./ N in Ψ0, if θ, λ |= Σ
and θ, λ0 |= Σ0, we have that (M λ0)[t1λ . . . tam λ] =R
(N λ0)[t1λ . . . tam λ];
• (completeness) if θ |= Σ then there exists a solved
constraint system Σ0 such that Σ =⇒∗ Σ0 and θ |= Σ0.
All these notions are motivated by the following character-
ization for the satisﬁability and the equivalence of intruder
constraint systems.
Proposition 1. Let =⇒ be a sound and complete set of
transformation rules.
1. An intruder constraint system Σ is satisﬁable iﬀ there
exists a solved system Σ0 such that Σ =⇒∗ Σ0.
2. Let Σ1 and Σ2 be two (X, Y )-standard (R,Y)-intruder
constraint systems, with Σ2 = Φ2;∅;C2;∅ and Φ2 = {w1 
 tam}. The following conditions are equivalent:
t1, . . . , wam
(a) Every solution to Σ1 is a solution to Σ2.
(b) For every solved constraint system Σ such that Σ1 =⇒∗
Σ, every ( resp. at least one) principal solution θ of
Σ satisﬁes: (i) θ, λ2 |= Σ2 for some λ2 and (ii) for
every equation ∀β.M ./ N of Σ, M [t1λ2 . . . tam λ2] =R
N [t1λ2 . . . tam λ2].
Provided that =⇒ is eﬀective, this entails a semi-decision
procedure for testing (non-)inclusion of sets of solutions:
enumerate all the solved constraints systems reachable from
Σ1 and check conditions (i) and (ii) on each of them. More-
over, if =⇒ is ﬁnitely-branching and terminates, then by
K¨onig’s Lemma, the number of reachable solved constraint
systems is ﬁnite, so we obtain a decision procedure.
4.2 Transformation Rules for Convergent
Rewriting Systems
We now describe a set of transformation rules that is
sound and complete for any convergent rewriting system.
Let am = max{ar(Y )| Y ∈ Y} be the maximal arity of the
second-order variables in Y. We consider the two groups of
transformation rules presented in Table 1.
The ﬁrst three rules, Project, Imitate and Coalesce,
aim to simplify deducibility constraints and bring constraint
systems into a pre-solved form. The other rules in this paper
only apply to constraint systems that are already pre-solved.
Speciﬁcally, rule Project uses a frame rule of Φ to solve
a deducibility constraint in C. By fresh renaming, we mean
that ρ may substitute variables in M with distinct vari-
ables not occurring in the system yet. This is useful both
for instantiating quantiﬁed variables with fresh copies and
for lowering arities of second-variables so as to keep σ well-
formed. Rule Imitate decomposes a deducibility constraint
into smaller constraints by applying a public symbol in head
position. Rule Coalesce merges deducibility constraints
which deal with the same ﬁrst-order variables.
It is not hard to prove that this set of three rules termi-
nates. Indeed, Imitate and Coalesce create no ﬁrst-order
variables and decrease the total size of right-hand sides of
deducibility constraints. Project either reduces the number
of unsolved ﬁrst-order variables (if dom(µ) 6= ∅) or decreases
the size of deducibility constraints as well.
The next ﬁve rules constitute the main loop of the proce-
dure. We discuss later their termination on convergent sub-
term rewriting systems. As already mentioned, these rules
are restricted to pre-solved constraint systems. Hence, an
application of any of those is generally followed by a number
of Project, Imitate and Coalesce steps.
Rules Narrowing-1, Narrowing-2 and Constrain are
classical (see e.g. [16, 12]). By “l → r fresh from R”, we
mean that the rewriting rule l → r is obtained by renaming
the variables of some rule in R so that they do not oc-
cur in the left-hand constraint system. Rules Narrowing-
1, Narrowing-2 aim to guess possible reductions resp. in
computable terms and in equality constraints. Rule Con-
strain tries to solve an equality constraint by syntactic uni-
ﬁcation.
Rule Context accounts for reductions that occur at the
top of computable terms. An example of application of this
rule is the following. Assume that M1  enc(a, x0) is in Φ
and X0 ? x0 in C. Assume a fresh rewriting rule l → r =
dec(enc(x, y), y) → x from R and fresh variables X, X1, X2
If Σ = Φ; Ψ;C; σ is pre-solved then we
of maximal arity.
have the following sequence of reductions:
Φ; Ψ;C; σ
=⇒Context Φ ∪ {X  x}; Ψ; C ∪ {X ? dec(enc(x, y), y)}; σ
=⇒Imitate Φ ∪ {dec(X1, X2)  x}; Ψ;
C ∪ {X1 ? enc(x, y), X2 ? y)}; σ{X 7→ dec(X1, X2)}
=⇒Project Φ ∪ {dec(M1, X2)  a}; Ψ; C ∪ {X2 ? x0};
. . . {X1 7→ M1, x 7→ a, y 7→ x0}
=⇒Coalesce Φ ∪ {dec(M1, X0)  a}; Ψ; C; . . . {X2 7→ X0}
where the dots (. . . ) stand for the previous substitutions.
Thus, we have inferred the new fact dec(M1, X0)  a, by ap-
plying decryption at the top of computable terms (or sup-
posedly computable terms in the case of x0).
Rule Relate is needed for the completeness of Coalesce.
It tries to ﬁnd new visible equations, that is, diﬀerent ways
to obtain a same computable term.
We now state the soundness and the completeness of the
transformation rules for any convergent rewriting system R.
(Soundness). Let Σ0 = Φ0;∅;C0;∅ be
an intruder constraint system with Φ0 = {w1  t1, . . . , tam
tam}. Let Σ0 =⇒∗ Σ be a derivation using the rules of
Table 1. If θ |= Σ then θ |= Σ0. Moreover, the set of rules Φ
and equations Ψ of Σ are sound w.r.t. Σ0: for all θ, λ0 |= Σ0
and θ, λ |= Σ,
Proposition 2

1. for all ∀β.M  t in Φ, (M λ)[t1λ0 . . . tam λ0] =R tλ;
2. for all ∀β.M ./ N in Ψ, (M λ)[t1λ0 . . . tam λ0] =R
(N λ)[t1λ0 . . . tam λ0].
The proof of soundness is done as expected by induction
on the derivation. The cases of rules Project, Imitate,
Coalesce, Narrowing-2, Constrain are straightforward.
Yet, our proof for Narrowing-1, Context and Relate re-
lies on a number of syntactic invariants. Notably, we estab-
lish the following important invariant, originating from the
regularity condition (2) on intruder constraint systems:
For every ∀β.M  t in Φ and x ∈ var(t), there
exists X ? t0 in C such that x ∈ var(t0) and
either X ∈ var(∀β.M ) or ar(X) < max{i| wi ∈
par(M )}.
Intuitively each variable occurring in a deducible term t with
∀β.M  t ∈ Φ is constrained by a second-order variable at a
lower level than M .
Proposition 3
(Completeness). Let Σ0 be an in-
If θ |= Σ0, then there exists a
truder constraint system.
solved constraint system Σ and a derivation Σ0 =⇒∗ Σ us-
ing the rules of Table 1 such that θ |= Σ.
Completeness is shown by instrumenting the rules of Table 1
with the considered solution θ, that is intuitively by deﬁning
transformations rules of the form (θ, λ |= Σ) =⇒ (θ, λ0 |=
Σ0). We successively prove the correctness of the instru-
mented rules (that is the symbol |= is actually preserved),
their progression (if the system is not solved, at least one
rule applies) and their termination.
4.3 Enforcing Termination on Convergent
Subterm Rewriting Systems
We now assume a convergent subterm rewriting system R
and show how to enforce the termination of the transforma-
tion rules.
We have already proved the termination of rules Project,
Imitate and Coalesce. Concerning the narrowing rules, we
enforce termination by using a variant of the basic narrowing
strategy (see e.g. [12]). Speciﬁcally, we augment constraint
systems with a ﬁfth component N , standing for a set of ﬁrst-
order terms. The set N is meant to store terms known to be
R-reduced. Semantically, θ is a solution to Σ = Φ; Ψ;C; σ;N
for some λ iﬀ θ, λ |= Ψ; Ψ;C; σ in the previous sense and for
all t ∈ N , tλ is R-reduced. Hence, terms which appear in N
need not be narrowed anymore. Initially, that is for intruder
constraint systems, N is set to ∅. We write st(N ) for the
set of subterms of terms in N .
The case of rule Context is more problematic as it may
introduce new variables indeﬁnitely. We address this issue
by introducing four additional transformation rules, meant
to be applied eagerly on pre-solved constraint systems.
The new set of transformation rules is presented in Ta-
ble 2. We have omitted rules Imitate and Coalesce which
are the same as in Table 1, except for the additional com-
ponent N which is left unchanged.
As suggested, rules Narrowing-{1,2} now require that
the narrowed term t|p (resp. (t1 =R t2)|p) do not belong to
st(N ). Rules Project and Relate add their argument t to
N in order to prevent further narrowing inside t. Similarly,
rule Constrain records the uniﬁed term t1µ as being R-
reduced.
Interestingly, rules Narrowing-{1,2} and Context tag
their result rσ as being R-reduced as well. This is crucial
for the termination of the algorithm as it entails that the
number of positions p eligible for narrowing steps does not
increase with rule Context and strictly decreases with rules
Narrowing-{1,2}.
As for the new rules, the two simple rules Clean-1 and
Clean-2 delete useless variables in the system. In the same
vein, rule Generalize adds universal quantiﬁers on second-
order variables X which appear free in frame rules and equa-
tions but nowhere else. This aims to reduce the number of
rules and equations, since these are considered modulo re-
naming of bound variables.
Rule Discard is a variant of Relate used to remove frame