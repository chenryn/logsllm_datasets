When you invoke ADD COLUMN, all existing rows in the table are initialized with the
column‟s default value (null if no DEFAULT clause is specified). Adding a column with a
non-null default will require the entire table to be rewritten. This may take a significant
amount of time for a large table; and it will temporarily require double the disk space.
Adding a CHECK or NOT NULL constraint requires scanning the table to verify that
existing rows meet the constraint.
The DROP COLUMN form does not physically remove the column, but simply makes it
invisible to SQL operations. Subsequent insert and update operations in the table will
store a null value for the column. Thus, dropping a column is quick but it will not
immediately reduce the on-disk size of your table, as the space occupied by the dropped
column is not reclaimed. The space will be reclaimed over time as existing rows are
updated.
Changing any part of a system catalog table is not permitted. Refer to CREATE TABLE
for a further description of valid parameters.
Examples
To add a column of type VARCHAR2 to a table:
ALTER TABLE emp ADD address VARCHAR2(30);
To drop a column from a table:
ALTER TABLE emp DROP COLUMN address;
To rename an existing column:
ALTER TABLE emp RENAME COLUMN address TO city;
To rename an existing table:
ALTER TABLE emp RENAME TO employee;
To add a check constraint to a table:
ALTER TABLE emp ADD CONSTRAINT sal_chk CHECK (sal > 500);
To remove a check constraint from a table:
ALTER TABLE emp DROP CONSTRAINT sal_chk;
See Also
CREATE TABLE, DROP TABLE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 54
Database Compatibility for Oracle® Developers
Reference Guide
2.3.11 ALTER TABLESPACE
Name
ALTER TABLESPACE -- change the definition of a tablespace
Synopsis
ALTER TABLESPACE name RENAME TO newname
Description
ALTER TABLESPACE changes the definition of a tablespace.
Parameters
name
The name of an existing tablespace.
newname
The new name of the tablespace. The new name cannot begin with pg_, as such
names are reserved for system tablespaces.
Examples
Rename tablespace empspace to employee_space:
ALTER TABLESPACE empspace RENAME TO employee_space;
See Also
DROP TABLESPACE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 55
Database Compatibility for Oracle® Developers
Reference Guide
2.3.12 ALTER USER… IDENTIFIED BY
Name
ALTER USER -- change a database user account
Synopsis
ALTER USER role_name IDENTIFIED BY password REPLACE prev_password
Description
A role without the CREATEROLE privilege may use this command to change their own
password. An unprivileged role must include the REPLACE clause and their previous
password if PASSWORD_VERIFY_FUNCTION is not NULL in their profile. When the
REPLACE clause is used by a non-superuser, the server will compare the password
provided to the existing password and raise an error if the passwords do not match.
A database superuser can use this command to change the password associated with any
role. If a superuser includes the REPLACE clause, the clause is ignored; a non-matching
value for the previous password will not throw an error.
If the role for which the password is being changed has the SUPERUSER attribute, then a
superuser must issue this command. A role with the CREATEROLE attribute can use this
command to change the password associated with a role that is not a superuser.
Parameters
role_name
The name of the role whose password is to be altered.
password
The role‟s new password.
prev_password
The role‟s previous password.
Examples
Change a user password:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 56
Database Compatibility for Oracle® Developers
Reference Guide
ALTER USER john IDENTIFIED BY xyRP35z REPLACE 23PJ74a;
See Also
CREATE USER, DROP USER
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 57
Database Compatibility for Oracle® Developers
Reference Guide
2.3.13 ALTER USER|ROLE… PROFILE MANAGEMENT CLAUSES
Name
ALTER USER|ROLE
Synopsis
ALTER USER|ROLE name [[WITH] option[…]
where option can be the following compatible clauses:
PROFILE profile_name
| ACCOUNT {LOCK|UNLOCK}
| PASSWORD EXPIRE [AT 'timestamp']
or option can be the following non-compatible clauses:
| PASSWORD SET AT 'timestamp'
| LOCK TIME 'timestamp'
| STORE PRIOR PASSWORD {'password' 'timestamp} [, ...]
For information about the administrative clauses of the ALTER USER or ALTER ROLE
command that are supported by Advanced Server, please see the PostgreSQL core
documentation available at:
https://www.postgresql.org/docs/11/static/sql-commands.html
Only a database superuser can use the ALTER USER|ROLE clauses that enforce profile
management. The clauses enforce the following behaviors:
Include the PROFILE clause and a profile_name to associate a pre-defined
profile with a role, or to change which pre-defined profile is associated with a
user.
Include the ACCOUNT clause and the LOCK or UNLOCK keyword to specify that the
user account should be placed in a locked or unlocked state.
Include the LOCK TIME 'timestamp' clause and a date/time value to lock the
role at the specified time, and unlock the role at the time indicated by the
PASSWORD_LOCK_TIME parameter of the profile assigned to this role. If LOCK
TIME is used with the ACCOUNT LOCK clause, the role can only be unlocked by a
database superuser with the ACCOUNT UNLOCK clause.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 58
Database Compatibility for Oracle® Developers
Reference Guide
Include the PASSWORD EXPIRE clause with the AT 'timestamp' keywords to
specify a date/time when the password associated with the role will expire. If you
omit the AT 'timestamp' keywords, the password will expire immediately.
Include the PASSWORD SET AT 'timestamp' keywords to set the password
modification date to the time specified.
Include the STORE PRIOR PASSWORD {'password' 'timestamp} [, ...]
clause to modify the password history, adding the new password and the time the
password was set.
Each login role may only have one profile. To discover the profile that is currently
associated with a login role, query the profile column of the DBA_USERS view.
Parameters
name
The name of the role with which the specified profile will be associated.
password
The password associated with the role.
profile_name
The name of the profile that will be associated with the role.
timestamp
The date and time at which the clause will be enforced. When specifying a value
for timestamp, enclose the value in single-quotes.
Notes
For information about the Postgres-compatible clauses of the ALTER USER or ALTER
ROLE command, see the PostgreSQL core documentation available at:
https://www.postgresql.org/docs/11/static/sql-alterrole.html
Examples
The following command uses the ALTER USER… PROFILE command to associate a
profile named acctg with a user named john:
ALTER USER john PROFILE acctg_profile;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 59
Database Compatibility for Oracle® Developers
Reference Guide
The following command uses the ALTER ROLE… PROFILE command to associate a
profile named acctg with a user named john:
ALTER ROLE john PROFILE acctg_profile;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 60
Database Compatibility for Oracle® Developers
Reference Guide
2.3.14 CALL
Name
CALL
Synopsis
CALL procedure_name '('[argument_list]')'
Description
Use the CALL statement to invoke a procedure. To use the CALL statement, you must
have EXECUTE privileges on the procedure that the CALL statement is invoking.
Parameters
procedure_name
procedure_name is the (optionally schema-qualified) procedure name.
argument_list
argument_list specifies a comma-separated list of arguments required by the
procedure. Note that each member of argument_list corresponds to a formal
argument expected by the procedure. Each formal argument may be an IN
parameter, an OUT parameter, or an INOUT parameter.
Examples
The CALL statement may take one of several forms, depending on the arguments required
by the procedure:
CALL update_balance();
CALL update_balance(1,2,3);
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 61
Database Compatibility for Oracle® Developers
Reference Guide
2.3.15 COMMENT
Name
COMMENT -- define or change the comment of an object
Synopsis
COMMENT ON
{
TABLE table_name |
COLUMN table_name.column_name
} IS 'text'
Description
COMMENT stores a comment about a database object. To modify a comment, issue a new
COMMENT command for the same object. Only one comment string is stored for each
object. To remove a comment, specify the empty string (two consecutive single quotes
with no intervening space) for text. Comments are automatically dropped when the
object is dropped.
Parameters
table_name
The name of the table to be commented. The table name may be schema-
qualified.
table_name.column_name
The name of a column within table_name to be commented. The table name
may be schema-qualified.
text
The new comment.
Notes
There is presently no security mechanism for comments: any user connected to a
database can see all the comments for objects in that database (although only superusers
can change comments for objects that they don‟t own). Do not put security-critical
information in a comment.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 62
Database Compatibility for Oracle® Developers
Reference Guide
Examples
Attach a comment to the table emp:
COMMENT ON TABLE emp IS 'Current employee information';
Attach a comment to the empno column of the emp table:
COMMENT ON COLUMN emp.empno IS 'Employee identification number';
Remove these comments:
COMMENT ON TABLE emp IS '';
COMMENT ON COLUMN emp.empno IS '';
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 63
Database Compatibility for Oracle® Developers
Reference Guide
2.3.16 COMMIT
Name
COMMIT -- commit the current transaction
Synopsis
COMMIT [ WORK ]
Description
COMMIT commits the current transaction. All changes made by the transaction become
visible to others and are guaranteed to be durable if a crash occurs.
Parameters
WORK
Optional key word - has no effect.
Notes
Use ROLLBACK to abort a transaction. Issuing COMMIT when not inside a transaction
does no harm.
Please note: Executing a COMMIT in a plpgsql procedure will throw an error if there is an
Oracle-style SPL procedure on the runtime stack.
Examples
To commit the current transaction and make all changes permanent:
COMMIT;
See Also
ROLLBACK, ROLLBACK TO SAVEPOINT
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 64
Database Compatibility for Oracle® Developers
Reference Guide
2.3.17 CREATE DATABASE
Name
CREATE DATABASE -- create a new database
Synopsis
CREATE DATABASE name
Description
CREATE DATABASE creates a new database.
To create a database, you must be a superuser or have the special CREATEDB privilege.
Normally, the creator becomes the owner of the new database. Non-superusers with
CREATEDB privilege can only create databases owned by them.
The new database will be created by cloning the standard system database template1.
Parameters
name
The name of the database to be created.
Notes
CREATE DATABASE cannot be executed inside a transaction block.
Errors along the line of “could not initialize database directory” are most likely related to
insufficient permissions on the data directory, a full disk, or other file system problems.
Examples
To create a new database:
CREATE DATABASE employees;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 65
Database Compatibility for Oracle® Developers
Reference Guide
2.3.18 CREATE [PUBLIC] DATABASE LINK
Name
CREATE [PUBLIC] DATABASE LINK -- create a new database link.
Synopsis
CREATE [ PUBLIC ] DATABASE LINK name
CONNECT TO { CURRENT_USER |
username IDENTIFIED BY 'password'}
USING { postgres_fdw 'fdw_connection_string' |
[ oci ] 'oracle_connection_string' }
Description
CREATE DATABASE LINK creates a new database link. A database link is an object that
allows a reference to a table or view in a remote database within a DELETE, INSERT,
SELECT or UPDATE command. A database link is referenced by appending @dblink to
the table or view name referenced in the SQL command where dblink is the name of
the database link.
Database links can be public or private. A public database link is one that can be used by
any user. A private database link can be used only by the database link‟s owner.
Specification of the PUBLIC option creates a public database link. If omitted, a private
database link is created.
When the CREATE DATABASE LINK command is given, the database link name and the
given connection attributes are stored in the Advanced Server system table named,
pg_catalog.edb_dblink. When using a given database link, the database containing
the edb_dblink entry defining this database link is called the local database. The server
and database whose connection attributes are defined within the edb_dblink entry is
called the remote database
A SQL command containing a reference to a database link must be issued while
connected to the local database. When the SQL command is executed, the appropriate
authentication and connection is made to the remote database to access the table or view
to which the @dblink reference is appended.
Note: A database link cannot be used to access a remote database within a standby
database server. Standby database servers are used for high availability, load balancing,
and replication.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 66
Database Compatibility for Oracle® Developers
Reference Guide
For information about high availability, load balancing, and replication for Postgres
database servers, see the PostgreSQL core documentation available at:
https://www.postgresql.org/docs/11/static/high-availability.html
Note: For Advanced Server 11, the CREATE DATABASE LINK command is tested against
and certified for use with Oracle version 10g Release 2 (10.2), Oracle version 11g
Release 2 (11.2), and Oracle version 12c Release 1 (12.1).
Parameters
PUBLIC
Create a public database link that can be used by any user. If omitted, then the
database link is private and can only be used by the database link‟s owner.
name
The name of the database link.
username
The username to be used for connecting to the remote database.
CURRENT_USER
Include CURRENT_USER to specify that Advanced Server should use the user
mapping associated with the role that is using the link when establishing a
connection to the remote server.
password
The password for username.
postgres_fdw
Specifies foreign data wrapper postgres_fdw as the connection to a remote
Advanced Server database. If postgres_fdw has not been installed on the
database, use the CREATE EXTENSION command to install postgres_fdw. For
more information, please see the CREATE EXTENSION command in the
PostgreSQL Core documentation at:
https://www.postgresql.org/docs/11/static/sql-createextension.html
fdw_connection_string
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 67
Database Compatibility for Oracle® Developers
Reference Guide
Specify the connection information for the postgres_fdw foreign data wrapper.
oci
Specifies a connection to a remote Oracle database. This is Advanced Server‟s
default behavior.
oracle_connection_string
Specify the connection information for an oci connection.
Notes
To create a non-public database link you must have the CREATE DATABASE LINK
privilege. To create a public database link you must have the CREATE PUBLIC
DATABASE LINK privilege.
Setting up an Oracle Instant Client for oci-dblink
In order to use oci-dblink, an Oracle instant client must be downloaded and installed on
the host running the Advanced Server database in which the database link is to be
created.
An instant client can be downloaded from the following site:
http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html
Oracle Instant Client for Linux
The following instructions apply to Linux hosts running Advanced Server.
Be sure the libaio library (the Linux-native asynchronous I/O facility) has already been
installed on the Linux host running Advanced Server.
The libaio library can be installed with the following command:
yum install libaio
If the Oracle instant client that you've downloaded does not include the file specifically
named libclntsh.so without a version number suffix, you must create a symbolic link
named libclntsh.so that points to the downloaded version of the library file. Navigate
to the instant client directory and execute the following command:
ln -s libclntsh.so.version libclntsh.so
Where version is the version number of the libclntsh.so library. For example:
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 68
Database Compatibility for Oracle® Developers
Reference Guide
ln -s libclntsh.so.12.1 libclntsh.so
When you are executing a SQL command that references a database link to a remote
Oracle database, Advanced Server must know where the Oracle instant client library
resides on the Advanced Server host.
The LD_LIBRARY_PATH environment variable must include the path to the Oracle client
installation directory containing the libclntsh.so file. For example, assuming the
installation directory containing libclntsh.so is /tmp/instantclient:
export LD_LIBRARY_PATH=/tmp/instantclient:$LD_LIBRARY_PATH
Note: This LD_LIBRARY_PATH environment variable setting must be in effect when the
pg_ctl utility is executed to start or restart Advanced Server.
If you are running the current session as the user account (for example, enterprisedb)
that will directly invoke pg_ctl to start or restart Advanced Server, then be sure to set
LD_LIBRARY_PATH before invoking pg_ctl.
You can set LD_LIBRARY_PATH within the .bash_profile file under the home
directory of the enterprisedb user account (that is, set LD_LIBRARY_PATH within file