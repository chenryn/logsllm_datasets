### 2.3.10 ALTER TABLE

#### Name
ALTER TABLE — Modify the structure of a table

#### Synopsis
```sql
ALTER TABLE table_name ADD COLUMN column_name data_type [DEFAULT default_value];
ALTER TABLE table_name DROP COLUMN column_name;
ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;
ALTER TABLE table_name RENAME TO new_table_name;
ALTER TABLE table_name ADD CONSTRAINT constraint_name CHECK (condition);
ALTER TABLE table_name DROP CONSTRAINT constraint_name;
```

#### Description
The `ALTER TABLE` command is used to modify the structure of an existing table. This includes adding, dropping, or renaming columns, as well as adding or removing constraints.

- **Adding a Column:**
  - When you add a new column to a table, all existing rows in the table are initialized with the column's default value (or `NULL` if no `DEFAULT` clause is specified).
  - If a non-`NULL` default value is specified, the entire table must be rewritten, which can be time-consuming for large tables and temporarily requires double the disk space.
  - Adding a `CHECK` or `NOT NULL` constraint requires scanning the table to ensure that existing rows meet the constraint.

- **Dropping a Column:**
  - The `DROP COLUMN` form does not physically remove the column but makes it invisible to SQL operations.
  - Subsequent `INSERT` and `UPDATE` operations will store a `NULL` value for the dropped column.
  - Dropping a column is quick but does not immediately reduce the on-disk size of the table; the space occupied by the dropped column is reclaimed over time as existing rows are updated.

- **Renaming a Column or Table:**
  - The `RENAME COLUMN` and `RENAME TO` clauses allow you to change the name of a column or the table itself.

- **Adding or Removing Constraints:**
  - You can add or remove `CHECK` constraints to enforce specific conditions on the data in the table.

#### Examples
- To add a column of type `VARCHAR2` to a table:
  ```sql
  ALTER TABLE emp ADD address VARCHAR2(30);
  ```

- To drop a column from a table:
  ```sql
  ALTER TABLE emp DROP COLUMN address;
  ```

- To rename an existing column:
  ```sql
  ALTER TABLE emp RENAME COLUMN address TO city;
  ```

- To rename an existing table:
  ```sql
  ALTER TABLE emp RENAME TO employee;
  ```

- To add a check constraint to a table:
  ```sql
  ALTER TABLE emp ADD CONSTRAINT sal_chk CHECK (sal > 500);
  ```

- To remove a check constraint from a table:
  ```sql
  ALTER TABLE emp DROP CONSTRAINT sal_chk;
  ```

#### See Also
- [CREATE TABLE](#)
- [DROP TABLE](#)

---

### 2.3.11 ALTER TABLESPACE

#### Name
ALTER TABLESPACE — Change the definition of a tablespace

#### Synopsis
```sql
ALTER TABLESPACE name RENAME TO newname;
```

#### Description
The `ALTER TABLESPACE` command is used to change the definition of a tablespace, specifically to rename it.

#### Parameters
- **name:** The name of the existing tablespace.
- **newname:** The new name of the tablespace. The new name cannot begin with `pg_`, as such names are reserved for system tablespaces.

#### Examples
- Rename tablespace `empspace` to `employee_space`:
  ```sql
  ALTER TABLESPACE empspace RENAME TO employee_space;
  ```

#### See Also
- [DROP TABLESPACE](#)

---

### 2.3.12 ALTER USER… IDENTIFIED BY

#### Name
ALTER USER — Change a database user account

#### Synopsis
```sql
ALTER USER role_name IDENTIFIED BY password REPLACE prev_password;
```

#### Description
The `ALTER USER` command is used to change the password associated with a database user account. 

- **For Unprivileged Roles:**
  - A role without the `CREATEROLE` privilege can use this command to change their own password.
  - The `REPLACE` clause and the previous password must be included if `PASSWORD_VERIFY_FUNCTION` is not `NULL` in their profile.
  - The server will compare the provided password with the existing password and raise an error if they do not match.

- **For Superusers:**
  - A database superuser can change the password associated with any role.
  - If a superuser includes the `REPLACE` clause, it is ignored, and a non-matching previous password will not throw an error.
  - If the role being modified has the `SUPERUSER` attribute, only a superuser can issue this command.
  - A role with the `CREATEROLE` attribute can change the password of a role that is not a superuser.

#### Parameters
- **role_name:** The name of the role whose password is to be altered.
- **password:** The role's new password.
- **prev_password:** The role's previous password.

#### Examples
- Change a user password:
  ```sql
  ALTER USER john IDENTIFIED BY xyRP35z REPLACE 23PJ74a;
  ```

#### See Also
- [CREATE USER](#)
- [DROP USER](#)

---

### 2.3.13 ALTER USER|ROLE… PROFILE MANAGEMENT CLAUSES

#### Name
ALTER USER|ROLE — Manage user or role profiles

#### Synopsis
```sql
ALTER USER|ROLE name [[WITH] option[…]
```
where `option` can be one of the following compatible clauses:
- `PROFILE profile_name`
- `ACCOUNT {LOCK|UNLOCK}`
- `PASSWORD EXPIRE [AT 'timestamp']`

or one of the following non-compatible clauses:
- `PASSWORD SET AT 'timestamp'`
- `LOCK TIME 'timestamp'`
- `STORE PRIOR PASSWORD {'password' 'timestamp} [, ...]`

#### Description
The `ALTER USER|ROLE` command is used to manage various aspects of a user or role, including associating a profile, locking or unlocking the account, and managing password expiration.

- **PROFILE Clause:**
  - Associates a predefined profile with a role or changes the associated profile.
  
- **ACCOUNT Clause:**
  - Locks or unlocks the user account.
  
- **PASSWORD EXPIRE Clause:**
  - Specifies when the password will expire. If `AT 'timestamp'` is omitted, the password expires immediately.
  
- **PASSWORD SET AT 'timestamp' Clause:**
  - Sets the password modification date to the specified timestamp.
  
- **LOCK TIME 'timestamp' Clause:**
  - Locks the role at the specified time and unlocks it based on the `PASSWORD_LOCK_TIME` parameter of the assigned profile.
  
- **STORE PRIOR PASSWORD Clause:**
  - Modifies the password history, adding the new password and the time it was set.

#### Parameters
- **name:** The name of the role with which the specified profile will be associated.
- **password:** The password associated with the role.
- **profile_name:** The name of the profile that will be associated with the role.
- **timestamp:** The date and time at which the clause will be enforced. Enclose the value in single quotes.

#### Notes
- For information about the Postgres-compatible clauses of the `ALTER USER` or `ALTER ROLE` command, see the PostgreSQL core documentation available at: [PostgreSQL Core Documentation](https://www.postgresql.org/docs/11/static/sql-alterrole.html)

#### Examples
- Associate a profile named `acctg_profile` with a user named `john`:
  ```sql
  ALTER USER john PROFILE acctg_profile;
  ```
- Associate a profile named `acctg_profile` with a role named `john`:
  ```sql
  ALTER ROLE john PROFILE acctg_profile;
  ```

#### See Also
- [CREATE USER](#)
- [DROP USER](#)

---

### 2.3.14 CALL

#### Name
CALL — Invoke a procedure

#### Synopsis
```sql
CALL procedure_name ([argument_list]);
```

#### Description
The `CALL` statement is used to invoke a stored procedure. To use the `CALL` statement, you must have `EXECUTE` privileges on the procedure.

#### Parameters
- **procedure_name:** The (optionally schema-qualified) name of the procedure.
- **argument_list:** A comma-separated list of arguments required by the procedure. Each argument corresponds to a formal parameter expected by the procedure, which may be an `IN`, `OUT`, or `INOUT` parameter.

#### Examples
- Call a procedure with no arguments:
  ```sql
  CALL update_balance();
  ```
- Call a procedure with multiple arguments:
  ```sql
  CALL update_balance(1, 2, 3);
  ```

---

### 2.3.15 COMMENT

#### Name
COMMENT — Define or change the comment of an object

#### Synopsis
```sql
COMMENT ON
{
  TABLE table_name |
  COLUMN table_name.column_name
} IS 'text';
```

#### Description
The `COMMENT` command is used to store a comment about a database object. To modify a comment, issue a new `COMMENT` command for the same object. Only one comment string is stored for each object. To remove a comment, specify the empty string (two consecutive single quotes with no intervening space) for `text`. Comments are automatically dropped when the object is dropped.

#### Parameters
- **table_name:** The name of the table to be commented. The table name may be schema-qualified.
- **table_name.column_name:** The name of a column within the table to be commented. The table name may be schema-qualified.
- **text:** The new comment.

#### Notes
- There is presently no security mechanism for comments: any user connected to a database can see all the comments for objects in that database (although only superusers can change comments for objects that they don’t own). Do not put security-critical information in a comment.

#### Examples
- Attach a comment to the table `emp`:
  ```sql
  COMMENT ON TABLE emp IS 'Current employee information';
  ```
- Attach a comment to the `empno` column of the `emp` table:
  ```sql
  COMMENT ON COLUMN emp.empno IS 'Employee identification number';
  ```
- Remove these comments:
  ```sql
  COMMENT ON TABLE emp IS '';
  COMMENT ON COLUMN emp.empno IS '';
  ```

---

### 2.3.16 COMMIT

#### Name
COMMIT — Commit the current transaction

#### Synopsis
```sql
COMMIT [ WORK ];
```

#### Description
The `COMMIT` command commits the current transaction. All changes made by the transaction become visible to others and are guaranteed to be durable if a crash occurs.

#### Parameters
- **WORK:** Optional keyword. Has no effect.

#### Notes
- Use `ROLLBACK` to abort a transaction.
- Issuing `COMMIT` when not inside a transaction does no harm.
- Executing a `COMMIT` in a PL/pgSQL procedure will throw an error if there is an Oracle-style SPL procedure on the runtime stack.

#### Examples
- To commit the current transaction and make all changes permanent:
  ```sql
  COMMIT;
  ```

#### See Also
- [ROLLBACK](#)
- [ROLLBACK TO SAVEPOINT](#)

---

### 2.3.17 CREATE DATABASE

#### Name
CREATE DATABASE — Create a new database

#### Synopsis
```sql
CREATE DATABASE name;
```

#### Description
The `CREATE DATABASE` command creates a new database.

- To create a database, you must be a superuser or have the `CREATEDB` privilege.
- Normally, the creator becomes the owner of the new database. Non-superusers with `CREATEDB` privilege can only create databases owned by them.
- The new database will be created by cloning the standard system database `template1`.

#### Parameters
- **name:** The name of the database to be created.

#### Notes
- `CREATE DATABASE` cannot be executed inside a transaction block.
- Errors related to "could not initialize database directory" are likely due to insufficient permissions on the data directory, a full disk, or other file system problems.

#### Examples
- To create a new database:
  ```sql
  CREATE DATABASE employees;
  ```

---

### 2.3.18 CREATE [PUBLIC] DATABASE LINK

#### Name
CREATE [PUBLIC] DATABASE LINK — Create a new database link

#### Synopsis
```sql
CREATE [ PUBLIC ] DATABASE LINK name
CONNECT TO { CURRENT_USER | username IDENTIFIED BY 'password' }
USING { postgres_fdw 'fdw_connection_string' | [ oci ] 'oracle_connection_string' };
```

#### Description
The `CREATE DATABASE LINK` command creates a new database link, which allows a reference to a table or view in a remote database within a `DELETE`, `INSERT`, `SELECT`, or `UPDATE` command. A database link is referenced by appending `@dblink` to the table or view name, where `dblink` is the name of the database link.

- **Public vs. Private Database Links:**
  - A public database link can be used by any user.
  - A private database link can be used only by the database link’s owner.
  - Specifying the `PUBLIC` option creates a public database link. If omitted, a private database link is created.

- **Database Link Usage:**
  - When the `CREATE DATABASE LINK` command is issued, the database link name and the given connection attributes are stored in the `pg_catalog.edb_dblink` system table.
  - The local database is the one containing the `edb_dblink` entry defining the database link.
  - The remote database is the server and database whose connection attributes are defined within the `edb_dblink` entry.
  - A SQL command containing a reference to a database link must be issued while connected to the local database. When the SQL command is executed, the appropriate authentication and connection is made to the remote database to access the table or view.

- **Note:**
  - A database link cannot be used to access a remote database within a standby database server.
  - For Advanced Server 11, the `CREATE DATABASE LINK` command is tested against and certified for use with Oracle versions 10g Release 2 (10.2), 11g Release 2 (11.2), and 12c Release 1 (12.1).

#### Parameters
- **PUBLIC:** Create a public database link that can be used by any user. If omitted, the database link is private and can only be used by the database link’s owner.
- **name:** The name of the database link.
- **username:** The username to be used for connecting to the remote database.
- **CURRENT_USER:** Specify that Advanced Server should use the user mapping associated with the role using the link when establishing a connection to the remote server.
- **password:** The password for the `username`.
- **postgres_fdw:** Specifies the foreign data wrapper `postgres_fdw` as the connection to a remote Advanced Server database. If `postgres_fdw` has not been installed, use the `CREATE EXTENSION` command to install it.
- **fdw_connection_string:** The connection information for the `postgres_fdw` foreign data wrapper.
- **oci:** Specifies a connection to a remote Oracle database. This is the default behavior for Advanced Server.
- **oracle_connection_string:** The connection information for an `oci` connection.

#### Notes
- To create a non-public database link, you must have the `CREATE DATABASE LINK` privilege.
- To create a public database link, you must have the `CREATE PUBLIC DATABASE LINK` privilege.

#### Setting up an Oracle Instant Client for `oci-dblink`
- To use `oci-dblink`, an Oracle instant client must be downloaded and installed on the host running the Advanced Server database.
- Download the Oracle instant client from: [Oracle Instant Client](http://www.oracle.com/technetwork/database/features/instant-client/index-097480.html)

##### Oracle Instant Client for Linux
- Ensure the `libaio` library is installed:
  ```sh
  yum install libaio
  ```
- If the downloaded Oracle instant client does not include a file named `libclntsh.so` without a version number suffix, create a symbolic link:
  ```sh
  ln -s libclntsh.so.version libclntsh.so
  ```
- Set the `LD_LIBRARY_PATH` environment variable to include the path to the Oracle client installation directory:
  ```sh
  export LD_LIBRARY_PATH=/tmp/instantclient:$LD_LIBRARY_PATH
  ```
- This setting must be in effect when the `pg_ctl` utility is executed to start or restart Advanced Server.

#### Examples
- Create a public database link:
  ```sql
  CREATE PUBLIC DATABASE LINK my_link
  CONNECT TO CURRENT_USER
  USING postgres_fdw 'host=remote_host dbname=remote_db user=remote_user password=remote_pass';
  ```

- Create a private database link:
  ```sql
  CREATE DATABASE LINK my_link
  CONNECT TO username IDENTIFIED BY 'password'
  USING 'oracle_connection_string';
  ```

#### See Also
- [CREATE EXTENSION](#)
- [CREATE USER MAPPING](#)

---

**Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.**

**Database Compatibility for Oracle® Developers Reference Guide**