### Enabling SPI and Installing Necessary Libraries on Raspberry Pi

#### Prerequisites
Before proceeding, ensure your system is up-to-date:
```sh
sudo apt-get update && sudo apt-get upgrade
```

Install the required Python development tools and WiringPi library:
```sh
sudo apt-get install python-dev python-pip
sudo pip install wiringpi
```

#### Note: GPIO Libraries
Both RPi.GPIO and WiringPi libraries provide programmatic access to the Raspberry Pi GPIO header. Alex Eames wrote versions of his Python Gertboard test suite to accommodate both libraries because neither offers a fully complete set of capabilities. For a detailed comparison, see the Raspberry Pi forums:
- [RPi.GPIO vs. WiringPi Discussion 1](http://is.gd/SGAFNp)
- [RPi.GPIO vs. WiringPi Discussion 2](http://is.gd/wJ1qfb)

### Task: Enabling SPI on Your Raspberry Pi

Some scripts, such as `atod.py`, `dtoa.py`, and `dad.py`, require that you enable the Serial Peripheral Interface (SPI) on your Raspberry Pi. Follow these steps:

1. Open the `raspi-blacklist.conf` file:
   ```sh
   sudo nano /etc/modprobe.d/raspi-blacklist.conf
   ```

2. Comment out the following line in the configuration file by adding a `#` at the beginning:
   ```sh
   #blacklist spi-bcm2708
   ```
   This prevents SPI from being disabled.

3. Save the file, close it, and reboot the Raspberry Pi:
   ```sh
   sudo reboot
   ```

4. After the reboot, install Git and the Python SPI wrapper:
   ```sh
   sudo apt-get install git
   git clone git://github.com/doceme/py-spidev
   cd py-spidev
   sudo python setup.py install
   ```

Although this procedure may be tedious, the ability to access the Gertboard's D-to-A and A-to-D converters will make it worthwhile.

### Task: Installing the Python Gertboard Test Suite

Perform the following steps from a shell prompt on your Raspberry Pi:

1. Download and extract the Gertboard Python test suite:
   ```sh
   cd
   wget http://raspi.tv/download/GB_Python.zip
   unzip GB_Python.zip
   cd GB_Python
   ```

2. List the Python scripts and view the README file:
   ```sh
   ls -l *.py
   nano README.txt
   ```

3. Run any script using the Python 2 interpreter with `sudo` privileges. For example, try the LED testing script:
   ```sh
   sudo python leds-rg.py
   ```

Note that the script won't do anything yet because you need to wire up the Gertboard appropriately. We will cover that next.

Alex Eames wrote two versions of each script file. The `-rg` suffix denotes the RPi.GPIO library, while the `-wp` suffix represents the WiringPi library. Here is a brief rundown of each script’s purpose, with generic placeholders for clarity:
- `atod.py`: Tests the analog-to-digital converter
- `butled-xx.py`: Tests the button switches and LEDs
- `buttons-xx.py`: Tests the button switches
- `dad.py`: Tests both analog-to-digital and digital-to-analog
- `dtoa.py`: Tests the digital-to-analog converter
- `leds-xx.py`: Tests the LED switches
- `motor-xx.py`: Tests the motor
- `ocol-xx.py`: Tests the relay switches
- `potmot.py`: Tests the analog-to-digital switch and the motor

### Testing the LEDs

To test the LEDs, use either `leds-rg.py` or `leds-wp.py`. Both RPi.GPIO and WiringPi can handle this exercise. The `leds-rg.py` script is well-documented and includes instructions for wiring the Gertboard. Here are the connections:

```sh
pi@raspberrypi ~/GB_Python $ sudo python leds-rg.py
These are the connections for the Gertboard LEDs test:
jumpers in every out location (U3-out-B1, U3-out-B2, etc)
GP25 in J2 --- B1 in J3
GP24 in J2 --- B2 in J3
GP23 in J2 --- B3 in J3
GP22 in J2 --- B4 in J3
GP21 in J2 --- B5 in J3
GP18 in J2 --- B6 in J3
GP17 in J2 --- B7 in J3
GP11 in J2 --- B8 in J3
GP10 in J2 --- B9 in J3
GP9 in J2 --- B10 in J3
GP8 in J2 --- B11 in J3
GP7 in J2 --- B12 in J3
(If you don’t have enough straps and jumpers, you can install just a few of them, then run again later with the next batch.)
When ready, hit Enter.
```

For detailed wiring diagrams, refer to the Gertboard user manual at [this link](http://is.gd/dOWlUd).

### Testing Input/Output

The `butled-rg.py` script tests the Gertboard’s ability to send the output of a button press to an LED. Use the RPi.GPIO library for this test.

Wiring for this test is more straightforward and requires fewer straps. Refer to the schematic in Figure 20.8.

Run the test with:
```sh
sudo python butled-rg.py
```

You will see output on your screen as you press the S3 button, and the BUF6 LED will respond to each button press. The screen output cycles between binary 11 (button not pressed, 3.3V voltage, HIGH state) and binary 00 (button pressed, 0V current, LOW state).

### Breadboarding Exercises

In Chapter 3, you learned about breadboards. Here are two simple breadboarding experiments to light an LED using the Raspberry Pi GPIO pins and the Adafruit Pi Cobbler.

#### Accessing the GPIO Pins Directly

**Parts Needed:**
- 1 standard breadboard
- 1 LED
- 1 resistor (270–330 ohms)
- 2 male-to-female jumper straps

**Procedure:**

1. Turn off your Raspberry Pi.
2. Carefully press the resistor and male-to-female jumper straps in place. See the wiring diagram in Figure 20.9.
3. The LED has a longer leg (positive terminal) and a shorter leg (negative terminal). Place the longer leg in the same row as the 3.3V jumper and the shorter leg in the same row as the resistor.
4. Power on the Raspberry Pi. If everything is connected correctly, the LED should light up immediately.

To gain control over the LED, relocate the female jumper pin from GPIO #1 to GPIO #11 and use the WiringPi libraries:

Download and compile the WiringPi executable code:
```sh
cd
git clone git://git.drogon.net/wiringPi
cd wiringPi
git pull origin
./build
```

Issue GPIO commands to control the LED:
```sh
gpio mode 0 out
gpio write 0 1
gpio write 0 0
```

#### Accessing the GPIO Pins via the Pi Cobbler

The Adafruit Pi Cobbler (available unassembled or assembled) provides a more elegant way to access the GPIO pins. Follow these steps to set it up:

1. Connect the ribbon cable to the Cobbler board. Ensure the colored edge wire (pin #1) is inserted into the GPIO on the side closest to the SD card slot and where P1 is marked.
2. Insert the Cobbler into the breadboard, straddling the center line. Press it all the way in.
3. Repeat the initial LED experiment by inserting male-to-male jumper straps in the same breadboard row as the corresponding GPIO header.

Refer to Figure 20.10 and Figure 20.11 for detailed wiring diagrams.

### Programming the Atmel Microcontroller

The Gertboard includes an Atmel AVR ATmega328p or ATmega168 microcontroller. To perform Arduino experiments, follow these steps:

1. Install the Arduino IDE:
   ```sh
   sudo apt-get install -y arduino
   ```

2. Use AVRDUDE to upload sketches to the AVR microcontroller:
   ```sh
   cd /tmp
   wget http://project-downloads.drogon.net/gertboard/avrdude_5.10-4_armhf.deb
   sudo dpkg -i avrdude_5.10-4_armhf.deb
   sudo chmod 4755 /usr/bin/avrdude
   ```

3. Automate the setup process using Gordon Henderson's script:
   ```sh
   cd /tmp
   wget http://project-downloads.drogon.net/gertboard/setup.sh
   chmod +x setup.sh
   sudo ./setup.sh
   ```

4. Reboot your Raspberry Pi after the script completes.

5. Initialize the ATmega chip. Ensure the Gertboard is installed and connect the jumper wires as shown in Figure 20.12. Issue the initialization command:
   ```sh
   avrsetup
   ```

6. Select the appropriate ATmega chip (type 1 for ATmega328p or 2 for ATmega168).

7. Configure the Arduino IDE:
   - Start the IDE: `arduino`
   - Go to `Tools > Board` and select `Gertboard with ATmega328(GPIO)`.
   - Go to `Tools > Programmer` and select `Raspberry Pi GPIO`.

By following these steps, you can effectively use the Gertboard and its components with your Raspberry Pi.