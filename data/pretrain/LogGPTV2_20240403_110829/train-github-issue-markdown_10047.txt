I am trying to model a employee hierarchy where every employee can be a
manager of a team of employees and, at the same time, she can be part of a
team managed by other employee:
curl -XPOST 'http://localhost:9200/manager_employee' -d '{  
"mappings": {  
"employee": {  
"_parent": {  
"type": "employee"  
},  
"properties": {  
"name": {  
"type": "string"  
}  
}  
}  
}  
}'
The problem is when modeling a employee which is not managed by anyone (let's
think about the CEO). I tried both alternatives bellow:
curl -s -XPOST localhost:9200/_bulk --data-binary '  
{ "index" : { "_index" : "manager_employee", "_type" : "employee", "_id" :
"employee1" , _parent:"employee1"} }  
{ "name" : "chris"}  
{ "index" : { "_index" : "manager_employee", "_type" : "employee", "_id" :
"employee2" , _parent:"employee1"} }  
{ "name" : "joseph" }  
{ "index" : { "_index" : "manager_employee", "_type" : "employee", "_id" :
"employee3" , _parent:"employee1"} }  
{ "name" : "john" }'
i.e., the CEO is managed by herself and
curl -s -XPOST localhost:9200/_bulk --data-binary '  
{ "index" : { "_index" : "manager_employee", "_type" : "employee", "_id" :
"employee1" , _parent:"dummyID1"} }  
{ "name" : "chris"}  
{ "index" : { "_index" : "manager_employee", "_type" : "employee", "_id" :
"employee2" , _parent:"employee1", _routing:"dummyID1"} }  
{ "name" : "joseph" }  
{ "index" : { "_index" : "manager_employee", "_type" : "employee", "_id" :
"employee3" , _parent:"employee1", _routing:"dummyID1"} }  
{ "name" : "john" }'
the CEO is managed by some dummy manager
In both cases:
curl -XGET 'localhost:9200/manager_employee/employee/_search' -d '{  
"filter" : {  
"has_child" : {  
"child_type" : "employee",  
"query" : {  
"term" : {  
"employee.name" : "john"  
}  
}  
}}}'
works returning chris, but the other side of the relations fails:
curl -XGET 'localhost:9200/manager_employee/employee/_search' -d '{  
"filter" : {  
"has_parent" : {  
"parent_type" : "employee",  
"query" : {  
"term" : {  
"employee.name" : "chris"  
}  
}  
}}}'
returns an empty hit set.
Is there any other way (without defining different) types of implementing
this? Any workaround? Is it a bug that the relation is correctly mapped from
children to parent but not from parent to children when using the same type in
both sides of the relation?
Thank you in advance,