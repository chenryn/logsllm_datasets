排序
第2章
被选为基准值的概率都相等，那么需要的平均运行时间为 O(nlogn)。
并把它移到了最左边，这个操作也就和选择排序一样了。
准值的右边，递归执行n行，运行时间也就成了 O(n²)。
可知，整体的时间复杂度为 O(nlogn)。
如果运气不好，每次都选择最小值作为基准值，那么每次都需要把其他数据移到基
每行中每个数字都需要和基准值比较大小，因此每行所需的运行时间为 O(n)。由此
。此外，如果数据中的每个数字
。这就相当于每次都选出最小值
---
## Page 84
图灵社区会员夏科（PI:EMAIL）专享尊重版权
数组的查找
第
M
---
## Page 85
072
数组的查找
第3章
No.
参考：1-3数组
理解，这里我们假设存储的是整数。
简单，只要在数组中从头开始依次往下查找即可。虽然存储的数据类型没有限制，但为了便于
中讲解的二分查找不同，即便数据没有按顺序存储，也可以应用线性查找。线性查找的操作很
查下一个数字。
首先，检查数组中最左边的数字，将其与6进行比较。如果结果一致，查找便结束，不一致则向右检
来试试查找数字6吧。
 线性查找是一种在数组中查找数据的算法（关于数组的详细讲解在1-3节）。与将在3-2节
3
3
线性查找
8
8
2
2
S
---
## Page 86
找到6了，查找结束。
此处不一致，
的时间复杂度便为 O(n)。
或者目标数据不存在时，比较的次数就会更多，也更为耗时。若数据量为n，线性查找
解说
线性查找需要从头开始不断地按顺序检查数据，因此在数据量大且目标数据靠后
所以向右检查下一个数字。
8
图灵社区会员夏科（PI:EMAIL）专享尊重版权
8
重复上面的操作直到找到数字6为止。
073
线性查找
8
---
## Page 87
074
数组的查找
第3章
No
以找到目标数据，或得出目标数据不存在的结论。
是在数组的左边还是右边。因此，比较一次就可以把查找范围缩小一半。重复执行该操作就可
已经排好序的数据。
将5和要查找的数字6进行比较。
还是来试试查找数字6吧。
二分查找也是一种在数组中查找数据的算法。和3-1节讲到的线性查找不同，它只能查找
二分查找通过比较数组中间的数据与目标数据的大小，可以得知目标数据
5
二分查找
8
的右边。
根据5<6，可以得知6在5
首先找到数组中间的数字，此处为5。
2
8
---
## Page 88
在剩下的数组中找到中间的数字，此处为6。
比较7和6。
把不需要的数字移出查找范围。
8
二
9
2
2
3
4
知6在7的左边。
根据6<7，可以得
9
8
6=6，成功找到目标数字。
把不需要的数字移出查找范围。
在剩下的数组中找到中间的数字，此处为7。
6
2
3
075
二分查找
３１２
---
## Page 89
076
数组的查找
第3章
置，直接把它加在末尾即可，不需要耗费时间。
须加到合适的位置，这就需要额外耗费维护数组的时间。
高（x=log2n，则n=2x）。
补充说明
的时间复杂度为 0(logn)。
操作 log2n 次后，就能找到目标数据（若没找到则可以得出数据不存在的结论)，因此它
在二分查找中重复执行“将目标数据和数组中间的数据进行比较后将查找范围减半”的
剩一个数据时查找结束。
但是，二分查找必须建立在数据已经排好序的基础上才能使用，因此添加数据时必
数据量为 n 的数组，将其长度减半 log2n 次后，其中便只剩一个数据了。也就是说，
二分查找的时间复杂度为 O(logn)，与线性查找的 O(n)相比速度上得到了指数倍提
解说
综上，具体使用哪种查找方法，可以根据查找和添加两个操作哪个更为频繁来决定。
而使用线性查找时，数组中的数据可以是无序的，因此添加数据时也无须顾虑位
二分查找利用已排好序的数组，每一次查找都可以将查找范围减半。查找范围内只
---
## Page 90
图灵社区会员
第
图的搜索
夏科（1306027
4
PI:EMAIL）专享尊重版权
章
---
## Page 91
078
图的搜索
第4章
No
用边连接，就能用图来表现地铁的路线了。
加人员之间的人际关系了。
点，把互相认识的人用边连接，
方便。假设我们要开一个派对，将参加人员作为顶
图可以表现各种关系
和连接每对顶点的边所构成的图形就是图。
计算机科学或离散数学中说的“图”却是下面这样的。
■离散数学中的图
4-1
再举个例子，若将车站作为顶点，将相邻两站
图可以表现社会中的各种关系，使用起来非常
说到“图”，可能大部分人想到的是饼状图、柱状图，或者数学中y=f(x)所呈现的图，而
上图中的圆圈叫作“顶点”（也叫“结点”），连接顶点的线叫作“边”。也就是说，由顶点
顶点
什么是图
B
，就能用图来表现参
m
F
边
---
## Page 92
间的“连接程度”
顶点的连接状态，而有权的边就可以表示顶点之
的图被称为“加权图”。没有权的边只能表示两个
们还可以给边加上一个值。
■加权图
样就能用图来表现网络的连接关系了。
这个值叫作边的“权重”或者“权”，加了权
上面讲到的都是由顶点和边构成的图，而我
另外，
，还可以在计算机网络中把路由器作为顶点，将相互连接的两个路由器用边连接，
7
这
079
什么是图
---
## Page 93
080■
图的搜索
第4章
以设置非对称的权重。
移动时间的图，而从 B到C是下坡路，就有可能出现这样的情况。就像这样，使用有向图还可
指向两个方向，因此可以双向移动。
能直接从 B 到 A，而 B 和C 之间有两条边分别
的，用有向图来表示就会很方便。
作“有向图”。比如网页里的链接也是有方向性
行驶时，就可以给边加上箭头，而这样的图就叫
■有向图
也可以有权重，但本书中并不涉及这类情况，故此处忽略。
的移动时间；如果把两个车站间的票价加在边上，就能表现乘车费了。虽然在一些情况下顶点
信时间了。
机网络中，
而在路线图中，如果把地铁在两个车站间行驶的时间加在边上，这张图就能表现整个路线
在上图中，
和无向图一样，有向图的边也可以加上权重。
右图中我们可以从顶点A到顶点B，但不
与此相对，边上没有箭头的图便是“无向图”
当我们想在路线图中表示该路线只能单向
这个“程度”是什么意思呢？根据图的内容不同，“程度”表示的意思也不同。比如在计算
，给两台路由器之间的边加上传输数据所需要的时间，这张图就能表示网络之间的通
从顶点B 到顶点C 的权重为 5，而从C 到B 的权重为 7。如果做的是一个表示
3
B
+
2
9
m
D
2
B
D
---
## Page 94
①现实中的情况会稍有不同，因为换乘地铁也需要一定的时间，而且乘车费也不是按各站之间票价的总和来计
总和最小的路径。
程。根据搜索的顺序不同，图的搜索算法可分为“广度优先搜索”和“深度优先搜索”这两种。
■本章的知识点
不一样的问题。
路线图中耗时最短的路径，寻找路线图中最省乘车费的路径等?。
可以找到“从s到t的权重之和最小”的那条路径。
■图能给我们带来哪些便利
最短路径问题和前文提到的一样，就是要在从s 到t的路径中，找到一条所经过的边的权重
那么，这种算法就可以应用到这些问题上：寻找计算机网络中通信时间最短的路径，寻找
算的。
就像这样，只要能用图来表示这些关系，我们就可以用解决图问题的算法来解决这些看似
想一想图能给我们带来的好处吧。假设图中有两个顶点s和t，而我们设计出了一种算法，
图的搜索指的就是从图的某一顶点开始，通过边到达不同的顶点，最终找到目标顶点的过
本章将要学习的是图的搜索算法，和可以解决图的基本问题一
图灵社区会员夏科(PI:EMAIL）专享尊重版权
一最短路径问题的算法。
081
什么是图
---
## Page 95
082
图的搜索
第4章
ON
近的顶点开始搜索。
点）。在此过程中每走到一个顶点，就会判断一次它是否为终点。广度优先搜索会优先从离起点
时并不知道图的整体结构，而我们的目的是从起点开始顺着边搜索，直到到达指定顶点（即终
4-2
A为起点，G为终点。
广度优先搜索是一种对图进行搜索的算法。假设我们一开始位于某个顶点（即起点），此
一开始我们在起点A上，此时并不知道G在哪里。
广度优先搜索
用绿色表示候补顶点。
用红色表示此时所在的顶点。
顶点。
设为下一步的候补
三个顶点B、C、D
将可以从A直达的
---
## Page 96
补，那么可以随意选择其中一个。
为候补的那个顶点，如果多个顶点同时成为候
从候补顶点中选出一
提示
参考：1-5队列
数据结构。
一个顶点。优先选择最早成
图灵社区会员夏科（PI:EMAIL）专享尊重版权
改用橙色表示。
A已经搜索完毕
择了最左边的顶点B。
此处B、C、D同时成为候补，所以我们随机选
中的点。
表示选
用橙色
为橙色。
将已经搜索过的顶点变
所以B变为红色，同时
上。此时我们在B上，
移动到选中的顶点！
B
083
广度优先搜索
412
---
## Page 97
084
图的搜索
第4章
都被遍历为止。
重复上述操作直到到达终点，或者所有的顶点
移动到选中的顶点C上。
顶点。
将可以从B直达的两个顶点E和F设为候补
8
On
B
这个示例中的搜索顺序为A、B、C、D、E、
将可以从C直达的顶点H设为候补顶点。
择了左边的顶点C。
此时，
6
，最早成为候补顶点的是C和D，我们选
工
LE
---
## Page 98
完成了从A到I的搜索，现在在顶点”处。
闭环如下图所示，起点和终点是同一个顶点。
步骤也是一样的。像示例那样的没有闭环的图叫作“树”。
起点越近，
2
补充说明
解说
为了方便说明，这次讲解用的是没有闭环的图。不过，如果图中有闭环，
广度优先搜索的特征为从起点开始，
搜索结束得就越快。
由近及远进行广泛的搜索。因此，目标顶点离
到达终点G，
M
搜索结束。
，其搜索
085
广度优先搜索
412
---
## Page 99
¥980
图的搜索
第4章
ON
止，然后再折返，开始搜索下一条候补路径。
索直到到达指定顶点（终点)。深度优先搜索会沿着一条路径不断往下搜索直到不能再继续为
4-3
深度优先搜索和广度优先搜索一样，都是对图进行搜索的算法，目的也都是从起点开始搜
深度优先搜索
用红色表示此时所在的顶点。
用绿色表示候补顶点。
步的候补顶点。
顶点B、C、D设为下一
将可以从A直达的三个
开始我们在起点A上。
A为起点，G为终点。
---
## Page 100
择了最左边的顶点。
此处B、C、D同时成为候补，所以我们随机选
选中的点。
用橙色表示
提示
参考：1-4栈
数据结构。
此处，候补顶点是用“后入先出”（LIFO）的方式来管理的，因此可以使用“栈”这个
B
变为红色，同时将已经搜索过的顶点变为橙色。
移动到选中的顶点B。此时我们在B上，所以B
S
从中随意选择一个。
同时成为候补，那么可以
候补的点，如果几个顶点
顶点。优先选择最新成为
从候补顶点中选出一个
表示。
毕，改用橙色
A已经搜索完
087
深度优先搜索
---
## Page 101
088
图的搜索
第4章
被遍历为止。
重复上述操作直到到达终点，
移动到选中的顶点E上
顶
将可以从B直达的两个顶点E和F设为候补
06