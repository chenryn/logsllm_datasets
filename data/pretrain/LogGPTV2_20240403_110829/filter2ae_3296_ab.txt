    } __attribute__ ((packed));
    /* note that "string" zero is special, it holds language codes that
     * the device supports, not Unicode characters.
     */
字符串表中的字符都以 [Unicode](http://www.unicode.org/) 格式编码，并且可以支持多种语言。0号字符串表较为特殊，其中
wData 包含一组所支持的语言代码，每个语言码为 2 字节，例如 0x0409 表示英文。
## 传输
不像 RS-232 和其他类似的串口协议，USB 实际上由多层协议构造而成，不过大部分底层的协议都在 Controller
端上的硬件或者固件进行处理了，最终开发者所要关心的只有上层协议。
### USB Packet
在 HCI 之下，实际传输的数据包称为 Packet，每次上层 USB 传输都会涉及到 2-3 次底层的 Packet 传输，分别是:
**Token Packet: 总是由主机发起，指示一次新的传输或者事件**  
\- In: 告诉 USB 设备，主机我想要读点信息  
\- Out: 告诉 USB 设备，主机我想要写点信息  
\- Setup: 用于开始 Control Transfer  
**Data Packet: 可选，表示传输的数据，可以是主机发送到设备，也可以是设备发送到主机**  
\- Data0  
\- Data1  
**Status Packet: 状态包，用于响应传输，以及提供纠错功能**  
\- Handshake Packets: ACK/NAK/STALL  
\- Start of Frame Packets
### Transfer
基于这些底层包，USB 协议定义了四种不同的传输类型，分别对应上节中的四种端点类型，分别是:
**Control Transfers** : 主要用来发送状态和命令，比如用来请求设备、配置等描述以及选择和设置指定的描述符。只有控制端点是双向的。
**Interrupt Transfers** : 由于 USB
协议是主机主导的，设备端的中断信息需要被及时响应，就要用到中断传输，其提供了有保证的延迟以及错误检测和重传功能。中断传输通常是非周期性的，并且传输过程保留部分带宽，常用于时间敏感的数据，比如键盘、鼠标等
HID 设备。
**Isochronous Transfers** :
等时传输，如其名字所言，该类传输是连续和周期性的，通常包含时间敏感的信息，比如音频或视频流。因此这类传输不保证到达，即没有 ACK 响应。
**Bulk Transfers** :
用于传输大块的突发数据(小块也可以)，不保留带宽。提供了错误校验(CRC16)和重传机制来保证传输数据的完整性。块传输只支持高速/全速模式。
这里以控制传输(Control Transfers)为例，来看看底层 Packet
如何组成一次完整的传输。控制传输实际上又可能最多包含三个阶段，每个阶段在应用层可以看成是一次 “USB 传输” (在Wireshark中占一行)，分别是:
**Setup Stage: 主机发送到设备的请求，包含三次底层数据传输**
1.Setup Token Packet: 指定地址和端点号(应为0)  
2.Data0 Packet: 请求数据，假设是 8 字节的 `Device Descriptor Request`  
3.STALL 或者 NAK 来响应 Setup Packet
**Data Stage: 可选阶段，包含一个或者多个 IN/OUT 传输，以 IN 为例，也包含三次传输**
1.IN Token Packet: 表示主机端要从设备端读数据  
2.Datax Packet: 如果上面 Setup Stage 是 `Device Descriptor Request`， 这里返回 `Device
Descriptor Response` (的前8字节，然后再根据实际长度再 IN 一次)。  
3.ACK/STALL/NAK Status Packet
**Status Stage: 报告本次请求的状态，底层也是三次传输，但是和方向有关:**  
如果在 Data Stage 发送的是 IN Token，则该阶段包括:  
1.OUT Token  
2.Data0 ZLP(zero length packet): 主机发送长度为0的数据  
3.ACK/NACK/STALL: 设备返回给主机
如果在 Data Stage 发送的是 OUT Token，则该阶段包括:  
1.IN Token  
2.Data0 ZLP: 设备发送给主机，表示正常完成，否则发送 NACK/STALL  
3.ACK: 如果是 ZLP，主机响应设备，双向确认
每个阶段的数据都有自己的格式，例如 Setup Stage 的 Request，即 Data0 部分发送的 8 字节数据结构如下:
    struct usb_ctrlrequest {
        __u8 bRequestType; // 对应 USB 协议中的 bmRequestType，包含请求的方向、类型和指定接受者
        __u8 bRequest; // 决定所要执行的请求
        __le16 wValue; // 请求参数
        __le16 wIndex; // 同上
        __le16 wLength; // 如果请求包含 Data Stage，则指定数据的长度
    } __attribute__ ((packed));
下面是一些标准请求的示例:
bmRequestType | bRequest | wValue | wIndex | wLength | Data  
---|---|---|---|---|---  
1000 0000b | GET_STATUS (0x00) | Zero | Zero | Two | Device Status  
0000 0000b | CLEAR_FEATURE (0x01) | Feature Selector | Zero | Zero | None  
0000 0000b | SET_FEATURE (0x03) | Feature Selector | Zero | Zero | None  
0000 0000b | SET_ADDRESS (0x05) | Device Address | Zero | Zero | None  
1000 0000b | GET_DESCRIPTOR (0x06) | Descriptor Type & Index | Zero or
Language ID | Descriptor Length | Descriptor  
0000 0000b | SET_DESCRIPTOR (0x07) | Descriptor Type & Index | Zero or
Language ID | Descriptor Length | Descriptor  
1000 0000b | GET_CONFIGURATION (0x08) | Zero | Zero | 1 | Configuration Value  
0000 0000b | SET_CONFIGURATION (0x09) | Configuration Value | Zero | Zero |
None  
> ref: 
虽然 HCI 之下传输的数据包大部分情况下对应用开发者透明，但是了解底层协议发生了什么也有助于加深我们对 USB 的理解，后文中介绍 checkm8
漏洞时候就用到了相关知识。
# 主机端
在主机端能做的事情相对有限，主要是分析和使用对应的 USB 设备。
## 抓包分析
使用 wireshark 可以分析 USB 流量，根据上面介绍的描述符字段以及 USB 传输过程进行对照，可以加深我们对 USB
协议的理解。如下是对某个安卓设备的 _Device Descriptor Response_ 响应:
也就是所谓安卓变砖恢复时经常用到的高通 9008 模式。说个题外话，最近对于高通芯片 BootROM
的研究发现了一些有趣的东西，后面可能会另外分享，Stay Tune！
## 应用开发
对于应用开发者而言，通常是使用封装好的库，早期只有 libusb，后来更新了 libusb1.0，早期的版本变成 libusb0.1，然后又有了
[OpenUSB](http://sourceforge.net/p/openusb/wiki/Home/) 和其他的 USB
库。但不管用哪个库，调用的流程都是大同小异的。以 Python 的封装 pyusb 为例，官方给的示例如下:
    import usb.core
    import usb.util
    # find our device
    dev = usb.core.find(idVendor=0xfffe, idProduct=0x0001)
    # was it found?
    if dev is None:
        raise ValueError('Device not found')
    # set the active configuration. With no arguments, the first
    # configuration will be the active one
    dev.set_configuration()
    # get an endpoint instance
    cfg = dev.get_active_configuration()
    intf = cfg[(0,0)]
    ep = usb.util.find_descriptor(
        intf,
        # match the first OUT endpoint
        custom_match = \
        lambda e: \
            usb.util.endpoint_direction(e.bEndpointAddress) == \
            usb.util.ENDPOINT_OUT)
    assert ep is not None
    # write the data
    ep.write('test')
总的来说分为几步，
  1. 根据设备描述符查找到指定的设备
  2. 获取该设备的配置描述符，选择并激活其中一个
  3. 在指定的配置中查找接口和端点描述符
  4. 使用端点描述符进行数据传输
如果不清楚 USB 的工作原理，会觉得上面代码的调用流程很奇怪，往 USB 上读写数据需要那么复杂吗？但正是因为 USB
协议的高度拓展性，才得以支持这么多种类的外设，从而流行至今。
# 设备端
对于想要开发设备端 USB 功能的开发者而言，使用最广泛的要数 **树莓派 Zero** 了，毕竟这是树莓派系列中唯一支持 USB OTG
的型号。网上已经有很多资料教我们如何将树莓派 Zero 配置成 USB 键盘、打印机、网卡等 USB 设备的教程。当然使用其他硬件也是可以的，配置自定义的
USB 设备端可以让我们做很多有趣的事情，比如网卡中间人或者 Bad USB 这种近源渗透方式。后文中我们会使用 Zero 进行简单测试。
一些相关的配置资料可以参考:
  * 
  * [Using RPi Zero as a Keyboard](https://www.rmedgar.com/blog/using-rpi-zero-as-keyboard-setup-and-device-definition)
## 内核驱动
在介绍应用之间，我们先看看内核的实现。还是以 Linux 内核为例，具体来说，我们想了解如何通过添加内核模块的方式实现一个新的自定义 USB
设备。俗话说得好，添加 Linux 驱动的最好方式是参看现有的驱动，毕竟当前内核中大部分都是驱动代码。
因为 Linux 内核既能运行在主机端，也能运行在设备端，因此设备端的 USB 驱动有个不同的名字: **gadget**
driver。对于不同设备，也提供不同的内核接口，即 Host-Side API 和 Gadget API。既然我们是想实现自己的设备，就需要从
gadget 驱动入手。
`g_zero.ko` 就是这么一个驱动，代码在 _drivers/usb/gadget/legacy/zero.c_ 。该驱动实现了一个简单的 USB
设备，包含 2 个配置描述，各包含 1 个功能，分别是 sink 和 loopback，前者接收数据并返回 0，后者接收数据并原样返回:
  * _drivers/usb/gadget/function/f_sourcesink.c_
  * _drivers/usb/gadget/function/f_loopback.c_
代码量不多，感兴趣的自行 RTFSC。另外值得一提的是，对于运行于 USB device 端的系统而言，内核中至少有三个层级处理 USB