nodes of different blockchains.
the client can send the requests to multiple joint nodes in the
subsystem selected at random. Assuming that the majority of the
joint nodes in the subsystems are behaving honestly, the client
will find inconsistencies of the responses. The client then regards
the results as votes to distinguish the correct responses form the
incorrect ones, where the correct responses are likely become the
majority as honest joint nodes always return correct responses.
A dishonest joint node can also be detected by its peers. The
joint nodes validate each other’s SBFs files by confirming the
hash values of the SBFs and the hash values stored in the SBFChain.
If the information does not match, any nodes returning incorrect
information can be blacklisted. The blacklist information will be
published to all clients. Random requests can also be utilised for
checking mechanism to detect any dishonest joint nodes.
The normal nodes of different blockchain branches can also
cooperate to verify the correctness of the SBFs maintained by the
joint nodes. However, this requires extra computing resources
by the normal nodes. The verification of the correctness of GSBFs
can be done in a two-stage reconstruction.
(1) Stage one: intrachain reconstruction. In this stage, the
normal nodes of each blockchain branch compute Local
SBFs (LSBFs) by using their own blockchain data accord-
ing to an agreed entry on the SBFChain. The reconstruction
of the Local SBFs can start from the Fork Point of that
blockchain branch instead from the genesis block (block
number zero). The correctness of the Local SBFs (LSBFs) de-
pends on the honesty of the normal nodes of the blockchain.
Assuming that the majority of the nodes behave honestly,
then the correct LSBFs can always be generated.
(2) Stage two: interchain reconstruction. The nodes of dif-
ferent blockchain branches cooperate to generate a set of
Global SBFs (GSBFs). These GSBFs are created by concate-
nating all LSBFs. Assuming that all LSBFs are correct, then
the produced GSBFs are also correct.
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand630On The Unforkability of Monero
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
A dishonest normal node can also try to confirm transactions
that have problems of key reuse into new blocks it produces by
collaborating with miners that have a sufficient computing power.
In this case, other normal nodes can re-validate these transactions
with the help of joint nodes. When these transactions are proven
to be malicious, then the blocks containing these malicious trans-
actions can be ignored. Assuming that the majority of the nodes
behave honestly, then there will be a temporary fork which will re-
solve after several blocks according to the current Monero protocol.
Since the miners will suffer financial loss if the produced blocks
are removed, they are less motivated to behave dishonestly.
7.1.2 Passive Attack. In the passive attack, it is assumed that the
attacker has access to the public blockchains. The attacker develop
analytic tools to determine traceable transactions. The success of
the attack is determined by the number of traceable transactions
and the portion of the traceable transactions compared to the total
number of transactions in the system.
Since that the active attack can be prevented by using our pro-
posed solution, the passive attack can also be prevented. Passive
attacks analyse existing valid transactions that have been confirmed
in the blocks. With no malicious transaction being added to the
blocks, then the passive attack will not produce any expected out-
come, assuming no extra information is given to the attacker.
7.2 Performance Analysis
7.2.1 Hard Fork Management. We conducted experiments to cal-
culate the extra computing resource in managing the extra infor-
mation for hard fork management. The experiments used a Ubuntu
18.04 LTS virtual machine equipped with 8GB RAM and maximum
2 CPU cores. A new table called Chain_Info was created using
LMDB database system, which is the same database product that is
being used to store and manage the blockchain data of the current
version of Monero.
Two million Chain_ID - Fork_Point tuples were written to the
database and then read. The processes were then repeated 10,000
times. About 1.2MB storage was required to store the two million
records, while writing average time was 28.37 milliseconds and the
reading average time was 28.19 milliseconds. The detailed result
is shown in Figure 8. The experiment shows that the computing
resource for the required operations is small such that today’s
regular computers can afford it.
Joint Node Affordability. In our proposal, the GSBF will be
7.2.2
maintained by a special type of node called joint node. A joint
node maintains a set of GSBFs which is relevant to all existing or
future Monero blockchain branches.
An experiment was conducted to calculate the time and storage
needed to create an SBF. The experiment utilises Jay Baird’s Scalable
Bloom Filter Python library, pybloom8. The experiment used a
LARGE_SET_GROWTH setting to anticipate a large dataset growth.
In this setting, a surge jump in storage size will happen every time
the system hits its maximum capacity. The results as in Figure 9
show that the time required to create an SBF is linear to the number
of the data inserted in the SBF with the average of 17.308 data per
second. The file size, however, increased significantly every time
8https://github.com/jaybaird/python-bloomfilter
Figure 8: The read-write processing time for Chain_Info
database using LMDB.
the capacity is full, according to the LARGE_SET_GROWTH algorithm.
Our experiment also showed that creating an SBF with 100 million
data produced 372.1MB of SBF file within around 96 minutes. Due to
the low resource requirement when creating the SBF, recalculating
the SBF will not be a problem.
7.3 Limitation
By mitigating the problem of key reuse, our solution is able to miti-
gate a passive attack which utilises analyses on public blockchains.
Our solution cannot prevent a passive attack on network level
which is still considered as one of the biggest privacy issues in cryp-
tocurrency [8]. Our solution is also prone to a passive attack con-
ducted by an honest-but-curious joint node, where the joint node
can potentially trace users’ transaction given enough information.
This problem, however, is not exclusive to our proposed system,
but also applies to all Monero nodes.
8 CONCLUSION AND FUTURE WORK
We investigate the problem of key reuse as an unwanted impact
of Monero hard forks. We build a dataset from three different
blockchain branches and determine the traceable inputs as the
result of the key reuse problem. We also identify the cascade effect
and the reduced anonymity as the side effects of the main problem.
Our analyses discover that the scalability of the problem of key
reuse is correlated to the market price of the respected coins and
the supports from cryptocurrency markets to the newly created
cryptocurrencies. We also propose a mitigation strategy in the form
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand631AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
Wijaya et al.
[9] HitBTC. 2018. The Monero Original Fork has happened. https://blog.hitbtc.com/
the-monero-original-fork-had-happened/
[10] HitBTC. 2018.
Statement on MoneroV fork.
statement-on-monerov-fork/
[11] HitBTC. 2018. Statement on XMO Monero fork.
statement-on-xmo-monero-fork/
https://blog.hitbtc.com/
https://blog.hitbtc.com/
[12] Aggelos Kiayias, Andrew Miller, and Dionysis Zindros. 2017. Non-interactive
proofs of proof-of-work. Technical Report. Cryptology ePrint Archive, Report
2017/963, 2017. Accessed: 2017-10-03.
[13] knaccc. 2017. Description of a potential privacy leak and recommenda-
https://github.com/monero-project/monero/issues/1673#
tion to mitigate.
issuecomment-278509986
[14] Amrit Kumar, Clément Fischer, Shruti Tople, and Prateek Saxena. 2017. A trace-
ability analysis of Monero‘s blockchain. In European Symposium on Research in
Computer Security. Springer, 153–173.
[15] Joseph K. Liu, Man Ho Au, Willy Susilo, and Jianying Zhou. 2014. Linkable Ring
Signature with Unconditional Anonymity. IEEE Trans. Knowl. Data Eng. 26, 1
(2014), 157–165.
[16] Joseph K Liu, Victor K Wei, and Duncan S Wong. 2004. Linkable spontaneous
anonymous group signature for ad hoc groups. In Australasian Conference on
Information Security and Privacy. Springer, 325–335.
[17] Patrick McCorry, Ethan Heilman, and Andrew Miller. 2017. Atomically trading
with roger: Gambling on the success of a hardfork. In Data Privacy Management,
Cryptocurrencies and Blockchain Technology. Springer, 334–353.
[18] Sarah Meiklejohn, Marjori Pomarole, Grant Jordan, Kirill Levchenko, Damon
McCoy, Geoffrey M. Voelker, and Stefan Savage. 2013. A Fistful of Bitcoins:
Characterizing Payments Among Men with No Names. USENIX ;login: (2013).
[19] Monero. [n. d.]. Monero XMR Forks & Hard Forks. https://monero.org/forks/
[20] monero hax123. 2018. Corrupt RPC responses from remote daemon nodes can
lead to transaction tracing. https://hackerone.com/reports/304770
[21] Malte Möser, Kyle Soska, Ethan Heilman, Kevin Lee, Henry Heffan, Shashvat
Srivastava, Kyle Hogan, Jason Hennessey, Andrew Miller, Arvind Narayanan,
et al. 2018. An Empirical Analysis of Traceability in the Monero Blockchain.
Proceedings on Privacy Enhancing Technologies 2018, 3 (2018), 143–163.
[22] Satoshi Nakamoto. 2008. Bitcoin: A peer-to-peer electronic cash system. Report.
[23] Shen Noether, Adam Mackenzie, et al. 2016. Ring confidential transactions. Ledger
http://bitcoin.org/bitcoin.pdf
1 (2016), 1–18.
com/a/5718
[24] Surae Noether, Sarang Noether, and Adam Mackenzie. 2014. MRL-0001: A note
on chain reactions in traceability in CryptoNote 2.0. Technical report2014 (2014).
https://www.reddit.com/r/Monero/
[25] propercoil. 2018. Replay protection?
comments/8agjfd/replay_protection/dx0lun4/
[26] Bailey Reutzel. 2017. Logical or Not, Bitcoin’s Coming Fork Is Boosting Its Price.
https://www.coindesk.com/logical-not-bitcoins-coming-fork-boosting-price/
[27] Dorit Ron and Adi Shamir. 2013. Quantitative analysis of the full bitcoin transac-
tion graph. In Financial Cryptography and Data Security. Springer, 6–24.
[28] Jeff Sauro and James R Lewis. 2016. Quantifying the user experience: Practical
statistics for user research. Morgan Kaufmann.
[29] sgp. 2018. How can individuals safeguard themselves and the community against
a key reusing fork? https://monero.stackexchange.com/a/7847
[30] Riccardo Spagni. 2018. Monero 0.13.0 "Beryllium Bullet" Release. https://www.
getmonero.org/2018/10/11/monero-0.13.0-released.html
[31] Shifeng Sun, Man Ho Au, Joseph K. Liu, and Tsz Hon Yuen. 2017. RingCT 2.0: A
Compact Accumulator-Based (Linkable Ring Signature) Protocol for Blockchain
Cryptocurrency Monero. In ESORICS II (LNCS), Vol. 10493. Springer, 456–474.
[32] user36303. 2017. Replay attack and Cryptonotes. https://monero.stackexchange.
URL:
[33] user36303. 2018. How can individuals safeguard themselves and the community
against a key reusing fork? https://monero.stackexchange.com/a/7844
[34] Nicolas van Saberhagen. 2018.
Cryptonote v 2.0, 2013.
https://cryptonote.org/whitepaper.pdf. White Paper. Accessed (2018), 04–13.
[35] Dimaz A. Wijaya, Joseph Liu, Ron Steinfeld, and Dongxi Liu. 2018. Monero Ring
Attack: Recreating Zero Mixin Transaction Effect. In TrustCom. IEEE, 1196–1201.
[36] Dimaz Ankaa Wijaya, Joseph Liu, Ron Steinfeld, and Dongxi Liu. 2019. Risk of
Asynchronous Protocol Update: Attacks to Monero Protocols. (2019). to appear.
[37] Dimaz Ankaa Wijaya, Joseph Liu, Ron Steinfeld, Dongxi Liu, and Tsz Hon Yuen.
2018. Anonymity Reduction Attacks To Monero. In The 14th International Con-
ference on Information Security and Cryptology. Springer.
[38] Bin Yu, Joseph K. Liu, Amin Sakzad, Surya Nepal, Ron Steinfeld, Paul Rimba,
and Man Ho Au. 2018. Platform-Independent Secure Blockchain-Based Voting
System. In ISC (LNCS), Vol. 11060. Springer, 369–386.
[39] Zuoxia Yu, Man Ho Au, Jiangshan Yu, Rupeng Yang, Qiuliang Xu, and Wang Fat
Lau. 2019. New Empirical Traceability Analysis of CryptoNote-Style Blockchains.
In Financial Cryptography and Data Security.
[40] Alexei Zamyatin, Nicholas Stifter, Aljosha Judmayer, Philipp Schindler, Edgar
Weippl, and WJ Knottebelt. 2018. A wild velvet fork appears! Inclusive blockchain
protocol changes in practice. In 5th Workshop on Bitcoin and Blockchain Research,
Financial Cryptography and Data Security, Vol. 18.
Figure 9: Part a) shows the creation time of SBF which is a
positive linear to the data size. Part b) shows the result’s file
size where the file size will be increased when the capacity
of the SBF is full.
of hard fork management and key image management, where joint
nodes play an important role in the proposed strategy.
For future work, we will investigate how our solution can be
implemented in different types of cryptocurrency. We will also
investigate different options in handling protocol-level changes to
avoid hard fork. The new method should be able to support funda-
mental changes in the system without creating a new blockchain
branch. This type of solution will be useful to be implemented in
systems with active development such as Monero. It is also inter-
esting to further investigate the correlation between cryptocrrency
market price and the number of transactions recorded in Monero
blockchain to uncover the actual behavior of Monero users and
how Monero is used in the real world.
ACKNOWLEDGMENT
The work of Ron Steinfeld and Joseph K. Liu was supported in part
by ARC Discovery Project grant DP180102199.
REFERENCES
[1] Paulo Sérgio Almeida, Carlos Baquero, Nuno Preguiça, and David Hutchison.
2007. Scalable bloom filters. Inform. Process. Lett. 101, 6 (2007), 255–261.
[2] BatmanLovesCrypto. 2018. Monero Classic and Monero Original on the same
blockchain? Help me understand. https://www.reddit.com/r/Monero/comments/
8eovv5/monero_classic_and_monero_original_on_the_same/
[3] Burton H Bloom. 1970. Space/time trade-offs in hash coding with allowable
errors. Commun. ACM 13, 7 (1970), 422–426.
[4] Vitalik Buterin. 2016. Simple Replay Attack Protection. https://github.com/
ethereum/EIPs/blob/master/EIPS/eip-155.md
[5] Sherman S. M. Chow, Joseph K. Liu, and Duncan S. Wong. 2008. Robust Receipt-
Free Election System with Ballot Secrecy and Verifiability. In NDSS.
[6] dEBRYUNE. 2018. PoW change and key reuse. https://ww.getmonero.org/2018/
02/11/PoW-change-and-key-reuse.html
[7] Justin Ehrenhofer. 2018. Monero Blackball Site. https://monero-blackball.github.
io/monero-blackball-site/
[8] Ryan Henry, Amir Herzberg, and Aniket Kate. 2018. Blockchain access privacy:
challenges and directions. IEEE Security & Privacy 16, 4 (2018), 38–45.
Session 8: Blockchain SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand632