### Nodes of Different Blockchains

Clients can send requests to multiple joint nodes within a randomly selected subsystem. Assuming that the majority of these joint nodes behave honestly, the client will be able to identify inconsistencies in the responses. The client then treats these responses as votes to distinguish correct from incorrect ones, with the correct responses likely forming the majority since honest joint nodes always return accurate information.

Dishonest joint nodes can also be detected by their peers. Joint nodes validate each other’s SBF (Scalable Bloom Filter) files by confirming the hash values of the SBFs and those stored in the SBFChain. If the information does not match, any node returning incorrect information can be blacklisted. The blacklist information is then published to all clients. Random requests can also be used as a checking mechanism to detect dishonest joint nodes.

### Verification by Normal Nodes

Normal nodes from different blockchain branches can cooperate to verify the correctness of the SBFs maintained by the joint nodes. However, this requires additional computing resources from the normal nodes. The verification of the correctness of Global SBFs (GSBFs) can be done in a two-stage reconstruction process:

1. **Stage One: Intra-Chain Reconstruction**
   - In this stage, normal nodes of each blockchain branch compute Local SBFs (LSBFs) using their own blockchain data according to an agreed entry on the SBFChain.
   - The reconstruction of Local SBFs can start from the Fork Point of that blockchain branch rather than from the genesis block (block number zero).
   - The correctness of the LSBFs depends on the honesty of the normal nodes of the blockchain. Assuming that the majority of the nodes behave honestly, the correct LSBFs can always be generated.

2. **Stage Two: Inter-Chain Reconstruction**
   - The nodes of different blockchain branches cooperate to generate a set of Global SBFs (GSBFs). These GSBFs are created by concatenating all LSBFs.
   - Assuming that all LSBFs are correct, the produced GSBFs will also be correct.

### Session 8: Blockchain Security
**AsiaCCS '19, July 9–12, 2019, Auckland, New Zealand**

A dishonest normal node can attempt to confirm transactions with key reuse issues into new blocks it produces by collaborating with miners who have sufficient computing power. In such cases, other normal nodes can re-validate these transactions with the help of joint nodes. When these transactions are proven to be malicious, the blocks containing them can be ignored. Assuming that the majority of the nodes behave honestly, there will be a temporary fork that resolves after several blocks, according to the current Monero protocol. Since miners suffer financial loss if their produced blocks are removed, they are less motivated to behave dishonestly.

### Passive Attack

In a passive attack, it is assumed that the attacker has access to public blockchains and develops analytic tools to determine traceable transactions. The success of the attack is determined by the number of traceable transactions and their proportion compared to the total number of transactions in the system.

Since our proposed solution can prevent active attacks, it can also mitigate passive attacks. Passive attacks analyze existing valid transactions that have been confirmed in the blocks. With no malicious transactions being added to the blocks, the passive attack will not produce any expected outcome, assuming no extra information is given to the attacker.

### Performance Analysis

#### Hard Fork Management

We conducted experiments to calculate the additional computing resources required for managing extra information for hard fork management. The experiments used a Ubuntu 18.04 LTS virtual machine equipped with 8GB RAM and up to 2 CPU cores. A new table called `Chain_Info` was created using the LMDB database system, which is the same database product used to store and manage the blockchain data of the current version of Monero.

Two million `Chain_ID - Fork_Point` tuples were written to the database and then read. This process was repeated 10,000 times. About 1.2MB of storage was required to store the two million records, with an average writing time of 28.37 milliseconds and an average reading time of 28.19 milliseconds. The detailed results are shown in Figure 8. The experiment shows that the computing resources required for these operations are minimal, making them feasible for today's regular computers.

#### Joint Node Affordability

In our proposal, the GSBF will be maintained by a special type of node called a joint node. A joint node maintains a set of GSBFs relevant to all existing or future Monero blockchain branches.

An experiment was conducted to calculate the time and storage needed to create an SBF. The experiment utilized Jay Baird’s Scalable Bloom Filter Python library, `pybloom`. The experiment used a `LARGE_SET_GROWTH` setting to anticipate large dataset growth. In this setting, a significant increase in storage size occurs every time the system reaches its maximum capacity. The results, shown in Figure 9, indicate that the time required to create an SBF is linear to the number of data inserted, with an average of 17.308 data per second. The file size, however, increased significantly each time the capacity was full, according to the `LARGE_SET_GROWTH` algorithm.

Our experiment also showed that creating an SBF with 100 million data points produced a 372.1MB SBF file within approximately 96 minutes. Due to the low resource requirements for creating the SBF, recalculating the SBF will not be a problem.

### Limitations

By mitigating the problem of key reuse, our solution can also mitigate passive attacks that utilize analyses on public blockchains. However, our solution cannot prevent passive attacks at the network level, which remain one of the biggest privacy issues in cryptocurrency. Our solution is also vulnerable to passive attacks conducted by honest-but-curious joint nodes, where the joint node can potentially trace users' transactions given enough information. This issue, however, is not unique to our proposed system but applies to all Monero nodes.

### Conclusion and Future Work

We investigated the problem of key reuse as an unwanted impact of Monero hard forks. We built a dataset from three different blockchain branches and determined the traceable inputs resulting from key reuse. We also identified the cascade effect and reduced anonymity as side effects of the main problem. Our analyses discovered that the scalability of the key reuse problem is correlated with the market price of the respective coins and the support from cryptocurrency markets for newly created cryptocurrencies. We propose a mitigation strategy in the form of hard fork management and key image management, where joint nodes play a crucial role.

For future work, we will investigate how our solution can be implemented in different types of cryptocurrency. We will also explore different options for handling protocol-level changes to avoid hard forks. The new method should support fundamental changes in the system without creating a new blockchain branch. This type of solution will be useful for systems with active development, such as Monero. It is also interesting to further investigate the correlation between cryptocurrency market prices and the number of transactions recorded in the Monero blockchain to uncover the actual behavior of Monero users and how Monero is used in the real world.

### Acknowledgment

The work of Ron Steinfeld and Joseph K. Liu was supported in part by ARC Discovery Project grant DP180102199.

### References

[References listed as provided in the original text]