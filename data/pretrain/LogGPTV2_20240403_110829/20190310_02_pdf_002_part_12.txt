Database Compatibility for Oracle® Developers Guide
2.4 Optimizer Hints
When you invoke a DELETE, INSERT, SELECT or UPDATE command, the server
generates a set of execution plans; after analyzing those execution plans, the server
selects a plan that will (generally) return the result set in the least amount of time. The
server's choice of plan is dependent upon several factors:
 The estimated execution cost of data handling operations.
 Parameter values assigned to parameters in the Query Tuning section of the
postgresql.conf file.
 Column statistics that have been gathered by the ANALYZE command.
As a rule, the query planner will select the least expensive plan. You can use an
optimizer hint to influence the server as it selects a query plan. An optimizer hint is a
directive (or multiple directives) embedded in a comment-like syntax that immediately
follows a DELETE, INSERT, SELECT or UPDATE command. Keywords in the comment
instruct the server to employ or avoid a specific plan when producing the result set.
Synopsis
{ DELETE | INSERT | SELECT | UPDATE } /*+ { hint [ comment ] }
[...] */
statement_body
{ DELETE | INSERT | SELECT | UPDATE } --+ { hint [ comment ] }
[...]
statement_body
Optimizer hints may be included in either of the forms shown above. Note that in both
forms, a plus sign (+) must immediately follow the /* or -- opening comment symbols,
with no intervening space, or the server will not interpret the following tokens as hints.
If you are using the first form, the hint and optional comment may span multiple lines.
The second form requires all hints and comments to occupy a single line; the remainder
of the statement must start on a new line.
Description
Please Note:
 The database server will always try to use the specified hints if at all possible.
 If a planner method parameter is set so as to disable a certain plan type, then this
plan will not be used even if it is specified in a hint, unless there are no other
possible options for the planner. Examples of planner method parameters are
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 100
Database Compatibility for Oracle® Developers Guide
enable_indexscan, enable_seqscan, enable_hashjoin,
enable_mergejoin, and enable_nestloop. These are all Boolean
parameters.
 Remember that the hint is embedded within a comment. As a consequence, if the
hint is misspelled or if any parameter to a hint such as view, table, or column
name is misspelled, or non-existent in the SQL command, there will be no
indication that any sort of error has occurred. No syntax error will be given and
the entire hint is simply ignored.
 If an alias is used for a table or view name in the SQL command, then the alias
name, not the original object name, must be used in the hint. For example, in the
command, SELECT /*+ FULL(acct) */ * FROM accounts acct ...,
acct, the alias for accounts, must be specified in the FULL hint, not the table
name, accounts.
Use the EXPLAIN command to ensure that the hint is correctly formed and the planner is
using the hint. See the Advanced Server documentation set for information on the
EXPLAIN command.
In general, optimizer hints should not be used in production applications (where table
data changes throughout the life of the application). By ensuring that dynamic columns
are ANALYZEd frequently, the column statistics will be updated to reflect value changes,
and the planner will use such information to produce the least cost plan for any given
command execution. Use of optimizer hints defeats the purpose of this process and will
result in the same plan regardless of how the table data changes.
Parameters
hint
An optimizer hint directive.
comment
A string with additional information. Note that there are restrictions as to what
characters may be included in the comment. Generally, comment may only
consist of alphabetic, numeric, the underscore, dollar sign, number sign and space
characters. These must also conform to the syntax of an identifier. Any
subsequent hint will be ignored if the comment is not in this form.
statement_body
The remainder of the DELETE, INSERT, SELECT, or UPDATE command.
The following sections describe the optimizer hint directives in more detail.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 101
Database Compatibility for Oracle® Developers Guide
2.4.1 Default Optimization Modes
There are a number of optimization modes that can be chosen as the default setting for an
Advanced Server database cluster. This setting can also be changed on a per session basis
by using the ALTER SESSION command as well as in individual DELETE, SELECT, and
UPDATE commands within an optimizer hint. The configuration parameter that controls
these default modes is named OPTIMIZER_MODE. The following table shows the possible
values.
Table 2-1 Default Optimization Modes
Hint Description
ALL_ROWS Optimizes for retrieval of all rows of the result set.
Does no default optimization based on assumed number of rows to be retrieved
CHOOSE
from the result set. This is the default.
FIRST_ROWS Optimizes for retrieval of only the first row of the result set.
FIRST_ROWS_10 Optimizes for retrieval of the first 10 rows of the results set.
FIRST_ROWS_100 Optimizes for retrieval of the first 100 rows of the result set.
FIRST_ROWS_1000 Optimizes for retrieval of the first 1000 rows of the result set.
Optimizes for retrieval of the first n rows of the result set. This form may not be
FIRST_ROWS(n) used as the object of the ALTER SESSION SET OPTIMIZER_MODE command.
It may only be used in the form of a hint in a SQL command.
These optimization modes are based upon the assumption that the client submitting the
SQL command is interested in viewing only the first “n” rows of the result set and will
then abandon the remainder of the result set. Resources allocated to the query are
adjusted as such.
Examples
Alter the current session to optimize for retrieval of the first 10 rows of the result set.
ALTER SESSION SET OPTIMIZER_MODE = FIRST_ROWS_10;
The current value of the OPTIMIZER_MODE parameter can be shown by using the SHOW
command. Note that this command is a utility dependent command. In PSQL, the SHOW
command is used as follows:
SHOW OPTIMIZER_MODE;
optimizer_mode
----------------
first_rows_10
(1 row)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 102
Database Compatibility for Oracle® Developers Guide
The SHOW command, compatible with Oracle databases, has the following syntax:
SHOW PARAMETER OPTIMIZER_MODE;
NAME
--------------------------------------------------
VALUE
--------------------------------------------------
optimizer_mode
first_rows_10
The following example shows an optimization mode used in a SELECT command as a
hint:
SELECT /*+ FIRST_ROWS(7) */ * FROM emp;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+-----------+------+--------------------+---------+---------+--------
7369 | SMITH | CLERK | 7902 | 17-DEC-80 00:00:00 | 800.00 | | 20
7499 | ALLEN | SALESMAN | 7698 | 20-FEB-81 00:00:00 | 1600.00 | 300.00 | 30
7521 | WARD | SALESMAN | 7698 | 22-FEB-81 00:00:00 | 1250.00 | 500.00 | 30
7566 | JONES | MANAGER | 7839 | 02-APR-81 00:00:00 | 2975.00 | | 20
7654 | MARTIN | SALESMAN | 7698 | 28-SEP-81 00:00:00 | 1250.00 | 1400.00 | 30
7698 | BLAKE | MANAGER | 7839 | 01-MAY-81 00:00:00 | 2850.00 | | 30
7782 | CLARK | MANAGER | 7839 | 09-JUN-81 00:00:00 | 2450.00 | | 10
7788 | SCOTT | ANALYST | 7566 | 19-APR-87 00:00:00 | 3000.00 | | 20
7839 | KING | PRESIDENT | | 17-NOV-81 00:00:00 | 5000.00 | | 10
7844 | TURNER | SALESMAN | 7698 | 08-SEP-81 00:00:00 | 1500.00 | 0.00 | 30
7876 | ADAMS | CLERK | 7788 | 23-MAY-87 00:00:00 | 1100.00 | | 20
7900 | JAMES | CLERK | 7698 | 03-DEC-81 00:00:00 | 950.00 | | 30
7902 | FORD | ANALYST | 7566 | 03-DEC-81 00:00:00 | 3000.00 | | 20
7934 | MILLER | CLERK | 7782 | 23-JAN-82 00:00:00 | 1300.00 | | 10
(14 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 103
Database Compatibility for Oracle® Developers Guide
2.4.2 Access Method Hints
The following hints influence how the optimizer accesses relations to create the result set.
Table 2-2 Access Method Hints
Hint Description
FULL(table) Perform a full sequential scan on table.
INDEX(table [ index ] [...]) Use index on table to access the relation.
NO_INDEX(table [ index ] [...]) Do not use index on table to access the relation.
In addition, the ALL_ROWS, FIRST_ROWS, and FIRST_ROWS(n) hints of Table 2-1 can
be used.
Examples
The sample application does not have sufficient data to illustrate the effects of optimizer
hints so the remainder of the examples in this section will use a banking database created
by the pgbench application located in the Advanced Server bin subdirectory.
The following steps create a database named, bank, populated by the tables,
pgbench_accounts, pgbench_branches, pgbench_tellers, and
pgbench_history. The –s 20 option specifies a scaling factor of twenty, which
results in the creation of twenty branches, each with 100,000 accounts, resulting in a total
of 2,000,000 rows in the pgbench_accounts table and twenty rows in the
pgbench_branches table. Ten tellers are assigned to each branch resulting in a total of
200 rows in the pgbench_tellers table.
The following initializes the pgbench application in the bank database.
createdb -U enterprisedb bank
CREATE DATABASE
pgbench -i -s 20 -U enterprisedb bank
NOTICE: table "pgbench_history" does not exist, skipping
NOTICE: table "pgbench_tellers" does not exist, skipping
NOTICE: table "pgbench_accounts" does not exist, skipping
NOTICE: table "pgbench_branches" does not exist, skipping
creating tables...
100000 of 2000000 tuples (5%) done (elapsed 0.11 s, remaining 2.10 s)
200000 of 2000000 tuples (10%) done (elapsed 0.22 s, remaining 1.98 s)
300000 of 2000000 tuples (15%) done (elapsed 0.33 s, remaining 1.84 s)
400000 of 2000000 tuples (20%) done (elapsed 0.42 s, remaining 1.67 s)
500000 of 2000000 tuples (25%) done (elapsed 0.52 s, remaining 1.57 s)
600000 of 2000000 tuples (30%) done (elapsed 0.62 s, remaining 1.45 s)
700000 of 2000000 tuples (35%) done (elapsed 0.73 s, remaining 1.35 s)
800000 of 2000000 tuples (40%) done (elapsed 0.87 s, remaining 1.31 s)
900000 of 2000000 tuples (45%) done (elapsed 0.98 s, remaining 1.19 s)
1000000 of 2000000 tuples (50%) done (elapsed 1.09 s, remaining 1.09 s)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 104
Database Compatibility for Oracle® Developers Guide
1100000 of 2000000 tuples (55%) done (elapsed 1.22 s, remaining 1.00 s)
1200000 of 2000000 tuples (60%) done (elapsed 1.36 s, remaining 0.91 s)
1300000 of 2000000 tuples (65%) done (elapsed 1.51 s, remaining 0.82 s)
1400000 of 2000000 tuples (70%) done (elapsed 1.65 s, remaining 0.71 s)
1500000 of 2000000 tuples (75%) done (elapsed 1.78 s, remaining 0.59 s)
1600000 of 2000000 tuples (80%) done (elapsed 1.93 s, remaining 0.48 s)
1700000 of 2000000 tuples (85%) done (elapsed 2.10 s, remaining 0.37 s)
1800000 of 2000000 tuples (90%) done (elapsed 2.23 s, remaining 0.25 s)
1900000 of 2000000 tuples (95%) done (elapsed 2.37 s, remaining 0.12 s)
2000000 of 2000000 tuples (100%) done (elapsed 2.48 s, remaining 0.00 s)
vacuum...
set primary keys...
done.
A total of 500,00 transactions are then processed. This will populate the
pgbench_history table with 500,000 rows.
pgbench -U enterprisedb -t 500000 bank
starting vacuum...end.
transaction type: 
scaling factor: 20
query mode: simple
number of clients: 1
number of threads: 1
number of transactions per client: 500000
number of transactions actually processed: 500000/500000
latency average: 0.000 ms
tps = 1464.338375 (including connections establishing)
tps = 1464.350357 (excluding connections establishing)
The table definitions are shown below:
\d pgbench_accounts
Table "public.pgbench_accounts"
Column | Type | Modifiers
----------+---------------+-----------
aid | integer | not null
bid | integer |
abalance | integer |
filler | character(84) |
Indexes:
"pgbench_accounts_pkey" PRIMARY KEY, btree (aid)
\d pgbench_branches
Table "public.pgbench_branches"
Column | Type | Modifiers
----------+---------------+-----------
bid | integer | not null
bbalance | integer |
filler | character(88) |
Indexes:
"pgbench_branches_pkey" PRIMARY KEY, btree (bid)
\d pgbench_tellers
Table "public.pgbench_tellers"
Column | Type | Modifiers
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 105
Database Compatibility for Oracle® Developers Guide
----------+---------------+-----------
tid | integer | not null
bid | integer |
tbalance | integer |
filler | character(84) |
Indexes:
"pgbench_tellers_pkey" PRIMARY KEY, btree (tid)
\d pgbench_history
Table "public.pgbench_history"
Column | Type | Modifiers
--------+-----------------------------+-----------
tid | integer |
bid | integer |
aid | integer |
delta | integer |
mtime | timestamp without time zone |
filler | character(22) |
The EXPLAIN command shows the plan selected by the query planner. In the following
example, aid is the primary key column, so an indexed search is used on index,
pgbench_accounts_pkey.
EXPLAIN SELECT * FROM pgbench_accounts WHERE aid = 100;
QUERY PLAN
-----------------------------------------------------------------------------
------------------
Index Scan using pgbench_accounts_pkey on pgbench_accounts (cost=0.43..8.45
rows=1 width=97)
Index Cond: (aid = 100)
(2 rows)
The FULL hint is used to force a full sequential scan instead of using the index as shown
below:
EXPLAIN SELECT /*+ FULL(pgbench_accounts) */ * FROM pgbench_accounts WHERE
aid = 100;
QUERY PLAN
---------------------------------------------------------------------
Seq Scan on pgbench_accounts (cost=0.00..58781.69 rows=1 width=97)
Filter: (aid = 100)
(2 rows)
The NO_INDEX hint forces a parallel sequential scan instead of use of the index as shown
below:
EXPLAIN SELECT /*+ NO_INDEX(pgbench_accounts pgbench_accounts_pkey) */ * FROM
pgbench_accounts WHERE aid = 100;
QUERY PLAN
-----------------------------------------------------------------------------
-------
Gather (cost=1000.00..45094.80 rows=1 width=97)
Workers Planned: 2
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 106
Database Compatibility for Oracle® Developers Guide
-> Parallel Seq Scan on pgbench_accounts (cost=0.00..44094.70 rows=1
width=97)
Filter: (aid = 100)
(4 rows)
In addition to using the EXPLAIN command as shown in the prior examples, more
detailed information regarding whether or not a hint was used by the planner can be
obtained by setting the trace_hints configuration parameter as follows:
SET trace_hints TO on;
The SELECT command with the NO_INDEX hint is repeated below to illustrate the
additional information produced when the trace_hints configuration parameters is set.
EXPLAIN SELECT /*+ NO_INDEX(pgbench_accounts pgbench_accounts_pkey) */ * FROM
pgbench_accounts WHERE aid = 100;
INFO: [HINTS] Index Scan of [pgbench_accounts].[pgbench_accounts_pkey]
rejected due to NO_INDEX hint.
QUERY PLAN
-----------------------------------------------------------------------------
-------
Gather (cost=1000.00..45094.80 rows=1 width=97)
Workers Planned: 2
-> Parallel Seq Scan on pgbench_accounts (cost=0.00..44094.70 rows=1
width=97)
Filter: (aid = 100)
(4 rows)
Note that if a hint is ignored, the INFO: [HINTS] line will not appear. This may be an
indication that there was a syntax error or some other misspelling in the hint as shown in
the following example where the index name is misspelled.
EXPLAIN SELECT /*+ NO_INDEX(pgbench_accounts pgbench_accounts_xxx) */ * FROM
pgbench_accounts WHERE aid = 100;
QUERY PLAN
-----------------------------------------------------------------------------
------------------
Index Scan using pgbench_accounts_pkey on pgbench_accounts (cost=0.43..8.45
rows=1 width=97)
Index Cond: (aid = 100)
(2 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 107
Database Compatibility for Oracle® Developers Guide
2.4.3 Specifying a Join Order
Include the ORDERED directive to instruct the query optimizer to join tables in the order in
which they are listed in the FROM clause. If you do not include the ORDERED keyword,
the query optimizer will choose the order in which to join the tables.
For example, the following command allows the optimizer to choose the order in which
to join the tables listed in the FROM clause:
SELECT e.ename, d.dname, h.startdate
FROM emp e, dept d, jobhist h
WHERE d.deptno = e.deptno
AND h.empno = e.empno;
The following command instructs the optimizer to join the tables in the ordered specified:
SELECT /*+ ORDERED */ e.ename, d.dname, h.startdate
FROM emp e, dept d, jobhist h
WHERE d.deptno = e.deptno
AND h.empno = e.empno;
In the ORDERED version of the command, Advanced Server will first join emp e with
dept d before joining the results with jobhist h. Without the ORDERED directive, the
join order is selected by the query optimizer.
Please note: the ORDERED directive does not work for Oracle-style outer joins (those joins
that contain a '+' sign).
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 108
Database Compatibility for Oracle® Developers Guide
2.4.4 Joining Relations Hints
When two tables are to be joined, there are three possible plans that may be used to
perform the join.
 Nested Loop Join – A table is scanned once for every row in the other joined
table.
 Merge Sort Join – Each table is sorted on the join attributes before the join starts.
The two tables are then scanned in parallel and the matching rows are combined
to form the join rows.