 docker-compose version 1.11.2, build dfed245
 $ docker-machine --version
 docker-machine version 0.10.0, build 76ed2a6
```
对于其他版本的 Windows，可以从[https://docs.docker.com/toolbox/overview/](https://docs.docker.com/toolbox/overview/)安装 Docker 工具箱。Docker 工具箱在 Oracle VirtualBox 虚拟机管理程序上运行一个轻量级 Linux 虚拟机 Boot2Docker，并在其上安装 Docker 引擎。
## 了解 Docker 设置
了解 Docker 组件及其版本、存储、执行驱动程序、文件位置等非常重要。顺便说一句，理解 Docker 设置的探索也将揭示安装是否成功。您可以使用两个 Docker 子命令来实现这一点:`docker version`和`docker info`。
让我们从`docker version`子命令开始我们的 Docker 之旅，如下所示:
```
$ sudo docker version
Client:
 Version: 17.03.0-ce
 API version: 1.26
 Go version: go1.7.5
 Git commit: 60ccb22
 Built: Thu Feb 23 10:57:47 2017
 OS/Arch: linux/amd64
Server:
 Version: 17.03.0-ce
 API version: 1.26 (minimum version 1.12)
 Go version: go1.7.5
 Git commit: 60ccb22
 Built: Thu Feb 23 10:57:47 2017
 OS/Arch: linux/amd64
 Experimental: false  
```
虽然`docker version`子命令列出了许多文本行，但作为 Docker 用户，您应该知道以下输出行的含义:
*   客户端版本
*   客户端应用编程接口版本
*   服务器版本
*   服务器应用编程接口版本
这里，客户端和服务器都是社区版 17.03.0，客户端 API 和服务器 API 都是 1.26 版。
如果我们剖析`docker version`子命令的内部，那么它将首先列出本地存储的客户端相关信息。随后，它将通过 HTTP 对服务器进行 REST API 调用，以获取与服务器相关的详细信息。
使用`docker info`子命令了解更多关于 Docker 环境的信息:
![](img/image_01_newdockerinfo.png)
正如您所看到的，在新安装的 Docker Engine 的输出中，`Containers`和`Images`的数量总是为零。`Storage Driver`已设置为`aufs`，目录已给定`/var/lib/docker/aufs`位置。运行时间已设置为`runc`。该命令还列出了详细信息，如`Logging Driver`、`Cgroups Driver`、`Kernel Version`、`Operating System`、`CPUs`和`Total Memory`。
### 客户端-服务器通信
在 Linux 安装中，Docker 通常被编程为使用 Unix 套接字(`/var/run/docker.sock`)执行服务器-客户端通信。Docker 还有一个在 IANA 注册的港口，那就是`2375`。但是，出于安全原因，默认情况下不会启用此端口。
## 下载第一个 Docker 映像
成功安装了 Docker 引擎后，下一个逻辑步骤是从 Docker 注册表下载映像。Docker Registry 是一个托管各种应用的应用存储库，从基本的 Linux 映像到高级应用。`docker pull`子命令用于从注册表下载任意数量的映像。在本节中，我们将使用以下命令下载示例`hello-world`映像:
```
$ sudo docker pull hello-world
Using default tag: latest
latest: Pulling from library/hello-world
78445dd45222: Pull complete 
Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7
Status: Downloaded newer image for hello-world:latest 
```
下载映像后，可以使用`docker images`子命令进行验证，如下所示:
```
$ sudo docker images
REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE
hello-world latest 48b5124b2768 6 weeks ago 1.84 kB  
```
## 运行第一个 Docker 容器
现在，您可以启动第一个 Docker 容器，如下所示:
![](img/image_01_008.png)
很酷，不是吗？您很快就建立了第一个 Docker 容器。在前面的例子中，`docker run`子命令被用来从`hello-world`映像创建容器。
### Docker 容器故障排除
大多数情况下，您在安装 Docker 时不会遇到任何问题。但是，可能会出现意外故障。因此，有必要讨论突出的故障排除技术和技巧。让我们从本节讨论故障排除技巧开始。第一个提示是，应该使用以下命令检查 Docker 的运行状态:
```
$ sudo service docker status  
```
如果 Docker 服务正在运行，则`Active`列(从顶部算起的第三列)会将 Docker 服务的状态列为`active (running)`，如下所示:
![](img/image_01_009.png)
但是，如果`Active`列显示`inactive`或`maintenance`为状态，则您的 Docker 服务没有运行。在这种情况下，请重新启动 Docker 服务，如下所示:
```
$ sudo service docker restart  
```
如果您仍然遇到 Docker 设置的问题，那么您必须使用`journalctl -u docker`命令提取 Docker 日志，以便进一步调查。
## 摘要
在某种程度上，Docker 容器是虚拟机的轻量级、松散耦合和灵活的表亲。如前所述，容器能够紧凑地打包应用及其所有依赖项，并将其运送到其他地方，在开发、测试和生产环境中顺利运行。Docker 智能地利用了一些强大的内核级特性，并提供了一个不断增长的工具生态系统，用于以自动化方式实现和运行容器。最终结果是分布式应用开发人员和系统管理员的潜在游戏规则改变者。随着混合云成为全球企业对其信息技术需求的吐司，Docker 平台对企业信息技术团队来说是塞翁失马焉知非福。容器是典型的沙箱，将进程相互隔离。Docker 在推进容器化范例方面做得很好，达到了许多目的，例如轻量级包装、无摩擦运输、更快的部署和更快的软件应用交付。
下一章将更详细地介绍 Docker 容器的操作方面，特别是为了生成真实世界的 Docker 化应用而对容器的明智处理。