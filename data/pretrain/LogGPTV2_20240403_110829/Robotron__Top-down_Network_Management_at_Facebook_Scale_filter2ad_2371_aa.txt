title:Robotron: Top-down Network Management at Facebook Scale
author:Yu-Wei Eric Sung and
Xiaozheng Tie and
Starsky H. Y. Wong and
Hongyi Zeng
Robotron: Top-down Network Management at
Facebook Scale
Yu-Wei Eric Sung, Xiaozheng Tie, Starsky H.Y. Wong, and Hongyi Zeng
Facebook, Inc.
PI:EMAIL
ABSTRACT
Network management facilitates a healthy and sustain-
able network. However, its practice is not well under-
stood outside the network engineering community. In
this paper, we present Robotron, a system for manag-
ing a massive production network in a top-down fash-
ion. The system’s goal is to reduce eﬀort and errors on
management tasks by minimizing direct human inter-
action with network devices. Engineers use Robotron
to express high-level design intent, which is translated
into low-level device conﬁgurations and deployed safely.
Robotron also monitors devices’ operational state to en-
sure it does not deviate from the desired state. Since
2008, Robotron has been used to manage tens of thou-
sands of network devices connecting hundreds of thou-
sands of servers globally at Facebook.
CCS Concepts
•Networks → Network management;
Keywords
Robotron, Network Management, Facebook
1.
INTRODUCTION
“Lots of folks confuse bad management
with destiny.” — Kin Hubbard
Managing a large, dynamic, and heavily utilized net-
work is challenging. Everyday, network engineers per-
form numerous diverse tasks such as circuit turn-up and
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than the author(s) must be honored. Abstracting with credit is
permitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’16, August 22 - 26, 2016, Florianopolis , Brazil
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to
ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2934874
migration, device provisioning, OS upgrade, access con-
trol list modiﬁcation, tuning of protocol behavior, and
monitoring of network events and statistics.
Network engineers highly value judicious network man-
agement for several reasons. First, a properly conﬁg-
ured network is a prerequisite to higher-level network
functions. For example, routing protocols may not func-
tion correctly if an underlying circuit is not provisioned
as planned. Second, since network management tasks
naturally involves human interactions, they are highly
risky and can cause high-proﬁle incidents [3, 8, 9]. Fi-
nally, agile network management enables the network
to evolve quickly, e.g., adding new devices or upgrading
capacity, to support fast changing application needs.
However, the ﬁeld of network management is tradi-
tionally considered too “operational” and therefore lacks
published principles. Many challenges and lessons learned
circulate only in the network engineering community. In
practice, the time an engineer spends on the manage-
ment plane can be much longer than the control and
data planes. We outline challenges that we face in the
management plane.
Distributed Conﬁgurations: Translating high-level
intent (e.g., provisioning decisions) into distributed low-
level device conﬁgurations (conﬁgs) is diﬃcult and error-
prone due to the multitude of heterogeneous conﬁgura-
tion options involved. For instance, migrating a circuit
between routers can involve conﬁguration changes in IP
addressing, BGP sessions, interfaces, as well as “drain”
and “undrain” procedures to avoid the interruption of
production traﬃc.
Multiple domains: Large Internet-facing services,
such as Facebook, are often hosted on a “networks of
networks,” where each sub-network has unique char-
acteristics. For example, our network consists of edge
points of presence (POPs), the backbone, and data cen-
ters (DCs). The devices, topology, and management
tasks vary per sub-network. Yet, all of them must be
conﬁgured correctly in order for the entire network to
function.
Versioning: Unlike end-hosts which are statically
connected to the top-of-rack switches, network topology
Goals
Approaches (Section mentioned)
Conﬁguration-as-code
Validation
Extensibility
Minimal human input to create/update relevant objects in order to model desired network design;
simple logic available in conﬁg templates using a template language; both conﬁg templates and
generated conﬁgs are source controlled and rigorously reviewed (5.1, 5.2)
Network design constraints and rules embedded in FBNet models and network design tools (4, 5.1);
assisted massive conﬁg deployment with human veriﬁcation (5.3); ensure continuous network health
through monitoring dynamic state and static conﬁg against desired network design (4, 5.4)
Vendor-neutral models are combined with objects expressing diﬀerent generations of network archi-
tecture and vendor-speciﬁc conﬁg templates to generate conﬁgs (4, 5.1, 5.2)
Table 1: High-level summary of Robotron’s design goals.
and routing design can change signiﬁcantly over time in
diﬀerent parts of the network, requiring engineers to
simultaneously manage multiple “versions” of networks
for long periods of time. For example, Google’s data
center networks have undergone ﬁve major upgrades in
a 10-year span, each with diﬀerent topologies, devices,
link speeds, and conﬁgs [32].
Dependency: Conﬁguring network devices involves
handling tightly coupled parameters. For example, to
conﬁgure an iBGP full-mesh among all routers within a
single Autonomous System (AS), proper conﬁguration
must exist in both peers of every iBGP session. Adding
a new router into the AS means changing the conﬁgs on
all other routers. Such dependencies are laborious for
network engineers to handle.
Vendor diﬀerences: Large production networks of-
ten consist of devices from diﬀerent vendors. Despite ef-
forts to unify conﬁguration options among multiple ven-
dors [6,19], often the only way to take full advantage of
device capabilities is through vendor-speciﬁc command-
line interfaces, conﬁgs, or APIs. Conﬁguration options,
protocol implementations, and monitoring capabilities
can vary across vendor hardware platforms and OS ver-
sions, making them extremely diﬃcult to maintain.
To address these challenges, we designed and imple-
mented Robotron, a system for managing large and dy-
namic production networks. Robotron was designed to
achieve the following goals, as summarized in Table 1:
Conﬁguration-as-code: The best way to stream-
line network management tasks is to minimize human
interaction as well as the number of workﬂows. Hence,
we codify much of the logic to ensure dependencies are
followed and the outcome (device conﬁgs) is determin-
istic, reproducible, and consistent.
Validation: To avoid conﬁg errors, we built diﬀerent
levels of validation into Robotron. For example, point-
to-point IP addresses of a circuit are rejected if they
belong to diﬀerent subnets. We include human veriﬁ-
cation, in some cases, as the last line of defense. For
instance, before committing a new conﬁg to a device,
the user is presented with a diﬀ between the new and
existing conﬁg to verify all changes. After committing,
we also employ continuous monitoring to closely track
the actual network state.
Extensibility: Due to the tremendous growth of our
scaling needs, our network has constantly evolved, with
new device models, circuit types, DC and POP sites,
network topologies, etc. We strive for generic system
design and implementation, while allowing network en-
gineers to extend functionality with templates, tool con-
ﬁgurations, and code changes. This allows us to focus
on improving the system itself instead of being bogged
down by network changes.
With Robotron, we are able to minimize manual lo-
gin to any network device for management tasks. Since
2008, Robotron has been supporting Facebook’s pro-
duction network, with tens of thousands of network de-
vices connecting hundreds of thousands of servers glob-
ally. Despite the multitude of deployed architectures
throughout the years, Robotron’s core architecture has
remained stable and robust.
In this paper, we make the following contributions:
(1) We describe the challenges of large-scale network
management and give examples throughout the paper
in the hope of motivating future research in this ﬁeld.
(2) We describe the design and implementation of Robotron,
a system that employs a model-driven, top-down ap-
proach to generate and deploy conﬁgs for tens of thou-
sands of heterogeneous network devices in a large pro-
duction network. In addition, Robotron monitors de-
vice conﬁgs and operational states to ensure the net-
work conforms to the model.
(3) We report Robotron’s usage statistics, which pro-
vide insights into real-world network management tasks.
We also share our experiences using Robotron to man-
age our network and discuss open issues.
2. THE NETWORK AND USE CASES
The term “network management” may involve many
diﬀerent tasks depending on the situation. In this pa-
per, network management means keeping track of the
state of network components (e.g., switches, IPs, cir-
cuits) during their life cycle. 1Similar to many other
large Internet businesses, Facebook’s network is a “net-
1One framework for describing the network manage-
ment space is Fault, Conﬁguration, Accounting, Per-
formance, and Security (FCAPS). [5] By this deﬁnition,
Robotron covers conﬁguration, as well as some account-
ing management, with an emphasis on device and over-
all topology modeling.
Figure 1: The overview of Facebook’s network.
Figure 2: Example 4-post POP cluster. The dotted
lines represent eBGP sessions [28].
work of networks” containing multiple domains: many
edge point-of-presence (POP) clusters, a global back-
bone, and several large data centers (DC). The network
carries both traﬃc to and from external users as well as
internal-only traﬃc. Let us navigate the network (Fig-
ure 1) from the perspective of an external user as that
will highlight each of the major domains of the network
and the common management tasks.
2.1 Point-of-Presence
The production network managed by Robotron is re-
sponsible for fast and reliable delivery of large volume
of content to our users. When a user visits our ser-
vice, the request travels to one of our globally-dispersed
edge POPs via the Internet. Our POPs typically con-
tain a multi-tiered network as shown in Figure 2. The
ﬁrst tier is Peering Routers (PRs), which connect to
Internet Service Providers (ISPs) via peering and tran-
sit links and to our backbone via Backbone Routers
(BBs). From the PRs, connectivity to the POP servers
is provided by a switching fabric that consists aggrega-
tion switches (PSWs) and top-of-rack switches (TORs).
Applications running on POP servers include load bal-
ancers and caches. These POPs allow content to be
stored closer to the end user, thereby reducing latency.
Any request unable to be served by POP servers tra-
verses our backbone network to one of the DCs.
Common POP management tasks include building a
new POP, provisioning new peering or transit circuits,
adjusting link capacity, and changing BGP conﬁgura-
Figure 3: Overview of Robotron system.
tions (conﬁgs). Among these tasks, building a new POP
is the most comprehensive and will be used as the run-
ning example in Section 4 and 5.
2.2 Data Center
Each DC comprises a large number of machines host-
ing web servers, caches, databases, and backend ser-
vices. These systems collectively generate a response to
the request, which is routed back to the user through
the ingress POP. Each DC has several clusters, whose
external connectivity is provided by data center routers
(DRs). Currently, there are several versions of clusters
in production. These clusters have highly standardized
topologies with tightly-coupled device conﬁgs. The con-
ﬁgs for network devices in DCs change infrequently com-
pared to those in the POPs or in the backbone.
Cluster provisioning jobs, which involve initial de-
vice conﬁguration, cabling assignment, IP allocation,
etc, and cluster capacity upgrade are among the most
common management tasks happening in DCs.
2.3 Backbone
The backbone network provides transport among POPs
and DCs via optical transport links. Each backbone lo-
cation consists of several BBs. From a protocol perspec-
tive, both MPLS and BGP are used. We use PRs and
DRs as edge nodes to set up label-switched paths via
BBs. MPLS traﬃc engineering (MPLS-TE) tunnels are
deployed for the purposes of traﬃc management. In ad-
dition, internal BGP (iBGP) sessions are used between
PRs and DRs to exchange routing information.
It is common to augment long-haul capacity across
the backbone network with circuit additions. This re-
quires the generation and provisioning of IP interface
conﬁguration, including point-to-point addresses and bun-
dle membership. Also, due to the mesh-like nature of
both MPLS-TE tunnels and iBGP between DRs and
PRs, the deployment/removal of a new node or modiﬁ-
cation to an existing node requires conﬁguration changes
to a large number of nodes within the topology.
3. ROBOTRON OVERVIEW
As with many companies, we heavily relied on manual
conﬁguration and ad-hoc scripts to manage our network
in its early days. Since 2008, we have built FBNet, an
object store to model high-level operator intent, from
which low-level vendor-speciﬁc conﬁgs are generated,
deployed, and monitored. We refer to this process as
POPsInternetBackboneData CentersUsers20G	Internet	PSWa	PSWb	PSWc	PSWd	PR1	BB1	BB2	Agg	Core	To	TORs	and	servers	PR2	FBNetDBNetwork	DesignConfigGenerationDeploymentMonitoring“top-down” network management. Over the years, FB-
Net and the suite of network management software we
built around it have evolved to support an increasing
number of network devices and network architectures,
becoming what is known today as Robotron.
Figure 3 shows an overview of Robotron. Using FB-
Net as the foundation, Robotron covers multiple stages
of the network management life cycle: network design,
conﬁg generation, deployment, and monitoring.
FBNet: FBNet is the central repository for informa-
tion, implemented as an object store, where each net-
work component is modeled as an object. Object data
and associations are represented by attributes. For ex-
ample, a point-to-point circuit is associated with two
interfaces. The circuit and interfaces are all objects
connected via attributes of the circuit object. FBNet
serves as the single source of truth for component state,
used in the life cycle stages described below.
Network Design: The ﬁrst stage of the manage-
ment life cycle is translating the high-level network de-
sign from engineers into changes to FBNet objects. For
example, when designing a cluster, an engineer must
provide high-level topology information, e.g., number