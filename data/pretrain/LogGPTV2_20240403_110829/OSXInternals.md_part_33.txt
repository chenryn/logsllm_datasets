### Device Tree and Pseudo-HID Nodes

The following device tree nodes represent various input devices:
- `ff943ff0: /keyboard`
- `ff944788: /mouse`
- `ff944d50: /eject-key`

To navigate the device tree, you can use commands like `dev` and `pwd` to move between nodes and check your current location:

```plaintext
0 > dev mouse ok \ Go to the /mouse node
0 > pwd /pseudo-hid/mouse ok \ Confirm the current location
0 > dev .. ok \ Move up one level in the hierarchy
0 > pwd /pseudo-hid ok \ Confirm the new location
0 > dev /cpus ok \ Navigate to the /cpus node
0 > ls \ List the contents of the /cpus node
```

### Output of `ls` Command

```plaintext
ff890118: /PowerPC,G5@0
ff8905c8: /l2-cache
ff891550: /PowerPC,G5@1
ff891a00: /l2-cache
ok
```

### Device Aliases

For convenience, commonly used devices have shorthand representations or aliases. The `devalias` command lists these aliases:

```plaintext
0 > devalias
keyboard /pseudo-hid/keyboard
mouse /pseudo-hid/mouse
eject-key /pseudo-hid/eject-key
pci0 /pci@0,f0000000
ipc /ipc
scca /ht/pci@3/mac-io/escc/ch-a
nvram /nvram
uni-n /u3
u3 /u3
dart /u3/dart
...
first-boot /ht@0,f2000000/pci@7/k2-sata-root@c/k2-sata
second-boot /ht@0,f2000000/pci@5/ata-6@d/disk
last-boot /ht@0,f2000000/pci@6/ethernet
screen /pci@0,f0000000/ATY,WhelkParent@10/ATY,Whelk_A@0
ok
```

You can expand an alias to its full path using the `devalias` command followed by the alias:

```plaintext
0 > devalias hd /ht/pci@7/k2-sata-root/k2-sata@0/disk@0 ok
0 > devalias wireless /ht@0,f2000000/pci@4/pci80211@1 ok
```

### Listing Files on HFS Volumes

The `dir` command can be used to list files on an HFS Plus or HFS volume. The argument is a device path representing a volume and a path within that volume. The device path can be an alias or a complete path.

Example usage:

```plaintext
0 > dir hd:\
Size/ GMT File/Dir
bytes date time TYPE CRTR Name
12292 6/18/ 5 15:23:14 .DS_Store
131072 5/25/ 5 10: 1:30 .hotfiles.btree
16777216 5/12/ 5 1:57:11 jrnl hfs+ .journal
4096 5/12/ 5 1:57:10 jrnl hfs+ .journal_info_block
6/18/ 5 1:32:14 .Spotlight-V100
...
5/12/ 5 1:57:12 %00%00%00%00HFS+%20Private%20Data ok
0 > dir hd:\System\Library\CoreServices
Size/ GMT File/Dir
bytes date time TYPE CRTR Name
869 5/12/ 5 2:28:21 tbxj chrp .disk_label
12 5/12/ 5 2:28:21 .disk_label.contentDetails
6/ 9/ 5 4: 8:44 AppleFileServer.app
3/28/ 5 4:53:13 Automator%20Launcher.app
3/28/ 5 4:42:25 BezelUI
3/28/ 5 4:51:51 Bluetooth%20Setup%20Assistant.app
14804 3/26/ 5 22:47: 0 bluetoothlauncher
3/28/ 5 4:51:51 BluetoothUIServer.app
3/21/ 5 3:12:59 BOMArchiveHelper.app
174276 5/19/ 5 3:46:35 tbxi chrp BootX
...
```

### Node Properties, Methods, and Data

Each node in the device tree may have properties, methods, and data.

#### 4.6.1. Properties

A node's properties are externally visible data structures that describe the node and possibly its associated devices. These properties can be inspected and modified by Open Firmware client programs and procedures. The `.properties` word shows the names and values of the current node's properties.

Example for an Ethernet node:

```plaintext
0 > dev enet ok
0 > .properties
vendor-id 0000106b
device-id 0000004c
revision-id 00000000
class-code 00020000
interrupts 00000029 00000001
min-grant 00000040
name ethernet
device_type network
network-type ethernet
local-mac-address ...
gbit-phy
ok
```

Example for a CPU node:

```plaintext
0 > dev /cpus/PowerPC,G5@0 ok
0 > .properties
name PowerPC,G5
device_type cpu
reg 00000000
cpu-version 003c0300
cpu# 00000000
soft-reset 00000071
state running
clock-frequency 9502f900
bus-frequency 4a817c80
config-bus-frequency 4a817c80
timebase-frequency 01fca055
reservation-granule-size 00000080
tlb-sets 00000100
tlb-size 00001000
d-cache-size 00008000
i-cache-size 00010000
d-cache-sets 00000080
i-cache-sets 00000200
i-cache-block-size 00000080
d-cache-block-size 00000080
graphics
performance-monitor
altivec
data-streams
dcbz 00000080
general-purpose
64-bit
32-64-bridge
...
```

The `dump-properties` word can be used to show properties of all nodes in the device tree.

#### 4.6.2. Methods

A node's methods are software procedures supported by the device it represents. The `words` command shows the current node's methods:

Example for an Ethernet node:

```plaintext
0 > dev enet ok
0 > words
power-down ((open)) max-transfer block-size #blocks
dma-free dma-alloc load write flush
read close (open) open enet-quiesce
show-enet-debug? enet-base my_space ok
```

You can view the definition of a method using the `see` command:

```plaintext
0 > see flush
: flush
" enet: Flush" 1 .enet-debug restart-rxdma ; ok
```

The `dump-device-tree` word walks the entire device tree, showing each node's methods and properties.

#### 4.6.3. Data

A node may also have private data used by its methods. This data can be either instance-specific or static. Static data persists across instances.

### Packages and Support Packages

A package is the combination of a device node's properties, methods, and data. Multiple packages may implement the same interface. For example, two different network card drivers may each implement the same network device interface.

Support packages do not correspond to specific devices but provide general-purpose utility methods. They live under the `/packages` node in the device tree.

Example listing of support packages:

```plaintext
0 > dev /packages
0 > ls
ff893cc8: /deblocker
ff894618: /disk-label
ff895098: /obp-tftp
ff89fc68: /telnet
ff8a0520: /mac-parts
ff8a1e48: /mac-files
ff8a4fc0: /hfs-plus-files
ff8aa268: /fat-files
ff8ad008: /iso-9660-files
ff8ade20: /bootinfo-loader
ff8afa88: /xcoff-loader
ff8b0560: /macho-loader
ff8b33d0: /pe-loader
ff8b3dd8: /elf-loader
ff8b5d20: /usb-hid-class
ff8b8870: /usb-ms-class
ff8bb540: /usb-audio-class
ff929048: /ata-disk
```

This structure and organization allow for a flexible and powerful system for managing and interacting with hardware and software components in the firmware and bootloader environment.