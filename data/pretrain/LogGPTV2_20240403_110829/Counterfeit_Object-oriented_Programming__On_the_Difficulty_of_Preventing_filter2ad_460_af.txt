### Overview of the Effectiveness of Code Reuse Defenses and Memory Safety Techniques Against COOP

| Defense | Source/Binary | Effective Against COOP? |
|---------|---------------|-------------------------|
| CPU Debugging/Performance Monitoring Features [14], [40], [56] | - | ? |
| CPU Performance Monitoring Counters | - | ? |
| HDROP [60] | - | ? |
| WinAPI Function Hooking | - | ? |
| Microsoft EMET 5 [34] | Binary | No |
| STIR [55] | Binary | No |
| G-Free [38] | Source | No |
| XnR [7] | Binary / Source | No |
| CPI/CPS [31] | Source | No |

- **Effective Protection**: 
- **Vulnerable**: 
- **Partial Protection**: ?

**Table II: Overview of the effectiveness of a selection of code reuse defenses and memory safety techniques against COOP.**

### Control-Flow Integrity (CFI) Solutions

#### Microsoft Control-Flow Guard (CFG)
Microsoft's proprietary implementation of CFG ensures that protected indirect calls can only target a specified set of functions, which is defined in the PE header [42]. For multiple CFG-enabled modules, these sets are merged. In system libraries written in C, the set primarily includes exported functions. For C++ libraries like `mshtml.dll`, all virtual functions are included in the set and can be invoked from any indirect call site. Therefore, Microsoft CFG in its current form does not prevent COOP, nor does it likely prevent advanced ROP-based attacks such as those by Göktaş et al.

#### Forward-Edge CFI for GCC and LLVM
Tice et al. [52] proposed two variants of Forward-Edge CFI for GCC and LLVM, which aim to constrain indirect calls and jumps but not returns. One variant, C++-aware Virtual Table Verification (VTV) for GCC, restricts the targets of each vcall site according to the C++ class hierarchy, thus preventing COOP. VTV has been available in GCC since version 4.9.0. The other variant, Indirect Function-Call Checks (IFCC) for LLVM, associates each indirect call site with a set of valid target functions. A target is valid if it is address-taken and its signature is compatible with the call site. However, IFCC does not prevent COOP, as it allows for powerful COOP-based attacks in practice.

### C++-Aware CFI Solutions
Several source code-based CFI solutions exist that prevent COOP, such as GCC VTV, Safedispatch [29], and WIT [5]. Recently, three C++-aware CFI approaches for legacy binary code have been proposed: T-VIP [24], vfGuard [41], and VTint [57]. These approaches follow a similar basic approach:
1. Identification of vcall sites and vtables using heuristics and static data-flow analysis.
2. Instrumentation of vcall sites to restrict the set of allowed vtables.

- **T-VIP**: Ensures that the vptr points to read-only memory and optionally checks if a random entry in the vtable points to read-only memory.
- **VTint**: Copies identified vtables into a new read-only section and instruments vcall sites to check if the vptr points into that section.
- **vfGuard**: Instruments vcall sites to check if the vptr points to the beginning of any known vtable, significantly restricting the set of available vfgadgets but still not reliably preventing COOP.

### Heuristics-Based Detection
Microsoft EMET [34] is a widely deployed exploit mitigation tool that implements various heuristics-based strategies for detecting ROP. Other related heuristics-based defenses utilize debugging features available in modern x86-64 CPUs [14], [40], [56]. These defenses have been shown to be ineffective against more advanced ROP-based attacks [11], [16], [26], [43]. Similarly, HDROP [60] uses performance monitoring counters to detect ROP-based attacks, but it is unlikely to be effective against COOP.

### Code Hiding, Shuffling, or Rewriting
- **STIR [55]**: Randomly reorders basic blocks in an application on each startup, making the whereabouts of gadgets unknown. This does not affect COOP as it only requires knowledge of vtables.
- **Execute-no-Read (XnR) [7]**: Prevents code pages from being read, but a JIT-COOP attack could still read out vtables and RTTI metadata.
- **G-Free [38]**: Produces x86 native code without unaligned indirect branches and encrypts return addresses on the stack. While effective against many advanced ROP-based attacks, it does not affect COOP.

### Memory Safety
Memory safety systems for C/C++ applications [4]–[6], [13], [31], [36], [45] can provide strong defenses against control-flow hijacking attacks. However, since our adversary model assumes an initial memory corruption and information leak, we do not explore these systems in detail. Two recent approaches, Code-Pointer Integrity (CPI) and Code-Pointer Separation (CPS), are discussed. CPS does not prevent COOP as it does not require the injection or manipulation of code pointers.

### Related Work
Recent advanced ROP-based attacks [11], [16], [25], [26], [43] have bypassed certain coarse-grained CFI systems and heuristics-based systems. We are the first to demonstrate bypasses of the latest defenses, including CPS [31], T-VIP [24], vfGuard [41], and VTint [57], and the concept of coarse-grained CFI + shadow call stack [3].

### Conclusion
In this paper, we introduced Counterfeit Object-Oriented Programming (COOP), a novel code reuse attack technique that bypasses almost all CFI solutions and many other defenses that do not consider object-oriented C++ semantics. Our results highlight the need for future defenses to take into account higher-level programming language-specific semantics, particularly in the assessment of defenses that rely solely on binary code.

### Acknowledgment
We thank the anonymous reviewers and Herbert Bos for their constructive comments. This work was supported by the German Federal Ministry of Education and Research (BMBF), the German Science Foundation, and the European Union's Seventh Framework Programme.

### References
[References listed as provided in the original text]

This optimized version provides a clearer, more structured, and professional presentation of the content.