# 用 protobuf & AFLplusplus 进行简易 CTF 自动化 fuzz
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 一、简介
看 [fuzz 的结构感知](https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md) 时遇到了 protobuf，觉得很有意思，于是尝试使用 protobuf 来进行快速简易的 CTF fuzz。
以下以 [TCTF2021-babyheap2021](https://ctftime.org/task/16415) 为例，来简单说明一下自动化步骤。
这里主要用到以下项目：
  * [AFL++](https://github.com/AFLplusplus/AFLplusplus)，其中的 qemu mode + qasan
  * [afl-libprotobuf-mutator](https://github.com/thebabush/afl-libprotobuf-mutator)
需要注意的是，该 fuzz 目前处于实验性版本，可能不太稳定，仅作为学习研究使用。
## 二、操作流程
###  1\. 下载依赖
git clone 下 AFL++ 和 afl-libprotobuf-mutator （链接在上面）即可。
###  2\. 配置 afl-libprotobuf-mutator
  * 首先，用 ida64 打开 babyheap2021, F5阅读伪代码并总结其输入模板，最后用 protobuf 描述输入结构：  
> 这类菜单题的输入模板大体上比较固定，下面的代码随便改改就能换一道题目用用。
代码编写完成后，覆盖保存至 `afl-libprotobuf-mutator/gen/out.proto`。注意 **路径必须完成一致** ，若遇到重名文件
out.proto 则直接替换。
> 如果不会写 protobuf 描述的话，可以看看这个 [Protocol Buffers
> Tutorials](https://developers.google.com/protocol-buffers/docs/tutorials)。
        // out.proto
    syntax = "proto2";
    package menuctf;
    message AllocChoice {
      required int32 choice_id = 1 [default=1];
      required int32 size = 2;
      required string content = 3;
    }
    message UpdateChoice {
      required int32 choice_id = 1 [default=2];
      required int32 idx = 2;
      required int32 size = 3;
      required string content = 4;
    }
    message DeleteChoice {
      required int32 choice_id = 1 [default=3];
      required int32 idx = 2;
    }
    message ViewChoice {
      required int32 choice_id = 1 [default=4];
      required int32 idx = 2;
    }
    message ExitChoice {
      required int32 choice_id = 1 [default=5];
    }
    // Our address book file is just one of these.
    message ChoiceList {
      message Choice {
        oneof the_choice{
          AllocChoice alloc_choice = 1;
          UpdateChoice update_choice = 2;
          DeleteChoice delete_choice = 3;
          ViewChoice view_choice = 4;
          ExitChoice exit_choice = 5;
        }
      }
      repeated Choice choice = 1;
    }
  * 到了这里，我们需要理一理思路。对于CTF题来说，大多都是直接从 stdin 中获取输入的 **文本数据** 。因此首先，我们需要编写 `Protobuf::Message` 转 **常规输入字符串** 的代码： 
        void ProtoToDataHelper(std::stringstream &out, const google::protobuf::Message &msg) {
      const google::protobuf::Descriptor *desc = msg.GetDescriptor();
      const google::protobuf::Reflection *refl = msg.GetReflection();
      const unsigned fields = desc->field_count();
      // std::cout field(i);
        // 对于单个 choice
        if (field->cpp_type() == google::protobuf::FieldDescriptor::CPPTYPE_MESSAGE) {
          // 如果当前是 choice list
          if (field->is_repeated()) {
            const google::protobuf::RepeatedFieldRef &ptr = refl->GetRepeatedFieldRef(msg, field);
            // 将每个 choice 打出来
            for (const auto &child : ptr) {
              ProtoToDataHelper(out, child);
              out HasField(msg, field)) {
            const google::protobuf::Message &child = refl->GetMessage(msg, field);
            ProtoToDataHelper(out, child);
          }
        } 
        // 对于单个 field
        else if (field->cpp_type() == google::protobuf::FieldDescriptor::CPPTYPE_INT32) {
          out GetInt32(msg, field);
          if(i cpp_type() == google::protobuf::FieldDescriptor::CPPTYPE_STRING) {
          out GetString(msg, field);
          if(i  需要注意的是，这一整个 `extern "C"` 的代码以及内部用到的 `ProtoToDataHelper` 函数的代码，必须全部放在 `afl-> libprotobuf-mutator/src/mutate.cc` 中。
>
> 由于 afl-libprotobuf-mutator 较为久远，因此大部分 AFL++ 相关的接口需要修改亿下。
        // AFLPlusPlus interface
    extern "C" {
      static std::default_random_engine engine_pro;
      static std::uniform_int_distribution dis(0, UINT32_MAX);
      void *afl_custom_init(void *afl, unsigned int seed) {
        #pragma unused (afl)
        engine_pro.seed(seed);
        return nullptr;
      }
      void afl_custom_deinit(void *data) {
        assert(!data);
      }
      // afl_custom_fuzz
      size_t afl_custom_fuzz(void *data, unsigned char *buf, size_t buf_size, unsigned char **out_buf, 
                             unsigned char *add_buf, size_t add_buf_size, size_t max_size) {
        #pragma unused (data)
        #pragma unused (add_buf)
        #pragma unused (add_buf_size)
        static uint8_t *saved_buf = nullptr;
        assert(buf_size <= max_size);
        uint8_t *new_buf = (uint8_t *) realloc((void *)saved_buf, max_size);
        if (!new_buf) {
          *out_buf = buf;
          return buf_size;
        }
        saved_buf = new_buf;
        memcpy(new_buf, buf, buf_size);
        size_t new_size = LLVMFuzzerCustomMutator(
          new_buf,
          buf_size,
          max_size,
          dis(engine_pro)
        );
        *out_buf = new_buf;
        return new_size;
      }
      size_t afl_custom_post_process(void* data, uint8_t *buf, size_t buf_size, uint8_t **out_buf) {
        #pragma unused (data)
        // new_data is never free'd by pre_save_handler
        // I prefer a slow but clearer implementation for now
        static uint8_t *saved_buf = NULL;
        menuctf::ChoiceList msg;
        std::stringstream stream;
        // 如果加载成功
        if (protobuf_mutator::libfuzzer::LoadProtoInput(true, buf, buf_size, &msg)) {