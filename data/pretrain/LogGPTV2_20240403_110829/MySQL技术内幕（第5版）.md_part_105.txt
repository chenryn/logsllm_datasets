文件复制到数据目录下的mysql数据库目录里。然后，重启服务器。
一组预先构建的包含时区信息的MyISAM表：
时区文件集的Windows系统或其他系统，可以通过下面这个网址获得一个压缩包，其中包含有
文件位于/usr/share/zoneinfo目录，那么把它们加载到mysql数据库的语句将如下所示：
程序读取这些文件，根据其内容构造SQL语句，并把这些语句送入mysql程序执行。如果时区
系统里手动填充那些时区表，需要确定这些文件的安装目录。然后，使用mysql_tzinfo_to_sql
程中，这个操作不会自动完成，因为MySQL只创建表，而不加载表。要想在带有时区文件的
为此需要把操作系统时区文件里的信息加载到 mysql数据库的一组表里。在 MySQL 的安装文
会对会话值进行设置。如果你拥有 SUPER权限，则可以使用GLOBAL来设置全局值。
默认的字符集和排序规则分别为latin1和latin1_swedish_ci。要想在服务器启动时更
在运行客户端程序的时候，可以通过--default-character-set 选项来指明它所使用的
Cmake-DDEFAULT_CHARSET=utf8\
如果是根据源代码来建立服务器，那么可以在运行CMake 时通过选项 DEFAULT_CHARSET
%mysqld--character_set_server=utf8\
字符集决定了允许出现在字符串里的字符。MySQL支持多种字符集，你可以在服务器、数
把压缩包下载回来，并解压。在MySQL服务器停止的情况下，把那些，frm、.MYD 和.MYI
在加载完这些表之后，需要重启服务器。这种方法适用于绝大多数的Unix版本。对于没有
要想使用最后一种方法（即通过名字来设置时区），就必须让服务器能够理解时区的名字，
变量time_zone 可接受三种类型的值，其中一种还需要额外的管理动作。下面给出的语句
http://dev.mysql.com/downloads/timezones.html
口
口
口要想使用system_time_zone的值，可以把time_zone设置为sySTEM：
SELECT @@GLOABL.time_zone,@@SESSOIN.time_zone;
要想确定当前的全局和会话级时区值，可以使用下面这条语句：
SET SESSION time_zone =SYSTEM';
.  
要想引用区域设置，可以使用命名时区：
SET
要想指定相对于UTC（协调世界时）的偏移值，可以使用带正负号的小时和分钟格式：
-DDEFAULT_COLLATION=utf8_icelandic_ci
-collation_server=utf8_icelandic_ci
SESSION time_zone
SESSION
SESSION
time
zone
='Asia/Jakarta';
CST6CDT"
#UTC
UTC
后11小时
前3小时
12.6全球化问题
441
过
---
## Page 462
直接的影响。这些优化有助于提高服务器的整体性能，从而为所有的MySQL用户带来好处。
整操作。例如，可以调整与查询处理有关的服务器参数，某些硬件配置因素对查询处理速度有
12.7
下面这样的结果：
来改写默认值。例如，在启动服务器时将1c_time_names 设置为es_Es（西班牙语)，会得到
行时设置 1c_time_names 的值。各个客户端可以通过在运行时设置1c_time_names 的会话值
的值会对许多时态函数（如DAYNAME（）、MONTHNAME（）和DATE_FORMAT（））的结果产生影响。
12.6.4选择区域设置
示本地化出错信息时，这种做法就很实用。
的会话值，以选择另一种语言。当同一服务器的不同客户端需要以不同于默认值的某种语言显
目录下，可以像下面这样启动服务器：
为正确的路径。例如，想要把出错信息显示为德语，并指明出错信息位于/var/mysql/share
果默认目录不正确（默认为MySQL安装目录的 share 目录)，需要将1c_messages_dir设置
lc_messages_dir指出的目录中查找该语言的子目录，从而找到包含出错信息文件的目录。女
en_US 对应于英语，de_DE 对应于德语。服务器会将区域设置名称转换为语言名称，并在变量
的名字正好与各种可用的语言相对应。
要想知道有哪些语言可以选用，可以查看MySQL安装目录下的share目录。其中，各子目录
12.6.3选择出错信息的显示语言
的详细信息请参考第3章。
项来告知客户端程序具体的位置。
字符集。如果在客户端程序默认的位置未找到字符集文件，可以用--character-sets-dir选
442
对MySQL服务器以及运行它的那台机器拥有控制权限的管理员，可以进行一些优化或调
默认的区域设置为en_US（英语）。要想选择一个不同的区域设置，可以在服务器启动或运
MySQL服务器依靠系统变量1c_time_names 来决定如何显示月份和日期的名称。该变量
要想指定出错信息的显示语言，可以把系统变量1c_messages配置为适当的区域设置，
更多与MySQL里字符集功能有关的信息请参考2.4节。关于创建字符型列和如何使用它们
如果某个客户端想要设置为意大利语，可以像下面这样做：
MySQL服务器可以用多种语言显示诊断信息与出错信息。默认语言为english（英语）。
mysql>SET lc_time_names='it_IT';
也可以在服务器启动时设置这两个系统变量。单个客户端可以在运行时设置1c_messages
%mysqld--lc_messages=de_DE--lc_messages_dir=/var/mysql/share
luglio
MONTHNAME(2000-07-01*)
julio
MONTHNAME('2000-07-01*)
第12章MySQL的基本管理
服务器调整
===
如
如
---
## Page 463
但可以提高系统的整体性能，防止MySQL服务器占用系统资源，从而损害到其他进程。
系统能力有限，则可以告知服务器使用更小一点的缓冲区。这样可能会使服务器运行得更慢，
一点的缓冲区。这样可以在内存里存放更多的信息，从而减少所需的磁盘访问次数。如果你的
对其操作进行影响。如果你有足够的内存，便可以让服务器针对磁盘操作和索引操作使用更大
12.7.1
盘信息的速度快。
间地保留在内存里，从而减少磁盘活动。这种做法非常好，因为访问内存信息的速度比读取磁
储引擎缓存。如果你还有可用的内存空间，可以将它分配给服务器的缓存，让信息能够更长时
MySQL服务器有很多可修改的系统变量（如那些控制内存缓冲区大小的变量），使你能够
 max_connections
back_log
下面列出的这几个系统变量能满足常见的性能调整需要。
口保持简单的访问权限。虽然服务器会将权限表的内容缓存在内存中，但是如果你在mysql
口
让服务器操作变得更有效的其他策略还包括有以下几种。
口请不要在MySQL的生产服务器上进行参数调整的试验，
口MySQL服务器会将查询结果缓存起来，当处理重复的查询时，可以不用再次执行它们。相
接下来的几节将讨论几种用于优化服务器操作的方法。
可以更改的最重要的参数是各个缓存的大小，如用于缓冲索引操作相关信息的表缓存和存
口
口
口
口保留索引的信息比保留行的内容重要。
口将数据保存在内存里，尽可能减少磁盘活动。
口访问内存数据的速度比访问磁盘数据的速度快。
当进行管理优化时，请牢记以下几项原则。
测试服务器。
可能会耗光系统资源，从而导致系统因为你将变量值设置得过高而变得异常快或异常慢。
口
在处理当前连接时，排队等待连接的最大请求数。如果你的网站非常繁忙，就需要在客户端
禁用不需要的存储引擎。服务器不会为禁用的存储引擎分配内存，你可以将它用于其他月
一次只更改一个参数。如果同时修改多个变量，则很难对每个更改所产生的影响进行评估。
系统变量设置有关的一般性说明请参考12.3.1节。当更改参数值时，请遵循下面这些指导。
口有些参数会影响总体性能，与之相关的信息请参考12.7.1节。
服务器支持的最大客户端并发连接数。如果服务器很忙，则可能需要增大这个值。例如，有
连接变得很慢时，增大 back_log 的值。
限级别，从而优化权限检查。相关信息请参考13.4.2节。
SQL语句的权限时，一定会检查它们的内容。如果这些表为空，那么服务器会跳过这些权
数据库的tables_priv、columns_priv或procs_priv表里放置行，那么服务器在检查
项被禁用。相关细节请参考12.5.1节。
务器的二进制程序里。许多包含在服务器里的存储引擎都可以在运行时通过相应的启动选
途。如果通过源代码来构建MySQL，那么大部分的存储引擎在配置时便可以不用包含在服
逐步增大系统变量值。如果大幅度调整某个变量的值，虽然在理论上是越大越好，但是你
有几个硬件因素会对MySQL的行为产生影响。相关信息请参考12.7.4节。
关信息请参考12.7.3节。
息请参考12.7.2节。
各个存储引擎都有它们自己的参数，你可以利用这些参数来对它们进行配置。相关信
用于服务器调整的通用型系统变量
，比较稳妥的做法是建立一个单独的
12.7服务器调整
443
用
---
## Page 464
444
口
口
口
max_allowed_packet=16M
16 MB，可以把下面这些行添加到服务器的选项文件里：
在服务器端和客户端增加这个变量的值。例如，在启动服务器时想要将包的大小限制为
服务器发送了很长的语句（如包含有大块 BLOB或TEXT值的语句)，那么可能需要同时
客户端 mysql 和 mysqldump 都拥有自己的 max_allowed_packet 变量。如果客户端向
处理更大的数据包时发生错误。数据包缓冲区的内存只在需要时才分配。
用于客户端通信的那个缓冲区的最大大小可以增大。默认缓冲区大小为1MB。
max_allowed_packet
分散到所有的服务器。这样可以减少主服务器对客户端的负载和文件描述符的要求。
(参考14.8节)。所有的更新都应该被导向主服务器，但是来自客户端的单纯的检索请求可以
突破单个进程文件描述符限制的解决办法是：为MySQL主服务器建立一个或多个从服务器
述文件并以重建内核的方式进行。请查询系统文档，以了解如何进行处理。
地通过编辑系统描述文件并重启的方式来进行。其他一些系统的配置则必须通过编辑内核描
可能就需要对操作系统进行配置，以允许使用更多的文件描述符。有些系统的配置可以简单
置open_files_limit变量。如果采用这种方式无法把打开文件的数量限制设置得足够高，
限制。在这种情况下，你需要增大这个限制，或者想办法解决它。首先，尝试为mysqld设
符。这样可能会导致许多问题，因为操作系统对每个进程所能使用的文件描述符数量进行了
如果增大max_connections 或table_open_cache 的值，服务器会需要更多的文件描述
open_files_limit
的大小。
这个系统变量控制着存储表定义（源自.frm文件的信息，
如果增大 table_open_cache 的值，还需要考虑增大 table_definition_cache 的值。
[mysqld]
table_definition_cache
这种性能拖累。
这些更改保存到磁盘时，关闭该表就要付出特别大的代价。大一点的表缓存可以有效地缓解
很缓慢，那么这个设置值可能就恰到好处。如果这个数字迅速增大，则意味着缓存太小，为
status 命令的输出里，这个值也会显示为Opens 值。）如果这个数字保持稳定或者增加得
Opened_tables 表明了表被打开过的次数，因为它已不在打开状态。（在mysqladmin
SHOW STATUS LIKEOpened_tables';
要想评估表缓存的有效性，可以检查Opened_tables 状态指示器：
cache 的值，让表缓存变得更大一点，就能让 mysqld 同时开着更多的表。
那么这个值也可能太小。如果还有可用的文件描述符，那么增大系统变量table_open
innodb_file_per_table那样的功能，或者使用了会增加所需文件描述符数量的分区表,
表缓存的默认大小为400。对于一个繁忙的服务器来说，这个值可能太小。如果使用了诸如
和文件关闭操作的数量。为做到这一点，它会在一个表缓存里存放与所有打开文件有关的信
当服务器打开表文件时，会试图将它们保持在打开状态，以减少必须要完成的文件打开操作
打开的最大连接数，可以使用 SHOW STATUS 检查状态变量Max_used_connections。）
当此变量的值设置过低时，
值
段
第12章MySQL的基本管理
直为1GB。这个变量并不是一个与性能密切相关的参数，但是把这个值调大，
给其他表腾出空间，必须频繁地关闭一些表。尤其是在表的内容已被更改，并到了必须将
时间未使用的表，从而为那些新打开的表腾出空间。
息。如果服务器访问了大量表，那么这个表缓存可能会被填满，服务器会关闭那些在最近一
，网站的访问者可能会发现他们的请求被拒绝。（要想确定已同时
，在打开表时会用到它们）的缓存
，可以防止在
允许的最大
单
作
---
## Page 465
操作。
因为访问内存的速度比访问磁盘的速度要快得多。缓存还可以同时减少读和写带来的磁盘IO
中”。缓存的目的在于减少对磁盘的访问（即尽量减少请求缺失的比率)。它能大大提高性能，
键缓冲)，但是每个操作的一般原则都是相同的。
表信息的缓存。与存储引擎的一般配置有关的信息请参考12.5节。
存储引擎InnoDB和MyISAM中最为重要的与性能相关的资源，即每个引擎在内存中用于缓冲
12.7.2
话系统变量之间的差别有关的信息请参考12.3.1节。
持这些值不变，并假设各个客户端会根据需要把这些变量的会话值加大。与全局系统变量和会
时进行连接并运行复杂语句的客户端，以便可以对服务器内存需求的真实效果进行评估。
及
小。如果容
只有这样，才能对每一次更改的效果进行评估，减少性能严重下降的可能性。此外，一定要
变
时
变
么加大这些变量的全局值，可能会导致服务器的资源占用总量急剧上升。为改善性能，可以把
各个存储引擎表信息缓存拥有不同的名字（在InnoDB中叫做缓冲池；在MyISAM中叫做
对于那些控制着每个客户端分配到的缓冲区大小的变量，不用增加其全局值的做法是：保
多个表的连接操作，那么它便会同时需要多个连接缓冲区。）因此，测试条件应该使用多个同
区才会被分配。join_buffer_size变量控制着两个表进行连接时所使用的那个缓冲区的大
有在需要时才分配。例如，对于某个客户端，只有在它执行带有排序操作的查询时，排序纟
使用真实的测试条件来验证。服务器不是在客户端刚一连接上时就分配这些缓冲区的，而是
请不要把每个会话缓冲区的大小一次增加得太大，最好是能逐步加大，并对更改进行测试
量的值设置得过大，系
使用的缓冲区大小。不过，要小心：每一个会话都会被分配这些缓冲区，因此如果把这两
量read_buffer_size和 sort_buffer_size的值加大。它们分别决定了在读取和排序操
如果在缓存中找不到请求的值，即值“缺失”，那么必须从磁盘读人。如果能找到，即为“命
有些存储引擎带有调整参数，你可以利用它们来获得最佳的服务器负载效果。本节将讨论
口如果选择丢弃的缓存块未被修改过，那么它的内容会被新读入的值覆盖。否则，在这个缓
口如果缓存在必须读入新值时已满，则必须丢弃旧的信息，以便为新信息腾出空间。默认情
口
口开始时，缓存为空。
有些变量控制的资源是按每个客户端来分配的。如果同时有大量的客户端连接服务器，那
存块被覆盖之前，其内容必须被存回到原来的那个表。
掉那些最近最不可能再次需要的缓存块。
存储引擎会选择那些未被使用时间最长的缓存块。这样可以保留频繁使用的缓存块，而丢
况下，每个存储引擎会基于最近最少使用（LRU）算法来确定要丢弃的缓存块。也就是说，
已读入，则服务器会查询内存中的值。否则，存储引擎表会把内容从磁盘读到缓存。
当服务器在语句执行期间必须检查表的信息时，它会检查该信息是否已经读入缓存。如果
max_allowed_packet=16M
[mysqldump]
max_allowed_packet=16M
要想一直使用这些设置，可以把下面这些行添加到选项文件里：
[mysql]