(cid:23)(cid:31)(cid:37)(cid:30)(cid:21)(cid:1)(cid:31)(cid:30)(cid:1)(cid:32)(cid:37)(cid:19)(cid:28)(cid:26)(cid:20)
(cid:32)(cid:25)(cid:31)(cid:36)(cid:31)(cid:35)(cid:1)(cid:31)(cid:23)(cid:1)(cid:23)(cid:34)(cid:26)(cid:22)(cid:30)(cid:21)(cid:35)
(cid:15)(cid:22)(cid:18)(cid:20)(cid:25)(cid:18)(cid:19)(cid:28)(cid:22)(cid:1)(cid:19)(cid:39)(cid:1)(cid:12)(cid:18)(cid:20)(cid:22)(cid:19)(cid:31)(cid:31)(cid:27)
(cid:4)(cid:9)(cid:8)(cid:8)(cid:3)(cid:1)(cid:31)(cid:23)(cid:1)(cid:36)(cid:18)(cid:24)(cid:24)(cid:22)(cid:21)(cid:1)(cid:32)(cid:25)(cid:31)(cid:36)(cid:31)(cid:35)(cid:5)
Figure 2: Attack tree to estimate the vulnerable Facebook population. Not all the branches are complete, as we consider only the
events that are relevant to the case study.
(cid:9)(cid:14)(cid:11)(cid:12)(cid:1)(cid:2)
(cid:5)(cid:19)(cid:3)(cid:24)(cid:13)(cid:1)
(cid:23)(cid:11)(cid:5)(cid:21)(cid:11)(cid:14)(cid:2)(cid:20)(cid:1)
(cid:8)(cid:19)(cid:11)(cid:7)(cid:15)(cid:6)(cid:1)(cid:13)(cid:11)(cid:20)(cid:21)
(cid:11)(cid:13)(cid:12)(cid:16)(cid:13)(cid:14)(cid:2)(cid:15)(cid:1)(cid:10)(cid:5)(cid:3)
(cid:10)(cid:7)(cid:5)(cid:21)
(cid:10)(cid:5)(cid:3)(cid:15)
(cid:10)(cid:7)(cid:5)(cid:21)
(cid:9)(cid:14)(cid:11)(cid:12)(cid:1)(cid:4)
(cid:17)(cid:10)(cid:16)(cid:21)(cid:16)(cid:1)
(cid:5)(cid:16)(cid:13)(cid:13)(cid:7)(cid:5)(cid:21)(cid:11)(cid:16)(cid:15)(cid:1)
(cid:3)(cid:15)(cid:6)(cid:1)(cid:14)(cid:16)(cid:6)(cid:7)(cid:13)(cid:11)(cid:15)(cid:9)
(cid:10)(cid:7)(cid:5)(cid:21)
(cid:10)(cid:7)(cid:5)(cid:21)
(cid:9)(cid:14)(cid:11)(cid:12)(cid:1)(cid:3)
(cid:9)(cid:14)(cid:11)(cid:12)(cid:1)(cid:5)
(cid:11)(cid:20)(cid:20)(cid:22)(cid:7)(cid:1)
(cid:4)(cid:7)(cid:8)(cid:19)(cid:11)(cid:7)(cid:15)(cid:6)(cid:1)
(cid:19)(cid:7)(cid:18)(cid:22)(cid:7)(cid:20)(cid:21)(cid:20)
(cid:3)(cid:6)(cid:11)(cid:12)(cid:14)(cid:1)(cid:17)(cid:19)(cid:13)(cid:14)(cid:16)(cid:2)(cid:1)(cid:10)(cid:7)(cid:5)(cid:4)
(cid:15)(cid:3)(cid:14)(cid:7)
(cid:13)(cid:16)(cid:16)(cid:12)(cid:22)(cid:17)
(cid:8)(cid:23)(cid:14)(cid:20)(cid:24)
(cid:7)(cid:8)(cid:3)(cid:4)(cid:6)(cid:9)
(cid:6)
(cid:9)(cid:23)(cid:15)(cid:15)(cid:14)(cid:21)(cid:22)(cid:14)(cid:13)
(cid:18)(cid:11)(cid:17)(cid:14)(cid:21)
(cid:10)(cid:8)(cid:7)(cid:13)
Figure 3: Overview of our automated SA-breaking system. It operates in four steps. In Step 1 we retrieve the victim’s friend list
using his or her UID. Then, in Step 2 (optional), we send befriend requests, so that we have more photos to extract faces from and
build face classiﬁers in Step 3. In Step 4, given a photo, we query the models to retrieve the corresponding UID and thus match a
name to face.
requests. We implement the crawling procedures using Python’s
urllib HTTP library and regular expression matching to scrape
Facebook pages and extract content. We store the retrieved data in
a MongoDB database, a lightweight, distributed document-oriented
storage suitable for large data collections, and keep the downloaded
photos in its GridFS ﬁlesystem.
3.1.2 Step 2: Issuing Friend Requests
An attacker can use legitimate-looking, dummy proﬁles to send
friendship requests to all of the victim’s friends. As shown in Fig. 2,
this step can expand the attack surface by increasing the reachable
photos. We implement a procedure that issues befriend requests
via the fake accounts we have created for our experimental eval-
uation (see §4.1). Even though we do not collect any private in-
formation or photos of these users for our experiments, we need
an adequate number of friends in our accounts to be able to trig-
ger the SA mechanism. We select users for our requests, based
on the friends suggested by Facebook. Also, as shown by Irani et
al. [14], to achieve a high ratio of accepted friend requests, we cre-
ate proﬁles of attractive women and men with legitimate-looking
photos2 (i.e., avoiding the use of provocative or nudity photos). In
addition, we inject some random proﬁle activity (e.g., status mes-
sages, like activities). If Facebook triggers CAPTCHA challenges
2We selected photos from a database of models.
at some point, our system prompts a human operator to intervene.
However, Bilge et al. [4] have demonstrated the use of automated
systems against the CAPTCHA countermeasure. Moreover, to hin-
der spammers, Facebook limits the number of friend requests each
proﬁle is allowed to issue in a short period of time and enforces a
“cooldown” period of two days on misbehavior. To overcome this
obstacle and still have proﬁles with an adequate amount of friends,
we spread our friend requests over a period of one week. We also
noticed that for proﬁles that have education and employment infor-
mation and send requests to people within these circles, Facebook
enforces more relaxed thresholds and allowed us to send close to
100 requests in a single day. In addition, the method described by
Irani et al. [14] allows to increase the number of friends passively
as opposed to requesting friendships explicitly.
3.1.3 Step 3: Photo Collection/Modeling
Step 3.1: Photo collection We collect the URLs of all the photos
contained in the albums of the target’s friends using the same
screen-scraping approach that we described in Step 3.1.1. We
then feed the collected URLs into a simple module that does
the actual download. This module stores in the database
the metadata associated with each downloaded photo: URL,
UID of the owner, tags and their coordinates (in pixels).
403
Step 3.2: Face Extraction and Tag Matching We scan each down-
loaded photo to ﬁnd faces. Speciﬁcally, we use a face detec-
tion classiﬁer part of the OpenCV toolkit3. There are plenty
of face detection techniques available in the literature, more
precise than the one that we decided to use. However, our
goal is to show that face-based SA offers only a weak protec-
tion, because even with simple, off-the-shelf tools, an adver-
sary can implement an automated attack that bypasses it.
Subsequently, we label each face with the UID of the nearest
tag found in the adjacent 5%-radius area, calculated with the
euclidean distance between the face’s center and the tag’s
center. Unlabeled faces and tags with no face are useless,
thus we discard them. We save the selected faces as grayscale
images, one per face, resized to 130 × 130 pixels.
Step 3.3: Facial Modeling We use the sklearn library4 to con-
struct a supervised classiﬁer. We ﬁrst preprocess each face
via histogram equalization to ensure uniform contrast across
all the samples. To make the classiﬁcation job feasible with
these many features (i.e., 130 × 130 matrices of integers), we
project each matrix on the space deﬁned by the 150 princi-
pal components (i.e., the “eigenfaces”). We tested K-nearest-
neighbors (kNN), tree, and support-vector (with a radial-basis
kernel) classiﬁers using a K-fold cross-validation technique.
We found that support-vector classiﬁers (SVC) yield the high-
est accuracy, but are very expensive computationally. There-
fore, we use kNN classiﬁers, with k = 3 as they provide a
faster alternative to SVC with comparable accuracy.
3.1.4 Step 4: Name Lookup
When Facebook challenges our system with a SA test, we sub-
mit the photos from the SA test to the classiﬁer, which attempts to
identify the depicted person and select the correct name. We detect
the faces in each of the 7 photos of an SA page and extract the 150
principal components from each face’s 130× 130 matrix. Then, we
use the classiﬁer to predict the class (i.e., the UID) corresponding
to each unknown face, if any. If, as in the case of Facebook, a list
of suggested names (i.e., UIDs) is available, we narrow its scope to
these names. Then, we query the classiﬁer and select the outcome
as the correct UID for each unknown face, choosing the UID that
exhibits more consensus (i.e., more classiﬁers output that UID) or
the highest average prediction conﬁdence.
3.2 Face Recognition as a Service
Automatic face recognition is approaching the point of being
ubiquitous: Web sites require it and users expect it. Therefore, we
investigate whether we can employ advanced face recognition soft-
ware offered as a cloud service. We select face.com which offers a
face recognition platform for developers to build their applications
on top of. Incidentally, face.com was recently acquired by Face-
book5. The service exposes an API through which developers can
supply a set of photos to use as training data and then query the
service with a new unknown photo for the recognition of known in-
dividuals. The training data remains in the cloud. Developers can
use up to two different namespaces (i.e., separate sets of training
data) each one able to hold up to 1,000 users, where each user may
be trained with a seemingly unbound number of photos. Usage of
the API is limited to 5,000 requests an hour. Such a usage frame-
work may be restrictive for building popular applications with thou-
sands of users but it is more than ﬁtting for the tasks of an adversary
3http://opencv.itseez.com/
4http://scikit-learn.org
5http://face.com/blog/facebook-acquires-face-com/
UIDs
Not tagged
Tagged
TOTAL
236,752
116,164
120,588
Mean tags per UID:
PUBLIC
167,359
73,003
94,356
19.39
PRIVATE
69,393
43,161
26,232
10.58
Tags9
Photos
Albums
2,107,032
1,829,485
277,547
16,141,426
16,141,426
(not collected)
805,930
805,930
(not collected)
Table 1: Summary of our collected dataset. The terms “public”,
and “private” are deﬁned in §4.1.
seeking to defeat photo-based social authentication. Assuming the
free registration to the service, one may create a training set for up
to 1,000 of a victim’s friends (the max limit for Facebook is 5,000
although the average user has 190 friends). After that, one can reg-
ister more free accounts or simply delete the training set when no
longer necessary and reclaim the namespace for a new one. We de-
velop a proof-of-concept module for our system that leverages the
face.com API as an alternative, service-based implementation of
steps 3 and 4 from Fig. 3. We submit the photos to the service via
the faces.detect API call to identify any existing faces and de-
termine whether they are good candidates for training the classiﬁer.
The next step is to label the good photos with the respective UIDs
of their owners (tags.save). Finally we initiate the training on
the provided data (faces.train) and once the process is complete
we can begin our face recognition queries—the equivalent of step 4
from Fig. 3. Once the training phase is ﬁnished, the service is able
to respond within a couple of seconds with a positive or negative
face recognition decision through the faces.recognize call. We
take advantage of the ability to limit the face matching to a group
of uids from the training set and we do so for the suggested names
provided by Facebook for each SA page.
4. EXPERIMENTAL EVALUATION
Here we evaluate the nature of Facebook’s SA mechanism and
our efforts to build an automated SA solving system. We ﬁrst assess
the quality of our dataset of Facebook users (§4.1). We consider
this a representative sample of the population of the online social
network. We have not attempted to compromise or otherwise dam-
age the users or their accounts. We collected our dataset as a casual
attacker would do. Next we evaluate the accuracy and efﬁciency
of our attack. In §4.2 we use simulation to play the role of a de-
termined attacker, who has access to the majority of the victims’
photos. In §4.3 we relax this assumption and test our attack as a
casual attacker, who may lack some information (e.g., the victims
may expose no photos to the public, there are no usable photos, no
friend requests issued). More details on the capabilities of these
two types of attacker are given in §2.5.
For part of our experiments we implemented custom face recog-
nition software. This was done for two reasons. First, because we
needed something very ﬂexible to use, that allowed us to perform
as many ofﬂine experiments as needed for the experiments of the
determined attacker. Second, we wanted to show that even off-the-
shelf algorithms were enough to break the SA test, at least in ideal
conditions. However, superior recognition algorithms exist, and
we conducted exploratory experiments that showed that face.com,
although less ﬂexible than our custom solution, has much better
accuracy. Therefore, we decided to use it in the most challenging
conditions, that is to break SA tests under the hypothesis of the
casual attacker.
404
7
6
5
4
3
2
1
)
s
s
a
p
o
t
5
.
n
i
m
-
7
f
o
t
u
o
(
s
e
g
a
p
A
S
d
e
v
l
o
S
0
10
20
30
40
50
60
70
80
90
100
110
120
t
s
e
t
r
e
p
s