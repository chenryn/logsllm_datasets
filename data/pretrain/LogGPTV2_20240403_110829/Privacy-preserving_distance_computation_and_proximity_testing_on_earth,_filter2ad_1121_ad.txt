ciphertext(cid:74)a(cid:75) from Bob. Alice’s output is
provides Alice with decryption key for(cid:74) ·(cid:75) as input. It then
encrypts the protocol output as (cid:74)(
a)2(cid:75) = (cid:74)a(cid:75) and sends
it to Alice. Since(cid:74)a(cid:75) is properly distributed, Alice cannot
distinguish between the simulation and a real execution of
the protocol. Therefore, the protocol is secure against a
curious Alice.
Bob’s view of the protocol consists in Alice’s public key,
and three ciphertexts from Alice, namely(cid:74)x2
A(cid:75),(cid:74)−2xA(cid:75),
(cid:74)−2yA(cid:75). Bob has no output. Simulator SB selects a ran-
dom pair (¯xA, ¯yA) and sends(cid:74)¯x2
A(cid:75),(cid:74)−2¯xA(cid:75) and(cid:74)−2¯yA(cid:75)
to Bob. The semantic security of (cid:74) ·(cid:75) prevents Bob from
A(cid:75),(cid:74)−2¯xA(cid:75) and(cid:74)−2¯yA(cid:75) from the encryption of
guish(cid:74)¯x2
A, −2¯xA and −2¯yA are not dis-
determining that ¯x2
tributed properly. Therefore, no PPT algorithm can distin-
properly distributed values. For this reason, Bob cannot dis-
tinguish between interaction with the SB and with a honest
Alice. Hence the protocol is secure against a curious Bob.
A + y2
A + ¯y2
A + ¯y2
A + ¯y2
Security of PP-ECEF. Alice’s view of the protocols con-
sists of the encryption and decryption keys for(cid:74) ·(cid:75), and ci-
A + ¯z2
A + ¯z2
phertext(cid:74)a(cid:75) from Bob. Alice’s output is 2R atan((cid:112)a/(1 − a)).
Simulator SA provides Alice with decryption key for (cid:74) ·(cid:75)
sends(cid:74)a(cid:75) to Alice. Since(cid:74)a(cid:75) is properly distributed, Alice
as input. It then computes a from the protocol output and
cannot distinguish between the simulation and a real execu-
tion of the protocol. Therefore, the protocol is secure against
a curious Alice.
Bob’s view of the protocol consists in Alice’s public key,
ulator SB selects a random set of coordinates (¯xA, ¯yA, ¯zA)
and four ciphertexts from Alice, namely (cid:74)x2
A(cid:75),
(cid:74)−2xA(cid:75), (cid:74)−2yA(cid:75), and (cid:74)−2zA(cid:75). Bob has no output. Sim-
and sends(cid:74)¯x2
A(cid:75),(cid:74)−2¯xA(cid:75),(cid:74)−2¯yA(cid:75),(cid:74)−2¯zA(cid:75) to Bob.
The semantic security of(cid:74) ·(cid:75) prevents Bob from determin-
tinguish(cid:74)¯x2
A(cid:75),(cid:74)−2¯xA(cid:75),(cid:74)−2¯yA(cid:75) and(cid:74)−2¯zA(cid:75) from
A, −2¯xA, −2¯yA and −2¯zA are not dis-
ing that ¯x2
tributed properly. Therefore, no PPT algorithm can dis-
the encryption of properly distributed values. For this reason,
Bob cannot distinguish between interaction with the SB and
with a honest Alice. Hence the protocol is secure against a
curious Bob.
A + ¯y2
A + ¯y2
A + y2
A + ¯y2
A + ¯z2
A + z2
Security of PP-HS. Alice’s view of the protocols consists
text(cid:74)a(cid:75) from Bob. Alice’s output is 2R atan((cid:112)a/(1 − a)).
of the encryption and decryption keys for(cid:74) ·(cid:75), and cipher-
Simulator SA provides Alice with decryption key for (cid:74) ·(cid:75)
crypts it as(cid:74)a(cid:75), and sends it to Alice. Since(cid:74)a(cid:75) is properly
as input. It then computes a from the protocol output, en-
distributed, Alice cannot distinguish between the simulation
and a real execution of the protocol. Therefore, the protocol
is secure against a curious Alice.
Bob’s view of the protocol consists in Alice’s public key,
tor SB selects six random values s1, . . . , s6 from the message
and six ciphertexts from Alice, namely(cid:74)α2(cid:75),(cid:74)−2αγ(cid:75),(cid:74)γ2(cid:75),
(cid:74)ζηθ2λ2(cid:75),(cid:74)−2ζηθλ(cid:75) and(cid:74)ζη(cid:75). Bob has no output. Simula-
space of(cid:74) ·(cid:75), encrypts them and sends(cid:74)s1(cid:75), . . . ,(cid:74)s6(cid:75) to Bob.
The semantic security of(cid:74) ·(cid:75) prevents Bob from distinguish-
ing(cid:74)s1(cid:75), . . . ,(cid:74)s6(cid:75) from the encryption of properly distributed
values. For this reason, Bob cannot distinguish between
interaction with the SB and with a honest Alice. Hence the
protocol is secure against a curious Bob.
Before the circuit execution, Bob reveals(cid:74)a(cid:75) =(cid:74)a + s(cid:75) to
Security of Comparison with Garbled Circuit of [28].
It is well known that Garbled Circuits can be used to im-
plement secure two party computation in the honest but
curious model [14, 28]. When using it as a building block,
we have to show that combining our distance protocol with
the comparison circuit of [28] does not aﬀect security.
Alice, where a ∈ {0, 1}l is a representation of the distance
between the two parties and s ← {0, 1}κ+l is chosen uni-
formly at random. We argue that a computationally-bound
adversary does not learn information about a from a, since
s provides statistical hiding. (Unconditional hiding can be
obtained selecting s from s ← {0, 1}l and performing modulo
subtraction within the circuit. However, this could negatively
aﬀect performance since it would add complexity to the com-
parison circuit.) More speciﬁcally, the success probability of
the adversary decreases exponentially in κ.
Bob’s view does not include any unencrypted values, so
the security of the combined protocol simply relies on the
security of its building blocks.
Remark on Location Triangulation. A potential secu-
rity weakness inherent in distance computation is the ability
of a set of three or more colluding parties, acting as Alice, to
106(a)
(b)
Figure 5: Comparison of PP-UTM, PP-ECEF and PP-HS accuracy for short (a) and long (b) distances. Dis-
cretization is performed with 1-meter accuracy for PP-UTM and PP-ECEF and roughly equivalent accuracy
(9 digits) for PP-HS. Relative error is plotted from the 2 km distance.
precisely determine the location of Bob through triangulation.
This is not an issue speciﬁc to our protocol, but rather to the
functionality that our protocol implements. Any protocol
implementing the same functionality has the same issue. Sim-
ilarly, proximity testing allows multiple colluding parties to
determine Bob’s exact location – although with signiﬁcantly
higher cost. We do not discuss this issue any further, since
this is a limitation of the underlying functionality rather
than of our protocols.
7. EVALUATION
We now present our protocol evaluation. We assess the
proposed protocols in terms of accuracy and performance.
For accuracy, we compare the exact distance with the out-
put of the speciﬁc distance function (i.e., haversine formula,
ECEF arc, Euclidean distance on UTM), after performing
input discretization. To assess performance, we measure
protocol execution time and bandwidth requirements. For
garbled circuits, the time is divided into the precomputation,
which can be done before knowing the input of either party,
and execution. Both precomputation and execution require
interaction between the protocol participants.
Our tests are performed on a prototype implementation,
detailed below. For generality’s sake, all tests were run
on both a regular desktop computer and on a commodity
Android device.
7.1 Accuracy
To evaluate the accuracy of our protocols, we use WGS84
as the reference shape of Earth. We select random pairs of
coordinates and compute the reference distance on WGS84.
This distance is then compared with the output of the proto-
cols on the same coordinates. We report errors as a fraction
of the WGS84 distance.
There are two main sources of imprecision in our protocols:
(1) the distance computation methods we consider are inher-
ently inaccurate, as they use a spherical approximation or a
projection instead of the actual shape of Earth; (2) compu-
tation in the encrypted domain is performed on discretized
values, i.e., over the integers; for eﬃciency reasons, the num-
ber of digits used for discretization is limited – this introduce
approximation errors.
The eﬀect of coordinate discretization on PP-UTM and
PP-ECEF is that all points are mapped on a grid with
ﬁxed-size cells. Additions and subtractions of discretized
values performed in the encrypted domain do not introduce
further errors. Square root and trigonometric functions are
computed in the unencrypted domain, and can therefore be
performed with arbitrary precision. In our tests, we used
64-bit IEEE 754 ﬂoating point variables (i.e., double in Java).
We evaluated cells of size 1 m and 100 m (i.e., discretizee(·)
with e = 0 and e = −2 respectively). Let u denote the
cell size. Errors introduced in the encrypted domain are
3 · u
bounded by
for PP-ECEF.
√
2 · u for PP-UTM and approximately
√
This does not apply to PP-HS. In fact, the discretization
is performed on the output of trigonometric functions com-
puted over Alice and Bob’s coordinates. As the number of
digits increases, the error caused by discretization decreases
exponentially. In all our experiments, we used e = 9, that
is, 9 signiﬁcant decimal digits. This value showed, in fact, a
reasonable trade-oﬀ between cost and accuracy. Moreover,
by further increasing e the impact on accuracy was negligible.
The relative error of our protocols is shown in ﬁgures 5(a)
and 5(b), for short and long distances respectively. The error
on UTM projection is shown in Figure 5(a) only, since it is
not meaningful to compare distances between coordinates
laying on diﬀerent zones (any two random points separated
by over 300 km would likely fall in diﬀerent zones).
PP-ECEF is better suited when the distance between the
two parties is below 12,000 km. As a generic distance function
(i.e., when there is no a-priory knowledge of the range of
distances involved), both PP-HS and PP-ECEF provide
accurate results. We compare the PP-ECEF protocol with
existing protocols in Table 1.
Our prototype relies on the Java Geodesy Library [12] to
compute distances on WGS84. The JScience library [25] is
used to project WGS84 coordinates to UTM and ECEF, while
the Java Map Projection Library [23] – to project spherical
coordinates to the Mercator, Equidistant Cylindrical and
Mollweide projections.
0.0%0.5%1.0%0100200300Distance in kmRelative errorPP−HSPP−ECEFPP−UTM0.0%0.5%1.0%05,00010,00015,00020,000Distance in kmRelative errorPP−HSPP−ECEF107Suitable for proximity testing
Suitable for distance computation
Location resolution independent
of threshold
Error characterization
Max. error for
threshold ε  135% of ε
no
linear with
resolution
≈ 2 m
(with 1 m resolution)
yes
linear with
resolution
≈ 2 m
(with 1 m resolution)
yes
linear with
threshold/resolution
> 180% of ε
no
Table 1: Comparison of our PP-ECEF protocol to related work. For protocols that allow independent choice
of resolution, 1m resolution was chosen for the 100m proximity test.
7.2 Performance
Protocol performance was evaluated on a desktop computer
(Intel Xeon E5420 2.5 GHz CPU, 16GB RAM) and on an
Android smartphone (LG Nexus 4, Quad-core 1.5 GHz Krait
CPU, 2 GB RAM). Both the distance computation protocol
and the protocol for proximity testing were implemented in
Java using the BigInteger API. For simplicity, the prototype
implementation was single-threaded.
In this section we report time measurements only for com-
putation; communication overhead is instead expressed in
terms of amount of data exchanged between the parties
during protocol execution. We ignore additional overhead
necessary for establishing a secure channel between the Alice
and Bob (e.g., via TLS).
In our experiments, we use 1024-bit modulus, 160-bit sub-
group size for DGK cryptosystem. Plaintext space for the
distance computation protocols and proximity testing based
on homomorphic comparison was 48 bits for PP-UTM, 65
bits for PP-HS, PP-ECEF, and 165 bits for proximity testing
with garbled circuits. The security parameter κ for garbled
circuits was set to 80 in all of our experiments. Average exe-
cution time and bandwidth usage for distance computation
is reported in Table 2, for proximity testing in Table 3.
Our experiments show that all protocols are practical on
both our desktop setup and on a regular smartphone. Dis-
tance computation, regardless of the protocol, requires up
to 41 ms on the desktop computer, and 78 ms on the smart-
phone. Small amount of computation, in conjunction with
negligible bandwidth usage (below 1 kB) make our proto-
cols suitable for resource-constrained devices. For distance
computation, discretization parameters have no impact on
bandwidth usage and negligible eﬀects on computation time.
Therefore, we show results for 1-meter discretization for PP-
UTM and PP-ECEF, and roughly equivalent accuracy for
PP-HS.
While PP-UTM is the fastest of our protocols, both PP-HS
and PP-ECEF oﬀer better accuracy for longer and shorter
distances, respectively. Moreover, the cost increase over