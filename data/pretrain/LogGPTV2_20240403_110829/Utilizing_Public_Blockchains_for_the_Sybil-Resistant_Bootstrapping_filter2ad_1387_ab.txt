3.2 Design Goals for Secure Bootstrapping
The goal of our work is to create a decentralized medium for boot-
strapping distributed anonymity services in a trustworthy manner
and allowing privacy-aware users to discover both available peers
and anonymity services. To achieve this goal, we identify the fol-
lowing main requirements and features.
(G1) Trustworthy Bootstrapping. Our medium must provide
technical means to establish trust in available anonymity services
and hence must be trustworthy itself. To this end, a decentralized
design is reasonable to eliminate the need for users’ trust in any ded-
icated medium operator. Furthermore, the medium must mitigate
Sybil attacks to prevent its infiltration through adversaries. Finally,
the medium must still remain in control over the setup of offered
anonymity services through a secure bootstrapping procedure.
(G2) Secure and Lightweight Service Discovery. Our medium
must only relay users to privacy peers and services that have been
bootstrapped in a trustworthy manner. Previous approaches have
proposed piggybacking node discovery for peer-to-peer systems
onto a well-established decentralized medium such as IRC [21]. For
such approaches, service discovery must limit its impact on the
host system to facilitate the adoption of the bootstrapping process.
(G3) Broad Applicability. In Section 2, we discussed the variety
of existing anonymity services. Consequently, we must account
for this variety and allow users to discover and utilize different
services for diverse applications. Finally, users should be able to use
anonymity services corresponding to their individual preferences.
(G4) Scalability. Sufficiently large user bases are crucial to achiev-
ing high privacy levels via anonymity services. Our medium must
thus effortlessly scale to large numbers of users and privacy peers.
(G5) Operator Incentives. Current honest anonymity services
are typically offered on a voluntary basis [16]. However, if the effort
of signaling honesty through our medium to publicly offer ano-
nymity services becomes burdensome for operators, the number of
volunteers might decrease. Hence, our medium must also consider
the option to compensate for operators’ efforts in its design.
4 ANONBOOT: A MEDIUM FOR SECURELY
BOOTSTRAPPING ANONYMITY SERVICES
In this section, we first provide an overview of AnonBoot and then
describe in detail how AnonBoot maintains a Sybil-resistant peer
repository on top of a public host blockchain through standard
transactions. Finally, we elaborate on how AnonBoot bootstraps
anonymity services from this repository, i.e., how we elect privacy
peers and then hand over control to the elected peers.
4.1 Design Overview
The main goal of AnonBoot is to provide a medium for securely
bootstrapping distributed anonymity services that typically consist
of only a few privacy peers. AnonBoot maintains a robust distributed
state of available privacy peers and bootstrapping requests without
storing privacy-compromising information. To this end, AnonBoot
relies on the immutable ledger of a public host blockchain as the
current state-of-the-art medium for communication and consensus
without the need to rely on special trust in particular peers. By
having privacy peers periodically advertise themselves on-chain
through proof of work (PoW), AnonBoot maintains a Sybil-resistant
Figure 3: In AnonBoot, peers periodically advertise themselves on the host blockchain while solving small PoW puzzles to
prevent Sybil attacks. Users can bootstrap different anonymity services, which are then utilized independently of AnonBoot.
peer repository. This way, the peer repository only contains recent
privacy peers and adversaries need to invest resources in maintain-
ing their influence rather than increasing it over time. AnonBoot
realizes trustworthy bootstrapping (G1) by dynamically electing
privacy peers based on these advertisements and further on-chain
entropy. Thereby, AnonBoot prevents adversaries from manipulat-
ing peer election to gain an advantage over honest operators.
All participants locally operate a connector for all interactions
with the host blockchain. The connector publishes new messages
to the host blockchain and monitors it for new events. Based on
these events, the connector updates AnonBoot’s state. In this work,
we detail how Bitcoin can be used as AnonBoot’s host blockchain
despite its very restricted intended ways to insert application-level
data to show that AnonBoot can operate on top of most blockchains.
Furthermore, the Bitcoin network is well-established with around
10 000 reachable nodes [52] vetting its blockchain and thus provid-
ing a strong trust anchor regarding AnonBoot’s privacy peers.
In Figure 3, we present an overview of AnonBoot’s bootstrap-
ping process in four steps: First, in Step 1○, privacy peers advertise
themselves on the host blockchain. Subsequently, in Step 2○, users
request bootstrapping new anonymity services from a random set
of advertised privacy peers. Next, in Step 3○, all participants lo-
cally derive a common AnonBoot state. Finally, based on their state,
users can either (Step 4a○) locally select privacy peers for personal
anonymity services without the need for full synchronization, or
(Step 4b○) privacy peers bootstrap a new shared anonymity service.
We now provide a more detailed overview of these individual steps.
Periodic Peer Ads. In Step 1○, AnonBoot creates a Sybil-resistant
peer repository by requiring privacy peers interested in providing
anonymity services to periodically issue advertisements on the host
blockchain. Peer operators need to periodically refresh their adver-
tisements at the start of each refreshment period, or pulse, while
solving a small PoW puzzle. This core element of AnonBoot estab-
lishes a Sybil-resistant peer repository as peer operators need to
invest their hardware resources at the start of each pulse to remain
in the peer repository. To mitigate the advantage adversaries may
gain through dedicated mining hardware, the exact design of the
PoW puzzles is a crucial parameter of AnonBoot (cf. Section 6.1).
Service Requests. In Step 2○, privacy-aware users may issue ag-
gregatable on-chain service requests to request bootstrapping a
shared anonymity service, e.g., a shuffling network or a crypto-
tumbler, after a fixed-length negotiation phase. Service requests
specify the type of the anonymity service as well as service-specific
parameters such as minimum required sizes of anonymity sets.
Derive State. In Step 3○, all participants locally process advertise-
ments and service requests from the host blockchain to derive and
verify AnonBoot’s current state. By locally processing all on-chain
service requests, all participants maintain a common service list. For
processing requests, AnonBoot defines a randomized peer election
that is inspired by blockchain sharding [22, 27, 53] to select random
subsets of compatible privacy peers, which then jointly provide
the requested service. Peer election is based on a pseudo-random
number generator that is seeded with tamper-resistant entropy
drawn from the host blockchain to enable all participants to locally
derive the same service list. After discarding invalid or delayed
messages, all participants obtain the same state, i.e., the current
peer repository and statistics about previously discovered peers.
Local Selection & Service Bootstrapping. Step 4○ finalizes the
bootstrapping process provided by AnonBoot with two possible
actions for users. Either, users directly perform an instant local
peer selection only based on the peer repository (Step 4a○), e.g., to
establish a Tor circuit. Alternatively, users browse the service list
(Step 4b○) for securely bootstrapped anonymity services (G2). Since
all privacy peers derive the same state as users, they can check
whether they were elected to provide a shared anonymity ser-
vice and subsequently bootstrap these services by contacting other
elected privacy peers. In both cases, communication is initiated
through the AnonBoot connector, which then hands over the con-
trol entirely to the underlying anonymity protocol.
Our design ensures that AnonBoot only indexes anonymity ser-
vices that are created in a Sybil-resistant manner as long as the peer
repository itself consists of an honest majority. The maintenance
of an honest peer repository is therefore essential to AnonBoot’s
security. To increase the willingness of honest peer providers to
participate, AnonBoot can further decrease peer operators’ costs
by increasing the pulse duration, or existing anonymity services
can be augmented with means for financial compensation, e.g., via
anonymous micropayments [18]. We argue that the increased ro-
bustness against adversaries offered by AnonBoot is worthwhile
for privacy-aware users even if they are required to compensate
privacy peer operator’s costs. However, AnonBoot is explicitly also
operable by volunteers as long as its periodicity is tuned to pre-
vent their recurring costs from becoming prohibitively high. In the
following, we present AnonBoot’s protocol design in more detail.
ServiceRequestServiceRequestPeerAdPeerAdPeerAdPrivacyPeersUsersHCAG1423ILE1231234aLocalSelection4bBootstrapServicesLocalCommonAnonBootStateConnector2ServiceRequestsConnector1PeriodicPeer Ads>_>_1.A2.B3.C4.D5.E6.F7.G8.H9.I10.J11.K12.LPeerRepositoryPeer StatisticsServiceListConnector3DeriveState>_HostBlockchainP2S1P1PulseBlockSpawnBlockNewPulseAnonBootMessages0
8
OP_RETURN
OP_PUSHDATA1
Protocol Identifier (=AB)
D IP
reserved
16
24
Payload Length ← BTC Header
reserved
Version
Type
Connector Public Key
IPv4/6 Address
TCP Port
Service ID
Service-specific Capabilities
S
t
r
u
c
t
u
r
e
o
f
S
e
r
v
i
c
e
R
e
q
u
e
s
t
s
s
t
n
e
m
e
s
i
t
r
e
v
d
A
r
e
e
P
f
o
e
r
u
t
c
u
r
t
S
Nonce
Figure 4: AnonBoot can run on top of Bitcoin using
OP_RETURN transactions. Peer advertisements convey peers’
contact information, capabilities, and the required PoW. Ser-
vice requests bootstrap a service based on the capabilities
and using the nonce as further entropy for peer election.
4.2 Sybil-Resistant Index of Peers and Services
AnonBoot relies on its host blockchain to maintain its Sybil-resistant
peer repository and to instantiate new anonymity services based
on users’ requests. We now detail how AnonBoot can use Bitcoin
as its host blockchain, only relying on standard transactions. All
concepts carry over to other blockchains, especially to systems that
can process arbitrary messages on-chain through smart contracts,
e.g., Ethereum. After presenting the basic structure of AnonBoot’s
Bitcoin-compatible messages, we thoroughly describe the message
layout of peer advertisements and service requests. Finally, we fur-
ther elaborate on how AnonBoot enforces periodically refreshing
messages to remain Sybil-resistant as well as fair toward honest
privacy peers, and how it reduces its impact on the host blockchain.
Basic Message Layout. In Figure 4, we show the generalized
structure of a Bitcoin-compatible AnonBoot message. Those mes-
sages are either peer advertisements or service requests. All messages
consist of OP_RETURN Bitcoin transactions, which are allowed to
carry up to 80 B of payload data [28]. This structure results in an un-
avoidable 3 B-long Bitcoin header consisting of the OP_RETURN oper-
ation and the payload’s length [6]. The following AnonBoot header
contains a protocol identifier (AB), as is common for OP_RETURN-
based protocols [3], as well as the protocol version and message
type. For extensibility reasons, we reserve four bits for future use.
Peer Advertisements. Privacy peers join AnonBoot’s peer repos-
itory by periodically refreshing and publishing peer advertisements
to the host blockchain. As we detailed in Figure 4, peer advertise-
ments convey three main pieces of information for users and other
privacy peers: (a) the peer’s contact information, (b) its capabilities,
and (c) a solution of its PoW puzzle. While sharing their capabilities
and contact information is required for coordinating the peer elec-
tion (Section 4.3), ensuring Sybil resistance via peer advertisements
is crucial for AnonBoot’s promised security properties.
First, each privacy peer announces the contact information of its
connector so that users and other privacy peers can contact it se-
curely in the following. The privacy peer announces its connector’s
public key as well as a pair of IP address and port for incoming
connections. This indirection through a connector enables a uni-
fied connection interface for all anonymity services supported by
AnonBoot. However, if the advertised service’s required contact
information fits into the peer advertisement, the privacy peer may
set the D-flag to indicate the direct reachability of the service, i.e.,
the connector can be bypassed. By setting the IP-flag, the privacy
peer toggles whether it is reachable via IPv4 or IPv6, respectively.
Similarly, we reserved six additional bits for future use to remain
flexible regarding other formats of contact information.
Second, each peer advertises its capabilities. These capabilities
consist of a service identifier denoting which anonymity service the