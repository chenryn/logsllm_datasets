### 3.2 Design Goals for Secure Bootstrapping

The primary objective of our work is to develop a decentralized medium for bootstrapping distributed anonymity services in a trustworthy manner, enabling privacy-conscious users to discover both available peers and anonymity services. To achieve this, we have identified the following key requirements and features:

**(G1) Trustworthy Bootstrapping.** Our medium must provide technical mechanisms to establish trust in available anonymity services, ensuring its own trustworthiness. A decentralized design is essential to eliminate the need for users to trust any single operator. Additionally, the medium must mitigate Sybil attacks to prevent infiltration by adversaries. Finally, it must maintain control over the setup of offered anonymity services through a secure bootstrapping procedure.

**(G2) Secure and Lightweight Service Discovery.** The medium should only direct users to privacy peers and services that have been bootstrapped in a trustworthy manner. Previous approaches have suggested piggybacking node discovery for peer-to-peer systems onto established decentralized mediums like IRC [21]. For such methods, service discovery must minimize its impact on the host system to facilitate the adoption of the bootstrapping process.

**(G3) Broad Applicability.** As discussed in Section 2, there is a wide variety of existing anonymity services. Our medium must accommodate this diversity, allowing users to discover and utilize different services for various applications. Users should also be able to select anonymity services based on their individual preferences.

**(G4) Scalability.** A sufficiently large user base is crucial for achieving high levels of privacy through anonymity services. Therefore, our medium must scale effortlessly to support a large number of users and privacy peers.

**(G5) Operator Incentives.** Currently, honest anonymity services are often provided on a voluntary basis [16]. However, if the effort required to signal honesty through our medium becomes burdensome, the number of volunteers may decrease. Thus, our medium must consider ways to compensate operators for their efforts in its design.

### 4 ANONBOOT: A MEDIUM FOR SECURELY BOOTSTRAPPING ANONYMITY SERVICES

In this section, we first provide an overview of AnonBoot and then describe in detail how AnonBoot maintains a Sybil-resistant peer repository on top of a public host blockchain using standard transactions. Finally, we explain how AnonBoot bootstraps anonymity services from this repository, including the election of privacy peers and the handover of control to the elected peers.

#### 4.1 Design Overview

AnonBoot's primary goal is to provide a medium for securely bootstrapping distributed anonymity services, which typically consist of a few privacy peers. AnonBoot maintains a robust, distributed state of available privacy peers and bootstrapping requests without storing privacy-compromising information. It leverages the immutable ledger of a public host blockchain as a state-of-the-art medium for communication and consensus, eliminating the need to rely on specific trusted peers. By having privacy peers periodically advertise themselves on-chain through proof of work (PoW), AnonBoot maintains a Sybil-resistant peer repository. This ensures that the repository only contains recent, legitimate privacy peers, and adversaries must invest resources to maintain their influence rather than increase it over time. AnonBoot achieves trustworthy bootstrapping (G1) by dynamically electing privacy peers based on these advertisements and additional on-chain entropy, preventing adversaries from manipulating peer elections to gain an advantage over honest operators.

All participants use a local connector to interact with the host blockchain. The connector publishes new messages to the blockchain and monitors it for new events, updating AnonBoot’s state accordingly. In this work, we detail how Bitcoin can be used as AnonBoot’s host blockchain, despite its restricted means of inserting application-level data, demonstrating that AnonBoot can operate on most blockchains. The Bitcoin network, with around 10,000 reachable nodes [52], provides a strong trust anchor for AnonBoot’s privacy peers.

Figure 3 illustrates AnonBoot’s bootstrapping process in four steps:
1. **Privacy Peers Advertise:** Privacy peers advertise themselves on the host blockchain.
2. **Service Requests:** Users request bootstrapping new anonymity services from a random set of advertised privacy peers.
3. **Derive State:** All participants locally derive a common AnonBoot state.
4. **Local Selection & Service Bootstrapping:** Users either perform local peer selection or browse the service list for securely bootstrapped anonymity services.

**Periodic Peer Ads.** In Step 1, AnonBoot creates a Sybil-resistant peer repository by requiring privacy peers to periodically issue advertisements on the host blockchain. Peer operators must refresh their advertisements at the start of each refreshment period, or pulse, while solving a small PoW puzzle. This core element establishes a Sybil-resistant repository, as peer operators must invest hardware resources at the start of each pulse to remain in the repository. The exact design of the PoW puzzles is a critical parameter of AnonBoot (cf. Section 6.1).

**Service Requests.** In Step 2, privacy-aware users can issue aggregatable on-chain service requests to bootstrap a shared anonymity service, such as a shuffling network or a cryptotumbler, after a fixed-length negotiation phase. Service requests specify the type of anonymity service and service-specific parameters, such as the minimum required size of anonymity sets.

**Derive State.** In Step 3, all participants locally process advertisements and service requests from the host blockchain to derive and verify AnonBoot’s current state. By processing all on-chain service requests, participants maintain a common service list. AnonBoot uses a randomized peer election inspired by blockchain sharding [22, 27, 53] to select random subsets of compatible privacy peers, which jointly provide the requested service. Peer election is based on a pseudo-random number generator seeded with tamper-resistant entropy from the host blockchain, ensuring all participants derive the same service list. After discarding invalid or delayed messages, all participants obtain the same state, i.e., the current peer repository and statistics about previously discovered peers.

**Local Selection & Service Bootstrapping.** In Step 4, users finalize the bootstrapping process with two possible actions:
- **Instant Local Peer Selection:** Users directly select peers based on the peer repository, e.g., to establish a Tor circuit.
- **Browse Service List:** Users browse the service list for securely bootstrapped anonymity services (G2). Since all privacy peers derive the same state, they can check if they were elected to provide a shared anonymity service and subsequently bootstrap these services by contacting other elected privacy peers. Communication is initiated through the AnonBoot connector, which hands over control to the underlying anonymity protocol.

Our design ensures that AnonBoot only indexes anonymity services created in a Sybil-resistant manner, provided the peer repository consists of an honest majority. Maintaining an honest peer repository is essential for AnonBoot’s security. To encourage honest peer participation, AnonBoot can reduce costs by increasing the pulse duration, or existing anonymity services can be augmented with financial compensation, e.g., via anonymous micropayments [18]. We argue that the increased robustness against adversaries offered by AnonBoot is worthwhile for privacy-aware users, even if they must compensate privacy peer operators. AnonBoot can also be operated by volunteers if periodicity is adjusted to keep recurring costs manageable.

### 4.2 Sybil-Resistant Index of Peers and Services

AnonBoot relies on its host blockchain to maintain a Sybil-resistant peer repository and instantiate new anonymity services based on user requests. We detail how AnonBoot can use Bitcoin as its host blockchain, relying only on standard transactions. These concepts can be applied to other blockchains, especially those that can process arbitrary messages on-chain through smart contracts, such as Ethereum.

**Basic Message Layout.** Figure 4 shows the structure of a Bitcoin-compatible AnonBoot message, which can be either a peer advertisement or a service request. These messages are OP_RETURN Bitcoin transactions, carrying up to 80 B of payload data [28]. The message structure includes a 3 B-long Bitcoin header, followed by an AnonBoot header containing a protocol identifier (AB), protocol version, and message type. Four bits are reserved for future use.

**Peer Advertisements.** Privacy peers join AnonBoot’s peer repository by periodically refreshing and publishing peer advertisements to the host blockchain. Each advertisement conveys three main pieces of information:
1. **Contact Information:** The peer’s contact information, including the connector’s public key and IP address/port for incoming connections. If the service’s contact information fits into the advertisement, the D-flag indicates direct reachability, bypassing the connector.
2. **Capabilities:** Each peer advertises its capabilities, including a service identifier and service-specific capabilities.
3. **Proof of Work (PoW):** A solution to the PoW puzzle, ensuring Sybil resistance.

This structure ensures that AnonBoot can maintain a Sybil-resistant and secure environment for bootstrapping anonymity services.