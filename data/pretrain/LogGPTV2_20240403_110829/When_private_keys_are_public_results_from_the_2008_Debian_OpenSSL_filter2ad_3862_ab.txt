not repeat it.
the bug and its implications for SSL security.
4.1 Overview of the Bug
OpenSSL’s pseudorandom number generator (PRNG), like
all PRNGs, is a deterministic function: an attacker who
knows all the inputs and the sequence of invocations can
predict the output. To make the PRNG secure, the entropy
pool must be seeded with many bytes from /dev/random or
another source of entropy that an attacker cannot predict.
OpenSSL exposes two functions that update a program’s
entropy state: RAND_add and RAND_bytes.1 The basic func-
tion used to update the entropy pool is RAND_add. RAND_add
is called with a block of bytes b of length l. RAND_add then
mixes all of these values into the PRNG entropy pool. The
eﬀect of the Debian bugﬁx is to modify ssleay_rand_add
to mix in l but not b, with the eﬀect that an attacker who
knows the calling sequence (which is mostly determined by
the program and not by the state of the machine) can pre-
dict the contents of the entropy pool and hence the output
of the PRNG.
RAND_bytes, the function used to generate new random
numbers, also updates the PRNG state with the number of
bytes to be extracted and the program’s process ID (pid)
at the time the call is made. Folding in the current pid
ensures that forked processes, which otherwise would have
identical entropy pools, do not obtain the same values from
the PRNG. (Reuse of random numbers renders many cryp-
tographic protocols insecure.) It is the binary in-memory
representation of the pid that is incorporated, so an attack
must consider the endianness and native word size of the
target machine. Because RAND_bytes folds in the number
of bytes extracted, asking ﬁrst for 20 bytes and then for 10
produces diﬀerent output than if the calls are reversed.
Because a program’s entropy pool starts in a known (all-
zero) state, a remote attacker can track its evolution if he
knows:
1. The sequence of calls to RAND_add and RAND_bytes
made by the program.
2. For each call to RAND_add, the number of bytes to be
added.
3. For each call to RAND_bytes, the number of bytes to
be extracted and the program’s process ID (pid) when
the call is made.
This analysis holds true even if a program’s behavior de-
pends on the value of previous PRNG output, for example
in the standard method for prime generation. When the
PRNG is considered part of the program, the entire system
is still deterministic given its initial state and its inputs.
4.2 The Effect of the Bug on SSL
The eﬀect of this bug is contingent both on whether the
client or server is aﬀected and on which cipher suites are
in use.
If the client random number generator is broken,
a passive attacker can usually predict the traﬃc keys (no
matter what the cipher suite). In RSA mode, the attacker
can predict the PMS (see, for example, Wagner and Gold-
berg [3]) and in DHE mode he can predict the client’s DH
private key, which allows prediction of the PMS (Abeni,
Bello, and Bertacchini, demonstrate this attack on DHE_RSA
1These are wrappers around the ssleay functions below.
17/
/
o
o
/
/
cipher suites for command-line clients and servers [1] aﬀected
by the Debian bug). However, as a practical matter the
eﬀect of this bug on clients is limited because most popu-
lar Web browsers do not use OpenSSL: Internet Explorer
uses Microsoft’s SChannel and Firefox uses NSS. Further-
more, Debian and other Linux distributions are not widely
used as Web-browsing platforms. The most popular Unix
browser based on OpenSSL is KDE’s Konqueror, whose us-
age share — across all Unix platforms, not just Debian —
is well under 0.05%.2 However, many popular non-Web
clients as well as command line Web clients such as wget
use OpenSSL and therefore are likely to be aﬀected.
Servers, on the other hand, represent a serious concern.
OpenSSL is the dominant SSL implementation on server
platforms, and Debian-derived distributions are popular on
servers. There are two major avenues of attack: key gener-
ation and DH share generation.
RSA Key generation. If the server RSA keypair was gen-
erated on an aﬀected version of OpenSSL, then the attacker
can directly recover the private key.
The simplest and most common way to generate long-
lived RSA keypairs for OpenSSL-based servers is to run the
openssl genrsa program, invoked either directly or through
a wrapper. This program uses the OpenSSL PRNG to gen-
erate the keys. As discussed in Section 4.1, each possible pid
and platform conﬁguration gives rise to a PRNG stream and
thus to a unique RSA keypair. The attacker can pregenerate
all those keypairs (this takes hours to days) and whenever
one of the public keys matches he immediately knows the
corresponding private key. Generating all possible keypairs
is subtle; we give the details in Section 6.2.
Because the knowledge of the private key is all that dif-
ferentiates the server from other entities, any attacker who
knows the private key can impersonate the server. This
attack can continue even after the server has replaced his
key because the attacker still has a certiﬁcate/keypair and
many clients do not check certiﬁcate revocation lists (CRLs).
Moreover, if a static RSA cipher suite is used, the attacker
can passively monitor connections and recover the PMS and
therefore the traﬃc keys, thus gaining access to all the en-
crypted data as well as the ability to inject data of his choice.
As discussed above, this latter attack is not possible with
DHE cipher suites.
It’s very important to realize that both of these attacks
depend solely on the machine that the keypair was generated
on; if that machine was aﬀected by the bug but the SSL
server itself is not (either because it is not a Debian machine
or because it has been patched), attacks are still possible.
DHE Key Generation. By contrast, if the operational
server is aﬀected, then an attacker may be able to predict
the server’s DHE share even if the server’s RSA keypair was
securely generated. For a simple server that handles a sin-
gle connection and then restarts — for example, an IMAP or
POP server launched from inetd — then there would be a
small number of possible values for the server’s ephemeral
private key Xs. The attacker can determine which of these
possible keys is used for a connection by recognizing the
ServerRandom and ephemeral public key values that accom-
pany each. Unfortunately for the attacker, predicting these
random values for real-world Web servers is more compli-
2See
qprid=1&qpcustom=Konqueror.
http://marketshare.hitslink.com/report.aspx?
cated than for the simple attack described by Abeni, Bello,
and Bertacchini [1].3
Consider the case of the most popular Web server, Apache,
which uses a “thundering herd” architecture with multiple
long-lived worker processes. Each worker process handles
multiple connections in sequence and, for each connection,
calls RAND_bytes one or more times, mixing the entropy
pool. Even with the Debian bug, the random values ob-
tained by the process for the ﬁrst connection it handles will
be diﬀerent from those obtained for the second and subse-
quent connections. What’s more, the pattern of RAND_bytes
invocations depends on the cipher suite and whether re-
sumption is used. Thus, though we know the initial state
of the server, we rapidly accumulate uncertainty about its
sequence of RAND_bytes invocations. Unless an attacker can
observe the entire set of connections from server startup,
predicting the sequence of random values quickly becomes
infeasible. Finally, each worker process has its own state
and the attacker cannot directly measure what worker pro-
cess is handling any given connection. Thus, even an at-
tacker who can observe all server activity still must do a
signiﬁcant amount of work; we describe a full attack along
these lines in Appendix A. This aﬀects not only attackers
who wish to recover a connection’s PMS but also those who
wish to ﬁngerprint vulnerable servers using the predictable
ServerRandom values they emit.
In contrast to the case where the server’s key is weak, this
avenue of attack is possible only when the client and server
negotiate a DHE_RSA cipher suite.
If the server’s random-
ness is weak but a RSA cipher suite is chosen, the resulting
connection is entirely secure, because it is the client that
supplies the premaster secret.4
5. REMOTELY MEASURABLE DATA
As with other studies of this type, we collected data by
remotely probing the server to determine its characteristics.
Thus, the data we can report is limited to what we can
collect via this mechanism.
As described above, servers can be aﬀected by the bug
we study in several ways: the server software can be af-
fected, the server keypair can be weak, or both. Ideally we
would like to be able to measure the evolution of both prop-
erties over time. This would allow us not only to replicate
Rescorla’s 2003 study [16] but also to measure a form of
ﬁxing that is related to but distinct from server software:
Whereas previous papers have focused on the response to
attack on servers, this paper illustrates the response to an
attack on the data sent by servers. Unfortunately, our abil-
ity to measure remotely does not allow this. Determining
the vulnerability of the server keypair is straightforward:
construct a list of the weak server keys and check to see
if the server’s certiﬁcate contains such a key. In addition,
when we determine that a server’s key is vulnerable, this
also gives us information about the machine on which the
key was generated (which will often be the server); the exact
set of keys is somewhat platform speciﬁc and so we can ex-
3This was acknowledged by Bello in private communi-
cation, responding to an initial writeup of our analy-
sis at http://www.educatedguesswork.org/2008/08/the_
debian_openssl_prng_bug_an.html.
4Note that this is contrary to the na¨ıve expectation that a
protocol’s security guarantees are destroyed when one party
relies on predictable randomness.
18tract the word size, endianness, and base OpenSSL version;
see Section 6.2.
By contrast, remotely measuring the quality of the server
software’s PRNG (as opposed to the keypair) is not straight-
forward. We cannot directly examine the PRNG for the
reasons described in Section 4.2 and although some Apache
installations advertise the version of OpenSSL they are run-
ning, many Debian servers do not advertise this (it isn’t
entirely clear what the controlling factor is). Even if we
could examine the version name, because the error was in
the Debian fork of OpenSSL, the OpenSSL version number
is not diagnostic here. Thus, we cannot reliably determine
the status of the server itself.
As Murray [12] and Lee et al. [9] show, it is possible to
determine what parameters a server is willing to negotiate
by probing it using a client with a limited set of options. Be-
cause our interest is primarily limited to bug ﬁx deployment,
our survey was less exhaustive (and less intrusive) but we
still measure a number of the same parameters, and in par-
ticular what cipher suite the server will select when oﬀered
the default set from OpenSSL.
This bug also aﬀected SSH servers, and it is possible to re-
motely determine whether they have weak keys [11] — source
code examination suggests that it may also be possible to
determine the status of the server but we have not yet tried
that. We initially developed SSH probing tools as well, but
ultimately decided to measure only SSL servers. Our pri-
mary reason was logistical: SSL server operators expect con-
nections to their servers from arbitrary sources. By contrast,
unexpected connections to SSH servers are often perceived
as an attack. Indeed, the only complaint we received in our
survey was from the operator of an SSH server that had
been inadvertently included on our probe list. In addition,
because any given SSH server is used only by a relatively
small number of users, it is less clear what a representative
sample would look like.
6. METHODOLOGY
In the remainder of the paper, we describe our survey of
SSL servers. Because only a small fraction of servers were
likely to run an aﬀected version of Linux, we ﬁrst needed to
collect a large set of servers to sample. Drawing up a list of
representative SSL servers is not easy. A random scan of the
IP space would be as likely to happen upon an unused “You
have successfully installed Apache” site as PayPal’s servers.
(Because the fraction of IPs serving content on TCP port 443
is low, such a scan would also be intrusive.) Furthermore,
while there exist lists, such as Alexa’s, of popular Websites,
the popularity of a site is a poor proxy for the popularity of
its associated secure SSL site, if there is one. Many popular
sites, such as the Drudge Report, serve a substantial amount
of traﬃc over HTTP and none over HTTPS. We chose to use
measured SSL usage as a selection procedure. Through the
UC San Diego Information Security Oﬃce, which routinely
monitors UCSD network usage, we were able to obtain a
list of all IP addresses to which a 1 KB or larger ﬂow of
traﬃc on TCP port 443 had been detected in the 56-day
period ending 21:00 utc on Friday, May 16, 2008. This list
contained 59100 servers.
Because our list of SSL server addresses consists of servers
actually visited by a diverse user population of a large or-
ganization, we believe that it is more representative of SSL
as deployed on the Internet than a random scan would be.
We expect that the corpus of data we collected about these
servers will be of wider use.
6.1 Data Collection
Using this list as our starting point, we constructed a sim-
ple program which would attempt to contact each server on
the list (directly connecting the IP address with no DNS
lookup) and initiate an SSL handshake using the “openssl
s_client -connect” command.
If the handshake did not
complete within 30 seconds, we marked the host as failed
and moved on.5 The results for each run were then stored
in raw form to a separate ﬁle for that host and day. The out-
put is simply the output of OpenSSL, which includes: the
negotiated SSL protocol version; the server certiﬁcate chain;
the selected cipher suite; the session ID; the computed mas-
ter key; and the start time of the connection.
Starting on the evening of Saturday, May 17, 2008, we
repeatedly surveyed each host, initially running our script
by hand and then, as we gained conﬁdence, in a cron job.
The result was a complete set of connection output for each
host for each run. We did not attempt to restrict the host
list to those hosts exhibiting weak certiﬁcates, thus avoiding
the need to have a complete weak key list at the beginning
of the survey — which was convenient since generating the
key list is extremely time consuming.
The result of this process was a rather large data set —
each day’s data consumes approximately 200 MB and the