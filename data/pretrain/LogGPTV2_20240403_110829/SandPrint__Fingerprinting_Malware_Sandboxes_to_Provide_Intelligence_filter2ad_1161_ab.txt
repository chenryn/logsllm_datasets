### Service Details

- **Service #13 (Windows 7 64-bit)**
- **Service #13 (Windows 7 32-bit, Stealthy)**

### Additional Services
- **Service #14**
- **Service #15**
- **Service #16**
- **Service #17**
- **Service #18**
- **Service #19**
- **Service #20**

### Dynamic and Static AV Scan Reports / Submission Reports / Sandboxes

| Service | Detection Rate | Unique Reports | IP Addresses | Countries |
|---------|----------------|----------------|--------------|-----------|
| Service #14 | 0/20 | 0 | - | - |
| Service #15 | 0/20 | 0 | - | - |
| Service #16 | 0/20 | 0 | - | - |
| Service #17 | 6/20 | 85 | - | - |
| Service #18 | 2/20 | 8 | - | - |
| Service #19 | 20/20 | 21 | - | - |
| Service #20 | 0/20 | 0 | - | - |

### Detailed Analysis

#### Data Transmission and Authentication
After the initial connection to the server, a unique identifier is sent to track which sample is executed in which system. A challenge-response authentication follows to detect replayed requests.

#### Feature Collection
SandPrint collects system features using methods that avoid common commands like `systeminfo`, `netstat`, and `ipconfig` to prevent detection by sandboxes. Feature collection is balanced across multiple threads to avoid deadlocks. A heartbeat thread periodically notifies the server of SandPrint's execution status. All SandPrint traffic mimics HTTP protocol to appear as communication with a web server.

#### Fingerprinting Malware Sandboxes
We submitted SandPrint to 20 malware analysis services from January 5, 2016, to January 18, 2016. Each submission was uniquely identified to map which file was uploaded where. We collected 2,666 SandPrint reports from 221 out of 440 submissions, averaging 6 reports per submission. The reports came from 395 IP addresses across 33 countries, indicating frequent re-execution and sharing of samples across sandboxes.

#### Clustering Sandboxes
To group similar reports, we used agglomerative hierarchical clustering. This method allows for a custom distance function and does not require pre-determined cluster numbers. The distance function compares features, treating equal features as having zero distance and different features as having a distance of one. Sparse features are handled by focusing on those present in the majority of reports.

#### Clustering Results and Validation
Clustering reduced 2,666 reports to 76 clusters, with 16 singleton clusters. The largest cluster had 233 reports, and the average cluster size was 35 reports. Manual validation confirmed the clustering results, except for one case where two sandboxes were merged due to similar but not identical features.

#### Mapping Malware Analysis Services to Sandboxes
We mapped SandPrint reports to 11 out of 20 malware analysis services. Nine services did not provide any reports, suggesting no internet connectivity or no dynamic analysis. The remaining services showed varying levels of activity, with some sandboxes exclusively used by specific services.

#### Empirical Sandbox Analysis
Most sandboxes run Windows XP (37 out of 71), followed by Windows 7 (29) and Windows 8 (5). Installation dates range from 2008 to 2016, with many sandboxes at least three years old. Some sandboxes diversify host and owner names, while others use static values. Five sandboxes were identified as using Cuckoo Sandbox based on the presence of `agent.py`.

This structured approach provides a clear and detailed overview of the services, their detection rates, and the methodologies used for fingerprinting and analyzing malware sandboxes.