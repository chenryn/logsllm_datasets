；
        }        break
；
        case "\n"
：
            if
（
$mark == '#' || $mark == '--'
）
{                $mark = ''
；
            }        break
；
        case '-'
：
            if
（
empty
（
$mark
）
&& substr
（
$sql
，
$i
，
3
）
== '-- '
）
{                $mark = '-- '
；
                $clean .= $mark
；
            }            break
；
            default
：
            break
；
}$clean .= $mark
？
''
：
$str
；
}}
      if
（
strpos
（
$clean
，
'@'
）
！
== false
）
{
        return '-3'
；
      }
      $clean = preg_replace
（
"/[^a-z0-9_\-\
（
\
）
#\*\/\"]+/is"
，
""
，
strtolower
（
$clean
））；
      if
（
self
：：
$config['afullnote']
）
{
      $clean = str_replace
（
'/**/'
，
''
，
$clean
）；
      }
      if
（
is_array
（
self
：：
$config['dfunction']
））
{
      foreach
（
self
：：
$config['dfunction'] as $fun
）
{
           if
（
strpos
（
$clean
，
$fun . '
（
'
）
！
== false
）
                  return '-1'
；
      }
      }
      if
（
is_array
（
self
：：
$config['daction']
））
{
      foreach
（
self
：：
$config['daction'] as $action
）
{
         if
（
strpos
（
$clean
，
$action
）
！
== false
）
          return '-3'
；
      }
}
      if
（
self
：：
$config['dlikehex'] && strpos
（
$clean
，
'like0x'
））
{
      return '-2'
；
      }
      if
（
is_array
（
self
：：
$config['dnote']
））
{
      foreach
（
self
：：
$config['dnote'] as $note
）
{
           if
（
strpos
（
$clean
，
$note
）
！
== false
）
          return '-4'
；
      }
}
      return 1
；
}
从如上代码我们可以看到，该函数首先使用：
$sql = str_replace
（
array
（
'\\\\'
，
'\\\''
，
'\\"'
，
'\'\''
），
''
，
$sql
）；
将SQL语句中的\\、\'、\"以及''替换为空，紧接着是一个if else判断逻辑来选择过滤的方式：
if
（
strpos
（
$sql
，
'/'
）
=== false && strpos
（
$sql
，
'#'
）
=== false && strpos
（
$sql
，
'-- '
）
=== false && strpos
（
$sql
，
'@'
）
=== false && strpos
（
$sql
，
'`'
）
=== false
）
{
           $clean = preg_replace
（
"/'
（
.+
？）
'/s"
，
''
，
$sql
）；
           } else {
这段代码表示当SQL语句里存在'/'、#'、'--'、'@'、'`'这些字符时，则直接调用preg_replace（）函数将单引号（'）中间的内容替换为空，这里之前存在一个绕过，只要把SQL注入的语句放到单引号中间，则会被替换为空，进行下面再判断的时候已经检测不到SQL注入的关键字，导致绕过的出现，在MySQL中使用@`'`代表null，SQL语句可以正常执行。
else条件中是对整段SQL语句进行逐个字符进行判断，比如
case '/'
：
       if
（
empty
（
$mark
）
&& $sql[$i + 1] == '*'
）
{
         $mark = '/*'
；
         $clean .= $mark
；
         $i++
；
       } elseif
（
$mark == '/*' && $sql[$i - 1] == '*'
）
{
           $mark = ''
；
           $clean .= '*'
；
       }
       break
；
这段代码的逻辑是，当检查到SQL语句中存在斜杠（/）时，则去判断下一个字符是不是星号（*），如果是星号（*）就把这两个字符拼接起来，即/*，然后继续判断下一个字符是不是星号（*），如果是星号则再继续拼接起来，得到/**，最后在如下代码中判断是否存在原来拦截规则里面定义的字符，如果存在则拦截SQL语句执行：
if
（
is_array
（
self
：：
$config['dnote']
））
{
       foreach
（
self
：：
$config['dnote'] as $note
）
{
         if
（
strpos
（
$clean
，
$note
）
！
== false
）
        return '-4'
；
       }
}
国内知名的多款cms应用如dedecms等，都有使用类似这个过滤类，另外由于应用的基础架构不一样，这个过滤类应用起来的实际效果也各不太一样，discuz目前做得相对较好。
9.1.2 discuz XSS标签过滤函数分析
目前大多数XSS过滤都是基于黑名单的形式，编程语言和编码结合起来千变万化，基于黑名单的过滤总给人不靠谱的感觉，事实确实是这样，目前好像还没有看到基于黑名单过滤的规则一直没有被绕过，其实在XSS的防御上，只要过滤掉尖括号以及单、双引号就能干掉绝大部分的payload。下面我们来看看discuz的HTML标签过滤代码，如下所示：
function checkhtml
（
$html
）
{
    if
（！
checkperm
（
'allowhtml'
））
{
        preg_match_all
（
"/\/is"