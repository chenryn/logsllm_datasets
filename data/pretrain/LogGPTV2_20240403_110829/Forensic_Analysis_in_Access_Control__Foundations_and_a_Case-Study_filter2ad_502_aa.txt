title:Forensic Analysis in Access Control: Foundations and a Case-Study
from Practice
author:Nahid Juma and
Xiaowei Huang and
Mahesh Tripunitara
Towards Continuous Access Control Validation and Forensics
Chengcheng Xiang, Yudong Wu, Bingyu Shen, Mingyao Shen, Haochen Huang,
Tianyin Xu*, Yuanyuan Zhou, Cindy Moore, Xinxin Jin†, Tianwei Sheng†
University of California, San Diego
*University of Illinois Urbana-Champaign
†Whova, Inc.
ABSTRACT
Access control is often reported to be “profoundly broken” in real-
world practices due to prevalent policy misconfigurations intro-
duced by system administrators (sysadmins). Given the dynamics
of resource and data sharing, access control policies need to be
continuously updated. Unfortunately, to err is human—sysadmins
often make mistakes such as over-granting privileges when chang-
ing access control policies. With today’s limited tooling support
for continuous validation, such mistakes can stay unnoticed for a
long time until eventually being exploited by attackers, causing
catastrophic security incidents.
We present P-DIFF, a practical tool for monitoring access control
behavior to help sysadmins early detect unintended access control
policy changes and perform postmortem forensic analysis upon
security attacks. P-DIFF continuously monitors access logs and
infers access control policies from them. To handle the challenge of
policy evolution, we devise a novel time-changing decision tree to
effectively represent access control policy changes, coupled with a
new learning algorithm to infer the tree from access logs. P-DIFF
provides sysadmins with the inferred policies and detected changes
to assist the following two tasks: (1) validating whether the access
control changes are intended or not; (2) pinpointing the historical
changes responsible for a given security attack.
We evaluate P-DIFF with a variety of datasets collected from five
real-world systems, including two from industrial companies. P-
DIFF can detect 86%–100% of access control policy changes with an
average precision of 89%. For forensic analysis, P-DIFF can pinpoint
the root-cause change that permits the target access in 85%–98% of
the evaluated cases.
CCS CONCEPTS
• Security and privacy → Access control; Web application secu-
rity; • Applied computing → System forensics; • Computing
methodologies → Machine learning approaches;
KEYWORDS
Access control; misconfiguration; policy change; access logs; foren-
sics; decision tree
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3363191
ACM Reference Format:
Chengcheng Xiang, Yudong Wu, Bingyu Shen, Mingyao Shen, Haochen
Huang, Tianyin Xu, Yuanyuan Zhou, Cindy Moore, Xinxin Jin, Tianwei
Sheng. 2019. Towards Continuous Access Control Validation and Forensics.
In 2019 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’19), November 11–15, 2019, London, United Kingdom. ACM, New York,
NY, USA, 17 pages. https://doi.org/10.1145/3319535.3363191
1 INTRODUCTION
1.1 Motivation
As the de facto mechanism for protecting computer systems against
unauthorized access, access control has been reported as “pro-
foundly broken” due to prevalent misconfigurations introduced by
system administrators (sysadmins) [15, 31, 55, 68]. In recent years,
access control misconfigurations have become one major cause of
security incidents such as data theft and system compromises, as
quantified by security analysis reports [24, 61] and exemplified by
the newsworthy security incidents listed in Table 1.
Organization
Time Incident
2017.6 198 million US voter records leaked [39] Deep Root Analytics
2017.7 14 million customer records leaked [42] Verizon
2017.9 Half million vehicle records leaked [28] SVR Tracking
2018.2 119,000+ personal IDs exposed [29]
2018.3 42,000 patients information leaked [17] Huntington hospital
2018.4 63,551 patients records breached [16]
Middletown medical
2019.1 24 million financial records leaked [19] Ascension
2019.9 20 million citizen records exposed [76] Novaestrat
FedEx
Table 1: Recent publicly-reported security incidents caused
by access control misconfigurations.
One of the key missing pieces in today’s access-control manage-
ment is continuous behavior validation, which allows sysadmins to
validate whether a system behaves as they expect after a config-
uration change. Access control configuration is never a one-time
effort but requires continuous policy changes to accommodate the
dynamics of data and resource sharing, as well as high churn and
updates of new protection domains and organizational roles. 1 The
following lists a few common cases when sysadmins need to modify
the access control policy to accommodate user, data, functionality
and domain changes.
• User change: Users may join, depart or change roles within an
• Data change: Some data may become sensitive or may start to
organization or a project.
contain sensitive information.
1We define an access control policy to be a complete set of access control rules. Each
rule is codified by access control configurations.
• Functionality change: New features, accesses or services are
• Domain change: Data need to be reorganized into different do-
added for the public or a certain group of user to access.
mains or subdomains.
Unfortunately, to accommodate changes listed above, sysadmins
may introduce misconfigurations. Accommodating the changes
may not be easy, because changing the access control policy may
involve modification to multiple components, such as web server,
application server, database and file system, etc. Meanwhile, sysad-
mins may have time pressure when they are requested to make
the changes. One common case is about handling access-denied
issue: when a user complains about being denied to something
that she is supposed to have access, sysadmins need to address the
issue quickly for her. Because of the time pressure, sysadmins may
perform some quick changes as workarounds without carefully
checking if the changes grant the least requested privilege or grant
additional unexpected permissions. In this case, such changes are
prone to be access control misconfigurations. A recent analysis
on the resolutions of real-world access-denied issues shows that
38.1% of the changes introduced misconfigurations that over-grant
permissions and create vulnerabilities [68].
Despite a number of efforts on testing and verifying access con-
trol configurations [8, 9, 15, 20, 34, 37, 54], it is still prohibitively
difficult to eliminate all access control misconfigurations in real-
world systems (§12). Specifically, state-of-the-art detection tools
for access control misconfiguration [8, 9, 15] mostly detect incon-
sistencies of configurations and cannot understand configurations
at a higher policy level. As noted in [15], given frequent configu-
ration changes and their ad-hoc, one-off nature, it is very difficult
for automated tools to deduce the exact and complete list of access
control misconfigurations.
As a consequence, without continuous validation on access con-
trol behavior changes, access control misconfigurations often stay
unnoticed for a long time until being exploited by malicious users
on an attack. The reason is unlike other types of misconfigura-
tions [71, 73], access control misconfigurations cannot be mani-
fested through observable symptoms (e.g., crashing behavior, dys-
functions, or performance degradation). According to a recent re-
port [33], it takes 206 days on average for US companies to detect a
data breach, which is too late for any remedies.
Unfortunately, there is little tooling support for access control
behavior validation. One potential approach is to track all the con-
figuration changes with a version control system, and let sysadmins
validate all the changes. However, there is still a gap between the
static access control configurations and the actual running system
behavior. In many systems, the access control behavior is deter-
mined by multiple heterogeneous components and their configura-
tions. As shown in Figure 1, access control is typically implemented
in heterogeneous configurations and code across multiple differ-
ent components in large-scale, complex systems. It is non-trivial
(if not impossible) to reason about the end-to-end access control
behavior by inspecting the configurations and code statically. This
paper proposes to infer the access control behavior and behavior
changes from the access logs that record the end-to-end access
results (typically the output by the top-tier components). Once a
behavior change is detected, sysadmins will be notified to validate
if the change is intended. Once an unintended change is detected,
sysadmins can fix the access control timely and avoid potential
security incidents (such as data leakage) in the future.
1.2 Contributions
This paper presents P-DIFF, a practical tool for inferring access
control behavior and behavior changes from access logs. As we will
show in §2, existing access logs generated by most software systems
contain enough information for inferring the changes. Therefore,
P-DIFF does not require any modifications to existing systems other
than enabling access logs. In addition, P-DIFF also does not require
sysadmins to record access control configuration changes, which
can be tedious and also sometimes impossible (some changes, e.g.,
file permissions and network-level firewalls can be done by users
or other superusers without sysadmins’ awareness).
By detecting access control behavior changes, P-DIFF effectively
assists sysadmins in the following two important tasks:
• Change validation. When P-DIFF observes changes of access con-
trol behavior, it notifies sysadmins with the observed changes.
This enables sysadmins to examine the changes to identify and
fix access control misconfigurations that open up security vul-
nerabilities.
• Forensic analysis. For postmortem analysis upon a security inci-
dent, P-DIFF can backtrack all the behavior changes related to
a malicious access. This provides clues for sysadmins to under-
stand when and what changes opened up the access. Those clues
can help sysadmins narrow down the changes record they need
to investigate in their logbooks or the version control systems.
There are two major challenges for designing and implementing
P-DIFF. The first challenge is to represent access control behavior in
a generic and informative way. As different systems take different
access attributes to control access (such as IP, user, and URL), it is
necessary to provide the access-decisive attributes together with
the behavior changes so that sysadmins can make informative vali-
dations. However, it is non-trivial to provide a general abstraction
for representing different attributes.
To handle the first challenge, we adopt a decision-tree repre-
sentation to encode access control behaviors in an organized and
condensed rule-like format (referred to as inferred policies). This de-
sign decision is made based on two reasons. First, we observed that
access control decisions are made by a set of binary decisions (cf.
§2). Therefore, a decision-tree structure is capable of encoding them.
Second, the decisive attributes of access control may inherently
have a hierarchical structure, such as the hierarchical namespace
of active directory domains, files and directories, IP addresses, and
URLs. A tree-based structure is a natural fit to effectively encode
those hierarchical attributes.
The second challenge is to handle behavior changes while infer-
ring the decision tree. Existing decision-tree inference algorithms
all rely on an assumption that the encoded rules always have con-
stant results (e.g. ALLOW or DENY for access control). However, this
assumption is not true in the case of access control rules. For exam-
ple, a web server administrator disabled public access to a directory
“ABC” on May 1st, thus accesses to this directory before May are
allowed, and accesses after May 1st are denied. In this case, existing
Figure 1: Examples of access logs (the inputs of P-DIFF) and the configurations and code implementation of access control in
the Wikipedia system. (a) Each component has its own implementation of access control, either in configuration or in code: the
heterogeneity makes comprehension and analysis challenging; (b) The access logs record the end-to-end access control behavior
and has simple and clear semantics. We build our solution, P-DIFF, using only access logs.
First, different software systems implement various access con-
trol models. For instance, the Unix file system adopts discretionary
access control (DAC) [46] to restrict access to files based on the iden-
tity of users and groups. The Apache web server adopts attribute-
based access control (ABAC) [27], e.g., any access from a certain
IP address should be denied (the address is treated as an attribute).
MySQL uses role-based access control (RBAC) [51] where privileges
are granted by assigning one or more roles to each user. Different
access control implementations require distinct access control con-
figurations.
inference algorithms cannot decide whether “ABC” is a decisive
attribute in the rules because of the related result changes (cf. §8).
To address the second challenge, we extend the traditional deci-
sion tree to support time-series information, referred in this paper
as Time-Changing Decision Tree (TCDT). In TCDT, each rule re-
sult is represented as a time series instead of a single binary value
(ALLOW or DENY). We design a new TCDT learning algorithm to
infer the new decision tree by treating access logs as a sequence of
access events ordered by access time instead of an unordered set of
events (cf. §8). TCDT not only can precisely model access control
rules at any given time, but also can capture the evolution of access
control rule changes.
We evaluate P-DIFF with datasets collected from five real systems,
including two from industrial companies. For change validation, P-
DIFF can detect 86%–100% of the rule changes with an average
precision of 89%. For forensic analysis, P-DIFF can pinpoint the
root-cause change that is responsible for permitting the target
access in 85%–98% of the evaluated cases.
2 OBSERVATIONS OF REAL-WORLD ACCESS
CONTROL SYSTEMS
The design of P-DIFF is driven by a few important observations of
real-world access control implementations. This section discusses
these observations and explains the rationales behind our design
decisions.
2.1 Access-Control Configurations
Despite the uniform model of access control (e.g., access-control
matrix [30]), real-world access-control implementations are highly
customized to specific applications, resulting in distinct access-
control configurations in terms of syntax, semantic, and schema.
Second, even for the same access control model, different soft-
ware systems often implement the model differently with cus-
tomized syntax and formats. For instance, many web servers (e.g.,
Apache, Nginx, and IIS) adopt the attribute-based access control
model; however, each of them implements its own configuration
directives and parameters.
The heterogeneity of access control configurations imposes sig-
nificant challenges for building generic, automated tools to directly
interpret and validate configurations. Implementing specific parsers
or interpreters for every target software project requires significant
engineering and maintenance effort.
2.2 Access Logs
We observe that access logs of different software systems tend to
have a unified format and are easy to parse. No matter how complex
the configurations are, access logs record identical information—the
results (either ALLOW or DENY) of an access request— represented
as a tuple  where S, O, A, and R denote subject, object,
action, and result respectively. Within a system, access logs are
typically generated by a few unified logging statements.
Table 2 shows access log formats of nine different software sys-
tems of various types [4, 12, 41, 45, 53, 60]. It shows that most
Type
S
Software
Web server Y
Apache2
Web server Y
Jetty
Y
Squid Proxy Web cache
Database
MySQL
Y
File system Y