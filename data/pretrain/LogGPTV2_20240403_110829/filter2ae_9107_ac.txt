        proxy_buffering off;
        uwsgi_modifier1 9;
        uwsgi_pass jsonrpc;
        uwsgi_read_timeout 3600;
        uwsgi_send_timeout 3600;
    }
在`uwsgi`的定义中找到`jsonrpc`的定义，可以看到它对应的处理程序是`/www/cgi-bin/jsonrpc.cgi`：
    [uwsgi]
    plugins = cgi
    workers = 4
    master = 1
    uid = www-data
    gid = www-data
    socket=127.0.0.1:9000
    buffer-size=4096
    cgi = /jsonrpc=/www/cgi-bin/jsonrpc.cgi
    cgi-allowed-ext = .cgi
    cgi-allowed-ext = .pl
    cgi-timeout = 3600
    ignore-sigpipe = true
跟进去`jsonrpc.cgi`，来看上面的数据包所引发的数据流是怎么传输到`ConfD`的。
把`jsonrpc.cgi`拖到IDA里面，可以看到它会先获取环境变量，然后读取`post`数据，然后调用`parse_json_content`函数去解析`post`过去的`json`数据，最后调用`handle_rpc`去处理。
    int __fastcall main(int a1, char **a2, char **a3)
    {
      content_length_ptr = (int)getenv("CONTENT_LENGTH");
      content_type_ptr = getenv("CONTENT_TYPE");
      http_cookie_ptr = getenv("HTTP_COOKIE");
      ...
      if ( content_length_ptr )
        content_length_ptr = atoi((const char *)content_length_ptr);
      content_ptr = malloc(content_length_ptr + 1);
      content_ptr[fread(content_ptr, 1u, content_length_ptr, stdin)] = 0;
      malloc_ctx(&json_ctx);
      parse_json_content(json_ctx, content_ptr);
      ...
        handle_rpc(json_ctx, &ret_str);
      }
跟进去`handle_rpc`函数，看到它除了输出些日志以外，调用了`post_rpc_request`。
    void __fastcall handle_rpc(ctx *json_ctx, char **ret_str)
    {
      ...
      debug("[%d|%s] - begin.", pid, method);
      ...
        ret = post_rpc_request(json_ctx, (char *)&ptr);
        ...
        info("[%d|%s] - end. elapsed=%lu.%06lu", pid, method, time.tv_sec, time.tv_usec);
      }
    }
`post_rpc_request`是主要的流程分发函数，可以看到用户相关的请求是直接调用`handle_user_rpc_request`函数，而其余的则都会调用`check_login_status`函数对`session`进行校验，然后根据`json`请求当中的不同的`method`调用不同的处理函数。对于漏洞请求的`update-clients`，处理的函数是`handle_action_rpc_request`。
    int __fastcall post_rpc_request(ctx *json_ctx, char *ret_str)
    {
      char *method; // r4
      int ret; // r0 MAPDST
      method = json_ctx->method;
      if ( !method )
        return 0;
      if ( !strcmp(json_ctx->method, "login")
        || !strcmp(method, "logout")
        || !strcmp(method, "u2d_check_password")
        || !strcmp(method, "u2d_change_password")
        || !strcmp(method, "change_password")
        || !strcmp(method, "add_users")
        || !strcmp(method, "set_users")
        || !strcmp(method, "del_users") )
      {
        return handle_user_rpc_request(json_ctx, ret_str);
      }
      if ( !strcmp(method, "get_downloadstatus")
        || !strcmp(method, "get_wifi_button_state")
        || !strcmp(method, "check_config")
        || !strcmp(method, "get_model_tree")
        || !strcmp(method, "get_timezones") )
      {
        if ( check_login_status(json_ctx, 1, 2) )
          return 0;
        ret = handle_status_rpc_request((int)json_ctx, ret_str);
      }
      else if ( !strncmp(method, "get_", 4u) || !strncmp(method, "u2d_get_", 8u) )
      {
        if ( check_login_status(json_ctx, 1, 2) )
          return 0;
        ret = handle_get_rpc_request(json_ctx, ret_str);
      }
      else if ( !strcmp(method, "set_bulk") )
      {
        if ( check_login_status(json_ctx, 2, 2) )
          return 0;
        ret = handle_set_bulk_rpc_request(json_ctx, ret_str);
      }
      else if ( !strncmp(method, "set_", 4u) || !strncmp(method, "del_", 4u) || !strncmp(method, "u2d_set_", 8u) )
      {
        if ( check_login_status(json_ctx, 2, 2) )
          return 0;
        ret = handle_set_del_rpc_request(json_ctx, (int *)ret_str, 1);
      }
      else
      {
        if ( strncmp(method, "action", 6u) && strncmp(method, "u2d_rpc_", 8u) )
        {
          error("ERROR METHOD CASE !!!");
          return 0;
        }
        if ( check_login_status(json_ctx, 1, 2) )
          return 0;
        ret = handle_action_rpc_request(json_ctx, ret_str);
      }
      session_close();
      return ret;
    }
跟进去`handle_action_rpc_request`函数，它会调用`jsonrpc_action_table_by_method`函数，根据`rpc`的内容（样例中是`update-clients`）返回对应的处理函数。在获取`input`对象后，将处理函数`p_action`对象以及`input`参数值，作为参数调用`jsonrpc_action_config`去执行`rpc`调用。
    int __fastcall handle_action_rpc_request(ctx *ctx, _DWORD *ret_str)
    {
      ...
      method = ctx->method;
      params = ctx->params;
      ...
        else if ( !strcmp(method, "action") && json_object_object_get_ex(params, "rpc", &rpc_json_obj) )
        {
          p_action = &action;
          ...
          rpc_str = json_object_get_string(rpc_json_obj);
          ...
          if ( !jsonrpc_action_table_by_method(&action, rpc_str) )
            p_action = 0;
          ...
          if ( json_object_object_get_ex(params, "input", &input_param) )
            params = input_param;
          if ( p_action )
          {
            ret = jsonrpc_action_config((int)p_action, params, (int)&v17);
先跟进去`jsonrpc_action_table_by_method`函数看它是怎么获取处理函数的。函数的定义在`libjsess.so`当中，可以看到它主要是遍历`action`数组，通过`rpc_str`的值来确定具体是哪个`action`来处理`rpc`调用。
    int __fastcall jsonrpc_action_table_by_method(action *ret_action, char *rpc_str)
    {
      ...
        action_table = &json_action_table_ptr;
      action = *action_table;
      memset(ret_action, 0, sizeof(action));
      while ( 1 )
      {
        if ( !action->name )
          return 0;
        if ( !strcmp(rpc_str, action->name) )
          break;
        if ( !++action )
          return 0;
      }
      p_post_handler = &action->post_handler;
      do
      {
        ...
        // 拷贝找到的action到ret_action当中
      }
      while ( !v10 );
      return 1;
    }
`action`结构体定以及`update-clients`对应的`action`的定义如下，可以确定对应的处理函数是`action__maapi`。
    00000000 action          struc ; (sizeof=0x14, mappedto_55)
    00000000 name            DCD ?                   ; offset
    00000004 field_4         DCD ?
    00000008 pre_handler     DCD ?                   ; offset
    0000000C handler         DCD ?                   ; offset
    00000010 post_handler    DCD ?                   ; offset
    00000014 action          ends
    .data:00043BD0                 DCD aUpdateClients      ; "update-clients"
    .data:00043BD4                 DCD 0
    .data:00043BD8                 DCD 0
    .data:00043BDC                 DCD action__maapi
    .data:00043BE0                 DCD 0
找到对应的函数后，处理函数会调用`jsonrpc_action_config`去处理`rpc`请求。跟进去该函数，它会调用上面获取的`action`对象中的函数，对于`update-clients`，则会调用`action__maapi`。
    int  jsonrpc_action_config(action *action, int param_obj, _DWORD *a3))(int, int *)
    {
      ...
      if ( v7 )
        v7 = json_tokener_parse();
      func = (int)action->pre_handler;
      if ( func )
        func = func(v6, &v16);
      ...
      pid = getppid();
      info("[%d|action|%s] - pre-handler %d.", pid, action->name, func);
      handler = action->handler;
      if ( handler )
        func = handler(v16, v9, &v17);
      ...
      post_handler = action->post_handler;
      if ( post_handler )
        func = post_handler(v17, a3);
      ...
    }
跟进去`action__maapi`函数，看到它调用了`jsess_action`，经过跟踪，确定它最终调用的是`mctx_rpc`函数。
    int __fastcall action__maapi(int a1, int a2, int *a3)
    {
      ...
      result = jsess_action(g_h_sess_db);
      ...
    }
    .data:00044248 jmaapi_api      DCD jmaapi_open         ; DATA XREF: LOAD:00000D6C↑o
    .data:00044248                                         ; jsess_set_type:loc_7F48↑o ...
    .data:0004424C                 DCD jmaapi_apply
    .data:00044250                 DCD jmaapi_close
    .data:00044254                 DCD jmaapi_init
    .data:00044258                 DCD jmaapi_get
    .data:0004425C                 DCD jmaapi_set
    .data:00044260                 DCD jmaapi_del
    .data:00044264                 DCD jmaapi_action