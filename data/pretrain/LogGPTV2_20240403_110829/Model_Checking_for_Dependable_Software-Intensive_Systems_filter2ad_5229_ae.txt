(cid:94)(cid:349)(cid:373)(cid:349)(cid:367)(cid:258)(cid:396) (cid:258)(cid:400) (cid:449)(cid:349)(cid:410)(cid:346) (cid:396)(cid:286)(cid:395)(cid:437)(cid:349)(cid:396)(cid:286)(cid:373)(cid:286)(cid:374)(cid:410)(cid:400) (cid:381)(cid:296) (cid:272)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:400)
(cid:94)(cid:349)(cid:373)(cid:349)(cid:367)(cid:258)(cid:396)(cid:3)(cid:258)(cid:400)(cid:3)(cid:449)(cid:349)(cid:410)(cid:346)(cid:3)(cid:396)(cid:286)(cid:395)(cid:437)(cid:349)(cid:396)(cid:286)(cid:373)(cid:286)(cid:374)(cid:410)(cid:400) (cid:381)(cid:296) (cid:272)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:400)(cid:3)
(cid:894)(cid:272)(cid:381)(cid:374)(cid:296)(cid:349)(cid:336)(cid:437)(cid:396)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:272)(cid:396)(cid:286)(cid:258)(cid:410)(cid:286)(cid:282)(cid:3)(cid:349)(cid:374)(cid:400)(cid:349)(cid:282)(cid:286)(cid:3)(cid:258)(cid:3)(cid:272)(cid:381)(cid:373)(cid:393)(cid:381)(cid:374)(cid:286)(cid:374)(cid:410)(cid:895)
(cid:100)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346)(cid:3)(cid:258)(cid:400)(cid:400)(cid:381)(cid:272)(cid:349)(cid:258)(cid:410)(cid:286)(cid:282)(cid:3)(cid:393)(cid:396)(cid:381)(cid:393)(cid:286)(cid:396)(cid:410)(cid:455)(cid:3)(cid:258)(cid:374)(cid:374)(cid:381)(cid:410)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:400)
(cid:100)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346) (cid:258) (cid:373)(cid:381)(cid:282)(cid:286)(cid:367) (cid:381)(cid:296) (cid:396)(cid:286)(cid:395)(cid:437)(cid:349)(cid:396)(cid:286)(cid:373)(cid:286)(cid:374)(cid:410)(cid:400) (cid:258)(cid:400)(cid:400)(cid:381)(cid:272)(cid:349)(cid:258)(cid:410)(cid:286)(cid:282) (cid:410)(cid:381) (cid:410)(cid:346)(cid:286)
(cid:100)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346) (cid:258)(cid:3)(cid:373)(cid:381)(cid:282)(cid:286)(cid:367)(cid:3)(cid:381)(cid:296)(cid:3)(cid:396)(cid:286)(cid:395)(cid:437)(cid:349)(cid:396)(cid:286)(cid:373)(cid:286)(cid:374)(cid:410)(cid:400)(cid:3)(cid:258)(cid:400)(cid:400)(cid:381)(cid:272)(cid:349)(cid:258)(cid:410)(cid:286)(cid:282)(cid:3)(cid:410)(cid:381)(cid:3)(cid:410)(cid:346)(cid:286)(cid:3)
(cid:272)(cid:381)(cid:374)(cid:296)(cid:349)(cid:336)(cid:437)(cid:396)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:894)(cid:410)(cid:346)(cid:286)(cid:3)(cid:258)(cid:271)(cid:400)(cid:410)(cid:396)(cid:258)(cid:272)(cid:410)(cid:349)(cid:381)(cid:374)(cid:3)(cid:367)(cid:286)(cid:448)(cid:286)(cid:367)(cid:895)
(cid:100)(cid:346)(cid:396)(cid:381)(cid:437)(cid:336)(cid:346)(cid:3) (cid:396)(cid:286)(cid:395)(cid:437)(cid:349)(cid:396)(cid:286)(cid:373)(cid:286)(cid:374)(cid:410)(cid:400)(cid:3)(cid:258)(cid:374)(cid:282)(cid:3)(cid:272)(cid:381)(cid:374)(cid:400)(cid:410)(cid:396)(cid:258)(cid:349)(cid:374)(cid:410)(cid:3)(cid:373)(cid:381)(cid:282)(cid:286)(cid:367)(cid:400)
Fig. 2. Modeling of Conﬁgurations
Heterogeneity. AADL and EAST-ADL provide explicit support for speciﬁca-
tion by multiple speciﬁcation languages, such as approved annexes (e.g. Behav-
ioral annex, Error Model annex, etc.) for AADL and extension packages (e.g.
ErrorBehavior, Requirements, Constraints, etc.) for EAST-ADL. AADL pro-
vide additional support for implementation details through predeclared proper-
ties where components can be associated with source text written in software
languages such as C and Ada, modeling languages such as Simulink, and hard-
ware languages such as VHDL. Implicitly, they support speciﬁcation by multiple
languages through model transformation into formal speciﬁcation languages.
Scalability. Both languages have scalability issues since both are ”in-line con-
ﬁguration ADLs”, meaning that components and connectors are not modeled
separately from the conﬁgurations. Adding new components to a conﬁguration
may require modiﬁcations to existing connections, since connections within in-
line conﬁgurations are solely dependent upon the components they connect.
Evolution. Partial architecture speciﬁcations are supported by both languages.
For example, the AADL language allows architectures of components without
component implementation descriptions and with untyped data port interfaces.
EAST-ADL allows architectures lacking of entire abstraction levels.
Requirements. Modeling of requirements on conﬁgurations is similar as mod-
eling of requirements on components in AADL, since conﬁgurations are modeled
inside components. EAST-ADL provide possibilities to associate requirements
to a complete abstraction level.
Non-functional properties. Both languages support modeling of non-
functional properties, such as timing and dependability, for architecture con-
ﬁgurations.
4.4 Dependability
EAST-ADL consist of an explicit dependability package which provides means,
such as hazard analysis, structuring of safety requirements according to their
Developing Dependable Software-Intensive Systems: AADL vs. EAST-ADL
115
purpose in the safety life-cycle, formalizing requirements through safety con-
straints, analysis of fault propagation through error models and structuring evi-
dence of safety, to specify and classify dependability. The dependability package
is constructed to support the automotive safety standard ISO/DIS 26262. The
AADL language does also support dependability modeling through the Error
model annex, which deﬁnes a sub-language for modeling of error models that
can be associated with AADL components. Through the error modeling fea-
tures, the annex enables modeling and assessment of redundancy management,
risk mitigation and dependability in architectures.
4.5 Timing
Speciﬁcation of timing is provided by the AADL language through timing prop-
erties (such as deadlines, worst-case execution time, arrival rate, period etc.) as
well as predeﬁned concurrency, interaction and execution semantics. AADL has
tool support for timing analysis through the Cheddar tool [14] and the Oca-
rina tool-suite [15]. Cheddar is a free real-time scheduling tool for analysis of
temporal constraints. The tool supports both cyclic and aperiodic tasks, as well
as a wide range of scheduling policies such as Rate Monotonic (RM), Earliest
Deadline First (EDF), Deadline Monotonic, etc. Ocarina provides schedulability
analysis of AADL models. EAST-ADL on the other hand has an explicit timing
package, as with dependability, which provides means for modeling structures
of timing constraints and timing descriptions. A timing structure is based on
events and event chains that can be modeled across all abstraction levels. An
event describes a distinct point in time where a change of state in the system
takes place or it may also be an report of the current state. An event chain
describes the temporal behavior of steps in a system, where the behavior is ex-
pressed by two related groups of events: stimulus and response. The chains is
also used to specify built-in timing requirements on the diﬀerent steps in the sys-
tem. Timing analysis of EAST-ADL models is supported by the MARTE UML
proﬁle through the Papyrus add-in [16].
5 Conclusion
In this paper, we addressed the importance of an ADL for dependable software-
intensive systems to support activities such as analysis, V&V, code genera-
tion/synthesis, etc., and at the same time support understandability and mutual
communication. The classiﬁcation and comparison framework for software Ar-
chitecture Description Languages [6] developed by Medvidovic and Taylor was
extended and used to compare the levels of support AADL and EAST-ADL
provide these two aspects. The framework highlighted several areas when the
languages were compared. One area was frequently highlighted during the com-
parison, which is that the metamodel of EAST-ADL has possibilities to describe
systems at higher abstraction levels compared to the AADL standard. EAST-
ADL provides means to model component types such as features, devices and
116
A. Johnsen and K. Lundqvist
functions of automotive systems, where a more detailed software architecture
of concrete software components can be modeled by AUTOSAR, a complemen-
tary language to EAST-ADL. AADL on the other hand, models a system using
abstractions of concrete system elements (e.g. processes and threads), which pro-
vide less freedom of the structure and how the functionality is obtained in the
implementation. As EAST-ADL’s point of view is on a higher abstraction level,
hiding implementation solutions behind abstract features, devices and function-
alities, it concentrates on system aspects of importance between the main parties
within the automotive industry (e.g. between suppliers and OEMs) such as mod-
eling of requirements, dependability, variability and timing of the system. This
can be concluded in that the gap between an architecture description artifact
and its implementation is larger when developing systems using EAST-ADL
compared to using AADL, whereas the gap between the understandability of a
system (as well as the controllability and the communicability) and its complex-
ity is smaller. Therefore, EAST-ADL tend to primarily focus on understandabil-
ity and communication of systems whereas AADL tend to be more appropriate
for analysis tools, model checkers and compilers.
References
1. Wirsing, M.: Report of the beyond the horizon thematic group 6 on software in-
tensive systems. Technical report, Thematic Group 6: Software-Intensive Systems
(2006)
2. As-2 Embedded Computing Systems Committee SAE. Architecture Analysis &
Design Language (AADL). SAE Standards no. AS5506 (2004)
3. The ATESST Consortium. East-adl 2.0 speciﬁcation (November 2010),
http://www.atesst.org
4. ATESST2. Advancing traﬃc eﬃciency and safety through software technology
(November 2010), http://www.atesst.org
5. Medvidovic, N., Rosenblum, D.S.: Domains of concern in software architectures and
architecture description languages. In: Proceedings of the Conference on Domain-
Speciﬁc Languages (DSL 1997), p. 16. USENIX Association, Berkeley (1997)
6. Medvidovic, N., Taylor, R.N.: A classiﬁcation and comparison framework for soft-
ware architecture description languages. IEEE Trans. Softw. Eng. 26(1), 70–93
(2000)
7. Feiler, P.H., Gluch, D.P., Hudak, J.J.: The architecture analysis and design lan-
guage (aadl): An introduction. Technical report (2006)
8. Hudak, J., Feiler, P.: Developing aadl models for control systems: A practitioner’s
guide. Technical report, CMU Software Engineering Institute (SEI) (2007)
9. As-2 Embedded Computing Systems Committee SAE. Architecture Analysis &
Design Language (AADL). SAE Standards no. AS5506A (2009)
10. Cuenot, P., Frey, P., Johansson, R., L¨onn, H., Reiser, M.-O., Servat, D., Tavakoli
Kolagari, R., Chen, D.J.: Developing automotive products using the east-adl2, an
autosar compliant architecture description language. In: European Congress on
Embedded Real-Time Software (ERTS), Toulouse, France (2008)
11. AUTOSAR. Automotive open system architecture (November 2010),
http://www.autosar.org
Developing Dependable Software-Intensive Systems: AADL vs. EAST-ADL
117
12. Franca, R.B., Bodeveix, J.-P., Filali, M., Rolland, J.-F., Chemouil, D., Thomas,
D.: The aadl behaviour annex – experiments and roadmap. In: ICECCS 2007:
Proceedings of the 12th IEEE International Conference on Engineering Complex
Computer Systems, pp. 377–382. IEEE Computer Society, Washington, DC, USA
(2007)
13. SysML. Systems modeling language (November 2010), http://www.sysml.org
14. The cheddar project: a free real time scheduling analyzer (November 2010),
http://beru.univ-brest.fr/~singhoff/cheddar/
15. Ocarina: An aadl model processing suite (November 2010),
http://www.ocarina.enst.fr
16. Papyrus for east-adl (November 2010), http://www.papyrusuml.org