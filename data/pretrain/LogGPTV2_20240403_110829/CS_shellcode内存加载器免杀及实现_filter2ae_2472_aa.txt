# CS shellcode内存加载器免杀及实现
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> 相关代码以及免杀项目实现:  
> [https://github.com/crisprss/Shellcode_Memory_Loader](https://)
## 0x01.前言
前段时间看到小刚师傅的文章分享了几个加载器的相关实现,本篇文章在此基础上扩展了一些加载器实现的思路,并使用C#结合反射注入的方式实现发现免杀效果挺不错,最近用Golang结合内存加载以及其他免杀细节的方式重构了一遍,基本能过常见杀软和Defender,因此在这里记录一下内存免杀的思路以及相关实现细节,已将Golang实现上传至项目
## 0x02.何为内存加载免杀
免杀的方式多种多样,例如分离免杀、通过反射等方式,但其本质其实是一种特征码免杀技术,首先我们要知道
**特征码查杀恶意病毒是运用程序中某一段或几段64字节以下的代码作为判别程序病毒的主要依据**
分离免杀之所以能获得很好的效果就是因为shellcode加载器本身并不包含恶意代码，自然也不会包含恶意软件的特征码，而只有当加载器运行时，它才会从程序之外加载shellcode执行,通过这种方式能够有效避免基于特征码的查杀方式,当然也是偏静态的
那么基于shellcode的分离免杀,PE文件同样也能实现,将PE文件以某种加密方式进行存储后使用加载器读取PE文件并且解密,最后放入到内存当中执行,那么该程序被识别为恶意程序的可能性就大大降低了,实际上反射DLL注入也是基于这样,通过从内存中而不是在磁盘加载DLL,这样避免了文件落地
试想我们开辟一块内存,然后直接将shellcode写入到对应的内存中并且该内存是可读可写可执行的状态,那么这种方式太容易被AV所查杀,因此当我们如果是利用Windows自身提供的API来将加密或者封装好的shellcode写入到内存执行的话,将会大大增加查杀的难度
## 0x03.通过UUID方式实现内存加载
利用UUID向内存写入shellcode的方式早在17年就已经出现,不过在近一年中国内也是利用较多,俺在今年HVV中查到的样本还有利用UUID方式免杀的(x
###  3.1 UUID是什么
通用唯一识别码(UUID),是用于计算机体系中以识别信息数目的一个128位标识符，根据标准方法生成，不依赖中央机构的注册和分配，UUID具有唯一性。
> 这里注意一下UUID是一种标准而GUID是UUID标准的一种具体实现
###  3.2 如何转换UUID
Python的官方文档中记录了UUID转换的函数以及相关原型和用法  
[https://docs.python.org/3/library/uuid.html](https://)  
这里要注意的是`uuid.UUID`函数接受一个16个字节的byte,因为前文说过uuid是一个128位的标识符也就是16字节,当剩余字节数不满16个可添加`\x00`补充字节数
如果我们要将shellcode转为UUID格式,注意就需要将全部的`shellcode`全部转化为uuid  
最后`shellcode`转为UUID的效果就是这样:
###  3.3 UUID如何写入内存
我们从MSDN上关注下这两个API函数  
 **1.UuidFromStringA**
我们需要提供两个参数,指向UUID字符串的指针,这里也就是我们之前转换后的UUID字符串,后一个参数可以理解为就是内存中的一块区域,将UUID转化成二进制写入到了这一块内存区域中,因此这一块内存通过转化后已经写入shellcode
> 注意该API是调用了动态链接库，因此我们在使用过程中也需要进行链接:  
>
因此利用的时候,首先我们需要创建一块内存,这里使用`HeapCreate`创建内存,然后申请内存的大小,并且设置该内存为可读可写可执行,注意申请内存的大小`len(shellcode)*16`
因为有多少UUID转化为二进制后就会有多少个16字节,因此申请内存时也需要注意这个问题
在实现过程中还需要考虑一些细节上的实现,例如在申请内存的API函数选择上,传统的`VirtualAlloc/HeapAlloc`等方式可能已经被杀软Hook,在这里我经过多次比对,在`RtlCopyMemory`和`ZwAllocateVirtualMemory`中选择了后者,使用内核层面Zw系列的API，绕过杀软对应用层的监控
这里比较粗暴的设置了申请内存的大小为`0x100000`,然后我们要对每一个UUID逐个调用`UuidFromStringA`函数写入到我们申请的内存中
> 注意每一次UUID的转换都会伴随内存地址都会增大16字节  
>
###  3.4 如何执行内存中的shellcode
其实执行的方式也有多种多样,一方面我们可以直接调用Golang的syscall包从底层来直接执行
> syscall包包含一个指向底层操作系统原语的接口。
尽管 Go 语言具有cgo这样的设施可以方便快捷地调用 C 函数，但是其还是自己对系统调用进行了封装，以`amd64`架构为例， Go
语言中的系统调用是通过如下几个函数完成的：
    // In syscall_unix.go
    func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)
    func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)
    func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno)
    func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)
在这里介绍另外一种通过函数回调方式执行shellcode的函数`EnumSystemLocalesA`
**细节1**  
为了避免直接调用syscall,我们可以通过利用这种较为冷门的API函数来执行内存中的shellcode同样可以避开杀软的监控,通过callback方式来触发执行shellcode的方式可以参考:  
 ****
    1.EnumTimeFormatsA
    2.EnumWindows
    3.EnumDesktopWindows
    4.EnumDateFormatsA
    5.EnumChildWindows
    6.EnumThreadWindows
    7.EnumSystemLocales
    8.EnumSystemGeoID
    9.EnumSystemLanguageGroupsA
    10.EnumUILanguagesA
    11.EnumSystemCodePagesA
    12.EnumDesktopsW
    13.EnumSystemCodePagesW
其中的函数在MSDN中也有对应的说明和其他方法的实现,例如以`EnumSystemLocalesA`为例,就有`EnumSystemLocalesW`和`EnumSystemLocalesEx`均可以替代进行回调
最后回调即可:
最终的免杀效果尚可
免杀项目实现已上传到Github上
## 0x04.利用MAC实现内存加载
我们知道在这里实现内存加载的一种方式就是去寻找各种API,MSDN上提供了各式各样的API,如果某一种API函数实现了某种可逆的变形并且最终写入到二进制指针当中,那么也就实现了内存加载
###  4.1 MAC是什么
MAC地址也叫物理地址、硬件地址，由网络设备制造商生产时烧录在网卡的EPROM一种闪存芯片，通常可以通过程序擦写。IP地址与MAC地址在计算机里都是以二进制表示的，IP地址是32位的，而MAC地址则是48位（6个字节）的
###  4.2 如何将shellcode转为MAC
`RtlEthernetStringToAddressA和RtlEthernetAddressToStringA`便是其中的一种  
分别从MSDN中查看两个API函数的相关信息:  
 **RtlEthernetAddressToStringA函数原型**
    NTSYSAPI PSTR RtlEthernetAddressToStringA(
      const DL_EUI48 *Addr,
      PSTR           S
    );
>