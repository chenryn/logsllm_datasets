Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.
Happy Helming!  
```
If we'd like to initialize the Helm client without installing the Tiller to our Kubernetes cluster, we can add the `--client-only` flag to `helm init`. Furthermore, using the `--skip-refresh` flag together allows us to initialize the client offline.
Helm 客户端能够从命令行搜索可用的图表:
```
$ helm search
NAME                          VERSION     DESCRIPTION
stable/aws-cluster-autoscaler 0.2.1       Scales worker nodes within autoscaling groups.
stable/chaoskube              0.5.0       Chaoskube periodically kills random pods in you...
...
stable/uchiwa                 0.2.1       Dashboard for the Sensu monitoring framework
stable/wordpress              0.6.3       Web publishing platform for building blogs and ...  
```
让我们从存储库中安装一个图表，比如最后一个，`wordpress`:
```
$ helm install stable/wordpress
NAME:   plinking-billygoat
LAST DEPLOYED: Wed Sep  6 01:09:20 2017
NAMESPACE: default
STATUS: DEPLOYED
...  
```
Helm 中部署的图表是一个版本。在这里，我们安装了一个版本`plinking-billygoat`。一旦 Pod 和服务准备就绪，我们就可以连接到我们的站点并检查结果:
![](img/00148.jpeg)
一个版本的拆卸也只需要一行命令:
```
$ helm delete plinking-billygoat
release "plinking-billygoat" deleted 
```
Helm leverages ConfigMap to store the metadata of a release, but deleting a release with `helm delete` won't delete its metadata. To wholly clear these metadata, we could either manually delete these ConfigMaps or add the `--purge` flag when executing `helm delete`.
除了管理我们集群中的包之外，Helm 带来的另一个价值是它被建立为共享包的标准，因此它允许我们直接安装流行的软件，比如我们安装的 Wordpress，而不是为我们使用的每个软件重写清单。
# 被未来的基础设施所吸引
很难判断一个工具是否合适，尤其是在选择集群管理软件来支持业务任务时，因为每个人面临的困难和挑战各不相同。除了诸如性能、稳定性、可用性、可伸缩性和可用性等客观问题之外，实际情况也是决定的重要部分。例如，选择栈来开发绿地项目和在庞大的遗留系统上构建附加层的观点可能是多种多样的。同样，由一个高凝聚力的 DevOps 团队和一个以旧方式工作的组织提供的运营服务也可能导致不同的选择。
除了 Kubernetes 之外，还有其他平台也以编排容器为特色，它们都提供了一些简单的入门方法。让我们后退一步，对它们进行概述，找出最适合的。
# Docker 群体模式
swarm mode([https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/))是 Docker 自 1.12 版本以来集成在 Docker 引擎中的原生管弦乐器。因此，它与 Docker 本身共享相同的应用编程接口和用户界面，包括 Docker 编写文件的使用。这种程度的集成被认为是有利也有弊，这取决于人们是否愿意使用栈，因为所有组件都来自同一个供应商。
集群由管理者和工作人员组成，其中管理者是共识组的一部分，以保持集群的状态，同时保持高可用性。启用集群模式非常容易。大致来说，这里只有两步:用`docker swarm init`创建集群，用`docker swarm join`加入其他管理人员和工人。此外，Docker 提供的 Docker Cloud([https://cloud.docker.com/swarm](https://cloud.docker.com/swarm))帮助我们在各种云提供商上引导一个 swam 集群。
群模式附带的特性是我们期望在容器平台中拥有的特性，也就是说，容器生命周期管理、两种调度策略(复制和全局，分别类似于 Kubernetes 中的 Deployment 和 DaemonSet)、服务发现、机密管理等等。还有一个入口网络，工作方式类似于 Kubernetes 中的 NodePort 类型的服务，但是如果我们需要一个 L7 层的 LoadBalancer，我们将不得不调出一些东西，比如 nginx 或者 Traefik。
总之，集群模式提供了一个选项来编排容器化的应用，一旦开始使用 Docker，这些应用就会开箱即用。与此同时，由于它与 Docker 和简单架构使用相同的语言，它也被认为是所有选择中最容易的平台。因此，选择集群模式来快速完成一些事情确实是合理的。然而，它的简单性有时会导致缺乏灵活性。例如，在 Kubernetes 中，我们仅仅通过操作选择器和标签就可以使用蓝/绿部署策略，但是在集群模式中没有简单的方法可以做到这一点。由于群模式仍在积极开发中，例如在 17.06 版本中引入了类似于 Kubernetes 中的 ConfigMap 的存储配置数据的功能，我们肯定可以期待群模式在保持其简单性的同时在未来变得更加强大。
# 亚马逊 EC2 容器服务
EC2 容器服务(ECS，[https://aws.amazon.com/ecs/](https://aws.amazon.com/ecs/))是 AWS 对 Docker 热潮的回应。与谷歌云平台和微软 Azure 提供开源集群管理器(如 Kubernetes、Docker Swarm 和 DC/OS)不同，AWS 坚持自己的方式来响应容器服务的需求。
ECS 将它的 Docker 作为它的容器运行时，它也接受语法版本 2 中的 Docker Compose 文件。此外，ECS 和 Docker Swarm 模式的术语几乎是一样的，比如任务和服务的概念。然而相似之处仅止于此。尽管 ECS 的核心功能很简单，甚至是初级的，但作为 AWS 的一部分，ECS 充分利用其他 AWS 产品来增强自己，例如用于容器联网的 VPC、用于监控和日志记录的 CloudWatch 和 CloudWatch 日志、用于服务发现的带有目标组的应用负载平衡器和网络负载平衡器、用于基于 DNS 的服务发现的带有路由 53 的 Lambda、用于 CronJob 的 CloudWatch 事件、用于数据持久性的 EBS 和 EFS、用于 docker 注册表的 ECR、用于存储配置文件和机密的参数存储和 KMS、用于 CI/CD 的 CodePipeline 等等。还有一个 AWS 产品，AWS Batch([https://aws.amazon.com/batch/](https://aws.amazon.com/batch/))构建在 ECS 之上，用于处理批处理工作负载。此外，来自 AWS ECS 团队的开源工具 Blox([https://Blox . github . io](https://blox.github.io))通过将 AWS 产品连接起来，增强了定制 ECS 未附带的调度的能力，例如类似 DaemonSet 的策略。从另一个角度来看，如果我们把 AWS 作为一个整体来评价 ECS，它确实很强大。
设置一个 ECS 集群很容易:通过 AWS 控制台或 API 创建一个 ECS 集群，并将带有 ECS 代理的 EC2 节点加入集群。好的一点是，主端由 AWS 管理，这样我们就不用再对主端保持警惕了。
总的来说，ECS 很容易上手，尤其是对于熟悉 Docker 以及 AWS 产品的人来说。另一方面，如果我们对当前提供的原语不满意，我们必须用前面提到的其他 AWS 服务或第三方解决方案来完成一些工作，这可能会导致这些服务的不必要的成本以及配置和维护工作，以确保每个组件都能很好地协同工作。此外，ECS 仅在 AWS 上可用，这也可能是人们会认真对待它的一个顾虑。
# 阿帕奇月
*Mesos*([http://mesos.apache.org/)](http://mesos.apache.org/))早在 Docker 掀起容器潮流之前就已经创建了，其目标是在支持不同工作负载的同时，解决在包含通用硬件的集群中管理资源的困难。为了构建这样一个通用平台，Mesos 利用两层架构来划分资源分配和任务执行。因此，执行部分理论上可以扩展到任何类型的任务，包括编排 Docker 容器。
尽管我们在这里只讨论了 Mesos 这个名字，但事实上它基本上负责一层工作，执行部分由其他称为 Mesos 框架的组件完成。例如，Marathon([https://mesosphere.github.io/marathon/](https://mesosphere.github.io/marathon/))和 Chronos([https://mesos.github.io/chronos/](https://mesos.github.io/chronos/))是两个分别部署长时间运行和批处理任务的流行框架，它们都支持 Docker 容器。这样，当提到术语“介子”时，它指的是一个栈，如介子/马拉松/超时空或介子/极光。事实上，在 Mesos 的双层架构下，将 Kubernetes 作为 Mesos 框架运行也是可行的。
坦率地说，一个组织得当的 Mesos 栈和 Kubernetes 在功能方面几乎是一样的，只是 Kubernetes 要求在其上运行的所有东西都应该被容器化，而不管 Docker、rkt 或虚拟机管理程序容器如何。另一方面，由于 Mesos 专注于其通用调度并倾向于保持其核心小，一些基本功能应该单独安装、测试和操作，这可能会带来额外的努力。
中间层发布的 DC/OS([https://dcos.io/](https://dcos.io/))利用中间层的优势构建了一个全栈集群管理平台，在能力上更接近 Kubernetes。作为构建在 Mesos 之上的每个解决方案的一站式商店，它捆绑了几对组件来驱动整个系统，马拉松用于常见的工作负载，节拍器用于计划的作业，Mesos-DNS 用于服务发现，等等。尽管这些构建块看起来很复杂，但 DC 操作系统通过云信息/地形模板及其包管理系统中间层宇宙，极大地简化了安装和配置工作。从 DC/OS 1.10 开始，Kubernetes 正式集成到 DC/OS 中，可以通过宇宙安装。托管的 DC/操作系统也可以在一些云提供商上使用，例如微软 Azure。
下面的截图是 DC/操作系统的网络控制台界面，它聚合了来自每个组件的信息:
![](img/00149.jpeg)
到目前为止，我们已经讨论了 DC/操作系统的社区版本，但是一些功能仅在企业版中可用。他们大多是关于安全和合规的，名单可以在[https://mesosphere.com/pricing/](https://mesosphere.com/pricing/)找到。
# 摘要
在本章中，我们简要讨论了适用于某些更具体用例的 Kubernetes 特性，并指导了在哪里以及如何利用强大的社区，包括 Kubernetes 孵化器和包管理器 Helm。
最后，我们回到开头，为同一个目标概述了其他三种流行的替代方案:编排容器，以便在选择下一代基础架构时将结论留在脑海中。