In the default installation of CEDET 1.0, the code completion feature is limited to tracking global scope symbols within the current file. This functionality is not significantly different from the built-in completion functions such as `dabbrev-expand` or `hippie-expand`. It does not support completing symbols from imported modules or class properties, and it also fails to handle the `self` keyword.

Is it possible to configure Semantic to address these limitations?

**Postscript:**
The ECB (Emacs Code Browser) successfully recognizes all imports, base classes, and other relevant information. The issue appears to be with the symbol completion, which either works incorrectly or is not properly configured.

---

### Response:

Support for each language in CEDET varies. For Python, the 1.0 release of CEDET was not configured to resolve Python imports into corresponding file names. Additionally, the `self` keyword, similar to `this` in C++, needs to be explicitly added by the completion logic since it is not declared in the code. These features were added to the bzr repository in January of this year. Although I am not a Python programmer, I have heard reports that these updates have fixed many of the basic smart completion features, including the ability to complete symbols from imported libraries. There are also new enhancements in the bzr repository for handling Python system paths.

I recommend downloading the latest version of CEDET from the bzr repository to take advantage of these improvements and see if they meet your expectations for smart code completion.