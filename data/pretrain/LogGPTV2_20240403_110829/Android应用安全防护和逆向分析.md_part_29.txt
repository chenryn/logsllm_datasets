这里找到so中需要hook函数符号，然后直接调用MSHookFunction传入符号，新函数地址，旧函数地址。可以看到在C中指针是多么强大，实现了函数的回调机制，而且非常方便。然后继续来看新定义的hook函数功能：
::: bodypic-c
![](OEBPS/Images/281-3-i.jpg){.calibre686}
:::
::: bodypic-c
![](OEBPS/Images/282-i.jpg){.calibre687}
:::
这里先获取当前进程名称，然后构造dex文件名，保存dex文件，最后一定要记得返回原始的函数功能，不能影响正常的流程。还要记得过滤规则，不要对每个进程都进行操作，并不是每个进程都是有效的。而这些过滤规则是根据自己打印进程名来自行添加即可。
###### 第五步：编写MK文件 {.section-subtitle}
上面代码已经编写完成了，下面来编写编译脚本吧。注意编译之后的文件名一定要以cy结尾，不然是hook是失败的，然后就是需要导入substrate的so库文件：
::: bodypic-c
![](OEBPS/Images/282-2-i.jpg){.calibre688}
:::
###### 第六步：安装并运行 {.section-subtitle}
和之前一样，运行之后，需要重启设备，然后先看看native层的log信息：
::: bodypic-c
![](OEBPS/Images/282-3-i.jpg){.calibre689}
:::
::: bodypic-c
![](OEBPS/Images/283-i.jpg){.calibre690}
:::
然后再去目录中查看保存的dex文件信息，如图19-7所示。
::: bodypic-c
![](OEBPS/Images/19a7-i.jpg){.calibre691}
:::
图19-7 dex文件\
dex文件都保存成功了，这样会发现如果对于早期的加壳应用，可以采用这种方式进行脱壳操作。也不需要用IDA进行调试dump出dex文件了。
[]{#117.xhtml}
#### 19.4 框架使用事项说明 {.bodycontent-title2}
关于Native层Hook就介绍完了，这里还是需要说明几点：
·Hook之前需要分析so文件获取需要Hook的函数名称，参数返回值定义，这个和Hook
Java层一样，必须先找到突破点才能进行下一步。
·Hook可能会有一些错误，因为native层比java层错误信息难发现，所以最好是在某些地方加一些日志观察结果。
如果在使用过程中发现Hook失败，注意检查如下个条件：
·XML中是否配置了权限和入口。
·编译脚本MK中的后缀名是否为cy。
[项目下载地址：]{.yanse}[https://github.com/fourbrother/CydiaSubstrateHook](https://github.com/fourbrother/CydiaSubstrateHook){.calibre32
.pcalibre}
[]{#118.xhtml}
#### 19.5 本章小结 {.bodycontent-title2}
本章主要从Hook Java层和Native层两个方面介绍了Cydia
Substrate框架，关于Hook
Java层功能Xposed框架也可以做到，但是对于Native层功能的Hook操作，还是Cydia
Substrate框架比较好用，有了这个框架再也不畏惧Hook了，Native层代码也可以一览无余。
[]{#119.xhtml}
## 操作篇 {.bodycontent-title}
第20章 静态方式逆向应用
第21章 动态调试smali源码
第22章 IDA工具调试so源码
第23章 逆向加固应用软件技术分析
第24章 逆向应用经典案例分析
第25章 Android中常见漏洞分析
第26章 文件加密病毒Wannacry样本分析
[]{#120.xhtml}
### 第20章 静态方式逆向应用 {.bodycontent-title1}
本章主要介绍Android中如何使用静态方式逆向apk，学习逆向前，需要了解smali语法和arm指令，本章先介绍这两个知识点，然后介绍如何使用IDA工具来分析so文和工具，最后会通过一个案例来分析静态方式逆向apk的流程和注意事项。
[]{#121.xhtml}
#### 20.1 smali语法 {.bodycontent-title2}
smali、baksmali分别是指安卓系统里的Java虚拟机（Dalvik）所使用的一种，dex格式文件的汇编器、反汇编器，其语法是一种宽松式的Jasmin/dedexer语法，而且实现了.dex格式所有功能（注解、调试信息、线路信息等）。
当对apk文件进行反编译后，便会生成此类的文件，其中在Davlik字节码中，寄存器都是32位的，能够支持任何类型，64位类型（Long/Double）用2个寄存器表示；Dalvik字节码有两种类型：原始类型、引用类型（包括对象和数组）。
###### 1.smali指令 {.section-subtitle}
[部分smali指令如下：]{.yanse}
.field private isFlag：z 定义变量
.method 方法
.parameter 方法参数
.prologue 方法开始
.line 12 此方法位于第12行
invoke-super 调用父函数
const/high16 v0，0x7fo3 把0x7fo3赋值给v0
invoke-direct 调用函数
return-void 函数返回void
.end method 函数结束
new-instance 创建实例
iput-object 对象赋值
iget-object 调用对象
invoke-static 调用静态函数
[条件跳转分支指令如下：]{.yanse}
\"if-eq vA，vB，：cond\_\*\*\" 如果vA等于vB则跳转到：cond\_\*\*
\"if-ne vA，vB，：cond\_\*\*\" 如果vA不等于vB则跳转到：cond\_\*\*
\"if-lt vA，vB，：cond\_\*\*\" 如果vA小于vB则跳转到：cond\_\*\*
\"if-ge vA，vB，：cond\_\*\*\" 如果vA大于等于vB则跳转到：cond\_\*\*
\"if-gt vA，vB，：cond\_\*\*\" 如果vA大于vB则跳转到：cond\_\*\*
\"if-le vA，vB，：cond\_\*\*\" 如果vA小于等于vB则跳转到：cond\_\*\*
\"if-eqz vA，：cond\_\*\*\" 如果vA等于0则跳转到：cond\_\*\*
\"if-nez vA，：cond\_\*\*\" 如果vA不等于0则跳转到：cond\_\*\*
\"if-ltz vA，：cond\_\*\*\" 如果vA小于0则跳转到：cond\_\*\*
\"if-gez vA，：cond\_\*\*\" 如果vA大于等于0则跳转到：cond\_\*\*
\"if-gtz vA，：cond\_\*\*\" 如果vA大于0则跳转到：cond\_\*\*
\"if-lez vA，：cond\_\*\*\" 如果vA小于等于0则跳转到：cond\_\*\*
###### 2.smali语法案例分析 {.section-subtitle}
下面是一个简单方法：
::: bodypic-c
![](OEBPS/Images/287-i.jpg){.calibre692}
:::
上面代码反编译之后对应的smali语法如下：
::: bodypic-c
![](OEBPS/Images/287-2-i.jpg){.calibre693}
:::
如果符合if分支则程序往下走，最终return；而如果条件不符合则会走到：cond_0分支，最终执行goto：goto_0走回到：goto_0返回。
[]{#122.xhtml}
#### 20.2 手动注入smali语句 {.bodycontent-title2}
有时候破解应用时，需要通过全局搜索一些关键的字符串来找突破点，但是这招有时候不好使，所以这时需要加一些代码来观察信息了，这里有一个通用的方法就是加入自己的log代码，来追踪代码的执行逻辑，因为这里讲的是静态分析技术，所以就用代码注入技术来跟踪执行逻辑，后面介绍了动态分析技术之后，那就简单了，可以随意打断点来进行调试。这里的添加代码，就是修改smali代码，添加日志信息即可，下面会用例子来进行讲解，这也是最常用的一种技术。
[]{#123.xhtml}
#### 20.3 ARM指令 {.bodycontent-title2}
逆向者必须能看懂汇编代码，就类似于在调试Java层代码的时候一样，必须会smali语法。庆幸的是，这两种语法都不是很复杂，知道一些大体的语法和指令就可以了，下面来看看ARM指令中的寻址方式、寄存器、常用指令，了解这三个知识点，就会对ARM指令有一个大体的了解。
###### 1.ARM指令中的寻址方式 {.section-subtitle}
·立即数寻址
立即数寻址也叫立即寻址，是一种特殊的寻址方式。操作数本身包含在指令中，只要取出指令也就取到了操作数。这个操作数叫做立即数，对应的寻址方式叫作立即寻址。例如：
::: bodypic-c
![](OEBPS/Images/288-i.jpg){.calibre694}
:::
·寄存器寻址
寄存器寻址是利用寄存器中的数值作为操作数，也称为寄存器直接寻址。例如：
::: bodypic-c
![](OEBPS/Images/288-2-i.jpg){.calibre695}
:::
·寄存器间接寻址
寄存器间接寻址就是把寄存器中的值作为地址，再通过这个地址去取得操作数，操作数本身存放在存储器中。例如：
::: bodypic-c
![](OEBPS/Images/288-3-i.jpg){.calibre18}
:::
·寄存器偏移寻址
这是ARM指令集特有的寻址方式，它是在寄存器寻址得到操作数后再进行移位操作，得到最终的操作数。例如：
::: bodypic-c
![](OEBPS/Images/288-4-i.jpg){.calibre157}
:::
·寄存器基址变址寻址
寄存器基址变址寻址又称为基址变址寻址，是在寄存器间接寻址的基础上扩展来的。它将寄存器（该寄存器一般称作基址寄存器）中的值与指令中给出的地址偏移量相加，从而得到一个地址，通过这个地址取得操作数。例如：
::: bodypic-c
![](OEBPS/Images/289-i.jpg){.calibre20}
:::
·多寄存器寻址
这种寻址方式可以一次完成多个寄存器值的传送。例如：
::: bodypic-c
![](OEBPS/Images/289-2-i.jpg){.calibre20}
:::
·堆栈寻址
堆栈是一种数据结构，按先进后出（First In Last
Out，FILO）的方式工作，使用堆栈指针（Stack
Pointer，SP）指示当前的操作位置，堆栈指针总是指向栈顶。例如：
::: bodypic-c
![](OEBPS/Images/289-3-i.jpg){.calibre696}
:::
###### 2.ARM中的寄存器 {.section-subtitle}
R0-R3：用于函数参数及返回值的传递。
R4-R6，R8，R10-R11：没有特殊规定，就是普通的通用寄存器。
R7：栈帧指针（Frame Pointer），指向前一个保存的栈帧（stack
frame）和链接寄存器（link register，lr）在栈上的地址。
R9：操作系统保留。
R12：又叫IP（intra-procedure scratch）。
R13：又叫SP（stack pointer），是栈顶指针。
R14：又叫LR（link register），存放函数的返回地址。
R15：又叫PC（program counter），指向当前指令地址。
###### 3.ARM中的常用指令含义 {.section-subtitle}
ADD：加指令。
SUB：减指令。
STR：把寄存器内容存到栈上去。
LDR：把栈上内容载入一寄存器中。
.W：是一个可选的指令宽度说明符。它不会影响为此指令的行为，它只是确保生成32位指令。Infocenter.arm.com的详细信息。
BL：执行函数调用，并把使lr指向调用者（caller）的下一条指令，即函数的返回地址。
BLX：同上，但是在ARM和thumb指令集间切换。
CMP：指令进行比较两个操作数的大小。
###### 4.ARM指令简单代码段分析 {.section-subtitle}
C代码：
::: bodypic-c
![](OEBPS/Images/289-4-i.jpg){.calibre697}
:::
::: bodypic-c