2.  然后，复制粘贴或键入四行代码。
3.  之后，点击 *Esc* 键，输入 **:wq！**写 **(w)** 你的文件并退出 **(q)** 文本编辑器。
下一步是执行 **docker build** 来构建映像。我们将向该命令添加最后一位，即向我们的映像添加一个标签，这样我们就可以用一个有意义的名称来称呼它。为了建立形象，你将使用**Docker 建立-t 智能鲸。**命令(别忘了在这里加最后一个句号)。
现在，您将看到 Docker 执行了许多步骤(在本例中为四个)来构建映像。映像构建完成后，您可以运行应用。要运行您的容器，您运行 **docker 运行 smartwhale** ，您应该会看到类似于*图 1.4* 的输出。但是，您可能会看到不同的智能报价。这是由于**财富**应用生成不同的报价。如果多次运行容器，会看到不同的报价出现，如图*图 1.4* :
![Running a custom container using the docker run command](img/B17338_01_04.jpg)
图 1.4:运行自定义容器
我们对容器的概述和演示到此结束。在本节中，您从现有的容器映像开始，并在 Docker Labs 上启动了它。之后，您更进一步，构建自己的容器映像，然后使用该映像启动容器。您现在已经了解了构建和运行容器需要什么。在下一节中，我们将介绍 Kubernetes。Kubernetes 允许您大规模运行多个容器。
## Kubernetes 作为容器编排平台
构建和运行一个容器似乎很容易。然而，当您需要在多个服务器上运行多个容器时，事情可能会变得复杂。这是容器编排者可以提供帮助的地方。容器编排器负责安排容器在服务器上运行，当容器出现故障时重新启动容器，当主机变得不健康时将容器移动到新的主机，等等。
目前领先的配器平台是 Kubernetes([https://kubernetes.io/](https://kubernetes.io/))。Kubernetes 的灵感来自谷歌的博格项目，该项目本身就在生产中运行数百万个容器。
Kubernetes 采用声明式方法进行编排；也就是说，您指定您需要什么，Kubernetes 负责部署您指定的工作负载。您不再需要自己手动启动这些容器，因为 Kubernetes 将启动您指定的容器。
#### 注意
虽然 Kubernetes 曾经支持 Docker 作为容器运行时，但是在 Kubernetes 1.20 版本中，这种支持已经被否决了。在 AKS 中，从 Kubernetes 1.19 开始，**容器**成为默认的容器运行时。
在整本书中，您将构建多个在 Kubernetes 中运行容器的示例，并且您将了解更多关于 Kubernetes 中不同对象的信息。在这一介绍性章节中，您将学习 Kubernetes 中的三个基本对象，您可能会在每个应用中看到:pod、部署和服务。
### 蒲公英中的蒲公英
Kubernetes 中的一个**Pod **是必不可少的调度元素。Pod 是一组一个或多个容器。这意味着一个容器可以包含一个容器或多个容器。当使用单个容器创建容器时，可以交替使用容器和容器这两个术语。然而，术语 pod 仍然是首选，并且是贯穿本书的术语。
当 pod 包含多个容器时，这些容器共享相同的文件系统和相同的网络命名空间。这意味着，当作为容器一部分的容器写入文件时，同一容器中的其他容器也可以读取该文件。这也意味着 pod 中的所有容器都可以使用 localhost 网络相互通信。
在设计方面，您应该只将需要紧密集成的容器放在同一个容器中。想象一下下面的情况:您有一个不支持 HTTPS 的旧 web 应用。您希望升级该应用以支持 HTTPS。您可以创建一个包含旧 web 应用并包含另一个容器的容器，该容器将为该应用执行**传输层安全性** ( **TLS** )卸载，如*图 1.5* 中所述。用户将使用 HTTPS 连接到您的应用，而中间的容器将 HTTPS 流量转换为 HTTP:
![Using two containers in a single pod to support HTTPS traffic](img/B17338_01_05.jpg)
图 1.5:一个进行 HTTPS 卸载的多容器 Pod 的例子
#### 注意
这种设计原则被称为边车。微软有一本免费的电子书，描述了多种多容器 pod 设计和分布式系统设计(https://azure . Microsoft . com/resources/design-distributed-system/)。
无论是单容器还是多容器容器，容器都是短暂的资源。这意味着 pod 可以在任何时候终止，并在另一个节点上重新启动。当这种情况发生时，存储在那个 Pod 中的状态将会丢失。如果需要在应用中存储状态，要么需要将该状态存储在外部存储中，如外部磁盘或文件共享，要么将 Kubernetes 之外的状态存储在外部数据库中。
### 在 Kubernetes 的部署
Kubernetes 中的一个**部署**在 Pod 周围提供了一层功能。它允许您从相同的定义创建多个单元，并轻松地对您部署的单元执行更新。部署还有助于扩展应用，甚至可能自动扩展应用。
在引擎盖下，一个部署创建了一个**副本集**，它将依次创建您请求的副本 Pod 。副本集是 Kubernetes 中的另一个对象。副本集的目的是在任何给定时间保持一组稳定的副本 Pod 运行。如果您对部署执行更新，Kubernetes 将创建一个新的副本集，其中将包含更新的 pod。默认情况下，Kubernetes 将滚动升级到新版本。这意味着它将启动几个新的 Pod ，验证它们是否正确运行，如果是，那么 Kubernetes 将终止旧的 Pod ，并继续这个循环，直到只有新的 Pod 运行:
![Relationship showing that a deployment creates a replicaset, which in turn creates multiple pods](img/B17338_01_06.jpg)
图 1.6:部署、复制集和单元之间的关系
### 库伯内的服务
Kubernetes 中的一个**服务**是一个网络级的抽象。这允许您在单个 IP 地址和单个 DNS 名称下公开多个 PODS。
Kubernetes 中的每个 pod 都有自己的私有 IP 地址。理论上，您可以使用这个私有 IP 地址连接到您的应用。然而，如前所述，Kubernetes PODS 是短暂的，这意味着它们可以被终止和移动，这将改变它们的 IP 地址。通过使用服务，您可以使用单个 IP 地址连接到您的应用。当 pod 从一个节点移动到另一个节点时，服务会确保流量被路由到正确的端点。如果一个服务后面有多个服务单元提供流量，那么流量将在不同的服务单元之间进行负载平衡。
在这一节中，我们介绍了 Kubernetes 和 Kubernetes 的三个基本对象。在下一节中，我们将介绍 AKS。
### 蓝色立方服务
AKS 使创建和管理 Kubernetes 集群变得更加容易。
典型的 Kubernetes 集群由多个主节点和多个工作节点组成。Kubernetes 中的一个节点相当于一台服务器或一台**虚拟机** ( **虚拟机**)。主节点包含 Kubernetes API 和一个包含集群状态的数据库。工作节点是运行实际工作负载的机器。
AKS 使创建集群变得更加容易。创建 AKS 集群时，AKS 会为您设置 Kubernetes 主节点。然后，AKS 将在您的订阅中创建一个或多个**虚拟机扩展集**(**【VMSS】**)，并将这些虚拟机管理程序中的虚拟机转变为您网络中 Kubernetes 集群的工作节点。在 AKS 中，您可以选择使用免费的 Kubernetes 控制平面，或者购买带有财务支持的 SLA 的控制平面。无论是哪种情况，您还需要为托管您的工作节点的虚拟机付费:
![Scheduling pods on nodes in AKS](img/B17338_01_07.jpg)
图 1.7:AKS 中 Pod 的调度
在 AKS 中，运行在 Kubernetes 上的服务与 Azure 负载平衡器集成，Kubernetes Ingresses 可以与 Azure 应用网关集成。Azure 负载平衡器是第 4 层网络负载平衡器服务；应用网关是一个基于第 7 层 HTTP 的负载平衡器。Kubernetes 和这两个服务之间的集成意味着，当您在 Kubernetes 中创建服务或入口时，Kubernetes 将分别在 Azure 负载平衡器或 Azure 应用网关中创建规则。然后，Azure 负载平衡器或应用网关会将流量路由到承载您的 pod 的集群中的正确节点。
此外，AKS 增加了许多功能，使管理集群变得更加容易。AKS 包含将集群升级到较新的 Kubernetes 版本的逻辑。它还可以通过在集群中添加或删除节点来轻松扩展集群。
AKS 还附带了集成选项，使操作更加容易。AKS 集群可以通过与**Azure Active Directory**(**Azure AD**)的集成进行配置，使管理身份和**基于角色的访问控制** ( **RBAC** )变得简单明了。RBAC 是一个配置过程，它定义了哪些用户可以访问资源，以及他们可以对这些资源采取哪些操作。AKS 还可以很容易地集成到 Azure Monitor 的容器中，这使得对应用的监控和故障排除变得更加简单。在本书中，您将了解所有这些功能。
## 总结
在本章中，您学习了容器和 Kubernetes 的概念。您运行了许多容器，从一个现有的映像开始，然后使用您自己构建的映像。在那个演示之后，您被介绍了三个基本的 Kubernetes 对象:pod、部署和服务。
这为剩下的章节提供了上下文，在这些章节中，您将使用微软 AKS 部署容器化的应用。您将看到微软的 AKS 产品如何通过处理许多管理和操作任务来简化部署，如果您管理和操作自己的 Kubernetes 基础架构，您将不得不自己完成这些任务。
在下一章中，您将使用 Azure 门户创建您的第一个 AKS 集群。