### 一、前言
最近在对区块链漏洞进行一些代码研究，在实例复现以及竞赛题目的研究中，我发现整数溢出是现在区块链比较火的漏洞之一。但是整数漏洞的技术难度并不大，容易理解。但是它常常出现在Solidity代码中，容易被攻击者利用。
本篇文章中，我们就针对整数溢出漏洞进行原理上的分析，并对部分实例以及竞赛题目进行线上实验，并提出一些预防措施。
### 二、漏洞介绍
在介绍整数溢出漏洞前，我们需要先简单介绍一下Solidity中的部分语法知识。
在solidity中，我们知道在变量类型中有`int/uint`（变长的有符号与无符号整形）类型。这类变量支持以8递增，支持从uint8到uint256，以及int8到int256。而需要我们注意的时，uint与int默认表示uint256与int256
。
我们知道， **无符号整形** 是计算机编程中一种数值类型，其只能表示非负数（0以及正数）。然而有符号整形(int)可以表示任何规定范围内的整数。
有符号整数能够表示负数的代价是能够存储正数的范围缩小，因为其约一半的数值范围需要表示负数。如：uint8的存储范围为0~255，然而int8的范围为-127~127.
如果用二进制表示的话：
  * **uint8 ：0b00000000 ~ 0b1111111** 每一位都存储相关内容，其范围为0~255 。
  * **int8 ：0b1111111 ~ 0b0111111** 最左边一位表示符号，1表示为负数，0表示为正，范围为 -127~127 。
而整数溢出的概念是什么呢？我们来看一个简单的例子：
    pragma solidity ^0.4.10;
    contract Test{
    ​
      // 整数上溢
      //如果uint8 类型的变量达到了它的最大值(255)，如果在加上一个大于0的值便会变成0
      function test() returns(uint8){
        uint8 a = 255;
        uint8 b = 1;
    ​
        return a+b;// return 0
      }
    ​
      //整数下溢
      //如果uint8 类型的变量达到了它的最小值(0)，如果在减去一个小于0的值便会变成255(uin8 类型的最大值)
      function test_1() returns(uint8){
        uint8 a = 0;
        uint8 b = 1;
    ​
        return a-b;// return 255
      }
    }
在这个例子中，我们知道uint8的范围为——0~255，所以我们的测试代码中定义变量使用了uint8 。
在`test()`中，我们赋值了a，b两个变量，令a+b。
按照我们的理解，a+b = 255+1 =256才对。现在我们进行测试。
我们得到的并不是256，而是0 。
类似的，我们对`test1()`函数进行测试。0 -1 应该为-1，而uint并不包括负数的部分。所以结果应该是什么样子的呢？
我们发现，得到的值为255 。
这就是我们所提及的上下溢。假设我们有一个 uint8, 只能存储8 bit数据。这意味着我们能存储的最大数字就是二进制 `11111111`
(或者说十进制的 2^8 - 1 = 255) 。下溢(underflow)也类似，如果你从一个等于 0 的 uint8 减去 1, 它将变成 255
(因为 uint 是无符号的，其不能等于负数)。
而上面的例子介绍了原理。下面我们将逐步向读者介绍溢出漏洞是如何在生产环境中进行恶意攻击的。
### 三、真实例子
#### 1 模拟场景例子
下面我们看一个真实环境中的真实场景问题。
    pragma solidity ^0.4.10;
    contract TimeLock {
        mapping(address => uint256) public balances;
        mapping(address => uint256) public lockTime;
        function deposit() public payable {
            balances[msg.sender] += msg.value;
            lockTime[msg.sender] = now + 1 weeks;
        }
        function increaseLockTime(uint _secondsToIncrease) public {
            lockTime[msg.sender] += _secondsToIncrease;
        }
        function withdraw() public {
            require(balances[msg.sender] > 0);
            require(now > lockTime[msg.sender]);
            balances[msg.sender] = 0;
            msg.sender.transfer(balances[msg.sender]);
        }
        function getTime() public constant returns(uint256) {
            return lockTime[msg.sender];
        }
    }
上述合约描述了一个银行存定期的合约。
我们在合约中针对每个用户设置了一个`mapping`用于存储定期时间。而键为`address`类型，值为`uint256`类型。
之后我们拥有三个函数--`deposit ()`为存钱函数，并且存储时间至少为一个礼拜；`increaseLockTime
()`为增加存钱时间的函数，用户可以自行增加存款时间；`withdraw
()`为取钱函数，当用户拥有余额并且现在的时间>存款时间后变可以将所有的钱提取出来。
此时，我们可以对漏洞进行分析。倘若用户存钱后想要将钱提取取出来可行吗？根据我们对合约的设置来讲，我们并不希望用户可以提取将钱取出。但是我们来看下面的函数:
    function increaseLockTime(uint _secondsToIncrease) public {
            lockTime[msg.sender] += _secondsToIncrease;
        }
这个函数中我们可以自行传入变量，并更新lockTime[]的值。而我们知道其值的类型为`uint256`，即我们可以使用整数溢出漏洞，传入`2^256-userLockTime`。以进行溢出使变量的值变成0 。下面我们进行测试：
首先我们对合约进行部署：
之后我们存入部分钱：
我们可以查看存入的钱的数量以及时间（一周）。
下一步我们看看能不能提出钱：
发现失败了emmmm。
所以我们现在想办法，传入`2^256-userLockTime`即：`115792089237316195423570985008687907853269984665640564039457584007913129639936
-1546593080`为`115792089237316195423570985008687907853269984665640564039457584007911583046856`。
传入数据，之后我们查看剩余时间：
之后我们就可以把钱取出来了。
#### 2 SMT合约的安全研究
> SmartMesh
> Token是基于Ethereum的合约代币，简称SMT。Ethereum是一个开源的、公共的分布式计算平台，SmartMesh代币合约SmartMeshTokenContract基于ERC20Token标准。漏洞发生在转账操作中，攻击者可以在无实际支出的情况下获得大额转账。
合约源码地址为：`https://etherscan.io/address/0x55f93985431fc9304077687a35a1ba103dc1e081#code`
我们在这里放上关键函数：
    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeSmt,
            uint8 _v,bytes32 _r, bytes32 _s) public transferAllowed(_from) returns (bool){
    ​
            if(balances[_from] < _feeSmt + _value) revert();
    ​
            uint256 nonce = nonces[_from];
            bytes32 h = keccak256(_from,_to,_value,_feeSmt,nonce);
            if(_from != ecrecover(h,_v,_r,_s)) revert();
    ​
            if(balances[_to] + _value < balances[_to]
                || balances[msg.sender] + _feeSmt < balances[msg.sender]) revert();
            balances[_to] += _value;
            Transfer(_from, _to, _value);
    ​
            balances[msg.sender] += _feeSmt;
            Transfer(_from, msg.sender, _feeSmt);
    ​