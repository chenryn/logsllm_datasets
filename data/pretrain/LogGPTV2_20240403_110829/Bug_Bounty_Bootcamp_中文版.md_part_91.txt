an API endpoint that returned user information; it revealed the user's
ID as well as all of the user's friends' IDs. With the ID of both the
user and their friend, I was able to access messages sent between the
two users. By combining two info leaks and using just the user IDs, I
was able to read a user's private messages!
尝试通过替换API调用中的用户ID或其他用户识别参数来查看、修改和删除其他用户的信息。如果用于识别用户和资源的ID不可预测，则尝试通过其他端点的信息泄漏来泄露ID。例如，我曾经发现一个API端点返回用户信息；它显示了用户的ID以及所有用户朋友的ID。有了用户和他们朋友的ID，我就能够访问两个用户之间发送的消息。通过结合两个信息泄漏并仅使用用户ID，我能够阅读用户的私人消息！
In GraphQL, a common misconfiguration is allowing lower-privileged users
to modify a piece of data that they should not via a mutation request.
Try to capture GraphQL queries allowed from one user's account, and see
if you can send the same query and achieve the same results from another
who shouldn't have permission.
在GraphQL中，常见的配置错误是允许权限较低的用户通过变异请求修改他们不应该具有权限的数据。尝试捕捉从一个用户帐户允许的GraphQL查询，并查看是否可以从另一个无权访问的用户发送相同的查询并实现相同的结果。
While hunting for access control issues, closely study the data being
sent back by the server. Don't just look at the resulting HTML page;
dive into the raw API response, as APIs often return data that doesn't
get displayed on the web page. You might be able to find sensitive
information disclosures in the response body. Is the API endpoint
returning any private user information, or sensitive information about
the organization? Should the returned information be available to the
current user? Does the returned information pose a security risk to the
company?
在查找访问控制问题时，密切研究服务器返回的数据。不要只看结果HTML页面，要深入了解原始API响应，因为API经常返回不会显示在网页上的数据。您可能会在响应正文中找到敏感信息披露。API端点是否返回任何私人用户信息或关于组织的敏感信息？返回的信息是否应该提供给当前用户？返回的信息是否对公司构成安全风险？
### Testing for Rate-Limiting Issues {#c24.xhtml#h2-501546c24-0007}
APIs often lack rate limiting; in other words, the API server doesn't
restrict the number of requests a client or user account can send within
a short time frame. A lack of rate limiting in itself is a low-severity
vulnerability unless it's proven to be exploitable by attackers. But on
critical endpoints, a lack of rate limiting means that malicious users
can send large numbers of requests to the server to harvest database
information or brute-force credentials.
API经常缺乏速率限制;
换句话说，API服务器不会限制客户或用户帐户在短时间内可以发送的请求数量。缺乏速率限制本身是低严重性漏洞，除非攻击者证明可以利用它。但是在关键端点上，缺乏速率限制意味着恶意用户可以向服务器发送大量请求以收集数据库信息或暴力破解凭据。
[ ]{#c24.xhtml#Page_366 .pagebreak title="366"} Endpoints that can be
dangerous when not rate limited include authentication endpoints,
endpoints not protected by access control, and endpoints that return
large amounts of sensitive data. For example, I once encountered an API
endpoint that allows users to retrieve their emails via an email ID,
like this:
如果没有速率限制，可能会危险的端点包括身份验证端点、没有访问控制保护的端点以及返回大量敏感数据的端点。例如，我曾经遇到过一个
API 端点，允许用户通过电子邮件 ID 检索他们的电子邮件，就像这样：
    GET /api/v2/user_emails/52603991338963203244
This endpoint isn't protected by any access control. Since this endpoint
isn't rate limited, either, an attacker can essentially guess the email
ID field by sending numerous requests. Once they've guessed a valid ID,
they can access another user's private email.
此端点没有任何访问控制保护。鉴于此端点没有速率限制，攻击者可以通过发送大量请求逐渐猜测电子邮件
ID 字段。一旦他们猜对了一个有效的
ID，他们就可以访问另一个用户的私人电子邮件。
To test for rate-limiting issues, make large numbers of requests to the
endpoint. You can use the Burp intruder or `      curl     ` to send 100
to 200 requests in a short time. Make sure you repeat the test in
different authentication stages, because users with different privilege
levels can be subject to different rate limits.
为了测试速率限制问题，请对端点进行大量请求。您可以使用Burp
Intruder或curl在短时间内发送100到200个请求。请确保在不同的身份验证阶段重复测试，因为不同特权级别的用户可能会受到不同的速率限制。
Be really careful when you are testing for rate-limiting issues because
it's very possible to accidentally launch a DoS attack on the app by
drowning it with requests. You should obtain written permission before
conducting rate-limiting tests and time-throttle your requests according
to the company's policies.
在测试速率限制问题时一定要非常小心，因为很有可能意外地通过请求淹没应用程序来启动DoS攻击。在进行速率限制测试之前，您应该获得书面许可，并根据公司政策对请求进行时间节流。
Also keep in mind that applications could have rate limits that are
higher than your testing tools' capabilities. For instance, applications
could set a rate limit of 400 requests a second, and your tooling may
not be capable of reaching that limit.
请注意，应用程序可能设置比您的测试工具更高的速率限制。例如，应用程序可以设置每秒400个请求的速率限制，而您的工具可能无法达到这个限制。
### Testing for Technical Bugs {#c24.xhtml#h2-501546c24-0008}
Many of the bugs that we've discussed in this book so far---such as SQL
injection, deserialization issues, XXEs, template injections, SSRF, and
RCEs---are caused by improper input validation. Sometimes developers
forget to implement proper input validation mechanisms for APIs.
我们这本书中所讨论的许多漏洞------例如SQL注入、反序列化问题、XXE、模板注入、SSRF和RCE等------都是由于输入验证不当引起的。有时候，开发人员会忘记为API实现适当的输入验证机制。
APIs are therefore susceptible to many of the other vulnerabilities that
affect regular web applications too. Since APIs are another way
applications accept user input, they become another way for attackers to
smuggle malicious input into the application's workflow.
因此，API也容易受到影响常规Web应用程序的许多其他漏洞的攻击。由于API是应用程序接受用户输入的另一种方式，因此它们成为攻击者将恶意输入走私到应用程序工作流程的另一种方式。
If an API endpoint can access external URLs, it might be vulnerable to
SSRF, so you should check whether its access to internal URLs isn't
restricted. Race conditions can also happen within APIs. If you can use
API endpoints to access application features affected by race
conditions, these endpoints can become an alternative way to trigger the
race condition.
如果API端点可以访问外部URL，则可能容易受到SSRF攻击，因此应检查其对内部URL的访问是否受限。在API中也可能会出现竞争条件。如果您可以使用API端点访问受竞争条件影响的应用程序功能，则这些端点可以成为触发竞争条件的替代方式。
Other vulnerabilities, like path traversal, file inclusion, insecure
deserialization issues, XXE, and XSS can also happen. If an API endpoint
returns internal resources via a filepath, attackers might use that
endpoint to read sensitive files stored on the server. If an API
endpoint used for file uploads [ ]{#c24.xhtml#Page_367 .pagebreak
title="367"} doesn't limit the data type that users can upload,
attackers might upload malicious files, such as web shells or other
malware, to the server. APIs also commonly accept user input in
serialized formats such as XML. In this case, insecure deserialization
or XXEs can happen. RCEs via file upload or XXEs are commonly seen in
API endpoints. Finally, if an API's URL parameters are reflected in the
response, attackers can use that API endpoint to trigger reflected XSS
on victims' browsers.
其他漏洞，如路径遍历、文件包含、不安全的反序列化问题、XXE 和 XSS
也可能发生。 如果 API
端点通过文件路径返回内部资源，则攻击者可能利用该端点读取存储在服务器上的敏感文件。
如果用于文件上传的 API
端点不限制用户可以上传的数据类型，则攻击者可能上传恶意文件（如 Web Shell
或其他恶意软件）到服务器。 API 通常还接受以序列化格式（如
XML）的用户输入。 在这种情况下，可能会发生不安全的反序列化或 XXE。 RCE
通过文件上传或 XXE 常见于 API 端点。 最后，如果 API 的 URL
参数在响应中反映出来，攻击者可以利用该 API
端点在受害者的浏览器上触发反射型 XSS。
其他漏洞包括，路径遍历、文件包含、不安全的反序化、XXE 和 XSS
可能会出现。当API
端点返回文件路径的内部资源时，攻击者可能会利用该端点读取存储在服务器上的敏感文件。如果用户在用于文件上传的API端点没有限制上传的数据类型，攻击者可能会上传恶意文件，例如Web
Shell或其他恶意软件，到服务器。API还通常以序列化格式接受用户输入，如XML。在这种情况下，可能会发生不安全的反序列化或XXE。通过文件上传或XXE实现远程代码执行(RCE)
在API端点中很常见。最后，如果API的URL参数在响应中反映出来，攻击者可以利用该API端点，在受害者的浏览器上触发反射型XSS。
The process of testing for these issues will be similar to testing for
them in a regular web app. You'll simply supply the payloads to the
application in API form.
测试这些问题的过程将与在常规Web应用程序中测试它们的过程类似。您只需以API形式向应用程序提供有效负载即可。
For example, for vulnerabilities like path traversals and file-inclusion
attacks, look out for absolute and relative filepaths in API endpoints
and try to mess with the path parameters. If an API endpoint accepts XML
input, try to insert an XXE payload into the request. And if the
endpoint's URL parameters are reflected in the response, see if you can
trigger a reflected XSS by placing a payload in the URL.
例如，对于路径遍历和文件包含攻击等漏洞，要注意API端点中的绝对路径和相对路径，并尝试对路径参数进行干扰。如果API端点接受XML输入，请尝试在请求中插入XXE有效载荷。如果端点的URL参数在响应中反映出来，请尝试将有效载荷放在URL中触发反射型XSS攻击。
You can also utilize fuzz-testing techniques, which we'll discuss in [
Chapter 25 ]{.xref itemid="xref_target_Chapter 25"} , to find these
vulnerabilities.
你也可以利用第25章将会介绍的"模糊测试"技术来发现这些漏洞。
Applications are becoming increasingly reliant on APIs, even as APIs
aren't always as well protected as their web application counterparts.
Pay attention to the APIs used by your targets, and you might find
issues not present in the main application. If you are interested in
learning more about hacking APIs and web applications in general, the
OWASP Web Security Testing Guide (
[https://github.com/OWASP/wstg/](https://github.com/OWASP/wstg/){.LinkURL}
) is a great resource to learn from.
应用程序越来越依赖API，即使API并不总是像它们的Web应用程序对应物那样受到良好的保护。关注目标使用的API，您可能会发现主应用程序中不存在的问题。如果您对学习API和Web应用程序的黑客技术感兴趣，OWASP
Web安全测试指南（https://github.com/OWASP/wstg/）是一个很好的学习资源。
:::
[]{#c25.xhtml}
::: section
# [ [ ]{#c25.xhtml#Page_369 .pagebreak title="369"} 25 ]{.ChapterNumber} [ Automatic Vulnerability Discovery Using Fuzzers ]{.ChapterTitle} {.chapter}
![](image_fi/book_art/chapterart.png)
Whenever I approach a new target, I prefer to search for bugs manually.
Manual testing is great for discovering new and unexpected attack
vectors. It can also help you learn new security concepts in depth. But
manual testing also takes a lot of time and effort, so as with
automating reconnaissance, you should strive to automate at least part
of the process of finding bugs. Automated testing can help you tease out
a large number of bugs within a short time frame.
每当我接近一个新目标时，我更喜欢手动搜索漏洞。手动测试非常适用于发现新的和意想不到的攻击向量。它也可以帮助你深入学习新的安全概念。但手动测试也需要大量的时间和精力，所以与自动化侦察一样，你应该努力自动化至少部分查找漏洞的过程。自动化测试可以帮助你在短时间内找出大量的漏洞。
In fact, the best-performing bug bounty hunters automate most of their
hacking process. They automate their recon, and write programs that
constantly look for vulnerabilities on the targets of their choice.
Whenever their tools notify them of a potential vulnerability, they
immediately verify and report it.
实际上，表现最佳的赏金猎人会自动化他们的绝大部分黑客过程。他们自动化侦查，并编写程序，不断搜索他们选择的目标的漏洞。每当他们的工具通知他们存在潜在漏洞时，他们立即验证并报告。
[ ]{#c25.xhtml#Page_370 .pagebreak title="370"} Bugs discovered through
an automation technique called *fuzzing* , or *fuzz testing* , now
account for a majority of new CVE entries. While often associated with
the development of binary exploits, fuzzing can also be used for
discovering vulnerabilities in web applications. In this chapter, we'll
talk a bit about fuzzing web applications by using two tools, Burp
intruder and Wfuzz, and about what it can help you achieve.
利用称为模糊测试或Fuzzing的自动化技术发现的漏洞现在占新CVE条目的大部分。虽然通常与开发二进制漏洞有关，但Fuzzing也可用于发现Web应用程序中的漏洞。在本章中，我们将介绍使用两个工具Burp
Intruder和Wfuzz来对Web应用程序进行Fuzzing的相关知识，以及它可以帮助您实现什么。
## What Is Fuzzing? {#c25.xhtml#h1-501546c25-0001}
*Fuzzing* is the process of sending a wide range of invalid and
unexpected data to an application and monitoring the application for
exceptions. Sometimes hackers craft this invalid data for a specific
purpose; other times, they generate it randomly or by using algorithms.
In both cases, the goal is to induce unexpected behavior, like crashes,
and then check if the error leads to an exploitable bug. Fuzzing is
particularly useful for exposing bugs like memory leaks, control flow
issues, and race conditions. For example, you can fuzz compiled binaries
for vulnerabilities by using tools like the American Fuzzy Lop, or AFL (
[https://github.com/google/AFL/](https://github.com/google/AFL/){.LinkURL}
).
模糊测试是通过向应用程序发送大量无效和意外的数据，并监视异常情况的过程。有时黑客会为特定目的创建此无效数据;
在其他情况下，他们会随机生成或使用算法生成它。在两种情况下，目标都是诱导意外行为，如崩溃，然后检查错误是否导致可利用的漏洞。模糊测试特别有用于暴露诸如内存泄漏，控制流问题和竞争条件等bug。例如，您可以使用类似美国Fuzzy
Lop的工具（https://github.com/google/AFL/）对编译后的二进制文件进行漏洞扫描。
There are many kinds of fuzzing, each optimized for testing a specific
type of issue in an application. *Web application fuzzing* is a
technique that attempts to expose common web vulnerabilities, like
injection issues, XSS, and authentication bypass.
有许多种模糊测试方法，每种方法都针对特定类型的应用问题进行了优化。Web
应用模糊测试是一种试图暴露常见 Web 漏洞的技术，例如注入问题、XSS
和认证绕过。
## How a Web Fuzzer Works {#c25.xhtml#h1-501546c25-0002}
Web fuzzers automatically generate malicious requests by inserting the
payloads of common vulnerabilities into web application injection
points. They then fire off these requests and keep track of the server's
responses.
Web模糊器通过将常见漏洞的有效载荷插入到Web应用程序的注入点中自动生成恶意请求。然后它们发送这些请求并跟踪服务器的响应。
To better understand this process, let's take a look at how the open
source web application fuzzer Wfuzz (
[https://github.com/xmendez/wfuzz/](https://github.com/xmendez/wfuzz/){.LinkURL}
) works. When provided with a wordlist and an endpoint, Wfuzz replaces
all locations marked `      FUZZ     ` with strings from the wordlist.
For example, the following Wfuzz command will replace the instance of
`      FUZZ     ` inside the URL with every string in the
*common_paths.txt* wordlist:
为了更好地理解这个过程，让我们来看看开源Web应用fuzzer
Wfuzz（https://github.com/xmendez/wfuzz/）是如何工作的。当提供一个字典和一个端点时，Wfuzz会将所有标记为FUZZ的位置替换为来自字典的字符串。例如，下面的Wfuzz命令将使用common_paths.txt字典中的每个字符串来替换URL中的FUZZ实例：
    $ wfuzz -w common_paths.txt http://example.com/FUZZ
You should provide a different wordlist for each type of vulnerability