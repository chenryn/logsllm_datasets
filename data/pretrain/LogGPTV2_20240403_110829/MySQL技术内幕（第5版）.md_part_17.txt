IJanuary
May
April
March
8
AS count
count
GROUP BY Name ORDER BY Month;
。下面这个查询可以确定出在一年的每个月分别有多少位总
---
## Page 69
多少分数参与了各个值的计算。（可能有的学生缺勤或未被统计。）
它们。下面这个查询可以显示出已进行过的每次考试或测验的各种数值特征。它也会显示出有
于确定某个数据列的最小值、最大值、总计和平均值。你甚至可以同时在一个查询语句里使用
出的结果。
须满足的查询条件。
找出来，那么需要用到 HAVING子句。该子句与WHERE 相类似，它们都可用来设定输出行所必
找出哪4个州出生的总统最多，那么可以使用下面这条查询语句：
值
mysql> SELECT
除COUNT（）以外，还有其他几个汇总函数。函数MIN（）、MAX（）、SUM（）和AVG（)可分别用
也可用于查找不重复出现的值，此时使用 HAVING count=1即可。
一般情况下，带有 HAVING子句的查询语句，特别适合于查找在某个数据列里重复出现的
mysql> SELECT state, COUNT(*) AS count FROM president
如果不是想用LIMIT子句来限制查询结果中的记录条数，
mysql> SELECT state, COUNT(*) AS count FROM president
COUNT（）函数可以与 ORDER BY 和LIMIT 组合在一起使用。例如，想要在 president 表里
stateIcount
stateIcount
+--
以
阳以
V
，下面这个查询会告诉你“哪些州曾经出现过两位及以上的总统”：
12
GROUP BY event_id;
COUNT(score) AS count
event_id,
6
8
FROM score
AVG(score) AS average,
MAX(score)-MIN(score)+1 AS span,
MIN(score)
L
9
SUM(score)
MAX(score)
December
November
October
September
August
July
June
222
L8
，与WHERE子句的不同之处在于，它可以引用像COUNT（）那样的汇总函数输
87
AS total,
AS minimum,
653
451
，而是想把COUNT（)的某些特定值
1.4MySOL 教程
49
---
## Page 70
两次检查。如果GROUP BY子句指定了多列，那么WITH ROLLUP 还会再生成其他的超集行，其
条查询语句。只用一条查询语句就能达到目的，当然效率会更高，因为服务器无需对数据进行
值计算出来的。
那样可以对考试成绩进行了汇总以外，还可以产生一个额外的超集行：
分组列里的NULL表明，相应的计数结果就是其前面那些分组统计的汇总值。
类性别的人数进行汇总：
是基于先前那个按性别统计学生人数的示例改进的。WITHROLLUP子句将生成另外一行，对两
子句。它会让MySQL 计算各分组行的“超集”
参考1.4.9.10节。
信息会更具有意义。想要获得该信息，还需要查询 grade_event 表。关于此操作的更多细节请
WITHROLLUP子句很有用，因为它可以让你不必为了获得一些额外的信息，而执行另外一
WITHROLLUP子句还可以与其他聚集函数搭配使用。下面这条语句，除了像前面几个段落
在上面这个输出里，最后一行显示出了一些聚集值，它们都是根据其前面的全部分组统计
如果想要生成额外的输出行，显示出“统计结果的统计”，那么还需要增加一条WITH ROLLUP
mysql> SELECT
mysql> SELECT sex,
很明显，如果从中还能明确地知道event_id 列的值是表示考试还是表示测验，
event_id1
NULL
司
SeX|COUNT(*)
-------
W
event_id | minimum |maximum | span |total | average|count
第1章MySQL入门
------
">GROUP BY event_id WITH ROLLUP;
V
V
V
NULL
FROM score
COUNT(score)AS count
AVG(score)
SUM(score) AS total,
MAX(score)-MIN(score)+1 AS span,
MAX(score)
MIN(score)
event_id,
の
2
+-
minimum
15
1
31
！
AS average,
2
9
AS maximum,
AS minimum,
6
COUNT(*) FROM student GROUP BY SeX WITH ROLLUP;
8
8
L
8
6
=-+-
-------+-
09
maximum1
---+-------+-==---+---==--
100
100
100
2
7
20
2
2
97
20
--+---
span
—-一+------—+---------+-—-----+
12
8
2
12
”（super-aggregate）值。这里有个简单的示例，它
total
6376
2325
2425
2325
2425
383
379
425
439
383
379
425
439
IaverageTcount
15.1379
80.1724
36.8555
14.1852
14.1667
14.0370
14.0370
15.1379
80.1724
14.1852
173
乙
29
2.9
Z乙
29
-+
，那么这些
---
## Page 71
后，这个查询现在变成了下面这个样子：
表变得更加清楚。在后面的连接语句里，我将一直沿用这个习惯。在为每列加上完整的表名之
一个表里，不会产生二义性。
他列（date、score 和category）可以直接使用，不用限定表名，因为它们只存在于其中的
因为这两个表都有event_id 列，所以在不限定表名时，会产生二义性。这条查询语句里的其
列的，其语法形式为：tbl_name.col_name。这样，MySQL便能知道我们是在引用哪个表。
配的每一个行组合，把其中的学生ID、分数、日期和事件类别都显示出来。
把 score表里拥有同一事件 ID的分数都查询出来。对于 grade_event 和 score 两个表里相匹
期的分数的查询语句：
及了一个三方的连接操作，因此我们将它分成两步来实现。第一步，构造一条可以查出给定日
的查询命令，但在那里并未对它进行解释。现在可以对它进行解释了。那条查询语句实际上涉
种嵌套的 SELECT 语句叫子查询（subquery）。本节将对这两种类型的操作进行介绍。
值实现的。另一种类型的多表操作是将一条 SELECT 语句嵌套在另一条 SELECT语句里使用。这
必须把一个表与另一个表中的信息连接起来才能得到结果。此操作是通过匹配多个表里的公共
而无法解答的问题。本节将介绍如何编写涉及多个表的查询语句。
面说过，DBMS 的威力在于它们可以把源自多个表的信息结合起来，从而解答那些只靠单个表
1.4.9.10从多个表里检索信息
中会包含更高层的汇总值。
在连接语句里，我个人比较喜欢在每个列的前面都加上表名，
在从多个表中查询信息时，有一种类型的操作叫连接（join)。之所以叫这个名字，是因为
到目前为止，我们查询出来的信息都是来自一个表。不过，MySQL的能耐远不止于此。前
FROM grade_event INNER JOIN score
SELEcT score.student_id, grade_event.date, score.score, grade_event.category
请注意，我们是如何通过grade_event.event_id和 score.event_id来引用event_id
口ON子句指定了表grade_event和score的连接条件，即这两个表的event_id值必须相
这个查询与之前介绍的查询语句在以下两个方面有着显著的区别。
这个查询先查出给定日期（*2012-09-23＇）的 grade_event 行，再利用此行里的事件ID
先一起来看一个关于连接的例子。1.4.6.2节给出了一个用来检索给定日期考试或测验分数
口FROM子句指定了多个表名，因为需要从多个表里检索信息：
FROM grade_event INNER JOIN score
student_id1
ON grade_event.event_id=score.event_id
互匹配：
->WHEREdate='2012-09-23';
->
>
の
S
乙
2012-09-23
2012-09-23
2012-09-23
date
2012-09-23
息
score l category
18
151Q
3
-+----------+
，从而可以让每一列属于哪个
1.4MySOL 教程
日
S
---
## Page 72
和类别，而不只是一些数字形式的事件ID：
现在，我们来实现这一效果。下面这个查询与前面那个相差无几，但它显示出来的是考试日期
时还不知道如何将 score表连接到 grade_event 表上，将事件 ID 映射到考试日期和类别上去。
出来。在那个查询的输出结果里，只列出了事件ID，而没有列出事件日期或类别，因为我们当
用
个行链接起来，显示出学生的名字。最终的查询语句如下所示：
ID映射成他们的姓名。score表和 student 表都有 student_id列，通过它可以将两个表的各