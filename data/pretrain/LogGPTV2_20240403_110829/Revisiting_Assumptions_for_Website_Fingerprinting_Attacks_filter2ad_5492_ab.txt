devices. The assumption of single page visits has been ex-
plored in [24, 25]. The algorithm in [24] achieves more than
90% accuracy in distinguishing between one-page trace and
two-pages traces that are positive-time separated. However,
in the following steps of finding the split point, the algorithm
has many limitations. First of all, the accuracy is low in the
two cases we consider. When two pages are zero-time sepa-
rated (continuous visits), the accuracy to find the split point,
that is, where the end of one website trace ends and the sec-
ond website trace begins, is around 63%. When two pages are
negative time separated (overlapping visits), the accuracy to
find the split point falls to 32%. [25] improves the accuracy
to find the split point, however, they can only predict the
first webpage in a two-page visit. Another limitation of [24]
and [25] is that they could not directly predict the websites
in the network traffic trace recorded. They attempted to find
the split point first and used previous WF approaches for
predicting the websites, which leads to a higher cost in time.
In our work, we develop two new algorithms to eliminate
these limitations.
3 ANALYSIS OF CONTINUOUS TRACES
Notation Definition
nwb
nunique
npAs
ntotalAs
sblock
pf inal
ltr ace
the number of websites
the number of packets with unique sizes in all
website traces
the number of a packet size p in website A {start}
state
the total number of packets in website A {start} state
the size of each block
a matrix of the probabilities of each packet
belonging to each class/website
the length of a trace
Table 1: Notations used in our algorithm.
In this section, we introduce our algorithm based on Hidden
Markov Model to detect two continuous websites with zero-time
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand330ASIACCS’19 , July, Auckland, New Zealand
W. Cui et al.
Figure 3: State transition of website A.
Figure 6: Example when labeling block 1 and block 3.
separated. We describe the details of the algorithm first, followed by
the experiments and evaluations of this algorithm. The notations
used in the algorithm are introduced in Table 1.
Figure 4: Probability of each packet belonging to each web-
site (the sum of three states for each website) obtained from
the HMM model (for clarity, every 20 data point is plotted.
Best viewed in color).
Figure 5: Probability of predictions for the corresponding
website (probability of website1 belonging to section1 and
probability of website0 belonging to section2) when moving
the split point between section 1 and section 2 from left to
right. See Figure 4 for the actual predictions.
3.1 Algorithm description
Our proposed algorithm can be divided into two steps: 1) Apply
Hidden Markov Model to get the probability matrix, 2) Label each
block based on the probability matrix and pick split point based on
labels.
Step 1: Apply Hidden Markov Model to network traffic trace and
obtain the probability of each class (website) that each packet be-
longs to (probability matrix).
To form states, we split each packet trace into three parts: 1)
start which is first 20 packets in the network traffic trace, 2) middle
which is the collection of packets between start and end, and 3)
end which is last 20 packets in the network traffic trace. We then
build our transition and emission matrices. The dimension of the
transition matrix would be (3 × nwb)2.
We use website A as an example. Assume the length of a trace is
ltr ace; this is the number of packets in website A. Figure 3 shows
the state transition within website A. For a packet from website
probability to belong to A’s start state, 1 − 40
A, it has
lt r ace
probability to belong to A’s middle state and
probability to
belong to A’s end state. If a packet in A is in the start state, then
for the next packet it has a
1−(40/lt r ace)+(20/lt r ace) probability to
1−(40/lt r ace)+(20/lt r ace) probability to
stay in its current state and
change to the middle state. From analysis of the dataset, we find that
20
1−(40/lt r ace)+(20/lt r ace) as 10% and
lt r ace
1−(40/lt r ace)+(20/lt r ace) as 90%. In a similar way, if A is currently
in the middle state, then the next packet could stay in the middle
state with 90% probability or change to the end state with a 10%
probability. When the packet is in the end state, we set that A has an
1.0
nwb +1 to stay in the end state or change to any
equal probability of
other website’s start state. For the emission matrix, the dimension
is (3 × nwb) × nunique where nunique is the number of unique
length of packets in all website traces, where 3 indicates the three
states (start, middle, and end) for each website. For a packet size P
, the total number of packets in
in website A in the start state, npAs
A start state is ntotalAs
. The emission probability for P in A’s start
= 0.9 or 9%, thus we set
1−(40/lt r ace)
20/lt r ace
1−(40/lt r ace)
20/lt r ace
20
lt r ace
20
lt r ace
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand331Revisiting Assumptions for Website Fingerprinting Attacks
ASIACCS’19 , July, Auckland, New Zealand
npAs
ntot alAs
state would then be
. After applying forward and backward
propagation, we obtain the probabilities of each packet belonging to
each class/website as pf inal . For simplicity, we show the prediction
for five websites in Figure 4. The split point happens at packet
number 389 and the network traffic trace is composed of website
1 followed by website 0. The different colors of the lines indicate
different websites. A website’s different states are shown in the
same color. From the figure, we can see that the algorithm predicts
website 1 with a probability higher than any other website until
about the split point where the algorithm predicts website 0 with
the highest probability.
Step 2: Find the split point.
The split point needs to be identified automatically. The main
idea of this step is to traverse each packet in a trace from left to
right as a split point and measure the probability of the website in
two sections, section 1 and section 2, split by the split point. Based
on the example in Figure 4, Figure 5 shows the trend of the ratio in
section 1 and section 2. By moving the split point from left to right,
the probability of predicted website (website 1) in section 1 drops
while the probability of predicted website (website 0) increases in
section 2. The split point 400 occurs at the intersection of the two
lines in Figure 5.
Instead of analyzing each packet, we decide to extract features
from blocks to reduce the processing time. We divide the whole
trace into several blocks with multiple packets; the size of each
block is sblock. Assume the length of a trace is ltr ace, then a trace
is split into nblock = ltr ace/sblock blocks. We name the block from
left to right as block 1, block 2, ..., block n. And we assume the split
point is at the end of one of the blocks.
First, we label each block to indicate whether the block is before
or after the split point. When labeling block m, we consider block
1 to block m to be section 1 and block m + 1 to block n as section
2. The block m is labeled based on the ratio rs1 of the number of
packets belonging to website X in section 1 and the ratio rs2 of the
number of packets belonging to website Y in section 2, where X
and Y indicate the website with the highest ratio in section 1 and
section 2 respectively. We set a ratio bottom line tblock for rs1 and
rs2. When labeling the block, we use 0 to represent the block is
before the split point and 1 to represent the block is after the split
point. If rs1 > tblock, which indicates more than tblock section1 is
composed of website X , and label the block as 0. If rs1  tblock, label the block as 1. If rs1  95%, then we label block 1
as 0, meaning block 1 is before the split point. For labeling block 3,
section 1 is composed of block 1, block 2 and block 3, and section
2 is from block 4 to block 9. For the first 600 packets in section 1,
the probability of website 1 is 67% which is less than 95%, then we
label block 3 as 1 representing block 3 is after the split point. Under
the perfect condition, the split point should be at the point when
rs1 and rs2 meet which is in between 0 and 1 in the label list.
After labeling each block, we pick the split point based on the
sequence of labels. The expected list of labels is {0, 0, ..., 0, 1, 1, ..., 1}.
However, when labeling block n, if none of the highest ratio in
section 1 and section 2 achieve the threshold tblock, the label of
this block will be missed. We propose an algorithm to find the split
point and is able to handle all these situations. The two main cases
are classified by whether 1 is in the label_list.
• label_list contains 1s. If label_list = (0, 0...0, 1, 1...1), that
is the format we expect. 0 represents the block is before the
split point and 1 is the opposite. Then the split point is after
the last block labeled with 0.
If label_list = (1, 1, 1...1, 0, 0.., 0, 1, 1, ..., 1), it shows that
there is some noise at the beginning of the trace as well as
some at the end of the trace. However it does not affect the
process to find the split point since we only focus on the
changes in the trace. We will still assume the split point is
after the block with last 0.
• label_list contains 0s only. The algorithm will check if
enough information is obtained first before making the de-
cision. If blocks are continuously labeled from the first to
last block, then we assume that pattern for the probabilities
of the first website is clear and return the point after the
last labeled block as the split point. This means that the last
block is section 2. Otherwise, the backup algorithm will be
applied.
The pseudo code of the algorithm is outlined in Algorithm 1.
The main idea of the backup algorithm is to find the split point
when the average of the highest ratio of predicted websites in
section 1 and section 2 is higher than any other point. Assume
that point_list = (1 sblock , 2 sblock , ..., n sblock), for split point
i − sblock, where i = 1, ..., n. The two sections split by this point
i are called section 1 and section 2. We denote the percentage of
packets belonging in section 1 as r1i (that is, these packets are
correctly marked in the correct section) and the percentage of
packets belonging in section 2 as r2i. The average ratio at point
i − sblock is avд(r1i , r2i) – the point with the highest average ratio
among all points in the point_list is considered as the split point.
The backup algorithm is rarely called in our simulations.
3.2 Results for Finding Split Point
The values of sblock and tblock are selected as 200 and 95%. We used
the dataset foreground RND_WWW and CUMUL features from [16]
and randomly picked 100 distinct websites with 40 instances each
from the dataset. For each website, 20 instances are applied in
training and the other 20 are used for testing. Training dataset is
then composed of 100 websites with 20 instances each. In order
Session 4B: PrivacyAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand332ASIACCS’19 , July, Auckland, New Zealand
W. Cui et al.
else
else
end if
else
Return backup alдorithm
Return point a f ter last 0
Return point a f ter last 0
if label_list[0] is 1 then
if point_list is not empty then
if label_list[0] is 0 then
if 1 is in label_list then
Algorithm 1 Main Algorithm to Find Split Point
1: procedure get_changepoint(point_list, label_list)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26: end procedure