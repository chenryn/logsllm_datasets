# 十、在云中的 Kubernetes 上部署 Java
在前几章中，我们已经设法在本地运行了 Kubernetes 集群。使用`minikube`是学习 Kubernetes 并在自己的机器上进行实验的好方法。`minikube`供电集群的行为与服务器上运行的普通集群完全相同。但是，如果您决定在生产环境中运行集群软件，那么云是最好的解决方案之一。在本章中，我们将简要介绍在 Docker 上运行的微服务环境中使用云环境的优势。接下来，我们将在亚马逊 AWS 上部署我们的 Kubernetes 集群。配置 AWS 并在其上运行 Kubernetes 从一开始就不是最简单和最直接的过程，但是，遵循本章将向您概述该过程，您将能够快速运行自己的云集群并在其上部署自己或第三方的 Docker 映像。
涵盖的主题列表包括:
*   使用云、Docker 和 Kubernetes 的好处
*   安装所需的工具
*   配置 AWS
*   部署集群
让我们从使用云部署的 Kubernetes 集群的优势开始。
# 使用云、Docker 和 Kubernetes 的好处
在 Kubernetes 集群上部署应用有其优势。它具有故障恢复能力、可扩展性和高效的体系结构。拥有自己的基础设施和使用云有什么区别？这归结于几个因素。首先，它可以显著降低成本。对于不使用时可能会关闭的小型服务或应用，在云中部署应用的价格可以更低，因为硬件成本更低，物理资源的使用会更有效。您不必为不使用计算能力或网络带宽的节点付费。
拥有自己的服务器需要您支付硬件、能源和操作系统软件的费用。Docker 和 Kubernetes 是免费的，即使是出于商业目的；所以，如果你在云中运行，云提供商的费用将是唯一的成本。云提供商经常更新他们的软件栈；拥有最新、最好的操作系统软件版本，您可以从中受益。
说到计算能力或网络带宽，亚马逊或谷歌等大型云提供商无法轻易被击败。他们的云基础设施非常庞大。因为他们为许多不同的客户提供服务，所以他们购买大型、高性能的系统，这些系统提供的性能水平远远高于小公司内部运行的能力。此外，正如您将在本章的下一节中看到的，云提供商可以在几分钟甚至几秒钟内启动新的服务器或服务。因此，如果有需要，新的实例将以对你的软件用户几乎透明的方式被激活。如果您的应用需要处理大量请求，有时将它部署在云中可能是唯一的选择。
至于容错，因为云提供商的基础设施遍布全球(如 AWS 区域，您将在本章后面看到)，所以您的软件可以防故障。停电、火灾或地震等任何单一事故都不能阻止您的应用运行。向等式中添加 Kubernetes 可以向上或向下扩展部署，并将提高应用的容错能力，甚至将完全失败的可能性降至零。
让我们将软件迁移到云上。为此，我们需要首先通过安装所需的软件来创建一个工具集。
# 安装工具
为了能够在 Amazon EC2 上管理 Kubernetes 集群，我们首先需要安装一些命令行工具。当然，使用亚马逊 EC2 网络界面也是可以的。旋转一个集群是一个相当复杂的过程；您将需要一个具有适当访问和权限的用户、集群状态的存储、运行 Kubernetes 主节点和工作节点的 EC2 实例，等等。手动做任何事情都是可能的，但是会很耗时并且容易出错。幸运的是，我们有工具可以为我们自动化大多数事情，这将是 AWS 命令行客户端(`awscli`)和`kops`、Kubernetes 操作、生产级 K8s 安装、升级和管理。尽管有一些要求。`Kops`运行在 Linux 和 macOS 上，是用 Go 写的，跟 Docker 一样。`awscli`是用 Python 写的，所以我们先来关注一下 Python 的安装。
# Python 和 PIP
要运行 AWS 命令行工具(`awscli`，我们需要`python3`出现在我们的机器上。
它可能已经存在，您可以使用以下命令验证:
```
$ python3 --version  
```
如果输出是`command not found`，最快的安装方式就是使用你系统上的包管理器，比如 Debian/Ubuntu 上的`apt`，Fedora 上的`yum`，或者 macOS 上的 Homebrew。如果你在 macOS 上工作，没有安装 Homebrew，我强烈建议你这样做；这是一个很棒的工具，让你有可能轻松地安装成千上万个包以及所有需要的依赖项。家酿啤酒在[https://brew.sh/](https://brew.sh/)免费提供。要安装它，请执行以下操作:
```
$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"  
```
从现在开始，您应该可以在您的 macOS 终端中使用`brew`命令。
要使用`apt`包管理器(在 Debian 或 Ubuntu 上)在 Linux 上安装 Python，请执行以下命令:
```
$ sudo apt-get update
$ sudo apt-get install python3.6  
```
在 macOS 上，这将是以下命令:
```
$ brew install python3  
```
安装 Python 的过程取决于您的机器速度和互联网连接，但应该不会花很长时间。一旦安装了 Python，我们将需要另一个工具，那就是`pip`。`pip`是安装 Python 包的推荐工具。它是用 Python 本身编写的。您可以使用自己选择的包管理器安装它，例如，在 Ubuntu 或 Debian 上执行以下操作:
```
$ sudo apt-get install python3-pip  
```
安装`pip`的另一种方法是使用安装脚本。在这种情况下，Linux 和 macOS 的流程完全相同。首先，我们需要使用以下命令下载安装脚本:
```
$ curl -O https://bootstrap.pypa.io/get-pip.py  
```
过一会儿，我们需要通过执行以下命令来运行安装脚本:
```
$ python3 get-pip.py -user  
```
过一会儿，终端外壳里`pip`应该可以给你了。要验证它是否工作，请执行以下命令:
```
$ pip -V
or 
$ pip --version  
```
现在我们已经安装了 Python 和 pip 并正常工作，是时候继续进行更有趣的事情了，安装亚马逊 AWS 命令行实用程序。
# AWS 命令行工具
亚马逊 **AWS 命令行工具** ( **awscli** )界面是管理您的 AWS 服务的统一工具。`awscli`建立在 Python 的 AWS SDK 之上，提供与 AWS 服务交互的命令。只需最少的配置(实际上，提供登录 id 和密码就足够了，我们稍后会做)，您就可以开始使用 AWS 管理控制台网络界面提供的所有功能。此外，`awscli`不仅是关于我们将用来部署集群的 EC2，还包括其他服务，例如 S3(一种存储服务)。
要安装`awscli`，执行以下`pip`命令:
```
$ pip3 install --user --upgrade awscli  
```
过一会儿，`pip`会在你的驱动器上下载并安装`python3`文件夹结构中的必要文件。在 macOS 和 Python 3.6 的情况下将是`~/Library/Python/3.6/bin`。将这个文件夹添加到`PATH`环境变量中非常方便，可以在 shell 中的任何地方使用。这很简单；您需要在其中一个文件中编辑`PATH`变量，这取决于您使用的 shell:
*   **痛击** : `.bash_profile`、`.profile`或`.bash_login`
*   **Zsh** : `.zshrc`
*   **Tcsh**:T0、`.cshrc`或`.login`
在苹果电脑上，一个示例`PATH`条目可能看起来与此相同:
```
export PATH=~/Library/Python/3.6/bin/:$PATH
```
重新登录或启动新终端后，您可以通过执行以下命令来验证`aws`命令是否可用:
```
$ aws -version
```
正如您在输出中看到的，这将为您提供一个详细的`aws`命令行工具版本，以及运行它的 Python 版本:
![](img/b761dbef-b18f-4237-a211-81f00dc4bf42.png)
`awscli`可以使用了，但是我们还有一个工具要添加到我们的工具设置中。将是库本内斯`kops`。
# 肺
Kubernetes operations 简称`kops`，是生产级 Kubernetes 的安装、升级和管理工具。这是一个命令行实用程序，可以帮助您在 AWS 上创建、销毁、升级和维护高可用性的 Kubernetes 集群。该工具正式支持 AWS。你可以在 GitHub 上找到`kops`版本:[https://github.com/kubernetes/kops/releases](https://github.com/kubernetes/kops/releases)
要在 macOS 或 Linux 上安装，您只需要下载二进制文件，将权限更改为可执行文件，然后就完成了。下载、执行，例如:
```
$ wget \ https://github.com/kubernetes/kops/releases/download/1.6.1/kops-darwin-amd64 $ chmod +x kops-darwin-amd64
$ mv kops-darwin-amd64 /usr/local/bin/kops  
```
或者，如果您使用的是 Linux，请执行以下命令:
```
$ wget \ https://github.com/kubernetes/kops/releases/download/1.6.2/kops-linux-amd64
$ chmod +x kops-linux-amd64
$ mv kops-linux-amd64 /usr/local/bin/kops  
```
或者，使用包管理器将是获取最新的`kops`二进制文件的最简单方法，例如在 macOS 上使用`brew`:
```
$ brew update && brew install kops  
```
请注意，您必须安装`kubectl`([https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/))才能使`kops`工作。如果使用包管理器，对`kubectl`的依赖可能会在`kops`包中定义，所以会先安装`kubernetes-cli`。
最后一个工具是`jq`。虽然不是强制性的，但在处理 JSON 数据时非常有用。所有的 AWS、Kubernetes 和`kops`命令都会发布和接收 JSON 对象，所以有一个解析 JSON 的工具就派上用场了，我强烈推荐安装`jq`。
# japan quarterly 日本季刊
`jq`是一个命令行 JSON 处理器。对于 JSON 数据，它的工作方式类似于`sed`；您可以使用它来过滤、解析和转换结构化数据，就像`sed`、`awk`或`grep`处理原始文本一样简单。`Jq`可在 https://stedolan.github.io/jq/的 GitHub 上获得。安装非常简单；它只是一个单一的二进制文件，可用于 Windows、macOS 和 Linux。只需下载它，并将其复制到您系统上的可用文件夹`PATH`中，以便能够从 shell 或命令行运行它。
假设我们在开始使用 kops 之前已经安装了所有工具，我们将需要首先配置我们的 AWS 帐户。这将创建一个管理用户，然后使用`aws`命令行工具，创建运行`kops`的用户。
# 配置亚马逊 AWS
在建立 Kubernetes 集群之前，AWS 的配置基本上可以归结为创建一个用户。其余都或多或少由`kops`命令自动完成。在我们可以从命令行使用`kops`之前，最好有一个用户专用于`kops`。但是首先，我们需要创建一个管理员用户。我们将从网络管理控制台进行。
# 创建管理用户
根据您选择的自动气象站区域，自动气象站管理控制台在`console.aws.amazon.com`子域可用，例如，这将是[https://eu-central-1.console.aws.amazon.com](https://eu-central-1.console.aws.amazon.com)。登录后，转到安全、身份和合规部分的 IAM 页面，然后切换到用户页面，然后单击添加用户按钮。
您将看到用户创建屏幕:
![](img/c69912d9-670f-4002-a772-92a65fa58d6c.png)
我们将需要这个用户来使用`awscli`，所以我们需要标记的唯一选项是编程访问。点击下一步:权限后，让我们通过将我们的`admin`用户添加到`admin`组来赋予他完全的管理权限:
![](img/5fd2f404-a970-4613-906a-f0e1a7ef797b.png)
在用户创建向导的最后一页，您将能够看到访问密钥标识和秘密访问密钥标识。不要关闭页面，我们需要两者在短时间内使用`awscli`进行验证:
![](img/2bc77b60-5e7b-4e4b-8783-03aeb236b0a8.png)
就这样。我们已经创建了一个拥有所有管理权限和访问密钥的管理员用户。这就是我们使用`awscli`管理 AWS 实例所需要的一切。使用`admin`用户运行`kops`可能不是最好的主意，所以让我们为此创建一个单独的用户。但是，这一次，我们将从命令行执行。与在网络控制台上点击用户界面相比，这要容易得多。首先，让我们使用用户创建向导最后一页上显示的管理员用户的访问密钥标识和`Secret access key ID`进行身份验证。
# 为 kops 创建用户
`kops`用户需要在 AWS 中拥有以下权限才能正常运行:
*   `AmazonEC2FullAccess`
*   `AmazonS3FullAccess`
*   `AmazonRoute53FullAccess`