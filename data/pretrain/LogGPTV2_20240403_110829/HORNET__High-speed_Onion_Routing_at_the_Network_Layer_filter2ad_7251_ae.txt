sions are not yet expired is possible, but such malicious behavior
can be detected by the end hosts. Storing counters at the end hosts
and including them in the payload ensures that replays are recog-
nizable. The risk of detection helps deter an adversary from using
replays to conduct mass surveillance. Furthermore, volunteers can
monitor the network, to detect malicious activity and potentially
identify which nodes or group of nodes are likely to be misbehav-
ing. Honest ASes could control their own nodes as part of an intru-
sion detection system.
5.3 Payload Protection
Payload secrecy. Data packet payloads are wrapped into one layer
of encryption using the key shared between the source and the des-
tination, both for packets sent by the source on the forward and
for packets sent by the destination on the backward path (see Sec-
tion 4.4.4). Assuming that the cryptographic primitives used are
secure, the conﬁdentiality of the payload is guaranteed as long as
the destination is honest. In Section 7.3 we discuss the guarantees
for perfect forward secrecy for the data payload.
Payload tagging or tampering. HORNET does not use per-hop
MACs on the payload of data packets for efﬁciency and because the
destination would not be able to create such MACs for the packets
it sends (since the session keys of the nodes are known only to the
source). The lack of integrity protection allows an adversary to tag
payloads. Admittedly, the use of tagging, especially in conjunction
with replay attacks, allows the adversary to improve the effective-
ness of conﬁrmation attacks. However, end-to-end MACs protect
the integrity of the data, making such attacks (at a large scale) de-
tectable by the end hosts.
5.4 Denial-of-Service (DoS) Resilience
Computational DoS. The use of asymmetric cryptography in the
setup phase makes HORNET vulnerable to computational DoS at-
tacks, where adversaries can attempt to deplete a victim node’s
computation capability by initiating a large number of sessions
through this node. To mitigate this attack, HORNET nodes can
require each client that initiates a session to solve a cryptographic
puzzle [23] to defend against attackers with limited computation
power. Alternatively, ISPs offering HORNET as a service can se-
lectively allow connections from customers paying for the anonym-
ity service.
State-based DoS. HORNET is not vulnerable to attacks where ad-
versaries maintain a large number of active sessions through a vic-
tim node. One of HORNET’s key features is that all state is carried
1449within packets, thus no per-session memory is required on nodes or
rendezvous points.
5.5 Topology-based Analysis
Unlike onion routing protocols that use global re-routing through
overlay networks (e.g., Tor [25] and I2P [49]), HORNET uses short
paths created by the underlying network architecture to reduce la-
tency, and is therefore bound by the network’s physical intercon-
nection and ISP relationships. This is an unavoidable constraint for
onion routing protocols built into the network layer [32, 44]. Thus,
knowledge of the network topology enables an adversary to reduce
the number of possible sources (and destinations) of a ﬂow by only
looking at the previous (and next) hop of that ﬂow. For example,
in Figure 3(a), assume that AS0 is controlled by a passive adver-
sary. The topology indicates that any packet received from AS1
must have originated from a source located at one of {AS1, AS2,
AS3, AS4, AS5}.
We evaluate the information leakage due to the above topology
constraints in the scenario where a single AS is compromised. We
derive AS-level paths from iPlane trace-route data [6], and use AS-
level topology data from CAIDA [36]. For each AS on each path
we assume that the AS is compromised and receives packets from a
victim end host through that path. We compute the end host’s ano-
nymity set size learned by the adversary according to the topology.
For instance, in Figure 3(a), if AS0 is compromised and receives
from AS1 packets originally sent by a user in AS4, we compute the
size of the anonymity set composed of all the ASes that can estab-
lish valley-free paths traversing the link from AS1 to AS0. In this
example, the anonymity set size would be the sum of the sizes of
AS1, AS2, AS3, AS4, and AS5.
Similar to Hsiao et al. [32], we use the number of IPv4 addresses
to estimate the size of each AS. Figure 3(b) plots the CDF of the
anonymity set size for different distances (in number of AS hops)
between the adversary and the victim end host. For adversarial
ASes that are 4 hops away, the anonymity set size is larger than 231
in 80% of the cases. Note that the maximum anonymity set size is
232 in our analysis, because we consider only IPv4 addresses.
Implications of path knowledge. Knowledge about the path, in-
cluding the total length of the path and an adversarial node’s po-
sition on the path, signiﬁcantly downgrades the anonymity of end
hosts. Considering again Figure 3(a), if the adversary controlling
AS0 sees a packet incoming from AS1 and knows that it is 4 hops
away from the source host, he learns that the source host is in AS4.
Compared with the previous case, we see that the anonymity set
size is strongly reduced.
We quantify additional information leakage in the same setting
as the previous evaluation. Figure 3(c) represents the CDFs of the
anonymity set sizes of end hosts according to the distance to the
compromised AS. The anonymity set sizes are below 228 in 90%
of the cases when the adversarial ASes are 4 hops away, with an
average size of 223. This average size decreases to 217 for the
cases where the adversarial ASes are 7 hops away from the target
hosts.
Previous path-based anonymity systems designed for the net-
work layer either fail to hide knowledge about the path [44] or only
partially obscure the information [32]. In comparison, HORNET
protects both the path length and the position of each node on the
path, which signiﬁcantly increases the anonymity-set size.
6. EVALUATION
We implemented the HORNET router logic in an Intel soft-
ware router using the Data Plane Development Kit (DPDK) [4].
To our knowledge, no other anonymity protocols have been im-
Scheme
LAP
Dovetail
Sphinx
Tor
HORNET
Header Length
12 + 2s· r
12 + s· r
3 + 11· r
8 + 3r· s
32 + (2r + 2)s
Sample Length (Bytes)
236
124
296
80
344
Table 2: Comparison between the length of different packet
header formats in bytes. s is the length of symmetric elements
and r is the maximum AS path length. For the sample length,
we select s = 16 Bytes and r = 7. Analysis of iPlane paths shows
that more than 99% of all paths have fewer than 7 AS hops.
plemented in a router SDK. We also implemented the HORNET
client in Python. Furthermore, we assembled a custom crypto
library based on the Intel AESNI cryptographic library [5], the
curve25519-donna library [3], and the PolarSSL libraries [8]. We
use IP forwarding in DPDK as our performance baseline. For com-
parison, we implemented the data forwarding logic from Sphinx,
LAP, Dovetail, and Tor using DPDK and our cryptographic library.
Fairly comparing the performance of anonymity systems at the
application layer with those that operate at the network layer is
challenging. To avoid penalizing Tor with additional propagation
delay caused by longer paths and processing delay from the kernel’s
network stack, we implemented Tor at the network layer (as sug-
gested by Liu et al. [35]). Tor’s design requires relay nodes to per-
form SSL/TLS and transport control. SSL/TLS between neighbor-
ing relays at the application layer maps to link encryption between
neighboring nodes at the network layer, which we consider orthog-
onal but complementary to HORNET (see Section 7.2). Hence, for
fair comparison, we implemented the network-layer Tor without
SSL/TLS or transport control logic. Throughout our evaluation we
refer to this implementation of Tor as L3 Tor.
Our testbed contains an Intel software router connected to a
Spirent TestCenter packet generator and analyzer [10]. The soft-
ware router runs DPDK 1.7.1 and is equipped with an Intel Xeon
E5-2680 processor (2.70 GHz, 2 sockets, 16 logical cores/socket),
64 GB DRAM, and 3 Intel 82599ES 40 Gb/s network cards (each
with 4 10 Gb/s ports). We conﬁgured DPDK to use 2 receiving
queues for each port with 1 adjacent logical core per queue.
6.1 Data Forwarding Performance
Forwarding latency. We measure the CPU cycles consumed to
forward a data packet in all schemes. Figure 4 shows the average
latency (with error bars) to process and forward a single data packet
in all schemes (except Sphinx6) when payload sizes vary. We ob-
serve that HORNET, even with onion encryption/decryption over
the entire payload and extensive header manipulation, is only 5%
slower than LAP and Dovetail for small payloads (64 bytes). For
large payloads (1200 bytes7), HORNET is 71% slower (about 400
nanoseconds slower per packet when using a single core) than LAP
and Dovetail. However, the additional processing overhead enables
stronger security guarantees.
Header overhead. As a result of carrying anonymous session state
(speciﬁcally cryptographic keys) within packet headers, HORNET
6We omit Sphinx from the comparison for better readability.
In
our experiments, processing a Sphinx packet takes more than 640K
cycles due to asymmetric cryptographic operations. This is 3 or-
ders of magnitude slower than that of HORNET, L3 Tor, LAP, and
Dovetail.
7Because LAP, Dovetail, and HORNET all have large packet head-
ers of 300+ bytes, we limit the largest payload in our experiments
to be 1200 bytes.
1450(a)
(b) Without path knowledge
(c) With path knowledge
Figure 3: a) An example AS-level topology with an adversarial AS (AS0). b) CDF of anonymity-set size when a position-agnostic AS
on path is adversarial. “Hops” indicates the number of ASes between the adversarial AS and the victim end host. For example, the
point (25, 0.4) on the line “3 hops” means that the anonymity set size is smaller than 225 in 40% of cases when the end host is 3 hops
away from the adversarial AS. c) CDF of anonymity-set size when an adversarial AS knows its own position on the path. For Figures
b) and c), the maximum size of an end host’s anonymity set is 232 because we consider the IPv4 address space. Therefore, the ideal
case for an end host is that the anonymity set size is 232 with probability equal to 1.
headers are larger than Sphinx, L3 Tor, LAP, and Dovetail headers
(see Table 2). While larger headers reduce net throughput (i.e.,
goodput), this tradeoff appears acceptable: compared to L3 Tor,
no state is required at relay nodes, enabling scalability; compared
to Sphinx, data processing speed is higher; compared to LAP and
Dovetail, HORNET provides stronger security properties.
Figure 4: Per-node data forwarding latency on a 10 Gbps link.
Lower is better.
Goodput. We further compare all the schemes by goodput, which
excludes the header overhead from total throughput. Goodput is a
comprehensive metric to evaluate both the packet processing speed
and protocol overhead. For example, a scheme where headers take
up a large proportion of packets yields only low goodput. On the
other hand, a scheme with low processing speed also results in poor
goodput.
Figure 5(a) and Figure 5(b) demonstrate the goodput of all
schemes (except Sphinx8) on a 10 Gb/s link when varying the num-
ber of hops r, with 40-byte and 1024-byte payloads, respectively.
8Sphinx’s goodput is less than 10 Mb/s in both cases because of
its large packet headers and asymmetric cryptography for packet
processing.
Larger r means larger header sizes, which reduces the resulting
goodput.
When the payload size is small, the goodput of all protocols re-
mains stable. This is due to the fact that no scheme can saturate
the link, and accordingly the goodput differences between the three
schemes mainly reﬂect the different processing latencies among
them. Consequently, L3 Tor’s and HORNET’s goodput is 32% less
than that of LAP and Dovetail. On the other hand, when the pay-
load size is large, all schemes except Sphinx can saturate the 10
Gb/s link. HORNET can reach 87% of LAP’s goodput while pro-
viding stronger security guarantees.
6.2 Max Throughput on a Single Router
To investigate how our implementation scales with respect to the
number of CPU cores, we use all 12 ports on the software router,
generating HORNET data packets at 10 Gb/s on each port. Each
packet contains a 7 AS-hop header and a payload of 512 bytes, and
is distributed uniformly among the working ports. We monitor the
aggregate throughput on the software router.
The maximal aggregate throughput of HORNET forwarding in
our software router is 93.5 Gb/s, which is comparable to today’s
switching capacity of a commercial edge router [1]. When the num-
ber of cores ranges from 1 to 4, our HORNET implementation can
achieve full line rate (i.e., 10 Gb/s per port). As the number of
cores increases to 5 and above, each additional port adds an extra
6.8Gb/s.
6.3 Session Setup Performance
We evaluate the latency introduced by processing setup packets
on each border router. Similar to measuring the latency of data for-
warding, we also instrument the code to measure CPU cycles con-
sumed to process packets in the session setup phase. Table 3 lists
the average per-node latency for processing the two setup packets
in HORNET’s session setup phase. Due to a Difﬁe-Hellman key
exchange, processing the two setup packets in the session setup
phase increases processing latency (by about 240µs) compared to
data packet processing. However, HORNET must only incur this
latency once per session.
SenderSenderSenderAS4AS5AS3AS2AS1InternetAS005101520253032Anonymitysetsize(log2)0.00.20.40.60.81.0CDFofanonymitysetsize2Hops3Hops4Hops5Hops6Hops7Hops05101520253032Anonymitysetsize(log2)0.00.20.40.60.81.0CDFofanonymitysetsize2Hops3Hops4Hops5Hops6Hops7Hops02004006008001000120014001600PayloadSize[Bytes]101102103Latency[Cycles]IPLAPDovetailTorHORNET1451(a) 40 Byte payloads
(b) 1024 Byte payloads
Figure 5: a) Data forwarding goodput on a 10 Gbps link for small packets (40 Byte payloads); b) Data forwarding goodput large
packets (1024 Byte payloads). Higher is better.
Packet
P
P
Latency (K cycles)
661.95 ± 30.35
655.85 ± 34.03
Latency (µs)
245.17 ± 11.24
242.91 ± 12.60
Table 3: Per-node latency to process session setup packets with
standard errors.
7. DISCUSSION
7.1 Retrieving Paths Anonymously in FIAs
HORNET assumes that the source can obtain a forward path and
a backward path to an intended destination anonymously in FIAs.
We brieﬂy discuss how a source host using HORNET can retrieve
two such paths in NIRA, SCION and Pathlets.
SCION hosts rely on path servers to retrieve paths. In SCION,
each destination node registers on a central server its “half” path:
the path to/from the network “core”. To compose full paths (for-
ward and backward paths) between a source and a destination, the
source only needs to anonymously fetch the destination’s half paths
from/to the network core and combine them with its own half paths.
To anonymously retrieve a destination’s half paths, the source
can use one of the following two methods. As a ﬁrst method, the
source can obtain the path to/from a path server through an unpro-
tected query using other schemes, from resolver conﬁguration, or
from local services similar to DHCP. The source then establishes
an anonymous HORNET session to the server. Once a HORNET
session is created, the source can proceed to anonymously request
half paths of the destination. Though it is possible to reuse the
established HORNET session to a path server to query multiple
paths (for different destinations) for better efﬁciency, using a sepa-
rate session to retrieve each path is more secure because it prevents
proﬁling attacks.
Alternatively, the source can leverage a private information re-
trieval (PIR) scheme [20] to retrieve the path anonymously from
the path server, so that the path server cannot distinguish which
destination the source connects to. However, a PIR scheme will
inevitably add bandwidth and computational overhead to both the
source and the path server,
increasing session setup phase la-
tency [37].
In NIRA and Pathlets, the situation is different because rout-
ing information (i.e., inter-domain addresses and route segments,
and pathlets, respectively) is disseminated to users. The source can
therefore keep a database local path database, querying it (locally)
on demand.
7.2 Integrating with Security Mechanisms
at Different Layers
At the network layer, HORNET can beneﬁt from ASes that of-
fer trafﬁc redirection to mitigate topology-based attacks (see Sec-