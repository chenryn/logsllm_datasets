        var wgread sync.WaitGroup
        handlers := s.handlers.(Handlers)
        for _, handler := range handlers.Active {
            wgread.Add(1)
            go func(handler *pcap.Handle) {
                defer wgread.Done()
                var (
                    eth layers.Ethernet
                    ip4 layers.IPv4
                    tcp layers.TCP
                )
                // Interfaces with MAC (Physical + Virtualized)
                parserMac := gopacket.NewDecodingLayerParser(layers.LayerTypeEthernet, ð, &ip4, &tcp)
                // Interfaces without MAC (TUN/TAP)
                parserNoMac := gopacket.NewDecodingLayerParser(layers.LayerTypeIPv4, &ip4, &tcp)
                var parsers []*gopacket.DecodingLayerParser
                parsers = append(parsers, parserMac, parserNoMac)
                decoded := []gopacket.LayerType{}
                for {
                    data, _, err := handler.ReadPacketData()
                    if err == io.EOF {
                        break
                    } else if err != nil {
                        continue
                    }
                    for _, parser := range parsers {
                        if err := parser.DecodeLayers(data, &decoded); err != nil {
                            continue
                        }
                        for _, layerType := range decoded {
                            if layerType == layers.LayerTypeTCP {
                                if !s.IPRanger.Contains(ip4.SrcIP.String()) {
                                    gologger.Debugf("Discarding TCP packet from non target ip %s\n", ip4.SrcIP.String())
                                    continue
                                }
                                // We consider only incoming packets
                                if tcp.DstPort != layers.TCPPort(s.listenPort) {
                                    continue
                                } else if tcp.SYN && tcp.ACK {
                                    s.tcpChan = maxRetries {
            return err
        }
        _, err = conn.WriteTo(buf.Bytes(), &net.IPAddr{IP: net.ParseIP(destIP)})
        if err != nil {
            retries++
            // introduce a small delay to allow the network interface to flush the queue
            time.Sleep(time.Duration(sendDelayMsec) * time.Millisecond)
            goto send
        }
        return err
    }
## 其他
### 修改ulimit
大多数类UNIX操作系统（包括Linux和macOS）在每个进程和每个用户的基础上提供了系统资源的限制和控制（如线程，文件和网络连接）的方法。
这些“ulimits”阻止单个用户使用太多系统资源。
    import (
        _ "github.com/projectdiscovery/fdmax/autofdmax"
    )
修改ulimit,只针对unix系统
fdmax.go
    // +build !windows
    package fdmax
    import (
        "runtime"
        "golang.org/x/sys/unix"
    )
    const (
        UnixMax uint64 = 999999
        OSXMax  uint64 = 24576
    )
    type Limits struct {
        Current uint64
        Max     uint64
    }
    func Get() (*Limits, error) {
        var rLimit unix.Rlimit
        err := unix.Getrlimit(unix.RLIMIT_NOFILE, &rLimit)
        if err != nil {
            return nil, err
        }
        return &Limits{Current: uint64(rLimit.Cur), Max: uint64(rLimit.Max)}, nil
    }
    func Set(maxLimit uint64) error {
        var rLimit unix.Rlimit
        rLimit.Max = maxLimit
        rLimit.Cur = maxLimit
        // https://github.com/golang/go/issues/30401
        if runtime.GOOS == "darwin" && rLimit.Cur > OSXMax {
            rLimit.Cur = OSXMax
        }
        return unix.Setrlimit(unix.RLIMIT_NOFILE, &rLimit)
    }
### 随机IP PICK
    import "github.com/projectdiscovery/ipranger"
ipranger 实现就是来自masscan的随机化地址扫描算法
在  写过
> ### 随机化地址扫描
>
> 在读取地址后，如果进行顺序扫描，伪代码如下
>  
>  
>     for (i = 0; i          scan(i);
>     }
>  
>
>
> 但是考虑到有的网段可能对扫描进行检测从而封掉整个网段，顺序扫描效率是较低的，所以需要将地址进行随机的打乱，用算法描述就是设计一个`打乱数组的算法`，Masscan是设计了一个加密算法，伪代码如下
>  
>  
>     range = ip_count * port_count;
>     for (i = 0; i          x = encrypt(i);
>         ip   = pick(addresses, x / port_count);
>         port = pick(ports,     x % port_count);
>         scan(ip, port);
>     }
>  
>
>
> 随机种子就是`i`的值，这种加密算法能够建立一种一一对应的映射关系，即在[1...range]的区间内通过`i`来生成[1...range]内不重复的随机数。同时如果中断了扫描，只需要记住`i`的值就能重新启动，在分布式上也可以根据`i`来进行。
>
>   * 如果对这个加密算法感兴趣可以看 [Ciphers with Arbitrary Finite
> Domains](https://web.cs.ucdavis.edu/~rogaway/papers/subset.pdf) 这篇论文。
>
### 可缓存的hashmap
`ipranger`中使用了`github.com/projectdiscovery/hmap/store/hybrid`
看了下代码，是一个带缓存功能的hashmap，也带有超时时间。
所有添加的目标(ip)会加入到缓存中，让我想到`ksubdomain`中也有实现类似的功能，不过是在内存中进行，导致目标很多的时候内存操作会有点问题。如果用这个库应该可以解决这个问题
。
## 总结
naabu的代码架构很清晰，一个文件完成一个功能，通过看文件名就知道这个实现了什么功能，所以看代码的时候很轻松，naabu也模仿masscan中的部分代码，将它go化，值得学习。
  1. 但是从代码来看，naabu只是实现了在linux上的`syn`扫描，在Windows上会使用三次握手的tcp连接(基于pcap，可以实现在windows上组合tcp发包的，但naabu没有实现)，所以在windows上扫描速度和一般扫描器几乎无差别。
  2. naabu的目标添加是先循环读取目标一遍，如果目标cidr地址很大，会造成很多内存占用(虽然也会有硬盘缓存)，如果边读取边发送就没有这种烦恼，但naabu不是这样的。