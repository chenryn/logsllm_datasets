M R
M R
M R
R
R
R
M R
M R
M R
R
R
R
R
R
R
R
M
R
M
R
M R
M R
M R
M R
M R
R
R
R
R
R
R
R
R
M
R
R
M R
M R
M R
M R
M R
R
R
R
R
M R
R
R
R
M R
M R
M R
M R
M R
R
M
R
M R
M R
M R
M R
M R
R
R
R
R
R
M
R
M R
M R
M R
M R
M R
R
R
R
M R
M R
M R
M R
M R
R
R
R
M R
M R
M R
M R
M R
R
R
R
M
R
M
R
M
Figure 1. The Shared Resource Matrix for ICCCM Cut and Paste
tecture based on independent replicas of the X server (one
per active level) and a restrictive version of cut and paste
that could be shown to adhere to MLS restrictions.
8. In Retrospect
The original paper was an unabashed attempt to get
funds to build the tool that was described. Note that the
abstract is ambiguous about the state of the analyzer. On
the other hand, it worked. Perhaps, this is the real signif-
icance of the paper, a classic sales job. In retrospect, the
line of work that began with the paper had a substantial im-
pact on several aspects of the MLS world. It was the ﬁrst
MLS tool to give the system designer a large degree of ﬂex-
ibility in the way both systems and policies were described.
Its reporting mechanisms allowed both summary and de-
tailed reports to be produced. The conservative approxima-
tion mechanisms introduced in the GIFT tool allowed the
analyst to greatly reduce the number of detailed ﬂows to
be considered by assuming that information ﬂowed univer-
sally from all inputs to all outputs of certain functions. If the
system was secure under these assumptions, it was clearly
secure under more detailed analysis. The nature of the infor-
mation ﬂow formulae produced led to minor improvements
in the strategy of the Gypsy theorem prover, reducing proof
efforts substantially.
Both the SRM tool and the GIFT were used on real MLS
systems. MLS systems are out of fashion these days, the
common wisdom being that the marketplace passed them
by, but my recent experience with attempts to deal with web
sites that are classiﬁed in their entirety because some page
may be classiﬁed indicates that the need still exists. With
a few exceptions, mostly dealing with small, very sensitive,
information objects (such as long lived encryption keys),
small information leakages are not of much concern today;
after all, most systems are so vulnerable that it is far easier
to take ownership of the system via a simple exploit than
it is to attempt to signal information through the protection
state.
Nonetheless, much of the work that went into the GIFT
and the GVE are relevant today. I suspect that covert chan-
nel mechanisms will again be considered important in the
contexts of restricted execution environments for mobile
agents. Proof carrying code may require proofs that covert
signaling mechanisms are not present as well as the higher
level proofs currently proposed. There has been some re-
cent interest in a GVE style veriﬁcation system for Java and
this is certainly feasible. Moore’s law has already solved
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:41 UTC from IEEE Xplore.  Restrictions apply. 
many of the performance problems for which the GVE of a
decade ago was rightly criticized. Dependency analysis is
gaining increasing importance as a mechanism for address-
ing the buffer overﬂow problem. Another part of the Gypsy
optimizer addressed this problem explicitly by generating
formulae that, if proven, justiﬁed the removal of run time
array bounds checks and it is clear that this is equivalent to
static analysis of a program slice focused of the potentially
offending operation with the objective of showing that the
potential overﬂow cannot occur.
More importantly, the effort that began with the 1985
abstract contributed substantially to our understanding of
the subtleties of information ﬂows and their role in devel-
oping secure systems. In addition to a number of CLI re-
ports and notes[21, 1, 23, 24, 20, 22], the effort produced
a Masters Thesis[29], and several conference and journal
papers[12, 19]. The GIFT was by no means a solo effort.
Major contributions were made by a number of people in
Durham and in Austin. Larry Akers, Bret Hartman, Craig
Singer, and Tad Taylor were all major contributors to the
effort and without their work, it could not have come to
fruition.
References
[1] R. L. Akers. Information ﬂow into structured objects. In-
ternal Note 20, Computational Logic Inc., 1717 West 6th.
Street, Austin, Texas, November 1987.
[2] J. P. Anderson.
Computer security technology plan-
Technical Report ESC–TR–73–
ning study, Volume I.
51, Vol I, ESD/AFSC, Hanscom AFB, Bedford, MA
01731, Oct 1972.
[NTIS AD-758-206] - Available online
at http://seclab.cs.ucdavis.edu/projects/
history/CD/ande72.pdf.
[3] J. P. Anderson.
Computer security technology plan-
ning study, Volume II. Technical Report ESC–TR–73–
51, Vol II, ESD/AFSC, Hanscom AFB, Bedford, MA
01731, Oct 1972.
[NTIS AD-758-206] - Available online
at http://seclab.cs.ucdavis.edu/projects/
history/CD/ande72.pdf.
[4] D. E. Bell and L. L. Padula. Secure computer system: Uni-
ﬁed exposition and multics interpretation. Technical Report
ESD–TR–75–306, ESD/AFSC, Hanscom AFB, Bedford,
MA 01731, 1975. [DTIC AD-A023588] - Available online
at http://seclab.cs.ucdavis.edu/projects/
history/CD/bell76.pdf.
[5] R. Boebert. Private communication, November 1984.
[6] D. Denning and P. Denning. Certiﬁcation of programs for
secure information ﬂow. CACM, 20(7):504–513, July 1977.
[7] Department of defense trusted computer system evaluation
criteria. CSC-STD-001-83, Department of Defense Com-
puter Security Center, August 1983.
[8] J. Epstein, J. McHugh H. Orman, et al. A high assurance
window system prototype. Journal of Computer Security,
2:159–190, 1993.
[9] R. Feiertag. Technique for proving speciﬁcations are multi-
level secure. Technical Report CSL-109, SRI International
Computer Science Laboratory, January 1980.
[10] R. Feiertag, K. Levitt, and L. Robinson. Proving multilevel
security of a system design. In Proc. 6th Symp. on Operating
System Principles, pages 57–65. ACM, November 1977.
[11] D. Good, R. Cohen, C. Hoch, L. Hunter, and D. Hare. Re-
port on the language gypsy: Version 2.0. Technical Re-
port ICSCA-10, University of Texas at Austin Institute for
Computing Science and Computer Applications, September
1978.
[12] J. T. Haigh, R. A. Kemmerer, J. McHugh, and W. D. Young.
An experience using two covert channel analysis techniques
on a real system design. In Proceedings of the 1986 IEEE
Symposium on Security and Privacy, pages 14–24. IEEE,
April 1986.
[13] R. A. Kemmerer. Shared resource matrix methodology:
A practical approach to identifying covert channels. ACM
Transactions on Computer Systems, 1(3):256–277, August
1983.
[14] B. W. Lampson. A note on the conﬁnement problem.
CACM, 16(10):613–615, Oct 1973.
Currently on line
at http://research.microsoft.com/lampson/
11-Confinement/WebPage.html.
[15] C. Landwehr. Formal models for computer security. ACM
Computing Surveys, 13(3):247–248, September 1981.
[16] S. B. Lipner. A comment on the conﬁnement problem. In
Proceedings of the Fifth Symposium on Operating System
Principles, pages 192–196, 1975. Appeared as ACM Oper-
ating System Review 9(5).
[17] A. Marmor-Squires, J. McHugh M. Branstad, B. Danner,
L. Nagy, P. Rougeau, and D. Sterne. A risk driven process
model for the development of trusted systems. In Proceed-
ings of the 1989 Computer Security Applications Confer-
ence, Tucson, AZ, December 1989.
[18] J. McHugh. Towards the generation of efﬁcient code from
veriﬁed programs. ICSC Report 40, Institute for Computing
Science University of Texas at Austin, March 1984.
[19] J. McHugh. A formal deﬁnition for information ﬂow in the
gypsy expression language.
In Proceedings of The Com-
puter Security Foundations Workshop, pages 147–165, June
1988.
[20] J. McHugh and R. L. Akers. A formal justiﬁcation for the
gypsy information ﬂow tool. Technical report, Computa-
tional Logic, Inc., Austin, Texas, 1987.
[21] J. McHugh and R. L. Akers. Gve users manual: The gypsy
information ﬂow tool, a covert channel analysis tool. Tech-
nical Report CLI-12, Computational Logic, Inc., November
1987. Draft.
[22] J. McHugh and R. L. Akers. Speciﬁcation and rationale for
the implementation of an analyzer for dependencies in gypsy
speciﬁcations. Technical report, Computational Logic, Inc.,
Austin, Texas, 1987.
[23] J. McHugh, R. L. Akers, and C. D. Singer. Gve user’s man-
ual: Shared resource matrix covert channel analysis tool.
Technical report, Computational Logic, Inc., Austin, Texas,
1987.
[24] J. McHugh, R. L. Akers, and C. D. Singer. Gypsy informa-
tion ﬂow tool software requirements speciﬁcation. Technical
report, Computational Logic, Inc., Austin, Texas, 1987.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:41 UTC from IEEE Xplore.  Restrictions apply. 
[25] J. McHugh and D. I. Good. An information ﬂow tool for
gypsy: Extended abstract. In Proceedings of the 1985 IEEE
Symposium on Security and Privacy, pages 46–48, 1985.
[26] R. Reitman and G. Andrews. Certifying information ﬂow
properties of programs: an axiomatic approach organization.
In Conference Record of the Sixth annual ACM Symposium
on the Principles of Programming Languages, pages 283–
290. ACM-SIGPLAN, January 1979.
[27] J. M. Rushby. Mathematical foundations of the mls tool for
revised special. Technical report, Computer Science Labo-
ratory, SRI International, March 1984. Draft.
[28] O. S. Saydjari, J. M. Beckman, and J. R. Leaman. Lock
trek: Navigating uncharted space.
In Proceedings of the
1989 IEEE Symposium on Security and Privacy, pages 167–
175, May 1989.
[29] C. D. Singer. An extension of the gypsy information ﬂow
semantics for dynamic and indexed types. Master’s thesis,
Duke University, Dept. of Computer Science, 1988.
[30] M. Smith. Model and design proof in gypsy: An example
using bell and lapadula. ICSC Internal Note 122, Institute
for Computing Science University of Texas at Austin, 1984.
[31] M. Weiser. Program slicing. IEEE Transactions on Software
Engineering, SE-10(7):352–357, July 1984.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:08:41 UTC from IEEE Xplore.  Restrictions apply.