the token type. Also, and very effectively, a reordering of the capture
file can occur. The –P command line requires us to supply a tokenizing
routine that helps GPF break up the capture file. In this case IMAP is
a normal_ascii protocol. Consider the execution of GPF against IMAP:
../GPF -P prelogin.gpf client 192.168.31.101 143 ? TCP 11223456
10000 2 auto none short normal_ascii quit
Before GPF begins fuzzing, the tokenizing output will look something
like this:
Tokenizing Captured Protocol:
Tok[1][0]: type= ASCII_CMD, dataLen=2,
currentTotal=2, data=”02”
Tok[1][1]: type= ASCII_SPACE, dataLen=1,
currentTotal=3, data=” “
Tok[1][2]: type= ASCII_CMDVAR, dataLen=5,
currentTotal=8, data=”LOGIN”
Tok[1][3]: type= ASCII_SPACE, dataLen=1,
currentTotal=9, data=” “
Tok[1][4]: type= ASCII_CMDVAR, dataLen=5,
currentTotal=14, data=”jared”
Tok[1][5]: type= ASCII_SPACE, dataLen=1,
currentTotal=15, data=” “
Tok[1][6]: type= ASCII_CMDVAR, dataLen=3,
currentTotal=18, data=”{5}”
Tok[1][7]: type= ASCII_END, dataLen=2,
currentTotal=20, data=”\x0d\x0a”
Tok[3][0]: type= ASCII_CMD, dataLen=5,
currentTotal=5, data=”jared”
Tok[3][1]: type= ASCII_END, dataLen=2,
currentTotal=7, data=”\x0d\x0a”
Tok[5][0]: type= ASCII_CMD, dataLen=2,
currentTotal=2, data=”03”
Tok[5][1]: type= ASCII_SPACE, dataLen=1,
currentTotal=3, data=” “
Tok[5][2]: type= ASCII_CMDVAR, dataLen=10,
currentTotal=13, data=”CAPABILITY”
Tok[5][3]: type= ASCII_END, dataLen=2,
currentTotal=15, data=”\x0d\x0a”
6760 Book.indb 160 12/22/17 10:50 AM
5.2 Detailed View of Fuzzer Types 161
Each piece of data, now called a token, is assigned a type. Note that GPF
didn’t attempt to tokenize the server data, because this will simply be read
in by GPF and generally not acted upon. Each token is fuzzed according to
its own heuristics. For example, an ASCII_END might be reordered (\x0a\
x0d), replaced by a null, or left off. ASCII_CMDs aren’t fuzzed as often
because parsing mistakes tend to be in CMDVARs. See the GPF source code
for a complete description of the many heuristics.
d. The –E mode is the newest: the Evolutionary Fuzzing System. EFS will
be detailed in Chapter 7.
5.2.6 In-Memory Fuzzing
In-memory fuzzing is substantially different from the other types of fuzzing discussed
throughout this chapter. Whereas traditional fuzzing is focused on injecting faults
or anomalies in external inputs and monitoring for crashes or other indications of
failures, in-memory fuzzing involves modifying arguments, in memory, before they
are consumed by internal program functions. This fuzzing technique is more suited
to closed-source applications, in which individual test harnesses cannot be easily
constructed due to lack of source code.
One of the major advantages of fuzzing over source code auditing and reverse
engineering is that fuzzing finds real bugs by exercising accessible interfaces. In-
memory fuzzing is closest to static analysis as it is mutating the internals of the
process. Similarly, as in static analysis, a dangerous function may be identified, but
after further investigation it might be found to be inaccessible via available user
interfaces or the data is filtered in some manner. With in-memory fuzzing, this
same false-positive scenario can arise, as the mutated input can be impossible to
happen in real-life communications because the targeted functions may or may not
be reachable via user input in that way. As we’ve discussed, only a small subset of
program functions are employed to handle user input.
In-memory fuzzing is further complicated by the fact that the elements being
fuzzed are not files or packets, but rather, function parameters or data in memory.
This means that the state of the program under test needs to be reset for each itera-
tion of the fuzzed code.
Should the time be taken to implement the above system, there are a few distinct
advantages. Consider a closed source application with a complicated encryption
scheme handled over multiple network handshake packets. Normally, this protocol
would have to be reverse engineered to create an intelligent fuzzer. A mutation-based
approach (flipping bits) would not fuzz the underlying data, but only the decryp-
tion functions. With in-memory fuzzing, all or some of the functions after a criti-
cal communication function can be fuzzed in memory without understanding how
the encryption works.30 In this way, the actual underlying data being parsed can
be fuzzed directly. Also, consider a network server that has a very slow multistate
client-server protocol. A speed increase could be realized via in-memory fuzzing in
this case as well.
30 Going back to the IKE example, this may be a way to fuzz IKE without building a generation fuzzer.
6760 Book.indb 161 12/22/17 10:50 AM
162 Building and Classifying Fuzzers
We asked our friend Jonathan Salwan about in-memory fuzzing. His experi-
ences are presented in Chapter 7.
5.3 Fuzzer Classification via Interface
Fuzzers could also be classified according to the interface they’re intended to test.
The following sections point out how a fuzzer could be used or constructed based
on particular interfaces.
5.3.1 Local program
The classic example of local program fuzzing is finding a Unix SUID-root program
and fuzzing it. Any flaw in it may be used to elevate the privileges of an attacker.
Typically, local fuzzers mutate command line arguments, environment variables,
IPC or local sockets, and any other exposed interfaces. A good example of such a
fuzzer is Sharefuzz.31
5.3.2 Network Interfaces
Testing IP protocols was once the dominant application of fuzzers. It is perhaps the
most critical use of fuzzing due to the consequences of a remote security breach by
a hacker. As we discussed, there are many different ways to generate the test cases.
Examples of this type of fuzzer include GPF, TAOF, and Sulley.
5.3.3 Files
File fuzzing involves repeatedly delivering semi-valid files to the application that
consumes those files. These files may consist of audio files, video files, word pro-
cessing, or in general, any file that an application might parse. Again, there are a
variety of ways to generate these files, depending on the domain-specific knowledge
for the file and the amount of time or effort available.
Below is a simple Java program that performs nonintelligent file fuzzing:
import java.io.*;
import java.security.SecureRandom;
import java.util.Random;
public class Fuzzer {
private Random random = new SecureRandom();32
private int count = 1;
31 http://sourceforge.net/projects/sharefuzz/.
32 SecureRandom() might not be the best choice: If you use Random with a seed, you will be able to
reproduce the tests.
6760 Book.indb 162 12/22/17 10:50 AM
5.3 Fuzzer Classification via Interface 163
public File fuzz(File in, int start, int length)
throws IOException
{
byte[] data = new byte[(int) in.length()];
DataInputStream din = new DataInputStream(new
FileInputStream(in));
din.readFully(data);
fuzz(data, start, length);
String name = “fuzz_” + count + “_” + in.getName();
File fout = new File(name);
FileOutputStream out = new FileOutputStream(fout);
out.write(data);
out.close();
din.close();
count++;
return fout;
}
// Modifies byte array in place
public void fuzz(byte[] in, int start, int length) {
byte[] fuzz = new byte[length];
random.nextBytes(fuzz);
System.arraycopy(fuzz, 0, in, start, fuzz.length);
}
}
As described earlier, many file fuzzers exist, including Surku, FileFuzz, SPIKE-
file, notSPIKEfile, and the file fuzz PaiMei module.
5.3.4 ApIs
An application programmer interface is a software description of how a certain
function is called. For example, in C, the definition of a function void myfunc(int,
int, char); would be the API, or prototype, to that function. The function returns
nothing, but accepts two integers and a character as parameters. API fuzzing involves
supplying unexpected parameters when this function is called. This could be done
with or without source code. If source code is not available, pre-analysis of the func-
tion or basic block would be required. A reverse engineering tool such as IDA Pro
could be used to quickly determine the parameters to internal functions. Gray-box
(requires debugger) API fuzzing would likely be carried out by security auditors,
while white-box (requires UNIT strap or instrumentation) API fuzzing would likely
be performed by QA professionals. Examples of API fuzzers include COMRaider,
(a COM object fuzzer) and AxMan, (an ActiveX fuzzer). Peach can be modified to
fuzz functions as well.
6760 Book.indb 163 12/22/17 10:50 AM
164 Building and Classifying Fuzzers
5.3.5 Web Fuzzing
For the most part, Web fuzzing is a misnomer. It certainly is possible to fuzz the
HTTP protocol, just as it is any other protocol. Web testing receives extra attention
because HTTP/HTTPS traffic is the most common internet traffic. Often, though,
when people refer to Web fuzzing, what they really mean is automated Web audit-
ing. This consists of submitting various semi-valid data to various form fields of
Web applications and “spidering” the application to discover all the valid pages,
URLs, and inputs. The open source projects Pantera and Spike Proxy are both
examples of Web application fuzzers. WebInspect, AppScan and OWASP ZAP are
some examples of well-known Web application fuzzers. Web fuzzing may also refer
to audits that brute force various types of login fields.
5.3.6 Client-Side Fuzzers
Some of us may recall the “month of browser bugs” posted by H.D. Moore. How
did this happen? A new browser bug posted everyday for an entire month! This was
a result of three primary factors:
• Browsers are terribly complex, including things like JavaScript.
• Client-side testing had not been considered important in the past.
• H.D. was the first one in. Fuzzing is particularly effective against mostly
untested interfaces. The first to fuzz will find the bulk of bugs. This makes
sense. The same is true for the first round of rough testing done by develop-
ers in a traditional setting.
Client-side testing simply indicates that it’s not the server under test but the client.
This had not been done much in the past because hackers liked to find exploits that
allow a server attack. As server code has gotten better over the years, new avenues
of pwning (slang for exploiting) boxes was required. It was discovered that setting
up a bogus Website that would send illegitimate connections back to weak brows-
ers was one such avenue. Let this be a lesson to developers and project managers:
clients are as important as servers. Some well-known client-side fuzzers include
MangleMe (an HTML fuzzer), and jsfunfuzz (a JavaScript fuzzer).
5.3.7 Layer 2 Through 7 Fuzzing
OSI (Open Systems Interconnection) is a standard description for how messages
should be transmitted between any two points on a network. Seven layers are used:
• Layer 7: Application layer;
• Layer 6: Presentation layer;
• Layer 5: Session layer;
• Layer 4: Transport layer;
• Layer 3: Network layer;
• Layer 2: Data Link layer;
• Layer 1: Physical layer.
6760 Book.indb 164 12/22/17 10:50 AM
5.4 Summary 165
Any of the layers could be fuzzed, but for example, sending random voltages to
the physical layer would just prove what we already know—it’ll fry it if you crank up
the juice. However, all the other layers include data that must be processed, which
could lead to parsing vulnerabilities. In 2006, the wireless data link layer (WiFi)
was fuzzed by Maynor and Ellch, who found a juicy OS X vulnerability.
Layer 3 of the networking stack is the IP header. A tool written years ago by
Mike Frantzen called IP Stack Integrity Checker (ISIC), was surprisingly good at
causing kernel panics in all types of Unix systems. The idea is the same as all fuzz-
ing: Create a mostly valid IP header but either randomize a few fields or purposely
pick known bad values. The IP stack when Microsoft’s Vista platform first came
out was interesting for two reasons:
1. Vista user land applications had been reasonably tested, but the kernel was
just becoming popular as a target.
2. The IP stack was totally rewritten for Vista. Which means it was new code,
that is fertile ground for fuzzing.
Additionally, there are commercial entities out there focused on writing layer
3 fuzzing for SCADA33 and industrial platforms that have received relatively less
testing from the security community.
5.4 Summary
Bug detection tools known as fuzzers are a useful part of software testing and vul-
nerability analysis. The best fuzzers of today are built by experienced vulnerability
analysts and testers and employ the power of automatic protocol descriptions, ran-
domness, known useful heuristics, tracing, debugging, logging, and more.
This chapter has shown that many fuzzer types exist. At their core, they are all
very similar: Deliver semi-invalid data and report on results. However, the vehicle by
which the data is delivered to the test target is important if real results are desired.
Only the imagination limits the number of fuzzer categories and types. We have
given examples of some of the prevalent options. Understanding the internal opera-
tion of a given fuzzer is important for many reasons. Interpreting expected and
actual results would be one reason. Another is that in Chapter 8 we will compare
and contrast commercial options with open source options. For this to be possible
we require an understanding of the various tool types.
33 http://en.wikipedia.org/wiki/SCADA.
6760 Book.indb 165 12/22/17 10:50 AM
6760 Book.indb 166 12/22/17 10:50 AM
C h a p t e r 6
Target Monitoring
You’ve spent significant time analyzing the source and deriving high-quality fuzzed
inputs to test the target system. You’ve faithfully sent these inputs to the target. Now
what? Almost as important as the generation of inputs in the process of fuzzing is
the way in which the target is monitored. After all, if you can’t tell when an input
has caused a problem, it doesn’t do any good to have created and sent it! As we’ll see
in this chapter, there are a number of options when it comes to target monitoring,
some relatively basic and others that are quite complex and intrusive to the target,
but that may find vulnerabilities missed by less-detailed monitoring techniques.
6.1 What Can Go Wrong and What Does It Look Like
Before we can discuss how to properly monitor a system, we must first examine
what can go wrong with the target. Once we understand the issues that can arise,
we can better understand how to detect these problems. Since we already discussed
this earlier in the book, we will review this quickly.
6.1.1 Denial of Service
One common security problem found in systems is that of a denial of service condi-
tion. This means that the functionality provided by the system is no longer available
to the intended user or this functionality is only available at a degraded capacity.
This may mean the entire system is unusable, requires administration, reboots,
and so on. It may simply mean that an application is no longer available or that so
many resources of the system are being used and the performance of the system is
so severely degraded that users cannot utilize the service.
Denial of service problems are relatively easy to detect. The service can be peri-
odically checked to make sure it functions as intended in a timely manner. Likewise,
on the target, system resources can be monitored and alerts can be generated if they
exceed some threshold. One caveat is that oftentimes a denial of service condition
is transient. That is, the condition may only be temporary, and the system may
restore itself to full capacity after a short delay. One example of this would be an
input that forced a system to reboot. Only during the time required for the actual
reboot would the system be unavailable, but this is still a very critical issue. The
point is that the availability of the service needs to be checked frequently to avoid
missing such a situation.
167
6760 Book.indb 167 12/22/17 10:50 AM
168 Target Monitoring
6.1.2 File System-related problems
There are many security issues related to the interaction of an application and its
file system. One common scenario is that of a directory transversal attack. In this
scenario, the application is intended to provide access for a user to a file from the
file system. The files allowed to be opened reside in a particular directory. However,
in some scenarios, an attacker may be able to break out of this directory and view
arbitrary files on the system (with the permissions of the application). For example,
the attacker may request to view the file “../../../../../etc/passwd”. If the application
does not properly filter these directory transversal characters, arbitrary files may be
accessible, in this case the passwd file. Other file system-related problems include
injecting NULL characters into requested filenames and problems creating predict-
able temporary file names.