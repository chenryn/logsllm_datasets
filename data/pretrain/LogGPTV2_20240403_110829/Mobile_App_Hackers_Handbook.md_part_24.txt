# Looking Under the Hood

This section delves into the detailed processes that occur when installing and running an application on an Android device.

## Installing an Application

When an application is installed on an Android device, several tasks are performed by the Package Manager Service and `installd` to ensure the OS fully recognizes and can work with the application. Here is a high-level overview of the installation steps:

1. **Determine Installation Location**: Based on package parameters, the correct installation location is determined.
2. **Check for New Installation or Update**: Determine if this is a new installation or an update to an existing application.
3. **Store the APK**: Place the APK in the appropriate directory.
4. **Assign Application UID**: Determine the application’s unique user ID (UID).
5. **Create Data Directory**: Create the application data directory and set the appropriate permissions.
6. **Extract Native Libraries**: Extract native libraries and place them in the `libs` directory within the application data directory, setting the appropriate file and folder permissions.
7. **Optimize DEX File**: Extract the DEX file from the package and place its optimized version in the cache directory.
8. **Update Package Lists**: Add package details to `packages.list` and `packages.xml`.
9. **Broadcast Installation**: Send a broadcast message indicating that the package has been installed.

This installation process was extensively documented by Ketan Parmar in a blog post available at [this link](http://www.kpbird.com/2012/10/in-depth-android-package-manager-and.html#more).

### Important Points

- **Storage Locations**:
  - User-level applications are stored in `/data/app/`.
  - System applications are stored in `/system/app/`.

- **System User Applications**:
  - Since Android 4.4 (KitKat), applications requesting to run as the system user must be installed in `/system/priv-app/`. Otherwise, the OS will reject the request. This change enhances security control over bundled applications.

- **File Permissions**:
  - APK files in `/data/app/` are world-readable, allowing easy access without special privileges.
  - Applications with the deprecated "Copy Protection" option are stored in `/data/app-private/` with restricted file permissions, preventing world read access.

- **Forward Lock**:
  - The `FORWARD_LOCK` option can be enabled using the command:
    ```shell
    shell@android:/data/local/tmp $ pm install -l agent.apk
    ```
  - This places the APK in `/data/app-private/` and restricts access.

- **App Encryption**:
  - As of Android 4.1 (Jelly Bean), applications with copy protection are stored in `/data/app-asec/` with the `.asec` extension and encrypted with a device-specific key. These files are accessible only by privileged users.

- **Package Cataloging**:
  - Application attributes are cataloged in `/data/system/packages.xml` and `/data/system/packages.list`. These files store information about all installed applications and their permissions.
  - Modifying these files can change the application's permissions, requiring privileged access.

- **DEX Optimization**:
  - The DEX file is extracted from the APK, optimized using the `dexopt` utility, and stored in the Dalvik cache (`/data/dalvik-cache/`). This improves application load times.
  - System applications often come pre-optimized (pre-odexed) to enhance performance.

## Running an Application

Android uses a unique method to start new applications. The `zygote` process, which starts when the OS boots, listens for requests to launch new applications. When a request is received, `zygote` forks itself with the necessary parameters and code to run the application. This approach makes creating new application VMs efficient by sharing core libraries between VMs.

- **Intent Handling**:
  - When a user clicks on an application icon, an intent is formulated and sent using `startActivity()`, handled by the Activity Manager Service.
  - The `zygote` process listens on a UNIX socket at `/dev/socket/zygote` and has specific permissions to interact with it.

- **Dalvik Cache Check**:
  - Upon starting an application, the Dalvik cache is checked to see if the DEX file has been optimized and stored. If not, the system performs the optimization, which can impact the application's loading time.

### ART—Runtime Replacement for Dalvik

- **Introduction**:
  - Android 5.0 (Lollipop) introduced ART (Android Runtime) as the default runtime, replacing Dalvik. ART aims to improve application performance and reduce battery consumption.
  - An experimental version of ART was included in Android 4.4 (KitKat) and could be enabled via Developer Options.

- **Key Features**:
  - **Ahead-of-Time (AOT) Compilation**: Converts applications to native code during installation, improving load times and responsiveness.
  - **OAT Files**: ART uses OAT files instead of DEX files. A utility called `dex2oat` converts DEX to OAT format.

## Understanding the Security Model

The Android application security model ensures that no two applications on the same device can access each other's data without authorization. This concept forms the basis of the application sandbox.

### Key Components

- **Application Identity**:
  - Android checks the identity of an application's author through code signing. This helps in assigning the appropriate privilege context.
  - Code signing is mandatory, even for development, using a debug certificate.

- **Code Signing**:
  - **Certificate Generation**:
    ```shell
    $ keytool -genkey -v -keystore mykey.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
    ```
  - **Signing an Application**:
    ```shell
    $ jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore mykey.keystore application.apk alias_name
    ```

- **Certificate Information**:
  - The certificate information is contained within the `CERT.RSA` file in the `META-INF` folder inside every Android package.
  - The certificate can be viewed using tools like `openssl` or the Java `keytool` utility.

- **Verification**:
  - The Android OS does not verify the application certificates against any PKI infrastructure. Most applications use self-signed certificates.
  - Google recommends creating signing certificates with a validity period of 25 years or longer to support seamless updates.

In summary, the Android OS employs a robust and flexible security model that, while different from conventional PKI, effectively manages application identities and permissions.