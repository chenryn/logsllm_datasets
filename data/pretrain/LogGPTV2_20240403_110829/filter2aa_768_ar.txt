### 28.9.4 JDWP

Java Debug Wire Protocol (JDWP) 是一种通信协议，用于定义被调试进程（Debuggee）与调试器进程之间的通信格式和方法。JDWP 支持远程调试，允许调试器和被调试程序运行在不同的机器上。

JDWP 中的所有数据通信基于数据包进行，定义了两种基本类型的包：命令包和回复包。每个包都由固定长度的头结构（Header）和可变长度的数据组成。

#### 命令包头格式
- **长度**（4 字节）：整个包的长度，包括这个字段。
- **ID**（4 字节）：包的唯一 ID。
- **标志**（1 字节）：标志位，0x80 位如果为 1，则表示是回复包。
- **命令集合**（1 字节）：命令所属的命令集合。
- **命令**（1 字节）：具体的命令。

#### 回复包头格式
- **长度**（4 字节）：整个包的长度，包括这个字段。
- **ID**（4 字节）：包的唯一 ID。
- **标志**（1 字节）：标志位。
- **错误代码**（2 字节）：0 表示成功，非零表示发生错误。

调试器通过发送命令包向被调试进程中的调试器后端发送命令，调试器后端处理完命令后通过回复包返回结果。目前 JDWP 定义了 18 个命令集合，共 100 多条命令。详细的命令包格式和用法可以在 JDWP 文档中找到。

JDK 提供了三个使用 JPDA 的示例程序：Trace（显示踪迹信息）、JDB（简单的命令行调试器）和 Javadt（简单的 GUI 调试器）。感兴趣的读者可以下载 JDK 并阅读这些示例程序的源代码。

---

### 29.8 内核调试

#### 29.8.1 建立内核调试会话

对于用户态调试目标，调试器可以通过启动新进程或附加到现有进程来建立调试会话。内核调试与此略有不同。选择内核调试（WinDBG 的 File > Kernel Debug...）并指定通信方式（COM、1394 或 USB）后，调试器开始启动调试会话并等待与调试目标建立连接。直到与调试目标建立起通信连接并检测到目标的基本信息后，内核调试会话才真正建立。

内核调试会话的建立过程分为两个阶段：启动阶段和连接阶段。

例如，我们可以在没有连接串行数据线的计算机上选择开始内核调试（File > Kernel Debug，选择 COM），点击确定后，WinDBG 创建调试会话线程并调用 `StartSession` 开始调试会话。执行过程如清单 29-8 所示。

```plaintext
0:001> kn 
 # ChildEBP RetAddr   
00 00dffce8 020c5dec dbgeng!ConnLiveKernelTargetInfo::ConnLiveKernelTargetInfo 
01 00dffd38 020bf86d dbgeng!LiveKernelInitialize+0x6c 
02 00dffd5c 0102a532 dbgeng!DebugClient::AttachKernelWide+0x7d 
03 00dfffa4 0102a9bb WinDBG!StartSession+0x5f2 
04 00dfffb4 7c80b6a3 WinDBG!EngineLoop+0x1b 
05 00dfffec 00000000 kernel32!BaseThreadStart+0x37 
```

其中，2 号栈帧调用 `DebugClient` 类的 `AttachKernel` 方法，其原型如下：

```cpp
HRESULT IDebugClient5::AttachKernelWide(
    IN ULONG Flags,
    IN OPTIONAL PCWSTR ConnectOptions);
```

`Flags` 参数可以为 `DEBUG_ATTACH_KERNEL_CONNECTION`（0）、`DEBUG_ATTACH_LOCAL_KERNEL`（1）和 `DEBUG_ATTACH_EXDI_DRIVER`（2）之一。因为我们选择的是通过串口进行双机调试，所以 `Flags` 参数为 0，`ConnectOptions` 参数的值如下：

```plaintext
0:001> du 010662e4 // 可以从栈帧#02 的参数中得到这个地址 
010662e4  "com:port=com1,baud=115200" 
```

`AttachKernel` 函数根据指定的参数调用 `LiveKernelInitialize` 来初始化调试活动内核目标所需的调试器引擎对象。0 号栈帧显示在执行 `ConnLiveKernelTargetInfo` 类的构造函数，构建 `ConnLiveKernelTargetInfo` 类的实例，并保存在全局变量 `g_Target` 中。`AttachKernel` 返回后，`StartSession` 做了些公共的初始化工作后返回。至此，内核调试会话的启动阶段结束，调试会话线程开始等待与调试目标建立连接。

内核调试引擎（Kernel Debug Engine，简称 KD）是 Windows 操作系统内核的一部分，与调试器一起实现内核调试。在双机内核调试时，通信的一方是主机上的调试器，另一方是目标系统上的内核调试引擎（KD）。

当 WinDBG 收到 KD 的第一个数据包后，`ConnLiveKernelTargetInfo` 类的 `WaitForEvent` 方法会调用 `ProcessStateChange` 方法，后者会调用 `NotifyDebuggeeActivation` 方法。这与用户态调试时在处理进程创建事件前调用 `NotifyDebuggeeActivation` 的情况类似。执行过程如清单 29-9 所示。

```plaintext
0:001> kn 
//调试会话线程 
 # ChildEBP RetAddr   
00 00d0fa20 7c90e9c0 ntdll!KiFastSystemCallRet 
//调用内核服务 
01 00d0fa24 7c8025cb ntdll!ZwWaitForSingleObject+0xc 
//残根函数 
02 00d0fa88 020c275a kernel32!WaitForSingleObjectEx+0xa8 
//等待同步对象 
03 00d0faa8 01055bdc dbgeng!DebugClient::DispatchCallbacks+0x4a  
04 00d0fab8 0102a7e1 WinDBG!EngSwitchWorkspace+0x9c 
//切换工作空间 
05 00d0fad0 01027378 WinDBG!SessionActive+0x171 
//激活会话 
06 00d0fadc 020b71ea WinDBG!EventCallbacks::SessionStatus+0x28  
07 00d0faf0 020b38ec dbgeng!SessionStatusApcData::Dispatch+0x2a  
08 00d0fb28 020b3b4f dbgeng!ApcDispatch+0x4c 
09 00d0fb78 020b7181 dbgeng!SendEvent+0xcf 
0a 00d0fb98 02130ef5 dbgeng!NotifySessionStatus+0x21 
0b 00d0fbc4 0213466b dbgeng!NotifyDebuggeeActivation+0x55 
0c 00d0fef4 02133eb1 dbgeng!ConnLiveKernelTargetInfo::ProcessStateChange+0x1bb 
0d 00d0ff10 020ceacf dbgeng!ConnLiveKernelTargetInfo::WaitForEvent+0xe1 
0e 00d0ff34 020cee9e dbgeng!WaitForAnyTarget+0x5f 
//等待目标 
0f 00d0ff80 020cf110 dbgeng!RawWaitForEvent+0x2ae 
10 00d0ff98 0102aadf dbgeng!DebugClient::WaitForEvent+0xb0 
//等待事件 
11 00d0ffb4 7c80b6a3 WinDBG!EngineLoop+0x13f 
//调试循环 
12 00d0ffec 00000000 kernel32!BaseThreadStart+0x37 
```

其中，栈帧#0b~#05 是向调试器中注册的回调对象通知会话状态改变。栈帧#04 是当调试器检测到调试目标的基本信息后，切换到与其匹配的工作空间。在切换到新的工作空间前，WinDBG 通常会显示一个对话框，询问用户是否要保存当前使用的默认工作空间（'Kernel default'）。

#### 29.8.2 等待调试事件

使用串行电缆进行双机内核调试时，WinDBG 的调试会话线程等待调试事件的过程如清单 29-11 所示。

```plaintext
0:001> kn 
 # ChildEBP RetAddr   
00 00e0fb68 022919be kernel32!ReadFile 
//从 COM 口读取数据 
01 00e0fcd4 022a83cc dbgeng!ComPortRead+0x22e 
//调试器引擎的 COM 函数 
02 00e0fd00 022a7782 dbgeng!KdComConnection::Read+0x6c //串行通信连接层 
03 00e0fd20 022a91be dbgeng!KdConnection::ReadAll+0x22  
04 00e0fd90 020dd497 dbgeng!KdComConnection::Synchronize+0x16e 
05 00e0fdbc 020dd624 dbgeng!DbgKdTransport::Synchronize+0xc7 
06 00e0fddc 020ddff3 dbgeng!DbgKdTransport::ReadPacketContents+0x84 
07 00e0fe50 02133f5b dbgeng!DbgKdTransport::WaitForPacket+0x133 
08 00e0feec 02133e38 dbgeng!ConnLiveKernelTargetInfo::WaitStateChange+0x8b 
09 00e0ff10 020ceacf dbgeng!ConnLiveKernelTargetInfo::WaitForEvent+0x68 
0a 00e0ff34 020cee9e dbgeng!WaitForAnyTarget+0x5f 
//轮番等待所有调试目标 
0b 00e0ff80 020cf110 dbgeng!RawWaitForEvent+0x2ae 
0c 00e0ff98 0102aadf dbgeng!DebugClient::WaitForEvent+0xb0  
0d 00e0ffb4 7c80b6a3 WinDBG!EngineLoop+0x13f 
//调试会话循环 
0e 00e0ffec 00000000 kernel32!BaseThreadStart+0x37 
//会话线程的启动函数 
```

从栈帧#0e 到栈帧#0a 与用户态的情况完全相同，这得益于重构后的 WinDBG 使用了 C++ 的多态性，顶层可以用统一的代码来处理不同类型的调试目标。栈帧#07 是调用 `DbgKdTransport` 类的 `WaitForPacket` 方法等待来自目标系统的数据包，而后传输层调用连接层，即 `KdComConnection` 类的方法。`KdComConnection` 会按照一定的时间间隔反复读取 COM 口，监视是否有数据来临。

#### 29.8.3 执行命令

在进行内核调试时，大多数命令都需要位于目标系统的内核调试引擎（KD）的帮助，只有少数命令可以完全在本地执行。对于需要调试引擎协助的命令，调试器需要通过第 18 章介绍的内核调试协议与 KD 进行通信。清单 29-12 显示了 WinDBG 的调试会话线程在执行寄存器命令（r）时向 KD 发送数据包的过程。

```plaintext
0:001> kn 50 
 # ChildEBP RetAddr   
00 00d0e334 022a77d6 dbgeng!KdComConnection::Write 
//写数据 
01 00d0e358 022a8ee0 dbgeng!KdConnection::WriteAll+0x26 
//连接层的基类方法 
02 00d0e384 020dd8aa dbgeng!KdComConnection::WritePacketContents+0x80 
03 00d0e3c8 020de6b5 dbgeng!DbgKdTransport::WritePacketContents+0x7a 
04 00d0e448 020b250a dbgeng!DbgKdTransport::WriteDataPacket+0x1c5 
05 00d0e46c 020deb14 dbgeng!DbgKdTransport::WritePacket+0x2a 
06 00d0e4a8 020debf2 dbgeng!DbgKdTransport::SendReceivePacket+0x44 
07 00d0e4d4 020d72df dbgeng!DbgKdTransport::SendReceiveManip+0x42//发送访问类 API 
08 00d0e548 020f058e dbgeng!ConnLiveKernelTargetInfo::ReadControl+0x7f 
09 00d0e574 0214e3d7 dbgeng!TargetInfo::GetTargetSpecialRegisters+0x3e 
0a 00d0e590 021723e1 dbgeng!X86MachineInfo::KdGetContextState+0xd7 
0b 00d0e5a8 02150f68 dbgeng!MachineInfo::GetContextState+0x121 
0c 00d0e6e0 02236afd dbgeng!X86MachineInfo::OutputAll+0x28 
0d 00d0e824 02199468 dbgeng!OutCurInfo+0x25d 
0e 00d0e8bc 02186362 dbgeng!ParseRegCmd+0x1b8 
//解析 r 命令 
0f 00d0e8fc 02188348 dbgeng!WrapParseRegCmd+0x92 
//r 命令的入口 
10 00d0e9d8 021889a9 dbgeng!ProcessCommands+0x1278 
//分发命令 
11 00d0ea1c 020cbec9 dbgeng!ProcessCommandsAndCatch+0x49 
12 00d0eeb4 020cc12a dbgeng!Execute+0x2b9 
13 00d0eee4 01028553 dbgeng!DebugClient::ExecuteWide+0x6a //执行命令的接口函数 
14 00d0ef8c 01028a43 WinDBG!ProcessCommand+0x143 
15 00d0ffa0 0102ad06 WinDBG!ProcessEngineCommands+0xa3 
16 00d0ffb4 7c80b6a3 WinDBG!EngineLoop+0x366 
//调试会话循环 
17 00d0ffec 00000000 kernel32!BaseThreadStart+0x37 
```

其中栈帧#0b 到#17 与调试 x86 架构的用户目标时完全一样。栈帧#08 是 `ConnLiveKernelTargetInfo` 类的 `ReadControl` 方法通过传输层向目标系统的 KD 发送请求。请求发送后，`SendReceivePacket` 方法调用 `WaitForPacket` 读取 KD 的回复包（清单 29-13）。

```plaintext
0:001> kn 
```

希望这些优化后的文本能更好地帮助你理解和使用 JDWP 和 WinDBG 的内核调试功能。