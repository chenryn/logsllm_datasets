75
77
19.3
59.5
46.2
WAN (ms)
4×
4×
1×
3.2×
2.5×
2.5×
1.9×
1×
3.1×
2.4×
1×
1×
1×
2.8×
2.1×
47
36
19
57.8
44.7
21
20.4
21
51.7
38.7
700× in the LAN setting. This is largely due to GALA’s deep
optimization for HE computation. We also notice that GALA’s
speedup slows down in WAN which is due to the communi-
cation rounds needed for conversions between HE and GC.
Therefore it leads to signiﬁcant round time in total compared
with the light HE computation overhead. For example, the
round-trip time is around 13 milliseconds while the GALA’s
optimized HE cost is within one millisecond.
2) Convolution Computation: We benchmark and compare
the computation complexity and runtime of GALA with
GAZELLE, DELPHI and CrypTFlow2 for convolution cal-
culation. The details are illustrated in Table VII and VIII.
As for the computation complexity, we compare GALA with
GAZELLE whose privacy-preserved convolution calculation
over HE is one of the most optimized methods in current liter-
ature. While introducing no extra HE multiplication/addition,
GALA reduces the most expensive Perm, i.e., DecPerm and
HstPerm, by up to 59× for input size of 16×16@2048 with
kernel size of 1×1@512. This block with large channels and
small kernel size is featured in state-of-the-art neural networks
such as ResNets [32], which makes GALA suitable to boost
the modern networks.
As for runtime comparison shown in Table VIII, GALA
demonstrates 9×, 14× and 2.6× speedup over GAZELLE
with different input and kernel dimensions in LAN setting.
As analyzed in Sec. III-B, due to the fundamental complexity
reduction by GALA’s kernel grouping approach, GALA re-
duces the expensive Perm operation by a factor of ci
. As we
cn
mention above, the large speedup is achieved under large input
channels and small kernel size, the proposed approach ﬁts very
well with the state-of-the-art networks such as ResNets [32],
where the feature maps are always with large channels (which
results in large ci while cn is ﬁxed) and small kernels (that are
usually 1×1, 3×3 and 5×5 at most, which beneﬁt small HE
multiplication/addition). Meanwhile, the speedup over DEL-
PHI and CrypTFlow2 is up to 7.4× in the LAN setting. On
the other hand, the speedup of GALA in the WAN setting
is also decent, up to 8.7×, 6.3× and 6.5× for GAZELLE,
DELPHI and CrypTFlow2, respectively. This is because the
computation cost of convolution increases accordingly with
regard to the communication cost, compared with the case of
matrix-vector multiplication.
11
TABLE IX.
COMPUTATION COMPLEXITY OF STATE-OF-THE-ART
NEURAL NETWORK MODELS.
TABLE XI.
RUNTIME COST OF STATE-OF-THE-ART MODELS.
Network Model: AlexNet
LAN (ms)
Time
11,019.2
90,090.1
69,133.6
226,431.7
Speedup
2.5×
2.9×
6.5×
21×
Network Model: VGG
2.7×
18,067.4
2.9×
123,198.4
6×
97,038.9
21×
340,342.9
Network Model: ResNet-18
42,748.3
250,618.4
190,684.7
650,989.7
3.2×
2.6×
5.7×
19.5×
Network Model: ResNet-50
276,886.8
746,568.8
425,454.4
1364,463.2
486,745.2
1411,383.8
777,057.4
2467,606.1
659,833.7
1975,798.9
1065,103.4
3379,188.7
8.3×
1.7×
4.5×
14.4×
7.7×
1.7×
4.2×
13.3×
7.5×
1.6×
4.1×
13×
WAN (ms)
Time
13,669.6
114,955
73,876.8
310,985.6
Speedup
1.9×
2×
4.8×
20×
21,566.2
152,176.4
103,169.1
543,242
51,032.7
332,524.2
205,146.8
903,492.6
321,600.2
1167,566.8
499,429.6
3307,902.6
577,454.9
2302,091.8
921,735.6
6006,071.4
786,587
3157,176.8
1272,772.6
8245,124.5
2×
1.5×
4.6×
24×
2.3×
1.9×
4.3×
19×
4×
1.4×
2.9×
19×
3.7×
1.3×
2.8×
18.2×
3.6×
1.3×
2.7×
17.5×
Net. Frameworks
MLP
AlexNet
VGG
ResNet-18
ResNet-50
ResNet-101
ResNet-152
Metric
# Perm
# ScMult
# Add
# Perm
# DecPerm
# HstPerm
# ScMult
# Add
# Perm
# DecPerm
# HstPerm
# ScMult
# Add
# Perm
# DecPerm
# HstPerm
# ScMult
# Add
# Perm
# DecPerm
# HstPerm
# ScMult
# Add
# Perm
# DecPerm
# HstPerm
# ScMult
# Add
# Perm
# DecPerm
# HstPerm
# ScMult
# Add
GAZELLE[38]
70
56
70
40399
143
1493
481298
481096
66055
161
1283
663556
663370
180375
483
3467
1399363
1398778
1464119
2819
3863
2935408
2931734
2560823
6083
8215
5302896
5294326
3463991
8963
12055
7252592
7239894
GALA
55
56
55
1157
142
1492
481298
481089
2115
160
1280
663556
663363
5921
482
3464
1399363
1398771
30615
2818
3848
2935408
2931727
64887
6082
8200
5302896
5294319
95127
8962
12040
7252592
7239887
Approach
GAZELLE
DELPHI
CrypTFlow2
OT-based
CrypTFlow2
GAZELLE
DELPHI
CrypTFlow2
OT-based
CrypTFlow2
GAZELLE
DELPHI
CrypTFlow2
OT-based
CrypTFlow2
GAZELLE
DELPHI
CrypTFlow2
OT-based
CrypTFlow2
GAZELLE
DELPHI
CrypTFlow2