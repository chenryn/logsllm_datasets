exploits, 2) quantitative data on the amount of polymor-
phism available in  for 14 actual exploits, which also shows
the importance of whole-system analysis, and 3) a model for
understanding polymorphism and metamorphism of . Ac-
tual generation of vulnerability-speciﬁc signatures with low
false positive and false negative rates is left for future work.
1.4 Structure of the Paper
The rest of the paper is structured as follows. Section 2
summarizes the Epsilon-Gamma-Pi model for control ﬂow
hijacking attacks from past work [14], followed by Section 3,
which details how DACODA generated the results from ana-
lyzing real exploits that are in Section 4. The PD-Requires-
Provides model is described in Section 5 to help understand
polymorphism and metamorphism. After discussing future
work in Section 6, we give our conclusions about byte string
signature schemes and host-based semantic analysis.
2. THE EPSILON-GAMMA-PI MODEL
The Epsilon-Gamma-Pi model [14] is a model of control
ﬂow hijacking attacks based on projecting the attacker’s net-
work packets onto the trace of the machine being attacked.
The row space of a projection is the network data that is
relevant to that projection, while the range of a projection
is the physical data used by the attacked machine for con-
trol ﬂow decisions. The Epsilon-Gamma-Pi model can avoid
confusion when, for example, the row space of γ for Code
Red II is UNICODE encoded as “0x25 0x75 0x62 0x63
0x64 0x33 0x25 0x75 0x37 0x38 0x30 0x31” coming over
the network but stored in little-endian format in the range
of γ as the actual bogus Structured Exception Handling
(SEH) pointer “0xd3 0xcb 0x01 0x78”. These encodings
of 0x7801cbd3 are captured by γ.
The mappings of a particular exploit are chosen by the
attacker but constrained by the protocol as implemented
on the attacked machine. A single projection is speciﬁc to
an exploit, not to a vulnerability. A vulnerability can be
thought of as a set of projections for  that will lead to
control ﬂow hijacking, but the term vulnerability may be
too subjective to deﬁne formally. Sometimes vulnerabilities
are a combination of program errors, such as the ASN.1
Library Length Heap Overﬂow vulnerability [52, bid 9633]
which was a combination of two diﬀerent integer overﬂows.
We can say that a system is vulnerable to a remote control
ﬂow hijacking attack if there exists any combination of IP
packets that cause bogus control ﬂow transfer to occur.
The projection  maps network data onto control ﬂow de-
cisions before control ﬂow hijacking takes place, while γ
maps the bogus control data itself during control ﬂow hi-
jacking and π typically maps the attacker’s payload code
that is directly executed after control ﬂow is hijacked. In
simple terms,  maps the exploit vector, γ maps the bogus
control data, and π maps the payload code as illustrated by
Figure 1.
2.1 Polymorphism and Metamorphism
The Epsilon-Gamma-Pi model also provides useful ab-
stractions for understanding polymorphism and metamor-
phism. Worm signature generation with any particular tech-
nique can be seen as a characterization of one or more of the
three mappings possibly combined with information about
the attack trace on the infected host. Polymorphism and
metamorphism seek to prevent this characterization from
enabling the worm defense to distinguish the worm from
other traﬃc as it moves over the network. In the extreme
the attacker must, for diﬀerent infections, change these three
mappings and the attack trace on the infected machine
enough so that knowledge about the attack trace and char-
acterizations of the three mappings cannot permit identi-
ﬁcation of the worm with a low enough error rate to stop
the worm from attaining its objective. In practice, however,
the beneﬁt of surprise goes to the attacker, and polymor-
phism and metamorphism will be with respect to some spe-
ciﬁc detection mechanism that has actually been deployed.
Polymorphism changes bytes in the row spaces of the three
projections without changing the mappings, while metamor-
phism uses diﬀerent mappings each time. Unless otherwise
stated, in this paper a signature is a set of byte strings (pos-
sibly ordered) that identify the worm, and polymorphism
and metamorphism are with respect to this set of strings.
The Epsilon-Gamma-Pi model is more general than byte
string signatures, however. One of the main results of this
paper is that simple byte string matching, even for sets of
small strings or regular expressions, can be inadequate for
worm content ﬁltering for realistic vulnerabilities.
2.2 Motivation for the Model
The Epsilon-Gamma-Pi model is general enough to han-
dle realistic attacks that do not follow the usual procession
of opening a TCP connection, adhering to some protocol
through the exploit vector phase until control ﬂow is hi-
jacked, and then executing the payload in the thread that
was exploited. IP packets in the Epsilon-Gamma-Pi model
and in the DACODA implementation are raw data subject
to interpretation by the host, since “information only has
meaning in that it is subject to interpretation” [9], a fact
that is at the heart of understanding viruses and worms.
An attacker might use an arbitrary write primitive in one
thread to hijack the control ﬂow of another, or hijack the
control ﬂow of the thread of a legitimate user.
Using symbolic execution, DACODA is able to discover
strong, explicit equality predicates about . Speciﬁcally,
DACODA discovers the mapping  and also can use con-
trol ﬂow decisions predicated explicitly on values from the
range of  to discover predicates about the bytes of network
traﬃc from which the values were projected (the row space
of ). These predicates can be used for signature generation,
but in this paper we use DACODA to characterize  quan-
titatively for a wide variety of exploits. This quantitative
analysis plus our experiences with analyzing actual exploit
vectors serve as a guide towards future work in this area.
For all three projections, DACODA tracks the data ﬂow
of individual bytes from the network packets to any point of
interest. Thus it also is helpful in answering queries about
where the payload code comes from or how the bogus control
data is encoded within the network traﬃc.
2.3 The Need for an Oracle
To distinguish , γ, and π, and also to provide the anal-
ysis in a timely manner, DACODA needs an oracle to raise
an alert when bogus control ﬂow transfer has occurred. For
the current implementation we use Minos [13] as an ora-
cle to catch low-level control data attacks. Minos is basi-
cally based on taintchecking to detect when data from the
network is used as control data. Thus it does not catch
attacks that hijack control ﬂow at a higher level abstrac-
tion than low-level execution, such as the Santy worm or
the attacks described in Chen et. al. [5], but DACODA is
equally applicable to any control ﬂow hijacking attack. For
example, in an attack where the ﬁlename of a ﬁle to be ex-
ecuted, such as “/usr/bin/counterscript”, is overwritten
with “/bin/sh” then executed yielding a shell,  would map
the exploit vector leading to the overwrite, γ would map the
string “/bin/sh”, and π would map the commands executed
once the shell was obtained. Minos will not catch this attack
but DACODA will still provide an analysis given the proper
oracle. Any worm that spreads from host to host must hi-
jack control ﬂow of each host at one level of abstraction or
another.
3. HOW DACODA WORKS
DACODA is currently being emulated in a full-system
Pentium environment based on the Bochs emulator [46].
When a network packet is read from the Ethernet device
every byte of the packet is labeled with a unique integer.
Reading the packet oﬀ the Ethernet is the last chance to
see all bytes of the packet intact and in order, because the
NE2000 driver often reads parts of packets out of order.
During its lifetime this labeled data will be stored in
the NE2000 device’s memory pages, read into the processor
through port I/O, and moved and used in computation by
various kernel- and user-space threads and processes. DA-
CODA will track the data through all of this and discover
equality predicates every time the labeled data or a sym-
bolic expression is explicitly used in a conditional control
ﬂow transfer. Symbolic execution occurs in real-time so that
when an oracle (Minos [13] in the current implementation)
Explanation
MakeNewQuadMem() is used
for reading four bytes of
memory and making a
QuadExpression from them,
unless we ﬁnd that the
memory word already
contains a QuadExpression.
C++-like Pseudo-code
Expression *MakeNewQuadMem(Addr)
FirstByte = ReadMemByteExpr(Addr);
if (FirstByte→IsAQuadExpr()) return FirstByte;
else return new QuadExpr(
ReadMemByteExpr(Addr + 0)
, ReadMemByteExpr(Addr + 1)
, ReadMemByteExpr(Addr + 2)
, ReadMemByteExpr(Addr + 3));
MakeNewQuadRegister() is the
same as MakeNewQuadMem()
but for 32-bit register reads.
Expression *MakeNewQuadRegister(Index)
FirstByte = ReadRegisterByteExpr(Index, 0);
if (FirstByte→IsAQuadExpr()) return FirstByte;
else return new QuadExpr(
WriteQuadMem() stores a
QuadExpression in a way
that MakeNewQuadMem()
can ﬁnd it.
WriteQuadRegister() is the
same as WriteQuadMem() but
for 32-bit register writes.
MakeNewQuadConstant()
simply uses bit masks and
shifts to split the 32-bit
constant into 4 8-bit
constants.
ReadRegisterByteExpr(Index, 0)
, ReadRegisterByteExpr(Index, 1)
, ReadRegisterByteExpr(Index, 2)
, ReadRegisterByteExpr(Index, 3));
void WriteQuadMem(Addr, Expr)
WriteMemByteExpr(Addr + 0, Expr);
WriteMemByteExpr(Addr + 1, NULL);
WriteMemByteExpr(Addr + 2, NULL);
WriteMemByteExpr(Addr + 3, NULL);
void WriteQuadRegister(Index, Expr)
WriteRegisterByteExpr(Index, 0, Expr);
WriteRegisterByteExpr(Index, 1, NULL);
WriteRegisterByteExpr(Index, 2, NULL);
WriteRegisterByteExpr(Index, 3, NULL);
Expression *MakeNewQuadConstant(0xAABBCCDD)
return new QuadExpression(
new Constant(0xAA)
, new Constant(0xBB)
, new Constant(0xCC)
, new Constant(0xDD));
Table 1: How QuadExpressions are Handled.
determines that control ﬂow has been hijacked, DACODA
simply summarizes the results of its analysis.
As an example, suppose a byte of network traﬃc is labeled
with “Label 1832” when it is read from the Ethernet card.
This label will follow the byte through the NE2000 device
into the processor where the kernel reads it into a buﬀer.
Suppose the kernel copies this byte into user space and a
user process moves it into the AL register, adds the integer
4 to it, and makes a control ﬂow transfer predicated on the
result being equal to 10.
mov
add
al,[AddressWithLabel1832]
; AL.expr <- (Label 1832)
al,4
; AL.expr <- (ADD AL.expr 4)
; /* AL.expr == (ADD (LABEL 1832) 4) */
cmp
al,10
; ZFLAG.left <- AL.expr
; /* ZFLAG.left == (ADD (Label 1832) 4) */
; ZFLAG.right <- 10
je
JumpTargetIfEqualToTen
; P <- new Predicate(EQUAL ZFLAG.left ZFLAG.right)
; /* P == (EQUAL (ADD (Label 1832) 4) 10) */
; if (ZF == 1) AddToSetOfKnownPredicates(P);
; /* Discover predicate if equality branch taken */
This illustrates how DACODA will discover the predicate
(in preﬁx notation), “(EQUAL (ADD (Label 1832) 4) 10)”.
This predicate from the range of  can be used to infer a
predicate about the row space of : that the byte that was
labeled with “Label 1832” is equal to 6.
For 16- or 32-bit operations DACODA concatenates the
labels for two or four bytes into a DoubleExpression or a
QuadExpression, respectively. We deﬁne a strong, explicit
equality predicate to be an equality predicate that is exposed
because of an explicit check for equality. Thus a comparison
of an unsigned integer that yields the predicate that the
integer is less than 1 is not explicit and will not be discovered
by DACODA (though it implies that this integer is equal to
0).
DACODA also discovers equality predicates when a la-
beled byte or symbolic expression is used as a jump or call
target, which is common in code compiled for C switch state-
ments and is how DACODA is able to detect important
predicates such as the ﬁrst data byte in the UDP packet
of the Slammer worm, “0x04”, the only real signature this
attack has. When a symbolic expression is used in an ad-
dress for an 8- or 16-bit load or store operation the address
becomes part of the symbolic expression of the value loaded
or stored (a Lookup expression is created which encapsu-
lates both the value and the address used to load or store
it). This type of information ﬂow is important for tracking
operations such as the ASCII to UNICODE conversion of
Code Red II.
There are six kinds of expressions: Labels, Constants,
DoubleExpressions, QuadExpressions, Lookups, and Opera-
tions. Every byte of the main physical memory, the general
purpose registers, and the NE2000 card’s memory are asso-
ciated with an expression, which can be NULL. The Zero
Flag (ZF) is used by the Pentium for indicating equality or
inequality. We associate two expressions with ZF, left and
right, to store the expressions for the last two data that were
compared. ZF can also be set by various arithmetic instruc-
tions but only explicit comparison instructions set the left
and right pointers in our implementation. These pointers
become an equality predicate if any instruction subsequently
checks ZF and ﬁnds it to be set.
Table 2 summarizes all of the various rules about how
DACODA propagates expressions and discovers predicates.
Explanation
Moves from register
to memory, memory to
register, or register
to register just copy
the expressions for
the bytes moved. The
same applies to
PUSHEs and POPs.
8- and 16-bit lookups
carry their addresses
with them. Without
this the 0x7801cbd3
bogus SEH pointer of
Code Red II would
have no expression.
Jumps or calls to
addresses that have
non-NULL expressions
imply an equality
predicate on that
expression; needed