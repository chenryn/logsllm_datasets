such modules should not put extra load on the business
network. Speciﬁcally, our system design goals are as follows:
Reconﬁgurability: Providing enterprise system adminis-
trators with the ﬂexibility to introduce new applications to
the system and inspect speciﬁc functionalities of selected
apps. This allows IT managers to create ﬁne-grained policies
regarding application connections.
App integrity: Compatibility with the existing app store
models (i.e., does not require app modiﬁcations).
Dynamic context-aware access control: Providing an
inspection scheme to monitor smart devices’ network con-
nections and distinguish application-speciﬁc functionalities to
serve as an execution-time context for further inspection.
Fine-grained network policy enforcement: Enforcing
ﬁne-grained policies and preventing malicious connection at-
tempts on different enforcement levels to support prohibiting
select app functions.
Avoiding extra network load: Using IP headers of device-
generated packets for communication between on-device con-
text inspectors and off-device policy enforcers.
In light of these considerations, we design BORDERPA-
TROL, which extracts execution-context about established net-
work connections, conveys data by tagging network packets
and enforces policies at the business network perimeter.
A. System design
BORDERPATROL comprises of four main high-level com-
ponents for different stages of execution: (i) Ofﬂine Analyzer
provides app speciﬁc information for system components and
policy creation tools, (ii) Context Manager extracts, encodes,
and sends the relevant execution-time contextual information
from user devices to policy enforcers, (iii) Policy Enforcer
evaluates contextual data against ﬁne-grained company poli-
cies and drops non-conforming packets originating from un-
desired functions, (iv) Packet Sanitizer cleanses the contextual
information from policy-conforming packets.
Of all four system components (gold boxes in Figure 1),
the Context Manager executes on the BYOD-enabled mo-
bile device (gray box in Figure 1) and the remaining three
components run on the enterprise’s network infrastructure. A
general architectural overview of our system with the main
components placed at strategic locations within the enterprise
network is shown in Figure 1.
1) Ofﬂine Analyzer: BORDERPATROL components gener-
ate and interpret the execution-time contextual information in
different modules. Therefore, it is mandatory for all modules to
462
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
representation and embeds into IP_OPTIONS header ﬁeld
along with an app identiﬁer.
3) Policy Enforcer: BORDERPATROL enforces policies on
the network and determines whether packets coming from
the smart devices in the business network perimeter should
be allowed or dropped. The Policy Enforcer comprises of
three stages: (i) extraction, (ii) decoding and (iii) enforcement.
During extraction phase, Policy Enforcer extracts the app-
identifying hash and the sequence of index numbers that
the Context Manager has embedded in IP_OPTIONS. Then,
during decoding stage, it selects the relevant index-to-method
signature mapping from the database, indicated by the hash
value of the app. Policy Enforcer maps each index back to the
method signature in the order received, thus creating the stack
trace which consists of method signatures. Finally, during
enforcement phase, the Policy Enforcer uses predetermined
policies to decide which network packets violate company
policy and drop them accordingly.
4) Packet Sanitizer: BORDERPATROL removes contextual
information from IP packets before network packets leave
the company. Such removal process is necessary as network
routers drop IP packets with set options due to network
packet ﬁltering speciﬁcations such as RFC 7126 [11]. Network
hardware providers also recommend dropping these pack-
ets to protect appliances from known attack vectors [12].
Therefore, packets which are leaving the company network
perimeter should be cleansed of the options that the Con-
text Manager injects into IP packets. The Packet Sanitizer
removes IP_OPTIONS from any outgoing IP packets that
are in compliance with the company policy. Note that packets
violating policy do not reach the Packet Sanitizer as the Policy
Enforcer drops them. Besides ensuring proper routing outside
the BYOD perimeter, the Packet Sanitizer also provides an im-
portant privacy-preserving role by stripping execution-context
identifying information (e.g., application names, loaded li-
braries) from the IP_OPTIONS.
B. Policy Speciﬁcations
Policies specify the enforcement levels, actions and targets
for select app functionalities or the app as a whole. We deﬁne
policy enforcement action (α) as the decision for a packet,
enforcement level (L) as the granularity of inspection into each
method signature, and enforcement target (θ) as the unique
string which deﬁnes a search query for the method signature.
With k, c and m denoting library, class, method names in a
method signature; h and s0...sn denoting the app hash and the
method signatures of a stack trace in the packet header (H);
(cid:4)θ denoting the level of target match in a method signature;
all possible levels of a target in a stack trace are denoted
as (cid:4)s. Values of (cid:4)s are ordered in accordance to the ﬁner
granularity in enforcement such that (cid:4)h  ::= {[] [] []}
 ::= (allow | deny)
 ::= (hash | library | class | method)
 ::= (target_hash | target_library | target_class |
target_method)
// Example 1: prevent ad library connections
{[deny][library]["com/flurry"]}
// Example 2: prevent functions of an entire class
{[deny][class]["com/google/gms"]}
// Example 3: prevent uploads for Dropbox
{[deny][method]["Lcom/dropbox/android/taskqueue/UploadTask;
->c()Lcom/dropbox/hairball/taskqueue/TaskResult"]}
// Example 4: whitelist company app connections by hash
{[allow][hash]["da6880ab1f9919747d39e2bd895b95a5"]}
Snippet 1: Simplified policy grammar.
V. IMPLEMENTATION
This section elaborates on the details of our BORDERPA-
TROL prototype. In the spirit of open science and to facilitate
reproducible experiments, we will release our implementation
of BORDERPATROL under an open source license.
A. Ofﬂine Analyzer
We implemented the Ofﬂine Analyzer as a Java program,
which accepts a list of apk ﬁles and produces a database
containing mappings for method signatures (§IV-A) in json
format for its ease of use and portability. During package
processing,
the Ofﬂine Analyzer uses the dexlib2 [13]
library to extract method signatures from dex ﬁles into a
sorted list, where the position of the method signature in
the list corresponds to the index. The method signatures of
a particular app are grouped under the md5 hash of the apk.
B. Context Manager
The Context Manager runs on the provisioned device of
the user as a user-space program. We implemented Context
Manager as a module for the Xposed Framework [14], which
provides an API for runtime program behavior modiﬁcation
by hooking Java methods and constructors,
thus enabling
BORDERPATROL to monitor the creation of all sockets. When
an app is loaded, the Context Manager parses the dex ﬁle
using dexlib2. The Context Manager then generates the
mapping of stack signatures to indexes and obtains source
line numbers of method signatures. After the app establishes
a connection, Xposed hooks transfer control to the Context
Manager, which then gathers the stack trace by invoking Java
API’s getStackTrace method. This method returns a list
of active stack frames that the application was executing, each
of which corresponds to a method call. The Context Manager
then uses the source line numbers of each stack frame to
Shared
library:
associate the method signature of the respective method with
an index using the deterministic mapping. We present an
example of this process along with the case-study values in
Figure 2. For above operations, the Context Manager relies on
three different submodules:
Hooks: Hooking is a technique to modify application
behavior by changing the execution ﬂow in order to alter
or augment a function with arbitrary functionality. We use
post-hooks to socket calls for intercepting socket creation,
triggering context extraction and IP_OPTIONS injection to IP
headers. Using post-hooks ensure that a socket is present and
the connection is established before setting IP_OPTIONS.
Consequently, the Context Manager monitors all connection
attempts that are conveyed over all network sockets.
enables
BORDERPATROL
the
IP_OPTIONS ﬁeld of sockets to tag network packets.
However, standard Java API does not allow applications to
access this ﬁeld. As a result, the Context Manager requires
to execute native code and call the setsockopt system
call to obtain low level access to socket options via Java
Native Interface (JNI). Thus, we compile a shared library
which exposes the setsockopt system call to the managed
Dalvik code via JNI. This library consists of a native function
which serves as a wrapper for the setsockopt system call.
Instrumented Linux kernel: The default Linux kernel
used in Android requires programs to have CAP_NET_ADMIN
capabilities to construct packet headers, which is exclusive to
system applications. Additionally, all non-system applications,
such as our Context Manager, run in user-space without such
privileges and cannot set socket options even in the native
space. To overcome such restrictions, we instrument the Linux
kernel with a one-line patch such that it allows IP header
construction regardless of the privilege level of an application.
C. Policy Enforcer
We implemented Policy Enforcer as a user-space program
which uses Python’s netfilterqueue bindings [15] to
receive incoming network packets and Scapy network packet
processing package [16] to detect and extract the sequence of
indexes from IP headers. The Policy Enforcer decodes an index
to a method signature by using the json database that comes
from the Ofﬂine Analyzer, where each index corresponds to the
position of a method signature in the list of method signatures.
To enforce a policy, the Policy Enforcer engine checks policy
rules to determine the required course of action according
to policy speciﬁcations (§IV-B). If Policy Enforcer does not
detect a policy violation, it allows corresponding IP packets
to continue their route ﬁrst to the Packet Sanitizer module and
then to their original destination.
D. Packet Sanitizer
Similar to the Context Manager, the Packet Sanitizer mod-
ule also employs netfilterqueue bindings and the Scapy
package to acquire and modify incoming network packets
from the Policy Enforcer. The Packet Sanitizer removes
464
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 2: Context Manager work ﬂow. The Context Manager obtains the stack trace after a connection is established via
getStackTrace method. Stack frames include source line numbers that allow matching method names to method signatures.
Using sequentially ordered list of method signatures from the dex ﬁle, each method signature is encoded into an index number.
Finally, indexes are injected into IP headers using setsockopt system call through our shared library.
IP_OPTIONS from the packet header when it detects that
the respective ﬁeld is enabled.
E. Policy Extractor
As an extension to the BORDERPATROL architecture, we
also provide a Python analysis tool to assist IT administrators
in determining policies. This tool runs an application twice. In
the ﬁrst run, administrators can exercise the app for allowed
functionalities, which BORDERPATROL uses to construct a
baseline proﬁle. On the second run, human operators are
guided to invoke undesirable functionalities in the app. The
tool then automatically identiﬁes uniquely appearing method
signatures in stack traces and maps them to the set of targeted
functions per each run. Subsequently, the Policy Extractor
parses each unique method signature and constructs policies
with speciﬁed levels of enforcement.
VI. EVALUATION
A. Experimental setup
We implemented our prototype of BORDERPATROL for
Android 7.1.1 Nougat (API 25) and evaluated the system
in the Android emulator. A job dispatcher node assigns
apps to evaluate to a worker node via RabbitMQ message
broker [17]. The worker runs an instance of the Android
emulator on QEMU [18] with a modiﬁed Android system
image with Xposed framework for the x86 architecture and
the patched Linux kernel v3.10. The QEMU emulator uses
TAP virtual network interface for network connectivity. We
also use iptables to route packets originating from the
emulator into netfilter queues. During testing, we use
the adb monkey User Interface exerciser [19] to provide
random UI inputs to apps. Finally, the Packet Sanitizer module
removes IP_OPTIONS from outgoing packets to ensure that
the packets get routed on the Internet correctly.