Some of
these misconﬁgurations can be explained by
a bad undocumented mod_ssl practice,
since certiﬁ-
cates in the SSLCACertificateFile are also used
TABLE II: TLS CCA as deployed by the service providers
running other TLS server software.
Service provider
Banking:
danskebank.ee
lhv.ee
nordea.ee
swedbank.ee
Education:
ehis.ee
etis.ee
ttu.ee
ut.ee
Government:
eas.ee
Health:
digilugu.ee
digiregistratuur.ee
Insurance:
compensalife.eu
kindlustus.ee
Utility:
arved.ee
dormitorium.ee
elektrum.ee
elering.ee
elion.ee
emt.ee
imatraelekter.ee
kyla.ee
tallinnavesi.ee
Server
BigIP
IIS/6.0
?
BigIP
Oracle-AS
IIS/7.5
Oracle-AS
Oracle-AS
IIS/7.5
BigIP
IIS/6.0
IIS/6.0
IIS/7.0
?
IIS/7.x
Nginx
Jetty?
Tomcat?
BigIP
IIS/6.0
IIS/6.0
IIS/7.5
Spare
Request
Timeout
Privacy
Resume
Bind
Validity
0
24
6
0
10
6
14
0
13
0
27
21
5
1
9
0
1
0
0
25
20
7
optional any
optional any
require
optional any*
optional
optional any*
optional
optional
optional any*
optional any
optional any
optional any*
optional any*
optional
optional any*
optional any
require
optional any
optional any
optional any*
optional any
optional any*
1 min
6 min
1 min
1 hour
5 min
2 min
5 min
5 min
2 min
10 sec
5 min
5 min
2 min
2 min
1 min
–
–
1 min
10 sec
6 min
6 min
2 min
–
+
–
–
–
+
–
–
+
–
+
+
+
+
+
–
–
–
–
+
+
+
+
+
+
+
+
+
+
+
+
–
+
+
–
+
–
–
+
+
–
+
+
–
+
+
–*
+
–
–
–
–
–
–
–
?
–
–
–
–
+
–
–
–
–
–
OCSP
OCSP
OCSP
OCSP
CRL
?
?
CRL 2007
OCSP
OCSP
OCSP
?
CRL
OCSP
CRL
OCSP
OCSP
–
OCSP
CRL
CRL
CRL
9
least
to build the server’s certiﬁcate chain provided in the
server’s Certificate message. We have found several
mod_ssl tutorials on the Internet
in which readers are
the server’s cer-
instructed to place CA certiﬁcates of
tiﬁcate into the SSLCACertificateFile rather
than
SSLCertificateChainFile. Our observations conﬁrm
this narrative, since most of the spare CAs are ones that have
also issued a server’s certiﬁcate.
2) Missing CAs: The absence of SK root CA DNs or an
empty list of DNs in a server’s CertificateRequest
message will not create a problem. However, the presence
of root CA DNs without intermediate DNs will make TLS
CCA fail if the certiﬁcate store in the user’s browser does
not have these intermediate certiﬁcates installed. The service
providers e-ope.ee, justask.ee, ox.ee and all service
providers using Microsoft Internet Information Services (IIS)
were found to be missing one or both intermediate CA DNs
in their CertificateRequest message.
The service providers g4s.ee, justask.ee, ox.ee and
ut.ee were found to be missing the new root CA certiﬁcate
of SK in their trust store, thereby denying the possibility of
using TLS CCA with client certiﬁcates issued after July 2011.
3) Veriﬁcation Depth: The veriﬁcation depth value set by
mod_ssl SSLVerifyDepth directive (column “Depth”
in Table I) was enumerated using the method described
in Section III-C. As was explained in Section III-B,
the
mod_ssl does not allow limiting intermediate CA certiﬁcates
the valid client certiﬁcate chain may have. However,
that
at
the length of the chain can be limited using the
SSLVerifyDepth conﬁguration directive. The correct value
for the Estonian ID card certiﬁcate chain is 2, since in addition
to the end entity certiﬁcate the chain contains intermediate and
root CA certiﬁcates. However, as can be seen in Table I, almost
half of the service providers have extended their veriﬁcation
depth constraint. Although it does not create an immediate
threat, the depth constraint of 2 can prevent attacks in certain
cases, for example, if the CA mistakenly enables CA trust
bits in the end entity certiﬁcate and does not have path
length constraints in CA certiﬁcates as was the case in the
TURKTRUST incident [31].
4) CCA Bound Sessions: The column “Bind” tells whether
the service provider requires the presence of a CCA TLS con-
nection only at the login phase or also after the user has been
authenticated and is performing actions in the authenticated
environment.
We see that only a few service providers (mostly banks)
require a CCA connection also after the authenticated HTTP
session has been established. The lack of CCA bound sessions
can be explained by the additional complexity of web design
that is entailed if the support for password authentication must
also be provided. Instead of setting up two URL locations for
CCA and non-CCA authenticated users, the service providers
set a CCA URL to which the user is redirected only at the login
phase, but after an authenticated HTTP session is established
(by use of an HTTP cookie) the browser is redirected back
to the common server path where CCA is not required. This
type of federated authentication approach has more security
risks, since the authenticated session is protected only by an
HTTP cookie which might be stolen by an attacker capable of
impersonating the server, or leaked in another way (e.g., via a
cross-site scripting attack). In contrast, TLS key material from
a client certiﬁcate authenticated TLS session may be obtained
10
test
by the attacker only if the attacker is able to compromise one
of the endpoints.
It is interesting to note that while the service providers
tbb.ee and nordea.ee also required a TLS CCA con-
nection after the login phase, the application did not verify
whether the client certiﬁcate presented was of the same person
that was presented at the login phase.
In some service provider web sites we did not have an
account;
if the authenticated
session was bound to the CCA or not. For these service
providers the rows are marked with a question mark.
therefore, we could not
5) Privacy of Client’s Certiﬁcate: The column “Privacy”
shows whether the service provider protects the privacy of
a client certiﬁcate by requesting CCA on renegotiation or
whether the CCA is performed on initial TLS negotiation and
the client certiﬁcate is sent to the server over an unencrypted
channel.
We see that one third of all service providers do not protect
the privacy of client certiﬁcates. This can be explained by the
mod_ssl documentation that does not warn about the conse-
quences of conﬁguring the SSLVerifyClient directive in
a server-wide context.
Another explanation could be that renegotiation has been
disabled on the server side as a temporary ﬁx when the TLS
renegotiation vulnerability (CVE-2009-3555) was discovered,
and was left disabled even after the TLS renegotiation in-
dication extension [37], which ﬁxes the vulnerability, was
standardized and implemented in browsers.
6) CCA Session Resumption: The column “Resume” indi-
cates whether the server supports TLS session resumption
of client certiﬁcate authenticated sessions. We see that
in
mod_ssl deployments the CCA sessions that have been
established on initial negotiation do support resumption, while
all deployments (except stat.ee) that require CCA on
renegotiation do not support resumption for these sessions.
This can be the result of the mod_ssl bug described in
Section III-D.
While most of the service providers fail to resume CCA
the support for CCA session resumption is only
sessions,
important for those service providers who serve the content
over a TLS CCA connection after the login phase.
deployments
7) CCA request:
the
For
mod_ssl
column “Request” shows
the value conﬁgured by the
SSLVerifyClient directive. As described in Section III-A
the value require will result in a failed TLS handshake if,
for whatever reason, the veriﬁcation of the client certiﬁcate
fails. Some service providers use the value optional that
will allow the service provider to provide a personalized
HTTP response if the client has no client certiﬁcate. In all
other cases the handshake will fail with an error message
provided by the browser.
With non-mod_ssl deployments (Table II) the situation
is different. Most of them at the TLS handshake level will
tolerate the absence of a client certiﬁcate and the presence of
any client certiﬁcate as long as the client can prove possession
of the corresponding private key (marked as optional_any;
optional and require mimics mod_ssl behavior). If the
client provides an invalid certiﬁcate, the HTTP error message
is returned by the web server or by the application.
We
have
observed
compensalife.eu,
etis.ee,
imatraelekter.ee,
that
service
dormitorium.ee,
the
providers
eas.ee,
kindlustus.ee
and tallinnavesi.ee (all using IIS) allow successful
authentication with a qualiﬁed digital signature certiﬁcate
whose key usage is
inconsistent with TLS CCA (the
certiﬁcate key usage extension has only nonRepudiation
bit asserted). Apparently this certiﬁcate veriﬁcation step is
missed by the IIS server and therefore must be performed by
the application. We have informed Microsoft about the ﬂaw.
The service provider swedbank.ee was found to miss
not only certiﬁcate key usage veriﬁcation, but also signature
veriﬁcation on a client certiﬁcate received. The ﬂaw allowed
successful login to any user account if the user ID of the person
was known. The service provider has been informed about this
ﬂaw and it has already been ﬁxed.
8) CCA Handshake Timeout Enforcement: The column
“Timeout” shows for how long the handshake can be kept
open after the server has sent the ServerHello message,
but before the client has sent the CertificateVerify
message. In the case of service providers marked “–”, we were
able to keep the connection open for more than 12 hours. The
service providers marked with “*” had mod_reqtimeout
enabled, but since the CCA was requested on renegotiation,
we could still keep the connection open using the method
described in Section III-F.
To measure timeout for non-mod_ssl deployments which