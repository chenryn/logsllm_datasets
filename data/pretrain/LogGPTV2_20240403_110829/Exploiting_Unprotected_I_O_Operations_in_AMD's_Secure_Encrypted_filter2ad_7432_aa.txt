title:Exploiting Unprotected I/O Operations in AMD's Secure Encrypted
Virtualization
author:Mengyuan Li and
Yinqian Zhang and
Zhiqiang Lin and
Yan Solihin
Exploiting Unprotected I/O Operations in 
AMD’s Secure Encrypted Virtualization
Mengyuan Li, Yinqian Zhang, and Zhiqiang Lin, The Ohio State University; Yan Solihin, 
University of Central Florida
https://www.usenix.org/conference/usenixsecurity19/presentation/li-mengyuan
This paper is included in the Proceedings of the 28th USENIX Security Symposium.August 14–16, 2019 • Santa Clara, CA, USA978-1-939133-06-9Open access to the Proceedings of the 28th USENIX Security Symposium is sponsored by USENIX.Exploiting Unprotected I/O Operations in AMD’s Secure Encrypted Virtualization
Mengyuan Li
The Ohio State University
Yinqian Zhang
The Ohio State University
Zhiqiang Lin
The Ohio State University
Yan Solihin
University of Central Florida
Abstract
AMD’s Secure Encrypted Virtualization (SEV) is an emerg-
ing technology to secure virtual machines (VM) even in the
presence of malicious hypervisors. However, the lack of trust
in the privileged software also introduces an assortment of
new attack vectors to SEV-enabled VMs that were mostly
unexplored in the literature. This paper studies the insecurity
of SEV from the perspective of the unprotected I/O operations
in the SEV-enabled VMs. The results are alerting: not only
have we discovered attacks that breach the conﬁdentiality
and integrity of these I/O operations—which we ﬁnd very
difﬁcult to mitigate by existing approaches—but more signiﬁ-
cantly we demonstrate the construction of two attack primi-
tives against SEV’s memory encryption schemes, namely a
memory decryption oracle and a memory encryption oracle,
which enables an adversary to decrypt and encrypt arbitrary
messages using the memory encryption keys of the VMs. We
evaluate the proposed attacks and discuss potential solutions
to the underlying problems.
1 Introduction
Secure Encrypted Virtualization (SEV) is an emerging proces-
sor feature available in recent AMD processors that encrypts
the entire memory of virtual machines (VM) transparently.
Memory encryption is performed by a hardware memory en-
cryption engine (MEE) embedded in the memory controller
that encrypts memory trafﬁc on the ﬂy, with a key unique to
each of the VMs. As the encryption keys are generated from
random sources at the time of VM launches and are securely
protected inside the secure processor in their lifetime, privi-
leged software, including the hypervisor, is not able to extract
the keys and use them to decrypt the VMs’ memory content.
Therefore, SEV enables a stronger threat model, where the hy-
pervisor is removed from the trusted computing base (TCB).
It is explicitly stated in AMD’s SEV whitepaper [20] that
“SEV technology is built around a threat model where an at-
tacker is assumed to have access to not only execute user level
privileged code on the target machine, but can potentially exe-
cute malware at the higher privileged hypervisor level as well.”
Hence, SEV provides a trusted execution environment (TEE)
for (mostly) unmodiﬁed VMs to perform conﬁdential compu-
tation that is shielded from strong adversaries that control the
entire privileged software stack.
The lack of trust in the hypervisor, unfortunately, increases
considerably the attack surface that a VM has to guard against.
As the hypervisor controls the VMs’ access to hardware re-
sources including CPU, physical memory, I/O devices, the
VM’s CPU scheduling, memory management, and I/O oper-
ations must be mediated by untrusted software. As a result,
new attack vectors have emerged as researchers explore the
security properties of this new hardware feature. For instance,
Hetzelt and Buhren [17] demonstrated attacks against SEV-
enabled VMs by exploiting unencrypted virtual machine con-
trol block (VMCB) at the time of VMExit. They show that a
malicious hypervisor may learn the machine state of the guest
VM by reading register values stored in the VMCB and alter
these register values before returning to the VM. The lack
of integrity of the encrypted memory has been identiﬁed by
several prior studies [9, 12, 17, 25], which enables a malicious
hypervisor to perform a variety of attacks.
This paper studies a previously unexplored problem under
SEV’s trust model—the unprotected I/O operations of SEV-
enabled VMs. While the entire memory of the VMs can be
encrypted using keys that are not known to the hypervisor,
direct memory access (DMA) from the virtualized I/O devices
must operate on unencrypted memory or memory shared with
the hypervisor. As a result, neither the conﬁdentiality nor the
integrity of the I/O operations can be guaranteed under SEV’s
trust models.
More importantly, this paper goes beyond the investigation
of I/O insecurity itself. In particular, we further demonstrate
that these unprotected I/O operations can be leveraged by the
adversary to construct (1) an encryption oracle to encrypt ar-
bitrary memory blocks using the guest VM’s memory encryp-
tion key, and (2) a decryption oracle to decrypt any memory
pages of the guest. We demonstrate in the paper that these
USENIX Association
28th USENIX Security Symposium    1257
two powerful attack primitives can be constructed in a very
stealthy manner—the oracles can be queried by the adversary
repeatedly and frequently without crashing the attacked VMs.
In addition, as a by-product of the study, this paper also
reveals a severe side-channel vulnerability of SEV: As the
adversary is able to manipulate the nested page tables, it could
alter the present bit or reserve bit of the nested page table
entries to force guest VM’s memory accesses to the corre-
sponding pages to trigger page faults. While this page-fault
side channel has been previously studied in the context of Intel
SGX [36] and even used in previous attacks against SEV [17],
it is also reported that page faults from SEV-enabled guest
VMs leak the entire faulting addresses (and error code) to the
hypervisor (unlike in SGX where the page offset is masked).
This ﬁne-grained page-fault attack enables ﬁne-grained trac-
ing of the encrypted VM’s memory access patterns, and par-
ticularly in this paper is used to facilitate the construction of
the memory decryption oracle.
Contribution. This paper contributes to the study of TEE
security in the following aspects:
• The paper studies a previously unexplored security issue
of AMD SEV—the unprotected I/O operations of SEV-
enabled guest VMs. The root cause of the problem is the
incompatibility between AMD-V’s I/O virtualization with
SEV’s memory encryption scheme.
• The paper demonstrates that the unprotected I/O opera-
tions could also be exploited to construct powerful attack
primitives, enabling the adversary to perform arbitrary
memory encryption and decryption.
• The paper reports the lack of page-offset masking of the
faulting addresses during SEV’s page faults handling,
which leads to ﬁne-grained side-channel leakage. The pa-
per also demonstrates the use of both ﬁne-grained and
coarse-grained side channels in its I/O attacks.
• The paper empirically evaluates the ﬁdelity of the attacks
and discusses both hardware and software approaches to
mitigating the I/O security issues.
Responsible disclosure. We have reported our ﬁndings to
AMD and disclosed the technical details with AMD re-
searchers. While we were conﬁrmed that the presented attacks
work on current release of SEV processors, AMD researchers
suggested future generations of SEV chipsets are likely to be
immune from these attacks. Some of the technical feedback
we obtained from AMD has been integrated into the paper.
Roadmap. Section 2 presents the overview of AMD’s SEV
and explains the root causes of the exploited I/O operations in
this paper. Section 3 describes several attacks exploiting the
unprotected I/Os. Section 4 presents an evaluation of the ﬁ-
delity of the attacks. Section 5 discusses potential solutions to
securing SEV’s I/O operations. Section 6 summarizes related
work and Section 7 concludes the paper.
2 Overview of AMD SEV
2.1 Overview
AMD Secure Encrypted Virtualization (SEV) is a security
extension for AMD Virtualization (AMD-V) architecture [2].
AMD-V is designed as a virtualization substrate for cloud
computing services, which allows one physical server to run
multiple isolated guest virtual machines (VM) concurrently.
AMD’s SEV is designed atop its Secure Memory Encryption
(SME) technology.
Secure Memory Encryption. SME [20] is AMD’s technol-
ogy for real-time memory encryption, which aims at providing
strong protection against memory snooping and cold boot at-
tacks. An Advanced Encryption Standard (AES) engine is
embedded in the on-die memory controller that encrypts/de-
crypts memory trafﬁc when it is transferred out of or into the
processor. A single ephemeral encryption key is generated for
the entire machine from a random source every time system
resets. The key is managed by a 32-bit ARM Cortex-A5 Se-
cure Processor (AMD-SP). When SME is enabled, physical
address bit 47 (also called the C-bit) in the page table entry
(PTE) is used to mark whether the memory page is encrypted,
thus enabling page-granularity encryption. Transparent SME,
or TSME, is a mode of operating of SME, which allows en-
cryption of the entire memory regardless of the C-bit. Thus
TSME allows unmodiﬁed operating system to use the memory
encryption technology.
Secure Encrypted Virtualization. AMD’s SEV combines
the AMD-V architecture and the SME technology to support
encrypted virtual machines [20]. SEV aims to protect the
security of guest VMs even in the presence of a malicious
hypervisor, by using two isolation techniques: First, the data
of guest VMs inside the processor is protected by an access
control mechanism using Address Space Identiﬁer (ASID).
Speciﬁcally, the data in the CPU cache is tagged with ASID
of each VM; thus it is prevented from being accessed by
other VMs or the hypervisor. Second, the guest VM’s data
outside the processor (e.g., in the DRAM) is protected via
memory encryption. Rather than using a single AES key
for the whole machine as in the case of SME, SEV allows
each VM to use a distinct ephemeral key, thus preventing the
hypervisor from reading the encrypted memory of each VM.
Because memory encryption keys are managed by the secure
co-processor, privileged software layers are not allowed to
access or manipulate these keys.
Beside conﬁdentiality, authenticity of the platform and in-
tegrity of the guest VMs are also provided by SEV. An identi-
ﬁcation key embedded in the ﬁrmware is signed by both AMD
and the owner of the machine to demonstrate that the platform
is an authentic AMD platform with SEV capabilities, which
is administered by the machine owner. The initial contents
of memory, along with a set of metadata of the VM, can be
signed by the ﬁrmware so that the users of the guest VMs
1258    28th USENIX Security Symposium
USENIX Association
Table 1: Effects of C-bits in guest page tables (gPT) and nested
page tables (nPT). M is the plaintext; Ek() is the encryption function
under a memory encryption key k; kg and kh represent the guest VM
and the hypervisor’s memory encryption keys, respectively.
gPT
C-bit=0
C-bit=1
nPT
C-bit=1
Ekh(M)
Ekg(M)
C-bit=0
M
Ekg(M)
may verify the identity and the initial states of the launched
VMs through remote attestation.
2.2 Memory Encryption
ASID and memory encryption. The encryption keys used
for memory encryption are generated from random sources
when the VMs are launched. They are securely stored inside
the secure processor for their entire life-cycle. Each VM has
its own unique memory encryption key Kvek, which is indexed
by the ASID of the VM. When the VM accesses a memory
page that is mapped to its address space with its C-bit set, the
memory will be ﬁrst decrypted using the VM’s Kvek before
loaded into the CPU caches. Data in the caches are stored
in plaintext; each cache line, in addition to the regular cache
tags, is also tagged by the ASID of the VM. As such, the
same physical memory may have multiple copies cached in
the hardware caches. AMD does not maintain the consistency
of the cache copies with different ASID tags [20].
Encryption with nested paging. AMD-V utilizes nested
paging structures [1] to facilitate memory isolation between
guest VMs. When the virtual address used by the guest VM
(gVA) is to be translated into physical address, it is ﬁrst trans-
lated into a guest physical addressing (gPA) using the guest
page table (gPT), and the gPA is then translated into the host
physical address (hPA) using the nested page table (nPT).
While gPT is located in guest VM’s address space, nPT is
controlled directly by the host.
With AMD’s SME technology, bit 47 of a PTE is called
the C-bit, which is used to indicate whether or not the cor-
responding page is encrypted. When the C-bit of a page is
set (i.e., 1), the page is encrypted. As both the gPT and the
nPT has C-bits, the encryption state of a page is controlled
by the combination of the two C-bits in its PTEs in the gPT
and nPT. The effect of C-bits in the gPT and nPT is shown
in Table 1. To summarize, whenever the C-bit of gPT is set
to 1, the memory page is encrypted with the guest VM’s en-
cryption key kg; when the C-bit of gPT is cleared, the C-bit
of nPT determines the encryption state of the page: the page
is encrypted under the hypervisor’s key kg when C-bit is 1;
otherwise the page is not encrypted.
To share memory pages between a guest VM and the hy-
pervisor while preventing physical attacks, it is required to
Figure 1: An example of a disk I/O operation by an SEV-
enabled VM.
have the memory page’s C-bit set to 0 in its gPT and the C-bit
set to 1 in its nPT, so that the page is encrypted under the
hypervisor’s encryption key.
Encryption modes of operation. SEV uses AES as its en-
cryption algorithm. The memory encryption engine encrypts
data with a 128-bit key using the Electronic Codebook (ECB)
mode of operation [12]. Therefore, each 16-byte aligned mem-
ory block is encrypted independently. A physical address-
based tweak function T () is utilized to make the cipher-
text dependent of not only the plaintext but also its physical
address [20]. Speciﬁcally, the tweak function is deﬁned as
T (x) = ⊕xi=1ti, where xi is the ith bit of host physical address
x, ⊕ is the bitwise exclusive-or (i.e., XOR) and ti (1 ≤ i ≤ 128)
is a 128-bit constant vector. The tweak function takes a phys-
ical address as an input and outputs a 128-bit value T (x).
Therefore, the ciphertext c of a plaintext m at address Pm is
c = EK(m⊕ T (Pm)). The tweak function prevents attacker
from inferring plaintext by comparing the ciphertext of two
16-byte memory blocks. However, as the constant vectors tis
remain the same for all VMs (and the hypervisor) on the ma-
chine, they can be easily reverse engineered by an adversary.
Known issues with SME memory encryption. One root
problem exploited in prior studies on SEV’s insecurity is the
lack of integrity of its encrypted memory [9, 12, 17, 25].
2.3 Virtualized I/O Operations
Similar to other virtualization technologies, SEV-enabled
VMs interact with I/O devices through virtual hardware using
Quick Emulator (QEMU). Common methods for VMs to per-
form I/O operations are programmed I/O, memory-mapped
I/O, and direct memory access (DMA). Among these meth-
ods, DMA is most frequently used method for SEV-enabled
VMs to do I/O accesses.
USENIX Association
28th USENIX Security Symposium    1259
Direct Memory Access in SEV. With the assistance of DMA
chips, programmable peripheral devices can transfer data to
and from the main memory without involving the proces-