User
Mode
KEntry
ev
KPre-
empt
KSched
KExit
Idle
Mode
KEntry
Interrupt
KPre-
empt
KExit
(a) Small-step transition system.
(b) Big-step system.
Figure 4. Transition systems for the seL4 abstract speciﬁcation. Shading
indicates whether the scheduling partition PSched is active (unshaded)
or not (shaded). For KEntry ev, PSched is active iff ev = Interrupt.
s and s(cid:2) that differ only for some object in Sk for which
pas-reﬁned pas s holds and integrity pas s s(cid:2) holds.
It is trivial to prove that, under these rules, (cid:2) allows no
partition other than PSched to send information to PSched;
that (cid:2) is reﬂexive; and that PSched can send information to
all partitions. This last result is expected since the scheduler
can necessarily affect any other partition by scheduling a
thread within it. The ﬁrst result ensures that the scheduler
cannot
through
which information can ﬂow from any partition to any other.
Figure 3 depicts the information ﬂow policy, excluding
then become a global
transitive channel
self-edges, derived from Figure 2’s access control policy.
B. System Model
Before describing how we formalise information ﬂow
security for seL4, we ﬁrst describe the formal model of the
kernel over which this property is deﬁned. This model is
essentially a state machine with unlabelled transitions.
Figure 4(a) depicts the transition system of the seL4
abstract speciﬁcation for which we proved information ﬂow
security, comprising 4,970 source lines of Isabelle/HOL. The
transitions do not carry labels; rather, all information about
each state transition is encoded in the pre- and post-states
of the transition. One piece of information encoded in the
state is the current abstract mode of execution, which labels
the nodes in Figure 4(a). The KEntry mode is parameterised
by a kernel event ev, indicating the reason for kernel entry,
whose values include Interrupt, to model the arrival of device
interrupts; SyscallEvent, to model the occurrence of user
traps; and others that represent virtual memory faults and
exceptions etc. The abstract modes that model kernel-mode
execution begin with ”K”. The transition from KEntry to
KPreempt models the kernel handling a system call, reaching
a preemption point and preemption occurring because an
interrupt has arrived. The following transition models the
kernel handling the preemption—i.e. responding to the just-
arrived interrupt. The transition from KEntry to KSched
models the kernel handling an event without preemption
occurring.
420
The transition from KSched models the execution of the
scheduler, which is invoked at the end of every kernel event
before returning to user-space. When invoked, the scheduler
examines the remaining time slice of the current partition.
When the remaining time slice is zero the scheduler switches
to the next partition in the static partition schedule; when
it is non-zero the scheduler schedules the highest priority
runnable thread in the current partition or the idle thread if
there are no runnable threads to choose.
The current partition’s remaining time slice is decre-
mented upon the arrival of timer interrupts, which are seen
only by the kernel. Recall, from Section III-B, that we
assume the system is initialised so that all other interrupts are
disabled. This is formalised by the property only-timer-irq.
It is relatively straightforward to prove that only-timer-irq
is invariant across all executions. So the arrival of each
interrupt marks the passage of another timer tick.
The transitions from KExit model exiting the kernel back
to user-mode. We distinguish the cases in which a user-level
thread is running (UserMode) from those in which the idle
thread is running (IdleMode), because in the latter the only
way to enter the kernel is by the arrival of a device interrupt
(KEntry Interrupt).
The self-loop transition on UserMode models the ordi-
nary user-level actions of the currently running thread, for
instance reading and writing to the physical memory that is
mapped in its virtual address space. The self-loop transition
on IdleMode represents the passage of time as the idle thread
awaits the arrival of the next interrupt.
The transition system in Figure 4(a) differs a little from
the transition system of the kernel about which functional
correctness was originally proved [27]. The original tran-
sition system did not have the states KPreempt, KSched
and KExit and had just single transitions from kernel entry
to user-mode and to idle-mode respectively. We modiﬁed
it (and then re-established functional correctness) to break
these kernel transitions into a number of smaller steps be-
cause the actions of handling timer interrupts and scheduling
a new partition occur on behalf of the scheduling partition,
PSched, which is distinct from all other partitions Pi. These
must therefore be represented as separate transitions.
The machine model on which the kernel speciﬁcations
sit uses an interrupt oracle to model the arrival of device
interrupts. This oracle is simply an inﬁnite stream of values
in the range 0x00–0xFF (where 0xFF means no interrupt is
currently active), with a natural number variable that records
the current position in this stream. The machine function
getActiveIRQ returns the currently active IRQ. When called,
it advances the current position of the interrupt oracle and
then examines the value at the new position in the interrupt
stream. getActiveIRQ returns this value if it is not 0xFF
and is allowed by the current interrupt masks; otherwise
getActiveIRQ returns a null value. Under the assumption
only-timer-irq, which implies that all non-timer interrupts are
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
masked off, getActiveIRQ can return only one of two possible
answers each time it is called: either a timer interrupt has
arrived, or no interrupt has arrived since getActiveIRQ was
last called. We prove information ﬂow security for all such
oracles, and assume that partitions are allowed to know the
position of all timer interrupts in the oracle stream as well
as the current oracle position. This implies that all partitions
are allowed to observe the passage of global time.
To formalise information ﬂow, we had to transform the
transition system of Figure 4(a) into one with larger exe-
cution steps. While we do not model the passage of time
explicitly, it is exposed (albeit quite coarsely) in our formal
model of the kernel via the current position of the interrupt
oracle. Advancing this position, by calling getActiveIRQ,
allows the passage of time to be observed. The amount that
the oracle position is advanced when handling a pre-emptible
system call necessarily depends on how many preemption
points were traversed, which depends on the input data to
the system call. Thus the change in the oracle position on any
individual transition of Figure 4(a) could leak information
if observed by another partition.
Fortunately, in reality, no other partition can observe any-
thing about the new interrupt state until it next executes—
i.e. until after the next partition switch. We transform the
transition system of Figure 4(a) to reﬂect this reality, arriving
at the transition system depicted in Figure 4(b). This trans-
formation coalesces together all transitions from one KExit
until the next (timer) interrupt is processed, in which case
the system’s new mode is either KPreempt (if the interrupt
arrived during a preemptible system call) or KEntry Interrupt
(otherwise). Because only the timer interrupt is enabled these
transitions represent all activity by the currently running
partition in between one timer tick and the next, and show
up in the ﬁnal transition system as a single transition from
KExit to KPreempt or KEntry Interrupt respectively. We also
coalesce all transitions from KPreempt to the next KExit and
similarly for KEntry Interrupt. These transitions represent
activity by the scheduling partition PSched.
The amount that the interrupt oracle position is advanced
on any transition of this new transition system depends only
on its previous position and the position of the next timer
interrupt: on a transition from KExit it is advanced to the
position of the next timer interrupt in the stream; on a
transition to KExit it is advanced once only, during servicing
of the just-arrived interrupt.
C. Formalising Information Flow Security
With the system model as depicted in Figure 4(b) we may
now formalise information ﬂow security, given an informa-
tion ﬂow policy (cid:2) derived as explained in Section IV-A.
We adopt a variation of intransitive noninterference pro-
posed in earlier work [36] for operating system kernels. An
intransitive noninterference variant is most appropriate here
because the information ﬂow policy (cid:2) may, in general, be
421
intransitive, in that it may allow information ﬂows from Pi to
Pj and Pj to Pk, without allowing a direct ﬂow from Pi to Pk.
Crucially, however, our deﬁnition admits systems in which
the association between each transition and the partition on
whose behalf the transition is said to occur depends on the
pre-state of the transition. This is required since, as in other
operating system kernels, when an event like a system call
happens in seL4, the kernel must consult the scheduling data
structures to determine which partition is currently active in
order to decide which partition the system call has been
made by. The mapping from transitions to partitions is thus
state-dependent.
Our deﬁnition of information ﬂow security is also pre-
served by reﬁnement [36], which is vital in allowing us
to prove it about seL4’s abstract speciﬁcation and then
conclude that it must hold for seL4’s C implementation by
virtue of the functional correctness result.
Our deﬁnition of information ﬂow security is a descendant
of von Oheimb’s notion of nonleakage [40]. This condition
forbids partitions from being able to learn about the contents
of others but, unlike traditional purge-based noninterfer-
ence deﬁnitions [19], [46] and more recent improvements
thereof [34], it does not prevent them from learning about
the occurrence of transitions of others. Before deﬁning our
condition formally it is worth explaining why it is most
appropriate here, over purge-based formulations.
Recall, from Section III-B, that seL4 schedules partitions
in accordance with a ﬁxed, pre-determined schedule. At
any point in time, therefore, the scheduler always knows
exactly which partitions have executed in which order. The
system model, depicted in Figure 4(b), over which our
information ﬂow security proof is conducted has two kinds
of transitions: those leading to KExit that model actions of
the scheduling partition PSched, and the others that model
actions of the ordinary partitions Pi. These latter model the
entire execution of a partition from one timer tick to the next.
The static schedule pre-determines exactly how many timer
ticks each partition should run for before advancing to the
next position in the schedule. Therefore whenever it executes
the scheduler partition PSched knows the exact number of
(unlabelled) transitions each partition has performed so far.
Recall also that the information ﬂow policy (cid:2), derived
from the system’s access control policy, allows no other par-
tition to send information to the scheduler partition PSched.
Because we cannot prevent PSched from learning the num-
ber of transitions that have occurred so far, it does not make
sense to adopt a purge-based noninterference condition that
would forbid partitions learning about the occurrence of
others’ transitions. Instead, it is more appropriate to require
that partitions be unable to learn about the contents of others.
In our model, with unlabelled transitions, the information
about each transition is encoded in the partition-contents.
Thus such a condition still prevents partitions from learning
the nature of others’ transitions; it allows otherwise isolated
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:53:26 UTC from IEEE Xplore.  Restrictions apply. 
partitions to learn only the number of transitions each other
performs, as pre-determined by the static schedule.
Such noninterference variants have been well explored
in the context of programming language security [48], for
instance to assert that the ﬁnal contents of low-classiﬁcation
variables should never depend on the initial contents of high-
classiﬁcation ones. Our condition [36], called nonleakage, is
an extension of the original nonleakage formulation of von
Oheimb [40].
Nonleakage is deﬁned formally as follows. Let the initial
state of the system be s0. Let reachable s denote when state s
is reachable from s0 by zero or more transitions.
For two states s and t and a partition Pi, let s P i∼ t denote
when, for each entity e in Pi’s extent, e’s state is identical in s
and t. s PSched∼ t when s and t agree on the scheduler’s private
state, which includes which domain is currently running and
how many timer ticks it has left on its timeslice. For a set
of partitions P, let s
Let Step denote the step-relation on states of the unla-
belled transition system depicted in Figure 4(b): (s, s(cid:2)) ∈
Step when the system can transition from state s to state s(cid:2).
Let part s denote the currently running partition in state s,
determined by examining the private state of the scheduler.
It is easily shown that s PSched∼ t −→ part s = part t.
P≈ t mean ∀ p∈P. s p∼ t.
Then the function sources is used to calculate the par-
titions that are permitted to send information to a speciﬁc
partition p when a sequence of n (unlabelled) transitions
occurs from a state s; this is the set sources n s p.
sources 0 s p
sources (n + 1) s p =
= {p}
(cid:2){sources n s
p | (s, s
(cid:2)
{w | w = part s ∧
(cid:2)) ∈ Step −→
(cid:2). (s, s
(∃ v. part s (cid:2) v ∧ v ∈ sources n s
(cid:2)) ∈ Step} ∪
(cid:2)
p))}
(∀ s
The ﬁrst equation says that partition p is always permitted
to send information to itself. The second says that, when one
or more transitions occur from state s, ﬁrstly: any partition is
permitted to send information to p that is always permitted
to do so after the ﬁrst transition has occurred; and secondly:
that the current partition is permitted to send information to
p if it is always permitted to send information to a partition
who is subsequently permitted to send to p.
Nonleakage asserts that the only partitions that can inﬂu-