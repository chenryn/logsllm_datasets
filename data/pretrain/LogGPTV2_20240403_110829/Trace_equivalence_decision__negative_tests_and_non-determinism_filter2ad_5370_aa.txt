title:Trace equivalence decision: negative tests and non-determinism
author:Vincent Cheval and
Hubert Comon-Lundh and
St&apos;ephanie Delaune
Trace Equivalence Decision: Negative Tests and
Non-determinism‡¢©
Vincent Cheval
LSV, ENS Cachan & CNRS
PI:EMAIL
Hubert Comon-Lundh
LSV, ENS Cachan & CNRS
comon@lsv.ens-
cachan.fr
LSV, ENS Cachan & CNRS
St√©phanie Delaune
delaune@lsv.ens-
cachan.fr
ABSTRACT
We consider security properties of cryptographic protocols that can
be modeled using the notion of trace equivalence. The notion of
equivalence is crucial when specifying privacy-type properties, like
anonymity, vote-privacy, and unlinkability.
In this paper, we give a calculus that is close to the applied pi
calculus and that allows one to capture most existing protocols that
rely on classical cryptographic primitives. First, we propose a sym-
bolic semantics for our calculus relying on constraint systems to
represent inÔ¨Ånite sets of possible traces, and we reduce the decid-
ability of trace equivalence to deciding a notion of symbolic equiv-
alence between sets of constraint systems. Second, we develop an
algorithm allowing us to decide whether two sets of constraint sys-
tems are in symbolic equivalence or not. Altogether, this yields the
Ô¨Årst decidability result of trace equivalence for a general class of
processes that may involve else branches and/or private channels
(for a bounded number of sessions).
Categories and Subject Descriptors
D.2.4 [Program VeriÔ¨Åcation]: Formal Methods
General Terms
Security, VeriÔ¨Åcation
1.
INTRODUCTION
Security protocols are widely used today to secure transaction
that rely on public channels like the Internet. It is therefore essen-
tial to obtain as much conÔ¨Ådence as possible in their correctness.
Starting in the 80s, many works have been devoted to the use of
formal methods to analyse the security of these protocols (e.g. [17,
24]). In the case of a bounded number of sessions, secrecy preser-
vation is co-NP-complete [21, 24], and for an unbounded number
of sessions, several decidable classes have been identiÔ¨Åed (e.g. [17,
‡¢©This work has been partly supported by the ANR projects AVOT√â
and PROSE, by the grant DIGITEO API from R√©gion √éle-de-
France, and by the INRIA project SecSI.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proÔ¨Åt or commercial advantage and that copies
bear this notice and the full citation on the Ô¨Årst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciÔ¨Åc
permission and/or a fee.
CCS‚Äô11, October 17‚Äì21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
23]). Many tools have also been developed to automatically verify
cryptographic protocols (e.g. AVISPA [6], ProVerif [9]).
Until recently, most efforts and successes only concerned trace
properties, i.e. security properties that can be checked on each in-
dividual sequence of messages corresponding to an execution of
the protocol. Secrecy and authentication are typical examples of
trace properties. There are however several security properties,
which cannot be deÔ¨Åned as trace properties and require a notion
of behavioural equivalence. We focus here on the notion of trace
equivalence which is well-suited for the analysis of security pro-
tocols.
Intuitively, two processes  and  are trace equivalent,
denoted  ‡£à , if any experiment performed by an attacker
on both processes lead to the emission of two sequences of mes-
sages that are indistinguishable, i.e.
the attacker can not observe
any difference between these two sequences. The notion of trace
equivalence is weaker than the notion of observational equivalence
that has been the subject recently of several works [10, 15, 25].
Trace equivalence is probably more adequate to the formalization
of privacy-type properties. Originally, observational equivalence is
a bisimulation-based equivalence notion that has been introduced
as a proof technique for trace equivalence [4]. In the present paper,
we are interested in automating the proofs of trace equivalence.
Related work. A line of works consists in designing stronger
notions of equivalences that imply observational equivalence (and
thus trace equivalence). This approach has for instance been used
in [7, 8, 25], relying on constraint solving techniques. ProVerif im-
plements an algorithm, based on Horn clauses and dedicated reso-
lution strategies, which is able to establish the observational equiva-
lence between two processes written in the applied pi calculus [10].
However, all these methods check a stronger equivalence than ob-
servational equivalence and fail on some simple toy examples. Un-
fortunately, this is exactly the kind of situations we encountered
in several case studies, e.g. the private authentication protocol [3],
and e-passport protocols [5]. If we restrict our attention to simple
processes with trivial else branches, then the strong notion of equiv-
alence between two positive constraint systems used in [7] (or [25,
11]), is sufÔ¨Åcient to decide trace equivalence. Another procedure
for deciding trace equivalence has also been proposed in [18].
Another line of works [20, 12] is based on an extension of the
small attack property of [24]:
they show that, if two processes
are not equivalent, then there must exist a small witness of non-
equivalence. A decision of equivalence can be derived by checking
every possible small witness. Again this result does not apply to
protocols with non-trivial else branches.
In summary, there is no known result that is suitable to protocols
such as the private authentication protocol [3], or the e-passport
protocol described in [5]:
these protocols require a conditional
(with a non-trivial else branch) to be modeled in accurate way.
Moreover, the notion of equivalence used by ProVerif or the no-
tion of diff-equivalence used in [8] are too strong to conclude on
these case studies. For instance ProVerif yields a false negative in
these examples, because the two (equivalent) processes do not have
the same control structure.
Our contributions. Our main contribution consists in dropping
the requirements on the conditionals and on the determinacy in
previous algorithms that decide trace equivalence: we provide a
new algorithm, that decides the trace equivalence of (possibly non-
determinate, possibly with non-trivial else branches) processes, with-
out replication and that use standard primitives, namely signature,
hash function, pairing, symmetric and asymmetric encryptions.
We show that the trace equivalence of two processes without
replication can be reduced to a notion of symbolic equivalence be-
tween sets of initial constraint systems, which we show next how to
decide. In our class, we can model in particular conditionals (with
non-trivial else branches), private channels, and non-deterministic
choice. The private authentication protocol [3] and the various ver-
sions of the e-passport protocol [5] fall into our class.
This work is built upon a procedure that has been Ô¨Årst described
in [11]. However, non trivial conditionals and non-determinism
force two main generalizations: we need to consider sets of con-
straints instead of individual constraints and we need also to con-
sider negative atomic constraints, for instance disequalities. This
yields difÔ¨Åcult technical problems, which we will describe, as well
as their solutions.
2. MODEL
This section introduces our process calculus, by giving its syntax
and its semantics. This calculus is close to the original applied pi
calculus [2] but we consider a Ô¨Åxed set of cryptographic primitives,
namely signatures, pairing, hash function, symmetric and asym-
metric encryptions. Participants in a protocol are modeled as pro-
cesses, and the communication between them is modeled by means
of message passing.
2.1 Syntax
To describe processes, one starts with an inÔ¨Ånite set of names
               (which are used to model atomic
data), an inÔ¨Ånite set of (Ô¨Årst-order) variables        ,
and a set ‡°ì of function symbols which is split into the set ‡°ì of
constructors and the set ‡°ì of destructors. More speciÔ¨Åcally, we
consider:
‡°ì  IA?  =A?  FK> IEC  L   D
‡°ì  I@A?  =@A?  ?DA?  FH FH 
This signature contains function symbols to model signature,
pairing, hash function, symmetric and asymmetric encryptions.
Terms are deÔ¨Åned as names, variables, and function symbols ap-
plied to other terms. Let . ‡£Æ ‡°ì,  ‡£Æ  and 8 ‡£Æ  , the set of
terms built from  and 8 by applying function symbols in . is de-
noted by  . √û8. We write L=HI  for the set of (Ô¨Årst-order)
variables occurring in a term . The term  is said to be a ground
term if L=HI   ‡¢ù. We denote by IJ the set of subterms of .
The constructor terms, resp. ground constructor terms, are those in
 ‡°ì √û  , resp. in  ‡°ì . A ground constructor term is
also called a message.
We model the properties of our cryptographic primitives by means
of a term rewriting system. For instance, the Ô¨Årst rule models the
fact that the decryption of a ciphertext will return the associated
I@A?IA?   ‡¢ê 
=@A?=A? FK>  ‡¢ê 
?DA?IEC  L ‡¢ê 
plaintext when the right key is used to perform the decryption.
FH  ‡¢ê 
FH   ‡¢ê 
This term rewriting system is convergent. We denote by ‡¢ë the
normal form of . Moreover, to represent messages, we will only
consider valid terms. A term  is valid, denoted L=E@, if ‡¢ë is a
constructor term for any  ‡¢† IJ.
We now consider a set          of second-order vari-
ables and we write L=HI   the function that returns the set of
second-order variables occurring in its argument. A recipe is a term
built on ‡°ì‡°ì, a set of parameters   =N      =N  ,
that can be seen as pointers to the hypotheses (or known messages),
and variables in   . As in the applied pi calculus, all the function
symbols are public, i.e. available to the attacker. Moreover, names
are excluded from recipes: names that are known to the attacker
must be given explicitly as hypotheses. We denote by  the set of
recipes, i.e.    ‡°ì  √û   . A ground recipe  is a recipe
that does not contain variables (L=HI    ‡¢ù) but only parame-
ters. We denote by F=H= the set of parameters that occur in .
Intuitively, a ground recipe records the attacker‚Äôs computation. It is
used as a witness of how some deduction has been performed.
It is well-known that replication leads to undecidability [19] thus,
we consider processes without replication. The grammar of our
plain processes is as follows:
    
 ‡¢Ø 
  
AM 
if     then  else 
E 
KJ  
where      are terms, and  is a variable. We denote by
BL   the free variables of  . This notion is extended as expected
to multiset of processes.
At a particular point in time, while engaging in one or more
sessions of one or more protocols, an attacker may know a se-
quence of messages      . As in the applied pi calculus,
such a sequence of messages is organized into a (concrete) frame
  =N        =N    where       are ground
constructor terms. Its domain @ is the set =N      =N 
whereas its size ‡¢Ø‡¢Ø is the integer . A frame  deÔ¨Ånes a substitu-
tion  7‡¢ê  ‡¢Ø  ‡¢† @ =N   ‡¢† .
DEFINITION 1. A (concrete) process is a pair   where:
‡¢´  is a (concrete) frame; and
‡¢´  is a multiset of plain processes (deÔ¨Åned above) such that
BL   ‡¢ù.
Additionally, we require processes to be variable distinct, i.e. any
variable is at most bound once.
EXAMPLE 1. We consider a protocol given in [3] designed for
transmitting a secret without revealing its identity to other partic-
ipants. In this protocol,  is willing to engage in communication
with  and wants to reveal its identity to . However,  does
not want to compromise its privacy by revealing its identity or the
identity of  more broadly. The protocol works as follows:
 ‡¢ê  
 ‡¢ê  
=A? FK> FK>
=A? FK> FK>
E  √§  
E‡¢§‡¢§‡¢§‡¢§‡¢ê
 ‡¢ê  √§  
if   ‡¢†  ‡°ì  @, ‡¢ë  , ‡¢ë  ‡¢ë, L=E@, and L=E@
KJ  √§  
‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢ê  √§   √û ‡¢Ø‡¢Ø  ‡¢ë
KJ=N‡¢Ø‡¢Ø
if  ‡¢†  ‡°ì  @, ‡¢ë  ‡¢ë, L=E@, and L=E@
(IN)
(OUT)
Figure 1: Semantics
First  sends to  a nonce  and its public key encrypted with
the public key of . If the message is of the expected form then