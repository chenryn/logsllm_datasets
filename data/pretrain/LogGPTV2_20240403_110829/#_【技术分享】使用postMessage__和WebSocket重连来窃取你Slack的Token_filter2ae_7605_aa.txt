# 【技术分享】使用postMessage()和WebSocket重连来窃取你Slack的Token
|
##### 译文声明
本文是翻译文章，文章来源：detectify.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
翻译：[WisFree](http://bobao.360.cn/member/contribute?uid=2606963099)
预估稿费：200RMB
投稿方式：发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿
**  
**
**长话短说**
我可以创建一个恶意页面并用它将你的Slack
WebSocket重连至我自己的WebSocket，然后我就可以窃取你Slack的私人Token了。在我将该问题上报给Slack的五个小时之后他们便修复了相应漏洞，并给我提供了三千美金的漏洞奖励。
我将在这篇文章中给大家介绍这个我从Slack挖到的漏洞，我不仅会介绍这个漏洞的利用方法，而且也会告诉大家我是如何发现这个漏洞的。
**背景知识**
****
使用window.addEventListener('message',
func)和window.postMessage()来传递信息绝对是一种实现跨域通信的绝佳利器。但是，这种方法也有其致命缺陷，即无法检查消息中的源（origin），这个问题我们此前也已经讨论过多次了【[参考资料1](https://labs.detectify.com/2016/12/15/postmessage-xss-on-a-million-sites/)】【[参考资料2](https://labs.detectify.com/2016/12/08/the-pitfalls-of-postmessage/)】。
上周我无聊的时候翻看了一下Slack的源码，我发现Chrome真的非常方便，因为我们可以直接查看到那些对象设置了监听器。你可以在元素标签中看到如下图所示的事件监听器：
我发现Slack会将信息传递给window对象的一个监听器，相应的监听器函数如下所示：
    var _receivePostedMessageFromChildWindow = function(evt) {
        if (!evt || !evt.data || !evt.data.message_type) {
            TS.utility.calls_log.logEvent({
                event: _utility_calls_config.log_events.invalid_msg_from_child_window,
                value: evt
            });
            return
        }
        if (evt.data.origin_window_type === TS.utility.calls.window_types.call_window) {
            switch (evt.data.message_type) {
            case TS.utility.calls.messages_from_call_window_types.update_mini_panel:
                ...
                break;
            case TS.utility.calls.messages_from_call_window_types.set_call_window_loaded:
                ...
    ...
正如你所看到的那样，他们并没有验证消息中的evt.origin和evt.source。这是两个无法伪造的只读属性，但由于他们没有对这两个属性进行验证，所以这也就意味着我可以用它们来做一些有意思的事情，比如说，我可以通过另一个由我控制的window对象并使用postMessage()来访问这个window对象的功能以及函数。
**设计一个PoC**
现在，如果只跟Slack的技术人员说他们忘记进行源验证的话，那就没啥意思了，而且也不能体现这个问题的严重性。因此，我必须仔细检查一下他们的源代码，然后设计出一种比较好的漏洞利用场景。
第一个需要克服的难题是：如果我想用我的payload来攻击某个用户的话，我怎么知道我应该用哪一个team-URL？
就在此时，我发现 会将你重定向到你当前的Slack实例。这就非常棒了！
在查看了所有我能发送的事件（event）之后，我发现Slack在保护用户通话这一点上做得非常好。因为即使我可以控制Slack向浏览器所发送的通知信息，即使我可以切换当前的聊天会话，但我仍无法控制这些事件的调用。
一种比较白痴的PoC将会是这种情况：如果你打开了我的恶意页面，然后给其他用户拨打语音电话的话，那么我就可以切断你跟这位用户的语音通话。
所以我还得再努力一把。在进行了深入分析之后，我发现代码中还有很多针对语音通话（calls）的引用，具体如下所示：
    if (event.data.message_type != TS.utility.calls.messages_to_call_window_types.ms_msg && !event.data.reply_to) {
        TS.utility.calls_log.logEvent({
            event: _calls_config.log_events.message_from_parent_window,
            value: event.data
        })
    }
这就非常明显了，该函数中的这一大堆代码就是用来实现Slack语音通话功能的：
当用户使用语音通话功能时，虽然通话窗口驻留在另一个新窗口中，但实际的通信还是由Slack的主窗口完成的，这也是他们使用postMessage()的主要原因。
在查看了 的源码之后，我发现这里也存在相同的问题，即没有对消息源进行验证，但是这里的问题比之前的还要有意思。
但是我又遇到了一个问题，
这个节点还需要一个类似/call/UXXXX这样的参数来作为组ID或用户ID才能正常访问，而这与我之前遇到的问题非常类似，即“我怎样才能攻击任意用户（即使他不在我的工作团队（team）之中）？”此时我发现只需要在地址中加一个参数“me”就可以了，所以我打算直接使用下面这个URL地址：
    https://slack.com/call/me
这个地址将会把你定向到你当前实例的/call节点，但奇怪的是当你重新加载页面之后页面就会崩溃。
现在我已经知道了以下信息：
1.一个可以重定向到用户当前Slack实例的地址。
2.一个使用了postMessage()的也main，我们应该可以利用这个页面中的一系列事件（event）来做一些有意思的事情。
3.一个可以应用到任意Slack用户的URL地址