**Christopher Nichols** opened **SPR-7584** and provided the following comment:

---

I have lightly edited the original forum post for clarity:

"We recently upgraded from Spring 2.5.6 to Spring 3.0.2. In our previous configuration, we had set `default-lazy-init` to `true` for the majority of our beans, and we did not alter these settings during the upgrade. However, we noticed a change in the lazy-initialization behavior between the two versions.

In Spring 2.5, beans marked for lazy initialization were indeed initialized on-demand after the Spring Application Context had been fully instantiated. This ensured that these beans were only created when they were first accessed.

In contrast, with Spring 3.0, the container attempts to eagerly initialize all beans, including those flagged for lazy initialization, as part of the Application Context instantiation process. If a bean marked for lazy initialization encounters an exception during this phase, the exception is ignored, and the Application Context continues to instantiate.

The upgrade guide does not mention any changes to the lazy-initialization behavior, which suggests that this may be a bug.

* * *

**Affects:** 3.0.2  
**Reference URL:** [Spring Forum Post](http://forum.springsource.org/showthread.php?p=318697#post318697)  
**Related Issues:**
- #12992 Lazy-init beans are unnecessarily created during the candidate determination process (marked as a duplicate)

---

This version of the text is more concise and clearly conveys the issue and its context.