    plain0 = (rev_gboxsum(y0, 0) - y1) % 256
    plain1 = plain0_xor_plain1 ^ plain0
    plain2 = t0 ^ plain3
    return [plain0, plain1, plain2, plain3]
def doxor(l1,l2):
    return map(lambda x: x[0]^x[1], zip(l1,l2))
def encrypt_block(pt, ks):
    l = doxor(pt[:4], ks[4])  # IP
    r = doxor(doxor(pt[4:], ks[5]), l)
    for i in range(4):
        l, r = doxor(r, fbox(doxor(l,ks[i]))), l
    l, r = r, doxor(l,r)
    return l+r
def encrypt(pt, k):
    x = SZ-len(pt)%SZ # padding
    pt += chr(x)*x
    ct = ''
    for i in range(0, len(pt), SZ):
        res = encrypt_block(map(ord, pt[i:i+SZ]), k)
        ct += ''.join(map(chr,res))
    return ct
def decrypt_block(ct, ks):
    l = ct[:4]
    r = ct[4:]
    l, r = doxor(r,l), l
    for i in range(3,-1, -1):
        l,r = r, doxor(l, fbox(doxor(r, ks[i])))
    r = doxor(doxor(r, l), ks[5])
    l = doxor(l, ks[4])
    return l+r
def decrypt(ct,k):
    pt = ''
    for i in range(0, len(ct), SZ):
        res = decrypt_block(map(ord, ct[i:i + SZ]), k)
        pt += ''.join(map(chr, res))
    return pt
def doout(x):
    tmp = ''.join(map(chr, x))
    return tmp.encode('hex')
def genkeys():
    subkeys=[]
    for x in xrange(6):
        subkeys.append(map(ord,os.urandom(4)))
    return subkeys
'''
class Task(SocketServer.BaseRequestHandler):
    def proof_of_work(self):
        random.seed(os.urandom(8))
        proof = ''.join([random.choice(string.ascii_letters+string.digits) for _ in xrange(20)])
        digest = sha256(proof).hexdigest()
        self.request.send("sha256(XXXX+%s) == %s\n" % (proof[4:],digest))
        self.request.send('Give me XXXX:')
        x = self.request.recv(10)
        x = x.strip()
        if len(x) != 4 or sha256(x+proof[4:]).hexdigest() != digest: 
            return False
        return True
    def recvhex(self, sz):
        try:
            r = sz
            res = ''
            while r>0:
                res += self.request.recv(r)
                if res.endswith('\n'):
                    r = 0
                else:
                    r = sz - len(res)
            res = res.strip()
            res = res.decode('hex')
        except:
            res = ''
        return res
    def dosend(self, msg):
        try:
            self.request.sendall(msg)
        except:
            pass
    def handle(self):
        #if not self.proof_of_work():
        #    return
        #signal.alarm(30)
        key = genkeys()
        print key
        for i in xrange(50):
            self.dosend("plaintext(hex): ")
            pt = self.recvhex(21)
            if pt=='':
                break
            ct = encrypt(pt, key)
            self.dosend("%s\n" % ct.encode('hex'))
        cflag = encrypt(FLAG, key)
        self.dosend("and your flag:\n")
        self.dosend("%s\n" % cflag.encode('hex'))
        self.request.close()
class ForkedServer(SocketServer.ForkingTCPServer, SocketServer.TCPServer):
    pass
if __name__ == "__main__":
    HOST, PORT = '0.0.0.0', 10001
    print HOST
    print PORT
    server = ForkedServer((HOST, PORT), Task)
    server.allow_reuse_address = True
    server.serve_forever()
'''
#a = encrypt_block([0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00],[[0,0,0,0]] * 6)
#a = encrypt_block(map(ord,'1dc8294c4fc3a3c4'.decode('hex')),[[0,0,0,0]] * 6)
#a = encrypt_block(map(ord,'444c72452d284e87'.decode('hex')), [map(ord, c.decode('hex')) for c in 
['00261e27', '52f60985', '22972e15', '20ad7e1d', '28d27794', '16dd6dc4']])
#a = encrypt_block(map(ord,'42c805e72f4f11fd'.decode('hex')), [map(ord, c.decode('hex')) for c in 
['6c37049d', '4a286482', '4ef233dd', '665c014f', '56956c18', '147d25af']])
#t = decrypt_block(encrypt_block(map(ord, '*ctfflag'), [[0,1,2,3]] * 6),[[0,1,2,3]] * 6)
t = 
decrypt('98336f5e5f35724482c99fab8b313e3242c2545589924374ee2c75e1615c7035ce5080b12b67e2fb'.decode('hex'), 
[map(ord, c.decode('hex')) for c in ['87BB1706', 'c1ee07c9', '372fa9d1', '781a83c7', '835785f3', 
'53c1b983']])
from pwn import *
import itertools
io_analysis = process(['/mnt/d/ProgWorkspace/CppProjects/StarCTF/FEALCrypto/feal_analysis'])
print io_analysis.recvuntil('Using input differential of ')
print io_analysis.recvuntil('\n')
time.sleep(0.1)
round4_data = io_analysis.recvuntil('Generating',drop=True).strip()
round4_data = [c.replace(' ','') for c in round4_data.split()]
print io_analysis.recvuntil('Using input differential of ')
print io_analysis.recvuntil('\n')
round3_data = io_analysis.recvuntil('Generating',drop=True).strip()
round3_data = [c.replace(' ','') for c in round3_data.split()]
print io_analysis.recvuntil('Using input differential of ')
print io_analysis.recvuntil('\n')
round2_data = io_analysis.recvuntil('ROUND 4',drop=True).strip()
round2_data = [c.replace(' ','') for c in round2_data.split()]
'''
#k = [map(ord, c.decode('hex')) for c in ['456723c6', '98694873', 'dc515cff', '944a58ec', '1f297ccd', 
'58bad7ab']]
#k = [[0,0,0,0,0,0]] * 6
k = genkeys()
round4_ret = [encrypt(c.decode('hex'), k).encode('hex')[0:16] for c in round4_data]
round3_ret = [encrypt(c.decode('hex'), k).encode('hex')[0:16] for c in round3_data]
round2_ret = [encrypt(c.decode('hex'), k).encode('hex')[0:16] for c in round2_data]
print "round4_ret: %s" % '\n'.join(round4_ret)
print "round3_ret: %s" % '\n'.join(round3_ret)
print "round2_ret: %s" % '\n'.join(round2_ret)
for c in round4_ret:
    io_analysis.sendline(c)
time.sleep(5)
for c in round3_ret:
    io_analysis.sendline(c)
time.sleep(5)
for c in round2_ret:
    io_analysis.sendline(c)
io_analysis.interactive()
exit()
'''
io = None
while True:
    try:
        r = threading.Timer(8.0, thread.interrupt_main)
        r.start()
        if io:
            io.close()
        io = remote('34.92.185.118',10001)
        #io = remote('127.0.0.1', 10001)
        print io.recvuntil("sha256(XXXX+")
        parproof = io.recvuntil(")", drop=True)
        print parproof
        io.recvuntil("== ")
        proofdigest = io.recvuntil("\n", drop=True)
        print io.recvuntil("Give me XXXX:")
        for xxxx in itertools.permutations(string.digits+string.ascii_letters, 4):
            proof = ''.join(xxxx) + parproof
            digest = sha256(proof).hexdigest()
            #if True or digest == proofdigest:
            if digest == proofdigest:
                print(xxxx)
                io.sendline(''.join(xxxx))
                r.cancel()
                break
        else:
            continue
        break
    except KeyboardInterrupt:
        print("Retrying...")
def handle_analysis_data(rounddata):
    finalrets = []
    for i in range(len(rounddata)):
        print io.recvuntil('plaintext(hex): ')
        io.sendline(rounddata[i])
        ret = io.recvline(keepends=False).strip()
        rets = [ret[:16]]
        for ret in rets:
            #finalrets.append(''.join(map(chr, doxor(map(ord, ret[:8].decode('hex')), map(ord, 
ret[8:16].decode('hex'))))).encode('hex') + ret[8:16])
            finalrets.append(ret)
    return finalrets
print "round4/3/2_data: \n%s" % '\n'.join(["0x" + c + "," for c in round4_data+round3_data+round2_data])
round4_ret = handle_analysis_data(round4_data)
round3_ret = handle_analysis_data(round3_data)
round2_ret = handle_analysis_data(round2_data)
print "round4/3/2_ret: \n%s" % '\n'.join(["0x" + c + "," for c in round4_ret+round3_ret+round2_ret])
print io.recvuntil('plaintext(hex): ')
io.sendline()
time.sleep(1)
flagenc = io.recv()
print "Flag Enc: %s" % flagenc
'''
print io_analysis.recvuntil("hosen-plaintext pairs")
print io_analysis.recvuntil('Using input differential of ')
print io_analysis.recvuntil('\n')
time.sleep(0.1)
pydev debugger: process 16133 is connecting Connected to pydev debugger (build 182.3911.33) Starting local process
'/mnt/d/ProgWorkspace/CppProjects/StarCTF/FEALCrypto/feal_analysis' [$+] Starting local process
'/mnt/d/ProgWorkspace/CppProjects/StarCTF/FEALCrypto/feal_analysis': pid 16140 JK'S FEAL-4 DIFFERENTIAL CRYPTANALYSIS
DEMO
Generating 8 chosen-plaintext pairs Using input diﬀerential of 0x0000000000008080 8 chosen-plaintext pairs Using input
diﬀerential of 0x0000808000008080 8 chosen-plaintext pairs Using input diﬀerential of 0x0200000000008080 Opening connection
to 34.92.185.118 on port 10001 Opening connection to 34.92.185.118 on port 10001: Trying 34.92.185.118 [
*] Closed connection to 34.92.185.118 port 10001 Opening connection to 34.92.185.118 on port 10001 Opening connection to
34.92.185.118 on port 10001: Trying 34.92.185.118 [$+] Opening connection to 34.92.185.118 on port 10001: Done
sha256(XXXX+ JSfGFhasrfnxSNVO Give me XXXX: ('d', 'x', 'z', 'w') round4/3/2_data: 0x3d5206220939ae1f, 0x3d52062209392e9f,
0xdf2a0443338dab42, 0xdf2a0443338d2bc2, 0x68c980299db83129, 0x68c980299db8b1a9, 0xb5a033b18ea363ab,
0xb5a033b18ea3e32b, 0x6b30c4266bebf24e, 0x6b30c4266beb72ce, 0xa4436f5e66a07a38, 0xa4436f5e66a0fab8,
0xa62827df80fa3d4b, 0xa62827df80fabdcb, 0x7c7fab76e6dfb9d1, 0x7c7fab76e6df3951, 0x2304e8e6bf1e4703,
0x23046866bf1ec783, 0x3d4f8a08bbd50cde, 0x3d4f0a88bbd58c5e, 0xa1517dbae25d1520, 0xa151fd3ae25d95a0,
0x26aef452d29f96b1, 0x26ae74d2d29f1631, 0xb271f3842b0e0175, 0xb27173042b0e81f5, 0x2a5d61cfd1c85df6,
0x2a5de14fd1c8dd76, 0x9fd9ba12ae068cd9, 0x9fd93a92ae060c59, 0x25c6169cb5f248cb, 0x25c6961cb5f2c84b,
0x3fcd4a25764f85de, 0x3dcd4a25764f055e, 0x08cc65f7a511a49d, 0x0acc65f7a511241d, 0xe647b6b09a26a382,
0xe447b6b09a262302, 0xeec970446ce9972d, 0xecc970446ce917ad, 0xe334f20fa41f9984, 0xe134f20fa41f1904,
0xcd7fa1c8c3223065, 0xcf7fa1c8c322b0e5, 0x26da81aea39fec71, 0x24da81aea39f6cf1, 0x76bfd9184a7bb68c,
0x74bfd9184a7b360c, plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex):
plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex):
plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex):
plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex):
plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex):
plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex): plaintext(hex):
plaintext(hex): round4/3/2_ret: 0xd519c92bee64534d, 0x553951f3b35d498d, 0x13ddfd9985eba18d, 0x923d65c1313cb4cd,
for c in round4_ret:
    io_analysis.sendline(c)
print io_analysis.recvuntil("ROUND 3")
print io_analysis.recvuntil('Using input differential of ')
print io_analysis.recvuntil('\n')
time.sleep(0.1)
for c in round3_ret:
    io_analysis.sendline(c)
print io_analysis.recvuntil("ROUND 2")
print io_analysis.recvuntil('Using input differential of ')
print io_analysis.recvuntil('\n')
time.sleep(0.1)
time.sleep(0.1)
for c in round2_ret:
    io_analysis.sendline(c)
io_analysis.interactive()
buf = io_analysis.recvuntil("Subkey 0 : GOOD!")
print buf[buf.rfind(' - ')-10:][:10]
buf = io_analysis.recvuntil("Subkey 1 : GOOD!")
print buf[buf.rfind(' - ')-10:][:10]
buf = io_analysis.recvuntil("Subkey 2 : GOOD!")
print buf[buf.rfind(' - ')-10:][:10]
buf = io_analysis.recvuntil("Subkey 3 : GOOD!")
print buf[buf.rfind(' - ')-10:][:10]
buf = io_analysis.recvuntil("Subkey 4 : GOOD!")
print buf[buf.rfind(' - ')-10:][:10]
buf = io_analysis.recvuntil("Subkey 5 : GOOD!")
print buf[buf.rfind(' - ')-10:][:10]
'''
0xe4819107902c6ecc, 0x64e119efa2c8e722, 0xc530315d5460f8a7, 0x45d0b9a5ec4a32a5, 0x3d473e36e7ﬀ4bde,
0xbd27b65e0e11c0b0, 0x6024579832c9e8ca, 0xdfc5dﬀ0958639c1, 0x7503b7422e11977c, 0xf6232fea4697f0bd,
0x7a0688242c7956fa, 0xfb26008ca3e2e0bc, 0x511e30dfb1053a2a, 0x6449b82e089c26bf, 0x8dccb57184124fb5,
0x3971b67774da9449, 0xa0dd85217c9f44db, 0x2dd4071916e1e5f8, 0x45ed8bde5e940ae8, 0x17213c1d5f975c74,
0x4ed949c4752e0947, 0xcd414bce9ac7bfe8, 0x285e697bab2b4f12, 0x9b0aaa8eﬀ55e828, 0x8076c178f2c0c196,
0x13f2c2660bfc91da, 0x8b320c52c5fc9233, 0x6b724c53eda1de38, 0x11c471b0a805c06a, 0x12fe24316c72e5df,
0x1f59c991fdb92089, 0x836b96943c1b85a3, 0xdee269e9a45ee404, 0xf38f372b0798728b, 0x5a0fc1c3437fe612,
0x1c661a04ecc11263, 0x5b33dc58cb083d61, 0x8dcc6b2e85bﬀ9b4, 0x5e57c31ef8356efe, 0x69b041b9e97e2608,
0x779a54757f684f25, 0xf0150d1387c83446, 0x01e624b1e6999ae1, 0xcea291e6637a304c, plaintext(hex): Flag Enc: and your ﬂag:
98336f5e5f35724482c99fab8b313e3242c2545589924374ee2c75e1615c7035ce5080b12b67e2fb
ROUND 4 Generating 8 chosen-plaintext pairs Using input diﬀerential of 0x0000000000008080 Using output diﬀerential of
0x02000000 Cracking...found subkey : 0x781a0347 Time to crack round #4 = 21 seconds ROUND 3 Generating 8 chosen-
plaintext pairs Using input diﬀerential of 0x0000808000008080 Undoing last round using 781a83c7 Using output diﬀerential
of 0x02000000 Cracking...found subkey : 0x372f2951 Time to crack round #3 = 10 seconds ROUND 2 Generating 8 chosen-
plaintext pairs Using input diﬀerential of 0x0200000000008080 Undoing last round using 781a83c7 Undoing last round using
372fa9d1 Using output diﬀerential of 0x02000000 Cracking...found subkey : 0x416e07c9 Time to crack round #2 = 11 seconds
ROUND 1 Generating 8 chosen-plaintext pairs Using input diﬀerential of 0x0000000000008080 Undoing last round using
781a83c7 Undoing last round using 372fa9d1 Undoing last round using c1ee07c9 Cracking...found subkeys : 0x073b1706
0x835785f3 0x53c1b983 Time to crack round #1 = 1 seconds 0x073b1706 - Subkey 0 : BAD 0xc1ee07c9 - Subkey 1 : BAD
0x372fa9d1 - Subkey 2 : BAD 0x781a83c7 - Subkey 3 : BAD 0x835785f3 - Subkey 4 : BAD 0x53c1b983 - Subkey 5 : BAD Total
crack time = 1558 seconds FINISHED
0x073b1706 - Subkey 0 : BAD ^ 80800000 = 0x87BB1706 0xc1ee07c9 - Subkey 1 : BAD 0x372fa9d1 - Subkey 2 : BAD
0x781a83c7 - Subkey 3 : BAD 0x835785f3 - Subkey 4 : BAD 0x53c1b983 - Subkey 5 : BAD ks = ['87BB1706', 'c1ee07c9',
'372fa9d1', '781a83c7', '835785f3', '53c1b983']