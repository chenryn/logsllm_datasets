### 7.2 Power Threshold Sensing

#### 7.2.1 Difficulty in Using Thresholds

**Method:**
This experiment involves one pair of SWIFT nodes at a fixed location (tx and rx) and another pair of 802.11a nodes that are moved among ten different locations. At each location, we measure two key quantities:
- **Correct Bin Choice:** We disable adaptive sensing on SWIFT and manually test all possible bin settings to find the maximum set of usable bins that do not affect the 802.11a throughput.
- **Ideal Threshold:** For each location, this is defined as the highest threshold that ensures the chosen bins do not interfere with 802.11a operation. This threshold is the most efficient for wideband while still being safe for narrowband. We record the time-averaged power levels seen by SWIFT in each bin when 802.11a transmits and calculate the ideal threshold as the minimum power level across all bins that must be left unused to ensure safe 802.11a operation.

**Results:**
Figure 10 illustrates the difficulty in choosing a single threshold across different locations. The ideal threshold varies significantly, up to 4.3×, in our testbed. Furthermore, the thresholds do not correlate with distance due to reflections and shadowing typical in indoor environments.

#### 7.2.2 No Single Threshold is Both Safe and Efficient

**Method:**
We use the same placement of wideband nodes as in §7.2.1. We consider two thresholds based on our experiments: the median and the minimum of those in Figure 10. We then determine the set of bins that would be marked as usable for each threshold setting and location. We disable adaptive sensing in SWIFT, and at each location, manually set it to use the set of bins resulting from the chosen threshold, and measure the 802.11a throughput.

**Results:**
Figure 11 compares the number of wasted bins (bins unnecessarily marked as unusable by wideband) and the corresponding 802.11a throughput for both the median and minimum thresholds. The median threshold leads to a significant reduction in 802.11a throughput in locations 2, 3, and 6, while simultaneously wasting over 10 wideband bins in each of locations 8, 9, and 10. Bins are wasted in these locations because the 802.11a nodes, being too far, are no longer affected by wideband transmissions, but the threshold still marks many bins as unusable. A threshold-based design can be both unsafe and inefficient in the same location. For example, with the median threshold, it is unsafe in locations 2 and 6, but also wastes a few bins in those same locations due to power blips in bins outside those occupied by the narrowband device.

A lower choice of threshold, such as the minimum threshold, increases the likelihood of safe narrowband operation but at the cost of increased inefficiency. Using the minimum threshold ensures safe 802.11a operation in all measured locations but almost doubles the bandwidth wastage. In addition to wasting bins in locations 7, 8, 9, and 10 where 802.11a is out of range, it also wastes bins in location 1. This wastage occurs because 802.11a transmissions leak significant power into adjacent bins. Additionally, this minimum threshold may be unsafe for locations outside the measured set or for a different 802.11a transmitter.

### 7.3 Adaptive Sensing

**Method:**
The setup is similar to the previous experiment, except that the SWIFT nodes now have adaptive sensing enabled. We run one experiment at each location, starting the SWIFT node first and then initiating the 802.11a transmission 5 seconds later. We record the UsableBins setting on which SWIFT settles and compare it with the correct bin setting for each location as determined in §7.2.1.

**Results:**
Figure 12 shows that SWIFT accurately identifies the exact set of unusable bins (bins that interfere with 802.11a) at all locations. Additionally, SWIFT detects when 802.11a goes out of range, as in locations 7-10, and reclaims all occupied bins.

Figure 13 illustrates the typical dynamics of adaptive sensing using results from an experiment with 802.11a at location 3. SWIFT conservatively backs away from bins used by 802.11a within 120 ms of 802.11a commencing transmission. Within 4 seconds, it finds the ideal bin selection and sticks with this selection. Over 60% of this time is due to communication overhead from our prototype PCI driver, which can be mostly eliminated with an optimized implementation.

Specifically, the bottom graph in Figure 13 shows the SWIFT bin selections over time. SWIFT starts using all bins until it first detects the 802.11a transmissions. At this point, SWIFT immediately backs off using a conservative threshold, avoiding bins -2 through 28. As it gathers more data and determines that 802.11a is unaffected, SWIFT gradually decreases its set of unused bins, eventually avoiding only bins 4 through 22. When 802.11a throughput is affected, SWIFT relaxes its bin selection to avoid bins 3 through 23, returning 802.11a throughput to normal. SWIFT stabilizes at a state that avoids bins 3 through 23, the tightest bin selection that does not affect 802.11a.

### 7.4 Dealing with Bin Disagreement

**Method:**
We place the wideband transmitter and receiver within a few feet of each other to ensure very low probability of channel bit errors, ensuring that almost all bit errors are due to disagreements. We initialize the transmitter and receiver to agree to use the entire wide band, consisting of 100 bins. We then configure the adaptive sensing module to update the transmitter with a new set of usable bins, marking a sequence of K consecutive bins as narrowband-occupied to simulate the appearance of a narrowband transmitter with a band of size K. Since the transmitter cannot use these bins while the receiver continues to expect data in them, the size of the disagreement between the nodes is K. We send a random coded sequence from the transmitter to the receiver using this disagreeing set of bins, check whether it is received correctly, and repeat this operation with a large number of random coded sequences for increasing values of K. We declare a transmission successful if it is decoded correctly and compute the probability of a successful transmission for a disagreement of size K.

**Results:**
Figure 14 shows that SWIFT’s band consensus works robustly for a large range of disagreements. When K is small, the consensus scheme sees a very small number of errors, which can be easily corrected. As K grows, the receiver sees a burst of errors in the disagreeing bins, but the number of errors in any single code word is limited because transmitted data bits are interleaved across the frequency bins. This allows successful transmissions even when the fraction of disagreement is as large as 37% (37 of the 100 total bins). Such a large amount of disagreement is extremely unlikely, and hence SWIFT’s low-overhead handshake mechanism can almost always achieve band consensus. It is only when the extent of disagreement becomes very large (56 bins in our case) that SWIFT nodes will need to reestablish connectivity using a sync packet.

### 7.5 Intermittent Narrowband TCP Web Downloads

**Method:**
This experiment evaluates SWIFT’s ability to adapt correctly to intermittent and bursty traffic patterns. We model a typical home scenario using an 802.11a node that accesses the Internet by connecting to a Linksys wireless router. We start the SWIFT node first and, at t = 15 seconds, the 802.11a node begins periodic web downloads.