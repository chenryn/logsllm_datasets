### (2009) Flickr’s API Signature Forgery
[Online]. Available: [Link]

### References

1. **K. Bhargavan and G. Leurent, "Transcript Collision Attacks: Breaking Authentication in TLS, IKE, and SSH,"** in 23rd Annual Network and Distributed System Security Symposium (NDSS 2016). The Internet Society, 2016.

2. **National Institute of Standards and Technology (NIST), "SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions,"** https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf, August 2015.

3. **Y. Dodis, L. Reyzin, and A. Smith, "Fuzzy Extractors: How to Generate Strong Keys from Biometrics and Other Noisy Data,"** in EUROCRYPT 2004, LNCS, vol. 3027, C. Cachin and J. Camenisch, Eds. Springer, Heidelberg, May 2004, pp. 523–540.

4. **C.-Y. Hsiao, C.-J. Lu, and L. Reyzin, "Conditional Computational Entropy, or Toward Separating Pseudoentropy from Compressibility,"** in EUROCRYPT 2007, LNCS, vol. 4515, M. Naor, Ed. Springer, Heidelberg, May 2007, pp. 169–186.

5. **A. Boldyreva, D. Cash, M. Fischlin, and B. Warinschi, "Foundations of Non-Malleable Hash and One-Way Functions,"** in ASIACRYPT 2009, LNCS, vol. 5912, M. Matsui, Ed. Springer, Heidelberg, December 2009, pp. 524–541.

6. **P. Baecher, M. Fischlin, and D. Schröder, "Expedient Non-Malleability Notions for Hash Functions,"** in CT-RSA 2011, LNCS, vol. 6558, A. Kiayias, Ed. Springer, Heidelberg, February 2011, pp. 268–283.

7. **J. Bohli, S. Röhrich, and R. Steinwandt, "Key Substitution Attacks Revisited: Taking into Account Malicious Signers,"** International Journal of Information Security, vol. 5, no. 1, pp. 30–36, 2006. [Online]. Available: https://doi.org/10.1007/s10207-005-0071-2

8. **J. Baek and K. Kim, "Remarks on the Unknown Key Share Attacks,"** IEICE Transactions on Fundamentals of Electronics, Communications and Computer Sciences, vol. 83, no. 12, pp. 2766–2769, 2000.

9. **J. Stern, D. Pointcheval, J. Malone-Lee, and N. P. Smart, "Flaws in Applying Proof Methodologies to Signature Schemes,"** in CRYPTO 2002, LNCS, vol. 2442, M. Yung, Ed. Springer, Heidelberg, August 2002, pp. 93–110.

10. **K. Chalkias, F. Garillot, and V. Nikolaenko, "Taming the Many EdDSAs,"** in Security Standardisation Research - 6th International Conference (SSR 2020), London, UK, November 30 - December 1, 2020, Proceedings, LNCS, vol. 12529, T. van der Merwe, C. J. Mitchell, and M. Mehrnezhad, Eds. Springer, 2020, pp. 67–90.

11. **National Institute of Standards and Technology (NIST), "Post-Quantum Cryptography,"** https://csrc.nist.gov/projects/post-quantum-cryptography, August 19, 2015.

12. **S. Bai, L. Ducas, E. Kiltz, T. Lepoint, V. Lyubashevsky, P. Schwabe, G. Seiler, and D. Stehlé, "CRYSTALS-Dilithium: Algorithm Specifications and Supporting Documentation (Version 3.1),"** NIST Post-Quantum Cryptography Standardization Round 3 Submission, February 2021, https://pq-crystals.org/dilithium/index.shtml.

13. **P.-A. Fouque, J. Hoffstein, P. Kirchner, V. Lyubashevsky, T. Pornin, T. Prest, T. Ricosset, G. Seiler, W. Whyte, and Z. Zhang, "Falcon: Fast-Fourier Lattice-Based Compact Signatures over NTRU Specifications v1.2,"** NIST Post-Quantum Cryptography Standardization Round 3 Submission, October 2020, https://falcon-sign.info/.

14. **J. Ding, M.-S. Chen, M. Kannwischer, J. Patarin, A. Petzoldt, D. Schmidt, and B.-Y. Yang, "Rainbow: Algorithm Specification and Documentation for the 3rd Round Proposal,"** NIST Post-Quantum Cryptography Standardization Round 3 Submission, 2020, https://www.pqcrainbow.org/.

15. **A. Casanova, J.-C. Faugère, G. Macario-Rat, J. Patarin, L. Perret, and J. Ryckeghem, "GeMSS: A Great Multivariate Short Signature,"** NIST Post-Quantum Cryptography Standardization Round 3 Submission, 2020, https://www-polsys.lip6.fr/Links/NIST/GeMSS.html.

16. **M. Chase, D. Derler, S. Goldfeder, J. Katz, V. Kolesnikov, C. Orlandi, S. Ramacher, C. Rechberger, D. Slamanig, X. Wang, and G. Zaverucha, "The Picnic Signature Scheme: Design Document Version 3.0,"** NIST Post-Quantum Cryptography Standardization Round 3 Submission, September 2020, https://microsoft.github.io/Picnic/.

17. **J.-P. Aumasson, D. J. Bernstein, W. Beullens, C. Dobraunig, M. Eichlseder, S. Fluhrer, S.-L. Gazdag, A. Hülsing, P. Kampanakis, S. Kölbl, T. Lange, M. M. Lauridsen, F. Mendel, R. Niederhagen, C. Rechberger, J. Rijneveld, P. Schwabe, and B. Westerbaan, "SPHINCS+: Submission to the NIST Post-Quantum Project, v.3,"** NIST Post-Quantum Cryptography Standardization Round 3 Submission, October 2020, https://sphincs.org/index.html.

18. **C. Cremers, S. Düzlü, R. Fiedler, M. Fischlin, and C. Janson, "Buffing Signature Schemes Beyond Unforgeability and the Case of Post-Quantum Signatures,"** IACR Cryptology ePrint Archive, vol. 2020, p. 1525, 2020. [Online]. Available: https://eprint.iacr.org/2020/1525

19. **G. Zaverucha, "The Picnic Signature Scheme: Specification Version 3.0,"** NIST Post-Quantum Cryptography Standardization Round 3 Submission, September 2020, https://microsoft.github.io/Picnic/.

20. **D. J. Bernstein, A. Hülsing, S. Kölbl, R. Niederhagen, J. Rijneveld, and P. Schwabe, "The SPHINCS+ Signature Framework,"** in ACM CCS 2019, L. Cavallaro, J. Kinder, X. Wang, and J. Katz, Eds. ACM Press, November 2019, pp. 2129–2146.

### Appendix A: Auxiliary Definitions

#### A. Unforgeable Signature Schemes

**Definition A.1.** Let \(\Pi\) be a digital signature scheme. We say that \(\Pi\) is existentially unforgeable under chosen-message attack if, for every probabilistic polynomial-time (PPT) algorithm \(A\), there exists a negligible function \(\mu : \mathbb{N} \rightarrow \mathbb{R}\) such that, for every \(\lambda \in \mathbb{N}\), it holds that \(\Pr[\text{ExpEUF-CMA}_{\Pi, A}(\lambda)] \leq \mu(\lambda)\), where \(\text{ExpEUF-CMA}_{\Pi, A}(\lambda)\) is defined as follows:

1. \(Q \leftarrow \emptyset\)
2. \((sk, pk) \leftarrow \text{KGen}(1^\lambda)\)
3. \((m', \sigma') \leftarrow A^{\text{Sig}(sk, \cdot)}(pk)\)
4. \(d \leftarrow \text{Vf}(pk, m', \sigma')\)
5. Return \((d = 1 \land (m', \sigma') \notin Q)\)

**Algorithm: Sig(sk, m)**
1. \(\sigma \leftarrow \text{Sig}(sk, m)\)
2. \(Q \leftarrow Q \cup \{m\}\)
3. Return \(\sigma\)

**Figure 10: Definition of the experiment \(\text{ExpEUF-CMA}_{\Pi, A}(\lambda)\) from Definition A.1.**

### Appendix B: Proof of Theorem IV.5

**Proof of Theorem IV.5.** We start with EUF-CMA-security. A successful attacker \(A\) against EUF-CMA-security of the signature scheme \(\Pi^*\) can be used to construct a successful attacker \(B\) against EUF-CMA-security of the underlying signature scheme \(\Pi\). The outer attacker \(B\) provides its own input to \(A\). It simulates the signing oracle for \(A\) by forwarding the hash evaluation of the public key and the message as a query to its own oracle and appending the same hash digest to the signature returned from the oracle. The outer attacker \(B\) takes the output \((m', \sigma^*)\) of \(A\), where \(\sigma^*\) is of the form \((\sigma', h')\). The adversary \(B\) simply parses \(\sigma^*\) accordingly and outputs as its forgery \((h', \sigma')\). As \(A\) is successful, \(B\) is also successful, unless \(h'\) collides with a hash value in the signature queries, contradicting the collision resistance of \(H\).

Next, we argue about M-S-UEO security. Assume a successful attacker against M-S-UEO of \(\Pi^*\) that outputs \((m_1, m_2, \sigma, pk_1, pk_2)\). Since both \(\text{Vf}^*(pk_1, m_1, \sigma)\) and \(\text{Vf}^*(pk_2, m_2, \sigma)\) yield true, it must hold that \(H(m_1, pk_1) = h = H(m_2, pk_2)\) where \(pk_1 \neq pk_2\). Therefore, the attacker has found a collision in \(H\). Since \(H\) is collision-resistant, this only happens with negligible probability. Thus, the probability of this attacker succeeding is negligible as well.

We provide details about MBS. Assume a successful attacker against MBS of \(\Pi^*\) that outputs \((m_1, m_2, \sigma, pk)\). Since both evaluations of \(\text{Vf}^*(pk, m_1, \sigma)\) and \(\text{Vf}^*(pk, m_2, \sigma)\) yield true, it must hold that \(H(m_1, pk) = h = H(m_2, pk)\) while \(m_1 \neq m_2\). Therefore, the attacker has found a collision in \(H\). Since \(H\) is collision-resistant, this can only happen with negligible probability. Thus, the probability of this attacker succeeding is negligible.

### Appendix C: Alternate NIST Candidates

In the following, we provide more details of the alternate NIST candidates and their respective proofs.

#### A. GeMSS

The signature scheme GeMSS [26] is built from multivariate cryptography and relies on hidden field equations (HFE) with vinegar specialization. GeMSS employs a set of \(k\) quadratic square-free non-linear polynomials in \(n + v\) variables over \(\mathbb{F}_2\). In particular, \(p = (p_1, \ldots, p_k) \in \mathbb{F}_2[z_1, \ldots, z_{n+v}]^k\). The trapdoor is the knowledge of the three components \(S\), \(F\), and \(T\) from which the public key can be generated. The invertible matrices \(S\) and \(T\) are of degree \(n + v\) and \(n\), respectively. The polynomial \(F \in \mathbb{F}_{2^n}[X, v_1, \ldots, v_n]\) becomes an HFE polynomial for any specialization of the vinegar variables, i.e., \(F\) is of HFEv-shape.

In Figure 11, we provide an algorithmic description of GeMSS.

1. **Key Generation (KGen):**
   1. Randomly sample two invertible matrices \(S\) and \(T\).
   2. Sample a polynomial \(F\) with HFEv-shape.
   3. Set the public key \(p\) to the first \(k = n - \Delta\) polynomials generated through evaluation-interpolation from \(F, S, T\).
   4. The secret key is the knowledge of \(F, S,\) and \(T\), allowing the computation of the inverse \(\text{Inv}_p(\cdot, sk)\) to \(p\).

2. **Signing (Sig):**
   1. Hash the message to the digest \(h\).
   2. Set \(s_0\) to the element 0 of the vector space.
   3. For \(i\) from 1 to \(nb\_ite\):
      1. Set \(d_i\) to the first \(k\) bits of \(h\).
      2. Compute \((s_i, x_i)\) through the inversion function \(\text{Inv}_p\) taking as input \(d_i \oplus s_{i-1}\) and \(sk\).
      3. Update \(h\) to a new digest using \(H(h)\).
   4. The signature consists of the final value \(s_{nb\_ite}\) and all \(x_i\) values.

3. **Verification (Vf):**
   1. Hash the message and set \(d_i\) to the first \(k\) bits of the \(i\)-th hash digest with \(i \in \{1, \ldots, nb\_ite\}\).
   2. For \(i\) descending from \(nb\_ite - 1\) to 0:
      1. Compute \(s_i\) as \(p(s_{i+1}, x_{i+1}) \oplus d_{i+1}\).
   3. Accept the signature if \(s_0\) is equal to 0.

Note that the number of iterations \(nb\_ite\) is chosen such that \(2^{k \cdot nb\_ite + 1} \geq 2^\lambda\) and usually corresponds to either 3 or 4 depending on the chosen parameters.

We rely on a mild assumption to attack MBS of GeMSS:

**Assumption C.1 (Distribution of \(s_1^{(2)}\)).** Let \(m_1, m_2\) be two distinct messages. Let \(s_i\) denote intermediate values for verifying \(m_1\) as described in Figure 11 and \(s_i^{(2)}\) for verifying \(m_2\) with the same signature and public key where \(s_{nb\_ite}^{(2)} = s_{nb\_ite}\). We assume that \(s_1^{(2)}\) is not contained in the linear span \(\langle s_i, i \in [1, nb\_ite]; s_j^{(2)}, j \in [2, nb\_ite] \rangle\).

This assumption appears plausible if one considers that the digests are randomly distributed and xoring values of a polynomial evaluation changes the distribution at most slightly, ensuring that the values are still well-distributed. Moreover, the dimension of the space \(\langle s_i, i \in [1, nb\_ite]; s_j^{(2)}, j \in [2, nb\_ite] \rangle\) is at most \(2 \cdot nb\_ite - 2 \approx 150\) for any parameter set and any security level.

**Proof of Proposition V.10.** An attacker against S-CEO of GeMSS is given a public key \(pk\), queries the signature oracle on a message \(m\), and gets a signature \(\sigma \leftarrow (s_{nb\_ite}, x_{nb\_ite}, \ldots, x_1)\) that verifies for \(m\) under this public key \(pk\). The attacker can now compute \(d_1\) as the first \(k\) bits of \(H(m)\) and build a new public key \(pk' \leftarrow p'\) that has the constant components set equal to \(d_1\) while all other coefficients are set to 0. Since \(p'\) of \(pk'\) always evaluates to \(d_1\), verification in the last step computes \(s_0\) as 0 for this message \(m\). Hence, \(\sigma\) verifies for \(m\) under \(pk'\) as well.

An attacker against S-DEO can proceed in a similar fashion. The difference is that this attacker computes \(d_1\) as the first \(k\) bits of \(H(m')\) with respect to a message \(m' \neq m\) and sets the constant part of \(pk'\) accordingly. By construction, \(\sigma\) verifies for \(m'\) under \(pk'\).

An attacker against MBS of GeMSS has to output a public key \(p\), a signature \(\sigma\), and two distinct messages \(m_1, m_2\) that verify under the public key with the same signature. The attacker honestly generates a key pair \((sk, p)\), chooses messages \(m_1, m_2\), and obtains the signature \(\sigma\) from honestly signing \(m_1\). Let \(d_i, s_i\) denote intermediate values for verifying \(m_1\) as described in Figure 11 and \(d_i^{(2)}, s_i^{(2)}\) for verifying \(m_2\) where \(s_{nb\_ite}^{(2)} = s_{nb\_ite}\). Note that, a priori, it does not necessarily hold that \(p(s_1^{(2)}) = 0\). For each \(l \in [1, k]\), there exists a polynomial \(q_l\) that satisfies \(q_l(s_i, x_i) = 0\) for \(i \in [1, nb\_ite]\) and \(q_l(s_1^{(2)}, x_1) = p_l(s_1^{(2)}, l)\). The full version details how to construct these polynomials.

**Figure 11: Algorithmic description of GeMSS.**

```plaintext
KGen(1^λ):
1. (S, T) ←$ (GL_{n+v}(\mathbb{F}_2) × GL_n(\mathbb{F}_2))
2. F ←$ \mathbb{F}_{2^n}[X, v_1, ..., v_v]
3. (p_1, ..., p_n) ← Eval(F, S, T)
4. p ← first k polynomials of (p_1, ..., p_n)
5. pk ← p
6. sk ← (F, S, T)
7. return (sk, pk)

Sig(sk, m):
1. h ← H(m)
2. s_0 ← 0 ∈ \mathbb{F}_k
3. for i from 1 to nb_ite do
    1. d_i ← first k bits of h
    2. (s_i, x_i) ← Inv_p(d_i ⊕ s_{i-1}, sk)
    3. h ← H(h)
4. σ ← (s_{nb_ite}, x_{nb_ite}, ..., x_1)
5. return σ

Vf(pk, m, σ):
1. h ← H(m)
2. (s_{nb_ite}, x_{nb_ite}, ..., x_1) ← σ
3. for i from 1 to nb_ite do
    1. d_i ← first k bits of h
    2. h ← H(h)
    3. s_i ← p(s_{i+1}, x_{i+1}) ⊕ d_{i+1}
4. return [s_0 = 0]
```

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.