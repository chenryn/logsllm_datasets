(2009) Flickr’s API Signature Forgery
[Online]. Available:
[12] K. Bhargavan and G. Leurent, “Transcript collision attacks: Breaking
authentication in TLS, IKE and SSH,” in 23rd Annual Network and
Distributed System Security Symposium, NDSS 2016.
The Internet
Society, 2016.
[13] National Institute of Standards and Technology (NIST), “SHA-3
Standard: Permutation-Based Hash and Extendable-Output Functions,”
https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf, Aug 2015.
[14] Y. Dodis, L. Reyzin, and A. Smith, “Fuzzy extractors: How to generate
strong keys from biometrics and other noisy data,” in EUROCRYPT 2004,
ser. LNCS, C. Cachin and J. Camenisch, Eds., vol. 3027.
Springer,
Heidelberg, May 2004, pp. 523–540.
[15] C.-Y. Hsiao, C.-J. Lu, and L. Reyzin, “Conditional computational
entropy, or toward separating pseudoentropy from compressibility,” in
EUROCRYPT 2007, ser. LNCS, M. Naor, Ed., vol. 4515.
Springer,
Heidelberg, May 2007, pp. 169–186.
[16] A. Boldyreva, D. Cash, M. Fischlin, and B. Warinschi, “Foundations of
non-malleable hash and one-way functions,” in ASIACRYPT 2009, ser.
LNCS, M. Matsui, Ed., vol. 5912. Springer, Heidelberg, Dec. 2009,
pp. 524–541.
[17] P. Baecher, M. Fischlin, and D. Schröder, “Expedient non-malleability
notions for hash functions,” in CT-RSA 2011, ser. LNCS, A. Kiayias,
Ed., vol. 6558. Springer, Heidelberg, Feb. 2011, pp. 268–283.
[18] J. Bohli, S. Röhrich,
“Key substitution
attacks revisited: Taking into account malicious signers,” Int. J.
Inf. Sec., vol. 5, no. 1, pp. 30–36, 2006.
[Online]. Available:
https://doi.org/10.1007/s10207-005-0071-2
and R. Steinwandt,
[19] J. Baek and K. Kim, “Remarks on the unknown key share attacks,”
IEICE Transactions on Fundamentals of Electronics, Communications
and Computer Sciences, vol. 83, no. 12, pp. 2766–2769, 2000.
[20] J. Stern, D. Pointcheval, J. Malone-Lee, and N. P. Smart, “Flaws in
applying proof methodologies to signature schemes,” in CRYPTO 2002,
ser. LNCS, M. Yung, Ed., vol. 2442. Springer, Heidelberg, Aug. 2002,
pp. 93–110.
[21] K. Chalkias, F. Garillot, and V. Nikolaenko, “Taming the Many EdDSAs,”
in Security Standardisation Research - 6th International Conference, SSR
2020, London, UK, November 30 - December 1, 2020, Proceedings, ser.
Lecture Notes in Computer Science, T. van der Merwe, C. J. Mitchell,
and M. Mehrnezhad, Eds., vol. 12529. Springer, 2020, pp. 67–90.
[22] National Institute of Standards and Technology (NIST), “Post-quantum
cryptography,” https://csrc.nist.gov/projects/post-quantum-cryptography,
Aug 19, 2015.
[23] S. Bai, L. Ducas, E. Kiltz, T. Lepoint, V. Lyubashevsky, P. Schwabe,
G. Seiler, and D. Stehlé, “CRYSTALS-Dilithium: Algorithm spec-
iﬁcations and supporting documentation (version 3.1),” NIST Post-
Quantum Cryptography Standardization Round 3 Submission, 02 2021,
https://pq-crystals.org/dilithium/index.shtml.
[24] P.-A. Fouque, J. Hoffstein, P. Kirchner, V. Lyubashevsky, T. Pornin,
T. Prest, T. Ricosset, G. Seiler, W. Whyte, and Z. Zhang, “Falcon: Fast-
fourier lattice-based compact signatures over NTRU speciﬁcations v1.2,”
NIST Post-Quantum Cryptography Standardization Round 3 Submission,
10 2020, https://falcon-sign.info/.
[25] J. Ding, M.-S. Chen, M. Kannwischer, J. Patarin, A. Petzoldt, D. Schmidt,
and B.-Y. Yang, “Rainbow: Algorithm speciﬁcation and documentation
the 3rd round proposal,” NIST Post-Quantum Cryptography Standardiza-
tion Round 3 Submission, 2020, https://www.pqcrainbow.org/.
[26] A. Casanova, J.-C. Faugère, G. Macario-Rat, J. Patarin, L. Perret, and
J. Ryckeghem, “GeMSS: A Great Multivariate Short Signature,” NIST
Post-Quantum Cryptography Standardization Round 3 Submission, 2020,
https://www-polsys.lip6.fr/Links/NIST/GeMSS.html.
[27] M. Chase, D. Derler, S. Goldfeder, J. Katz, V. Kolesnikov, C. Orlandi,
S. Ramacher, C. Rechberger, D. Slamanig, X. Wang, and G. Zaverucha,
“The Picnic signature scheme: Design document version 3.0,” NIST Post-
Quantum Cryptography Standardization Round 3 Submission, 09 2020,
https://microsoft.github.io/Picnic/.
[28] J.-P. Aumasson, D.
J. Bernstein, W. Beullens, C. Dobraunig,
M. Eichlseder, S. Fluhrer, S.-L. Gazdag, A. Hülsing, P. Kampanakis,
S. Kölbl, T. Lange, M. M. Lauridsen, F. Mendel, R. Niederhagen,
C. Rechberger, J. Rijneveld, P. Schwabe, and B. Westerbaan, “SPHINCS+:
Submission to the NIST post-quantum project, v.3,” NIST Post-Quantum
Cryptography Standardization Round 3 Submission, 10 2020, https:
//sphincs.org/index.html.
[29] C. Cremers, S. Düzlü, R. Fiedler, M. Fischlin, and C. Janson, “Bufﬁng
signature schemes beyond unforgeability and the case of post-quantum
signatures,” IACR Cryptol. ePrint Arch., vol. 2020, p. 1525, 2020.
[Online]. Available: https://eprint.iacr.org/2020/1525
[30] G. Zaverucha, “The Picnic Signature Scheme: Speciﬁcation Version 3.0,”
NIST Post-Quantum Cryptography Standardization Round 3 Submission,
09 2020, https://microsoft.github.io/Picnic/.
[31] D. J. Bernstein, A. Hülsing, S. Kölbl, R. Niederhagen, J. Rijneveld, and
P. Schwabe, “The SPHINCS+ signature framework,” in ACM CCS 2019,
L. Cavallaro, J. Kinder, X. Wang, and J. Katz, Eds. ACM Press, Nov.
2019, pp. 2129–2146.
APPENDIX A
AUXILIARY DEFINITIONS
A. Unforgeable Signature Schemes
Definition A.1. Let Π be a digital signature scheme. We
say that Π is existentially unforgeable under chosen-message
attack if, for every PPT algorithm A, there exists a negligible
function µ : N → R such that, for every λ ∈ N, it holds
that Pr[ExpEUF-CMA
(λ) is
deﬁned in Figure 10.
(λ)] ≤ µ(λ), where ExpEUF-CMA
Π,A
Π,A
(λ):
Π,A
ExpEUF-CMA
11 : Q ← ∅
12 :
(cid:48)
(sk, pk) ←$ KGen(1λ)
(cid:48)
(m
) ←$ASig(sk,·)(pk)
13 :
14 : d ← Vf(pk, m
15 :
return (cid:2)d = 1 ∧ m
, σ
, σ
(cid:48)
(cid:48)
(cid:48)
)
/∈ Q(cid:3)
Sig(sk, m):
21 : σ ←$ Sig(sk, m)
22 : Q ← Q ∪ {m}
23 :
return σ
Figure 10: Deﬁnition of the experiment ExpEUF-CMA
Deﬁnition A.1.
Π,A
(λ) from
APPENDIX B
PROOF OF THEOREM IV.5
Proof of Theorem IV.5. We start with EUF-CMA-security. A
successful attacker A against EUF-CMA-security of signa-
ture scheme Π∗ can be used to construct a successful at-
tacker B against EUF-CMA-security of the underlying signature
scheme Π. The outer attacker B provides its own input to A.
It simulates the signing oracle for A by forwarding the hash
evaluation of the public key and the message as query to its
own oracle and appending the same hash digest to the signature
returned from the oracle. The outer attacker B takes the output
(m(cid:48), σ∗) of A where σ∗ is of the form (σ(cid:48), h(cid:48)). The adversary
B simply parses σ∗ accordingly and outputs as its forgery
(h(cid:48), σ(cid:48)). As A is successful, B is also successful, unless h(cid:48)
collides with a hash value in the signature queries, contradicting
the collision resistance of H.
Next we argue about M-S-UEO security. Let us as-
sume a successful attacker against M-S-UEO of Π∗
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
151710
∗
∗
(pk2, m2, σ) both yield true,
that outputs (m1, m2, σ, pk1, pk2). Since Vf
(pk1, m1, σ)
and Vf
it must hold that
H(m1, pk1) = h = H(m2, pk2) where pk1 (cid:54)= pk2. Therefore,
the attacker has found a collision in H. Since H is collision
resistant, this only happens with negligible probability. Thus,
the probability of this attacker succeeding is negligible as well.
We provide details about MBS. Let us assume a successful
attacker against MBS of Π∗ that outputs (m1, m2, σ, pk). Since
both evaluations of Vf
(pk, m2, σ) yield
true, it must hold that H(m1, pk) = h = H(m2, pk) while
m1 (cid:54)= m2. Therefore, the attacker has found a collision in
H. Since H is collision resistant, this can only happen with
negligible probability. Thus, the probability of this attacker
succeeding is negligible.
(pk, m1, σ) and Vf
∗
∗
APPENDIX C
ALTERNATE NIST CANDIDATES
In the following, we provide more details of the alternate
NIST candidates and their respective proofs.
A. GeMSS
The signature scheme GeMSS [26] is built from multivariate
cryptography and relies on hidden ﬁeld equations (HFE) with
vinegar specialization. GeMSS employs a set of k quadratic
square-free non-linear polynomials in n+v variables over F2. In
particular, p = (p1, . . . , pk) ∈ F2[z1, . . . , zn+v]k. The trapdoor
is the knowledge of the three components S, F, and T from
which the public key can be generated. The invertible matrices
S and T are of degree n+v and n, respectively. The polynomial
F ∈ F2n [X, v1, ..., vn] becomes an HFE polynomial for any
specialization of the vinegar variables, i.e. F is of HFEv-shape.
In Figure 11, we provide an algorithmic description of GeMSS.
In more detail, the key generation algorithm ﬁrst randomly
samples two invertible matrices S and T . Next, it samples a
polynomial F with HFEv-shape. The public key p is set to
the ﬁrst k = n − ∆ polynomials that are generated through
evaluation-interpolation from F,S,T , while the secret key
is the knowledge of F,S, and T . The secret key allows to
compute the inverse Invp(·, sk) to p. The signing algorithm
starts with hashing the message to the digest h and sets s0 to
the element 0 of the vector space. The next steps are executed
nb_ite times, where i is the number of the iteration: di is
set to the ﬁrst k bits of h; (si, xi) is computed through the
inversion function Invp taking as input di ⊕ si−1 and sk. Next,
h is given as an input to H outputting a new digest which is
used in the next iteration for deriving di. The signature consists
of the ﬁnal value snb_ite and all xi values. The veriﬁcation
algorithm starts with hashing the message and then sets di to
the ﬁrst k bits of the ith hash digest with i ∈ {1, . . . , nb_ite}.
Next, it computes si for i descending from nb_ite − 1 to 0 as
p(si+1, xi+1) ⊕ di+1. The algorithm accepts the signature if
s0 is equal to 0.
Note that the number of iterations nb_ite is chosen such
nb_ite+1 ≥ 2λ and usually corresponds to either 3 or 4
that 2k nb_ite
depending on the chosen parameters.
We rely on a mild assumption to attack MBS of GeMSS:
// with HFEv-shape
return (sk, pk)
(S,T ) ←$ (GLn+v(F2) × GLn(F2))
sk ← (F,S,T )
(p1, ..., pn) ← Eval(F,S,T )
KGen(1λ)
11 :
12 : F ←$ F2n [X, v1, ..., vv]
13 :
14 :
15 : p ← ﬁrst k polynomials of (p1, ..., pn)
16 : pk ← p
17 :
Sig(sk, m)
21 : h ← H(m)
s0 ← 0 ∈ Fk
22 :
for i from 1 to nb_ite do
23 :
24 :
25 :
26 :
27 : σ ← (snb_ite, xnb_ite, ..., x1)
28 :
Vf(pk, m, σ)
31 :
32 : h ← H(m)
33 :
34 :
35 :
36 :
37 :
38 :
di ← ﬁrst k bits of h
(si, xi) ← Invp(di ⊕ si−1, sk)
h ← H(h)
for i from nb_ite − 1 to 0 do
si ← p(si+1, xi+1) ⊕ di+1
di ← ﬁrst k bits of h
h ← H(h)
(snb_ite, xnb_ite, ..., x1) ← σ
for i from 1 to nb_ite do
return [s0 = 0]
2
return σ
Figure 11: Algorithmic description of GeMSS.
1 ). Let m1, m2 be two dis-
Assumption C.1 (Distribution of s(2)
tinct messages. Let si denote intermediate values for verifying
m1 as described in Figure 11 and s(2)
for verifying m2 with
the same signature and public key where s(2)
nb_ite = snb_ite.
We assume that s(2)
is not contained in the linear span
1
(cid:104)si, i ∈ [1, nb_ite]; s(2)
, j ∈ [2, nb_ite](cid:105).
i
j
This assumption appears to be plausible, if one considers
that the digests are randomly distributed and xoring values of a
polynomial evaluation changes the distribution at most slightly,
ensuring that the values are still distributed well. Moreover,
, j ∈
the dimension of the space (cid:104)si, i ∈ [1, nb_ite]; s(2)
[2, nb_ite](cid:105) is at most 2nb_ite−2  150 for any parameter set
and any security level.
1
j
Proof of Proposition V.10. An attacker against S-CEO of
GeMSS is given a public key pk, queries the signature oracle on
a message m, and gets a signature σ ← (snb_ite, xnb_ite, ..., x1)
that veriﬁes for m under this public key pk. The attacker can
now compute d1 as the ﬁrst k bits of H(m) and build a new
(cid:48) ← p(cid:48) that has the constant components set equal
public key pk
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:27 UTC from IEEE Xplore.  Restrictions apply. 
161711
i
i
(cid:48)
to d1 while all other coefﬁcients are set to 0. Since p(cid:48) of pk
always evaluates to d1, veriﬁcation in the last step computes
s0 as 0 for this message m. Hence, σ veriﬁes for m under
pk
(cid:48), too.
An attacker against S-DEO can proceed in a similar fashion.
The difference is that this attacker computes d1 as the ﬁrst k
bits of H(m(cid:48)) with respect to a message m(cid:48) (cid:54)= m and sets the
(cid:48) accordingly. By construction, σ veriﬁes
constant part of pk
(cid:48).
for m(cid:48) under pk
j
, s(2)
1 , x1) ⊕ d(2)
1 , x1)⊕d(2)
, xj) = 0 for j ∈ [2, nb_ite] and ql(s(2)
An attacker against MBS of GeMSS has to output a public
key p, a signature σ and two distinct messages m1, m2 that
verify under the public key with the same signature. The
attacker honestly generates a key pair (sk, p), chooses messages
m1, m2 and obtains the signature σ from honestly signing
m1. Let di, si denote intermediate values for verifying m1 as
described in Figure 11 and d(2)
for verifying m2 where
s(2)
nb_ite = snb_ite. Note that, a priori, it does not necessarily
1 = 0. For each l ∈ [1, k], there exists
hold that p(s(2)
a polynomial ql that satisﬁes ql(si, xi) = 0 for i ∈ [1, nb_ite]
and ql(s(2)
1 , x1) =
pl(s(2)
1,l . The full version details how to construct