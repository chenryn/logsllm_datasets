如果你需要查找并替换多处匹配，这种函数尤其方便。而且这个查找的值必须是设置了global标识的正则表达式，通过quoteText()，你可以使用任意字符串。该函数如下：
所有的特殊字符都要转义，因为你可能会在圆括号或方括号内引用一些字符。
19.10.2 陷阱：缺少断言（例如^、$）的正则表达式可以在任意位置匹配
如果你不使用类似 ^ 和 $ 的断言，大多数正则表达式方法可以在任意位置匹配。例如：
19.10.3 匹配一切或什么都不匹配
这种用例比较罕见，但有时你需要正则表达式可以匹配一切或什么都不匹配。例如，函数可以把正则表达式作为参数，用于过滤。如果缺少这个参数，你可以提供一个默认值，一个可以匹配一切的正则表达式。
匹配一切
空的正则表达式可以匹配一切。我们可以基于如下正则表达式创建RegExp的实例：
然而，空的正则表达式字面量应该是//，它被解释为JavaScript的注释。因此，下面是你可以获得的最接近的字面量: /(?:)/ (空的非捕获分组)。这个分组可以匹配一切，而不捕获任何字符串，这影响了exec()返回的结果。甚至JavaScript本身在显示空正则表达式时，也使用前面展示的正则表达式：
不匹配任何字符
空的正则表达式有一个相反的正则表达式——正则表达式不匹配任何字符：
19.10.4 手动实现逆向查找
逆向查找是种断言。类似正向查找，这种模式用于检查当前位置的输入，否则会忽略。与正向查找相反，这种模式匹配至当前位置结束（不是从当前位置开始）。
下面的函数只有当匹配项前没有引号时，才会用参数name替换每个匹配'NAME'的字符串。我们可以在当前匹配项前，手动检查引号。
另一种方案是在正则表达式中包含可转义的字符串。然后你需要暂时给查找的字符串添加前缀；否则，你会丢失字符串起始位置的匹配项。
19.11 正则表达式备忘单
原子（参见19.1.1“原子：常规”）。
.(点)匹配除了行结束符（例如，换行符）的一切字符。使用[\s\S]可以真正匹配一切。
转义字符类。
\d匹配数字([0-9]); \D匹配非数字([^0-9])。
\w匹配拉丁字母数字的字符以及下划线([A-Za-z0-9_]);\W匹配所有其他字符。
\s匹配所有空白字符（空格、制表符、换行符等）；\S匹配所有非空白字符。
字符类（字符集合）：[...]和[^…]。
源字符：[abc](除了\]-的所有匹配其本身的字符)。
转义字符类（参见前面的章节）：[\d\w]。
范围：[A-Za-z0-9]。
分组。
捕获组：(…);反向引用：\1
非捕获组：(?:…)
量词（详见19.1.4“量词”）。
贪婪匹配。
? * +
{n} {n,} {n,m}
非贪婪：把 ? 放在任何贪婪量词之后。
断言（详见19.1.5“断言”）。
输入的开始和结束：^ $。
单词边界，非单词边界：\b \B。
正向肯定查找：（?=...）（匹配紧随其后的模式,但其会被忽略）。
正向否定查找：（?!...）（不匹配紧随其后的模式，但会被忽略）。
析取（或）：|
创建正则表达式（详见19.3“创建正则表达式”）。
字面量：/xyz/i（加载时编译）。
构造函数：new RegExp('xzy', 'i')（运行时编译）。
标识（详见19.3.2“标识”）。
global（全局）：/g（影响正则表达的一些方法）。
ignoreCase（忽略大小写）：/i。
multiline（多行）：/m（^和$匹配每一行，而不是完整的输入）。
方法。
regex.test(str)：是否存在匹配（详见19.4“RegExp.prototype.test：是否存在匹配”）？
不设置/g：是否在某处存在匹配?
设置/g：存在多少次匹配就会多少次返回true。
str.search(regex)：在哪个索引存在匹配（详见19.5“String.prototype.search：在哪个索引存在匹配”）。
regex.exec(str)：捕获分组（详见19.6“RegExp.prototype.exec：捕获分组”）。
不设置/g：只捕获第一次匹配的分组（调用一次）。
设置/g：捕获所有匹配的分组（重复调用；如果没有任何匹配，返回null）。
str.match(regex)：捕获分组或返回所有匹配的子字符串（详见19.7“String. prototype. match：捕获分组或返回所有匹配的子字符串”）。
不设置/g：捕获分组。
设置/g：返回所有匹配的子字符串的数组。
str.replace(search, replacement)：查找和替换（详见19.8“String. prototype. replace: 查找和替换”）。
search：字符串或正则表达式（使用后者时，设置/g）。
replacement：字符串（使用$1,以此类推）或函数（arguments[1]是分组1，以此类推）返回一个字符串。
使用标识/g的提示，详见19.9“标识/g的一些问题”。
注解：
 致谢
Mathias Bynens (@mathias)和Juan Ignacio Dopazo (@juandopazo)推荐使用match()和test()计算匹配次数，而ŠimeVidas (@simevidas)提醒我如果没有任何匹配时，要小心使用match()。与Andrea Giammarchi（http://bit.ly/1fwpdXv）(@webreflection)的交流后，我了解了全局标志的缺陷会导致无限循环。Claude Pache告诉我用quoteText()转义更多的字符。
第20章 Date
JavaScript的Date构造函数提供了解析、管理和展示时间的功能。本章将阐述它的工作原理。
Date的API使用的是协调世界时（UTC，Coordinated Universal Time）。大多数情况下，协调世界时是世界时（GMT，Greenwich Mean Time）的同义词，大概是英国伦敦的时区。
20.1 Date构造函数
可以通过下面四种方法调用Date构造函数：
new Date(year, month, date?, hours?, minutes?, seconds?, milliseconds?)
用给定的数据构造一个新的日期对象。这个时间与当前时区相对应。Date.UTC()也提供了类似的功能，但是它是相对于协调世界时（UTC）的。下面是它的参数范围。
year：年0≤year≤99，会自动加上1900（译者注：此处作者解释并不清楚，为了避免千年虫的问题，建议直接使用4位数的年份，如1988，2014等）。
month：月0～11（0为1月份，1为2月份，依此类推）
date：日1～31
hours：时0～23
minutes：分0～59
seconds：秒0～59
milliseconds：毫秒0～999
来看几个例子：
说句题外话，JavaScript从Java继承了0为1月份、1为2月份诸如此类的奇怪约定。
new Date(dateTimeStr)
调用这个方法可以将日期时间字符串转换成数字。20.4.3“日期时间格式”对日期时间格式有详细解释。请看下面的例子：
非法的日期时间字符串会将NaN传递给new Date(number)。
new Date(timeValue)
用1970年1月1日00:00:00 UTC以来的毫秒数创建一个日期。看下面的例子：
这个构造函数的逆运算是getTime()函数，它返回毫秒数：
你可以用NaN作为参数，创建一个特殊Date实例——无效日期：
new Date()
用当前的日期和时间创建一个日期对象；效果等同于new Date(Date.now())。
20.2 Date构造函数方法
Date构造函数拥有下面几个方法。
Date.now()
该函数以毫秒为单位返回当前的日期和时间（从1970年1月1日00:00:00 UTC开始计算）。它产生的结果等同于new Date().getTime()。
Date.parse(dateTimeString)
该函数将dateTimeString转换成毫秒（从1970年1月1日00:00:00 UTC开始计算）。20.4.3“日期时间格式”详细介绍了dateTimeString的格式。函数返回的结果可以用来调用new Date(number)。下面是几个例子：
如果它无法解析某字符串，便会返回NaN：
Date.UTC(year, month, date?, hours?, minutes?, seconds?, milliseconds?)
该方法将给定的日期转换成毫秒（从1970年1月1日00:00:00 UTC开始计算）。它跟接收同样参数的Date构造函数存在两点不同：
它返回的是数值，而不是一个date对象。
它将参数解释为UTC时间，而不是当地时间。
20.3 Date原型方法
本小节将介绍Date.prototype方法。
20.3.1 时间单位的getter和setter方法
时间单位的getter和setter方法可以处理如下格式的时间。
当地时间：
Date.prototype.get«Unit»()根据当地时间返回单位时间。
Date.prototype.set«Unit»(number)根据当地时间设置单位时间。
世界时间：
Date.prototype.getUTC«Unit»()根据世界时间返回单位时间。
Date.prototype.setUTC«Unit»(number)根据世界时间设置单位时间。
下面单词可用来表示单位。
FullYear：年，通常四位数
Month：月(0～11)
Date：日(1～31)
Day (仅用于getter方法)：星期(0～6); 0为星期日
Hours：时(0～23)
Minutes：分(0～59)
Seconds：秒(0～59)
Milliseconds：毫秒(0～999)
例子：
20.3.2 各种各样的getter和setter方法
下面的方法可以以毫秒为单位获得或者设置时间（从1970年1月1日以后开始计算）：
Date.prototype.getTime() 返回毫秒数（从1970年1月1日00:00:00 UTC开始计算）（详细请看20.5“时间值：从1970-01-01开始的毫秒数”）。
Date.prototype.setTime(timeValue)以毫秒（从1970年1月1日00:00:00 UTC开始计算）为单位指定日期（详细请看20.5“时间值：从1970-01-01开始的毫秒数”）。
Date.prototype.valueOf()与getTime()方法等同。当日期转换成数值的时候调用此方法。
Date.prototype.getTimezoneOffset()方法以分钟为单位返回当地时间与世界时间的偏差。
单位Year已经被弃用了，用FullYear替代：
Date.prototype.getYear()方法已经被弃用；用getFullYear()方法替代。
Data.prototype.setYear(number)方法也被弃用了；用setFull Year()方法替代。
20.3.3 将日期转换成字符串
请注意日期转换成字符串是高度依赖实现的。下面的日期对象是用于计算接下来例子中的输出结果（在写这本书的时候，Firefox最完整地实现了它们）：
（1）时间（人可读）
Date.prototype.toTimeString()：
返回当前时区的时间。
Date.prototype.toLocaleTimeString()：
返回的时间格式是具备地区特性的。这个方法由ECMAScript国际化API所提供（详见30.3“ECMAScript的国际化API”），没有它也没有多大影响。（译者注：在中国大陆地区调用它将返回“下午5:43:07。”）
（2）Date（人可读）
Date.prototype.toDateString()：
返回的日期。
Date.prototype.toLocaleDateString()：
返回的时间格式是具备地区特性的。这个方法由ECMAScript国际化API所提供(详细请看30.3“ECMAScript的国际化API”)，没有它也没有多大影响。（译者注：在中国大陆地区调用它将返回“2001年10月30日。”）
（3）日期和时间（人可读）
Date.prototype.toString()：
返回的日期和时间落在当前的时区内。对于任何不包含毫秒的日期实例（即秒是完整的），下面的表达式结果为true：
Date.prototype.toLocaleString()：
返回的时间格式是具备地区特性的。这个方法由ECMAScript国际化API所提供(详细请看30.3“ECMAScript的国际化API”)，没有它也没有多大影响。（译者注：在中国大陆地区调用它将返回“2001年10月30日下午5:43:07”。）
Date.prototype.toUTCString()：
返回日期和时间（世界时间）。
Date.prototype.toGMTString()：
该方法已被弃用；使用toUTCString()方法替代。
（4）日期和时间（机器可读）
Date.prototype.toISOString()：
所有的内部属性都出现在返回的字符串中。格式是按照20.4.3“日期时间格式”；时区总是Z。
Date.prototype.toJSON()：
这个方法在内部调用toISOString()方法。它是利用JSON.stringify()方法以日期为对象转换成JSON字符串。