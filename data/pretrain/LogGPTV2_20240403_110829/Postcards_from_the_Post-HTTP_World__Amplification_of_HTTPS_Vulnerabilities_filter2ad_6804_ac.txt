### Figure 3: Attack Tree for Tainted Channels

In the attack tree for tainted channels, multiple sub-goals must be valid simultaneously (indicated by a logical AND ‘&’). Sub-goals are distinguished from their parent goals by increased indentation. Leaves, which are goals without sub-goals, evaluate to True or False based on specific tests, such as the presence of a vulnerability, detected server configuration, or the result of a separate, standalone tree. If the entire tree evaluates to True, the host is vulnerable to an exploitable vulnerability that can facilitate the main goal.

1. **Obtaining the PMS by Decrypting the Key Exchange (1)**
   - The parties must use RSA key exchange (1.1).
     - The client must support RSA key exchange, and the server must prefer it in the highest version of TLS supported by both parties (1.1.1), or in any other commonly supported version if protocol version downgrade is not properly mitigated (1.1.2).
   - The attacker decrypts the RSA key exchange (1.2) using either:
     - Strong Bleichenbacher’s oracle [14], or
     - The DROWN attack [4].
     - The oracle could be present on the target host directly (1.2.1), on a different host that uses the same certificate (1.2.2), or at least the same RSA key (1.2.3).

### E. Tainted Channels

Channels are considered tainted if the attacker can mount a Man-in-the-Middle (MITM) attack, allowing them to decrypt and modify all traffic between the server and the client. Consequently, tainted channels are also leaky. The attacker must learn the Pre-Master Secret (PMS) of an active session or influence its value and successfully impersonate the server. The attack tree is illustrated in Figure 3 and described below.

1. **Forcing RSA Key Exchange (1)**
   - The attacker modifies the ClientHello sent to the server to only contain ciphersuites that use RSA key exchange.
   - The server must support such a ciphersuite (1.1).
   - This modification leads to different handshake transcripts, requiring the decryption of the key exchange to be performed very fast to generate valid Finished messages before the peers time out.
   - The attacker needs access to a fast instantiation of the Strong Bleichenbacher’s oracle [14] or a server vulnerable to the Special variant of the DROWN attack [4] (1.2).
   - The authors of the ROBOT attack [14] estimate that it should be feasible to decrypt the key exchange fast enough (in a few seconds) if the attacker can parallelize the requests across multiple servers of the attacker and the target. An analysis of such a parallel attack was conducted by Ronen et al. [69].

2. **Gaining More Time to Obtain Session Keys (2)**
   - If the session keys are long-lived (minutes to hours), the attacker can capture an RSA key exchange and decrypt it offline (2.1) using the techniques described in Section III-D (Figure 2).
   - The attacker then intercepts a resumed session with full MITM capabilities (2.2).
   - The server may support session resumption without server-side state (2.2.1) [71] or with server-side state (2.2.2) [27].

3. **Forging Signatures (3)**
   - Under certain conditions, a very efficient RSA decryption oracle can be used to forge signatures (3).
   - The oracle can be found on a variety of hosts (3.1.1-3.1.3).
   - Additionally, a host can be attacked using a certificate that it neither uses nor shares an RSA key with, if the host appears on the certificate’s list of Subject Alternative Names (SAN) (3.1.4).
   - The certificate’s RSA key used for signing (EC)DHE parameters must be the same as the RSA key used for RSA key exchange by a server with a decryption oracle (3.2).

4. **Private Key Leak Due to Heartbleed (4)**
   - The attacker might obtain the private key of the server due to the Heartbleed memory disclosure bug (4) [83].
   - For ethical reasons, we did not attempt to extract the private keys when we detected Heartbleed, but it has been reliably shown to be possible [45].

### F. Partially Leaky Channels

Channels are partially leaky if they allow for a partial confidentiality compromise of secrets sent by the client to the server. Leaky and tainted channels are also partially leaky. The conditions are described by the attack tree in Figure 4.

1. **Exploiting a CBC Padding Oracle (1)**
   - The attacker must force repeated requests containing the secret (secret repetition) and partially control the plaintext sent by the client to a vulnerable server, e.g., by modifying the URL in the header of the request.
   - We check the server for the presence of two types of CBC padding oracles (as explained in Section III-B):
     - The TLS version of the POODLE attack [78], [59] (1.1) due to incorrect padding checks (1.1.1).
     - A buggy implementation [79] providing a Vaudenay CBC padding oracle [88] (1.2) when using hardware-accelerated AES (AES-NI) in certain versions of OpenSSL (1.2.1).
   - Both attack types require the server to choose a vulnerable ciphersuite (1.1.2, 1.2.2). It could be chosen by the server in the highest TLS version (1.1.2.1, 1.2.2.1) or following a protocol version downgrade (1.1.2.2, 1.2.2.2).

### IV. Experimental Setup

We developed an analysis platform to identify exploitable cryptographic weaknesses in TLS implementations and estimate their impact on web application security. The platform employs a crawler to perform a vulnerability scan of the target website, testing hosts that store sub-resources included by the homepage or belong to related domains. Confidentiality and integrity threats are identified by matching the relevant conditions of the attack trees introduced in Section III against the output of existing analysis tools.

#### A. Analysis Platform

The analysis platform performs the following steps:
1. Access the website, such as example.com, by instrumenting Headless Chrome with Puppeteer.
2. Collect the DOM of the page at example.com, along with its set of cookies and the hosts serving sub-resources (such as scripts, images, stylesheets, and fonts) included by the page.
3. Enumerate the sub-domains of example.com by querying the Certificate Transparency logs and by testing for the existence of common sub-domains, such as mail.example.com.
4. Run existing analysis tools to identify cryptographic vulnerabilities on the target website and on all the hosts collected in the previous steps.
5. Map the output of the tools to the conditions of the attack trees to find exploitable vulnerabilities.

The analysis tools include testssl.sh, TLS-Attacker [80], and the nmap plugin for Special DROWN, which combined provide sufficient information. For ethical reasons, we did not perform any aggressive testing for the presence of oracles other than the checks run by these tools. However, if some untested conditions have been considered realistic in the literature, e.g., the performance of a Strong Bleichenbacher’s Oracle for online decryption or for signature computation [14], we report the vulnerability as exploitable.

#### B. Data Collection and Findings

We used our analysis platform to collect data from the Alexa top 1M list retrieved on July 20, 2018. We scanned sequential batches of websites up to collecting 10,000 websites served over HTTPS. Their sub-resources and related domains added up to 90,816 more hosts that underwent a vulnerability analysis, completed at the beginning of August 2018.

Our tool reported exploitable TLS vulnerabilities in 5,574 hosts (5.5%). 4,818 hosts allow for the establishment of tainted channels, which is the most severe security threat. 733 hosts allow for the establishment of leaky channels, while 912 allow for partially leaky channels. The majority of vulnerabilities is due to the 20-year-old Bleichenbacher’s attack [13] and its newest improvement, ROBOT [14]. Only 6.5% of the scanned hosts actually prefer RSA key exchange in their highest supported TLS version, yet 76.9% of hosts support it, presumably to maintain backward compatibility with old clients. More than 90% of servers support a key exchange that provides Perfect Forward Secrecy. Hence, the majority of the exploitable hosts could be secured by stopping the support for RSA key exchange. We provide a breakdown of the identified insecure channels in Table I and comment on it below.

**Leaky Channels:**
- The connections to 733 hosts could be decrypted using ROBOT or DROWN after the attacker captured the traffic—goal (1) of Figure 2.
- 727 hosts preferred the RSA key exchange (1.1.1), hence no action would be necessary to make the peers negotiate RSA.
- Only on 6 hosts, the attacker would need to use the protocol version downgrade to force the usage of RSA key exchange (1.1.2) instead of Diffie-Hellman (DH).
- We found 136 hosts vulnerable to ROBOT that used ECDHE in their highest protocol version and properly implemented protocol version downgrade mitigation, showing the importance of the countermeasure.
- Out of the 733 vulnerable hosts, 592 hosts were directly exploitable (1.2.1), while 141 were only exploitable due to sharing a certificate (1.2.2) or an RSA key (1.2.3) with a vulnerable host. Hence, a conventional tool that only checks the host directly for the presence of ROBOT would not detect confidentiality problems on 19% of the exploitable hosts.

**Tainted Channels:**
- In total, 4,818 hosts made connections over tainted channels due to MITM attacks (Figure 3).
- 615 hosts were exploitable due to the compromise of a resumed session (2), where the attacker can decrypt the key exchange over a longer period.
- 1,877 additional hosts were susceptible to online RSA key exchange decryption attacks (1).
- The attack was also possible for the previously mentioned 615 hosts, without relying on the client to resume the session (2.2), yet requiring a faster computation (1.2).
- When a decryption oracle is available on a host, each certificate that uses the same RSA key for signatures could be used to impersonate all the hosts that appear in its Subject Alternative Name extension (SAN) (3).
- We found 2,279 such hosts that could not be impersonated with a less demanding version of the MITM attack: (1) or (2).
- It is worth noting that only 1,893 hosts in our scan had a strong ROBOT oracle, yet the number of exploitable servers due to ROBOT is much higher. This shows that the sharing of certificates and RSA public keys, as well as the list of hostnames in the SAN extension, should be kept minimal.
- Luckily, only 47 hosts were vulnerable to Heartbleed (4). When a private RSA key is extracted in this way, the attacker can repeatedly impersonate the host without its involvement.

**Partially Leaky Channels:**
- Exploitable partially leaky channels (Figure 4) were found on 912 hosts.
- Out of the 816 hosts with an exploitable POODLE-TLS padding oracle (1.1), 797 hosts preferred the vulnerable ciphersuite (1.1.2.1), and an additional 19 hosts could be exploited after being downgraded to an older version of TLS due to a lack of protection from downgrades (1.1.2.2).
- Out of the 96 hosts with an exploitable OpenSSL AES-NI padding oracle (1.2), only 20 hosts were vulnerable in the preferred TLS version (1.2.2.1), and an additional 76 hosts could be exploited after an unmitigated version downgrade (1.2.2.2).
- Other 68 hosts were affected by POODLE-TLS, and 2 exposed OpenSSL AES-NI padding oracle, yet a modern browser would negotiate a more secure cipher making the vulnerabilities non-exploitable.

### C. Roadmap

The presence of so many insecure channels is concerning, but their actual impact on web application security is unclear. In the rest of the paper, we investigate and quantify this delicate point by focusing on selected aspects of web application security. Since we are interested in cryptographic attacks against HTTPS, we stipulate that every time we refer to pages/channels, we implicitly refer to HTTPS pages/channels, unless otherwise specified. Attacks enabled by the (partial) adoption of HTTP are out of the scope of this study.

### V. Page Integrity

In this section, we describe a number of attacks enabled by the presence of tainted channels, whose security impact ranges from content injection to Same-Origin Policy (SOP) bypasses.

#### A. Security Analysis

If a web page is received from a tainted channel, the attacker may be able to arbitrarily corrupt its contents, thus completely undermining its integrity guarantees. Moreover, even if the page was received from an untainted channel, the subsequent requests for sub-resources or interactions with the page can still be compromised if they are made over a tainted channel.