Fig. 3. Attack tree for tainted channels
several sub-goals to be valid at once (marked as logical AND
‘&’). Sub-goals are differentiated from their parent goal by
increased indentation. Leaves, i.e., goals without sub-goals,
evaluate to True or False based on a concrete test (e.g., for the
presence of a vulnerability), a detected server conﬁguration,
or are the result of a stand-alone, separate tree. If the entire
tree evaluates to True, the host suffers from an exploitable
vulnerability that can facilitate the main goal.
The attacker may obtain the PMS by decrypting the key
exchange (1). The parties must use RSA key exchange (1.1).
Hence, the client must support it and the server must prefer
it either in the highest version of TLS supported by both
parties (1.1.1), or in any other commonly supported version, if
protocol version downgrade is not properly mitigated (1.1.2).
The attacker decrypts the RSA key exchange (1.2) either using
Strong Bleichenbacher’s oracle [14] or with the DROWN
attack [4]. The oracle could be present on the target host
directly (1.2.1), or on a different host that uses the same
certiﬁcate (1.2.2) or at least the same RSA key (1.2.3).
(cid:19)(cid:25)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
E. Tainted Channels
Channels are tainted if the attacker can mount a MITM
attack that gives her the ability to decrypt and modify all
the trafﬁc between the server and the client. Hence, tainted
channels are also leaky. The attacker must learn the PMS of an
active session or she must inﬂuence its value and successfully
impersonate the server. The attack tree is shown in Figure 3
and described below.
The attacker can force the use of RSA key exchange by
to the server to only
modifying the ClientHello sent
contain such ciphersuites (1). Naturally,
the server must
support such ciphersuite (1.1). The modiﬁcation leads to
different handshake transcripts, hence the decryption of the
key exchange must be performed very fast, in order to generate
valid Finished messages before the peers time out. Hence,
the attacker needs access to a fast instantiation of Strong
Bleichenbacher’s oracle [14] or to a server vulnerable to the
Special variant of the DROWN attack [4] (1.2). The authors
of the ROBOT attack [14] estimate that it should be feasible to
decrypt the key exchange fast enough (in a few seconds) if the
attacker can parallelize the requests across multiple servers of
the attacker and the target. An analysis of such parallel attack
was done by Ronen et al. [69].
Alternatively, the attacker may gain more time to obtain the
session keys, if they are long lived (minutes to hours) (2).
She captures an RSA key exchange and decrypts it ofﬂine
(2.1), through the techniques of Section III-D (Figure 2) as
she cannot modify the initial ClientHello at will. She
then intercepts a resumed session with full MITM capabilities
(2.2). Server may support session resumption without server-
side state (2.2.1) [71] or with server-side state (2.2.2) [27].
Under some conditions, a very efﬁcient RSA decryption
oracle can be used to forge signatures (3). The oracle can be
found on a variety of hosts (3.1.1−3.1.3). Additionally, a host
can be attacked using a certiﬁcate that it neither uses nor shares
an RSA key with, if the host appears on the certiﬁcate’s list
of Subject Alternative Names (SAN) (3.1.4). The certiﬁcate’s
RSA key used for signing (EC)DHE parameters must be the
same as the RSA key used for RSA key exchange by a server
with a decryption oracle (3.2).
Finally, the attacker might obtain the private key of the
server due to the Heartbleed memory disclosure bug (4) [83].
For ethical reasons, we did not attempt to extract the private
keys when we detected Heartbleed, yet it was reliably shown
possible [45].
F. Partially Leaky Channels
Channels are partially leaky if they allow for a partial
conﬁdentiality compromise of secrets sent by the client to the
server. Leaky and tainted channels are also partially leaky.
The conditions are described by the attack tree in Figure 4.
To exploit a CBC padding oracle (1), the attacker must force
repeated requests containing the secret (secret repetition) and
she is required to partially control the plaintext sent by the
client to a vulnerable server, e.g., by modifying the URL in the
header of the request. We check the server for the presence of
GOAL Partial decryption of messages sent by Client
| 1 CBC padding oracle on the server
| 1 POODLE-TLS padding oracle
& 1 Server checks TLS padding as in SSLv3
& 2 Any vulnerable CBC mode ciphersuite is used
| 1 A CBC mode ciphersuite is preferred
in the highest supported version of TLS
| 2 Downgrade is possible to a version of TLS
where a CBC mode ciphersuite is preferred
| 2 CBC padding oracle - OpenSSL AES-NI bug
& 1 Server is vulnerable to CVE-2016-2107
& 2 A ciphersuite with AES in CBC mode is used
| 1 AES in CBC mode is preferred in the
highest supported TLS version
| 2 Downgrade is possible to a TLS version
where AES in CBC mode is preferred
Fig. 4. Attack tree for partially leaky channels
two CBC padding oracle types (as explained in Section III-B).
They are instantiated as the TLS version of the POODLE
attack [78], [59] (1.1) due to incorrect padding checks (1.1.1)
and as a buggy implementation [79] providing a Vaudenay
CBC padding oracle [88] (1.2) when using hardware acceler-
ated AES (AES-NI) in certain versions of OpenSSL (1.2.1).
Both attack types require the server to choose a vulnerable
ciphersuite (1.1.2, 1.2.2). It could be chosen by the server
in the highest TLS version (1.1.2.1, 1.2.2.1) or following a
protocol version downgrade (1.1.2.2, 1.2.2.2).
IV. EXPERIMENTAL SETUP
We developed an analysis platform to identify exploitable
cryptographic weaknesses in TLS implementations and esti-
mate their import on web application security. The platform
employs a crawler to perform a vulnerability scan of the
target website,
testing also hosts which either store sub-
resources included by the homepage or belong to related
domains. Conﬁdentiality and integrity threats are identiﬁed by
matching the relevant conditions of the attack trees introduced
in Section III against the output of existing analysis tools.
A. Analysis Platform
The analysis platform performs the following steps: (i) ac-
cess the website, such as example.com, by instrumenting
Headless Chrome with Puppeteer;2 (ii) collect the DOM of
the page at example.com, along with its set of cookies
and the hosts serving sub-resources (such as scripts, images,
stylesheets and fonts) included by the page; (iii) enumerate the
sub-domains of example.com by querying the Certiﬁcate
Transparency3 logs and by testing for the existence of common
sub-domains, such as mail.example.com; (iv) run existing
analysis tools to identify cryptographic vulnerabilities on the
target website and on all the hosts collected in the previous
steps; (v) map the output of the tools to the conditions of the
attack trees to ﬁnd exploitable vulnerabilities.
2https://github.com/GoogleChrome/puppeteer
3https://www.certiﬁcate-transparency.org/
(cid:19)(cid:25)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
The analysis tools include testssl.sh,4 TLS-Attacker [80]
and the nmap plugin for Special DROWN,5 which combined
provide enough information. For ethical reasons, we did not
perform any aggressive testing for the presence of oracles
other than the checks run by these tools, e.g., we did not
evaluate the performance of servers with respect to the number
of oracle queries they can answer in a short time. Still, if
some untested conditions have been considered realistic in the
literature, e.g., the performance of a Strong Bleichenbacher’s
Oracle for online decryption or for signature computation [14],
we report the vulnerability as exploitable.
B. Data Collection and Findings
We used our analysis platform to collect data from the
Alexa top 1M list retrieved on July 20, 2018. We scanned
sequential batches of websites up to collecting 10,000 websites
served over HTTPS. Their sub-resources and related domains
added up to 90,816 more hosts that underwent a vulnerability
analysis, completed at the beginning of August 2018.
Our tool reported exploitable TLS vulnerabilities in 5,574
hosts (5.5%). 4,818 hosts allow for the establishment of
tainted channels, which is the most severe security threat.
733 hosts allow for the establishment of leaky channels,
while 912 allow for partially leaky channels. The majority
of vulnerabilities is due to the 20 years old Bleichenbacher’s
attack [13] and its newest improvement ROBOT [14]. Only
6.5% of the scanned hosts actually prefer RSA key exchange in
their highest supported TLS version, yet 76.9% hosts support
it, presumably to maintain backward compatibility with old
clients. More than 90% of servers support a key exchange that
provides Perfect Forward Secrecy. Hence, the majority of the
exploitable hosts could be secured by stopping the support for
RSA key exhange. We provide a breakdown of the identiﬁed
insecure channels in Table I and we comment it below.
Leaky channels: The connections to 733 hosts could be de-
crypted using ROBOT or DROWN after the attacker captured
the trafﬁc – goal (1) of Figure 2. 727 hosts preferred the RSA
key exchange (1.1.1), hence no action would be necessary to
make the peers negotiate RSA. Only on 6 hosts the attacker
would need to use the protocol version downgrade to force the
usage of RSA key exchange (1.1.2) instead of Difﬁe-Hellman
(DH). We found 136 hosts vulnerable to ROBOT that used
ECDHE in their highest protocol version and properly imple-
mented protocol version downgrade mitigation, showing the
importance of the countermeasure. Out of the 733 vulnerable
hosts, 592 hosts were directly exploitable (1.2.1), while 141
were only exploitable due to sharing a certiﬁcate (1.2.2) or an
RSA key (1.2.3) with a vulnerable host. Hence, a conventional
tool that only checks the host directly for the presence of
ROBOT would not detect conﬁdentiality problems on 19% of
the exploitable hosts.
Tainted channels: In total, 4,818 hosts made connections
over tainted channels due to MITM attacks (Figure 3). 615
4https://github.com/drwetter/testssl.sh
5https://nmap.org/nsedoc/scripts/sslv2-drown.html
hosts were exploitable due to the compromise of a resumed
session (2), where the attacker can decrypt the key exchange
over a longer period. 1,877 additional hosts were susceptible
to online RSA key exchange decryption attacks (1). The attack
was also possible for the previously mentioned 615 hosts,
without relying on the client to resume the session (2.2), yet
requiring a faster computation (1.2). When a decryption oracle
is available on a host, each certiﬁcate that uses the same RSA
key for signatures could be used to impersonate all the hosts
that appear in its Subject Alternative Name extension (SAN)
(3). We found 2,279 such hosts, that could not be impersonated
with a less demanding version of the MITM attack: (1) or (2).
It is worth noticing that only 1,893 hosts in our scan had a
strong ROBOT oracle, yet the number of exploitable servers
due to ROBOT is much higher. This shows that the sharing
of certiﬁcates and RSA public keys, as well as the list of
hostnames in the SAN extension, should be kept minimal.
Luckily, only 47 hosts were vulnerable to Heartbleed (4).
When a private RSA key is extracted in this way, the attacker
can repeatedly impersonate the host without its involvement.
Partially leaky channels: Exploitable partially leaky chan-
nels (Figure 4) were found on 912 hosts. Out of the 816
hosts with an exploitable POODLE-TLS padding oracle (1.1),
797 hosts preferred the vulnerable ciphersuite (1.1.2.1) and
additional 19 hosts could be exploited after being downgraded
to an older version of TLS due to a lack of protection
from downgrades (1.1.2.2). Out of the 96 hosts with an
exploitable OpenSSL AES-NI padding oracle (1.2), only 20
hosts were vulnerable in the preferred TLS version (1.2.2.1)
and additional 76 hosts could be exploited after an unmitigated
version downgrade (1.2.2.2). Other 68 hosts have been found
affected by POODLE-TLS and 2 exposed OpenSSL AES-NI
padding oracle, yet a modern browser would negotiate a more
secure cipher making the vulnerabilities non-exploitable.
C. Roadmap
The presence of so many insecure channels is concerning,
but their actual import on web application security is un-
clear. In the rest of the paper, we investigate and quantify
this delicate point by focusing on selected aspects of web
application security. Since we are interested in cryptographic
attacks against HTTPS, we stipulate that every time we refer
to pages / channels we implicitly refer to HTTPS pages /
channels, unless otherwise speciﬁed. Attacks enabled by the
(partial) adoption of HTTP are out of the scope of this study.
V. PAGE INTEGRITY
In this section, we describe a number of attacks enabled by
the presence of tainted channels, whose security import ranges
from content injection to SOP bypasses.
A. Security Analysis
If a web page is received from a tainted channel, the attacker
may be able to arbitrarily corrupt its contents, thus completely
undermining its integrity guarantees. Moreover, even if the
page was received from an untainted channel, the subsequent
(cid:19)(cid:25)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
OVERVIEW OF THE DETECTED INSECURE CHANNELS
TABLE I
Insecure channel
Leaky
Tainted
Partially leaky
Attack
Decrypt RSA key exchange ofﬂine
Force RSA key exchange and decrypt it online
Learn the session keys of a long lived session
Forge an RSA signature in the key establishment
Private key leak due to the Heartbleed bug
POODLE-TLS padding oracle
CBC padding oracle – OpenSSL AES-NI bug
Figure 2
Attack tree reference
(1)
(1)
(2)
(3)
(4)
(1.1)
(1.2)
Figure 3
Figure 4
Vulnerable hosts
733
1,877