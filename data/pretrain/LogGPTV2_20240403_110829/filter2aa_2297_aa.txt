# Summary of Attacks Against BIOS and Secure Boot

## Authors
- Yuriy Bulygin
- John Loucaides
- Andrew Furtak
- Oleksandr Bazhaniuk
- Alexander Matrosov

## Organization
Intel Security

## Introduction

### Legacy BIOS
1. **CPU Reset Vector**: Located in the BIOS ROM (Boot Block).
2. **Basic CPU and Chipset Initialization**.
3. **Initialize Cache-as-RAM**: Load and run from cache.
4. **Initialize DIMMs and Create Address Map**.
5. **Enumerate PCIe Devices**.
6. **Execute Option ROMs on Expansion Cards**.
7. **Load and Execute MBR**.
8. **Second Stage Boot Loader, OS Loader, and OS Kernel**.

**Technical Note**: UEFI BIOS vs. Legacy BIOS, Advantech

### Transition to UEFI
- **UEFI Boot Process**:
  - **Secure Boot, Network Boot, Verified Boot**.
  - **UEFI Compliant Firmware**:
    - **SEC (Security Phase)**
    - **PEI (Pre-EFI Initialization)**
    - **DXE (Driver Execution Environment)**
    - **BDS (Boot Device Selection)**
    - **Runtime/OS**

- **Initialization Phases**:
  - **S-CRTM (Static Core Root of Trust for Measurement)**: Initialize caches, MTRRs, NEM, Recovery, TPM.
  - **Early CPU/PCH Initialization**.
  - **Memory (DIMMs, DRAM) Initialization, SMM Initialization**.
  - **Platform and Device Initialization**.
  - **FV Enumeration and Driver Dispatching** (network, I/O, service).
  - **Boot Manager (Select Boot Device)**.
  - **EFI Shell/Apps, OS Boot Loaders**.
  - **Exit Boot Services**: Minimal UEFI services (Variable).
  - **ACPI, UEFI SystemTable, SMBIOS Table**.
  - **CPU Reset**.
  - **Signed BIOS Update & OS Secure Boot**.

- **Hardware Components**:
  - **I/O, Memory, Network, Graphics**.
  - **UEFI DXE Core/Dispatcher**.
  - **UEFI OS Loaders (winload.efi, winresume.efi)**.
  - **System Firmware (SEC/PEI)**.
  - **UEFI Option ROM (OROM)**.
  - **UEFI Boot Loader (Bootx64.efi, Bootmgfw.efi)**.
  - **Signed BIOS Update**.
  - **UEFI App**.
  - **DXE Driver**.
  - **OS Kernel and Early Launch Anti-Malware (ELAM)**.
  - **UEFI Secure Boot**.
  - **OS Driver**.
  - **Windows 8 Secure Boot**.

## Attacks on BIOS and Secure Boot

### BIOS Attack Surface: SPI Flash Protection
- **SPI Flash Protection**:
  - **Common Issues**:
    - **Write Protection Not Enabled**: Often not properly enabled on many systems.
    - **SMM Based Write Protection**: Not used for the entire BIOS region.
    - **SPI Protected Ranges**: Often do not cover the entire BIOS and NVRAM.
    - **Device-Specific WP Protection**: Only for boot block/startup code or SPI Flash descriptor region.
  - **Persistent BIOS Infection**: Using coreboot's flashrom on legacy BIOS.
  - **Evil Maid Attack**: Why Full Disk Encryption with TPM is not secure on many systems.
  - **BIOS Chronomancy**: Fixing the Static Root of Trust for Measurement.
  - **Software Bypass of Windows 8 Secure Boot**.
  - **Mitigation**:
    - **Enable BIOS_CONTROL[SMM_BWP] = 1 and SPI PRx**.
    - **Use chipsec_main --module common.bios_wp**.
    - **Or use Copernicus from MITRE**.

- **Checking Manually**:
  - **Windows**: RWEverything.
  - **Linux**: setpci -s 00:1F.0 DC.B.
  - **Better Way to Check**:
    ```shell
    [*] running module: chipsec.modules.common.bios_wp
    [x][ =======================================================================
    [x][ Module: BIOS Region Write Protection
    [x][ =======================================================================
    [*] BIOS Control = 0x02
        [05] SMM_BWP = 0 (SMM BIOS Write Protection)
        [04] TSS     = 0 (Top Swap Status)
        [01] BLE     = 1 (BIOS Lock Enable)
        [00] BIOSWE  = 0 (BIOS Write Enable)
    [!] Enhanced SMM BIOS region write protection has not been enabled (SMM_BWP is not used)
    [*] BIOS Region: Base = 0x00500000, Limit = 0x007FFFFF
    SPI Protected Ranges
    ------------------------------------------------------------
    PRx (offset) | Value    | Base     | Limit    | WP? | RP?
    ------------------------------------------------------------
    PR0 (74)     | 87FF0780 | 00780000 | 007FF000 | 1   | 0  
    PR1 (78)     | 00000000 | 00000000 | 00000000 | 0   | 0  
    PR2 (7C)     | 00000000 | 00000000 | 00000000 | 0   | 0  
    PR3 (80)     | 00000000 | 00000000 | 00000000 | 0   | 0  
    PR4 (84)     | 00000000 | 00000000 | 00000000 | 0   | 0  
    [!] SPI protected ranges write-protect parts of BIOS region (other parts of BIOS can be modified)
    [!] BIOS should enable all available SMM based write protection mechanisms or configure SPI protected ranges to protect the entire BIOS region
    [-] FAILED: BIOS is NOT protected completely
    ```

- **Demo**:
  - **Insecure SPI Flash Protection**.
  - **Patch Attempts**:
    - **Enable BIOS write protection (sets BIOS_CONTROL[BLE])**.
    - **Picked up by Subzero**.

- **SPI Flash Write Protection**:
  - **Configuration Issues**:
    - **Disable BIOS Write-Enable (BIOSWE) and Set BIOS Lock Enable (BLE)**.
    - **SMI Event Generation**.
    - **Possible Attack**:
      - **Block SMI Events**.
      - **Disable All Chipset Sources of SMI**.
      - **Disable Specific TCO SMI Source**.
    - **Mitigation**:
      - **Enable BIOS_CONTROL[SMM_BWP] = 1 and Lock SMI Config**.
      - **Use chipsec_main --module common.bios_smi**.

- **SMI Suppression Attack Variants**:
  - **Are All Required SMIs Enabled and Locked?**
    ```shell
    [*] running module: chipsec.modules.common.bios_smi
    [x][ =======================================================================
    [x][ Module: SMI Events Configuration
    [x][ =======================================================================
    [-] SMM BIOS region write protection has not been enabled (SMM_BWP is not used)
    [*] PMBASE (ACPI I/O Base) = 0x0400
    [*] SMI_EN (SMI Control and Enable) register [I/O port 0x430] = 0x00002033
        [13] TCO_EN (TCO Enable)            = 1
        [00] GBL_SMI_EN (Global SMI Enable) = 1
    [+] All required SMI events are enabled
    [*] TCOBASE (TCO I/O Base) = 0x0460
    [*] TCO1_CNT (TCO1 Control) register [I/O port 0x468] = 0x1800
        [12] TCO_LOCK = 1
    [+] TCO SMI configuration is locked
    [*] GEN_PMCON_1 (General PM Config 1) register [BDF 0:31:0 + 0xA0] = 0x0A14
        [04] SMI_LOCK = 1
    [+] SMI events global configuration is locked
    [+] PASSED: All required SMI sources seem to be enabled and locked!
    ```

- **Locking SPI Flash Configuration**:
  - **Is SPI Flash Configuration Locked?**
    ```shell
    [+] imported chipsec.modules.common.spi_lock
    [x][ =======================================================================
    [x][ Module: SPI Flash Controller Configuration Lock
    [x][ =======================================================================
    [*] HSFSTS register = 0x0004E008
        FLOCKDN = 1
    [+] PASSED: SPI Flash Controller configuration is locked
    ```

### BIOS Attack Surface: BIOS Update
- **Legacy BIOS Update and Secure Boot**:
  - **Mebromi Malware**:
    - **Includes BIOS infector and MBR bootkit components**.
    - **Patches BIOS ROM binary**.
    - **Triggers SW SMI 0x29/0x2F to erase SPI flash and write patched BIOS binary**.

- **Unsigned Sections in BIOS Update**:
  - **Example**: Boot splash logo BMP image.
  - **Vulnerability**:
    - **Integer overflow and memory corruption during DXE while parsing BMP image**.
    - **Copy loop overwrites #PF handler and triggers #PF**.
  - **Attacking Intel BIOS**.

- **RBU Packet Parsing Vulnerability**:
  - **Legacy BIOS with signed BIOS update**.
  - **Buffer overflow when copying RBU packet to a buffer with reconstructed BIOS image**.
  - **BIOS Chronomancy: Fixing the Core Root of Trust for Measurement**.
  - **Defeating Signed BIOS Enforcement**.

### BIOS Attack Surface: SMRAM Protection
- **Problems with HW Configuration/Protections**:
  - **D_LCK Bit**:
    - **Locks down Compatible SMM space (CSEG) configuration (SMRAMC)**.
    - **SMRAMC[D_OPEN]=0 forces access to legacy SMM space decode to system bus rather than to DRAM**.
  - **When D_LCK is not set by BIOS, SMM space decode can be changed to open access to CSEG when CPU is not in SMM**.
  - **Using CPU SMM to Circumvent OS Security Functions**.
  - **Other Uses of SMM**.
  - **Check with chipsec_main –-module common.smm**.

- **Unlocked Compatible/Legacy SMRAM**:
  - **Normal Decode**:
    - **Compatible SMM Space: Normal Decode**.
    - **SMRAMC [D_LCK] = 1, SMRAMC [D_OPEN] = 0**.
  - **Unlocked**:
    - **Compatible SMM Space: Unlocked**.
    - **SMRAMC [D_LCK] = 0, SMRAMC [D_OPEN] = 1**.

- **Is Compatible SMRAM Locked?**
  ```shell
  [+] imported chipsec.modules.common.smm
  [x][ =================================================================
  [x][ Module: SMM memory (SMRAM) Lock
  [x][ =================================================================
  [*] SMRAM register = 0x1A ( D_LCK = 1, D_OPEN = 0 )
  [+] PASSED: SMRAM is locked
  ```

- **SMRAM "Cache Poisoning" Attacks**:
  - **CPU Executes from Cache if Memory Type is Cacheable**.
  - **Ring0 Exploit Can Make SMRAM Cacheable (variable MTRR)**.
  - **Populate Cache-Lines at SMBASE with SMI Exploit Code and Trigger SMI**.
  - **CPU Executes SMI Exploit from Cache**.
  - **Attacking SMM Memory via Intel Cache Poisoning**.
  - **Getting Into the SMRAM: SMM Reloaded**.
  - **BIOS Has to Enable SMRR**.
  - **Check with chipsec_main –-module common.smrr**.

- **Is SMRAM Exposed to Cache Poisoning Attack?**
  ```shell
  [*] running module: chipsec.modules.common.smrr
  [x][ =======================================================================
  [x][ Module: CPU SMM Cache Poisoning / SMM Range Registers (SMRR)
  [x][ =======================================================================
  [+] OK. SMRR are supported in IA32_MTRRCAP_MSR
  [*] Checking SMRR Base programming..
  [*] IA32_SMRR_BASE_MSR = 0x00000000BD000006
      BASE    = 0xBD000000
      MEMTYPE = 6
  [+] SMRR Memtype is WB
  [+] OK so far. SMRR Base is programmed
  [*] Checking SMRR Mask programming..
  [*] IA32_SMRR_MASK_MSR = 0x00000000FF800800
      MASK    = 0xFF800000
      VLD     = 1
  [+] OK so far. SMRR are enabled in SMRR_MASK MSR
  [*] Verifying that SMRR_BASE/MASK have the same values on all logical CPUs..
  [CPU0] SMRR_BASE = 00000000BD000006, SMRR_MASK = 00000000FF800800
  [CPU1] SMRR_BASE = 00000000BD000006, SMRR_MASK = 00000000FF800800
  [CPU2] SMRR_BASE = 00000000BD000006, SMRR_MASK = 00000000FF800800
  [CPU3] SMRR_BASE = 00000000BD000006, SMRR_MASK = 00000000FF800800
  [+] OK so far. SMRR MSRs match on all CPUs
  [+] PASSED: SMRR protection against cache attack seems properly configured
  ```

- **Memory Remapping/Reclaim Attack**:
  - **Remap Window**:
    - **Used to reclaim DRAM range below 4Gb lost for Low MMIO**.
    - **Defined by REMAPBASE/REMAPLIMIT registers in Memory Controller PCIe config. space**.
    - **MC remaps Reclaim Window access to DRAM below 4GB (above “Top Of Low DRAM”)**.
  - **If not locked, OS malware can reprogram target of reclaim to overlap with SMRAM**.
  - **Preventing & Detecting Xen Hypervisor Subversions**.
  - **BIOS Has to Lock Down Memory Map Registers including REMAP*, TOLUD/TOUUD**.
  - **Check with chipsec_main --module remap**.

- **Memory Remapping: Normal Memory Map**:
  - **Low MMIO Range, TOLUD, 4GB, SMRAM, REMAPBASE, REMAPLIMIT**.

- **Memory Remapping: SMRAM Remapping Attack**:
  - **Low MMIO Range, TOLUD, 4GB, SMRAM, REMAPBASE, REMAPLIMIT**.

This document provides a comprehensive overview of the vulnerabilities and attacks targeting both legacy BIOS and UEFI, along with the necessary mitigations and tools to detect and prevent these attacks.