Summary of Attacks Against  
BIOS and Secure Boot 
Yuriy Bulygin, John Loucaides, Andrew Furtak, 
Oleksandr Bazhaniuk, Alexander Matrosov 
Intel Security 
In The Beginning 
Was The Legacy BIOS.. 
Legacy BIOS 
1.
CPU Reset vector in BIOS ‟ROM‟ (Boot Block)  
2.
Basic CPU, chipset initialization  
3.
Initialize Cache-as-RAM, load and run from cache  
4.
Initialize DIMMs, create address map..  
5.
Enumerate PCIe devices..  
6.
Execute Option ROMs on expansion cards  
7.
Load and execute MBR  
8.
2nd Stage Boot Loader  OS Loader  OS kernel 
Also Technical Note: UEFI BIOS vs. Legacy BIOS, Advantech 
Then World Moved to UEFI.. 
UEFI Boot 
From Secure Boot, Network Boot, Verified Boot, oh my and almost every publication on UEFI 
UEFI [Compliant] Firmware 
SEC 
Pre-EFI 
Init (PEI) 
Driver 
Exec Env 
(DXE) 
Boot Dev 
Select (BDS) 
Runtime / OS 
S-CRTM; Init caches/MTRRs; Cache-as-RAM (NEM); Recovery; TPM Init 
S-CRTM: Measure DXE/BDS 
Early CPU/PCH Init 
Memory (DIMMs, DRAM) Init, SMM Init 
Continue initialization of platform & devices 
Enum FV, dispatch drivers (network, I/O, service..) 
Produce Boot and Runtime Services 
Boot Manager (Select Boot Device) 
EFI Shell/Apps; OS Boot Loader(s) 
ExitBootServices. Minimal UEFI services (Variable) 
ACPI, UEFI SystemTable, SMBIOS table  
CPU Reset 
Signed BIOS Update & OS Secure Boot 
Hardware 
I/O 
Memory 
Network 
Graphics 
UEFI DXE Core / Dispatcher 
UEFI OS Loaders (winload.efi, winresume.efi) 
System Firmware (SEC/PEI) 
UEFI 
OROM 
UEFI 
Boot Loader 
Bootx64.efi 
Bootmgfw.efi 
Signed 
BIOS 
Update 
UEFI 
OROM 
UEFI 
App 
UEFI 
App 
DXE 
Driver 
DXE 
Driver 
OS Kernel / Early Launch Anti-Malware (ELAM) 
UEFI 
Secure 
Boot 
OS Driver 
OS Driver 
Windows 8 
Secure 
Boot 
Attacks Against Both Of These.. 
BIOS Attack Surface: SPI Flash Protection 
System 
FW/BIOS 
SPI Flash 
Protection 
BIOS 
Update 
SMRAM 
Protection 
Hardware 
Config. 
SMI 
Handlers 
Secure 
Boot 
BIOS 
Settings 
(NVRAM, 
Variables) 
… 
SPI Flash Write Protection 
• Often still not properly enabled on many systems 
• SMM based write protection of entire BIOS region is often not used: 
BIOS_CONTROL[SMM_BWP] 
• If SPI Protected Ranges (mode agnostic) are used (defined by PR0-
PR4 in SPI MMIO), they often don‟t cover entire BIOS & NVRAM 
• Some platforms use SPI device specific WP protection but only for 
boot block/startup code or SPI Flash descriptor region 
• Persistent BIOS Infection (used coreboot‟s flashrom on legacy BIOS) 
• Evil Maid Just Got Angrier: Why FDE with TPM is Not Secure on Many Systems 
• BIOS Chronomancy: Fixing the Static Root of Trust for Measurement 
• A Tale Of One Software Bypass Of Windows 8 Secure Boot 
• Mitigation:  BIOS_CONTROL[SMM_BWP] = 1 and SPI PRx 
•chipsec_main --module common.bios_wp 
• Or Copernicus from MITRE  
SPI Flash (BIOS) Write Protection is Still a Problem 
Checking Manually.. 
Windows: 
RWEverything  
Linux: 
setpci -s 00:1F.0 DC.B 
Better Way to Check If Your BIOS Is Write-Protected 
[*] running module: chipsec.modules.common.bios_wp 
[x][ ======================================================================= 
[x][ Module: BIOS Region Write Protection 
[x][ ======================================================================= 
[*] BIOS Control = 0x02 
    [05] SMM_BWP = 0 (SMM BIOS Write Protection) 
    [04] TSS     = 0 (Top Swap Status) 
    [01] BLE     = 1 (BIOS Lock Enable) 
    [00] BIOSWE  = 0 (BIOS Write Enable) 
[!] Enhanced SMM BIOS region write protection has not been enabled (SMM_BWP is not used) 
[*] BIOS Region: Base = 0x00500000, Limit = 0x007FFFFF 
SPI Protected Ranges 
------------------------------------------------------------ 
PRx (offset) | Value    | Base     | Limit    | WP? | RP? 
------------------------------------------------------------ 
PR0 (74)     | 87FF0780 | 00780000 | 007FF000 | 1   | 0  
PR1 (78)     | 00000000 | 00000000 | 00000000 | 0   | 0  
PR2 (7C)     | 00000000 | 00000000 | 00000000 | 0   | 0  
PR3 (80)     | 00000000 | 00000000 | 00000000 | 0   | 0  
PR4 (84)     | 00000000 | 00000000 | 00000000 | 0   | 0  
[!] SPI protected ranges write-protect parts of BIOS region (other parts of BIOS can be 
modified) 
[!] BIOS should enable all available SMM based write protection mechanisms or configure 
SPI protected ranges to protect the entire BIOS region 
[-] FAILED: BIOS is NOT protected completely 
# chipsec_main.py --module common.bios_wp 
SPI Flash & BIOS Is Not Write Protected 
Demo 
(Insecure SPI Flash Protection) 
From Analytics, and Scalability, and UEFI Exploitation by Teddy Reed 
Patch attempts to enable BIOS write protection (sets BIOS_CONTROL[BLE]). 
Picked up by Subzero 
SPI Flash Write Protection 
• Some systems write-protect BIOS by disabling BIOS Write-Enable 
(BIOSWE) and setting BIOS Lock Enable (BLE) but don‟t use SMM 
based write-protection BIOS_CONTROL[SMM_BWP] 
• SMI event is generated when Update SW writes BIOSWE=1 
• Possible attack against this configuration is to block SMI events 
• E.g. disable all chipset sources of SMI: clear SMI_EN[GBL_SMI_EN] if 
BIOS didn‟t lock SMI config: Setup for Failure: Defeating SecureBoot 
• Another variant is to disable specific TCO SMI source used for 
BIOSWE/BLE (clear SMI_EN[TCO_EN] if BIOS didn‟t lock TCO config.) 
• Mitigation:  BIOS_CONTROL[SMM_BWP] = 1 and lock SMI config 
•chipsec_main --module common.bios_smi 
SMI Suppression Attack Variants 
Are All Required SMIs Enabled and Locked? 
[*] running module: chipsec.modules.common.bios_smi 
[x][ ======================================================================= 
[x][ Module: SMI Events Configuration 
[x][ ======================================================================= 
[-] SMM BIOS region write protection has not been enabled (SMM_BWP is not used) 
[*] PMBASE (ACPI I/O Base) = 0x0400 
[*] SMI_EN (SMI Control and Enable) register [I/O port 0x430] = 0x00002033 
    [13] TCO_EN (TCO Enable)            = 1 
    [00] GBL_SMI_EN (Global SMI Enable) = 1 
[+] All required SMI events are enabled 
[*] TCOBASE (TCO I/O Base) = 0x0460 
[*] TCO1_CNT (TCO1 Control) register [I/O port 0x468] = 0x1800 
    [12] TCO_LOCK = 1 
[+] TCO SMI configuration is locked 
[*] GEN_PMCON_1 (General PM Config 1) register [BDF 0:31:0 + 0xA0] = 0x0A14 
    [04] SMI_LOCK = 1 
[+] SMI events global configuration is locked 
[+] PASSED: All required SMI sources seem to be enabled and locked! 
SPI Flash Write Protection 
• Some BIOS rely on SPI Protected Range (PR0-PR4 registers in SPI 
MMIO) to provide write protection of regions of SPI Flash 
• SPI Flash Controller configuration including PRx has to be locked 
down by BIOS via Flash Lockdown 
• If BIOS doesn‟t lock SPI Controller configuration (by setting 
FLOCKDN bit in HSFSTS SPI MMIO register), malware can disable 
SPI protected ranges re-enabling write access to SPI Flash 
•chipsec_main --module common.spi_lock 
Locking SPI Flash Configuration 
Is SPI Flash Configuration Locked? 
[+] imported chipsec.modules.common.spi_lock 
[x][ ======================================================================= 
[x][ Module: SPI Flash Controller Configuration Lock 
[x][ ======================================================================= 
[*] HSFSTS register = 0x0004E008 
    FLOCKDN = 1 
[+] PASSED: SPI Flash Controller configuration is locked 
BIOS Attack Surface: BIOS Update 
System 
FW/BIOS 
SPI Flash 
Protection 
BIOS 
Update 
SMRAM 
Protection 
Hardware 
Config. 
SMI 
Handlers 
Secure 
Boot 
BIOS 
Settings 
(NVRAM, 
Variables) 
… 
Legacy BIOS Update and Secure Boot 
• Mebromi malware includes BIOS infector & MBR bootkit 
components 
• Patches BIOS ROM binary injecting malicious ISA Option 
ROM with legitimate BIOS image mod utility 
• Triggers SW SMI 0x29/0x2F to erase SPI flash then write 
patched BIOS binary 
Signed BIOS Updates Are Rare 
• No concept of Secure or Verified Boot 
• Wonder why TDL4 and likes flourished? 
No Signature Checks of OS boot loaders (MBR) 
UEFI BIOS Update Problems 
• Unsigned sections within BIOS update (e.g. boot splash 
logo BMP image) 
• BIOS displayed the logo before SPI Flash write-
protection was enabled 
• EDK ConvertBmpToGopBlt() integer overflow followed by 
memory corruption during DXE while parsing BMP image 
• Copy loop overwrote #PF handler and triggered #PF 
• Attacking Intel BIOS 
Parsing of Unsigned BMP Image in UEFI FW Update Binary 
UEFI BIOS Update Problems 
• Legacy BIOS with signed BIOS update 
• OS schedules BIOS update placing new BIOS image in 
DRAM split into RBU packets 
• Upon reboot, BIOS Update SMI Handler reconstructs BIOS 
image from RBU packets in SMRAM and verifies signature 
• Buffer overflow (memcpy with controlled size/dest/src) 
when copying RBU packet to a buffer with reconstructed 
BIOS image 
• BIOS Chronomancy: Fixing the Core Root of Trust for Measurement 
• Defeating Signed BIOS Enforcement 
RBU Packet Parsing Vulnerability 
BIOS Attack Surface: SMRAM Protection 
System 
FW/BIOS 
SPI Flash 
Protection 
BIOS 
Update 
SMRAM 
Protection 
Hardware 
Config. 
SMI 
Handlers 
Secure 
Boot 
BIOS 
Settings 
(NVRAM, 
Variables) 
… 
Problems With HW Configuration/Protections 
• D_LCK bit locks down Compatible SMM space (a.k.a. CSEG) 
configuration (SMRAMC) 
• SMRAMC[D_OPEN]=0 forces access to legacy SMM space 
decode to system bus rather than to DRAM where SMI 
handlers are when CPU is not in System Management 
Mode (SMM) 
• When D_LCK is not set by BIOS, SMM space decode can be 
changed to open access to CSEG when CPU is not in SMM: 
Using CPU SMM to Circumvent OS Security Functions 
• Also Using SMM For Other Purposes 
• chipsec_main –-module common.smm 
Unlocked Compatible/Legacy SMRAM 
Compatible SMM Space: Normal Decode 
0xBFFFF 
Compatible SMRAM  (CSEG) 
SMM access to 
CSEG is decoded to 
DRAM, non-SMM 
access is sent to 
system bus 
0xA0000 
Non SMM 
access 
SMRAMC [D_LCK] = 1 
SMRAMC [D_OPEN] = 0 
Compatible SMM Space: Unlocked 
0xBFFFF 
Compatible SMRAM  (CSEG) 
Non-SMM access to 
CSEG is decoded to 
DRAM where SMI 
handlers can be 
modified 
0xA0000 
Non SMM 
access 
SMRAMC [D_LCK] = 0 
SMRAMC [D_OPEN] = 1 
Is Compatible SMRAM Locked? 
[+] imported chipsec.modules.common.smm 
[x][ ================================================================= 
[x][ Module: SMM memory (SMRAM) Lock 
[x][ ================================================================= 
[*] SMRAM register = 0x1A ( D_LCK = 1, D_OPEN = 0 ) 
[+] PASSED: SMRAM is locked 
Problems With HW Configuration/Protections 
• CPU executes from cache if memory type is cacheable 
• Ring0 exploit can make SMRAM cacheable (variable MTRR) 
• Ring0 exploit can then populate cache-lines at SMBASE with 
SMI exploit code (ex. modify SMBASE) and trigger SMI 
• CPU upon entering SMM will execute SMI exploit from cache 
• Attacking SMM Memory via Intel Cache Poisoning 
• Getting Into the SMRAM: SMM Reloaded 
• CPU System Management Range Registers (SMRR) forcing UC 
and blocking access to SMRAM when CPU is not in SMM 
• BIOS has to enable SMRR 
• chipsec_main –-module common.smrr 
SMRAM “Cache Poisoning” Attacks 
Is SMRAM Exposed To Cache Poisoning Attack? 
[*] running module: chipsec.modules.common.smrr 
[x][ ======================================================================= 
[x][ Module: CPU SMM Cache Poisoning / SMM Range Registers (SMRR) 
[x][ ======================================================================= 
[+] OK. SMRR are supported in IA32_MTRRCAP_MSR 
[*] Checking SMRR Base programming.. 
[*] IA32_SMRR_BASE_MSR = 0x00000000BD000006 
    BASE    = 0xBD000000 
    MEMTYPE = 6 
[+] SMRR Memtype is WB 
[+] OK so far. SMRR Base is programmed 
[*] Checking SMRR Mask programming.. 
[*] IA32_SMRR_MASK_MSR = 0x00000000FF800800 
    MASK    = 0xFF800000 
    VLD     = 1 
[+] OK so far. SMRR are enabled in SMRR_MASK MSR 
[*] Verifying that SMRR_BASE/MASK have the same values on all logical CPUs.. 
[CPU0] SMRR_BASE = 00000000BD000006, SMRR_MASK = 00000000FF800800 
[CPU1] SMRR_BASE = 00000000BD000006, SMRR_MASK = 00000000FF800800 
[CPU2] SMRR_BASE = 00000000BD000006, SMRR_MASK = 00000000FF800800 
[CPU3] SMRR_BASE = 00000000BD000006, SMRR_MASK = 00000000FF800800 
[+] OK so far. SMRR MSRs match on all CPUs 
[+] PASSED: SMRR protection against cache attack seems properly configured 
Problems With HW Configuration/Protections 
• Remap Window is used to reclaim DRAM range below 4Gb 
“lost” for Low MMIO 
• Defined by REMAPBASE/REMAPLIMIT registers in Memory 
Controller PCIe config. space 
• MC remaps Reclaim Window access to DRAM below 4GB 
(above “Top Of Low DRAM”) 
• If not locked, OS malware can reprogram target of reclaim to 
overlap with SMRAM (or something else) 
• Preventing & Detecting Xen Hypervisor Subversions 
• BIOS has to lock down Memory Map registers including 
REMAP*, TOLUD/TOUUD 
• chipsec_main --module remap 
SMRAM Memory Remapping/Reclaim Attack 
Memory Remapping: Normal Memory Map 
Memory Reclaim/Remap 
Range 
Low MMIO Range 
TOLUD 
4GB 
SMRAM  
REMAPBASE 
REMAPLIMIT 
Access is 
remapped to 
DRAM range „lost‟ 
to MMIO (memory 
reclaimed) 
Access 
Memory Remapping: SMRAM Remapping Attack 
Memory Reclaim/Remap 
Range 
Low MMIO Range 
TOLUD 