### Malware Classification and Future Work

To classify a sample as unique, we use the MD5 sum. Consequently, 1136 different samples are detected as Worm.Padobot.M.

### 4. Future Work

In this section, we outline potential future work in the areas of Nepenthes and large-scale honeynet deployments. An extension of the Nepenthes platform to support UDP-based exploits is straightforward. Most of these exploits involve "single-shot" attempts that send a single UDP packet. Therefore, it is only necessary to capture and analyze the payload; no service emulation is required. However, if the exploit requires interaction with the honeypot, we can use the same concept as for TCP-based exploits: emulate only the necessary parts to trick the exploit.

The current Nepenthes platform is another step towards an automated system to effectively stop remote control networks. Such networks, like botnets, are used by attackers to coordinate automated activities, such as sending commands to a large number of compromised machines. The process of stopping such a network is illustrated in Figure 6. With Nepenthes, we can now automate Step 1 to a high degree, allowing the platform to collect malware propagating within a network without supervision. We are currently working on Step 2, which involves an automated mechanism to extract sensitive information from a given binary. Honeypots can partially automate this step, and we are exploring sandbox-like techniques to extract this information during runtime. Static binary analysis is also an option, but it is difficult to automate. Step 3, outlined in [6], involves impersonating a legal victim to infiltrate the network, study the attacker's techniques, and gather more information about other victims or new trends. Finally, Step 4 can be partially automated using techniques to disrupt communication between victims and the remote control server, or to shut down the main server itself [8]. This step requires further research but appears viable for high-degree automation. The entire process would allow us to proactively defend against such attacks. An automated system is desirable due to the growing threat of these attacks within the attacker community.

We are currently deploying a Network Intrusion Detection System (NIDS) based on Nepenthes. In collaboration with SurfNET, we aim to explore feasible ways of using honeypots as a new kind of IDS. The goals of this project are twofold: first, to understand the types and amount of malicious traffic within a LAN and to stop the spread of worms and other malware. Literature in this field suggests several ways to achieve this goal with honeypots [14]. Second, the solution must be scalable and easy to manage and maintain, ideally with zero-maintenance of individual sensors, a feature lacking in existing solutions. Our current experience shows that Nepenthes scales well to thousands of honeypots with just one physical machine. A hierarchical setup can distribute load for even larger setups. Nepenthes can also scale to high-speed networks due to its limited memory and moderate processing requirements. Furthermore, the proposed NIDS should have almost no false positives. To date, we have not encountered any false positives with our Nepenthes setup, making this goal achievable. False negatives generate log entries, and all captured information about unhandled network traffic is saved for analysis.

Finally, an empirical analysis of the effectiveness of a distributed Nepenthes setup is desirable. Nepenthes offers the possibility of distributed deployment, and recent studies suggest that distributed worm monitoring has several advantages regarding detection time [15]. These results, obtained from captured packet traces, could be verified with live data using Nepenthes. Such a study would also reveal the extent to which specific malware spreads locally.

### 5. Conclusion

In this paper, we introduced the Nepenthes platform, a new honeypot-based system specialized in large-scale malware collection. Nepenthes combines the scalability of low-interaction honeypots with a high degree of expressiveness by emulating only the vulnerable parts of a service. This leads to an efficient and effective solution with many advantages over other honeypot-based solutions. The main advantage is flexibility: while ordinary honeypot solutions use a fixed configuration, Nepenthes can be exploited by a wide array of exploits due to its flexible emulation process. It can determine the correct offset at runtime to get successfully exploited. Additional features like virtual filesystem and shell emulation further enhance scalability. With just one physical machine, we can listen to more than 16,000 IP addresses in parallel.

We have collected millions of malware samples currently spreading in the wild. An examination of over 14,000 unique and valid binaries revealed that current anti-virus engines have limitations and fail to detect all malware. Additionally, we presented ideas on how Nepenthes could be used as the foundation of an automated system to stop botnets or as part of a next-generation NIDS.

### References

1. K. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis, E. Markatos, and A. Keromytis. Detecting Targeted Attacks Using Shadow Honeypots. In Proceedings of the 14th USENIX Security Symposium, 2005.
2. Michael Bailey, Evan Cooke, Farnam Jahanian, Jose Nazario, and David Watson. The Internet Motion Sensor: A Distributed Blackhole Monitoring System. In Proceedings of the 12th Annual Network and Distributed System Security Symposium (NDSS 05), 2005.
3. Edward Balas and Camilo Viecco. Towards a Third Generation Data Capture Architecture for Honeynets. In Proceedings of the 6th IEEE Information Assurance Workshop, West Point, 2005. IEEE.
4. Team Cymru: The Darknet Project. Internet: http://www.cymru.com/Darknet/, Accessed: 2006.
5. David Dagon, Cliff Zou, and Wenke Lee. Modeling Botnet Propagation Using Time Zones. In Proceedings of the 13th Annual Network and Distributed System Security Symposium (NDSS 06), 2006.
6. Felix Freiling, Thorsten Holz, and Georg Wicherski. Botnet Tracking: Exploring a Root-Cause Methodology to Prevent Distributed Denial-of-Service Attacks. In 10th European Symposium On Research In Computer Security, ESORICS05, Milano, Italy, September 12-14, 2005, Proceedings, Lecture Notes in Computer Science. Springer, 2005.
7. Thorsten Holz. A Short Visit to the Bot Zoo. IEEE Security & Privacy, 3(3):76–79, 2005.
8. Thorsten Holz. Spying With Bots. USENIX ;login:, 30(6):18–23, 2005.
9. Xuxian Jiang and Dongyan Xu. Collapsar: A VM-Based Architecture for Network Attack Detention Center. In Proceedings of 13th USENIX Security Symposium, 2004.
10. Bill McCarty. Automated Identity Theft. IEEE Security & Privacy, 1(5):89–92, 2003.
11. David Moore, Colleen Shannon, Geoffrey M. Voelker, and Stefan Savage. Network Telescopes. Technical Report TR-2004-04, CAIDA, 2004.
12. David Moore, Geoffrey M. Voelker, and Stefan Savage. Inferring Internet Denial-of-Service Activity. In Proceedings of the 10th USENIX Security Symposium, August 2001.
13. Georgios Portokalidis. Argos: An Emulator for Capturing Zero-Day Attacks. Internet: http://www.few.vu.nl/~porto/argos/, Accessed: 2006.
14. Niels Provos. A Virtual Honeypot Framework. In Proceedings of 13th USENIX Security Symposium, pages 1–14, 2004.
15. Moheeb Abu Rajab and Andreas Terzis. On the Effectiveness of Distributed Worm Monitoring. In Proceedings of the 14th USENIX Security Symposium, 2005.
16. Yoichi Shinoda, Ko Ikai, and Motomu Itoh. Vulnerabilities of Passive Internet Threat Monitors. In Proceedings of the 14th USENIX Security Symposium, 2005.
17. Stuart Staniford, David Moore, Vern Paxson, and Nicholas Weaver. The Top Speed of Flash Worms. In ACM Workshop on Rapid Malcode (WORM), 2004.
18. Symantec. Mantrap. Internet: http://www.symantec.com/, Accessed: 2006.
19. Nicolas Vanderavero, Xavier Brouckaert, Olivier Bonaventure, and Baudouin Le Charlier. The HoneyTank: A Scalable Approach to Collect Malicious Internet Traffic. In Proceedings of the International Infrastructure Survivability Workshop, 2004.
20. Michael Vrable, Justin Ma, Jay Chen, David Moore, Erik Vandekieft, Alex C. Snoeren, Geoffrey M. Voelker, and Stefan Savage. Scalability, Fidelity, and Containment in the Potemkin Virtual Honeyfarm. In Proceedings of the ACM Symposium on Operating System Principles (SOSP), 2005.
21. Kathy Wang. Honeyclient. Internet: http://honeyclient.org, Accessed: 2006.
22. Yi-Min Wang, Doug Beck, Chad Verbowski, Shuo Chen, Sam King, Xuxian Jiang, and Roussi Roussev. Automated Web Patrol with Strider HoneyMonkeys: Finding Websites That Exploit Browser Vulnerabilities. In Proceedings of the 13th Network and Distributed System Security Symposium (NDSS 06), 2006.
23. Vinod Yegneswaran, Paul Barford, and Dave Plonka. On the Design and Use of Internet Sinks for Network Abuse Monitoring. In Proceedings of the 7th International Symposium on Recent Advances in Intrusion Detection (RAID), 2004.

### Automatic Handling of Protocol Dependencies and Reaction to 0-Day Attacks with ScriptGen Based Honeypots

**Corrado Leita, Marc Dacier, and Frederic Massicotte**

- **1 Institut Eurecom, Sophia Antipolis, France**
  - {leita, dacier}@eurecom.fr
- **2 Communications Research Centre, Ottawa, Canada**
  - PI:EMAIL

#### Abstract

Spitzner proposed classifying honeypots into low, medium, and high interaction ones. Several instances of low interaction exist, such as honeyd, and high interaction, such as GenII. Medium interaction systems, like ScriptGen and Role-Player, are as talkative as high interaction systems while limiting associated risks. This paper builds upon the work proposed on ScriptGen to automatically create honeyd scripts capable of interacting with attack tools without relying on any a-priori knowledge of the protocols involved. The main contributions are threefold: First, we propose a solution to detect and handle intra-protocol dependencies. Second, we address inter-protocol dependencies. Lastly, we show how, by modifying our initial refinement analysis, we can generate new scripts on the fly as new attacks (0-day) appear. As few as 50 attack samples, less than one per platform, are enough to produce a script that can enrich all platforms.

#### 1. Introduction

Honeypots are powerful systems for information gathering and learning. L. Spitzner defined a honeypot as “a resource whose value lies in being attacked or compromised.” Honeypots provide valuable information but do not fix anything. They are classified according to the degree an attacker can interact with the operating system.

High interaction honeypots use real operating systems, usually deployed through virtual emulators, ensuring reliable information but with high maintenance costs and substantial resource requirements. Low interaction honeypots, like honeyd, use simple programs to mimic real operating systems. While they are easier to deploy, they often lack the ability to handle complex protocols, limiting the length of conversations and the ability to discriminate between different types of activities.

ScriptGen aims to build protocol emulators in a completely automated and protocol-independent way. This paper presents significant improvements to ScriptGen, including algorithms to infer intra- and inter-protocol dependencies and a proxying algorithm to build training sets for new activities.

#### 2. State of the Art

ScriptGen uses bioinformatics algorithms to rebuild protocol semantics and raise training data to a higher level of abstraction. This allows building emulators for protocols with unknown specifications. RolePlayer, a similar approach, uses two cleaned and well-chosen scripts, giving semantic value to fields using additional information and heuristics. However, RolePlayer requires carefully chosen samples and human intervention, limiting its use for online creation of scripts. ScriptGen, on the other hand, analyzes statistically significant samples, minimizing false deductions and enabling automated learning of new activities.

A completely different approach is followed in the mw-collect project, which uses vulnerability modules to attract and analyze bots. This project has recently merged with the Nepenthes project.

#### 3. Main Concepts and Contributions

This paper introduces innovative algorithms to infer intra- and inter-protocol dependencies and a proxying algorithm to build training sets for new activities. These contributions significantly improve the emulation quality and enable automated learning of new activities.

#### 4. Novel Contributions to ScriptGen

- **Intra-Protocol Dependencies**: An algorithm to infer dependencies in the content of protocol messages without requiring knowledge of protocol semantics.
- **Inter-Protocol Dependencies**: An algorithm to generate relations in the interaction of multiple TCP sessions.
- **Proxying Algorithm**: A method to build training sets for new activities, enabling on-the-fly generation of new scripts.

#### 5. Experimental Validation

Experimental validation shows that the new ScriptGen emulators can carry on complete conversations with clients, significantly improving the quality of emulation.

#### 6. Conclusion

This paper presents significant advancements in the ScriptGen framework, enabling the automatic handling of protocol dependencies and reaction to 0-day attacks. These improvements make ScriptGen a more robust and flexible tool for building protocol emulators.