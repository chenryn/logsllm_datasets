口或入口使用约定，或者两者都使用，如这个例子所示。
Program类的Main方法与前面类似；创建Program的一个新实例，因为Calculator属性
是这个类的一个实例，然后调用Bootstrap和Run方法（代码文件
ConventionBasedSample/SimpleHost /Program.cs）：
    public static void Main()
    {
      var p = new Program();
      p.Bootstrap();
      p.Run();
    }
Bootstrap方法现在创建一个新的ConventionBuilder。ConventionBuilder派生于基类
AttributedModelBuilder；因此需要这个基类的任何地方都可以使用它。不使用Export特
性，给派生自ICalculator的类型定义约定规则，用ForTypesDerivedFrom和Export方法导出
ICalculator。ForTypesDerivedFrom返回一个PartConventionBuilder，它允许使用流利API来
继续部件的定义，在部件类型上调用Export方法。不使用Import特性，而使用Program类的
约定规则导入ICalculator类型的属性。属性使用lambda表达式定义（代码文件
ConventionBasedSample/SimpleHost/Program.cs）：
    public void Bootstrap()
    {
      var conventions = new ConventionBuilder();
      conventions.ForTypesDerivedFrom()
        .Export();
      conventions.ForType()
        .ImportProperty(p => p.Calculator);
      // etc.
    }
定义了约定规则后，实例化ContainerConfiguration类。通过容器配置使用
ConventionsBuilder定义的约定，使用了方法WithDefaultConventions。
WithDefaultConventions需要派生自基类AttributedModelProvider的参数，即
ConventionBuilder类。在定义了要使用的约定后，可以像之前那样使用WithPart方法，指
定部件中应当应用约定的部分。为了使之比以前更加灵活，现在WithAssemblies方法用于
指定应该应用的程序集。过滤传递给这个方法的所有程序集，得到派生自ICalculator接口
的类型，来应用出口。容器配置后，像前面的示例那样创建CompositionHost （代码文件
ConventionBasedSample/SimpleHost/Program.cs）：
    public void Bootstrap()
    {
      // etc.
      var configuration = new ContainerConfiguration()
        .WithDefaultConventions(conventions)
        .WithAssemblies(GetAssemblies("c:/addins"));
      using (CompositionHost host = configuration.CreateContainer())
      {
        host.SatisfyImports(this, conventions);
      }
    }
GetAssemblies方法从给定的目录中加载所有的程序集（代码文件
ConventionBasedSample/SimpleHost/ Program.cs）：
    private IEnumerable GetAssemblies(string path)
    {
      IEnumerable files = Directory.EnumerateFiles(path, "＊.dll");
      var assemblies = new List();
      foreach (var file in files)
      {
        Assembly assembly = Assembly.LoadFile(file);
        assemblies.Add(assembly);
      }
      return assemblies;
如上所示，ConventionBuilder是基于约定的部件注册和Microsoft 
Composition的核
心，它使用一个流畅的API，还提供了特性所带来的所有灵活性。约定通过ForType可以
应用于特定的类型，对于派生于基类或实现了接口的类型，
ForTypesDerivedFrom.ForTypesMatching允许指定灵活的谓词。例如，
ForTypesMatching（t 
=> 
t.Name.EndsWith（"ViewModel"））把一个约定应用于名称以
ViewModel结尾的所有类型。
选择类型的方法返回一个PartBuilder。有了PartBuilder，就可以定义出口和入口，并
应用元数据。PartBuilder提供了几个方法来定义出口：Export会导出到特定的类型上，
ExportInterfaces会导出一系列接口，ExportProperties会导出属性。使用导出方法导出多个
接口或属性，就可以应用谓词，进一步定义选择。这也适用于导入属性或构造函数，其方
法分别是ImportProperty、ImportProperties和SelectConstructors。
简要介绍了使用Microsoft Composition、特性和约定的两种方式后，下面详细介绍使
用一个Windows应用程序来托管部件。
26.3 定义协定
下面的示例应用程序扩展了第一个应用程序。宿主应用程序是一个WPF应用程序和
UWP应用程序，它加载计算器部件以实现计算功能，还加载其他插件，把它们自己的用
户界面引入宿主。
  注意： 编写UWP（Universal Windows Platform）和WPF应用程序的更多信息
可参见第29章到第36章。
UICalculator解决方案略大，至少是对一本书而言。它演示了使用Microsoft
Composition与多个技术——UWP和WPF。当然，也可以关注其中的一个技术，仍然使用
示例应用程序的很多功能。解决方案的项目及其依赖关系如图26-3所示。
WPFCalculatorHost和UWPCalculatorHost项目加载和管理部件。与以前一样，定义
SimpleCalculator，并提供一些方法。与前面计算器示例不同的是，这个部件利用了另一个
部件AdvancedOperations。提供用户界面的其他部件使用FuelEconomy和
TemperatureConversion定义。用户界面用WPF和UWP定义，但常见的功能在共享项目中定
义。
图26-3
下面是需要的项目、引用和名称空间：
CalculatorContract （类库）
名称空间
    System.Collections.Generic
CalculatorUtils （类库）
引用
    System.Composition.AttributedModel
名称空间
    System
    System.Collections.Generic
    System.ComponentModel
    System.Composition
    System.Runtime.CompilerServices
SimpleCalculator （类库）
引用
    System.Composition.AttributedModel
名称空间
    System
    System.Collections.Generic
    System.Composition
AdvancedOperations （类库）
引用
    System.Composition.AttributedModel
名称空间
    System.Composition
    System.Threading.Tasks
Fuel Economy and Temp. Conversion UWP （Universal Windows类库）
引用
    System.Composition.AttributedModel
名称空间
    System.Collections.Generic
    System.Composition
    Windows.UI.Xaml.Controls
Fuel Economy and Temp. Conversion WPF （WPF类库）
引用
    System.Composition.AttributedModel
名称空间
    System.Collections.Generic
    System.Composition
    System.Windows.Controls
Calculator View Models （类库）
引用
    System.Composition.AttributedModel
    System.Composition.Hosting
    System.Composition.TypedParts
名称空间
    System
    System.Collections.Generic
    System.Collections.ObjectModel
    System.Composition
    System.Composition.Hosting
    System.Linq
    System.Windows.Input
WPF Calculator Host （WPF应用程序）
引用
    CalculatorContract
    SimpleCalculator
    System.Composition.AttributedModel
    System.Composition.Hosting
    System.Composition.TypedParts
名称空间
    System
    System.Globalization
    System.IO
    System.Windows
    System.Windows.Controls
    System.Windows.Data
    System.Windows.Media.Imaging
对于计算，使用前面定义的相同协定：ICalculator和IOperation接口。添加的另一个协
定是ICalculatorExtension。这个接口定义了可由宿主应用程序使用的UI属性。该属性的get
访问器返回一个FrameworkElement。属性类型定义为object，用这个接口同时支持WPF和
UWP应用程序。在WPF中，FrameworkElement在名称空间System.Windows中定义；在
UWP中，它在名称空间Windows.UI.Xaml中定义。把属性的类型定义为object，还允许不
把WPF或UWP相关的依赖关系添加到库中。
UI属性允许插件返回派生自FrameworkElement的任何用户界面元素，并在宿主应用程
序中显示为用户界面（代码文件UICalculator 
/CalculatorContract 
/
ICalculatorExtension.cs）：
    public interface ICalculatorExtension
    {
      object UI { get; }
    }
.NET接口用于去除在实现该接口的插件和使用该接口的插件之间的依赖性。这
样，.NET接口也是用于Composition的一个优秀协定，去除了在宿主应用程序和插件之间
的依赖性。如果接口在一个单独的程序集中定义，与CalculatorContract程序集一样，宿主
应用程序和插件就没有直接的依赖关系。然而，宿主应用程序和插件仅引用协定程序集。
从Composition的角度来看，根本不需要接口协定。协定可以是一个简单的字符串。
为了避免与其他协定冲突，字符串名应包含名称空间名，例如，
Wrox.ProCSharp.Composition.SampleContract，如下面的代码片段所示。这里的Foo类使用
Export特性导出，并把一个字符串传递给该特性，而不是传递给接口。
    [Export("Wrox.ProCSharp.Composition.SampleContract")]
    public class Foo
    {
      public string Bar()
      {
        return "Foo.Bar";
      }
    }
把协定用作字符串的问题是，类型提供的方法、属性和事件都不是强定义的。调用者
或者需要引用类型Foo才能使用它，或者使用.NET反射来访问其成员。C# 
4的dynamic关
键字使反射更便于使用，在这种情况下非常有帮助。
宿主应用程序可以使用dynamic类型导入Wrox.ProCSharp.Composition.SampleContract
协定：
    [Import("Wrox.ProCSharp.MEF.SampleContract")]
    public dynamic Foo { get; set; }
有了dynamic关键字，Foo属性就可以用于直接访问Bar（）方法。这个方法的调用会
在运行期间解析：
    string s = Foo.Bar();
协定名和接口也可以联合使用，定义只有接口和协定同名时才能使用的协定。这样，
就可以对于不同的协定使用同一个接口。
  注意： dynamic类型参见第16章。
26.4 导出部件
在前面的例子中，包含了SimpleCalculator部件，它导出了Calculator类型及其所有的
方法和属性。下面的例子也包含SimpleCalculator，其实现方式与前面相同，但还导出了另
外两个部件TemperatureConversion和FuelEconomy。这些部件为宿主应用程序提供了UI。
26.4.1 创建部件
WPF用户控件库TemperatureConversionWPF定义了如图26-4所示的用户界面。这个控
件提供了摄氏、华氏和绝对温度之间的转换。在第一和第二个组合框中，可以选择转换的
源和目标。Calculate按钮会启动执行转换的计算过程。
图26-4
在UWP中，还定义了一个库TemperatureConversionUWP。这两个项目分享共享库
TemperatureConversionShared中的共同代码。这些UI插件使用的所有C#代码都在这个共享
项目中。但UI的XAML代码不同，它在WPF和UWP项目中定义。
该用户控件为温度转换提供了一个简单的实现方式。TempConversionType枚举定义了
这个控件可能进行的不同转换。两个组合框中显示的枚举值绑定到
TemperatureConversionViewModel的TemperatureConversionTypes属性上。
ToCelsiusFrom（）方法把参数t从其原始值转换为摄氏值。温度的源类型用第二个参数
TempConversionType定义。FromCelsiusTo（）方法把摄氏值转换为所选的温度值。
OnCalculate（）方法赋予Calculate命令，它调用ToCelsiusFrom（）和FromCelsiusTo（）
方法，根据用户选择的转换类型执行转换（代码文件
UICalculator/TemperatureConversionShared/TemperatureConversionViewModel.cs）。
    public enum TempConversionType
    {
      Celsius,
      Fahrenheit,
      Kelvin
    }
    public class TemperatureConversionViewModel: BindableBase
    {
      public TemperatureConversionViewModel()
      {
        CalculateCommand = new DelegateCommand(OnCalculate);
      }
      public DelegateCommand CalculateCommand { get; }
      public IEnumerable TemperatureConversionTypes =>
        Enum.GetNames(typeof(TempConversionType));
      private double ToCelsiusFrom(double t, TempConversionType conv)
      {
        switch (conv)
        {
          case TempConversionType.Celsius:
          return t;
          case TempConversionType.Fahrenheit:
          return (t-32) / 1.8;
          case TempConversionType.Kelvin:
          return (t-273.15);
          default:
          throw new ArgumentException("invalid enumeration value");
        }
      }
      private double FromCelsiusTo(double t, TempConversionType conv)
      {
        switch (conv)
        {
          case TempConversionType.Celsius:
          return t;
          case TempConversionType.Fahrenheit:
          return (t ＊ 1.8) + 32;
          case TempConversionType.Kelvin:
          return t + 273.15;
          default:
          throw new ArgumentException("invalid enumeration value");
        }
      }
      private string _fromValue;
      public string FromValue
      {
        get { return _fromValue; }
        set { SetProperty(ref _fromValue, value); }
      }
      private string _toValue;
      public string ToValue
      {
        get { return _toValue; }
        set { SetProperty(ref _toValue, value); }
      }
      private TempConversionType _fromType;
      public TempConversionType FromType
      {
        get { return _fromType; }
        set { SetProperty(ref _fromType, value); }
      }
      private TempConversionType _toType;
      public TempConversionType ToType
      {
        get { return _toType; }
        set { SetProperty(ref _toType, value); }