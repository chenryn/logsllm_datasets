# 如何利用自定义URL Scheme远程突破Mac

#### 译文声明
本文为翻译文章，原文来源于objective-see.com。具体内容表达及含义请以原文为准。

## 一、前言
在最近的几篇文章中，我们探讨了macOS系统中存在的漏洞或缺陷，这些漏洞使得恶意代码能够执行多种恶意操作，如绕过SIP（System Integrity Protection）、安装内核扩展、转储Keychain数据等。然而，这些攻击技术都需要恶意代码已经通过某种方式获取到目标系统上的初始执行权限。换句话说，这些技术属于本地攻击范畴，通常在攻击活动的第二阶段使用。

今天我们将讨论一种远程攻击技术，这种技术被恶意软件用于获取已打全补丁的macOS系统的初始访问权限，属于第一阶段攻击技术。结合之前介绍的各种第二阶段攻击技术，这种远程攻击方法可以优雅且有效地对macOS系统进行攻击。

> **注意**：
>
> 尽管这种远程攻击方法仍需一些用户交互，但它确实能够成功地针对具有安全意识的macOS用户。因此，大家需要警惕这种攻击方法。

8月30日，来自DarkMatter LLC的Taha Karim在[HITB会议](https://gsec.hitb.org/sg2018/)上发表了题为[“The Trails of WINDSHIFT APT”](https://gsec.hitb.org/sg2018/sessions/commsec-the-trails-of-windshift-apt/)的主题演讲，总结如下：

> WINDSHIFT APT是一个新发现的隐蔽网络间谍组织，专门针对政府工作人员。该组织拥有先进的钓鱼基础设施，能够支持钓鱼邮件和短信攻击，在侦察阶段持续跟踪目标，并通过伪造全球和本地服务平台，在凭证收集阶段欺骗目标用户。
>
> WINDSHIFT APT与其他APT组织不同之处在于，它专注于特定个体的间谍和监控活动，并且由于其惯用的攻击手段，很难对其追踪溯源。WINDSHIFT APT很少使用恶意软件攻击目标，Dark Matter LLC发现了该组织发起的几次攻击活动，并分析了相关的macOS恶意软件。此外，WINDSHIFT APT有一种独特的macOS感染技巧，滥用macOS的原生功能自动将恶意软件投递到目标。

演讲中提到的一个有趣点是，攻击者滥用了这种方法成功远程感染了中东某政府的Mac系统。

> **注意**：
>
> 本文不仅仅是简单重述Taha的演讲内容，而是在此基础上进一步深入分析这款恶意软件的感染机制：
>
> 1. 讨论macOS上的一些相关细节；
> 2. 提供某些PoC代码片段；
> 3. 讨论这种远程攻击方式的缓解措施。

## 二、Document Handler及URL Scheme

简而言之，WINDSHIFT APT组织滥用了自定义URL Scheme来远程感染macOS目标。尽管这一过程需要用户交互，但成本很低，并且一定程度上受攻击者控制。此外，已有成功的攻击案例（攻击中东的政府目标），表明用户交互并不是无法突破的屏障。

在macOS上，应用程序可以声明自己能够支持各种文档类型和/或自定义URL Scheme。例如，某个应用可能会声明：“如果用户尝试打开`foo`类型的文档或`bar` URL Scheme，我可以处理这种情况。” 这种场景在macOS上很常见。例如，当我们双击一个`.pdf`文件时，`Preview.app`会被启动来处理该文档；或者在浏览器中点击指向Mac App Store的链接时，`App Store.app`会被启动来处理这个请求。

不幸的是，Apple对Document Handler和自定义URL Scheme的实现方法决定了攻击者可以滥用这些功能。

> 从操作系统的角度来看，尽管文档处理程序和URL Scheme略有不同，但本质上是一样的（因此实现方法也非常相似）。

首先，我们快速了解一下Document Handler。我之前研究过这方面内容，并写过一篇介绍性文章。

在之前的[文章](https://objective-see.com/blog/blog_0x12.html)中，我分析了`Mac File Opener`这款广告软件，它滥用了自定义的文档处理程序来实现隐蔽的持久化。简而言之，这款恶意软件声明自己能够支持超过200种文件类型，一旦用户打开其中一种文件，恶意软件就会被操作系统自动启动来处理（理论上是显示）文档。这是一种非常耐心的持久化方法。

> **注意**：如果已经有程序注册了一种文件类型（如`.pdf`、`.html`等），则（据我所知）这种绑定关系无法被篡改。

这里有两个问题：一是`Mac File Opener`广告软件或其他应用如何声明自己能够支持哪些文件类型；二是操作系统如何处理并注册这些信息。我推荐大家阅读[这篇文章](https://objective-see.com/blog/blog_0x12.html)，其中详细回答了这两个问题，但我们也会在这里简单总结一下。

那么，应用程序如何告诉操作系统自己能够处理哪些文件类型？答案在于应用程序的`Info.plist`文件。前面提到，`Mac File Opener`支持超过200种文件类型，我们可以导出它的`Info.plist`文件：

在原始的`plist`文件中，这些信息存储在一个数组中（`CFBundleDocumentTypes`键）。根据Apple的说法：

> `CFBundleDocumentTypes`（iOS和OS X上的数组）包含一个字典数组，将一个或多个文档类型与具体应用关联起来。每个字典都是类型定义字典，包含用来定义文档的具体键。

例如，`Mac File Opener`中关于`.7z`（7Zip）文件类型的详细信息如下所示，请注意其中的`CFBundleTypeExtensions`键，对应的值为该广告软件声明的可以处理的文件扩展名：

```xml
<key>CFBundleDocumentTypes</key>
<array>
    <dict>
        <key>CFBundleTypeExtensions</key>
        <array>
            <string>7z</string>
        </array>
        <key>CFBundleTypeName</key>
        <string>DocumentType</string>
        <key>CFBundleTypeOSTypes</key>
        <array>
            <string>????</string>
        </array>
        <key>CFBundleTypeRole</key>
        <string>Viewer</string>
        <key>LSHandlerRank</key>
        <string>Alternate</string>
        <key>NSDocumentClass</key>
        <string>Document</string>
    </dict>
</array>
```

为了回答第二个问题，我们需要确定macOS如何处理这些文件的“注册”请求。在[“Click File, App Opens”](https://objective-see.com/blog/blog_0x12.html)这篇文章中提到，这是一个自动化过程，一旦应用保存到本地磁盘上就会执行该操作。简单总结如下：

1. 应用（或恶意软件）下载或保存到本地文件系统；
2. 该过程会导致一个`XPC`消息发送到launch services daemon (`lsd`)；
3. `lsd`守护进程解析该应用，提取并保存应用的“document handlers”信息到数据库中。

```sh
# fs_usage -w -f filesystem | grep Info.plist
open  /Users/user/Desktop/Mac File Opener.app/Contents/Info.plist  lsd.16457
fstat64  F=4  lsd.16457
read  F=4  B=0x18a97  lsd.16457
# /usr/libexec/lsd
...
(lldb) po $rsi
{ path = '/var/folders/np/85lyz_4545d5lz8wvy04xvlm0000gn/0//com.apple.LaunchServices-134501.csstore' }
```

我们可以使用`lsregister`（路径为`/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/`）来转储`lsd`的数据库。当使用`-dump`标志调用时，`lsregister`可以显示指定了“document handler”的所有应用，`lsd`会自动注册这些“document handler”。例如，我们可以看到其中包含`Mac File Opener`及其注册的文档（文件类型，如`.7z`等）：

```sh
$ lsregister -dump
...
Container mount state: mounted
bundle id: 2592
Mach-O UUIDs: 88225C07-0FDC-3875-A3B4-C5328E509B9E, 20A99135-975D-3A7B-A8DD-B7DF2CE428D0
path: /Users/user/Downloads/Mac File Opener.app
name: Mac File Opener
identifier: com.pcvark.Mac-File-Opener (0x80025f61)
executable: Contents/MacOS/Mac File Opener
--------------------------------------------------------    claim id: 31508
  name: DocumentType
  rank: Alternate
  roles: Viewer
  flags: doc-type
  bindings: .7z
...
```

一旦应用（或广告软件）自动注册了document handler，当用户尝试打开匹配的文档时，应用或广告软件就会被自动调用。

这个过程由`launch services framework`负责，更具体地说，是由`_LSBundleCopyOrCheckNode`方法（以及`_LSBundleCopyOrCheckNode_block_invoke`）负责匹配过程（查找与文档类型匹配的已注册的应用）然后执行已注册的应用：

```sh
(lldb) b ___LSBundleCopyOrCheckNode_block_invoke
...
(lldb) x/gx $rdx
0x700000115c48: 0x00007fd3b4a9c520
```

通过这种方式，恶意软件可以利用自定义URL Scheme和Document Handler实现远程感染。