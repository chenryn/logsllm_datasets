2107),” On Web-Security and -Insecurity blog, 2016, online, cit.
[2018-10-29]. [Online]. Available: https://web-in-security.blogspot.com/
2016/05/curious-padding-oracle-in-openssl-cve.html
[80] ——, “Systematic Fuzzing and Testing of TLS Libraries,” in Pro-
the 2016 ACM SIGSAC Conference on Computer and
ceedings of
Communications Security – CCS'16. ACM Press, 2016.
(cid:19)(cid:26)(cid:22)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
[81] S. Son and V. Shmatikov, “The Postman Always Rings Twice: Attacking
and Defending postMessage in HTML5 Websites,” in 20th Annual
Network and Distributed System Security Symposium, NDSS 2013, 2013.
[82] D. Springall, Z. Durumeric, and J. A. Halderman, “Measuring the
Security Harm of TLS Crypto Shortcuts,” in Proceedings of the 2016
ACM on Internet Measurement Conference - IMC '16. ACM, 2016.
[83] Synopsys, “The Heartbleed Bug (CVE-2014-0160),” 2014, online, cit.
[2018-10-29]. [Online]. Available: http://heartbleed.com/
[84] L. Valenta, D. Adrian, A. Sanso, S. Cohney, J. Fried, M. Hastings, J. A.
Halderman, and N. Heninger, “Measuring small subgroup attacks against
Difﬁe-Hellman,” in Proceedings 2017 Network and Distributed System
Security Symposium.
Internet Society, 2017.
[85] L. Valenta, N. Sullivan, A. Sanso, and N. Heninger, “In search of
CurveSwap: Measuring elliptic curve implementations in the wild,”
Cryptology ePrint Archive, Report 2018/298, 2018, https://eprint.iacr.
org/2018/298.
[86] T. van Goethem, P. Chen, N. Nikiforakis, L. Desmet, and W. Joosen,
“Large-Scale Security Analysis of the Web: Challenges and Findings,”
in Trust and Trustworthy Computing - 7th International Conference,
TRUST 2014. Proceedings, 2014, pp. 110–126.
[87] B. VanderSloot, J. Amann, M. Bernhard, Z. Durumeric, M. Bailey,
and J. A. Halderman, “Towards a Complete View of the Certiﬁcate
Ecosystem,” in Proceedings of the 2016 ACM on Internet Measurement
Conference, IMC 2016, 2016, pp. 543–549.
[88] S. Vaudenay, “Security Flaws Induced by CBC Padding – Applications
to SSL, IPSEC, WTLS...” in Advances in Cryptology – EUROCRYPT
2002. Springer Berlin Heidelberg, 2002, pp. 534–545.
[89] J. Vehent, “Security/Server Side TLS (version 4.1),” MozillaWiki, 2018,
online, cit. [2018-10-29]. [Online]. Available: https://wiki.mozilla.org/
Security/Server Side TLS#Recommended conﬁgurations
[90] L. Waked, M. Mannan, and A. Youssef, “To Intercept or Not
to
Intercept,” in Proceedings of the 2018 on Asia Conference on Computer
and Communications Security - ASIACCS '18. ACM Press, 2018.
[Online]. Available: https://doi.org/10.1145%2F3196494.3196528
[91] L. Weichselbaum, M. Spagnuolo, S. Lekies, and A. Janc, “CSP Is Dead,
Long Live CSP! On the Insecurity of Whitelists and the Future of
Content Security Policy,” in Proceedings of the 2016 ACM SIGSAC
Conference on Computer and Communications Security, 2016.
[92] M. West, “W3C Candidate Reccomendation: Mixed Content,” https://
www.w3.org/TR/mixed-content/, 2016.
[93] ——, “W3C Working Draft: Content Security Policy Level 3,” https:
//www.w3.org/TR/CSP3/, 2018.
[94] X. Zheng, J. Jiang, J. Liang, H. Duan, S. Chen, T. Wan, and N. Weaver,
“Cookies Lack Integrity: Real-World Implications,” in 24th USENIX
Security Symposium, USENIX Security 15, 2015, pp. 707–721.
A. Notable Out of Scope Attacks Against TLS
APPENDIX
Several vulnerabilities of TLS are not exploitable in the
wild, based on recent measurements or due to the conﬁguration
of modern clients.
Difﬁe-Hellman key establishment attacks (MITM attacks):
Static DH key exchange susceptible to small subgroup attacks
[84] is not supported by modern browsers and support for vul-
nerable static ECDH key exchange was removed in browsers
we target. Furthermore, some browsers already deprecated
DHE [28] and more should follow. Possibly backdoored DH
groups were observed in the wild [28]. It is not possible
to intercept
the knowledge of the
backdoor, hence only the attacker that generated the back-
doored parameters could mount MITM attacks. The Logjam
attack [1] forces the server to choose a small 512-bit DH
group, however modern browsers enforce minimal group size,
where the discrete logarithm problem is infeasible.
the connection without
A recent paper [85] measured the prevalence and feasibility
of several attacks on ECDH (static and ephemeral) key es-
tablishment. Many servers fail to check parameters and many
reuse ephemeral keys [82], no server was found that would do
both. Their further ﬁndings indicate that several other proposed
attacks (such as CurveSwap) are infeasible in TLS.
State machine bugs (up to MITM): The state machines of
TLS are complicated and not explicitly stated in the standards.
Their implementations are a common source of bugs. The
Early CCS attack found by [49] allowed a MITM attack.
Due to a bug in OpenSSL, running the Change Cipher Spec
Protocol early, both the server and the client used a zero-
length master key. While the bug is still found on some servers
[64], browsers have been patched. FREAK, another client-
side bug [9] allowed the attacker to downgrade the client
to RSA_EXPORT (easily factorable 512-bit keys), even when
the client did not offer such ciphersuite. Searching for new
state machine bugs was out of our scope and is the focus of
systematic studies of state machine implementations [9], [24].
Private key leakage (MITM): Private RSA keys generated
with insufﬁcient entropy can lead to servers sharing primes
in their keys, allowing such RSA keys to be factored by a
simple greatest common divisor (GCD) computation. Batch
GCD, an efﬁcient version of the algorithm that can handle
millions of moduli, revealed that such keys were widespread
[42], [39], likely due to consumer devices that generate their
keys shortly after boot, before entropy is collected. The bugs
are not prevalent on commercial servers from the Alexa list.
DSA and ECDSA private keys can be recovered if the same
secret nonce is used more than once [60], yet it happens
with negligible probability. Even biased nonces can be used
to reveal the private key, if enough signatures with a small
number of known nonce bits are known [76]. However, testing
for such side-channels is infeasible. Remote time side-channel
attacks were demonstrated [15], yet the bugs were known
beforehand. Timing attacks often rely on observing cache
access [70] that cannot be performed from a MITM position.
Certiﬁcate validation bugs (MITM): Some non-browser
clients were shown to have ﬂawed certiﬁcate validation [38],
accepting invalid certiﬁcates. We assume correct certiﬁcate
validation in modern browsers and users following browser
warnings. Certiﬁcate validation bugs in software and hardware
that intercepts TLS connections [23], [32], [90] are also out
of scope of our analysis.
Transcript collision attacks (MITM): We leave out transcript
collision attacks [11] since the performance of the algorithms
for ﬁnding (chosen preﬁx) collision in the hash functions is
not yet practical enough.
Further CBC-mode attacks (partial secret leakage): Attacks
based on timing side-channels like Lucky13 [3] are infeasible
to assess over the Internet. The original POODLE attack [59]
cannot be applied, since browsers disabled SSLv3 support.
Browsers that ﬁx bugs, such as an SOP-bypass, or implement
the 1/n-1 split will resist BEAST [29]. We leave for future
work the attacks that enable partially leaky channels from
server to client, like BREACH [63], that requires speciﬁc
conditions at the server’s application layer to be exploited.
Weak ciphers (partial secret leakage): Authentication to-
kens and cookies could be disclosed due to collisions in CBC
(cid:19)(cid:26)(cid:23)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
mode of a 64-bit block cipher, such as Triple-DES (3DES),
via the Sweet32 attack [12]. Due to the birthday paradox, a
ciphertext collision between a block that encrypts a known
plaintext and a block that encrypts the cookie is expected with
high probability after the client sends about 232 messages.
Modern browsers only support 3DES as a fallback since AES
(with 128-bit blocks) is preferred by servers. An effective
mitigation is to disable 3DES support or enforce a conservative
bound for the amount of data encrypted under one key (and
we assume such limit in browsers).
It is possible to extract short secrets using a statistical attack
against the biased key stream of the RC4 stream cipher [37].
Although the current state of the art attack still requires a large
number of secret repetitions, IETF deprecated RC4 use in TLS
[62] and major browsers disabled RC4 support.
Compression oracles (partial secret
leakage): A side-
channel based on compression was described by Kelsey [48].
If the attacker injects into the plaintext a copy of the secret,
the compression should reduce the size of the ciphertext, when
compared to injecting random plaintext of the same size. The
attacker could observe the size of the ciphertext (CRIME
attack [67]) or the time of the transmission (TIME attack [7])
to build an oracle for verifying guesses of the secret. The
attacks require secret repetition and partial control over the
plaintext. Modern clients disable compression of TLS records,
and so does the majority of the servers [64].
Renegotiation and Triple Handshake (integrity): We con-
sider the Renegotiation attack [65] and the Triple Handshake
attack [10] as out of scope. The main idea of the attacks is
that the messages sent by the client are “spliced” into ongoing
communication between the attacker and the server, and the
server assumes continuity before and after renegotiation, de-
spite TLS not giving such guarantee. We do not consider Client
Authentication and do not test application layer authentication
for such behavior.
B. More Detailed Attack Trees
Tests performed by security tools can be also described
as attack trees. To illustrate the speciﬁc conditions of some
attacks, we present an abstraction of the tests for Bleichen-
bacher’s oracle in Figure 5 and its Strong variant in Figure 6,
General and Special DROWN attack in Figure 7 and Figure 8,
respectively, and the conditions for POODLE-TLS in Figure 9
and for a speciﬁc CBC padding oracle in Figure 10.
Some leaf conditions in the trees are represented by sub-
trees. We list some of them explicitly, namely the requirements
for an attacker to mount a protocol version downgrade attack
(Figure 11), the conditions indicating the presence of an RSA
decryption oracle (Figure 12 and 13), and the tree for fast
RSA signature oracle (Figure 14). Other leaf conditions are
more intuitive or they are mapped to the outputs of the attack
vulnerability testing tools, testssl.sh, TLS-Attacker [80], and
the DROWN detection plugin for nmap.
GOAL Bleichenbacher’s oracle on the server
| 1 The response to any of these client key
exchanges differs:
| 1 Correct padding:
00 02  00  
| 2 Wrong first two bytes:
41 17  00  
| 3 A 0x00 byte in a wrong position:
00 02  11  00 11
| 4 Missing 0x00 byte in the middle:
00 02  11 11 11 
| 5 Wrong version number oracle [50]:
00 02  00 02 02 
Fig. 5. A simpliﬁed test for general Bleichenbacher’s oracle from testssl.sh
GOAL Strong Bleichenbacher’s oracle on the server
& 1 Bleichenbacher’s oracle on the server (Figure 5)
& 2 The client key exchange messages 2, 3, and 4
invoked at least 2 different server responses
Fig. 6. A simpliﬁed test for Strong Bleichenbacher’s oracle from testssl.sh
GOAL Server is vulnerable to General DROWN
| 1 Server supports a vulnerable SSLv2 ciphersuite
(using DES or a cipher with 40-bit keys)
| 1 Server offers such ciphersuite (CVE-2016-0800)
| 2 Server accepts such ciphersuite without
advertising its support (CVE-2015-3197)
Fig. 7. The test for General DROWN according to the detection script (the
test is repeated for different application protocols)
GOAL Server is vulnerable to Special DROWN
& 1 Server supports SSLv2
& 2 Server has the "extra clear" oracle (it allows
clear_key_data bytes for non-export ciphers)
Fig. 8. The test for Special DROWN according to the detection script
GOAL POODLE-TLS padding oracle on the server
| 1 Server does not respond with a Fatal Alert to
a message with an error on the first byte of the
padding (the rest of the padding is correct)
Fig. 9. The test for a POODLE-TLS padding oracle as seen in TLS-Attacker
GOAL CBC padding oracle CVE-2016-2107 on the server
| 1 Server issues a RECORD_OVERFLOW alert
as a response to a specially crafted message
Fig. 10. The test for a CBC padding oracle due to an OpenSSL bug in
AES-NI code (CVE-2016-2107) as seen in TLS-Attacker (simpliﬁed)
(cid:19)(cid:26)(cid:24)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply. 
GOAL Downgrade to a specific lower protocol version 
& 1 At least one of the peers does not support version downgrade mitigation
| 1 Client does not support RFC 7507 TLS_FALLBACK_SCSV (i.e., the Client does not append
the ciphersuite to a ClientHello with other than the highest supported TLS version)
| 2 Server does not support RFC 7507 TLS_FALLBACK_SCSV (i.e., the Server does not check
for the presence of the ciphersuite in the ClientHello)
& 2 Both Client and Server support a specific lower version  of the protocol (with some interesting
property, e.g., with preferred CBC mode of symmetric encryption, or only supporting RSA key exchange)
& 1 Server supports the lower protocol version 
& 2 Client supports the lower protocol version 
(e.g., modern web browsers support TLS 1.0, 1.1, 1.2 and possibly 1.3, but neither SSLv2 nor SSLv3)
Fig. 11. Attack sub-tree for protocol version downgrade
GOAL RSA decryption oracle is available
| 1 Oracle allows feasible decryption
| 1 Strong Bleichenbacher’s oracle on the server (Figure 6)
| 2 General DROWN
& 1 Server is vulnerable to General DROWN (Figure 7)
& 2 Attacker can capture a key exchange in the required format (1 in 900) (assumption)
| 2 Fast RSA decryption oracle (Figure 13)
Fig. 12. Attack sub-tree for an RSA decryption oracle (that allows a decryption of key exchange messages)
GOAL Fast RSA decryption oracle
| 1 Strong Bleichenbacher’s PKCS #1 v1.5 oracle and high performance
& 1 Strong Bleichenbacher’s oracle on the server (Figure 6)
& 2 Attacker can decrypt before the handshake finishes
(assumption about the performance of the Server and Attacker to handle many parallel connections)
| 2 Special DROWN
& 1 Server is vulnerable to Special DROWN (Figure 8)
& 2 Attacker can capture a key exchange in the required format (1 in 260) (assumption)
Fig. 13. Attack sub-tree for a fast RSA decryption oracle (that allows an online decryption)
GOAL Fast RSA signature oracle
| 1 Strong Bleichenbacher’s PKCS #1 v1.5 oracle and high performance
& 1 Strong Bleichenbacher’s oracle on the server (Figure 6)
& 2 Attacker can forge the signature before the handshake finishes
(assumption about the performance of the Server and Attacker to handle many parallel connections)
Fig. 14. Attack sub-tree for a fast RSA signature oracle (that allows an online decryption or signature forgery)
(cid:19)(cid:26)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:52:53 UTC from IEEE Xplore.  Restrictions apply.