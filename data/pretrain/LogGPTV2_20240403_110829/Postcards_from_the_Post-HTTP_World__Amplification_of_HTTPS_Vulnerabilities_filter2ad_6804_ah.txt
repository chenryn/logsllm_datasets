以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

[80] ——, “Systematic Fuzzing and Testing of TLS Libraries,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS'16). ACM Press, 2016.

[81] S. Son 和 V. Shmatikov, “The Postman Always Rings Twice: Attacking and Defending postMessage in HTML5 Websites,” 在第20届年度网络与分布式系统安全研讨会 (NDSS 2013) 上发表, 2013年。

[82] D. Springall, Z. Durumeric, 和 J. A. Halderman, “Measuring the Security Harm of TLS Crypto Shortcuts,” 在2016年ACM互联网测量会议 (IMC '16) 的论文集中发表, ACM, 2016年。

[83] Synopsys, “The Heartbleed Bug (CVE-2014-0160),” 2014年, 在线引用 [2018-10-29]。[在线]. 可访问: http://heartbleed.com/

[84] L. Valenta, D. Adrian, A. Sanso, S. Cohney, J. Fried, M. Hastings, J. A. Halderman, 和 N. Heninger, “Measuring Small Subgroup Attacks Against Diffie-Hellman,” 在2017年网络与分布式系统安全研讨会的论文集中发表, Internet Society, 2017年。

[85] L. Valenta, N. Sullivan, A. Sanso, 和 N. Heninger, “In Search of CurveSwap: Measuring Elliptic Curve Implementations in the Wild,” Cryptology ePrint Archive, 报告2018/298, 2018年, https://eprint.iacr.org/2018/298。

[86] T. van Goethem, P. Chen, N. Nikiforakis, L. Desmet, 和 W. Joosen, “Large-Scale Security Analysis of the Web: Challenges and Findings,” 在第七届国际信任与可信计算会议 (TRUST 2014) 的论文集中发表, 2014年, 第110–126页。

[87] B. VanderSloot, J. Amann, M. Bernhard, Z. Durumeric, M. Bailey, 和 J. A. Halderman, “Towards a Complete View of the Certificate Ecosystem,” 在2016年ACM互联网测量会议 (IMC 2016) 的论文集中发表, 2016年, 第543–549页。

[88] S. Vaudenay, “Security Flaws Induced by CBC Padding – Applications to SSL, IPSEC, WTLS...” 在欧洲密码学进展 (EUROCRYPT 2002) 会议上发表, Springer Berlin Heidelberg, 2002年, 第534–545页。

[89] J. Vehent, “Security/Server Side TLS (version 4.1),” MozillaWiki, 2018年, 在线引用 [2018-10-29]。[在线]. 可访问: https://wiki.mozilla.org/Security/Server_Side_TLS#Recommended_configurations

[90] L. Waked, M. Mannan, 和 A. Youssef, “To Intercept or Not to Intercept,” 在2018年亚洲计算机与通信安全会议 (ASIACCS '18) 的论文集中发表, ACM Press, 2018年。[在线]. 可访问: https://doi.org/10.1145%2F3196494.3196528

[91] L. Weichselbaum, M. Spagnuolo, S. Lekies, 和 A. Janc, “CSP Is Dead, Long Live CSP! On the Insecurity of Whitelists and the Future of Content Security Policy,” 在2016年ACM SIGSAC计算机与通信安全会议的论文集中发表, 2016年。

[92] M. West, “W3C Candidate Recommendation: Mixed Content,” https://www.w3.org/TR/mixed-content/, 2016年。

[93] ——, “W3C Working Draft: Content Security Policy Level 3,” https://www.w3.org/TR/CSP3/, 2018年。

[94] X. Zheng, J. Jiang, J. Liang, H. Duan, S. Chen, T. Wan, 和 N. Weaver, “Cookies Lack Integrity: Real-World Implications,” 在第24届USENIX安全研讨会 (USENIX Security 15) 的论文集中发表, 2015年, 第707–721页。

**附录A：不在研究范围内的TLS攻击**

一些TLS漏洞在现代浏览器中已经无法被利用，或者由于客户端配置的原因而无法被利用。

**Diffie-Hellman密钥建立攻击（中间人攻击）**：
静态DH密钥交换容易受到小子群攻击 [84]，但现代浏览器已不再支持该功能，并且针对易受攻击的静态ECDH密钥交换的支持已被移除。此外，某些浏览器已弃用DHE [28]，更多的浏览器应效仿。可能被后门化的DH组已在野外观察到 [28]。如果没有后门知识，只有生成了后门参数的攻击者才能进行中间人攻击。Logjam攻击 [1] 会迫使服务器选择一个较小的512位DH组，但现代浏览器强制要求最小组大小，使得离散对数问题变得不可行。

最近的一篇论文 [85] 测量了ECDH（静态和临时）密钥建立中几种攻击的普遍性和可行性。许多服务器未能检查参数，并且许多服务器重复使用临时密钥 [82]，但没有发现同时执行这两种行为的服务器。他们的进一步发现表明，其他几种提议的攻击（如CurveSwap）在TLS中是不可行的。

**状态机漏洞（至多为中间人攻击）**：
TLS的状态机非常复杂，且标准中并未明确说明。其实现通常是漏洞的来源。由 [49] 发现的早期CCS攻击允许进行中间人攻击。由于OpenSSL中的一个错误，过早运行Change Cipher Spec协议导致服务器和客户端使用零长度主密钥。尽管此错误仍然存在于某些服务器上 [64]，但浏览器已经修复了这个问题。FREAK是另一种客户端错误 [9]，即使客户端未提供此类密码套件，攻击者也可以将客户端降级为RSA_EXPORT（易于分解的512位密钥）。寻找新的状态机漏洞超出了我们的研究范围，这是状态机实现系统研究的重点 [9], [24]。

**私钥泄露（中间人攻击）**：
使用不足熵生成的私有RSA密钥可能导致服务器共享其密钥中的素数，从而可以通过简单的最大公约数 (GCD) 计算来分解这些RSA密钥。批量GCD算法是一种高效的版本，可以处理数百万个模数，揭示了这种密钥广泛存在 [42], [39]，这可能是由于消费者设备在启动后不久即生成密钥，而在收集熵之前。这些漏洞在Alexa列表中的商业服务器上并不普遍。

DSA和ECDSA私钥如果多次使用相同的秘密随机数，则可以被恢复 [60]，但这发生的概率极低。即使是偏斜的随机数，如果知道足够多的签名和少量已知随机数位，也可以用来揭示私钥 [76]。然而，测试此类侧信道是不可行的。远程时间侧信道攻击已被演示 [15]，但这些漏洞在之前就已为人所知。定时攻击通常依赖于观察缓存访问 [70]，而这无法从中间人位置进行。

**证书验证漏洞（中间人攻击）**：
一些非浏览器客户端被发现具有有缺陷的证书验证 [38]，接受无效证书。我们假设现代浏览器中的正确证书验证以及用户遵循浏览器警告。拦截TLS连接的软件和硬件中的证书验证漏洞 [23], [32], [90] 也不在我们的分析范围内。

**转录碰撞攻击（中间人攻击）**：
我们排除了转录碰撞攻击 [11]，因为找到哈希函数（选定前缀）碰撞的算法性能尚不实用。

**进一步的CBC模式攻击（部分秘密泄漏）**：
基于时间侧信道的攻击，如Lucky13 [3]，通过互联网评估是不可行的。原始的POODLE攻击 [59] 无法应用，因为浏览器已禁用SSLv3支持。修复了诸如SOP绕过等漏洞或实现了1/n-1拆分的浏览器可以抵抗BEAST [29]。我们将留待未来工作研究那些使服务器到客户端部分泄漏通道成为可能的攻击，例如BREACH [63]，它需要服务器应用程序层具备特定条件才能被利用。

**弱加密算法（部分秘密泄漏）**：
身份验证令牌和Cookie可能会因CBC模式下64位块加密算法（如Triple-DES (3DES)）的碰撞而泄露，例如Sweet32攻击 [12]。根据生日悖论，在客户端发送大约2^32条消息后，预期会出现一个块加密已知明文和另一个块加密Cookie之间的密文碰撞。现代浏览器仅将3DES作为后备支持，因为服务器更倾向于AES（128位块）。有效的缓解措施是禁用3DES支持或对单个密钥加密的数据量施加保守限制（我们假设浏览器中有这样的限制）。

有可能通过统计攻击提取RC4流密码的短秘密 [37]。虽然当前最先进的攻击仍需要大量秘密重复，但IETF已弃用TLS中的RC4 [62]，主流浏览器也已禁用RC4支持。

**压缩预言机（部分秘密泄漏）**：
Kelsey [48] 描述了一种基于压缩的侧信道攻击。如果攻击者在明文中注入秘密副本，与注入相同大小的随机明文相比，压缩应减少密文的大小。攻击者可以通过观察密文的大小（CRIME攻击 [67]）或传输时间（TIME攻击 [7]）来构建一个用于验证秘密猜测的预言机。这些攻击需要秘密重复和对明文的部分控制。现代客户端禁用了TLS记录的压缩，大多数服务器也是如此 [64]。

**重新协商和三次握手（完整性）**：
我们认为重新协商攻击 [65] 和三次握手攻击 [10] 不在研究范围内。这些攻击的主要思想是将客户端发送的消息“拼接”到攻击者和服务器之间的正在进行的通信中，而服务器假定重新协商前后具有连续性，尽管TLS并未提供这种保证。我们不考虑客户端认证，也不测试应用程序层认证是否存在此类行为。

**附录B：更详细的攻击树**

安全工具执行的测试也可以描述为攻击树。为了说明某些攻击的具体条件，我们在图5中展示了针对Bleichenbacher预言机的抽象测试，在图6中展示了其强变体，在图7和图8中分别展示了通用和特殊DROWN攻击的条件，在图9中展示了POODLE-TLS的条件，在图10中展示了特定CBC填充预言机的条件。

攻击树中的一些叶子条件由子树表示。我们明确列出了一些，例如攻击者发动协议版本降级攻击的要求（图11），指示存在RSA解密预言机的条件（图12和13），以及快速RSA签名预言机的树（图14）。其他叶子条件更为直观，或者映射到攻击漏洞测试工具（如testssl.sh、TLS-Attacker [80] 和nmap的DROWN检测插件）的输出。

**目标：服务器上的Bleichenbacher预言机**
1. 以下任意一种客户端密钥交换响应不同：
   1. 正确的填充:
      ```
      00 02 00
      ```
   2. 前两个字节错误:
      ```
      41 17 00
      ```
   3. 错误位置的0x00字节:
      ```
      00 02 11 00 11
      ```
   4. 中间缺少0x00字节:
      ```
      00 02 11 11 11
      ```
   5. 版本号预言机 [50]:
      ```
      00 02 00 02 02
      ```

**图5. testssl.sh中的简化测试用于一般Bleichenbacher预言机**

**目标：服务器上的强Bleichenbacher预言机**
1. 服务器上的Bleichenbacher预言机（图5）
2. 客户端密钥交换消息2、3和4至少引发两种不同的服务器响应

**图6. testssl.sh中的简化测试用于强Bleichenbacher预言机**

**目标：服务器易受通用DROWN攻击**
1. 服务器支持易受攻击的SSLv2密码套件（使用DES或40位密钥的密码）
   1. 服务器提供此类密码套件（CVE-2016-0800）
   2. 服务器接受此类密码套件而不声明支持（CVE-2015-3197）

**图7. 根据检测脚本的通用DROWN测试（针对不同的应用程序协议重复测试）**

**目标：服务器易受特殊DROWN攻击**
1. 服务器支持SSLv2
2. 服务器具有“额外清晰”的预言机（允许非导出密码的clear_key_data字节）

**图8. 根据检测脚本的特殊DROWN测试**

**目标：服务器上的POODLE-TLS填充预言机**
1. 服务器不会对第一个填充字节错误（其余填充正确）的消息返回致命警报

**图9. 如TLS-Attacker所示的POODLE-TLS填充预言机测试**

**目标：服务器上的CVE-2016-2107 CBC填充预言机**
1. 服务器对特制消息响应RECORD_OVERFLOW警报

**图10. 如TLS-Attacker所示的由于OpenSSL AES-NI代码中的错误引起的CBC填充预言机测试（简化）**

**目标：降级到特定较低的协议版本**
1. 至少有一方不支持版本降级缓解
   1. 客户端不支持RFC 7507 TLS_FALLBACK_SCSV（即，客户端不会在最高支持的TLS版本以外的ClientHello中附加该密码套件）
   2. 服务器不支持RFC 7507 TLS_FALLBACK_SCSV（即，服务器不会检查ClientHello中是否存在该密码套件）
2. 客户端和服务器都支持特定的较低版本协议（具有一些有趣的特性，例如优先使用对称加密的CBC模式，或仅支持RSA密钥交换）
   1. 服务器支持较低版本协议
   2. 客户端支持较低版本协议
   （例如，现代Web浏览器支持TLS 1.0、1.1、1.2和可能的1.3，但不支持SSLv2或SSLv3）

**图11. 协议版本降级的攻击子树**

**目标：可利用的RSA解密预言机**
1. 预言机允许可行的解密
   1. 服务器上的强Bleichenbacher预言机（图6）
   2. 通用DROWN
      1. 服务器易受通用DROWN攻击（图7）
      2. 攻击者可以捕获所需格式的密钥交换（1/900）（假设）
   3. 快速RSA解密预言机（图13）

**图12. 允许解密密钥交换消息的RSA解密预言机的攻击子树**

**目标：快速RSA解密预言机**
1. 强Bleichenbacher PKCS #1 v1.5预言机和高性能
   1. 服务器上的强Bleichenbacher预言机（图6）
   2. 攻击者可以在握手完成前解密
      （关于服务器和攻击者处理多个并行连接的性能假设）

**图13. 允许在线解密的快速RSA解密预言机的攻击子树**

**目标：快速RSA签名预言机**
1. 强Bleichenbacher PKCS #1 v1.5预言机和高性能
   1. 服务器上的强Bleichenbacher预言机（图6）
   2. 攻击者可以在握手完成前伪造签名
      （关于服务器和攻击者处理多个并行连接的性能假设）

**图14. 允许在线解密或签名伪造的快速RSA签名预言机的攻击子树**

---

希望这些修改能够帮助你更好地理解并呈现你的内容。