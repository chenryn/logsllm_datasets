# Primordial (Crypto, 171p, 25 solved)
In the challenge we get [code](primordial_rsa.py) and [output](output.txt).
If we look at the primes generation, some things seems odd:
```python
def gen_prime(nbit):
    while True:
        s = getPrime(36)
        a = primorial(getPrime(random.randint(7, 9)))
        b = primorial(getPrime(random.randint(2, 5)))
        for r in range(10**3, 3*10**3, 2):
            p = s * a // b - r
            if gmpy2.is_prime(p) and len(bin(p)[2:]) == nbit:
                return int(p)
```
Specifically the very small randoms which are used here.
While primorial makes those numbers very big, the entropy is extremely low.
In fact we can easily enumerate all primes which can come from `getPrime(random.randint(7, 9))` and getPrime(random.randint(2, 5)) and it's not that many.
The last loop is also trivial to brute-force, it's just 1000 values to check.
The only real problem is `s = getPrime(36)` since those are 36 bits we don't know.
I suspect it's within brute-force range still, but we used a more reasonable approach.
Let's assume we know `a`, `b` and `r` since we can easily enumerate all possible combinations of those values.
We can then check which of them meet the condition `len(bin(p)[2:]) == nbit`, since we know how many bits `s` has.
This in turn gave us literally 2 options:
```python
current_a = 2 ** 6 - 1
a = []
while len(bin(current_a)[2:])  = PolynomialRing(Zmod(N), implementation='NTL')
    for d in potential_divs:
        print('testing',d)
        for r in range(10**3, 3*10**3, 2):
            poly = x * d - r
            poly = poly.monic()
            roots = poly.small_roots(beta=0.5,X=2**50)
            if len(roots)>0:
                print(roots)
                p = int(roots[0]*d-r)
                q = int(int(N)/int(p))
                phi = (p-1)*(q-1)
                print(phi)
                d = inverse_mod(65537,phi)
                decrypted = pow(ct,int(d),N)
                print(decrypted)
                return long_to_bytes(int(decrypted))
```
Running this gives us back `ASIS{f4C7OR1ZIn9_PrimoR!4L_pR1m3z_Iz_3A5Y_I5nt_iT?}`
Complete solver [here](solver.sage)