structure consisting of three 4-byte integers: PID, UID, and
GID. In other words, suppose option value’s address is A,
PID, UID, and GID will locate at addresses A, A+4, and A+8,
respectively. When getsockopt is called, we inspect option
name and record option value’s address on the stack A. Af-
ter that, functions that access values at A, A+4, or A+8 are
considered as checks.
Analyzing System Daemons. Socket Usage Collector
calls a command line tool netstat to get interested socket
information. Note that the default netstat shipped with
Android has very limited capability. We choose to install
busybox, which provides a much more powerful netstat ap-
plet. Root access of the Android device is required, other-
wise netstat will not be able to (cid:12)nd out the process that
listens on a particular socket address. We build Connection
Tester into a third-party app that requests only INTERNET
permission. Native-layer Authentication Detector is reused
for analyzing system daemons.
3.3 Limitations
One limitation of SInspector is that we have to rely on
human eﬀorts to generate exploits. Even though we can
(cid:12)nd out apps and system daemons that are highly likely to
be vulnerable, we are not able to automatically craft exploits
to (cid:12)nally validate vulnerabilities. SInspector may have false
positives, because of our conservative strategies for (cid:12)ltering
out insusceptible apps and system daemons. The native-
layer intra-procedural data (cid:13)ow analysis is likely to miss
data (cid:13)ows across diﬀerent functions.
We may also have false negatives: (1) we cannot han-
dle dynamically loaded code; and (2) native executables/li-
braries might be packed or encrypted. They could introduce
uncaught control and data (cid:13)ows.
4. RESULTS
We evaluate SInspector with a total number of 14,644 up-
to-date Google Play apps crawled by ourselves in mid-April
2016, including (approximately) top 340 from all 44 cate-
gories. Google has imposed restrictions to ensure that apps
can only be downloaded through the Google Play app, which
makes it diﬃcult for us to obtain APK (cid:12)les. To tackle this,
we crawl meta data of apps (e.g., package name, version
name) from Google Play and download corresponding APK
(cid:12)les from ApkPure [5], a mirror of Google Play that allows
free downloading.
We also use three phones to evaluate SInspector: (1) LG
G3 running Android 4.4.4, (2) Samsung Galaxy S4 running
Android 5.0.1, and (3) LG Nexus 4 running 5.1.1. All of
them are updated to the latest (cid:12)rmware and rooted. Most
of recently released Android phones either equip with 64-bit
ARM processors or cannot be rooted. They are not suitable
for our experiments because SInspector’s dynamic analysis
requires root access and the static data (cid:13)ow analysis can
only handle 32-bit ARM binaries.
4.1 Overview
Table 3 shows the overall statistics on Unix domain socket
usage among apps and system daemons. App data are from
API-based Filter and daemon data come from Socket Usage
Collector. Among 14,644 apps, 3,734 (25.5%) have Unix
domain socket related APIs or system calls in code, and the
majority of them (3,689) use ABSTRACT addresses, while
only a few use FILESYSTEM and RESERVED addresses.
Diﬀerent from apps, most of system daemons use RE-
SERVED addresses. Compared to Nexus 4 running non-
customized Android, LG G3 and Galaxy S4 have more
system daemons and heavier usage of ABSTRACT ad-
dresses. This fact clearly shows that vendor customizations
inevitably expose more attack vectors.
Table 3: Numbers of apps/system daemons that use Unix
domain sockets. The sum of numbers in each address names-
pace may be greater than the total number, as one app/sys-
tem daemon could use more than one namespaces.
# Apps
# Daemons
LG G3 Galaxy S4 Nexus 4
ABSTRACT
FILESYSTEM
RESERVED
Total
3,689
36
20
3,734
5
4
13
20
8
5
17
27
2
2
11
13
4.1.1 Libraries
We summarize identi(cid:12)ed libraries utilizing Unix domain
sockets in Table 5. \Singleton" and \Global lock" in the
Usage column will be described later in x4.2. We observe
that 3,406 apps use an outdated Google Mobile Services
(GMS) library alone and exclude them. The outdated GMS
library is potentially vulnerable to DoS and data injection
attacks. The latest GMS library has completely discarded
Unix domain sockets, which implies that Google may have
been aware of potential problems of using Unix domain sock-
ets. Except Amazon Whisperlink and OpenVPN, all other
libraries use the ABSTRACT namespace, making them all
vulnerable to DoS.
4.1.2 Tool Effectiveness and Performance
Besides apps using common libraries listed in Table 5,
SInspector found 73 potentially vulnerable apps having no
authentication or weak authentications. Table 4 summarizes
analysis eﬀectiveness. After reachability analysis, SInspec-
tor (cid:12)nally reported 67 apps that are most likely to be vulner-
able. We manually looked at all 67 apps and con(cid:12)rmed that
45 are indeed vulnerable. SInspector reported 12 potentially
vulnerable system daemons. After manual examination, we
con(cid:12)rmed 9 of them are truly vulnerable. We present a case
study of most critical vulnerabilities in x5.
All experiments are done on a machine with 3.26GHz (cid:2) 8
Core i7 and 16GB of memory. The most compute-intensive
module of app analysis is Reachability Analyzer. Depending
Table 5: Libraries that use Unix domain socket. ABS and FS under \Namespace" are short for ABSTRACT and FILESYS-
TEM. DI and DL in the last column stand for data injection and data leakage.
Library
# Apps (reachable)
Usage
Namespace
Baidu Push
Tencent XG
Umeng Message
Facebook SocketLock
Yandex Metrica
Facebook Stetho
Sony Liveware
Samsung SDK
QT5
Clean Master
Amazon Whisperlink
OpenVPN
9 (9)
11 (11)
17 (17)
13 (13)
95 (95)
97 (97)
8 (5)
12 (10)
10 (10)
9 (9)
11 (7)
7 (4)
Singleton
Singleton
Singleton
Global lock
Global lock
Debugging interface
Data transfer
Data transfer
Debugging interface
Data transfer
Data transfer
Cmd & control
ABS
ABS
ABS
ABS
ABS
ABS
ABS
ABS
ABS
ABS
FS
FS
Auth
N/A
N/A
N/A
N/A
N/A
Permission
None
None
None
None
None
None
Susceptible attack(s)
DoS
DoS
DoS
DoS
DoS
DoS
DoS, DI, DL
DoS, DI, DL
DoS, DI, DL
DoS, DI, DL
Not vulnerable
Not vulnerable
Table 4: Results summary.
Potentially
Vulnerable
True
False
Positive
Positive
Precision
Apps
LG G3
Galaxy S4
Nexus 4
67
6
5
1
45
4
4
1
22
2
1
0
67.2%
66.7%
80%
100%
4.2.2 Realizing Singleton
An ABSTRACT socket address can only be bound on by
one Unix domain socket server instance. Once an address
has been taken, another server that attempts to bind on it
would fail. This feature is widely exploited to ensure that
certain code will not be executed more than once. In fact,
the PhoneFactory class in AOSP \use UNIX domain socket
to prevent subsequent initialization" of the Phone instance,
as Figure 3 shows.
on the numbers of bytecode instructions of apps, Reachabil-
ity Analyzer could take a few minutes to more than one hour.
Other modules are pretty fast. The average time for analyz-
ing one app is 2,502 seconds. For system daemon analysis,
IDA Pro’s disassembling process took a few seconds to a few
minutes, the average time for analyzing a system daemon is
39 seconds.
4.2 Unix Domain Socket Usage
Unix domain sockets provide a means to perform IPC,
but it turns out the usage in the wild is not limited to IPC.
According to our experience in inspecting potentially vul-
nerable apps SInspector reported, we extract code patterns
for categorizing Unix domain socket usage and summarize
them in Table 6. We observe that Unix domain sockets are
widely used by apps to implement global locks and singleton,
as well as to implement watchdogs.
4.2.1 Inter-Process Communication
Not surprisingly, the prominent usage of Unix domain
sockets is performing IPC. Apps are free to implement their
own protocols for client/server communication.
However, we do (cid:12)nd a very unique use of Unix domain
socket as an IPC mechanism. A few video recording apps
leverage Unix domain sockets to realize real-time media
streaming, a feature that Android’s media recording APIs
do not support. Developers came up with a workaround,
which takes advantage of an existing media recording API
setOutputFile(fd) that outputs camera and microphone
data stream to a (cid:12)le descriptor. After a Unix domain socket
connection is established, the client passes its output (cid:12)le de-
scriptor to this API so that the server can read real-time
camera/microphone output.
In this way, media output is
converted to a stream that can be further processed in real
time, e.g., to perform live streaming.
// use UNIX domain socket to
// prevent subsequent initialization
new LocalServerSocket("com.android.internal.telephony");
105 try {
106
107
108
109 } catch (java.io.IOException ex) {
110
111 }
hasException = true;
Figure 3: com.android.internal.telephony.PhoneFactory
uses a Unix domain socket for locking. Code excerpted
from AOSP 6.0.1_r10.
Baidu Push, Tencent XG, and Umeng Message are three
top message push service providers in China. Due to the
state-level blocking of Google services, Google Cloud Mes-
saging (GCM) is not accessible. Therefore, apps targeting
on China market have to choose other push services.
It
is likely that multiple apps integrated the same push ser-
vice library co-exist on the same device. That would be