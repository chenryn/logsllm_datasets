### Structure of Option Value
The option value is a structure composed of three 4-byte integers: PID, UID, and GID. Specifically, if the address of the option value is A, then PID, UID, and GID will be located at addresses A, A+4, and A+8, respectively. When `getsockopt` is called, we inspect the option name and record the address A on the stack. Subsequently, any function that accesses values at A, A+4, or A+8 is considered a check.

### Analyzing System Daemons
The Socket Usage Collector utilizes the command-line tool `netstat` to gather information about sockets of interest. Note that the default `netstat` tool provided with Android has limited capabilities. Therefore, we opt to install `busybox`, which offers a more powerful `netstat` applet. Root access to the Android device is necessary; otherwise, `netstat` will not be able to identify the process listening on a specific socket address. The Connection Tester is built into a third-party app that only requests the `INTERNET` permission. The Native-layer Authentication Detector is reused for analyzing system daemons.

### Limitations
One limitation of SInspector is the reliance on human effort to generate exploits. While SInspector can identify apps and system daemons that are likely to be vulnerable, it cannot automatically craft exploits to validate these vulnerabilities. Additionally, SInspector may produce false positives due to its conservative filtering strategies for insusceptible apps and system daemons. The native-layer intra-procedural data flow analysis may also miss data flows across different functions. False negatives can occur because:
1. Dynamically loaded code cannot be handled.
2. Native executables/libraries might be packed or encrypted, leading to uncaught control and data flows.

### Results
We evaluated SInspector using a total of 14,644 up-to-date Google Play apps, including approximately the top 340 from all 44 categories, crawled in mid-April 2016. Google's restrictions make it difficult to download APK files directly from the Google Play app. To overcome this, we crawled metadata (e.g., package name, version name) from Google Play and downloaded the corresponding APK files from ApkPure, a mirror site that allows free downloading.

We used three phones for the evaluation:
1. LG G3 running Android 4.4.4
2. Samsung Galaxy S4 running Android 5.0.1
3. LG Nexus 4 running Android 5.1.1

All devices were updated to the latest firmware and rooted. Recently released Android phones either use 64-bit ARM processors or cannot be rooted, making them unsuitable for our experiments. SInspector's dynamic analysis requires root access, and the static data flow analysis can only handle 32-bit ARM binaries.

#### Overview
Table 3 summarizes the overall statistics on Unix domain socket usage among apps and system daemons. Among the 14,644 apps, 3,734 (25.5%) have Unix domain socket-related APIs or system calls in their code. Most of these (3,689) use ABSTRACT addresses, while only a few use FILESYSTEM and RESERVED addresses. In contrast, most system daemons use RESERVED addresses. Compared to the Nexus 4 running non-customized Android, the LG G3 and Galaxy S4 have more system daemons and heavier usage of ABSTRACT addresses, indicating that vendor customizations expose more attack vectors.

| # Apps | # Daemons | LG G3 | Galaxy S4 | Nexus 4 |
|--------|-----------|-------|-----------|---------|
| ABSTRACT | 3,689 | 5 | 4 | 13 |
| FILESYSTEM | 36 | 8 | 5 | 17 |
| RESERVED | 20 | 2 | 2 | 11 |
| Total | 3,734 | 20 | 27 | 13 |

#### Libraries
Table 5 lists identified libraries utilizing Unix domain sockets. We observed that 3,406 apps use an outdated Google Mobile Services (GMS) library, which is potentially vulnerable to DoS and data injection attacks. The latest GMS library has discarded Unix domain sockets, suggesting that Google was aware of potential issues. Except for Amazon Whisperlink and OpenVPN, all other libraries use the ABSTRACT namespace, making them vulnerable to DoS.

| Library | # Apps (reachable) | Usage | Namespace | Auth | Susceptible Attacks |
|---------|--------------------|-------|-----------|------|---------------------|
| Baidu Push | 9 (9) | Singleton | ABS | N/A | DoS |
| Tencent XG | 11 (11) | Singleton | ABS | N/A | DoS |
| Umeng Message | 17 (17) | Singleton | ABS | N/A | DoS |
| Facebook SocketLock | 13 (13) | Global lock | ABS | N/A | DoS |
| Yandex Metrica | 95 (95) | Global lock | ABS | N/A | DoS |
| Facebook Stetho | 97 (97) | Debugging interface | ABS | N/A | DoS |
| Sony Liveware | 8 (5) | Data transfer | ABS | None | DoS, DI, DL |
| Samsung SDK | 12 (10) | Data transfer | ABS | None | DoS, DI, DL |
| QT5 | 10 (10) | Debugging interface | ABS | None | DoS, DI, DL |
| Clean Master | 9 (9) | Data transfer | ABS | None | DoS, DI, DL |
| Amazon Whisperlink | 11 (7) | Data transfer | FS | None | Not vulnerable |
| OpenVPN | 7 (4) | Cmd & control | FS | None | Not vulnerable |

#### Tool Effectiveness and Performance
SInspector found 73 potentially vulnerable apps with no authentication or weak authentications. After reachability analysis, 67 apps were reported as highly likely to be vulnerable. Manual inspection confirmed that 45 of these apps are indeed vulnerable. SInspector also reported 12 potentially vulnerable system daemons, of which 9 were confirmed to be truly vulnerable. All experiments were conducted on a machine with a 3.26GHz 8-core i7 processor and 16GB of memory. The most compute-intensive module is the Reachability Analyzer, which can take a few minutes to over an hour depending on the number of bytecode instructions. The average time for analyzing one app is 2,502 seconds. For system daemon analysis, IDA Pro's disassembling process took a few seconds to a few minutes, with an average analysis time of 39 seconds.

### Unix Domain Socket Usage
Unix domain sockets are primarily used for IPC, but their usage extends beyond this. Based on our inspection of potentially vulnerable apps, we extracted code patterns and categorized their usage, summarized in Table 6. Unix domain sockets are widely used to implement global locks, singletons, and watchdogs.

#### Inter-Process Communication
Unsurprisingly, the primary use of Unix domain sockets is for IPC. Apps can implement their own protocols for client/server communication. However, we discovered a unique use of Unix domain sockets for real-time media streaming in video recording apps. These apps leverage the `setOutputFile(fd)` API, which outputs camera and microphone data to a file descriptor. By passing the output file descriptor to the API via a Unix domain socket connection, the server can read real-time camera/microphone output, enabling live streaming.

```java
// Use UNIX domain socket to prevent subsequent initialization
new LocalServerSocket("com.android.internal.telephony");
try {
    // Code to initialize the server
} catch (java.io.IOException ex) {
    hasException = true;
}
```

Baidu Push, Tencent XG, and Umeng Message are top message push service providers in China, often chosen due to the state-level blocking of Google services. Multiple apps integrated with the same push service library may coexist on the same device, leading to potential conflicts.