This is strongly related to #4881 but I'm not sure if it's feature request or
if it's really a bug. Given that the Decorators spec states the decorator can
return a new constructor function, it sort of seems like it should work.
The following example uses constructor function types and very nearly works.
View this in playground
    interface ConstructorFunction {
        new (...args:any[]):T;
        prototype:T
    }
    interface Disappearing {
        isVisible():boolean;
        vanish():void;
    }
    function Disappearing(ctor:ConstructorFunction):ConstructorFunction {
        let result = >ctor;
        result.prototype.isVisible = () => {
            return !this['_hasDisappeared'];
        };
        result.prototype.vanish = () => {
            this['_hasDisappeared'] = true;
        };
        return result;
    }
    // This seems like it should work
    // @Disappearing
    // class Cat {
    //     constructor(private name:string) {}
    // }
    // but I have to do this
    @Disappearing
    class Cat implements Disappearing {
        constructor(private name:string) {}
        isVisible() {return false}
        vanish(){}
    }
    // let ctor = wrappedBlah(Cat);
    let buster = new Cat('Buster');
    alert(`Is Buster visible? -> ${buster.isVisible()}`);
    buster.vanish();
    alert(`Is Buster visible? -> ${buster.isVisible()}`);