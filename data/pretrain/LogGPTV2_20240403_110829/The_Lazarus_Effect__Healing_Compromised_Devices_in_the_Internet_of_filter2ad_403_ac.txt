handle the identity claim, for instance by integrating it into the
DeviceID certificate. When the hub receives a claim of a device with
DeviceID in version x + 1 to be identified as device with dev_uuid,
the hub requests the identity token. The hub computes the expected
identity token on its side as all parameters are known to the hub.
In case the received and expected token match, re-association is
complete and the new DeviceID accepted.
4.5 End-to-End System
This part describes how we compose our TEE-based latching, our
TEETrigger, the protection mechanism for critical peripherals and
DICE++ in our end-to-end system, Lazarus. We use CIDER [54] as
a basis for this. Figure 4 illustrates the boot flow of Lazarus. Our
first step is to apply temporal isolation, i.e., to execute the core
functionalities of Lazarus before untrusted software like update
download functionality or business logic executes. This means that
the core part of Lazarus executes directly after an orderly reset.
After a reset, we execute DICE++ (including DICE, run by the
MCU). After activating the latches, Lazarus executes its main func-
tionality “Lazarus Core” on the next lower security tier in the TEE.
Lazarus Core checks whether an update for business logic or
for Lazarus itself is pending, i.e., whether an update candidate was
stored in the “staging area” on persistent storage. If so, Lazarus Core
verifies the integrity and authenticity of the update using a public
RESETDICE ++dev_uuid,core_authx+1RecoveryTCBDevice IDCDIUDSAlias IDdev_uuid,dev_authx+1UntrustedSowareHubAlias IDdev_uuid,dev_authx+1RESETDICE++UpdatePending?UpdateSetupTEETrigger, HandlersBusinessLogicUpdateDownloaderValid?BootTicket?YNNYNYHW/ROM/Part of LazarusLazarus CoreUntrustedRWLatchWRLatchTEETrigger TimeoutWRLatchTEETrigger Timeout/Update DownloadedSession 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan11key it received during device provisioning and a version number.
If the update is valid, Lazarus Core applies the updates and resets.
Otherwise, e.g., if it has been tampered with in the communica-
tion channel, Lazarus Core executes its “update downloader”. The
downloader contacts the hub to retrieve authenticated software.
The downloader, technically part of Lazarus, has a significant
attack surface, as it has to handle arbitrary packets from the in-
ternet. Lazarus Core thus considers it untrusted software. This is
why Lazarus executes the update downloader in the same security
tier as business logic outside the TEE. Before executing untrusted
software, Lazarus Core WRLatches itself including the downloader
on storage. This gives the update downloader the same storage
protection as Lazarus Core. In addition, Lazarus Core WRLatches
the main memory region occupied by trusted runtime components
running alongside untrusted software. Further, Lazarus Core ini-
tializes TEETrigger and constrains access to critical peripherals.
Lazarus Core also derives the respective DeviceID and AliasID key
material according to the DICE specification for untrusted software.
In case no update is pending, Lazarus Core checks for the pres-
ence of a “boot ticket” in the staging area. The boot ticket is an
accreditation of the hub to boot one time into business logic with-
out requiring further interaction with the hub through the update
downloader. Without a valid boot ticket present, Lazarus Core tries
to acquire a boot ticket using the update downloader. The down-
loader attests the device’s software stack to the hub by presenting
the DeviceID and AliasID. If the hub is satisfied, it issues a boot
ticket. Like a deferral ticket, the boot ticket is a hub-signed data
structure that contains a nonce for ensuring freshness. Lazarus
Core generates and stores a fresh nonce at each reset. Upon reset,
Lazarus Core can verify the signature of a staged boot ticket and
compare the contained nonce with the stored, old nonce.
If a valid boot ticket is present, Lazarus Core boots into the
business logic. This stack may execute as long as it can acquire fresh
deferral tickets from the hub. Business logic can also authenticate
itself to the hub using its AliasID and DeviceID credentials and
may retrieve boot tickets. Ticket acquisition from the hub can be
implemented as a task in an OS.
The only parts of Lazarus active while untrusted software runs
are TEETrigger and the logic regulating access to critical peripher-
als. This code has no access to secrets, making side channel attacks
pointless. The TEE exposes a small set of well-defined interfaces to
allow untrusted software to interact with TEETrigger and to use
critical peripherals.
Similar to [54], detection of compromise and identification of
vulnerabilities is not in our scope. We consider such lines of work or-
thogonal to our approach [53]. Availability of devices due to attacks
on the communication channel or by making the hub unavailable
are discussed in [54].
5 IMPLEMENTATION
Our goal is to demonstrate that Lazarus can be implemented even
on low-cost devices. Therefore, we implemented a prototype for a
low-end COTS MCU from the NXP LPC5500 series [33]. The price
for MCUs in this category ranges from cents to a few dollars [17].
While first MCUs based on the ARMv8-M specification have only
Figure 5: Overview of the implemented functionality along
with execution modes and privilege levels.
recently been released, we expect this generation of MCUs to find
wide adoption on the market.
We chose the LPCXpresso55S69 development board [32] as a
target for our implementation. The board is equipped with an NXP
LPC55S69 (revision 0A) MCU, peripherals such as an accelerometer
and several expansion ports. The LPC55S69 MCU features a dual
core 32-bit ARM Cortex-M33 processor based on the ARMv8-M
architecture [3] running at 96 MHz with TrustZone-M, 320 KB of
SRAM, 640 KB of flash, a watchdog timer, a HRNG, crypto acceler-
ation and DICE support [31, 35]. Since our board does not include
networking hardware, we attached an off-the-shelf Wi-Fi chip, the
ESP8266 [13], to one of the board’s USARTs via one of the expan-
sion ports. The ESP8266’s serial port connection to the USART runs
at 115,200 baud, thus limiting the network bandwidth to about 14
KB per second.
With TrustZone-M, the Cortex-M CPU can be in secure or non-
secure mode. Each mode has a privileged and an unprivileged level.
Non-secure execution can invoke the secure world through Non-
Secure Callable (NSC) functions. Peripherals can be configured as
fully secure, fully non-secure or split into secure and non-secure
partitions. When the CPU is in a secure state, it can access both
the secure and the non-secure world. In contrast, the processor can
access only the non-secure resources when it is in a non-secure
state.
The MCU hosts a secure AMBA AHB5 controller [2, 35] which
allows configuring the whole memory map including flash, RAM
and peripherals as secure/non-secure and privileged/unprivileged.
The ARM AMBA AHB5 protocol introduces signaling for secure
and non-secure transactions and therefore extends the TrustZone
technology from the processor to the entire system. Lazarus can
be implemented on any ARMv8-M microcontroller that allows
securing our critical peripherals, which holds for every ARMv8-M
microcontroller currently on the market.
Our prototype splits the different functions of Lazarus into sep-
arate binaries running in different tiers as illustrated in Figure 5
and explained in the following. The deployment of the binaries
and their execution in secure and non-secure mode led to the flash
layout depicted in Figure 6.
We implemented the Lazarus prototype in C. Table 1 summarizes
the Lines of Code (LoC) of our prototype, measured with Lizard [47].
The Lazarus functionality executed in the secure world, consisting
of DICE++, Lazarus Core (LZ Core) and Core Patcher (CP), has less
than 5k LoC in total. The update downloader (UD) has about 1.4k
RESETDICEDICE ++UntrustedSowareLazarusCoreCorePatcherUpdate applied from Staging AreaNon-SecureSecure PrivilegedReset TriggerSecure UnprivilegedSession 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan12Table 1: LoC of the different components of our prototype.
DICE++
1,668
LZ Core
2,753
CP
571
UD
1,359
Crypto CMSIS NXP
3,564
5,682
1,764
LoC. In addition, our prototype uses parts of the RIoT crypto library
[27], and parts of the CMSIS and NXP hardware-specific code.
Both CMSIS and NXP are relatively large bodies of headers and
support libraries that implement a hardware abstraction layer for
a large number of different hardware features of the Memory Pro-
tection Unit (MPU). Our prototype uses only a small number of
these hardware features and a similarly small fraction of the CMSIS
and NXP code. We excluded code (e.g., header and C files) that our
prototype obviously does not use from the counts in Table 1. Even
so, the CMSIS and NXP numbers still overestimate the amount of
code used in our prototype, as separating all unused code would
have been a complex task.
DICE and DICE++. As the NXP LPC55S69 supports DICE accord-
ing to the Trusted Computing Group (TCG) specification [50], we
do not have to implement DICE ourselves. DICE executes directly
out of ROM after device reset before any other software is executed.
For this reason, we cannot modify DICE, which is why we imple-
mented DICE++ as a separate binary executed right after DICE.
The MCU executes the first code from flash after DICE from ad-
dress 0x00000000, which is where we placed DICE++. We calculate
static_sym using HMAC-SHA256 at each boot. Instead of using the
UDS (which we cannot access because DICE latches it), we derive
static_sym from the CDI which DICE passes to DICE++. This does
not weaken the security model because we remove the CDI before
passing control to the next layer and hand over only a re-derivation
of the CDI:
′ := HMAC(CDI , Hash(Lazarus_Core))
CDI
DICE++ derives core_auth and CDI’ using HMAC-SHA256.
For DICE++, we only need to protect dev_uuid and the DICE++
binary itself from being overwritten by the following layers. To
ensure this, we execute DICE++ in secure privileged mode and all
following layers as either secure unprivileged or non-secure. We
also use the secure AHB controller to WRLatch DICE++ including
dev_UU ID. The secure AHB controller can only be configured
when executing secure privileged. Once activated, it cannot be re-
configured or switched off until the next reset. This forces us to
activate all required latches at once during TEE configuration. For
this reason, we configured the secure AHB controller in DICE++
to also WRLatch code and data of Lazarus core that we execute in
secure unprivileged mode. We also use the secure AHB controller to
map the critical peripherals into the secure world before executing
untrusted software.
Lazarus Core. Lazarus Core is responsible for deriving the token
dev_auth for Lazarus updates, for DeviceID and AliasID derivation,
for boot ticket verification, for boot nonce generation, for checking
if authorized code is present or whether an update must be applied,
for verifying and applying staged updates, and for regulating access
to critical peripherals.
Figure 6: Layout of the binaries in flash memory along with
their execution mode.
For secure communication with the hub, Lazarus Core derives
the DeviceID and AliasID from CDI’ and provides the signed AliasID
to untrusted software as input mapped to specific RAM regions. For
these derivations, Lazarus uses elliptic-curve cryptography with
the prime256v1 curve. The public keys are embedded into X.509
certificates and the DeviceID certificate is signed by the hub in order
to establish a Public Key Infrastructure (PKI). For the derivation of
dev_auth, Lazarus Core uses HMAC-SHA256.
To regulate access to critical peripherals and to interact with
TEETrigger, Lazarus Core sets up NSC functions as an interface for
untrusted software. We implemented several of these NSC func-
tions, i.e., handlers, for controlling access to critical peripherals. For
our implementation we considered the FMC, the power control
peripheral, and the WDT as critical [35]. The handler for the WDT
implements the TEETrigger deferral logic. For deferral ticket nonce
generation, the handler uses the HRNG.
Our handler for the power control peripheral ensures a device
can only be put into those low-power states that do not affect
TEETrigger. Its underlying WDT is driven by the MCU’s FRO_1MHz
clock. Whether this clock is running depends on the power state
of the MCU. In active and sleep mode, it is enabled. However, in
deep sleep, the state of the clock can be configured off by software.
In the power-down modes the clock is off, which is why we block
deep sleep and power-down requests.
Our handler for the FMC allows untrusted software only writes
to flash memory allocated to untrusted software and to the staging
area. Untrusted software thus remains capable of persisting data to
specific flash regions, e.g., for providing boot and deferral tickets
or staging updates. In addition, the handler implements a simple
threshold scheme that disallows excessive flash memory writes. The
protection of critical peripherals is not transparent to untrusted
software. For this purpose, we modified the relevant libraries to
use the handler function instead of directly interacting with the
peripheral.
Core Patcher. In general, Lazarus Core is responsible for verifying
and applying updates. However, as it cannot update itself in flash, in
case a Lazarus Core update is present on the staging area, Lazarus
Core only verifies this update and then invokes the Core Patcher.
The Core Patcher’s sole responsibility is to apply the Lazarus Core
update. Like Lazarus Core, the Core Patcher runs in the secure
world and can only be invoked by Lazarus Core itself. This design
makes it possible to update all binaries except DICE++.
Update Downloader. The update downloader is part of Lazarus,
but as it implements a networking stack for communicating with
the hub, it is considered untrusted software. This is why we execute
it in the non-secure world. Our handler for the FMC peripheral
Non-Secure FlashSecure FlashUpdateDownloaderData…StagingAreaCorePatcherDICE++LazarusCore0x000000000xFFFFFFFFBusinessLogicSession 1: IoT Security and Privacy ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan13ensures that the update downloader can only write to specific areas
in flash memory and thus not overwrite itself or other parts of
Lazarus in case of compromise.
We used the ESP8266 Wi-Fi chip [13] for TCP/IP communication
with the hub and implemented our own format for headers for
binary updates. We sign all messages exchanged between the de-
vice and the hub with their respective private keys and ensure the
freshness of critical messages using nonces for tickets and version
numbers for updates. We implemented the update downloader as
a bare-metal application. An advantage of our implementation is
that the embedded OS Lazarus protects does not necessarily need
to implement its own update mechanism.
Our prototype treats the ESP8266 as a fixed-function peripheral
that is not subject to compromise. However, the ESP8266 has been
compromised in the past [7]. The ESP8266 is effectively another
small microcontroller running its own firmware stored in flash. It
also exposes a firmware update interface. We disabled this interface
by connecting its GPIO0 pin to 3.3V.
Vulnerabilities in the ESP8266 firmware might still allow an
attacker to overwrite it and thus completely cut off our network
connection. Such attacks might originate with the untrusted soft-
ware or on the network. One can envision several defenses based
on Lazarus or CIDER primitives to protect the ESP8266. For ex-
ample, a more robust version of the ESP8266 could write-latch its
firmware early in boot, such that it cannot be overwritten even if
a potential vulnerability is exploited. Lazarus could also support
ESP8266 firmware updates and treat the ESP8266 as a critical device
by placing trusted handlers between the ESP8266 and untrusted
software.
Business Logic. We implemented two applications representing
real-world use cases. The first application is a traffic light controller
which controls LEDs via GPIO. The second application periodically
measures the temperature through an ADC sensor and records
the values in flash. Both applications run as tasks on FreeRTOS.
We implemented the functionality for acquiring boot and deferral
tickets as a separate task in FreeRTOS. This task uses the ESP8266
for the communication with the hub.
Hub and Provisioning Environment. Neither the hub nor the pro-
visioning environment are part of the core Lazarus device imple-
mentation. However, in order to be able to perform a complete
evaluation of Lazarus, we also implemented very simple prototypes
of a hub and a provisioning environment.
We implemented the hub in Python. The hub supports receiving
AliasID certificates from the device, exchanging boot and deferral
tickets and sending firmware updates. It is also able to issue an up-
dated signed device configuration, e.g. to change Wi-Fi credentials,
certificates or the hub’s address.
For device provisioning, we implemented a Python script that
builds (using gcc-arm-none-eabi) and flashes the different bina-
ries. At first boot, the MCU allows access to its memory via the
SWD Debug Interface using the NXP Link2 debugger to retrieve
the Certificate Signing Request (CSR) for the DeviceID certificate,
static_sym and dev_uuid, and to deploy the signed DeviceID along
with the trust anchors for the hub and for code signing. The script
also writes a device configuration data structure containing initial
Wi-Fi credentials and the hub address.
Table 2: Size in bytes of our binaries.
Layer
Size (bytes)
DICE++
10,720
LZ Core
43,156
CP
7,676