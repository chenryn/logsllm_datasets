2.0
0.04
34.6%
64.7%
2.8%
Figure 1. Statistics of the password leak datasets used in this paper.
that users tend in general to select passwords that have low
guessing entropy. There is no available evidence indicating
that users choose signiﬁcantly stronger master passwords.
Given the growing use of password vaults by consumers
and the vulnerabilities they introduce—bulk compromise on
servers or compromise on consumer devices—the risk of
brute-force attacks is real and pressing.
Enter decoys. It is the inherent limitations of conventional
PBE in thwarting ofﬂine brute-force attack that motivated
Bojinov et al. [3] to propose the Kamouﬂage system. As
explained above, the idea behind Kamouﬂage is to enable
multiple master passwords to successfully decrypt a vault,
while only the true master password yields the correct vault
plaintext. The hope is that the attacker cannot distinguish
between real and decoy ofﬂine, and must
instead make
online queries using decrypted credentials to identify the
true vault.
Speciﬁcally, to protect the true master password and vault
), Kamouﬂage generates N−1 decoy (mpwi, (cid:2)Pi)
(mpw∗, (cid:2)P ∗
pairs and stores them in a list. Decoys are generated using
dictionaries of commonly seen tokens (strings of contiguous
letters, numbers or symbols) found in a password leak. We
describe decoy generation in more detail in the next section.
Every (cid:2)Pi is encrypted using a conventional PBE scheme
under mpwi and kept at a location Lj that also calculated
from mpwi. If a collision results during the generation
process, i.e., a master password is created that maps to an
already occupied location, then a fresh (mpwi, (cid:2)Pi) pair is
generated. Thus, given master password mpw(cid:2), it is possible
to locate the corresponding vault and attempt to decrypt it
with mpw(cid:2).
Kamouﬂage has some notable deployment limitations. As
it stores N vaults, its storage cost is linear in the security
parameter N. Additionally, Kamouﬂage discourages user
passwords that are not parsable using its dictionaries, a major
obstacle to practical use. Such password rejection may also
degrade security by encouraging users to choose weaker
passwords than they otherwise might. Finally, Kamouﬂage
provides no guidance on protecting the conﬁdentiality of
domains paired with the passwords in a vault and on stor-
483483
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
ing computer-generated passwords, both features of today’s
commercial systems. More fundamentally, the approach of
hiding the true vault among an explicitly stored list of decoy
vaults has inherent security limitations, as we explain in the
next section.
Threat Model. The primary threat model that we consider
is theft of encrypted password vault due to adversarial
compromise of a vault storage service, a lost or stolen client
device, or a software vulnerability allowing exﬁltration of
the encrypted vault (c.f., [29]). The attacker does not know
anything about the passwords present inside the vault but she
has knowledge about the distribution of human generated
passwords (learned from publicly available password leaks).
She also knows the encryption algorithm and the other
information (if any) used by the algorithm at the time of
encryption or decryption. She does not know the master
password or any randomness consumed by the encryption
algorithm.
Her objective is to learn the correct master password (and
corresponding in-vault passwords) using a minimal amount
of computation and online querying. She tries to decrypt
the vault using ofﬂine brute force attack against the master
password. She tests the correctness of a vault by attempting
to log into a domain with a corresponding credential in the
vault.
We will measure both the ofﬂine and online resources
used by the attacker in terms of number of decryption
attempts and number of online queries, respectively. To
attack a conventionally encrypted vault, no online queries are
required and the ofﬂine work is a function of the adversary’s
uncertainty about the master password; for Kamouﬂage, the
claimed security is ofﬂine work equivalent to that of con-
ventional encryption and an expected N/2 online queries.
In each of our experiments, we will calculate expected
ofﬂine and online work over a choice of master password
drawn from a distribution that we will explicitly specify. The
distributions we use will be informed by password leaks, as
we now discuss.
Datasets.
In the course of this paper we use a number
of datasets to train password language models,
to train
attackers, and to test attackers. We primarily use three
large-scale password leaks: RockYou, Myspace, and Yahoo.
RockYou is the largest leaked clear-text password set to
date and is used extensively in modeling distributions of
human-chosen passwords [21], [35], [37]. The Myspace leak
occurred when passwords for user accounts were publicly
posted; the passwords were gleaned from a phishing attack
against Myspace’s home page. In 2012, Yahoo lost nearly
450,000 passwords after a server breach. Note that all of
these leaks contain only original plaintext passwords and
not cracked password hashes, as in some other leaks.
As we wish to ensure different
training sets for the
password model and attacker in some cases, we partition
the RockYou passwords into two sets, randomly assigning
90% of the passwords to a set denoted RY-tr and the
remaining 10% to RY-(ts). We train our language model
with RY-tr only, but use all sets for adversarial training and
testing (with cross-fold validation as appropriate). Figure 1
presents statistics on our data sets. Given its large size, we
did not make use of multiple splits of the RockYou data
set in our experiments. We use RY-ts as a testing set to
model settings in which the adversary and defender have
equivalently accurate knowledge of the distribution from
which user passwords originate. The Myspace and Yahoo
data sets serve to model more challenging scenarios in which
the adversary has more accurate knowledge of the password
distribution than the defender.
III. CRACKING KAMOUFLAGE
The stated security goal for Kamouﬂage is that given an
encrypted vault, an attacker must ﬁrst perform an ofﬂine
brute-force attack to recover all of the plaintext vaults
and then perform an expected N/2 online login attempts
to identify the true vault. Through simulations using the
leaked password datasets discussed above, we now show
that Kamouﬂage falls short of its intended security goal. We
ﬁrst present more details on Kamouﬂage, and then describe
and analyze an attack against it.
Decoy generation in Kamouﬂage. To construct decoy
plaintext vaults, Kamouﬂage uses an approach based on
deriving templates from the true plaintext vault. Let Ln, Dn,
and Sn each be a subset of all n-digit strings containing only
upper or lower case English letters, only decimal digits, and
only punctuation marks and other common ASCII symbols,
respectively. We refer to the sets Ln, Dn, and Sn as token
dictionaries and individual strings in token dictionaries as
tokens. No token appears in multiple token dictionaries.
Token dictionaries are initially populated with tokens by
parsing the passwords in a password leak2 and placing each
resulting token in the appropriate dictionary. Here parsing
of each password in the leak is performed by greedily
picking the longest contiguous preﬁx of just letters, digits, or
symbols of a password, moving this preﬁx to the appropriate
token dictionary, and then repeating the process on the
remainder of the original password.
Once token dictionaries are ﬁxed, Kamouﬂage parses a
user-input password as a sequence of tokens found in the
dictionaries. Successful parsing yields a sequence of tokens
whose concatenation equals the original password. As above,
parsing involves greedy decomposition of the password into
tokens of contiguous letter, digit, or symbol strings; the
presence of each token in the appropriate dictionary is then
checked. (If any token is not present
in its appropriate
2Also suggested in [3] is to use the dictionaries used by password
cracking tools such as “John the Ripper”. In our experience leaks work
better for Kamouﬂage.
484484
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
dictionary, then Kamouﬂage rejects the input password and
prompts the user to pick another.)
A password template is the structural description of a
password, expressed as the sequence of token dictionaries
corresponding to tokens yielded by parsing of the password.
For example, the password password@123 is parsed as
password, @, 123, and the associated template is therefore
L8S1D3.
A vault template extends the notion of a password tem-
plate to sequences of passwords, while also keeping track of
reuse of the same token in multiple locations. For a sequence
of passwords mpw∗, (cid:2)P ∗, the vault template is generated as
follows. First, parse each password. Then, for each unique
token across all of the parsings, replace it with a symbol Xi
for X ∈ {L, D, S} where n denotes the length of the token
n
and i denotes that this is the ith token in Xn found in the
sequence of parsings. The resulting sequence of password
templates constitutes the vault
template. In the example
below, the ﬁrst column contains the passwords composing
a small vault: a master password followed by two in-vault
passwords (for logging into websites). The second column
contains the sequence of corresponding password templates
that make up the full vault template.
password@456123
password4site
bob!Site
L1
8S1
→ L1
8D1
L1
3S2
1D1
6
1L1
4
1L2
4
Observe that the symbol L1
8 is used twice, as the substring
password appears twice, but the distinct substrings site
and Site are respectively replaced by distinct symbols L1
4
and L2
4.
Given the vault template for (mpw∗, (cid:2)P ∗
), Kamouﬂage
produces each decoy vault (mpwi, (cid:2)Pi) by replacing each
unique symbol X i
n with a token chosen uniformly at random
from the token dictionary Xn.
The attack. We exploit two vulnerabilities in Kamouﬂage.
First, all of the decoy master passwords have the same
template as the true master password. As soon as an adver-
sary recovers any (decoy or real) master password during
an ofﬂine brute-force attack, the corresponding template is
revealed. Knowledge of this template enables the adversary
to narrow its search signiﬁcantly, to master passwords that
match the revealed template. This strategy permits an ofﬂine
attack to be accelerated to the point where it is faster than
cracking a conventional PBE ciphertext.
Second, decoy master passwords are chosen uniformly
with respect to the master-password template, i.e., tokens are
selected uniformly at random from their respective symbol
dictionaries. The decoy master passwords that result are
distributed differently than real, user-selected passwords.
Thus, if an adversary guesses master passwords in order
of popularity, the real master password is more likely to be
assigned a high rank (and so guessed sooner) than the decoy
485485
master passwords.
Given these two vulnerabilities, we craft an attack that
employs a simple model of password likelihood in which the
probability of a password is the product of the probability
of its template and the probabilities of replacements for
each template symbol. For example, Pr[password9] =
Pr[L8D1] · Pr[password|L8] · Pr[9|D1]. The model is trained
using a password leak. Speciﬁcally, Pr[L8D1] is deﬁned to
be the empirical probability that a password in the dataset
has template L8D1, and similarly for other passwords. (Other
models may be used, of course.)
Given this model and a challenge consisting of N
Kamouﬂage-encrypted vaults, the attack proceeds using two
guessing strategies, one ofﬂine and one online. First, in
an ofﬂine effort, the attacker generates trial master pass-
words in decreasing order of their probability within the
password-likelihood model, until one decrypts one of the N
vaults decrypts successfully. At this point, the adversary has
learned the template of the true master password and may
narrow its ofﬂine search to master passwords that match
this template, still in order of their probability within the
password-likelihood model.
Upon decrypting any vault successfully, i.e., discovering
its corresponding (true or decoy) master password,
the
attacker makes an online login attempt against a website3
with one of the retrieved vault passwords. If the login
succeeds, the adversary has identiﬁed the true vault and
halts. Otherwise, the adversary resumes the ofﬂine attack
against master passwords.
Attack evaluation. To evaluate the speedup of our attack
over a na¨ıve Kamouﬂage-cracking strategy, we perform
simulations in a simpliﬁed attack model. The adversary is
given a Kamouﬂage-encrypted vault and access to an oracle
that indicates whether a queried password is the true master
password or not. (This oracle corresponds in a real attack to
an adversary’s ability to test a password from a decrypted
vault via an online query to a real website.) We count oracle
queries as well as ofﬂine decryption attempts. (We treat
the KDF-induced slowdown as a unit measure.) Thus the
challenger takes a master password (mpw∗) and a number
N, and generates an encrypted Kamouﬂage vault set of size
N. Then the attacker is given this vault set and access to
the oracle. Its goal is to guess mpw∗.
The Kamouﬂage decoy generation algorithm uses a dictio-
nary of replacements for Xn. Given that this is public (being
used by any implementation of Kamouﬂage), we assume the
adversary has access to it as well.
Evaluation. We use the RY-tr dataset for training both
Kamouﬂage’s parser (i.e., populating the token dictionaries)
and the attacker mentioned above. We use master pass-
3Recall that Kamouﬂage does not encrypt the sites associated with each
entry in the vault.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:07:53 UTC from IEEE Xplore.  Restrictions apply. 
words sampled from the RY-ts, Myspace, and Yahoo leaks
for testing the performance of the attack. Our evaluation
therefore covers both the case when master passwords are
chosen from a distribution (RY-ts) similar to that used to
train Kamouﬂage as well as the case when they are chosen
from a difference distribution (Myspace and Yahoo). For
every password in each of the three sets, we use the password
as the true master password mpw. We then construct N − 1
decoy master passwords4 for both N = 103 and N = 104
(the values suggested in [3]). We then calculate the median
ofﬂine and online work of 100 iterations for each (mpw, N )
combination using fresh coins for decoy generation in each
iteration.
We used only the ﬁrst 50 million trial master passwords
generated by the attacker’s password-likelihood model for
the attack, meaning the attack will not succeed against
every master password in the datasets. We also exclude any
passwords that can’t be parsed by Kamouﬂage (only 0.01%,
11.43%, and 13.49% of passwords for RY-ts, Myspace, and
Yahoo).
This allows us to compute a number of statistics regarding
the attack’s efﬁcacy. We start with the average difﬁculty of
cracking a given password sampled from the three challenge
distributions, assuming it is crackable using the ﬁrst 50
million guesses by our password cracker. Figure 2 gives a
breakdown of this statistic across the various settings. (The
results for Kamouﬂage+ are explained below.)
The takeaway is that for N = 103, breaking a Kamouﬂage
vault requires on average only 44% of the computational cost
of breaking PBE and incurs only 11 online queries if master