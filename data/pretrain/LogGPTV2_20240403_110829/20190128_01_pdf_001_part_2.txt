+#ifdef HAVE_LIBZ
+ if (cstate->compressed)
+ ereport(ERROR,
+ (errcode(ERRCODE_SYNTAX_ERROR),
+ errmsg("conflicting or redundant options")));
+ cstate->compressed = defGetBoolean(defel);
+#else
+ ereport(ERROR,
+ (errcode(ERRCODE_SYNTAX_ERROR),
+ errmsg("Not compiled with zlib support.")));
+#endif
+ }
else if (strcmp(defel->defname, "oids") == 0)
...
CrunchyData PGConf.EU2018 18/36
PostgreSQLSourceCode
HackingPostgreSQL
FinalCode
PostgreSQLSubsystems
HackingthePostgreSQLWay
Is that it?
Not hardly.
Further changes to copy.c for a COMPRESSED state
Changes to track gzFile instead of FILE*
Also have to use gzread()/gzwrite()
Documentation updates in doc/src/sgml/ref/copy.sgml
Regression test updates
Resulting diffstat:
doc/src/sgml/ref/copy.sgml | 12 ++
src/backend/commands/copy.c | 458 +++++++++++++++++++++++++++++++++++++++++++++++++++-----
src/backend/parser/gram.y | 9 +-
src/backend/storage/file/fd.c | 97 ++++++++++++
src/include/parser/kwlist.h | 1 +
src/include/storage/fd.h | 9 ++
src/test/regress/input/copy.source | 20 +++
src/test/regress/output/copy.source | 18 +++
8 files changed, 583 insertions(+), 41 deletions(-)
CrunchyData PGConf.EU2018 19/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
PostgreSQL Subsystems
PostgreSQL has specific ways of handling
Memory management
Error logging / cleanup
Linked lists (multiple ways...)
Catalog lookups
Nodes
Datums and Tuples
CrunchyData PGConf.EU2018 20/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Memory Management
All memory is part of a memory context
Allocated through palloc()
Contexts exist for most of what you would expect
CurrentMemoryContext - what palloc() will use
TopMemoryContext - Backend Lifetime
Per-Query Context
Per-Tuple Context
CrunchyData PGConf.EU2018 21/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Errors and Asserts
Internal ”can’t happen” cases can use elog()
Always runs
Should not be used where a user might see it
May be useful for debugging
Assert() is also available
Only runs in Assert-enabled builds
Be wary of making Assert builds act differently from non-Assert builds
Useful to make sure other hackers are using function properly
CrunchyData PGConf.EU2018 22/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Logging from PostgreSQL
Use ereport() with errcode() and errmsg()
error level and errmsg() are required
PG has a style guide for error messages
ERROR or higher and PG will handle most cleanup
Rolls back transaction
Frees appropriate memory contexts
+ if (gzwrite(cstate->copy_gzfile, fe_msgbuf->data,
+ fe_msgbuf->len) != fe_msgbuf->len)
+ ereport(ERROR,
+ (errcode_for_file_access(),
+ errmsg("could not write to COPY file: %m")));
CrunchyData PGConf.EU2018 23/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
SysCache and Scanning Catalogs
General function ’SearchSysCache’
Defined in utils/cache/syscache.c
Search a system catalog based on some key
Up to four keys can be used
Helper routines for fewer keys available (SearchSysCache1, etc)
Must call ReleaseSysCache() when done with a tuple
Also some convenience routines in lsyscache.c
Look for existing routines before implementing a new one
CrunchyData PGConf.EU2018 24/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Nodes
PostgreSQL expression trees are made up of Nodes
Each node has a type, plus appropriate data
’type’ of a Node is stored in the Node, allowing IsA() function
Nodes created using makeNode(TYPE)
Used extensivly by the grammar, but also elsewhere
To add a new Node type
Add to include/nodes/nodes.h
Create make / copy / equality funcs in backend/nodes/
CrunchyData PGConf.EU2018 25/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Datums
General structure for a given single value
Defined in postgres.h
Lots of helper routines for working with Datums
Int32GetDatum(int) - Returns Datum representation of an Int32
DatumGetInt32(Datum) - Returns int32 from a Datum
Many others for each data type
Datums may be stored ”out-of-line” (aka TOAST’d)
CrunchyData PGConf.EU2018 26/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Tuples
Tuples are essentially ”rows”, comprised of Datums and other things
Heap Tuple defined in include/access/htup.h
HeapTupleData is in-memory construct
Provides length of tuple, pointer to header
Many different uses
Pointer to disk buffer (must be pin’d)
Empty
Single pmalloc’d chunk
Seperately allocated
Minimal Tuple structure
CrunchyData PGConf.EU2018 27/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Tuples - continued
HeapTupleHeaderData and friends are in htup details.h
Number of attributes
Provides various flags (NULL bitmap, etc)
Data follows the header (not in the struct)
Lots of macros for working with tuples in details
CrunchyData PGConf.EU2018 28/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Other Subsystems
Many simple things have already been written and generalized
Generalized code should go into ’src/backned/lib/’
Look for existing code
Existing code is already portable
Already been tested
Includes regression tests
Means you have less to write
CrunchyData PGConf.EU2018 29/36
PostgreSQLSourceCode MemoryManagement
HackingPostgreSQL ErrorHandling/Logging
FinalCode CatalogLookups
PostgreSQLSubsystems Nodes
HackingthePostgreSQLWay DatumsandTuples
OtherSubsystems
Selection of Subsystems
Simple Linked List implementation - pg list.h, list.c
Integrated/inline doubly- and singly- linked lists - ilist.h, ilist.c
Binary Heap implementation- binaryheap.c
Hopcroft-Karp maximum cardinality algorithm for bipartite graphs - bipartite match.c
Bloom Filter - bloomfilter.c
Dynamic Shared Memory Based Hash Tables - dshash.c
HyperLogLog cardinality estimator - hyperloglog.c
Knapsack problem solver - knapsack.c
Pairing Heap implementation - pairingheap.c
Red-Black binary tree - rbtree.c
String handling - stringinfo.c
CrunchyData PGConf.EU2018 30/36
PostgreSQLSourceCode
Followthemailinglists
HackingPostgreSQL
Style
FinalCode
Hackingwithgit
PostgreSQLSubsystems
SubmittingPatches
HackingthePostgreSQLWay
pgsql-hackers
Primary mailing list for discussion of PostgreSQL development
Get a PostgreSQL Account at https://postgresql.org/account
Subscribe at https://lists.postgresql.org
Discuss your ideas and thoughts about how to improve PostgreSQL
Watch for others working on similar capabilities
Try to think about general answers, not specific
Be supportive of other ideas and approaches
What happened to COPY ... COMPRESSED ?
Send and receive COPY data from program instead
COPY ... PROGRAM ’zcat ...’
Not quite identical but large overlap
Simpler in a few ways than direct zlib support
CrunchyData PGConf.EU2018 31/36
PostgreSQLSourceCode
Followthemailinglists
HackingPostgreSQL
Style
FinalCode
Hackingwithgit
PostgreSQLSubsystems
SubmittingPatches
HackingthePostgreSQLWay
Code Style
Try to make your code ’fit in’
Follow the PG style guide in the Developer FAQ
Beware of copy/paste
Aim to be C99-compliant (with caveats)
Comments
C-style comments only, no C++
Generally on their own lines
Describe why, not what or how
Big comment blocks for large code blocks
Functions, big conditions or loops
CrunchyData PGConf.EU2018 32/36
PostgreSQLSourceCode
Followthemailinglists
HackingPostgreSQL
Style
FinalCode
Hackingwithgit
PostgreSQLSubsystems
SubmittingPatches
HackingthePostgreSQLWay
Error Message Style
Three main parts to an error message
Primary message
Detail information
Hint, if appropriate
Do not make assumptions about formatting
Do not end an error message with a newline
Use double-quotes when quoting
Quotes used for filenames, user identifiers, and other variables
Avoid using passive voice- use active voice, PostgreSQL is not a human
CrunchyData PGConf.EU2018 33/36
PostgreSQLSourceCode
Followthemailinglists
HackingPostgreSQL
Style
FinalCode
Hackingwithgit
PostgreSQLSubsystems
SubmittingPatches
HackingthePostgreSQLWay
Git crash-course
Clone down the repo-
git clone https://git.postgresql.org/git/postgresql.git
Creates postgresql directory as a git repo
cd into postgresql
Create a branch to work on
git checkout -b myfeature
Creates a local branch called myfeature
Hack on PostgreSQL! Make changes!
Commit changes and build a diff
git add files changes
git commit
git branch –set-upstream-to=origin/master myfeature
git format-patch @{u} –stdout >myfeature.patch
CrunchyData PGConf.EU2018 34/36
PostgreSQLSourceCode
Followthemailinglists
HackingPostgreSQL
Style
FinalCode
Hackingwithgit
PostgreSQLSubsystems
SubmittingPatches
HackingthePostgreSQLWay
Submitting Your Patch
Patch format
Context diff or git-diff
Ideally, pick which is better
Multiple patches in one email- do not multi-email
Include in email to -hackers
Description of the patch
Regression tests
Documentation updates
pg dump support, if appropriate
Register patch on https://commitfest.postgresql.org
CrunchyData PGConf.EU2018 35/36
PostgreSQLSourceCode
Followthemailinglists
HackingPostgreSQL
Style
FinalCode
Hackingwithgit
PostgreSQLSubsystems
SubmittingPatches
HackingthePostgreSQLWay
Questions?
Thanks!
CrunchyData PGConf.EU2018 36/36