execute (same HT)
Seqmeasure
AVX2 instr.
Osiris Reason
)
)
, (
, (
,
,
Reset Seq.
Trigger Seq.
Trigger Seq.
S0
S1
Reset Seq.
Figure 1: State machine representing different microarchitec-
tural states and transitions between them.
We call a sequence of instructions that causes a transition to
S0 a reset sequence (Seqreset).
(2) In the second step, the victim (or the sending end)
changes the state of the abused microarchitectural component
based on a secret. The victim might cache a value depending
on the secret, or power up the AVX2 unit by executing an AVX2
instruction. We call the new state the trigger state (S1). We
call a sequence of instructions causing a transition to S1 a
trigger sequence (Seqtrigger).
(3) Finally, the attacker tries to extract the secret value by
checking whether the abused component is in the reset state
S0 or the trigger state S1. This is typically done by measur-
ing the execution time of a particular instruction sequence,
which we call the measurement sequence (Seqmeasure). The
measurement sequence may—in fact, typically does—have
side effects beyond measuring, i.e., it also inﬂuences the state.
Table 1 shows examples of these three instruction se-
quences for several known side channels. For example, Flush+
Reload uses CLFLUSH as the reset, and memory accesses (e.g.,
via MOV) as trigger and measurement sequences. The careful
reader will notice that existing side channels often do not
require instruction sequences, but just a single instruction per
step—a simpliﬁcation that we will leverage ourselves later.
Figure 1 shows a state machine representing the relation
between the three steps of an attack and the different microar-
chitectural states of the abused component. These two states
could represent an abstraction over possibly more complex
states of the component, e.g., different cache levels. However,
to mount a side-channel attack, it is sufﬁcient to distinguish
and transit between two states only.
3.2 Challenges of Side-Channel Fuzzing
Based on this notation, we design Osiris, a fuzzer that aims to
automatically ﬁnd new microarchitectural side channels. The
overall idea is to generate inputs, i.e., instruction-sequence
triples, and then detect whether such a triple forms a side
channel. For this, Osiris executes a triple and measures the
execution time of the measurement sequence. At an abstract
level, we compare timings with and without prior execution
of the trigger sequence. Large timing differences hint at side
channels. While the overall idea is intuitive, several challenges
complicate the search:
Unknown Sequences. First, as we aim for novel side chan-
nels, we cannot assume a priori knowledge of valid reset, trig-
ger, or measurement sequences. This poses a signiﬁcant chal-
lenge to fuzzing, as we have to fuzz all three inputs without
knowing their relations. We are unaware whether an instruc-
tion sequence actually is a reset, trigger, or measure sequence.
Even if we ﬁnd a sequence (e.g., a trigger), we do not know
which counterparts are required for the other two sequences
(e.g., corresponding reset and measurement sequences).
Unknown Side Effects. Second, sequences on their own may
have undesired side effects, such as measurement sequences
that change the state. For example, memory accesses within
the measurement sequence do not only passively observe
the memory access time, but they also change the cache state.
This implies that our state diagram becomes more complex, as
measurement sequences may in fact act as triggers themselves.
If we had a valid reset sequence, this would not be a prob-
lem, as we could revert this change. However, as mentioned
above, we do not know the corresponding reset sequence, and
therefore have to mitigate this problem conceptually.
Dirty State. Third, in the interest of efﬁciency, we want to
fuzz as fast as possible. This, unfortunately, means that a sub-
sequent sequence triple may inherit a dirty, non-pristine state
from its successor. For example, if the ﬁrst triple contains a
memory access, the triple executed after that likely inherits the
cache state. In other words, we cannot assume that sequence
triples run in isolation. They do affect each other.
Generality. Fourth, we want to be as generic as possible and
cover the entire instruction set of a given ISA. That is, instead
of testing just a few popular instructions, we would like to
explore the entire range of instructions and their combinations.
To this end, we not only require knowledge of all instructions
but also a semantic understanding of an instruction’s syntax,
such as its operands and their types.
Indistinguishability. Finally, executing similar instructions
inevitably leads to similar, if not indistinguishable2, side-
channel candidates. In fact, we create thousands of sequence
2Indistinguishable side channels are those which lead to the same attacker
observation on system states.
1418    30th USENIX Security Symposium
USENIX Association
triples, many of which are close to each other. For example,
with reference to known side channels, dozens of instructions
use vector operations to power up the AVX unit. However,
regardless of which instruction is executed, more or less the
same side channel is found. Section 4 elaborates on how we
solved these challenges for Osiris.
3.3 Big Picture
Figure 2 shows the big picture of Osiris, a fuzzer that tackles
these challenges. In step 1 , the code generation stage, we
fuzz potential instruction sequences, i.e., triples of Seqreset,
Seqtrigger, and Seqmeasure. These sequences are generated
from a machine-readable speciﬁcation of the targeted archi-
tectures. The generated triples are then forwarded to step 2 ,
the code execution stage. Here, the generated triples are exe-
cuted in a special order (at least) twice—once including the
trigger (hot path), and once without (cold path). We time
the measurement sequence (Seqmeasure) of both paths to see
if the trigger sequence (Seqtrigger) causes timing differences.
The timing difference is then processed in step 3 . This re-
sult conﬁrmation stage interprets a large timing difference
as the ﬁrst indicator of whether a given triple constitutes a
side channel candidate. On top of this, to address many of the
problems as mentioned earlier, there are additional validation
routines that sort out actual side channels from wrong candi-
dates. For example, we check whether (i) the reset sequence
has any effect at all to exclude a bad triple combination, and
(ii) a different fuzzing order conﬁrms the result. Finally, in
step 4 , we feed the list of conﬁrmed side channels to the
clustering stage. This step clusters similar, indistinguishable
side channels, to ease further analyses of the side channels.
4 Design and Implementation
Next, we discuss the implementation of Osiris for the x86 ISA
and how we solved the challenges enumerated in Section 3.2.
While we chose to implement and evaluate our fuzzer on this
architecture, the overall design is equally applicable to proces-
sors that use a different instruction set, e.g., ARM processors.
In the following, we present the implementation details for
the four stages outlined in Figure 2.
4.1 Code Generation Stage
The goal of the code generation stage is to produce triples
of assembly instruction sequences (a reset sequence Seqreset,
a trigger sequence Seqtrigger, and a measurement sequence
Seqmeasure). Since we are not aware of a clear feedback mech-
anism that can guide the creation of sequence triples, we
opted for the creation of random x86 instructions. To boot-
strap the code generation, we employ a grammar based on a
machine-readable speciﬁcation of x86 instructions. The code
Table 2: Faulting instructions on Intel Core i7-9750H.
Signal
Segmentation fault (SIGSEGV)
Floating-point exception (SIGFPE)
Illegal instruction (SIGILL)
Debug instruction (SIGTRAP)
Number of Occurrences
118
22
10 508
1
generation involves two phases: (1) an ofﬂine phase where all
supported instruction sequences are generated, and (2) an on-
line phase performing the creation of triples. The ofﬂine phase
is executed once for each ISA and consists of instruction cre-
ation and machine-code ﬁle generation. The online phase is
executed repeatedly for each run of the fuzzing process.
4.1.1 Ofﬂine Phase
The output of the ofﬂine phase is an assembly ﬁle contain-
ing all possible instruction variants for the target ISA. This
ﬁle is generated once and reduces the overhead required for
generating and assembling instructions during runtime.
Generation of Raw Instructions. The ﬁrst task is the gen-
eration of all valid x86 instructions. To achieve this, we
leverage a machine-readable x86 instruction variant list from
uops.info [1]. This list extends Intel’s XED iForm3 with ad-
ditional attributes, e.g., effective operand size, resulting in a
large number of instruction variants per instruction. For ex-
ample, this list provides 35 variants for the mnemonic MOV
and 26 variants for the mnemonic XOR, summing up to 14 039
x86 instruction variants overall. The list also contains com-
prehensive information about each instruction variant, e.g.,
extension or category, that we later use for the clustering.
Creation of the Machine Code. The second task is assem-
bling the instructions to machine code. We try to reduce the
number of instructions by treating all registers as equivalent,
i.e., Osiris does not generate the instruction with all possible
register combinations. Osiris, w.l.o.g, relies on a ﬁxed set of
registers as operands for each instruction. We also exclude in-
structions that change the control ﬂow (e.g., RET, JMP) as they
may lead to an irrecoverable state. As branches have been
studied extensively for microarchitectural attacks [3, 4, 6, 23–
25, 50, 54], we do not assume that Osiris would ﬁnd any
new side channels for these instructions. Finally, we add a
pseudo-instruction that allows idling the CPU for a certain pe-
riod of time. This instruction is required to reset components
that are based on power-saving features of the CPU, e.g., the
AVX2 SIMD unit. For each assembled instruction, the ﬁle also
stores a set of attributes, e.g., the ISA extension or instruction
category, that are used in the clustering phase.
3https://intelxed.github.io/ref-manual/xed-iform-
enum_8h.html
USENIX Association
30th USENIX Security Symposium    1419
Ofﬂine
1 Generation
2 Execution
3 Conﬁrmation
4 Clustering
ISA
Instructions
Triple Generation
Timing Measurement
Randomized Execution
Leaking Triples
Clustering
Report
Figure 2: Overview of Osiris. The ofﬂine phase extracts available instructions from a machine-readable ISA description. The
ﬁrst phase generates sequence triples from these instructions. The execution phase measures their execution times and forwards
triples with timing differences to the conﬁrmation phase. If the timing difference persists on randomized execution of the triple,
it is considered a side channel and forwarded to the clustering phase, which categorizes the triple and creates the ﬁnal report.
4.1.2 Online Phase
4.2 Code Execution Stage
When starting Osiris on a machine, the online phase ﬁrst
removes instructions that are not supported on the microar-
chitecture, and then generates all possible sequence triples.
Cleanup of Machine-Code File. The ﬁrst task is the cleanup
of the machine-code ﬁle generated in the ofﬂine phase. This
is required since the generated machine-code ﬁle contains
instruction variants for the entire x86 ISA, including all ex-
tensions. Hence, it contains a signiﬁcant number of illegal
instructions for a given microarchitecture. Moreover, the ﬁle
may also include instructions that generate faults when ex-
ecuted by our framework, e.g., privileged instructions. The
cleanup process is done by executing all instructions once
and maintaining a list of all the instructions that terminated
normally. This process reduces the number of instructions in
the machine-code ﬁle considerably. For example, the number
of user-executable instructions for an Intel Core i7-9750H
is 3390, i.e., 24.1 % of the instruction variants initially gen-
erated in the ofﬂine phase. Table 2 shows the distribution of
faults generated in the cleanup process for this processor. The
majority of the faults (98.7 %) are illegal-instruction faults,
i.e., the instruction is not supported at all or not in user space.
Generation of Sequence Triples. The second task is the
generation of sequence triples from the list of executable
instructions that are forwarded to the code execution stage. We
exploit three observations that allow reducing the complexity
of this task as well as the overhead of the fuzzing process:
1. Most existing non-eviction-based side channels require
only one instruction in each of the sequences.
2. Idling the processor is used only as a reset sequence.
3. Trigger and measurement sequences may be formed of
exactly the same instruction.
Consequently, in our implementation, the triples are generated
by considering all possible combinations of single instruc-
tions, where the sleep pseudo-instruction is only used as a
reset sequence. While our framework is easily extensible to
support multi-instruction sequences, the search space quickly
explodes—a topic we thus leave open to future work.
The goal of the code execution stage is to execute generated in-
put triples and analyze their outcome, i.e., determine whether
an executed triple forms a side channel.
Environment. The triple is executed within the process of
Osiris to not suffer from the additional overhead of process
creation. To reduce external inﬂuences, such as interrupts,
Osiris relies on the operating system to reduce any noise. First,
the operating system ensures that there are no core transitions
that inﬂuence the measurement by pinning the execution of
the triple to a dedicated CPU core. Additionally, this entire
physical core is isolated to ensure that the code is unlikely to
be interrupted, e.g., by the scheduler or hardware interrupts.
Setup. To measure the execution time of a triple, it is placed
on a dedicated page in the address space between a special pro-
log and epilog. The prolog is responsible for saving all callee-
saved registers according to the x86-64 System V ABI 2. The
prolog furthermore ensures that the triple has one page of
scratch space on the stack. Thus, there is no corruption if any
of the instructions in the triple modiﬁes the stack, e.g., the
POP instruction. Furthermore, the prolog initializes all reg-
isters that are used as memory operands to the address of a
zero-initialized writable data page. This prevents corrupting
the memory of Osiris and ensures that executed instructions
access the same memory page. Note that the zero-ﬁlled page
is always the same, and the framework resets this page for
every tested triple. The epilog is responsible for restoring the
registers and the stack state, ensuring that any architectural
change is reverted. Moreover, signal handlers are registered
for all possible signals that can arise from executing an in-
struction, e.g., SIGSEGV. These handlers abort the execution
of the current triple and restore a clean state for Osiris. Fi-
nally, we abstain from parallelization, as this could lead to
unexpected interferences in shared CPU resources.
Measurement. Once the triple is prepared, Osiris executes
the generated sequence twice, once with the trigger sequence
Seqtrigger (hot path) and once without (cold path), as illus-
trated in Figure 3. In both cases, the execution time of the
measurement sequence Seqmeasure is measured. This code
aims to detect the existence of a side channel by observing
1420    30th USENIX Security Symposium
USENIX Association
Seqreset
Seqmeasure
Cold path S0
Seqreset
Seqtrigger
Seqmeasure
Hot path S1
Figure 3: The execution stage receives the triple and executes
Seqmeasure (cold path) and Seqtrigger, Seqmeasure (hot path) af-
ter Seqreset. Timing differences for the two paths are reported.
timing differences in the measurement instruction, depending
on whether or not a trigger was used. A signiﬁcant difference
between the two measurements indicates a candidate side
channel that is then forwarded to the conﬁrmation stage. To
ensure precise time measurement and no unintentional depen-
dency on the timing measurement itself, we add serializing
and memory-ordering instructions around the measured code.
4.3 Result Conﬁrmation Stage
The goal of the conﬁrmation stage is to validate if a triple
reported by the execution stage is an exploitable side channel.
To conﬁrm or refute these candidates, Osiris further analyzes
the identiﬁed triples to rule out other side effects that could
have led to the detected timing difference. Such side effects
include unreliable reset sequences or a dirty state caused
by previous execution (cf. Section 3.2). To eliminate non-
promising candidates, we foresee the following mechanisms.
Repeated Execution. External factors, such as power-state
changes or interrupts, can induce timing differences. To rule
out such cases, Osiris executes the hot path and the cold path
(cf. Section 3.3) over a predeﬁned number of runs to compare
the median of the timings for the two cases. In particular, this
check is passed if the difference between the two medians is
greater than a predeﬁned threshold. The number of measure-
ments is a parameter that allows setting a tradeoff between
precision and runtime. While a high number of repetitions
takes longer, it increases the conﬁdence in the result, as exter-
nal inﬂuences are statistically independent and thus average
out. Too few repetitions reduce the conﬁdence in the accuracy
of the reported results, leading to false positives.
Non-Functional Reset Sequences. The initially observed
timing difference may result from different sequence combi-
nations leading to the desired state without actually perform-
ing the required transition. For example, consider a faulty
reset sequence Seqreset that does not reset the state to S0. A
timing difference would still be detected by the ﬁrst check if
the test started in a state S0. To ensure the correct functionality
of Seqreset, Osiris measures the execution time of Seqmeasure
after the execution of Seqreset. It then measures the timing