is an essential low-fanout step when a web server gets com-
promised. Other attack-related edges can be discovered by our
approach from thousands of benign edges in a faster fashion.
Since the entire attack footprints are logically connected, any
uncovered part can help analysts to identify the other parts.
Even if, in the worst case scenario, fast-tracking an event with
low fanout does not expose any attack traces, only a small
delay will be incurred to the investigation of other complex
causalities. On the contrary, processing benign dependencies
with huge fanout (up to tens of thousands) can be time
consuming such that none of attack traces can be reached
before analysis deadline.
2b) Evasion Using Low-fanout Events: An attacker may
the priority queue with numerous benign
intentionally ﬁll
low-fanout events to conceal
the later steps in an attack.
However, due to the low-fanout constraint, she has to craft
a sufﬁciently long chain of low-fanout events, which by itself
is a extremely suspicious topological pattern. As a result, our
technique signiﬁcantly raises the bar for potential attacks.
2c) Slow Attack: A slow attacker is a general challenge for
all causality tracking systems but may also risk being detected
even before she can cause serious damage, as defenders could
also take advantage of the longer time window.
Note that our work is a general framework that priori-
tizes abnormal activities for timely security causality analysis,
which is able to further incorporate multi-hop dependency
based attack patterns or user deﬁned priority scores customized
for speciﬁc environments and security requirements.
3) Distributed Causality Tracker: The construction of
causality graphs can be potentially parallelized with distributed
computing. Any individual branch to be explored can be
processed separately; branches may bear different priorities
and therefore are assigned with corresponding computing
resources; dependencies on each host can also be pre-computed
in parallel and cross-host tracking thus becomes the concate-
nation of multiple generated graphs. Nonetheless, the massive
and pervasive dependencies among system events bring signiﬁ-
cant challenges to parallel processing, and therefore distributed
causality tracking by itself is an interesting research direction
that requires non-trivial efforts.
In this work, however, we do not enable distributed com-
putation in our causality tracking. Instead, we retrieve audit
logs from multiple hosts, store them in a centralized database,
and then perform causality analysis in a centralized manner.
13
Hence, our analysis only generates one single holistic graph
to demonstrate an attack sequence even if the attack is across
multiple hosts. Cross-host tracking is conducted in an on-
demand manner: only if the causality tracker discovers a
communication channel from a sender machine to a receiver,
it will start to build dependencies on the latter one.
Again, we would like to point out that the major focus of
our work is how to enable priority-based search in causality
tracking, which is orthogonal to the computing paradigms of
underlying tracking systems.
VII. RELATED WORK
1) Causality Analysis: Plenty of research efforts have
been made to reconstruct OS-level system dependencies for
security purposes. King and Chen [4] ﬁrst proposed to build
dependency graph based on OS-level system events in order
to capture the attack sequences and provenances. King et
al. [5] further improved the dependency analysis by enabling
cross-host tracking as well as forwardly tracking attack conse-
quences. Chow et al. [33] leveraged taint analysis to understand
the lifetime of sensitive data. Taser [10] also performed taint
tracking to ﬁnd ﬁles affected by a past attack. Retro [11]
recorded an action history graph, which describes system’s ex-
ecution, in order to repair a desktop or server after an adversary
compromises it. Jiang et al. [34] enabled a provenance-aware
tracing of worm break-in and contamination. Muniswamy-
Reddy et al. [35] designed a provenance collection structure
facilitating the integration of provenance across multiple levels
of abstraction. Krishnan et al. [36] provided a forensic platform
that transparently monitors and records data access events us-
ing only the abstractions exposed by the hypervisor. Hi-Fi [37]
presented a kernel-level provenance system that collects high-
ﬁdelity whole-system provenance. Ma et al. [8] proposed a
Windows based audit logging technique that features accuracy
and low cost.
Further studies have attempted to mitigate the dependency
explosion problem by reducing data volume and performing
ﬁne-grained causality tracking. BEEP [6] identiﬁed the event
handling loops in long running programs so as to enable
selective logging for unit boundaries and unit dependencies.
LogGC [7] proposed an audit logging system with garbage
collection capability. ProTracer [9] presented a lightweight
provenance tracing system that alternates between logging
and taint tracking. Xu et al. [38] attempted to reduce the
number of log entries while still preserving high-ﬁdelity causal
dependencies.
A recent line of research [28], [39] has enabled enterprise-
level causality analysis, such as data loss prevention, via
modifying underlying operating system. To this end, it intro-
duces Linux Provenance Modules, which produce ﬁne-grained
provenance information. It further mitigates the dependency
explosion using SELinux information ﬂow analysis which
removes unrelated provenances.
Compared to the prior work, PRIOTRACKER takes the ﬁrst
step to prioritizing the investigation of abnormal dependencies
during the construction of causality graph. As a result, the
subsequent causality tracking can reveal more unusual activ-
ities before a critical security analysis deadline. In contrast,
the previous work did not innovate new algorithms for attack
graph construction but rather followed original work [4], [5] to
generate causality graphs via simply traversing all nodes (both
normal and abnormal). PRIOTRACKER focuses on improving
the underlying graph generation algorithm, and therefore is
orthogonal to the prior research.
2) Priority-Based Security Analysis: Priority-based meth-
ods have been widely used in security analyses. Previous
efforts have been made to expedite static data-ﬂow analy-
sis [13], symbolic execution [14]–[16], fuzzing [17] and digital
forensics [18], [19]. To be able to prioritize certain tasks, these
studies have attempted to measure the priority of low-level
constructs, including functions, code paths, program inputs
or user-level entities, such as textual documents and physical
devices.
In contrast to the prior work, we enable a priority-based
analysis in the speciﬁc domain of causality tracking. As a
result, we have to invent a unique technique to quantify the
priority in OS-level dependency tracking.
VIII. CONCLUSION
In this paper, we propose PRIOTRACKER, a backward and
forward causality tracker that automatically prioritizes the in-
vestigation of abnormal causal dependencies for enterprise se-
curity. Speciﬁcally, to assess the priority of a system event, we
consider its rareness and topological features in the causality
graph. To distinguish unusual operations from normal system
events, we quantify the rareness of each event by building a
reference model which records common routine activities in
corporate computer systems. We implement PRIOTRACKER,
in 20K lines of Java code, and a reference model builder in
10K lines of Java code. We evaluate our tool by deploying both
systems in a real enterprise IT environment which consists of
150 machines. Experimental results show that PRIOTRACKER
can capture attack traces that are missed by existing trackers
and reduce the analysis time by up to two orders of magnitude.
ACKNOWLEDGMENT
We would like to thank anonymous reviewers and our
shepherd, Prof. Adam Bates, for their feedback in ﬁnalizing
this paper. Prateek Mittal and Yushan Liu were partially
supported by the National Science Foundation Grant CNS-
1553437, CIF-1617286, and CNS-1409415, and Yan Huo *94
Graduate Fellowship. Any opinions, ﬁndings, and conclusions
made in this material are those of the authors and do not
necessarily reﬂect the views of the funding agencies.
[1]
“Data
breaches.html, 2016.
breaches,”
REFERENCES
http://www.idtheftcenter.org/Data-Breaches/data-
[2] C. Staff, “Target: 40 million credit cards compromised,” http://money.
cnn.com/2013/12/18/news/companies/target-credit-card/, 2013.
[3] R. Sidel, “Home depot’s 56 million card breach bigger
than
target’s,” http://www.wsj.com/articles/home-depot-breach-bigger-than-
targets-1411073571, 2014.
[4] S. T. King and P. M. Chen, “Backtracking Intrusions,” in Proceedings
of the Nineteenth ACM Symposium on Operating Systems Principles,
ser. SOSP’03, 2003.
[5] S. King, Z. M. Mao, D. C. Lucchetti, and P. M. Chen, “Enriching
Intrusion Alerts Through Multi-Host Causality,” in Proceedings of
the 2005 Network and Distributed Systems Security Symposium, ser.
NDSS’05, 2005.
14
[27]
“Etw events in the common language runtime,” https://msdn.microsoft.
com/en-us/library/ff357719(v=vs.110).aspx, 2016.
[28] A. M. Bates, D. Tian, K. R. Butler, and T. Moyer, “Trustworthy
whole-system provenance for the linux kernel.” in USENIX Security
Symposium, pp. 319–334.
[29] S. J. Russell and P. Norvig, Artiﬁcial Intelligence: A Modern Approach,
[30]
2003.
“A persistent key-value store for fast storage environments,” http:
//rocksdb.org/, 2016.
[32]
[31] T. Chen, L.-A. Tang, Y. Sun, Z. Chen, H. Chen, and G. Jiang,
“Integrating Community and Role Detection in Information Networks,”
in Proceedings of 2016 SIAM International Conference on Data Mining
(SDM’16), 2016.
“Persistent
metasploit-unleashed/persistent-netcat-backdoor/, 2017.
J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and M. Rosenblum, “Un-
derstanding data lifetime via whole system simulation,” in Proceedings
of the 13th Conference on USENIX Security Symposium - Volume 13,
2004.
https://www.offensive-security.com/
backdoor,”
netcat
[33]
[34] X. Jiang, A. Walters, F. Buchholz, D. Xu, Y.-M. Wang, and E. H.
Spafford, “Provenance-Aware Tracing of Worm Break-in and Con-
taminations: A Process Coloring Approach,” in Proceedings of IEEE
ICDCS06, 2006.
[35] K.-K. Muniswamy-Reddy, U. Braun, D. A. Holland, P. Macko,
D. Maclean, D. Margo, M. Seltzer, and R. Smogor, “Layering in prove-
nance systems,” in Proceedings of the 2009 Conference on USENIX
Annual Technical Conference, ser. USENIX’09, 2009.
[36] S. Krishnan, K. Z. Snow, and F. Monrose, “Trail of bytes: Efﬁcient sup-
port for forensic analysis,” in Proceedings of the 17th ACM Conference
on Computer and Communications Security, ser. CCS ’10, 2010.
[37] D. J. Pohly, S. McLaughlin, P. McDaniel, and K. Butler, “Hi-ﬁ: Col-
lecting high-ﬁdelity whole-system provenance,” in Proceedings of the
28th Annual Computer Security Applications Conference, ser. ACSAC
’12, 2012.
[38] Z. Xu, Z. Wu, Z. Li, K. Jee, J. Rhee, X. Xiao, F. Xu, H. Wang, and
G. Jiang, “High ﬁdelity data reduction for big data security dependency
analyses,” in Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security, ser. CCS’16, 2016.
[39] A. Bates, D. J. Tian, G. Hernandez, T. Moyer, K. R. Butler, and
T. Jaeger, “Taming the costs of trustworthy provenance through policy
reduction,” ACM Transactions on Internet Technology (TOIT), vol. 17,
no. 4, p. 34, 2017.
[6] K. H. Lee, X. Zhang, and D. Xu, “High Accuracy Attack Provenance via
Binary-based Execution Partition,” in Proceedings of the 2013 Network
and Distributed Systems Security Symposium, ser. NDSS’13, 2013.
[7] ——, “Loggc: garbage collecting audit log,” in Proceedings of the 2013
ACM SIGSAC conference on Computer and Communications Security,
ser. CCS’13, 2013.
[8] S. Ma, K. H. Lee, C. H. Kim, J. Rhee, X. Zhang, and D. Xu,
“Accurate, Low Cost and Instrumentation-Free Security Audit Logging
for Windows,” in Proceedings of the 31st Annual Computer Security
Applications Conference, ser. ACSAC’15, 2015.
[9] S. Ma, X. Zhang, and D. Xu, “Protracer: Towards practical provenance
tracing by alternating between logging and tainting.” in Proceedings
of the 2016 Network and Distributed Systems Security Symposium, ser.
NDSS’16, 2016.
[10] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara, “The Taser Intrusion
Recovery System,” in Proceedings of the Twentieth ACM Symposium
on Operating Systems Principles, ser. SOSP’05, 2005.
[11] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek, “Intrusion recov-
ery using selective re-execution,” in Proceedings of the 9th USENIX
Conference on Operating Systems Design and Implementation, ser.
OSDI’10, 2010.
“2015 cost of cyber crime study: United states,” http://www.ponemon.
org/blog/2015-cost-of-cyber-crime-united-states, 2015.
[12]
[13] O. Tripp, M. Pistoia, S. J. Fink, M. Sridharan, and O. Weisman, “Taj:
Effective taint analysis of web applications,” in Proceedings of the 30th
ACM SIGPLAN Conference on Programming Language Design and
Implementation, ser. PLDI ’09, 2009.
[14] V. Chipounov, V. Kuznetsov, and G. Candea, “S2e: A platform for
in-vivo multi-path analysis of software systems,” in Proceedings of
the Sixteenth International Conference on Architectural Support for
Programming Languages and Operating Systems, ser. ASPLOS XVI,
2011.
[15] C. Cadar, D. Dunbar, and D. Engler, “Klee: Unassisted and automatic
generation of high-coverage tests for complex systems programs,” in
Proceedings of
the 8th USENIX Conference on Operating Systems
Design and Implementation, ser. OSDI’08, 2008.
[16] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing
mayhem on binary code,” in Proceedings of the 2012 IEEE Symposium
on Security and Privacy, ser. SP ’12, 2012.
[17] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting
fuzzing through selective symbolic execution,” in 23nd Annual Network
and Distributed System Security Symposium, NDSS 2016, San Diego,
California, USA, February 21-24, 2016, 2016.
[18] R. Bert, F. Marturana, G. Me, and S. Tacconi, “Data mining based
crime-dependent triage in digital forensics analysis,” in Proceedings of
2012 International Conference on Affective Computing and Intelligent
Interaction, 2012.
[19] N. L. Beebe and L. Liu, “Ranking algorithms for digital forensic string
search hits,” Digit. Investig., 2014.
data
of
[21]
[22]
seven
largest
insider-caused
[20] M. N. Hossain, S. M. Milajerdi, J. Wang, B. Eshete, R. Gjomemo,
R. Sekar, S. Stoller, and V. Venkatakrishnan, “Sleuth: Real-time attack
scenario reconstruction from cots audit data,” 2017.
“The
http://www.eweek.com/security/the-seven-largest-insider-caused-
data-breaches-of-2014, 2014.
“Indian call centers selling u.k.’s secrets,” http://www.siliconindia.com/
shownews/Indian call centers selling UKs secrets-nid-28560-cid-
2.html, 2005.
“Understanding the insider threat,” https://supportforums.cisco.com/
blog/150466/understanding-insider-threat, 2016.
“Incident response - time is of the essence,” https://www.scmagazineuk.
com/incident-response--time-is-of-the-essence/article/534765/, 2015.
breaches
2014,”
[23]
[24]
[25] Z. Xu, Z. Wu, Z. Li, K. Jee, J. Rhee, X. Xiao, F. Xu, H. Wang, and
G. Jiang, “High ﬁdelity data reduction for big data security dependency
analyses,” in Proceedings of the 2016 ACM SIGSAC Conference on
Computer and Communications Security, ser. CCS ’16, 2016.
“The linux audit framework,” https://www.suse.com/documentation/
sled10/audit sp1/data/book sle audit.html, 2016.
[26]
15