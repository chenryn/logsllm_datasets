:::
[]{#LVM_CLI.html#idm140426107236000
.indexterm}[]{#LVM_CLI.html#idm140426107234560 .indexterm}
::: para
本小节论述执行各方面逻辑卷管理的命令。
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#create_linear_volumes}4.4.1. 创建线性逻辑卷 {.title}
:::
[]{#LVM_CLI.html#idm140426154200896
.indexterm}[]{#LVM_CLI.html#idm140426154199456
.indexterm}[]{#LVM_CLI.html#idm140426154198016 .indexterm}
::: para
请使用 `lvcreate`{.command}
命令创建逻辑卷。如果没有为该逻辑卷指定名称，则默认使用
`lvol#`{.literal}，其中 *\#* 是逻辑卷的内部编号。
:::
[]{#LVM_CLI.html#idm140426171187216
.indexterm}[]{#LVM_CLI.html#idm140426171185776 .indexterm}
::: para
创建逻辑卷后，则会从组成卷组之物理卷中的剩余扩展中分出逻辑卷。通常逻辑卷会用完底层物理卷中的所有可用空间。修改该逻辑卷可释放并重新分配物理卷中的空间。
:::
::: para
下面的命令在卷组 `vg1`{.filename} 中创建大小为 10GB 的逻辑卷。
:::
``` screen
# lvcreate -L 10G vg1
```
::: para
下面的命令创建大小为 1500MB，名为 `testlv`{.filename}
的线性逻辑卷，该卷位于卷组 `testvg`{.filename} 中，创建块设备
`/dev/testvg/testlv`{.filename}。
:::
``` screen
# lvcreate -L 1500 -n testlv testvg
```
::: para
下面的命令使用卷组 `vg0`{.filename} 中的剩余扩展创建名为
`gfslv`{.filename}，大小为 50GB 的逻辑卷。
:::
``` screen
# lvcreate -L 50G -n gfslv vg0
```
::: para
可使用 `lvcreate`{.command} 命令的 `-l`{.option}
参数，以范围为单位指定逻辑卷大小。还可以使用这个参数指定用于该逻辑卷的卷组百分比。下面的命令创建名为
`mylv`{.filename}，使用卷组 `testvg`{.filename} 总空间 60% 的逻辑卷。
:::
``` screen
# lvcreate -l 60%VG -n mylv testvg
```
::: para
还可以使用 `lvcreate`{.command} 命令的 `-l`{.option}
参数指定卷组中剩余可用空间的百分比作为逻辑卷的大小。下面的命令创建名为
`yourlv`{.filename}，使用卷组 `testvg`{.filename}
中所有未分配空间的逻辑卷。
:::
``` screen
# lvcreate -l 100%FREE -n yourlv testvg
```
::: para
可使用 `lvcreate`{.command} 命令的 `-l`{.option}
参数创建使用整个卷组的逻辑卷。另一个使用整个卷组创建逻辑卷的方法是使用
`vgdisplay`{.command} 命令找到 \"Total PE\" 大小，并在
`lvcreate`{.command} 命令中输入那些结果。
:::
::: para
下面的命令创建名为 `mylv`{.filename} 的逻辑卷，该卷充满名为
`testvg`{.filename} 的卷组。
:::
``` screen
# vgdisplay testvg | grep "Total PE"
Total PE              10230
# lvcreate -l 10230 testvg -n mylv
```
::: para
如果需要删除物理卷，则用来创建逻辑卷的基层物理卷会变得很重要，因此需要考虑创建该逻辑卷的可能性。有关从卷组中删除物理卷的详情，请查看
[第 4.3.7 节 "从卷组中删除物理卷"](#LVM_CLI.html#VG_remove_PV){.xref}。
:::
::: para
要创建使用卷组中具体物理卷分配的逻辑卷，请在 `lvcreate`{.command}
命令行的末端指定物理卷或多个物理卷。下面的命令在卷组 `testvg`{.filename}
中创建名为 `testlv`{.filename} 的逻辑卷，将其分配到物理卷
`/dev/sdg1`{.filename} 中。
:::
``` screen
# lvcreate -L 1500 -ntestlv testvg /dev/sdg1
```
::: para
可指定逻辑卷使用的物理卷扩展。下面的示例中使用卷组 `testvg`{.filename}
中的物理卷 `/dev/sda1`{.filename} 的扩展 0 到 24 和物理卷
`/dev/sdb1`{.filename} 扩展 50 到 124 创建线性逻辑卷。
:::
``` screen
# lvcreate -l 100 -n testlv testvg /dev/sda1:0-24 /dev/sdb1:50-124
```
::: para
下面的示例使用物理卷 `/dev/sda1`{.filename} 的扩展 0 到 25
创建线性逻辑卷，然后继续从扩展 100 开始布设逻辑卷。
:::
``` screen
# lvcreate -l 100 -n testlv testvg /dev/sda1:0-25:100-
```
::: para
如何扩展逻辑卷的默认策略是采用 `inherit`{.command}
分配，它在卷组中应用相同的策略。可使用 `lvchange`{.command}
命令更改这些策略。有关分配策略的详情，请查看 [第 4.3.1 节
"创建卷组"](#LVM_CLI.html#VG_create){.xref}。
:::
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#LV_stripecreate}4.4.2. 创建条带卷 {.title}
:::
[]{#LVM_CLI.html#idm140426150426064
.indexterm}[]{#LVM_CLI.html#idm140426150424624 .indexterm}
::: para
如果有大量连续读、写操作，创建条带逻辑卷可提高数据 I/O
的效率。有关条带卷的常规信息，请查看 [第 2.3.2 节
"条带逻辑卷"](#LVM_components.html#striped_volumes){.xref}。
:::
::: para
创建条带逻辑卷时，可使用 `lvcreate`{.command} 命令的 `-i`{.option}
参数指定条带数。这样就决定了逻辑卷会在多少物理卷之间形成条带。条带数不能超过该卷组中的物理卷数（除非使用
`--alloc anywhere`{.option} 参数）。
:::
::: para
如果组成逻辑卷的底层物理设备大小不同，则最大的条带卷是由最小的底层设备决定。例如：在有两个分支的条带中，条带卷大小不能超过较小设备的两倍。在有三个分支的条带中，条带卷大小不能超过最小设备的三倍。
:::
::: para
下面的命令在两个物理卷之间创建条带逻辑卷，条带大小为 64kB。该逻辑卷为
50GB，名为 `gfslv`{.filename}，并从中创建卷组 `vg0`{.filename}。
:::
``` screen
# lvcreate -L 50G -i 2 -I 64 -n gfslv vg0
```
::: para
可使用线性卷指定用于该条带的物理卷。下面的命令创建大小为 100
扩展的条带卷，该条带跨两个物理卷，名为 `stripelv`{.filename}，位于卷组
`testvg`{.filename} 中。该条带使用 `/dev/sda1`{.filename} 的扇区
0-49，以及 `/dev/sdb1`{.filename} 的扇区 50-99。
:::
``` screen
# lvcreate -l 100 -i 2 -nstripelv testvg /dev/sda1:0-49 /dev/sdb1:50-99
  Using default stripesize 64.00 KB
  Logical volume "stripelv" created
```
:::
::: section
::: titlepage
## [⁠]{#LVM_CLI.html#raid_volume_create}4.4.3. RAID 逻辑卷 {.title}
:::
::: para
LVM 支持 RAID1/4/5/6/10。
:::
::: {.note xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**注意**
:::
::: admonition
::: para
集群无法识别 RAID 逻辑卷。由于只可在一台机器中创建并激活 RAID
逻辑卷，因此无法在一台以上的机器中同时激活它们。如果需要费独占镜像卷，则必须使用
`mirror`{.literal} 片段类型创建卷，如 [第 4.4.4 节
"创建镜像卷"](#LVM_CLI.html#mirror_create){.xref} 所述。
:::
:::
:::
::: para
可使用 `lvcreate`{.command} 命令的 `--type`{.option} 参数指定 raid
类型，以便创建 RAID 逻辑卷。可能的 RAID 片段类型如 [表 4.1 "RAID
片段类型"](#LVM_CLI.html#tb-raid-types){.xref} 所述。
:::
::: table
[⁠]{#LVM_CLI.html#tb-raid-types}
**表 4.1. RAID 片段类型**
::: table-contents
+------------------+---------------------------------------------------+
| 片段类型         | 描述                                              |
+==================+===================================================+
| `                | RAID1 镜像。这是在指定 `-m`{.option}              |
| raid1`{.literal} | 但没有指定条带时，`lvcreate`{.command} 命令       |
|                  | `--type`{.option} 参数的默认值。                  |
+------------------+---------------------------------------------------+
| `                | RAID2 专用奇偶磁盘                                |
| raid4`{.literal} |                                                   |
+------------------+---------------------------------------------------+
| `                | 同 `raid5_ls`{.literal}                           |
| raid5`{.literal} |                                                   |
+------------------+---------------------------------------------------+
| `rai             |   ------------------------------------------      |
| d5_la`{.literal} |   RAID5 左侧不对称。                              |
|                  |   Rotating parity 0 with data continuation        |
|                  |   ------------------------------------------      |
+------------------+---------------------------------------------------+
| `rai             |   ------------------------------------------      |
| d5_ra`{.literal} |   RAID5 右侧不对称。                              |
|                  |   Rotating parity N with data continuation        |
|                  |   ------------------------------------------      |
+------------------+---------------------------------------------------+
| `rai             |   -------------------------------------           |
| d5_ls`{.literal} |   RAID5 左侧不对称。                              |
|                  |   Rotating parity 0 with data restart             |
|                  |   -------------------------------------           |
+------------------+---------------------------------------------------+
| `rai             |   -------------------------------------           |
| d5_rs`{.literal} |   RAID5 右侧不对称。                              |
|                  |   Rotating parity N with data restart             |
|                  |   -------------------------------------           |
+------------------+---------------------------------------------------+
| `                | 同 `raid6_zr`{.literal}                           |
| raid6`{.literal} |                                                   |
+------------------+---------------------------------------------------+
| `rai             |   -------                                         |
| d6_zr`{.literal} | ------------------------------------------------- |
|                  |   RAID6 零重启                                    |
|                  |   Rotat                                           |
|                  | ing parity zero (left-to-right) with data restart |
|                  |   -------                                         |
|                  | ------------------------------------------------- |
+------------------+---------------------------------------------------+
| `rai             |   ----                                            |
| d6_nr`{.literal} | ------------------------------------------------- |
|                  |   RAID6 N 重启                                    |
|                  |   Ro                                              |
|                  | tating parity N (left-to-right) with data restart |
|                  |   ----                                            |
|                  | ------------------------------------------------- |
+------------------+---------------------------------------------------+
| `rai             |   ---------                                       |
| d6_nc`{.literal} | ------------------------------------------------- |
|                  |   RAID6 N 延续                                    |
|                  |   Rotatin                                         |
|                  | g parity N (left-to-right) with data continuation |
|                  |   ---------                                       |
|                  | ------------------------------------------------- |
+------------------+---------------------------------------------------+
| `r               |   -----------------------                         |
| aid10`{.literal} | ------------------------------------------------- |
|                  | ------------------------------------------------- |
|                  |   条带镜像。如果指定 `-                           |
|                  | m`{.option} 并制定大于 1 的条带数，这就是 `lvcrea |
|                  | te`{.command} 中 `--type`{.option} 参数的默认值。 |
|                  |   条带镜像集                                      |
|                  |   -----------------------                         |
|                  | ------------------------------------------------- |
|                  | ------------------------------------------------- |
+------------------+---------------------------------------------------+
:::
:::
::: para
对大多数用户来说，指定五个主要类型（`raid1`{.literal}、`raid4`{.literal}、`raid5`{.literal}、`raid6`{.literal}、`raid10`{.literal}）之一应该就足够了。有关
RAID5/6 所使用的不同算法的详情，请查看*《通用 RAID
磁盘数据格式规格》*一书中的第四章，网址为：。
:::
::: para
创建 RAID 逻辑卷时，LVM 会为每个数据生成大小为 1
个扩展的元数据子卷，或在阵列中生成奇偶校验子卷。例如：生成双向 RAID1
阵列可得到两个元数据子卷（即 `lv_rmeta_0`{.literal} 和
`lv_rmeta_1`{.literal}）和两个数据子卷（`lv_rimage_0`{.literal} 和
`lv_rimage_1`{.literal}）。同样，创建三向条带（加上一个隐式奇偶校验设备）RAID4
得到四个元数据子卷（`lv_rmeta_0`{.literal}、`lv_rmeta_1`{.literal}、`lv_rmeta_2`{.literal}
和
`lv_rmeta_3`{.literal}）及四个数据子卷（`lv_rimage_0`{.literal}、`lv_rimage_1`{.literal}、`lv_rimage_2`{.literal}
和 `lv_rimage_3`{.literal}）。
:::
::: para
下面的命令在 1GB 的卷组 `my_vg`{.literal} 中创建名为 `my_lv`{.literal}
的双向 RAID1 阵列。
:::
``` screen
# lvcreate --type raid1 -m 1 -L 1G -n my_lv my_vg
```
::: para
可根据指定的 `-m`{.option} 参数值使用不同副本数创建 RAID1
阵列。同样，可使用 `-i argument`{.option} 选项为 RAID4/5/6
逻辑卷指定条带数。还可以使用 `-I`{.literal} 参数指定条带大小。
:::
::: para
下面的命令在 1GB 的卷组 `my_vg`{.literal} 中创建名为 `my_lv`{.literal}
的 RAID5 阵列（三个条带 + 一个隐式奇偶校验驱动器）。注：指定要在 LVM
条带卷中的条带数，会自动添加奇偶校验驱动器的正确数字。
:::
``` screen
# lvcreate --type raid5 -i 3 -L 1G -n my_lv my_vg
```
::: para
下面的命令在 1GB 的卷组 `my_vg`{.literal} 中创建名为 `my_lv`{.literal}
的 RAID6 阵列（三个条带 + 两个隐式奇偶校验驱动器）。
:::
``` screen
# lvcreate --type raid6 -i 3 -L 1G -n my_lv my_vg
```
::: para
使用 LVM 创建 RAID 逻辑卷后，可如同其他 LVM
逻辑卷一样激活、更改、删除、显示并使用该卷。
:::
::: para
创建 RAID10 逻辑卷后，初始化附带 `sync`{.literal} 操作逻辑卷所需的后台
I/O 会将其他 I/O 操作挤入 LVM 设备，比如卷组元数据更新，特别是在创建很多
RAID 逻辑卷时。这样会导致其他 LVM 操作变缓。
:::
::: para
可使用恢复限制控制 RAID 逻辑卷初始化的比例。通过使用
`lvcreate`{.command} 命令的 `--minrecoveryrate`{.option} 和
`--maxrecoveryrate`{.option} 选项设定那些操作的最小和最大 I/O 比例控制
`sync`{.literal} 操作的执行比例。可按以下方法指定这些选项。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    `--maxrecoveryrate Rate[bBsSkKmMgG]`{.literal}
    :::
    ::: para
    为 RAID 逻辑卷设定最大恢复比例，以便其不会排挤正常 I/O 操作。将
    *Rate*
    指定为该阵列中每个设备的每秒恢复数量。如果没有给出后缀，则假设使用
    kiB/sec/device。将恢复比例设定为 0 的含义是不绑定。