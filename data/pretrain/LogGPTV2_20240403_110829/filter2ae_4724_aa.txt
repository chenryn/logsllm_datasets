## 前言
Juggle是35C3
CTF中的一道中等难度的逆向题目。虽然由于多个非预期解的存在（也可能是作者故意为之），使得最后题目的动态分数只有90分，但题目整体的考察点比较全面，包括XSLT、VM逆向、二分查找算法、汇编代码编写和调试等。预期的解法也比较有意思，对于逆向基本功的练习十分有帮助。  
这里我将自己的解法和几种非预期解整理了一下，供大家参考。
## 初识XSLT
题目给出了一个`XSLT`文件和一个`Dockerfile`，`Dockerfile`用来配置`XSLT`环境，主要逻辑都在`XSLT`文件中。
`XSLT`是一种语言，用来处理`XML`格式的数据，将其转换为其他格式，例如`HTML`等。更多详细信息可以参考[w3school](http://www.w3school.com.cn/xsl/index.asp)。
题目给出的docker中使用了`xalan`对`XSLT`进行解释。本地测试时也可以使用`Visual
Studio`（部分版本）进行调试，可以设置断点和观察变量等，十分方便。
## 非预期解1 —— XXE
首先打开`XSLT`文件，大致浏览一下，可以找到读取flag的位置：
可以看到当满足`count($c/दाल) = 1`和`count($chef-drinks) =
0`两个条件时，flag的内容就会被读取到转换后的文件并输出给我们。  
这里便存在第一个非预期解——XXE，即XML外部实体注入。这里引用一下[OpenToAll的wp](https://github.com/Auxy233/Writeups/blob/master/2018/2018-12-27-35C3-CTF.md#juggle)：
    ]>&xxe;
即可成功读取到flag。网上有关XXE的资料很多，这里不过多介绍。
## 梳理程序逻辑
我们继续来看读flag的条件，其中的`$c`可以在前面找到：
         30000">
            You ate too much and died
         200">
            You cannot drink that much
         0">
            1]" /> 
                    ...
                    ...
                    ...
这里的`xsl:template`可以理解为函数，即定义了一个名为`consume-meal`的函数，其中的几个`xsl:param`为函数参数。
之前的`c`变量为`course[1]`，即`course`数组中第一个元素(XSLT中数组下标从1开始)。而`course`数组剩下的元素被放到了`r`变量中。
在每个`xsl:when`分支判断中，通过`count($c/...)`是否为1判断了`c`的元素类型，并进行不同的处理，最后将`r`作为course参数，递归调用了`consume-meal`函数。
所以整个`consume-meal`相当于对`course`数组中的每个元素依次进行了一个很大的case分支判断。
那么这些case分支到底在干什么呢？我们可以再观察一下其他几个变量：
  * `food-eaten`在每次递归调用会加一，到30000后会报错退出，相当于限制了输入参数`courses`的长度。
  * `drinks`参数比较复杂，在许多分支中都会进行修改和判断，其中比较明显的有几个加减乘除的操作，与基于栈的四则运算很像。
  * `chef-drinks`只有在`Борщ`分支中会进行修改，在`ラーメン`分支中会与`drinks`进行比较，最终在`दाल`分支中判断为空便可以读取flag。
首先看`Борщ`分支：
             1 or $chef-drinks[1] != $arg0]"/>
             1]"/>
可以看出，当`drinks[1] != chef-drinks[1]`时，传入下一步的`chef-drinks`值为`$chef-drinks[position() > 1 or 1]`，即原来的`chef-drinks`会被完整传入。  
而`drinks[1] == chef-drinks[1]`时，传入的是`$chef-drinks[position() > 1 or
0]`，即删掉了`chef-drinks`的第一个元素。
所以`Борщ`分支判断了`drinks[1]`与`chef-drinks[1]`是否相等，相等则删掉`chef-drinks[1]`。
其实从这里我们就可以看出一点端倪了。读取flag的条件是`count($chef-drinks) =
0`，而这里又有一个类似于猜数的功能，猜对所有`chef-drinks`的值就可以将其删光，以满足flag读取的条件。
然后我们来看`ラーメン`分支：
                 $chefvalue)"/>
             1]"/>
可以看出，这里会将`drinks[1] > chef-drinks[1]`的结果与原来的`drinks`拼在一起，作为新的`drinks`参数。  
到这里就基本一目了然了，这其实就相当于汇编语言中的`cmp drinks[1], chef-drinks[1]`指令，将比较的结果放到了`drinks`的第一位，所以这个大的分支判断其实就是一个 **基于栈的VM的解释器** 。
其中分支中判断的菜名其实就是指令名，`drinks`就是栈，栈的初始值使我们可以控制的，我们需要通过VM中提供的指令猜出`chef-drinks`中所有的值，就可以成功拿到flag。
通过分析代码，我们可以把所有指令的作用还原：
  * 宫保鸡丁 
    * 打印出drinks和chef-drinks的值，相当于打log
  * paella 
    * push(const)
  * 불고기 
    * push(drinks[pop(drinks) + 2] )
  * Борщ 
    * if drinks[1] == chef-drinks[1], pop(chef-drinks)
  * दाल 
    * if chef-drinks.len == 0, print_flag
  * ラーメン 
    * push(pop(drinks) > chef-drinks[1] )
  * stroopwafels 
    * push(pop(drinks) 
             300">
                You do not have enough money to buy that much food
可以看到`chef-drinks`中共有5个值，均由`math:random()`生成。这里便产生了第二个非预期解—— **预测随机数** 。
[通过研究`xalan`对于`random`函数的实现](https://ctftime.org/writeup/12780)，或者直接连续运行两次程序比较随机数都可以发现，生成随机数的种子其实就是当前的时间。而且实际上`xalan`就是使用的c中标准的rand()函数生成随机数。
所以这里就有两种做法，一种是直接调用c中的srand(time(NULL))和rand()。另一种是使用VM中的log指令得到当前时间生成的随机数，然后马上用得到的这些数生成`XSLT`来猜数，只要时间还没变（同一秒），就可以预测成功。
两种方法的实现可以参考这两份WP：  
## 预期解——二分查找
基于之前的分析，在VM中，我们不能直接获取`chief-drinks`或对齐进行运算，只能将其与一个值进行比较得到大小关系。到这里，标准解法就已经很明显了，那就是使用二分查找（VM中猜数返回结果只有大于和小于等于，需要稍加修改）：
    public int guessNumber(int n) {
        int left = 1;
        int right = n;
        int mid = 0;
        while(left