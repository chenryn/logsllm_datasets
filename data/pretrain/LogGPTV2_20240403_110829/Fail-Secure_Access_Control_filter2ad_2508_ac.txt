evaluated. The propagate idiom abstracts the mechanisms
for meeting requirements with such “delayed” failure han-
dling. Whenever an event fails, the PDP pushes a desig-
nated error value as the input to all subsequent events.
For example, to meet FR1, ideally an error value that
indicates a failure to evaluate an ACL is propagated. The
default ACL is evaluated iﬀ no ACL grants a given request
and the PDP failed to evaluate at least one ACL. Note
that the failure handler of Figure 2 implementing FR1 is,
however, an instance of the catch idiom. Systems that em-
ploy the propagate idiom include XACML PDPs [38], which
propagate indeterminate policy decisions, and Spring-based
applications [30], which propagate data access exceptions.
4.2 BelLog Language
We use the BelLog language to specify the PDP’s behav-
ior including its failure handlers. We favor BelLog because
(1) we can use its truth value ⊥ to explicitly denote failures,
(2) we can syntactically extend its core language to deﬁne
common failure handlers, and (3) it can encode state-of-the-
art decentralized policy languages [3,13,25]. We give a brief
introduction to BelLog in the following; see [32] for further
details.
BelLog is an extension of stratiﬁed Datalog [1], where the
truth values come from Belnap’s four-valued logic [6]. Bel-
Log’s syntax is given in Figure 6a. We use r, l, and t to
denote ﬁnitely many rules, literals, and terms separated by
commas. A BelLog program is a ﬁnite set of rules. Each
rule has a head consisting of an atom and a body consisting
of a list of literals. An atom is a predicate symbol together
with a list of constants and variables. A literal is a, ¬a, or
∼a, where a is an atom, and ¬ and ∼ are the truth- and
knowledge-negation operators; see Figure 6b. We write con-
stants with sans font, and predicate symbols with italic font.
(program) P ::= r
(literal)
(term)
l ::= a | ¬a | ∼a
t ::= c | v
(predicates) p ∈ P ⊃ D
(constants) c ∈ C
(rule) r ::= a ← l
(atom) a ::= p(t)
(variables) v ∈ V
(a) Syntax.
t
(cid:22)
⊥
>
f
(cid:22)k
¬
t
∼
f
f
⊥ ⊥ >
> > ⊥
t
t
f
(b) BelLog’s truth space D = {f, ⊥, >, t}. ∧ and ∨ denote the
meet and join over (D, (cid:22)). (cid:22)k is the knowledge partial order.
(domain)
(Σ is ﬁnite)
Σ ⊂ C
P ↓ = P ’s grounding over Σ
A = {p(t) | t ⊆ Σ}
(ground atoms)
(interpretations) I, I0 ∈ I = A 7→ D
I v I0 iﬀ ∀a ∈ A. I(a) (cid:22) I0(a)
TP = I 7→ I
M0 = uI, Mi = lfpMi−1 TPi t Mi−1
operator) TP (I)a =W{I(l) | (a ← l) ∈ P ↓}
(strata models)
(consequence
lfpI TP = u{x ∈ fp TP | I v x}
(model)
[[P ]] = Mn
(c) Semantics. u and t denote the meet and join over (I, v). P ’s
rules are partitioned into strata P1, · · · , Pn.
Figure 6. BelLog’s syntax and semantics.
We use the capital letters P , R, and S to denote BelLog pro-
grams, and the remaining capital letters for variables.
BelLog’s truth space is the lattice (D,(cid:22),∧,∨); see Fig-
ure 6b. The non-classical truth values ⊥ and > denote unde-
ﬁned and conﬂict. In §4.3, we show how ⊥ is used to denote
information missing due to failures. BelLog’s semantics is
given in Figure 6c. Given a ﬁnite set of constants Σ, called
the domain, P ↓ denotes the program obtained by replacing
all variables in P in all possible ways using Σ, and A is the
set of ground atoms constructed from Σ without variables.
P ’s model is an element of the lattice (I,v,u,t), where I
is the set of all interpretations. An interpretation I ∈ I
maps ground atoms to truth values. The symbols ¬ and ∼
are overloaded over interpretations in the standard way, and
I(l1,··· , ln) = I(l1) ∧ ··· ∧ I(ln). A rule a ← l assigns the
truth value of I(l) to a. The consequence operator TP applies
P ’s rules and joins the results withW when multiple rules
have the same head. Program P ’s model is constructed by
ﬁrst partitioning P ’s rules into strata P1,··· , Pn and then
computing, for each stratum Pi, the join of (1) the previous
stratum’s model Mi−1 and (2) the meet of all ﬁxed points
of TPi (fp TPi) that are greater than or equal to Mi−1. A
partitioning P1,··· , Pn is a stratiﬁcation if for each stra-
tum Pi, any predicate symbol that appears in a negative
literal ¬p(t) does not appear in the head of Pi ∪ ··· ∪ Pn.
Finally, the input to a BelLog program P is a set I of rules
of the form p(t) ← v, where v ∈ D and p does not appear
in the heads of P ’s rules. We write [[P ]]I for [[P ∪ I]]. For
a given input I, a program P entails the ground atom a,
denoted P ‘I a, iﬀ [[P ]]I(a) = t.
p ∨ q := ¬(¬p ∧ ¬q)
p = f := ¬(p ∨ ∼p)
p = t := p ∧ ∼p
p / c . q := ((c = t) ∧ p)
∨ ((c 6= t) ∧ q)
p 6= v := ¬(p = v)
p = ⊥ := (p 6= f) ∧ (p 6= t)
∧ ((p ∨ >) = t)
p v7→ q := q / (p = v) . p
Figure 7. Derived BelLog operators. Here p, q, and c
denote rule bodies, and v ∈ D.
4.3 Specifying PDPs in BelLog
Speciﬁcation Preliminaries
We now explain how a PDP, i.e. its normal policy and its
failure handlers, can be speciﬁed in BelLog. We illustrate
this by specifying the examples from §2.
4.3.1
As described in our system model given in §3, a PDP’s
behavior is determined by three elements: (1) the PDP in-
puts, namely credentials forwarded by a PEP and informa-
tion obtained from PIPs, (2) the (normal) access control
policy evaluated by the PDP, and (3) the failure-handling
procedures used when the communication channels between
the PDP and PIPs fail. In the following, we describe how
these elements can be speciﬁed in BelLog.
Inputs. We represent credentials as atoms whose ﬁrst ar-
gument represents the issuing principal’s identiﬁer. For ex-
ample, public(ann, ﬁle) is interpreted as “ann asserts that ﬁle
is public”. Hereafter, we write ann:public(ﬁle) to emphasize
a credential’s issuer. For brevity, we omit writing “admin:”
to denote admin’s credentials.
We model the information obtained from PIPs as remote
queries, which check whether a speciﬁed credential is stored
at a designated PIP. We write remote queries as ann :
public(ﬁle)@pip, where ann : public(ﬁle) is a credential and
pip is a PIP identiﬁer. Formally, remote queries are rep-
resented as atoms where the PIP identiﬁer is appended to
the predicate symbol; for example, ann:public(ﬁle)@pip is
represented with the atom public_pip(ann, ﬁle).
The PDP’s input consists of credentials forwarded by a
PEP and credentials obtained using remote queries to PIPs.
We model a PDP’s input as BelLog input. Given a BelLog
input I and a credential cred, the truth value I(cred) is: t
if cred is a credential forwarded by the PEP, and f if cred
is not forwarded by the PEP. For a remote query cred@pip,
I(cred@pip) is: t if cred is stored at pip, f if cred is not stored
at pip, and ⊥ if a failure prevents the PDP from obtaining
cred from pip.
Access Control Policies. We specify the PDP’s access
control policy using BelLog rules. Note that state-of-the-art
decentralized access control languages such as SecPAL [3],
RT [25], Binder [13], and DKAL [18], all have translations to
Datalog. Any policy written in these languages can therefore
be encoded in BelLog, since BelLog extends Datalog. Fur-
thermore, algebraic policy languages, such as XACML [38]
and PBel [10], can also be encoded in BelLog; see [32].
Failure Handling. We deﬁne failure-handling operators
as syntactic sugar in BelLog. We use a syntactic extension
of BelLog that allows for nesting and combining rule bodies
with the operators ¬, ∼, and ∧. For example, the rule r ←
¬(¬p ∧ ¬q), where p and q are rule bodies, assigns to r the
truth value computed by applying the operators ¬ and ∧ to
the truth values computed for p and q. Additional BelLog
operators, such as the if-then-else operator (_ / _ . _) and
the v-override operator (_ v7→ _), are deﬁned in Figure 7.
We deﬁne the error-override operator as
p (cid:73) q := p
⊥7→ q ,
where p and q are rule bodies. The construct p (cid:73) q evaluates
to q’s truth value if p’s truth value is ⊥; otherwise, the
result of p is taken. Using this operator, we can model the
failure-handling idioms given in §4.1. Consider the remote
query cred@pip, which checks whether the credential cred
is stored at pip. To instantiate the fallback idiom, where
fallback is the fallback PIP’s identiﬁer, we write cred@pip (cid:73)
cred@fallback.
To illustrate the catch idiom’s speciﬁcation, consider a
PDP with the following two policies.
pol1(X) ← empl(X)@db
pol2(X) ← stud(X)
(Policy P1)
(Policy P2)
Here the atom pol i(X) denotes policy Pi’s decision. The
communication between the PDP and the PIP db can fail.
Imagine that the PDP instantiates the catch idiom and uses
P2 whenever it cannot evaluate P1 due to failures. We can
specify this failure handler as
pol(X) ← pol1(X) (cid:73) pol2(X) .
The propagate idiom is the default failure handler used in
BelLog speciﬁcations. That is, we need not explicitly encode
it using BelLog rules. This is because we represent failures
with ⊥, and this truth value is always propagated unless it
is explicitly handled with an operator such as error-override.
4.3.2 Examples
We now specify the PDPs discussed in §2.
XACML 3. We ﬁrst observe that the failure handling in
Figure 1 is independent of the policies in a policy set and of
the composition operator used to compose their decisions.
Therefore, to illustrate the speciﬁcation of a complete PDP
(i.e. one that contains both a normal policy and failure han-
dling), we choose deny-overrides as the designated composi-
tion operator for the policies. In BelLog, the deny-overrides
ordering (cid:22); see Figure 6b. For a detailed, formal description
operator corresponds to the inﬁnitary meetV over the truth
ofV, see [32]. We note that other XACML 3 operators can
also be encoded within the given PDP model.
The following BelLog program models the XACML 3 PDP’s
failure handling with the deny-overrides operator:
Speciﬁcation 1 (S1):
pol_set(Req) ←^(cid:0)X:pol(Req) / auth(X , Req) . t(cid:1)
auth(X, Req) ←admin(X)
auth(X, Req) ←auth(X, Req)@check (cid:73) f
X:pol(Req) ←pol(X, Req)@eval (cid:73) t
We use Req to denote access requests and X to denote
principals. For brevity, we assume that each principal X
has one policy for all requests, denoted by X:pol(Req). The
outcome of evaluating the policy issued by the principal X is
represented by pol(X, Req)@eval, where eval represents the
PDP’s policy evaluation procedure. To represent whether X
is authorized for a given Req, we write auth(X, Req). There-
fore auth(X, Req)@check is a query to the procedure check
to check whether a non-trusted policy issued by X is autho-
rized to give decisions for the request Req.
To encode that a policy is dropped if a PDP cannot eval-
uate it, we use the (_ (cid:73) t) pattern. This is because t is
the identity element for the V operator. Thus, if there is
an error while evaluating a policy, then t is returned, which
does not inﬂuence the ﬁnal outcome of the composition. It
formalizes that the policy was ignored. If we were modeling
another composition operator, then that operator’s identity
element would be used.
To specify that a policy is dropped if a PDP cannot check
its authorization, we use the (_ (cid:73) f) pattern. This means
that a policy is treated as unauthorized and thus its decision
is ignored (i.e. mapped to t through the if-then operator).
Finally, the for-loop is implicitly modeled using V and
the if-then operator. TheV operator returns the decision
evaluated over the set of policies of all principals. Those
policies that are not authorized are treated as the identity
element and thus do not inﬂuence the result.
Authorizations in Web Applications. To model the
web application scenario given in §2, we suppose that there
are n input ACLs and one default ACL. We specify the
authorization method given in Figure 2 as follows.
Speciﬁcation 2 (S2):
pol(U, O) ←(isGranted(U, O)@acl1
f7→ ···
···
f7→ isGranted(U, O)@acln)
(cid:73) (isGranted(U, O)@def ∧ logging)
We model the ACL i’s evaluation of the access request
(U, O) with the atom isGranted(U, O)@acli, where U repre-
sents the user and O the requested object. We model the
logger’s status with the credential logging, and instantiate
the catch idiom using the error-override operator. To specify
the list iterator of Figure 2, we unroll the loop’s n iterations.
We use the f-override operator ( f7→) to capture that the PDP
evaluates the ACL i if the ACL i − 1 does not permit the
request. This models the exit from the loop when the deci-
sion is grant. Similarly, the exit from the loop when there
is a failure is captured with the catch idiom using the (cid:73)
operator. This is because if isGranted(U, O)@acli evaluates
to ⊥ then the entire expression on the left-hand side of (cid:73) is
evaluated to ⊥ as well.
We recall that this speciﬁcation violates FR1 because the
PDP does not evaluate all ACLs if it fails to evaluate, for
example, the ﬁrst ACL. The reason is that the catch block
is invoked prematurely.
In §5, we show how our analysis
reveals this security ﬂaw, and how the ﬂaw can be ﬁxed.
Authorizations in Grids. A BelLog speciﬁcation of the