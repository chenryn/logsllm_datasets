40
---
## Page 41
本文档使用书栈(BookStack.CN)构建
与 SQL 对比
33.
32.
C
28.
27.
26.
25
24.
23
21.
20.
19.
method, created_at, value) values ("2oo", "prometheus",
INSERT INTo http_requests_total (code, handler, instance, job,
method, created_at, value) values ("4oo", "query_range",
INSERT INTo http_requests_total (code, handler, instance, job,
INSERT INTo http_requests_total (code, handler, instance, job,
# time at 2017/5/22 14:48:27
INSERT INTo http_requests_total (code, handler, instance, job,
INSERT INTO http_requests_total (code, handler, instance, job,
method, created_at, value) values ("2oo",
INSERT INTo http_requests_total (code, handler, instance, job,
method, created_at, value) values ("304", 
INSERT INTo http_requests_total (code, handler, instance, job,
"localhost:909o", "prometheus", 
INSERT INTo http_requests_total (code, handler, instance, job,
INSERT INTo http_requests_total (code, handler, instance, job,
INSERT INTo http_requests_total (code, handler, instance, job,
"localhost:909o", "prometheus", "get", 1495435527, 3);
method, created_at, value) values ("2oo", "query_range",
INSERT INTO http_requests_total (code, handler, instance, job,
# time at 2017/5/22 14:45:27
"localhost:909o", "prometheus",
"localhost:909o", "prometheus"， "get", 1495435707, 3);
method, created_at, value) values ("2oo", "query_range", 
"localhost:9090", "prometheus"， "get"， 1495435527, 7);
method, created_at, value） values ("2oo", "label_values",
"localhost:9090", "prometheus"， "get"， 1495435527, 7);
method, created_at, value) values ("2oo", "graph",
"localhost:909o", "prometheus",
method, created_at, value） values （"4oo", "query",
INSERT INTo http_requests_total 
"localhost:9090"， "prometheus"， "get"， 1495435527， 87);
"localhost:9090", "prometheus"， "get"， 1495435527, 19);
method, created_at, value） values （"2oo", "static",
"localhost:909o", "prometheus", "get"， 1495435527, 6418);
method, created_at, value) values ("20o", "prometheus", 
"localhost:9090", "prometheus", "get"， 1495435527, 5);
method, created_at, value) values ("40o", "query_range",
"get"， 1495435707, 5);
"get",
（code，
"get"， 1495435527， 9);
，1495435527， 26);
 handler, instance, job,
"query"
"static",
---
## Page 42
本文档使用 书栈(BookStack.CN) 构建
数据初始完成后，
与 SQL 对比
39.
38.
37.
36.
35.
34.
6
6.
S
4.
3
2
14954355271
1495435527 1
1 400 丨 query_range
1495435527 丨
1 200 丨 query_range 
 mysql> select * from http_requests_total;
1495435527 1 6418 
created_at l value 
mysql>
"localhost:909o", "prometheus", "get", 1495435707, 7);
method, created_at, value) values ("2oo", "label_values",
INSERT INTo http_requests_total (code, handler, instance, job,
| 200 l prometheus
— - - - - - - +- - - - - - - +
+------+---- - --
I code 丨 handler 
+------+----
"localhost:9090", "prometheus", "get"， 1495435707, 7);
method, created_at, value) values ("2oo", "graph",
INSERT INTo http_requests_total (code, handler, instance, job,
"localhost:909o", "prometheus", 
method, created_at, value） values （"4oo", "query",
INSERT INTo http_requests_total (code, handler, instance, job,
"localhost:909o", "prometheus", "get", 1495435707, 87);
method, created_at, value) values ("20o", "query",
INSERT INTo http_requests_total (code,
"localhost:909o", "prometheus", "get",
method, created_at, value) values ("304",
INSERT INTo http_requests_total (code, handler, instance, job,
"localhost:9090", "prometheus", "get", 1495435707, 9);
method, created_at, value) values ("2oo", "static",
INSERT INTo http_requests_total (code, 
"localhost:9090",
| 200丨 static 
，通过查询可以看到如下数据：
5
3l
6
"prometheus",
| localhost:9090 | prometheus | get
| localhost:9090 丨 prometheus 丨 get 
l instance
 localhost:9090 丨 prometheus | get
 localhost:9090 l prometheus l get
"get"， 1495435707， 26);
"get",
，handler, instance, job,
：1495435707， 19);
, handler, instance, job,
1495435707， 6418);
I job
"static",
I method |
- - - -+-- = -
42
---
## Page 43
本文档使用 书栈(BookStack.CN) 构建
假设当前时间为 2017/5/2214:48:30
基本查询对比
与 SQL 对比
25
23
乙
2
L
6
14
3
心
11.
·查询当前所有数据
18 rows in set (o.o0 sec)
+ - - -- - - +- - --
1495435707
1495435707 1
1 200 丨 graph
14954357071
丨 400 丨 query
1495435707 1
| 200 丨 query
1495435707 1
| 304 丨 static
1495435707 1
| 20o丨 static
1495435707 1 6418 
| 200 l prometheus
1495435707 丨
1 400 | query_range
1495435707 1
1 200 | query_range
1495435527 1
| 200 丨 label_values 
1495435527 1
|200丨graph
1495435527 1
丨 400 丨 query
1495435527 1
丨 200丨query
1495435527 1
丨 304丨 static
- -----+-------+
| 200 丨 label_values 
87
3l
26
87
19l
26
19
71
| localhost:9090 | prometheus | get
| localhost:9090 | prometheus l get 
I localhost:9090 丨 prometheus 丨 get
I localhost:9090 | prometheus 丨 get
I localhost:9090 | prometheus 丨 get
I localhost:9090 丨 prometheus | get
I localhost:9090 l prometheus 丨 get
| localhost:9090 | prometheus 丨 get
1 localhost:9090 丨 prometheus 丨 get
 localhost:9090 丨 prometheus 丨 get
1 localhost:9090 | prometheus 丨 get
1 localhost:9090 | prometheus | get
1 localhost:9090 丨 prometheus 丨 get
I localhost:9090 | prometheus 丨 get 
---
## Page 44
本文档使用 书栈(BookStack.CN) 构建
据，而PromQL自动帮我们实现了这个逻辑。
这里的1θs（Prometheus 数据抓取间隔），
我们查询 MySQL 数据的时候，
与SQL对比
2
·比较查询：value 大于 100 的数据
·条件查询
人
S
2
）模糊查询：code 为 2xx 的数据
SELECT * from http_requests_total wHERE value > 100 AND created_at
// MySQL 
http_requests_total > 100 
// PromQL 
created_at BETWEEN 1495435700 AND 1495435710;
SELECT * from http_requests_total WHERE code LIKE "%2%" AND 
// MySQL
http_requests_total{code~="2xx"}
// PromQL
handler="query" AND created_at BETwEEN 1495435700 AND 1495435710;
SELECT * from http_requests_total wHERE code="20o" AND 
// MySQL
http_requests_total{code="20o", handler="query"}
// PromQL
1495435700 AND 1495435710;
SELECT * from http_requests_total WHERE created_at BETwEEN
// MySQL
http_requests_total
// PromQL
需要将当前时间向前推一定间隔，比如
这样才能确保查询到数
44
---
## Page 45
本文档使用书栈(BookStack.CN)构建
聚合，
与 SQL 对比
·avg 查询：统计当前数据平均值
·Sum 查询：统计当前数据总值
·count 查询：统计当前记录总数
·范围区间查询：过去5分钟数据
avg(http_requests_total)
// PromQL
1495435700 AND 1495435710;
SELECT SUM(value) from http_requests_total wHERE created_at BETWEEN
// MySQL
sum(http_requests_total)
// PromQL
1495435700 AND 1495435710;
SELECT CoUNT(*) from http_requests_total WHERE created_at BETWEEN 
count(http_requests_total)
// PromQL
1495435410 AND 1495435710;
SELECT * from http_requests_total wHERE created_at BETwEEN 
/ / MySQL 
// MySQL
http_requests_total[5m]
// PromQL
BETWEEN 1495435700 AND 1495435710;
统计高级查询
---
## Page 46
本文档使用书栈(BookStack.CN)构建
MySQL简单和丰富很多，而且查询性能也高不少。
通过以上一些示例可以看出，在常用查询和统计方面，PromQL比
总结
与SQL对比
·irate 查询，过去 5 分钟平均每秒数值
S
7
·top 查询：查询最靠前的3个值
C
S
2
AND 1495435710 GRoUP BY code, handler, instance, job, method;
value from http_requests_total wHERE created_at BETwEEN 1495435700
SELECT code, handler, instance, job, method, SUM(value)/300 AS 
/ / MySQL 
irate(http_requests_total[5m])
// PromQL
1495435700 AND 1495435710 0RDER BY value DESC LIMIT 3;
SELECT * from http_requests_total wHERE created_at BETwEEN
// MySQL 
topk(3, http_requests_total)
// PromQL
1495435700 AND 1495435710;
SELECT AVG(value) from http_requests_total WHERE created_at BETwEEN
// MySQL 
---
## Page 47
本文档使用书栈(BookStack.CN)构建
grafana 来查询和展现数据。
本章将介绍使用 Prometheus 自带的 web console 以及
问题。
收集到数据只是第一步，如果没有很好做到数据可视化，有时很难发现
数据可视化
数据可视化
数据可视化
·数据可视化
---
## Page 48
本文档使用书栈(BookStack.CN)构建
和调试工作，非常方便，例如：
Prometheus Web
Web Console
Web Console
Prometheus Aers Graph Statuss
http://localhost:9090/graph
GraphConsole
Executehp_reques total
delta(htp_requests_total[5m])
· Prometheus web
20,handier=
页面，用它可以进行任何 PromQL查询
安装成功后可以访问 
---
## Page 49
本文档使用书栈(BookStack.CN)构建
数据，如果你有这方面的需求，不妨试试 Grafana。
它并不是像常见的 Admin Dashboard，在一个页面尽可能展示多的
为它的目的是为了及时查询数据，方便 PromeQL调试。
通过上图你不难发现，Prometheus 自带的 Web 界面比较简单，因
Web Console
Graph
Execute-insert meric at cursor -
ltahtp_requests_total[5m)
Console
+Until
Help
Res.(s)
 stacked
---
## Page 50
本文档使用书栈(BookStack.CN)构建
当安装成功后，你可以使用默认配置启动程序
这里我使用 brew 安装，命令为
安装和运行程序
版本说明
明了选择它的原因。
这是 Prometheus web console 不具备的，在上一节中我已经说
Cloudwatch 等数据源，其 UI 非常漂亮且高度定制化。
Grafana 是一套开源的分析监视平台，
Grafana 使用
InfluxDB,
Grafana
Grafana
·Mac
·Grafana 使用
 brew install grafana
brew update
。总结
。版本说明
 version 4.3.2
自定义监视画板
登录并设置 Prometheus 数据源
安装和运行程序
OpenTSDB,
 Prometheus,
，支持 Graphite,
 Elasticsearch,
---
## Page 51
本文档使用书栈(BookStack.CN)构建
如果顺利，你将看到如下日志
Grafana
14.
2
6
0
9
S
W
2
 INF0[06-11|15:20:14] Initializing Alerting
 INF0[06-11|15:20:14] Starting Grafana
logger=plugins 
INFo[06-11|15:20:14] Starting plugin search
logger=migrator id="copy data account_user to org_user" 
logger=migrator id="copy data account_user to org_user"
INFO[06-11|15:20:14] Executing migration
logger=migrator id="copy data account to org" 
logger=migrator id="copy data account to org" 
INF0[06-11|15:20:14] Executing migration
logger=migrator
INF0[06-11|15:20:14] Starting DB migration
logger=sqlstore dbtype=sqlite3 
INF0[06-11|15:20:14] Initializing DB
path=/usr/local/Cellar/grafana/4.3.2/share/grafana/data/plugins
logger=settings
INFO[06-11|15:20:14] Path Plugins
path=/usr/local/Cellar/grafana/4.3.2/share/grafana/data/log
logger=settings 
INFO[06-11|15:20:14] Path Logs 
path=/usr/local/Cellar/grafana/4.3.2/share/grafana/data
logger=settings 
INFO[06-11|15:20:14] Path Data
logger=settings path=/usr/local/Cellar/grafana/4.3.2/share/grafana/
INF0[06-11|15:20:14] Path Home
file=/usr/local/Cellar/grafana/4.3.2/share/grafana/conf/defaults.ini
logger=settings 
INFO[06-11|15:20:14] Config loaded from
01T05:47:48+0800
/usr/local/Cellar/grafana/4.3.2/share/grafana/
grafana-server -homepath 
---
## Page 52
本文档使用书栈(BookStack.CN)构建
在 Dashboard首页，点击添加数据源
使用默认账号admin/admin 登录 grafana
Grafana 本身支持 Prometheus 数据源，故不需要安装其他插件。
登录并设置Prometheus数据源
其他平台安装方案，
web 界面。
此时，你可以打开页面
Grafana
17.
15.
logger=http.server address=0.0.0.0:3000 protocol=http subUrl=
INFO[06-11|15:20:14] Initializing HTTP Server
INFo[06-11|15:20:14] Initializing Stream Manager
logger=cleanup 
INFo[06-11|15:20:14] Initializing CleanUpService
socket= 
logger=alerting.engine
，请参考更多安装。
http://localhost:3000;
Login
Grafana
Log in
1
admin
sign
访问 Grafana 的
---
## Page 53
本文档使用书栈(BookStack.CN) 构建
Dashboard
目前为止，Grafana 已经和 Prometheus 连上了，你将看到这样的
配置Prometheus数据源
Http
Edit data source
ittp
p settings
Config
Dashboards
CO
HomeDashboard
---
## Page 54
本文档使用 书栈(BookStack.CN) 构建
在管理页面中取消
由顶部
自定义监视画板
Grafana
8.7 min 
22.7 min
 Prometheus Stats -
Promethe
 Manage dashboard 
台
sStats
 Hide Controls
☆
549
Local Sto
-V
Settings
Empty
进入管理页面
ternalSto
Empty
un@<nowooz
Que
---
## Page 55
本文档使用 书栈(BookStack.CN)构建
的
点击
点击页面底部
Metrics
“Metric lookup]
Settings
Panel Title
中
Localbrows
General
+ ADD ROW
选择
iV
Edit
按钮，
go_goroutines
进入Panel编辑页面，并在
并选择 
Graph
类型
---
## Page 56
本文档使用书栈(BookStack.CN)构建
Prometheus 数据源，所以在做数据和监视可视化的时候，Grafana
Grafana 是一款非常漂亮，强大的监视分析平台，本身支持了
总结
是尽量在一个屏幕显示更多信息。
我们可以通过拖拽，拉升调节panel 的位置和尺寸，我们调节的目的