of  NopCommerce  (1.6),  purchased  the  up-to-date  licensed 
version (5.5.4) of Interspire, and installed these programs on 
our  web  servers.    We  also  registered  seller  and  shopper 
accounts  with  PayPal,  Amazon  Payments  and  Google 
Checkout.  On  the  shopper  side,  we  had  Firefox  and  two 
HTTP  debugging  tools:  Live  HTTP  Headers  [21]  and 
Fiddler  [17].  Live  HTTP  Headers  is  a  Firefox  add-on 
capable  of  capturing  and  replaying  HTTP/HTTPS  traffic. 
Fiddler 
intercepting  and 
manipulating web traffic. Using these tools, we successfully 
executed all exploits described in Section III.   
Our merchants on a commercial website. It came with little 
surprise  that  all  exploits  we  discovered  worked  on  the 
applications hosted on our server.  However, when the same 
applications  run  on  commercial  websites,  they  could  be 
configured  differently  and  protected  by  additional  security 
mechanisms.  To  evaluate  the  security  threat  in  this  more 
realistic  scenario,  we  signed  up  a  15-day  trial  merchant 
account on BigCommerce [6], which is Interspire’s hosting 
platform. Any user can register an account on BigCommerce 
to  run  his/her  store  powered  by  Interspire.  Our  evaluation 
showed that the same exploits also succeed against our store 
hosted on this platform.  
Real  merchants  using  Interspire  and  NopCommerce.  All 
the security flaws reported in our analysis are related to the 
checkout  and  payment  steps,  which  are  only  part  of  the 
entire purchase process. It is less clear  whether end-to-end 
exploits  in  the  real  life  would  be  caught  by  other  fraud 
detection  or  account  auditing  procedures.  In  order  to 
understand such end-to-end scenarios, we conducted exploit 
analyses on the following real online stores:.  
•  GoodEmotionsDVD.com 
is  a  NopCommerce-powered 
store  that  sells  over  2,000,000  DVDs/CDs  of  movies, 
music,  and  games. 
It  supports  PayPal  Standard. 
Exploiting  the  flaw  in  Section  III.A.1,  we  were  able  to 
purchase a DVD at a lower price (Figure 1 (A)).  We later 
paid  the  balance  owed  and  notified  the  store  and  the 
developers  about 
their 
acknowledgement. 
•  PrideNutrition.com  is  an  Interspire-powered  store  that 
sells nutrition supplement products. Its customers include 
athletic  bodybuilders,  licensed  sports  nutritionists,  and 
certified  personal  trainers.  The  website  provides  PayPal 
Express  based  checkout.  We  bought  a  bottle  of  Agility 
the  exploit,  and 
received 
474
Cream for $5 less than the actual price, and received the 
shipment  (Figure  1  (B)).  We  shared  our  discovery  with 
the store, which expressed gratitude to our help [37]. 
•  LinuxJournalStore.com  is  the  online  store  of  Linux 
Journal. It sells various Linux-related products, including 
T-Shirts,  DVDs/CDs,  magazines,  and  others.    The  store 
uses  Interspire  and  enables  PayPal  Express,  so  it  is 
vulnerable  as  we  discovered.  This  time,  we  targeted 
digital  products,  which,  different 
from  physical 
commodity,  do  not  need  shipping.  Today  online 
commodities are often digital, e.g., electronic documents, 
memberships, phone-card minutes and game points. They 
are  made  available 
successful 
purchases. LinuxJournalStore sells digital Linux Journals 
in  addition  to  paper  ones.  It  accepts  PayPal  Express 
payments. We were able to pay for only one issue ($5.99) 
but check out two different issues ($11.98 together), and 
successfully  download  them  (Figure  1(C)).  In  reference 
[37], we present our communication with the store.  
immediately  after 
•  LuxePurses.com. Throughout our entire study, we placed 
at least 8 orders on real-world stores, including the orders 
described  above  and  a  few  orders  to  be  described  later. 
Our purchase on LuxePurses  was the only experience in 
which  the  store  noticed  the  problematic  payment.  Our 
email communication is shown chronologically below: 
Email 1 from the store:  Mark, Thanks for your order. It will 
ship out later today and we'll send tracking info.  
Email  2  from  the  store  after  several  hours: Hi  Mark, Your 
payment via Paypal didn't complete for the full amount. The 
amount  due,  for  this  sale,  was  $27.15.  You  paid  $17.41 
through Paypal, which is $9.74 short. We will be invoicing 
you, for the $9.74 balance still owing through Paypal. Once 
it is paid in full, we will ship your item. 
Email 3 from us: I've paid the owed $9.74. Thanks. 
Email 4 from the store: Thanks so much! Our tech support 
team is confused as well! Seems to not have happened with 
anyone but us! We'll ship your item out tomorrow. 
Our order number was only “#175”, which might suggest 
the  low  volume  of  the  store’s  sales.  Such  a  small  order 
number  and  the  above  emails  seem  to  indicate  that  they 
might  have  spotted  the  payment  problem  manually  and 
accidentally, rather than due to a regular procedure.  
Stores running closed-source proprietary software.  
•  Buy.com.  We  performed  the  exploit  on  Buy.com  twice, 
and  received  an  alcohol  tester  and  a  charger  for  free 
(Figure 1  (D)(E)). We contacted their customer service on 
our  purchases.  Although  we  were  explicit  about  our 
exploit  experiments,  they  could  not  understand  the 
problems  with  our  orders  from  their  accounting  data. 
Email  4  clearly  indicates  that  their  accounting  system 
indeed believes that our order of alcohol tester, which is 
priced at $5.99, was paid, even though we did not pay at 
all.  We returned the two items purchased after the refund 
period  (45  days)  expired  to  avoid  being  refunded,  and 
continued to communicate our findings to the store.  
475
Email  1  from  us:  We  explained  that  one  of  our  orders,  which 
costs  $5.99,  was  unpaid,  expressed  the  willingness  of  paying  in 
full and provided them our credit card information. 
Email  2  from  Buy.com:  They  misunderstood  the  situation,  and 
sent us a generic reply explaining the possible reasons for delayed 
charging of credit cards, even though we paid through PayPal. 
Email 3 from us: I am working on e-commerce security research. 
I  bumped  into  an  unexpected  security  issue  about  Buy.com's 
PayPal  payments.  I appreciate  if  you  can  forward  this  email to 
your  engineering  team.  The  finding  is  regarding  the  order 
54348723.  I  placed  the  order  in  an  unconventional  manner  (by 
reusing a previous PayPal token), which allowed me to check out 
the  product  without  paying.  I  have  received  the  product  in  the 
mail.  Of  course  I  will  pay  for  it.  Here  is  my  credit  card 
information [……]. Please charge my card for $5.99. 
Email 4 from Buy.com: Thank you for contacting us at Buy.com. 
Based on our records you were billed on 6/10/2010 for $5.99.
•  JR.com.  We  successfully  placed  several  orders  for 
different  items  with  lower  prices.  They  all  reached  the 
stage of pending fulfillment/shipping, before we canceled 
them (which was possible at this stage thanks to JR.com’s 
cancellation policy). We also placed an order for a DVD 
by setting a higher price and letting the shipping happen. 
The item was successfully delivered (Figure 1 (F)).  
B.  Attacker anonymity 
the  malicious 
shopper  communicates 
Our research also shows that those attacks can happen 
without disclosing the attacker’s identity. Here, we assume 
that 
through 
anonymity  channels  such  as  Tor  or  Anonymizer,  which 
make his IP address untraceable.   
Merchant/shopper anonymity. From three supermarkets in 
two U.S. states, we bought three $25 MasterCard gift cards 
by cash  without showing any identity. We then  visited the 
gift card website to register each card under “Mark Smith” 
at  a  random  city.  We  confirmed  that  these  cards  were 
eligible  for  registering  seller/buyer  accounts  on  PayPal, 
Amazon,  and  Google,  paying  for  orders,  and  receiving 
payments.  To  register  these  accounts,  we  also  used  fake 
identities to open a few Gmail accounts.   
Anonymity  in  shipping.    Purchase  of  digital  items  (e.g, 
memberships,  software  licenses,  etc.)  does  not  involve 
shipping,  as  the  items  become  downloadable  immediately 
after the payment is done. When it comes to physical items, 
the  attacker  needs  to  provide  a  valid  postal  address.   
However,  the  true  identity  of  the  recipient  is  usually  not 
required:  as  an  example,  a  USB  driver  we  ordered  was 
shipped  to  “Mark  Smith”  at  our  postal  address  through 
USPS. We guess that it may not be difficult for criminals to 
find  addresses  unlinked  to  them.  When  this  happens,  they 
can use fake identities to receive shipments. 
C.  Bug reporting and status of fixes 
Besides  communicating  with  the  stores  regarding  the 
problematic purchases, we also shared technical details with 
affected  stores,  software  vendors  and  CaaS  service 
to 
their 
improving 
providers,  and  offered  assistance 
checkout systems. Here we present some of our efforts.  
Amazon  Payments.  We  reported  the  SDK  vulnerability  to 
the  Amazon  technical  team,  which  immediately  started  an 
investigation.  On  9/22/2010,  15  days  after  our  reporting, 
new SDKs were released with an Amazon Security advisory 
acknowledging us [1]. In addition, Amazon announced that 
starting from 11/1/2010, 40 days after the advisory, Amazon 
servers would stop serving the requests made by vulnerable 
SDKs.  All  merchants  must  use  the  new  version  to  verify 
signatures  on  Amazon’s  outbound  messages,  such  as  IPNs 
and redirections. Amazon is now working on the fix for the 
issue described in Section III.A.2 about Amazon Simple Pay.   
LinuxJournalStore  and  Interspire.  We  disclosed 
to 
LinuxJournalStore  the  findings  on  its  system.  The  store 
immediately  contacted  its  software  vendor  ―  Interspire.  
Interspire developers were not able to figure out our attack 
based on their log data, so they approached us for details of 
the exploits. They recently notified us that these bugs were 
treated as top priorities, and have all been fixed in the latest 
version, and on BigCommerce.com. 
NopCommerce. We reported the NopCommerce bugs to its 
developers.  They  have  fixed  the  one  related  to  PayPal 
Standard.  The  other  bug  (i.e.  about  Amazon  Simple  Pay), 
was left for Amazon to address, as we explained above.  
Buy.com  and  JR.com.  We  have  notified  Buy.com  four 
times  and  JR.com  twice  since  October  2010,  but  have  not 
received their progress updates. 
V.  COMPLEXITY ANALYSIS OF CHECKOUT LOGIC  
We  have  analyzed  individual  vulnerabilities  and  their 
real-world consequences. It is also important to study these 
instances as a class in order to understand the complexity of 
the  overall  problem 
this  space  and  obtain  some 
quantitative measurements of the logic complexity.  
A.  The problem 
in 
the 
We are interested in answering the following question:  
how complex is it for the developer of merchant software to 
detect  program  logic  flaws  that  can  be  exploited  by  the 
malicious  shopper  to  violate  the  payment  completion 
invariant?  We  are  particularly  interested  in  exploits  that 
induce 
transaction  states 
perceived by the merchant and the CaaS. It is important to 
note  that  our  focus  is  on  program  logic  flaws,  which  are 
more  design  fallacies  than  coding  flaws.  This  aspect 
distinguishes  these  flaws  from  vulnerabilities  specific  to 
programming languages (e.g., buffer overrun and cross-site 
scripting), operating systems and cryptographic primitives. 
inconsistencies  between 
We  consider  an  adversary  whose  only  channels  to 
interact  with  the  merchant  and  the  CaaS  are  the  exposed 
web  APIs.  The  adversary  can  invoke  these  APIs  in  an 
arbitrary order, set argument values for his calls at will, sign 
messages  with  his  own  signature,  and  memorize  messages 
received  from  other  parties  to  replay  later,  as  long  as  the 
following rules are respected: 
(1)  The attacker is a registered customer of the merchant, and 
owns a payer account and a payee account on the CaaS; 
(2)  An  API  argument  signed  or  under  other  integrity 
protection cannot be modified by other parties; 
(3)  The syntax of each API function must be followed. 
The attacker being a web API caller implies that it does 
not have to behave like a normal browser, but can act as a 
merchant,  a  CaaS  or  any  other  entity  that  communicates 
through  HTTPS.  To  understand  the  complexity  of  finding 
vulnerabilities  exploitable  by  such  an  adversary,  we 
conducted  a  formal  reasoning  study  about  Interspire’s 
checkout logic, as reported in the rest of this section.   
B.  Modeling a subset of Interspire’s logic  
To  investigate  Interspire’s  logic  for  handling  the  four 
payment  methods  described  in  Section  III.B,  we  first 
extracted  a  model 
source  code 
corresponding to these handlers, then checked them against 
the  payment-completion  invariant  using  Poirot  [30],  an 
automatic  verification 
that  performs  verification-
condition (VC) generation and theorem proving.  
Interspire’s 
from 
tool 
Because the logic flaws that we focus on are language 
independent, our  modeling language does not have to be a 
web  programming  language,  such  as  HTML,  JavaScript, 
ASP.NET  or  PHP,  as  long  as  it  accurately  preserves  the  
program logic. Currently, our model is a program expressed 
in  C  language,  which  models  the  interactions  between  the 
merchant,  the  CaaS,  and  the  malicious  shopper:  the  three 
real-world  parties  are  three  modules  in  our  program.  The 
source code and full details for reproducing our results are 
given in [38]. Its components are illustrated in Figure 11.  
Attacker
 (concrete)
merchant 
(concrete)
CaaS servicing the 
four payment 
methods (concrete) 
Attacker
 (symbolic)
Concrete model: an executable. 
Symbolic model: a VC generated by the Poirot compiler.
Figure 11: Concrete and symbolic models 
Merchant  and  CaaS.  The  portion  for  modeling  the 
merchant and the CaaS contains 506 lines of code. Table IV 
shows how certain key concepts of the actual application are 
modeled in our program. 
TABLE IV.  
REAL-WORLD CONCEPTS MAPPED TO OUR MODEL 
In our model 
In actual systems
Merchant and CaaS servers  Merchant and CaaS modules 
Web APIs 
URLs 
HTTP round-trips (RTs) 