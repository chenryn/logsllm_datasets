### Optimization of the Provided Text

#### Setup and Tools
We installed NopCommerce (version 1.6) and the latest licensed version (5.5.4) of Interspire on our web servers. Additionally, we registered seller and shopper accounts with PayPal, Amazon Payments, and Google Checkout. On the shopper side, we utilized Firefox along with two HTTP debugging tools: Live HTTP Headers [21] and Fiddler [17]. Live HTTP Headers is a Firefox add-on capable of capturing and replaying HTTP/HTTPS traffic, while Fiddler is used for intercepting and manipulating web traffic. Using these tools, we successfully executed all the exploits described in Section III.

#### Evaluation on Commercial Websites
We set up merchants on a commercial website and, unsurprisingly, all the discovered exploits worked on the applications hosted on our server. However, when the same applications run on commercial websites, they may be configured differently and protected by additional security mechanisms. To evaluate the security threat in a more realistic scenario, we signed up for a 15-day trial merchant account on BigCommerce [6], which is Interspire’s hosting platform. Our evaluation showed that the same exploits also succeeded against our store hosted on this platform.

#### Real-World Exploits
We conducted exploit analyses on several real online stores to understand the end-to-end scenarios. The security flaws reported in our analysis are related to the checkout and payment steps, which are only part of the entire purchase process. Here are the results from our real-world tests:

- **GoodEmotionsDVD.com**: A NopCommerce-powered store selling over 2,000,000 DVDs/CDs of movies, music, and games. It supports PayPal Standard. By exploiting the flaw in Section III.A.1, we were able to purchase a DVD at a lower price (Figure 1 (A)). We later paid the balance owed and notified the store and the developers, who acknowledged the issue.
- **PrideNutrition.com**: An Interspire-powered store selling nutrition supplements. The website provides PayPal Express-based checkout. We bought a bottle of Agility Cream for $5 less than the actual price and received the shipment (Figure 1 (B)). We shared our discovery with the store, which expressed gratitude for our help [37].
- **LinuxJournalStore.com**: The online store of Linux Journal, which sells various Linux-related products, including T-shirts, DVDs/CDs, magazines, and digital products. The store uses Interspire and enables PayPal Express, making it vulnerable. We targeted digital products, which do not require shipping. We were able to pay for one issue ($5.99) but check out two different issues ($11.98 together), and successfully download them (Figure 1(C)). Our communication with the store is detailed in [37].
- **LuxePurses.com**: During our study, we placed at least eight orders on real-world stores. Our purchase on LuxePurses was the only instance where the store noticed the problematic payment. The email communication is as follows:
  - **Email 1 from the store**: "Mark, thanks for your order. It will ship out later today, and we'll send tracking info."
  - **Email 2 from the store after several hours**: "Hi Mark, your payment via PayPal didn't complete for the full amount. The amount due was $27.15. You paid $17.41 through PayPal, which is $9.74 short. We will be invoicing you for the $9.74 balance still owing through PayPal. Once it is paid in full, we will ship your item."
  - **Email 3 from us**: "I've paid the owed $9.74. Thanks."
  - **Email 4 from the store**: "Thanks so much! Our tech support team is confused as well! Seems to not have happened with anyone but us! We'll ship your item out tomorrow."

  Our order number was only “#175,” suggesting low sales volume. This and the emails indicate that they might have spotted the payment problem manually and accidentally rather than through a regular procedure.

- **Buy.com**: We performed the exploit twice, receiving an alcohol tester and a charger for free (Figure 1 (D)(E)). We contacted their customer service, but they could not understand the problems with our orders from their accounting data. Email 4 clearly indicates that their accounting system believed our order of the alcohol tester, priced at $5.99, was paid, even though we did not pay. We returned the items after the refund period (45 days) expired and continued to communicate our findings.
- **JR.com**: We successfully placed several orders for different items with lower prices, all reaching the pending fulfillment/shipping stage before cancellation. We also placed an order for a DVD by setting a higher price and letting the shipping happen, which was successfully delivered (Figure 1 (F)).

#### Attacker Anonymity
Our research shows that these attacks can occur without disclosing the attacker's identity. We assume the malicious shopper communicates through anonymity channels like Tor or Anonymizer, making their IP address untraceable.

- **Merchant/Shopper Anonymity**: From three supermarkets in two U.S. states, we bought three $25 MasterCard gift cards by cash without showing any identity. We registered each card under “Mark Smith” at a random city and confirmed that these cards were eligible for registering seller/buyer accounts on PayPal, Amazon, and Google, paying for orders, and receiving payments. We also used fake identities to open Gmail accounts.
- **Anonymity in Shipping**: Purchase of digital items (e.g., memberships, software licenses) does not involve shipping. For physical items, the attacker needs to provide a valid postal address, but the true identity of the recipient is usually not required. As an example, a USB driver we ordered was shipped to “Mark Smith” at our postal address through USPS. Criminals can likely find addresses unlinked to them and use fake identities to receive shipments.

#### Bug Reporting and Status of Fixes
We communicated with the affected stores, software vendors, and CaaS service providers, offering assistance to improve their checkout systems. Here are some of our efforts:

- **Amazon Payments**: We reported the SDK vulnerability to the Amazon technical team, which released new SDKs with an Amazon Security advisory acknowledging us [1]. Starting from 11/1/2010, Amazon servers stopped serving requests made by vulnerable SDKs. All merchants must use the new version to verify signatures on Amazon’s outbound messages, such as IPNs and redirections. Amazon is working on fixing the issue described in Section III.A.2 about Amazon Simple Pay.
- **LinuxJournalStore and Interspire**: We disclosed our findings to LinuxJournalStore, which immediately contacted Interspire. Interspire developers, unable to figure out our attack based on log data, approached us for details. They recently notified us that these bugs were treated as top priorities and have been fixed in the latest version and on BigCommerce.com.
- **NopCommerce**: We reported the NopCommerce bugs to its developers. They fixed the one related to PayPal Standard. The other bug (about Amazon Simple Pay) was left for Amazon to address.
- **Buy.com and JR.com**: We have notified Buy.com four times and JR.com twice since October 2010 but have not received progress updates.

#### Complexity Analysis of Checkout Logic
We analyzed individual vulnerabilities and their real-world consequences. It is also important to study these instances as a class to understand the complexity of the overall problem and obtain quantitative measurements of the logic complexity.

- **The Problem**: We aim to answer how complex it is for the developer of merchant software to detect program logic flaws that can be exploited by the malicious shopper to violate the payment completion invariant. We focus on program logic flaws, which are more design fallacies than coding flaws, distinguishing them from vulnerabilities specific to programming languages, operating systems, and cryptographic primitives.
- **Modeling a Subset of Interspire’s Logic**: To investigate Interspire’s logic for handling the four payment methods described in Section III.B, we extracted a model from the source code and checked it against the payment-completion invariant using Poirot [30], an automatic verification tool that performs verification-condition (VC) generation and theorem proving. Our modeling language is C, accurately preserving the program logic. The source code and full details for reproducing our results are given in [38].

**Figure 11: Concrete and Symbolic Models**
- **Concrete Model**: An executable.
- **Symbolic Model**: A VC generated by the Poirot compiler.

**Table IV: Real-World Concepts Mapped to Our Model**
- **In Our Model**: Merchant and CaaS modules.
- **In Actual Systems**: Merchant and CaaS servers.
- **Web APIs**: URLs.
- **HTTP Round-Trips (RTs)**: Interactions between the merchant, CaaS, and the malicious shopper.

This comprehensive approach allows us to better understand and mitigate the security threats in e-commerce platforms.