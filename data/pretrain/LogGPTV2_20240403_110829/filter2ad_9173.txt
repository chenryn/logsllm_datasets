# 【技术分享】how2heap总结-上

## 译文声明
本文是翻译文章，原文来源于reversing.win。译文仅供参考，具体内容表达及含义以原文为准。

## 0x00 前言
"how2heap" 是由 shellphish 团队在 GitHub 上开源的堆漏洞系列教程。最近我一直在学习堆漏洞利用方面的知识，阅读这些利用技巧后受益匪浅。这篇文章是我对这个系列教程的学习总结，希望能与大家分享。我会尽量翻译原版教程的内容，方便英语不太好的同学学习。但在深入这些技巧之前，建议大家先阅读华庭撰写的《Glibc内存管理-Ptmalloc2源码分析》。

**原版教程链接:**
[https://github.com/shellphish/how2heap](https://github.com/shellphish/how2heap)

## 0x01 测试环境
- **操作系统:** Ubuntu 16.04.3 LTS x64
- **GLIBC 版本:** 2.23

## 0x02 目录
1. first_fit
2. fastbin_dup
3. fastbin_dup_into_stack
4. unsafe_unlink

## 0x03 first_fit
### 源码:
```c
// 代码省略
```

### 输出:
```
// 输出省略
```

### 翻译:
该程序并不展示如何攻击，而是展示了 glibc 的一种分配规则。glibc 使用 **first-fit** 算法选择一个 free-chunk。如果存在一个足够大的 free-chunk，`malloc` 会优先选取这个 chunk。这种机制可以被用于 **use after free (UAF)** 攻击。

首先分配两个 buffer：
- `malloc(512)`: 0x662420
- `malloc(256)`: 0x662630

我们也可以继续分配更多的 buffer。为了方便展示，我们在第一个分配的内存空间中放置字符串 "this is A!"。然后释放这块内存。之后只要我们用 `malloc` 申请的内存大小小于 512 字节，都会返回地址 0x662420。

例如，我们尝试申请 500 字节的内存：
- `malloc(500)`: 0x662420

在这个新的内存块中放置字符串 "this is C!"。此时，第一个和第三个内存块都指向同一个地址 0x662420。

关于 first-fit 的细节不多，但这里提到了 UAF 攻击。网络上有许多关于 UAF 的文章，这里推荐一篇供参考。

## 0x04 fastbin_dup
### 源码:
```c
// 代码省略
```

### 输出:
```
// 输出省略
```

### 翻译:
该程序展示了通过 fastbin 进行 double-free 攻击的方法。攻击过程较为简单。

首先分配三块内存：
- `malloc(8)`: 0x1f89420
- `malloc(8)`: 0x1f89440
- `malloc(8)`: 0x1f89460

释放第一块内存。如果我们再次释放 0x1f89420，程序会崩溃并报错，因为此时这块内存位于对应 free-list 的顶部，再次释放时会被检查到。因此，我们释放第二块内存 0x1f89440，然后再释放第一块内存 0x1f89420。

此时，free-list 包含 [0x1f89420, 0x1f89440, 0x1f89420]。如果我们三次调用 `malloc`，将会两次得到 0x1f89420：
- `malloc(8)`: 0x1f89420
- `malloc(8)`: 0x1f89440
- `malloc(8)`: 0x1f89420

这里展示了一个简单的 double-free 攻击。更详细的 double-free 利用将在后续章节介绍。

## 0x05 fastbin_dup_into_stack
### 源码:
```c
// 代码省略
```

### 输出:
```
// 输出省略
```

### 翻译:
该程序详细展示了上一章中的技巧，通过欺骗 `malloc` 返回一个可控区域的指针（例如栈指针）。

我们希望 `malloc` 返回的地址是 0x7ffef0f6a078。首先分配三块内存：
- `malloc(8)`: 0x220f420
- `malloc(8)`: 0x220f440
- `malloc(8)`: 0x220f460

释放第一块内存。同样地，我们不能立即再次释放第一块内存，因此我们释放第二块内存 0x220f440，然后再释放第一块内存 0x220f420。

此时，free-list 包含 [0x220f420, 0x220f440, 0x220f420]。我们将在第一块内存 0x220f420 上构造数据进行攻击。首先将前两个地址从 free-list 中移除：
- `malloc(8)`: 0x220f420
- `malloc(8)`: 0x220f440

现在 free-list 只剩下 [0x220f420]。尽管 0x220f420 仍在链表上，但我们仍可以访问它。在栈上写入一个假的 chunk-size (例如 0x20)，使 `malloc` 认为存在一个 free-chunk，并在后续内存申请中返回这个地址。

接下来，我们将 0x220f420 的前 8 个字节修改为刚才写入 chunk-size 的栈单元的前一个栈单元的地址：
- `malloc(8)`: 0x220f420，将栈地址放入 free-list。
- `malloc(8)`: 0x7ffef0f6a078，成功返回栈地址。

该程序与上一个程序类似，区别在于在 double-free 后多伪造了一个 chunk 在链表上，进行了第四次 `malloc`，将一个可控地址分配出来。当然，这个地址也可以是堆地址，只要可控即可（因为我们至少要伪造好 size 字段以逃过检查）。

## 0x06 unsafe_unlink
### 源码:
```c
// 代码省略
```

### 输出:
```
// 输出省略
```

### 翻译:
该技术可用于在已知区域内（如 BSS 段）有一个指针，并且可以在该区域内调用 `unlink` 的情况。最常见的场景是在带有全局指针的缓冲区中存在溢出。

此练习的关键在于利用 `free()` 来改写全局指针 `chunk0_ptr` 以达到任意地址写入的目的。全局指针 `chunk0_ptr` 位于 0x602060，指向 0x1a35420。我们需要改造的 victim chunk 位于 0x1a354b0。

我们开始在 `chunk0` 内部伪造一个 chunk。设置一个 `fd` 指针，使得 `p->fd->bk == p`（其中 `p` 指的是 `chunk0`），再设置一个 `bk` 指针，使得 `p->bk->fd == p`。经过这些设置后，可以绕过 `(P->fd->bk != P || P->bk->fd != P) == False` 的校验。

- 伪造 chunk 的 `fd` 指针: 0x602048
- 伪造 chunk 的 `bk` 指针: 0x602050

我们还需要确保伪造 chunk 的 size 字段与下一个堆块的 presize 字段 (fd->presize) 的值相同。经过这个设置，可以绕过 `(chunksize(P) != prev_size(next_chunk(P))) == False` 的校验。因此，我们将伪造 chunk 的 size 字段设置为 `chunk0[-3]` 的值 0x00000000。

假设我们在 `chunk0` 处有一个溢出，可以修改 `chunk1` 的头部信息。我们缩小 `chunk1` 的 presize（表示 `chunk0` 的 size），让 `free` 认为 `chunk0` 从伪造的堆块开始。关键在于已知的指针正确指向伪造 chunk 的开头，并相应地缩小了 chunk。

如果我们正常释放 `chunk0`，`chunk1` 的 presize 应该是 0x90，但我们将其修改为 0x80。通过将 `previous_in_use` 的值设为 `False`，将 `chunk0` 标记为 free（尽管它并未真正释放）。然后释放 `chunk1`，让 consolidate backward 调用 `unlink` 并修改 `chunk_ptr`。

现在，我们可以利用 `chunk_ptr` 修改其自身的值，使其指向任意地址。最终，`chunk0_ptr` 指向我们指定的地址，我们用它来修改 victim string：
- 原始值: Hello!~
- 新值: BBBBAAAA

在这里，我们通过构造一个假的 chunk 来欺骗 `free` 调用 `unlink`，并通过 `unlink` 修改内存，实现任意地址读写。关键在于信息的伪造。以下是初始和构造后的 metadata 情况：

- **初始 metadata:**
  - `chunk0_ptr` 指向 0x1a35420
  - `victim chunk` 位于 0x1a354b0

- **构造后的 metadata:**
  - 伪造 chunk 的 `fd` 和 `bk` 指针设置完成
  - 伪造 chunk 的 size 字段设置为 0x00000000

后续的 `free` 调用 `unlink` 来修改内存。前面提到的一个可能让人困惑的地方是：
- 我们需要确保伪造 chunk 的 size 字段与下一个堆块的 presize 字段 (fd->presize) 的值相同。
- 经过这个设置，可以绕过 `(chunksize(P) != prev_size(next_chunk(P))) == False` 的校验。
- 因此，我们将伪造 chunk 的 size 字段设置为 `chunk0[-3]` 的值 0x00000000。

实际上，即使不改动其他数据，将伪造 chunk 的 size 字段改为 0x80 或 0 都可以通过检查，其他值则会导致错误。这是因为 `chunksize(P) != prev_size(next_chunk(P))` 的检查方式如下：获取伪造 chunk 的 size 值，然后通过这个 size 值加上伪造 chunk 的地址减去 chunk 头部大小来获取下一个 chunk 的 presize 值，然后对比 size 和 presize 是否相等。

当伪造 chunk 的 size 为 0 时，实际上找到的是伪造 chunk 的 presize，两者都是 0，自然相等。而将伪造 chunk 的 size 设置为 0x80 也能通过检查的原因是，此时获取下一个 chunk 的 presize 是正常的，而下一个 chunk 就是 `chunk1`，`chunk1` 的 presize 已经被设置为 0x80，两个值刚好相等。

你可以自己验证一下。成功修改后的 `chunk0_ptr` 如下所示：

- 修改为 `chunk0_ptr` 所在位置往后数第三个单元的值（一个指针大小为一个单元）。