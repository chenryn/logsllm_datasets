content 
DOMString 
Text 
splitText 
One 
offset 
unsigned long 
Text 
Grammar – Fuzzing Grammar 
Using the gathered information we can parse the Interface objects in any given 
IDL to a JavaScript object containing information about the interface members 
to be used by the fuzzer. 
There are some main pieces of information gathered from the example 
interface mainly the interface identifier (Name), inherited parent interface, 
interface members (methods, attributes). 
For Attributes and Methods an array of arrays is created with each child array 
containing information about a single Attribute or method members of the 
respective interface. 
A single Attribute array will have three members: 
*The Attribute Identifier, *function(s) to generate the expected value type+,’readOnly flag’+ 
A single Method array will have three members: 
*The Method Identifier, *function(s) to generate method parameters and values+,’high flag’+ 
Grammar – Fuzzing Grammar Contd. 
You can code your own functions to generate attribute values and method parameters. Or use the 
already available helper functions in NodeFuzz „randoms.js‟ file. 
The main Attributes and Methods arrays are concatenated to the parent interface object attributes 
and methods arrays to simulate inheritance.  
Example Interface as defined in the Fuzzing grammar: 
TextInterface = { 
'Name': 'text', 
'Attributes': [ 
['isElementContentWhitespace',[GenerateExpectedValue()],'readonly'], 
['wholeText',[ GenerateExpectedValue()+,’’+ 
].concat(CharacterDataInterface.Attributes), 
'Methods':[ 
['replaceWholeText',[ GenerateExpectedParameters()],'high'], 
['splitText',[ GenerateExpectedParameters()],'high'] 
].concat(CharacterDataInterface.Methods), 
'tagName':'Text', 
'style':CSS2PropertiesInterface 
}; 
Helper Functions 
These are some of the helper functions that are implemented in NodeFuzz 
„randoms.js‟ we can implement our own or tweak the ones already available to 
our needs these functions are used in generating attributes values, method 
parameters and all through the test case generation. 
Name 
Description 
randoms() 
return random number, float value or hex number 
rint(num) 
return a random number limited by parameter. 
ra(array) 
return a random element an array.  
arrayWalk(array) 
return a random element from array if it is a function execute it and retrurn 
the return value. if it is a string or an int return  the value. 
string(num) 
return a random length string with length based on a random number 
limited by the input parameter. 
randbool() 
returns random Boolean. 
floatValue(num) 
return a random float value. 
getRandomColor() 
returns a random color in either hex, hsl, rgbint formats 
distanceValue() 
return a random number or float with distance suffixes like px,%,cm, etc ... 
retURI(num) 
return a  random length URL 
returnRandomElement() 
returns a random element from the list of created elements and either try 
to reference a near by object like 'firstChild','nextSibling',etc ... or just return 
the element object itself. 
Fuzzing Module 
Wadi works on grammar created from the IDL that mapped interfaces to 
javascript objects using these objects to be able to generate valid JS 
statements into a string array. Then output an HTML document with a 
script containing the generated test case. The flow of the Wadi is as 
follows 
Test Case generation – Element 
Creation 
These are the main and first functions executed by Wadi. It 
generates JS statements to randomly create elements from the 
available HTML interfaces and inserts random child text nodes. 
Name 
Description 
createElement() 
creates a random element from the list of interfaces and saves a reference to the 
object both in fuzzer space and browser space 
createTextNode() 
creates random length text nodes and attach them to random elements in the DOM. 
mangleElements() 
randomly mangles element positions within the document. 
Wadi Output: 
try { HTML0=document.createElement("EMBED")} catch(e) {} 
try { HTML0.id="HTML0"} catch(e) {} 
try { createdElements['HTML0']=HTML0} catch(e) {} 
try { document.body.appendChild(HTML0)} catch(e) {} 
Test Case generation – Element 
Creation Contd. 
The creation functions will save a references to the created 
Element objects to the local fuzzer space objects array 
'CreatedElements' to be able to access properties and methods 
of the created element. As well as save a reference to the 
created object to the browser space to be able to manipulate the 
saved references.  
The saved object in fuzzer space will have the following structure 
for the previous example: 
{   'objName':HTML0, 
    'type':'object name',  
    'object':Embed interface object reference 
}; 
Test Case generation – Fuzzing 
Interfaces Functions 
Function 
Description 
fuzzWindowAttribs, 
randomly set the 'window' interface object attributes. 
fuzzWindowMethods, 
randomly call the 'window' interface object methods. 
fuzzStyle, 
Pick a random element and set a random style property using element.style. 
fuzzStyle1, 
pick a random style sheet with random reference to element and set random style properties using 
insertRule. 
fuzzDocumentAttribs, 
randomly set the 'document' interface object attributes. 
fuzzDocumentMethods, randomly call the 'window' interface object methods. 
deleteRandomKey, 
deletes a random refence to the created objects saved in the 'createdElements' object in browser space. 
fuzzPLayerMethods, 
if no animation player found call the createPlayer() function to create a new animation player and add 
reference to it in the createElements object array. if a player exist call a random method from the 
animation interface object. 
fuzzPlayerAttribs, 
if no animation player found call the createPlayer() function to create a new animation player and add 
reference to it in the createElements object array. if a player exist set a random attribute from the 
animation interface object. 
Wadi will then call the function fuzz(num) num being the number of rounds to execute 
fuzzer functions. Simply the fuzz() function picks a random function name from the below 
list and executes it and return the output JavaScript statement to our string array. 
Test Case generation – Wadi Interfaces 
contd. 
Function 
Description 
MutationObserve, 
creates a random mutation observer and add reference to it in the createElements object array. 
fuzzMutationObserve, 
if no mutation observer have been created, call () function if one exists call or set random method or 
attribute from the Mutation observer interface object. 
createRangeTraversal, 
creates a random treeWalker or nodeIterator and add reference to them in the createElements object 
array. 
fuzzRangeTraversal, 
if no range has been created call createRangeTraversal() function. else call or set random method or 
attribute from the respective NodeIterator Interface or TreeWalker Interface objects. 
fuzzElementsMethods, randomly set the attributes of a randomly selected element from the list of created elements. 
fuzzElementsAttribs, 
randomly call the methods of a randomly selected element from the list of created elements. 
addLoop, 
add a random loop function around js block loops are (for, while, setTimeout, setInterval) 
crossRef, 
try to set object references to a random other ex: HTML0 = HTML1.firstChild 
AddEvent,  
attach a random event to one of the created elements. creates an event object using createEvent 
directive and add reference to the created event object to a list for later use. 
dispatchEvt, 
randomly fires one of the created events. 
intfuzz 
return random function name for use ass callbacks for certain operations 
GarColl, 
force garbage collection. 
Test Case generation – preparing the 
output script 
• Creating Internal callbacks based on the 
number of function names returned by 
intfuzz() 
• Insert the element creation JS block. 
• Insert all other object create JS 
statements. 
• Randomly insert JS statements returned 
by fuzz() function. 
Sample Wadi Output 
Results 
• Using Wadi we were able to find And report 4 
confirmed bugs in latest Chromium ASan. 
version 
• 2 Were Duplicates.  
• Issue No: 446517 Duplicate With issue 383777 
• Issue No: 445772 Duplicate with Issue: 445638 
• 2 were confirmed with security severity high 
and affecting all OS. Fixed awaiting Release 
and hopefully reward :D  
• Issue No: 445332 
• Issue No: 453279 
BUG#1 Issue No:446517   
BUG#2 Issue No:445772 
BUG#3 Issue No:445332 
BUG#4 Issue No:453279 
References 
• http://www.w3.org/DOM/ 
• http://www.w3.org/TR/WebIDL/ 
• Fuzzing Brute Force Vulnerability Discovery: 
Michael Sutton, Adam Greene, Michael 
Pedram Amini. 
• Fuzzing for Software Security Testing and 
Quality Assurance: Ari Takanen, Jared D. 
Demott, Charlie Miller. 
• Browser bug hunting - Memoirs of a last man 
standing: Atte Kettunen 44con talk. 
Q&A