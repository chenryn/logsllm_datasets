### 动态恢复计划生成
由于采用了动态恢复计划生成方法，我们的方案能够在未知原因的情况下恢复错误——只要错误的原因包含在资源空间内，并且可以通过API调用进行恢复。如果错误原因不在资源空间内或者API无法访问（例如云系统断开连接），我们的方法将无法恢复该错误。因此，尽管错误的原因可能会影响错误是否持续或再次发生，但它不会影响恢复过程本身。

### 处理错误检测中的误报
#### 实验过程
为了测试POD-Recovery对错误检测中误报的反应，我们在没有注入实际错误的情况下触发恢复服务，并观察POD-Recovery是否会采取任何行动。对于每个恢复点（RP），我们重复此操作50次。因为错误检测会触发恢复服务，而POD-Recovery并不考虑触发消息提供的任何原因，所以我们不需要研究更复杂的误报情况。另外，如上所述，如果瞬时错误在恢复开始前消失，我们将其视为从恢复角度来看的误报。

#### 实验结果
表25展示了恢复服务处理错误检测误报的能力。可以看到，在所有100次实验运行中，均未采取任何恢复行动，表明所有误报都被成功识别。
**表25. 错误检测误报处理**
| 恢复点 | 误报次数 | 无恢复次数 |
|--------|---------|-----------|
| RP 1   | 50      | 50        |
| RP 2   | 50      | 50        |

#### 满足恢复要求R6
由于我们的恢复方法设计了动态计划生成，来自错误检测的误报不会导致不必要的恢复动作。

### 恢复过程中的自我恢复
#### 实验过程
为测试POD-Recovery在执行恢复计划过程中出现错误时的行为，我进行了安装操作，向每个确定的恢复点注入故障以触发POD-Recovery，等待选定的恢复动作执行后，再手动向恢复动作中注入额外的故障，以触发“恢复中的恢复”模块。针对安装操作的每个恢复点，我进行了30次这样的“恢复中的恢复”测试。

#### 实验结果
表26显示了安装操作中“恢复中的恢复”的恢复时间，相对标准偏差最多为2.1%。
**表26. “恢复中的恢复”恢复时间**
| 恢复点 | 进程步骤 | 错误 | 选定恢复动作（帕累托集） | 恢复时间（帕累托集） | 选定恢复动作（用户约束） | 恢复时间（用户约束） |
|--------|----------|------|------------------|--------------------|-------------------|---------------------|
| RP 1   | 启动Web实例 | Web实例未启动 | 重启Web实例；分配弹性IP | 65.71秒 | 重启Web实例；分配弹性IP | 77.09秒 |
| RP 2   | 分配弹性IP到Web实例 | 数据库实例未启动 | 重启数据库实例；分配弹性IP | 67.34秒 | 重启数据库实例；分配弹性IP | 61.66秒 |

#### 满足恢复要求R7
从表26可以看出，“恢复中的恢复”最大恢复时间为77.09秒。因此，原始恢复和“恢复中的恢复”的总时间远小于两个相邻恢复点之间指定的时间间隔。由此，POD-Recovery满足了“恢复中的恢复”要求。

### 案例研究3：云扩展操作中的恢复
本节通过使用云扩展操作作为案例研究，展示POD-Recovery的评估结果。本次实验的目的有三个：1) 展示扩展操作中恢复点的确定结果；2) 展示扩展操作中资源状态管理的工作量；3) 证明POD-Recovery在扩展操作中满足恢复要求的能力。实验环境见图26。

#### 恢复点确定
扩展操作包括以下三步：1) 将自动伸缩组的目标容量增加12；2) 等待自动伸缩组启动额外的12个实例；3) 将这12个实例注册到负载均衡器。图33展示了不同粒度下恢复点划分的结果。首先，图33(a)是通过对扩展操作步骤应用“可识别恢复动作”得到的；图33(b)结合了一些低故障率的部分。基于恢复点确定准则和故障率考虑，最终确定的恢复点位于步骤2和步骤3之后。
**图33. 扩展操作恢复点确定**

#### 资源空间确定工作量
确定的资源空间包含四种资源类型：实例（即虚拟机）、启动配置、自动伸缩组和弹性负载均衡器。每种资源类型都有其属性（例如，实例具有实例ID、实例类型、机器镜像等）。这些资源之间的依赖关系如下：1) 自动伸缩组与一个启动配置关联；2) 自动伸缩组包含一组实例（可能为空）；3) 弹性负载均衡器链接到一组实例（可能为空）；4) 每个实例最多属于一个自动伸缩组；5) 每个实例可以链接到一组弹性负载均衡器（可能为空）。扩展操作中资源空间确定的工作量如图34所示，展示了基于30次运行的资源空间确定算法执行时间。平均执行时间为48.40毫秒，相对标准偏差为12.64%，第75百分位数（75%分位数）为53毫秒。
**图34. 扩展操作资源空间确定工作量**

#### 预期资源状态模板生成工作量
扩展操作中预期资源状态模板生成的工作量如图35所示，展示了基于30次运行的预期资源状态模板生成算法执行时间。平均执行时间为51.04毫秒，相对标准偏差为5.55%，第75百分位数（75%分位数）为52.75毫秒。
**图35. 扩展操作预期资源状态模板生成工作量**

#### 满足恢复要求
POD-Recovery旨在满足第3.5节描述的所有八个恢复要求。因此，需要进行实验评估来验证POD-Recovery满足所有恢复要求的能力。下面的实验设计用于展示POD-Recovery如何在扩展操作中满足每个恢复要求。

##### A. 运行时恢复（满足恢复要求R1）
根据第4-7章的描述，我们的方法本质上是一个运行时恢复解决方案。

##### B. 满足恢复时间目标（RTO）
###### 实验过程
此恢复要求关注的是系统恢复到一致状态所需的时间。因此，我们通过在云应用上执行扩展操作来测量恢复时间。初始情况下，云应用中有12个实例，这些实例被附加到一个自动伸缩组并注册到一个弹性负载均衡器。运行在这些实例上的云应用是TPC-W，这是一个在Tomcat服务中运行的三层Web基准应用，每个实例的平均工作负载为每秒50个查询请求。我们使用专有的故障注入工具，对扩展操作中确定的两个恢复点分别注入故障，根据第7.3节描述的方法自动确定适用的恢复模式，并基于两种恢复动作选择方法之一执行恢复。第一种选择方法选出的是最优恢复动作；第二种选择方法选出的恢复动作虽然不一定是最优的，但也是可接受的。因此，这两种优化方法选出的恢复动作都是可接受的。注入的故障如表27所示，故障的选择基于行业访谈和故障报告，具有代表性。恢复时间通过累加恢复动作中每个函数的执行时间计算得出。我们进行了30次实验，测量了恢复时间。
**表27. 扩展操作中注入的故障**
| 恢复点 | 注入故障 |
|--------|-----------|
| RP 1 (步骤2后) | 6个实例AMI错误 |
| RP 2 (步骤3后) | 6个实例未在ELB中 |

###### 实验结果
表28显示了扩展操作的恢复时间。这里的恢复时间仅指执行恢复计划的时间。表中的恢复时间代表30次运行的平均值。最高的相对标准偏差为2.1%。对于每个恢复点，基于帕累托集搜索优化方法选择的恢复动作执行时间不超过其他适用的恢复动作；基于用户约束优化方法选择的恢复动作执行时间不一定少于所有其他动作，但在业务利益相关者设定的时间约束内。
**表28. 扩展操作恢复时间**
| 项目 | 恢复模式ID | 恢复模式 | 恢复点 | 进程步骤 | 错误 | 适用恢复模式 | 选定恢复动作（帕累托集） | 恢复时间（帕累托集） | 选定恢复动作（用户约束） | 恢复时间（用户约束） |
|------|------------|----------|--------|----------|------|--------------|------------------|--------------------|-------------------|---------------------|
| RP 1 | 步骤1. 增加自动伸缩组的目标容量 | 6个实例AMI错误 | RP1, RP2, RP3, RP4, RP5 |  |  |  |  |  |  |  |
| RP 2 | 步骤2. 等待自动伸缩组启动额外12个实例 | 6个实例未在ELB中 |  |  |  |  |  |  |  |  |