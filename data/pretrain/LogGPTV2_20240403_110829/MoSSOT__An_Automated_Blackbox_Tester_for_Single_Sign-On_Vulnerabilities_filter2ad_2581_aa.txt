title:MoSSOT: An Automated Blackbox Tester for Single Sign-On Vulnerabilities
in Mobile Applications
author:Shangcheng Shi and
Xianbo Wang and
Wing Cheong Lau
MoSSOT: An Automated Blackbox Tester for
Single Sign-On Vulnerabilities in Mobile Applications
Shangcheng Shi
Wing Cheong Lau
Xianbo Wang
The Chinese University of Hong Kong
The Chinese University of Hong Kong
The Chinese University of Hong Kong
PI:EMAIL
PI:EMAIL
PI:EMAIL
ABSTRACT
Mobile applications today increasingly integrate Single Sign-On
(SSO) into their account management mechanisms. Unfortunately,
the involved multi-party protocol, i.e., OAuth 2.0, was originally
designed to serve websites for authorization purpose. Due to the
complexity of the adapted protocol, a large number of insecure
SSO implementations still exist in the wild. Although the security
testing for real-world SSO deployments has attracted considerable
attention in recent years , existing work either focuses on websites
or relies on the manual discovery of specific and previously-known
vulnerabilities. In the paper, we design and implement MoSSOT
(Mobile SSO Tester), an automated blackbox security testing tool
for Android applications utilizing the SSO services from three main-
stream service providers. The tool detects the vulnerabilities within
the practical SSO implementations by fuzzing related network mes-
sages. We used MoSSOT to examine over 500 first-tier third-party
Android applications from US and Chinese app markets. According
to the test result, around 72% of the tested applications incorrectly
implement SSO and are thus vulnerable. Besides, our test identifies
an unknown vulnerability as well as a new variant, in addition to
four known ones. The vulnerabilities enable the attacker to illegally
log into the mobile applications as the victims or gain access to the
protected resources. MoSSOT has been released as an open-source
project.
CCS CONCEPTS
• Security and privacy → Software and application security.
KEYWORDS
OAuth 2.0; Single Sign-On; Security Testing; Mobile App Authenti-
cation
ACM Reference Format:
Shangcheng Shi, Xianbo Wang, and Wing Cheong Lau. 2019. MoSSOT: An
Automated Blackbox Tester for Single Sign-On Vulnerabilities in Mobile
Applications. In ACM Asia Conference on Computer and Communications
Security (AsiaCCS ’19), July 9–12, 2019, Auckland, New Zealand. ACM, New
York, NY, USA, 14 pages. https://doi.org/10.1145/3321705.3329801
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
AsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6752-3/19/07...$15.00
https://doi.org/10.1145/3321705.3329801
1 INTRODUCTION
As the open standard for authorization, OAuth 2.01 enables end-
users to grant third-party applications the data access right to
their private resources stored on the service provider. Driven by
the broad adoption of OAuth and the boom of mobile apps, many
prestigious Identity Providers (IdPs), e.g., Facebook and Sina Weibo,
have recently tailored OAuth to support SSO for third-party mobile
apps, which act as Relying Party (RP) under the context of OAuth.
The IdPs also provide RPs SDKs to integrate their SSO services and
documents to follow. Therefore, a mobile RP app, e.g., Ctrip, can
authenticate a user based on his/ her profile from the IdP, e.g., Sina
Weibo, without requiring other identity credentials, e.g., password.
It is worth to note that OAuth was initially designed to provide
secure authorization service for web applications. The protocol
is actually re-purposed for authentication when used for SSO in
mobile platforms. However, few specifications can explicitly guide
developers to authenticate users across platforms. Considering
the complexity of multi-party authentication and authorization in
OAuth, average developers are prone to misinterpret the protocol
and do not know how to properly deploy the mobile SSO services.
As a result, various vulnerabilities, e.g., Profile Vulnerability [49]
and App Secret Disclosure [11, 47], have been discovered by the
literature in recent years. Although the SSO security testing has
received increasing attention [47, 50, 53], all the existing studies
either work on web applications or rely on the manual or semi-
automatic discovery of known and specific vulnerabilities.
Nevertheless, it is not trivial to develop the security testing tool
for mobile SSO due to the following three challenges.
• Challenge 1: Difficult to Manipulate App State
The mobile apps are stateful, which may involve some client-
side logic, e.g., encoding the user credential, so it is hard to
manipulate the expected app state for the testing.
• Challenge 2: Heterogeneous SSO Customizations
Given the platform difference, both IdPs and RPs tend to
customize the SSO service and the tool needs to cater to the
app-specific implementations adaptively.
• Challenge 3: Unexpected App Behaviors
The mobile app may perform unexpectedly, e.g., loading
dynamic pop-ups, during execution. Thus, detecting the ab-
normal state and recovering the app from it are difficult.
To tackle the challenges, we design a model-based blackbox se-
curity testing framework and further implement it into MoSSOT
(already open sourced at [34]). Though we may manually extract
the SSO-related logic from the app via reverse-engineering to ma-
nipulate the app state, it is not scalable to perform the analysis on
1For the rest of the paper, we use OAuth to denote OAuth 2.0 and other OAuth 2.0-based
protocols, e.g., OpenID Connect (OIDC), if not specified otherwise.
Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand269Figure 1: Implicit flow of OAuth 2.0 for mobile platforms
each app under the blackbox setting. As a workaround, the tool per-
forms an SSO in each test such that the app will reach the expected
state halfway. Thus, we develop a module to automatically simulate
related UI operations. Then, the tool can complete normal SSOs
and learn the customizations from the resultant network traffic to
generate meaningful test cases. Finally, we build a robust testing
architecture with the capability of real-time app state tracking and
exception recovery. We summarize our contributions as follows:
• We propose a blackbox security testing framework for the
• We design and implement the proposed framework into an
• Using MoSSOT, we conduct security assessments for over
500 top-ranked RP apps. Our tool has identified a previously-
unknown vulnerability, in addition to four known ones, as
well as a new variant.
SSO implementations in Android apps.
automatic testing tool, MoSSOT.
The rest of the paper is organized as follows. Section 2 intro-
duces the adapted OAuth protocol flows for mobile apps. Section 3
describes the system architecture of MoSSOT and more design de-
tails are given in Section 4. Section 5 summarizes the testing result
as well as the detected vulnerabilities. Section 6 discusses some
limitations of MoSSOT and presents potential solutions. We review
related work in Section 7 and conclude the paper in Section 8.
2 BACKGROUND
The OAuth framework consists of three parties: IdP, RP, and User
(User-Agent). Under a mobile environment, IdP and RP map to the
backend servers of the IdP (IdP server) and the third-party mobile
app (RP server) respectively. Meanwhile, the User-Agent switches
to the mobile apps of the IdP (IdP app) and RP (RP app). For ease of
presentation, we use the notations in the parentheses to denote the
four parties in the rest of the paper.
The target of OAuth, when used for SSO in mobile apps, is for
the IdP server to issue a credential, e.g., access token (AT) for OAuth
2.0, to the RP server. Then, the RP server can use the credential
to extract user profiles from the IdP server for authentication and
finally logs the user in. Among the four types of authorization flows
defined in OAuth 2.0 [21], implicit flow and authorization code flow
are adopted by the mobile platform. Within the studied IdPs, Sina
Weibo adopts the implicit flow, while WeChat utilizes the latter.
OpenID Connect [37], on the other hand, builds an identity layer
on the top of OAuth for more efficient authentication, as OAuth
was originally designed for authorization. Facebook adopts OpenID
Connect in their SSO service. We introduce call flows of the two
authorization flows within OAuth and OpenID Connect here.
Figure 2: One state machine example for Sina Weibo
• The path in black represents the normal SSO process in Fig. 1.
• The colored dashed part stands for IdP/ RP customizations.
2.1 The Implicit Flow of OAuth 2.0
Since OAuth was not originally designed for mobile apps, neither
the RFC nor the IdPs provide a complete call-graph diagram to
mobile RP developers. After revising the specifications [21, 40], one
practical realization of the implicit flow is shown in Fig. 1.
In the implicit flow, the access token (AT in Fig. 1) goes through
the mobile device (Step 4 to 6). Then, the access token is consumed
by the RP server to extract user profiles from the IdP server in Step
7, so it must be protected by Transport Layer Secure (TLS). Besides,
the RP server should authenticate the user based on the user profile
information returned in Step 8 after verifying the access token.
2.2 The Authorization Code Flow of OAuth 2.0
The authorization code flow of OAuth 2.0 (Fig. 7 in Appendix. A.1)
is actually an augmented implicit flow. Compared to the implicit
flow (in Fig. 1), the IdP server responds an intermediate token, i.e.,
code, instead to the IdP app. After receiving the code, the RP server
needs to exchange it for an access token (Step 6 to 7 in Fig. 7).
There are two important properties associated with the autho-
rization code flow: (1) the code alone is useless because the IdP
server needs to first verify the appended app_secret (Step 6 in Fig. 7),
a pre-shared secret as the identity proof of RP to IdP, before issuing
the access token. (2) the code must be short-lived and single-use.
Due to the properties, the authorization code flow is more secure
than the implicit flow at the cost of one more round-trip between
servers. Besides, RP needs to maintain the app_secret on its server.
2.3 The OpenID Connect Protocol
The OAuth 2.0 suffers high-latency when adapted for SSO, e.g. Step
6 to 9 in Fig. 7. To overcome the limitation, some IdPs, e.g., Facebook,
have adopted OpenID Connect [37] (OIDC) for their SSO services.
OIDC builds an identity layer upon the OAuth 2.0. OIDC supports
three types of authentication flow, but only implicit flow is utilized
in mobile platforms, so we only concentrate on it in the paper.
As depicted in Fig. 8, the major extension that OIDC makes to
OAuth is a newly-introduced token called id token dedicated for
authentication. The id token is in the form of JSON Web Token [26]
and digitally signed by the IdP server. In particular, it contains
1) authorizationrequest9) Resp4: user identityRP servermobile deviceIdP server6) Req4: RP authentication request             (with AT & user info)5) AT & user info7) Req5: API request for user profile (with AT)8) IdP server responds Req5(with user profile information)IdP server responds Req3(with AT & user info)IdP appRP app2) Req1: IdP authenticates its app4) Req3:User authorizes RP3) Req2:IdP app gets RP infoReq4’Req3Req2Req1S3S0(init)S1S2S4Req5Resp4Req4S7Req7’: RevokeAuthorization Req2’Resp4’S5(b)Req5’Req6: User logs out RP appSecond RoundReq6’RP customizationsinvisible state/actionIdP customizationsUnobservable states related toRP server & IdP server interactions            Error (back to S0)ErrorError ErrorErrorS6(a)Illegal log into RP app as the victim=>Vulnerability!!!S6(b)Resp4’S5(a)Session 4A: Mobile SecurityAsiaCCS ’19, July 9–12, 2019, Auckland, New Zealand270a user identifier (1234 in Fig. 8) and can be extracted by the RP
server. Given that the signature cannot be tampered or forged by
the attacker, the RP server can identify the user directly based on
the identifier without the extra communication with the IdP server.
2.4 The Customized Implementations by IdPs
The diagrams in the section only describe the basic scenario, while
IdPs tend to add the following customizations to their SSO service.
Adoption of WebView. When the IdP app is not installed, its
role will be replaced by an embedded web browser in the RP app.
Authorization Revocation. Although how to revoke the au-
thorization is not defined in the protocol specifications, some IdPs,
e.g., Facebook, provide an app management page on which the user
can review and revoke all the authorized RPs.
Automatic Authorization. When a user has authorized an RP
app before, the IdP may skip the user-consent for authorization, e.g.,
Step 3 in Fig. 1. Thus, the login process involves no user interactions.
2.5 Threat Model
In our threat model, the target of an attacker is to break the authen-
tication of a mobile app, i.e., logging into an RP app illegally with
the identity not belonging to himself. We assume the mobile de-
vice is not compromised, the IdP is benign and the communication
between the IdP server and RP server is well-protected.
In particular, we consider two types of attackers, namely (1)
a network attacker and (2) a malicious RP attacker. A network
attacker can intercept, replay or tamper the unencrypted network
traffic through the victim’s device, while a malicious RP attacker
may act as a benign RP to steal the credentials of the victim.
The attacker is also able to log into benign RPs as normal users
and analyze or modify the network traffic of his own. Besides, the
attacker may decompile the IdP/ RP app.
3 SYSTEM OVERVIEW
In the section, we introduce the system architecture of MoSSOT,
followed by the detailed workflow.
3.1 Overall System Architecture
To traverse every possible path in the call flow of OAuth (e.g., Fig. 1),
we build our tool on the top of PyModel [23], an open-source model-
based testing (MBT) framework. PyModel takes a state-machine-
based system model as input and automatically generates test cases,
which can formally enumerate all the possible paths in the given
model and thus guarantee test coverage to some extent.
Fig. 3 presents the system architecture of MoSSOT. The tool is
composed of five modules: UI Explorer, Test Engine, Test Learner,
System Model, and Test Oracle. The framework tackles the chal-
lenges discussed in Section 1 and can be divided into three portions.
• UI Explorer (Section 4.1), is responsible for solving Challenge
1. The module automatically explores the UI widgets within
the mobile apps that need triggering to reach the desired
destination, e.g., login page. Then, Test Engine (Section 4.3.1)
can automatically perform SSOs and drive the app to the
expected state for the actual testing.
• Test Learner and System Model (Section 4.2) cope with Chal-
lenge 2. We first construct an initial model manually based on
protocol specification [21, 37] and IdP documentation (e.g.,
[14]), which caters to the IdP customizations (mentioned in
Section 2.4). Then, Test Learner analyzes the network traffic
from normal SSOs to learn the app-specific implementations
by RPs, which complement the initial model.
• Test Engine and Test Oracle (Section 4.3) tackle Challenge 3.