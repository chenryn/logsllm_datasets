# MoSSOT: An Automated Blackbox Tester for Single Sign-On Vulnerabilities in Mobile Applications

## Authors
- Shangcheng Shi
- Xianbo Wang
- Wing Cheong Lau

### Affiliation
The Chinese University of Hong Kong

### Contact
- PI: EMAIL
- PI: EMAIL
- PI: EMAIL

## Abstract
Modern mobile applications increasingly integrate Single Sign-On (SSO) into their account management mechanisms. However, the multi-party protocol, OAuth 2.0, was originally designed for web-based authorization, leading to complexities and numerous insecure SSO implementations. While security testing for real-world SSO deployments has gained attention, existing methods focus on websites or rely on manual discovery of known vulnerabilities. In this paper, we present MoSSOT (Mobile SSO Tester), an automated blackbox security testing tool for Android applications using SSO services from major providers. MoSSOT detects vulnerabilities by fuzzing related network messages. We tested over 500 first-tier third-party Android applications from US and Chinese app markets, finding that approximately 72% of them incorrectly implement SSO and are thus vulnerable. Additionally, our tool identified a previously unknown vulnerability and a new variant, along with four known ones. These vulnerabilities allow attackers to log into mobile applications as victims or gain unauthorized access to protected resources. MoSSOT is available as an open-source project.

## CCS Concepts
- Security and privacy → Software and application security

## Keywords
- OAuth 2.0
- Single Sign-On
- Security Testing
- Mobile App Authentication

## ACM Reference Format
Shangcheng Shi, Xianbo Wang, and Wing Cheong Lau. 2019. MoSSOT: An Automated Blackbox Tester for Single Sign-On Vulnerabilities in Mobile Applications. In ACM Asia Conference on Computer and Communications Security (AsiaCCS ’19), July 9–12, 2019, Auckland, New Zealand. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3321705.3329801

## Introduction
OAuth 2.0, the open standard for authorization, allows end-users to grant third-party applications access to their private resources stored on service providers. Many prominent Identity Providers (IdPs), such as Facebook and Sina Weibo, have tailored OAuth to support SSO for third-party mobile apps, which act as Relying Parties (RPs). These IdPs provide SDKs and documentation for RPs to integrate SSO services. For example, a mobile RP app like Ctrip can authenticate a user based on their profile from an IdP like Sina Weibo without requiring additional credentials.

However, OAuth was initially designed for web applications, and its adaptation for mobile SSO introduces complexities. Developers often misinterpret the protocol, leading to various vulnerabilities. Although SSO security testing has received increasing attention, existing studies either focus on web applications or rely on manual or semi-automatic discovery of known vulnerabilities. Developing a security testing tool for mobile SSO is challenging due to:

- **Challenge 1: Difficult to Manipulate App State** - Mobile apps are stateful, involving client-side logic, making it hard to manipulate the expected app state for testing.
- **Challenge 2: Heterogeneous SSO Customizations** - Both IdPs and RPs customize SSO services, requiring the tool to adapt to app-specific implementations.
- **Challenge 3: Unexpected App Behaviors** - Mobile apps may exhibit unexpected behaviors, such as dynamic pop-ups, making it difficult to detect and recover from abnormal states.

To address these challenges, we designed a model-based blackbox security testing framework and implemented it in MoSSOT. Our contributions include:

- Proposing a blackbox security testing framework for SSO implementations in Android apps.
- Designing and implementing the proposed framework into an automatic testing tool, MoSSOT.
- Conducting security assessments for over 500 top-ranked RP apps, identifying a previously unknown vulnerability, four known ones, and a new variant.

## Background
### OAuth Framework
The OAuth framework involves three parties: IdP, RP, and User (User-Agent). In a mobile environment, the IdP and RP map to the backend servers of the IdP (IdP server) and the third-party mobile app (RP server), respectively. The User-Agent switches to the mobile apps of the IdP (IdP app) and RP (RP app).

When used for SSO in mobile apps, OAuth's goal is for the IdP server to issue a credential, such as an access token (AT), to the RP server. The RP server then uses the credential to extract user profiles from the IdP server for authentication and logs the user in. Two authorization flows defined in OAuth 2.0 are commonly used in mobile platforms: implicit flow and authorization code flow. Sina Weibo uses the implicit flow, while WeChat uses the authorization code flow. OpenID Connect (OIDC) builds an identity layer on top of OAuth for more efficient authentication. Facebook uses OIDC in their SSO service.

### Implicit Flow of OAuth 2.0
In the implicit flow, the access token goes through the mobile device and is consumed by the RP server to extract user profiles from the IdP server. The access token must be protected by Transport Layer Security (TLS), and the RP server should authenticate the user based on the returned user profile information.

### Authorization Code Flow of OAuth 2.0
The authorization code flow is an augmented implicit flow where the IdP server responds with an intermediate token, i.e., code, instead of the access token. The RP server exchanges the code for an access token. This flow is more secure because the code alone is useless and must be short-lived and single-use.

### OpenID Connect Protocol
OpenID Connect (OIDC) builds an identity layer on top of OAuth 2.0, introducing an id token for authentication. The id token is a JSON Web Token (JWT) signed by the IdP server, containing a user identifier. The RP server can identify the user directly based on this identifier without extra communication with the IdP server.

### Customized Implementations by IdPs
IdPs often add customizations to their SSO services, such as:
- **Adoption of WebView**: When the IdP app is not installed, an embedded web browser in the RP app replaces its role.
- **Authorization Revocation**: Some IdPs provide an app management page for users to review and revoke authorized RPs.
- **Automatic Authorization**: If a user has previously authorized an RP app, the IdP may skip the user-consent step, resulting in a login process with no user interaction.

### Threat Model
Our threat model assumes an attacker aims to break the authentication of a mobile app, logging into an RP app illegally with an identity not belonging to them. We assume the mobile device is not compromised, the IdP is benign, and the communication between the IdP server and RP server is well-protected. We consider two types of attackers:
- **Network Attacker**: Can intercept, replay, or tamper with unencrypted network traffic.
- **Malicious RP Attacker**: Acts as a benign RP to steal the victim's credentials.

## System Overview
### Overall System Architecture
MoSSOT is built on top of PyModel, an open-source model-based testing (MBT) framework. PyModel takes a state-machine-based system model as input and generates test cases to ensure test coverage.

The system architecture of MoSSOT consists of five modules:
- **UI Explorer**: Solves Challenge 1 by automatically exploring UI widgets within mobile apps to reach the desired destination, e.g., the login page. The Test Engine then performs SSOs and drives the app to the expected state for testing.
- **Test Learner and System Model**: Address Challenge 2 by constructing an initial model based on protocol specifications and IdP documentation. The Test Learner analyzes network traffic from normal SSOs to learn app-specific implementations by RPs, complementing the initial model.
- **Test Engine and Test Oracle**: Tackle Challenge 3 by providing robust testing architecture with real-time app state tracking and exception recovery.

## Conclusion
MoSSOT is an effective tool for detecting SSO vulnerabilities in mobile applications. By addressing the challenges of manipulating app state, handling heterogeneous SSO customizations, and managing unexpected app behaviors, MoSSOT provides a comprehensive solution for securing mobile SSO implementations.