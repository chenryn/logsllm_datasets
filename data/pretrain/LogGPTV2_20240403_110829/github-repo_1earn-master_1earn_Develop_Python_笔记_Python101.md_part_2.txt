>>> bs = '01101000 01100101 01101100 01101100 01101111 00100000 01110111 01101111 01110010 01101100 01100100'
>>> s = ''.join([chr(int(x, 2)) for x in bs.split(' ')])
'hello world'
# 二进制字符串 -> 十六进制字符串
>>> bs = '01101000 01100101 01101100 01101100 01101111 00100000 01110111 01101111 01110010 01101100 01100100'
>>> hs = ''.join(['%02x' % int(x, 2) for x in bs.split(' ')])
'68656c6c6f20776f726c64'
# Python2
>>> bs = '0110100001100101011011000110110001101111001000000111011101101111011100100110110001100100'
>>> hs = ''.join(['%02x' % int(bs[i*8:i*8+8], 2) for i in range(len(bs)/8)])
'68656c6c6f20776f726c64'
# Python3
>>> bs = '0110100001100101011011000110110001101111001000000111011101101111011100100110110001100100'
>>> hs = ''.join(['%02x' % int(bs[i*8:i*8+8], 2) for i in range(math.floor(len(bs)/8))])
'68656c6c6f20776f726c64'
# 二进制字符串 -> 十进制字符串
>>> bs = '01101000 01100101 01101100 01101100 01101111 00100000 01110111 01101111 01110010 01101100 01100100'
>>> ds = ' '.join(['%d' % int(x, 2) for x in bs.split(' ')])
'104 101 108 108 111 32 119 111 114 108 100'
# Python2
>>> bs = '0110100001100101011011000110110001101111001000000111011101101111011100100110110001100100'
>>> hs = ' '.join(['%d' % int(bs[i*8:i*8+8], 2) for i in range(len(bs)/8)])
'104 101 108 108 111 32 119 111 114 108 100'
# Python3
>>> bs = '0110100001100101011011000110110001101111001000000111011101101111011100100110110001100100'
>>> hs = ' '.join(['%d' % int(bs[i*8:i*8+8], 2) for i in range(math.floor(len(bs)/8))])
'104 101 108 108 111 32 119 111 114 108 100'
```
---
## 字符串处理
**每个字符减 1**
```py
string=bytearray(b"gmbh|ZPV`GJOE`JU`IBIB~")
for i in range(len(string)):
    string[i]-=1;
print(string)
```
**数组中每个字符与自身位数异或**
```py
data=[0x66,0x6D,0x63,0x64,0x7F,0x5C,0x49,0x52,0x57,0x4F,0x43,0x45,0x48,0x52,0x47,0x5B,0x4F,0x59,0x53,0x5B,0x55,0x68]
for i in range(len(data)):
    data[i]^=i
print(bytearray(data))
```
**十六进制不带 0x 补零 (ASCII 字节类型)**
```py
arr = [0x4B, 0x43, 0x09, 0xA1, 0x01, 0x02, 0xAB, 0x4A, 0x43]
def print_bytes_hex(data):
    lin = ['%02X' % i for i in data]
    print(" ".join(lin))
print_bytes_hex(arr)
```
**十六进制不带 0x 补零 (字符串类型)**
```py
arr = 'Work'
def print_string_hex(data):
    lin = ['%02X' % ord(i) for i in data]
    print(" ".join(lin))
print_string_hex(arr)
```
**字符串反转**
```py
str='test123'
print(str[::-1])
```
---
## 声音
```py
print("\a")
```
**windows**
```py
import winsound
duration = 1000     # millisecond
freq = 440          # Hz
winsound.Beep(freq, duration)
# FREQ是频率(以赫兹为单位)，而持续时间是毫秒(毫秒)。
```
**linux**
```bash
apt install speech-dispatcher
```
```py
import os
os.system('spd-say "your program has finished"')
```
```bash
apt install sox
```
```py
import os
duration = 1        # second
freq = 440          # Hz
os.system('play --no-show-progress --null --channels 1 synth %s sine %f' % (duration, freq))
```
---
## 执行系统命令
**os**
```py
import os
os.system("whoami")
```
```py
import os
nowtime = os.popen('whoami')
print(nowtime.read())
```
**commands**
```py
import commands
status, output = commands.getstatusoutput('date')
print(output)
```
---
## 延时
**sleep()**
```py
time.sleep(1)   # 延时1秒
```
---
## 时间戳
**time()**
> time() 返回当前时间的时间戳（1970纪元后经过的浮点秒数）。
```py
print(time.time())
```
---
## 输出
**python字符串去掉前缀b**
需要去掉字符串的前缀b,只需要进行utf-8的转换即可，即
```py
data = data.decode(“utf-8”).
```
---
## 安全脚本
**写 python 目录遍历 POC 时遇到的问题**
- https://mazinahmed.net/blog/testing-for-path-traversal-with-python/
---
## Docker Engine SDK
```bash
pip3 install docker
```
**运行一个容器，并执行容器中的一个命令**
```py
import docker
client = docker.from_env()
r = client.containers.run("alpine", ["echo", "hello", "world"])
print(str(r, encoding='utf-8'))
```
**列出所有镜像**
```py
import docker
client = docker.from_env()
for image in client.images.list():
  print(image.id)
```
---
## mysql
```bash
pip3 install PyMySQL
```
**连接 Mysql 的 TESTDB 数据库**
```py
#!/usr/bin/python3
import pymysql
# 打开数据库连接
db = pymysql.connect(host='localhost',
                     user='testuser',
                     password='test123',
                     database='TESTDB')
# 使用 cursor() 方法创建一个游标对象 cursor
cursor = db.cursor()
# 使用 execute()  方法执行 SQL 查询
cursor.execute("SELECT VERSION()")
# 使用 fetchone() 方法获取单条数据.
data = cursor.fetchone()
print ("Database version : %s " % data)
# 关闭数据库连接
db.close()
```
**创建数据库表**
```py
#!/usr/bin/python3
import pymysql
# 打开数据库连接
db = pymysql.connect(host='localhost',
                     user='testuser',
                     password='test123',
                     database='TESTDB')
# 使用 cursor() 方法创建一个游标对象 cursor
cursor = db.cursor()
# 使用 execute() 方法执行 SQL，如果表存在则删除
cursor.execute("DROP TABLE IF EXISTS EMPLOYEE")
# 使用预处理语句创建表
sql = """CREATE TABLE EMPLOYEE (
         FIRST_NAME  CHAR(20) NOT NULL,
         LAST_NAME  CHAR(20),
         AGE INT,
         SEX CHAR(1),
         INCOME FLOAT )"""
cursor.execute(sql)
# 关闭数据库连接
db.close()
```
---
## oss2
- https://help.aliyun.com/document_detail/32027.html
**创建examplebucket存储空间**
```py
# -*- coding: utf-8 -*-
import oss2
# 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。
auth = oss2.Auth('', '')
# Endpoint以杭州为例，其它Region请按实际情况填写。
bucket = oss2.Bucket(auth, 'http://oss-cn-hangzhou.aliyuncs.com', '')
# 设置存储空间为私有读写权限。
bucket.create_bucket(oss2.models.BUCKET_ACL_PRIVATE)
```
**上传文件**
```py
# -*- coding: utf-8 -*-
import oss2
# 阿里云账号AccessKey拥有所有API的访问权限，风险很高。强烈建议您创建并使用RAM用户进行API访问或日常运维，请登录RAM控制台创建RAM用户。
auth = oss2.Auth('', '')
# Endpoint以杭州为例，其它Region请按实际情况填写。
bucket = oss2.Bucket(auth, 'http://oss-cn-hangzhou.aliyuncs.com', '')
# 上传文件到OSS。
# 由包含文件后缀，不包含Bucket名称组成的Object完整路径，例如abc/efg/123.jpg。
# 由本地文件路径加文件名包括后缀组成，例如/users/local/myfile.txt。
bucket.put_object_from_file('', '')
```