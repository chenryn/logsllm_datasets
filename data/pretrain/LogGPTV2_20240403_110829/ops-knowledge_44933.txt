User: 请解答这个和日志有关的问题Searching Encrypted Data from Database Suppose I have a table with email is stored in one table.
I have encrypted it using AES-256 and stored the result in DB Column.
For let's say I have one input email and I want to search whether this email exists in DB or not:
Now I see two approaches to it

Encrypt the input and search for the encrypted value.
Use the concept of Blind Index(using HMAC SHA-256) and store it and then for input also create this HMAC and search it.

Which approach is better and why?
For Encrytion we are using Inhouse library which does AES-256 using secret Key/ Salt. Secret key is fetched from AWS KMS(Basically decrypt from AWS KMS)

Assistant: Perhaps the common two-column approach used for login scenarios may be applicable here.
This is often where users need log in with their email (either because they forgot their username or the site doesn't use them), but their email address is considered confidential data that should not be stored in plaintext.
In this scenario, the database has two columns:

One column containing a peppered hash of the email addresses (such as SHA-256 (email + pepper), where &quot;pepper&quot; is just some secret bytes stored on the server or HSM. The term is taken from like how a &quot;pepper&quot; is used to protect passwords)
One column containing the encrypted email addresses (often encrypted by a standard DEK (data encryption key) via AES-256 with a random-IV-per-entry)

The first column is used to quickly look up user info for login purposes while the second column can be used to retrieve the actual email address whenever needed (e.g., for correspondence purposes).