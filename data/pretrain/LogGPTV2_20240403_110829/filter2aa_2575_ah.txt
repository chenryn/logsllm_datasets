Note:>while>http-get>uses>GET>by>default>and>http-post>uses>POST>by>default,>you’re>not>
stuck>with>these>options.>Use>the>verb>option>to>change>these>defaults.>There’s>a>lot>of>
flexibility>here.>
This table summarizes these keywords and the data they send: 
Request 
Component 
Block 
Data 
http-get 
client 
metadata 
Session metadata 
http-get 
server 
output 
Beacon’s tasks 
http-post 
client 
id 
Session ID 
http-post 
client 
output 
Beacon’s responses 
http-post 
server 
output 
Empty 
http-stager 
server 
output 
Encoded payload stage 
www.cobaltstrike.com/
/
75/
11.6 HTTP Server Configuration 
The http-config block has influence over all HTTP responses served by Cobalt Strike’s web 
server. Here, you may specify additional HTTP headers and the HTTP header order. 
http-config { 
set headers "Date, Server, Content-Length, Keep-Alive,  
Connection, Content-Type"; 
header "Server" "Apache"; 
header "Keep-Alive" "timeout=5, max=100"; 
header "Connection" "Keep-Alive”; 
set trust_x_forwarded_for "true"; 
} 
The header keyword adds a header value to each of Cobalt Strike’s HTTP responses. If the 
header value is already defined in a response, this value is ignored.  
The set headers option specifies the order these HTTP headers are delivered in an HTTP 
response. Any headers not in this list are added to the end. 
The set trust_x_forwarded_for option decides if Cobalt Strike uses the X-Forwarded-For 
HTTP header to determine the remote address of a request. Use this option if your Cobalt Strike 
server is behind an HTTP redirector. 
11.7 Self-signed SSL Certificates with SSL Beacon 
The HTTPS Beacon uses the HTTP Beacon’s indicators in its communication. Malleable C2 
profiles may also specify parameters for the Beacon C2 server’s self-signed SSL certificate. This 
is useful if you want to replicate an actor with unique indicators in their SSL certificate: 
https-certificate { 
set CN       "bobsmalware.com"; 
set O        "Bob’s Malware"; 
} 
The certificate parameters under your profile’s control are: 
Option 
Example 
Description 
C 
US 
Country 
CN 
beacon.cobaltstrike.com 
Common Name; Your callback domain 
L 
Washington 
Locality 
O 
Strategic Cyber LLC 
Organization Name 
OU 
Certificate Department 
Organizational Unit Name 
ST 
DC 
State or Province 
validity 
365 
Number of days certificate is valid for 
www.cobaltstrike.com/
/
76/
11.8 Valid SSL Certificates with SSL Beacon 
You have the option to use a Valid SSL certificate with Beacon. Use a Malleable C2 profile to 
specify a Java Keystore file and a password for the keystore. This keystore must contain your 
certificate’s private key, the root certificate, any intermediate certificates, and the domain 
certificate provided by your SSL certificate vendor. Cobalt Strike expects to find the Java 
Keystore file in the same folder as your Malleable C2 profile. 
https-certificate { 
set keystore "domain.store"; 
set password "mypassword"; 
} 
The parameters to use a valid SSL certificate are: 
Option 
Example 
Description 
keystore 
domain.store 
Java Keystore file with certificate information 
password 
mypassword 
The password to your Java Keystore 
Here are the steps to create a Valid SSL certificate for use with Cobalt Strike’s Beacon: 
1. Use the keytool program to create a Java Keystore file. This program will ask “What is your 
first and last name?” Make sure you answer with the fully qualified domain name to your Beacon 
server. Also, make sure you take note of the keystore password. You will need it later. 
$ keytool -genkey -keyalg RSA -keysize 2048 -keystore domain.store 
2. Use keytool to generate a Certificate Signing Request (CSR). You will submit this file to your 
SSL certificate vendor. They will verify that you are who you are and issue a certificate. Some 
vendors are easier and cheaper to deal with than others. 
$ keytool -certreq -keyalg RSA -file domain.csr -keystore domain.store 
3. Import the Root and any Intermediate Certificates that your SSL vendor provides.  
$ keytool -import -trustcacerts -alias FILE -file FILE.crt -keystore 
domain.store 
4. Finally, you must install your Domain Certificate.  
$ keytool -import -trustcacerts -alias mykey -file domain.crt -keystore 
domain.store 
And, that’s it. You now have a Java Keystore file that’s ready to use with Cobalt Strike’s 
Beacon. 
www.cobaltstrike.com/
/
77/
11.9 Profile Variants 
Malleable C2 profile files, by default, contain one profile. It’s possible to pack variations of the 
current profile by specifying variant blocks for http-get, http-post, http-stager, and https-
certificate. 
A variant block is specified as [block name] “variant name” { … }. Here’s a variant http-get 
block named “My Variant”: 
http-get "My Variant" { 
client { 
parameter "bar" "blah"; 
A variant block creates a copy of the current profile with the specified variant blocks replacing 
the default blocks in the profile itself. Each unique variant name creates a new variant profile. 
You may populate a profile with as many variant names as you like. 
Variants are selectable when configuring an HTTP or HTTPS Beacon listener. Variants allow 
each HTTP or HTTPS Beacon listener tied to a single team server to have network IOCs that 
differ from eachother. 
11.10 Code Signing Certificate 
Attacks -> Packages -> Windows Executable and Windows Executable (S) give you the 
option to sign an executable or DLL file. To use this option, you must specify a Java Keystore 
file with your code signing certificate and private key. Cobalt Strike expects to find the Java 
Keystore file in the same folder as your Malleable C2 profile. 
code-signer { 
set keystore "keystore.jks"; 
set password "password"; 
set alias    "server"; 
} 
The code signing certificate settings are: 
Option 
Example 
Description 
alias 
server 
The keystore’s alias for this certificate 
digest_algorithm SHA256 
The digest algorithm 
keystore 
keystore.jks 
Java Keystore file with certificate information 
password 
mypassword 
The password to your Java Keystore 
timestamp 
false 
Timestamp the file using a third-party service  
timestamp_url 
http://timestamp.digicert.com 
URL of the timestamp service 
www.cobaltstrike.com/
/
78/
11.11 Which is more dangerous, Malleable C2 or a swimming pool? 
The answer? Both. Malleable C2 gives you a new level of control over your network and host 
indicators. With this power also comes responsibility. Malleable C2 is an opportunity to make a 
lot of mistakes too. Here are a few things to think about when you customize your profiles: 
1. Each Cobalt Strike instance uses one profile at a time. If you change a profile or load a new 
profile, previously deployed Beacons cannot communicate with you. 
2. Always stay aware of the state of your data and what a protocol will allow when you develop a 
data transform. For example, if you base64 encode metadata and store it in a URI parameter—
it’s not going to work. Why? Some base64 characters (+, =, and /) have special meaning in a 
URL. The c2lint tool and Profile Compiler will not detect these types of problems.  
3. Always test your profiles, even after small changes. If Beacon can’t communicate with you, 
it’s probably an issue with your profile. Edit it and try again. 
4. Trust the c2lint tool. This tool goes above and beyond the profile compiler. The checks are 
grounded in how this technology is implemented. If a c2lint check fails, it means there is a real 
problem with your profile. 
www.cobaltstrike.com/
/
79/
12. Malleable PE, Process Injection, and Post Exploitation 
12.1 Overview 
Malleable C2 profiles are more than communication indicators. Malleable C2 profiles also 
control Beacon’s in-memory characteristics, determine how Beacon does process injection, and 
influence Cobalt Strike’s post-exploitation jobs too. This chapter documents these extensions to 
the Malleable C2 language. 
12.2 PE and Memory Indicators 
The stage block in Malleable C2 profiles controls how Beacon is loaded into memory and edit 
the content of the Beacon DLL.  
stage { 
set userwx "false";  
set compile_time "14 Jul 2009 8:14:00"; 
set image_size_x86 "512000"; 
set image_size_x64 "512000"; 
set obfuscate "true"; 
transform-x86 { 
prepend "\x90\x90"; 
strrep "ReflectiveLoader" "DoLegitStuff"; 
} 
transform-x64 { 
# transform the x64 rDLL stage 
} 
stringw "I am not Beacon"; 
} 
The transform-x86 and transform-x64 blocks pad and transform Beacon’s Reflective DLL 
stage. These blocks support three commands: prepend, append, and strrep. 
The prepend command inserts a string before Beacon’s Reflective DLL. The append command 
adds a string after the Beacon Reflective DLL. Make sure that prepended data is valid code for 
the stage’s architecture (x86, x64). The c2lint program does not have a check for this. The strrep 
command replaces a string within Beacon’s Reflective DLL.  
The stage block accepts commands that add strings to the .rdata section of the Beacon DLL. The 
string command adds a zero-terminated string. The stringw command adds a wide (UTF-16LE 
encoded) string. The data command adds your string as-is. 
www.cobaltstrike.com/
/
80/
The stage block accepts several options that control the Beacon DLL content and provide hints to 
change the behavior of Beacon’s Reflective Loader: 
Option 
Example 
Description 
checksum 
0 
The CheckSum value in Beacon’s PE header 
cleanup 
false 
Ask Beacon to attempt to free memory 
associated with the Reflective DLL package that 
initialized it. 
compile_time 
14 July 2009 8:14:00 
The build time in Beacon’s PE header 
entry_point 
92145 
The EntryPoint value in Beacon’s PE header 
image_size_x64 512000 
SizeOfImage value in x64 Beacon’s PE header  
image_size_x86 512000 
SizeOfImage value in x86 Beacon’s PE header 
module_x86 
xpsservices.dll 
Ask the x86 ReflectiveLoader to load the 
specified library and overwrite its space instead 
of allocating memory with VirtualAlloc. 
module_x64 
xpsservices.dll 
Same as module_x86; affects x64 loader 
name 
beacon.x64.dll 
The Exported name of the Beacon DLL 
obfuscate 
false 
Obfuscate the Reflective DLL’s import table, 
overwrite unused header content, and ask 
ReflectiveLoader to copy Beacon to new 
memory without its DLL headers. 
rich_header 
Meta-information inserted by the compiler 
sleep_mask 
false 
Obfuscate Beacon, in-memory, prior to sleeping 
smartinject 
false 
Use embedded function pointer hints to 
bootstrap Beacon agent without walking 
kernel32 EAT 
stomppe 
true 
Ask ReflectiveLoader to stomp MZ, PE, and 
e_lfanew values after it loads Beacon payload 
userwx 
false 
Ask ReflectiveLoader to use or avoid RWX 
permissions for Beacon DLL in memory 
Cloning PE Headers 
Cobalt Strike’s Linux package includes a tool, peclone, to extract headers from a DLL and 
present them as a ready-to-use stage block: 
./peclone [/path/to/sample.dll] 
In-memory Evasion and Obfuscation 
Use the stage block’s prepend command to defeat analysis that scans the first few bytes of a 
memory segment to look for signs of an injected DLL. If tool-specific strings are used to detect 
your agents, change them with the strrep command.  
If strrep isn’t enough, set sleep_mask to true. This directs Beacon to obfuscate itself in-memory 
before it goes to sleep. After sleeping, Beacon will de-obfuscate itself to request and process 
tasks. The SMB and TCP Beacons will obfuscate themselves while waiting for a new connection 
or waiting for data from their parent session. 
www.cobaltstrike.com/
/
81/
Decide how much you want to look like a DLL in memory. If you want to allow easy detection, 
set stomppe to false. If you would like to lightly obfuscate your Beacon DLL in memory, set 
stomppe to true. If you’d like to up the challenge, set obfuscate to true. This option will take 
many steps to obfuscate your Beacon stage and the final state of the DLL in memory. 
Set userwx to false to ask Beacon’s loader to avoid RWX permissions. Memory segments with 
these permissions will attract extra attention from analysts and security products. 
By default, Beacon’s loader allocates memory with VirtualAlloc. Module stomping is an 
alternative to this. Set module_x86 to a DLL that is about twice as large as the Beacon payload 
itself. Beacon’s x86 loader will load the specified DLL, find its location in memory, and 
overwrite it. This is a way to situate Beacon in memory that Windows associates with a file on 
disk. It’s important that the DLL you choose is not needed by the applications you intend to 
reside in. The module_x64 option is the same story, but it affects the x64 Beacon. 
If you’re worried about the Beacon stage that initializes the Beacon DLL in memory, set cleanup 
to true. This option will free the memory associated with the Beacon stage when it’s no longer 