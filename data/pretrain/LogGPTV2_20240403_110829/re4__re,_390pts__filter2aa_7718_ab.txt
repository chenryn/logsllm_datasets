  do
  {
    *(&v45 + v31) ^= 0x66u;
    ++v31;
  }
```
And does a bunch of static comparasions:
```
if ( v45 != '_' )
...
if ( v46 != '$' || v47 != '^' || v48 != 'W' || v49 != '_' || v50 != 35 || v51 != '%' || v52 != 'W' )
...
if ( v53 == 'S'
    && v54 == '$'
    && v55 == 'R'
    && v56 == '#'
    && v57 == '$'
    && v58 == '^'
    && v59 == '\''
    && v60 == 'W'
    && v61 == '%'
    && v62 == 'S'
    && v63 == '%'
    && v64 == '\''
    && v65 == 'T'
    && v66 == 'U'
    && v67 == '_'
    && v68 == 'V'
    && v69 == '\''
    && v70 == '#'
    && v71 == 'W'
    && v72 == 'R'
    && v73 == '#'
    && v74 == 'T'
    && v75 == '^'
    && v76 == '_'
    && v77 == '^'
    && v78 == 'Q'
    && v79 == '\'' )
```
From which we get, the value '9B819SC15B4EB8A1C5CA2390AE14E28987A', so from now on we have to launch the binary with that string as the third argument.
## Second function
### First check:
The string is grabbed, md5-ed using the imported functions and then compared to a static array of values:
```c++
BOOL __stdcall sub_407040(int a1)
{
  int v1; // esi
  int v3; // [esp+8h] [ebp-80h]
  int v4; // [esp+Ch] [ebp-7Ch]
  int v5; // [esp+10h] [ebp-78h]
  int v6; // [esp+14h] [ebp-74h]
  int v7; // [esp+18h] [ebp-70h]
  int v8; // [esp+1Ch] [ebp-6Ch]
  int v9; // [esp+20h] [ebp-68h]
  int v10; // [esp+24h] [ebp-64h]
  int v11; // [esp+28h] [ebp-60h]
  int v12; // [esp+2Ch] [ebp-5Ch]
  int v13; // [esp+30h] [ebp-58h]
  int v14; // [esp+34h] [ebp-54h]
  int v15; // [esp+38h] [ebp-50h]
  int v16; // [esp+3Ch] [ebp-4Ch]
  int v17; // [esp+40h] [ebp-48h]
  int v18; // [esp+44h] [ebp-44h]
  int v19; // [esp+48h] [ebp-40h]
  int v20; // [esp+4Ch] [ebp-3Ch]
  int v21; // [esp+50h] [ebp-38h]
  int v22; // [esp+54h] [ebp-34h]
  int v23; // [esp+58h] [ebp-30h]
  int v24; // [esp+5Ch] [ebp-2Ch]
  int v25; // [esp+60h] [ebp-28h]
  int v26; // [esp+64h] [ebp-24h]
  int v27; // [esp+68h] [ebp-20h]
  int v28; // [esp+6Ch] [ebp-1Ch]
  int v29; // [esp+70h] [ebp-18h]
  int v30; // [esp+74h] [ebp-14h]
  int v31; // [esp+78h] [ebp-10h]
  int v32; // [esp+7Ch] [ebp-Ch]
  int v33; // [esp+80h] [ebp-8h]
  int v34; // [esp+84h] [ebp-4h]
  v7 = '7';
  v8 = '2';
  v13 = '7';
  v15 = '2';
  v3 = '3';
  v4 = 'A';
  v5 = 'B';
  v6 = '4';
  v9 = '8';
  v10 = '4';
  v11 = 'C';
  v12 = 'F';
  v14 = 'E';
  v16 = '6';
  v17 = '0';
  v18 = '5';
  v19 = '4';
  v20 = '1';
  v21 = 'D';
  v22 = '8';
  v23 = '1';