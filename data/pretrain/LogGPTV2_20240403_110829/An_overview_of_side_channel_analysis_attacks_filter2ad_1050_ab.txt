encryption primitives to protect sensitive information being
stored on the device or when transmitting data over the
Internet. Another example of a dedicated security mechanism
is a personal identiﬁcation number (PIN) required to access a
speciﬁc service such as a banking application.
B. Side-Channel Attacks
Although the above mentioned concepts are secure (or are
typically considered as being secure) in theory, a speciﬁc
implementation of such a mechanism is not necessarily secure
in practice. Since side-channel attacks have been extensively
used to attack cryptographic implementations, let us consider
the following illustrative example. In an ideal world, an imple-
mentation of a cryptographic algorithm takes a speciﬁc input
and produces a speciﬁc (intended) output. For example, an en-
cryption algorithm takes the plaintext as well as cryptographic
key material to produce the ciphertext. However, in practice,
an implementation of an encryption algorithm usually also
“outputs” unintended information as a byproduct of the actual
computations. Such unintended information leakage might be
a different power consumption or a different execution time
due to instructions being conditionally executed depending
on the processed data (cf. Figure 2). Attacks exploiting such
unintended information leaks are denoted as side-channel
attacks and have been impressively used to bypass or break
protection mechanisms such as encryption algorithms.
Subsequently, we discuss the general notion of side-channel
attacks. We distinguish between passive side-channel attacks,
as in the example above, and active side-channel attacks.
Passive Side-Channel Attacks. The general notion of a
passive side-channel attack can be described by means of
three main components, i.e., target, side channel, and attacker.
A target represents anything of interest to possible attackers.
During the computation or operation of the target, it inﬂuences
a side channel (physical or logical properties) and thereby
emits potential sensitive information. An attacker who is
able to observe these side channels potentially learns useful
information related to the actual computations or operations
performed by the target. Therefore, an attacker models possible
effects of speciﬁc causes. Later on, careful investigations of
observed effects can then be used to learn information about
possible causes.
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
4
(1) inﬂuences
(2) is observed
Target
(e.g., crypto,
keyboard,
behavior)
Side channel
(i.e., physical or
logical properties)
Attacker
(e.g., device, chip,
wire, software)
(4) inﬂuences
(3) modiﬁes/inﬂuences
Fig. 3. General notion of passive (−→) and active ((cid:76)(cid:57)(cid:57)) side-channel attacks.
Active Side-Channel Attacks. An active attacker tampers
with the device or modiﬁes/inﬂuences the targeted device
via a side channel, e.g., via an external
interface or en-
vironmental conditions. Thereby, the attacker inﬂuences the
computation/operation performed by the device in a way that
allows to bypass speciﬁc security mechanisms directly or that
leads to malfunctioning, which in turn enables possible attacks,
e.g., indirectly via the leaking side-channel information or
directly via the (erroneous) output of the targeted device.
Figure 3 depicts the general notion of side-channel attacks.
A target emits sensitive information as it inﬂuences speciﬁc
side channels. For example, physically operating a smartphone
via the touchscreen, i.e., the touchscreen input represents the
target, causes the smartphone to undergo speciﬁc movements
and accelerations in all three dimensions. In this case, one
possible side channel
is the acceleration of the device (a
physical property), which can be observed via the embedded
accelerometer sensor and accessed by an app via the ofﬁcial
Sensor API.
The relations deﬁned via the solid arrows, i.e., target −→
side channel −→ attacker, represent passive side-channel
attacks. The relations deﬁned via the dashed arrows, i.e., target
(cid:76)(cid:57)(cid:57) side channel (cid:76)(cid:57)(cid:57) attacker, represent active side-channel
attacks where the attacker actively inﬂuences/manipulates the
target via a side channel. Thereby, the attacker either tries (i)
to enforce behavior that allows to bypass security mechanisms
directly, or (ii) to observe leaking side-channel information
or the (sometimes erroneous) output of the targeted device.
Hence, a passive side-channel attack consists of steps (1) and
(2), whereas an active side-channel attack also includes steps
(3) and (4).
Differentiation From Other Attacks.
Irrespective of
whether an attacker is passive or active, we only consider side-
channel attacks. Side-channel attacks do not exploit software
bugs or anomalies within the OS or apps that, for example,
allow to access the main communication channel directly. For
example, buffer overﬂow attacks allow to access the main
communication channel directly (i.e., the main memory) and,
thus, do not represent side-channel attacks.
Similarly, we also do not consider other attacks that learn
information that
is available from the main channel. For
example, Luzio et al. [28] exploited Wi-Fi probe-requests,
which contain the service set identiﬁer (SSID) of preferred Wi-
Fi hotspots in clear. These probe-requests allow mobile devices
to determine nearby Wi-Fi hotspots in order to preferably
connect
to already known hotspots. These attacks do not
represent side-channel attacks as the learned information is
directly available from the main channel.
Furthermore, we also do not survey covert channels where
two entities (e.g., processes) communicate over a channel that
is not explicitly provided by the platform or the operating
system. Although identiﬁed side channels can in general also
be used as a covert channel, i.e., as a means to stealthily
communicate between two processes whereby one process
inﬂuences the side channel and the other one observes it, we
do not explicitly survey covert channels such as [29] in this
paper. Nevertheless, our newly introduced classiﬁcation system
can also be used to classify covert channels.
C. Related Surveys
In this section, we discuss surveys on mobile security,
as well as side-channel attacks on smart cards, PCs, cloud
infrastructures, and smartphones.
Surveys on Mobile Security. Most surveys on mobile
security primarily focused on malware in general, and many of
these surveys only mention side-channel attacks as a side node.
Enck [30] surveyed possible protection mechanisms beyond
the standard protection mechanisms provided by Android.
These include tools that analyze permissions and action strings
(within the Android Manifest) to assess the risk of Android
apps, policy-based approaches that allow a more ﬁne-grained
protection of Android apps, as well as static and dynamic code
analysis tools to perform application analysis, which in turn
allows to detect malware.
La Polla et al. [31] surveyed threats and vulnerabilities (i.e.,
botnets, Trojans, viruses, and worms) with a focus on work
published from 2004 until 2011. Suarez-Tangil et al. [32] and
Faruki et al. [33] continued this line of research for the period
from 2010 until 2013, and from 2010 until 2014, respectively.
Rashidi and Fung [34] surveyed techniques (e.g., based on
static and dynamic code analysis) to cope with malware on
mobile devices and Sadeghi et al. [35] surveyed tools and
analysis techniques to identify malware. In addition, Sadeghi et
al. provided a “survey of surveys” discussing surveys and their
main contributions in more detail. We refer to their work for
a more detailed investigation of malware analysis techniques
and further literature on this topic. Tam et al. [36] surveyed
mobile malware analysis techniques (static, dynamic, hybrid)
as well as malware tactics to hinder analysis (obfuscation).
Surveys on Side-Channel Attacks. The survey of Tun-
stall [37] focused on smart card security, in particular side-
channel attacks against cryptographic algorithms.
Zander et al. [38] surveyed covert channels via computer
network protocols, and Biswas et al. [39] conducted an in-
depth study on network timing channels (remote timing side
channels) as well as in-system timing channels (focusing on
hardware-based timing channels such as cache attacks) on
commodity PCs. They surveyed timing channels according to
their suitability for covert channels, timing side channels, and
network ﬂow watermarking (e.g., to de-anonymize Tor).
Regarding cloud computing platforms, Ge et al. [7] and
Szefer [40] surveyed microarchitectural attacks with a focus
on cache attacks. Ullrich et al. [41] focused on network-
based covert channels and network-based side channels in
cloud settings. Betz et al. [42] focused on covert channels
and mentioned a few side-channel attacks in the cloud setting.
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
5
EXISTING SURVEYS AND WHAT THEY FOCUS ON. UPPER PART: SURVEYS ON MOBILE SECURITY. LOWER PART: SURVEYS ON SIDE-CHANNEL ATTACKS.
TABLE I
Year
2011
2013
2014
2015
2015
2016
2017
2014
2007
2017
2016
2016
2017
2017
2016
2016
2016
Survey
Enck [30]
La Polla et al. [31]
Suarez-Tangil et al. [32]
Faruki et al. [33]
Rashidi and Fung [34]
Sadeghi et al. [35]
Tam et al. [36]
Tunstall [37]
Zander et al. [38]
Biswas et al. [39]
Ge et al. [7]
Szefer [40]
Ullrich et al. [41]
Betz et al. [42]
Xu et al. [43]
Hussain et al. [44]
Nahapetian [45]
Platform
Smartphone
Smartphone
Smartphone
Smartphone
Smartphone
Smartphone
Smartphone
Smart card
PC
PC
Cloud
Cloud
Cloud
Cloud
Smartphone
Smartphone
Smartphone
Topic
Malware/app analysis and protection mechanisms
Threats and vulnerabilities, focusing on the period 2004–2011
Threats and vulnerabilities, focusing on the period 2010–2013
Threats and vulnerabilities, focusing on the period 2010–2014
Analysis techniques to cope with malware
Tools and techniques to identify malware
Analysis techniques to identify malware
Side-channel attacks on cryptographic algorithms
Covert channels via computer network protocols
Timing channels, focusing on microarchitectural attacks
Network-based side channels (and communication channels)
Microarchitectural attacks
Microarchitectural attacks
Communication channels
Attacks & defense measures
Sensor-based keylogging attacks
Sensor-based keylogging attacks
The focus of our paper is on side-channel attacks against
mobile devices. Surveys about this topic are quite scarce and
consider speciﬁc types of side-channel attacks only. Xu et
al. [43] surveyed attacks and defenses on Android at a
broader scale and thereby provide a comprehensive overview
of the research landscape. They considered system privilege
escalation, issues in the permission model, side channels and
covert channels (a high-level overview of exploits considering
the accelerometer, the CPU cache, and the procfs), feature
abuses, malware detection, and app repackaging. Hussain et
al. [44] and Nahapetian [45] surveyed sensor-based keylogging
attacks. However, a systematic survey and classiﬁcation of all
existing categories of side-channel attacks on mobile devices
does not exist so far. Hence, we close this gap in this paper.
Table I summarizes the main focus of the above discussed
surveys and provides references for the interested reader.
III. TAXONOMY OF SIDE CHANNELS
In this section, we discuss the different types of information
leaks, how the key enablers presented in Section I enable so-
called software-only attacks on today’s smartphones, and the
generic adversary model followed by software-only attacks.
Finally, we present our new categorization system.
A. Types of Information Leaks
Considering side-channel attacks on mobile devices, we
identify two types of information leaks, namely unintended
information leaks and information published on purpose. Fig-
ure 4 depicts these two types of information leaks. Informally,
side-channel attacks exploiting unintended information leaks
can be considered as “traditional” side-channel attacks since
this category has already been extensively analyzed during the
smart card era [4]. For example, unintended information leaks
include the execution time, the power consumption, or the
electromagnetic emanation of a computing device. This type
of information leak is considered as unintended because smart
card designers and developers did not plan to leak the timing
information or power consumption of computing devices on
purpose.
Side-channel information leaks
Unintended
information leaks
Information published
on purpose
Execution time
Memory footprint
Power consumption
Sensor information
EM emanation
Data consumption
Fig. 4. Types of side-channel information leaks.
The second category of information leaks (referred to as
information published on purpose) is mainly a result of
the ever-increasing number of features provided by today’s
smartphones. In contrast to unintended information leaks, the
exploited information is published on purpose and for benign
reasons. For instance, speciﬁc features require the device to
share (seemingly harmless) information and resources with
apps running in parallel on the system. This information is
either shared by the OS directly (e.g., via the procfs) or
through the ofﬁcial Android API.1 Although this information
is extensively used by many legitimate applications for benign
purposes, it sometimes turns out to leak sensitive information
and, thus, leads to devastating side-channel attacks.
Many investigations impressively demonstrated that seem-
ingly harmless information allows to infer sensitive infor-
mation that is protected by dedicated security mechanisms,
such as permissions. Examples of such seemingly harmless
information are the memory footprint of an application as
well as the data-usage statistics that keep track of the amount
of incoming and outgoing network trafﬁc. Both, the memory
footprint [25] as well as the data-usage statistics [26], allow
to infer a user’s visited websites. The fundamental design
weakness of assuming information as being innocuous (e.g.,
the memory footprint or the data-usage statistics) means that
it is not protected by dedicated permissions.
1In the literature, some of the information leaks through the procfs are also
denoted as storage side channels [46].
IEEE COMMUNICATIONS SURVEYS & TUTORIALS, VOL. XX, NO. Z, MONTH YYYY
6
Furthermore, the second category seems to be more dan-
gerous in the context of smartphones as new features are
frequently added and new software interfaces allow to access
an unlimited number of unprotected resources. Even devel-
opers taking care of secure implementations in the sense of
unintended information leaks, e.g., by providing constant-time
crypto implementations and taking care of possible software
vulnerabilities such as buffer overﬂow attacks, inevitably leak
sensitive information due to shared resources,
the OS, or
the Android API. Additionally, the provided software inter-
faces to access information and shared resources enable so-
called software-only attacks,