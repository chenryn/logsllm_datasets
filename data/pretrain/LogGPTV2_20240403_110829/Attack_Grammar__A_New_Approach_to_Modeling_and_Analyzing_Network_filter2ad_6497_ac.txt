34
33
X
44
Figure 5. Table constructed by CYK algorithm 
Algorithm  
Input: The attack sequence a1, a2, a3, … an. 
Output: Non-terminal variables of attack grammar in D[n][0] 
The context-free grammar G = (V, T, R, S) 
Initialize  2-dimension  array  of  non-terminal  variable  sets 
D[n][n] 
for i=1~n 
for each production A->a in R  
if  a = a[i]  
       add A to D[0][i] 
for i=1~n 
for j=1-n-i 
correlation  using  attack  grammars  can  also  serve  to 
ruling  out  these  false  alarms.  Firstly,  we  can  ignore 
those alarms which do not match to any of the terminal 
variables. The rest false positives can be ruled out by 
correlation.  False  negatives  may  result  in  missing 
letters in strings. Therefore, we might only be able to 
obtain segments of the entire attack sequences. But the 
algorithm  in  figure  6  is  sufficient  to  discover  attack 
sequence segments. 
Another  problem  of  alert  correlation  would  be 
scenario collision, where actions by multiple attackers 
fire the alarm simultaneously. To solve this problem, a 
multi-level correlation engine should be designed. If an 
alert is discarded by the top level engine, it is stored in 
the  second  level  for  another  correlation.  Future  work 
may refine this method. 
The techniques of syntax checking in compilers are 
enlightening  to  the  process  of  alerts  correlation.  But 
the  difference  is  that  correlation  of  alerts  runs  on  the 
fly and is a much more critical application. We believe 
that  techniques  in  error  handling  in  compilers  can  be 
borrowed to strengthen our study in the future.  
5. Practical test 
tool  has 
We  have  developed  a  prototype  tool  to  verify  our 
four  components:  Data 
method.  The 
Collection Component, PDA Construction Component, 
Grammar Construction and Simplification Component, 
and  Grammar  Analysis  Component.  The  components 
are shown in figure 7. 
for each production A->aB where A∈D[i-1][j] 
if  a = a[i] and B∈D[i-1][j+1] 
   add A to D[i][j] 
Figure 6. Algorithm for checking membership 
of grammars 
In order to correlate IDS alerts, first of all, an attack 
grammar  has  to  be  generated  off  line.  Then  the 
grammar  is  loaded  to  a  correlation  engine.  As  those 
established  studies,  traffic  data  should  be  collected 
using distributed IDS agents and only alerts that match 
one  of  the  reachable  terminal  variables  in  our  attack 
grammar are stored in memory in temporal order. If the 
sequence is a prefix of an attack sequence which leads 
the attacker to his final targets, the engine will output 
one  or  more  non-terminal  variables  representing  a 
scenario  that  the  attacker  is  trying  to  move  from  the 
corresponding hosts to the target.  
However, due to false positives and false negatives, 
correlation may not always succeed as expected. Alerts 
Figure 7. Components in the prototype tool 
5.1. A simple example  
Figure 8. Topology of an example network 
210220
The example network in figure 8 comprises 4 hosts 
and  a  firewall.  The  attacker  starts  his  intrusion  from 
host  I,  which  locates  outside  the  protected  network. 
The  firewall  only  allows  connection  between  host  A 
and the protected network, where host B and host C are 
located. The  goal  of  the  attacker  is  to  obtain  the  root 
privilege  on  host  C.  Host  A  has  one  vulnerability  a, 
host B has two vulnerabilities b and c, and host C has 
two vulnerabilities d and e. The specifications of these 
vulnerabilities are listed in table 1. 
We  also  provide  a  simple  example  for  IDS  alerts 
correlation. For example, if the attack sequence is cd, 
we  input  it  to  our  correlation  engine  and  the  table  is 
constructed in figure 13. 
Vuls 
A 
B 
C 
D 
E 
Table 1 Vulnerabilities 
pre 
root 
root 
user 
root 
root 
locality 
remote 
remote 
remote 
local 
network 
remote 
effect 
user 
user 
root 
root 
user 
Host 
Table 2 Reachability 
Host.port 
A.1000 
port 
1000 
1001 
1002 
1003 
1004 
Figure 9. PDA model of the example 
I 
A 
B 
C 
B.all, C.all 
A.all, C.all 
A.all, B.all 
The automatically generated PDA model is P = (S, 
∑, Γ, δ, qI, Z0, {qFinal}), where S = {qI, qA, qB, qC, qFinal}, 
∑ = {a, b, c, d, e}, Γ = {R, U, Z}. Here R = {root}, U = 
{user}.  The transition functions of the PDA model are 
shown  in  the  figure  9.  To  better  demonstrate  the 
computation of our PDA,  we take the computation of 
PDA  with input acd as an example. The computation 
process  is  demonstrated  in  figure  10.  The  attack 
grammar  can  be  constructed 
the  PDA 
automatically. The simplified attack grammar is shown 
in figure 11. Attack paths can be generated from attack 
grammars  automatically.  We  use  simple  graph  to 
represent the acyclic attack paths, as is shown in figure 
12.  Note  there  are  cyclic  attack  paths  that  are  not 
shown in this graph. 
from 
Our tools automatically  list all the generating  non-
terminal variables: [qIZqF], [qIRqF], [qAUqF], [qARqF], 
[qBRqF],  [qCUqF],  [qCRqF],  and  S.  Since  the  initial 
variable S is generating in this example, the network is 
not safe and there are attack paths that lead the attacker 
to the target. The result also indicates that the attacker 
can 
the  host  with 
corresponding  status 
listed  above.  The  reachable 
terminal  variables  in  this  example  are  a,  c,  d,  and  e. 
That  means  the  vulnerability  b  is  useless  in  the 
intrusion  and  the  priority  of  fixing  the  corresponding 
bug is lower than that of the others. 
intrusion 
initiate 
from 
the 
Figure 10. A sample computation of PDA 
S→[qIZqF] 
[qIZqF]→a[qAUqF] 
[qAUqF]→c[qBRqF] 
[qBRqF]→e[qCUqF] | d[qCRqF] | a[qAUqF] |d 
[qCUqF]→c[qBRqF] 
[qCRqF]→a[qAUqF] 
Figure 11. Attack grammar of the example 
Figure 12. A sample attack graph converted 
from the attack grammar 
{
}
[q Rq ]
F
B
C
A
[q Uq ]
⎧
⎫
F
⎨
⎬
[q Uq ]
⎩
⎭
F
[q Uq ]
⎧
⎫
F
⎨
⎬
[q Uq ]
⎩
⎭
F
A
C
Figure 13. Table constructed during 
correlation 
5.2. Scalability Analysis 
Algorithm for constructing transition function set in 
PDA  model  shown  in  figure  2  is  the  most  time-
211221
consuming  part  in  the  PDA  construction  algorithm. 
Assuming the underlying network has M host clusters, 
and  V  different  vulnerabilities,  N  different  attacker 
statuses  (stack  alphabets)  and  the  time  needed  for 
adding one transition function to the set δ is O(1), thus, 
the  overall  computational  complexity  in  constructing 
the PDA model is O(M2VN).  
The upper bound of the algorithm for converting the 
PDA  model  into  the  attack  grammar  can  be  obtained 
by  observing  the  time  consumed  by  adding  new 
context-free  grammar  productions  to  set  R.  Since  the 
maximum number of transition functions in the set δ is 
about  M2VN,  the  overall  complexity  of  the  algorithm 
for adding production to R is about O(M4VN).   
the  attack  grammar, 
The  algorithm  for  eliminating  ε-productions  is 
combinational. However, due to the special structure of 
our  PDA  model  and 
the 
complexity of the algorithm shown in figure 3 can be 
polynomial.  The  original  algorithm  is  to  generate  2m 
production  for  every  A→X1X2X3X4…Xk,  in  which  m 
variables are  nullable.  Luckily, the  maximum  number 
of k in A→X1X2X3X4…Xk is 2 in our simplified attack 
grammar,  and  therefore  the  upper  bound  of  the 
algorithm is linear to the number of productions in the 
attack grammar, with a constant of 4.  
Actually, since only non-terminal variables with the 
form  [qXqF]  are  meaningful,  the  number  of  non-
terminal variables can be no more than MN. Moreover, 
because every production complies  with the Greibach 
Normal  Form  [8]  with  its  maximum  non-terminal 
variables  on  the  right-hand  side  no  more  than  1,  the 
total  number  of  productions  in  the  simplified  attack 
grammar, or the length of the grammar, should be less 
than  M2VN2+MNV,  which  is  O(M2VN2).  The  attack 
grammar is greatly simplified.  
Using  special  data  structures  specified  in  [26],  the 
complexity  of  algorithms  for  finding  all  generating 
variables  and  reachable  variables  can  be  reduced  to 
linear to the length of the grammar, namely O(M2VN2).  
The  algorithm  in  figure  4  is  essentially  a  variation 
of DFS if we consider non-terminal variables as nodes 
and  productions  as  edges.  Thus  the  run  time  is 
approximately  O(n)  where  n  is  the  length  of  the 
grammar. 
structure 
is  used 
special  data 
the 
implementation  of  the  algorithm  in  figure  6  to  check 
whether A belongs to D[i][j] in O(1) time, and if  the 
input  sequence  has  the  length  of  W,  the  overall 
complexity of constructing the table should be O(W2). 
However, 
the 
diagonals  the  complexity  can  be  O(W)  for  each  new 
arriving alerts. In scenarios of alerts correlation where 
W  is  relatively  small  and  neglectable  compared  with 
is  constructed  along 
table 
the 
in 
If 
if 
212222
the length of the grammar n, the complexity should be 
O(n). 
To  sum  up,  the  computational  complexity  of  the 
construction of the attack grammar is at most quartic to 
the  number  of  host  clusters  and  that  of  the  grammar 
simplification and the grammar analyses is linear to the 
length of the attack grammar, which is quadratic to the 
number of host clusters.  
5.3. Simulation test results 
Temporarily,  Data  Collection  Component  of  our 
tool can not derive reachability from rules of firewalls 
and  routers  yet  and  part  of  the  input  must  be  done 
manually.  To  test  the  scalability  of  our  methods,  a 
network generator is developed for simulation. Subnets, 
hosts,  vulnerabilities  and 
rules  are  all 
generated  randomly  but  a  configuration  check  is 