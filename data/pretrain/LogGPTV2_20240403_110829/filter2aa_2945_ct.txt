### Ensuring Even Spacing and Usability of Controls

**Step 17: Rotate the Simulator to Landscape Orientation and Change Resolution**

- **Action:** Click "Rotate Counterclockwise" to return the Simulator to landscape orientation.
- **Next Action:** Click "Change Resolution" and set the resolution to 2560 × 1400.
- **Observation:** Note that the controls remain evenly spaced on the form, although the labels may be difficult to read unless you have a 27-inch screen.

**Step 18: Adjust the Resolution to 1024 × 768**

- **Action:** Click "Change Resolution" again and switch the resolution to 1024 × 768.
- **Observation:** Observe how the spacing and size of the controls are adjusted to maintain an even balance in the user interface.

**Step 19: Resize the Window to Simulate a Smartphone View**

- **Action:** In the Simulator, double-click the top edge of the form to restore the view as a window. Drag and resize the window so that the form is displayed in the left half of the screen. Reduce the width of the window to its minimum.
- **Observation:** All controls remain visible, but the text for the Phone label and the title wrap, making them difficult to read. The controls are also not particularly easy to use in this narrow view.

**Step 20: Close the Simulator and Return to Visual Studio**

- **Action:** In the Simulator, click the "Start" button, then "Settings," "Power," and finally "Disconnect."
- **Result:** The Simulator closes, and you return to Visual Studio.

**Step 21: Select Local Machine as the Debug Target**

- **Action:** On the Visual Studio toolbar, in the "Debug Target" drop-down list box, select "Local Machine."

### Adapting the Layout Using the Visual State Manager

The user interface for the Customers app scales for different resolutions and form factors, but it does not work well when the width is reduced, especially on a smartphone. To address this, you can reorganize the layout rather than simply scaling the controls. For example, a more suitable layout for a narrow view might look like this:

### Methods to Achieve the Desired Effect

1. **Create Multiple XAML Files for Different Device Families:**
   - Create several versions of the `MainPage.xaml` file, one for each device family.
   - Each XAML file can be linked to the same code-behind (`MainPage.xaml.cs`).
   - Add a folder named `DeviceFamily-Mobile` to the project and add a new XAML view named `MainPage.xaml` to this folder.
   - Lay out the controls on this page as they should be displayed on a smartphone.
   - At runtime, the UWP will automatically select the appropriate view based on the device type.

2. **Use the Visual State Manager:**
   - The Visual State Manager (VSM) can detect changes in the height and width of the window.
   - Add XAML markup to position controls based on the window size.
   - This approach allows you to move or hide controls dynamically.

3. **Hybrid Approach with VSM:**
   - Combine the first two methods by using the VSM to switch between views based on the window dimensions.
   - This method is flexible and avoids the need for complex code to calculate control positions.

### Define a Layout for the Narrow View

1. **Add Properties to the Grid Control:**
   - In the XAML pane for the Customers app, add the `x:Name` and `Visibility` properties to the nested `Grid` control:
     ```xml
     <Grid x:Name="customersTabularView" Visibility="Collapsed">
     ```
   - Set the `Visibility` property to `Collapsed` to hide this grid while defining another for the columnar format.

2. **Add a New Grid Control for the Columnar View:**
   - After the closing tag for the `customersTabularView` Grid control, add another `Grid` control:
     ```xml
     <Grid x:Name="customersColumnarView" Margin="10,20,10,20" Visibility="Visible">
     ```

3. **Define Row Definitions for the Columnar View:**
   - Add row definitions to the `customersColumnarView` Grid control:
     ```xml
     <Grid.RowDefinitions>
         <RowDefinition Height="Auto"/>
         <RowDefinition Height="*"/>
     </Grid.RowDefinitions>
     ```

4. **Add a TextBlock for the Title:**
   - Add a `TextBlock` control to display the title in the first row:
     ```xml
     <TextBlock Grid.Row="0" FontSize="30">Customers</TextBlock>
     ```

5. **Add a Grid for Data Entry Controls:**
   - Add another `Grid` control to row 1 of the `customersColumnarView` Grid control:
     ```xml
     <Grid Grid.Row="1">
         <Grid.RowDefinitions>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
             <RowDefinition Height="Auto"/>
         </Grid.RowDefinitions>
         <Grid.ColumnDefinitions>
             <ColumnDefinition Width="Auto"/>
             <ColumnDefinition Width="*"/>
         </Grid.ColumnDefinitions>
     </Grid>
     ```

6. **Copy and Place TextBlock and TextBox Controls:**
   - Copy the `TextBlock` and `TextBox` controls from the `customersTabularView` Grid control to the new `Grid` control.
   - Place the `TextBlock` controls in column 0 and the `TextBox` controls in column 1.
   - Rename the controls to avoid naming conflicts (e.g., prefix with `c`).

7. **Set Visibility Properties:**
   - Set the `Visibility` property of the `customersTabularView` Grid control to `Visible` and the `customersColumnarView` Grid control to `Collapsed`.

### Use the Visual State Manager to Modify the Layout

1. **Add Visual State Group:**
   - After the closing tag for the `customersColumnarView` Grid control, add the following markup:
     ```xml
     <VisualStateManager.VisualStateGroups>
         <VisualStateGroup x:Name="LayoutStates">
             <VisualState x:Name="TabularLayout">
                 <VisualState.StateTriggers>
                     <AdaptiveTrigger MinWindowWidth="660"/>
                 </VisualState.StateTriggers>
                 <VisualState.Setters>
                     <Setter Target="customersTabularView.Visibility" Value="Visible"/>
                     <Setter Target="customersColumnarView.Visibility" Value="Collapsed"/>
                 </VisualState.Setters>
             </VisualState>
             <VisualState x:Name="ColumnarLayout">
                 <VisualState.StateTriggers>
                     <AdaptiveTrigger MinWindowWidth="0"/>
                 </VisualState.StateTriggers>
                 <VisualState.Setters>
                     <Setter Target="customersTabularView.Visibility" Value="Collapsed"/>
                     <Setter Target="customersColumnarView.Visibility" Value="Visible"/>
                 </VisualState.Setters>
             </VisualState>
         </VisualStateGroup>
     </VisualStateManager.VisualStateGroups>
     ```

2. **Test the App:**
   - Ensure the Debug Target is set to "Local Machine" and start debugging.
   - Resize the Customer app window to observe the layout changes.

### Applying Styles to the UI

To enhance the appearance of the app, you can define reusable styles. These styles can be implemented as app-wide resources or local resources.

**Step 1: Create a Resource Dictionary**

- **Action:** In Solution Explorer, right-click the Customers project, point to "Add," and then click "New Item."
- **Next Action:** In the "Add New Item - Customers" dialog box, select "Resource Dictionary." Name the file `AppStyles.xaml` and click "Add."

**Step 2: Define Styles in the Resource Dictionary**

- **Action:** Add styles and other resources to the `AppStyles.xaml` file. For example, you can define an `ImageBrush` for the background and styles for `TextBlock` and `TextBox` controls.

**Step 3: Apply Styles to the Controls**

- **Action:** In the `MainPage.xaml` file, apply the defined styles to the controls.

By following these steps, you can ensure that your app's user interface is both functional and visually appealing across different screen sizes and devices.