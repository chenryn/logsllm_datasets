WampServer2.1 All Version (Apache 2.2.17)
以 WampServer2.1 最新版 WampServer2.1e-x32 版来测试的
Wamp5 All Version (Apache 2.2.6)
以 Wamp5 最新版 Wamp5_1.7.4 版来测试的
AppServ 2.4 All Version (Apache 2.0.59)
以 AppServ 2.4 最新版 AppServ - 2.4.9 版来测试的
AppServ 2.5 All Version (Apache 2.2.8)
以 AppServ 2.5 最新版 AppServ - 2.5.10 版来测试的
AppServ 2.6 All Version (Apache 2.2.8)
以 AppServ 2.6 最新版 AppServ - 2.6.0 版来测试的
用中国菜刀进行一句话连接时不知道为什么失败了，但是用 phpinfo()测试了还是可以解析的
[*] IIS 解析漏洞
解析 - test.asp/任意文件名 | test.asp;任意文件名 | 任意文件名/任意文件名.php
描述 - IIS6.0 在解析 asp 格式的时候有两个解析漏洞，一个是如果目录名包含".asp"字符串，
那么这个目录下所有的文件都会按照 asp 去解析，另一个是只要文件名中含有".asp;"
会优先按 asp 来解析
IIS7.0/7.5 是对 php 解析时有一个类似于 Nginx 的解析漏洞，对任意文件名只要在 URL
后面追加上字符串"/任意文件名.php"就会按照 php 的方式去解析(IIS6.0 没测试)
测试 - 测试了下面这些集成环境，都以它们的最新版本来测试，应该能覆盖所有低版本
IIS6.0 (Win2003 SP2 + IIS6.0)
[Success]
IIS7.0 (Win2008 R1 + IIS7.0)
[Success]
IIS7.5 (Win2008 R2 + IIS7.5)
[Success]
IIS 的解析漏洞在市面上描述的版本还算明确，不像 Apache 那么模糊，针对 IIS6.0，只
要文件名不被重命名基本都能搞定。这里要注意一点，对于任意文件名/任意文件名.php 这
个漏洞其实是出现自 php-cgi 的漏洞，所以其实跟 IIS 自身是无关的，这个会在接下来讲到。
IIS6.0 (asp 解析漏洞 1)
以 win2003 sp2 + IIS6.0 来测试
图中的文件命名为 evil2.asp;xxxxxxx
IIS6.0 (asp 解析漏洞 2)
以 win2003 sp2 + IIS6.0 来测试
图中的文件命名为 evil
并位于目录 test.asp 下
IIS7.5 (php 解析漏洞)
以 win2008 r2 + IIS7.5 来测试
对 evilcode 这个文件进行 php 解析漏洞测试
[*] Nginx 解析漏洞
解析 - 任意文件名/任意文件名.php | 任意文件名%00.php
描述 - 目前 Nginx 主要有这两种漏洞，一个是对任意文件名，在后面添加/任意文件名.php
的解析漏洞，比如原本文件名是 test.jpg，可以添加为 test.jpg/x.php 进行解析攻击。
还有一种是对低版本的 Nginx 可以在任意文件名后面添加%00.php 进行解析攻击。
测试 - 测试了下面这些环境
nginx 0.5.*
[Success]
nginx 0.6.*
[Success]
nginx 0.7 
[*]
绕过服务端对 http request 包 MIME 类型检测
---- 路径////扩展名检测绕过攻击
[*] 黑名单绕过
[*] 白名单绕过
文件名大小写绕过
0x00 截断绕过
名单列表绕过
本地文件包含漏洞
特殊文件名绕过
IIS 解析漏洞
0x00 截断绕过
Nginx 解析漏洞
.htaccess 文件攻击
本地包含漏洞
Apache 解析漏洞
IIS 解析漏洞
Nginx 解析漏洞
---- 文件内容检测绕过攻击
[*] 文件加载测试绕过
---- 上传攻击框架
然后再直观点，看它们属于什么层面的漏洞
---- 轻量级检测绕过攻击
[*]
绕过 javascript 对扩展名的检测
(代码层漏洞)
[*]
绕过服务端对 http request 包 MIME 类型检测
(代码层漏洞)
---- 路径////扩展名检测绕过攻击
[*] 黑名单绕过
文件名大小写绕过
(代码层漏洞)
名单列表绕过
(代码层漏洞)
特殊文件名绕过
(代码层漏洞)
0x00 截断绕过
(代码层漏洞)
.htaccess 文件攻击
(代码层漏洞)
php 文件包含漏洞
(代码层漏洞)
Apache 解析漏洞
(应用层漏洞)
IIS 解析漏洞
(应用层漏洞)
Nginx 解析漏洞
(应用层漏洞)
[*] 白名单绕过
0x00 截断绕过
(代码层漏洞)
php 文件包含漏洞
(代码层漏洞)
IIS 解析漏洞
(应用层漏洞)
Nginx 解析漏洞
(应用层漏洞)
---- 文件内容检测绕过攻击
[*] 文件加载绕过
(代码层漏洞)
上传攻击流程如下图
代码层上传漏洞如下图 (红色字体标记部分)
攻击要点:
要绕过轻量级检测
要绕过文件内容检测
A. 要绕过代码层对路径/扩展名检测 (直接解析)
B. 找到代码层的解析调用 (间接解析)
应用层上传漏洞如下图 (红色字体标记部分)
攻击要点:
要绕过轻量级检测
要绕过文件内容检测
A. 找到应用层的解析漏洞 (间接解析)
攻击手法与环节的对应如下图
[*] 这是整个上传攻击框架的核心之一
要注意下，在这里如果在路径/扩展名检测处检测未通过，流程到解析攻击时
白名单检测绕过技术里并不完全能利用所有解析攻击方式
在路径/扩展名检测绕过攻击里已经给出了具体细节
Fckeditor 2.4.x php 版的分析实例
上传攻击分析框架
[*] 这是整个上传攻击框架的核心之二
大家可以像上面分析 fckeditor 的方式，在分析一份源码或一个目标环境时
先把上面的上传攻击分析框架列表放好
然后去依次对比
哪些检测环节存在/不存在
哪些环节是安全/还是有漏洞
哪些环节如果被利用是代码层漏洞/还是 Web 应用程序解析漏洞
对应在该项后面进行填写
最后把 Vule 的部分选出来，再来分析如何进行组合，以及利用它们需要什么样的条件
通过这个分析框架进行白盒/黑盒分析并罗列出所有情况
攻击者便能更系统地分析出源码/目标环境可能存在的漏洞
整个上传攻击的核心最后被分析和总结成了上面两张重要的图
攻击手法与环节图 和 检测框架图
这两张图就是这篇 paper 最有价值的总结了
上传攻击的防御如下图
图中红点便是防御的重要环节
需要注意的:
1. 轻量级检测必然能绕过
2. 检测的重点放在文件内容检测
可以用检测脚本语言特征码的机制
3. 路径/扩展名检测一定要用白名单
并且注意路径的 0x00 截断攻击 (把 php 更新至最新版本即可，已经修补了这个漏洞了)
4. 不能有本地文件包含漏洞
5. 随时注意更新 web 应用软件
避免被解析漏洞攻击
---- 结语
目前市面上所见过的文章或看过的书都没怎么看到过对上传攻击比较好的总结，见得最多的
是对 sql injection 的总结，毕竟 sql injection 属于直接解析/执行的情况，效果来得最直接。
但是这条路会越来越难走，总结其他攻击手段将会变得更加重要和有价值，像上传攻击总结，
爆绝对路径的总结等等，一些平时大家当小技巧对待的东西，以后会成为主要攻击手段之一。
PS: 写这篇 paper 也写各种累死了，光是搭建各种环境就花了非常多时间，当然还是像文章
开头自己所说的，希望分享能带来交流的价值，那么我的分享就是有意义的，毕竟大牛级别
的一般不怎么分享他们比较高水平的技术，我也比较菜，没那么顾虑，就把这些小东西拿来
分享下，给这个大环境注入点新鲜血液。