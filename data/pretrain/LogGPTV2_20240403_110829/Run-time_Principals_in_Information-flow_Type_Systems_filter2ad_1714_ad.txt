(R-Fun)
(R-Name)
(R-All)
(R-Some)
Fig. 5. Logical relations for types with labels
Theorem 2 (Noninterference). If A; x : ul0 ‘ e : booll, A ‘ l0 6v l, A ‘ v :
ul0 and A ‘ v0 : ul0 then
A, e{v/x} −→∗ A, v0
iﬀ A, e{v0/x} −→∗ A, v0
The proof requires a notion of equivalence with respect to observers of diﬀerent
security labels. To reason about equivalence of higher-order functions and polymor-
phism, we use the standard technique of logical relations [Mitchell 1996]. However,
we parameterize the relations with an upper-bound ζ (“zeta”) of the observer’s se-
curity label, capturing the dependence of the terms’ equivalence on the observer’s
label.
Logical relations. Figure 5 shows the formal deﬁnition of the logical relation.
We use the notation A ‘ e ≈ζ e0 : t to denote two related computations, and
A ‘ v ∼ζ v0 : t to denote two related values. These relations are parameterized by
a type t, an acts-for hierarchy A, and an upper-bound ζ of the observer’s security
label.
R-Term indicates that two terms are related at type t if they evaluate to values
which are related at type t. R-Label is the crucial deﬁnition for logical relations
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
15
with labels. It relates any two values at type ul as long as the label l is not lower
than the observer’s label ζ. If R-Label does not apply, values are related only by
one of the following syntax-directed rules.
By R-Unit, * is related only to itself and, similarly, by R-Name, X is related only
to itself (because they are both singleton types). R-Inl says that two values are
related at (t1 + t2)l if they both are left-injections of the form inl v and inl v0,
and if v and v0 are related at t. By R-Fun, two values are related at (t1 → t2)l
if their applications to all values related at t1 are related at t2 t l. Lastly, R-All
indicates that two values are related at (∀α (cid:22) p. t)l if their instantiations with all
principals acting for p are related at t t l.
We use the notation A ‘ γ ≈ζ γ0 : Γ to denote two related substitutions, meaning
that dom(γ) = dom(γ0) = dom(Γ) and that, for all x : t ∈ Γ, we have A;· ‘ γ(x) ≈ζ
γ0(x) : t. Note that a substituted value γ(x) or γ0(x) is always closed, as the logical
relations relate only closed values to closed values, and closed expressions to closed
expressions.
We use the notation δ |= ∆ to denote a type substitution δ modeling a type
environment ∆, meaning that dom(δ) = dom(∆) and that, for all α (cid:22) p ∈ ∆, we
have ∆ ‘ δ(α) (cid:22) p. That is, δ substitutes all free principal variables in ∆ and, δ
respects all delegation constraints in ∆.
Similarly, we use the notation A ‘ γ |= Γ to denote a term substitution γ
modelling a term environment Γ under an acts-for hierarchy A, meaning that
dom(γ) = dom(Γ) and that, for all x : t ∈ Γ, we have A; Γ ‘ γ(x) : t. At last, the
notation A = δ(∆) is a point-wise extension of δ(t) such that dom(A) = dom(∆)
and that, for all α (cid:22) p ∈ ∆, we have α (cid:22) δ(p) ∈ A.
Remark 3. We do not deal with parametricity of polymorphic functions [Wadler
1989] nor the behavioral equivalence of existential packages [Pitts 1998]. That is,
our model assumes that an observer can diﬀerentiate diﬀerent representations of
polymorphic functions or diﬀerent implementations of existential packages. This
assumption simpliﬁes the equivalence relations, and is the key diﬀerence between
noninterference and parametricity.
Using these deﬁnitions, we strengthen the induction hypothesis of noninterference
so that Theorem 2 (Noninterference) follows as a special case of this substitution
lemma.
In essence, the lemma states that substitution of related values yields
related results.
Lemma 4 (Substitution for logical relations).
If
(1 ) ∆; Γ ‘ e : t
(2 ) δ |= ∆
(3 ) A = δ(∆)
(4 ) A ‘ γ |= Γ
(5 ) A ‘ γ0 |= Γ
(6 ) A ‘ γ ≈ζ γ0 : δ(Γ)
then
A ‘ γδ(e) ≈ζ γ0δ(e) : δ(t)
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
16
Stephen Tse and Steve Zdancewic
Proof. By induction on the typing derivations.
x : t ∈ Γ
∆; Γ ‘ x : t
—T-Var:
By the assumption A ‘ γ ≈ζ γ0 : δ(Γ) and the deﬁnition of related substitutions.
—T-Unit:
∆ ‘ l
∆; Γ ‘ * : 1l
By the deﬁnition of substitution, γδ(e) = γ0δ(e) = *. Their evaluated values are
related by R-Unit. The result then follows by R-Term.
∆; Γ ‘ e1 : t1 ∆ ‘ l
∆; Γ ‘ inl e1 : (t1 + t2)l
By the deﬁnition of substitution,
—T-Inl:
γδ(inl e1) = inl γδ(e1)
γ0δ(inl e1) = inl γ0δ(e1)
δ((t1 + t2)l) = (δ(t1) + δ(t2))δ(l)
(1)
(2)
(3)
By the induction hypothesis on e1, we have A ‘ γδ(e1) ≈ζ γ0δ(e1) : δ(t1) with
A, γδ(e1) −→∗ A, v and A, γ0δ(e1) −→∗ A, v0. By the evaluation under a context,
we have A, inl γδ(e1) −→∗ A, inl v and A, inl γ0δ(e1) −→∗ A, inl v0. The
result follows by (1)-(3), R-Inl and R-Term.
—T-Inr: symmetric to T-Inl.
∆; Γ ‘ e0 : (t1 + t2)l ∆; Γ ‘ v1 : (t1 → t0)l ∆; Γ ‘ v2 : (t2 → t0)l
∆; Γ ‘ case e0 v1 v2 : t0 t l
—T-Case:
By the induction hypothesis on e0, we have A ‘ γδ(e0) ≈ζ γ0δ(e0) : δ((t1 + t2)l)
with A, γδ(e0) −→∗ A, v0 and A, γ0δ(e0) −→∗ A, v0
0. By the deﬁnition of substi-
tution, we have γδ(case e0 v1 v2) = case γδ(e0) γδ(v1) γδ(v2).
By the inversion of A ‘ v0 ∼ζ v0
0 : δ((t1 + t2)l), there are three subcases to be
considered:
(1) R-Label with A ‘ l 6v ζ: let t0 t l = ul0. Since A ‘ l 6v ζ, we have A ‘ l0 6v ζ.
Hence any two values of type ul0 are then trivially related by R-Label. The
result follows by R-Term.
(2) R-Inl with v0 = inl v and v0
0 = inl v0 with A ‘ v ∼ζ v0
: δ(t1): by
E-CaseInl,
A, case v0 γδ(v1) γδ(v2) −→∗ A, γδ(v1) v
1) v0
2) −→∗ A, γ0δ(v0
A, case v0
0 γ0δ(v0
1) γ0δ(v0
By the induction hypothesis, the deﬁnition of substitution and R-Fun, we
have
A ‘ (γδ(v1) v) ≈ζ (γ0δ(v0
1) v0) : δ(t0 t l)
By R-Term, we have related values for the two application terms. By the
evaluation under a context, we have related values for the result terms.
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
Run-time Principals in Information-ﬂow Type Systems
·
0 = inr v0: symmetric to the previous case.
(3) R-Inr with v0 = inr v and v0
∆; Γ, x : t1 ‘ e0 : t2 ∆ ‘ l
∆; Γ ‘ λx: t1. e0 : (t1 → t2)l
By the deﬁnition of substitution,
—T-Fun:
γδ(λx: t1. e0) = λx: δ(t1). γδ(e0)
γ0δ(λx: t1. e0) = λx: δ(t1). γ0δ(e0)
δ((t1 → t2)l) = (δ(t1) → δ(t2))δ(l)
By (1)-(3), R-Fun and R-Term, it remains to show that ∀A ‘ v ∼ζ v0 : δ(t1),
A ‘ ((λx: δ(t1). γδ(e0)) v) ≈ζ ((λx: δ(t1). γ0δ(e0)) v0) : δ(t2 t l)
By the evaluation under a context with E-Fun,
A, (λx: δ(t1). γδ(e0)) v −→∗ A, γδ(e0){v/x}
A, (λx: δ(t1). γ0δ(e0)) v0 −→∗ A, γ0δ(e0){v0/x}
17
(1)
(2)
(3)
(4)
(5)
Let γ0 = γ, x 7→ v and γ0
0 = γ0, x 7→ v0 such that
γδ(e0){v/x} = γ0δ(e0)
γ0δ(e0){v0/x} = γ0
0δ(e0)
A ‘ γ0 ≈ζ γ0
0 : δ(Γ, x : t1)
(6)
(7)
(8)
0 |= Γ, x : t1
0δ(e0) : δ(t2 t l). Then, the result follows by
By the induction hypothesis with A ‘ γ0 |= Γ, x : t1 and A ‘ γ0
and (8), we have A ‘ γ0δ(e0) ≈ζ γ0
(4)-(7) and R-Term.
∆; Γ ‘ e1 : (t1 → t2)l ∆; Γ ‘ e2 : t1
∆; Γ ‘ e1 e2 : t2 t l
—T-App:
By the induction hypothesis on e1 and e2,
(1) A ‘ γδ(e1) ≈ζ γ0δ(e1) : δ((t1 → t2)l) with A, γδ(e1) −→∗ A, v1 and
(2) A ‘ γδ(e2) ≈ζ γ0δ(e2) : δ(t1) with A, γδ(e2) −→∗ A, v2 and A, γ0δ(e2) −→∗
1
A, γ0δ(e1) −→∗ A, v0
A, v0
2
The result then follows by R-Fun and R-Term.
—T-Name:
∆ ‘ l
∆; Γ ‘ X : (PX)l
By the deﬁnition of substitution, γδ(e) = γ0δ(e) = X and δ((PX)l) = (PX)δ(l).
The result then follows by R-Name and R-Term.
∆; Γ ‘ e1 : (Pp1)l ∆; Γ ‘ e2 : (Pp2)l ∆, p1 (cid:22) p2; Γ ‘ e3 : t0 ∆; Γ ‘ e4 : t0
—T-IfDel:
By the induction hypothesis on e1, e2, e3 and e4,
(1) A ‘ γδ(e1) ≈ζ γ0δ(e1) : δ((Pp1)l) with A, γδ(e1) −→∗ A, v1 and A, γ0δ(e1) −→∗
∆; Γ ‘ if (e1 (cid:22) e2) e3 e4 : t0 t l
A, v0
1
ACM Transactions on Programming Languages and Systems, Vol. TBD, No. TDB, Month Year.
·
18
Stephen Tse and Steve Zdancewic
(2) A ‘ γδ(e2) ≈ζ γ0δ(e2) : δ((Pp2)l) with A, γδ(e2) −→∗ A, v2 and A, γ0δ(e2) −→∗
(3) A ‘ γδ(e3) ≈ζ γ0δ(e3) : δ(t0) with A, γδ(e3) −→∗ A, v3 and A, γ0δ(e3) −→∗
(4) A ‘ γδ(e4) ≈ζ γ0δ(e4) : δ(t0) with A, γδ(e4) −→∗ A, v4 and A, γ0δ(e3) −→∗
2
3
A, v0
A, v0
A, v0
4
By the deﬁnition of substitution and the evaluation under a context,
γδ(if (e1 (cid:22) e2) e3 e4) = if (γδ(e1) (cid:22) γδ(e2)) γδ(e3) γδ(e4)
γ0δ(if (e1 (cid:22) e2) e3 e4) = if (γ0δ(e1) (cid:22) γ0δ(e2)) γ0δ(e3) γ0δ(e4)
A, if (γδ(e1) (cid:22) γδ(e2)) γδ(e3) γδ(e4) −→∗ A, if (v1 (cid:22) v2) γδ(e3) γδ(e4)
2) γ0δ(e3) γ0δ(e4)
2 : δ((Pp2)l),
A, if (γ0δ(e1) (cid:22) γ0δ(e2)) γ0δ(e3) γ0δ(e4) −→∗ A, if (v0
By the inversion of A ‘ v1 ∼ζ v0
(1) R-Label with A ‘ l 6v ζ: by R-Label, we have related values for the result
2 = δ(p2): if A ‘ δ(p1) (cid:22) δ(p2), then
(2) R-Name with v1 = v0
1 (cid:22) v0
1 : δ((Pp1)l) and A ‘ v2 ∼ζ v0
1 = δ(p1), v2 = v0
terms.
by the evaluation under a context with E-IfDelYes,
A, if (v1 (cid:22) v2) γδ(e3) γδ(e4) −→∗ A, γδ(e3)
A, if (v0
2) γ0δ(e3) γ0δ(e4) −→∗ A, γ0δ(e3)
1 (cid:22) v0
Otherwise, if A ‘ δ(p1) 6(cid:22) δ(p2), then by the evaluation under a context and
E-IfDelNo,
A, if (v1 (cid:22) v2) γδ(e3) γδ(e4) −→∗ A, γδ(e4)
A, if (v0
2) γ0δ(e3) γ0δ(e4) −→∗ A, γ0δ(e4)
1 (cid:22) v0
In both cases, by the evaluation under a context, we have related values for
the result terms at type δ(t0). By Lemma 5 (Subtyping for logical relations)
and Lemma 12 (substitution for subtyping), they are also related at type
δ(t0 t l). The result then follows by R-Term.
∆, α (cid:22) p; Γ ‘ e0 : t0 α 6∈ ftv(Γ) ∆ ‘ l
∆; Γ ‘ Λα (cid:22) p. e0 : (∀α (cid:22) p. t0)l
—T-All:
By the deﬁnition of substitution,