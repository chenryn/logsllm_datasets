前面已经介绍了用于显示表达式树的表达式。这是一个lambda表达式，它有一个
Racer参数，表达式体提取赢得比赛次数超过6次的巴西赛车手：
    Expression> expression =
      r => r.Country == "Brazil" && r.Wins > 6;
    DisplayTree(0, "Lambda", expression);
下面看看结果。lambda表达式包含一个Parameter和一个AndAlso节点类型。AndAlso
节点类型的左边是一个Equal节点类型，右边是一个GreaterThan节点类型。Equal节点类型
的左边是MemberAccess节点类型，右边是Constant节点类型。
    Lambda! NodeType: Lambda; Expr: r => ((r.Country == "Brazil") AndAlso (r.Wins
 > 6))
    > Parameter! NodeType: Parameter; Expr: r Param Type: Racer
    > Body! NodeType: AndAlso; Expr: ((r.Country == "Brazil") AndAlso (r.Wins > 6
))
    >> Left! NodeType: Equal; Expr: (r.Country == "Brazil") Method: op_Equality
    >>> Left! NodeType: MemberAccess; Expr: r.Country Member Name: Country, Type:
 String
    >>>> Member Expr! NodeType: Parameter; Expr: r Param Type: Racer
    >>> Right! NodeType: Constant; Expr: "Brazil" Const Value: Brazil
    >> Right! NodeType: GreaterThan; Expr: (r.Wins > 6)
    >>> Left! NodeType: MemberAccess; Expr: r.Wins  Member Name: Wins, Type: Int3
2
    >>>> Member Expr! NodeType: Parameter; Expr: r Param Type: Racer
    >>> Right! NodeType: Constant; Expr: 6 Const Value: 6
使用Expression类型的一个例子是ADO.NET Entity Framework和WCF数据服务的
客户端提供程序。这些技术用Expression参数定义了扩展方法。这样，访问数据库的
LINQ提供程序就可以读取表达式，创建一个运行期间优化的查询，从数据库中获取数
据。
13.5 LINQ提供程序
.NET包含几个LINQ提供程序。LINQ提供程序为特定的数据源实现了标准的查询操作
符。LINQ提供程序也许会实现比LINQ定义的更多的扩展方法，但至少要实现标准操作
符。LINQ to XML实现了一些专门用于XML的方法，例如，System.Xml.Linq名称空间中
的Extensions类定义的Elements（）、Descendants（）和Ancestors（）方法。
LINQ提供程序的实现方案是根据名称空间和第一个参数的类型来选择的。实现扩展
方法的类的名称空间必须是开放的，否则扩展类就不在作用域内。在LINQ to Objects中定
义的Where（）方法的参数和在LINQ to Entities中定义的Where（）的方法参数不同。
LINQ to Objects中的Where（）方法用Enumerable类定义：
    public static IEnumerable Where(
        this IEnumerable source, Func predicate);
在System.Linq名称空间中，还有另一个类实现了操作符Where。这个实现代码由
LINQ to Entities使用。这些实现代码在Queryable类中可以找到：
    public static IQueryable Where(
        this IQueryable source,
        Expression> predicate);
这两个类都在System.Linq名称空间的System.Core程序集中实现。那么，编译器如何
选择使用哪个方法？表达式类型有什么用途？无论是用Func参数传递，还
是用Expression>参数传递，lambda表达式都相同。只是编译器的行
为不同，它根据source参数来选择。编译器根据其参数选择最匹配的方法。在ADO.NET
Entity 
Framework中定义的ObjectContext类的CreateQuery（）方法返回一个实现了
IQueryable接口的ObjectQuery对象，因此Entity Framework使用Queryable类
的Where（）方法。
13.6 小结
本章讨论了LINQ查询和查询所基于的语言结构，如扩展方法和lambda表达式，还列
出了各种LINQ查询操作符，它们不仅用于筛选数据源，给数据源排序，还用于执行分
区、分组、转换、连接等操作。
使用并行LINQ可以轻松地并行化运行时间较长的查询。
另一个重要的概念是表达式树。表达式树允许在运行期间构建对数据源的查询，因为
表达式树存储在程序集中。表达式树的用法详见第38章。LINQ是一个非常深奥的主题，
更多的信息可查阅第27章。还可以下载其他第三方提供程序，例如，LINQ to MySQL、
LINQ to Amazon、LINQ to Flickr、LINQ to LDAP以及LINQ to SharePoint。无论使用什么
数据源，都可以通过LINQ使用相同的查询语法。
第14章介绍错误和异常，解释如何捕获异常。
第14章
错误和异常
本章要点
● 异常类
● 使用try…catch…finally捕获异常
● 过滤异常
● 创建用户定义的异常
● 获取调用者的信息
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● Simple Exceptions
● ExceptionFilters
● RethrowExceptions
● Solicit Cold Call
● Caller Information
14.1 简介
错误的出现并不总是编写应用程序的人的原因，有时应用程序会因为应用程序的最终
用户引发的动作或运行代码的环境而发生错误。无论如何，我们都应预测应用程序中出现
的错误，并相应地进行编码。
.NET Framework改进了处理错误的方式。C#处理错误的机制可以为每种错误提供自
定义处理方式，并把识别错误的代码与处理错误的代码分离开来。
无论编码技术有多好，程序都必须能处理可能出现的任何错误。例如，在一些复杂的
代码处理过程中，代码没有读取文件的许可，或者在发送网络请求时，网络可能会中断。
在这种异常情况下，方法只返回相应的错误代码通常是不够的——可能方法调用嵌套了15
级或者20级，此时，程序需要跳过所有的15或20级方法调用，才能完全退出任务，并采取
相应的应对措施。C#语言提供了处理这种情形的最佳工具，称为异常处理机制。
本章介绍了在多种不同的场景中捕获和抛出异常的方式。讨论不同名称空间中定义的
异常类型及其层次结构，并学习如何创建自定义异常类型。还将学到捕获异常的不同方
式，例如，捕获特定类型的异常或者捕获基类的异常。本章还会介绍如何处理嵌套的try
块，以及如何以这种方式捕获异常。对于无论如何都要调用的代码——即使发生了异常或
者代码带错运行，可以使用本章介绍的try/finally块。本章也会介绍C# 6中的一个新功能：
异常过滤器。
学习完本章后，你将很好地掌握C#应用程序中的高级异常处理技术。
14.2 异常类
在C#中，当出现某个特殊的异常错误条件时，就会创建（或抛出）一个异常对象。
这个对象包含有助于跟踪问题的信息。我们可以创建自己的异常类（详见后面的内容），
但.NET提供了许多预定义的异常类，多到这里不可能提供详尽的列表。在图14-1类的层
次结构图中显示了其中的一些类，它们给出了大致的模式。本节将简要介绍在.NET基类
库中可用的一些异常。
图14-1
图14-1中的所有类都在System名称空间中，但IOException类、CompositionException
类和派生于这两个类的类除外。IOException类及其派生类在System.IO名称空间中。
System.IO名称空间处理文件数据的读写。CompositionException及其派生类在
System.ComponentModel.Composition名称空间中。该名称空间处理部件和组件的动态加
载。一般情况下，异常没有特定的名称空间，异常类应放在生成异常的类所在的名称空间
中，因此与IO相关的异常就在System.IO名称空间中。在许多基类名称空间中都有异常
类。
对于.NET类，一般的异常类System.Exception派生自System.Object，通常不在代码中
抛出System.Exception泛型对象，因为它们无法确定错误情况的本质。
在该层次结构中有两个重要的类，它们派生自System.Exception类：
● 
SystemException——该类用于通常由.NET运行库抛出的异常，或者由几乎所有的
应用程序抛出的异常。例如，如果.NET运行库检测到栈已满，它就会抛出
StackOverflowException异常。另一方面，如果检测到调用方法时参数不正确，就
可以在自己的代码中选择抛出ArgumentException异常或其子类异常。
SystemException异常的子类包括表示致命错误和非致命错误的异常。
● ApplicationException——在.NET Framework最初的设计中，是打算把这个类作为自
定义应用程序异常类的基类的。不过，CLR抛出的一些异常类也派生自这个类
（例如，TargetInvocationException），应用程序抛出的异常则派生自
SystemException（例如，ArgumentException）。因此从ApplicationException派生
自定义异常类型没有提供任何好处，所以不再是一种好做法。取而代之的是，可
以直接从Exception基类派生自定义异常类。.NET Framework中的许多异常类直接
派生自Exception。
其他可能用到的异常类包括：
● StackOverflowException——如果分配给栈的内存区域已满，就会抛出这个异常。如
果一个方法连续地递归调用它自己，就可能发生栈溢出。这一般是一个致命错
误，因为它禁止应用程序执行除了中断以外的其他任务。在这种情况下，甚至也
不可能执行finally块。通常用户自己不能处理像这样的错误，而应退出应用程
序。
● EndOfStreamException——这个异常通常是因为读到文件末尾而抛出的。流表示数
据源之间的数据流。
● OverflowException——如果要在checked环境下把包含值-40的int类型数据强制转换
为uint数据，就会抛出这个异常。
我们不打算讨论图14-1中的其他异常类。显示它们仅为了演示异常类的层次结构。
异常类的层次结构并不多见，因为其中的大多数类并没有给它们的基类添加任何功
能。但是在处理异常时，添加继承类的一般原因是更准确地指定错误条件，所以不需要重
写方法或添加新方法（尽管常常要添加额外的属性，以包含有关错误情况的额外信息）。
例如，当传递了不正确的参数值时，可给方法调用使用ArgumentException基类，
ArgumentNullException类派生于ArgumentException异常类，它专门用于处理所传递的参数
值是Null的情况。
14.3 捕获异常
.NET 
Framework提供了大量的预定义基类异常对象，本节就介绍如何在代码中使用
它们捕获错误情况。为了在C#代码中处理可能的错误情况，一般要把程序的相关部分分
成3种不同类型的代码块：
● try块包含的代码组成了程序的正常操作部分，但这部分程序可能遇到某些严重的错
误。
● 
catch块包含的代码处理各种错误情况，这些错误是执行try块中的代码时遇到的。
这个块还可以用于记录错误。
● finally块包含的代码清理资源或执行通常要在try块或catch块末尾执行的其他操作。
无论是否抛出异常，都会执行finally块，理解这一点非常重要。因为finally块包含
了应总是执行的清理代码，如果在finally块中放置了return语句，编译器就会标记
一个错误。例如，使用finally块时，可以关闭在try块中打开的连接。finally块是完
全可选的。如果不需要清理代码（如删除对象或关闭已打开的对象），就不需要
包含此块。
下面的步骤说明了这些块是如何组合在一起捕获错误情况的：
（1）执行的程序流进入try块。
（2）如果在try块中没有错误发生，在块中就会正常执行操作。当程序流到达try块末
尾后，如果存在一个finally块，程序流就会自动进入finally块（第（5）步）。但如果在try
块中程序流检测到一个错误，程序流就会跳转到catch块（第（3）步）。
（3）在catch块中处理错误。
（4）在catch块执行完后，如果存在一个finally块，程序流就会自动进入finally块：
（5）执行finally块（如果存在）。
用于完成这些任务的C#语法如下所示：
    try
    {
      // code for normal execution
    }
    catch
    {
      // error handling
    }
    finally
    {
      // clean up
    }
实际上，上面的代码还有几种变体：
● 可以省略finally块，因为它是可选的。
● 
可以提供任意多个catch块，处理不同类型的错误。但不应包含过多的catch块，以
防降低应用程序的性能。
● 可以定义过滤器，其中包含的catch块仅在过滤器匹配时，捕获特定块中的异常。
● 
可以省略catch块——此时，该语法不是标识异常，而是一种确保程序流在离开try
块后执行finally块中的代码的方式。如果在try块中有几个出口点，这很有用。
这看起来很不错，实际上是有问题的。如果运行try块中的代码，则程序流如何在错
误发生时切换到catch块？如果检测到一个错误，代码就执行一定的操作，称为“抛出一个
异常”；换言之，它实例化一个异常对象类，并抛出这个异常：
    throw new OverflowException();
这里实例化了OverflowException类的一个异常对象。只要应用程序在try块中遇到一条
throw语句，就会立即查找与这个try块对应的catch块。如果有多个与try块对应的catch块，
应用程序就会查找与catch块对应的异常类，确定正确的catch块。例如，当抛出一个
OverflowException异常对象时，执行的程序流就会跳转到下面的catch块：
    catch (OverflowException ex)
    {
      // exception handling here
    }
换言之，应用程序查找的catch块应表示同一个类（或基类）中匹配的异常类实例。
有了这些额外的信息，就可以扩展刚才介绍的try块。为了讨论方便，假定可能在try
块中发生两个严重错误：溢出和数组超出范围。假定代码包含两个布尔变量Overflow和
OutOfBounds，它们分别表示这两种错误情况是否存在。我们知道，存在表示溢出的预定
义溢出异常类Overflow-Exception；同样，存在预定义的IndexOutOfRangeException异常
类，用于处理超出范围的数组。
现在，try块如下所示：
    try
    {
      // code for normal execution
      if (Overflow == true)
      {
        throw new OverflowException();
      }
      // more processing
      if (OutOfBounds == true)
      {
        throw new IndexOutOfRangeException();
      }
      // otherwise continue normal execution
    }
    catch (OverflowException ex)
    {
      // error handling for the overflow error condition
    }
    catch (IndexOutOfRangeException ex)
    {
      // error handling for the index out of range error condition
    }
    finally
    {
      // clean up
    }
这是因为throw语句可以嵌套在try块的几个方法调用中，甚至在程序流进入其他方法
时，也会继续执行同一个try块。如果应用程序遇到一条throw语句，就会立即退出栈上所
有的方法调用，查找try块的结尾和合适的catch块的开头，此时，中间方法调用中的所有
局部变量都会超出作用域。try…catch结构最适合于本节开头描述的场合：错误发生在一
个方法调用中，而该方法调用可能嵌套了15或20级，这些处理操作会立即停止。
从上面的论述可以看出，try块在控制执行的程序流上有重要的作用。但是，异常是
用于处理异常情况的，这是其名称的由来。不应该用异常来控制退出do…while循环的时
间。
14.3.1 实现多个catch块
要了解try…catch…finally块是如何工作的，最简单的方式是用两个示例来说明。第一
个示例是SimpleExceptions。它多次要求用户输入一个数字，然后显示这个数字。为了便
于解释这个示例，假定该数字必须在0～5之间，否则程序就不能对该数字进行正确的处
理。所以，如果用户输入超出该范围的数字，程序就抛出一个异常。程序会继续要求用户
输入更多数字，直到用户不再输入任何内容，按回车键为止。
  注意： 这段代码没有说明何时使用异常处理，但是它显示了使用异常处理的
好方法。顾名思义，异常用于处理异常情况。用户经常输入一些无聊的东西，所以这
种情况不会真正发生。正常情况下，程序会处理不正确的用户输入，方法是进行即时
检查，如果有问题，就要求用户重新输入。但是，在一个要求几分钟内读懂的小示例
中生成异常是比较困难的，为了描述异常是如何工作的，后面将使用更真实的示例。
SimpleExceptions的示例代码使用如下依赖项和名称空间：
依赖项：
    NETStandard.Library
名称空间：
    System
    static System.Console
SimpleExceptions的代码如下所示（代码文件SimpleExceptions/Program.cs）：
    using System;
    using static System.Console;
    namespace Wrox.ProCSharp.ErrorsAndExceptions
    {
      public class Program
      {
        public static void Main()
        {
          while (true)
          {
          try
          {
            string userInput;
            Write("Input a number between 0 and 5 " +
                "(or just hit return to exit)> ");
            userInput = ReadLine();
            if (string.IsNullOrEmpty(userInput))
            {
              break;
            }
            int index = Convert.ToInt32(userInput);
            if (index  5)
            {
              throw new IndexOutOfRangeException($"You typed in {userInput}");
            }
            WriteLine($"Your number was {index}");
          }