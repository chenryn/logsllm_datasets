            }()
其中c是外部变量，它在调用时会以参数形式传入(newproc请见后文协程部分)：
而在io/pipe.go中的如下代码：
    func (p *pipe) CloseRead(err error) error {
        if err == nil {
            err = ErrClosedPipe
        }
        p.rerr.Store(err)
        p.once.Do(func() { close(p.done) })
        return nil
    }
其中p是外部变量，它在调用时是将其存入外部寄存器(rdx)传入的：
可见在使用到外部变量时它们会作为引用被传入并使用。
#### 4.方法
Go可以为任意自定义类型绑定方法，方法将会被转换为普通函数，并且将方法的接收者转化为第一个参数，再看看上文结构体处的图：
如上可见Context含44个导出方法，3个未导出方法，位置已经被计算出在0xcdbaa8，因此可转到方法定义数组：
如上可见，首先是可导出方法，它们按照名称升序排序，之后是未导出方法，它们也是按名称升序排序，另外导出方法有完整的函数签名，而未导出方法只有函数名称。在逆向时不必关心这一部分结构，解析工具会自动将对应的函数调用重命名，此处仅了解即可。
在逆向时工具会将其解析为类型名__方法名或类型名_方法名，因此遇到此类名称时我们需要注意它的第一个参数是隐含参数，类似C++的this指针，但Go的方法定义不仅支持传引用，也支持传值，因此第一个参数可能在汇编层面不只占一个机器字，如：
    type Person struct {
        name   string
        age    int
        weight uint16
        height uint16
    }
    func (p Person) Print() {
        fmt.Printf("%t\n", p)
    }
    func (p *Person) PPrint() {
        fmt.Printf("%t\n", p)
    }
    func main(){
        lihua := Person{
            name:   "lihua",
            age:    18,
            weight: 60,
            height: 160,
        }
        lihua.Print()
        lihua.PPrint()
    }
编译后如下所示：
根据定义两个方法都没有参数，但是从汇编看它们都有参数，如注释，在逆向时是更常见的是像PPrint这种方法，即第一个参数是对象的指针。
#### 5.函数反射
函数在普通使用和反射使用时，被保存的信息不相同，普通使用不需要保存函数签名，而反射会保存，更利于分析，如下代码：
    //go:noinline
    func Func1(b string, a int) bool {
      return a 
  2. 
  3. 
  4. 
  5. 
  6. 
* * *