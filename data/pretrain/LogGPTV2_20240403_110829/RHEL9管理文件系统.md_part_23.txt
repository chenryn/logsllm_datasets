-   [如何列出永久命名属性，如
    UUID](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/managing_file_systems/index#proc_listing-persistent-naming-attributes_assembly_overview-of-persistent-naming-attributes){.link}。
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#listing-currently-mounted-file-systems_assembly_mounting-file-systems}列出当前挂载的文件系统 {.title}
:::
这个流程描述了如何在命令行上列出所有当前挂载的文件系统。
::: itemizedlist
**流程**
-   要列出所有挂载的文件系统，请使用 `findmnt`{.literal} 工具：
    ``` screen
    $ findmnt
    ```
-   要将列出的文件系统限制为特定的文件系统类型，请添加
    `--types`{.literal} 选项：
    ``` screen
    $ findmnt --types fs-type
    ```
    例如：
    ::: example
    []{#assembly_mounting-file-systems_managing-file-systems.html#idm139895484914224}
    **例 28.1. 只列出 XFS 文件系统**
    ::: example-contents
    ``` screen
    $ findmnt --types xfs
    TARGET  SOURCE                                                FSTYPE OPTIONS
    /       /dev/mapper/luks-5564ed00-6aac-4406-bfb4-c59bf5de48b5 xfs    rw,relatime
    ├─/boot /dev/sda1                                             xfs    rw,relatime
    └─/home /dev/mapper/luks-9d185660-7537-414d-b727-d92ea036051e xfs    rw,relatime
    ```
    :::
    :::
:::
::: itemizedlist
**其他资源**
-   `findmnt(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#mounting-a-file-system-with-mount_assembly_mounting-file-systems}使用 mount 挂载文件系统 {.title}
:::
这个流程描述了如何使用 `mount`{.literal} 工具挂载文件系统。
::: itemizedlist
**先决条件**
-   确定在您选择的挂载点上还没有挂载文件系统：
    ``` screen
    $ findmnt mount-point
    ```
:::
::: orderedlist
**流程**
1.  要附加某个文件系统，请使用 `mount`{.literal} 工具：
    ``` screen
    # mount device mount-point
    ```
    ::: example
    []{#assembly_mounting-file-systems_managing-file-systems.html#idm139895603475888}
    **例 28.2. 挂载 XFS 文件系统**
    ::: example-contents
    例如：要挂载由 UUID 识别的本地 XFS 文件系统：
    ``` screen
    # mount UUID=ea74bbec-536d-490c-b8d9-5b40bbd7545b /mnt/data
    ```
    :::
    :::
2.  如果 `mount`{.literal} 无法自动识别文件系统类型，请使用
    `--types`{.literal} 选项来指定：
    ``` screen
    # mount --types type device mount-point
    ```
    ::: example
    []{#assembly_mounting-file-systems_managing-file-systems.html#idm139895476814672}
    **例 28.3. 挂载 NFS 文件系统**
    ::: example-contents
    例如：要挂载远程 NFS 文件系统：
    ``` screen
    # mount --types nfs4 host:/remote-export /mnt/nfs
    ```
    :::
    :::
:::
::: itemizedlist
**其他资源**
-   `mount(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#moving-a-mount-point_assembly_mounting-file-systems}移动挂载点 {.title}
:::
这个步骤描述了如何将挂载的文件系统挂载点更改为不同的目录。
::: orderedlist
**流程**
1.  要更改挂载文件系统的目录：
    ``` screen
    # mount --move old-directory new-directory
    ```
    ::: example
    []{#assembly_mounting-file-systems_managing-file-systems.html#idm139895608158528}
    **例 28.4. 移动本地文件系统**
    ::: example-contents
    例如，将挂载在 `/mnt/userdirs/`{.literal} 目录的文件系统移动到
    `/home/`{.literal} 挂载点：
    ``` screen
    # mount --move /mnt/userdirs /home
    ```
    :::
    :::
2.  验证文件系统是否已如预期移动：
    ``` screen
    $ findmnt
    $ ls old-directory
    $ ls new-directory
    ```
:::
::: itemizedlist
**其他资源**
-   `mount(8)`{.literal} 手册页
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#unmounting-a-file-system-with-umount_assembly_mounting-file-systems}使用 umount 卸载文件系统 {.title}
:::
这个流程描述了如何使用 `umount`{.literal} 工具卸载文件系统。
::: orderedlist
**流程**
1.  使用以下命令之一卸载文件系统：
    ::: itemizedlist
    -   通过挂载点：
        ``` screen
        # umount mount-point
        ```
    -   通过设备：
        ``` screen
        # umount device
        ```
    :::
    如果命令失败并显示类似如下的错误，这意味着文件系统正在使用，因为进程正在使用其上的资源：
    ``` screen
    umount: /run/media/user/FlashDrive: target is busy.
    ```
2.  如果文件系统正在使用，请使用 `fuser`{.literal}
    工具来确定哪个进程正在访问它。例如：
    ``` screen
    $ fuser --mount /run/media/user/FlashDrive
    /run/media/user/FlashDrive: 18351
    ```
    之后，终止正在使用文件系统的进程，并尝试再次卸载它。
:::
:::
::: section
::: titlepage
# []{#assembly_mounting-file-systems_managing-file-systems.html#common-mount-options_assembly_mounting-file-systems}常用挂载选项 {.title}
:::
这部分列出了 `mount`{.literal} 工具的一些常用选项。
您可以按以下语法使用这些选项：
``` screen
# mount --options option1,option2,option3 device mount-point
```
::: table
[]{#assembly_mounting-file-systems_managing-file-systems.html#idm139895594749280}
**表 28.1. 常用挂载选项**
::: table-contents
  选项                   描述
  ---------------------- --------------------------------------------------------------------
  `async`{.literal}      对文件系统启用异步输入和输出操作。
  `auto`{.literal}       使用 `mount -a`{.literal} 命令使文件系统被自动挂载。
  `defaults`{.literal}   为 `async,auto,dev,exec,nouser,rw,suid`{.literal} 选项提供别名。
  `exec`{.literal}       允许在特定文件系统中执行二进制文件。
  `loop`{.literal}       将镜像挂载为 loop 设备。
  `noauto`{.literal}     默认行为禁用使用 `mount -a`{.literal} 命令对文件系统进行自动挂载。
  `noexec`{.literal}     不允许在特定文件系统中执行二进制文件。
  `nouser`{.literal}     不允许普通用户（即 root 用户）挂载和卸载文件系统。
  `remount`{.literal}    如果已经挂载文件系统，则会重新挂载文件系统。
  `ro`{.literal}         仅挂载文件系统以读取。
  `rw`{.literal}         挂载文件系统以进行读和写操作。
  `user`{.literal}       允许普通用户（即 root 用户）挂载和卸载该文件系统。
:::
:::
:::
:::
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html}
::: chapter
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#sharing-a-mount-on-multiple-mount-points_managing-file-systems}第 29 章 在多个挂载点共享挂载 {.title}
:::
作为系统管理员，您可以重复挂载点以便从多个目录中访问文件系统。
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#types-of-shared-mounts_sharing-a-mount-on-multiple-mount-points}共享挂载的类型 {.title}
:::
您可以使用多种共享挂载。当您在共享挂载点挂载另一个文件系统时，这两种文件系统之间的区别就是这种情况。共享挂载使用[*共享子树*]{.emphasis}功能实现。
可用的挂载类型如下：
::: variablelist
[`private`{.literal}]{.term}
:   这个类型不接收或转发任何传播事件。
    当您在重复或者原始挂载点下挂载另一个文件系统时，不会反映在另一个文件系统中。
[`shared`{.literal}]{.term}
:   这个类型会为给定挂载点创建准确的副本。
    当挂载点被标记为 `shared`{.literal}
    挂载时，原始挂载点中的任何挂载都会反映在其中，反之亦然。
    这是根文件系统的默认挂载类型。
[`slave`{.literal}]{.term}
:   此类型会创建给定挂载点的有限重复。
    当挂载点标记为 `slave`{.literal}
    挂载时，原始挂载点中的任何挂载都会反映在该挂载点中，但
    `slave`{.literal} 挂载中的任何挂载都没有反映在其原始挂载中。
[`unbindable`{.literal}]{.term}
:   此类型可防止给定挂载点被复制。
:::
::: itemizedlist
**其他资源**
-   [Linux Weekly News 上的 [*共享子树*]{.emphasis}
    文章](https://lwn.net/Articles/159077/){.link}。
:::
:::
::: section
::: titlepage
# []{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#creating-a-private-mount-point-duplicate_sharing-a-mount-on-multiple-mount-points}创建私有挂载点副本 {.title}
:::
这个流程将挂载点复制为私有挂载。您稍后挂载到复制或原始挂载点下的文件系统不会反映在另一个文件系统中。
::: orderedlist
**流程**
1.  从原始挂载点创建虚拟文件系统(VFS)节点：
    ``` screen
    # mount --bind original-dir original-dir
    ```
2.  将原始挂载点标记为私有：
    ``` screen
    # mount --make-private original-dir
    ```
    或者，要更改所选挂载点以及其下的所有挂载点的挂载类型，请使用
    `--make-rprivate`{.literal} 选项，而不是 `--make-private`{.literal}
    选项。
3.  创建副本：
    ``` screen
    # mount --bind original-dir duplicate-dir
    ```
:::
::: example
[]{#sharing-a-mount-on-multiple-mount-points_managing-file-systems.html#idm139895605456528}
**例 29.1. 将 /media 复制到 /mnt 作为专用挂载点**
::: example-contents
::: orderedlist
1.  从 `/media`{.literal} 目录创建 VFS 节点：
    ``` screen
    # mount --bind /media /media
    ```
2.  将 `/media`{.literal} 目录标记为私有：
    ``` screen
    # mount --make-private /media
    ```
3.  在 `/mnt`{.literal} 中创建副本：