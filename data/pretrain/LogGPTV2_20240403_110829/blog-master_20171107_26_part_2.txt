TIMES=300    
export PGHOST=$PGDATA    
export PGPORT=1999    
export PGUSER=postgres    
export PGPASSWORD=postgres    
export PGDATABASE=postgres    
pgbench -M prepared -n -r -f ./test.sql -P 5 -c $CONNECTS -j $CONNECTS -T $TIMES    
```    
### 7、测试    
1、```in (...)```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能   
```  
do language plpgsql $$  
declare  
  arr text;  
  ts timestamp := clock_timestamp();  
  mx int8;  
begin  
  for i in 0..6 loop  
    mx := (1*(10^i))::int8;  
    select string_agg((random()*100000)::int::text, ',') into arr from generate_series(1, mx);  
    ts := clock_timestamp();  
    execute 'select * from t_in_test where id in ('||arr||')';  
    raise notice '%: %', mx, clock_timestamp()-ts;  
  end loop;  
end;  
$$ ;  
```  
```  
NOTICE:  1: 00:00:00.000256  
NOTICE:  10: 00:00:00.000173  
NOTICE:  100: 00:00:00.000772  
NOTICE:  1000: 00:00:00.004445  
NOTICE:  10000: 00:00:00.024073  
NOTICE:  100000: 00:00:00.195439  
NOTICE:  1000000: 00:00:01.638982  
DO  
```  
2、```in (table or subquery or srf)```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能   
```  
do language plpgsql $$  
declare  
  arr text;  
  ts timestamp := clock_timestamp();  
  mx int8;  
begin  
  for i in 0..6 loop  
    mx := (1*(10^i))::int8;  
    ts := clock_timestamp();  
    perform * from t_in_test where id in ( select (random()*100000)::int from generate_series(1, mx) );  
    raise notice '%: %', mx, clock_timestamp()-ts;  
  end loop;  
end;  
$$ ;  
```  
```  
NOTICE:  1: 00:00:00.00044  
NOTICE:  10: 00:00:00.000244  
NOTICE:  100: 00:00:00.000788  
NOTICE:  1000: 00:00:00.004455  
NOTICE:  10000: 00:00:00.028793  
NOTICE:  100000: 00:00:00.187841  
NOTICE:  1000000: 00:00:00.583744  
DO  
```  
3、```= any (array)```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能   
```  
do language plpgsql $$  
declare  
  arr int[];  
  ts timestamp := clock_timestamp();  
  mx int8;  
begin  
  for i in 0..6 loop  
    mx := (1*(10^i))::int8;  
    select array_agg((random()*100000)::int) into arr from generate_series(1, mx);  
    ts := clock_timestamp();  
    perform * from t_in_test where id = any ( arr );  
    raise notice '%: %', mx, clock_timestamp()-ts;  
  end loop;  
end;  
$$ ;  
```  
```  
NOTICE:  1: 00:00:00.000216  
NOTICE:  10: 00:00:00.000151  
NOTICE:  100: 00:00:00.000654  
NOTICE:  1000: 00:00:00.00399  
NOTICE:  10000: 00:00:00.021216  
NOTICE:  100000: 00:00:00.106335  
NOTICE:  1000000: 00:00:00.386113  
DO  
```  
4、```exists (select 1 from (values (),(),...) as t(id) where x.?=t.id)```  
1,10,100,1000,10000,100000,1000000 个输入值的测试性能   
```  
do language plpgsql $$  
declare  
  ts timestamp := clock_timestamp();  
  mx int8;  
begin  
  for i in 0..6 loop  
    mx := (1*(10^i))::int8;  
    ts := clock_timestamp();  
    perform * from t_in_test where exists ( select 1 from ( select (random()*100000)::int id from generate_series(1,mx) ) t where t_in_test.id=t.id );  
    raise notice '%: %', mx, clock_timestamp()-ts;  
  end loop;  
end;  
$$ ;  
```  
```  
NOTICE:  1: 00:00:00.000458
NOTICE:  10: 00:00:00.000224
NOTICE:  100: 00:00:00.000687
NOTICE:  1000: 00:00:00.003916
NOTICE:  10000: 00:00:00.02734
NOTICE:  100000: 00:00:00.187671
NOTICE:  1000000: 00:00:00.570389
DO
```  
5、匹配1 ~ 100个输入值，求聚合。高并发。  
```  
transaction type: ./test.sql  
scaling factor: 1  
query mode: prepared  
number of clients: 56  
number of threads: 56  
duration: 300 s  
number of transactions actually processed: 13913566  
latency average = 1.207 ms  
latency stddev = 0.840 ms  
tps = 46378.142149 (including connections establishing)  
tps = 46384.723274 (excluding connections establishing)  
script statistics:  
 - statement latencies in milliseconds:  
         0.002  \set x random(1,100)  
         1.207  select count(*) from t_in_test where id = any(array(select (random()*100000000)::int from generate_series(1,:x)));  
```  
#### TPS： 46384    
5、匹配1 ~ 100个输入值，求聚合。高并发。  
#### 平均响应时间： 1.207 毫秒    
5、匹配1 ~ 100个输入值，求聚合。高并发。  
### 1到100万个输入值的响应时间  
1亿条记录，匹配100万个输入值( ```= any (array)``` )，只需要386毫秒。     
```  
NOTICE:  1: 00:00:00.000216  
NOTICE:  10: 00:00:00.000151  
NOTICE:  100: 00:00:00.000654  
NOTICE:  1000: 00:00:00.00399  
NOTICE:  10000: 00:00:00.021216  
NOTICE:  100000: 00:00:00.106335  
NOTICE:  1000000: 00:00:00.386113  
```  
## 参考    
[《PostgreSQL、Greenplum 应用案例宝典《如来神掌》 - 目录》](../201706/20170601_02.md)    
[《数据库选型之 - 大象十八摸 - 致 架构师、开发者》](../201702/20170209_01.md)    
[《PostgreSQL 使用 pgbench 测试 sysbench 相关case》](../201610/20161031_02.md)    
[《数据库界的华山论剑 tpc.org》](../201701/20170125_01.md)    
https://www.postgresql.org/docs/10/static/pgbench.html    
[《PostgreSQL 与关系代数 (Equi-Join , Semi-Join , Anti-Join , Division)》](../201802/20180205_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")