*   官方日志打印映像:https://hub . docker . com/r/gliderbs/logs 打印输出/
*   Logspout 项目页面:[https://github.com/gliderlabs/logspout](https://github.com/gliderlabs/logspout)
*   logspout logstash 模块:https://github . com/looplab/logpout-logtash
*   Docker 1.6 发行说明:[https://blog.docker.com/2015/04/docker-release-1-6/](https://blog.docker.com/2015/04/docker-release-1-6/)
*   Docker 日志驱动程序:[https://docs.docker.com/reference/logging/overview/](https://docs.docker.com/reference/logging/overview/)
## 查看日志
现在，我们的 ELK 已经开始运行，并且有一个机制可以将容器生成的所有 T0 和 T1 消息流式传输到 Logstash，Logstash 再将数据路由到 Elasticsearch。现在是时候查看基巴纳的日志了。要访问基巴纳，请在浏览器中访问 T2；当你进入页面时，你会被要求**配置一个索引模式**，默认的索引模式对于我们的需求来说是可以的，所以只需点击**创建**按钮。
一旦您这样做了，您将看到一个索引模式列表，这些模式直接取自 Logspout 输出，您应该注意到索引中的以下项目:
*   `docker.name`:容器的名称
*   `docker.id`:满箱标识
*   `docker.image`:用于启动映像的映像名称
从这里，如果您点击顶部菜单中的**发现**，您将看到类似于以下页面的内容:
![Reviewing the logs](img/00062.jpeg)
在截图中，你会看到我最近推出了 WordPress 栈，我们在整本书中都在使用它，使用了以下命令:
```
[vagrant@docker elk]$ cd /monitoring_docker/chapter05/wordpress/
[vagrant@docker wordpress]$ docker-compose up –d
```
为了让您了解正在记录的内容，下面是运行 WordPress 安装脚本时从 Elasticseach 获取的原始 JSON:
```
{
  "_index": "logstash-2015.10.11",
  "_type": "logs",
  "_id": "AVBW8ewRnBVdqUV1XVOj",
  "_score": null,
  "_source": {
    "message": "172.17.0.11 - - [11/Oct/2015:12:48:26 +0000] \"POST /wp-admin/install.php?step=1 HTTP/1.1\" 200 2472 \"http://192.168.33.10/wp-admin/install.php\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11) AppleWebKit/601.1.56 (KHTML, like Gecko) Version/9.0 Safari/601.1.56\"",
    "docker.name": "/wordpress_wordpress1_1",
    "docker.id": "0ba42876867f738b9da0b9e3adbb1f0f8044b7385ce9b3a8a3b9ec60d9f5436c",
    "docker.image": "wordpress",
    "docker.hostname": "0ba42876867f",
    "@version": "1",
    "@timestamp": "2015-10-11T12:48:26.641Z",
    "host": "172.17.0.4"
  },
  "fields": {
    "@timestamp": [
      1444567706641
    ]
  },
  "sort": [
    1444567706641
  ]
}
```
从这里，你可以开始使用免费的文本搜索框并建立一些相当复杂的查询来深入到你的容器的`STDOUT`和`STDERR`日志中。
## 生产呢？
正如本节顶部提到的，您可能不想使用本章附带的`docker-compose`文件来运行您的生产 ELK 栈。首先，您希望您的弹性搜索数据存储在持久卷上，并且您非常希望您的日志存储服务高度可用。
有许多关于如何配置高可用性 ELK 栈的指南，以及弹性搜索的创建者弹性公司的托管服务，还有亚马逊网络服务，它提供弹性搜索服务:
*   ELK 教程:[https://www . YouTube . com/watch？v = ge 8 uhfb 1m](https://www.youtube.com/watch?v=ge8uHdmtb1M)
*   从 Elastic 找到:[https://www.elastic.co/found](https://www.elastic.co/found)
*   亚马逊弹性搜索服务:[https://aws.amazon.com/elasticsearch-service/](https://aws.amazon.com/elasticsearch-service/)
# 查看第三方选项
在自己的服务器实例外部托管容器的中央日志记录时，有几个选项。其中一些是:
*   日志条目:[https://logentries.com/](https://logentries.com/)
*   loggly:[https://www.loggly.com/](https://www.loggly.com/)
这两种服务都提供免费等级。日志条目还提供了一个“日志条目目录免费”帐户，您可以在[https://logentries.com/docker/](https://logentries.com/docker/)找到更多关于该帐户的信息
### 注
正如*探索第三方选项*一章所建议的，在评估第三方服务时，最好使用云服务。本章的其余部分假设您正在运行云主机。
让我们看看在外部服务器上配置日志条目，首先你需要在[https://logentries.com/](https://logentries.com/)注册一个账户。一旦你注册了，你应该被带到一个页面，在那里你的日志最终会被显示出来。
首先，点击页面右上角的**添加新日志**按钮，然后点击**平台**部分的 Docker 标志。
您必须在**选择集**部分命名您的日志集，因此请为您的日志集命名。您现在可以选择使用来自[https://github.com/logentries/docker-logentries](https://github.com/logentries/docker-logentries)的 Docker 文件在本地构建自己的容器:
```
git clone https://github.com/logentries/docker-logentries.git
cd docker-logentries
docker build -t docker-logentries .
```
运行上述命令后，您将获得以下输出:
![Looking at third party options](img/00063.jpeg)
在开始您的容器之前，您需要通过点击**生成日志令牌**来为您的日志集生成一个访问令牌。完成后，您可以使用以下命令启动本地构建的容器(用刚刚生成的令牌替换令牌):
```
docker run -d -v /var/run/docker.sock:/var/run/docker.sock docker-logentries -t wn5AYlh-jRhgn3shc-jW14y3yO-T09WsF7d -j
```
您可以通过运行以下命令直接从 Docker 集线器下载该映像:
```
docker run -d -v /var/run/docker.sock:/var/run/docker.sock logentries/docker-logentries -t wn5AYlh-jRhgn3shc-jW14y3yO-T09WsF7d –j
```
值得指出的是，日志条目给出的自动生成的指令在前台启动容器，而不是像前面的指令一样一旦启动就从容器中分离。
一旦`docker-logentries`容器启动并运行，您应该开始看到日志从您的容器实时流至您的仪表板:
![Looking at third party options](img/00064.jpeg)
从这里，您将能够查询您的日志，创建仪表板，并根据您选择的帐户选项创建警报。
# 总结
在本章中，我们已经介绍了如何使用 Docker 内置的工具查询容器的`STDOUT`和`STDERR`输出，如何将消息发送到外部源，我们的 ELK 栈，以及如何在容器终止后存储消息。最后，我们看了一些提供服务的第三方服务，您可以将日志流式传输到这些服务。
那么为什么要这么努力呢？监控不仅仅是保存和查询中央处理器、内存、硬盘和网络利用率指标；如果您没有访问日志文件的权限来查看当时是否产生了任何错误，那么了解一小时前是否出现了 CPU 峰值是没有意义的。
我们在本章中介绍的服务能够最快速、最高效地洞察到什么会迅速成为复杂的数据集。
在下一章中，我们将查看本书中涵盖的所有服务和概念，并将它们应用到一些真实世界的场景中。