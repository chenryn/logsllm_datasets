### References

1. IACR Cryptology ePrint Archive 2014 (2014).

2. Ducas, L., Durmus, A., Lepoint, T., and Lyubashevsky, V. Lattice signatures and bimodal gaussians. In *CRYPTO* (2013).

3. Ezerman, M. F., Lee, H. T., Ling, S., Nguyen, K., and Wang, H. A provably secure group signature scheme from code-based assumptions. In *Advances in Cryptology - ASIACRYPT* (2015), pp. 260–285.

4. Faugère, J., Gauthier-Umaña, V., Otmani, A., Perret, L., and Tillich, J. A distinguisher for high-rate McEliece cryptosystems. *IEEE Trans. Information Theory* 59, 10 (2013), 6830–6844.

5. De Feo, L., Jao, D., and Plût, J. Towards quantum-resistant cryptosystems from supersingular elliptic curve isogenies. *J. Mathematical Cryptology* 8, 3 (2014), 209–247.

6. Fiat, A., and Shamir, A. How to prove yourself: Practical solutions to identification and signature problems. In *CRYPTO* (1986), pp. 186–194.

7. Galbraith, S. D., Petit, C., and Silva, J. Signature schemes based on supersingular isogeny problems. IACR Cryptology ePrint Archive 2016 (2016), 1154.

8. Gennaro, R., Gentry, C., Parno, B., and Raykova, M. Quadratic span programs and succinct NIZKs without PCPs. In *EUROCRYPT* (2013).

9. Gentry, C., Peikert, C., and Vaikuntanathan, V. Trapdoors for hard lattices and new cryptographic constructions. In *STOC* (2008).

10. Giacomelli, I., Madsen, J., and Orlandi, C. ZKBoo: Faster zero-knowledge for boolean circuits. *Cryptology ePrint Archive*, Report 2016/163, 2016. [http://eprint.iacr.org/2016/163](http://eprint.iacr.org/2016/163)

11. Goldfeder, S., Chase, M., and Zaverucha, G. Efficient post-quantum zero-knowledge and signatures. *Cryptology ePrint Archive*, Report 2016/1110, 2016. [http://eprint.iacr.org/2016/1110](http://eprint.iacr.org/2016/1110)

12. Goldreich, O. Two remarks concerning the Goldwasser-Micali-Rivest signature scheme. In *CRYPTO* (1986).

13. Goldreich, O., Micali, S., and Wigderson, A. How to prove all NP-statements in zero-knowledge, and a methodology of cryptographic protocol design. In *CRYPTO* (1986).

14. Goldwasser, S., Micali, S., and Rackoff, C. The knowledge complexity of interactive proof-systems (extended abstract). In *STOC* (1985).

15. Grosso, V., Leurent, G., Standaert, F., and Varıcı, K. LS-designs: Bitslice encryption for efficient masked software implementations. In *FSE* (2014).

16. Groth, J., and Sahai, A. Efficient non-interactive proof systems for bilinear groups. In *EUROCRYPT* (2008).

17. Grover, L. K. A fast quantum mechanical algorithm for database search. In *STOC* (1996).

18. Güneysu, T., Lyubashevsky, V., and Pöppelmann, T. Practical lattice-based cryptography: A signature scheme for embedded systems. In *CHES* (2012).

19. Hellman, M. A cryptanalytic time-memory trade-off. *IEEE transactions on Information Theory* 26, 4 (1980), 401–406.

20. Hu, Z., Mohassel, P., and Rosulek, M. Efficient zero-knowledge proofs of non-algebraic statements with sublinear amortized cost. In *CRYPTO* (2015).

21. Hülsing, A., Rijneveld, J., Samardjiska, S., and Schwabe, P. From 5-pass MQ-based identification to MQ-based signatures. In *Cryptology ePrint Archive*, Report 2016/708, to appear in Asiacrypt 2016 (2016).

22. Ishai, Y., Kushilevitz, E., Ostrovsky, R., and Sahai, A. Zero-knowledge proofs from secure multiparty computation. *SIAM Journal on Computing* 39, 3 (2009), 1121–1152.

23. Jawurek, M., Kerschbaum, F., and Orlandi, C. Zero-knowledge using garbled circuits: How to prove non-algebraic statements efficiently. In *ACM CCS* (2013).

24. Kaplan, M., Leurent, G., Leverrier, A., and Naya-Plasencia, M. Quantum differential and linear cryptanalysis. *ArXiv e-prints* (Oct. 2015).

25. Kaplan, M., Leurent, G., Leverrier, A., and Naya-Plasencia, M. Breaking symmetric cryptosystems using quantum period finding. In *CRYPTO* (2016).

26. Katz, J. *Digital Signatures*. Springer, 2010.

27. Kiltz, E., Masny, D., and Pan, J. Optimal security proofs for signatures from identification schemes. In *CRYPTO* (2016).

28. Lamport, L. Constructing digital signatures from one-way functions. Tech. Rep. SRI-CSL-98, SRI Intl. Computer Science Laboratory, 1979.

29. Landais, G., and Sendrier, N. CFS software implementation. *Cryptology ePrint Archive*, Report 2012/132, 2012.

30. Lyubashevsky, V. Fiat-Shamir with aborts: Applications to lattice and factoring-based signatures. In *ASIACRYPT* (2009).

31. Lyubashevsky, V. Lattice signatures without trapdoors. In *EUROCRYPT* (2012).

32. McEliece, R. J. A public-key cryptosystem based on algebraic coding theory. Tech. Rep. DSN PR 42-44, 1978.

33. McGrew, D. A., Kampanakis, P., Fluhrer, S. R., Gazdag, S., Butin, D., and Buchmann, J. A. State management for hash-based signatures. In *Security Standardisation Research* (2016).

34. Méaux, P., Journault, A., Standaert, F., and Carlet, C. Towards stream ciphers for efficient FHE with low-noise ciphertexts. In *EUROCRYPT* (2016).

35. Melchor, C. A., Gaborit, P., and Schrek, J. A new zero-knowledge code-based identification scheme with reduced communication. In *ITW* (2011).

36. Merkle, R. C. A certified digital signature. In *CRYPTO* (1989).

37. Niederreiter, H. Knapsack-type cryptosystems and algebraic coding theory. *Problems of Control and Information Theory* (1986).

38. Ohta, K., and Okamoto, T. On concrete security treatment of signatures derived from identification. In *CRYPTO* (1998).

39. Patarin, J., Courtois, N., and Goubin, L. Quartz, 128-bit long digital signatures. In *CT-RSA* (2001).

40. Peikert, C. A decade of lattice cryptography. *Foundations and Trends in Theoretical Computer Science* 10, 4 (2016).

41. Petzoldt, A., Chen, M., Yang, B., Tao, C., and Ding, J. Design principles for HFEv- based multivariate signature schemes. In *ASIACRYPT* (2015).

42. Pointcheval, D., and Stern, J. Security proofs for signature schemes. In *EUROCRYPT* (1996).

43. Ames, S., Hazay, C., Ishai, Y., and Venkitasubramaniam, M. Ligero: Lightweight sublinear arguments without a trusted setup. In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security* (2017), ACM.

44. Sakumoto, K., Shirai, T., and Hiwatari, H. Public-key identification schemes based on multivariate quadratic polynomials. In *CRYPTO* (2011).

45. Schnorr, C. Efficient signature generation by smart cards. *J. Cryptology* 4, 3 (1991).

46. Shor, P. W. Polynomial-time algorithms for discrete logarithms and factoring on a quantum computer. In *ANTS-I* (1994).

47. Stern, J. A new identification scheme based on syndrome decoding. In *CRYPTO* (1993).

48. Unruh, D. Quantum proofs of knowledge. In *EUROCRYPT 2012* (Apr. 2012), D. Pointcheval and T. Johansson, Eds., vol. 7237 of LNCS, Springer, Heidelberg, pp. 135–152.

49. Unruh, D. Non-interactive zero-knowledge proofs in the quantum random oracle model. In *EUROCRYPT 2015, Part II* (Apr. 2015), E. Oswald and M. Fischlin, Eds., vol. 9057 of LNCS, Springer, Heidelberg, pp. 755–784.

50. Unruh, D. Computationally binding quantum commitments. In *EUROCRYPT* (2016).

51. Véron, P. Improved identification schemes based on error-correcting codes. *Appl. Algebra Eng. Commun. Comput.* 8, 1 (1996).

52. Yoo, Y., Azarderakhsh, R., Jalali, A., Jao, D., and Soukharev, V. A post-quantum digital signature scheme based on supersingular isogenies. *Cryptology ePrint Archive*, Report 2017/186, 2017. [http://eprint.iacr.org/2017/186](http://eprint.iacr.org/2017/186)

### Additional Material on ZKBoo

**A.1 (2,3)-Decomposition**

We define the experiment \(\text{EXP}_{\text{decomp}}^{(\phi, x)}\) in Scheme 4, which runs the decomposition over a circuit \(\phi\) on input \(x\). We say that \(D\) is a (2, 3)-decomposition of \(\phi\) if the following two properties hold when running \(\text{EXP}_{\text{decomp}}^{(\phi, x)}\):

- **(Correctness)** For all circuits \(\phi\), for all inputs \(x\) and for the \(y_i\)'s produced by \(\text{EXP}_{\text{decomp}}^{(\phi, x)}\):
  \[
  \Pr[\phi(x) = \text{Reconstruct}(y_1, y_2, y_3)] = 1
  \]

- **(2-Privacy)** Let \(D\) be correct. Then for all \(e \in \{1, 2, 3\}\) there exists a PPT simulator \(S_e\) such that for any probabilistic polynomial-time (PPT) algorithm \(A\), for all circuits \(\phi\), for all inputs \(x\), and for the distribution of views and \(k_i\)'s produced by \(\text{EXP}_{\text{decomp}}^{(\phi, x)}\), we have that:
  \[
  \left| \Pr[A(x, y, k_e, \text{View}_e, k_{e+1}, \text{View}_{e+1}, y_{e+2}) = 1] - \Pr[A(x, y, S_e(\phi, y)) = 1] \right|
  \]
  is negligible.

**A.2 Linear Decomposition of a Circuit**

ZKBoo uses an explicit (2,3)-decomposition, which we recall here. Let \(R\) be an arbitrary finite ring and \(\phi\) a function such that \(\phi : R^m \to R^\ell\) can be expressed by an \(n\)-gate arithmetic circuit over the ring using addition by constant, multiplication by constant, binary addition, and binary multiplication gates. A (2, 3)-decomposition of \(\phi\) is given by the following functions. In the notation below, arithmetic operations are done in \(R_s\) where the operands are elements of \(R_s\):

- \((x_1, x_2, x_3) \leftarrow \text{Share}(x, k_1, k_2, k_3)\) samples random \(x_1, x_2, x_3 \in R^m\) such that \(x_1 + x_2 + x_3 = x\).
- \(y_i \leftarrow \text{Output}_i(\text{view}^{(n)})\) selects the \(\ell\) output wires of the circuit as stored in the view \(\text{view}^{(n)}\).
- \(y \leftarrow \text{Reconstruct}(y_1, y_2, y_3) = y_1 + y_2 + y_3\).
- \(\text{view}^{(j+1)}_i \leftarrow \text{Update}(\text{view}^{(j)}_i, \text{view}^{(j)}_{i+1}, k_i, k_{i+1})\) computes party \(P_i\)'s view of the output wire of gate \(g_j\) and appends it to the view. Notice that it takes as input the views and random tapes of both party \(P_i\) as well as party \(P_{i+1}\). We use \(w_k\) to refer to the \(k\)-th wire, and we use \(w_k^{(i)}\) to refer to the value of \(w_k\) in party \(P_i\)'s view. The update operation depends on the type of gate \(g_j\).

The gate-specific operations are defined as follows:

- **Addition by Constant** (\(w_b = w_a + k\)):
  \[
  w_b^{(i)} = 
  \begin{cases} 
   w_a^{(i)} + k & \text{if } i = 1, \\
   w_a^{(i)} & \text{otherwise}.
  \end{cases}
  \]

- **Multiplication by Constant** (\(w_b = w_a \cdot k\)):
  \[
  w_b^{(i)} = k \cdot w_a^{(i)}
  \]

- **Binary Addition** (\(w_c = w_a + w_b\)):
  \[
  w_c^{(i)} = w_a^{(i)} + w_b^{(i)}
  \]

- **Binary Multiplication** (\(w_c = w_a \cdot w_b\)):
  \[
  w_c^{(i+1)} = w_a^{(i)} \cdot w_b^{(i)} + w_a^{(i+1)} \cdot w_b^{(i)} + w_a^{(i)} \cdot w_b^{(i+1)} + R_i(c) - R_{i+1}(c),
  \]
  where \(R_i(c)\) is the \(c\)-th output of a pseudorandom generator seeded with \(k_i\).

Note that with the exception of the constant addition gate, the gates are symmetric for all players. Also note that \(P_i\) can compute all gate types locally with the exception of binary multiplication gates, as this requires inputs from \(P_{i+1}\). In other words, for every operation except binary multiplication, the Update function does not use the inputs from the second party, i.e., \(\text{view}^{(j)}_{i+1}\) and \(k_{i+1}\).

While we do not give the details here, [45] shows that this decomposition meets the correctness and 2-privacy requirements of Definition 3.1.

### Description of LowMC

LowMC by Albrecht et al. [4, 6] is a highly parameterizable symmetric encryption scheme design enabling instantiation with low AND depth and low multiplicative complexity. Given any block size, a choice for the number of S-boxes per round, and security expectations in terms of time and data complexity, instantiations can be created minimizing the AND depth, the number of ANDs, or the number of ANDs per encrypted bit. Table 2 lists the choices for the parameters which are also highlighted in the figures.

The description of LowMC is possible independently of the choice of parameters using a partial specification of the S-box and arithmetic in vector spaces over \(\mathbb{F}_2\). In particular, let \(n\) be the block size, \(m\) be the number of S-boxes, \(k\) the key size, and \(r\) the number of rounds. We choose round constants \(C_i \leftarrow_R \mathbb{F}_2^n\) for \(i \in [1, r]\), full rank matrices \(K_i \leftarrow_R \mathbb{F}_2^{n \times k}\), and regular matrices \(L_i \leftarrow_R \mathbb{F}_2^{n \times n}\) independently during the instance generation and keep them fixed. Keys for LowMC are generated by sampling from \(\mathbb{F}_2^k\) uniformly at random.

LowMC encryption starts with key whitening, which is followed by several rounds of encryption. A single round of LowMC is composed of an S-box layer, a linear layer, addition with constants, and addition of the round key, i.e.,

\[
\text{LowMC\_Round}(i) = \text{KeyAddition}(i) \circ \text{ConstantAddition}(i) \circ \text{LinearLayer}(i) \circ \text{SboxLayer}.
\]

- **SboxLayer** is an \(m\)-fold parallel application of the same 3-bit S-box on the first \(3 \cdot m\) bits of the state. The S-box is defined as:
  \[
  S(a, b, c) = (a \oplus bc, a \oplus b \oplus ac, a \oplus b \oplus c \oplus ab).
  \]

- **LinearLayer(i)** multiplies the state with the linear layer matrix \(L_i\).
- **ConstantAddition(i)** adds the round constant \(C_i\) to the state.
- **KeyAddition(i)** adds the round key \(K_i\) to the state.

### Output Share \(y_i\)
- **Commit** \([C^{(i)}]\)