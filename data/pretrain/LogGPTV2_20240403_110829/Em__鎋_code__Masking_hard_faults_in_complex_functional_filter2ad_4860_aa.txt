# Title: Emμcode: Masking Hard Faults in Complex Functional Units

## Authors:
- Nicholas Weaver
- John H. Kelm
- Matthew I. Frank

### Abstract
This paper introduces Emμcode, a technique for masking hard faults in modern microprocessors that provides graceful performance degradation. Emμcode employs microcode traces with control flow to replace an original instruction once a fault is detected. It adds lightweight microarchitectural hardware to assist in correcting hard faults in larger structures, such as SIMD execution units found in contemporary microprocessors, where replication is infeasible. Key challenges in implementing microcode traces include maintaining proper architectural state and optimizing trace code. We are able to significantly optimize traces by exploiting dynamic trace behavior and making minor modifications to the microarchitecture. Removing hard-to-predict branches is important for optimizing traces. Emμcode uses partial predication, new microcode operations, and the full use of the microcode’s flexibility and visibility to create fast traces. This paper studies the viability of implementing SIMD floating-point arithmetic operations found in modern x86 processors using Emμcode traces. Our results show that for programs with 1% to 5% of the dynamic instructions replaced by Emμcode, a graceful performance degradation of only 1.3x to 4x is achievable.

### 1. Introduction
As process fabrication technology improves, hard faults are becoming a primary concern for computer architects. A hard fault occurs when a transistor or wire is either improperly fabricated or degrades to the point where it no longer operates correctly. Hard faults also manifest as stuck-at faults, where a transistor or node is persistently stuck at either a logical one or zero. Smaller manufacturing processes exacerbate these issues, which have already been observed. Examples of degradation include electromigration [3], negative bias temperature instability [22], and the hot-electron effect [16]. These problems become more common as process variation increases with the decrease in device sizes, leading to an increased likelihood of defects due to fabrication [4].

Moreover, hard faults are persistent and non-local. Previous work suggests many methods of correcting these hard faults. One form of graceful performance degradation involves redundancy, which already exists in processors to increase performance through parallelism, enabling execution to continue after certain units have failed [20]. Structural duplication (SD) [20] involves fabricating spare structures on the chip that can be activated when a failure is discovered. Similarly, extra pipeline stages to detect and correct errors have been studied [2]. However, not all of these techniques are useful for specialized structures like floating-point units, or for correcting instructions that require the use of the entire execution pipeline, such as small-vector SIMD on contemporary CPUs, where there is no redundancy in the architecture.

Due to the prohibitive cost in terms of area of adding spare floating-point units, we pursue an alternate approach. Emμcode is a technique presented to mask these hard faults once detected. Emμcode corrects hard faults in accelerated structures by replacing faulty instructions with microcode that uses a different pipeline. Emμcode is a graceful performance degradation (GPD) technique where hard faults are masked by executing an Emμcode trace in place of the original instruction that failed. An Emμcode trace is similar in nature to traces found in the Trace Cache architecture as presented by Rotenberg et al. [17]. For instance, floating-point Emμcode traces are microcoded versions of the original instruction that utilize only the integer pipeline, which is more easily protected by other methods such as SD.

For the purposes of this work, SSE floating-point arithmetic [21] operations are chosen as a representative set of instructions that could be protected by Emμcode. Since duplicating the SSE pipeline is prohibitive because it is large, having another method of correcting hard faults over the instructions that use the SSE pipeline is essential.

### Contact Information
- **Center for Reliable and High-Performance Computing**
- **Coordinated Science Laboratory**
- **University of Illinois at Urbana-Champaign**
- **1308 W. Main Street, Urbana, IL-61801, USA**
- **Emails: {nrweaver, jkelm2, mif}@illinois.edu**

### Copyright
978-1-4244-4421-2/09/$25.00 © 2009 IEEE

### Authorized Use
Licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 09:58:33 UTC from IEEE Xplore. Restrictions apply.