下一步包括将 Helm 维护者的公钥导入到您的本地`gpg`密钥环中。这允许您解密包含在`.asc`文件中的数字签名，以验证您下载的来源和完整性。维护者的公钥可以通过跟踪到他们的 keybase 帐户的链接来检索。将光标悬停在`keybase account`字样上即可找到该链接。在*图 9.2* 的示例中，该位置解析为[https://keybase.io/bacongobbler](https://keybase.io/bacongobbler)。然后可以通过在末尾添加`/pgp_keys.asc`来下载公钥，使[结果链接 https://keybase.io/bacongobbl](https://keybase.io/bacongobbler/pgp_keys.asc)er/PGP _ keys . ASC。
请注意，有多个 Helm 维护者，因此如果您在不同的版本上执行验证，您的链接可能会有所不同。请确保您下载的是与签署版本的密钥相对应的正确公钥。
让我们继续验证过程:
1.  使用命令行，下载 Helm 发行签名对应的公钥:
    ```
    $ curl -o **release_key.asc** https://keybase.io/bacongobbler/pgp_keys.asc
    ```
2.  Once downloaded, you need to import the public key to your gpg keyring. This is done by running the following command:
    ```
    $ gpg --import release_key.asc
    ```
    如果导入成功，您将看到以下消息:
    ```
    gpg: key 92AA783CBAAE8E3B: public key 'Matthew Fisher ' imported
    gpg: Total number processed: 1
    gpg:               imported: 1
    ```
3.  Now that the public key of the digital signature has been imported, you can verify the Helm installation's release by leveraging the `--verify` subcommand of GPG. This should be run against the `helm*.asc` file:
    ```
    $ gpg --verify helm-v3.0.0-linux-amd64.tar.gz.asc
    ```
    该命令将尝试解密包含在`.asc`文件中的数字签名。如果成功，则意味着 Helm 下载(以`.tar.gz`结尾的文件)是由您期望的人(【本版本的 T2】)签署的，并且下载没有以任何方式被修改或更改。成功的输出如下:
    ```
    gpg: assuming signed data in 'helm-v3.0.0-linux-amd64.tar.gz'
    gpg: Signature made Wed 13 Nov 2019 08:05:01 AM CST
    gpg:                using RSA key 967F8AC5E2216F9F4FD270AD92AA783CBAAE8E3B
    gpg: Good signature from 'Matthew Fisher ' [unknown]
    gpg: WARNING: This key is not certified with a trusted signature!
    gpg:          There is no indication that the signature belongs to the owner.
    Primary key fingerprint: 967F 8AC5 E221 6F9F 4FD2  70AD 92AA 783C BAAE 8E3B
    ```
进一步检查该输出时，您可能会注意到`WARNING`消息，表明密钥未通过认证，这可能会导致您质疑这是否实际成功的有效性。验证成功，但是您没有指示 gpg 维护者的公钥被证明属于他们所说的那个人。
您可以通过以下步骤执行此认证:
1.  检查输出末尾显示的主键指纹的最后 64 位(8 个字符)是否与 Helm releases 页面中显示的 64 位指纹匹配。大家可以从*图 9.2* 中回想起，显示的是指纹，如图:
    ```
    This release was signed with 92AA 783C BAAE 8E3B and **can be found** at @bacongobbler's keybase account.
    ```
2.  从前面的代码中可以看到，**主键指纹**的最后 64 位显示在 Helm releases 页面上，所以我们知道这个公钥确实属于我们期望它属于的人。因此，我们可以安全地认证维护者的公钥。这可以通过使用您自己的`gpg`密钥对公钥进行签名来实现。使用以下命令执行此步骤:
    ```
    $ gpg --sign-key 92AA783CBAAE8E3B # Last 64 bits of fingerprint
    ```
3.  In the `Really sign?` prompt, enter `y`.
    现在您已经签署了维护者的公钥，该密钥现在已经被认证。现在可以运行验证，而无需在输出中显示`WARNING`消息:
    ```
    $ gpg --verify helm-v3.0.0-linux-amd64.tar.gz.asc
    gpg: assuming signed data in 'helm-v3.0.0-linux-amd64.tar.gz'
    gpg: Signature made Wed 13 Nov 2019 08:05:01 AM CST
    gpg:                using RSA key 967F8AC5E2216F9F4FD270AD92AA783CBAAE8E3B
    gpg: checking the trustdb
    gpg: marginals needed: 3  completes needed: 1  trust model: pgp
    gpg: depth: 0  valid:   2  signed:   1  trust: 0-, 0q, 0n, 0m, 0f, 2u
    gpg: depth: 1  valid:   1  signed:   0  trust: 1-, 0q, 0n, 0m, 0f, 0u
    gpg: next trustdb check due at 2022-03-11
    gpg: Good signature from 'Matthew Fisher ' [full]
    ```
数字签名在验证 Helm 图表的来源和完整性方面也发挥了作用。我们将在下一节中继续讨论。
# 签署和验证舵角图
类似于 Helm 维护者如何签署版本，您可以签署自己的 Helm 图表，以便用户可以验证他们安装的图表实际上来自您，并且包含预期的内容。要签署图表，您必须首先在您的本地工作站上有一个`gpg`按键。
接下来，您可以利用`helm package`命令中的特定标志，用指定的键为您的图表签名。
让我们演示如何通过利用 Packt 存储库中的`guestbook`图表来实现这一点。该图表位于`Learn-Helm/helm-charts/charts/guestbook`文件夹中。我们将假设您的本地工作站上已经有一个 gpg keypair，但是如果没有，您可以按照本章的*数据来源和完整性*部分的*设置*部分的说明来配置您的 keypair。
在签署`guestbook`图表之前需要注意的一点是，如果您使用的是 GPG 版本`2`或更高版本，则必须将您的公共和机密密钥环导出为传统格式。GPG 的早期版本以`.gpg`文件格式存储钥匙圈，这是 Helm 期望你的钥匙圈的格式(在写作时)。较新版本的 GPG 以`.kbx`文件格式存储钥匙圈，这是目前不支持的。
通过将您的 GPG 公共和机密密钥环转换为`.gpg`文件格式，开始签名过程:
1.  通过运行以下命令找到您的`gpg`版本:
    ```
    $ gpg --version
    gpg (GnuPG) 2.2.9
    libgcrypt 1.8.3
    Copyright (C) 2018 Free Software Foundation, Inc.
    ```
2.  If your `gpg` version is `2` or greater, export your public and secret keyring using the following command:
    ```
    $ gpg --export > ~/.gnupg/pubring.gpg
    $ gpg --export-secret-keys > ~/.gnupg/secring.gpg
    ```
    一旦你的钥匙圈已经导出，你将能够签署和包装你的头盔图表。`helm package`命令提供三个关键(双关)标志，允许您签署和打包图表:
    `--sign`:允许您使用 PGP 私钥签署图表
    `--key`:签名时要使用的密钥的名称
    `--keyring`:包含 PGP 私钥的密钥环的位置
    在下一步中，这些标志将与`helm package`命令一起用于签署和打包留言簿 Helm 图表。
3.  Run the following `helm package` command:
    ```
    $ helm package --sign --key '$KEY_NAME' --keyring ~/.gnupg/secring.gpg guestbook
    ```
    `$KEY_NAME`变量可以指与所需密钥相关联的电子邮件、姓名或指纹。这些细节可以通过利用`gpg --list-keys`命令来发现。
    当使用`helm package`命令而不签名时，您将期望看到一个文件作为输出生成，即包含 Helm 图表的`tgz`档案。在这种情况下，当签署和打包`guestbook`Helm 图表时，您将看到创建了以下两个文件:
    ```
    guestbook-1.0.0.tgz
    guestbook-1.0.0.tgz.prov
    ```
    `guestbook-1.0.0.tgz.prov`文件被称为一个**出处**文件。起源文件包含一个起源记录，显示如下:
    *   `Chart.yaml`文件中的图表元数据
    *   Helm `guestbook-1.0.0.tgz`文件的 sha256 哈希
    *   The PGP digital signature of the `guestbook-1.0.0.tgz` file
        Helm 图表的用户将利用来源文件来验证图表的数据来源和完整性。当将图表推送到图表存储库时，开发人员应该确保上传 Helm 图表的`.tgz`档案和`.tgz.prov`出处文件。
        一旦您打包并签署了您的 Helm 图表，您将需要导出与用于加密您的数字签名的私钥相对应的公钥。这将允许用户下载您的公钥并在验证过程中使用它。
4.  Export your public key to the `ascii-armor` format by using the following command:
    ```
    $ gpg --armor --export $KEY_NAME > pubkey.asc
    ```