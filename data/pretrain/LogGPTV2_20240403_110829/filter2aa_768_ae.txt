这个类所在的模块中，又遵守了面向对象的原则。 
最后介绍一下 VC6 编译 CFaultClass 类的 string 成员时给出的 c4251 警告。该警告的
完整信息如下： 
'm_cstrMember' : class 'std::basic_string' needs to have dll-interface to be used 
by clients of class 'CFaultClass' 
其意思 是成员 m_cstrMember 所属的 basic_string 类须要有 DLL 接口 才 能被
CFaultClass 类（客户）使用。换句话来说，编译器发现了 CFaultClass 类是以 DLL 形
式输出的（类定义中包含__declspec(dllexport)），但是它的公开成员 m_cstrMember
的类 basic_string 没有 DLL 方式的接口，或者说 basic_string 类的声明中没有
__declspec(dllexport)，因为我们选择是静态链接 CRT。回顾上面的错误，直接原因就
是 FaultApp 中的 basic_string 类和 FaultDll 中的 basic_string 类交替操作一个实例
fc.m_cstrMember。也就是说 basic_string 类的两份代码拷贝交替操作一个类实例。如果
FaultDll 是动态链接 basic_string 类的，或者说 basic_string 类也是以 DLL 形式输出
的，那么也不会有本节讨论的问题，这也再次告诉我们要重视编译器的警告信息。 
《软件调试》补编 
- 22 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
补编内容
补编内容
补编内容
补编内容 4 异常编译
异常编译
异常编译
异常编译 
补编说明： 
这一部分内容本来属于《软件调试》第 24 章的后半部分，讲的是编译器编译
异常处理代码的一些内部细节，包括局部展开、全局展开和对象展开等。写
作这些内容的目的是让读者对异常编译有一个既全面又深入的理解。 
在请朋友预览第 24 章时，朋友在肯定这一内容的深度的同时，质疑了这一内
容的必要性，“又不是一本写编译器的书，没有必要写那么多编译的细节！” 
于是在最后一轮压缩篇幅时，这部分内容就被砍掉了。自己当时很觉得可
惜，写作这部分内容还是颇花了些时间和心思的。 
24.6  栈展开 
栈展开是异常处理中比较难理解的一个部分。本节将通过一个实例来介绍栈展开的原
因和方法。 
24.6.1  SehUnwind 
为了说明栈展开的必要性和工作过程，我们编写了一个名为 SehUnwind 的小程序，
其主要代码如清单 24-15 所示。 
清单 24-15  SehUnwind 程序的主要代码 
1 
EXCEPTION_DISPOSITION 
2 
__cdecl _uraw_seh_handler( struct _EXCEPTION_RECORD *ExceptionRecord, 
3 
    void * EstablisherFrame, struct _CONTEXT *ContextRecord, 
4 
    void * DispatcherContext ) 
5 
{ 
6 
    printf("_raw_seh_handler: code-0x%x, flags-0x%x\n", 
7 
        ExceptionRecord->ExceptionCode, 
8 
        ExceptionRecord->ExceptionFlags);  
9 
10 
    return ExceptionContinueSearch; 
11 
} 
12 
int FuncFoo(int n) 
13 
{ 
14 
    __asm 
15 
    {                           
16 
        push    OFFSET _uraw_seh_handler  
17 
        push    FS:[0]           
18 
        mov     FS:[0],ESP       
19 
20 
        xor     edx, edx 
21 
        mov     eax, 100 
《软件调试》补编 
- 23 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
22 
        xor     ecx, ecx   // Zero out ECX 
23 
        idiv    ecx        // Divide EDX:EAX by ECX 
24 
    } 
25 
    printf("Never been here if %x==0\n",n); 
26 
    __asm 
27 
    {                            
28 
        mov     eax,[ESP]        
29 
        mov     FS:[0], EAX      
30 
        add     esp, 8           
31 
    } 
32 
    return n; 
33 
} 
34 
int main(int argc, char* argv[]) 
35 
{ 
36 
    int n=argc; 
37 
    __try 
38 
    { 
39 
        printf("FuncSeh got %x!\n", FuncFoo(n-1)); 
40 
    } 
41 
    __except(EXCEPTION_EXECUTE_HANDLER) 
42 
    { 
43 
        n=0x111; 
44 
    } 
45 
46 
    printf("Exiting with n=%x\n",n); 
47 
    return n; 
48 
} 
在上面的代码中，FuncFoo 函数使用手工方法注册了一个异常处理器，处理函数为
_uraw_seh_handler。main 函数在调用 FuncFoo 函数时通过__try{}__except()结构也
使用了结构化异常处理，像这种不同层次的函数都使用异常处理的情况在实际应用中是很
普遍的。 
如果不带任何参数执行 SehUnwind 程序，那么 argc=1，这会使 FuncFoo 中的整除（29
行）操作导致一个除零异常。因为 FuncFoo 自己注册了异常处理器，所以系统会调用它的
异 常 处 理 函 数 _uraw_seh_handler 。 不 过 _uraw_seh_handler
总 是 返 回
ExceptionContinueSearch，并不处理任何异常（试验目的），这导致系统继续寻找其他
的异常处理器，于是会找到 main 函数登记的异常处理器，这个处理器的过滤表达式为常
量 EXCEPTION_EXECUTE_HANDLER，也就是处理任何异常。这样，系统便找到了父函
数中登记的异常处理器，接下来应该执行这个处理器的异常处理块（第 50 行）。这意味着
执行路线将由 FuncFoo 函数的中部（第 23 行）跳转到 main 函数中（第 43 行）。也就是说，
由于发生异常 FuncFoo 将由其中部退出，这个出口是编译器在编译期所预料不到的，我们
称这样的出口为函数的异常出口（Exception Exit）。异常出口直接导致了如下两个问题。 
第一，对于意外退出的函数，由于函数从异常出口退出，异常出口后的代码便不会执
行，那么本来放在本来出口路线上的清理代码也得不到执行了。对于 FuncFoo 函数，注销
异常处理器（第 26~31 行）和恢复栈的代码将被意外跳过。 
第二，对于要处理异常的 main 函数，由于是从 FuncFoo 中突然跳回（而不是正常返
回）到 main 函数中执行的，为了保证 main 函数的代码顺利执行，应该将栈帧和寄存器状
态恢复成 main 函数所使用的栈帧和寄存器。 
栈展开（Stack Unwind）的初衷就是为了解决以上问题，简单来说，就是要为执行异
常处理块做好准备，同时也给意外退出的函数做清理工作的机会。对于我们现在讨论的例
子，栈展开就是要将目前正在执行 FuncFoo 函数时的栈变成适合返回到 main 函数的第 43
行执行的栈。如果把每个子函数的栈帧看作是栈上的一个个弯曲，那么栈展开就是把这些
弯曲拉直，使栈直接恢复到异常处理块所在位置的状态。 
《软件调试》补编 
- 24 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
24.6.2  全局展开 
了解了栈展开的含义和必要性之后，我们继续探索栈展开的过程。仍以 SehUnwind
程序为例，在它执行结束后，打印出的结果如下： 
_raw_seh_handler: code-0xc0000094, flags-0x0 
_raw_seh_handler: code-0xc0000027, flags-0x2 
Exiting with n=111 
其中，第 1 行是发生异常时，系统调用_uraw_seh_handler 函数而输出的，0xc0000094
是除零异常的代码。从第 2 行来看，_uraw_seh_handler 函数显然是又被调用了一次。
事实上，这一次就是因为栈展开而调用的，0xc0000027 是专门为栈展开而定义的异常代码
STATUS_UNWIND，标志位 0x2 代表 EH_UNWINDING，即因为栈展开而调用异常处理
函数。 
如果对_raw_seh_handler 函数设置断点，在除零异常发生后，这个断点会命中两次，
第一次命中时的栈调用序列与清单 24-6 一样，只有栈帧 0 的函数名从_raw_seh_handler
变为_uraw_seh_handler。清单 24-16 给出了第二次命中时的栈调用序列。 
清单 24-16  全局展开的执行过程 
# ChildEBP RetAddr        
00 0012f738 7c9037bf SehUnwind!_uraw_seh_handler //FuncFoo 函数登记的异常处理函数 
01 0012f75c 7c90378b ntdll!ExecuteHandler2+0x26  
//在保护块中调用异常处理函数 
02 0012fb24 004011dc ntdll!ExecuteHandler+0x24     
//参见 24.4.2 
03 0012fb4c 0040131b SehUnwind!_global_unwind2+0x18  //全局展开 
04 0012fb70 7c9037bf SehUnwind!_except_handler3+0x5f //main 函数登记的异常处理函数 
05 0012fb94 7c90378b ntdll!ExecuteHandler2+0x26  
//在保护块中调用异常处理函数 
06 0012fc44 7c90eafa ntdll!ExecuteHandler+0x24     
//参见 24.4.2 
07 0012fc44 004010d6 ntdll!KiUserExceptionDispatcher+0xe //用户态分发异常的起点 
08 0012ff4c 00401139 SehUnwind!FuncFoo+0x26     
//发生除零异常的函数 
09 0012ff80 00401448 SehUnwind!main+0x39     
//入口函数 
0a 0012ffc0 7c816fd7 SehUnwind!mainCRTStartup+0xb4 
//编译器插入的入口函数 
0b 0012fff0 00000000 kernel32!BaseProcessStart+0x23 //进程的启动函数 
其中，栈帧#08 对应的 FuncFoo 导致了除零异常，首先在内核态进行分发（参见第 11.3
节 ）， 然 后 回 到 用 户 态 的 KiUserExceptionDispatcher 继 续 分 发 ， 也 就 是 调 用
RtlDispatchException 函数（未显示出来）。栈帧#06～栈帧#04 是在执行 FS:[0]链条中
找到的异常处理器，即 main 函数登记的异常处理函数_except_handler3，这是当
RtlDispatchException
函 数 调 用 _uraw_seh_handler
函 数 时 ， 得 到
ExceptionContinueSearch 后继续遍历 FS:[0]链条而找到的。_except_handler3 在执
行 main 函数中的过滤表达式时得到的结果是 EXCEPTION_EXECUTE_HANDLER，于是
它准备执行对应的处理块。在转去执行处理块之前，它先调用_global_unwind2 开始栈
展开（栈帧#03）。_global_unwind2 的实现很简单，只须调用另一个重要的 RTL 函数
RtlUnwind，上面的清单没有显示出 RtlUnwind 函数。 
__global_unwind2(_EXCEPTION_REGISTRATION * pRegistrationFrame) 
 { 
     _RtlUnwind(pRegistrationFrame, &__ret_label, 0, 0 ); 
     __ret_label: 
 } 
RtlUnwind 函数的原型为： 
VOID RtlUnwind (PEXCEPTION_REGISTRATION pTargetFrame, ULONG ulTargetIpAddress, 
    PEXCEPTION_RECORD pExceptionRecord, ULONG ulReturnValue); 
其中，pTargetFrame 指向 FS:[0]链条中同意处理异常的那个异常登记结构，用来指
定栈展开的截止栈帧。参数 ulTargetIpAddress 用来指定展开操作结束后要跳转回来的
地址，从上面__global_unwind2 函数的代码可以看到，它就是调用 RtlUnwind 语句下
《软件调试》补编 
- 25 – 
Copyright © 2009 ADVDBG.ORG All Rights Reserved 
面的一个标号的地址。参数 pExceptionRecord 用来指定异常记录结构，ulReturnValue
可以指定一个放入到 EAX 寄存器中的返回值。RtlUnwind 的实现较为复杂，以下是它执
行的主要动作。 
第一，定义一个新的异常记录 EXCEPTION_RECORD，将它的异常代码设置为
STATUS_UNWIND，并在 ExceptionFlags 字段中设置 EH_UNWINDING 标志。 
第二，调用 RtlpCaptureContext将当时的线程状态捕捉到一个上下文结构（Context）
中，并调整 Esp 字段使其对应的栈不包含本函数的内容。 
第三，从 FS:[0]链条的表头开始，依次取出每个异常处理器的登记结构，执行下面两
步中的操作。 