acc_data
CO
log
希望达到的效果是一种透明平移的状态，
图10-27
3.性能
4.迁移
，认为改造虽然可行，
存储过程6
存储过程5
存储过程4
存储过程3
存储过程2
存储过程1
，在业务耦合度较高的情况下，
系统迁移演进策略
第10章基于业务的数据库架构设计|401
图10-28
但是改动量极大，
2.架构
1.功能
即原来的
---
## Page 424
402丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
拆分。
尽可能让应用层少改动或者不改动逻辑代码。
的思维来进行存储过程转移。
MySQL 单机的性能和商业数据库相比本身存在差距，在摇摆不定中，我们还是选择既有
移到 MySQL 里面就可以了呢。在没有做完这件事情之前，大家谁都不敢这么说，况且
是很难一步到位的。所以我们在这里实行的是迭代的方案，如图10-29 所示。
构，很自然会存在一种距离感，这是一种重要但不紧急的事情，而且从改进的步调来说，
10.4.2
在初始阶段，这部分的时间投入会略大一些，在功能和调用方式上，
存储过程转移之后，我们的架构演进才算是走入了轨道，接下来我们要做的是系统
如同大家预期的那样，既然里面有大量的存储过程逻辑，我们是不是把存储过程转
对于一个已经运行稳定的商业数据库系统，如果要把它改造为基于MySQL分布式架
策略1：功能平移
我们主要讨论上面前3个阶段，我总结为8个架构演进策略，我们逐个来说一下。
（4）迁移阶段：设计数据迁移方案，完成线上环境到MySQL分布式环境的迁移。
功能设计阶段
MysQLinstance
acc_log
acc_data
图10-29
存储过程6
存储过程5
存储过程4
存储过程3
存储过程2
存储过程1
，我们需要做到
---
## Page 425
来，对于应用来说，数据写入方式就更简单，更清晰了，改造后的架构如下图10-31所示。
们也借此机会把数据入口做了统一，根据业务模型梳理了几个固定的数据入口。这样一
分布式架构，这个过程对于应用同学来说是透明的，因为它的调用方式依然是SQL。
业务的存储过程转变为 insert 语句，在转换之后，我们把账单数据库改造为基于中间件的
写入性能和存储容量都难以扩展，所以我们需要想出新的解决方案。
是对于账单数据的写入从实时转为异步，这样对于前端的响应就会更加高效。
的一个实例拆成两个，通过这种拆分就能够强行把存储过程的依赖解耦。而拆分的核心思路
存在着上万张表，而且业务的请求极高，很明显单机存在着较大的风险，系统拆分是把原来
改造目标也很明确了，首先的切入点是数据库的存储容量，如果一个TB 级别的MySQL 库，
10.4.3
同时因为之前的账单数据有大量的表，数据分布参差不齐，表结构都相同，所以我
MySQL Instance1
账单数据在业务模型上属于流水型数据，不存在事务，所以我们的改进就是把账单
策略3：写入水平扩展
当然拆分后，新的问题出现了，账单业务的写入量按照规划是很高的，无论单机的
拆分后的架构如下图10-30所示。
我们之前做业务梳理时清楚的知道：系统分为数据业务和账单业务，那么我们下一步的
策略2：系统架构拆分
acc_data
系统架构演进阶段
存储过程3
存储过程2
存储过程1
图10-30
APP
MySQL Instance2
异步
第10章基于业务的数据库架构设计|403
存储过程6
存储过程5
存储过程4
---
## Page 426
404丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
图10-32所示。通过这种方式分流了大概50%的查询流量。
过存储过程调用查询数据。这虽然不是我们理想中的解决方案，但是它会比较有效，如
用中间件来完成还是存在瓶颈，业务层有自己的中间件方案，所以读写分离的模式是通
载均衡。这个时候数据库业务的数据库中依然有大量的存储过程。所以做读写分离，使
读写比例可以达到8:1左右，我们继续架构的改进。
用修改任何逻辑和代码，数据库层就能够快速实现存储容量和性能的水平扩展。
账单的改进暂时告一段落，我们开始聚焦于数据业务，发现这部分的读请求非常高
这部分的改进方案相对清晰，我们可以根据业务特点创建多个从库来对读请求做负
策略4：读写分离扩展
这个改造对于应用同学的收益是很大的，因为这个架构改造让他们直接感受到：不
0
存储过程2
存储过程1
存储过程3
存储过程2
存储过程1
图10-32
图10-31
MySQLClust
MysQLCluster
分片1
分片2
分片3
分片
---
## Page 427
取舍，也经过了反复迭代，最终是基于 SQL 的调用方案，大家在此的最大顾虑是原来使
动的过程竟然比想象的还要快很多，经过改进后的方案对原来的大量复杂逻辑校验做了
进，我们称之为事务降维。
程逻辑进行改造，这是不得已而为之的事情，也是整个架构改进的关键，这个阶段的改
疑问，目前的改造是存在瓶颈的，简单来说，就是不具备真实业务的上线条件。
库的QPS 指标总体在9万左右，而整体的压力经过估算会是目前的 20倍以上，所以毫无
会少一些，而且也能够快速验证改进效果。改进后的架构如下图10-33 所示。
一，是全局的，应用业务相对来说种类会多一些。做这个拆分对于应用层来说工作量也
务的情况，我们发现其实可以把数据业务拆分为平台业务和应用业务，平台业务更加统
10.4.4
来继续开始演进。
方案是满足已有的需求，而且目前要业务配合改进还存在一定的困难和风险。我们接下
问：为什么不直接把存储过程重构为应用层的 SQL 呢，在目前的情况下，具有说服力的
事务降维的过程是在经过这些阶段的演进之后，整体的业务逻辑脉络已经清晰，改
这个时候大家的压力都很大，要打破目前的僵局，目前可见的方案就是对于存储过
策略6：事务降维
这个阶段的改进可以说是架构演进的一个里程碑，根据模拟测试的结果来看，数据
因为数据业务的压力现在是整个系统的瓶颈，所以一种思路就是先仔细梳理数据业
策略5：业务拆分
现在整体来看，业务的压力都在数据业务方向，有的同学看到这种情况可能会有疑
业务架构演进阶段
Group
图10-33
存储过程
存储过程
第10章基于业务的数据库架构设计”405
MySOL Cluste
ac.log
分片3
---
## Page 428
406丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
id=100的用户属性，增加10。
的问题：
但是反过来却发现能够简化也是一种优化艺术，通过这个阶段的改进之后，大家都充满
通过这个过程也让我对架构优化有了新的理解，我们很多时候都是希望能够做得更多，
效，那么我们可以在梳理现有 SQL逻辑的基础上来评估是否可以改造为分布式架构。
10-34所示，目前已经是完全基于应用层的架构方式了。
量上会带给集群很大的压力，后来经过数据验证这种顾虑消除了。改进后的架构如下图
了信心。
用存储过程应用层只需要一次请求，而现在的逻辑改造后需要3次请求，可能从数据流
（2）如果记录存在，则执行 update 操作。
select value from user where id=100;
（1）检查记录是否存在
业务逻辑中对于数据处理是如下图10-35 所示的流程，比如 id 是主键，我们要修改
（1）高并发下的数据主键冲突。
这个阶段的演进是我们架构改造的第二个里程碑，这个阶段的改造我们碰到了如下
策略7：业务分布式架构改造
从改进后的效果来看，原来的QPS 在近40万，而改造后逻辑清晰简单，在2万左右
问题1：高并发下的数据主键冲突和解决方案
我们逐个说明一下。
（2）业务表数量巨大。
在这个基础之上，我们的梳理就进入了快车道，既然改造为应用逻辑的方式已经见
Sive2
slave3
MysQLGroup2
图10-34
acc_ data
slave3
MysaLCluster
分片2
act.iog
分片3
分片
---
## Page 429
据表为：
思路。所以我们可以通过配置化的方式提供几个统一的数据入口，比如原来的业务的数
来看，我们后续可以在缓存层进行改进，所以这个问题算是基本解决了。
两条DML，从索引的维护代价来看要高一些。
其实是不需要索引维护的，而类似的语法 replace 操作在 delete+insert 的过程中是执行了
duplicate update key语法来解决，这个方案从索引维护的角度来看，在基于主键的条件下,
程2已经完成了insert 操作，这样一来就很容易抛出主键数据冲突。
一这种情况不是最完美的，在少数情况下会产生数据的脏读，但是从数据生效的策略
appl_data,app2_data,app3_data...
对于业务表数量巨大的问题，在之前账单业务的架构重构中，我们已经有了借鉴的
 Insert into acc_data(id,value,mod_date) values(100,10,now()) on duplicate key
app qroup1 data(包含 appl data,app2 data.
我们可以简化为一个或者少数访问入口，比如：
问题2：业务表数量巨大
类似下面的形式：
以此类推。
在并发量很大的情况下，很可能线程1检测数据不存在要执行 insert 操作的瞬间，线
insert into user(id, value) values(100,10)
（3）如果记录不存在，则执行insert操作。
update user set id=value+10;
：app500_data,
图10-35
app100 data)
第10章基于业务的数据库架构设计”407
操价
---
## Page 430
408丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
在一个有效范围之内，整体的性能提升了15%左右，而从业务的反馈来看，延迟优化到
个分片节点的系统负载情况，总体按照线上环境的部署情况，单台服务器的性能会控制
据，把容量大的表尽可能打散到不同的组中。
分利用动态配置来实现。比如某个数据入口包含10个表数据，其中有个表的数据量过大，
的业务来说，这种结果是不能接受的，但是我们已经是分布式架构，要进行优化可以充
10.4.5
已经逐步趋于稳定，但是我们是面向业务的架构，还需要做后续的迭代。
水平扩展，而且从存储容量上来看也是达到了预期的目标，到了这个阶段，整体的架构
根据配置灵活定制。
了4毫秒。
小从200M左右降为70M左右，数据容量也控制在100万条以内，下图10-37是其中一
导致这个分片的容量过大，这种情况下我们就可以做一下中和，根据业务情况来重构数
通过对数据量较大的表重构，修改分片的数据分布之后，每个分片节点上的文件大
我们通过业务层的检测发现，部分业务处理的延时在10毫秒左右，对于一个高并发
在整体改进之后，我们查看现在的QPS，每个分片节点均在5000左右，基本实现了
MySOL Cluster
经过类似的方式改进，我们把系统架构统一改造成了三套分布式架构，如下图10-36所示。
通过配置化的方式对于应用来说不用关心数据存储的细节，而数据的访问入口可以
策略8：业务分片逻辑改造
分片
性能优化阶段
分片2
分片3
MysQLCluste
分片1
分片2
图10-36
acc_.data
分片3
分片4
MySQLClu
分片1
分片2
分片3
分片
---
## Page 431
了，3套集群的实例部署架构如下图10-39所示。
10.4.6架构里程碑和补充：基于分布式架构的水平扩展方案
分的压力会完全释放。
从实际的效果来看QPS仅仅增加了不到15%（如图10-38），而在后续做读写分离时这部
至此，我们的分布式集群架构初步实现了业务需求，后续就是数据迁移的方案设计
后续业务关闭了数据缓存，这样一来所有的查询和写入压力都加在了现有的集群中，
图10-38
图10-37
第10章基于业务的数据库架构设计|409
---
## Page 432
410丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
说几乎无感知，整个方案的设计如下图10-40所示。
保证，所以在这个架构设计中，我们需要考虑得更多是全局的设计。
入一个代理层，比如使用 HAProxy，这就势必带来另外一个问题，代理层的高可用如何
个中间件服务发生异常宕机，那么业务如何保证持续访问，如果我们考虑负载均衡，加
在这个基础上需要考虑中间件的高可用，比如现在使用中间件服务，如果其中的一
图10-39
---
## Page 433
压测基准：
我们的IO吞吐量。
在基于 SATA-SSD，PCIE-SSD 等磁盘资源的测试，我们设定了基于 sysbench 的 IO
经过对比测试，整体得到了如下表10-5所示的表格数据。
·测试用例：oltp_read_write.lua
·调度策略：cfq
根据上面的分布式存储架构演进和后端的数据监控，我们可以看到整体的集群对于
补充要点1：充分利用硬件性能和容量评估
●压测时长：3600s
分片1
单表条目数：50000000
压测表数量：10
SATA-SSD小OP
磁盘类型
分片2
分片3
8
分片4
线程数
16
分片1
9
3
acrdata
cluste
分片2
表10-5
图10-40
分片3
acrcata
480.67
480.21
420.12
391.38
TPS
分片4
第10章基于业务的数据库架构设计|411
ac.log