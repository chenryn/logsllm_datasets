title:Magellan: Generating Multi-Table Datapath from Datapath Oblivious
Algorithmic SDN Policies
author:Andreas Voellmy and
Shenshen Chen and
Xin Wang and
Yang Richard Yang
Magellan: Generating Multi-Table Datapath from
Datapath Oblivious Algorithmic SDN Policies
Andreas Voellmy+
Shenshen Chen∗
Yale University+
Xing Wang∗
Tongji University∗
Y. Richard Yang∗+
ABSTRACT
Despite the emergence of multi-table pipelining as a key fea-
ture of next-generation SDN data-path models, there is no
existing work that addresses the substantial programming
challenge of utilizing multi-tables automatically. In this pa-
per, we present Magellan, the ﬁrst system that addresses
the aforementioned challenge. Introducing two novel, sub-
stantial algorithms, map-explore and table-design, Magel-
lan achieves automatic derivation and population of multi-
table pipelines from a datapath-oblivious, high-level SDN
program written in a general-purpose language. Compar-
ing the ﬂow tables generated by Magellan with those pro-
duced from standard SDN controllers including OpenDay-
light and Floodlight, we show that Magellan uses between
46-68x fewer rules.
CCS Concepts
•Networks → Programming interfaces;
Keywords
SDN, Programming model, Multi-table pipeline
1.
INTRODUCTION
Multi-table pipelining has emerged as the foundation of
the next generation SDN datapath models. Avoiding key is-
sues such as unnecessary combinatorial explosions to sub-
stantially reduce datapath table sizes, multi-table pipelining
is essential for making SDN practical. At the same time,
the introduction of multi-tables also adds additional SDN
programming tasks including designing effective layout of
pipelines and populating the content of multiple tables.
In this work, we investigate how to automatically derive
and populate multi-table pipelines from datapath-oblivious
Permission to make digital or hard copies of all or part of this work for personal
or classroom use is granted without fee provided that copies are not made or
distributed for proﬁt or commercial advantage and that copies bear this notice
and the full citation on the ﬁrst page. Copyrights for components of this work
owned by others than ACM must be honored. Abstracting with credit is per-
mitted. To copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior speciﬁc permission and/or a fee. Request permissions from
permissions@acm.org.
SIGCOMM ’16, August 22–26, 2016, Florianopolis, Brazil
c(cid:13) 2016 ACM. ISBN 978-1-4503-4193-6/16/08. . . $15.00
DOI: http://dx.doi.org/10.1145/2934872.2959064
algorithmic policies (AP) [1]. We choose the algorithmic
policies model because it is highly ﬂexible and hence poses
minimal constraints on SDN programming. The model is
also general, and hence, can be used to express other models.
As a result of the generality, if we can compute high-quality
multi-table pipelines for algorithmic policies, we can con-
vert other policies into malgorithmic policies, and use al-
gorithmic policies as a powerful intermediate language for
implementing other high-level SDN programming models.
On the other hand, effectively utilizing multi-table pipelines
from algorithmic policies can be extremely challenging, be-
cause APs are expressed in a general-purpose programming
language with arbitrary complex control structures (e.g., con-
ditional statements, loops), and the control structures of APs
can be completely oblivious to the existence of multi-tables.
Hence, it is not clear at all whether one can effectively pro-
gram multi-table pipelines from such APs. We refer to this
as the oblivious multi-table programming challenge.
The main contribution of this paper is the development of
Magellan, the ﬁrst system that addresses the oblivious multi-
table programming challenge. The core of Magellan con-
sists of two novel, substantial algorithms: the map-explore
algorithm and the table design algorithm. Speciﬁcally, the
map-explore algorithm conducts a novel, efﬁcient form of
hybrid symbolic (map) and direct (explore) execution of a
multi-table oblivious program written in a general-purpose
language, resulting in a data-structure called explorer graph.
The table design algorithm partitions the dataﬂow graph of
program and merges tables.
2. ARCHITECTURE COMPONENTS
The high-level objective of Magellan is simple to state:
automate the tasks of table design and table population for
general-purpose APs.
To achieve the goal, Magellan introduces a sophisticated
compiler and runtime system shown in Figure 1.
• The static analysis and transformation proceeds in two
steps: native compilation, and bytecode rewriting. A na-
tive compiler converts the user program to an objective
code format to remove the extra complexity of high-level
programming language which makes program analysis com-
plex. We refer to the result as the bytecode. The purpose
of bytecode rewriting is ﬁrst to identify and organize the
compact-mappable statements which can be represented
593
macDst
macSrc
L1
L2
L3
L4
Figure 2: Magellan dataﬂow graph for Static-Example.
Time (s) Med RTT(ms)
9.7
2.1
0.6
System
POX
Floodlight
OpenDaylight
Pyretic
Magellan
POX
Floodlight
OpenDaylight
Pyretic
Magellan
Hosts
70
70
70
70
70
140
140
140
140
140
Rules
18787
4699
4769
-
142
13107
16451
19349
-
282
96
37
32
> 1500
25
389
200
150
-
123
0.3
11.9
6.1
1.2
0.6
Figure 1: Magellan system components and work ﬂow.
by a compact ﬂow table with a small range output into
brk statements and others into xblocks.
• The dynamic runtime part has two key components: Ex-
plorer and Table Fitter. The goal of Explorer is to gen-
erate the mapper-explorer graph whose nodes indicating
instructions and links indicating control ﬂow between in-
structions. By exploration of the program, a node in the
graph includes all possible values for inputs and outputs
of the instruction generating the node. After generating
the mapper-explorer graph, a simple algorithm can gen-
erate ﬂow tables from the graph. Finally, a table design
algorithm in the Table Fitter merges tables to reduce the
number since the number of ﬂow tables is limited in real
switches. In the next section, we will show a main step
by using an example in the table design. The Incremental
Updater will directly update mapper-explorer graph and
then Magellan recomputes the content of ﬂow tables.
3. EXAMPLE: AP TO DATAFLOW GRAPH
Here we give an example to show the translation from an
AP program to a dataﬂow graph which is used in the table
design. Bellow is the AP example:
// Program: Static-Example
onPacket(p) {
x = macSrc;
if (x > 4) {y = hostTable[macDst];} else {y = 1;}
egress = [2 * y]; }
To remove language-speciﬁc constructs and simplify pro-
gram analysis, we convert programs to a generic, simple,
streamlined labeled instruction set (IR)) that uses conditional
and unconditional jumps for all control ﬂows, and also we do
a simple compile optimizaiton to replace all x with macSrc
and remove x = macSrc:
L2: cjump (macSrc > 4) L3 L5
L3: y = hostTable[macDst]
L4: jump L6
L5: y = 1
L6: egress = [2 * y]
In order to generate Magellan dataﬂow graph, we also
need to convert jump statements (belong to control ﬂow) to
data dependency. So we introduce guard variable (g in the
following example):
L1: g = (macSrc > 4)
L2: if g: y = hostTable[macDst]
L3: if !g: y = 1
L4: egress = [2 * y]
Figure 3: End-to-end performance comparison.
Then we generate the dataﬂow graph for this program as
shown in Figure 2. The table design algorithm will partition
the dataﬂow graph into regions, and merge all nodes in one
region. The dataﬂow graph guarantees the merging is correct
comparing with control ﬂow graph.
4. PRELIMINARY EVALUATIONS
We compare Magellan with a range of state-of-the-art com-
mercial and academic SDN systems, including OpenDay-
light, Floodlight, POX, and Pyretic. We evaluate all systems
using Open vSwitch (OVS) version 2.0.2, and conduct eval-
uations in a range of settings. In this poster, we report the
results of the L2-learning-and-routing policy, because it is
available in each system from the system’s authors (with mi-
nor variations). Speciﬁcally, for each system, after allowing
appropriate initialization of hosts and controller, we perform
an all-to-all ping among the hosts, record the RTT of each
ping, measure the time for all hosts to complete this task.
After completing the task, we retrieve and count all Open-
ﬂow rules installed in the switch.
Figure 3 lists the number of rules, task completion time,
and median ping RTT 1for each system with H = 70 and
H = 140 hosts and. We observe that for 70 hosts, Mag-
ellan uses 33x fewer rules than OpenDaylight and Flood-
light, while for 140 hosts, Magellan uses between 46-68x
fewer rules than other systems. This rule compression is due
to leveraging multi-table pipelines: all other systems gener-
ate rules into a single table, and therefore generate approx-
imately H 2 rules, while Magellan generates approximately
only 2 ∗ H rules.
5. REFERENCES
[1] A. Voellmy, J. Wang, Y. R. Yang, B. Ford, and
P. Hudak. Maple: Simplifying sdn programming using
algorithmic policies. In Proceedings of the ACM
SIGCOMM 2013 Conference on SIGCOMM,
SIGCOMM ’13, pages 87–98. ACM, 2013.
1Tests of Pyretic at both 70 and 140 hosts failed and these
measurements are therefore omitted.
594