**Description**
Up until database interaction is introduced, the tutorial for FastAPI uses
pydantic models for everything, such as this example in the sextion on Extra
Models :
    class UserOut(BaseModel):
        username: str
        email: EmailStr
        full_name: str = None
    class UserInDB(BaseModel):
        username: str
        hashed_password: str
        email: EmailStr
        full_name: str = None
This alows for the "database model" to have private data which will not be
exposed through the API. Later, in the section on security, a similar trick is
used, but this time using inheritance to stack the two models (which I find
makes the return-casting used by some functions better encoded in the type
system).
    class User(BaseModel):
        username: str
        email: str = None
        full_name: str = None
        disabled: bool = None
    class UserInDB(User):
        hashed_password: str
    def get_db_user() -> UserInDB:
        return UserInDB(
            username="johndoe", full_name="John Doe",
            email="PI:EMAIL",
            hashed_password="fakehashedsecret",
            disabled=False
        )
    def get_user() -> User:
        return get_db_user()
However, when proper databases are introduced, those Pydantic models are
dropped in favor of a single SQLAlchemy ORM model, with no effort to bridge
the two parts. And while one could see this as the SQLAlchemy models
completely superseding the Pydantic models, the fullstack demo app appears to
actually use both, so there appears to be value in attempting to use them
together, something which the documentation doesn't seem to address.
So can/should Pydantic and SQLAlchemy models be used together? If they are,
how is one meant to connect the two together and can this still be done while
maintaining some kind of type hierarchy?