> Issue originally made by @taion
### Bug information
  * **Babel version:** 6.11.4
  * **Node version:** 6.3.1
  * **npm version:** 3.10.3
### Options
    N/A
### Input code
    N/A
### Description
From discussion on facebook/create-react-app#238:
This is the code of `babel-runtime/helper/typeof.js`:
    "use strict";
    exports.__esModule = true;
    var _iterator = require("../core-js/symbol/iterator");
    var _iterator2 = _interopRequireDefault(_iterator);
    var _symbol = require("../core-js/symbol");
    var _symbol2 = _interopRequireDefault(_symbol);
    var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
    exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
      return typeof obj === "undefined" ? "undefined" : _typeof(obj);
    } : function (obj) {
      return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
    };
By contrast, the helper definition is:
    (typeof Symbol === "function" && typeof Symbol.iterator === "symbol")
      ? function (obj) { return typeof obj; }
      : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
Similar things happen for other helpers like `jsx`.
It's counterproductive to actively pull in the polyfills here â€“ doing so
provides no additional functionality but increases bundle size for users for
little reason.