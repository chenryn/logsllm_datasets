title:POSTER: Blind Separation of Benign and Malicious Events to Enable
Accurate Malware Family Classification
author:Hesham Mekky and
Aziz Mohaisen and
Zhi-Li Zhang
POSTER: Blind Separation of Benign and Malicious Events
to Enable Accurate Malware Family Classiﬁcation
Hesham Mekky1 Aziz Mohaisen2 Zhi-Li Zhang1
2VeriSign Labs
1University of Minnesota
{hesham, zhzhang}@cs.umn.edu PI:EMAIL
ABSTRACT
Malware families classiﬁcation has been studied extensively in the
literature. Machine learning based identiﬁcation techniques rely on
building a classiﬁcation model for the malware trafﬁc, and then the
model is used for labeling unseen observations. In practice, mal-
ware trafﬁc (malware signal) is mixed with other legitimate trafﬁc
(background signal). Consequently, the classiﬁer’s effectiveness
may be hindered, since the observed trafﬁc is mixed. We propose
to apply signal decomposition in order to decompose the observed
trafﬁc into two components, malware trafﬁc and background traf-
ﬁc, and then classiﬁcation techniques are applied effectively on the
malware trafﬁc after removing the background attributes. Our pre-
liminary results show the effectiveness of the proposed approach.
Categories and Subject Descriptors
C.2 [Computer Communication Networks]: General—data com-
munications, security and protection
General Terms
Measurement, Security
Keywords
ICA; Malware; Classiﬁcation; Background noise elimination
1.
INTRODUCTION
Malware analysis, classiﬁcation and labeling is a well-investigated
problem in the research community and industry. Techniques used
for malware analysis fall into two categories: static and dynamic.
Static techniques for malware analysis utilizes meta-data associ-
ated with binaries, including certain patterns in the binary itself,
whereas dynamic techniques utilize artifacts generated by the mal-
ware at the run time, including memory, network, ﬁle system and
registry usage. While static analysis is fast and scalable, it requires
costly reverse engineering efforts for obtaining patterns and roles
from binaries, and are defendable by obfuscation. On the other
hand, the dynamic analysis techniques are highly accurate, capa-
ble of detecting previously unseen malicious behavior, and address
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage, and that copies bear this notice and the full ci-
tation on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the owner/author(s). Copyright is held by the
author/owner(s).
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
ACM 978-1-4503-2957-6/14/11.
http://dx.doi.org/10.1145/2660267.2662365.
code obfuscation, although cost more time to run [7].
In addi-
tion, one circumvention mechanism utilized by malware authors is
“behavior-poisoning”, in which random noise is generated as part
of the execution of malware to disguise its real behavior.
In this paper, we focus on malware analysis based on artifacts
collected from network traces i.e., we do not perform binary anal-
ysis. For example, hosts infected with malware produce network
artifacts that contain both malware-related and background-related
network trafﬁc components. Thus, approaches that rely on ma-
chine learning classiﬁcation [5, 9] can be hindered by this back-
ground trafﬁc since the features extracted from the network trafﬁc
will contain both malware and background trafﬁc attributes.
Our proposed approach aims at cleaning those features from the
background trafﬁc attributes, which signiﬁcantly improves the ef-
fectiveness of machine learning classiﬁcation in detecting the mal-
ware trafﬁc and assigning the appropriate malware family label.
Towards this goal, we use Independent Component Analysis (ICA) [6]
to remove the background trafﬁc attributes from the mixed trafﬁc.
Then, we use classiﬁcation algorithms to predict the malware la-
bel. Our preliminary results show a signiﬁcant success in isolat-
ing background trafﬁc, classifying malware samples to their proper
family, and promise further related applications.
2. PROPOSED APPROACH
The main technique used for separating malware trafﬁc from the
background trafﬁc is the ICA, which we review in §2.1, followed
by an overview of our system for malware classiﬁcation in §2.2.
2.1
ICA Primer
The ICA is a method for decomposing a multivariate signal into
additive components assuming statistical independence. Assuming
m independent source signals S = [S1, ..., Sm]T . We observe the
mixture X = [X1, ..., Xm]T given by X = A · S, where A is
named the mixing matrix. The goal of ICA is to ﬁnd an unmixing
matrix W (≈ A−1) such that Y = W · X ≈ S will be the best
approximation for S.
ICA algorithms rely on independence to recover the original sig-
nals from the mixture. For instance, given two signals X and Y : (i)
Entropy H(X) is a measure of uncertainty in X i.e. the lower the
value the more information we have about X, (ii) Conditional en-
tropy H(X|Y ) is the amount of uncertainty in X after the observa-
tion of Y , (iii) Mutual information, I(X; Y ) = H(X)−H(X|Y ),
is the reduction of uncertainty in X after the observation of Y .
Therefore by having an algorithm that minimizes the mutual in-
formation between the estimated components [1], we are looking
for latent variables that are maximally independent i.e., hidden dis-
tributions for components that are independent.
2.2 System Overview
Figure 1 shows the high level design of our proposed method.
As show in the ﬁgure, for each malware family, we have an ICA
decomposer and a classiﬁer. Each ICA decomposer, recovers the
malware signal from the mixed trafﬁc, then we apply that signal
to the classiﬁer to obtain a label and score. Finally, we label the
given sample based on scores given by all classiﬁers. While we
demonstrate the system for two families, it is clear that the system
can easily scale to a large number of families.
We leverage ICA to remove the background trafﬁc from the fea-
tures extracted from the network trafﬁc. Then, we apply classiﬁca-
tion on the resulting signal to predict the malware family label. We
assume that the behavior of our features is different and indepen-
dent from the background trafﬁc, which we validate to be correct.
For instance, Figure 2 illustrates an example of one of the features
used in our analysis, detailed feature extraction is discussed in §3.2.
As shown in the ﬁgure, the distribution for that speciﬁc feature in
the family “Darkness” is completely different from the background
“Noise” trafﬁc. Consequently, the distribution of the same exact
feature in the mixed trafﬁc will be different from the malware fea-
ture distribution, which limits the effectiveness of classiﬁers. Our
method uses ICA to recover the malware distribution for all ex-
tracted features, and then uses classiﬁcation to predict the label.
Figure 1: Malware Labeling Process
Figure 2: Sample Feature: Malware vs. Background
3. PRELIMINARY RESULTS
In order to understand the power of the proposed system in elimi-
nating background trafﬁc, we experimentally test it on two datasets.
In §3.1 we outline the datasets and their context, followed by the
features extraction in §3.2, and the results in §3.3.
3.1 Datasets
Our datasets are composed of two malware families: (a) Dark-
ness malware family, which infects machines to carry out DDoS
attacks, and (b) Shady RAT (SRAT) malware family, which infects
machines to target high proﬁle organizations (credentials stealing,
DDoS attacks, etc). These families cover a wide range of network
behavior for our evaluation purposes. Each malware sample is la-
beled manually using an operational product at VeriSign [7].
Each sample is executed in a controlled environment for a prede-
ﬁned amount of time to collect network artifacts generated solely
by each malware family in the form of PCAP traces. Details of
each dataset is shown in Table 1. In addition to the malware fami-
lies, we have another dataset that resembles the background trafﬁc
behavior generated from regular hosts such as web browsing.
Table 1: Datasets
Family
Darkness
Shady RAT (SRAT)
Samples
534
1096
We use the PCAP trace generated by each sample to create a
proﬁle for each malware sample based on the ordering of events
in the packet trace [8]. Proﬁles are based on network events seen
in the packets e.g., an outbound packet using UDP on port 53 is
mapped to “A0A2A5”, where A0 refers to the outbound occur-
rence, A2 refers to the UDP protocol, and A5 refers to the port