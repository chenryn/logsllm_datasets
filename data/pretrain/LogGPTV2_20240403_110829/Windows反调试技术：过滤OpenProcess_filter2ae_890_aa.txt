# Windows反调试技术：过滤OpenProcess
##### 译文声明
本文是翻译文章，文章原作者 xpn，文章来源：xpnsec.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 一、前言
前一阵子我一直在研究与SYSTEM权限有关的技术，本周我想暂时休息一下，把目光转到一些反调试技术上。现在许多漏洞奖励计划中都会包含客户端应用程序方面内容，而许多安全产品（以及游戏中的反作弊引擎）会使用各种技术阻止用户调试核心组件，本文中我们介绍了某一种反调试技术以及相应的规避方法。
显而易见的是，本文中介绍的技术并不属于漏洞范畴，如果攻击者已经掌握系统的访问权限，那么就不用费那么多事，他们很有可能已经在系统中装上了rootkit，完成攻击过程。
在本文中我测试的是AVG安全产品，但其他许多AV解决方案及安全产品也使用了完全相同的技术，因此本文介绍的方法也可以在这些产品上使用。
## 二、具体问题
如果你之前曾经尝试使用`x64dbg`调试工具附加（attach）到某个AV组件上，你经常会看到如下画面，这一点已经见惯不怪：
实际结果是调试器无法成功attach到该进程上，我们只能茫然地盯着屏幕，不知下一步该干啥。另外，如果我们不attach，而是选择在调试器中启动该进程，会看到如下画面：
还是得到一样的结果，当程序即将启动时我们就已被踢出局。最后，像其他逆向分析师一样，我们尝试使用WinDBG来分析，结果会得到如下错误信息：
为了理解调试器的工作原理，也为了让我们更好地了解到底哪里出了问题，我们可以分析一下x64dbg的代码（实际上我们需要分析的是[TitanEngine](https://www.reversinglabs.com/open-source/titanengine.html)的代码，TitanEngine是x64dbg使用的调试引擎），看看我们无法attach进程背后的具体原因。
    __declspec(dllexport) bool TITCALL AttachDebugger(DWORD ProcessId, bool KillOnExit, LPVOID DebugInfo, LPVOID CallBack)
    {
    ...
    if(ProcessId != NULL && dbgProcessInformation.hProcess == NULL)
    {
        if(engineEnableDebugPrivilege)
        {
            EngineSetDebugPrivilege(GetCurrentProcess(), true);
            DebugRemoveDebugPrivilege = true;
        }
        if(DebugActiveProcess(ProcessId))
        {
        ...
        }
    }
    }
这里我们可以看到，x64dbg使用的是[DebugActiveProcess](https://msdn.microsoft.com/en-us/library/windows/desktop/ms679295\(v=vs.85).aspx)这个API函数，该API为`KernelBase.dll`提供的Win32
API。
## 三、DebugActiveProcess的工作原理
`DebugActiveProcess`
负责启动针对目标进程的调试会话，以进程的PID值作为参数。如果我们在[MSDN](https://msdn.microsoft.com/en-us/library/windows/desktop/ms679295\(v=vs.85).aspx)上查找这个函数，我们可以得到如下信息：
_“调试器必须具备目标进程的合适权限，必须能够以`PROCESS_ALL_ACCESS`方式打开目标进程。_
_如果目标进程创建时使用了安全描述符（security
descriptor），使调试器无法获得完全访问权限，那么调用`DebugActiveProcess`时可能会失败。如果调试进程具备`SE_DEBUG_NAME`权限，那么它就可以调试任何进程。”_
这段话给了我们第一个提示信息，提示我们究竟是什么导致我们的调试会话无法正常建立。从上述代码片段中，我们可以看到调试器正在调用`EngineSetDebugPrivilege`，那么我们来看看这个函数的具体内容：
    DWORD EngineSetDebugPrivilege(HANDLE hProcess, bool bEnablePrivilege)
    {
        DWORD dwLastError;
        HANDLE hToken = 0;
        if(!OpenProcessToken(hProcess, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))
        {
            ...
        }
            ...
        if(!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &luid))
        {
            ...
        }
        tokenPrivileges.PrivilegeCount = 1;
        tokenPrivileges.Privileges[0].Luid = luid;
        if(bEnablePrivilege)
            tokenPrivileges.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
        else
            tokenPrivileges.Privileges[0].Attributes = 0;
        AdjustTokenPrivileges(hToken, FALSE, &tokenPrivileges, sizeof(TOKEN_PRIVILEGES), NULL, NULL);
        ...
    }
在上述代码中，我们的进程具备`SE_DEBUG_NAME`权限，也就是说我们满足了上述要求，可以从调试器中调用`DebugActiveProcess`函数。
接下来我们需要看一下我们是否拥有目标进程的`PROCESS_ALL_ACCESS`访问权限。
## 四、DebugActiveProcess内部工作流程
`DebugActiveProcess`这个API仅接受一个参数，那就是目标进程的进程ID，函数内部会调用`ProcessIdToHandle`，利用这个值获得目标进程的句柄。
如果我们跳转到`ProcessIdToHandle`函数，我们会发现该函数只是`NtOpenProcess` API的封装函数：
对于`NtOpenProcess`函数，其`DesiredAccess`参数的传入值为`C3Ah`。查阅相关[文档](https://msdn.microsoft.com/en-us/library/windows/desktop/ms684880\(v=vs.85).aspx)后，我们发现这个值为一些标志的组合值，这些标志为：
  * PROCESS_CREATE_THREAD
  * PROCESS_VM_OPERATION
  * PROCESS_VM_WRITE
  * PROCESS_VM_READ
  * PROCESS_SUSPEND_RESUME
  * PROCESS_QUERY_INFORMATION
使用这个值后，函数就可以拥有所需的所有权限，开始调试目标进程。
现在，我们已经知道调试器具备`SE_DEBUG_NAME`权限，并且`DebugActiveProcess`调用也拿到了目标进程的正确的访问权限。那么，到底是什么在阻止我们调试目标进程？
## 五、ObRegisterCallbacks登场
当我加入游戏以及游戏修改（modding）社区时，我才第一次见到`ObRegisterCallbacks`的身影，社区爱好者在绕过反作弊及DRM驱动时，经常使用该函数在游戏中修改或注入其他功能。
根据微软的说法，[ObRegisterCallbacks](https://msdn.microsoft.com/en-us/library/windows/hardware/ff558692\(v=vs.85).aspx)是
_“一个例程，负责为线程、进程以及桌面句柄操作注册一系列回调例程”_