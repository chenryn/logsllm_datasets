# servlet-1
---
## 基础概念
Java servlet 是运行在 Web 或应用服务器上的程序，作为在来自 Web 浏览器或其他 HTTP 客户机的请求和在 HTTP 服务器上的数据库或应用程序的中间层。
Servlet 其实就是一个接口，定义了 Java 的类被浏览器访问到 tomcat 的规则，后面会定义一个实现类，来实现 Servlet 接口的方法。
Servlet 为构建基于 Web 的应用程序提供了一个基于组件的、独立于平台的方法，没有 CGI 程序的性能限制。Servlet 访问 Java API 的整个家族，包括 JDBC API 来访问企业数据库。
代码文件不能放在 WEB-INF 文件目录下，放在该文件目录下是无法执行的。
在我们部署 jsp 网站的时候通常都是将文件打包成 war 包，然后再进行上传，上传后会自动进行解压，那么我们来看看 war 包的结构。
```
WebContent                  站点根目录
|
|--META-INF                 META-INF文件夹
|   |---MANIFEST.MF         配置清单文件
|---WEB-INF                 WEB-INF文件夹
|   |---web.xml             站点配置文件
|   |---lib                 第三方库文件夹
|   |   |---*.jar           程序需要的jar包
|   |---classes             放置字节码文件的目录
|       |---*.class         class文件
|---               自定义的目录
|   |---*.jsp,*.js,*.css    自定义的资源文件
|---             自定义的资源文件
```
tomcat网站虚拟路径配置
```xml
配置conf/server.xml文件
在标签体中配置
* docBase:项目存放的路径
* path：虚拟目录
```
配置完成后，我们访问 127.0.0.1:8080/hehe 的时候，tomcat 中间件会查找本机 d 盘下的 hello 目录。
还有种方法是直接写 xx.xml 到 tomcat\conf\Catalina\localhost 目录下，这样也能实现同样的效果。
```xml
在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写
* 虚拟目录：xml文件的名称
```
**Servlets 任务**
Servlet 执行以下主要任务：
* 读取由客户端（浏览器）发送的显式数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。
* 读取由客户端（浏览器）发送的隐式 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。
* 处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算响应。
* 发送显式数据（即文档）到客户端（浏览器）。该文档可以以多种多样的格式被发送，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。
* 发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。
---
## 环境配置
设置 Java 开发工具包,确保 `java`、`javac` 都可以正常输出
如果你运行的是 Windows 操作系统且 SDK 安装在 C:\jdk1.6.0_20 中，那么在你的 C:\autoexec.bat 文件中放入下列的行：
```bash
set PATH=C:\jdk1.5.0_20\bin;%PATH%
set JAVA_HOME=C:\jdk1.5.0_20
```
在 Linux 操作系统中，如果 SDK 安装在 /usr/local/jdk1.6.0_20 中,则在你的 ~/.bash_profile 文件中放入下列的行：
```bash
PATH=$PATH:/usr/local/jdk1.6.0_20/bin
JAVA_HOME=/usr/local/jdk1.6.0_20
```
设置 Web 服务器：Tomcat
Apache Tomcat 是 Java Servlet 和 JavaServer Pages 技术的开源软件实现，可以作为测试 servlets 的独立服务器，而且可以用 Apache Web 服务器集成。下面是在你的电脑上安装 Tomcat 的步骤：
从 http://tomcat.apache.org/ 上下载最新版本的 Tomcat。
一旦你下载了 Tomcat，将该二进制发布包解压缩到一个方便的位置。例如，如果你使用的是 Windows操作系统，则解压缩到 C:\apache-tomcat-5.5.29 中，如果你使用的是 Linux/Unix 操作系统，则解压缩到 /usr/local/apache-tomcat-5.5.29 中，并创建指向这些位置的 CATALINA_HOME 环境变量。
在 Windows 操作系统的计算机上，可以通过执行下述命令来启动 Tomcat：
```bash
%CATALINA_HOME%\bin\startup.bat
or
C:\apache-tomcat-5.5.29\bin\startup.bat
```
在 Unix（Solaris、Linux 等）操作系统的计算机上，可以通过执行下述命令来启动 Tomcat：
```bash
$CATALINA_HOME/bin/startup.sh
or
chmod 777 -R /root/apache-tomcat-5.5.29/bin/
/root/apache-tomcat-5.5.29/bin/startup.sh
```
Tomcat 启动后，通过访问 http://localhost:8080/，Tomcat 包含的默认 web 应用程序会变得可用。如果一切顺利，那么启动后会显示默认页面
在 Windows 操作系统的计算机上，可以通过执行下面的命令来停止 Tomcat：
```bash
C:\apache-tomcat-5.5.29\bin\shutdown
```
在 Unix（Solaris、Linux 等）操作系统的计算机上，可以通过执行下面的命令来停止 Tomcat：
```bash
/root/apache-tomcat-5.5.29/bin/shutdown.sh
```
**设置 CLASSPATH**
由于 servlets 不是 Java 平台标准版的组成部分，所以你必须为编译器指定 servlet 类。
如果你运行的是 Windows 操作系统，则需要在你的 C:\autoexec.bat 文件中放入下列的行：
```
set CATALINA=C:\apache-tomcat-5.5.29
set CLASSPATH=%CATALINA%\lib\servlet-api.jar;%CLASSPATH%
```
在 Unix（Solaris、Linux 等）操作系统中，如果你使用的是 C shell，则需要在你的 .cshrc 文件中放入下列的行：
```
CATALINA=/root/apache-tomcat-8.5.68
CLASSPATH=$CLASSPATH:$CATALINA/lib/servlet-api.jar
```
注意：假设你的开发目录是 C:\ServletDevel（Windows 操作系统中）或 /user/ServletDevel（UNIX 操作系统中），那么你还需要在 CLASSPATH 中添加这些目录，添加方式与上面的添加方式类似。
---
## 生命周期
Servlet 生命周期可被定义为从它被创建直到被销毁的整个过程。以下是 servlet 遵循的过程：
* 通过调用 `init()` 方法 servlet 被初始化。
* Servlet 调用 `service()` 方法来处理客户端的请求。
* 通过调用 `destroy()` 方法 servlet 终止。
* 最后，servlet 是由 JVM 的垃圾回收器进行垃圾回收的。
上图显示了一个典型的 servlet 生命周期场景。
最先到达服务器的 HTTP 请求被委派到 servlet 容器。
在调用 `service()` 方法之前 servlet 容器加载 servlet。
然后 servlet 容器通过产生多个线程来处理多个请求，每个线程执行 servlet 的单个实例的 `service()` 方法。
### init() 方法
init 方法被设计成只调用一次。它在第一次创建 servlet 时被调用，在后续每次用户请求时不再调用。因此，它用于一次性初始化，与 applets 的 init 方法一样。
通常情况下，当用户第一次调用对应于该 servlet 的 URL 时，servlet 被创建，但是当服务器第一次启动时，你也可以指定 servlet 被加载。
当用户调用 servlet 时，每个 servlet 的一个实例就会被创建，并且每一个用户请求都会产生一个新的线程，该线程在适当的时候移交给 doGet 或 doPost 方法。`init()` 方法简单地创建或加载一些数据，这些数据将被用于 servlet 的整个生命周期。
init 方法的定义如下：
```java
public void init() throws ServletException {
  // Initialization code...
}
```
### service() 方法
`service()` 方法是执行实际任务的主要方法。Servlet 容器（即 web 服务器）调用 `service()` 方法来处理来自客户端（浏览器）的请求，并将格式化的响应写回到客户端。
每次服务器接收到一个 servlet 请求时，服务器会产生一个新的线程并调用服务。`service()` 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut、doDelete 等方法。
下面是该方法的特征：
```java
public void service(ServletRequest request,
                    ServletResponse response)
      throws ServletException, IOException{
}
```
`service()` 方法由容器调用，且 service 方法在适当的时候调用 doGet、doPost、doPut、doDelete 等。所以对 `service()` 方法你什么都不需要做，只是根据你接收到的来自客户端的请求类型来重写 `doGet()` 或 `doPost()`。
`doGet()` 和 `doPost()` 方法在每次服务请求中是最常用的方法。下面是这两种方法的特征。
### doGet() 方法
GET 请求来自于一个 URL 的正常请求，或者来自于一个没有 METHOD 指定的 HTML 表单，且它由 `doGet()` 方法处理。
```java
public void doGet(HttpServletRequest request,
                  HttpServletResponse response)
    throws ServletException, IOException {
    // Servlet code
}
```
### doPost() 方法
POST 请求来自于一个 HTML 表单，该表单特别的将 POST 列为 METHOD 且它由 `doPost()` 方法处理。
```java
public void doPost(HttpServletRequest request,
                   HttpServletResponse response)
    throws ServletException, IOException {
    // Servlet code
}
```
### destroy() 方法
`destroy()` 方法只在 servlet 生命周期结束时被调用一次。`destroy()` 方法可以让你的 servlet 关闭数据库连接、停止后台线程、将 cookie 列表或点击计数器写入磁盘，并执行其他类似的清理活动。
在调用 `destroy()` 方法之后，servlet 对象被标记用于垃圾回收。destroy 方法的定义如下所示：
```java
public void destroy() {
    // Finalization code...
  }
```
---
## 实例
Servlets 是 Java 类，服务于 HTTP 请求并实现了 javax.servlet.Servlet 接口。Web 应用程序开发人员通常编写扩展 javax.servlet.http.HttpServlet 的 servlets，它是一个实现了 Servlet 接口的抽象类并且是为处理 HTTP 请求专门设计的。
我们来实现一个最简单的Servlet：
```java
// WebServlet注解表示这是一个Servlet，并映射到地址/:
@WebServlet(urlPatterns = "/")
public class HelloServlet extends HttpServlet {
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {
        // 设置响应类型:
        resp.setContentType("text/html");
        // 获取输出流:
        PrintWriter pw = resp.getWriter();
        // 写入响应:
        pw.write("Hello, world!");
        // 最后不要忘记flush强制输出:
        pw.flush();
    }
}
```
一个 Servlet 总是继承自 HttpServlet，然后覆写 `doGet()` 或 `doPost()` 方法。注意到 `doGet()` 方法传入了 HttpServletRequest 和 HttpServletResponse 两个对象，分别代表 HTTP 请求和响应。我们使用 Servlet API 时，并不直接与底层 TCP 交互，也不需要解析 HTTP 协议，因为 HttpServletRequest 和 HttpServletResponse 就已经封装好了请求和响应。以发送响应为例，我们只需要设置正确的响应类型，然后获取 PrintWriter，写入响应即可。
Servlet API 是一个 jar 包，我们需要通过 Maven 来引入它，才能正常编译。编写 pom.xml 文件如下：
```xml
    4.0.0
    com.itranswarp.learnjava
    web-servlet-hello
    war
    1.0-SNAPSHOT
        UTF-8
        UTF-8
        11
        11
        11
            javax.servlet
            javax.servlet-api
            4.0.0
            provided
        hello
```
注意到这个 pom.xml 与前面我们讲到的普通 Java 程序有个区别，打包类型不是 jar，而是 war，表示 Java Web Application Archive：
```xml
war
```
引入的 Servlet API 如下：
```xml
    javax.servlet
    javax.servlet-api
    4.0.0
    provided
```
注意到 `` 指定为 provided，表示编译时使用，但不会打包到 .war 文件中，因为运行期 Web 服务器本身已经提供了 Servlet API 相关的 jar 包。
我们还需要在工程目录下创建一个 web.xml 描述文件，放到 src/main/webapp/WEB-INF 目录下（固定目录结构，不要修改路径，注意大小写）。文件内容可以固定如下：
```xml
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"