匹配所有第4个字段不包含Asia的输入行.
注意到，字符串匹配模式
/Asia/
是
$0 - /Asia/
的简写形式
正则表达式
28
正则表达式是一种用于指定和匹配字符串的表示法，就像算术表达式一样，一个正则表达式是一个
基本表达式，或者是多个子表达式通过运算符组合而成，为了理解被一个正则表达式匹配的字符事，我们
需要先了解被子表达式匹配的字符串，
正则表达式
1.正则表达式的元字符包括：
\^$.[11()*+?
2.一个基本的正则表达式包括下面几种：
一个不是元字符的字符，例如A，这个正则表达式匹配的就是它本身。
一个匹配特殊符号的转义字符：\t匹配一个制表符（见表2.2）
一个被引用的元字符，例如\*，按字面意义匹配元字符，
匹配一行的开始，
$匹配一行的结束，
，匹配任意一个字符。
一个字符类：[ABC]匹配字符A,B或C.
字符类可能包含缩写形式：[A-Za-z]匹配单个字母.
一个互补的字符类：[^0-9]匹配任意一个字符，但是除了数字。
3.这些运算符将正则表达式组合起来：
选择：AB匹配A或B.
拼接：AB匹配后面繁限着B的A.
闭包：A*匹配0个或多个A.
正闭包：A+匹配一个或多个A
零或一：A？匹配空字符串或A
---
## Page 34
第二章AWK语言
26
括号：被（r）匹配的字符串，与r所匹配的字符串相网
基本的正则表达式在上面的表格中列出.字符
\^$.[]I()*+?
的正则表达式匹配它自身，于是，一个字母或一个数字都算作是一个基本的正则表达式，与白身相匹配，
为了在正则表达式中保留元字符的字面意义，需要在字符的前面加上反舒杠.于是，\S匹配普通字符S.
如果某个字符前面冠有\，我们就说该字符是被引用（quoted)的
在一个正则表达式中，一个未被引用的脱字符”表示一行的开始，一个未被引用的美元符S匹配一
行的结束，一个未被引用的句点，匹配任意一个字符，于是，
^C
匹配以字符c开始的字符串；
C$
匹配以字符C结束的字符串；
^C$
匹配只含有单个字符C的字符串；
*.$
匹配有且仅有一个字符的宇符事；
...$
匹配有且仅有3个字符的字符串；
匹配任意3个字符；
\.$
匹配以句点结束的字符串。
29
由一组被包围在方括号中的字符组成的正则表达式称为字符类（character class);这个表达式匹配
字符类中的任意一个字符.例如，[AEIOU】匹配A,E,I,O或U
使用连字符的字符类可以表示一段字符范围，紧跟在连字符左边的字符定义了范围的开始，紧跟
在连字符右边的字符定叉了范圈的结束.于是，[0-9]匹配任意一个数字，[a-2A-2][0-9】匹配一个
后面紧限着一个数字的字母，如果左右两边都没有操作数，那么字符类中的连字符就表示它本身，所以
[+-]与[-+]匹配一个+或-.[A-Za-2-]+匹配一个可能包含连字符的单词.
一个互补（complemented)的字符类在[之后以～开始，这样一个类匹配任意一个不在类中的字
符，“类中的字符”指的是方括号内排在脱字符之后的那些字符，于是，【"0-9】匹配任意一个不是数字的
字符；[a-ZA-Z]匹配任意一个不是字母的字符
^[ABC]
匹配以A,B,或C开始的字符串；
^[^ABC]
匹配以任意一个字符（除了A,B，或C）开始的字符串；
[^ABC]
匹配任意一个字符，除了A，B，或C；
“[^a-2]S匹配任意一个有且仅有一个字符的字符串，且该字符不能是小写字母.
在一个字符类中，所有的字符都具有它自身的字面意义，除了引用字符\，互补字符类开头的^，以
及两个字符间的-.于是，【·】匹配一个句点，“[””]匹配不以脱字符开始的字符串。
接.选择运算符|用来指定一个选择：如果r与F2是正则表达式，那么r1r2所匹配的字符串，或者与
F1,或者与r匹配.
Awk不存在显式的拼接运算符.如果r与r是正则表达式，那么（r）（r）（在（r）与（r2）之间
没有空格）所匹配的字符串具有形式xy，其中x被r1匹配，y被r2匹配.如果被括号包围的正则表达式
不包含选择运算符，那么r或r两边的括号就可以省略，正则表达式
---
## Page 35
第二章AWK语言
27
(Asian|European|North American) (male|female) (black|blue)bird
一共匹配12种字符串，从
Asian male blackbird
30
North American female bluebird
符号*，+与？是一元运算符，用来指定正则表达式的重复次数，如果r是一个正则表达式，那么
（r)*所匹配的字符串含有零个或连续多个能被r匹配的子符串，r?匹配的字符串，要么是空字符串，要
么是能够被r匹配的字符串.如果r是一个基本的正则表达式，那么括号可以省略。
B*
匹配空字符串，或B，BB，等等.
AB*C
匹配AC，或ABC，ABBC，等等
AB+C
匹配ABC，或ABBC,ABBBC，等等.
AB?C
匹配AC或ABC
[A-Z]+[
匹配由一个或多个大写字母组成的字符串，
(AB）+C匹配ABC,ABABC,ABABABC,等等.
在正则表达式中，选择运算符|的优先级最低，然后是拼接运算，最后是重复运算符*，+，与？.与
算术表达式的规则一样，优先级高的运算符优先处理，这种规则经常使得括号被省略：abcd等价于
(ab)|(cd)，~ab|cd*e$等价于（~ab)|(c(d*）e$)
为了结束关于正则表达式的讨论，这里列出了一些比较有用的字符串匹配模式的例子，这些例子都
带有使用了一元与二元运算符的正则表达式，同时还描述了能够被该模式匹配的输入行，回想一下，如果
当前输入行含有至少一个能够被r匹配的子字符串，那么模式/r/匹配成功.
/[09]+$ /
匹配含有且只含有数字的输入行。
/~[0-9][0-9][0-9]$/
输入行有且仅有3个数字。
/(\+|)?[09]+\. ?[09]*$/
十进制小数，符号与小数部分是可选的
/[+- ]?[09】+[- ]?[09]*$/
也是匹配十进制小数，带有可选的符号与小数部分，
/[ +- ]?([ 09 ]+[ - ]?[ 09 ] *|[ - ][ 09]+ ) ([eE][ +- ]?[09 ]+) ?$ /
浮点数，符号与指数部分是可选的
/^[A-Za-z][A-Za-20-9]*$/
一个字母，后面再跟着任意多个字母或数字（比如awk的变量名）
---
## Page 36
第二章AWK语言
28
/^[AZa-2]S|~[A-Za-z][0-9]$/
一个字母，又或者是一个后面跟着一个数字的字母（比如Basic的变量名）.
/ ~[A-Za-2][09]?$ /
同样是一个字母，又或者是一个后面跟着一个数字的字母。
在第3个例子中，为了匹配元字符+与一的字面值，必须在它们的前面加上反斜杠，而在字符类中则不需
要，所以第3项与第4项的功能是等价的.
31
任意一个被一对斜杠包围的正则表达式都可以作为匹配运算符的右操作数：程序
$2 1~ / ~[ 0-9]+$/
打印那些第2个字段不全是数字的行.
在正则表达式与字符串内部，awk使用一个特定的字符序列—转叉序列（escape sequences)—来表
示那些无法用其他方式表示的字符，例如，n表示一个换行符，它无法以其他方式出现在字符串或正则
表达式中；\b表示退格符；\t表示制表符；007表示ASCII中的响铃符；\/表示一个斜杠，转义序列在
awk程序中才会有特殊的意义；如果在数据中，它们则是普通的字符，完整的转义序列名单在表2.2.
表2.2:转义序列
序列
意义
\b
退格
\f
\n
换行
\r
回年
t
制表符
\ddd
八进制数ddd，ddd含有1到3个数字，每个数字的值在0到7之间
c
其他的字面意义上的e（举例来说，\\表示反斜杠，\”表示双引号）
表2.3总结了正则表达式，以及它们所匹配的字符事，运算符按优先级递增的顺序列出，
复合模式
一个复合模式是一个组合了其他模式的表达式，通过括号，逻辑运算符11(OR)，&&(AND），1(NOT)
来进行组合.如果表达式的值为真，那么复合模式就匹配当前输入行.下面这个程序使用AND运算符来
选择那些第4个字段是Asia且第3个字段大于500的行：
32
00S
一个范围模式不能是其他模式的一部分
模式总结
表2.4总结了可以出现在模式-动作语句中的模式种类
表2.4:模式
模式
例子
匹配
BEGIN
BEGIN
输入被读取之前
END
END
所有输入被读取完之后
expression
$3< 100
第3个字段小于100的行
string-matching
/Asia/
含有Asia 的行
compound
$3 < 100 && $4 == "Asia"
第3个字段小于100并且第4个字段含
有Asia 的行
range
NR==10, NR==20
输入的第10行到第20行.
2.2
动作
34
在一个模式-动作语句中，模式决定动作什么时候执行，有时候动作会非常简单：一条单独的打印
语句或赋值语句，在有些时候，动作有可能是多条语句，语句之间用换行符或分号分开，这一小节通过讨
论表达式与流程控制语句来丹始对动作的描述，这节结束后，将会讨论用户自定义函数与输入/输出语
句.
---
## Page 39
第二章AWK语言
31
动作
动作中的语句可以包括：
expression，包括常量，变量，赋值，函数调用等等.
print expression-list
printf (format, expression-list)
if (expression) statements
if(expression) statements else statements
while (expression) statements
for(expression;expression;expression)statements
for (expression in array) statements