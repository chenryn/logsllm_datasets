# 【技术分享】利用DLL延迟加载实现远程代码注入
|
##### 译文声明
本文是翻译文章，文章来源：hatriot.github.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
译者：[shan66](http://bobao.360.cn/member/contribute?uid=2522399780)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
在本文中，我们将为读者详细介绍一种新型的远程代码注入技术，实际上，这种技术是我在鼓捣延迟加载DLL时发现的。通过该技术，只要这些进程实现了本文所利用的功能：延迟加载DLL，攻击者可以将任意代码注入到正在运行的任何远程进程中。更准确的说，这并不是一个漏洞利用，而是一种潜入其他进程的策略。
现代的代码注入技术通常依赖于两个不同的win32
API调用的变体：CreateRemoteThread和NtQueueApc。然而，最近有人发表了一篇非常棒的文章[0]，详细介绍了十种进程注入的方法。当然，这些方法并非都能注入到远程进程中，特别是那些已经在运行的进程，但那篇文章针对最常见的各种注入技术进行了非常细致的讲解，这一点是难能可贵的。而本文介绍的这个策略更像是inline
hooking技术，不过我们没有用到IAT，并且也不要求我们的代码已经位于该进程中。我们不需要调用NtQueueApc或CreateRemoteThread，也不需要挂起线程或进程。但是，凡事都会或多或少有一些限制，具体情况将在后文中详细介绍。
**延迟加载DLL**
****
延迟加载是一种链接器策略，即允许延迟加载DLL。可执行文件通常会在运行时加载所有必需的动态链接库，然后执行IAT修复。
然而，延迟加载技术却允许这些库直到调用时才加载，为此，可以在第一次调时使用伪IAT进行修复处理。这个过程用下图来进行完美的阐释：
上图来自1998年Microsoft发布的一篇非常棒的文章[1]，尽管该文所描述的策略已经非常棒了，但是这里我们会设法让它更上一个台阶。
通常PE文件中都含有一个名为IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT的数据目录，您可以使用dumpbin/imports或windbg进行查看，其结构描述详见delayhlp.cpp中，读者可以在WinSDK中找到它：
    struct InternalImgDelayDescr {
        DWORD           grAttrs;        // attributes
        LPCSTR          szName;         // pointer to dll name
        HMODULE *       phmod;          // address of module handle
        PImgThunkData   pIAT;           // address of the IAT
        PCImgThunkData  pINT;           // address of the INT
        PCImgThunkData  pBoundIAT;      // address of the optional bound IAT
        PCImgThunkData  pUnloadIAT;     // address of optional copy of original IAT
        DWORD           dwTimeStamp;    // 0 if not bound,
                                        // O.W. date/time stamp of DLL bound to (Old BIND)
        };
这个表内存放的是RVA，而不是指针。 我们可以通过解析文件头来找到延迟目录的偏移量：
    0:022> lm m explorer
    start    end        module name
    00690000 00969000   explorer   (pdb symbols)          
    0:022> !dh 00690000 -f
    File Type: EXECUTABLE IMAGE
    FILE HEADER VALUES
    [...] 
       68A80 [      40] address [size] of Load Configuration Directory
           0 [       0] address [size] of Bound Import Directory
        1000 [     D98] address [size] of Import Address Table Directory
       AC670 [     140] address [size] of Delay Import Directory
           0 [       0] address [size] of COR20 Header Directory
           0 [       0] address [size] of Reserved Directory
第一个entry及其延迟链接的DLL可以在以下内容中看到：
    0:022> dd 00690000+ac670 l8
    0073c670  00000001 000ac7b0 000b24d8 000b1000
    0073c680  000ac8cc 00000000 00000000 00000000
    0:022> da 00690000+000ac7b0 
    0073c7b0  "WINMM.dll"
这意味着WINMM是动态地链接到explorer.exe的，由于是延迟加载，所以在导入的函数被调用之前，它是不会被加载到进程中的。一旦加载，帮助函数将通过使用GetProcAddress来定位目标函数并在运行时修复这个表，从而完成IAT的修复工作。
引用的伪IAT与标准PE IAT是分开的；该IAT专用于延迟加载功能，并通过延迟描述符进行引用。例如，就WINMM.dll来说，WINMM的伪IAT为RVA
000b1000。第二个延迟描述符entry的伪IAT具有单独的RVA，其他依此类推。
下面我们使用WINMM来说明延迟加载，资源管理器会从WINMM中导入一个函数，即PlaySoundW。在我实验中，它没有被调用，所以伪IAT还没有修复。
我们可以通过转储的伪IAT条目来查看这一点：
    0:022> dps 00690000+000b1000 l2
    00741000  006dd0ac explorer!_imp_load__PlaySoundW
    00741004  00000000
这里，每个DLL条目都是以null结尾的。上面的指针告诉我们，现有的条目只是在Explorer进程中的跳板。这需要我们：
    0:022> u explorer!_imp_load__PlaySoundW
    explorer!_imp_load__PlaySoundW:
    006dd0ac b800107400      mov     eax,offset explorer!_imp__PlaySoundW (00741000)
    006dd0b1 eb00            jmp     explorer!_tailMerge_WINMM_dll (006dd0b3)
    explorer!_tailMerge_WINMM_dll:
    006dd0b3 51              push    ecx
    006dd0b4 52              push    edx
    006dd0b5 50              push    eax
    006dd0b6 6870c67300      push    offset explorer!_DELAY_IMPORT_DESCRIPTOR_WINMM_dll (0073c670)
    006dd0bb e8296cfdff      call    explorer!__delayLoadHelper2 (006b3ce9)
tailMerge函数是一个链接器生成的存根，它在每个DLL中编译，而不是每个函数。
__delayLoadHelper2函数是处理伪IAT的加载和修补的magic。根据delayhlp.cpp可知，该函数用来处理LoadLibrary/GetProcAddress调用以及修复伪IAT。为了便于演示，我编译了一个延迟链接dnslib的二进制文件。下面是DnsAcquireContextHandle的解析过程：
    0:000> dps 00060000+0001839c l2
    0007839c  000618bd DelayTest!_imp_load_DnsAcquireContextHandle_W
    000783a0  00000000
    0:000> bp DelayTest!__delayLoadHelper2
    0:000> g
    ModLoad: 753e0000 7542c000   C:Windowssystem32apphelp.dll
    Breakpoint 0 hit
    [...]
    0:000> dd esp+4 l1
    0024f9f4  00075ffc
    0:000> dd 00075ffc l4
    00075ffc  00000001 00010fb0 000183c8 0001839c
    0:000> da 00060000+00010fb0 
    00070fb0  "DNSAPI.dll"
    0:000> pt
    0:000> dps 00060000+0001839c l2
    0007839c  74dfd0fc DNSAPI!DnsAcquireContextHandle_W
    000783a0  00000000
现在伪IAT条目已被修复，这样在后续调用中就能调用正确的函数了。这样，伪IAT就同时具有可执行和可写属性：
    0:011> !vprot 00060000+0001839c
    BaseAddress:       00371000
    AllocationBase:    00060000
    AllocationProtect: 00000080  PAGE_EXECUTE_WRITECOPY
此时，DLL已经加载到进程中，伪IAT也已修复。当然，并不是所有的函数都能够在加载时进行解析，相反，只有被调用的函数才能这样。
这会让伪IAT中的某些条目处于混合状态：
    00741044  00726afa explorer!_imp_load__UnInitProcessPriv
    00741048  7467f845 DUI70!InitThread
    0074104c  00726b0f explorer!_imp_load__UnInitThread
    00741050  74670728 DUI70!InitProcessPriv
    0:022> lm m DUI70
    start    end        module name
    74630000 746e2000   DUI70      (pdb symbols)