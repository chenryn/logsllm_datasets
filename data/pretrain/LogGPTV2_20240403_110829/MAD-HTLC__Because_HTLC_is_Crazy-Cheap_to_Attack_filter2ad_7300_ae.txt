than one redeeming HTLC. At the current Bitcoin common
fees [122] and exchange rate [123] implies an additional cost
of a mere $0.02. Including the auxiliary MH-Col implies an
additional cost of about $0.10.
Further size-reduction optimizations such as using SegWit
transactions and merging multiple transactions can also be
made, but are outside the scope of this work.
Ethereum implementation: Compared to Bitcoin’s Script,
Solidity [36], [42] is a richer smart contract language, allowing
MAD-HTLC to be expressed as a single contract consolidating
MH-Dep and MH-Col.
On the Ethereum platform transactions pay fees according
to their so-called gas usage, an inner form of currency de-
scribing the cost of each operation the transaction performs.
We compare the initiation and redeeming costs of HTLC and
MAD-HTLC. Note that MAD-HTLC contains about twice the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1239
Table IV: Ethereum gas for contract initiation and redeeming.
Contract
HTLC
Initiation [gas]
362,000
MAD-HTLC
600,000
Redeem path
htlc-A
htlc-B
dep-A
dep-B
dep-M
col-B
col-M
Redeeming [gas]
34,734
32,798
58,035
58,885
59,043
41,175
44,887
code of HTLC, and as expected, its operations are more gas-
consuming. We bring the details in Table IV.
We stress these numbers regard the most basic, straight-
forward implementation, and that Ethereum and Solidity en-
able further optimizations – for example, deploying a more
elaborate library contract once [124], and simpler contract
instances that use the library, achieving signiﬁcantly reduced
amortized costs. More importantly, the additional fee costs
are independent of (e.g., $0.2 [125]), and can be negligible
compared to, the secured amounts (e.g., $6.2K [125]).
Recall that for off-chain channels this overhead is incurred
only in the abnormal unilateral channel closure.
Main network deployment: We deployed MAD-HTLC on
both blockchains (Appendix C details the transaction IDs).
For Bitcoin, we deployed three MH-Dep instances on the
main network and redeemed them using its three redeem paths.
We also deployed two MH-Col instances and redeemed using
its two redeem paths.
For Ethereum, we deployed a consolidated MAD-HTLC,
and posted transactions redeeming the vdep through both dep-A
and dep-B. These transactions offered relatively low fees,
so were not included in a block by any miner, and only
revealed prea and preb. At this point there were no other
transactions trying to redeem the MAD-HTLC, although users
and miners monitoring the blockchain could have created a
transaction redeeming the vdep using the dep-M with the
revealed prea and preb. We deduce this optimization currently
does not take place on the Ethereum main network.
Then, we published a transaction of our own using dep-M,
revealing (again) prea and preb, offering a relatively-high fee.
Nevertheless, our transaction was slightly out-bid by another
transaction, which also used dep-M, and took the deposit.
It was likely published by a front-running bot [37], [56],
[60], presenting yet another example of entities monitoring the
blockchain looking for MEV opportunities [37], [56], [60], as
required for MAD-HTLC security.
B. Bitcoin-MEV Infrastructure
By default, cryptocurrency clients [116]–[119] only perform
myopic transaction-inclusion optimizations, trying to generate
a single maximal-fee block each time. As recently shown [37],
[56], [60] (including in our deployment above), miners and
other entities perform more sophisticated optimizations on the
Ethereum network.
In contrast, we are not aware of similar optimizations
taking place on the Bitcoin network. Speciﬁcally, Bitcoin Core,
which is used by roughly 97% of current Bitcoin nodes [40],
maintains a local mempool data structure that only contains un-
conﬁrmed transactions whose timeouts (if any) have elapsed.
Figure 2: Bitcoin-MEV, new components shaded.
This implementation prevents miners from optimizing based
on transaction pending on a timeout. However, this limitation
is not a consensus rule, but an implementation choice. Taking
more elaborate considerations into account when choosing
transactions is not a violation of legitimate miner behavior.
As noted (§II-B), optimizing transaction revenue is becom-
ing more important for miners over time. To demonstrate the
ease of achieving broader optimizations, including non-myopic
considerations, we implemented Bitcoin-MEV, an infrastruc-
ture allowing to easily incorporate any logic over Bitcoin Core
received transactions.
Bitcoin-MEV’s main design goal is to enable users to deploy
their own optimization algorithms. It comprises a patched
(140 LoC) C++ Bitcoin Core node with additional RPCs, and
a Python script (Fig. 2, new components shaded), working as
follows.
When the node receives a new transaction,
instead of
directly placing it in its mempool, it pushes the transaction to a
designated new transaction queue. The Python script monitors
this queue with a dedicated RPC, fetches new transactions and
parses them. Then, based on the implemented optimization
algorithm, it can instruct the node how to handle the transac-
tion – insert it to the mempool, discard it, or keep it for future
use. The Python script can also generate new transactions and
send them to the node.
We implemented and locally tested a Python script
(350 LoC) for enforcing MAD-HTLC by taking advantage of
the opportunities it provides miners to increase their revenue.
We screen received transactions, tease out A and B’s preim-
ages, and create a transaction redeeming the MAD-HTLC
contracts using the extracted preimages.
VII. HTLC
The prevalent
translation of
implementation of HTLC-Spec is a di-
the speciﬁcation to a single contract
rect
called HTLC (§VII-A).
It relies on the premise that miners benevolently enforce
the desired execution, namely include A’s transaction in a
block before the timeout elapses. However, this assumption
contradicts the core principle of cryptocurrency permissionless
systems — miners operate to make proﬁt [57], [58], [62]–[67],
and include transactions that beneﬁt their personal gains [37],
[56], [59], [61]. Speciﬁcally, B can incentivize miners with a
bribe [26]–[28] to exclude A’s transaction until the timeout
elapses, and then redeem the HTLC himself.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1240
New txPatched Bitcoin Core (C++)mempoolTx QueueTx Buffer1MEV Logic (Python)2New txs4Buffer instructions5Insert txto mempoolInsert generated tx3Choose txsformempool1Predicate 3: HTLC
Parameters: pka, pkb, T, diga
HTLC (pre, sig) :=
11
22
(vPreImg (pre; diga) ∧ vSig (sig; pka)) ∨
(vSig (sig; pkb) ∧ vTime (T ))
// htlc-A
// htlc-B
We analyze the security of HTLC by formalizing the game
played by the entities (§VII-B), and showing how cheap B’s
required bribe is (§VII-C). We show miner fee optimization
is easy by implementing a bribery-accepting (i.e., rational
and non-myopic) miner (§VII-D), and conclude by estimating
the actual attack cost using numbers from operational con-
tracts (§VII-E).
A. Construction
A and B execute HTLC-Spec by having an HTLC con-
tracted with vdep tokens placed in some block bj. The HTLC’s
predicate is parameterized with A’s and B’s public keys, pka
and pkb, respectively; a hash digest of the predeﬁned se-
cret diga = H (prea) such that any entity other than A and B
does not know prea (A or B know prea based on the speciﬁc
use case); and a timeout T .
HTLC has two redeem paths, denoted htlc-A and htlc-B,
and presented in Predicate 3. In htlc-A (line 1), A can redeem
with a transaction including prea and siga, a signature with
her secret key ska. In htlc-B (line 2), B can redeem with a
transaction including sigb, a signature with his secret key skb.
This transaction can only be included in a block at least T
blocks after HTLC’s initiation, that is, block bj+T .
a offering a fee f h
entities cannot redeem the contract.
As only A and B know their respective secret keys, other
The intended way A and B should interact with HTLC
is as follows. If A knows the predeﬁned preimage prea, she
publishes a transaction txh
a > f that redeems
the HTLC. She publishes this transaction right after the
creation of block bj, that is, before the creation of block bj+1.
If A does not know the predeﬁned preimage prea she does
not publish any transactions.
B observes the published transactions in the mempool,
watching for txh
a. If by block bj+T−1 A did not publish txh
then B publishes txh
b with a fee f h
b > f, redeeming the HTLC.
If A did publish txh
a by block bj+T−1 then B does not publish
any transactions.
a
B. HTLC Game
HTLC operation gives rise to a game, denoted by ΓH,
played among A, B and the miners. It is similar to that of
the MAD-HTLC game (§V-B), so we present the differences.
a) Subgames: The game state is simply the number of
blocks (k) created so far and state of the HTLC, which
can be either redeemable (red) or irredeemable (irred), so
denoted ΓH (k, red/irred).
The game begins when one block (initiating the HTLC)
was created, A and B did not publish any transactions, and
the HTLC is redeemable. Thus, the initial, complete game
is ΓH (1, red).
a tokens as fee. Note txh
a can be conﬁrmed in any round.
b) Actions: A can redeem the HTLC with a transac-
tion txh
a, offering f h
a has to outbid
unrelated transactions and thus has to offer a fee f h
a > f,
however, cannot offer more tokens than the redeemed ones,
a  f h
a−f
λmin
b with fee f h
a with fee f h
b and to exclude txh
subgame ΓH (k, irred)
the utility of miner i
=
(cid:0)¯σ, ΓH (k, irred)(cid:1)
We now show the HTLC prescribed strategy (§VII-A) is not
incentive compatible. Speciﬁcally, we show that if A commits
to the prescribed strategy, then B strictly gains by publishing a
conﬂicting transaction, outbidding A’s fee, thus incentivizing
miners to exclude A’s transaction and include his instead.
Let A publish txh
a in the ﬁrst round, and B
publish a transaction txh
+ f. Focusing
on miner actions, we show through a series of lemmas they
are incentivized to include txh
a, resulting
with lower utility for A, higher utility for B, and a violation
of the HTLC-Spec.
First, we show miner utilities for subgames where the HTLC
is irredeemable. Denote by ¯σ the best response strategy of all
miners in this setting.
Lemma 7. For any k ∈ [1, T ],
is ui
in
λi (T − k + 1) f.
Proof. Since HTLC is irredeemable, the only available action
for miners is to include an unrelated transaction, yielding a
reward of f.
Consider any ΓH (k, irred) subgame. There are T − k + 1
remaining blocks to be created, and miner i creates any of
them with probability λi. This scenario can be viewed as
a series of T − k + 1 Bernoulli trials with success proba-
bility λi. The number of successes is therefore Binomially
distributed, and the expected number of blocks miner i creates
is λi (T − k + 1). The reward for each block is f, so miner i’s
utility is ui
We now consider miner utilities for ΓH (·, red) subgames,
where the HTLC is redeemable. We begin with the ﬁnal
subgame ΓH (T, red), creating block Bj+T .
Lemma 8. Choosing to include txh
b is a unique subgame
perfect equilibrium in ΓH (T, red), and miner i’s utility when
doing so is ui
Proof. In the ΓH (T, red) subgame, the miner that creates
the block has three transactions to pick from: an unrelated
transaction for the base fee f, txh
(cid:0)¯σ, ΓH (k, irred)(cid:1) = λi (T − k + 1) f.
(cid:0)¯σ, ΓH (T, red)(cid:1) = λif h
a for f h
a, or txh
b for f h
b.
b.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:31:06 UTC from IEEE Xplore.  Restrictions apply. 
1241
a−f
λmin
a and f h
b > f h
b > f h
+ f, 0  f, it follows
that f h
b yields
strictly greater reward than all other actions, thus being a
unique subgame perfect equilibrium in this subgame.
b > f. That means including txh
Miner i creates the block with probability λi, and so her
expected proﬁt, i.e. utility, is ui
(cid:0)¯σ, ΓH (T, red)(cid:1) = λif h
b.
We now move on to consider any earlier (k ∈ [1, T − 1])
subgame (Blocks Bj+1 to Bj+T−1 ) where the HTLC is
redeemable.
Lemma 9. For any k ∈ [1, T − 1],
the unique subgame
perfect equilibrium is that every miner includes an unrelated
transaction in ΓH (k, red), and miner i’s utility when doing so
is ui
(cid:0)¯σ, ΓH (k, red)(cid:1) = λi
(cid:0)(T − k) f + f h
(cid:1).
To prove this lemma we show that for any k ∈ [1, T − 1],
including A’s transaction in subgame ΓH (k, red) results with
lower overall utility at game conclusion – intuitively, it re-
deems the contract, so in the last subgame miners cannot
include B’s transaction. The proof is by induction on k, and
we bring it in full in Appendix D.
We conclude with the main theorem regarding HTLC sus-
b
a−f
λmin + f.
ceptibility to bribing attacks:
Theorem 2. Alice’s prescribed behavior of HTLC allows B
to bribe miners at a cost of f h
Proof. The proof
follows directly from Lemma 8 and
Lemma 9, both showing that if A naively follows the pre-
scribed strategy then subgame perfect equilibrium of the initial
subgame is for all miners to place unrelated transactions until
round T and then place B’s transaction.
Note that by Theorem 2, the bribing cost required to attack
HTLC is independent in T , meaning that simply increasing
the timeout does contribute to HTLC’s security.
Of course once A sees an attack is taking place she can
respond by increasing her fee. In turn, this could lead to B
increasing his fee as well, and so forth. Instead of focusing
on these bribe and counter-bribe dynamics, we conclude by
showing that A can preemptively prevent the attack, or assure
winning with a counter-bribe, by paying a high fee dependent
on vdep,. We note that such a high fee is in violation of the
HTLC-Spec.
Corollary 2. B cannot bribe the miners in this manner
if A’s txh
Proof. In order to achieve the attack, B ought to make placing
unrelated transactions until T and placing his transaction at T
a subgame perfect equilibrium. As shown (Theorem 2), the
threshold to incentivize the smallest miner is f h
+ f.
Recall
b is upper
bounded by the HTLC tokens vdep. Therefore, to achieve