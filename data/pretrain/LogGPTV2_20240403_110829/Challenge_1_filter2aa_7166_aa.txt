# Challenge 1
Worked with AvivC, YaakovC.
## Description
After entering the challenge, we arrive to a Kibana dashboard with the following description:
> The windows 10 user at 13.89.33.39 was attacked on February 5th. Find out what happened and help him revert the damage!
## Logs
The dashboard links to a series of 69 event logs which shed some light on the attack. The logs are visible via the Kibana GUI and are available in JSON format as well.
The `message` member usually contained a summary of each event. 
We'll use the following script to display it:
```python
import json, argparse
parser = argparse.ArgumentParser(description='JSON Log Viewer')
parser.add_argument('-f', '--file_id', required = True, help = 'JSON file ID')
args = parser.parse_args()
with open("{}.txt".format(args.file_id), 'r') as f:
    contents = f.read()
    j = json.loads(contents)
    print (j["_source"]["message"])
```
Let's take a look at the interesting events.
First, a program called `encrypt.exe` is creating (or encrypting) a file called `classified_document.txt`.
```console
root@kali:/media/sf_CTFs/hoshen/1/json# python3 view.py -f 6
File created:
RuleName:
UtcTime: 2020-02-05 15:16:21.519
ProcessGuid: {e01e78ba-dc45-5e3a-0000-00105bf4f621}
ProcessId: 13208
Image: C:\Users\user07\Downloads\encrypt.exe
TargetFilename: C:\Users\user07\Downloads\classified_document.txt
CreationUtcTime: 2020-01-20 12:29:02.272
```
It also hides a key in the registry:
```console
root@kali:/media/sf_CTFs/hoshen/1/json# python3 view.py -f 8
Registry value set:
RuleName: technique_id=T1183,technique_name=Image File Execution Options Injection
EventType: SetValue
UtcTime: 2020-02-05 15:16:21.488
ProcessGuid: {e01e78ba-dc45-5e3a-0000-00105bf4f621}
ProcessId: 13208
Image: C:\Users\user07\Downloads\encrypt.exe
TargetObject: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\challenge.exe\keyPath
Details: HKEY_USERS\S-1-5-18\Software\Microsoft\CTF\HiddenKey
```
It starts loading many Python crypto modules, e.g.:
```console
root@kali:/media/sf_CTFs/hoshen/1/json# python3 view.py -f 11
Image loaded:
RuleName: technique_id=T1073,technique_name=DLL Side-Loading
UtcTime: 2020-02-05 15:16:21.410
ProcessGuid: {e01e78ba-dc45-5e3a-0000-00105bf4f621}
ProcessId: 13208
Image: C:\Users\user07\Downloads\encrypt.exe
ImageLoaded: C:\Users\user07\AppData\Local\Temp\_MEI127042\Crypto\Cipher\_raw_aes.pyd
FileVersion: ?
Description: ?
Product: ?
Company: ?
OriginalFileName: ?
Hashes: SHA1=27AB93EEC020628D67A4987FDE001DA3BA5E35B4,MD5=5068682759149260D35E4BD981DA3848,SHA256=B832C6EE6D7E4EC7368035E835941E1E8AD71EFAEA0C8BC0B7B2B1528CE719FC,IMPHASH=62432F35F109091536AFBA636294DBCB
Signed: false
Signature:
SignatureStatus: Unavailable
```
Now, using `PsExec`, a command is issued:
```console
root@kali:/media/sf_CTFs/hoshen/1/json# python3 view.py -f 62
Process Create:
RuleName: technique_id=T1035,technique_name=Service Execution
UtcTime: 2020-02-05 15:16:19.919
ProcessGuid: {e01e78ba-dc43-5e3a-0000-0010b4aef621}
ProcessId: 14260
Image: C:\PSTools\PsExec64.exe
FileVersion: 2.2
Description: Execute processes remotely
Product: Sysinternals PsExec
Company: Sysinternals - www.sysinternals.com
OriginalFileName: psexec.c
CommandLine: C:\PSTools\PsExec64.exe  -h -u user07 -p ClngP@ss C:\Users\user07\Downloads\encrypt.exe
CurrentDirectory: C:\Users\hoshenCtf\
User: PUBLICCTF3\hoshenCtf
LogonGuid: {e01e78ba-f19a-5e25-0000-002092932500}
LogonId: 0x259392
TerminalSessionId: 3
IntegrityLevel: High
Hashes: SHA1=FB0A150601470195C47B4E8D87FCB3F50292BEB2,MD5=9321C107D1F7E336CDA550A2BF049108,SHA256=AD6B98C01EE849874E4B4502C3D7853196F6044240D3271E4AB3FC6E3C08E9A4,IMPHASH=159D56D406180A332FBC99290F30700E
ParentProcessGuid: {e01e78ba-d4a9-5e3a-0000-0010eae9d921}
ParentProcessId: 2220
ParentImage: C:\Windows\System32\cmd.exe
ParentCommandLine: "C:\windows\system32\cmd.exe"
```
Using this command, we get the following username and password combination: `user07:ClngP@ss`. We also know that there's another user: `hoshenCtf`.
We also see some network activity:
```console
root@kali:/media/sf_CTFs/hoshen/1/json# python3 view.py -f 65
Network connection detected:
RuleName: technique_id=T1036,technique_name=Masquerading
UtcTime: 2020-02-05 15:16:16.134
ProcessGuid: {e01e78ba-efed-5e25-0000-0010cf320200}
ProcessId: 3344
Image: C:\ProgramData\Microsoft\Windows Defender\Platform\4.18.1911.3-0\MsMpEng.exe
User: NT AUTHORITY\SYSTEM
Protocol: tcp
Initiated: true
SourceIsIpv6: false
SourceIp: 10.0.0.6
SourceHostname: publicCtf3.p2aj4t3wwgtudfbzkeksupkyig.gx.internal.cloudapp.net
SourcePort: 58670
SourcePortName:
DestinationIsIpv6: false
DestinationIp: 40.121.3.131
DestinationHostname:
DestinationPort: 443
DestinationPortName: https
root@kali:/media/sf_CTFs/hoshen/1/json# python3 view.py -f 66
Network connection detected:
RuleName:
UtcTime: 2020-02-05 15:16:15.838
ProcessGuid: {e01e78ba-efe0-5e25-0000-0010eb030000}
ProcessId: 4
Image: System
User: NT AUTHORITY\SYSTEM
Protocol: tcp
Initiated: true
SourceIsIpv6: true
SourceIp: fe80:0:0:0:8165:712:b68f:7ccc
SourceHostname: publicCtf3.p2aj4t3wwgtudfbzkeksupkyig.gx.internal.cloudapp.net
SourcePort: 58669
SourcePortName:
DestinationIsIpv6: true
DestinationIp: fe80:0:0:0:8165:712:b68f:7ccc
DestinationHostname: publicCtf3.p2aj4t3wwgtudfbzkeksupkyig.gx.internal.cloudapp.net
DestinationPort: 445
DestinationPortName: microsoft-ds
root@kali:/media/sf_CTFs/hoshen/1/json# python3 view.py -f 67
Network connection detected:
RuleName:
UtcTime: 2020-02-05 15:16:15.838
ProcessGuid: {e01e78ba-efe0-5e25-0000-0010eb030000}
ProcessId: 4
Image: System
User: NT AUTHORITY\SYSTEM
Protocol: tcp
Initiated: false
SourceIsIpv6: true
SourceIp: fe80:0:0:0:8165:712:b68f:7ccc
SourceHostname: publicCtf3.p2aj4t3wwgtudfbzkeksupkyig.gx.internal.cloudapp.net
SourcePort: 58669
SourcePortName:
DestinationIsIpv6: true
DestinationIp: fe80:0:0:0:8165:712:b68f:7ccc
DestinationHostname: publicCtf3.p2aj4t3wwgtudfbzkeksupkyig.gx.internal.cloudapp.net
DestinationPort: 445
DestinationPortName: microsoft-ds
```
This includes access to port 445 ("SMB over IP").
## Samba: 13.89.33.39
Let's take a look at what samba shares are available over the system that was attacked using the credentials we found.
```console
root@kali:/media/sf_CTFs/hoshen/1# smbclient -L 13.89.33.39 -U user07%ClngP@ss
        Sharename       Type      Comment
        ---------       ----      -------
        ADMIN$          Disk      Remote Admin
        C$              Disk      Default share
        D$              Disk      Default share
        IPC$            IPC       Remote IPC
        user07          Disk
SMB1 disabled -- no workgroup available
```
Using `smbmap` we can get a few more details:
```console
root@kali:/media/sf_CTFs/hoshen/1# smbmap -H 13.89.33.39 -u user07 -p ClngP@ss
[+] Finding open SMB ports....
[+] User SMB session established on 13.89.33.39...
[+] IP: 13.89.33.39:445 Name: 13.89.33.39