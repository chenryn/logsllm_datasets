title:Donky: Domain Keys - Efficient In-Process Isolation for RISC-V and
x86
author:David Schrammel and
Samuel Weiser and
Stefan Steinegger and
Martin Schwarzl and
Michael Schwarz and
Stefan Mangard and
Daniel Gruss
Donky: Domain Keys – Efficient In-Process Isolation 
for RISC-V and x86
David Schrammel, Samuel Weiser, Stefan Steinegger, Martin Schwarzl, Michael 
Schwarz, Stefan Mangard, and Daniel Gruss, Graz University of Technology
https://www.usenix.org/conference/usenixsecurity20/presentation/schrammel
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.Donky: Domain Keys – Efﬁcient In-Process Isolation
for RISC-V and x86
David Schrammel, Samuel Weiser, Stefan Steinegger, Martin Schwarzl,
Michael Schwarz, Stefan Mangard, Daniel Gruss
Graz University of Technology
Abstract
Efﬁcient and secure in-process isolation is in great demand,
as evidenced in the shift towards JavaScript and the recent re-
vival of memory protection keys. Yet, state-of-the-art systems
do not offer strong security or struggle with frequent domain
crossings and oftentimes intrusive kernel modiﬁcations.
We propose Donky, an efﬁcient hardware-software co-
design for strong in-process isolation based on dynamic mem-
ory protection domains. The two components of our design
are a secure software framework and a non-intrusive hardware
extension. We facilitate domain switches entirely in userspace,
thus minimizing switching overhead as well as kernel com-
plexity. We show the versatility of Donky in three realistic use
cases, secure V8 sandboxing, software vaults, and untrusted
third-party libraries. We provide an open-source implemen-
tation on a RISC-V Ariane CPU and an Intel-MPK-based
emulation mode for x86. We evaluate the security and per-
formance of our implementation for RISC-V synthesized on
an FPGA. We also evaluate the performance on x86 and
show why our new design is more secure than Intel MPK.
Donky does not impede the runtime of in-domain computa-
tion. Cross-domain switches are 16–116x faster than regular
process context switches. Fully protecting the mbedTLS cryp-
tographic operations has a 4 % overhead.
1 Introduction
Memory isolation is a fundamental building block for develop-
ing secure systems. Hence, concepts of memory isolation can
be found on all layers in the software stack, e.g., via process
isolation via separate address spaces. However, recent use
cases demand more ﬁne-grained isolation, especially within a
process, where traditional process isolation would incur too
substantial performance costs. Especially cloud providers are
in the process of abandoning process isolation in favor of
language-level sandboxing, e.g., via V8 Isolates [16].
Isolation through the V8 sandbox has use cases in the
cloud [16], desktop applications [61], and browsers [81].
Unfortunately, JavaScript engines have a huge potential for
vulnerabilities, such as memory corruption, incorrect com-
piler optimizations, type confusion, or erroneous code gen-
eration [33, 68, 70], and strong hardware-backed sandboxing
is needed. Similarly, native applications may load untrusted
(and potentially closed-source) third-party libraries [78], or
use a library for certain secure operations. The principle
of least privilege would require isolation of such libraries
from the rest of the program. However, traditional process
isolation is oftentimes prohibitive in practice. Hence, prior
work studied more lightweight in-process isolation tech-
niques [14, 15, 30, 35, 44, 50, 51, 56, 72, 82, 85, 89, 94, 99].
In-process isolation mechanisms range from control ﬂow
schemes [30], over capability designs [58, 85, 89], to protec-
tion key mechanisms operating on memory pages [15, 82, 99]
for various architectures [4, 19, 22, 37, 63]. These designs fol-
low either a security-focused approach (e.g., privileged key
switches) with oftentimes signiﬁcant performance impact or
favor performance (e.g., fast key switches) at the cost of re-
duced security. For instance, Intel MPK [19, 46] is fast but
allows manipulations of the MPK access policy and, thus, can-
not directly be used as a secure sandbox. Instead, prior work
uses binary scanning and non-writable code pages to prevent
manipulations (e.g., ERIM [82]), complicating sandboxing
just-in-time-compiled JavaScript code. If an attacker gains
arbitrary code execution, all MPK-based approaches lose their
protection guarantees. Others guard their memory access pol-
icy via the kernel, which, while secure, demands costly or
intrusive kernel interaction and modiﬁcations [15, 35, 50, 99].
Finally, existing architectures are oftentimes limited to 16
protection domains [4, 19], and software emulation of more
domains has a substantial performance cost [64].
Since existing solutions have different security and perfor-
mance goals or involve heavy kernel interaction, we identify
the following research question and challenge:
As the objectives of MPK (high performance) and kernel-
based approaches (high security) are seemingly contradictory,
can these two approaches be combined? How can protection
keys be securely and efﬁciently managed in userspace?
USENIX Association
29th USENIX Security Symposium    1677
In this paper, we solve this challenge with Donky, a
hardware-software co-design providing strong in-process iso-
lation guarantees based on memory protection keys. Donky
offers pure userspace policy management with negligible
overhead and full backward-compatibility. Memory pages
are dynamically assigned to protection domains, providing
strict hardware-backed isolation between domains. Moreover,
policy management is entirely decoupled from the kernel
and instead delegated to a self-protecting userspace monitor.
Donky provides substantially stronger security guarantees
than previous designs [82], at a low performance cost.
We demonstrate the versatility of Donky in three realistic
use cases: First, we augment the JavaScript V8 engine with
isolation guarantees that usually can only be achieved by
spawning multiple instances of the V8 engine, i.e., process
isolation. Second, we isolate a third-party library from the
main program, preventing illegitimate access to the main
program’s data, e.g., a parsing library without full access to
the program’s address space. Third, we build a software vault
using Donky with security guarantees that can usually only be
obtained by running the software vault in a separate process.
Our design consists of two components. The ﬁrst compo-
nent is a secure software framework to deﬁne and handle mem-
ory protection domains in userspace, e.g., for just-in-time com-
piled code or third-party binary code. Its core, a lightweight
protection domain monitor library called DonkyLib, exposes
Donky functionality, such as secure in-userspace domain
switching and modiﬁcation, to an application developer. We
completely outsource system call ﬁltering to a privileged
userspace domain to avoid usage of extended Berkeley Packet
Filters (eBPFs), which have been used several times for kernel
exploitation [77]. Expensive context switches to the kernel are
not necessary for switching or modifying protection domains.
The second component of Donky is a small hardware ex-
tension. Our full open-source hardware implementation is
based on the RISC-V Ariane CPU and evaluated on a Xil-
inx Kintex-7 FPGA KC705. We also implement an Intel-
MPK-based emulation mode for x86. We show that a full
Donky implementation provides higher security guarantees
than MPK-based schemes currently can provide: Donky has
a special userspace protection key policy register protected
via a hardware call gate. Consequently, we do not need binary
inspection or rewriting to guarantee that malicious code can-
not change it, unlike all isolation techniques building upon
Intel’s current MPK implementation [82], and Donky can
shield against arbitrary code execution. We outline hardware
changes to Intel MPK for full Donky support.
We provide a thorough performance analysis for our RISC-
V-based implementation and also, despite the lower security
guarantees, for our emulation mode on x86. We show that
the performance cost in both implementations of Donky is
negligible when compared to the cost of process isolation and
earlier proposals. Finally, we discuss previous work on in-
process isolation in detail and ﬁnd that previous work focused
only on some goals of Donky (e.g., only isolating trusted
code [15]) or even entirely orthogonal goals like CFI [30].
In summary, our contributions are as follows:
• We propose Donky, efﬁcient userspace memory protection
domains, without requiring control-ﬂow integrity, binary
inspection, or binary rewriting.
• We provide an open-source implementation1 on a RISC-V
• We repurpose the RISC-V extension for user-level inter-
rupts for managing access policies entirely in userspace.
• We evaluate Donky on V8 just-in-time-compiled JavaScript
code and native code. Donky is 1–2 orders of magnitude
faster than process-based isolation and shows a negligible
overhead over no isolation on real-world software.
CPU, with higher security than MPK-based schemes.
Paper Outline. Section 2 provides background on RISC-V
and protection keys. Section 3 overviews Donky’s design.
Section 4 details the software component. Section 5 details
the hardware extension. Section 6 evaluates Donky’s perfor-
mance and security. Section 7 qualitatively evaluates Donky
in terms of applicability, performance, and security. Section 8
discusses related work, and Section 9 concludes.
2 Background
In this section, we overview RISC-V, virtual memory, existing
protection key architectures, and JavaScript JIT engines.
2.1 RISC-V
RISC-V is a free and open-source instruction set architecture
(ISA). It comprises the unprivileged ISA [28], and the privi-
leged ISA [27]. A set of control and status registers (CSRs)
allows conﬁguring the CPU behavior, access performance
metrics, and provides additional scratch space for exception
handling. CSRs are typically preﬁxed with m, for machine
mode, s, for supervisor mode, or u, for user mode. Exceptions
occur upon various occasions, e.g., memory violations. To
handle the exception, the CPU switches to machine mode and
jumps to the address speciﬁed in the trap-vector base-address
register (mtvec CSR). Exceptions can be delegated to super-
visor mode in the medeleg CSR. The instructions mret and
sret are used to return from the exception handler.
RISC-V speciﬁes the so-called “Standard Extension for
User-Level Interrupts”, also abbreviated as N extension [29].2
The N extension is intended for embedded systems, and user
mode exception handling (e.g., for garbage collection or inte-
ger overﬂows) is only brieﬂy discussed as a potential use case
for non-embedded systems (e.g., Unix). The N extension adds
the utvec and sedeleg CSRs, amongst others, to delegate
exceptions and interrupts directly to user mode handlers with-
out invoking higher privileged code. As with higher privilege
1https://github.com/IAIK/Donky
2It is currently in draft status for the RISC-V ISA 1.12.
1678    29th USENIX Security Symposium
USENIX Association
modes, utvec allows for vectorized exceptions, and the uret
instruction is used to return from the handler.
Ariane [1, 96] is a 64-bit single issue, 6-stage, in-order
CPU, optimized for short critical path length. It implements
the RV64IMAC RISC-V ISA and features the M, S, and U
privilege modes. Ariane implements v1.10 of the privileged
and the working draft of the unprivileged RISC-V ISA v2.3.
Thus, it can run Unix-like operating systems.
2.2 Address Translation
Modern 64-bit CPUs typically support 48-bit (recently also
57-bit) virtual address spaces, used for process isolation. For
virtual-to-physical address translation, address spaces are
mapped in blocks of pages, most commonly 4 KiB. Mod-
ern CPUs support multiple levels of translation tables, which
are stored in memory. Their entries (also called page-table en-
tries) are cached in the so-called translation-lookaside buffer
(TLB). Switching between processes, and thus address spaces,
means updating a CPU register to point to a different set of
translation tables and ﬂushing the TLB unless it is tagged
with an address-space identiﬁer. Via the page-table entries
(PTEs), access permissions are managed per page, such that
the same physical page may be mapped in multiple virtual ad-
dress spaces (i.e., multiple processes, shared memory), even
with different access permissions. Updates to permissions,
mappings, or the switching of the address space can only be
done by the kernel. Hence, context switches are required for
any of these operations to isolate contexts (e.g., processes)
from each other.
2.3 Memory Protection Keys
Memory protection keys are an extension to page-based mem-
ory permissions, allowing to change permissions of memory
ranges without the slow kernel-level modiﬁcation of page
tables. Instead, page-table entries are tagged with a protection
key, but the permissions (which the hardware enforces) for
these keys are stored separately. Keys are usually associated
with a protection domain (e.g., application, library, module),
and each (typically virtual) memory region can have one asso-
ciated key. Processes can have one or more keys assigned (e.g.,
one key per application on System/360) via special registers.
Today’s implementations differ mainly in the number of
loaded keys per thread and process, the types of permissions,
if the protection key policy register is privileged or not, as
well as memory region granularity. The main differences of
protection key implementations of some notable hardware
architectures are as follows:
Intel’s Memory Protection Keys (MPK) [19] use 4-bit
keys stored in the page-table entry, allowing for 15 differ-
ent domains per process. The corresponding read- and write-
disable bits for each key are stored in the PKRU (User Page
Key Register) and checked by the hardware upon access. As
the PKRU is non-privileged, allowing fast domain-switching
in userspace, MPK itself does not provide secure in-process
isolation and, to obtain such, has to be combined with other
mechanisms (such as CFI and binary scanning).
ARM Memory Domains [4] are deﬁned in ARMV8 for
AArch32 but were dropped in AArch64. They use 4-bit do-
main IDs (keys) in the translation tables and a kernel-mode
Domain Access Control Register (DACR) with a 2-bit ﬁeld
per key. With DACR, access can either be denied, enforced
at PTE level, or fully allowed, bypassing PTE permissions.
Since only the ﬁrst-level page-table entries contain domain
IDs, domain boundaries must be aligned at 1 MB blocks.
IBM’s Power [37] architecture supports 5-bit protection
keys, allowing 32 different memory domains. Its privileged
(kernel mode) registers (AMR and IAMR) store read, write,
and execute permissions for each key.
HP PA-RISC [63] uses 15–18-bit “protection identiﬁers”
with a write-disable bit each stored in privileged control reg-
isters. Instead of storing a write-disable bit for each of the
keys (which would require a 218 bit register), they have four
registers to load one key each.
Itanium (IA-64) [22] is very similar to PA-RISC but pro-
vides (at least) 16 registers with 18–24-bit keys each and have
additional read- and execute-disable bits as well as a valid bit.
The above hardware designs have various trade-offs. If
the protection key policy register can be changed from the
userspace using unprivileged operations, domain transitions
can be very fast and do not require any kernel interaction.
Having a privileged register, however, completely changes the
threat model and possible use cases. In this case, the kernel
needs to know about the different memory domains, which
requires many complex kernel modiﬁcations. Existing work
based on Intel MPK works around the inherent problem of ma-
licious protection key policy register modiﬁcation by utilizing
additional mechanisms such as compiler-based code rewrit-
ing [41], binary inspection [82] and Write-XOR-Execute to
ensure there are no unintended writes to the PKRU.
JIT and JavaScript Engines
2.4
Just-in-time compilation (JIT) dynamically compiles inter-
preted programming languages, e.g., JavaScript, into an in-
termediate representation (byte code) or machine code. A
JavaScript engine manages the tasks of compilation and exe-
cution of JavaScript, memory management, and optimization.
In the case of V8, which is used in Chrome, Chromium, and
Node.js [81], the source code is ﬁrst compiled into a byte
code representation, which is then interpreted and executed.
While the code is executed, another component of the engine
analyses the runtime and further optimizes the byte code di-
rectly into machine code. This requires the code region to be
both writable and executable.
Typically, browsers use sandboxing to minimize the attack
surface for attackers exploiting vulnerabilities via JavaScript.
USENIX Association
29th USENIX Security Symposium    1679
capsulates this untrusted code in a Donky in-process sandbox.
Donky shields not only application memory and sandbox
transitions but also the system call interface at the discre-
tion of the application. In contrast to ERIM [82], we do not
require binary scanning. Also, Donky does not rely on re-
compiling programs with CFI. Instead, Donky can sandbox
unmodiﬁed, pre-compiled binaries. Unlike ERIM, we do not
assume Write-XOR-Execute and also support self-modifying
code. This enables use cases such as JIT compilation, one of
the main applications of Donky, without modifying the JIT
compiler to not emit unsafe WRPKRU instructions.
Second, in a vault scenario, an application wants to shield
highly sensitive modules such as cryptographic libraries.
While not being adversarial, the application wants to enforce