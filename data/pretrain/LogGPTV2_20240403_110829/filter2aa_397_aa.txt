《PHP 安全基础详解》        www.528163.cn 提供 
《
《
《
《PHP 安全基础
安全基础
安全基础
安全基础详解
详解
详解
详解》
》
》
》 
www.528163.cn 提供 
《PHP 安全基础详解》        www.528163.cn 提供 
第一章
第一章
第一章
第一章 简介
简介
简介
简介 
PHP 已经由一个制作个人网页的工具发展成为了世界上最流行的网络编程
语言。它保证了许多网络上最繁忙的站点的运行。这一转变带来了亟待关注的问
题，那就是性能、可维护性、可测性、可靠性以及最重要的一点—安全性。 
与语言的一些功能如条件表达式、循环结构等相比，安全性更为抽象。事实
上，安全性更像是开发者的特性而不是语言的特性。任何语言都不能防止不安全
的代码，尽管语言的有些特点能对有安全意识的开发人员有作用。 
本书着眼于 PHP 语言，向您展示如何通过操纵 PHP 一些特殊的功能写出安
全的代码。本书中的概念，适用于任何网络开发平台。网络应用程序的安全是一
门年轻的和发展中的学科。本书会从理论出发，教会您一些好的习惯，使您能安
枕无忧，从容应对恶意者层出不穷的新的攻击和技巧。 
本章是本书的基础部分。作为学习后续章节的前提，将教给您一些原则和经
验。 
1.1.PHP 功能
功能
功能
功能 
PHP 有许多适合于 WEB 开发的功能。一些在其它语言中很难实现的普通工
作在 PHP 中变得易如反掌，这有好处也有坏处。有一个功能比其它功能来更引
人注目，这个功能就是 register_globals。 
1.1.1. 全局变量注册
全局变量注册
全局变量注册
全局变量注册 
如果您还能记起早期 WEB 应用开发中使用 C 开发 CGI 程序的话，一定会
对繁琐的表单处理深有体会。当 PHP 的 register_globals 配置选项打开时，复杂
的原始表单处理不复存在，公用变量会自动建立。它让 PHP 编程变得容易和方
便，但同时也带来了安全隐患。 
事实上，register_globals 是无辜的，它并不会产生漏洞，同时还要开发者犯
错才行。可是，有两个主要原因导致了您必须在开发和布署应用时关闭
register_globals： 
第一，它会增加安全漏洞的数量； 
第二，隐藏了数据的来源，与开发者需要随时跟踪数据的责任相违背。 
《PHP 安全基础详解》        www.528163.cn 提供 
本书中所有例子都假定 register_globals 已被关闭，用超级公用数组如$_GET 
和 $_POST 取而代之。使用这些数组几乎与 register_globals 开启时的编程方法同
样方便，而其中的些许不便是值得的，因为它提高了程序的安全性。 
小提示 
如果您必须要开发一个在 register_globals 开启的环境中布署的应用时，很重
要的一点是您必须要初始化所有变量并且把 error_reporting 设为 E_ALL(或 
E_ALL | E_STRICT)以对未初始化变量进行警告。当 register_globals 开启时，任
何使用未初始化变量的行为几乎就意味着安全漏洞。 
1.1.2. 错误报告
错误报告
错误报告
错误报告 
没有不会犯错的开发者，PHP 的错误报告功能将协助您确认和定位这些错
误。可以 PHP 提供的这些详细描述也可能被恶意攻击者看到，这就不妙了。使
大众看不到报错信息，这一点很重要。做到这一点很容易，只要关闭
display_errors，当然如果您希望得到出错信息，可以打开 log_errors 选项，并在
error_log 选项中设置出错日志文件的保存路径。 
由于出错报告的级别设定可以导致有些错误无法发现，您至少需要把
error_reporting 设为 E_ALL(E_ALL | E_STRICT 是最高的设置, 提供向下兼容的
建议, 如不建议使用的提示). 
所有的出错报告级别可以在任意级别进行修改，所以您如果使用的是共享的
主机，没有权限对 php.ini, httpd.conf, 或 .htaccess 等配置文件进行更改时，您可
以在程序中运行出错报告级别配置语句： 
小提示 
http://php.net/manual/ini.php 对 php.ini 的选项配置作了详尽的说明。 
PHP 还允许您通过 set_error_handler( ) 函数指定您自已的出错处理函数：
上面程序指定了您自已的出错处理函数 my_error_handler( ); 下面是一个实
《PHP 安全基础详解》        www.528163.cn 提供 
际使用的示例： 
小提示 
PHP 5 还允许向 set_error_handler( )传递第二个参数以限定在什么出错情况
下执行出定义的出错处理函数。比如，现在建立一个处理告警级别（warning）
错误的函数： 
PHP5 还提供了异常处理机制，详见 http://php.net/exceptions  
1.2.原则
原则
原则
原则 
你可以列出一大堆开发安全应用的原则，但在本处我选取了我认为对 PHP
开发者最重要的几个原则。 
这些原则有意的写得抽象和理论化。这样做的目的是帮助你从大处着眼，不
拘泥于细节。你需要把它们看成是你行动的指南。 
1.2.1. 深度防范
深度防范
深度防范
深度防范 
深度防范原则是安全专业人员人人皆知的原则，它说明了冗余安全措施的价
值，这是被历史所证明的。 
深度防范原则可以延伸到其它领域，不仅仅是局限于编程领域。使用过备份
伞的跳伞队员可以证明有冗余安全措施是多么的有价值,尽管大家永远不希望主
伞失效。一个冗余的安全措施可以在主安全措施失效的潜在的起到重大作用。 
《PHP 安全基础详解》        www.528163.cn 提供 
回到编程领域，坚持深度防范原则要求您时刻有一个备份方案。如果一个安
全措施失效了，必须有另外一个提供一些保护。例如，在用户进行重要操作前进
行重新用户认证就是一个很好的习惯，尽管你的用户认证逻辑里面没有已知缺
陷。如果一个未认证用户通过某种方法伪装成另一个用户，提示录入密码可以潜
在地避免未认证（未验证）用户进行一些关键操作。 
尽管深度防范是一个合理的原则，但是过度地增加安全措施只能增加成本和
降低价值。 
1.2.2. 最小权限
最小权限
最小权限
最小权限 
我过去有一辆汽车有一个佣人钥匙。这个钥匙只能用来点火，所以它不能打
开车门、控制台、后备箱，它只能用来启动汽车。我可以把它给泊车员（或把它
留在点火器上），我确认这个钥匙不能用于其它目的。 
把一个不能打开控制台或后备箱的钥匙给泊车员是有道理的，毕竟，你可能
想在这些地方保存贵重物品。但我觉得没有道理的是为什么它不能开车门。当然，
这是因为我的观点是在于权限的收回。我是在想为什么泊车员被取消了开车门的
权限。在编程中，这是一个很不好的观点。相反地，你应该考虑什么权限是必须
的，只能给予每个人完成他本职工作所必须的尽量少的权限。 
一个为什么佣人钥匙不能打开车门的理由是这个钥匙可以被复制，而这个复
制的钥匙在将来可能被用于偷车。这个情况听起来不太可能发生，但这个例子说
明了不必要的授权会加大你的风险，即使是增加了很小权限也会如此。风险最小
化是安全程序开发的主要组成部分。 
你无需去考虑一项权限被滥用的所有方法。事实上，你要预测每一个潜在攻
击者的动作是几乎不可能的。 
1.2.3. 简单就是美
简单就是美
简单就是美
简单就是美 
复杂滋生错误，错误能导致安全漏洞。这个简单的事实说明了为什么简单对
于一个安全的应用来说是多么重要。没有必要的复杂与没有必要的风险一样糟
糕。 
例如，下面的代码摘自一个最近的安全漏洞通告： 
这个流程会混淆$search 变量受污染*的事实，特别是对于缺乏经验的开发者
而言。上面语句等价于下面的程序： 
上面的两个处理流程是完全相同的。现在请注意一下下面的语句: 
$search = $_GET['search']; 
使用这一语句，在不影响流程的情况下，保证了$search 变量的状态维持原
样，同时还可以看出它是否受污染。 
* 译注：受污染变量，即在程序执行过程中，该变量的值不是由赋值语句直
接指定值，而是来自其它来源，如控制台录入、数据库等。 
1.2.4. 暴露最小化
暴露最小化
暴露最小化
暴露最小化 
PHP 应用程序需要在 PHP 与外部数据源间进行频繁通信。主要的外部数据
源是客户端浏览器和数据库。如果你正确的跟踪数据，你可以确定哪些数据被暴
露了。Internet 是最主要的暴露源，这是因为它是一个非常公共的网络，您必须
时刻小心防止数据被暴露在 Internet 上。 
数据暴露不一定就意味着安全风险。可是数据暴露必须尽量最小化。例如，
一个用户进入支付系统，在向你的服务器传输他的信用卡数据时，你应该用 SSL
去保护它。如果你想要在一个确认页面上显示他的信用卡号时，由于该卡号信息
是由服务器发向他的客户端的，你同样要用 SSL 去保护它。 