query after the test query has been issued.
With respect to LaMacchia et al.
[LLM07], the main diﬀerence of our deﬁnition is that instead of
having only four pieces of secret information, in certiﬁcateless protocols there are six: the ID-based secret
keys, the user’s secret value, and the ephemeral private keys of both parties. We require a certiﬁcateless
AKE to be secure as long as each party still holds at least one uncompromised secret.
We note that as the challenger has to answer session key reveal queries even for keys where the
respective certiﬁcateless public keys have been replaced, the adversary has access to the equivalent of a
“Strong Decrypt” oracle in certiﬁcateless encryption. Strong decryption oracles were ﬁrst introduced by
Al-Riyami and Paterson [ARP03]. Dent [Den08] deﬁnes the Strong Decryption Oracle as follows.
Deﬁnition 4 (Strong Decryption Oracle). The adversary supplies an identity ID and a ciphertext C,
and the challenger responds with the decryption of C under the private key skID. Note that if the attacker
has replaced the public key for ID, then this oracle should return the correct decryption of C using the
private key that inverts the public key pkID currently associated with the identity ID (or ⊥ if no such
private key exists).
A strong decryption oracle in public key cryptography is able to return the plaintext for a given
ciphertext (which does not necessarily mean that the plaintext has been decrypted using the correct key,
as with double encryption). We note that in a session key reveal query the correct key for a given session
has to be revealed, which is a stronger requirement. The scheme in Section 3 on the following page is
both Strong Type I and Strong Type II secure with respect to Dent’s deﬁnitions.
In the security proof in Section 5 on page 10 and Section 5.4 on page 14 we do not diﬀerentiate
between these two types of adversarial behaviour but treat them together. If the adversary was split to
be either Strong Type I or Strong Type II, then a Strong Type II adversary would be applicable only
for the Strategies 1, 2, 3, and 4 in Section 5.1 on page 11. Being able to distinguish between Type I and
Type II adversaries would thus increase the probability of success for the challenger.
5
2.3 Why a natural composition of CL-AKE from ID-AKE and PK-AKE is
not possible in our model
In the security model, a session can only be fresh as long as each party still has at least one uncompromised
secret. A composition of an ID-AKE with a PK-AKE is depicted in Figure 1. A natural way to achieve
such a composition consists of running the two protocols in parallel and deriving the session key of
the overall composition as a publicly known function of solely the two component session keys. This
composition cannot oﬀer the desired level of security, because no security guarantees exist if party A still
has an uncompromised key in the PK-AKE and party B still has an uncompromised key in the ID-AKE
(both AKE schemes are broken at this moment). This may explain why no CL-AKE schemes with a
proof of security have been published before.
Public Key AKE
ID-based AKE
Certiﬁcateless AKE
Party A
Party B
Party A
Party B
Party A
Party B
pkA
eph discl
pkB
+
KCI
KCI
IDA
eph discl
IDB
(cid:54)=
pkA
IDA
eph + ID discl
K
CI
K C I
eph + pk
discl
pkB
IDB
ephpkA
wPFS
ephpkB
ephIDA
KCI
KCI
wPFS
ephIDB
ephpkA
, ephIDA
KCI
wPFS
wPFS
ephpkB
, ephIDB
The lines indicate what combination of secrets gives resistance against which attack type. Examples
for public key schemes applicable to this diagram would be NAXOS [LLM07] and CMQV [Ust08], an
example for an ID-based scheme would be the ASIACCS09 [HC08] scheme. However, a combination of
these schemes would not have any security guarantees about the dashed lines in the certiﬁcateless part
of the diagram.
Figure 1: PK-AKE + ID-AKE (cid:54)= CL-AKE
3 Description of the certiﬁcateless key agreement scheme
We describe the phases of our certiﬁcateless authenticated key exchange protocol in this section. Our
protocol consists of three phases: setup, message exchange and key computation. We also brieﬂy address
the eﬃciency of the proposed protocol.
3.1 Setup
• The KGC publishes a generator P ∈ G and an admissible bilinear pairing e : G × G → GT that
fulﬁlls the following criteria:
Let G and GT be groups of prime order p. A bilinear pairings map e : G × G → GT between the
groups G and GT satisﬁes the following properties:
Bilinear We say that a map e : G × G → GT is bilinear if e(aP, bP ) = e(P, P )ab for all P ∈ G and
a, b ∈ Zp.
Non-degenerate We say that e is non-degenerate if it does not send all pairs in G× G to the identity
in GT . Since G and GT are groups of prime order p, it follows that if P ∈ G is a generator of
G, then e(P, P ) is a generator of GT .
Computable There is an eﬃcient algorithm to compute e(P, Q) for any P, Q ∈ G.
Suitable pairing groups for this protocol would be Type 1 and Type 4 pairings (see Chen, Cheng
& Smart [CCS07] for a discussion). Asymmetric pairings are not possible because we use the non-
interactive ID-based key agreement of Sakai, Ohgishi and Kasahara (SOK) [SOK00] as part of our
protocol. This requires hashing to both G1 and G2. The SOK protocol has been proven by Dupont
6
and Enge [DE02] using gap assumptions. As an added beneﬁt of our proof, we show how to prove
the SOK protocol secure under the weaker computational bilinear Diﬃe-Hellman assumption using
the twin bilinear Diﬃe-Hellman trapdoor [CKS08] in section 5.4 on page 14, Strategy 9.
• The KGC picks a random s ∈ Zp as master secret key and sets its public key to sP
• The KGC selects three cryptographic hash functions
H1 :
H2 :
H3 :
{0, 1}∗ → G
{0, 1}∗ × {0, 1}∗ × G8 × GT
G → G
6 → {0, 1}n for some integer n > 0
H2 is the key derivation function for our scheme.
Each party participating in the key agreement protocol additionally computes a private key and a match-
ing certiﬁcateless public key:
• Each user U generates a secret value xU
• Each user U gets an ID-based private key {sH1(IDU ), sH3(H1(IDU ))} ∈ G2 from the key gener-
$← Zp and a public key xU P ∈ G
ation centre.
3.2 Message exchange
$← Zp and user B generates the
To establish a common key, user A generates the ephemeral secret rA
ephemeral secret rB
$← Zp. They exchange the following messages:
A → B : EA = (rAP, xAP )
B → A : EB = (rBP, xBP )
We note that the certiﬁcateless public keys can be stripped from the messages if they are published in
a public online directory. This will save bandwidth, but at the same time may make the scheme more
vulnerable to the equivalent of denial of decryption attacks in certiﬁcateless encryption: an adversary
may manipulate the entries of the directory more easily than the message exchange between two parties.
As we propose a one-round protocol, our protocol achieves only implicit authentication. Krawczyk
[Kra05, Section 8] shows that explicit authentication is possible with three half rounds. To achieve explicit
authentication, this protocol can be patched in the same way that HMQV is patched to HMQV-C.
In the following we require implicitly that each party always checks subgroup membership for all
elements of messages that are exchanged in the protocol to defend against small subgroup attacks [LL97].
7
3.3 Key computation
To compute the certiﬁcateless session key, each user computes
KA = e(H1(IDB), sP )rA e(sH1(IDA), rBP )
= e(H1(IDB), P )rAse(H1(IDA), P )rB s
= e(H1(IDA), sP )rB e(sH1(IDB), rAP )
= KB = K
K(cid:48)
A = e(H3(H1(IDB)), sP )rAe(sH3(H1(IDA)), rBP )
= e(H3(H1(IDB)), P )rAs · e(H3(H1(IDA)), P )rB s
= e(sH3(H1(IDB)), rAP ) · e(H3(H1(IDA)), sP )rB
= K(cid:48)
B = K(cid:48)
LA = e(H1(IDB), sP )xAe(sH1(IDA), xBP )
= e(H1(IDB), P )xAse(H1(IDA), P )xB s
= e(sH1(IDB), xAP )se(H1(IDA), sP )xB
= LB = L
L(cid:48)
A = e(H3(H1(IDB)), sP )xA e(sH3(H1(IDA)), xBP )
= e(H3(H1(IDB)), P )xAse(H3(H1(IDA)), P )xB s
= e(sH3(IDB), xAP )e(H3(IDA), sP )xB
= L(cid:48)
B = L(cid:48)
NA = e(H1(IDB), sH1(IDA)) = e(H1(IDB), H1(IDA))s = NB = N
N(cid:48)
A = e(H3(H1(IDB)), sH3(H1(IDA)))
= e(H3(H1(IDB)), H3(H1(IDA)))s
= e(sH3(H1(IDB)), H3(H1(IDA)))
= N(cid:48)
B = N(cid:48)
The session key is then computed as SK = H2(A, B, EA, EB, rArBP, xAxBP, rAxBP, xArBP, K, K(cid:48),
L, L(cid:48), N, N(cid:48)). In Section 5 on page 10 and Section 5.4 on page 14 the challenger B uses the adversary
M to solve either the computational Diﬃe-Hellman (CDH) or the computational bilinear Diﬃe-Hellman
(CBDH) problem. K, L, and N are used in the proof to embed the input to the CBDH challenge into
the test session. Each of these values is necessary to defend against one possible attack strategy of the
adversary M. K is the product of two encapsulated Boneh-Franklin session keys, L(cid:48) is similar but with
certiﬁcateless long-term keys. N(cid:48) is the non-interactive ID-based key agreement scheme proposed by
[SOK00]. K(cid:48), L(cid:48), and N(cid:48) are needed to answer reveal queries of the adversary M consistently. To answer
reveal queries, the challenger B makes use of the twin bilinear Diﬃe-Hellman problem as introduced by
Cash, Kiltz and Shoup [CKS08]. The twin bilinear Diﬃe-Hellman “backdoor” is embedded in K(cid:48), L(cid:48) and
N(cid:48).
3.4 Eﬃciency considerations
Although the protocol is one round, the computational overhead imposed on the parties is rather high:
each party has to compute 5 exponentiations in G and 10 pairings. We would like to note that we need
the H3 hash function in the proof for full computational bilinear Diﬃe-Hellman security.
If the gap
bilinear Diﬃe-Hellman assumption is used (see Kudla and Paterson [KP05] for gap assumptions), the
H3 hash function can be omitted which saves 2 hash queries and reduces the complexity of the protocol
to 3 exponentiations in G and 5 pairing computations (as K(cid:48), L(cid:48), and N(cid:48) do not have to be computed).
If there are multiple runs of the protocol between the same users (e.g. for rekeying in VPN’s), then the
complexity can be reduced by caching xAxBP , L, L(cid:48), N , and N(cid:48) in secure memory which then reduces
the complexity for successive runs to 4 exponentiations and 4 pairing computations (or 2 exponentiations
and 2 pairing computations if the gap bilinear Diﬃe-Hellman assumption is used). It may be possible
to do better in terms of computational eﬃciency. However, the aim of this paper is to provide a strong
model for certiﬁcateless key agreement and to show that schemes corresponding to the model exist.
8
We introduce the theorems that we later use as decisional oracles to be able to answer the H2 queries
of the adversary consistently (and to determine when the adversary submits the solution to a hard
problem to the H2 oracle). We continue then by embedding a hard problem in each of the uncorrupted
secrets that are available in the respective strategies.
4 The Twin Bilinear Diﬃe-Hellman Trapdoor Theorems
The proof in section 5.4 on page 14 for Strategy 5 to 8 relies heavily on the following theorem:
Theorem 1 (Trapdoor Test). Let e : G × G → GT be a bilinear pairing, where G, GT are two cyclic
groups of prime order p. Let P ∈ G be a generator of G. Suppose B1 ∈ G, y, z ∈ Zp are mutually
independent random variables. Deﬁne B2 := yP − zB1. Further, suppose that A, C are random variables
in G and T1, T2 are random variables in GT , each of which is deﬁned as some function of B1 and B2.
Then we have:
1. B2 is uniformly distributed over G.
2. B1 and B2 are independent.
3. If B1 = b1P and B2 = b2P , then the probability that the truth value of
1 · T2
T z
?= e(A, C)y
does not agree with the truth value of
?= e(A, C)b1 ∧ T2
T1
?= e(A, C)b2
(1)
(2)
is at most 1/p, moreover, if Equation 2 holds, then Equation 1 certainly holds.
See [CKS08], [HC08] for an explanation and a proof.
Additionally we need the “Additive double BDH Trapdoor Test” and the “Multiplicative double BDH
Trapdoor Test” for Strategy 9:
Theorem 2 (Additive double BDH Trapdoor Test). Let e : G × G → GT be a bilinear pairing, where
G, GT are two cyclic groups of prime order p. Let P ∈ G be a generator of G. Suppose B1, D1 ∈
G, y1, y2, z ∈ Zp are mutually independent random variables. Deﬁne B2 := y1P − zB1 and D2 :=
y2P − zD1. Further, suppose that A, C are random variables in G and T1, T2 are random variables in
GT , each of which is deﬁned as some function of (A, C, B1, D1) and (A, C, B2, D2). Then we have:
(i) B2 and D2 are uniformly distributed over G (guaranteed by y1 and y2), as is B2 + D2.
(ii) B1 and B2 are independent and D1 and D2 are independent and B2 and D2 are independent, and
B1 + D1 and B2 + D2 are independent (also due to y1 and y2).
(iii) If B1 = b1P, B2 = b2P, D1 = d1P, D2 = d2P , then the probability that the truth value of
T z
1 T2
?= e(A, C)y1+y2
does not agree with the truth value of
?= e(A, C)b1e(A, C)d1 ∧ T2
T1
?= e(A, C)b2e(A, C)d2
(3)