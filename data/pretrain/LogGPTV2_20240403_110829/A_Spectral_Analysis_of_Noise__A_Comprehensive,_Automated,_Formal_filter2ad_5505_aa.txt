title:A Spectral Analysis of Noise: A Comprehensive, Automated, Formal
Analysis of Diffie-Hellman Protocols
author:Guillaume Girol and
Lucca Hirschi and
Ralf Sasse and
Dennis Jackson and
Cas Cremers and
David A. Basin
A Spectral Analysis of Noise: 
A Comprehensive, Automated, Formal 
Analysis of Diffie-Hellman Protocols
Guillaume Girol, CEA, List, Université Paris-Saclay, France; Lucca Hirschi, Inria & LORIA, 
France; Ralf Sasse, Department of Computer Science, ETH Zurich; Dennis Jackson, 
University of Oxford, United Kingdom; Cas Cremers, CISPA Helmholtz Center for 
Information Security; David Basin, Department of Computer Science, ETH Zurich
https://www.usenix.org/conference/usenixsecurity20/presentation/girol
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.A Spectral Analysis of Noise:
A Comprehensive, Automated, Formal Analysis
of Difﬁe-Hellman Protocols
Guillaume Girol
CEA, List, Université Paris-Saclay, France
Department of Computer Science, ETH Zurich
Ralf Sasse
CISPA Helmholtz Center for Information Security
Cas Cremers
Abstract
The Noise speciﬁcation describes how to systematically con-
struct a large family of Difﬁe-Hellman based key exchange
protocols, including the secure transports used by WhatsApp,
Lightning, and WireGuard. As the speciﬁcation only makes
informal security claims, earlier work has explored which
formal security properties may be enjoyed by protocols in the
Noise framework, yet many important questions remain open.
In this work we provide the most comprehensive, system-
atic analysis of the Noise framework to date. We start from
ﬁrst principles and, using an automated analysis tool, compute
the strongest threat model under which a protocol is secure,
thus enabling formal comparison between protocols. Our re-
sults allow us to objectively and automatically associate each
informal security level presented in the Noise speciﬁcation
with a formal security claim.
We also provide a ﬁne-grained separation of Noise proto-
cols that were previously described as offering similar security
properties, revealing a subclass for which alternative Noise
protocols exist that offer strictly better security guarantees.
Our analysis also uncovers missing assumptions in the Noise
speciﬁcation and some surprising consequences, e.g., in some
situations higher security levels yield strictly worse security.
For reproducibility, the sources of our tool Vacarme and all
Noise protocol models are available [18]. A technical report
with additional details and proofs is available at [17].
1 Introduction
The Noise framework [24] deﬁnes a set of protocols that
enable two agents to establish a secure channel. Some of its
protocols serve as building blocks in widely used protocols,
including WhatsApp, Lightning, and WireGuard [13, 19, 23].
In a Noise protocol, the agents ﬁrst exchange messages
that constitute a handshake, derive from these messages a
symmetric key, which they use to encrypt and integrity protect
all following messages exchanged during their session.
Lucca Hirschi
Inria & LORIA, France
Dennis Jackson
University of Oxford, United Kingdom
Department of Computer Science, ETH Zurich
David Basin
Noise allows an unbounded number of distinct handshakes.
Each variant can be described by a small, human-readable
string, called a pattern. Some patterns are for two peers who
know each other’s long term key before starting the session.
Others are designed for a client without a long-term key, who
connects to a server whose long-term key is a priori unknown.
Some patterns have a one round-trip handshake, resulting in
low latency, whereas others feature a two or more round-trip
handshake, which increases latency but may help hide the
identity of peers to outsiders. Moreover, message payloads
can even be exchanged during the handshake, protected
with the best key currently available, and the properties
achieved may therefore differ from message to message until
the handshake completes. All this makes Noise protocols
very ﬂexible. For example, WhatsApp, WireGuard, and
Lightning use different Noise patterns in their transport layer.
This ﬂexibility also makes it hard to assess the guarantees
provided by these patterns and to choose the best protocol
given speciﬁc system assumptions.
We summarize prior work in Table 2, discussed in detail
in Section 2.3. The most relevant prior work is the Noise
Explorer tool [20], designed to analyze the informal security
levels described in the speciﬁcation, which we compare in
Section 2.3.1. However, both the Noise speciﬁcation and all
prior works leave crucial questions open: First, which Noise
protocol should practitioners use for a given scenario and
initial key distribution? Second, Noise theoretically offers an
unbounded number of protocols, but are they all interesting,
or are some Noise protocols subsumed by others?
We answer both questions rigorously and systematically.
We answer the ﬁrst by providing the strongest threat model
under which each protocol is secure, enabling practitioners to
make a trade-off between security and privacy. For the second,
we give a formal framework and a methodology for comparing
patterns, which we implemented in a tool and evaluated on
all the patterns from the speciﬁcation. Our results notably
show that there are optimal patterns for each protocol setup,
so other patterns from the speciﬁcation provide no additional
beneﬁts.
USENIX Association
29th USENIX Security Symposium    1857
We establish our results in the symbolic model and use
the state-of-the-art Tamarin protocol analysis tool [25] to
formally analyze a substantially wider range of properties
than previous works. This includes all classical security
properties [22], under a broad class of threat models (along
the lines of “Know your enemy” [2]), over all protocols in
the Noise speciﬁcation, on a per message basis.
Contribution
Just as a spectral analysis decomposes sound into its con-
stituent parts, we use our new tool Vacarme to decompose
Noise into its constituent components and study their interac-
tion. Our primary contribution is a systematic, ﬁne-grained
analysis of the Noise protocol family, which answers the fol-
lowing questions: (a) Under which precise threat models are
messages secure, i.e., do both secrecy and agreement prop-
erties hold? (b) What are the anonymity guarantees for the
main Noise protocols? (c) How should one choose a suitable
Noise protocol, given a PKI infrastructure and requirements?
We expand on these points as well as additional contributions
in the following.
Threat Models and Protocol Hierarchies: We approach
Noise protocol analysis systematically. For a set of atomic
adversary capabilities (e.g., key compromise) and standard se-
curity goals (e.g., secrecy), we measure security by all combi-
nations of the latter under the former. In doing so, we provide
the most ﬁne-grained analysis of the Noise framework to date
(see Section 2.3): we consider ephemeral key reveals (omitted
previously), secrecy for the recipient (only previously consid-
ered for the sender), anonymity, etc. This yields a rich algebra
of security properties that captures the full spectrum of use
cases and security requirements of the Noise framework. We
formally prove how each message in a Noise protocol can
be attributed with maximal security guarantees in the form
of the strongest threat models under which conﬁdentiality,
authentication, or anonymity holds. Finally, we show how
these strongest threat models can be used to compare Noise
protocols and determine when one protocol provides better
security and anonymity than another, for any threat model.
Analysis with Vacarme: We show how to efﬁciently com-
pute the strongest threat models using Tamarin as a back-end
and we implement this methodology in our Noise protocol
analysis tool Vacarme (French for “lots of Noise”). Our
push-button tool thus leverages Tamarin’s soundness and com-
pleteness guarantees [5,25]. Using Vacarme, one can automat-
ically and formally assess under which threat models some
requirements hold and compare different handshakes. We thus
effectively answer the above questions (a) and (b), and are the
ﬁrst to analyze anonymity properties for Noise protocols. We
also ran Vacarme on all Noise protocols listed in the speci-
ﬁcation both for evaluating our tool and for interpreting the
analysis results. The results themselves yield the following
contributions.
Reﬁning the Noise levels: In contrast with the informal
levels proposed in the Noise speciﬁcation [24], our results
have precise formal deﬁnitions, are machine-checked and
considerably more granular. Further, our approach objectively
and automatically assigns a formal meaning to the original
levels as a special case.
Our results also uncovered several shortcomings of the
Noise levels [24]. First, even though the levels appear to get
stronger monotonically, as suggested by the Noise speciﬁca-
tion, we ﬁnd that this is not actually the case. This is surprising
and can lead to misguided protocol choices in practice. Sec-
ond, we explain why the levels, as speciﬁed in [24], implicitly
assumed that ephemeral keys cannot be compromised, which
considerably weaken these guarantees. Finally, in contrast to
the 9 Noise levels, we provide 74 distinct levels and show why
this increased precision is crucial to well-informed protocol
choices.
Selecting the Best and Identifying Redundant Protocols: Us-
ing our results, we automatically compared almost all Noise
protocols listed in the speciﬁcation and produced a hierar-
chy thereof. Using this hierarchy, we provide guidelines on
which Noise protocol to choose, given a setup that describes
what PKI or symmetric keys are available, and the expected
range of adversary capabilities (threat model). We also iden-
tify redundant handshakes, which provide fewer guarantees
than other handshakes, given the same setup. With regards
to the Noise speciﬁcation, we properly separate the threat-
model assumptions, security goals, and monotonicity of secu-
rity properties between handshakes. This allows practitioners
to evaluate their environment assumptions independently of
the goals they want to achieve, and enables them to pick the
appropriate protocol required for their use-case, answering
question (c).
Further Results and Recommendations for Noise: We
make further contributions to the Noise framework and its
application. An example thereof comes from our analysis of
Noise protocols using a Pre-Shared Key (PSK): if a (publicly
known) dummy key is used as PSK (a suggestion made in
the speciﬁcation), we show that, surprisingly, some protocols
provide incomparable levels of security when using a dummy
PSK compared with when using no PSK at all. Another exam-
ple concerns anonymity, where our results reveal a missing
requirement related to the handling of session identiﬁers.
Overall, our analysis uncovered numerous subtleties in the
Noise speciﬁcation and its protocols that were previously
unknown. We also show how to systematically improve the
speciﬁcation, and we provide a tool to help practitioners.
Organization: In Section 2 we describe background on
Noise and Tamarin, followed by detailed discussion of related
work. We explain the security goals and threat models in
Section 3 and present our tool Vacarme in Section 4. We
discuss the results and practical implications in Section 5 and
we draw conclusions in Section 6.
1858    29th USENIX Security Symposium
USENIX Association
Nomenclature
Informal meaning
N No static key available
K Static key known before (e.g., via PKI)
X Static key transmitted over the network
I
psk
Static key transmitted earlier than with X
Pre-shared symmetric key available
n ∈ N Appended to any other item, delays its use
Table 1: Summary of Noise options and nomenclature for fundamen-
tal patterns. A fundamental pattern consists of two letters and an
optional psk token. The letter I may only appear in the ﬁrst position.
2 Background and Related Work
We ﬁrst describe the Noise handshakes, its pattern syntax, and
security properties. Afterwards we provide background on
the Tamarin prover and we discuss related work.
2.1 The Noise Framework
The Noise Protocol Framework [24] speciﬁes a family of
two-party handshakes for establishing secure channels. In
addition to specifying 59 handshakes and claiming various
security properties for them, it also speciﬁes how additional
handshakes can be derived. The proposed uses are extremely
broad, ranging from handshakes between unidentiﬁed par-
ties to handshakes between parties having pre-shared static
asymmetric and symmetric keys.
2.1.1 Handshakes
Each handshake speciﬁed by the Noise Protocol Framework
is built from a succinct set of simple primitives: a Difﬁe-
Hellman group, a hash function, a key derivation function, and
an Authenticated Encryption with Associated Data (AEAD)
cipher. Although the speciﬁcation is written in a generic fash-
ion, it limits the instantiation of said primitives to a small
selection, with a rationale for each choice. Thus, the security
properties ascribed to each handshake are only claimed to
hold for the given instantiations.
Each handshake is described by a pattern following a sim-
ple grammar. A pattern has two parts: pre-messages and
messages. Pre-messages describe setup assumptions, namely
knowledge that the parties must share before starting the hand-
shake, for example keys given by a Public Key Infrastructure
(PKI). Messages describe operations that each party must
perform when sending or receiving handshake messages.
Pre-messages, messages, and computations thereon are
described by a list of tokens and a direction specifying sender
and recipient. Tokens refer to keys. Each party may have an
ephemeral key (usually denoted by the letter e), and a static,
or long-term, public key (usually denoted by the letter s).
Additionally, the parties may share a secret called the PSK
(a symmetric key usually denoted as psk). Not all patterns
require all these keys.
Deﬁnition 1 (Handshake pattern). A pre-message token is e
or s. A message token is e, s, es, se, ss, ee, or psk. Single
letter tokens and psk are called key tokens and two-letter
tokens are called Difﬁe-Hellman tokens (or DH tokens for
short).
A direction is -> or  e
 s
<- s
...