­i dev HCI device
Commands
dev Display local devices
inq Inquire remote devices
scan Scan for remote devices
name Get name from remote devices
­­snip­­
*清单 14­3: 一些 hcitool 命令*
许多蓝牙黑客工具，你将看到周围简单地使用这些命令在脚本，你可以很容易地创建你自己的工具使用这些命令在你自己的bash或python脚本，我们将在第17章研究这些脚本。
##### 使用sdptool扫描服务
服务发现协议（SDP）是一种用于搜索蓝牙服务的蓝牙协议（蓝牙是一套服务），而且，很有帮助的是，bluez提供了sdp
tool工具，用于浏览设备上提供的服务。还需要注意的是，设备不必处于要扫描的发现模式。语法如下：
sdptool browse MACaddress
清单14-4显示了我使用sdptool在清单14-2前面检测到的某个设备上搜索服务。
kali \>sdptool browse 76:6E:46:63:72:66
Browsing 76:6E:46:63:72:66...
Service RecHandle: 0x10002
Service Class ID List:
""(0x1800)
Protocol Descriptor List:
"L2CAP" (0x0100)
PSM: 31
"ATT" (0x0007)
uint16: 0x1
uint16: 0x5
­­snip­­
*清单 14­4: 使用 sdptool扫描*
在这里，我们可以看到sdptool工具能够获取关于这个设备能够使用的所有服务的信息。特别地，我们看到这个设备支持ATT协议，即低能量属性协议。这可以为我们提供更多关于设备是什么的线索，以及可能的进一步与之交互的途径。
##### 通过l2ping查看设备是否可以访问
一旦我们收集了所有附近设备的MAC地址，我们就可以向这些设备发送ping，无论它们是否处于发现模式，以查看它们是否在可访问范围内。这让我们知道它们是否在活动范围内。要发送ping，我们使用L2ping命令，语法如下：
l2ping MACaddress
清单14-5显示了我对清单14-2中发现的Android设备执行ping操作。
kali \>l2ping 76:6E:46:63:72:66 -c 4
Ping: 76:6E:46:63:72:66 from 10:AE:60:58:F1:37 (data size 44)...
44 bytes 76:6E:46:63:72:66 id 0 time 37.57ms
44 bytes 76:6E:46:63:72:66 id 1 time 27.23ms
44 bytes 76:6E:46:63:72:66 id 2 time 27.59ms
­­snip­­
*清单 14­5: Ping蓝牙设备*
  此输出表示MAC地址为76:6e:46:63:72:66的设备在范围内且可访问。这是有用的知识，因为在我们考虑黑客攻击之前，我们必须知道设备是否可以访问。
### 总结
无线设备代表未来的网络连通和黑客入侵攻击的核心。Linux已经开发了专门的命令来扫描和连接Wi-Fi接入点，这是黑客攻击这些系统的第一步。aircrack-ng无线黑客工具套件包括airmon-ng和airodump-ng，使我们能够从远程无线设备。Bluez套件包括hciconfig、hcitool和其他能够扫描和收集信息的工具，这些工具是在一定范围内对蓝牙设备进行黑客攻击所必需的。它还包括许多其他值得探索的工具。
15
--
管理LINUX内核和可加载内核模块
-----------------------------
MANAGING THE LINUX KERNEL AND LOADABLE KERNEL MODULES
![](media/451fdbee142e8cd4684d71b24707d050.jpg)
所有操作系统至少由两个主要组件组成。其中第一个也是最重要的是内核。
内核位于操作系统的中心，控制着操作系统所做的一切，包括管理内存，控制CPU，甚至控制用户在屏幕上看到的内容。操作系统的第二个元素通常被称为用户区域，几乎包括其他所有元素。
内核被设计成一个受保护或特权的区域，只能由root帐户或其他特权帐户访问。这是有充分理由的，因为对内核的访问几乎可以提供对操作系统的自由访问。因此，大多数操作系统只向用户和服务提供对用户区域内的访问，用户可以在不控制操作系统的情况下访问几乎任何他们需要的内容。
访问内核允许用户更改操作系统的工作方式，外观和感觉。它还允许它们使操作系统崩溃，使其无法工作。
尽管存在这种风险，但在某些情况下，出于操作和安全原因，系统管理员必须非常谨慎地访问内核。
在本章中，我们将研究如何改变内核的工作方式并将新模块添加到内核中。不言而喻，如果黑客可以改变目标的内核，他们就可以控制系统。此外，攻击者可能需要改变内核对某些攻击的作用，例如中间人（MITM）攻击，黑客将自己置于客户端和服务器之间，并且可以窃听或改变通信。首先，我们将仔细研究内核结构及其模块。
### 什么是内核模块？ 
内核是操作系统的中枢神经系统，控制着它所做的一切，包括管理硬件组件之间的交互和启动必要的服务。内核在你看到的用户应用程序和运行所有东西的硬件（如CPU，内存和硬盘驱动器）之间运行。
Linux是一个单片内核，可以添加内核模块。因此，可以在内核中添加和删除模块。内核有时需要更新，这可能需要安装新的设备驱动程序（如视频卡，蓝牙设备或USB设备），文件系统驱动程序，甚至系统扩展。
必须将这些驱动程序嵌入到内核中才能完全正常运行。在某些系统中，要添加驱动程序，您必须重建、编译和重新引导整个内核，但Linux能够在不经过整个过程的情况下向内核添加一些模块。这些模块称为可加载内核模块或LKM。
LKM必须能够访问内核的最低级别，这使得它们成为黑客极易攻击的目标。一种称为rootkit的特殊类型的恶意软件通常通过这些LKM嵌入到操作系统的内核中。如果恶意软件嵌入内核，黑客就可以完全控制操作系统。
如果黑客可以让Linux管理员将新模块加载到内核，那么黑客不仅可以获得对目标系统的控制权，而且因为他们在操作系统的内核级别运行，可以控制目标系统正在运行的进程，端口，服务，硬盘空间以及您能想到的几乎任何其他内容。
因此，如果黑客可以成功诱使Linux管理员安装其中嵌入了rootkit的视频或其他设备驱动程序，则黑客可以完全控制系统和内核。这是一些最阴险的rootkit利用Linux和其他操作系统的方式。
了解LKM绝对是成为一名有效的Linux管理员并成为一名非常有效和隐秘的黑客的关键。
让我们来看看如何管理内核的好与坏。
### 检查内核版本
了解内核的第一步是检查系统正在运行的内核。至少有两种方法可以做到这一点。首先，我们可以输入以下内容：
kali \>uname -a
Linux Kali 4.6.0­kalil­amd64 \#1 SMP Debian 4.6.4­lkalil (2016­07­21) x86_64
内核通过告诉我们，我们的操作系统正在运行的发行版是linux
kali，内核版本是4.6.4，它构建的架构是x86_64架构。它还告诉我们它具有对称多处理（SMP）功能（意味着它可以在具有多个核心或处理器的机器上运行），并于2016年7月21日在Debian
4.6.4上构建。根据构建中使用的内核和系统中的CPU，您的输出可能会有所不同。安装或加载内核驱动程序时可能需要这些信息，因此了解如何获取这些信息非常有用。
获取这些信息以及其他一些有用信息的另一种方法是对/proc/version文件使用**cat**命令，如下所示：
kali \>cat /proc/version
Linux version 4.6.0­kalil­amd64 (devel\@kali.org) (gcc version 5.4.0 20160909
(Debian 5.4.0­6) ) \#1 SMP Debian 4.6.4­lkalil (2016­07­21)
在这里，你可以看到/proc/version文件返回了相同的信息。
### 使用sysctl进行内核优化
使用正确的命令，你可以优化你的内核，意味着你可以更改内存分配，开启网络功能，甚至可以加固你的内核以抵御外部攻击。
现代Linux内核使用**sysctl**命令来优化内核选项。使用sysctl所做的所有更改仅在重新启动系统之前有效。要使任何更改永久化，必须直接在/etc/sysctl.conf编辑sysctl的配置文件。
一句警告：在使用sysctl时需要小心，因为如果没有相匹配的知识和经验，你很容易使系统无法运行和崩溃。在做任何永久性的改变之前，确保你已经仔细考虑清楚了你正在做的事情。
现在让我们来看一下sysctl的内容。到目前为止，你应该通过此处显示的命令识别我们提供的选项：
kali \>sysctl -a \| less
dev.cdrom.autoclose = 1
dev.cdrom.autoeject = 0
dev.cdrom.check_media = 0
dev.cdrom.debug = 0
­­snip­­
在输出中，你应该看到数百行参数，Linux管理员可以编辑这些参数来优化内核。这里有些内容对你作为黑客十分有用。作为如何使用sysctl的示例，我们将介绍如何启用数据包转发功能。
在中间人（MITM）攻击中，黑客将自己置于通信主机之间，以截获信息。流量会经过黑客系统，因此他们可以查看并可能更改通信。实现这种路由的一种方法是启用包转发。
如果向下滚动查询输出中的几页或过滤“ipv4”（sysctl -a \| less \| grep
ipv4），你应该能看到以下内容：
net.ipv4.ip_dynaddr = 0
net.ipv4.ip_early_demux = 0
net.ipv4.ip_forward = 0
net.ipv4.ip_forward_use_pmtu = 0
­­snip­­
net.ipv4.ip_forward =
0该行是内核参数，它使内核能够转发它接收的数据包。换而言之，它接收的数据包将被发送出去。默认设置为0，这意味着禁用了数据包转发。
要启用IP转发，请按照这样输入——将0更改为1：
kali \>sysctl -w net.ipv4.ip_forward=1
请记住，sysctl更改发生在系统运行时，但在系统重新启动时消失。要对sysctl进行永久性更改，你需要编辑配置文件/etc/sysctl.conf。下面让我们来更改内核处理MITM攻击的IP转发的方式，并使此更改永久化。
要启用IP转发，请先在任何文本编辑器中打开/etc/sysctl.conf文件，并取消对IP转发行的注释。让我们用任何文本编辑器打开/etc/sycstl.conf并查看：
\#/etc/sysctl.conf ­ Configuration file for setting system variables
\# See /etc/sysctl.d/ for additional system variables.
\# See sysctl.conf (5) for information.
\#
\#kernel.domainname = example.com
\# Uncomment the following to stop low­level messages on console.
\#kernel.printk = 3 4 1 3
\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#3
\# Functions previously found in netbase \#
\# Uncomment the next two lines to enable Spoof protection (reverse­path
\# Turn on Source Address Verification in all interfaces to
\# prevent some spoofing attacks.
\#net.ipv4.conf.default.rp_filter=1
\#net.ipv4.conf.all.rp_filter=1
\# Uncomment the next line to enable TCP/IP SYN cookies
\#
\# Note: This may impact IPv6 TCP sessions too
\#net.ipv4.tcp_syncookies=1
See http://lwn.net/Articles/277146/
\# Uncomment the next line to enable packet forwarding for IPv4
➊ \#net.ipv4.ip_forward=1
在相关行只需删除注释（＃）➊，即可启用IP转发。
从操作系统加固的角度来看，你可以通过给此文件添加行net.ipv4.icmp_echo_ignore_all=1
来禁用icmp
echo请求，以使黑客更难找到你的系统，但这并非完全没可能找到你的系统。添加该行后，您需要运行命令**sysctl