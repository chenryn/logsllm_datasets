对比较简洁，源代码几百KB，用C语言开发，非常适合作为学习一门语言的捷径，总体
而且最重要的是如果你使用的版本低于RedHat6，很可能遇到下面的这种错误信息：
失败，比如 autoconf的版本需要在2.63以上，而RedHat5 的版本中默认是2.59，满足不了，
简单来说就是下面的一些方面。
Compiled-in_ tests:
sysbench --help
这个工具能够测试哪些方面呢，我们用命令来说明。
至此，sysbench 的安装已经完成，可以使用 sysbench 命令来进行验证。
解压后切换到目录下。
wget-chttp://www.lua.org/ftp/lua-5.2.0.tar.gz
Lua 脚本是 sysbench 新版本中的标配，所以你得熟悉基本的安装，而且 Lua 语言相
（2）Lua的安装
添加路径至/etc/ld.so.conf，然后执行命令ldconfig即可生效。
如果没有生效，可以在ld.so.conf中配置。
ln -s /usr/local/mysql/lib/libmysqlclient.so.20 /usr/lib/
我们可以添加一个软链接，如下：
sysbench: error
如果你使用sysbench抛出了MySQL链接库的问题，这个处理相对要常规一些
所以安装新版还是直接在RedHat6及以上的版本使用为佳。
make[3]:***[lj_ir.o] Error 1 如果C 语言功底很扎实，可以 trace一把。
但是这样一个常规的工作在新版本中有一些需要注意的地方，否则可能会导致你安装
make install
nake
（1）运行 autogent.sh 脚本
oltp - OLTP test
mutex
threads
fileio
File
 Threads subsystem performance test
I/otest
while
loading shared libraries: libmysqlclient.so.20:
test
undeclaredhere
.（notina
function
---
## Page 368
346丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
prepare
200G。
所以会分成几个阶段：准备阶段、运行阶段和清理阶段。
种测试来做。
以指定测试范围，如32G、64G，根据自己需要来。
数是100。
题还是蛮烧脑的，就让CPU来烧吧，这样运行即可。会启用10个并发线程，最大请求
做的，可以使用命令 sysbench --test=cpu help 得到如下的结果：
--file-total-size=200G
的，
--memory-oper=write run
-test=memory
-memory-oper=read run
--test=memory
-debug
/usr/local/bin/sysbench
下面就是一个相对简单的场景，20个文件，每个10GB，随机读写，文件大小总量在
而对于IO 测试而言，还是有些区别的，因为会有准备数据（比如写一个临时文件),
/usr/local/bin/sysbench
●内存读测试
下面我们测试32G内存，并发线程数是10个，最大请求数是100，分别从读和写两
有了CPU压测的基本概念，其他的几种解释起来就相对容易一些了。比如测试内存，可
/usr/local/bin/sysbench
默认是1k。
可以根据业务场景对不同内存块大小进行对比测试，如上是按照 8k的大小进行测试
·内存写测试
/usr/local/bin/sysbench
/usr/local/bin/sysbench
可以看到重要的关键字 prime，即质数，比如查找小于一千万的最大质数，这个问
cpu options:
比如测试 CPU，如果让我们自己测试还真没有什么好的思路，看看 sysbench 是怎么
（6）数据库性能（OLTP基准测试）
（5）POSIX线程性能
（4）内存分配及传输速度
（3）调度程序性能
（2）CPU运算性能
（1）磁盘IO性能
--cpu-max-prime=N
--cpu-max-prime=10000000 run
--memory-block-size=8k
-memory-block-size=8k
--max-requests=1000000
upper limit for primes generator [10000]
--file-num=20
-num-threads=10 --max-requests=100 --test=cpu
-num-threads=10
--num-threads=10
--num-threads=20
--num-threads=20
--memory-total-size=32G
--max-requests=100
--test=fileio
--test=fileio
---
## Page 369
到时候我就直接查看数据，得到一个报告，想想都很有意思。
后台运行，这样一来，我可以在瞬间创建出多个节点，然后测试很多复杂的压力场景。
其实还是不高的。
prepare
据量在一亿左右。先创建一个测试库 sysbenchtest，测试完成之后删除即可。
进行模拟压力的测试。
而言，还不支持多表参数--oltp_tables_count，准备好基础数据，后面就会开启多线程模式
压力测试，最后的统计结果和后期的清理。这里值得说的是，对于较低版本的 sysbench
等，需要单独配置。
和场景去分析权衡，这些 sysbench 也是支持的，就是 oltp 选项。
而无论对于DBA还是开发同学而言，应更加关注于业务层面，我们会从很多可能的角度
(clean)。
cleanup
L
-ol
-mysql-host=localhost
对于压力测试，其实还有一个蛮不错的想法，就是我指定压测的策略，然后让它在
比如下面的命令，测试模式complex，并发线程数30，最大请求数5000000，表的数
当然 sysbench 对于 MySQL 的支持是原生的，而对于其他的数据库，如 Oracle，PostgreSQL
硬件类的测试，基本一次测试就能够得到一个基线数据，不需要反反复复测试了。
得到的报告如下图9-1所示，可以看到整个过程持续了近3个小时,TPS在455左右，
在一台服务器上我进行了测试，发现1亿左右的数据，数据文件在24G左右，如下。
因为应用测试会产生基础数据，所以也是分为多阶段的。比如准备基础数据，进行
如上这3个命令分别代表了准备阶段（prepare）、运行阶段（run）和清理阶段
/usr/local/bin/sysbench
mysql
/usr/local/bin/sysbench
-uroot
1 mysql mysql 24419237888 Mar 10 13:29 innodb_test.ibd
 1 mysql mysql
=100000000
test
--file-num=20
--num-threads=30
--num-threads=30
8632
61 Mar 10 11:20 db.opt
--mysql-user=root
--num-threads=20
-mysql
--file-test-mode=rndrw
_test.frm
--test=fileio
--test=oltp
-test=oltp
run
---
## Page 370
348丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
示和思考。
QPS 指标有很大差异，没有关系，我们期望是通过完整模拟整个优化的过程带给大家启
能优化，从实践的过程来看，性能的提升有数十倍，可能大家在测试的过程中得到的TPS,
9.1.2
--report-interval=5prepare
-table-size=5000000
-mysql-user=root
这里有几个地方要注意一下，首先新版的 sysbench 需要指定一个Lua 模板，在 sysbench
sysbench
binlog_format=ROW
binlog_checksum=NONE
enforce_gtid_consistency=ON
port=3306
我们接下来模拟一个测试环境的 MySQL 压测过程，我会在下面的参数基础上进行性
我们开启 sysbench 的测试，可以使用如下的命令生成数据。
#sysbench --test=oltp help
开始测试 sysbench 的时候，
server_id=3306
压测 MySQL 起步
info
info
OLTP
repository=
/home/sysbench/sysbench-1.0.3/src/lua/oltp_read_write.lua
oer
total
write:
eac
number of events:
S
：发现 sysbench 中原来的 test 选项已经失效。
=TABLE
-threads=30
图9-1
the command
329045.7621
0971.0410s
6800
070
004
（455.78 per sec.)
sec.
-events=5000000
---
## Page 371
命令如下，供参考：
几个线程数为样本进行测试。
直没有一个相对清晰的感受，
安装目录下自带了一批模板，src/lua 目录的文件如下，我们选择读写的 oltp 模板。
--mysql-user=root
sysbench
开启 30个线程的测试。
得到的结果类似下面的输出，每5秒钟输出一次，TPS，QPS 指标一目了然。
数据库是否开启binlog，
测试场景对比 1 
·oltp-table-size=5000000，需要改为--table-size=5000000。
·oltp-num-tables=10，需要改为--tables=10;
·mysql-table-engine=innodb，选项也不存在;
· oltp-test-mode=complex,
原本的参数，如下：
·select_random_ranges.lua
·select_random_points.lua
● oltp_update_index.lua
● oltp_read_write.lua
·oltp_delete.lua
● oltp_common.lua
·Makefile.am
·Makefile
·internal
.bulk_insert.lua
oltp_write_only.lua
 oltp_update_non_index.lua
 oltp_read_only.lua
oltp_point_select.lua
oltp_insert.lua
Makefile.in
/home/sysbench/sysbench-1.0.3/src/lua/oltp_read_write.lua
--mysql-port=3306
。对于 50，100个只需要调整--threads 即可，使用的 sysbench
开启前后对于数据库本身的性能影响到底有多大，这个我一
决定逐步来测试一1
已经失效；
--mysql-socket=/home/mysql/s1/s1.sock
我首先设置了30、50、100、150等
第9章MySQL性能测试丨349
-tables=10
---
## Page 372
350|MySQL DBA工作笔记：数据库管理、架构优化与运维开发
有些不稳定，逐步呈现下降趋势，如下图9-2所示。
程30、线程50等的场景测试还好，但可以看到在线程100~150之间测试结果的数据结果
通过上面的测试我们可以看到一些性能瓶颈，而且在后期加压的时候，发现加不上
这个数据可以基本看出线程100和线程150的 TPS 差别不大。
然后我测试了开启binlog之后的数据，
我的测试持续了不到3分钟（说实话时间有点短)。但是还能看出一些效果。对于线
100
0
600
800
009
100
150
150
65s
805
150
95s
sS6
150
110s
110s
125s
125s 
140s
140s 
30
155s
155s 3
图9-3
170s
图9-2
170s 3
如下图9-3所示。
185s
185s
200s
200s
215s
215s 
2305
23053
245s
245s 
260s 
2
260s
：9416.31/2683.97/1333.99)
275s3
290s
线程150
线程50
线程150
线程100
一线程30
线程100
一线程50
线程30
---
## Page 373
所以你会在里面看到一些问题的排查，
的优化和压力测试达到目的，而不是简单的去对比连接数在不同数量级会有多大的差别，
9.1.3
距离，接下来会通过提高吞吐量来完成一个压测的小目标。
中开启binlog 后对于性能的影响有了更加细化的了解指标，
试能够马上发现很多潜在的问题。
下图9-4所示。
就是调整 innodb_buffer_pool_size，默认竟然是100 多M，支持的连接数是151个。
去了，一个主要原因就在于支持的最大连接数不够了。我对此做了一个简单的优化，那
O我接下来做sysbench压测的主要思路是根据现有的配置作出调整，能够通过持续性
FATAL:^thread_init'function failed:/usr/local/share/sysbench/oltp_common.
 s          e
测试场景对比2
通过以上测试，我们应该对 sysbench 压测 MySQL 有了一个初步的印象，也对MySQL
当然按照这种加压方式，当加压测试到线程数 300 就又扛不住了，所以通过这些测
其他条件不变的情况下，TPS可以翻一倍，达到1200~1500，QPS为20000左右，如
调整 innodb_buffer_pool_size 为 24G，支持的连接数为 3000 个，我们继续测试。
压测MySQL-
0
1000
1200
1800