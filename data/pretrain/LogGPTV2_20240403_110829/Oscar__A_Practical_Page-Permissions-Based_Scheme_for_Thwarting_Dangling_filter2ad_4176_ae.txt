Oscar’s performance is especially good for programs
that use region-based allocators:
since there are few
malloc()s or free()s to instrument, and correspond-
ingly low memory or TLB pressure, Oscar imposes neg-
ligible overhead. Other classes of lock-and-key schemes
also provide full protection to programs with region-
based allocators, but they often have high overhead, since
they must instrument all pointer arithmetic operations
(and possibly pointer dereferences).
6 Discussion
Our results show that shadow-page-based schemes with
our optimizations have low overhead on many bench-
marks. From Table 1, we argue that changing the lock
is theoretically easier than revoking all the keys, and im-
plicit lock-and-key is better than explicit. Our experi-
mental results conﬁrm that prediction: Oscar’s runtime
overhead is lower than CETS, DangNull, and FreeSentry
overall and on most benchmarks, and comparable to
DangSan (but with lower memory overhead for Oscar),
even though they all need source code while Oscar does
not.
6.1 Virtual Address Space Considered
Hard to Fill
A concern might be that Oscar would exhaust the 247B
=128TB user-space virtual address space, necessitating
reuse of addresses belonging to freed pages. This is
unlikely in common scenarios. Based on extrapolating
the CPU2006 benchmarks, it would take several days of
continuous execution even for allocation-intensive pro-
grams.
For example, with perlbench, which allo-
cates 361 million objects (≈1.4TB of shadow virtual
pages; >99% of objects ﬁt in one page) over 25 min-
utes, it would take 1.6 days (albeit less on newer, faster
hardware) to allocate 128TB. dealII, omnetpp and
xalancbmk would take over 2.5 days each, gcc would
take 5 days, and all other CPU2006 benchmarks would
take at least 2 weeks. We expect that most programs
would have signiﬁcantly shorter lifetimes, and there-
fore would never exhaust the virtual address space.
It
is more likely that they would ﬁrst encounter problems
with the unreclaimed page-table memory (see Section 8).
Nonetheless, it is possible to ensure safe reuse of virtual
address space, by applying a conservative garbage col-
lector to old shadow addresses (note that this does not
USENIX Association
26th USENIX Security Symposium    827
affect physical memory, which is already reused with
new shadow addresses); this was proposed (but not im-
plemented) by Dhurjati and Adve.
Recently, Intel has proposed 5-level paging, allowing
a 57-bit virtual address space [20]; implementation of
Linux support is already underway [37]. This 512-fold
increase would make virtual address space exhaustion
take years for every CPU2006 benchmark.
6.2 Hardware Extensions
Due to the high overhead of software-based temporal
memory safety for C, some have proposed hardware ex-
tensions (e.g., Watchdog [30]). Oscar is fast because it
already utilizes hardware – hardware which is present
in many generations of x86 CPUs:
the memory man-
agement unit, which checks page table entries. We
believe that, with incremental improvements, shadow-
page-based schemes will be fast enough for widespread
use, without the need for special hardware extensions.
For example, Intel’s Broadwell CPUs have a larger TLB
and also a second TLB page miss handler [7], which are
designed to improve performance for general workloads,
but would be particularly useful in relieving Oscar’s TLB
pressure. Intel has also proposed ﬁner grained memory
protection [35]; if future CPUs support read+write pro-
tection on subpage regions, Oscar could be adapted to
one-object-per-subpage, which would reduce the num-
ber of shadows (and thereby TLB pressure).
6.3 Compatibility
Barring virtual address space exhaustion (discussed in
Section 6.1), Oscar will crash a program if and only if the
program dereferences a pointer after its object has been
freed. It does not interfere with other uses of pointers.
Unlike other lock-and-key schemes, page-permissions-
based schemes do not need to instrument pointer arith-
metic or dereferencing (Table 1).
Accordingly, Oscar correctly handles many corner
cases that other schemes cannot handle. For exam-
ple, DangNull/FreeSentry do not work correctly with en-
crypted pointers (e.g., PointGuard [21]) or with typecast-
ing from non-pointer types. CETS has false positives
when casting from a non-pointer to pointer, as it will ini-
tialize the key and lock address to invalid values.
Additionally, DangNull does not allow pointer arith-
metic on freed pointers. For example, suppose we allo-
cate a string p on the heap, search for a character, then
free the string:
Computing the index of “a” (q - p == 3) fails with
DangNull, since p and q were nulliﬁed.
It does work
with DangSan and FreeSentry (since they only change
the top bits) and with Oscar.
DangSan, DangNull and FreeSentry only track the lo-
cation of pointers when they are stored in memory, but
not registers. This can lead to false negatives: DangSan
notes that this may happen with pointers spilled from reg-
isters onto the stack during function prologues, as well as
race conditions where a pointer may be stored into a reg-
ister by one thread while another thread frees that object.
DangSan considers both issues to be infeasible to solve
(for performance reasons, and also the possibility of false
positives when inspecting the stack).
7 Related Work
7.1 Dhurjati and Adve (2006)
Our work is inspired by the original page-permission
with shadows scheme by Dhurjati and Adve [23]. Un-
like Dhurjati and Adve’s automatic pool allocation, Os-
car can unmap shadows as soon as an object is freed, and
does not require source code. Oscar also addresses com-
patibility with fork, which appears to be a previously
unknown limitation of Dhurjati and Adve’s scheme14.
They considered programs that fork to be advantageous,
since virtual address space wastage in one child will not
affect the address space of other children. Unfortunately,
writes to old (pre-fork) heap objects will be propagated
between parent and children (see Section 5.1), resulting
in memory corruption.
While Dhurjati and Adve did measure the runtime of
their particular scheme, their measurements do not let us
break down how much each aspect of their scheme con-
tributes to runtime overhead. First, their scheme relies
upon static analysis (Automatic Pool Allocation: “PA”),
and they did not measure the cost of shadow pages with-
out PA. We cannot simply obtain “cost of syscalls” via
“(PA + dummy syscalls) − PA”, since pool allocation af-
fects the cost of syscalls and cache pressure. Second,
they did not measure the cost of each of the four factors
we identiﬁed. For instance, they did not measure the in-
dividual cost of inline metadata or changing the memory
allocation method; instead, they are lumped in with the
cost of dummy syscalls. This makes it hard to predict
the overhead of other variant schemes, e.g., using one
object per physical page frame. Finally, they used a cus-
tom benchmark and Olden [34], which make it harder to
compare their results to other schemes that are bench-
marked with SPEC CPU; and many of their benchmark
char* p = strdup("Oscar"); // Memory from malloc
char* q = strchr(p, ’a’);
// Find the first ’a’
free(p);
14We inspected their source http://safecode.cs.illinois.
edu/downloads.html and found that they used MAP SHARED without
a mechanism to deal with fork.
828    26th USENIX Security Symposium
USENIX Association
Table 2: Comparison with Dhurjati and Adve. Green and a tick indicates an advantageous distinction. ∗ Oscar unmaps
the shadows for freed objects, but Linux does not reclaim the PTE memory (see Section 8).
run-times are under ﬁve seconds, which means random
error has a large impact. For these reasons, in this work
we undertook a more systematic study of the sources of
overhead in shadow-page-based temporal memory safety
schemes.
To reduce their system’s impact on page table uti-
lization, Dhurjati and Adve employed static source-
code analysis (Automatic Pool Allocation) – to sepa-
rate objects into memory pools of different lifetimes,
beyond which the pointers are guaranteed not to be
dereferenced. Once the pool can be destroyed, they
can remove (or reuse) page table entries (and associ-
ated vm area structs) of freed objects. Unfortunately,
there may be a signiﬁcant lag between when the object is
freed, and when its containing pool is destroyed; in the
worst case (e.g., objects reachable from a global pointer),
a pool may last for the lifetime of the program. Besides
being imprecise, inferring object lifetimes via static anal-
ysis also introduces a requirement to have application
source code, making it difﬁcult and error-prone to de-
ploy. Oscar’s optimizations do not require application
source code or compiler changes.
We cannot directly compare Oscar’s overhead to Dhur-
jati and Adve’s full scheme with automatic pool alloca-
tion, since they did not report numbers for SPEC CPU.
less
state for
Oscar usually keeps
freed ob-
jects:
they retain a page table entry (and associated
vm area struct) for each freed object in live pools
– some of which may be long-lived – whereas Oscar
munmaps the shadow as soon as the object is freed (Table
2). Dhurjati and Adve expressly target their scheme to-
wards server programs – since those do few allocations
or deallocations – yet they do not account for fork or
custom memory allocators.
If we are not concerned about the disadvantages of au-
tomatic pool allocation, it too would beneﬁt from our
optimizations. For example, we have seen that using
MAP PRIVATE greatly reduces the overhead for mcf and
milc, and we expect this beneﬁt to carry over when com-
bined with automatic pool allocation.
7.2 Other
Schemes
Deterministic
Protection
The simplest protection is to never free() any memory
regions. This is perfectly secure, does not require appli-
cation source code (change the free function to be no-
op), has excellent compatibility, and low run-time over-
head. However, it also requires inﬁnite memory, which
is impractical.
With DangNull [27], when an object is freed, all point-
ers to the object are set to NULL. The converse policy –
when all references to a region are NULL (or invalid), au-
tomatically free the region – is “garbage collection”. In
C/C++, there is ambiguity about what is a pointer, hence
it is only possible to perform conservative garbage col-
lection, where anything that might plausibly be a pointer
is treated as a pointer, thus preventing free()’ing of the
referent. This has the disadvantages of false positives
and lower responsiveness.
The Rust compiler enforces that each object can only
have one owner [4]; with our lock-and-key metaphor, this
is equivalent to ensuring that each lock has only one key,
which may be “borrowed” (ala Rust terminology) but
not copied. This means that when a key is surrendered
(pointer becomes out of scope), the corresponding lock-
/object can be safely reused. It would be impractical to
rewrite all legacy C/C++ software in Rust, let alone pro-
vide Rust’s guarantees to binaries that are compiled from
C/C++.
MemSafe [38] combines spatial and temporal mem-
ory checks: when an object is deallocated, the bounds
are set to zero (a special check is required for sub-object
temporal memory safety). MemSafe modiﬁes the LLVM
IR, and does not allow inline assembly or self-modifying
code. Of the ﬁve SPEC 2006 benchmarks they used, their
run-times appear to be from the ‘test’ dataset rather than
the ‘reference’ dataset. For example, for astar, their
base run-time is 0.00 seconds, whereas Oscar’s is 408.9
seconds. Their non-zero run-time benchmarks have sig-
niﬁcant overhead – 183% for bzip2, 127% for gobmk,
124% for hmmer, and 120% for sjeng – though this in-
USENIX Association
26th USENIX Security Symposium    829
  One object per physical page frame One object per shadow virtual page (core technique of Dhurjati & Adve [D&A]) Physical memory overhead e.g., Electric Fence Vanilla Automatic pool allocation [D&A] Our work User-space memory 0 – 4KB per object (page align)  Low overhead (O(sizeof(void*)) per object) Page table entry for live objects 1 page table entry per object Page table entry for freed objs  1 PTE per object 1 PTE per object in live pools 0 PTEs* VMA struct for live objects 1 VMA struct per object VMA struct for freed objects  1 VMA struct per object  None No application source needed  Yes  Yes No; needs source + recompilation  Yes Compatible with fork()  Yes No; changes program semantics  Mostly     cludes spatial and stack temporal protection.
Dynamic instrumentation (e.g., Valgrind’s memcheck
[3]) is generally too slow other than for debugging.
Undangle [15] uses taint tracking to track pointer
propagation. They do not provide SPEC results, but we
expect it to be even slower than DangNull/FreeSentry,
because Undangle determines how pointers are propa-
gated by, in effect, interpreting each x86 instruction.
Safe dialects of C, such as CCured [33], generally re-
quire some source code changes, such as removing un-
safe casts to pointers. CCured also changes the memory
layout of pointers (plus-size pointers), making it difﬁcult
to interface with libraries that have not been recompiled
with CCured.
7.3 Hardening
The premise of heap temporal memory safety schemes,
such as Oscar, is that the attacker could otherwise re-
peatedly attempt to exploit a memory safety vulnerabil-
ity, and has disabled or overcome any mitigations such
ASLR (nonetheless, as noted earlier, Oscar is compati-
ble with ASLR). Thus, Oscar provides deterministic pro-
tection against heap use-after-free (barring address space
exhaustion/reuse, as discussed in Section 6.1).
However, due to the high overhead of prior temporal
memory safety schemes, some papers trade off protec-
tion for speed.
Many papers, starting with DieHard [13], approxi-
mate the inﬁnite heap (use a heap that is M times larger
than normally needed) and randomize where objects are
placed on the heap. This means even if an object is
used after it is freed, there is a “low” probability that
the memory region has been reallocated. Archipelago
[28] extends DieHard but uses less physical memory, by
compacting cold objects. Both can be attacked by mak-
ing many large allocations to exhaust the M-approximate
heap, forcing earlier reuse of freed objects.