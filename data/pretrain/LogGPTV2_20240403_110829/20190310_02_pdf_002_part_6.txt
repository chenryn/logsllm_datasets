2.2 Advanced Concepts
The previous section discussed the basics of using SQL to store and access your data in
Advanced Server. This section discusses more advanced SQL features that may simplify
management and prevent loss or corruption of your data.
2.2.1 Views
Consider the following SELECT command.
SELECT ename, sal, sal * 24 AS yearly_salary, deptno FROM emp;
ename | sal | yearly_salary | deptno
--------+---------+---------------+--------
SMITH | 800.00 | 19200.00 | 20
ALLEN | 1600.00 | 38400.00 | 30
WARD | 1250.00 | 30000.00 | 30
JONES | 2975.00 | 71400.00 | 20
MARTIN | 1250.00 | 30000.00 | 30
BLAKE | 2850.00 | 68400.00 | 30
CLARK | 2450.00 | 58800.00 | 10
SCOTT | 3000.00 | 72000.00 | 20
KING | 5000.00 | 120000.00 | 10
TURNER | 1500.00 | 36000.00 | 30
ADAMS | 1100.00 | 26400.00 | 20
JAMES | 950.00 | 22800.00 | 30
FORD | 3000.00 | 72000.00 | 20
MILLER | 1300.00 | 31200.00 | 10
(14 rows)
If this is a query that is used repeatedly, a shorthand method of reusing this query without
re-typing the entire SELECT command each time is to create a view as shown below.
CREATE VIEW employee_pay AS SELECT ename, sal, sal * 24 AS yearly_salary,
deptno FROM emp;
The view name, employee_pay, can now be used like an ordinary table name to
perform the query.
SELECT * FROM employee_pay;
ename | sal | yearly_salary | deptno
--------+---------+---------------+--------
SMITH | 800.00 | 19200.00 | 20
ALLEN | 1600.00 | 38400.00 | 30
WARD | 1250.00 | 30000.00 | 30
JONES | 2975.00 | 71400.00 | 20
MARTIN | 1250.00 | 30000.00 | 30
BLAKE | 2850.00 | 68400.00 | 30
CLARK | 2450.00 | 58800.00 | 10
SCOTT | 3000.00 | 72000.00 | 20
KING | 5000.00 | 120000.00 | 10
TURNER | 1500.00 | 36000.00 | 30
ADAMS | 1100.00 | 26400.00 | 20
JAMES | 950.00 | 22800.00 | 30
FORD | 3000.00 | 72000.00 | 20
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 43
Database Compatibility for Oracle® Developers Guide
MILLER | 1300.00 | 31200.00 | 10
(14 rows)
Making liberal use of views is a key aspect of good SQL database design. Views provide
a consistent interface that encapsulate details of the structure of your tables which may
change as your application evolves.
Views can be used in almost any place a real table can be used. Building views upon
other views is not uncommon.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 44
Database Compatibility for Oracle® Developers Guide
2.2.2 Foreign Keys
Suppose you want to make sure all employees belong to a valid department. This is called
maintaining the referential integrity of your data. In simplistic database systems this
would be implemented (if at all) by first looking at the dept table to check if a matching
record exists, and then inserting or rejecting the new employee record. This approach has
a number of problems and is very inconvenient. Advanced Server can make it easier for
you.
A modified version of the emp table presented in Section 2.1.2 is shown in this section
with the addition of a foreign key constraint. The modified emp table looks like the
following:
CREATE TABLE emp (
empno NUMBER(4) NOT NULL CONSTRAINT emp_pk PRIMARY KEY,
ename VARCHAR2(10),
job VARCHAR2(9),
mgr NUMBER(4),
hiredate DATE,
sal NUMBER(7,2),
comm NUMBER(7,2),
deptno NUMBER(2) CONSTRAINT emp_ref_dept_fk
REFERENCES dept(deptno)
);
If an attempt is made to issue the following INSERT command in the sample emp table,
the foreign key constraint, emp_ref_dept_fk, ensures that department 50 exists in the
dept table. Since it does not, the command is rejected.
INSERT INTO emp VALUES (8000,'JONES','CLERK',7902,'17-AUG-07',1200,NULL,50);
ERROR: insert or update on table "emp" violates foreign key constraint
"emp_ref_dept_fk"
DETAIL: Key (deptno)=(50) is not present in table "dept".
The behavior of foreign keys can be finely tuned to your application. Making correct use
of foreign keys will definitely improve the quality of your database applications, so you
are strongly encouraged to learn more about them.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 45
Database Compatibility for Oracle® Developers Guide
2.2.3 The ROWNUM Pseudo-Column
ROWNUM is a pseudo-column that is assigned an incremental, unique integer value for
each row based on the order the rows were retrieved from a query. Therefore, the first
row retrieved will have ROWNUM of 1; the second row will have ROWNUM of 2 and so on.
This feature can be used to limit the number of rows retrieved by a query. This is
demonstrated in the following example:
SELECT empno, ename, job FROM emp WHERE ROWNUM < 5;
empno | ename | job
-------+-------+----------
7369 | SMITH | CLERK
7499 | ALLEN | SALESMAN
7521 | WARD | SALESMAN
7566 | JONES | MANAGER
(4 rows)
The ROWNUM value is assigned to each row before any sorting of the result set takes place.
Thus, the result set is returned in the order given by the ORDER BY clause, but the
ROWNUM values may not necessarily be in ascending order as shown in the following
example:
SELECT ROWNUM, empno, ename, job FROM emp WHERE ROWNUM < 5 ORDER BY ename;
rownum | empno | ename | job
--------+-------+-------+----------
2 | 7499 | ALLEN | SALESMAN
4 | 7566 | JONES | MANAGER
1 | 7369 | SMITH | CLERK
3 | 7521 | WARD | SALESMAN
(4 rows)
The following example shows how a sequence number can be added to every row in the
jobhist table. First a new column named, seqno, is added to the table and then seqno
is set to ROWNUM in the UPDATE command.
ALTER TABLE jobhist ADD seqno NUMBER(3);
UPDATE jobhist SET seqno = ROWNUM;
The following SELECT command shows the new seqno values.
SELECT seqno, empno, TO_CHAR(startdate,'DD-MON-YY') AS start, job FROM
jobhist;
seqno | empno | start | job
-------+-------+-----------+-----------
1 | 7369 | 17-DEC-80 | CLERK
2 | 7499 | 20-FEB-81 | SALESMAN
3 | 7521 | 22-FEB-81 | SALESMAN
4 | 7566 | 02-APR-81 | MANAGER
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 46
Database Compatibility for Oracle® Developers Guide
5 | 7654 | 28-SEP-81 | SALESMAN
6 | 7698 | 01-MAY-81 | MANAGER
7 | 7782 | 09-JUN-81 | MANAGER
8 | 7788 | 19-APR-87 | CLERK
9 | 7788 | 13-APR-88 | CLERK
10 | 7788 | 05-MAY-90 | ANALYST
11 | 7839 | 17-NOV-81 | PRESIDENT
12 | 7844 | 08-SEP-81 | SALESMAN
13 | 7876 | 23-MAY-87 | CLERK
14 | 7900 | 03-DEC-81 | CLERK
15 | 7900 | 15-JAN-83 | CLERK
16 | 7902 | 03-DEC-81 | ANALYST
17 | 7934 | 23-JAN-82 | CLERK
(17 rows)
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 47
Database Compatibility for Oracle® Developers Guide
2.2.4 Synonyms
A synonym is an identifier that can be used to reference another database object in a SQL
statement. A synonym is useful in cases where a database object would normally require
full qualification by schema name to be properly referenced in a SQL statement. A
synonym defined for that object simplifies the reference to a single, unqualified name.
Advanced Server supports synonyms for:
 tables
 views
 materialized views
 sequences
 procedures
 functions
 types
 objects that are accessible through a database link
 other synonyms
Neither the referenced schema or referenced object must exist at the time that you create
the synonym; a synonym may refer to a non-existent object or schema. A synonym will
become invalid if you drop the referenced object or schema. You must explicitly drop a
synonym to remove it.
As with any other schema object, Advanced Server uses the search path to resolve
unqualified synonym names. If you have two synonyms with the same name, an
unqualified reference to a synonym will resolve to the first synonym with the given name
in the search path. If public is in your search path, you can refer to a synonym in that
schema without qualifying that name.
When Advanced Server executes an SQL command, the privileges of the current user are
checked against the synonym’s underlying database object; if the user does not have the
proper permissions for that object, the SQL command will fail.
Creating a Synonym
Use the CREATE SYNONYM command to create a synonym. The syntax is:
CREATE [OR REPLACE] [PUBLIC] SYNONYM [schema.]syn_name
FOR object_schema.object_name[@dblink_name];
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 48
Database Compatibility for Oracle® Developers Guide
Parameters:
syn_name
syn_name is the name of the synonym. A synonym name must be unique within
a schema.
schema
schema specifies the name of the schema that the synonym resides in. If you do
not specify a schema name, the synonym is created in the first existing schema in
your search path.
object_name
object_name specifies the name of the object.
object_schema
object_schema specifies the name of the schema that the object resides in.
dblink_name
dblink_name specifies the name of the database link through which a target
object may be accessed.
Include the REPLACE clause to replace an existing synonym definition with a new
synonym definition.
Include the PUBLIC clause to create the synonym in the public schema. Compatible
with Oracle databases, the CREATE PUBLIC SYNONYM command creates a synonym that
resides in the public schema:
CREATE [OR REPLACE] PUBLIC SYNONYM syn_name FOR
object_schema.object_name;
This just a shorthand way to write:
CREATE [OR REPLACE] SYNONYM public.syn_name FOR
object_schema.object_name;
The following example creates a synonym named personnel that refers to the
enterprisedb.emp table.
CREATE SYNONYM personnel FOR enterprisedb.emp;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 49
Database Compatibility for Oracle® Developers Guide
Unless the synonym is schema qualified in the CREATE SYNONYM command, it will be
created in the first existing schema in your search path. You can view your search path
by executing the following command:
SHOW SEARCH_PATH;
search_path
-----------------------
development,accounting
(1 row)
In our example, if a schema named development does not exist, the synonym will be
created in the schema named accounting.
Now, the emp table in the enterprisedb schema can be referenced in any SQL
statement (DDL or DML), by using the synonym, personnel:
INSERT INTO personnel VALUES (8142,'ANDERSON','CLERK',7902,'17-DEC-06',1300,NULL,20);
SELECT * FROM personnel;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+----------+-----------+------+--------------------+---------+---------+--------
7369 | SMITH | CLERK | 7902 | 17-DEC-80 00:00:00 | 800.00 | | 20
7499 | ALLEN | SALESMAN | 7698 | 20-FEB-81 00:00:00 | 1600.00 | 300.00 | 30
7521 | WARD | SALESMAN | 7698 | 22-FEB-81 00:00:00 | 1250.00 | 500.00 | 30
7566 | JONES | MANAGER | 7839 | 02-APR-81 00:00:00 | 2975.00 | | 20
7654 | MARTIN | SALESMAN | 7698 | 28-SEP-81 00:00:00 | 1250.00 | 1400.00 | 30
7698 | BLAKE | MANAGER | 7839 | 01-MAY-81 00:00:00 | 2850.00 | | 30
7782 | CLARK | MANAGER | 7839 | 09-JUN-81 00:00:00 | 2450.00 | | 10
7788 | SCOTT | ANALYST | 7566 | 19-APR-87 00:00:00 | 3000.00 | | 20
7839 | KING | PRESIDENT | | 17-NOV-81 00:00:00 | 5000.00 | | 10
7844 | TURNER | SALESMAN | 7698 | 08-SEP-81 00:00:00 | 1500.00 | 0.00 | 30
7876 | ADAMS | CLERK | 7788 | 23-MAY-87 00:00:00 | 1100.00 | | 20
7900 | JAMES | CLERK | 7698 | 03-DEC-81 00:00:00 | 950.00 | | 30
7902 | FORD | ANALYST | 7566 | 03-DEC-81 00:00:00 | 3000.00 | | 20
7934 | MILLER | CLERK | 7782 | 23-JAN-82 00:00:00 | 1300.00 | | 10
8142 | ANDERSON | CLERK | 7902 | 17-DEC-06 00:00:00 | 1300.00 | | 20
(15 rows)
Deleting a Synonym
To delete a synonym, use the command, DROP SYNONYM. The syntax is:
DROP [PUBLIC] SYNONYM [schema.] syn_name
Parameters:
syn_name
syn_name is the name of the synonym. A synonym name must be unique within
a schema.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 50
Database Compatibility for Oracle® Developers Guide
schema
schema specifies the name of the schema in which the synonym resides.
Like any other object that can be schema-qualified, you may have two synonyms with the
same name in your search path. To disambiguate the name of the synonym that you are
dropping, include a schema name. Unless a synonym is schema qualified in the DROP
SYNONYM command, Advanced Server deletes the first instance of the synonym it finds in
your search path.
You can optionally include the PUBLIC clause to drop a synonym that resides in the
public schema. Compatible with Oracle databases, the DROP PUBLIC SYNONYM
command drops a synonym that resides in the public schema:
DROP PUBLIC SYNONYM syn_name;
The following example drops the synonym, personnel:
DROP SYNONYM personnel;
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 51
Database Compatibility for Oracle® Developers Guide
2.2.5 Hierarchical Queries
A hierarchical query is a type of query that returns the rows of the result set in a
hierarchical order based upon data forming a parent-child relationship. A hierarchy is
typically represented by an inverted tree structure. The tree is comprised of
interconnected nodes. Each node may be connected to none, one, or multiple child nodes.
Each node is connected to one parent node except for the top node which has no parent.
This node is the root node. Each tree has exactly one root node. Nodes that don’t have
any children are called leaf nodes. A tree always has at least one leaf node - e.g., the
trivial case where the tree is comprised of a single node. In this case it is both the root and
the leaf.
In a hierarchical query the rows of the result set represent the nodes of one or more trees.
Note: It is possible that a single, given row may appear in more than one tree and thus
appear more than once in the result set.
The hierarchical relationship in a query is described by the CONNECT BY clause which
forms the basis of the order in which rows are returned in the result set. The context of
where the CONNECT BY clause and its associated optional clauses appear in the SELECT
command is shown below.
SELECT select_list FROM table_expression [ WHERE ...]
[ START WITH start_expression ]
CONNECT BY { PRIOR parent_expr = child_expr |
child_expr = PRIOR parent_expr }
[ ORDER SIBLINGS BY column1 [ ASC | DESC ]
[, column2 [ ASC | DESC ] ] ...
[ GROUP BY ...]
[ HAVING ...]
[ other ...]
select_list is one or more expressions that comprise the fields of the result set.
table_expression is one or more tables or views from which the rows of the result set
originate. other is any additional legal SELECT command clauses. The clauses pertinent
to hierarchical queries, START WITH, CONNECT BY, and ORDER SIBLINGS BY are
described in the following sections.
Note: At this time, Advanced Server does not support the use of AND (or other operators)
in the CONNECT BY clause.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 52
Database Compatibility for Oracle® Developers Guide
2.2.5.1 Defining the Parent/Child Relationship
For any given row, its parent and its children are determined by the CONNECT BY clause.
The CONNECT BY clause must consist of two expressions compared with the equals (=)
operator. In addition, one of these two expressions must be preceded by the keyword,
PRIOR.
For any given row, to determine its children:
1. Evaluate parent_expr on the given row
2. Evaluate child_expr on any other row resulting from the evaluation of
table_expression
3. If parent_expr = child_expr, then this row is a child node of the given
parent row
4. Repeat the process for all remaining rows in table_expression. All rows that
satisfy the equation in step 3 are the children nodes of the given parent row.
Note: The evaluation process to determine if a row is a child node occurs on every row
returned by table_expression before the WHERE clause is applied to
table_expression.
By iteratively repeating this process treating each child node found in the prior steps as a
parent, an inverted tree of nodes is constructed. The process is complete when the final
set of child nodes has no children of their own - these are the leaf nodes.
A SELECT command that includes a CONNECT BY clause typically includes the START
WITH clause. The START WITH clause determines the rows that are to be the root nodes -
i.e., the rows that are the initial parent nodes upon which the algorithm described
previously is to be applied. This is further explained in the following section.
2.2.5.2 Selecting the Root Nodes
The START WITH clause is used to determine the row(s) selected by
table_expression that are to be used as the root nodes. All rows selected by
table_expression where start_expression evaluates to true become a root node
of a tree. Thus, the number of potential trees in the result set is equal to the number of
root nodes. As a consequence, if the START WITH clause is omitted, then every row
returned by table_expression is a root of its own tree.
2.2.5.3 Organization Tree in the Sample Application
Consider the emp table of the sample application. The rows of the emp table form a
hierarchy based upon the mgr column which contains the employee number of the
employee’s manager. Each employee has at most, one manager. KING is the president of
the company so he has no manager, therefore KING’s mgr column is null. Also, it is
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 53
Database Compatibility for Oracle® Developers Guide
possible for an employee to act as a manager for more than one employee. This
relationship forms a typical, tree-structured, hierarchical organization chart as illustrated
below.
Figure 2 Employee Organization Hierarchy
To form a hierarchical query based upon this relationship, the SELECT command includes
the clause, CONNECT BY PRIOR empno = mgr. For example, given the company