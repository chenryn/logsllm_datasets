×Gp3 , then B has
properly simulated Gamek,1. If T $← Gp1
× Gp3 , then B has
properly simulated Gamek,2. Hence, B can use the output
of A to distinguish between these possibilities for T .
semi-functional key of type 2.
Lemma 4. Suppose that G satisﬁes Assumption 2. Then
Gamek,2 and Gamek,3 are computationally indistinguishable.
Proof. Suppose there exists an algorithm A that distin-
guishes Gamek,2 and Gamek,3. Then we can build an algo-
rithm B with non-negligible advantage in breaking Assump-
tion 2. B is given g, X1X2, Y2Y3, X3, X4, T and will simulate
Gamek,2 or Gamek,3 with A. B chooses α, a, a0, a1, . . . , an ∈
ZN and Z ∈ Gp4 uniformly at random.
It then sets h =
ga0 , u1 = ga1 , . . . , un = gan , and sends A the public param-
eters:
PK = (N, g, ga, e(g, g)α, u1, . . . , un, H = h · Z, X4).
The ﬁrst k − 1 semi-functional keys of type 3, the nor-
mal keys > k, and the challenge ciphertext are constructed
exactly as in the Lemma 2.
To answer the k-th key quest for S = (s1, . . . , sn), B
chooses a random exponent δ ∈ ZN , random elements ˜R,
, ˜R1, . . . , ˜Rn ∈ Gp3 and sets:
′
˜R
K = gα · T a · ˜R · (Y2Y3)δ,
= T · ˜R
′
′
K
{Ki = T a0+aisi · ˜R
,
i}i≤i≤n.
′
×Gp2
×Gp3 ,
}i≤i≤n,
′
We have the following observations. If T $← Gp1
then T can be written as gtgd
2
′ · gd
′
′
= gtR
2 ,
K
i h)tRi · gdi
{Ki = (usi
′
= ¯R ˜R
2 Y δ
K = gαgatR · gd
2 ,
′
2 = gad
¯R, and
2 , R
′
2
3 , gd
, Ri = ¯Ra0+aisi ˜R
where R = ¯Ra ˜RY δ
′
(a0 + aisi). This is a semi-functional key of type 3.
di = d
Note that the values of δ modulo p2 are uncorrelated from
their values modulo p3. If T $← Gp1
× Gp3 , this is a properly
distributed semi-functional key of type 2.
Similar to the analysis in the proof of Lemma 2 of Lewko
et al.’s CP-ABE scheme [14], the kth key and ciphertext
are properly distributed. We can conclude that, if T $←
× Gp2
× Gp3 , then B has properly simulated Gamek,3.
Gp1
If T $← Gp1
× Gp3 , then B has properly simulated Gamek,2.
Hence, B can use the output of A to distinguish between
these possibilities for T .
Lemma 5. Suppose that G satisﬁes Assumption 3. Then
Gameq,3 and GameFinal0 are computationally indistinguish-
able.
Proof. Suppose there exists an algorithm A that distin-
guishes Gameq,3 and GameFinal0 . Then we can build an algo-
rithm B with non-negligible advantage in breaking Assump-
tion 3. B is given g, g2, gαX2, gsY2, X3, X4, T and will simu-
late Gameq,3 or GameFinal0 with A. B chooses a, a0, a1, . . . , an ∈
ZN and Z ∈ Gp4 uniformly at random.
It then sets h =
4. B sets the challenge ciphertext as C = ((A, ρ), ˜C1, C
′
1,
2,{C2,x, D2,x}1≤x≤ℓ) and sends
′
{C1,x, D1,x}1≤x≤ℓ, ˜C2, C
it to A.
′
i,
Let gsY2 = gsgc
C1,x = gaAx·v(u
2, then
˜C1 = Mβ · T, C
t(cid:26)(x)
ρ(x) H)
D1,x = grx Z
′
˜C2 = e(g, g)αs
C2,x = gaAx·v
′
(u
t(cid:26)(x)
ρ(x) H)
′
x Z
D2,x = gr
,
1 = gs · gc
′
2,
−rx Z1,x · g
Axw+γxz(cid:26)(x)
2
1,x · g
−γx
′
,
′ · gc
′
′
2 = gs
2 ,
, C
′
x Z2,x · g
′
−r
Axw
2
2,x · g
−γ
′
2
+γ
′
x
,
2
′
xz(cid:26)(x)
,
If T = e(g, g)αs, this is a properly distributed semi-functional
where v = (s, s˜v2, . . . , s˜vn), rx = s˜rx, Z1,x = ˜Z1,xZ rx , w =
ca˜v, γx = −c˜rx, zρ(x) = a0 + aρ(x)tρ(x). Note that the values
of a, a0, aρ(x), tρ(x), ˜v2, . . . , ˜vn, ˜rx modulo p1 are uncorrelated
from their values modulo p2.
encryption of Mβ and B simulates Gameq,3. Otherwise, this
is a properly distributed semi-functional encryption of a ran-
dom message in GT and B simulates GameFinal0 . Hence, B
can use the output of A to distinguish between these possi-
bilities for T .
Lemma 6. Suppose that G satisﬁes Assumption 4. Then
GameFinal0 and GameFinal1 are computationally indistinguish-
able.
Proof. Suppose there exists an algorithm A that dis-
tinguishes GameFinal0 and GameFinal1 . Then we can build an
algorithm B with non-negligible advantage in breaking As-
sumption 4. B is given (g, g2, gt
gr
D2D4, T ) and will simulate GameFinal0 or GameFinal1 with
A. B chooses a, α, a1, . . . , an ∈ ZN and Z ∈ Gp4 uniformly
at random. It then sets u1 = ga1 , . . . , un = gan , and sends
A the public parameters:
Y2, X3, X4, hZ,
′
B2, ht
′
′
PK = (N, g, ga, e(g, g)α, u1, . . . , un, H = hZ, X4).
Each time B is asked to provide a key for S = (s1, . . . , sn),
B creates a semi-functional key by choosing a random expo-
, R1, . . . , Rn ∈ Gp3 , and
nent ˜t ∈ ZN , random elements R, R
setting:
′
′
, γ
−~rxa(cid:26)(x)t(cid:26)(x)
, γx =
′
−~r
′
x ˜Z2,xA
x
4
˜rx, Z1,x = Z rx ˜Z1,xA
−~rx
4 D
where rx = r
4
−γ ˜rx, zρ(x) = δ+aρ(x)tρ(x), Z
′
1,x = D ~rx
4 , Z2,x = Z r
′
−~r
′
x = −γ ˜r
′
′
′
xa(cid:26)(x)t(cid:26)(x)
2,x = D ~r
D
4 . This is a properly
x, Z
x
4
distributed semi-functional encryption of a random message
′
in GT because the values of ˜rx, ˜r
x, aρ(x), tρ(x) modulo p1
and p2 are uncorrelated from their values modulo p4.
If
T $← Gp1
× Gp2
× Gp4 , this is a properly distributed semi-
functional ciphertext with ˜C1 random in GT , and C1,x, C2,x
× Gp2
random in Gp1
A2A4, then B has prop-
We can conclude that, if T = hr
erly simulated GameFinal0 . If T $← Gp1
× Gp4 , then
B has properly simulated GameFinal1 . Hence, B can use the
output of A to distinguish between these possibilities for
T .
× Gp4 .
× Gp2
′
′
K = gα(gt
{Ki = (gt
B2)a~tR,
′
K
′
B2)aisi ~t(ht
Y2)
′
′
~tR
= (gt
B2)
~tRi}1≤i≤n.
′
,
We observe that
2
2
2 , gd
′˜t, gd
2 = Ba~t
K = gαgatR · gd
2 ,
′
= gtR
K
{Ki = (usi
′
2 = B ~t
2, gdi
′ · gd
′
2 ,
i h)tRi · gdi
}1≤i≤n,
2 = Baisi ~t
Y ~t
2 . This is a
where t = t
properly distributed semi-functional key of type 3 because
the values of ˜t, a, ai, si modulo p2 is uncorrelated to their
values modulo p1.
At some point, A sends B two (equal length) messages
M0, M1 and two access structures (A, ρ,T0), (A, ρ, T1). B
chooses β ∈ {0, 1} randomly and does the following.
1. B chooses random vectors v = (s, v2, . . . , vn), v
2. B chooses random values ˜rx, ˜r
x ∈ ZN and ˜Z1,x, ˜Z2,x ∈
′
3. Let Tβ = (tρ(1), . . . , tρ(ℓ)). B chooses random exponents
′ ∈ Zn
N .
′
2, . . . , v
, v
=
′
′
(s
′
n), w, w
Gp4 for 1 ≤ x ≤ ℓ.
′ ∈ ZN and sets
˜C1
′
C1,x = gaAx·v(gr
c, c
−~rx gAxw
2
˜Z1,x,
$← GT , C
D2D4)
′
1 = gsgc
2,
−~rxa(cid:26)(x)t(cid:26)(x) T
′
D2D4)~rx ,
′
′
2 = gs
D1,x = (gr
′
′
˜C2 = e(g, g)αs
gc
, C
2 ,
′
′
−~r
−~r
x gAxw
xa(cid:26)(x)t(cid:26)(x) T
′
′
D2D4)~r
x .
D2,x = (gr
D2D4)
(gr
2
′
′
′
˜Z2,x,
C2,x = gaAx·v
4. B sets the challenge ciphertext as C = ((A, ρ), ˜C1, C
′
1,
2,{C2,x, D2,x}1≤x≤ℓ) and sends
′
{C1,x, D1,x}1≤x≤ℓ, ˜C2, C
it to A.
′
If T = hr
A2A4, let D2 = gγ
C1,x = gaAx·v(u
˜C1
$← GT , C
t(cid:26)(x)
ρ(x) H)
D1,x = grx Z
′
˜C2 = e(g, g)αs
C2,x = gaAx·v
′
(u
t(cid:26)(x)
ρ(x) H)
′
x Z
D2,x = gr
,
2 , we have
2 and A2 = gγδ
1 = gs · gc
′
2,
−rx Z1,x · g
Axw+γxz(cid:26)(x)
2
1,x · g
−γx
′
,
′ · gc
′
′
2 = gs
, C
2 ,
′
x Z2,x · g
′
−r
Axw
2
2,x · g
−γ
′
2
′
xz(cid:26)(x)
+γ
′
x
,
2
,