# Sqlmap使用的小小总结QAQ
## 写在前面
最近在学习使用Sqlmap，看了很多文章，很多很杂，所以自己写一个小小的使用总结
如有不对请多多包涵 :P
## 先了解
SQLmap是一个自动化的SQL注入工具，其主要功能是扫描，发现并利用给定的URL的SQL注入漏洞，目前支持的数据库是MySQL，Oracle，PostgreSQL，Microsoft
SQL Server，Microsoft Acess，IBM DB2，SQLLite，Firebird，Sybase和SAP
MaxDB……SQLmap采用几种独特的SQL注入技术，分别是盲推理SQL注入，UNION查询SQL注入，对查询和盲注。其广泛的功能和选项包括数据库指纹，枚举，数据库提取，访问目标文件系统，并在获取完全操作权限时实行任意命令。
当给Sqlmap一个url跑的时候，它会：
1.判断注入时选择的参数
2.判断识别出使用的那种数据库
3.判断注入时使用何种sql注入技术来进行注入
4.根据用户的选择需要，获取相应的需要的数据
### Sqlmap支持的五种sql注入：
#### 1.基于报错的sql注入
##### 1）floor报错注入
经典floor报错注入语句：
    （1）select count(*),(concat(0x3a,database(),0x3a,floor(rand()*2))) name from information_schema.tables group by name; 
    （2）select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x
##### 2）UpdateXml报错注入
    mysql> select updatexml(0,concat(0x7e,(SELECT concat(table_name) FROM information_schema.tables WHERE table_schema=database() limit 3,1)),0);
    ERROR 1105 (HY000): XPATH syntax error: '~users'
获取字段名和内容的命令格式类似
##### 3）ExtractValue报错注入
    mysql> select extractvalue(1, concat(0x5c,(select table_name from information_schema.tables where table_schema=database() limit 3,1)));
    ERROR 1105 (HY000): XPATH syntax error: '\users'
#### 2.基于布尔的注入
通过构造sql语句，通过判断语句是否执行成功来对数据进行猜解。
查看表名：
    select table_name from information_schema.tables where table_schema=database() limit 0,1;
无论输入什么只有正确和错误的，那么就可以判断是基于布尔的注入
#### 3.基于时间的盲注
基于的原理是，当对数据库进行查询操作，如果查询的条件不存在，语句执行的时间便是0.但往往语句执行的速度非常快，线程信息一闪而过，得到的执行时间基本为0。但是如果查询语句的条件不存在，执行的时间便是0，利用该函数这样一个特殊的性质，可以利用时间延迟来判断我们查询的是否存在。这便是SQL基于时间延迟的盲注的工作原理
    mysql> select if(ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1)；
与基于布尔注入相比，基于时间的盲注使用了if语句来进行判断
#### 4.联合查询注入（union injection）
联合查询注入的前提条件是页面上有显示为位，在可以使用union的情况下进行联合查询注入
联合注入的过程：
1、判断注入点
2、判断是整型还是字符型
3、判断查询列数
4、判断显示位
5、获取所有数据库名
6、获取数据库所有表名
7、获取字段名
8、获取字段中的数据
#### 5.堆查询注入（stack injection）
堆查询注入也称为堆叠注入，通过添加一个新 的查询或者终止查询，可以达到修改数据和调用存储过程的目的，
可以同时执行多条语句的执行时的注入。
## 安装Sqlmap
    git clone https://github.com/sqlmapproject/sqlmap.git sqlmap-test
## Sqlmap选项（Options)
–version 显示程序的版本号并退出  
-h, –help 显示此帮助消息并退出  
-v VERBOSE 详细级别：0-6（默认为 1）
Target(目标)：  
以下至少需要设置其中一个选项，设置目标 URL。  
-d DIRECT 直接连接到数据库。  
-u URL, –url=URL 目标 URL。  
-l LIST 从 Burp 或 WebScarab 代理的日志中解析目标。  
-r REQUESTFILE 从一个文件中载入 HTTP 请求。  
-g GOOGLEDORK 处理 Google dork 的结果作为目标 URL。  
-c CONFIGFILE 从 INI 配置文件中加载选项。
Request（请求）：:  
这些选项可以用来指定如何连接到目标 URL。  
–data=DATA 通过 POST 发送的数据字符串  
–cookie=COOKIE HTTP Cookie 头  
–cookie-urlencode URL 编码生成的 cookie 注入  
–drop-set-cookie 忽略响应的 Set –Cookie 头信息  
–user-agent=AGENT 指定 HTTP User –Agent 头  
–random-agent 使用随机选定的 HTTP User-Agent 头  
–referer=REFERER 指定 HTTP Referer 头  
–headers=HEADERS 换行分开，加入其他的 HTTP 头  
–auth-type=ATYPE HTTP 身份验证类型（基本，摘要或 NTLM）(Basic, Digest or NTLM)  
–auth-cred=ACRED HTTP 身份验证凭据（用户名: 密码）  
–auth-cert=ACERT HTTP 认证证书（key_file，cert_file）  
–proxy=PROXY 使用 HTTP 代理连接到目标 URL  
–proxy-cred=PCRED HTTP 代理身份验证凭据（用户名：密码）  
–ignore-proxy 忽略系统默认的 HTTP 代理  
–delay=DELAY 在每个 HTTP 请求之间的延迟时间，单位为秒  
–timeout=TIMEOUT 等待连接超时的时间（默认为 30 秒）  
–retries=RETRIES 连接超时后重新连接的时间（默认 3）  
–scope=SCOPE 从所提供的代理日志中过滤器目标的正则表达式  
–safe-url=SAFURL 在测试过程中经常访问的 url 地址  
–safe-freq=SAFREQ 两次访问之间测试请求，给出安全的 URL
Optimization（优化）：  
这些选项可用于优化 sqlmap.py 的性能。  
-o 开启所有优化开关  
–predict-output 预测常见的查询输出  
–keep-alive 使用持久的 HTTP(S) 连接  
–null-connection 从没有实际的 HTTP 响应体中检索页面长度  
–threads=THREADS 最大的 HTTP(S) 请求并发量（默认为 1）
Injection（注入）：  
这些选项可以用来指定测试哪些参数，提供自定义的注入 payloads 和可选篡改脚本。  
-p TESTPARAMETER 可测试的参数  
–dbms=DBMS 强制后端的 DBMS 为此值  
–os=OS 强制后端的 DBMS 操作系统为这个值  
–prefix=PREFIX 注入 payload 字符串前缀  
–suffix=SUFFIX 注入 payload 字符串后缀  
–tamper=TAMPER 使用给定的脚本篡改注入数据  
–tamper 通过编码绕过 WEB 防火墙（WAF）sqlmap.py 默认用 char()  
–tamper 插件所在目录 \ sqlmap-dev\tamper
  1. apostrophemask.py 用 UTF-8 全角字符替换单引号字符
  2. apostrophenullencode.py 用非法双字节 unicode 字符替换单引号字符
  3. appendnullbyte.py 在 payload 末尾添加空字符编码
  4. base64encode.py 对给定的 payload 全部字符使用 Base64 编码
  5. between.py 分别用 “NOT BETWEEN 0 AND #” 替换大于号 “>”，“BETWEEN # AND #” 替换等于号“=”
  6. bluecoat.py 在 SQL 语句之后用有效的随机空白符替换空格符，随后用 “LIKE” 替换等于号“=”
  7. chardoubleencode.py 对给定的 payload 全部字符使用双重 URL 编码（不处理已经编码的字符）
  8. charencode.py 对给定的 payload 全部字符使用 URL 编码（不处理已经编码的字符）
  9. charunicodeencode.py 对给定的 payload 的非编码字符使用 Unicode URL 编码（不处理已经编码的字符）
  10. concat2concatws.py 用 “CONCAT_WS(MID(CHAR(0), 0, 0), A, B)” 替换像 “CONCAT(A, B)” 的实例
  11. equaltolike.py 用 “LIKE” 运算符替换全部等于号“=”
  12. greatest.py 用 “GREATEST” 函数替换大于号“>”
  13. halfversionedmorekeywords.py 在每个关键字之前添加 MySQL 注释
  14. ifnull2ifisnull.py 用 “IF(ISNULL(A), B, A)” 替换像 “IFNULL(A, B)” 的实例
  15. lowercase.py 用小写值替换每个关键字字符
  16. modsecurityversioned.py 用注释包围完整的查询
  17. modsecurityzeroversioned.py 用当中带有数字零的注释包围完整的查询
  18. multiplespaces.py 在 SQL 关键字周围添加多个空格
  19. nonrecursivereplacement.py 用 representations 替换预定义 SQL 关键字，适用于过滤器
  20. overlongutf8.py 转换给定的 payload 当中的所有字符
  21. percentage.py 在每个字符之前添加一个百分号
  22. randomcase.py 随机转换每个关键字字符的大小写
  23. randomcomments.py 向 SQL 关键字中插入随机注释
  24. securesphere.py 添加经过特殊构造的字符串
  25. sp_password.py 向 payload 末尾添加 “sp_password” for automatic obfuscation from DBMS logs
  26. space2comment.py 用 “/**/” 替换空格符
  27. space2dash.py 用破折号注释符 “--” 其次是一个随机字符串和一个换行符替换空格符
  28. space2hash.py 用磅注释符 “#” 其次是一个随机字符串和一个换行符替换空格符
  29. space2morehash.py 用磅注释符 “#” 其次是一个随机字符串和一个换行符替换空格符
  30. space2mssqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
  31. space2mssqlhash.py 用磅注释符 “#” 其次是一个换行符替换空格符
  32. space2mysqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
  33. space2mysqldash.py 用破折号注释符 “--” 其次是一个换行符替换空格符
  34. space2plus.py 用加号 “+” 替换空格符
  35. space2randomblank.py 用一组有效的备选字符集当中的随机空白符替换空格符
  36. unionalltounion.py 用 “UNION SELECT” 替换“UNION ALL SELECT”
  37. unmagicquotes.py 用一个多字节组合 %bf%27 和末尾通用注释一起替换空格符
  38. varnish.py 添加一个 HTTP 头 “X-originating-IP” 来绕过 WAF
  39. versionedkeywords.py 用 MySQL 注释包围每个非函数关键字
  40. versionedmorekeywords.py 用 MySQL 注释包围每个关键字
  41. xforwardedfor.py 添加一个伪造的 HTTP 头 “X-Forwarded-For” 来绕过 WAF
Detection（检测）：  
这些选项可以用来指定在 SQL 盲注时如何解析和比较 HTTP 响应页面的内容。  
–level=LEVEL 执行测试的等级（1-5，默认为 1）  
–risk=RISK 执行测试的风险（0-3，默认为 1）  
–string=STRING 查询有效时在页面匹配字符串  
–regexp=REGEXP 查询有效时在页面匹配正则表达式  
–text-only 仅基于文本内容比较网页
这些选项可用于调整具体的 SQL 注入测试。  
–technique=TECH SQL 注入技术测试（默认 BEUST）  
Techniques（技巧）：  
–technique /* 测试指定注入类型 \ 使用的技术  
不加参数默认测试所有注入技术：  
B: 基于布尔的 SQL 盲注  
E: 基于显错 sql 注入  
U: 基于 UNION 注入  
S: 叠层 sql 注入  
T: 基于时间盲注
–time-sec=TIMESEC DBMS 响应的延迟时间（默认为 5 秒）  
–union-cols=UCOLS 定列范围用于测试 UNION 查询注入  
–union-char=UCHAR 用于暴力猜解列数的字符
Fingerprint（指纹）：  
-f, –fingerprint 执行检查广泛的 DBMS 版本指纹
Enumeration（枚举）：  
这些选项可以用来列举后端数据库管理系统的信息、表中的结构和数据。此外，您还可以运行您自己的 SQL 语句。  
-b, –banner 检索数据库管理系统的标识  
–current-user 检索数据库管理系统当前用户  
–current-db 检索数据库管理系统当前数据库  
–is-dba 检测 DBMS 当前用户是否 DBA  
–users 枚举数据库管理系统用户  
–passwords 枚举数据库管理系统用户密码哈希  