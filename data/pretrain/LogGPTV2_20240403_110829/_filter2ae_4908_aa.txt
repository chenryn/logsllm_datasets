# 基于异常的猎杀行动——自保护触发自杀
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0、引言
这次分析的问题
，非常有意思，一款软件的自保护机制触发了，抛出了一次异常，在异常链的处理中做了点简单的检测，命中则再次触发一次异常，即异常中嵌套异常，然而最具有挑战意思的事情是如何找到案发第一现场，屋漏偏逢连夜雨，Windbg提供的常用命令集体罢工，增添了分析的趣味性。做一次侦探，从dmp的蛛丝马迹中找到案发第一现场，分析问题的根本原因，便是此文的来由。
涉及到以下知识点：
1、命令失效时，如何手动在dmp中找到关键调用，关键数据；
2、如何手动重构栈帧，复原调用栈；
3、用户态异常分发的优先级及路径；
4、32位下，OS从内核分发至用户态时做的关键动作，64位下又有何区别；
5、嵌套的异常如何找到案发第一现场；
## 1、背景
周末闲居在家，老友发来求助信息，说是玩游戏玩的好好的，突然崩溃了，作为软件开发的他自然想探寻下crash的原因罗，通过Everything搜索了下电脑上的*.dmp，找到了本次游戏崩溃产生的dmp文件。题外话，游戏一般都会在crash时保存下dmp，并发送至后台处理，这里能找到也就不奇怪了。然后便祭出神器——Windbg开始分析，但由于各种原因诸如MiniDump，没有PDB，栈回溯失败，Windbg的很多自动化命令失效等等原因，没有分析各所以然出来，遂抛给了我，请我助其一臂之力，看看到底是啥子原因。分析之余，觉得挺有意思，撰文以分享之。
## 2、分析过程
2.1
step1：看一下异常记录，如下，为了规避哪款游戏，这里隐藏掉与游戏相关的信息，包括游戏的各个模块名，代之以GameModule,GameExe这样的名字；
    0:023> .exr -1
    ExceptionAddress: 013e50c1 (GameExe+0x000050c1)
       ExceptionCode: c0000005 (Access violation)
      ExceptionFlags: 00000000
    NumberParameters: 2
       Parameter[0]: 00000001
       Parameter[1]: 00000000
    Attempt to write to address 00000000
常规的异常，往空指针里写数据了；
2.2 step2：再看下异常上下文，如下：
    0:023> .ecxr
    eax=000001e7 ebx=7755d418 ecx=7f1d0720 edx=00000000 esi=00000000 edi=0b369ee8
    eip=013e50c1 esp=0ea8e600 ebp=0ea8e644 iopl=0         nv up ei pl nz ac pe nc
    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010216
    GameExe+0x50c1:
    013e50c1 a300000000      mov     dword ptr ds:[00000000h],eax ds:002b:00000000=????????
与上边异常记录给的信息也是吻合的，但这条反汇编代码非常的奇怪，居然是硬编码好了的往0x00000000地址中写数据，这到底是在干嘛？看下附近的反汇编代码吧，看看在干什么，如下：
    0:023> u 013e5090  l20
    GameExe+0x5090:
    013e5090 8b442404        mov     eax,dword ptr [esp+4]
    013e5094 8b00            mov     eax,dword ptr [eax]
    013e5096 813803000080    cmp     dword ptr [eax],80000003h
    013e509c 752a            jne     GameExe+0x50c8 (013e50c8)
    013e509e 68982d4e01      push    offset GameExe+0x102d98 (014e2d98)
    013e50a3 6a00            push    0
    013e50a5 68982d4e01      push    offset GameExe+0x102d98 (014e2d98)
    013e50aa 68982d4e01      push    offset GameExe+0x102d98 (014e2d98)
    013e50af 688c2e4e01      push    offset GameExe+0x102e8c (014e2e8c)
    013e50b4 e8e7e00300      call    GameExe+0x431a0 (014231a0)
    013e50b9 83c414          add     esp,14h
    013e50bc e8cfe00300      call    GameExe+0x43190 (01423190)
    013e50c1 a300000000      mov     dword ptr ds:[00000000h],eax
    013e50c6 ebfe            jmp     GameExe+0x50c6 (013e50c6)
    013e50c8 33c0            xor     eax,eax
    013e50ca c20400          ret     4
从上边反汇编出来的代码来看，有意思的还不仅仅是这一行代码，紧接着的下一行代码也是非常奇怪，死循环，在原地打转。越来越有趣了，简单分析下这段代码的功能：
首先，这个函数没有自己独立的栈帧，[esp+4]取出的便是第一个参数，而这个函数也只有一个参数，ret
4可以说明；当然这里边没有用到ecx，edx之类的寄存器，所以就排除了寄存器传参的可能性；
接着，80000003h这个数字有着特殊的含义的，正如C0000005h代表的是
EXCEPTION_ACCESS_VIOLATION，80000003h代表的是 EXCEPTION_BREAKPOINT;
    节选自WinBase.h和WinNT.h
    #define STATUS_ACCESS_VIOLATION          ((DWORD)0xC0000005L)
    #define STATUS_BREAKPOINT                ((DWORD)0x80000003L)  
    #define EXCEPTION_ACCESS_VIOLATION       STATUS_ACCESS_VIOLATION
    #define EXCEPTION_BREAKPOINT             STATUS_BREAKPOINT
这就更增加了问题的有趣性，显然这里是在判断当前异常是不是EXCEPTION_BREAKPOINT，不是的话直接返回0，什么也不干；否则的话则调用其他函数处理，然后再次触发写0x00000000地址，再次嵌套触发异常，触发自杀；我的第一反应是：游戏在做反调试的事情吗？但立马又否定了这个想法，原因很简单——如果当前进程处于调试状态，EXCEPTION_BREAKPOINT异常压根不会派遣给进程，调试器就给处理掉了。当然，我们也可以看下，进程是否被调试，如下：
    0:023> !peb
    PEB at 00889000
        InheritedAddressSpace:    No
        ReadImageFileExecOptions: No
        BeingDebugged:            No
        ImageBaseAddress:         013e0000
        Ldr                       7755fbe0
    +0x068 NtGlobalFlag     : 0
这些证据都或多或少的证实着，当前的游戏进程没有被调试。[后边会专门写文章讲解异常是如何被CPU发现并转交给OS，OS又是如何确认是内核异常还是用户态异常，如果是用户态异常，OS又是如何分发给用户态进程的。]。先不着急回答这些问题，看下栈回溯，看看程序的执行路径；
2.3 step3：栈回溯，如下：
    0:023> k
    # ChildEBP RetAddr  
    WARNING: Stack unwind information not available. Following frames may be wrong.
    00 0ea8e644 774af15a GameExe+0x50c1
    01 0ea8e6d8 774c088f ntdll!RtlDispatchException+0x7c
    02 0ea8e6d8 0f688051 ntdll!KiUserExceptionDispatcher+0xf
    03 0ea8eb9c 0f652ee8 libcef+0x198051
    04 0ea8f0e8 116521a8 libcef+0x162ee8
    05 0ea8f264 116529ba libcef+0x21621a8
    06 0ea8f2bc 1167c36c libcef+0x21629ba
    07 0ea8f2c8 11636600 libcef+0x218c36c
    08 0ea8f4e0 11650bb1 libcef+0x2146600
    09 0ea8f524 11b4b196 libcef+0x2160bb1
    0a 0ea8f538 0f692ab5 libcef+0x265b196
    0b 0ea8f594 0f65f0ef libcef+0x1a2ab5
    0c 0ea8f6d8 0f65eae3 libcef+0x16f0ef
    0d 0ea8f758 0f6943b7 libcef+0x16eae3
    0e 0ea8f77c 0f65ee20 libcef+0x1a43b7
    0f 0ea8f7ac 0f65eddd libcef+0x16ee20
    10 0ea8f7d4 0f67a94b libcef+0x16eddd
    11 0ea8f7dc 0f67ad9a libcef+0x18a94b
    12 0ea8f814 0f65d2e2 libcef+0x18ad9a
    13 0ea8f830 76da62c4 libcef+0x16d2e2
    14 0ea8f844 774b0f79 kernel32!BaseThreadInitThunk+0x24
    15 0ea8f88c 774b0f44 ntdll!__RtlUserThreadStart+0x2f
    16 0ea8f89c 00000000 ntdll!_RtlUserThreadStart+0x1b
由于没有符号，当然也肯定不会有罗，所以回溯出来的栈可读性差，但不要紧，做逆向分析，不也这样的嘛。但这个栈不正常，这里还没有进入SEH的分发，而是在VEH就被拦截掉了；VHE的全称是Vectored
Exception
Handling，向量化异常处理，这个与SEH不太一样，且只能用在Ring3，是进程级别的，不像SEH是线程级别的，异常在分发时，先遍历VEH链，处理了则不会继续往后传递，没处理则继续后遍历，分发异常；我为什么说当前处于VEH呢？很简单，因为没有看见SEH的特征处理函数，哪怕是相关联的一点点函数调用的影子都没有，为了打消你的疑虑，我们来逆向分析下ntdll!RtlDispatchException的关键部分，这个函数很大，我们就看看774af15a返回地址附近的代码。
2.4 step4：逆向分析关键API的关键部分，如下：
    0:023> u 774af13f
    ntdll!RtlDispatchException+0x61:
    774af13f 7411            je      ntdll!RtlDispatchException+0x74 (774af152)
    774af141 e89137fcff      call    ntdll!RtlGuardIsValidStackPointer (774728d7)
    774af146 85c0            test    eax,eax
    774af148 0f8468010000    je      ntdll!RtlDispatchException+0x1d8 (774af2b6)
    774af14e 8b542410        mov     edx,dword ptr [esp+10h]
    774af152 53              push    ebx
    774af153 8bce            mov     ecx,esi
    774af155 e8f7610000      call    ntdll!RtlpCallVectoredHandlers (774b5351)
    774af15a 84c0            test    al,al
    774af15c 0f851c010000    jne     ntdll!RtlDispatchException+0x1a0 (774af27e)
    ...省略
    774af22a e8b13a0200      call    ntdll!RtlpExecuteHandlerForException (774d2ce0)
会判断RtlpCallVectoredHandlers()的返回值，如果是0的话，则调用RtlpExecuteHandlerForException()，那么0是啥意思呢？且看下边的定义，返回0意味着继续分发异常，也就是RtlpExecuteHandlerForException()中做的勒，即遍历SEH链进行异常的分发，暂且按下不表。
    节选自excpt.h
    #define EXCEPTION_EXECUTE_HANDLER       1
    #define EXCEPTION_CONTINUE_SEARCH       0
    #define EXCEPTION_CONTINUE_EXECUTION    -1
回过头来看看上边游戏做的事情，如果不是EXCEPTION_BREAKPOINT则让异常继续分发，不做任何特殊处理，如果是EXCEPTION_BREAKPOINT的话，则没有接下来的事情了。简单分析下RtlpCallVectoredHandlers()即可知道OS是如何管理VEH的了，如下：
    0:023> u ntdll!RtlpCallVectoredHandlers l30
    ntdll!RtlpCallVectoredHandlers:
    774b5351 8bff            mov     edi,edi
    774b5353 55              push    ebp
    774b5354 8bec            mov     ebp,esp
    774b5356 83ec30          sub     esp,30h
    774b5359 a1d4425677      mov     eax,dword ptr [ntdll!__security_cookie (775642d4)]
    774b535e 33c5            xor     eax,ebp
    774b5360 8945fc          mov     dword ptr [ebp-4],eax