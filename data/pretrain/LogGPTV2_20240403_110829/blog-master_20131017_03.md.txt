## SystemTap Tapset: Commonly Used Functions - 1
### Author
digoal

### Date
2013-10-17

### Tags
PostgreSQL, Linux, systemtap, stap, dtrace, probe

---

## Introduction
The SystemTap Tapset manual is comprehensive and lists a large number of functions and probe aliases. This article extracts some commonly used functions for easy reference.

### Function Descriptions

#### `function::asmlinkage`
- **Description**: Marks a function as declared with `asmlinkage`.
- **Usage**: Often used in kprobe probes to access function variables.
- **Reference**: [Blog Post](http://blog.163.com/digoal@126/blog/static/163877040201382914152385/)

#### `function::cmdline_arg` and `function::cmdline_args`
- **Description**: Fetches a command line argument or all command line arguments from the current process.
- **Usage**:
  ```systemtap
  probe syscall.read {
    if (execname() == "postgres") println(cmdline_arg(0))
  }
  ```
  Example output:
  ```
  postgres: wal writer process
  ```

#### `function::cmdline_str`
- **Description**: Fetches all command line arguments from the current process.
- **Usage**:
  ```systemtap
  probe syscall.read {
    if (execname() == "postgres") println(cmdline_str())
  }
  ```
  Example output:
  ```
  postgres: wal writer process    "" "" ""
  ```

#### `function::cpu`
- **Description**: Returns the current CPU number.
- **Usage**: Useful for distinguishing between different cores in a multi-core CPU environment.

#### `function::execname`
- **Description**: Returns the executable name of a target process or group of processes.
- **Usage**: For example, all PostgreSQL forked processes will have `execname()` equal to "postgres".

#### `function::egid` and `function::euid`
- **Description**: Returns the effective group ID and user ID of a target process.
- **Usage**:
  ```systemtap
  probe syscall.read {
    if (execname() == "postgres") printdln("**", euid(), egid())
  }
  ```
  Example output:
  ```
  500**500
  ```

#### Argument Retrieval Functions
- **Description**: Various functions to return function arguments as different data types.
- **Functions**:
  - `int_arg`, `long_arg`, `longlong_arg`, `pointer_arg`, `s32_arg`, `s64_arg`, `u32_arg`, `u64_arg`, `uint_arg`, `ulong_arg`, `ulonglong_arg`
- **Usage**: These functions are used in kprobes to fetch the values of function arguments based on their data types.

#### `function::is_return`
- **Description**: Determines whether the current probe context is a return probe.
- **Usage**:
  ```systemtap
  probe syscall.read.return {
    if (is_return()) {
      println(pn(), " is a return call.");
      exit()
    } else {
      println(pn(), " is not a return call.");
      exit()
    }
  }
  ```
  Example output:
  ```
  syscall.read.return is a return call.
  ```

#### Process Information Functions
- **Description**: Functions to retrieve various process-related information.
- **Functions**:
  - `pexecname`: Returns the execname of the parent process.
  - `pgrp`: Returns the process group ID.
  - `ppid`: Returns the process ID of the parent process.
  - `pid`: Returns the process ID.
  - `tid`: Returns the thread ID.
  - `pid2execname`: Returns the execname of the given process identifier.
  - `pid2task`: Returns the task_struct of the given process identifier.
- **Usage**: These functions help in obtaining detailed information about processes and their relationships.

#### Probe Information Functions
- **Description**: Functions to get information about the active probe.
- **Functions**:
  - `pn`: Returns the active probe name.
  - `pp`: Returns the active probe point.
  - `ppfunc`: Returns the function name parsed from the probe point.
  - `stp_pid`: Returns the process ID of the stapio process.
- **Usage**: These functions provide details about the currently active probe and the SystemTap process.

#### Time Functions
- **Description**: Functions to get time-related information.
- **Functions**:
  - `cpu_clock_ms`, `cpu_clock_ns`, `cpu_clock_s`, `cpu_clock_us`: Returns the time in milliseconds, nanoseconds, seconds, and microseconds on the given CPU's clock.
  - `gettimeofday_ms`, `gettimeofday_ns`, `gettimeofday_s`, `gettimeofday_us`: Returns the time in milliseconds, nanoseconds, seconds, and microseconds since the UNIX epoch.
  - `local_clock_ms`, `local_clock_ns`, `local_clock_s`, `local_clock_us`: Returns the time in milliseconds, nanoseconds, seconds, and microseconds on the local CPU's clock.
- **Usage**:
  ```systemtap
  probe begin {
    printdln("*", gettimeofday_ns(), local_clock_ns());
    exit()
  }
  ```
  Example output:
  ```
  1381991942316960497*370059058163884
  ```

#### Date and Time Conversion Functions
- **Description**: Functions to convert time into human-readable date and time strings.
- **Functions**:
  - `ctime`: Converts seconds since the epoch into a human-readable date/time string.
  - `tz_ctime`: Converts seconds since the epoch into a human-readable date/time string with the local time zone.
  - `tz_gmtoff`: Returns the local time zone offset.
  - `tz_name`: Returns the local time zone name.
- **Usage**:
  ```systemtap
  probe begin {
    println(tz_ctime(gettimeofday_s()));
    exit()
  }
  ```
  Example output:
  ```
  Thu Oct 17 14:49:35 2013 CST
  ```

#### `function::system`
- **Description**: Issues a command to the system.
- **Usage**:
  ```systemtap
  probe begin {
    system("echo -e \"hello\" > ./t");
    exit()
  }
  ```
  Example output:
  ```
  hello
  ```

#### `function::bytes_to_string`
- **Description**: Converts bytes into a human-readable string.
- **Usage**:
  ```systemtap
  probe begin {
    println(bytes_to_string(120000000));
    exit()
  }
  ```
  Example output:
  ```
  114M
  ```

#### Memory and Page Size Functions
- **Description**: Functions to get memory and page size information.
- **Functions**:
  - `mem_page_size`: Returns the number of bytes in a page for the current architecture.
  - `pages_to_string`: Converts pages into a human-readable string.
- **Usage**:
  ```systemtap
  probe begin {
    println(mem_page_size());
    exit()
  }
  ```
  Example output:
  ```
  4096
  ```

#### Process Memory Usage Functions
- **Description**: Functions to get various memory usage statistics for a process.
- **Functions**:
  - `proc_mem_data`, `proc_mem_data_pid`, `proc_mem_rss`, `proc_mem_rss_pid`, `proc_mem_shr`, `proc_mem_shr_pid`, `proc_mem_size`, `proc_mem_size_pid`, `proc_mem_string`, `proc_mem_string_pid`, `proc_mem_txt`, `proc_mem_txt_pid`
- **Usage**:
  ```systemtap
  probe begin {
    println(proc_mem_shr_pid(5345));
    exit()
  }
  ```
  Example output:
  ```
  17785
  ```

#### CPU Time Functions
- **Description**: Functions to get CPU time usage in a human-readable format.
- **Functions**:
  - `cputime_to_msecs`, `cputime_to_string`, `msecs_to_string`, `task_stime`, `task_stime_tid`, `task_time_string`, `task_time_string_tid`, `task_utime`, `task_utime_tid`
- **Usage**:
  ```systemtap
  probe begin {
    println(task_time_string_tid(5345));
    exit()
  }
  ```
  Example output:
  ```
  usr: 0m0.028s, sys: 0m0.059s
  ```

## References
1. [SystemTap Tapsets Manual](https://sourceware.org/systemtap/tapsets/)

### Additional Resources
- **[PostgreSQL Wish List](https://github.com/digoal/blog/issues/76)**: Your wishes will be conveyed to PG kernel hackers and database vendors to improve product quality and features. Great suggestions may be included in the next PG version, and you could win limited-edition PG t-shirts, souvenirs, stickers, and popular books.
- **[Buy 3 Months of Aliyun RDS PostgreSQL for 9.9 CNY](https://www.aliyun.com/database/postgresqlactivity)**
- **[PostgreSQL Solution Collection](https://yq.aliyun.com/topic/118)**
- **[Digoal's GitHub - Public Welfare is a Lifetime Commitment](https://github.com/digoal/blog/blob/master/README.md)**
- **[PolarDB Learning Map: Training Camps, Certifications, Interactive Labs, Solutions, Ecosystem Partnerships, Write Reviews to Win Prizes](https://www.aliyun.com/database/openpolardb/activity)**
- **[Discounts on PolarDB Cloud Services Starting at 55 CNY](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al)**
- **[About Digoal](https://github.com/digoal/blog/blob/master/me/readme.md)**