1G
10G
40G
100G
8b/10b
64b/66b
64b/66b
64b/66b
8 bit
32 bit
64 bit
64 bit
Table 2: Speciﬁcations of the PHY at different speeds
one microsecond. This was likely because PTP needs
history to apply ﬁltering and smoothing effectively. We
omitted these results due to limited space.
6. PTP’s performance was dependent upon network con-
ditions, conﬁguration such as transparent clocks, and
implementation.
7. DISCUSSION
What about 1G, 40G or 100G? In this paper we discussed
and demonstrated how we can implement and deploy DTP
over a datacenter focusing on 10 GbE links. However, the
capacity of links in a datacenter is not homogeneous. Servers
can be connected to Top-of-Rack switches via 1 Gbps links,
and uplinks between switches and routers can be 40 or 100
Gbps. Nonetheless, DTP is still applicable to these cases be-
cause the fundamental fact still holds: Two physically con-
nected devices in high-speed Ethernet (1G and beyond) are
already synchronized to transmit and receive bitstreams. The
question is how to modify DTP to support thousands of thou-
sands of devices with different link capacities.
DTP can be extended to support 40 GbE and 100 GbE
in a straight forward manner. The clock frequency required
to operate 40 or 100 Gbps is multiple of that of 10 Gbps
(Table 2). In fact, switches that support 10 Gbps and be-
yond normally use a clock oscillator running at 156.25 MHz
to support all ports [14]. As a result, incrementing clock
counters by different values depending on the link speed is
sufﬁcient. In particular, see the last column of Table 2, if
a counter tick represents 0.32 nanoseconds, then DTP will
work at 10, 40, and 10GbE by adjusting a counter value to
match the corresponding clock period (i.e. 20 × 0.32 = 6.4
ns, 5 × 0.32 = 1.6 ns, and 2 × 0.32 = 0.64 ns, respectively).
Similarly, DTP can be made to work with 1 GbE by incre-
menting the counter of a 1 GbE port by 25 at every tick (see
the last column of Table 2). However, the PHY of 1 Gbps
is different, it uses a 8b/10b encoding instead of a 64b/66b
encoding, and we need to adapt DTP to send clock counter
values with the different encoding.
8. RELATED WORK
Clock synchronization is critical to systems and has been
extensively studied from different areas. As we discussed
NTP [41], PTP [8], and GPS [37] in Section 2, we brieﬂy
discuss other clock synchronization protocols.
Because NTP normally does not provide precise clock
synchronization in a local area network (LAN), much of the
literature has focused improving NTP without extra hard-
ware. One line of work was to use TSC instructions to im-
plement precise software clocks called TSCclock, and later
called RADclock [25, 46, 50]. It was designed to replace
ntpd and ptpd (daemons that run NTP or PTP) and pro-
vide sub-microsecond precision without any extra hardware
support. Other software clocks include Server Time Pro-
tocol (STP) [44], Coordinated Cluster Time (CCT) [28],
AP2P [49], and skewless clock synchronization [40], which
provide microsecond precision.
Implementing clock synchronization in hardware has
been demonstrated by Fiber Channel (FC) [6] and discussed
by Kopetz and Ochsenreiter [33]. FC embeds protocol mes-
sages into interpacket gaps similar to DTP. However, it is not
a decentralized protocol and the network fabric simply for-
wards protocol messages between a server and a client using
physical layer encodings. As a result, it does not eliminate
non-deterministic delays in delivering protocol messages.
Synchronous optical networks (SONET/SDH) is a stan-
dard that transmits multiple bitstreams (such as Voice, Ether-
net, TCP/IP) over an optical ﬁber. In order to reduce buffer-
ing of data between network elements, SONET requires
precise frequency synchronization (i.e., syntonization). An
atomic clock is commonly deployed as a Primary Reference
Clock (PRC), and other network elements are synchronized
to it either by external timing signals or by recovering clock
signals from incoming data. DTP does not synchronize fre-
quency of clocks, but values of clock counters.
Synchronous Ethernet (SyncE) [12] was introduced for
reliable data transfer between synchronous networks (e.g.
SONET/SDH) and asynchronous networks (e.g. Ethernet).
Like SONET, it synchronizes the frequency of nodes in a
network, not clocks (i.e. syntonization). It aims to provide a
synchronization signal to all Ethernet network devices. The
idea is to use the recovered clock from the receive (RX)
path to drive the transmit (TX) path such that both the RX
and TX paths run at the same clock frequency. As a result,
each Ethernet device uses a phase locked loop to regenerate
the synchronous signal. As SyncE itself does not synchro-
nize clocks in a network, PTP is often employed along with
SyncE to provide tight clock synchronization. One such ex-
ample is White Rabbit which we discuss below.
White Rabbit [43, 35, 39] has by far the best preci-
sion in packet-based networks. The goal of White Rab-
bit (WR)
[43] was to synchronize up to 1000 nodes with
sub-nanosecond precision. It uses SyncE to syntonize the
frequency of clocks of network devices, and WR-enabled
PTP [35] to embed the phase difference between a master
and a slave into PTP packets. WR demonstrated that the pre-
cision of a non-disturbed system was 0.517ns [39]. WR also
requires WR-enabled switches, and synchronizes slaves that
are up to four-hops apart from the timeserver. WR works on
a network with a tree topology and with a limited number of
levels and servers. Furthermore, it currently supports 1 Gi-
gabit Ethernet only, and it is not clear how WR behaves un-
der heavy network loads as it uses PTP packets. DTP does
not rely on any speciﬁc network topology, and can be ex-
tended to protocols with higher speeds.
Similarly, BroadSync [19] and ChinaMobile [38] also
combine SyncE and PTP to provide hundreds of nanosecond
precision. The Data Over Cable Service Interface Speciﬁ-
cation (DOCSIS) is a frequency synchronized network de-
signed to time divide data transfers between multiple ca-
ble modems (CM) and a cable modem termination system
(CMTS). The DOCSIS time protocol [20] extends DOC-
SIS to synchronize time by approximating the internal delay
from the PHY and asymmetrical path delays between a ref-
erence CM and the CMTS. We expect that combining DTP
with frequency synchronization, SyncE, will also improve
the precision of DTP to sub-nanosecond precision as it be-
comes possible to minimize or remove the variance of the
synchronization FIFO between the DTP TX and RX paths.
9. CONCLUSION
Synchronizing clocks with bounded and high precision is
not trivial, but can improve measurements (e.g. one-way de-
lay) and performance (e.g. Spanner TrueTime). In this pa-
per, we presented DTP that tightly synchronizes clocks with
zero network overhead (no Ethernet packets). It exploits the
fundamental fact that two physically connected devices are
already synchronized to transmit and receive bitstreams. We
demonstrated that DTP can synchronize clocks of network
components at tens of nanoseconds of precision, can scale
up to synchronize an entire datacenter network, and can be
accessed from software with usually better than twenty ﬁve
nanosecond precision. As a result, the end-to-end precision
is the precision from DTP in the network (i.e. 25.6 nanosec-
onds for directly connected nodes and 153.6 nanoseconds for
a datacenter with six hops) plus ﬁfty nanosecond precision
from software.
10. ACKNOWLEDGMENTS
This work was partially funded and supported by a
SLOAN Research Fellowship received by Hakim Weather-
spoon, DARPA MRC, DARPA CSSG (D11AP00266), NSF
CAREER (1053757), NSF TRUST (0424422), Cisco, and
Intel. We would like to thank our shepherd, Alex Snoeren,
and the anonymous reviewers for their comments.
11. REFERENCES
[1] Bluespec. www.bluespec.com.
[2] Broadcom.
http://http://www.broadcom.com/products/Switching/Data-Center.
[3] DE5-Net FPGA development kit. http://de5-net.terasic.com.tw.
[4] Endace DAG network cards. http://www.endace.com/
endace-dag-high-speed-packet-capture-cards.html.
[5] Exablaze. https://exablaze.com/.
[6] Fibre channel. http://ﬁbrechannel.org.
[7] Highly accurate time synchronization with ConnectX-3 and
Timekeeper. http://www.mellanox.com/pdf/whitepapers/WP_
Highly_Accurate_Time_Synchronization.pdf.
[8] IEEE Standard 1588-2008. http:
//ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=4579757.
[9] IEEE Standard 802.3-2008.
http://standards.ieee.org/about/get/802/802.3.html.
[10] Intel 64 and IA-32 architectures software developer manuals.
http://www.intel.com/content/www/us/en/processors/
architectures-software-developer-manuals.html.
[11] iperf. https://iperf.fr.
[12] ITU-T Rec. G.8262. http://www.itu.int/rec/T-REC-G.8262.
[13] Mellanox. www.mellanox.com.
[14] Open compute project. http://www.opencompute.org.
[15] Stratix V FPGA. http:
//www.altera.com/devices/fpga/stratix-fpgas/stratix-v/stxv-index.jsp.
[16] Timekeeper. http://www.fsmlabs.com/timekeeper.
[17] IEEE 1588 PTP and Analytics on the Cisco Nexus 3548 Switch.
http://www.cisco.com/c/en/us/products/collateral/switches/
nexus-3000-series-switches/white-paper-c11-731501.html, 2014.
[18] AL-FARES, M., LOUKISSAS, A., AND VAHDAT, A. A scalable,
commodity data center network architecture. In Proceedings of the
ACM SIGCOMM Conference on Data Communication (2008).
[19] BROADCOM. Ethernet time synchronization. http:
//www.broadcom.com/collateral/wp/StrataXGSIV-WP100-R.pdf.
[20] CHAPMAN, J. T., CHOPRA, R., AND MONTINI, L. The DOCSIS
timing protocol (DTP) generating precision timing services from a
DOCSIS system. In Proceedings of the Spring Technical Forum
(2011).
[21] COCHRAN, R., MARINESCU, C., AND RIESCH, C. Synchronizing
the Linux System Time to a PTP Hardware Clock. In Proceedings of
the International IEEE Symposium on Precision Clock
Synchronization for Measurement Control and Communication
(2011).
[22] CORBETT, J. C., DEAN, J., EPSTEIN, M., FIKES, A., FROST, C.,
FURMAN, J. J., GHEMAWAT, S., GUBAREV, A., HEISER, C.,
HOCHSCHILD, P., HSIEH, W., KANTHAK, S., KOGAN, E., LI, H.,
LLOYD, A., MELNIK, S., MWAURA, D., NAGLE, D., QUINLAN,
S., RAO, R., ROLIG, L., SAITO, Y., SZYMANIAK, M., TAYLOR,
C., WANG, R., AND WOODFORD, D. Spanner: Google’s
globally-distributed database. In Proceedings of the 10th USENIX
conference on Operating Systems Design and Implementation (2012).
[23] COSTA, P., BALLANI, H., RAZAVI, K., AND KASH, I. R2C2: A
network stack for rack-scale computers. In Proceedings of the ACM
Conference on SIGCOMM (2015).
[24] CRISTIAN, F. Probabilistic clock synchronization. Distributed
Computing 3 (September 1989), 146–158.
[25] DAVIS, M., VILLAIN, B., RIDOUX, J., ORGERIE, A.-C., AND
VEITCH, D. An IEEE-1588 Compatible RADclock. In Proceedings
of International IEEE Symposium on Precision Clock
Synchronization for Measurement, Control and Communication
(2012).
[26] EDWARDS, T. G., AND BELKIN, W. Using SDN to Facilitate
Precisely Timed Actions on Real-time Data Streams. In Proceedings
of the Third Workshop on Hot Topics in Software Deﬁned Networking
(2014).
[27] FREEDMAN, D. A., MARIAN, T., LEE, J. H., BIRMAN, K.,
WEATHERSPOON, H., AND XU, C. Exact temporal characterization
of 10 Gbps optical wide-area network. In Proceedings of the 10th
ACM SIGCOMM Conference on Internet measurement (2010).
[28] FROEHLICH, S., HACK, M., MENG, X., AND ZHANG, L.
Achieving precise coordinated cluster time in a cluster environment.
In Proceedings of International IEEE Symposium on Precision Clock
Synchronization for Measurement, Control and Communication
(2008).
[29] GUSELLA, R., AND ZATTI, S. The Accuracy of the Clock
Synchronization Achieved by TEMPO in Berkeley UNIX 4.3BSD.
IEEE Transactions on Software Engineering 15, 7 (July 1989),
847–853.
[30] JASPERNEITE, J., SHEHAB, K., AND WEBER, K. Enhancements to
the time synchronization standard IEEE-1588 for a system of
cascaded bridges. In Proceedings of the IEEE International
Workshop in Factory Communication Systems (2004).
[31] KACHRIS, C., BERGMAN, K., AND TOMKOS, I. Optical
Interconnects for Future Data Center Networks. Springer, 2013.
[32] KING, M., HICKS, J., AND ANKCORN, J. Software-driven hardware
development. In Proceedings of the 2015 ACM/SIGDA International
Symposium on Field-Programmable Gate Arrays (2015).
[33] KOPETZ, H., AND OCHSENREITER, W. Clock synchronization in
distributed real-time systems. IEEE Transactions on Computers C-36
(Aug 1987), 933–940.
Symposium on Precision Clock Synchronization for Measurement
Control and Communication (2011).
[36] LEE, K. S., WANG, H., AND WEATHERSPOON, H. SoNIC: Precise
Realtime Software Access and Control of Wired Networks. In
Proceedings of the 10th USENIX Symposium on Networked Systems
Design and Implementation (2013).
[37] LEWANDOWSKI, W., AZOUBIB, J., AND KLEPCZYNSKI, W. J.
GPS: primary tool for time transfer. Proceedings of the IEEE 87
(January 1999), 163–172.
[38] LI, H. IEEE 1588 time synchronization deployment for mobile
backhaul in China Mobile, 2014. Keynote speech in the International
IEEE Symposium on Precision Clock Synchronization for
Measurement Control and Communication.
[39] LIPINSKI, M., WLOSTOWSKI, T., SERRANO, J., ALVAREZ, P.,
COBAS, J. D. G., RUBINI, A., AND MOREIRA, P. Performance
results of the ﬁrst White Rabbit installation for CNGS time transfer.
In Proceedings of the International IEEE Symposium on Precision
Clock Synchronization for Measurement Control and Communication
(2012).
[40] MALLADA, E., MENG, X., HACK, M., ZHANG, L., AND TANG, A.
Skewless Network Clock Synchronization. In Proceedings of the 21st
IEEE International Conference on Network Protocols (2013).
[41] MILLS, D. L. Internet time synchronization: the network time
protocol. IEEE transactions on Communications 39 (October 1991),
1482–1493.
[42] MIZRAHI, T., AND MOSES, Y. Software Deﬁned Networks: It’s
about time. In Proceedings of the IEEE International Conference on
Computer Communications (2016).
[43] MOREIRA, P., SERRANO, J., WLOSTOWSKI, T., LOSCHMIDT, P.,
AND GADERER, G. White Rabbit: Sub-Nanosecond Timing
Distribution over Ethernet. In Proceedings of the International IEEE
Symposium on Precision Clock Synchronization for Measurement
Control and Communication (2009).
[44] OGDEN, B., FADEL, J., AND WHITE, B. IBM system z9 109
technical introduction.
[45] OHLY, P., LOMBARD, D. N., AND STANTON, K. B. Hardware
assisted precision time protocol. design and case study. In
Proceedings of the 9th LCI International Conference on
High-Performance Clustered Computing (2008).
[46] PÁSZTOR, A., AND VEITCH, D. PC Based Precision Timing
Without GPS. In Proceedings of the ACM SIGMETRICS
International Conference on Measurement and Modeling of
Computer Systems (2002).
[47] PERRY, J., OUSTERHOUT, A., BALAKRISHNAN, H., SHAH, D.,
AND FUGAL, H. Fastpass: A centralized "zero-queue" datacenter
network. In Proceedings of the ACM Conference on SIGCOMM
(2014).
[48] SCHNEIDER, F. B. Understanding Protocols for Byzantine Clock
Synchronization. Tech. Rep. TR87-859, Cornell University, August
1987.
[49] SOBEIH, A., HACK, M., LIU, Z., AND ZHANG, L. Almost
Peer-to-Peer Clock Synchronization. In Proceedings of IEEE
International Parallel and Distributed Processing Symposium (2007).
[50] VEITCH, D., BABU, S., AND PÀSZTOR, A. Robust Synchronization
of Software Clocks Across the Internet. In Proceedings of the 4th
ACM SIGCOMM Conference on Internet Measurement (2004).
[51] ZARICK, R., HAGEN, M., AND BARTOS, R. The impact of network
latency on the synchronization of real-world IEEE 1588-2008
devices. In Proceedings of the International IEEE Symposium on
Precision Clock Synchronization for Measurement Control and
Communication (2010).
[52] ZARICK, R., HAGEN, M., AND BARTOS, R. Transparent clocks vs.
enterprise ethernet switches. In Proceedings of the International
IEEE Symposium on Precision Clock Synchronization for
Measurement, Control and Communication (2011).
[34] LAMPORT, L., AND MELLIAR-SMITH, P. M. Byzantine Clock
[53] ZENG, H., ZHANG, S., YE, F., JEYAKUMAR, V., JU, M., LIU, J.,
Synchronization. In Proceedings of the Third Annual ACM
Symposium on Principles of Distributed Computing (1984).
[35] LAPINSKI, M., WLOSTOWKI, T., SERRANO, J., AND ALVAREZ, P.
White Rabbit: a PTP Application for Robust Sub-nanosecond
Synchronization. In Proceedings of the International IEEE
MCKEOWN, N., AND VAHDAT, A. Libra: Divide and conquer to
verify forwarding tables in huge networks. In Proceedings of the 11th
USENIX Symposium on Networked Systems Design and
Implementation (2014).