# Worry-Free Encryption: Functional Encryption with Public Keys

## Authors
- **Amit Sahai**
  - Department of Computer Science, University of California, Los Angeles
  - Email: [EMAIL]
- **Hakan A. Seyalioglu**
  - Department of Mathematics, University of California, Los Angeles
  - Email: [EMAIL]

## Abstract
In this work, we introduce the concept of Worry-Free Encryption. This allows Alice to encrypt confidential information using Bob's public key and send it to him without concern about whether Bob has the authority to access the information. The encryption is performed under a hidden access policy that only permits Bob to decrypt the message if his credentials satisfy the policy. Our approach can be seen as a functional encryption scheme in a public-key setting, ensuring that even if the credential authority is compromised, it cannot compromise the security of any honest user.

We present the notion of Worry-Free Encryption and demonstrate how to achieve it for any polynomial-time computable policy, assuming only the existence of IND-CPA (Indistinguishability under Chosen Plaintext Attack) public-key encryption schemes. Furthermore, we construct CCA (Chosen Ciphertext Attack)-secure Worry-Free Encryption efficiently in the random oracle model and generally (but inefficiently) using simulation-sound non-interactive zero-knowledge proofs.

## Categories and Subject Descriptors
E.3 [Data Encryption]: Public Key Cryptosystems

## General Terms
Security, Algorithms

## Keywords
Functional Encryption, Public Key Cryptography

*Research supported in part by NSF grants 0830803, 0627781, 0716389, 0456717, and 0205594, an equipment grant from Intel, and an Okawa Foundation Research Grant.
†Research supported in part by a NSF Graduate Research Fellowship.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

CCS'10, October 4–8, 2010, Chicago, Illinois, USA.
Copyright 2010 ACM 978-1-4503-0244-9/10/10 ...$10.00.

## 1. Introduction
Consider a scenario where you, as an employee with access to privileged information, receive a request for sensitive data from a co-worker. While he claims to have sufficient clearance, you do not want to risk unauthorized access. One solution would be to check the requester's credentials in a database or with an authority. However, this raises concerns, such as the sensitivity of the co-worker's clearance level.

An ideal solution would be an encryption scheme that ensures your co-worker can only recover the data if he has the proper credentials. You could then encrypt the data with respect to an appropriate access policy, confident that unauthorized access is prevented.

### Security Guarantees
We require the following security guarantees:
- **Eavesdropper Security**: The scheme should be secure against eavesdroppers, satisfying usual notions of indistinguishability.
- **Policy Privacy**: The policy of a ciphertext should remain hidden, even to a user who can decrypt the ciphertext, except for the information that the user’s credentials satisfy the policy.
- **Public Key Privacy**: A user’s public key should leak no information about his credentials.
- **Credential Authority Security**: Even if the certification authority (that validates credentials) is corrupted, it should not be able to compromise the security of any encryptions prepared for honest users.

We call a scheme that provides these guarantees a Worry-Free Encryption Scheme, as the sender does not need to worry about whether the recipient is authorized to obtain the message before sending it.

### 1.1 Related Work
Worry-Free Encryption is closely related to two previously studied concepts: functional encryption and conditional disclosure of secrets.

- **Functional Encryption**: Deals with a similar setting but requires more trust in a central authority. If the Key Generation Authority is corrupted, it can decrypt messages sent to all users. Worry-Free Encryption avoids this by ensuring that even if the Certification Authority is corrupted, it cannot compromise messages encrypted to any honest user.
- **Conditional Disclosure of Secrets**: Typically considered for specific (usually algebraic) conditions, whereas in our setting, the condition is chosen by the sender and must remain secret from the receiver.

### 1.2 Results
Our main contributions are:
- **Introduction of Worry-Free Encryption**.
- **Constructions**:
  - A basic construction for arbitrary polynomial-time functions, secure under chosen-plaintext attacks, requiring only the existence of IND-CPA public-key encryption. The main ingredient is Yao's garbled circuits.
  - A Worry-Free Encryption scheme secure against adaptive chosen-ciphertext attacks in the random oracle model, requiring only one additional public-key operation over the basic scheme.
  - IND-CCA2 secure Worry-Free Encryption without random oracles, assuming non-interactive zero-knowledge proofs for NP exist.

Additionally, we address the problem of a dishonest certification authority colluding with a dishonest user. We define a strengthening of our notion that guarantees that even when they collude, nothing beyond the intended function output will be learned.

## 2. Preliminaries
Throughout the paper, we use arrowed variables to denote vectors, \( x[i] \) to denote the \( i \)-th bit of a string \( x \), \( b \) to denote \( b \oplus 1 \) for a bit \( b \), and \([1, k]\) to denote all integers between 1 and \( k \) inclusive. We use \( x \circ y \) to denote the concatenation of strings \( x \) and \( y \), and \( |g| \) to denote the size of a circuit \( g \). A function is called negligible if it grows slower than any inverse polynomial in the security parameter \( \lambda \), and non-negligible if it is not negligible. A probability is said to be overwhelming if it is within a negligible additive factor of 1. We use \( x \xleftarrow{\$} E \) to denote that \( x \) is chosen uniformly from the set \( E \). \( M_{m \times n} \) is the set of \( m \) by \( n \) matrices with possibly null entries.

We also use an existentially unforgeable signature scheme \( S = (\text{KeyGen}, \text{Sign}, \text{Verify}) \) to ensure users only encrypt using public keys published by the certification authority.

### 2.1 Randomized Encodings
Our main construction uses decomposable randomized encodings. A decomposable randomized encoding of a function \( g : \{0, 1\}^n \to \{0, 1\}^k \) splits \( g \) into \( 2n \) components such that for a given \( x \), the components \([g]_{i, x[i]} \) suffice to reconstruct \( g(x) \) but leak no other information about \( g \) except its size. These encodings can be constructed using garbled circuits.

**Definition 2.1.** [2] A decomposable randomized encoding consists of a pair of algorithms \( E \) (encoder) and \( D \) (decoder) such that for security parameter \( \lambda \):
- **Decomposability**: For a circuit \( f : \{0, 1\}^n \to \{0, 1\}^k \), \( E(f, 1^\lambda) \) outputs \([f]_{i, b} \in \{0, 1\}^m \) for \( i \in [1, n] \) and \( b \in \{0, 1\} \), where \( m \) is a function of \( n, |f|, k, \lambda \) and \( m = \text{poly}(\lambda) \) if \( |f| = \text{poly}(\lambda) \).

This definition ensures that the encoding is both efficient and secure.