title:DEMO: Action Recommendation for Cyber Resilience
author:Luke Rodriguez and
Darren S. Curtis and
Sutanay Choudhury and
Kiri Oler and
Peter Nordquist and
Pin-Yu Chen and
Indrajit Ray
DEMO: Action Recommendation for Cyber Resilience
Luke Rodriguez, Darren Curtis
Sutanay Choudhury, Kiri Oler,
Peter Nordquist
Paciﬁc Northwest National Laboratory
ﬁPI:EMAIL
Pin-Yu Chen
University of Michigan Ann
Arbor
PI:EMAIL
Indrajit Ray
Colorado State University
PI:EMAIL
ABSTRACT
We demonstrate an unifying graph-based model for representing
the infrastructure, behavior and missions of an enterprise. We in-
troduce an algorithm for recommending resilience establishing ac-
tions based on dynamic updates to the models and show its effec-
tiveness both through software simulation as well as live demon-
stration inside a cloud testbed. Our demonstrate will illustrate the
effectiveness of the algorithm for preserving latency based quality
of service (QoS).
Categories and Subject Descriptors
H.1.m [Information Systems]: Models and Principles
Keywords
cyber security, cyber resilience, recommendation engine
1.
INTRODUCTION
Resilience is deﬁned as the ability of an organization to continue
to function, even though it is in a degraded manner, in the face of
impediments that affect the proper operation of some of its com-
ponents. Impediments can be randomly occurring failures of soft-
ware services or hardware systems in an enterprise, or it may be
unavailability of services or systems as the consequence of a cyber
attack. A cyber enterprise is an elaborate web of applications, soft-
ware, storage and networking hardware with complex dependen-
cies among them. Although their building blocks may have been
designed to be robust against failures, it is not easy to answer if
the enterprise-web as a whole is resilient. Therefore, developing a
unifying framework for performing what-if analysis is a necessary
ﬁrst step towards quantiﬁcation of organizational resilience.
1.1 Motivation
We use a ﬁctional small e-commerce company named VISR as
our running example (Figure 1). VISR has a CEO, an intern, and
a team of developers and HR professionals. Its physical network
is divided into two subnets. R1-R3 are routers connecting these
subnets. All the users are mapped to the subnet on right, while
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for third-party components of this work must be
honored. For all other uses, contact the Owner/Author(s). Copyright is held by the
owner/author(s).
CCS’15, October 12–16, 2015, Denver, Colorado, USA.
ACM 978-1-4503-3832-5/15/10.
DOI: http://dx.doi.org/10.1145/2810103.2810104 .
Figure 1: Illustration of the small e-commerce company used
as the motivating use case.
its in-house services are hosted on the left subnet. VISR has three
missions:
1. A sales mission, as online sales is its primary source of rev-
enue. This necessitates guaranteeing the availability of DB2
and the integrity of information inside it.
2. CEO’s strategic mission. CEO’s workstation has intellec-
tual property information whose conﬁdentiality and integrity
needs to be guaranteed.
3. Product development mission which requires availability of
DB1 and DB3 to the Dev group, HR group and the intern.
With the missions being deﬁned, we raise the big question: What
does mean for VISR to be resilient? In a longer version of this
paper [1] we outline a number of common scenarios that compa-
nies such as VISR needs to address on a day to day basis. In our
demonstration, we use our uniﬁed model to address these scenarios
and determine what real-life actions such as turning off systems,
disabling users, or selectively blocking communication across ma-
chines might be effective.
1.2 Approach
In order to fully explore the problem, we present a demonstra-
tion on two different environments. First, we present a software
simulator that represents exactly the structure in Figure 1 and in
which all machines and trafﬁc are generated deterministically from
a random seed. This framework allows us to test our scenarios and
methods with a great degree of freedom in order to explore how
our model reacts to various inputs. Doing so provides a great the-
oretical foundation, but more is required to prove that this truly
R2HR 2HR 1HR 4R3R1CEOHR 5InternDev 1Dev 2Dev 3HR 3DB 2DB1DB 3External1620kinds of graphs available to be randomly generated can be repre-
sentative of many kinds of complex systems, we found that they did
not accurately reﬂect the structure of our cyber networks. There-
fore, we chose to use a pre-determined network conﬁguration to
build the model and execute our testing. We developed a modeling
language that allows us to describe the behavior of our test com-
pany in a conﬁguration ﬁle. Next, our code processes the conﬁgu-
ration ﬁle and generates a series of snapshots of data conforming to
the model. The data output is similar to network trafﬁc ﬂow (also
referred as netﬂow) datasets captured in real environment.
Figure 3: Latency-request function shown in Eqn. 1
We make a few assumptions about the nature of netﬂow data.
First, we assume that all requests are roughly the same size, and
thus assign them byte-sizes from a normal distribution with a mean
of 50 and standard deviation of 5. More complicated, however, is
the question of how to model ﬂow duration or latency. Here we use
the latency-request function shown in (1) for simulation.
fj(xj|x
∗
j ) =
(cid:26) ajxj + dj,
if xj  Rk(E(t + δt)), where Rk are metrics derived from
latency or authentication statistics, then a resilient system will need
to act. An action A is a resiliency preserving action if it transforms
the system state such that Rk(E(t + 1)) > Rk(E(t + δt)), where
E(t + 1) = A(E(t + δt)). We apply this engine to recommend
actions on both the simulated framwork of VISR and the AWS im-
plementation.
2. SOFTWARE SIMULATOR
Experimental evaluation of resilience demands the ability to do
the following: A) simulate steady state behavior, B) simulate im-
pediments, and C) observe the system responding to the impedi-
ments. We did not ﬁnd any existing data source that contains all
three phases of resilient behavior. Using Denial of Service attacks
(DoS) an example, there are many publicly available network trafﬁc
data sources capturing a DoS attack. However, we could not ﬁnd
any open dataset that captures the period of attack and the target
system’s subsequent recovery. Observing this dynamism is critical
to quantitative studies of resilience and provides the motivation to
develop and demonstrate a new simulator.
Our simulator supports a host of random graph generation tools,
such as those available in NetworkX in Python. These graphs could
be generated to represent the different components of our system,
and then stitched together to create our model. However, while the
1621Figure 4: A screenshot of the demonstration setup. The left window shows the impact of attacks launched on the “CEO” machine
as well as the recommendations produced for a set of VMs. Red indicates that a particular VM should be turned off. Currently we
execute the actions manually fromAWS dashboard (right window).
which have an associated conﬁguration ﬁle that describes its be-
havior (Figure 5). Trafﬁc is simulated via simple trafﬁc generators
that mimic HTTP trafﬁc and database server requests, which in turn
allows us to simulate various impediments including denial of ser-
vice, service degradation with overloading, and data deletion on a
network random walk. The system state is then captured via net-
ﬂow, audit logs and sys logs, which are sent to a machine outside
of the target setup for processing and for action recommendation.
Figure 5: A dynamically conﬁgured set of VMs inside Amazon
Web Services. Each VM spawns a set of randomized HTTP
and database trafﬁc generators whose behavior is speciﬁed in
the testbed conﬁguration.
The attacks used are composed of two varieties: those directed at
disrupting availability and those aimed at impacting data integrity.
The attacks on availability use a combination of simple Unix com-
mands and scripted operations to power off or reboot a selected
node, overload processor resources, and kill a selected process. The
attacks on data integrity work in a similar fashion (i.e. via com-
mand line tools and functionalities) to delete all accessible ﬁles,
delete a speciﬁed ﬁle, delete a speciﬁed directory, change a speci-
ﬁed number of characters in a given ﬁle, or change a speciﬁed num-
ber of characters in all accessible ﬁles. The attacks all presume that
the login information for at least one account has been compro-
mised. Using that information ssh connections are attempted for
all known existing nodes and when successful, some combination
of attacks are attempted.
The recommendation engine [1] remains unchanged from the
simulation framework with one exception; we experimentally learnt
Figure 6: Learning the latency-request function from AWS
setup. X and Y-axis represent time and throughput measured
in bytes. Each burst represents an attack, and attacks with in-
creasing intensity are launched sequentially.
the function associated with equation (1) from our AWS testbed.
We systematically overloaded the system by stepping up the attack
volume and measured the latency. Figure 6 shows that throughput
(Y-axis) eventually ﬂattens out as we increase the attack intensity.
Latency is inversely proportional to the throughput, and each attack
provides us with a sample to learn the function.
Figure 4 shows the workﬂow for the AWS-based demonstration.
4. OPEN SOURCE SOFTWARE
Code used for this demonstration is available as open source at
https://github.com/cyber-resilience/cloud-simulation.
5. ACKNOWLEDGMENTS
Presented research is funded by the Asymmetric Resilient Cyber
Security initiative at Paciﬁc Northwest National Laboratory, which
is operated by Battelle Memorial Institute.
6. REFERENCES
[1] S. Choudhury, P.-Y. Chen, L. Rodriguez, D. Curtis,
P. Nordquist, I. Ray, and K. Oler. Action recommendation for
cyber resilience. In Proceedings of the ACM workshop on
Automated Decision Making for Active Cyber Defense
(SafeConﬁg 2015), 2015.
1622