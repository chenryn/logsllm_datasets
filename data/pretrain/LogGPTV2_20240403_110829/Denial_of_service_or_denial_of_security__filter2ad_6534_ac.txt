versaries dropping onions during transmission [18]. Just as
in mix networks, w copies4 of a Hydra-Onion are sent in
a cascade. However, at each step, a mix will forward two
copies of the Hydra-Onion to two diﬀerent mix servers at
the next step.
Each onion has the following format:
Oi = { EncJi,1 (Ji+1,1, Ji+1,a(1), ki+1),
EncJi,2 (Ji+1,2, Ji+1,a(2), ki+1),
··· ,
SEncki+1 (Oi+1)}
where Ji,j are the identities of the mixes at step i, and a() is
a permutation of nodes with a(i) 6= i for all i. In this case,
EncJ is the hybrid asymmetric/symmetric encryption under
the public key of J and SEnck is the symmetric encryption
under key k. Each mix server decrypts the piece of the
onion encrypted under its key and learns the identities of two
servers in the next step as well as the symmetric decryption
key for the next layer of the onion. This communication
pattern is displayed in Figure 5.
Security and Reliability of Hydra-Onions
3.2.1
Since any of the mixes at step i can decrypt the Hydra-
Onion Oi, a Hydra-Onion is insecure whenever there is at
least one dishonest mix at each step. Therefore, for a Hydra-
Onion mix with parameter (l, w, t, f ), the probability that a
message is secure is:
1 − (1 − tw)l
(10)
The reliability of Hydra-Onions is somewhat harder to
ascertain due to the randomized forwarding nature of the
mixes. The intuition behind the design is that random
graphs are expanders, and therefore, a single Hydra-Onion
will quickly replicate to ﬁll the w − 1 missing ones.
To evaluate Hydra-Onion reliability, we have developed
a simulation of the scheme. We create a network of l by w
mixes, and connect the nodes using randomly generated per-
mutations a. Each of the nodes is assigned to be honest with
4The authors of the Hydra-Onion system call this parameter
k; however, we use w for consistent presentation.
Figure 4: The security of Cashmere under diﬀerent
fractions of honest nodes with an expected reliability
of 100%. Experimental results: 5000 samples per
point, l = 5, and f = .90.
must be compromised. The probability that at least one
node in the relay group is malicious is 1− tw, as must be the
case for every relay group leading up the destination. Fi-
nally, the destination itself must be malicious for the route
to be compromised. Therefore, the probability that the mes-
sage will be delivered anonymously is:
1 − l−1X
i=0
(1 − tw)i ¯t
1
l
(8)
3.1.2 Cashmere under a DoS adversary
Cashmere routing is aﬀected by DoS attacks when any of
the relay group roots are dishonest. Unless the adversary
has compromised the entire forwarding path, he will drop
any connection that goes through a relay root he controls.
For a message to be delivered reliably, every group un-
til the destination must deliver the message reliably. This
means that either every relay root and the destination are
reliable and honest, or the entire path is compromised and
thus remains reliable. A relay root is chosen out of only
reliable nodes, so it is reliable and honest with probability
tf /(tf + ¯t. So the probability of a message being reliably
delivered is:
l−1X
i=0
1
l
!
„ tf
«i
tf + ¯t
(1 − tw)i ¯t +
tf
(9)
Figure 4 presents the results of Cashmere simulations un-
der a passive and DoS attacker. In these experiments, honest
nodes had f = .90, connection lengths were l = 5, and the
group size w = 5, as recommended by the Cashmere authors.
This setup produces nearly 100% reliability under a passive
adversary. Note that it is impossible to increase reliability
under the DoS strategy by increasing w, since the adversary
need only to capture the root node to block the message.
The graph depicts the fraction of successful connections that
remain secure; the DoS strategy is very eﬀective at reducing
this number quickly.
These results highlight that under the DoS strategy, both
the reliability and security of Cashmere are strictly worse
0.00.20.40.60.81.00.00.20.40.60.81.0Security versus Honest Nodest − Probability a node is honest.Probability of SecurityNo DoSDoSrity advantage is slight, as both schemes achieve over 99.99%
security with these parameters.)
The main advantage of Hydra-Onions seems to be when
most nodes are honest, but not reliable (either due to in-
herent reliability problems or external DoS attacks.) For
example, with f = 0.5, mix networks require w = 95 to
achieve 95% reliability, even when no nodes are compro-
mised, whereas Hydra-Onions only require w = 19 in the
same situation. However, a simpler variant of Hydra-Onions
proposed by the same authors, called DUO-Onions, may be
more appropriate for this case. DUO-Onions [18] are de-
signed to handle fail-stop failures, such as unreliable nodes
or DoS, by iteratively picking the next mix in a list whenever
the ﬁrst choice is unreachable. DUO-Onions have the advan-
tage of using dramatically less bandwidth in the case that
nodes are reliable, and only sending extra onions as neces-
sitated by failures. They are unable to address Byzantine
faults of the forwarding mixes, but as our analysis shows,
neither are Hydra-Onions.
4. DENIAL OF SERVICE AGAINST SALSA
Salsa [21] is an anonymous communication system de-
signed to overcome the scalability problems in traditional
mix systems. As in Tor, a tunnel is built between the ini-
tiator and the recipient via proxy routers (nodes) for anony-
mous communication. Layered encryption ensures that each
node knows only its previous and next hop in the tunnel.
The nodes used for the tunnels are randomly selected from
the global pool of nodes, even though each node has only
local knowledge of a small subset of the network.
Salsa is based on a distributed hash table (DHT) that
maps nodes to a point in an ID space corresponding to the
hash of their IP address. There are two basic mechanisms
in the Salsa architecture: (1) a node lookup mechanism and
(2) a tunnel building mechanism. The former returns the
IP address and public key of node in the DHT closest to
a given point in the ID space. The latter is used to build
a Tor-like tunnel. Both schemes use redundancy to avoid
attacks and both are susceptible to the selective DoS attack.
Given the space constraints, we shall focus our discussion
on the impact of selective DoS attack on the tunnel building
mechanism and we will assume that the lookup mechanism
is perfectly secure. Salsa is resistant to conventional attacks
that target the lookup mechanism as long as the fraction
of malicious nodes in the system (t) is less than 0.2. Since
Salsa does not provide adequate anonymity for high values
of t, we shall limit our analysis to low values.
To build a tunnel the initiator chooses r random IDs and
looks up the corresponding nodes (called the ﬁrst set of
nodes). Keys are established with each of these nodes. Each
of the ﬁrst set of nodes does a lookup for r additional nodes
(second set of nodes). A circuit is built to each of the nodes
in the second group, relayed through one of the nodes in the
ﬁrst group. Again, the initiator instructs the second set of
nodes (via the circuits) to do a redundant lookup for a ﬁnal
node. One of the paths created between the ﬁrst and the
second set of nodes is selected and the ﬁnal node is added to
the tunnel. We use the parameter l to refer to the number
of stages in the tunnel. ([21] suggests r = 3 and l = 3).
4.1 Conventional Analysis
A tunnel in the Salsa system can be compromised if there
is at least one attacker node in every stage of the tunnel.
Figure 5: Hydra-Onion communication patterns
probability t and, if honest, to be reliable with probability
f .
In the case of simple attacker strategy, we assume that
dishonest nodes are always reliable. To simulate the reli-
ability given the DoS attacker strategy, we ﬁrst determine
whether there is at least one dishonest mix at each step. In
this case, the onion is compromised and the dishonest nodes
are reliable and forward all messages. Otherwise, the dis-
honest nodes perform a denial of service and drop all traﬃc
sent to them.
3.2.2 Analysis
Figure 6 shows the analysis of Hydra-Onions under both
the simple adversary strategy and the DoS strategy. Setting
f = 0.9, l = 5 and varying t, we increased w until we could
obtain 95% reliability. The ﬁgures plot the w required to
achieve this reliability, as well as the security at that w.
As designed, Hydra-Onions are eﬀective at providing relia-
bility in the face of denial of service: even under heavy denial
of service, w = 6 suﬃces to achieve 95% reliability. However,
this is done at the expense of security: increasing values of
w very quickly decrease the security of Hydra-Onions, as a
single compromised mix at each step suﬃces to compromise
the entire onion. When 15% of nodes are malicious, 5% of all
onions are compromised, and when the fraction of malicious
nodes rises to 30%, over half of all paths are compromised.
30%, and even 15%, may sound like high fractions of at-
tackers, but recall that the conventional analysis of a mix
network with 5 hops that ignores DoS suggests that path
compromise occurs with probability 0.25% and 0.008% re-
spectively with these fractions of attackers. For comparison,
mix networks with 30% attackers are able to achieve 93.6%
security, albeit with a width of 28.
Therefore, Hydra-Onions are not a good tool when a sig-
niﬁcant number of mixes are compromised. As can be seen
from the right limit of the graph, they are also ineﬃcient
when nearly all nodes are honest: with 95% honest nodes,
Hydra-Onions use a width of 3 in the DoS strategy, which
has a communications cost equivalent to a mix network
width of 6, since each mix sends two onions. Mix networks
under the same parameters require w = 5 to achieve 95%
reliability, and provide better security. (Though the secu-
Ji+1,1Ji+1,2Ji+1,3Ji+1,4Ji+1,5Ji,1Ji,2Ji,4Ji,3Ji,5a(1)Figure 6: Replication factor w that achieves reliability of 95% for Hydra-Onions under diﬀerent fraction of
honest nodes t, and the corresponding security. Analytical results. l = 5, f = 0.90.
Also, by end-to-end timing analysis, the tunnel will be com-
promised if the ﬁrst and last forwarding nodes in the tunnel
are compromised. The conventional analysis in [21] shows
that the latter attack dominates and the probability of com-
promise is not much larger than t2.
We note that the tunnel building process is subject to
a public key modiﬁcation attack.
If all r nodes in a par-
ticular stage are compromised, they can modify the public
keys of the next set of nodes being looked up. This attack
defeats Salsa’s bound check algorithm that ensures the IP
address is within the right range, since it cannot detect an
incorrect public key. Also, since the traﬃc toward the node
whose public key has been modiﬁed is forwarded via cor-
rupt nodes, the attackers are guaranteed to intercept the
messages. They can then complete the tunnel building pro-
cess by emulating all remaining stages (and hence, the last
node). Thus, if the attackers have the initiator information
and any stage is fully compromised, the tunnel is compro-
mised.
4.2 Selective DoS attack
The idea of selective DoS attack is to deny service to trust-
worthy nodes so that user traﬃc moves toward compromised
nodes. The compromised nodes will try to abort the tun-
nel building process whenever the tunnel cannot be com-
promised. A malicious node can easily launch a denial of
service by returning an arbitrary result from a lookup. The
Salsa tunnel building mechanism aborts if the lookup infor-
mation provided by the redundant r nodes in any stage is
inconsistent5.
The attackers should deny service in two cases. First, if
the last node is honest, and there is an attacker in the second
last stage, that attacker will perform DoS, unless all r nodes
in that stage are malicious. (This can be easily determined
on the reception of r messages at attacker nodes containing
lookup requests for the identical r nodes in the next stage.)
Also, if the attacker nodes are selected to forward traﬃc in
a tunnel, they can deny service if the tunnel has not been
compromised. The nodes will perform traﬃc analysis on the
ﬁrst portion of the stream sent over a tunnel and correlate
5This behavior is not precisely speciﬁed in [21], but has been
conﬁrmed by the Salsa authors in a private communication.
it with all other streams observed by other attackers.
If
the stream can be linked to both an initiator and a desti-
nation, the attackers continue forwarding traﬃc; otherwise,
they terminate the tunnel as it cannot be compromised.
The attack algorithm is as follows:
if a stage is completely compromised then
emulate remaining hops via public key modiﬁcation at-
tack.
else
if the second-to-last stage has an attacker and the last
node being looked is honest then
return arbitrary information to DoS the tunnel
else
return correct results
end if
end if
if attacker selected to forward traﬃc then
perform traﬃc analysis
end if
if attackers cannot identify the source and destination of
the tunnel after a timeout then
stop forwarding traﬃc on that tunnel
end if
4.3 Analysis
We compare the performance of three attack methodolo-
gies on the Salsa tunnel building mechanism. The ﬁrst one
consists of conventional passive attacks in which the tunnel
is compromised whenever there is an attacker in every stage
or via end to end timing analysis. The second methodol-
ogy involves active modiﬁcation of the public key of nodes
being looked up whenever the attackers have compromised
an entire stage. This attack also includes the conventional
attacks. In the third methodology, nodes try to selectively
DoS the tunnels which are likely not to be compromised.
The public key modiﬁcation and conventional attacks are
also included in this methodology. We have used f = 1 in
our analysis. Our results have been computed by modeling
the Salsa tunnel building mechanism as a stochastic activ-
ity network in the M¨obius framework [5]. Figure 7 shows
the fraction of compromised tunnels for varying attacker ra-
tios under the three attacks. We ﬁnd that the public key
0.00.20.40.60.81.0123456Replication versus honest nodest − Probability a node is honest.w − replication factor.No DOSDoS0.00.20.40.60.81.00.00.20.40.60.81.0Security versus honest nodest − Probability a node is honest.Secure routesNo DoSDoSmodiﬁcation attack does not yield a signiﬁcant advantage
over conventional attacks. This is because the probability
of compromising an entire stage for r = 3 is very low.
Our analysis shows that the current Salsa design is ex-
tremely vulnerable to the selective DoS attack, especially
for high attacker ratios. In fact, as compared to the conven-
tional security analysis of 6.82% compromised tunnels for
an attacker ratio of t = 0.2, the selective DoS attack re-
sults in 19.14% compromised tunnels. Also, the fraction of
compromised tunnels may even be higher (depending on the
attacker ratio) than that of a system with a single interme-
diate proxy. This shows that the selective DoS attack has
devastating eﬀects on the security of Salsa.
Figure 7: Eﬀect of selective DoS on Salsa tunnel
building
Given the massive reduction in anonymity made possible
by the selective DoS attack, we study whether other choices
of r and l could better resist this attack. We ﬁnd that the
choice of both the number of nodes in a stage (r) and the