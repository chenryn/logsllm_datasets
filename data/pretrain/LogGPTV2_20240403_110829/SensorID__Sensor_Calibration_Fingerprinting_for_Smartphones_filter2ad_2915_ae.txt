Entropy
(bits)
5.0
6.7
7.2
5.0
6.5
6.5
5.4
42.3
resolution. Suppose X ∼ N (μ, σ2) with the density function
f (x), then we can calculate P(xi) as follows:
f (x) dx,
if xi ∈ (−65535, 65535)
C. Will SENSORID ever change?
(cid:14) xi+0.5
(cid:14)
(cid:14) +∞
xi−0.5
⎧⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎩
−65534.5
−∞
P(xi) =
f (x) dx,
if xi = −65535
(11)
f (x) dx,
if xi = 65535
65534.5
By this equation, we calculate the entropy of D12, D13,
D23, and D32. Results are presented in Table V.
For elements in the main diagonal (i.e., D11, D22, and
D33), we need to calculate their entropy on a per device
type basis. Here, we use the iPhone 6S as an example to
calculate the GYROID entropy because it is the most popular
device model in our dataset (127 devices). Similar to the
entropy calculation for non-diagonal elements, we estimate the
parameters of normal distribution for diagonal elements from
the 127 GYROID matrices. Then, we apply both Equation 10
and 11 to calculate the entropy. Table V depicts the GYROID
entropy we estimated for the iPhone 6S. As seen in Table V,
the GYROID for the iPhone 6S has about 42 bits (≈ 4.4×1012
dits) of entropy. By the same analysis, we estimate the entropy
of the MAGID for the iPhone 6S. If adversaries launch the
attack using the rounding option (§III-F), each element could
have ±1 uncertainty. In this case, we estimate that the MAGID
contains about 25 bits of entropy. The MAGID should have
more entropy if adversaries choose the clustering option. Thus,
the 25 bits of entropy should be regarded as a lower bound
for the MAGID. We observe no evidence of strong correlation
between the MAGID and GYROID. Therefore, we estimate the
SENSORID for the iPhone 6S has around 67 bits of entropy.
Uniqueness Analysis. There were 728M active iPhones
worldwide in April 2017 and the iPhone 6S devices accounted
for 18% of them [15]. Therefore, there were around 131M
iPhone 6S devices. From the birthday problem, we know that
the chance of two iPhone 6S devices having the same SEN-
SORID is around 0.0058%, suggesting it is a globally unique
device ﬁngerprint. In addition, the SENSORID is orthogonal
to other ﬁngerprinting techniques. Therefore, adversaries can
combine the SENSORID with other metadata (e.g., system
language) or other ﬁngerprinting techniques (e.g., canvas ﬁn-
gerprinting) to further increase the ﬁngerprint entropy.
B. Is SENSORID correlated with the manufacturing batch?
To answer this question, we ﬁrst study the correlation
between the SENSORID and the country of the device, which
is inferred from the IP address when a user submits data.
We do not ﬁnd any evidence of strong correction at the 0.05
signiﬁcance level.
In addition, we collected gyroscope data from 25 iOS
devices in an Apple Store. Some of these devices have similar
serial numbers, which suggests they may come from the same
manufacturing batch. However, the GYROID of these devices
differs signiﬁcantly. Furthermore, there is no signiﬁcant differ-
ence in the GYROID distribution for devices from the Apple
Store and for devices that we collect otherwise.
We have not observed any change in the SENSORID of our
test devices in the past half year. Our dataset includes devices
running iOS 9/10/11/12. We have tested compass calibration,
factory reset, and updating iOS (including the latest iOS 12);
the SENSORID always stays the same. We have also tried
measuring the sensor data at different locations and under
different temperatures; we conﬁrm that these factors do not
change the SENSORID either.
D. Factory calibration in Android devices
We have observed that the scale factors of the accelerometer
on Google Pixel 2 and Pixel 3 devices are different for each
axis (similar to Fig. 5 (a)), which suggest some form of
factory calibration has been applied. For Pixel 3, the factory
calibration values are stored in local ﬁles when the system is
ﬁrst booted. If the device is rooted, the calibration values can
be directly read from these ﬁles. We use a similar approach
to estimate the gain matrix of the accelerometer. The gain
matrices we estimated from the sensor outputs of two Pixel 3
devices match the values stored in these local ﬁles and they
are distinct. We only have access to a few Pixel devices,
and therefore we are unable to perform the same analysis
as we have done on iOS devices to determine whether the
ﬁngerprint we obtain for Pixel devices is globally unique or
not. The IMU in other Android devices is also likely factory
calibrated but the calibration is typically restricted to offsets
(i.e., bias compensation). Our approach targets the gain matrix
and cannot recover bias compensation.
E. Impact and coordinated disclosure
Overall, all iOS devices that have a gyroscope or magne-
tometer can be ﬁngerprinted by this approach, including the
latest iPhone XS and iPhone XS Max. A SENSORID can
be generated by both apps and mobile websites and requires
no user interaction. Both mainstream iOS browsers (Safari,
Chrome, Firefox, and Opera) and privacy-enhanced browsers
(Brave and Firefox Focus) are vulnerable to this calibration-
based ﬁngerprinting attack, even with the ﬁngerprinting pro-
tection mode turned on. A recent study shows that motion
sensor data is accessed by 2,653 of the Alexa top 100K
websites, including more than 100 websites exﬁltrating motion
sensor data to remote servers [16]. This is troublesome since it
is likely that the SENSORID can be calculated with exﬁltrated
data, allowing retrospective device ﬁngerprinting.
We followed a coordinated disclosure procedure and re-
ported this vulnerability to Apple on 3rd August 2018. On iOS
(cid:23)(cid:21)(cid:25)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
12.2, Apple adopted our suggestion (§VI) and added random
noise to the ADC outputs. Apple also removed access to mo-
tion sensors from Mobile Safari by default. This vulnerability
is disclosed to Google on 10th December 2018. Google has
contacted us and is investigating this issue.
is detrimental
to user privacy if a countermeasure is not
deployed. Therefore, we suggest both the standards organiza-
tion (e.g., W3C) and browser vendors treat the sensor-related
API carefully and understand the privacy implications before
adopting it.
VI. COUNTERMEASURES
VII. RELATED WORK
As shown in §IV and §V, the SENSORID is a reliable device
ﬁngerprint that is easy and efﬁcient to generate. In addition,
this technique does not require any permission from the user
and it works on both mobile apps and websites. As far as
we know, the app review process currently enforced by Apple
does not check the usage of sensor-related APIs. Therefore, it
poses a big threat to user privacy.
To address this problem, manufacturers could regularly
update the gain matrix through recalibration, either remotely or
locally. However, this approach is not recommended. The gain
matrix after recalibration is likely to be close to (or the same
as) the original one, which may still give adversaries enough
entropy to ﬁngerprint
the device. Furthermore, adversaries
can still exploit the SENSORID to ﬁngerprint devices during
the recalibrate-free time period. Apple could introduce run-
time permissions for sensor APIs. However, existing work
has shown that users tend to provide blind authorization to
permission requests [17]. Additionally, it does not prevent apps
that require access to motion sensors from ﬁngerprinting users.
Apple could also stop factory calibrating motion sensors in
future iOS devices, but this will reduce sensor data quality
and impair device usability; this also does not stop adversaries
from ﬁngerprinting existing iOS devices.
Here, we suggest two easier and more reliable countermea-
sures. Recall that our approach to recover the gain matrix is
based on the fact that the values in the ADC output, A, are all
integers. This property allows us to recover the values of ΔA
3×1
using Equation 6. However, if we add random noise  ∈ R
,
from the uniform distribution in the range [−0.5, 0.5], to each
ADC output A. Then we have:
O = G(A + ) + B
(12)
It is clear to see that the application of random noise with
distribution  ∼ U (−0.5, 0.5) followed by a truncation of the
output down to 16-bit resolution means there is no easy way to
recover the values of ΔA. Therefore, attackers can no longer
generate the SENSORID using the approach described in this
paper. The cost of adding  is negligible in most cases, but it
offers signiﬁcant advantages in terms of user privacy.
Alternatively, we could round the factory calibrated sensor
output to the nearest multiple of the nominal gain to prevent
recovering the gain matrix. This approach is more practical
to apply and it does not require knowing the gain matrix in
advance. Therefore, mobile browsers can adopt this approach
to protect user privacy.
In addition, the World Wide Web Consortium (W3C) made
a candidate recommendation of the generic sensor API, which
allows web developers to access the magnetometer readings
and possibly raw motion sensor data [18]. We believe this
A. Traditional Device Fingerprinting Techniques
Device ﬁngerprinting is an important way for app devel-
opers and advertisers to track their users. The IP address
is one of the earliest identiﬁers used to ﬁngerprint devices.
However, the adoption of dynamic IP allocation and Network
Address Translation (NAT), particularly for home PCs and
mobile devices, has greatly reduced the effectiveness of this
approach. Cookies are also commonly used to track users
across websites. However, cookies are stored locally and can
be changed by users at any time. In fact, many privacy-focused
browsers, such as Brave, by default block all
third-party
cookies. In addition, regulations in the US and Europe require
websites to obtain user-permission before using cookies, which
also decreases the usability of this approach [19].
A variety of IDs in the device can be used as ﬁngerprints,
including the IMEI, UDID, and MAC address of hardware
modules. A study in 2011 showed that these identiﬁers were
widely used in mobile apps [20]. However, both Apple and
Google have adopted more stringent privacy policies to pre-
vent developers from accessing these unique IDs. Addition-
ally, many information ﬂow tracking systems, such as Taint-
Droid [21] and Panorama [22], can capture these malicious
behaviors and report them to users.
B. Passive Device Fingerprinting
Passive device ﬁngerprinting is the action of characterizing
a target device by observing its network trafﬁc. It analyzes
the captured data to reveal ﬁngerprintable patterns (e.g., the
software, operating system, or hardware components). Since
passive ﬁngerprinting only relies on network trafﬁc,
is
compatible with more devices, difﬁcult to discover, and can
track users across different browsers.
it
In general, most passive ﬁngerprinting techniques rely on
machine learning models to differentiate devices. Uluagac
et al. applied Artiﬁcial Neural Networks (ANNs) to classify
devices based on the time-variant behavior in their trafﬁc [23].
Neumann et al. evaluated several features extracted from
network trafﬁc and found that the frame inter-arrival time,
which is correlated with the hardware status and installed
applications, is the most effective feature for device ﬁnger-
printing [24]. Machine learning approaches usually require
more computing resources and a large amount of data for
training. Thus, passive ﬁngerprinting techniques usually have
a longer response time than active ﬁngerprinting techniques.
C. Active Device Fingerprinting
Active ﬁngerprinting techniques deploy embedded code to
actively gather information about a device and use these
characteristics to make a distinction between different devices.
(cid:23)(cid:21)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
For example, Fingerprintjs2 [14] is a popular browser ﬁnger-
printing library that utilizes the characteristics of a browser,
including the User-Agent (UA), version, plugins, font, and
canvas. Apple has realized the risk of browser ﬁngerprinting.
From Mac OS Mojave, Safari scrubs most distinctive browser
data, exposing only generic conﬁguration information and
default fonts [25]. The information about the operating system
(e.g., version and root permission) and system conﬁgurations
(e.g., network and ﬂash conﬁgurations) can also be used to
identify devices. Although this information cannot uniquely
identify a device, it can be combined with other features from
browsers and embedded hardware to increase precision.
D. Hardware Fingerprinting
In general, hardware imperfections are inevitable during
manufacture, which implies the existence of ﬁngerprints.
Hardware modules that have been studied for ﬁngerprinting
purposes include: WiFi chipsets [26], [27], motion sensors [3],
[28], camera [29], [30], and microphones [31].
For smartphones, hardware ﬁngerprints are the most con-
sistent identiﬁer among the active ﬁngerprinting sources. In
general, it is difﬁcult to replace the embedded hardware. Some
embedded hardware, such as motion sensors, can be accessed
by both JavaScript running in a web browser and by mobile
apps installed on the device. In addition, accessing motion
sensor data does not require any permission from users.
Existing hardware ﬁngerprinting techniques are mostly
based on machine learning approaches. Fridrich showed that
the Photo-Response Non-Uniformity (PRNU) noise of imag-
ing sensors can be estimated and used as a camera ﬁn-
gerprint [29]. Bojinov et al. demonstrated it is possible to
ﬁngerprint both the speakerphone-microphone system and
the accelerometer using typical clustering approaches [28].
However, they only correctly identiﬁed 53% of the devices
in their dataset even after integrating the UA string into their
model. Das et al. applied several supervised machine learning
models to make a distinction between devices based on the
gyroscope and accelerometer readings [32]. To increase the
accuracy, they used inaudible sound to stimulate the motion
sensors. As a countermeasure, they suggested that manufac-
turers should perform better calibration of the motion sensors.
However,
the calibration process
could leak information if not properly implemented. More
recently, they further improved its accuracy by introducing
a voting scheme among different classiﬁers [4]. Nevertheless,
their approach requires a lot of computing resources, which
cannot be implemented locally on the device. Even then, their
approach achieved less than 60% F1 score in an open-world
setting when devices were held in hand. They also applied
their approach to make a distinction between 85 iPhone 6
devices. When devices were held in hand, only 60% of these
devices produced unique ﬁngerprints, which, by reference to
the birthday problem, indicates that their approach provides
around 13 bits of entropy. Based on the motion sensor data that
they collected through JavaScript, we correctly identify all iOS
devices in the dataset based on the calibration behavior without
they did not realize that
knowing the device model in advance. Most recently, Das et al.
studied the sensor API usage in popular websites [16]. They
showed that 2,653 of the Alexa top 100K websites accessed
motion sensor data and 63% of the scripts for accessing motion
sensors also engaged in browser ﬁngerprinting. Although the
prior art has realized the idiosyncrasies across different sen-
sors, none of them, to the best of our knowledge, has exploited
the calibration information as a ﬁngerprint. This paper ﬁlls this
gap and shows that the calibration matrix of motion sensors
can be utilized as a globally unique ﬁngerprint for iOS devices.
VIII. CONCLUSION
In this paper we introduced the calibration ﬁngerprinting
attack: a new method of ﬁngerprinting devices with embedded
sensors by careful analysis of the sensor output alone. We
demonstrated the effectiveness of this attack on iOS devices
and found the lack of precision in the M-series co-processor
helps the generation of such a ﬁngerprint. Our attack is easy
to conduct by a website or an app in under 1 second, requires
no special permissions, does not require user interaction, and
is computationally efﬁcient. Our attack can also be applied
retrospectively to a historic archive of sensor data. Using
the iPhone 6S as an example, we showed that the GYROID
contains about 42 bits of entropy and the MAGID provides an
additional 25 bits of entropy. Furthermore, we demonstrated
the combination of the MAGID and GYROID – the
that
SENSORID – is globally unique for the iPhone 6S, does
not change on factory reset or after a software update. In
addition to iOS devices, we ﬁnd that Google Pixel 2 and
Pixel 3 can also be ﬁngerprinted by our attack. To prevent this
ﬁngerprinting attack, we recommend the addition of uniformly
distributed random noise to the output of the sensor before any
calibration is applied or round the calibrated sensor output to
the nearest multiple of nominal gain.
The idea of a calibration ﬁngerprint attack is widely appli-
cable. Although this paper mainly targets the gyroscope and
magnetometer found in iOS devices, we anticipate calibration
information used in other embedded sensors may also be
recovered and used as a ﬁngerprint, and therefore we expect
future research will successfully perform calibration ﬁnger-
printing attacks on other types of sensor.
ACKNOWLEDGMENT
Jiexin Zhang is supported by the China Scholarship Council.
Alastair R. Beresford is partly supported by The Boeing
Company and EPSRC under Grant No.: EP/M020320/1. We
thank Nokia Bell Labs for supporting this work and valuable
discussions. The opinions, ﬁndings, and conclusions or rec-
ommendations expressed are those of the authors and do not
necessarily reﬂect those of the funders. We thank Stephan A.
Kollmann, Diana A. Vasile, Ricardo Mendes, Andrew Rice,
and Amanda Prorok for helpful discussion and insight. We also
thank our shepherd Adam Bates and anonymous reviewers for
their feedback on the paper.
(cid:23)(cid:22)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:44:22 UTC from IEEE Xplore.  Restrictions apply. 
REFERENCES
[1] comScore.
in
(2017)
focus.
2017
[Online].
ture
comscore.com/Insights/Presentations-and-Whitepapers/2017/
2017-US-Cross-Platform-Future-in-Focus
Available:
u.s.
cross-platform
fu-
https://www.
[2] J. P. Achara, “Unveiling and controlling online tracking,” Ph.D. disser-
tation, Universit´e Grenoble-Alpes, 2016.
[3] S. Dey, N. Roy, W. Xu, R. R. Choudhury, and S. Nelakuditi, “Accelprint:
imperfections of accelerometers make smartphones trackable,” in Pro-
ceedings of the 2014 Network and Distributed System Security (NDSS)
Symposium, 2014.
[4] A. Das, N. Borisov, and E. Chou, “Every move you make: exploring
practical issues in smartphone motion sensor ﬁngerprinting and counter-
measures,” Proceedings on Privacy Enhancing Technologies Symposium
(PETS), vol. 2018, no. 1, pp. 88–108, 2018.
[5] S. Poddar, V. Kumar, and A. Kumar, “A comprehensive overview of
inertial sensor calibration techniques,” Journal of Dynamic Systems,
Measurement, and Control, vol. 139, no. 1, p. 011006, 2017.
[6] A. Grammenos, C. Mascolo, and J. Crowcroft, “You are sensing, but
are you biased? a user unaided sensor calibration approach for mobile
sensing,” Proceedings of the ACM on Interactive, Mobile, Wearable and
Ubiquitous Technologies (IMWUT), vol. 2, no. 1, p. 11, 2018.
[7] D. Tedaldi, “Imu calibration without mechanical equipment,” Ph.D.
dissertation, University of Padova, 2013.
[8] T. Michel, P. Genev`es, H. Fourati, and N. Laya¨ıda, “On attitude estima-
tion with smartphones,” in Pervasive Computing and Communications
(PerCom), 2017 IEEE International Conference on.
IEEE, 2017, pp.
267–275.
[9] D. Tedaldi, A. Pretto, and E. Menegatti, “A robust and easy to implement
method for imu calibration without external equipments,” in 2014 IEEE
International Conference on Robotics and Automation (ICRA).
IEEE,
2014, pp. 3042–3049.
[10] W. Ren, T. Zhang, H. Zhang, L. Wang, Y. Zhou, M. Luan, H. Liu, and
J. Shi, “A research on calibration of low-precision mems inertial sen-
sors,” in 2013 25th Chinese Control and Decision Conference (CCDC).
IEEE, 2013, pp. 3243–3247.
[11] I. Frosio, F. Pedersini, and N. A. Borghese, “Autocalibration of mems
accelerometers,” IEEE Transactions on Instrumentation and Measure-
ment, vol. 58, no. 6, pp. 2034–2041, 2009.
[12] STMicroelectronics.
three axis digital output
[Online]. Available: https://www.elecrow.com/download/
(2010) L3g4200d:
gyroscope.
L3G4200 AN3393.pdf
[13] ——. (2009) Lis331dlh: Mems digital output motion sensor. [Online].
Available: http://www.st.com/resource/en/datasheet/lis331dlh.pdf
[14] Valve.
(2018) Modern & ﬂexible browser ﬁngerprinting library.
[Online]. Available: https://github.com/Valve/ﬁngerprintjs2
[15] J. Dunn.
(2018)
It
iphone