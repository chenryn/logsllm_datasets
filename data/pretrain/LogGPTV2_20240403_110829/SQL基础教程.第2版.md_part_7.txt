SELECT ，……
FROM ；
KEYWORD 该SELECT语句包含了SELECT和FROM两个子句（clause） 。子句
●子句
是 SQL 语句的组成要素，是以 SELECT 或者 FROM 等作为起始的
短语。
SELECT子句中列举了希望从表中查询出的列的名称，而FROM子句
则指定了选取出数据的表的名称。
● 46 第２章 查询基础
接下来，我们尝试从第1章创建出的Product（商品）表中，查询
出图2-1所示的product_id（商品编号）列、product_name（商
品名称）列和purchase_price（进货单价）列。
图2-1 查询出Product表中的列
product_id product_name product_type sale_price purchase_price regist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
0003 运动T恤 衣服 4000 2800
0004 菜刀 厨房用具 3000 2800 2009-09-20
0005 高压锅 厨房用具 6800 5000 2009-01-15
0006 叉子 厨房用具 500 2009-09-20
0007 擦菜板 厨房用具 880 790 2008-04-28
0008 圆珠笔 办公用品 100 2009-11-11
输出这3列
对应的SELECT语句请参见代码清单2-1，该语句正常执行的结果如
注A 执行结果所示A。
结果的显示方式根据RDBMS的客
户端的不同略有不同（数据的内 代码清单2-1 从Product表中输出3列
容都是相同的）。如无特殊说明，
本书中显示的都是PostgreSQL 9.5 SELECT product_id, product_name, purchase_price
的执行结果。 FROM Product;
执行结果
product_id | product_name |p urchase_price
-----------+--------------+---------------
0001 | T恤衫 | 500
0002 | 打孔器 | 320
0003 | 运动T恤 | 2800
0004 | 菜刀 | 2800
0005 | 高压锅 | 5000
0006 | 叉子 |
0007 | 擦菜板 | 790
0008 | 圆珠笔 |
SELECT语句第一行的SELECT product_id, product_name,
purchase_price就是SELECT子句。查询出的列的顺序可以任意指
2-1 SELECT语句基础 47 ●
定。查询多列时，需要使用逗号进行分隔。 查询结果中列的顺序和
注B
SELECT子句中的顺序相同B 。
行的顺序也可能存在与上述执
行结果不同的情况。如果用户不
设定SELECT语句执行结果中行
的顺序，就可能会发生上述情
况。行的排序方法将在第3章进
查询出表中所有的列
行学习。
KEYWORD 想要查询出全部列时，可以使用代表所有列的星号（*）。
●星号（*）
语法2-2 查询全部的列
SELECT *
FROM ;
例如，查询Product表中全部列的语句如代码清单2-2所示。
代码清单2-2 输出Product表中全部的列
SELECT *
FROM Product;
得到的结果和代码清单2-3中的SELECT语句的结果相同。
代码清单2-3 与代码清单2-2具有相同含义的SELECT语句
SELECT product_id, product_name, product_type, sale_price,
purchase_price, regist_date
FROM Product;
执行结果如下所示。
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
------------+------------+----------------+---------------+---------------+------------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-09-20
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-09-11
0003 | 运动T恤 | 衣服 | 4000 | 2800 |
0004 | 菜刀 | 厨房用具 | 3000 | 2800 | 2009-09-20
0005 | 高压锅 | 厨房用具 | 6800 | 5000 | 2009-01-15
0006 | 叉子 | 厨房用具 | 500 | | 2009-09-20
0007 | 擦菜板 | 厨房用具 | 880 | 790 | 2008-04-28
0008 | 圆珠笔 | 办公用品 | 100 | | 2009-11-11
● 48 第２章 查询基础
法则2-1
星号（*）代表全部列的意思。
但是， 如果使用星号的话，就无法设定列的显示顺序了 。这时就会按
照CREATE TABLE语句的定义对列进行排序。
专 栏
随意使用换行符
SQL语句使用换行符或者半角空格来分隔单词，在任何位置进行分隔都可以，
即使像下面这样通篇都是换行符也不会影响SELECT语句的执行。但是这样可能会
由于看不清楚而出错。原则上希望大家能够以子句为单位进行换行（ 子句过长时，
为方便起见可以换行）。
SELECT
*
FROM
Product
;
另外，像下面这样插入空行（无任何字符的行）会造成执行错误，请特别注意。
SELECT *
FROM Product;
为列设定别名
KEYWORD SQL语句可以使用AS关键字为列设定别名。请参见代码清单2-4。
●AS关键字
●别名 代码清单2-4 为列设定别名
SELECT product_id AS id,
product_name AS name,
purchase_price AS price
FROM Product;
2-1 SELECT语句基础 49 ●
执行结果
id | name | price
------+---------+-------
0001 | T恤衫 | 500
0002 | 打孔器 | 320
0003 | 运动T恤 | 2800
0004 | 菜刀 | 2800
0005 | 高压锅 | 5000
0006 | 叉子 |
0007 | 擦菜板 | 790
0008 | 圆珠笔 |
KEYWORD 别名可以使用中文，使用中文时需要用双引号（"）括起来A。请注意
●双引号（"）
不是单引号（'）。设定中文别名的SELECT语句请参见代码清单2-5。
注A
代码清单2-5 设定中文别名
使用双引号可以设定包含空格
（空白）的别名。但是如果忘记使 SELECT product_id AS "商品编号",
用双引号就可能出错，因此并不 product_name AS "商品名称",
推荐。大家可以像product_ purchase_price AS "进货单价"
list这样使用下划线（_）来代 FROM Product;
替空白。
执行结果
商品编号 | 商品名称 | 进货单价
--------+--------+--------
0001 | T恤衫 | 500
0002 | 打孔器 | 320
0003 | 运动T恤 | 2800
0004 | 菜刀 | 2800
0005 | 高压锅 | 5000
0006 | 叉子 |
0007 | 擦菜板 | 790
0008 | 圆珠笔 |
通过执行结果来理解就更加容易了。像这样使用别名可以让SELECT
语句的执行结果更加容易理解和操作。
法则2-2
设定汉语别名时需要使用双引号（"）括起来。
● 50 第２章 查询基础
常数的查询
SELECT子句中不仅可以书写列名，还可以书写常数。代码清单2-6
KEYWORD 中的SELECT子句中的第一列'商品'是 字符串常数 ，第2列38是 数字
●字符串常数
常数 ，第3列'2009-02-24'是 日期常数 ，它们将与product_id
●数字常数
●日期常数 列和product_name列一起被查询出来。A
注A
代码清单2-6 查询常数
在SQL语句中使用字符串或者日
期常数时，必须使用单引号(')将 SELECT '商品' AS string, 38 AS number, '2009-02-24' AS date,
其括起来。 product_id, product_name
FROM Product;
执行结果
string | number | date | product_id | product_name
---------+-----------+--------------+-------------+--------------
商品 | 38 | 2009-02-24 | 0001 | T恤衫
商品 | 38 | 2009-02-24 | 0002 | 打孔器
商品 | 38 | 2009-02-24 | 0003 | 运动T恤
商品 | 38 | 2009-02-24 | 0004 | 菜刀
商品 | 38 | 2009-02-24 | 0005 | 高压锅
商品 | 38 | 2009-02-24 | 0006 | 叉子
商品 | 38 | 2009-02-24 | 0007 | 擦菜板
商品 | 38 | 2009-02-24 | 0008 | 圆珠笔
如上述执行结果所示，所有的行中都显示出了SELECT子句中的常数。
此外，SELECT子句中除了书写常数，还可以书写计算式。我们将在
下一节中学习如何书写计算式。
从结果中删除重复行
想知道Product表中保存了哪些商品种类（product_type）时，
如果能像图2-2那样删除重复的数据该有多好啊。
2-1 SELECT语句基础 51 ●
图2-2 除去重复数据后的商品种类
product_id product_name product_type sale_price purchase_price regist_date
（商品编号） （商品名称） （商品种类） （销售单价） （进货单价） （登记日期）
0001 T恤衫 衣服 1000 500 2009-09-20
0002 打孔器 办公用品 500 320 2009-09-11
0003 运动T恤 衣服 4000 2800
0004 菜刀 厨房用具 3000 2800 2009-09-20
0005 高压锅 厨房用具 6800 5000 2009-01-15
0006 叉子 厨房用具 500 2009-09-20
0007 擦菜板 厨房用具 880 790 2008-04-28
0008 圆珠笔 办公用品 100 2009-11-11
删除重复数据
product_type
（商品种类）
衣服
办公用品
厨房用具
KEYWORD 如上所示，想要删除重复行时，可以通过在SELECT子句中使用
●DISTINCT关键字
DISTINCT来实现（代码清单2-7）。
代码清单2-7 使用DISTINCT删除product_type列中重复的数据
SELECT DISTINCT product_type
FROM Product;
执行结果
product_type
---------------
厨房用具
衣服
办公用品
法则2-3
在SELECT语句中使用DISTINCT可以删除重复行。
在使用DISTINCT时，NULL也被视为一类数据。NULL存在于多
行中时，也会被合并为一条NULL数据。对含有NULL数据的purchase_
● 52 第２章 查询基础
price（进货单价）列使用DISTINCT的SELECT语句请参见代码清单
2-8。除了两条2800的数据外，两条NULL的数据也被合并为一条。
代码清单2-8 对含有NULL数据的列使用DISTINCT关键字
SELECT DISTINCT purchase_price
FROM Product;
执行结果
p urchase_price
---------------
5000
NULL数据被保留了下来
790
500
2800
320
DISTINCT也可以像代码清单2-9那样在多列之前使用。此时，会
将多个列的数据进行组合，将重复的数据合并为一条。代码清单2-9中的
SELECT语句，对product_type（商品种类）列和regist_date
（登记日期）列的数据进行组合，将重复的数据合并为一条。
代码清单2-9 在多列之前使用DISTINCT
SELECT DISTINCT product_type, regist_date
FROM Product;
执行结果
product_type |r egist_date
--------------+------------
衣服 | 2009-09-20
办公用品 | 2009-09-11
办公用品 | 2009-11-11
衣服 |
厨房用具 | 2009-09-20
厨房用具 | 2009-01-15
厨房用具 | 2008-04-28
如上述执行结果所示，product_type列为'厨房用具'，同时
regist_date列为'2009-09-20'的两条数据被合并成了一条。
DISTINCT关键字只能用在第一个列名之前。因此，请大家注意不
能写成regist_date, DISTINCT product_type。
2-1 SELECT语句基础 53 ●
根据 语句来选择记录
WHERE
前面的例子都是将表中存储的数据全都选取出来，但实际上并不是每
次都需要选取出全部数据，大部分情况都是要选取出满足“商品种类为衣
服”“销售单价在1000日元以上”等某些条件的数据。
KEYWORD SELECT语句通过WHERE子句来指定查询数据的条件。在WHERE
●WHERE子句
子句中可以指定“某一列的值和这个字符串相等”或者“某一列的值大于
这个数字”等条件。执行含有这些条件的SELECT语句，就可以查询出
只符合该条件的记录了。A