交谈的线程（TalkThread.java）
以 Thread.sleep 取代 wait 会出问题吗
---
## Page 128
start();
start(); 
public class Main  
(.GNa:
":BEGIN"}；
String name) (
List 3.12
public statie void main(string[] args) ↑
 puts 
public void runt) ↑
new
new TaikThread(requestQueuel, 
RequestQueue requestQueuel = new RequestQueue(l;
System.out.println(Thread.currentThread () -getName ()
Systen.cut.printin(Thread.currentThread() .getName ()
:()ananoisanbey mau = Zanenoisanbar ananozsanbey
for
this.output = output;
this.input 
super(name};
output.prtRequest(requestz);
" + request2);
想让Alice 与 Bobby 交谈，但不能正常执行的 Main类（Mainjava）
 System.out .println (Thread.currentThread() getName ()
Request request2 = new Request (requestl.getNamet) + "!");
//加上一个惊叹号（！），传给对方
 System.out.println (Thread.currentThread() .getName ()
Request requestl = input.getRequesti);
 TalkThread(requestQueue2,
！！获取对方的请求
（int i= 0; i < 20; i++){
input;
Guarded Suspensior-
 requestQueuel,
requestQuere2，
一要等到我准备好喔
"Bobby").
"Alice")
第3带
1
u
---
## Page 129
这个问题使用了interrupt方法。读者可以看完第5章的说明后再来解答这个问
26535811;
314159L1;
public class Main {
的 intermupt 方法。可是，这个更改的操作还是无法使程序结束（见图 3-6）。
这--竞所介绍的范例程序，若不使用Ctrl+C强制结束，到程序执行完毕需要花
问题3-6（线程的取消）
结束。
在经过约10秒后，就会调用ClientThread（List 3-3）与ServerThread（List 3-4
上很长的时间。所以我们把Main方法改写成List 1-13 的样子。这个Main方法
题。
List 3-13
public static void main(stringfl args) 
Thread bobby = new ServerThread(requestQueue,
bobby.interrupt ();
alice.interrupt();
//调用 interrupt 方法
try  
//等持约10秒
bobby-start();
alice.start();
Thread alice
RequestQueue
！！启动线程
catch (InterruptedException e)(
Thread.sleep(1o000);
约10秒后会调用 interrupt 方法的Main类（Main.java）
 requestQueue = new RequestQueue ();
 = new ClientThread(requestQueue,
【停在这里，CTRL+C结束程序】
Bobby:BEGIN
Alice:BEGIN
图3-5执行结果
"Bobby"",
"Alice",
---
## Page 130
Bobby handles [ Request No.i9
Alice requests [ Request No.19
Bobby handles
Bobby hanales [ Request No.15 ]
Bobby handles
Alice
Alice
Alice requests 
[以下省略。CTRL+C结束程序)
Alice
十★★★★
Bobby
 reguests 
calling interrupt 
handles
 requésts
 reguests 
[ Request No.18 
| Request. No.17
[ Request No.17
[ Request No.l6 ］
[ Request No.18
【 Request Nc.16
[ Request Nc.15
阁3-6执行范例
Guarded Suspension-
★★★★★
可是线程不停下来
调用interrupt 方法
要等到我准备好喔
第3算
1
---
## Page 131
要的话，就算了
Balking
咖
第4章
不需
---
## Page 132
线程。而 ChangerThread 类则是模仿
章所介绍的范例程序，可说是白动保存功能的超级简化版。
定期将现在数据的属性写入到文件里。
Pattern则是等待到可以执行时再去执行相应的操作。
在Balking Pattem 中，当警戒条件不成立时，就马上中断。
字。当跑垒员在垒时，投手站在投于板但“中途放弃”投球的动作，这种犯规行为，
算机忽然断电，或是软件忽然出错的危险，定期将数据保存到文件里的功能。这
了，所以就不保存了，也就是以“数据的属性有所不同”作为警戒条件，
就称为bak，
这个操作而回去，这就是Balking Pattern。
同时就放弃进行写入的操作（balk）。
务生，就走向我这边。
16
米，
范例程序
Balking Pattern 与 Guarded Suspension Pattern (第 3 章)
Data 类与 SaverThread 分别就像文本处理软件的文章与进行自动保存操作的
请想象成文本处理软件的“自动保存功能”，所谓白动保存功能，是为了预防计
保存数据属性时，之前所保存的属性将会被覆盖，而只有最新的属性会被存下
另外，若现在的数据与上次保存的属性并无不同时，此时写入的操作就是多余
那接下来就来阅读使川 Balking Patterm 的简单程序吧。在这里要写的程序，
表4-1是程序所使用到的类。
“balk”就是“退缩不前”的意思。棒球的“投手犯规；仰投”也是balk这个
当现在不适合进行这个操作，或是没有必要进行这个操作时，就直接放弃进行
这--章要学习的是Balking Pattern。
所以就不过来了·…….
因为已经决定要吃什么了，所以我举于表明我想要点餐。注意到我举起手的服
我现在正在餐厅里，考虑要吃什么东西。
-边修改文章，当满意的时候就执行存盘的用
而 Guarded Suspension
-·样，需要警戒条件。
，当没有不
---
## Page 133
同的状态：
并不会执行到。changed 标识的值仍然会是 true，表现出数据内容与文件内容不相
可能抛出 java.io.IOExccption 异常。当这个异常抛出来时，程序会跳离doSave 方
的时候，就要恩考“syncbronized 是在保护什么？”。这个 synchronized 所保护的，
性没有更改，所以就马.t: return（也就是不进行实际的保存操作）。这个return 就相
置为true，表示数据的更改，
我们的警戒条件就是这个标识必须为 trnue 值。
状态的字段或变量，我们·般称之为标识（fag）。在这里，changed 字段就是标识，
changed 的值为true 就是数据有修改过，而 changed为 false 时，则是数据没有变动
Data 类
L卡
（save）。另外，还有实际用来保存文件时使用的方法（doSave）。
Main
ChangerThread
SaverThread
Data
j savc 方法。这时，调用 doSave 的下－行语句（将faise 指定给changed 标识）
写入文件发生征何错误时，FileWriter 类的构造器、write 方法、close 方法都有
里。并将 changed 标识的值改为 false，长示 content 字段的属性与文件的内容一至
于“balk”的操作。若 changed 标识是tue 时，就调用 doSave方法将数据写入文
changc 与j save 两者都是 synchronized 方法。我们有说过，当看到 synchronized
savc 方法会检查 changed 标识的值，当 changed 标识的值是 false 时，就表示属
change 方法会将新的数据属性存入到 content字段里。而将 changed 标识的值设
Data 类中，拥有川来修改数据的方法（change），以及用来要求保存数据的方法
changed字段则是表示自从上次保存之后，content 字段是否有修改过。
filenamc字段是保存的文件名称。
Data类（List 4-1）代表现在的数据。
名
称
表41 类一览表
操作测试用的类
用来修改、保存数据属性的类
用米定期保存数据属性的类
表示可修改，可保存的数据的类
Balking-
说
不需要的话，就算了吧
3
L卡
---
## Page 134
calls doSave, content. = " + contentl;
public class Data ↑
import java.io.Writer;
import
import java.io.IoException;
private void doSave() throws IoException
1/若数据有修改．就保存到文件里
public synchrenized void
/1修改数据内容
public Data(String filenane,
private
private final String filename：//保存时的文件名
L.ist
private
t4-1
writer.close();
writer.write(content);
Writer writer = new Filewriter(filename);
System.out. println (Thread.currentThread() -getName ()
实际将数据保存到文件里用的方法
changed = false;
dosave();
changed = true;
content 
this.charged = trve;
this.cortent = content;
this.filename = filename;
java.io.FileWriter;
(!changed)
return;
 boolean changed;
 String content;
表示现在数据的类（Data.java）
 newContent;
I change(String newContent)
//修改后的内容还没保存的话，值为true
 String content)
/数据的内容
1
+
---
## Page 135
change 方法修改数据。之后，这个线程会“去做别的工作”（实际上是以 sleep 方法
 ChangerThread 类
暂停随机数时间模拟而己）。每·次要更改数据的时候，都会调用 save方法来保存
执行：
法。当文件的操作出现异常，抛出 java.io.IOException异常时，这个线程将会停止
数据。这是仿真“试图将刚才修改的数据反映在文件上”的操作。
SaverThread 类
注意：Data 类的 dioSave 方法、每次都会重新建立文件。当新建文件时，文件
启动后的线程会以"No.0"、"No.1"、"No.2"、………的字符串作为参数，反复调用
ChangerThread类（List 4-3）则是用来修改数据、保存文件的类。
public class SaverThread extends Thread l
在run方法中，以约1000ms（约1s）的间隔调川Data实例（data）的save方
SaverThread类（List 4-2）是用来定期要求保存数据的类。
import java.io.JcException;
List 4-2
pubiic void rur() f
public SaverThread(String name, Data data) ↑
private Jata aata;
保存功能上。实例实现自动保存功能时，必须先将文件各份保存起来。
的属性会瞬间消失，所以这个范例程序不能直接沿用到应用程序的自动
try {
this.data = data;
super(hame);
1 catch (lnterruptedExcepzion e) 
 catch (loException e) {
e.printStackTrace():
e.printstackTrace ();
while (true)
用来定期保存数据的SaverThread类（SaverThread.java）
Thread.sleep(1000);
data.save();
Balking---不需要的话，就算了吧
//休息约1秒
！！保存数据
4铺
---
## Page 136
复的号码）。因为当 content 的内容相同时，线程就会 balk住，而不会调用到 doSave方法。
与 SaverThread 共享，并启动这两个线程。
Main类
无论是哪一个线程调用的，请注意content 字段的属性都没有“重复保存”（没有重
执行范例如图 4-1 所示。有时候是 SaverThread 调用 doSave 方法，也有时候是
Main(List 4-4)中,首先会建立 Data 的实例。接着将这个实例交给ChangerThread
public class Main {
public class ChangerThread extends Thread 
import
import java.io.IOException;
List 4-4
List 4-3
public static void main(string[] args) ↑
public ChangerrhreadiString name, Data data) {
private Random random 
private Data data;
Data data = new Data("data.txt",
new SaverThread("SaverThread", data).start();
new ChangerThread ("ChangerThread", data) ,start ();
try{
this.data - data;
super (name);
java.util.Random;
catch (InterruptedException e)
catch (IoException e)[
Main 类(Main.java)
e.printstackTracei):
 e.printStackTracei); 
for （int i = O; true; i++) ↑
用来修改、
data.save(};
Thread.sleep (random.next Int (l000));
data.change ("Nc."
、保存数据的 ChangerThread 类（ChangerThread java）
new Random(l;
+i)：
"(empty)");
√
//明确地要求存档
1/模拟去做别的事
//修改数据
---
## Page 137
范例程序的顺序图，如图4-2所示。
(以下省略。CTRL+C 结束程序)
Changerrhread cails dosave.
ChangerThread calls doSave, content = No.10
SaverThread calls dosave, content = No.9
ChangerThread calls doSave, content = No.8
ChangerThread calls doSave, content =
SaverThread calls doSave, content = No.6
SaverThread calls doSave, content =
SaverThread calls doSave, content
ChangerThread calls doSave, content = No.2
SaverThread calls dosave, content = No.1
Saverrhread calls doSave, content = No.0
要离
开（balk）
社
2
图
:C hangerThread
图
4-2范例程序的顺序图
...aVE
change
change
图4-1
content = No.11
:Data