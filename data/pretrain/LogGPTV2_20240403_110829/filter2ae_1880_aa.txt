## 0x00 写在前面
最近一直在从事SAST相关的工作。在之前SAST方案调研过程中，选取了几款主流的开源项目/商业产品进行本地部署搭建测试，本文是对之前调研过程中的一些笔记进行的梳理和总结。同时，调研过程中也阅读到了非常多优秀的文章，在本文中也会进行引用，这些都是SAST宝贵的学习资料。
读者可根据本文目录，自行选择感兴趣的部分阅读。
## 0x01 SAST基础
### 1.1 SAST简介
**SAST(Static Application Security Testing)**
：静态应用程序安全测试技术，通常在编码阶段分析应用程序的源代码或二进制文件的语法、结构、过程、接口等来发现程序代码存在的安全漏洞。
目前有多款静态代码检测的开源项目，通过对几款项目的调研，可总结出目前优秀的静态代码检测工具的基本流程为：
对于一些特征较为明显的可以使用正则规则直接进行匹配，比如硬编码密码、错误的配置等，但正则的效率是个大问题。
对于 OWASP Top 10 的漏洞，通过预先梳理能造成危害的函数，并定位代码中所有出现该危害函数的地方，继而基于 **Lex(Lexical
Analyzer Generator, 词法分析生成器)** 和 **Yacc(Yet Another Compiler-Compiler,
编译器代码生成器)** 将对应源代码解析为 **AST(Abstract Syntax Tree, 抽象语法树)**
，分析危害函数的入参是否可控来判断是否存在漏洞。通过操作类的字节码返回解释器执行。
大致流程如下图所示（该流程也是目前主流静态代码检测产品的大致流程）：
### 1.2 SAST技术发展阶段
当然静态检测所对应的技术也是经过不断发展。这边推荐阅读 **@LoRexxar**
师傅写的[《从0开始聊聊自动化静态代码审计工具》](https://lorexxar.cn/2020/09/21/whiteboxaudit/#%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1)一文，文中详细介绍了静态代码检测技术的几个发展阶段：
技术发展阶段 | 代表工具 | 优点 | 缺点 | 备注  
---|---|---|---|---  
基于正则-关键字匹配的方案 | **Seay** ：高覆盖，通过简单的关键字匹配更多的目标，后续通过人工审计进行确认；- **Rips免费版**
：高可用性，通过更多的正则约束、更多的规则覆盖多种情况。 | 方案简单，实现起来难度不大 | 1\.
无法保证开发人员的开发习惯及代码编写，误报率及漏报率非常高；2. 无法保证高覆盖及高可用性； 3. 维护成本太大。 |  
基于AST(抽象语法树)的方案 | **Cobra** ：侧重甲方的静态自动化代码扫描，侧重低漏报率； **Kunlun-M**
：侧重于白帽子自用，只有准确的流才会认可，否则标记为疑似漏洞，侧重低误报率。 | 在编译处分析代码，无需关注开发人员的开发习惯（编译器是相同）。 | 1\.
无法保证完美处理所有的AST结构； 2. 基于单向流的分析方式，无法覆盖100%的场景；3.
忽略了大多数的分支、跳转、循环这类影响执行过程顺序的条件，会造成 | 常见的语义分析库：[PHP-Parser](https://github.com/nikic/PHP-Parser)、[phply](https://github.com/viraptor/phply)、[javalang](https://github.com/c2nes/javalang)、[javaparser](https://github.com/javaparser/javaparser)、[pyjsparser](https://github.com/PiotrDabkowski/pyjsparser)、[spoon](https://github.com/INRIA/spoon)  
基于IR/CFG这类统一数据结构的方案 | fortify、Checkmarx、Coverity及最新版的Rips：都使用了自己构造的语言的某一个中间部分。
| 较于AST，该方法带有控制流，只需要专注于从Source到Sink的过程即可。 |  |  
基于QL的方案 | CodeQL：可以将自动化代码分析简化约束为我们需要用怎么样的规则来找到满足某个漏洞的特征。 |
把流的每一个环节具象化，把每个节点的操作具像成状态的变化，并且储存到数据库中。这样一来，通过构造QL语言，我们就能找到满足条件的节点，并构造成流。 |  
## 0x02 静态代码检测（代码审计）工具调研
本次调研测试，对四个开源项目（两个Java，两个PHP）进行扫描，分别为[DVWA](https://github.com/digininja/DVWA)、[Mutillidae](https://github.com/webpwnized/mutillidae)、[java-sec-code](https://github.com/JoyChou93/java-sec-code)、[OWASP
Benchmark](https://github.com/OWASP/benchmark)。其中OWASP
Benchmark是OWASP组织下的一个开源项目，又叫作OWASP基准测试项目，它是免费且开放的测试套件。它可以用来评估那些自动化安全扫描工具的速度、覆盖范围和准确性，这样就可以得到这些软件的优点和缺点。OWASP
Benchmark计分器的使用可以参考下文 [0x03附录-3.1 OWASP Benchmark计分器使用]()。
### 2.1 Cobra
#### 2.1.1 介绍
一款支持检测多种开发语言中多种漏洞类型的源码审计工具：支持十多种开发语言及文件类型扫描，支持的漏洞类型有数十种。扫描方式支持命令行（通过命令行扫描本地源代码）、界面、API（供内部人员通过GUI的形式访问使用，并可以通过API集成到CI或发布系统中）三种。
对于一些特征较为明显的可以使用正则规则来直接进行匹配出，比如硬编码密码、错误的配置等。Cobra通过预先梳理能造成危害的函数，并定位代码中所有出现该危害函数的地方，继而基于Lex(Lexical
Analyzer Generator, 词法分析生成器)和Yacc(Yet Another Compiler-Compiler,
编译器代码生成器)将对应源代码解析为AST(Abstract Syntax Tree,
抽象语法树)，分析危害函数的入参是否可控来判断是否存在漏洞（目前仅接入了PHP-AST，其它语言AST接入中）。
#### 2.1.2 安装部署
    # -安装过程基于docker镜像手动安装-    
    # 1. 拉取docker镜像
    docker pull centos:centos7
    docker run -itd --name code_audit_test centos:7
    docker exec -it 容器ID bash
    # 2. docker内centos容器安装cobra
    ## 2.1 升级python2.x版本为3.x
    cd tmp/
    wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz
    tar -zxf Python-3.7.3.tgz
    yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc  libffi-devel
    yum install -y libffi-devel
    cd Python-3.7.3
    ./configure --prefix=/usr/local/python3.7
    make && make install
    ## 2.2 备份先前系统默认的python2，创建新的软链接
    mv /usr/bin/python /usr/bin/python.bak
    ln -s /usr/local/python/bin/python3.7 /usr/bin/python
    ## 2.3 更改yum配置
    vim /usr/bin/yum   #将#!/usr/bin/python改为#!/usr/bin/python2
    vim /usr/libexec/urlgrabber-ext-down   #将#!/usr/bin/python改为#!/usr/bin/python2
    # 3. Cobra安装
    yum install flex bison phantomjs
    git clone https://github.com/WhaleShark-Team/cobra.git && cd cobra
    python -m pip install -r requirements.txt
    python cobra.py --help
安装完成后，运行截图如下所示：
#### 2.1.3 扫描测试
Cobra运行扫描命令如下：
    python cobra.py -t /tmp/source_code_scan/DVWA-master -f json -o /tmp/report.json
扫描完成截图如下所示，扫描出的漏洞以（C-严重、H=高危、M-中危、L-低危）进行分类：
#### 2.1.4 扫描结果对比分析
汇总结果如下（ **误报率及漏报率仅根据官方最新版本默认配置，实际测试结果进行主观大致预估** ）：
#### 2.1.5 调研结果
本次对Cobra的调研结果如下：
**调研参数** | **调研结果** | **总结**  
---|---|---  
漏洞检测/扫描的原理 | 正则匹配+AST(语义分析，仅PHP) | **优点：** 1\. 代码逻辑及思路较清晰，便于理解及后续拓展；2.
扫描方式支持多种，特别是支持API调用，便于持续集成。  
是否支持持续集成 | 提供web接口，便于持续集成 | **缺点：** 1\. 项目目前已没在维护，规则更新停留在三年前，特别是针对组件CVE规则；2.
目前只支持PHP的语义分析（AST），其他语言都是通过正则匹配；3. 误报率/漏报率都非常高，Java更甚。  
扫描速度 | 较快 |  
数据输入方式 | 命令行模式通过-t参数指定代码工程；API模式通过请求接口指定git工程； |  
部署方式 | python脚本直接运行 |  
支持语言 |
十多种（包括PHP、Java、Python、Ruby、Go、C++等），详细参考：
|  
漏洞覆盖 |
支持十多种漏洞类型（SQL注入、XSS、命令注入、代码注入、反序列化、不安全第三方组件等等），详细参考：
|  
#### 2.1.6 参考资料
  * [Cobra官方文档](http://cobra.feei.cn/)；
  * [静态代码审计工具Cobra/Cobra-W/find-sec-bugs](https://blog.csdn.net/caiqiiqi/article/details/104158061/)；
  * [代码审计工具 Cobra 源码分析（一）](https://zhuanlan.zhihu.com/p/32363880)；
  * [代码审计工具 Cobra 源码分析（二）](https://zhuanlan.zhihu.com/p/32751099)；
### 2.2 KunLun-M(昆仑镜)
#### 2.2.1 介绍
以下内容引用自 **@LoRexxar**
师傅的[《从0开始聊聊自动化静态代码审计工具》](https://lorexxar.cn/2020/09/21/whiteboxaudit/#%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1)一文及
[KunLun-M官方Github] (
在Cobra的基础上，深度重构了AST回溯部分，将工具定位在白帽子自用上，侧重于低误报率，进行二次开发。从之前的Cobra-W到现在的KunLun-M，只有准确的流才会认可，否则将其标记为疑似漏洞，并在多个环节定制了自定义功能及记录了详细的日志。
目前的KunLun-M，作者照着phply的底层逻辑，重构了相应的语法分析逻辑。添加了Tamper的概念用于解决自实现的过滤函数。引入了python3的异步逻辑优化了扫描流程等，同时大量的剔除了正则+AST分析的逻辑，因为这个逻辑违背了流式分析的基础，然后新加了Sqlite作为数据库，添加了Console模式便于使用，同时也公开了有关javascript代码的部分规则。
KunLun-M的AST分析流程图如下所示：
#### 2.2.2 安装部署
    # -安装过程基于docker镜像手动安装-    
    # 1. 拉取docker镜像
    docker pull centos:centos7
    docker run -itd --name code_audit_test centos:7
    docker exec -it 容器ID bash
    # 将python2.7升级到python3.7
    # 系统自带的sqlite3版本过低，需要升级一下sqlite3
    wget https://www.sqlite.org/2019/sqlite-autoconf-3270200.tar.gz
    tar -zxvf sqlite-autoconf-3270200.tar.gz
    ./configure --prefix=/usr/local
    make && make install
    ## 备份原先系统版本
    mv /usr/bin/sqlite3 /usr/bin/sqlite3_old
    ## 软链接将新的sqlite3设置到/usr/bin目录下
    ln -s /usr/local/bin/sqlite3 /usr/bin/sqlite3
    ## 将路径传递给共享库
    export LD_LIBRARY_PATH="/usr/local/lib"
    source ~/.bashrc
    ## 检查python的SQLite3版本
    import sqlite3
    sqlite3.sqlite_version
    git clone https://github.com/LoRexxar/Kunlun-M
    # 安装依赖
    pip install -r requirements.txt
    # 配置文件迁移