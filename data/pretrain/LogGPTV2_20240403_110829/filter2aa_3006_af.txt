Page 35 of 35                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
In this opcode, two events occur. The first is that R0 is moved into R3. The second event 
updates the status flags using the new value in R3. As we previously mentioned, R0 and 
is updated from the wcscmp function. If the entered serial number matched the correct 
serial number, R0 will be updated with a 0. If they didn't match, R0 will be set to 1. R3 is 
then updated with this value, which is check to see if it is negative or zero.  
260112B0   mov        
r0, #1 
Move #1 into R0 
Next, the value #1 is moved into R0. While this may seem a bit odd, by moving the #1 
into R0, the program is setting the stage for the next couple lines of code. 
260112B4   movne      
r0, #0 
If flags are not equal, move #0 into R0. 
Again we see another altered mov command. In this case, the value #0 will only be 
moved into R0 if the condition flags are not equal (ne), which is based on the status 
update performed by the previous movs opcode. In other words, if the serials matched, 
R0 would have been set at 0 and the Zero flag would have been set Z=1), which means 
the movne opcode would not be executed. 
260112B8   ands       
r3, r0, 0xFF  
Like the movs opcode, the ANDS command will first execute and then update the status 
flags depending on the result. Looking at the last couple lines, we can see that R0 should 
be 1 if the serials DID NOT matched. This is because R0 was set to equal #1 a few lines 
up and was not changed by the MOVNE opcode. Therefore, the 'AND' opcode would 
result in R3 being set to the value of #1 and the condition flags would be updated to 
reflect the EQUAL status. On the other hand, if the serials did match, R0 would be equal 
to 1, which would have caused the ZERO flag to be set to 0, or NOT EQUAL. 
260112BC   ldrne     r1, [sp, #8] 
Here we see another implementation of the 'not equal' conditional opcode. In this case, if 
the ANDS opcode set the Z flag to 0, which would occur only if the string check passed, 
the ldrne opcode would load R1 with the data in SP+8. If you recall from our dissection 
of code in IDA Pro, you will should recall that address 0x0001125C  loaded the 'correct 
message' into this location of memory. However, if the condition flags are not set at 'not 
equal' or ‘not zero’, this opcode will be skipped. 
260112C0   mov       r0, r4 
Move R4 into R0 
An example of a standard straightforward move of R4 into R0.  
260112C4   mov       r3, #0 
Move #0 into R3 
Another example of a simple move of #0 to R3. 
Page 36 of 36                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
260112C8   bne       260112F4  ; 
If flag not equal jump to 0x260112F4 
Again, we see a conditional opcode. In this case, the program will branch to 0x000112F4 
if the 'not equal' flag is set. Since the conditional flags have not been updated since the 
'ANDS' opcode in address 0x000112B8, a correct serial number would result in the 
execution of this opcode. 
260112CC   ldr       r1, [sp, #4] 
Load SP+4 into R1 (incorrect message) 
If the wrong eight character serial number were entered, this line would load the 
'incorrect message' from memory into R1. 
260112D0   b         260112F4  ; 
Jump to 0x260112F4 
This line tells the program to branch to address 0x260112F4. 
... 
260112F4   bl        26011718  ; 
MessageboxW call to display message in R1 
The final line we will look at is the call to the Message Box function. This command 
simply takes the value in R1, which will either be the correct message or the incorrect 
message, and displays it in a Message Box.  
5.10 The Cracks 
Now that we have dissected the code, we need to determine how it can be altered to 
ensure that it will accept any serial number as the correct value. As we have illustrated, 
'cracking' the serial is a fairly easy task when executing the program in the MVC by 
changing the register values, memory, or condition flags during program execution. 
However, this type of manhandling is not going to help the average user who has no 
interest in reverse-engineering. As a result, a cracker will have to make permanent 
changes to the code to ensure the serial validation will ALWAYS validate the entered 
serial. 
To do this, the cracker has to find a weak point in the code that can be changed to bypass 
security checks. Fortunately, for the cracker, there is typically more than one method by 
which a program can be cracked. To illustrate, we will demonstrate three distinct ways 
that serial.exe can be cracked using various cracking techniques. 
5.10.1 Crack 1: Slight of Hand 
The first method we will discuss requires three separate changes to the code. The first 
change is at address 00011294 where R0 is compared to the #8. If you recall, this is used 
to ensure that the user provided serial number is exactly eight characters long. The 
comparison then updates the condition flags, which are used in the next couple lines to 
determine the flow of the program.  
To ensure that the flags are set at 'equal', we will need to alter the compared values. The 
Page 37 of 37                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
easiest way to do this is to have the program compare two equal values (i.e. CMP R0, 
R0). This will ensure the comparison returns as 'equal', thus tricking the program into 
passing over the BLT and BGT opcodes in the next two lines. 
The next change is at address 0x000112B4, where we find a movne r0, #0 command. As 
we previously discussed, this command checks the flag conditions and if they are set at 
'not equal', the opcode moves the value #0 into R0. The R0 value checked when it is 
moved into R3, which updates the status flags once again.  
Since the movs command at address 00112AC will set Z=0 (unless the correct serial is 
entered), the movne opcode will execute, thus triggering a chain of events that will result 
in a failed validation. To correct this, we will need to ensure the program thinks R0 is 
always equal to ‘1’ at line 000112B8 (ands r3, r0, #0xFF). Since R0 would have been 
changed to #1 in address 000112B0 (mov r0, #1), the ands opcode would result in a 'not 
equal' for a correct serial.  
In other words, we need to change movne r0, #0 to movne r0, #1 to ensure that R0 AND 
FF outputs ‘1’, which is then used to update the status flags. By doing this, the program 
will be tricked into validating the incorrect serial. 
Changes: 
.text:00011294                 CMP     R0, #8 -> CMP R0, R0 
.text:000112B4                 MOVNE   R0, #0 -> MOVNE R0,#1 
Determining the changes is the first step to cracking a program. The second step is to 
actually alter the file. To do this, a cracker uses a hex editor to make changes to the actual 
.exe file. However, in order to do this, the cracker must know where in the program file 
they need to make changes. Fortunately, if they are using IDA Pro, a cracker only has to 
click on the line they want to edit and look at the status bar at the bottom of IDA's 
window. As figure 13 illustrate, IDA clearly informs its user what memory address the 
currently selected line is located at in a the program, which can be then used in hex 
editor.  
Figure 13: Viewing location of 0x00011294 for use in hex editor. 
Once we know the addresses where we want to make our changes, we will need to 
determine the values that we will want to update the original hex code with. Fortunately, 
there are several reference guides online that can help with this. In our case, we will want 
to make the following changes to the serial.exe file. 
IDA Addr 
Hex Addr 
Orig Opcode Org Hex 
New Opcode New Hex 
0x11294 
0x694 
Cmp r0, #8 
08 00 50 E3 
Cmp r0, r0 
00 00 50 E1 
0x112B4 
0x6B4 
Monve r0, #0 00 00 A0 13 Movne r0, #1 01 00 A0 13 
Page 38 of 38                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
To make the changes, perform the following procedures (using UltraEdit). 
1.Open UltraEdit and then open your local serial.exe file in UltraEdit. 
2.Using the left most column, locate the desired hex address. 
Note: You will not always be able to find the exact address in the hex editor. You will 
need to count the character pairs from left to right to find the exact location once you 
located the correct line.  
3.Move to the hex code that needs changed, and over write it. 
4.Save the file as a new file, in case you made a mistake. 
5.10.2 Crack 2: The Slide 
The next illustration uses some of the same tactics as Crack1, but also introduces a new 
method of bypassing the eight-character validation, known as NOP.  
The term NOP is a reference to a Non-OPeration, which means the code is basically null. 
Many crackers and hackers are familiar with the term NOP due to its prevalence in buffer 
overflow attacks. While this is outside the scope of this paper, a NOP sled (as it is often 
called) is used to make a part of program do absolutely nothing. The same NOP sled can 
be used when bypassing a security check in a program. 
In our program, we have a cmp opcode that compares the length of the entered serial with 
the number eight. This results in a status change of the condition flags, which are used by 
the next two lines to determine if they are executed. While our previous crack bypassed 
this by ensuring the flags were set at 'equal', we can attack the BLT and BGT opcodes by 
overwriting them with a NOP opcode. Once we do this, the BLT and BGT opcodes will 
no longer exist.  
NOTE: Typical NOP code is done using a series of 0x90’s. This will NOT work on an 
ARM processor and will result in the following opcode: UMULLLSS R9, R0, R0, R0. 
This opcode performs an unsigned multiply long if the LS condition is met, and then 
updates the status flags accordingly. It is not a NOP. 
To perform a NOP on an ARM processor, you simply replace the target code with a 
MOV R1, R1 operation. This will move the value R1 into R1 and will not update the 
status flags. In other words, you are killing processor time. 
The following code illustrates the NOPing of these opcodes. 
.text:00011298                 BLT     loc_112E4 -> MOV R1, R1 
.text:0001129C                 BGT     loc_112E4 ->  MOV R1, R1 
The second part of this crack was already explained in Crack1, and only requires the 
alteration of the MOVNE opcode as the following portraits.  
Page 39 of 39                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
.text:000112B4                 MOVNE   R0, #0 -> MOVNE R0,#1 
The following describes the changes you will have to make in your hex editor. 
IDA Addr Hex Addr Orig Opcode 
Org Hex 
New Opcode 
New Hex 
0x11298 
0x698 
BLT loc_112E4 11 00 00 BA MOV R1, R1 
01 10 A0 E3 
0x1129C  0x69C 
BLT loc_112E4 10 00 00 CA MOV R1, R1 
01 10 A0 E3 
0x112B4 
0x6B4 
Monve r0, #0 
00 00 A0 13 MOVNE r0, #1 
01 00 A0 13 
5.10.3 Crack3: Preventative Maintenance 
At this point you are probably wondering what the point is for another example when you 
have two that work just fine. However, we have saved the best example for last because 
crack3 does not attack or overwrite any checks or validation opcodes like our previous 
two examples. Instead, we demonstrate how to alter the registers to our benefit before any 
values are compared. 
If you examine the opcode at 0x00001128C using the MVC, you will see that it sets R1 
to the address of the serial that you entered. The length of the serial is then loaded into R0 
in the next line using R1 as the input variable. If the value pointed to by the address in R1 
is eight characters long, it is then bumped up against the correct serial number in the 
wcscmp function. Knowing all this, we can see that the value loaded into R1 is a key 
piece of data. So, what if we could change the value in R1 to something more agreeable 
to the program, such as the correct serial? 
While this is possible by using the SP to guide us, the groundwork has already been done 
in 0x0000112A0 where the correct value is loaded into R0. Logic assumes that if it can 
be loaded into R0 using the provided ldr command, then we can use the same command 
to load the correct serial into R1. This would in effect trick our validation algorithm to 
compare the correct serial with itself, which would always result in a successful match! 
The details of the required changes are as follows. 
IDA Addr Hex Addr 
Orig Opcode Org Hex 
New Opcode 
New Hex 
0x11298 
0x68C 
LDR R1, [R4, 
#0x7C]  
7C 10 94 E5 LDR R1, 
[SP,#0xC] 
0C 10 9D E5 
Note that this crack only requires the changing of two hex characters (i.e. 7->0 & 4->D). 
By far this example is the most elegant and fool proof, which is why we saved it for last. 
While the other two examples are just as effective, they are a reactive type of crack that 
attempts to fix a problem. This crack, on the hand, is a preventative crack that corrects 
 the problem before it becomes one. 
6 Summary 
Page 40 of 40                                 © 2003 Airscanner™ 
Corp. http://www.Airscanner.com 
This short example of how crackers bypass protection schemes should illustrate quite 
clearly the problems that programmers have to consider when developing applications. 
While many programmers attempt to include complex serial validation schemes, many of 
these eventually end up as a simple wcscmp call that can easily be 'corrected' by a 
cracker. In fact, the wcscmp weakness is so common that it has been called 'the weakest 
link' by one ARM hacker, in a nice paper available at www.Ka0s.net, which contains 
more than enough information to bring a complete newbie up to speed on pocket pc 
application reverse-engineering.  
In closing, the subject of ARM reverse-engineering is somewhat new. While much has 
been done in the way of Linux ARM debugging, the Pocket PC OS is relatively new 
when compared to Intel based debugging. Ironically, the ARM processor is considered 
easier to debug. So, get your tools together and dig in! 
References 
•www.ka0s.net 
•www.dataworm.net 
•http://www.eecs.umich.edu/speech/docs/arm/ARM7TDMIvE.pdf 
•http://www.ra.informatik.uni-
stuttgart.de/~ghermanv/Lehre/SOC02/ARM_Presentation.pdf 
•class.et.byu.edu/eet441/notes/arminst.ppt  
•http://www.ngine.de/gbadoc/armref.pdf 
•http://wheelie.tees.ac.uk/users/a.clements/ARMinfo/ARMnote.htm 
•http://www3.mb.sympatico.ca/~reimann/andrew/asm/armref.pdf 
•www.arm.com 
•www.airscanner.com