### Vulnerability Assessment and Detection in Android Apps

#### Static Analysis

If no vulnerabilities are found, we conclude that the app is free from this specific vulnerability. Our process involves collecting all classes that inherit from `WebViewClient` and checking each one to determine if they have overridden the `onReceivedSslError` method. This method is called by a system callback when an HTTPS certificate verification failure occurs. Overriding this method with weak or permissive logic can allow the app to trust illegal pages.

Based on our research, most apps choose to trust all certificates, while some use simple methods to handle the error, and others choose to abort the page. We identified three common operations that apps perform in the `onReceivedSslError` method:

1. **Trust All Certificates**: The app trusts all certificates and returns a proceed signal. This is vulnerable if it is reachable.
2. **Reject and Return Cancel Signal**: The app rejects the certificate and returns a cancel signal. This is not vulnerable.
3. **Self-Verification of Certificates**: The app verifies the certificate itself. Some apps check hostnames, some use complex algorithms, and some even show a dialog for the user to make a choice. Static analysis alone cannot determine if the app is vulnerable in this case, so further dynamic analysis is required.

#### Building the Method Call Graph (MCG)

We encountered some apps with unreachable code, often used for testing. To ensure that the overridden `onReceivedSslError` method is reachable, we build a Method Call Graph (MCG). The MCG is a directed graph representing the calling relationships among methods. Each node in the MCG represents a method, and an edge from Method A to Method B indicates that Method A can call Method B directly.

We use a conservative approach to handle virtual methods and interfaces, maintaining a class hierarchy during the analysis and considering all possible assignable classes when ambiguous references occur. Here is the algorithm for building the MCG:

```python
def BuildACG(MCG, AndroidManifest):
    InitACGNodes(ACG, AndroidManifest)
    ms = getParents(MCG, "startActivity()") + getParents(MCG, "startActivityForResult()")
    for method in ms:
        Eactivity = getTargetActivity(method)
        IDs = FindMethodCallerViewId(MCG, method, [])
        for viewid in IDs:
            Sactivity = findActivityByViewID(viewid)
            ACG.add_edge(Sactivity, Eactivity, viewid)
    return ACG

def FindMethodCallerViewId(MCG, method, IDs):
    if isViewEventMethod(method):
        IDs.extend(FindViewId(method, MCG))
    else:
        ms = getParents(method, MCG)
        for tmethod in ms:
            FindMethodCallerViewId(MCG, tmethod, IDs)
    return IDs
```

Our system builds the MCG based on prior knowledge. For example, although `Thread.start` and `Thread.run` do not have a direct relationship in user space, we know that `Thread.start` will invoke `Thread.run`. Therefore, we add these edges in advance.

#### Locating Target Activities

Native Android app UI consists of several activities, some of which embed WebViews. The system callbacks call methods in classes that inherit from `WebViewClient`, which we define as self-defined-`WebViewClient`. To ensure that `onReceivedSslError` is reachable, we find the activity whose WebView uses a vulnerable self-defined-`WebViewClient`.

Once a vulnerable self-defined-`WebViewClient` is found, we backtrace through the MCG to find the Activity that sets the `WebViewClient`. Backtracing stops at system callback methods (`Activity.onCreate` and `View.onClick`) because there are no apparent methods invoking these. These entry methods help determine the target Activity. If the entry methods are system callbacks of an Activity, that Activity is the target. If the entry methods are system callbacks of a view, the Activity owning the view is the target. Only activities declared in `AndroidManifest.xml` can be presented, so we remove undeclared activities from the target set.

#### Building the Activity Call Graph (ACG)

With the target activities identified, our goal is to jump from the launcher Activity to each target Activity and trigger the vulnerability. We use the following algorithm to build the ACG:

```python
def BuildACG(MCG, AndroidManifest):
    InitACGNodes(ACG, AndroidManifest)
    ms = getParents(MCG, "startActivity()") + getParents(MCG, "startActivityForResult()")
    for method in ms:
        Eactivity = getTargetActivity(method)
        IDs = FindMethodCallerViewId(MCG, method, [])
        for viewid in IDs:
            Sactivity = findActivityByViewID(viewid)
            ACG.add_edge(Sactivity, Eactivity, viewid)
    return ACG

def FindMethodCallerViewId(MCG, method, IDs):
    if isViewEventMethod(method):
        IDs.extend(FindViewId(method, MCG))
    else:
        ms = getParents(method, MCG)
        for tmethod in ms:
            FindMethodCallerViewId(MCG, tmethod, IDs)
    return IDs
```

Each node in the ACG represents an Activity declared in `AndroidManifest.xml`. Edges represent View IDs whose event methods trigger jumps between Activities. We backtrace the parameters of `startActivity` and `startActivityForResult` to find the target Activity and the View ID. For explicit intents, we track the Activity name; for implicit intents, we scan `AndroidManifest.xml` to build the correspondence between Actions and Activities.

#### Dynamic Analysis Module

This module is the core of our system, automatically running each app on an emulator to check if it shows an illegal page. We use the following algorithm to drive the UI to the target activity:

```python
def UIDrive(ACG, target_activities):
    for act in target_activities:
        start_target_APP()
        tACG = copy(ACG)
        ca = getCurrentActivity()
        while ca is from target_APP and ca is not act:
            ViewID = FindNextEdge(tACG, ca, act)
            if ViewID is not None:
                perform(ViewID)
            else:
                perform(return)
            WaitForJumpOrTimeOut()
            ca = getCurrentActivity()
        if ca is act:
            TryToOpenHTTPSWebPage()
        stop_target_APP()

def FindNextEdge(ACG, ca, ta):
    path = findPath(ACG, ca, ta)
    if path is None:
        return None
    else:
        edg = first_edge_of_path(path)
        ACG.remove_edge(edg)
        return edg
```

#### Dynamic Test Environment

To improve efficiency, we use multiple emulators. The dynamic test environment should:

- Understand UI states (e.g., current Activity, View positions, and IDs).
- Get UI objects (e.g., buttons).
- Perform actions (e.g., clicking buttons).
- Get return values (e.g., success of a click action).

We modified the Android system tool instrumentation to bypass signature verification, allowing us to test other apps with our own test script app without re-signing the target app. Our general test script app is configured using information from static analysis. The configuration file is generated automatically, and the app is installed and tested according to the script.

After installation, our system drives the app to the target Activities and triggers the vulnerability by simulating human operations. This process is divided into two parts: driving the native Android UI to the target Activity and driving the WebView to load an HTTPS web page.

#### Results

**Static Analysis:**
- Potential Vulnerable Apps: 1360
- Free from Vulnerability: 12203
- Decompilation Failure: 257
- Total Apps: 13820

**Dynamic Analysis:**
- Confirmed Vulnerabilities: 645
- Vulnerability Free: 715
- Potential Vulnerable Apps: 1360

**Top 3 Categories of Vulnerable Activities:**
- Payment: 209 (25.0%)
- Authenticate: 280 (33.5%)
- Login & Register: 73 (8.7%)

By combining static and dynamic analysis, we can effectively identify and confirm vulnerabilities in Android apps.