vides much weaker protections against message forgery and tampering.
You should therefore prefer using the variants with a 128-bit authentication tag unless
you have other measures in place to prevent message forgery, such as strong network
protections, and you know that you need to reduce network overheads. You should
apply strict rate-limiting to API endpoints where there is a risk of brute force attacks
against authentication tags; see chapter 3 for details on how to apply rate-limiting.
Pop quiz
1
Which SSLEngine handshake status indicates that a message needs to be sent
across the network?
a
NEED_TASK
b
NEED_WRAP
c
NEED_UNWRAP
d
NEED_UNWRAP_AGAIN
458
CHAPTER 12
Securing IoT communications
12.2
Pre-shared keys
In some particularly constrained environments, devices may not be capable of carry-
ing out the public key cryptography required for a TLS handshake. For example, tight
constraints on available memory and code size may make it hard to support public key
signature or key-agreement algorithms. In these environments, you can still use TLS
(or DTLS) by using cipher suites based on pre-shared keys (PSK) instead of certificates
for authentication. PSK cipher suites can result in a dramatic reduction in the amount
of code needed to implement TLS, as shown in figure 12.5, because the certificate pars-
ing and validation code, along with the signatures and public key exchange modes can
all be eliminated.
DEFINITION
A pre-shared key (PSK) is a symmetric key that is directly shared
with the client and server ahead of time. A PSK can be used to avoid the over-
heads of public key cryptography on constrained devices.
In TLS 1.2 and DTLS 1.2, a PSK can be used by specifying dedicated PSK cipher suites
such as TLS_PSK_WITH_AES_128_CCM. In TLS 1.3 and the upcoming DTLS 1.3, use of a
PSK is negotiated using an extension that the client sends in the initial ClientHello
message. Once a PSK cipher suite has been selected, the server and client derive ses-
sion keys from the PSK and random values that they each contribute during the hand-
shake, ensuring that unique keys are still used for every session. The session key is
used to compute a HMAC tag over all of the handshake messages, providing authenti-
cation of the session: only somebody with access to the PSK could derive the same
HMAC key and compute the correct authentication tag. 
CAUTION
Although unique session keys are generated for each session, the
basic PSK cipher suites lack forward secrecy: an attacker that compromises
the PSK can easily derive the session keys for every previous session if they
captured the handshake messages. Section 12.2.4 discusses PSK cipher suites
with forward secrecy.
Because PSK is based on symmetric cryptography, with the client and server both
using the same key, it provides mutual authentication of both parties. Unlike client
(continued)
2
Which one of the following is an increased risk when using AES-GCM cipher
suites for IoT applications compared to other modes?
a
A breakthrough attack on AES
b
Nonce reuse leading to a loss of security
c
Overly large ciphertexts causing packet fragmentation
d
Decryption is too expensive for constrained devices
The answers are at the end of the chapter.
459
Pre-shared keys
certificate authentication, however, there is no name associated with the client apart
from an opaque identifier for the PSK, so a server must maintain a mapping between
PSKs and the associated client or rely on another method for authenticating the cli-
ent’s identity.
WARNING
Although TLS allows the PSK to be any length, you should only
use a PSK that is cryptographically strong, such as a 128-bit value from a
secure random number generator. PSK cipher suites are not suitable for use
with passwords because an attacker can perform an offline dictionary or
brute-force attack after seeing one PSK handshake.
Signature algorithms
RSA
DSA
ECDSA
Key exchange algorithms
PSK
RSA
Static ECDH
DHE
ECDHE
Elliptic curves
secp256r1
secp384r1
Ciphers
AES-CCM
AES-GCM
ChaCha20-
Poly1305
MACs
HMAC-
SHA-256
HMAC-
SHA-384
X.509 certiﬁcate
parsing
X.509 certiﬁcate
validation
Revocation checking
OCSP
CRL
Only a single simple key exchange algorithm is required.
Unsuitable cipher algorithms can be
dropped in favor of low-footprint choices
such as AES-CCM or ChaCha20-Poly 305.
1
HMAC is still required for key derivation
and authentication.
All the complex and error-prone
certiﬁcate parsing and validation
code can be removed.
Figure 12.5
Use of pre-shared key (PSK) cipher suites allows implementations to remove a 
lot of complex code from a TLS implementation. Signature algorithms are no longer needed 
at all and can be removed, as can most key exchange algorithms. The complex X.509 
certificate parsing and validation logic can be deleted too, leaving only the basic symmetric 
cryptography primitives.
460
CHAPTER 12
Securing IoT communications
12.2.1 Implementing a PSK server
Listing 12.8 shows how to load a PSK from a keystore. For this example, you can load
the existing HMAC key that you created in chapter 6, but it is good practice to use dis-
tinct keys for different uses within an application even if they happen to use the same
algorithm. A PSK is just a random array of bytes, so you can call the getEncoded()
method to get the raw bytes from the Key object. Create a new file named Psk-
Server.java under src/main/java/com/manning/apisecurityinaction and copy in the
contents of the listing. You’ll flesh out the rest of the server in a moment.
package com.manning.apisecurityinaction;
import static java.nio.charset.StandardCharsets.UTF_8;
import java.io.FileInputStream;
import java.net.*;
import java.security.*;
import org.bouncycastle.tls.*;
import org.bouncycastle.tls.crypto.impl.bc.BcTlsCrypto;
public class PskServer {
    static byte[] loadPsk(char[] password) throws Exception {
        var keyStore = KeyStore.getInstance("PKCS12");                   
        keyStore.load(new FileInputStream("keystore.p12"), password);    
        return keyStore.getKey("hmac-key", password).getEncoded();       
    }
}
Listing 12.9 shows a basic DTLS server with pre-shared keys written using the Bouncy
Castle API. The following steps are used to initialize the server and perform a PSK
handshake with the client:
 First load the PSK from the keystore. 
 Then you need to initialize a PSKTlsServer object, which requires two argu-
ments: a BcTlsCrypto object and a TlsPSKIdentityManager, that is used to look
up the PSK for a given client. You’ll come back to the identity manager shortly. 
 The PSKTlsServer class only advertises support for normal TLS by default,
although it supports DTLS just fine. Override the getSupportedVersions()
method to ensure that DTLS 1.2 support is enabled; otherwise, the hand-
shake will fail. The supported protocol versions are communicated during the
handshake and some clients may fail if there are both TLS and DTLS versions
in the list.
 Just like the DtlsDatagramChannel you used before, Bouncy Castle requires
the UDP socket to be connected before the DTLS handshake occurs. Because
the server doesn’t know where the client is located, you can wait until a packet
is received from any client and then call connect() with the socket address of
the client.
Listing 12.8
Loading a PSK
Load the
keystore.
Load the key and
extract the raw bytes.
461
Pre-shared keys
 Create a DTLSServerProtocol and UDPTransport objects, and then call the
accept method on the protocol object to perform the DTLS handshake. This
returns a DTLSTransport object that you can then use to send and receive
encrypted and authenticated packets with the client.
TIP
Although the Bouncy Castle API is straightforward when using PSKs, I
find it cumbersome and hard to debug if you want to use certificate authenti-
cation, and I prefer the SSLEngine API.
public static void main(String[] args) throws Exception {
    var psk = loadPsk(args[0].toCharArray());               
    var crypto = new BcTlsCrypto(new SecureRandom());
    var server = new PSKTlsServer(crypto, getIdentityManager(psk)) {   
        @Override                                                      
        protected ProtocolVersion[] getSupportedVersions() {           
            return ProtocolVersion.DTLSv12.only();                     
        }                                                              
    };                                                                 
    var buffer = new byte[2048];
    var serverSocket = new DatagramSocket(54321);
    var packet = new DatagramPacket(buffer, buffer.length);
    serverSocket.receive(packet);                            
    serverSocket.connect(packet.getSocketAddress());         
    var protocol = new DTLSServerProtocol();                 
    var transport = new UDPTransport(serverSocket, 1500);    
    var dtls = protocol.accept(server, transport);           
    while (true) {                                               
        var len = dtls.receive(buffer, 0, buffer.length, 60000); 
        if (len == -1) break;                                    
        var data = new String(buffer, 0, len, UTF_8);            
        System.out.println("Received: " + data);                 
    }                                                            
}
The missing part of the puzzle is the PSK identity manager, which is responsible for
determining which PSK to use with each client. Listing 12.10 shows a very simple
implementation of this interface for the example, which returns the same PSK for
every client. The client sends an identifier as part of the PSK handshake, so a more
sophisticated implementation could look up different PSKs for each client. The server
can also provide a hint to help the client determine which PSK it should use, in case it
has multiple PSKs. You can leave this null here, which instructs the server not to send
a hint. Open the PskServer.java file and add the method from listing 12.10 to com-
plete the server implementation.
TIP
A scalable solution would be for the server to generate distinct PSKs for
each client from a master key using HKDF, as discussed in chapter 11.
Listing 12.9
DTLS PSK server
Load the PSK from 
the keystore.
Create a new
PSKTlsServer
and override
the supported
versions to
allow DTLS.
BouncyCastle 
requires the socket 
to be connected 
before the 
handshake.
Create a DTLS 
protocol and 
perform the 
handshake using 
the PSK.
Receive
messages from
the client
and print
them out.
462
CHAPTER 12
Securing IoT communications
static TlsPSKIdentityManager getIdentityManager(byte[] psk) {
    return new TlsPSKIdentityManager() {
        @Override
        public byte[] getHint() {      
            return null;               
        }                              
        @Override
        public byte[] getPSK(byte[] identity) {   
            return psk;                           
        }                                         
    };
}
12.2.2 The PSK client
The PSK client is very similar to the server, as shown in listing 12.11. As before, you
create a new BcTlsCrypto object and use that to initialize a PSKTlsClient object. In
this case, you pass in the PSK and an identifier for it. If you don’t have a good identi-
fier for your PSK already, then a secure hash of the PSK works well. You can use the
Crypto.hash() method from the Salty Coffee library from chapter 6, which uses
SHA-512. As for the server, you need to override the getSupportedVersions()
method to ensure DTLS support is enabled. You can then connect to the server and
perform the DTLS handshake using the DTLSClientProtocol object. The connect()
method returns a DTLSTransport object that you can then use to send and receive
encrypted packets with the server.
 Create a new file named PskClient.java alongside the server class and type in the
contents of the listing to create the server. If your editor doesn’t automatically add
them, you’ll need to add the following imports to the top of the file:
import static java.nio.charset.StandardCharsets.UTF_8;
import java.io.FileInputStream;
import java.net.*;
import java.security.*;
import org.bouncycastle.tls.*;
import org.bouncycastle.tls.crypto.impl.bc.BcTlsCrypto;
package com.manning.apisecurityinaction;
public class PskClient {
    public static void main(String[] args) throws Exception {
        var psk = PskServer.loadPsk(args[0].toCharArray());     
        var pskId = Crypto.hash(psk);                           
        var crypto = new BcTlsCrypto(new SecureRandom());      
        var client = new PSKTlsClient(crypto, pskId, psk) {    
            @Override
Listing 12.10
The PSK identity manager
Listing 12.11
The PSK client
Leave the PSK 
hint unspecified.
Return the same 
PSK for all clients.
Load the PSK 
and generate 
an ID for it.
Create a 
PSKTlsClient 
with the PSK.
463
Pre-shared keys
            protected ProtocolVersion[] getSupportedVersions() {   
                return ProtocolVersion.DTLSv12.only();             
            }                                                      
        };
        var address = InetAddress.getByName("localhost");
        var socket = new DatagramSocket();
        socket.connect(address, 54321);                    
        socket.send(new DatagramPacket(new byte[0], 0));   
        var transport = new UDPTransport(socket, 1500);     
        var protocol = new DTLSClientProtocol();            
        var dtls = protocol.connect(client, transport);     
        try (var in = Files.newBufferedReader(Paths.get("test.txt"))) {
            String line;
            while ((line = in.readLine()) != null) {
                System.out.println("Sending: " + line);
                var buf = line.getBytes(UTF_8);
                dtls.send(buf, 0, buf.length);    
            }
        }
    }
}
You can now test out the handshake by running the server and client in separate ter-
minal windows. Open two terminals and change to the root directory of the project in
both. Then run the following in the first one:
mvn clean compile exec:java \
 -Dexec.mainClass=com.manning.apisecurityinaction.PskServer \
 -Dexec.args=changeit       
This will compile and run the server class. If you’ve changed the keystore password,
then supply the correct value on the command line. Open the second terminal win-
dow and run the client too:
mvn exec:java \
 -Dexec.mainClass=com.manning.apisecurityinaction.PskClient \
 -Dexec.args=changeit
After the compilation has finished, you’ll see the client sending the lines of text to the
server and the server receiving them.
NOTE
As in previous examples, this sample code makes no attempt to handle
lost packets after the handshake has completed.
12.2.3 Supporting raw PSK cipher suites
By default, Bouncy Castle follows the recommendations from the IETF and only
enables PSK cipher suites combined with ephemeral Diffie-Hellman key agreement to
provide forward secrecy. These cipher suites are discussed in section 12.1.4. Although
Override the
supported
versions to
ensure DTLS
support.
Connect to the 
server and send 
a dummy packet 
to start the 
handshake.
Create the
DTLSClientProtocol
instance and
perform
the handshake
over UDP.
Send encrypted packets 
using the returned 
DTLSTransport object.
Specify the keystore 
password as an argument.
464
CHAPTER 12
Securing IoT communications
these are more secure than the raw PSK cipher suites, they are not suitable for very
constrained devices that can’t perform public key cryptography. To enable the raw
PSK cipher suites, you have to override the getSupportedCipherSuites() method in
both the client and the server. Listing 12.12 shows how to override this method for the
server, in this case providing support for just a single PSK cipher suite using AES-CCM
to force its use. An identical change can be made to the PSKTlsClient object.
var server = new PSKTlsServer(crypto, getIdentityManager(psk)) {
    @Override
    protected ProtocolVersion[] getSupportedVersions() {
        return ProtocolVersion.DTLSv12.only();
    }
    @Override
    protected int[] getSupportedCipherSuites() {      
        return new int[] {                            
               CipherSuite.TLS_PSK_WITH_AES_128_CCM   
        };                                            
    }                                                 
};
Bouncy Castle supports a wide range of raw PSK cipher suites in DTLS 1.2, shown in
table 12.2. Most of these also have equivalents in TLS 1.3. I haven’t listed the older