√︁
(𝑟 − 1)/𝑗
𝑥𝑑𝑥 = 16𝑗
= 8𝑗
≤ 8𝑗
𝑗𝑛
2𝑛 − 𝑗
𝑗𝑛
2𝑛 − 𝑗
√
2𝑛 − 𝑗
𝑟=1
·
𝑗𝑛
√
3 · (2𝑛 − 𝑗) ≤√︀𝑗𝑛 − 𝑗
⃒⃒⃒𝐵1 + ··· + 𝐵𝑗 − 𝑗2/2𝑛+1⃒⃒⃒ ≤⃒⃒⃒𝐵1 + ··· + 𝐵𝑗 − 𝑗(𝑗 − 1)/2𝑛+1⃒⃒⃒ + 𝑗
2𝑛 = 4√︀𝑗𝑛 .
≤ 3√︀𝑗𝑛 +√︀𝑗𝑛 − 𝑗
2𝑛 + 𝑗
0
2𝑛
33
8√︀(𝑟 − 1)𝑛
2𝑛 − 𝑗
𝑗∑︁
𝑟=1
.
(12)
2𝑛+1 ,
(13)
where the last inequality is due to the fact that 𝑛 ≥ 8 and 𝑗 ≤ 2𝑛
128. From Eq. (12) and Eq. (13),
procedure Initialize//Games 𝐺1, 𝐺2
𝐾1, 𝐾2,··· ←$ 𝒦; 𝐽1, 𝐽2,··· ← 0
𝑓1, 𝑓2,··· ←$ Func(𝒩 ,{0, 1}𝑘 × {0, 1}ℓ)
procedure Enc.init(𝑖, 𝑁)
𝐽𝑖 ← 𝐽𝑖 + 1; 𝑗 ← 𝐽𝑖
(𝐿, 𝑃 ) ← KD(𝐾𝑖, 𝑁) //For game 𝐺1 only
(𝐿, 𝑃 ) ← 𝑓𝑖(𝑁) //For game 𝐺2 only
𝑆𝑖,𝑗 ← (𝐿, 𝑃, 𝑁, 1); return 𝐽𝑖
procedure Enc.next(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐿, 𝑃, 𝑁, 𝑟) ← 𝑆𝑖,𝑗; 𝐶 ← E𝐿(⟨𝑃, 𝑟, 0⟩, 𝐴, 𝑀)
𝑆𝑖,𝑗 ← (𝐿, 𝑃, 𝑁, 𝑟 + 1); return 𝐶
procedure Enc.last(𝑖, 𝑗, 𝐴, 𝑀)
if 𝑆𝑖,𝑗 = ⊥ then return ⊥
(𝐿, 𝑃, 𝑁, 𝑟) ← 𝑆𝑖,𝑗
𝐶 ← E𝐿(⟨𝑃, 𝑟, 1⟩, 𝐴, 𝑀); 𝑆𝑖,𝑗 ← ⊥
return 𝐶
procedure Dec(𝑖, 𝑁, 𝐴, 𝐶, 𝑎)
if |𝐴| ̸= |𝐶| then return false
𝑚 ← |𝐶|
(𝐿, 𝑃 ) ← KD(𝐾𝑖, 𝑁) //For game 𝐺1 only
(𝐿, 𝑃 ) ← 𝑓𝑖(𝑁) //For game 𝐺2 only
for 𝑟 ← 1 to |ℐ| do
return true
procedure Finalize(𝑏′)
return (𝑏′ = 1)
𝑗 ← ℐ[𝑟]; if 𝑗 > 𝑚 or 𝑗  𝑚 or 𝑗 < 1 then return false
if (𝑎 = 0 or 𝑗 < 𝑚) then
elsif Look(𝑖, 𝑁,⟨𝑃, 𝑚, 1⟩, 𝐴[𝑚], 𝐶[𝑚]) = false then return false
if Look(𝑖, 𝑁,⟨𝑃, 𝑗, 0⟩, 𝐴[𝑗], 𝐶[𝑗]) = false then return false
procedure Dec(𝑖, 𝑁, 𝐴, 𝐶, 𝑎)
if |𝐴| ̸= |𝐶| then return false
𝑚 ← |𝐶|; (𝐿, 𝑃 ) ← 𝑓𝑖(𝑁)
for 𝑟 ← 1 to |ℐ| do
return true
private procedure Look(𝑖, 𝑁, 𝑁*, 𝐴, 𝐶)
if Tab[𝑖, 𝑁, 𝑁*, 𝐴, 𝐶] ̸= ⊥ then return true
(𝐿, 𝑃 ) ← 𝑓𝑖(𝑁); 𝑀 ← D𝐿(𝑁*, 𝐴, 𝐶)
𝑀 ← ⊥ //For game 𝐺4 only
return (𝑀 ̸= ⊥)
procedure Finalize(𝑏′)
return (𝑏′ = 1)
Fig. 18: Games 𝐺3 and 𝐺4 in the proof of Theorem 3. Each game maintains an internal
procedure Look.
As a result, any Dec query will result in a false-answer. Hence game 𝐺4 coincides with game
SE2[KD,𝛱](𝒜) of challenge bit 𝑏 = 0, and thus
Gnoae2
Advnoae2
SE2[KD,𝛱](𝒜) = Pr[𝐺1(𝒜)] − Pr[𝐺4(𝒜)] .
We now bound the gap between each pair of consecutive games. Consider the following adversary ℬ′
attacking the (muti-user) PRF security of KD. It runs 𝒜 and simulates game 𝐺1, but for each call
to KD(𝐾𝑖,·), it instead uses its oracle Eval(𝑖,·). Thus
Pr[𝐺1(𝒜)] − Pr[𝐺2(𝒜)] = Advprf
KD(ℬ′) .
Next, in game 𝐺3, for each table look-up Look(𝑖, 𝑁, 𝑁*, 𝐴, 𝑀) with 𝑁* = ⟨𝑃, 𝑗, 𝑎⟩, the triple
(𝑖, 𝑁, 𝑁*) uniquely determines the user 𝑖, nonce 𝑁, and counter 𝑗. Thus the table look-ups do not
return false positives. Thanks to the correctness of the conventional AE scheme 𝛱,
Pr[𝐺2(𝒜)] = Pr[𝐺3(𝒜)] .
Finally, consider the following adversary ℬ attacking 𝛱. It runs 𝒜 and simulates game 𝐺3, but with
the following differences. First, instead of eagerly sampling a function 𝑓𝑖 for each user 𝑖, adversary ℬ
lazily implements 𝑓𝑖. That is, each time it has to evaluate 𝑓𝑖(𝑁), if this is the first time it has to do
this evaluation, it picks 𝐿 ←$ {0, 1}𝑘 and 𝑃 ←$ {0, 1}ℓ, stores the triple (⟨𝑖, 𝑁⟩, 𝐿, 𝑃), and returns
(𝐿, 𝑃) as the answer, where ⟨𝑖, 𝑁⟩ is a unique encoding of (𝑖, 𝑁) as an integer. Otherwise, if there
is already some pair (⟨𝑖, 𝑁⟩, 𝐿, 𝑃) then it simply returns (𝐿, 𝑃) as the answer. Next, for each call
35
E𝐿(𝑁*, 𝐴, 𝑀) for a user 𝑖 under nonce 𝑁, it instead calls Enc(⟨𝑖, 𝑁⟩, 𝑁*, 𝐴, 𝑀). Likewise, for each
call D𝐿(𝑁*, 𝐴, 𝐶) for a user 𝑖 under nonce 𝑁, it calls Dec(⟨𝑖, 𝑁⟩, 𝑁*, 𝐴, 𝐶).
Thanks to the table look-ups in game 𝐺3, adversary ℬ does not make prohibited queries to the
decryption oracle. Moreover, for each encryption query Enc(⟨𝑖, 𝑁⟩, 𝑁*, 𝐴, 𝑀) with 𝑁* = ⟨𝑃, 𝑗, 𝑎⟩,
the pair (⟨𝑖, 𝑁⟩, 𝑁*) uniquely determines the user 𝑖, nonce 𝑁, and counter 𝑗. Hence ℬ is nonce-
respecting, as long as 𝒜 is nonce-respecting. Next, view each encryption of a (partial) stream as
throwing a ball into bin 𝑃, where 𝑃 is the corresponding nonce prefix. The throws are uniformly
random. From Lemma 2, ℬ is max{4ℓ, 4𝑞/2ℓ}-repeating with probability at least 1 − 2−ℓ. On the
other hand,
Pr[𝐺3(𝒜)] − Pr[𝐺4(𝒜)] = Advae
𝛱(ℬ) .
Summing up
Advnoae2
SE2[KD,𝛱](𝒜) = Pr[𝐺1(𝒜)] − Pr[𝐺4(𝒜)]
Pr[𝐺𝑖(𝒜)] − Pr[𝐺𝑖+1(𝒜)] = Advprf
KD(ℬ′) + Advae
𝛱(ℬ) .
3∑︁
=