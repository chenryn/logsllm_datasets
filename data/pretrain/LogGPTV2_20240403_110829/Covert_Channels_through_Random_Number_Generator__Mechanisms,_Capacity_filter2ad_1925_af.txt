as covert communication medium, recent work also inves-
tigated the use of thermal characteristics of the CPU for
secret data transmission [38, 2]. This example demonstrates
that unexpected covert channels can be created and it is
important to investigate, discover and mitigate all sources
of such covert communications. This paper makes a contri-
bution in this direction by uncovering a new and powerful
covert channel and proposing software and hardware miti-
gations for it.
7. CONCLUDING REMARKS
In this paper, we introduced a new covert communication
channel using the shared hardware random number gener-
ator unit as communication medium. The key idea is to
control the pressure on the shared RNG hardware unit by
the sender by either executing a sequence of rdseed instruc-
tions or busy-waiting, thus impacting the behavior of the
rdseed instructions issued by the receiver. We showed that
this channel works reliably and with high transmission rate
across cores and across virtual machines and can be imple-
mented directly within user space with no OS assistance. In
addition, we showed that the RNG channel can be created
without relying on any processor timekeeping infrastructure
or hardware performance counters.
The above characteristics make the RNG channel easy to
establish and diﬃcult to mitigate. In terms of protection,
we proposed two software approaches and two hardware ap-
proaches. The software approaches either utilize support
available on Intel virtualization platforms to handle the rd-
seed instructions in special ways or executing the additional
thread to create constant pressure on the hardware RNG
unit. The hardware approaches are based on either equaliz-
ing the timing of the rdseed instructions across threads, or
partitioning the RNG resources among cores to remove the
dependency of instruction latencies issued by one thread on
the instructions of the other.
For secure system design, it is important to develop ar-
chitectures that do not have paths for information leakage,
either through side channels or covert channels. To this end,
it is critical to discover the new vulnerabilities in the existing
and emerging systems and propose defenses against them.
This paper makes contributions on both of these fronts.
8. ACKNOWLEDGMENT
We would like to thank our shepherd Edward Suh for his
insight and suggestions for improving the paper, and the
anonymous reviewers for their useful comments. This mate-
rial is based on research sponsored by the National Science
Foundation grant CNS-1422401.
49th International Symposium on Microarchitecture
(MICRO) (2016).
9. REFERENCES
[1] AMD. AMD64 architecture programmer’s manual
volume 2: System programming, 2016.
[2] Bartolini, D. B., Miedl, P., and Thiele, L. On
the capacity of thermal covert channels in multicores.
In Proceedings of the Eleventh European Conference
on Computer Systems (2016), ACM, p. 24.
[3] Bello, L. DSA-1571-1 OpenSSL Predictable random
number generator, 2008. Debian Security Advisory.
[4] Berger, S., C´aceres, R., Pendarakis, D., Sailer,
R., Valdez, E., Perez, R., Schildhauer, W., and
Srinivasan, D. TVDc: managing security in the
trusted virtual datacenter. ACM SIGOPS Operating
Systems Review 42, 1 (2008), 40–47.
[5] Bucci, M., Germani, L., Luzzi, R., Trifiletti, A.,
and Varanonuovo, M. A high-speed oscillator-based
truly random number source for cryptographic
applications on a smart card ic. Computers, IEEE
Transactions on 52, 4 (2003), 403–409.
[6] Burdonov, I., Kosachev, A., and Iakovenko, P.
Virtualization-based separation of privilege: working
with sensitive data in untrusted environment. In
Proceedings of the 1st EuroSys Workshop on
Virtualization Technology for Dependable Systems
(2009), ACM, pp. 1–6.
[7] Chen, J., and Venkataramani, G. CC-hunter:
Uncovering covert timing channels on shared processor
hardware. In Intl. Symp. on Microarchitecture (2014),
IEEE Computer Society, pp. 216–228.
[8] Demchik, V. Pseudo-random number generators for
monte carlo simulations on ati graphics processing
units. Computer Physics Communications 182, 3
(2011), 692–705.
[9] Dorrendorf, L., Gutterman, Z., and Pinkas, B.
Cryptanalysis of the random number generator of the
windows operating system. ACM Transactions on
Information and System Security (TISSEC) 13, 1
(2009), 10.
[10] Evtyushkin, D., Elwell, J., Ozsoy, M.,
Ponomarev, D., Abu-Ghazaleh, N., and Riley,
R. Iso-x: A ﬂexible architecture for
hardware-managed isolated execution. In Proceedings
of 47th International Symposium on Microarchitecture
(MICRO) (2014), pp. 190–202.
[11] Evtyushkin, D., Elwell, J., Ozsoy, M.,
Ponomarev, D., Ghazaleh, N. A., and Riley, R.
Flexible hardware-managed isolated execution:
Architecture, software support and applications. IEEE
Transactions on Dependable and Secure Computing
(TDSC) (2016).
[12] Evtyushkin, D., Ponomarev, D., and
Abu-Ghazaleh, N. Covert channels through branch
predictors: a feasibility study. In Proceedings of the
Fourth Workshop on Hardware and Architectural
Support for Security and Privacy (HASP) (2015),
ACM, p. 5.
[13] Evtyushkin, D., Ponomarev, D., and
Abu-Ghazaleh, N. Jump Over ASLR: Attacking
Branch Predictors to Bypass ASLR. In Proceedings of
[14] Evtyushkin, D., Ponomarev, D., and
Abu-Ghazaleh, N. Understanding and mitigating
covert channels through branch predictors. ACM
Transactions on Architecture and Code Optimization
(TACO) 13, 1 (2016), 10.
[15] Felt, A. P., Chin, E., Hanna, S., Song, D., and
Wagner, D. Android permissions demystiﬁed. In
Proceedings of the 18th ACM conference on Computer
and communications security (2011), ACM,
pp. 627–638.
[16] Gruss, D., Maurice, C., Fogh, A., Lipp, M., and
Mangard, S. Prefetch Side-Channel Attacks:
Bypassing SMAP and Kernel ASLR. In Proceedings of
the 23rd ACM Conference on Computer and
Communications Security (CCS) (2016), ACM.
[17] Gruss, D., Maurice, C., and Wagner, K. Flush+
Flush: A stealthier last-level cache attack. In
Detection of Intrusions and Malware, and
Vulnerability Assessment: 13th International
Conference, DIMVA 2016, San Sebasti´an, Spain, July
7-8, 2016, Proceedings (2016), Springer.
[18] Guri, M., Monitz, M., Mirski, Y., and Elovici,
Y. Bitwhisper: Covert signaling channel between
air-gapped computers using thermal manipulations. In
Computer Security Foundations Symposium (CSF),
2015 IEEE 28th (2015), IEEE, pp. 276–289.
[19] Gutmann, P. Software generation of practically
strong random numbers. In Usenix Security (1998).
[20] Hamming, R. W. Error detecting and error correcting
codes. Bell System technical journal 29, 2 (1950),
147–160.
[21] Hu, W.-M. Reducing timing channels with fuzzy time.
Journal of computer security 1, 3-4 (1992), 233–254.
[22] Hunger, C., Kazdagli, M., Rawat, A., Dimakis,
A., Vishwanath, S., and Tiwari, M. Understanding
contention-based channels and using them for defense.
In High Performance Computer Architecture (HPCA),
2015 IEEE 21st International Symposium on (2015),
IEEE, pp. 639–650.
[23] Intel. Digital Random Number Digital Random
Number Generator Generator (DRNG) Software
Implementation Guide.
[24] Intel. Intel 64 and ia-32 software developer’s manual,
volume 3c: System programming guide, part 3.
[25] Jang, Y., Lee, S., and Taesoo, K. Breaking Kernel
Address Space Layout Randomization with Intel TSX.
In Proceedings of the 23rd ACM Conference on
Computer and Communications Security (CCS)
(2016), ACM.
[26] Jun, B., and Kocher, P. The intel random number
generator. Cryptography Research Inc. white paper
(1999).
[27] Junkins, S. The Compute Architecture of Intel
Processor Graphics Gen9.
[28] Kaplan, D., Kedmi, S., Hay, R., and Dayan, A.
Attacking the Linux PRNG on android: weaknesses in
seeding of entropic pools and low boot-time entropy.
In 8th USENIX Workshop on Oﬀensive Technologies
(WOOT 14) (2014).
[29] Kayaalp, M., Abu-Ghazaleh, N., Ponomarev, D.,
and Jaleel, A. A high-resolution side-channel attack
on last-level cache. In Proceedings of the 53rd Annual
Design Automation Conference (2016), ACM, p. 72.
[30] Koetter, R., and Kschischang, F. R. Coding for
errors and erasures in random network coding.
Information Theory, IEEE Transactions on 54, 8
(2008), 3579–3591.
[31] Latham, D. C. Department of defense trusted
computer system evaluation criteria. Department of
Defense (1986).
[32] Lenstra, A., Hughes, J. P., Augier, M., Bos,
J. W., Kleinjung, T., and Wachter, C. Ron was
wrong, whit is right. Tech. rep., IACR, 2012.
[33] Li, C., Ding, C., and Shen, K. Quantifying the cost
of context switch. In Proceedings of the 2007 workshop
on Experimental computer science (2007), ACM, p. 2.
[34] Li, K., Kavˇci´c, A., Venkataramani, R., and
Erden, M. F. Channels with both random errors and
burst erasures: Capacities, ldpc code thresholds, and
code performances. In Information Theory Proceedings
(ISIT), 2010 IEEE International Symposium on
(2010), IEEE, pp. 699–703.
[35] Liberty, J. S., Barrera, A., Boerstler, D. W.,
Chadwick, T. B., Cottier, S. R., Hofstee, H. P.,
Rosser, J. A., and Tsai, M. L. True hardware
random number generation implemented in the 32-nm
SOI POWER7+ processor. IBM Journal of Research
and Development 57, 6 (2013), 4–1.
[36] Liu, F., Yarom, Y., Ge, Q., Heiser, G., and Lee,
R. B. Last-level cache side-channel attacks are
practical. In IEEE Symposium on Security and
Privacy (2015), pp. 605–622.
[37] Martin, R., Demme, J., and Sethumadhavan, S.
Timewarp: rethinking timekeeping and performance
monitoring mechanisms to mitigate side-channel
attacks. ACM SIGARCH Computer Architecture News
40, 3 (2012), 118–129.
[38] Masti, R. J., Rai, D., Ranganathan, A., M¨uller,
C., Thiele, L., and Capkun, S. Thermal covert
channels on multi-core platforms. In 24th USENIX
Security Symposium (USENIX Security 15) (2015),
pp. 865–880.
[39] Maurice, C., Neumann, C., Heen, O., and
Francillon, A. C5: cross-cores cache covert channel.
In Detection of Intrusions and Malware, and
Vulnerability Assessment. Springer, 2015, pp. 46–64.
[40] McKeen, F., Alexandrovich, I., Berenzon, A.,
C.Rozas, Shafi, H., Shanbhogue, V., and
Svagaonkar, U. Innovative instructions and software
model for isolated execution. In Wkshp. on Hardware
and Architectural Support for Security and Privacy,
with ISCA’13 (2013).
[41] Moser, S. M. Error probability analysis of binary
asymmetric channels. Dept. El. & Comp. Eng., Nat.
Chiao Tung Univ (2009).
[42] Mundada, Y., Ramachandran, A., and
Feamster, N. Silverline: Data and network isolation
for cloud services. In HotCloud (2011).
[43] Naghibijouybari, H., and Abu-Ghazaleh, N.
Covert Channels on GPGPUs. Computer Architecture
Letters (2016).
[44] Pessl, P., Gruss, D., Maurice, C., Schwarz, M.,
and Mangard, S. DRAMA: Exploiting DRAM
Addressing for Cross-CPU Attacks. In 25th USENIX
Security Symposium (USENIX Security 16) (Austin,
TX, 2016), USENIX Association, pp. 565–581.
[45] Sailer, R., Valdez, E., Jaeger, T., Perez, R.,
Van Doorn, L., Griffin, J. L., Berger, S.,
Sailer, R., Valdez, E., Jaeger, T., et al. sHype:
Secure hypervisor approach to trusted virtualized
systems. Techn. Rep. RC23511 (2005).
[46] Schneider, F. B. Least privilege and more. In
Computer Systems. Springer, 2004, pp. 253–258.
[47] Sigoure, B. How long does it take to make a context
switch, 2010.
[48] Son, S. H., Mukkamala, R., and David, R.
Integrating security and real-time requirements using
covert channel capacity. Knowledge and Data
Engineering, IEEE Transactions on 12, 6 (2000),
865–879.
[49] Stone, J. E., Gohara, D., and Shi, G. OpenCL: A
parallel programming standard for heterogeneous
computing systems. Computing in science &
engineering 12, 1-3 (2010), 66–73.
[50] Sunar, B., Martin, W. J., and Stinson, D. R. A
provably secure true random number generator with
built-in tolerance to active attacks. Computers, IEEE
Transactions on 56, 1 (2007), 109–119.
[51] Vattikonda, B. C., Das, S., and Shacham, H.
Eliminating ﬁne grained timers in xen. In Proceedings
of the 3rd ACM workshop on Cloud computing
security workshop (2011), ACM, pp. 41–46.
[52] Wang, Y., Ferraiuolo, A., and Suh, G. E. Timing
channel protection for a shared memory controller. In
High Performance Computer Architecture (HPCA),
2014 IEEE 20th International Symposium on (2014),
IEEE, pp. 225–236.
[53] Wang, Z., and Lee, R. Covert and side channels due
to processor architecture. In Annual Computer
Security Applications Conference (2006), IEEE.
[54] Wicker, S. B., and Bhargava, V. K. Reed-Solomon
codes and their applications. John Wiley & Sons, 1999.
[55] Wu, Z., Xu, Z., and Wang, H. Whispers in the
hyper-space: high-speed covert channel attacks in the
cloud. In Presented as part of the 21st USENIX
Security Symposium (USENIX Security 12) (2012),
pp. 159–173.
[56] Xu, Y., Bailey, M., Jahanian, F., Joshi, K.,
Hiltunen, M., and Schlichting, R. An exploration
of l2 cache covert channels in virtualized environments.
In Proceedings of the 3rd ACM workshop on Cloud
computing security workshop (2011), ACM, pp. 29–40.
[57] Xu, Y., Cui, W., and Peinado, M.
Controlled-channel attacks: Deterministic side
channels for untrusted operating systems.
[58] Zhang, Y., Juels, A., Oprea, A., and Reiter,
M. K. Homealone: Co-residency detection in the
cloud via side-channel analysis. In Proc. 2011 IEEE
Symposium on Security and Privacy (S&P) (2011),
pp. 313–328.