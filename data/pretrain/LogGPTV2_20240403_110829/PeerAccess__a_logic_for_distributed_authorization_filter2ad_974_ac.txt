Bob:
Bob lsigns auth(shaketable, X)   CAS signs auth(shaketable, X)
Bob lsigns srelease(Bob signs auth(shaketable, X)  
CAS signs auth(shaketable, X), Z, W )
Bob publicly declares that he relies on CAS for his authorization
decisions. His ﬁrst release policy allows him to send his rule to
Alice when she wants to access the shake table. When Alice ob-
tains releasable evidence from CAS that she is authorized to access
the shake table (i.e, “CAS signs auth(shaketable, Alice)”, along
with “CAS signs srelease (CAS signs auth(R; X); Y; Z)”), she can
present the fact “CAS signs auth(shaketable, Alice)” to Bob along
with his delegation rule. (She can present the rule to him because
he signed it. So, she can send the rule back to Bob even though he
does not send her a copy of his release policy for the rule.) CAS’s
fact and Bob’s rule together imply that Bob lsigns auth(shaketable,
Alice), so Bob should be convinced that Alice can access the shake
table. At this point, “Bob lsigns auth(shaketable, Alice)” is true at
Bob, from which it follows that “Bob signs auth(shaketable, Al-
ice)” is also true at Bob. Further, Bob’s original release policy
shows that the authorization “Bob signs auth(shaketable, Alice)”
can be released to Alice. Bob can also send Alice his conditional
release rule, which lets Alice do anything she likes with the autho-
rization that he gives her.
Example 2b. In this case, CAS has delegated its authorization
tasks to CAS-DB, and Bob wants to see a proof from CAS that
Alice can access the shake table:
Bob:
Bob lsigns auth(shaketable, X)   CAS lsigns auth(shaketable, X)
Bob lsigns srelease(Bob signs auth(shaketable, X)  
CAS lsigns auth(shaketable, X), Y , Z)
CAS-DB:
CAS signs auth(shaketable, X)  
CAS signs authgroup(shaketable, G) ^ CAS signs member(G, X)
CAS signs authgroup(shaketable, earthquake)
CAS signs member(earthquake, Alice)
If we adopt the same approach to release rules as in Example 1b,
then CAS-DB would have the release policy “CAS signs srelease(CAS
signs auth(R; X); Y; Z)”. This is not helpful, as CAS-DB cannot
derive any facts of the form “CAS signs auth(R, X)”; CAS-DB can
only derive logically signed authorizations. CAS needs to authorize
CAS-DB to release all the details of the proof, so that CAS-DB can
convince others that it is faithfully mirroring CAS’s reasoning:
CAS-DB:
CAS signs srelease(CAS lsigns auth(shaketable, X)   CAS signs
authgroup(shaketable, G) ^ CAS signs member(G; X); Y; Z)
CAS signs srelease(CAS signs authgroup(X; G); Z; W )
CAS signs srelease(CAS signs member(G; Y ); Z; W )
For brevity, we have set up these three release policies so that ev-
erything is publicly releasable. In practice, CAS would probably
prefer to be less trusting of CAS-DB, and only authorize CAS-DB
to release Alice’s membership credential to Alice, while still al-
lowing Alice to release it to anyone she chooses. Similarly, CAS
might choose to limit the initial release of authgroup(shaketable,
earthquake) to members of the earthquake group. CAS could also
limit the initial release of its delegation rule so that CAS-DB can
only give it to authorized shake table users, if desired. We will not
write out these more restrictive rules here, because Example 1b has
already shown how to write such policies.
To convince Bob that Alice can access the shake table, it sufﬁces
for Alice to send Bob a message containing CAS-DB’s base rule
and base facts, from which it follows that CAS lsigns auth(shaketable,
Alice). Alice does not need to send release policies for CAS-DB’s
rules and facts, because Bob does not release them further. Because
Bob directly signs his own conclusions, he can send out that con-
clusion regardless of the sticky policies on the information he used
to reach that conclusion.
Example 3b. In this example, CAS does not maintain the lists of
current group members. CAS-DB has the three base rules deﬁned
earlier, a sprinkling of cached facts, and release policies from CAS
authorizing public dissemination of the rules:
CAS-DB:
CAS signs auth(shaketable, X)  
CAS lsigns authgroup(shaketable, G) ^ CAS lsigns member(G, X)
CAS signs member(G, X)  
O lsigns member(G, X) ^ CAS lsigns owner(G, O)
CAS signs authgroup(R, G)  
O lsigns authgroup(R, G) ^ CAS lsigns owner(R, O)
CAS signs owner(earthquake, earthquakeOwner)
CAS signs owner(shaketable, Bob)
earthquakeOwner signs member(earthquake, Alice)
Bob signs authgroup(shaketable, earthquake)
CAS signs srelease(CAS signs auth(shaketable, X)   CAS lsigns
authgroup(shaketable, G) ^ CAS lsigns member(G, X), Y , Z)
CAS signs srelease(CAS signs member(G, X)  
O lsigns member(G, X) ^ CAS lsigns owner(G, O), Y , Z)
CAS signs srelease(CAS signs authgroup(R, G)  
O lsigns authgroup(R, G) ^ CAS lsigns owner(R, O), Y , Z)
To convince Bob that she can access the shake table, Alice will
need to convince him that CAS lsigns auth(shaketable, Alice). From
CAS-DB’s facts and rules, it follows that “CAS lsigns auth(shaketable,
Alice)” is true at CAS-DB. However, CAS-DB can only send di-
rectly signed atoms and rules in messages, and “CAS signs auth(shaketable,
Alice)” is not true at CAS-DB. Thus, if CAS-DB wants to be help-
ful, it must give Alice a set of atoms and rules from which it fol-
lows that CAS lsigns auth(shaketable, Alice). The release policies
given above authorize CAS-DB to release all relevant information
except “earthquakeOwner signs member(earthquake, Alice)” and
“Bob signs authgroup(shaketable, earthquake)”. To release these
atoms, “earthquakeOwner lsigns srelease(earthquakeOwner signs
member(earthquake, Alice), CAS-DB, Alice)” and “Bob lsigns sre-
lease(Bob signs authgroup(shaketable, earthquake), CAS-DB, Al-
ice)” must be true at CAS-DB. Further, for Alice to make use of
the information CAS-DB gives her, she must be able to release it as
well. This need implies that CAS-DB should have cached release
policies from earthquakeOwner and Bob, because it will need these
policies every time it receives a query about access, and it will re-
ceive such queries constantly. If for some reason such policies are
not already cached at CAS-DB, CAS-DB can query for them au-
tomatically using the proof hints mechanism described in section
7. The same is true of the release policies that Alice will need for
those same atoms.
The PeerAccess framework can be instantiated with a release
predicate different from srelease if CAS should have the author-
ity to override the wishes of the group and resource owner in re-
leasing group membership lists and lists of authorized groups, or
if CAS-DB’s release of “O signs authgroup(R, G)” should require
the permission of R’s owner as well as O.
5.
PEERACCESS SEMANTICS
DEFINITION 2
(POSSIBLE WORLD). A possible world W is
a set of logically signed ground facts that satisﬁes the Herbrand
domain assumption, i.e., “X = X” 2 W for every ground choice
of X, and “X 6= Y ” 2 W for every pair of distinct choices of X
and Y .
The fact “CAS lsigns srelease(CAS signs auth(X, Y ), Alice,
Bob)” is not ground: variables and metavariables cannot occur any-
where in a ground formula or in a possible world.
DEFINITION 3
(INTERPRETATION). A PeerAccess interpreta-
tion I is a set containing one local interpretation for each peer, i.e.,
I = f(j; Ij) j j 2 N g. Peer j’s interpretation is Ij = (Wj ; Sj),
where Wj is a set of possible worlds and Sj is a set of rules directly
signed by other peers.
Wj is a set of possible worlds because correct local reasoning
about authorization in an open system requires an open world as-
sumption.2
We deﬁne the truth of a formula in I as follows, where A is the
name of an arbitrary peer:
DEFINITION 4
(j=, MODEL).
1. I j=A (cid:30), for a logically signed ground rule (cid:30) of the form
f   f1 ^ (cid:1) (cid:1) (cid:1) ^ fm, iff for each world W in WA, either
f 2 W or for some 1 (cid:20) j (cid:20) m, fj 62 W .
2. I j=A (cid:30), for a logically signed non-ground rule (cid:30), iff for
every ground instance (cid:30)0 of (cid:30), I j=A (cid:30)0.
3. I j=A (cid:30), for a directly signed rule (cid:30), iff both of the following
hold:
(cid:15) (cid:30) 2 SA iff (cid:30) is directly signed by A;
(cid:15) I j=A (cid:30)0, where (cid:30)0 is the logically signed counterpart
of (cid:30).
4. I j=A (cid:8), for a set (cid:8) of rules, iff for all (cid:30) 2 (cid:8), I j=A (cid:30). In
this case, we say that I is a model of (cid:8) at A and (cid:8) is true
in IA.
5. I j= P, for a global KB P, iff for all peers A 2 N , I j=A
PA. In this case, we say that I is a model of P and P is true
in I.
The preceding deﬁnition of an interpretation holds for any in-
stantiation of the PeerAccess framework. For this paper’s instanti-
ation, each interpretation must also satisfy three requirements that
are speciﬁc to the srelease predicate. In the statements of these re-
quirements, A and B are arbitrary peers; C, D, and E are arbitrary
peers or variables; (cid:30) is a rule directly signed by B; and f1 through
fn are arbitrary facts, with n (cid:21) 0. Note that the truth of an srelease
rule does not depend on whether the formula to be released is true
or false.
2With a closed world assumption, we could have the following sce-
nario: A university U delegates all responsibility to its registrar R
for determining who is a student: “U lsigns student(X)   R lsigns
student(X)”. U does not maintain any lists of students itself. Un-
der a closed world assumption, “U lsigns student(Alice)   U lsigns
student(Bob)” is true at U, because U does not know that Bob is a
student. If U signs and sends this true rule to Alice, and Alice ob-
tains proof that Bob is a student, then Alice will have a proof of
U lsigns student(Alice), which U never intended. An open world
assumption prevents this rule from ever being true at U (because U
has possible worlds where Bob is a student), thereby preventing its
dissemination in messages.
1. (A peer can send any directly signed rule to itself or to the
rule’s signer.) If I j=A (cid:30), where (cid:30) is directly signed by B,
then I j=A B lsigns srelease((cid:30); A; B) and I j=A B lsigns
srelease((cid:30); A; A). The former condition guarantees that B
cannot repudiate a proof provided by A, by claiming that he
does not have (cid:30). The latter condition avoids certain awkward
theoretical situations.
2. (If Bob authorizes Carla to disseminate a piece of informa-
tion under certain conditions, Bob should allow Carla to ﬁnd
out that she is authorized to do so.) Recall that we prohib-
ited the user from writing srelease rules for srelease rules,
because they are hard to write and understand; our intent is
that such rules should be generated automatically, using this
principle and the one that follows. If I j=A (cid:30), where (cid:30) is of
the form “B lsigns srelease( ; C; D)   f1 ^ (cid:1) (cid:1) (cid:1) ^ fn”, then
I j=A B lsigns srelease((cid:30); A; C). Here Alice is allowed to
release Bob’s release rule (cid:30) to Carla, because (cid:30) authorizes
Carla to release information under certain conditions.
3. (If Bob authorizes Carla to release a piece of information to
Doug, and Bob also authorizes Doug to release it to Edward,
then Carla is allowed to know that Doug can release this info
to Edward, and the release policy itself can be forwarded
from Carla to Doug.) If I j=A B lsigns srelease((cid:30); C; D)  
f1 ^ (cid:1) (cid:1) (cid:1) ^ fn and I j=A  , where   is of the form “B lsigns
srelease((cid:30); D; E)   f1 ^ (cid:1) (cid:1) (cid:1) ^ fn”, then I j=A B lsigns
srelease( ; A; C).
One can view the evolution of a global KB over time as being
represented by a sequence I 1; I 2; : : :, where each evolution step
corresponds to a set of messages being sent in parallel between
peers. Each such message can add formulas to the local KBs, but
the contents of the local KBs are bounded above: there are only
so many new messages that can be sent. As a result, for each le-
gal initial global KB there is exactly one canonicalmodel, written
P, which is the interpretation representing the maximal attainable
state of knowledge across all peers. (In this paper, we do not allow
peers to delete formulas from their KBs, or to insert formulas other
than those that arrive in messages.) Each KB also has one unique
isolated model, written P, which represents each peers’ maximal
local knowledge before receiving any message from others. The
following deﬁnitions present fundamental operations on interpreta-
tions, along with theorems and proofs regarding their properties.
DEFINITION 5
(UNION OPERATOR (cid:8)). For two interpretations
I and I 0 and peer A, we deﬁne
IA (cid:8) I 0
A = ((WA [ W 0
A) ; (SA \ S 0
A))
I (cid:8) I 0 = f(B; IB (cid:8) I 0
B) j B 2 N g:
PROPOSITION 1
(MODEL CLOSURE UNDER UNION). The
union I (cid:8) I 0 of any two models of P is still a model of P.
Proof. Let I and I 0 be two of P’s models, and (cid:30) be any rule in PA.