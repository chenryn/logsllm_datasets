当代码即将被检入时(预提交) 
开发组织可以在他们的过程中声明，在将代码提交给源代码存储库之前，必须对所有代
码进行审计。这有减缓签入过程的缺点，因为审计可能需要时间，但是它有许多优点，因为
低于标准的代码永远不会放在代码行中，并且管理层可以确信(如果正在遵循过程)提交的代
码达到了规定的质量。 
例如，过程可能声明要提交的代码必须包括到需求和设计文档以及必要的单元和自动化
测试的链接。通过这种方式，审计者将对正在进行的确切代码修改有所了解(由于文档)，并
且他们将知道开发人员如何测试代码(由于测试)。如果同行审计者认为文档不完整，或者测
试不够广泛，他们可以拒绝审计，不是因为代码本身，而是因为必要的文档或测试不完整。
在使用每晚运行的自动化测试的配置项的环境中，开发团队作为一个整体将在第二天(在签
入之后)知道提交的代码是否有足够的质量。管理人员也知道，一旦一个缺陷或特性被审计
出来，开发人员已经完成了他们的任务，就不会有“我将在下周完成那些测试”的场景（意
思是要让开发人员立刻修改问题），否则就增加了开发任务的风险。 
当代码刚刚被检入代码库时(提交后) 
在这里，开发人员提交他们的代码变更，然后使用代码库变更列表发送代码差异供审计。
这对开发人员来说具有更快的优势，因为在他们签入代码之前没有审计门要通过。缺点是，
实际上，这种方法会导致代码质量下降。一旦代码被签入，开发人员就不太倾向于解决小问
题，通常是口头禅“好了，代码已经在了，它就可以了“。还有一个时间上的风险，因为其
他开发人员可能会在审计完成之前，或者在编写变更和测试之前，在同一个模块中编写其他
36 
代码修复，这意味着开发人员不仅必须实现来自同行或安全审计的代码变更，而且还必须以
不破坏其他后续变更的方式来实现。开发人员不得不重新测试后续的修复，以确保没有出现
问题。 
一些使用敏捷方法的开发组织在他们的过程中加入了“安全冲刺”。在安全性冲刺阶段，
可以对代码进行安全性审计，并添加特定于安全性的测试用例(书面的或自动化的)。 
当代码审计完成时 
一些组织有在特定时间间隔审计代码的过程(例如，每年一次)，或者当一段易受攻击的
代码被怀疑在整个代码库中重复时。在这里，静态代码分析器或简单的代码字符串搜索(针
对特定的漏洞模式)可以加快这个过程。这种审计与提交特性或错误修复无关，它们是由过
程考虑触发的，可能涉及对整个应用程序或代码库的审计，而不是对单个提交的审计。 
谁应该执行代码安全审计 
一些组织认为代码安全审计可以是安全或风险分析团队成员的工作。然而，所有开
发人员都需要了解他们的应用程序的暴露点，以及他们的应用程序存在哪些威胁。 
许多公司的安全团队没有具有编码背景的成员，这使得与开发团队的交互具有挑战
性。因此，开发团队通常对安全性输入和指导持怀疑态度。安全团队通常愿意放慢速度，
以确保机密性和完整性控制到位，而开发人员面临来自他们支持的业务部门的压力，要
求他们尽快创建和更新代码。不幸的是，应用程序对运营或业务需求越重要，将代码部
署到生产环境的压力就越大。 
37 
最好将安全代码审计融合到 SDLC 过程中，这样开发组织就不会将安全视为障碍，
而是一种帮助。如前所述，将安全编码 SME 散布到整个组织（BSIMM 术语中的卫星）
可以使代码安全审计任务扩展并覆盖更多的开发团队。随着过程的发展，越来越多的开
发人员意识到了安全编码问题(因为他们已经拒绝了基于安全编码的审计)，并且安全编码
问题在代码审计中出现的频率会下降。 
2.2.4 敏捷和瀑布开发的代码安全审计 
如今，敏捷开发是许多实践的总称，包括编程、持续集成、测试、项目管理等。敏捷开
发有很多种风格，甚至和实践者一样多。敏捷开发是一个异构的参考框架，开发团队可以从
中挑选他们想要使用的实践。 
敏捷有一些可能影响代码审计方式和时间的实践。例如，敏捷试图让代码审计和测试尽
可能接近开发阶段。通常的做法是定义短的开发周期（迭代或冲刺)。在每个周期结束时，
所有的代码都应该是生产质量代码。它可以是不完整的，但它必须增加一些功能价值。这会
影响审计过程，因为审计应该是连续的。从安全编码审计的角度来看，开发组织使用敏捷或
瀑布开发二者在代码审计上不应该有任何区别。代码审计结果只受提交的代码影响，而不会
受开发与测试的顺序，或者分配给编码任务的时间因素影响。在许多组织中，瀑布和敏捷之
间的界限越来越模糊，传统的瀑布部门引入了敏捷的持续集成方面，包括夜间构建、自动化
测试、测试驱动开发等。 
2.2.5 基于风险的代码审计方法 
一个开发公司将有不同程度的代码变更被审计，从一年运行一次的后端脚本中简单的单
行错误修复，到关键业务逻辑中的大型特性提交。通常情况下，代码审计的强度根据变更带
38 
来的感知风险而变化。 
最终，代码审计的规模归结为资源的管理(技术人员、公司时间、机器等)。为产品上发
生的每个代码变更引入多个安全专家是不可扩展的，这些人或团队的资源不足以处理每个变
更。因此，公司可以决定哪些变更是重要的，哪些需要仔细审计，哪些可以在最少审计的情
况下通过。这将使管理层能够更好地评估开发周期，如果要在高风险领域进行变更，管理层
可以留出足够的时间进行代码审计，并确保有具备相关技能的人员可用。决定哪些变更需要
哪个级别的代码审计的过程是基于变更所在的模块的风险级别。 
如果代码变更的审计强度是基于被变更模块的风险级别，那么风险级别应该由谁来决定？
因为，管理层要对公司的产出负责，所以他们也要对公司销售产品的相关风险负责。因此，
由管理层(或管理层委托的人员)来创建一个可重复的度量或框架，以决定与代码更改相关的
风险。 
关于一个模块或一段代码的风险的决定应该基于可靠的成本效益分析，如果决定所有模
块都是高风险的，那将是不负责任的。因此，管理层应会见了解代码基础和产品面临的安全
问题的人员，并为各种代码元素创建风险度量。代码可以分成模块、目录、产品等。每个都
有相关的风险级别。 
在风险分析领域存在各种方法来将风险分配给实体，并且许多书已经致力于这种类型的
讨论。下表 1 概述了确定风险的三种主要技术。 
39 
风险是坏事发生的可能性，以及如果发生可能造成的损害。确定不同代码模块风险状况
的标准将由负责交付变更的管理团队决定，示例见表 2。 
当风险级别与产品和模块相关联时，可以创建策略来确定必须进行什么级别的代码审计。
一级风险模块中的代码变更可能必须由包括安全架构师在内的三个人进行审计，而四级风险
模块中的变更只需要一个人进行快速的同行审计。 
风险较高的模块的其他选项(或标准)可以包括对自动化测试或静态分析的需求，例如。
高风险代码中的代码变更必须包括静态分析工具上 80%的代码覆盖率，以及足够的自动匹
配测试，以确保不发生回归。作为代码审计的一部分，可以要求和审计这些标准，以确保它
们能够测试已更改的代码。 
一些公司在逻辑上将他们的代码分成不同的存储库，更敏感的代码出现在一个只有有限
的开发人员能够访问的存储库中。如果代码以这种方式被分割，那么必须记住，只有能够访
问风险较高的代码的开发人员才能对该代码进行审计。 
40 
风险分析也可以在代码审计期间使用，以决定如何对引入产品风险的代码变更做出反应，
如表 3 所示。在典型的风险分析过程中，团队需要决定是否接受、转移、避免或降低风险。
当涉及到代码审计时，转移风险是不可能的，因为转移风险通常意味着购买保险来支付风险
成本。 
2.2.6 代码审计准备 
对应用程序的安全审计应该发现常见的安全漏洞以及应用程序业务逻辑特有的问题。为
了有效地审计代码主体，重要的是审计者理解应用程序的业务目的和关键的业务影响。审计
人员应了解攻击面，确定不同的威胁代理及其动机，以及他们可能如何攻击应用程序。 
对于正在审计其代码的软件开发人员来说，执行代码审计可能就像审核一样，并且开发
人员可能比较排斥审计结果。解决这个问题的一种方法是在审计者、开发团队、业务代表和
任何其他既得利益者之间创造一种合作的氛围。塑造顾问而不是警察的形象对于获得开发团
队的合作很重要。 
信息收集的程度将取决于组织的规模、重新查看者的技能组合以及所查看代码的关键程
度/风险。在一个 20 人的初创企业中，对 CSS 文件进行一个小小的更改不会产生一个完整
的威胁模型和需要一个独立的安全审计团队。与此同时，在一家价值数十亿美元的公司中，
一个新的单点登录认证模块将不会是一个曾经读过安全编码文章的人所审计的安全代码。即
41 
使在同一个组织中，高风险模块或应用程序也可能会受到威胁，其中低风险模块可以在不太
强调审计者理解模块的安全模型的情况下进行审计。 
本节将介绍审核者(或审核团队)应尝试了解的基本项目，以及安全代码审核的应用程序。
这可以用于没有资源创建完整安全基线的较小公司，或者用于较大公司内的低风险代码。后
面一节将详细介绍威胁建模，大型公司将根据其最高风险代码使用威胁建模。 
在理想的情况下，审计者会参与到应用程序的设计阶段，但这种情况很少发生。然而，
不管代码变更的规模有多大，启动代码审计的工程师应该指导审计人员查看任何相关的架构
或设计文档。最简单的方法是在初始电子邮件或代码审计工具中包含一个指向文档的链接
(比如，它们存储在一个在线文档库中)。然后，审计人员可以验证安全控制措施是否正确处
理了关键风险，以及这些控制措施是否用在了正确的地方。 
为了有效地进行审计，审计人员应熟悉以下方面: 
应用程序功能和业务规则 
审计人员应了解应用程序当前提供的所有功能，并获取与这些功能相关的所有业务限制
/规则。还有一种情况是，要注意潜在的计划中的功能，这些功能可能会出现在应用程序的
路线图上，从而在当前的代码审计过程中对安全决策进行提前验证。这个系统失败的后果是
什么？如果应用程序不能按预期执行其功能，企业会受到很大影响吗？ 
上下文 
所有的安全都在我们试图保护的范围内。在苹果的应用程序上推荐军事安全标准机制将
42 
是矫枉过正不恰当的。什么类型的数据被操纵或处理，如果这些数据被泄露会对公司造成什
么损害？上下文是安全代码审计和风险评估的“圣杯”。 
敏感数据 
审计人员还应记录对应用程序敏感的数据实体，如账号和密码。根据敏感度对数据实体
进行分类将有助于审计者确定应用程序中任何类型的数据丢失的影响。 
用户角色和访问权限 
了解被允许访问应用程序的用户类型很重要。是面向外部还是内部给“信任”的用户？
一般来说，只有组织内部用户才能访问的应用程序可能与互联网上任何人都能访问的面临不
同的威胁。因此，了解应用程序的用户及其部署的环境将允许审计者正确认识威胁代理。除
此之外，还必须了解应用程序中存在的不同权限级别。这将有助于审计者列举适用于应用程
序的不同安全违规/权限提升攻击。 
应用类型 
这是指了解应用程序是基于浏览器的应用程序、基于桌面的独立应用程序、网络服务、
移动应用程序还是混合应用程序。不同类型的应用程序面临不同类型的安全威胁，了解应用
程序的类型将有助于审计者查找特定的安全缺陷，确定正确的威胁代理，并突出适合应用程
序的必要控制。 
43 
代码 
使用的语言，从安全角度看该语言的特点和问题。从安全性和性能的角度来看，程序员
需要注意的问题和语言最佳实践。 
设计 
一般来说，如果使用 MVC 设计原则开发，网络应用程序有一个定义良好的代码布局。
应用程序可以有自己的定制设计，也可以使用一些著名的设计框架，如 Struts/Spring 等。
应用程序属性/配置参数存储在哪里？如何为任何功能/URL 识别业务类别？什么类型的类
被执行来处理请求(例如。集中式控制器、命令类、视图页面等)？对于任何请求，视图是如
何呈现给用户的？ 
公司标准和指南 
许多公司会有由管理层规定的标准和指导方针。这就是管理层(最终负责组织的信息安
全)如何控制对各种功能应用何种安全级别，以及如何应用这些安全级别。例如，如果公司
有一个安全编码指南文档，审计者应该知道并理解这些指南，并在代码审计期间应用它们。 
2.2.7 代码审计发现和收集信息 
审计者为了保证信息有效性需要关于申请的某些信息。通常，这种信息可以通过研究设
计文档、业务需求、功能规范、测试结果等获得。然而，在大多数现实世界的项目中，文档
已经明显过时，并且几乎没有适当的安全信息。如果开发组织有架构和设计文档的程序和模
板，审计者可以建议更新，以确保在这些阶段考虑(和记录)安全性。 
44 
如果审计者最初对应用程序不熟悉，最有效的入门方法之一是与开发人员和应用程序的
首席架构师交谈。这不一定是一个长时间的会议，它可以是一个白板会议，让开发团队分享
一些关于关键安全事项的基本信息和控制。实际运行的应用程序的使用非常有助于让审阅者
很好地了解应用程序的工作方式。此外，对代码库的结构和使用的任何库的简要概述可以帮
助审阅者入门。 
如果关于应用程序的信息不能以任何其他方式获得，那么审计者将不得不花一些时间进
行侦察，并通过审计代码来共享关于应用程序如何工作的信息。需要注意的是，该信息然后
可以被记录以帮助将来的审计。 
代码安全审计不仅仅是关于代码结构。数据也重要，我们审计代码的原因是为了确保它
能够充分保护委托给它的信息和资产，如金钱、知识产权、商业秘密或生命。应用程序要处
理的数据的上下文对于确定潜在风险非常重要。如果应用程序是使用内置的/众所周知的设
计框架开发的，那么大多数问题的答案都是预先定义好的。但是，如果是定制的，那么这些
信息肯定会有助于审计过程，主要是捕获数据流和内部验证。了解应用程序的体系结构有助
于理解应用程序可能面临的安全威胁。 
设计是应用程序的蓝图，它为其发展奠定了基础。它说明了应用程序的布局，并确定了
应用程序所需的不同应用程序组件。它是决定应用程序执行流程的结构。大多数应用程序设
计都是基于 MVC 的概念。在这种设计中，不同的组件以有序的顺序相互作用，以满足任何
用户的请求。设计审计应该是安全软件开发过程中不可或缺的一部分。设计审计也有助于以
更好的方式实现安全需求。 
收集建议设计所需的所有信息，包括流程图、序列图、类图和要求文件，以理解建议设
计的目标。主要针对数据流、不同应用程序组件交互和数据处理对设计进行了深入研究。这
45 
是通过手动分析和与设计或技术架构师团队的讨论来实现的。必须彻底了解应用程序的设计
和体系结构，以分析可能导致应用程序安全漏洞的易受攻击区域。 
了解设计后，下一阶段是分析设计面临的威胁。这包括从攻击者的角度观察设计，并发
现其中的后门和不安全区域。下表 4 代码安全审计期间示例 
设计问题 
需要考虑的问题 
 数据流 
•:用户输入用于直接参考业务逻辑吗？ 
•数据绑定是否存在潜在缺陷？ 
•在失败的情况下，执行流程是否正确？ 
认证和访问控制 
•设计是否对所有资源实施访问控制？ 
•会话处理是否正确？ 
•哪些功能无需认证即可访问？ 
现有安全控制 
•第三方安全控制是否存在任何已知的弱点 
•安全控制的位置是否正确？ 
结构 
•与外部服务器的连接安全吗？ 
•外部来源的输入是否经过验证？ 
配置文件和数据
存储 
•:配置文件中有敏感数据吗？ 
•谁有权访问配置或数据文件？ 
46 
代码审计清单 