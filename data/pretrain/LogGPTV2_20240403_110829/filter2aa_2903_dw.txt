累积难以收集的数据。
IRP_MN_ENABLE_EVENTS和IRP_MN_DISABLE_EVENTS：启用
或禁止事件。
IRP_MN_EXECUTE_METHOD：执行托管对象的方法。
WMI使用一种名为MOF（Managed Object Format）的语言来描述托
管对象。MOF是基于IDL（Interface Definition Language）的，熟悉
COM编程的读者知道IDL是描述COM接口的一种主要方法。MOF有它
独有的语法，使用DMTF提供的DTD（Document Type Definition）可将
MOF文件转化为XML文件。驱动程序可以将编译好的MOF以资源方式
放在驱动程序文件中，或者将其放在其他文件中，然后在注册表中通过
MofImagePath键值给出其路径，也可以直接将MOF数据包含在代码中，
然后在收到IRP_MN_QUERY_ALL_DATA或
IRP_MN_QUERY_SINGLE_INSTANCE时将格式化后的数据包返回给
WMI。
为了更方便在WDM驱动程序中支持WMI，DDK还提供了一套WMI
库，只要在驱动程序中包含头文件wmilib.h，就可以使用其中的函数，
例如WmiFireEvent和WmiCompleteRequest等。Windows SDK和DDK中
都包含了演示WMI的实例，SDK中的示例程序位于Samples\
SysMgmt\WMI\目录下，DDK的示例程序位于src\wdm\wmi目录下。
16.5.3 性能计数器
图16-3所示的是Windows的性能监视器（performance monitor）程序
的界面，只要在“开始”菜单中选择“运行”（Run）然后输入perfmon，就
可以将其调出来。图16-3中目前显示了5个性能计数器（performance
counter），单击曲线上方的加号可以选择加入其他性能计数器。在典型
的Windows系统中，通常有上千个性能计数器，分别用来观察内存、
CPU、网络服务、.NET CLR、SQL Server、Outlook、ASP.NET、
Terminal Service等部件的内部状态。
图16-3 Windows的性能监视器程序的界面
Windows的性能监视机制是可以扩展的，图16-4画出了其架构示意
图。最上面是查询性能数据的应用程序，比如PerfMon，最下面是性能
数据提供模块DLL。Windows的system32目录已经预装了一些性能数据
提供模块，比如perfos.dll（操作系统）、perfdisk.dll（磁盘）、
perfnet.dll（网络）、perfproc.dll（进程）、perfts.dll（终端服务）等。
应用软件也可以安装和注册新的性能数据提供模块（稍后讨论）。
图16-4 Windows性能监视机制的架构示意图
每个性能数据提供模块（DLL）都至少输出以下3个方法：打开
（Open）、收集（Collect）数据和关闭（Close）。具体的方法名可以
自由定义，注册时登记在注册表中。图16-5显示了PerfGen模块的注册信
息，右侧的Open、Collect和Close 3个键值指定的是PerfGen.dll（Library
键值）输出的3个函数。
图16-5 性能监视数据提供模块的注册信息
性能监视程序访问性能数据提供模块的基本方式是通过注册表
API。首先调用RegOpenKey或RegQueryValueEx API并将
HKEY_PERFORMANCE_DATA作为第一个参数。当注册表API发现要
操作的根键是HKEY_PERFORMANCE_DATA时，会将其转给所谓的性
能监视函数库，即PerfLib。比如第一次执行以下调用时，PerfLib会寻找
ID号为234的性能数据提供模块，在作者的机器上它对应的是
PhysicalDisk性能对象。
RegQueryValueEx( HKEY_PERFORMANCE_DATA,
      "234", NULL, NULL, (LPBYTE) PerfData, &BufferSize )
PerfLib收到调用后，会枚举注册表中注册的所有服务，即枚举以下
表键。
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services
对于每个服务子键，PerfLib会试图打开它的Performance子键，如果
这个服务存在Performance子键，那么会进一步查询Performance子键下
的Object List键值（参见图16-5中PerfGen的注册表选项）。Object List键
值标识了这个性能数据提供模块所支持的性能对象ID，如果查询到的
Object List键值中包含所寻找的ID，那么PerfLib会根据Library键值中所
指定的DLL文件名加载这个模块，然后根据Open键值中指定的函数名取
得这个函数的地址并调用这个函数。因此，上面的RegQueryValueEx调
用会导致PerfLib加载perfdisk.dll，并调用它的Open方法，其函数调用序
列如清单16-9所示。
清单16-9 性能监视程序访问性能数据提供模块的过程
ChildEBP RetAddr  
0012f168 77e42180 perfdisk!OpenDiskObject
0012f858 77e40e5c ADVAPI32!OpenExtObjectLibrary+0x58f
0012f9cc 77e09c8e ADVAPI32!QueryExtensibleData+0x3d8
0012fda4 77df4406 ADVAPI32!PerfRegQueryValue+0x513
0012fe94 77dd7930 ADVAPI32!LocalBaseRegQueryValue+0x306
0012feec 00401500 ADVAPI32!RegQueryValueExA+0xde
0012ff80 00403b39 PerfView!main+0x70 [c:\...\chap16\perfview\perfview.cpp 
@ 212]
0012ffc0 7c816fd7 PerfView!mainCRTStartup+0xe9 [crt0.c @ 206]
0012fff0 00000000 kernel32!BaseProcessStart+0x23
性能数据提供模块的Open方法应该返回如下PERF_DATA_BLOCK
数据结构。
typedef struct _PERF_DATA_BLOCK {
  WCHAR Signature[4];               //结构签名，固定为"PERF"
  DWORD LittleEndian;               //字节排列顺序
  DWORD Version;                    //版本号
  DWORD Revision;                   //校订版本号
  DWORD TotalByteLength;            //性能数据的总长度、字节数
  DWORD HeaderLength;               //本结构的长度
  DWORD NumObjectTypes;             //被监视的对象类型个数
  DWORD DefaultObject;              //要显示的默认对象序号
  SYSTEMTIME SystemTime;            //UTC格式的系统时间
  LARGE_INTEGER PerfTime;           //性能计数器的取值
  LARGE_INTEGER PerfFreq;           //性能计数器的频率，即每秒钟的计数器变化量
  LARGE_INTEGER PerfTime100nSec;    //以100ns为单位的计数器取值
  DWORD SystemNameLength;           //以字节为单位的系统名称长度
  DWORD SystemNameOffset;           //系统名称的偏移量，相对于本结构的起始地址
} PERF_DATA_BLOCK;
紧邻PERF_DATA_BLOCK数据结构的应该是一个或多个
PERF_COUNTER_DEFINITION结构，每个结构对应一个性能计数器。
当第二次调用RegQueryValueEx时，PerfLib会认为正在查询性能数
据，因此会调用性能数据提供模块的Collect方法。当查询完成后，性能
监视程序应该调用RegCloseKey API结束查询。
Windows SDK中给出了一个性能数据提供模块的例子，其名称为
PerfGen，路径为：\Samples\WinBase\WinNT\PerfTool\PerfDllS\PerfGen。
其实性能数据提供模块就是一个输出了前面提到的Open、Collect和
Close方法的DLL。注册一个性能数据提供模块通常需要两个步骤。第
一步是使用一个.reg文件向注册表的
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services键值下
注册服务，其结果就是在注册表中建立图16-5所示的键值。第二步是使
用一个INI文件，然后利用命令行工具lodctr来向图16-6所示的Counter和
Help键值中增加性能对象。
图16-6 PerfLib在注册表中的英语语言键值
Counter键值的每个字符串对应一个性能计数器的ID或名称，Help
键值存储了每个性能对象的说明文字的ID和内容。计数器ID和说明ID是
相邻的，前者为偶数，后者为相邻的奇数。计数器ID是从2开始的，ID
1用来表示基础索引。
为了简化性能数据提供模块的实现过程，ATL类库提供了一系列
类，如CPerfObject、CPerfMon等。MSDN中提供了如下几个实例程序来
演示这些类的用法：PerformancePersist、PerformanceCounter、
PerformanceScribble。
使用unlodctr命令可以删除一个计数器模块。例如unlodctr perfgen命
令可以删除perfgen模块注册的性能计数器。
如果PerfLib在加载某个性能数据提供模块时遇到问题，那么它会向
系统日志中加入错误消息，例如，当加载PERFGEN.DLL失败时，系统
会产生以下日志。
Event Type:    Warning
Event Source:    WinMgmt
Event Category:    None
Event ID:    37…
Description: WMI ADAP was unable to load the perfgen.dll performance libra
ry due to an unknown problem within the library: 0x0
在软件中通过性能计数器来提高可观察性的好处是可以被所有性能
监视工具（包括PerfMon）所访问到，而且可以复用性能监视工具的图
形化显示功能。为了简化性能监视工具的编写，Windows提供了一个
PDH模块（PDH.DLL），PDH的全称是Performance Data Helper。
16.5.4 转储
16.2.3节简要地介绍过转储。可以认为转储是给被转储对象拍摄一
张快照，将被转储对象在转储发生那一时刻的特征永久定格在那里，然
后可以慢慢分析。另外，因为转储结果通常直接来自内存数据，所以转
储结果具有信息量大、准确度高等优点。16.2.3节介绍了对象转储，本
节将介绍进程转储。所谓进程转储，就是把一个进程在某一时刻的状态
存储到文件中。转储的内容通常包括进程的基本信息，进程中各个线程
的信息，每个线程的寄存器值和栈数据，进程所打开的句柄，进程的数
据段内容等。
进程转储通常用在进程发生严重错误时，比如Windows的WER机制
会在应用程序出现未处理异常时调用Dr. Watson自动产生转储（参见本
书后续分卷）。但事实上，当应用程序正常运行时，也可以进行转储，
而且这种转储不会影响应用程序继续运行。这意味着，从技术角度来
讲，完全可以通过热键或菜单项来触发一个进程让其对自身进行转储。
但这样做应该要考虑以下几个问题。
转储的过程要占用CPU时间和系统资源（磁盘访问），转储类型中
定义的信息种类越多，转储所花的开销也越大。
为了防止普通用户意外使用转储功能，最好定义一种机制，需要先
做一个准备动作（比如登录），然后才启动触发进程转储的热键或
者开启有关的菜单项。
转储中包含了应用程序的内存数据，其中可能包括用户的工作数
据。具体说，财务报表程序的转储中可能包含使用者的财务数据。
因此，应该注意转储文件的安全性和保密性。
使用WinDBG或Visual Studio 2005都可以打开并分析进程转储文
件，本书后续分卷将介绍过用户态转储文件的文件格式、产生方法和分
析方法。
16.5.5 打印或者输出调试信息
使用print这样的函数或OutputDebugString API输出调试信息对提高
软件的可观察性也是有帮助的。因为这些信息不仅可以提供变量取值等
状态信息，还可以提供代码执行位置这样的位置信息。但使用这种方法
应该注意以下几点。
努力提高输出信息的信息量，使其包含必要的上下文信息（线程
ID、模块名等）和具体的特征和状态，切忌不要频繁输出Error
happened这样的模糊信息。
信息要言简意赅，既易于理解，又不重复。重复的信息不但会对软
件的大小和运行速度造成影响，而且可能干扰调试者的注意力。
最好制订一种可以动态开启或者关闭的机制，在不需要输出信息的
时候不要输出大量信息，以免影响性能或者干扰调试。
关于重复输出某个信息的一个反面例子就是图16-7所示的某个病毒
扫描程序所输出的调试信息。根据图16-7中的时间信息可以判断出这个
程序输出的信息非常频繁，如此频繁的信息输出会明显地使系统变慢，
而且会干扰其他软件的调试。
图16-7 过多的调试信息输出
一个好的例子是当WinDBG与被调试系统成功建立内核调试会话时
WinDBG输出的描述信息。
Connected to Windows XP 2600 x86 compatible target, ptr64 FALSE
Kernel Debugger connection established.  (Initial Breakpoint requested)
Symbol search path is: 
SRV*d:\symbols*http://msdl.microsoft.com/download/symbols
Executable search path is: 
Windows XP Kernel Version 2600 MP (1 procs) Free x86 compatible
Built by: 2600.xpsp_sp2_gdr.050301-1519
Kernel base = 0x804d8000 PsLoadedModuleList = 0x805634a0
System Uptime: not available
第1行不仅陈述了连接的事实，还说明了目标系统的基本信息，系
统是Windows XP，版本号为2600，CPU架构为x86，并且32位系统（非
64位）。第2行表示与目标系统的调试引擎握手成功，并请求了初始断
点。第3～5行输出了当前的符号搜索路径和可执行文件搜索路径。第6
行输出了目标系统的详细版本信息，MP代表启动的是支持多处理器的
内核文件，括号中1 procs表示目前有一个CPU在工作，Free代表是发行
版本（非检查版本）。第7行给出了内核文件的构建信息。第8行是内核
模块的加载地址和用来记录内核模块链表表头的全局变量
PsLoadedModuleList的取值。
之所以说以上信息较好，是因为它很好地回答了调试时经常要用到
的基本信息，比如目标系统的软硬件情况（OS版本、CPU数量），本
地路径的设置情况和内核模块链表地址等。
16.5.6 日志
与输出到屏幕上或输出到调试窗口的调试信息相比，日志具有更好