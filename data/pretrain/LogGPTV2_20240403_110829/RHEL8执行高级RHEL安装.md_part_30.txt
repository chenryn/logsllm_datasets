    `swap`{.literal} 空间。它不能被用来创建 LVM 物理卷或 RAID 成员。
    :::
-   `--onbiosdisk`{.literal} - 强制在 BIOS 发现的特定磁盘中创建分区。
-   `--encrypted`{.literal} - 指定该分区应该用 LUKS 加密，使用
    `--passphrase`{.literal}
    选项中提供的密码短语。如果您没有指定密码短语，Anaconda 将使用
    `autopart --passphrase`{.literal}
    命令设定的默认系统级密码，或者停止安装并在未设定默认密码短语时提示您输入密码短语。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在加密一个或多个分区时， Anaconda 会尝试收集 256
    字节熵，以保证安全加密分区。收集熵可能需要一些时间 -
    无论是否有收集到足够的熵，该过程将在最多 10 分钟后停止。
    与安装系统互动（通过键盘输入或移动鼠标）可加速此进程。如果要在虚拟机中安装，也可以在
    `virtio-rng`{.literal} 客户端中添加设备（虚拟随机数生成器）。
    :::
-   `--luks-version=LUKS_VERSION`{.literal} - 指定应该用来加密文件系统的
    LUKS 格式版本。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--passphrase=`{.literal} -
    指定在加密这个分区时要使用的密码短语。这个选项必须与
    `--encrypted`{.literal} 选项一同使用，单独使用无效。
-   `--cipher=`{.literal} - 如果无法满足 Anaconda 的默认
    `aes-xts-plain64`{.literal} 设置，则需要指定加密类型。这个选项必须与
    `--encrypted`{.literal}
    选项一同使用，单独使用无效。[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/){.link}文档中列出了可用加密类型，但红帽强烈推荐您使用
    `aes-xts-plain64`{.literal} 或 `aes-cbc-essiv:sha256`{.literal}。
-   `--escrowcert=URL_of_X.509_certificate`{.literal} -
    将所有加密分区的数据加密密钥保存为文件 `/root`{.literal}，使用来自
    [*URL_of_X.509_certificate*]{.emphasis} 指定的 URL 的 X.509
    证书进行加密。每个加密分区的密钥都作为单独的文件保存。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--backuppassphrase`{.literal} -
    为每个加密分区添加随机生成的密码短语。将这些密码短语以独立文件形式保存到
    `/root`{.literal}，使用由 `--escrowcert`{.literal} 指定的 X.509
    证书加密。只有在指定了 `--escrowcert`{.literal} 时这个选项才有意义。
-   `--pbkdf=PBKDF`{.literal} - 为 LUKS keylot 设置
    PBKDF（Password-Based Key Derivation Function）算法。另请参阅 man
    page [*cryptsetup(8)*]{.emphasis}。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--pbkdf-memory=PBKDF_MEMORY`{.literal} - 为 PBKDF
    设置内存成本。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--pbkdf-time=PBKDF_TIME`{.literal} - 设置 PBKDF
    密码处理所消耗的毫秒数。详情请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的 `--iter-time`{.literal}
    部分。这个选项只在指定了 `--encrypted`{.literal} 时才有意义，并且与
    `--pbkdf-iterations`{.literal} 相互排斥。
-   `--pbkdf-iterations=PBKDF_ITERATIONS`{.literal} -
    设定直接迭代的次数，并避免 PBKDF 基准数据。详情请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的
    `--pbkdf-force-iterations`{.literal} 部分。这个选项只在指定了
    `--encrypted`{.literal} 时才有意义，并且与 `--pbkdf-time`{.literal}
    相互排斥。
-   `--resize=`{.literal} - 重新定义现有分区大小。使用这个选项时，使用
    `--size=`{.literal} 选项指定目标的大小（单位 MiB），使用
    `--onpart=`{.literal} 指定目标分区。
:::
::: itemizedlist
**备注**
-   `part`{.literal} 命令不是强制的，但您必须在 Kickstart 脚本中包含
    `part`{.literal}、`autopart`{.literal} 或 `mount`{.literal}
-   该 `--active`{.literal} 选项在 Red Hat Enterprise Linux 8 中已弃用。
-   如果因为某种原因分区失败，虚拟控制台 3 中会显示诊断信息。
-   所有创建的分区都会作为安装过程的一部分进行格式化，除非
    `--noformat`{.literal} 和 `--onpart`{.literal} 被使用。
-   使用 `sdX`{.literal} （或
    `/dev/sdX`{.literal}）格式的设备名称在重启后可能无法保证它们的一致性，这会使一些
    Kickstart
    命令的使用变得复杂。当某个命令调用设备节点名称时，您可以使用
    `/dev/disk`{.literal} 中的任何项目。例如，改为：
    ``` screen
    part / --fstype=xfs --onpart=sda1
    ```
    您可以使用类似以下条目之一：
    ``` screen
    part / --fstype=xfs --onpart=/dev/disk/by-path/pci-0000:00:05.0-scsi-0:0:0:0-part1
    ```
    ``` screen
    part / --fstype=xfs --onpart=/dev/disk/by-id/ata-ST3160815AS_6RA0C882-part1
    ```
    这样命令总是以同一存储设备为目标。这在大型存储环境中特别有用。相关详情，请参阅[*管理存储设备*]{.emphasis}文档中的[持久性名称属性概述](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/configuring_and_managing_storage_devices/index#assembly_overview-of-persistent-naming-attributes_managing-storage-devices){.link}部分。
-   如果您丢失了 LUKS
    密码短语，那么就完全无法访问所有加密的分区及其数据。丢失的密码短语是无法找回的。但是，您可以使用
    `--escrowcert`{.literal} 选项保存加密密码短语，并使用
    `--backuppassphrase`{.literal} 生成加密密码短语备份。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#raid_kickstart-commands-for-handling-storage}raid {.title}
:::
`raid`{.literal} Kickstart 命令是可选的。它组成一个软件 RAID 设备。
::: title
**语法**
:::
``` screen
raid mntpoint --level=level --device=device-name partitions*
```
::: itemizedlist
**选项**
-   [*mntpoint*]{.emphasis} - 挂载 RAID 文件系统的位置。如果是
    `/`{.literal}，RAID 级别必须是
    1，除非引导分区(`/boot`{.literal})存在。如果引导分区存在，`/boot`{.literal}
    分区必须是级别
    1，root（`/`{.literal}）分区可以是任何可用的类型。[*partitions\**]{.emphasis}
    （代表多个分区可以被列举）列出了要添加到 RAID 阵列的 RAID 标记。
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    在 IBM Power 系统中，如果一个 RAID
    设备已经准备好，且在安装过程中没有重新格式化，请确定 RAID
    元数据版本是 `0.90`{.literal} 您要将 RAID 设备 `/boot`{.literal} 和
    `PReP`{.literal} 分区放在一起。
    默认 Red Hat Enterprise Linux 7 `mdadm`{.literal}
    元数据版本不支持引导设备。
    :::
-   `--level=`{.literal} - 要使用的 RAID 级别（0、1、4、5、6 或者
    10）。有关各种可用 RAID 级别的详情，请查看 ["支持的 RAID
    类型"一节](#partitioning-reference_installing-rhel-as-an-experienced-user.html#supported-raid-types_partitioning-reference "支持的 RAID 类型"){.xref}。
-   `--device=`{.literal} - 要使用的 RAID 设备名称 - 例如
    `--device=root`{.literal}:
    ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 重要 {.title}
    不要使用 `md0`{.literal} 格式的 `mdraid`{.literal} 名称 -
    无法保证这些名称具有持久性。应该使用有意义的名称，比如
    `root`{.literal} 或者
    `swap`{.literal}。使用有含义的名称可生成一个符号链接
    `/dev/md/name`{.literal} ，在 `/dev/mdX`{.literal}
    其间为该阵列分配节点。
    如果您有一个无法为其分配名称的旧阵列（v0.90
    元数据），您可以使用文件系统标签或者 UUID（例如：
    `--device=rhel7-root --label=rhel7-root`{.literal}）指定该阵列。
    :::
-   `--chunksize=`{.literal} - 以 KiB 为单位设定 RAID
    存储的块大小。在某些情况下，使用不同于默认(`512 Kib`{.literal})的块大小可提高
    RAID 的性能。
-   `--spares=`{.literal} - 指定为 RAID
    阵列分配的备用驱动器数目。可使用备用驱动器在驱动器失败时重建阵列。
-   `--fsprofile=`{.literal} -
    指定传递给在这个分区上创建文件系统的程序的使用类型。使用类型定义了创建文件系统时使用的各种微调参数。要使用这个选项，文件系统必须支持使用类型，且必须有一个配置文件来列出有效类型。对于
    ext2、ext3 和 ext4,这个配置文件是 `/etc/mke2fs.conf`{.literal}。
-   `--fstype=`{.literal} - 为 RAID 阵列设置文件系统类型。有效值包括
    `xfs`{.literal}、`ext2`{.literal}、`ext3`{.literal}、`ext4`{.literal}、`swap`{.literal}
    和 `vfat`{.literal}。
-   `--fsoptions=`{.literal} -
    指定在挂载文件系统时所用选项的自由格式字符串。这个字符串将被复制到安装的系统的
    `/etc/fstab`{.literal} 文件中，并使用引号括起来。
-   `--mkfsoptions=`{.literal} -
    指定要传递给在这个分区上创建文件系统的程序的其他参数。没有对参数列表进行任何操作，因此必须以可直接传递给
    mkfs
    程序的格式提供。这意味着，根据具体文件系统，多个选项应该用逗号分开，或使用双引号分开。
-   `--label=`{.literal} -
    指定要生成的文件系统的标签。如果给定标签已被另一个文件系统使用，则会创建一个新标签。
-   `--noformat`{.literal} - 使用现有的 RAID 设备，且不要格式化 RAID
    阵列。
-   `--useexisting`{.literal} - 使用现有的 RAID 设备并重新格式化它。
-   `--encrypted`{.literal} - 指定该 RAID 应该用 LUKS 加密，使用
    `--passphrase`{.literal}
    选项中提供的密码短语。如果您没有指定密码短语，Anaconda 将使用
    `autopart --passphrase`{.literal}
    命令设定的默认系统级密码，或者停止安装并在未设定默认密码短语时提示您输入密码短语。
    ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 注意 {.title}
    在加密一个或多个分区时， Anaconda 会尝试收集 256
    字节熵，以保证安全加密分区。收集熵可能需要一些时间 -
    无论是否有收集到足够的熵，该过程将在最多 10 分钟后停止。
    与安装系统互动（通过键盘输入或移动鼠标）可加速此进程。如果要在虚拟机中安装，也可以在
    `virtio-rng`{.literal} 客户端中添加设备（虚拟随机数生成器）。
    :::
-   `--luks-version=LUKS_VERSION`{.literal} - 指定应该用来加密文件系统的
    LUKS 格式版本。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--cipher=`{.literal} - 如果无法满足 Anaconda 的默认
    `aes-xts-plain64`{.literal} 设置，则需要指定加密类型。这个选项必须与
    `--encrypted`{.literal}
    选项一同使用，单独使用无效。[安全强化](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/security_hardening/){.link}文档中列出了可用加密类型，但红帽强烈推荐您使用
    `aes-xts-plain64`{.literal} 或 `aes-cbc-essiv:sha256`{.literal}。
-   `--passphrase=`{.literal} - 指定在加密这个 RAID
    设备时要使用的密码短语。这个选项必须与 `--encrypted`{.literal}
    选项一同使用，单独使用无效。
-   `--escrowcert=URL_of_X.509_certificate`{.literal} -
    将这个设备的数据加密密钥保存在 `/root`{.literal}
    中的一个文件中，使用来自 [*URL_of_X.509_certificate*]{.emphasis}
    指定的 URL 的 X.509 证书加密。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--backuppassphrase`{.literal} -
    为这个设备添加随机生成的密码短语。使用由 `--escrowcert`{.literal}
    指定的 X.509 证书进行加密，并保存在 `/root`{.literal}
    的一个文件中。只有在指定了 `--escrowcert`{.literal}
    时这个选项才有意义。
-   `--pbkdf=PBKDF`{.literal} - 为 LUKS keylot 设置
    PBKDF（Password-Based Key Derivation Function）算法。另请参阅 man
    page [*cryptsetup(8)*]{.emphasis}。只有在指定了
    `--encrypted`{.literal} 时这个选项才有意义。
-   `--pbkdf-memory=PBKDF_MEMORY`{.literal} - 为 PBKDF
    设置内存成本。另请参阅 man page
    [*cryptsetup(8)*]{.emphasis}。只有在指定了 `--encrypted`{.literal}
    时这个选项才有意义。
-   `--pbkdf-time=PBKDF_TIME`{.literal} - 设置 PBKDF
    密码处理所消耗的毫秒数。详情请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的 `--iter-time`{.literal}
    部分。这个选项只在指定了 `--encrypted`{.literal} 时才有意义，并且与
    `--pbkdf-iterations`{.literal} 相互排斥。
-   `--pbkdf-iterations=PBKDF_ITERATIONS`{.literal} -
    设定直接迭代的次数，并避免 PBKDF 基准数据。详情请参阅 man page
    [*cryptsetup(8)*]{.emphasis} 中的
    `--pbkdf-force-iterations`{.literal} 部分。这个选项只在指定了
    `--encrypted`{.literal} 时才有意义，并且与 `--pbkdf-time`{.literal}
    相互排斥。
:::
::: title
**示例**
:::
下面的例子展示，假定系统里有三个 SCSI 磁，如何为 `/`{.literal} 创建 RAID
1 分区，为 `/home`{.literal} 创建 RAID
5。它还创建三个交换分区，每个驱动器都有一个。
``` screen
part raid.01 --size=6000 --ondisk=sda
part raid.02 --size=6000 --ondisk=sdb
part raid.03 --size=6000 --ondisk=sdc
part swap --size=512 --ondisk=sda
part swap --size=512 --ondisk=sdb
part swap --size=512 --ondisk=sdc
part raid.11 --size=1 --grow --ondisk=sda
part raid.12 --size=1 --grow --ondisk=sdb
part raid.13 --size=1 --grow --ondisk=sdc
raid / --level=1 --device=rhel8-root --label=rhel8-root raid.01 raid.02 raid.03
raid /home --level=5 --device=rhel8-home --label=rhel8-home raid.11 raid.12 raid.13
```
::: itemizedlist
**备注**
-   如果您丢失了 LUKS
    密码短语，那么就完全无法访问所有加密的分区及其数据。丢失的密码短语是无法找回的。但是，您可以使用
    `--escrowcert`{.literal} 选项保存加密密码短语，并使用
    `--backuppassphrase`{.literal} 生成加密密码短语备份。
:::
:::
::: section
::: titlepage
## []{#kickstart-commands-and-options-reference_installing-rhel-as-an-experienced-user.html#reqpart_kickstart-commands-for-handling-storage}reqpart {.title}
:::
`reqpart`{.literal} Kickstart
命令是可选的。它自动创建您的硬件平台所需的分区。这为带有 UEFI
固件的系统包括一个 `/boot/efi`{.literal} 分区，带有 BIOS 固件和 GPT
的系统包括 `biosboot`{.literal} 分区，为 IBM Power 系统包括
`PRePBoot`{.literal} 分区。
::: title
**语法**
:::
``` screen
reqpart [--add-boot]
```
::: itemizedlist
**选项**
-   `--add-boot`{.literal} - 除使用基本命令创建 `/boot`{.literal}
    的具体平台分区外，还可创建单独的分区。
:::
::: itemizedlist
**备注**
-   这个命令不能与 `autopart`{.literal}
    命令一同使用，因为`autopart`{.literal} 会做所有 `reqpart`{.literal}
    命令要做的命令，另外，还创建其他分区或者逻辑卷，比如 `/`{.literal}
    和 `swap`{.literal}。与 `autopart`{.literal}
    不同，这个命令只创建具体平台的分区，并让驱动器的其它部分留空，以便您创建自定义布局。
:::
:::