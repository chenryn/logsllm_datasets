# 实时精准营销解决方案

## 概述
本方案通过标签圈选、相似扩选和用户画像等手段，实现高效且精准的实时营销。本文档将详细介绍基于阿里云的技术栈，包括如何使用PostgreSQL (PG) 和MySQL来构建这一系统。

## 目录
1. 圈选目标客户
    - 基于标签条件
2. 扩展相似人群
    - 基于用户特征值
3. 用户画像
    - 群体分析
4. 技术实现
5. 一期开课计划
6. 课程习题与技术社群

### 圈选目标客户
#### 基于标签条件
- **步骤**:
  1. 定义标签字典表。
  2. 为用户打标签。
  3. 使用标签进行用户筛选。

- **示例**:
  ```sql
  -- 创建标签字典表
  CREATE TABLE t_tag_dict (
      tag INT PRIMARY KEY,  -- 标签ID
      info TEXT,            -- 标签描述
      crt_time TIMESTAMP    -- 创建时间
  );

  -- 插入初始标签数据
  INSERT INTO t_tag_dict VALUES (1, '男', NOW());
  INSERT INTO t_tag_dict VALUES (2, '女', NOW());
  INSERT INTO t_tag_dict VALUES (3, '大于24岁', NOW());

  -- 自动生成更多标签
  INSERT INTO t_tag_dict
  SELECT generate_series(4, 100000), md5(random()::text), clock_timestamp();

  -- 创建用户标签表
  CREATE TABLE t_user_tags (
      uid INT8 PRIMARY KEY,   -- 用户ID
      tags INT[],             -- 用户标签数组
      mod_time TIMESTAMP      -- 更新时间
  );

  -- 生成随机标签并为用户打标
  CREATE OR REPLACE FUNCTION gen_rand_tags(int, int) RETURNS INT[] AS $$
  SELECT array_agg(ceil(random()*$1)::int) FROM generate_series(1,$2);
  $$ LANGUAGE SQL STRICT;

  -- 给2000万用户打标签
  INSERT INTO t_user_tags
  SELECT generate_series(1, 10000000),
         array_append(gen_rand_tags(100000, 63), 1), now();
  INSERT INTO t_user_tags
  SELECT generate_series(10000001, 20000000),
         array_append(gen_rand_tags(100000, 63), 2), now();

  -- 创建倒排索引
  CREATE INDEX idx_t_user_tags_1 ON t_user_tags USING GIN (tags);

  -- 查询包含特定标签的用户
  SELECT COUNT(uid) FROM t_user_tags WHERE tags @> ARRAY[1, 3];
  ```

### 扩展相似人群
#### 基于用户特征值
- **方法**:
  1. 特征向量表示用户属性。
  2. 使用欧氏距离或内积距离计算相似度。
  3. 通过近似最近邻搜索算法（如IVFFlat或HNSW）加速查询。

- **示例**:
  ```sql
  -- 创建扩展roaringbitmap插件
  CREATE EXTENSION roaringbitmap;

  -- 创建标签和用户位图表
  CREATE TABLE t_tag_users (
      tagid INT PRIMARY KEY,  -- 标签ID
      uid_offset INT,         -- 用户ID偏移量
      userbits ROARINGBITMAP, -- 用户ID位图
      mod_time TIMESTAMP      -- 更新时间
  );

  -- 生成标签和用户位图
  INSERT INTO t_tag_users
  SELECT tagid, uid_offset, rb_build_agg(uid::INT) AS userbits
  FROM (
      SELECT unnest(tags) AS tagid,
             (uid / (2^31)::INT8) AS uid_offset,
             MOD(uid, (2^31)::INT8) AS uid
      FROM t_user_tags
  ) t
  GROUP BY tagid, uid_offset;
  ```

### 用户画像
#### 群体分析
- **步骤**:
  1. 定义用户特征向量。
  2. 构建向量索引。
  3. 进行相似性搜索。

- **示例**:
  ```sql
  -- 创建向量扩展插件
  CREATE EXTENSION pase;

  -- 创建用户特征向量表
  CREATE TABLE t_user_vec (
      uid SERIAL8 PRIMARY KEY,  -- 用户ID
      vec FLOAT4[]              -- 特征向量
  );

  -- 生成随机特征向量
  CREATE OR REPLACE FUNCTION gen_float4_arr(INT, INT) RETURNS FLOAT4[] AS $$
  SELECT array_agg(trunc(random()*$1)::FLOAT4) FROM generate_series(1,$2);
  $$ LANGUAGE SQL STRICT VOLATILE;

  -- 插入测试数据
  INSERT INTO t_user_vec (vec)
  SELECT gen_float4_arr(10000, 16) FROM generate_series(1, 1000000);

  -- 创建向量索引
  CREATE INDEX idx_t_user_vec_1 ON t_user_vec USING pase_ivfflat (vec) WITH
  (clustering_type = 1, distance_type = 0, dimension = 16, clustering_params = "10,1001");

  -- 查询相似用户
  SELECT uid, vec
  FROM t_user_vec
  ORDER BY vec <-> '8680,3850,7236,3424,7704,159,1496,1981,3344,1209,4635,2011,7466,1832,7589,1553'::pase
  LIMIT 10;
  ```

### 方案比较
- **方案1 (user->tags)**:
  - 与查询速度: 42毫秒
  - 或查询速度: 3秒
  - 表空间占用: 3126MB
  - 索引空间占用: 3139MB
  - 建立索引速度: 20分钟

- **方案2 (tagid->user_bitmap)**:
  - 与查询速度: 1.5毫秒
  - 或查询速度: 1.5毫秒
  - 表空间占用: 1390MB
  - 索引空间占用: 2MB
  - 建立索引速度: 0秒

### 一期开课计划
- **课程安排**:
  - 2019.12.30 19:30 RDS PG产品概览，如何与MySQL结合使用
  - 2019.12.31 19:30 如何连接PG，GUI，CLI的使用
  - 2020.1.3 19:30 如何压测PG数据库、如何瞬间构造海量测试数据
  - 2020.1.6 19:30 MySQL与PG对比学习(面向开发者)
  - 2020.1.7 19:30 如何将MySQL数据同步到PG（DTS）
  - 2020.1.8 19:30 PG外部表妙用 - mysql_fdw, oss_fdw（直接读写MySQL数据、冷热分离）
  - 2020.1.9 19:30 PG应用场景介绍 - 并行计算，实时分析
  - 2020.1.10 19:30 PG应用场景介绍 - GIS
  - 2020.1.13 19:30 PG应用场景介绍 - 用户画像、实时营销系统
  - 2020.1.14 19:30 PG应用场景介绍 - 多维搜索
  - 2020.1.15 19:30 PG应用场景介绍 - 向量计算、图像搜索
  - 2020.1.16 19:30 PG应用场景介绍 - 全文检索、模糊查询
  - 2020.1.17 19:30 PG 数据分析语法介绍
  - 2020.1.18 19:30 PG 更多功能了解：扩展语法、索引、类型、存储过程与函数。如何加入PG技术社群

### 课程习题
- 基于标签圈选用户有哪几种典型的设计？
- 用户圈选不同设计方法的优劣是什么？
- 什么插件可以存储用户ID映射而成的比特流？
- 多维向量之间的距离有哪些计算方法？
- 多维向量按距离由近到远排序有什么加速方法？
- pase插件已经支持了哪些向量搜索算法？
- 用户画像透视有什么加速方法？

### 技术社群
- **PG技术交流钉钉群**: 3500+人

希望以上内容对您有所帮助！如有任何问题，请随时联系。