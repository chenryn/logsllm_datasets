(cid:80)
mal solution is one in which the charging volumes are 0 for all but
one ISP. More speciﬁcally, let k0 = argmink[ck(V0)− ck(0)]. De-
k) ≤
ﬁne p∗
k = V0 when k = k0 and 0 otherwise. We have
k ck(pk) for any pk satisfying
For general cost functions (e.g., non-decreasing step functions),
it is more involved to determine the optimal charging volumes pk
(which minimize
k pk = V0). Below we
introduce a dynamic programming algorithm to solve this problem.
Let opt(v, k) be the optimal cost for serving trafﬁc volume v by the
ﬁrst k ISPs. We have:
k ck(pk) subject to
k pk = V0.
k ck(p∗
(cid:80)
(cid:80)
(cid:40)
opt(v, k) =
c1(v)
min
0≤x≤v
k = 1
{opt(v − x, k − 1) + ck(x)} k > 1.
We can start from opt(v, 1) and compute opt(v, k) based on the
above recurrence relation, while keeping track of the corresponding
allocations. The value of opt(V0, K) gives the optimal cost, and its
corresponding allocation determines pk. The time complexity of
the algorithm is O(K · V 2
0 ); the space complexity is O(K · V0).
Note that the above algorithm assumes that the desired precision
is one. In practice, this may not be necessary, since the cut points
of the pricing curve are often very coarse-grained.
It is easy to
handle any desired precision through discretization. For example,
if we want V0 and pk to be accurate up to 100, we only need to
compute opt(v, k) when v is a multiple of 100. This reduces both
time and space complexity. More precisely, with precision P , the
time and space complexity of the algorithm will be O(K·(V0/P )2)
and O(K· V0/P ), respectively. In practice, we typically only need
to handle K ≤ 10 and V0/P ≤ 1000, so the complexity of the
algorithm is quite low.
4.2.3 Trafﬁc Assignment Given Charging Volumes
Given the charging volumes, namely pk for ISP k, next we de-
scribe how to assign trafﬁc during each time interval. The goal of
trafﬁc assignment is to ensure that pk is the charging volume for
ISP k; that is, for qk ∗ I intervals, the trafﬁc volumes assigned to
ISP k are less than or equal to pk, and ISP k is only allowed to
serve more than pk for the remaining (1 − qk) ∗ I intervals. This
can be achieved by dividing intervals into non-peak intervals and
peak intervals.
According to the deﬁnition of V0, during the intervals when to-
tal trafﬁc volumes are no larger than V0, all trafﬁc can be assigned
without having any ISP receiving trafﬁc more than its charging vol-
ume. Therefore, we call these intervals non-peak intervals. For the
remaining intervals, at least one ISP needs to serve trafﬁc more than
its charging volume. As a result, we call the latter intervals peak
intervals. We will use this terminology throughout this paper.
Based on the above deﬁnitions of peak and non-peak intervals,
we assign trafﬁc in the following way. If an interval is a non-peak
interval, we assign trafﬁc such that the trafﬁc assigned to ISP k is
less than or equal to pk. There are multiple ways to assign trafﬁc to
satisfy the above constraint, and all of these assignments give the
same cost. Therefore, we can pick any one of them. In Section 5,
we will take advantage of such ﬂexibility to improve performance.
For a peak interval, we randomly select an ISP k to burst (i.e., its
assigned trafﬁc exceeds pk). This is done by assigning each of the
remaining ISPs its charging volume pk, and then assigning all re-
maining trafﬁc to the burst ISP. This is feasible because we assume
that ISPs do not have capacity constraints. (We will study the case
of limited capacity in the following section.)
Putting everything together, we have the algorithm shown in Fig-
ure 3 to minimize cost for splittable ﬂows. It is easy to see that pk is
ensured as the charging volume for ISP k, since ISP k serves more
than pk for exactly (1 − qk) ∗ I intervals. Since the sum of the
achieved pk is equal to V0, according to Theorem 2, the algorithm
achieves minimum cost.
(cid:80)
(cid:80)
k(1 − qk)) ∗ I non-peak interval
k ck(pk) subject to
k pk = V0
ﬁnd V0
ﬁnd pk by minimizing
for each (1 −(cid:80)
(cid:80)
for each
k(1 − qk) ∗ I peak interval
trafﬁc assigned to ISP k is less than or equal to pk
pick ISP k that has bursted fewer than (1 − qk) ∗ I intervals
assign pk + vi − V0 to ISP k
assign pk(cid:48) to ISP k(cid:48), where k (cid:54)= k(cid:48)
Figure 3: An ofﬂine optimal ﬂow assignment algorithm for
splittable ﬂows under the percentile-based charging model and
without capacity constraints.
4.2.4 Dealing with Capacity Constraints
The previous algorithm assumes that ISPs do not have capacity
constraints (i.e., they each can carry all trafﬁc in an interval). This
is a reasonable assumption as multihoming is often used to provide
high reliability—even if all other ISPs fail, a user can still send out
trafﬁc using the single remaining ISP. However, it is still possible
that a single ISP may not always have enough capacity to handle
all of the trafﬁc.
// initialize the fraction of peak intervals
(cid:80)
k(1 − qk)
f =
assignable = false
while assignable is false
V0 = qt(V, 1 − f )
ﬁnd pk by minimizing
assignable = IsPeakAssignable(V, V0, f, {pk})
reduce f by ∆ if assignable is false
each ISP k bursts in at most (1 − qk) ∗ I intervals, and
there is enough total capacity for each peak interval
assign f ∗ I peak intervals such that
k ck(pk) subject to
(cid:80)
(cid:80)
k pk = V0
Figure 4: The global fractional ofﬂine assignment (GFA-ofﬂine)
algorithm: an algorithm for percentile-based charging with
link capacity constraints. The cost function ck(x) is assumed
to be ∞ if x exceeds the capacity of ISP k. The constant ∆ con-
trols the step size when we search for f, the largest assignable
fraction of peak intervals (∆ = 0.01 in our evaluations).
We use the algorithm in Figure 4 to accommodate such capac-
ity constraints. The basic idea is to properly choose the fraction of
peak intervals, denoted as f, so that there are multiple burst ISPs
during each peak interval that together provide enough total capac-
ity to carry all of the trafﬁc. More formally, given f and the corre-
sponding V0 and pk (computed inside the while-loop in Figure 4),
we need to know IsPeakAssignable(V, V0, f,{pk}), i.e., whether
it is possible to assign different ISPs to burst in f ∗ I peak intervals
so that (i) no ISP k bursts more than (1 − qk) ∗ I intervals, and (ii)
there is enough total capacity in each peak interval.
trafﬁc in any peak interval. A sufﬁcient condition for g is
Let g denote a set of ISPs that when bursting together can carry
k∈g Ck +
k(cid:48) /∈g pk(cid:48) ≥ maxLoad, where Ck is the capacity of link k and
maxLoad is the maximum load of a charging period. Let tg de-
note the number of intervals during which the ISPs in group g burst.
Let G be the set of all (2K) possible ISP groups. When the fol-
lowing conditions hold, there exists a peak interval assignment and
IsPeakAssignable(V, V0, f,{pk}) returns true.
(cid:80)
(cid:80)
(cid:88)
g∈G
max
tg ≥ f ∗ I
tg ≤ (1 − qk) ∗ I for all k.
(cid:88)
g: k∈g
A few comments follow. First, K is usually small (e.g., below
10), so the number of variables is manageable. Second, the above
conditions are sufﬁcient but not necessary, because the conditions
ensure that we have an assignment even when the trafﬁc load dur-
ing a peak interval is always equal to the maximum load. However,
since the load during a peak interval may be smaller than the max-
imum load (e.g., the 95th-percentile load is smaller than the maxi-
mum load), it is possible to have a peak-load assignment even when
the above conditions are not satisﬁed. When the difference between
the maximum load and the smallest peak load is small, the condi-
tions are tight. Third, all these constraints are linear constraints,
so we can determine the existence of a peak load assignment by
solving an integer programming problem. Since the number of in-
tervals is large, in practice we ﬁrst solve the problem without the
integer constraints and then use rounding to derive the results.
We refer to this assignment algorithm as global fractional ofﬂine
assignment (GFA-ofﬂine).
4.3 Online Integral Assignment Algorithms
The ofﬂine fractional assignment algorithms described in the pre-
vious sections assume that trafﬁc patterns are known in advance and
that ﬂows are splittable. In practice, trafﬁc patterns are not given a
priori. Moreover, one may prefer not to split ﬂows (to reduce con-
trol overhead, e.g., when BGP is in use).2 In this section, we present
online integral assignment algorithms to address both issues. Our
solution consists of two steps:
1. Predict the trafﬁc and V0 in the next interval.
2. Compute an integral assignment based on predicted trafﬁc.
We will now describe each step in detail.
4.3.1 Predicting Trafﬁc and V0
First, as shown in Figure 5, we predict total and per-ﬂow trafﬁc
using an exponentially weighted moving average (EWMA). That
is, Prediction = β∗currTraﬃc +(1−β)∗Prediction. Note that
β = 1 corresponds to predicting trafﬁc using only the preceding
interval. Our evaluation shows that the predictions with β < 1 and
β = 1 yield very similar performance.
There are several technical details about trafﬁc prediction worth
mentioning. First, to avoid keeping history for too many ﬂows,
we periodically remove the ﬂows with the smallest predicted trafﬁc
volumes. Second, when a ﬂow appears for the ﬁrst time, we will
directly use its trafﬁc volume in the current interval to predict its
trafﬁc in the next interval (since it does not have any other history
yet). Third, since the predicted total trafﬁc may not match the sum
of the predicted trafﬁc of the ﬂows that we keep track of, we add a
normalization step shown in the algorithm.
Besides the trafﬁc, we also need to predict V0 in order to decide
whether the next interval is a peak interval. Clearly, if we underesti-
mate V0, then we may end up exhausting the quota of peak intervals
too early, thus increasing the total cost due to increased charging
volumes of individual ISPs. To avoid this penalty, we update V0 in
the following conservative way. We use the V0 in the past charg-
ing period as an initial estimate of V0. We also maintain a sliding
window (with length equal to the charging period) and after each
interval we compute the V0 value for the most recent sliding win-
dow, denoted as V (cid:48)
0 exceeds V0, we increase V0 to
2Avoiding splitting may cause packet losses. Our evaluations show
that these loss rates are very low.
0 . Whenever V (cid:48)
// update trafﬁc prediction at interval i using EWMA
PredictTrafﬁc() {
PredictedTotal = β ∗ v[i] + (1 − β) ∗ PredictedTotal
for each ﬂow f appearing in interval i or in PredictedFlow
if ﬂow f does not appear in PredictedFlow
[i]
PredictedFlow (f ) = v
f
else
PredictedFlow (f ) = β ∗ v
[i]
f + (1 − β) ∗ PredictedFlow (f )
if PredictedFlow has more than 2*MAX FLOW NUM ﬂows
keep only the MAX FLOW NUM largest ﬂows
normalize trafﬁc in PredictedFlow such that
f PredictedFlow (f ) = PredictedTotal
(cid:80)
}
Figure 5: The PredictTraffic() subroutine: predicting
total and per-ﬂow trafﬁc volumes.
γ · V (cid:48)
0 and recompute all the charging volumes based on the new
V0. For our traces, with γ = 1.05 we are able to track increases in
V0 quickly without overshooting too much.
When recomputing the charging volumes, we need to ensure that
for every k the new charging volume p(cid:48)
k is no less than the old
charging volume pk. Otherwise, with p(cid:48)
k < pk, there may be
many (possibly more than (1 − qk)I) past intervals in which we
assign more than p(cid:48)
k (but less than pk) amount of trafﬁc to ISP k,
thus making it difﬁcult to ensure qt(Tk, qk) = p(cid:48)
k. We can apply
the same dynamic programming algorithm as in Section 4.2.2.2 to
compute {p(cid:48)
k}; the lower bounds {pk} can be easily enforced by
setting ck(x) = ∞ for all x < pk.
4.3.2 Performing Ofﬂine Integral Assignment
We ﬁrst note that even in an ofﬂine setting with perfect knowl-
edge of trafﬁc, the integral assignment problem is already hard.
More speciﬁcally, we have the following negative result (please see
Appendix B for its proof):
THEOREM 5. There is no polynomial-time algorithm that can
achieve a constant approximation ratio for integral assignment with
general cost functions, unless P=NP.
The above negative result makes it very natural to consider ap-
proximation algorithms. We propose the following (ofﬂine) greedy
algorithm for integral assignment. As shown in Figure 6, we ﬁrst
run the ofﬂine fractional ﬂow assignment algorithm to ﬁnd the charg-
ing volumes pk. Based on pk for ISP k, we then compute the tar-
geted amount of trafﬁc to be assigned to it; we call this value its
pseudo capacity during the interval (abbreviated as PseudoCap).
For a non-peak interval or a peak interval in which ISP k is not a
burst ISP, the pseudo capacity of ISP k is its charging volume com-
puted by the fractional assignment algorithm; for a peak interval in
which ISP k is a burst ISP, its pseudo capacity is its link capacity
Ck. Our goal is to ensure that the trafﬁc assigned to any ISP does
not exceed its pseudo capacity.
Conceptually, this is a problem similar to bin packing, and can
therefore be solved using a greedy heuristic. Speciﬁcally, we can
initialize each ISP with its pseudo capacity, sort the ﬂows in de-
scending order of the trafﬁc volumes they generate, and then itera-
tively assign the ﬂows to the ISP with the largest remaining pseudo
capacity. The actual algorithm in Figure 6 splits this conceptual
greedy assignment process into two separate steps. It ﬁrst tries to
assign trafﬁc using pk as the bin size, and then reﬁlls the bin size by
(PseudoCapk−pk) and assigns the remaining trafﬁc. We ﬁnd that
using such a two-step approach makes it more likely for there to be