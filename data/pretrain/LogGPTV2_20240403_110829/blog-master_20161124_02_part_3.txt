inout i_train_num name,     
inout i_fstation text,     
inout i_tstation text,    
inout i_go_date date,    
inout i_sits int, -- 购买多少张  
out o_slevel text,    
out o_bucket_no int,    
out o_sit_no int,    
out o_order_status boolean    
)     
declare  
  vid int[];  
begin  
-- 锁定席位  
open cursor for  
select array_agg(id) into vid[] from table   
  where column1='车次号'   -- 指定车次  
  and column2='车次日期'   -- 指定发车日期  
  -- and mod(pg_backend_pid(),100) = mod(pk,100)   -- 提高并发，如果有多个连接并发的在更新，可以直接分开落到不同的行，但是可能某些pID卖完了，可能会找不到票，建议不要开启这个条件  
  and column4='席别'  -- 指定席别  
  and getbit(column3, 开始站点位置, 结束站点位置-1) = '0...0'  -- 获取起始位置的BIT位，要求全部为0  
  order by column3 desc   -- 这个目的是先把已经卖了散票的的座位拿来卖，也符合铁大哥的思想，尽量把起点和重点的票卖出去，减少空洞  
  for update  
  skip locked  -- 跳过被锁的行，老牛逼了，不需要锁等待  
  limit ?;     -- 要买几张票  
  if array_lengty(vid,1)=? then  -- 确保锁定行数与实际需要购票的数量一致   
    -- 购票，更新席别，设置对应BIT=1  
    update ... set column3=set_bit(column3, 1, 开始位置, 结束位置) where id = any(vid);  
  end if;  
end;  
$$ language plpgsql;    
```  
测试(old 输出) :     
```  
digoal=# select * from buy('D645','杭州南','宜春','2013-01-20', 10);    
 i_train_num | i_fstation | i_tstation | i_go_date  | o_slevel | o_bucket_no | o_sit_no | o_order_status     
-------------+------------+------------+------------+----------+-------------+----------+----------------    
 D645        | 杭州南     | 宜春       | 2013-01-20 | 一等座   |       35356 |        9 | t    
(1 row)    
```  
7\. 余票统计(伪代码)  
表结构  
```  
create table ? (  
 车次  
 发车日期  
 起点  
 到站  
 余票  
);  
```  
统计SQL  
```  
select 车次,发车日期,count(varbit, 起点, 到站) from table group by 车次 发车日期;  
```  
## 五、小结  
本文从铁路购票系统的需求出发，分析了购票系统的痛点，以及数据库设计时需要注意的事项。      
PostgreSQL的10个特性，加上阿里云对varbit和array的改进，可以很好的满足铁路购票系统的需求。    
1\. 照顾到余票查询的实时性、购票的锁竞争、以及超大规模的分库分表的需求。       
2\. 购票时，如果是中途票，会尽量选择已售的中途票，减少位置空洞的产生，保证更多的人可以购买到全程票。  
3\. 使用bit描述了每一个站点是否被售出，不会出现有票不能卖的情况。  
## 六、以前写的同类文章
## 正文  
在PostgreSQL 中可以使用varbit存储比特位, 下面模拟一个简单的应用场景.    
马上春节了, 火车票又到了销售旺季, 一票难求依旧.  
下面就以火车票销售为例来介绍一下PostgreSQL varbit类型的用法.  
测试环境 :   
PostgreSQL 9.2.1  
测试表 :   
列车信息表 :   
```
create table train   
(id int primary key, --主键  
go_date date, -- 发车日期  
train_num name, -- 车次  
station text[] -- 途径站点  
);   
```
车厢或bucket信息表 :   
```
create table train_bucket   
(id int primary key, --主键  
tid int references train (id), -- 关联列车ID  
bno int, -- 车厢或bucket号  
sit_level text, -- 席别  
sit_cnt int, -- 该车厢或bucket的座位总数  
sit_remain int, -- 剩余座位  
sit_bit varbit -- 座位BIT位, 已售座位用1表示, 未售座位用0表示  
);  
```
位置信息表 :   
```
create table train_sit   
(id serial8 primary key, -- 主键  
tid int references train (id), --关联列车ID  
tbid int references train_bucket(id), --关联bucket表ID  
sit_no int,  -- 座位号, 来自train_bucket.sit_bit的位置信息.  
station_bit varbit  -- 途径站点组成的BIT位信息, 已售站点用1表示, 未售站点用0表示.  
);  
```
创建索引 :   
```
create index idx_train_bucket_sit_remain on train_bucket(sit_remain) where sit_remain>0;  
create index idx_train_sit_station_bit on train_sit (station_bit) where station_bit<>repeat('1', 13)::varbit;  
```
插入测试数据, 1趟火车, 途径14个站点.  
```
insert into train values (1, '2013-01-20', 'D645', array['上海南','嘉兴','杭州南','诸暨','义乌','金华','衢州','上饶','鹰潭','新余','宜春','萍乡','株洲','长沙']);  
```
插入测试数据, 共计200W个车厢或bucket, 每个车厢98个位置.  
```
insert into train_bucket values (generate_series(1,1000000), 1, generate_series(1,1000000), '一等座', 98, 98, repeat('0',98)::varbit);  
insert into train_bucket values (generate_series(1000001,2000000), 1, generate_series(1000001,2000000), '二等座', 98, 98, repeat('0',98)::varbit);  
```
创建取数组中元素位置的函数 :   
```
create or replace function array_pos (a anyarray, b anyelement) returns int as $$  
declare  
  i int;  
begin  
  for i in 1..array_length(a,1) loop  
    if b=a[i] then  
      return i;  
    end if;  
    i := i+1;  
  end loop;  
  return null;  
end;  
$$ language plpgsql;  
```
创建购票函数 :    
```
create or replace function buy   
(  
inout i_train_num name,   
inout i_fstation text,   
inout i_tstation text,  
inout i_go_date date,  
out o_slevel text,  
out o_bucket_no int,  
out o_sit_no int,  
out o_order_status boolean  
)   
returns record as $$  
declare  
  curs1 refcursor;  
  curs2 refcursor;  
  v_row int;  
  v_station text[];  
  v_train_id int;  
  v_train_bucket_id int;  
  v_train_sit_id int;  
  v_from_station_idx int;  
  v_to_station_idx int;  
  v_station_len int;  
begin  
  set enable_seqscan=off;  
  v_row := 0;  
  o_order_status := false;  
  select array_length(station,1), station, id, array_pos(station, i_fstation), array_pos(station, i_tstation)   
    into v_station_len, v_station, v_train_id, v_from_station_idx, v_to_station_idx   
    from train where train_num=i_train_num and go_date = i_go_date;  
  if ( found and array_pos(v_station, i_fstation) is not null   
       and array_pos(v_station, i_tstation) is not null   
       and array_pos(v_station, i_fstation)  repeat('1', v_station_len-1)::varbit  
    -- and ctid not in (select locked_row from pgrowlocks('train_sit')) -- 耗时约300毫秒, 用它来解决热点锁等待不划算.  
    limit 1  
    for update nowait; -- 也可不加nowait, 加了的话如果获取锁失败将返回55P03异常, 需要程序重新提交  
  loop  
    fetch curs2 into v_train_id,v_train_bucket_id,o_sit_no;  
    if found then  
      update train_sit set station_bit=bitsetvarbit(station_bit, v_from_station_idx-1, v_to_station_idx-v_from_station_idx, 1)   
        where current of curs2;  
      GET DIAGNOSTICS v_row = ROW_COUNT;  
      if (v_row = 1) then  
        select sit_level, bno into o_slevel, o_bucket_no from train_bucket where id=v_train_bucket_id;  
 close curs2;  
 o_order_status := true;  
 return;  
      end if;  
    else   
      close curs2;  
      exit;  
    end if;  
  end loop;  
  v_row := 0;  
  open curs1 for select id, tid, strpos(sit_bit::text,'0'), sit_level, bno from train_bucket   
    where sit_remain>0  
    -- and ctid not in (select locked_row from pgrowlocks('train_bucket')) -- 耗时约300毫秒, 用它来解决热点锁等待不划算.  
    limit 1   
    for update nowait; -- 也可不加nowait, 加了的话如果获取锁失败将返回55P03异常, 需要程序重新提交.  
  loop  
    fetch curs1 into v_train_bucket_id, v_train_id, o_sit_no, o_slevel, o_bucket_no;  