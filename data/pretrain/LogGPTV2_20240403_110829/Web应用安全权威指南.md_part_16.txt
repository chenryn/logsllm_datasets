    ←──脚本
      document.write('John
    ');
              ↑
                └──────script 元素中的
                              字符串字面量
**图 4-22 HTML 的组成元素**
与上图相对应，下表为扩充后的 HTML 转义概要。
**表 4-7 HTML 转义概要**
  位置                          说明                                           转义概要
  ----------------------------- ---------------------------------------------- -------------------------------------------------------
  元素内容（普通文本）          能解释 Tag和字符实体。结束边界字符为"\ **代码清单 /43/43-010.php**
``` 代码无行号
"> 书签 
```
作为攻击示范，下面我们使用以下 URL 来执行这段脚本。
``` 代码无行号
http://example.jp/43/43-010.php?url=javascript:alert(document.cookie)
```
生成的 HTML 如下。如你所见，href 属性被设置了 JavaScript
协议，从而便能够执行 JavaScript 代码。
``` 代码无行号
 书签 
```
在页面上点击"书签"链接后，JavaScript 就会被执行。
![{%}](Image00064.jpg)
**图 4-23 XSS 攻击成功**
在指定 URL 的 href 属性与 src 属性等中，有时 javascript 协议是有效的。
javascript 协议引发的 XSS，其根源不是没有进行 HTML 转义，这与之前介绍的
XSS 有所不同，因此，其防范对策也不尽相同。
-   **生成 URL 时的对策**
    当 URL 由程序动态生成时，需要对其进行校验，仅允许 http 和 https
    协议。此外，通过校验的 URL 还需要作为属性值进行 HTML 转义
    [17]{.注释编号} 。
    具体来说，URL 需满足下列两个条件中的一个。
    -   以 http: 或 https: 开头的绝对 URL
    -   以 / 开头的相对 URL
    以下为能够实现上述校验的函数示例。
    ``` 代码无行号
    function check_url($url) {
     if (preg_match('/\Ahttp:/', $url)
        || preg_match('/\Ahttps:/', $url)
        || preg_match('#\A/#', $url))  {
       return true;
     } else {
       return false;
     }
    }
    ```
    传入该函数的字符串如果以 http:、https: 或 / 开头则返回
    true，否则就返回 false。
-   **校验链接网址**
    如果外界能够任意指定链接的跳转去向，用户就有可能被引向恶意网站，从而被攻击者通过钓鱼式攻击方式骗取个人信息。因此，在不明确跳转至的外部网站的链接时，可以执行如下任一操作。
    -   检查链接的目标 URL，如果指向外部网站就报错
    -   当链接目标为外部 URL 时，显示一个警告页面以提醒用户可能存在风险
    关于以上两种方法的详情请参考 4.7.1 节。
[17]{.注释编号下} 尽管与 XSS 无关，生成 URL 时也依然需要进行百分号编码。
#### **JavaScript 的动态生成**
-   **事件绑定函数的 XSS**
    在当今的 Web 应用中，服务器端动态生成一部分 JavaScript
    的情况实属常见。其中，一个典型的例子就是动态生成 JavaScript
    中的字符串字面量。
    比如，下面的 PHP 脚本中，在 body 元素的 onload
    事件中调用函数时的参数就是由服务器端动态生成的 [18]{.注释编号} 。
    > **代码清单 /43/43-012.php**
        ')">
    这里使用 `htmlspecialchars`
    函数进行了转义，因此貌似很妥善，但其实这段 PHP 脚本中存在 XSS
    漏洞。试使用以下查询文字列来启动脚本。
    ``` 代码无行号
    name=');alert(document.cookie)//
    ```
    启动后将生成如下 HTML。
    ``` 代码无行号
    ```
    由于 onload 事件绑定函数本质上是 HTML
    中的属性值，能解释字符实体，因此，如下 JavaScript 代码就会被执行。
    ``` 代码无行号
    init('');alert(document.cookie)//')
    ```
    `init`
    函数的参数字符串字面量被迫终结，后面被添加了其他语句。这时，页面显示如图
    4-24。
    ![{%}](Image00065.jpg)
    **图 4-24 XSS 攻击成功**
    此处之所以会混入安全隐患，是因为没有将 JavaScript
    字符串字面量进行转义。因此，输入参数中的单引号没有被识别为字符，而是被当成了
    JavaScript 中字符串的结束符。
    为了避免这种情况，理论上应采取如下措施。
    > 1\. 首先，将数据作为 JavaScript 字符串字面量进行转义
    >
    > 2\. 将得到的结果再次进行 HTML 转义
    下表为 JavaScript 字符串字面量中必须被转义的字符。
    **表 4-8 JavaScript 字符串字面量中应被转义的字符**
      -------- ----------
      字符     转义后
      \`\\\`   \`\\\\\`
      \`\'\`   \`\\\'\`
      \`\"\`   \`\\\"\`
      换行     \`\\n\`
      -------- ----------
    按照上述规则，假设输入值为 \\' \"\\，就应该进行如下转义。
    **表 4-9 JavaScript 字符串字面量中应被转义的字符**
      ---------------- ---------------------- ----------------------
      原字符           JavaScript 转义后      HTML 转义后
      \`\\'\"\\\`   \`\\\\'\\\"\\\\\`   \`\\\\'\\\"\\\\\`
      ---------------- ---------------------- ----------------------
    而 JavaScript 更为实际的转义方法在后面介绍"JavaScript
    字符串字面量动态生成的对策"时会进行讲述。
-   **script 元素的 XSS**
    下面我们来看一下当 script 元素内 JavaScript 的一部分是动态生成时的
    XSS 漏洞。script 元素中不能解释 Tag 和字符实体，所以无需进行 HTML
    转义，只要进行 JavaScript
    的转义即可。但是，仅此还不够。比如下面的这段脚本就含有安全隐患。
    > **代码清单 /43/43-013.php**
        你好，
          $('#name').text('
        ');
    通过在 \\、\'、\" 前插入 \\，`escape_js` 函数就能将输入值作为
    JavaScript 字符串字面量进行转义。
    这段代码看似安全无虞，但是当输入值中包含 \ 时，\
    就会被当成 JavaScript 代码的结束符（下图）。
        ');
    这段代码中有两处 `` ，script 元素会在遇到第一个 ``
    时结束。script 元素不考虑上下文，只要看到 ``
    就会立刻终结（图 4-25）。
                                ↑
                 浏览器不会考虑JavaScript的语法，
                 仅负责将中间
                 的部分传送给JavaScript引擎处理。
    **图 4-25 浏览器识别 JavaScript**
    这时，攻击者就可以恶意利用这一特性，并输入以下值来实施 XSS 攻击。
    ``` 代码无行号
    alert(document.cookie)//
    ```
    页面显示如下。
    ![{%}](Image00066.jpg)
    **图 4-26 XSS 攻击成功**
    根据 HTML 的规格，script 元素中的数据不能出现
    \</。而字符实体因不能被解释也不能使用。所以，必须通过变更生成的
    JavaScript 代码来避免这些问题。以下就是具体的对策。
-   **JavaScript 字符串字面量动态生成的对策**