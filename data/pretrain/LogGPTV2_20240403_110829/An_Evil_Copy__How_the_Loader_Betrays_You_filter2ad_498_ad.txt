Speciﬁcally, we collect all packages available to Ubuntu 16.04
LTS and identify the exported read-only variables for each
dynamic library. In theory, all these variables can be relocated
into writable data memory at runtime if they are referenced
by an executable; however, in practice, not all of them may
be accessed. First, not all read-only variables in dynamic
libraries are equally likely to be referenced by executables.
For example, if the constructor of a C++ class is implemented
in the library (see Section IV-A), it is highly unlikely for the
executable to directly reference the vtable of the particular
class. Second,
if a library is used by an executable that
is compiled with -fPIC and hence does not have copy
relocations, the read-only variables in the library will not be
relocated at runtime. Thus, we treat the set of exported read-
only variables as a theoretical upper bound of the attack surface
for COREV attacks, and evaluate the actually relocated read-
only variables in Section VII-B.
We analyzed 58,862 libraries from 54,045 packages.
Among them, 29,817 libraries export read-only variables. In
total, we found 5,114,127 exported read-only variables across
these libraries, making an average of 86.9 such variables
per library (including those that do not export any read-only
variable). We show the number of exported read-only variables
in each dynamic library in Figure 7 (sorted from low to
high). There are 55 libraries with over 10,000 exported read-
only variables. For example, the main library (libxul.so)
used by Firefox browser has over 40,461 exported read-only
variables. Fortunately, the Firefox executable is compiled with
-fPIC and has no copy relocations. However, a broad attack
surface for potential COREV-based memory corruption attacks
remains should another executable uses the same library but
is not compiled as PIC.
C++ vtables: if the variable contains a set of code pointers
and is named through standard name mangling rules (e.g.,
if the variable name starts with _ZTV);
We further classify these read-only variables based on their
inferred data types. In our analysis we distinguish between
C++ vtables, function pointers, generic pointers, format strings,
9
Variable Type
C++ vtables
function pointers
generic pointers
format strings
ﬁle names
generic strings
others
# variables
714,617
115,071
694,846
874
6,822
654,429
2,927,468
Attack Surface
# libraries
14,563
1,054
12,118
161
454
13,220
19,437
# packages
3,692
541
3,830
107
252
4,145
5,185
# variables
28,497
711
33,057
24
44
1,347
5,418
Vulnerable
# executables
4,291
105
4,910
14
20
197
1,890
# packages
1,609
78
2,082
12
10
108
671
TABLE I: Potential attack surface and vulnerable subset of variables for all available Ubuntu 16.04 packages. Under the Attack
Surface column, we list the number of exported read-only variables, involved libraries and packages. Similarly, under the
Vulnerable column, we list the number of actually copied read-only variables, involved executables and packages.
Fig. 7: Number of exported read-only variables in each dy-
namic library from all Ubuntu 16.04 packages (sorted from
low to high). X-axis denotes each individual library and Y-
axis indicates the number of exported read-only variables.
Fig. 8: Number of actually copied variables per executable that
are vulnerable to COREV from all Ubuntu 16.04 packages
(sorted from low to high). X-axis denotes individual executa-
bles and Y-axis indicates the number of COREVs.
ﬁle names, generic strings, and other variables. We single out
vtables, function pointers, format strings, and ﬁle names due
to the security implications if their permissions are changed
through a copy relocation.
We show the results in the “attack surface” column in
Table I. For the exported read-only variables with inferred
types, C++ vtables are the majority – 32.68% of all
the
variables with inferred types. Function pointers occupy another
5.26%. These code pointers are often of interest to an adversary
because corrupting code pointers may give her arbitrary control
of the program execution [37], [38], [23], [18]. In the case of
COREV, these attacks are possible despite strong defenses as
we show in Section VII-D.
Generic pointers have the second largest population
(31.78%). Programs use generic pointers to access memory
indirectly. Therefore, if a constant pointer becomes modiﬁable,
an adversary could trick the program to access something
vastly different that is under her control. The security impli-
cation depends on what the constant pointer points to. For
example, if the constant pointer points to a format string, an
adversary can then corrupt the constant pointer to point to a
malicious format string to trigger printf-oriented programming.
As mentioned in Section VI, our current type inference does
not follow generic pointers, and we leave a more proactive
type discovery to future work.
Format strings and ﬁle names are also exported by libraries,
although many fewer are relocated in comparison to other
types. Writable format strings allow an attacker to execute
arbitrary computation and ﬁle names allow an attacker to
possibly change the input and output of the program.
B. Real-World Permission Violations
In this section, we study the real-world programs that
have unsafe copy relocations in Ubuntu 16.04 LTS. We have
examined 34,291 executables across 54,045 packages. 6,339
of these executables have 166,543 copy relocations in total,
among which, 69,098 alter the memory protection. In Figure 8,
we display the number of COREVs for each executable in all
Ubuntu 16.04 packages. There are 54 executables that have
more than 100 COREVs (with a maximum of 345 COREVs).
10
05000100001500020000250003000010010110210310410501000200030004000500060007000050100150200250300350Variable
cxxabiv1::
cxxabiv1::
si class type info
class type info
(V)
(V)
(V) std::basic ios(cid:104)char, std::char traits(cid:104)char(cid:105)(cid:105)
(V) std::basic streambuf(cid:104)char, std::char traits(cid:104)char(cid:105)(cid:105)
(V)
(V) std::
cxxabiv1:: vmi class type info
cxx11::basic stringbuf(cid:104)char,
std::char traits(cid:104)char(cid:105), std::allocator(cid:104)char(cid:105)(cid:105)
(T) std::exception
(T) std::runtime error
(V) std::basic ﬁlebuf(cid:104)char, std::char traits(cid:104)char(cid:105)(cid:105)
(V) std::
cxx11::basic ostringstream(cid:104)char,
std::char traits(cid:104)char(cid:105), std::allocator(cid:104)char(cid:105)(cid:105)
# Copies
3,676
2,988
1,842
1,819
1,641
1,319
1,169
1,020
953
894
TABLE II: The ten most commonly copied read-only variables
in Ubuntu 16.04. They are all from the libstdc++ library.
(V) denotes vtable and (T) denotes typeinfo. The “copies”
column list the number of executables that actually copy the
corresponding variable.
Fig. 9: An example of C++ vtable that is copied to mysql-
workbench executable.
This experiment shows that COREVs do commonly exist in
real-world programs and present a real threat to the ELF-
based dynamic linking procedure. However, an unsafe copy
relocation is not exploitable by itself. Instead, it provides an
adversary with more potential corruption targets to launch
attacks and/or bypass existing defenses.
We list the types of these unsafe copy relocations in Ta-
ble I in the “vulnerable” column. In particular, 44.75% of
all relocated read-only variables with discovered types are
C++ vtables. This is proportional to the exported C++ vtables
listed in the attack surface, and makes COREV an unignorable
problem because it enables attacks that can potentially evade
current defenses as shown in Section VII-D.
Finally, we study the common COREVs in these exe-
cutables. Surprisingly,
the top 10 most commonly copied
variables are all from libstdc++. We list them in Table II.
Among the 10 COREVs, 8 of them are actually vtables
of widely used classes. For example,
the vtable of class
__cxxabiv1::__si_class_type_info are copied by
3,676 executables in Ubuntu 16.04. Given the prevalent use of
libstdc++, it is likely that future C++ programs can also be
susceptible to COREV-based attacks.
C. Case Study
In this section, we study how COREVs occur in real-world
programs.
11
Fig. 10: A system library with read-only function pointers that
are relocated to various executables.
1) C++ Vtable
(mysql-workbench): We use mysql-
workbench, a complex, GUI-based, network-facing C++ appli-
cation, as an example of of C++ vtable relocations. Note that
we have found many other C++ applications with such unsafe
relocations that are not listed here. The mysql-workbench is
a uniﬁed visual tool for database management that divides its
functionality into multiple dynamic libraries. As a result, it
relocates 19 vtables from 5 different libraries in total. We show
one of them in Figure 9.
Container is a class implemented in the libmform library
and serves as a base class for graphic components such as
MySQL table. It deﬁnes two additional virtual functions, thus
the Container class has a corresponding vtable for dispatching
virtual method calls. In addition, given that the Container class
does not have an explicit constructor, the mysql-workbench
executable will deﬁne a default one. The default construc-
tor will need to reference Container’s vtable for initializing
object memory. Consequently, the vtable is relocated to the
executable’s .bss section and becomes writable, potentially
mitigating vtable-based defenses.
2) C++ Vtable (apt-get): We found that apt-get also con-
tains a set of ﬁve vtables that are copy relocated from libstdc++
and libapt-pkg.so.5.0. Four of them overlap with the already
mentioned vtables in Table II, the last one is the vtable of
class OpTextProgress in libapt-pkg. Assuming that apt-get is
compiled with an upcoming control-ﬂow hijacking defense like
VTV [41] and that a memory corruption vulnerability exists,
the adversary may use COREV to bypass such defenses.
3) Function Pointer (gettext): We use the gettext library to
show how constant function pointers are copied in a typical
program. The gettext library is in the gettext-base package
which is installed on every Ubuntu 16.04 machine. It exports 6
read-only function pointers and affects 15 built-in executables.
We show one of its exported function pointers in Figure 10.
The exported function pointer is actually a ﬁeld of a structure.
Each structure corresponds to an input stream format and the
function pointer points to an internal library function that
parses the format. Thus, a program can leverage it to process
the input stream based on its own needs. Similarly, these
constant data structures deﬁned in gettext become modiﬁable
due to copy relocation and hence susceptible to memory
corruption attacks.
class	Container	:	public	View	{public:				Container()	{}				virtual	void	set_padding(...);				virtual	void	set_back_image(...);};mysql-workbench: library/forms/mforms/container.hstruct	catalog_input_format	{				void	(*parse)(…);				bool	produces_utf8;};const	struct	catalog_input_formatinput_format_properties	=	{				properties_parse,				true};gettext-0.19.7Defenses
VTrust [43]
VTV [41]
vfGuard [36]
Interleaving [10]
SafeDispatch [26]
SafeDispatch (2)
RockJIT [30]
check fptr
(cid:88)
×
(cid:88)
×
(cid:88)
×
(cid:88)
(cid:88)
(cid:88)
×
(cid:88)
×
(cid:88)
×
check vtable CoReV?
×
(cid:88)
×
(cid:88)
×
(cid:88)
×
TABLE III: Evaluation of vtable defenses, whether they check
function pointers, vtables, or both. Three defenses [41], [10],
[26] assume vtables are write-protected and only check the
vtable pointer, thus are affected by CoReV and may allow
vtable corruption attacks.
Recent research proposals on control-ﬂow integrity (CFI)
focus on protecting forward edges