can set up versioning policies or revert and delete
versions through an ofﬂine privileged channel after
a capability-based authentication process enforced
by the disk system.
• Aggressively version all meta-data (e.g., Ext2 inode
blocks) and chosen data as per the policies set up by
administrators or users. In the perspective of a ﬁle
system, versioning policies must be at granularities
of individual ﬁles or directories.
• Enforce basic constraints at the disk-level, such as
read-only and append-only. Users must be able to
choose speciﬁc ﬁles or directories to be protected
by these constraints.
Figure 2 shows the overall architecture of SVSDS. The
three major components in SVSDS are, (1) Storage virtu-
alization Layer (SVL), (2) The Version Manager, and (3)
The Constraint Manager. The SVL virtualizes the block
address space and manages physical space on the device.
The version manager automatically versions meta-data
and user-selected ﬁles and directories. It also provides
an interface to revert back the disk state to previous ver-
sions. The constraint manager enforces read-only and
append-only operation-level constraints on ﬁles and di-
rectories inside the disk.
The rest of this section is organized as follows. Sec-
tion 4.1 describe how transparent versioning is per-
formed inside SVSDS. Section 4.2 talks about the ver-
sioning mechanism. Section 4.4 describes our recov-
ery mechanism and how an administrator recovers af-
ter detecting an OS intrusion. Section 4.5 describes how
SVSDS enforces operation based constraints on ﬁles and
262 
17th USENIX Security Symposium 
USENIX Association
e
r
a
w
t
f
o
S
k
s
i
D
File System / Software Layer
D
A
E
R
E
T
I
R
W
K
C
O
L
B
_
C
O
L
L
A
R
T
P
_
E
T
A
E
R
C
R
T
P
_
E
T
E
L
E
D
S
K
C
O
L
B
_
N
O
I
S
R
E
V
Y
L
N
O
_
D
A
E
R
_
T
E
S
Y
L
N
O
_
D
N
E
P
P
A
_
T
E
S
Cache
Storage Virtualization Layer
Version Manager
Constraint
Manager
Physical Blocks
Figure 2: Architecture of SVSDS
directories. Finally, in Section 4.6, we discuss some of
the issues with SVSDS.
Free-Space Management SVSDS has two different
address spaces, whereas the regular TSDs only have one.
Hence, SVSDS cannot reuse the existing block alloca-
tion mechanism of regular TSDs. To manage both ad-
dress spaces, the SVL uses two different bitmaps: log-
ical block bitmaps (LBITMAPS) in addition to the exist-
ing physical block bitmaps (PBITMAPS). SVSDS uses
a two-phased block allocation process. During the ﬁrst
phase, the SVL allocates the requested number of physi-
cal blocks from PBITMAPS. The allocation request need
not always succeed as some of the physical blocks are
used for storing the previous versions of blocks. If the
physical block allocation request succeeds, it proceeds
to the next phase. In the second phase, the SVL allocates
an equal number of logical blocks from LBITMAPS. It
then associates each of the newly allocated logical block
with a physical block and adds an entry in the T-TABLE
for each pair. The ﬂags for these new entries are copied
from the reference block passed to the ALLOC BLOCK
call and the version number is copied from the disk main-
tained version number. This ensures that all blocks that
are added later to a ﬁle inherit the same attributes (or
ﬂags) as their parent block.
4.1 Transparent Versioning
4.2 Creating versions
Transparent versioning is an important requirement, as
SVSDS has to ensure that the versioning mechanism is
not bypassed by higher layers. To provide transparent
versioning, the storage virtualization layer (SVL) virtu-
alizes the disk address space. The SVL splits the disk ad-
dress space into two: logical and physical, and internally
maintains the mapping between them. The logical ad-
dress space is exposed to ﬁle systems and the SVL trans-
lates logical addresses to physical ones for every disk
request. This enables SVL to transparently change the
underlying physical block mappings when required, and
applications are completely oblivious to the exact physi-
cal location of a logical block.
SVSDS maintains T-TABLE (or translation table),
to store the relationship between logical and physical
blocks. There is a one-to-one relationship between each
logical and physical block in the T-TABLE. A version
number ﬁeld is also added to each entry of T-TABLE to
denote the last version in which a particular block was
modiﬁed. Also, a status ﬂag is added to each T-TABLE
entry to indicate the type (meta-data or data), and sta-
tus (versioned or non-versioned) of each block. The T-
TABLE is indexed by the logical block number and every
allocated block has an entry in the T-TABLE. When ap-
plications read (or write) blocks, the SVL looks up the
T-TABLE for the logical block and redirects the request to
the corresponding physical block stored in the T-TABLE
entry.
The version manager is responsible for creating new ver-
sions and maintaining previous versions of data on the
disk. The version manager provides the ﬂexibility of ﬁle-
system–level versioning while operating inside the disk.
By default, it versions all meta-data blocks.
In addi-
tion, it can also selectively version user-selected ﬁles and
directories. The version manager automatically check-
points the meta-data and chosen data blocks at regular
intervals of time, and performs copy-on-write upon sub-
sequent modiﬁcations to the data. The version manager
maintains a global version number and increments it af-
ter every checkpoint interval. The checkpoint interval is
the time interval after which the version number is au-
tomatically incremented by the disk. SVSDS allows an
administrator to specify the checkpoint interval through
its administrative interface.
The version manager maintains a table, V-TABLE (or
version table), to keep track of previous versions of
blocks. For each version, the V-TABLE has a separate
list of logical-to-physical block mappings for modiﬁed
blocks.
Once the current version is checkpointed, any subse-
quent write to a versioned block creates a new version for
that block. During this write, the version manager also
backs up the existing logical to physical mapping in the
V-TABLE. To create a new version of a block, the version
manger allocates a new physical block through the SVL,
changes the corresponding logical block entry in the T-
USENIX Association  
17th USENIX Security Symposium 
263
TABLE to point to the newly allocated physical block, and
updates the version number of this entry to the current
version. Figure 3 shows a V-TABLE with a few entries
in the mapping list for the ﬁrst three versions. Let’s take
a simple example to show how entries are added to the
V-TABLE. If block 3 is overwritten in version 2, the entry
in the T-TABLE for block 3 is added to the mapping list
of the previous version (i.e., version 1).
Versioning TSD Pointer Structures TSDs maintains
their own pointer structures inside the disk to track block
relationships. The pointer management in TSDs was ex-
plained in Section 2.2. The pointers refers to the disk-
level pointers inside TSDs, unless otherwise mentioned
in the paper. As pointers are used to track block live-
ness information inside TSDs, the disk needs to keep its
pointer structures up to date at all times. When the disk is
reverted back to the previous version, the pointer opera-
tions performed in the current version have to be undone
for the disk to reclaim back the space used by the current
version.
To undo the pointer operations, SVSDS logs all
pointer operations to the pointer operation list of the cur-
rent version in the V-TABLE. For example, in Figure 3 the
ﬁrst entry in the pointer operation list for version 1 shows
that a pointer was created between logical blocks 3 and 8.
This create pointer operation has to be undone when the
disk is reverted back from version 1 to 0. Similarly, the
ﬁrst entry in the pointer operation list for version 3 de-
notes that a pointer was deleted between logical blocks 3
and 8. This operation has to be undone when the disk is
reverted back from version 3 to version 2.
To reduce the space required to store the pointer opera-
tions, SVSDS does not store pointer operations on blocks
created and deleted (or deleted and created) within the
same version. When a CREATE PTR is issued with source
a and destination b in version x. During the lifetime of
the version x, if a DELETE PTR operation is called with
the same source a and destination b, then the version
manager removes the entry from the pointer operation
list for that version in the V-TABLE. We can safely re-
move these pointer operations because CREATE PTR and
DELETE PTR operations are the inverse of each other and
would cancel out their changes when they occur with-
ing the same version. The recovery manager maintains a
hash table indexed on the source and destination pair for
efﬁcient retrieval of entries from the V-TABLE.
4.3 Selective Versioning
Current block-based disk systems lack semantic infor-
mation about the data being stored inside. As a result,
disk-level versioning systems [7, 23] version all blocks.
But versioning all blocks inside the disk can quickly con-
sume all available free space on the disk. Also, version-
ing all blocks is not efﬁcient for the following two rea-
sons: (1) short lived temporary data (e.g., data in the /tmp
folder and installation programs) need not be versioned,
and (2) persistent data blocks have varying levels of im-
portance. For example, in FFS-like ﬁle systems, version-
ing the super block, inode blocks, or indirect blocks is
more important than versioning data blocks as the for-
mer affects the reachability of other blocks stored inside
the disk. Hence, SVSDS selectively versions meta-data
and user-selected ﬁles and directories to provide deeper
version histories.
Versioning meta-data. Meta-data blocks have to be
versioned inside the disk for two reasons. First, reach-
ability: meta-data blocks affects the reachability of data
blocks that it points to (e.g., the data blocks can only be
reached through the inode or the indirect block). Sec-
ond, recovery of user-selected ﬁles: we need to preserve
all versions of the entire ﬁle system directory-structure
inside the disk to revert back ﬁles and directories.
To selectively version meta-data blocks, SVSDS
uses the pointer information available inside the TSDs.
SVSDS identiﬁes a meta-data block during the ﬁrst CRE-
ATE PTR operation the block passed as the source is iden-
tiﬁed as a meta-data block. For all source block passed
to the CREATE PTR operation, SVSDS marks it as meta-
data in the T-TABLE.
SVSDS defers reallocation of deleted data blocks until
there are no free blocks available inside the disk. This
ensures that for a period of time the deleted data blocks
will still be valid and can be restored back when their
corresponding meta-data blocks are reverted back during
recovery.
To version ﬁles and directories, applications issue an
ioctl to the ﬁle system that uses SVSDS. The ﬁle sys-
tem in turn locates the logical block number of the ﬁle’s
inode block, and calls the VERSION BLOCKS disk prim-
itive. VERSION BLOCKS is a new primitive added to the
existing disk interface for applications to communicate
the ﬁles for versioning (see Table 1). After the blocks of
the ﬁle are marked for versioning, the disk automatically
versions the marked blocks at regular intervals.
Versioning user-selected data. Versioning meta-data
blocks alone does not make the disk system more se-
cure. Users still want the disk to automatically version
certain ﬁles and directories. To selectively version ﬁles
and directories, applications and ﬁle systems only have
to pass the starting block (or the root of the subtree) un-
der which all the blocks needs to be versioned. For ex-
ample, in Ext2 only the inode block of the ﬁle or the di-
rectory needs to be passed for versioning. SVSDS does
264 
17th USENIX Security Symposium 
USENIX Association
Version No.
1
2
3
Old Mapping List
3
4
5
6
Pointer Operation List
C
3
8
Old Mapping List
10
10
5
7
3
5
Pointer Operation List
Old Mapping List
8
6
Pointer Operation List
D
3
8
Figure 3: The v-table data structure. A simpliﬁed v-table state is shown for ﬁrst three versions in SVSDS. Each entry
in the old mapping list corresponds to logical and physical block pair. C & D in the pointer operation list represent
Create pointer and Delete pointer operations, respectively.
a Breadth First Search (BFS) on the P-TABLE, starting
from the root of the subtree. All the blocks traversed dur-
ing the BFS are marked for versioning in the T-TABLE.
One common issue in performing BFS is that there
could potentially be many cycles in the graph that is be-
ing traversed. For example, in the Ext2TSD [16] ﬁle
system, there is a pointer from the inode of the direc-
tory block, to the inode of the sub-directory block and
vice versa. Symbolic links are yet another source of cy-
cles. SVSDS detects cycles by maintaining a hash table
(D-TABLE) for blocks that have been visited during the
BFS. During each stage of the BFS, the version manager
checks to see if the currently visited node is present in the
D-TABLE before traversing the blocks pointed to by this
block. If the block is already present in the D-TABLE,
SVSDS skips the block as it was already marked for ver-
sioning. If not, SVSDS adds the currently visited block
to the D-TABLE before continuing with the BFS.
To identify blocks that are subsequently added to
versioned ﬁles or directories, SVSDS checks the ﬂags
present in the T-TABLE of the source block during the
CREATE PTR operations. This is because when ﬁle sys-
tems want to get a free block from SVSDS, they is-