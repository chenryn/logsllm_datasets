# DupLESS: Server-Aided Encryption for Deduplicated Storage

## Authors
- Mihir Bellare, University of California, San Diego
- Sriram Keelveedhi, University of California, San Diego
- Thomas Ristenpart, University of Wisconsin–Madison

## Abstract
Cloud storage providers such as Dropbox, Mozy, and others use deduplication to save space by storing only one copy of each file uploaded. However, if clients encrypt their files conventionally, these savings are lost. Message-locked encryption (MLE), particularly convergent encryption (CE), resolves this issue but is inherently vulnerable to brute-force attacks. We propose an architecture that provides secure deduplicated storage resistant to such attacks, implemented in a system called DupLESS. In DupLESS, clients encrypt their data using message-based keys obtained from a key server via an oblivious pseudorandom function (OPRF) protocol. This allows clients to store encrypted data with existing services, enabling the service to perform deduplication while maintaining strong confidentiality guarantees. Our results show that DupLESS achieves performance and space savings comparable to using the storage service with plaintext data.

## 1. Introduction
Providers of cloud-based storage, such as Dropbox, Google Drive, and Mozy, can significantly reduce storage costs through deduplication. If two clients upload the same file, the service stores only one copy, leading to substantial savings [50, 61, 74]. However, customers may want their data encrypted for privacy, corporate policy, or legal reasons. Conventional encryption methods randomize the ciphertext, making deduplication impossible. Deterministic encryption allows deduplication but only for a single user, not across multiple users. Sharing a single key among users makes the system brittle and vulnerable to compromise.

Message-locked encryption (MLE), especially convergent encryption (CE), aims to resolve this tension. In CE, the client computes a key \( K \leftarrow H(M) \) using a cryptographic hash function \( H \) on the message \( M \), and then encrypts the message deterministically. The key \( K \) is stored separately, encrypted under a per-client key or password. While this enables deduplication, it is susceptible to offline brute-force dictionary attacks. If the target message \( M \) is drawn from a known set \( S = \{M_1, \ldots, M_n\} \), an attacker can recover \( M \) by encrypting each \( M_i \) and comparing the resulting ciphertexts.

Bellare, Keelveedhi, and Ristenpart [18] formalized MLE, providing a definition (semantic security for unpredictable messages) to capture the best possible security for MLE schemes. However, this definition assumes that messages are unpredictable, which may not always be the case in practice. Data can often be predictable due to known formats or low entropy, and validating the unpredictability assumption is challenging. Offline dictionary attacks are a recognized threat to CE in real systems [77], hindering the deduplication of security-critical data.

In this work, we design and implement DupLESS, a system that provides a more secure and easily deployable solution for encryption supporting deduplication. DupLESS uses a key server (KS) separate from the storage service (SS) to aid in encryption. Clients authenticate to the KS without revealing any information about their data. As long as the KS remains inaccessible to attackers, DupLESS ensures high security, except for the equality of underlying plaintexts, which is necessary for deduplication. If both the KS and SS are compromised, DupLESS retains the current MLE guarantee of security for unpredictable messages.

DupLESS is designed to work transparently with existing SS systems, wrapping store, retrieve, and other requests with algorithms for encrypting filenames and data on the fly. It is feature-compatible with existing API commands, does not assume knowledge about the implementing systems, and achieves performance close to using the SS without encryption. We implement DupLESS as a command-line client supporting Dropbox and Google Drive. Two versions of the KS protocol are provided: a RESTful, HTTPS-based web interface and a custom UDP-based protocol optimized for latency.

We evaluate DupLESS by deploying the KS on Amazon EC2 and experimentally measuring its performance. For a 1 MB file and using Dropbox, the bandwidth overhead is less than 1%, and the time overhead for storing a file is about 17%. Across a 2 TB dataset of highly dedupable virtual machine file system images, the storage overhead is as little as 4.5%. These results demonstrate that DupLESS is practical and can be immediately deployed in most SS-using environments. The source code for DupLESS is available from [4].

## 2. Setting
Our setting involves an enterprise network with affiliated clients (e.g., company employees) using a deduplicated cloud storage service (SS). The SS provides a simple interface for storing, retrieving, listing, and deleting files. Such systems are widespread and suitable for file backup and synchronization applications. An example SS API, abstracted from Dropbox, is detailed in Figure 5 (Section 6). The SS performs deduplication at file boundaries, checking if the contents of two files are the same and storing only one copy.

Clients have access to a key server (KS), a semi-trusted third party that aids in performing dedupable encryption. Clients are provisioned with per-user encryption keys and credentials (e.g., client certificates).

### Threat Model
Our goal is to protect the confidentiality of client data against attackers who gain access to the SS provider's systems (including malicious insiders) and external attackers with access to communication channels between clients and the KS or SS. Security should hold for all files, not just unpredictable ones, ensuring semantic security and leaking only the equality of files to attackers.

We also aim for compromise resilience: the security offered by the scheme should degrade gracefully if other clients or the KS are compromised. Specifically, security should hold for unpredictable files of uncompromised clients when one or more clients or the KS are compromised.

We match the availability offered by the SS but do not ensure availability in the face of a malicious SS. A malicious provider can always delete files. However, we provide protection against a malicious SS that may tamper with clients' data or mount chosen-ciphertext attacks by modifying stored ciphertexts.

Malicious clients can exploit client-side deduplication to mount side-channel attacks [46], violating other users' privacy. We prevent such side-channels and ensure our system is compatible with techniques like proofs-of-ownership [45] to prevent illicit file transfers.

We do not explicitly target resistance to traffic analysis attacks that abuse leakage of access patterns or file lengths, though our system is compatible with potential countermeasures. Our approaches can be used with existing mechanisms for availability auditing or file replication across multiple services.

### Design Goals
In addition to our security goals, the system we build will meet the following functionality properties:
- **Transparency**: The system will be backwards-compatible, work within existing SS APIs, make no assumptions about the implementation details of the SS, and have performance closely matching that of direct use of the SS.
- **Storage Efficiency**: In normal operation, the space required to store all encrypted data will closely match the space required when storing plaintext data.
- **Availability**: The system should never reduce storage availability, even when the KS is unavailable or under heavy load.
- **Client State**: The system will not require any client-side state beyond a user’s credentials. Users can synchronize their files from any system by providing their credentials. Client-side caching is allowed to improve performance.

### Related Approaches
Several works have addressed the general problem of enterprise network security, but none meet all requirements from our threat model. Prior works [42, 53, 54, 58, 75] that build a secure file system on top of a flat outsourced storage server break deduplication mechanisms and are unsuitable for our setting. CE-based solutions [8, 71] provide security only for unpredictable messages and are vulnerable to brute-force attacks. Sharing a secret key across clients with a deterministic encryption scheme [16, 68] fails to achieve compromise resilience. Using CE with an additional shared secret [76] is similarly ineffective.

## 3. Overview of DupLESS
DupLESS addresses the issue of brute-force ciphertext recovery in CE-type schemes by using a key server (KS) to derive keys instead of setting keys to be hashes of messages. Access to the KS is preceded by authentication, which stops external attackers. The increased cost slows down brute-force attacks from compromised clients, and the KS can implement rate-limiting measures to further mitigate these attacks.

We start with secret-parameter MLE, an extension to MLE where all clients are endowed with a system-wide secret parameter \( sk \). If \( sk \) is unknown to the attacker, a high level of security can be achieved (semantic security, except for equality). Even if \( sk \) is leaked, security falls to that of regular MLE. A server-aided MLE scheme restricts the secret key to the KS instead of making it available to all clients. A simple approach is to use a PRF \( F \) with a secret key \( K \) that never leaves the KS. A client would send a hash \( H \) of a file to the KS and receive back a message-derived key \( K' \leftarrow F(K, H) \). However, this approach is unsatisfying from a security perspective because the KS becomes a single point of failure, allowing an attacker to obtain file hashes and recover files with brute-force attacks.

Instead, DupLESS employs an oblivious PRF (OPRF) protocol [64] between the KS and clients. This ensures that the KS learns nothing about the client inputs or the resulting PRF outputs, and clients learn nothing about the KS's secret key. This approach provides strong security guarantees and maintains the benefits of deduplication.