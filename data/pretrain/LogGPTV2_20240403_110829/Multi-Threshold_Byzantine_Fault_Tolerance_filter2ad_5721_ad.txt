We further observe that these two protocols also share two fun-
damental steps in achieving safety despite their different timing
models and fault thresholds. In particular, they both need to guar-
antee safety within a view and across views. Let |C| be the quorum
size; |C| = 2𝑓 + 1 out of 𝑛 = 3𝑓 + 1 in PBFT and |C| = 𝑓 + 1 out of
𝑛 = 2𝑓 +1 in Sync HotStuff, where 𝑓 is the fault tolerance threshold.
(P1) consistency within a view: If an honest replica commits a
value 𝑏 in view 𝑣, no conflicting value 𝑏′ has a certificate in view 𝑣.
(P2) consistency across views: If an honest replica commits a
value 𝑏 in view 𝑣, more than 𝑛 − |C| honest replicas receive a
certificate of 𝑏 from view 𝑣 before entering the next view 𝑣 + 1.
PBFT achieves P1 using the standard quorum intersection tech-
nique. With up to 𝑓 Byzantine faults out of 𝑛 = 3𝑓 + 1 replicas, two
quorums of |C| = 2𝑓 + 1 replicas intersect at at least one honest
replica (because 2|C|−𝑛 = 𝑓 +1). Having two conflicting certificates
from the same view would imply that an honest replica voted for
two equivocating proposals, which cannot happen. For P2, PBFT
uses two rounds of voting, so an honest replica commits a value
only after |C| = 2𝑓 + 1 replicas (at least 𝑓 + 1 honest) voted for the
certificate of that value.
Sync HotStuff, on the other hand, cannot rely on quorum inter-
section because it tolerates 𝑓 Byzantine faults out of 𝑛 = 2𝑓 + 1
replicas. Instead, it uses synchronous waiting periods to achieve
these properties. An honest replica 𝑟 commits a value only after
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1691waiting for 2Δ time and detecting no leader equivocation or view-
change. The equivocation check makes sure no honest replica votes
for conflicting values. This rules out conflicting certificates in this
view, achieving P1. Checking view-change of other replicas makes
sure no honest replica enters the next view early. This leaves enough
time for all honest replicas to receive (from 𝑟) a certificate for the
committed value before entering the next view, achieving P2.
Combining PBFT and Sync HotStuff. Our key observation is
that the orthogonal techniques of PBFT and Sync HotStuff are
compatible under the three constraints at the beginning of this
section and a quorum size |C| = 𝑛 − 𝛾𝑠, as we elaborate below.
PBFT’s quorum intersection ensures that two quorums of size
𝑛 − 𝛾𝑠 intersect at 2(𝑛 − 𝛾𝑠) − 𝑛 = 𝑛 − 2𝛾𝑠 = 𝛽𝑎 + 1 replicas. Under
partial synchrony, this ensures P1 with up to 𝛽𝑎 faults, which is our
target fault threshold for partially synchronous safety. Moreoever,
a quorum of |C| = 𝑛 − 𝛾𝑠 = 𝛾𝑠 + 𝛽𝑎 + 1 replicas contains at least
𝛾𝑠 +1 > 𝑛−|C| honest replicas, so PBFT’s two-phase voting ensures
P2 under partial synchrony.
Under synchrony, we can show the 2Δ waiting periods ensure
that P1 and P2 still hold. When an honest replica commits a value,
the 2Δ waiting period before commit still ensures that no honest
replica votes for a conflicting value, hence ruling out a conflicting
certificate (P1 holds) under 𝛽𝑠 faults because |C| = 𝑛 − 𝛾𝑠 = 𝛽𝑠 + 1.
Similarly, the 2Δ waiting period in view change ensures that all
𝑛 − 𝛽𝑠 = 𝛾𝑠 + 1 > 𝑛 − |C| honest replicas receive a certificate before
entering the next view (P2 holds).
Therefore, combining the techniques of PBFT and Sync HotStuff
seamlessly with a quorum size of |C| = 𝑛 − 𝛾𝑠 gives a MT-BFT SMR
protocol with optimal fault thresholds.
4.3 Protocol Description
Block chaining. Following recent BFT protocols [2, 47], we uti-
lize the “block chaining” paradigm to simplify the protocol. In the
steady state protocol, the leader proposes a block containing a list
of transactions and a hash digest of the previous block. Thus, a
block determinies a unique hash chain for all previous blocks in
the log. Any chains starts at a hard-coded genesis block, and the
distance from the genesis block to a block 𝐵 in the chain is called
the height of block 𝐵. A block of height 𝑘, denoted 𝐵𝑘, is formatted
as (𝑑𝑘, 𝐻(𝐵𝑘−1)) where 𝑑𝑘 is a set of transactions and 𝐻(𝐵𝑘−1) is
the hash of the predecessor block 𝐵𝑘−1. The genesis block 𝐵0 can
be written as 𝐵0 = (⊥,⊥). We say a block 𝐵𝑘 = (𝑑𝑘, ℎ𝑘−1) is valid
if (i) it is the genesis block or (ii) there is a valid block 𝐵𝑘−1 and
ℎ𝑘−1 = 𝐻(𝐵𝑘−1). We say a block 𝐵𝑘 extends 𝐵𝑙 if 𝐵𝑘 = 𝐵𝑙 or 𝐵𝑘 is a
descendant of 𝐵𝑙. If two blocks do not extend one another, we say
they conflict with each other. Conflicting blocks can occur due to
network asynchrony or faulty leaders. If two conflicting blocks are
signed in the same view by the same leader, they form a proof of
leader equivocation.
Each view is identified by a monotonically increasing integer
denoted 𝑣 ≥ 1, and has a leader 𝐿 selected in a round robin manner
(e.g., 𝑣 mod 𝑛). In each view 𝑣, the steady state protocol (Figure
2) runs the following steps in iterations. Note that each step is
triggered by an “upon” event and is hence non-blocking. Thus,
subsequent blocks 𝐵𝑘+1, 𝐵𝑘+2 can be proposed before the previous
block 𝐵𝑘 is committed.
Propose. The leader 𝐿 of view 𝑣 proposes a block 𝐵𝑘 =
(𝑑𝑘, 𝐻(𝐵𝑘−1)) in the form of ⟨propose, 𝐵𝑘, C𝑣(𝐵𝑘−1), 𝑣⟩𝐿. The cer-
tificate in the proposal must be the certificate for the predecessor
𝐵𝑘−1 in the current view 𝑣. In the steady state, the leader 𝐿 pro-
poses 𝐵𝑘 upon receiving C𝑣(𝐵𝑘−1) for its previous proposal 𝐵𝑘−1
in the current view. For the first proposal after entering view 𝑣, the
certificate C𝑣(𝐵𝑘−1) is formed during the view change protocol and
will be described later.
Vote. Upon receiving a valid proposal ⟨propose, 𝐵𝑘, C𝑣(𝐵𝑘−1), 𝑣⟩𝐿
by the leader 𝐿 of the current view 𝑣, a replica 𝑟 votes for the block
𝐵𝑘 in the form of ⟨vote, 𝐵𝑘, 𝑣⟩𝑟 , if the replica has not received an
equivocating proposal signed by 𝐿 in the current view 𝑣.
Certificates and ranking. A quorum of |C| = 𝑛 − 𝛾𝑠 votes form
a quorum certificate (or certificate for short). This is the key ingre-
dient of many SMR protocols including ours. To elaborate, each
replica 𝑟 votes for a block 𝐵𝑘 (at height 𝑘 proposed by the leader
of the current view 𝑣 in the form of ⟨vote, 𝐵𝑘, 𝑣⟩𝑟 . A quorum of
⟨vote, 𝐵𝑘, 𝑣⟩∗ messages from distinct replicas form a certificate for
block 𝐵𝑘 in view 𝑣, denoted C𝑣(𝐵𝑘). We say a block 𝐵𝑘 is certified
in view 𝑣 if the certificate C𝑣(𝐵𝑘) is formed. Certificates are ranked
first by view number and then by height. For example, C𝑣(𝐵𝑘) is
ranked higher than C𝑣−1(𝐵𝑘+1) but lower than C𝑣(𝐵𝑘+1).
Pre-commit. Upon receiving a certificate C𝑣(𝐵𝑘), a replica 𝑟 for-
wards it to all other replicas. Then, after waiting for 2Δ, it broadcasts
⟨commit, 𝐵𝑘, 𝑣⟩𝑟 . The 2Δ waiting step helps maintain consistency
both within a view and across views (i.e., P1 and P2) under syn-
chrony as in Sync HotStuff. The commit message corresponds to
the second vote in PBFT, which helps maintain consistency across
views (i.e., P2) under partial synchrony.
Commit. Finally, upon collecting a quorum of ⟨commit, 𝐵𝑘, 𝑣⟩∗, a
replica forwards them to all other replicas, and commits the block
𝐵𝑘. As we mentioned before, a replica commits a log by broad-
casting a signature on the log instead of each block or transaction.
However, as all blocks are chained by hash references, the block
𝐵𝑘 works as a snapshot of the log that consists of 𝐵𝑘 and all its
ancestors. Therefore, we hereafter say a replica commits a block/log
interchangeably.
The view change protocol (Figure 3) monitors the progress in
the steady state and changes the view when the leader exhibits a
faulty behavior or replicas fail to make progress.
Blame. A replica blame the view by broadcasting ⟨blame, 𝑣⟩𝑟 if it
detects leader equivocation or suspects the leader is misbehaving
such as stalling progress or censoring transactions. A transaction
𝑡𝑥 is considered to be censored if it has not been committed by
max{𝑇𝑡𝑥 ,𝑇𝑣} + Λ where 𝑇𝑡𝑥 is the time it receives 𝑡𝑥, and 𝑇𝑣 is the
time it starts view 𝑣, and Λ is a given time (the specific value is
discussed later). In the case of the leader’s equivocation, the replica
forwards the two equivocating proposals to all other replicas as
proof of misbehavior of the current leader, and stops all processes
in the steady state of view 𝑣.
Status. A quorum of distinct ⟨blame, 𝑣⟩∗ is called a blame-certificate
for view 𝑣, denoted B𝑣. Upon receiving B𝑣, a replica 𝑟 forwards it
Session 6A: Consensus and Attacks CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1692to all other replicas, and stops all processes in the steady state of
view 𝑣. Then, the replica 𝑟 sets a variable lock𝑟 to a highest ranked
certificate to lock on and sends it to the leader 𝐿′ of the next view
𝑣 + 1 in a message ⟨status, lock𝑟 , 𝑣⟩𝑟 . At this point, replica 𝑟 starts
the new view 𝑣 + 1.
New-View. A quorum of ⟨status, lock, 𝑣⟩∗ messages form a status-
certificate, denotedS𝑣. Upon receivingS𝑣, the new leader 𝐿′ of view
𝑣 + 1 picks a highest certificate lock𝑣+1 among S𝑣, and broadcasts
⟨new-view, lock𝑣+1,S𝑣, 𝑣 + 1⟩𝐿′. One status message in S𝑣 must
come from an honest replica. Since more than 𝑛−|C| honest replicas
lock on all blocks committed till the previous view 𝑣 (by P2), the
selected highest certificate lock𝑣+1 always extends all committed
blocks.
First-Vote. Upon receiving a first ⟨new-view, C𝑣′′(𝐵𝑘′),S𝑣, 𝑣 +1⟩𝐿′,
a replica 𝑟 first checks that the selected certificate C𝑣′′(𝐵𝑘′) has a
highest rank in S𝑣. If the check passes, a replica 𝑟 forwards it to all
other replicas and sends ⟨vote, 𝐵𝑘′, 𝑣 + 1⟩𝑟 . This step forms the first
certificate in the new view 𝑣 + 1 that all subsequent proposals in
view 𝑣 + 1 should extend.
4.4 Correctness of the Protocol
We prove the safety and liveness of the protocol. We say a replica
directly commits a block 𝐵𝑘 in a view 𝑣 if it is due to the replica
receiving a quorum of 𝑛 − 𝛾𝑠 ⟨commit, 𝐵𝑘, 𝑣⟩. If a replica commits
a block 𝐵𝑘 as a result of directly committing one of its descendant,
then we say 𝐵𝑘 is indirectly committed.
Safety under partial synchrony. We prove safety under partial
synchrony in the presence of at most 𝛽𝑎 faulty replicas.
Lemma 4.2 (Consistency within a View). If two certificates
C𝑣(𝐵𝑘) and C𝑣(𝐵𝑙) from the same view 𝑣 exist, then 𝐵𝑘 and 𝐵𝑙 do
not conflict with each other.
Proof. Suppose for the sake of contradiction two conflicting
certificates C𝑣(𝐵𝑘) and C𝑣(𝐵𝑙) both exist, then at least an honest
replica must have voted for both, because two quorums of 𝑛 − 𝛾𝑠
intersect at an honest replica, i.e., 2(𝑛 − 𝛾𝑠) − 𝑛 > 𝛽𝑎. This cannot
happen because an honest replica stops voting in view 𝑣 as soon as
it detects equivocating proposals.
□
Lemma 4.3. If an honest replica directly commits a block 𝐵𝑘 in
a view 𝑣, then at least 𝛾𝑠 + 1 honest replicas receive C𝑣(𝐵𝑘) before
entering view 𝑣 + 1.
Proof. Suppose an honest replica directly commits a block 𝐵𝑘
in a view 𝑣, then it must have received 𝑛−𝛾𝑠 ⟨commit, 𝐵𝑘, 𝑣⟩, out of
which at least 𝑛 − 𝛾𝑠 − 𝛽𝑎 > 𝛾𝑠 must be from honest replicas. These
𝛾𝑠 + 1 honest replicas must have received the certificate C𝑣(𝐵𝑘)
before sending ⟨commit, 𝐵𝑘, 𝑣⟩ before entering view 𝑣 + 1.
□
Lemma 4.4 (Consistency across Views). If an honest replica
directly commits a block 𝐵𝑘 in a view 𝑣, then for all view 𝑣′ ≥ 𝑣, if a
certificate C𝑣′(𝐵𝑙) exists, then 𝐵𝑙 does not conflict with 𝐵𝑘.
Proof. We prove by induction on the view number. The base
case (i.e., 𝑣′ = 𝑣) follows from Lemma 4.2. We prove for the induc-
tive step (i.e., view 𝑣′ + 1). Suppose a certificate C𝑣′+1(𝐵𝑙) exists.
Let 𝐵𝑚 be the block of lowest height in the chain that is certified
in view 𝑣′ + 1. Then, at least an honest replica must have voted
for 𝐵𝑚 in the First-Vote phase of the view change protocol. Oth-
erwise, blocks extending 𝐵𝑙 (including 𝐵𝑙) could not have been
certified in view 𝑣′ + 1, as every valid proposal should contain a
certificate for the previous block in the same view. In the First-Vote
phase, the honest replica must have voted for 𝐵𝑚 in response to
⟨new-view, C𝑣′′(𝐵𝑚),S, 𝑣′+1⟩𝐿′ message from the leader 𝐿′ of view
𝑣′ + 1, and C𝑣′′(𝐵𝑚) (𝑣′′ ≤ 𝑣′) should be the highest certificate in
S. However, recall that at least 𝛾𝑠 + 1 honest replicas (denoted 𝑅)
receive C𝑣(𝐵𝑘) before entering view 𝑣 + 1 ≤ 𝑣′ + 1 (Lemma 4.3).
As 𝑅 and S (|S| ≥ 𝑛 − 𝛾𝑠) intersect, C𝑣′′(𝐵𝑚) should be as highly
ranked as C𝑣(𝐵𝑘). By the inductive hypothesis, 𝐵𝑚 should extend
𝐵𝑘. Therefore, 𝐵𝑙 (which extends 𝐵𝑚) does not conflict with 𝐵𝑘. □
Lemma 4.5 (Safety for Replica). Honest replicas do not commit
conflicting blocks.
Proof. Suppose two blocks 𝐵𝑘 and 𝐵𝑘′ are committed due to
directly committed descendants 𝐵𝑙 and 𝐵𝑙′, respectively. As all
directly committed blocks are certified, by Lemma 4.4, 𝐵𝑙 and 𝐵𝑙′
do not conflict with each other. Therefore, 𝐵𝑘 and 𝐵𝑘′ are both
ancestors of 𝐵𝑙 (and 𝐵𝑙′), and do not conflict with each other.
□
Safety under synchrony. We next prove the safety under syn-
chrony, assuming in the presence of at most 𝛽𝑠 faulty replicas.
Lemma 4.6 (Consistency within a View). If an honest replica
directly commits a block 𝐵𝑘 in a view 𝑣, then a certificate C𝑣(𝐵𝑙) for