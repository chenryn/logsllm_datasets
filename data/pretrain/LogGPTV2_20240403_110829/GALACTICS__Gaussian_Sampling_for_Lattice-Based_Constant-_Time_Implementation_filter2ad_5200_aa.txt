title:GALACTICS: Gaussian Sampling for Lattice-Based Constant- Time Implementation
of Cryptographic Signatures, Revisited
author:Gilles Barthe and
Sonia Bela&quot;ıd and
Thomas Espitau and
Pierre-Alain Fouque and
M&apos;elissa Rossi and
Mehdi Tibouchi
GALACTICS: Gaussian Sampling for Lattice-Based
Constant-Time Implementation of Cryptographic
Signatures, Revisited
GILLES BARTHE, MPI-SP and IMDEA Software Institute
SONIA BELAÏD, CryptoExperts
THOMAS ESPITAU, Sorbonne Université, Laboratoire d’informatique de Paris 6
PIERRE-ALAIN FOUQUE, Université de Rennes
MÉLISSA ROSSI, Thales, ENS Paris, CNRS, PSL University, INRIA
MEHDI TIBOUCHI, NTT Corporation
In this paper, we propose a constant-time implementation of the BLISS lattice-based signature scheme. BLISS
is possibly the most efficient lattice-based signature scheme proposed so far, with a level of performance on
par with widely used pre-quantum primitives like ECDSA. It is only one of the few postquantum signatures to
have seen real-world deployment, as part of the strongSwan VPN software suite.
The outstanding performance of the BLISS signature scheme stems in large part from its reliance on
discrete Gaussian distributions, which allow for better parameters and security reductions. However, that
advantage has also proved to be its Achilles’ heel, as discrete Gaussians pose serious challenges in terms
of secure implementations. Implementations of BLISS so far have included secret-dependent branches and
memory accesses, both as part of the discrete Gaussian sampling and of the essential rejection sampling step
in signature generation. These defects have led to multiple devastating timing attacks, and were a key reason
why BLISS was not submitted to the NIST postquantum standardization effort. In fact, almost all of the actual
candidates chose to stay away from Gaussians despite their efficiency advantage, due to the serious concerns
surrounding implementation security.
Moreover, naive countermeasures will often not cut it: we show that a reasonable-looking countermeasure
suggested in previous work to protect the BLISS rejection sampling can again be defeated using novel timing
attacks, in which the timing information is fed to phase retrieval machine learning algorithm in order to
achieve a full key recovery.
Fortunately, we also present careful implementation techniques that allow us to describe an implementation
of BLISS with complete timing attack protection, achieving the same level of efficiency as the original
unprotected code, without resorting on floating point arithmetic or platform-specific optimizations like AVX
intrinsics. These techniques, including a new approach to the polynomial approximation of transcendental
function, can also be applied to the masking of the BLISS signature scheme, and will hopefully make more
efficient and secure implementations of lattice-based cryptography possible going forward.
Additional Key Words and Phrases: Timing Attack; Phase Retrieval algorithms; Constant-
time Implementation; Lattice-based Cryptography; Masking Countermeasure
INTRODUCTION
The looming threat of general-purpose quantum computers against legacy public-key crypto-
graphic schemes makes it a pressing problem to prepare the concrete transition to postquantum
cryptgraphy. Lattice-based cryptography, in particular, offers an attractive alternative to currently
deployed schemes based e.g. on RSA and elliptic curves, thanks to strong theoretical security guar-
antees, a large array of achievable primitives, and a level of efficiency that can rival pre-quantum
constructions.
Despite their attractive theoretical properties, however, lattice-based constructions present novel
challenges in terms of implementation security, particularly with respect to side-channel attacks.
Taking signatures as an example, possibly the most efficient construction proposed so far is the
BLISS signature scheme of Ducas et al. [16], which features excellent performance and has seen
1
real-world deployment via the VPN software suite strongSwan. Later implementations of BLISS
show good hardware performance as well [34]. However, existing implementations of BLISS suffer
from significant leakage through timing side-channels, which have led to several devastating attacks
against the scheme [6, 9, 22, 33, 40]. The main feature of BLISS exploited in these attacks in the use
of discrete Gaussian distributions, either as part of the Gaussian sampling used to generate the
random nonces in BLISS signatures, or as part of the crucial rejection sampling step that forms the
core of the Fiat–Shamir with aborts framework that supports BLISS’s security.
Generally speaking, Gaussian distributions are ubiquitous in theoretical works on lattice-based
cryptography, thanks to their convenient behavior with respect to proofs of security and parameter
choices. However, their role in practical implementations is less clear, largely because of the
concerns surrounding implementation attacks. For example, BLISS was not submitted to the
NIST postquantum standardization effort due to those concerns, and second round candidate
Dilithium [18], which can be seen as a direct successor of BLISS, replaces Gaussian distributions
by uniform ones, at the cost of larger parameters and a less efficient implementation, specifically
citing implementation issues as their justification.
In this paper we study the security of the BLISS implementation against cache-based timing
and power side-channel attacks. Specifically, we develop efficient implementations of BLISS that
are secure against these attacks. Although our results target BLISS in particular, our techniques
can be applied to the very large class of constructions based on discrete Gaussian distributions (at
least those that use Gaussians with fixed standard deviation), which form the bulk of works on
lattice-based cryptography. Protecting implementations for these constructions are challenging
because state-of-the-art techniques for constant-time and masked implementations mainly consider
deterministic programs (and thus in particular for programs with deterministic control-flow).
However, schemes that involve Gaussian sampling. In particular, signature schemes within the
Fiat–Shamir with aborts framework use rejection sampling, also called the acceptance-rejection
method. To sample from a distribution X, with density f , one uses samples from the distribution Y
with density д as follows:
(1) Get a sample y from distribution Y and a sample u from the uniform distribution on (0, 1),
(2) If u  B2 then reject
if ∥(z1∥2d · z†
2)∥∞ > B∞ then reject
t ← H(⌊ζ · a1 · z1 + ζ · q · c⌉d + z†
if t (cid:44) c then reject
return accept
1: function Verify(µ, pk = a1, (z1, z†
2:
3:
4:
5:
6:
7: end function