there is a substantial skew towards medium and high scores, which
may be the visible effect of security researchers favoring reports of
higher-value vulnerabilities (related to the limitations outlined in
Section 3.6).
Table 2: Top 10 CWE software weaknesses by the number of
CVEs.
4.4 Vulnerability Categories
The Common Weakness Enumeration (CWE) is a standard for iden-
tifying the class of software weaknesses that resulted in a particular
security issue [24]. The final NVD annotation we consider is the vul-
nerability’s CWE identifiers, indicating the vulnerability categories.
A CWE ID is assigned for 87% of CVEs in our dataset. In total, there
are 45 unique CWE IDs associated with our vulnerabilities. Table 2
enumerates the most common software weaknesses, including fre-
quent security problems such as buffer overflows and cross-site
scripting errors. However, again we observe that our vulnerabilities
span a wide variety of security issues.
4.5 Vulnerability Distribution over
Repositories
Our selected CVE vulnerabilities were unevenly distributed over
682 Git projects, as visible in Figure 5. Our dataset contains one
vulnerability for the majority of projects, and a heavy skew towards
a smaller set of projects (e.g., the Linux kernel has over 900 CVE-
related commits). Due to this skew, our analysis must consider
per-repository averages, in addition to aggregates.
Figure 5 also illustrates the total number of commits in repository
logs. We see that our repositories have varying levels of develop-
ment, ranging from 3 commits for the “Authoring HTML” Drupal
module to over 100,000 commits for projects such as the Linux
kernel, LibreOffice, MySQL server, and the PHP interpreter.
2005200720092011201320152017Time0100101102103Number of CVEs per Month(Log-Scaled)0246810CVSS Severity Score0100200300400500600700800Number of CVEsSession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2206patches themselves (in comparison to non-security bug fixes). In
this section, we discuss our corresponding analysis and findings.
When exploring differences between two groups, we determine
the statistical significance of our observations using permutation
tests with 1,000 rounds. For each group we use a summary statistic
of the area under the CDF curve for the investigated metric. In
each round of a permutation test, we randomly reassign group
labels to all data points (such that group sizes remain constant),
recompute the summary statistic for each group, and determine if
the summary statistic difference between the newly formed groups
exceeds that of the original groups. If the null hypothesis holds
true and no significant difference exists between the groups, then
the random permutation will only reflect stochastic fluctuations
in the summary statistic difference. We assess the empirical prob-
ability distribution of this measure after the permutation rounds,
allowing us to determine the probability (and significance) of our
observed differences. We compute all of the reported p-values via
this approach, and using a significance threshold of α = 0.05.
5.1 Patch Development Life Cycle
From a software project’s perspective, a vulnerability advances
through several events throughout its life, such as its introduc-
tion into the code base, its discovery and the subsequent patch
development, the public disclosure of the security issue, and the
distribution of the fix. Prior studies have analyzed the vulnerability
life cycle from a public perspective [14, 27, 32], observing when
a vulnerability became disclosed to the public and when the cor-
responding patch was publicly distributed. However, these works
have not delved into the project developer side of the remediation
process and the life cycle of the patch development itself. Such an
exploration can help illuminate the responsiveness of developers
to patching vulnerabilities, how long fixes are available before they
are actually distributed publicly, and how successfully developers
resolve security issues. Here, we investigate the patch development
process by connecting the vulnerability information available in
the NVD with the historical logs available in Git repositories.
5.1.1 Vulnerability Life Spans in Code Bases. Upon a vulnera-
bility’s first discovery, we might naturally ask how long it plagued
a code base before a developer rectified the issue. We call this
duration the vulnerability’s code base life span—a notion distinct
from the vulnerability’s window of exposure as investigated in prior
work [14, 32], which measures the time from the first release of a
vulnerable software version to the public distribution of its patch.
As the development and distribution of a patch often occur at dif-
ferent times (a factor we explore in Section 5.1.2), the code base
life span reflects the window of opportunity for attackers who
silently discover a vulnerability to leverage it offensively, before
any defensive measures are taken.
Reliably determining when a vulnerability was born in an au-
tomated fashion is difficult, as it requires semantic understanding
of the source code and the nature of the vulnerability. However,
we can approximate a lower bound on age by determining when
the source code affected by a security fix was previously last mod-
ified. We note that this heuristic does assume that security fixes
modify the same lines that contained insecure code, which may
not always be the case. However, we assessed whether this is a
Figure 5: CDFs of the number of CVE commits and all com-
mits for our collected Git repositories.
Figure 6: CDFs of the number of files and file lines in our
collected repositories and their cleaned versions.
4.6 Repository Size
We can characterize a repository’s size by the number of files it
has, or the number of lines in those files. In Figure 6, we plot the
CDFs of these metrics, for both the original repositories and their
cleaned versions (as described in Section 3.4). Our selected projects
vary widely in their sizes along both metrics. We find small projects
affected by vulnerabilities, such as the SQL injection bug (CVE-
2013-3524) in phpVMS’s “PopUpNews” module, consisting of 4 PHP
files with 103 lines of code. On the other extreme, the Linux kernel
contains 20 million lines of code across 44,000 files.
5 ANALYSIS RESULTS
Our collected dataset consists of a diverse set of security vulner-
abilities across numerous software projects, for which we have
downloaded the source code repositories and amassed a set of both
security and non-security bug fixes. The combination of the meta-
data about patched vulnerabilities and the direct visibility into the
corresponding source codes (as well as their history of changes)
affords us with a unique perspective on the development life cycle
of security fixes, as well as on the characteristics of the security
100101102103104105106Number of Commits per Git Repository(Log-Scaled)0.00.20.40.60.81.0CDFCVE CommitsAll Commits100101102103104105106107Number per Git Repository (Log-Scaled)0.00.20.40.60.81.0CDFCleanedFilesFilesCleanedFile LinesFile LinesSession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2207Weakness Summary
Median Life Span
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
SQL Injection
Cross-Site Scripting
Improper Input Validation
Access Control Error
Cryptographic Issues
Resource Management Error
Information Disclosure
Race Condition
Numeric Error
Buffer Overflow
230.0
290.0
350.0
373.0
456.0
480.0
516.5
573.0
659.5
781.0
Figure 7: CDFs of CVE vulnerability life spans, for all CVEs
and when grouped by software repositories.
robust approximation by randomly sampling 25 security patches.
We observed that only 1 did not touch an originally insecure code
region, enabling us to conclude that the vast majority of security
fixes do modify the culprit code regions.
We analyzed the cleaned versions of security commit data to
focus on source code changes. For all lines of code deleted or modi-
fied by a security commit, we used Git’s “blame” functionality to
retrieve the last time each line was previously updated (the blame
date).4 We conservatively designate the most recent blame date
across all lines as the estimated date of vulnerability introduction.
Then, the duration between this date and the commit date provides
a lower bound on the vulnerability’s code base life span.
How long do vulnerabilities live in code bases? Figure 7 illus-
trates the distribution of the lower bound estimates for vulnerability
life spans. We plot the distribution for the aggregate of all CVEs,
conservatively using the shortest life span for CVEs with multiple
commits. To consider potential bias introduced by the uneven dis-
tribution of CVEs across repositories (discussed in Section 4.5), we
also group commits by their repositories and plot the distributions
of the minimum, median, and maximum life span per repository.
The aggregate CVE distribution largely follows that of the per-
repository median, although it exhibits skew towards longer life
spans.
We observe that vulnerabilities exist in code bases for extensive
durations. Looking at per-repository medians, we see that 50% had
life spans exceeding 438 days (14.4 months). Furthermore, a quarter
of repository medians and a third of all CVEs had life spans beyond
three years. The longest surviving vulnerability was CVE-2015-8629
in the Kerberos 5 project, patched in January, 2016. The information
disclosure vulnerability was first introduced over 21 years ago.
We observe that 6.5% of our CVEs had a life span lower bound of
less than 10 days. Manual inspection identified these as cases where
our lower bound was overly conservative, as the vulnerability was
introduced at an earlier date. Recent commits happened to touch
the same area of code involved in the security fix, resulting in our
under-approximation.
4 Note that we cannot similarly process newly added lines, as they did not exist prior
to the commit. We ignore the 22.8% of commits with only additions.
Table 3: Median vulnerability life span in days for the top 10
software weakness categories, as classified by CWE.
Our results concur with prior findings that vulnerabilities live
for years, generalized across numerous types of software. Man-
ual evaluation of Ubuntu kernel vulnerabilities [19, 20] found that
the average vulnerability’s code base life span was approximately
5 years. Similarly, Ozment and Schechter [28] manually analyzed
vulnerabilities in OpenBSD, finding the median vulnerability life-
time exceeded 2.6 years, although they noted that OpenBSD empha-
sizes secure coding practices. We observe that our typical life span
estimates are lower than these previous ones, which may be due to
our consideration of software projects beyond Linux variants, or
our conservative approximation method.
Do more severe vulnerabilities have shorter lives? One
might hypothesize that more severe vulnerabilities reside in code
bases for shorter periods, as their more visible impact may correlate
with more likely discovery and quicker remediation. To explore this
aspect, we correlate CVSS severity scores with life spans, computing
a Spearman’s correlation coefficient of ρ = −0.062. This indicates
that there is no substantial (monotonic) correlation between a vul-
nerability’s severity and its life span. Even if developers are more
motivated to remedy severe vulnerabilities, their expediency pales
in comparison to the time scale of the initial vulnerability discovery,
which our analysis shows is uncorrelated with severity. We note
this generalizes an observation that Ubuntu vulnerability life spans
likewise did not correlate with severity [20].
Do different types of vulnerabilities have varying life spans?
Different classes of vulnerabilities may exhibit varying life spans,
as some vulnerabilities might prove more challenging to uncover.
In Table 3, we summarize the vulnerability life spans for CVEs
exhibiting the top 10 software weaknesses as classified by CWE
(as discussed in Section 4.4). We observe that vulnerability life
spans vary widely based on the software weakness class. Web-
oriented vulnerabilities like SQL injection and cross-site scripting
have significantly shorter life spans compared to errors in software
logic and memory management. In comparison, race conditions,
numeric errors, and buffer overflows remain undiscovered for two
to three times as long. (Balancing across software repositories did
not change the findings.) We conjecture that the life span variation
across different vulnerability types results from both the type of
software affected and the nature of the vulnerability. For example,
web-oriented issues may appear on websites visited by thousands
of users, increasing the likelihood that some problematic scenario
arises that uncovers the vulnerability. Also, certain vulnerabilities
100101102103104Number of Days Vulnerable to a Particular CVE(Log-Scaled)0.00.20.40.60.81.0CDFPer Repo MinimumPer Repo MedianPer Repo MaximumAll CVEsSession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2208Figure 8: CDFs of the number of days between a vulnerabil-
ity’s public disclosure and its fix, plotted for all CVEs and
grouped by software repositories.
Figure 9: CDFs of the number of days after public disclo-
sure until a CVE has a patch committed, grouped by the CVE
severity class.
such as cross-site scripting and SQL injection may be isolated to a
small portion of code where reasoning about and identifying issues
is more straightforward (compared to other problems such as race
conditions).
5.1.2
Security Fix Timeliness. The timeliness of a security fix
relative to the vulnerability’s public disclosure affects the remedia-
tion process and the potential impact of the security issue. On the
one hand, developers who learn of insecurities in their code base
through unanticipated public announcements have to quickly react
before the attackers leverage the information for exploitation. On
the other hand, developers who learn of a security bug through
private channels can address the issue before public disclosure, but
the available patch may not be released for some time due to a
project’s release cycle, expanding the vulnerability’s window of
exposure.
We explore this facet of remediation by comparing the patch
commit date for CVEs in our dataset with public disclosure dates
(estimated as described in Section 3.5). We note that disclosures are
not necessarily intertwined with patch releases, although this is
the case for the majority of disclosures [14]. In Figure 8, we depict
the CDFs of the number of days between disclosure and patching.
We plot this for all CVEs, using the earliest patch commit date if
a CVE has multiple commits associated with it. We additionally
group CVEs by their software repositories, and plot the distribution
across repositories. Here, we observe that the aggregate distribution
over all CVEs largely matches the distribution over per-repository
medians, although the per-repository medians exhibit a slight skew
towards smaller absolute values.
How frequently are vulnerabilities unpatched when dis-
closed? In Figure 8, vulnerabilities publicly disclosed but not yet
fixed manifest as positive time difference values. This occurred for
21.2% of all CVEs. We cannot determine whether these vulnera-
bilities were privately reported to project developers but with no
prior action taken, or disclosed without any prior notice. However,
over a quarter (26.4%) of these unpatched security issues remained
unaddressed 30 days after disclosure, leaving a window wide open
for attacker exploitation. This generalizes the observation made by
Frei [13], who found that approximately 30% of Windows vulner-
abilities were unpatched at disclosure and some remained so for
over 180 days.
How frequently are vulnerabilities fixed by disclosure time?
The predominant behavior in Figure 8, occurring for 78.8% of all
CVEs, is that the security fixes were committed by public disclosure
time, manifesting as negative or zero time differences. This suggests
that the majority of vulnerabilities were either internally discov-
ered or disclosed to project developers using private channels, the
expected best practice.
Are vulnerability patches publicly visible long before disclo-
sure? From Figure 8, we see that nearly 70% of patches were com-
mitted before disclosure (having negative time difference values).
The degree to which security commits precede disclosures varies
widely, which upon manual inspection appears to arise due to the
different release cycles followed by various projects (and varia-
tions within each project’s development timeline). This behavior
highlights the security impact of an interesting aspect of the open-
source ecosystem. Open-source projects are not frequently in a
position to actively distribute security updates. Rather, we observe
that projects roll security fixes into periodic version releases that
users must directly download and install, or updates are pulled
downstream for incorporation by software distribution platforms
(such as package repositories maintained by Linux OS variants).
Announcements about the releases or updates, and the security
fixes they contain, follow shortly after.
Unfortunately, this development and deployment process also
provides a window of opportunity for exploitation. Given the public
nature of open-source projects and their development, an attacker
targeting a specific software project can feasibly track security
patches and the vulnerabilities they address. While the vulnerability
is addressed in the project repository, it is unlikely to be widely
fixed in the wild before public disclosures and upgrade distribution.
From Figure 8, we note that over 50% of CVEs were patched more