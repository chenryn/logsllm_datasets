title:Next Generation P2P Botnets: Monitoring Under Adverse Conditions
author:Leon B&quot;ock and
Emmanouil Vasilomanolakis and
Max M&quot;uhlh&quot;auser and
Shankar Karuppayah
Next Generation P2P Botnets:
Monitoring Under Adverse Conditions
Leon B¨ock1(B), Emmanouil Vasilomanolakis1, Max M¨uhlh¨auser1,
and Shankar Karuppayah2
1 Telecooperation Lab, Technische Universit¨at Darmstadt, Darmstadt, Germany
{boeck,vasilomano,max}@tk.tu-darmstadt.de
2 National Advanced IPv6 Centre, Universiti Sains Malaysia (USM), Gelugor,
Malaysia
PI:EMAIL
Abstract. The eﬀects of botnet attacks, over the years, have been dev-
astating. From high volume Distributed Denial of Service (DDoS) attacks
to ransomware attacks, it is evident that defensive measures need to be
taken. Indeed, there has been a number of successful takedowns of bot-
nets that exhibit a centralized architecture. However, this is not the case
with distributed botnets that are more resilient and armed with coun-
termeasures against monitoring. In this paper, we argue that monitoring
countermeasures, applied by botmasters, will only become more sophisti-
cated; to such an extent that monitoring, under these adverse conditions,
may become infeasible. That said, we present the most detailed analy-
sis, to date, of parameters that inﬂuence a P2P botnet’s resilience and
monitoring resistance. Integral to our analysis, we introduce BotChurn
(BC) a realistic and botnet-focused churn generator that can assist in
the analysis of botnets. Our experimental results suggest that certain
parameter combinations greatly limit intelligence gathering operations.
Furthermore, our analysis highlights the need for extensive collaboration
between defenders. For instance, we show that even the combined knowl-
edge of 500 monitoring instances is insuﬃcient to fully enumerate some
of the examined botnets. In this context, we also raise the question of
whether botnet monitoring will still be feasible in the near future.
1 Introduction
Botnets are networks of infected computers, that can be remotely controlled
by malicious entities, commonly referred to as botmasters. Botnets have been
historically used for launching a multitude of attacks, ranging from DDoS and
blackmailing, to credential theft, banking fraud, etc. Recently, with the emer-
gence of the Internet of Things (IoT), the landscape of vulnerable connected
devices has increased signiﬁcantly. This led to a resurgence of many new botnets
infecting weakly protected IoT devices. These IoT botnets are particularly noto-
rious for their high bandwidth DDoS attacks, bringing down even well protected
websites and services.
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 511–531, 2018.
https://doi.org/10.1007/978-3-030-00470-5_24
512
L. B¨ock et al.
An approach to remove the botnet threat, is to identify and take down the
Command and Control (C2) channel used by the botmasters. For centralized
botnets, this has proven to be an eﬀective approach with many being taken
down by seizing their respective C2 servers [7]. More advanced botnets over-
come this Single Point of Failure (SPoF), by employing a peer-to-peer (P2P) C2
structure, where each bot acts as a server and a client. Hence, defenders have
to target the majority of bots to take the botnet down. This requires knowledge
about the population and inter-connectivity of the botnet, which is commonly
achieved via monitoring. Monitoring mechanisms are commonly developed by
reverse engineering and re-implementing the communication protocol of a botnet
to gather intelligence. As botnet monitoring poses a threat for the botmasters,
many botnets, e.g., GameOver Zeus [3] and Sality [6], implement monitoring
countermeasures. These mechanisms increase the diﬃculty of monitoring opera-
tions, but do not prevent them [20]. Nevertheless, recent publications presented
sophisticated countermeasures, that further limit or even prevent monitoring
activities [2,14,25]. Hence, we argue that it is a matter of time until botmasters
introduce such countermeasures to impede monitoring in its current form.
To deal with next-generation botnets, we need to understand the extent at
which advanced countermeasures prevent monitoring operations. Investigating
each of the countermeasures individually will likely end in a never ending arms
race for new monitoring and anti-monitoring mechanisms. To avoid this arms
race, we instead introduce a lower boundary for monitoring operations in adverse
conditions, i.e., monitoring in the presence of sophisticated countermeasures.
To achieve this, we make the assumption that a botmaster can detect any
behavior deviating from that of a normal bot. Therefore, the maximum intelli-
gence that can be gathered with a single monitoring instance is limited to the
information that can be obtained by any regular bot itself. As this can vary
for diﬀerent botnets, we analyze several botnet parameterizations to be able
to evaluate how much intelligence can be gathered in diﬀerent botnet designs.
This allows us to evaluate the eﬀectiveness of monitoring operations in adverse
conditions, based on the parameters of the botnet protocol. To ensure that our
simulations accurately replicate the behavior of real bots, we utilize churn mea-
surements taken from live botnets [11]. Moreover, we develop and present a novel
botnet churn generator that simulates churn more accurately than the state of
the art. At a glance, the two major contributions of this paper are:
– An extensive analysis of botnet designs and parameterizations, with an
emphasis to their resilience and monitoring resistance.
– A realistic and botnet-focused churn generator, namely BotChurn (BC).
The remainder of this paper is structured as follows. Sections 2 and 3, intro-
duce the background information and the related work respectively. Section 4,
presents our analysis regarding the eﬀectiveness of monitoring in adverse con-
ditions. Section 5, provides a detailed description of our proposed botnet churn
generator. Section 6 discusses the evaluation of our churn generator and the eﬀec-
tiveness of monitoring in adverse conditions. Lastly, Sect. 7, concludes our work
and presents outlooks with regard to our future work.
Next Generation P2P Botnets: Monitoring Under Adverse Conditions
513
2 Background
In the following, we provide background information with regard to P2P botnets
and their underlying technologies as well as introductory information regarding
common monitoring mechanisms.
2.1 P2P Botnets
The decentralized nature of P2P botnets and the absence of a SPoF, makes them
highly resilient against takedown attempts [20]. P2P networks can be catego-
rized into structured and unstructured overlays. Structured P2P overlays such
as Kademlia [16] use a concept called Distributed Hash Table (DHT). As an
example, Kademlia implements a ring structure on which all peers, i.e., partici-
pants in the P2P network, are placed based on their ID. Peers connect to a set
peers, based on their distance in the ring structure. Unstructured P2P overlays
do not have such a structure but maintain connectivity based on a Membership
Management (MM) mechanism. At the core of this MM is a so called Neigh-
borlist (NL). The NL consists of a subset of all existing peers commonly referred
to as neighbors. To maintain connectivity within the network, peers frequently
exchange NL-entries with their neighbors.
For botnets, the major diﬀerence between structured and unstructured P2P
networks is related to the diﬃculty of monitoring. For instance, structured bot-
nets, e.g., Storm [10], can be monitored eﬃciently [21]. More recent P2P botnets
such as Sality [6], GameOver Zeus [3] and ZeroAccess [18] use unstructured
P2P overlays. This makes them more diﬃcult to be monitored, as the lack of
a structure prevents the usage of eﬃcient approaches applicable to structured
P2P networks. Due to the greater resistance against monitoring attempts, this
paper focuses on unstructured P2P botnets.
A major challenge for any P2P overlay is the handling of node churn, i.e.,
nodes leaving and joining the network. Churn is caused by diurnal patterns or
by machines being turned oﬀ and on throughout the globe. To ensure that the
network remains connected under the eﬀects of churn, P2P overlays leverage
the MM system. The MM ensures that inactive peers, in the NL of a node, are
replaced with responsive peers. This is usually achieved by probing the activity
of all entries in an NL at ﬁxed intervals. Common values for such Membership
Management Interval (MMIs) are between one second [18] and 40 min [6].
If an entry in the NL of a bot is unresponsive for several consecutive MMIs,
it is removed from the NL. To replace removed peers, a node commonly asks
their own neighbors for responsive candidates by sending an NL-request. A bot’s
NL can also be passively updated upon receipt of a message from a bot that
is not in the bot’s NL [3]. This allows the bots to maintain active connections
among bots within the P2P overlay despite being aﬀected by churn.
2.2 Botnet Monitoring Mechanisms
To obtain information about the extent of a botnet infection, one has to conduct
intelligence gathering by monitoring the botnet. Monitoring a P2P botnet is
514
L. B¨ock et al.
achieved via the usage of crawlers, sensors or a combination of both. At a glance,
crawlers are more of an active approach whereas sensors are more passive.
A crawler enumerates the botnet by continuously requesting NL-entries from
bots. Given a list of seed-nodes, a crawler follows a crawling strategy such as
Breadth-First Search (BFS), Depth-First Search (DFS) or Less Invasive Crawl-
ing Algorithm (LICA) [12] to discover bots within the botnet. The seed-list is
updated between crawls by adding all newly discovered bots into it. This allows
crawlers to quickly obtain information about participating bots and their inter-
connectivity. The major drawback of crawlers is that they cannot discover bots
that are behind Network Address Translation (NAT) or a ﬁrewall. Such bots
usually cannot be contacted from the Internet, unless they initiate the connec-
tion ﬁrst. Therefore, crawlers underestimate the population of a botnet [20].
Moreover, the aggressive sending of NL-requests makes crawlers easy to detect
[14].
Sensors can provide more accurate enumerations of botnets by overcoming
the aforesaid drawback of crawlers. A sensor imitates the behavior of a regular
bot by responding to probe messages from other bots. By remaining active within
the botnet for prolonged periods, sensors become popular within the botnet.
That is, more bots will add the sensor to their NL and frequently contact it
during their MMI. This allows a sensor to accurately keep track of the entire
botnet population including those that are behind NAT-like devices. However,
a major drawback for sensors is the lack of inter-connectivity information of
the botnet. Therefore, sensors are commonly used as an addition to crawlers
instead of a replacement. Another drawback of sensors is that they require time
to become popular and therefore do not yield results as quickly as crawlers. This
can again be surmounted by using a crawler to help spread information about
the sensor to speed up the popularization process [27].
3 Related Work
In this section, we discuss the state of the art of: (i) P2P botnet monitoring
techniques and (ii) advanced countermeasures against monitoring.
3.1 P2P Botnet Monitoring
Rossow et al. present an in-depth analysis on the resilience against intelligence
gathering and disruption of P2P botnets [20]. They analyze the peer enumeration
capabilities of sensors and crawlers on several P2P botnets and provide real world
results. Furthermore, they analyze the resilience of these botnets against com-
munication layer poisoning and sink-holing attacks. Their work clearly presents
the drawbacks and beneﬁts of crawlers and sensors. The authors also present
an analysis of reconnaissance countermeasures implemented by botnets. Most
notably, botnets such as Sality and GameOver Zeus implement rate limiting
mechanisms on neighborlist replies. In addition, GameOver Zeus implements an
automated blacklisting mechanism against aggressive crawlers.
Next Generation P2P Botnets: Monitoring Under Adverse Conditions
515
Karuppayah et al. introduce a new crawling strategy called LICA [12]. Their
crawling algorithm approximates the minimum vertex coverage by prioritizing
nodes with high in-degree. Their approach provides a means to crawl a bot-
net faster and more eﬃciently compared to BFS or DFS. Yan et al. present a
sensor popularization method called popularity boosting [27]. Popularity boost-
ing leverages a mechanism that botnets commonly use to allow new bots to
get into other peers NLs. For instance, in the Sality botnet, a bot can send a
server-announcement-message upon joining the botnet. If the bot fulﬁlls a set
of conditions, such as being publicly routable, it will be added at the end of the
receiving bot’s NL. This mechanism allows sensors to be quickly injected into
the NL of active bots in a botnet. In [13], the authors present an algorithm that
eﬃciently extracts all entries from a bot’s NL in the GameOver Zeus botnet.
Contrary to a random spooﬁng of IDs, their strategic approach guarantees to
extract all entries from a bot’s NL. Lastly, botnet detection mechanisms such as
[8,17] also provide monitoring information about botnets. While the main goal
this research is to detect botnets within a monitored network, this information
can also be used for enumeration or derivation of connectivity between individual
bots.
3.2 Monitoring Countermeasures
In this section, we introduce the landscape of monitoring countermeasures. We
diﬀerentiate between countermeasures that have been implemented by botmas-
ters and novel countermeasures that have been proposed by researchers.
Existing Anti-monitoring Mechanisms: As monitoring poses a threat to
botmasters, some botnets implement features speciﬁcally aimed at preventing
monitoring attempts. Many botnets such as GameOver Zeus [3], Sality [6], and
ZeroAccess [18] implement restricted Neighborlist Reply Sizes (NLRSs). This
means, that when being requested, they only share a subset of their NL to the
requesting bot. This signiﬁcantly increases the enumeration eﬀort for crawlers.
Furthermore, GameOver Zeus implements an automated blacklisting mech-
anism that blacklists a node if it sends more than ﬁve requests within a sliding
window of one minute. The Sality botnet also implements a simple trust mech-
anism called Goodcount. For each NL-entry, such a Goodcount value is main-
tained. A bot sends periodic messages to all its neighbors and increases a nodes
Goodcount upon receipt of a valid reply and decreases the Goodcount otherwise.
This locally maintained reputation mechanism prevents that a bot replaces well
known active NL-entries with newer entries, e.g., sensors.
Proposed Advanced Anti-monitoring Mechanisms: Andriesse et al. ana-
lyzed whether sensors and crawlers can be detected, from the botmasters’ per-
spective, based on protocol and behavioral anomalies [2]. Their ﬁndings suggest
that crawlers can indeed be detected based on anomalous behavior. The anoma-
lies that were used for identifying the crawlers, vary from implementation-speciﬁc
516
L. B¨ock et al.
ones to logical and protocol level misconducts. The authors were also able to
detect sensor nodes based on deviating (protocol) features.
Karuppayah et al. present another mechanism, that uses a bot’s local view
to identify crawlers within a P2P botnet [14]. For that, they focus on protocol
violations that are common for crawlers in all P2P botnets. Upon detection, a
bot can blacklist the crawler and prevent any further communication with it.
In [5,11], the authors use graph connectivity metrics to identify sensor
nodes within P2P overlays. Both approaches are based on the assumption that