7! (?; sb) in the plain model, using only two rounds and a one-way tokens transfer phase that involves
sending a set of tokens from the sender to the receiver in one direction. We begin with a protocol that
comprises of three rounds where the ﬁrst round only transfers tokens from one party and then later modify it
to obtain a two-round protocol where the tokens are reusable and need to be transferred once at the beginning
of the protocol. For simplicity of exposition, in the sequel we will assume that the random coins are an
implicit input to the commitments and the extractor, unless speciﬁed explicitly. Informally, in the one-way
tokens transfer phase the sender sends two types of tokens. The PRF tokens fTKPRF;l
gl2[4(cid:20)2] are used by the
receiver to commit to its input b using the shares fbigi2[(cid:20)]. Namely, the number of tokens equals 4(cid:20) (which
denote the number of tokens per Pass-Wee commitment), times (cid:20) which is the number of the receiver’s
input shares. Whereas, the commitment token TKCom
is used by the receiver to obtain the commitments
1)gi2[(cid:20)] which are later used to conceal the sender’s real
of the sender in order to mask the values f(si
(cid:20)
inputs to the oblivious transfer. Next, the receiver shares its bit b into b1; : : : ; b(cid:20) such that b =
i=1 bi
and commits to these shares using the Pass-Wee trapdoor commitment scheme. Importantly, we consider a
slightly variant of the Pass-Wee commitment scheme where we combine the last two steps of the commit
phase with the decommit phase. In particular, the ﬁnal veriﬁcation in the commit phase is included as part of
the decommitment phase and incorporated into the sender’s tokens fTKig that are forwarded in the second
⊕
round. The sender further sends the commitments to its inputs s0; s1 computed based on hardcore predicates
for the (s0
i ) values and a combiner speciﬁed as follows. The sender chooses z1; : : : ; z(cid:20) and ∆ at random,
i ; s1
i=1 zi (cid:8) ∆ masks s1. Finally, the sender respectively commits to each zi
(cid:20)
where
i=1 zi masks s0 and
and zi (cid:8) ∆ using the hardcore bits computed on the (s0
i ) values. More precisely, it sends
⊕
⊕
i ; s1
0; si
(cid:20)
S
S
⊕
i=1 zi. If none of the tokens abort, the receiver obtains sbi
(cid:8) (wb1
(cid:8) H(sb1
1 = w (cid:8) ∆ (cid:8) s1
0 = w (cid:8) s0 and s
′
′
s
i = zi (cid:8) ∆ (cid:8) H(s1
i ) and w1
i )
for all i 2 [(cid:20)] and computes
(cid:20) )). If any of the OT tokens, i.e. TKi, aborts then the receiver
i = zi (cid:8) H(s0
1 ))(cid:1)(cid:1)(cid:1) (cid:8) (wb(cid:20)
8 i 2 [(cid:20)] w0
(cid:8) H(sb(cid:20)
(cid:20)
(cid:20)
i
where w =
′
sb = s
b
assumes a default value for sb.
1
Remark 4.1 In [GIS+10], it is pointed out by Goyal et al. in Footnote 12 that assuming a default value
in case the token aborts might cause an input-dependent abort. However, this problem arises only in their
protocol as a result of the faulty simulation.
In particular, our protocol is not vulnerable to this since
the simulator for a corrupted sender follows the honest receiver’s strategy to extract both the inputs via
(statistical) equivocation. In contrast, the simulation in [GIS+10] runs the honest receiver’s strategy for a
randomly chosen input in a main execution to obtain the (adversarially corrupted) sender’s view and uses a
“receiver-independent” strategy to extract the sender’s inputs. For more details, see Appendix A.
Remark 4.2 In Footnote 10 of [GIS+10], Goyal et al. explain why it is necessary that the receiver run
the token implementing the one-time memory functionality (OTM) in the prescribed round. More precisely,
they provide a scenario where the receiver can violate the security of a larger protocol in the OT-hybrid
by delaying when the token implementing the OTM is executed. Crucial to this attack is the ability of
the receiver to run the OTM token on different inputs. In order to prevent such an attack, the same work
incorporates a mechanism where the receiver is forced to run the token in the prescribed round. We remark
18
here that our protocol is not vulnerable to such an attack. We ensure that there is only one input on which
the receiver can query the OTM token and this invalidates the attack presented in [GIS+10].
Next, we describe our OT protocol (cid:5)OT in the FgWRAP-hybrid with sender S and receiver R. Let (1) Com
be a non-interactive perfectly binding commitment scheme, (2) TCom = fTCmsg1; TCmsg2; TCmsg3
g
′
denote the three messages exchanged in the commit phase of the trapdoor commitment scheme, (3) F; F
be two PRF families that map f0; 1g5(cid:20) ! f0; 1g(cid:20) and f0; 1g(cid:20) ! f0; 1gp((cid:20)), respectively (4) H denote
a hardcore bit function and (5) Ext : f0; 1g5(cid:20) (cid:2) f0; 1gd ! f0; 1g denote a randomness extractor where
the source has length 5(cid:20) and the seed has length d (for simpler exposition we drop the randomness in the
description below).
Protocol 1 Protocol (cid:5)OT - OT with stateless tokens in the plain model.
(cid:15) Input: S holds two strings s0; s1 2 f0; 1g(cid:20) and R holds a bit b. The common input is sid.
(cid:15) The Protocol:
S ! R: The sender creates two sets of tokens as follows and sends them to the receiver.
i
M i
j =
it commits to bi be setting tcombi = (M i
(cid:17)i;j   f0; 1g(cid:20) as per Figure 3 and computes:
) (cid:8) (cid:17)i;j; v4j(cid:0)3
) (cid:8) (cid:17)i;j; v4j(cid:0)2
0@ (Ext(u4j(cid:0)3
(Ext(u4j(cid:0)2
4. For all i 2 [(cid:20)], R sends tcombi.
1. S chooses z1; : : : ; z(cid:20); ∆   f0; 1g, computes w =
i = zi (cid:8) ∆ (cid:8) H(s1
on input tcombi
i = zi (cid:8) H(s0
and fw0
code of the token TKCom
i ); w1
∥i.
)
)
i
i
i
S
S ! R:
19
(Ext(u4j(cid:0)1
i
(Ext(u4j
) (cid:8) bi (cid:8) (cid:17)i;j; v4j(cid:0)1
i ) (cid:8) bi (cid:8) (cid:17)i;j; v4j
i )
i
)
1A :
⊕
i )gi2[(cid:20)] where (s0
(cid:20)
0 = w(cid:8)s0; s
1 = w(cid:8)∆(cid:8)s1
′
′
i=1 zi and sends s
i ) are computed by running the
i ; s1
2. TKCom
1. fTKPRF;l
′
S
S
S
: S chooses a random PRF
gl2[4(cid:20)2]: S chooses 4(cid:20)2 random PRF keys f(cid:13)lgl2[4(cid:20)2] for family F . Let PRF(cid:13)l : f0; 1g5(cid:20) !
f0; 1g(cid:20) denote the pseudorandom function. For all l 2 [4(cid:20)2], S creates a token TKPRF;l
by sending
(Create; sid; S; R; midl; M1) to FgWRAP, that on input (sid; x) outputs PRF(cid:13)l (x), where M1 is the
functionality; if sid ̸= sid the token aborts.
(cid:13)′ : f0; 1g(cid:20) ! f0; 1gp((cid:20)) denote
′
′. Let PRF
key (cid:13)
by sending (Create; sid; S; R; midl+1; M2) to
′ for family F
the pseudorandom function. S creates token TKCom
FgWRAP where M2 is the functionality that on input (sid; tcombi ; i) proceeds as follows:
– For the case where sid ̸= sid the token aborts;
(cid:13)′(0(cid:20)), parse V as e∥r and output come   Com(e; r).
′
– If i = 0: compute V = PRF
′
– Otherwise: compute V = PRF
(cid:13)′(tcombi
b; rb) for b = f0; 1g, and output comsi
∥r0∥r1, compute comsi
∥i), parse V as si
Com(si
; comsi
∥si
We remark that if V is longer than what is required in either case, we simply truncate it to the
appropriate length.
S
.
0
1
0
1
b
1. R sends (Run; sid; midl+1; (0(cid:20); 0)) and receives come and interprets it as TCmsg1.
2. For all i 2 [(cid:20)] and j 2 [4(cid:20)], R sends (Run; sid; mid1l ; uj
  f0; 1g5(cid:20) and receives
⊕
i ) (where l 2 [4(cid:20)2] is an encoding of the pair (i; j)). If the token aborts the receiver
(uj
i=1 bi. For all i 2 [(cid:20)],
(cid:20)). In particular, 8j 2 [(cid:20)] the receiver picks
3. R chooses (cid:20) (cid:0) 1 random bits b1; : : : ; b(cid:20)(cid:0)1 and sets b(cid:20) such that b =
i = TKPRF;l
vj
aborts.
i ) where uj
1; : : : ; M i
(cid:20)
S
i
R ! S:
2. S sends TCmsg3 = (e; decome).
3. For all i 2 [(cid:20)], S creates a token TKi by sending (Create; sid; S; R; midl+1+i; M3) to FgWRAP where
M3 implements the following functionality:
– For the case where sid ̸= sid the token aborts;
On input (sid; bi; TCdecombi ):
If TCdecombi is veriﬁed correctly then output (si
b; decomsi
b
(cid:15) Output Phase:
), else output (?;?)
1. For all i 2 [(cid:20)], R sends (Run; sid; midl+1; (tcombi; i)) and receives comsi
2. For all i 2 [(cid:20)], R sends (Run; sid; midl+1+i; (bi; TCdecombi)) and receives (si
b) (cid:8) wbi
mitments decomsi
of the tokens abort, the receiver sets sb = ?, where ? is a default value.
and decome are valid, R computes ~zi = H(si
0
b
i and sb =
b; decomsi
(cid:20)
b
). If the decom-
i=1 ~zi (cid:8) s
′
b. If any
; comsi
0
.
⊕
Next, we prove the following theorem,
Theorem 4.1 Assume the existence of one-way permutations, then Protocol 1 securely realizes FOT in the
FgWRAP-hybrid.
Proof overview. On a high-level, when the sender is corrupted the simulator rewinds the adversary in order
to extract both S’s inputs to the OT. Namely, in the ﬁrst execution simulator S plays the role of the honest
receiver with input 0 and learns the challenge e. It then rewinds the adversary and changes the receiver’s
commitments bi’s in a way that allows equivocating these commitments into both b = 0 and b = 1. Finally,
S queries the tokens fTKigi2[(cid:20)] twice by communicating with FgWRAP and decommiting into two different
sets of bit-vectors, which allows S to extract both inputs s0 and s1. The security proof follows by exploiting
the trapdoor commitment property, which allows in the simulation to open the commitments of the receiver’s