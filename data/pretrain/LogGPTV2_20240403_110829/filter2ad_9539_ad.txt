    // 541~543行
    System.IO.MemoryStream ms = new System.IO.MemoryStream();
    ICryptoTransform cryptoTransform = GetCryptoTransform(fEncrypt, useValidationSymAlgo, useLegacyMode);
    CryptoStream cs = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write);
这一段是先调用GetCryptoTransform 获取加密工具，而后通过CryptoStream
将数据流链接到加密转换流。不了解这一过程的可以查看微软[相关文档](https://docs.microsoft.com/zh-cn/dotnet/api/system.security.cryptography.cryptostream?view=netcore-3.1)。
关键在于GetCryptoTransform() 是如何选择加密工具的？该函数的3个参数中似乎并无算法相关。观其代码：
    private static ICryptoTransform GetCryptoTransform(bool fEncrypt, bool useValidationSymAlgo, bool legacyMode)
    {
        SymmetricAlgorithm algo = (legacyMode ? s_oSymAlgoLegacy : (useValidationSymAlgo ? s_oSymAlgoValidation : s_oSymAlgoDecryption));
        lock(algo)
            return (fEncrypt ? algo.CreateEncryptor() : algo.CreateDecryptor());
    }
algo 表示相应的算法类，那么关键便是 s_oSymAlgoValidation 和 s_oSymAlgoDecryption，察其来历：
ConfigureEncryptionObject() 函数：
    switch (Decryption)
    {
    case "3DES":
        s_oSymAlgoDecryption = CryptoAlgorithms.CreateTripleDES();
        break;
    case "DES":
        s_oSymAlgoDecryption = CryptoAlgorithms.CreateDES();
        break;
    case "AES":
        s_oSymAlgoDecryption = CryptoAlgorithms.CreateAes();
        break;
    case "Auto":
        if (dKey.Length == 8) {
            s_oSymAlgoDecryption = CryptoAlgorithms.CreateDES();
        } else {
            s_oSymAlgoDecryption = CryptoAlgorithms.CreateAes();
        }
        break;
    }
    if (s_oSymAlgoDecryption == null) // Shouldn't happen!
        InitValidationAndEncyptionSizes();
    switch(Validation)
    {
    case MachineKeyValidation.TripleDES:
        if (dKey.Length == 8) {
            s_oSymAlgoValidation = CryptoAlgorithms.CreateDES();
        } else {
            s_oSymAlgoValidation = CryptoAlgorithms.CreateTripleDES();
        }
        break;
    case MachineKeyValidation.AES:
        s_oSymAlgoValidation = CryptoAlgorithms.CreateAes();
        break;
    }
看来在网站初始化时就已将相应的加密类分配好了。
继续观察 EncryptOrDecryptData() 的代码：
    // 第545~579行
    // DevDiv Bugs 137864: Add IV to beginning of data to be encrypted.
    // IVType.None is used by MembershipProvider which requires compatibility even in SP2 mode (and will set signData = false).
    // MSRC 10405: If signData is set to true, we must generate an IV.
    bool createIV = signData || ((ivType != IVType.None) && (CompatMode > MachineKeyCompatibilityMode.Framework20SP1));
    if (fEncrypt && createIV)
    {
        int ivLength = (useValidationSymAlgo ? _IVLengthValidation : _IVLengthDecryption);
        byte[] iv = null;
        switch (ivType) {
            case IVType.Hash:
                // iv := H(buf)
                iv = GetIVHash(buf, ivLength);
                break;
            case IVType.Random:
                // iv := [random]
                iv = new byte[ivLength];
                RandomNumberGenerator.GetBytes(iv);
                break;
        }
        Debug.Assert(iv != null, "Invalid value for IVType: " + ivType.ToString("G"));
        cs.Write(iv, 0, iv.Length);
    }
    cs.Write(buf, start, length);
    if (fEncrypt && modifier != null)
    {
        cs.Write(modifier, 0, modifier.Length);
    }
    cs.FlushFinalBlock();
    byte[] paddedData = ms.ToArray();
这一段开头是在生成IV。IV是加密时使用的初始向量，应保证其随机性，防止重复IV导致密文被破解。
  * ivLength为64。这里随机生成64个字节作为iv。
  * 三次调用 cs.Write()，分别写入iv、buf、modifier。cs即为前面生成的CryptoStream类实例，用于将数据流转接到加密流。这里与我们前面所说的公式 E(iv + buf + modifier) 对应上了。
  * 调用ms.ToArray() ，即返回加密完成后的生成的字节序列。
继续观察 EncryptOrDecryptData() 的代码：
    // 第550~644行
    // DevDiv Bugs 137864: Strip IV from beginning of unencrypted data
    if (!fEncrypt && createIV)
    {
        // strip off the first bytes that were random bits
        ...
    }
    else
    {
        bData = paddedData;
    }
    ...
    // At this point:
    // If fEncrypt = true (encrypting), bData := Enc(iv + buf + modifier)
    // If fEncrypt = false (decrypting), bData := plaintext
    if (fEncrypt && signData) {
        byte[] hmac = HashData(bData, null, 0, bData.Length);
        byte[] bData2 = new byte[bData.Length + hmac.Length];
        Buffer.BlockCopy(bData, 0, bData2, 0, bData.Length);
        Buffer.BlockCopy(hmac, 0, bData2, bData.Length, hmac.Length);
        bData = bData2;
    }
    // At this point:
    // If fEncrypt = true (encrypting), bData := Enc(iv + buf + modifier) + HMAC(Enc(iv + buf + modifier))
    // If fEncrypt = false (decrypting), bData := plaintext
    // And we're done
    return bData;
这里是最后一部，将加密后生成的字节序列传给HashData，让其生成hash值，并缀在字节序列后面。
这就与前面的公式 E(iv + buf + modifier) + HMAC(E(iv + buf + modifier)) 对应上了。
看完 EncryptOrDecryptData() 函数的代码，我么也明白了其流程，总结下来其实就一个公式，没错就是 E(iv + buf +
modifier) + HMAC(E(iv + buf + modifier)) 。
### 7\. modifier 的来历
在前面进行签名和加密的过程中，都使用了一个关键变量叫做modifier，该变量同密钥一起用于签名和加密。该变量来自于 GetMacKeyModifier()
函数:
    // This will return the MacKeyModifier provided in the LOSFormatter constructor or
    // generate one from Page if EnableViewStateMac is true.
    private byte[] GetMacKeyModifier() {
        if (_macKeyBytes == null) {
            // Only generate a MacKeyModifier if we have a page
            if (_page == null) {
                return null;
            }
            // Note: duplicated (somewhat) in GetSpecificPurposes, keep in sync
            // Use the page's directory and class name as part of the key (ASURT 64044)
            uint pageHashCode = _page.GetClientStateIdentifier();
            string viewStateUserKey = _page.ViewStateUserKey;
            if (viewStateUserKey != null) {
                // Modify the key with the ViewStateUserKey, if any (ASURT 126375)
                int count = Encoding.Unicode.GetByteCount(viewStateUserKey);
                _macKeyBytes = new byte[count + 4];
                Encoding.Unicode.GetBytes(viewStateUserKey, 0, viewStateUserKey.Length, _macKeyBytes, 4);
            }
            else {
                _macKeyBytes = new byte[4];
            }
            _macKeyBytes[0] = (byte)pageHashCode;
            _macKeyBytes[1] = (byte)(pageHashCode >> 8);
            _macKeyBytes[2] = (byte)(pageHashCode >> 16);
            _macKeyBytes[3] = (byte)(pageHashCode >> 24);
        }
        return _macKeyBytes;
    }
函数流程：
  1. 函数开头先通过 _page.GetClientStateIdentifier 计算出一个 pageHashCode；
  2. 如果有viewStateUserKey，则modifier = pageHashCode + ViewStateUsereKey;
  3. 如果没有viewStateUserKey，则modifier = pageHashCode
先看pageHashCode 来历：
    // This is a non-cryptographic hash code that can be used to identify which Page generated
    // a __VIEWSTATE field. It shouldn't be considered sensitive information since its inputs
    // are assumed to be known by all parties.
    internal uint GetClientStateIdentifier() {
        // Use non-randomized hash code algorithms instead of String.GetHashCode.
        // Use the page's directory and class name as part of the key (ASURT 64044)
        // We need to make sure that the hash is case insensitive, since the file system
        // is, and strange view state errors could otherwise happen (ASURT 128657)
        int pageHashCode = StringUtil.GetNonRandomizedHashCode(TemplateSourceDirectory, ignoreCase:true);
        pageHashCode += StringUtil.GetNonRandomizedHashCode(GetType().Name, ignoreCase:true);
        return (uint)pageHashCode;
    }
从注释中也可以看出，计算出directory 和 class name 的hash值，相加并返回。这样pageHashCode
就有4个字节了。所以我们可以手动计算一个页面的 pageHashCode，directory 和 class name
应当分别是网站集路径和网站集合名称。除此之外也可以从页面中的隐藏字段"__VIEWSTATEGENERATOR" 中提取。便如下图：
"__VIEWSTATEGENERATOR" 与 pageHashCode 的关系在这里：
再看ViewStateUserKey 的来历：
按照官方说法：ViewStateUserKey 即 ：在与当前页面关联的ViewState 变量中为单个用户分配标识符。
可见，ViewStateUserKey 是一个随机字符串值，且要保证与用户关联。如果网站使用了ViewStateUserKey，我们应当在SessionID
或 cookie 中去猜。在CVE-20202-0688 中，便是取 SessionID 作为ViewStateUserKey。
### 8\. 伪造ViewState
经过上面长篇大论的贴代码、分析。我们已经大致明白了ASP.NET 生成和解析ViewState 的流程。这有助帮助我们理解如何伪造
ViewState。当然了伪造 ViewState 仍然需要 泄露web.config，知晓其 密钥与算法。
  1. 如果签名算法不是AES/3DES，无论是否开启加密功能，我们只需要根据其签名算法和密钥，生成一个签名的ViewState。由于发送该ViewState的时候没有使用"__VIEWSTATEENCRYPTED" 字段，导致ASP.NET 在解析时直接进入GetDecodedData() 进行签名校验，而不再执行解密步骤。
  2. 如果签名算法是 AES/3DES，无论是否开启加密功能，我们只需按照先前所讲，对数据先签名一次，再加密一次，再签名一次。 然后发送给服务端，ASP.NET 进入 GetDecodedData()，然后先进 EncryptOrDecryptData() 进行一次校验和解密，出来后再进行一次校验。
换种表达方式，无论使用什么签名算法，无论是否开启加密功能，我们伪造ViewState时，就按照没有开启加密功能情况下的正常步骤，去伪造ViewState。
### 9.附录：
[1] ysoserial.net
[2] viwgen (python 写的viewstate生成工具，不依赖.NET，方便自动化脚本使用)
[3] 什么是View State 及其在ASP.NET中的工作方式
[4] 微软官方文档：ASP.NET服务器控件概述
[5]《MSDN杂志》文章：ViewState 安全
[6] 安全通告KB2905247
[7] 使用ViewState
[8] Exhange CVE-2020-0688
* * *