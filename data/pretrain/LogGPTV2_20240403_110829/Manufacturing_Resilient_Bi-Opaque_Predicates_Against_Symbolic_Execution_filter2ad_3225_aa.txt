# Title: Manufacturing Resilient Bi-Opaque Predicates Against Symbolic Execution

# Authors:
- Hui Xu
- Yangfan Zhou
- Yu Kang
- Fengzhi Tu
- Michael R. Lyu

# Conference:
2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks

## Abstract
Control-flow obfuscation enhances program complexity through semantic-preserving transformations. Opaque predicates are crucial for such transformations. However, real-world opaque predicates are often simple and lack robust security. Recently, these insecure predicates have been targeted by symbolic execution-based attacks, compromising the security of control-flow obfuscation. This paper introduces symbolic opaque predicates designed to be resilient against symbolic execution-based adversaries. We propose a general framework for creating such predicates, which involves introducing challenging symbolic analysis problems (e.g., symbolic memory) in each predicate. These predicates can mislead symbolic execution engines into making false conclusions. We observe a novel bi-opaque property in symbolic opaque predicates, leading to both false negatives and false positives for attackers. To evaluate our approach, we implemented a prototype obfuscation tool based on Obfuscator-LLVM and conducted experiments with real-world programs. Our results show that symbolic opaque predicates are highly resilient to prevalent symbolic execution engines like BAP, Triton, and Angr. Additionally, some of these predicates are very efficient, making our framework both secure and practical.

## 1. Introduction
Obfuscation is a widely used technique to protect software from reverse engineering. It transforms programs into unintelligible versions while preserving their original functionalities. Obfuscation can be achieved through lexical, control-flow, and data-flow transformations, which are orthogonal and can be applied simultaneously.

This paper focuses on control-flow obfuscation, which increases software complexity by adding bogus control flows to thwart reverse control-flow analysis. Opaque predicates are essential for this transformation. An opaque predicate is a condition whose value is known at obfuscation time but is difficult to deduce through reverse analysis. These predicates can be used to add non-executable code blocks without changing the program's semantics. For example, a constantly false opaque predicate can guard a bogus code block, ensuring it never executes. In practice, opaque constants (e.g., `x^2 â‰  -1`) are commonly used in tools like Obfuscator-LLVM. Although more secure approaches (e.g., unsolved conjectures) exist, they are not widely adopted due to implementation or performance issues.

Recently, the security of opaque predicates has been challenged by advancements in symbolic execution techniques. Ming et al. [5] and Yadegari et al. [6] have demonstrated effective deobfuscation attacks using symbolic execution. Symbolic execution models conditions for executing alternative control flows and attempts to find test cases that satisfy these conditions. If a condition cannot be satisfied, it may indicate a bogus control flow or an opaque predicate. While symbolic execution-based attacks are not new, recent developments have made them more practical, posing a significant threat to obfuscated software.

In this work, we propose a novel framework for generating symbolic opaque predicates resistant to symbolic execution-based adversaries. The key procedure in our framework is to introduce challenging symbolic analysis problems, such as symbolic memory and parallel programming. We also observe a bi-opaque property in these predicates, which can either mislead attackers into falsely recognizing an opaque predicate as a normal one or vice versa.

We have implemented a prototype tool based on Obfuscator-LLVM, which automatically replaces default opaque predicates with symbolic opaque predicates at the intermediate representation (IR) level. The tool uses a repository-based mechanism to manage different templates of symbolic opaque predicates. Currently, we have implemented several templates that challenge symbolic execution with symbolic memory, floating-point numbers, covert propagation, and parallel programming. Our tool is flexible, allowing users to extend the repository with their own templates.

We evaluated the resilience of our approach against three popular symbolic execution engines: BAP, Triton, and Angr. The results show that symbolic opaque predicates are highly resilient to symbolic execution-based attacks. We also evaluated the stealth of these predicates against human adversaries when obfuscating real-world programs, including general Linux programs and encryption programs. Our experimental results indicate that the implemented predicates do not exhibit obvious abnormal instruction patterns. Additionally, we assessed the cost of the implemented predicates. Some symbolic opaque predicates incur almost no overhead compared to the default ones in Obfuscator-LLVM, such as those using symbolic memory and floating-point numbers. Other predicates, like those using covert propagation and parallel programming, may incur noticeable overhead. However, this does not diminish the usability of our framework, as users can filter out inefficient predicates or prioritize them according to their preferences.

Our primary contributions are:
- We propose symbolic opaque predicates and demonstrate a framework for generating them. Our experimental results show that these predicates are secure against symbolic execution-based attacks and are practical.
- We observe a novel bi-opaque property in these predicates, extending the classic understanding of opaque predicates.

## 2. Background
### A. Motivation
Our research is motivated by the vulnerability of real-world opaque predicates. Opaque predicates are essential for control-flow obfuscation, and their security largely determines the overall security of the obfuscation. However, many real-world opaque predicates are not very strong. We illustrate this issue with two examples.

The first example is from a highly cited paper [11], which proposes using NP-hard problems for program obfuscation. The authors introduce pointer analysis problems and control pointer alignments with opaque predicates to compose 3-SAT problems. This approach, while innovative, does not provide sufficient security against advanced symbolic execution-based attacks.

[Continued in the next section]

---

This revised version aims to improve clarity, coherence, and professionalism. Let me know if you need further adjustments!