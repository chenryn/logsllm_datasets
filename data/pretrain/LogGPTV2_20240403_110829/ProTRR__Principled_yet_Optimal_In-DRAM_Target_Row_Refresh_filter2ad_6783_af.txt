We have considered the worst-case scenario in our design of the ASIC, ensuring that all updates (including lookups) are faster than the time interval between two consecutive ACT commands. This allows PROTRR to execute in parallel. Specifically, operations require V cycles during a refresh and B+1 cycles during an ACT. We set 45 ns as the minimum time between two activations, based on previous reports [19].

### Static Power
Previous research has indicated that the energy consumption for the mitigation logic is negligible [19], [20]. However, for completeness, we evaluated it. The overhead for 1024 counters is at most 17.44 mW for 16 banks, resulting in a total of 139.52 mW for 8 chips. This aligns with previously reported values [20]. For a baseline static consumption of 3 W/8 GiB [62], this leads to a 4.65% static power overhead. Given current technology and consumer DDR4 chips, 512 counters are sufficient to ensure protection in the worst cases, leading to a 2.35% static power overhead.

### Area
The area required by the chips depends on process technology, fabrication, and array size. For our analysis, we consider a common density for DDR4 devices, 0.247 GB/mm² [63]. For a chip using 16 banks and 1024 counters per bank, this results in a maximum area overhead of 3.7%. Unfortunately, currently deployed TRR mechanisms are kept secret, and there is no open DRAM implementation that can integrate PROTRR. To further confirm the feasibility of PROTRR, we contacted a DRAM manufacturer. They confirmed that up to 2K counters have been deployed in the past, and given PROTRR’s specifications, it is reasonable to deploy it.

### D. Correctness
We tested PROTRR against FEINTING to check its implementation by running PROTRR in DRAMsim3 with memory traces. In all cases with correct configuration, PROTRR could withstand FEINTING. Conversely, in cases where PROTRR was improperly configured, FEINTING could successfully trigger bit flips. We also generated traces from two state-of-the-art Rowhammer fuzzers [1], [3] and executed them against PROTRR for three days without observing any bit flip.

| Size (GiB) | Freq. (MHz) | Geom. #R., #B. | Best Params. (tREFIs, TRR distance, victim hammer repetitions) | Bit Flips Observed |
|------------|-------------|-----------------|---------------------------------------------------------------|--------------------|
| 8          | 2666        | 1, 16           | 2048, 9, 1                                                   | ✔                  |
| 32         | 2666        | 2, 16           | 2048, 9, 3                                                   | ✔                  |
| 8          | 2400        | 1, 16           | 8192, 9, 4                                                   | ✔                  |

### E. FEINTING on Real Devices
FEINTING assumes a mitigation that counts every activation with an adequate number of counters. Existing TRR schemes may employ multiple concurrent mechanisms, some different from PROTRR [2]. We were interested in evaluating if FEINTING can generate bit flips on devices with a deployed counter-based mitigation. We acquired three DDR4 devices from a manufacturer known to use a counter-based mitigation [2] (see Table II).

We conducted experiments on an Intel i7-8700K running Linux with kernel 4.15.0. We adapted FEINTING based on insights from [2], assuming counters could track at most 16 rows (i.e., 18 decoys needed as part of FEINTING-Ghost). We systematically tested different attack durations (2048× up to 32768× tREFI), TRR distances (1 up to 9), and victim hammer repetitions (1 to 4), while assuming 5 hammering repetitions for decoys.

In Table II, we show the results of running FEINTING-Ghost on our acquired DDR4 devices. An attack trace with a duration of 8192× tREFI is shown in Figure 16. Our results indicate that with minor adaptations, we could successfully trigger bit flips on all three devices using FEINTING. We found that an attack duration shorter than a tREFW and hammering the victim fewer times (e.g., one time for D0) can be beneficial because sampling may occur only at specific times, as reported in previous work [1], [3]. We also tested Blacksmith [3] on the same devices, which triggered bit flips on all of them, while TRRespass [1] failed to obtain bit flips on DIMM D0.

### VIII. Discussion
We discuss how PROTRR can (i) handle postponing and pulling-in of refresh commands, (ii) obtain better bounds by using subarray parallelism, and (iii) generalize to other, yet unknown, Rowhammer effects.

**Postponing and Pulling-In of REFs:**
The DDRx standard allows REF postponing and pulling-in, giving attackers flexibility to maximize TRR-free REFs, reducing the number of decoys needed. For DDR4, the victim can be hammered more often, but for DDR5, nothing changes due to RFM still being sent. A detailed analysis is provided in Appendix A.

**Subarray Parallelism:**
Subarrays enable a bank to refresh multiple rows at each REF. PROTRR can leverage this to perform more TRRs when necessary. Each bank can perform multiple TRRs simultaneously, increasing V. However, additional TRRs cannot target any row as each subarray can only refresh V rows at any given TRR event. An adapted FEINTING can exploit this limitation by reducing the number of required decoys to create the optimal attack.

**Generalization:**
FEINTING provides the basis to configure PROTRR to protect against Rowhammer. The only requirement for FEINTING is knowing the interaction between an aggressor and its victims. For new Rowhammer effects, FEINTING should be adjusted to consider new interactions. We discuss two cases: the half-double pattern and the influence of active rows on adjacent rows.

### IX. Security Analysis of Existing Schemes
We first discuss a general limitation when mitigating Rowhammer outside of DRAM. We then present our security analysis of state-of-the-art hardware mitigations, which resulted in the discovery of novel vulnerabilities in four earlier proposed schemes [16], [19], [45], [65].

**Internal Row Remapping:**
Bits can flip in rows not adjacent to an aggressor due to internal row remapping. This is a major limitation of existing Rowhammer mitigations outside of DRAM. PROTRR, being in-DRAM, uses the correct row mapping known only by the DRAM chip.

**CBT [45] and CAT-TWO [16]:**
Both mitigations reset their table after a tREFW period. If an aggressor row reaches Rthresh activations within this period, its neighbors are refreshed. An attacker can activate an aggressor Rthresh−1 times immediately before and after the tREFW, violating the guarantees. CAT-TWO also has an issue with distributed trees of counters, which are blind to victim rows sharing aggressors across different trees.

**Graphene [19]:**
Refreshing a row with TRR has a similar effect to an ACT, used while hammering rows. An attacker could exploit TRRs to hammer rows. While this could be fixed, it is not accounted for in Graphene's current design.

**Panopticon [65]:**
Panopticon is a new in-DRAM mitigation that relies on per-row counters stored in DRAM and uses the ALERT mechanism to request more time to TRR victim rows. Storing counters in DRAM is cheap but insecure, as they can be affected by Rowhammer. Overloading the ALERT mechanism has undesirable implications, such as performance degradation and confusion between real and Rowhammer-induced ALERTs.

### X. Related Work
We summarize existing work on Rowhammer mitigations in Table III, comparing scalability, security, support, and integration. For scalability, we consider if mitigations optimally use counters and refreshes and if these resources can be flexibly allocated.