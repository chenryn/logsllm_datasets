## PostgresML=模型集市+向量数据库+自定义模型 : 用postgresml体验AI应用(图像搜索、推荐系统和自然语言处理)与向量检索   
### 作者    
digoal    
### 日期    
2023-09-11    
### 标签    
PostgreSQL , PolarDB , 机器学习 , ai , 大模型 , 模型集市 , 向量数据库 , 向量 , 图像搜索 , 推荐系统 , 自然语言处理 , 情感分析 , 模型训练 , 谎言分析 , 消除重复问题 , 语义逻辑分析 , 词性分类 , 摘要提炼 , 翻译 , 阅读理解 , 讲故事 , 上下文回答 , 填空     
----    
## 背景   
PostgresML=模型集市+向量数据库+自定义模型 : 用postgresml体验AI应用(图像搜索、推荐系统和自然语言处理)与向量检索   
## 向量检索: 解决非结构化数据非确定性检索需求  
1、在现实世界充斥着大量非确定性的搜索, 例如以图搜素、以特征搜特征、自然语言处理等.   
这些问题无法使用传统数据库来进行回答, 因为传统数据库擅长的是确定性的回答, 例如等于、不等于、大于、小于、模糊匹配等等.    
处理不确定问题, 需要用到向量检索. 向量检索非常适合处理不确定性问题, 按相似度(向量距离)排序返回结果, 或者返回相似度高于阈值的结果.    
向量检索的典型应用:    
- 图像搜索、推荐系统和自然语言处理等任务.    
2、什么是向量?  
- 浮点数组表示的非结构化数据的特征.    
3、如何将文本、图像、视频、音频转换变成向量?  
- 可以使用训练好的模型, 将非结构数据转换成向量.  
4、如何存储向量?  
- 浮点数组  
5、如何计算向量距离(向量相似度)?   
某个方向上的距离, 或者各个方向的综合距离.  
- L2 distance, inner product, and cosine distance  
6、如何快速根据向量距离(向量相似度)排序返回结果?  
- 索引.  
例如postgresql|polardb支持的pgvector插件, 支持ivfflat、hnsw索引.    
使用如下镜像可以体验pgvector插件.    
```    
# 拉取镜像, 第一次拉取一次即可.    
docker pull registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts    
# 启动容器    
docker run --platform linux/amd64 -d -it --cap-add=SYS_PTRACE --cap-add SYS_ADMIN --privileged=true --name pg --shm-size=1g registry.cn-hangzhou.aliyuncs.com/digoal/opensource_database:pg14_with_exts    
# 进入容器    
docker exec -ti pg bash    
# 连接数据库    
psql    
```    
## 用postgresml体验学习AI应用与向量检索  
运行postgresml  
```  
docker pull ghcr.io/postgresml/postgresml:2.7.9  
docker run -it -v postgresml_data:/var/lib/postgresql -p 5433:5432 -p 8000:8000 ghcr.io/postgresml/postgresml:2.7.4 sudo -u postgresml psql -d postgresml  
```  
访问dashboard: http://localhost:8000/    
### 介绍  
PostgresML 是一个人工智能应用数据库。从 Huggingface 下载开源模型，或训练自己的模型，以创建 LLM 嵌入并为其建立索引、生成文本或仅使用 SQL 进行在线预测。  
PostgresML 是 PostgreSQL 的机器学习扩展，使您能够使用 SQL 查询对文本和表格数据执行训练和推理。借助 PostgresML，您可以将机器学习模型无缝集成到 PostgreSQL 数据库中，并利用尖端算法的强大功能来高效处理数据。  
PostgresML 集成了 Hugging Face Transformers，将最先进的 NLP 模型引入数据层。有数以万计的预训练模型可以将数据库中的原始文本转换为有用的结果。许多最先进的深度学习架构已经发布并可从 Hugging Face模型中心获取。  
您可以使用以下 SQL 查询调用不同的 NLP 任务并自定义使用它们。  
```  
SELECT pgml.transform(  
    task   => TEXT OR JSONB,     -- Pipeline initializer arguments  
    inputs => TEXT[] OR BYTEA[], -- inputs for inference  
    args   => JSONB              -- (optional) arguments to the pipeline.  
);  
```  
### 文本数据处理  
- 可以执行自然语言处理 (NLP) 任务，例如情感分析、问答、翻译、摘要和文本生成  
- 从 HuggingFace 模型中心( https://huggingface.co/models )访问 1000 个最先进的语言模型，例如 GPT-2、GPT-J、GPT-Neo  
- 根据您自己的文本数据针对不同的任务 微调 大型语言模型 (LLM)  
- 通过从数据库中存储的文本生成特征向量，将现有的 PostgreSQL 数据库用作向量数据库。  
例子  
1、翻译  
SQL查询  
```  
SELECT pgml.transform(  
    'translation_en_to_fr',  
    inputs => ARRAY[  
        'Welcome to the future!',  
        'Where have you been all this time?'  
    ]  
) AS french;  
```  
结果  
```  
                         french                                   
------------------------------------------------------------  
[  
    {"translation_text": "Bienvenue à l'avenir!"},  
    {"translation_text": "Où êtes-vous allé tout ce temps?"}  
]  
```  
2、情感分析   
SQL查询  
```  
SELECT pgml.transform(  
    task   => 'text-classification',  
    inputs => ARRAY[  
        'I love how amazingly simple ML has become!',   
        'I hate doing mundane and thankless tasks. ☹️'  
    ]  
) AS positivity;  
```  
结果  
```  
                    positivity  
------------------------------------------------------  
[  
    {"label": "POSITIVE", "score": 0.9995759129524232},   
    {"label": "NEGATIVE", "score": 0.9903519749641418}  
]  
```  
### 表格数据处理  
- 47+ 分类和回归算法  
- 推理速度比基于 HTTP 的模型服务快 8 - 40 倍  
- 每秒数百万笔交易  
- 横向可扩展性  
例子  
1、训练分类模型  
训练  
```  
SELECT * FROM pgml.train(  
    'Handwritten Digit Image Classifier',  
    algorithm => 'xgboost',  
    'classification',  
    'pgml.digits',  
    'target'  
);  
```  
推理  
```  
SELECT pgml.predict(  
    'My Classification Project',   
    ARRAY[0.1, 2.0, 5.0]  
) AS prediction;  
```  
## postgresml 例子: 自然语言处理任务  
PostgresML 集成了 Hugging Face Transformers，将最先进的 NLP 模型引入数据层。有数以万计的预训练模型可以将数据库中的原始文本转换为有用的结果。许多最先进的深度学习架构已经发布并可从 Hugging Face模型中心获取。  
使用以下 SQL 查询调用不同的 NLP 任务并自定义使用它们。  
```  
SELECT pgml.transform(  
    task   => TEXT OR JSONB,     -- Pipeline initializer arguments  
    inputs => TEXT[] OR BYTEA[], -- inputs for inference  
    args   => JSONB              -- (optional) arguments to the pipeline.  
)  
```  
### 文本分类  
文本分类涉及为给定文本分配标签或类别。常见用例包括情感分析、自然语言推理和语法正确性评估。  
#### 情绪分析  
情感分析是一种自然语言处理技术，涉及分析一段文本以确定其中表达的情感或情感。它可以用来将文本分类为正面、负面或中性，并且在营销、客户服务和政治分析等领域有着广泛的应用。  
基本用法  
```  
SELECT pgml.transform(  
    task   => 'text-classification',  
    inputs => ARRAY[  
        'I love how amazingly simple ML has become!',   
        'I hate doing mundane and thankless tasks. ☹️'  
    ]  
) AS positivity;  
```  
结果  
```  
[  
    {"label": "POSITIVE", "score": 0.9995759129524232},   
    {"label": "NEGATIVE", "score": 0.9903519749641418}  
]  
```  
用于文本分类的默认模型是 DistilBERT-base-uncased 的微调版本，已针对斯坦福情感树库数据集 (sst2) 进行了专门优化。  
#### 使用特定型号  
要使用 Hugging Face 上提供的 19,000 多个模型之一，请将所需模型和text-classification任务的名称作为 JSONB 对象包含在 SQL 查询中。例如，如果您想要使用在大约 40,000 条英语推文上训练的 RoBERTa模型，并且其类别具有 POS（正面）、NEG（负面）和 NEU（中性）标签，请在创建您的 JSONB 对象时将此信息包含在 JSONB 对象中。询问。  
```  
SELECT pgml.transform(  
    inputs => ARRAY[  
        'I love how amazingly simple ML has become!',   
        'I hate doing mundane and thankless tasks. ☹️'  
    ],  
    task  => '{"task": "text-classification",   
              "model": "finiteautomata/bertweet-base-sentiment-analysis"  
             }'::JSONB  
) AS positivity;  
```  
结果  
```  
[  
    {"label": "POS", "score": 0.992932200431826},   
    {"label": "NEG", "score": 0.975599765777588}  
]  
```  
#### 使用行业特定模型  
通过选择专为特定行业设计的模型，您可以实现更准确且相关的文本分类。FinBERT就是此类模型的一个例子，它是一种预先训练的 NLP 模型，已针对分析金融文本中的情绪进行了优化。FinBERT 是通过在大型金融语料库上训练 BERT 语言模型并对其进行微调以专门对金融情绪进行分类而创建的。使用 FinBERT 时，模型将为三种不同的标签提供 softmax 输出：正、负或中性。  
```  
SELECT pgml.transform(  
    inputs => ARRAY[  
        'Stocks rallied and the British pound gained.',   
        'Stocks making the biggest moves midday: Nvidia, Palantir and more'  
    ],  
    task => '{"task": "text-classification",   
              "model": "ProsusAI/finbert"  
             }'::JSONB  
) AS market_sentiment;  
```  
结果  
```  
[  
    {"label": "positive", "score": 0.8983612656593323},   
    {"label": "neutral", "score": 0.8062630891799927}  
]  
```  
#### 自然语言推理（NLI）  
NLI（自然语言推理）是一种确定两个文本之间关系的模型。该模型将前提和假设作为输入并返回一个类，该类可以是以下三种类型之一：  
符合(Entailment)：这意味着基于前提的假设是正确的。  
矛盾(Contradiction)：这意味着基于前提的假设是错误的。  
中性(Neutral)：这意味着假设和前提之间没有关系。  
GLUE 数据集是评估 NLI 模型的基准数据集。NLI 模型有不同的变体，例如 Multi-Genre NLI、Question NLI 和 Winograd NLI。  
如果您想使用 NLI 模型，可以在  Hugging Face 模型中心找到它们。寻找带有“mnli”的型号。  
```  
SELECT pgml.transform(  
    inputs => ARRAY[  
        'A soccer game with multiple males playing. Some men are playing a sport.'  
    ],  
    task => '{"task": "text-classification",   
              "model": "roberta-large-mnli"  
             }'::JSONB  
) AS nli;  
```  
结果  
```  
[  
    {"label": "ENTAILMENT", "score": 0.98837411403656}  
]  
```  