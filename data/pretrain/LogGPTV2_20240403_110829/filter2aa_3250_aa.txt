### Virtunoid: Breaking out of KVM
**Nelson Elhage**  
July 25, 2011

---

### Outline
1. **KVM: Architecture Overview**
   - Components
   - Control Flow
   - Attack Surface
2. **CVE-2011-1751: The Bug**
3. **virtunoid.c: The Exploit**
   - %rip Control
   - Getting to Shellcode
   - Bypassing ASLR
4. **Conclusions and Further Research**
5. **Demo**

---

### KVM: Architecture Overview

#### KVM: The Components
- **kvm.ko**: The core KVM kernel module.
  - Provides ioctls for communicating with the kernel module.
  - Primarily responsible for emulating the virtual CPU and MMU.
  - Emulates a few devices in-kernel for efficiency.
  - Contains an emulator for a subset of x86 used in handling certain traps.
- **kvm-intel.ko / kvm-amd.ko**: 
  - Provides support for Intel's VMX and AMD's SVM virtualization extensions.
  - Relatively small compared to the rest of KVM (one .c file each).
- **qemu-kvm**:
  - Provides the most direct user interface to KVM.
  - Based on the classic qemu x86 emulator.
  - Implements the bulk of the virtual devices a VM uses.
  - An order of magnitude more code than the kernel module.

#### Control Flow
- [Detailed control flow diagram or description]

#### Attack Surface
- **kvm.ko**:
  - A tempting target – successful exploitation gets ring0 on the host without further escalation.
  - Much less code than qemu-kvm, and much of that is dedicated to interfacing with qemu-kvm, not the guest directly.
  - The x86 emulator is an interesting target.
  - Several bugs have been discovered allowing privilege escalation within the guest.
  - Not the target of this talk, but potential for future work.
- **qemu-kvm**:
  - A veritable goldmine of targets.
  - Hundreds of thousands of lines of device emulation code.
  - Emulated devices communicate directly with the guest via MMIO or IO ports, providing a large attack surface.
  - Much of the code comes straight from qemu and is ancient.
  - Often sandboxed using SELinux or similar, requiring a second privilege escalation within the host.
  - Many bugs have been found here.

---

### CVE-2011-1751: The Bug

- **RHSA-2011:0534-1**:
  - "It was found that the PIIX4 Power Management emulation layer in qemu-kvm did not properly check for hot plug eligibility during device removals. A privileged guest user could use this flaw to crash the guest or, possibly, execute arbitrary code on the host. (CVE-2011-1751)"

- **Patch**:
  ```diff
  diff --git a/hw/acpi_piix4.c b/hw/acpi_piix4.c
  index 96f5222..6c908ff 100644
  --- a/hw/acpi_piix4.c
  +++ b/hw/acpi_piix4.c
  @@ -471,11 +471,13 @@
     static void pcie_jwrite(void *opaque, uint32_t addr, uint32_t val) {
         BusState *bus = opaque;
         DeviceState *qdev, *next;
         PCIDevice *dev;
  +        PCIDeviceInfo *info;
         int slot = ffs(val) - 1;
         QLIST_FOREACH_SAFE(qdev, &bus->children, sibling, next) {
             dev = DO_UPCAST(PCIDevice, qdev, qdev);
  -        if (PCI_SLOT(dev->devfn) == slot) {
  +        info = container_of(qdev->info, PCIDeviceInfo, qdev);
  +        if (PCI_SLOT(dev->devfn) == slot && !info->no_hotplug) {
                 qdev_free(qdev);
             }
         }
  ```

- **PIIX4**:
  - A Southbridge chip used in many circa-2000 Intel chipsets.
  - The default southbridge emulated by qemu-kvm.
  - Includes ACPI support, a PCI-ISA bridge, an embedded MC146818 RTC, and more.

- **Device Hotplug**:
  - The PIIX4 supports PCI hotplug, implemented by writing values to IO port 0xae08.
  - qemu-kvm emulates this by calling `qdev_free(qdev);`, which should ensure the device is properly disconnected.
  - Certain devices do not properly support being hotplugged, but KVM previously did not check this before freeing them.

- **The PCI-ISA Bridge**:
  - It should not be possible to unplug the ISA bridge.
  - The emulated MC146818 RTC hangs off the ISA bridge.
  - KVM’s emulated RTC is not designed to be unplugged; it leaves behind dangling `QEMUTimer` objects when unplugged.

- **The Real-Time Clock (RTC)**:
  - Structure definition:
    ```c
    typedef struct RTCState {
        uint8_t cmos_data[128];
        // ...
        int64_t next_second_time;
        // ...
        QEMUTimer *second_timer;
        QEMUTimer *second_timer2;
    } RTCState;
    ```
  - Initialization function:
    ```c
    static int rtc_init_fn(ISADevice *dev) {
        RTCState *s = DO_UPCAST(RTCState, dev, dev);
        // ...
        s->second_timer = qemu_new_timer_ns(rtc_clock, rtc_update_second, s);
        s->second_timer2 = qemu_new_timer_ns(rtc_clock, rtc_update_second2, s);
        s->next_second_time = qemu_get_clock_ns(rtc_clock) + (get_ticks_per_sec() * 99) / 100;
        qemu_mod_timer(s->second_timer2, s->next_second_time);
        // ...
    }
    ```

- **QEMUTimer**:
  - Structure definition:
    ```c
    struct QEMUTimer {
        QEMUClock *clock;
        int64_t expire_time; // in nanoseconds
        QEMUTimerCB *cb;
        void *opaque;
        struct QEMUTimer *next;
    };
    ```

- **Use-after-free**:
  - Unplugging the virtual RTC frees the `RTCState`.
  - It does not free or unregister either of the timers, leaving dangling pointers from the `QEMUTimers`.

---

### virtunoid.c: The Exploit

- **%rip Control**:
  - **High-level TODO**:
    - Inject a controlled `QEMUTimer` into qemu-kvm at a known address.
    - Eject the emulated ISA bridge.
    - Force an allocation into the freed `RTCState`, with `second_timer` pointing at our dummy timer.
  - **Injecting Data**:
    - The guest’s RAM is backed by a simple `mmap()`ed region inside the host.
    - [Further details on how to inject and control data]

- **Getting to Shellcode**:
  - [Details on how to achieve shellcode execution]

- **Bypassing ASLR**:
  - [Techniques and methods to bypass Address Space Layout Randomization (ASLR)]

---

### Conclusions and Further Research
- [Summary of findings]
- [Future research directions]

---

### Demo
- [Live demonstration of the exploit]

---

**Nelson Elhage**  
Virtunoid: Breaking out of KVM  
July 25, 2011