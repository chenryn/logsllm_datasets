# 六、高级部署主题
我们花了大量时间讨论容器通信和安全性，但是在本章中，我们将通过介绍以下内容来进一步了解部署:
*   高级调试技术。
*   实现队列消息传递。
*   进行安全检查。
*   容器深度安全。
我们还将研究一些其他工具和技术，帮助您更好地管理部署。
# 高级调试
在野外调试容器的能力是一个非常重要的主题，我们之前已经介绍了一些在这里可能有用的更基本的技术。但是有些情况下`docker ps`和`docker exec`是不够的，所以在这一节中，我们将研究一些你可以添加到工具箱中的工具，它们可以帮助解决这些棘手的问题。
# 附加到容器的进程空间
有时候，容器运行的是极简主义的发行版，比如 Alpine Linux([https://www.alpinelinux.org/](https://www.alpinelinux.org/))，而有问题的容器有一个你想调试的进程，但也缺少调试所需的最基本的工具。默认情况下，Docker 将所有容器隔离在各自的进程名称空间中，因此我们当前的调试工作流(我们之前通过直接附加到该容器并试图找出非常有限的工具的错误)在这里不会有太大帮助。
幸运的是，Docker 完全能够将两个容器的进程名称空间与`docker run --pid "container:"`标志连接起来，这样我们就可以将调试工具容器直接附加到受影响的容器上:
```
$ # Start an NGINX container
$ docker run -d --rm nginx
650a1baedb0c274cf91c086a9e697b630b2b60d3c3f94231c43984bed1073349
$ # What can we see from a new/separate container?
$ docker run --rm \
 ubuntu \
 ps -ef 
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 16:37 ?        00:00:00 ps -ef
$ # Now let us try the same thing but attach to the NGINX's PID space
$ docker run --rm \
 --pid "container:650a1bae" \
 ubuntu \
 ps -ef 
UID      PID  PPID  C STIME TTY    TIME CMD
root       1     0  0 16:37 ?      00:00:00 nginx: master process nginx -g daemon off;
systemd+   7     1  0 16:37 ?      00:00:00 nginx: worker process
root       8     0  0 16:37 ?      00:00:00 ps -ef
```
如您所见，我们只需将一个调试容器附加到同一个 PID 命名空间中，并以这种方式调试任何行为异常的进程，并且可以从调试工具的安装中保持原始容器的原始状态！使用这种技术，原始容器可以保持较小，因为工具可以单独运输，并且容器在整个调试过程中保持运行，因此您的任务不会被重新安排。也就是说，每当您使用此方法调试不同的容器时，请注意不要终止其中的进程或线程，因为它们很可能会级联并终止整个容器，从而停止您的调查。
有趣的是，如果您有一个不在您的发行版上运行的工具，并且有一个 Docker 容器(或者，如果您想使用一个容器来管理主机的进程)，这个`pid`标志也可以与`--pid host`一起调用来共享主机的进程名称空间:
```
$ # Sanity check
$ docker run --rm \
 ubuntu \
 ps -ef 
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 16:44 ?        00:00:00 ps -ef
$ # Now we try to attach to host's process namespace
$ docker run --rm \
 --pid host \
 ubuntu \
 ps -ef 
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 15:44 ?        00:00:02 /sbin/init splash
root         2     0  0 15:44 ?        00:00:00 [kthreadd]
root         4     2  0 15:44 ?        00:00:00 [kworker/0:0H]
root      5504  5485  3 16:44 ?        00:00:00 ps -ef
```
这个标志的功能可以为运行和调试应用提供多大的能力应该是显而易见的，所以不要犹豫使用它。
Warning! Sharing the host's process namespace with the container is a big security hole as a malicious container can easily commandeer or DoS the host by manipulating processes, especially if the container's user is running as a root. Due to this, exercise extreme caution when utilizing `--pid host` and ensure that you use this flag only on containers you trust completely.
# 调试 Docker 守护程序
如果这些技术到目前为止都没有帮助到你，你可以尝试运行 Docker 容器，并检查守护程序 API 正在使用`docker system events`做什么，它跟踪几乎所有在其 API 端点上触发的动作。您可以将它用于审核和调试，但是一般来说，后者是它的主要目的，正如您在下面的示例中看到的那样。
在第一个终端上，运行以下命令并保持其运行，以便我们可以看到可以收集的信息:
```
$ docker system events
```
在另一个终端上，我们将运行一个新的容器:
```
$ docker run -it \
 --rm \
 ubuntu /bin/bash 
$ root@563ad88c26c3:/# exit
exit
```
完成容器的启动和停止后，第一个终端中的`events`命令应该会输出类似如下的内容:
```
$ docker system events
2017-09-27T10:54:58.943347229-07:00 container create 563ad88c26c3ae7c9f34dfe05c77376397b0f79ece3e233c0ce5e7ae1f01004f (image=ubuntu, name=thirsty_mccarthy)
2017-09-27T10:54:58.943965010-07:00 container attach 563ad88c26c3ae7c9f34dfe05c77376397b0f79ece3e233c0ce5e7ae1f01004f (image=ubuntu, name=thirsty_mccarthy)
2017-09-27T10:54:58.998179393-07:00 network connect 1e1fd43bd0845a13695ea02d77af2493a449dd9ee50f2f1372f589dc4968410e (container=563ad88c26c3ae7c9f34dfe05c77376397b0f79ece3e233c0ce5e7ae1f01004f, name=bridge, type=bridge)
2017-09-27T10:54:59.236311822-07:00 container start 563ad88c26c3ae7c9f34dfe05c77376397b0f79ece3e233c0ce5e7ae1f01004f (image=ubuntu, name=thirsty_mccarthy)
2017-09-27T10:54:59.237416694-07:00 container resize 563ad88c26c3ae7c9f34dfe05c77376397b0f79ece3e233c0ce5e7ae1f01004f (height=57, image=ubuntu, name=thirsty_mccarthy, width=176)
2017-09-27T10:55:05.992143308-07:00 container die 563ad88c26c3ae7c9f34dfe05c77376397b0f79ece3e233c0ce5e7ae1f01004f (exitCode=0, image=ubuntu, name=thirsty_mccarthy)
2017-09-27T10:55:06.172682910-07:00 network disconnect 1e1fd43bd0845a13695ea02d77af2493a449dd9ee50f2f1372f589dc4968410e (container=563ad88c26c3ae7c9f34dfe05c77376397b0f79ece3e233c0ce5e7ae1f01004f, name=bridge, type=bridge)
2017-09-27T10:55:06.295496139-07:00 container destroy 563ad88c26c3ae7c9f34dfe05c77376397b0f79ece3e233c0ce5e7ae1f01004f (image=ubuntu, name=thirsty_mccarthy)
```
它的使用是相当合适的，但是这种类型的跟踪，以及我们到目前为止讨论过的其他技巧和诀窍，应该为您提供工具来解决基于 Docker 的集群上的几乎任何类型的问题。抛开已经提到的一切，以我个人的经验，也有过几次需要`gdb`的时候，也有过几次问题变成上游 bug 的时候。正因为如此，准备好在扩大规模时弄脏你的手，因为新问题的可能性也会增加。
# 高级网络
网络是 Docker 集群最重要的事情之一，它需要在集群上保持运行和平稳运行，以便整个系统以任何容量运行。考虑到这一点，我们理所当然应该讨论一些我们还没有讨论过的主题，这些主题在大部分实际部署中都很重要，无论大小。很有可能您会在自己的部署中遇到至少一个这样的用例，所以我建议您通读一遍，但是您的里程可能会有所不同。
# 静态主机配置
在某些特定的配置中，您的网络上可能有一台主机需要映射或重新映射到试图到达该主机的容器的特定 IP 地址。这允许命名服务器的灵活配置，并且对于网络上没有好的网络 DNS 服务器的静态主机来说，可以是真正的救命稻草。
要将这样的主机映射添加到容器中，您可以使用`docker run --add-host`运行容器，并使用此标志，在`/etc/hosts`中添加一个与您的输入匹配的条目，以便您可以正确地将您的请求路由到它:
```
$ # Show what the default /etc/hosts has
$ docker run --rm \
 -it \
 ubuntu \
 /bin/cat /etc/hosts 
127.0.0.1    localhost
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet
ff00::0    ip6-mcastprefix
ff02::1    ip6-allnodes
ff02::2    ip6-allrouters
172.17.0.2    3c46adb8a875
$ # We now will add our fake server1 host mapping
$ docker run --rm \
 -it \
 --add-host "server1:123.45.67.89" \
 ubuntu \
 /bin/cat /etc/hosts 
127.0.0.1    localhost
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet
ff00::0    ip6-mcastprefix
ff02::1    ip6-allnodes
ff02::2    ip6-allrouters
123.45.67.89    server1
172.17.0.2    dd4d7c6ef7b8
$ # What does the container see when we have an additional host?
$ docker run --rm \
 -it \
 --add-host "server1:123.45.67.89" \
 ubuntu /bin/bash 
root@0ade7f3e8a80:/# getent hosts server1
123.45.67.89    server1
root@0ade7f3e8a80:/# exit
exit
```
如上所述，当您有一个非容器化的服务，而您不想将 IP 硬编码到容器中，并且也无法从互联网 DNS 服务器解析时，这可能非常有用。
# DNS 配置
说到域名系统，我们可能应该谈谈 Docker 域名系统的处理。默认情况下，Docker Engine 使用来自主机的 DNS 设置，但是在一些高级部署设置中，其中正在部署群集的网络位于已经构建的网络中，有时可能需要为引擎或容器配置自定义 DNS 设置或 DNS 搜索前缀(也称为域名)。在这种情况下，您可以通过将`dns`和/或`dns-search`参数添加到`/etc/docker/daemon.json`并重新启动守护程序来轻松覆盖 Docker 引擎的默认 DNS 设置。这两个参数都允许多个值，并且非常简单明了:
```
{
...
        "dns": ["1.2.3.4", "5.6.7.8", ...],
        "dns-search": ["domain.com", ...],
...
}
```
In all networking setups that I have ever worked on, I have not seen a situation where overriding DNS server IPs or DNS search prefixes is a better option to deploying your own DHCP server within the network and setting the appropriate options for the DNS server(s) (`option 6`) and domain name (`option 15`), which the machine will pick up when initializing the network interface. If you would like to find out more about these DHCP flags, I would highly recommend that you visit [https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol#DHCP_options](https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol#DHCP_options) and read up on them before using the parameters we mentioned previously. Caution! In some cases where the engine host's DNS servers are pointed to `localhost` ranges, as they are in most `systemd-resolve` and `dnsmasq` setups, the container cannot access the host's `localhost` address and is thus replaced with Google's DNS servers (`8.8.8.8` and `8.8.4.4`) by default for all containers running on that instance. If you would like to retain the host's DNS setting within the container, you must ensure that the DNS resolver in the configuration is not one on the `localhost` IP range and is accessible by container networks. You can find more information about this at [https://docs.docker.com/engine/userguide/networking/default_network/configure-dns/](https://docs.docker.com/engine/userguide/networking/default_network/configure-dns/).
如果您对引擎范围内的配置不感兴趣，并且只试图覆盖单个容器的 DNS 设置，您可以通过在`docker run`命令中添加`--dns`和`--dns-search`选项来执行相同的操作，这会替换相关容器中的默认`/etc/resolv.conf`设置:
```
$ # Since my default DNS is pointed to localhost, the default should be Google's DNS servers
$ docker run --rm \
 -it \
 ubuntu \
 /bin/cat /etc/resolv.conf 
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# 127.0.0.53 is the systemd-resolved stub resolver.
# run "systemd-resolve --status" to see details about the actual nameservers.
nameserver 8.8.8.8
nameserver 8.8.4.4