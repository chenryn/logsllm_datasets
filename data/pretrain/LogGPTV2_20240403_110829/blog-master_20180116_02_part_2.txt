 export_sqlprotect         
-------------------         
(1 row)         
```         
导入，除了导入数据以外，需要额外的操作         
首先要删除已有数据         
```         
/opt/edb/as10/bin/psql -d newdb -U enterprisedb -f /tmp/edb.dmp         
DELETE FROM sqlprotect.edb_sql_protect_rel;         
DELETE FROM sqlprotect.edb_sql_protect;         
SELECT * FROM sqlprotect.edb_sql_protect_stats;         
....         
SELECT sqlprotect.drop_stats('appuser');         
```         
然后使用API导入：         
```         
newdb=# SELECT sqlprotect.import_sqlprotect('/tmp/sqlprotect.dmp');         
 import_sqlprotect         
-------------------         
(1 row)         
```         
10、统计信息表解读     
计数表：edb_sql_protect_stats    
- username. Name of the protected role.   
- superusers. Number of SQL statements issued when the protected role is a superuser. In effect, any SQL statement issued by a protected superuser increases this statistic. See Section 4.1.1.2.1 for information on protected superusers.   
- relations. Number of SQL statements issued referencing relations that were not learned by a protected role. (That is, relations that are not in a role’s protected relations list.)   
- commands. Number of DDL statements issued by a protected role.   
- tautology. Number of SQL statements issued by a protected role that contained a tautological condition.   
- dml. Number of UPDATE and DELETE statements issued by a protected role that did not contain a WHERE clause.   
风险SQL表：edb_sql_protect_queries    
- username. Database user name of the attacker used to log into the database server.   
- ip_address. IP address of the machine from which the attack was initiated.   
- port. Port number from which the attack originated.   
- machine_name. Name of the machine, if known, from which the attack originated.   
- date_time. Date and time at which the query was received by the database server. The time is stored to the precision of a minute.   
- query. The query string sent by the attacker.   
## 用法         
1、添加被监控的用户         
```         
edb=# SELECT protect_role('newuser');         
 protect_role         
--------------         
(1 row)         
```         
2、删除被监控的用户（即不再监控这个用户）         
```         
unprotect_role('rolename')         
unprotect_role(roleoid)         
```         
3、设置角色的监控项（白名单保护、DDL保护、SELECT保护、DML保护）         
```         
UPDATE edb_sql_protect SET allow_utility_cmds = TRUE WHERE dbid = 13917 AND roleid = 16671;         
edb=# \x         
Expanded display is on.         
edb=# SELECT * FROM list_protected_users;  -- 或 基表 edb_sql_protect         
-[ RECORD 1 ]------+--------         
dbname             | edb         
username           | appuser           
protect_relations  | t   -- 是否使用白名单保护对象         
allow_utility_cmds | f   -- 否允许执行DDL         
allow_tautology    | f   -- 是否允许执行包含TRUE条件的SELECT         
allow_empty_dml    | f   -- 是否允许执行包含TRUE条件的DML         
```         
4、白名单管理，从白名单移除某个对象         
```         
unprotect_rel('rolename', 'relname')         
unprotect_rel('rolename', 'schema', 'relname')         
unprotect_rel(roleoid, reloid)         
edb=# SELECT unprotect_rel('appuser', 'public', 'emp');         
 unprotect_rel         
---------------         
(1 row)         
```         
5、清除计数器（风险计数器）          
```         
drop_stats('rolename')         
drop_stats(roleoid)         
edb=# SELECT drop_stats('appuser');         
 drop_stats         
------------         
(1 row)         
edb=# SELECT * FROM edb_sql_protect_stats;         
 username | superusers | relations | commands | tautology | dml         
----------+------------+-----------+----------+-----------+-----         
(0 rows)         
```         
如果对象已不存在，使用OID来移除         
```         
edb=# SELECT * FROM edb_sql_protect_stats;         
      username       | superusers | relations | commands | tautology | dml         
---------------------+------------+-----------+----------+-----------+-----         
 unknown (OID=16693) |          0 |         5 |        3 |         1 |   0         
 appuser             |          0 |         5 |        2 |         1 |   0         
(2 rows)         
edb=# SELECT drop_stats(16693);         
 drop_stats         
------------         
(1 row)         
edb=# SELECT * FROM edb_sql_protect_stats;         
 username | superusers | relations | commands | tautology | dml         
----------+------------+-----------+----------+-----------+-----         
 appuser  |          0 |         5 |        2 |         1 |   0         
(1 row)         
```         
6、清除风险SQL日志         
```         
drop_queries('rolename')         
drop_queries(roleoid)         
edb=# SELECT drop_queries('appuser');         
 drop_queries          
--------------         
            5         
(1 row)         
edb=# SELECT * FROM edb_sql_protect_queries;         
 username | ip_address | port | machine_name | date_time | query          
----------+------------+------+--------------+-----------+-------         
(0 rows)         
```         
如果对象已不存在，使用OID来移除         
```         
edb=# SELECT username, query FROM edb_sql_protect_queries;           
      username       |                    query                              
---------------------+----------------------------------------------         
 unknown (OID=16454) | CREATE TABLE appuser_tab_2 (f1 INTEGER);         
 unknown (OID=16454) | INSERT INTO appuser_tab_2 VALUES (2);         
 unknown (OID=16454) | CREATE TABLE appuser_tab_3 (f1 INTEGER);         
 unknown (OID=16454) | INSERT INTO appuser_tab_2 VALUES (1);         
 unknown (OID=16454) | SELECT * FROM appuser_tab_2 WHERE 'x' = 'x';         
(5 rows)         
edb=# SELECT drop_queries(16454);         
 drop_queries          
--------------         
            5         
(1 row)         
edb=# SELECT * FROM edb_sql_protect_queries;         
 username | ip_address | port | machine_name | date_time | query          
----------+------------+------+--------------+-----------+-------         
(0 rows)         
```         
7、启动或禁止SQL防火墙         
```         
edb_sql_protect.enabled = off         
edb_sql_protect.enabled = on         
```         
## 小结      
PPAS的SQL防火墙实现了以下风险的管理：        
1、防止SQL注入。         
2、防止业务访问无需访问的对象。         
3、防止业务执行DDL。         
4、防止业务执行不带WHERE条件的DML。         
5、防止业务执行不带WHERE条件或者WHERE条件始终未TRUE的查询。         
PostgreSQL的权限体系也非常的健全，从连接、库、SCHEMA、对象一直到行这个级别，都支持权限管理。         
[《PostgreSQL 逻辑结构 和 权限体系 介绍》](../201605/20160510_01.md)           
授权甚至精确到行、列、安全标签 这个层面。         
1、列级授权         
https://www.postgresql.org/docs/10/static/sql-grant.html           
2、行级授权，使用的是row security label         
https://www.postgresql.org/docs/10/static/ddl-rowsecurity.html           
[《PostgreSQL 行安全策略 - PostgreSQL 9.5 new feature - can define row security policy for table》](../201504/20150409_01.md)           
3、安全标签。结合LINUX的selinux特性，可以更加的精确。         
https://wiki.postgresql.org/wiki/SEPostgreSQL_SELinux_Overview         
https://www.postgresql.org/docs/10/static/sql-security-label.html         
https://www.postgresql.org/docs/10/static/sepgsql.html         
虽然PG的权限体系非常的完善，但是依旧无法完全防止攻击者带来的危害，只是减轻而已。         
PS: 要注意，SQL防火墙，同样也不能完全避免危害，也只能减轻而已。不要以为有SQL防火墙就万事大吉了。         
## 参考         
[《PostgreSQL 逻辑结构 和 权限体系 介绍》](../201605/20160510_01.md)           
[《PostgreSQL 转义、UNICODE、与SQL注入》](../201704/20170402_01.md)           
[《PostgreSQL SQL防火墙》](../201708/20170807_02.md)           
[《PostgreSQL SQL filter (SQL 成本|语义过滤器)》](../201801/20180111_01.md)           
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")