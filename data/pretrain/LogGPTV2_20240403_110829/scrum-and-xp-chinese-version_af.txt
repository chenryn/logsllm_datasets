我们用即时贴贴在每个故事的下方，每张即时贴表示这个故事中的
一个任务。
我们不会让任务拆分出现在产品 backlog 中，原因有二：
	任务拆分的随机性比较强，在 sprint 进行中，它们常常会 	发生变化，不断调整，所以保持产品 backlog 的同步很让人
头大。
	产品负责人不需要关心这种程度的细节。
任务拆分的即时贴可以和故事索引卡一起，在 sprint backlog 中被 直接重用。（参见“我们怎样编写 sprint backlogs”）。
30 | 硝烟中的 SCRUM 和 XP
定义“完成”30 | 硝烟中的 SCRUM 和 XP
定义“完成”
有一点很重要：产品负责人和团队需要对“完成”有一致的定义。所有代码被 check in 以后，故事就算完成了吗？还是被部署到测试 环境中，经过集成测试组的验证以后才算完成？我们尽可能使用这 样的定义：“随时可以上线”，不过有时候我们也这样说：“已经 部署到测试服务器上，准备进行验收测试”。
最开始我们用的是比较详细的检查列表。现在我们常说“如果 Scrum 团队中的测试人员说可以，那这个故事就算完成了”。然后 责任就到了测试人员身上，他需要保证团队理解了产品负责人的意 图，要保证故事的“完成”情况可以符合大家认可的定义。
我们慢慢意识到，不能把所有的故事都一概而论。“查询用户表单”跟“操作指南”这两个故事的处理方式就有很大差异。对后者，“完 成”的定义可能就是简单的一句话——“被运营团队认可”。所以 说，日常的一些认识往往要好过正式的检查列表。如果你常常对怎样定义完成感到困惑（就像我们刚开始一样），你 或许应该在每个故事上都添加一个字段，起名为“何谓完成”。
使用计划纸牌做时间估算
估算是一项团队活动——通常每个成员都会参与所有故事的估算。为啥要每个人都参加？
	在计划的时候，我们一般都还不知道到底谁会来实现哪个 	故事的哪个部分。
	每个故事一般有好几个人参与，也包括不同类型的专长（用 	户界面设计、编程、测试、等等）。
	团队成员必须要对故事内容有一定的理解才能进行估算。
要求每个人都做估算，我们就可以确保他们都理解了每个 条目的内容。这样就为大家在 sprint 中相互帮助夯实了基 础，也有助于故事中的重要问题被尽早发现。
我们怎样制定 SPRINT 计划| 31 
	如果要求每个人都对故事做估算，我们就会常常发现两个 	人对同一个故事的估算结果差异很大。我们应该尽早发现 	这种问题并就此进行讨论。如果让整个团队进行估算，通常那个对故事理解最透彻的人会第一 个发言。不幸的是，这会严重影响其他人的估算。
有一项很优秀的技术可以避免这一点——它的名字是计划纸牌（我 记得是 Mike Cohn 创造出来这个名字的）。
每个人都会得到如上图所示的 13 张卡片。在估算故事的时候，每 个人都选出一张卡片来表示他的时间估算（以故事点的方式表示），并把它正面朝下扣在桌上。所有人都完成以后，桌上的纸牌会被同 时揭开。这样每个人都会被迫进行自我思考，而不是依赖于其他人 估算的结果。
如果在两个估算之间有着巨大差异，团队就会就此进行讨论，并试 图让大家对故事内容达成共识。他们也许会进行任务分解，之后再 重新估算。这样的循环会往复进行，直到时间估算趋于一致为止，也就是每个人对这个故事的估算都差不多相同。
32 | 硝烟中的 SCRUM 和 XP32 | 硝烟中的 SCRUM 和 XP
重要的是，我们必须提醒团队成员，他们要对这个故事中所包含的 全部工作进行估算。而不是“他们自己负责”的部分工作。测试人 员不能只估算测试工作。
注意，这里的数字顺序不是线性的。例如在 40 和 100 之间就没有 数字。为什么这样？
这是因为，一旦时间的估算值比较大，其精确度就很难把握；这样 做就可以避免人们对估算精确度产生错误的印象。如果一个故事的 估算值是差不多 20 个故事点，它到底应该是 20 还是 18 还是 21，其实无关紧要。我们知道的就是它是一个很大的故事，很难估算。所以 20 只是一个粗略估计。
需要进行更精确的估算？那就把故事分拆，去估算那些更小的故 事！
另外，你也不能搞那种把 5 和 2 加起来得到 7 的把戏。要么选 5，要么选 8，没有 7。
有些卡片比较特殊：
		0 = “这个故事已经完成了”或者“这个故事根本没啥东 	西，几分钟就能搞定”。
 ? = “我一点概念都没有。没想法。”咖啡杯 = “我太累了，先歇会吧。”
明确故事内容 
在 sprint 演示会议上，团队自豪地演示了一个新特性，但产品负责 人却皱起眉头，“呃，看上去不错，但这不是我要的！”发生这种 事情可真是糟透了！
怎样才能让产品负责人和团队对故事有同样的理解？或者保证所 有的团队成员对每个故事都有同样的理解？嗯，这可没法做到。不 过还是有些简单技术，可以识别出最明显的误解。最简单的办法就
我们怎样制定 SPRINT 计划| 33 
是确保每个故事的所有字段都被填满（更精确地说，这里提到的是 具有高优先级，应该在这个 sprint 里面完成的故事）。
例 1：
团队和产品负责人都对 sprint 计划很满意，打算结束会议。这时 Scrum master 问了一个问题，“等一下，还有个‘添加用户’的故 事没有估算时间呢，把它解决了吧！”几轮计划纸牌以后，团队意 见达成一致，认为这个故事需要 20 个故事点；产品负责人却站了 起来，说话因为生气也走了调：“什、什、什么？！”经过几分钟的激烈争吵，最后发现是团队错误理解了“增加用户”这个故事的 范围，他们以为这表示“要有个漂亮的 web 界面来添加、删除、移除和查询用户”，但是产品负责人只是想“通过手写 SQL 操作 数据库来添加用户”。他们重新进行评估，给它 5 个故事点，达成 共识。
例 2：
团队和产品负责人都对 sprint 计划很满意，打算结束会议。这时 Scrum master 问了一个问题，“等一下，还有一个‘添加用户’的 故事，它怎么演示呢？”一阵窃窃私语之后，某人站起来说，“呃，首先我们登录 Web 站点，然后……”产品负责人打断了他的话，“登录 Web 站点？！不不不，这个功能跟 Web 站点一点关系都没 有，你给技术管理员提供个傻瓜都能用的 SQL 脚本就行。”
“如何演示”这段描述可以（而且应该）非常精简！不然你就没 法按时结束 sprint 计划会议。基本上，它就是用最平白浅显的语言，来描述如何手工执行最典型的测试场景。“先这样，然后那样，最后验证这一点。”
我发现，使用这种简单的描述，常常能够发现对于故事范围的最严
重的误解。这种事发现的越早越好，不是么？
把故事拆分成更小的故事
故事不应该太短，也不应太长（从估算的角度出发）。如果你有一 大堆 0.5 个故事点的故事，那你恐怕就会成为微观管理的受害者了。
34 | 硝烟中的 SCRUM 和 XP
与之相反，40 个点的故事，到最后很可能只能部分完成，这样不 会为公司带来任何价值，只会增加管理成本。进一步来说，如果你 们估算的生产率是 70，而最高优先级的两个故事都是 40 个故事点，那做计划可就有麻烦了。
摆在团队面前的只有两种选择：要么只选一个条目，完成当初允诺 的工作后，还有不少空闲时间，导致承诺不足（under-committing）；要么两个条目都选上，最后无法完成当初允诺的工作量，导致过度 承诺（over-committing）。我发现很大的故事基本上都能进行拆分。只要确定每个小故事依然
可以交付业务价值就行。
我们常常都力求保证故事的大小在 2 至 8 个人-天之间。一个普通 团队的生产率大约是 40-60，所以大概每个 sprint 可以完成 10 个故 事。有时会减少到 5 个，有时也会多到 15 个。处在这个数量范围 之间的索引卡是比较容易管理的。
把故事拆分成任务
等一下。“任务”和“故事”的区别是什么呢？嗯，这个问题问得
不错。
区别很简单。故事是可以交付的东西，是产品负责人所关心的。任
务是不可交付的东西，产品负责人对它也不关心。
在下图的例子中，故事被拆分成更小的故事：
下面是把故事拆分成任务的例子：
我们怎样制定 SPRINT 计划| 35 
我们会看到一些很有趣的现象：
	• 	新组建的 Scrum 团队不愿意花时间来预先把故事拆分成任 	务。有些人觉得这像是瀑布式的做法。• 	有些故事，大家都理解得很清楚，那么预先拆分还是随后
拆分都一样简单。
• 
•  这种类型的拆分常常可以发现一些会导致时间估算增加的 工作，最后得出的 sprint 计划会更贴近现实。
这种预先拆分可以给每日例会的效率带来显著提高（参见
“我们怎样进行每日例会”）。
• 	即使拆分不够精确，而且一旦开始具体工作，事先的拆分
结果也许会发生变化，但我们依然可以得到以上种种好处。
所以，我们试着把 sprint 计划会议的时间放到足够长，保证有时间 进行任务拆分，但如果时间不够的话，我们就不做了。（参加下面
的“最后界限在哪里”）。
注意——我们在实践 TDD（测试驱动开发），所以几乎每个故事 的第一个任务都是“编写一个失败的测试”，而最后一个任务是“重
构”（提高代码的可读性，消除重复）。
36 | 硝烟中的 SCRUM 和 XP
定下每日例会的时间地点36 | 硝烟中的 SCRUM 和 XP
定下每日例会的时间地点 
Sprint 计划会议有一个产物常常被人们忽略：“确定的时间和地点，以供举办每日例会”。没有这一点，你的 sprint 就会有个“开门黑”。实际上，每个人都是在当前 sprint 的第一个每日例会上决定怎样开 始工作。
我喜欢早上开会。不过我得承认，我们没有真正试过在下午或者中 午进行每日例会。
在下午开每日例会的缺点：早上来工作的时候，你必须试着记起来 你昨天对别人说过今天要做什么。
在上午开每日例会的缺点：早上来工作的时候，你必须试着记起来 你昨天做了些什么，这样才能跟别人讲。
我的看法是，第一个缺点更糟，因为最重要的事情是你打算干什么，而不是已经干了什么。
我们的默认做法是选一个大家都不会有异议的最早时间。一般是 9:00，9:30 或者 10:00。最关键的是，这必须是每个人都能完全接 受的时间。
最后界限在哪里最后界限在哪里 
OK，现在时间已经用完了。如果时间不够的话，那么我们该把哪 些本该做的事情砍掉呢？
嗯，我总是用下面这个优先级列表：
优先级 1：sprint 目标和演示日期。这是启动 sprint 最起码应该有的 东西。团队有一个目标，一个结束日期，然后就可以马上根据产品 backlog 开始工作。没错，这是不像话，你应该认真考虑一下明天 再开个新的 sprint 计划会议。不过如果确实需要马上启动 sprint，不妨先这么着吧。认真说来，只有这么点儿信息就开始 sprint，我 还从来没有试过。
我们怎样制定 SPRINT 计划| 37 
优先级 2：经过团队认可、要添加到这个 sprint 中的故事列表。
优先级 3：Sprint 中每个故事的估算值。
优先级 4：Sprint 中每个故事的“如何演示”。
优先级 5：生产率和资源计算，用作 sprint 计划的现实核查。包括 团队成员的名单及每个人的承诺（不然就没法计算生产率）。优先级 6：明确每日例会固定举行的时间地点。这只需要花几分钟，但如果时间不够用，Scrum master 可以在会后直接定下来，邮件通 知所有人。
优先级 7：把故事拆分成任务。这个拆分也可以在每日例会上做，不过这会稍稍打乱 sprint 的流程。
技术故事
这有个很复杂的问题：技术故事。或者叫做非功能性条目，或者你 想叫它什么都行。