 continue
newstate |= (1 >16,(state>>8)&0xFF
%v state = %v\n",
yed % = s ^% = das ^% = sn ^% =  ^% = x)udw//
newstate := keys
keys := state & OxFF 
return res - 1
if iskey(board, x, y) {
 canThroughLock = true
path = path[:len(path)-1]
path = path[:len(path)-1]
for i := 0; i >1
 low = mid + 1 
res = x 
high = mid 
---
## Page 837
代码
外一个指针每次移动1步，当快的指针走到终点的时候，慢的指针就是中间节点。
这道题有一个很简单的做法，用2个指针只遍历一次就可以找到中间节点。一个指针每次移动2 步，另
解题思路
那个结点。
如果链表长度是奇数，输出中间结点是中间结点。如果链表长度是双数，输出中间结点是中位数后面的
输出链表中间结点。这题在前面题目中反复出现了很多次了。
题目大意
Note:
Example 2: 
● The number of nodes in the given list will be between 1 and 100.
package leetcode
one.
Since the list has two middle nodes with values 3 and 4, we return the second
Output: Node 4 from this list (Serialization: [4,5,6])
func middleNode(head *ListNode) *ListNode {
Input: [1,2,3,4,5,6] 
NULL.
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = 
Note that we returned a ListNode object ans, such that: 
[3,4,5]].
The returned node has value 3.
Output: Node 3 from this list (Serialization: [3,4,5]) 
Input: [1,2,3,4,5]
* Definition for singly-linked list.
 type ListNode struct { 
Next *ListNode
 Val int 
(The judge's serialization of this node is
---
## Page 838
 Example 4:
 Example 3:
 Example 2:
 Example 1: 
 Return the N-th magical number. Since the answer may be very large, return it modulo 10^9 +
 A positive integer is magical if it is divisible by either A or B.
题目
878. Nth Magical Number
Output: 10
Input: N = 5，A = 2, B = 4 
Output: 6
Input: N = 4,A = 2， B = 3 
Output: 2
Input: N = 1， A = 2， B = 3 
return pl 
if length%2 == 0 {
for cur != nil {
cur := head 
for p2.Next != nil && p2.Next.Next != nil {
p2 := head 
pl := head 
if head == nil Il head.Next == nil {
 return pl.Next
length := 0
 return head 
cur = cur.Next
length++ 
pl = pl.Next 
---
## Page 839
代码
解题思路
提示：
它模10~9+7的结果。
如果正整数可以被A或B 整除，那么它是神奇的。返回第N个神奇数字。由于答案可能非常大，返回
题目大意
Note:
package leetcode
·这一题是第1201题的缩水版，代码和解题思路也基本不变，这一题的二分搜索的区间是 
·给出 3 个数字，a，b，n。要求输出可以整除 a 或者整除b 的第 n 个数。
3. 2>1
high = mid
else {
 low = mid + 1 
---
## Page 840
Note:
Example 3: 
Example 2: 
Example 1: 
decoded string.
Now for some encoded string S, and an index K, find and return the K-th letter (1 indexed) in the 
If the character read is a digit (say d), the entire current tape is repeatedly written d-1 more times
If the character read is a letter, that letter is written onto the tape.
read one character at a time and the following steps are taken:
An encoded string S is given. To find and write the decoded string to a tape, the encoded string is 
题目
880. Decoded String at Index
in total.
The decoded string is "a" repeated 8301530446056247680 times. The 1st letter
Explanation:
Output: "a"
Input: S =
The decoded string is "hahahaha".
Explanation: 
Output: "h"
The 10th letter in the string is "o".
is "a".
Input:S=
The decoded string is "leetleetcodeleetleetcodeleetleetcode".
Explanation:
Output: "o"
Input: S =
1= 3‘.66666666666666684999291
"ha22", K = 5
："leet2code3"，K = 10
The 5th letter is "h"
---
## Page 841
代码
到第K个字符的时候就可以返回了，不要等所有字符都扩展完成，这样会超时。d有可能超大。
按照题意，扫描字符串扫到数字的时候，开始重复字符串，这里可以用递归。注意在重复字符串的时候
解题思路
现在，对于给定的编码字符串S 和索引K，查找并返回解码字符串中的第K个字母。
采取以下步骤：
给定一个编码字符串S。为了找出解码字符串并将其写入磁带，从编码字符串中每次读取一个字符，并
题目大意
·如果所读的字符是数字（例如 d），则整个当前磁带总共会被重复写 d-1次。
·如果所读的字符是字母，则将该字母写在磁带上。
func decodeAtIndex(S string, K int) string 
func isletter(char byte) bool {
package leetcode
5. The decoded string is guaranteed to have less than 2^63 letters.
3. S starts with a letter.
2.
1. 2  e  ， == K {
else {
if length == K { 
length++ 
length *= int(s[i] - '0')
return string(s[i]]
return decodeAtIndex(S[:i]， length)
if k%length != O { 
 return decodeAtIndex(S[:i], K%length)