15:
mark (m(cid:48), n(cid:48)) as seen
q.Enqueue(m(cid:48), n(cid:48))
(m, n) ← q.Dequeue()
if m (cid:2)rank n then return false
for n(cid:48) in adj(G, n) do
if(cid:0)∃m(cid:48) ∈ adj(G, m), m(cid:48) ≈ n(cid:48)(cid:1) or
(cid:0)∃m(cid:48) ∈ G, dominates m, m(cid:48) ≈ n(cid:48)(cid:1) then
if (m(cid:48), n(cid:48)) not marked then
else return f alse
return true
is that, since the advertisement must have already passed
through the dominator, we can check to see if we are guar-
anteed to ﬁnd paths that are at least as good from this new
node instead. At each step, it requires that the current node
reachable from N1 has a path rank that is at least as good
as that of the current node reachable from N2 (m ≤rank n).
The intuition here is that if m (cid:2)rank n, then we can very
likely fail every edge in the topology except for the path that
leads to the current m and n, thereby generating a counterex-
ample. Algorithm 1 terminates since the number of related
states (m, n) that can be explored is ﬁnite.
For each router in the topology, local preferences are now
obtained by sorting the corresponding PGIR shadows ac-
cording to the (≤lp) relation determined by Algorithm 1.
If two nodes are incomparable, then the compiler rejects the
policy as unimplementable.
Avoiding loops. The checks for failure safety described above
overlook one critical point: A better (lower rank) path might
not be available due to loops rejected by BGP.
Consider the partial product graph shown in Figure 7. Our
preference inference algorithm will determine that node X1
should be locally preferred to node X2 since this will result
in a better (lower ranked) path to destination A. However,
when applying Algorithm 1, we failed to take into account
the possibility of loops. In particular, node A2 may be unus-
able for advertisements that go through X1 since the adver-
tisement may have already gone through A1 previously. In
this case, X will have made the wrong choice since prefer-
ring X2 would have resulted in a better path for the destina-
tion A (a path of rank 3 instead of 4).
On the other hand, this would not have been a problem
if paths ending at A1 had a lower rank than those ending at
A2 or A3. For example, if paths ending at A1 had rank 1,
then any time A2 is unusable due to a loop with A1, it ulti-
mately does not matter since A1 is preferred anyway. In fact,
checking if we are never worse off using A1 instead of A2
corresponds exactly with determining if A has a regret-free
Figure 6: A network where the policy (A· B· D· E· G)»(A· C·
D· F· G) is unimplementable in BGP under arbitrary failures.
their advertisements to let C know which shadow sent the
advertisement. Section 5.5 discusses tagging in detail.
Regret-free preferences. To order PGIR shadows (≤lp) for
each router in a way that is policy-compliant under all fail-
ures, we introduce the notion of regret-free preferences, mo-
tivated by the observations from the example in Figure 6. A
router (location) l has a regret-free preference for a set of
advertisements A over B if, whenever l selects an advertise-
ment to destination d from A over another from B, there is
always some policy-compliant path to d that is at least as
good (≤rank for the ﬁnal node along the path) as any possi-
ble path (not necessarily from l) to d if l had selected an ad-
vertisement from B instead. In other words, the preference
of A over B at l is regret-free if l is never (under any failure)
worse-off by choosing an advertisement from A when avail-
able. The notion of regret-free preferences can be lifted to
PGIR nodes by considering the set of advertisements avail-
able to each node.
In the example of Figure 5, the choice for C to prefer
shadow (C, 3, 2) to (C,−, 2) is regret-free, since there will
always be at least as good a path to destination W regardless
of any failures that might occur in the network. For exam-
ple, if the C–A link fails, then there is still a backup path
from (C, 3, 2) to (W,−, 4) that is just as good as any path
from (C,−, 2). Likewise, any combination of failures to
disconnect (C, 3, 2) from (W,−, 4) would also disconnect
(C,−, 2) from (W,−, 4).
A preference inference algorithm. Searching for precise
regret-free preferences in general is hard, and clearly enu-
merating all possible combinations of failures and prefer-
ence orderings is intractable. We thus adopt a conserva-
tive analysis that we found to be effective and efﬁcient in
practice. The idea is to i) search for regret-free preferences
by comparing the set of paths available after accepting ad-
vertisements in two different PGIR shadows N1 and N2 of
topology node N, and ii) reﬁne the comparison when nec-
essary by considering where the announcements must have
traversed before arriving at N1 or N2.
Algorithm 1 checks whether one shadow can be preferred
to another (N1 ≤lp N2). It walks from nodes N1 and N2
and ensures that for every step N2 can take to some new
topology location, N1 can, at the very least, also take a step
to an equivalent topology location (≈). When there is no
such equivalent step, the algorithm attempts to take into ac-
count where the advertisement must have already traversed.
In particular, it checks if there is an equivalent dominator
node and, if so, walks from this new node instead. The idea
336
Figure 7: A product graph where preference inference is un-
sound before considering loops. Path ranks shown by nodes.
preference for A1 over A2. More speciﬁcally, the compiler
checks that, any time there are two shadows N1 and N2 for
the same topology location, where N1 appears “above” (i.e.,
can reach) N2 in the PGIR, then N1 must be strictly pre-
ferred to N2 (i.e., N1  end(A), where PG1 falls under the PG aggregate.
Figure 8 shows the PGIR for PG1. Since we know aggre-
gation will occur at X, and that the PG1 preﬁx will originate
at A, we can compute the number of failures it would take to
disconnect A from X. We could remove the A–D–X path
ﬁrst and would then need to remove any other A–D or D–
X links from the PGIR (in this case none). Next, we could
remove the links along the A–C–X path, repeating the pro-
cess. Because A is now disconnected from X, 2 is a lower
bound on the number of failures required to introduce an ag-
gregation black hole for preﬁx PG1. This process is repeated
for other aggregation locations (e.g., Y ).
337
Figure 8: Aggregation safety for a datacenter.
5.5 Abstract BGP
The ﬁnal stage of our compiler translates policies from
PGIR to a vendor-neutral abstraction of BGP (ABGP).
From PGIR to ABGP. Once we have the total ordering on
node preferences in the PGIR from the failure safety analy-
sis, the translation to ABGP is straightforward. The idea is
to encode the state of the automata using BGP community
values. Each router will match based on its peer and a com-
munity value corresponding to the state of the PGIR, and
then update the state before exporting to the neighbors per-
mitted by the PGIR. For example, router A in Figure 5 will
allow an announcement from C with a community value for
state (3, 2) (and deny anything else). If it sees such an an-
nouncement, it will remove the old community value and
add a new one for state (4, 2) before exporting it to W .
For each router r, the compiler sets a higher local pref-
erence for neighbors of a more-preferred PGIR node for r.
For example, C will prefer an advertisement from D in state
(2, 2) over an advertisement from E in state (−, 2).
Since the compiler can control community tagging only
for routers under the control of the AS being programmed,
it cannot match on communities for external ASes. Instead,
it translates matches from external ASes into a BGP regular
expression ﬁlter. For example, node D in Figure 5 would
match the single hop external paths X or Y . In general, if
routes are allowed from beyond X or Y , these will also be
captured in the BGP regular expression ﬁlters. The unknown
AS topology is modeled as a special node in the PGIR that
generates a ﬁlter to match any sequence of ASes.
Finally, the external AS W should prefer our internal router
A over B. In general, it is not possible to reliably control
trafﬁc entering the network beyond certain special cases. In
this example, however, assuming our network and W have
an agreement to honor MEDs, the MED attribute can inﬂu-
ence W to prefer A over B. Additionally, the compiler can
use the BGP no-export community to ensure that no other
AS beyond W can send us trafﬁc. The compiler performs a
simple analysis to determine when it can utilize BGP special
attributes to ensure trafﬁc enters the network in a particu-
lar way by looking at links in the product graph that cross
from the internal topology to the external topology. Figure 9
shows the full conﬁguration from the compilation example.
After conﬁguration generation, the compiler further pro-
cesses the ABGP policy, removing community tags when
Router A:
Match peer=C, comm=(3,2)
Export comm ← (4,2),
MED ← 80, peer ← W
Router B:
Match peer = C, comm = (-,2) or (3,2)
Export comm ← (-,3), comm ← noexport,
MED ← 81, peer ← W
Router C:
Match[LP=99] peer = E, comm = (-,2)
Export comm ← (-,2), peer ← B
Export comm ← (3,2), peer ← A,B
Match peer = D, comm = (2,2)
Router D:
Match regex(X + Y)
Export comm ← (2,2), peer ← C
Router E:
Match regex(Z)
Export comm ← (-,2), peer ← C
Figure 9: Abstract BGP router conﬁgurations.
possible, combining ﬁlters, removing dead ﬁlters, and so on.
In the ABGP policy shown in Figure 9, all community tags
can be removed, since there is never any ambiguity as to the
current state of the PGIR based only on the current router
importing the route and the neighbor from which the route is
being imported.
6.
IMPLEMENTATION
Our Propane compiler is implemented in roughly 6700
lines of F# code. It includes command-line ﬂags for enabling
or disabling the use of the BGP MED attribute, AS path
prepending, the no-export community, as well as for ensur-
ing at least k-failure safety for aggregate preﬁxes. Since each
predicate has a separate routing policy, we compile each
routing policy in parallel. Currently, Propane supports gen-
erating Quagga router conﬁgurations out of the box. Users
can add new vendor-speciﬁc adapters to translate from ABGP
to other router conﬁguration languages, or incorporate the
compiler into an existing template-based system, e.g., by
mixing the Propane-generated BGP conﬁguration with other,
non-BGP conﬁguration elements.
Our compiler includes the following features that improve
its performance and usability.
Efﬁcient PGIR construction. Constructing automata for
extended regular expressions (i.e., regular expressions with
negation and intersection operations) is known to have high
complexity [14]. The Propane compiler uses regular expres-
sion derivatives [28] with character classes to construct de-
terministic automata for extended regular expressions efﬁ-
ciently. Since regular expressions are deﬁned over a ﬁnite
alphabet, and since much of the AS topology is unknown,
we set the alphabet to include all uniquely referenced ex-
ternal ASes in the policy. To model the unknown external
AS topology beyond immediate peers, we include a special
topology node to represent any unknown location. Rather
than construct the product graph in full, our implementa-
tion prevents exploring parts of the graph during construc-
tion when no automata has a reachable accepting state.
338
Fast failure-safety analysis. When computing local pref-
erences and ensuring failure safety, as described in §5, the
compiler performs memoization of the Regret-Free function.
That is, whenever for two states N1 and N2 we compute
Regret-Free(G, N1, N2) and the function evaluates to true,
then each of the intermediate related states m and n must
also satisfy Regret-Free(G, m, n). Memoizing these states
dramatically reduces the amount of work performed to ﬁnd
preferences in the common case.
Efﬁcient conﬁguration generation. The naive code gener-
ation algorithm described in §5.5 is extremely memory inef-
ﬁcient since it generates a separate match-export pair for ev-
ery unique in-edge/out-edge pair for every node in the prod-
uct graph before minimization. Our implementation per-
forms partial minimization during generation by recogniz-
ing common cases such as when there is no restriction on
exporting to or importing from neighbors.
Checking policy correctness. Even when programming the
network centrally, it is possible for operators to make mis-
takes. Propane includes many analyses to identify common
mistakes at compile time. A subset includes: (i) a preference
analysis to determine when backup paths will never be used,
(ii) a reachability analysis to check if locations that should
be reachable according to the policy are not reachable after
combining the topology and policy, (iii) an anycast analy-
sis to ﬁnd instances where the operator might accidentally
anycast a preﬁx (i.e., originates the preﬁx from multiple lo-
cations), (iv) an aggregate analysis to ﬁnd unused aggregates
that do not summarize any speciﬁc preﬁx.
7. EVALUATION
We apply Propane on real policies for backbone and dat-
acenter networks. Our main goals are to evaluate if its lan-
guage is expressive enough for real-world policies, the time
the compiler takes to generate router conﬁgurations, and the
size of the resulting conﬁgurations.
7.1 Networks studied
We obtained routing policy for the backbone network and
datacenters of a large cloud provider. Multiple datacenters
share this policy. The backbone network connects to the dat-
acenters and also has many external BGP neighbors. The
high-level policies of these networks are captured in an En-
glish document which guides operators when writing con-
ﬁguration templates for datacenter routers or actual conﬁg-
urations for the backbone network (where templates are not
used because the network has a less regular structure).
The networks have the types of policies that we outlined
earlier (§3). The backbone network classiﬁes external neigh-
bors into several different categories and prefers paths through
them in order.
It does not want to provide transit among
certain types of neighbors. For some neighbors, it prefers
some links over the others. It supports communities based
on which it will not announce certain routes externally or
announce them only within a geographic region (e.g., West
(a) Datacenter
(b) Backbone
Figure 10: Compilation time.
(a) Datacenter