### Timely Detection and Benefits of Distributed Autograph Deployment

When deployed in a distributed manner, even at as few as 1% of Autonomous Systems (ASes) containing vulnerable hosts, Autograph significantly enhances the speed of detecting signatures for novel worms. For instance, with a more conservative port-scan threshold \( s = 4 \), the monitor in the distributed system that has accumulated the most worm payloads after 10,000 seconds has collected only 4. This highlights the trade-off between increased specificity (by identifying suspicious flows more conservatively) and reduced sensitivity, where sensitivity is measured by the number of worm flows matched over time.

### Accelerating Worm Signature Detection with Multiple Monitors

Running multiple independent Autograph monitors clearly accelerates the detection of worm signatures. A natural question arises: can detection speed be further improved if these monitors share information with one another?

### Tattler: Distributed Gathering of Suspect IP Addresses

At the onset of a worm's propagation, the aggregate rate at which all infected hosts scan the IP address space is quite low. Since Autograph relies on overhearing unsuccessful scans to identify suspicious source IP addresses, early in an epidemic, an Autograph monitor will be slow to accumulate suspicious addresses and, consequently, slow to accumulate worm payloads. To address this, we introduce an extension to Autograph called "tattler," which shares suspicious source addresses among all monitors to accelerate the accumulation of worm payloads.

#### Design Assumptions for Tattler

- **Multicast Facility**: We assume a multicast facility is available to all Autograph monitors, and they join a single multicast group. While IP multicast is not widely deployed, end-system-oriented multicast systems like Scribe [1] can provide this functionality.
- **User Cooperation**: Users are willing to publish the IP addresses that have been port scanning them.

#### Tattler Protocol

Tattler is essentially an application of the RTP Control Protocol (RTCP) [14], originally used for controlling multicast multimedia conferencing sessions, adapted for use in the Autograph context. The key features of RTCP include:

- **Bandwidth Management**: All senders join the same multicast group and respect a total bandwidth limit \( B \).
- **Announcement Intervals**: Each sender maintains an interval \( I \) for announcements, with transmissions jittered uniformly at random within [0.5, 1.5] times this interval.
- **Estimating Sender Count**: Each sender estimates the total number of senders \( N \) by counting unique source IP addresses from received announcement packets.
- **Interval Adjustment**: Each sender computes \( I = N/B \) and scales it based on the size of the next announcement.
- **Reconsideration Procedure**: When too many senders join, the aggregate sending rate may exceed \( C \). RTCP uses a probabilistic procedure to lengthen \( I \).
- **Departure Handling**: Departing senders may send a BYE packet to help other senders learn about the decrease in group membership.
- **Scalability**: RTCP has been shown to scale to thousands of senders.

In the tattler protocol, each announcement contains between one and 100 port-scanner reports of the form (src-IP, dst-port). Monitors announce scanners they've heard themselves, and hearing a report from another monitor suppresses the announcement of that scanner for a refresh interval. After a timeout, a monitor expires a scanner entry if no direct scans or announcements are received.

### Simulation Results

Figure 11 shows the bandwidth consumed by the tattler protocol during a simulated Code-RedI-v2 epidemic, with three different monitor populations (6, 63, and 630 monitors). The aggregate bandwidth cap \( C \) is 512 Kbps, and the peak bandwidth consumed is only 15 Kbps, indicating that sharing port scanner information among monitors is feasible.

### Background Port Scanning

Background port scanning activities unrelated to new worms are prevalent on the Internet. dshield.org [4] reports that approximately 600,000 unique (source-IP, dst-port) pairs occur in a 24-hour period. Doubling this figure, tattler would need to deliver 1.2M reports per day, consuming 570 bits/second. This load is insignificant for tattler.

### Impact on Worm Signature Detection Time

Figure 12 shows the time required to accumulate payloads in a deployment of 63 monitors using tattler. For a port scanner detection threshold \( s = 1 \), the time to accumulate 5 payloads is reduced to approximately 1500 seconds, down from nearly 4000 seconds without tattler. Thus, sharing scanner address information with tattler speeds up worm signature detection.

### Summary

Distributing Autograph monitors offers two main benefits:
1. The "luckiest" monitor that first accumulates sufficient worm payloads determines the delay until signature detection.
2. Monitors can share port-scanning source addresses, allowing all monitors to classify worm flows as suspicious earlier.

### Online, Distributed, DMZ-Trace-Driven Evaluation

We use DMZ-trace-driven simulation on a one-day ICSI trace to measure how long it takes Autograph to identify a newly released worm among background noise. We are particularly interested in the trade-off between early signature generation (sensitivity) and the specificity of generated signatures.

#### Simulation Setup

- **Single Monitor**: We run a single Autograph monitor on the ICSI trace.
- **Initialization**: We initialize the list of suspicious IP addresses by running Bro on the entire 24-hour trace, excluding known worm flows, and then scanning the resulting trace for port scan activity.
- **Background Noise Trace**: We generate a background noise trace consisting of non-worm flows from port scanners.

#### Results

- **Worm Detection Time**: Figure 14 shows the fraction of the vulnerable host population infected when Autograph detects the newly released worm as a function of \( q \), for varying port scanner detection sensitivities/specificities (s âˆˆ {1, 2, 4}).
- **False Positives**: Figure 15 shows the number of unspecific (false-positive-inducing) signatures generated by Autograph as a function of \( q \), for different sensitivities/specificities of the flow classifier.

These results demonstrate that for a very sensitive/unspecific flow classifier (s = 1), Autograph generates a signature for the worm before it spreads to even 1% of vulnerable hosts. As the flow classifier improves in specificity but becomes less sensitive (s = {2, 4}), the generation of the worm's signature is delayed, as expected.