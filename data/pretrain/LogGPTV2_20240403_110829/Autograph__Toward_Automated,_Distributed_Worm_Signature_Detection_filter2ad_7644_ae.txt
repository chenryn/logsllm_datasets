they detect in a timely fashion, there is immense beneﬁt in
the speed of detection of a signature for a novel worm when
Autograph is deployed distributedly, even at as few as 1% of
ASes that contain vulnerable hosts.
Using the more conservative port-scan threshold s = 4, the
monitor in the distributed system to have accumulated the
most worm payloads after 10000 seconds has still only col-
lected 4. Here, again, we observe that targeting increased
speciﬁcity (by identifying suspicious ﬂows more conserva-
tively) comes at a cost of reduced sensitivity; in this case,
sensitivity may be seen as the number of worm ﬂows matched
over time.
Running multiple independent Autograph monitors clearly
pays a dividend in faster worm signature detection. A natural
question that follows is whether detection speed might be im-
proved further if the Autograph monitors shared information
with one another in some way.
5.2
tattler: Distributed Gathering of Suspect
IP Addresses
At the start of a worm’s propagation, the aggregate rate at
which all infected hosts scan the IP address space is quite low.
Because Autograph relies on overhearing unsuccessful scans
to identify suspicious source IP addresses, early in an epi-
demic an Autograph monitor will be slow to accumulate sus-
picious addresses, and in turn slow to accumulate worm pay-
loads. We now introduce an extension to Autograph named
tattler that, as its name suggests, shares suspicious source ad-
dresses among all monitors, toward the goal of accelerating
the accumulation of worm payloads.
We assume in the design of tattler that a multicast facility
is available to all Autograph monitors, and that they all join
a single multicast group. While IP multicast is not a broadly
deployed service on today’s Internet, there are many viable
end-system-oriented multicast systems that could provide this
functionality, such as Scribe [1]. In brief, Autograph moni-
tor instances could form a Pastry overlay, and use Scribe to
multicast to the set of all monitors. We further assume that
users are willing to publish the IP addresses that have been
port scanning them.8
The tattler protocol is essentially an application of the RTP
Control Protocol (RTCP) [14], originally used to control mul-
ticast multimedia conferencing sessions, slightly extended for
use in the Autograph context. The chief goal of RTCP is to
allow a set of senders who all subscribe to the same mul-
ticast group to share a capped quantity of bandwidth fairly.
In Autograph, we seek to allow monitors to announce to
others the (IP-addr, dst-port) pairs they have ob-
served port scanning themselves, to limit the total bandwidth
of announcements sent to the multicast group within a pre-
determined cap, and to allocate announcement bandwidth rel-
atively fairly among monitors. We recount the salient features
of RTCP brieﬂy:
• A population of senders all joins the same multicast
group. Each is conﬁgured to respect the same total band-
width limit, B, for the aggregate trafﬁc sent to the group.
• Each sender maintains an interval value I it uses between
its announcements. Transmissions are jittered uniformly
at random within [0.5,1.5] times this timer value.
• Each sender stores a list of the unique source IP ad-
dresses from which it has received announcement pack-
ets. By counting these, each sender learns an estimate
of the total number of senders, N. Entries in the list ex-
pire if their sources are not heard from within a timeout
interval.
• Each sender computes I = N/B. Senders keep a run-
ning average of the sizes of all announcement packets
received, and scale I according to the size of the an-
nouncement they wish to send next.
• When too many senders join in a brief period, the aggre-
gate sending rate may exceed C. RTCP uses a reconsid-
eration procedure to combat this effect, whereby senders
lengthen I probabilistically.
• Senders which depart may optionally send a BYE packet
in compliance with the I inter-announcement interval, to
speed other senders’ learning of the decrease in the total
group membership.
• RTCP has been shown to scale to thousands of senders.
In the tattler protocol, each announcement a monitor makes
contains between one and 100 port-scanner reports of the
form (src-IP, dst-port). Monitors only announce
scanners they’ve heard themselves. Hearing a report from
another monitor for a scanner suppresses announcement of
that scanner for a refresh interval. After a timeout interval, a
monitor expires a scanner entry if that scanner has not directly
scanned it and no other monitor has announced that scanner.
Announcement packets are sent in accordance with RTCP.
Every time the interval I expires, a monitor sends any an-
nouncements it has accumulated that haven’t been suppressed
by other monitors’ announcements. If the monitor has no port
scans to report, it instead sends a BYE, to relinquish its share
of the total report channel bandwidth to other monitors.
Figure 11 shows the bandwidth consumed by the tat-
tler protocol during a simulated Code-RedI-v2 epidemic, for
three deployed monitor populations (6, 63, and 630 moni-
tors). We use an aggregate bandwidth cap C of 512 Kbps
in this simulation. Note that the peak bandwidth consumed
across all deployments is a mere 15Kbps. Thus, sharing port
scanner information among monitors is quite tractable. While
we’ve not yet explicitly explored dissemination of signatures
in our work thus far, we expect a similar protocol to tattler
will be useful and scalable for advertising signatures, both to
Autograph monitors and to other boxes that may wish to ﬁlter
using Autograph-generated signatures.
Note well that “background” port scanning activities un-
related to the release of a new worm are prevalent on
the Internet, and tattler must tolerate the load caused by
10% deployment
1% deployment
0.1% deployment
 20
 15
 10
 5
)
s
p
b
k
(
h
t
i
d
w
d
n
a
B
 0
 0
 50
 100
Time (min)
 150
 200
Figure 11: Bandwidth consumed by tattler during a Code-
RedI v2 epidemic, for varying numbers of deployed monitors.
such background port scanning. dshield.org [4] re-
ports daily measurements of port scanning activities, as
measured by monitors that cover approximately 219 IP ad-
dresses. The dshield.org statistics from December 2003
and January 2004 suggest that approximately 600,000 unique
(source-IP, dst-port) pairs occur in a 24-hour pe-
riod.
If we conservatively double that ﬁgure, tattler would
have to deliver 1.2M reports per day. A simple back-of-the-
envelope calculation reveals that tattler would consume 570
bits/second to deliver that report volume, assuming one an-
nouncement packet per (source-IP, dst-port) pair.
Thus, background port scanning as it exists in today’s Internet
represents insigniﬁcant load to tattler.
We now measure the effect of running tattler on the time
required for Autograph to accumulate worm ﬂow payloads in
a distributed deployment. Figure 12 shows the time required
to accumulate payloads in a deployment of 63 monitors that
use tattler. Note that for a port scanner detection threshold
s = 1, the shortest time required to accumulate 5 payloads
across monitors has been reduced to approximately 1500 sec-
onds, from nearly 4000 seconds without tattler (as shown in
Figure 10). Thus, sharing scanner address information among
monitors with tattler speeds worm signature detection.
In sum, running a distributed population of Autograph
monitors holds promise for speeding worm signature detec-
tion in two ways: it allows the “luckiest” monitor that ﬁrst ac-
cumulates sufﬁcient worm payloads determine the delay until
signature detection, and it allows monitors to chatter about
port-scanning source addresses, and thus all monitors clas-
sify worm ﬂows as suspicious earlier.
5.3 Online, Distributed, DMZ-Trace-Driven
Evaluation
The simulation results presented thus far have quantiﬁed the
time required for Autograph to accumulate worm payloads
s=1 (Max)
s=4 (Max)
 10000
 1000
 100
 10
s
d
a
o
y
a
P
l
f
o
r
e
b
m
u
N
 1
 0
 50
 100
 150
 200
Time (min)
Figure 12: Payloads observed over time: tattler among dis-
tributed monitors.
after a worm’s release. We now use DMZ-trace-driven sim-
ulation on the one-day ICSI trace to measure how long it
takes Autograph to identify a newly released worm among
the background noise of ﬂows that are not worms, but have
been categorized by the ﬂow classiﬁer as suspicious after
port scanning the monitor. We are particularly interested in
the trade-off between early signature generation (sensitivity
across time, in a sense) and speciﬁcity of the generated sig-
natures. We measure the speed of signature generation by
the fraction of vulnerable hosts infected when Autograph ﬁrst
detects the worm’s signature, and the speciﬁcity of the gener-
ated signatures by counting the number of signatures gener-
ated that cause false positives. We introduce this latter metric
for speciﬁcity because raw speciﬁcity is difﬁcult to interpret:
if a signature based on non-worm-ﬂow content (from a mis-
classiﬁed innocuous ﬂow) is generated, the number of false
positives it causes depends strongly on the trafﬁc mix at that
particular site. Furthermore, an unspeciﬁc signature may be
relatively straightforward to identify as such with “signature
blacklists” (disallowed signatures that should not be used for
ﬁltering trafﬁc) provided by a system operator.9
We simulate an online deployment of Autograph as fol-
lows. We run a single Autograph monitor on the ICSI trace.
To initialize the list of suspicious IP addresses known to
the monitor, we run Bro on the entire 24-hour trace using
all known worm signatures, and exclude worm ﬂows from
the trace. We then scan the entire resulting worm-free 24-
hour trace for port scan activity, and record the list of port
scanners detected with thresholds of s ∈ {1,2,4}. To emu-
late the steady-state operation of Autograph, we populate the
monitor’s suspicious IP address list with the full set of port
scanners from one of these lists, so that all ﬂows from these
sources will be classiﬁed as suspicious. We can then generate
a background noise trace, which consists of only non-worm
ﬂows from port scanners, as would be detected by a running
Autograph monitor for each of s ∈ {1,2,4}. Figure 13 shows
the quantity of non-worm noise ﬂows in Autograph’s suspi-
i
e
s
o
N
d
n
u
o
r
g
k
c
a
B
i
e
s
o
N
d
n
u
o
r
g
k
c
a
B
i
e
s
o
N
d
n
u
o
r
g
k
c
a
B
 20
 15
 10
 5
 0
 20
 15
 10
 5
 0
 20
 15
 10
 5
 0
6:00
12:00
18:00
6:00
12:00
18:00
s=1
24:00
s=2
24:00
s=4
6:00
12:00
18:00
24:00
Time
Figure 13: Background “noise” ﬂows classiﬁed as suspicious
vs. time, with varying port-scanner thresholds; ICSI DMZ
trace.
cious trafﬁc pool over the trace’s full 24 hours.
We simulate the release of a novel worm at a time of our
choosing within the 24-hour trace as follows. We conﬁg-
ure Autograph with a signature generation periodicity r of
10 minutes, and a holding period t for the suspicious ﬂow
pool of 30 minutes. Using the simulation results from Sec-
tion 5.2, we count the number of worm ﬂows expected to
have been accumulated by the “luckiest” monitor among the
63 deployed during each 30-minute period, at intervals of 10
minutes. We then add that number of complete Code-RedI-
v2 ﬂows (available from the pristine, unﬁltered trace) to the
suspicious trafﬁc pool from the corresponding 30-minute por-
tion of the ICSI trace, to produce a realistic mix of DMZ-trace
noise and the expected volume of worm trafﬁc (as predicted
by the worm propagation simulation). In these simulations,
we vary q
, the total number of ﬂows that must be found in
the suspicious trafﬁc pool to cause signature generation to be
triggered. All simulations use w = 95%. Because the quan-
tity of noise varies over time, we uniformly randomly choose
the time of the worm’s introduction, and take means over ten
simulations.
Figure 14 shows the fraction of the vulnerable host popu-
lation that is infected when Autograph detects the newly re-
leased worm as a function of q
, for varying port scanner de-
tection sensitivities/speciﬁcities (s ∈ {1,2,4}). Note the log-
scaling of the x axis. These results demonstrate that for a
very sensitive/unspeciﬁc ﬂow classiﬁer (s = 1), across a wide
range of q s (between 1 and 40), Autograph generates a sig-
nature for the worm before the worm spreads to even 1% of
vulnerable hosts. As the ﬂow classiﬁer improves in speciﬁcity
but becomes less sensitive (s = {2,4}), Autograph’s genera-
tion of the worm’s signature is delayed, as expected.
Figure 15 shows the number of unspeciﬁc (false-positive-
inducing) signatures generated by Autograph, as a function of
, for different sensitivities/speciﬁcities of ﬂow classiﬁer. The
q
d
e
t
c
e
f
i
n
n
u
l
s
t
s
o
h
e
b
a
r
e
n
u
v
f