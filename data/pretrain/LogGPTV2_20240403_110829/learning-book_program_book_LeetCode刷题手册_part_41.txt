valint
idx int
//解法二滑动窗口+剪枝
func containsNearbyAlmostDuplicatel(nums []int,k int, t int) bool {
if len(nums) 0 {
node := queue[0]
if node.Left != nil{
queue = append(queue, node.Left)
nextLeve1Num++
if node.Right != nil {
queue = append(queue, node.Right)
---
## Page 367
nextLevelNum++
curNum=-
queue = queue[1:]
if curNum == 0 {
res += nextLevelNum
curNum = nextLeve1Num
nextLeve1Num = 0
return res
223.RectangleArea
题目
Find the total area covered by two rectilinear rectangles in a 2D plane.
Each rectangle is defined by its bottom left corner and top right corner as shown in the figure.
Y
(C, D) : (3, 4)
(G, H) : (9, 2)
0 (0,0)
(A, B) : (-3, 0)
(E, F) : (0, -1)
Example:
Input: A
3.B
Output: 45
Note:
Assume that the total area is never beyond the maximum possible value of int.
---
## Page 368
题目大意
在二维平面上计算出两个由直线构成的矩形重叠后形成的总面积。每个矩形由其左下顶点和右上顶点坐
标表示，如图所示。说明：假设矩形面积不会超出int的范围。
解题思路
·给出两个矩形的坐标，求这两个矩形在坐标轴上覆盖的总面积。
·几何题，由于只有2个矩形，所以按照题意做即可。先分别求两个矩形的面积，加起来再减去两
个矩形重叠的面积。
代码
package leetcode
func computeArea(A int， B int, C int, D int， E int, F int， G int, H int) int {
x0, Y0, x1, Y1 := max(A, E), max(B, F), min(C, G), min(D, H)
return area(A, B, C, D) + area(E, F, G, H) - area(xo, y0, xl, Y1)
func area(x0, y0,x1,yl int) int {
1, h := x1-x0, y1-y0
if 1 =‘0'{//获取-段数字
base, v = 10, int(s[i]-'0′)
for i+l ='0′{
V = v*base + int(s[i+l]-'0')
i++
---
## Page 370
result += v * sign
i++
} else if s[i] ==
sign = 1
i++
} else if s[i] == '-' {
sign = -1
i++
}elseifs[i]=='（'{//把之前计算结果及加减状态压栈，开始新的计算
stack.PushBack(result)
stack.PushBack(sign)
result = 0
sign = 1
i++
}elseifs[i]=='）’{//新的计算结果*前一个加减状态+之前计算结果
result = result*stack.Remove(stack.Back(O).(int) +
stack.Remove(stack.Back()) .(int)
i++
return result
//解法二
func calculatel(s string) int {
stack := []byte{}
for i:= 0;i= 0;index--{
if stack[index]=='（'{
break
tmp = string(stack[index+l :len(stack)])
stack = stack[:index]
res := strconv.Itoa(calculateStr(tmp))
for j := 0; j  0 && s[1en(s)-1] ==*+′&& str[i] =='+{
continue
} else if len(s) > 0 && s[1en(s)-1] =='+ && str[i] =='-′{
s[len(s)-1] =
'_
}else if len(s) > 0 && s[len(s)-1] ==
'&&str[i] =='+’{
continue
}else if len(s) > 0 && s[len(s)-1] =='-'&& str[i] ==*-′{
s[len(s)-1] ='+
}else{
S = append(s, str[i])
str
=string（s)
s = []byte{}
for i：= 0;i<1en(str);i++{
if isDigital(str[i]) {
tmpStr += string(str[i])
}else{
num, _ := strconv.Atoi(tmpStr)
nums = append(nums, num)
tmpStr=
s = append(s, str[i])
if tmpstr !=""{
num, _ := strconv.Atoi (tmpStr)
nums = append(nums, num)
tmpStr = "
res = nums[0]
for i := 0; i < 1en(s); i++ {
if s[i] ==
+（
res += nums[1+1]
}else{
res
== nums[i+1]
fmt.Printf("s = %v nums = %v res = %v\n", string(s), nums, res)
return res
225.ImplementStackusing_Queues
---
## Page 372
题目
Implement the following operations of a stack using queues.
● push(x) -- Push element x onto stack.
● pop() -- Removes the element on top of the stack.
● top() -- Get the top element.
● empty() -- Return whether the stack is empty.
Example:
MyStack stack = new MyStack();
stack.push(1) ;
stack.push(2);
stack.top);
// returns 2
stack.pop();
// returns 2
stack.empty(); // returns false
Note:
● You must use only standard operations of a queue -- which means only push to back,
 peek/pop from front, size, and is empty operations are validl.
e ajenwis Kew nox fjanjeu pajoddns aq ou Kew ananb agenguel nof uo Bupuadag  ●
queue by using a list or dleque (double-ended queue), as long as you use only standlard
operations of a queue.
● You may assume that all operations are valid (for example, no pop or top operations will be
called on an empty stack).
题目大意
题目要求用队列实现一个栈的基本操作：push（x)、pop(、top(、empty0)。
解题思路
按照题目要求实现即可。
代码
package leetcode
type MyStack struct{
enque []int
deque []int
---
## Page 373
/* Initialize your data structure here.*/
func Constructor225C) MyStack {
return MyStack{[]int{}, []int{}}
/ Push element x onto stack.*/
func (this *MyStack) Push(x int) {
this.enque = append(this.enque, x)
/*# Removes the element on top of the stack and returns that element. */
func (this *MyStack) Pop() int {
1ength := 1en(this.enque)
for i := 0; i < 1ength-1; i++ {
this.deque = append(this.deque, this.enque[0])
this.enque = this.enque[1:]
3
topele := this.enque[0]
this.enque = this.deque
this.deque = ni1
return topEle
/Get the top element.*/
func (this *MyStack) Top() int {
topEle := this.Pop()
this.enque = append(this.enque, topEle)
return topEle
/*# Returns whether the stack is empty.*/
func (this *MyStack) EmptyO boo1{
if len(this.enque)
== 0{
return true
return false
226.InvertBinaryTree
题目
Invert a binary tree.
Example:
---
## Page 374
Input:
/
1
36
qndno
63
Trivia:
This problem was inspired by this original tweet by Max Howell:
Google: 90% of our engineers use the software you wrote (Homebrew), but you can't invert
a binary tree on a whiteboard so f*** off.
题目大意
“经典“的反转二叉树的问题。
解题思路
还是用递归来解决，先递归调用反转根节点的左孩子，然后递归调用反转根节点的右孩子，然后左右交
换根节点的左孩子和右孩子。
代码
package leetcode
☆
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
---
## Page 375
*/
func invertTree(root *TreeNode) *TreeNode {
if root == nil {
return ni1
invertTree (root.Left)
invertTree (root.Right)
root.Left, root.Right = root.Right, root.Left
return root
229.Majority_Elementll
题目
sawg I e/u 1l ueu anow jeadde jeui sjuawaja e puy 'u azis jo Aee jaasu ue uai
Note: The algorithm should run in linear time and in O(1) space.
Example 1:
Input: [3,2,3]
[]  :ndno
Example 2:
Input: [1,1, 1,3,3,2,2,2]
output: [1,2]
题目大意
给定一个大小为n的数组，找出其中所有出现超过|n/3】次的元素。说明：要求算法的时间复杂度为
O（n)，空间复杂度为O（1）。
解题思路
·这一题是第169题的加强版。Boyer-Moore MajorityVote algorithm算法的扩展版。
题目要求找出数组中出现次数大于1n/3]次的数。要求空间复杂度为O（1）。简单题。
●这篇文章写的不错，可参考：https://gregable.com/2013/10/majority-vote-algorithm-find-
majority.html
代码
package leetcode
---
## Page 376
//解法一时间复杂度0（n）空间复杂度0（1）
func majorityElement229(nums []int) []int{