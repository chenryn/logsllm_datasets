In current EMV payment systems, the acquirer ID and
the merchant ID ﬁelds are deﬁned by the standard but are
not mandatory for ARQC messages. Through card software
updates it is possible to include these ﬁelds in ARQC messages
of every transaction. The EMV standards allow for remote
update of payment card software through issuer scripts that
may be included in the ARPC cryptogram.
A noteworthy beneﬁt of our solution is that it enables
gradual and secure deployment for selected users. A card
issuer can enable location veriﬁcation for a subset of its
customers, for example, by updating the payment cards of
customers that decide to opt-in. Once location veriﬁcation
10
is enabled for these users, an adversary that has obtained a
payment card of any such user cannot circumvent the system.
In comparison, solutions that require gradual terminal updates
do not provide similar protection, as the adversary can always
bypass the added security mechanisms by utilizing not yet
updated terminals.
B. Deployment Considerations
Even though fraud reduction is a clear incentive for banks
or payment card issuers to adopt our solution, it is the user
adoption that will be the driving factor. The proposed schemes
do not change the user experience at point of sales, but they do
consume internet bandwidth and battery on the user’s device.
Since payment card issuers are currently covering the costs
of frauds, it is an open question whether users would pay the
additional costs in terms of bandwidth and battery on their
mobile devices, without any apparent beneﬁt. To boost the user
adoption, the card issuer may offer lower fees to users who
opt-in, just like car insurance companies do for customers who
install anti-theft mechanisms on their cars.
Our solution assumes the user’s smartphone to have In-
ternet connectivity at the time of a transaction. This may
not hold for two reasons. First, high roaming charges induce
many users to turn Internet access off while traveling abroad.
International regulatory bodies have started to forbid excessive
roaming charges. For example, the EU has recently decided to
completely remove roaming charges within its member coun-
tries by 2015 [35]. A cost-effective alternative to avoid current
roaming charges is to use SMS messages for communication
between the user’s device and the card issuer. SMS-based
communication, can however experience high delays (SMS
message delivery is based on a best-effort basis and can take
up to 12 seconds in normal load conditions [36]). Second,
Internet connectivity might not be available in remote areas or
underground locations (although many underground shopping
centers or transport stations have cellular coverage).
Card issuers can handle lack of connectivity based on
transaction value, merchant location or user speciﬁc policies.
For example, high-value transactions in areas where Internet
connectivity is expected to be available may only be autho-
rized after a successful location veriﬁcation with the user’s
smartphone. A possible solution to handle temporary lack of
connectivity for low-value transactions could be to keep, on
the device, an authenticated log of timestamped locations and
report the one that is closest to the transaction time, once
Internet connectivity is again available. While this solution
does not allow for real-time fraud prevention, it allows card
issuers to perform ofﬂine fraud detection.
C. Privacy Considerations
The card issuer can ask the user’s device for location state-
ments and track the user over time. However, if the protocol
is triggered at times of genuine transactions, our solution does
not leak extra information, since the card-terminal transaction
already reveals the user location to the card issuer. The card
issuer may also abuse the system and query the user’s device
for a location statement when the card is not involved in a
transaction. We argue that the system abuse can be prevented
through precise terms of agreement; card issuers that break
those terms will damage their reputation and lose customers.
Another solution is to let the card issuer send the location
of the point of sale terminal to the device and let the device
compare it against its current location, as done in [3].
With respect to third-parties (i.e., law-enforcement author-
ities), location statements issued by the user’s device can be
denied. Since the (symmetric) service key used to authenticate
location statements is shared with the card issuer, no third-
party can identify who produced a location statement (either
the user’s device or the card issuer). Finally, we remark that an
adversary in control of the mobile OS on the victim’s device
can query the GPS unit at will and track the user, independently
of the solution presented in this paper.
D. Other Application Scenarios
Our protocols can be applied to other application scenarios
beside payments at points of sale. In particular,
they can
be used in any scenario where the verifying party (e.g., a
service provider) knows the user’s phone number and the
location of the infrastructure used to perform transactions.
Two prominent examples are public transportation ticketing
and building access.
In the public transportation scenario the user holds a
transport ticket (e.g., an NFC card) that is used at dedicated
machines to access the transportation network (e.g., at the
entrance of metro stations). Our solution can provide assurance
to the public transportation authority that a lost or stolen
transport ticket is not used by any party but the rightful owner.
Similarly, building access control systems require a user
to carry an access token with a short-range wireless interface.
Entry is granted if the token is presented to a dedicated reader
and the valid PIN is entered by the user. Location statements
can increase the security of such access control systems. Upon
presenting the access token to the reader, the user phone is
queried for its location; if the purported location matches the
one of the reader, the building access authority can grant
access.
As part of our ﬁeld study (described in Section VIII), we
tested completion time and accuracy of our location veriﬁ-
cation protocol in public transportation and building entrance
scenarios. Results are summarized in Table III and Table IV.
Completion time at public transport stations takes 3.03
seconds on average, using a 3G connection, for the device
using Orange, and 3.39 seconds on average for the smartphone
using Sunrise. We argue that three seconds to grant access
to the transportation network may be an undesirable delay.
Nevertheless, our solution could be used for ofﬂine ticket abuse
monitoring. The public transportation authority could disable a
ticket after witnessing a number of consecutive fraudulent uses.
In this scenario, the measured location accuracy (see Table IV)
is around 14 meters on average. In most public transportation
applications this accuracy is sufﬁcient to distinguish entrances
to the transportation network from one another.
We also test the time it takes to run our protocol when
entering buildings in two campuses of ETH Zurich, one in
the city center and the other in the city suburbs. Completion
time takes 2.31 and 4.40 seconds on average, depending on
the network operator used as shown in Table III. The location
Building access Public transport
Orange Sunrise Orange Sunrise
(n=59)
(n=63)
3.39
2.31
0.57
1.33
(n=40)
4.40
1.74
(n=43)
3.03
0.66
average (sec)
std dev (sec)
TABLE III: Completion time for location veriﬁcation for
public transport and building access tests. n denotes the number
of samples in each scenario.
Scenario
avg
max
GPS accuracy (m) GPS ﬁx delay (ms)
avg max min
min
139.31 3087.00 0.00
4.0
6.0
210.52
0.00
4035
Building access 14.04 48.0
Public transport 15.47 48.0
TABLE IV: Location accuracy for public transport and build-
ing access tests.
accuracy in this scenario is around 15 meters, which is enough
to differentiate building doors from each other in most cases.
X. ALTERNATIVE APPROACHES
In this section we discuss alternative ways in which
smartphones could provide a second authentication factor for
payments at points of sale, and conclude that location veriﬁ-
cation provides a practical means for card issuers to identify
fraudulent transactions. We also analyze commonly suggested
enrollment schemes and show how they fail to provide secure
user-to-device binding, given our realistic attacker model.
Finally, we describe alternative TEEs available on current
smartphones and their shortcomings, compared to system-wide
TEEs such as ARM TrustZone.
A. Second-factor Authentication Approaches
In a typical transaction at a point of sale, the user enters
or swipes his payment card into a terminal and optionally
types its PIN code. The card runs a protocol with the terminal
that contacts the card issuer for online transaction veriﬁcation.
Figure 10 illustrates common second-factor authentication ap-
proaches: (1) Authentication token replacement (Figure 10a).
The smartphone acts as a dedicated authentication token and
displays one-time passcodes that the user must type into the
terminal. Google 2-Step Veriﬁcation [5] is a prominent exam-
ple of this approach in the context of web login authentication.
A similar approach can be applied to payments at points of
sale. (2) User conﬁrmation device (Figure 10b). The card issuer
contacts the user’s device which presents a conﬁrmation dialog
to the user. The conﬁrmation result is sent back to the card
issuer. Authentication solutions like this one have already been
deployed for online banking [37]. (3) Distance-veriﬁcation
device (Figure 10c). The user places his smartphone next to the
payment terminal, which starts a distance-veriﬁcation protocol
over a short-range wireless connection, such as NFC [38].
The given approaches require additional user interaction at
the time of the transaction. Changes to established user inter-
action models hinder the introduction of new security mecha-
nisms [12]. Additionally, the majority of point of sale terminals
11
User(
smartphone(
1. read 
passcode 
User(
2. enter 
passcode 
Card(issuer(
payment 
protocol 
Point(of(sale(
terminal(
payment 
protocol 
Payment(card(
User(
smartphone(
1. confirmation 
request 
3. result 
Card(issuer(
User(
smartphone(
2. confirm 
transaction 
User(
payment 
protocol 
1. place 
device 
2. verify 
proximity 
User(
Point(of(sale(
terminal(
payment 
protocol 
Payment(card(
Card(issuer(
payment 
protocol 
Point(of(sale(
terminal(
payment 
protocol 
Payment(card(
(a) Smartphone as an authentication token
replacement: the user reads a passcode off
his smartphone and enters it into the payment
terminal.
(b) Smartphone as a user conﬁrmation de-
vice: the user conﬁrms the transaction using
his smartphone; the devices delivers the user’s
decision to card issuer.
(c) Smartphone as a distance veriﬁcation de-
vice: the user positions the phone next to the
terminal; the terminal veriﬁes the proximity
of the phone over short-range wireless con-
nection (e.g, NFC).
Fig. 10: Common smartphone second-factor authentication approaches applied to payment systems. Solid arrows represent
standard transaction messages, while dashed arrows show additional messages for second-factor authentication.
do not have the required software components for passcode en-
try (Figure 10a) or hardware interfaces for distance-veriﬁcation
(Figure 10c). The replacement of deployed terminals would be
gradual and optional, which allows the adversary to target the
terminals that have not been updated yet.
B. Common Enrollment Solutions
We now explain why commonly suggested enrollment
schemes are not secure or feasible to deploy, assuming an
adversary that controls the mobile OS on the victim’s device.
Device Identiﬁer Enrollment
A simple way to bind a user identity to the device key of
his TEE, is to leverage the device’s IMEI, typically included
in the device certiﬁcate. The IMEI is available on the device’s
package or displayed on-screen. During enrollment, the user
provides the IMEI of his device to the card issuer using a
reliable out-of-band channel, for example, visiting a branch
of the card issuer in person. The card issuer then veriﬁes the
device certiﬁcate with respect to the IMEI provided by the
user.
Communicating the IMEI to the card issuer in a trustworthy
way is more complicated than it seems. Device sales packages
are not always available. Also, if the mobile OS is compro-
mised, the adversary controls the IMEI shown on the device
screen. Additionally, IMEI-based enrollment does not provide
ﬂexible device migration: every time the user changes devices,
he must provide the IMEI of the new device to the card issuer,
using an out-of-band channel.
Password Enrollment
The user-to-device binding can also be implemented by
asking the user to enter a password or a similar initialization
secret, known by the card issuer, in his device. A trusted
application can authenticate itself to the card issuer, using the
certiﬁed device key and the user-provided password.
The user should type in the password only when a trusted
application can securely receive it. The compromised mobile
OS can otherwise intercept and forward the password to the
adversary, who can then launch an impoersonation attack. A
reliable communication interface from the user to a trusted
application is called trusted path [39], [40]. The device hard-
ware and software resources used for user interaction (e.g.,
the display buffer or the touchscreen input events) can be
temporarily reserved for system-wide TEEs such as ARM
TrustZone. A security indicator, such as a colored bar on
the top of the screen [41] or a dedicated LED [42] can be
used to inform the user about the type of application he is
communicating with (trusted or untrusted). However, current
smartphones do not support this division of user interface
resources, nor do they provide dedicated security indicators.
Furthermore, several academic studies, and a few decades of
practical experience, have shown that users tend to ignore
security indicators [43], [44], [45].
Previous work assumes that password-based enrollment is
secure if the enrollment is done early in the device life cycle,
before the adversary has the opportunity to compromise the
mobile OS [14], [46]. This assumption is hard to justify since
not every service enrollment happens at the beginning of a
device life time.
SMS Enrollment
If the user provides his phone number during registration,
the card issuer can send an SMS message that will be received
by the device in which the user’s SIM card is installed.
Similarly to our solution, the SMS message could carry an
initialization secret to bootstrap security services. The problem
with this approach is that SMS messages provide a trustworthy
channel to the the baseband OS of the device where the SIM
card is installed, but not to the secure world on that device.
In current mobile device architectures, the baseband OS is
accessible by both the mobile OS in the normal word and by
the trusted applications running in the secure world. Therefore,
12
Service'
provider'
password 
User'
Mobile device 
Normal world (NW) 
Secure world 
(SW) 
SMS 
message 
Mobile'OS'
Trusted'OS'
Baseband'OS'
password 
'Applica4on'processor''
'Baseband'
processor''
Touchscreen'
peripheral'
Fig. 11: Commonly suggested user enrollment schemes. Solid
arrows illustrate trustworthy communication channels. Dashed
arrows illustrate communication channels in which one of the
end points can be either the normal world or the secure world.
when the baseband OS receives an SMS message, it notiﬁes the
mobile OS, which can read any initialization secret and leak
it to the attacker. Assuming a mobile device architecture in
which the baseband OS interacts only with the secure world
is not feasible, as the mobile OS needs to interact with the