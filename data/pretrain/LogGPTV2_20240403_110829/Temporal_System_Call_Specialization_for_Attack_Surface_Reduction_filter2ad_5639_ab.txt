phase. As this function contains a call to the execve system
call, the overapproximation would prevent it from being re-
moved in the serving phase. Similarly, the lack of context
sensitivity and path sensitivity causes overapproximation in
the number of possible targets for all indirect call sites, even
if they are not optional callback functions guarded by NULL
checks. A more detailed discussion on overapproximation in
points-to analysis is available in Appendix A.
To reduce the overapproximation that the lack of context
and path sensitivity introduces in our analysis, and conse-
quently increase the number of system calls that can be re-
moved in the serving phase, we implemented two ﬁltering
schemes that prune spurious call edges based on argument
types and taken addresses.
4.2.2 Pruning Based on Argument Types
A naive implementation of Andersen’s points-to analysis al-
gorithm does not consider any semantics regarding the type
of pointers while solving the constraint graph. For example,
SVF’s implementation of Andersen’s algorithm considers the
number of arguments, but not their types, when solving indi-
rect call sites. Due to the lack of context sensitivity and path
sensitivity, the results of the points-to analysis often contain
imprecision in the form of pointers of one type pointing to
memory objects of a different type.
Similarly, when resolving targets for indirect function calls,
the results of the points-to analysis often contain functions
whose types of arguments do not match those of the call
site. For example, in the imprecise call graph of Apache
Httpd shown in Figure 3, the guarded indirect call site in
function other_child_cleanup has two possible targets,
piped_log_maintenance and event_run, despite the fact
that only the former matches the types of arguments of the
guarded call site.
We have mitigated this problem by checking every indi-
rect call site and pruning any call edges to functions with
arguments whose types do not match those of the call site.
To maintain soundness, when pruning based on argument
types, we consider only arguments of struct type, as primi-
tive types may have a mismatch due to reasons such as integer
promotion. This simple mechanism is extremely effective in
reducing the number of edges in our ﬁnal call graph. Indica-
tively, for Nginx, it reduces the number of edges by 70%.
4.2.3 Pruning Based on Taken Addresses
Andersen’s algorithm considers all functions in the program
to be reachable from its entry point. We observed that this
leads to an imprecision in the results of the resolution of
indirect call sites, with the result set containing functions that
are not accessible from main at all.
A function can be the target of an indirect call site only if
its address is taken (and stored in a variable) at some point
in the program. Consequently, if the address of a function is
taken at some point in the program that is unreachable from
main, it can never be a target of an indirect call.
Based on this intuition, we prune further the (still) overap-
proximated graph generated from the previous argument type
based pruning step by ﬁrst identifying all functions whose
addresses are taken along any path that is accessible from the
main function. This gives us all possible functions that can
actually be targets of indirect calls. Using this list of potential
address-taken functions, we visit each indirect call site in the
program and prune all edges towards targets that do not have
their address taken along any valid path.
Going back to the example of Figure 3, the address of
piped_log_mnt is stored in a function pointer within the
function start_module, but start_module is not reachable
from the entry point of Apache Httpd. On the other hand, the
function other_child_cleanup contains a guarded indirect
call site, which ﬁrst checks if that function pointer is not NULL,
in which case then dereferences it to invoke the target function.
At run time, this NULL check will always return false, and this
indirect call site is never executed.
USENIX Association
29th USENIX Security Symposium    1753
Figure 3: The effect of pruning based on argument types and taken addresses on generating a precise call graph.
Path-insensitive points-to analysis cannot determine
whether the guard NULL check will fail or not. However, as
we prune indirect call sites based on address-taken functions,
and given that the address of piped_log_mnt is never taken
along any reachable path from main, we can correctly infer
that this guarded indirect call site does not have any valid
targets, and will be skipped at run time.
4.3 Mapping System Call Invocations to the
Application Call Graph
System calls are typically invoked through the Libc library,
which provides corresponding wrapper functions (e.g., the
write Libc function invokes the SYS_write system call). We
map each exported Libc function to its relevant system call by
ﬁrst generating the call graph of the entire library, and then
augmenting it with information about the system calls of each
function as “leaves” on the generated call graph [22].
In addition to using Libc wrappers, applications and
libraries can also invoke system calls directly using
the syscall() glibc function or the syscall assembly
instruction—we handle both of these cases as well. Finally,
we combine the Libc call graph with the call graphs of the
main application and all its dependent libraries. Using the
resulting uniﬁed graph, we extract the set of system calls re-
quired by the application for the initialization phase, and then
for the serving phase, and identify the system calls that are
not needed in the latter. We then use Seccomp to apply the
respective ﬁlters at the beginning of the serving phase.
to statically analyze the code of the target application. Be-
cause Glibc does not compile with LLVM, we use the GCC
toolchain for the compilation and analysis of Glibc.
5.1 Constructing a Sound Call Graph
Our goal is to identify the functions that may be invoked
during the initialization and serving phases. To that end, the
ﬁrst step is to construct a sound and precise call graph for the
whole application. Accurate points-to analysis for resolving
the targets of indirect call sites is the most critical part of
this process. We use SVF’s [55, 56] implementation of the
Andersen’s points-to analysis algorithm [14]. SVF operates
on the LLVM intermediate representation (IR), so we ﬁrst
lower the C source code into the LLVM IR format using
the clang compiler and by applying link-time optimization
(LTO). We then run SVF on this generated bitcode.
As we discussed in Section 4.2, SVF’s implementation
of Andersen’s algorithm is ﬁeld sensitive, but not context
sensitive or path sensitive, leading to signiﬁcant imprecision.
We also observed that in some cases, the lack of context and
array index sensitivity causes objects to lose ﬁeld sensitivity.
We provide more details on this subtle issue in Appendix A.
Solving these imprecision problems would fundamentally
require implementing a context-sensitive, path-sensitive, and
array-index-sensitive analysis, which increases the complex-
ity of the points-to algorithm, and also requires signiﬁcant
programming effort. Instead, we implemented an alternative
lightweight solution that simply prunes call edges in the call
graph that are provably added as a result of imprecision.
5 Implementation
5.1.1 Pruning Based on Argument Types
In this section, we describe the implementation details of
our framework for temporal system call specialization. Our
framework currently supports server applications written in C.
Although we currently support only Linux libraries and appli-
cations, the concept can easily be applied to other operating
systems as well. We use the LLVM [3] compiler toolchain
SVF begins by iterating over all instructions in the IR bitcode,
collecting constraints along the way, and adding them to the
constraint graph. Then, it iterates over all constraints and
solves each of them. At the end of each iteration, it checks
if it can successfully ﬁnd a new target for an indirect call
site. For any new target found, it ﬁrst checks if the number of
1754    29th USENIX Security Symposium
USENIX Association
main()other_child_cleanup()child()start_module()default_cleanup()SYS_closeStore &piped_log_mnt() in a function pointer*Guarded Indirect Call Site(*gic)(intr, void *d, apr_wait_ts)*piped_log_mnt(intp, void *m, apr_wait_ta)event_run(apr_pool* p, apr_pool* pl, serv_rec* s)**Imprecise Call GraphAfterArgument Type-based PruningAfterAddress-taken PruningSimplified Snippet of Apache HttpdCall GraphØGuard returns false at run-timepiped_log_mnt(intp, void *m, apr_wait_ta)piped_log_mnt()SYS_execvearguments in the call site matches the number of arguments
in the target function. In case they match (and the target func-
tion is not a variadic function), the analysis adds the target
function as a possible target of the indirect call site. Then,
it begins a new iteration to solve any additional constraints
due to the newly discovered target function. As discussed in
Section 4.2.2, this results in the inclusion of targets with the
same number of arguments, but completely unrelated argu-
ment types. We modiﬁed SVF to take the argument type into
account and only add functions as possible targets when the
argument types match.
5.1.2 Pruning Based on Taken Addresses
One of the downsides of using path-insensitive and context-
insensitive pointer analysis is that it cannot consider the state
of the program when solving the points-to set constraints. In
particular, as discussed in Section 4.2.3, if an indirect function
call is guarded by a NULL check on a function pointer, and
the function pointer is not initialized in any function that is
reachable from the program’s entry point, then the call will
be skipped at run time. This is especially useful for modular
programs, where initializing a module causes the address of
one or multiple functions to be taken, and any housekeeping
tasks related to that module are performed after doing the
not-NULL check on their relevant function pointers. However,
due to the imprecision of SVF’s static analysis, its results
include spurious targets for these guarded indirect call sites.
Using the call graph generated after argument type prun-
ing, we record all functions whose addresses are stored into
function pointers. A function’s address can be stored into
a pointer in three ways: i) by a direct store to a pointer, ii)
when passed as an argument to another function, or iii) as part
of the initialization of a constant global variable. We imple-
mented an LLVM IR pass to extract functions that have their
addresses taken via any of these cases. It traverses the call
graph in a depth-ﬁrst manner, starting at the main function,
and analyzes every LoadInst IR instruction to check if the
address of a function is being loaded from memory. To track
functions passed as arguments to other functions, it iterates
over every IR Value passed as an argument at a call site,
and checks if it corresponds to a function. Finally, it iterates
over all constant GlobalVariable objects in the IR to track
whether a function is part of their initialized values. Based on
the resulting set of address-taken functions, we remove any
spurious targets at each indirect call site, while retaining all
direct call sites without any modiﬁcations.
Algorithm 1 summarizes the steps for both types of pruning
based on argument types and taken addresses, which result in
a much more precise call graph than the one provided by SVF.
Once the ﬁnal call graph is derived, the next and ﬁnal step is
to identify the system call invocations performed during the
initialization phase and the serving phase.
Algorithm 1: Generation of Precise Call Graph
Input: LLVM IR bitcode for the target application
Output: precise_cg: precise application call graph
1 Run SVF’s Andersen points-to analysis to get the
(overapproximated) call graph cg;
2 /* Perform argument-type pruning */
3 foreach Indirect-callsite ic in cg do
foreach Target t of ic in cg do
4
5
if Argument types of t does not match that of ic
then
Prune target t for ic;
foreach Address-taken function f _addr_tk in f do
end
end
reachable_ f unctions ∪ { f unc};
6
7
8
9 end
10 addr_taken_ f n_set ← /0;
11 reachable_ f unctions ← /0;
12 /* Collect address-taken functions */
13 Traverse cg depth-ﬁrst, starting from main;
14 foreach Reachable function f unc from main do
15
16 end
17 foreach Function f in reachable_ f unctions do
18
19
20
21 end
22 /* Perform address-taken pruning */
23 foreach Indirect-callsite ic in cg do
foreach Target t of ic in cg do
24
25
26
27
28
29 end
30 precise_cg ← cg;
addr_taken_ f n_set ∪ { f _addr_tk};
if t /∈ addr_taken_ f n_set then
Prune target t for ic;
end
end
end
5.2 Pinpointing System Call Invocations
System calls are typically invoked through library function
calls implemented in the standard C library—the most com-
mon implementation of which is glibc. Since glibc cannot
be compiled with LLVM, we do not use points-to analysis to
generate the call graph and rely on a more overapproximated
mechanism, which considers any function having its address
taken as a potential target of any indirect call site in its own
module. This is only performed once to generate the glibc
call graph, and is then used for all applications.
We implemented an analysis pass written in GCC’s RTL
(Register Transfer Language) intermediate representation to
extract the call graph and system call information from glibc.
Our analysis pass ﬁrst builds the call graph using the Egypt
tool [24], which operates on GCC’s RTL IR. Then, the anal-
USENIX Association
29th USENIX Security Symposium    1755
ysis pass iterates over every call instruction in the IR and
records any inline assembly code containing the native x86-
64 syscall instruction. These are then added as the “leaves”
of the functions in the call graph.
In addition to making direct system calls via inline-
system calls via wrap-
assembly, glibc also makes
per macros such as T_PSEUDO, T_PSEUDO_ERRNO, and
T_PSEUDO_ERRVAL. We identify these wrappers and add the
system calls invoked through them to the call graph.
Glibc also uses weak symbols and versioned symbols
to support symbol versioning. Both weak_alias and
versioned_symbol provide aliases for functions. We stat-
ically analyze the source code to collect all such aliases, and
add them to the call graph. In this way we can map Glibc
function calls to system calls.
System calls can also be invoked directly by the application
through the syscall() glibc function, inline-assembly, or
the use of assembly ﬁles. We analyze the IR bitcode of the
application for invocations of the syscall() function, and
add the corresponding syscall number information to the call
graph. To track the directly invoked system calls in inline
assembly, we analyze the LLVM IR for InlineAsm blocks.
If an InlineAsm block contains the syscall instruction, we
extract the system call number and add it to the functions that
call the inline assembly block.
To scan assembly ﬁles for syscall instructions, we de-
veloped a tool that extracts the corresponding system call
number. In 64-bit systems, the syscall instruction reads the
system call number from the RAX register. Starting from
every syscall instruction, we perform backwards slicing
to identify the initialization point of RAX with the system
call number. The process continues tracing backwards in the
assembly code to ﬁnd the value (or set of values) that RAX
can take at runtime. While glibc does use inline assembly,
we did not encounter any custom assembly-level system call
invocations in the set of applications we evaluated.
Once we have mapped the Glibc interface to system calls,
and have extracted the direct system calls, we combine this
information with the previously generated precise call graph,
to obtain the list of system calls required by the initialization
phase and the serving phase.
Installing Seccomp Filters
5.3
Finally, we create and apply Seccomp ﬁlters that disable the
unneeded system calls at the transition boundary from the
initialization to the serving phase. We use the prctl system
call to install the Seccomp ﬁlters. We currently require man-
ual intervention to install the Seccomp ﬁlters, but this can be
easily automated as part of the compilation process. Seccomp
ﬁlters are expressed as BPF programs, and once installed,
they cannot be modiﬁed. However, if the prctl system call is
not blocked, then it is possible to install new Seccomp ﬁlters.
When two installed BPF programs contradict each other, the
least permissive of the two takes precedence. Therefore, once
a system call is prohibited, the attacker cannot remove it from
the deny list. For example, if invoking execve is prohibited,
and an attacker is able to install another BPF program that al-
lows it, the deny list will have priority and execve will remain
blocked. Furthermore, an installed Seccomp ﬁlter cannot be
uninstalled without killing the process it has been applied to.
As an additional safeguard, the invocation of the prctl and
seccomp system calls is prohibited as part of our Seccomp
ﬁltering at the beginning of the serving phase, if the applica-
tion no longer needs them. This means that an attacker cannot
install any new ﬁlters at all once the serving phase begins.
6 Experimental Evaluation
The main focus of our experimental evaluation lies on as-
sessing the additional attack surface reduction achieved by
temporal specialization compared to library specialization
techniques, and evaluating its security beneﬁts. For all experi-
ments, we used a set of six very popular server applications:
Nginx, Apache Httpd, Lighttpd, Bind, Memcached, and Redis.
Existing library specialization techniques [12, 51] only re-
move unused code, and do not actually perform any kernel-
backed system call ﬁltering (e.g., using Seccomp). That is,
although the Libc functions corresponding to some system
calls may be removed, the attacker is still able to directly
invoke those system calls, e.g., as part of injected shellcode
or a code reuse payload. Still, such a capability is relatively
easy to implement once the unused Libc functions have been
identiﬁed. In fact, for our evaluation purposes, we developed
our own library specialization tool, similar to piecewise com-
pilation [51], and on top of it implemented the capability
of applying Seccomp ﬁlters to actually block the execution
of system calls that correspond to removed Libc functions
(unless they are also invoked directly by other parts of the
application, in which case they cannot be disabled). Piecewise
compilation leverages the SVF [55] tool to perform points-
to analysis and generate the call graph for each library. Our
custom library specialization tool also uses SVF to create call
graphs for each library and further extends them to extract the
list of system calls required for each application.
For our security evaluation, we explore two aspects of the
protection offered by temporal specialization. First, we eval-
uate its effectiveness in blocking exploit code using a large
set of shellcode and ROP payload samples. To account for
potential evasion attempts using alternative system call com-
binations, we also exhaustively generate all possible variants
of each sample. Second, given that system calls are the gate-
way to exploiting kernel vulnerabilities, we also look into the
number of Linux kernel CVEs that are neutralized once the
relevant system calls have been blocked.
We also validated the correctness of our implementation by
applying temporal specialization and running each application
with various workloads. For each application, we performed
1756    29th USENIX Security Symposium
USENIX Association
Table 1: “Argument type” and “address taken” pruning reduce
the number of spurious edges on the call graph signiﬁcantly.
Table 2: Breakdown of the time (in minutes) required for each
step of our analysis.
Application
Nginx
Apache Httpd
Lighttpd