On ARM,
Controller (GIC). The GIC is divided into two parts,
the
distributor, and a CPU interface for every CPU core [3]. Every
interrupt-generating device is connected to the distributor of
the GIC (
) schedules between CPU
interfaces according to the interrupt’s afﬁnity mask.
). The distributor (
When a CPU interface receives an interrupt, it signals
it to the corresponding CPU core (
). The core reads the
interrupt number from the interrupt acknowledge register to
acknowledge it. If the interrupt was sent to multiple CPU
interfaces, all other CPU cores receive a spurious interrupt,
as there is no more pending interrupt.
When receiving an interrupt, the CPU ﬁnishes executing
the current instruction, switches to IRQ mode, and jumps to the
). The IVT
IRQ entry of the Interrupt Vector Table (IVT) (
contains exactly one instruction to jump to a handler function
(
). In this handler function, the OS branches to the Interrupt
Service Routine (ISR) corresponding to the interrupt number
(
).
When the CPU is done servicing the interrupt, it writes the
) to signal
interrupt number to the End Of Interrupt register (
that it is ready to receive this interrupt again [2].
B. Microarchitectural Attacks
CPU caches are a small and fast type of memory, buffering
frequently used data to speed-up subsequent accesses. There
are typically three levels of caches in modern x86 CPUs, and
two levels in modern ARM CPUs. The last-level cache is
typically shared across cores of the same CPU, which makes
it a target for cross-core side-channel attacks. On Intel x86
CPUs, the last-level cache is divided into one slice per core.
The smallest unit managed by a cache is a cache line (typically
64 B). Modern caches are set-associative, i.e., multiple cache
lines are considered a set of equivalent storage locations. A
memory location maps to a cache set and slice based on the
physical address [20], [34], [59].
3
HardwareGICDistributorCore#0interfaceCore#1interface21Core#0Core#13IVT45InterruptHandlerISR67561234567Keystroke Timing from Software. A direct software
side channel for keystroke timings is provided through OS
interfaces, such as instruction pointer and stack pointer in-
formation leaked through /proc/stat, and interrupt statis-
tics leaked through /proc/interrupts [60]. As the in-
struction pointer and stack pointer information became too
unpredictable, Jana and Shmatikov [23] showed that CPU
usage yields much more reliable information on keystroke
timings. Diao et al. [10] demonstrated high-precision keystroke
timing attacks based on /proc/interrupts. However,
these attacks are not possible anymore in Android O [14],
[25], as access to these resources has been restricted.
Vila et al. [53] recovered keystroke timings from timing
differences caused by the event queue in the Chrome browser.
Based on the native attack we present
in Section III-B,
Lipp et al. [29] implemented the same attack in JavaScript.
They recovered keystroke timings and identiﬁed user-typed
URLs. They also showed that users can be distinguished based
on this attack.
Gruss et al. [17] demonstrated that Flush+Reload allows
distinguishing speciﬁc keys or groups of keys based on key-
dependent data accesses in shared libraries. Ristenpart et al.
[46] demonstrated a keystroke timing attack using Prime+
Probe with a false-negative rate of 5 % while measuring 0.3
false positive keystrokes per second. Pessl et al. [43] showed
that it is possible to use DRAM attacks to monitor keystrokes,
e.g., in the address bar of Firefox. However, this attack only
works if the target application performs a massive amount of
memory accesses to thrash the cache reliably on its own.
III. KEYSTROKE TIMING ATTACKS & DEFENSES
Due to the amount of code executed for every keystroke,
there are many different side channels for keystroke timings. In
this section, we introduce our two novel attacks and compare
them to state-of-the-art keystroke timing attack vectors, in
order to understand the requirements for effective countermea-
sures. Finally, we derive three requirements for countermea-
sures to be effective against keystroke timing attacks.
The requirements are deﬁned based on precision and recall
of side-channel attacks. The precision is the fraction of true
positive detected keystrokes in all detected keystrokes. If
the precision is low, the side channel yields too many false
positives to derive the correct keystroke timings. The recall
is the fraction of true positive detected keystrokes in all real
keystrokes. If the recall is low, i.e., the side channel misses
too many true positives, inter-keystroke timings are corrupted
too. A standard measure of accuracy is the F-score, i.e., the
geometric mean of precision and recall. An F-score of 1
describes a perfect side channel. An F-score of 0 describes
that a side channel provides no information at all.
Note that there is only a limited number of keystroke
time frames that can be reliably distinguished by an attacker,
due to the typing speed and the variance of inter-keystroke
timing (cf. Section II-C). A keystroke timing attack providing
nanosecond-accurate timestamps is actually only providing the
binary information in which time frames a keystroke occurred.
Hence, we can compare side-channel-based classiﬁers to bi-
nary decision classiﬁers for these time frames.
TABLE I.
STATE-OF-THE-ART SOFTWARE-BASED KEYSTROKE
TIMING ATTACKS AND THEIR TARGETS.
Interface-based
Timing-based
Flush+Reload
Prime+Probe on L1
Prime+Probe on LLC
DRAMA
Kernel
 [10], [23], [60]
 ours

 [46]
 ours

Shared library


 [17]
 [46]
 ours

User process



 [46]
 ours
 [43]
An always-zero oracle which never detects any event has
an F-score of 0. An always-one oracle which “detects” an
event in every possible time frame, i.e., a large number of
false positives, no false negatives, and no true negatives, is a
channel which provides zero information. Similarly, a random-
guessing oracle, which decides for every possible time frame
whether it “detects” an event based on an apriori probability,
also provides zero information. For 8 keystrokes and 100
possible time frames per second, the F-score for the always-
one oracle is 0.15 which is strictly better than the F-score
of the random-guessing oracle (0.14). An attacker relying on
any side-channel-based classiﬁer with a lower F-score could
achieve better results by simply using an always-one oracle,
i.e., in such a case it would not make sense to use the side-
channel-based classiﬁer in the ﬁrst place. In the remainder of
the paper, we assume that an attacker wants to ﬁnd the real 8
keystrokes in 100 possible time frames per second.
This attack model does not have the concept of processes
or windows. Indeed,
this is an accurate representation, as
side-channel attacks on keystroke timings are system-wide
attacks on shared code, cache sets, or other shared parts of the
microarchitecture. This makes them very powerful but also
provides us a means to defeat them, i.e., an attacker cannot
distinguish real keyboard input in one process or window from
fake keyboard input in another process or window.
A. Keystroke Timing Attack Surface
Keystroke processing involves computations on all levels of
the software stack. Hence, targeted solutions like Cloak cannot
provide complete protection in this case [15]. The keyboard
interrupt is handled by one of the CPU cores, which interrupts
the currently executed thread. A signiﬁcant amount of code
is executed in the operating system kernel and the keyboard
driver until the preprocessed keystroke event is handed over to
a user space shared library that is part of the user interface.
The shared library distributes the keystroke event to all user
interface elements listening for the event. Finally, the shared
library hands over the keyboard input
to the active user
space process which further processes the input, e.g., store
a password character in a buffer. This abundance of code and
data that is executed and accessed upon a keystroke provides
a multitude of possibilities to measure keystroke timings.
B. New Attack Vectors
Software side channels through procfs interfaces can be
mitigated by restricting access to them [10], [60]. However,
such restrictions do not prevent keystroke timing attacks. We
demonstrate two new attacks to infer keystroke timings: the
ﬁrst one exploits interrupt timings to detect keystrokes, and the
second one relies on Prime+Probe to attack a kernel module.
Table I compares the novel attacks we describe in the following
4
Algorithm 1: Recording interrupt timing
for i ∈ {1, . . . , N} do
tsc[i] ← rdtsc();
if tsc[i] − tsc[i − 1] > threshold then
events[i] ← tsc[i];
diﬀ [i] ← tsc[i] − tsc[i − 1];
Fig. 4. Multi-Prime+Probe attack on password input. Keystrokes cause higher
activity in more cache sets. Background color illustrates the keystroke ground
truth.
In our attack, we targeted the laptop keyboard of a Lenovo
ThinkPad T460s (i.e., a PS/2 keyboard), and touchscreens of
multiple smartphones (cf. Appendix). The attack might not
work on USB keyboards, as they are typically conﬁgured for
polling instead of interrupts. However, the defense mechanism
we present in Section IV protects USB keyboards as well.
A preliminary version of our attack was the basis for an
implementation without rdtsc in JavaScript embedded in
websites [29]. The authors used this attack to detect the URL
typed by the user with a high accuracy and even distinguish
different users typing on the same machine. Showing that the
attack even works in this much more constrained environment
underlines the practicality of our attack. It is not inﬂuenced by
foreground, background, or sandboxed operation.
Multi-Prime+Probe Attack on the Kernel. Our second
attack relies on Prime+Probe to attack the keyboard interrupt
handler within the kernel. More speciﬁcally, we target the code
in the keyboard interrupt handler that is executed each time a
key is pressed. Thereby, keystroke events can be inferred by
observing cache activity in the cache set used by the keyboard
interrupt handler.
To ﬁnd the cache sets that are accessed by the keyboard
interrupt handler, we ﬁrst need to ﬁnd the physical addresses
where the code is located. We can use the TSX-based side
channel by Jang et al. [24] to locate the code within the kernel.
Kernel Address-Space-Layout Randomization was not enabled
by default until Ubuntu 16.10. Thus, an attacker can also
just use known physical addresses from an attacker-controlled
system.
To reduce the inﬂuence of system noise, we developed a
new form of Prime+Probe attack called Multi-Prime+Probe.
Multi-Prime+Probe combines the information from multiple
simultaneous Prime+Probe attacks on different addresses. Fig-
ure 4 shows the result of such a Multi-Prime+Probe attack on
the keyboard interrupt handler. In a post-processing step, we
smoothed the Multi-Prime+Probe trace with a 500 µs sliding
window. The keystroke events cause higher activity in the
targeted cache sets and thus produce clearly recognizable peaks
for every key event. Despite doubts that such an attack can be
mounted [16], our attack is the ﬁrst highly accurate keystroke
timing attack based on Prime+Probe on the last-level cache.
More speciﬁcally, we achieve a precision of 0.71 and a recall
of 0.92, resulting in an F-score of 0.81, which is signiﬁcantly
better than state-of-the-art Prime+Probe attacks.
Fig. 3. Measured delta between continuous rdtsc calls while entering a
password. Keystroke events interrupt the attacker and thus cause higher deltas.
Background color illustrates the keystroke ground truth. Periodic interrupts at
1.025 and 1.049 have a different interruption time.
with the state-of-the-art attack vectors (cf. Section II-C) in
terms of attack techniques and the exploited attack surface.
Low-Requirement Interrupt Timing Attack. We propose
a new timing-based attack that only requires unprivileged sand-
boxed code execution on the targeted platform and an accurate
timing source, e.g., the rdtsc instruction or a counter thread.
The basic idea is to monitor differences in the execution
time of acquiring high-precision time stamps, e.g., the rdtsc
instruction, as outlined in Algorithm 1. While small differences
between successive time stamps allow us to infer the CPU
utilization, larger differences indicate that the measurement
process was interrupted. In particular, I/O events like keyboard
interrupts lead to clearly visible peaks in the execution time,
due to the interaction of the keyboard ISR with hardware and
the subsequent processing of keystrokes. Modern operating
systems have core afﬁnities for interrupts, which generally do
not change until the system is rebooted, and core afﬁnities for
threads. Hence, once a thread runs on the core for the keyboard
interrupt, it will continuously be interrupted by every keyboard
interrupt, making this attack surprisingly reliable. By starting
multiple threads an attacker can ﬁrst run on all cores and after
detecting which thread receives keyboard interrupts, terminate
all threads but the one that is running on the right core.
Note that this attack does not beneﬁt at all from attacker
process and victim process running on the same core. The
keyboard interrupt is scheduled based on its core afﬁnity and
not based on the core afﬁnity of any victim thread. Hence, the
attack works best if the attacker has a lot of computation time
on the interrupt-handling core, but not the victim core.
Figure 3 illustrates these observations in a timing trace
recorded while the user was typing a password. The bars
indicate actual keystroke events, which almost perfectly match
certain measurement points. Based on this plot, we can clearly
distinguish keyboard interrupts (around 60 000 cycles) from
other interrupts. For example, rescheduling interrupts can be
observed with a difference of about 155 000 cycles. In this
attack, we achieve a precision of 0.89 and a recall of 1,
resulting in an F-score of 0.94, which means a signiﬁcant
advantage over an always-one oracle of +537.4 %.
5
1.011.021.031.041.05·10110100k200kg\ndi13sxamn2\nTime[cycles]Delta[cycles]00.511.522.5·1010024Runtime[cycles]ActivecachesetsC. Requirements for Elimination of Keystroke Timing Attacks
As demonstrated in the previous section, we are able to
craft new attacks with fewer requirements than state-of-the-
art attacks. Hence, countermeasures against keystroke timing
attacks must be designed in a generic way, in all affected layers
of the software stack, covering known and unknown attacks.
Attack Model. We assume that an attacker can run an
unprivileged program on the target machine, with a recently
updated system. As sensor-based attacks [7] are already ad-
dressed in [48], and Android O [14], [25] also mitigates various