EUI-64 address – A 64-bit link-layer address that is used as a basis for an IPv6 interface identifier. 
Extended Unique Identifier – A link-layer address defined by the Institute of Electrical and Electronics 
Engineers (IEEE). 
global unicast address – An IPv6 unicast address that is globally routable and reachable on the IPv6 
portion of the Internet. IPv6 global addresses are equivalent to public IPv4 addresses. 
IEEE –  Institute of Electrical and Electronics Engineers. 
IEEE 802 address – A 48-bit link-layer address defined by the IEEE. Ethernet and Token Ring network 
adapters use IEEE 802 addresses. 
IEEE EUI-64 address – See EUI-64 address. 
illegal address – A duplicate address that conflicts with a public IPv4 address that the ICANN has 
already assigned to another organization.  
link-local address – A local-use address with the prefix of FE80::/64 and whose scope is the local link. 
Nodes use link-local addresses to communicate with neighboring nodes on the same link. Link-local 
addresses are equivalent to Automatic Private IP Addressing (APIPA) IPv4 addresses. 
loopback address – For IPv4, the address 127.0.0.1. For IPv6, the address 0:0:0:0:0:0:0:1 (or ::1). 
Nodes use the loopback address to send packets to themselves. 
multicast address – An address that identifies zero or multiple interfaces and is used to deliver packets 
from one source to many destinations. With the appropriate multicast routing topology, packets 
addressed to a multicast address are delivered to all interfaces identified by the address. 
prefix length notation – The practice of expressing address prefixes as StartingAddress/PrefixLength, in 
which PrefixLength is the number of high-order bits in the address that are fixed.  
private addresses – IPv4 addresses that organizations use for private intranet addressing within one of 
the following address prefixes: 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16.  
public addresses – IPv4 addresses that are assigned by the ICANN and that are guaranteed to be 
globally unique and reachable on the IPv4 Internet.  
site-local address – A local-use IPv6 address identified by the prefix FEC0::/10. The scope of a site-
local address is a site. Site-local addresses are equivalent to the IPv4 private address space. Site-local 
addresses are not reachable from other sites, and routers must not forward site-local traffic outside the 
site. 
solicited-node multicast address – An IPv6 multicast address that nodes use to resolve addresses. The 
solicited-node multicast address is constructed from the prefix FF02::1:FF00:0/104 and the last 24 bits 
Chapter 3 – IP Addressing 
TCP/IP Fundamentals for Microsoft Windows  
Page: 88 
of a unicast IPv6 address. The solicited-node multicast address acts as a pseudo-unicast address to 
efficiently resolve addresses on IPv6 links. 
subnet mask – The expression of the length of an address prefix for IPv4 address ranges in dotted 
decimal notation. For example, the address prefix 131.107.0.0/16 in subnet mask notation is 
131.107.0.0, 255.255.0.0. 
unicast address – An address that identifies a single interface and is used for delivering packets from 
one source to a single destination. With the appropriate unicast routing topology, packets addressed to 
a unicast address are delivered to a single interface.  
unspecified address – For IPv4, the address 0.0.0.0. For IPv6, the address 0:0:0:0:0:0:0:0 (or ::). The 
unspecified address indicates the absence of an address. 
zone ID – An integer that specifies the zone of the destination for IPv6 traffic. In the Ping, Tracert, and 
Pathping commands, the syntax for specifying a zone ID is IPv6Address%ZoneID. Typically, the 
ZoneID value for link-local addresses is equal to the interface index. For site-local addresses, ZoneID is 
equal to the site number. The ZoneID parameter is not needed when the destination is a global address 
and when multiple sites are not being used. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 89 
Chapter 4 – Subnetting 
Abstract 
This chapter describes the details of subnetting for both IPv4 and IPv6 address prefixes. Network administrators need 
to thoroughly understand subnetting techniques for both types of address prefixes to efficiently allocate and administer 
the unicast address spaces assigned and used on private intranets. This chapter includes detailed discussions of 
different subnetting techniques for IPv4 and IPv6 address prefixes. By using these techniques, you can determine 
subnetted address prefixes and, for IPv4, the range of usable IPv4 addresses for each new subnetted address prefix. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 90 
Chapter Objectives 
After completing this chapter, you will be able to: 
Determine the subnet prefix of an IPv4 address when expressed in prefix length or subnet mask 
notation. 
Determine how many IPv4 host ID bits you need to create a particular number of subnets. 
Subnet an IPv4 address prefix within an octet and across octet boundaries, enumerating the list of 
subnetted address prefixes and the ranges of valid IPv4 addresses for each subnetted address prefix. 
Define variable length subnetting and how you can use it to create subnetted address prefixes that 
match the number of hosts on a particular subnet. 
Subnet a global IPv6 address prefix, enumerating the list of subnetted address prefixes. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 91 
Subnetting for IPv4 
Subnetting is a set of techniques that you can use to efficiently divide the address space of a unicast 
address prefix for allocation among the subnets of an organization network. The fixed portion of a 
unicast address prefix includes the bits up to and including the prefix length that have a defined value. 
The variable portion of a unicast address prefix includes the bits beyond the prefix length that are set to 
0. Subnetting is the use of the variable portion of a unicast address prefix to create address prefixes 
that are more efficient (that waste fewer possible addresses) for assignment to the subnets of an 
organization network. 
Subnetting for IPv4 was originally defined to make better use of the host bits for Class A and Class B 
IPv4 public address prefixes. Consider the example network in Figure 4-1.  
Figure 4-1  Network 157.60.0.0/16 before subnetting 
The subnet using the class B address prefix of 157.60.0.0/16 can support up to 65,534 nodes, which is 
far too many nodes to have on the same subnet. You want to better use the address space of 
157.60.0.0/16 through subnetting. However, subnetting 157.60.0.0/16 should not require the 
reconfiguration of the routers of the Internet. 
In a simple example of subnetting, you can subnet 157.60.0.0/16 by using the first 8 host bits (the third 
octet) for the new subnetted address prefix. If you subnetted 157.60.0.0/16 as shown in Figure 4-2, you 
would create separate subnets with their own subnetted address prefixes (157.60.1.0/24, 
157.60.2.0/24, 157.60.3.0/24), with up to 254 host IDs on each subnet. The router would become aware 
of the separate subnetted address prefixes and route IPv4 packets to the appropriate subnet. 
Figure 4-2  Network 157.60.0.0/16 after subnetting 
The routers of the Internet would still regard all the nodes on the three subnets as being located on the 
address prefix 157.60.0.0/16. The Internet routers would be unaware of the subnetting being done to 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 92 
157.60.0.0/16 and therefore require no reconfiguration. The subnetting of an address prefix is not 
visible to the routers outside the network being subnetted. 
When you assign IPv4 address prefixes in the form of subnet prefixes to the subnets of your 
organization, you should begin with one or more public address prefixes assigned by the Internet 
Corporation for Assigned Names and Numbers (ICANN) or an Internet service provider (ISP), the 
private address space (10.0.0.0/8, 172.16.0.0/12, and 192.168.0.0/16), or both. The set of starting 
address prefixes represent a fixed address space. 
You can divide the variable portion of an IPv4 address prefix to represent additional subnets and the 
host IDs on each subnet. For example, the IPv4 address prefix 131.107.192.0/18 has 18 fixed bits (as 
the prefix length shows) and 14 variable bits (the bits in the host ID portion of the address prefix). You 
might determine that your organization needs up to 50 subnets. Therefore, you divide the 14 variable 
bits into 6 bits, which you will use to identify subnets (you can express up to 64 subnets with 6 bits) and 
8 bits, which you will use to identify up to 254 host IDs on each subnet. The resulting address prefix for 
each subnetted address prefix has a 24-bit prefix length (the original 18 bits plus 6 bits used for 
subnetting). 
Subnetting for IPv4 produces a set of subnetted address prefixes and their corresponding ranges of 
valid IPv4 addresses, By assigning subnetted address prefixes that contain an appropriate number of 
host IDs to the physical and logical subnets of an organization’s IPv4 network, network administrators 
can use the available address space in the most efficient manner possible. 
Before you begin IPv4 subnetting, you must determine your organization’s current requirements and 
plan for future requirements. Follow these guidelines: 
Determine how many subnets your network requires. Subnets include physical or logical subnets to 
which hosts connect and possibly private wide area network (WAN) links between sites. 
Determine how many host IDs each subnet requires. Each host and router interface running IPv4 
requires at least one IPv4 address. 
Based on those requirements, you will define a set of subnetted address prefixes with a range of valid 
IPv4 addresses for each subnetted address prefix. Your subnets do not all need to have the same 
number of hosts; most IPv4 networks include subnets of various sizes. 
Although the concept of subnetting by using host ID bits is straightforward, the actual mechanics of 
subnetting are a bit more complicated. Subnetting requires a three-step procedure: 
1. Determine how many host bits to use for the subnetting. 
2. Enumerate the new subnetted address prefixes. 
3. Enumerate the range of IPv4 addresses for each new subnetted address prefix. 
Determining the Subnet Prefix of an IPv4 Address Configuration 
Before you begin the mechanics of IPv4 subnetting, you should be able to determine the subnet prefix 
from an arbitrary IPv4 address configuration, which typically consists of an IPv4 address and a prefix 
length or an IPv4 address and a subnet mask. The following sections show you how to determine the 
subnet prefix for IPv4 address configurations when the prefix length is expressed in prefix length and 
dotted decimal (subnet mask) notation. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 93 
Prefix Length Notation 
To determine the subnet prefix from an arbitrary IPv4 address using prefix length notation (w.x.y.z/n), 
take the values of the high-order n bits of the address and combine them with 32-n zero bits. Then 
convert the resulting 32-bit number to dotted decimal notation. 
For example, for the IPv4 address configuration of 192.168.207.47/22, the high-order 22 bits are 
11000000 10101000 110011. To obtain the subnet prefix, combine this result with the low-order 10 bits 
of 00 00000000. The result is 11000000 10101000 11001100 00000000, or 192.168.204.0/22. 
To determine the subnet prefix of an IPv4 address configuration in prefix length notation without having 
to work entirely with binary numbers, use the following method: 
1. Express the number n (the prefix length) as the sum of 4 numbers by successively subtracting 8 from 
n. For example, 20 is 8+8+4+0. 
2. Create a table with four columns and three rows. In the first row, place the decimal octets of the IPv4 
address. In the second row, place the four digits of the sum you determined in step 1. 
3. For the columns that have 8 in the second row, copy the octet from the first row to the third row. For 
the columns that have 0 in the second row, place a 0 in the third row.  
4. For the columns that have a number between 8 and 0 in the second row, convert the decimal number 
in the first row to binary, take the high-order bits for the number of bits indicated in the second row, fill 
the rest of the bits with zero, and then convert to a decimal number. 
For example, for the IPv4 address configuration of 192.168.207.47/22, 22 is 8+8+6+0. From this, 
construct the following table: 
192 
168 
207 
47 
8 
8 
6 
0 
For the first and second octets, copy the octets from the first row. For the last octet, place a 0 in the 
third row. The table becomes: 
192 
168 
207 
47 
8 
8 
6 
0 
192 
168 
0 
For the third octet, convert the number 207 to binary for the first 6 binary digits using the decimal to 
binary conversion method described in Chapter 3, "IP Addressing." The decimal number 207 is 
128+64+8+4+2+1, which is 11001111. Taking the first 6 digits 110011 and filling in the octet with 00 
produces 11001100, or 204 in decimal. The table becomes: 
192 
168 
207 
47 
8 
8 
6 
0 
192 
168 
204 
0 
Therefore, the subnet prefix for the IPv4 address configuration 192.168.207.47/22 is 192.168.204.0/22. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 94 
Subnet Mask Notation 
To extract the subnet prefix from an arbitrary IPv4 address configuration using an arbitrary subnet 
mask, IPv4 uses a mathematical operation called a logical AND comparison. In an AND comparison, 
the result of two items being compared is true only when both items being compared are true; 
otherwise, the result is false. Table 4-1 shows the result of the AND operation for the four possible bit 
combinations. 
Bit Combination 
Result 
1 AND 1 
1 
1 AND 0 
0 
0 AND 0 
0 
0 AND 1 
0 
Table 4-1  Result of AND Operation 
Therefore, the result of the AND operation is 1 only when both bits being ANDed are 1. Otherwise, the 
result is 0. 
IPv4 performs a logical AND comparison with the 32-bit IPv4 address and the 32-bit subnet mask. This 
operation is known as a bit-wise logical AND. The result of the bit-wise logical AND of the IPv4 address 
and the subnet mask is the subnet prefix. 
For example, to determine the subnet prefix of the IPv4 address configuration 131.107.189.41 with a 
subnet mask of 255.255.240.0, turn both numbers into their binary equivalents, and line them up. Then 
perform the AND operation on each bit, and write down the result. 
IPv4 Address: 10000011 01101011 10111101 00101001 
Subnet Mask: 
11111111 11111111 11110000 00000000 
Subnet Prefix: 10000011 01101011 10110000 00000000 
The result of the bit-wise logical AND of the 32 bits of the IPv4 address and the subnet mask is the 
subnet prefix 131.107.176.0, 255.255.240.0. The behavior of the bit-wise logical AND operation 
between the IPv4 address and the subnet mask is the following: 
For the bits in the fixed portion of the address (in which the bits in the subnet mask are set to 1), the 
subnet prefix bits are copied from the IPv4 address, essentially extracting the subnet prefix of the IPv4 
address. 
For the bits in the variable portion of the address (in which the bits in the subnet mask are set to 0), the 
subnet prefix bits are set to 0, essentially discarding the host ID portion of the IPv4 address. 
To summarize, the bit-wise logical AND extracts the subnet prefix portion and discards the host ID 
portion of an IPv4 address. The result is the subnet prefix. 
To determine the subnet prefix of an IPv4 address configuration in subnet mask notation without having 
to work entirely with binary numbers, use the following method: 
1. Create a table with four columns and three rows. In the first row, place the decimal octets of the IPv4 
address. In the second row, place the decimal octets of the subnet mask. 
2. For the columns that have 255 in the second row, copy the octet from the first row to the third row. 
Chapter 4 – Subnetting 
TCP/IP Fundamentals for Microsoft Windows  
Page: 95 
For the columns that have 0 in the second row, place a 0 in the third row.  
3. For the columns that have a number between 255 and 0 in the second row, AND the decimal 
numbers in the first two rows. You can do this by converting both numbers to binary, performing the 
AND comparison for all 8 bits in the octet, and then converting the result back to decimal. Alternately, 
you can use a calculator, such as the Windows Calculator, in scientific mode. 
For example, for the IPv4 address configuration of 131.107.189.41, 255.255.240.0, construct the 
following table: 
131 
107 
189 
41 
255 
255 
240 
0 
For the first and second octets, copy the octets from the first row. For the last octet, place a 0 in the 
third row. The table becomes: 
131 
107 
189 
41 
255 
255 
240 
0 
131 
107 
0 
For the third octet, compute 189 AND 240. In binary, this operation becomes: 
10111101 
AND   11110000 
10110000 