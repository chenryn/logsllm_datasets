JSON is a very simple data format. It’s widely used, and Nim’s standard library has sup-
port for both parsing and generating it. This makes JSON a good candidate for storing
the two message fields.
 A typical JSON object contains multiple fields. The field names are simple quoted
strings, and the values can be integers, floats, strings, arrays, or other objects.
1 In particular, C++ and Java use the public and private keywords to denote the visibility of identifiers.
Listing 3.6
Message type definition and proc stub
Defines a new Message type. The * export 
marker is placed after the name of the type.
Field definitions follow the type definition 
and are exported in a similar way.
Defines a new parseMessage 
procedure. The export marker is 
also used to export it.
The discard is necessary 
because the body of a procedure 
can’t be empty.
Licensed to   
73
Implementing the protocol
 Let’s look back to the conversation about Game of Thrones in listing 3.1. One of the
first messages that I sent was, “What did you guys think about the latest Game of Thrones
episode?” This can be represented using JSON like so.
{
"username": "Dominik",
"message": "What did you guys think about the latest Game of Thrones
episode?"
}
Parsing JSON is very easy in Nim. First, import the json module by adding import
json to the top of your file. Then, replace the discard statement in the parseMessage
proc with let dataJson = parseJson(data). The next listing shows the protocol
module with the additions in bold.
import json
type
Message* = object
username*: string
message*: string
proc parseMessage*(data: string): Message =
let dataJson = parseJson(data)
The parseJson procedure defined in the json module accepts a string and returns a
value of the JsonNode type.
 JsonNode is a variant type. This means that which fields in the object can be
accessed is determined by the value of one or more other fields that are always
defined in that type. In the case of JsonNode, the kind field determines the kind of
JSON node that was parsed.
 There are seven different kinds of JSON values. The JsonNodeKind type is an enum
with a value for each kind of JSON value. The following listing shows a list of various
JSON values together with the JsonNodeKind types that they map to.
import json
assert parseJson("null").kind == JNull
assert parseJson("true").kind == JBool
assert parseJson("42").kind == JInt
assert parseJson("3.14").kind == JFloat
assert parseJson("\"Hi\"").kind == JString
assert parseJson("""{ "key": "value" }""").kind == JObject
assert parseJson("[1, 2, 3, 4]").kind == JArray
Listing 3.7
A representation of a message in JSON
Listing 3.8
Parsing JSON in protocol.nim
Listing 3.9
The mapping between JSON values and the JsonNodeKind type
The curly brackets define an object.
The username field with 
the corresponding value
The message field with the corresponding value
Licensed to   
74
CHAPTER 3
Writing a chat application
When you’re parsing arbitrary JSON data, a variant type is required because the com-
piler has no way of knowing at compile time what the resulting JSON type should be.
The type is only known at runtime. This is why the parseJson procedure returns a
JsonNode type whose contents differ depending on the kind of JSON value that was
passed into it.
 The last two JSON values shown in listing 3.9 are collections. The JObject kind rep-
resents a mapping between a string and a JsonNode. The JArray kind stores a list of
JsonNodes.
 You can access the fields of a JObject by using the [] operator. It’s similar to the
array and sequence [] operator but takes a string as its argument. The string
determines the field whose value you want to retrieve from the JObject. The [] oper-
ator returns a JsonNode value.
A little information about variant types
A variant type is an object type whose fields change depending on the value of one
or more fields. An example will make this clearer:
type
Box = object
case empty: bool
of false:
contents: string
else:
discard
var obj = Box(empty: false, contents: "Hello")
assert obj.contents == "Hello"
var obj2 = Box(empty: true)
echo(obj2.contents)
The preceding code shows how an ordinary box that may be empty can be modeled.
The end of the listing shows an erroneous case where the contents of an empty box
are accessed. It should be no surprise that compiling and running that code will result
in an error:
Traceback (most recent call last)
variant.nim(13)
variant
system.nim(2533)
sysFatal
Error: unhandled exception: contents is not accessible [FieldError]
This is a very simple variant type with only two states. You can also use enum types
in the case statement of a variant type. This is common and is used in the Json-
Node type.
A variant type is defined much
like other object types.
The difference is the case statement 
under the definition of the object. This 
defines an empty field in this type.
If the empty field is false, the fields defined 
under this branch will be accessible.
The contents field will be accessible if empty == false.
No additional fields are defined if empty == true.
When the empty field is set to false
in the constructor, the contents
field can also be specified.
Because obj.empty is false, the 
contents field can be accessed.
This will result in an error because
the contents field can’t be
accessed, because empty is true.
Licensed to   
75
Implementing the protocol
import json
let data = """
{"username": "Dominik"}
"""
let obj = parseJson(data)
assert obj.kind == JObject
assert obj["username"].kind == JString
assert obj["username"].str == "Dominik"
WARNING: THE KIND MATTERS
Calling the [] operator with a string on a Json-
Node whose kind field isn’t JObject will result in an exception being raised.
So, how can you retrieve the username field from the parsed JsonNode? Simply using
dataJson["username"] will return another JsonNode, unless the username field
doesn’t exist in the parsed JObject, in which case a KeyError exception will be raised.
In the preceding code, the JsonNode kind that dataJson["username"] returns is
JString because that field holds a string value, so you can retrieve the string value
using the getStr procedure. There’s a get procedure for each of the JsonNode kinds,
and each get procedure will return a default value if the type of the value it’s meant to
be returning doesn’t match the JsonNode kind.
THE DEFAULT VALUE FOR GET PROCEDURES
The default value returned by the
get procedures can be overridden. To override, pass the value you want to be
returned by default as the second argument to the procedure; for example,
node.getStr("Bad kind").
Once you have the username, you can assign it to a new instance of the Message type.
The next listing shows the full protocol module with the newly added assignments in
bold.
import json
type
Message* = object
username*: string
message*: string
proc parseMessage*(data: string): Message =
let dataJson = parseJson(data)
result.username = dataJson["username"].getStr()
result.message = dataJson["message"].getStr()
Just add two lines of code, and you’re done.
Listing 3.10
Assigning parsed data to the result variable
Parses the data string 
and returns a 
JsonNode type, which 
is then assigned to the 
obj variable
The returned JsonNode 
has a JObject kind 
because that’s the kind 
of the JSON contained 
in the data string.
Fields are accessed using the [] operator. 
It returns another JsonNode, and in this 
case its kind is a JString.
Because the [] operator returns a JsonNode, 
the value that it contains must be accessed 
explicitly via the field that contains it. In 
JString’s case, this is str. Generally you’re 
better off using the getStr proc.
Gets the value under the
"username" key and assigns its
string value to the username
field of the resulting Message
Does the same here, 
but instead gets the 
value under the 
"message" key
Licensed to   
76
CHAPTER 3
Writing a chat application
You should test your code as quickly and as often as you can. You could do so now by
starting to integrate your new module with the client module, but it’s much better
to test code as separate units. The protocol module is a good unit of code to test in
isolation.
 When testing a module, it’s always good to test each of the exported procedures to
ensure that they work as expected. The protocol module currently exports only one
procedure—the parseMessage procedure—so you only need to write tests for it.
 There are multiple ways to test code in Nim, but the simplest is to use the doAssert
procedure, which is defined in the system module. It’s similar to the assert proce-
dure: it takes one argument of type boolean and raises an AssertionFailed excep-
tion if the value of that boolean is false. It differs from assert in one simple way:
assert statements are optimized out when you compile your application in release
mode (via the -d:release flag), whereas doAssert statements are not.
RELEASE MODE
By default, the Nim compiler compiles your application in
debug mode. In this mode, your application runs a bit slower but performs
checks that give you more information about bugs that you may have acciden-
tally introduced into your program. When deploying your application, you
should compile it with the -d:release flag, which puts it in release mode and
provides optimal performance.
Let’s define an input and then use doAssert to test parseMessage’s output.
when isMainModule:
block:
Listing 3.11
Testing your new functionality
The magical result variable
You may be wondering where the result variable comes from in listing 3.10. The
answer is that Nim implicitly defines it for you. This result variable is defined in all
procedures that are defined with a return type:
proc count10(): int =
for i in 0 .. 
77
Implementing the protocol
let data = """{"username": "John", "message": "Hi!"}"""
let parsed = parseMessage(data)
doAssert parsed.username == "John"
doAssert parsed.message == "Hi!"
Add the code in listing 3.11 to the bottom of your file, and then compile and run your
code. Your program should execute successfully with no output.
 This is all well and good, but it would be nice to get some sort of message letting
you know that the tests succeeded, so you can just add echo("All tests passed!")
to the bottom of the when isMainModule block. Your program should now output that
message as long as all the tests pass.
 Try changing one of the asserts to check for a different output, and observe what
happens. For example, removing the exclamation mark from the doAssert
parsed.message == "Hi!" statement will result in the following error:
Traceback (most recent call last)
protocol.nim(17) protocol
system.nim(3335) raiseAssert
system.nim(2531) sysFatal
Error: unhandled exception: parsed.message == "Hi"
[AssertionError]
If you modify the protocol module and break your test, you may find that suddenly
you’ll get such an error.
 You now have a test for the correct input, but what about incorrect input? Create
another test to see what happens when the input is incorrect:
block:
let data = """foobar"""
let parsed = parseMessage(data)
Compile and run protocol.nim, and you should get the following output:
Traceback (most recent call last)
protocol.nim(21) protocol_progress
protocol.nim(8)
parseMessage
json.nim(1086)
parseJson
json.nim(1082)
parseJson
json.nim(1072)
parseJson
json.nim(561)
raiseParseErr
Error: unhandled exception: input(1, 5) Error: { expected [JsonParsingError]
Uses the triple-quoted string literal syntax to define the data 
to be parsed. The triple-quoted string literal means that the 
single quote in the JSON doesn’t need to be escaped.
Calls the parseMessage procedure 
on the data defined previously
Checks that the username that 
parseMessage parsed is correct
Checks that the message that 
parseMessage parsed is correct
Licensed to   
78
CHAPTER 3
Writing a chat application
An exception is raised by parseJson because the specified data isn’t valid JSON. But
this is what should happen, so define that in the test by catching the exception and
making sure that an exception has been raised.
block:
let data = """foobar"""
try:
let parsed = parseMessage(data)
doAssert false
except JsonParsingError:
doAssert true
except:
doAssert false
An ideal way for the parseMessage proc to report errors would be by raising a custom
exception. But this is beyond the scope of this chapter. I encourage you to come back
and implement it once you’ve learned how to do so. For now, let’s move on to generat-
ing JSON. 
3.4.3
Generating JSON
You successfully parsed the JSON, so let’s move on to generating JSON. The protocol
module needs to be capable of both parsing and generating messages. Generating
JSON is even simpler than parsing it.
 In Nim, JSON can be generated in multiple ways. One way is to simply create a
string containing the correct JSON concatenated with values, as you did in your first
test. This works, but it’s error prone because it’s easy to miss certain syntactical ele-
ments of JSON.
 Another way is to construct a new JsonNode and convert it to a string using the $
operator. Let’s do that now. Start by defining a new createMessage procedure, and
then use the % operator to create a new JsonNode object. The following listing shows
how the createMessage procedure can be defined.
proc createMessage*(username, message: string): string =
result = $(%{
"username": %username,
"message": %message
}) & "\c\l"
TABLE CONSTRUCTOR SYNTAX
The {:} syntax used in listing 3.12 is called a table
constructor. It’s simply syntactic sugar for an array constructor. For example,
{"key1": "value1", "key2": "value2"} is the same as [("key1", "value1"),
("key2, "value2")].
Listing 3.12
Creating a new message
This line should never be 
executed because parseMessage 
will raise an exception.
Make sure that the exception that’s 
thrown is the expected one.
The $ converts the JsonNode returned 
by the % operator into a string.
The % converts strings, integers, floats, 
and more into the appropriate JsonNodes.
A carriage return and the line feed characters are 
added to the end of the message. They act as 
separators for the messages.
Licensed to   
79
Transferring data using sockets
The % operator is very powerful because it can convert a variety of different value types
into appropriate JsonNode types. This allows you to create JSON using a very intuitive
syntax.
 The $ operator is, by convention, the operator used to convert any type to a string
value. In the case of a JsonNode, the $ operator defined for it will produce a valid
JSON string literal representation of the JsonNode object that was built.
 The addition of the carriage return and line feed, which some OSs use to signify
newlines, will be useful later on when the client and server components need to
receive messages. They’ll need a way to determine when a new message stops and
another begins. In essence, these characters will be the message separators. In prac-
tice, any separator could be used, but the \c\l sequence is used in many other proto-
cols already and it’s supported by Nim’s networking modules.
 Just like with the parseMessage procedure, you should add tests for the create-
Message procedure. Simply use doAssert again to ensure that the output is as
expected. Remember to include \c\l in your expected output. The following code
shows one test that could be performed—add it to the bottom of protocol.nim:
block:
let expected = """{"username":"dom","message":"hello"}""" & "\c\l"
doAssert createMessage("dom", "hello") == expected
Recompile your module and run it to ensure that the tests pass. You can also extend
the tests further by checking different inputs, such as ones containing characters that
have a special meaning in JSON (for example, the " character).
 If all the tests pass, you’ve successfully completed the protocol module. You’re
now ready to move on to the final stage of developing this application!
3.5
Transferring data using sockets
You’re now well on your way to completing this chat application. The protocol mod-
ule is complete and the client module has mostly been completed. Before you finish
the client module, let’s look at the so-far-completely neglected server.
 The server module is one of the most important modules. It will be compiled sep-
arately to produce a server binary. The server will act as a central hub to which all the
clients connect.
 The server will need to perform two primary tasks:
 Listen for new connections from potential clients
 Listen for new messages from clients that have already connected to the server
Any messages that the server receives will need to be sent to every other client that is
currently connected to it.
 Figure 3.4, from earlier in the chapter, showed the basic operation of the server
and the clients. It was a simplified diagram, without any protocol details. Now that
Note that triple-quoted string literals don’t support
any character-escape sequences at all. As a
workaround, I simply concatenate them.
Licensed to   
80
CHAPTER 3
Writing a chat application
you’re familiar with the protocol the chat application will be using, I can show you the
exact messages that will be sent in figure 3.4.
 First, assume that the server has successfully accepted connections from Dom,
John, and Grace. The following events occur:
1
Dom sends a message to the server. 
{"username": "Dom", "message": "Hello"}\c\l
2
The server passes this message on to the other clients: John and Grace. 
{"username": "Dom", "message": "Hello"}\c\l
The server simply passes any messages that it receives to the other clients. For simplic-
ity, the identity of the clients is not verified, so it’s possible for them to impersonate
other users. At the end of this chapter, we’ll consider ways to improve this application,
and security will be one aspect that you’ll be encouraged to reinforce.
 For now, though, let’s create the server module. You can begin by defining the
types that will be used by it. First, create a new server.nim file in the src directory.
Then, create the types shown in the following listing.
import asyncdispatch, asyncnet
type
Client = ref object
socket: AsyncSocket
netAddr: string
id: int
connected: bool
Server = ref object
socket: AsyncSocket
clients: seq[Client]
The Server and Client types are both defined as reference types, which you might
recall from chapter 2. Being defined this way allows procedures that take these types
as arguments to modify them. This will be essential, because new elements will need to
be added to the clients field when new clients connect.