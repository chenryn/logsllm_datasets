### Targeted at Embedded and Real-Time Operating Systems

This system is designed for embedded and real-time operating system environments. It has a relatively low number of known vulnerabilities, with only five reported in the CVE database since 2005. The CyaSSL code does not perform proper padding checks; instead, it examines the last byte of plaintext to determine how many bytes to remove. This approach makes the code vulnerable to an old attack that recovers one byte of plaintext per block. This was the only implementation we found that still contains this basic flaw.

### Java Implementations of TLS

We have examined the BouncyCastle and OpenJDK Java implementations of TLS.

#### BouncyCastle
The BouncyCastle code carefully checks the padding length (as indicated by the last byte of plaintext). If the padding format is found to be incorrect, it treats the padding as having a length of 1 (a variable `paddingsize` is set to 0, but the plaintext size is reduced by `paddingsize + minLength`, where `minLength` is set to be 1 larger than the MAC tag size). This deviates slightly from the RFC recommendations, which suggest treating the padding as having a length of zero. However, this deviation still allows our attacks in Sections III and IV to be applied (for Case 3 of the main plaintext recovery attack in Section IV, MAC verification ends up being performed on a 56-byte message, but this will still involve 5 evaluations of the compression function for SHA-1).

#### OpenJDK
The OpenJDK code appears to follow the RFC recommendations by treating the padding as having zero length if the padding format is found to be incorrect. This is because this case is handled by exception handling, during which the variable defining the plaintext length is not changed. This potentially renders it vulnerable to our attacks in Sections III and IV.

### Countermeasures

#### A. Add Random Time Delays
A natural reaction to timing-based attacks is to add random time delays to the decryption process to frustrate statistical analysis. However, this countermeasure is surprisingly ineffective, as demonstrated in the full version [2].

#### B. Use RC4
The simplest countermeasure for TLS is to switch to using the RC4 stream cipher in place of CBC-mode encryption. However, this is not an option for DTLS. When a stream cipher is used in TLS, no padding is required, and none of the attacks in this paper will work. RC4 is widely supported in TLS implementations and is effective against the BEAST attack. The use of a stream cipher in a MEE construction is well-supported by theory [12]. However, the first bytes of keystream output by the RC4 generator have certain small biases, and TLS does not discard these before starting encryption. For this reason, we do not recommend using RC4.

#### C. Use Authenticated Encryption
Another possibility is to switch from MEE-TLS-CBC to using a dedicated authenticated encryption algorithm, such as AES-GCM or AES-CCM, which were standardized for use in TLS in RFCs 5288 [24] and 6655 [15], respectively. In theory, this should obviate all attacks based on weaknesses in the MEE construction. However, we cannot rule out implementation errors, and we are not aware of any detailed analysis of implementations of these algorithms in (D)TLS for potential side-channels. Additionally, authenticated encryption was only added in TLS 1.2, and this version of TLS is not yet widely supported in implementations.

#### D. Careful Implementation of MEE-TLS-CBC Decryption
Our final option is to implement MEE-TLS-CBC decryption more carefully. The key requirement is to ensure uniform processing time for all MEE-TLS-CBC ciphertexts of a given size. The total processing time should depend only on the ciphertext size, and not on any characteristics of the underlying plaintext (including padding). The basic principle is to ensure the same amount of MAC processing is carried out, regardless of the underlying plaintext. However, this simple principle is complicated by the need to also perform careful sanity checking on the underlying plaintext while avoiding the introduction of additional timing side-channels, and to make sure appropriate amounts of MAC processing are performed even when these checks fail. Another complication arises because the number of bytes to be examined in the padding check depends on the last byte of the last plaintext block, and so, even if the MAC processing is made uniform, the running time of the padding check may still leak a small amount of information about the plaintext.

With these considerations in mind, we now provide a detailed prescription for achieving constant-time processing of MEE-TLS-CBC ciphertexts, incorporating suitable sanity checking. In what follows, let `plen` denote the length (in bytes) of the plaintext `P` obtained immediately after CBC-mode decryption of the ciphertext, `padlen` denote the last byte of that plaintext interpreted as an integer between 0 and 255, and `t` denote the length of the MAC tags (in bytes). Also, let `HDR` and `SQN` denote the (D)TLS record header and the expected value of the sequence number for this record. Our recommended procedure is as follows:

1. **First Sanity Check the Ciphertext:**
   - Check that the ciphertext length in bytes is a multiple of the block-size `b` and is at least `max{b, t + 1}` (for chained IVs) or `b + max{b, t + 1}` (for explicit IVs).
   - If these conditions are not met, return a fatal error.

2. **Decrypt the Ciphertext:**
   - Decrypt the ciphertext to obtain the plaintext `P`.
   - Ensure `plen` is a multiple of `b` and at least `max{b, t + 1}`.

3. **Check Padding Length:**
   - If `t + padlen + 1 > plen`, the plaintext is not long enough to contain the padding (as indicated by the last byte of plaintext) plus a MAC tag.
   - In this case, run a loop as if there were 256 bytes of padding, with a dummy check in each iteration.
   - Let `P'` denote the first `plen - t` bytes of `P`, compute a MAC on `SQN || HDR || P'`, and do a constant-time comparison of the computed MAC with the last `t` bytes of `P`.
   - Return a fatal error.

4. **Check Padding Format:**
   - Otherwise (when `t + padlen + 1 ≤ plen`), check the last `padlen + 1` bytes of `P` to ensure they are all equal (to the last byte of `P`), ensuring that the loop does check all the bytes (and does not stop as soon as the first mismatch is detected).
   - If this fails, run a loop as if there were `256 - padlen - 1` bytes of padding, with a dummy check in each iteration, and then do a MAC check as in the previous step.
   - Return a fatal error.

5. **Process Correctly Formatted Padding:**
   - Otherwise (the padding is now correctly formatted), run a loop as if there were `256 - padlen - 1` bytes of padding, doing a dummy check in each iteration.
   - Let `P'` denote the first `plen - padlen - 1 - t` bytes of `P`, and let `T` denote the next `t` bytes of `P` (the remainder of `P` is valid padding).
   - Run the MAC computation on `SQN || HDR || P'` to obtain a MAC tag `T'`.
   - Set `L1 = 13 + plen - t`, `L2 = 13 + plen - padlen - 1 - t`, and perform an additional `(L1 - 55) / 64 - (L2 - 55) / 64` MAC compression function evaluations (on dummy data).
   - Finally, do a constant-time comparison of `T` and `T'`.
   - If these are equal, return `P'`. Otherwise, return a fatal error.

When implementing the above procedure, it would be tempting to omit seemingly unnecessary computations, for example, when `t + padlen + 1 > plen`. However, these are needed to prevent other timing side-channels like those reported in [1] for the GnuTLS implementation of DTLS. Notice also that the dummy computations performed in the last step are compression function evaluations and not full MAC computations. These give a MAC computation time that is the same irrespective of how much padding is removed (and equal to that carried out in earlier steps).

We have implemented the above procedure by modifying OpenSSL version 1.0.1, the same version used for our attacks. We then ran our distinguishing attack from Section III against the modified code. Each packet in the attack passes the padding check but fails MAC verification, causing the server to close the TLS session and send an encrypted alert message. Figure 9 shows the distribution of timing values (in hardware cycles) after implementing our procedure. This figure should be compared with Figure 2: visual inspection alone shows that the timing difference is substantially reduced. In fact, the separation between the medians of the two distributions is reduced from about 8500 to about 1100 hardware cycles (from around 2.5 μs to 0.32 μs). This small separation means that 128 sessions are needed to achieve a distinguishing success probability of 0.68, whereas, prior to our modifications, just 1 session was enough to give a success probability of 0.756. For the plaintext recovery attack, the adversary will have access to timing differences roughly one quarter of this, i.e., roughly 80 ns on our hardware. Notice also that the two distributions are reversed compared to Figure 2, i.e., processing 0xFF packets now takes longer, on average, than for 0x00 packets. We believe this is caused by overhead introduced by a `SHA1_Update` function call that occurs for 0xFF packets but not 0x00 packets.

To achieve further reductions in timing difference would require a more sophisticated "constant time" programming approach. The OpenSSL patch in versions 1.0.1d, 1.0.0k, and 0.9.8y addressing the attacks in this paper provides an example of how to do this. The complexity of the OpenSSL patch is notable, with around 500 lines of new 'C' code being required. For further discussion and explanation, see [www.imperialviolet.org/2013/02/04/luckythirteen.html](http://www.imperialviolet.org/2013/02/04/luckythirteen.html).

### Discussion

We have demonstrated a variety of attacks against implementations of (D)TLS. We reiterate that the attacks are ciphertext-only and can be carried out by the standard MITM attacker without a chosen-plaintext capability. The attacks that are possible depend crucially on low-level implementation details, as well as factors such as the relationship between the MAC tag size `t` and the block size `b`. All implementations we examined were vulnerable to one or more attacks. It is an interesting open question as to whether similar timing attacks could be developed against the TLS encryption operation using a variant of the CRIME attack.

For TLS, we need a multi-session attack, with, in some cases, many sessions. This limits the practicality of the attacks, but note that they can be further improved using standard techniques such as language models and sequential estimation. They can also be enhanced in a BEAST-style attack to enable efficient recovery of HTTP cookies. The timing differences we must detect are close to or below the levels of jitter one typically finds in real networks. In particular, our attacker needs to be positioned relatively close (in terms of network hops) to the machine being attacked. Still, the attacks should be considered a realistic threat to TLS, and we have described a range of suitable countermeasures.

The attacks are much more serious for DTLS because of this protocol's tolerance of errors and because of the availability of timing amplification techniques from [1]. Very careful implementation of the MEE-TLS-CBC decryption algorithm is needed to thwart these amplification techniques. In view of this, we highly recommend the use of a suitable authenticated encryption algorithm in preference to CBC-mode for DTLS.

### Acknowledgements

We thank Xuelei Fan, David McGrew, Adam Langley, Brad Wetmore, and the anonymous reviewers for useful feedback. We also thank Eric Rescorla for pointing out that our attacks can be enhanced in the web setting using BEAST-like techniques.

### References

[1] N. AlFardan and K. G. Paterson. Plaintext-recovery attacks against Datagram TLS. In NDSS, 2012.

[2] N. AlFardan and K. G. Paterson. Lucky thirteen: Breaking the TLS and DTLS record protocols. Full version of this paper, available from [www.isg.rhul.ac.uk/tls](http://www.isg.rhul.ac.uk/tls), 2013.

[3] G. V. Bard. The vulnerability of SSL to chosen plaintext attack. IACR Cryptology ePrint Archive, 2004:111, 2004.

[4] G. V. Bard. A challenging but feasible blockwise-adaptive chosen-plaintext attack on SSL. In SECRYPT, pages 99–109, 2006.

[5] B. Canvel, A. P. Hiltgen, S. Vaudenay, and M. Vuagnoux. Password Interception in a SSL/TLS Channel. In D. Boneh, editor, CRYPTO, volume 2729 of LNCS, pages 583–599. Springer, 2003. ISBN 3-540-40674-3.

[6] C. M. Chernick, C. Edington III, M. J. Fanto, and R. Rosen. Guidelines for the Selection and Use of Transport Layer Security (TLS) Implementations. In NIST Special Publication 800-52, June 2005, National Institute of Standards and Technology. Available at [http://csrc.nist.gov/publications/nistpubs/800-52/SP-800-52.pdf](http://csrc.nist.gov/publications/nistpubs/800-52/SP-800-52.pdf), 2005.

[7] T. Dierks and C. Allen. The TLS Protocol Version 1.0. RFC 2246, Internet Engineering Task Force, 1999.

[8] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.1. RFC 4346, Internet Engineering Task Force, 2006.

[9] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246, Internet Engineering Task Force, 2008.

[10] T. Duong and J. Rizzo. Here come the ⊕ Ninjas. Unpublished manuscript, 2011.

[11] D. Eastlake 3rd. Transport Layer Security (TLS) Extensions: Extension Definitions. RFC 6066, 2011.

[12] H. Krawczyk. The order of encryption and authentication for protecting communications (or: How secure is SSL?). In CRYPTO, pages 310–331, 2001.

[13] H. Krawczyk, M. Bellare, and R. Canetti. HMAC: Keyed-Hashing for Message Authentication. RFC 2104 (Informational), 1997.

[14] U. Maurer and B. Tackmann. On the soundness of formalizing the malleability of authenticate-then-encrypt: symmetric encryption. In ACM CCS, pages 505–515, 2010.

[15] D. McGrew and D. Bailey. AES-CCM Cipher Suites for Transport Layer Security (TLS). RFC 6655 (Proposed Standard), 2012.

[16] N. Modadugu and E. Rescorla. The Design and Implementation of Datagram TLS. In NDSS, 2004.

[17] B. Moeller. Security of CBC ciphersuites in SSL/TLS: Problems and countermeasures, 2004. [http://www.openssl.org/∼bodo/tls-cbc.txt](http://www.openssl.org/~bodo/tls-cbc.txt).

[18] K. G. Paterson, T. Ristenpart, and T. Shrimpton. Tag size does matter: Attacks and proofs for the TLS record protocol. In ASIACRYPT, pages 372–389, 2011.

[19] A. Pironti, P.-Y. Strub, and K. Bhargavan. Identifying website users by TLS traffic analysis: New attacks and effective countermeasures. Technical Report 8067, INRIA, September 2012.

[20] E. Rescorla and N. Modadugu. Datagram Transport Layer Security. RFC 4347, Internet Engineering Task Force, 2006.

[21] E. Rescorla and N. Modadugu. Datagram Transport Layer Security Version 1.2. RFC 6347, Internet Engineering Task Force, 2012.

[22] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you, get off of my cloud: exploring information leakage in third-party compute clouds. In E. Al-Shaer, S. Jha, and A. D. Keromytis, editors, ACM Conference on Computer and Communications Security, pages 199–212. ACM, 2009.

[23] P. Rogaway. Problems with proposed IP cryptography. Unpublished manuscript, 1995. [http://www.cs.ucdavis.edu/∼rogaway/papers/draft-rogaway-ipsec-comments-00.txt](http://www.cs.ucdavis.edu/~rogaway/papers/draft-rogaway-ipsec-comments-00.txt).

[24] J. Salowey, A. Choudhury, and D. McGrew. AES Galois Counter Mode (GCM) Cipher Suites for TLS. RFC 5288 (Proposed Standard), 2008.

[25] S. Vaudenay. Security Flaws Induced by CBC Padding - Applications to SSL, IPSEC, WTLS ... In EUROCRYPT, pages 534–546, 2002.