its frozen coins. Managerial aborts is not handled inside
IdealPhawk, but by the public portion of the contract.
Simplifying assumptions. For clarity, our basic version of
IdealPhawk is a stripped down version of our implementation.
Speciﬁcally, our basic IdealPhawk and protocols do not realize
refunds of frozen coins upon managerial abort. As mentioned
in Section IV-C, it is not hard to extend our protocols to
support such refunds.
Other simplifying assumptions we made include the follow-
ing. Our basic IdealPhawk assumes that the set of pseudonyms
participating in the contract as well as timeouts T1 and T2 are
hard-coded in the program. This can also be easily relaxed as
mentioned in Section IV-C.
IV. CRYPTOGRAPHIC PROTOCOLS
that
Our protocols are broken down into two parts: 1) the private
cash part
implements direct money transfers between
users; and 2) the Hawk-speciﬁc part that binds transactional
privacy with programmable logic. The formal protocol descrip-
tions are given in Figures 5 and 6. Below we explain the high-
level intuition.
A. Warmup: Private Cash and Money Transfers
Our construction adopts a Zerocash-like protocol for im-
plementing private cash and private currency transfers. For
completeness, we give a brief explanation below, and we
mainly focus on the pour operation which is technically more
interesting. The blockchain program Blockchaincash maintains
a set Coins of private coins. Each private coin is of the format
(P, coin := Comms($val))
where P denotes a party’s pseudonym, and coin commits to
the coin’s value $val under randomness s.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
Blockchaincash
Init:
crs: a reference string for the underlying NIZK system
Coins: a set of coin commitments, initially ∅
SpentCoins: set of spent serial numbers, initially ∅
Mint: Upon receiving (mint, $val, s) from some party P,
coin := Comms($val)
assert (P, coin) /∈ Coins
assert ledger[P] ≥ $val
ledger[P] := ledger[P] − $val
add (P, coin) to Coins
Pour: Anonymous receive (pour, π,{sni,Pi, coini, cti}i∈{1,2}})
let MT be a merkle tree built over Coins
statement := (MT.root,{sni,Pi, coini}i∈{1,2})
assert NIZK.Verify(LPOUR, π, statement)
for i ∈ {1, 2},
assert sni /∈ SpentCoins
assert (Pi, coini) /∈ Coins
add sni to SpentCoins
add (Pi, coini) to Coins
send (pour, coini, cti) to Pi,
i}i∈{1,2})
(cid:2)
Relation (statement, witness) ∈ LPOUR is deﬁned as:
parse statement as (MT.root,{sni,Pi, coin
parse witness as (P, skprf,{branchi, si, $vali, s(cid:2)
assert P.pkprf = PRFskprf (0)
(cid:2)
assert $val1 + $val2 = $val
1 + $val
for i ∈ {1, 2},
coini := Commsi ($vali)
assert MerkleBranch(MT.root, branchi, (P(cid:8)coini))
assert sni = PRFskprf (P(cid:8)coini)
(cid:2)
i)
assert coin
(cid:2)
i = Comms(cid:2)
($val
(cid:2)
2
i
i, ri, $val
Init: Wallet: stores P’s spendable coins, initially ∅
Protocol UserPcash
GenNym:
sample a random seed skprf
pkprf := PRFskprf (0)
return pkprf
Mint: On input (mint, $val),
sample a commitment randomness s
coin := Comms($val)
store (s, $val, coin) in Wallet
send (mint, $val, s) to G(Blockchaincash)
Pour (as sender): On input (pour, $val1, $val2, P1, P2, $val
(cid:2)
1,
(cid:2)
2),
$val
(cid:2)
1 + $val
(cid:2)
2
assert $val1 + $val2 = $val
for i ∈ {1, 2}, assert (si, $vali, coini) ∈ Wallet for some
(si, coini)
let MT be a merkle tree over Blockchaincash.Coins
for i ∈ {1, 2}:
remove one (si, $vali, coini) from Wallet
sni := PRFskprf (P(cid:8)coini)
let branchi be the branch of (P, coini) in MT
sample randomness s(cid:2)
($val
coin
cti := ENC(Pi.epk, ri, $val
statement := (MT.root,{sni,Pi, coin
witness := (P, skprf,{branchi, si, $vali, s(cid:2)
π := NIZK.Prove(LPOUR, statement, witness)
AnonSend(pour, π,{sni,Pi, coin
(cid:2)
i := Comms(cid:2)
i}i∈{1,2})
(cid:2)
i, ri, $val
i(cid:8)s(cid:2)
(cid:2)
i)
i, ri
(cid:2)
i)
i})
(cid:2)
i
i, cti}i∈{1,2})
(cid:2)
to G(Blockchaincash)
(pour, coin, ct)
receive
from
i})
(cid:2)
Pour
(as
recipient): On
G(Blockchaincash):
let ($val(cid:8)s) := DEC(esk, ct)
assert Comms($val) = coin
store (s, $val, coin) in Wallet
output (pour, $val)
Fig. 5. UserPcash construction. A trusted setup phase generates the NIZK’s common reference string crs. For notational convenience, we omit writing the
crs explicitly in the construction. The Merkle tree MT is stored on the blockchain and not computed on the ﬂy – we omit stating this in the protocol for
notational simplicity. The protocol wrapper Π(·) invokes GenNym whenever a party creates a new pseudonym.
During a pour operation, the spender P chooses two coins
in Coins to spend, denoted (P, coin1) and (P, coin2) where
($vali) for i ∈ {1, 2}. The pour operation
coini := Commsi
(cid:3)
(cid:3)
pays val
2 amount to two output pseudonyms denoted
1 and val
P1 and P2 respectively, such that val1 + val2 = val
(cid:3)
(cid:3)
1 + val
2.
i for i ∈ {1, 2}, and
The spender chooses new randomness s(cid:3)
computes the output coins as
can be demonstrated by a Merkle branch consistent with the
root hash, and this is done in zero-knowledge.
• No double spending. Each coin (P, coin) has a cryptograph-
ically unique serial number sn that can be computed as
a pseudorandom function of P’s secret key and coin. To
pour a coin, its serial number sn must be disclosed, and a
zero-knowledge proof given to show the correctness of sn.
Blockchaincash checks that no sn is used twice.
(cid:3)
(cid:2)Pi, coini := Comms(cid:2)
(cid:3)
i)
($val
i to the recipient Pi
(cid:3)
The spender gives the values s(cid:3)
i and val
for Pi to be able to spend the coins later.
i
Now, the spender computes a zero-knowledge proof to show
the output coins are constructed appropriately, where
that
correctness compasses the following aspects:
• Existence of coins being spent. The coins being spent
(P, coin1) and (P, coin2) are indeed part of the private pool
Coins. We remark that here the zero-knowledge property
allows the spender to hide which coins it is spending – this
is the key idea behind transactional privacy.
To prove this efﬁciently, Blockchaincash maintains a Merkle
tree MT over the private pool Coins. Membership in the set
847847
• Money conservation. The zero-knowledge proof also attests
to the fact that the input coins and the output coins have
equal total value.
We make some remarks about the security of the scheme.
Intuitively, when an honest party pours to an honest party,
the adversary A does not
learn the values of the output
coins assuming that the commitment scheme Comm is hiding,
and the NIZK scheme we employ is computational zero-
knowledge. The adversary A can observe the nyms that receive
the two output coins. However, as we remarked earlier, since
these nyms can be one-time, leaking them to the adversary
would be okay. Essentially we only need to break linkability
at spend time to ensure transactional privacy.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:16:41 UTC from IEEE Xplore.  Restrictions apply. 
Blockchainhawk(PM,{Pi}i∈[N ], T1, T2, φpriv, φpub)
Init: See IdealPhawk for description of parameters
Freeze: Upon receiving (freeze, π, sni, cmi) from Pi:
Call Blockchaincash.Init.
assert current time T ≤ T1
assert this is the ﬁrst freeze from Pi
let MT be a merkle tree built over Coins
assert sni /∈ SpentCoins
statement := (Pi, MT.root, sni, cmi)
assert NIZK.Verify(LFREEZE, π, statement)
add sni to SpentCoins and store cmi for later
Compute: Upon receiving (compute, π, ct) from Pi:
assert T1 ≤ T < T2 for current time T
assert NIZK.Verify(LCOMPUTE, π, (PM, cmi, ct))
send (compute,Pi, ct) to PM
Finalize: On receiving (finalize, π, inM, out,{coin
from PM:
assert current time T ≥ T2
for every Pi that has not called compute, set cmi := ⊥
statement := (inM, out,{cmi, coin
assert NIZK.Verify(LFINALIZE, π, statement)
for i ∈ [N ]:
i /∈ Coins
(cid:2)
assert coin
(cid:2)
i to Coins
add coin
send (finalize, coin
i, cti) to Pi
(cid:2)
Call φpub.check(inM, out)
i, cti}i∈[N ])
(cid:2)
i, cti}i∈[N ])
(cid:2)
Blockchaincash: include Blockchaincash
φpub : include user-deﬁned public contract φpub
Relation (statement, witness) ∈ LFREEZE is deﬁned as:
parse statement as (P, MT.root, sn, cm)
parse witness as (coin, skprf, branch, s, $val, in, k, s(cid:2))
coin := Comms($val)
assert MerkleBranch(MT.root, branch, (P(cid:8)coin))
assert P.pkprf = skprf(0)
assert sn = PRFskprf (P(cid:8)coin)
assert cm = Comms(cid:2) ($val(cid:8)in(cid:8)k)
Relation (statement, witness) ∈ LCOMPUTE is deﬁned as:
parse statement as (PM, cm, ct)
parse witness as ($val, in, k, s(cid:2), r)
assert cm = Comms(cid:2) ($val(cid:8)in(cid:8)k)
assert ct = ENC(PM.epk, r, ($val(cid:8)in(cid:8)k(cid:8)s(cid:2)))
i}i∈[N ], out) := φpriv({$vali, ini}i∈[N ], inM)
(cid:2)
(cid:2)
Relation (statement, witness) ∈ LFINALIZE is deﬁned as:
parse statement as (inM, out,{cmi, coin
i, cti}i∈[N ])
(cid:2)
parse witness as {si, $vali, ini, s(cid:2)
i, ki}i∈[N ]
({$val
i∈[N ] $val
assert
for i ∈ [N ]:
assert cmi = Commsi ($vali(cid:8)ini(cid:8)ki))
assert cti = SENCki (s(cid:2)
(cid:2)
i = Comms(cid:2)
assert coin
∨($vali, ini, ki, si, cmi) = (0,⊥,⊥,⊥,⊥)
i(cid:8)$val
(cid:2)
i)
(cid:2)
($val
i)
i∈[N ] $vali =
(cid:2)
(cid:2)
i
i
Protocol UserPhawk(PM,{Pi}i∈[N ], T1, T2, φpriv, φpub)
Init: Call UserPcash.Init.
Protocol for a party P ∈ {Pi}i∈[N ]:
Freeze: On input (freeze, $val, in) as party P:
assert current time T < T1
assert this is the ﬁrst freeze input
let MT be a merkle tree over Blockchaincash.Coins
assert that some entry (s, $val, coin) ∈ Wallet for some
(s, coin)
remove one (s, $val, coin) from Wallet
sn := PRFskprf (P(cid:8)coin)
let branch be the branch of (P, coin) in MT
sample a symmetric encryption key k
sample a commitment randomness s(cid:2)
cm := Comms(cid:2) ($val(cid:8)in(cid:8)k)
statement := (P, MT.root, sn, cm)
witness := (coin, skprf, branch, s, $val, in, k, s(cid:2))
π := NIZK.Prove(LFREEZE, statement, witness)
send (freeze, π, sn, cm) to G(Blockchainhawk)
store in, cm, $val, s(cid:2)
assert current time T1 ≤ T < T2
sample encryption randomness r
ct := ENC(PM.epk, r, ($val(cid:8)in(cid:8)k(cid:8)s(cid:2)))
π := NIZK.Prove((PM, cm, ct), ($val, in, k, s(cid:2), r))