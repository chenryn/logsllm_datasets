                    };
  注意： 使用数组初始化器时，必须初始化数组的每个元素，不能遗漏任何元
素。
在花括号中使用两个逗号，就可以声明一个三维数组：
    int[, , ] threedim = {
              { { 1, 2 }, { 3, 4 } },
              { { 5, 6 }, { 7, 8 } },
              { { 9, 10 }, { 11, 12 } }
              };
    WriteLine(threedim[0, 1, 1]);
7.4 锯齿数组
二维数组的大小对应于一个矩形，如对应的元素个数为3×3。而锯齿数组的大小设置
比较灵活，在锯齿数组中，每一行都可以有不同的大小。
图7-4比较了有3×3个元素的二维数组和锯齿数组。图7-4中的锯齿数组有3行，第1行
有两个元素，第2行有6个元素，第3行有3个元素。
图7-4
在声明锯齿数组时，要依次放置左右括号。在初始化锯齿数组时，只在第1对方括号
中设置该数组包含的行数。定义各行中元素个数的第2个方括号设置为空，因为这类数组
的每一行包含不同的元素个数。之后，为每一行指定行中的元素个数：
    int[][] jagged = new int[3][];
    jagged[0] = new int[2] { 1, 2 };
    jagged[1] = new int[6] { 3, 4, 5, 6, 7, 8 };
    jagged[2] = new int[3] { 9, 10, 11 };
迭代锯齿数组中所有元素的代码可以放在嵌套的for循环中。在外层的for循环中迭代
每一行，在内层的for循环中迭代一行中的每个元素：
    for (int row = 0; row 接口。先使用String类中的
CompareTo（）方法对LastName的值进行比较。如果LastName的值相同，就比较
FirstName（代码文件SortingSample/Person.cs）：
    public class Person: IComparable
    {
      public int CompareTo(Person other)
      {
        if (other == null) return 1;
        int result = string.Compare(this.LastName, other.LastName);
        if (result == 0)
        {
          result = string.Compare(this.FirstName, other.FirstName);
        }
        return result;
      }
      //...
现在可以按照姓氏对Person对象对应的数组排序（代码文件
SortingSample/Program.cs）：
    Person[] persons = {
            new Person { FirstName="Damon", LastName="Hill" },
            new Person { FirstName="Niki", LastName="Lauda" },
            new Person { FirstName="Ayrton", LastName="Senna" },
            new Person { FirstName="Graham", LastName="Hill" }
        };
        Array.Sort(persons);
        foreach (var p in persons)
        {
          WriteLine(p);
        }
使用Person类的排序功能，会得到按姓氏排序的姓名：
    Damon Hill
    Graham Hill
    Niki Lauda
    Ayrton Senna
如果Person对象的排序方式与上述不同，或者不能修改在数组中用作元素的类，就可
以实现IComparer接口或IComparer接口。这两个接口定义了方法Compare（）。要比
较的类必须实现这两个接口之一。IComparer接口独立于要比较的类。这就是Compare（）
方法定义了两个要比较的参数的原因。其返回值与IComparable接口的CompareTo（）方法
类似。
类PersonComparer实现了IComparer接口，可以按照firstName或lastName对
Person对象排序。枚举PersonCompareType定义了可用于PersonComparer的排序选项：
FirstName和LastName。排序方式由PersonComparer类的构造函数定义，在该构造函数中
设置了一个PersonCompareType值。实现Compare（）方法时用一个switch语句指定是按
FirstName还是LastName排序（代码文件SortingSample/PersonComparer.cs）。
    public enum PersonCompareType
    {
      FirstName,
      LastName
    }
    public class PersonComparer: IComparer
    {
      private PersonCompareType _compareType;
      public PersonComparer(PersonCompareType compareType)
      {
        _compareType = compareType;
      }
      public int Compare(Person x, Person y)
      {
        if (x == null && y == null) return 0;
        if (x == null) return 1;
        if (y == null) return -1;
        switch (_compareType)
        {
          case PersonCompareType.FirstName:
            return string.Compare(x.FirstName, y.FirstName);
          case PersonCompareType.LastName:
            return string.Compare(x.LastName, y.LastName);
          default:
            throw new ArgumentException("unexpected compare type");
        }
      }
    }
现在，可以将一个PersonComparer对象传递给Array.Sort（）方法的第2个参数。下面
按名字对persons数组排序（代码文件SortingSample/Program.cs）：
    Array.Sort(persons, new PersonComparer(PersonCompareType.FirstName));
    foreach (var p in persons)
    {
      WriteLine(p);
    }
persons数组现在按名字排序：
    Ayrton Senna
    Damon Hill
    Graham Hill
    Niki Lauda
  注意： Array类还提供了Sort方法，它需要将一个委托作为参数。这个参数可
以传递给方法，从而比较两个对象，而不需要依赖IComparable或IComparer接口。第9
章将介绍如何使用委托。
7.6 数组作为参数
数组可以作为参数传递给方法，也可以从方法返回。要返回一个数组，只需要把数组
声明为返回类型，如下面的方法GetPersons（）所示：
    static Person[] GetPersons()
    {
      return new Person[] {
          new Person { FirstName="Damon", LastName="Hill" },
          new Person { FirstName="Niki", LastName="Lauda" },
          new Person { FirstName="Ayrton", LastName="Senna" },
          new Person { FirstName="Graham", LastName="Hill" }
      };
    }
要把数组传递给方法，应把数组声明为参数，如下面的DisplayPersons（）方法所
示：
    static void DisplayPersons(Person[] persons)
    {
      //...
7.6.1 数组协变
数组支持协变。这表示数组可以声明为基类，其派生类型的元素可以赋予数组元素。
例如，可以声明一个object[]类型的参数，给它传递一个Person[]：
    static void DisplayArray(object[] data)
    {
      //…
    }
  注意： 数组协变只能用于引用类型，不能用于值类型。另外，数组协变有一
个问题，它只能通过运行时异常来解决。如果把Person数组赋予object数组，object数组
就可以使用派生自object的任何元素。例如，编译器允许把字符串传递给数组元素。但
因为object数组引用Person数组，所以会出现一个运行时异常
ArrayTypeMismatchException。
7.6.2 ArraySegment
结构ArraySegment表示数组的一段。如果需要使用不同的方法处理某个大型数组
的不同部分，那么可以把相应的数组部分复制到各个方法中。此时，与创建多个数组相
比，更有效的方法是使用一个数组，将整个数组传递给不同的方法。这些方法只使用数组
的某个部分。方法的参数除了数组以外，还应包括数组内的偏移量以及该方法应该使用的
元素数。这样一来，方法就需要至少3个参数。当使用数组段时，只需要一个参数就可以
了。ArraySegment结构包含了关于数组段的信息（偏移量和元素个数）。