## PostgreSQL 9.3 pg_trgm imporve support multi-bytes char and gist,gin index for reg-exp search    
### 作者                                                                                         
digoal                                                                                          
### 日期                                                                                        
2013-05-16                                                                                          
### 标签                                                                                        
PostgreSQL , 模糊查询 , 正则查询 , pg_trgm , bytea , gin , 函数索引           
----                                                                                        
## 背景                
PostgreSQL 9.3的pg_trgm模块主要有2方面的增强, 支持多字节字符, 同时支持gist, gin索引的规则表达式查询.  
```  
Note: pg_trgm ignores non-word characters (non-alphanumerics) when extracting trigrams from a string.   
Each word is considered to have two spaces prefixed and one space suffixed when determining the set of trigrams contained in the string.   
For example, the set of trigrams in the string "cat" is " c", " ca", "cat", and "at ".   
The set of trigrams in the string "foo|bar" is " f", " fo", "foo", "oo ", " b", " ba", "bar", and "ar ".  
```  
## 多字节字符支持测试  
前提条件:   
如果要让 pg_trgm 支持宽字符, 数据库的collate,ctype 不能是 C.   
```
例如
postgres=# create database test with template template0 encoding 'UTF8' lc_collate 'zh_CN.utf8' lc_ctype 'zh_CN.utf8';
CREATE DATABASE
postgres=# \c test
You are now connected to database "test" as user "postgres".
test=# create extension pg_trgm;
CREATE EXTENSION
test=# select show_trgm('刘德华abc, hello world. hello china.');
                                                                     show_trgm                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------
 {0xb207ac,0xd2efc5,"  c","  h","  w"," ch"," he"," wo",0x304695,0x403652,abc,"bc ",chi,ell,hel,hin,ina,"ld ",llo,"lo ","na ",0x6ff95f,orl,rld,wor}
(1 row)
```
否则依旧忽略.   
### PostgreSQL 9.3  
```  
digoal=# select show_trgm('刘德华abc, hello world. hello china.');  
                                                                     show_trgm                                                        
------------------------------------------------------------------------------------------------------------------------------------  
----------------  
 {0xb207ac,0xd2efc5,"  c","  h","  w"," ch"," he"," wo",0x304695,0x403652,abc,"bc ",chi,ell,hel,hin,ina,"ld ",llo,"lo ","na ",0x6ff9  
5f,orl,rld,wor}  
(1 row)  
```  
按照pg_trgm的拆分规则, 只保留了数字, 字母, 以及wchar. 标点空格等其他字符都不在组合的范围内.  
得到的组合如下 :   
```  
  刘  
 刘德  
刘德华  
德华a  
华ab  
abc  
bc   
  h  
 he  
hel  
ell  
llo  
lo   
  w  
 wo  
wor  
orl  
rld  
ld   
  c  
 ch  
chi  
hin  
ina  
na   
```  
## 规则表达式查询走gist或gin索引.  
```  
digoal=# create table trgm_test(id serial4 primary key, info text);  
CREATE TABLE  
digoal=# create index trgm_test_gin on trgm_test using gin(info gin_trgm_ops);  
CREATE INDEX  
digoal=# insert into trgm_test (info) values ('abc刘德华def, hello world, hello china.');  
INSERT 0 1  
Time: 0.504 ms  
digoal=# insert into trgm_test (info) values ('abc张学友def, hello world, hello china.');  
INSERT 0 1  
Time: 0.267 ms  
digoal=# insert into trgm_test (info) select md5(random()::text) from generate_series(1,100000);  
INSERT 0 100000  
Time: 6003.028 ms  
digoal=# select show_trgm(info), info from trgm_test where id=2;  
                                                                             show_trgm                                                
                                |                  info                     
------------------------------------------------------------------------------------------------------------------------------------  
--------------------------------+-----------------------------------------  
 {0x9212d6,0x09c328,"  a","  c","  h","  w"," ab"," ch"," he"," wo",0x480682,0x4c470a,abc,chi,def,"ef ",ell,hel,hin,ina,"ld ",llo,"l  
o ","na ",orl,rld,wor,0x7c9196} | abc张学友def, hello world, hello china.  
(1 row)  
Time: 0.310 ms  
digoal=# select show_trgm('el');  
      show_trgm        
---------------------  
 {"  e"," el","el "}  
(1 row)  
Time: 0.164 ms  
digoal=# select info from (select unnest(show_trgm(info)) as info from trgm_test where id=2) t where info=any(show_trgm('el'));  
 info   
------  
(0 rows)  
Time: 0.280 ms  
```  
对照以下结果以及以上结果, gin,gist索引不是简单的trgm拆分后的array gin索引. 否则el将检索不到.  
```  
digoal=# explain analyze select * from trgm_test where info ~ 'el';  
                                                 QUERY PLAN                                                   
------------------------------------------------------------------------------------------------------------  
 Seq Scan on trgm_test  (cost=0.00..2084.03 rows=20000 width=36) (actual time=0.014..97.282 rows=2 loops=1)  
   Filter: (info ~ 'el'::text)  
   Rows Removed by Filter: 100000  
 Total runtime: 97.309 ms  
(4 rows)  
Time: 97.874 ms  
digoal=# select * from trgm_test where info ~ 'el';  
 id |                  info                     
----+-----------------------------------------  
  1 | abc刘德华def, hello world, hello china.  
  2 | abc张学友def, hello world, hello china.  
(2 rows)  
Time: 95.281 ms  
digoal=# set enable_seqscan=off;  
SET  
digoal=# explain analyze select * from trgm_test where info ~ 'el';  
                                                              QUERY PLAN                                                              
------------------------------------------------------------------------------------------------------------------------------------  
---  
 Bitmap Heap Scan on trgm_test  (cost=27143.00..28227.00 rows=20000 width=36) (actual time=222.531..312.936 rows=2 loops=1)  
   Recheck Cond: (info ~ 'el'::text)  
   Rows Removed by Index Recheck: 100000  
   ->  Bitmap Index Scan on trgm_test_gin  (cost=0.00..27138.00 rows=20000 width=0) (actual time=222.401..222.401 rows=100002 loops=  
1)  
         Index Cond: (info ~ 'el'::text)  
 Total runtime: 312.988 ms  
(6 rows)  
digoal=# select * from trgm_test where info ~ 'el';  
 id |                  info                     
----+-----------------------------------------  
  1 | abc刘德华def, hello world, hello china.  
  2 | abc张学友def, hello world, hello china.  
(2 rows)  
```  
和trgm_limit也无关. 因为以下查询的匹配度小于limit 0.3, 但是走索引依然匹配了.  
```  
postgres=# explain analyze select *,similarity(info,'刘德华') from trgm_test where info ~ '刘德华';  
                                                      QUERY PLAN                                                         
-----------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on trgm_test  (cost=6.08..25.13 rows=10 width=36) (actual time=0.063..0.064 rows=1 loops=1)  
   Recheck Cond: (info ~ '刘德华'::text)  
   ->  Bitmap Index Scan on trgm_test_gin  (cost=0.00..6.08 rows=10 width=0) (actual time=0.046..0.046 rows=1 loops=1)  
         Index Cond: (info ~ '刘德华'::text)  
 Total runtime: 0.077 ms  
(5 rows)  
postgres=# select *,similarity(info,'刘德华') from trgm_test where info ~ '刘德华';  
 id |                  info                   | similarity   
----+-----------------------------------------+------------  
  1 | abc刘德华def, hello world, hello china. |  0.0322581  
(1 row)  
postgres=# select show_limit();  
 show_limit   
------------  
        0.3  
(1 row)  
```  
匹配度越高, 速度越快.  
```  
digoal=# select * from trgm_test where info ~ 'hello';  
 id |                  info                     
----+-----------------------------------------  
  1 | abc刘德华def, hello world, hello china.  
  2 | abc张学友def, hello world, hello china.  
(2 rows)  
Time: 0.637 ms  
digoal=# explain analyze select * from trgm_test where info ~ 'hello';  
                                                        QUERY PLAN                                                          
--------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on trgm_test  (cost=19.24..252.15 rows=160 width=36) (actual time=0.049..0.051 rows=2 loops=1)  
   Recheck Cond: (info ~ 'hello'::text)  
   ->  Bitmap Index Scan on trgm_test_gin  (cost=0.00..19.20 rows=160 width=0) (actual time=0.043..0.043 rows=2 loops=1)  
         Index Cond: (info ~ 'hello'::text)  
 Total runtime: 0.071 ms  
(5 rows)  
Time: 0.312 ms  
```  
### gist 索引  
```  
digoal=# drop index trgm_test_gin ;  
DROP INDEX  
digoal=# create index trgm_test_gist on trgm_test using gist(info gist_trgm_ops);  
CREATE INDEX  
digoal=# explain analyze select * from trgm_test where info ~ 'hello';  
                                                        QUERY PLAN                                                           
---------------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on trgm_test  (cost=9.52..242.43 rows=160 width=36) (actual time=18.155..18.159 rows=2 loops=1)  
   Recheck Cond: (info ~ 'hello'::text)  
   ->  Bitmap Index Scan on trgm_test_gist  (cost=0.00..9.48 rows=160 width=0) (actual time=18.126..18.126 rows=2 loops=1)  
         Index Cond: (info ~ 'hello'::text)  
 Total runtime: 18.204 ms  
(5 rows)  
```  
索引大小  
```  
digoal=# \dt+ trgm_test  
                       List of relations  
 Schema |   Name    | Type  |  Owner   |  Size   | Description   
--------+-----------+-------+----------+---------+-------------  
 public | trgm_test | table | postgres | 6704 kB |   
(1 row)  
digoal=# \di+ trgm_test_gist   
                              List of relations  
 Schema |     Name      | Type  |  Owner   |   Table   | Size  | Description   
--------+---------------+-------+----------+-----------+-------+-------------  
 public | trgm_test_gist | index | postgres | trgm_test | 18 MB |   
(1 row)  
digoal=# \di+ trgm_test_gin  