259
中的下标是1，加上一个 Base 值1，Mul的导出序号为2。如果一个模块A导入了 Math.dll
社PPV料里X。PPV中PPV
1。当动态链接器进行链接时，它只需要根据模块A的导入表中保存的序号1，减去Math.dll
的 Base值，得到下标0，然后就可以直接在 Math.dll 的EAT中找到Add 函数的 RVA。
使用序号导入导出的好处是明显的，那就是省去了函数名查找过程，函数名表也不需要
保存在内存中了。那么使用序号导入导出的间题是什么？最大的间题是，一个函数的序号可
能会变化。假设某一次更新中，Math.dIl里面添加了一个函数或者剩除了一个函数，那么原
先函数的序号可能会因此发生变化，从而导致已有的应用程序运行出现问题。一种解决的方
案是，由程序员手工指定每个导出函数的序号，比如我们指定Add的导出序号为1，Mul
为2，Sub为3，以后加入函数则指定一个与其他函数不同的唯一的序号，如果剩除一个函
数，那么保持现有函数的序号不变。这种手工指定函数导出序号的方法可以通过链接器的.def
文件实现，我们在后面关于DLL优化的章节中还会再详细介绍。
间和并不明显的查找速度的提升（相对于现在的硬件条件），实在得不偿失。于是现在的DLL
基本都不采用序号作为导入导出的手段，而是直接使用符号名。这种手段就显得直观多了，
史加使于理解和程序调试（试想在调试DLL时看到一个导入函数是序号1或者是Add哪个
更容易理解？），而且它不需要额外的手工维护，省去了很多繁琐的工作。
虽然现在的DLL导出方式基本都是使用符号名，但是实际上序号的导出方式仍然没有
被抛弃。为了保持向后兼容性，序号导出方式仍然被保留，相反，符号名作为导出方式是可
选的。一个DLL中的每一个导出函数都有一个对应唯一的序号值，而导出函数名却是可选
的，也就是说一个导出函数肯定有一个序号值（序号值是肯定有的，因为函数在EAT的下
标加上Base就是序号值），但是可以没有函数名。
了解了序号的概念之后，我们又回到了原来的那个问题，函数名和函数地址之间的关系
是怎样的呢？符号名表和EAT的元素之间的映射关系又是怎样的？
上面问题的答案必须通过第三个表，即名字序号对应表。这个表拥有与函数名表一样多
数目的元素，每个元素就是对应的函数名表中的函数名所对应的序号值，比如Ad的序号
值是1，Mul的序号值是2等。实际上它就是一个函数名与序号的对应关系表。
那么使用函数名作为导入导出方式，动态链接器如何查找函数的RVA呢？假设模块A
导入了Mathdll 中的Add函数，那么A的导入表中就保存了“Add”这个函数名。当进行
动态链接时，动态链接器在Math.dll 的函数名表中进行二分查找，找到“Add”函数，然后
在名字序号对应表中找到“Add”所对应的序号，即1，减去Math.dll 的Base 值1，结果为
0.然后在EAT中找到下标0的元素，即*Add”的RVA为0x1000。
程序员的自我修养一链接、装载与库
---
## Page 283
260
第9章Windows下的动态链接
从上面的Math.dl来看，3个表的结构都非常规则，元素数目相等，而且是一一对应的。
但实际上这3个表的内容有可能变得不是很规则：假设我们在Mathdl中添加了一个函数叫
做Div，它的RVA为0x1030，并且将它的序号值指定为5。为了保持原来的儿个导出函数
的序号值不变，我们手工指定原来的3个导出函数的序号值分别为Add=1.Mul=2，Sub=
3。那么Math.dll的3个表的内客将如图9-3所示。
Characteristics
Name
"Math.dll"
Base = 1
NumberOfFunctions= 5
= sWeNOq
AddressOfFunctions
10001020101001030
AddDiMuSub
AddressOINameOrdlinals
1523
Export Table of Math.dll
图9-3Math.dll导出表结构（带序号）
对于链接器来说，它在链接输出DLL时需要知道哪些函数和变量是要被导出的，因为
对于PE来说，默认情况下，全局函数和变量是不导出的。link链接器提供了了一个
“/EXPORT”的参数可以指定导出符号，比如；
1ink math.obj /DLL /EXPORT:_Add
就表示在产生math.dlI时导出符号_Add。另外一种导出符号的方法是使用MSVC的
_declspec（dllexport）扩展，它实际上是通过目标文件的编译器指示来实现的（还记得前面关
导出相应的函数：
dumpbin /DIRECTIVES math.obj
Copyright (C) Microsoft Corporation. Al1 rights reserved.
Dunp of file math.obj
Pile TYpe1 COFF OBJECT
Linker Directives
程序员的自我修养一链接、装载与库
---
## Page 284
9.2符号导出导入表
261
/DEFAULTLIB: *OLDNAMES*
/DEFAULTLIB: *LIBCMT*
/EXPORT:_Add
/EXPORT:_Mu1
/EXPORT:_Sub
/EXPORT:_Div
9.2.2EXP文件
在创建DLL的同时也会得到一个EXP文件，这个文件实际上是链接器在创建DLL时
的临时文件。链接器在创建DLL时与静态链接时一样采用两遍扫描过程，DLL一般都有导
出符号，链接器在第一遍时会遍历所有的目标文件并且收集所有导出符号信息并且创建
的段中，这个目标文件就是EXP文件，EXP文件实际上是一个标准的PE/COFF目标文件，
只不过它的扩展名不是.obj而是exp。在第二遍时，链接器就把这个EXP文件当作普通目标
文件一样，与其他输入的目标文件链接在一起并且输出DLL，这时候EXP文件中的”edata”
段也就会被输出到DLL文件中并且成为导出表。不过一般现在链接器很少会在DLL中单独
保留“edata”段，而是把它合并到只读数据段“rdata”中。
9.2.3导出重定向
DLL有一个很有意思的机制叫做导出重定向（ExportForwarding），顾名思义就是将某
个导出符号重定向到另外一个DLL。比如在Windows XP系统中，KERNEL32.DLL 中的
HeapAlloc 函数被重新定向到了 NTDLL.DLL中的 RuAllocHeap 函数，调用 HeapAlloc 函数
相当于调用RuAllocHeap函数。如果我们要重新定向某个函数，可以使用模块定义文件，比
如HeapAlloc的重定向可以定义下面这样一个“DEF”文件：
EXPORTS
HeapA11oc = NrDLL .Rt1A11ocHeap
导出重定向的实现机制也很简单，正常情况下，导出表的地址数组中包含的是函数的
RVA，但是如果这个RVA指向的位置位于导出表中（我们可以得到导出表的起始RVA和大
小），那么表示这个符号被重定向了，被重定向了的符号的RVA并不代表该函数的地址，面
是指向一个ASCII的字符串，这个字符串在导出表中，它是符号重定向后的DLL文件名和
符号名。比如在这个例子中，这个字符串就是“NTDLLRtAllocHeap”。
9.2.4导入表
如果我们在某个程序中使用到了来自DLL的函数或者变量，那么我们就把这种行为叫
程序员的自我修养一链接、装载与库
---
## Page 285
262
第9章Windows下的动态链接
）
保存着这些变量和函数的真正地址。Windows中也有类似的机制，它的名称更为直接，叫做
导入表（Import Table）。当某个PE文件被加载时，Windows 加载器的其中一个任务就是将
所有需要导入的函数地址确定并且将导入表中的元素调整到正确的地址，以实现动态链接的
过程。
我们可以使用dumpbin来查看一个模块依赖于哪些DLL，又导入了哪些函数：
Microsoft (R) C0FF/PE Dumper Version 9.00.21022.08
dumpbin /IMPORTS Math.d11
Copyright (C) Microsoft Corporation. All rights reserved.
Dump of Eile Math.d11
File Type: DLL
Section contains the following imports1
KERNBL32 ,d11
1000B000 Inport Address Table
1000c5BC Inport Name Tab1e
0 tine date stamp
0 Index of first forwarder reference
146 GetCurrentThreadId
110 (
GetCommandLineA
912
HeapFree
210 HeapA11oc
1E9
GetVersionExA
1A3
Get ProcessHeap
1A0(
17F
Get ProcAddre88
B9
ExitProcess
363
TlsA1loc
366
TlsSetValue
22C
364
InterlockedIncrement
TlsFree
328 SetLastRrror
171
GetLastBrror
InterlockedDecrement
324 SetHandleCount
95f
S1eep
可以看到 Math.dlI 从 Kermel32.dll 中导入了诸如 GetCurrentThreadld、GetCommandLineA
等函数（大约有数十个，这里省略了一部分）。可能你会觉得很奇怪，明明我们在Mathc里
面没有用到这些函数，怎么会出现在导入列表之中？这是由于我们在构建WindowsDLL时，
还链接了支持DLL运行的基本运行库，这个基本运行库需要用到Kermel32.dll，所以就有了
程序员的自我修养一链接、装载与库
---
## Page 286
9.2符号导出导入表
263
这些导入函数。
在Windows中，系统的装载器会确保任何一个模块的依赖条件都得到满足，即每个PE
文件所依赖的文件都将被装载。比如一般Windows程序都会依赖于KERNEL32.DLL，而
KERNEL32.DLL又会导入NTDLL.DLL，即依赖于NTDLL.DLL，那么Windows 在加载该
程序时确保这两个DLL都被加载。如果程序用到了WindowsGDI，那么就会需要从
GDI32.DLL中导入函数，而GDI32.DLL又依赖于USER32.DLL、ADVAPI32.DLL、
NTDLL.DLL和KERNEL32.DLL，Windows将会保证这些依赖关系的正确，并且保证所有
的导入符号都被正确地解析，在这个动态链接过程中，如果某个被依教的模块无法正确加载，
行该进程。
在PE文件中，导入表是一个IMAGE_IMPORT_DESCRIPTOR的结构体数组，每一个
IMAGE_IMPORT_DESCRIPTOR结构对应一个被导入的DLL。这个结构体被定义在
“Winnth”中：
typedef struct {
DWORD
OriginalPirstThunk;
DWORD
DWORD
TimeDateStanp;
DWORD
ForwarderChain;
DWORD
FirstThunk;
Nane;
}IMAGE_IMPORT_DESCRIPTOR;
中最重要的结构，IAT中每个元素对应一个被导入的符号，元素的值在不同的情况下有不同
的含义。在动态链接器刚完成映射还没有开始重定位和符号解析时，IAT中的元素值表示相
对应的导入符号的序号或者是符号名：当Windows的动态链接器在完成该模块的链接时，
元素值会被动态链接器改写成该符号的真正地址，从这一点看，导入地址数组与ELF中的
GOT非常类似。
那么我们如何判断导入地址数组的元素中包含的是导入符号的序号还是符号的名字？
事实上我们可以看这个元素的最高位，对于32位的PE米说，如果最高位被置1，那么低
31位值就是导入符号的序号值：如果没有，那幺元素的值是指向一个叫做
IMAGE_IMPORT_BY_NAME 结构的 RVA。 IMAGE_IMPORT_BY_NAME 是由个 WORD
和一个字符串组成，那个WORD值表示“Hint”值，即导入符号最有可能的序号值，后面
的字符串是符号名。当使用符号名导入时，动态链接器会先使用“Hint”值的提示去定位该
符号在目标导出表中的位置，如果刚好是所需要的符号，那么就命中：如果没有命中，那么
就按照正常的二分查找方式进行符号查找。
在 IMAGE_IMPORT_DESCRIPTOR 结构中，还有个指针 OriginalFirstThrunk 指向
程序员的自我修养一链接、装载与库
---
## Page 287
264
第9章Windows下的动态链接
个数组叫做导入名称表（Impor Name Table），简称INT，这个数细跟IAT一摸一样，里面
的数值也一样。那么为什么要多保存一份IAT的副本呢？答案我们将在后面的DLL绑定中
揭晓（见图9-4）。
INI
AT
2
S
OriginalFirstThunk
Timestamp
ForwandChain
Math.dl
Name
FirstThunk
INT
AT
OriginalFirstThunk
Timestamp
FonwardChain
Kemel32.dll° 4
Name
216
FistThunk
Import Table of TestMath.exe
图9-4TestMath.exe 导入表
Windows的动态链接器会在装载一个模块的时候，改写导入表中的IAT，这一点很像
ELF 中的.got。其区别是，PE的导入表一般是只读的，它往往位于“rdata”这样的段中。
这样就产生了一个问题，对于一个只读的段，动态链接器是怎么改写它的呢？解决方法是这
样的，对于Windows来说，由于它的动态链接器其实是Windows 内核的一部分，所以它可
以随心所欲地修改PE装载以后的任意一部分内容，包括内容和它的页面属性。Windows的
做法是，在装载时，将导入表所在的位置的页面改成可读写的，·旦导入表的IAT被改写完
毕，再将这些页面设回至只读属性。从某些角度来看，PE的做法比ELF要更加安全一些，
因为ELF运行程序随意修改.got，面PE则不允许。
延迟载入（DelayedLoad）
VisualC++6.0开始引入了一个叫做延迟载入的新功能，这个功能有点类似于隐式装载
入非常类似的数据。但是操作系统会忽略这些数据。当延迟载入的API第一次被调用时，
由链接器添加的特殊的桩代码就会启动，这个桩代码负责对DLL的装载工作。然后这个桩
代码通过调用GetProcAddress来找到被调用API的地址。另外MSVC还做了一些额外的优