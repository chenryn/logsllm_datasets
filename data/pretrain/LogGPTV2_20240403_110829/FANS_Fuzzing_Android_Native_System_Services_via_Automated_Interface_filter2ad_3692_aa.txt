# Title: FANS: Fuzzing Android Native System Services via Automated Interface Analysis

## Authors:
- Baozheng Liu<sup>1,2âˆ—</sup>
- Chao Zhang<sup>1,2</sup>
- Guang Gong<sup>3</sup>
- Yishun Zeng<sup>1,2</sup>
- Haifeng Ruan<sup>4</sup>
- Jianwei Zhuge<sup>1,2</sup>

<sup>1</sup>Institute of Network Science and Cyberspace, Tsinghua University  
<sup>2</sup>Beijing National Research Center for Information Science and Technology  
<sup>3</sup>Alpha Lab, 360 Internet Security Center  
<sup>4</sup>Department of Computer Science and Technology, Tsinghua University

## Abstract
Android native system services provide essential support and fundamental functionalities for user applications. Discovering vulnerabilities in these services is crucial for Android security. Fuzzing is a popular method for vulnerability discovery, but it faces several challenges when applied to Android native system services. These challenges include recognizing all service-specific interfaces, generating interface-specific test cases, and ensuring that the test cases satisfy both the interface model and semantic requirements.

In this paper, we propose FANS, an automated generation-based fuzzing solution to find vulnerabilities in Android native system services. FANS first collects all interfaces in the target services, including deeply nested multi-level interfaces. It then automatically extracts interface models, including transaction codes, variable names, and types from the abstract syntax tree (AST) of the target interfaces. FANS infers variable dependencies within transactions and interface dependencies using the generated and used relationships. Finally, it generates sequences of transactions with valid formats and semantics to test the interfaces of the target services.

We implemented a prototype of FANS and evaluated it on six smartphones running Android 9.0.0_r46. FANS discovered 30 unique vulnerabilities, 20 of which have been confirmed by Google. Additionally, FANS identified 138 unique Java exceptions during fuzzing.

## 1. Introduction
Android native system services are critical for providing essential functionalities to user applications. Ensuring their security is paramount, as vulnerabilities in these services can lead to severe security breaches, such as privilege escalation. Fuzzing is a widely used technique for discovering vulnerabilities, but it faces specific challenges when applied to Android native system services. These challenges include:

1. **Multi-Level Interface Recognition**: Recognizing all top-level and nested multi-level interfaces.
2. **Interface Model Extraction**: Automatically extracting the input and output formats and variable semantics for each transaction.
3. **Semantically-correct Input Generation**: Generating test cases that satisfy both the interface model and semantic requirements, including variable and interface dependencies.

In this paper, we introduce FANS, an automated generation-based fuzzing solution designed to address these challenges. FANS systematically tests Android native system services by recognizing all interfaces, extracting interface models, and generating semantically correct test cases.

## 2. Background

### 2.1. Android System Services
Android system services are essential components that provide core functionalities. They can be categorized into two types based on the programming language: Java system services and native system services. Native system services, primarily written in C++, include services like the camera service. These services often interact with Java code and vice versa.

System services are further divided into three domains: normal, vendor, and hardware. The normal domain includes services directly located in the Android Open Source Project (AOSP).

### 2.2. Research Scope
This paper focuses on discovering vulnerabilities in Android native system services registered in the service manager and belonging to the normal domain. Our approach can also be applied to other types of services due to the shared communication and interface architecture.

## 3. Design

### 3.1. Design Choices
FANS is designed to address the challenges of fuzzing Android native system services. Key design choices include:

- **RPC-centric Testing**: We test services via the Remote Procedure Call (RPC) interface, which is the same method an adversary would use.
- **Generation-based Fuzzing**: We generate test cases according to an input specification, ensuring valid and effective test cases.
- **Learning Input Models from Code**: We analyze Android source code to automatically retrieve the input model, avoiding the need for manual grammar files.

### 3.2. Overview
FANS consists of four main components:

1. **Interface Collector**: Collects all interfaces in the target services, including top-level and multi-level interfaces.
2. **Interface Model Extractor**: Extracts input and output formats and variable semantics for each transaction.
3. **Dependency Inferer**: Infers interface and variable dependencies.
4. **Fuzzer Engine**: Generates and invokes transactions to fuzz the native system services.

### 3.3. Interface Collector
The Interface Collector identifies all interfaces in the target services by scanning the `onTransact` method, which dispatches transactions. This method is present in both top-level and multi-level interfaces.

## 4. Implementation and Evaluation
We implemented a prototype of FANS and evaluated it on six smartphones running Android 9.0.0_r46. Over 30 days, FANS discovered 30 unique vulnerabilities, 20 of which were confirmed by Google. Additionally, FANS identified 138 unique Java exceptions, indicating potential issues in Java applications that depend on native system services.

## 5. Contributions
- **Systematic Investigation**: We investigated the dependency between interfaces in Android native system services and uncovered deeper multi-level interfaces.
- **Automatic Extraction**: We proposed a method to automatically extract input interface models and semantics from AST, applicable to other interface-based programs.
- **Dependency Inference**: We developed a method to infer inter-transaction dependencies using variable name and type knowledge.
- **Prototype Implementation**: We implemented a prototype of FANS, which has found 30 unique native vulnerabilities and 138 unique Java exceptions.

## 6. Conclusion
FANS is an automated generation-based fuzzing solution designed to discover vulnerabilities in Android native system services. By addressing the challenges of multi-level interface recognition, interface model extraction, and semantically-correct input generation, FANS provides a comprehensive and effective approach to enhancing Android security.

For future research, we have open-sourced the FANS prototype at [https://github.com/iromise/fans](https://github.com/iromise/fans).