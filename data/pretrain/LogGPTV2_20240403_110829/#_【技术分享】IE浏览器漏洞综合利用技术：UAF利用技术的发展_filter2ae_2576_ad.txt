        void* pTypeArrayData;       //Arraybuffer Data
        DWORD size;                 //array bytes
        DWORD var_10;
        DWORD var_11;
    }
其中Arraybuffer Data就是直接保存数据的区域，并且这块内存是分配在process Heap上的。
一旦可以预估出对象的地址那么就可以通过把UAF转化为绝对地址写去篡改Int32Array对象的长度域，来实现Arraybuffer
Data的越界读写。因为Arraybuffer Data是储存在process Heap中的因此需要一个分配在process
Heap上的对象来配合利用。这里作者使用的是LargeHeapBlock，因为这个对象处于process
Heap中，并且恰好存在合适的域来实现任意地址读写。我们可以看出这种利用jscript9的方法明显比之前的做法要更稳定和易于操作。
至于UAF到读写的转化，与我们前面提过的大体相同就是跟踪漏洞触发附近的执行流程寻找有没有合适的转化原语(opcode)。在转化过程中可能会导致crash的问题，成功利用写入原语之后会发生虚函数调用，如果虚表被破坏的话虚函数调用就会导致crash。对此ga1ois给出了解决方案：
之后，在同年的Hitcon上exp-sky进一步发展了这一技术，代码和文档可以在作者github中找到(https://github.com/exp-sky)。与ga1ois的不同之处在于exp-sky没有使用typed array进行布局，而是将IntArray
Object作为目标对象进行布局。这一操作的优点在于IntArray全部都是基于custom
heap进行操作的，如果你还记得我们上面讲的内容的话，你应该知道我们在对typed array进行篡改操作后进行越界编辑的是Arraybuffer
Data，而这块内存是存放于process heap中的，这就意味着我们还要进一步的对process heap进行布局，而这种方法则完全没有这个必要。
    Struct Array_Head 
    { 
        void * p_viable; 
        DOWRD var_2; 
        DOWRD var_3; 
        DOWRD var_4; 
        DOWRD size; 
        DOWRD p_first_buffer; 
        DOWRD p_last_buffer; 
        DOWRD var_8; 
        DOWRD var_9; 
        DOWRD var_10; 
    }
    Struct ArrayBuffer 
    { 
        DWORD var_11; 
        DWORD size; 
        DWORD buffer_size; 
        DWORD next_buffer; 
        DWORD data[buffer_size]; //data 
    }
注意这两个结构都处于Custom Heap并且是分配在一起的。
因此喷射IntArray相比前面的方法要更方便也更容易控制，由于ArrayBuffer对象存在有保存当前缓冲区大小的域(buffer_size)，只要通过绝对地址写改写这个域为很大就可以转化为任意内存读写了，之后再修改相邻块的域这一点与前面的技术是相同的。
总体来说，这一时期的利用思路基本都在于喷射一些关键的对象，并结合各种feng
shui技术（尤其是jscript9中的）进行布局。然后试图把UAF转化为绝对地址写，来写我们喷射对象的关键域从而实现从UAF到任意地址读写的跨越。
一旦获得了任意地址读写就相当于可以让攻击者进行随意利用，这时各种漏洞缓解措施就不再能够阻挡攻击者的脚步了。
这里我使用了一张demi6od在《Smashing the Browser》议题中使用的图，这张图很好的说明了我们所讲的思路。
**后记**
其实这一系列的文章，我在去年10月份的时候就已经写完了，但是一直在硬盘里放了近半年都没有投出来。我主要是考虑到这系列文章涉及的话题太广、内容太多、历史又太悠久，考虑到自己仅是个大二学生水平较低、接触漏洞方面也不久，唯恐内容中出现错误和纰漏。但是做了一番修改后我还是鼓起勇气发出来了，希望大家能够帮忙修正文章中错误和提出修改建议，可以通过微博私信给我
id:Ox9A82。
**Reference**
《The Art of Leaks – The Return of Heap Feng Shui》Gaois
[https://cansecwest.com/slides/2014/The%20Art%20of%20Leaks%20‐%20read%20version%
20‐%20Yoyo.pdf](https://cansecwest.com/slides/2014/The%20Art%20of%20Leaks%20%E2%80%90%20read%20version%%2020%E2%80%90%20Yoyo.pdf)
《IE 11 0day & Windows 8.1 Exploit》exp-sky
《Smashing the Browser》demi6od
《浏览器漏洞攻防对抗的艺术》仙果
《Exploiting Internet Explorer11 64-bit on Windows 8.1 Preview》
《ASLR BYPASS APOCALYPSE IN RECENT ZERO-DAY EXPLOITS》
《A BROWSER IS ONLY AS STRONG AS ITS WEAKEST BYTE》
《A browser is only as strong as its weakest byte – Part 2》
《Smashing the Heap with Vector:Advanced Exploitation Technique in Recent Flash
Zero-day Attack》
《IE安全系列：IE浏览器的技术变迁（上）》
《IE安全系列：IE浏览器的技术变迁（下）》
《攻破Windows 8.1的64位IE – 分享Pwn2Own黑客大赛成果》
《Pwn2Own 2010 Windows 7 Internet Explorer 8 exploit》
《Flash Vector漏洞利用的蜕变》
《Array Object Heap Spraying》
传送门
* * *
[【技术分享】IE浏览器漏洞综合利用技术：堆喷射技术](http://bobao.360.cn/learning/detail/3656.html)