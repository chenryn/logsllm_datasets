from a single entry point. In Android, entry points include activities
(i.e., the onCreate() method of the android.app.Activity class),
callback methods for UI interactions (e.g., click of a button), con-
tent providers (app data managers), services (background threads),
and broadcast receivers (system-wide broadcast events). These entry
points can be identified by parsing the manifest files and analyzing
the code. The reasoning is that these entry points represent user-
triggered events, or significant activities that should be made aware
to users (e.g., background services). Each functionality should con-
tain a sequence of instructions involving some usage of permissions.
We believe it is a natural and reasonable place to request permissions;
this practice is aligned with Google’s guidelines and is actually used
in many real-world apps that perform in-context permission requests
(e.g., WhatsApp Messenger [46]). As most existing static analysis
tools for Android already support the identification of all the entry
points of an app and building a complete call graph ([3],[40]), we
omit the details here.
Identify Permissions: The first step in identifying the required per-
missions, is to parse the manifest file and find out the target API
level of the app. Note that although our tool helps migrate the app
to the new permission model of Android M (API level 23), this step
is still needed to support the newer version of the SDK (i.e., if the
app’s current targetSdkVersion is lower than 23, we assume 23;
else, we use the app’s targetSdkVersion). The API level is used
to map SDK APIs to their required permissions. Specifically, we
use the latest version of PScout [9] to generate the database that
maps a permission to a set of SDK APIs that require this permis-
sion. There is no version of PScout for Android M yet. However
most apps we test were developed for previous versions of Android.
For cases where apps were developed for M, we check if they do
an Android version check for API calls that were made available
beginning Android M, and then explore the Android code manually
to see if they need dangerous permissions. Note, that our dataset did
not contain any app developed with the minimumSdkVersion equal
to 23.
With this mapping information, identifying permissions required
by a functionality is straightforward. In particular, given the complete
static call graph, we use a standard reachability analysis for Android
apps to identify all the potential invocable SDK APIs from the entry
point of a functionality. Then we use the permission mapping to
generate all the required permission(s) for this functionality.
Third-Party Libraries: Some third-party libraries such as adver-
tisement libraries (e.g., AdMob) and analytic services could also
access protected resources (e.g., location). Because these libraries
are usually delivered in binary (bytecode) format, we need addi-
tional steps and different analysis tools to identify the permission(s)
they require. Specifically, we first collect all calls to the third-party
libraries. Then we decompile the byte code of the libraries. Finally,
we perform the same reachability analysis starting from the invoked
methods to identify all the SDK APIs that may be invoked and map
them to the required permissions, which is similar to Stowaway [14].
Droid M+ currently does not support native libraries.
4.2 Permission Annotations
As per the Google guidelines [17] and prior studies [41], users are
more likely to grant a permission if the developer provides an expla-
nation for why it is needed. Developers should also provide feedback
if a permission request is denied and accompany this feedback with
a button leading to the system settings for enabling the permis-
sion(s). Unfortunately, while it is easy to automatically identify all
the required permission(s) of a functionality, automatically gener-
ating the corresponding explanations and feedback is much harder.
Hence, our current design seeks developers’ help for generating the
explanations and the feedback. To ease this process, we use the cus-
tomizable Java annotation system [32] to capture the explanations.
Lst. 1 provides an example of the annotation we use for declaring
dangerous permissions and providing their justifications. Starting
with @Permission, the annotation includes: (a) a name for the func-
tionality; (b) an array of permissions, where each array element
is a tuple . perm denotes the requested
permission, reason denotes the optional justification, and feedback
denotes the optional message to be shown if the permission is denied.
For example, the “Attach photo to task” functionality of Any.Do
could be annotated as:
Listing 1: Permission Annotation.
1 @Permission(
2
3
4
functionality ={”Attach photo to task”},
request ={
{”READ EXTERNAL STORAGE”, ”Require storage to access your photos.”, ”You won’t be
able to attach photos.”}
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea770// code
5 })
6 public void fromGallery () {
7
8 }
Automatic Population: Assuming that a functionality has a sin-
gle purpose, we ask developers to only provide the annotation
once, as all accesses to the same protected API will share the same
purpose. Given this, we automatically place the annotation at the
entry point of each functionality, with two exceptions viz., back-
ground services and libraries. Background services are different
since they are not a subclass of Activity and thus, cannot invoke
the requestPermission method to prompt users. Libraries are dif-
ferent for many reasons. First and importantly, a library may be
used in many functionalities, including background threads. Be-
sides, the onRequestPermissionsResult method is bound to each
Activity, and so if a library is used in different Activities, it also
creates confusion. Second, it is unreasonable to ask first-party devel-
opers to provide explanations for why a third-party library needs a
permission(s). Instrumenting libraries distributed in binary format re-
quires additional effort. Thus, Droid M+ places the annotation at the
method where the background services are started (startService)
and where the library methods are invoked.
4.3 Compiler Extension
We use Droid M+’s compiler extension to interpret the permission
annotations and generate the corresponding code. For each required
permission, we use Google’s example code [19] as the template
towards generating the code:
Listing 2: Generated code.
// display feedback
} else {
}
return ;
} else {
WrapperMethod();
return ;
}
// end of template
// display reason
ActivityCompat. requestPermissions (...) ;
1 SuitableMethod (...) {
// begin of template
2
3
if (ActivityCompat. checkSelfPermission ( this , perm) !=
PackageManager.PERMISSION GRANTED) {
4
if (ActivityCompat.
5
shouldShowRequestPermissionRationale( this , perm)) {
6
7
8
9
10
11
12
13
14
15
16
17
18 }
19
20 @Override
21 public void onRequestPermissionsResult( int requestCode, String [] permissions ,
22
23
24
25
26
27
28
29
30
31
32 }
length will always be 1
if ( grantResults [0] == PackageManager.PERMISSION GRANTED) {
WrapperMethod();
} else {
}
return ;
int [] grantResults ) {
//
if ( permissions [0] == permission) {
// display feedback
}
Here the perm, reason, and feedback are from the annota-
tion. If the reason or the feedback is empty, we use the string
“{functionality} requires {perm}”. Our compiler extension en-
sures that the functionality cannot be empty.
While populating the template is straightforward, the challenge
is determining where the permission should be requested. In [28],
Livshits et al. proposed four properties for a valid prompt placement:
(a) Safe: Every access to the protected resource is preceded by a
prompt check; (b) Visible: No prompt is located within a background
task or a third-party library; (c) Frugal: A prompt is never invoked
unless followed by an access to a resource; and, (d) Not-repetitive:
A prompt is never invoked if the permission was already granted.
In Android M, since a call to checkSelfPermission always guar-
antees the not-repetitive property and we have already annotated
background services and calls libraries differently, we will focus on
safety and frugality. To be frugal, we want to place the permission
request as close to the resource access as possible, which also makes
the request more likely to be in-context. However, the current design
of the Android M’s permission model makes it hard to implement
this placement strategy. In particular, as already shown in the code
template, requestPermissions is an asynchronous method and thus,
when it is invoked, the execution will not be blocked. Hence when
the execution reaches the next statement, the permission(s) may
not be granted yet and invoking the protected API can crash the
app. The standard way is to immediately exit the current method
after requesting the permission. At the same time, after the user
responds to the permission requests, the execution is resumed in
the onRequestPermissionsResult callback function instead of the
statement following requestPermissions. The problem is that if
local variables are used in the access to the protected APIs, then they
will not be accessible in the callback function; similarly and more
fatally, if the method that accesses protected API returns a value
(e.g., location), then we have no way to return that value to the caller.
Due to this problem, we choose to sacrifice some degree of frugality
to avoid the need to drastically refactor the code.
Placement Algorithm: For each functionality that has an annota-
tion, we use a placement algorithm to insert the “permission request-
ing” code. The algorithm is similar to the one proposed in [28],
with two key differences. First, as mentioned above, because of
framework support, we do not need to consider the non-repetitive
constraint. Second, our algorithm does not try to avoid third-party
libraries and background services because they are not annotated.
Instead, we walk up the dominator tree to avoid each method whose
return value depends on the protected API and is used by its caller(s).
First, for each annotated functionality, we initialize a job queue
into which pairs  are inserted.
Here, a sensitive call denotes an invocation to a SDK API, a library
method, or a background service that require permission(s). For each
pair in the queue, we perform a backward search to check if the per-
mission has already been requested. Note that according to Android’s
documentation [18] because the permission group may change in
the future, developers should always request for every permission
even though another permission in the same permission group may
already be asked. Thus, when checking for existing permission re-
quests, we do not consider (1) whether a permission within the same
permission group has been requested and (2) whether a permis-
sion that implies current permission (e.g., WRITE EXTERNAL STORAGE
implies READ EXTERNAL STORAGE) has been requested.
If a permission has not been requested, we check whether the
current method is a suitable method. A method is suitable if (1) it
is a void method, (2) its return value has no dependencies on the
sensitive call, or (3) its return value will never be used. If the current
method is not suitable, for each call site of the current method, we
push a new job pair  into the queue.
Session 18: AndroidASIACCS’18, June 4–8, 2018, Incheon, Republic of Korea771Once a suitable method is found, we place the permission request
inside the method. We first create a wrapper method that replicates
the code from the sensitive call to the end (return) of that branch. If
the wrapper method depends on local variables, we use a map to store
those variables before requesting the permission and retrieve them
inside the wrapper method. After creating the wrapper method, we
insert the permission request template right before the sensitive call
and populate it with correct annotations and the generated wrapper
method, as suggested in Lst. 2. Note that although some of the
code after the template will become dead because the execution will
always return before reaching that code, our current design does
not try to eliminate it; instead, we rely on the existing dead code
elimination pass of the compiler to eliminate this unreachable code.
The above process is repeated until the queue is empty. Note that
because the entry point of a functionality is always a void method,
this loop is guaranteed to terminate.
Background Services: Droid M+’s placement algorithm can handle
almost all cases, but it cannot handle exported background services.
These are services that can be started through a “broadcasting intent”.
Since such services can be started by the Android framework, if they
require permissions, Droid M+ must request the permissions up-
front. We identify such services by parsing the manifest file. For
any service with attributes enabled = true and exported = true
and requires permission(s), we add the permission requests in the
onCreate method of the main Activity.
Denied Permissions: The Android M permission model places an
onus on the developer to correctly implement denied (or revoked)
permission call-backs. Droid M+ facilitates his by inserting the
skeleton code that needs to be filled out (as seen in Lst. 2). Google’s
guidelines suggest that developers should handle the denied branch
more gracefully than just displaying an error. We point out that Droid
M+ does not make the implementation of the handler for a denied
branch any easier or difficult. The developer has to still correctly
implement the handler for the denied branch. By default, when a per-
mission is denied, Droid M+ displays an error message and simply
exits; this will cause the onStop() of the app’s current activity to
be invoked to do any necessary bookkeeping before terminating. It
is not ideal as the user may need to restart the app. However, it at