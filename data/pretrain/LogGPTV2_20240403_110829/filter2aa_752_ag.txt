{ 
  return 3; 
} 
代码列表 2.8 （app.c）一个使用库函数的程序 
int main () 
{ 
  return f (); 
} 
现在假设我们将 test.o 与其它一些对象文件合并生成了 libtest.a 存档文件。下面的命令
行不会正常工作： 
% gcc –o app –L. –ltest app.o 
app.o: In function ‘main’: 
app.o(.text+0x4): undefined reference to ‘f’ 
collect2: ld returned 1 exit status 
错误信息指出虽然 libtest.a 中包含了一个 f 的定义，链接器并没有找到它。这是因为
libtest.a 在第一次出现在命令行的时候就被搜索了，而这个时候链接器并没有发现对 f 的任
何引用。 
而如果我们稍微更改一下命令行，则不会再有错误消息出现： 
% gcc –o app app.o –L. –ltest 
这是因为 app.o 中对 f 的引用导致连接器将 libtest.a 中的 test.o 包含在生成的执行文件
中。 
2.3.2 共享库 
共享库（shared library，也被称为共享对象 shared object 或动态链接库 dynamically linked 
library）在某种程度上与由一组对象文件生成的打包文件相当类似。不过，两者之间的区别
也是非常明显的。最本质的区别在于，当一个共享库被链接到程序中的时候，程序本身并不
会包含共享库中出现的代码。程序仅包含一个对共享库的引用。当系统中有多个程序链接到
同一个共享库的时候，它们都将引用这个共享库而不是将代码直接包含在自身程序中——正
因为如此，我们说这个库被所有这些程序“共享”。 
第二个重要的区别在于，共享库不仅仅是对象文件的简单组合。当使用的时候，链接器
会从中寻找需要的部分进行链接，以匹配未定义的符号引用。而当生成共享库的时候，所有
对象文件被合成为一个单独的对象文件，从而使链接到这个库的程序总能包含库中的全部代
码，而不仅仅是所需要的部分。 
要创建一个共享库，你必须在编译那些用于生成共享库的对象时为编译器指定 –fPIC
选项。 
% gcc –c –fPIC test1.c 
www.AdvancedLinuxProgramming.com 
32
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
这里的 –fPIC 选项会通知编译器你要将得到的 test1.o 作为共享库的一部分。 
位置无关代码（Position-Independent Code） 
共享库中的函数在不同程序中可能被加载在不同的地址，因此共享库中的代码不能
依赖特定的加载地址（或位置）。作为程序员，这并不需要你自己操心；你只需要在编
译这些用于共享库的对象文件的时候，在编译器参数中指明 –fPIC。 
然后你将得到的对象文件合并成一个共享库： 
% gcc –shared –fPIC –o libtest.so test1.o test2.o 
这里 –shared 选项通知链接器生成共享库，而不是生成普通的可执行文件。共享库文
件通常使用 .so 作为后缀名，这里 so 表示共享对象（shared object）。与静态库文件相同，
文件名以 lib 开头，表示这是一个程序库文件。 
将程序链接到共享库与链接到静态库的方法并无二致。例如，当 libtest.so 位于当前目
录或者某个系统默认搜索目录时，下面这条命令可以将程序与它进行链接： 
% gcc –o app app-o –L. –ltest 
假设系统中同时有 libtest.a 和 libtest.so。这时链接器必须从两者中选择一个进行链接。
链接器会依次搜索每个文件夹（首先搜索 –L 选项指定的路径，然后是系统默认搜索路径）。
不论链接器发现了哪一个，它都会停止搜索过程。如果当时只找到了两者中的一个，链接器
会选择找到的那个进行链接。如果两个版本同时存在，除非你明确指定链接静态版本，链接
器会选择共享库版本进行链接。对链接器指定 –static 选项表示你希望使用静态版本。例如，
当使用下面的命令进行链接的时候，即使 libtest.so 同时存在，链接器仍将选择 libtest.a 进
行链接： 
% gcc –static –o app app.o –L. –ltest 
可以用 ldd 命令显示与一个程序建立了动态链接的库的列表。当程序运行的时候，这些
库必须存在系统中。注意 ldd 命令会输出一个特殊的、叫做 ld-linux.so 的库。它是 GNU/Linux
系统动态链接机制的组成部分。 
使用 LD_LIBRARY_PATH 
当你将一个程序与共享库进行动态链接的时候，链接器并不会将共享库的完整路径加入
得到的执行文件中，而是只记录共享库的名字。当程序实际运行的时候，系统会搜索并加载
这个共享库。默认情况下，系统只搜索 /lib 和 /usr/lib。如果某个链接到程序中的共享库被
安装在这些目录之外的地方，系统将无法找到这个共享库，并因此拒绝执行你的程序。 
一种解决方法是在链接的时候指明 –Wl,-rpath 参数。假设你用下面的命令进行链接： 
% gcc –o app app.o –L. –ltest –Wl,-rpath,/usr/local/lib 
当运行 app 的时候，系统会在 /usr/local/lib 中寻找所需的库文件。 
另外一个解决方案是在运行程序的时候设置LD_LIBRARY_PATH环境变量。与PATH
变量类似，LD_LIBRARY_PATH包含的是一组以冒号分割的目录列表。例如，假设我们将
LD_LIBRARY_PATH设为 /usr/local/lib:/opt/lib，则系统会在搜索默认路径 /lib和/usr/lib之
前搜索 /usr/local/lib和 /opt/lib目录。需要注意的是，如果在编译程序的时候设定了
LD_LIBRARY_PATH环境变量，链接器会在搜索 –L参数指定的路径之前搜索这个环境变
www.AdvancedLinuxProgramming.com 
33
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
量中指定的路径以寻找库文件。4
2.3.3 标准库 
即使你在程序链接阶段并没有指明任何库，几乎可以确信程序总会链接到某些共享库
中。这是因为 GCC 会自动将程序链接到标准 C 库 libc。标准 C 库的数学函数并未被包含在
libc 中；它们位于 libm 中，而这个库要求你明确指定才会链接到程序中。例如，要编译一
个使用了诸如 sin 和 cos 之类的三角函数的程序 compute.c，你需要执行这个命令： 
% gcc –o compute compute.c –lm 
如果你写的是一个 C++程序，并用 c++ 或 g++ 命令完成链接过程，你还将自动获得对
标准 C++库 libstdc++的链接。 
2.3.4 库依赖性 
经常出现这样的情况：一个库依赖另一个库。例如，许多 GNU/Linux 系统提供了 libtiff，
一个包含了读写 TIFF 格式图片的函数的库。这个库依次依赖 libjpeg（JPEG 图像函数库）
和 libz（压缩函数库）。 
列表 2.9 展示了一个非常简单的程序。它通过 libtiff 打开一个 TIFF 格式的图片。 
代码列表 2.9 （tifftest.c）使用 libtiff 
#include  
#include  
int main ( int argc, char** argv) 
{ 
  TIFF* tiff; 
  tiff = TIFFOpen (argv[1], “r”); 
  TIFFClose (tiff); 
  return 0; 
} 
将这份源码保存为 tifftest.c。要在编译时将这个程序链接到 libtiff 则应在链接程序命令
行中指定 –ltiff： 
% gcc –o tifftest tifftest.c –ltiff 
默认情况下，链接器会选择共享库版本的 libtiff。它通常位于 /usr/lib/libtiff.so。因为
libtiff 会引用 libjpeg 和 libz，这两个库的共享库版本也会被引入（共享库可以指向自己依赖
的其它共享库）。可以用 ldd 命令验证这一点： 
% ldd tifftest 
          libtiff.so.3 => /usr/lib/libtiff.so.3 (0x4001d000) 
          libc.so.6 => /lib/libc.so.6 (0x40060000) 
www.AdvancedLinuxProgramming.com 
34
4 在一些在线文档中可能你会看见对 LD_RUN_PATH环境变量的引用。不要相信它们；这个变量在
GNU/Linux系统中不起任何作用。 
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
          libjpeg.so.62 => /usr/lib/libjpeg.so.62 (0x40155000) 
          libz.so.1 => /usr/lib/libz.so.1 (0x40174000) 
          /lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000) 
而另一方面，静态库无法指向其它的库。如果你决定通过指定 –static 参数，将程序与
静态版本的 libtiff 链接时，你会得到这些关于“无法解析的符号”的错误信息： 
% gcc –static –o tifftest tifftest.c –ltiff 
/usr/bin/../lib/libtiff.a(tif_jpeg.o): 
In 
function 
‘TIFFjpeg_error_exit’: 
tif_jpeg.o(.text+0x2a): undefined reference to ‘jpeg_abort’ 
/usr/bin/../lib/libtiff.a(tif_jpeg.o): 
In 
function 
‘TIFFjpeg_create_compress’: 
tif_jpeg.o(.text+0x8d): undefined reference to ‘jpeg_std_error’ 
tif_jpeg.o(.text+0xcf): undefined reference to ‘jpeg_CreateCompress’ 
... 
要想将这个程序静态链接，你必须手工指定另外两个库： 
% gcc –static –o tifftest tifftest.c –ltiff –ljpeg –lz –lm 
有时候，两个库可能互相依赖。也就是说，第一个库可能引用了第二个库中定义的符号，
反之亦然。通常这种情况都是由于不良设计导致的；但是这种情况确实可能出现。在这种情
况下，你可以在命令行中多次指定同一个库。链接器会在每次读取到这个库的时候重新查找
库中的符号。例如，下面的命令会导致 libfoo.a 被多次扫描： 
% gcc –o app app.o –lfoo –lbar –lfoo 
因此，即使 libfooo.a 引用了 libbar.a 中定义的符号，且反之亦然，程序仍将被成功链接。 
2.3.5 优点与缺陷 
当你了解了两种类型的库的时候，你可能开始考虑实际使用哪一种。这里有一些你在选
择时必须记住的注意点。 
动态库的重要优点之一在于，为安装程序的系统节省了空间。假设你安装了 10 个程序，
而它们同时会利用同一个库，则使用共享库较之使用静态库将为系统节省大量的空间。如果
你选用静态库，则你将会在系统中随这十个程序保存十份静态库的副本。因此，使用共享库
可以节省磁盘空间。而且如果你的程序是从网络上下载的，使用共享库可以同时节省下载时
间。 
共享库与此相关的一个优势在于，程序员可以选择升级这个库而不必强令用户同时升级
所有依赖这个库的程序。例如，假设你写了一个用于处理 HTTP 连接的库。可能有许多程序
依赖这个库。如果你在库的代码中发现了 bug，你可以选择升级你的库。与此同时，所有使
用这个库的程序中的 bug 都会被修复；你不必像使用静态库那样重新链接所有这些程序。 
这些优点也许会让你认为应该尽量使用共享库。但是，仍然存在一些现实的理由让程序
选择链接到静态库。升级共享库同时会升级所有依赖程序的特点很可能成为一个缺陷。假设
你开发了一个用于处理关键性任务的程序，你可能应该选择静态链接你的程序以防止对系统
的升级影响到你的程序的运行。（否则，也许用户会升级系统中的共享库，由此影响到你程
序的运行，然后打电话到你的技术支持热线并责怪你的程序的错误。） 
如果你可能没有将库安装到 /lib 或 /usr/lib 的权限，你绝对应该重新考虑是否将你的库
www.AdvancedLinuxProgramming.com 
35
高级 Linux 程序设计·卷一·Linux 平台上的高级 UNIX 编程 
完美废人 译 
作为共享库发布。（除非你要求你的用户具有管理员权限，你的库将无法被安装到 /lib 或 
/usr/lib 目录。）而且，如果你不确定库最终被安装的位置，-Wl,rpath 的办法也无法起作用。
让你的用户去设置 LD_LIBRARY_PATH 对他们而言意味着额外的步骤。因为每个用户都
必须为自己设置这个环境变量，这将着实成为一个负担。 
每当你尝试发布一个程序的时候，你都不得不对这些有缺点进行权重并选择合适的形式
发布你的程序。 
2.3.6 动态加载与卸载 
有时，你可能希望在运行时加载一些代码，而不是将这些代码直接链接进程序。例如，
设想一个支持“插件”模块的程序，如一个网页浏览器。浏览器允许第三方开发者制作插件
以提供额外的功能。这些开发者制作共享库，并将它放在指定的位置。浏览器在运行的时候
将自动加载这些库中的代码。 
在 Linux 系统中，这种功能可以通过使用 dlopen 函数获取。你可以这样通过 dlopen 加
载一个名为 dlopen 的函数： 
dlopen (“libtest.so”, RTLD_LAZY); 
（第二个参数是一个标志，它指明了绑定库中符号的方法。你可以参考 dlopen 的手册
页以获取更详细的信息，不过 RTLD_LAZY 通常就是你所需要的。）如果使用动态加载函数，
你需要在程序文件中包含  头文件，并将程序链接到 libdl 库（通过为编译器指定 
–ldl 参数）。 
这个函数会返回一个 void *指针；这个指针将被用作一个操作被加载的共享库的句柄。
你可以将这个指针传递给 dlsym 函数以获取被加载的库中特定函数的地址。假设 libtest.so
中定义了一个函数 my_function，则你可以这样调用这个函数： 
void* handle = dlopen (“libtest.so”, RTLD_LAZY); 
void (*test)() = dlsym (handle, “my_function”); 
(*test)(); 
dlclose (handle); 
这里，系统调用 dlsym 还可以用于从共享库中获取静态变量的地址。 
前面提到的两个函数，dlopen 和 dlsym，均会在执行失败的时候返回 NULL。这时你可
以调用 dlerror（不需指定任何参数）获取一个可读的信息对出现的错误进行解释。 
函数 dlclose 可以从内存中卸载已经加载的库。技术上来说，dlopen 只在库并未被加载