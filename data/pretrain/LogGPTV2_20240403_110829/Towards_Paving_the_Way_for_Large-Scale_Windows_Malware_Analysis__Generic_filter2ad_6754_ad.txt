IATs have only two APIs: “LoadLibrary” and “GetProcAddress”. The
fourth column lists the common evasion types applied by these
packers. Hupigon.eyf belongs to a large family of backdoor Trojan,
and their main function is to form a botnet by connecting a number
of victimized machines. Since the first detection of Hupigon goes
back to 9 years ago16, we believe most anti-malware scanners are
able to recognize it. We send the hupigon.eyf’s no-packer version
to VirusTotal, and there are total 36 anti-virus products correctly
label our submission as “hupigon”. Therefore, we treat 36 as the
optimal anti-malware scanning result.
14http://exeinfo.atwebpages.com/
15https://www.aldeid.com/wiki/PEiD
16https://en.wikipedia.org/wiki/Backdoor:Win32.Hupigon
8.1.1 Multi-layer Packers. These packers are all single packer but
with multiple “written-then-executed” layers. Column 5 shows that
these packers can circumvent many anti-virus products. Although
some advanced anti-virus engines have already embedded a sand-
box for generic unpacking [34], there is no single one that could
cope with all of the packed samples in Table 3. Column 6 presents
the VirusTotal results for the four unpacking tool outputs, and
only BinUnpack’s numbers are very close to the optimal value (36).
Compared to other tools, BinUnpack significantly improves the
accuracy of anti-virus scanning. For the packers that do not reveal
the original code in the deepest layer (e.g., Enigma, SoftwarePas-
sport, Armadillo, and ACProtect), some VirusTotal results of the
unpacked code are 0. The reason is these unpackers do not return
the right layer containing the original code.
8.1.2 Packer Combinations. With different packers applied on the
same original code repeatedly, generic unpacking becomes more
difficult. On the other side, the packed code generated by some
packers may not be further packed by other ones [28]. After trying
all possible combinations, we find several successful cases. Compa-
red to a single packer, packer combinations are indeed more likely
to evade anti-malware scanning. VirusTotal’s detection number
for these packer combinations is no more than 14. As our design
has already considered the threat of packer combinations (see Al-
gorithm 1), BinUnpack can efficiently extract original code from
multi-packer protected version.
8.1.3 Themida. Themida is a sophisticated commercial packer, and
it is also widely used by malware authors [85, 102]. As shown in
Column 5, the detection rate to Themida protected malware is ra-
ther low. We use Themida to evaluate two more complicated cases.
First, we apply Themida’s default binary packing function to hu-
pigon.eyf’s binary code. The distinct feature of Themida packer is
that the unpacking routine code is further protected by virtualiza-
tion obfuscation. In this case, one unpacking routine instruction
is replaced by several bytecode, and the attached virtualization
engine will simulate these bytecode at run time. Under unpacking
routine virtualization, tracing “written-then-executed” instructions
will become extremely time-consuming [63] . Unlike the previous
work, BinUnpack neatly sidesteps heavy memory access tracing and
avoids the high overhead caused by code virtualization execution.
Second, as the source code of hupigon is available, we can enable
Themida’s optional function “Encode Macro”. “Encode Macro” allow
users to mark a region of source code to be encrypted. When the
encrypted code region is to be executed, Themida will first decrypt
the code inside the macro, execute it, and then encrypt it again.
Themida with “Encode Macro” option enabled can be taken as a
partial code revealing packer, which represents the worst case for
all generic unpackers [7, 86, 97] because only a portion of original
Session 3A: Binary Analysis CCS’18, October 15-19, 2018, Toronto, ON, Canada4041
1,4
1,4
Unpacked
36
#Layers
#APIs Evasions
28
5
2
5
12
6
30
6
144
6
2
2
4
4
2
2
4
310
18
20
2
2
242
22
2
4
232
5
2/2
2/2
2/2
2/2
2/2
2/2
3/3
3/3
3/3
3/3
3/3
3/3
3/3
4/4
4/4
4/4
4/4
4/4
5/4
5/5
6/6
6/6
7/6
15/15
18/18
80/80
165/163
216/2
0, 8, 8, 35
0, 26, 26, 36
0, 21, 21, 36
21, 26, 26, 36
0, 24, 24, 35
0, 6, 6, 35
27, 29, 29, 36
0, 21, 21, 36
0, 32, 32, 36
0, 19, 19, 34
10, 19, 19, 33
0, 21, 21, 32
0, 8, 8, 31
0, 12, 12, 36
14, 0, 0, 35
0, 21, 21, 34
23, 26, 26, 35
0, 0, 0, 28
0, 0, 0, 34
0, 9, 9, 31
19, 0, 0, 35
0, 6, 6, 31
0, 0, 0, 33
0, 0, 11, 35
15, 0, 5, 32
0, 0, 18, 32
0, 0, 0, 28
0, 0, 0, 31
Packers
hupigon.eyf (no packer)
Multi-layer packers
NsPack
nPack
FSG
UPX
eXPressor
RLPack
Petite
Aspack
MoleBox
Asprotect
WinUpack
FishPacker
KBys
PECompact
Yoda’s Crypter
MEW
ORiEN
PEP
Enigma
ZProtect
Yoda’s Protector
Obsidium
SoftwarePassport
Pelock
Telock
Pespin
Armadillo
ACProtect
Packer combinations
NsPack+Aspack
RLPack+MoleBox
nPack+PECompact
eXPressor+MoleBox
RLPack+Aspack
FishPacker+PECompact
FishPacker+Aspack
FishPacker+PEP
Themida
Unpacking routine virtualization
Partial code revealing
1 “T”(Timeout) means that the unpacking tool running time exceeds 1, 800 seconds or 120 seconds for CoDisasm.
2 “E”(Exception) means that the unpacking tools raise exceptions and then exit.
0, 7, 7, 34
0, 5, 5, 33
0, 8, 8, 34
0, 23, 23, 33
0, 5, 5, 34
0, 7, 7, 30
0, 18, 18, 30
0, 0, 0, 26
19
22
24
30
22
21
21
31
22
20
22
23
23
24
19
24
25
12
11
18
21
13
21
10
21
16
13
9
10
8
9
13
11
13
14
11
1,4
1,2,4
1,3,4
1,3
1,2
1,4
1,3
1,3
1,2,4
1,3
28
6
5
12
6
2
2
2
2
2
5/5
5/5
6/6
5/5
5/5
7/7
6/6
7/7
8
6
0, 0, 0, 31
0, 0, 0, 30
1
1
1,4
1,2,4
1,2,4
106/105
107/105
T, 312, 343, 0.15
E, 17, 21, 0.09
T, 27, 42, 0.10
3, 16, 23, 0.13
T, 9, 15, 0.11
T, 10, 25, 0.12
2, 71, 100, 0.11
T, 80, 105, 0.09
T, 64, 82, 0.17
T, 162, 180, 0.21
9, 13, 25, 0.09
T, 69, 82, 0.10
T, 83, 105, 0.15
T, 13, 20, 0.11
7, E, T, 0.16
T, 72, 105, 0.14
6, 56, 64, 0.13
T, T, T, 0.20
T, E, T, 0.17
T, 34, 56, 0.17
8, E, T, 0.11
T, 168, 205, 0.15
T, T, T, 0.36
T, E, 256, 0.32
13, E, 105, 0.18
E, E, 436, 0.14
T, T, T, 0.38
E, E, 256, 0.29
T, 380, 421, 0.17