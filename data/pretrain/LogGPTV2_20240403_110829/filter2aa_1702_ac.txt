line options. Flawﬁnder is designed to work well with text editors and integrated development environ-
ments, so the next sections show how to integrate ﬂawﬁnder into vim and emacs.
Simple command-line options
ﬂawﬁnder /usr/src/linux-3.16
Examine all the C/C++ ﬁles in the directory /usr/src/linux-3.16 and all its subdirectories
(recursively), reporting on all hits found. By default ﬂawﬁnder will skip symbolic links and
directories with names that start with a period.
ﬂawﬁnder −−minlevel=4 .
Examine all the C/C++ ﬁles in the current directory and its subdirectories (recursively); only
report vulnerabilities level 4 and up (the two highest risk levels).
ﬂawﬁnder −−inputs mydir
Examine all the C/C++ ﬁles in mydir and its subdirectories (recursively), and report func-
tions that take inputs (so that you can ensure that they ﬁlter the inputs appropriately).
ﬂawﬁnder −−neverignore mydir
Examine all the C/C++ ﬁles in the directory mydir and its subdirectories, including even the
hits marked for ignoring in the code comments.
ﬂawﬁnder −−csv .
Examine the current directory down (recursively), and report all hits in CSV format. This is
the recommended form if you want to further process ﬂawﬁnder output using other tools
(such as data correlation tools).
ﬂawﬁnder −QD mydir
Examine mydir and report only the actual results (removing the header and footer of the out-
put). This form may be useful if the output will be piped into other tools for further
Flawﬁnder 
26 Aug 2017
7
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
analysis, though CSV format is probably the better choice in that case. The −C (−−columns)
and −S (−−singleline) options can also be useful if you’re piping the data into other tools.
ﬂawﬁnder −QDSC mydir
Examine mydir, reporting only the actual results (no header or footer). Each hit is reported
on one line, and column numbers are reported. This can be a useful command if you are
feeding ﬂawﬁnder output to other tools.
ﬂawﬁnder −−quiet −−html −−context mydir > results.html
Examine all the C/C++ ﬁles in the directory mydir and its subdirectories, and produce an
HTML formatted version of the results. Source code management systems (such as Source-
Forge and Savannah) might use a command like this.
ﬂawﬁnder −−quiet −−savehitlist saved.hits *.[ch]
Examine all .c and .h ﬁles in the current directory. Don’t report on the status of processing,
and save the resulting hitlist (the set of all hits) in the ﬁle saved.hits.
ﬂawﬁnder −−diffhitlist saved.hits *.[ch]
Examine all .c and .h ﬁles in the current directory, and show any hits that weren’t already in
the ﬁle saved.hits. This can be used to show only the ‘‘new’’ vulnerabilities in a modiﬁed
program, if saved.hits was created from the older version of the program being analyzed.
ﬂawﬁnder −−patch recent.patch .
Examine the current directory recursively, but only report lines that were changed or added
in the already-applied patchﬁle named recent.patch.
ﬂawﬁnder −−regex "CWE-120|CWE-126" src/
Examine directory src recursively, but only report hits where CWE-120 or CWE-126 apply.
Invoking from vim
The text editor vim includes a "quickﬁx" mechanism that works well with ﬂawﬁnder, so that you can easily
view the warning messages and jump to the relevant source code.
First, you need to invoke ﬂawﬁnder to create a list of hits, and there are two ways to do this. The ﬁrst way
is to start ﬂawﬁnder ﬁrst, and then (using its output) invoke vim. The second way is to start (or continue to
run) vim, and then invoke ﬂawﬁnder (typically from inside vim).
For the ﬁrst way, run ﬂawﬁnder and store its output in some FLAWFILE (say "ﬂawﬁle"), then invoke vim
using its -q option, like this: "vim -q ﬂawﬁle". The second way (starting ﬂawﬁnder after starting vim) can
be done a legion of ways. One is to invoke ﬂawﬁnder using a shell command, ":!ﬂawﬁnder-command >
FLAWFILE", then follow that with the command ":cf FLAWFILE". Another way is to store the ﬂawﬁnder
command in your makeﬁle (as, say, a pseudocommand like "ﬂaw"), and then run ":make ﬂaw".
In all these cases you need a command for ﬂawﬁnder to run. A plausible command, which places each hit
in its own line (-S) and removes headers and footers that would confuse it, is:
ﬂawﬁnder −SQD .
You can now use various editing commands to view the results. The command ":cn" displays the next hit;
":cN" displays the previous hit, and ":cr" rewinds back to the ﬁrst hit. ":copen" will open a window to show
the current list of hits, called the "quickﬁx window"; ":cclose" will close the quickﬁx window. If the buffer
in the used window has changed, and the error is in another ﬁle, jumping to the error will fail. You have to
make sure the window contains a buffer which can be abandoned before trying to jump to a new ﬁle, say by
saving the ﬁle; this prevents accidental data loss.
Flawﬁnder 
26 Aug 2017
8
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
Invoking from emacs
The text editor / operating system emacs includes "grep mode" and "compile mode" mechanisms that work
well with ﬂawﬁnder, making it easy to view warning messages, jump to the relevant source code, and ﬁx
any problems you ﬁnd.
First, you need to invoke ﬂawﬁnder to create a list of warning messages. You can use "grep mode" or
"compile mode" to create this list. Often "grep mode" is more convenient; it leaves compile mode
untouched so you can easily recompile once you’ve changed something. However, if you want to jump to
the exact column position of a hit, compile mode may be more convenient because emacs can use the col-
umn output of ﬂawﬁnder to directly jump to the right location without any special conﬁguration.
To use grep mode, enter the command "M-x grep" and then enter the needed ﬂawﬁnder command. To use
compile mode, enter the command "M-x compile" and enter the needed ﬂawﬁnder command. This is a
meta-key command, so you’ll need to use the meta key for your keyboard (this is usually the ESC key). As
with all emacs commands, you’ll need to press RETURN after typing "grep" or "compile". So on many
systems, the grep mode is invoked by typing ESC x g r e p RETURN.
You then need to enter a command, removing whatever was there before if necessary. A plausible com-
mand is:
ﬂawﬁnder −SQDC .
This command makes every hit report a single line, which is much easier for tools to handle. The quiet and
dataonly options remove the other status information not needed for use inside emacs. The trailing period
means that the current directory and all descendents are searched for C/C++ code, and analyzed for ﬂaws.
Once you’ve inv oked ﬂawﬁnder, you can use emacs to jump around in its results. The command C-x `
(Control-x backtick) visits the source code location for the next warning message. C-u C-x ` (control-u
control-x backtick) restarts from the beginning. You can visit the source for any particular error message
by moving to that hit message in the *compilation* buffer or *grep* buffer and typing the return key.
(Technical note: in the compilation buffer, this invokes compile-goto-error.) You can also click the
Mouse-2 button on the error message (you don’t need to switch to the *compilation* buffer ﬁrst).
If you want to use grep mode to jump to speciﬁc columns of a hit, you’ll need to specially conﬁgure emacs
to do this. To do this, modify the emacs variable "grep-regexp-alist". This variable tells Emacs how to
parse output of a "grep" command, similar to the variable "compilation-error-regexp-alist" which lists vari-
ous formats of compilation error messages.
Invoking from Integrated Development Environments (IDEs)
For (other) IDEs, consult your IDE’s set of plug-ins.
COMMON WEAKNESS ENUMERATION (CWE)
The Common Weakness Enumeration (CWE) is ‘‘a formal list or dictionary of common software weak-
nesses that can occur in software’s architecture, design, code or implementation that can lead to exploitable
security vulnerabilities... created to serve as a common language for describing software security weak-
nesses’’ (http://cwe.mitre.org/about/faq.html). For more information on CWEs, see http://cwe.mitre.org.
Flawﬁnder supports the CWE and is ofﬁcially CWE-Compatible. Hit descriptions typically include a rele-
vant Common Weakness Enumeration (CWE) identiﬁer in parentheses where there is known to be a rele-
vant CWE. For example, many of the buffer-related hits mention CWE-120, the CWE identiﬁer for ‘‘buffer
copy without checking size of input’’ (aka ‘‘Classic Buffer Overﬂow’’). In a few cases more than one CWE
identiﬁer may be listed. The HTML report also includes hypertext links to the CWE deﬁnitions hosted at
MITRE. In this way, ﬂawﬁnder is designed to meet the CWE-Output requirement.
In some cases there are CWE mapping and usage challenges; here is how ﬂawﬁnder handles them. If the
same entry maps to multiple CWEs simultaneously, all the CWE mappings are listed as separated by com-
mas. This often occurs with CWE-20, Improper Input Validation; thus the report "CWE-676, CWE-120"
maps to two CWEs. In addition, ﬂawﬁnder provides additional information for those who are are interested
in the CWE/SANS top 25 list 2011 (http://cwe.mitre.org/top25/) when mappings are not directly to them.
Flawﬁnder 
26 Aug 2017
9
FLAWFINDER(1) 
Flawﬁnder 
FLAWFINDER(1)
Many people will want to search for speciﬁc CWEs in this top 25 list, such as CWE-120 (classic buffer
overﬂow). The challenge is that some ﬂawﬁnder hits map to a more general CWE that would include a top
25 item, while in some other cases hits map to a more speciﬁc vulnerability that is only a subset of a top 25
item. To resolve this, in some cases ﬂawﬁnder will list a sequence of CWEs in the format "more-gen-
eral/more-speciﬁc", where the CWE actually being mapped is followed by a "!". This is always done
whenever a ﬂaw is not mapped directly to a top 25 CWE, but the mapping is related to such a CWE. So
"CWE-119!/CWE-120" means that the vulnerability is mapped to CWE-119 and that CWE-120 is a subset
of CWE-119. In contrast, "CWE-362/CWE-367!" means that the hit is mapped to CWE-367, a subset of
CWE-362. Note that this is a subtle syntax change from ﬂawﬁnder version 1.31; in ﬂawﬁnder version 1.31,
the form "more-general:more-speciﬁc" meant what is now listed as "more-general!/more-speciﬁc", while
"more-general/more-speciﬁc" meant "more-general/more-speciﬁc!". Tools can handle both the version 1.31
and the current format, if they wish, by noting that the older format did not use "!" at all (and thus this is
easy to distinguish). These mapping mechanisms simplify searching for certain CWEs.
CWE version 2.7 (released June 23, 2014) was used for the mapping. The current CWE mappings select
the most speciﬁc CWE the tool can determine. In theory, most CWE security elements (signatures/patterns
that the tool searches for) could theoretically be mapped to CWE-676 (Use of Potentially Dangerous Func-
tion), but such a mapping would not be useful. Thus, more speciﬁc mappings were preferred where one
could be found. Flawﬁnder is a lexical analysis tool; as a result, it is impractical for it to be more speciﬁc
than the mappings currently implemented. This also means that it is unlikely to need much updating for
map currency; it simply doesn’t hav e enough information to reﬁne to a detailed CWE level that CWE
changes would typically affect. The list of CWE identiﬁers was generated automatically using "make
show-cwes", so there is conﬁdence that this list is correct. Please report CWE mapping problems as bugs if
you ﬁnd any.
Flawﬁnder may fail to ﬁnd a vulnerability, even if ﬂawﬁnder covers one of these CWE weaknesses. That
said, ﬂawﬁnder does ﬁnd vulnerabilities listed by the CWEs it covers, and it will not report lines without
those vulnerabilities in many cases. Thus, as required for any tool intending to be CWE compatible,
ﬂawﬁnder has a rate of false positives less than 100% and a rate of false negatives less than 100%.
Flawﬁnder almost always reports whenever it ﬁnds a match to a CWE security element (a signature/pattern
as deﬁned in its database), though certain obscure constructs can cause it to fail (see BUGS below).
Flawﬁnder can report on the following CWEs (these are the CWEs that ﬂawﬁnder covers; ‘‘*’’ marks those
in the CWE/SANS top 25 list):
• CWE-20: Improper Input Validation
• CWE-22: Improper Limitation of a Pathname to a Restricted Directory (‘‘Path Traversal’’)
• CWE-78: Improper Neutralization of Special Elements used in an OS Command (‘‘OS Command Injec-
tion’’)*
• CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer (a parent of
CWE-120*, so this is shown as CWE-119!/CWE-120)
• CWE-120: Buffer Copy without Checking Size of Input (‘‘Classic Buffer Overﬂow’’)*
• CWE-126: Buffer Over-read
• CWE-134: Uncontrolled Format String*
• CWE-190: Integer Overﬂow or Wraparound*