yielding the update size. Summing the storage and bandwidth
requirements for every CRV from every CA gave us the total
storage and bandwidth, which we report for various scenarios
below.
B. Current Revocation Space
With the data acquired from our scan, we simulated the
current requirements for global revocation coverage using
revocation numbers and CRVs. For the simulation, we grouped
all of the CAs with fewer than 10K total certiﬁcates into
Compressed
Uncompressed
Storage
Storage
Daily Update
Bandwidth
100M Certiﬁcates
1% Revocation
10% Revocation
1B Certiﬁcates
1% Revocation
10% Revocation
10B Certiﬁcates
1% Revocation
10% Revocation
1.3 MB
6.2 MB
12.2 MB
60.1 MB
121.3 MB
605 MB
12.5 MB
12.5 MB
125 MB
125 MB
1.25 GB
1.25 GB
62.6 KB
429.2 KB
611.5 KB
4.1 MB
7.4 MB
41.5 MB
TABLE IV: A storage and bandwidth comparison for CRVs
representing different certiﬁcate space sizes.
a conglomerate CA. After the grouping, we had 42 CA
entities that had issued 84.1M certiﬁcates with a revocation
percentage of 1.29% and an average daily addition of 0.007%.
Our simulation used all of these parameters and yielded
results showing that the representation of the entire revocation
space compressed to under 5.0 MB with the optimal method
for daily updates compressing to less than 25 KB.16 These
small requirements indicate that CRVs are well-suited for the
certiﬁcate space and revocation conditions we found during
our scan.
C. Mass Revocation Event
In contrast to the typically low revocation percentages,
speciﬁc wide-spread security vulnerabilities have forced periods
of mass revocation. Such events include CA compromise
(Trustico Revocation Event) and server bugs (Heartbleed
Vulnerability). Using data from the Heartbleed Revocation
Event, we ran simulations modeling the requirements that
would be necessary if a similar event occurred today. To match
that event, we raised the reported revocation percentage to 10%
by proportionally scaling each CA’s revocation percentage and
increased the average daily update to 0.06%. This increase
brought storage requirements to 10.8 MB and necessary update
bandwidth to 150 KB per day. While much higher than the
storage and bandwidth requirements for typical revocation
percentages, this simulation shows that CRVs can also scale
to handle mass revocation events.
D. Growing Revocation Space
To show how CRVs scale into potential future certiﬁcate
spaces, we ran simulations representing a single large
CA responsible for all certiﬁcates that divides them into
100 day-separated CRVs. The update bandwidth calculation
assumes the associated revocation percentage occurs uniformly
across all CRVs each day. Table IV contains a summary for
each revocation percentage.
Of particular interest are the results for 1B certiﬁcates,
which is slightly more than double the size of the current
certiﬁcate space. The 100 associated CRVs store all
the
16For reference, fetching the Google home page requires approximately 400
KB of network bandwidth.
requisite information in less than 125 MB uncompressed. At
1% revocation, these CRVs compressed to 12 MB. Assuming
an optimal update methodology of 0.02% new revocations
per day, the compressed CRVs only require 612 KB of daily
bandwidth. Increasing to the scale of a mass revocation event
(10% revocation), the CRVs compressed to 60 MB and required
a daily bandwidth of 4.1 MB. These results indicate the
ability of CRVs and Let’s Revoke to scale gracefully with
the ever-growing certiﬁcate space.
VI. SECURITY ANALYSIS
We assume a threat model where an active network attacker
can create, modify, and block messages. The attacker has two
goals: (1) coerce a client to accept a revoked certiﬁcate, and
(2) coerce a client to assume a valid certiﬁcate is revoked.
The threat model does not include a compromised CA or a
compromised client.
A. Accept a Revoked Certiﬁcate
An attacker can coerce a client to accept a revoked certiﬁcate
by preventing them from updating their CRV and learning that
the certiﬁcate is revoked.
1) Update Manipulation: The ﬁrst method for doing so
is to try and provide an update that omits the needed new
revocation or remove a previously added revocation. To ensure
that a revocation update is valid, the CA must digitally sign
each update. It is then the client’s responsibility to validate that
signature. Further protection prevents the removal of previous
revocations. Since the design of CRVs allows only insertions,
the only way to remove a previous revocation is for the attacker
to send an update indicating a new CRV. However, this attack
is easy to prevent by having the client bitwise OR the new
(malicious) CRV with the old CRV to ensure that all previous
revocations remain even if the malicious CRV has excluded
previous revocations.
2) Update Blocking: The second attack vector for an
adversary is to prevent updates from reaching the client by
blocking trafﬁc from the CA. This attack allows the adversary
to conduct a MitM attack on the client using any certiﬁcate
revoked since the last time the client updated its CRV. Since
CRVs are a push-based revocation strategy, the client can detect
any interference with the update schedule and warn the user
about a potential MitM attack.
B. Revoke a Valid Certiﬁcate
An adversary may also coerce a client to believe a valid
certiﬁcate has been revoked. The net effect is a denial of service
attack that prevents a client from using the service associated
with the certiﬁcate.
1) Unauthorized Revocation: An attacker can attempt to
impersonate the owner of the certiﬁcate to the CA and revoke
the certiﬁcate. The revocation process should require the
revoking party to prove that they have access to the private
key. If an adversary has access to the private key, then the
certiﬁcate should be revoked.
12
2) Update Manipulation: The attacker can also attempt to
modify updates to the CRV by adding new numbers to any
of the update methods. Again, this attack is defeated because
the CA digitally signs the updates, and a client veriﬁes those
signatures.
VII. CONCLUSION
This paper presents Let’s Revoke, a scalable global
revocation strategy that addresses the concerns of current
revocation checking. Let’s Revoke introduces a new unique
identiﬁer to each certiﬁcate that serves as an index to a
dynamically-sized bit vector containing revocation status
information. The bit vector approach enables signiﬁcantly more
efﬁcient revocation checking for both clients and certiﬁcate
authorities.
We
demonstrated
fulﬁlls
properties [11] of a scalable revocation strategy, namely:
how Let’s Revoke
six
1) Efﬁciency - Let’s Revoke offers signiﬁcant efﬁciency
gains over other push-based revocation strategies.
a) Bandwidth - CRVs minimize bandwidth requirements,
not only for end-clients but also for certiﬁcate issuers
and revocation status responders.
b) Storage - CRVs require fewer storage resources than
all other currently implemented and proposed strategies
that offer comparable revocation coverage.
c) Computational - CRVs are simply and efﬁciently
requiring minimal
constructed
computational time and resources.
utilized,
and
2) Timeliness - Updates to CRVs can be acquired daily (or
even more frequently) to ensure that they never become
stale.
3) Failure Model - Since CRVs can efﬁciently represent the
entire revocation space, clients can adopt a hard-failure
policy.
4) Privacy - Since CRVs provide global coverage they
preserve client trafﬁc privacy.
5) Deployability - CRVs allow for incremental deployment
and provide an incentive to each of the involved entities.
6) Auditability - CRVs are auditable by all other parties.
We showed that Let’s Revoke requires fewer resources than
currently available revocation methods, even those that cover
only a fraction of the certiﬁcate space. We simulated certiﬁcate
revocation data anticipating certiﬁcate growth to 1B and 10B
certiﬁcates. Our estimates show the daily revocation download
estimates are 612 KB and 7.4 MB, respectively. Storage
estimates also remain manageable during mass revocation
events that revoke 10% of all valid certiﬁcates.
ACKNOWLEDGMENT
This material is based upon work supported by the National
Science Foundation under Grant No. CNS-1528022 and
CNS-1816929.
13
REFERENCES
[1] “Ballot 193 – 825-day Certiﬁcate Lifetimes.” [Online]. Available: https:
//cabforum.org/2017/03/17/ballot-193-825-day-certiﬁcate-lifetimes/
[2] R. Housley, W. Ford, T. Polk, and D. Solo, “ Internet X.509 Public
Key Infrastructure Certiﬁcate and CRL Proﬁle,” RFC Editor, RFC 2560,
January 1999.
[3] “CA:RevocationPlan.” [Online]. Available: https://wiki.mozilla.org/CA:
RevocationPlan#OneCRL
[4] “CRLSets.”
[Online]. Available:
https://dev.chromium.org/Home/
chromium-security/crlsets
[5] M. Myers, R. Ankney, A. Malpani, S. Galperin, and C. Adams, “X.509
Internet Public Key Infrastructure Online Certiﬁcate Status Protocol -
OCSP,” RFC Editor, RFC 2560, June 1999.
[6] D. Eastlake, “Transport Layer Security (TLS) Extensions: Extension
Deﬁnitions,” RFC Editor, RFC 6066, January 2011.
[7] A. Schulman, D. Levin, and N. Spring, “Revcast: Fast, private certiﬁcate
revocation over fm radio,” in Proceedings of the ACM SIGSAC Conference
on Computer and Communications Security, 2014.
[8] P. Szalachowski, C. Amann, T. Lee, and A. Perrig, “RITM: Revocation in
the Middle,” in 36th International Conference on Distributed Computing
Systems (ICDCS).
IEEE, 2016.
[9] “Feature
request: OCSP Must Staple
[Online].
https://groups.google.com/a/chromium.org/forum/#!topic/
(RFC 7633).”
Available:
security-dev/-pB8IFNu5tw
[10] Y. Liu, W. Tome, L. Zhang, D. Choffnes, D. Levin, B. Maggs, A. Mislove,
A. Schulman, and C. Wilson, “An End-to-End Measurement of Certiﬁcate
Revocation in the Web’s PKI,” in Proceedings of the Conference on
Internet Measurement Conference (IMC). ACM, 2015.
[11] J. Larisch, D. Choffnes, D. Levin, B. M. Maggs, A. Mislove, and
C. Wilson, “CRLite: A Scalable System for Pushing All TLS Revocations
to All Browsers,” in 2017 Symposium on Security and Privacy (SP).
IEEE, 2017.
[12] “Censys,” 2017. [Online]. Available: https://censys.io/certiﬁcates?q=tags.
raw%3A+%22trusted%22
[13] J. Aas, R. Barnes, B. Case, Z. Durumeric, P. Eckersley, A. Flores-L´opez,
J. A. Halderman, J. Hoffman-Andrews, J. Kasten, E. Rescorla et al.,
“Let’s encrypt: An automated certiﬁcate authority to encrypt the entire
web,” in Proceedings of the 2019 ACM SIGSAC Conference on Computer
and Communications Security, 2019, pp. 2473–2487.
[14] “Indexing HTTPS pages by default,” 2015. [Online]. Available: https://
security.googleblog.com/2015/12/indexing-https-pages-by-default.html/
[15] M. Prince, “The Hidden Costs of Heartbleed,” 2017. [Online]. Available:
https://blog.cloudﬂare.com/the-hard-costs-of-heartbleed/
[16] Z. Durumeric, J. Kasten, D. Adrian, J. A. Halderman, M. Bailey, F. Li,
N. Weaver, J. Amann, J. Beekman, M. Payer et al., “The matter
of heartbleed,” in Proceedings of the 2014 Conference on Internet
Measurement Conference. ACM, 2014, pp. 475–488.
[17] A. Langley, “Revocation checking and Chrome’s CRL,” 2012. [Online].
Available: https://www.imperialviolet.org/2012/02/05/crlsets.html
[18] P. C. Kocher, “On certiﬁcate revocation and validation,” in Financial
Cryptography, R. Hirchfeld, Ed. Berlin, Heidelberg: Springer Berlin
Heidelberg, 1998, pp. 172–177.
[19] M. Naor and K. Nissim, “Certiﬁcate revocation and certiﬁcate update,”
IEEE Journal on selected areas in communications, vol. 18, no. 4, pp.
561–570, 2000.
[20] S. Micali, “Efﬁcient certiﬁcate revocation,” Cambridge, MA, USA, Tech.
[21] B. Laurie and E. Kasper, “Revocation transparency,” Google Research,
Rep., 1996.
September, 2012.
2009, 2009.
[22] M. Marlinspike, “Defeating OCSP with the Character ‘3’,” Blackhat
[23] K. Rabieh, M. M. Mahmoud, K. Akkaya, and S. Tonyali, “Scalable
certiﬁcate revocation schemes for smart grid ami networks using bloom
ﬁlters,” IEEE Transactions on Dependable and Secure Computing, vol. 14,
no. 4, pp. 420–432, 2017.
[24] Q. Hu, M. R. Asghar, and N. Brownlee, “Certiﬁcate Revocation Guard
(CRG): An Efﬁcient Mechanism for Checking Certiﬁcate Revocation,”
in Proceedings of the 41st Conference on Local Computer Networks
(LCN).
IEEE, 2016.
[25] P. Hallam-Baker, “X.509v3 Transport Layer Security (TLS) Feature
Extension,” RFC Editor, RFC 7633, October 2015.
[26] A. S. Wazan, R. Laborde, D. W. Chadwick, F. Barrere, and A. Benzekri,
“Tls connection validation by web browsers: Why do web browsers
still not agree?” in 41st Annual Computer Software and Applications
Conference (COMPSAC).
IEEE, 2017.
[27] H. Bock, “The Problem with OCSP Stapling and Must Staple and
why Certiﬁcate Revocation is still broken,” 2017. [Online]. Available:
https://blog.hboeck.de/archives/886-The-Problem-with-OCSP-Stapling-
and-Must-Staple-and-why-Certiﬁcate-Revocation-is-still-broken.html
[28] T. Chung, J. Lok, B. Chandrasekaran, D. Choffnes, D. Levin, B. M.
Maggs, A. Mislove, J. Rula, N. Sullivan, and C. Wilson, “Is the
Web Ready for OCSP Must-Staple?” in Proceedings of the Internet
Measurement Conference 2018. ACM, 2018, pp. 105–118.
[29] “Censys,” 2017. [Online]. Available: https://censys.io/certiﬁcates?q=
%281.3.6.1.5.5.7.1.24%29+AND+tags.raw%3A+%22trusted%22
[30] R. L. Rivest, “Can we eliminate certiﬁcate revocation lists?” in
International Conference on Financial Cryptography. Springer, 1998,
pp. 178–183.
[31] Y.-K. Hsu and S. Seymour, “Intranet Security Framework Based on
Short-lived Certiﬁcates,” in Proceedings of the Sixth IEEE Workshops
on Enabling Technologies: Infrastructure for Collaborative Enterprises,
1997.
[32] E. Topalovic, B. Saeta, L.-S. Huang, C. Jackson, and D. Boneh, “Towards
Short-Lived Certiﬁcates,” Web 2.0 Security and Privacy, 2012.
[33] R. Barnes, J. Hoffman-Andrews, D. McCarney, and J. Kasten, “Automatic
Certiﬁcate Management Environment (ACME) draft-ietf-acme-acme-12,”
Internet Requests for Comments, Internet-Draft, April 2018. [Online].
Available: https://tools.ietf.org/html/draft-ietf-acme-acme-12
[34] Z. Durumeric, D. Adrian, A. Mirian, M. Bailey, and J. A. Halderman,
“A search engine backed by Internet-wide scanning,” Oct. 2015.
[35] D. Kumar, M. Bailey, Z. Wang, M. Hyder, J. Dickinson, G. Beck,
D. Adrian, J. Mason, Z. Durumeric, and J. A. Halderman, “Tracking
certiﬁcate misissuance in the wild,” in 2018 Symposium on Security and
Privacy (SP).
IEEE, 2018.
14