The DLC field now indicates the number of requested bytes. 
The data field is empty despite the value of the DLC field. 
In case of collision with a data frame with the same identifier, the RTR determines the arbitration (in favor of the data frame). 
2.2 CAN ARCHITECTURES 
The CAN specification does not define the maximum allowed number of nodes. However, depending on the characteristics of the physical 
layer and to avoid congestion issues, there is in fact a practical limitation to the number of nodes that should be connected to a single CAN 
bus. Nevertheless, modern cars are using an increasing number of ECUs to add new features. For that reason, automobile manufacturers 
have been relying on multi-buses architectures. In this section, we present the two main architectures we have encountered in actual audits. 
First, we have the architecture that relies on multiple separate buses to distribute the network load (see Figure 2 for illustration). 
Nevertheless, in regard to security, this type of architectures could also be considered because of its segmentation capabilities. However, 
given the functionalities a modern car is offering, it is almost mandatory that some ECUs will have to be connected to multiple buses. In 
case one or more of these ECUs were to be compromised, they could be used to bypass the segmentation. 
Figure 2. Diagram of a CAN architecture based on multiple separate buses 
Secondly, we have the architecture that relies on multiple interconnected buses (see Figure 3 for illustration). In this case, the network load 
is also distributed among several CAN buses but no ECUs are connected to multiple buses except for the one gateway in charge of routing 
the frames. It is worth mentioning that routing decisions may be based on static rules but also on the current state of the vehicle (e.g., 
wheel-testing frames are not forwarded if the vehicle is moving). Rightly so, such gateway may also be considered in order to enforce 
security along with safety. However, in this case, it becomes a target of choice if another ECU has been compromised beforehand. 
Figure 3. Diagram of a CAN architecture based on multiple interconnected buses 
3. AUDITING CAN DEVICES 
A security audit is methodological approach with an aim at highlighting good security practices as well as vulnerabilities within a given 
scope. However, it does not aim at any form of completeness in covering all vulnerabilities. Nonetheless, with the proper methodology, it 
should provide the stakeholders with a certain level of confidence in the strength of the asset or group of assets in front of malicious 
behaviors at a given point in time. In the remainder of this section, we provide an overview of the specifics of one particular auditing 
approach, penetration testing, and an argument about its applicability in the context of CAN devices considering the current available tools. 
3.1 PENETRATION TESTS 
Unlike the conventional approach that relies of reviewing documents (e.g., procedures or schematics), the penetration testing approach 
relies on actual tests. The process is simple: an auditor conducts several actions within the given scope and observes the induced behavior. 
Then, by analyzing the observed behavior, the auditor tries to infer if the design, the implementation or the configuration of the asset or 
group of assets is vulnerable and if there is any room for exploitation. The idea behind such approach is get results rooted in reality by 
taking the point of view of real attackers. 
However, the relevancy of this approach is tainted by the fact that security auditors have to deal with limitations unknown to real attackers. 
Indeed, malicious people are not constrained by deadlines or by ethics considerations. In case of well-funded attackers, they may also have 
more resources than the security auditors. For that reason, the penetration testing methodology actually relies on gray-box testing as 
opposed to real attackers that are forced to work with a black-box approach. 
Indeed, while a black-box tester is not aware of anything about the internals of the considered scope, a gray-box tester has a partial 
knowledge of it (e.g., documentations or schematics). This helps leveling the playing field between a security auditor and a real attacker. 
Furthermore, such approach can also be used by security auditors to place themselves in the position of a malicious legitimate user or even 
in the position of malicious third-party that could get information through a first successful social-engineering attack. 
However, gray-box testing is not white-box testing, meaning that the auditors will not be given access to everything, like source codes for 
example. Security auditors are used to dealing with this situation: they persist with numerous trials and errors or even reverse-engineer 
protocols before implementing them on top of their tool of choice. However, to be efficient at both, they need more than just being able to 
listen to or interact with what they are auditing. Precisely, they need to be able to intercept communications and block them, forward them 
or modify them on the fly. This is why, for example, a platform such as Burp Suite is popular when it comes to auditing web applications. 
3.2 CAN TOOLS 
In the past years, several tools have been released allowing hobbyists to connect to CAN buses found in cars. This is welcomed as the CAN 
protocol is now even spreading outside the car through the OBD-II connector: the more car hacking becomes accessible to tech-savvy 
individuals, the better it is for the security community in general. However, these tools will do no more than what professional tools from 
automobile manufacturers can do. In fact, they will do less as they do not have knowledge of upper-layer protocols. 
Moreover, even though they give users the ability to send and receive frames on and from a CAN bus, they do not provide them with any of 
the capabilities exposed in section 3.1. The reason for that is pretty simple: because CAN is a serial bus, it means that in order to achieve 
this, you need either to physically cut the bus and insert yourself in-between (see Figure 4 for illustration) or to disconnect a particular ECU 
and isolated it on its own bus (see Figure 5 for illustration). Additionally, regarding the former case, CAN buses usually being pretty 
congested, it would be mandatory to handle such issue on both sides of the bus (which must now be considered as two separate buses). 
Figure 4. Man-in-the-middle setup when physically cutting the CAN bus 
Figure 5. Man-in-the-middle setup when isolating a particular ECU 
Furthermore, it would not be wise to implement the aforementioned capabilities on top of these existing tools, and for two reasons. First, 
they only have one CAN interface. Therefore, to achieve man-in-the-middle capabilities, two devices must be bridged together by a 
computer. However, the CAN protocol was designed to meet with timing constraints. It may not be an issue for every ECU but it certainly 
would not provide a sound basis for an auditing platform. Secondly, to connect to a computer, they rely on an USB-UART interface 
operating at 115.2 kbps. Even though it can be configured to operate at higher rates, even at maximum speed we would be at risks of being 
limited. Indeed, keep in mind the objectives behind our approach as well as the requirements derived from them: 
Handle two CAN buses at the same time, each one of them being able to go as far as 1Mbit/s. 
Provide interoperability using the SocketCAN format which is much less compact than the actual CAN frame format. 
Append an additional encapsulation layer to at least be able to distinguish between the two CAN interfaces. 
Reduce the latency as much as possible in order to meet with the timing constraints of the CAN protocol. 
Never drop any CAN frame as this would prevent the proper processing of fragmented payloads. 
For that reason, we argue that the best choice is the use of an Ethernet controller: 
The chance of having congestion issues with our case is inexistent. 
It has been available as standard on any computer for several decades. 
MAC addresses can be used to distinguish between the two CAN interfaces. 
Data transfer rates will in fact provide very low latencies. 
Regarding the no-frame-drop requirement, it is not only about the connectivity with the host computer but also about the speed of the actual 
processing. This is why we should dismiss popular hardware platform like Arduino and instead turn to more powerful microcontrollers.  
Nonetheless, there is another reason why we argue that Ethernet would be the best choice: it allows out-of-the-box use of existing packet 
manipulation frameworks such as Scapy [5]. Not only will this provide security auditors with the ability to use mature and efficient tools, it 
will also help join efforts when it comes to reverse-engineering higher-layer protocols. It was our position with Scapy-radio [2] regarding 
the case of radio-communication protocols and it showed its effectiveness in distributing the workload among security specialists. 
4. CANSPY ARCHITECTURE 
In this section, we detail the architecture of the platform we designed to meet with the functional specifications expressed in section 3. 
4.1 CANSPY HARDWARE 
The main board of CANSPY is a STM32F4DISCOVERY from STMicroelectronics (see Figure 6). It relies on a STM32F407VGT6 
microcontroller with an ARM Cortex-M4 32-bit core running at 160 MHz. This microcontroller also provides several additional cores such 
as 10/100 Ethernet, Micro SD card, UART and CAN. There are more cores other than those we have just listed but these are what we 
required to build CANSPY. 
More specifically, two distinct CAN cores were required and this is precisely what this board provides. Additionally, having these CAN 
cores also avoids the use of SPI buses. Yet, none of the transceivers and connectors required to use the aforementioned cores are provided 
by this board. That is why we attached to this board the STM32F4DIS-BB extension board (see Figure 7). It provides transceivers and 
connectors for 10/100 Ethernet, Micro SD card and UART in the form of RS232 with a DB9 connector. 
Figure 6. Picture of the STM32F4DISCOVERY board 
Figure 7. Picture of the STM32F4DIS-BB extension board 
However, this extension board does not provide any transceivers or connectors for CAN connectivity. That is why we designed an 
additional extension board (see Figure 8). The CANSPY extension board provides connectivity for the two CAN cores (from now on 
designated as CAN1 and CAN2) as well as several possible configurations using jumpers (details are given later in this section). It relies on 
a simple design with few components which makes it easy and cheap to build. It is worth mentioning that the CANSPY extension board 
provides DB9 connectors and their routing is identical to the one chosen by Goodthopter [2]. This means that any cable compatible with 
Goodthopter will be compatible with CANSPY. As whole, the CANSPY hardware platform is inexpensive and easy to put together.  
Figure 8. Picture of the CANSPY extension board (v1.2) 
Figure 9. Picture of the unpopulated PCB of the CANSPY 
extension board (v1.3) 
As mentioned above, the CANSPY extension board allows several possible configurations using jumpers. This is a direct consequence of 
the different issues we exposed in sections 2 and 3. It is worth noting that we are also considering the OBD-II case which provides a 12-
volt line. We explain these configurations here using a picture of an unpopulated PCB of the CANSPY extension board (see Figure 9): 
P104, P105, P106 and P107 provide a direct access to the high and low lines of CAN1 and CAN2. Shunting them will thus 
merge CAN1 and CAN2 which might be used to hot-unplug CANSPY (i.e., without unplugging the DB9 cables). The use of 
jumper wires is required when DB9 cables are not available in a given situation. The reason why there is twice the number of 
jumper pins is because it is convenient when building a CAN testbed using only CANSPY devices.  
P001 and P102, if shunted, provide respectively for CAN1 and CAN2 the 120 Ohm resistor needed at the end of a CAN bus. Do 
not shunt these pins if the resistor is already present on the bus you are connecting to. Otherwise, it might damage the CAN 
devices that are also connected to this bus. Usually, you only need to shunt these pins when building a CAN testbed. 
P100, if shunted, connects the 12-volt line between CAN1 and CAN2. This is needed when the power source for the CAN 
transceivers in U000 and U100 is the 12-volt line via the voltage regulator in U101. 
P103, if shunted, connects the 5 V line between the main board and CAN1. This is needed when both the main board and the 
CAN transceivers in U000 and U100 are using the same power source, whether it is the 12-volt line via the voltage regulator in 
U101 or the 5 V line (e.g., the USB cable). Do not shunt it if both power sources are present. 
Additionally, when building a CAN testbed, providing the 12-volt line might be necessary (e.g., a CAN device is powered by this 
line). In that regard and for practical reasons, the red square in Figure 9 is the location of an electrical terminal connected to the 
12-volt line. Moreover, devices powered by the 12-volt line might use the “signal ground” instead of the “chassis ground”. In that 
situation, shunt P201 to connect both grounds. Do not shunt it when connected to a car. 
4.2 CANSPY FIRMWARE 
In this section, we present the firmware we developed to run on the hardware platform previously exposed. First and foremost, Figure 10 in 
the next page shows the overall architecture. At the lowest levels, we have the different device drivers and the hardware abstraction layer 
provided by the STM32CubeF4 SDK from STMicroelectronics [4]. At the highest levels we have the scheduling mechanisms and in-
between we have the different device handlers and services. 
Each service is registered to a particular device and handles a single job. Only the registered services of a given device can use this device 
to transmit data. Conversely, the data received by any device is accessible to all services. This is achieved using respectively exclusive and 
shared buffers. This functional segmentation helps enforcing the single-job service approach but also provides the user with the mean to 
disable transmission for a given device without disabling reception. 
4.2.1 CANSPY SCHEDULING 
Before digging into the details of the device handlers and their services, let us first focus on the scheduling mechanism. First of all, the fact 
is that we must be able to handle multiple I/O devices at the same time, on a single core, while meeting the timing constraints of two 
distinct CAN buses. Interrupt-driven I/O handling is a proven approach in such situation and the hardware abstraction layer is appropriately 
providing us with an interrupt mode of operation. Consequently, regarding the I/O operations of the CAN devices, given that the frequency 
of the microcontroller is high enough compared to the bitrate of the CAN buses, we should not face any timing issues. 
Furthermore, all other possible I/O operations are also bounded by the bitrate of the CAN buses: whether it is with the Ethernet controller 
or with the Micro SD card drive, all I/O operations are about reading or writing CAN frames. It is worth mentioning that CAN frames have 
a maximum size of 128 bits (including the PHY layer). This means that, with services designed to handle one interrupt at a time and to 
process CAN frames with a linear time-complexity, we thus have a constant upper bound to how long any service will take to complete its 
current job. The only exceptions to this are the debugging and configuration services. Therefore, in the remainder of this section, such 
services will not be considered when explaining the choice we made to meet with timing constraints. 
Because of the very nature of the objectives of the CANSPY platform, there are no interrupt-handling services (i.e., synchronous services) 
more important than others. Indeed, for example, in case of a man-in-the-middle setup where we want to monitor the CAN traffic, the 
service transmitting a received frame on the destination CAN bus is no more important than the one transmitting that very frame on the 
Ethernet network. For that reason and the fact that each service has a bounded execution time, the scheduling mechanism for synchronous 
services relies on a flag-based cyclic executive loop, thus saving the cost of a context-switching mechanism. 
However, in order to also have the ability to include services that are not triggered by an interrupt but instead run permanently (i.e., 
asynchronous services), a distinct cyclic executive loop is dedicated to this type of services. To ensure that the synchronous services have 
an absolute priority over the asynchronous ones, a priority scheduler is placed on top of both cyclic executive loops. This is a non-
preemptive scheduler, meaning it cannot interrupt a service but only a loop after the current service has returned. Again, with asynchronous 
services also designed to have a bounded execution time, adding a context-switching mechanism would not have been cost-effective. 
Finally, there still might be situations where several services registered to a particular device can conflict with each other. For example, in 
case where a service is filtering frames between the two CAN buses while another one is blindly forwarding them (i.e., the former thus 
being completely undermined by the latter). To handle these situations, a mutual exclusion mechanism is also present: each service can be 
registered with an exclusive write access to the device it is registered to. When two or more of such services are started for a given device, 
the one considered by the cyclic executive loop is the one that was first registered. As a result, the following behavior will happen: for a 
given device and at the same time, any number of non-mutually-exclusive services can run but only one mutually-exclusive service at most. 
Figure 10. CANSPY firmware architecture 
4.2.2 CANSPY DEVICES 
In this section, we described all the device handlers implemented by CANSPY as well as their respective options. As previously stated, the 
STM32F407VGT6 microcontroller is providing two distinct CAN cores. In the remainder of this section, there are referred to as CAN1 and 
CAN2. Having two distinct CAN interfaces was mandatory to properly implement man-in-the-middle capabilities. Consequently, every 
options and services are duplicated for each CAN device handler in order to make them fully independent. The idea behind this 
independency is to not restrict users on how they can process CAN frames. For example, it is possible to forward frames from CAN1 to 
CAN2 while blocking them the other way around, thus creating a CAN diode. 
Each one of the CAN device handlers is supporting the following options: 
can_spd: the speed of the CAN bus (it can differ for both devices, thus allowing the use of two different buses at the same time). 
can_mac: the MAC address of the CAN interface over Ethernet (the default last byte is the ID of the CAN interface). 
can_typ: the Ethertype used for CAN encapsulation (the local experimental value 0x88b5 allowed by RFC7042 is the default). 
can_sil: specifies if a CAN interface is silent (i.e., no acknowledgement) until the transmission on the other one has occurred. 
High-priority cyclic executive for 
synchronous services 
Low-priority cyclic executive for 
asynchronous services 
Non-preemptive priority scheduler  
Service 
Service 
Service 
Device handler 
Service 
Service 