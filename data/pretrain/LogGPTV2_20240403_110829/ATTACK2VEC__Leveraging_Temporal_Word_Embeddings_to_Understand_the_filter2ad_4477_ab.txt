for 102 consecutive weeks) of data between December 1,
2016 and November 08, 2018. From this data we extract the
USENIX Association
28th USENIX Security Symposium    907
titjtimetke4e27e10e28e11e12e21e30Telemetry levele14e15e10e20e11e10e4e10s1e4e41e21e7e12s3e19e23s2e6e27e10e28e11e7e71e5e21e30e15e1e20e11e6e71e5e12s1e41e41e5e21e7e11s4e19e23s2e24e31e4e4e10e11e12e4e10e11e12e6e11e7e5e6e11e7e5e4e27e10e28e11e12e21e30e14e15e10e11e12e4e5e12s1s9e24e31e30e15e1e11e6e71e5e12s7e4previous campaignstransitionperiodnew campaignsAttacksC1C1C2C2e19e21101103105107109Event observation count100101102# of eventsfollowing information: anonymized machine ID, timestamp,
security event ID, event description, system actions, etc. On
average, we collect 190 million security events collected from
tens of millions unique machines per day. These security
events were then reconstructed on a per machine basis and
sorted chronologically. Note that for privacy reasons we use
the anonymized endpoint ID to reconstruct a series of security
events detected in a given mahcine and discard it after the
reconstruction process is done. In total, the monitored ma-
chines generated 8,087 unique security events over the 102
observation days.
Data Limitations. It is important to note that the security
event data is collected passively. That is, these security events
are recorded only when corresponding attack signatures are
triggered. Any events preemptively blocked by other security
products cannot be observed. Additionally, any events that
did not match the predeﬁned signatures are also not observed.
Hence the ﬁndings in this paper reﬂect security event evo-
lution observed by Symantec’s IPS, and the data can only
be considered as a proxy for the actual attacker behavior
in the wild. For example, we are unable to trace how zero
day attacks are exploited in the wild [5]. However, as we
show in Section 5 this data still allows ATTACK2VEC to iden-
tify meaningful trends in how security events are used and
evolve. Additionally, ATTACK2VEC could be applied to any
dataset with similar characteristics (i.e., a sequence of secu-
rity events). Another limitation is that our dataset is composed
of weekly snapshots, and we are therefore unable to charac-
terize the evolution of security events that are faster than that.
While this could prevent us from detecting quick anomalies
in the way security events are used (i.e., those that go back to
“normal” in a matter of a few days), this data is still represen-
tative enough to identify long term trends. We provide a more
detailed discussion on the limitations of our data in Section 6.
Appropriateness for word embeddings. As we mentioned,
the word embedding techniques used by ATTACK2VEC come
from the natural language processing ﬁeld. Word frequency
in natural language follows a power-law distribution, and
techniques from language modeling account for this distri-
butional behavior. For these techniques to be appropriate to
our data, therefore, it is ideal that our security events follow
a similar distribution. Figure 2 shows that the events in our
dataset indeed follows a power-law distribution. This similar-
ity forms a solid theoretical foundation for us to use word em-
bedding techniques to encode latent forms of security events,
by considering sequences of security events in the IPS logs
as short sentences and phrases in a special language. In the
next section, we describe how ATTACK2VEC builds temporal
embeddings from a sequence of security events in detail.
4 Methodology
In this section we ﬁrst deﬁne the context window used in
this work. We then formalize the techniques used to generate
Figure 3: Illustration of context window (c = 4).
vector embeddings of security events. Finally, we describe
ATTACK2VEC’s architecture.
4.1 Context Window
Previous research made several interesting observations that
different attack vectors are often packed together by attackers
for a given period of time. For example, Kwon et al. [21]
observed that silent delivery campaigns exhibit synchronized
activity among a group of downloaders or domains and access
the same set of domains to retrieve payloads within a short
bounded time period. Shen et al. [40] pointed out that some
machines may potentially observe different attacks from var-
ious adversary groups happening at the same time, and one
coordinated attack may be observed by different machines.
On the defense side (i.e., IPS telemetry), we consequently
observe that related security events co-occur within a context
(i.e.,
the sequence of attack steps that are commonly per-
formed together with an attack step of interest). Note that this
context can be deﬁned as a time window [21] or a rollback
window [40].
In this paper, we deﬁne the context as a sliding window,
denoted as c, centering around a given security event ei (see
Figure 3). The purpose of using this symmetric context win-
dow is to deal with the noise incurred by concurrency at the
telemetry level (see Section 2). For example, given a real-
world coordinated attack e7,e5,e11,e6 (highlighted in bold in
Figure 3), each endpoint may observe the attack vectors in dif-
ferent order (e.g., e7 and e5 may switch orders), attack vectors
might be diluted by other unrelated security events (e.g., e71
observed between e6 and e5 in s2), or certain security events
are not observed, for example because they have been blocked
by other security products before the IPS was able to log them
(e.g., e6 not observed in s4). The proposed context window
mechanism is able to capture the events surrounding a given
security event (i.e., before and after), minimizing the impact
of noise incurred by concurrency.
908    28th USENIX Security Symposium
USENIX Association
Telemetrytimecontext ei-cei+ce6e27e10e28e11e7e71e5e21e30e15e1e20e11e6e71e5e12s1e41e41e5e21e7e11s4e19e23s2e4e6e11e7e5C2Attack4.2 Temporal Security Event Embedding
The proposed temporal security event embedding is adapted
from dynamic word embeddings by Yao et al. [48]. We use
pointwise mutual information (PMI), a popular measure for
word associations, to calculate weights between two security
events given a contextual window c and an observation period
t. PMI measures the extent to which the events co-occur more
than by chance or are independent. The assumption is that if
two events co-occur more than expected under independence
there must be some kind of relationship between them. For
each t-th observation period, we build a |E|×|E| PMI matrix,
where a PMI value between ei and e j is deﬁned as follows.
(cid:18) pt (ei,e j)
(cid:19)
pt (ei)p(e j)
,
PMIt (ei,e j,c, S) = max(log
,0),
pt (ei,e j) =
pt (ei) =
W (ei,e j)
|St|
W (ei)
|St|
,
(1)
where W (ei) and W (e j) respectively count the occurrences
of security events ei and e j in St, and W (ei,e j) counts the
number of times ei and e j co-occur within a context window
(see Figure 3, Section 4.1) in St. Note that when W (ei,e j), the
number of times ei and e j co-occurring in a given contextual
window is small, log
can be negative and affects
the numerical stability. Therefore, we only keep the positive
values in Eq 1 (see [22]).
(cid:16) pt (ei,e j)
pt (ei)p(e j)
(cid:17)
Following the deﬁnition of PMIt, the security event embed-
ei ∈ H(t), at t-th observation time is deﬁned
ding H(t), e.g., ηt
as a factorization of PMIt (c, S),
H(t)H(t)T ≈ PMIt (c, S).
(2)
The denser representation H(t) reduces the noise [37] and
is able to capture events with high-order co-occurrence (i.e.,
that appear in similar contexts) [30, 35]. These characteristics
enable us to use word embedding techniques to encode latent
forms of security events, and interpret the security event evo-
lution in a meaningful and measurable way. Note that Li et
al. [25] and Levy et al. [22] have theoretically proven that the
skip-gram negative sampling (SGNS) used by the word2vec
model can be viewed as explicitly (implicitly) factorizing a
word co-occurrence matrix. We refer interested readers to
[22, 25] for theoretical proofs.
Across time T , we also require that ηt
. This means
that the same security event should be placed in the same
latent space so that their changes across time can be reliably
studied. This requirement roots upon a practical implication.
For example, a security event was observed after its associated
CVE was disclosed. Its embeddings must therefore approxi-
mately stay the same before the disclosure date. Otherwise,
ei ≈ ηt+1
ei
we would observe unwanted embedding changes and inval-
idate the ﬁndings. To this end, Yao et al. [48] identiﬁed the
solution of the following joint optimization problem as the
temporal embedding results. Note that throughout this section,
(cid:107).(cid:107) denotes squared Frobenius norm of a vector.
min
H(1),...,H(T )
1
2
(cid:107)PMIt (c, S)− H(t)H(t)T(cid:107)2
T
∑
t=1
α
2
+
T
∑
t=1
(cid:107)H(t)(cid:107)2 +
β
2
T
∑
t=1
(cid:107)H(t − 1)− H(t)(cid:107)2,
(3)
where α and β are parameters respectively regularizing H(t),
and making sure that H(t − 1) and H(t) are aligned (i.e., em-
beddings should be close if their associated contexts don’t
change between subsequent times.). In this way, all embed-
dings across time T are taken into consideration. At the same
time, this method can accommodate extreme cases such as the
one in which security event ei is not observed in (S)t since the
optimization is applied across all time slices in Eq 3. We refer
interested readers to [48] for theoretical proofs and empirical
comparison studies with other state-of-the-art embedding ap-
proaches. Following [48], we use grid search to identify the
best parameters and experimentally set α = 10, β = 40, c = 8,
d = 50 and run 5 epochs for all the evaluations throughout
our paper.
4.3 ATTACK2VEC Architecture
The architecture and workﬂow of ATTACK2VEC is depicted
in Figure 4. Its operation consists of three phases:  data
collection and preprocessing,  temporal event embedding,
and   event tracking and monitoring.
Data collection and preprocessing (). ATTACK2VEC takes
the security event stream generated by endpoints (e.g., com-
puters that installed an IPS). The goal of the data collection
and preprocessing module is to prepare the data for the tem-
poral event embedding method detailed in Section 4.2. AT-
TACK2VEC then consumes this timestamped security event
data generated from millions of machines that send back their
activity reports. The collection and preprocessing module re-
constructs the security events observed on a given machine s j
as a sequence of events ordered by timestamps, in the format
of s j = {e( j)
l }. The output of the data collection
and preprocessing module is St = {st
z} where z
denotes the number of machines.
Temporal event embedding (). The core operation of AT-
TACK2VEC is embedding these security events into a low
dimensional space over time. This phase takes S as input and
encodes latent forms of security events, by considering se-
quences of security events in the IPS logs as short sentences
and phrases in a special language. In this way, each security
2 , ...,e( j)
1 ,e( j)
1, ...,st
i, ...,st
USENIX Association
28th USENIX Security Symposium    909
Figure 4: ATTACK2VEC’s Architecture.
ei, and later aligned across time.
event, at a timestamp t, is represented by a d-dimensional
vector representation ηt
Detection and monitoring ( ). Once the security events
are encoded in low-dimensional space, ATTACK2VEC is able
to use various metrics (Section 5.1) to detect changes (Sec-
tion 5.2), identify event trends (Section 5.3), and monitor how
security events are exploited in the wild (Section 5.4) in a
measurable and quantiﬁable way.
5 Evaluation
In this section, we provide a thorough evaluation of temporal
event embeddings and ATTACK2VEC. We designed a number
of experiments that allow us to answer the following ques-
tions:
• Can we use the temporal embeddings calculated by AT-
TACK2VEC to identify changes in how a security event is
used in the wild (see Section 5.2)? To this end, we need
our temporal embeddings to present high ﬁdelity over
time. The rationale behind this question is that the same
security event should be placed in the same latent space
by the proposed temporal event embedding method (see
Section 4). Their changes across time can be reliably
studied (see Section 5.6).
• Can we leverage temporal embeddings to identify trends
in the use of security events (see Section 5.3)? The ra-
tionale behind this evaluation is that embedding vector
norms across time should be more robust to the changes
than word frequency which is static (i.e., calculated at a
speciﬁc point of time) and sporadic.
• Can we leverage temporal embeddings to meaningfully
understand the evolution of security events, and mon-
itor how security events are exploited in the wild (see
Section 5.4)?
In the following, we ﬁrst deﬁne the metrics used by our eval-