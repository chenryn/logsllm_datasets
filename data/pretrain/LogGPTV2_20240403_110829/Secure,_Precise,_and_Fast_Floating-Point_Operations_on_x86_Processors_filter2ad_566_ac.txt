leaking secrets. Here, side effects are modiﬁcations to
the program state or any observable interaction, includ-
ing memory accesses, exceptions, function calls, or I/O.
Escort controls all side effects except for I/O statements.
76  25th USENIX Security Symposium 
USENIX Association
  0 % 20 % 40 % 60 % 80 %100 %fabsffabsexp10fexp10expflog10powlog2powfexp2floglog10fexp2ceilﬂoorlog2flogfsincossinfcosftanceilfﬂoorftanfOptimized ﬂoating-point instructions(cid:31) Assume input() returns true.
1: p ← &a
2: secret ← input()
3: if secret = true then
4:
5: else
6:
7:
...
...
p ← &b (cid:31) Instruction does not update pointer p,
since basic block’s execution-time predicate is false.
(cid:31) Accesses a instead of b!
∗p ← 10
8:
9: end if
Figure 7: The use of pointers can leak information. If
store instructions are not allowed to access memory
when the basic block’s predicate is false, then pointer
p will dereference the address for a instead of b, thus
revealing that secret is true.
singleton set, Escort uses the conditional data copy op-
eration on all potential pointees i.e. the elements of the
points-to set. The predicate of the conditional copy oper-
ation checks whether the pointer points to the candidate
pointee. If the predicate is false, the pointee’s existing
value is overwritten, whereas if the predicate is true, the
new value is written to the pointee.
Function Call Side Effects. Adversaries can observe
the invocation of functions (or lack thereof) using side
channels like the Instruction Pointer. Thus, a solution in-
capable of handling function calls will leak information
to the adversary. While inlining functions is a potential
solution, inlining is impractical for large applications.
Escort handles side effects from function calls by
propagating the predicate from the calling function to the
callee. Thus, each user-deﬁned function is given an ad-
ditional argument that represents the predicate of the call
site’s basic block. The callee ensures correct handling of
side effects by ANDing its own predicates with the caller’s
predicate.
Side Effects from Exceptions. Program termination
caused by exceptions will leak the presence or absence
of abnormal operands. To prevent such information leak-
age, Escort requires that exceptions not occur during pro-
gram execution5.
Escort manages ﬂoating-point and integer exceptions
differently. Escort requires that the programmer disable
ﬂoating-point exceptions (e.g. using feclearexcept()).
For
integer exceptions, Escort borrows ideas from
Raccoon by replacing abnormal operands with benign
operands (e.g. Escort prevents integer division-by-zero
by replacing a zero divisor with a non-zero divisor).
5Escort assumes that the input program does not throw exceptions,
so masking exceptions does not change the semantics of the program.
4.2.5 Step 5: Transforming Array Accesses
Array index values reveal secrets as well. For instance,
if the adversary observes that accesses to array[0] and
array[secret index] result in accesses to locations 10
and 50, then the adversary knows that secret index =
40. To eliminate such information leaks, the Escort com-
piler transforms each array access into a linear sweep
over the entire array, which hides from the adversary the
address of the program’s actual array index.
Of course, the transformed code is expensive, but this
approach is feasible because (1) math library functions
typically use only a few small lookup tables, thus requir-
ing relatively few memory accesses and (2) the proces-
sor’s caches and prefetchers dramatically reduce the cost
of sweeping over the arrays.
4.2.6 Step 6: Transforming Loops
Some loops introduce timing channels because their trip
counts depend on secret values. The Escort compiler
transforms such loops using predictive mitigation [38].
The loop body executes as many times as the smallest
power of 2 that is greater than or equal to the loop trip
count. For instance, if the actual loop trip count is 10,
then the loop body is executed 16 times. The basic block
predicate ensures that dummy iterations do not cause side
effects. With this transformed code, an adversary that ob-
serves a loop trip count of l can infer that the actual loop
trip count l(cid:29) is between l and 0.5× l. However, the exact
value of l(cid:29) is not revealed to the adversary.
Unfortunately, this naive approach can still leak infor-
mation. For instance, if two distinct inputs cause the loop
to iterate 10 and 1000 times respectively, the transformed
codes will iterate 16 and 1024 times respectively—a
large difference that may create timing variations. To
mitigate this problem, Escort allows the programmer to
manually specify the minimum and maximum loop trip
counts using programmer annotations. These annota-
tions override the default settings used by the Escort
compiler.
4.3 Example Transformation: exp10f
We now explain how Escort transforms an exam-
ple non-secure function (Figure 8a) into a secure func-
tion (Figure 8c). To simplify subsequent analyses and
transformations, the Escort compiler applies LLVM’s
mergereturn transformation pass, which uniﬁes all exit
nodes in the input function (see Figure 8b).
First,
the Escort compiler
replaces elementary
ﬂoating-point operations in lines 8 and 10 with their se-
cure counterpart function shown in lines 21 and 22 of the
transformed code. Second, using the algorithm shown in
Figure 6, the Escort compiler associates predicates with
USENIX Association  
25th USENIX Security Symposium  77
float e10(float x) {
float n, y = mf(x, &n);
if (int(n) >> 23 & 0xff > 23 & 0xff > 23 & 0xff
18:
> 23 
& 0xff) 
> 23 & 0xff) > 23 & 0xff) > 23 & 0xff) > 23 & 0xff)  Q3 + 3×RIQ or v  Q3 + 20×RIQ
or v < Q1 − 20×RIQ. Results presented in the following
sections use the relaxed Tukey method described above.
Different
Operands
Same
Operands
Mean
847,323
(0.81%)
929,703
(0.89%)
Median
1,066,270
(1.02%)
1,139,961
(1.09%)
Std. Dev.
381,467
364,192
Table 3: Number of discarded outliers from 100 million
double-precision square-root operations. The results in-
dicate that our outlier elimination process is statistically
independent of the input operand values.
To demonstrate that our outlier elimination process
does not bias conclusions, we compare the distribution
of outliers between (a) 100 million operations using
randomly-generated operands, and (b) 100 million op-
erations using one ﬁxed operand. The two experiments
do not differ in any way other than the difference in their
input operands. Table 3 shows the mean, median, and
standard deviation of outliers for the double-precision
square-root operation. Results for other ﬂoating-point
operations are similar and are elided for space reasons.
Since the difference in mean values as well as the dif-
ference in median values is within a quarter of the stan-
dard deviation from the mean, we conclude that the dis-
carded outlier count is statistically independent of the in-
put operand values.
5.2 Timing Assurance of Elementary Op-
erations
Since exhaustively testing all possible inputs for each op-
eration is infeasible, we instead take the following three-