title:Unveiling Hardware-based Data Prefetcher, a Hidden Source of Information
Leakage
author:Young-joo Shin and
Hyung Chan Kim and
Dokeun Kwon and
Ji-Hoon Jeong and
Junbeom Hur
Unveiling Hardware-based Data Prefetcher, a Hidden Source of
Information Leakage
Youngjoo Shin
Kwangwoon University
Seoul, Republic of Korea
PI:EMAIL
Hyung Chan Kim
The Affiliated Institute of ETRI
Daejeon, Republic of Korea
PI:EMAIL
Dokeun Kwon
The Affiliated Institute of ETRI
Daejeon, Republic of Korea
PI:EMAIL
Ji Hoon Jeong
The Affiliated Institute of ETRI
Daejeon, Republic of Korea
PI:EMAIL
ABSTRACT
Data prefetching is a hardware-based optimization mechanism used
in most of the modern microprocessors. It fetches data to the cache
before it is needed. In this paper, we present a novel microarchitec-
tural attack that exploits the prefetching mechanism. Our attack
targets Instruction pointer (IP)-based stride prefetching in Intel
processors. Stride prefetcher detects memory access patterns with
a regular stride, which are likely to be found in lookup table-based
cryptographic implementations. By monitoring the prefetching
activities near the lookup table, attackers can extract sensitive in-
formation such as secret keys from victim applications. This kind of
leakage from prefetching has never been considered in the design
of constant time algorithm to prevent side-channel attacks. We
show the potential of the proposed attack by applying it against
the Elliptic Curve Diffie-Hellman (ECDH) algorithm built upon the
latest version of OpenSSL library. To the best of our knowledge,
this is the first microarchitectural side-channel attack exploiting
the hardware prefetching of modern microprocessors.
CCS CONCEPTS
• Security and privacy → Cryptanalysis and other attacks;
KEYWORDS
Hardware prefetching, microarchitectural side-channel attacks,
OpenSSL, ECDH algorithm
ACM Reference Format:
Youngjoo Shin, Hyung Chan Kim, Dokeun Kwon, Ji Hoon Jeong, and Jun-
beom Hur. 2018. Unveiling Hardware-based Data Prefetcher, a Hidden
Source of Information Leakage. In 2018 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’18), October 15–19, 2018, Toronto,
ON, Canada. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/
3243734.3243736
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Association for Computing Machinery.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243736
Junbeom Hur
Korea University
Seoul, Republic of Korea
PI:EMAIL
1 INTRODUCTION
Modern microprocessors utilize a variety of microarchitectural el-
ements to achieve hardware-level optimization. While attractive
from a performance perspective, pursuing optimization has led to
several microarchitectural attacks [19]. The CPU cache is a well-
known hardware component that has been exploited by cache side-
channel attacks [38, 48, 57]. In the attacks, the cache contention be-
tween cores results in an unintentional side-channel through which
sensitive information may be leaked to attackers from other cores.
Branch prediction unit (BPU) is another hardware component that
modern processors rely on to enable speculative execution. The Re-
cently discovered microarchitectural attacks, dubbed as Meltdown
[37] and Spectre [35], exploit the BPU and speculative execution to
break the fundamental isolation between different security domains
in software systems.
In this paper, we present a new microarchitectural attack that
exploits hardware-based data prefetcher, which is a kind of processor
optimization element in most commodity CPUs. The hardware
prefetcher is located in the CPU cache hierarchies. It attempts to
predict the memory access patterns and fetches the anticipated
lines to the data cache before they are actually accessed, which
otherwise would result in a cache miss.
Contemporary Intel x86 cores are equipped with four kinds of
hardware-based data prefetchers, each of which features a spe-
cific prefetching algorithm [27]. We discovered that among those
prefetchers, the Instruction Pointer (IP)-based stride prefetcher affects
cache usage during the execution of constant-time cryptographic
algorithms. As its name implies, this prefetcher detects memory
access patterns with regular stride on load instructions in a loop
structure. Such kinds of access patterns are often found in lookup
table-based cryptographic implementations. If a lookup operation
accidentally produces a sequence of strided memory accesses, the
prefetcher is then triggered to fetch the memory lines adjacent to
the lookup table, which in turn leaves unique footprints on the
cache. Our attack utilizes those footprints near the lookup table
as a side-channel to infer secret keys of the cryptographic algo-
rithm from other cores. Such kind of information leakage from
prefetching has never been considered in the design of constant-
time algorithms.
We examine the potential of the proposed attack by applying it
against OpenSSL 1.1.0g [47], the latest version of the cryptographic
Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada131library at the time of writing this paper1. In order to support elliptic
curve cryptography [34], the library includes a scalar point multi-
plication algorithm, which is implemented in the form of branchless
Montgomery ladder. It is a state-of-the-art constant-time algorithm
that is known to have no secret-dependent cache traces and is
thereby resistant against cache side-channel attacks [32, 46]. How-
ever, in terms of the implementation of squaring over binary field
GF(2m), which is a field arithmetic internally used in the Mont-
gomery ladder algorithm, OpenSSL library implements it using a
lookup table to improve computational efficiency. When the scalar
point multiplications are executed, the prefetching activities affect
the cache lines adjacent to the squaring lookup table. By carefully
monitoring those activities, we are able to recover unknown bits of
the scalar.
By exploiting this microarchitectural side-channel, we could suc-
cessfully extract a private key of the Elliptic Curve Diffie-Hellman
(ECDH) algorithm. In OpenSSL 1.1.0g with sect571r1 curve (NIST
Binary-Curve B-571 [45]), it took about 19 CPU hours for an at-
tacker from a different core to complete the private key recovery
process. It is important to note that among all the attack procedures,
the online phase takes only about 3 min to complete, which makes
our attack practical in real world applications.
Affected processors. We investigated all Intel processors available
in our experiments to determine which models are affected by our
attack. As a result, we found that Core i5-3570 (Ivy Bridge), i5-4690
(Haswell), Xeon E5-2620v4, and E5-2630v4 (Broadwell) are vulnera-
ble to the attack. It is worth noting that these microarchitectures
are the most widely used ones in commercial cloud infrastructure
such as AWS EC2 [3].
1.1 Our Contribution
In this paper, we present our novel discovery that hardware-based
data prefetching in modern processors can be exploited as a source
of information leakage. We demonstrate that the IP-based stride
prefetching enables microarchitectural side-channel attacks on
constant-time cryptographic algorithms that are supposed to be
immune to such attacks. Specifically, the main contributions of this
paper are threefold as follows:
Novel method for searching side-channel. We propose a novel
method for searching a new side-channel in cryptographic appli-
cations. It allows us to find a hidden source of side-channel in
applications that cannot be revealed through the program analysis-
based approaches [12, 13, 55]. Our methodology differs from those
approaches in how the vulnerable locations are found. Specifically,
we take into consideration real cache traces on all the memory
lines belonging to the executable binary. By exhaustively inspecting
them, we learn which lines have secret-dependent cache traces. The
discovery of information leakage from the Intel stride prefetcher
resulted from the proposed method. This method is generic and
can be done automatically; therefore, it can be easily adopted to
find the side-channel vulnerabilities of any kind of cryptographic
library. We give the detailed procedure in Section 3.
An in-depth analysis on the Intel stride prefetcher. We dis-
close details of the IP-based stride prefetcher in Intel core, which
1We noticed that OpenSSL of the version later than 1.1.0g has been released in 27
March 2018, but it is still vulnerable to our attack.
has never been explored in the literature. Due to the lack of suffi-
cient information on the prefetcher, we conduct an in-depth analysis
through diverse experiments. Specifically, we analyze the observed
prefetching activities by comparing it with the ground truth of
memory access patterns from the actual execution trace. Through
this approach, we extend the knowledge on prefetching, i.e., under
what conditions prefetching is triggered and what memory line
is fetched into the cache. The analysis results on the Intel stride
prefetcher is given in Section 4. We demonstrate the prefetching
behavior with an example of the scalar point multiplication over
GF(2m) in the OpenSSL library, which is given in Section 5.
Attacking ECDH in the latest version of OpenSSL. Based on
the result of prefetching analysis (in Section 4) and further obser-
vation of the scalar point multiplication (in Section 5), we imple-
ment the first attack on ECDH algorithm of OpenSSL library by
exploiting the hardware-based data prefetcher in the Intel microar-
chitecture. Our attack defeats the state-of-the-art countermeasure
implemented in the latest version of OpenSSL library for cache
side-channel attacks, and successfully recovers the private keys of
ECDH implementation built upon the library. The detailed algo-
rithm of our attack and experimental results are given in Section
6.
1.2 Related Work
Microarchitectural attacks. Due to its vulnerability to side-channel
attacks with high resolution and low noise, a variety of side-channel
attacks exploiting the CPU cache have been proposed. The pro-
posed attacks can be classified into two major techniques, namely
Flush+Reload [4, 23, 24, 26, 36, 57, 58] and Prime+Probe [7, 25, 29,
38, 42, 48], according to the granularity levels of the attack. Several
variants use specialized hardware features such as Intel TSX and
SGX to enhance the attack performance [11] or hide from being
detected [52].
The branch prediction unit is another microarchitectural fea-
ture that can be exploited to construct side-channels. Several at-
tacks have been proposed to break the system-level [35, 37, 41] and
hardware-level [14] protection by using the BPU.
As one of the other microarchitectural features, prefetching
mechanism is also getting considerable attention. Gruss et al., [22]
presented Prefetch Side-Channel Attacks. Their work exploits the
weakness in software-based prefetching to defeat the kernel pro-
tection (e.g., KASLR), which is quite different from our attack with
regard to the way of exploitation and the attacker’s goal. Bhat-
tacharya et al., [5, 6] examined possible information leakage from
the hardware prefetcher, but the examination was conducted on
a simulated CPU and no concrete attacks were presented as well.
Prefetching was also utilized for protection from cache side-channel
attacks [15, 17].
Searching side-channel. Identifying the side-channel vulnerabili-
ties in a program is crucially important for designing secure systems.
For this purpose, many program analysis-based approaches have
been proposed. CacheAudit [12] is a formal verification tool for
automatic analysis of cache side-channels. It takes a program binary
and cache configuration of the target system as inputs, and pro-
vides the upper bound of information leakage from the side-channel.
The tool is extended in a further work [13] to cover dynamically
Session 2A: Side Channel 1 CCS’18, October 15-19, 2018, Toronto, ON, Canada132allocated memory for analysis. CacheD [55] is another tool that
leverages symbolic execution and constraint solving to identify
potential differences in cache usages.
In the program analysis-based approaches, real cache traces at
every memory line in a program binary are not taken into consider-
ation during investigation. Therefore, the aforementioned methods
cannot find vulnerable memory locations affected by indirect cache
activities from the hardware prefetcher.
Cache Template Attacks [24] utilizes real cache traces rather
than relying on the program analysis for exploitation, which seems
somewhat similar to the proposed searching method. However, we
realize a more fine-grained method to detect the side-channel (Refer
to Section 3.1 for a detailed comparison).
Attacks on constant-time cryptographic algorithms. Constant-
time algorithms are widely used in various software-based cryp-
tographic implementations to mitigate cache side-channel attacks.
This countermeasure is, however, still subject to advanced and
sophisticated attacks. Yarom et al., [56] found that a conditional
branch in OpenSSL’s Montgomery ladder algorithm can be ex-
ploited to extract secret information by monitoring the cache usages.
Genkin et al., [20] and Kaufmann et al., [33] discovered cache side-
channels in the conditional branches of low-level field arithmetic
algorithms in Curve25519 implementations. On the other hand, Gar-
cia et al., discovered software defects in OpenSSL’s constant-time
algorithms of ECDSA [18] and DSA [50], all of which are vulnerable
to cache side-channel attacks.
Similar to the attacks mentioned above, our attack targets a
constant-time cryptographic algorithm, but differs in that hardware
prefetching is exploited. Hence, our attack can be delivered even
on robust implementations of constant-time algorithms that have
neither conditional branches nor software bugs.
2 PRELIMINARIES
2.1 Cache side-channel
Cache hierarchy. Cache is a special hardware in modern CPU
microarchitecture. It is a small piece of storage with high speed,
and aims at bridging the gap in the latency between the memory and
the processor. In modern multi-core processors, the cache hierarchy
has three levels of on-chip cache, namely L1,L2, and L3. L1 cache is
the closest to the processor core among all caches, while its size is
smaller than the others. L3 cache, which is also referred to as the
last level cache (LLC), has the largest size (for instance, Intel Xeon
E5-2670 v2 used in Amazon EC2 has LLC of 25MB). While L1 and
L2 caches are privately used by a core, LLC is shared among all the
cores of the processor.
A cache is divided into cache sets, and each set contains mul-
tiple cache lines of fixed size B (usually B=64 bytes). The cache
associativity determines the number of cache lines in a cache set.
Flush+Reload technique. Our attack is constructed upon the
Flush+Reload technique [57], which is used to establish the LLC-
based side-channel. The Flush+Reload technique exploits memory
sharing between two processes A and B. This technique proceeds
in three phases. During Flush phase, A flushes the desired mem-
ory lines (shared with B) from the entire cache hierarchy using
the clflush instruction. Owing to the inclusiveness property of
Table 1: List of hardware prefetchers in Intel processors
(since Sandy Bridge)
No.
1