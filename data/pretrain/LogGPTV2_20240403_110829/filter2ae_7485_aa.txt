这是一道今年4月份第二届全国强网杯线下赛时候的题目，最近在线下抓取的exp流量辅助之下终于得以完成。其他几道难题好像网上都能找到相关解题思路了，而唯独这道题还没有。完成后特地花时间完成本文来与大家分享学习。
此题的难点主要有两个，首先是对通讯协议的逆向与构造，其次就是对虚拟机指令集的逆向与分析。需要一提的是，以下的解法只是其中的一种，题目本身存在不止一个漏洞，从各位神仙大佬的exp流量来看，至少存在两个漏洞，利用的方法也有多种。题目文件请从附件下载。
## 找到突破口
刚拿到这道题目绝对是有一种无从下手的感觉，首先看一下题目开的保护。
    Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
        FORTIFY:  Enabled
保护还是开得比较全面的，但是留下一个PIE。  
直接运行以后只会显示welcome，输入任意字符串以后也不会有进一步的交互提示。  
打开ida反编译之后稍微跟踪一下函数就会发现有一个代码量比较大的switch语句，用ida的流程图功能展示如下：  
稍有经验的选手们都可能知道，如果反编译出来的代码存在一个很大的swtich语句，其中存在嵌套结构的，这样的情况很有可能就是一个虚拟机，或者是一个解释器。  
看到代码量这么大的函数不好下手，我们换一个思路，从字符串下手。  
字符串里面提供的信息也是少得可怜，就选择一个看起来最特别的放到google搜一下好了。  
马上就能看到提示说字符串出现在qemu里面一个gdbstub组件里面：  
[gdbstub.c](https://android.googlesource.com/platform/external/qemu/+/master/gdbstub.c)  
把这份源码下载下来，和ida里面反编译的源码对照，就能把其中一些函数名确认下来了，根据源码我们不难确定binary里面调用了gdbstub的`gdb_handlesig`和`gdb_handle_packet`函数，当然也包块其他的一些辅助函数，例如`hextommem`和`put_packet`。而在`gdb_handlesig`的尾部有一个`custom_read`函数（自定义名称）  
里面出现了整个程序唯一一个`read`函数，这里就是程序用来获取输入内容的地方。  
理清一下这部分的逻辑，根据上面两张截图的代码我们可以了解到，程序会从`stdin`获取用户的输入，然后把输入交给`gdb_read_byte`这个函数去解析处理，所以我们要通过gdbstub的解析模块对程序进行输入操作。
## gdbstub
再回到gdbstub第一次进入我们视线的地方，发现这是一个qemu内置的模块，它的作用是提供一个接口给gdb与qemu的虚拟环境进行调试。这也正好吻合了题目的名字——debugvm。既然是内含了一个gdb调试的接口，何不就直接通过gdb链接测试一下？  
我们直接借助`ncat`这个工具打开把程序的I/O转发到一个本地端口：  
`ncat -vc ./debug-vm -kl 0.0.0.0 4444`  
然后直接用gdb连接上去看一下，打开gdb以后运行命令  
`target remote :4444`  
咦，好像有戏，连接成功，并且输出了相关寄存器的状态  
尝试一下基本的命令，如果直接用`next`命令，程序会卡住没有返回。如果用`continue`命令，可以观察到有几个寄存器的值发生了变化，而且程序会报SIGKILL错误。  
测试一下其他一些命令，发现hexdump竟然可以正常使用，用时还能往段地址上面写数据。  
### gdb remote protocol
通过以上简单的测试我们可以确定，程序内置的是一个阉割版的gdb remote
server接口（我一开始还天真地以为通过p命令往虚拟机内存写上x86的shellcode就可以执行了）。首先还是先搞懂gdb的通讯协议吧。先是找到了一条命令，能够让gdb显示通讯包的内容：  
`set debug remote 1`  
部分的输出如下图  
直观判断的话，发送的数据包都会以`$`开头以`#`加两位数字结束。查阅相关资料后得到具体的编码方案。  
如上图所示，包的内容会以16进制的形式来编码(enhex)，`#`后面的两位数字是校验码，具体的计算方式是数据包中所有字符求和再用256求余数。  
而数据包的内容，也就是RSP协议的载体，将会是gdb接收的命令，这里选取几个比较重要的命令展示，其余命令请见参考资料1。
  * g: 返回所有寄存器的值 
        send: $g#67
    received: 00000000000000001407404000000000f03f008000000000100800800000000000000000000000000807404000000000000000800000000000000000000000000004000000000000000000000000000000000000000000004c0740400000000000000000000000000100000000000000000000000000000078030080000000001f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
  * p: 返回指定寄存器的值
  * P: 写入指定寄存器的值 
        send: $p94#dd
    received: ffffffffffffffff
    send: $P90=2301000000000000#fc
    received: OK
  * m addr,length：读取指定内存数据
  * M addr，lenght：写入指定内存数据 
        send: $m0,4#fd
    received: 00000000
    send: $M0,4:23010000#9d
    received: OK
  * Z0,addr,kind 在指定地址下断点
  * z0,addr,kind 清楚指定地址的断点 
        send: $Z0,0,2#44
    received: OK
  * c： 继续运行程序，到断点会停下来
本篇writeup涉及的gdb指令基本上就这么多，如果对比源码和反编译的代码还可以发现，程序阉割了一个重要的`s`指令，也就是原本用来进行单步调试的只能，这也就是为什么我们刚刚测试的时候没有办法通过`next`指令来进行跟踪。但是不要紧，通过`break`下断点和`continue`的组合，仍然可以达到单步调试的效果。
### 构建通讯组件
为了节省时间，这时候我们先上github找一找有没有现成的通讯模块可以供我们使用。找到一个python的库[pyrsp](https://github.com/stef/pyrsp),相当于一个rsp的客户端，可以通过python来与gdb
remote
server进行交互。起先还是准备用pyrsp加上ncat转发端口的方式来进行调试，但是这样的话用gdb调试debugvm程序本身就比较麻烦，毕竟攻击对象是debugvm，我们需要找到vm里面的漏洞然后从debugvm的层面去进行攻击才能获取到shellcode。
最后还是用传统的pwntools来编写exp，这样调试起来也比较方便，但是要把pyrsp里面的一些功能函数给迁移到exp当中。其中构造rsp数据包的`pack`函数可以直接导入使用，而其他的一些命令则重新借用pwntools的函数封装起来。以下是部分代码。
    from utils import * # 来自pyrsp的utils模块
    BITSIZE = 32
    REGS = ['r0', 'r1', 'r2', 'r3', 'r4', 'r5', 'r6', 'r7', 'r8', 'r9',
            'r10', 'r11', 'r12', 'r13', 'r14', 'r15', 'flag', 'pc', 'sp', 'foo1', 'foo2'
            'counter', 'foo3'] # vm定义的各个寄存器，后面会讲到是如何分析出来的
    def rc(): # receive
        resp = p.recvuntil('#') + p.recv(2) 
        return resp[2:-3]
    def sd(content): # send
        p.send(pack(content)) # pack是pyrsp提供的数据包打包函数
    def cmd(content):
        sd(content)
        return rc()
    def get_regs():
        resp = cmd('g')
        regs=dict(zip(REGS,(switch_endian(reg) for reg in split_by_n(resp,BITSIZE>>2))))
        output = "\n".join(["%s:%s" % (r, regs.get(r)) for r in REGS])
        p.info(output)
        return regs
    def store(addr, data):
        resp = cmd('M%x,%x:%s'%(addr, addr + len(data), enhex(data)))
        return addr + len(data)
    def set_break(addr): 
        resp = cmd('Z0,%x,2' % addr)
        p.info('set bp at: 0x%x' % addr)
    def del_break(addr):
        resp = cmd('z0,%x,2' % addr)
        p.info('del bp at: 0x%x' % addr)
其他的gdb指令都可以通过以上这种方式封装好，到这里已经可以方便地控制程序内部的vm运行指令。
## 自定义指令集
起先还以为vm的指令集会是现成的，于是翻遍了qemu里面各种架构的源码，发现没有一个是对应起来的。后来看到知乎上面大佬们的赛后评价分析[如何评价2018强网杯线下赛？
- 知乎](https://www.zhihu.com/question/272521799/answer/368151211),才知道这是一个
**手写的新指令集** , 在佩服出题人之余，只好老老实实地准备逆向死磕指令集代码。
###  逆向
先贴上一份标注好的main函数代码  
程序在入口处就分配了一段长度为0x5c的空间，根据上下文连蒙带猜，可以分析出这是保存cpu状态的一个结构体，所有的寄存器信息都会保存在这里面。里面有r0-r15,16个通用寄存器，还有pc，sp这样的特殊寄存器。每个寄存器都是32位的长度，还有一些看不出作用的就先随便起一个名字。
    struct __attribute__((aligned(4))) cpu_state
    {
      __int32 r1;
      __int32 r2;
      __int32 r3;
      __int32 r4;
      __int32 r5;
      __int32 r6;
      __int32 r7;
      __int32 r8;
      __int32 r9;
      __int32 r10;
      __int32 r11;
      __int32 r12;
      __int32 r13;
      __int32 r14;
      __int32 r15;
      __int32 r16;
      __int32 flag;