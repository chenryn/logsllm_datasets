Note that the left hand side of above equation (2) is
e(g,C)/e(g, g)y = e(g, g)f (cid:126)m(α)−y, and the right hand side
is e(ψ, gα/gr) = e(gf (cid:126)w(α), gα−r) = e(g, g)(α−r)f (cid:126)w(α).
5. EPOR: Efﬁcient Proofs of Retrievability
In this section, we construct an efﬁcient POR scheme with
private veriﬁability and call it EPOR. Our construction in-
tegrates the idea of Kate et al. [22] and Shacham and Wa-
ters’ POR scheme [26] (the private veriﬁability version) in
a seamless way. In the following description, EPOR is con-
structed over a modulo group. In addition, EPOR can also
be alternatively instantiated over an elliptic curve group (bi-
linear map is not required since our scheme does not support
public veriﬁability).
Recall that: (1) the notation f (cid:126)m(x) denotes the polyno-
mial with coefﬁcient vector (cid:126)m = (m0, . . . , ms−1), that is,
3 We remark that in the scheme proposed in this paper, bilinear map is not
required, since our proposed scheme does not support public veriﬁability.
f (cid:126)m(x) ≡(cid:80)s−1
j=0 mjxj; (2) our scheme described below ex-
ploits an algebraic property of polynomials: for any polyno-
mial f (x) and for any scalar input r, the polynomial x − r
divides the polynomial f (x) − f (r).
5.1 Construction
KeyGen(1λ) → (pk, sk)
p: τ, α $←− Z∗
Choose at random a (λ + 1) bits safe prime q such that
p = (q − 1)/2 is also prime. Let QR be the cyclic sub-
group of quadratic residue modulo q in Z∗
q. Choose at ran-
dom a generator g of group QR. Choose at random two
elements τ, α from Z∗
p. Choose at random a
PRF key, denoted as seed, from the key space of a pseu-
dorandom function family {PRFseed : {0, 1}2λ → Zp}.
The public key is pk := (p,{gαj
j=0) and the
private key is sk := (p, seed, α, τ ).
Note: (1) Both the size of the group QR and the multi-
plicative order of g modulo q are equal to p. (2) Zero is
not in Z∗
mod q}s−1
q or QR.
DEncode(sk, M) → (id, ˆM)
Let ρ ∈ (0, 1) be a system parameter. Apply a rate-ρ
error erasure code (e.g. Reed-Solomon code [25]) on data
ﬁle M to generate ﬁle blocks ( (cid:126)m0, . . . , (cid:126)mn−1), such that
each block (cid:126)mi = (mi,0, . . . , mi,s−1) ∈ Zs
p is a vector of
group elements mi,j ∈ Zp, and any ρn number of blocks
(cid:126)mi’s can recover the original ﬁle M using the error
erasure decoding algorithm. Choose a unique identiﬁer
id from domain {0, 1}λ. Parse the private key ssk as
(p, seed, α, τ ). For each (cid:126)mi, 0 ≤ i ≤ n − 1, compute
an authentication tag ti as below
s−1(cid:88)
ti := PRFseed(id(cid:107)i) + τ f (cid:126)mi(α)
= PRFseed(id(cid:107)i) + τ
mi,jαj mod p,
(3)
j=0
where id(cid:107)i denotes an unambiguous string combination
of the λ bits string id and the λ bits string representation
of index i ∈ [0, n − 1]. The ﬁnal encoded ﬁle ˆM is
{(i, (cid:126)mi, ti) : 0 ≤ i ≤ n − 1}.
Prove(pk, id, ˆM, Chall) → (y, ψ, σ)
Parse Chall as ({(i, νi) : i ∈ C}, r), where C ⊂
[0, n − 1], νi ∈ Z∗
p for each i ∈ C, and r ∈ Z∗
p.
Find the encoded ﬁle {(i, (cid:126)mi, ti) : i ∈ [0, n − 1]}
associated to the identiﬁer id and ﬁnd all data blocks
(cid:126)mi = (mi,0, . . . , mi,s−1) and tags ti with index i ∈ C.
Compute
µj :=
σ :=
νimi,j mod p,
for 0 ≤ j ≤ s − 1,
νiti mod p.
(4)
(5)
(cid:88)
(cid:88)
i∈C
i∈C
Let vector (cid:126)µ := (µ0, . . . , µs−1),i.e., (cid:126)µ =(cid:80)
i∈C νi (cid:126)mi.
Evaluate polynomial f(cid:126)µ(x) at point x = r to obtain y :=
f(cid:126)µ(r) mod p. Divide the polynomial f(cid:126)µ(x) − f(cid:126)µ(r)
with (x − r) using polynomial long division, and de-
note the coefﬁcients vector of the resulting quotient
polynomial as (cid:126)w = (w0, . . . , ws−2), that is, f (cid:126)w(x) ≡
f(cid:126)µ(x)−f(cid:126)µ(r)
. Compute ψ with the public key pk =
x−r
(p,{gαj
mod q}s−1
j=0) as below
= gf (cid:126)w(α) mod q ∈ QR.
(6)
s−2(cid:89)
(cid:16)
gαj(cid:17)wj
ψ :=
j=0
Output (y, ψ, σ).
Verify(sk, id, Chall, (y, ψ, σ)) → accept or reject
Parse Chall as ({(i, νi) : i ∈ C}, r), where C ⊂
[0, n − 1], νi ∈ Z∗
p for each i ∈ C, and r ∈ Z∗
p.
Verify the following equality Eq (7) with the private key
sk = (p, seed, α, τ ). If Eq (7) holds and ψ ∈ QR, then
output accept; otherwise, output reject.
?= gτ−1(σ−(cid:80)
ψα−r
i∈C νiPRFseed(id(cid:107)i)) − y mod q
(7)
Remark 1.
1. The challenge Chall consists of three parts: a subset
C ⊂ [0, n − 1] of size (cid:96), (cid:96) weights {νi ∈ Zp : i ∈ C},
and a group element r ∈ Zp. The challenge can be repre-
sented compactly by two short PRF seeds and r like Ate-
niese et al. [1], and consequently the resulting scheme
can only be proved secure in random oracle model [13,
26]. Alternatively, as mentioned in our overview in Sec-
tion 2.1.3, we will apply Dodis et al. [13]’s result to rep-
resent a challenge Chall compactly as below, so that the
proposed scheme can be proved without random oracle:
(a) Choose the subset C using Goldreich [19]’s (δ, γ)-
hitter4, where the subset C can be represented com-
pactly with only log n + 3 log(1/γ) bits. Assume n <
240 (i.e. ﬁle size less than 1024 Terabits) and let γ =
2−80. Then C can be represented with 280 bits.
(b) The sequence (. . . , νi, . . .) of (cid:96) weights νi, i ∈ C,
ordered by increasing i, forms a simple geometric
sequence (ν0, ν1, . . . , ν(cid:96)−1) for some ν ∈ Z∗
p.
2. Compared to Shacham and Waters [26]’ scheme, the al-
gorithm Prove in EPOR is able to aggregate the s number
(cid:80)s−1
of weighted sums µ0, µ1, . . . , µs−1 into two short num-
bers y and φ using the idea in [22], where y = f(cid:126)µ(r) =
j=0 µjrj ∈ Zp (r is a random nonce chosen by the data
q. In this way, EPOR
4 Goldreich [19]’s (δ, γ)-hitter guarantees that, for any subset W ⊂ [0, n−
1] with size |W| ≥ (1 − δ)n, Pr[C ∩ W (cid:54)= ∅] ≥ 1 − γ. Readers may
refer to [13] for more details.
owner) and ψ = g
f(cid:126)µ (α)−f(cid:126)µ(r)
∈ Z∗
α−r
requires only O(λ) communication bits per veriﬁcation.
In comparison, the Shacham and Waters [26] scheme re-
quires O(sλ) communication bits per veriﬁcation, since
(µ0, µ1, . . . , µs−1) are sent back directly as the response.
5.2 Security
THEOREM 1. The proposed scheme EPOR is a complete
and sound POR scheme as deﬁned in Section 3, if the SDH
Assumption in Deﬁnition 3 holds and PRF is cryptographic
secure pseudorandom function.
The proof is given in the Appendix.
6. Performance Analysis
In this section, we analyze the performance of our proposed
scheme EPOR in communication, storage, computation and
false acceptance rate. We also compare our scheme with
existing works by Shacham and Waters [26] and Ateniese et
al. [1], and measure the computation time of the proposed
scheme based on our prototype implementation. We remark
that, although our implementation adopts a modulo group of
size 21024, our scheme can alternatively use an elliptic curve
group of size 2160.
6.1 Communication
During a veriﬁcation, the communication cost is the size of
a challenge plus the size of its corresponding response (or
proof). As discussed in Remark 1 (in Section 5.1), in our
scheme EPOR, a challenge consists of a subset C, and two
group elements ν, r ∈ Zp. The subset C can be compactly
represented with 280 bits due to results of [19]. The group
element r is used to retrieve a polynomial function value
f (r) for some polynomial f (x) determined by a linear com-
bination of the data blocks speciﬁed in the set C. In the se-
curity analysis, the goal of r is to retrieve multiple function
values f (ri)’s for different inputs ri, and then recover the
polynomial f (x) by solving a linear equation system. For
this reason, we can simply choose r from a smaller range
[1, 280] without any sacriﬁcing in the security. Similarly, we
may choose ν ∈ [1, 280]. As a result, the challenge size is
280 + 80 × 2 = 440 bits.
In our scheme EPOR, a response, i.e. the proof, consists
of three group elements y, σ, ψ, which are derived from the
challenge, the data blocks and authentication tags. So the
size of a response is 3λ bits. Therefore, the communication
cost per veriﬁcation is 3λ + 440 bits.
6.2 Storage
During veriﬁcation, the data owner only keeps the private
key in her local storage. The size of private key is 3λ + 80
bits.
The storage overhead (due to authentication tags) on the
cloud storage server side is 1/s of the data ﬁle size, where
the system parameter s is the block size and equals to the ra-
tio of the size of a data block to the size of an authentication
tag. The public key is also kept in the cloud storage and its
size is (s + 1)λ bits. Note that in our scheme, there is only
one public key per user, without regarding to the number of
ﬁles the user stores in the cloud storage server.
6.3 Computation
The proposed scheme EPOR is very efﬁcient in setup. Key
generation requires s number of group exponentiations. Sup-
pose an nsλ bits encoded data ﬁle consists of n data blocks,
each block has s group elements and each group element
has λ bits. The data preprocess (i.e. the DEncode algorithm)
requires only ns number of group multiplications and addi-
tions, together with n PRF evaluations. Note that the PRF is
simulated with an AES [11] stream cipher, which runs in the
counter model [31].
During a veriﬁcation, the computation complexity on the
cloud storage server side is dominated by the computation
of ψ in Equation (6) in the algorithm Prove on page 6. This
dominant step takes (s − 1) number of group exponentia-
tions, and is the bottleneck of efﬁciency of our scheme when
the block size s becomes large.
6.4 False Positive Rate
Recall that, error erasure code is applied at the beginning
of the algorithm DEncode. Suppose a rate-ρ Reed-Solomon
code is adopted, that is, any ρ fraction of data blocks in the
encoded ﬁle can recover the original ﬁle, and the ratio of the
size of encoded ﬁle to the original is 1/ρ. If an encoded ﬁle is
corrupted such that it is unable to recover the original using
the erasure decoding, then more than 1 − ρ fraction of data
blocks are corrupted. In this case, a randomly chosen data
block is not corrupted with probability smaller than ρ, and
the probability5 that (cid:96) independently randomly chosen data
blocks will not hit any corrupted data block is smaller than
ρ(cid:96), independent on the ﬁle size. Our scheme guarantees that
if a corrupted data block is hit in a veriﬁcation, then the data
owner will accept with only negligible probability. So the
false acceptance rate is smaller than ρ(cid:96), if (cid:96) independently
random blocks are accessed in a veriﬁcation.
We list out the false acceptance rate w.r.t. various chal-
lenge size and various erasure code rate in Table 2. The
choices of value of challenge size (cid:96) is 100, 300, 500, or
700; the choices of erasure encode rate ρ is 0.99 or 0.98.
Note that the the storage overhead due to erasure encoding
is 1/0.99 − 1 ≈ 0.0101 of original ﬁle size, if ρ = 0.99;
1/0.98 − 1 ≈ 0.0204, if ρ = 0.98.
6.5 Recommended System Parameters
We recommend the following system parameter for our pro-
posed scheme EPOR: The error erasure rate is 0.98, block
size s is around 160, the challenge size is around 500. In
this setting, the false acceptance rate is 4.1024 × 10−5, the
5 Note that this argument is based on the case of choosing indices of data
blocks at random with replacement. The other case where choosing indices
at random without replacement will have a larger error detection rate.
Challenge
Size
False Accept Rate ρ(cid:96)
False Accept Rate ρ(cid:96)
with ρ = 0.99
0.366032341
0.049040894
0.006570483
0.000880311
(cid:96) = 100
(cid:96) = 300
(cid:96) = 500
(cid:96) = 700
Table 2. The False Accept Rate Versus Challenge Size and