# Title: Ad Injection at Scale: Assessing Deceptive Advertisement Modifications

## Authors:
- Kurt Thomas
- Elie Bursztein
- Chris Grier
- Grant Ho
- Nav Jagpal
- Alexandros Kapravelos
- Damon McCoy
- Antonio Nappa
- Vern Paxson
- Paul Pearce
- Niels Provos
- Moheeb Abu Rajab

### 2015 IEEE Symposium on Security and Privacy

**Abstract:**
Web injection, particularly ad injection, is a prevalent form of browser session tampering aimed at generating profit. In this work, we investigate the scope and negative impact of ad injection, where users are exposed to ads that differ from or are in addition to those originally sent by websites. We develop a multi-staged pipeline to identify and analyze ad injection, capturing its distribution and revenue chains. Our findings reveal that ad injection has become a cross-browser monetization platform affecting over 5% of unique daily IP addresses accessing Google, impacting tens of millions of users globally. Injected ads are delivered through various vectors, including Chrome extensions and Windows binaries, many of which are explicitly malicious. We have alerted the Chrome Web Store and targeted advertisers about these deceptive practices.

## I. Introduction
With the rise of cloud computing, web browsers now act as gateways to a vast array of information, social interactions, and sensitive personal data. This evolution has introduced new security threats, with malicious actors directly tampering with browser sessions for profit. Common tactics include redirecting search traffic, inserting rogue tracking pixels, hijacking session cookies, and stealing personal and banking data. We refer to this broad category of threats as web injection.

Ad injection is one of the most lucrative strategies within this ecosystem. Notable examples include public WiFi portals that inject ads into in-transit HTTP content and the Yontoo browser plugin, which modified 4.5 million Facebook sessions to include ads, earning $8 million. These scenarios highlight the distinction between legitimate and synthetic traffic, with most ad injectors being potentially unwanted programs rather than malware.

In this study, we examine the negative impact of ad injection on users and expose the structure of the ad injection ecosystem. From over 100,000 triaged Chrome user complaints in July 2014, nearly 20% were related to ad injection, making it the single largest source of frustration. Our contributions include measuring the volume of impacted browser clients, evaluating the relationship between ad injection and malicious or unwanted software, and identifying the intermediaries and advertisers supporting ad injection.

To conduct our study, we developed a multi-staged pipeline to capture the distribution and revenue chain of ad injection. The pipeline starts with a client-side DOM scanner that identifies and reports rogue ad elements. Deployed on a subset of Google websites, this scanner collected over 100 million client-side reports from June 1 to September 30, 2014. We then dynamically executed 25 million binaries and 1 million extensions to find the same ad injectors observed in the field. We analyzed the techniques used by each ad injector to manipulate DOM content and identified the affected properties. Finally, we executed a sample of injectors to discover the intermediaries involved.

Our results show that ad injection has established itself as a cross-browser monetization platform, impacting tens of millions of users globally. Our telemetry found that 5.5% of unique daily IP addresses visiting Google properties had at least one ad injector installed. The most popular, superfish.com, injected ads into more than 16,000 websites and grossed over $35 million in 2013. We found that all top ad injectors are organized as affiliate programs, decoupling advertisement selection from third parties responsible for browser control. We enumerated the top affiliates for each program, finding that they are often popular browser plugins like ShopperPro, Yontoo, and PlusHD. Ad injection affects all prominent operating systems, with injections observed in 3.4% and 5.1% of pages served to Mac and Windows users, respectively.

Injected ads reach clients through multiple vectors, including 50,870 Chrome extensions and 34,407 Windows binaries, 38% and 17% of which are explicitly malicious. Many of these extensions aggressively pursue profit, with 24% also spamming Facebook and 11% hijacking search queries. While Google previously disabled most of these deceptive extensions, we identified 192 with over 14 million users still active. We reported these to the Chrome Web Store, who confirmed they violated policies and subsequently disabled them. A similar situation exists for Windows binaries, 17% of which are malware. Many act as staged installers that "side-load" extensions, while others install proxies that tamper with in-transit requests.

The ad injection ecosystem profits from over 3,000 advertisers, including Sears, Walmart, eBay, and Target, who unwittingly pay for traffic from injectors. These advertisers rarely have insights into the provenance of traffic due to the complex web of intermediaries. We found that traffic enters the ad ecosystem through a small bottleneck of intermediaries run by ShopZilla, DealTime, and PriceGrabber. We are currently reaching out to and alerting the affected advertisers and intermediaries.

In summary, our key contributions are:
- Developing a client-side technique to detect tens of millions of instances of ad injection impacting Google’s users, which can be reused by any website.
- Conducting a detailed investigation of ad injection binary and extension delivery mechanisms.
- Detecting and reporting 192 deceptive Chrome extensions impacting 14 million users, all of which have since been disabled. Our techniques are now used by Google to scan new and updated extensions.
- Identifying bottlenecks in ad injector revenue chains and reaching out to the affected advertisers and intermediaries.

## II. Background
We define ad injectors as any binary, extension, or network ISP that modifies a page's content to insert or replace advertisements without user consent. This definition excludes programs that remove advertisements, such as ad-block software. Ad injectors can negatively impact a user's browsing experience, security, and privacy. They frequently monitor all browser activities, report behaviors to third parties, increase page load latency, degrade page quality, and expose users to irreputable intermediaries serving spam and malware. This tampering is invisible to the user, potentially degrading brand reputation.

### A. Characterizing Ad Injectors
Ad injectors modify page content to insert or replace advertisements, often without user consent. They can negatively impact a user's browsing experience, security, and privacy. Ad injectors frequently monitor all browser activities, report behaviors to third parties, increase page load latency, degrade page quality, and expose users to irreputable intermediaries serving spam and malware. This tampering is invisible to the user, potentially degrading brand reputation.

### B. Examples of Ad Injection User Experience
Once an ad injector takes hold of a client’s browser session, the web experience changes significantly. Figure 1 shows examples of ad injection on different search and shopping properties. None of the displayed ads, even those mimicking the page style, are organic; all originate from a single extension. The examples shown are particularly egregious, with banner ads and fake search results relegating original content beyond the browser's screen size. The same extension also hijacks user clicks and redirects the browser to product survey pages. "Uninstall" options sometimes redirect the user to install bundled software packages, highlighting the deceptive nature of ad injectors.

### C. Revenue Model
Ad injectors operate like publishers in the traditional advertising ecosystem, pulling ads directly from advertising exchanges or affiliate programs (intermediaries). Relevant revenue models include cost-per-click, cost-per-mille (impression), and cost-per-acquisition. Unlike traditional publishers, ad injectors have complete control over the content rendered by a client's browser, exposing users to rogue advertisements. Ad networks receive legitimate traffic, and the ad injectors, advertisers, and ad networks profit. However, intermediaries are often unaware of the negative impact on user experience and the diversion of funds from webpage owners.

## III. Methodology
Our system and data sources for studying the end-to-end ad injection ecosystem are outlined in Figure 2. We begin by scanning the client-side DOM of visitors to Google websites to identify the side-effects of ad injection, dynamically executing binaries and extensions to find the same side-effects, and executing ad injectors in a contained environment to harvest advertisement clickchains and analyze the entities involved.

### A. Detecting Client-side DOM Injection
Ad injectors rely on inserting rogue elements or modifying existing elements in a client’s local rendering of HTML. We detect these artifacts by embedding a script in each served page that reports on the integrity of the client’s DOM. The script contains a whitelist of domains and JavaScript handlers known to appear in an untampered copy of the page. After a predefined wait period or when the browser signals a JavaScript page unload event, the script scans the local DOM and identifies all , , and  elements. If any elements violate the whitelist or have modified JavaScript events, they are added to a report returned to the web server. If no alterations are detected, an empty report is returned. The report includes the URL of the page visited, the browser's user agent, and the client's IP address (used only for geolocation and population estimates).

We deployed our system on select Google websites from June 1 to September 30, 2014, targeting a random sample of Chrome, Firefox, and Internet Explorer desktop users across all operating systems and geographic regions. We collected telemetry data on 102,562,842 page views.

This technique detects all DOM alterations, not just those caused by ad injectors. We use a post-report filtering phase to exclude browser toolbars, antivirus engines, or other programs that extend page behavior. This filter leverages the fact that 89% of tampered views contain a rogue (non-whitelisted) script. We focus on scripts that inject ads, referred to as injection libraries, and contextualize other rogue URL and iframe elements in our reports.

To simplify the process, we narrow our analysis to the most popular scripts. We normalize scripts to strip out URL parameters and rank them based on the number of client DOMs they appear in. This ranking follows a Zipf-like distribution, with the most popular script appearing in 39% of reports and the top 100 in 74% of all tampered clients. The tail consists of over 19,315 scripts from 8,527 domains. Some of these top scripts are benign support libraries, while others belong to ad injectors.

We manually reviewed the top 100 scripts and flagged 65 as injection libraries. Of these, 31 actively cloaked against Google, returning 404 errors or empty DNS records to Google IP addresses but not to independent vantage points. We provide a detailed treatment of each script's behavior and the coverage this step provides in Section IV.

**Figure 3: Distribution of Script Popularity**

---

This optimized version aims to make the text more coherent, clear, and professional, ensuring that the key points and findings are effectively communicated.