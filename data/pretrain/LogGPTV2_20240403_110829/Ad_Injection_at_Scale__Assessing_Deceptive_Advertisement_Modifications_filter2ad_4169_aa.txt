title:Ad Injection at Scale: Assessing Deceptive Advertisement Modifications
author:Kurt Thomas and
Elie Bursztein and
Chris Grier and
Grant Ho and
Nav Jagpal and
Alexandros Kapravelos and
Damon McCoy and
Antonio Nappa and
Vern Paxson and
Paul Pearce and
Niels Provos and
Moheeb Abu Rajab
2015 IEEE Symposium on Security and Privacy
2015 IEEE Symposium on Security and Privacy
Ad Injection at Scale: Assessing Deceptive Advertisement Modiﬁcations
Kurt Thomas
Damon McCoy
(cid:2)
‡†∗
(cid:2)
, Elie Bursztein
, Antonio Nappa
†
, Chris Grier(cid:2), Grant Ho
§◦
†∗
, Vern Paxson
(cid:2)
, Nav Jagpal
†
, Paul Pearce
(cid:2)
, Niels Provos
, Alexandros Kapravelos(cid:2),
(cid:2)
, Moheeb Abu Rajab
{kurtthomas, elieb, nav, niels, moheeb}@google.com {grantho, vern, pearce}@cs.berkeley.edu
PI:EMAIL PI:EMAIL PI:EMAIL PI:EMAIL
(cid:2)
†
Google
§
University of California, Berkeley
‡
Universidad Polit´ecnica de Madrid (cid:2) University of California, Santa Barbara
IMDEA Software Institute
George Mason University
International Computer Science Institute
◦
∗
(cid:2) Databricks
Abstract—Today, web injection manifests in many forms, but
fundamentally occurs when malicious and unwanted actors
tamper directly with browser sessions for their own proﬁt. In
this work we illuminate the scope and negative impact of one
of these forms, ad injection, in which users have ads imposed
on them in addition to, or different from, those that websites
originally sent them. We develop a multi-staged pipeline that
identiﬁes ad injection in the wild and captures its distribution
and revenue chains. We ﬁnd that ad injection has entrenched
itself as a cross-browser monetization platform impacting more
than 5% of unique daily IP addresses accessing Google—tens
of millions of users around the globe. Injected ads arrive on
a client’s machine through multiple vectors: our measurements
identify 50,870 Chrome extensions and 34,407 Windows binaries,
38% and 17% of which are explicitly malicious. A small number
of software developers support the vast majority of these injectors
who in turn syndicate from the larger ad ecosystem. We have
contacted the Chrome Web Store and the advertisers targeted
by ad injectors to alert each of the deceptive practices involved.
I. INTRODUCTION
With the advent of the cloud, web browsers now arbitrate
access to a vast breadth of information, social interactions, and
sensitive personal data stored remotely on the Internet. This
evolution—where browsers are now analogous in function to
operating systems—has lead to an entire new class of security
threats facing users. Malicious and unwanted actors tamper
directly with browser sessions to proﬁt from: redirecting
search trafﬁc; inserting rogue tracking pixels; hijacking session
cookies to spam email contacts and online social networks;
and stealing personal and banking data. We refer to this broad
category of threats as web injection.
Within this ecosystem, ad injection reigns as one of the most
lucrative strategies for monetizing browser trafﬁc. Popular ex-
amples include public WiFi portals that tamper with in-transit
HTTP content to inject ads [7], [22]; and the Yontoo browser
plugin which modiﬁed 4.5 million users’ private Facebook
sessions to include ads that earned Yontoo $8 million [21],
[30]. These scenarios highlight
the
line demarcating legitimately acquired trafﬁc versus synthetic
trafﬁc generated via automated click fraud [8], click hijack-
ing [1], [26], and impression fraud [32]. This distinction is
critical—most ad injectors are potentially unwanted programs,
not malware.
that ad injectors skirt
In this work we illuminate the negative impact of ad
injection on users and expose the structure of the ad injection
ecosystem. Of over 100,000 triaged Chrome user complaints
in July, 2014, nearly 20% were related to ad injection—the
single largest source of frustration. Our contributions consist
of (1) measuring the volume of browser clients impacted by ad
injection; (2) evaluating the relationship between ad injection
and malicious or unwanted software; and (3) identifying the
intermediaries and advertisers that support ad injection.
To conduct our study, we develop a multi-staged pipeline
that captures ad injection’s distribution and revenue chain. The
pipeline starts with a client-side DOM scanner that identiﬁes
and reports the presence of rogue ad elements. We deploy
this scanner on a subset of Google websites, collecting over
100 million client-side reports from a period spanning June 1–
September 30, 2014. Next, we dynamically execute 25 million
binaries and 1 million extensions in search of the same ad
injectors we observe impacting clients. In the process, we
analyze the techniques each ad injector uses to manipulate
DOM content and identify the scope of properties that injectors
affect. Finally, we dynamically execute a sample of injectors,
automatically triggering the injector’s logic to fetch ads and
discover the intermediaries involved.
Our results reveal that ad injection has entrenched itself as
a cross-browser monetization platform that impacts tens of
millions of users around the globe. Our client-side telemetry
ﬁnds that 5.5% of unique daily IP addresses visiting Google
properties have at least one ad injector installed. The most
popular, superﬁsh.com,
injects ads into more than 16,000
websites and grossed over $35 million in 2013 according to
ﬁnancial reports [16]. We ﬁnd that all of the top ad injectors
are organized as afﬁliate programs that decouple advertisement
selection from third parties responsible for taking hold of
a client’s browser. We enumerate the top afﬁliates for each
program and determine most are popular browser plugins such
as ShopperPro, Yontoo, and PlusHD. Consequently, we ﬁnd ad
injection affects all prominent operating systems; we observe
injections in 3.4% and 5.1% of pages served to Mac and
Windows users, respectively.
Injected ads arrive on a client’s machine through multiple
unwanted and potentially malicious vectors. Our analysis
pipeline ﬂagged 50,870 Chrome extensions as unwanted ad
© 2015, Kurt Thomas. Under license to IEEE.
© 2015, Kurt Thomas. Under license to IEEE.
DOI 10.1109/SP.2015.17
DOI 10.1109/SP.2015.17
151
151
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
(a) Google
(b) Amazon
(c) Walmart
Figure 1: Sample of ad injection on different search and shopping properties. None of the ads displayed are organic to the page.
injectors, 38% of which were outright malware. Extensions
aggressively pursue injection proﬁt vectors: 24% also spam
Facebook and 11% hijack search queries. While Google
previously disabled most of these deceptive extensions, we
identiﬁed 192 with over 14 million users that were still active.
We reported these to the Chrome Web Store, who conﬁrmed
they violated the Web Store’s policies around deceptive ad
injection1 and subsequently disabled the extensions. A similar
picture emerges for 34,407 Windows binaries we ﬂagged for
ad injection, 17% of which are malware. Many of these act
as staged installers that in turn “side-load” extensions, while
others install proxies that tamper with in-transit requests.
The ad injection ecosystem proﬁts from over 3,000 ad-
vertisers including Sears, Walmart, Ebay, and Target, who
unwittingly pay for trafﬁc from injectors. These advertisers
rarely have insights into the provenance of trafﬁc because their
perspective is limited to only the last hop in a convoluted
web of intermediaries, which makes it difﬁcult for brands
to protect themselves from trafﬁc sourced from ad injectors.
Alternatively, we ﬁnd that
trafﬁc enters the ad ecosystem
through a small bottleneck of intermediaries run by ShopZilla,
DealTime, and PriceGrabber. We are currently reaching out
and alerting the advertisers and intermediaries impacted by
trafﬁc from ad injectors.
In summary, we frame our key contributions as follows:
• We develop a client-side technique that detects tens of
millions of instances of ad injection impacting Google’s
users. Any website can re-use this technique.
• We conduct a detailed investigation of ad injection binary
and extension delivery mechanisms.
• We detect and report 192 deceptive Chrome extensions
impacting 14 million users; all have since been disabled.
Our techniques for catching these extensions are now
used by Google to scan new and updated extensions.
• We identify the bottlenecks in ad injector revenue chains
and are reaching out to the advertisers and intermediaries
impacted by the deceptive practices involved.
1We note that ad injection, when properly disclosed to users, is not explicitly
prohibited by the Chrome Web Store.
152152
II. BACKGROUND
We begin by deﬁning ad injection as used throughout this
paper. We provide a number of real examples that capture the
browsing experience of users impacted by ad injection before
discussing the revenue model involved.
A. Characterizing Ad Injectors
We broadly refer to ad injectors as any binary, extension, or
network ISP that modiﬁes a page’s content to insert or replace
advertisements, irrespective of user consent. This deﬁnition
notably excludes programs that remove advertisements (e.g.,
ad block software). Ad injectors can negatively impact a
user’s browsing experience, security, and privacy. We show
that ad injectors frequently monitor all of a user’s browser
activities—including page interactions and search queries—
and report these behaviors to third parties for tracking and
advertisement selection. This process increases page load
latency while injectors fetch numerous third-party scripts and
generate XHR requests for ad content. Similarly, injectors
degrade page quality by including spurious “search results,”
keyword highlights, or ﬂy-in banners, many of which are
irrelevant to the page and overwhelm the original content.
Finally, as the provenance of ads is no longer controlled
by a page’s owner, injectors can expose users to irreputable
intermediaries serving spam and malware. This tampering is
invisible to the user making it appear as though the webpage
was culpable rather than the ad injector, potentially degrading
brand reputation.
B. Examples of Ad Injection User Experience
Once an ad injector takes hold of a client’s browser session,
a vastly different web experience emerges, a sample of which
we show in Figure 1. None of the ads displayed in the
ﬁgures—even those mimicking the page style—are organic;
all originate from a single extension installed on the client’s
browser. The examples shown are particularly egregious: the
injector includes banner ads and fake search results that
relegate all original page content beyond the browser’s screen
size. The same extension also hijacks a user’s clicks and
redirects the browser to product survey pages. “Uninstall”
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
Figure 2: Workﬂow of our ad injection detection and analysis pipeline. We scan the client-side DOM of visitors to Google websites and
report all injected elements (). We identify binaries and extensions that exhibit these behaviors () and execute them in isolation to click
on the resulting injected ads to enumerate advertisers and afﬁliates ().
options that sometimes accompany ads on the page instead
redirect the user to install a multitude of bundled software
packages. These practices highlight the often deceptive nature
in which ad injectors operate.
C. Revenue Model
Ad injectors act like publishers in the traditional advertising
ecosystem, pulling ads directly from advertising exchanges
or afﬁliate programs (which we refer to as “intermediaries”).
Relevant revenue models include cost-per-click, cost-per-mille
(impression), and cost-per-acquisition (sharing proﬁt from
product sales). However, where traditional publishers have to
generate popular content to attract users, ad injectors have
complete control over all content
that a client’s browser
renders. Consequently, injectors expose users to rogue ad-
vertisements as they browse; ad networks receive legitimate
trafﬁc; and the ad injectors, advertisers, and ad networks proﬁt.
However, what is unapparent to intermediaries throughout this
process is the negative impact of ad injection on a user’s
browsing experience and the diversion of funds from webpage
owners who have little recourse in the matter.
III. METHODOLOGY
We next turn to our system and data sources for studying
the end-to-end ad injection ecosystem, outlined in Figure 2.
We begin by  scanning the client-side DOM of visitors to
Google websites to identify the side-effects of ad injection;
 dynamically executing binaries and extensions in search
of the same side-effects; and  executing ad injectors in
a contained environment while visiting numerous webpages
to harvest advertisement clickchains and analyze the entities
involved. For each of these components, we detail our design
decisions, implementation, and any limitations or biases of our
approach.
A. Detecting Client-side DOM Injection
Ad injectors rely on inserting rogue elements or modifying
existing elements in a client’s local rendering of HTML. We
detect these artifacts by embedding a script in each served
page that reports on the integrity of the client’s DOM. Our
script’s payload contains a whitelist of domains and JavaScript
handlers that we know a priori to appear in an untampered
copy of the page. Once a pre-deﬁned wait period elapses or
when the browser signals a JavaScript page unload event,
the payload scans the local DOM and identiﬁes all ,
, and  elements on the page. If any of
the elements identiﬁed violate the whitelist or have modiﬁed
JavaScript events, we add them to a report returned to the
web server. In the event we detect no DOM alterations, we
return an empty report. This report also includes the URL of
the page visited, the browser’s user agent, and the IP address
of the client (used only for geolocation purposes and client
population estimates). We deployed our system on a select
number of Google websites from June 1–September 30, 2014.
The experiment targeted a random sample of Chrome, Firefox,
and Internet Explorer desktop users for all operating systems
and geographic regions. In total, we collected telemetry data
on 102,562,842 page views.
We note that this technique detects all such DOM alter-
ations, not just those caused by ad injectors. We rely on a
post-report ﬁltering phase to exclude browser toolbars, anti-
virus engines, or other programs that extend the behavior of
pages. This ﬁlter leverages the fact that 89% of tampered views
contain a rogue (non-whitelisted) script. We key in on which
scripts inject ads—which we refer to as injection libraries—
and in the process contextualize the other rogue URL and
iframe elements that appear in our reports.
To simplify this process, we narrow our analysis to only the
most popular scripts. Accordingly, we ﬁrst normalize scripts
to strip out any URL parameters. We then rank the scripts
in order of the number of client DOMs they appear in. This
ranking adheres to a Zipf-like distribution, shown in Figure 3.
The single most popular script appears in 39% of reports and
the top 100 in 74% of all tampered clients. The tail consist
of over 19,315 scripts from 8,527 domains. Some of these
top scripts are popular support libraries like jQuery used by
benign extensions whereas others belong to ad injectors.
To ﬁlter out extraneous scripts, we manually reviewed the
top 100 scripts and ﬂagged them as injection libraries based
on the script’s content. In total we ﬂagged 65 of the top 100
scripts as injection libraries. Of these, 31 actively cloaked
against Google (e.g., network requests for the scripts returned
a 404 error or empty DNS record to Google IP addresses
or resolvers, but not to requests from independent vantage
points). We offer a more detailed treatment of each script’s
behavior and the coverage this step provides in Section IV.
153153
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:02:21 UTC from IEEE Xplore.  Restrictions apply. 
107
105
103
101
s
t
p
i
r
c
s
f
o
r
e
b
m
u
N
●
●
●
●
●
●●
●●
●●
●●
●●
●●
●
●●●●
●●
●●
●●●●●●
●●
●
●
●
●●●●
●●
●
●
●●●●●●
●
●●
●
●
●
●●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●
●●
●
●
●
●
●
●
●
●●
●
●
●●
●
●
●●
●
●
●●
●
●
●●
●●
●