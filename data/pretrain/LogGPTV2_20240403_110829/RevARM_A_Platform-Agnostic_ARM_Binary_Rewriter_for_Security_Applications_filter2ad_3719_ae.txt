### Non-Support for Certain Techniques

#### LLVM IR Instrumentation
SecondWrite [34, 52] utilizes the Low-Level Virtual Machine (LLVM) to lift a binary into LLVM Intermediate Representation (IR) for instrumentation. However, this feature was officially removed from LLVM 3.1 onwards due to its inability to lift non-trivial program binaries into LLVM IR [2]. As a result, SecondWrite is not sufficiently mature to rewrite full-scale stripped applications [61, 65]. Additionally, SecondWrite relies on patch-based instrumentation, which leads to higher space overhead compared to RevARM. Furthermore, there is no experimental evidence to support the claim that SecondWrite can rewrite ARM-based binaries. In contrast, the experimental results in ยง4 demonstrate that RevARM can instrument large-scale ARM binaries and, by applying our technique, enhance the security of real-world mobile and embedded systems.

#### Dynamic Binary Instrumentation
Dynamic binary instrumentation techniques, such as PIN [50], DynamoRIO [37], Valgrind [51], Detours [45], and QEMU [36], instrument binaries loaded into memory at runtime. Despite their utility, we chose static instrumentation for RevARM for two primary reasons:
1. **Performance Overhead**: Dynamic instrumentation techniques introduce significant runtime and space overhead, which is particularly problematic for embedded and mobile systems with limited processing power and memory.
2. **Platform Dependency**: These tools are often OS-dependent and support only a limited number of commodity operating systems. In contrast, RevARM is designed to provide platform-agnostic binary rewriting capabilities.

### Limitations

Despite its new capabilities, RevARM has several limitations, some of which are inherent to current-generation binary rewriting methodologies and call for further research.

#### Dynamically Generated or Obfuscated Code
Like other static binary instrumentation techniques [43, 62, 64, 68, 69], RevARM cannot target dynamically generated code (e.g., self-modifying code) because it can only be observed during program execution. Additionally, the correct disassembly of obfuscated binaries is a separate challenge for all binary rewriting techniques, including RevARM. Existing obfuscation-resilient disassembly techniques [47, 57] can complement RevARM's rewriting capabilities. We have observed that obfuscation is not common in our target binaries, as obfuscated iOS apps may be rejected by App Review, and the computing power of embedded systems is limited [57].

#### Limitations Inherited from Disassembly
RevARM relies on IDA Pro for the disassembly of ARM binaries, inheriting its current limitations. It is well-known that disassemblers are imperfect [35, 60, 61], which remains a restrictive problem for binary rewriting. The main reason for this is that compilation removes semantic information (e.g., pointer types) from the resulting binary [65]. This lack of information can lead RevARM to produce incorrect instrumentation for target binaries. Potential issues include:
1. **Misidentification of Pointers and Virtual Tables**: In C++ programs, misidentifying pointers and virtual tables can cause the instrumented program to take ill-formed execution paths or access data at incorrect locations.
2. **Incorrect Disassembly**: Erroneously disassembling data as code or vice versa can lead to incorrect control or data flow during the execution of the instrumented program.

While this remains an open research challenge, there have been advancements in improving disassembler accuracy. For example, BinCFI [69] enhances disassembler accuracy by combining two existing disassembly algorithms, and Marx [53] restores C++ class hierarchy information with high accuracy from stripped binaries, enhancing the detection of virtual tables and pointers.

#### Pointer Arithmetic
Although it is theoretically possible for a binary program to perform pointer arithmetic on indirect branch and data reference targets, RevARM does not handle complex arithmetic operations. This is based on the observation that most modern binaries do not include such pointer arithmetic in practice [69]. In our experiments, we found only one simple bitwise arithmetic operation that flips a bit to switch the instruction mode between ARM and Thumb modes. We handle this case by setting the mode bit based on the current instruction mode.

### Conclusion

Despite the popularity of ARM-based systems, ARM binary instrumentation techniques remain immature due to the challenges associated with accurately rewriting ARM binaries without source code across various platforms. To address these challenges, we proposed RevARM, a platform-agnostic ARM binary rewriting technique capable of instrumenting binaries without symbolic/semantic information. Due to its insertion-based instrumentation technique, RevARM supports powerful security applications with fine-grained ARM binary rewriting while introducing very low runtime and space overhead. Our experimental results demonstrated the practicality and effectiveness of RevARM in various security applications on real-world ARM-based devices.

### Acknowledgment

We thank our shepherd, Maverick Woo, and the anonymous reviewers for their valuable comments and suggestions. This work was supported, in part, by ONR grants N00014-17-1-2045, N00014-17-1-2513, and N00014-17-1-2947. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of the ONR.

### References

[References listed as provided in the original text]

This revised version aims to improve clarity, coherence, and professionalism, making the text more accessible and easier to understand.