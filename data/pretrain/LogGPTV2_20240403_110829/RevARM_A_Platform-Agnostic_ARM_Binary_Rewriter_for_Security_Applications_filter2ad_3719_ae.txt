do not support these.
LLVM IR Instrumentation: SecondWrite [34, 52] leverages Low
Level Virtual Machine (LLVM) lifting to convert a binary into LLVM
IR for instrumentation. Yet, this LLVM lifting feature was officially
removed since LLVM 3.1 because it is unable to lift any non-trivial
program binaries into LLVM IR [2]. Consequently, SecondWrite is
not mature enough to rewrite full-scale stripped applications [61,
65]. Moreover, SecondWrite relies on patch-based instrumentation
which leads to larger space overhead than RevARM. Finally, there
exists no experimental result to show that this approach can rewrite
ARM-based binaries. On the contrary, the experimental results in §4
show that RevARM can instrument large-scale ARM binaries and,
by applying our technique, can improve the security of real-world
mobile and embedded systems.
Dynamic Binary Instrumentation: Dynamic binary instrumen-
tation techniques, such as PIN [50], DynamicRio [37], Valgrind
[51], Detours [45] and QEMU [36], instrument binaries loaded in
the memory at run-time. However, there are two reasons why we
chose static instrumentation when designing RevARM. First, dy-
namic instrumentation techniques incur large run-time and space
overhead which is a critical problem on embedded and mobile sys-
tems which not have high processing power and large memory.
In addition, these tools only support a small number of commod-
ity operating systems since their techniques are OS-dependent. In
contrast, RevARM is designed to provide platform-agnostic binary
rewriting capabilities.
6 LIMITATIONS
We point out that, despite its new capability, RevARM has a num-
ber of limitations — some of which are intrinsic to the current-
generation binary rewriting methodology and call for innovative
advances through future research.
Dynamically Generated or Obfuscated Code: Like all other
static binary instrumentation techniques [43, 62, 64, 68, 69], dynam-
ically generated code (e.g., self-modifying code) cannot be targeted
by RevARM since the code can only be seen while the program is
running. In addition, the correct disassembly of obfuscated bina-
ries is an orthogonal problem to all binary rewriting techniques,
including RevARM. Existing obfuscation-resilient disassembly tech-
niques [47, 57] can be used to complement RevARM’s rewriting
capabilities. Further, we observed that such obfuscation is not com-
mon in our target binaries because obfuscated iOS apps may be
rejected by App Review and the computing power of embedded
systems is limited [57].
Limitations Inherited from Disassembly: Since RevARM is built
upon IDA Pro for the disassembly of ARM binaries, it inherits the
current limitations of the disassembler. It is well-known that disas-
semblers are imperfect [35, 60, 61], and this has remained a restric-
tive problem for binary rewriting. The main reason for this is that
compilation removes semantic information (e.g., pointer types) [65]
from the resulting binary program. Inheriting this absence of infor-
mation can lead RevARM to produce incorrect instrumentation for
target binaries. Possible effects of this problem include: (1) misiden-
tification of pointers and virtual tables in C++ programs, and (2)
incorrect disassembly of data as code and code as data. If the disas-
sembler fails to identify pointers and virtual tables correctly, the
program instrumented by RevARM may take ill-formed execution
paths or access data at incorrect locations. In addition, erroneously
disassembling data as code or vice versa may also lead to incorrect
control or data flow during the execution of the instrumented pro-
gram. While this remains an open research challenge, there have
been some advances in improving the accuracy of disassemblers,
which may be leveraged to mitigate these negative effects in the
future. BinCFI [69] improves disassembler accuracy by combining
two existing disassembly algorithms. Marx [53] restores C++ class
hierarchy information with high accuracy from stripped binaries,
which enhance the detection of virtual tables and pointers.
Pointer Arithmetic: While it is theoretically possible for a binary
program to have pointer arithmetics on indirect branch and data
reference targets, RevARM does not handle complex arithmetic
operations, based on the observation that a vast majority of modern
binaries do not include such pointer arithmetics in practice [69]. In
our experiments, we did not find any pointer arithmetic operation
except one simple bitwise arithmetic that flips a bit to switch the
instruction mode between the ARM and Thumb modes. We handle
this case by setting the mode bit based on the current instruction
mode.
7 CONCLUSION
Despite the popularity of ARM-based systems, ARM binary in-
strumentation techniques are still immature due to the challenges
associated with accurately rewriting ARM binaries without source
code across a variety of platforms. To the address the challenges, we
proposed RevARM, a platform-agnostic ARM binary rewriting tech-
nique capable of instrumenting binaries without symbolic/semantic
information. Due to its insertion-based instrumentation technique,
RevARM is able to support powerful security applications with
a fine-grained ARM binary rewriting capability while introduc-
ing very low run-time and space overhead. Furthermore, RevARM
addresses a number of unique challenges in ARM binary rewrit-
ing, which previous work did not solve. Our experimental results
demonstrated the usefulness and practicality of RevARM in various
security applications on real-world ARM-based devices.
8 ACKNOWLEDGMENT
We thank our shepherd, Maverick Woo and the anonymous review-
ers for their valuable comments and suggestions. This work was
supported, in part, by ONR grants N00014-17-1-2045, N00014-17-1-
2513, and N00014-17-1-2947. Any opinions, findings, and conclu-
sions in this paper are those of the authors and do not necessarily
reflect the views of the ONR.
REFERENCES
[1] 1995. Tool Interface Standard (TIS) Executable and Linking Format (ELF) Specifica-
tion Version 1.2. http://refspecs.linuxbase.org/elf/elf.pdf.
[2] 2012. LLVM 3.1 release note. http://releases.llvm.org/3.1/docs/ReleaseNotes.html.
[3] 2013. Ardupilot File System Corruption Bug - DataFlash: don’t try to cre-
https://github.com/ArduPilot/ardupilot/commit/
ate a directory that exists.
4ce2555a6563939f95991621facc7ff4b9f27d1d.
[4] 2013. Hacking Drones - Overview of the Main Threats.
http://resources.
infosecinstitute.com/hacking-drones-overview-of-the-main-threats.
[5] 2014.
Nuttx File System Corruption Bug - FAT: move cluster expan-
https://github.com/PX4/NuttX/commit/
sion checks to start of IO loops.
ed45e813aff84f5646ea7ad1d7ab50f597bdebb9.
[6] 2014. Processors | ARMv7-M. https://silver.arm.com/download/ARM_and_AMBA_
Architecture/AR580-DA-70000-r0p0-05rel0/DDI0403E_B_armv7m_arm.pdf.
[7] 2015. Firmware Control Output Handling Bug - IO driver: Ensure comms protocol
cannot get into integer overflow. https://github.com/PX4/Firmware/commit/
e09f5d2871f0c23cf8eb8154a2fa8831d9b96062.
[8] 2015.
Firmware Memory Vulnerability -
pointer.
free
https://github.com/PX4/Firmware/commit/
i2c: prevent double
_dev
of
1b8a830a38caf393cb308ad206d3c23329d58a48.
[9] 2015. Hijacking drones with a MAVLink exploit on DIY Drones. http://diydrones.
com/profiles/blogs/hijacking-quadcopters-with-a-mavlink-exploit.
[10] 2015. S.F. Express Launches First Drone Delivery Service in China. http://english.
cri.cn/12394/2015/03/24/1261s871432.htm.
[14] 2016.
[11] 2015. Xaircraft - Drone Vendor. http://www.xaircraft.cn.
[12] 2016. ArduPilot Autopilot Suite. http://ardupilot.org/ardupilot/index.html.
[13] 2016.
Ardupilot Memory Vulnerability - GCS_MAVLink: fixed null
https://github.com/ArduPilot/ardupilot/commit/
termination bug.
197e72acc0efa094c48070b6409d605b00b36ba6.
Firmware Memory Vulnerability - Prevents the possibility of buffer
https://github.com/PX4/Firmware/commit/
overflow in mixer parsing.
db44129ec099a05debf9187da2fd09035c9a67d7.
[15] 2016. Hackers take over security camera; live stream girls’ bedroom on Internet.
https://www.hackread.com/hackers-live-stream-hacked-security-camera.
[16] 2016. Hex-Rays, IDA Pro disassembler. http://www.hex-rays.com/products/ida.
[17] 2016.
of
http://resources.infosecinstitute.com/
the
how-hackers-violate-privacy-and-security-of-the-smart-home.
[18] 2016. MAVLink - Micro Air Vehicle Communication Protocol. http://qgroundcontrol.
How
Home.
Security
Hackers
Privacy
Violate
Smart
and
org/mavlink/start.
[19] 2016. Technical Analysis of Pegasus Spyware.
https://info.lookout.com/rs/
051-ESQ-475/images/lookout-pegasus-technical-analysis.pdf.
[20] 2017. 3DR Pixhawk | 3DR - Drone & UAV Technology. (2017). http://3dr.com/
support/articles/207358096/3dr_pixhawk.
[21] 2017.
Amazon Echo - Smart Speaker.
https://www.amazon.com/
Amazon-Echo-Bluetooth-Speaker-with-WiFi-Alexa/dp/B00X4WHP5E.
[22] 2017. BAT - Binary Analysis Tool. http://www.binaryanalysis.org/en/home.
[23] 2017. Binwalk - Firmware Analysis Tool. http://binwalk.org.
[24] 2017. Capstone. http://www.capstone-engine.org.
[25] 2017. Clutch - Fast iOS executable dumper. https://github.com/KJCracks/Clutch.
[26] 2017. CoreMark - Industry-Standard Benchmarks for Embedded Systems. http:
[27] 2017. IRIS+ | 3DR - Drone & UAV Technology. http://3dr.com/support/articles/
//www.eembc.org/coremark.
207358106/iris.
htm.
[28] 2017. McAfee Labs 2017 Threats Predictions, Nov. 2016. https://www.mcafee.com/
kr/resources/reports/rp-threats-predictions-2017.pdf.
[29] 2017. NuttX Real-Time Operating System. http://nuttx.org.
[30] 2017. PerformanceTest Mobile. http://www.passmark.com/products/pt_mobile.
[31] 2017. radare. https://www.radare.org.
[32] 2017. Roomba - Robot Vacuum Cleaner. http://www.irobot.com/For-the-Home/
Vacuuming/Roomba.aspx.
[33] 2017. Symantec Internet Security Threat Report 2017, Volume 22. https://www.
symantec.com/content/dam/symantec/docs/reports/istr-22-2017-en.pdf.
[34] Kapil Anand, Matthew Smithson, Khaled Elwazeer, Aparna Kotha, Jim Gruen,
Nathan Giles, and Rajeev Barua. 2013. A compiler-level intermediate representa-
tion based binary analysis and rewriting system. In Proceedings of the 8th ACM
European Conference on Computer Systems (EuroSys ’13).
[35] Dennis Andriesse, Xi Chen, Victor van der Veen, Asia Slowinska, and Herbert
Bos. 2016. An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries.
In Proceedings of the 25th USENIX Security Symposium (USENIX Security ’16).
[36] Fabrice Bellard. 2005. QEMU, a fast and portable dynamic translator. In Proceed-
ings of the USENIX Annual Technical Conference, FREENIX Track (ATC ’05).
[37] Derek L Bruening. 2004. Efficient, transparent, and comprehensive runtime code
manipulation. Ph.D. Dissertation. MIT.
[38] Mihai Bucicoiu, Lucas Davi, Razvan Deaconescu, and Ahmad-Reza Sadeghi. 2015.
XiOS: Extended application sandboxing on iOS. In Proceedings of the 10th ACM
Symposium on Information, Computer and Communications Security (ASIACCS
’15).
[39] Bryan Buck and Jeffrey K Hollingsworth. 2000. An API for runtime code patching.
International Journal of High Performance Computing Applications (2000).
[40] Lucas Davi, Alexandra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten
Holz, Ralf Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2012. MoCFI: A
Framework to Mitigate Control-Flow Attacks on Smartphones. In Proceedings of
the 19th Annual Symposium on Network and Distributed System Security (NDSS
’12).
[41] Bjorn De Sutter, Bruno De Bus, and Koen De Bosschere. 2005. Link-time binary
rewriting techniques for program compaction. ACM Transactions on Programming
Languages and Systems (2005).
[42] Zhui Deng, Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. 2015.
iris: Vetting private api abuse in ios applications. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications Security (CCS ’15).
[43] Zhui Deng, Xiangyu Zhang, and Dongyan Xu. 2013. BISTRO: Binary Component
Extraction and Embedding for Software Security Applications. In Proceedings of
the 18th European Symposium on Research in Computer Security (ESORICS ’13).
[44] Andrew Edwards, Hoi Vo, and Amitabh Srivastava. 2001. Vulcan binary transfor-
mation in a distributed environment. (2001).
[45] Galen Hunt and Doug Brubacher. 1999. Detours: Binary Interception of Win32
Functions. In Proceedings of the 3rd USENIX Windows NT Symposium.
[46] Todd Jackson, Andrei Homescu, Stephen Crane, Per Larsen, Stefan Brunthaler,
and Michael Franz. 2013. Diversifying the software stack using randomized NOP
insertion. In Moving Target Defense II. Springer.
[47] M Ammar Ben Khadra, Dominik Stoffel, and Wolfgang Kunz. 2016. Speculative
disassembly of binary code. In Proceedings of the 2016 IEEE International Con-
ference on Compilers, Architecture and Synthesis for Embedded Systems (CASES
’16).
[48] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael Franz. 2014. SoK:
Automated Software Diversity. In Proceedings of the 35th IEEE Symposium on
Security and Privacy (S&P ’14).
[49] Michael A Laurenzano, Mustafa M Tikir, Laura Carrington, and Allan Snavely.
2010. Pebil: Efficient static binary instrumentation for linux. In Proceedings of
the IEEE International Symposium on Performance Analysis of Systems & Software
(ISPASS ’10).
[50] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
building customized program analysis tools with dynamic instrumentation. In
Proceedings of the 2005 ACM SIGPLAN conference on Programming language design
and implementation (PLDI ’05).
[51] Nicholas Nethercote and Julian Seward. 2007. Valgrind: A Framework for Heavy-
weight Dynamic Binary Instrumentation. In Proceedings of the 28th ACM SIGPLAN
Conference on Programming Language Design and Implementation (PLDI ’07).
[52] Pádraig O’Sullivan, Kapil Anand, Aparna Kotha, Matthew Smithson, Rajeev
Barua, and Angelos D Keromytis. 2011. Retrofitting security in cots software
with binary rewriting. In Proceedings of the IFIP International Information Security
Conference (SEC ’11).
[53] Andre Pawlowski, Moritz Contag, Victor van der Veen, Chris Ouwehand,
Thorsten Holz, Herbert Bos, Elias Athanasopoulos, and Cristiano Giuffrida. 2017.
MARX: Uncovering class hierarchies in C++ programs. In Proceedings of the 24th
Annual Symposium on Network and Distributed System Security (NDSS ’17).
[54] Ted Romer, Geoff Voelker, Dennis Lee, Alec Wolman, Wayne Wong, Hank Levy,
Brian Bershad, and Brad Chen. 1997.
Instrumentation and optimization of
Win32/Intel executables using Etch. In Proceedings of the USENIX Windows NT
Workshop.
[55] Benjamin Schwarz, Saumya Debray, Gregory Andrews, and Matthew Legendre.
2001. Plto: A link-time optimizer for the Intel IA-32 architecture. In Proceedings
of the Workshop on Binary Translation (WBT ’01).
[56] David Sehr, Robert Muth, Cliff Biffle, Victor Khimenko, Egor Pasko, Karl Schimpf,
Bennet Yee, and Brad Chen. 2010. Adapting Software Fault Isolation to Contem-
porary CPU Architectures. In Proceedings of the 19th USENIX Security Symposium
(USENIX Security ’10).
[57] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and
Giovanni Vigna. 2015. Firmalice-Automatic Detection of Authentication Bypass
Vulnerabilities in Binary Firmware. In Proceedings of the 22nd Annual Symposium
on Network and Distributed System Security (NDSS ’15).
[58] Yunmok Son, Hocheol Shin, Dongkwan Kim, Youngseok Park, Juhwan Noh,
Kibum Choi, Jungwoo Choi, and Yongdae Kim. 2015. Rocking Drones with
Intentional Sound Noise on Gyroscopic Sensors. In Proceedings of the 24th USENIX
Security Symposium (USENIX Security ’15).
[59] Robert Wahbe, Steven Lucco, Thomas E Anderson, and Susan L Graham. 1994.
Efficient software-based fault isolation. In Proceedings of the fourteenth ACM
symposium on Operating systems principles (SOSP ’93).
[60] Ruoyu Wang, Yan Shoshitaishvili, Antonio Bianchi, Aravind Machiry, John
Grosen, Paul Grosen, Christopher Kruegel, and Giovanni Vigna. 2017. Ramblr:
Making Reassembly Great Again. In Proceedings of the 24th Annual Symposium
on Network and Distributed System Security (NDSS ’17).
[61] Shuai Wang, Pei Wang, and Dinghao Wu. 2015. Reassembleable disassembling.
In Proceedings of the 24th USENIX Security Symposium (USENIX Security ’15).
[62] Shuai Wang, Pei Wang, and Dinghao Wu. 2016. UROBOROS: Instrumenting
Stripped Binaries with Static Reassembling. In Proceedings of the 23rd IEEE Inter-
national Conference on Software Analysis, Evolution, and Reengineering (SANER
’16).
[63] Tielei Wang, Kangjie Lu, Long Lu, Simon Chung, and Wenke Lee. 2013. Jekyll on
ios: When benign apps become evil. In Proceedings of the 22nd USENIX Security
Symposium (USENIX Security ’13).
[64] Richard Wartell, Vishwath Mohan, Kevin W Hamlen, and Zhiqiang Lin. 2012.
Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code.
In Proceedings of the 2012 ACM conference on Computer and communications
security (CCS ’12).
[65] Richard Wartell, Vishwath Mohan, Kevin W Hamlen, and Zhiqiang Lin. 2012.
Securing untrusted code via compiler-agnostic binary rewriting. In Proceedings
of the 28th Annual Computer Security Applications Conference (ACSAC ’12).
[66] Mark Weiser. 1981. Program slicing. In Proceedings of the 5th International
Conference on Software engineering (ICSE ’81).
[67] Bennet Yee, David Sehr, Gregory Dardyk, J Bradley Chen, Robert Muth, Tavis
Ormandy, Shiki Okasaka, Neha Narula, and Nicholas Fullagar. 2009. Native client:
A sandbox for portable, untrusted x86 native code. In Proceedings of the 30th IEEE
Symposium on Security and Privacy (IEEE S&P ’09).
[68] Mingwei Zhang, Rui Qiao, Niranjan Hasabnis, and R Sekar. 2014. A platform
for secure static binary instrumentation. In Proceedings of the 10th ACM SIG-
PLAN/SIGOPS international conference on Virtual Execution Environments (VEE
’14).
[69] Mingwei Zhang and R Sekar. 2013. Control flow integrity for COTS binaries. In
Proceedings of the 22nd USENIX Security Symposium (USENIX Security ’13).