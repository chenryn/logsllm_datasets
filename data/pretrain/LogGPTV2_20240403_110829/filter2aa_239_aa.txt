### 书名与版权信息

**书名：** Professional C# 6 and .NET Core 1.0  
**作者：** Christian Nagel  
**电子书ISBN：** 978-1-119-09660-3  
**版权所有：** © 2016 John Wiley & Sons, Inc.  
**所有权利保留。本翻译版本由John Wiley & Sons, Inc.授权发布。**

**商标声明：** Wiley、Wiley标志、Wrox、Wrox标志、Programmer to Programmer以及相关设计均为John Wiley & Sons, Inc.及其附属公司在美利坚合众国及其他国家的注册商标，未经书面许可不得使用。其他所有商标均为其各自所有者的财产。John Wiley & Sons, Inc.不与本书中提及的任何产品或供应商有关联。

**中文简体版授权信息：** 本书中文简体字版由Wiley Publishing, Inc.授权清华大学出版社出版。未经出版者书面许可，不得以任何形式复制或抄袭本书内容。

**版权登记号：** 北京市版权局著作权合同登记号 图字：01-2016-5204

**防伪标签说明：** 本书封面贴有Wiley公司防伪标签，无标签者不得销售。

**侵权举报：** 版权所有，侵权必究。侵权举报电话：010-62782989 13701121933

**图书在版编目（CIP）数据：**  
**书名：** C#高级编程（第10版）C# 6 & .NET Core 1.0  
**作者：** [美] 克里斯琴·内格尔（Christian Nagel）著；李铭 译  
**出版地：** 北京  
**出版社：** 清华大学出版社  
**出版年份：** 2017  
**丛书名称：** .NET开发经典名著  
**原书名：** Professional C# 6.0 and .NET Core 1.0  
**ISBN：** 978-7-302-46196-8  
**分类号：** TP312C, TP393  
**中国版本图书馆CIP数据核字：** （2017）第019996号

### 出版信息

**责任编辑：** 王军 于平  
**装帧设计：** 牛静敏  
**责任校对：** 成凤进  
**责任印制：** 杨艳  
**出版发行：** 清华大学出版社  
**网址：** http://www.tup.com.cn, http://www.wqbook.com  
**地址：** 北京清华大学学研大厦A座  
**邮编：** 100084  
**社总机：** 010-62770175  
**邮购电话：** 010-62786544  
**投稿与读者服务：** 010-62776969, PI:EMAIL  
**质量反馈：** 010-62772015, PI:EMAIL  
**印装者：** 三河市中晟雅豪印务有限公司  
**经销：** 全国新华书店  
**开本：** 185mm×260mm  
**印张：** 92.5  
**插页：** 1  
**字数：** 2482千字  
**版次：** 2017年3月第1版  
**印次：** 2017年3月第1次印刷  
**印数：** 1～5000  
**定价：** 168.00元  
**产品编号：** 067811-01

### 译者序

C#是微软公司在2000年6月发布的一种新的编程语言，由Delphi语言的设计者Anders Hejlsberg带领微软公司的开发团队开发。C#是一种安全、稳定、简单且优雅的面向对象编程语言，它继承了C和C++的强大功能，同时去除了它们的一些复杂特性（例如没有宏以及不允许多重继承）。C#综合了Visual Basic简单的可视化操作和C++的高运行效率，以其强大的操作能力、优雅的语法风格、创新的语言特性和便捷的面向组件编程支持，成为.NET开发的首选语言。

自.NET推出以来，大约每两年就推出一个新的主要版本。.NET Core 1.0带来了以下显著变化：

- **独立部署：** 框架（包括运行库）是与应用程序一起交付的，即使更新运行库也不影响现有的应用程序。
- **模块化设计：** .NET Core 1.0采用模块化方法设计，框架分成数量众多的NuGet包，根据应用程序需求选择所需的包。
- **快速更新：** NuGet包可以独立于.NET Framework发布，使得.NET Core可以更快更新，发布周期更短。
- **开源：** .NET Core是开源的。
- **多平台支持：** .NET Core不仅运行在Windows上，还支持Linux和Mac系统。
- **性能提升：** .NET Core可以编译为本地代码，从而获得更大的性能提升。

### 书籍结构

**第一部分：** 介绍C#语言的基本语法和数据类型，面向对象功能，以及一些高级编程主题。

**第二部分：** 首先介绍Visual Studio 2015，接着论述C# 6新增的.NET编译器平台、应用程序测试，然后介绍.NET Core和Windows运行库主题。

**第三部分：** 主题是构建应用程序与XAML——Universal Windows应用程序和WPF。先介绍XAML的基础，给基于XAML的应用程序指定样式，再关注MVVM模式。在UWP应用程序和WPF应用程序的介绍性章节后，讨论具体特征，并使用ClickOnce部署WPF应用程序。

**第四部分：** 阐述Web应用程序和服务，包含关于ADO.NET的两章。先论述ADO.NET和Entity Framework，接着介绍如何创建自己的Windows服务，然后学习ASP.NET的新版本ASP.NET Core 1.0，以及ASP.NET MVC 6的特点。接下来讨论ASP.NET Web API，使用ASP.NET技术WebHooks和SignalR的形式发布和订阅Web应用程序，最后讨论部署。

### 作者简介

Christian Nagel是Visual Studio和开发技术方向的Microsoft MVP，担任微软开发技术代言人（Microsoft Regional Director）已经超过15年。他是thinktecture的合伙人，并创办了CN innovation，通过这两家公司提供关于如何使用Microsoft平台开发解决方案的培训和咨询。他拥有超过25年的软件开发经验。

Christian最初在Digital Equipment公司通过PDP 11和VAX/VMS系统开始他的计算机职业生涯，接触过各种语言和平台。在2000年，.NET只有一个技术概览版时，他就开始使用各种技术建立.NET解决方案。目前，他主要使用几个Microsoft Azure服务产品，讲授Universal Windows Platform应用和ASP.NET MVC的开发。

### 技术编辑简介

István Novák是SoftwArt的合伙人和首席技术顾问，SoftwArt是匈牙利的一家小型IT咨询公司。István是一名软件架构师和社区传教士。在过去的25年里，他参加了50多个企业软件开发项目。2002年，他在匈牙利与他人合作出版了第一本关于.NET开发的图书。2007年，他获得微软最有价值专家（MVP）头衔。2011年，他成为微软开发技术代言人（Microsoft Regional Director）。István与他人合作出版了《Visual Studio 2010 and .NET 4 Six-in-One》（Wiley, 2010）和《Windows 8应用开发入门经典》，独立编写了《Visual Studio 2010 LightSwitch开发入门经典》。

István从匈牙利的布达佩斯技术大学获得硕士学位和软件技术博士学位。他与妻子和两个女儿居住在匈牙利的Dunakeszi。他是一个充满激情的初级潜水员，常常在一年的任何季节到红海潜水。

### 致谢

我要感谢Charlotte Kughen，她让本书的文本更具可读性。我经常在深夜写作，而.NET Core在不断演变。Charlotte为我提供了巨大的帮助，使我写出的文字易于阅读。可以肯定，Charlotte现在精通编程的许多知识。也特别感谢István Novák，他撰写了一些好书。

尽管.NET Core的飞速发展和我在书中使用的临时构建还存在一些问题，但István向我挑战，改进了代码示例，让读者更容易理解。谢谢你们：Charlotte和István，你们让本书的质量上了一个大台阶。

我也要感谢Kenyon Brown、Jim Minatel，以及Wiley出版社帮助出版本书的其他人。我还想感谢我的妻子和孩子，为了编写本书，我花费了大量的时间，包括晚上和周末，但你们很理解并支持我。Angela、Stephanie和Matthias，你们是我深爱的人。没有你们，本书不可能顺利出版。

### 前言

对于开发人员来说，将C#语言和.NET描述为最重要的新技术一点也不夸张。.NET提供了一种环境，在这种环境中可以开发几乎所有在Windows上运行的应用程序。新版本的.NET Core 1.0不仅在Windows上运行，还在Linux和Mac系统上运行。C#是专门用于.NET的编程语言。例如，使用C#可以编写Web页面、Windows Presentation Foundation (WPF) 应用程序、REST Web服务、分布式应用程序的组件、数据库访问组件、传统的Windows桌面应用程序，以及可以联机/脱机运行的Universal Windows Platform (UWP) 应用程序。本书介绍了.NET Core 1.0和完整的.NET Framework，即.NET Framework 4.6。如果读者使用以前的版本编写代码，本书的一些章节可能不适用。

在可能的情况下，本书的示例都使用了.NET Core 1.0。本书的代码在Windows系统上创建，但也可以在其他平台上运行。可能需要对示例进行较小的改变，才能使它们在Linux上运行。阅读第1章可以了解如何构建用于Linux平台的应用程序，什么程序不能在Linux上运行？WPF应用程序仍然需要完整的.NET Framework，仅在Windows上运行。UWP应用程序使用.NET Core，但还需要Windows运行库。这些应用程序也需要Windows。这些UI技术都包含在本书的第三部分中。

那么，.NET和C#有什么优点？

#### .NET Core的重要性

为了理解.NET Core的重要性，我们必须考虑.NET Framework。.NET Framework 1.0在2002年发布，此后大约每两年就推出一个新的主要版本。Visual Studio 2013附带着C# 5和.NET 4.5。.NET Framework 4.5十分庞大，有20,000多个类。

**注意：** 第1章详细介绍了.NET Framework和C#的版本。

这个庞大的框架有什么问题？.NET Core是如何解决的？

对于新的开发人员来说，掌握这个庞大的框架并不容易。其中保留了许多旧应用程序的重要内容，但它们对新的应用程序并不重要。对于有经验的开发人员来说，在这些技术中选择一个最好的并不容易。必须为Web应用程序选择使用ASP.NET Web Forms还是ASP.NET MVC，为客户端应用程序选择使用Windows Forms和WPF还是Universal Windows Platform，为数据访问选择Entity Framework还是LINQ to SQL，为存储集合选择使用ArrayList还是List。这对于一些有经验的开发人员而言，选择是显而易见的，但对于大多数开发人员来说，选择并不是那么容易。刚开始接触.NET的开发人员就更困难了。

.NET Core基于较小的单元——小型NuGet包。Console类只用于控制台应用程序。在.NET Framework中，Console类可用于mscorlib，mscorlib是每个.NET应用程序都引用的程序集。使用.NET Core，必须显式地决定使用NuGet包System.Console；否则，Console类就不可用。

较小的包更容易摆脱框架的某些部分。如果需要给遗留应用程序使用旧的集合类，它们就可以通过NuGet包System.Collections.NonGeneric来使用。对于新的应用程序，可以定义能使用的软件包列表，System.Collections.NonGeneric可以排除在这个列表之外。

如今，开发要快得多。在许多产品中，客户会收到产品的持续更新，而不是每两年接收一次新版本。甚至Windows 10都具备这么快的步伐。客户在每次更新时都收到较小的新特性，但收到新特性的速度更快。.NET Framework目前的发布周期是两年，还不够快。一些技术，如Entity Framework，已经绕过了这个问题，它可以通过NuGet包提供新功能，而NuGet包可以独立于.NET Framework来发布。

更新较小的包，就允许更快的创新。.NET Core基于许多小型NuGet包，所以更容易改变。.NET Core和ASP.NET现在是开源的。.NET Core的源代码在http://www.github.com/dotnet上，ASP.NET的源代码在http://www.github.com/aspnet上。

发布.NET时，Windows在客户端和服务器上都有很大的市场份额。现在，世界更加碎片化。许多公司决定不通过ASP.NET运行服务器端代码，因为它不在Linux上运行。而ASP.NET Core 1.0和.NET Core可以在Linux上运行。

.NET Core独立于平台，支持Windows、Linux和Mac系统。对于客户端应用程序，可以在iPhone和Android上使用.NET和Xamarin。

.NET Framework要求把开发过程中使用的.NET运行库版本安装到目标系统上。基于客户需求，许多应用程序的开发都受到要使用的.NET Framework版本的限制。这不仅是基于客户端的应用程序开发的问题，也是基于服务器的应用程序开发的问题。我们不得不转回旧的.NET运行库版本，因为供应商不支持最新的版本。而有了.NET Core，运行库会和应用程序一起交付给客户。

建立ASP.NET时，与Active Server Pages（ASP，使用运行在服务器上的JavaScript或VBScript代码建立）的兼容是一个重要的方面。现在不再需要了。建立ASP.NET Web Forms时，开发人员不需要知道任何关于JavaScript和HTML的内容，一切都可以用服务器端代码完成。现在，因为有了大量的JavaScript框架和HTML的增强，所以需要对JavaScript和HTML进行更多的控制。

在新版本的ASP.NET中，性能在框架体系结构中有很大的作用。只有真正需要的东西才施加性能影响。如果Web应用程序没有静态文件，就必须显式地决定是否使用它，否则就不会对它有性能影响。通过细粒度的控制，可以决定需要什么特性。

为了得到更大的性能提升，.NET Core可以构建为本地代码。这不仅在Windows上是可能的，在Linux和Mac系统上也是可行的。这样，在程序启动时可以得到特别的性能改进，而且使用更少的内存。

现在，遗留的应用程序有一个问题。大多数应用程序都不能轻松地切换到.NET Core上。完整的.NET Framework（仅运行在Windows上）也在进化。它进化的步伐没有.NET Core那么大，因为它是一个成熟的框架。在撰写本书时，发布了.NET 4.6.1，与之前的版本相比，其更新比较小。使用Windows Forms或ASP.NET Web Forms编写的应用程序仍然需要使用完整的框架，但它们可以利用.NET 4.6.1的增强功能。通过.NET 4.6.1，还可以使用为.NET Core建立的NuGet包。许多新的NuGet包采用便携的方式建立。通过ASP.NET MVC 5 Web应用程序，还可以决定改为运行在ASP.NET Core 1.0上的ASP.NET MVC 6。

ASP.NET Core 1.0允许使用.NET Core或.NET 4.6。这可以简化转换过程。然而，要在Linux上运行ASP.NET MVC，则需要迁移ASP.NET MVC应用程序来使用.NET Core，但之前也不能在Linux上运行。

下面总结.NET Core的一些特性：
- .NET Core是开源的。
- NuGet包较小，允许更快的创新。
- .NET Core支持多个平台。
- .NET Core可以编译为本地代码。
- ASP.NET可以在Windows和Linux上运行。

从.NET Core的特性可以看出，自.NET第1版以来，这个技术在.NET历史上给.NET带来的变化最大。这是一个新的开始，我们可以用更快的步伐继续新的开发旅程。

#### C#的重要性

C#在2002年发布时，是一个用于.NET Framework的开发语言。C#的设计思想来自于C++、Java和Pascal。Anders Hejlsberg从Borland来到微软公司，带来了开发Delphi语言的经验。Hejlsberg在微软公司开发了Java的Microsoft版本J++，之后创建了C#。

C#一开始不仅作为一种面向对象的通用编程语言，而且是一种基于组件的编程语言，支持属性、事件、特性（注解）和构建程序集（包括元数据的二进制文件）。

随着时间的推移，C#增强了泛型、语言集成查询（Language Integrated Query, LINQ）、lambda表达式、动态特性和更简单的异步编程。C#编程语言并不简单，因为它提供了很多特性，但它的实际使用的功能不断进化着。因此，C#不仅仅是面向对象或基于组件的语言，它还包括函数式编程的理念，开发各种应用程序的通用语言会实际应用这些理念。

#### C# 6的新特性

在C# 6中有一个新的C#编译器。它完成源代码的清理。现在自定义程序也可以使用编译器管道的特性，并使用Visual Studio的许多特性。

这个新的C#编译器平台允许用许多新特性改进C#。虽然这些特性都没有LINQ或async关键字的影响大，但许多改进都提高了开发人员的效率。C# 6有哪些变化？

##### 静态using声明

静态using声明允许调用静态方法时不使用类名。

**C# 5**
```csharp
using System;
// etc.
Console.WriteLine("Hello, World! ");
```

**C# 6**
```csharp
using static System.Console;
// etc.
WriteLine("Hello, World");
```

##### 表达式体方法

表达式体方法只包括一个可以用lambda语法编写的语句：

**C# 5**
```csharp
public bool IsSquare(Rectangle rect)
{
    return rect.Height == rect.Width;
}
```

**C# 6**
```csharp
public bool IsSquare(Rectangle rect) => rect.Height == rect.Width;
```

希望这些优化后的文本能够更好地传达您的意图，并提高文档的专业性和可读性。