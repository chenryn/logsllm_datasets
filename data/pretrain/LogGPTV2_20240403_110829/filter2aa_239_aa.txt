Christian Nagel
Professional C# 6 and .NET Core 1.0
EISBN: 978-1-119-09660-3
Copyright © 2016 by John Wiley & Sons, Inc.
All Rights Reserved. This translation published under license.
Trademarks: Wiley, the Wiley logo, Wrox, the Wrox logo, Programmer to Programmer,
and related trade dress are trademarks or registered trademarks of John Wiley & Sons,
Inc. and/or its affiliates, in the United States and other countries, and may not be used
without written permission. All other trademarks are the property of their respective
owners. John Wiley & Sons, Inc., is not associated with any product or vendor mentioned
in this book.
本书中文简体字版由Wiley Publishing, Inc．授权清华大学出版社出版。未经出版者书面许
可，不得以任何方式复制或抄袭本书内容。
北京市版权局著作权合同登记号 图字：01-2016-5204
Copies of this book sold without a Wiley sticker on the cover are unauthorized and illegal.
本书封面贴有Wiley公司防伪标签，无标签者不得销售。
版权所有，侵权必究。侵权举报电话：010-62782989 13701121933 
图书在版编目（CIP）数据
C#高级编程（第10版）C# 6 & .NET Core 1.0／（美）克里斯琴·内格尔（Christian Nagel）
著；李铭 译．—北京：清华大学出版社，2017
（.NET开发经典名著）
书名原文：Professional C# 6.0 and .NET Core 1.0
ISBN 978-7-302-46196-8
Ⅰ．①C… Ⅱ．①克… ②李… Ⅲ．①C语言－程序设计 ②计算机网络－程序设计 
Ⅳ．①TP312C②TP393
中国版本图书馆CIP数据核字（2017）第019996号
责任编辑 ：王 军 于 平
装帧设计 ：牛静敏
责任校对 ：成凤进
责任印制 ：杨 艳
出版发行 ：清华大学出版社
网  址 ：http://www.tup.com.cn, http://www.wqbook.com
地  址 ：北京清华大学学研大厦A座
邮  编 ：100084
社 总  机 ：010-62770175
邮  购 ：010-62786544
投稿与读者服务 ：010-62776969, PI:EMAIL
质量反馈 ：010-62772015, PI:EMAIL
印 装  者 ：三河市中晟雅豪印务有限公司
经  销 ：全国新华书店
开  本 ：185mm×260mm
印  张 ：92.5
插  页 ：1
字  数 ：2482千字
版  次 ：2017年3月第1版
印  次 ：2017年3月第1次印刷
印  数 ：1～5000
定  价 ：168.00元
产品编号：067811-01
译者序
C#是微软公司在2000年6月发布的一种新的编程语言，由Delphi语言的设计者
Hejlsberg带领微软公司的开发团队开发，是一种安全的、稳定的、简单的、优雅的、由C
和C++衍生出来的面向对象的编程语言。它在继承C和C++强大功能的同时，去掉了它们
的一些复杂特性（例如没有宏以及不允许多重继承）。C#综合了Visual Basic简单的可视
化操作和C++的高运行效率，以其强大的操作能力、优雅的语法风格、创新的语言特性和
便捷的面向组件编程支持，成为.NET开发的首选语言。
自.NET推出以来，大约每两年就推出一个新的主要版本。从.NET Core的特性可以看
出，自.NET第1版以来，这个技术在.NET历史上给.NET带来的变化最大：
● .NET Framework要求把开发过程中使用的.NET运行库版本安装到目标系统上。而
在.NET Core 1.0中，框架（包括运行库）是与应用程序一起交付的。即使更新运
行库，也不影响现有的应用程序。
● Visual Studio 2013附带着C# 5和.NET Framework 4.5。.NET Framework 4.5很大，有
20 000多个类。只要添加新功能，.NET Framework就会变得越来越大。目前.NET
Core的框架与.NET Framework 4.6一样巨大，但.NET Core 1.0以模块化的方法设
计。该框架分成数量众多的NuGet包。根据应用程序决定需要什么包。
● NuGet包可以独立于.NET Framework发布，所以.NET Core可以很快更新，发布周期
更短。
● .NET Core是开源的。
● .NET Core支持多个平台。新版本的.NET Core不仅运行在Windows上，还运行在
Linux和Mac系统上。
● .NET Core可以编译为本地代码，得到更大的性能提升。
本书在第I部分阐述C#语言的背景知识。首先介绍C#的基本语法和数据类型，再介绍
C#的面向对象功能，之后是C#中的一些高级编程主题。第Ⅱ部分首先介绍Visual 
Studio
2015，接着论述C# 
6新增的.NET编译器平台、应用程序的测试，之后介绍了独立于应用
程序类型的.NET Core和Windows运行库主题。第Ⅲ部分的主题是构建应用程序与XAML
——Universal Windows应用程序和WPF。先介绍XAML的基础，给基于XAML的应用程序
指定样式，再关注MVVM（Model-View-View Model）模式。在UWP应用程序和WPF应用
程序的介绍性章节后，有两章的内容讨论UWP应用程序的具体特征，另外两章讨论WPF
应用程序。本部分的最后，使用ClickOnce部署WPF应用程序。第Ⅳ部分阐述Web应用程
序和服务，还包含关于ADO.NET的两章。先论述了ADO.NET和Entity 
Framework，接着
介绍如何创建自己的Windows服务，然后学习ASP.NET的新版本ASP.NET Core 1.0，以及
ASP.NET MVC 6的特点。接下来讨论ASP.NET Web API，使用ASP.NET技术WebHooks和
SignalR的形式发布和订阅Web应用程序，这部分的最后讨论部署。
本书对上一版做了全面更新，使C#代码适用于最新版本的.NET 
Core 
1.0。本书
由.NET专家Christian Nagel编写，书中包含开发人员使用C#所需要的所有内容。本书适合
希望提高编程技巧、有经验的C#程序员使用，也适用于刚开始使用C#的专业开发人员。
在这里要感谢清华大学出版社的编辑们，他们为本书的出版投入了巨大的热情并付出
了很多心血。没有他们的帮助和鼓励，本书不可能顺利付梓。本书全部章节由李铭翻译、
黄静审校。参与本书翻译的还有孔祥亮、陈跃华、杜思明、熊晓磊、曹汉鸣、陶晓云、王
通、方峻、李小凤、曹晓松、蒋晓冬、邱培强、洪妍、李亮辉、高娟妮、曹小震、陈笑。
在此，一并表示感谢！
对于这本经典之作，译者在翻译过程中力求忠于原文，做到“信、达、雅”，但是鉴于
译者水平有限，错误和失误在所难免。如有任何意见和建议，请不吝指正，感激不尽！
译者
作者简介
Christian Nagel 是Visual Studio和开发技术方向的
Microsoft 
MVP，担任微软开发技术代言人（Microsoft
Regional Director）已经超过15年。Christian是thinktecture
的合伙人，并创办了CN innovation，通过这两家公司为如
何使用Microsoft平台开发解决方案提供培训和咨询。他拥
有25年以上的软件开发经验。
Christian Nagel最初在Digital Equipment公司通过PDP
11和VAX/VMS系统开始他的计算机职业生涯，接触过各
种语言和平台。在2000年，.NET只有一个技术概览版时，
他就开始使用各种技术建立.NET解决方案。目前，他主要使用几个Microsoft Azure服务产
品，讲授Universal Windows Platform应用和ASP.NET MVC的开发。
在软件开发领域工作多年以后，Christian仍然热爱学习和使用新技术，并通过多种形
式教别人如何使用新技术。他的Microsoft技术知识非常渊博，编写了很多书，拥有微软认
证培训师（MCT）和微软认证解决方案开发专家（MCSD）认证。Christian在国际会议上
（如TechEd、BASTA！和TechDays）经常发言。他创立了INETA Europe来支持.NET用户
组。他的联系网站是www.cninnovation.com，其Twitter账号是@christiannagel。
技术编辑简介
István Novák 是SoftwArt的合伙人和首席技术顾问，
SoftwArt是匈牙利的一家小型IT咨询公司。István是一名软
件架构师和社区的传教士。在过去的25年里，他参加了50
多个企业软件开发项目。2002年，他在匈牙利与他人合作
出版了第一本关于.NET开发的图书。2007年，他获得微软
最有价值专家（MVP）头衔。2011年，他成为微软开发技
术代言人（Microsoft Regional Director）。István与他人合
作出版了Visual Studio 2010 and .NET 4 Six -in -One
（Wiley, 2010）和《Windows 8应用开发入门经典》，独
立编写了《Visual Studio 2010 LightSwitch开发入门经
典》。
István从匈牙利的布达佩斯技术大学获得硕士学位和软件技术的博士学位。他与妻子
和两个女儿居住在匈牙利的Dunakeszi。他是一个充满激情的初级潜水员，常常在一年的
任何季节，到红海潜水。
致谢
我要感谢Charlotte 
Kughen，他让本书的文本更具可读性。我经常在深夜写作，
而.NET 
Core在不断演变。Charlotte为我提供了巨大的帮助，使我写出的文字易于阅读。
可以肯定，Charlotte现在精通编程的许多知识。也特别感谢István 
Novák，他撰写了一些
好书。
尽管.NET Core的飞速发展和我在书中使用的临时构建还存在一些问题，但István向我
挑战，改进了代码示例，让读者更容易理解。谢谢你们：Charlotte和István，你们让本书
的质量上了一个大台阶。
我也要感谢Kenyon Brown、Jim Minatel，以及Wiley出版社帮助出版本书的其他人。
我还想感谢我的妻子和孩子，为了编写本书，我花费了大量的时间，包括晚上和周末，但
你们很理解并支持我。Angela、Stephanie和Matthias，你们是我深爱的人。没有你们，本
书不可能顺利出版。
前言
对于开发人员，把C#语言和.NET描述为最重要的新技术一点都不夸张。.NET提供了
一种环境。在这种环境中，可以开发在Windows上运行的几乎所有应用程序。在Windows
上运行的是.NET Framework以前的版本，新版本.NET Core 1.0不仅在Windows上运行，还
在Linux和Mac系统上运行。C#是专门用于.NET的编程语言。例如，使用C#可以编写Web
页面、Windows Presentation Foundation（WPF）应用程序、REST Web服务、分布式应用
程序的组件、数据库访问组件、传统的Windows桌面应用程序，以及可以联机/脱机运行
的Universal Windows Platform （UWP）应用程序。本书介绍.NET Core 1.0和完整的.NET
Framework，即.NET Framework 4.6。如果读者使用以前的版本编写代码，本书的一些章
节就不适用。
在可能的情况下，本书的示例都使用了.NET Core 1.0。本书的代码在Windows系统上
创建，但也可以在其他平台上运行。可能需要对示例进行较小的改变，才能使它们在
Linux上运行。阅读第1章可以了解如何构建用于Linux平台的应用程序，什么程序不能在
Linux上运行？WPF应用程序仍然需要完整的.NET 
Framework，仅在Windows上运行。
UWP应用程序使用.NET 
Core，但还需要Windows运行库。这些应用程序也需要
Windows。这些UI技术都包含在本书的第Ⅲ部分中。
那么，.NET和C#有什么优点？
0.1 .NET Core的重要性
为了理解.NET Core的重要性，就一定要考虑.NET Framework。.NET Framework 1.0在
2002年发布，此后大约每两年就推出一个新的主要版本。Visual Studio 2013附带着C# 5
和.NET 4.5。.NET Framework 4.5十分巨大，有20 000多个类。
  注意： 第1章详细介绍了.NET Framework和C#的版本。
这个巨大的框架有什么问题？.NET Core是如何解决的？
对于新的开发人员来说，掌握这个巨大的框架并不容易。其中保留了旧应用程序很重
要的许多内容，但它们对新的应用程序并不重要。对于有经验的开发人员来说，在这些技
术中选择一个最好的是不容易的。必须为Web应用程序选择使用ASP.NET Web Forms还是
ASP.NET 
MVC，为客户端应用程序选择使用Windows 
Forms和WPF还是Universal
Windows Platform，为数据访问选择Entity Framework还是LINQ to SQL，为存储集合选择
使用Array List还是List。这对于一些有经验的开发人员而言，选择是显而易见的，但
对于大多数开发人员来说，选择并不是那么容易。刚开始接触.NET的开发人员就更困难
了。
.NET 
Core基于较小的单元——小型NuGet包。Console类只用于控制台应用程序。
在.NET Framework中，Console类可用于mscorlib, mscorlib是每个.NET应用程序都引用的
程序集。使用.NET Core，必须显式地决定使用NuGet包System.Console；否则，Console类
就不可用。
较小的包更容易摆脱框架的某些部分。如果需要给遗留应用程序使用旧的集合类，它
们就可以通过NuGet包System.Collections.NonGeneric来使用。对于新的应用程序，可以定
义能使用的软件包列表，System.Collections.NonGeneric可以排除在这个列表之外。
如今，开发要快得多。在许多产品中，客户会收到产品的持续更新，而不是每两年接
收一次新版本。甚至Windows 
10都具备这么快的步伐。客户在每次更新时都收到较小的
新特性，但收到新特性的速度更快。.NET 
Framework目前的发布周期是两年，还不够
快。一些技术，如Entity Framework，已经绕过了这个问题，它可以通过NuGet包提供新功
能，而NuGet包可以独立于.NET Framework来发布。
更新较小的包，就允许更快的创新。.NET 
Core基于许多小型NuGet包，所以更容易
改变。.NET 
Core和ASP.NET现在是开源的。.NET 
Core的源代码在
http://www.github.com/dotnet上，ASP.NET的源代码在http://www.github.com/aspnet上。
发布.NET时，Windows在客户端和服务器上都有很大的市场份额。现在，世界更加
碎片化。许多公司决定不通过ASP.NET运行服务器端代码，因为它不在Linux上运行。而
ASP.NET Core 1.0和.NET Core可以在Linux上运行。
.NET Core独立于平台，支持Windows、Linux和Mac系统。对于客户端应用程序，可
以在iPhone和Android上使用.NET和Xamarin。
.NET Framework要求把开发过程中使用的.NET运行库版本安装到目标系统上。基于
客户需求，许多应用程序的开发都受到要使用的.NET 
Framework版本的限制。这不仅是
基于客户端的应用程序开发的问题，也是基于服务器的应用程序开发的问题。我们不得不
转回旧的.NET运行库版本，因为供应商不支持最新的版本。而有了.NET Core，运行库会
和应用程序一起交付给客户。
建立ASP.NET时，与Active Server Pages（ASP，使用运行在服务器上的JavaScript或
VBScript代码建立）的兼容是一个重要的方面。现在不再需要了。建立ASP.NET 
Web
Forms时，开发人员不需要知道任何关于JavaScript和HTML的内容，一切都可以用服务器
端代码完成。现在，因为有了大量的JavaScript框架和HTML的增强，所以需要对
JavaScript和HTML进行更多的控制。
在新版本的ASP.NET中，性能在框架体系结构中有很大的作用。只有真正需要的东
西才施加性能影响。如果Web应用程序没有静态文件，就必须显式地决定是否使用它，否
则就不会对它有性能影响。通过细粒度的控制，可以决定需要什么特性。
为了得到更大的性能提升，.NET Core可以构建为本地代码。这不仅在Windows上是
可能的，在Linux和Mac系统上也是可行的。这样，在程序启动时可以得到特别的性能改
进，而且使用更少的内存。
现在，遗留的应用程序有一个问题。大多数应用程序都不能轻松地切换到.NET Core
上。完整的.NET 
Framework（仅运行在Windows上）也在进化。它进化的步伐没有.NET
Core那么大，因为它是一个成熟的框架。在撰写本书时，发布了.NET 4.6.1，与之前的版
本相比，其更新比较小。使用Windows Forms或ASP.NET Web Forms编写的应用程序仍然
需要使用完整的框架，但它们可以利用.NET 4.6.1的增强功能。通过.NET 4.6.1，还可以使
用为.NET 
Core建立的NuGet包。许多新的NuGet包采用便携的方式建立。通过ASP.NET
MVC 5 Web应用程序，还可以决定改为运行在ASP.NET Core 1.0上的ASP.NET MVC 6。
ASP.NET Core 1.0允许使用.NET Core或.NET 4.6。这可以简化转换过程。然而，要在
Linux上运行ASP.NET MVC，则需要迁移ASP.NET MVC应用程序来使用.NET Core，但之
前也不能在Linux上运行。
下面总结.NET Core的一些特性：
● .NET Core是开源的。
● NuGet包较小，允许更快的创新。
● .NET Core支持多个平台。
● .NET Core可以编译为本地代码。
● ASP.NET可以在Windows和Linux上运行。
从.NET Core的特性可以看出，自.NET第1版以来，这个技术在.NET历史上给.NET带
来的变化最大。这是一个新的开始，我们可以用更快的步伐继续新的开发旅程。
0.2 C#的重要性
C#在2002年发布时，是一个用于.NET Framework的开发语言。C#的设计思想来自于
C++、Java和Pascal。Anders 
Hejlsberg从Borland来到微软公司，带来了开发Delphi语言的
经验。Hejlsberg在微软公司开发了Java的Microsoft版本J++，之后创建了C#。
C#一开始不仅作为一种面向对象的通用编程语言，而且是一种基于组件的编程语
言，支持属性、事件、特性（注解）和构建程序集（包括元数据的二进制文件）。
随着时间的推移，C#增强了泛型、语言集成查询（Language 
Integrated 
Query,
LINQ）、lambda表达式、动态特性和更简单的异步编程。C#编程语言并不简单，因为它
提供了很多特性，但它的实际使用的功能不断进化着。因此，C#不仅仅是面向对象或基
于组件的语言，它还包括函数式编程的理念，开发各种应用程序的通用语言会实际应用这
些理念。
0.3 C# 6的新特性
在C# 
6中有一个新的C#编译器。它完成源代码的清理。现在自定义程序也可以使用
编译器管道的特性，并使用Visual Studio的许多特性。
这个新的C#编译器平台允许用许多新特性改进C#。虽然这些特性都没有LINQ或async
关键字的影响大，但许多改进都提高了开发人员的效率。C# 6有哪些变化？
0.3.1 静态的using声明
静态的using声明允许调用静态方法时不使用类名。
C# 5
    using System;
    // etc.
    Console.WriteLine("Hello, World! ");
C# 6
    using static
 System.Console;
    // etc.
    WriteLine("Hello, World");
using static关键字参见第2章。
0.3.2 表达式体方法
表达式体方法只包括一个可以用lambda语法编写的语句：
C# 5
    public bool IsSquare(Rectangle rect)
    {
      return rect.Height == rect.Width;
    }
C# 6
    public bool IsSquare(Rectangle rect) => rect.Height == rect.Width;