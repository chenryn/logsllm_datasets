ď
ŝ
ů
͘
Ϯ
ϲ
ϰ
ŵ
ď
ů
͘
Ϭ
ϳ
ϰ
Ž
ƚ
Ŷ
Ž
ƚ
͘
ϱ
ϲ
ϰ
Ĩ
Ğ
ƌ
ϰ
ϲ
Ϯ
Ś
ϰ
ϲ
ϰ
͘
Ĩ
ƌ
͘
ǁ
ϭ
ϴ
ϰ
ƌ
Ă
ƚ
Ɛ
Ă
͘
ϯ
ϳ
ϰ
Ɖ
Ɖ
ƚ
Ğ
Ŷ
ŵ
Ž
ϭ
ϳ
ϰ
͘
Ğ
Ő
Ă
ƌ
Ğ
ǀ
Ă
ŝ
ϯ
ǆ
Ŷ
Ś
Ɖ
Ɛ
͘
Ϯ
ϴ
ϰ
Ŭ
ŵ
ď
Đ
Ŷ
Ă
ů
Ă
ǆ
͘
ϯ
ϴ
ϰ
ZKWŐĂĚŐĞƚͲǀϮ͘ϯZĞĚƵĐƚŝŽŶŝŶhŶŝƋƵĞ'ĂĚŐĞƚƐ
ZKW'ĂĚŐĞƚͲǀϯ͘ϭZĞĚƵĐƚŝŽŶŝŶhŶŝƋƵĞ'ĂĚŐĞƚƐ
ZKW'ĂĚŐĞƚͲǀϯ͘ϭZĞĚƵĐƚŝŽŶŝŶdŽƚĂů'ĂĚŐĞƚƐ
Figure 10. Reduction of number of gadgets found using ILR. Almost all gadgets are successfully randomized, and consequently unavailable for use in
an attack.
and 416.gamess). The overhead added is mostly due
to the startup overhead of reading the rewrite rules. In
481.wrf benchmark, for example, we note that reading
the rewrite rules takes about 45 seconds, and that the 7%
overhead difference between basic virtualization and ILR
also corresponds to about 46 seconds. We believe that this
startup overhead could be greatly reduced by a better rewrite
rule format than ASCII. Section IV-F2 discusses optimizing
the rewrite rules in more detail.
ILR+ actually reduces the overhead (by 3% to only 13%)
compared to ILR. This reduction is due to more call sites
being randomized. As mentioned in Section III-B3, storing
an unrandomized return address takes one extra instruction.
With more return addresses randomized,
the instruction
count is reduced. Because ILR+ has the largest effects on
the C++ benchmarks, we see this difference most in the
C++ benchmarks that are ILR+ compatible (447.dealII,
450.soplex, and 483.xalancbmk).
Taken together, we believe there is strong evidence that
ILR can be implemented efﬁciently, perhaps as low as
the basic virtualization overhead of only 8%. Even our
prototype implementation, which has overheads of 13%-16%
on average could be used to protect many applications.
2) Space Overhead: Our prototype implementation has
memory overhead from two sources. The ﬁrst is from the
PVM we used to implement the ILR VM. Such overheads
are well studied, and not particularly signiﬁcant for modern
systems [26, 27].
The second source of overhead is the handling of the ILR
rewrite rules. In our prototype implementation, we made
the design choice to use ASCII for the ILR rewrite rules.
Our choice makes sense for an evaluation prototype: we
favored human readability and ease of debugging over raw
performance or storage efﬁciency. Consequently, we note
that the on-disk size of the rewrite rules can be quite large.
For example, the largest benchmark, 481.wrf, has 264MB
of rewrite rules. The in-memory size is even worse, 345MB.
This overhead is largely due to our hashtable implementation
that stores each byte of an instruction in a separate hash
bucket, which allocates many words of data for each byte
stored in an ILR rewrite rule. However, 481.wrf is clearly
a worst-case for our benchmarks. The average size of the
rewrite rules (104MB) is less than half that for 481.wrf.
While our prototype implementation is currently inefﬁ-
cient, we do not believe the rewrite rules are an inherent
limitation of ILR. Many techniques exist for minimizing this
overhead. For example, we used the gzip compression utility
to compress the rewrite rules, and obtained an average size
of 14MB. We believe that a binary encoding of the rewrite
rules and an efﬁcient memory storage technique could easily
reduce the memory used to well under 14MB. On today’s
systems with multiple gigabytes of main memory, such space
overhead should be easily tolerated.
3) Analysis Time: We measured the analysis time of
the ILR technique. We were able to process the SPEC
benchmarks in an average of 23 minutes each. Only the
last step of the process creates any randomization, so most
of that processing time can be re-used if one wanted to
re-randomize. The randomization step itself took only 36
seconds, indicating that re-randomization once analysis is
complete could proceed very quickly.
V. SECURITY DISCUSSION
A. Protecting the ILR VM
This section discusses several issues related to the security
of the VM used to implement ILR.
The ﬁrst issue that arises is the VM’s potential for being
vulnerable to an ROP or arc-injection attack. First, we
note that the input to the VM is actually the program’s
instructions and the ILR rewrite rules, which we assume
to be benign. Malicious programs or malicious rewrite rules
are beyond the scope of our remote-attacker threat model.
Benign programs and rewrite rules help, as that
is the
majority of input for the VM, but does not absolutely
preclude an attacker from providing input to the program that
somehow exercises a vulnerability in the VM. Still, we feel
580
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:49:42 UTC from IEEE Xplore.  Restrictions apply. 

Ě
Ă
Ğ
Ś
ƌ
Ğ
ǀ
K
Ϳ
Ě
Ğ
ǌ
ŝ
ů
Ă
ŵ
ƌ
Ž
E
;
Ϯ
ϭ͘ϴ
ϭ͘ϲ
ϭ͘ϰ
ϭ͘Ϯ
ϭ
Ϭ͘ϴ
Đ
Đ
Ő
͘
ϯ
Ϭ
ϰ
Ϯ
Ɖ
ŝ
ǌ
ď
ϭ
Ϭ
ϰ
͘
Ɛ
Ğ
ǀ
Ă
ǁ
ď
Ϭ
ϭ
ϰ
͘
Ɛ
Ɛ
Ğ
ŵ
Ă
Ő
͘
ϲ
ϭ
ϰ
Ĩ
Đ
ŵ
ϵ
Ϯ
ϰ
͘
Đ
ů
ŝ
͘
ŵ
ϯ
ϯ
ϰ
Ɖ
ŵ
Ɛ
Ƶ
Ğ
ǌ
͘
ϰ
ϯ
ϰ
Ɛ
Đ
Ă
ŵ
Ž
ƌ
Ő
͘
ϱ
ϯ
ϰ
Ś
Đ
Ŷ
Ğ
ď
ů
ƌ
Ğ
Ɖ
Ϭ
Ϭ
ϰ
͘
D


Ɛ
Ƶ
ƚ
Đ
Ă
Đ
͘
ϲ
ϯ
ϰ
Ě
ϯ
Ğ
ŝ
ů
Ɛ
Ğ
ů
͘
ϳ
ϯ
ϰ
Ě
ŵ
Ă
Ŷ
ϰ
ϰ
ϰ
͘
Ŭ
ŵ
ď
Ž
Ő
͘
ϱ
ϰ
ϰ
/
/
ů
Ă
Ğ
Ě
ϳ
ϰ
ϰ
͘
ů
ǆ
Ğ
Ɖ
Ž
Ɛ
͘
Ϭ
ϱ
ϰ
Ǉ
Ă
ƌ
ǀ
Ž
Ɖ
ϯ
ϱ
ϰ
͘
ǆ
ŝ
ů
Ƶ
Đ
ů
Ă
Đ
͘
ϰ
ϱ
ϰ
ƌ
Ğ
ŵ
ŵ
Ś
ϲ
ϱ
ϰ
͘
Ő
Ŷ
Ğ
ũ
Ɛ
͘
ϴ
ϱ
ϰ

d

&
Ɛ
ŵ
Ğ
'
ϵ
ϱ
ϰ
͘
^WWhϮϬϬϲĞŶĐŚŵĂƌŬƐ
^ƚƌĂƚĂ
/>Z
/>Zн
ŵ
Ƶ
ƚ
Ŷ
Ă
Ƶ
Ƌ
ď
ŝ
ů
͘
Ϯ
ϲ
ϰ
ŵ
ď
ů
͘
Ϭ
ϳ
ϰ
Ž
ƚ
Ŷ
Ž
ƚ
͘
ϱ
ϲ
ϰ
Ĩ
Ğ
ƌ
ϰ
ϲ
Ϯ
Ś
ϰ
ϲ
ϰ
͘
Ɖ
Ɖ
ƚ
Ğ
Ŷ
ŵ
Ž
ϭ
ϳ
ϰ
͘
Ĩ
ƌ
͘
ǁ
ϭ
ϴ
ϰ
ƌ
Ă
ƚ
Ɛ
Ă
͘
ϯ
ϳ
ϰ
Ğ
Ő
Ă
ƌ
Ğ
ǀ

ŝ
ϯ
ǆ
Ŷ
Ś
Ɖ
Ɛ
͘
Ϯ
ϴ
ϰ
Ŭ
ŵ
ď
Đ
Ŷ
Ă
Ă
ǆ
͘
ů
ϯ
ϴ
ϰ
Ɛ
ƌ
Ğ
ŝ
ů
ƚ
Ƶ
Ž
Ž
ͬ
ǁ

Figure 11.
Performance overhead of ILR and ILR+, along with the average overhead and the average without the 453.povray and 481.omnetpp
benchmarks. With an average overhead of only 16% and 13%, most applications could be reasonably protected by our ILR or ILR+ prototypes. Further,
ILR overhead could be reduced to that of basic virtualization, at only 8%.