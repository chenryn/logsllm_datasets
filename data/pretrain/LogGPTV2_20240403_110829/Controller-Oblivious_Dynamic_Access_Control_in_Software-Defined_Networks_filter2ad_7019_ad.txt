on the ﬁrst packet of a ﬂow (Time to First Byte, or TTFB).
All packets after the ﬁrst will be handled by ﬂow rules in the
switches, so this latency characterizes the primary impact of
reactively installing SDN ﬂow rules, as in DFI, on network
trafﬁc. The TTFB also effectively bounds the speed at which
users can query network services and receive a response. We
measure TTFB as a function of load on the network in order to
characterize any degradation when the control plane becomes
saturated. To do this, we perform a TCP connection from an
end host and measure the time between sending the SYN
and receiving the SYN-ACK; simultaneously, randomized
Ethernet packets are sent into the data plane at varying rates
as background trafﬁc. Note that these TTFB measurements
include the time for DFI and the SDN controller to process
the ﬂow in both directions.
Figure 4 depicts how TTFB varies as a function of the load
the same fundamental issue: systems are overly privileged and
dynamic signals exist that indicate when these privileges could
be reduced.
To simulate the threat of self-propogating malware, like
NotPetya and WannaCry, we constructed a surrogate of the
NotPetya malware (henceforth,
the “worm”) based on its
propagation logic (see [37], [38]) to see how various access
control policies reduce the spread of the infection.
At
the start of the attack, we assume the worm has a
foothold on one end host in the network. Once installed, it
gathers a target list of end hosts and servers in the network
through reconnaissance, and then tries to propagate to each
target serially in a loop. The worm uses two vectors for
propagation: exploitation of vulnerabilities on a target end host
and credential theft. The exploit payload is sent ﬁrst. If the
exploit succeeds, the worm moves on to attacking the next
target in the list. If it fails, the worm uses credentials cached
on the local host to attempt to access the target remotely
and install itself. A credential with “Local Administrator”
privileges on the target must be cached on the source host for
this to succeed. After looping through all targets, the worm
waits three minutes before restarting. This proceeds over a
duration of 10-60 minutes (randomly chosen) before the worm
times out and stops propagating, as NotPetya does.
The goal of the threat is to spread to as many hosts as
possible before the propagation times out, with no targets
being more valuable than others. The target list is shufﬂed
randomly on each infected host. We assume control-plane
hosts are protected from reconnaissance by hosts in the SDN,
and are therefore beyond the scope of this threat.
Network Testbed. In this study, our testbed is modeled
after a small, operational enterprise network. It is built with
VMware vSphere and includes 86 Windows 10 VMs acting
as end hosts and 6 Windows server VMs supporting common
enterprise services (e.g., email, web proxy, ﬁle server). The
data plane includes 14 OpenFlow switches implemented on
CentOS 7 VMs with Open vSwitch 2.5.4, and 2 CentOS VMs
running the OpenFlow control plane (ONOS 1.13 controller
and DFI Proxy) and the DFI control-plane components. The
network topology is a star, with a single core switch and
13 enclave switches internally connected to it. Nine of the
enclaves support operational departments, with 9 hosts in each,
while the remaining enclaves host servers and an smaller
department with ﬁve hosts. One end host in each enclave
(10/86 total) is conﬁgured to be vulnerable to the worm
exploit, which falls within a typical range for patch compliance
by organizations as previously reported by Symantec [39]. In
addition, all servers are vulnerable in order to give them a
vector for transmitting the worm, since they are otherwise
defended against credential theft by conﬁguration.
Users for the testbed end hosts are managed by an AD
server in the data plane. Each end host has one unique, primary
user, but other users in the same enclave (department) group
have “Local Administrator” privileges on the host. Servers in
the testbed have no primary users, and therefore no cached
credentials. Log-on and log-off events for users on their
Fig. 4: Time to First Byte (TTFB) for new ﬂows at different
ﬂow arrival rates. The dashed line indicates the point where
DFI’s queue begins to saturate and drop ﬂows. Error bars show
±1 standard deviation (σ) up until the saturation point, after
which the standard deviation is high.
on the network, both with and without DFI in place. Without
DFI, the TTFB is nearly constant at 4-6ms. While the SDN
controller eventually becomes overloaded and queues packets,
this occurs at signiﬁcantly higher loads than we measure.
With DFI, the TTFB starts at about 22ms and rises to about
85ms at 700 ﬂows/sec. At higher rates, DFI begins to queue
new ﬂows waiting for binding or policy query responses,
leading to the high variation observed above 800 ﬂows/sec.
The mean TTFB plateaus around 200ms because DFI has
a limited queue size; ﬂows arriving when the queue is full
are dropped and must re-enter the DFI control plane upon
retransmission. This saturation point suggests that DFI can
support small enterprises since existing work [35], [36] has
used 10 ﬂows/sec/device (or 1000 ﬂows/sec total) as a typical
enterprise workload level. Scaling up could be achieved using
multiple DFI Proxy and PCP instances.
B. Security Evaluation
We evaluate potential security beneﬁts that a ﬁne-grained,
event-driven access control policy system like DFI can provide
using a case study with self-propagating malware. We consider
a scenario where the malware infects a foothold in a small
enterprise network, and then tries to spread across the network
over the course of a business day.
Threat Model. We consider a threat model where the
SDN controller, switches, and core network services (DNS,
DHCP, etc.) are secure and not compromised and end hosts
are traditional enterprise desktops that are always on and
connected to the network with users logging on and off
throughout the day. These desktops may become infected by
an automated worm that would attempt to infect and destroy as
many machines as possible. This threat model is motivated by
the recent resurgence of self-propagating malware, such as the
NotPetya and WannaCry ransomware. While our discussion in
the rest of this paper is focused on this threat model, we believe
that other scenarios (wireless devices, BYOD devices) share
01002003004005006007008009001000Background Traffic (flows/s)050100150200Mean Time to First Byte (ms)=242.6=462.8=481.4DFINo DFI(a) Infections from a self-propagating malware under different net-
work conditions.
(b) The impact of an infection using the AT-RBAC policy with DFI
are conditioned on time.
Fig. 5: Results of DFI-enabled Policy on Testbed Infections
primary host are simulated over the course of the day, each
being randomly assigned a unique time-series “script” that
establishes when the user is logged on or off. These scripts
were created by the authors based on a sample of their host
interactions during the day, and form an anecdotal scenario for
how the testbed network might be typically used. Each script
contains at least two hours of being logged on during the ﬁrst
half of the work day (between 09:00-13:00). The randomized
script assignment is reused between conditions.
Conditions. We evaluate a scenario where one end host in
a departmental enclave becomes an infected foothold during
the course of a business day. Each end host in the testbed
simulated a unique authentication script that was randomly
chosen and ﬁxed between test iterations. We evaluate how the
worm spreads when the foothold occurs at start of each hour
in the day, under three policy conditions:
First, we consider a baseline condition of a fully-connected
network with no access control. All trafﬁc is allowed between
hosts in the SDN.
Second, we consider DFI with static, role-based network
access control (S-RBAC). In S-RBAC, access control is con-
ﬁgured statically, indeﬁnitely letting a host communicate with
others within a logical enclave based on its role needs. In
our implementation of S-RBAC, we install rules that allow
incoming and outgoing ﬂows for each host to: 1) all hosts in
its own enclave, and 2) each of the servers for operational
needs.
Finally, we consider a policy that
is uniquely enabled
by DFI called authentication-triggered, role-based network
access control (AT-RBAC). In AT-RBAC, DFI enforces an
access control policy that is speciﬁc to the user logged onto
an end host. Role-based access for the user is allowed only
after she authenticates and access is revoked upon logging
off. When there is no user, ﬂows are allowed only for a
small set of services needed to authenticate (i.e., DHCP,
DNS, AD). We expect AT-RBAC to slow the worm when not
all hosts have logged-on users, which is typical in realistic
networks. In DFI’s implementation of AT-RBAC, a sensor in
the SDN detects authentication events from users on end hosts
and sends them to the control plane. Seeing these events, a
Policy Decision Point created for this policy sends or revokes
commands (for log-on and log-off events, respectively) to/from
the Policy Manager that allow the host incoming and outgoing
ﬂows for a role-based set, including: 1) all hosts in its own
enclave, and 2) each of the servers.
Results and Discussion. In summary, the AT-RBAC policy
uniquely enabled by DFI leads to fewer overall infections and
a slower infection rate compared to the other policies. Given
that the simulated user activity ensured morning activity on
all hosts, the scenario probably demonstrates a conservative
estimate of the beneﬁt in a typical network. This slowdown
could provide additional time for an incident response team
to be notiﬁed and isolate infected hosts.
Results from the foothold starting at 09:00 represent how
the policies slow the threat at
the start of a work day.
Figure 5a shows the ﬁrst hour of the 09:00 infection for all test
conditions. In the baseline condition with no access control,
the ﬁrst infection occurs after 1 second, and all end hosts
and servers are infected after 2 minutes. In S-RBAC, the ﬁrst
infection does not occur until after 2.5 minutes. Initial attempts
by the foothold to reach other hosts fail because the ﬁrst targets
exist in other logical enclaves, and are therefore denied by the
role-based policy. The infection progresses after a server is
infected and can transmit the worm to other enclaves, leading
to full network infection after 25 minutes. In AT-RBAC, the
ﬁrst
infection again takes 2.5 minutes due to the enclave
RBAC, as in the S-RBAC condition. However, infecting other
enclaves is slower than in S-RBAC: once a server is infected,
it can only succeed at reaching a target host if that host
has a logged-on user. As such, the worm’s targets become
“moving targets” whose reachability changes over time based
on end-host usage. It takes the worm 40 minutes to infect
83 of the 92 hosts, with the worm propagation stopping (i.e.,
ransomware “lock down”) before it infects all hosts. After
a post-hoc review, we determined that one enclave was not
infected because its vulnerable host was not logged into until
10:46 – after all other infections had timed out.
Figure 5b illustrates how AT-RBAC, which is conditioned
0102030405060Minutes After Initial Infection (09:00)020406080100# of Infected HostsAll Hosts in SDNNo Access ControlS-RBAC (enclaves)DFI with AT-RBAC0:002:004:006:008:0010:0012:0014:0016:0018:0020:0022:00Time of Initial Infection (HH:MM)020406080100Total Hosts InfectedAll Hosts in SDNon log-on and log-off events, provides a greater beneﬁt when
these events are sparse. In this scenario, the simulated log
activity dwindles outside of usual business hours, and a
foothold infected during this time cannot spread its infection
before the worm times out. This is in strong contrast with S-
RBAC or the baseline conditions, where infections initiated
at any hour follow the same course as the 09:00 foothold
demonstrated in Figure 5a, infecting of all hosts.
The scenario illustrates a beneﬁt of access control ap-
proaches that make permissions dynamic over time, which
is what DFI is designed to support. Both S-RBAC and AT-
RBAC policies slow the rate of infection because it cannot
spread directly from an end host into another enclave besides
the servers. Yet, static policies like S-RBAC leave the network
more vulnerable than is necessary during times when hosts
can be effectively disconnected without impacting network
operations, e.g., outside work hours. These hours with no
users represent the best case for AT-RBAC – ﬂow rules are
so restrictive that the foothold is isolated. In the worst case,
AT-RBAC is equivalent to S-RBAC when all hosts have users
logged on, but this is unlikely to last indeﬁnitely in typical
enterprise networks where users log on and off regularly.
VI. RELATED WORK
As discussed in Section II, traditionally network access
control has been highly static, focused on curated lists of
ﬁrewall rules. Even approaches with a dynamic access-control
check, like IEEE 802.1x [1] and products like Cisco Network
Admission Control (NAC) [40] and Microsoft Network Access
Protection (NAP) [41], conduct a single check before allowing
coarse-grained access to the entire network. In contrast, DFI
provides dynamic, per-ﬂow access control via policies that are
conditioned on network events, in place of static rules that may
be overly permissive at times.
Software Deﬁned Perimeter (SDP) technologies [12], [42]–
[44] assume that most network assets are untrusted and thus
users should authenticate to every server for which they need
access. This is implemented at the application layer using
application proxies; however, the lower-layer network remains
static, with broad reachability. DFI differs by enforcing policy
at Layer 2, dynamically limiting reachability at a lower level.
Unlike traditional networks, SDNs are designed to be cen-
trally and programmatically controlled, providing an oppor-
tunity for improved access control techniques. Ethane [45]
enforces access control at the per-ﬂow level and enables policy
speciﬁed with higher-level identiﬁers, as in DFI. However,
the policies it uses to create ﬂow rules are essentially static
and do not adapt
to events that might otherwise inform
policy decisions. Similarly, FLOWGUARD [46] is a framework
to detect and resolve conﬂicts in SDN ﬁrewall rules when
the network state changes, but the intended ﬂow policy is
fundamentally static.
Precise Security Instrumentation (PSI) [47] leverages SDN
to steer trafﬁc to middleboxes providing varying levels of
processing and inspection based on anomalous trafﬁc features.
PSI is capable of implementing a variety of expressive policies,
much like DFI. However, it focuses on policies for trafﬁc
inspection and routing, while DFI provides the ability to
dynamically adapt the network’s access control to ongoing
events. Additionally, PSI is controller-based, while DFI oper-
ates outside the controller to mitigate policy-bypass concerns.
PIVOTWALL [48] combines SDN with information-ﬂow
control, enabling novel policies in the network. Using taint
tracking, an end-host agent
tags administrator-labeled re-
sources as sensitive, and then alerts the SDN controller about
ﬂows initiated by tainted processes. The controller maintains
a Network Information Flow Graph that is used to enforce
information-ﬂow control policies. These end-host events rep-
resent possible policy events for DFI PDPs, but DFI is aimed at
a more general architecture and enables access control policy
enforcement separated from, and with priority over, controller