### 6.2.4 Efficiency of Primitives Assembly

Table 4 presents the results of the heap layout primitives assembly process. Column 2 lists the total number of available primitives, which differs from the number of symbolized paths in Table 3. MAZE analyzes the semantics of each symbolized path and removes those that cannot be used as primitives. Additionally, it examines the size of heap operations, potentially generating multiple primitives for a single symbolized path with varying allocation sizes. As shown in the table, MAZE successfully identified at least two primitives for all 16 programs.

Some primitives may involve more than one allocation and deallocation. These extra (de)allocations, referred to as noise, can complicate heap layout manipulation, as discussed in previous work such as SHRIKE and Gollum. Column 3 indicates the average number of noises in these primitives.

Column 4 shows the number of heap layout constraints that need to be satisfied. Eight programs have one constraint, typically associated with Use-After-Free (UAF) or double free vulnerabilities, requiring the placement of one object at a specific location. The other eight programs, which have buffer overflow vulnerabilities, require two constraints to place both the vulnerable and victim objects at appropriate locations. The remaining two programs require three object constraints to facilitate unlink attacks.

The last three columns detail the time costs, including:
- **D.a.F Time**: Time used by the Dig & Fill algorithm for distance evaluation and equation solving.
- **POC Time**: Time for vulnerability analysis and instrumentation points analysis.
- **Constraint Solving Time**: Time for satisfying the final edited path.

All steps are relatively fast, except for the constraint solving step, which can be challenging due to issues like loops and symbolic addresses in symbolic execution.

### 6.3 PHP Benchmarks

To compare MAZE with existing solutions like Shrike and Gollum, we evaluated its performance on PHP, a real-world target. We selected PHP version 7.0.4, which contains five known vulnerabilities. The evaluation results are summarized in Table 5.

As shown in the second column, MAZE outperforms Shrike and Gollum in terms of speed. MAZE solved all benchmarks in 68 seconds, with an average time consumption of only 27 seconds. Shrike took 300 seconds to solve 25% of the benchmarks and over 3000 seconds to solve 60%. Gollum solved 75% in 300 seconds and 85% in over 2500 seconds.

Moreover, MAZE successfully solved all benchmarks, while Shrike and Gollum had lower success rates of 60% and 85%, respectively. Further analysis revealed that Shrike and Gollum often failed due to noise in heap primitives. For example, in CVE-2016-7126, the source buffer size of 0x20 caused many noisy objects, reducing the success rate. MAZE uses Linear Diophantine Equations to bypass this noise problem, even when all primitives have at least one noise.

Additionally, Shrike and Gollum require templates provided by security experts to guide memory allocations and deallocations, whereas MAZE is fully automated. It can analyze the Proof of Concept (POC), determine the layout state, and identify suitable instrumentation points for fill or dig operations.

### 6.4 Python and Perl Benchmarks

To further evaluate MAZE's effectiveness, we tested it on Python and Perl. We selected 10 vulnerabilities in these languages and presented the results in Table 6. Compared to Gollum, MAZE supports both Python and Perl, extending its application scope. MAZE generated expected heap layouts for all vulnerabilities and was significantly faster, solving all benchmarks in 118 seconds for Python and 141 seconds for Perl.

### 6.5 Synthetic Benchmarks

We conducted synthetic benchmarks to flexibly and scalably evaluate the Dig & Fill algorithm and identify factors influencing its performance. To compare with other algorithms, we extended SHRIKEâ€™s benchmark with modifications to adapt it to MAZE.

#### 6.5.1 Benchmark Setup

We tested various parameters that could affect the success rate of heap layout manipulation:
- **Noise Number**: The minimum amount of noise operations in each primitive.
- **(De)allocation Primitives Count**: The number of randomly generated primitives for heap (de)allocation, representing the diversity of primitives.
- **Size List**: The diversity of allocation operation sizes in a primitive, with adjustable selection probabilities.
- **Mix of Allocation and Deallocation**: The relative rate of heap allocation and deallocation in a primitive. If set to None, each primitive can only contain allocations or deallocations, but not both.

#### 6.5.2 Evaluation of One-Object Layout Constraint

We first evaluated the one-object layout constraint, as multi-object constraints can be transformed into multiple one-object constraints.

**Factors Influencing Success Rate:**
SHRIKE demonstrated that noise impacts the success rate, with a single noisy allocation reducing the success rate to 50% across all allocators. However, as discussed in Section 5, the diversity of heap layout primitives is the primary factor influencing the success rate of Dig & Fill, not the number of noises. We confirmed this through experiments.

**Influence of Noise Count:**
We evaluated the success rate of Dig & Fill using primitives with different noise counts. The noise number ranged from 2 to 7, and the results are shown in Figure 6.

**Multi-Object Layout Constraint Evaluation:**
Table 8 summarizes the results for multi-object layout constraints. The success rate and time required for different object counts are as follows:

| Target | Object Count | Time (s) | Success Rate |
|--------|--------------|----------|--------------|
| PT     | 2            | 73.1     | 98.0%        |
| PT     | 3            | 95.2     | 98.0%        |
| PT     | 4            | 145.6    | 98.0%        |
| PT     | 5            | 238.8    | 98.0%        |

These results demonstrate the robustness and efficiency of MAZE in handling complex heap layout constraints.