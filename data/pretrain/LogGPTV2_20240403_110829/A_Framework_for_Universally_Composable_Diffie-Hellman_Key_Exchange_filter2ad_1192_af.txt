receives a group (G, n, g) in response which is used for the
|F(cid:2)
key-use
crypto.
simulation of Fcrypto. S then asks the environment for the
cryptographic algorithms and forwards them to F(cid:2)
If F MA
key-use indicates that a user (pid , lsid , r ) has started
a key exchange, S does the same in its internal simulation.
If an uncorrupted initiator (pid I , lsid I , I) accepts a group
element gy and outputs a pointer to a session key, then S
instructs F MA
key-use to create a session from (pid I , lsid I , I) and
the instance (pid R, lsid R, R) that created the signature in the
second protocol message. The subroutine F(cid:2)
crypto of F MA
will then ask S to provide the value for the session key;
key-use
S provides the same value that is used in its simulation
as session key. Finally, S instructs F MA
key-use to output the
session key pointer for (pid I , lsid I , I). If an uncorrupted
instance (pid R, lsid R, R) outputs a pointer to a session key,
S instructs F MA
key-use to output the session key pointer for
(pid R, lsid R, R). While a session key is used, the simulator
may be asked by F(cid:2)
crypto to provide new unknown keys (e.g.,
when deriving keys). In this case, S simulates the same
operation in Fcrypto and forwards the keys to F(cid:2)
crypto. If S
is notiﬁed that some instance (pid , lsid , r ) has closed its
session, S updates the internal simulation accordingly and
responds with OK. S uses the internal simulation to process
inputs/outputs for/from corrupted instances.
We now show that S is a good simulator. As explained
in Section III-B, due to the use of restricting messages, we
can conveniently assume that all operations performed by
Fcrypto are atomic, without any side effects on the machines
MI or MR. This simpliﬁes the overall proof.
First, observe that S keeps the key sets of Fcrypto and
crypto “synchronized”, i.e., the set of keys of F(cid:2)
F(cid:2)
crypto is a
subset of all keys of Fcrypto and all keys in F(cid:2)
crypto have the
same known/unknown status in Fcrypto. This is easy to see,
as the simulator provides all unknown keys for F(cid:2)
crypto while
it is not possible for the environment to insert any known
keys. As both key sets are synchronized, F(cid:2)
crypto will accept
all keys that have been accepted by the internally simulated
Fcrypto and thus the environment cannot use the freshness
check on new keys to distinguish real from ideal world.
The following argument is split into four cases, for which
we argue that the simulation is perfect: Honest initiator
instances during key establishment, honest responder in-
stances during key establishment, honest instances after key
establishment, and corrupted instances.
Let (pid I , lsid I , I) be an uncorrupted instance of MI that
wants to establish a session with party pid(cid:2)
. It is easy to
see that the simulator can perfectly simulate the behavior
of such an instance up to the point when it outputs a key
as the behavior does not depend on any data present in
crypto. In particular, honest instances will use Fcrypto only to
F(cid:2)
create/verify signatures, and exchange Difﬁe-Hellman keys;
both of these operations are unavailable in F(cid:2)
crypto and thus
can separately be simulated by S.
We have to argue that S ﬁnds an instance of a responder
that can be paired with (pid I , lsid I , I): If (pid I , lsid I , I)
893
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
, lsid(cid:2)
, lsid(cid:2)
, lsid(cid:2)
, say (pid(cid:2)
outputs a session key pointer, then it must have accepted
the second message of the ISO protocol and the signing
key of its intended partner pid(cid:2)
must still be uncorrupted
(otherwise,
the protocol would block according to our
modeling of corruption). Hence,
there is some instance
belonging to pid(cid:2)
, lsid(cid:2)
, r(cid:2)), that has signed the
message m = (gx, gy, pid I ), where x is the secret ex-
ponent of (pid I , lsid I , I) and y is the secret exponent of
(pid(cid:2)
, r(cid:2)). This instance is uncorrupted: On the one
hand, it cannot be explicitly corrupted by the adversary
as the party pid(cid:2)
is still uncorrupted. On the other hand,
as (pid(cid:2)
, r(cid:2)) considers pid I to be the partner of the
key exchange (which is acknowledged in the signature),
we know that (pid(cid:2)
, r(cid:2)) also does not consider itself
corrupted due to corrupted signing keys. Next, we argue
that this instance is a responder, i.e., r(cid:2) = R: If it were
an initiator, then the signed message m would imply that
this instance received and accepted the second protocol
(cid:2) = (gy, gx, pid(cid:2)) signed
message containing a message m
by an uncorrupted instance of pid I, where x is the se-
cret exponent of the instance of pid I. However, as x/gx
is created ideally, there is only one honest instance that
would sign such a message, namely (pid I , lsid I , I), which
does not output any signatures before accepting the second
message. This implies r(cid:2) = R. We still have to show that
, r(cid:2)) was not yet assigned to a session by S:
(pid(cid:2)
The simulator pairs (honest) responder instances with those
(honest) initiator instances that accept the second message,
but as x/gx is unique, the only honest initiator instance that
accepts this message is (pid I , lsid I , I). Hence, we have that
(pid(cid:2)
, r(cid:2)) is not yet part of a global session and can
be paired with (pid I , lsid I , I). Finally, observe that both
x/gx and y/gy have been created ideally (with x (cid:6)= y)
and thus the key derived from them will be considered
unknown in Fcrypto. The simulator can provide the exact
same key from the simulation to F(cid:2)
crypto as the key sets are
synchronized. Note in particular that only (pid I , lsid I , I)
and (pid(cid:2)
, r(cid:2)) can get a pointer to this key, which
matches the behavior of F MA
, lsid(cid:2)
, lsid(cid:2)
, lsid(cid:2)
key-use.
The remaining cases are similar. We provide them in
Appendix B.
By Theorem 2, we can now replace Fcrypto by its real-
ization Pcrypto which yields that the ISO protocol (when
using the actual cryptographic operations) is a universally
composable mutual authenticated key exchange protocol.
let Fcrypto,
Corollary 1. Let MI,MR as deﬁned above,
Pcrypto, and F∗ as in Theorem 2, in particular, we have
that Pcrypto ≤R Fcrypto and F∗ enforces well-behaved envi-
ronments. Then the following holds true:
F∗ | MI | MR |Pcrypto ≤R F∗ |F MA
Proof: This statement follows easily from Theorem 1,
Theorem 2, Theorem 3, and transitivity of the ≤R relation
key-use |Fcrypto.
A
gx
B
gy,{B, SIGB(gx, gy), MACkm
{A, SIGA(gy, gx), MACkm
(B)}ke
(A)}ke
Figure 2. The SIGMA protocol with identity protection. The keys ke and
km are derived from gab, where ke is used to encrypt and km is used
to mac messages during the key exchange. Another key ks is also derived
from gab and used as session key.
as well as the fact that the machines MI and MR constitute
a well-behaved environment when combined with F∗ and
any another environment E: corrupted instances do not
have access to unknown keys, so they cannot violate the
well-behaved property. Uncorrupted instances during the
key usage phase are well-behaved due to F∗. Uncorrupted
instances during the key establishment phase can violate
the well-behaved property only by causing the commitment
problem for Difﬁe-Hellman keys, i.e., set an unknown ex-
ponent to known after it was used to create an unknown
key. This case does not occur as exponents are never
accessed/used after one key has been created with them.
B. SIGMA Protocol
The SIGMA protocol with identity protection [22] is
depicted in Figure 2. Unlike the ISO protocol, it uses the
exchanged DH key to derive three other keys, two of which
are used during the key exchange to ensure authentication
and conﬁdentiality of party IDs, while the third is used as
session key.
We model the SIGMA protocol analogously to the ISO
protocol. We use unauthenticated encryption to encrypt
messages in the protocol; authenticated encryption is not
necessary. The following theorem states that the SIGMA
protocol is a secure universally composable mutually au-
thenticated key exchange protocol.
Theorem 4. Let MI and MR be the machines modeling the
SIGMA protocol, let Fcrypto and F(cid:2)
crypto be two versions of the
ideal crypto functionality with the same parameters, and let
F MA
key-use be the ideal functionality for mutually authenticated
key exchanges with parameter tkey = unauthenc-key. Then
the following holds true:
MI | MR |Fcrypto ≤R F MA
key-use |F(cid:2)
crypto.
We provide the proof of this theorem in our technical
report [24]. Again,
it does not need any reductions or
probabilistic reasoning. Just as for the ISO protocol, by
Theorem IV-A we can replace Fcrypto by its realization
Pcrypto.
let Fcrypto,
Corollary 2. Let MI,MR as deﬁned above,
Pcrypto, and F∗ as in Theorem 2, in particular, we have
894
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:26:54 UTC from IEEE Xplore.  Restrictions apply. 
A
chello, gx
shello, gy,{SIGB(gy), sﬁn}ke
B
The 1-RTT non-static mode of OPTLS. Both chello and
Figure 3.
shello are arbitrary bit strings that are exchanged during the protocol
(they can be used to negotiate parameters for a higher level protocol).
The message sﬁn is a MAC on the whole key exchange, i.e., sﬁn =
MACkm (chello, gx, shello, gy, SIGB(gy)). The keys ke (for encryption),
km (for MACing) and the session key ks are derived from the DH key
gxy as shown in Figure 4.
shello “0”
chello “0”
gxy
HKDF
gxy
HKDF
ke

HKDF
ks
km
Figure 4. Key derivation in the 1-RTT non-static mode of OPTLS. HKDF
[32] is a key derivation function that takes as input a key (arrows on the
left), context information (upper left arrows), and a salt (upper right arrows).
It outputs a variable number of keys (bottom arrows).
that Pcrypto ≤R Fcrypto and F∗ enforces well-behaved envi-
ronments. Then the following holds true:
F∗ | MI | MR |Pcrypto ≤R F∗ |F MA
key-use |Fcrypto.
C. OPTLS
The OPTLS protocol family [23] speciﬁes several key
exchange protocols with unilateral authentication. It was
built to meet the speciﬁc requirements of TLS 1.3 for key
exchange; a slightly modiﬁed version was included in draft-
09 of TLS 1.3 [31]. In Figure 3, we show the so-called
non-static mode of OPTLS. Unlike the ISO and SIGMA
protocols, OPTLS also speciﬁes the exact key derivation
procedure, which we depict in Figure 4.
We model OPTLS in the same way as the ISO and
SIGMA protocols, but with the following changes: The
machines MI and MR execute the protocol from Figure 3 to
exchange a key. Instances of responders do not specify an
intended session partner at the beginning (as the protocol
does not authenticate the initiator to the responder) and
thus also do not consider themselves to be corrupted if
their session partner is corrupted. We use the optional bit
(cid:2), which is part of the InitKE message expected by
string m
F UA
key-use, to provide instances of MI with the chello message,
and instances of MR with the shello message.
We model HKDF via the Derive command of Fcrypto.
As Fcrypto provides a single argument for key derivation, we
concatenate both context information and salt and use the
resulting string as salt for Fcrypto. This models that HKDF
should provide independent keys if either salt or context
information is changed. Another technical difference is that
HKDF outputs a variable number of keys, while Fcrypto
outputs a single key for every salt. It is easy to extend Fcrypto
to also support deriving multiple keys from a single salt and
then realize it with a secure variable length output PRF.
Nevertheless, for simplicity, we use the current formulation
of Fcrypto and instead call the Derive command twice to
obtain two keys. Formally, we use two different salts which
are obtained by preﬁxing the original salt with 0 or 1,
depending on whether the ﬁrst or second key is derived.
Surprisingly, OPTLS does not realize F UA
key-use. To see this,
consider the following setting: an honest initiator outputs a
session key which was generated from its own DH share gx
and the responders DH share gy. The responder instance that
signed gy might have received a different group element, say
h (cid:6)= gx, in the ﬁrst protocol message. If h was not honestly
generated by Fcrypto, then y will be marked known after
the calculation of hy because the DDH assumption does not
guarantee that an attacker learns nothing from y in this case.
As y is marked known, the key gxy and all keys derived from
it will also be marked known. Thus, we have no security
guarantees for the MAC and an attacker can easily let the
initiator instance accept, even though there is no instance of
a responder that can be paired with it (the responder that
signed gy outputs a different session key).
We note that
this is not a direct attack against
the
protocol but rather shows that assuming hardness of DDH
and security of the PRF family is not sufﬁcient to prove
the security of this protocol mode. Indeed, we found that
the original game-based security proof of this protocol
from [23] is ﬂawed: In the proof, where the authors use
the same cryptographic assumptions, gxy is replaced by
$← {1, . . . , n} during a hybrid argument (cf. game
gz, z
2). The authors claim that this can be reduced to the DDH
assumption. But a simulator in the reduction to DDH would