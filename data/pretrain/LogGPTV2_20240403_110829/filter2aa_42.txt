# Presentation: Pwn’ing your Cyber Offenders
**Presented by:**  
Piotr Duszynski  
[@drk1wi]  
© 2012

## About the Presenter
- **Senior Security Consultant at Trustwave** (OSCE, OSCP, ...)
- **6+ years in the security field**, hacking since 1999
- Enjoys security research, adventurous road trips, and good music
- Based in Warsaw, Poland

## Overview of the Presentation
This presentation will cover:
1. **Annoyance and Camouflage**: A new defensive technique that renders attackers' port scan results nearly useless.
2. **Active (Offensive) Defense**: New attack vectors against attackers' offensive tools.
   - **POC DEMO**: An example exploit for a well-known scanner.

## Active Defense in Practice
### To Blind Attackers' Tools
#### The Art of Annoyance and Camouflage

### Typical Reconnaissance Phase
- **Standard Case Scenario (Target System Behind a Firewall)**:  
  ```
  # nmap -sV -O portspoof.org
  ```

### Portspoof: Implementation of the Idea
- **Worst Case Scenario**: 
  - All 65535 ports appear to be open.
    - *Portspoof will bind to a single port.*
  - On every open port, there appears to be a service listening.
    - *Portspoof will dynamically generate valid service signatures (supports ~8000).*
- **Task**: Get a precise state of all running services.

### Spicing Up the Reconnaissance Phase with Portspoof
- **Worst Case Scenario (Target System Behind Portspoof)**:  
  ```
  $ nmap –sV -p - -PN portspoof.org
  ```
  - This will require a lot of patience!

### Scanning Statistics
- **65535 Open Ports (Services)**
- **~120 MB of Sent Data**
- **30682 Seconds (8.5 Hours)**
- And a few beers later...

### Hidden Message in the Results
- Somewhere in the results, you can find a hidden message.

### NMAP OS Identification Results
```
$ nmap –sV -O portspoof.org
```
- **Device Type**: General purpose
- **Running (JUST GUESSING)**: Linux 3.X (93%)
- **OS CPE**: cpe:/o:linux:linux_kernel:3
- **Aggressive OS Guesses**: Linux 3.2 (93%), Linux 3.0 (92%), Linux 3.0 - 3.2 (85%)
- **No Exact OS Matches for Host (Test Conditions Non-Ideal)**
- **Service Info**: Hosts: gTknkkuB, ouwH-rKWw, bWQnRo, ClFfHC, leLtAJg; OSs: Unix, Windows, Linux, Solaris, NetWare; Devices: print server, webcam, router, storage-misc, printer; CPE: cpe:/o:microsoft:windows, cpe:/o:redhat:linux, cpe:/o:sun:sunos, cpe:/o:novell:netware, cpe:/o:linux:linux_kernel

### AMAP Scan
```
$ amap -q portspoof.org 3000-3100
```

### Conclusions
- **SYN/ACK/FIN/... Stealth Scans Are No Longer Helpful!**
- **OS Identification Is More Challenging**
- **Forces the Generation of Huge Traffic Through Service Probes**
- **Frustrates and Forces Attackers to Perform Arduous Tasks**

### Security by Obscurity
- Mimicry in the natural environment is also a form of obscurity.

### Bypassing Portspoof
- **No Trivial Way to Detect False Signatures**
- **IP Fragmentation and Other Network Evasion Techniques Will Not Work**
- **Thread Pool Exhaustion (Full Connect TCP DOS)**:  
  ```
  $ nmap -sV portspoof.org (30 parallel instances)
  ~ 999/1000 ports were found as open
  ```
- **Anti-DOS Solutions**:
  1. Adjust Portspoof thread count and client/thread parameters.
  2. Use iptables mark rules and tc (traffic shaper).

### Portspoof Tool
- **User Space Software Running Without Root Privileges** (no kernel modules)
- **Binds to Just One Port per Instance (127.0.0.1:4444)**
- **Configurable Through Iptables**:
  ```
  -A PREROUTING -i eth1 -p tcp -m tcp --dport 1:65535 -j REDIRECT --to-ports 4444
  ```
- **Marginal CPU/Memory Usage** (even while handling heavy and multiple scans)
- **Over 8000 Dynamic Service Signatures**

### Active (Offensive) Defense in Practice
- **Exploiting Your Attackers' Tools**
- "The best defense is a good offense" - Sun Tzu (The Art of War)

### Automated Exploitation Through Nmap
- **Interesting Injection Points Through NMAP Service Probe Engine**:
  - Version fields
  - Hosts fields
- **Example Command**:
  ```
  ./portspoof –f fuzz_payloads –n fuzz_nmap_signatures
  ```

### Open Source Reporting Tool: XSS Example
- **Nmap Report Generation Tool (Anonymous)**
- **Tip**: Safari's 'Same Origin Policy' for file URIs doesn't work.
- **Regards to Michele Orru!**

### Commercial Port Scanner: Non-Nmap XSS Example
- **Report Generation Tool (McAfee SuperScan 4.0)**
- **XSS Payload**: Partially UTF-7 encoded without parenthesis

### Public Exploit Script: OS Command Injection Example
- **Lotus CMS 3.0 eval() Remote Command Execution Exploit**
- **Portspoof Exploiting Payload**: 80 "whoami\n"
- **Exploits' New Extra Output**:
  - Vulnerable code: $( cat “storage2” )
  - FAIL ----->

### Creating a Weaponized OS Command Injection Payload
- **One-Liner for /bin/bash**:
  ```
  /bin/bash\t-c\t{perl,-e,$0,useSPACEMIME::Base64,B64_perl_payload }\t
  $_=$ARGV[0];~s/SPACE/\t/ig;eval;$_=$ARGV[1];eval(decode_base64($_));
  ```
- **Use \t Instead of Spaces**
- **Use ‘Bash Brace Expansion’ to Address the Lack of Apostrophes**
- **Use Regex to Add Additional \t**
- **Import Missing Packages on the Fly and Execute Base64 Encoded Payload >:]**

### Exploits' New Extra Output
- **Vulnerable Code**: $( cat “storage2” )

### Cookie Injection Example
- **Code Snippet from an ‘auto_pwn’ Script**:
  ```
  cookie= `printf "GET /jmx-console/ HTTP/1.1\nHost: $1\n\n" | nc $1 $2| grep -i JSESSION | cut -d: -f2- | cut -d\; -f1`
  ```
- **Portspoof Exploiting Payload**: 80 "whoami\n"

### Blind Exploitation with Portspoof (aka Evil Honeypot)
- **Conclusions**:
  - Majority of exploits, reporting tools, and scanning software are exploitable with simple payloads.
  - Auto-PWN scripts are usually dumb (they try to exploit all ports).
  - To rule them all...

### In Hunt for Vulnerable Software
- **Use Your Google Skills** (previous examples were found in the top 10):
  - Search for .sh (~8000 results), .pl, etc.

### Official Nmap NSE PWN Demo

## Thank You!
### Contact Information
- **Portspoof URLs**: [http://portspoof.org/](http://portspoof.org/)
- **Mailing List**: PI:EMAIL
- **Git Repository (Including the Presented Exploits)**: [https://github.com/drk1wi/portspoof/](https://github.com/drk1wi/portspoof/)
- **Contact Me**:
  - Email: piotr[at]duszynski.eu
  - PGP Fingerprint: FCD2 B5DA 1AE2 056F 4AC8 901D 7258 7496 ECCD 36F3
  - Twitter: [@drk1wi](http://twitter/drk1wi)

© 2012