2. Debloating enforcement. The monitor is notiﬁed through
kernel instrumentation on (a) context switches to untrusted ap-
plications and (b) system call invocations by untrusted applica-
tions. On system call invocations by the untrusted application,
the monitor switches all kernel code pages to RESTRICTED,
based on the speciﬁc system call and application conﬁgura-
tion (generated in §7.2) to enforce debloating by allowing
only reachable code to execute.
3. Hardening enforcement. During the execution of RE-
STRICTED pages, a triggered UD2 signals that the kernel tried
to execute an unreachable or potentially reachable kernel
code. If the kernel tried to execute unreachable code, the mon-
SHARD	MonitorPotentially	reachableis	executedSHARD	MonitorShadow	stackis	emptyEnablehardeningReachablePotentially	reachableUnreachableHardenedCode	class	and	protectionControl-flowReturnIndirect	callDisablehardeningSHARD	MonitorTrapOtheritor terminates the application since such execution cannot
be legitimate. On the other hand, if the attempt was towards
a potentially reachable code path, SHARD enforces context-
aware hardening by (a) implementing an initial CFI check
using the CPU Last Branch Record (LBR) and (b) switching
the kernel-view to HARDENED (illustrated in Figure 6). The
initial CFI check ensures that the ﬁrst control-ﬂow transfer
from reachable to potentially reachable is valid.
4. Disabling hardening. Lastly, the monitor disables hard-
ening, i.e., switches from HARDENED code pages to RE-
STRICTED, when the system returns to the reachable code
from where it triggered the hardening (refer to the shadow
stack implementation in Figure 4).
Transparent and efﬁcient kernel-view switch.
The
SHARD monitor uses a VMX feature, Extended Page Tables
(EPT) [32], to achieve transparent and efﬁcient switching
between different versions of the kernel code pages. In partic-
ular, the monitor uses the EPT to redirect the guest memory
view of the system from one (host) physical page to another.
Since the kernel is huge and spans many code pages (e.g.,
2048 code pages in our Linux kernel), updating the EPT en-
tries individually for each page would be costly. Therefore,
SHARD updates the EPT at the page directory-level, i.e., 512
pages at once, to change the kernel-view. For efﬁciency, dur-
ing initialization, the SHARD monitor statically creates page
tables for each system call using the conﬁguration of each
application (generated in §7.2). Then, on system call invoca-
tions, the monitor updates the page directory entries to point
towards these already-crafted page tables.
LBR-based control-ﬂow integrity check. At an UD2-trap,
during the execution of RESTRICTED code pages, although
SHARD changes the code versions to HARDENED, the current
control-ﬂow transfer (that raised the trap) would be unpro-
tected without an additional check. In particular, while HARD-
ENED code page versions enforce CFI during their execution,
SHARD should enforce the same while the system transitions
from RESTRICTED to HARDENED versions.
Therefore, the SHARD monitor implements a custom CFI
check for such control-ﬂow transfers using the Last Branch
Record (LBR). In particular, the LBR stores information
about the 32 most recent taken branches by the processor [32].
The stored information includes the source and target ad-
dresses of the branches. Using this information, SHARD en-
sures that the control-ﬂow transfer’s target address is a valid
target for its source (using the CFG generated in §7.2-(a)). If
it is not, SHARD terminates the program, otherwise, switches
the RESTRICTED versions of the kernel’s code pages to their
HARDENED versions.
8
Implementation
SHARD’s implementation consists of a static analyzer, a dy-
namic proﬁler, an LLVM instrumentation pass, and a run-time
Component
Lines of code
Static analyzer
Dynamic proﬁler
Ofﬂine kernel instrumentation
Run-time monitor
Total
2047
171
822
1842
4882
Table 4: SHARD components’ lines of code.
monitor. Table 4 lists the lines of source code for each compo-
nent of the implementation. SHARD’s source code is available
at https://github.com/rssys/shard.
The static analyzer uses the two-layer type analysis algo-
rithm [42], which, to the best of our knowledge, is the current
state-of-the-art in kernel CFG generation. The analysis al-
gorithm divides indirect calls based on whether they load
function pointers from a struct or not. For the former case,
all call pointers loaded from a particular ﬁeld of a structure are
matched with all functions stored to that ﬁeld. Such functions
are identiﬁed using taint analysis. For the latter, the analysis
uses traditional signature-matching approach [54]. The static
analyzer resolves an indirect call site to 7 targets, on average,
in the kernel’s CFG. Using the CFG, we create and populate
control-ﬂow integrity target tables (refer to §7.3-(c)). On av-
erage, we require only two tables (i.e., a frame table and an
offset table) for each indirect call site in our kernel.
Furthemore, we wrote an LLVM-5 [41] instrumentation
pass to instrument the kernel and create different types of
code page versions (refer to §7.3). It supports the Linux kernel
v4.14 with modules built-in and can be extended to work on
any kernel that compiles to the LLVM IR (e.g., BSD). It can
also be extended to work for dynamically-loaded modules,
similar to prior work [30].
Finally, we implement the dynamic proﬁler (refer to §7.2)
and the run-time monitor (refer to §7.4) in the KVM mod-
ule. The run-time monitor reserves a random 400KB memory
region within the guest for shadow stacks. The reserved re-
gion should be conﬁgured based on the maximum number of
threads that the target program executes (i.e., 1KB for each
thread’s shadow stack). Note that SHARD also randomizes the
base of a shadow stack (on each hardening instance); hence,
an attacker must continuously guess the shadow stack’s lo-
cation, even if they guess the base address of the reserved
memory. Please refer to existing sources [24, 64] for a full
entropy analysis of randomization-based shadow stack pro-
tection, as well as its limitations and other approaches.
9 Security Evaluation
SHARD’s goal is to restrict the attacker capabilities to conduct
control-ﬂow hijacks by reducing the amount of kernel code
exposed and employing context-aware hardening through CFI.
Therefore, we quantify and provide an analysis of SHARD’s
attack surface in §9.1. Furthermore, we analyze the number
Figure 7: Attack surface reduction (debloating) across system calls. Numbers represent the assembly instructions available relative to the
native kernel for each system call. XY ZSHARD and XY ZAD refers to application XYZ running with SHARD and application-only (existing)
debloating respectively. AssortedSD refers to system call-only debloating using NGINX, Redis, and LTP workloads.
of ROP and JOP gadgets exposed by SHARD in §9.2. Finally,
we show how SHARD’s reduced attack surface and hardening
prevents actual kernel attacks in §9.3.
9.1 Attack Surface Reduction
SHARD restricts the attack surface to the reachable code. In
particular, SHARD disables the unreachable code at every
system call, while it hardens the potentially reachable code
through control-ﬂow integrity (CFI).
In the following, we show the attack surface in terms
of reachable assembly instructions. Furthermore, we com-
pare SHARD’s exposed attack surface against both existing
application-only kernel debloating (i.e., debloating at the level
of each application and not system call) and system call-only
debloating (i.e., debloating at the level of each system call
and not application).
Setup and methodology. We use two popular real-world
applications, NGINX [16] web server and Redis [17] key-
value store. To dynamically proﬁle these applications, we
used the ab [1] and redis-benchmark suites, respectively.
In particular, we used ab with a range of ﬁle sizes from 1KB
to 128KB and redis-benchmark with default settings.
We determine the attack surface of application-only ker-
nel debloating (NGINXAD and RedisAD in Figure 7) through
dynamic proﬁling of the test applications. Furthermore, to
estimate the attack surface of system call-only debloating
(AssortedSD in Figure 7), we calculate the upper bound of
the kernel code required for each system call by combining
the dynamic proﬁles of NGINX, Redis, and the Linux Test
Project (LTP) [40]. Note that our assorted workload might
not consider all kernel functions required by each system call,
however, we expect that it provides a good approximation.
Finally, we determine the attack surface of SHARD
(NGINXSHARD and RedisSHARD in Figure 7) by determin-
ing the reachable code at each system call through dynamic
proﬁling of the test applications.
Results. Figure 7 shows the number of instructions of as-
sembly code, differentiated by each system call invoked by
the test applications. Our analysis reveals that for half the
system calls, SHARD exposes between 0− 0.2% of assembly
instructions in the Linux kernel. Even in the worst case, only
4.87% of the kernel’s instructions are available to the attacker.
In contrast to SHARD, the coarse debloating employed by
previous (application-only) kernel debloating systems, reveals
a constant and large attack surface, which represents the cu-
mulative sum of all kernel code that an application requires
during execution. Furthermore, while system call-only de-
bloating alternative performs similar to SHARD for simpler
system calls such as setuid, dup2, which only execute a few
internal kernel functions, it performs much worse for more
complex system calls (e.g., read). The reason is that complex
system calls implement multiple functions, using many ker-
nel functions, most of which are not required by a speciﬁc
application.
9.2 ROP and JOP Gadget Analysis
This section analyzes the ROP and JOP gadgets exposed by
SHARD as well as system call and existing application-only
kernel debloating approaches. Similar to assembly instruc-
tions, SHARD only allows the attacker to construct ROP and
JOP gadgets using reachable code. Note that reduction in
ROP and JOP gadgets is not a comprehensive metric for reduc-
tion in attacks since a few gadgets are enough for meaningful
exploits [58,59]. Nevertheless, such analysis aids in SHARD’s
comparison with existing approaches [21, 31, 36, 46, 47, 50]
that also provide such gadget analysis.
Setup and methodology. The evaluation setup, methodol-
ogy, and applications are the same as §9.1.
Results. Table 5 shows the absolute number of ROP and JOP
gadgets exposed under all applications and debloating types
considered, across system calls. On average, SHARD shows a
reduction (compared to the native Linux kernel) of 149× and
geteuidumasksetrobustlistgetpidgetppidsettidaddressarchprctlrtsigactionsysinfosetsidsetgidsetuiddup2epollcreatecloseeventfd2setgroupslseeknewunamertsigprocmaskpipenewfstatepollctlgetcwdprlimit64prctlbrkfcntlmadvisertsigsuspendbindacceptlistenreadlinksetsockoptsocketpairaccept4writevrecvfrommmapmunmapconnectsendﬁle64pread64socketnewstatmprotectpwrite64mkdirgetdentscloneaccessioctlexitgroupopenatfutexepollwaitwriteread05101520AssemblyInstructions(%)NGINXSHARDRedisSHARDAssortedSDNGINXADRedisADNative kernel
NGINXAD
RedisAD
AssortedSD
NGINXSHARD
RedisSHARD
Min
Max Median
Avg
339017
339017
339017
339017
33614
32090
0
0
0
33614
32090
67260
16689
14605
33614
32090
8783
440
519
33614
32090
15757
2273
1854
Factor
1×
10×
11×
22×
149×
183×
Table 5: ROP and JOP gadgets exposed by SHARD and other ap-
proaches across system calls. Only systems that specialize across
system calls have non-constant values. All numbers were obtained
using the ROPGadget tool [12]. Factor refers to the ratio between
the native kernel and the system average.
183× considering NGINX and Redis, respectively, which is
an order of magnitude better than existing application-focused
and system call-only debloating.
9.3 Attack Evaluation and Analysis
This section describes how SHARD prevents control-ﬂow hi-
jacks, which require kernel vulnerabilities and exploit pay-
loads, through an attack analysis.
Setup and methodology. We consider ﬁve diverse exploit
payloads which have previously been evaluated by others [35,
43,58,59]. Furthermore, we randomly selected a list of Linux
vulnerabilities.
Table 6 provides an overview of the exploit payloads (P1 -
P5). P1 elevates the privileges of a user process, giving root
privilege to the process. P2 disables the separation between
kernel and user processes, which allows an adversary to ex-
ecute user code in kernel space. Lastly, P3, P4. and P5 allow
the attacker to inject malicious code in the kernel by disabling
NX protections, i.e., make writable memory executable or
executable memory writable.
Table 7 provides an overview of the list of vulnerabilities
considered (V1 - V10). These vulnerabilities include out-of-
bounds access such as buffer overﬂows, use-after-free access
for a dangling pointer, and double-free issues. These vulner-
abilities are caused by kernel bugs in a diverse set of kernel
functionality, including the ext4 ﬁle system, keyring facility,
block layer, and networking module.
Finally, we use the same test applications (mentioned
in §9.1) for attack evaluation.
Attack analysis. SHARD can prevent the execution of 4 out
of the 5 considered payloads, for the NGINX and Redis con-
ﬁgurations. In particular, P3, P4, and P5 are either completely
disabled (i.e., in unreachable code) or hardened using CFI
(i.e., in potentially reachable code). SHARD also prevents P1,
which requires the execution of two kernel functions in succes-
sion, prepare_kernel_cred which creates root credentials
and commit_creds which commits the credentials to grant
the application root access. However, only commit_creds is
reachable (in system calls setuid, setgid, and setgroups)
Payload
Dependencies
P1: Privilege eleva. [58]
commit_creds,
prepare_kernel_cred
native_write_cr4
P2: Disable SMAP [59]
P3: Set memory exec. [48] set_memory_x
P4: Set memory writ. [43] set_memory_rw
P5: Modify page table [43] lookup_address
Protection Prevented
Unr Hard















Table 6: SHARD’s protection against exploit payloads. “Unr” stands
for unreachable and “Hard” represents hardening. For P1, only
prepare_kernel_cred is unreachable but since the exploit re-
quires both functions, we classify it as unreachable.
while running NGINX or Redis. While an attacker can recre-
ate the credentials using ROP gadgets, it would be very chal-
lenging because SHARD exposes few ROP gadgets (i.e., 175,
118, and 207, respectively) for these system calls. Finally,
SHARD cannot prevent the execution of P2 because it depends
on native_write_cr4, a function required by interrupt han-
dlers and, therefore, reachable from every system call (as
mentioned in §7.2).
Regarding vulnerabilities, SHARD disables 5 out of 10 vul-
nerabilities considered because they are located in unreach-
able code for these applications. The remaining 5 vulner-
abilities can be triggered since they exist in reachable or
potentially reachable code. However, they cannot always be
exploited as we explain in the next paragraph.
Considering control-ﬂow hijacks, which require both a vul-
nerability and an exploit payload (as explained in §6), an
attacker can attempt 50 concrete attacks using the consid-
ered 5 payloads (P1 - P5) and 10 vulnerabilities (V1 - V10).
Because SHARD can prevent hijacks by either disabling the
vulnerability or the exploit, SHARD prevents 90% (45 out of
50) of the attacks. In particular, SHARD is only susceptible to
attacks using the payload P2 and the exposed 5 vulnerabili-
ties (V3, V6, V8, V9, and V10), as both the payload and the
vulnerabilities are reachable in these applications.
Our analysis indicates that SHARD can invalidate many ex-
ploit payloads and vulnerabilities, hence, it is highly effective
at thwarting control-ﬂow hijacks, despite low overhead (§10).
Defense validation. To validate our analysis, we attempted
six control-ﬂow hijacks using NGINX and Redis. For this, we
used the exploit payload, P1, and three vulnerabilities namely
CVE-2016-0728 [18], CVE-2017-5123 [7], and CVE-2017-
7308 [8]. We attempted each control-ﬂow hijack by both
overwriting a function pointer and a return address, i.e., six
attacks in total. SHARD successfully prevented all six attacks
because the payload was unreachable for both application;
hence, jumps to the payload were caught by SHARD.
10 Evaluation
This section describes the experimental setup for SHARD
(§10.1), evaluates its overhead through micro-benchmarks
CVE
Vulnerable Function
Unr
Prevented
Component
Required memory (MB)