# Improving TCP Performance for Multihop Wireless Networks

**Authors:**
- Sherif M. ElRakabawy
- Christoph Lindemann
- Mary K. Vernon

**Affiliations:**
- University of Dortmund, Department of Computer Science, August-Schmidt-Str. 12, 44227 Dortmund, Germany
- University of Wisconsin - Madison, Department of Computer Sciences, 1210 West Dayton Street, Madison, WI 53706, USA

**Websites:**
- [University of Dortmund](http://mobicom.cs.uni-dortmund.de/)
- [University of Wisconsin - Madison](http://www.cs.wisc.edu/~vernon/)

## Abstract
This paper presents a comprehensive performance evaluation of TCP NewReno and TCP Vegas, with and without ACK thinning, in static multihop wireless IEEE 802.11 networks. Unlike previous studies, we consider not only the 2 Mbit/s bandwidth but also 5.5 Mbit/s and 11 Mbit/s. Simulation results using ns-2 show that TCP Vegas achieves between 15% and 83% more goodput and between 57% and 99% fewer packet retransmissions compared to TCP NewReno. In terms of fairness among multiple TCP flows, TCP Vegas shows a 21% to 95% improvement over TCP NewReno. The reduced retransmissions in TCP Vegas also lead to significant energy savings. The paper provides insights into the specific reasons for the superior performance of TCP Vegas over TCP NewReno.

## 1. Introduction
Mobile applications for ad hoc networked PDAs and laptops over IEEE 802.11 wireless technology require a reliable transport protocol like TCP. However, multihop wireless networks have unique properties different from the wired Internet, for which TCP implementations like TCP Reno and TCP NewReno were optimized. Specifically, the wireless channel is a shared resource, leading to TCP segment losses due to link-layer contention caused by hidden terminals. Our simulations confirm that most TCP losses in multihop wireless networks are due to hidden terminal effects rather than buffer overflow.

TCP Vegas, introduced by Brakmo et al., is an alternative TCP variant with innovative features for congestion control and packet retransmission. It has been shown to achieve higher throughput and fewer losses than TCP Reno in the Internet. However, little research has been done on its performance, fairness, and energy efficiency in multihop wireless networks over IEEE 802.11. With the availability of commercial products based on the IEEE 802.11g standard, future ad hoc networks may operate at higher bandwidths (up to 108 Mbit/s). Therefore, we consider not only 2 Mbit/s but also 5.5 Mbit/s and 11 Mbit/s bandwidths.

In this paper, we present a comprehensive performance evaluation of TCP NewReno and TCP Vegas in static multihop wireless IEEE 802.11 networks. We evaluate their performance in an h-hop chain, a grid topology with six competing flows, and a random topology with ten concurrent flows. Simulation results show that TCP Vegas outperforms TCP NewReno, achieving 15% to 83% more goodput and 57% to 99% fewer packet retransmissions. Additionally, TCP Vegas provides 21% to 95% better fairness in multi-flow environments. Thinning TCP acknowledgments, as proposed for TCP NewReno, further improves both fairness and goodput for increasing bandwidths, making TCP Vegas with ACK thinning the best-performing variant.

## 2. Related Work
Several efforts have been made to improve TCP performance in mobile ad hoc networks based on IEEE 802.11. Fu et al. highlighted the hidden terminal problem and proposed adaptive pacing and link-layer RED, showing a 5% to 30% improvement in throughput. They found that TCP NewReno performs better than TCP Vegas for h-hop chains with h ≥ 9. Our study, however, shows that TCP Vegas with parameters α = β = 2 outperforms TCP NewReno in static multihop wireless networks.

Altman and Jiménez proposed ACK thinning to improve TCP throughput, demonstrating a 50% increase in throughput for h-hop chains. We extend their work by considering ACK thinning for both TCP NewReno and TCP Vegas, and compare them against a paced UDP to understand optimal performance. Saadawi and Xu reported 15% to 20% more goodput for TCP Vegas in a single-flow chain topology. Our study, which considers more complex, multi-flow environments, shows that TCP Vegas can achieve up to 83% more goodput than TCP NewReno.

Other researchers have introduced TCP enhancements for mobility in ad hoc networks. Holland and Vaidya proposed explicit link failure notification (ELFN) to help TCP distinguish between congestion and link failures. Wang and Zhang introduced detection and out-of-order response (DOOR) to adapt to frequent route changes. While our focus is on static wireless networks, our findings can be combined with these techniques to optimize TCP performance in mobile ad hoc networks.

Numerous studies have evaluated TCP Vegas on the Internet, confirming its superior performance. We extend these studies to multihop IEEE 802.11 wireless networks, confirming that TCP Vegas outperforms TCP NewReno in terms of goodput and packet loss. Analytical models for TCP Vegas could be extended to provide more insight into its performance in these networks.

## 3. Background

### 3.1 TCP Vegas
TCP Vegas is an alternative TCP variant that proactively detects congestion by monitoring the difference between expected and actual throughput. Unlike TCP NewReno, which uses packet loss as a congestion indicator, TCP Vegas aims to prevent losses by adjusting the window size. The key innovation in TCP Vegas is its use of the difference (diff) between the expected and actual throughput to adjust the window size. Table 1 summarizes the parameters used in our simulation study.

| **Variable** | **Meaning** | **Value** |
|--------------|-------------|-----------|
| Wmax         | Maximum window advertised by the receiver | 64 |
| Winit        | Initial window used in slow start and after a timeout | 1 |
| α            | Vegas throughput threshold measured in packets | 2 |
| β            | Vegas thresholds measured for exiting slow start | 2 |

### 3.2 Thinning the ACK Stream in TCP
Dynamic ACK thinning, introduced by Altman and Jiménez, reduces MAC layer contention by thinning the ACK stream. A parameter d defines the number of packets received before an acknowledgment is generated, dynamically set according to the sequence numbers of received packets. Appropriate values for the thresholds are S1 = 2, S2 = 5, and S3 = 9. This prevents the TCP sink from experiencing a lack of packets and freezing for a default timeout of 100ms.

## 4. Comparative Performance Study

### 4.1 Simulation Environment and Performance Measures
To evaluate the performance of TCP NewReno and TCP Vegas with and without ACK thinning, as well as paced UDP, we conducted simulations using ns-2. We configured the MAC layer parameters to provide a transmission range of 250m and a carrier sensing and interference range of 550m. We considered bandwidths of 2 Mbit/s, 5.5 Mbit/s, and 11 Mbit/s. We developed ns-2 transport agents for ACK thinning and paced UDP, assuming a packet size of 1460 bytes and a buffer size of 50 packets. We used AODV as the ad hoc routing protocol.

Our simulations showed that AODV's behavior significantly impacts TCP performance, especially with hidden terminal effects. We conducted steady-state simulations, starting with an initially idle system and simulating continuous FTP flows until 110,000 packets were successfully transmitted. We split the simulation output into batches of 10,000 packets, discarding the first batch as initial transient. Performance measures, including goodput, average packet retransmissions, average window size, and overall link layer dropping probability, were derived from the remaining batches with 95% confidence intervals.

Jain's fairness index, given by:
\[ J(x_1, x_2, \ldots, x_n) = \frac{(\sum_{i=1}^{n} x_i)^2}{n \sum_{i=1}^{n} x_i^2} \]
where \( n \) is the number of flows and \( x_i \) denotes the goodput of the i-th flow, was used to measure fairness.

All packet losses in our experiments were due to link layer contention caused by hidden terminal effects, with no buffer overflows observed. Our study shows that TCP Vegas with appropriate parameters outperforms TCP NewReno for both short and large numbers of hops.

### 4.2 Optimally Paced UDP over IEEE 802.11
To understand the optimum achievable goodput over an IEEE 802.11 network for the chain topology, we considered an optimally paced UDP protocol. We used a constant bit rate (CBR) traffic generator to define the packet transmission rate, setting the UDP packet size to 1460 bytes. We determined the 4-hop propagation delay for different bandwidths (Table 2) and used it as an initial value for the time between successive packet transmissions. We gradually increased this time to find the maximum goodput.

| **Bandwidth** | **4-hop Propagation Delay** |
|---------------|------------------------------|
| 2 Mbit/s      | 29 ms                        |
| 5 Mbit/s      | 12 ms                        |
| 11 Mbit/s     | 8 ms                         |

No TCP variant can achieve as much goodput as paced UDP because:
1. Paced UDP neglects the entire traffic and MAC overhead caused by the ACK flow.
2. Paced UDP transmits packets at the optimal rate for each hop number, while TCP is window-based and estimates the available bandwidth.

In paced UDP, we neglected packet retransmissions and focused on the actual number of packets received by the UDP sink to measure goodput.

---

*The research in this paper was partially supported by the German Research Council (DFG) under Grant Li-645/12-2 and by the U.S. National Science Foundation under Grant ANI-0117810.*

*Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05)*  
*0-7695-2282-3/05 $20.00 © 2005 IEEE*