title:Improving TCP Performance for Multihop Wireless Networks
author:Sherif M. ElRakabawy and
Christoph Lindemann and
Mary K. Vernon
Improving TCP Performance for Multihop Wireless Networks* 
Sherif M. ElRakabawy, Christoph Lindemann 
Mary K. Vernon 
University of Dortmund 
Department of Computer Science 
August-Schmidt-Str. 12 
44227 Dortmund Germany 
University of Wisconsin - Madison 
Department of Computer Sciences 
1210 West Dayton Street 
Madison, WI 53706 
http://mobicom.cs.uni-dortmund.de/ 
http://www.cs.wisc.edu/~vernon/ 
Abstract 
In  this  paper,  we  present  a  comprehensive  performance 
evaluation  of  TCP  NewReno  and  TCP  Vegas  with  and 
without  ACK  thinning  for  static  multihop  wireless  IEEE 
802.11  networks.  Opposed  to  previous  studies,  we 
consider not only IEEE 802.11 operating in ad hoc mode 
with 2 Mbit/s bandwidth, but also with 5.5 Mbit/s and 11 
Mbit/s  bandwidths.  Simulation  results  using  ns-2  show 
that  TCP  Vegas  achieves  between  15%  and  83%  more 
goodput  and  between  57%  and  99%  fewer  packet 
retransmissions 
than  TCP  NewReno.  Considering 
fairness  among  multiple  TCP  flows,  we  show  that  using 
TCP  Vegas  results  in  between  21%  and  95%  fairness 
improvement  compared  to  TCP  NewReno.  The  reduced 
amount  of  packet  retransmissions  of  TCP  Vegas  also 
leads  to  significant  savings  of  energy  consumption.  The 
paper  gives  insight  on  the  particular  reasons  for  such 
performance advantages of TCP Vegas in comparison to 
TCP NewReno. 
1
Introduction
Numerous  mobile  applications  for  ad  hoc  networked 
PDAs and laptops over IEEE 802.11 wireless technology 
require  a  reliable  transport  protocol  like  TCP.  Such 
multihop  wireless  networks  possess  several  properties, 
which are different to the wired Internet for which widely 
deployed TCP implementations like TCP Reno and TCP 
NewReno  have  been  optimized.  In  particular, 
the 
wireless channel is a scarce resource shared among nodes 
within  their  radio  range.  Thus,  TCP  segments  may  not 
only be lost due to buffer overflow, but also due to link-
layer  contention  caused  by  hidden  terminals  [5].  A 
hidden  terminal  is  a  potential  sending  node  in  the 
receiver’s  neighborhood,  which  cannot  detect  the  sender 
and  may  disrupt  an  ongoing  transmission  of  a  TCP 
segment. In fact, as mentioned in [5] and further verified 
by our  simulation,  for  multihop  wireless  networks  using 
IEEE 802.11 most losses experienced by TCP are due to 
packet drops at the link layer incurred by hidden terminal 
effects and not due to buffer overflow.  
* The research in this paper was partially supported by the  German 
Research  Council  (DFG)  under  Grant  Li-645/12-2  and  by  the  U.S. 
National Science Foundation under Grant ANI-0117810.
TCP Vegas was introduced by Brakmo et al. [3] as an 
alternative  TCP  variant  with  innovative  features  for 
congestion control and packet retransmission. Opposed to 
the  widely  deployed  transport  protocol  TCP  NewReno, 
TCP  Vegas  tries  to  sense  incipient  congestion  by 
monitoring the current throughput. It has been shown that 
for the Internet, TCP Vegas achieves considerably higher 
throughput  and  fewer  losses  than  TCP  Reno  [3],  [10]. 
However,  little  work  has  been  done  to  investigate  the 
performance,  fairness,  and  energy  efficiency  of  TCP 
Vegas in multi-hop wireless networks over IEEE 802.11.  
Recently,  commercial  products  based  on  the  IEEE 
802.11g  standard  have  become  available  providing 
bandwidths  up  to  108  Mbit/s,  [8].  As  a  consequence, 
future  ad  hoc  networked  PDAs  and  laptops  over  IEEE 
802.11  wireless  technology  may  well  operate  with 
bandwidths  higher  than  2  Mbit/s.  Thus,  opposed  to 
previous  studies  [5],  [14],  we  consider  not  only  IEEE 
802.11  wireless  network  technology  operating in  ad hoc 
mode with 2 Mbit/s bandwidth, but also with 5.5 Mbit/s 
and with 11 Mbit/s bandwidth.  
In 
for  static  multihop  wireless 
this  paper,  we  present  a  comprehensive 
performance  evaluation  of  TCP  NewReno  and  TCP 
Vegas 
IEEE  802.11 
networks.  We  consider  an  h-hop  chain  without  cross 
traffic,  a  grid  topology  with  six  competing  flows  and  a 
random  topology  with  ten  concurrent  flows,  over  IEEE 
802.11  wireless  network technology.  To  get  intuition  on 
the  optimum  achievable  goodput  over  an  IEEE  802.11 
network  with  a  given  bandwidth,  we  consider  an 
optimally  paced  UDP  protocol,  which 
exploits 
knowledge  of  the  optimal  packet  transmission  rate  in  a 
chain  topology.  Simulation  results  obtained  by  ns-2  [4] 
show that TCP Vegas clearly outperforms TCP NewReno 
in static multihop wireless networks. In fact, TCP Vegas 
achieves  between  15%  and  83%  more  goodput  and 
between 57% and 99% fewer packet retransmissions than 
TCP  NewReno.  Furthermore,  the  more  conservative 
window  control  of  TCP  Vegas  yields  between  21%  and 
95%  better  fairness  than  TCP  NewReno  in  multi-flow 
environments.  The 
packet 
retransmissions  of  TCP  Vegas  also  results  in  significant 
savings  of  energy  consumption.  We  further  show  that 
thinning  TCP  acknowledgements,  recently  proposed  for 
TCP  NewReno  over  IEEE  802.11  [1],  improves  both 
reduced 
amount 
of 
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
fairness  and  goodput  of  TCP  Vegas  and  TCP  NewReno 
for  increasing  bandwidth,  letting  TCP  Vegas  with  ACK 
thinning  achieve  the  best  overall  results  among  all 
examined TCP variants.  
The  remainder  of  this  paper  is  organized  as  follows. 
Section 2 summarizes related work on TCP for multihop 
wireless networks. In Section 3, we recall the congestion 
control  algorithm  of  TCP  Vegas  as  well  as  thinning 
acknowledgements  for  improving  TCP  performance.  A 
comprehensive  performance  study  of  TCP  Vegas  versus 
TCP  NewReno  with 
thinning 
acknowledgements  is  presented  in  Section  4.  Finally, 
concluding remarks are given. 
and  without 
2 Related Work 
Several efforts for improving the performance of TCP 
in  mobile  ad  hoc  networks  based  on  IEEE  802.11 
technology  have  recently  been  reported.  Fu  et  al.  [5] 
pointed  out  the  hidden  terminal  problem  in  such 
networks  and  proposed  two  enhancements:  adaptive 
pacing  on  the  link-layer  and  link-layer  RED.  Using 
simulation  with  ns-2  [4],  they  showed  that  these  link-
layer  enhancements  improve  throughput  by  5%  to  30%. 
They  considered  TCP  NewReno over  IEEE  802.11  with 
2  Mbit/s  bandwidth.  Furthermore,  they  commented  that 
TCP  NewReno  achieves  better  performance  than  TCP 
Vegas  for  an  h-hop  chain  topology  with  h (cid:149)  9.  We  are 
presenting  a  comprehensive  performance  study  of  TCP 
Vegas  versus  TCP  NewReno.  Consistent  with  [5],  we 
observe  that  for  the  h-hop  chain  the  optimum  TCP 
window  size  is  given  by  h/4.  Opposed  to  [5],  our 
simulation  results  evidently  show  that  TCP  Vegas  with 
parameters  (cid:68)  =  (cid:69)  =  2  outperforms  TCP  NewReno  in 
static multihop wireless networks.  
Altman and Jiménez [1] proposed an adaptive scheme 
for  delaying  TCP  acknowledgements  (subsequently 
denoted  as  ACK  thinning)  in  order  to  improve  TCP 
throughput  in  multihop  wireless  networks.  They  also 
considered  TCP  NewReno  over  IEEE  802.11  with  2 
Mbit/s  bandwidth.  Using  simulation  with  ns-2,  they 
showed  that  for  an  h-hop  chain,  ACK  thinning  yields 
around  50%  more  throughput.  Building  upon  their 
results,  we  are  also  considering  ACK  thinning,  though, 
not  only  for  TCP  NewReno,  but  also  for  TCP  Vegas. 
Beyond  [1],  [5],  we  are  comparing  TCP  NewReno  and 
TCP  Vegas  with  and  without  ACK  thinning  against  a 
paced  UDP  in  order  to  get  intuition  how  an  optimum 
transport  protocol  over  IEEE  802.11  may  perform. 
Furthermore,  we  are  not  only  considering  2  Mbit/s 
bandwidth, but also 5.5 Mbit/s and 11 Mbit/s bandwidths. 
In [15], Saadawi and Xu investigated the performance 
of TCP Vegas in multihop wireless networks among four 
further  TCP  variants,  reporting  15%  to  20%  more 
goodput  for  TCP  Vegas.  However,  the  results  of  the 
study  were  based  on  a  chain  topology  with  a  maximum 
of  7  hops  and  a  single  TCP  flow.  Opposed  to  [15],  we 
investigate  the  performance  of  TCP  Vegas  in  more 
complex,  multi-flow  environments  while  regarding  a 
further  key  performance  aspect,  namely  TCP  fairness. 
Moreover, using simulation, we determine the best values 
for  the  Vegas  specific  parameters  (cid:68)  and  (cid:69)  in  order  to 
achieve the best performance for TCP Vegas. Opposed to 
[15],  our  simulation  study  shows  that  TCP  Vegas 
achieves up to 83% more goodput than TCP NewReno. 
Several  authors  introduced  TCP  enhancements  for 
coping  with  mobility  in  ad  hoc  wireless  networks  over 
IEEE 802.11. Holland and Vaidya [7] introduced explicit 
link failure notification (ELFN) as a feedback mechanism 
from  the  network  in  order  to  help  TCP  to  distinguish 
between  congestion  losses  and  losses  induced  by  link 
failures  due  to  mobility.  To  help  TCP  coping  with 
mobility,  Wang  and  Zhang  [13]  proposed  detection  and 
out-of-order  response  (DOOR)  as  a  new  way  to  make 
TCP adapt to frequent route changes without relaying on 
feedback 
focus  on  TCP 
performance  in  static  wireless  networks  instead,  though, 
our results may well be utilized together with the findings 
of  either  [7]  or  [13] 
to  optimize  TCP 
performance  in  mobile  ad  hoc  networks  based  on  IEEE 
802.11. 
the  network.  We 
from 
in  order 
Numerous  performance  studies  of  TCP  Vegas  have 
been reported for the Internet e.g., [3], [10]. Furthermore, 
several  analytical  performance  models  for  TCP  Vegas 
have  been  introduced  e.g.,  [10],  [12].  Our  simulation 
study considers multihop IEEE 802.11 wireless networks 
possessing  substantially  different  properties  than  the 
wired  Internet,  though,  confirms  the  result  that  TCP 
Vegas  outperforms  TCP  NewReno  both  in  terms  of 
goodput  and  percentage  of  packet  losses.  To  get  more 
intuition  on  the  performance  of  TCP  Vegas  with  and 
without  ACK  thinning  over  IEEE  802.11  multihop 
wireless  networks,  it  will  be  helpful  to  extend  one  of 
these analytical performance models. 
3 Background 
3.1
TCP Vegas 
 We  assume  that  the  reader  is  familiar  with  basic 
mechanisms  of  TCP  such  as  slow  start  and  congestion 
avoidance algorithms, the two methods for loss detection: 
duplicate  ACKs  and  timeouts,  etc.  Currently,  Reno  (and 
NewReno)  constitute  the  most  widely  known  and 
deployed  congestion  control  algorithm  for  TCP.  While 
TCP  NewReno  has  proven  to  be  well  suited  for  the 
Internet,  TCP  NewReno  incorporates  a  quite  aggressive 
method  for  predicting  the  available  bandwidth  by 
provoking  packet  losses.  TCP  Vegas  constitute  an 
alternative  TCP  variant  with  innovative  features  for 
congestion  control  and  packet  retransmission.  A  source 
in  TCP  Vegas  anticipates  the  onset  of  congestion  by 
monitoring  the  difference  between  the  throughput  it  is 
expecting  to  see  and  the  actually  realizing  throughput. 
Compared  to  TCP  NewReno,  TCP  Vegas  includes  a 
modified retransmission strategy as well as new methods 
for congestion detection during slow start and congestion 
avoidance.  
To  keep  the  paper  self-contained,  the  following 
outlines the main innovation of TCP Vegas with respect 
to NewReno. The congestion control mechanism of TCP 
NewReno  uses  packet  loss  as  indication  of  congestion.  
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
Table 1: Base parameter setting for TCP NewReno 
Variable 
Meaning 
and TCP Vegas 
Wmax
Winit
(cid:68)(cid:3)
(cid:74)(cid:3)
Maximum window advertised by 
the receiver 
Initial window used in slow start 
and after a timeout 
Vegas throughput threshold 
measured in packets 
Vegas thresholds measured for 
exiting slow start 
Value 
Wmax (cid:32)(cid:3)64(cid:3)
Winit (cid:32)(cid:3)1(cid:3)
(cid:68)(cid:3)(cid:32)(cid:3)2
(cid:74)(cid:3)(cid:32)(cid:3)(cid:68)
Thus, TCP NewReno cannot detect the incipient signs 
of  network  congestion  before  losses  occur  and,  thus, 
cannot  prevent  losses.  TCP  NewReno  constitutes  a 
reactive  protocol,  as  it  requires  losses  to  determine  the 
available  bandwidth  of  the  connection.  Opposed  to  that, 
TCP  Vegas  tries  to  proactively  detect  congestion  in  its 
incipient  stages,  and  subsequently  reduces  the  TCP 
window  in  an  attempt  to  prevent  packet  loss.  To  detect 
congestion,  once  every  round  trip  time  (RTT),  TCP 
Vegas  utilizes  the  current  window  size  (W),  the  most 
recent  RTT,  and  the  minimum  RTT  observed  so  far 
(baseRTT)  for  computing  the  difference  between  the 
expected throughput, given by W/baseRTT and the actual 
throughput, estimated by W/RTT. That is, [3], [12]: 
(cid:12)
diff W baseRTT W RTT baseRTT
(cid:16)
(cid:32)
(cid:11)
The  goal  of  the  TCP  Vegas  congestion  avoidance 
algorithm lies in keeping diff between specific lower and 
upper  thresholds,  denoted  by  (cid:68)  and  (cid:69).  Throughout  this 
paper,  we set (cid:68)(cid:3)(cid:32)(cid:3)(cid:69) because  it  has  been  shown  that  this 
parameter setting improves fairness [6]. Thus, once every 
RTT while not in slow start mode, TCP Vegas adjusts the 
window size: 
W
(cid:173)
W
(cid:176)(cid:32)
(cid:174)
(cid:176)
W
(cid:175)
W
(cid:14)
1
(cid:16)
1
if diff
if diff
if diff
1
(cid:31)
(cid:68)
(cid:32)
(cid:68)
(cid:33)
(cid:68)
contains 
 Furthermore,  TCP  Vegas 
a  more 
conservative  slow  start  behavior  as  TCP  NewReno  as 
well  as  four  innovative  mechanisms  for  congestion 
recovery.  Due  to  space  limitations,  we  omit  their 
descriptions  and  refer 
to  [3]  and  [10].  Table  1 
summarizes the parameters of TCP NewReno and Vegas 
considered in the simulation study presented in Section 4. 
3.2 Thinning the ACK Stream in TCP 
In this section, we briefly describe the dynamic ACK 
thinning  approach  introduced  in  [1],  which  aims  to 
decrease  contention  on  the  MAC  layer  by  thinning  the 
ACK  stream  that  competes  with  the  TCP  packet  flow. 
Dynamic ACK thinning operates as follows: A parameter 
d defines the number of packets received by the TCP sink 
before  an  acknowledgment  is  generated.  This  parameter 
is set dynamically according to the sequence numbers of 
the TCP packets received and increases gradually from 1 
to  4  using  three  defined  thresholds  S1, S2  and  S3.
Specifically,  for  a  received TCP  packet  with  a  sequence 
number n, d = 1 if n (cid:148) S1, d = 2 if S1 (cid:148) n < S2, d = 3
if S2 (cid:148) n < S3 and d = 4 if n (cid:149) S3. According to [1], 
appropriate values for the thresholds are S1 = 2, S2 = 5
and S3  =  9.  The  reason  for  setting  d  dynamically 
according  to  the  sequence  numbers  of  the  received 
packets  is  to  prevent  the  TCP  sink  from  experiencing  a 
lack of TCP packets and freezing for a timeout of 100ms 
as  a  default  value.  This  would  be  the  case  if  the 
parameter  d  becomes  larger  than  the  current  TCP 
window size. Since d is only being set dynamically at the 
beginning  of  the  TCP  connection,  such  case  cannot  be 
prevented  if  the  TCP  window  size  decreases  below  d
during the remainder of the TCP connection, for instance 
at the initial phase of each time TCP enters slow start.  
4 Comparative Performance Study 
4.1 The  Simulation  Environment  and 
the 
considered Performance Measures 
To  evaluate  the  performance  of  TCP  NewReno  and 
TCP  Vegas  with  and  without  ACK  thinning  as  well  as 
paced  UDP  over  IEEE  802.11  wireless  networks,  we 
conduct  simulation  experiments  using 
the  network 
simulator  ns-2  [4].  We  employ  the  implementations  of 
TCP  NewReno  and  TCP  Vegas2  as  well  as  the  MAC 
layer according to the IEEE 802.11 standard for wireless 
communication  provided  by  ns-2.  Consistent  with  the 
case  in  reality  where  the  transmission  range  of  a  node 
would  be  smaller  than  its  interference  range,  all  MAC 
layer  parameters  of  IEEE  802.11  are  configured  to 
provide  a  transmission  range  of  250m  and  a  carrier 
sensing  range  as  well  as  an  interference  range  of  550m. 
The  transmission of  each data  packet on the  MAC  layer 
is  preceded  by  a  Request-To-Send/Clear-To-Send 
(RTS/CTS) handshake. We consider not only bandwidths 
of  2  Mbit/s,  but  also  5.5  and  11  Mbit/s.  The  higher 
bandwidths  are  already  provided  by  the  standard  IEEE 
802.11b and may well be utilized in ad hoc mode in the 
new standard IEEE 802.11g. Furthermore, we developed 
ns-2  transport  agents  implementing  the  ACK  thinning 
mechanism and the paced UDP tailored to the considered 
scenarios.  We  assume  that  all  TCP  packets  are  of  size 
1460 bytes. For all nodes, we assume a buffer size of 50 
packets.  We  use  AODV  [11]  as  an  ad  hoc  routing 
protocol.  Through  our  simulations  we  show  that  the 
behavior  of  AODV  has  a  significant  impact  on  the 
performance  of  TCP  dependent  on  the  intensity  of  the 
existing hidden terminal effects. 
experiments,  we 
steady-state 
simulation  starting  with  an  initially  idle  system.  In  each 
run,  we  simulate  continues  FTP  flows  until  110.000 
packets  are  successfully 
the 
simulation output in batches of size 10.000 packets. The 
first batch is discarded as initial transient. The considered 
performance measures are derived from the remaining 10 
batches  with  95%  confidence  intervals  by  the  batch 
means  method.  For  almost  all  data  points,  the  width  of 
the  confidence  intervals  is  below  5%  of  the  measure’s 
transmitted  and  split 
conduct 
all 
In 
1  Note  that  this  case  rarely  occurs,  since diff  takes  positive  real  values 
whereas (cid:68) is a natural number. 
2 As already noted in [12], the TCP Vegas implementation provided by 
ns-2 contains several subtle bugs, which we fixed.
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 
0-7695-2282-3/05 $20.00 © 2005 IEEE
value. As performance measure, we consider the goodput 
given  by  the  number  of  bytes  successfully  transmitted 
divided by the length of each batch, the average number 
of packet retransmissions on the transport layer per flow, 
the  average  window  size  per  flow,  and  the  overall  link 
layer  dropping  probability  per  flow.  In  the  grid  and 
random  scenarios,  we  consider  the  measures  aggregate 
goodput  given  by  the  sum  of  the  goodput  of  individual 
flows as well as the individual goodput achieved by each 
flow. 
As in [5], we consider Jain’s fairness index given by: 
2
n
(cid:167)
(cid:168)
(cid:169)
n
(cid:183)
(cid:185)(cid:166)
(cid:184)
x
i
(cid:32)
1
i
n
(cid:166)
(cid:32)
1
i
2
x
i
,
where  n  is  the  number  of  flows  and  xi  denotes  the 
goodput of the i-th flow. 
Consistent  with  [5],  in  the  simulation  experiments 
conducted,  all  packet  losses  are  due  to  link  layer 
contention caused by hidden terminal effects. We do not 
observe buffer overflows in any performance experiment. 
Opposed  to  [5],  our  simulation  study  evidently  shows 
that  TCP  Vegas  with  appropriately  chosen  parameters 
clearly outperforms TCP NewReno both for a short and a 
large number of hops. 
4.2 Optimally Paced UDP over IEEE 802.11 
In  order  to  get  intuition  on  the  optimum  achievable 
goodput  over  an  IEEE  802.11  network  for  the  chain 
topology  and  a  given  bandwidth,  we  consider  an 
optimally  paced  UDP  protocol  as  a  transport  agent.  To 
define the packet transmission rate, we use a constant bit 
rate (CBR) traffic generator while setting the UDP packet 
size  to  1460  bytes, equal to the  TCP packet size  we  use 
through  all  of  our  simulations.  Subsequently,  we  denote 
this  transport  protocols  as  paced  UDP.  Paced  UDP  shed 
also some light on the impact of link layer contention of 
IEEE  802.11  to  a  transport  protocol  for  the  chain 
topology. 
link 
the  minimal 
To  determine  the  optimum  packet  transmission  rate 
the  best  channel 
for  which  paced  UDP  achieves 
layer 
utilization,  we  determine 
propagation  delay  for  4  hops  in  a  h-hop  chain  topology 
with  a  single  flow  as  shown  in  Figure  1  of  Section  4.3. 
That is, we calculate the 4-hop propagation delay for the 
first  packet  assuming  a  zero  queuing  delay.  In  order  to 
keep  the  hidden  terminal  effects  minimal,  node  i  may 
only  transmit  packet  pj  if  packet  pj-1  has  been  already 
forwarded  by  node  i+3,  where  i  =  1,2,..,h-4.  Table  2 
for  different 
shows 
bandwidths.  Subsequently,  we 
the  4-hop 
propagation  delay  as  an  initial  value  for  the  time  t
between 
for 
determining the optimum packet transmission rate. In an 
off-line  simulation  experiment,  we  increase  t  gradually 
until we observe the maximum goodput. No TCP variant 
can  achieve  as  much  goodput  as  paced  UDP  for  the 
following  two  reasons:  (1)  the  entire  traffic  and  MAC 
overhead caused by the ACK flow is neglected in paced 
UDP; (2) paced UDP transmits packets with the optimal 
the  4-hop  propagation  delay 
take 
two  successive  packet 
transmissions 
Table 2: 4-hop propagation delay for different 
2 Mbit/s 
29 ms 
bandwidths 
5 Mbit/s 
12 ms 
11 Mbit/s 
8 ms 
to  probe 
rate  for  each  hop  number,  while  TCP  is  window-based 
and  has 
the  available  bandwidth. 
Furthermore, 
in  paced  UDP,  we  neglect  packet 
retransmissions  and  determine  the  actual  number  of 
packets received by the UDP sink in terms of goodput.  