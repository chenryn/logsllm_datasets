(outside the device) and then imported to the device. If the poten-
tially vulnerable keys remain deployed, their usage scenario can be
supplemented with additional risk management.
5.1.1 Changes to the algorithm. (cid:140)e library could adopt an ap-
proach common in open-source libraries – instead of constructing
candidates for the primes, they are generated randomly and their
value is incremented until a prime is found. Other alternative con-
structions exist, such as provable or safe primes, as described in
the NIST FIPS 186-4 standard [46]. We noticed a certain similar-
ity between the algorithm of the Manufacturer and an algorithm
published by Joye and Paillier [44] focused on key generation on
smartcards. (cid:140)e key di(cid:130)erence seems to be the fact that the RSALib
uses a constant value in the generator (65537), while in the paper,
the value is always chosen randomly using a unit generation algo-
rithm [44, Figure 4]. (cid:140)e approach in the paper [44] is not a(cid:130)ected
by the same vulnerability.
Note that due to the nature of deployment of the RSALib, the
devices already in use cannot be updated. (cid:140)e RSALib is o(cid:137)en stored
in a read-only on-chip memory with no possibility to distribute
and apply a (cid:128)x a(cid:137)er deployment.
5.1.2
Importing a secure keypair. A secure RSA keypair can
be generated in another cryptographic library and then imported
to the a(cid:130)ected device. We are not aware of any vulnerability in
Manufacturer devices as far as the use of securely generated keys
is concerned. Coincidentally, the import of externally generated
keypair is even recommended by Yubico vendor [77], although for
the purpose of private key backup.
5.1.3 Use of less a(cid:128)ected key lengths. As discussed in Section 2,
we consider 512, 1024 and 2048-bit keys to be insecure. Due to
design choices made by the manufacturer, it appears that 3072-bit
keys are seemingly less a(cid:130)ected by our method than 4096-bit RSA
though with a signi(cid:128)cantly reduced security margin. Our a(cid:138)ack
is ine(cid:129)cient or directly inapplicable when applied to some quite
uncommon key lengths (such as 1952 bits or 3936 bits). Hence, we
recommend limiting the choice of the key lengths to the seemingly
una(cid:130)ected keys if the usage of the vulnerable chips with on-chip
generated keys is absolutely unavoidable. Note however, that these
keys still su(cid:130)er from signi(cid:128)cant entropy loss. If a somewhat “stan-
dard” key length is required, we recommend switching to 3072-bit
keys.
We also suggest caution when using the (cid:128)ngerprinted 4096-bit
keys, even though our method is not practical for their factorization
at the moment (requiring 1.28 ∗ 109 CPU-years). (cid:140)e strongest pos-
sible key length with respect to the general factorization methods
and our a(cid:138)ack is 3936-bit RSA. If a device supports at most 2048-bit
keys, the key length of 1952 bits is the most secure option (see
Figure 1).
5.1.4 Additional risk management. (cid:140)e use of potentially vul-
nerable keys (especially 2048-bit keys requiring feasible yet still
signi(cid:128)cant computational power) can be amended with additional
scrutiny to perform supplementary risk management. (cid:140)e presence
of the (cid:128)ngerprint is an advantage in this scenario since the pub-
lic keys can be quickly tested to decide when to apply additional
measures by the cooperating system.
5.2 Future prevention and analysis
(cid:140)e impacts of the documented vulnerability may serve as cases
supporting the need for future systematic changes and deeper ad-
ditional analyses, not limited just to the library in question.
5.2.1 Preventing the single point of failure. (cid:140)e described prob-
lem would be mitigated if not a single but two or even more indepen-
dent implementations were used to generate the RSA keypair. More
generally, a secure multi-party protocol can be utilized to remove
the single point of failure, not only during the keypair generation,
but also during its use. (cid:140)e general goal is to provide tolerance
against up to k out of t misbehaving (either faulty or intentionally
malicious) participants [26]. Multiple protocols based on common
cryptographic primitives like RSA, Di(cid:129)e-Hellman or Elliptic curve
cryptography were proposed in literature [15, 31, 37, 72]. Such ap-
proaches protect not only against an intentionally malicious party,
but also against unintentional mistakes weakening the resulting key.
(cid:140)e area of collaborative RSA keypair generation is well studied
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1645with the primary goal to generate parts (shares) of RSA keypairs,
yet not to reveal the factorization of the resulting modulus N , until
all or a speci(cid:128)ed number (threshold) of parties cooperate.
Gilboa’s threshold RSA signature scheme [31] requires collab-
oration during every signature operation, introducing protocol
changes. A more e(cid:129)cient generation method by Straub based on 3-
prime RSA [72] is not suitable for use by smartcards that implement
o(cid:132)ine signature generation with limited APIs, typically exposing
only standard 2-prime RSA operations. Moreover, protocols secur-
ing against active adversaries, like that described in Hazay et al.
[37], are time-consuming even on standard CPUs while having pro-
hibitively long keypair generation phases on performance-limited
hardware. Parsovs proposed a collaborative method that splits key
generation between card manufacturer and cardholder [63]. (cid:140)e
resulting 4-prime 4096-bit RSA key is generated from two 2048-bit
parts during an interactive protocol executed before the card’s (cid:128)rst
use, limiting the necessity to trust a vendor with the generation of
the whole keypair, as well as removing the single point of failure.
Gennaro et al. proposed a distributed key generation algorithm
for discrete-log cryptosystems (not directly applicable to RSA) [30],
with extensions to provably secure distributed Schnorr signatures
[71] and with the implementation shown to be e(cid:129)cient enough to
run on cryptographic smartcards [56] as a mitigation of hardware
Trojans.
Note that all the methods described above require changes to user
interfaces and protocols and are therefore less suitable for legacy
systems. However, a systematic adoption of secure multiparty
protocols, instead of relying on a single vendor and implementation,
can provide a signi(cid:128)cant overall increase of security of a system.
5.2.2 Analysis of other limited devices. (cid:140)e need for fast key-
pair generation on limited hardware naturally leads to a search for
alternative methods for (cid:128)nding completely random primes. (cid:140)e gen-
eration method of Joye and Paillier [44] is one example. (cid:140)erefore,
other modi(cid:128)cations (with respect to [44]) or completely di(cid:130)erent
methods may have been adopted by other hardware vendors. We
did not detect any deviances in cards from 5 other manufacturers
using our (cid:128)ngerprinting method. However, even a minor change
to unit generation used in RSALib will suppress the bias that is
detectable by our method (e.g., generators for p and q other than
65537), yet these changes will not automatically result in keys being
secure against variations of our a(cid:138)ack. (cid:140)e search for alternative
detection techniques as well as a(cid:138)ack variations represents possible
future work.
5.3 Responsible disclosure
Disclosure of this vulnerability was made to Manufacturer in the
beginning of February 2017 together with the tools demonstrating
(cid:128)ngerprinting capabilities and practical factorization. (cid:140)e vulnera-
bility was subsequently con(cid:128)rmed with further noti(cid:128)cation of the
a(cid:130)ected parties by Manufacturer.
We made public disclosure of the discovered issue in the middle
of October 2017 together with the release a tool for (cid:128)ngerprint
detection for provided public keys to facilitate a quick assessment
of the presence of the vulnerability for end-users. (cid:140)e full details
of the a(cid:138)ack are published in this paper.
For the time being, we are not releasing our source code of the
factorization algorithm. We believe that honest parties can make
their own implementation based on our description.
6 RELATED WORK
(cid:140)e generation of RSA keys and a(cid:138)acks on them are the two main
areas related to this work. Besides a(cid:138)acks on the messages (e.g.,
padding oracle [11, 16, 19] or related messages [25, 76]), most at-
tacks aim to deduce the private key from the corresponding public
key. (cid:140)e a(cid:138)acks can be divided into two classes based on the as-
sumptions about the key: 1) No additional information – methods
such as Pollard p-1 [65], Pollard Rho [18, 66], and a class of several
sieving methods (e.g., NFS, GNFS); 2) Partial information – low
private or public exponent [13, 14, 24, 74], implementation and
side-channel a(cid:138)acks, and a(cid:138)acks based on Coppersmith’s method
[23].
(cid:140)e usage of generic a(cid:138)acks is limited to small RSA keys due to
their exponential time complexity (the current record for a general
768-bit RSA [47] was broken using NFS). Only a(cid:138)acks from the
second class are known to be used to break RSA moduli used in
practice. Side-channel a(cid:138)acks (e.g., timing a(cid:138)acks, power analysis)
are out of the scope of this work since they require active access to
the device performing the RSA computation. Except for Wiener’s at-
tack [74] for a small private exponent, other notable a(cid:138)acks belong
to the same class as Coppersmith’s a(cid:138)ack.
In 2012, two independent teams [38, 50] analyzed RSA public
keys on the Internet. (cid:140)e teams analyzed several millions of wide-
spread keys in network devices such as keys in SSL certi(cid:128)cates,
SSH host keys and PGP keys. (cid:140)ese teams observed that a small
portion (0.5% of TLS, 1% of SSH) of public RSA keys shared prime
factors. Due to insu(cid:129)cient entropy (e.g., SSL keys were generated
by low-powered devices with no source of entropy) during the gen-
eration process, these keys can be trivially factorized using GCD. In
2013, Bernstein et al. [9] analyzed the “Citizen Digital Certi(cid:128)cate”
database of 3.2 million public RSA keys generated by smartcards
used as the national IDs of Taiwanese citizens. In addition to recov-
ering 184 keys that shared primes using a batch GCD computation,
the authors adapted Coppersmith’s algorithm and computed an
additional 81 private keys. To our knowledge, this is the only prac-
tical application of Coppersmith’s method to a(cid:138)ack real RSA keys
prior to our a(cid:138)ack. Coppersmith’s algorithm can be viewed as a
universal tool for a(cid:138)acking RSA keys generated with improperly
chosen parameters or originating from a faulty implementation.
(cid:140)e algorithm was adapted for various scenarios where some bits
of a factor, of the private exponent or of the message are known
[12]. (cid:140)e factorization of moduli with known high [22] or low [24]
bits of a factor were among the (cid:128)rst variants of the method. A nice
overview of these methods can be found in [57].
(cid:140)e generation of RSA keys is described in several standards
(e.g., FIPS 186-4 [46], IEEE 1363-2000 [1] – see [53] for an overview),
many having di(cid:130)erent requirements for the form of the primes. One
feature is common to all these standards – the primes should be
generated randomly using a large amount of entropy. In addition
to specialized construction methods (e.g., provable primes), the
generation of RSA primes is typically performed in several iter-
ations, repeating two fundamental steps: a random candidate is
Session H1:  Crypto AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1646generated and then tested for primality. Since the primality test is
a time-consuming process, several authors have proposed various
speedups for the candidate generation process ([17, 45, 55], see
[44] for an overview of such methods). (cid:140)e current state of the
art focused on constrained devices is described in [44], where the
authors decreased the number of primality tests with a negligible
loss of entropy (0.5 bits).
7 CONCLUSIONS
We presented a cautionary case of a vulnerable prime selection
algorithm adopted in RSA key generation in a widely used security
library of a cryptographic hardware manufacturer found in NIST
FIPS 140-2 and CC EAL 5+ certi(cid:128)ed devices. Optimizations that
were motivated by a higher performance in the key generation
process have inadvertently led to signi(cid:128)cantly weakened security
of the produced keys. (cid:140)e primes are constructed with a speci(cid:128)c
structure that makes the factorization of the resulting RSA keys
of many lengths (including 1024 and 2048 bits) practically feasible
with only the knowledge of the public modulus. Worse still, the
keys carry a strong (cid:128)ngerprint, making them easily identi(cid:128)able in
the wild. (cid:140)e factorization method is based on our extension of the
Howgrave-Graham re(cid:128)nement of Coppersmith’s method.
To quantify and mitigate the impacts of this vulnerability, we
investigated multiple domains where the RSA algorithm is deployed.
Based on the speci(cid:128)c structure of the primes, we devised a very fast
algorithm to identify all vulnerable keys even in very large datasets,
such as TLS or Certi(cid:128)cate Transparency. Where public datasets
were missing (eID, TPM, etc.), we a(cid:138)empted to collect some keys on
our own. (cid:140)e results con(cid:128)rmed the use of the RSALib that produces
vulnerable RSA keys across many domains.
(cid:140)ere is mounting evidence that prime generation is a critical
part of implementations that designers and developers struggle
with. Authoritative design notes for robust approaches should
be produced and disseminated. Developers must follow existing
standards without modi(cid:128)cations.
Our work highlights the dangers of keeping the design secret
and the implementation closed-source, even if both are thoroughly
analyzed and certi(cid:128)ed by experts. (cid:140)e lack of public information
causes a delay in the discovery of (cid:131)aws (and hinders the process
of checking for them), thereby increasing the number of already
deployed and a(cid:130)ected devices at the time of detection.
(cid:140)e certi(cid:128)cation process counter-intuitively “rewards” the se-
crecy of design by additional certi(cid:128)cation “points” when an imple-
mentation is di(cid:129)cult for potential a(cid:138)ackers to obtain - thus favoring
security by obscurity. Relevant certi(cid:128)cation bodies might want to
reconsider such an approach in favor of open implementations and
speci(cid:128)cations. Secrecy may increase the di(cid:129)culty of spo(cid:138)ing a (cid:131)aw
(above the capability of some a(cid:138)ackers) but may also increase the
impacts of the (cid:131)aw due to the later discovery thereof.
ACKNOWLEDGMENTS
We would like to thank all anonymous reviewers for very enlight-
ening and useful comments as well as our colleagues for fruitful
discussions, especially Vladimir Sedlacek and Martin Ukrop. We