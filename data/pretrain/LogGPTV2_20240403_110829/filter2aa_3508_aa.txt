# Fuzzing Malware for Fun and Profit: Applying Coverage-Guided Fuzzing to Find Bugs in Modern Malware

## Speaker
**Maksim Shudrak**
- **Senior Offensive Security Researcher (2018 – present)**
- **PhD in Vulnerability Hunting (2016, Tomsk, Russia)**
- **Researcher at IBM Research, Haifa, Israel (2015-2017)**
- **Security Researcher and PhD Student (2011-2015)**

### Interests
- Vulnerability Hunting
- Fuzzing
- Reverse-Engineering
- Malware Analysis
- Dynamic Binary Instrumentation

### Projects
- **drltrace**: Transparent API-calls tracing for malware analysis
  - [GitHub](https://github.com/mxmssh/drltrace)
- **WinHeap Explorer**: Proof of Concept for detecting heap-based bugs in x86 code
  - [GitHub](https://github.com/WinHeapExplorer/WinHeap-Explorer)
- **IDAMetrics**: IDA plugin for assessing machine code complexity
  - [GitHub](https://github.com/mxmssh/IDAmetrics)

## Introduction and Motivation

### Why Coverage-Guided Fuzzing?
Coverage-guided fuzzing is a state-of-the-art approach for finding bugs in modern applications. It is an integral part of the Software Development Life Cycle (SDLC) and is crucial for ensuring the security of applications and operating systems.

### Fuzzer Overview and Architecture
- **Fuzzer Usage and Demo**
- **Case Studies: Mirai + Vulnerability Demo**
- **Case Studies: TinyNuke, KINS, Dexter**

### Motivation
- **Complex Parsers**: Writing complex parsing algorithms can be tedious and error-prone.
- **Low Code Quality**: Poorly written code is more likely to contain vulnerabilities.
- **It is Fun!**: The challenge and excitement of discovering new vulnerabilities.

## Related Works
- **DEF CON 25: Offensive Malware Analysis: Dissecting OSX/FruitFly via a Custom C&C Server by Patrick Wardle**
- **DEF CON 25: Digital Vengeance: Exploiting the Most Notorious C&C Toolkits by Professor Plum**
- **Targeted Attacks: From Being a Victim to Counter Attacking by Andrzej Dereszowski (SIGNAL 11)**
- **Malware Fuzzing**:
  - Rasthofer, S., Arzt, S., Triller, S., and Pradel, M. (2017). Making malory behave maliciously: Targeted fuzzing of Android execution environments. In *Software Engineering (ICSE), 2017 IEEE/ACM 39th International Conference on* (pp. 300-311). IEEE.
  - Peng, F., Deng, Z., Zhang, X., Xu, D., Lin, Z., and Su, Z. (2014). X-Force: Force executing binary programs for security applications. In *Proceedings of the 2014 USENIX Security Symposium*, San Diego, CA.

## Legal Issues
- **Hacking-Back is Mostly Illegal**:
  - Attack attribution is challenging and can lead to incorrect conclusions.
  - Identifying the scope of an attack is difficult.
  - For more details, see Professor Plum’s presentation from last year's DEF CON: [YouTube](https://www.youtube.com/watch?v=fPhkmAdWH-I).
- **No Prohibition on Bug Hunting in Malware**: While hacking back is illegal, searching for bugs in malware is not.

### Possible Benefits
- **Local Denial of Service (Agent)**
- **Remote Denial of Service (Agent)**
- **Remote Code Execution (Agent)**
  - Take control over a botnet or shut it down.
  - Track down botnet owners.
  - Potential for profit.
- **Remote Code Execution in C&C**

## Fuzzing
- **State-of-the-Art Fuzzers**:
  - **AFL**: [Website](http://lcamtuf.coredump.cx/afl/)
  - **Libfuzzer**: [Documentation](https://llvm.org/docs/LibFuzzer.html)
  - **AFL Forks**:
    - **kAFL**: AFL for kernel-level fuzzing.
    - **WinAFL**: AFL fork for Windows binaries fuzzing.
    - Other forks: [List](https://github.com/mirrorer/afl/blob/master/docs/sister_projects.txt)

### AFL Source Code Instrumentation Approach
- **Custom gcc (afl-gcc) Compiler**: Injects instrumentation routines for each basic block.
- **Main Routine After Instrumentation**:

### Challenges
- **Lack of Source Code**: Overcome using WinAFL and DynamoRIO.
- **Obfuscation**: Requires advanced techniques to deobfuscate.
- **Encryption**: Many C&C channels are encrypted, requiring test cases to be encrypted similarly.

### WinAFL
- **Port of AFL for Windows**: Relies on the DynamoRIO dynamic binary instrumentation framework.
- **Features**:
  - No need for source code access.
  - Open-source.
  - Fast enough for coverage-guided fuzzing.
- **Resources**:
  - [WinAFL GitHub](https://github.com/ivanfratric/winafl)
  - [DynamoRIO GitHub](https://github.com/DynamoRIO/dynamorio)

### How Does DynamoRIO Work? (High-Level Overview)
1. **Launch (Suspended)**
2. **Inject Instrumentation Library**
3. **Hook Entry Point**
4. **Take First Basic Block**
5. **Transform Basic Block**
6. **Code Cache**
7. **Take Next Basic Block**

### Challenges
- **Lack of Source Code**: Addressed with WinAFL and DynamoRIO.
- **Obfuscation**: Requires advanced deobfuscation techniques.
- **Encryption**: Requires custom encryption support in the fuzzer.

### WinAFL Patch (netAFL)
- **Malware (Main Module)**
- **Malware in Memory**
- **DynamoRIO Shared Lib**
- **WinAFL Shared Lib**
- **AFL Fuzzer**
- **Fuzzer in Memory**
- **User-Defined Encryption**
- **Client/Server Module**

This presentation aims to provide a comprehensive overview of how coverage-guided fuzzing can be applied to find and exploit vulnerabilities in modern malware, making it a valuable tool for both offensive and defensive security research.