Fuzzing Malware for Fun & Profit. Applying Coverage-Guided 
Fuzzing to Find Bugs in Modern Malware 
Maksim Shudrak 
DEF CON 26 
About Me 
BIO 
2018 – present: Senior Offensive Security Researcher 
2016: Defended PhD (Vulns Hunting) in Tomsk, Russia 
2015-2017: Researcher, IBM Research, Haifa, Israel 
2011-2015: Security Researcher, PhD student 
Interests 
Vulnerabilities Hunting 
Fuzzing 
Reverse-engineering 
Malware Analysis 
Dynamic Binary Instrumentation 
Projects 
Drltrace – transparent API-calls tracing for malware analysis 
https://github.com/mxmssh/drltrace 
WinHeap Explorer – PoC for heap-based bugs detection in x86 code 
https://github.com/WinHeapExplorer/WinHeap-Explorer 
IDAMetrics – IDA plugin for machine code complexity assessment 
https://github.com/mxmssh/IDAmetrics 
Introduction & Motivation 
Why coverage-guided fuzzing ? 
Fuzzer overview & architecture 
Fuzzer usage & demo 
Case Studies. Mirai + vulnerability demo 
Case Studies. TinyNuke, KINS, Dexter  
Discussion, Future Work & Conclusion 
Motivation . Complex Parsers 
- ☺ 
Motivation . Complex Parsers 
I am so #@$%^* tired of writing this algorithm. 
Motivation . Complex Parsers 
Motivation. Low Code Quality 
Motivation. It is Fun! 
Related Works 
●
DEF CON 25 Offensive Malware Analysis: Dissecting OSX/FruitFly 
via a Custom C&C Server by Patrick Wardle 
●
DEF CON 25 Digital Vengeance: Exploiting the Most Notorious 
C&C Toolkits by Professor Plum 
●
Targeted attacks: From being a victim to counter attacking by 
Andrzej Dereszowski (SIGNAL 11) 
●
Malware fuzzing: 
○
Rasthofer, S., Arzt, S., Triller, S. and Pradel, M., 2017, May. Making malory behave maliciously: Targeted 
fuzzing of android execution environments. In Software Engineering (ICSE), 2017 IEEE/ACM 39th 
International Conference on (pp. 300-311). IEEE. 
○
F. Peng, Z. Deng, X. Zhang, D. Xu, Z. Lin, and Z. Su. X-force: Force executing binary programs for 
security applications. In Proceedings of the 2014 USENIX Security Symposium, San Diego, CA (August 2014), 
2014 
Legal Issues 
●
Hacking-back is mostly illegal 
○
Attack attribution is very hard and might lead to wrong conclusions 
○
Hard to identify scopes of attack 
○
Check out last year DEF CON Professor Plum’s presentation for more details: 
■
https://www.youtube.com/watch?v=fPhkmAdWH-I 
●
BUT no one can prohibit us to search for bugs in malware 
Possible Benefits. Local Deny of Service (agent) 
Possible Benefits. Remote Deny of Service (agent) 
Benign service 
Botnet 
DDoS-attack 
Possible Benefits. Remote Deny of Service (agent) 
Benign service 
Botnet 
Possible Benefits. Remote Deny of Service (agent) 
Benign service 
Botnet 
Possible Benefits. Remote Code Execution (agent) 
1. Take control over botnet or shutdown botnet 
2. Track down botnet owners 
3. ????? 
4. PROFIT 
Possible Benefits. Remote Code Execution in C&C 
Fuzzing 
●
Nowadays, fuzzing is a state-of-the-art approach to find bugs 
in modern applications 
●
Fuzzing is a part of SDLC 
●
Fuzzing is very important for applications & OS security 
Fuzzing 
What is Coverage-Guided Fuzzing ? 
What is Coverage-Guided Fuzzing ? 
What is Coverage-Guided Fuzzing ? 
What is Coverage-Guided Fuzzing ? 
Why Coverage-Guided Fuzzing ? 
~minutes for AFL and thousand years for dump fuzzer  
State-of-the-art  Coverage-Guided Fuzzers 
●
AFL 
○
http://lcamtuf.coredump.cx/afl/ 
●
Libfuzzer 
○
https://llvm.org/docs/LibFuzzer.html 
●
AFL’s forks 
○
kAFL – AFL for kernel-level fuzzing  
○
WinAFL – AFL fork for Windows binaries fuzzing 
○
and many others: 
https://github.com/mirrorer/afl/blob/master/docs/sister_projects.txt 
AFL Source Code Instrumentation Approach 
●
Custom gcc (afl-gcc) compiler is used to inject 
instrumentation routines for each basic block 
●
Main routine after instrumentation looks like this: 
Challenge I. Source Code 
No Source Code 
Challenge II. Obfuscation 
Challenge III. Encryption 
●
Most C&C channels are encrypted 
●
We need to encrypt our test case the same way as malware to be 
able to find bugs 
●
By default, AFL doesn’t support encryption, checksums and 
crypto signatures generation 
○
There is a post processor library to deal with that 
WinAFL 
●
WinAFL is a port of AFL for Windows. Rely on DynamoRIO dynamic 
binary instrumentation framework. 
○
No need for source code access 
○
Open-source 
○
Fast-enough to use for coverage-guided fuzzing 
https://github.com/ivanfratric/winafl 
https://github.com/DynamoRIO/dynamorio 
Dynamic Binary Instrumentation (DBI) is a 
technique of analyzing the behavior of a binary 
application at runtime through the injection of 
instrumentation code. 
How Does DynamoRIO Work ? (10000 foot view) 
Target application 
Launcher 
DynamoRIO 
Application in memory 
Kernel 
shared system libs 
How Does DynamoRIO Work ? (10000 foot view) 
Target application 
Launcher 
DynamoRIO 
Launch (suspended) 
(1) 
Application in memory 
Kernel 
shared system libs 
. 
. 
How Does DynamoRIO Work ? (10000 foot view) 
Launcher 
DynamoRIO 
Launch (suspended) 
(1) 
Application in memory 
Kernel 
(2) 
Inject instrumentation  
library 
Target application 
shared system libs 
Target application 
shared system libs 
How Does DynamoRIO Work ? (10000 foot view) 
Launcher 
DynamoRIO 
Launch (suspended) 
(1) 
Application in memory 
Kernel 
(3) 
Hook entry point 
DynamoRIO lib + user-defined libs 
Target application 
shared system libs 
How Does DynamoRIO Work ? (10000 foot view) 
Launcher 
DynamoRIO 
Launch (suspended) 
(1) 
Application in memory 
Kernel 
(3) 
Hook entry point 
DynamoRIO lib + user-defined libs 
ins2 
basic block 
ins3 
ins1 
Take first basic block 
(4) 
Target application 
shared system libs 
How Does DynamoRIO Work ? (10000 foot view) 
Launcher 
DynamoRIO 
Launch (suspended) 
(1) 
Application in memory 
Kernel 
(3) 
Hook entry point 
DynamoRIO lib + user-defined libs 
ins2 
basic block 
transformation 
(5) 
ins1 
ins2 
DR’s ins6 
ins3 
ins1 
Code cache 
DR’s ins1 
DR’s ins2 
DR’s ins3 
DR’s ins4 
DR’s ins5 
ins3 
(4) 
Take first basic block 
Target application 
shared system libs 
How Does DynamoRIO Work ? (10000 foot view) 
Launcher 
DynamoRIO 
Launch (suspended) 
(1) 
Application in memory 
Kernel 
(3) 
Hook entry point 
DynamoRIO lib + user-defined libs 
Take first basic block 
(4) 
ins2 
basic block 
transformation 
(5) 
ins1 
ins2 
DR’s ins6 
ins3 
ins1 
Code cache 
DR’s ins1 
DR’s ins2 
DR’s ins3 
DR’s ins4 
DR’s ins5 
ins3 
Take next basic block 
(6) 
Challenges 
●
Lack of source code 
●
Obfuscation 
●
Encryption 
Challenges 
●
Lack of source code – WinAFL + DynamoRIO 
●
WinAFL supports only file-based fuzzing  
●
Obfuscation 
●
Encryption 
WinAFL patch (netAFL) 
    Malware (main module) 
Malware in memory 
   DynamoRIO shared lib 
winafl shared lib 
  AFL fuzzer 
Fuzzer in memory 
User-defined encryption 
Client/server module 