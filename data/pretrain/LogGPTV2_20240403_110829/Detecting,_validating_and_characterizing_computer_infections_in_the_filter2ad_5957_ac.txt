triggered in temporal proximity to the infection incident.
We evaluate the quality of the alerts based on the follow-
ing assumption: we consider that oversimpliﬁed signatures
will tend to generate too many false positives, since it is
very likely that they get triggered by benign traﬃc. On the
other hand complex signatures are much more reliable. In
order to evaluate the complexity of a signature we check if
speciﬁc byte sequences within a packet are checked, if the
rule speciﬁes the ports, packet size and TCP/IP ﬂags, if pre-
vious packets of the same ﬂow are taken into account, and
if regular expressions are being used.
Blacklists: We use independent blacklists in order to
characterize a suspected host and its communicating remote
hosts. We use information provided by ﬁve publicly avail-
able blacklists [22, 23, 28, 15, 17] and by one commercial
blacklist [27]. We then inspect if an internal node is listed
in any of these blacklists within the analyzed tracing pe-
riod, and if we get a hit we tag the node based on the type
of blacklist that generated the hit, e.g., spam or botnet list.
Note that due to the rather high percentage of false posi-
tives [45] in most reputation-based blacklists, a blacklist hit
is insuﬃcient evidence to conﬁrm a suspected infection. It
is though a useful indicator that needs to be correlated with
additional observations. Moreover, we perform the same
blacklist search for external hosts that the analyzed internal
machine communicated with. For example communication
with hosts within the Russian Business Network, a network
providing hosting services to cyber-criminals, could signify
that the user visits some dangerous websites or that he is
redirected to these URLs by an active clickbot [11] or spy-
ware.
Threat Reports: Threat reports are publicly available
security logs provided by automated systems [14] or security
companies [29, 18] that analyze the behavioral patterns and
common actions of a wide range of security threats including
worms, trojans, and spyware. They provide a security rep-
utation value for domains based on their observed activity
during a speciﬁc interval. By investigating threat reports
we can identify if a suspected host is contacting URLs that
correspond to botnet rendez-vous points or malware land-
ing pages to receive instructions, perform updates or share
stolen conﬁdential data.
Web-based Host Proﬁling: Apart from relying on net-
work traces and threat analysis reports to build a security
proﬁle for a suspected host, we also use publicly available
data residing on the web, which often provide useful infor-
mation about the role (type of server, etc.) and involve-
ment of hosts in security incidents [50]. This information
originates from several diverse sources such as DNS-lists,
website access logs, proxy logs, P2P tracker lists, forums,
bulletins, banlists, IRC-lists, etc. In order to retrieve this
information we query the Google search engine using as in-
put string the IP of the analyzed host and the respective
domain name we get using a reverse-DNS lookup.
In an
semi-automated fashion we search for tags that reveal pos-
sible roles or actions of the host such as ’trojan’, ’botnet’,
’spam’,’irc server’, ’adserver’, ’pop3’ and ’webserver’.
Reconaissance and Vulnerability Reports: Analyz-
ing network based data provides us with rich information
regarding the behavioral patterns exhibited by a monitored
34host. However, we do not get any information about the
running services, the patching level of critical components,
and the existence or absence of vulnerabilities. Naturally,
this type of information can be used to validate if an in-
vestigated node is susceptible to a speciﬁc type of infection
or if the set of alerts used to infer the infection correspond
to false positives, since they are not relevant to the build
and operation of the speciﬁc node. Our network security
assessment process consists of the following steps:
1. Host Enumeration and Basic Reconnaissance. In this
step we use basic reconnaissance techniques such as
IP sweeps, NIC whois querying, and TCP/UDP port-
scanning in order to identify if a host is reachable and
exposed to external attacks. In addition, we determine
its role within the infrastructure, such as web, mail, or
DNS server.
2. Network Scanning and Probing. In this step we per-
form targeted network scanning using nmap in order to
retrieve detailed information regarding the TCP and
UDP network services running on suspicious hosts, de-
tails about the OS type and version, and information
regarding the types of ICMP messages a host responds
to, which reveals its ﬁltering policies and ﬁrewall eﬀec-
tiveness.
3. Investigation of Vulnerabilities. After having detected
the accessible network services, we investigate the cor-
responding host for known vulnerabilities. We use
publicly available sources [16, 24, 21] to identify the
existence of exploitable bugs on running services. We
augment this assessment with complementary infor-
mation provided from vulnerability scanners, namely
Nessus [25] and OpenVas [26], in order to build a com-
prehensive proﬁle regarding the vulnerability status of
a node.
4.2 Security Assessment
To better understand the security assessment process, in
the following, we outline a set of frequent infection cases we
established during our validation. For each case, we mapped
the collected evidence into the behavior that was manifested
by a speciﬁc malware. The four cases correspond to the
four main types of malware we found in our infrastructure,
namely backdoors, spyware, worms, and trojans1.
Case 1: Backdoor infection. W32/SdBot is a typi-
cal family of IRC-controlled trojans with more than 4,000
known variants. It is used by cybercriminals as backdoor in
order to gain unauthorized access to a target machine and
perform unsolicited actions such as stealing private informa-
tion or launching active attacks. The typical vulnerabilities
we search for when we investigate an SdBot-related infection
are the MS-LSASS buﬀer overﬂow, the MS-RPC malformed
message buﬀer overﬂow, and the MS-WebDav vulnerabili-
ties. These are related to the MS network shares services,
which are exploited by the trojan to propagate. Regarding
1We note that this is not a unique malware taxonomy.
Putting malware into a taxonomy is challenging as most mal-
ware today have a complex behavior, usually incorporating
multiple components allowing them to propagate, communi-
cate with remote hosts to receive commands, and automati-
cally update or initiate the download of additional malicious
software.
its command and control (C&C) activity, an infected host
will attempt to use IRC to contact the adversary in order
to receive instructions. This communication will typically
trigger alerts with ID within the ranges [2500000:2500500]
and [9000077:9000113]. The communicated C&C is typically
present in our blacklst or/and proﬁling data. Additionally,
the malware might try to propagate to other subnets. In this
case we expect to see extensive scanning activity (mostly
on port 445).
If a vulnerable host is found and exploited
successfully, then the trojan will either attempt to down-
load a version of itself or other additional malware (typically
W32/Koobface and Trojan.FakeAV) via ftp.
Case 2: Spyware Infection. The Win32/Hotbar type
of malware is the most widespread infection in our infras-
tructure. Most variants appear as a web-browser add-on
that provides a seemingly legitimate functionality. However,
this malware will clandestinely steal and report user conﬁ-
dential data, like banking information, passwords, browsing
habits, etc. For this type of infection, we ﬁnd IDS alerts with
IDs in the range [2003305:2003500]. We trust these alerts as
the signatures are quite complex and the malware does not
put any eﬀort in disguising. Moreover, the malware operates
as clickbot, changing results displayed by search engines and
generating pop-ups to redirect the user to potentially mali-
cious websites. These domains are likely to appear in our
blacklists or/and web proﬁling data, usually with tags like
’malware-hosting’, ’fraudulent’, and ’phishing’.
Case 3: Worm Infection. W32/Palevo is the most
common malware type found in the rather short list of worm-
related infections detected in our infrastructure.
It usu-
ally spreads automatically using P2P ﬁle sharing or Instant
Messaging (IM) spam. When investigating this type of in-
fection we expect to see IDS alerts with IDs in the range
[2801347:2801349], which are worm speciﬁc, or more generic
alerts related to activities complying with a P2P or IM
protocol (typically IDs in the ranges [2451:2461], [549:565]
and [2008581:2008585]). The worm will attempt to directly
contact C&C nodes, without hiding the communication in
an IRC channel, using an ephemeral set of port numbers.
Commonly, the remote hosts irc.ekizmedia.com, story.
dnsentrymx.com, and irc.snahosting.net are contacted.
These malicious domains usually appear both in our black-
list data and in our proﬁling information with tags including
’botnet’, ’C&C’, ’Rimecud’, and ’Mariposa’.
Case 4: Trojan infection. Win32/Monkif is a typi-
cal trojan that will attempt to fetch and install malicious
software on a victim host. This type of malware is usually
bundled with pirated software or is pushed to the victim
by using phishing or social engineering attacks. When we
investigate this family of infections we expect the host to
connect to speciﬁc domains (including www.clicksend.biz
and stats.woodmedia.biz) in order to download malicious
binaries. These domains are likely to appear in our threat
reports as malware hosting and generate tags as ’trojan’,
’botnet’, ’malware’ and ’downloader’ in our host proﬁling
results.
The manual security assessment lasted for approximately
one month. On a daily basis a security expert was given
a list of suspected infections produced by our heuristic for
the previous day along with a pool of evidence that were
extracted in a semi-automated way. The expert thoroughly
investigated in total 200 infections. During the ﬁrst week
of the validation process, two experts assessed indepedently
35the same suspected infections and then compared, discussed
and converged on their assessments.
4.3 Validation Results
In Table 3 we summarize the number of suspected and
veriﬁed infections along with the corresponding false posi-
tive rate for the four types of infections. We ﬁrst note that
the overall false positive rate is approximately 15%, which
is remarkable. Recall that in our input data, we observe on
average 3 million alerts per day, which we believe include a
large number of false positives. By reversing our bundling
procedure we ﬁnd that only 0.6% of our input alerts of the
class Attack and Compromise are associated with an infec-
tion. Our heuristic helps focus the attention of administra-
tors to a small number of actionable cases that include sub-
stantially fewer false positives. The false positive rate for
trojans, spyware, worms, and backdoors is 12.3%, 10.6%,
11%, and 35%, respectively.
Table 3: Validated infections for diﬀerent infection
types
Reported Validated False Positive
Incidents
Rate (%)
Incidents
Trojans
Spyware
Worms
Backdoors
97
66
9
28
85
59
8
18
12.3
10.6
11.0
35.0
Moreover, to understand better the strengths and limita-
tions of our heuristic, we investigate the root causes of the
observed false positives. The following cases were the source
of most false positives.
DNS Servers. First, we ﬁnd that DNS servers within our
infrastructure frequently trigger signatures from the Com-
promise class. The reason is that they often attempt to
resolve domains that are considered malicious. These DNS
requests trigger signatures that check the destination IP ad-
dress and compare it against a list of known compromised
hosts. An alert will be raised in this case, typically with IDs
in the range [2500000:2500941], which corresponds to back-
door related activity. DNS related false positives are mainly
responsible for the inﬂated value regarding backdoors false
positive rate shown in Table 3. However, a network admin-
istrator should be able to easily identify that these incidents
do not constitute actual infections, and ﬁlter them out.
Skype Supernodes. Second, Skype supernodes within
our network generate alerts with IDs in the ranges [2406000:
2406966] and [2500433:2500447]. Skype supernodes connect
Skype clients by creating the Skype P2P overlay network.
However, if it happens that a remote Skype user connecting
to a local supernode is blacklisted, then Snort will trigger
an alert identifying this system as malicious. This commu-
nication is persistent and frequent since whenever a Skype
client attempts to initiate a communication, it will access a
distributed database provided by supernodes in order to get
the details of the contacted peer.
Antivirus. Third, a speciﬁc antivirus program generates
IDS alerts of the class Compromise while updating. The
triggered signatures check for known patterns of malicious
activity found on the payload of the transmitted packets. It
appears that the updates of this antivirus contain the actual
pattern that it attempts to detect in plain format.
Online Games. Finally, we have observed that certain
types of online games generate Snort alerts with IDs in the
ranges [2003355:2003626] and [2510000:2510447]. In the case
of browser-based games the triggered signatures suggest that
there is an ongoing spyware-related activity. The reason is
that the corresponding websites exhibit a behavior that is
very similar to clickbots, attempting to redirect the player
to 3rd party, potentially malicious, websites for proﬁt. In
the case of standalone gaming applications, we observe that
the client will tend to preserve multiple concurrent connec-
tions with several other players. Often a small set of these
remote IPs originate from domains which are blacklisted,
and therefore an alert is raised.
4.4 Fine-tuning the Heuristic
As discussed in Section 3.3 an important parameter of
our heuristic is the J-Measure threshold that determines if
a speciﬁc tuple will be tagged as an active infection.
In
order to adjust this threshold we performed the discussed
validation process on an additional small set of nodes in the
local subnet of our institute. The duration of this training
phase was two weeks and occurred chronologically before the
main validation. During this period we run our heuristic
using variable J-Measure threshold values and evaluated its
inference results.
For the local subnet of our institute we were able to use
very reliable information sources to validate a small number
of detected infections. In particular, for a set of nodes we
physically visited their owners and veriﬁed an infection ei-
ther by performing an on the spot assessment of a system or
by receiving a conﬁrmation from an owner aware that her
system was indeed infected. Secondly, our second very reli-
able information source for our local subnet is security tick-
ets of our IT team. These are logged events about security
incidents that have been detected, assessed, and remediated.
Using information for 28 systems we adjusted the J-Measure
threshold in a conservative manner, i.e., aiming at keeping
the false positives as low as possible, but without increas-
ing the false negatives signiﬁcantly. Selecting a threshold
of 0.85
P (Y ) achieved a good tradeoﬀ, limiting the false positive
rate to below 10% and the false negative rate to below 23%.
For threshold values below 0.80
P (Y ) the corresponding false pos-
itive rate increases above 24%, whereas for threshold values
above 0.90
P (Y ) we miss more than 32% of active infections.
5. CHARACTERIZING INFECTIONS
Volume and Types of Infections: The ﬁrst interest-
ing ﬁnding, illustrated in Figure 4, is that on a daily basis
from an average of 11,850 active2 hosts, we detect on average
50 new infections. The vast majority of the infected hosts
correspond to client machines. Speciﬁcally 97% of the to-
tal reported incidents occur in end-host systems whereas we
only see on average 10 infections per week on servers. If we
normalize these numbers based on the total number of ac-
tive servers and clients in our infrastructure, we see that the
probability of infection for a server system during a speciﬁc
day is 0.18%, whereas the corresponding value for clients is
0.37%.
The relatively small number of server infections can be
attributed to two causes. Firstly, these systems are heavily
2An active host generates at least one IDS alert during an
indicated period
365
10
4
10
e
m
u
o
V
l
3
10
2
10
1
10
0
10
0