### 启动映像
启动映像中的引用根据根映射来确定，而根映射压缩了包含引用的启动映像中的所有偏移。要确定栈上和寄存器中的引用，该方法与其在异常模式中所用的方式相同（参见10.5.4节）。编译器会根据具体情况提供一个迭代器，用于处理寄存器和栈中的这些引用。

### JikesRVM集成
JikesRVM在对象表示的初始创建期间与MMTk结合，提供迭代器来处理引用、对象分配和障碍实现。对象分配和障碍对性能有显著影响；由于MMTk是用Java编写的，因此相关代码可以直接连接到高效的编译代码。障碍在垃圾收集计划中是必需的，例如，读障碍对于捕获可能被并行垃圾收集器复制的对象使用情况是必需的，而写障碍则用于分代收集器中，当写入旧对象时，必须将该对象作为年轻代回收的根。

### 小结
MMTk提供了一组功能强大且精确的垃圾收集器。能够轻松地将JikesRVM与MMTk的不同模块链接起来，这使得开发变得容易且减少了开销。出于性能考虑，JikesRVM还内联了部分MMTk。用Java编写垃圾收集算法使实现人员无需关注编译器内部的情况。Java固有的线程支持使得垃圾收集器并行且与运行时模式紧密结合。Java库为收集器接口提供了灵感，从而简化了用MMTk编写新的垃圾收集器的过程。

### 10.6 经验教训
JikesRVM是一个成功的实验虚拟机，以灵活且易于扩展的方式提供了接近顶级的性能。使用运行时支持的语言编写，这允许紧密集成和组件重用。Java的使用使得编写简单易懂的代码、保持良好的模块性和利用高质量工具成为可能（如集成并发环境）。
随着Java语言和JVM实现的发展，JikesRVM也在不断进化。一个有趣的发展是X10编程语言，它通过提供线程安全保证来解决多核心系统并发应用程序的问题，正如Java中的垃圾收集提供内存安全保证一样。JikesRVM的代码已经为X10的开发提供了出色的测试环境。由于JVM实现引起了新的优化（如新的垃圾收集技术和对象内联），将这些优化嵌入到框架（如RVM）中意味着运行时、编译器和代码基也得到了改进，并展示了元循环的效率。

### 元循环环境的扩展性
元循环环境的扩展性使JikesRVM成为一个进行多语言虚拟机试验的出色平台。这种扩展也允许JikesRVM的概念以不同的编程语言实现。JikesRVM有许多其他有趣的扩展和相关项目，包括通过二进制翻译支持C和C++等语言，通过扩展在虚拟机内部提供面向方面的编程，以及将整个虚拟机整合到操作系统中以消除运行时优化的障碍。尽管最初存在争议，但如今垃圾收集、自适应优化和链接时优化已成为开发人员期望的特性。JikesRVM演示了如何通过共同的元循环环境来实现和适应这些特性。JikesRVM支持一个大型研究团体并获得了高性能。凭借其优雅的架构，JikesRVM可以为未来的运行时环境持续提供一个平台。

### 参考文献
- Abelson, Harold, Gerald Jay Sussman, and Julie Sussman. 1985. *Structure and Interpretation of Computer Programs*. Cambridge, MA: MIT Press.
- Aho, Alfred, Ravi Sethi, and Jeffrey Ullman. 1986. *Compilers, Principles, Techniques, and Tools*. Boston, MA: Addison-Wesley.
- Alpern, Bowen, et al. 2005. "The Jikes Research Virtual Machine project: Building an open-source research community." *IBM Systems Journal*, vol. 44, issue 2.
- Blackburn, Steve, Perry Cheng, and Kathryn McKinley. 2004. "Oil and water? High performance garbage collection in Java with MMTk." *International Conference on Software Engineering (ICSE)*, Edinburgh, Scotland. ACM, May 2004.
- Bodik, Rastislav, Rajiv Gupta, and Vivek Sarkar. 2000. "ABCD: Eliminating array-bounds checks on demand." *ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI 2000)*, Vancouver, British Columbia, Canada. ACM, June 2000.

### 第四部分 最终用户应用架构
#### 第11章 GNUEmacs：滋长的特性是其优势
- **原则与特性**
  - 功能多样性
  - 模块
  - 概念完整性
  - 依赖关系
  - 修改独立性
  - 进程
  - 自动传播
  - 数据访问
  - 可构建性
  - 增长适应性
  - 熵增抵抗力

#### 11.1 使用中的Emacs
Emacs是一个类似于你常用的文本编辑器的软件。当你用Emacs打开一个文件时，会弹出一个窗口显示文件内容。你可以修改内容并保存退出。然而，Emacs并不一定在所有情况下都高效，如果它的功能对你不是全都有用，那么你可能会抱怨它的启动速度比流行的文本编辑程序慢。在这种情况下，我不会使用Emacs。

Emacs的设计理念是只需要启动一次，然后一直运行。你可以在一个Emacs会话中编辑多个文件并保存修改。Emacs能将这些文件保存在内存中而不用显示它们，所以你看到的就是当前的文件，当你需要对其他文件进行编辑时也能马上切换过去。有经验的Emacs用户只会在发现计算机内存不足时才关闭文件，因此长时间运行的Emacs会话可能会打开成百上千个文件。

图11-1展示了打开了两个帧的一个Emacs会话。左边的帧分为三个窗口，分别显示Emacs广告页、可浏览的目录列表以及Lisp交互界面的缓冲区。右边的帧只有一个窗口，显示的是存储源代码的缓冲区。

这里涉及三种最基本的对象：
- **帧**：Emacs对计算机图形界面中窗口的称呼。在前面的屏幕截图中显示了两个紧挨着的帧。如果以文本终端使用Emacs（例如通过telnet或ssh连接），那么这个终端也是Emacs中的帧。Emacs可以管理多个图形帧，也可以同时管理多个终端帧。
- **窗口**：帧的一部分。要创建一个新的窗口，只能通过将原有窗口分成两个。当你关闭某个窗口时，空间会被邻近的窗口占据，结果是一个帧中的窗口始终会填满整个帧的内容。只有当前选中的窗口才会对键盘命令进行响应。窗口是轻量级的，在使用时会频繁地创建和关闭。
- **缓冲区**：用来保存可编辑的文本内容。Emacs会将打开的文件中的文本内容保存在缓冲区中，但缓冲区中的内容并不一定必须与某个文件关联。它可能包括搜索结果、在线文档，以及刚输入还没有保存到任何文件中的内容。每个窗口将显示某些缓冲区的内容，而一个缓冲区可能保存0个、1个或多个窗口。