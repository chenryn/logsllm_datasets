启动映像。启动映像中的引用根据根映射来确定，而根映射压缩了
包含引用的启动映像中的所有偏移。要确定栈上和寄存器中的引
用，这个方法和在它内部的位置都按异常模式中所用的相同方式来
确定（参见前面的10.5.4节）。根据编译器确定的方法，它可以为
MIMTk提供一个处理寄存器和栈来返回这些引用的选代器。
JikesRVM集成
JikesRVM在对象表示的初始创建期间和MIMTk结合在一起，提供选
代器来处理引用、对象分配和障碍实现。对象分配和障碍会影响性
能；因为MIMTk是用Java编写的，所以，关联的代码可以直接连接
到高效的编译代码。因为多种原因，障碍在垃圾收集计划中是必需
的。例如，读障碍对于捕获可能被一个并行垃圾收集器复制的对象
的使用情况是必需的，而写障碍用于分代收集器中，在那儿，写一
个旧的对象就意味着必须把这个旧的对象当作年轻代回收的根。
小结
MMTk提供了一组功能强大而且流行和精确的垃圾收集器。能够容
易地把JikesRVM和MMTk的不同模块链接起来，这使开发变得容易
而且减少了开销，出于性能的考虑，还使JikesRVM内联了部分
MMTk。用Java编写垃圾收集算法使得垃圾收集器的实现人员不用
考虑编译器内部发生的情况。Java固有的线程已经使得垃圾收集器
并行且和运行时模式结合在一起。Java的库为收集器的接口提供了
灵感，这意味着用MMTk编写新的垃圾收集器已经显著地简化了。
10.6经验教训
JikesRVM是一个成功的实验虚拟机，以一种灵活和易于扩展的方式
提供近似于艺术级的性能。以运行时支持的语言来编写，这允许紧
密的集成和组件重用。Java的使用使简单易懂的代码、好的模块性
和高质量工具的使用（例如集成并发环境）成为可能。
Java语言和IVM的实现正在发展中，JikesRVM已经而且还将不断地
随着这些改变而发展。一个有趣的发展是X10编程语言，它通过提
供线程安全的保证来处理程序员如何为许多核心系统并发应用程序
的问题，正如Java中垃圾收集提供内存安全保证一样。JikesRVM的
代码已经为X10的开发提供了一个出色的测试环境。因为JVM的实
1164
---
## Page 1166
现引起了新的优化，例如新的垃圾收集技术或对象内联，所以，把
这些优化嵌入到一个框架（例如RVM）中意味着运行时、编译器和
代码基也改进和展示了元循环的效率。
元循环环境的扩展性使JikesRVM成为一个进行多语言虚拟机试验的
出色的平台。这种扩展也允许JikesRVM的概念以不同的编程语言实
现。
JikesRVM有许多其他有趣的扩展和相关的项目，包括通过二进制翻
译支持像C和C++这样的语言，通过扩展在虚拟机内部提供面向方
面的编程，使整个虚拟机进入一个操作系统以消除运行时优化的障
碍。虽然最初存在争议，但是现在，垃圾收集、自适应优化和链接
时优化是开发人员所期望的。JikesRVM演示了如何通过一个帮助开
发的共同的元循环环境来达到和适应这些特性。JikesRVM支持一个
大的研究团体并获得了高性能。通过拥有一个美丽的架构，Jikes
RVM可以为将来的运行时环境连续地提供一个平台。
参考文献
Abelson,Harold,Gerald Jay Sussman,and Julie Sussman. 1985.Structure
and Interpretation of Computer Programs.Cambridge,MA:MlTPress
Aho,Alfred,Ravi Sethi,and Jeffrey
Ullman.1986.Compilers,Principles,Techniques,and Tools.Boston,MA:
Addison-Wesley.
Alpern,Bowen,et al. 2005."The Jikes Research Virtual Machine project:
Building an open-source research community."IBM Systems
Journal,vol.44, issue 2.
Blackburn,Steve,Perry Cheng,and Kathryn McKinley. 2004.Oil and
water?High performance garbage collection in Java with
MMTk（pp.137-146）.InternationalConference on Software
Engineering,Edinburgh,Scotland.ACM,May'04
Bodik,Rastislav,Rajiv Gupta,and Vivek Sarkar. 2000.ABCD: eliminating
array-boundschecks on demand.ACMSIGPLAN Conference on
Programming Language Design and Implementation （PLDI 2000），
Vancouver,British Columbia,Canada.ACM'O0.
1165
---
## Page 1167
Choi,Jong-Deok,et al. 1999.Efficient and Precise Modeling of Exceptions
for the Analysis of Java Programs.ACM SIGPLAN-SIGSOFT Workshop
on Program Analysis for Software Tools and
Engineering (PASTE'99），Toulouse,France: ACM,Sept.'99.
Fink,Stephen,Kathleen Knobe,and Vivek Sarkar.20o0.Unified Analysis of
Array and Object References in Strongly Typed Languages.Static Analysis
Symposium (SAS 2000），Santa Barbara,CA: Springer Verlag.
Ingalls,Daniel,et al. 1997."Back to the future: the story of Squeak,a
practical Smalltalk written in itself."ACM SIGPLAN Notices,vol.13,
issue 10: 318-326.
Jones,Richard and Rafael Lins.1996.Garbage Collection: Algorithms for
Automatic Dynamic Memory Management.Hoboken,NJ: John Wiley and
Sons.
McCarthy,John,et al. 1962.LISP 1.5 Programmer's
Manual.Cambridge,MA:MIT Press.Piumarta,Ian,andFabio
Riccardi.1998."Optimizing direct threaded code by selective
inlining."ACM SIGPLAN Notices,vol.33, issue 5: 291-300.
Rogers,Ian,Jisheng Zhao,and Ian Watson. 2008.Boot Image Layout For
Jikes RVM.Implementation,Compilation,Optimization of Object-Oriented
Languages,Programs and Systems (ICOOOLPS'08）,
Paphos,Cyprus.July'08.
第四部分最终用户应用架构
第11章GNUEmacs：滋长的特性是其优势
第12章当集市开始构建教堂
第11章GNUEmacs：滋长的特性是其优势
Jim Blandy
原则与特性
结构
1166
---
## Page 1168
V功能多样性
√模块
概念完整性
依赖关系
V修改独立性
进程
自动传播
数据访问
可构建性
V增长适应性
V熵增抵抗力
我常使用Emacs，它是一种功能超强的文字处理程序。它的作者是
RichardStallman。它是用Lisp语言编写，这是唯一的一种优美的计
算机编程语言。它很庞大，而且只能编辑纯ASCII的文本文件，也
就是说，没有字体、不能加粗、无法添加下划线.....如果你是一名
专业的作者，即不需要考虑对文字设置格式、生成打印稿，那么
Emacs会使其他编辑软件相形见细，就像正午的太阳相对于星星一
样。它不仅庞大、光芒四射；而且能使其他的东西化为乌有。
—NealStephenson
GNUEmacs文本编辑器和其恶名并不相配。它的支持者认为它是无
可比拟的，甚至顽固地拒绝使用现在更流行的文本编辑器。而其反
对者说它隐晦、复杂，而且和VisualStudio这样的主流开发环境相
比，它显然有些过时了。甚至有些爱好者也抱怨，Emacs中复杂的
组合键弄伤了自己的手腕。
Emacs所激起的争论和Emacs所提供的功能一样多。当前版本的
Emacs拥有110万行代码，它是用Emacs自己的编程语言EmacsLisp编
写的。其中有一些代码是用来帮助你更好地使用C、Python以及其他
1167
---
## Page 1169
语言完成编程任务的。同时还有一些代码是用来帮助你完成程序调
试，在程序员之间进行协作，阅读电子邮件和电子新闻，浏览和搜
索文件夹，以及解决符号代数问题。
继续探究其内幕，情况就有些奇怪了。EmacsLisp并不支持对象，
它的模块系统就是一种命名规范，所有基本的文本编辑操作使用了
隐晦的全局变量，甚至局部变量也不是很局部。Emacs对许多广泛
接受的、有用的、有价值的软件工程原则都不屑一顾。其代码已经
有24年的历史了，体系庞大，是由成百上十的不同开发人员共同完
成的。总的来说，整个代码在不断膨胀中。
但它却工作得很好。其功能集不断地成长；用户界面中不断增加了
许多令人着迷的新行为；而且整个项目有效避免了对基础架构的大
幅修改、频繁的交互、领导者的冲突和分歧。其活力的源泉是什
么？它有什么局限性？
最后，其他软件可以从Emacs中学到什么？如果有一个新架构需要
实现与Emacs相同的目标，在度量是否成功时应问什么问题？综观
全章，我们将分析这三个问题，相信这样就能够挖掘出Emacs架构
中最有价值的特性。
11.1使用中的Emacs
在探讨其架构之前，我们先简单看看Emacs是什么。它和你经常使
用的其他文本编辑器类似。当你用Emacs打并一个文件时，将弹出
一个窗口，并显示出该文件的内容。你可以对其内容进行修改，然
后保存这些修改后退出。但是，Emacs并不一定在所有情况下都十
分有效，如果它的功能对你不是全都有用，那么你可能会抱怨它的
启动速度要比流行的文本编辑程序更慢。当遇到这种情况时，我不
会使用Emacs。
Emacs的设计预想是你需要时只启动一次，然后一直运行着它。你
可以在一个Emacs会话中对多个文件进行编辑，并保存修改。Emacs
能将这些文件保存在内存中而不用显示它们，所以你看到的就是当
前的文件，当你需要对其他文件进行编辑时也能够马上切换过去。
有经验的Emacs用户只会在发现计算机内存不足时才关闭文件，因
此运行很久的Emacs会话可能会打开成百上千个文件。图11-1所示
的屏幕截图展示了打开了两个帧的一个Emacs会话。左边这个帧分
成了三个窗口，分别显示了Emacs广告页、可浏览的目录列表以及
1168
---
## Page 1170
展示Lisp交互界面的缓冲区（buffer）。右边的帧只有一个窗口，显
示的是存储源代码的缓冲区。
这里涉及了三种最基本的对象：帧、窗口、缓冲区。
顿是Emacs对计算机图形界面中窗口的称呼。在前面的屏幕截图中
显示了两个紧挨着的帧。如果以文本终端使用Emacs，例如通过
telnet或ssh连接，那么这个终端也是Emacs中的顿。Emacs可以管理
多个图形帧，也可以同时管理多个终端帧。
窗口是帧的一部分。1L要创建一个新的窗口，只能通过将原有窗口
分成两个，当你关闭某个窗口时，将把空间给邻近的窗口；这样的
结果是一个帧中的窗口始终会填满整个帧的内容。只有当前选中的
窗口，才会对键盘命令进行响应。窗口是轻量级的，在使用时经常
会频繁地创建和关闭。
Y
图11-1：使用中的Emacs
而缓冲区用来保存可编辑的文本内容。Emacs将会把打开的文件中
的文本内容保存在缓冲区中，但缓冲区中的内容并不一定必须与某
个文件关联：它可能包括搜索结果、在线文档，以及刚输入还没有
保存到任何文件中的内容。每个窗口将显示某些缓冲区的内容，而
一个缓冲区可能保存0个、1个或多个窗口。
1169
---