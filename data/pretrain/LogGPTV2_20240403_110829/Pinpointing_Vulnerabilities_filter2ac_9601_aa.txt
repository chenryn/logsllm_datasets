title:Pinpointing Vulnerabilities
author:Yue Chen and
Mustakimur Khandaker and
Zhi Wang
Pinpointing Vulnerabilities
Yue Chen
Florida State University
PI:EMAIL
Mustakimur Khandaker
Florida State University
PI:EMAIL
Zhi Wang
Florida State University
PI:EMAIL
Abstract
Memory-based vulnerabilities are a major source of attack vec-
tors. They allow attackers to gain unauthorized access to computers
and their data. Previous research has made signiﬁcant progress in
detecting attacks. However, developers still need to locate and ﬁx
these vulnerabilities, a mostly manual and time-consuming process.
They face a number of challenges. Particularly, the manifestation of
an attack does not always coincide with the exploited vulnerabili-
ties, and many attacks are hard to reproduce in the lab environment,
leaving developers with limited information to locate them.
In this paper, we propose Ravel, an architectural approach to
pinpoint vulnerabilities from attacks. Ravel consists of an online
attack detector and an oﬄine vulnerability locator linked by a record
& replay mechanism. Speciﬁcally, Ravel records the execution of
a production system and simultaneously monitors it for attacks.
If an attack is detected, the execution is replayed to reveal the
targeted vulnerabilities by analyzing the program’s memory access
patterns under attack. We have built a prototype of Ravel based
on the open-source FreeBSD operating system. The evaluation
results in security and performance demonstrate that Ravel can
eﬀectively pinpoint various types of memory vulnerabilities and
has low performance overhead.
1.
INTRODUCTION
Memory is the ﬁeld of eternal arms races between attacks and de-
fenses [59]. Commodity operating systems have employed exploit
mitigation mechanisms such as data-execution prevention (DEP, aka
W ⊕ X) [19, 20], address space layout randomization (ASLR) [60],
mandatory access control (MAC) [32], etc. Yet, attackers can al-
ways ﬁnd a way with new vulnerabilities and new exploit techniques.
Defenses like ASLR can often be bypassed by combining several ex-
ploits. For example, an attacker may exploit an information leak to
de-randomize the victim process before launching a return-oriented
programming (ROP [54]) attack to disable DEP, and then inject and
execute the shellcode.
In light of this, a timely response to new
(zero-day) exploits is essential to defenses.
Many systems have been proposed to detect attacks. However,
they often focus on detecting symptoms of attacks. A detected
attack thus does not necessarily coincide with the targeted vulner-
abilities. For example, system call (syscall) interposition tries to
detect anomalies in the syscalls made by a protected program [27,
28, 30], based on the observation that an attacker eventually needs
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02 - 06, 2017, Abu Dhabi, United Arab Emirates
© 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053033
1 i n t main( i n t argc , char *argv [])
2 {
3
4
5
6
7 }
char buf [16];
strcpy (buf , argv [1]);
printf ("%s\n", buf);
return 0;
Figure 1: A simple program with a buﬀer overﬂow at line 4.
to make syscalls to perform “useful” malicious activities. Specif-
ically, it models and monitors syscall sequences of that program.
An intrusion alert is raised if an actual sequence deviates from the
model. A detected anomaly in this case reveals neither the initial
attack nor the vulnerabilities it targets. Similarly, the detection of
control-ﬂow hijacking may not concur with the vulnerabilities as
well. For example, taint-based attack detection systems [12, 48]
mark the untrusted inputs as tainted, and propagate those taints
throughout the system. An attack is detected if the program counter
(PC) becomes tainted. Control-ﬂow integrity (CFI [1, 9]) can also
detect such attacks: it instruments the program with inline reference
monitors that check the program’s run-time control ﬂow against its
pre-computed control-ﬂow graph (CFG). A deviation from the CFG
signals that the control-ﬂow has been hijacked. However, neither
taint- nor CFI-based systems can pinpoint the exploited vulnerabil-
ities. This can be illustrated with the simple program in Figure 1
– they both detect the attack at line 6 where the control ﬂow is
ﬁrst hijacked, but the actual vulnerability lies at line 4. Syscall
interposition detects the attack even later, i.e., when an unexpected
syscall is made. In brief, many attack detection systems fall short
of revealing the targeted vulnerabilities.
A system that can not only detect attacks but also pinpoint the ex-
ploited vulnerabilities could greatly help us in the arms-race against
attackers. First, it can signiﬁcantly reduce the window of vulnera-
bility. Developers often spend lots of time to reproduce and analyze
reported attacks. This is usually a manual, time-consuming, and
error-prone process as many attacks are hard to reproduce in the
development environments. Second, it can automatically locate
zero-day vulnerabilities, as long as the attacks can be detected.
Many existing systems can detect zero-day attacks (i.e., they do not
rely on the details of known attacks), including the previously men-
tioned syscall interposition and taint-/CFI-based systems. Lastly,
locating vulnerabilities is an important ﬁrst step towards automatic
software repair and self-healing.
In this paper, we propose Ravel 1, a system that can pinpoint
the targeted vulnerabilities from detected attacks. Ravel stands for
“Root cause Analysis of Vulnerabilities from Exploitation Log.” It
consists of three components: an online attack detector, a record
& replay (R&R) mechanism, and an oﬄine vulnerability locator.
R&R decouples the other two components so that the online attack
detector can operate as eﬃciently as possible to minimize the per-
formance overhead, and the oﬄine vulnerability locator can employ
1Ravel: to undo the intricacies of : Disentangle (M erriam
W ebster )
1
1 i n t process_request ( i n t conn_fd , s t r u c t Header *
packet_header , char * buffer_to_send )
2 {
3
4
5
6
7
8
9
10
11 }
char buffer [ MAX_BUF_LEN ];
size_t size;
ssize_t recved ;
size = ( size_t ) min( packet_header ->length ,
MAX_BUF_LEN );
recved = recv(conn_fd , buffer , size);
save_to_file (buffer , recved );
send(conn_fd , buffer_to_send , size);
return 0;
Figure 2: A vulnerable function used as the running example. There
is a buﬀer overﬂow in line 7 caused by the integer signedness error
in line 6, and an information leak in line 9 caused by the same
integer error.
multiple, time-consuming algorithms to improve its precision and
coverage. As many attack detection techniques have been proposed,
we leverage some existing light-weight detectors (program crashes
and syscall interposition). Note that the development of attack de-
tectors is orthogonal to the Ravel framework. New techniques can
be easily employed by Ravel for better and faster attack detection.
In this paper, we focus on the design of the overall framework
of Ravel and the vulnerability locator, the main contributions of
Ravel. The intuition behind the vulnerability locator is that exploit-
ing a memory vulnerability often causes changes to the data ﬂow,
and the source or the destination of such a change provides a good
approximation to the actual location of the vulnerability [11]. For
example, strcpy in Figure 1 can overﬂow into the return address
on the stack if argv[1] is longer than the buf size. This introduces
a new data ﬂow with strcpy as the source and the return statement
(line 6) as the destination. In this case, the source actually points to
the vulnerability we want to locate. However, data-ﬂow changes in
general can only provide a rough location of the vulnerability. Ravel
further reﬁnes them with vulnerability-speciﬁc analysis to pinpoint
common memory ﬂaws such as integer errors, use-after-free, race
conditions, etc. We have implemented a prototype of Ravel for
the FreeBSD operating system (Release 10.2). Our experiments
with standard benchmarks and various vulnerabilities in popular
applications show that Ravel can pinpoint a variety of memory vul-
nerabilities, and it incurs only a minor performance overhead (about
2% for SPEC CPU 2006, NGINX, Apache, etc.). This demonstrates
Ravel’s eﬀectiveness and practicality.
2. DESIGN OF RAVEL
2.1 System Overview
Given an attack, Ravel aims at automatically pinpointing the
vulnerabilities it targets. There are many challenges in locating
vulnerabilities (in addition to detecting attacks). We use the ex-
ample code in Figure 2 to illustrate them. Many design decisions
in Ravel are made to address these challenges. The code in Fig-
ure 2 is inspired by a real vulnerability in the popular NGINX
web server [16]. Function process_request abstracts how the
server processes a client’s request. Speciﬁcally, the server reads
the request from socket conn_fd (line 7) and logs it to a local
ﬁle (line 8), it then sends back its response (buffer_to_send) to
the client (line 9). The packet_header parameter points to the
packet header previously received from the client. Its length ﬁeld
speciﬁes how much data to receive from the client. Consequently,
2
this ﬁeld is under the attacker’s control. To avoid overﬂowing the
receive buﬀer, line 6 limits length by the buﬀer size. Unfortu-
nately, this line has an integer signedness error. More speciﬁcally,
packet_header->length has a type of ssize_t (i.e., signed
size_t, an alias of int). If the attacker makes it negative, it will
pass min without any change and be converted to a large positive
number saved in size. This leads to a stack-based buﬀer overﬂow
in line 7, a potential denial-of-service in line 8 (by ﬁlling the disk
space), and an information leak in line 9 (by sending lots of data to
the attacker). Note that recv normally returns any data currently
available in the socket up to the requested size. The attack thus
also controls how much data to receive and write in line 7 and 8,
respectively. We use this code as a running example in the rest of
this section. Even though the source code is used in these exam-
ples, Ravel works on program binaries and thus does not require the
source code. However, if we do have the source code or the debug-
ging information, we can easily map the located vulnerabilities in
the binary to the source code.
This example demonstrates many challenges in pinpointing vul-
nerabilities. First, the manifestation of an attack does not necessar-
ily reveal the real vulnerabilities. The real vulnerability in Figure 2,
an integer signedness error, lies in line 6. Without this ﬂaw, the
rest of the function cannot be exploited. Therefore, line 6 is the
root cause of those attacks. It is this line that the developer should
ﬁx. However, most attack detection systems fail to reveal this root
cause because they look for anomalies in the program’s behaviors
and can only detect an attack when or after it has happened. For
example, control-ﬂow integrity [1] can detect a violation at line
10, and syscall interposition [30] only detects the attack when the
payload is executing. Data-ﬂow integrity [11, 57] can reach closer
to the root cause but still cannot pinpoint it.
In this paper, we
deﬁne a data ﬂow as a def-use relation between instructions [11].
Speciﬁcally, an instruction “deﬁnes” a memory location if it writes
to that location, and an instruction “uses” a memory location if it
reads from that location. Two instructions form a def-use relation
if they write to and read from the same memory location, respec-
tively. Anomalies in the data ﬂow can help us identify two derived
vulnerabilities in line 7 and 9 since they both introduce extra def-
use relations. The root cause, nevertheless, is the integer error
in line 6. To address this challenge, Ravel ﬁrst uses a data-ﬂow
analysis to approximate the real vulnerability, and further reﬁnes
the result by analyzing its details. Second, several vulnerabilities
may co-exist together allowing multiple ways to exploit them. Fig-
ure 2 contains four vulnerabilities. The attacker may choose to take
over the control ﬂow by the buﬀer overﬂow, or dump the server’s
memory by the information leak (without triggering the buﬀer over-
ﬂow since the attacker can control how much data to be received).
Ravel needs to handle individual vulnerabilities as well as their
combinations. Third, techniques to locate vulnerabilities often re-
quire analyzing the program’s detailed memory access patterns, a
prohibitively time-consuming technique without special hardware
support. To be practical, Ravel has to address this important per-
formance challenge. Finally, how to faithfully reproduce attacks is
also challenging but may be indispensable for ﬁnding root causes.
Figure 3 shows the overall architecture of Ravel. Ravel consists
of three components: an online attack detector, a record & replay
(R&R) mechanism, and an oﬄine vulnerability locator. The target
process is executed under the control of a record agent (we call it
the recorder for brevity). The recorder logs the complete execution
history of the process for replaying later. Recent advances in R&R,
such as eidetic systems [23], allow Ravel to continuously record
the execution of a process with low performance and storage over-
head. While recording, the attack detector monitors the execution
2.3 Record and Replay
Record & replay (R&R [23, 31, 41, 53]) plays an important role