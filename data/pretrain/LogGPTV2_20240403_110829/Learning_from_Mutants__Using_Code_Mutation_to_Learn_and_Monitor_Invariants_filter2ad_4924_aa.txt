title:Learning from Mutants: Using Code Mutation to Learn and Monitor Invariants
of a Cyber-Physical System
author:Yuqi Chen and
Christopher M. Poskitt and
Jun Sun
Learning from Mutants:
Using Code Mutation to Learn and Monitor
Invariants of a Cyber-Physical System
Yuqi Chen, Christopher M. Poskitt, and Jun Sun
Singapore University of Technology and Design
Email: yuqi PI:EMAIL; {chris poskitt, sunjun}@sutd.edu.sg
Singapore, Singapore
8
1
0
2
n
u
J
3
1
]
E
S
.
s
c
[
2
v
3
0
9
0
0
.
1
0
8
1
:
v
i
X
r
a
Abstract—Cyber-physical systems (CPS) consist of sensors,
actuators, and controllers all communicating over a network;
if any subset becomes compromised, an attacker could cause
signiﬁcant damage. With access to data logs and a model of the
CPS, the physical effects of an attack could potentially be detected
before any damage is done. Manually building a model that is
accurate enough in practice, however, is extremely difﬁcult. In
this paper, we propose a novel approach for constructing models
of CPS automatically, by applying supervised machine learning
to data traces obtained after systematically seeding their software
components with faults (“mutants”). We demonstrate the efﬁcacy
of this approach on the simulator of a real-world water puriﬁca-
tion plant, presenting a framework that automatically generates
mutants, collects data traces, and learns an SVM-based model.
Using cross-validation and statistical model checking, we show
that the learnt model characterises an invariant physical property
of the system. Furthermore, we demonstrate the usefulness of
the invariant by subjecting the system to 55 network and code-
modiﬁcation attacks, and showing that it can detect 85% of them
from the data logs generated at runtime.
I. INTRODUCTION
Cyber-physical systems (CPS),
in which software com-
ponents and physical processes are deeply intertwined, are
found across engineering domains as diverse as aerospace,
autonomous vehicles, and medical monitoring; they are also
increasingly prevalent in public infrastructure, automating crit-
ical operations such as the management of electricity demands
in the grid, or the puriﬁcation of raw water [1, 2]. In such
applications, CPS typically consist of distributed software
components engaging with physical processes via sensors
and actuators, all connected over a network. A compromised
software component, sensor, or network has the potential
to cause considerable damage by driving the actuators into
states that are incompatible with the physical conditions [3],
motivating research into practical approaches for monitoring
and attesting CPS to ensure that they are operating safely and
as intended.
Reasoning about the behaviour exhibited by a CPS, how-
ever, is very challenging, given the tight integration of algo-
rithmic control in the “cyber” part with continuous behaviour
in the “physical” part [4]. While the software components
are often simple when viewed in isolation, this simplicity
betrays the typical complexity of a CPS when taken as a
whole: even with domain-speciﬁc expertise, manually deriving
accurate models of the physical processes (e.g. ODEs, hybrid
automata) can be extremely difﬁcult—if not impossible. This
is unfortunate, since with an accurate mathematical model,
a supervisory system could query real CPS data traces and
determine whether they represent correct or compromised
behaviour, raising the alarm for the latter.
In this work, using a high degree of automation, we aim
to overcome the challenge of constructing CPS models that
are useful for detecting attacks in practice. In particular,
we propose to apply machine learning (ML) on traces of
sensor data to construct models that characterise invariant
properties—conditions that must hold in all states amongst
the physical processes controlled by the CPS—and to make
those invariants checkable at runtime. In contrast to existing
unsupervised approaches (e.g. [5, 6]), we propose a supervised
approach to learning that
trains on traces of sensor data
representing “normal” runs (the positive case, satisfying the
invariant) as well as traces representing abnormal behaviour
(the negative case), in order to learn a model that charac-
terises the border between them effectively. To systematically
generate the negative traces, we propose the novel application
of code mutation (`a la mutation testing [7]) to the software
components of CPS. Motivating this approach is the idea
that small syntactic changes may correspond more closely
to an attacker attempting to be subtle and undetected. Once
a CPS model is learnt, we propose to use statistical model
checking [8] to ascertain that it is actually an invariant of the
CPS, allowing for its use in applications such as the physical
attestation of software components [9] or runtime monitoring
for attacks.
In order to evaluate this approach, we apply it to Secure
Water Treatment (SWaT) [10], a scaled-down but fully oper-
ational water treatment testbed at the Singapore University
of Technology and Design, capable of producing ﬁve gal-
lons of safe drinking water per minute. SWaT has industry-
standard control software across its six Programmable Logic
Controllers (PLCs). While the software is structurally simple,
it must interact with physical processes that are very difﬁcult
to reason about, since they are governed by laws of physics
concerning the dynamics of water ﬂow,
the evolution of
pH values, and the various chemical processes associated
with treating raw water. In this paper, we focus on water
ﬂow: we learn invariants characterising how water tank levels
evolve over time, and show their usefulness in detecting both
manipulations of the control software (i.e. attestation) as well
as detecting attacks in the network that manipulate the sensor
readings and actuator signals. Our experiments take place
on a simulator of SWaT due to resource restrictions and
safety concerns, but the simulator is faithful and reasonable:
it implements the same PLC code as the testbed, and has a
cross-validated physical model for water ﬂow.
Our Contributions. This paper proposes a novel approach
for generating models of CPS, based on the application of
supervised machine learning to traces of sensor data obtained
after systematically mutating software components. To demon-
strate the efﬁcacy of the approach, we present a framework for
the SWaT simulator that: (1) automatically generates mutated
PLC programs; (2) automatically generates a large dataset of
normal and abnormal traces; and (3) applies Support Vector
Machines (SVM) to learn a model. We apply cross-validation
and statistical model checking to show that the model charac-
terises an invariant physical property of the system. Finally, we
demonstrate the usefulness of the invariant in two applications:
(1) code attestation, i.e. detecting modiﬁcations to the control
software through their effects on physical processes; and
(2) identifying standard network attacks,
in which sensor
readings and actuator signals are manipulated.
This work follows from the ideas presented in our earlier
position paper [11], but differs signiﬁcantly. In particular, the
preliminary experiment
in [11] was entirely manual, used
(insufﬁciently expressive) linear classiﬁers, had a very limited
dataset, and only brieﬂy discussed how the invariants might
be evaluated. In the present paper, we work with signiﬁcantly
larger datasets that are generated automatically, learn much
more expressive classiﬁers using kernel methods, use a sys-
tematic approach to feature vector labelling, apply statistical
model checking to validate the model, and assess its usefulness
for detecting network and code-modiﬁcation attacks.
Organisation. The remainder of the paper is organised as
follows. In Section II, we introduce the SWaT water treatment
system as our motivating case study, and present a high-
level overview of our approach. In Section III, we describe
in detail the main steps of our approach, as well as how it is
implemented for the SWaT simulator. In Section IV, we eval-
uate our approach with respect to ﬁve research questions. In
Section V, we highlight some additional related work. Finally,
in Section VI, we conclude and suggest some directions for
future work.
II. MOTIVATION AND OVERVIEW
In this section, we introduce SWaT, the water treatment
CPS that provides our motivation for learning and monitoring
invariants, and also forms the case study for this paper. Fol-
lowing this, we present a high-level overview of our learning
approach and how it can be applied to CPS.
Fig. 1. The Secure Water Treatment (SWaT) testbed
A. Motivational Case Study: SWaT Testbed
The CPS that forms the case study for our paper is Secure
Water Treatment (SWaT) [10], a testbed built for cyber-
security research at the Singapore University of Technology
and Design (Figure 1). SWaT is a scaled-down but fully
operational raw water puriﬁcation plant, capable of producing
ﬁve gallons of safe drinking water per minute. Raw water
is treated in six distinct but co-operating stages, handling
chemical processes such as ultraﬁltration, de-chlorination, and
reverse osmosis.
Each stage of SWaT consists of a dedicated programmable
logic controller (PLC), which communicates over a ring net-
work with some sensors and actuators that interact with the
physical environment. The sensors and actuators vary from
stage-to-stage, but a typical sensor in SWaT might read the
level of a water tank or the water ﬂow rate in some pipe,
whereas a typical actuator might operate a motorised valve
(for opening an inﬂow pipe) or a pump (for emptying a tank).
A historian records the sensor readings and actuator signals,
facilitating large datasets for ofﬂine analyses [12].
The PLCs are responsible for algorithmic control in the
six stages, repeatedly reading sensor data and computing the
appropriate signals to send to actuators. The programs that
PLCs cycle through every 5ms are structurally simple. They
do not contain any loops, for example, and can essentially be
viewed as large, nested conditional statements for determining
the interactions with the system’s 42 sensors and actuators.
The programs can easily be viewed (in both a graphical and
textual style), modiﬁed, and re-deployed to the PLCs us-
ing Rockwell’s RSLogix 5000, an industry-standard software
suite.
In addition to the testbed itself, a SWaT simulator [13]
was also developed at the Singapore University of Technology
and Design. Built in Python, the simulator faithfully simulates
the cyber part of SWaT, as a direct translation of the PLC
programs was possible. Inevitably, the physical part (taking
Algorithm 1: Sketch of Overall Algorithm
Input: A CPS S
Output: An invariant φ
1 Randomly simulate S for n times and collect a set of
normal traces T r;
2 Construct a set of mutants M u from S;
3 Collect a set of positive feature vectors P o from T r;
4 Collect a set of negative feature vectors N e based on
abnormal traces from M u;
5 Learn a classiﬁer φ;
6 Apply statistical model checking to validate φ;
7 if φ satisﬁes our stopping criteria then
8
9 Restart with additional data;
return φ;
advantage of Python’s scientiﬁc libraries, e.g. NumPy, SciPy)
is less accurate since the actual ODEs governing SWaT are
unknown. The simulator currently models some of the simpler
physical processes such as water ﬂow (omitting, for example,
models of the chemical processes), the accuracy of which has
been improved over time by cross-validating data from the
simulator with real SWaT data collected by the historian [12].
As a result, the simulator is especially faithful and useful for
investigating over- and underﬂow attacks on the water tanks.
The SWaT testbed characterises many of the security con-
cerns that come with the increasing automation of public
infrastructure. What happens, for example,
if part of the
network is compromised and packets can be manipulated;
or if a PLC itself is compromised and the control software
replaced? If undetected, the system could be driven into a
state that causes physical damage, e.g. activating the pumps
of an empty tank, or causing another one to overﬂow. The
problem (which this paper aims to overcome) is that detecting
an attack at runtime is very difﬁcult, since a monitor must
be able to query live data against a model of how SWaT is
actually expected to behave, and this model must incorporate
the physical processes. As mentioned, the PLC programs in
isolation are very simple and amenable to formal analysis,
but it is impossible to reason about the system as a whole
without incorporating some knowledge of the physical effects
of actuators over time.
B. Overview of Our Approach
Our approach for constructing CPS models consists of three
main steps, as sketched in Algorithm 1: (1) simulating the
CPS under different code mutations to collect a set of normal
and abnormal system traces; (2) constructing feature vectors
based on the two sets of traces and learning a classiﬁer; and
(3) applying statistical model checking to determine whether
the classiﬁer is an invariant, restarting the process if it is not. In
the following we provide a high-level overview of how these
three steps are applied in general. A more detailed presentation
of the steps and their application to the SWaT simulator are
given later, in Section III.
In the ﬁrst step, traces (e.g. of sensor readings) representing
normal system behaviour are obtained by randomly simulating
the CPS under normal operating conditions, i.e. with the cyber
part (PLCs) and physical part (ODEs) unaltered. To collect
traces representing abnormal behaviour, our approach proposes
simulating the CPS under small manipulations. Since we aim
for our learnt invariants to be useful in detecting PLC and
network attacks (as opposed to attackers tampering directly
with the environment), we limit our manipulations to the
cyber part, and propose a systematic method motivated by
the assumption that attackers would attempt to be subtle in
their manipulations. Our approach is inspired by mutation
testing [7], a fault-based testing technique that deliberately
seeds errors—small, syntactic transformations called muta-
tions—into multiple copies of a program. Mutation testing is
typically used to assess the quality of a test suite (i.e. good
suites should detect the mutants), but in our approach, we
generate mutants from the original PLC programs, and use
these modiﬁed instances of the CPS to collect abnormal data
traces.
In the second step, we extract positive and negative feature
vectors from the normal and abnormal data traces respectively.
Since an attack (i.e. some modiﬁcation of a PLC program or