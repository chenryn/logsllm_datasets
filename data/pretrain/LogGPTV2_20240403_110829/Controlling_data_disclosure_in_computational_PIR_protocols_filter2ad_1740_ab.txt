Consider that the dishonest client rewrites the query array y (Eq. (1))
such that yj is the jth prime in the sequence of prime numbers start-
ing with y1 = 2. The server will multiply these numbers according
to Eq. (2), and obtain the array z of composite numbers, one for
each row of matrix M . Since the yj values are relatively small
numbers, the client can easily recover from zi the value of Mi,j,
1 ≤ j ≤ t, by factorizing zi. Speciﬁcally,
if yj|zi
otherwise
.
Mi,j = 1,
0,
EXAMPLE 1. Suppose n = 16, t = 4 and
M =  1
1
0
1
1
0
1
0
0
0
1
0
0
1
1 !
0
The client chooses N = 1152921515344265237 = 1073741827×
1073741831, and Y = [2 3 5 7], and sends them to the server. The
server computes and returns to the client Z = [42 2 15 14].
By factoring z1, the client obtains 42 = 2 × 3 × 7. Hence, the
client learns that the ﬁrst row of M must be [1, 1, 0, 1]. The same
process is repeated for all other values zi.
Since the Y values considered so far are small and in increasing
order, the server may use a ﬁlter that rejects queries consisting of
such yj value sequences. However, the client can further obfuscate
the server by changing the order of yj above according to a permu-
tation δ. The client can also cover each yj value by multiplying it
with a random number ρ ∈ Z ∗
N . After receiving z from the server,
the client divides each zi by ρl, 1 ≤ l ≤ t (the client can perform
division because it knows the factorization of N ) until a relatively
small number is obtained. By inspecting the factorization of this
number, and knowing permutation δ, the client can reconstruct the
values of all Mi,j.
One key observation is that although it is believed to be hard in
general to factor large integers, it is easy to do so when the integer
to be factored is composed of factors from a chosen factor base.
In the original KO protocol [6], if a client can carefully choose the
query message in such a way that all yj are distinct small prime
numbers, and the product of all yj is noticeably smaller than the
modulus N , then the entire database from the server can be re-
trieved by a malicious client. Certainly, in practice, t is much larger
than that in the above example, and thus it is possible that the prod-
uct of all the ﬁrst t primes is larger than N . In this case, the client
can choose the ﬁrst t′  1
Output: an integer N that is a product of two kf -bit primes and φ-hides
pi for 1 ≤ i ≤ ℓ.
1: Compute q1 ←
ℓ1
Q
i=1
pi, q2 ←
ℓ
Q
i=ℓ1+1
pi, where ℓ1 = ⌈ℓ/2⌉.
2: repeat
3:
Choose a random integer h1 of approximately (kf − ℓ1 · k) bits
long, and compute a kf -bit integer r = q1h1 + 1.
4: until r is prime.
5: repeat
6:
7: until s is prime.
8: Set N ← r · s.
Choose a random integer h2 of approximately (kf − (ℓ − ℓ1) · k)
bits long, and compute a kf -bit integer s = q2h2 + 1.
As with the analysis in [3], under the Extended Riemann Hypoth-
esis (cf., [1]), Algorithm 1 above generates a suitable N in expected
polynomial time in ℓ · k. Given that N φ-hides all pj, 1 ≤ j ≤ ℓ, a
malicious client can query the database server with pj as members
of the prime sequence. Since the client knows the factorization of
N , it can determine the value xj (corresponding to the prime pj)
by checking whether the server’s response has a pth
j root, for all
1 ≤ j ≤ ℓ. Without knowing N ’s factorization, the server is not
able to tell whether N φ-hides any pi, according to the φ-hiding
assumption. Therefore it is hard for the server to distinguish a ma-
licious query from an honest one.
4. A SECURE SYMMETRIC PIR PROTO-
COL
In this section, we propose a single-database computational PIR
protocol that ensures database protection by releasing one data item
at one time, and is suitable for practical use. We chose to extend the
QRA-based PIR technique from [6] since it is, to our knowledge,
the only cPIR protocol that achieves good performance in practice
[5]. Our approach consists of two steps: ﬁrst, in Section 4.1 we
eliminate the disclosure due to returning redundant elements to the
client. Next, in Section 4.2 we show how to defend against SCA
attacks that use factorization to infer excessive information.
4.1 Protecting against RA Attacks
As discussed in Section 2.1, the KO protocol returns the client
the entire array Z = [z1, . . . , zt], t = √n, where each element zj
corresponds to the product of the numbers in query array Y masked
by data items in row j of matrix M . We aim to limit the disclosure
to a single element zj corresponding to the row of data item xi
312requested by the client (i.e., j = ⌊i/t⌋). For this purpose, we make
use of a 1-out-of-n oblivious transfer protocol proposed in [7].
Although both our proposed solution to single-database sPIR and
the one suggested in [7], further referred to as NP, use a PIR and
a 1-out-of-n protocols in their constructions, the difference is that
in our solution we use KO (PIR scheme) and 1-out-of-n protocols
in a serial way, whereas in NP a (generic) PIR scheme is used to
replace one step of 1-out-of-n. Both schemes can achieve a compa-
rable communication complexity O(√n). However, whereas both
schemes require O(n log n) evaluation of pseudo random functions
and O(n) modular multiplications, our scheme needs only O(√n)
public-key operations, but NP will need O(n) public-key opera-
tions, if a comparable implementation is adopted. Given that one
public-key operation is a lot more expensive than a single modular
multiplication in general, our proposed scheme is more suitable for
practical applications.
In our solution, we employ the 1-out-of-n protocol as an exten-
sion of KO, and we encrypt the elements of the Z array, each with
an independent symmetric encryption key Ki. Since the original
KO protocol sends the entire Z to the client in the ﬁrst place, we do
not incur any additional communication cost to that extent. We do,
however, incur more communication cost during the 1-out-of-t pro-
tocol that retrieves the decryption key. More speciﬁcally, we pro-
vide the array Z = [z1, . . . , zt] as input to the 1-out-of-t protocol.
The client needs to learn the value zj, j = ⌊i/t⌋, in order to recon-
struct data item xi. By only disclosing to the client the value of key
Kj, we ensure that no additional data is learned by the client due
to redundancy (i.e., redundancy attacks are thwarted). Denote by
ℓ = log t the number of bits necessary to encode any index value.
A 1-out-of-t protocol can be constructed by using ℓ runs 1-out-of-2
protocol. Interested readers can ﬁnd the construction details in [9].
The proposed extension of the KO protocol has two main cost
components: encrypting each value in array Z, and performing ℓ
runs of the 1-out-of-2 protocol. The computational complexity of
encrypting Z is O(t), whereas no additional communication over-
head is incurred for transferring the encrypted Z to the client. The
1-out-of-2 protocol requires the server and the client each to per-
form two public-key operations for all bits of Kj. The communica-
tion overhead introduced by applying 1-out-of-2 can be optimized
in real-world applications [9].
4.2 Protecting against SCA Attacks
Note that the attack on the KO protocol, described in Section 3.1,
relies on the fact that the adversary receives (or recovers, if a ran-
dom cover is used) a zi which is noticeably smaller than the modu-
lus N . However, for a client to correctly retrieve the desired bit
Ma,b in the KO protocol, only the residuosity of the server re-
sponse za is needed. Note that, 1) multiplying the number with
a QR does not change its residuosity, and 2) the server can eas-
ily generate a random QR (by squaring a random number) without
needing to know the factorization of the modulus N . Therefore, to
defend against the subliminal-channel attack, the server can blind
(multiply) each response zi with a random QR ρi modulo N , and
return to the client z ′
1 ≤ i ≤ t. All z ′
i
created in this way have the same residuosity as zi, and with over-
whelming probability are approximately the same size as the mod-
ulus N . This still allows an honest client to recover the desired bit
by following the procedures instructed in the KO protocol, and at
the same time prevents a malicious client from retrieving more bits
via integer factorization. Since there are around N/4 QRs, each of
which could be a blinding value, the malicious client cannot effec-
tively unblind the retrieved value, hence is not able to reconstruct
the subliminal channel as shown in Section 3.1 to learn additional
i = ρi · zi (mod N ),
data items.
The random blinding requires the server to generate a random
square modulo N , and perform one more modular multiplication
for each row of the data matrix M . The extra computational cost
introduced by blinding is O(√n), negligible compared to the orig-
inal KO protocol which requires O(n) modular multiplications. It
is clear that blinding does not increase the communication cost.
5. CONCLUSIONS
In this paper, we identiﬁed vulnerabilities common to the most
prominent existing computational PIR protocols which can be ex-
ploited by an adversary in order to gain knowledge on large amounts
of data stored at a database server. We also proposed extensions
that protect the data stored at the server, in addition to the privacy
of the client. We have also implemented our proposed protocol.
Interested readers may ﬁnd more details in [9].
Acknowledgements
The work reported in this paper has been partially supported by
the NSF grant 0712846 “IPS: Security Services for Healthcare Ap-
plications,” and the MURI award FA9550-08-1-0265 from the Air
Force Ofﬁce of Scientiﬁc Research.
6. REFERENCES
[1] E Bach and J Shallit. Algorithmic Number Theory. MIT Press,
Cambridge, MA, USA, 1996.
[2] A Beimel, Y Ishai, E Kushilevitz, and J-F Reymond. Breaking
the O(n1/(2k−1)) Barrier for Information-Theoretic Private
Information Retrieval. In IEEE Symposium on Foundations of
Computer Science, pages 261–270, 2002.
[3] C Cachin, S Micali, and M Stadler. Computationally private
information retrieval with polylogarithmic communication. In
EUROCRYPT, pages 402–414. Springer, 1999.
[4] B Chor, O Goldreich, E Kushilevitz, and M Sudan. Private
information retrieval. In IEEE Symposium on Foundations of
Computer Science, pages 41–50, 1995.
[5] G Ghinita, P Kalnis, A Khoshgozaran, C Shahabi, and K-L
Tan. Private queries in location based services: anonymizers
are not necessary. In Proceedings of ACM SIGMOD, pages
121–132, New York, NY, USA, 2008. ACM.
[6] E Kushilevitz and R Ostrovsky. Replication is NOT needed:
Single database, computationally-private information
retrieval. In IEEE Symposium on Foundations of Computer
Science, pages 364–373, 1997.
[7] M Naor and B Pinkas. Oblivious transfer and polynomial
evaluation. In STOC ’99: Proceedings of the thirty-ﬁrst
annual ACM symposium on Theory of computing, pages
245–254, 1999.
[8] K Narayanam and C Rangan. A Novel Scheme for Single
Database Symmetric Private Information Retrieval. In
Proceedings of Annual Inter Research Institute Student
Seminar in Computer Science (IRISS), pages 803–815, 2006.
[9] N Shang, G Ghinita, Y Zhou, and E Bertino. Controlling data
disclosure in computational pir protocols (extended abstract).
http://rmal.info/papers/sgzb2009.pdf. The
full version of this paper.
313