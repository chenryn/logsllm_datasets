# 【技术分享】智能逃避IDS——RSA非对称多态SHELLCODE
|
##### 译文声明
本文是翻译文章，文章来源：exploit-db.com
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
翻译：[华为未然实验室](http://bobao.360.cn/member/contribute?uid=2794169747)
稿费：200RMB（不服你也来投稿啊！）
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**前言**
防火墙和入侵检测系统(IDS)是任何公司安全方面或组织内网络基础设施的基本核心。防火墙以网络信息为基础过滤流量，而IDS进行的是更深入的研究——考虑并分析在网络中循环的每个数据包的实际数据的内容。
要真正评估网络上的数据包，IDS需要在非常低的级别上理解在特定协议内循环的信息的类型。因此，入侵检测系统(IDS)是分析系统和网络活动，以检测是否有未授权进入和/或恶意活动的活动进程或设备。
市场上的IDS产品琳琅满目。1998年，Ptecek和Newsham演示了如何逃避IDS，他们使用了多种技术，比如重叠shellcode片段、包封数字序列及在漏洞利用的有效载荷中插入随机数据包。这些技术在当时是可行的，因为彼时IDS处理或解释数据包的方式与网络专有系统不同。
在解释本文提出的逃避IDS的具体方式之前，我们先简要介绍一下IDS的基本操作。IDS基本模式如下（各IDS不尽相同）：
1\. 嗅探器读取以混杂模式连接到交换机、路由器、集线器等的镜像接口的接口的所有流量。如为嵌入式安装设备，则直接采用镜像接口本身。
2\. 一些预处理器处理由嗅探器读取的数据，然后由规则引擎更快地处理。此外还有其他功能，比如尽量使攻击者无法规避规则引擎，我们稍后将讨论这一点。
3\.
引擎规则和一组规则。从预处理器处理的数据包，引擎规则通过寻找与其中一个规则匹配的攻击模式传递由每一个规则处理的数据包。如果匹配，则执行规则指示的操作，通常将其视作攻击（接受）或拒绝数据包（丢弃，传递，拒绝…）。如果是确认的攻击，则通知后处理器。
4\. 后处理器负责处理攻击，即通过电子邮件通知攻击、以纯文本或在数据库中存储攻击、阻止攻击（在这种情况下，IDS是入侵防御系统IPS），等等。
在网络层面从全局角度解释了IDS的操作后，我们接下来简要解释一下用于逃避这些系统的可能的攻击途径。攻击途径主要有四种，还有一种虽然不是攻击途径，但作为IDS的限制，也需要介绍：
通过预处理器中的碎片包来逃避。在该攻击途径中有两种可能的逃避。
攻击中使用的编码。并非所有IDS都支持相同类型的编码（支持受攻击的服务）。
蠕虫多态性和变质（多态性和变质蠕虫）。
由预处理器处理的输入数据（不正确）解析，这可能导致拒绝服务并因此导致IDS的失效。
加密通信。虽然事实上这不是攻击途径，但必须加以考虑。如果攻击者和服务器受害者之间的通信被加密，则IDS不能识别任何攻击模式，这无需多言。事实上，通信被加密的原因是没有中介元素可以理解它们之间的数据。
传统类型的IDS逃避的问题恰恰是完全了解其基础和TCP /
UDP水平上这些变化的确定性。操作码水平上的对称加密便由此出现，即传统的多态性——并不总是起作用。有些公司，作为其特定目的，在模块IDS的分析引擎中进行检测。不仅考虑上述方法，而且作为主要核心的一部分，在执行的流程中考虑不同语言的脚本的聚合，这使系统管理员或安全专家可基于具体产品的嵌入式API在全部流上添加ACLS。如果可能添加启发式分析，则总结对系统的恶意攻击的检测。
因此我们需要一种更强大的方法来帮助智能逃避IDS。本文重点介绍如何通过使用Shellcode（通过网络发送）的非对称加密的RSA实现来实现这一点。因此我们要描述一种多态shellcode的实现的新思想。在利用过程中，对于对于真正参与开发、检测及遏制攻击到低水平的计算机安全专业人员而言，这反过来可以作为保护和/或攻击的模式。
缩减形式的RSA将被用作加密方法——将用于逃避IDS。注意，这是一个新的实现，仍需要改进。下面将详细解释如何使用提出的RSA算法执行shellcode的加密和解密。
多态shellcode的基本概念是，在利用漏洞期间，当利用代码通过网络发送shellcode时，该操作码链被NIDS检测到。本文描述的建议是使用RSA算法来加密这个链，因为是非对称算法，所以结果字符串不会有任何相干性或逻辑，因此IDS不会知道其是一个shellcode。字符串将具有以下结构：
1\. 用于解密字符串的操作码
2\. 由RSA算法加密的操作码
在本文中，我们将解释完整的想法和执行的测试，将按以下顺序进行解释：
1\. 如何加密和解密shellcode的操作码
2\. 如何构建解密shellcode的程序，以及如何获取操作码
3\. 如何构建能够加密操作码（C＃.NET）的程序
4\. 用于验证所有算法有效而执行的本地测试
5\. 用于验证算法对于真正的远程利用代码确实有效而执行的远程测试
**加密和解密操作码的算法**
由于RSA已经是一个众所周知的算法，所以本文档的目的不是解释或执行其演示。以下是我们将以缩减形式使用的公式：
**加密：** F(m, e) = me mod n = n = c，其中m是消息，e是公钥，c是密码。
**解密：** F(c, d) = cd mod n = m
n = p x q，p、q = 2个数字素数
以下是如何加密shellcode的解释：
将把2个素数作为基础来执行加密，要注意，这可能因加密类型的不同而各异。我们将数字3作为公钥，将171作为私钥（两者均为素数），模块256的方式是，加密数字是乘以3，取模块256时我们只取两个最低有效字节。要解密，一个数字必须乘以171，并以同样方式只取两个最低有效字节，例如：
现在我们将使用缩减的RSA加密下一个链：xebx45c9
将由“ x”（每个操作码）分隔的每对数字乘以3，且只应取前2个最低有效字节：
xeb–>0xeb*0x3=0x2c1因此加密的号码是： xc1
x45–>0xeb*0x3=0xcf因此加密的号码是： xcf
xc9–>0xeb*0x3=0x25b因此加密的号码是： x5b
因为密码模块是256，所以取2个最低有效位作为最终编码的号码。这样我们可以得出结论，加密等式如下：
    A = 3(n)mod 256
其中，
A = 密码号
3 =公钥
破译的解释如下：
密码号： xc1 Decrypting 0xc1*0xab=0x80eb解密的号码是：xeb
密码号： xcf Decrypting 0xcf*0xab=0x8A45解密的号码是： x45
密码号： x5b Decrypting 0x5b*0xab=0x3cc9解密的号码是： xc9
对于解密，数字乘以ab，因为171是十六进制的AB，正如我们在加密中所执行的，对于最终数字，解密取2个最低有效位。
    B = 171(n) mod 256
其中，
B = 解密的数字
171 = 私钥
**解密程序**
解释了shellcode的加密如何工作后，我们继续执行程序，在运行时执行指令来解密每个操作码。这是本文中最精妙的部分，获得Shell加密后（我们将在下一点解释如何自动加密所有shellcode），我们就必须执行能够直接在堆栈上解密它的程序。这应该用汇编程序编写，因为将在那里（在堆栈中）执行，因此在汇编程序中开发了以下程序：
我们将进行通俗的解释，以便于理解。在上面的程序中执行的第一个动作是跳转到标签“three”，其将执行语句“call
one”，这个动作保存返回地址，其将跳转到标签“one”。此地址放在注册表“esi”中，这是以前保存的地址。在随后的三行中，记录“ecx”、“eax”及“ebx”被清除，随后其当前内容将为：0x0000000。现在其被放在注册表“CL”中（数字33），这表示我们的shellcode加密的字节大小。这个例子中是33（必须针对每个shellcode更改该数字，因为每个的长度各异），现在其将被放置在寄存器“al”（解密的位置的值），这是通过用计数器“ecx”（其保存shellcode加密的长度）添加“esi”（其包含shellcode加密的原理）的地址来实现的。应该解释的是，每个操作码的解密根据所建立的技术从下到上执行。
再次谈谈算法，在第一次运行时，程序将待解密的链编码的最后一个操作码的值放入寄存器“al”中，然后减1。为此，“CL”中的初始值必须始终至少大3个单位（以确保所有shellcode将被解密），然后，其被放置在寄存器ebx的下部，即B1，数字171，其将乘以放置在标签“four”下的shellcode加密（这是用于解密）的每个数字，然后将“bl”的内容乘以“a1”，结果放在“eax”中，我们要查找的值（两个最低有效字节）在“al”（eax的下部）中，为此，我们将“al”的内容放在当前位置：[esi
ecx –
1]，被计数器（cl）递减一，并且被验证：如果不为零，则返回到标签“two”，否则继续执行程序，下一步是跳转标签“four”，这正是找到现在解密的shellcode的地方。
在算法的这一点的重要方面是理解循环——被执行以减少在堆栈内的位置：其从加密的shellcode的末尾开始执行，直到标签“4”之前的1位置，每个交互执行操作以进行解密并用新值重写位置。
我们获得汇编器中的程序后，我们必须获取操作码——用于nasm，程序首先在汇编器中编译，如下所示：
    $ nasm muldescrifra.asm
然后被反汇编：
    $ ndisasm muldescrifra
我们以这种方式获得主操作码（第二列），必须强调的是，在这部分中有“脏”代码，因为值66和67应该从最终字符串中删除，并根据新的值修改跳转，链用操作码完成：
**优化操作码**
当我们执行程序的正常写入并以这种方式编译时，我们获得的是已经提到的垃圾操作码，例如：
操作码66和67表示确定最终字符串的长度和跳转地址的垃圾操作码，这产生问题，有必要重新计算长度。这些操作码应该被省略。为此，我们必须将header
[BITS 32]添加到ASM程序的文件中，这样当解密完成时，这些操作码被省略：
第一版本中的加密程序具有存储shellcode的大小的限制。根据程序的设计，十六进制的这个数字存储在ECX（计数器）的下部，即在CL中。这里明显可以看到限制，因为你可以存储的最大数字是FF，即255个字符，因为其只使用16位。在下面的加密程序代码中可以看到这个事实：
    xor ecx,ecx
    mov cl,33
当加密的shellcode的有效载荷具有多于255个操作码时，该限制完全暴露，该限制在任何反向shellcode上非常普遍，原因是其数量大于255个操作码。为解决这个限制，使用了所有的ECX寄存器。
下面是ASM上的数据寄存器的结构：
为此，有必要使用所有的ECX寄存器来分配shellcode的总长度。程序如下：
所做的基本改变是使用ECX寄存器的高部，由以下两行中的CX表示：