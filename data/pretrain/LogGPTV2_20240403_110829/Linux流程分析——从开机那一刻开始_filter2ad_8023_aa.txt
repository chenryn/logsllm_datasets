# Linux流程分析——从开机那一刻开始
|
##### 译文声明
本文是翻译文章，文章原作者 0xax，文章来源：0xax.gitbooks.io
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
## 在按下电源键后 ,发生了什么
在按下电源键后,电脑开始工作,主板发送信号给电源供应设备,在接受信号后,电源为电脑提供合适的电力.一旦主板得到了成功启动电源的信号后,启动cpu
,cpu清除在寄存器上的残留数据,并且重新将寄存器设置为预存的值.
80386 以及以后的cpu中预设寄存器值
    IP          0xfff0
    CS selector 0xf000
    CS base     0xffff0000
处理器开始以实模式运行,下面了解一下在实模式运行时的内存段;
实模式在所有的x86体系下的处理器都有支持.包括从8086cpu一直到现代的intel64位cpu.8086处理器有20位地址总线,这意味着它能在0-0xFFFF
(或者说1mb)的地址空间内工作.但是他只有16位的寄存器 这意味着只有`2^16 - 1` or `0xffff` (64 kilobytes)的寻址能力
内存分段技术使地址空间全部可用,所有的内存被分割成固定大小(64kb)的片段,因为我们在16位的寄存器下无法直接定位更大的空间.
一个地址由两部分组成: 一个有着基地址的段选择器,和对于该地址的偏移.在实模式下,相关的基地址由段选择器左移4位得到.因此我们的物理地址以如下方法得到
    PhysicalAddress = Segment Selector = 0xffff0000, "_start16bit too low. Please report.");
        _ROMTOP = 0xfffffff0;
        . = _ROMTOP;
        .reset . : {
            *(.reset);
            . = 15;
            BYTE(0x00);
        }
    }
BIOS启动,在初始化以及检查硬件后,BIOS需要一个可启动的设备,BIOS设置里储存了引导顺序,这给顺序控制BIOS应该从哪一个设备开始引导.
BIOS尝试从硬盘里开始引导时,尝试寻找引导向量(boot
sector).在存在MBR(主引导记录)的硬盘分区里,每一个部分由512byte组成,引导向量储存在头446byte部分
最后由0x55和0xaa2byte结束
,这两位指定了该设备是可启动的.一旦BIOS找到了第一个引导向量,BIOS复制它到0x7c00,跳转到那里然后开始执行它.
例:
    ;
    ; Note: this example is written in Intel Assembly syntax
    ;
    [BITS 16]
    boot:
        mov al, '!'
        mov ah, 0x0e
        mov bh, 0x00
        mov bl, 0x07
        int 0x10
        jmp $
    times 510-($-$$) db 0
    db 0x55
    db 0xaa
执行实验
    nasm -f bin boot.nasm && qemu-system-x86_64 boot
这会引导qemu使用boot作为磁盘映像来启动,由于文件通过汇编编写并且满足引导向量的格式 qemu会将该二进制文件当作磁盘的主引导记录(MBR)区域
注意:当提供 boot binary image 给qemu时,设定[org 0x7c00]就不是必须的了
实验结果如下
在此次测试中 ,我们看到代码在实模式下被执行,开始后,通过执行0x10号中断,打印出`!` ,剩下的部分由0填充,并以0xaa,0x55 结束
真正实模式下的代码用于继续启动流程,和储存分区表.从这里开始BIOS把控制流交给启动器
注意: 上面提到过的 ,实模式下的cpu计算地址的方法如下;
    PhysicalAddress = Segment Selector * 16 + Offset
当取最大值时 物理地址将会变为
    (0xffff * 16) + 0xffff =0x10ffef
0x10ffef = 1mb +64kb -16b -1
然而8086处理器(第一代使用实模式) , 只有20位地址总线,这意味着只有1mb空间可用.
实模式下,一般的内存空间如下
    0x00000000 - 0x000003FF - Real Mode Interrupt Vector Table
    0x00000400 - 0x000004FF - BIOS Data Area
    0x00000500 - 0x00007BFF - Unused
    0x00007C00 - 0x00007DFF - Our Bootloader
    0x00007E00 - 0x0009FFFF - Unused
    0x000A0000 - 0x000BFFFF - Video RAM (VRAM) Memory
    0x000B0000 - 0x000B7777 - Monochrome Video Memory
    0x000B8000 - 0x000BFFFF - Color Video Memory
    0x000C0000 - 0x000C7FFF - Video ROM BIOS
    0x000C8000 - 0x000EFFFF - BIOS Shadow Area
    0x000F0000 - 0x000FFFFF - System BIOS
本文的开头,已经说明第一条被执行的代码在`0xffffff0`处,这比处理器能达到的界限大很多,那么cpu如何在实模式下访问这个地址? 答案在
[coreboot](https://www.coreboot.org/Developer_Manual/Memory_map)文件里
    0xFFFE_0000 - 0xFFFF_FFFF: 128 kilobyte ROM mapped into address space
当执行开始时,BIOS在ROM而不是RAM里
## 引导装载程序(bootloader)
有多种可用来启动linux的引导装载程序,例如[GRUB
2](https://www.gnu.org/software/grub/)和[syslinux](http://www.syslinux.org/wiki/index.php/The_Syslinux_Project)
. linux内核里有一个引导协议,[Boot
protocol](https://github.com/torvalds/linux/blob/v4.16/Documentation/x86/boot.txt)
从BIOS将控制权转移给引导装载程序后继续,从boot.img开始执行,由于内存空间的限制,这里代码很简单,包括一个指向GRUB2核心文件的指针.核心文件(core
image)从diskboot.img开始,通常存储在第一个分区之前第一个扇区之后未使用的空间中.上面的代码加载剩下的核心文件,包括GRUB2的内核以及文件系统的驱动到内存中.之后执行`grub_main`函数
`grub_main`函数进行初始化控制台,为模块的加载获取基地址,设置root device 加载grub配置文件,加载模块等操作
在运行的最后,`grub_main`函数将grub改为normal模式.`grub_normal_execute`函数完成最后的最后的准备,并显示出一个操作系统的选择菜单,在选择一个grub入口后,
`grub_menu_execute_entry`函数启动,执行grub`boot`命令,启动所选的操作系统.
引导装载程序 读取并填充某些内核启动的数据,这些数据储存在从内核启动代码偏移0x01f1处.可以通过链接脚本来证实偏移的值,内核头开始于
        .globl hdr
    hdr:
        setup_sects: .byte 0
        root_flags:  .word ROOT_RDONLY
        syssize:     .long 0
        ram_size:    .word 0
        vid_mode:    .word SVGA_MODE
        root_dev:    .word 0
        boot_flag:   .word 0xAA55
引导程序必须填充这个和剩下的头部(在协议中仅被标注为可写).这些值来自于命令行或者在引导过程中由计算得到.(在这里不会复习内核重置头的全部内容,但是会在讲内核会如何使用他们时详细谈一谈,你可以在[Boot
protocol](https://github.com/torvalds/linux/blob/v4.16/Documentation/x86/boot.txt)里找到全部的详细解释)
在加载内核后,内存会被映射成如下
             | Protected-mode kernel  |
    100000   +------------------------+
             | I/O memory hole        |
    0A0000   +------------------------+
             | Reserved for BIOS      | Leave as much as possible unused
             ~                        ~
             | Command line           | (Can also be below the X+10000 mark)
    X+10000  +------------------------+
             | Stack/heap             | For use by the kernel real-mode code.
    X+08000  +------------------------+
             | Kernel setup           | The kernel real-mode code.
             | Kernel boot sector     | The kernel legacy boot sector.
           X +------------------------+
             | Boot loader            | <- Boot sector entry point 0x7C00
    001000   +------------------------+
             | Reserved for MBR/BIOS  |
    000800   +------------------------+
             | Typically used by MBR  |
    000600   +------------------------+
             | BIOS use only          |
    000000   +------------------------+