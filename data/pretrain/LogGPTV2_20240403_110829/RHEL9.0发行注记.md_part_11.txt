如果粘性为
0，集群可以根据需要移动资源，以便在节点间平衡资源。这可能会导致资源在不相关的资源启动或停止时移动。对于正的粘性，资源更倾向于保持原处，只有在其他情况超出粘性时才会移动。这可能会导致新添加的节点在没有管理员干预的情况下无法获取分配给它们的任何资源。这两种方法都有潜在的意外行为，但大多数用户更喜欢使用某种粘性。此
meta-attribute 的默认值已更改为 1 以反映这种首选项。
只有新创建的集群会受到这个更改的影响，因此现有集群的行为不会更改。优先选择其集群的旧行为的用户可以从资源默认值中删除
`resource-stickiness`{.literal} 条目。
(BZ#1850145)
[]{#New-features.html#BZ-1899214}
::: title
**新的 LVM 卷组标志来控制自动激活**
:::
LVM 卷组现在支持 `setautoactivation`{.literal}
标记，它控制在启动时是否自动激活您从卷组中创建逻辑卷。当创建一个由
Pacemaker 在集群中管理的卷组时，使用
`vgcreate --setautoactivation n`{.literal} 命令将这个标志设置为
`n`{.literal}，以便卷组防止可能的数据崩溃。如果您在 Pacemaker
集群中使用现有卷组，请使用 `vgchange --setautoactivation n`{.literal}
设置标志。
([BZ#1899214](https://bugzilla.redhat.com/show_bug.cgi?id=1899214){.link})
[]{#New-features.html#BZ-1290830}
::: title
**新的 pcs resource status display 命令**
:::
`pcs resource status`{.literal} 和 `pcs stonith status`{.literal}
命令现在支持以下选项：
::: itemizedlist
-   您可以使用 `pcs resource status node=node_id`{.literal}
    命令显示在特定节点上配置的资源状态，以及
    `pcs stonith status node=node_id`{.literal}
    命令。您可以使用这些命令显示集群和远程节点上的资源状态。
-   您可以使用 `pcs resource status resource_id`{.literal} 和
    `pcs stonith status  resource_id`{.literal} 命令显示单个资源的状态。
-   您可以使用 `pcs resource status tag_id`{.literal} 和
    `pcs stonith status tag_id`{.literal} 命令显示所有资源的状态。
:::
([BZ#1290830](https://bugzilla.redhat.com/show_bug.cgi?id=1290830){.link},
BZ#1285269)
[]{#New-features.html#BZ-1909901}
::: title
**针对 `pcs resource secure-disable`{.literal}
命令的新减少输出显示选项**
:::
`pcs resource safe-disable`{.literal} 和
`pcs resource disable --safe`{.literal}
命令在错误报告后打印一个非常长的模拟结果。现在，您可以为这些命令指定
`--brief`{.literal}
选项，以只打印错误信息。现在，错误报告总是包含受影响资源的资源 ID。
([BZ#1909901](https://bugzilla.redhat.com/show_bug.cgi?id=1909901){.link})
[]{#New-features.html#BZ-1872378}
::: title
**新的 `pcs`{.literal} 命令更新 SCSI 隔离设备而不重启所有其他资源**
:::
使用 `pcs stonith update`{.literal} 命令更新 SCSI
隔离设备会导致重启运行于 stonith
资源所在的同一节点上运行的所有资源。新的
`pcs stonith update-scsi-devices`{.literal}
命令允许您在不重启其他群集资源的情况下更新 SCSI 设备。
([BZ#1872378](https://bugzilla.redhat.com/show_bug.cgi?id=1872378){.link})
[]{#New-features.html#BZ-1443666}
::: title
**在集群节点子集中为隔离配置 watchdog-only SBD**
:::
在以前的版本中，要使用仅限 watchdog 的 SBD
配置，集群中的所有节点都必须使用 SBD。这会阻止在一个集群中使用
SBD，有些节点支持它，但其他节点（通常是远程节点）需要某种其他形式的隔离。用户现在可以使用新的
`fence_watchdog`{.literal} 代理配置仅限 watchdog 的 SBD
设置，允许集群配置，其中只有 watchdog-only SBD
进行隔离类型，其他节点使用其他隔离类型。集群只能有一个这样的设备，它必须命名为
`watchdog`{.literal}。
([BZ#1443666](https://bugzilla.redhat.com/show_bug.cgi?id=1443666){.link})
[]{#New-features.html#BZ-1470834}
::: title
**内部错误的详细 Pacemaker 状态显示**
:::
如果由于某种原因，Pacemaker
无法执行资源或隔离代理，例如没有安装代理，或者有一个内部超时，Pacemaker
状态现在会显示内部错误的详细退出原因。
(BZ#1470834)
[]{#New-features.html#BZ-1082146}
::: title
**`pcmk_delay_base`{.literal} 参数现在可以为不同的节点使用不同的值**
:::
在配置隔离设备时，您现在可以使用 `pcmk_delay_base 参数`{.literal}
为不同的节点指定不同的值。这允许在双节点集群中使用单个隔离设备，每个节点有不同的延迟。这有助于防止每个节点同时尝试隔离其他节点的情况。要为不同的节点指定不同的值，您可以使用与
pcmk_host_map 类似的语法将主机名映射为该节点的延迟值。例如，在隔离 node1
时，node1:0;node2:10s 将不会使用延迟，在隔离 node2 时，会有 10 秒的延迟
。
([BZ#1082146](https://bugzilla.redhat.com/show_bug.cgi?id=1082146){.link})
[]{#New-features.html#BZ-1376538}
::: title
**支持 `pcmk_host_map`{.literal} 值中的特殊字符**
:::
`pcmk_host_map`{.literal} 属性现在在值前面使用反斜杠(\\)来支持
`pcmk_host_map`{.literal} 值中的特殊字符。例如，您可以指定
`pcmk_host_map="node3:plug\ 1"`{.literal}，来在主机别名中包含一个空格。
([BZ#1376538](https://bugzilla.redhat.com/show_bug.cgi?id=1376538){.link})
[]{#New-features.html#BZ-1977588}
::: title
**OpenShift 的新隔离代理**
:::
`fence_kubevirt`{.literal} 隔离代理现在可用于 Red Hat OpenShift
Virtualization 上的 RHEL 高可用性。有关 `fence_kubevirt`{.literal}
代理的详情，请查看 `fence_kubevirt`{.literal}(8)手册页。
([BZ#1977588](https://bugzilla.redhat.com/show_bug.cgi?id=1977588){.link})
[]{#New-features.html#BZ-2008558}
::: title
**现在完全支持 `pcs cluster setup`{.literal} 命令的本地模式版本**
:::
默认情况下, `pcs cluster setup`{.literal}
命令会自动将所有配置文件与集群节点同步。`pcs cluster setup`{.literal}
命令现在完全支持 `--corosync-conf`{.literal}
选项。指定这个选项可将命令切换到 `本地`{.literal}
模式。在这个模式中，`pcs`{.literal} 命令行界面会创建一个
`corosync.conf`{.literal}
文件，并将其只保存到本地节点的指定文件中，而无需与其它节点通信。这可让您在脚本中创建
`corosync.conf`{.literal} 文件，并使用脚本处理该文件。
([BZ#2008558](https://bugzilla.redhat.com/show_bug.cgi?id=2008558){.link})
[]{#New-features.html#BZ-2008575}
::: title
**自动删除位置约束以下资源移动**
:::
执行 `pcs resource move`{.literal}
命令时，这会向资源添加一个约束，以防止其在当前运行的节点上运行。默认情况下，在资源被移动后，命令创建的位置约束会被自动删除。这不一定将资源重新移到原始节点
;
此时可以在哪里运行这些资源取决于您最初配置的资源。如果您要移动资源并保留生成的约束，请使用
`pcs resource move-with-contraint`{.literal} 命令。
([BZ#2008575](https://bugzilla.redhat.com/show_bug.cgi?id=2008575){.link})
[]{#New-features.html#BZ-2018969}
::: title
**`pcs`{.literal} 支持 OCF Resource Agent API 1.1 标准**
:::
`pcs`{.literal} 命令行界面现在支持 OCF 1.1 资源和 STONITH
代理。作为此支持的实施的一部分，任何代理的元数据都必须符合 OCF
模式，代理是否为 OCF 1.0 还是 OCF 1.1 代理。如果代理的元数据不符合 OCF
架构，`pcs`{.literal} 会考虑代理无效，除非指定了 `--force`{.literal}
选项，否则不会创建或更新代理的资源。`pcsd`{.literal} Web UI 和
`pcs`{.literal} 命令用于列出代理，现在从列表中省略带有无效元数据的代理。
([BZ#2018969](https://bugzilla.redhat.com/show_bug.cgi?id=2018969){.link})
[]{#New-features.html#BZ-2009455}
::: title
**pcs 现在接受 `Promoted`{.literal} 和 `Unpromoted`{.literal}
作为角色名称**
:::
`pcs`{.literal} 命令行界面现在接受 `Promoted`{.literal} 和
`Unpromoted`{.literal} anywhere 角色，在 Pacemaker
配置中指定。这些角色名称是与之前的 RHEL 版本中 `Master`{.literal} 和
`Slave`{.literal} Pacemaker
角色的功能，它们是在配置显示和帮助页面中可见的角色名称。
([BZ#2009455](https://bugzilla.redhat.com/show_bug.cgi?id=2009455){.link})
[]{#New-features.html#BZ-1996067}
::: title
**`pcsd`{.literal} Web UI 更新版本**
:::
`pcsd`{.literal} Web UI（用于创建和配置 Pacemaker/Corosync
集群的图形用户界面）已更新。更新的 Web UI
提供改进的用户体验以及通过其他红帽 Web 应用程序中使用的 PatternFly
框架构建的标准化接口。
(BZ#1996067)
:::
::: section
::: titlepage
# []{#New-features.html#enhancement_dynamic-programming-languages-web-and-database-servers}动态编程语言、网页和数据库服务器 {.title}
:::
[]{#New-features.html#BZ-1941595}
::: title
**RHEL 9 中的 Python**
:::
[**Python 3.9**]{.strong} 是 RHEL 9 中的默认 [**Python**]{.strong}
实现。[**Python 3.9**]{.strong} 在 BaseOS 存储库中的非模块化
`python3`{.literal} RPM 软件包中分发，通常默认安装。[**Python
3.9**]{.strong} 将支持 RHEL 9 的整个生命周期。
其他版本的 [**Python 3**]{.strong} 将以 RPM 软件包的形式发布，并通过
AppStream 软件仓库提供较短的生命周期，并可并行安装。
`python`{.literal} 命令(`/usr/bin/python`{.literal})和其他
[**Python**]{.strong}-related 命令（如 `pip`{.literal}
）位于未指定版本的表单中，并指向默认的 [**Python 3.9**]{.strong} 版本。
[**Python 2**]{.strong} 不随 RHEL 9 提供。
有关 RHEL 9 中的 [**Python**]{.strong} 的更多信息，请参阅 [Python
简介](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/installing_and_using_dynamic_programming_languages#assembly_introduction-to-python_installing-and-using-dynamic-programming-languages){.link}。
(BZ#1941595, JIRA:RHELPLAN-80598)
[]{#New-features.html#BZ-1953491}
::: title
**`Node.js 16`{.literal} 在 RHEL 9 中可用**
:::
RHEL 9 提供了一个 Long Term Support(LTS)版本 16 的
`Node.js`{.literal}，它是一个软件开发平台，用于使用 JavaScript
编程语言构建快速、可扩展的网络应用程序。
与 `Node.js 14`{.literal} 相比，`Node.js 16`{.literal}
中的显著变化包括：
::: itemizedlist
-   `V8`{.literal} 引擎已升级至版本 9.4。
-   `npm`{.literal} 软件包管理器已升级至 8.3.1 版本。
-   新的 `Timers Promises`{.literal} API
    提供了一组替代的计时器功能，用于返回 `Promise`{.literal} 对象。
-   `Node.js`{.literal} 现在与 `OpenSSL 3.0`{.literal} 兼容。
-   `Node.js`{.literal} 现在提供一个新的实验性 `Web Streams`{.literal}
    API 和实验性 ECMAScript 模块(ESM)加载程序 hook API。
:::
`Node.js 16`{.literal} 是此 Application Stream
的初始版本，您可以轻松地作为 RPM 软件包安装。额外的 `Node.js`{.literal}
版本将会作为模块提供，在以后的 RHEL 9 次版本中会带有较短的生命周期。
([BZ#1953491](https://bugzilla.redhat.com/show_bug.cgi?id=1953491){.link})
[]{#New-features.html#JIRA-RHELPLAN-80758}
::: title
**RHEL 9 提供 `Ruby 3.0`{.literal}**
:::
RHEL 9 随 `Ruby 3.0.3`{.literal} 提供，它比 `Ruby 2.7`{.literal}
提供了很多性能改进、程序错误和安全修复以及新功能。
主要改进包括：
::: itemizedlist
-   并发和并行功能：
    ::: itemizedlist
    -   `Ractor`{.literal} 作为一个提供线程安全并行执行的 Actor-model
        抽象作为实验功能提供。
    -   `Fiber Scheduler`{.literal}作为一种实验功能引进。`Fiber Scheduler`{.literal}
        截获阻塞操作，在不更改现有代码的情况下启用轻量级并发操作。
    :::
-   静态分析功能：
    ::: itemizedlist
    -   引进了 `RBS`{.literal} 语言，它描述了 `Ruby`{.literal}
        程序的结构。`rbs`{.literal} gem 已被添加来解析使用
        `RBS`{.literal} 编写的类型定义。
    -   引进了 `TypeProf`{.literal} 实用工具，它是 `Ruby`{.literal}
        代码的类型分析工具。
    :::
-   与 `case/in`{.literal} 表达式的模式匹配不再是实验性。
-   多行模式匹配（一个实验功能）已被重新设计。
-   find pattern 已被添加为实验功能。
:::
改进的性能：