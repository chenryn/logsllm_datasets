12803
12803
-1
104
0:00
/usr/sbin/rsyslogd-n
12849
12849
12849
？
-1
Ss1
0:0e/usr/lib/policykit-1/polkitd --no-debug
0:18
/usr/lib/accountsservice/accounts-daemon
130119 30116 29811 pts/0
1 19599 19599
19599
？
-1
Ss1
29811 S
1000
0:00 ping www.baidu.com
·无标准输入、无标准输出、无标准错误
[=pidd 。
现在更像是守护进程了，但是PID，PGID,SID还是不相等，终端处值不为？，终端前台进程组ID也不是-1，目录也不是根目
录，换句话说还是受到终端的控制。
具体创建一个守护进程的代码网上有的是，自己搜索吧，既有直接使用daemonO函数生成的，也有一步一步按照上面描述
去生成的，推荐先看看后者。
5.我们ssh断开链接后session还在吗？
我使用两个终端连接同一个服务器的ssh
---
## Page 202
1202
1202
1202?
-1Ss
0:00 /usr/sbin/sshd -D
1202
1614
1614
1614
-1 Ss
0:00
sshd: helper [priv]
1614
1681
1614
1614
-1S
1000
0:00
\_sshd:helper@pts/0
1681
1682
1682
1682ots/0
1682 Ss+
1000
0:00
_-bash
1202
1694
1694
1694?
-1 Ss
0:00
sshd: helper [priv]
1694
1730
1694
1694
？
-1S
1000
0:00
\_sshd:helper@pts/1
1730
1731
1731
1731pts/1
1743 Ss
1000
0:00
-bash
1731
1743
1743
1731 pts/1
1743 R+
1000
0:00
\_ps ajfx
可以看到，现在有两个SID，我们使用1682这个session来进行执行pingww.baidu.con 之后ctrl+c中断，exit退出连
接
helper@localhost:-$ping www.baidu.com
PING www.a.shifen.com(110.242.68.4) 56(84) bytes of data.
64 bytes from 110.242.68.4:icmp_seq=1 ttl=53 time=9.43 ms
64 bytes from 110.242.68.4: icmp_seq=2 ttl=53 time=9.56 ms
AC
www.a.shifen.com ping statistics -
2packets transmitted,2 received,0% packet loss，time 1001ms
rtt min/avg/max/mdev=9.435/9.500/9.566/0.117ms
helperelocalhost:-$exit
logout
Connection to 192.168.1.81 closed.
我们使用1731的shel来查看
1
1202
1202
1202 ?
-1 Ss
0:00
1202
1694
1694
1694
7
-1Ss
0:00
sshd: helper [priv]
1694
1730
1694
1694
？
-1 S
1000
1750Ss
00:0
sshd: helper@pts/1
1730
1731
1731
1731 pts/1
1000
0:00
-bash
1731
1750
1750
1731 pts/1
1750 R+
1000
0:00
\_ps ajfx
SID为1682的session不存在了，ping的命令也被我们中断了
现在我们还是使用两个终端连接ssh
1202
1202
1202 ?
1202
Ss
00:0
1694
1694
1694
？
Ss
0:00
/usr/sbin/sshd
sshd: helper [priv]
-D
-1
1694
1694
S
1000
0:00
1694
1730
？
-1
_sshd:helperepts/1
1730
1731
1731
1731pts/1
1801
Ss
1000
0:00
_-bash
1731
1801
1801
1731 pts/1
1801
R+
1000
0:00
\ps ajfx
1202
1751
1751
1751
？
-1
Ss
0:00
sshd:helper [priv]
1751
1787
1751
1751
？
-1
S
1000
0:00
sshd:helperepts/0
1787
1788
1788
1788pts/0
1788 Ss+
1000
0:00
_-bash
我们使用1788的shel来执行pingwww.baidu.com&之后exit退出ssh连接
helperelocalhost:-Sping www.baidu.com&
[1]1802
helperelocalhost:~S PING www.a.shifen.com (110.242.68.4) 56(84) bytes of data.
64 bytes from110.242.68.4:icmp_seq-1 ttl-53 time=9.62ms
64 bytes
from
1110.242.68.4:icmp_seq=2 ttl=53 time=9.56 ms
e64 bytes from 110.242.68.4:icmp_seq=3 ttl=53 time=9.52 ms
[xit
logout
Connection to 192.168.1.81 closed.
>>>
---
## Page 203
102 1202 1202?
194
691
1731 pts/1
1694
100
184
1731
1000
1616
1616
1616?
-pid=/var/run/irqbalance.pid
1616
1616
1616?
1e00
 --user
1
8841
-1 S
helperelocolhost:-$
从这里可以看到，虽然我们把ssh连接退出了，但是后台进行依旧在这个session上执行，还属于这个会话，所以如果
session存在还在执行的后台进程，即使关闭终端或者断开ssh等远程连接，session还是会存在的
6.nohup 命令意义难道仅仅就是将标准输出，标准错误重定向到nohup.out 吗？
如果仅仅是输出重定向，我们可以直接使用>，为什么会有nohup命令呢？没有点啥重要作用也对不起这个名字呀！
其实呢，产生这个疑问的主要原因就是问题5我们仅仅从表面现象就得出了结论，而没有进行本质上的剖析，所以如果只看
到问题5的哥们儿可能要被误导了.
当一个终端关闭或者ssh等远程连接退出的时候，系统会向session管理的所有进程发送一个SIGHUP信号，这个信号就是挂
断的意思，效果就是进程中断，理论上问题5中pingwww.baidu.com这个后台进程也应该能够收到，但是，在session要
下，这个参数的缺省是off，也就是说，关闭终端不一定就会收到SIGHUP信号。
shopt| grep huponexit
Thelperelocalhost:~$shoptIgrephuponexit
huponexit
off
helperelocalhost:~$
可以看到，在当前系统中，该参数为off，所以才会出现终端关闭或者ssh等远程连接断开的时候，后台进程能够继续以这个
session运行
此时再说nohup应该就很清晰了，nohup其实就是忽略SIGHUP信号，这样保证我们的程序在后台平稳执行
7.tmux后台执行的效果更好，tmux的底层原理是什么呢？
还是使用两个终端来进行
helper@localhost:~$ping www.baidu.com
PINGwww.a.shifen.com (110.242.68.3) 56(84) bytes of data
64 bytes from 110.242.68.3:icmp_seq=1ttl=53 time=9.52 ms
64 bytes from 110.242.68.3:icmp_seq=2 ttl=53 time=9.37ms
ctrl b+d
tmux ls
---
## Page 204
helperelocalhost:~Stmuxls
demo:1windows（created SatFeb 2701:25:112021）[125x33]
helperelocalhost:~s
我们使用另一个终端观察一下：
1181
1181
1215?
1181?
-1 Ss
0-pyss/u1qs/usn/0e:0
1181
1215
1215
-1
Ss
0:00
sshd: helper [priv]
1215
1279
1215
1215 ?
-1 s
1000
1280pts/0
1000
0:08
0:00
_sshd:helperepts/0
1279
1364
1280
1364
1280
1280pts/0
1364
Ss
1280
1364
R+
_-bash
1eee
1_ps ajfx
1181
1294
1294
1294 ?
-1 Ss
1294
1294?
1000
0:00
0:00
_sshd: helper [priv]
1294
1331
1330
1331
1331pts/1
-1
S
\_sshd:helper@pts/1
1330
1331
Ss+
1000
_-bash
1
1207
1207
1207?
-1
Ss
0:00/usr/sbin/irqbalance --pid=/var/run/irqbalanc
1217
1217
1217?
-1
Ss
1000
0:00
/lib/systemd/systemd --user
1217
1221
1217
1217?
-1S
1000
1000
0:00
0:00 tmux new -s demo
_(sd-pam)
1
1348
1348
1348?
1362
-1Ss
1349
1348
1362
1349
1349
1349 pts/2
1349 pts/2
1362 S+
Ss
1000
0:00
-bash
1362
1000
0:00
I_ping www.baidu.com
可以看到，其实tmux创建了一个守护进程，进程PID=1348，之后通过守护进程创建bash，之后通过bash执行ping，创建
ping www.baidu.com
为了更加严谨证实这个观点，我们再创建一个tmux任务
helperelocalhost:~$ tmux new -s demo
[detached (from session demo)]
helperelocalhost:~s tmux ls
demo:1windows（created SatFeb 2701:25:11 2021)[125x33]
[exited]
helperelocalhost:~Stmux new -s demo2
[detached (from session demo2)]
helperelocalhost:~$
helper@localhost:~$ping www.sina.com.cn
PING spool.grid.sinaedge.com (123.125.104.150) 56(84) bytes of data.
64 bytes from 123.125.104.150:icmp_seq=1 ttl=56 time=1.57 ms
64
bytes from 123.125.104.150:icmp_seq=2 ttl=56 time=1.53 ms
现在是ping百度和新浪同时跑着，再观察一下
11348
134813487
-1 Ss
1000
0:00 tmux new -s demo
1348
1349
1349
1349 pts/2
1362 Ss
1000
00:0
1349
1362
1362
1349 pts/2
1362 S+
1000
0:00
_-bash
1_ping www.baidu.com
1348
1366
1366
1366？
-1Zs
1000
0:00
\_[bash] 
1348
1381
1381
1381pts/3
1394 Ss
1000
0:00
-bash
1381
1394 1394 1381 pts/3
1394 S+
1000
0:00
\_ping www.sina.com.cn
中间STAT为Zs的进程是因为我忘了截图，就退出了重新来的导致的，不用关注
可以看到的是，对于每一个任务，tmux都会创建一个新的session、进程组、进程，这样实现多个进程之间互不影响
---
## Page 205
至此，关于Linux的进程相关知识应该将明白了，如果想从更加底层去分析，就去学习学习C和汇编吧！
参考文章
https://www.cnblogs.com/vyahui/p/7389554.html
https://wuclaljun.com/2016/08/linux-job-control/
https://zhuonlon.zhihu.com/p/80439267
http://www.ruanyifeng.com/blog/2016/02/linux-doemon.html
https://blog.csdn.net/weicao1990/article/details/78639549
http://www.ruanyifeng.com/blog/2016/03/systemc-tutorial-commcndls.html
https://segmentffoult.com/α/1190000022770900
https://segmentfoult.com/q/1010000000310278
https:/blog.cscln.net/hust_sheng/article/details/50766752
https://segmenffoult.com/α/1190000022097240
https://ytlee.cn/2020/05/the-dlifference-between-cdaemon-anc-bockgroundl-process/
https://www.cnblogs.com/vyahui/p/7389554.html
https://www.jianshu.com/p/eed75164334d
https:/ www.lujun9972.win/blog/2019/08 /26/%E5%A6%82%E4%BD%95kil1%E6%95%B4%E4%B8%80%E4%B8%AA
% E8%BF%9B%E7%A.8%8B%E7%B B%84%E6%88%96%E4%BC%9A%E8%A.F%9D/inclex.htm