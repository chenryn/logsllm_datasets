### Stochastic Synthesis Tool for Low-Level Semantics

Our stochastic synthesis tool is designed to generate low-level semantics, specifically producing Intel x86 code. This tool leverages stochastic techniques that offer unique advantages over previous methods. For instance, our approach often yields partial results that are "close" to a real solution, which can be particularly useful for human analysts trying to understand obfuscated code. Additionally, our grammar can encode complex function symbols, such as intricate encoding schemes or hash functions, a feature that is not easily replicated by SMT-based approaches.

### Non-Academic Applications and Related Work

In the context of non-academic work, Rolles [45] has applied SMT-based approaches to reverse engineering and deobfuscation. He utilized peephole superoptimization techniques to learn obfuscation rules and employed an oracle-guided approach to extract metamorphic code. In his recent work, he has also explored SMT-based shellcode synthesis [46].

### Monte Carlo Tree Search (MCTS)

MCTS has been extensively studied in the field of artificial intelligence, particularly in game playing [16, 35, 49, 56]. Ruijl et al. [47] combined Simulated Annealing with MCTS, introducing SA-UCT for expression simplification. Lim and Yoo [32] investigated the use of MCTS for program synthesis, noting its comparable performance to genetic programming. Our research extends this by applying SA-UCT and introducing node pruning. We have also designed a context-free grammar to learn the semantics of Intel x86 code.

### Deobfuscation Techniques

Rolles [44] provides an academic analysis of VM-based obfuscators and proposes using static analysis to re-translate VM bytecode back into native instructions. However, this method is time-consuming and sensitive to minor modifications. Kinder [26] focuses on the static analysis of VMs, lifting a location-sensitive analysis to handle virtualization-based obfuscation. His work highlights how VM execution traces exhibit recurring sets of addresses, a phenomenon that benefits our approach. In contrast, Sharif et al. [53] analyze VMs dynamically, aiming to reconstruct the control flow from the bytecode rather than re-translating it. Their approach is more aligned with our focus on arithmetic and logical semantics.

### Recent Advances in Deobfuscation

Recent work by Coogan et al. [13] and Yadegari et al. [62] aims to deobfuscate code using execution traces, symbolic execution, and taint tracking. Coogan et al. focus on reducing traces by analyzing value flows to system calls, while Yadegari et al. propose a more general approach to produce fully deobfuscated code. To counter these deobfuscation methods, Banescu et al. [2] introduced new obfuscating transformations, including random opaque predicates and input-invariant behavior preservation, which increase the complexity for symbolic executors.

Guinet et al. [20] present arybo, a framework for simplifying Mixed Boolean-Arithmetic (MBA) expressions. They use bit-blasting and a Boolean expression solver to simplify these expressions symbolically. Eyrolles [15] describes a symbolic approach using pattern matching and suggests improvements to MBA-obfuscated implementations to hinder symbolic deobfuscation. We argue that symbolic simplification is inherently limited by the complexity of the input expression. However, our synthesis-based approach allows for fine-tuned simplification, regardless of syntactical complexity, while providing approximate intermediate results.

### Conclusion

With our prototype implementation of Syntia, we have demonstrated that program synthesis can effectively aid in deobfuscating real-world obfuscated code. Our approach is fundamentally different from existing deobfuscation techniques and may succeed in scenarios where precise code semantics are required but difficult to achieve.

### Acknowledgments

We thank the reviewers for their valuable feedback. This work was supported by the German Research Foundation (DFG) research training group UbiCrypt (GRK 1817) and by ERC Starting Grant No. 640110 (BASTION).

### References

[References are listed as provided in the original text.]

---

This revised version enhances the clarity, coherence, and professionalism of the original text, making it more suitable for academic and technical audiences.