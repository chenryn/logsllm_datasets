stochastic synthesis tool that is able to synthesize low-
level semantics. By design, their code only produces Intel
x86 code.
In our case, stochastic techniques have additional prop-
erties that are not achieved by previous tools: we obtain
partial results that are often already “close” to a real solu-
tion and might be helpful for a human analyst who tries
to understand obfuscated code. Furthermore, we can en-
code arbitrary complex function symbols in our grammar
(e. g., complex encoding schemes or hash functions); a
characteristic that is not easily reproduced by SMT-based
approaches.
In the context of non-academic work, Rolles applied
some of the above mentioned SMT-based approaches to
reverse engineering and deobfuscation [45]. Amongst
others, he learned obfuscation rules by adapting peephole
superoptimization techniques [3] and extracted metamor-
phic code using an oracle-guided approach. In his recent
work, he performs SMT-based shellcode synthesis [46].
Monte Carlo Tree Search. MCTS has been widely
studied in the area of AI in games [16, 35, 49, 56]. Ruijl
et al. [47] combine Simulated Annealing and MCTS by
introducing SA-UCT for expression simpliﬁcation. Lim
and Yoo [32] describe an early exploration on how MCTS
can be used for program synthesis and note that it shows
comparable performance to genetic programming. We
extend the research of MCTS-based program synthesis by
applying SA-UCT and introducing node pruning. For our
synthesis approach, we designed a context-free grammar
that learns the semantics of Intel x86 code.
Deobfuscation. Rolles provides an academic analysis
of a VM-based obfuscator and outlines a possible attack
on such schemes in general [44]. He proposes using
static analysis to re-translate the VM’s bytecode back into
native instructions. This, however, requires minute analy-
sis of each obfuscator and hence is time-consuming and
prone to minor modiﬁcations of the scheme. Kinder is
also concerned with (static) analysis of VMs [26]. Specif-
ically, he lifts a location-sensitive analysis to be usable
in presence of virtualization-based obfuscation schemes.
His work highlights how the execution trace of a VM,
while performing various computations, always exhibits
a recurring set of addresses. As seen in Section 6, our ap-
proach actually beneﬁts from this side effect. In contrast,
Sharif et al. [53] analyze VMs in a dynamic manner and
record execution traces. In contrast to the work of Rolles,
their goal is not to re-translate, but to directly analyze the
bytecode itself. Speciﬁcally, they aim to reconstruct parts
of the underlying code’s control ﬂow from the bytecode.
This approach is closest to our work as we are, in turn,
mostly concerned with arithmetic and logical semantics
of a handler.
More recent results include work by Coogan et al. [13]
as well as Yadegari et al. [62]. Both approaches seek to de-
obfuscate code based on execution traces by further mak-
ing use of symbolic execution and taint tracking. The for-
mer approach is focused on the value ﬂow to system calls
to reduce a trace whereas Yadegari et al. propose a more
general approach and aim to produce fully deobfuscated
code. However, to counteract symbolic execution-based
deobfuscation approaches, Banescu et al. propose novel
obfuscating transformations that speciﬁcally target their
deﬁciencies [2]. For one, they propose a construct akin
to random opaque predicates [12] that deliberately ex-
plodes the number of paths through a function. A second
technique preserves program behavior of the obfuscated
program for speciﬁc input invariants only, effectively in-
creasing the input domains and thus the search space for
symbolic executors.
Guinet et al. present arybo, a framework to simplify
MBA expressions [20].
In essence, they perform bit-
blasting and use a Boolean expression solver that tries
to simplify the expression symbolically. Eyrolles [15]
describes a symbolic approach that uses pattern matching.
Furthermore, she suggests improvements of current MBA-
obfuscated implementations that impede these symbolic
deobfuscation techniques [14]. To this effect, we also
argue that symbolic simpliﬁcation is inherently limited
by the complexity of the input expression. However, we
demonstrated that a synthesis-based approach allows ﬁne-
tuned simpliﬁcation, irrespective of syntactical complex-
ity, while producing approximate intermediate results.
9 Conclusion
With our prototype implementation of Syntia we have
shown that program synthesis can aid in deobfuscation
of real-world obfuscated code. In general, our approach
is vastly different in nature compared to proposed deob-
fuscation techniques and hence may succeed in scenarios
where approaches requiring precise code semantics fail.
USENIX Association
26th USENIX Security Symposium    657
Acknowledgments
We thank the reviewers for their valuable feedback. This
work was supported by the German Research Foundation
(DFG) research training group UbiCrypt (GRK 1817) and
by ERC Starting Grant No. 640110 (BASTION).
References
[1] ANDRIESSE, D., BOS, H., AND SLOWINSKA, A. Parallax: Im-
plicit Code Integrity Veriﬁcation using Return-Oriented Program-
ming. In Conference on Dependable Systems and Networks (DSN)
(2015).
[2] BANESCU, S., COLLBERG, C., GANESH, V., NEWSHAM, Z.,
AND PRETSCHNER, A. Code Obfuscation against Symbolic Exe-
cution Attacks. In Annual Computer Security Applications Con-
ference (ACSAC) (2016).
[3] BANSAL, S., AND AIKEN, A. Automatic Generation of Peephole
Superoptimizers. In ACM Sigplan Notices (2006).
[4] BELL, J. R. Threaded Code. Communications of the ACM (1973).
[5] BROWNE, C. B., POWLEY, E., WHITEHOUSE, D., LUCAS,
S. M., COWLING, P. I., ROHLFSHAGEN, P., TAVENER, S.,
PEREZ, D., SAMOTHRAKIS, S., AND COLTON, S. A Survey
IEEE Transactions on
of Monte Carlo Tree Search Methods.
Computational Intelligence and AI in Games (2012).
[6] CAVALLARO, L., SAXENA, P., AND SEKAR, R. Anti-Taint-
Analysis: Practical Evasion Techniques against Information Flow
based Malware Defense. Secure Systems Lab at Stony Brook
University, Tech. Rep (2007).
[7] CAZENAVE, T. Monte carlo beam search. IEEE Transactions on
Computational Intelligence and AI in Games (2012).
[8] CHASLOT, G. Monte-Carlo Tree Search. PhD thesis, Universiteit
Maastricht, 2010.
[9] COLLBERG, C., MARTIN, S., MYERS, J., AND NAGRA, J. Dis-
tributed Application Tamper Detection via Continuous Software
Updates. In Annual Computer Security Applications Conference
(ACSAC) (2012).
[10] COLLBERG, C., MARTIN, S., MYERS, J., AND ZIMMER-
Documentation for Arithmetic Encodings in
http://tigress.cs.arizona.edu/transformPage/
MAN, B.
Tigress.
docs/encodeArithmetic.
[11] COLLBERG, C., MARTIN, S., MYERS, J., AND ZIMMERMAN,
B. Documentation for Data Encodings in Tigress. http://
tigress.cs.arizona.edu/transformPage/docs/encodeData.
[12] COLLBERG, C., THOMBORSON, C., AND LOW, D. Manufactur-
ing Cheap, Resilient, and Stealthy Opaque Constructs. In ACM
Symposium on Principles of Programming Languages (POPL)
(1998).
[13] COOGAN, K., LU, G., AND DEBRAY, S. Deobfuscation
of Virtualization-obfuscated Software: A Semantics-Based Ap-
proach. In ACM Conference on Computer and Communications
Security (CCS) (2011).
[14] EYROLLES, N. Obfuscation with Mixed Boolean-Arithmetic Ex-
pressions: Reconstruction, Analysis and Simpliﬁcation Tools. PhD
thesis, Université de Versailles Saint-Quentin-en-Yvelines, 2017.
[15] EYROLLES, N., GOUBIN, L., AND VIDEAU, M. Defeating MBA-
based Obfuscation. In ACM Workshop on Software PROtection
(SPRO) (2016).
[16] FINNSSON, H. Generalized Monte-Carlo Tree Search Extensions
In AAAI Conference on Artiﬁcial
for General Game Playing.
Intelligence (2012).
[17] GELLY, S., KOCSIS, L., SCHOENAUER, M., SEBAG, M., SIL-
VER, D., SZEPESVÁRI, C., AND TEYTAUD, O. The Grand Chal-
lenge of Computer Go: Monte Carlo Tree Search and Extensions.
Communications of the ACM (2012).
[18] GODEFROID, P., AND TALY, A. Automated Synthesis of Sym-
bolic Instruction Encodings from I/O Samples. In ACM SIGPLAN
Notices (2012).
[19] GRAZIANO, M., BALZAROTTI, D., AND ZIDOUEMBA, A. ROP-
MEMU: A Framework for the Analysis of Complex Code-Reuse
Attacks. In ACM Symposium on Information, Computer and Com-
munications Security (ASIACCS) (2016).
[20] GUINET, A., EYROLLES, N., AND VIDEAU, M. Arybo: Ma-
nipulation, Canonicalization and Identiﬁcation of Mixed Boolean-
Arithmetic Symbolic Expressions. In GreHack Conference (2016).
[21] GULWANI, S. Dimensions in Program Synthesis. In Proceedings
of the 12th international ACM SIGPLAN symposium on Principles
and practice of declarative programming (2010).
[22] GULWANI, S., JHA, S., TIWARI, A., AND VENKATESAN, R.
Synthesis of Loop-free Programs. ACM SIGPLAN Notices (2011).
[23] HEULE, S., SCHKUFZA, E., SHARMA, R., AND AIKEN, A. Strat-
iﬁed synthesis: Automatically Learning the x86-64 Instruction
Set. In ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI) (2016).
[24] JHA, S., GULWANI, S., SESHIA, S. A., AND TIWARI, A. Oracle-
guided Component-based Program Synthesis. In ACM/IEEE 32nd
International Conference on Software Engineering (2010).
[25] KIM, D.-W., KIM, K.-H., JANG, W., AND CHEN, F. F. Unre-
lated Parallel Machine Scheduling with Setup Times using Simu-
lated Annealing. Robotics and Computer-Integrated Manufactur-
ing (2002).
[26] KINDER, J. Towards Static Analysis of Virtualization-Obfuscated
Binaries. In IEEE Working Conference on Reverse Engineering
(WCRE) (2012).
[27] KIRKPATRICK, S., GELATT, C. D., AND VECCHI, M. P. Opti-
mization by Simulated Annealing. Science (1983).
[28] KLINT, P.
Interpretation Techniques. Software, Practice and
Experience (1981).
[29] KOCSIS, L., AND SZEPESVÁRI, C. Bandit based Monte-Carlo
Planning. In European Conference on Machine Learning (2006).
[30] KRAHMER, S. x86-64 Buffer Overﬂow Exploits and the Borrowed
Code Chunks Exploitation Technique, 2005.
[31] LIBERATORE, P. The Complexity of Checking Redundancy of
In International Conference on
CNF Propositional Formulae.
Agents and Artiﬁcial Intelligence (2002).
[32] LIM, J., AND YOO, S. Field Report: Applying Monte Carlo Tree
Search for Program Synthesis. In International Symposium on
Search Based Software Engineering (2016).
[33] LU, K., XIONG, S., AND GAO, D. RopSteg: Program Steganog-
raphy with Return Oriented Programming. In ACM Conference on
Data and Application Security and Privacy (CODASPY) (2014).
[34] MA, H., LU, K., MA, X., ZHANG, H., JIA, C., AND GAO, D.
Software Watermarking using Return-Oriented Programming. In
ACM Symposium on Information, Computer and Communications
Security (ASIACCS) (2015).
[35] MARC, SEBAG, M., SILVER, D., SZEPESVÁRI, C., AND TEY-
TAUD, O. Nested Monte-Carlo Search. Communications of the
ACM (2012).
[36] MICROSOFT RESEARCH. The Z3 Theorem Prover. https://
github.com/Z3Prover/z3.
658    26th USENIX Security Symposium
USENIX Association
[58] VMPROTECT SOFTWARE. VMProtect Software Protection. http:
//vmpsoft.com.
[59] VOGL, S., PFOH, J., KITTEL, T., AND ECKERT, C. Persistent
Data-only Malware: Function Hooks without Code. In Symposium
on Network and Distributed System Security (NDSS) (2014).
[60] YADEGARI, B., AND DEBRAY, S. Bit-level Taint Analysis. In
IEEE International Working Conference on Source Code Analysis
and Manipulation (2014).
[61] YADEGARI, B., AND DEBRAY, S. Symbolic Execution of Obfus-
cated Code. In ACM Conference on Computer and Communica-
tions Security (CCS) (2015).
[62] YADEGARI, B., JOHANNESMEYER, B., WHITELY, B., AND
DEBRAY, S. A Generic Approach to Automatic Deobfuscation of
Executable Code. In IEEE Symposium on Security and Privacy
(2015).
[63] ZHOU, Y., MAIN, A., GU, Y. X., AND JOHNSON, H. Information
Hiding in Software with Mixed Boolean-Arithmetic Transforms.
In International Workshop on Information Security Applications
(WISA) (2007).
[37] NETHERCOTE, N., AND SEWARD, J. Valgrind: A Framework for
Heavyweight Dynamic Binary Instrumentation. In ACM Sigplan
Notices (2007).
[38] OREANS TECHNOLOGIES. Themida – Advanced Windows Soft-
ware Protection System. http://oreans.com/themida.php.
[39] PAKT. ROPC: A Turing complete ROP compiler. https://
github.com/pakt/ropc.
[40] PEWNY, J., GARMANY, B., GAWLIK, R., ROSSOW, C., AND
HOLZ, T. Cross-architecture Bug Search in Binary Executables.
In IEEE Symposium on Security and Privacy (2015).
[41] PLAID CTF. ROP Challenge “quite quixotic chest”. https:
//ctftime.org/task/2305, 2016.
[42] QUYNH, N. A., DI, T. S., NAGY, B., AND VU, D. H. Capstone
Engine. http://www.capstone-engine.org.
[43] QUYNH, N. A., AND VU, D. H. Unicorn – The Ultimate CPU
Emulator. http://www.unicorn-engine.org.
[44] ROLLES, R. Unpacking Virtualization Obfuscators. In USENIX
Workshop on Offensive Technologies (WOOT) (2009).
[45] ROLLES, R.
Program Synthesis in Reverse Engineer-
ing. http://www.msreverseengineering.com/blog/2014/12/
12/program-synthesis-in-reverse-engineering, 2014.
[46] ROLLES, R. Synesthesia: A Modern Approach to Shellcode
http://www.msreverseengineering.com/blog/
Generation.
2016/11/8/synesthesia-modern-shellcode-synthesis-
ekoparty-2016-talk, 2016.
[47] RUIJL, B., VERMASEREN, J. A. M., PLAAT, A., AND VAN DEN
HERIK, H. J. Combining Simulated Annealing and Monte Carlo
Tree Search for Expression Simpliﬁcation. In International Con-
ference on Agents and Artiﬁcial Intelligence (2014).
[48] SARWAR, G., MEHANI, O., BORELI, R., AND KAAFAR, D. On
the Effectiveness of Dynamic Taint Analysis for Protecting against
Private Information Leaks on Android-based Devices. Nicta
(2013).
[49] SCHADD, M. P., WINANDS, M. H., TAK, M. J., AND
UITERWIJK, J. W. Single-player Monte-Carlo Tree Search for
SameGame. Knowledge-Based Systems (2012).
[50] SCHKUFZA, E., SHARMA, R., AND AIKEN, A. Stochastic Su-
peroptimization. ACM SIGPLAN Notices (2013).
[51] SCHWARTZ, E. J., AVGERINOS, T., AND BRUMLEY, D. Q:
Exploit Hardening Made Easy. In USENIX Security Symposium
(2011).
[52] SHACHAM, H. The Geometry of Innocent Flesh on the Bone:
Return-into-libc without Function Calls (on the x86). In ACM
Conference on Computer and Communications Security (CCS)
(2007).
[53] SHARIF, M., LANZI, A., GIFFIN, J., AND LEE, W. Automatic
Reverse Engineering of Malware Emulators. In IEEE Symposium
on Security and Privacy (2009).
[54] SILVER, D., HUANG, A., MADDISON, C. J., GUEZ, A.,
SIFRE, L., VAN DEN DRIESSCHE, G., SCHRITTWIESER, J.,
ANTONOGLOU, I., PANNEERSHELVAM, V., LANCTOT, M.,
ET AL. Mastering the Game of Go with Deep Neural Networks
and Tree Search. Nature (2016).
[55] SONY DADC.
SecuROM Software Protection.
www2.securom.com/Digital-Rights-Management.68.0.html.
https://
[56] SZITA, ISTVÁN AND CHASLOT, GUILLAUME AND SPRONCK,
PIETER. Monte-Carlo Tree Search in Settlers of Catan. In Ad-
vances in Computer Games (2009).
[57] TAGES SAS.
SolidShield Software Protection.
https:
//www.solidshield.com/software-protection-and-
licensing.
USENIX Association
26th USENIX Security Symposium    659