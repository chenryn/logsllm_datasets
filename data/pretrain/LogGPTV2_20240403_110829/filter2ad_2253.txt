# Title: ALICE@home: A Distributed Framework for Detecting Malicious Sites

## Authors:
- Ikpeme Erete, Georgia Institute of Technology
- Vinod Yegneswaran, SRI International
- Phillip A. Porras, SRI International

## Abstract
Malware infections, often through drive-by downloads, pose a significant threat to millions of systems annually. These client-side exploits target web browsers or browser helper objects when unsuspecting users visit pages with malicious content. Identifying and blacklisting such sites is crucial for defense. However, this task is challenging due to the scale, timeliness, and evasive tactics employed by adversaries. This paper introduces ALICE@home, a distributed framework designed to address these challenges and actively identify malware distribution sites.

The increasing prevalence of browser exploits and client-side attacks necessitates better surveillance strategies to blacklist malicious sites and detect new and zero-day exploits. One approach is to patrol the Internet for sites that surreptitiously install malicious software. However, this method faces significant challenges, including the vast number of web links (over a trillion) tracked by modern search engines, the time required to assess each link, and the use of obfuscation, IP tracking, and website cloaking by adversaries. Additionally, most search engines do not index JavaScript content, making it difficult to discover malicious sites based on exploit features alone. To overcome these challenges, we propose an intelligent, Internet-scale approach to the malicious site discovery problem.

ALICE@home leverages the idle processing cycles of desktops to crawl the web for infected sites, enabling it to scale to tens of millions of pages per day with a 1000-node network. This distributed approach also helps evade IP-tracking strategies used by malicious sites. Participants in the network can receive real-time feeds of malicious sites to blacklist from other participants, providing a tangible incentive for participation.

## 1. ALICE: Virtual Honey-Client
A key component of ALICE@home is ALICE (A Low-Interaction Crawler and Emulator), a tool designed for discovering and analyzing drive-by downloads. ALICE is lightweight, scalable, self-learning, easily deployable, precise, and resilient to evasion. Detecting malicious scripts embedded in web pages is challenging due to complexities such as redirects, obfuscation, multiple layers of frames and iframes, and self-modifying script code. Static analysis is difficult because attackers often obfuscate scripts or use string operations to conceal their contents. Therefore, ALICE uses dynamic analysis to generate and output execution traces of the script.

ALICE eliminates the need for a forensic tool or a virtual machine running a vulnerable operating system and browser by using a lightweight browser emulator. This emulator safely executes scripts and emulates the Document Object Model (DOM) hierarchy, providing the necessary support functions, hierarchical structure, and a safe execution environment. It exposes the script's execution path and uses SpiderMonkey (Mozillaâ€™s C implementation of a JavaScript engine) to execute all JavaScript. The analysis engine post-processes the script output and compares it with a dictionary of known exploits to identify malicious scripts. ALICE's lightweight design allows a single instance to process over 12 URLs per minute.

## 2. Preliminary Results
ALICE@home has been effective in identifying malware distribution sites, particularly in cases involving MDAC vulnerabilities and BHO vulnerabilities. For MDAC vulnerabilities, the location of the malware distribution site is often different from the landing site, and these sites use techniques like non-determinism, IP tracking, and fast flux to change domain name bindings rapidly.

### Processing Rate
We evaluated ALICE's processing rate compared to other approaches [2, 6, 1]. In the worst case, ALICE is at least 300% faster than Wang et al., and in the best case, it is 17% faster than Moshchuk et al.'s optimized approach. The technique by [2] affects the detection capability of their system, as some steps used by distribution sites to evade detection are missed. Compared to PhoneyC [3], another similar virtual honeyclient, ALICE processes URLs more efficiently, with PhoneyC taking an average of 2.1 hours per URL.

### Detection
In our initial testing of 35,000 URLs, we detected 1294 drive-by download sites, focusing on attacks exploiting MDAC vulnerabilities. These sites linked to 33 unique distribution sites hosting malicious binaries. All 33 distribution sites infrequently infected hosts using IP tracking, but we were able to detect them.

## References
1. Moshchuk, A., Bragin, T., Deville, D., Gribble, S.D., Levy, H.M.: Spyproxy: Execution-based detection of malicious web content. In: 16th USENIX Security Symposium (August 2007)
2. Moshchuk, A., Bragin, T., Gribble, S.D., Levy, H.M.: A crawler-based study of spyware on the web. In: Network and Distributed System Security Symposium (February 2006)
3. Nazario, J.: Phoneyc: A virtual client honeypot. In: 2nd USENIX Workshop on Large-Scale and Emergent Threats, Boston, MA (April 2009)
4. Provos, N., Mavrommatis, P., Rajab, M.A., Monrose, F.: All your iframes point to us. In: 17th USENIX Security Symposium (2008)
5. Anagnostakis, K.G., Antonatos, S., Markatos, E.P.: Honey@home: A new approach to large-scale threat monitoring. In: 5th ACM Workshop on Recurring Malcode (2007)
6. Wang, Y.-M., Beck, D., Jiang, X., Roussev, R., Verbowski, C., Chen, S., King, S.: Automated web patrol with strider honeymonkeys: Finding web sites that exploit browser vulnerabilities. In: Network and Distributed System Security Symposium (NDSS), San Diego, CA (2006)

---

This revised version improves the clarity, coherence, and professionalism of the original text.