# Winning at Reversing: API Tracing and Sandboxing through Inline Hooking

**Author:** Nick Harbour

## Agenda
1. **Reverse Engineering Primer**
2. **Approaches to Dynamic Analysis**
3. **Inline Hooks**
4. **Advantages Over Other Techniques**
5. **Usages**

## 1. Reverse Engineering Primer
Reverse engineering techniques can be divided into two categories: **Static Analysis** and **Dynamic Analysis**.

### Static Analysis
- **Definition:** Techniques that do not involve running the code.
- **Examples:** Disassembly, file structure analysis, string extraction, etc.

### Dynamic Analysis
- **Definition:** Techniques that involve running the code.
- **Examples:** Behavioral analysis, network monitoring, hardware emulation, kernel-level monitoring, and debugging.

## 2. Approaches to Dynamic Analysis
- **Network Monitoring**
  - Isolated Physical Networks
  - Virtual Networks
- **Hardware Emulation**
  - Norman Sandbox, etc.
- **Kernel-Level Monitoring (SSDT Hooks)**
  - Sysinternals’ Process Monitor
- **Debuggers**

### Kernel-Level Monitoring
- **System Call Flow:**
  - **User Mode Process** calls `CreateFile()` in `Kernel32.dll`.
  - `Ntdll.dll` translates this to a system call `ZwCreateFile()`.
  - The **Kernel** performs the system call.
  - **Procmon.sys** captures the system call.

#### Advantages
- Captures every system call.
- Cannot be avoided from userland.

#### Disadvantages
- Only captures functions implemented as system calls.
- Not all important Win32 API function calls are system calls.
- Tools do not differentiate between process housekeeping and calls from user code.
- Calls to internal DLLs cannot be observed.

### Process Monitor
- A tool for monitoring system calls and file I/O operations.

### Process Monitoring via Debugging
- **Advantages:**
  - Debugger can trap any function call, not just system calls.
  - Trapped calls are more likely to be highly relevant to the program’s operation.
- **Disadvantages:**
  - Requires acting as a debugger.
  - Susceptible to numerous anti-debugger techniques.

## 3. Inline Hooks
- **Advantages:**
  - Can trap any function call, not just system calls.
  - Trapped calls are more likely to be highly relevant to the program’s operation.
  - Does not operate as a debugger.
  - No device driver required.
- **Disadvantages:**
  - More complex to implement.

### Monitoring with Inline Hooks
- **System Call Flow:**
  - **User Mode Process** calls `CreateFile()` in `Kernel32.dll`.
  - `Ntdll.dll` translates this to a system call `ZwCreateFile()`.
  - The **Kernel** performs the system call.
  - **Hook Handler** intercepts and processes the call.

### Implementing Inline Hooks
1. **Find a function of interest.**
2. **Disassemble the beginning of the function.**
3. **Overwrite the beginning bytes of the function with a jump or call instruction, if possible.**
4. **Implement a handler for the hooked function.**

### Why Disassemble?
- If you attempt to hook every function from a DLL, you might encounter a function like the one below:
  ```assembly
  somefunction:
    31 C0
    xor eax, eax
    C3
    retn
  ```
  - Inserting a 5-byte jump or call would write beyond the end of the function.

### A Successful Hook Install
- **Original Function:**
  ```assembly
  original_function:
    55
    push ebp
    89 E5
    mov ebp, esp
    81 EC 18 00 00 00
    sub esp, 24
    31 C9
    xor ecx, ecx
    ...
  ```
- **Hooked Function:**
  ```assembly
  hooked_function:
    E9 E4 7C FF FF
    jmp 18 00 00 00
    ;unused
    31 C9
    xor ecx, ecx
  ```

### What to Do with Hooked Functions
- **Observe and Report:**
  - Collect data about the current function call by gathering data from the stack and report to the console.
  - Execute any instructions overwritten by the hook.
  - Jump back to the next instruction in the hooked function.
- **Intercept and Emulate:**
  - Perform a specified action instead of calling the intended function.

## 4. Roll-Your-Own Sandbox
- **Trap `gethostbyname()`** to always return a fixed IP address.
- **Pseudo-handle interface** to allow fake reads and writes to files and network sockets.
  - Trap `connect()` to connect to a pseudo-socket.
  - Trap `CreateFile()`, `ReadFile()`, `WriteFile()`, `MapViewOfFile()`, etc.

## 5. API Thief
- **Process Launch:** Launches the target process in a suspended state.
- **DLL Injection:** Injects a DLL into the process.
- **API Hooking:** The injected DLL hooks all Win32 API functions before the target process is resumed.
- **Monitoring:** API call monitoring can be used with a process monitor-style console.
- **Custom Handlers:** Embedded Python can be used to write custom handlers for specific hooked functions.
- **Availability:** Obtain API Thief at [www.mandiant.com](http://www.mandiant.com).

### API Thief Demonstration
- **Basic Process Monitoring**
- **Basic Interception (gethostbyname)**
- **Pseudo-Handles Demonstration**
- **Automated Unpacking with API Thief**

**Questions?**  
**Contact:** PI:EMAIL