# Title: Secure Identification of Actively Executed Code on a Generic Trusted Component

## Authors
- Bruno Vavala<sup>1,2</sup>
- Nuno Ferreira Neves<sup>2</sup>
- Peter Steenkiste<sup>1</sup>

### Affiliations
1. CSD, Carnegie Mellon University, U.S.
2. LaSIGE, Faculdade de Ciências, Universidade de Lisboa, Portugal

### Abstract
Code identity is a fundamental concept for authenticated operations in Trusted Computing (TC). Current approaches to assigning an identity to a protected service incur overheads that increase linearly with the size of the service code. As service code continues to grow to accommodate richer functionalities, this trend negatively impacts either the security or the efficiency of current protocols for trusted executions.

We present an execution protocol that decouples the code size from the identification overhead, without compromising security, and that is compatible with various trusted components. This is achieved by computing an identity for each actively executed code module and building a robust chain of trust that links these modules together for efficient verification. We implemented our protocol on a widely-deployed database engine, improving query-processing time by up to 2× compared to monolithic execution.

## 1. Introduction

The rapid growth of Cloud Computing has fueled research into new security techniques, particularly for protecting security-sensitive applications running on untrusted third-party (UTP) platforms using Trusted Computing Components (TCCs). In the literature, several trusted execution architectures have been proposed, and in the industry, TCCs are primarily used for storing cryptographic material. However, prototypes are emerging for securing complex software.

In Trusted Computing, code identification is a key mechanism for ensuring execution integrity. It involves computing and attesting the identity of some code \( c \) on the UTP side, and then verifying both the attestation and the code identity on the client side. The major challenge with using code identification for increasingly complex software is that the overhead to compute \( c \)'s identity grows linearly with \( c \)'s size. This becomes a concern when only a fraction of the code base is actively executed, and frequent code identification is desirable to maintain execution integrity.

In this paper, we present a protocol for code identification and execution that breaks the coupling between code size and the cost of identification. The protocol has two key features: it loads, identifies, and runs only the code modules that are actually executed, and it ensures the correct execution sequence of code modules through a robust and verifiable execution chain. These mechanisms combined enable secure and efficient identification and verification.

Our contributions include:
- Designing an efficient protocol for the secure execution of complex software inside a generic trusted component, where the cost of code identification scales with the size of the executed modules rather than the entire code base.
- Analyzing the security of our constructions and introducing a novel zero-round key sharing technique for trusted executions that improves performance with minimal changes.
- Implementing the protocol on a hypervisor-based TCC (XMHF/TrustVisor) and applying it to the widely-deployed SQLite DB engine, formally verifying its correctness, and demonstrating its performance benefits.

## 2. Towards Flexible Trusted Executions

Current trends in Trusted Computing show that the code used in trusted executions is growing, raising either efficiency or security concerns. Early work focused on verifying the integrity of a system's initial state using trusted hardware, but preserving trust during execution is challenging due to the TOCTOU problem. Improvements in TC technology have made it possible to secure larger code bases, but this comes with significant overheads.

There are two main alternatives for dealing with large code bases: measure-once-execute-forever, which brings back the TOCTOU problem, and measure-once-execute-once, which can be inefficient. Our goal is to make the secure execution cost scale with the size of the actually executed code, independently of the used trusted component, thus balancing the cost of re-identifying code and reducing the active TCB size.

## 3. Problem Definition

The code identification cost has become a bottleneck. If the code is identified only once, identity integrity stales over time; if identified repeatedly, the overall execution time may increase significantly for large code bases. We aim to achieve non-stale identities and an execution time less dependent on the code base size.

## 4. Overview of Our Solution

Our solution, illustrated in Fig. 3, executes only the necessary code modules for a requested service. Each module secures the intermediate state before termination, and the next active module validates the previous state. This builds a robust execution chain based on the identities of the modules, ensuring they are executed in the correct order. Each executing module has access to the Identity Table of the code base, leveraging TCC-based access control mechanisms to secure data. Intermediate states are transferred between modules through logical secure channels.

## 5. Implementation, Formal Verification, and Evaluation

We implemented our protocol on XMHF/TrustVisor and applied it to the SQLite DB engine. We formally verified its correctness and demonstrated its performance benefits, including improved query-processing time.

## 6. Performance Model for Code Identification

We devised and validated a performance model for code identification, providing insights into the efficiency gains of our protocol.

## 7. Related Work

We review related work in the field of Trusted Computing, highlighting the advancements and challenges in securing complex software.

## 8. Conclusions

In conclusion, our protocol provides a flexible and efficient approach to secure the execution of complex software, breaking the dependency between code size and identification overhead while maintaining robust security guarantees.

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.