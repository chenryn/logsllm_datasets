和已经过时但仍在使用的文件。Tomnomnom 的 Waybackurls
工具（https://github.com/tomnomnom/waybackurls/）可以自动从 Wayback
Machine 中提取端点和 URL。
![[Figure 5-9]{#c05.xhtml#figure5-9} : The Wayback Machine archives the
internet and allows you to see pages that have been removed by a
website. ¶ 图5-9：Wayback
Machine存档了互联网并允许您查看网站删除的页面。](image_fi/501546c05/f05009.png){.keyline}
## Tech Stack Fingerprinting {#c05.xhtml#h1-501546c05-0005}
Fingerprinting techniques can help you understand the target application
even better. *Fingerprinting* is identifying the software brands and
versions that a machine or an application uses. This information allows
you to perform targeted attacks on the application, because you can
search for any known misconfigurations and publicly disclosed
vulnerabilities related to a particular version. For example, if you
know the server is using an old version of Apache that could be impacted
by a disclosed vulnerability, you can immediately attempt to attack the
server using it.
指纹技术可以帮助你更好地了解目标应用程序。指纹识别是识别机器或应用程序使用的软件品牌和版本的过程。这些信息可以让你对该应用程序进行有针对性的攻击，因为你可以搜索与特定版本相关的任何已知的配置错误和公开披露的漏洞。例如，如果你知道服务器正在使用一个旧版本的Apache，而该版本可能受到已披露的漏洞的影响，那么你可以立即尝试使用该漏洞对该服务器进行攻击。
The security community classifies known vulnerabilities as *Common
Vulnerabilities and Exposures (* *CVEs)* and gives each CVE a number for
reference. Search for them on the CVE database (
[https://cve.mitre.org/cve/search_cve_list.html](https://cve.mitre.org/cve/search_cve_list.html){.LinkURL}
*).*
安全社区将已知漏洞分类为常见漏洞和暴露（CVEs），并为每个CVE分配一个参考编号。
在CVE数据库上搜索它们（https://cve.mitre.org/cve/search_cve_list.html）。
The simplest way of fingerprinting an application is to engage with the
application directly. First, run Nmap on a machine with the
`      -sV     ` flag on to enable version detection on the port scan.
Here, you can see that Nmap attempted to fingerprint some software
running on the target host for us:
指纹识别应用程序的最简单方法是直接与应用程序互动。首先，在使用-sV标志的机器上运行Nmap以启用端口扫描的版本检测。在这里，您可以看到Nmap尝试为我们指纹识别目标主机上运行的一些软件：。
    $ nmap scanme.nmap.org -sV
    Starting Nmap 7.60 ( https://nmap.org )
    Nmap scan report for scanme.nmap.org (45.33.32.156)
    Host is up (0.065s latency).
    Other addresses for scanme.nmap.org (not scanned): 2600:3c01::f03c:91ff:fe18:bb2f
    Not shown: 992 closed ports
    PORT STATE SERVICE VERSION
    22/tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)
    25/tcp filtered smtp
    80/tcp open http Apache httpd 2.4.7 ((Ubuntu))
    135/tcp filtered msrpc
    139/tcp filtered netbios-ssn
    445/tcp filtered microsoft-ds
    9929/tcp open nping-echo Nping echo
    31337/tcp open tcpwrapped
    Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
    Service detection performed. Please report any incorrect results at https://nmap.org/submit/.
    Nmap done: 1 IP address (1 host up) scanned in 9.19 seconds
Next, in Burp, send an HTTP request to the server to check the HTTP
headers used to gain insight into the tech stack. A server might leak
many pieces of information useful for fingerprinting its technology:
接下来，在Burp中发送HTTP请求到服务器，检查所使用的HTTP标头，以获取有关技术栈的信息。服务器可能会泄漏许多有用的信息，有助于指纹识别其技术：
    Server: Apache/2.0.6 (Ubuntu)
    X-Powered-By: PHP/5.0.1
    X-Generator: Drupal 8
    X-Drupal-Dynamic-Cache: UNCACHEABLE
    Set-Cookie: PHPSESSID=abcde;
HTTP headers like `      Server     ` and `      X-Powered-By     ` are
good indicators of technologies. The `      Server     ` header often
reveals the software versions running on the server.
`      X-Powered-By     ` reveals the server or scripting language used.
Also, certain headers are used only by specific technologies. For
example, only Drupal uses `      X-Generator     ` and
`      X-Drupal-Dynamic-Cache     ` . Technology-specific cookies such
as `      PHPSESSID     ` are also clues; if a server sends back a
cookie named `      PHPSESSID     ` , it's probably developed using PHP.
HTTP头像服务器和X-Powered-By是技术指示器的好标志。服务器标头经常显示运行在服务器上的软件版本。X-Powered-By显示了使用的服务器或脚本语言。此外，某些标头仅用于特定技术。例如，只有Drupal使用X-Generator和X-Drupal-Dynamic-Cache。特定于技术的cookie（如PHPSESSID）也是提示;如果服务器发送名为PHPSESSID的cookie，则可能使用PHP开发。
The HTML source code of web pages can also provide clues. Many web
frameworks or other technologies will embed a signature in source code.
Right-click a page, select **View Source Code** , and press [ CTRL
]{.KeyCaps} -F to search for phrases like *powered by* , *built with* ,
and *running* . For instance, you might find
`      Powered by: WordPress 3.3.2     ` written in the source.
网页的HTML源代码也可以提供线索。许多Web框架或其他技术都会在源代码中嵌入签名。右键单击页面，选择查看源代码，按CTRL-F搜索诸如powered
by、built with和running等短语。例如，你可能会在源码中找到如Powered by:
WordPress 3.3.2的字样。
Check technology-specific file extensions, filenames, folders, and
directories. For example, a file named *phpmyadmin* at the root
directory, like *https://example.com/phpmyadmin* , means the application
runs PHP. A directory named *jinja2* that contains templates means the
site probably uses Django and Jinja2. You can find more information
about a specific technology's filesystem signatures by visiting its
individual documentation.
请检查专属于技术的文件扩展名，文件名，文件夹和目录。例如，在根目录下命名为phpmyadmin的文件，例如https://example.com/phpmyadmin，表示该应用程序运行PHP。包含模板的名为jinja2的目录可能意味着该网站使用Django和Jinja2。您可以通过访问其个人文档来获取有关特定技术的文件系统签名的更多信息。
Several applications can automate this process. *Wappalyzer* (
[https://www.wappalyzer.com/](https://www.wappalyzer.com/){.LinkURL} )
is a browser extension that identifies content management systems,
frameworks, and programming languages used on a site. *BuiltWith* (
[https://builtwith.com/](https://builtwith.com/){.LinkURL} ) is a
website that shows you which web technologies a site is built with.
*StackShare* (
[https://stackshare.io/](https://stackshare.io/){.LinkURL} ) is an
online platform that allows developers to share the tech they use. You
can use it to find out if the organization's developers have posted
their tech stack. Finally, [ ]{#c05.xhtml#Page_80 .pagebreak title="80"}
Retire.js is a tool that detects outdated JavaScript libraries and
Node.js packages. You can use it to check for outdated technologies on a
site.
有几个应用程序可以自动化这个过程。Wappalyzer
(https://www.wappalyzer.com/)
是一个浏览器扩展，可以识别站点上使用的内容管理系统、框架和编程语言。BuiltWith
(https://builtwith.com/)
是一个网站，可以显示网站使用的网页技术。StackShare
(https://stackshare.io/)
是一个在线平台，允许开发人员分享他们使用的技术。您可以使用它来查找组织的开发人员是否已发布他们的技术栈。最后，Retire.js
是一个工具，可以检测过时的 JavaScript 库和 Node.js
包。您可以使用它来检查站点上是否存在过时的技术。
## Writing Your Own Recon Scripts {#c05.xhtml#h1-501546c05-0006}
You've probably realized by now that good recon is an extensive process.
But it doesn't have to be time-consuming or hard to manage. We've
already discussed several tools that use the power of automation to make
the process easier.
你可能已经意识到了，良好的侦察是一个复杂的过程。但是它并不一定需要耗费大量的时间或难以管理。我们已经讨论了几种利用自动化技术来简化这一过程的工具。
Sometimes you may find it handy to write your own scripts. A *script* is
a list of commands designed to be executed by a program. They're used to
automate tasks such as data analysis, web-page generation, and system
administration. For us bug bounty hunters, scripting is a way of quickly
and efficiently performing recon, testing, and exploitation. For
example, you could write a script to scan a target for new subdomains,
or enumerate potentially sensitive files and directories on a server.
Once you've learned how to script, the possibilities are endless.
有时候你可能会发现编写自己的脚本很方便。脚本是一组命令的列表，旨在通过程序执行。它们用于自动化数据分析、网页生成和系统管理等任务。对于我们这些漏洞赏金猎人来说，脚本是一种快速高效地执行侦察、测试和利用的方式。例如，你可以编写一个脚本来扫描目标找出新的子域名，或者在服务器上枚举潜在的敏感文件和目录。一旦你学会了如何编写脚本，可能性就是无限的。
This section covers bash scripts in particular---what they are and why
you should use them. You'll learn how to use bash to simplify your recon
process and even write your own tools. I'll assume that you have basic
knowledge of how programming languages work, including variables,
conditionals, loops, and functions, so if you're not familiar with these
concepts, please take an introduction to coding class at Codecademy (
[https://www.codecademy.com/](https://www.codecademy.com/){.LinkURL} )
or read a programming book.
本节特别介绍bash脚本，包括其定义和使用的原因。您将学习如何使用bash简化您的侦察过程，甚至编写自己的工具。我假定您对编程语言的基本知识有所了解，包括变量、条件、循环和函数，如果您对这些概念不熟悉，请参加Codecademy（https://www.codecademy.com/）的编程入门课程或阅读编程书籍。
Bash scripts, or any type of shell script, are useful for managing
complexities and automating recurrent tasks. If your commands involve
multiple input parameters, or if the input of one command depends on the
output of another, entering it all manually could get complicated
quickly and increase the chance of a programming mistake. On the other
hand, you might have a list of commands that you want to execute many,
many times. Scripts are useful here, as they save you the trouble of
typing the same commands over and over again. Just run the script each
time and be done with it.
Bash脚本或任何类型的shell脚本，都有助于管理复杂性并自动化重复任务。如果您的命令涉及多个输入参数，或者一个命令的输入取决于另一个命令的输出，手动输入这些内容可能会很复杂，增加编程错误的机会。另一方面，您可能有一系列命令需要执行很多次。在这种情况下，脚本非常有用，因为它们可以让您省去反复输入相同命令的麻烦。只需每次运行脚本即可完成任务。
### Understanding Bash Scripting Basics {#c05.xhtml#h2-501546c05-0010}
Let's write our first script. Open any text editor to follow along. The
first line of every shell script you write should be the *shebang*
*line* . It starts with a hash mark ( `      #     ` ) and an
exclamation mark ( `      !     ` ), and it declares the interpreter to
use for the script. This allows the plaintext file to be executed like a
binary. We'll use it to indicate that we're using bash.
让我们写我们的第一个脚本。打开任何文本编辑器进行跟随。你写的每个 shell
脚本的第一行应该是 shebang 行。它以井号 (#) 和感叹号 (!)
开头，并声明要用于脚本的解释器。这允许纯文本文件像二进制文件一样被执行。我们将使用它来表示我们正在使用
bash。
Let's say we want to write a script that executes two commands; it
should run Nmap and then Dirsearch on a target. We can put the commands
in the script like this:
假设我们想编写一个脚本，执行两个命令；它应该在目标上运行Nmap，然后在其中运行Dirsearch。我们可以像这样将命令放入脚本中：
    #!/bin/bash
    nmap scanme.nmap.org
    /PATH/TO/dirsearch.py -u scanme.nmap.org -e php
[ ]{#c05.xhtml#Page_81 .pagebreak title="81"} This script isn't very
useful; it can scan only one site, *scanme.nmap.org* . Instead, we
should let users provide input arguments to the bash script so they can
choose the site to scan. In bash syntax, `      $1     ` represents the
first argument passed in, `      $2     ` is the second argument, and so
on. Also, `      $@     ` represents all arguments passed in, while
`      $#     ` represents the total number of arguments. Let's allow
users to specify their targets with the first input argument, assigned
to the variable `      $1     ` :
这个脚本并不是非常有用，它只能扫描一个网站，scanme.nmap.org。相反，我们应该让用户提供输入参数来控制
bash 脚本，这样他们就可以选择要扫描的网站。在 bash 语法中，\$1
表示传递的第一个参数，\$2 为第二个参数，以此类推。同时，\$@
表示所有传入的参数，而 \$#
表示参数的总数。让我们允许用户使用第一个输入参数来指定他们的目标，并将其分配给变量
\$1：
    #!/bin/bash
    nmap $1
    /PATH/TO/dirsearch.py -u $1 -e php
Now the commands will execute for whatever domain the user passes in as
the first argument.
现在，命令将针对用户作为第一个参数传递的任何域执行。
Notice that the third line of the script includes
*/PATH/TO/dirsearch.py* . You should replace */PATH/TO/* with the
absolute path of the directory where you stored the Dirsearch script. If
you don't specify its location, your computer will try to look for it in
the current directory, and unless you stored the Dirsearch file in the
same directory as your shell script, bash won't find it.
请注意脚本的第三行包括 /PATH/TO/dirsearch.py。你应该用 Dirsearch
脚本所在的目录的绝对路径替换
/PATH/TO/。如果你不指定其位置，你的计算机将尝试在当前目录中寻找它，除非你将
Dirsearch 文件存储在与你的 shell 脚本相同的目录中，否则 bash
将找不到它。
Another way of making sure that your script can find the commands to use
is through the `      PATH     ` variable, an environmental variable in
Unix systems that specifies where executable binaries are found. If you
run this command to add Dirsearch's directory to your `      PATH     `
, you can run the tool from anywhere without needing to specify its
absolute path:
你可以通过PATH变量来确保你的脚本可以找到要使用的命令。在Unix系统中，它是一个环境变量，指定了可执行二进制文件的位置。如果你运行这个命令将Dirsearch的目录添加到PATH中，你就可以在任何地方运行该工具，而无需指定其绝对路径。
    export PATH="PATH_TO_DIRSEARCH:$PATH"
After executing this command, you should be able to use Dirsearch
directly:
执行此命令后，您应该能够直接使用Dirsearch:
    #!/bin/bash
    nmap $1
    dirsearch.py -u $1 -e php
Note that you will have to run the `      export     ` command again
after you restart your terminal for your `      PATH     ` to contain
the path to Dirsearch. If you don't want to export `      PATH     `
over and over again, you can add the `      export     ` command to your
*\~/* *.bash_profile* file, a file that stores your bash preferences and
configuration. You can do this by opening *\~/.bash_profile* with your
favorite text editor and adding the `      export     ` command to the
bottom of the file.
请注意，重启终端后，您必须再次运行导出命令，以便您的PATH包含Dirsearch路径。如果您不想一遍又一遍地导出PATH，您可以将导出命令添加到\~/.bash_profile文件中，这是一个存储bash偏好和配置的文件。您可以通过用您喜欢的文本编辑器打开\~/.bash_profile，并将导出命令添加到文件底部来实现这一点。