0
0
0
0
0
0
0
0
0
0
1
1
2
3
4
5
6
7
8
9
 0.001
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
4
5
6
7
8
9
0
1
 0.001
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
4
5
6
7
8
9
0
1
Fig. 3. Comparison of CMarkov, STILO and Regular HMM’s false negative rates (in Y-axis, base 10 log scale) for evaluated utility programs on system
calls under the same false positive rates (in X-axis).
various internal functions of a program. As a result, the caller
context distinguishes library calls within different functions
very well. This fact leads to a relatively large number of
distinct library calls in our constructed context-sensitive model
as well as in the dynamic execution traces.
System calls are often included in their corresponding wrap-
per functions, thus do not have great diversity in terms of their
caller functions. In this case, the static analysis shows more
impact on the accuracy of models, where both CMarkov and
STILO models demonstrate lower false negative rates than
the Regular-context and Regular-basic models, as shown in
Figure 5. Context-sensitive and context-insensitive models
(Regular-basic and Regular-context, STILO and CMarkov)
usually have similar numbers of distinct system calls, thus
similar numbers of states in the models. As a result their false
negative results are very close.
In terms of the average detection accuracy on library call
traces computed across all evaluated programs, CMarkov gives
452-fold improvement compared to STILO and 31-fold im-
provement compared to Regular-basic on average. For system
call traces, CMarkov has 2-fold improvement compared to
STILO on system calls and 10-fold improvement compared
)
0
1
e
s
a
b
l
e
a
c
s
g
o
L
(
e
t
a
r
e
v
i
t
a
g
e
n
l
e
s
a
F
 0.1
 0.01
 0.001
0
Regular-basic
Regular-context
libcall:nginx
STILO
CMarkov
libcall:proftpd
 0.01
 0.001
0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
0
0
0
0
0
0
0
0
0
0
1
0
2
0
3
0
4
0
5
0
6
0
7
0
8
0
9
0
1
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
0
0
0
0
0
0
0
1
0
2
0
3
0
4
0
5
0
6
0
0
0
0
0
0
7
8
9
0
1
False positive rate
False positive rate
Fig. 4. Comparison of CMarkov, STILO and Regular HMM’s false negative
rates (in Y-axis, base 10 log scale) for server programs proftpd and nginx
on library calls under the same false positive rates (in X-axis).
to Regular-basic on average. The overall improvement over
STILO, especially on libcall traces, conﬁrms the effectiveness
of our context-sensitive program anomaly detection.
One of the security advantages of CMarkov is that
it
imposes strict enforcement on how and where a system call
can be made by a program. Each system call can only be issued
from very few legitimate caller functions. This restriction on
caller context greatly limits an attacker’s degree of freedom
474
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:29 UTC from IEEE Xplore.  Restrictions apply. 
)
0
1
e
s
a
b
l
e
a
c
s
g
o
L
(
e
t
a
r
e
v
i
t
a
g
e
n
l
e
s
a
F
 0.1
 0.01
 0.001
0
Regular-basic
Regular-context
syscall:nginx
STILO
CMarkov
syscall:proftpd
 0.1
 0.01
 0.001
0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
4
5
6
7
8
9
0
1
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
 0.0
0
0
0
0
0
0
0
0
0
0
0
0
1
2
3
4
5
6
0
0
0
0
7
0
8
0
9
0
1
False positive rate
False positive rate
Fig. 5. Comparison of CMarkov, STILO and Regular HMM’s false negative
rates (in Y-axis, base 10 log scale) for server programs proftpd and nginx
on system calls under the same false positive rates (in X-axis).
e
g
r
e
v
n
o
C
o
t
s
n
o
i
t
a
r
e
t
I
f
o
#
 75
 70
 65
 60
 55
 50
 45
 40
 35
64.44
64.36
71.06
66.35
64.94
39.59
36.49
45.50
regular-basic-syscall
regular-context-syscall
STILO-syscall
C
Markov-syscall
regular-basic-libcall
regular-context-libcall
STILO-libcall
C
Markov-libcall
Models
Fig. 6. Average number of training iterations needed for a HMM to converge.
Comparisons are among our CMarkov and STILO models and regular HMMs.
within a victim application. Its impact on ROP attack difﬁculty
is discussed in the next section.
For the exceptional case of flex with system call traces,
the CMarkov model shows higher false rates than the STILO
model. flex has the least number of distinct call segments in
the termination set (not shown), which indicates less diversity
for call sequence patterns in its traces compared to others. Its
context-sensitive model may cause possible overﬁtting.
Convergence Figure 6 gives the average number of iterations
for a HMM model to converge. The number is averaged across
all eight programs in our experiments. Both CMarkov and
STILO HMM models take fewer iterations than the regular
HMM models to converge, despite having more states in the
models. On average our CMarkov models takes 30% fewer
iterations to converge than regular models. CMarkov HMMs
take more iterations to converge than STILO HMMs, which is
partially due to that the additional context information makes
the initial CMarkov HMMs more complex and larger.
D. Limiting ROP Gadgets with Context
We reproduced the following two call segments q1 and q2,
with the ROP gadgets that exist in the binary of gzip 2.
Our CMarkov model
immediately identiﬁes the incorrect
caller context and detects the anomaly. However, the context-
2A buffer overﬂow vulnerability instrumented into gzip allows us to make
further ROP executions.
insensitive models wrongly classify them as benign (at a false
positive rate of 0.0001).
• q1:
[uname, brk, brk, brk, brk,
rt sigaction,
rt sigaction, rt sigaction, rt sigaction, read, close, close, unlink,
chmod]
rt sigaction,
• q2: [brk, rt sigaction, rt sigaction, rt sigaction, rt sigaction,
rt sigaction, rt sigaction, stat, openat, getdents, close, write,
read, write, write]
SEARCH RESULT OF USEFUL [SYSCALL...RET] GADGETS FOR MAKING
A SEQUENCE OF SYSTEM CALLS. SEARCH INCLUDES EVALUATED
TABLE III
BINARIES AND LIBC.
Max Length of Instruction Gadget
6