### 4. General Architecture

Given a quadratic equation (2) for any \( (x, e, w) \) such that \( 0 \leq xPe \), the equation has two solutions for \( Px \) if and only if:
\[
\text{Tr}(Pe_x) = 0
\]
and has no solutions if:
\[
\text{Tr}(Pe_x) \neq 0
\]
where \(\text{Tr}\) denotes the trace of \( y \) in \( \text{GF}(2^r) \).

Out of the \( n \) errors, \( k^2 \) errors satisfy this condition. Robust codes can be used to extend the error coverage of any linear prediction scheme for AES. Only two additional cubic networks are needed: one in the extended device and one in the Error Detection Network (EDN). The architecture of AES with robust protection is shown in Figure 1.

In the architecture depicted in Figure 1, a single linear predictor is assumed for the encryptor, decryptor, and key expansion. This architecture can be extended to include separate linear predictors for each device. Note that in this context, a linear predictor generates a signature, which is a linear combination of the outputs of the round. It does not imply that the predictor contains only linear elements; it could contain nonlinear elements as long as its output is linear with respect to the output of the round. The r-bit signature of the linear predictor is cubed to produce an r-bit output, which is nonlinear in \( \text{GF}(2^r) \) with respect to the output of the round.

**Figure 1.** Robust architecture for one round of AES.

For the robust architecture, we have designed a linear predictor that generates a 32-bit signature. This linear predictor offers a relatively compact design, allowing for easy hardware sharing for encryption and decryption prediction. The single predictor is designed to protect both the encryptor/decryptor and the key-expansion. The complete design of the linear predictor is detailed in the next section.

### 5. Detailed Design of the Linear Predictor

The output of the linear predictor is linearly related to the output of the AES round (see Figure 2). Specifically, each byte of the linear predictorâ€™s output is equivalent to the componentwise XOR of four bytes of the output of a round (see Figure 3 for a summary of the notations used).

In this method, the function of each byte of \( L'(j) \) no longer includes the MixColumns transformation [16]. As a result, the linear predictor is greatly simplified since it no longer needs to perform multiplications associated with MixColumns/InvMixColumns. The details of the simplification are listed below.

**Figure 2.** Relation of the output of the Linear Predictor \( L'(j) \) to the output of a round of AES, Out(i,j).

**Figure 3.** Notations used.

In the design presented in Figure 3, the complete linear predictor consists of two components: the Linear Predictor and the Linear Compressor K. The output of the linear predictor, \( L'(j) \), is a 4-byte word that is linearly related to the output of one round of AES. The function of \( L'(j) \) with respect to Out(i,j) can be written as:
\[
L'(j) = \sum_{i=0}^{3} \text{Out}(i, j)
\]
where \( j \in \{0, 1, 2, 3\} \).

Combining equations (7), (8), and (9) results in:
\[
L'(j) = \sum_{i=0}^{3} \text{Out}(i, j)
\]

Extending the procedure to the rest of the bytes of encryption yields:
\[
L'(0) = \text{Out}(0, 0) \oplus \text{Out}(1, 0) \oplus \text{Out}(2, 0) \oplus \text{Out}(3, 0)
\]
\[
L'(1) = \text{Out}(0, 1) \oplus \text{Out}(1, 1) \oplus \text{Out}(2, 1) \oplus \text{Out}(3, 1)
\]
\[
L'(2) = \text{Out}(0, 2) \oplus \text{Out}(1, 2) \oplus \text{Out}(2, 2) \oplus \text{Out}(3, 2)
\]
\[
L'(3) = \text{Out}(0, 3) \oplus \text{Out}(1, 3) \oplus \text{Out}(2, 3) \oplus \text{Out}(3, 3)
\]

**Figure 2.** Relation of the output of the Linear Predictor \( L'(j) \) to the output of a round of AES, Out(i,j).

**Figure 3.** Notations used.

This completes the detailed design of the linear predictor.