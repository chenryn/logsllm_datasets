### Prompting Alice to Ask Bob for Proof

Alice prompts Bob to prove the original goal. In response, Bob states F. To ensure that the system always terminates, an additional constraint—a request-depth limiter—must be imposed. This limiter increments a counter before each remote request and decrements it after the request completes. The counter value is passed along with the request, allowing the remote prover to use it in subsequent requests. If the counter exceeds a preset value, the prover returns false, thus breaking any possible cycles. Although this modification might prevent the prover from discovering a proof, in practice, the depth of a proof is related to the depth of the policy, which is bounded. Even in this environment, we aim to demonstrate the benefits of distributed proof generation.

**Lemma 1:**
A locally terminating distributed prover operating in an environment where provers use different tactic sets, in conjunction with a request-depth limiter, will terminate on any input.

**Proof Sketch:**
We construct a modified prover, `bc-ask'`, by removing the else statement from Line 15 of `bc-ask`, causing Lines 16–20 to be executed regardless of the outcome of Line 10. If the request depth exceeds the maximum, Line 11 immediately returns failure. If the request depth is below the maximum, we use induction over the recursion depth of `bc-ask'` to show that Lines 11 and 17 terminate, ensuring that `bc-ask'` terminates.

### Ensuring Termination and Proof Discovery

While it is essential for a distributed prover to terminate when operating under multiple tactic sets, our goal is to show that such a prover can prove a larger set of goals than any node operating independently. This is achieved by forcing the distributed prover to attempt to locally prove any goals for which a remote request failed.

**Theorem 2:**
A locally terminating distributed prover operating in an environment where provers use different tactic sets, in conjunction with a request-depth limiter, will prove at least as many goals as it could without making any requests.

**Proof Sketch:**
We define a localized prover (LP) as one that does not interact with other principals and a distributed prover (DP) as described above. We aim to show that if LP can find a proof of a goal G, then DP can also find a proof. Both LP and DP use `bc-ask'`, constructed by removing the else statement from Line 15 of `bc-ask`. From Lemma 1, the call on Line 11 will always terminate, meaning Lines 10–14 will terminate. If Lines 10–14 produce a solution, we are done. If they do not, DP will try to find a solution in the same manner as LP. Using induction, we show that the results of further recursive calls will be identical between the scenarios, ensuring that DP will produce a solution if LP does.

### Empirical Evaluation

To fully understand the performance of lazy proving, we conducted a substantial empirical study. Our proving algorithm was implemented in Prolog, leveraging its built-in backchaining. We augmented the prover to maintain the current network location and extended the definition of certificates so that the prover may only use certificates known to its current location. A request is recorded whenever the prover's location changes. Our techniques are neither specific to Prolog nor to our choice of tactics and can be implemented in other automated theorem proving environments.

#### Constructing a Policy

One of the challenges in evaluating distributed authorization systems is the lack of well-defined policies for testing. To address this, we mapped the physical access-control policy for rooms in our department's building (Figure 3). This policy reflects the hierarchical structure of authorization, which we believe is representative of most organizations. However, it contains elements superfluous in a digital access-control system, such as delegation through physical tokens. In a digital system, delegation is always explicit, and roles are easier to manage. Figure 4 illustrates our derived policy.

Ideally, we would simulate the deployment of our system on a university-wide scale. Given the hierarchical nature of the university's access-control policy, the search for proofs is limited to a small subset of the overall population. Therefore, we restrict our simulation to several such subsets without significantly impacting the accuracy of our results.

We structured the authorization tree from the university to individual users as a complete tree, described by a (j, k, l) tree, where j is the number of department heads, k is the number of floor managers under each department head, and l is the number of users under each floor manager. We tested our algorithms with several different (j, k, l) trees. For simplicity, we used complete trees, but simulations with unbalanced trees showed results differing by less than 4%.

Each policy protecting a room requires the university's approval (e.g., `CMU says action(room15)`). The proof that a user may access the room is based on a chain of certificates leading from CMU to the user, showing which inference rules need to be applied.

**Figure 5: Performance of Initial Access with Different Caching Strategies**

- **Eager: No Cache**
- **Eager: Positive Cache**
- **Eager: Positive & Negative Cache**
- **Lazy: No Cache**
- **Lazy: Positive Cache**
- **Lazy: Positive & Negative Cache**

**Table: Requests and Standard Deviation for Different (j, k, l) Trees**

| (j, k, l) Tree | Eager (No Cache) | Eager (Positive & Negative Cache) | Lazy (No Cache) | Lazy (Positive & Negative Cache) |
|---------------|------------------|----------------------------------|-----------------|---------------------------------|
| (1,1,1)       | 6                | 0                                | 6               | 0                               |
| (2,1,1)       | 9                | 0                                | 9               | 0                               |
| (2,2,2)       | 17               | 0                                | 17              | 0                               |
| (2,2,10)      | 49               | 0                                | 49              | 0                               |
| (2,4,10)      | 93               | 0                                | 93              | 0                               |
| (2,4,30)      | 253              | 0                                | 253             | 0                               |

**Standard Deviation:**

- **Eager (No Cache)**: 37, 90, 226, 706, 1398, 3798
- **Eager (Positive & Negative Cache)**: 0, 53, 132.9, 409.5, 810.5, 2196.1
- **Lazy (No Cache)**: 28, 61, 141, 397, 781, 2061
- **Lazy (Positive & Negative Cache)**: 0, 33, 80.1, 227.4, 450.1, 1189.1

**Conclusion:**
Our empirical evaluation demonstrates the effectiveness of lazy proving in a distributed authorization system, showing that it can handle complex policies and provide efficient proof generation.