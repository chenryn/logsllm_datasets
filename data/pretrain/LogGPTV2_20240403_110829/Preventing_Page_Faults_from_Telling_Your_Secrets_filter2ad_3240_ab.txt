page access proﬁle depending on the input secret key and the plain
text. The adversary adaptively selects the plain text and observes
the page faults to learn the secret key. For example, lets say the
key is 0x1A3E0946 and the adversary choses the plain text to be
0x00000000. Then the resulting XOR is 0x1A3E0946, and the
page access proﬁle will be [P1P2P1P2]. An adversarial OS ob-
serving these page faults knows if the enclave is accessing page P1
or P2. Thus, for each access, this information reduces the OSes
uncertainty from 256 choices to either 28 or 228 choices. In case
of AES, these two portions of the table are accessed 4 times each
in every round for a 128 / 196 / 256-bit key. The OS can adaptively
execute the process for different known plain texts and observe the
access page access proﬁle across multiple runs. This amounts to an
information theoretic leakage of 25 bits in just the ﬁrst of the total
10 / 12 / 14 rounds of AES 6.
Input Dependent Code Page Access. As a second example, con-
sider EdDSA which is an elliptic curve using with twisted Edward
curve and is used in GnuPG and SSL. In EdDSA signing algo-
rithm [11], the main ingredient is a randomly chosen scalar value
r which forms the session key. The value of r is private and if
leaked it can be used to forge a signature for any arbitrary mes-
sage. We show how the adversary can use pigeonhole attacks to
completely leak the private value r. Figure 3 shows a code snippet
and the page layout for the scalar point multiplication routine of
Libgcrypt implementation compiled with gcc v4.8.2. It takes in
an integer scalar (r in this case), a point (G), and sets the result to
the resulting point. The multiplication is implemented by repeated
addition — for each bit in the scalar, the routine checks the value
and decides if it needs to perform an addition or not. The main
routine (ec_mul), the sub-routines for duplication (dup_point)
and testing the bit (test_bit) are located in three different pages
denoted as P1, P2, P3 respectively. Interestingly, the addition sub-
routine (add_points) is located in pages P1 and P2. A page
proﬁle satisfying a regular expression [P1 P2 P1 P3 P1 (P1P2)∗]
implies a bit value 1 and [P1 P2 P1 P3 P1] implies a 0 bit value.
Essentially, the OS can learn the exact value of the random integer
scalar r picked by the process. This amounts to a total leakage of
the secret, and in fact enables the OS to forge signatures on behalf
of the enclave.
We have experimentally conﬁrmed both of the above attacks.
We demonstrate more attacks on cryptographic implementations of
Libgcrypt and OpenSSL in Section 6.1. These attacks may apply
to cloud server platforms [10, 15, 21, 22, 41, 49, 54, 55].
6AES ﬁrst round uses the ﬁrst 128 bits of a 128 / 196 / 256-
bit key.
Initial uncertainty of OS = 2128. With pigeonhole at-
tack, the OS knows for the 64 bits if the index is less than 0x1c.
So, ﬁnal uncertainty = 264 × 288. Information leakage (in bits)
= log2(2128 − (264 × 288)) = 25.54 ~ 25 bits [45].
0x7F..E8CC: mov	Table1[idx],	rax	idx = 1c P1: 0x7F..5000	P2: 0x7F..6000	Table	0	Table	1	ec_mul{…} P1:	0xA7310	ec_mul(r, G): add_points{…} P2:	0xA6CB0	test_bit{…} P3:	0x9EB30	res	=	O	nbits	=	|r|		for	(i	=	nbits-1;	i>=0;	i--):			res	=	dup_point(res)				if	(test_bit(r[i])):					res	=	add_points(res,	G)		return	res	r[i]==1 r[i]==0 3. OVERVIEW
The malicious OS can use pigeonhole attacks to observe input-
dependent memory accesses and learn information about input pro-
gram secrets. We now discuss our approach to prevent this leakage.
3.1 Security Deﬁnitions & Assumptions
Lets represent an enclave program P that computes on inputs I
to produce output O as (P, I) (cid:55)→ O, such that both I and O are
secret and are encrypted in RAM. In case of enclaved execution,
the adversary can observe the sequence of page faults. We term
this knowledge of the adversary as the page access proﬁle. Note
that each observed proﬁle is speciﬁc to an input to the program,
and is deﬁned as:
Deﬁnition (Page Access Proﬁle.) For a given program P and a
−→
V P I is a vector of tuples
single input I, the page access proﬁle
(cid:104)V Pi(cid:105), where V Pi is the virtual page number of the ith page fault
observed by the OS.
To model the security, we compare the execution of a program on
a real enclaved system with its execution on an “ideal” system. The
ideal system is one which has inﬁnite private memory and therefore
the program execution doesn’t raise faults. On the other hand, the
real system has limited memory and the enclave will incur page
faults during its execution. Speciﬁcally, we deﬁne these two models
as follows:
• ∞-memory Enclave Model (M∞−model). The enclaved ex-
ecution of program on a system with an unbounded physical
memory such that the page access proﬁle is ∅.
• Bounded-memory Enclave Model (MB−model). Enclaved
Execution of program such that for any instruction in the pro-
gram, the enclave has the least number of pages required for
executing that instructions 7.
Deﬁnition (Page Access Proﬁle Distinguishability) Given a pro-
gram (P, I) → O, we say P exhibits page access proﬁle dis-
tinguishability if there exists an efﬁcient adversary A such that
∃ I0, I1 ∈ I and b ∈ {0, 1}, for which the advantage:
Adv(A) = |Pr[Exp(
is non-negligible.
−→
V P Ib=0 ) = 1] − Pr[Exp(
−→
V P Ib=1 ) = 1]|
If a probabilistic polynomial time-bounded adversary can dis-
tinguish the execution of the program for two different inputs by
purely observing the page access proﬁle, then the program exhibits
page access proﬁle distinguishability. A safe program exhibits no
leakage via the page fault channels; we deﬁne page-fault oblivious-
ness as a security property of a program as follows:
Deﬁnition (PF-obliviousness) Given a program P w.r.t. inputs I,
the PF-obliviousness states that if there exists an efﬁcient adver-
−→
sary A which can distinguish (
V P I1 ) for ∃ I0, I1 ∈ (cid:126)I in
the MB−model, then there exists an adversary A(cid:48) which can dis-
tinguish I0, I1 in the M∞−model.
−→
V P I0 ,
Our deﬁnition is a relative guarantee — it states that any in-
formation that the adversary learns by observing the execution of
program on a bounded private memory, can always be learned by
observing the execution even on an unbounded memory (for e.g.,
the total runtime of the program). Such information leaked can be
gleaned even without the page fault channel. Our defense does not
7In our case it is at most three pages, which is the maximum num-
ber of pages required to execute any Intel x86 instruction.
provide any absolute guarantees against all possible side- channels.
If there are additional side channels in a PF-oblivious program, they
can be eliminated with orthogonal defenses.
Scope and Assumptions. Our work considers a software-based
adversary running at ring-0; all hardware is assumed to be trusted.
Further, the following challenges are beyond the goals of this work:
• A1. Our attacks and defenses are independent of other side-
channels such as time, power consumption, cache latencies,
and minor execution time differences between two different
memory access instructions that raise no faults. If such a dif-
ference is discernible, then we can show that they provides a
source of advantage even in an execution with no page faults
(∞-model). Application developers can deploy orthogonal
defenses to prevent against these side-channels [53]. Our de-
fenses do not prevent information leakage via untrusted I/O,
system-call, and ﬁlesystem channels [17].
• A2. Once a page has been allocated to the enclave, the OS
can take it away only on a memory fault. We do not consider
the case where the OS removes enclave pages via a timer-
based pre-emption, since the adversary’s clock granularity
is much coarser in this case and likely yields a negligible
advantage.
3.2 Problem & Approach Overview
Problem Statement. Given a program P and set of secret inputs
I, we seek a program transformation T : P (cid:55)→ P (cid:48) such that the
transformed program P (cid:48) satisﬁes PF-obliviousness with respect to
all possible values of I.
Consider a program executing on sensitive input. The execution
path of such a program can be deﬁned by the sequence of true and
false branches taken at the conditional statements encountered dur-
ing the execution. Each set of straight-line instructions executed
and corresponding data accessed between the branching condition
statements can be viewed as an execution block. Let us assume that
each execution block has the same number of memory accesses and
by assumption A1 each memory access takes approximately same
amount of time. Then, all such paths of a program can be repre-
sented using a tree, say the execution tree such that each node in
the tree is an execution block connected by branch edges. For ex-
ample, the function foo() in Figure 4 (a) has 3 execution paths in
the execution tree shown in Figure 4 (b). Each of the paths a, b, c
can be executed by running the program on the inputs (x = 4, y =
2), (x = 8, y = 9) and (x = 6, y = 5) respectively.
Page access proﬁle is inherently input dependent, so anyone who
observes the page access proﬁle can extract bits of information
about the input. However, if the page access proﬁle remains the
same irrespective of the input, then the leakage via page fault chan-
nel will drop to zero [35]. We call this transformation strategy as
determinising the page access proﬁle. We adopt this strategy and
enforce a deterministic page access proﬁle for possible paths in the
program execution. The enclaved execution always sequentially
accesses all the code and data pages that can be used at a particular
memory-bound instruction for each execution. In our example, Fig-
ure 4, we will access both BB3 as well as BB4 irrespective of the
branching condition. Similarly, we also apply it at level 4, so that
the complete program path is BB1, BB2, BB3, BB4, BB5(cid:48), BB6(cid:48),
BB5, BB6 for all inputs. Thus, deterministic execution makes one
real access and several fake accesses to determinise the page access
proﬁle. It is easy to see that under any input the execution exhibits
the same page access proﬁle.
The challenge that remains is: how to execute such fake accesses
while still doing the actual intended computations. We present a
simple mechanism to achieve this. First we use the program’s exe-
1
2
3
4
5
6
7
8
9
10
11
12
13
foo (int x, int y)
{
z = 2 * y
if (z != x)
{
if (z < x + 10)
path_c()
else
path_b()
}
else
path_a()
}
Figure 4: (a) Code snippet for example function foo where x and y are secret. (b) Unbalanced execution tree. (c) Corresponding
balanced execution tree.
cution tree to identify what are all the code and data pages that are
used at each level of the tree for all possible inputs (BB3, BB4
at level 3 in our example). This gives us the set of pages for
replicated-access. Next, we use a multiplexing mechanism to load-
and-execute the correct execution block. To achieve this, we break
each code block execution into a fetch step and an execute step. In
the fetch step, all the execution blocks at the same level in the ex-
ecution tree are fetched from memory sequentially. In the execute
step the multiplexer will select the real block and execute it as-is.
In our example, for (x = 4, y = 2), the multiplexer will fetch all
blocks but execute only BB3 at level 3, and for (x = 8, y = 9) or (x
= 6, y = 5), the multiplexer will execute BB4.
Figure 5: Deterministic Multiplexing for data access. The mul-
tiplexer accesses the correct offset in the staging area.
4. DESIGN
There can be several ways for determinising the page access pro-
ﬁle; selecting the best transformation is an optimization problem.
We discuss one such transformation which can be applied generi-
cally and then present the program-speciﬁc transformations which
incur lower costs (Section 5).
4.1 Setup
It is simple to adapt the standard notion of basic blocks to our
notion of execution blocks. In our example code snippet in Fig-
ure 4 (a), we have 6 such execution blocks BB1 to BB6. In case of
BB1, the code page C will comprise of virtual page address of the
statement z = 2 * y, and data pages D will have virtual page
address of variables z and y.
Note that the execution tree in Figure 4 (b) is unbalanced, i.e.,
the depth of the tree is not constant for all possible paths in the
program. This imbalance in itself leaks information about the in-
put to an adversary even without pigeonhole attacks simply by ob-
serving the function start-to-end time. For example, the ﬁrst path
(path_a) in Figure 4 (b) is of depth 2 and is only taken when value
of z equals value of x. If the adversary can try all possible values
of secret, then the tree depth becomes an oracle to check if the
guess is correct. To capture the information leaked strictly via the
page fault channel, we limit our scope to balanced execution tree.
If the tree is unbalanced, then the input space is partitioned into
sets which are distinguishable in the original program in the ∞-
model. Since we limit our scope to achieving indistinguishability
relative to ∞-model, we safely assume a balanced execution tree
as shown in Figure 4 (c) [38]. Techniques such as loop unrolling,
block size balancing with memory access and NOP padding can be
used to balance the tree depth and block sizes [19]. In our experi-
ence, cryptographic routines which are hardened against timing and
cache side-channels generally exhibit balanced execution trees. For
the set of programs in our study, if necessary, we perform a prepa-
ration step manually to balance the execution tree explicitly.
Even after the execution tree is balanced, the pigeonholing adver-
sary knows the sequence of the execution blocks that were executed
for a given input only by observing page faults. For example, lets
assume that the execution blocks BB5 and BB6 are in two differ-
ent pages P1 and P2 respectively. Then the result of the branching
condition z < x+10 will either cause a page fault for P1 or P2, re-
vealing bit of information about the sensitive input x and y. Given
a balanced execution tree, we design a transformation function to
make the page access proﬁle independent of the input [35].
4.2 Deterministic Multiplexing
We now discuss a concrete design of our transformation namely
deterministic multiplexing and demonstrate how it can be supported
to transform legacy C / C++ applications in the current compiler in-
frastructure.
Basic Multiplexing. In the fetch phase, we copy the code blocks
at the same level of the execution tree to a temporary page — the
code staging area (SAcode). All data that may be used by each of
these sensitive code blocks is copied to a separate temporary page
— the data staging area (SAdata). Then in the execution phase, we
use an access multiplexer which selects the correct code and data
blocks and executes it (by jumping to it). At the end of the sen-
sitive execution, the content from data staging area is then pushed
back to the actual addresses. If the execution changes any data in
the staging area, the new values are updated. The rest of the val-
ues are just copied back unchanged. Note that all these operations
are done in a sequence in the staging area (one code page). Thus
this execution is atomic — no page faults can occur between them.
From an adversarial viewpoint, the execution is performed within
the boundary of single code and single data page. So all that the
adversary can see is the same sequence of page faults for any input.
Thus our multiplexed fetch and execute mechanism ensures that the