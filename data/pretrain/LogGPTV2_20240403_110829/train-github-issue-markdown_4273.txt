There are many instances where one concretely needs a statically linked
executable (e.g. to avoid having to distribute a pile of Rust dynamic
libraries, making deployment much simpler).
The compiler currently offers no way to request that a compiled artefact is
always statically linked against Rust crates (the only option is `-C prefer-
dynamic` which isn't really a guarantee either). Since there's no way to force
these things, working out why the static linking defaulting failed is very
hard, especially with a non-trivial number of dependencies (since the error is
almost certainly one of those dependencies coming only in `.so` format).
If the compiler provided say, `-C statically-linked`, then a user can request
that something is only statically linked and receive errors about exactly what
is stopping this from happening, e.g. `crate syntax can only be found as a
dynamic library`. Without this, the user has to search through all
dependencies to find out what is breaking things.
(Case study: I was working through a problem like this with @emk on IRC. After
much discussion and `ldd` wrangling, we eventually tracked it down to a
library which defines a procedural macro internally along with the rest of the
functionality, i.e. introducing a dependency on libsyntax. It would be much
easier if we can get the compiler to tell us this straight away.)