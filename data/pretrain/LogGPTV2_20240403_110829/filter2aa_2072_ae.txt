National 
Security 
Agency 
If logs are being sent to an external service, a mechanism should be in place for logs to 
be stored locally if a communication loss or external service failure occurs. Once 
communication to the external service is restored, a policy should be in place for the 
locally stored logs to be pushed up to the external server.  
Tools 
Kubernetes does not include extensive auditing capabilities. However, the system is 
built to be extensible, allowing users the freedom to develop their own custom solution 
or to choose an existing add-on that suits their needs. One of the most common 
solutions is to add additional audit backend services, which can use the information 
logged by Kubernetes and perform additional functions for users, such as extended 
search parameters, data mapping features, and alerting functionality. Organizations that 
already use SIEM platforms can integrate Kubernetes with these existing capabilities. 
Open-source monitoring tools—such as the Cloud Native Computing Foundation’s 
Prometheus®, Grafana Labs’ Grafana®, and Elasticsearch’s Elastic Stack (ELK)®—are 
available to conduct event monitoring, run threat analytics, manage alerting, and collect 
resource isolation parameters, historical usage, and network statistics on running 
containers. Scanning tools can be useful when auditing the access control and 
permission configurations by assisting in identifying risky permission configurations in 
RBAC. NSA and CISA encourage organizations utilizing Intrusion Detection Systems 
(IDSs) on their existing environment to consider integrating that service into their 
Kubernetes environment as well. This integration would allow an organization to monitor 
for—and potentially kill containers showing signs of—unusual behavior so the 
containers can be restarted from the initial clean image. Many cloud service providers 
also provide container monitoring services for those wanting more managed and 
scalable solutions. 
▲Return to Contents 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
32 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Upgrading and application security practices 
Following the hardening guidance outlined in this document is a step toward ensuring 
the security of applications running on Kubernetes orchestrated containers. However, 
security is an ongoing process, and it is vital to keep up with patches, updates, and 
upgrades. The specific software components vary depending on the individual 
configuration, but each piece of the overall system should be kept as secure as 
possible. This includes updating: Kubernetes, hypervisors, virtualization software, 
plugins, operating systems on which the environment is running, applications running on 
the servers, and any other software hosted in the Kubernetes environment.  
The Center for Internet Security (CIS) publishes benchmarks for securing software. 
Administrators should adhere to the CIS benchmarks for Kubernetes and any other 
relevant system components. Administrators should check periodically to ensure their 
system's security is compliant with the current security experts’ consensus on best 
practices. Periodic vulnerability scans and penetration tests should be performed on the 
various system components to proactively look for insecure configurations and zero-day 
vulnerabilities. Any discoveries should be promptly remediated before potential cyber 
actors can discover and exploit them.  
As updates are deployed, administrators should also keep up with removing any old 
components that are no longer needed from the environment. Using a managed 
Kubernetes service can help to automate upgrades and patches for Kubernetes, 
operating systems, and networking protocols. However, administrators must still patch 
and upgrade their containerized applications. 
▲Return to Contents 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
33 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Works cited 
[1]  Center for Internet Security, "Kubernetes," 2021. [Online]. Available: 
https://cisecurity.org/resources/?type=benchmark&search=kubernetes. 
[2]  DISA, "Kubernetes STIG," 2021. [Online]. Available: https://dl.dod.cyber.mil.wp-
content/uploads/stigs/zip/U_Kubernetes_V1R1_STIG.zip. [Accessed 8 July 2021] 
[3]  The Linux Foundation, "Kubernetes Documentation," 2021. [Online]. Available: 
https://kubernetes.io/docs/home/. [Accessed 8 July 2021]. 
[4]  The Linux Foundation, "11 Ways (Not) to Get Hacked," 18 07 2018. [Online]. 
Available: https://kubernetes.io/blog/2018/07/18/11-ways-not-to-get-hacked/#10-
scan-images-and-run-ids. [Accessed 8 July 2021]. 
[5]  MITRE, "Unsecured Credentials: Cloud Instance Metadata API." MITRE ATT&CK, 
2021. [Online]. Available: https://attack.mitre.org/techniques/T1552/005/. [Accessed 
8 July 2021]. 
[6]  CISA, "Analysis Report (AR21-013A): Strengthening Security Configurations to 
Defend Against Attackers Targeting Cloud Services." Cybersecurity and 
Infrastructure Security Agency, 14 January 2021. [Online]. Available:https://us-
cert.cisa.gov/ncas/analysis-reports/ar21-013a [Accessed 8 July 2021]. 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
34 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix A: Example Dockerfile for non-root application 
The following example is a Dockerfile that runs an application as a non-root user with 
non-group membership. The lines highlighted in red below are the portion specific to 
using non-root.  
FROM ubuntu:latest 
#Update and install the make utility 
RUN apt update && apt install -y make 
#Copy the source from a folder called “code” and build the application with 
the make utility 
COPY . /code 
RUN make /code 
#Create a new user (user1) and new group (group1); then switch into that 
user’s context 
RUN useradd user1 && groupadd group1 
USER user1:group1 
#Set the default entrypoint for the container 
CMD /code/app 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
35 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix B: Example deployment template for read-only file 
systemfilesystem 
The following is an example Kubernetes deployment template that uses a read-only root 
file system. The lines highlighted in red below are the portion specific to making the 
container’s filesystem read-only. The lines highlighted in blue are the portion showing 
how to create a writeable volume for applications requiring this capability.  
apiVersion: apps/v1 
kind: Deployment 
metadata: 
  labels: 
    app: web 
  name: web 
spec:  
  selector: 
    matchLabels: 
      app: web 
  template: 
    metadata: 
      labels: 
        app: web 
      name: web 
    spec: 
      containers: 
      - command: ["sleep"] 
        args: ["999"] 
        image: ubuntu:latest 
        name: web 
        securityContext: 
          readOnlyRootFilesystem: true 
        volumeMounts: 
          - mountPath: /writeable/location/here 
            name: volName 
      volumes: 
      - emptyDir: {} 
        name: volName 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
36 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix C: Example Pod Security Policy 
The following is an example Kubernetes Pod Security Policy that enforces strong 
security requirements for containers running in the cluster. This example is based on 
official Kubernetes documentation: https://kubernetes.io/docs/concepts/policy/pod-
security-policy/. Administrators are encouraged to tailor the policy to meet their 
organization’s requirements.  
apiVersion: policy/v1beta1 
kind: PodSecurityPolicy 
metadata: 
  name: restricted 
  annotations: 
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 
'docker/default,runtime/default' 
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 
'runtime/default' 
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  
'runtime/default' 
    apparmor.security.beta.kubernetes.io/defaultProfileName:  
'runtime/default' 
spec: 
  privileged: false # Required to prevent escalations to root. 
    allowPrivilegeEscalation: false   
  requiredDropCapabilities: 
    - ALL 
  volumes: 
    - 'configMap' 
    - 'emptyDir' 
    - 'projected' 
    - 'secret' 
    - 'downwardAPI'     
    - 'persistentVolumeClaim' # Assume persistentVolumes set up by admin 
are safe 
  hostNetwork: false 
  hostIPC: false 
  hostPID: false 
  runAsUser: 
    rule: 'MustRunAsNonRoot' # Require the container to run without root  
  seLinux:  
    rule: 'RunAsAny' # This assumes nodes are using AppArmor rather than 
SELinux 
  supplementalGroups: 
    rule: 'MustRunAs' 
    ranges: # Forbid adding the root group.       
      - min: 1 
        max: 65535 
  runAsGroup: 
    rule: 'MustRunAs' 
    ranges: # Forbid adding the root group.       
      - min: 1 
        max: 65535 
  fsGroup: 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
37 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
    rule: 'MustRunAs' 
    ranges: # Forbid adding the root group.       
      - min: 1 
        max: 65535 
  readOnlyRootFilesystem: true 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
38 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix D: Example namespace 
The following example is for each team or group of users, a Kubernetes namespace 
can be created using either a kubectl command or YAML file. Any name with the 
prefix kube- should be avoided as it may conflict with Kubernetes system reserved 
namespaces. 
Kubectl command to create a namespace: 
kubectl create namespace  
To create namespace using YAML file, create a new file called my-namespace.yaml 
with the contents: 
apiVersion: v1 
kind: Namespace 
metadata: 
  name:  
Apply the namespace using: 
kubectl create –f ./my-namespace.yaml 
To create new Pods in an existing namespace, switch to the desired namespace using: 
kubectl config use-context  
Apply new deployment using: 
kubectl apply -f deployment.yaml 
Alternatively, the namespace can be added to the kubectl command using: 
kubectl apply -f deployment.yaml --namespace= 
or specify namespace:  under metadata in the YAML 
declaration. 
Once created, resources cannot be moved between namespaces. The resource must 
be deleted, then created in the new namespace. 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
39 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix E: Example network policy 
Network policies differ depending on the network plugin used. The following is an 
example network policy to limit access to the nginx service to Pods with the label 
access using the Kubernetes documentation: 
https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy/ 
apiVersion: networking.k8s.io/v1 
kind: NetworkPolicy 
metadata: 
 name: example-access-nginx 
 namespace: prod  #this can any namespace or be left out if no 
namespace is used 
spec: 
    podSelector: 
        matchLabels: 
            app: nginx 
    ingress: 
    -from: 
        -podSelector: 
            matchLabels: 
                access: “true” 
The new NetworkPolicy can be applied using: 
kubectl apply -f policy.yaml 
A default deny all ingress policy: 
apiVersion: networking.k8s.io/v1 
kind: NetworkPolicy 
metadata: 
    name: deny-all-ingress 
spec: 
    podSelector: {} 
    policyType: 
    - Ingress 
A default deny all egress policy: 
apiVersion: networking.k8s.io/v1 
kind: NetworkPolicy 
metadata: 
    name: deny-all-egress 
spec: 
    podSelector: {} 
    policyType: 
    - Egress 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
40 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix F: Example LimitRange 
LimitRange support is enabled by default in Kubernetes 1.10 and newer. The following 
YAML file specifies a LimitRange with a default request and limit, as well as a min and 
max request, for each container. 
apiVersion: v1 
kind: LimitRange 
metadata: 
   name: cpu-min-max-demo-lr 
spec: 
   limits  
   -  default: 
         cpu: 1 
      defaultRequest: 
         cpu: 0.5 
      max:    
         cpu: 2 
      min: 
         cpu 0.5  
      type: Container 
A LimitRange can be applied to a namespace with: 
kubectl apply -f .yaml --namespace= 
After this example LimitRange configuration is applied, all containers created in the 
namespace are assigned the default CPU request and limit if not specified. All 
containers in the namespace must have a CPU request greater than or equal to the 
minimum value and less than or equal to the maximum CPU value or the container will 
not be instantiated. 
U/OO/168286-21 | PP-21-1104 | August 2021 Ver. 1.0 
41 
National 
Security 
Agency 
Cybersecurity 
and Infrastructure 
Security Agency 
Kubernetes Hardening Guidance 
National 
Security 
Agency 
Appendix G: Example ResourceQuota 
ResourceQuota objects to limit aggregate resource usage within a namespace are 
created by applying a YAML file to a namespace or specifying requirements in the 
configuration file of Pods. The following example is based on official Kubernetes 
documentation: https://kubernetes.io/docs/tasks/administer-cluster/manage-
resources/quota-memory-cpu-namespace/   