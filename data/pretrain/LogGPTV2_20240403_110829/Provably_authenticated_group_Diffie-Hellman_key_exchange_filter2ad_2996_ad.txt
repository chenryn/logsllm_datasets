### 4. Forward-Secrecy and Proof Complexity

The verification of the authentication value `authUn` is performed by checking if `authUn = H(skUi, n)`. If this condition holds, `Ui` accepts; otherwise, it rejects. However, proving forward-secrecy complicates the proof. Instead, the ideas from Section 6.4 can be extended to show that AKE1 guarantees forward-secrecy.

### 5. Transformation AddMA (Add Mutual Authentication)

The transformation `AddMA` (add mutual authentication) is similar to `AddPPsA`. It involves adding one more round of simultaneous broadcasts where each player `Ui` sends out `H(sk, i)` and checks the received values.

### 7.3 Security Theorem

Let `P` be an AKE protocol with session-key space `SK` and associated LL-key generator `G`. The following security result can be stated for `P' = AddMA(P)`:

**Theorem 2.** Let `A` be an adversary against the security of protocol `P'` within a time bound `t`, after `qse` interactions with the parties and `qh` hash queries. Then we have:
\[
\text{Adv}^{\text{ake}}_{P'}(t, qse, qh) \leq \text{Adv}^{\text{ake}}_{P}(t, qse, qh) + \frac{qh}{2^\kappa}
\]
\[
\text{Succ}^{\text{ma}}_{P'}(t, qse, qh) \leq t + (qse + qh)O(1)
\]
where `t'` is the running time of the adversary in the ideal hash model.

### 7.4 Security Proof

**Proof.** Let `A` be an adversary that can achieve an advantage `Adv^{\text{ake}}_{P'}(t, qse, qh)` in breaking the AKE security of protocol `P'` within time `t` or can succeed with probability `Succ^{\text{ma}}_{P'}(t, qse, qh)` in breaking the MA security of `P'`. We construct from `A` an attacker `B` that gets an advantage `Adv^{\text{ake}}_{P}(t', qse, qh)` in breaking the AKE security of protocol `P` within time `t'`.

#### 7.4.1 Disrupt Partnering

We are not concerned with partnered oracles generating different session keys, as our definition of partnering implies that the oracles have exchanged exactly the same flows. The probability that two instances of a given player come to be partnered is negligible, occurring with probability `O(qse^2 / 2^k)`.

#### 7.4.2 AKE Break

We construct from `A` an adversary `B` that achieves an advantage in breaking the AKE security of `P` within time `t'`. `B` provides coin tosses to `GLL`, `A`, all `Πs_U` and starts running the game `Gameake(A, P')`. `B` answers the queries made by `A` as follows:

- Oracle queries made by `A` to `B` are relayed, and the answers are returned to `A`.
- `B`’s answers to Reveal and Test-queries go through the Hash-oracle, padded with “0” before being returned to `A`.
- Hash-queries are answered as usual (Figure 2).

In the ideal hash model, `A` cannot gain any advantage in correctly guessing the bit involved in the Test-query without having made a query of the form `H(sk, 0)`.

At some point, `A` makes a Test-query to oracle `Πs_U`. If `A` has made a query of the form `H(sk, 0)`, then `Pr[A asks (sk, 0)] ≥ Adv^{\text{ake}}_{P'}(A)`. `B` gets a value `τ` and relays `H(τ, 0)` to `A`. `B` then looks for `τ` in the H-list: `B` outputs 1 if `(τ, 0)` is in the H-list of queries made by `A`, otherwise `B` flips a coin and outputs the coin value.

The advantage of `B` to win `Gameake(B, P)` is the probability that `A` made a query of the form `H(sk, 0)` minus the probability that `A` made such a query by “pure chance”:
\[
\text{Adv}^{\text{ake}}_{P}(B) = \text{Pr}[A \text{ asks } (sk, 0)] - \frac{qh}{2^\kappa}
\]

The running time of `B` is the running time of `A` plus the time to process Send-queries and Hash-queries:
\[
t' \leq t + (qse + qh)O(1)
\]

#### 7.4.3 MA Break

We construct from `A` an adversary `B` that achieves an advantage in breaking the AKE security of `P` within time `t'`. `B` provides coin tosses to `GLL`, `A`, all `Πs_U`, and starts running the game `Gamema(A, P')`. `B` answers the oracle queries made by `A` as follows:

- Oracle queries made by `A` to `B` are relayed, and the answers are returned to `A`.
- `B`’s answers to Reveal and Test-queries go through the Hash-oracle, padded with “0” before being returned to `A`.
- Hash-queries are answered as usual (Figure 2).

In the ideal hash model, `A` cannot gain any advantage in impersonating some oracle `Πsi_i` without having made a query of the form `H(sk, i)`.

At some point, `B` makes a Test-query to oracle `Πs_U`. If `A` has made a query of the form `H(sk, i)`, then `Pr[A asks (sk, i)] ≥ Adv^{\text{ake}}_{P'}(B)`. `B` gets a value `τ` and later `A` terminates. `B` looks for `τ` in the H-list: `B` outputs 1 if `(τ, *)` is in the H-list, otherwise `B` flips a coin and outputs the coin value. `(τ, i)` is in the H-list if `A` violates PPsA for oracle `Πsi_i` except with probability `qh * n * 1/2^\kappa`.

The advantage of `B` to win `Gameake(B, P)` is the probability that `A` makes a query of the form `H(sk, i)`:
\[
\text{Adv}^{\text{ake}}_{P}(B) = \text{Pr}[A \text{ asks } (sk, i)] \geq \text{Adv}^{\text{ake}}_{P'}(B) - n \cdot \frac{qh}{2^\kappa}
\]

The running time of `B` is the running time of `A` plus the time to process Send-queries and Hash-queries:
\[
t' \leq t + (qse + qh)O(1)
\]

### 7.5 Result Analysis

The quality of the reduction measures how much of the AKE security strength of protocol `P` is injected into `P'`. The reduction injects much of the security strength of `P` into `P'`. This is evident because `Adv^{\text{ake}}_{P'}(t, qse, qh)` (or `Succ^{\text{ma}}_{P'}(t, qse, qh)`) is within an additive factor of `Adv^{\text{ake}}_{P}(t, qse, qh)` (or `Adv^{\text{ake}}_{P}(t, qse, qh)`) and this additive factor decreases exponentially with `κ`.

### 8. Conclusion

In this paper, we presented a model for the group Diffie-Hellman key exchange problem derived from the model of Bellare et al. [5]. Specific features of our approach include defining the notion of session IDS as a set of session ID and defining the notion of partnering as a graph of partner ID. We addressed two security goals: authenticated key exchange and mutual authentication. For each, we provided a definition, a protocol, and a security proof in the ideal hash model. This paper provides the first formal treatment of the authenticated group Diffie-Hellman key exchange problem.

The model and definitions introduced in this paper may seem limited at first sight. Our final goal is a model to help manage the complexity of definitions and proofs in a broader scenario where group membership is dynamic. We are currently extending our model to encompass this larger scenario.

### Acknowledgements

The authors thank Deborah Agarwal for many insightful comments on an early draft of this paper and the anonymous referees for their many useful comments.

### 9. References

[1] D. A. Agarwal, O. Chevassut, M. Thompson, and G. Tsudik. An Integrated Solution for Secure Group Communication in Wide-Area Networks. In Proc. of 6th Symposium on Computers and Communications. IEEE Press, July 2001.

[2] G. Ateniese, M. Steiner, and G. Tsudik. New Multiparty Authentication Services and Key Agreement Protocols. Journal of Selected Areas in Communications, 18(4):1–13, IEEE, 2000.

...

[32] W.-G. Tzeng. A Practical and Secure Fault-Tolerant Conference-Key Agreement Protocol. In Proc. of PKC '2000, LNCS. Springer, February 2000.