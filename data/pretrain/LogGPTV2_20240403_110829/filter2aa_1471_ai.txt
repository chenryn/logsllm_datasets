Windows Driver Verifier has an option you can set to assist in finding this
particular type of bug.
Conversely, this also means that when working at IRQL 1 (also called
APC level), preemption is still active and context switching can occur. This
makes IRQL 1 essentially behave as a thread-local IRQL instead of a
processor-local IRQL, since a wait operation or preemption operation at
IRQL 1 will cause the scheduler to save the current IRQL in the thread’s
control block (in the KTHREAD structure, as seen in Chapter 5), and restore
the processor’s IRQL to that of the newly executed thread. This means that a
thread at passive level (IRQL 0) can still preempt a thread running at APC
level (IRQL 1), because below IRQL 2, the scheduler decides which thread
controls the processor.
EXPERIMENT: Viewing the IRQL
You can view a processor’s saved IRQL with the !irql debugger
command. The saved IRQL represents the IRQL at the time just
before the break-in to the debugger, which raises the IRQL to a
static, meaningless value:
Click here to view code image
kd> !irql
Debugger saved IRQL for processor 0x0 -- 0 (LOW_LEVEL)
Note that the IRQL value is saved in two locations. The first,
which represents the current IRQL, is the processor control region
(PCR), whereas its extension, the processor region control block
(PRCB), contains the saved IRQL in the DebuggerSavedIRQL
field. This trick is used because using a remote kernel debugger
will raise the IRQL to HIGH_LEVEL to stop any and all
asynchronous processor operations while the user is debugging the
machine, which would cause the output of !irql to be meaningless.
This “saved” value is thus used to indicate the IRQL right before
the debugger is attached.
Each interrupt level has a specific purpose. For example, the
kernel issues an interprocessor interrupt (IPI) to request that
another processor perform an action, such as dispatching a
particular thread for execution or updating its translation look-aside
buffer (TLB) cache. The system clock generates an interrupt at
regular intervals, and the kernel responds by updating the clock and
measuring thread execution time. The HAL provides interrupt
levels for use by interrupt-driven devices; the exact number varies
with the processor and system configuration. The kernel uses
software interrupts (described later in this chapter) to initiate thread
scheduling and to asynchronously break into a thread’s execution.
Mapping interrupt vectors to IRQLs
On systems without an APIC-based architecture, the mapping between the
GSIV/IRQ and the IRQL had to be strict. To avoid situations where the
interrupt controller might think an interrupt line is of higher priority than
another, when in Windows’s world, the IRQLs reflected an opposite
situation. Thankfully, with APICs, Windows can easily expose the IRQL as
part of the APIC’s TPR, which in turn can be used by the APIC to make
better delivery decisions. Further, on APIC systems, the priority of each
hardware interrupt is not tied to its GSIV/IRQ, but rather to the interrupt
vector: the upper 4 bits of the vector map back to the priority. Since the IDT
can have up to 256 entries, this gives a space of 16 possible priorities (for
example, vector 0x40 would be priority 4), which are the same 16 numbers
that the TPR can hold, which map back to the same 16 IRQLs that Windows
implements!
Therefore, for Windows to determine what IRQL to assign to an interrupt, it
must first determine the appropriate interrupt vector for the interrupt, and
program the IOAPIC to use that vector for the associated hardware GSIV. Or,
conversely, if a specific IRQL is needed for a hardware device, Windows
must choose an interrupt vector that maps back to that priority. These
decisions are performed by the Plug and Play manager working in concert
with a type of device driver called a bus driver, which determines the
presence of devices on its bus (PCI, USB, and so on) and what interrupts can
be assigned to a device. The bus driver reports this information to the Plug
and Play manager, which decides—after taking into account the acceptable
interrupt assignments for all other devices—which interrupt will be assigned
to each device. Then it calls a Plug and Play interrupt arbiter, which maps
interrupts to IRQLs. This arbiter is exposed by the HAL, which also works
with the ACPI bus driver and the PCI bus driver to collectively determine the
appropriate mapping. In most cases, the ultimate vector number is selected in
a round-robin fashion, so there is no computable way to figure it out ahead of
time. However, an experiment later in this section shows how the debugger
can query this information from the interrupt arbiter.
Outside of arbitered interrupt vectors associated with hardware interrupts,
Windows also has a number of predefined interrupt vectors that are always at
the same index in the IDT, which are defined in Table 8-4.
Table 8-4 Predefined interrupt vectors
Vector
Usage
0x1F
APC interrupt
0x2F
DPC interrupt
0x30
Hypervisor interrupt
0x31-0x34
VMBus interrupt(s)
0x35
CMCI interrupt
0xCD
Thermal interrupt
0xCE
IOMMU interrupt
0xCF
DMA interrupt
0xD1
Clock timer interrupt
0xD2
Clock IPI interrupt
0xD3
Clock always on interrupt
0xD7
Reboot Interrupt
0xD8
Stub interrupt
0xD9
Test interrupt
0xDF
Spurious interrupt
0xE1
IPI interrupt
0xE2
LAPIC error interrupt
0xE3
DRS interrupt
0xF0
Watchdog interrupt
0xFB
Hypervisor HPET interrupt
0xFD
Profile interrupt
0xFE
Performance interrupt
You’ll note that the vector number’s priority (recall that this is stored in the
upper 4 bits, or nibble) typically matches the IRQLs shown in the Figure 8-14
—for example, the APC interrupt is 1, the DPC interrupt is 2, while the IPI
interrupt is 14, and the profile interrupt is 15. On this topic, let’s see what the
predefined IRQLs are on a modern Windows system.
Predefined IRQLs
Let’s take a closer look at the use of the predefined IRQLs, starting from the
highest level shown in Figure 8-13:
■    The kernel typically uses high level only when it’s halting the system
in KeBugCheckEx and masking out all interrupts or when a remote
kernel debugger is attached. The profile level shares the same value
on non-x86 systems, which is where the profile timer runs when this
functionality is enabled. The performance interrupt, associated with
such features as Intel Processor Trace (Intel PT) and other hardware
performance monitoring unit (PMU) capabilities, also runs at this
level.
■    Interprocessor interrupt level is used to request another processor to
perform an action, such as updating the processor’s TLB cache or
modifying a control register on all processors. The Deferred Recovery
Service (DRS) level also shares the same value and is used on x64
systems by the Windows Hardware Error Architecture (WHEA) for
performing recovery from certain Machine Check Errors (MCE).
■    Clock level is used for the system’s clock, which the kernel uses to
track the time of day as well as to measure and allot CPU time to
threads.
■    The synchronization IRQL is internally used by the dispatcher and
scheduler code to protect access to global thread scheduling and
wait/synchronization code. It is typically defined as the highest level
right after the device IRQLs.
■    The device IRQLs are used to prioritize device interrupts. (See the
previous section for how hardware interrupt levels are mapped to
IRQLs.)
■    The corrected machine check interrupt level is used to signal the
operating system after a serious but corrected hardware condition or
error that was reported by the CPU or firmware through the Machine
Check Error (MCE) interface.
■    DPC/dispatch-level and APC-level interrupts are software interrupts
that the kernel and device drivers generate. (DPCs and APCs are
explained in more detail later in this chapter.)
■    The lowest IRQL, passive level, isn’t really an interrupt level at all;
it’s the setting at which normal thread execution takes place and all
interrupts can occur.
Interrupt objects
The kernel provides a portable mechanism—a kernel control object called an
interrupt object, or KINTERRUPT—that allows device drivers to register
ISRs for their devices. An interrupt object contains all the information the
kernel needs to associate a device ISR with a particular hardware interrupt,
including the address of the ISR, the polarity and trigger mode of the
interrupt, the IRQL at which the device interrupts, sharing state, the GSIV
and other interrupt controller data, as well as a host of performance statistics.
These interrupt objects are allocated from a common pool of memory, and
when a device driver registers an interrupt (with IoConnectInterrupt or
IoConnectInterruptEx), one is initialized with all the necessary information.
Based on the number of processors eligible to receive the interrupt (which is
indicated by the device driver when specifying the interrupt affinity), a
KINTERRUPT object is allocated for each one—in the typical case, this
means for every processor on the machine. Next, once an interrupt vector has
been selected, an array in the KPRCB (called InterruptObject) of each
eligible processor is updated to point to the allocated KINTERRUPT object
that’s specific to it.
As the KINTERRUPT is allocated, a check is made to validate whether the
chosen interrupt vector is a shareable vector, and if so, whether an existing
KINTERRUPT has already claimed the vector. If yes, the kernel updates the
DispatchAddress field (of the KINTERRUPT data structure) to point to the
function KiChainedDispatch and adds this KINTERRUPT to a linked list
(InterruptListEntry) contained in the first existing KINTERRUPT already
associated with the vector. If this is an exclusive vector, on the other hand,
then KiInterruptDispatch is used instead.
The interrupt object also stores the IRQL associated with the interrupt so
that KiInterruptDispatch or KiChainedDispatch can raise the IRQL to the
correct level before calling the ISR and then lower the IRQL after the ISR
has returned. This two-step process is required because there’s no way to
pass a pointer to the interrupt object (or any other argument for that matter)
on the initial dispatch because the initial dispatch is done by hardware.
When an interrupt occurs, the IDT points to one of 256 copies of the
KiIsrThunk function, each one having a different line of assembly code that
pushes the interrupt vector on the kernel stack (because this is not provided
by the processor) and then calling a shared KiIsrLinkage function, which
does the rest of the processing. Among other things, the function builds an
appropriate trap frame as explained previously, and eventually calls the
dispatch address stored in the KINTERRUPT (one of the two functions
above). It finds the KINTERRUPT by reading the current KPRCB’s
InterruptObject array and using the interrupt vector on the stack as an index,
dereferencing the matching pointer. On the other hand, if a KINTERRUPT is
not present, then this interrupt is treated as an unexpected interrupt. Based on
the value of the registry value BugCheckUnexpectedInterrupts in the
HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Kernel key,
the system might either crash with KeBugCheckEx, or the interrupt is silently
ignored, and execution is restored back to the original control point.
On x64 Windows systems, the kernel optimizes interrupt dispatch by using
specific routines that save processor cycles by omitting functionality that
isn’t needed, such as KiInterruptDispatchNoLock, which is used for
interrupts that do not have an associated kernel-managed spinlock (typically
used by drivers that want to synchronize with their ISRs),
KiInterruptDispatchNoLockNoEtw for interrupts that do not want ETW
performance tracing, and KiSpuriousDispatchNoEOI for interrupts that are
not required to send an end-of-interrupt signal since they are spurious.
Finally, KiInterruptDispatchNoEOI, which is used for interrupts that have
programmed the APIC in Auto-End-of-Interrupt (Auto-EOI) mode—because
the interrupt controller will send the EOI signal automatically, the kernel
does not need the extra code to perform the EOI itself. For example, many
HAL interrupt routines take advantage of the “no-lock” dispatch code
because the HAL does not require the kernel to synchronize with its ISR.
Another kernel interrupt handler is KiFloatingDispatch, which is used for
interrupts that require saving the floating-point state. Unlike kernel-mode
code, which typically is not allowed to use floating-point (MMX, SSE,
3DNow!) operations because these registers won’t be saved across context
switches, ISRs might need to use these registers (such as the video card ISR
performing a quick drawing operation). When connecting an interrupt,
drivers can set the FloatingSave argument to TRUE, requesting that the
kernel use the floating-point dispatch routine, which will save the floating
registers. (However, this greatly increases interrupt latency.) Note that this is
supported only on 32-bit systems.
Regardless of which dispatch routine is used, ultimately a call to the
ServiceRoutine field in the KINTERRUPT will be made, which is where the
driver’s ISR is stored. Alternatively, for message signaled interrupts (MSI),
which are explained later, this is a pointer to KiInterruptMessageDispatch,
which will then call the MessageServiceRoutine pointer in KINTERRUPT
instead. Note that in some cases, such as when dealing with Kernel Mode
Driver Framework (KMDF) drivers, or certain miniport drivers such as those
based on NDIS or StorPort (more on driver frameworks is explained in
Chapter 6 of Part 1, “I/O system”), these routines might be specific to the
framework and/or port driver, which will do further processing before calling
the final underlying driver.
Figure 8-15 shows typical interrupt control flow for interrupts associated
with interrupt objects.
Figure 8-15 Typical interrupt control flow.
Associating an ISR with a particular level of interrupt is called connecting
an interrupt object, and dissociating an ISR from an IDT entry is called
disconnecting an interrupt object. These operations, accomplished by calling
the kernel functions IoConnectInterruptEx and IoDisconnectInterruptEx,
allow a device driver to “turn on” an ISR when the driver is loaded into the
system and to “turn off” the ISR if the driver is unloaded.
As was shown earlier, using the interrupt object to register an ISR prevents
device drivers from fiddling directly with interrupt hardware (which differs
among processor architectures) and from needing to know any details about
the IDT. This kernel feature aids in creating portable device drivers because
it eliminates the need to code in assembly language or to reflect processor
differences in device drivers. Interrupt objects provide other benefits as well.
By using the interrupt object, the kernel can synchronize the execution of the
ISR with other parts of a device driver that might share data with the ISR.
(See Chapter 6 in Part 1 for more information about how device drivers
respond to interrupts.)
We also described the concept of a chained dispatch, which allows the
kernel to easily call more than one ISR for any interrupt level. If multiple
device drivers create interrupt objects and connect them to the same IDT
entry, the KiChainedDispatch routine calls each ISR when an interrupt
occurs at the specified interrupt line. This capability allows the kernel to
easily support daisy-chain configurations, in which several devices share the
same interrupt line. The chain breaks when one of the ISRs claims ownership
for the interrupt by returning a status to the interrupt dispatcher.
If multiple devices sharing the same interrupt require service at the same
time, devices not acknowledged by their ISRs will interrupt the system again
once the interrupt dispatcher has lowered the IRQL. Chaining is permitted
only if all the device drivers wanting to use the same interrupt indicate to the
kernel that they can share the interrupt (indicated by the ShareVector field in
the KINTERRUPT object); if they can’t, the Plug and Play manager
reorganizes their interrupt assignments to ensure that it honors the sharing
requirements of each.
EXPERIMENT: Examining interrupt internals
Using the kernel debugger, you can view details of an interrupt
object, including its IRQL, ISR address, and custom interrupt-
dispatching code. First, execute the !idt debugger command and
check whether you can locate an entry that includes a reference to
I8042KeyboardInterruptService, the ISR routine for the PS2
keyboard device. Alternatively, you can look for entries pointing to
Stornvme.sys or Scsiport.sys or any other third-party driver you
recognize. In a Hyper-V virtual machine, you may simply want to
use the Acpi.sys entry. Here’s a system with a PS2 keyboard device
entry:
Click here to view code image
70:    fffff8045675a600 
i8042prt!I8042KeyboardInterruptService (KINTERRUPT 
ffff8e01cbe3b280)
To view the contents of the interrupt object associated with the
interrupt, you can simply click on the link that the debugger offers,
which uses the dt command, or you can manually use the dx
command as well. Here’s the KINTERRUPT from the machine
used in the experiment:
Click here to view code image
6: kd> dt nt!_KINTERRUPT ffff8e01cbe3b280
   +0x000 Type             : 0n22
   +0x002 Size             : 0n256
   +0x008 InterruptListEntry : _LIST_ENTRY [ 
0x00000000`00000000 - 0x00000000`00000000 ]
   +0x018 ServiceRoutine   : 0xfffff804`65e56820
                             unsigned char 
i8042prt!I8042KeyboardInterruptService
   +0x020 MessageServiceRoutine : (null)
   +0x028 MessageIndex     : 0
   +0x030 ServiceContext   : 0xffffe50f`9dfe9040 Void
   +0x038 SpinLock         : 0
   +0x040 TickCount        : 0
   +0x048 ActualLock       : 0xffffe50f`9dfe91a0  -> 0
   +0x050 DispatchAddress  : 0xfffff804`565ca320   void  
nt!KiInterruptDispatch+0
   +0x058 Vector           : 0x70
   +0x05c Irql             : 0x7 ''
   +0x05d SynchronizeIrql  : 0x7 ''
   +0x05e FloatingSave     : 0 ''
   +0x05f Connected        : 0x1 ''
   +0x060 Number           : 6
   +0x064 ShareVector      : 0 ''
   +0x065 EmulateActiveBoth : 0 ''
   +0x066 ActiveCount      : 0
   +0x068 InternalState    : 0n4
   +0x06c Mode             : 1 ( Latched )
   +0x070 Polarity         : 0 ( InterruptPolarityUnknown )
   +0x074 ServiceCount     : 0
   +0x078 DispatchCount    : 0
   +0x080 PassiveEvent     : (null)
   +0x088 TrapFrame        : (null)
   +0x090 DisconnectData   : (null)
   +0x098 ServiceThread    : (null)
   +0x0a0 ConnectionData   : 0xffffe50f`9db3bd90 
_INTERRUPT_CONNECTION_DATA
   +0x0a8 IntTrackEntry    : 0xffffe50f`9d091d90 Void
   +0x0b0 IsrDpcStats      : _ISRDPCSTATS
   +0x0f0 RedirectObject   : (null)
   +0x0f8 Padding          : [8]  ""
In this example, the IRQL that Windows assigned to the
interrupt is 7, which matches the fact that the interrupt vector is
0x70 (and hence the upper 4 bits are 7). Furthermore, you can see
from the DispatchAddress field that this is a regular
KiInterruptDispatch-style interrupt with no additional
optimizations or sharing.
If you wanted to see which GSIV (IRQ) was associated with the
interrupt, there are two ways in which you can obtain this data.
First, recent versions of Windows now store this data as an
INTERRUPT_CONNECTION_DATA structure embedded in the
ConnectionData field of the KINTERRUPT, as shown in the
preceding output. You can use the dt command to dump the pointer
from your system as follows:
Click here to view code image
6: kd> dt 0xffffe50f`9db3bd90 _INTERRUPT_CONNECTION_DATA 
Vectors[0]..
nt!_INTERRUPT_CONNECTION_DATA
   +0x008 Vectors      : [0]
      +0x000 Type         : 0 ( InterruptTypeControllerInput 