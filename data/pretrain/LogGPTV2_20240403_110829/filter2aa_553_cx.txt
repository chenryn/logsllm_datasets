都被设置为0。
静态、内部链接——在所有函数外部且使用了 static 存储类别说明符声
明的变量属于“静态、内部链接”存储类别，具有静态存储期、文件作用域、
内部链接。只能在编译器被初始化一次。如果未显式初始化，它的字节都被
设置为0。
动态分配的内存由 malloc()（或相关）函数分配，该函数返回一个指向
指定字节数内存块的指针。这块内存被free()函数释放后便可重复使用，
free()函数以该内存块的地址作为参数。
类型限定符const、volatile、restrict和_Atomic。const限定符限定数据在
程序运行时不能改变。对指针使用const时，可限定指针本身不能改变或指
针指向的数据不能改变，这取决于const在指针声明中的位置。volatile 限定
符表明，限定的数据除了被当前程序修改外还可以被其他进程修改。该限定
符的目的是警告编译器不要进行假定的优化。restrict限定符也是为了方便编
译器设置优化方案。restrict限定的指针是访问它所指向数据的唯一途径。
936
12.8 复习题
复习题的参考答案在附录A中。
1.哪些类别的变量可以成为它所在函数的局部变量？
2.哪些类别的变量在它所在程序的运行期一直存在？
3.哪些类别的变量可以被多个文件使用？哪些类别的变量仅限于在一个
文件中使用？
4.块作用域变量具有什么链接属性？
5.extern关键字有什么用途？
6.考虑下面两行代码，就输出的结果而言有何异同：
int * p1 = (int *)malloc(100 * sizeof(int));
int * p1 = (int *)calloc(100, sizeof(int));
7.下面的变量对哪些函数可见？程序是否有误？
/* 文件 1 */
int daisy;
int main(void)
{
int lily;
...;
}
937
int petal()
{
extern int daisy, lily;
...;
}
/* 文件 2 */
extern int daisy;
static int lily;
int rose;
int stem()
{
int rose;
...;
}
void root()
{
...;
}
8.下面程序会打印什么？
938
#include 
char color = 'B';
void first(void);
void second(void);
int main(void)
{
extern char color;
printf("color in main() is %c\n", color);
first();
printf("color in main() is %c\n", color);
second();
printf("color in main() is %c\n", color);
return 0;
}
void first(void)
{
char color;
color = 'R';
printf("color in first() is %c\n", color);
939
}
void second(void)
{
color = 'G';
printf("color in second() is %c\n", color);
}
9.假设文件的开始处有如下声明：
static int plink;
int value_ct(const int arr[], int value, int n);
a.以上声明表明了程序员的什么意图？
b.用const int value和const int n分别替换int value和int n，是否对主调程序
的值加强保护。
940
12.9 编程练习
1.不使用全局变量，重写程序清单12.4。
2.在美国，通常以英里/加仑来计算油耗；在欧洲，以升/100 
公里来计
算。下面是程序的一部分，提示用户选择计算模式（美制或公制），然后接
收数据并计算油耗。
// pe12-2b.c
// 与 pe12-2a.c 一起编译
#include 
#include "pe12-2a.h"
int main(void)
{
int mode;
printf("Enter 0 for metric mode, 1 for US mode: ");
scanf("%d", &mode);
while (mode >= 0)
{
set_mode(mode);
get_info();
show_info();
941
printf("Enter 0 for metric mode, 1 for US mode");
printf(" (-1 to quit): ");
scanf("%d", &mode);
}
printf("Done.\n");
return 0;
}
下面是是一些输出示例：
Enter 0 for metric mode, 1 for US mode: 0
Enter distance traveled in kilometers: 600
Enter fuel consumed in liters: 78.8
Fuel consumption is 13.13 liters per 100 km.
Enter 0 for metric mode, 1 for US mode (-1 to quit): 1
Enter distance traveled in miles: 434
Enter fuel consumed in gallons: 12.7
Fuel consumption is 34.2 miles per gallon.
Enter 0 for metric mode, 1 for US mode (-1 to quit): 3
Invalid mode specified. Mode 1(US) used.
Enter distance traveled in miles: 388
942
Enter fuel consumed in gallons: 15.3
Fuel consumption is 25.4 miles per gallon.
Enter 0 for metric mode, 1 for US mode (-1 to quit): -1
Done.
如果用户输入了不正确的模式，程序向用户给出提示消息并使用上一次
输入的正确模式。请提供pe12-2a.h头文件和pe12-2a.c源文件。源代码文件应
定义3个具有文件作用域、内部链接的变量。一个表示模式、一个表示距
离、一个表示消耗的燃料。get_info()函数根据用户输入的模式提示用户输入
相应数据，并将其储存到文件作用域变量中。show_info()函数根据设置的模
式计算并显示油耗。可以假设用户输入的都是数值数据。
3.重新设计编程练习2，要求只使用自动变量。该程序提供的用户界面
不变，即提示用户输入模式等。但是，函数调用要作相应变化。
4.在一个循环中编写并测试一个函数，该函数返回它被调用的次数。
5.编写一个程序，生成100个1～10范围内的随机数，并以降序排列（可
以把第11章的排序算法稍加改动，便可用于整数排序，这里仅对整数排
序）。
6.编写一个程序，生成1000个1～10范围内的随机数。不用保存或打印
这些数字，仅打印每个数出现的次数。用 10 个不同的种子值运行，生成的
数字出现的次数是否相同？可以使用本章自定义的函数或ANSI C的rand()和
srand()函数，它们的格式相同。这是一个测试特定随机数生成器随机性的方
法。
7.编写一个程序，按照程序清单12.13输出示例后面讨论的内容，修改该
程序。使其输出类似：
Enter the number of sets; enter q to stop : 18
943
How many sides and how many dice? 6 3
Here are 18 sets of 3 6-sided throws.
12 10 6 9 8 14 8 15 9 14 12 17 11 7 10
13 8 14
How many sets? Enter q to stop: q
8.下面是程序的一部分：
// pe12-8.c
#include 
int * make_array(int elem, int val);
void show_array(const int ar [], int n);
int main(void)
{
int * pa;
int size;
int value;
printf("Enter the number of elements: ");
while (scanf("%d", &size) == 1 && size > 0)
{
printf("Enter the initialization value: ");
944
scanf("%d", &value);
pa = make_array(size, value);
if (pa)
{
show_array(pa, size);
free(pa);
}
printf("Enter the number of elements ( bklist
用户的输入被重定向到 bklist 中。这样做不仅会把不符合要求的文本写
入 bklist，而且用户也看不到要回答什么问题。
C提供了更强大的文件通信方法，可以在程序中打开文件，然后使用特
殊的I/O函数读取文件中的信息或把信息写入文件。在研究这些方法之前，
先简要介绍一下文件的性质。
13.1.1 文件是什么
文件（file）通常是在磁盘或固态硬盘上的一段已命名的存储区。对我
们而言，stdio.h就是一个文件的名称，该文件中包含一些有用的信息。然
而，对操作系统而言，文件更复杂一些。例如，大型文件会被分开储存，或
者包含一些额外的数据，方便操作系统确定文件的种类。然而，这都是操作
系统所关心的，程序员关心的是C程序如何处理文件（除非你正在编写操作
系统）。
C把文件看作是一系列连续的字节，每个字节都能被单独读取。这与
UNIX环境中（C的发源地）的文件结构相对应。由于其他环境中可能无法完
全对应这个模型，C提供两种文件模式：文本模式和二进制模式。
13.1.2 文本模式和二进制模式
首先，要区分文本内容和二进制内容、文本文件格式和二进制文件格
式，以及文件的文本模式和二进制模式。
948
所有文件的内容都以二进制形式（0或1）储存。但是，如果文件最初使
用二进制编码的字符（例如， ASCII或Unicode）表示文本（就像C字符串那