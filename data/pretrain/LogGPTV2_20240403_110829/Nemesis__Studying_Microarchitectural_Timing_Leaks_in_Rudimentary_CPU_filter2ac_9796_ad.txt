7Intel SGX always uses a write-back caching policy for enclave memory [34]. This
means that a write hit on enclave memory initially only updates the cache, unblocking
the processor immediately, while writing to main memory is postponed until eviction
of the dirty cache line. When the data was not yet in the cache (i.e., write miss),
wait for completion of the memory transaction before finishing the
instruction. It appears that in this particular experimental setup, the
processor’s cache replacement policy rather frequently evicts the
data accessed by the benchmark enclave. To support this hypothe-
sis, we examined IRQ latency behavior for the x86 movnti store
operation with a non-temporal hint that forces the CPU to write
the data directly into memory, without updating or fetching the
corresponding cache line. movnti clearly manifests an increased
latency that overlaps with the right peak of the store distribution.
To investigate the impact of data cache misses on enclaved load
operations, we instrumented the instruction slide in our bench-
mark enclave to explicitly invalidate the corresponding cache line
by executing clflush before each mov instruction. Our noiseless
single-stepping techniques allows to afterwards filter out latency
measurements for the interleaved clflush instructions, such that
the resulting IRQ latency distributions are solely characterized by
the execution times of the mov instruction under consideration.
Figure 6c shows a prominently increased latency for intra-enclave
memory load operations that miss the data cache hierarchy. We
suspect that the sparser distribution for load cache misses is caused
by noise from the DRAM controller.
These experiments thus provide clear evidence for the fact that
IRQ latency reveals cache misses. This finding may be particularly
relevant for state-of-the-art fortified PMA designs like Sanctum [14]
that include all known architectural countermeasures to prevent
adversaries from gaining insight into enclave caching behavior.
Influence of Address Translation. SGX was explicitly designed
to traverse untrusted page tables during enclaved execution, and
verifies address translation metadata via an independent additional
protection mechanism. Recent research on address translation side-
channel attacks [27, 75], however, exploits the microarchitectural
property that x86 page table entries are cached as with normal data.
By spying on unprotected cache lines, adversaries can gain insight
into enclaved memory page accesses.
Our last set of microbenchmark experiments explores the impact
of untrusted address translation data cache misses on the latency of
the interrupted instruction. We used clflush before resuming the
benchmark enclave to invalidate the cache line for the unprotected
PTE entry that stores the physical address of the code page contain-
ing the microbenchmark instruction slide. Figure 6d demonstrates
that we can distinctly increase the latency of even ordinary nop in-
structions in this way. Furthermore, for instructions with a memory
operand, kernel-level adversaries can choose to flush the PTE entry
for the data operand, and/or the enclaved code page to be executed.
Figure 6d indeed shows a clear increase in IRQ latency for mov
instructions that need an additional memory access to retrieve the
physical address of the private data operand. Likewise, latency even
further increases when also flushing the PTE entry of the enclaved
code page containing the load instruction.
We conclude that IRQ latency reveals data cache misses in the
page table walk at instruction-level granularity. While SGX page
tables reside in unprotected memory, this finding may once more
impact fortified PMA designs [14, 17] that move page tables inside
however, any dirty line about to be replaced has to be written back, and the new line
has to be fetched from main memory.
Figure 7: IRQ latency distributions for 100 runs of Zigzagger
branch taken (blue) vs. not-taken (red) execution paths.
enclave memory, out of reach of the attacker, to protect against
address translation side-channel attacks.
5.3 SGX Macrobenchmark Attack Scenarios
To demonstrate information leakage in larger enclave programs,
we extracted full IRQ latency traces from the SGX case study ap-
plications introduced in Section 3.2. In contrast to the isolated mi-
crobenchmark experiments described above, our macrobenchmark
results illustrate interrupt latency behavior in typical, compiler-
generated mixed instruction streams.
Defeating Zigzagger. Since the Zigzagger compiler pass was not
made publicly available, we copied the exemplary assembly code
(Fig. 4) from the corresponding paper [42] in an SGX enclave. As
explained in Section 3.2.1, we made sure to manually align secret-
dependent code to fit entirely within one 64-byte cache line. Figure 7
shows the IRQ latency distributions extracted by our framework
for 100 repeated runs of a victim enclave that either takes the first
Zigzagger-obfuscated branch (a=1; blue) or not (a=0; red). The left-
most box plots visualize IRQ latency measurements for the indirect
branch instruction zz4 at the end of the Zigzagger trampoline,
whereas the following grouped box plots represent instruction
latencies in the the conditional control flow path from either b1
(blue) or b2 (red) to the next secret-dependent jump at zz4. Note
that both execution paths in the assembly code snippet of Fig. 4
already merge at b2.j, such that IRQ latency traces extracted from
Zigzagger-hardened code only feature an extremely short secret-
dependent sequence of 4 instructions, marked in Fig. 7.
A first important observation, in line with the microbenchmark
results above, is that IRQ latency measurements are normally dis-
tributed such that we need to perform multiple observations before
making decisive conclusions on the timing characteristics of the
instruction under consideration. In this respect, the first two instruc-
tions in the secret-dependent execution paths exhibit similar and
fairly indistinguishable IRQ latency distributions, which is indeed
to be expected given that nop and lea instructions behave identi-
cal (micro-op count, latencies) at the microarchitectural level [22]
The third secret-dependent instruction, either jmp (blue) or cmp
(red), however, manifests a sharply visible (median) IRQ latency
difference that can be exploited to unambiguously distinguish both
Figure 8: IRQ latency distributions for 100 runs of bsearch
left (blue) vs. right (green) vs. equal (red) execution paths.
branches. Specifically, by relying on the noiseless single-stepping
technique from Section 4.2, adversaries can collect IRQ latencies
from repeated enclaved executions, and afterwards categorize the
samples for the third secret-dependent instruction as either a jmp or
cmp. To compensate for outliers, we use the median IRQ latency in-
stead of the mean. Note that Fig. 7 was generated from 100 repeated
enclave invocations to yield a representative overall plot, but we
found that in practice secret-dependent Zigzagger branches can
already be reliably identified after as little as 10 enclave invocations.
Finally, also note that there exists a subtle yet potentially exploitable
IRQ latency distribution difference for the last secret-dependent
instruction jmp (blue) vs. register cmov (red).
Inferring Binary Search Indices. To evaluate our binary search
attack, we constructed an enclave that calls the Intel SGX SDK
bsearch trusted library function to look up a value in a fixed integer
array. We carefully selected the exemplary lookup value to ensure
that bsearch first looks left, then right, and finally returns the
requested address. Our practical exploit faults on the code page
containing the bsearch function to enter single-stepping mode
and then starts collecting IRQ latency measurements. Figure 9 plots
the median IRQ latencies obtained from 100 enclaved bsearch
executions, where each individual data point reveals the execution
time of the corresponding assembly instruction in Appendix C. We
annotated the trace to mark the three consecutive execution paths
(left, right, equal) after comparing the value for that loop iteration.
As with the Zigzagger benchmark, Fig. 8 furthermore compares
relative IRQ latency distributions by means of box plots for each
assembly instruction in the secret-dependent execution paths.
As a first important result, one can easily identify the relatively
high-latency peaks from the 6 subsequent pop stack accessing in-
structions in the return path of the equal case (red; instructions
4-10 in Fig. 8). Furthermore, while distinguishing the left (blue) and
right (green) cases is more subtle, the source code in Listing 2 indi-
cates that the right case has to perform slightly more work before
continuing to the next loop iteration. This is indeed reflected at the
assembly code level by two more low-latency register instructions
(sub and lea) before the right branch continues along the common
execution path. Again, we found this extremely subtle difference to
be sufficient to distinguish both branches via the relative position
Figure 9: Median IRQ latencies over 100 bsearch invocations.
of a higher-latency mov instruction at the start of the for loop. It
is apparent from Fig. 9 that the IRQ latency patterns for the right
branch are slightly shifted with respect to those of the left one.
Particularly, the first high-latency peak in the left branch occurs 4
interrupts (instruction 6 in Fig. 8) after cmp, whereas for the right
branch this peak only occurs after 6 interrupts (instruction 8 in
Fig. 8). As with the Zigzagger benchmark, comparing median IRQ
latency samples for specific instructions (identified by their single-
stepping interrupt number) thus suffices to reliably infer control
flow decisions in the binary search algorithm and establish the
secret lookup key.
6 DISCUSSION AND MITIGATIONS
Interrupt Timing Leaks. While generally well-understood at the
architectural level, asynchronous CPU events like faults and in-
terrupts have not been studied extensively at the microarchitec-
tural level. Recent developments on Meltdown-type “fault latency”
attacks [44, 71] exposed fundamental flaws in the way modern
out-of-order processors enforce software isolation, whereas Neme-
sis reveals a more intrinsic and subtle timing side-channel in the
CPU’s interrupt mechanism. We showed that the act of interrupting
enclaved execution leaks microarchitectural timing information
at an instruction-level granularity, even on the most rudimentary
of microcontrollers. In this, we have presented the first remotely
exploitable controlled-channel for embedded enclave processors,
and we contribute to the understanding of SGX side-channel infor-
mation leakage beyond the usual suspects.
IRQ latency traces (e.g., Fig. 9) can be regarded as an instruction-
granular “x-ray” for enclaved execution. Our microbenchmark SGX
experiments show that interrupt latency directly reveals certain
high-latency enclaved operations, and can furthermore reliably
quantify other microarchitectural properties that affect execution
time on modern x86 processors [23], e.g., data-dependent instruc-
tion latencies, and data or page table cache misses. In this respect,
we expect that Nemesis’s ability to extract fine-grained microar-
chitectural instruction timings from SGX enclaves will enable new
and improved side-channels such as MemJam-type [50] false de-
pendency attacks. As a particularly relevant finding for fortified
PMAs like Sanctum [14] that aim to eradicate known cache timing
attacks, we identified what might well be one of the last remaining
side-channels that provide insight into enclave caching behavior.
Specifically, since we have shown that interrupt latency reveals
cache misses, we can see IRQ latency traces being leveraged in a
trace-driven cache attack [1] for instance to reduce the key space
of cryptographic algorithms.
We have demonstrated that interrupt latency timing attacks pose
a direct and serious threat to the protection model pursued by em-
bedded PMAs such as Sancus, though further research is needed
to investigate the bandwidth of practical Nemesis side-channel
attacks on SGX platforms. A particularly promising future work
avenue in this respect would be to supersede reverse engineer-
ing and statistical analysis efforts by applying automated machine
learning techniques on IRQ latency traces extracted from multiple
invocations of the victim enclave.
Why Constant-Time IRQ Defenses are Insufficient. We have shown
how interrupt-capable adversaries can dissolve black box-style start-
to-end protected execution times into (a sequence of) execution
timing measurements for individual enclaved instructions. This pa-
per has focussed on exploring “interrupt latency timing” channels
on multi-cycle instruction set processors, but we want to stress that
attack surface from secure interrupts is not limited to timing side-
channels only. Another potentially dangerous “interrupt counting”
channel for instance would measure the total number of times the
enclaved execution can be interrupted before it finally completes.
For example, in the balanced BSL password comparison scenario of
Listing 1, adversaries can interrupt the if branch twice (2 instruc-
tions), whereas the else branch featuring nop compensation code
can be interrupted four times (4 instructions). As such, while the
total enclaved execution time remains constant, interrupt-capable
single-stepping adversaries will still notice a decrease in the total
IRQ count for each correct password byte.
The above interrupt counting channel seems particularly inter-
esting, for it only assumes a multi-cycle instruction set architecture,
and thus continues to persist on processors with constant-time
IRQ latency. We for instance considered a hardware patch for San-
cus that always enforces the worst-case interrupt response time
by inserting dummy execution cycles depending on the enclaved
instruction being interrupted. Alternatively, ARM Cortex M0 pro-
cessors [5] abandon multi-cycle instructions to handle any pending
interrupt immediately. While such processors are immune to the
IRQ latency timing attacks described in this paper, they remain
vulnerable to interrupt counting attacks and may additionally be
exposed to advanced Nemesis-type interrupt timing attack variants.
We conclude that constant-time interrupt logic is a necessary but
not sufficient condition to eradicate Nemesis-style interrupt attacks
at the hardware level. In general processor-level solutions alone
seem not to be able to completely prevent information leakage from
secure interrupts in enclaved execution. This finding may have a
consequential impact for fully abstract compilation schemes [59]
and provably side-channel resistant processor designs [20, 21] that
have so far not considered secure interrupt timing channels. We en-
courage further research and formal analysis to adequately address
interrupt-based side-channels via hardware-software co-design.
Application Hardening. Considering that our attacks exploit secret-
dependent control flow, an application-level solution should strive
to eliminate conditional program branches and variable latency in-
structions completely. This can be realized by rewriting the enclave
code manually (e.g., xor-based password comparison of Section 5.1),
or by automated if-conversion in a compiler backend [12]. Such
solutions remain compatible with existing PMA hardware, but also
assume that sensitive information can be easily identified. Previous
research [8, 79] in this area has shown that sensitive application
data may be more ill-defined than the typical cryptographic keys
of side-channel analysis. Moreover, if-conversion comes with a sig-
nificant performance overhead [12] that somewhat invalidates the
PMA promise of native code execution in a protected environment.
Alternatively, compilers could focus on detecting, rather than
eliminating, IRQ timing attacks. Our interrupt extensions for San-
cus indeed follow PMA designs [7, 14, 41] that explicitly call into
an enclave to request resumption of internal execution. As such,
Sancus enclaves are interrupt-aware and they could use excessive
interrupt rates as an indicator to trigger some security policy that
terminates the module and/or destroys secrets. Interrupts also oc-
cur in benign conditions, however, and a single interrupt already
suffices to leak confidential information, as evident from our Sancus
attack scenarios. Adversaries could thus adapt their attacks to the
entry policy of a victim enclave.
Intel SGX on the other hand leaves enclave programs explicitly
interrupt-unaware through the use of a dedicated eresume hardware
instruction. However, a contemporary line of research [10, 28, 63]
leverages hardware support for Transactional Synchronization eX-
tensions (TSX) in recent x86 processors to detect interrupts or page
faults in enclave mode. More specifically, these proposals rely on
the property that code executing in a TSX transaction is aborted
and automatically rolled back when an external interrupt request
arrives. TSX furthermore modifies the stored in-enclave instruction
pointer upon AEX, such that a preregistered transaction abort han-
dler is called on the next eresume invocation. Whereas TSX-based
defenses would likely recognize suspicious interrupt rates when
single-stepping enclaved execution, advanced Nemesis adversaries
could construct stealthy Sancus-like IRQ timing attacks that only
interrupt the victim enclave minimally and stay under under the
radar of the transaction abort handler’s probabilistic security policy.
Moreover, TSX-based defenses also suffer from some important lim-
itations [67, 74], ranging from the absence of TSX features in some
processors to severe runtime performance impact and the false pos-
itive/negative rates inherent to heuristic defenses. In conclusion,
we do not regard current ad-hoc TSX approaches as a solution,
even apart from compatibility and performance issues, since they
cannot prevent the root information leakage cause. Our attacks
against Sancus show that a single interrupt can deterministically
leak sensitive information, and we expect further development of
the attacks against SGX to increase stealthiness, as has been shown
for instance for page-table based attacks [75, 77].
7 RELATED WORK
We have discussed PMAs security architectures throughout the
paper. In this section we focus on relating our work to existing
side-channel analysis research. There exists a vast body of work on
microarchitectural timing channels [23], but side-channel attacks
in a PMA context are only being explored very recently. To the
best of our knowledge, we have presented the first remotely ex-
ploitable controlled-channel for low-end embedded PMAs. Various
authors [13, 20, 43] have explicitly expressed their concerns on
software side-channel vulnerabilities in higher-end PMAs such as
Intel SGX. This paper argues, however, that current attack research
efforts focus too narrowly on the “usual suspects” that are relatively
well-known, and do not reveal anything really unexpected. Apart
from our work, only page table-based attacks [30, 64, 75, 77, 79]
have to date been identified as a novel controlled-channel. Com-
pared to IRQ latency, the page fault channel has a coarser-grained
granularity (instruction vs. page-level), but does not suffer from
the noise inherent to microarchitectural channels.
Our attack vector is closely related to cache timing side-channels
in that IRQ latency traces reveal cache misses. A powerful class
of access-driven cache attacks based on the Prime+Probe tech-
nique [58] first primes the cache by loading congruent addresses,
and thereafter measures the time to reload these addresses so as to
establish memory access patterns by the victim. Such Prime+Probe
cache timing attacks have been successfully applied against SGX
enclaves [8, 25, 31, 51, 62]. When memory is shared between the
attacker and the victim, Flush+Reload [80] and Flush+Flush [29]
techniques improve the efficiency of cache timing attacks. In the