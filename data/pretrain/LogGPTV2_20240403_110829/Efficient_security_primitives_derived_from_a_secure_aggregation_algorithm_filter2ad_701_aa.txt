title:Efficient security primitives derived from a secure aggregation algorithm
author:Haowen Chan and
Adrian Perrig
Efﬁcient Security Primitives Derived from a Secure
Aggregation Algorithm ∗
Haowen Chan
Carnegie Mellon University, USA
PI:EMAIL
Adrian Perrig
Carnegie Mellon University, USA
PI:EMAIL
ABSTRACT
By functionally decomposing a speciﬁc algorithm (the hierarchi-
cal secure aggregation algorithm of Chan et al. [3] and Frikken
et al. [7]), we uncover a useful general functionality which we
use to generate various efﬁcient network security primitives, in-
cluding: a signature scheme ensuring authenticity, integrity and
non-repudiation for arbitrary node-to-node communications; an ef-
ﬁcient broadcast authentication algorithm not requiring time syn-
chronization; a scheme for managing public keys in a sensor net-
work without requiring any asymmetric cryptographic operations
to verify the validity of public keys, and without requiring nodes to
maintain node revocation lists. Each of these applications uses the
same basic data aggregation primitive and thus have O(log n) con-
gestion performance and require only that symmetric secret keys
are shared between each node and the base station. We thus ob-
serve the fact that the optimizations developed in the application
area of secure aggregation can feed back into creating more opti-
mized versions of highly general, basic security functions.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General—Secu-
rity and Protection
General Terms
Security, Algorithms
Keywords
Sensor Networks, Data Aggregation, Broadcast, Authentication,
Integrity, Public Key Management, Signatures
∗
This research was supported in part by CyLab at Carnegie Mel-
lon under grant DAAD19-02-1-0389 from the Army Research Of-
ﬁce, grant MURI W 911 NF 0710287 from the Army Research
Ofﬁce, and grant CAREER CNS-0347807 from the National Sci-
ence Foundation, and by a gift from Bosch. The views and con-
clusions contained here are those of the authors and should not be
interpreted as necessarily representing the ofﬁcial policies or en-
dorsements, either express or implied, of ARO, Bosch, CMU, NSF,
or the U.S. Government or any of its agencies.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’08, October 27–31, 2008, Alexandria, Virginia, USA.
Copyright 2008 ACM 978-1-59593-810-7/08/10 ...$5.00.
1.
INTRODUCTION
Sensor networks represent an interesting emerging applications
area where distributed computation takes place in a well-deﬁned
network topology. One example of a common structured distributed
computation is data aggregation. In the framework ﬁrst deﬁned in
Tiny Aggregation (TAG) by Madden et al. [16], data aggregation
occurs over a tree rooted at the base station; data is sent in a con-
vergent pattern from the leaf sensor nodes to the root with internal
nodes performing intermediate computations to summarize the data
along the way. Secure data aggregation algorithms aim to ensure
the integrity of the results computed by this distributed computa-
tion in the presence of a small number of malicious (“Byzantine”)
nodes which may be attempting to inﬂuence the result.
In this paper, we make the following high-level observation: be-
cause data aggregation represents a general class of distributed com-
putation over a speciﬁc kind of structured network (e.g., a tree) uti-
lizing a speciﬁc pattern of communication (e.g., to and from the
base station via the tree topology), therefore, algorithms that pro-
vide integrity for data aggregation tend to contain, as part of their
design, primitives for providing certain useful general integrity prop-
erties for those speciﬁc communication patterns over those topolo-
gies. These general integrity properties may be used to construct
efﬁcient security primitives speciﬁcally optimized to the topology
or communication pattern for which the original aggregation ap-
plication was designed. Hence, secure data aggregation is a use-
ful central research area for security in resource-constrained struc-
tured networks, feeding useful ideas for the creation of both general
primitives and speciﬁc application protocols.
We consider generalized applications of the secure hierarchi-
cal aggregation algorithm with distributed veriﬁcation proposed by
Chan et al. [3] and Frikken and Dougherty [7]. Speciﬁcally, we an-
alyze the original algorithm by decomposing it into modular, gen-
eralized functionalities. One functionality of particular importance
is the ability to efﬁciently generate and disseminate network-wide
cryptographic hash trees. We call this generalization the “HT
functionality”. We show that the HT functionality is applicable
to more general and broader problems than secure data aggrega-
tion. We describe efﬁcient solutions to three speciﬁc open problems
for tree-based sensor networks derived from the HT functional-
ity: authenticated broadcast, public key management, and node-
to-node message signatures providing authentication, integrity and
non-repudiation. Each of these derived algorithms requires only
one symmetric key per node shared with the base station and incurs
O(log n) communication congestion per link in the network.
The remainder of the paper is structured as follows. We describe
the relevant details of the original hierarchical secure aggregation
framework in Section 2. We then provide a generalized functional
decomposition of the algorithm in Section 3. The assumptions used
R = (cid:2)30; H [30||H0||A1||I0](cid:3)
A1 = (cid:2)23; H [23||A0||B1||C1||D0](cid:3)
C1 = (cid:2)11; H [11||C0||E0||F1](cid:3)
F1 = (cid:2)6; H [6||F0||G0](cid:3)
  G0 = (cid:2)5; G(cid:3)
Figure 1: Standard tree-based SUM aggregation as described
in TAG. Numbers next to nodes represent data/readings; Num-
bers and sums on edges represent intermediate sums sent from
nodes to parents.
in our application domains are summarized in Section 4. We then
show how the general functionalities derived can be used to con-
struct algorithms for broadcast authentication (Section 5), public
key management (Section 6) and node-to-node message signatures
(Section 7).
2. THE CPS ALGORITHM
In this paper we will focus on using the the algorithm proposed
by Chan et al. [3] and improved by Frikken and Dougherty [7] to
derive new algorithms for our security applications. Alternative se-
cure aggregation algorithms with distributed veriﬁcation may pos-
sibly be adapted for the applications listed in this paper – when
describing each application, we will specify the functionalities re-
quired of the secure aggregation algorithm. This section provides
a summary of the original algorithm (which we will call the CPS
algorithm for brevity) and references to subsequent optimizations.
For a detailed description with proofs, please refer to the original
publications [3, 7]. Readers already closely familiar with the algo-
rithm are encouraged to read Section 2.2 for some updated termi-
nology before skipping to Section 3.
2.1 Problem Deﬁnition: Secure Aggregation
For some context to the secure aggregation problem, we review
the standard aggregation framework as proposed in Tiny Aggrega-
tion (TAG) by Madden et al. [16]. We consider the example of
computing a sum over all the sensor readings in the network. First,
a spanning tree rooted at the base station is constructed over the
network topology. All communications occur over the spanning
tree subgraph; thus the remainder of the edges of the topology are
ignored for this algorithm. Next, each sensor node that is a leaf in
the spanning tree reports its sensor reading to its parent. Once an
internal node has received data from each of its children, it eval-
uates the intermediate aggregation operator over this data and its
own reading. In the case of the summation aggregation, the inter-
mediate aggregation operator is addition, i.e., an intermediate sum
of the data received from each of the node’s children and the node’s
own reading is performed. The result of the intermediate aggrega-
tion operation is reported to the node’s parent, which then repeats
the process until the ﬁnal sum is computed at the base station. An
example of this process is shown on Figure 1.
The goal of the CPS algorithm is to guarantee the integrity of
the SUM computation under the attacker model where a certain
Figure 2: Non-optimized commitment tree for the aggregation
of Figure 1, showing derivations of some of the vertices. For
each sensor node X, X0 is its leaf vertex, while X1 is the in-
ternal vertex representing the aggregate computation at X. On
the right we list the labels of the vertices on the path of node G
to the root.
unknown subset of the nodes in the network is malicious and in-
tends to skew the computed result (the original paper describes fur-
ther generalizations of using SUM to compute other aggregates like
counts, averages and quantiles). We assume that the base station
shares a unique symmetric secret key with each sensor node. The
correctness goal is that if no attacker is present and no errors occur
in the algorithm, then the result is accepted; if an attacker tampers
with the aggregation computation then the result (if any) is dis-
carded and the algorithm reports that an adversary (or fault) must
be present in the system. Speciﬁcally, the adversary is bounded by
the algorithm such that any result it causes the system to accept is
achievable by just reporting legal input values (i.e., values within
a predetermined ﬁxed range, e.g., room temperature sensors only
◦
report values between 0 to 50
C) at the malicious nodes that it
controls; in other words, tampering with the aggregation mecha-
nism gives the adversary no added ability to inﬂuence the set of
accepted results. Furthermore, if the adversary attempts to cheat
or disrupt the algorithm, its presence will be detected (although
the exact malicious node is not pinpointed). Speciﬁc countermea-
sures may then be deployed to eliminate the adversary from the
system; the speciﬁcs of the security reaction is outside the scope of
the problem.
2.2 General Overview
A high level overview of the CPS secure hierarchical data aggre-
gation scheme is as follows. The algorithm proceeds in four phases.
Chan et al. and Frikken et al. originally used names for each phase
which referred to the aggregation computation process [3, 7]; in
anticipation of the generalization of the algorithm beyond data ag-
gregation, we rename each phase with a more general label. The
four phases and their short descriptions are as follows:
1. Commitment Tree Generation Phase: A structure similar
to a hash tree, called a commitment tree (see Figure 2), is
generated by the nodes in a distributed manner, committing
to the set of inputs and the intermediate operations in the
distributed aggregation computation. The root vertex of the
commitment tree contains the aggregation result and also acts
as an overall commitment to the operations and inputs lead-
ing to that result. Typically it is computed at the base station
at the conclusion of this phase.
2. Result Dissemination Phase: The base station broadcasts
the root vertex of the commitment tree to the entire network.
3. Distributed Veriﬁcation Phase: The nodes exchange infor-
mation which allows each node to verify that their respective
contributions were indeed correctly incorporated into each
of the intermediate results computed during the aggregation
process.
4. Veriﬁcation Conﬁrmation Phase: Once each node has suc-
cessfully performed veriﬁcation, it must notify the base sta-
tion of success. Veriﬁcation success conﬁrmation messages
are generated at each node and efﬁciently aggregated towards
the base station. If the base station detects that all nodes suc-
ceeded in veriﬁcation then the result is accepted, otherwise it
is rejected.
2.3 The Commitment Tree
The foundational data structure of the CPS secure data aggre-
gation algorithm is the commitment tree.
In this section we de-
scribe this structure in more detail, describing the operation of the
four phases with reference to the data structure. For clarity, we
ﬁrst focus on the basic (non-optimized) version of the commitment
tree, which has a structure reﬂecting the network topology. In Sec-
tion 2.4 we brieﬂy discuss optimizations by Frikken and Dougherty
which bound the depth of the commitment tree to O(log n) where
n is the total number of leaves in the tree [7].
For clarity, we focus on a general simpliﬁcation of the commit-
ment tree and omit essential details in the original CPS publication
such as nonces, node counts, and complement sums.
Figure 2 shows an example of how a basic commitment tree can
be constructed. Figure 1 shows the logical network topology as
well as the aggregation operations. For clarity, we will refer to the
vertices of the commitment tree and the sensor nodes in the topol-
ogy. Comparing Figures 1 and 2 side by side, it is apparent that the
commitment tree follows the shape of the network topology. Each
commitment-tree vertex is a hash-based commitment to the aggre-
gation inputs and result occuring at the corresponding node in the
topology. For example, vertex C1 contains a hash on the result (i.e.,
11) computed at node C as well as the set of inputs used to compute
this result (i.e., commitment-tree vertices C0, E0, F1).
2.3.1 Commitment Tree Generation
In the commitment-tree generation phase, the commitment tree
is constructed from the bottom up in a distributed fashion, with
new internal vertices added on each aggregation operation which
are then transmitted on to the aggregating node’s parent node in the
network topology. The leaf vertex of the commitment tree for a
node with ID i contains its input to the computation xi as well as
its identity i:
vi = (cid:2)xi; i(cid:3)
For example, in Figure 2, sensor node G constructs a leaf vertex
consisting of its input value xG (e.g., a sensor reading) and its node
ID G. Each leaf node in the network topology transmits its leaf
vertex to its parent (e.g., G sends its leaf vertex to F ).
Each internal (non-leaf) sensor node i in the topology receives
from each of its children a commitment tree vertex. The parent
node i then performs its own aggregation operation over its own
leaf vertex and the vertices supplied by its children, and generates
a new internal vertex in the commitment tree.
ui = (cid:2)yi; H [yi||u1||u2|| ···||uk](cid:3)
Where ui is an internal vertex created by node i, yi is the result of
the intermediate aggregation operation performed on the data con-
tained in the commitment tree vertices u1,··· , uk received from
the children of i (or generated by i itself). For example, in Fig-
ure 2, the sensor node A performs an aggregation over the received
Figure 3: Off path vertices of vertex u
internal vertices B1 and C1 and the leaf vertex D0 as well as its
own leaf vertex A0. Based on the received inputs, it generates the
aggregated result value 23 (as the sum of the values from all its
children and itself) and commits to the set of inputs used in the
computation, by computing a hash over 23||A0||B1||C1||D0. The
result is a new internal vertex in the commitment tree which is the
parent of all the vertices received by A. Once each node i has com-
puted all its internal commitment tree vertices it transmits them to
its parent, which will then construct its own internal vertex as the
parent of all the vertices it receives, and so on.
2.3.2 Result Dissemination
At the conclusion of the aggregate commit phase, the base station
disseminates the root vertex of the commitment tree via an authen-
ticated broadcast to all nodes in the network. It may also include a
unique nonce N in the broadcast message; this nonce is used in the
veriﬁcation conﬁrmation phase.
2.3.3 Distributed Veriﬁcation
Each node is then required to verify that its own contribution to
the network-wide aggregation computation was incorporated cor-
rectly in the commitment tree. Speciﬁcally, the node must check
that its leaf vertex is indeed a descendant of the root vertex that
was broadcast by the base station; furthermore, it must check the
correctness of all the aggregation operations computed which in-
volve its input value as an upstream input. To check this, each
node must recompute the sequence of commitment tree vertices
between its leaf vertex and the root. For example, node G in Fig-
ure 2 must recompute the vertices F1, C1, A1 and R1. To perform
this series of computations, each node must receive all the off-path
vertices of its leaf vertex. The off-path vertices of a tree vertex
u are the sibling vertices of all nodes on the path from u to the