tween the input bits and the signal to identify how far these
input bits are directly manipulated in the computation and
whether or not these bits correlate at this cycle. If there is
no input correlation at this cycle, then one can still estimate
how far this cycle is from the other cycles which manipu-
lated inputs. Some algorithms perform some form of input
mixing operation before performing sensitive operations; in
those cases, the heuristic should compute correlations with
the bits resulting from the mixing operation rather than in-
put bits.
After the small valued function has been reasonably well
isolated, the next step is to perform statistical characteri-
zation of the signal distributions for all possible values of
the function, using chosen or known inputs that affect the
function. For example, if the function is the ﬁrst byte of in-
put, statistical characterization should be performed with all
possible values for the ﬁrst byte of input (with other bytes
3It is easy to attack implementation in which the signals depend on
just the sensitive information; after some initial training on signals with
different values of the sensitive information, a “best match” approach can
be used to recover sensitive information used in a speciﬁc device.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
kept the same). Based on this analysis, it should be pos-
sible to cluster the various values of the function into dif-
ferent partitions based on statistical similarities of the side–
channel signals created by these values.
The gist of the partitioning attack is the following:
Knowledge of the partitions and the values that fall into
each partition provides information as to the processing that
has occurred thus far. If this processing involves secret in-
formation then given knowledge of the algorithm being im-
plemented, guesswork on how the implementation has been
done and limitations of the device, one can come up with
an hypothesis for the observed partitioning behavior. This
hypothesis together with the actual values that fall into each
partition puts constraints on the sensitive information was
involved in the computation thus far; which in turn implies
a leakage of sensitive information in information theoretic
terms.
Similarly, each intermediate cycle where a different par-
titioning behavior is observed, provides an avenue for infor-
mation leakage about the sensitive information employed in
the algorithm. If enough such cycles can be found and ex-
ploited then the sensitive information may be completely
disclosed. Even if this is not the case, it is quite possible
that the entropy of the sensitive information could be so re-
duced that exhaustive search based attacks become feasible.
5. Countermeasures
Table lookup is a fundamental primitive used by sev-
eral cryptographic algorithms such as DES, AES and
COMP128. Implementing this primitive in a side–channel
attack resistant manner on constrained devices poses spe-
cial challenges since straightforward application of coun-
termeasures seem to require the creation and use of large
random tables which may take up much more RAM than is
available. In addition, the use of the tables requiring large
indices poses problems for devices with limited addressing
capabilities, e.g., many chip–card devices only support an
8–bit index into a byte table. Due to these complications,
several implementations of table lookup based algorithms
on limited devices remain susceptible to side–channel at-
tacks.
We now propose a methodology to create efﬁcient, ﬁrst–
order differential side–channel attack resistant implementa-
tion of table lookups using substantially less RAM than the
cumulative size of the tables being accessed. In addition,
for most practical cases, this solution also takes care of the
problem of large indices. This methodology is based on us-
ing a combination of three basic building blocks, the “Table
Mask” operation, the “Table Split” operation and the “Ta-
ble Aggregate” operation. The Table Mask operation pro-
vides the main defense against side–channel analysis but
does not address the problem of RAM or addressing con-
straints. However, in combination with the Table Split and
Table Aggregate operations the problem can be solved for
most situations arising in practice. For illustrative purposes,
in this paper, we focus on table lookups for tables with in-
dices a power of 2.
5.1. Table Mask Operation
Let T : 0; 1 ! 0; 1b be an –bit to b–bit table to be
accessed, i.e., T consists of 2 elements of size b–bits each.
The size of T is b  2 bits. Any implementation which di-
rectly looks up T is vulnerable to differential side–channel
attacks since the side–channel signals at the time of table
lookup will correlate with each bit of the index accessed
and with each bit of the value retrieved. To remove this cor-
relation, the Table Mask operation is performed as follows:
Deﬁnition 1 Let  (index permutation) be a class of –bit
to –bit permutations with the property that for any –bit
value i, if a permutation i is chosen uniformly at random
from the class  , then the value ii is statistically inde-
pendent of i.
A simple example for  would be the class of –bit
XOR permutations. For any ﬁxed –bit number  and input
i, the function i   is a –bit to –bit permutation, which
we term as an XOR–permutation. The class of –bit XOR
permutations is the collection of XOR–permutations for all
possible values of .
Deﬁnition 2 Let  (output permutation) be a class of b–
bit to b–bit permutations with the property that for any b–bit
value , if a permutation  is chosen uniformly at random
from the class  , then the value  is statistically in-
dependent of .
A simple example for  would be the class of b–bit XOR
permutations.
For each instance of a cryptographic operation requiring
one or multiple lookups of a table T , a fresh random looking
“masked” table T 0 is computed and placed in RAM. This is
done as follows:
(cid:15) Select a permutation i 2  uniformly at random.
(cid:15) Select a permutation  2  uniformly at random.
(cid:15) Deﬁne the masked table T’ as: 8i; 0 <= i <
2; T 0[ii] = T [i]:
The table lookups work with a masked values of the index
(ip(i) instead of i) and result in masked values of the output.
By working throughout with appropriately masked values,
one can perform the entire algorithm without ever exposing
any intermediate result in the clear and preventing a differ-
ential side–channel attack [2, 4]. The properties of  and
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
 ensure that the side–channel during table lookups has a
statistical distribution which is independent of the index and
the corresponding value of T (not T 0) that is being accessed.
The main problem with the Table Mask operation de-
scribed above is that it requires the table T 0 to be in RAM
and the size of T 0 is the same as that of T . Moreover, if
many such tables have to be examined multiple times within
the algorithm, then for efﬁciency purposes, masked versions
of all tables must be simultaneously kept in RAM. Also if 
is large, then T 0 can have the same indexing problem as T .
The solution to these problems, is to use the Table Mask op-
eration in conjunction with Table Split and Table Aggregate
operations described below.
5.2. Table Split Operation
This operation is useful in cases where the size of a ta-
ble is greater than the available RAM or the index is too
large for the addressing capabilities of the device. The ba-
sic idea is that an unmasked –bit to b–bit table T can be
split into multiple tables T1; T2; : : : ; Tk such that each table
Ti takes an –bit index and produces a bi bit output where
the the bi’s (for i=1 to k) sum up to b. For example, a –bit
to b–bit table T could be split into b, –bit to 1–bit tables
T1; T2; : : : ; Tb where Ti gives the i’th bit of the output of T .
By packing multiple entries into a single addressable mem-
ory unit (such as a byte or word), the actual index needed to
access some value into any one of these split tables could be
less than n–bits and also the size of each of these tables is
smaller. For example, an –bit to b–bit table T is split into
b, –bit to 1–bit tables, T1; : : : ; Tb as described above by
packing 8 output bits into a single byte, the size of the index
into any table Ti becomes    3 bits and the individual table
sizes are smaller by a factor of b.
5.3. Table Aggregate Operation
Suppose we have k, equal sized tables T1; T2; : : : ; Tk
each of size no more than  bytes. By combining the ta-
bles in various algebraic ways, one can create an aggregate
table T of size  bytes, with the property that given T and
all but one of the tables Ti, one can recover the table Ti.
For example, T could be created by padding all tables
with 0–valued bytes to make their sizes exactly  bytes
each and then doing a byte–wise XOR4 of the correspond-
ing bytes in all the  padded tables. Clearly, any table Ti
can be recovered from T and T1; : : : ; Ti 1; Ti1; : : : ; Tk by
XORing all these tables. An advantage of using the byte–
wise XOR5 to create the aggregate table T is that, if the ta-
bles T1; : : : ; Tk can be created one or a few bytes at a time,
4Addition modulo 256 could also be used instead of XOR
5or addition modulo 256
then the table T can be created using only slightly more than
 bytes of memory.
5.4. Combining Building Blocks for a Solution
Suppose one only had  bytes of RAM to spare for ta-
ble lookup on a device and a restriction on the memory ad-
dressing mechanism which limited any index to within –
bits. Suppose one had several tables to be looked up. In
the ﬁrst stage, one would use the Table Split mechanism on
all tables whose size is more than  and/or whose index
requirements exceed the bounds. One can now rewrite the
algorithm to work with these split tables and these split ta-
bles could be in ROM. At this stage, we have eliminated the
large index problem but are still vulnerable to differential
side–channel attacks. In the next stage we would “concep-
tually” apply the “Table Mask” operation on all the tables
we now have and then apply the “Table Aggregate” oper-
ation on all the resulting masked tables. In practice, one
would not actually create the full masked tables, since this
would take too much RAM, one would create one or a few
bytes of these tables at a time and update the Aggregate
table being computed. Thus at this stage our main RAM
usage would be the  bytes needed to store the Aggregate
table. We also put copies of all the original tables in ROM.
We then modify the algorithm code we wrote for split
tables to work with masked values and use the Aggregated
Masked table for the table lookup for any table. The prob-
lem with this approach is that table lookup into the Aggre-
gated Masked table gives us not just the Masked entry of
the table we are interested in but instead some combination
of the Masked entry of interest and contributions of entries
from other Masked tables. However since the masking in-
formation, i.e., the index and output permutations are avail-
able for all the tables, one can use direct ROM lookups in
the actual tables to remove the contributions from the other
entries so that we are left with only the masked entry we are
interested in. Moreover, given the way masking works, i.e.,
the masked index being independent of the real index, the
indices looked up in the other ROM tables would be ran-
dom, i.e., statistically independent, of the real index in the
table of interest. Thus, we get a differential side–channel
resistant implementation involving table lookups within the
resource/addressing bounds.
6 Acknowledgements
We would like to thank Arvind Krishna for challenging
us to devise power and EM side–channel attacks on GSM
cards (in the short span of four days!) and Charles Palmer
for his encouragement and support during that time.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
References
[1] Mark Briceno, Ian Goldberg and David Wagner. See
http://www.isaac.cs.berkeley.edu/
isaac/gsm--faq.html
[2] Suresh Chari, Charanjit S. Jutla, Josyula R. Rao
and Pankaj Rohatgi. Towards Sound Countermeasures
to Counteract Power–Analysis Attacks. Advances in
Cryptology — Proceedings of Crypto ’99, Springer–
Verlag, LNCS 1666, August 1999, pages 398–412.
[3] Suresh Chari, Charanjit S. Jutla, Josyula R. Rao and
Pankaj Rohatgi. A Cautionary Note Regarding the
Evaluation of AES Candidates on Smart Cards. Pro-
ceedings of the Second Advanced Encryption Stan-
dard Candidate Conference, Rome, Italy, March 1999.
[4] L. Goubin and J. Patarin. DES and Differential Power
Analysis. Proceedings of the Workshop on Crypto-
graphic Hardware and Embedded Systems, CHES ’99,
August 12–13, 1999, Worcester, MA, pages 158–172.
[5] P. Kocher. Timing Attacks on Implementations of
Difﬁe-Hellman, RSA, DSS and Other Systems. Ad-
vances in Cryptology-Crypto ’96, Lecture Notes in
Computer Science # 1109, pp 104–113.
J.
Jaffe
[6] P. Kocher,
and B.
Jun. Differential
Power Analysis:
Leaking Secrets. Advances
in Cryptology — Proceedings of Crypto ’99,
Springer Verlag, LNCS 1666, pages 388–397.
One version of the paper is available online at
http://www.cryptography.com/dpa/
technical/index.html.
[7] Jean–Jacques Quisquater and David Samyde. Simple
electromagnetic analysis for smart cards: new results.
Rump session talk at Cyrpto 2000.
[8] J. Kelsey, Bruce Schneier, D. Wagner and C. Hall.
Side Channel Cryptanalysis of Product Ciphers. Jour-
nal of Computer Security, Volume 8, Number 2–3,
2000, pages 141–158.
[9] Josyula R. Rao and Pankaj Rohatgi. EMpowering
Side–Channel Attacks. IACR Crypto e-print archive
at http://eprint.iacr.org, paper 2001/037.
[10] Dawn Xiaodong Song, David Wagner and Xuqing
Tim. Timing Analysis of Keystrokes and Timing At-
tacks on SSH. Proceedings of the 10th USENIX Se-
curity Symposium, Washington, DC, August 2001,
pages 337–352.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE