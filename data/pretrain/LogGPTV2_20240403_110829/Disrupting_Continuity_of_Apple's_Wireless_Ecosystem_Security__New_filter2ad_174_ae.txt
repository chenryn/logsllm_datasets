can act as an access point,
• are in physical proximity (more precisely, within wire-
less communication range) of the target device, and
• are otherwise in a non-privileged position, in particular,
they (1) do not require any contact information about
their target, (2) do not require an existing Bluetooth
pairing with the target, and (3) do not require access to
the same Wi-Fi network.
5.2 DoS via IV Desynchronization
We exploit the short AES-GCM authentication tag in the HO
and UC BLE advertisements to force an IV desynchroniza-
tion between client and server such that HO and UC become
unusable. Apple’s deployed replay protection mechanism is
unable to defend against this attack and requires the user to
reboot their devices.
5.2.1 The Vulnerabilities: Low-Entropy Authentication
Tag and IV-based Replay Protection
The HO BLE advertisements are encrypted using AES-GCM
with a one-byte authentication tag and a two-byte IV (see
Section 4.1). The IV used in the advertisements is a linearly
increasing counter to avoid IV reuse with the same key [21].
Whenever a successfully authenticated advertisement is re-
ceived, the receiver will update the last valid IV with the
current one. From there on, any authenticated advertisement
that has an IV lower or equal to the current one is discarded.
In addition to the replay protection, we observed, that HO
triggers a re-keying protocol whenever the authentication
fails. In that case, HO assumes that the sending device has
updated its HO key KBLE and queries the sending device for
its current key and IV. This re-keying protocol runs over
AWDL and uses the same procedure as HO and UC to protect
the communication. However, we observed that if the returned
key–IV pair match the currently stored pair, no new keys will
be exchanged.
USENIX Association
30th USENIX Security Symposium    3927
5.2.2 The Attack: Trigger Continuous Rekeying
In the following, we denote C as the client device that stores
a key–IV pair for a linked server device S. The goal of the
attack is to change the IV counter of the key–IV pair at C
so that the IV-based replay protection mechanism will drop
future valid advertisements of S and, thus, C is no longer able
to receive new UC clipboard data or HO activities from S. To
achieve this goal, the attacker
(1) generates a valid HO advertisement as shown in Fig. 3,
(2) spoofs S’s BLE MAC address by setting it as the source
address of the advertisement,
(3) sets the IV in the payload to the maximum value, and
(4) sends out 256 copies of the advertisement to brute-force
all authentication tag values.
The attack works because Apple devices use the shared key
and the IV in the BLE advertisement to verify the authentica-
tion tag. In our attack, we send 255 advertisements with an
invalid tag that are all discarded and trigger a re-keying event
that has no effect (see Section 5.2.1). One advertisement will,
however, have a seemingly valid authentication tag. If the
included IV is greater than the currently stored one, C updates
the IV and then processes the decrypted payload. At this
point, the adversaries have already achieved their goal, and it
does not matter that they are unable to forge a valid payload.
Since the IV at C has been updated, C will discard any subse-
quent advertisements from S as all subsequent advertisements
contain an IV less or equal to 0xffff.
To mount the attack on all device pairings in proximity,
we repeat this attack with all BLE MAC addresses that we
observe. Since we only need to send a BLE advertisement, a
$20 micro:bit [36] is sufﬁcient to mount the attack. We used
the BLESSED open-source BLE stack [16] to build our PoC.
5.2.3 The Mitigation: Longer Authentication Tag
As a mitigation to the attack, we suggest increasing the
length of the authentication tag. While National Institute
of Standards and Technology (NIST) recommends using 128
bits [21], the manufacturer data in the BLE advertisements
can only carry 24 bytes [34]. As the current HO advertisement
already uses 16 bytes (see Fig. 3), Apple could add a new 64-
bit authentication tag and keep the current one for backward
compatibility. Increasing the search space to 264 would effec-
tively prevent our network-based brute-force attack. Note that
limiting “the number of unsuccessful veriﬁcation attempts for
each key” [21] is not a suitable mitigation as it would open
up a new DoS attack where the attacker could push the limit
and prevent legitimate veriﬁcation attempts.
device tracking even though Apple employs MAC address
randomization in BLE. The problem is that while the BLE
address changes, the IV remains stable. In the following, we
propose a practical mitigation that replaces the linear counter
with an unguessable pseudorandom sequence.
5.3.1 The Mitigation: Changing the IV sequence
To prevent tracking via the linear IV, we propose to use a
shufﬂed IV sequence with the following properties:
(1) The sequence has a length of 216 and contains all integer
values from 0 to 216 − 1 exactly once.
(2) A sender can select the next value in the sequence in
constant time.
(3) A receiver can tell if value x is positioned before or after
y in the sequence in constant time.
(4) The sender and receiver only need to share a secret.
(5) Given any value in the sequence, an adversary is not able
to guess the next or previous item of the sequence.
Figure 9 shows our candidate algorithm for generating a
randomized sequence on the Knuth shufﬂe [26]. It uses a
pseudorandom number generator (PRNG) with a seed derived
from the shared BLE encryption key KBLE and generates
a counter-to-IV mapping. Internally, each HO device now
keeps an internal incrementing counter c and uses fMap(c) as
the IV for the next advertisement. Note that c should also be
increased on the sending device whenever the MAC changes
to synchronize identiﬁer randomization (see Section 5.4). The
algorithm also generates the reverse IV-to-counter mapping
to identify in constant time whether a received IV x comes
before or after the current counter c, which can be done by
comparing c with rMap(x).
While the mitigation is practical from an overhead perspec-
tive (constant-time lookup), it is not backward-compatible
as it would break the replay-protection mechanism currently
employed in Apple’s devices (see Section 5.2). Also, note
that as the sequence is based on the HO key, the algorithm
needs to re-run every time a re-keying event occurs.
() function genIVSequence (KBLE) {
fMap = [0..2^16 -1] /* forward mapping */
/* reverse mapping */
rMap = []
seed = HKDF (KBLE , "IV - sequence ")
prng = PseudoRandomNumberGenerator ( seed )
for (i = len ( fMap ) - 1; i > 0; i - -) {
5.3 Device Tracking via Linear IV
Martin et al. [34] have discovered that the linearly increas-
ing IV in the HO advertisements can be used for long-term
}
j = prng . next (i)
fMap . swap (i ,j)
rMap [ fMap [i ]] = i
}
return ( fMap , rMap )
Figure 9: Generating a pseudo-random IV sequence.
3928    30th USENIX Security Symposium
USENIX Association
5.4 Device Tracking via Asynchronous Identi-
ﬁer Randomization
When using a Continuity service such as HO or UC, AWDL
emits several device identiﬁers such as MAC address and
hostname in the clear. While Apple has implemented ran-
domization schemes for these identiﬁers, we found that the
intervals are sometimes not in sync and allow for continuous
device tracking. AWDL uses Wi-Fi and does, by itself, not
offer authentication or encryption. Instead, Apple defers pro-
tection to the upper-layer protocol. Therefore, an attacker can
monitor all packets sent over the air.
5.4.1 The Vulnerability: Asynchronous Identiﬁer Ran-
domization
Apple has implemented MAC address randomization for
AWDL. In 2019, Apple also introduced hostname random-
ization [44] in the Bonjour service announcements that are
sent via AWDL. In this paper, we discovered that Apple in-
troduced the new device identiﬁer rpBA in the TXT record of
the DNS service announcements (see Section 4.1.3). Apple
devices regenerate (or randomize) each identiﬁer after some
time; however, this does not happen synchronously.
5.4.2 The Attack: Merging Identiﬁers
Consequently, identiﬁers may overlap and, thus, trivially en-
able device tracking for longer than the randomization interval.
To practically mount such an attack, the attacker only needs
to be within Wi-Fi communication range of their target(s).
In particular, the attacker needs a Wi-Fi card and tune it to
channel 44 or 149 (depending on the country [42]) and moni-
tor AWDL frames. Using a simple matching algorithm that
stores current identiﬁers and updates them upon receiving
new frames, the attacker can continuously track their targets.
We conduct an experiment in an ofﬁce environment to
demonstrate the problem and the attack and show the exem-
plary result of tracking an iOS 13 device in Fig. 10. The
ﬁgure depicts the times when the device emits AWDL frames
(top bar). The following bars show when a particular ran-
domized identiﬁer was recorded for the ﬁrst and last time and,
thus, clearly indicate the times at which the overlap occurs.
For example, in Fig. 10, the rpBA overlaps with the other
identiﬁers for 35 ≤ t ≤ 38min. We note that the intervals
for the IPv6 and MAC addresses are perfectly in sync be-
cause the link-local IPv6 address is derived from the current
MAC address [42]. It is also noteworthy that the randomiza-
tion intervals of the individual identiﬁers differ strongly and
range from less than one minute (hostname) to more than 35
minutes (rpBA).
Figure 10: Tracking an iOS device using its randomized
identiﬁers. We show the frame reception time in the top
bar. The other bars indicate when the randomized identiﬁers
were recorded for the ﬁrst and last time. Each bar segment
represents a new random identiﬁer.
5.4.3 The Mitigation: Synchronous Randomization
To understand why the overlap with rpBA and the long
intervals occur, we analyze the -[CUSystemMonitorImp
the
_rotatingIdentifierMonitorStart]
CoreUtils framework. We found that the function sets a
timer to 17 minutes to randomize the rpBA value but uses a
low-level API11 that allows the system to defer the call to
conserve energy. This timer value is neither synchronized
with others nor does it update in regular intervals, which
results in the analyzed overlaps.
function
in
To mitigate this issue, we suggest that the randomization
intervals of the identiﬁers should be synchronized or—at
least—not overlap (e. g., hostname and MAC address). In
addition, we suggest that the randomization interval for any
identiﬁer should not be longer than 15 minutes. We propose
to introduce a system-wide randomization API to prevent
regression and accommodate future identiﬁers.
5.5 MitM via Wi-Fi Password Auto-Fill
We exploit the one-sided authentication in the PWS protocol
to automatically ﬁll the Wi-Fi password ﬁeld for requestors,
causing the iOS or macOS target to connect to an attacker-
controlled Wi-Fi network and raise the attacker to a privileged
MitM position. This position allows for mounting secondary
attacks such as DNS spooﬁng or trafﬁc analysis. In addition,
the attacker can compromise the target device by triggering
Safari exploits.
5.5.1 The Vulnerability: One-Sided Authentication
The MitM attack exploits the asymmetry of information that
the parties in PWS need to provide: the requestor must pro-
vide certiﬁed contact information, while the grantor does not,
11https://developer.apple.com/documentation/dispatch/
1385606-dispatch_source_set_timer
USENIX Association
30th USENIX Security Symposium    3929
01020304050Timet[min]MACaddressIPv6addressHostnamerpBAFramesreceivedFigure 11: Protocol ﬂow and user interaction of our Wi-Fi password auto-ﬁll attack.
3930    30th USENIX Security Symposium
USENIX Association
RequestorGrantorVictimAttackerLegit access pointWi-Fi beaconwith SSID, BSSIDWi-Fi beaconwith SSID, BSSIDCopies SSID of target networkGenerates new BSSID’Scan for available Wi-Fi networksPWS protocol handshake (steps 2 to 4 of Fig. 7)Grantor provides WPA2 passphraseWi-Fi beaconwith SSID, BSSID’RSSIRSSI’We assume that the received attacker signal is stronger, i.e., RSSI’ > RSSI User selects Wi-Fi network and is asked to enter WPA2 passphraseUpon receiving the advertisement, the attacker has all required information and immediately initiates the PWS protocol PWS advertisement (step 1 of Fig. 7)with hashed SSID and contact infoWPA2 authentication handshake using WPA2 passphraseAuto. connect to attacker Wi-FiWi-Fi communicationBLE communicationAttempt to access Internet service1. PREPARATION2. EXECUTION3. EXPLOITATION* possible secondary attack vectorsDNS requeste.g., “www.usenix.org”HTTP responsewith malicious payload3b. Traffic analysis*Learn the victim’s services (e.g., bank) useful for targeted phishing3c. DNS spoofing*Redirect traffic to attacker-controlled systemHTTP requestwww.apple.comDNS responsepointing to attacker-controlled system3a. End system compromise*Using exploit against Apple’s Safari browser (if available)Automatically test for captive portalas per Apple’s design [4]. In our case, the attacker acts as the
grantor and, therefore, does not need to possess any informa-
tion about their target. We elaborate on this problem in the
following.
In Section 4.2.5, we describe that the requestor proves its
identity to the grantor using the validation record signed by
Apple and the Apple ID certiﬁcate. Therefore, the grantor
can verify that the requestor owns the contact identiﬁers in
its advertisement. In contrast, the requestor does not check
the identity of the grantor. Even though the hashed contact
identiﬁers of the grantor are included in the PWS3 packet,
they are never used on the requestor. Also, the PWS3 message
does not contain the validation record and Apple ID certiﬁ-
cate of the grantor. The mandatory SSID in PWS3 can be
easily obtained by scanning the surrounding Wi-Fi networks
and comparing the hashed names to the ﬁeld in the BLE ad-
vertisement. We use the missing validation of the grantor,
combined with the fact that no user interaction is necessary
on the requestor to perform an attack against the requestor.
5.5.2 The Attack: SSID Spooﬁng and Wi-Fi Password
Auto-Fill
This attack targets iOS and macOS devices while they are
connecting to a new Wi-Fi network. The goal is to get the tar-
get device to connect to a password-protected Wi-Fi network
with the same SSID, but controlled by the attacker, further
named spoofed network. We show the complete protocol ﬂow
and user interaction in Fig. 11. The attacker could then use
its MitM position to analyze the victim’s trafﬁc or mount
secondary attacks such as DNS or NTP spooﬁng [32]. Be-
sides, the attacker could use the automatically loaded captive
portal web page [17] to exploit vulnerabilities in the Safari
web browser [13], thereby extracting sensitive user data or
accessing the user’s camera [2].
Our experiments with different setups showed that while
opening the password dialog, the requestor saves the BSSID
with the strongest signal and only tries to connect to this
Figure 12: Screen capture of our video PoC [31] for the Wi-Fi
password auto-ﬁll attack.
BSSID. For a successful attack, the spoofed network needs
to be the one with the strongest signal at that moment. The
attacker can increase the transmit power of its access point
or use directional antennas to increase their chances. The
attacker continues by running our PWS client with the origi-
nal SSID and the PSK of its spoofed network. Without any
further user interaction required by the victim, once PWS is
complete, the target device connects to the spoofed network.
One problem with the presented attack is that a careful user
might notice that they are automatically connected to a Wi-Fi
network without having to type any password. We discovered
that the grantor could hold the session open after receiving
the Pair–Verify M2 packet, wait until the victim entered a
password, and continue the attack, i. e., send M3, just before
the victim hits connect. If continued in the right moment,
e. g., by observing the victim, the attack is more likely to re-
main unnoticed. We provide a video PoC [31] to demonstrate
the practical feasibility of the attack in Fig. 12. In the video,
the attacker presents a crafted captive portal web page to its
victim upon success.
5.5.3 The Mitigations: Mutual Authentication and
Explicit Consent
The SSID duplication attack works due to the interaction-
less user interface on the requestor and the missing identity
validation of the grantor. Therefore, we propose a two-step
mitigation. First, we propose to introduce mutual authentica-
tion to the Pair–Verify handshake. It is unclear why Apple did
not implement this is in the ﬁrst place, given that AirDrop’s
authentication protocol is designed in this way [44]. With
mutual authentication, the attack would be more difﬁcult to
carry out since the attacker would have to be in the contact list