# Checklist
  * I have verified that the issue exists against the `master` branch of Celery.
  * This has already been asked to the discussion group first.
  * I have read the relevant section in the  
contribution guide  
on reporting bugs.
  * I have checked the issues list  
for similar or identical bug reports.
  * I have checked the pull requests list  
for existing proposed fixes.
  * I have checked the commit log  
to find out if the bug was already fixed in the master branch.
  * I have included all related issues and possible duplicate issues  
in this issue (If there are none, check this box anyway).
## Mandatory Debugging Information
  * I have included the output of `celery -A proj report` in the issue.  
(if you are not able to do this, then at least specify the Celery  
version affected).
  * I have verified that the issue exists against the `master` branch of Celery.
  * I have included the contents of `pip freeze` in the issue.
  * I have included all the versions of all the external dependencies required  
to reproduce this bug.
## Optional Debugging Information
  * I have tried reproducing the issue on more than one Python version  
and/or implementation.
  * I have tried reproducing the issue on more than one message broker and/or  
result backend.
  * I have tried reproducing the issue on more than one version of the message  
broker and/or result backend.
  * I have tried reproducing the issue on more than one operating system.
  * I have tried reproducing the issue on more than one workers pool.
  * I have tried reproducing the issue with autoscaling, retries,  
ETA/Countdown & rate limits disabled.
  * I have tried reproducing the issue after downgrading  
and/or upgrading Celery and its dependencies.
## Related Issues and Possible Duplicates
#### Related Issues
  * #1700
  * #2725
#### Possible Duplicates
  * None
## Environment & Settings
**Celery version** : 4.4.2/master (`20b7a80`)
**`celery report` Output:**
    developer@b7825f7f6305:~/celery$ celery -A tasks report
    software -> celery:4.4.2 (cliffs) kombu:4.6.8 py:3.8.0
                billiard:3.6.3.0 py-amqp:2.5.2
    platform -> system:Linux arch:64bit, ELF
                kernel version:3.10.0-957.el7.x86_64 imp:CPython
    loader   -> celery.loaders.app.AppLoader
    settings -> transport:amqp results:db+sqlite:///results.sqlite
    broker_url: 'amqp://guest:********@rabbit:5672//'
    result_backend: 'db+sqlite:///results.sqlite'
# Steps to Reproduce
## Required Dependencies
  * **Minimal Python Version** : N/A or Unknown
  * **Minimal Celery Version** : N/A or Unknown
  * **Minimal Kombu Version** : N/A or Unknown
  * **Minimal Broker Version** : N/A or Unknown
  * **Minimal Result Backend Version** : N/A or Unknown
  * **Minimal OS and/or Kernel Version** : N/A or Unknown
  * **Minimal Broker Client Version** : N/A or Unknown
  * **Minimal Result Backend Client Version** : N/A or Unknown
### Python Packages
**`pip freeze` Output:**
    alabaster==0.7.12
    amqp==2.5.2
    appdirs==1.4.3
    attrs==19.3.0
    aws-xray-sdk==0.95
    azure-common==1.1.5
    azure-nspkg==3.0.2
    azure-storage==0.36.0
    azure-storage-common==1.1.0
    azure-storage-nspkg==3.1.0
    Babel==2.8.0
    basho-erlastic==2.1.1
    billiard==3.6.3.0
    boto==2.49.0
    boto3==1.12.37
    botocore==1.15.37
    bumpversion==0.5.3
    case==1.5.3
    cassandra-driver==3.23.0
    -e git+https://github.com/celery/celery.git@20b7a808398b7b865651a5cf0fd7aa2b74be3a4b#egg=celery
    certifi==2020.4.5.1
    cffi==1.14.0
    cfgv==3.1.0
    chardet==3.0.4
    click==7.1.1
    codecov==2.0.22
    couchbase==2.5.11
    coverage==5.0.4
    cryptography==2.9
    DateTime==4.3
    distlib==0.3.0
    dnspython==1.16.0
    docker==4.2.0
    docutils==0.16
    ecdsa==0.15
    elasticsearch==7.6.0
    entrypoints==0.3
    ephem==3.7.7.1
    eventlet==0.25.1
    filelock==3.0.12
    flake8==3.7.9
    flakeplus==1.1.0
    future==0.18.2
    geomet==0.1.2
    gevent==1.4.0
    greenlet==0.4.15
    identify==1.4.14
    idna==2.9
    imagesize==1.2.0
    Jinja2==2.11.1
    jmespath==0.9.5
    jsondiff==1.1.1
    jsonpickle==1.3
    kombu==4.6.8
    linecache2==1.0.0
    MarkupSafe==1.1.1
    mccabe==0.6.1
    mock==4.0.2
    monotonic==1.5
    more-itertools==8.2.0
    moto==1.3.7
    msgpack==1.0.0
    nodeenv==1.3.5
    nose==1.3.7
    packaging==20.3
    pluggy==0.13.1
    pre-commit==2.2.0
    py==1.8.1
    pyaml==20.4.0
    pyArango==1.3.4
    pycodestyle==2.5.0
    pycouchdb==1.14.1
    pycparser==2.20
    pycryptodome==3.9.7
    pycurl==7.43.0.5
    pydocstyle==1.1.1
    pydocumentdb==2.3.2
    pyflakes==2.1.1
    Pygments==2.6.1
    pylibmc==1.6.1
    pymongo==3.10.1
    pyparsing==2.4.7
    pytest==5.3.4
    pytest-cov==2.8.1
    pytest-rerunfailures==9.0
    pytest-sugar==0.9.2
    pytest-travis-fold==1.3.0
    python-consul==1.1.0
    python-dateutil==2.8.1
    python-jose==2.0.2
    python-memcached==1.59
    python3-protobuf==2.5.0
    pytz==2019.3
    PyYAML==5.3.1
    redis==3.4.1
    requests==2.23.0
    responses==0.10.12
    riak==2.7.0
    s3transfer==0.3.3
    simplejson==3.17.0
    six==1.14.0
    snowballstemmer==2.0.0
    softlayer-messaging==1.0.3
    Sphinx==1.8.5
    sphinx-celery==1.4.6
    sphinx-testing==0.7.2
    sphinx2rst==1.1.0
    sphinxcontrib-websupport==1.2.1
    SQLAlchemy==1.3.15
    tblib==1.6.0
    termcolor==1.1.0
    toml==0.10.0
    tox==3.14.6
    traceback2==1.4.0
    Unipath==1.1
    unittest2==1.1.0
    urllib3==1.25.8
    vine==1.3.0
    virtualenv==20.0.16
    wcwidth==0.1.9
    websocket-client==0.57.0
    Werkzeug==1.0.1
    wrapt==1.12.1
    xmltodict==0.12.0
    zope.interface==5.0.2
### Other Dependencies
N/A
## Minimally Reproducible Test Case
    from celery import Celery, chain, group
    app = Celery('tasks',
              backend='db+sqlite:///results.sqlite',
              broker='amqp://guest:guest@rabbit:5672//')
    @app.task()
    def foo():
        print("this is from foo!")
    @app.task()
    def fail():
        raise ValueError("this is from fail!")
    if __name__ == '__main__':
        chain(group(chain(foo.si(), fail.si(), foo.si())), foo.si())()
# Expected Behavior
I'm not sure what the intended behavior of `chord_unlock` is here but I feel
that its current behavior atleast isn't consistent. The test case I've
provided above results in what I've included below in _Actual Behavior_ where
it gets stuck in an infinite loop. If I instead remove the call to `foo` that
is directly after `fail`, then the chord_unlock doesn't get stuck in a loop
and instead simply stops after the `fail` task has executed.
If I extend `fail` to, for example, the following
    @app.task()
    def fail():
        if not os.path.exists('foo.txt'):
           raise ValueError("this is from fail!")
       print("file does exist!")
then I can also do the test below to see what happens if I retry the failed
task:
    chain(group(chain(foo.si(), fail.si().set(task_id="123"), foo.si())), foo.si().set(task_id="456"))()
    sleep(10)
    open('foo.txt', 'a').close()
    fail.apply_async(task_id="123")
Here I would atleast expect the infinite loop to end, but instead I see that
the failed task now succeeds successfully (which is great) but the loop
continues. I'm not sure if I should also expect the tasks after the retried
task to now also run (they currently do not).
# Actual Behavior
    [2020-04-08 10:06:34,804: INFO/MainProcess] Connected to amqp://guest:**@rabbit:5672//
    [2020-04-08 10:06:34,816: INFO/MainProcess] mingle: searching for neighbors
    [2020-04-08 10:06:35,861: INFO/MainProcess] mingle: all alone
    [2020-04-08 10:06:35,876: INFO/MainProcess] celery@b7825f7f6305 ready.
    [2020-04-08 10:06:56,992: INFO/MainProcess] Received task: celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b]  ETA:[2020-04-08 10:06:57.952640+00:00]
    [2020-04-08 10:06:57,004: INFO/MainProcess] Received task: tasks.foo[a2d3f985-68c1-40d8-9a7e-e3d323824901]
    [2020-04-08 10:06:57,005: WARNING/ForkPoolWorker-2] this is from foo!
    [2020-04-08 10:06:57,031: INFO/MainProcess] Received task: tasks.fail[5a61ee80-e695-4cf7-b182-68de7d848bc7]
    [2020-04-08 10:06:57,057: INFO/ForkPoolWorker-2] Task tasks.foo[a2d3f985-68c1-40d8-9a7e-e3d323824901] succeeded in 0.05272179003804922s: None
    [2020-04-08 10:06:57,081: ERROR/ForkPoolWorker-3] Task tasks.fail[5a61ee80-e695-4cf7-b182-68de7d848bc7] raised unexpected: ValueError('this is from fail!')
    Traceback (most recent call last):
      File "/home/developer/celery/celery/app/trace.py", line 411, in trace_task
        R = retval = fun(*args, **kwargs)
      File "/home/developer/celery/celery/app/trace.py", line 680, in __protected_call__
        return self.run(*args, **kwargs)
      File "/home/developer/celery/tasks.py", line 13, in fail
        raise ValueError("this is from fail!")
    ValueError: this is from fail!
    [2020-04-08 10:06:59,908: INFO/MainProcess] Received task: celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b]  ETA:[2020-04-08 10:07:00.906229+00:00]
    [2020-04-08 10:06:59,908: INFO/ForkPoolWorker-2] Task celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b] retry: Retry in 1s
    [2020-04-08 10:07:01,914: INFO/ForkPoolWorker-2] Task celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b] retry: Retry in 1s
    [2020-04-08 10:07:01,920: INFO/MainProcess] Received task: celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b]  ETA:[2020-04-08 10:07:02.912826+00:00]
    [2020-04-08 10:07:03,914: INFO/ForkPoolWorker-2] Task celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b] retry: Retry in 1s
    [2020-04-08 10:07:03,915: INFO/MainProcess] Received task: celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b]  ETA:[2020-04-08 10:07:04.913285+00:00]
    [2020-04-08 10:07:05,876: INFO/ForkPoolWorker-2] Task celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b] retry: Retry in 1s
    [2020-04-08 10:07:05,877: INFO/MainProcess] Received task: celery.chord_unlock[1cceb33c-3e4f-401d-bc29-cc758b98222b]  ETA:[2020-04-08 10:07:06.875506+00:00]