fastcgi_params文件是FastCGI进程的一个参数配置文件，在安装Nginx后，会默认生
fastcgi_param指令指定放置PHP动态程序的主目录，也就是Sfastcgi_script_name前面
下面对上述代码的含义进行介绍。
fastcgi_cache_valid any 1m;
fastcgi_cache_valid 301 1d;
astcgi
astcgi_buffers 4 64k;
fastcgi_connect_timeout 300;
fastcgi_cache_path /usr/local/nginx/fastcgi_cache 1evels=1:2 keys_zone=TEST:10m
然后通过浏览器访问http://www.ixdba.net/index.html，默认会在浏览器显示“Welcome
这里在/usr/local/nginx/html目录下创建一个phpinfo.php文件，内容如下：
到此为止，Nginx+PHP已经配置完成。
/usr/local/nginx/sbin/nginx
接下来，启动Nginx服务。
通过location指令，将所有以php为后缀的文件都交给127.0.0.1:9000来处理，而这里
astcgi_busy_buffers_size 128k;
ast
astcql
cgi_buffer_size 64k;
inactive=5m;
www.Linuxidc.com
第1章
X
PDG
---
## Page 48
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
原理是完全一样的。
向代理功能来完成的。Nginx对Perl和JSP的支持在实现细节上可能有一定差别，但是实现
通过反向代理功能实现的。下面要讲述的Nginx对Perl和JSP的支持，就是通过Nginx的反
HTTP服务器和反向代理服务器，它不支持动态页面，所谓的Nginx对动态程序的支持都是
1.8
缓存一个小时，将301应答缓存1天，其他应答均缓存1分钟。
体情况而定。
效降低CPU的负载，并且防止502错误的发生。但是开启缓存也会引起很多问题，要视具
fastcgi_buffers的两倍。
以把这个值设置为“1616k”、“464k”等。
脚本所产生的页面大小的中间值，如果站点大部分脚本所产生的页面大小为256KB，那么可
是这并不是好方法，因为内存中的数据处理速度要快于硬盘。一般这个值应该为站点中PHP
果页面大小大于256KB，那么大于256KB的部分会缓存到fastcgi_temp指定的路径中，但
一个PHP脚本所产生的页面大小为256KB，那么会为其分配4个64KB的缓冲区来缓存；如
指定的缓冲区大小。
将使用1个64KB的缓冲区读取应答的第一部分（应答头），可以设置为fastcgi_buffers选项
接收FastCGI应答的超时时间。
后向FastCGI传送请求的超时时间。
和非活动删除时间。
28
.fastcgi_cache_valid用来指定应答代码的缓存时间。实例中的值表示将200和302应答
Nginx的安装这里不再讲述，假定Nginx的安装路径为/usr/local/nginx。
通过前面的介绍，可以对Nginx有了一个比较全面的认识：Nginx本身是一个静态的
fastcgi_cache表示开启FastCGI缓存并为其指定一个名称。开启缓存非常有用，可以有
fastcgi_temp_file_write_size表示在写人缓存文件时使用多大的数据块，默认值是
fastcgi_busy_buffers_size的默认值是fastcgi_buffers的两倍。
fastcgi_buffers指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答请求。如果
fastcgi_buffer_size用于指定读取FastCGI应答第一部分需要多大的缓冲区，这个值表示
fastcgi_read_timeout指定接收FastCGI应答的超时时间，这个值是已经完成两次握手后
fastcgi_send_timeout指定向FastCGI传送请求的超时时间，这个值是已经完成两次握手
fastcgi_connect_timeout指定连接到后端FastCGI的超时时间。
第一行代码是为FastCGI缓存指定一个文件路径、目录结构等级、关键字区域存储时间
实战Nginx与Perl、Java的安装与配置
第1篇
www.Linuxidc.com
Web应用篇
---
## Page 49
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
wrapper和socket绑定。下面通过一个shell脚本来完成这一系列工作。
实例，所以，操作系统必须要安装Perl程序以及相关模块。
1.8.1
chown nobody.nobody $nginxroot/nginx_fcgi.sh
ooxxuus pd-Bobog-xuBu/ebo/ooxxbus-d5og-xubu/ooxubusoqo
chown nobody.root $nginxroot/logs
start （)
nginxroot=/usr/local/nginx
#1/bin/bash
[root@localhost root]#more nginx-fcgi
仅仅有 wrapper文件是不够的，还需要一个脚本来创建 socket、启动wrapper 以及将
3.编写nginx-fcgi启动脚本
（3）安装IO-ALL模块
（2）安装IO模块
[root@localhost opt]# tar zxvf FCGI-0.71.tar.gz
（1）安装FCGI模块
可以从http:/search.cpan.org下载所需的相应模块，然后进行安装。
2.安装相关的系统支持模块
读者可以从http://www.nginx.eu/nginx-fcgi/上下载nginx-fcgi.txt文件，然后将其命名为
[rootalocalhost IO-ALL-0.39]#make instal1
[root@localhost IO-ALL-0.39]#make
[rootalocalhost opt]# tar
[root@localhost I0-1.25]#n
rootelocalhost
rootelocalhost
rootelocalhost
rootelocalhost
root@localhost
root@localhost
1.获取wrapper程序
rootalocalhost
rootelocalhost
root@localhost
root@localhost
logs/nginx-fcgi.pid
Perl（FastCGl）的安装
www.Linuxidc.com
IO-ALL-0.39]# perl Makefile.PL
opt]# cd IO-ALL-0.39
IO-1.25]# make
IO-1.25]# perl Makefile.PL
opt]#cd IO-1.25
opt]# tar -xvzf Io-1.25.tar.gz
FCGI-0.71】#
FCGI-0.71]#
-S
-xvzf I0-A11-0.39.tar.gz
make install
make
make
$nginxroot/logs/nginx-fcgi.sock">>$nginxroot/nginx
install
第1草
---
## Page 50
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
1.8.2为Nginx添加FCGI支持
fcgi进程：
文件sock，nobody为运行nginx_fcgi进程的用户，这个用户要和运行Nginx的用户一致。
30第1篇Web应用篇
配置完脚本后，将此文件放到/usr/local/nginx目录下，接着通过如下方式管理nginx-
1ocation -\.cgis{
修改Nginx配置文件，在server虚拟主机中添加如下配置：
[root@localhost
root@localhost
[root@localhost root]#chmod 755/usr/1ocal/nginx/nginx-fcgi.pl
在nginx-fcgi中，变量nginxroot用于指定Nginx的安装目录，nginx-fcgi.sock是生成的
esac
echo $*Usage: perl-cgi {start|stop|restart}*
）
start
stop
restart)
start
start)
stop
stop)
case $1 in
echo
rm $nginxroot/nginx_fcgi.sh 2>/dev/nul1
rm $nginxroot/1ogs/nginx-fcgi.sock 2>/dev/nul1
rm $nginxroot/1ogs/nginx-fcgi.pid 2>/dev/nu11
ki11$(cat Snginxroot/1ogs/nginx-fcgi.pid)
stop（）
echo "start nginx-fcgi done”
sudo
chmod 755 $nginxroot/nginx_fcgi.sh
fastcgi_pass
root
"stop nginx-fcgi done
exit1
www.Linuxidc.com
html
root]#/usr/local/nginx/nginx-fcgi start|stop|restart
unix:/usr/local/nginx/logs/nginx-fcgi.sock;
PDG
---
## Page 51
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
搭建成功。
1.8.3
“Sdocument_root”是虚拟主机的根目录，在这里是/usr/local/nginx/html目录。
IP Socket在高并发访问下比Unix Socket稳定，但Unix Socket速度要比IP Socket快。
REMOTE_ADDR = 125.76.159.197
REQUEST_METHOD=GET
SERVER_PORT= 8000
SERVER_PROTOCOL= HTTP/1.1
CGI/1.0 test script report
接着通过浏览器访问test.cgi文件，
echo
echo
set-f
#disable filename globbing
下面在/usr/local/nginx/html目录下创建一个test.cgi的文件。
/usr/1ocal/nginx/sbin/nginx
然后启动nginx服务。
/usr/local/nginx/nginx-fcgi start
所有配置工作完成后，即可启动服务了。首先启动nginx-fcgi进程，操作如下：
在这个location配置中，Nginx与FastCGI的通信方式为UnixSocket。根据经验，
ERVER_SOPTWARE=nginx/0.7.65
:ho
echo
cho
cho
echo
echo
echo
REMOTE_ADDR=$REMOTE_ADDR
REQUEST_METHOD=$REQUEST_METHOD
argc is $#.azgv is "$*"
o CGI/1.0 test script report:
"Content-type:text/plain; charset=iso-8859-1"
测试Nginx+Perl(FastCGI)
SERVERPORT
GATEWAY_INTERFACE = $GATEWAY_INTERFACE
SERVER_NAME=$SERVER NAME
SERVER_SOFTWARE-$SERVER_SOFTWARE
include
fastcgi_param
fastcgi_index
www.Linuxidc.com
fastcgi_params;
SCRIPT FILENAME
index.cgi;
，如果显示与下面类似的信息，表明Nginx+Perl环境
$document_root$fastcgi_script_name;
PDG
---
## Page 52
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
端口为8080。Nginx相关配置代码如下：
但是通过Nginx来处理静态页面要比通过Tomcat处理在性能方面好很多。
处理动态请求时性能很低，而在处理静态页面更加脆弱。虽然Tomcat的最新版本支持epoll，
点，耦合度的降低，可以使Nginx与Java服务器的相互影响降到最低。
能通过自身的反向代理功能来实现与Java应用服务器的支持。但这恰恰是Nginx的一个优
用服务器打交道。与Apache相比，Nginx在配合Java应用服务器方面，耦合度很低，它只
Apache+resin等都可以实现对Java应用的支持。Apache一般采用一个内置模块来和Java应
1.8.4搭建Nginx+Java环境
32
这里假定Tomcat服务器的IP地址为192.168.12.130，同时Tomcat服务器开放的服务器
下面通过两个配置实例分别讲述这两种实现Nginx与Tomcat耦合的方式。
口将所有请求都交给后端的Tomcat服务器处理，同时利用Nginx自身的负载均衡功能
口将静态页面请求交给Nginx，动态请求交给后端Tomcat处理。
Nginx可以通过以下两种方式来实现与Tomcat的耦合：
接下来通过Nginx+Tomcat的实例来讲解Nginx对Java的支持。Tomcat在高并发环境下
1.动态页面与静态页面分离的实例
Apache对Java的支持很灵活，它们的结合度也很高，例如Apache+Tomcat和
location-(\.jap)|（\.do）s(
进行多台Tomcat服务器的负载均衡。
alias /web/www/html/img/;
root/web/www/html;
server_name www.ixdba.net;
listen 80;
Www.Linuxidc.com
proxy_busy_buffers_size 64k;
proxy_buffer_size 4k;
proxy_read_timeout 90;
proxy_send_timeout 90;
proxy_connect_timeout 90;
client
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header Host $host;
proxy_pass http://192.168.12.130:8080;
PDG
---
## Page 53
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
http://192.168.12.130:8080/jsp 的形式。
代理路径不能含有地址链接，也就是不能写成http://192.168.12.130:8080/，或者类似
do结尾的文件都交给Tomcat服务器的8080端口来处理，即http://192.168.12.130:8080。
需要特别注意的是，在location指令中使用正则表达式后，proxy_pass后面的
location/{
location~*\. (jpg|gif |png|swf|fiv|wma wmv |asf|mp3|mmf |zip|rar)$ {
server{
upstream mytomcats {
Nginx的相关配置代码如下：
这里假定有3台Tomcat服务器，分别开放不同的端口，地址如下：
2.多个Tomcat负载均衡的实例
在这个实例中，首先定义了一个虚拟主机www.ixdba.net，然后通过location指令将/web/
server_name www.ixdba.net;
listen 80;
server 192.168.12.133:8090;
server 192.168.12.131:8000;
192.168.12.133:8090
192.168.12.131:8000
Berver
www.Linuxidc.com
proxy_buffers 4 32k;
proxy_buffer_size 4k;
proxy_connect_timeout 90;
proxy_set_header X-Real-IP $remote_addr:
proxy_redirect
proxy_pass http://mytomcats;
192.168.12.132:8080;
proxy_temp_file_write_size 64k;
_send_timeout
X-Forwarded-For Sproxy_add_x_forwarded_for;
off;
90;
90;
。在location指令不使用正则表达式时，没有此限制。
PDG
---
## Page 54
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
Web应用系统，
熟练地配置和管理Nginx服务器。
Java、Perl整合的过程。通过本章的学习，读者能够对Nginx有一个清晰的认识，并且可以
在性能优化方面的一些经验和技巧，并通过实例分别演示了Nginx与PHP整合，Nginx和
1.9本章小结
是不支持的。
最后将其他所有请求全部交给负载均衡组来处理。
机：然后通过location指令以正则表达式的方式将指定类型的文件全部交给Nginx去处理
是上面指定的3台Tomcat服务器：接着通过server指令定义一个www.ixdba.net的虚拟主
随着Nginx知识的普及，相信Nginx会越来越受欢迎。如果你还没有使用Nginx来搭建
本章主要介绍了对高性能HTTP服务器Nginx的安装、配置、管理和使用，以及Nginx
这里还有一点需要注意，如果在location指令使用正则表达式后再用alias指令，Nginx
在这个实例中，先通过upstream定义一个负载均衡组，组名为mytomcats，组的成员就
www.Linuxidc.com
，不妨现在尝试一下。
proxy_temp_file_write_size 64k;
君
PDG
---
## Page 55
Linux公社（www.LinuxIDC.com）是专业的Linux系统门户网站，实时发布最新Linux资讯。
续丰富和加强。下面是Varnish的一些特点。
Varnish的主要特点。现在的Varnish总共代码量不大，虽然功能在不断改进，但是还需要继
2.1.2
Solaris和Linux2.6内核上运行。本章主要介绍Varnish在Linux上的应用。
性能比以前更好，这是Varmish最成功的应用案例。目前，Varmish可以在FreeBSD6.0/7.0、
设计架构。
操作系统可以得知这些情况，所以这部分工作应该交给操作系统处理，这就是VarnishCache
取装置，因此SquidCache自行处理数据替换的架构不可能得知这些情况而做到最佳化，但
的内存除了主存外，还包括CPU内的L1、L2，有的还包括L3快取，硬盘上也有自己的快
的硬件体系配合紧密。在1975年时，储存媒介只有两种：内存与硬盘。而现在计算机系统
HenningKamp是FreeBSD核心的开发人员之一。Varnish采用全新的软件体系机构，和现在
2.1.1Varnish概述
2.1
实践经验贯穿其中。相信阅读完本章，读者就能够熟练使用Varnish了。
展起来。本章将详细介绍Varnish的安装、配置、管理和性能优化等几个方面，并将理论与
优点，很多大型的运营网站都开始尝试用Varnish来替换Squid，这些都促使Varnish迅速发
HTTP加速器，与传统的Squid相比，Varnish具有性能更高、速度更快、管理更方便等诸多