the connection is saved by the SCM in an internal list, which is used for
sending and receiving service commands to the right process. The SCM
sends a service-start command each time it starts a service the process owns.
For each start command it receives, the StartServiceCtrlDispatcher function
creates a thread, called a service thread, to invoke the starting service’s entry
point (Service Main) and implement the command loop for the service.
StartServiceCtrlDispatcher waits indefinitely for commands from the SCM
and returns control to the process’s main function only when all the process’s
services have stopped, allowing the service process to clean up resources
before exiting.
A service entry point’s (ServiceMain) first action is to call the
RegisterServiceCtrlHandler function. This function receives and stores a
pointer to a function, called the control handler, which the service
implements to handle various commands it receives from the SCM.
RegisterServiceCtrlHandler doesn’t communicate with the SCM, but it stores
the function in local process memory for the StartServiceCtrlDispatcher
function. The service entry point continues initializing the service, which can
include allocating memory, creating communications end points, and reading
private configuration data from the registry. As explained earlier, a
convention most services follow is to store their parameters under a subkey
of their service registry key, named Parameters.
While the entry point is initializing the service, it must periodically send
status messages, using the SetServiceStatus function, to the SCM indicating
how the service’s startup is progressing. After the entry point finishes
initialization (the service indicates this to the SCM through the
SERVICE_RUNNING status), a service thread usually sits in a loop waiting
for requests from client applications. For example, a web server would
initialize a TCP listen socket and wait for inbound HTTP connection
requests.
A service process’s main thread, which executes in the
StartServiceCtrlDispatcher function, receives SCM commands directed at
services in the process and invokes the target service’s control handler
function (stored by RegisterServiceCtrlHandler). SCM commands include
stop, pause, resume, interrogate, and shutdown or application-defined
commands. Figure 10-8 shows the internal organization of a service process
—the main thread and the service thread that make up a process hosting one
service.
Figure 10-8 Inside a service process.
Service characteristics
The SCM stores each characteristic as a value in the service’s registry key.
Figure 10-9 shows an example of a service registry key.
Figure 10-9 Example of a service registry key.
Table 10-7 lists all the service characteristics, many of which also apply to
device drivers. (Not every characteristic applies to every type of service or
device driver.)
Table 10-7 Service and Driver Registry Parameters
V
al
ue 
Se
tti
ng
Value Name
Value Setting Description
St
art
SERVICE_BOO
T_START (0x0)
Winload preloads the driver so that it is in 
memory during the boot. These drivers are 
initialized just prior to 
SERVICE_SYSTEM_START drivers.
SERVICE_SYST
EM_START 
(0x1)
The driver loads and initializes during kernel 
initialization after SERVICE_BOOT_START 
drivers have initialized.
SERVICE_AUT
O_START (0x2)
The SCM starts the driver or service after the 
SCM process, Services.exe, starts.
SERVICE_DEM
AND_START 
(0x3)
The SCM starts the driver or service on 
demand (when a client calls StartService on it, 
it is trigger started, or when another starting 
service is dependent on it.)
SERVICE_DISA
BLED (0x4)
The driver or service cannot be loaded or 
initialized.
Er
ro
rC
on
tro
l
SERVICE_ERR
OR_IGNORE 
(0x0)
Any error the driver or service returns is 
ignored, and no warning is logged or 
displayed.
SERVICE_ERR
OR_NORMAL 
(0x1)
If the driver or service reports an error, an 
event log message is written.
SERVICE_ERR
OR_SEVERE 
(0x2)
If the driver or service returns an error and 
last known good isn’t being used, reboot into 
last known good; otherwise, log an event 
message.
SERVICE_ERR
If the driver or service returns an error and 
OR_CRITICAL 
(0x3)
last known good isn’t being used, reboot into 
last known good; otherwise, log an event 
message.
Ty
pe
SERVICE_KER
NEL_DRIVER 
(0x1)
Device driver.
SERVICE_FILE
_SYSTEM_DRI
VER (0x2)
Kernel-mode file system driver.
SERVICE_ADA
PTER (0x4)
Obsolete.
SERVICE_REC
OGNIZER_DRI
VER (0x8)
File system recognizer driver.
SERVICE_WIN3
2_OWN_PROCE
SS (0x10)
The service runs in a process that hosts only 
one service.
SERVICE_WIN3
2_SHARE_PRO
CESS (0x20)
The service runs in a process that hosts 
multiple services.
SERVICE_USE
R_OWN_PROC
ESS (0x50)
The service runs with the security token of the 
logged-in user in its own process.
SERVICE_USE
R_SHARE_PRO
CESS (0x60)
The service runs with the security token of the 
logged-in user in a process that hosts multiple 
services.
SERVICE_INTE
RACTIVE_PRO
CESS (0x100)
The service is allowed to display windows on 
the console and receive user input, but only on 
the console session (0) to prevent interacting 
with user/console applications on other 
sessions. This option is deprecated.
Gr
ou
p
Group name
The driver or service initializes when its 
group is initialized.
Ta
g
Tag number
The specified location in a group initialization 
order. This parameter doesn’t apply to 
services.
Im
ag
eP
at
h
Path to the 
service or driver 
executable file
If ImagePath isn’t specified, the I/O manager 
looks for drivers in 
%SystemRoot%\System32\Drivers. Required 
for Windows services.
D
ep
en
d
O
n
Gr
ou
p
Group name
The driver or service won’t load unless a 
driver or service from the specified group 
loads.
D
ep
en
d
O
nS
Service name
The service won’t load until after the 
specified service loads. This parameter 
doesn’t apply to device drivers or services 
with a start type different than 
SERVICE_AUTO_START or 
SERVICE_DEMAND_START.
er
vi
ce
O
bj
ec
tN
a
m
e
Usually 
LocalSystem, but 
it can be an 
account name, 
such as 
.\Administrator
Specifies the account in which the service will 
run. If ObjectName isn’t specified, 
LocalSystem is the account used. This 
parameter doesn’t apply to device drivers.
Di
sp
la
y
N
a
m
e
Name of the 
service
The service application shows services by this 
name. If no name is specified, the name of the 
service’s registry key becomes its name.
D
el
et
eF
la
g
0 or 1 (TRUE or 
FALSE)
Temporary flag set by the SCM when a 
service is marked to be deleted.
D
es
cri
pti
on
Description of 
service
Up to 32,767-byte description of the service.
Fa
ilu
Description of 
actions the SCM 
Failure actions include restarting the service 
process, rebooting the system, and running a 
re
A
cti
on
s
should take when 
the service 
process exits 
unexpectedly
specified program. This value doesn’t apply to 
drivers.
Fa
ilu
re
C
o
m
m
an
d
Program 
command line
The SCM reads this value only if 
FailureActions specifies that a program 
should execute upon service failure. This 
value doesn’t apply to drivers.
D
el
ay
ed
A
ut
oS
tar
t
0 or 1 (TRUE or 
FALSE)
Tells the SCM to start this service after a 
certain delay has passed since the SCM was 
started. This reduces the number of services 
starting simultaneously during startup.
Pr
es
hu
td
o
w
nT
im
eo
ut
Timeout in 
milliseconds
This value allows services to override the 
default preshutdown notification timeout of 
180 seconds. After this timeout, the SCM 
performs shutdown actions on the service if it 
has not yet responded.
Se
rvi
ce
Si
dT
yp
e
SERVICE_SID_T
YPE_NONE 
(0x0)
Backward-compatibility setting.
SERVICE_SID_T
YPE_UNRESTRI
CTED (0x1)
The SCM adds the service SID as a group 
owner to the service process’s token when it 
is created.
SERVICE_SID_T
YPE_RESTRICT
ED (0x3)
The SCM runs the service with a write-
restricted token, adding the service SID to the 
restricted SID list of the service process, 
along with the world, logon, and write-
restricted SIDs.
Al
ias
String
Name of the service’s alias.
Re
qu
ire
dP
riv
ile
ge
s