### Service Control Manager (SCM) and Service Process Management

The Service Control Manager (SCM) maintains an internal list of connections, which it uses to send and receive service commands to the appropriate processes. Each time a service is started, the SCM sends a service-start command to the process that owns the service.

#### Service Thread Creation
Upon receiving a start command, the `StartServiceCtrlDispatcher` function creates a new thread, known as a service thread, to invoke the service's entry point (Service Main) and handle the command loop for the service. The `StartServiceCtrlDispatcher` function waits indefinitely for commands from the SCM and returns control to the process’s main function only when all services in the process have stopped. This allows the service process to clean up resources before exiting.

#### Service Entry Point
The first action of a service entry point (ServiceMain) is to call the `RegisterServiceCtrlHandler` function. This function receives and stores a pointer to a function, called the control handler, which the service implements to handle various commands from the SCM. The `RegisterServiceCtrlHandler` function does not communicate directly with the SCM; instead, it stores the function in local process memory for use by the `StartServiceCtrlDispatcher` function.

The service entry point then continues to initialize the service, which may include allocating memory, creating communication endpoints, and reading private configuration data from the registry. A common convention is to store service parameters under a subkey of the service registry key, named `Parameters`.

During initialization, the service must periodically send status messages to the SCM using the `SetServiceStatus` function, indicating the progress of the service startup. Once initialization is complete, the service indicates this to the SCM through the `SERVICE_RUNNING` status. The service thread then typically enters a loop, waiting for requests from client applications. For example, a web server would initialize a TCP listen socket and wait for inbound HTTP connection requests.

#### Command Handling
The main thread of a service process, which executes within the `StartServiceCtrlDispatcher` function, receives SCM commands directed at the services in the process and invokes the target service’s control handler function (stored by `RegisterServiceCtrlHandler`). SCM commands include stop, pause, resume, interrogate, and shutdown, as well as application-defined commands.

### Internal Organization of a Service Process
A service process consists of a main thread and one or more service threads. The main thread manages the interaction with the SCM, while the service threads handle the actual service operations. Figure 10-8 illustrates the internal organization of a service process.

### Service Characteristics
The SCM stores each characteristic of a service as a value in the service’s registry key. Figure 10-9 provides an example of a service registry key.

#### Table 10-7: Service and Driver Registry Parameters

| Value Setting | Value Name | Description |
|---------------|------------|-------------|
| **Start** | `SERVICE_BOOT_START (0x0)` | Winload preloads the driver so that it is in memory during the boot. These drivers are initialized just prior to `SERVICE_SYSTEM_START` drivers. |
| | `SERVICE_SYSTEM_START (0x1)` | The driver loads and initializes during kernel initialization after `SERVICE_BOOT_START` drivers have initialized. |
| | `SERVICE_AUTO_START (0x2)` | The SCM starts the driver or service after the SCM process, `Services.exe`, starts. |
| | `SERVICE_DEMAND_START (0x3)` | The SCM starts the driver or service on demand (when a client calls `StartService` on it, it is trigger started, or when another starting service is dependent on it). |
| | `SERVICE_DISABLED (0x4)` | The driver or service cannot be loaded or initialized. |
| **ErrorControl** | `SERVICE_ERROR_IGNORE (0x0)` | Any error the driver or service returns is ignored, and no warning is logged or displayed. |
| | `SERVICE_ERROR_NORMAL (0x1)` | If the driver or service reports an error, an event log message is written. |
| | `SERVICE_ERROR_SEVERE (0x2)` | If the driver or service returns an error and last known good isn’t being used, reboot into last known good; otherwise, log an event message. |
| | `SERVICE_ERROR_CRITICAL (0x3)` | If the driver or service returns an error and last known good isn’t being used, reboot into last known good; otherwise, log an event message. |
| **Type** | `SERVICE_KERNEL_DRIVER (0x1)` | Device driver. |
| | `SERVICE_FILE_SYSTEM_DRIVER (0x2)` | Kernel-mode file system driver. |
| | `SERVICE_ADAPTER (0x4)` | Obsolete. |
| | `SERVICE_RECOGNIZER_DRIVER (0x8)` | File system recognizer driver. |
| | `SERVICE_WIN32_OWN_PROCESS (0x10)` | The service runs in a process that hosts only one service. |
| | `SERVICE_WIN32_SHARE_PROCESS (0x20)` | The service runs in a process that hosts multiple services. |
| | `SERVICE_USER_OWN_PROCESS (0x50)` | The service runs with the security token of the logged-in user in its own process. |
| | `SERVICE_USER_SHARE_PROCESS (0x60)` | The service runs with the security token of the logged-in user in a process that hosts multiple services. |
| | `SERVICE_INTERACTIVE_PROCESS (0x100)` | The service is allowed to display windows on the console and receive user input, but only on the console session (0) to prevent interacting with user/console applications on other sessions. This option is deprecated. |
| **Group** | Group name | The driver or service initializes when its group is initialized. |
| **Tag** | Tag number | The specified location in a group initialization order. This parameter doesn’t apply to services. |
| **ImagePath** | Path to the service or driver executable file | If `ImagePath` isn’t specified, the I/O manager looks for drivers in `%SystemRoot%\System32\Drivers`. Required for Windows services. |
| **DependOnGroup** | Group name | The driver or service won’t load unless a driver or service from the specified group loads. |
| **DependOnService** | Service name | The service won’t load until after the specified service loads. This parameter doesn’t apply to device drivers or services with a start type different than `SERVICE_AUTO_START` or `SERVICE_DEMAND_START`. |
| **ObjectName** | Usually `LocalSystem`, but it can be an account name, such as `.\Administrator` | Specifies the account in which the service will run. If `ObjectName` isn’t specified, `LocalSystem` is the account used. This parameter doesn’t apply to device drivers. |
| **DisplayName** | Name of the service | The service application shows services by this name. If no name is specified, the name of the service’s registry key becomes its name. |
| **DeleteFlag** | 0 or 1 (TRUE or FALSE) | Temporary flag set by the SCM when a service is marked to be deleted. |
| **Description** | Description of service | Up to 32,767-byte description of the service. |
| **FailureActions** | Description of actions the SCM should take when the service process exits unexpectedly | Failure actions include restarting the service process, rebooting the system, and running a specified program. This value doesn’t apply to drivers. |
| **FailureCommand** | Program command line | The SCM reads this value only if `FailureActions` specifies that a program should execute upon service failure. This value doesn’t apply to drivers. |
| **DelayedAutoStart** | 0 or 1 (TRUE or FALSE) | Tells the SCM to start this service after a certain delay has passed since the SCM was started. This reduces the number of services starting simultaneously during startup. |
| **PreshutdownTimeout** | Timeout in milliseconds | This value allows services to override the default preshutdown notification timeout of 180 seconds. After this timeout, the SCM performs shutdown actions on the service if it has not yet responded. |
| **ServiceSidType** | `SERVICE_SID_TYPE_NONE (0x0)` | Backward-compatibility setting. |
| | `SERVICE_SID_TYPE_UNRESTRICTED (0x1)` | The SCM adds the service SID as a group owner to the service process’s token when it is created. |
| | `SERVICE_SID_TYPE_RESTRICTED (0x3)` | The SCM runs the service with a write-restricted token, adding the service SID to the restricted SID list of the service process, along with the world, logon, and write-restricted SIDs. |
| **Alias** | String | Name of the service’s alias. |
| **RequiredPrivileges** | List of required privileges | Specifies the privileges required by the service. |

This table provides a comprehensive overview of the various characteristics and their settings for both services and device drivers.