title:AppPrint: Automatic Fingerprinting of Mobile Applications in Network
Traffic
author:Stanislav Miskovic and
Gene Moo Lee and
Yong Liao and
Mario Baldi
AppPrint: Automatic Fingerprinting of Mobile
Applications in Network Traﬃc
Stanislav Miskovic1(B), Gene Moo Lee3, Yong Liao2, and Mario Baldi2
1 Symantec Corporation, Sunnyvale, CA 94086, USA
Stanislav PI:EMAIL, PI:EMAIL
2 Narus, Inc., Sunnyvale, CA 94086, USA
3 University of Texas at Austin, Austin, TX 78712, USA
Abstract. Increased adoption of mobile devices introduces a new spin
to Internet: mobile apps are becoming a key source of user traﬃc. Sur-
prisingly, service providers and enterprises are largely unprepared for
this change as they increasingly lose understanding of their traﬃc and
fail to persistently identify individual apps. App traﬃc simply appears
no diﬀerent than any other HTTP data exchange. This raises a number
of concerns for security and network management. In this paper, we pro-
pose AppPrint, a system that learns ﬁngerprints of mobile apps via com-
prehensive traﬃc observations. We show that these ﬁngerprints identify
apps even in small traﬃc samples where app identity cannot be explicitly
revealed in any individual traﬃc ﬂows. This unique AppPrint feature is
crucial because explicit app identiﬁers are extremely scarce, leading to
a very limited characterization coverage of the existing approaches. In
fact, our experiments on a nation-wide dataset from a major cellular
provider show that AppPrint signiﬁcantly outperforms any existing app
identiﬁcation. Moreover, the proposed system is robust to the lack of
key app-identiﬁcation sources, i.e., the traﬃc related to ads and ana-
lytic services commonly leveraged by the state-of-the-art identiﬁcation
methods.
1 Introduction
Mobile apps are expected to dominatex Internet in the post-PC era [9]. Run-
ning on ubiquitously adopted smartphones and tablets, mobile apps support
users in numerous daily activities. This attracts both individuals and enterprise
users, opening a number of new opportunities. However, managing this relatively
young ecosystem is still in its infancy. Even basic identiﬁcation of hundreds of
thousands of apps existing in Internet traﬃc is a challenge. This has dramatic
implications on security and network management because it entails that enter-
prises and network operators cannot impose any meaningful policies on mobile
users. Similarly, being unable to distinguish the traﬃc of individual apps makes
isolation of malicious or infected apps diﬃcult, if at all possible.
The key challenge we address is that mobile apps cannot be presently distin-
guished at many levels. First, the apps predominantly communicate with their
Done under the Narus Fellow Research Program with equal author contributions.
c(cid:2) Springer International Publishing Switzerland 2015
J. Mirkovic and Y. Liu (Eds.): PAM 2015, LNCS 8995, pp. 57–69, 2015.
DOI: 10.1007/978-3-319-15509-8 5
58
S. Miskovic et al.
host services via HTTP [14], which makes protocol- or port-based identiﬁca-
tion [10] ineﬀective. Even deep packet inspection largely fails because app traﬃc
may not contain any explicit app identiﬁers, such as app names. In fact, we
measured that these identiﬁers exist only in 1 % of mobile traﬃc, while the rest
is completely unknown to any characterization. Also, a widespread use of cloud
and CDN (content delivery network) services invalidates any identiﬁcation based
on service-host IP addresses or domain names.
In this paper, we present AppPrint, a system capable of identifying the apps
at a granularity of arbitrarily small traﬃc samples. This means that app identiﬁ-
cation becomes much more frequent and its traﬃc coverage increases. In contrast
to the state-of-the-art approaches that solely rely on temporally sparse occur-
rences of explicit app identiﬁers [2,3,6,8,11,14], AppPrint can identify the most
likely apps even when such identiﬁers are not present. For example, an operator
of the AppPrint system could slot traﬃc in intervals as small as 10 s and identify
the most likely apps for each slot and for all users in it with a high conﬁdence.
This is achievable due to two key AppPrint novelties: (i) learning elaborate app
ﬁngerprints from a priori limited app-identiﬁcation data, and (ii) creating app
ﬁngerprints from features that may span multiple diﬀerent traﬃc ﬂows.
Speciﬁcally, we create app ﬁngerprints as collections of tokens, e.g., any
generic key-value pairs in URLs or any substrings of HTTP header ﬁelds, such
as User-Agents or Cookies. Our intuition is that such tokens would be represen-
tative of their apps either individually or in groups; either by parameter names
(keys) or parameter values. For example, an app can be designed in a speciﬁc
development framework which makes the names of app parameters unique (i.e.,
app-identifying). Similarly, if several apps are developed on the same framework,
their parameter values as well as the occurrences of speciﬁc parameters across
ﬂows could be suﬃciently unique to identify each app. Leveraging this intuition
enables AppPrint to characterize the traﬃc even when no explicit app identi-
ﬁers are present. We achieve this by measuring the highest token-set similarity
between an observed set of ﬂows and readily learned app ﬁngerprints.
One of the key contributions of AppPrint is its continual learning and reﬁne-
ment of app ﬁngerprints. While the system does require some seeding with
explicit app identiﬁers, it can expand this knowledge towards discovering many
new ﬁngerprints in the previously uncharacterised ﬂows. Speciﬁcally, AppPrint
can be bootstrapped by a single app identiﬁer present in some particular ﬂows
(e.g., embedded advertisement ﬂows), and expand that knowledge to ﬁngerprint-
ing many other types of ﬂows (such as social networking ﬂows, audio stream-
ing ﬂows, etc.). We achieve this by eﬀectively measuring collocation persistence
between the seeding tokens (e.g., explicit app identiﬁers) and other tokens in the
neighboring ﬂows.
Another key feature of AppPrint is independence of its ﬁngerprint learning
and app identiﬁcation processes. This is crucial for achieving a broad character-
ization coverage. Speciﬁcally, while the learning requires some seeding, the iden-
tiﬁcation process has no such constraints. It can apply any ﬁngerprints learned
at any time (even oﬄine) towards revealing the most likely apps “hidden” in the
traﬃc. We developed an algorithm that facilitates this separation and named it
MAP-SCORE.
AppPrint: Automatic Fingerprinting of Mobile Applications
59
We evaluate AppPrint on a week-long nationwide traﬃc trace from a major
cellular provider in the United States. In this real environment, AppPrint oﬀers
an order of magnitude improvement over the state-of-the-art solutions in terms
of app identiﬁcation coverage.
The rest of the paper is organized as follows. Section 2 overviews the related
work. Section 3 introduces AppPrint, while Sect. 4 evaluates the proposed meth-
ods on the lab traﬃc that contains app-identiﬁcation ground truth, as well as
on the real ISP traﬃc. Section 5 summarizes this work.
2 Related Work
A number of papers have identiﬁed that network administrators increasingly
lose visibility in their traﬃc due to mobile apps being indistinguishable from
generic HTTP communications [4,5,13]. Hence, identifying apps via common
approaches of protocol identiﬁcation or port numbers is no longer eﬀective. This
situation calls for a new paradigm.
The most straightforward way to identify apps is to look for app names in
HTTP User-Agent ﬁelds [14]. However, this has serious limitations on the widely
accepted Android platform where app developers do not follow any conventions
in creating their user agents [3], i.e., the user agents may not contain app names.
Another approach is to look for app identiﬁers in auxiliary services embedded
in the apps, such as ads or analytics (A&A) [2,3,11]. The embedding of such
services is common, especially in free apps [7,11,13]. However, the ﬂow coverage
of such identiﬁcation is very low, because A&A ﬂows are present in only a small
fraction of traﬃc - especially for paid apps.
Dai et al. [3] improved app identiﬁcation capabilities by developing a system
that automatically runs Android apps and devises app ﬁngerprints from the
generated traﬃc. This approach can be eﬀective, but it would be diﬃcult to
scale it to the size of current app markets with hundreds of thousands of apps. It
would be even more diﬃcult to obtain ﬁngerprints that are representative of true
human app usage, given that intelligent tools for interaction with diverse app UIs
are still lacking. Thus, the obtained ﬁngerprints may not be comprehensive or
representative. For example, it would be very diﬃcult for this system to produce
representative signatures for apps that require user registration or logins, e.g.,
the popular Android Facebook app.
Choi et al. [2] proposed installing a monitoring agent in mobile devices. The
agent helps in building ground truth knowledge for app identiﬁcation. With
the data collected in a campus network, the authors generated classiﬁers based
on HTTP user-agent ﬁelds, HTTP hostname ﬁelds, and IP subnets. However,
installing such agents on user devices may be challenging due to privacy concerns.
Besides, deploying the agent at a large scale has many other practical challenges.
AppPrint shares only the initial sources of app-identiﬁcation knowledge (e.g.,
User-Agent ﬁelds or A&A services) with the existing approaches. These sources
are only seeds that help AppPrint to learn and apply its ﬁngerprints towards
characterization of a much wider span of traﬃc ﬂows.
60
S. Miskovic et al.
3 Methodology
In this section, we introduce AppPrint by ﬁrst providing some basic intuition
behind its design. We then describe its two core algorithms: (i) MAP, a method
for discovery and learning of new app ﬁngerprints, and (ii) SCORE, a method for
identiﬁcation of apps in the observed traﬃc (based on MAP’s app ﬁngerprints).
3.1 AppPrint Overview
We are motivated by the fact that existing app identiﬁcation approaches
[2,3,6,8,11,14] characterize only a small fraction of mobile traﬃc. AppPrint
tries to increase the characterization coverage by learning a priori inconclusive
features that may exist in the traﬃc and prove to have app identifying properties.
We focus on two types of features: (i) tokens that can be speciﬁc strings, or
parameter names, or parameter values in HTTP headers, and (ii) traﬃc ﬂow
groups that can jointly point to an app identity. While it is a priori unknown
whether useful instances of these features exist in the traﬃc, there is a number
of reasons for them to be present. For example, app developers commonly col-
lect statistics about their apps. Thus, there must be a way to for the apps to
report back to their developers via some speciﬁc formatting of data. As an illus-
tration, many apps use Apsalar library [1] that employs “i=” URL parameter
to report executable ﬁlenames of active apps. This is an app-identifying token.
Similarly, apps may require exchange of very speciﬁc parameter names to ensure
proper execution. For example, Angry Birds app uses a unique “u audio=” URL
parameter to conﬁgure sound volume.
Flow grouping is another key source of AppPrint’s intelligence. The grouping
is invaluable when individual traﬃc ﬂows do not reveal any app-speciﬁc tokens.
We learned that mobile apps do exchange such generic traﬃc, e.g., in order to
transfer generic web objects such as pictures and audio. In such cases, AppPrint
tries to propagate app identiﬁcation from the identiﬁable ﬂows to the ones that
cannot be characterized. Moreover, even when none of the grouped ﬂows contains
explicit app identiﬁers, the tokens dispersed over several ﬂows may jointly reveal
app identity.
3.2
Initial App Identiﬁcation Knowledge
Initial seeding knowledge for AppPrint can be obtained by many means. While
such bootstrapping is neither the focus nor the contribution of this paper, we
describe some aspects of it for completeness.
The values of explicit app identiﬁers are publicly available in app markets
and can be easily collected for the system’s bootstrap. We focus on two most
popular mobile app markets: Google Play (Android) and Apple’s iTunes App
Store (iOS). To this end, we developed crawlers that gather the identiﬁers for all
apps existing in these markets. For Android apps, we collect app names (such
as TuneIn Radio) and app package denominators (such as tunein.player); for
iOS apps, we crawled app names and unique 9-digit app IDs (such as 319295332).
AppPrint: Automatic Fingerprinting of Mobile Applications
61
Fig. 1. App identiﬁer “TuneIn Radio” included in the HTTP User-Agent ﬁeld.
We veriﬁed that such tokens do appear in some URL parameters, User-Agent
ﬁelds, substrings of HTTP referer ﬁelds, etc. Also, the tokens are employed by
various services embedded in mobile apps, such as advertisements and analytics
(A&A). An example of an app name included in the User-Agent ﬁeld is illustrated
in Fig. 1.
3.3 MAP: Auto Fingerprint Generation
The MAP algorithm collects statistics about tokens, thus eﬀectively serving as a
knowledge repository of AppPrint. It continually self-learns and reﬁnes app ﬁn-
gerprints discovered in the traﬃc by means of ﬂow grouping. An app ﬁngerprint
is a set of one or more tokens that strongly identify an app. MAP keeps a tally
of all individual tokens observed in the traﬃc, as well as the apps to which each
token may be attributed. Subsequently, if a token proves to be predominantly
associated to an app, it becomes a ﬁngerprint component of that app. Based on
this principle, we next develop the MAP algorithm.
Flow grouping: Flow grouping is our technique to address the issue of incon-
clusive data, i.e., the majority of traﬃc that does not contain any explicit or
readily known app identiﬁers. The idea is to ﬁrst group the ﬂows that are tem-
porally close to each other. We perform the grouping around the instances of
ﬂows which contain known or readily learned strong app identiﬁers. Then, we
let the ﬂow whose app identity can be determined suggest or propagate that
identity to all other tokens in its ﬂow group - even the tokens in the neighbor-
ing (unidentiﬁable) ﬂows. Consequently, in diﬀerent instances of ﬂow grouping,
a token may be suggestively associated to diﬀerent apps. To identify the most
likely app, we consider all tokens and their association in the observed ﬂows and
let the SCORE algorithm decide.
The key challenge of ﬂow grouping is that individual instances of ﬂow groups
may not be suﬃcient to learn true token-to-app associations. Scenarios like app
multitasking and device tethering may cause ﬂows of many apps to appear close
in time, thus inducing noise in the grouping process. To eliminate such noise,
one could train AppPrint in a controlled environment and ensure grouping of
ﬂows that belong to individual apps. We adopt a diﬀerent strategy that is easier
to scale, especially in larger networks such as cellular provider networks, uni-
versity campuses or enterprise environments. We thus focus on observations of
numerous ﬂow groups generated by large user populations during AppPrint’s
activity. Then, given that users use diﬀerent apps and run them at diﬀerent
times, the noise should disperse and become easily identiﬁable: The tokens that
62
S. Miskovic et al.
TG
TG
TG
TG
fx 
1
g(fx 
1) 
fx 
2
g(fx 
2) 
Fig. 2. MAP ﬂow grouping.
persistently collocate with speciﬁc apps become ﬁngerprint tokens, while other
tokens that associate equally likely with many apps get disregarded. We will
verify this approach experimentally in Sect. 4.
An illustration of ﬂow grouping is given in Fig. 2: Flow group g(f i
x) is formed
around an identiﬁable anchor ﬂow f i
x, which contains an explicit or strong app
identiﬁer. Here, parameter i designates i-th ﬂow grouping for a given mobile user.
The grouping is based on two criteria: (i) the ﬂows must originate from the same
source (source IP address), and (ii) the ﬂows that cannot be characterized must
be less than TG seconds away from the anchoring ﬂow f i
x. TG is a conﬁgurable
parameter addressed in Sect. 4. This ensures strong time and source locality