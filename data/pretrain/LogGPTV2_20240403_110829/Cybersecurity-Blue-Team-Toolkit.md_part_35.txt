tool. Type **help** at the default prompt for a list of all commands.
Next, type `show modules`. You will get a list of all the discovery,
exploit, import, recon, and reporting modules. Next, type
`user hackertarget` and then []{#c14.xhtml#Page_224 .pagebreak
title="224" role="doc-pagebreak"}`show info`, as you see in [Figure
14.22](#c14.xhtml#c14-fig-0022){#c14.xhtml#R_c14-fig-0022}. You can use
this module to enumerate hostnames, among other things.
![[**[Figure 14.22](#c14.xhtml#R_c14-fig-0022){#c14.xhtml#c14-fig-0022
role="doc-backlink"}:**]{.figureLabel} Recon‐ng welcome
prompt](Images/c14f022.jpg){.center width="598" height="663"}
:::
[]{#c14.xhtml#Page_225 .pagebreak title="225" role="doc-pagebreak"}
::: section
[]{#c14.xhtml#c14-sec-0009}
### Sparta {#c14.xhtml#head-3-7}
Sparta is another Python tool that is a GUI application that assists in
the scanning and enumeration phase. It feels like Zenmap in the
beginning when you define the parameters of the network you would like
to investigate, as shown in [Figure
14.23](#c14.xhtml#c14-fig-0023){#c14.xhtml#R_c14-fig-0023}.
![[**[Figure 14.23](#c14.xhtml#R_c14-fig-0023){#c14.xhtml#c14-fig-0023
role="doc-backlink"}:**]{.figureLabel} Defining parameters in
Sparta](Images/c14f023.jpg){.center width="651" height="468"}
However, when you launch Sparta, after the initial Nmap scan and some
data collection, it proceeds to run additional tools against the
discovered services such as nikto, smbenum, snmpcheck, and more. [Figure
14.24](#c14.xhtml#c14-fig-0024){#c14.xhtml#R_c14-fig-0024} shows an
example of some of the data that can be extracted, such as the Sign In
screen for the ASUS router on 192.168.1.117.
![[**[Figure 14.24](#c14.xhtml#R_c14-fig-0024){#c14.xhtml#c14-fig-0024
role="doc-backlink"}:**]{.figureLabel} Sparta data collected while
running a scan](Images/c14f024.jpg){.center width="751" height="449"}
Services that need a login like telnet or SSH can be sent to the
brute‐force tool on the next tab to attempt to crack the password.
Right‐click any service that has been discovered and select Send To
Brute. Sparta attempts to automate several tasks that you would normally
manual execute separately.
:::
::: section
[]{#c14.xhtml#c14-sec-0010}
### MacChanger {#c14.xhtml#head-3-8}
After you have all the information from the three previous tools, you
may want to change or fake your MAC address if you are attempting to
disguise any of your exploit attempts. First, to find a list of all MAC
vendors, type `macchanger ‐l` in your terminal window. You will get a
list of all hardware vendors if there is a specific one you want to
impersonate.
[]{#c14.xhtml#Page_226 .pagebreak title="226" role="doc-pagebreak"}Next,
type `ifconfig eth0 down` in your terminal window so that you can
reassign a new MAC address to eth0, as shown in [Figure
14.25](#c14.xhtml#c14-fig-0025){#c14.xhtml#R_c14-fig-0025}. Then type
`macchanger ‐s eth0` to figure out what your current MAC is. Change `‐s`
to `‐r` to reassign a random MAC to `eth0`. To bring the `eth0` back up,
type `ifconfig eth0 up`. If you did happen to have a specific MAC
address you want to use, the command you would type is
`macchanger ‐m 00:00:00:00:00:00 eth0`. A MAC address is hexadecimal, so
instead of 0s, you could use any number from 0 to 9 and any letter from
*A* to *F*.
![[**[Figure 14.25](#c14.xhtml#R_c14-fig-0025){#c14.xhtml#c14-fig-0025
role="doc-backlink"}:**]{.figureLabel} Spoofing your MAC
address](Images/c14f025.jpg){.center width="449" height="164"}
:::
::: section
[]{#c14.xhtml#c14-sec-0011}
### Nikto {#c14.xhtml#head-3-9}
Now that you\'re flying incognito with a spoofed MAC address, you can
use a tool like Perl‐based Nikto to find vulnerabilities in web servers.
One caveat: Nikto is not very stealthy. In fact, just about any IDS or
security measure will detect it. We are using it to test for
security---it was never designed to be stealthy. I do find it a little
funny that the Nikto icon is the same as my Alienware Start button.
[]{#c14.xhtml#Page_227 .pagebreak title="227" role="doc-pagebreak"}Go to
the grid array of nine dots at the bottom of your Start menu to bring up
the Show Applications window. At the top of the page, search for
*nikto*. Do you still have your Metasploitable2 VM from [Chapter
10](../Text/c10.xhtml), "Metasploit''? Spin it up, find its IP address,
and once you have the terminal window open, type `nikto ‐host` and then
add the IP address of the web server you would like to scan for
vulnerabilities. The `‐host` option is used to specify host(s) to target
for a scan. It can be an IP address, hostname, or text file of hosts.
Try the example in [Figure
14.26](#c14.xhtml#c14-fig-0026){#c14.xhtml#R_c14-fig-0026}; in your Kali
Linux terminal, type `nikto ‐host http://webscantest.com`.
![[**[Figure 14.26](#c14.xhtml#R_c14-fig-0026){#c14.xhtml#c14-fig-0026
role="doc-backlink"}:**]{.figureLabel} Nikto vulnerability scanning of
`http://webscantest.com`](Images/c14f026.jpg){.center width="665"
height="461"}
:::
::: section
[]{#c14.xhtml#c14-sec-0012}
### Kismet {#c14.xhtml#head-3-10}
For wireless, Kismet is a great way to view what is going on around you.
Kismet uses a wireless network card in monitor mode to silently scan
Wi‐Fi channels. By capturing all this data, Kismet can visualize the
wireless networks around you as well as the activity of any devices. How
useful the data is depends on who you are and what you want to do.
Kismet can detect wireless cameras, smartphones, and laptops. By using
Kismet, you can easily war drive in your neighborhood looking for Wi‐Fi
signals and combine it with GPS data to build a map. In fact, you may
not even have to get in your car. Visit `https://wigle.net` to see a
global picture of Wi‐Fi networks. Those purple dots are Wi‐Fi networks
geographically mapped for you. Guess what helped build this map. Yes,
Kismet. Type in your address and zoom in. Do you recognize any of those
networks? I recognize the names of networks that populate my Wi‐Fi list.
Now []{#c14.xhtml#Page_228 .pagebreak title="228" role="doc-pagebreak"}I
know where they live. Are any of those MAC addresses yours? If so, you
may consider turning off your Wi‐Fi when you\'re not using it.
Starting Kismet is easy. Simply type `kismet ‐c``YourCardName`. As you
see in [Figure
14.27](#c14.xhtml#c14-fig-0027){#c14.xhtml#R_c14-fig-0027}, you can make
permanent changes to the configuration file and set up options for
logging as well as the GPS location.
![[**[Figure 14.27](#c14.xhtml#R_c14-fig-0027){#c14.xhtml#c14-fig-0027
role="doc-backlink"}:**]{.figureLabel} Kismet server
options](Images/c14f027.jpg){.center width="597" height="815"}
:::
::: section
[]{#c14.xhtml#c14-sec-0013}
### WiFite {#c14.xhtml#head-3-11}
If Kismet is the tool to use for Wi‐Fi network detection and sniffer and
you need to take this a step further, then think about using Aircrack‐ng
or WiFite. These tools can be used for auditing or cracking to recover
WEP/WPA/WPS keys []{#c14.xhtml#Page_229 .pagebreak title="229"
role="doc-pagebreak"}once enough packets have been captured. WiFite is
called the "set it and forget it" Wi‐Fi cracking tool. As you see in
[Figure 14.28](#c14.xhtml#c14-fig-0028){#c14.xhtml#R_c14-fig-0028},
there are many options for you to set with WiFite. However, you can
simply automate the wireless capture of access points over 40 dB of
power using the WPS attack with the command `wifite ‐pow 40 ‐wps`.
![[**[Figure 14.28](#c14.xhtml#R_c14-fig-0028){#c14.xhtml#c14-fig-0028
role="doc-backlink"}:**]{.figureLabel} WiFite
options](Images/c14f028.jpg){.center width="598" height="460"}
:::
::: section
[]{#c14.xhtml#c14-sec-0014}
### John the Ripper {#c14.xhtml#head-3-12}
Two community favorite password tools are Hashcat and John the Ripper.
If you ask people which one is their favorite, chances are the answer
will depend on the person. I like both. If I am not successful with one,
I will try the other. I usually use John the Ripper first.
John the Ripper was originally designed to crack Unix passwords. Now it
runs on pretty much everything and cracks almost any password. The
original version is maintained by Openwall. The version that comes in
Kali Linux is called the Jumbo version because it has more hash types
and new attack modes. John the Ripper stores cracked passwords in the
`john.pot` file, and its main configuration file is `john.conf`. There
are lots of command‐line options and more options in the configuration
file, as you see in [Figure
14.29](#c14.xhtml#c14-fig-0029){#c14.xhtml#R_c14-fig-0029}.
![[**[Figure 14.29](#c14.xhtml#R_c14-fig-0029){#c14.xhtml#c14-fig-0029
role="doc-backlink"}:**]{.figureLabel} John the Ripper password
cracker](Images/c14f029.jpg){.center width="635" height="615"}
At the simplest level, you can just point John the Ripper at a `pwdump`
file, tell it what type of hashes you want it to crack (NTLM), and let
it go. This is the tool that Metasploit Pro by Rapid7 uses to reverse
engineer hashes. I\'ve gotten to the point where I recognize the MD5 sum
hash for a blank password as well as *password* for a
password.[]{#c14.xhtml#Page_230 .pagebreak title="230"
role="doc-pagebreak"}
:::
::: section
[]{#c14.xhtml#c14-sec-0015}
### Hashcat {#c14.xhtml#head-3-13}
Hashcat provides much of the same functionality as John the Ripper. They
are both open‐source and share the same features. Hashcat is built
around using the GPU rather than the CPU for cracking as John the Ripper
does. A CPU is the central processing unit, often called the brains of a
PC. A GPU is the graphics processing unit, which comprises the chips
that render the display images to the monitors. If the CPU is the brain,
some call the GPU the brawn. A GPU is better at focusing all the
computing power on a specific task. If you\'re looking to do
password‐cracking on a system that has GPU, then use Hashcat. It will be
better and faster for many complex passwords.
Remember, passwords should not be stored in clear text. They are stored
in one‐way encryption called *hashes*. There are a couple different ways
of obtaining these hashes, but once you grab them, the next step is to
reverse‐engineer the hash, unless you want to Pass the Hash in
Metasploit. There are gigs of wordlists available on the Internet, but
Kali Linux already has some built in. A *wordlist* is a text file that
contains a collection of words to be used in a dictionary attack.
[]{#c14.xhtml#Page_231 .pagebreak title="231" role="doc-pagebreak"}The
first thing you want to do is open a terminal window and type in
`locate wordlist`. As you see in [Figure
14.30](#c14.xhtml#c14-fig-0030){#c14.xhtml#R_c14-fig-0030}, there are
many wordlists available. (I just happen to know that the wordlist built
for sqlmap has more than a million words in it.)
![[**[Figure 14.30](#c14.xhtml#R_c14-fig-0030){#c14.xhtml#c14-fig-0030
role="doc-backlink"}:**]{.figureLabel} Hashcat
wordlists](Images/c14f030.jpg){.center width="654" height="489"}
After you choose a wordlist, it\'s time to grab your hashes. In Kali
Linux, they are stored in the `/etc/`shadow file, so if you type in
`tail /etc/shadow`, you should see something like what\'s shown in
[Figure 14.31](#c14.xhtml#c14-fig-0031){#c14.xhtml#R_c14-fig-0031}. (I
cut off my hashes on purpose---you never know if someone would take the
time to reverse engineer my hashes.)
![[**[Figure 14.31](#c14.xhtml#R_c14-fig-0031){#c14.xhtml#c14-fig-0031
role="doc-backlink"}:**]{.figureLabel} Hashes collected on Kali
Linux](Images/c14f031.jpg){.center width="610" height="163"}
Now we need to figure out what hashing algorithm was used. To open that
file, type `more /etc/login.defs`.
[]{#c14.xhtml#Page_232 .pagebreak title="232" role="doc-pagebreak"}The
`more` command allows you to page down line by line through this file.
Once you\'re about 80 to 85 percent down the page, you should see
what\'s shown in [Figure
14.32](#c14.xhtml#c14-fig-0032){#c14.xhtml#R_c14-fig-0032}.
![[**[Figure 14.32](#c14.xhtml#R_c14-fig-0032){#c14.xhtml#c14-fig-0032
role="doc-backlink"}:**]{.figureLabel} Kali Linux using Encrypt_Method
SHA512](Images/c14f032.jpg){.center width="618" height="227"}
Now you can put all the puzzle pieces together. Make a copy of your
hashes in a separate file by using the following `cp` command:
``` {#c14.xhtml#c14-code-0001}
cp /etc/shadow hash.lst
```
To make sure that it worked, type the following:
``` {#c14.xhtml#c14-code-0002}
More hash.lst
```
To prepare this file for cracking, you need to remove everything but the
hashes. Open the `hash.lst` file with `gedit` or `vim` and delete all
the usernames and the colon. Remove the ending colons too. Now the file
is only the raw hash itself.
To crack these hashes, I used the following:
``` {#c14.xhtml#c14-code-0003}
hashcat -m 1800 -a 0 -o success.txt -remove hash.lst
/usr/share/sqlmap/txt/wordlist.txt
```
where
-   [`‐m 1800` is the type of hash I\'m
    cracking.]{#c14.xhtml#c14-li-0035}
-   [`‐a 0` is a dictionary attack.]{#c14.xhtml#c14-li-0036}
-   [`‐o success.txt` is the output file.]{#c14.xhtml#c14-li-0037}
-   [`‐remove` says delete the hash after it was
    cracked.]{#c14.xhtml#c14-li-0038}
-   [`hash.lst` is the input file.]{#c14.xhtml#c14-li-0039}
-   [`/usr/share/sqlmap/txt/wordlist.txt` is the path to the
    wordlist.]{#c14.xhtml#c14-li-0040}
Open your `success.txt` file. It took me a little over 10 minutes to get
the cracked passwords. If you have issues, try running the command again
with a `‐‐force` at the end. If that doesn\'t work, you may have to give
the Kali Linux box a few more than the default
resources.[]{#c14.xhtml#Page_233 .pagebreak title="233"
role="doc-pagebreak"}
As I tell my classes, if at first you don\'t succeed, try again. You are
attempting to force machines to behave in a way they were not originally
intended to behave. We are trying to use these machines and
vulnerabilities like attackers would. Using that mind‐set is critical to
securing our environments. Kali was designed to work even when used in a
very hostile environment. The Kali motto is "The quieter you become, the
more you are able to hear". Kali is designed to be as quiet as possible
so that you can hide its presence on your network. This chapter was
meant to be an introduction to penetration testing and what you have
learned is a good foundation. You are now ready to learn more in order
to fully exploit the power of Kali Linux, the best penetration testing
framework.
:::
:::
:::