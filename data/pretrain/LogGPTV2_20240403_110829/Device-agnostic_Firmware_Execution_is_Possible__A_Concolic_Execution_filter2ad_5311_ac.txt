tion becomes entangled in an infinite loop. As shown in
Listing 2, any failed invocations to PHY_Write or PHY_Read
will trigger the execution of line 5, an infinite loop. We allow
analysts to specify a parameter Forward_Depth, which is the
maximum number of basic blocks that the symbolic engine
can advance from a branch. Within Forward_Depth steps,
a branch could lead to multiple paths. If all of these paths
have an infinite loop, this branch is discarded. If Laelaps
singles out a branch because all the other branches are elimi-
nated due to infinite loop detection, we say Laelaps chooses
this branch on the basis of infinite-loop-elimination. To
identify an infinite loop, we do not apply sophisticated fixed-
point theorems [23]. Instead, our symbolic engine maintains
the execution traces and states of explored paths, and it com-
pares execution states within each path. If any two states are
the same, we regard this path as an infinite loop.
The infinite-loop-elimination heuristic might incorrectly
filter out a legitimate path which seems to be a infinite loop.
For example, a piece of code may constantly queries a flag
in the RAM, which is only changed by an interrupt handler.
Since the symbolic execution engine is not interrupt-aware
in our design, the legitimate path is filtered out. To address
this issue, CPSA chooses a path with infinite loop at the low-
est priority. When execution is switched back to the QEMU,
an interrupt can be raised and handled (§4.4), effectively
unlocking the infinite loop.
4.3.4 Heuristic #3: Prioritizing New Paths. We maintain a list
of previously executed basic blocks and calculate a similarity
measurement between the historical path and each of the
explored future path. We prioritize the candidate path with
the lowest similarity, implying that a new path is more likely
to be selected. To illustrate how this heuristic helps us find
the correct path of the code in Listing 2, consider how we can
advance to line 21. As shown in line 15, there are counter
chances that Laelaps can try to solve the correct values
for bssReg and ctlReg. If an incorrect value is drawn from
angr due to under-constrained path selection, the execution
starts over from line 16. If our algorithm makes mistakes
continuously in the while loop, the same path pattern will
be recorded for many times. Eventually, this will activate
similarity checking so that a new path (line 21) is selected. If
Laelaps singles out a branch, we say Laelaps chooses this
branch on the basis of similarity.
4.3.5 Heuristic #4: Fall-back Path. After applying the above-
mentioned path selection mechanisms, if we still have mul-
tiple candidate paths, we choose the one with the highest
address. This is based on two observations. First, programs
are designed to execute sequentially. Second, the firmware
typically initializes each peripheral one by one. Therefore,
our algorithm tends to move forward quickly.
Anonymous Submission to MobiCom, 2020
Anon.
Laelaps has to choose a fall-back branch if neither the
infinite-loop-elimination basis nor the similarity basis
can single out a branch. In this case, we say Laelaps chooses
this branch on the basis of fall-back.
4.4 Interrupt Injecting
So far, we have presented how Laelaps fills gap 1 shown in
Figure 1. That is, how to support firmware sequential execu-
tion even if the firmware access unimplemented peripherals.
On the other hand, in addition to generating data for the
firmware to fetch, peripherals also notify the firmware when
the data are ready through the interrupt mechanism. Typical,
a firmware for embedded application just waits in low-power
mode, and it only wakes up when receiving an interrupt re-
quest. Therefore, without being activated by interrupts (gap
2), most firmware logic remains dormant.
To fill gap 2, we implement a python interface that period-
ically delivers activated interrupts. This simple design works
fine for two reasons. First, in a real execution, firmware
only activates a limited number of interrupts. Therefore, de-
livering activated interrupts will not introduce too much
performance penalty. Second, an interrupt handler can of-
ten gracefully deal with unexpected events. Although addi-
tional code is executed, they will not cause great impacts on
firmware execution.
4.5 Limitations & Mitigations
Laelaps is designed to automatically reason about the ex-
pected peripheral inputs with only access to the binary code.
However, it is impossible to exactly follow the semantic of the
firmware in certain circumstances. If the peripheral inputs
do not influence control flow, the solution made by symbolic
execution would be random. We summarize common pitfalls
to complicate automatic firmware execution and how we
handle them.
4.5.1 Data Input. As discussed in §3.2, Laelaps works well
when the peripheral inputs only decide control flow. How-
ever, the firmware also interacts with the external world by
data exchange. From simple UART channels to complex Eth-
ernet channels, they are typically implemented by fetching
data from a particular data register at the agreed time slots.
Obviously, we cannot feed the randomly generated data to
the firmware. Fortunately, in many dynamic analyses, these
input channels are intercepted and fed with manually gen-
erated test-cases. In other words, Laelaps does not need to
generate the inputs anyway. In §6, we show how we use
Laelaps to hook network functions in FreeRTOS and ana-
lyze the TCP_IP stack of FreeRTOS to reproduce the vulner-
abilities disclosed by Zimperium zLabs in Dec 2018 [25].
8
4.5.2 Lack of Holistic Analysis. Laelaps preserves context
information by staying in the symbolic engine for up to
Context_Depth branches. However, Context_Depth cannot
be set too large as it will slow down performance signifi-
cantly. If a sub-optimal solution is generated under a low
Context_Depth, the execution could go wrong. To overcome
this limitation, we design several interfaces that analysts can
leverage to override the solution from the symbolic execu-
tion engine and thus avoid unwanted execution. Analysts
usually identify a false or unexpected execution when the
firmware goes into an infinite loop or a crash. Then based
on the execution trace, analysts override the solution accord-
ingly. In our evaluation, we demonstrate that with necessary
human inputs, Laelaps succeeds in dynamically running
very complex firmware images.
5 IMPLEMENTATION
We developed the prototype of Laelaps based on QEMU [4]
and angr [40], which are concrete execution engine and
symbolic execution engine, respectively. To facilitate state
transfer between the two execution engines, we integrate
Avatar [32, 44], a Python framework for seamlessly orches-
trating multiple dynamic analysis platforms, including QEMU,
real device, angr, PANDA [16], etc. Our tool inherits the state
transfer interface of Avatar, enhances Avatar’s capability to
handle Cortex-M devices, implements a memory synchro-
nization mechanism between QEMU and angr, develops the
proposed CPSA on top of angr, and exports to firmware ana-
lysts an easy-to-use Python interface. Our tool emulates a
generic Cortex-M device on which firmware analysts can
load and execute the firmware that interacts with unimple-
mented peripherals. These are implemented by 854 lines of
Python code and 209 lines of C code (QEMU modification).
5.1 Configuration
Although Laelaps does not need prior knowledge about
peripherals, some essential information about the chip is
required. This information includes 1) the core being used
(e.g., Cortex-M0, M3 or M4), 2) the mapping range of ROM/RAM,
3) the mapping ranges of chip-specific peripherals, and 4)
how the firmware should be loaded (i.e., how each section
of a firmware image corresponds to the memory map). The
chip information can be oftentimes obtained from the official
product description page, third-party forums, or the Federal
Communications Commission (FCC) ID webpage [17]. But
we acknowledge that there is a small portion of devices
that use custom chips or non-publicly documented micro-
controllers. To get information about how the firmware is
loaded, moderate static analysis is required. In the simplest
form, a raw firmware image as a whole is directly mapped
from the beginning of the address space. This kind of image
can be easily identified based on some characteristics (e.g., it
Device-agnostic Firmware Execution
Anonymous Submission to MobiCom, 2020
starts with an initial stack pointer and an exception table) [2].
On the other hand, some firmware relies on another piece
of code (bootloader), in which case additional analysis is
required.
5.2 Peripheral Access Interception
When firmware accesses an unimplemented address speci-
fied in the configuration stage, the memory request is for-
warded to the angr for symbolic execution. Our implemen-
tation is largely inherited from Avatar. In particular, Avatar
implements a remote memory mechanism in which accesses
to an unmapped memory region in QEMU are forwarded to a
Python script. The Python script then emulates the behavior
of a real peripheral and feeds the result to QEMU. Note that
to symbolically execute the firmware, angr needs the current
processor status (i.e., register values) and memory contents.
Avatar fetches the processor status through a customized
inter-process protocol and memory contents through the
GDB interface. Unfortunately, in Laelaps, we cannot use
the GDB interface for memory synchronization, which we
explain in the next section. We made modifications to Avatar
so that additional Cortex-M specific registers (e.g., Program
Status Register (PSR)) are synchronized to angr, and we im-
plemented our own memory synchronization interface as
well.
5.3 Memory Synchronization
As mentioned earlier, Avatar uses the GDB interface to syn-
chronize memory. The Avatar authors demonstrate this fea-
ture by synchronizing the state of a Firefox process from
QEMU to angr and continuing executing it symbolically.
Note that to invoke GDB for memory access, the target must
be in the stopped state. However, in Laelaps, we cannot
predict the program counters that access unimplemented
peripherals and make breakpoints beforehand. An alterna-
tive to this issue is to invoke QEMU’s internal function to
stop the firmware execution at the time of unimplemented
peripheral access. Unfortunately, due to the design model
of QEMU, this idea cannot be achieved without significant
modifications to QEMU.
We address this problem by exporting all RAM regions
through IPC. Specifically, in QEMU, when a RAM region
is created, we create a POSIX shared memory object and
bind it with the RAM region using mmap. As a result, angr is
able to directly address the firmware RAM by reading the
exported shared memory object. Our solution significantly
outperforms Avatar in memory synchronization. As with
Avatar, the actual memory transfer is issued on demand at
page granularity. All memory modifications are kept locally
and never forwarded back to QEMU. By design, Laelaps for-
wards peripheral inputs to QEMU and lets QEMU re-execute
the explored path. Therefore, there is no need to transfer
memory back to QEMU.
5.4 Interrupt Injection
Laelaps randomly injects activated interrupts to QEMU.
This is implemented on top of QEMU Machine Protocol
(QMP) interface. We added three new QMP commands: active-irqs,
inject-irq, and inject-irq-all. They are able to get the
current activated interrupt numbers, inject an interrupt, and
inject all the activated interrupt numbers in one go, respec-
tively. QMP is a JSON based protocol. Laelaps connects to
the QMP port of the QEMU instance and randomly sends
QMP commands to inject interrupts. For example, to inject
an interrupt with number 10, Laelaps sends the following
QMP message.
{" execute ": " inject - irq ", " arguments ": {" irq ": 10}}
To assert an interrupt, the added QMP command emulates
a hardware interrupt assertion by setting the correspond-
ing bit of the interrupt status pending register (ISPR). It is
worth noting that the injected QMP commands can never be
executed in QEMU in our initial implementation. It turned
out the threads handling QMP commands and I/O cannot
be executed concurrently. In particular, QEMU listens for
QMP messages and handles I/O in separate threads. Each
thread must acquire a global lock by invoking the function
qemu_mutex_lock_iothread() to grab CPU. We observed
that QMP thread can never win in acquiring the lock when
I/O thread is actively invoked. In fact, the default Pthread
mutex does not implement FIFO protocol. Therefore, OS can-
not guarantee QMP can ever acquire the lock. We made a
workaround by delaying 100µs in each I/O loop.
6 EVALUATION
We conducted empirical evaluations to demonstrate how
Laelaps enables device-agnostic firmware emulation and
how such capability benefits firmware analysis.
6.1 Firmware Emulation
Firmware Collection. To test how Laelaps deals with
6.1.1
diverse firmware, we collected/built 30 firmware images
from/for four ARM Cortex-M based development boards.
They are NXP FRDM-K66F development board, NXP FRDM-
KW41Z development board, STMicroelectronics Nucleo-L152RE
development board, and STM32100E evaluation board. The
reason why we chose development boards is that we could
run the firmware on real devices. Therefore, the execution
traces captured on real devices (see §6.2) form a ground truth
for evaluating the fidelity of firmware execution in Laelaps.
All the evaluated firmware images were built from the SDKs
and demonstration programs provided by the corresponding
9
Anonymous Submission to MobiCom, 2020
Anon.
Table 1: Emulation summary of 30 firmware images.
RTOS
FW # w/o
FW # w/
Human Intervention Human Intervention
NXP_FRDM-K66F
NXP_FRDM-KW41Z
STM32100E_EVAL
STM32 Nucleo-L152RE
FreeRTOS, Bare-metal
FreeRTOS, Bare-metal
FreeRTOS, Bare-metal
ChibiOS, Mbed OS
14
3
2
1
2
0
0
1
Failed #
6
1
0
0
chip vendors. We note that chip vendors are investing sig-
nificant resources into the development of SDKs to attract
developers. Also, to reduce time to market, more develop-
ers are willing to adopt the low-level SDK codes from the
vendors.
In terms of software architecture, we tested three popular
open-source real-time operating systems (FreeRTOS, Mbed
OS, and ChibiOS/RT) as well as bare-metal firmware. In terms
of peripheral diversity, these firmware images contain drivers
for a large number of different peripherals, ranging from
basic sensors to complex network interfaces. Depending on
the sophistication of the SDK, the drivers work either in
polling mode or interrupt mode. Therefore, the collected
images resemble the functionality and complexity of real-
world firmware images. We put detailed information about
each firmware image in Appendix B.
6.1.2 Results. We tested each of the collected firmware im-
ages using Laelaps. The result is promising. As shown in
Table 1, among all 30 images, Laelaps is able to successfully
emulate 20 images without any human intervention. All the
emulations advance to the core logic of the tasks correctly.
At this point, the environment has been properly initialized,
allowing for close inspection of interesting code points. For
three very complex firmware images (Column 4), Laelaps
is able to emulate them with some human interventions.
Among these three images, two of them need data input. We
manually redirected the input stream, as demonstrated in
§6.3.2.
On the other hand, there exist seven images that Laelaps
cannot handle even with human efforts (Column 5). We ana-
lyzed the execution traces and attributed these failed emula-
tions to the following reasons. First, sometimes the firmware
reads a peripheral register and stores the value in a global
variable, but only uses that value after a long time. From
time to access to time to use, there could have been multiple
switches between symbolic execution engine and concrete
execution engine. It is obviously that the peripheral value
cannot stay symbolized at the time of use. As a result, sym-
bolic engine cannot execute CPSA algorithm holistically. Sec-
ond, some firmware depends on custom-made peripherals
to implement complex computations such as hash or cryp-
tographic operations, which anger failed to handle. All the
details, including the Context_depth and Forward_Depth
10
Table 2: Statistics on the three bases to choose
branches.
Forward_Depth
Total