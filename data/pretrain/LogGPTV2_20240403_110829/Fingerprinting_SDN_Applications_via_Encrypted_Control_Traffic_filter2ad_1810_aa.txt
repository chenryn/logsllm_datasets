title:Fingerprinting SDN Applications via Encrypted Control Traffic
author:Jiahao Cao and
Zijie Yang and
Kun Sun and
Qi Li and
Mingwei Xu and
Peiyi Han
Fingerprinting SDN Applications via Encrypted Control Trafﬁc
Jiahao Cao1,2,3,4, Zijie Yang1,2,4, Kun Sun3, Qi Li2,4,
Mingwei Xu1,2,4, and Peiyi Han5
1Department of Computer Science and Technology, Tsinghua University
2Institute for Network Sciences and Cyberspace, Tsinghua University
3Department of Information Sciences and Technology, George Mason University
4Beijing National Research Center for Information Science and Technology, Tsinghua University
5School of Computer Science, Beijing University of Posts and Telecommunications
Abstract
By decoupling control and data planes, Software-Deﬁned
Networking (SDN) enriches network functionalities with de-
ploying diversiﬁed applications in a logically centralized
controller. As the applications reveal the presence or ab-
sence of internal network services and functionalities, they
appear as black-boxes, which are invisible to network users.
In this paper, we show an adversary can infer what applica-
tions run on SDN controllers by analyzing low-level and en-
crypted control trafﬁc. Such information can help an adver-
sary to identify valuable targets, know the possible presence
of network defense, and thus schedule a battle plan for a later
stage of an attack. We design deep learning based methods
to accurately and efﬁciently ﬁngerprint all SDN applications
from mixed control trafﬁc. To evaluate the feasibility of the
attack, we collect massive traces of control trafﬁc from a real
SDN testbed running various applications. Extensive experi-
ments demonstrate an adversary can accurately identify var-
ious SDN applications with a 95.4% accuracy on average.
1
Introduction
As a promising network paradigm, Software-Deﬁned Net-
working (SDN) has attracted much attention from both in-
dustry and academia.
It is being widely deployed in real-
world environments, such as cloud networks [5], data cen-
ters [28], and next-generation mobile networks [7]. SDN
separates control and data planes with a logically central-
ized SDN controller managing the whole network. A wide
range of innovative applications are deployed in the con-
troller to enable diversiﬁed network functionalities, such as
load balancing [10], denial-of-service (DoS) attacks detec-
tion [24, 71], and network security forensics [61]. They call
high-level application programming interfaces (APIs) pro-
vided by the controller to build their control logic. The con-
troller translates the API calls into low-level control trafﬁc,
e.g., OpenFlow [8] trafﬁc, to enforce network policies in
SDN switches. To prevent potential attacks, control trafﬁc
is usually encrypted with the transport layer security (TLS)
protocol [8].
SDN applications provide various network services and
functionalities in the network and appear as black-boxes by
design to switches. Therefore, network users do not know
what applications are running on controllers.
It is critical
for attackers to be aware of what applications are running on
the controller before launching their attacks. Attackers may
leverage this information to identify valuable targets, under-
stand the presence of network defense, and develop a battle
plan for a future attack. For example, if attackers know there
is no TopoGuard [27] security application in SDN, a topol-
ogy poisoning attack can be directly launched to hijack net-
work ﬂows [27]. In contrast, if attackers detect the presence
of TopoGuard, they can customize their attack plan to bypass
the defense, e.g., leveraging Port Amnesia [56].
In this paper, we show that what applications are running
on SDN controllers can be inferred by analyzing low-level
control trafﬁc even if the trafﬁc is encrypted. The key in-
sight behind our inference attack is that different SDN appli-
cations call APIs with different behaviors, which results in
diverse patterns of control trafﬁc. For example, Anonymous
Communication [42] periodically rewrites action ﬁelds of
ﬂow rules with FLOW MOD control messages, while Traffic
Monitor [6] periodically collects ﬂow statistics from ﬂow
rules with STATS REQUEST and STATS REPLY control mes-
sages. The number of packets, the length of packets, and the
ratio of incoming and outgoing packets for the control trafﬁc
of the two applications are all signiﬁcantly dissimilar. Such
patterns still exist though the control trafﬁc is encrypted. To
our best knowledge, inferring applications running on con-
trollers has not been considered so far as a potential attack
vector in SDN. Previous studies [12, 21, 32, 39, 52, 57] fo-
cus on ﬁngerprinting SDN networks, host communication
patterns, and composition of ﬂow rules by actively sending
probing packets. Our work here ﬁngerprints SDN applica-
tions by passively analyzing control trafﬁc without sending
any packets.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 501Nevertheless, we face two challenging problems to suc-
cessfully ﬁngerprint SDN applications as follows:
• How to accurately characterize the pattern of control
trafﬁc for an application?
• How to efﬁciently identify multiple applications with
mixed control trafﬁc?
For the ﬁrst problem,
the key challenge is that high-
level SDN applications generate massive, encrypted, and
low-level network control packets, which results in labor-
intensive, time-consuming, and difﬁcult manual analysis for
characterizing the patterns of control trafﬁc. Particularly,
complicated SDN applications call many types of APIs,
which results in overlaps of API calls between different SDN
applications. For example, Load Balancer [4] generates
STATS REQUEST and STATS REPLY control messages to cal-
culate the throughput of a ﬂow, and leverages FLOW MOD con-
trol messages to determine the port for forwarding the ﬂow.
However, the above three types of control messages are also
partly generated by Traffic Monitor [6] and Anonymous
Communication [42]. Moreover, there are some identical
control packets for different applications, which further in-
creases the difﬁculty to characterize the patterns of control
trafﬁc.
To address the problem, we transform network control
packets into a time series and apply deep learning to au-
tomatically extract patterns for different applications from
it. We try to maintain raw information of control trafﬁc in
the time series as much as possible to improve the accuracy
of pattern extraction. Speciﬁcally, each element in the time
series denotes a packet, and the value of an element is the
packet length. When a packet is sent from controllers to
switches, the corresponding element is multiplied by -1. Be-
sides, the order of elements in the time series is consistent
with the order of packets appearing in control trafﬁc. Conse-
quently, most raw information of control trafﬁc is naturally
encoded into the time series, such as the lengths of packets,
the directions of packets, etc. Thus, the time series can be
directly fed into deep neural networks for accurate and au-
tomatic feature extraction. Although the contents and delays
of packets are missed, they are unhelpful to characterize the
patterns of control trafﬁc considering that the packets are en-
crypted and their delays are usually changeable.
For the second problem, the key challenge is that one sin-
gle TCP connection between a controller and a switch con-
tains control packets generated by multiple applications con-
currently running on the controller. An adversary cannot
separate the control trafﬁc of an application from the mixed
control trafﬁc to infer what it is. A naive method is to train a
deep neural network with all possible combinations of mixed
trafﬁc to build a classiﬁer that gives the compositions of ap-
plications. However, the number of combinations exponen-
tially grows with more applications. Thus, the deep neural
network quickly becomes exceedingly complicated for clas-
sifying the exponential combinations of applications. It is
extremely time-consuming and not scalable to train such a
complicated deep neural network.
Fortunately, we can solve the problem by dividing it into
several subproblems. We train multiple classiﬁers for multi-
ple SDN applications. Each classiﬁer solves a 2-class classi-
ﬁcation problem, i.e., whether mixed control trafﬁc contains
trafﬁc of an application or not. The training samples for each
classiﬁer are two types of mixed control trafﬁc that includes
or excludes trafﬁc of an application. Thus, the structure of
deep neural networks is simpliﬁed and each classiﬁer can
be trained in parallel, which signiﬁcantly reduces the train-
ing time. By merging the output results of all classiﬁers, we
know what applications run on controllers.
We conduct experiments in a real SDN testbed consist-
ing of commercial hardware switches and a popular open
source controller. We deploy 10 SDN applications on the
controller, ranging from network performance optimization
to network monitor and network security enhancements.
We collect about 6,000,000,000 control packets with dif-
ferent combinations of applications and translate them into
many time series of equal lengths. We systematically ex-
plore three state-of-the-art deep learning models, i.e., Con-
volutional Neural Network (CNN) [34], Long Short-Term
Memory (LSTM) [26], and Stacked Denoising Autoencoder
(SDAE) [59], to train classiﬁers for ﬁngerprinting SDN ap-
plications with time series. The results show that CNN per-
forms the best, which achieves an average accuracy of 95.4%
to ﬁngerprint different SDN applications. Besides, we ﬁnd
that the accuracy can be further improved by increasing the
length of a time series.
We summarize our key contributions as follows:
• We uncover a new attack vector in SDN, which al-
lows an adversary to infer what applications are run-
ning on an SDN controller by analyzing low-level and
encrypted control trafﬁc.
• We develop techniques to accurately and efﬁciently ﬁn-
gerprint SDN applications with mixed control trafﬁc.
• We collect a large dataset of control trafﬁc from a real
SDN testbed and systematically evaluate the feasibility
of ﬁngerprinting SDN applications with it.
The rest of the paper is organized as follows: Section 2
introduces background on SDN and deep learning. Sec-
tion 3 provides our techniques to ﬁngerprint SDN appli-
cations. Section 4 describes data collection methods and
datasets. Section 5 evaluates the effectiveness of ﬁngering
SDN applications. Section 6 discusses our current limi-
tations and possible countermeasures against ﬁngerprinting
SDN applications. Section 7 reviews related work and Sec-
tion 8 concludes the paper.
502          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association2 Background
Table 1: Main Control Messages in OpenFlow.
In this section, we brieﬂy introduce the necessary back-
ground of SDN and deep learning.
2.1 SDN
Software-Deﬁned Networking (SDN) is an emerging pro-
grammable network framework that decouples control and
data planes. As shown in Figure 1, SDN consists of three
main layers: an application layer, a control layer, and a data
plane layer. Multiple applications concurrently run in the ap-
plication layer. They obtain a highly abstracted view of the
network and make network policies by calling APIs provided
by the control layer. The control layer manages installed net-
work applications and establishes connections with network
switches in the data plane layer. It translates API calls of ap-
plications into low-level control messages to tell switches on
how to forward and process packets.
Category
State
Modiﬁcation
Statistics
Collection
Device
Conﬁguration
Capability
Announcement
Event
Notiﬁcation
Message
FLOW MOD
GROUP MOD
METER MOD
FLOW STAT* †
GROUP STAT*
METER STAT*
PORT STAT*
SWITCH CONFIG
TABLE CONFIG
HANDSHAKE
TABLE FEATURE
GROUP FEATURE
METER FEATURE
PACKET IN
PORT STATUS
FLOW REMOVED
PACKET OUT
Functionality
Modify rules in different
tables to control packet
forwarding and processing.
Collect various ﬂow
statistics measured by rules
in different types of tables
and ports of switches.
Set and query conﬁguration
parameters in switches.
Identify SDN switches and
query their capabilities that
different tables support.
Notify network events to
controllers, e.g., new ﬂows
arriving, and send data
packets to switches.
Verify liveness and conduct
customized measurements.
ECHO REQUEST
Liveness
Veriﬁcation
* A pair of request and reply messages.
† FLOW STAT can also be used to know all ﬂow rules in switches.
ECHO REPLY
applied to multiple tasks, such as classiﬁcation and predic-
tion. Compared to traditional machine learning that requires
designing a sophisticated feature extractor with expert ex-
perience, deep learning adopts a universal learning method
to automatically extract features from massive data, which
avoids the heavy workload of manually designing features.
Different types of deep neural networks (DNNs) have been
designed by researchers for different purposes. Out of all
existing types of DNNs, we explore three popular types of
DNNs to ﬁngerprint SDN applications.
Convolutional Neural Network (CNN). CNN [34] has been
widely used in computer vision systems. It contains an in-
put layer, an output layer, and multiple hidden layers that
are convolutional layers, pooling layers, and fully-connected
layers. Convolutional layers perform a convolution opera-
tion to the input and create feature maps that contain ab-
stract features. Pooling layers reduce the dimensions of data
by downsampling. CNN typically contains several convolu-
tional and pooling layers to extract more abstract features.
Fully-connected layers perform ﬁnal classiﬁcation with out-
put feature maps. CNN can well characterize the spatial re-
lationship of data and search for the most important local
features. As the positions of SDN control packets in a net-
work ﬂow have strong space relationship due to control logic
of applications and may have evident local features, CNN is
suitable to characterize patterns of control trafﬁc.
Long Short-Term Memory (LSTM). LSTM [26] is a vari-
ant of Recurrent neural network (RNN) that uses feedback
connections to store representations of recent input events.
LSTM improves RNN for learning long-term dependency in-
Figure 1: The framework of SDN.
The standardized communication protocol between the
control layer and the data plane player is OpenFlow [8].
OpenFlow also speciﬁes functions of SDN switches and en-
ables controllers to manage switches in an open, vendor-
neutral, and interoperable way.
It deﬁnes various control
messages to enable diversiﬁed functionalities, such as de-
vice capabilities advertisement, packet forwarding control,
ﬂow statistics reporting, and network events notiﬁcation. We
summarize main control messages and their functionalities
in Table 1. Furthermore, as control messages contain sensi-
tive network information and critical network decisions, they
are usually encrypted with the TLS protocol.
2.2 Deep Learning
Deep learning has made amazing achievements in many as-
pects, such as speech recognition, natural language process-
ing, and face recognition. With the support of sufﬁcient data,
models with deep structure ﬁt data well and thus can be
SDN ControllerAPPAPPAPPAPPAPPAPIOpenFlowUSENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 503formation of sequences and avoiding the problem of vanish-
ing gradient. A common LSTM unit consists of a memory
cell, an input gate, an output gate, and a forget gate. The
cell is responsible for remembering information over arbi-
trary time intervals so that it can keep track of the depen-
dencies between the elements in the input sequence. The
three gates regulate the ﬂow of information into and out of
the cell, deciding whether to let the information in, whether
to produce the output, and whether to forget the information.
Due to the network structure, it captures temporal dependen-
cies between data. LSTM may be suitable to process control
packets of SDN applications since control packets naturally
have temporal dependencies.
Stacked Denoising Autoencoder (SDAE). Autoencoder