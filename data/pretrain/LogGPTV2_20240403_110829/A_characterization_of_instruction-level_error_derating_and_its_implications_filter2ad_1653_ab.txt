tions are run in the functional simulator. One of which, the
"golden" execution, simulates execution without any fault
present, and thus produces a correct execution to compare
against.
In the parallel execution, the "tainted" execution
is simulated with the injected fault present. After execut(cid:173)
ing each instruction in the trial, register state and control
flow from the golden execution are used to compare against
the tainted execution to determine if the fault (and possi(cid:173)
ble transitive faults) are masked (a passing trial), fail (due
to compulsory events such as memory protection) or due to
1-4244-2398-9/08/$20.00 ©2008 IEEE
484
DSN 2008: Cook &Zilles
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:33 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
pass
inconclusive
fail (error model)
fail (compulsory)
I gee -03 I gee -02 I gee -00 I osf subset
42.1%
1.1%
36.6%
20.2%
28.4%
0.5%
44.4%
26.7%
35.8%
1.3%
41.0%
21.9%
37.5%
1.3%
39.5%
21.7%
~
avg ~
osf I
35.9%
1.1%
40.4%
22.6%
40.0%
0.9%
37.8%
21.3%
Table 1: Results of fault injections as a function of optimization level. Results averaged across benchmark suite.
inst word
inputl val
input2 val
output val
gee -03
28.2%
49.0%
26.5%
39.6%
gee -02
29.2%
50.0%
28.5%
41.9%
gee -00
21.3%
40.5%
17.9%
34.7%
osf subset
32.7%
53.1%
29.6%
52.1%
avg
27.9%
48.1%
25.6%
42.1%
osf
31.5%
51.5%
27.5%
47.4%
Table 2: Fraction of fault injections that PASS as a function of the fault injection site.
the artificial error model (described next in Section 3.3), or
is inconclusive (run for 10,000 dynamic instructions with(cid:173)
out resolution).
3.3. Error Model
We use the following error model, fashioned after a
bandwidth efficient checker for a DMR system, to dictate
when an trial succeeds/fails. If any of the following invari(cid:173)
ants are violated, we mark the trial as failing due to the error
model.
We begin by presenting the overall rates at which derating
occurs and explain how the degree of optimization impacts
the derating by software (Section 4.1). We then describe
in detail why derating occurs at the software level, demon(cid:173)
strating the instruction-level mechanisms of fault derating
(Section 4.2). Finally, in Section 4.3 we characterize the
derated errors in the time domain, exploring how quickly
after the fault occurs are all traces of it eliminated from the
system (i.e., masked). In the following section, we explore
an application of this characterization.
1. control flow must match
2. store address and value must match
3. load address (alignment) must not fault
4. system call inputs must match
In the context of our hypothetical DMR system, a failure
to match on one of these items would force a state rollback
to the most recent checkpoint (backwards error recovery).
As noted in Section 2, this error model is somewhat conser(cid:173)
vative, in that there are faults that violate this error model
that may not affect the program's outcome. It is our asser(cid:173)
tion, however, that it would be quite expensive to exploit
this additional error derating without exposing the execu(cid:173)
tion to silent data corruption.
In addition to these error model constraints, we define as
compulsory failures those exceptional behaviors that would
represent a program crash in a non-fault tolerant execution
(e.g., invalid opcode exception or memory protection fault).
We assume these would also invoke backward error recov(cid:173)
ery and hence terminate any opportunity for a fault to be
In our results, we distinguish these two class of
derated.
failures.
4. Characterization of Instruction-level Error
Derating
In this section, we present our observations about the er(cid:173)
ror derating that occurs in software at the instruction level.
4.1. Derating Rates
Averaging across all of the benchmarks and optimiza(cid:173)
tion levels, we find that 35.9% of fault injection trials pass
without violating the conservative error model defined in
the previous section, as shown in Table 1. This promising
result means that over one third of faults that are exposed
architecturally are derated and masked by software before
they affect control flow, propagate to the memory system, or
cause an architectural exception. Of the 63.0% of architec(cid:173)
tural fault injections that fail, roughly one-third are compul(cid:173)
sory failures (22.6%) and two-thirds trigger our error model
(40.4%). A breakdown of fault injection trial outcomes is
described in Table 3 and can be seen in Figure 3.
Interestingly, the unoptimized code experiences about
8% fewer passing fault injections than the optimized ver(cid:173)
sions. This is because register allocation of variables has
not been performed, significantly increasing (from 31.8%
to 44.5 %) the fraction of loads and stores relative to the op(cid:173)
timized code. These additional memory instructions have
two effects:
first, a higher fraction of loads and stores
means that an error injection is more likely to hit an ad(cid:173)
dress calculation, leading to a compulsory failure (i.e., seg(cid:173)
mentation fault) or an error model-induced failure (i.e., un(cid:173)
aligned access). Second, the rate of error model-induced
failures further increases because intermediate values are
stored to memory preventing opportunity for those faults
1-4244-2398-9/08/$20.00 ©2008 IEEE
485
DSN 2008: Cook &Zilles
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:33 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
______I......www.......~__• __.I_..
i.......I_-·-" ................f_IIIIIIL__I. . . . .~_w_l• • fail-other-compulsory
'.
....
c···
••··
•
•
•
•
•
•
•
fail-mem-protection
fail-other-error-rnodel
fail-syscall-inputs
fail-rnem-alignment
fail-store-address
fail-store-value
fail-control
inconclusive
pass-masked
100%
90%
80%
70%
60%
en
Co
t5 50%
Q)"c
::
o
~ 30%
40%
20%
10%
0%
_it).Q.CJ" $"~ ,j>~ ~ ~ ~ <to i~Q. ~t;. _~~tJ. ~J:- ~.+ <fQ. <I' ~~
'¥
Q.7"'~O
",<I
t#I/-
gee -00
osf
Figure 3: Detailed fault injection failure-mode classification. Data presented on a per-benchmark basis. The outcome
categories are described in Table 3. On average, 35.9% of fault injections pass; 22.6% fail due compulsory reasons.
I RESULT
pass-masked
inconclusive
fail-control
fail-store-value
fail-store-address
fail-mem-alignment
fail-syscall-inputs
fail-other-em
fail-mem-protection
fail-other-comp
I EXPLANATION
faulty state masked without violating error model
trial ran for 10,000 instructions without violating error model or masking faulty state
program counter deviates from golden execution
incorrect store value
incorrect store address (although a valid address)
misaligned load/store address (would cause a PALcode trap fix up)
incorrect register inputs to syscall
store unexpected/missing, etc. due to instruction word injection
invalid load/store address causes memory protection exception
bad opcode, instruction word bit should be zero, etc.
error model
error model
error model
error model
error model
error model
compulsory
compulsory
Table 3: Description of fault injection trial outcomes. Failure modes are grouped by category: error model or compulsory.
to be masked by later instructions. While this effect is visi(cid:173)
ble in most of the benchmarks, it is particularly pronounced
in eon and mef, as shown in Figure 3; for eon, a C++
benchmark, this discrepancy is also likely due to the inher(cid:173)
ent mechanisms of virtual function calls, as well as the use
of helper functions to access object state, as both signifi(cid:173)
cantly increase the amount of control flow instructions in
unoptimized code.
4.2. Instruction-level Derating
In this subsection, we describe the main mechanisms that
lead to instruction-level derating. As shown in Table 2, the
instruction-level derating rates on output values and the first
input values significantly exceed those of injections into in(cid:173)
struction words and second input values. For the instruction
word, the lower derating rate is easily attributed to intol(cid:173)
erance in changing the opcode or input/output register in(cid:173)
dices; whereas the second input value is more sensitive than
the first input value because it is primarily used for the base
address in loads and stores.
We can categorize the sources of instruction-level de(cid:173)
rating into the six categories shown in Figure 4. The first
class, value comparison, results from the fact that the infor(cid:173)
mation in the values being compared is being reduced down
to a single bit, meaning that there is a significant amount of
information that is being discarded by the comparison. This
category, which accounts for 35% of correct values gener(cid:173)
ated by incorrect inputs, includes stand-alone comparisons
(e.g., empeq) as well as those belonging to branches.
The second class, sub-word operations, results from op(cid:173)
erations that only utilize a fraction of the bits in the in(cid:173)
coming values. The example shown in the figure is a
byte store, which considers only the bottom eight bits of
the register holding the data to store.
In addition to sub(cid:173)
word stores,
this category (31 %) includes derated errors
on the upper bits of the shift amount/selection operand for