1287
(a) ISA simulation
(b) RTL simulation
Fig. 1: Framework of ISA simulation and RTL simulation.
RTL simulation requires SoC to run CPU RTL design with an
executable file.
level operational behaviors (illustrated in Figure 1-(a)). To be
more specific, ISA simulators mimic the behavior of the CPU
and it maintains all the architectural registers and memory
states as its internal value while executing instructions. Thus
ISA simulator has its own memory unit, interrupt controller
and other components as well as the CPU implementation.
Using this ISA simulator, developers can test if the new ISA
can well support various software stacks running on it without
any issues. Moreover, the simulator can be used as a reference
model for the architecture, manifesting how programmer-visible
states should be updated if running a specific instruction.
Testing with RTL Simulation. RTL simulation is used to sim-
ulate the real-time behaviors of the design implemented in RTL.
The major difference between RTL and ISA simulation is that
the RTL simulation is aware of a cycle concept, representing a
clock cycle of the synchronous circuit. Thus the cycle accurate
behaviors of the design including microarchitectural states are
tested during the simulation, which cannot be performed with
the ISA simulation.
However, the RTL design alone cannot be simulated since
the design is just a representation of a circuit for the CPU. To
operate the RTL design, input stimuli should be provided to the
ports of the design while the simulation. Thus, an SoC including
memory units and interrupt controller is implemented to feed
input stimuli on the CPU design. Thus, the SoC completes the
CPU design for RTL simulation to run a meaningful software
code on it. Figure 1-(b) shows a simple SoC to test CPU designs.
Before the simulation, an input executable file is loaded to the
emulated memory in host and the CPU in RTL simulation runs
the executable. In the simulation, SoC continuously receives
data including instructions from the emulated memory and
generates input stimuli for the CPU design. Upon receiving
the input, the CPU RTL design runs the intended instructions.
B. Fuzzing
Coverage-Guided Fuzzing.
Fuzzing is a software test-
ing technique, which keeps running a target program with
randomly generated (or mutated) inputs so as to discover
previously unknown vulnerabilities. In particular, coverage-
guided fuzzing [17, 18] is arguably the most popular fuzzing
technique, which focuses on extending the execution coverage.
Fig. 2: A general workflow of coverage-guided fuzzing tech-
niques
In each run of the target program, it measures the execution
coverage at runtime, and leverage the measured coverage as
feedback to generate (or mutate) the next input to be tested.
In order to measure the coverage, it is assumed that the target
program is instrumented beforehand such that the fuzzer can
collect certain coverage information at runtime (including a
basic block coverage, edge coverage, etc.)
For instance, Figure 2 shows a typical workflow of coverage-
guided fuzzers. The fuzzer starts by randomly choosing one
of the input from the input corpus, which maintains a set of
interesting inputs. Then this chosen input is randomly mutated
(such as a random bit flip, merging two bytes in random offsets,
replacing with a specific value, etc.). Next, the fuzzer runs the
target program with the mutated input, while measuring the
execution coverage of the mutated input. If this mutated input
covers the new execution coverage that were not explored
before, it is saved back to the input corpus so that it can
get another chance to be fuzzed in the future running. If
not, the mutated input is thrown away. The fuzzer repeats
aforementioned steps indefinitely, which results in coverage-
guided fuzzing because it is more likely to fuzz the input that
is more likely extending the coverage.
Differential Fuzz Testing. Most fuzzers have focused on
identifying memory corruption bugs [17–34], mostly because
1) it has strong security implications; 2) memory violation
conditions are relatively easy to define and thus relatively easy
to detect. On the other hand, fuzzing to find semantics bugs,
which identifies logical vulnerabilities deviating from developer-
intended program behaviors, are not well explored compared to
finding memory corruption bugs. In general, semantic bugs are
known to be difficult to find because it is difficult to express
semantic violation cases into well-formed safety violation
conditions, because many of those require specific domain
knowledge of target programs. To tackle this problem, previous
works introduced differential fuzzing techniques, where the
fuzzer identifies a bug by comparing the output of multiple
programs of the same purpose [35, 36]. In fact, such differential
testing techniques are also used for RTL verification as well,
particularly comparing one RTL’s execution results with a
golden model’s execution results [37], which inspired the design
of DIFUZZRTL.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1288
Bus networkSoCCPUDUTBoot ROMINT. controlRTL simulationEmulated Mem.Hosttest.elfInput executableISAsimulationhandle(req)։return datafetch(pc)exec(insn)։get_INT.raise_INT.։return INT.proc_INT.CPUMem. unit.INT. controltest.elfInput executableBus networkSoCCPUDUTBoot ROMINT. controlRTL simulationEmulated Mem.Hosttest.elfInput executableISAsimulationhandle(req)։return datafetch(pc)exec(insn)։get_INT.raise_INT.։return INT.proc_INT.CPUMem. unit.INT. controltest.elfInput executableCoverageinstrumentationTarget sourceCompile-timepreparationTarget programMutation engineCoverage monitorBugCoverageInteresting? Mutated inputFuzz loopBugqueueSeedcorpusIII. MOTIVATION
The major motivation for DIFUZZRTL is to design a fuzzing
framework considering unique characteristics of RTL designs.
To this end, this section discusses two issues to design the
RTL fuzzer, coverage definitions for RTL fuzzing (§III-A) and
input space for RTL Fuzzing (§III-B).
A. Coverage Definition for RTL fuzzing
Example: A Memory Controller. Suppose a developer wants
to develop a simple memory controller, which connects CPU
with SDRAM and flash memory. Considering the unique
hardware characteristics, the memory controller takes 8-bits
from the flash at once. However, it takes 4-bits from the
SDRAM since SDRAM transfers only 4-bits per cycle. Thus,
the memory controller should assemble two data packets from
SDRAM to forward the entire 8-bits [38].
To this end, the developer designs following two independent
FSMs as shown in Figure 3-(a). First, the FSM for the flash
begins with the ready state (RF). If the valid signal is one, it
transitions to the busy state (BF) while taking the 8-bits from the
flash. Then it goes back to the ready state. Second, the FSM for
the SDRAM is similar to that of the flash, but the key difference
is that it has one more state in the middle, the pending state
(PS). This is because since SDRAM sends 8-bits of data with
two consecutive 4-bits of transmissions, the controller should
maintain two states (i.e., PS and BS) to represent the completion
of the first- and second-half transmission, respectively.
Based on these two FSMs, the sequential circuits using RTL
can be implemented for the memory controller as in Figure 3-
(b). For simplicity, we omitted the data flow in this illustration.
When implemented with RTL, the current states are maintained
with state register variables (i.e., stateF and stateS), because
the state is later used for determining the next state. Moreover,
a state transition is implemented with a multiplexer (i.e., mux),
because mux outputs an appropriate input according to the select
signal (i.e., the state transition condition in the FSM can be
represented with the select signal of mux).
The sequential circuit for the flash has 1-bit register, stateF,
where 1’b0 (i.e., the bit value 0) represents RF and 1’b1 (i.e., the
bit value 1) does BF, respectively. It is assumed that stateF is
first initialized with RF. When validF is asserted (represented
0 forwards BF from the two inputs (i.e.,
with 1 ), the mux MF
stateF and BF). Next, MF
0 , which
1 is RF. Then stateF is
is BF ( 2 ), since the select signal of MF
updated with BF ( 3 ), completing the first clock cycle. In the
next clock cycle, the circuit is processed when stateF is BF,
updating stateF with RF in the end of the clock cycle.
1 forwards the output of MF
The sequential circuit for the SDRAM has 2-bit register,
stateS, because it has three states to be represented: 2’b00 for
RF, 2’b01 for PS, and 2’b11 for BS. Thus, it has one extra mux
to implement an extra state transition, but it is largely similar
to the sequential circuit for the flash.
Vulnerability in the Memory Controller. This memory
controller has a vulnerability breaking the memory consistency,
which is related to the constraint that the memory controller
can only forward 8-bits (sent from either flash and SDRAM)
to CPU per cycle. If both flash and SDRAM completes the
8-bit transmission at the same clock cycle (i.e., reaching BF
and BS at the same clock cycle), the memory controller cannot
handle both. In other words, it can only forward one 8-bits
transmission, and should drop the reset transmission. As a
result, one of the data (transmitted by either flash or SDRAM)
will be lost, thus breaking the memory consistency.
This vulnerability cannot be captured with two individual
FSMs that we presented before (Figure 3-(a)), which assumes
that the flash and SDRAM operations are independent to each
other. However, since these two are in fact dependent with
respect to the memory controller, two individual FSMs should
be merged into a single FSM where its states are a product
of all states (Figure 3-(c)). As shown in the figure, once the
memory controller reaches the state (BF, BS), then data loss or
corruption occurs.
In order to fix this vulnerability, the memory controller
should handle only one of two transmissions during the
vulnerable clock cycle, and the other should be handled in the
next clock cycle. Thus, the developer should patch with an
extra state transition, from (BF, BS) to (RF, BS) or (BF, RS)
Limitation of Previous Fuzzing Approaches.
In order to
identify this vulnerability, various approaches can be used, but
each approach has its own limitation.
Focusing the discussion on fuzzing techniques, RFuzz [14]
proposed the mux-coverage guided fuzzing technique. The
core idea behind this technique is that the mux’s select signal
leads to a state transition, so guiding the fuzzing based on the
mux’s select signal would lead to exploring more FSM states.
To be more specific, this technique runs the sequential circuit
while monitoring all the select signals of the muxes, identifying
which of those were toggled in the end of running. If any mux
were newly toggled, the provided input to the circuit (i.e., a
series of per-cycle validF and validS signals) is considered as
a valuable input and thus added to the corpus. This is because
such a new toggling indicates that the new state transition has
been explored by the input. If no muxes were newly toggled,
the provided input is simply thrown away.
We observe two critical limitations of RFuzz’s mux-coverage
technique. The first limitation is that since mux-coverage metric
is clock-insensitive, it cannot precisely capture FSM state
transitions. In other words, it does not recognize interplay and
inter-dependency between mux toggling events across clocks,
so semantically different mux toggling events are considered
as the same, failing to correctly identify state transitions.
For instance, Figure 4 illustrates two different cases of
running the memory controller, where the left case runs with
the benign input (i.e.,(RF, RS) to (BF, PS) and reaching (RF, BS))
and the right case runs with the vulnerability-triggering input
(i.e., the input leads to reaching the state, (BF,BS), at clk3). For
each case, all muxes’ select signals are shown per cycle, where
the mux toggling is highlighted with the red-colored box. In
the end of running, the coverage map is generated which sums
up all the observed toggling events. Then this coverage map
is used to identify if new mux toggling is triggered by the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1289
(a) Two independent FSMs designed for
the example memory controller, where
each FSM is for stateF and stateS.
(b) Schematics of the example memory controller.
For simplicity, the data flow is abstracted out.
(c) The combined FSM of the example
memory controller. The red colored state,
(BF, BS) denotes a vulnerable state.
Fig. 3: FSMs and schematic for example memory controller design.
RTLs including out-of-order Boom Core, while RFuzz was not
able to fuzz the Boom Core due to the scalability issues.
B. Input Space for RTL Fuzzing
Limitations of CPU Testing using Entire SoC. As men-
tioned in §II-A, CPU designers have used SoC to simulate and
test the CPU RTL designs. Leveraging entire SoC enables the
comparison between ISA simulation and RTL simulation, i.e.,
end-to-end test, by making them take the same executable as
an input. In this sense, fuzzing entire SoC can simplify the
fuzzer by concerning only executable generation, but there are
some fundamental limitations.
First of all, the fuzzer cannot test the entire input space
of the CPU design. CPU RTL designs have several input
ports including ports for data transfer, interrupt and debug
interface. SoC wraps this interface by converting input from
outer world (e.g., executable) into a formatted input stimuli
the CPU can interpret. However, it also means limiting the
input space into the space that SoC can only generate. To test
various functioning of CPU such as responses to stressful cache
coherence transactions or arbitrary interrupts, the intended SoC
should be redesigned each time. In contrast, fuzzer which
directly channels the CPU input space can generate input
adaptively.
Furthermore, as the open source hardware [39] becomes
popular, it is no longer true that the CPU and SoC are designed
and implemented by a single vendor. The open sourced CPU
RTL design can be used in various SoC designs, e.g., using
Boom core in Rocket SoC [40, 41]. Thus, the CPU and SoC
should be verified separately and we need a unified platform
to test CPU designs only.
IV. DESIGN
Now we present
the design of DIFUZZRTL. We first
introduce how DIFUZZRTL performs the mutation, which
generates a new CPU input format, SimInput (§IV-A). Then
we describe ISA simulation §IV-B, which accepts SimInput
as input. Next, we illustrate how DIFUZZRTL compiles RTL
designs to support register coverage (§IV-C), and then explain
Fig. 4: The workflow of RFuzz’s mux coverage schemes for
benign (left) and bug triggering inputs (right)
provided input. However, although benign and vulnerability-
triggering cases are clearly reaching different states, coverage
maps of those are the same. This is because although the mux
toggling of MF
1 takes place at different clock cycles,
RFuzz’s mux-coverage metric cannot capture such differences.
As a result, RFuzz would not be able to properly guide the
fuzzing procedure towards exploring more states as its metric
collapses multiple states into one state.
0 and MF
The second limitation is related to instrumentation overhead
of monitoring all muxes’ select signal. From the implementation
perspective of the RFuzz’s mux-coverage approach, the required
resources (e.g, wires and registers) for instrumentation quadrat-
ically increases as the number of muxes increases, critically
limiting its runtime performance as well as scalability.
Our Approach: Register Coverage for RTL.
In order to
overcome the limitation, DIFUZZRTL proposes the register-
coverage approach for RTL. While we provide details in §IV-C,
register coverage can be summarized with two key features.
First, it supports clock-sensitive coverage, so it can precisely
capture FSM state transitions. Second, its measurement is
based on control registers, not based on muxes’ control signals,
making it efficient and scalable. As we evaluate further in
§VI, DIFUZZRTL’s register-coverage has shown 40 times
better execution speed, and 6.4 times faster vulnerable state
exploration time compared to RFuzz’s mux-coverage. More
importantly, DIFUZZRTL was able to fuzz all three real-world
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
1290
RFBF(*)(0)(1)RSBSPS(1)(0)(*)(1)(0)FSM of flash (stateF)FSM of SDRAM (stateD)RFBF(*)(0)(1)RSBSPS(1)(0)(*)(1)(0)FSM of flash (stateF)FSM of SDRAM (stateD)BS PS stateS[0]RS stateS101010validS(from SDRAM)stateS[1]BFstateFRFBF1’b01’b1stateSRSPSBS2’b002’b012’b10𝐌𝟎𝐅𝐌𝟏𝐅𝐌𝟐𝐒𝐌𝟏𝐒𝐌𝟎𝐒10stateF10RF validF(from flash)21stateF[0]3RF , BSBF , BSBF , PSRF , PSBF , RSRF , RS(0,1)(1,1)(*,1)(*,1)(*,0)(0,*)(0,0)(1,0)(*,*)(1,*)(0,0)(1,0)(*,0)(1,1)(0,1)cycle000101011001111Bug0000101010250150124Mux CoverageM0FM1𝐹M0𝑆M1𝑆M2𝑆0011110010111100124clk0clk1clk2Mux covmapBenignM0FM1𝐹M0𝑆M1𝑆M2𝑆0124000101011001111clk0clk1clk2Mux covmapBugState{RF , RS} {BF , PS} {RF , BS} {RF , RS} {RF , PS} {BF , BS} StateM0FM1𝐹M0𝑆M1𝑆M2𝑆0011110010111100124clk0clk1clk2Mux covmapBenignM0FM1𝐹M0𝑆M1𝑆M2𝑆0124000101011001111clk0clk1clk2Mux covmapBug331 0x100 : (0130071b | addiw
2 0x104 : (01c0036f | jal
3 0x120 : (02e32823 | sw
4 0x300 : (3943648f | unknown
5 0x310 : (064ff13b | unknown
a4, zero, 0x13 INT.: 0000->0000)
t1, pc + 0x1c
t4, 0x30(t1)
INT.: 0000->0100->0000)
INT.: 0100->0100->0000)
INT.: 0000)
INT.: 0000)
Fig. 6: Input generated by mutator. Each address is associated
with an instruction and a list of interrupt events
It is worth noting that, ISA and RTL simulation runs CPU
according to SimInput as follows: 1) The map of address and
value pair is used as an initial memory state for both SW
and RTL designs. 2) The associated interrupt event is also
accordingly raised when designs execute the corresponding
instruction. Since CPU is operating based on the initial memory
layout and interrupt events, SimInput ensures the deterministic
execution on both designs.
Per-Instruction Mutation.
In general, DIFUZZRTL’s per-
instruction mutation is a grammar-aware and structured muta-
tion approach while allowing some randomness, such that a
mutated instruction is likely a valid instruction (but an invalid
instruction with a low probability). This ensures that when the
instruction is executed by SW or RTL design, it would not
always be rejected due to the invalid instruction format. More
specifically, per-instruction mutation determines following two
fields: opcode and operands. First, the opcode of the instruction
is determined at random from the list of valid opcodes in the
ISA specification.
Next, the operands (including register indices and imme-
diate/address values) are determined at random. Note that
DIFUZZRTL’s mutator keeps track of which register indices
and immediate/address values were assigned before, and
attempt to reuse such indices and values. Thus, this would
increase the data dependency between instructions, thereby