-   数据持久化方式之一
-   按照指定时间间隔,将内存中的数据集快照写入硬盘
-   术语叫Snapshot快照
-   恢复时,将快照文件直接读入内存
文件名:
\[root@sql57 \~\]# vim /etc/redis/6379.conf
254 dbfilename dump.rdb
## 使用RDB文件恢复数据
\[root@sql56 6379\]# redis-cli -h 192.168.4.56 -p 6356
192.168.4.56:6356\> keys \*
1\) \"y\"
2\) \"x\"
3\) \"a51\"
4\) \"z\"
5\) \"a1\"
192.168.4.56:6356\> exit
\[root@sql56 6379\]# scp /var/lib/redis/6379/dump.rdb 192.168.4.57:/root
\[root@sql57 \~\]# cp dump.rdb /var/lib/redis/6379/
\[root@sql57 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql57 \~\]# redis-cli -h 192.168.4.57 -p 6357
192.168.4.57:6357\> keys \*
1\) \"a51\"
2\) \"x\"
3\) \"y\"
4\) \"a1\"
5\) \"z\" #57用了56的dump.rdb文件,两边数据一样
## 数据从内存保存到硬盘的频率
按照配置的时间规律将数据保存到dump文件内
\[root@sql57 \~\]# vim /etc/redis/6379.conf #配置文件中
217 \# save \"\"
219 save 900 1
220 save 300 10
221 save 60 10000
save \"\" #禁用RDB
Save 900 1 900秒内且至少有1次修改,进行存盘
Save 300 10 300 秒内且至少有10次修改,则进行存盘
Save 60 10000 60 秒内且至少有10000次修改则进行存盘
\[root@sql57 \~\]# /etc/init.d/redis_6379 stop
Stopping \...
Waiting for Redis to shutdown \...
Redis stopped
\[root@sql57 \~\]# vim /etc/redis/6379.conf
#save 900 1
#save 300 10
#save 60 10000
save 120 10
\[root@sql57 \~\]# rm /var/lib/redis/6379/\*
rm：是否删除普通文件 \"/var/lib/redis/6379/dump.rdb\"？y
\[root@sql57 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql57 \~\]# ls /var/lib/redis/6379/
\[root@sql57 \~\]# redis-cli -h 192.168.4.57 -p 6357
192.168.4.57:6357\> set a1 1
OK
192.168.4.57:6357\> set a1 2
OK
192.168.4.57:6357\> set a1 3
OK
192.168.4.57:6357\> set a1 4
OK
192.168.4.57:6357\> set a1 5
OK
192.168.4.57:6357\> set a1 6
OK
192.168.4.57:6357\> set a1 7
OK
192.168.4.57:6357\> set a1 8
OK
192.168.4.57:6357\> set a1 9
OK
192.168.4.57:6357\> set a1 10
OK
192.168.4.57:6357\> set a1 11
OK
192.168.4.57:6357\> exit
\[root@sql57 \~\]# ls /var/lib/redis/6379/
\[root@sql57 \~\]# ls /var/lib/redis/6379/
\[root@sql57 \~\]# ls /var/lib/redis/6379/
dump.rdb #2分钟后出现dump文件
![](media/image2.png){width="5.7625in" height="3.34375in"}
![](media/image3.png){width="5.561805555555556in"
height="4.540972222222222in"}
## RBD优点
高性能的持久化实现\--创建一个子进程来执行持久化.先将数据写入临时文件.持久化过程结束后,再用这个临时文件替换上次持久化好的文件;过程中主进程不做任何IO操作
比较适合大规模数据恢复,且对数据完整性要求不是非常高的场合
## RDB缺点
意外宕机时,最后一次持久化的数据会丢失
# 持久化之AOF
为了弥补RDB的缺点,出现AOF
只做追加操作的文件.Append Only File
-   只记录redis服务所有写的操作
-   不断的将新的写操作追加到文件的末尾
-   就是一个文本文件,使用cat命令可以查看文件内容
-   默认未启用
## 相关配置参数
文件名
-   appendfilename "appendonly.aof" #指定文件名
-   appendonly on #启用aof ,默认no
\[root@sql56 \~\]# vim /etc/redis/6379.conf
673 appendonly yes
677 appendfilename \"appendonly.aof\"
AOF文件记录写操作的方式
-   appendfsync always
    #有新写操作立即记录,记录命令同时把数据写入dump.rdb
-   appendfsync everysec #每秒记录一次,记录命令同时把数据写入dump.rdb
-   Appendfsync no #从不记录,
\[root@sql56 \~\]# vim /etc/redis/6379.conf
702 \# appendfsync always
703 appendfsync everysec #3选一
704 \# appendfsync no
\[root@sql56 \~\]# ls /var/lib/redis/6379/
dump.rdb
\[root@sql56 \~\]# /etc/init.d/redis_6379 stop
Stopping \...
Waiting for Redis to shutdown \...
Redis stopped
\[root@sql56 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql56 \~\]# ls /var/lib/redis/6379/
appendonly.aof dump.rdb
新开终端,tail -f
\[root@sql56 \~\]# tail -f /var/lib/redis/6379/appendonly.aof
#实时查看记录
## 使用AOF文件恢复数据
\[root@sql56 \~\]# cp /var/lib/redis/6379/appendonly.aof /root
cp：是否覆盖\"/root/appendonly.aof\"？ y
\[root@sql56 \~\]# scp /root/appendonly.aof 192.168.4.57:/root
appendonly.aof 100% 180 219.6KB/
\[root@sql57 \~\]# redis-cli -h 192.168.4.57 -p 6357
192.168.4.57:6357\> keys \*
1\) \"a1\"
192.168.4.57:6357\> flushall
OK
192.168.4.57:6357\> keys \*
(empty list or set)
192.168.4.57:6357\> exit
\[root@sql57 \~\]# /etc/init.d/redis_6379 stop
Stopping \...
Redis stopped
\[root@sql57 \~\]# vim /etc/redis/6379.conf
\[root@sql57 \~\]# rm -rf /var/lib/redis/6379/\*
\[root@sql57 \~\]# cp appendonly.aof /var/lib/redis/6379/
\[root@sql57 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql57 \~\]# redis-cli -h 192.168.4.57 -p 6357
192.168.4.57:6357\> keys \*
1\) \"a22\"
2\) \"a11\"
192.168.4.57:6357\>
## 优化配置日志重写
日志文件会不断增大,何时触发日志重写?
redis会记录上次重写时AOF文件的大小
默认配置当aof文件是上次rewrite 后大小的1倍且文件大于64M时触发
\[root@sql56 \~\]# vim /etc/redis/6379.conf
744 auto-aof-rewrite-percentage 100
> #达到按照上次整理后大小的1陪,再次整理,不断反复
745 auto-aof-rewrite-min-size 64mb
> #最小大小触发第一次整理的大小
## 修复AOF文件
把文件恢复到最后一次的正确操作.
\[root@sql56 \~\]# vim /var/lib/redis/6379/appendonly.aof
\$3
562
asdf #末尾胡乱添加
asdf #末尾胡乱添加
\[root@sql56 \~\]# /etc/init.d/redis_6379 stop
Stopping \...
Waiting for Redis to shutdown \...
Redis stopped
\[root@sql56 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql56 \~\]# redis-cli -h 192.168.4.56 -p 6356
Could not connect to Redis at 192.168.4.56:6356: Connection refused
Could not connect to Redis at 192.168.4.56:6356: Connection refused
not connected\> exit
\[root@sql56 \~\]# netstat -unltp \|grep redis #无端口信息
\[root@sql56 \~\]# redis-check-aof \--fix
/var/lib/redis/6379/appendonly.aof
0x b4: Expected prefix \'\*\', got: \'a\'
AOF analyzed: size=192, ok_up_to=180, diff=12
This will shrink the AOF from 192 bytes, with 12 bytes, to 180 bytes
Continue? \[y/N\]: y
Successfully truncated AOF
\[root@sql56 \~\]# vim /var/lib/redis/6379/appendonly.aof
#此时查看无胡乱添加
\[root@sql56 \~\]# /etc/init.d/redis_6379 start
/var/run/redis_6379.pid exists, process is already running or crashed
\[root@sql56 \~\]# redis-cli -h 192.168.4.56 -p 6356
Could not connect to Redis at 192.168.4.56:6356: Connection refused
Could not connect to Redis at 192.168.4.56:6356: Connection refused
\[root@sql56 \~\]# /etc/init.d/redis_6379 stop
Stopping \...
Could not connect to Redis at 192.168.4.56:6356: Connection refused
Redis stopped #无法启动也无法停止.登录不进去
\[root@sql56 \~\]#
\[root@sql56 \~\]# rm -rf /var/run/redis_6379.pid #删除pid文件即可
\[root@sql56 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql56 \~\]# redis-cli -h 192.168.4.56 -p 6356
192.168.4.56:6356\>
## 报错信息:
检测到有/var/run/redis_6379.pid 文件是判定启动状态,实际未启动
\[root@sql56 \~\]# /etc/init.d/redis_6379 start
/var/run/redis_6379.pid exists, process is already running or crashed
\[root@sql56 \~\]# redis-cli -h 192.168.4.56 -p 6356
Could not connect to Redis at 192.168.4.56:6356: Connection refused
Could not connect to Redis at 192.168.4.56:6356: Connection refused
\[root@sql56 \~\]# /etc/init.d/redis_6379 stop
Stopping \...
Could not connect to Redis at 192.168.4.56:6356: Connection refused
Redis stopped
解决办法,删除pid文件即可
\[root@sql56 \~\]# rm -rf /var/run/redis_6379.pid #删除pid文件即可
\[root@sql56 \~\]# /etc/init.d/redis_6379 start
Starting Redis server\...
\[root@sql56 \~\]# redis-cli -h 192.168.4.56 -p 6356
192.168.4.56:6356\>
AOF优点
-   可以灵活设置持久化方式,同步持久化appendfsyncalways
    或异步持久化appendfsyns everysec
-   出现意外宕机时,仅可能丢失1秒的数据
AOF缺点
-   持久化文件体积通常会大于RDB方式
-   执行fsync策略时的速度可能会比RDB的方式慢
# 3 数据类型
## String字符串类型
### set命令
192.168.4.56:6356\> set key value \[EX seconds\] \[PX milliseconds\]
\[NX\|XX\]
\# \[EX seconds\] 有效期以秒计算
\# \[PX milliseconds\] 有效期以毫秒计算
\# \[NX\|XX\] NX变量不存在才赋值 XX变量存在时才赋值
192.168.4.56:6356\> set k 88 ex 30 以秒为单位计算
OK
192.168.4.56:6356\> ttl k
(integer) 23
192.168.4.56:6356\> ttl k
(integer) 21
192.168.4.56:6356\> ttl k
(integer) -2 #存活值为负
192.168.4.56:6356\> get k #不存在变量k
(nil)
192.168.4.56:6356\> set a 1
OK
192.168.4.56:6356\> set a 2 nx #nx不存在才赋值,赋值不成功
(nil)
192.168.4.56:6356\> get a
\"1\"
192.168.4.56:6356\> set a 2 xx #存在才复制,赋值成功
OK
192.168.4.56:6356\> get a
\"2\"
192.168.4.56:6356\> set b 2 xx #变量b不存在,赋值不成功
(nil)
### get命令
![](media/image4.png){width="5.7625in" height="1.0784722222222223in"}
### del命令(删除key)
192.168.4.56:6356\> del key \[key \...\]
### Setrange复写命令
从偏移量开始复写key的特定位的值
192.168.4.56:6356\> setrange key offset value
offset 偏移量位置 第一位是0
value 修改的内容值
192.168.4.56:6356\> set dh 13973169942
OK
192.168.4.56:6356\> get dh
\"13973169942\"
192.168.4.56:6356\> setrange dh 3 \*\*\*\* #从第四位还是
(integer) 11
192.168.4.56:6356\> get dh
\"139\*\*\*\*9942\"
### Strlen 统计字符串长度命令
统计字符串长度
192.168.4.56:6356\> strlen key
192.168.4.56:6356\> strlen dh
(integer) 11
### append 命令存(存在追加,不存在创建)
存在则追加,不存在则创建key及value,返回key长度
192.168.4.56:6356\> append key value
192.168.4.56:6356\> get a