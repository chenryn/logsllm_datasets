• “Firm” IP cores are delivered as gate-level implementations
of the IP, i.e., sets of registers and logic gates connected by
wires. They are often visualized as gate-level schematics or
human-readable netlists, but do not expose the underlying
IP. Reverse engineering the RTL specification (even approx-
imately) from the gate-level implementation is considered
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1535a non-trivial problem, akin to recovering source code from
machine code.
• “Hard” IP cores are delivered as GDSII representations of a
design, i.e., a set of planar geometric shapes representing
transistors and interconnects. These are human readable
(with some effort), and are easily converted to gate-level
implementations. Like firm IP, it is non-trivial to recover the
original RTL from which it was generated (if any).
Soft IPs provide greater flexibility and enable easier integration
with other IPs in the SoC. Therefore, soft IP is the most common
form of 3PIP by a large margin [38]. After developing/procuring
all the necessary soft IPs, the SoC design house integrates them to
generate the RTL specification of the whole SoC. The RTL design
goes through extensive functional/behavioral testing to verify the
functional correctness of the SoC and also to identify bugs. The
SoC integrator then synthesizes the RTL description into a gate-
level netlist based on a target technology library. (They may also
integrate firm IP cores from a vendor into this netlist.) The gate-
level netlist then goes through formal equivalence checking to
verify that the netlist is equivalent to the RTL representation.
Next, specific design-for-test (DFT) and design-for-debug (DFD)
structures are integrated into the netlist. As the names suggest,
these make it easier to test and debug a SoC design later on in the
fabrication process. (We note that DFT and DFD structures may
be integrated into the netlist in-house, or by third parties, further
complicating the security surface.) The DFT inserted netlist then
goes through static timing analysis to analyze if the implemented
design conforms to the timing requirement.
After this, the gate-level netlist is translated into a physical-
layout design. At this stage, it is also possible to import and integrate
hard IP cores from vendors. After performing static timing analysis
and power closure, the SoC integrator generates the final layout in
GDSII format and sends it out to the foundry for fabrication.
The flow discussed above is for application-specific integrated-
circuit (ASIC) designs. An SoC can also be implemented in a field-
programmable gate array (FPGA). The FPGA design flow is similar
to ASIC flow until synthesis. After the synthesis in FPGA flow,
the design goes through “place-and-route” process for the targeted
FPGA chip and a bit-stream is generated which implements the
design on FPGA.
In the SoC design flow, for either ASIC or FPGA, the P1735
standard is mainly used by developers of soft and firm IP-cores,
who wish to keep their technology confidential. This standard is
also used by SoC designers who want to ensure that the design is
not tampered by rogue employees (i.e., insider attack) or by third
party entities present in the SoC design flow.
2.2 IEEE P1735 Standard
The IEEE SA-Standards Board developed the P1735 standard to
provide guidance on protection of electronic design intellectual
property (IP) [13]. It defines three stakeholders: IP author, IP user,
and tool vendor. The IP author is the producer and legal owner
of the IP. The IP user is the party who will use the IP author(s)
product(s) to develop its SoC. The tool vendor provides an EDA tool
to the IP user. The tool should simultaneously enable the IP user to
Figure 3: Work flow of the P1735 standard.
develop its SoC, and protect the rights of the IP author. Note that
the EDA tool is run on a platform that the IP user controls.
From an economic perspective, the IP author and IP user have
competing interests. The former wants to maximize the return on
its (often signficant) research and developement investment; the
latter wants to use various pieces of IP at minimal cost. The P1735
standard effectively adopts the viewpoint that the IP user is the
adversary. A malicious IP user would like to recover the plaintext IP,
and possibly find and exploit holes in the access control mechanism.
The EDA tool is considered to be trusted, and is thus permitted by
the IP author to carry out decryption. Also, it is the EDA tool that
provides code for IP encryption to the IP author, and this code is
trusted. The working assumption is that the EDA tool will not leak
to the IP user anything beyond what the IP author deems acceptable,
this being specified in the Rights Block of the protected IP.
The P1735 standard provides recommended practices for using
encryption in order to ensure confidentiality of IP. To support inter-
operability and broad adoption, it also specifies a common mark-up
format to represent an encrypted IP. The mark-up format uses
standard-specific variables, or pragmas, to identify and encapsulate
different portions of the protected IP. It also uses these pragmas to
specify the encryption algorithms, digest algorithms, etc.
The standard also provides mechanisms to support rights man-
agement and licensing; together these enable IP authors to assert
fine-grained access control. With the rights management function-
ality, an IP author can assert which output signals are accessible to
the IP user when the EDA tool simulates the IP for the latters ben-
efit. The licensing functionality allows access to authorized users
only, e.g., companies that have paid for the rights to use the IP.
The basic work flow of the standard is shown in Figure 3. The
standard mandates AES-CBC (but allows for other blockciphers)
and RSA (≥ 2048) for symmetric and asymmetric encryption, re-
spectively. For AES it recommends a key size of 128 or 256. We note
that while the tool may perform simulation, synthesis, and other
processes on the IP, it never reveals the IP in its plaintext format to
the IP user [13].
2.3 Hardware Trojans
Due to the globalization of the semiconductor design and fabrica-
tion process, SoCs are increasingly becoming vulnerable to mali-
cious modifications often referred to as hardware Trojans [16] [25].
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1536These hardware Trojans can create backdoors in the design, through
which sensitive information can be leaked, and other possible at-
tacks (e.g., denial of service, reduction in reliability, etc.) can be
performed.
The basic structure of a hardware Trojan consists of two main
parts: trigger and payload. A Trojan trigger is an optional part that
monitors various signals and/or a series of events in the SoC. Once
the trigger detects an expected event or condition, the payload is
activated to perform a malicious behavior. Typically, the trigger is
expected to be activated under extremely rare conditions, so the
payload remains inactive for most of the time. When the payload is
inactive, the SoC acts like a Trojan-free circuit, making it difficult
to detect the Trojan [26]. A Trojan can have a variety of possible
payloads. In this paper, we will focus on payloads which leak secret
information [34].
3 CONFIDENTIALITY ATTACKS
In general, IP authors price in a risk premium to compensate for
the risk of revenue loss should their IP be used in an unautho-
rized manner. The P1735 standard aims to mitigate this risk, and
to establish trust in the semiconductor IP market, by mandating
cryptographic mechanisms meant to provide confidentiality (at
least) for IP. Reducing the risk should reduce the cost of the IPs;
increasing trust should enable IP authors to engage in transactions
with more prospective IP users. To this end, the standard states [13,
Section 4.3]
“in its encrypted form, and in the absence of the de-
cryption key, the data is secure both in transmission
and at rest in a file ... There are no independent means
to decrypt and access it at the IP user premises”
but we show that this claim is completely false.
We present two different attacks to break the confidentiality of
an encrypted IP. The first is a standard padding-oracle attack (POA),
and the other is a new, related, syntax-oracle attack (SOA). These
attacks extract the plaintext of an encrypted IP without the knowl-
edge of the key. (Readers who are very familiar with padding-oracle
attacks may wish to skip directly to the syntax-oracle attack in
Section 3.2.) Moreover, in Section 4 we show that once the confi-
dentiality of the IP is broken, the adversary can insert any targeted
hardware Trojan into the original IP ciphertext.
3.1 Padding-Oracle Attack
The P1735 standard mandates CBC-mode for symmetric encryption.
CBC-mode operates on strings whose length is a multiple of the
blocksizse of blockcipher being used, e.g. 128-bits when using AES-
CBC as recommended by the standard. Therefore, one must attend
to padding of plaintexts to make them block-aligned. The standard
makes no recommendation for any specific padding scheme, leaving
the tool vendors to decide what to do. (Recall that the EDA tool
provides code for encryption of IP intended for use with that tool.)
The Synplify Premier tool supports PKCS#7 padding. In this
scheme, if the last block of plaintext is block-aligned, a new block
is added and filled with the padding byte (PB) which is equal to the
block-size in bytes. Otherwise, the last block is padded with PB till
the block gets full. In this case, PB is equal to the difference of block
size in bytes and the number of bytes in the last block. For example,
if the last block is short by 2 bytes, it is padded with 0x02 0x02.
During decryption, if the last plaintext block has incorrect padding,
a padding error is reported.
2[16] = C2[16] ⊕ д ⊕ 0x01, where C′
In the classic padding-oracle attack [35], Vaudenay used this er-
ror as an oracle (PAD) to recover the plaintext (P) without knowing
the key. In this attack, when the oracle is given a ciphertext (C)
as input, it returns 1 if there is a padding error, and 0 otherwise.
Suppose the target ciphertext is C = IV ∥ C1 ∥ C2 ∥ C3, where IV is
the initialization vector, and all blocks are 16 bytes long. Letting
Cj[i] and Pj[i] denote the ith byte in the jth block of the ciphertext
and plaintext, respectively, the attack proceeds as follows. The ad-
versary starts guessing bytes in the last block (C3) in the reverse
order, i.e., she first guesses the 16th byte. Let the guess byte be д.
She xors C2[16] with the guess byte and padding byte, PB (= 0x01),
i.e C′
2 is modified C2. She con-
catenates the ciphertext blocks and IV as shown earlier, and queries
the padding oracle. If the oracle returns 0 (no padding error), she
repeats the process with a new guess byte. When 1 is returned, she
stops, initializes P2[16] with the value of д, and xors C2[16] with
0x01 to remove the padding. The adversary then repeats the process
for the 15th byte, with pad as 0x02. Note that she has to xor C2[16]
with 0x02, so that the last two bytes in P3 become 0x02 0x02 (valid
padding) when the adversary correctly guesses P2[15]. She repeats
this process to guess all the bytes in C3. Then, she truncates the
last block to make C2 as the current target block, and repeats the
attack to recover plaintext from C2.
In the case of AES and a plaintext alphabet of ASCII bytes, the
attack takes a maximum of 256 × 16 × N attempts to find all of the
plaintext, where N is the number of ciphertext blocks. In each at-
tempt, the tool performs N decryptions. Therefore, the algorithmic
complexity of the attack is O (N 2).
Defense. The current versions of the standard have no means to
protect against the POA. Simple ways to fix this include
• Changing the padding scheme to AByte or OZ padding. Since
these schemes have no invalid padding, decryption never
fails due to incorrect padding [9, 28].
• Changing to AES-CTR mode, which requires no padding of
the plaintext.
The above two modifications require minimal changes to the mark-
up format mandated by the current version of the standard, al-
though both would require tool-specific modifications. Anyway,
neither of these simple defenses actually prevent recovery of the
plaintext, as we will see in the next section.
Using a proper authenticated encryption (AE) scheme would
prevent the POA and the new attack that we are about to give.
From a cryptographic perspective, we recommend mandating an
AE scheme with support for associated data (AEAD) [31]. The
associated data (AD) should be all of the digital envelope that is not
the Data Block, so that there is a proper binding between AD and
Data Block. Our recommendation would be achieved with the least
number of changes by demanding (1) that the HMAC computation
always is carried out, (2) that the scope of the HMAC computation
is the entirety of the digital envelope, specifically including the
encrypted Data Block, and (3) that every decryption failure results
in a single error signal. For the last, this means that the padding
Session G3:  Crypto StandardsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1537must be checked even if the HMAC check fails, to avoid enabling
the POA via a timing-channel [11] Moreover, no processing of the
digital envelope beyond these checks should occur if decryption
fails.
That said, supporting any AEAD scheme would require signif-
icant changes to the standard and the EDA tools. So it is worth
evaluating other provably secure AEAD schemes with respect to
their efficiency and operational considerations.
3.2 Syntax-Oracle Attack
EDA tools need to provide an extensive debugging environment so
that any SoC design issues can be swiftly identified. This applies
to encrypted IPs as well, since IP users need the ability to detect
potential design errors and systhesis issues in the purchased IPs.
The P1735 standard highlights these needs, as we noted in the
Introduction with quotes from [13, Section 10].
Our SOA exploits the syntax errors reported by EDA tools in a
manner similar (but not identical) to the POA. The main strategy
is to inject into the decrypted plaintext, via manipulations of the
ciphertext, a particular character that will elicit a unique syntax-
error message when the plaintext is processed by the tool.2 In Verilog
grammar, we have found that the ` (backquote) character has these
unique properties. The ` symbol is a Verilog keyword that indicates
preprocessor directives such as “define”, “include”, and “ifdef”. For
example, “` define S0 1” defines a macro S0 that is replaced by 1
during preprocessing of the plaintext IP. If the backquote character
is followed by any token other than the supported directives, the
EDA tool reports one or more syntax errors. (This is a property
of Verilog parsers.) These errors can be used akin to the padding
oracle to recover the plaintext IP.
For example, when Synplify encounters a misplaced backquote
symbol, it throws one of the following two errors: “expecting iden-
tifier immediately following back-quote” or “Unknown macro”. In
our attack, we use these two error messages to affect a syntax or-
acle (SO). When the oracle is given a ciphertext (C) as input, it
returns 1 if either of these two errors occurs, and 0 otherwise.
We use the same example as the POA to explain our SOA. Let
the ciphertext message be C = IV ∥ C1 ∥ C2 ∥ C3. In SOA, the at-
tacker can target any ciphertext block. (In padding oracle attack,
the target block should be the last block of ciphertext; the ciphertext
can be truncated to make the target block, the last block.) Let the
target ciphertext block be C2. The attacker can guess the plaintext
characters of the target block in any order.
Let’s suppose the attacker is interested in learning the 5th byte of
the 2nd block, i.e., P2[5]. The SOA attack for this case is illustrated in
Figure 4. We first replace C1[5] with the guess byte, д, i.e., C′
1[5] = д,
where C′
1[5] is the modified value of C1[5]. We then query the SO.
If the oracle returns 0, the same process is repeated with a new
guess byte. When SO returns 1, we stop because it indicates that
the ` character is present at P′
2[5], the modified value of P2[5]. We
extract the P2[5] value by C1[5] ⊕ 0x60 ⊕ д. (0x60 is the ASCII
value of ` ). The same process is repeated to find the rest of the
plaintext.
2We define a unique syntax error as an error that is caused only by presence of a
particular character in the IP.
To see that the attack works, consider the following. Before the
K (C2). When the SO
attack, P2[5] = C1[5] ⊕ y[5], where y = E−1
returns 1,
• P′
• P′
• C′
2[5] = C′
2[5] = 0x60, and
1[5] = д.
1[5] ⊕ y[5],