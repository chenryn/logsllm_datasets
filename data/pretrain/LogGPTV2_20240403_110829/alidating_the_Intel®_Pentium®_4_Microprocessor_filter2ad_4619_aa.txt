title:alidating the Intel® Pentium® 4 Microprocessor
author:Bob Bentley
Validating the Intel@ Pentium@ 4 Microprocessor 
Bob Bentley 
Intel Corporation 
bob.bentley @intel.com 
Abstract 
Developing  a  new  leading-edge  IA-32 microprocessor is 
an  immensely  complicated  undertaking,  and  it  should 
come  as no surprise  to learn  that  logic  bugs  exist  in  the 
design.  This is particularly  true  when, as is the case with 
the  Pentium@ 4  processor,  the  microarchitecture 
is 
significantly  more  complex  than  any  previous  IA-32 
microprocessor and  the  implementation  borrowed  almost 
nothing from any previous implenzentation. 
The purpose  of  this paper is to provide data on the bugs 
that  were found prior to initial silicon  on the Pentium’  4 
processor, and  to describe  how we went about the task of 
finding them.  We hope that by sharirig our experience and 
insights,  other  microprocessor  designers  and  validators 
will  be able  to benefit from them.  As Doug  Clark [ I ]  has 
remarked:  “Finding  a  bug  should  be  a  cause  for 
celebration.  Each  discovery  is  a  small  victorl).; each 
marks an incremental improvement  in the design. ” 
1. Introduction 
in 
Validation  case  studies  are  relatively  rare 
the 
literature of computer architecture  and design  ([2] and  [3] 
contain  lists  of  some  recent  papers)  and  case  studies  of 
commercial microprocessors are even rarer.  This is a pity, 
since  there  is  as  much  to  be  learned  from  the  successes 
and  failures  of  others  in  the  validation  area  as  in  other, 
more richly  documented, fields of  computer  engineering. 
In  fact, given the cost of  an undetected  bug escaping into 
production  silicon  -  where  cost is measured  not only  in a 
narrow  monetary  sense but  more broadly  in the impact on 
a society  that  is  increasingly dependent  on computers - it 
can  be  argued  that  the  validation  field  deserves  much 
more attention than it has received to date. 
The  microarchitecture  of  the  Pentium@ 4  processor  is 
significantly  more  complex  than  any  previous  IA-32 
microprocessor,  so the  challenge  of  validating  the  logical 
correctness  of  the design in a timely fashion was indeed a 
daunting  one.  In  order to meet this challenge, we applied 
a  number  of  innovative  tools  and  methodologies  which 
enabled  us  to  keep  validation  off  the  critical  path  to 
tapeout  while  meeting  our  goal  of  ensuring  that  first 
silicon  was  functional  enough  to  boot  operating  systems 
and run applications.  This in turn enabled the post-silicon 
validation  teams  to quickly  “peel  the  onion”, resulting  in 
an elapsed  time of only  10 months from initial  tapeout to 
production  shipment qualification  - an  Intel  record  for  a 
new IA-32 microarchitecture. 
2. Validation Overview 
The Pentium@ 4 processor  is Intel’s most advanced IA- 
incorporating  a  host  of  new 
32  microprocessor, 
microarchitectural  features  including  a  400-MHz  system 
technology,  advanced  dynamic 
bus,  hyper-pipelined 
execution,  rapid  execution  engine,  advanced 
transfer 
trace  cache,  and  Streaming  SIMD 
cache,  execution 
(Single  Instruction,  Multiple  Data) Extensions  2  (SSE2). 
A brief  timeline  of the Pentium@ 4 processor project, as it 
relates to this paper, is as follows: 
Structural RTL (SRTL) work began in late  1996 at 
the  cluster  level,  with  the  first  full-chip  SRTL 
integration occuring in the spring of  1997. 
Structural  RTL  was  largely completed  (except  for 
bug  fixes  and  rework  occasioned  by  speed  path 
fixes) by  the end of Q2 1998. 
A-step tapeout occurred in December  1999. 
First packaged parts arrived in January 2000. 
Initial  samples  were  shipped  to  customers  in  the 
first quarter of 2000. 
Production  ship  qualification  was  granted 
October 2000. 
PentiumO 4 processor  was  launched  in  November 
2000 at frequencies of  1.4 and  1.5 GHz. 
in 
For the most part, we applied the same or similar tools 
and methodologies  to validating the Pentium@ 4 processor 
that  we  had  used  previously  on 
the  Pentium@ Pro 
processor.  However,  we  developed  new  methodologies 
and  tools  in  response  to  lessons  learnt  from  previous 
projects and to address some new challenges raised by  the 
Pentium@ 4 processor  design. 
In  particular,  the  use  of 
Formal  Verification,  Cluster  Test  Environments  and 
focused  Power  Reduction  Validation  were  either  new  or 
0-7695-1101-5/01 $10.00 0 2001 IEEE 
493 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:57:13 UTC from IEEE Xplore.  Restrictions apply. 
greatly  extended  from  previous  projects;  each  of  these  is 
discussed in more detail in a section below. 
3. Staffing 
The first  challenge  that  we faced  was  to  build  a  pre- 
silicon validation team.  Fortunately, we had a nucleus of 
10 people who had worked on the Pentium Pro'  processor 
and  who could  do the  initial planning  for the Pentium'  4 
project while at the same time working with the architects 
and  designers  who  were  refining  the  microarchitectural 
concepts.  However,  it  was  clear  that  10  people  were 
nowhere  near  enough  for  a  42  million-transistor  design 
that ended up requiring more than  1 million lines of SRTL 
code  to  describe  it. 
So  we  mounted  an  extensive 
recruitment  campaign  (focused  mostly  on  new  college 
graduates) tha1 resulted  in  approximately 40 new  hires  in 
1997 and  another  20  in  1998.  Not  only  did  this  take  a 
large amount of effort from the original core team (at one 
stage  we  were  spending  on  aggregate  25%  of  our  total 
effort  on  recruiting!),  but  it  also  meant  that  we  faced  a 
monumental  task  in  training  these  new  team  members. 
However,  this  investment  repaid  itself  handsomely  over 
the  next  few  years  as  the  team  matured  into  aAighly 
effective  bug-finding  machine  that  was  responsible  for 
finding almost 5000 of the 7855 total logic bugs that were 
filed prior to tapeout.  In doing so, they  developed an in- 
depth knowledge of  the Pentium'  4 microarchitecture that 
has  proved  to  be  invaluable  in  post-silicon  logic  and 
speedpath debug and also in fault-grade test writing. 
4. Pre-Silicon Validation Environment 
Pre-silicon  logic  validation  was  done  using  either  a 
cluster-level  or full-chip SRTL model running in the csim 
simulation  environment  from  Intel  Design  Technology. 
We  ran  these  simulation  models  on  either  interactive 
workstations  or  compute  servers  - initially,  these  were 
legacy  IBM RS6Ks running AIX, but  over  the  course of 
the  project  we  transitioned  to  using  mostly  Pentium'  I11 
based  systems running Linux.  The full-chip model ran  at 
speeds  ranging  from  05-0.6  Hz  on  the  oldest  RS6K 
machines to 3-5 Hz on the Pentium'  111 based systems (we 
have recently  started to deploy Pentium@ 4 based  systems 
into  our  computing  pool  and  are  seeing  full-chip  SRTL 
model  simulation  speeds  of  around  15  Hz  on  these 
machines).  The speeds of  the  cluster models  varied, but 
all  of  them  were  significantly  faster  than  full-chip.  Our 
computing  pool  grew  to  encompass  several  thousand 
systems by  the end  of  the project, most of  them compute 
servers.  We  used  an  internal  tool  called  netbarch  to 
submit  large  numbers  of  batch  simulations  to  these 
systems, which we were able to keep utilized at over 90% 
494 
of  their  maximum  24/7  capacity.  By  tapeout  we  were 
averaging  5-6  billion  cycles  per  week  and  had 
acciimulated over 200 billion  (to be precise, 2.384 *  IO") 
SRTL simulation cycles of all types.  This may sound like 
a lot, but to put  it into perspective, it is roughly equivalent 
to 2  minutes on a single  1 GHz CPU! 
5. Formal Verification 
'The  Pentium'  4  processor  was  the  first  project  of  its 
kinli  at Intel to apply Formal Verification (FV) on  a large 
scale.  We decided early  in  the  project  that  the  FV  field 
had  matured  to the  point  where  we could consider trying 
to  use  it  as  an  integral  part  of  the  design  verification 
process  rather  than  only  applying  it  retroactively,  as  had 
been done on previous products such as the  Pentium@ Pro 
processor.  However,  it  was  clear  from  the  start  that  we 
couldn't  formally  verify the entire design - that was  (and 
still  is) way  beyond  the  state of  the  art  for  today's  tools. 
So we  decided  to  focus on  the  areas of  the  design  where 
we believed that FV could make a significant contribution 
- in  particular,  the  floating-point  execution units  and  the 
instruction  decode  logic.  As  these  areas  had  in  the  past 
been  sources  of  bugs  that  escaped  detection  and  made  it 
into released  silicon, this allowed us to apply FV to some 
reall problems with real payback. 
One of  the  major  challenges  for  the  FV  team  was  to 
develop  the  tools  and  methodology  needed  to  handle  a 
large number of  proofs in  a highly  dynamic environment. 
For  the  most part  we took  a model-checking approach to 
FV, using the prover tool  from Intel's  Design Technology 
group  to  compare  SRTL  against  separate  specifications 
written  in  FSL.  By  the  time  we  taped  out  we  had  over 
10,000 of  these  proofs  in  our  proof  database,  each  of 
which  had  to  be  maintained  and  regressed  as  the  SRTL 
changed  over the  life  of  the  project.  Along the  way,  we 
found  over  100 logic  bugs  - not  a  large  number  in  the 
overall scheme of things, but about 20 of them were "high 
quality"  bugs  that  we  do  not  believe  would  had  been 
found by  any other of our pre-silicon  validation activities. 
TWO of  these  bugs  were  classic floating-point  data space 
problems: 
-  The  FADD  instruction  had  a  bug  where,  for  a 
specific  combination  of  source  operands,  the  72-bit 
FP adder was setting the carryout bit  to  1 when there 
was no actual carryout 
-  The FMUL instruction  had  a bug  where,  when  the 
rounding  mode  was  set to  "round  up",  the  sticky  bit 
was  not  set  correctly  for  certain  combinations  of 
source operand mantissa values, specifically: 
src1[67:0]  := X*2'"15' + 1 *2' 
src2[67:0] := Y*2'"15' + 1*2' 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:57:13 UTC from IEEE Xplore.  Restrictions apply. 
where  i+j = 54,  and  (X,Y) are any integers that 
fit in the 68-bit range 
Either of these bugs could easily have gone undetected' 
not just in the pre-silicon  environment but  in  post-silicon 
testing  also.  Had they  done so, we would have faced  the 
prospect  of  a  recall  similar  to  the  Pentium'  processor's 
FDIV problem in  1994. 
We put a lot of effort into making the regression  of the 
FV proof database as push-button  as possible,  not only to 
simply  the  task  of  running  regressions  against  a  moving 
SRTL target but because  we viewed reuse as being one of 
the  keys to proliferating  the quality  of the original design. 
This approach  has had  an  immediate payoff  a regression 
of  the database of  10,000 proofs  on  the  first proliferation 
of the Pentium@ 4 processor has already yielded a complex 
floating point bug. 
6. Cluster-level Testing 
One of the fundamental  decisions that we took early in 
the  Pentium'  4  processor  development  program  was  to 
develop Cluster  Test Environments (CTEs) and  maintain 