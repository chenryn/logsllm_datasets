In practice, K might include information from sources outside
of our model as well, for example, partial information on the
target password derived from smudges on the touch screen
of a smartphone [2]. We consider these side-channels out of
our scope. For the purpose of our analysis, the items above
are a complete characterization of the types of information
an adversary can have. Hence, by taking into account all
combinations of these items, we get an exhaustive view on an
adversary’s success probability.
We begin by reasoning that the adversary must know a
user’s address book to glean information on a target secret.
Assume he does not. Then he may know at most all secrets
other than the target secret and he may know all passwords. The
secrets yield information on their corresponding passwords but
passwords only yield information on other passwords through
digests in the password table. Therefore, the best the adversary
can hope is to learn the target password, which we just assumed
he already knows. Since F comprises all functions from P to
L, there exist equally many seeds σ for any pair of ρ and γ so
that Fσ(ρ) = γ. This follows from a simple labeling argument.
Hence, given the target password but not the target seed, all
secrets are equally likely, which completes our argument.
In what follows, we assume that the adversary has obtained
information from the address book table and the password table.
We are left with two types of information transfers to analyze:
1) The ﬁrst transfer is from secrets to passwords through the
contents of the password table.
2) The second transfer is from passwords to secrets through
the contents of the address book table.
Remember that the goal of the adversary is to glean information
on the target secret based on at most a ﬁxed number of other
leaked secrets and information in the user’s password table and
address book table.
We begin with the second type of transfer. Our analytical
goal is to measure the probability distribution over secrets given
partial knowledge about a password. Note that the information
whether the target seed is selected (as opposed to having been
chosen entirely at random) does not help here since the number
of seeds to choose from are the same for every password
and digest combination. Therefore, we ignore selected seeds
for now. The following deﬁnition models the secret guessing
experiment accordingly.
Deﬁnition 4 (Guessing secrets experiment).
The secrets guessing experiment is deﬁned by the probability
space (Ω,P(Ω), Pr), with
Ω := {(ρ, σ) ∈ P × S}.
In order to work with this deﬁnition we deﬁne the random
variables R that gives the target password, Σ that gives the
target seed and Γ the target secret. In detail, for given ρ, σ or
γ:
• R = ρ denotes all events (ρ, σ) with σ ∈ S,
• Σ = σ denotes all events (ρ, σ) with ρ ∈ P , and
• Γ = γ denotes all events (ρ, σ) ∈ Ω with Fσ(ρ) = γ.
As we will see in the next section, if an adversary learns
secrets and seeds he will learn a candidate set C of passwords
that are all equally likely. The next lemma gives the guessing
probability with knowledge of C.
Lemma 5 (Guessing secrets). Let C be a set of equally likely
candidate passwords and let c = |C|. We deﬁne M = Fσ(C).
Then the probability
Pr[Γ = γ | Σ = σ ∧ ρ ∈ C]
is binomial distributed with the average value
(cid:0)2(cid:96) · (1 − (1 − 2−(cid:96))c)(cid:1)−1
for every γ ∈ M.
We discuss the ﬁrst type of information transfer next, that
is, how an adversary may gain knowledge of a set of candidate
passwords C. Speciﬁcally, we investigate what happens if the
adversary learns the contents of Alice’s address book and her
shared secrets. We obtain results about the size of the password
candidate set C and that all passwords within C are equally
likely. These results and the results from Lemma 5 together
yield the overall guessing probability.
Recall that in the selected seeds scenario, Alice ﬁxes a
password ρ and a secret γi and then chooses a seed σi so
that Fσi(ρ) = γi. Let Si(ρ) denote the set from which Alice
chooses the seed σi. If Alice does not ﬁx a secret γi then let
Si(ρ) denote the set of all seeds, that is, Si(ρ) = S. Next, we
model the probability distribution over passwords if seeds and
secrets are learned.
Deﬁnition 5 (Guessing passwords experiment).
The password guessing experiment is deﬁned by the probability
space (Ω,P(Ω), Pr), with
Ω = {(ρ, σ1, . . . , σN ) | ρ ∈ P, σi ∈ Si(ρ)},
| P | · N(cid:89)
1
i=1
1
| Si(ρ) | ,
a digest γi is given
else.
and
where
Pr[(ρ, σ1, . . . , σN )] :=
(cid:26){σ | Fσ(ρ) = γi}
Si(ρ) :=
S
In addition to the random variables we have deﬁned before
(R, Σ and Γ) we need random variables Σi and Γi. Variable
Σi describes the seed for the i-th pair and variable Γi describes
7
permissible then Alice may protect herself against denial of
service attacks in the following way. In addition to her secret
γ, Alice shares a randomly generated token τ. She stores τ
in plain text in her address book and sends τ, γ to Bob. Bob
only veriﬁes whether Alice’s password is correct if the received
token τ matches the one he has stored for Alice. It is easy to
see that an adversary succeeds in locking out Alice only if he
guesses the value τ, the probability of which is negligible in
τ. Note that in this case, τ is related to safety and not security.
Hence, Alice only looses denial of service protection (safety)
if her Address book is disclosed.
Alice may use a similar approach to achieve backwards
compatibility with servers that are oblivious to KYO, that
is, servers that
lock users out only after multiple failed
authentication attempts (instead of one failed attempt). As
before, Alice generates and stores a token τ in her address book
and sends τ||γ for authentication. Note that τ is now related to
security and Alice sacriﬁces KYO’s protection against address
book loss in exchange for achieving backwards compatibility.
However, KYO’s protection against server-side disclosures
remains intact.
Besides the obvious uses of KYO, we originally designed it
to help solve a problem that arises in whistleblowing systems.
Consider a whistleblower Alice who established contact with
a journalist Bob and wishes to send e-mail to the journalist
using an anonymous re-mailer. In order to authenticate herself
to Bob, Alice encrypts a shared secret along with the message.
A typing error would stall her account with Bob and hence it
is desirable to check locally that the secret is the correct one.
An incorrect secret would then be a giveaway that Alice is in
danger. However, it might be desastrous for the whistleblower
if the adversary found the secret on her computer because
he could use the secret to conﬁrm that she indeed is the
whistleblower. With KYO, she can keep her secret on her
computer protected with a 4 character password even if the
adversary is computationally unbounded.
VII. RELATED WORK
KYO families are an exploration of ideas similar to those of
collisionful hash functions [3] or collision rich hashing proposed
previously to secure ﬁle checksums against manipulation [19]
or to protect key exchange protocols against man-in-the-middle
attacks using weak passwords [1]. KYO can be understood as
an extension of collisionful hashing to password sharing and
password management.
A. Server-side mechanisms
Cappos proposed PolyPassHash [6], which is a mechanism
meant
to mitigate password database leaks from servers.
The mechanism keeps users’ salted and hashed passwords
xor’ed with a per-user share. Without knowledge of a share,
adversaries cannot brute-force the associated password. Shares
are computed using a (k, n)-threshold scheme. The general idea
is that once k users have provided their passwords, k shares
can be recovered and all other shares can be computed. From
this moment on, logins can be veriﬁed. In order to allow some
level of password veriﬁcation before the threshold is reached,
Cappos suggests that each database entry leak some bits of the
salted and hashed passwords.
This bears some resemblance to how KYO uses digests.
However, whereas digests are a safety mechanism in KYO,
they are a security mechanism in PolyPassHash. In KYO, a
random digest collision results in a fail-safe lockout whereas
it leads to a security breach in the case of PolyPassHash.
Furthermore, adversaries can use the leaked bits to conﬁrm
suspected password re-use, for example, if they have obtained
other login credentials of some users in the PolyPassHash
database. This in turn allows one to recover shares. KYO, on
the other hand, is designed speciﬁcally to mitigate the risks of
multiple related database leaks (and client leaks).
It is worth noting that PolyPassHash can be broken by
bribing at most k users into revealing their passwords after a
database leak. This poses no subjective risk to users because
they can change their passwords to new ones before revealing
their old ones. An even easiest and cheaper attack is to open
k accounts at the service before downloading the password
database. This means that k passwords are known and all shares
can be recovered easily. In the KYO case, password database
leaks provide no information on users’ passwords unless clients
are breached as well, because the seeds are only on clients.
HoneyWords [14] is another mechanism to mitigate pass-
word database leaks. The server keeps k − 1 decoy passwords
along with each correct one, in random order. When a user
logs in, the server queries a trusted honey checker service
with the user id and obtains the index of the correct password,
which is used to verify the user’s input. If an adversary obtains
the bassword database then he has a 1/k chance to choose
the right password. If he chooses a decoy then the server
locks the associated account. Obviously, the decoys must be
chosen so that they are not easily distinguished from the real
password. However, adversaries may attempt to exclude decoys
by submitting them to other services posing as the same user.
If the attempt is successful then the user has very likely re-used
her password. If the attempt is unsuccessful then the password
might have been a decoy and the adversary tries another one.
SAuth [16] also uses decoys to mitigate password database
leaks of a service. Decoys are valid alternative passwords,
though. Their purpose is not to protect the breached service
but to mitigate attacks on other services in cases of password
re-use. If two databases are leaked then, again, password re-
use is insecure. As in other decoy uses, the challenge is to
generate decoys in a fashion that makes them indistinguishable
from user-provided passwords. SAuth also requires that users
authenticate themselves not only with a valid password but
also that they log into a vouching service with the password
of the vouching service. Both services must be speciﬁed
beforehand and assurances must be provided that both accounts
belong to the same individual. A downside is that users are
inconvenienced compared to the status quo because SAuth
incurs additional interaction and login delays.
Mechanisms that employ decoys typically require O(k · n)
memory where n is the number of passwords and k − 1 the
number of decoys. For large databases, this incurs considerable
overhead. If memory is plentiful then passwords can be pro-
tected against off-line attacks in a bounded retrieval model [7].
The underlying assumption is that the password database is
too large to be leaked in its entirety. KYO, on the other hand,
requires O(n) memory, the size of a contemporary password
database.
11
B. Client-side mechanisms
Many password managers, for example, those proposed by
Ross et al. [23], [13] and Haldermann et al. [23], [13], apply
collision resistant hash functions to various combinations of
a user password, user name, site name and a random nonce.
A usual assumption is that the hash function is slow enough
so that an exhaustive search for the password is infeasible.
However, this type of protection requires that passwords are
long enough to withstand exhaustive search and that the hash
function is regularly updated to reﬂect advances in algorithms
and processor speed. KYO, on the other hand, is designed
to be resistant against computationally unbounded adversaries.
Assume, for comparison, that calculating a secret takes 1 second
on commodity hardware on a single CPU core and further
assume that KYO is conﬁgured to use 25 bit long random
passwords. Since exhaustive searches are trivially parallelized,
an eight-core CPU would take at most 48 days to ﬁnd the
password. KYO, on the other hand, remains secure.
Several works propose means to harden password managers
against risks such as a client breach. Perhaps the most prominent
work is Kamouﬂage due to Bojinov et al. [4]. The authors
pointed out that most password manager implementations could
be brute-forced. They improved upon the password manager
concept by introducing decoy databases so that an adversary
cannot decide which database holds the correct password for a
given service and needs to guess randomly. Failure to guess
correctly would eventually cause the attacked account being
locked, for example, based on a three-strikes rule. The beneﬁts
come at a cost, though. Bojinov et al. recommend 105 databases
per user as a working conﬁguration. Furthermore, the way in
which databases are populated is quite involved because, again,
decoys must be generated so that the adversary cannot easily
tell them apart from real passwords.
iMobileSitter [12] is a password manager for smartphones.
It accepts any master password that is input and, if the master
password is false, decrypts its secrets erroneously but plausibly-
looking. For example, a four digit PIN is always decrypted into
a (different) four digit PIN. In order to hint at incorrect master
passwords, it displays an iconic image along with retrieved
secrets and expects that the user recognizes that a wrong image
is displayed along with a falsely decrypted secret. By virtue of
being a password manager rather than a password generator,
iMobileSitter is susceptible to known-plaintext or plausible
plaintext attacks on the master password. In particular if the
secrets have hidden structure, for example, secret strings in
l33t sp34k, this can be leveraged in a brute-force attack on
the master password. This also means that iMobileSitter is not
robust against server breaches, which yield known plaintexts.
Additional approaches to hardening secret key encryption
use bits of information of a users’s personal life in order to
encrypt the secret key [8], they use multiple low entropy pass-
words in order to generate a high entropy password [11] or they
leverage secure personal devices for password recovery [20].
there is password-corrective
hashing [21]. In this approach hash functions map similar
passwords to the same output, for example, passwords that
differ with respect to character transpositions and substitutions.
In contrast to our work, password-corrective hashing does not
take password sharing into account. Furthermore, a variety of
On the input error side,
factors may inﬂuence the input errors users make, for example,
the keyboard layout and the input method [24]. In particular,
soft keyboards on mobile phones were shown to yield different
input error rates. We believe it likely that different layouts also
have an inﬂuence on the types of errors. Password corrective
hashing would have to account for all conceivable inﬂuences,
particularly if passwords are meant to be shared among different
devices.
C. Related work summary
In summary, while it may appear that KYO uses elements
that have been published prior, none of the cited works and no
existing password management solution of which we are aware
offers the combination of beneﬁts that KYO offers while KYO
suffers from none of the limits and downsides that existing
approaches have. Some properties of KYO make it quite unique
and an interesting subject for further study. In particular, KYO
demonstrates that surprisingly short passwords can offer a high
level of security against unbounded attackers while protecting