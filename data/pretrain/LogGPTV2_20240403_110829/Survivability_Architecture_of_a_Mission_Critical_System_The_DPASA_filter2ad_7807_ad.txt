Proxy, and starting it to act 
as a man-in-the-middle10.    
(3-2) Exploit timing to kill    
Cisco  Security  Agent  be-
fore detection, and then kill 
LC11. 
After  (3-2)  and  (3-1),  as  a 
PSQ  Proxy,  corrupt 
the 
content of the IO.  
Take  over  a  DC  (Down-
stream  Controller)  Proxy. 
Drop  the  client  (one  that 
was  detached  earlier)’s  re-
quest to connect. 
Break  into  Q1PSQ  exploit-
ing the same security hole 
Connect to SM 
1.  Host  Protection  Do-
mains  prevent  the  kill-
ing  of  the  PSQ  proxy. 
If not, 
2.  Host  Protection  Do-
mains  prevent  install-
ing new PSQ Proxy. If 
not, 
3.  LC  notices  a  change  in 
the  file  system  and  re-
stores it. If not, 
4.  LC  notices  a  change  of 
PID  of  the  PSQ  Proxy 
and  kills 
the  PSQ 
Proxy.  
All  above  defensive  action 
send alerts. 
SM  notices  loss  of  heart-
beat. Block the NIC to stop 
further attack propagation.  
Since  an  IO  is  signed  end-
to-end, 
the  PSQ  server 
sends  an  alert  and  rejects 
this IO.  Client does not re-
ceive  an  ACK  so  resends 
the IO. 
1.  Host protection domains 
and  LC  prevent  this 
similar  to  the  first  row 
of this table.  If not, 
2.  After inviting the client, 
the  SM  operator  no-
tices  that  the  client  is 
not registered. The op-
erator checks the alerts 
generated  by  the  LC 
the 
and  others  on 
Q1AP 
and 
blocks 
Q1AP’s NIC. 
Client is re-invited from the 
Q1SM  and  connects  suc-
cessfully. 
Q1PSQ runs different oper-
ating  system  so  the  same 
security hole does not exist, 
unless it is in Java VM. 
There  is  no  physical  con-
10 This  was attempted in the external  Red Team exer-
11 When the external Red Team was allowed on Q1AP, 
they  successfully  did  this  and  ran  their  own  PSQ  proxy. 
The  PSQ  Server  noticed  the  change  of  the  serial  ID  and 
dropped the traffic sent from this proxy. 
cise. 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
8 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:31 UTC from IEEE Xplore.  Restrictions apply. 
nection between the execu-
tive  zone  and  the  crumple 
zone. 
4.4  Operations Zone – PSQ Host (location 4) 
In  this  set  of  attacks,  we  assume  that  the  attacker  has 
made it into the operations zone, and has   access to the 
Q1PSQ host. The redundancy of multiple PSQ servers, the 
PSQ server’s design based on weak assumptions (where it 
does not solely trust its own decision but uses a quorum), 
detection and correlation (polling of component’s status), 
and an adaptive response mounted by an SM counter the 
attacker’s attempt to disrupt the PSQ flow.    
Attack Action 
Shut  down 
server running on Q1PSQ. 
the  database 
Defensive Action 
1.  Host  Protection  Domain 
prevents this. If not,  
2.  Q1SM polls the status of 
the  database,  notices 
that  it  no  longer  re-
sponds,  and  displays 
the alert to the SM op-
erator.  Restarts  the  da-
tabase and the PSQ op-
erations continue. 
Q1PSQ  gets  unauthorized 
reply but before replying as 
such,  consults  other  PSQ 
servers.  Other PSQ servers 
reply authorized, so the cli-
ent is not denied. 
Modify the role table in the 
database  and  delete  a  role 
for a client. 
4.5 
Executive Zone – SM Host (location 5) 
In the final set of attacks, we assume that the attacker 
has made it deep into the system, past the operations zone 
into the executive zone and is now on the Q1SM host. The 
redundancy  of  quads  (multiple  SMs  and  PSQ  Servers), 
adaptive  responses  mounted  by  the  SMs,  and  the  design 
based  on  the  weak  assumptions  (where  SMs  do  not  trust 
each other), stops the attacker’s attempt to compromise an-
other quad.   
Attack Action 
Detach the clients.    
continue 
Defensive Action 
Other  SMs  notice  that  the 
clients have gone away, one 
of  the  SM  re-invites  them.  
Clients 
from 
where they were stopped. 
Q1PSQ  recalls  the  IOs  but 
other  three  PSQ  servers  do 
not. The IOs are preserved.  
Isolating  a  PSQ  server  re-
quires a quorum of two, no 
Recall  IOs  to  interrupt  the 
JBI mission. 
Issue a command to isolate 
Q1PSQ. 
Issue a command to isolate 
Quad 3. 
other SM agrees so the PSQ 
server is not blocked. 
Isolating  a  Quad  requires 
an agreement from all SMs.  
No  other  SM  agrees,  Quad 
3  is  not  isolated.    SM  op-
erators  on  other  quads  no-
tice  and  vote 
isolate 
Quad  1.    System  continues 
to operate with three quads. 
to 
curity  domain,  leading  to  corruption  of  processes  in  that 
domain,  as  a  fault;  the  architecture  then  exploits  ap-
proaches  to  fault  tolerance  that  apply  regardless  of 
whether the faults are due to accidents or malicious acts. 
MAFTIA  is  explicitly  middleware-based  and  provides 
both protection from and tolerance of intrusions. 
The Saber [13] system uses several mechanisms includ-
ing  intrusion  detection,  automatic  code  patching,  process 
migration,  and  filtering  of  distributed  denial-of-service 
floods for defense, but focuses primarily on server avail-
ability.  
5  Related Work 
  Since we first showed the feasibility of integrating de-
fensive adaptation into an application in 1999 [8], adaptive 
response  has  become  an  integral  part  of  survivable  sys-
tems.  Many researchers,  who have explored adaptive cy-
ber defense, have also developed special purpose architec-
tures  for  intrusion  detection  and  response  (ID&R),  intru-
sion tolerance, or graceful degradation.     
The  ITUA  [2]  project  developed  technology  and  sys-
tem  design  techniques  for  building  information  systems 
that will tolerate, i.e., continue to function without violat-
ing program and data integrity, a specific class of attacks, 
namely, the attacks that introduce corruption in communi-
cation and application level interaction in a distributed ob-
jects  application.  In  addition  to  corruption  tolerant  algo-
rithms, ITUA developed an architecture for managing dis-
tributed  object  replicas  and  the  hosts  on  which  they  run. 
The DPASA SMs and LCs are based on elements of the 
ITUA architecture.   
The  Willow  architecture  [9]  achieves  intrusion  toler-
ance  using  a  combination  of  disabling  of  vulnerable  net-
work elements when a threat is detected or predicted, re-
placing failed system elements, and reconfiguring the sys-
tem if non-maskable damage occurs. Willow uses its own 
event-notification service as the control mechanism of its 
scalable architecture.  
Dependable  Intrusion  Tolerance  (DIT)  [10]  comprises 
functionally redundant HTTP COTS servers. These  serv-
ers  run  on  diverse  operating  systems  and  platforms,  use 
hardened intrusion-tolerant proxies that mediate client re-
quests and verify the behavior of server and other proxies, 
and include monitoring and alert-management components 
based on the EMERALD [11] Intrusion Detection System. 
The  system  adapts  its  configuration  dynamically  in  re-
sponse  to  intrusions  and  other  faults.  DIT  focused  on  a 
specific kind of server (web servers), however, its use of 
EMERALD  in  sensing  and  alert  management  influenced 
the  alert  management  and  correlation  aspect  of  the 
DPASA architecture.  
Malicious  and  Accidental  Fault  Tolerance  for  Internet 
Applications (MAFTIA) [12] is a European project devel-
oping an open architecture for transactional operations on 
the Internet. MAFTIA models a successful attack on a se-
6  Conclusions  
This  paper  presents  a  set  of  design  principles  we  fol-
lowed  in  designing  the  survivability  architecture.  While 
our experience validates the principles at a general level, 
we  had  to  overcome  several  practical  challenges  while 
translating  the  theory  into  implementation.  For  instance, 
creating a correct and consistent policy for multiple layers 
of  mechanisms  is  not  trivial.  We  used  automated  policy 
generation to mitigate that risk partially. Finding static di-
versity  was also challenging.  Different operating systems 
and JVM implementations  were the only source of  static 
diversity we used. Existing system components and secu-
rity tools were not always available for all operating sys-
tems, which added to the complexity. We also found that 
depending  on  how  diverse  entities  are  interconnected, 
more diversity is not necessarily better which is the reason 
we  used  three  operating  systems  on  four  quads.   On  the 
other  hand,  use  of  weaker  assumptions  and  the  overall 
strategy  of  combining  protection,  detection,  and  adaptive 
reaction  proved  to  be  very  useful.  In  particular,  the  PSQ 
protocols showed tolerance against a wide range of envi-
ronmental  variations  and  corruption  (fuzzing)  attacks. 
Human  assisted  responses  complemented  the  automated 
responses in recovery attempts when Red Team attacks re-
sulted  in  component  failures.  Heavyweight  adaptive  re-
sponses like isolating a client or a LAN had a human over-
ride  option,  a  feature  that  we  believe  will  remain  useful 
until adaptive responses are driven by a cognitive decision 
making capability. 
  The  defense-enabled  JBI  and  its  evaluation  illustrate 
the utility of our approach of using a survivability archi-
tecture in defending an existing system. It shows that it is 
possible to integrate COTS and laboratory quality mecha-
nisms, organized in multiple overlapping layers to provide 
a high level of resilience, without having to alter or sacri-
fice any of the operational features of the undefended sys-
tem. Compromising the integrity or the confidentiality of 
the information objects proved to be very hard. The PSQ 
service  demonstrated  tolerance  and  graceful  degradation 
when less than four quads were operational.  
 We  view  the  success  of  the  survivability  architecture 
and design to be a significant step forward in the continu-
9 
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:31 UTC from IEEE Xplore.  Restrictions apply. 
[4] Schneider, Fred. “Byzantine generals in action:  Im-
plementing fail-stop processors”, ACM Transactions on 
Computer Systems, Vol. 2 (2), 1984, pp. 145-154 
[5] AFRL JBI homepage:  http://www.infospherics.org 
[6] W. Nelson, W. Farrell, M. Atighetchi, S. Kaufman, L. 
Sudin, M. Shepard, and K. Theriault. "APOD Experiment 
1:  Final  Report",  BBN  Technologies  LLC,  Technical 
Memorandum 1311, May 2002 
[7]  W.  Nelson,  W.  Farrell,  M.  Atighetchi,  J.  Clem,  L. 
Sudin, M. Shepard, and K. Theriault. “APOD Experiment 
2:  Final  Report”,  BBN  Technologies  LLC,  Technical 
Memorandum 1326, Sep, 2002 
[8] Joseph Loyall, Partha Pal, Richard Schantz, and Frank-
lin  Webber.  “Building  Adaptive  and  Agile  Applications 
Using Intrusion Detection and Response.”, Proceedings of 
NDSS 2000, the Network and Distributed System Security 
Symposium, February 2-4 2000, San Diego, CA. 
[9]  John  Knight,  Dennis  Heimbigner,  Alexander  Wolf, 
Antonio  Carzaniga,  Jonathan  Hill,  Premkumar  Devanbu, 
and  Michael  Gertz.  “The  Willow  Architecture:  Compre-
hensive Survivability for Large-Scale Distributed Applica-
tions”,  Proc.  Int’l  Conf.  Dependable  Systems  and  Net-
works (DSN 02), supplemental vol., IEEE Press, 2002, pp. 
C.7.1–C.7.8. 
[10]  Alfonso  Valdes,  Magnus  Almgren,  Steven  Cheung, 
Yves  Deswarte,  Bruno  Dutertre,  Joshua  Levy,  Hassen 
Saidi, Victoria Stavridou, and Tomas E. Uribe. “An Archi-
tecture  for  an  Adaptive  Intrusion  Tolerant  Server”,  Proc. 
Security  Protocols  Workshop,  LNCS,  Springer-Verlag, 
2002. 
[11]  P.G.  Neumann  and  P.A.  Porras.    “Experience  with 
EMERALD to Date”, 1st USENIX Workshop on Intrusion 
Monitoring 
Detection 
Santa Clara, California, 11-12 April 1999, pp 73-80 
 [12]  P.  Verissimo,  N.  F.  Neves,  and  M.  Correia.  “The 
Middleware Architecture of MAFTIA: A Blueprint,” Proc. 
3rd IEEE Info. Survivability Workshop, 2000. 
[13]Angelos D. Keromytis, Janak Parekh, Philip N. Gross, 
Gail  Kaiser,  Vishal  Misra,  Jason  Nieh,  Dan  Rubenstein, 
and  Sal  Stolfo.  “A  Holistic  Approach  to  Service  Surviv-
ability”,  Proc.  ACM  Workshop  on  Survivable  and  Self-
Regenerative Systems, ACM Press, 2003, pp. 11-20. 
[14] William H. Sanders. “DPASA Phase II Final Valida-
tion Report”. Submitted to DARPA. 2005  
Network 
and 
ing  fight  against  the  threat  of  cyber-attack.  The  defense-
enabled JBI completed the 12-hour mission despite visible 
impacts caused by sustained attacks from the external Red 
Team. However, in another run, a Red Team was able to 
mount  a  zero-day  attack  on  the  VPN  routers  to  stop  all 
communication  between  the  client  and  the  core  LANs. 
The evaluation of the results from the exercise is continu-
ing, as it is a complex set of various objectives, tests, and 
multiple  (sometimes  conflicting)  results.    It  is  already 
clear, however, that further evaluation and continued im-
provement of aspects of the defense are absolutely neces-
sary. 
The  experience  with  designing,  building,  and  evaluat-
ing a real system under stress has provided us with quite a 
number  of  insights  for  future  improvements  in  both  the 
design and analysis of survivable systems.  A few of these, 
focused on areas currently less well understood, include: 
•  Creating  additional  adaptive  actions  and  surviv-
ability  mechanisms,  with  properties  that  are 
provably uncircumventable. 
•  Dynamically but credibly computing and chang-
ing the trust of a component based on past actions 
and current systems state 
•  Analytically  comparing  the  effectiveness  of  and 
contribution  of  the  various  and  varying  overlap-
ping layers of defense. 
Acknowledgements 
  The authors would like to gratefully acknowledge con-
tributions  of  Bill  Weinstein  (Draper  Laboratories),  Al 
Valdez  (SRI),  Dick  O’Brien  and  Charlie  Payne  (Adven-
tium), and David  Levin and  Rick Schantz (BBN) for the 
work described in this paper. We would also like to thank 
Lee  Badger  (DARPA)  and  Patrick  Hurley  (AFRL)  for 
their continuing support. 
References 
[1] M. Atighetchi, P. Pal, F. Webber, R. Schantz, C. Jones, 
J. Loyall. “Adaptive Cyberdefense for Survival and Intru-
sion Tolerance”, IEEE Internet Computing, Vol. 8, No. 6, 
November/December 2004, pp. 25-33 
[2]  M.  Cukier,  T.  Courtney,  J.  Lyons,  H.  V.  Ramasamy, 
W. H. Sanders, M. Seri, M. Atighetchi, P. Rubel, C. Jones, 
F. Webber, P. Pal. R. Watro, and J. Gossett.  “Providing 
Intrusion Tolerance With ITUA”, Supplement of the 2002 
International  Conference  on  Dependable  Systems  and 
Networks, June 23-26, 2002. 
[3]  Tom  Markham,  Lynn  Meredith,  and  Charlie  Payne. 
“Distributed  embedded  firewalls  with  virtual  private 
groups”, Proceedings of the DARPA Information Surviv-
ability  Conference  and  Exposition,  Volume  II.  Washing-
ton, D.C., April 2003. DARPA, IEEE.  
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
10 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:31 UTC from IEEE Xplore.  Restrictions apply.