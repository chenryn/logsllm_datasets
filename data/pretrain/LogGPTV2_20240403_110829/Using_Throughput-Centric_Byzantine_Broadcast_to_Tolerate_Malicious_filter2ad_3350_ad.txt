tA
going through a lengthy example here, we directly prove the
correctness of such a design later.
V. COMPLETE PSEUDOCODE FOR OVERLAYBB
The PoS setting. Section IV assumed a permissioned setting.
The actual OVERLAYBB protocol is designed for a permis-
sionless PoS setting. With PoS, each node holds some coins
(i.e., stakes). For each OVERLAYBB invocation, Section VI
later will choose m random coins among all these coins. The
nodes holding those coins then become committee members
in OVERLAYBB. A node B may hold x ≥ 1 chosen coins. In
such a case, B’s signature will be viewed as being equivalent
to x signatures from x different committee members. We also
call x as the weight of B. Among the m chosen coins, the node
holding the ﬁrst chosen coin will further be the broadcaster
in OVERLAYBB. The information regarding which coins are
chosen will be public — speciﬁcally, they are chosen by some
random beacon, which is periodically computed and released.
Hence all parties know the public keys (but not necessarily
IP addresses) of all the committee members, each time before
OVERLAYBB is invoked.6
6We will explain later that each epoch in BCUBE computes a beacon to
select the committees in the next epoch. Hence our design allows a mildly-
Signature aggregation. OVERLAYBB uses signature aggre-
gation to reduce signature size, as an optimization. One
suitable signature aggregation scheme is the MSP-pop scheme
using BLS381, which gives aggregate signatures of size only
96 bytes [5]. The MSP-pop scheme requires certain public
parameters, which can easily be published in the genesis block
of BCUBE. Each node can generate public keys independently
and non-interactively, as and when needed, based on these
public parameters. MSP-pop additionally requires a proof-of-
possession for each public key. In BCUBE, we simply require
a node to add a transaction containing this proof to the
blockchain, before it is allowed to be a committee member.
In each invocation of OVERLAYBB, the possible signers are
all the m committee members for that invocation. Hence for
each aggregate signature, an m-bit vector sufﬁces to indicate
which of the m members are signers.
the set all sig keeps track of all
Consider any Merkle root x or fragment x. In our pseudo-
the aggregate
code,
signatures seen by a node so far. Note that all sig may
contain multiple aggregate signatures for x, since we do
not combine multiple aggregate signatures into one. We use
σ(x) to denote the aggregate signature for x whose signers
have the largest
total weight, with arbitrary tie-breaking,
among all aggregate signatures in all sig. If there is no
aggregate signature for x in all sig, we deﬁne σ(x) = ∅.
We use |σ(x)| to denote the total weight of the signers in
σ(x). We use σ(x).add my sig() to denote the aggregate
signature obtained by adding the invoking node’s signature
to σ(x). If the invoking node is already a signer in σ(x), then
σ(x).add my sig() = σ(x).
Algorithm 1. Algorithm 1 is the main algorithm for OVER-
LAYBB, run by every node in the system. OVERLAYBB has
total 2dm + s rounds (Line 18 to 26). Here 2dm follows from
the discussion in Section III-B, while the s rounds comes from
the delay/compensation design in Section IV-B. Recall from
Section II that each node uses its local clock to keep track
of the beginning of the execution (not explicitly shown in the
pseudo-code) as well as the progress of each round (Line 25).
The two phases, one for the Merkle root and one for
run in parallel by the design in Sec-
the object
tion IV-C. In each round, a node ﬁrst adds the various
received roots/fragments/signatures into the corresponding sets
(Line 19 to 23). Next Line 24 invokes ForwardMerkleRoot()
and ForwardFragment() to do the processing for the ﬁrst and
second phase, respectively.
After all these 2dm + s rounds, a node outputs a non-⊥
object iff i) the ﬁrst phase has accepted exactly one Merkle
root r, and ii) the second phase has accepted the last fragment
corresponding to this Merkle root r.
Algorithm 2. Algorithm 2 largely follows the design in
Section IV-A. In particular, Line 33 chooses two Merkle roots
itself,
adaptive adversary as in [7], [16], [35] — namely, if it takes multiple epochs
for the adversary to adaptively corrupt nodes, then the adversary will not be
able to cherry-pick the committee members to corrupt, after seeing the beacon
and before the committee members have done their work.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
71269
Algorithm 1 OVERLAYBB (Parameters: m, d, s)
1: all root ← ∅; // all received (Merkle) roots
2: all push ← ∅; // all pushes done so far for roots
3: root accepted ← ∅; // roots accepted so far
4: troot ← ∞; // round number when ﬁrst root accepted
5: all frag ← ∅; // received fragments
6: frag accepted ← false; // last fragment has been accepted?
7: all sig ← ∅; // received signatures on roots and fragments
8:
9: if I am the broadcaster then
10:
11:
12:
13:
14:
15:
16: end if
17:
18: for t from 0 to 2dm + s − 1 (both inclusive) do
19:
20:
break the object (to be broadcast) into s − 1 fragments;
pick a random nonce as the last fragment (i.e., sth fragment);
let r be the Merkle root of all these s fragments;
add the Merkle proof into each fragment;
all root ← all root ∪ {r};
all frag ← all frag ∪ {the s fragments};
receive messages from all neighbors;
discard those received Merkle roots whose aggregate signa-
tures do not contain the broascaster as a signer;
add received Merkle roots to all root;
add received fragments to all frag;
add received aggregate signatures to all sig;
ForwardMerkleRoot(); ForwardFragment();
wait until the current round t ends;
21:
22:
23:
24:
25:
26: end for
27:
28: if (|root accepted| = 1) ∧ (frag accepted = true) then
return the object by combining the fragments (in all frag)
29:
that correspond to the (single) Merkle root in root accepted;
// we will prove that there are exactly s such fragments
for all r ∈ all root; // tie-breaking can be done arbitrarily
if (I am in committee) and (2d|σ(r)| ≥ t) then
all sig ← all sig ∪ {σ(r).add my sig()} ;
root accepted ← root accepted ∪ {r};
troot ← min(troot, t);
30: else return ⊥;
31: end if
Algorithm 2 ForwardMerkleRoot()
32: if |all root| ≤ 1 then top root ← all root;
33: else top root ← {r1, r2} such that |σ(r1)| ≥ |σ(r2)| ≥ |σ(r)|
34: for each r ∈ top root do
35:
36:
37:
38:
39:
40:
41:
42:
43:
44:
45:
46:
47:
48: end for
end if
send r and σ(r) to all my neighbors;
let p be the push corresponding to the above send;
p.score ← 2d|σ(r)| − t;
all push ← all push ∪ {p};
end if
if (I am not in committee) and (2d|σ(r)| ≥ t + d) then
root accepted ← root accepted ∪ {r};
troot ← min(troot, t);
with the largest total weight of signers, and Line 46 computes
the score of the push. At Line 35, a committee member accepts
2d(cid:101). This
a root r if the total weight of signers is at least (cid:100) t
matches the intuition in Section III and IV-A, since each round
in Dolev-Strong protocol [8] corresponds to 2 rounds in Chan
et al.’s protocol [6] (under clique setting), which in turn map to
2d rounds in OverlayBB. Similarly, a non-committee member
accepts a root r if the total weight of signers is at least (cid:100) t+d
2d (cid:101)
Algorithm 3 ForwardFragment()
49: if all push = ∅ then return;
50: let p ∈ all push be the push with largest p.score; // tie-
breaking can be done arbitrarily
51: let x1 through xs denote the s fragments corresponding to the
Merkle root in p; // I may or may not have received all of them
52:
53: if (there exists any i ∈ [1, s − 1] such that xi ∈ all frag and
I have not forwarded xi before) then
pick any such i and send xi to all my neighbors;
return;
54:
55:
56: end if
57:
58: if (xi ∈ all frag for all i ∈ [1, s]) then
59:
60:
61:
62:
63:
64:
tfrag ← max(t, troot + s − 1);
if (I am in committee) and (2d|σ(xs)| ≥ tfrag − (s− 1)) then
all sig ← all sig ∪ {σ(xs).add my sig()};
frag accepted ← true;
end if
if (I am not in committee) and (2d|σ(xs)| ≥ tfrag−(s−1)+d)
then
65:
66:
67:
68: end if
frag accepted ← true;
end if
send xs and σ(xs) to all my neighbors;
— this simply means that within d rounds, the root r will
reach some committee member, and will be accepted by that
committee member.
Algorithm 3. Algorithm 3 corresponds to (one round of) the
second phase in Section IV-B. Section IV-B explained that
conceptually, the second phase uses one instance for each
fragment, with total s instances. But in each round, a node
only sends message for at most one instance. Algorithm 3
chooses that instance (implicitly) at Line 54 and 58, and then
processes only that single instance. Hence Algorithm 3 remains
single-threaded, despite that it actually implements s parallel
instances.
Line 50 follows the design in Section IV-C, and uses the
Merkle root contained in the most promising push as a guess
for the ﬁnal accepted root. Line 53 to 56 follow the forerunner
rule in Section IV-B. Line 59 computes tfrag as discussed in
Section IV-C. Line 60 and 64 check whether to accept xs,
based on |σ(xs)|, tfrag, and the s−1 compensation as discussed
in Section IV-B. The actual decision rule is similar to Line 35
and Line 40.
VI. FROM BYZANTINE BROADCAST TO BLOCKCHAIN
So far we have presented our byzantine broadcast protocol,
OVERLAYBB. We now explain how to use OVERLAYBB to
build our blockchain, BCUBE.
Basic design. While largely neglected in the literature,
blockchains can be relatively easily built from byzantine
broadcast, in the following way. In a blockchain protocol,
every node aims to maintain an append-only sequence of
blocks, and all the sequences on all the honest nodes need to
be consistent with each other. For convenience, imagine that
there is a sequence of slots, which initially are all empty. The
nodes in the system invoke OVERLAYBB periodically (e.g.,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:30 UTC from IEEE Xplore.  Restrictions apply. 
81270
every 98 seconds), and a node uses the return value from the
ith invocation of OVERLAYBB as the block for the ith slot.
For each invocation, the broadcaster is chosen randomly, who
assembles a block and then uses OVERLAYBB to disseminate
that block to all nodes. We say that a block/slot is conﬁrmed
if its corresponding OVERLAYBB invocation has ended. Note
that since each OVERLAYBB invocation can take much longer
than 98 seconds, the (i + 1)th invocation will start before
the ith invocation ends. This effectively results in pipelined
invocations, and at any point of time, there can be many active
OVERLAYBB invocations. All these pipelined invocations can
be implemented efﬁciently: Our actual implementation will
simply use a single thread to loop through all the pipelined
invocations, and process them one by one. We also stagger the
round starting time of all these invocations, so that invocations
near the end of the processing loop start their rounds a bit later.
The above basic framework is already used in Pass and
Shi [26], which describes a theoretical design of a blockchain
using the Dolev-Strong protocol [8] (instead of OVERLAYBB).
BCUBE also follows this basic framework, but
there are
several practical issues we need to overcome, as following.
Choosing broadcaster/committee. We use two independent
hash functions, hash1 and hash2, in BCUBE. The execution
of BCUBE is divided into epochs (e.g., 1 epoch = 1 day). In
each epoch i − 1, the nodes compute (explained later) a fresh
public random beacon, denoted as beaconi, to be used in
epoch i. Recall from Section II that the genesis block contains
an unbiased random beacon to be used in the very ﬁrst epoch.
Hence the genesis block bootstraps this sequential process of
beacon generation.
We say that a slot/block is in an epoch if the starting time of
the corresponding OVERLAYBB invocation is in that epoch.
Note that the ending time may be in the next epoch. Let y
be the last block that has been conﬁrmed by the beginning of
epoch i−1 (i.e., before the computation of beaconi starts). Let
the coin distribution D (i.e., which nodes hold which coins) be