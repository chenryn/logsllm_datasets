因此，playbook 会在您指定的系统中安装 Terminal Session Recording
角色。它还创建一个 SSSD 配置丢弃文件，可供您定义的用户和组使用。SSSD
解析并读取这些用户和组以便以 shell 用户身份覆盖 `tlog`{.literal}
会话。另外，如果系统上安装了 `cockpit`{.literal} 软件包，playbook
也会安装 `cockpit-session-recording`{.literal} 软件包，它是一个
`Cockpit`{.literal} 模块，供您在 web 控制台界面中查看和播放记录。
::: orderedlist
**验证步骤**
1.  测试 `/etc/rsyslog.conf`{.literal} 文件的语法：
    ``` screen
    # rsyslogd -N 1
    rsyslogd: version 8.1911.0-6.el8, config validation run (level 1), master config /etc/rsyslog.conf
    rsyslogd: End of config validation run. Bye.
    ```
2.  验证系统是否向日志发送信息：
:::
要验证 SSSD 配置文件是否在系统中创建了，请执行以下步骤：
::: orderedlist
1.  进入创建 SSSD 配置丢弃文件的文件夹：
    ``` screen
    # cd /etc/sssd/conf.d
    ```
2.  检查文件内容：
    ``` screen
    # cat sssd-session-recording.conf
    ```
:::
您可以看到该文件包含您在 playbook 中设置的参数。
:::
:::
[]{#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel}第 4 章 使用 Ansible 角色永久配置内核参数 {.title}
:::
您可以使用 kernel Settings
角色一次在多个客户端上配置内核参数。这个解决方案：
::: itemizedlist
-   提供带有有效输入设置的友好接口。
-   保留所有预期的内核参数。
:::
从控制机器运行 Kernel Settings
角色后，内核参数会立即应用于受管系统，并在重启后保留。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
请注意，通过 RHEL 频道提供的 RHEL 系统角色可在默认 AppStream
软件仓库中作为 RPM 软件包提供给 RHEL 客户。RHEL 系统角色还可以通过
Ansible Automation Hub 为客户提供 Ansible 订阅的集合。
:::
::: section
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel.html#introduction-to-the-kernel-settings-role_using-ansible-roles-to-permanently-configure-kernel-parameters}内核设置角色简介 {.title}
:::
RHEL 系统角色是一组角色，为远程管理多个系统提供一致的配置接口。
RHEL
系统角色使用内核设置系统角色自动配置内核。`rhel-system-roles`{.literal}
软件包包含这个系统角色以及参考文档。
要以自动化的方式在一个或多个系统上应用内核参数，请在 playbook
中使用内核设置角色以及您选择的一个或多个角色变量。playbook
是一个或多个人类可读的 play 的列表，采用 YAML 格式编写。
使用您可以配置的内核设置角色：
::: itemizedlist
-   使用 `kernel_settings_sysctl`{.literal} 角色变量的内核参数
-   使用 `kernel_settings_sysfs`{.literal}
    角色变量的各种内核子系统、硬件设备和设备驱动程序
-   `systemd`{.literal} 服务管理器的 CPU 相关性，并使用
    `kernel_settings_systemd_cpu_affinity`{.literal} 角色变量处理其分叉
-   内核内存子系统使用 `kernel_settings_transparent_hugepages`{.literal}
    和 `kernel_settings_transparent_hugepages_defrag`{.literal}
    角色变量透明巨页
:::
::: itemizedlist
**其他资源**
-   `/usr/share/doc/rhel-system-roles/kernel_settings/kernel_settings/`{.literal}
    目录中的 `README.md`{.literal} 和 `README.html`{.literal} 文件
-   [使用
    playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}
-   [如何构建清单](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html){.link}
:::
:::
::: section
::: titlepage
# []{#using-ansible-roles-to-permanently-configure-kernel-parameters_administration-and-configuration-tasks-using-system-roles-in-rhel.html#applying-selected-kernel-parameters-using-the-kernel-settings-role_using-ansible-roles-to-permanently-configure-kernel-parameters}使用 kernel Settings 角色应用所选内核参数 {.title}
:::
按照以下步骤准备并应用 Ansible playbook
来远程配置内核参数，从而对多个受管操作系统产生持久性。
::: itemizedlist
**先决条件**
-   有 `root`{.literal} 权限。
-   RHEL 订阅授权，您将在控制机器上安装 `ansible-core`{.literal} 和
    `rhel-system-roles`{.literal} 软件包。
-   受管主机清单存在于控制计算机上，Ansible 能够连接它们。
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
RHEL 8.0 - 8.5 提供对基于 Ansible 的自动化需要 Ansible Engine 2.9 的独立
Ansible 存储库的访问权限。Ansible Engine 包含命令行实用程序，如
`ansible`{.literal}、`ansible-playbook`{.literal}; 连接器，如
`docker`{.literal} 和 `podman`{.literal};
以及插件和模块的整个环境。有关如何获取并安装 Ansible Engine
的信息，请参阅[如何下载和安装 Red Hat Ansible
Engine?](https://access.redhat.com/articles/3174981){.link}。
RHEL 8.6 和 9.0 引入了 Ansible Core（以 `ansible-core`{.literal} RPM
提供），其中包含 Ansible 命令行工具、命令以及小型内置 Ansible
插件。AppStream 存储库提供
`ansible-core`{.literal}，它的范围有限。如需更多信息，请参阅 [RHEL 9
AppStream 中包含的 ansible-core
软件包的范围](https://access.redhat.com/articles/6325611){.link}。
:::
::: orderedlist
**步骤**
1.  另外，还可查看 `清单（inventory）`{.literal}文件 ：
    ``` literallayout
    #  cat /home/jdoe//inventory
    [testingservers]
    PI:EMAIL
    PI:EMAIL
    [db-servers]
    db1.example.com
    db2.example.com
    [webservers]
    web1.example.com
    web2.example.com
    192.0.2.42
    ```
    该文件定义 `[testingservers]`{.literal}
    组和其他组。它允许您对特定的系统集合更有效地运行 Ansible。
2.  创建配置文件来为 Ansible 操作设置默认值和特权升级。
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` literallayout
        #  vi /home/jdoe//ansible.cfg
        ```
    2.  将以下内容插入到文件中：
        ``` literallayout
        [defaults]
        inventory = ./inventory
        [privilege_escalation]
        become = true
        become_method = sudo
        become_user = root
        become_ask_pass = true
        ```
        `[defaults]`{.literal}
        部分指定受管主机清单文件的路径。`[privilege_escalation]`{.literal}
        部分定义用户特权转移到指定受管主机上的
        `root`{.literal}。这对成功配置内核参数是必需的。运行 Ansible
        playbook 时，会提示您输入用户密码。用户在连接到受管主机后，通过
        `sudo`{.literal} 自动切换为 `root`{.literal}。
    :::
3.  创建使用 Kernel Settings 角色的 Ansible playbook。
    ::: orderedlist
    1.  创建新 YAML 文件，并在文本编辑器中打开，例如：
        ``` literallayout
        #  vi /home/jdoe//kernel-roles.yml
        ```
        此文件代表一个 playbook，通常包含了一组有特定顺序的任务（也称为
        [*play*]{.emphasis} ）列表。这些任何会根据 `inventory`{.literal}
        文件中选择的特定管理主机进行。
    2.  将以下内容插入到文件中：
        ``` literallayout
        ---
        -
          hosts: testingservers
          name: "Configure kernel settings"
          roles:
            - rhel-system-roles.kernel_settings
          vars:
            kernel_settings_sysctl:
              - name: fs.file-max
                value: 400000
              - name: kernel.threads-max
                value: 65536
            kernel_settings_sysfs:
              - name: /sys/class/net/lo/mtu
                value: 65000
            kernel_settings_transparent_hugepages: madvise
        ```
        `name`{.literal} 键是可选的。它将一个任意字符串作为标签与该 play
        关联，并确定该 play 的用途。Play 中的 `hosts`{.literal}
        键指定对其运行 play
        的主机。此键的值或值可以作为被管理的主机的单独名称提供，也可以作为
        `inventory`{.literal} 文件中定义的一组主机提供。
        `vars`{.literal} 部分代表包含所选内核参数名称和值的变量列表。
        `roles`{.literal} 键指定系统角色将配置 `vars`{.literal}
        部分中提到的参数和值。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        您可以修改 playbook 中的内核参数及其值以符合您的需要。
        :::
    :::
4.  （可选）验证 play 中的语法是否正确。
    ``` literallayout
    #  ansible-playbook --syntax-check kernel-roles.yml
    playbook: kernel-roles.yml
    ```
    本例演示了对 playbook 的成功验证。
5.  执行 playbook。
    ``` screen
    #  ansible-playbook kernel-roles.yml
    ...
    BECOME password:
    PLAY [Configure kernel settings] **********************************************************************************
    PLAY RECAP ********************************************************************************************************
    PI:EMAIL       : ok=10   changed=4    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0
    PI:EMAIL        : ok=10   changed=4    unreachable=0    failed=0    skipped=6    rescued=0    ignored=0
    ```
    在 Ansible 运行 playbook
    之前，会提示您输入密码，以便受管主机上的用户可以切换到
    `root`{.literal}，这在配置内核参数时是必需的。
    recap 部分显示 play 成功完成所有受管主机
    (`failed=0`{.literal})，并且已应用了 4 个内核参数
    (`changed=4)。`{.literal}
6.  重启您的受管主机并检查受影响的内核参数,以验证是否应用了更改并在重启后保留。
:::
::: itemizedlist
**其他资源**
-   [RHEL
    系统角色入门](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html-single/configuring_basic_system_settings/index#getting-started-with-rhel-system-roles_configuring-basic-system-settings){.link}
-   `/usr/share/doc/rhel-system-roles/kernel_settings/kernel_settings/`{.literal}
    目录中的 `README.html`{.literal} 和 `README.md`{.literal} 文件
-   [构建您的清单](https://docs.ansible.com/ansible/latest/network/getting_started/first_inventory.html){.link}
-   [配置
    Ansible](https://docs.ansible.com/ansible/latest/installation_guide/intro_configuration.html){.link}
-   [使用
    Playbook](https://docs.ansible.com/ansible/latest/user_guide/playbooks.html){.link}
-   [使用变量](https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html){.link}
-   [角色](https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html){.link}
:::
:::
:::
[]{#using-system-roles-to-configure-network-connections_administration-and-configuration-tasks-using-system-roles-in-rhel.html}
::: chapter
::: titlepage
# []{#using-system-roles-to-configure-network-connections_administration-and-configuration-tasks-using-system-roles-in-rhel.html#using-system-roles-to-configure-network-connections_administration-and-configuration-tasks-using-system-roles-in-rhel}第 5 章 使用 RHEL 系统角色配置网络连接 {.title}
:::
网络 RHEL 系统角色可让管理员使用 Ansible
自动执行与网络相关的配置和管理任务。
::: section
::: titlepage
# []{#using-system-roles-to-configure-network-connections_administration-and-configuration-tasks-using-system-roles-in-rhel.html#configuring-a-static-ethernet-connection-using-rhel-system-roles-with-the-interface-name_using-system-roles-to-configure-network-connections}使用接口名称的 RHEL 系统角色配置静态以太网连接 {.title}
:::
此流程描述了如何使用网络 RHEL 系统角色通过运行 Ansible playbook 为
`enp7s0`{.literal} 接口远程添加以太网连接：
::: itemizedlist
-   静态 IPv4 地址 - `192.0.2.1`{.literal} 和 `/24`{.literal} 子网掩码
-   静态 IPv6 地址 - `2001:db8:1::1`{.literal} 和 `/64`{.literal}
    子网掩码
-   IPv4 默认网关 - `192.0.2.254`{.literal}
-   IPv6 默认网关 - `2001:db8:1::fffe`{.literal}
-   IPv4 DNS 服务器 - `192.0.2.200`{.literal}
-   IPv6 DNS 服务器 - `2001:db8:1::ffbb`{.literal}
-   DNS 搜索域 - `example.com`{.literal}
:::
在 Ansible 控制节点上运行此步骤。
::: itemizedlist
**先决条件**
-   `ansible-core`{.literal} 和 `rhel-system-roles`{.literal}
    软件包在控制节点上安装。
-   如果您在运行 playbook 时使用了与 `root`{.literal}
    不同的远程用户，则此用户在受管节点上具有合适的 `sudo`{.literal}
    权限。
-   主机使用 NetworkManager 配置网络。
:::
::: orderedlist
**步骤**
1.  如果您要在其上执行 playbook
    中指令的主机还没有被列入清单，请将此主机的 IP 或名称添加到
    `/etc/ansible/hosts`{.literal} Ansible 清单文件中：
    ``` literallayout
    node.example.com
    ```
2.  使用以下内容创建 `~/ethernet-static-IP.yml`{.literal} playbook：
    ``` literallayout
    ---
    - name: Configure an Ethernet connection with static IP