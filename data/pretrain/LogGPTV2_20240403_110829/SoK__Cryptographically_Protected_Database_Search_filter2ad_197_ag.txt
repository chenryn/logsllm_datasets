range queries [16].
Demertzis et al. [145] provide a variety of range cover
schemes with diﬀerent
tradeoﬀs between leakage, storage,
and computation. At the extremes, they can support constant
linear in the range size, or 𝑚2
storage with query cost
multiplicative storage with constant-sized keyword queries.
They recommend a balanced approach similar to [16], [134],
183
although their recommended scheme has false positives.
8) Negations using range and disjunction [16]: As above
consider an ordered domain 𝐷 with minimum and maximum
values 𝑎𝑚𝑖𝑛 and 𝑎𝑚𝑎𝑥, respectively. To search for all records
not matching 𝐴 = 𝑎, compute a disjunction of the queries
[𝑎𝑚𝑖𝑛, 𝑎) and (𝑎, 𝑎𝑚𝑎𝑥].
B. The Functionality Gap
We now review gaps in query functionality based on cur-
rent protected base and combined queries. Our discussion is
divided among the three query bases from Section II-A.
a) Relational Algebra: Cartesian product, which corre-
sponds to the JOIN keyword in SQL, has been demonstrated
in 𝙻𝚎𝚐𝚊𝚌𝚢 schemes. The one 𝙲𝚞𝚜𝚝𝚘𝚖 scheme that supports
Cartesian product is the work of Kamara and Moataz [102],
but their scheme does not support updates.
The JOIN keyword makes a system relational. Secure JOIN
is a crucial capability for protected search systems. The key
challenge is to create a data structure capable of linking
diﬀerent values that reveals no information to any party. This
challenge also arises in Boolean 𝙲𝚞𝚜𝚝𝚘𝚖 systems. Systems
overcome this challenge by placing values that could be linked
in a single joint data structure. It is diﬃcult to scale this
approach to the JOIN operation as the columns involved
are not known ahead of time (and there are many more
possibilities).
Open Problem: Support secure Cartesian product using
𝙲𝚞𝚜𝚝𝚘𝚖 and 𝙾𝚋𝚕𝚒𝚟 approaches.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
b) Associative Arrays: The main workhorse of associa-
tive arrays is the ability to quickly add and multiply arrays.
𝙻𝚎𝚐𝚊𝚌𝚢 schemes have shown how to support limited addition
through the use of somewhat homomorphic encryption. There
is extensive work on private addition and multiplication using
secure computation. However, this problem has not received
substantial attention in the protected search literature. We
see adaptation of (parallelizable) arithmetic techniques into
protected search as a key to supporting associative arrays.
Open Problem: Incorporate secure computation into pro-
tected search systems to support array (+, ×).
In addition, associative arrays are often constructed for
string objects. In this setting, multiplication and addition
are usually replaced with the concatenate function and an
application-deﬁned ‘minimum’ function that selects one of the
two values. Finding the minimum is connected to the compar-
ison operation. The comparison operation has been identiﬁed
as a core gadget in the secure computation literature [146],
[147]. We encourage adaptation of this gadget to protected
search.
Open Problem: Support protected queries to output the
minimum of two strings.
c) Linear Algebra: The main gap in supporting linear al-
gebra is how to privately multiply two matrices. This problem
is made especially challenging as for diﬀerent data types the
addition (+) and multiplication (×) operations may be deﬁned
arbitrarily. Furthermore, linear algebra databases store data as
sparse matrices. Access patterns to a sparse matrix may leak
about the contents. This problem has begun to receive attention
in the learning literature [148] as matrix multiplication enables
many linear classiﬁcation approaches. However, current work
requires specializing storage to a particular algorithm, such as
shortest path [116], [149].
Open Problem: Support eﬃcient secure matrix multiplica-
tion and storage.
V. FROM QUERIES TO DATABASE SYSTEMS
In addition to search, a DBMS enforces rules, deﬁnes
data structures, and provides transactional guarantees to an
application. In this section, we highlight important components
that are aﬀected by security and need to be addressed to enable
a protected search system to become a full DBMS. We then
discuss current protected search systems and their applicability
for diﬀerent DB settings.
A. Controls, Rules and Enforcement
Classical database security includes a broad set of control
measures, including access control, inference control, ﬂow
control, and data encryption [150].
Access control assigns a principal such as a user, role,
account, or program privileges to interact with objects like
tables, records, columns, views, or operations in a given
context [151]. Discretionary access control balances usability
with security and is used in most applications. Mandatory
access control is used where a strict hierarchy is important
and available for individuals and data. Inference control is used
with statistical databases and restricts the ability of a principal
to infer a fact about a stored datum from the result returned by
an aggregate function such as average or count. Flow control
ensures that information in an object does not ﬂow to another
object of lesser privilege. Data encryption in classical systems
is used for transmitting data from the database back to the
client and user. Some systems also encrypt the data at rest
and use ﬁne-grained encryption for access control [152]. These
techniques are covered in most database textbooks.
A new complementary approach is called query con-
trol [153]. Query control limits which queries are acceptable,
not which objects are visible by a user. As an example, a
user may be required to specify at least ﬁve columns in a
query, ensuring the query is suﬃciently “targeted.” It enables
database designers to match legal requirements written in this
style. Query control can be expressed using a query policy,
which regulates the set of query controls.
Most current protected search designs do not consider either
an authorizer or enforcer. Integrating this functionality is an
important part of maturing protected search and complements
the cryptographic protections provided by the basic protocols.
B. Performance Characterization
Database system adoption depends on response time on the
expected set of queries. Databases are highly tuned, often
creating indices on the ﬂy in response to queries. This makes
fair and fast evaluation diﬃcult. To address this challenge, we
developed a performance evaluation platform. Our platform
has been open-sourced with a BSD license (https://github.com/
mitll-csa/). Design details can be found in [154]–[156]. It has
been used to test protected search systems at scales of 10TB.
Prior works [16], [17], [19], [22] report performance numbers
generated by our platform. While the platform has been used to
evaluate SQL-style databases it was designed with reusability
and extensibility in mind to allow generalization to other types
of databases.
integrity of
Our platform evaluates: 1)
responses and
modiﬁcations (when occurring individually and while other
operations are being performed) and 2) query latency and
throughput under a wide variety of conditions. The system can
vary environmental characteristics, the size of the database,
query types, how many records will be returned by each
query, and query policy. Each of these factors can be measured
independently to create performance cross-sections.
In our experiments, we found protected search response time
depends heavily on:
1) Network capacity, load, and number of records returned
by a query. Protected search systems often have more
rounds of communication and network traﬃc than un-
protected databases.
2) The ordering of terms and subclauses within a query.
Query planning is diﬃcult for protected search systems
as they do not know statistics of the data. Protected
search generates a plan based on only query type.
3) The existence and complexity of rules (query policy and
access control). Protected search systems use advanced
184
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
cryptography like multi-party computation to evaluate
these rules, resulting in substantial overhead.
C. User Perceptions of Performance
We conducted a human-subjects usability evaluation to
further the understanding of current protected search usabil-
ity. This evaluation considered the performance of multiple
protected search technologies and the perception of perfor-
mance by human subjects (our procedure was approved by
our Institutional Review Board). In this evaluation, subjects
interacted with diﬀerent protected search systems through an
identical web interface. Here, we focus on thoughts shared by
participants during discussion. (An informal overview of our
procedure is in Appendix B.)
Our participants discussed several themes that are salient
for furthering the usability of protected search:
∙ Participants cared more about predictability of response
times than minimizing the mean response time. When re-
sponse times were unpredictable, participants were unsure
whether they should wait for a query to complete or do
something else.
∙ Participants felt the protected technologies were slower
than an unprotected system. Participants felt this perfor-
mance was acceptable if it gave them access to additional
data, but did not want to migrate current databases to
a protected system. Note that this feedback is from end
users, not administrators.
∙ Participants expected performance to be correlated with
the number of records returned and the length of the
query. Participants were surprised that diﬀerent types of
queries might have diﬀerent performance characteristics.
D. Current Protected Search Databases
Some protected search systems have made the transition
to full database solutions. These systems report performance
analysis, perform rule enforcement, and support dynamic data.
These systems are summarized in Table V. CryptDB repli-
cates most DBMS functionality with a performance overhead
of under 30% [15]. This approach has been extended to NoSQL
key-value stores [157], [158]. Arx is built on a NoSQL key-
value store called mongoDB [63]. Arx reports a performance
overhead of approximately 10% when used to replace the
database of a web application (ShareLatex). Blind Seer [16]
reports slowdown of between 20% and 300% for most queries,
while OSPIR-OXT [18] report they occasionally outperform a
baseline MySQL 5.5 system with a cold cache and are an order
of magnitude slower than MySQL with a warm cache. The
SisoSPIR system [22] reports performance slowdown of 500%
compared to a baseline MySQL system on keyword equality
and range queries.
Given these performance numbers, we now ask which
solution, if any, is appropriate for diﬀerent database settings.
1) Relational Algebra without Cartesian product:
CryptDB, Blind Seer, OSPIR-OXT, and SisoSPIR all provide
functionality that supports most of relational algebra except
for the Cartesian product operation. These systems oﬀer
the
diﬀerent performance/leakage tradeoﬀs. CryptDB is
fastest and easiest to deploy. However, once a column is used
in a query, CryptDB reveals statistics about the entire dataset’s
value on this column. The security impact of this leakage
should be evaluated for each application (see Section III-B).
Blind Seer and OSPIR-OXT also leak information to the
server but primarily on data returned by the query. Thus,
they are appropriate in settings where a small fraction of
the database is queried. Finally, SisoSPIR is appropriate if
a large fraction of the data is regularly queried. However,
SisoSPIR does not support Boolean queries, which is limiting
in practice.
2) Full Relational Algebra: CryptDB is the only system for
relational algebra that supports Cartesian product. (As stated,
while Kamara and Moataz [102] support Cartesian product,
but do not support dynamic data.)
3) Associative Array - NoSQL Key-Value: The Arx sys-
tem built on mongoDB provides functionality necessary to
support associative arrays. In addition, other commercial sys-
tems (e.g., Google’s Encrypted BigQuery [29]) and academic
works [157], [158] apply 𝙻𝚎𝚐𝚊𝚌𝚢 techniques to build a NoSQL
protected system.
Blind Seer, OSPIR-OXT, and SisoSPIR have suﬃcient
query functionality to support associative arrays. However,
their techniques concentrate on query performance. Associa-
tive array databases often have insert rates of over a million
records per second. The insert rates of Blind Seer, OSPIR-
OXT, and SisoSPIR are multiple orders of magnitude smaller.
Suppose a record is being updated. In an unprotected system
this causes a small change to the primary index structure.
if only a few locations
However in the protected setting,
are modiﬁed the server may learn about
the statistics of
the updated record. This creates a tension between eﬃciency
and security. Eﬃcient updates are even more diﬃcult if the
provider does not have the full unprotected dataset.
Open Problem: Construct 𝙲𝚞𝚜𝚝𝚘𝚖 and 𝙾𝚋𝚕𝚒𝚟 techniques
that can handle millions of inserts per second.
To support very large insert rates, NoSQL key-value stores
commonly distribute the data across many machines. This
introduces the challenge of synchronizing queries, updates, and
data across these machines. This synchronization is diﬃcult
as none of the servers are supposed to know what queries,
updates, or data they are processing!
Open Problem: Construct protected search systems that
leverage distributed server architectures.
4) Linear Algebra and Others: No current protected search
system supports the linear algebra basis used to implement
complex graph databases. In addition, as federated and poly-
store databases emerge it will be important to interface be-
tween diﬀerent protected search systems that are designed for
diﬀerent query bases.
Inherent Limitations: Protected search systems are still in
development, so it is important to distinguish between tran-
sient limitations and inherent limitations of protected search.
Protected search inherently reduces data visibility in order
to prevent abuse. To achieve high performance under these
185
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:23:00 UTC from IEEE Xplore.  Restrictions apply. 
e
l
b
a
l
i
a
v
a
e
d
o
C
t
n
e
i
l
c
-
i
t
l
u
M
l
o
r
t
n
o
c
y
c
i
l