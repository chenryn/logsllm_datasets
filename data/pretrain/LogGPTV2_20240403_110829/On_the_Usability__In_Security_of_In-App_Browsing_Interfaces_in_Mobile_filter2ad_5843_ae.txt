3 subject apps with their own IABI implementations are in this
category. Among them are 7 apps that simply refuse to open the
page, and 8 apps that prompt the end users and give options to
proceed. There are two interesting observations worth noting when
we dig deeper into the latter group.
First, 3 out of the 8 apps show details of specific certificate errors
(e.g., Facebook, Case 5) while the other 5 apps skip the details of
errors (e.g., KakaoTalk, Case 1). Second, all these apps remember the
user selection and would not display any SSL error indicators after
proceeding to open the web page, except Facebook (case 5) which
turns the domain name into red color and include a red exclamation
mark icon even after end user chooses to proceed.
NEUTRAL. Twitter instead chooses to launch the system default
browser to handle the web pages with certificate errors. We consider
this design acceptable (NEUTRAL) although the burden is now
shifted to the default browser.
BAD. Ignoring the certificate errors or directly opening the
insecure web page are both considered as BAD designs. In this
category we have Alipay which directly opens a web page with
wrong host certificates and Zhihu which indiscriminately displays
a prompt of visiting external websites regardless of presence of
absence of certificate errors.
iOS. Surprisingly, all iOS subject apps deliver GOOD designs
including Alipay and Zhihu whose Android versions are BAD. Both
two iOS apps show blank pages when attempting to open pages with
certificate errors. We suspect that this better behavior of iOS apps
is due to stricter control for certificate errors on the iOS platform.
4.3.5 T6 & T7: Special URLs. As discussed in Section 3.2, T6 and T7
concern about special URLs where a lock emoji is part of the title,
and where extended sub-domain names are used, respectively. Fig-
ure 8 shows screenshots of representative apps when they process
such special URLs.
Chrome Custom Tabs and SFSafariViewController. CCT
could be configured with or without the title of the page being
visible. When the title is visible (Case 1 of Figure 8), the lock emoji
(part of the title) and the exclamation mark icon (due to the HTTP
protocol being used) show up next to each other, which is confusing
but not too bad as the warning is there. In absence of the page title,
LINEKakaoTalk1365245FacebookSFCCTFB MessengerT6 SFT7 WechatT6 CCT (No Title)T7 SFT7 LINET7 Twitter (Own)T7 CCTT6 FacebookT6 LINET6 QQT6 FB Messenger123456789101112T6 CCT393On the Usability (In)Security of In-App Browsing Interfaces in Mobile Apps
RAID ’21, October 6–8, 2021, San Sebastian, Spain
either due to developer configuration in CCT (Case 2) or due to SF
in use (Case 11), the HTTP warning is there without any confusion.
Regarding T7, both CCT and SF display the suffix of the URL
(with the long subdomain trimmed), which means that both CCT
and SF are immune to T7 attacks (see Cases 7 and 12).
GOOD. Regarding T6, a potential GOOD design we’d suggest is
to detect the use of lock (or similar) emojis in the title and replace
them with unambiguous text or symbols. Unfortunately, none of the
subject apps has a similar design (not even the CCT/SF implementa-
tions). Therefore, we only consider their own IABI implementations
not showing the title as GOOD designs. Except for those CCT apps
which choose not to show the title, only Facebook (case 3 in Figure 8)
and KakaoTalk have a GOOD design in this test.
In T7, we consider designs that prioritize the display of domain
name over subdomain name GOOD. LINE is the only GOOD one in
our tests (Case 8).
NEUTRAL. When the lock emoji in the title is shown, we con-
sider it NEUTRAL if either the full URL or an HTTP indicator (e.g.,
exclamation mark icon) is also shown, so that end users still have
a way of telling that the page is insecure. Examples include CCT
implementation, LINE (Case 4), and Twitter.
In evaluating T7, we find that 9 of 18 apps with their own IABI
implementations only display the title of the page without the URL
(e.g., WeChat in Case 9), which strictly speaking does not fall short
on the extended subdomain but is still misleading. We therefore
categorize this as NEUTRAL.
BAD. In T6, 11 apps display the lock emoji without any HTTP
indicator or displaying the complete URL (e.g., Cases 5 and 6). End
users have a high chance of being misled by the lock emoji, and
we consider such designs BAD. Regarding T7, 8 of the subject apps
display the subdomain name with the domain name missing (Case
10).
iOS. Again, most apps have similar behavior on their Android
and iOS version, with the exception of FB Messenger iOS app which
only has the domain name on its address bar and is considered as a
GOOD design for T6. For T7, FB Messenger iOS app displays both
the head and the tail of the domain name, which is also a GOOD
design. LinkedIn iOS app, on the other hand, suffers with displaying
the subdomain (BAD) although its Android counterpart only shows
the title (NEUTRAL).
Figure 9: Examples of whether displaying specific warnings
in the title bar when users browse a (potentially phishing) lo-
gin page (T8). We tested both HTTP and HTTPS login pages.
4.4 Usability Risks on Page Navigation
As mentioned in Section 3.3, our last test (T8) is to see how a
subject app’s IABI implementation reacts to dangerous operation
(e.g., password inputting) during the navigation of a web page.
Specifically, T8 tests whether IABIs would show a specific or extra
warning on a login page as compared with their normal behaviors
on a non-login page. Figure 9 shows the screenshots of some
representative IABIs.
Chrome Custom Tabs and SFSafariViewController. As sho-
wn in Case 1 of Figure 9, CCT does not provide any additional
warning for password inputting when navigating both HTTP and
HTTPS login pages. That said, it has the same behaviors as pre-
viously in T3 and T4; see Figure 5 and 6. Therefore, we consider
CCT’s rating as BAD in this test. In contrast, SF performs slightly
better than CCT. As shown in Case 5 of Figure 9, SF highlights the
display of “Not Secure” (normally displayed for all HTTP pages;
see Case 8 in Figure 6) by changing its color to red when end users
navigate an HTTP login page, which is more striking for end users
to notice. However, SF does not have specific warnings on HTTPS
login pages. As a result, we assign NEUTRAL to SF’s performance
on T8.
GOOD. According to our specification in Section 3.3, we consider
those that provide specific warnings for both HTTP and HTTPS
login pages as GOOD designs. QQ Mail (Case 2) and QQ (both of
which are developed by Tencent) display such prompt when the
user enters username or password into both HTTP (URL8) and
HTTPS (URL10) web page, which are GOOD.
NEUTRAL. Some apps display an extra warning (other than
the normal HTTP indicator) during navigation of an HTTP login
page but fail to provide any warning on an HTTPS login page.
According to our specification in Section 3.3, we rate these apps’
OntheUsability(In)SecurityofIn-AppBrowsingInterfacesinMobileAppsRAID’21,October6–8,2021,SanSebastian,SpaineitherduetodeveloperconfigurationinCCT(Case2)orduetoSFinuse(Case11),theHTTPwarningistherewithoutanyconfusion.RegardingT7,bothCCTandSFdisplaythesuffixoftheURL(withthelongsubdomaintrimmed),whichmeansthatbothCCTandSFareimmunetoT7attacks(seeCases7and12).GOOD.RegardingT6,apotentialGOODdesignwe’dsuggestistodetecttheuseoflock(orsimilar)emojisinthetitleandreplacethemwithunambiguoustextorsymbols.Unfortunately,noneofthesubjectappshasasimilardesign(noteventheCCT/SFimplementa-tions).Therefore,weonlyconsidertheirownIABIimplementationsnotshowingthetitleasGOODdesigns.ExceptforthoseCCTappswhichchoosenottoshowthetitle,onlyFacebook(case3inFigure8)andKakaoTalkhaveaGOODdesigninthistest.InT7,weconsiderdesignsthatprioritizethedisplayofdomainnameoversubdomainnameGOOD.LINEistheonlyGOODoneinourtests(Case8).NEUTRAL.Whenthelockemojiinthetitleisshown,wecon-sideritNEUTRALifeitherthefullURLoranHTTPindicator(e.g.,exclamationmarkicon)isalsoshown,sothatendusersstillhaveawayoftellingthatthepageisinsecure.ExamplesincludeCCTimplementation,LINE(Case4),andTwitter.InevaluatingT7,wefindthat9of18appswiththeirownIABIimplementationsonlydisplaythetitleofthepagewithouttheURL(e.g.,WeChatinCase9),whichstrictlyspeakingdoesnotfallshortontheextendedsubdomainbutisstillmisleading.WethereforecategorizethisasNEUTRAL.BAD.InT6,11appsdisplaythelockemojiwithoutanyHTTPindicatorordisplayingthecompleteURL(e.g.,Cases5and6).Endusershaveahighchanceofbeingmisledbythelockemoji,andweconsidersuchdesignsBAD.RegardingT7,8ofthesubjectappsdisplaythesubdomainnamewiththedomainnamemissing(Case10).iOS.Again,mostappshavesimilarbehaviorontheirAndroidandiOSversion,withtheexceptionofFBMessengeriOSappwhichonlyhasthedomainnameonitsaddressbarandisconsideredasaGOODdesignforT6.ForT7,FBMessengeriOSappdisplaysboththeheadandthetailofthedomainname,whichisalsoaGOODdesign.LinkedIniOSapp,ontheotherhand,sufferswithdisplayingthesubdomain(BAD)althoughitsAndroidcounterpartonlyshowsthetitle(NEUTRAL).Takeawaysin§4.3:•TenappsusingChromeCustomTabsorSFperformGOODonnearlyallthetestsfromT2toT7.•Morethanhalfoftheremaining15appsdonotdisplaythedomainnameintheirownIABIimplementation,andnearlynoneofthemprovidesHTTPandHTTPSindica-tors.Thismakesitdifficultforenduserstodifferentiatebetweensecureandinsecurepages.Fortunately,allappsbehaveGOODwhenhandlingURLswithcertificateer-rors.•Moreover,nearlyallthose15appshaveBADperfor-manceonhandlingatitlewiththefakelockemojioralongsubdomainname,whichcouldleadtoinsecurepagesbeingmisinterpretedassecureones.CCTQQMailLINELinkedIn (Own)SF12345Figure9:Examplesofwhetherdisplayingspecificwarningsinthetitlebarwhenusersbrowsea(potentiallyphishing)lo-ginpage(T8).WetestedbothHTTPandHTTPSloginpages.4.4UsabilityRisksonPageNavigationAsmentionedinSection3.3,ourlasttest(T8)istoseehowasubjectapp’sIABIimplementationreactstodangerousoperation(e.g.,passwordinputting)duringthenavigationofawebpage.Specifically,T8testswhetherIABIswouldshowaspecificorextrawarningonaloginpageascomparedwiththeirnormalbehaviorsonanon-loginpage.Figure9showsthescreenshotsofsomerepresentativeIABIs.ChromeCustomTabsandSFSafariViewController.Assho-wninCase1ofFigure9,CCTdoesnotprovideanyadditionalwarningforpasswordinputtingwhennavigatingbothHTTPandHTTPSloginpages.Thatsaid,ithasthesamebehaviorsaspre-viouslyinT3andT4;seeFigure5and6.Therefore,weconsiderCCT’sratingasBADinthistest.Incontrast,SFperformsslightlybetterthanCCT.AsshowninCase5ofFigure9,SFhighlightsthedisplayof“NotSecure”(normallydisplayedforallHTTPpages;seeCase8inFigure6)bychangingitscolortoredwhenendusersnavigateanHTTPloginpage,whichismorestrikingforenduserstonotice.However,SFdoesnothavespecificwarningsonHTTPSloginpages.Asaresult,weassignNEUTRALtoSF’sperformanceonT8.GOOD.AccordingtoourspecificationinSection3.3,weconsiderthosethatprovidespecificwarningsforbothHTTPandHTTPSloginpagesasGOODdesigns.QQMail(Case2)andQQ(bothofwhicharedevelopedbyTencent)displaysuchpromptwhentheuserentersusernameorpasswordintobothHTTP(URL8)andHTTPS(URL10)webpage,whichareGOOD.NEUTRAL.Someappsdisplayanextrawarning(otherthanthenormalHTTPindicator)duringnavigationofanHTTPloginpagebutfailtoprovideanywarningonanHTTPSloginpage.AccordingtoourspecificationinSection3.3,weratetheseapps’CCTQQMailLINELinkedIn (Own)SF12345394RAID ’21, October 6–8, 2021, San Sebastian, Spain
Zicheng Zhang, Daoyuan Wu, Lixiang Li, and Debin Gao
IABIs as NEUTRAL. For all tested apps, we find that only the apps
using SF have such performance.
BAD. The other apps score BAD in T8, including WeChat which
is also developed by Tencent but they do not show any warnings in
this test. Upon further investigation, we find that this anti-fraud tip
which is used by the other two apps can be removed in WeChat if
the domain name is registered on the developer platform of WeChat.
So maybe some developers have registered this domain name on
that platform so the prompt is removed.
iOS. iOS apps their with own IABI implementation behave the
same as their Android versions in this test.
5 APP DEVELOPERS’ RESPONSES
To understand developers’ reaction on our findings and to poten-
tially provide our recommendations on fixing severe IABI issues,
we issued security reports to all affected apps including WeChat, FB
Messenger, QQ, Snapchat, Instagram (fixed as we reported), Weibo,
163 Mail, QQ Mail, Alipay, LinkedIn, Toutiao, and Baidu, through
their bug bounty programs or security contact emails3. Most of the
apps acknowledged our findings and agreed with our assessment,
but refused to recognize them as vulnerabilities, i.e., they consider
the reported issues out of the scope of their bug bounty programs.
By analyzing their responses in detail as follows, we find that de-
velopers’ willingness and readiness to fix usability security issues
are rather low compared to fixing technical vulnerabilities, which
is a puzzle in usability security research.
Facebook’s response. While the Facebook app performs well
in nearly all the tests, the other two apps from the same company,
namely FB Messenger and Instagram, did not use the same IABI
design and failed in our tests T3∼T4 and T6∼T8 (see §4). When
we prepared the security reports for these two apps on 4 February
2021, we found that the latest version of Instagram had changed
its IABI design to display a lock icon and an exclamation mark to
indicate the HTTPS and HTTP pages, respectively. This suggests
that they also noticed this problem (before our reporting) and made
an improvement. Therefore, we focus on the response to our reports
to FB Messenger.
There are two key points in the response given by the Facebook
security team. First, they appreciated our report but said that our re-
port does not qualify for their bug bounty program due to the social
engineering nature of our reported attacks. Second, they already
have a URL detection system called Linkshim, which could detect
potentially malicious URLs and thus defend against IABI attacks.
While we agree that the reported IABI usability issues would not
cause the same security consequences as in the technical WebView
vulnerabilities (e.g., [16, 19, 26, 27, 30]), the usability weaknesses in
FB Messenger’s IABIs we demonstrated in §4 definitely give attack-
ers ample rooms to successfully launch phishing attacks. Moreover,
3Apps using CCT/SF are generally secure; so we skip them. We failed to locate any
feedback channel for KakaoTalk and Zhihu and therefore have to skip them as well.
it is a puzzle to see that different apps developed by the same com-
pany make vastly different security decisions for seemingly the
same component.
Snapchat’s response. Compared with Facebook, the security
team of Snapchat is more concerned on IABIs’ usability security
issues with the following response (despite that a priority fix would
not be issued as similar to FB Messenger): “While this attack scenario
is quite interesting, we would consider this to be more of a defense-in-