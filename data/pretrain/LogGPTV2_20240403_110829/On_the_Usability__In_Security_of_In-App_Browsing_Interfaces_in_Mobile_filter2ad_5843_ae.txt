### 3. Subject Apps with Custom IABI Implementations

This category includes three subject apps, each with their own IABI (In-App Browsing Interface) implementations. Among these, seven apps simply refuse to open the page, while eight apps prompt the end users and provide options to proceed. Two notable observations can be made about the latter group:

1. **Error Details Display:**
   - **Detailed Error Messages:** Three out of the eight apps (e.g., Facebook, Case 5) display specific certificate error details.
   - **No Error Details:** The other five apps (e.g., KakaoTalk, Case 1) skip the error details.

2. **User Selection Memory:**
   - All these apps remember the user's selection and do not display SSL error indicators after proceeding to open the web page, except for Facebook (Case 5), which turns the domain name red and includes a red exclamation mark icon even after the user chooses to proceed.

### 4. Neutral and Bad Designs

- **Neutral Design:**
  - **Twitter:** Twitter launches the system default browser to handle web pages with certificate errors. This design is considered acceptable (NEUTRAL) because the burden is shifted to the default browser.

- **Bad Design:**
  - **Ignoring Certificate Errors:** Ignoring certificate errors or directly opening an insecure web page are considered BAD designs.
  - **Alipay and Zhihu:**
    - **Alipay:** Directly opens a web page with incorrect host certificates.
    - **Zhihu:** Indiscriminately displays a prompt for visiting external websites, regardless of the presence or absence of certificate errors.

### 5. iOS Subject Apps

Surprisingly, all iOS subject apps, including Alipay and Zhihu, deliver GOOD designs. Both iOS apps show blank pages when attempting to open pages with certificate errors. This better behavior on iOS is likely due to stricter control for certificate errors on the iOS platform.

### 4.3.5 T6 & T7: Special URLs

As discussed in Section 3.2, T6 and T7 concern special URLs where a lock emoji is part of the title and where extended sub-domain names are used, respectively. Figure 8 shows screenshots of representative apps processing such special URLs.

- **Chrome Custom Tabs (CCT) and SFSafariViewController (SF):**
  - **Title Visibility:**
    - **Visible Title (Case 1):** The lock emoji and the exclamation mark icon appear next to each other, which is confusing but not too bad as the warning is present.
    - **Hidden Title (Case 2 and Case 11):** The HTTP warning is displayed without confusion.
  - **URL Suffix Display:**
    - Both CCT and SF display the suffix of the URL (with the long subdomain trimmed), making them immune to T7 attacks (see Cases 7 and 12).

- **T6 Good Design:**
  - A potential GOOD design would be to detect the use of lock (or similar) emojis in the title and replace them with unambiguous text or symbols. However, none of the subject apps implement this. Therefore, only those CCT apps that do not show the title are considered GOOD designs. Facebook (Case 3) and KakaoTalk have GOOD designs in this test.

- **T7 Good Design:**
  - Designs that prioritize the display of the domain name over the subdomain name are considered GOOD. LINE is the only GOOD one in our tests (Case 8).

- **Neutral Design:**
  - When the lock emoji in the title is shown, it is NEUTRAL if either the full URL or an HTTP indicator (e.g., exclamation mark icon) is also shown, allowing users to identify the page as insecure. Examples include CCT implementation, LINE (Case 4), and Twitter.
  - In T7, 9 out of 18 apps with custom IABI implementations only display the page title without the URL (e.g., WeChat, Case 9). While this does not strictly fall short on the extended subdomain, it is still misleading and categorized as NEUTRAL.

- **Bad Design:**
  - In T6, 11 apps display the lock emoji without any HTTP indicator or complete URL (e.g., Cases 5 and 6). Users are likely to be misled by the lock emoji, making these designs BAD.
  - In T7, 8 apps display the subdomain name with the domain name missing (Case 10), which is also considered BAD.

### 4.4 Usability Risks on Page Navigation

As mentioned in Section 3.3, our last test (T8) examines how a subject app’s IABI implementation reacts to dangerous operations (e.g., password inputting) during navigation of a web page. Specifically, T8 tests whether IABIs show specific or extra warnings on a login page compared to their normal behavior on a non-login page. Figure 9 shows the screenshots of some representative IABIs.

- **Chrome Custom Tabs (CCT) and SFSafariViewController (SF):**
  - **CCT (Case 1):** Does not provide additional warnings for password input on both HTTP and HTTPS login pages. Rated as BAD.
  - **SF (Case 5):** Highlights the display of "Not Secure" (normally displayed for all HTTP pages) in red when navigating an HTTP login page, making it more noticeable. However, no specific warnings are provided for HTTPS login pages. Rated as NEUTRAL.

- **Good Design:**
  - Apps that provide specific warnings for both HTTP and HTTPS login pages are considered GOOD. QQ Mail (Case 2) and QQ (both developed by Tencent) display such prompts, making them GOOD designs.

- **Neutral Design:**
  - Some apps display an extra warning during navigation of an HTTP login page but fail to provide any warning on an HTTPS login page. These apps are rated as NEUTRAL.

- **Bad Design:**
  - Other apps, including WeChat, score BAD in T8. Upon further investigation, we found that the anti-fraud tip used by other apps can be removed in WeChat if the domain name is registered on the developer platform of WeChat.

### 5. App Developers’ Responses

To understand developers’ reactions to our findings and to potentially provide recommendations for fixing severe IABI issues, we issued security reports to all affected apps through their bug bounty programs or security contact emails. Most apps acknowledged our findings but did not consider them as vulnerabilities within the scope of their bug bounty programs.

- **Facebook’s Response:**
  - While the Facebook app performs well in nearly all tests, FB Messenger and Instagram did not use the same IABI design and failed in tests T3–T4 and T6–T8. Instagram had already changed its IABI design to display a lock icon and an exclamation mark for HTTPS and HTTP pages, respectively, before our reporting. The Facebook security team appreciated our report but stated that it did not qualify for their bug bounty program due to the social engineering nature of the reported attacks. They also mentioned their URL detection system, Linkshim, which could defend against IABI attacks.

- **Snapchat’s Response:**
  - The Snapchat security team was more concerned about IABIs' usability security issues. They acknowledged the interesting attack scenario but did not prioritize a fix, considering it a defense-in-depth measure.