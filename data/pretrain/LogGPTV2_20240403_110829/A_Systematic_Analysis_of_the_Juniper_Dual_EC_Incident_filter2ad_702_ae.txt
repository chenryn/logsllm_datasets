Nonce queue
Nonce size
(bytes)
DH groups
supported
10000
1
1
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
20 MODP 768, 1024, 1536, 2048
32 MODP 768, 1024, 1536, 2048
32 MODP 768, 1024, 1536, 2048,
ECP 256, 384
Between versions 6.1.0 and 6.2.0, a cluster of changes were made to the PRNG and IKE subsystems. In the PRNG subsystem,
the switch to (1) Dual EC + X9.31; (2) reseeding on every call; and (3) the bug in reseed that causes X9.31 to be skipped produce
the necessary conditions to attack IKE. In the IKE subsystem, changing the nonce size from 20 bytes to 32 bytes moves the attack
from completely impractical to nearly best-case scenario, from an attacker’s point of view. The introduction of a nonce queue
changes the nature of the attack such that, in the usual case, an attacker can decrypt a session based solely on that session’s trafﬁc.
Version 6.3.0 is nearly identical to 6.2.0 but supports elliptic curve Difﬁe–Hellman groups. In contrast to the changes between
6.1.0 and 6.2.0, this may actually make an attacker’s job harder; see Section 5.5.
backdoor might be intentional. A remarkable presentation
by John Kelsey gives a postmortem of Dual EC standard-
ization from NIST’s perspective [21].
Our analysis in Section 4 shows that Juniper adopted
Dual EC in 2008. In 2013, NIST’s reopening SP 800-90A
for comments led Juniper to publish a knowledge base
article explaining that ScreenOS uses Dual EC, but “in a
way that should not be vulnerable to the possible issue that
has been brought to light,” because of the custom Q and
because Dual EC output is ﬁltered through X9.31 [19].
As our analysis shows, at the time that Juniper made this
statement, the Q generator shipping in ScreenOS was
the one introduced in the unauthorized 2012 change. In
January 2016, Juniper announced that it would remove
Dual EC from its ScreenOS products in “the ﬁrst half of
2016” [35].
Randomness failures. Many instances of randomness
failures in widely deployed systems have been reported.
In 1996, Goldberg and Wagner showed that the Netscape
browser seeded its PRNG insecurely, allowing SSL trafﬁc
to be decrypted [13].
Between 2006 and and 2008, Linux systems run-
ning the Debian distribution or its derivatives (including
Ubuntu) shipped a modiﬁed version of the OpenSSL li-
brary that failed to incorporate entropy from the kernel
into its own entropy pool. The available entropy was then
low enough under normal conditions that the keys that af-
fected systems generate could be exhaustively enumerated
and identiﬁed over the network [36].
Heninger et al. [16] performed a pairwise GCD on RSA
moduli obtained from scanning the IPv4 address space,
ﬁnding many shared factors and weak keys; the root cause
of the failure was the lack of entropy available shortly af-
ter boot in many network devices. Kim et al. [25] showed
that a related problem affected OpenSSL on Android.
Bernstein et al. showed that randomness failures in
smart cards allowed private keys to be recovered using
lattice attacks [6].
Design of PRNGs. A line of work beginning with
Kelsey et al. [22] and continuing to today [8, 9]. has
sought to formalize the security desiderata for PRNGs
used as part of cryptographic systems, and to evaluate
deployed PRNGs against these desiderata. Gutterman
et al. [14] and, later, Lacharme et al. [26] analyzed the
Linux randomness system, and Dorrendorf et al. [10]
analyzed that of Windows.
As new use cases arose, the security desiderata have
been revised and expanded. For example, Ristenpart and
Yilek analyzed application-level randomness reuse in vir-
tual machines whose state is reset and rolled back [31],
and Everspaugh et al. [11] extended the analysis to kernel-
level randomness.
10 Summary
Following Juniper’s disclosure of unauthorized code in
their ScreenOS VPN, we reverse engineered multiple
versions of ScreenOS to determine exactly what had hap-
pened. We ﬁnd that while the proximal cause of the
vulnerability was the replacement of the Q parameter
from the Dual EC PRNG, the attack was only possi-
ble due to the interaction of a cluster of changes made
by Juniper in the 6.2 version of ScreenOS released in
2008. Those changes included replacing their conven-
tional X9.31 PRNG with a two-stage PRNG which is
described as using Dual EC to seed the X9.31 PRNG;
in fact, however, in the default conﬁguration the X9.31
PRNG never executes and Dual EC values are output di-
rectly from the PRNG subsystem. Taken together with a
number of changes to the IKE implementation, this PRNG
structure enables an attacker who knows the discrete log
of Q to passively decrypt IKE handshakes and the IPsec
trafﬁc protected with keys derived from those handshakes.
We have validated the results of our binary analysis by
testing a modiﬁed ScreenOS binary with our own value Q
(for which we have the discrete log) and verifying that we
can decrypt the results of IKEv1 and IKEv2 handshakes.
12
References
[1] Accredited Standards Committee (ASC) X9, Finan-
cial Services. ANS X9.31-1998: Digital signatures
using reversible algorithms for the ﬁnancial services
industry (rDSA), 1998. Withdrawn.
[2] Accredited Standards Committee (ASC) X9, Finan-
cial Services. ANS X9.82-3-2007: Random number
generation, part 3: Deterministic random bit genera-
tors, 2007.
[3] Anonymized for submission. Anonymized for sub-
mission, Dec. 2015.
[4] E. Barker and J. Kelsey. NIST Special Publication
800-90A: Recommendation for Random Number
Generation Using Deterministic Random Bit Gen-
erators. Technical report, National Institute of Stan-
dards and Technology, 2006.
[5] E. Barker and J. Kelsey. NIST Special Publication
800-90A Revision 1: Recommendation for Random
Number Generation Using Deterministic Random
Bit Generators. Technical report, National Institute
of Standards and Technology, June 2015.
[6] D. J. Bernstein, Y.-A. Chang, C.-M. Cheng, L.-P.
Chou, N. Heninger, T. Lange, and N. Someren. Fac-
toring RSA Keys from Certiﬁed Smart Cards: Cop-
persmith in the Wild. In ASIACRYPT ’13, pages
341–360. Springer, 2013. ISBN 978-3-642-42045-0.
doi: 10.1007/978-3-642-42045-0_18.
[7] S. Checkoway, R. Niederhagen, A. Everspaugh,
M. Green, T. Lange, T. Ristenpart, D. J. Bernstein,
J. Maskiewicz, H. Shacham, and M. Fredrik-
son. On the practical exploitability of Dual EC
In Proceedings of
in TLS implementations.
USENIX Security 2014, pages 319–335. USENIX
Association, Aug. 2014.
URL https://www.
usenix.org/conference/usenixsecurity14/technical-
sessions/presentation/checkoway.
[8] Y. Dodis, D. Pointcheval, S. Ruhault, D. Vergnaud,
and D. Wichs. Security analysis of pseudo-random
number generators with input: /dev/random is not
robust. In Proceedings of CCS 2013. ACM Press,
Nov. 2013.
[9] Y. Dodis, A. Shamir, N. Stephens-Davidowitz, and
D. Wichs. How to eat your entropy and have it too–
optimal recovery strategies for compromised rngs.
In Advances in Cryptology–CRYPTO 2014, pages
37–54. Springer, 2014.
[10] L. Dorrendorf, Z. Gutterman, and B. Pinkas. Crypt-
analysis of the random number generator of the win-
dows operating system. ACM Transactions on In-
formation and System Security (TISSEC), 13(1):10,
2009.
[11] A. Everspaugh, Y. Zhai, R. Jellinek, T. Ristenpart,
and M. Swift. Not-so-random numbers in virtualized
linux and the whirlwind rng. In Security and Privacy
(SP), 2014 IEEE Symposium on, pages 559–574.
IEEE, 2014.
[12] K. Gjøsteen. Comments on Dual-EC-DRBG/NIST
SP 800-90, draft December 2005, Mar. 2006.
URL http://www.math.ntnu.no/~kristiag/drafts/dual-
ec-drbg-comments.pdf.
[13] I. Goldberg and D. Wagner. Randomness and the
Netscape Browser. Dr. Dobb’s Journal, 1996.
[14] Z. Gutterman, B. Pinkas, and T. Reinman. Analysis
of the linux random number generator. In Security
and Privacy, 2006 IEEE Symposium on, pages 15–
pp. IEEE, 2006.
[15] D. Harkins and D. Carrel. The Internet Key Ex-
change (IKE). RFC 2409 (Proposed Standard), Nov.
1998. URL http://www.ietf.org/rfc/rfc2409.txt. Ob-
soleted by RFC 4306, updated by RFC 4109.
[16] N. Heninger, Z. Durumeric, E. Wustrow, and J. A.
Halderman. Mining your ps and qs: Detection of
widespread weak keys in network devices. In Pro-
ceedings of the 21st USENIX Conference on Secu-
rity Symposium, Security’12, pages 35–35, Berkeley,
CA, USA, 2012. USENIX Association. URL http:
//dl.acm.org/citation.cfm?id=2362793.2362828.
[17] Juniper. 2015-12 Out of Cycle Security Bulletin:
ScreenOS: Multiple Security issues with ScreenOS
(CVE-2015-7755, CVE-2015-7756), Dec. 15.
URL https://kb.juniper.net/InfoCenter/index?page=
content&id=JSA10713&cat=SIRT_1&actp=LIST.
[18] Concepts & Examples ScreenOS Reference
Guide:
Juniper
Networks, rev. 02 edition, Dec. 2012. URL
http://www.juniper.net/techpubs/software/
screenos/screenos6.3.0/630_ce_VPN.pdf.
Virtual Private Networks.
[19] Juniper Networks.
Juniper Networks product
information about Dual_EC_DRBG. Knowledge
Base Article KB28205, Oct. 2013.
Online:
https://web.archive.org/web/20151219210530/
https://kb.juniper.net/InfoCenter/index?page=
content&id=KB28205&pmv=print&actp=LIST.
[20] C. Kaufman. Internet Key Exchange (IKEv2) Pro-
tocol. RFC 4306 (Proposed Standard), Dec. 2005.
URL http://www.ietf.org/rfc/rfc4306.txt. Obsoleted
by RFC 5996, updated by RFC 5282.
[21] J. Kelsey. Dual EC in X9.82 and SP 800-90A.
Presentation to NIST VCAT committee. Available
at
http://csrc.nist.gov/groups/ST/crypto-review/
documents/dualec_in_X982_and_sp800-90.pdf,
May 2014.
[22] J. Kelsey, B. Schneier, D. Wagner, and C. Hall.
Cryptanalytic attacks on pseudorandom number gen-
erators. In FSE ’98, pages 168–188. Springer, 1998.
ISBN 978-3-540-69710-7. doi: 10.1007/3-540-
69710-1_12.
[23] S. Kent. IP Encapsulating Security Payload (ESP).
13
RFC 4303 (Proposed Standard), Nov. 2005. URL
http://www.ietf.org/rfc/rfc4303.txt.
[24] S. Kent and K. Seo. Security architecture for the
Internet Protocol, Dec. 2005. URL https://tools.ietf.
org/html/rfc4301.
[25] S. H. Kim, D. Han, and D. H. Lee. Predictability
of android openssl’s pseudo random number gen-
erator. In Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications secu-
rity, pages 659–668. ACM, 2013.
[26] P. Lacharme, A. Röck, V. Strubel, and M. Videau.
The linux pseudorandom number generator revisited.
Cryptology ePrint Archive, Report 2012/251, 2012.
https://eprint.iacr.org/.
[27] H. Moore. CVE-2015-7755: Juniper ScreenOS
Authentication Backdoor. https://community.rapid7.
com/community/infosec/blog/2015/12/20/cve-
2015-7755-juniper-screenos-authentication-
backdoor, Dec. 2015.
[28] National Institute of Standards and Technology.
NIST opens draft Special Publication 800-90A, rec-
ommendation for random number generation using
deterministic random bit generators for review and
comment. http://csrc.nist.gov/publications/nistbul/
itlbul2013_09_supplemental.pdf, Sept. 2013.
[29] National
Institute of Standards and Technol-
ogy.
CMVP historical validation list, Feb.
2016. URL http://csrc.nist.gov/groups/STM/cmvp/
documents/140-1/140val-historical.htm. Retrieved
February 18, 2016.
[30] N. Perlroth, J. Larson, and S. Shane. N.S.A.
able to foil basic safeguards of privacy on web.
The New York Times, September 5 2013. On-
line: http://www.nytimes.com/2013/09/06/us/nsa-
foils-much-internet-encryption.html.
[31] T. Ristenpart and S. Yilek. When good randomness
goes bad: Virtual machine reset vulnerabilities and
hedging deployed cryptography. In NDSS, 2010.
[32] B. Schoenmakers and A. Sidorenko. Cryptanalysis
of the Dual Elliptic Curve pseudorandom generator.
Cryptology ePrint Archive, Report 2006/190, 2006.
URL http://eprint.iacr.org/.
[33] D. Shumow and N. Ferguson. On the possibility of
a back door in the NIST SP800-90 Dual Ec Prng.
Presented at the CRYPTO 2007 rump session, Aug.
2007. URL http://rump2007.cr.yp.to/15-shumow.
pdf.
[34] strongSwan. strongSwan: the opensource IPsec-
based VPN solution, Nov. 2015. URL https://www.
strongswan.org/.
[35] B. Worrall. Advancing the security of Juniper prod-
ucts. Online: http://forums.juniper.net/t5/Security-
Incident-Response/Advancing-the-Security-of-
Juniper-Products/ba-p/286383, Jan. 2016.
[36] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and
S. Savage. When private keys are public: Results
from the 2008 Debian OpenSSL vulnerability. In
A. Feldmann and L. Mathy, editors, Proceedings of
IMC 2009, pages 15–27. ACM Press, Nov. 2009.
[37] T. Ylonen and C. Lonvick. The Secure Shell (SSH)
Protocol Architecture. RFC 4251 (Proposed Stan-
dard), Jan. 2006. URL http://www.ietf.org/rfc/
rfc4251.txt.
14