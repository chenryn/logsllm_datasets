C
mcf
C
milc
C
namd
C++
gobmk
C
soplex
C++
povray
C++
hmmer
C
sjeng
C
libquantum C
h264ref
C
lbm
C
astar
C++
sphinx3
C
xalancbmk
C++
File Size (KB)
before
172
8,380
53
351
1,182
5,594
4,292
3,383
814
276
106
1,225
37
195
541
48,538
after
549
9,148
429
737
1,564
6,010
4,745
3,896
1,210
662
483
1,646
411
574
931
51,010
# of instructions
inserted
total
15,370
13
9,264
606,925
2,277
95
24,024
71
77,434
45
156,829
201
264
74,314
194,821
941
60,832
94
22,836
17
7,301
21
154
115,575
2,341
9
8,220
54
34,476
170
7,364
645,434
# of objects
peak
total
2
7
165k
3k
1
2
33
38
953
964
47
12k
1k
88
9k
15k
28
84k
1
1
2
49
9k
7k
1
2
5k
130k
703
6k
28k
4k
# of pointers
peak
total
0
0
3167k
178k
0
0
0
0
0
0
0
0
14k
172
26k
7923k
0
0
0
0
0
0
906
111
0
0
148
2k
14k
814k
256k
18k
# Nullify Memory (MB)
after
34
397
570
2,500
114
28
14
81
18
171
2
208
409
135
62
76
before
34
316
569
2,496
44
23
7
38
1
171
0
44
408
13
46
7
0
104k
0
0
0
0
140
6k
0
0
0
101
0
20
0
10k
incr.
378
768
376
386
382
416
453
513
396
386
378
420
374
378
389
2472
Table V: Details of instrumented binaries (the left half) and their runtime properties (the right half) in SPEC CPU2006. The
left half describes the details of incremented file size due to newly inserted instrumentation instructions. The runtime library of
DANGNULL is about 370 KB; DANGNULL requires approximately 40 B per instrumentation to trace pointer propagation. The
right half represents the details of the programs’ runtime behavior (e.g., increase of memory usage and the number of pointers
and objects in each benchmark). The increase of memory (due to shadowObjTree) depends on the number of objects and pointers
created and freed in total; bzip2, which has minimal memory allocation, imposed no extra memory overhead, while gcc, which
has many memory operations, imposes about 80 MB of extra memory overhead with DANGNULL.
Name
Chromium
File Size (MB)
before
1858
after
1868
incr.
10
# of instructions
total
inserted
140k
16,831k
Table VI: Static instrumentation results on Chromium
distribution or management of the instrumented binary.
C. Runtime Overheads
As DANGNULL must trace object relationships for nullifi-
cation, it increases both execution time and memory usage. To
determine how much runtime overhead DANGNULL imposes
on target applications, we measured various runtime overheads
of SPEC CPU2006 and the Chromium browser.
Figure 3 shows the runtime performance overheads of
DANGNULL running SPEC CPU2006 benchmarks. The over-
10
heads largely depend on the number of objects and pointers
that DANGNULL traced and stored in shadowObjTree. These
metadata tracing measurements are shown in the right half
of Table V. As we described in §V-B, each application has a
different number of object allocations and degree of pointer
propagation. Accordingly, each object allocation and pointer
propagation would insert extra metadata into shadowObjTree
unless it fails runtime range analysis. DANGNULL imposed an
average performance overhead of 80%. DANGNULL caused
more runtime overhead if the application had to trace a large
number of pointers. For example, in the povray case, a total
of 7,923,000 pointers were traced because it maintains a large
number of pointers to render image pixels, and thus increased
execution time by 270% with 213% memory overhead. On
the other hand, in h264ref, only 906 pointers were traced and
resulted in a 1% increase in execution time and 472% memory
overhead.
Benchmarks
(unit, [high or low])
Original
DANGNULL
Slowdown
Octane
(score, high)
13,874
13,431
3.2%
JavaScript
SunSpider Dromaeo JS
(ms, low)
(runs/s, high)
1,602.1
320.0
1,559.6
347.5
8.6%
2.7%
Rendering
Balls Dromaeo DOM Dromaeo JS Lib
(runs/s, high)
216.0
168.1
22.2%
(runs/s, high)
857.8
509.1
40.7%
(fps, high)
11.6
6.5
44.1%
html5
(sec, low)
10.1
20.7
105.3%
Table VII: Chromium Benchmark results with and without DANGNULL. High/low denotes whether performance was higher or
lower when compared to the unmodified test. For JavaScript benchmarks, DANGNULL imposes negligible overheads, varying
from 2.7-8.6%. For rendering benchmarks requiring lots of memory operations (e.g., allocating DOM elements), DANGNULL
exhibits 22.2%-105.3% overhead depending on type.
Page Complexity
# Req
# DOM Original
Website
Action
gmail.com
twitter.com
amazon.com
youtube.com
gmail.com
twitter.com
visit
visit
visit
visit
login
login
13
14
264
43
177
60
164
628
1893
2293
5040
3124
Loading Time (sec)
DANGNULL
0.60 (22.4%)
1.16 (10.5%)
1.60 (16.8%)
0.81 (32.8%)
7.66 (19.7%)
2.77 (28.2%)
0.49
1.05
1.37
0.61
6.40
2.16
# of objects
peak
total
123k
22k
23k
121k
25k
166k
23k
127k
31k
295k
172k
27k
# of pointers
peak
total
32k
12k
13k
35k
28k
81k
16k
46k
49k
165k
71k
23k
before
# Nullify Memory (MB)
after
171
178
200
178
301
276
7k
8k
16k
9k
32k
15k
46
48
57
49
96
98
Table VIII: Details of DANGNULL overhead when visiting four popular websites. The left half shows page complexities and
page load time. The right half shows detailed runtime properties.
•
exploits carefully developed for complex and large
scale software (e.g., Chromium).
Runtime use-after-free mitigation for end users: if
performance overhead is not the primary concern of
end users, DANGNULL is an effective use-after-free
mitigation tool with moderate performance overhead,
especially for web browsers.
• Use-after-free resilient programs: we have shown
that DANGNULL can utilize existing sanity check
routines and survive use-after-free attempts. By in-
tegrating automatic runtime repair work [25], we
believe DANGNULL can evolve to support use-after-
free resilient programs in the future.
Performance optimization. We believe DANGNULL’s
performance overhead can be further improved, especially for
performance critical applications. First of all, instrumentation