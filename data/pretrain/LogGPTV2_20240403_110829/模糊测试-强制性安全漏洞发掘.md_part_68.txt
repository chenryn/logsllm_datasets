客户机
服务器
析的模糊化字段。通过内嵌变异，一个模糊
PPRPOR
图22-3自治的内嵌变异
器就可以利用有效的事务并且生成足够有效
的变异以到达解析器。
ProxyFuzzer的结果
同前面章节所讨论过的最基本的模糊器相比，ProxyFuzzer仍然是非常基本的。然而，它早
已经被证明对于主流的（明显没有被很好地进行编码的）商业款件是非常有效的。在没有任何
工具以及帮助的情况下，ProxyFuzzer已经在计算机协会的Brightstor备份软件中发现了两个远
程的可利用漏润。
在后验证事务中所发现的第一个问题，剂弱了该影响的严重性。在通过TCP端口6050进行
的标准客户机一服务器通信中，一个长的文件名在UnivAgent.exe中融发了一个可利用的栈溢出
漏洞。
所发现的第二个问题存在于igateway.exeHTTPdaemon程序内部，该程序通过TCP端口
5250来进行通信。该问题只有当调试标志是可用的时候才会出现，这也削弱了该影响的严重性。
被请求的文件名通过对fprintf（）的一个调用而被不安全地传递，从而暴露出了一个可利用的
格式化字林串漏洞。
所发现的这两个问题在那些具有一些技巧性的漏洞集合中并不是特别突出。但是，如果考
虑到发现这些错误所需要做的很少的工作，那么ProxyFuzzer可能就是首先应当使用的工具。
22.2.2改进的代理模糊测试
目前正在进行的改进工作是为了使ProxyFuzzer更加智能化。额外的一些启发式方法也被加
以考虑以有助于进行自动化字段检测，以及后续的变异操作。当前的通信解析器能够从一个二
进制协议的剩余部分中分离出纯文本字段。被识别出的纯文本字段应当进一步加以处理，以寻
找常用的字段分隔符和终结符，如空格和冒号等。另外，可以对被检测的字符串前面的原始字
节进行搜索，以确定字符串长度和类型规范（也就是TLV字段）.于是，通过对一系列包的交
叉检查就可以验证可能的长度前缓，同样，也可以对字符串后面的原始字节进行研究，以发现
静态字段的内容。客户机和服务器的IP地址通常都出现在数据流的内部（在TCP/IP头的外面）。
由于这些信息是已知的，因此分析引擎就可以扫描网络数据以搜索原始和ASCII表示。
通过假定最简单的协议可以被描述为若干字段的一个序列，而这些字段分布属于图22-4中
---
## Page 316
第22章自动化协议解析301
所显示的类别之一，那么我们就可以通过一系列的猜想和验证来开始对一个未知协议的层次结
构进行建模。
原始数据
纯文本
进制
静志数据
AL
字符数据
XML
图22-4层次化协议分类
这个基本的技术对于解析复杂的二进制协议如SMB而言，可能只会提供很少的帮助。然面，
这里的最终目标并不是执行一个完整的解析，而是将简单协议的范围进行扩展以适合于进行自
动化模糊测试。作为一个应用例子，考虑下面人为生成的网络数据，这里的每一行作为一个事
务，并且使用字符将原始十六进制字节进行分隔：
[00 04|user|00 06|pedram|0a 0a 00 01|code rev 254|00 00 00 00 be ef|END
[00 04|user[00 05|aaron]0a 0a 00 03|code rev 31337|00 00 00 c0 1a|END
100 041ucer|00 04|cody10a 0a 00 021cede Fev 11100 00 00 00 00 de a4|END
每个人（可能甚至是一只海豚）都可以很简单的对这三个事务进行浏览，井且迅速对协议
的特定部分做出有根据的推测。让我们通过只研究第一个事务来看一下，我们所改进的自动分
析工具能够发现什么。首先，它检测到了一个4字节的IP地址字段，并且定位于（0a0a0001=
私有IP地址10.10.0.1）。接下来，它又发现了4个ASCII字符串，即user，pedram，coderev254
两字节的有效长度值，三字节的有效长度值，直到最后是一个4字节的有效长度值。现在，分
析例程就可以猜测该协议的起始部分是两个可变长度的字符串，其前缓是一个两字节的长度值，
其后面跟着所连接客户端的IP地址。扫描下一个字符申以发现一个长度前缴将不会产生任何结
果，假定此处的下一个ASCII字段是一个静态大小的字段，引擎进行搜索并且在后面发现了4个
空字节。于是猜想下一个字段应当是一个10字节的静态大小的ASCII字段。最后的字符串END
不包含长度前缓，其后面也没有跟着任何内容。该字段被猜想是一个三字节的静态大小的
ASCII字段。对于包含剩余两个字节的字段，我们无法做出任何假定。它可以是静态大小的也
可以是可变长度的，因此需要进行进一步的分析。将所有这些字段连接在一起，引擎就可以从
第一个事务中推断出如下的协议结构：
·2字节的字符串长度值，其后面跟着字符串。
·2字节的字符串长度值，其后面跟着字符串。
---
## Page 317
302第三部分高级模糊测试技术
*4字节的客户端IP地址。
·10字节的、静态长度的、空填充的ASCII字符串。
·静态长度或者可变长度的未知的二进制字段。
·3字节的静态长度的ASCII字符串。
现在，引擎将接着处理后续的事务以验证在初始分析阶段所做出的猜想。通过执行这一操
作，某些特定的假设被证实，面另外一些则变为无效的，整个过程始终在不断提高所建模协议
的准确性。不同于其他的简单例子，这个基于启发式规则的方法对于更加复杂的协议将会执行
失败。记住我们的目标不是要完整地理解被测试的协议，而是要提高缺乏帮助的模糊测试的有
效性。
22.2.3反汇编启发式规则
应用（反）汇编层次的启发式规则来帮助提高模糊器的有效性，已经成为了所有公开可用
的模糊测试工具以及框架所使用的一个概念。这个概念非常简单：当进行模糊测试时，通过使
用一个运行时诊断工具如调试器来监视代码在目标机上的运行情况。在调试器中，寻找静态字
符串和整数比较。将这些信息传递给模糊器，以供其在以后生成测试用例时进行参考，所产生
的结果将由于测试用例的不同而有所不同，然而确定无疑的是，模糊器可以通过恰当地利用这
些反馈信息来生成更加智能化的数据。考虑如下的代码片段，该片段摘自于现实世界的一个服
务器软件：
0040206C ca11 ds:_.1mp__sscanf
00402072 mov eax, Lesp+5DA4h+var_5CDC]
001752015
00402079 add esp,0Ch
12001200
0040207C cmp eax,3857106359
：string prefix check
00402081 jz short 1oc_40208D
00402083 push offset *string*
：“access protocol error*
00402088 jnp 1oc_401061
在sscanf（）API的帮助下，原始网络数据转换为一个整数。然后，所生成的该整数将与静
态整数值3857106359进行比较，如果这两个值不匹配，那么协议解析器就会由于一个访问协
议错误”而返回。当模糊器第一次遍历该代码块时，调试器构件将会发现“奇特”的值并且通
过反馈回路将其传递给模糊器。然后，模糊器就可以将该值包含在一些格式中，以期望将目标
应用置于一个正确的模式面暴露更多的代码覆盖。如果不使用反馈回路，那么模糊器就会失去
应有的作用。
可以使用PaiMei的逆向工程框架中的PyDbd构件，较为迅速地开发一个监视目标应用的
模糊器反馈调试器的概念验证实现。可以参阅hutp://www.fuzzing.org网站，以获取相关的源
代码。
在掌握了更加基本的一些技术之后，接下来我们将通过介绍生物信息学的概念，来讨论更
加高级的自动化协议解析的方法。
---
## Page 318
第22章自动化协议解析303
22.3生物信息学
Wikipedia定义了生物信息学，或者说是计算生物学的概念，它作为一个宽泛的术语概括了
如下思想和技术的使用，即“应用数学、信息学、统计学、计算机科学、人工智能、化学以及
生物化学通常在分子层次上来解决生物学的问题”9。从本质上来说，生物信息学包含不同的
技术可以被用来在复杂的但具有结构化特征的长数据序列，如基因序列中发现相关的模式，网
络协议同样也可以被看做是复杂的但具有结构化特征的长数据序列。因此，软件测试人员能否
从生物学家那里借鉴相关的技术来简化模糊测试呢？
在生物信息学中，最基本的分析就是排列对齐两个序列的能力，不管其长度如何而只是使
相似的程度最大化。在排列对齐的过程中可以在任何一个序列中插人空格以有助于实现该目标。
考虑如下的氨基酸序列排列：
Sequence One:ACATTACAGGA
市品
Sequence Two:ACATTCCTACAGGA
在第一个序列中插人了一些空格，强制使两个序列在长度上对齐，并且使其相似程度最大
化.已经有了一些算法能够实现上述以及其他序列对齐任务。其中的一个算法如Needleman
Wunsch（NW）算法，最初是由SaulNeeleman和ChristianWunsch在1970年提出的。NW
的一个示例，动态编程是这样一种方法，即它通过将大的问题分解为一系列小的问题来解决这
个大问题。
第次公开将生物信息学的相关理论应用丁网络协议分析领域，是在2004年下半年于加利
福尼亚州圣地亚哥召开的ToorCon电脑黑客会议上，在该会议上，MarshallBeddoe发布了一
个名为协议信息学（PI）的实验性的Python框架，引发了很大的反响，甚至发表了一篇网络文
章。但是从此，最初的Web站点就日益衰败，并且该框架也没有被积极地加以维护。由于PI
的发布者被安全分析公司MuSecurity所雇佣，因此关于该技术不再公开可用的一些推测使得
该技术成为了一个商业化的工具。幸运的是，经过β测试保证的PI代码的一个副本仍然可以从
PacketStorm处下载。
PI框架的目标是通过对大量所观测数据进行分析，来自动化推断出任意协议的域边界。已
经阐明PI成功地从HTTP，ICMP和SMB协议中识别出了域。它是通过使用Smith-Waterman
O. http://en.wikipedia.org/wiki/Bioinformatics
http:/len.wikipedia.org/wiki/Needleman-Wunsch_algorithm
http://en.wikipedia.org/wiki/Saul_Needleman
htt:/len,wikipedia.org/wiki/Christian_Wunsch
roommd③
http://www,wired.com/news/infostructure/0,1377,65191,00.html
mKanasnurmmm/dnq③
③http://en.wikipedia.org/wiki/Smith-Waterman
z8rId/sagus/uofunsasuosased/d
---
## Page 319
304
第三部分高级模期测试技术
功能的。尽管PI框架所应用的生物信息科学的细节已经超出了本书的讨论范围，但是这里仍然
对其进行了高层次的概要介绍，并且对该算法的典型应用进行了说明。
网络协议可以包含许多截然不同的消息类型。试图在不同的消息类型之间执行一个序列的
对齐操作将无功而返。为了解决这个问题，首先将针对本地序列对齐的SW算法应用于一对序
列以定位和匹配相似的后续序列。稍后，这些所确定的位置和所匹配的序列对将被使用以对
NW全局序列对齐算法提供帮助。同时，使用相似矩阵来帮助NW算法以优化序列之间的对齐
操作，PI框架使用两个常用的矩阵即接受率变异矩阵（PAM）和块置换矩阵（BLOSUM），来
基于数据类型对序列进行更加恰当的对齐操作。在实际应用中，可以将该操作推广为对二进制
数据与其他的二进制数据进行对齐，将ASCII数据与其他的ASCII数据进行对齐。这种特性就
允许更加准确地确定协议结构内部的可变长度字段。PI框架通过执行多种序列对齐算法从而将
该操作又向前推进了一步，以便于更好地理解目标协议。为了直接避开所应用的NW算法在计
算中的不可行性，使用了未加权的成对算术平均数算法（UPGMA）来生成一棵进化树，然后
将该进化树用于启发式规则来执行多种对齐操作。
让我们通过研究对一个简单的固定长度的协议ICMP进行解析的功能，来分析一下该框架
的实际运转情况。下面是使用PI框架来解析ICMP协议的一些基本步骤。首先，必须要收集一
些ICMP包以用于分析：
 tcpdunp -s 42 -c 100 -n1 -w 1cnp.dump 1cmp
然后，被捕获的通信就可以通过PI框架来进行运行：
Protocol Informatics Prototype (vo.01 beta)
/main.py-q-p./icmo.dump
Written by Marshal1 Beddoe 
Copyright （c) 2004 Baseline Research
Found 100 unique sequences in*../dumps/1icmp.out*
Creating distance matrix.. complete
Creating phylogenetic tree ..conplete
Discovered 1 clusters using a weight of 1.00
Performing multiple alignment on cTuster 1..complete
Output of cluster 1
0097 x08 x00 xad x4b x05 xbe x00 x60
0039x08x00x30x54x05xbe x00x26
0026x08x00xf7xb2x05 xbe x0 x19
0015x08x00x01xdbx05xbex00x0e
0048x08 x00 x4f xdf x05 xbe x00x2f
0040 x08 x00 xf8 xa4 x05 xbe x00 x27
0077x08x00xe8x28x05
0017 x08x00 xe8 x6c x05 xbex00 x10
xbe