### Symfony Version Affected
4.1.1

### Description
I am working on a microservice that does not have a homepage, as we follow a policy of prefixing our APIs with `/api`. I have not configured a homepage, and while in the development environment, I see a welcome page intended for developers. However, in the production environment, I encounter a 500 error because the welcome page is displayed by throwing a `NoConfigurationException`.

The relevant configuration code is located in:
```php
symfony/src/Symfony/Component/Routing/Matcher/Dumper/PhpMatcherDumper.php
```
Specifically, at line 198 in commit `adb137d`:
```php
$code .= " throw new Symfony\Component\Routing\Exception\NoConfigurationException();\n";
```

### How to Reproduce
1. Open a terminal.
2. Navigate to a temporary directory:
   ```sh
   cd /tmp
   ```
3. Create a new Symfony skeleton project:
   ```sh
   composer create-project symfony/skeleton
   ```
4. Change to the project directory:
   ```sh
   cd skeleton
   ```
5. Set the environment to production:
   ```sh
   sed -i 's/dev/prod/' .env
   ```
6. Start the PHP built-in web server:
   ```sh
   php -S 127.0.0.1:8000 -t public
   ```
7. Access the application in your browser at `http://127.0.0.1:8000`.
8. You will see a 500 error due to the following stack trace:
   ```plaintext
   [Fri Jul 13 17:05:48 2018] PHP Fatal error:  Uncaught Symfony\Component\Routing\Exception\NoConfigurationException in /tmp/skeleton/var/cache/prod/srcProdProjectContainerUrlMatcher.php:65
   Stack trace:
   #0 /tmp/skeleton/var/cache/prod/srcProdProjectContainerUrlMatcher.php(21): srcProdProjectContainerUrlMatcher->doMatch('/', Array, Array)
   #1 /tmp/skeleton/vendor/symfony/routing/Matcher/UrlMatcher.php(107): srcProdProjectContainerUrlMatcher->match('/')
   #2 /tmp/skeleton/vendor/symfony/routing/Router.php(262): Symfony\Component\Routing\Matcher\UrlMatcher->matchRequest(Object(Symfony\Component\HttpFoundation\Request))
   #3 /tmp/skeleton/vendor/symfony/http-kernel/EventListener/RouterListener.php(115): Symfony\Component\Routing\Router->matchRequest(Object(Symfony\Component\HttpFoundation\Request))
   #4 /tmp/skeleton/vendor/symfony/event-dispatcher/EventDispatcher.php(212): Symfony\Component\HttpKernel\EventListener\RouterListener->onKernelRequest(Object(Symfony\Component\HttpKernel\Event\GetResponseEvent), 'kernel.request', Object(Symfony\Component\EventDispatcher\Event))
   ```

### Possible Solution
One possible solution could be to catch the `NoConfigurationException` and handle it appropriately, perhaps by redirecting to a custom error page or returning a JSON response indicating that the requested route was not found.

For example, you could add an exception listener in your `config/services.yaml`:
```yaml
services:
    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
```

And then create the `ExceptionListener` class to handle the exception:
```php
namespace App\EventListener;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\ExceptionEvent;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\Routing\Exception\NoConfigurationException;
use Symfony\Component\HttpFoundation\JsonResponse;

class ExceptionListener implements EventSubscriberInterface
{
    public static function getSubscribedEvents()
    {
        return [
            KernelEvents::EXCEPTION => 'onKernelException',
        ];
    }

    public function onKernelException(ExceptionEvent $event)
    {
        $exception = $event->getThrowable();
        if ($exception instanceof NoConfigurationException) {
            $response = new JsonResponse(['error' => 'Route not found'], 404);
            $event->setResponse($response);
        }
    }
}
```

This way, when a `NoConfigurationException` is thrown, it will be caught and a 404 JSON response will be returned instead of a 500 error.