Protocols 2 and 3: Multi-block PIR + (OT(cid:87) SPIR)
The next two protocols are very similar to one another,
and are superﬁcially quite similar to Protocol 1: the user
retrieves part of the (encrypted) database using a multi-
block IT-PIR query, and then uses (a variant of) either OT
(in Protocol 2) or SPIR (in Protocol 3) to retrieve the ap-
propriate decryption key for the record she seeks. At a high
level, Protocol 2 is just a modiﬁed version of Camenisch
et al.’s OT protocol in which the trivial download step is
replaced by a multi-block IT-PIR query for the relevant
portions of the database. This dramatically improves the
communication cost of the protocol for large databases,
at the cost of some additional computation and IT-PIR’s
noncollusion assumption. We note that such a tradeoff
may be worthwhile in practice, since the (wall-clock) time
required to query a large database with Goldberg’s IT-PIR
can be a few orders of magnitude lower than the time
required for trivial download of that same database [34];
furthermore, since Moore’s law predicts faster growth in
parallel computation speeds than Nielsen’s law predicts for
bandwidth, this performance gap is likely to widen over
time. Protocol 3 is substantially the same as Protocol 2,
but it uses SPIR in place of OT to support a potentially
different set of optional features at
the cost of some
additional computation and communication overhead.
Initializing the database. As in Protocol 1, we use a stream
cipher to encrypt each record individually with its own
key stream; however, instead of encrypting with ephemeral
keys at query time, Protocol’s 2 and 3 both use static
(long-term) encryption keys in much the same way as
Camenisch et al. do in their OT [12]. In the Camenisch
et al. construction, the database D is represented by a
length-N sequence of elements from the target group GT
of some admissible bilinear pairing e : G× G → GT; each
one of these N group elements corresponds to a single
encrypted database record. (In other words, Camenisch
et al. ﬁx r = N and s = 1.) Encryption and decryption
are just multiplication and division, respectively, by some
“pseudorandom” group element that acts as the symmetric
key for a given record. In particular, the symmetric key
for the record at index j is just a unique signature on
the message “j ” using a blinded version of Au et al.’s
BBS+ signature scheme [1]. (In the case of POT or OTAC,
the message also contains some metadata about record
j.) To make Camenisch et al.’s approach work together
with our multi-block IT-PIR and variable-length records,
we represent the database as an r-by-s matrix over a ﬁnite
ﬁeld F rather than a length-N list of elements from GT.
In the case of Protocol 2, the key stream that encrypts
record j is output by a stream cipher seeded with the
above unique signature. (Encryption and decryption are
just componentwise addition and subtraction in F with the
key stream output by this stream cipher, respectively.) To
avoid index reuse in the case of a non-static database, we
assign a globally unique identiﬁer to each record and use
this identiﬁer in place of the record’s index in the unique
signature. In the case of Protocol 3, we also encrypt each
record individually using a key stream output by some
stream cipher; however, the seeds in Protocol 3 do not
require any special structure (like being a signature on
a speciﬁc value) and are therefore generated pseudoran-
domly.
Retrieving the decryption keys. In Protocol 2, the user
retrieves her decryption key exactly as in Camenisch et
al.’s OT [12] protocol, or possibly one of its variants like
POT [10] or OTAC [9, 11] (with the above modiﬁcation of
replacing the record index by a globally unique identiﬁer).
Once she has obtained the seed, the user can use the
stream cipher to reconstruct the key stream that decrypts
her desired record. In Protocol 3, she similarly retrieves
the appropriate seed for the stream cipher using Henry et
al.’s SPIR [28] protocol.
they call
lists and what
Pricing and access control. Implementing pricing and
access control on top of either protocol is trivial: simply
use the built-in support for pricing and access control in
Camenisch et al.’s POT and OTAC, respectively, or Henry
et al.’s PSPIR, to restrict access to the decryption keys to
those who have paid and satisfy the conditions set forth in
the access control policy. In the case of Protocol 3, some
additional features are available. For example, Henry et
al.’s PSPIR protocol simultaneously supports both access
tiered pricing. Tiered
control
pricing allows the database servers to partition users into
groups (or tiers) and then set different prices for each tier.
A user that queries the database proves in zero-knowledge
that she satisﬁes the access control policy and that she
is paying the price designated for members of her tier.
Protocol 3 can also use the PSPIR protocol’s bookkeeping
functionality to support multiple payees and Top-K repli-
cation (see Henry et al.’s paper for details [28]). Camenisch
et al. suggest that it might be possible to combine ideas
from their OTAC and POT protocols together to get tiered
pricing with access control in Protocol 2 as well [10], but it
seems infeasible to implement bookkeeping functionality
within their model.
Informal security and cost analysis. The security of Proto-
col 2 reduces to the security of Camenisch et al.’s protocol
(modulo considerations about the use of a stream cipher),
provided the noncollusion assumption for the IT-PIR holds.
If the protocol is instantiated to use either Camenisch et
al.’s POT [10] protocol or their OTAC [9] protocol to
retrieve decryption keys, then user privacy is information-
theoretic under the aforementioned non-collusion assump-
tion, and data privacy is computational under the (R+2)-
bilinear Difﬁe-Hellman exponent (BDHE) assumption [7,
§2.3] and the (R+1)-strong Difﬁe-Hellman (SDH) assump-
tion [6, §2.3]. The communication cost for the blind
signature and accompanying zero-knowledge proof is in
Θ(R), and the computation is in Θ(1);
the total
N , S/q} + R)
ﬁeld elements and the online computation cost is Θ(N)
ﬁeld operations.
communication cost per query is Θ(max{√
thus,
Likewise,
the security of Protocol 3 reduces to the
security of Henry et al.’s PSPIR (again, modulo consid-
erations about the use of a stream cipher). Hence, user
privacy is information-theoretic under the aforementioned
non-collusion assumption5, and data privacy is computa-
tional under the (t +q−1)-SDH. Note that the database
of keys is represented by an R-by-Θ(1) matrix over F
instead of the communication-optimal square matrix for
that scheme; thus, the communication cost and compu-
tation cost associated with obtaining a decryption key are
both Θ(R). The total communication cost of the protocol is
N , S/q} +R) ﬁeld elements and the total
computation cost is Θ(N + R) ﬁeld operations, plus Θ(R)
full-length exponentiations (in an elliptic curve group) for
the user and Θ(R) short exponentiations (i.e., with ≈ 40-bit
exponents) for each database server.
Protocol 4: Multi-block SPIR
therefore Θ(max{√
Our fourth and ﬁnal construction generalizes Henry et
al.’s PSPIR protocol [28] to handle multi-block queries,
and adds online ephemeral encryption to handle sub-block
queries (i.e, to handle queries involving blocks that contain
parts of two or more distinct records). The result is a new
PSPIR protocol that supports records of variable length in
a plaintext database. The key building block of the protocol
is Kate et al.’s polynomial commitments [29].
Constant-size commitments to polynomials. We brieﬂy
recall Kate et al.’s PolyCommitDL polynomial commit-
ments [29], which play a central role both in Henry et
al.’s PSPIR protocol and in our generalization of it. Let
e : G × G → GT be an admissible bilinear pairing on a
group G of the same order as the prime ﬁeld F. A trusted
initializer (or a distributed protocol) outputs a long-term
public key PK = {gαi | 0 ≤ i ≤ T}, where g is a ﬁxed
generator of G and α ∈ Z∗
|F| is a secret (trapdoor) key,
then it securely discards α. A commitment to a polynomial
f (x) is then C = g f (α), which is easy to compute from PK
provided deg f ≤ T . A prover can open C to the evaluation
of f (x) at x = i by computing the polynomial quotient w(x)
obtained upon dividing f (x)− f (i) by x− i and appealing
to the polynomial remainder theorem, which states that
f (x) = w(x)(x − i) + f (i). That is, the prover computes a
witness ω = gw(α) to the evaluation of f (x) at x = i and
sends the triple (i, f (i), ω) to the veriﬁer, who conﬁrms
that e(C, g) = e(ω, gα/gi)· e(g, g) f (i). If deg f = t, then C is
information-theoretically hiding against an adversary that
knows fewer than t evaluations of
f (x), and computa-
tionally hiding under the discrete logarithm assumption
against an adversary that knows exactly t evaluations of
f (x) [29]. (C is trivially non-hiding against an adversary
that knows more than t evaluations of f (x), since such
an adversary can easily interpolate said evaluations to
compute f (x).) C is computationally binding under the T -
SDH assumption [29].
5Actually, user privacy is information-theoretic against coalitions of up
to t − 1 database servers, and computational under the discrete logarithm
assumption against coalitions of t database servers [28].
Block types and metadata. To simplify the discussion in
this section, it is convenient to distinguish between two
fundamentally different block “types”.
Type I blocks contain parts of two or more records.
Type II blocks contain information about only one
record.
Every record is comprised of one or two Type I blocks and
zero or more Type II blocks. Referring back to Figure 1,
we see that record j in that example has two Type I blocks
(indices b j and b(cid:48)
j) and three Type II blocks (indices b j +1
through b j + 3).
Generalizing Henry et al.’s proof that a query is well
formed. The crux of Henry et al.’s PSPIR protocol is an
efﬁcient zero-knowledge proof that a vector of polynomial
commitments opens componentwise to a standard basis
vector at x = 0. Given a ﬁxed vector (cid:126)f = (cid:104) f1, . . . , fr(cid:105)
of polynomials from F[x] and a uniform random vector
(cid:126)a = (cid:104)a1, . . . ,ar(cid:105) of scalars from [1,n] (n ≤ |F|), deﬁne
the polynomial F(x) = (cid:126)a · (cid:126)f . Henry et al.’s proof com-
bines the following elementary observation about F(x)
with Cramer et al.’s proofs of partial knowledge [18] and
Bellare et al.’s “small exponent” batch veriﬁcation [4]: if
(cid:104) f1(0), . . . , fr(0)(cid:105) is a standard basis vector, then F(0) = ai
for some 1 ≤ i ≤ r; otherwise, if (cid:104) f1(0), . . . , fr(0)(cid:105) is not
a standard basis vector, then the probability that F(0) = ai
for some 1 ≤ i ≤ r is at most 1/n. To turn this observation
into a zero-knowledge proof, the prover (in our case, the
user) commits componentwise to (cid:126)f and sends the resulting
vector of commitments (cid:126)C = (cid:104)C1, . . . ,Cr(cid:105) to the veriﬁer (in
our case, to each of the database servers). The veriﬁer (or
a random oracle if we use the Fiat-Shamir heuristic [22])
responds with a vector of short scalars ((cid:126)a above), and
both parties use this challenge vector to compute the
to F(x) = (cid:126)a · (cid:126)f .
polynomial commitment gF(α) = ∏r
Finally, the prover engages the veriﬁer in a zero-knowledge
proof of knowledge of y such that y = F(0) and a (batch-
veriﬁed) proof of partial knowledge of equality of discrete
logarithms to prove she knows i ∈ [1,r] such that y = ai.
(See Appendix B of Henry et al.’s paper [28] for further
details.) If the veriﬁer knows that sufﬁciently many other
veriﬁers have accepted the same proof about the same
vector of commitments, then it is trivial to extend the above
zero-knowledge proof to show that a vector of r scalars
from F corresponds to a componentwise secret sharing
of a standard basis vector in Fr. This latter step can be
proved explicitly, for example, with a threshold signature,
or implicitly, as we do below, by re-randomizing the query
responses in a uniform way across all veriﬁers.
i=1Cai
i
The above proof can be generalized from a proof that
a vector of polynomial commitments opens to a standard
basis vector at x = 0 to a proof that a vector of polynomial
commitments opens to a q-by-r matrix from a predeﬁned
set at x = 0, ...,q−1. (Where the componentwise opening at
x = i corresponds to row i of the matrix.) The generalized
proof essentially uses q parallel instances of the vector
proof, but it combines them together into a single batch.
Thus, the veriﬁer sends an additional length-q column
vector (cid:126)c with uniform random components from [1,n]
along with the length-s row vector (cid:126)a after receiving (cid:126)C from
the prover. Both parties then compute the q-by-r matrix A
obtained by taking the outer product of (cid:126)c and (cid:126)a. In the
original protocol, the prover shows that the polynomial
F(x) = (cid:126)a· (cid:126)f evaluates to a component of (cid:126)a at x = 0; in the
generalized protocol, she instead shows that the trace of
the matrix product of A with the transpose of the matrix
encoded in (cid:126)f is in the set of such traces corresponding to
allowable matrices. This is a natural way to generalize the
protocol, since the trace of a product of matrices is itself
a generalization of the notion of a dot product of vectors.
Full details of the generalized protocol are in Appendix A.
Handling Type I blocks in a multi-block query. The above
zero-knowledge proof is sufﬁcient to extend Henry et al.’s
construction to a restricted form of multi-block SPIR,
in which users can request variable-length records from
a database that has only Type II blocks. (To make this
secure, the database servers still need to rerandomize the
user’s response polynomials for other inputs x ≥ q; this
can be done with a straightforward generalization of the
analogous step in Henry et al.’s protocol.) To handle Type I
blocks, we roll online ephemeral encryption into the query
rerandomization step. Unlike in Protocol 1, the database
servers do not encrypt the entire database; indeed, it is
only necessary to encrypt Type I blocks, and even then
only those particular Type I blocks that the user retrieves as
part of her query. If the Type I blocks are always encoded
in the ﬁrst two rows of the query matrix (i.e., at x = 0 and
x = 1 in the response polynomials), for example, then it
sufﬁces to encrypt the response — rather than the database
— at x = 0 and x = 1 only, irrespective of which record
the user requests. To enable this, the allowable matrix
corresponding to record j should be structured as follows.
j): Assume that record j begins in block
j(cid:54) = b j (we address the case of b j = b(cid:48)
b j and ends in block b(cid:48)
j
separately below). The allowable matrix corresponding to
a query for record j has ebj in its ﬁrst row and ebj(cid:48)−i+1 in
its second row (the order of the other rows can be arbitrary,
but must be agreed on by the user and all of the servers).
j − b j − 1 rows of the
If b(cid:48)
matrix are the zero vector.
j − b j < q− 1, then the last q− b(cid:48)
The servers need to encrypt blocks b j and b(cid:48)
j (which
may or may not be Type I blocks) in the query response.
To do so, they derive two common ephemeral seeds κ0 and
κ1 using a key derivation function seeded with a common