Listing 4: JavaScript interface exploitation in CVS Caremark
function beEvil() {
deviceInfo = native.getDeviceInfo()
clientID = native.getBenefactorClientInternalId()
geolocation = native.getGeoLocation()
loginState = native.getLoginState()
userName = native.getUserName()
preferredPharmacy = native.getPreferredPharmacy()
native.scanRx() // scan barcodes
// get prescription barcode image
prescriptionImage = native.getFrontRxImgData()
data = constructData(deviceInfo, clientID, geolocation,
loginState, preferredPharmacy, userName,
prescriptionImage)
// Send data to server
b=document.createElement(’img’)
b.src=’http://123.***.***.***/?data=’+ data
native.setPreferredPharmacy("WhicheverPharmacyIWant!")
}
ExternalWebView that extends IndeedWebView) for showing external
content such as job descriptions from untrusted domains. The app
attaches a JavaScript interface (named “JavaScriptInterface”) to
the internal WebView, while not exposing any such interfaces to
the external one in an attempt to protect resources from external
domains. The app also takes precautions to restrict navigation in the
internal WebView by removing all the hyperlinks in the rendered
text content; hence, it supposedly does not allow loading of external
URLs in this WebView. However, the app also offers the user the
choice of adding web sites as a part of their proﬁle and allowing
the user to navigate to these sites. This breaks the developer’s no-
load assumption on the internal WebView for pages from external
domains, and thereby puts the exposed JavaScript interfaces at risk.
In fact, we were able to access the JavaScript interface by navigating
to our "malicious" website in the internal WebView. In this interface,
the app offers the device’s unique ID, enabling/disabling Google
Now, checking if this device is registered with Indeed, getting user’s
registration ID, and registering the device with Indeed.
3.4 Adversary Model
Based on our observations on how JavaScript bridge vulnerabili-
ties can be exploited, we assume a web adversary who owns web
domains and/or ad content in which he can place malicious code.
Mobile web apps render the malicious domains and malicious ad
content through their embedded browsers. Such an app can reach
a malicious domain when the user starts navigating through the
embedded browser. Moreover, malicious ad content can be offered
by the adversary to both the app’s trusted domains and to other
untrusted domains. We assume that the adversary can reverse en-
gineer the victim app code to identify the exploitable JavaScript
bridges. The adversary can achieve this by ﬁrst downloading the
victim app’s apk using existing frameworks for crawling Google
Play store, and then decompiling it with any of the existing dex
decompilers (dex2jar [11], JD-GUI [12], apktool [13] etc.).
4. DRACO ACCESS CONTROL
Running code from untrusted origins in a WebView can be detri-
mental to users as the foreign code can compromise users’ privacy
and disturb their experience by exploiting the WebView’s tight-
coupling with the application code and device resources. A straight-
forward way to address this threat is to simply prevent the user from
visiting untrusted web pages. However, there are cases where this
is impossible to achieve since even trusted domains might embed
untrusted components in their web pages. Hence, it is necessary to
provide an access control mechanism for WebViews that can distin-
guish the source of foreign code that is being executed and grant
access only if the source is trusted by the developer or by the user. To
tackle this problem, in this work, we propose Draco, a ﬁne-grained,
origin-based access control system for WebViews, which consists of
two major components: 1) an access control policy language that we
call the Draconian Policy Language (DPL), which allows app de-
velopers to declare policy rules dictating how different components
within a WebView should be exposed to different web origins, and
2) a runtime system we call Draco Runtime System (DRS), which
takes policy rules on system and internal app resources (i.e., Java-
Script bridges) as an input from the developer and enforces them
dynamically when a resource request is made by a web origin.
4.1 Design Goals
Before we go into the depths of our policy language and the
Draco runtime access control on WebViews, it is important to dis-
cuss what our design goals are and how they affect the architecture
of our system. Previous work focuses on access control only on the
permission-protected parts of the exposed bridges in hybrid frame-
works. Our goal is to provide developers with a ﬁne-grained access
control model, which will enable them to express access control
policies on all parts of all access channels for all use cases of Web-
Views (i.e., in hybrid and native apps). These channels are namely
the JavaScript interface, the event handlers, and the HTML5 API.
App developers should be given full control on all of the channels,
that is, they should be able to specify which origins can access
which parts of the channels and assign permissions to trusted origins.
They should also be given the ﬂexibility to delegate decisions to
the user when needed. Draco should avoid modiﬁcations on any
parts of the operating system and should be implemented as part
of a userspace app. This would allow the system to be readily and
immediately deployable, while enabling frequent updates that are
disjoint from ﬁrmware updates. Additionally, Draco should be able
to enforce policy rules efﬁciently and its policy language should be
easy to understand and use for developers, as well as easy to extend
if necessary.
4.2 Draconian Policy Language
Draco supports a declarative policy language that allows app
developers to describe their security policies with respect to remote
code origins. Here we present the Draconian Policy Language (DPL)
and provide examples to demonstrate its expressiveness.
Grammar. We want to instantiate a capability-based access control
scheme based on least privilege and allow speciﬁcation of what
resources each remote origin can access and how they can access
them. By default, if a DPL rule does not exist to allow the web code
to access any resource, then access is denied. We use the Backus-
Naur Form (BNF) notation [14] for context-free grammar to describe
the new policy language. Terminals are denoted by single-quoted
literals.
Draco allows developers to write policy rules which dictate how
sensitive resources can be accessed by web code. We deﬁne the
syntax of a DPL rule as:
(cid:104)policy rule(cid:105) ::= (cid:104)subject(cid:105) ‘;’ (cid:104)trust level(cid:105) | (cid:104)subject(cid:105) ‘;’
(cid:104)channel(cid:105) ‘;’ (cid:104)decision point(cid:105)
Each Draconian policy rule is applied on a subject. The subject
indicates the web origin whose web content was loaded in the Web-
View. Here, a remote origin is represented by a URI scheme (i.e.,
http or https), a hostname and a port number as in the same origin
policy. We allow wild cards for origins in our language, in order to
allow creation of rules that can be applied to any origin. Addition-
ally, we allow wild cards for sub-domains in domain names (e.g.,
(*).mydomain.com) to enable rules that can assign all hosts under
the same domain the same access characteristics.
(cid:104)subject(cid:105) ::= ‘*’ | (cid:104)protocol(cid:105) (cid:104)hostname(cid:105) (cid:104)port(cid:105)
(cid:104)protocol(cid:105) ::= ‘http://’ | ‘https://’ | ∅
(cid:104)hostname(cid:105) ::= (cid:104)subdomain(cid:105) (cid:104)domain name(cid:105)
(cid:104)domain name(cid:105) ::= string
(cid:104)subdomain(cid:105) ::= ‘(*).’ | (cid:104)name(cid:105) ‘.’ | ∅
(cid:104)name(cid:105) ::= string
(cid:104)port(cid:105) ::= ‘:’ (cid:104)port number(cid:105) | ∅
(cid:104)port number(cid:105) ::= integer
A trust level is an abstraction that allows developers to instantiate
default policies. Our system supports three trust levels:
(cid:104)trust level(cid:105) ::= ‘trustlevel’ ‘’
(cid:104)trust level options(cid:105) ::= ‘trusted’ | ‘semi-trusted’ | ‘untrusted’
A trusted subject is allowed to access all resources whereas an
untrusted subject is never allowed to access any resources through
any channels. A semi-trusted domain can access exposed functional-
ity but only through user interaction. At this point it should be clear
that our policy language allows for essentially whitelisting domains.
However, this is still not expressive enough. Consider for exam-
ple the case that we want to allow a subject to access the exposed
JavaScript interfaces but not run HTML5 code that can unilaterally
access resources. Towards this end, the second part of the DPL rule
deﬁnition allows for such ﬁne-grained declarations. In particular
an app developer can specify which channel should be protected.
A decision point dictates whether such a policy rule should be en-
forced transparently to the user or only when the user agrees to it.
If left empty, then “system” is assumed which forces the system to
enforce the rule transparently to the user. If “user” is chosen then
the system delegates the enforcement decision to the user at the time
of the access attempt. DPL also allows app developers to provide
a description message for the user. This can be useful in cases the
DPL rule governs resources at a very ﬁne-granularity (e.g. at the
method level) which might be challenging for the user to understand.
In such cases a semantically meaningful message provided by the
app developer could help the user better perceive the context.
(cid:104)decision point(cid:105) ::= ‘decisionpoint’ ‘’
(cid:104)description(cid:105)
(cid:104)decision maker(cid:105) ::= ‘system’ | ‘user’ | ∅
(cid:104)description(cid:105) ::= ‘’ | ∅
(cid:104)text(cid:105) ::= string
The channel deﬁnition is more intricate: Draco needs to allow
greater levels of rule expressiveness to enable developers to dictate
ﬁne-grained policies. Every channel has its own idiosyncrasies and
exposes resources in different ways. This obviates the need for
allowing different speciﬁcations for each channel. Thus, an app
developer should be able to choose the channel they want to protect:
(cid:104)channel(cid:105) ::= (cid:104)event handler(cid:105) | (cid:104)html5(cid:105) | (cid:104)jsinterface(cid:105)
Our access control follows a least privilege approach: by default
everything is forbidden unless there is a rule to allow something
to happen. In particular, for the event handler channel, our pol-
icy allows app developers to specify how the whole channel can
be accessed by the subject, but also—need be—to deﬁne which
permission-protected APIs can be utilized by each event handler
method. This is reﬂected in the policy language as follows:
(cid:104)event handler(cid:105) ::= ‘alloweventhandler’ ‘;’ ‘’
‘;’ ‘’
An event handler method list (eh method list) can be a single event
handler method, or a list of event handler methods. Furthermore,
developers should be allowed to specify a list of permissions for the
exposed event handler methods:
(cid:104)eh methods(cid:105) ::= ‘all’ | (cid:104)eh method list(cid:105)
(cid:104)eh method list(cid:105) ::= (cid:104)eh method(cid:105) | (cid:104)eh method(cid:105) ‘,’
(cid:104)eh method list(cid:105)
(cid:104)eh method(cid:105) := ‘onJsHandler’ | ‘onJsPrompt’ | ‘onJsConfirm’
(cid:104)permission list(cid:105) ::= (cid:104)permission(cid:105) | (cid:104)permission(cid:105) ‘,’
(cid:104)permission list(cid:105) | ∅
where a  can be any of the Android permissions.
Similarly, for the html5 channel one can specify the WebKit per-
missions that web code can make use of:
(cid:104)html5(cid:105) ::= ‘allowhtml5’ ‘;’ ‘’
(cid:104)HTML permission list(cid:105) ::= (cid:104)HTML permission(cid:105) |
(cid:104)HTML permission(cid:105) ‘,’ (cid:104)HTML permission list(cid:105)
(cid:104)HTML permission(cid:105) ::= ‘VIDEO_CAPTURE’ | ‘AUDIO_CAPTURE’ |
‘GEOLOCATION’ | ‘PROTECTED_MEDIA_ID’ | ‘MIDI_SYSEX’
Lastly, for the jsinterface channel, our policy language allows de-
velopers to describe how every Java class and Java method exposed
to JavaScript can be accessed by the subject:
(cid:104)jsinterface(cid:105) ::= ‘allowjsinterface’ ‘;’ (cid:104)class methods(cid:105) ‘;’ ‘’
(cid:104)class methods(cid:105) := (cid:104)class name(cid:105) ‘’
(cid:104)class name(cid:105) ::= string
(cid:104)methods(cid:105) ::= ‘all’ | (cid:104)method list(cid:105)
(cid:104)method list(cid:105) ::= (cid:104)method name(cid:105) | (cid:104)method name(cid:105) ‘,’
(cid:104)method list(cid:105) | ∅
(cid:104)method name(cid:105) ::= string
Expressiveness. As with any language, there exist an intrinsic trade-
off between the usability of the policy language and its expressive-
ness. On the one hand, a usable policy language is of low complexity
but at the same time limited on the policies it can express. On the
other hand, a complex policy language can express more ﬁne-grained
rules. DPL strikes a careful balance between the two by aiming to ex-
press selected set of useful policies at the method level with one-line,
concise rules.
Consider for example the case where a developer of a low risk
application would like to allow their web service (“mydomain.com”)
to run code within the WebView of the host app. In such cases, the
developer could simply provide a rule as follows:
1
https://mydomain.com;trustlevel
Given only this rule, the system forbids any web code of origin
other that “mydomain.com” to access any exposed functionality
from the host app. At the same time, the trusted “mydomain.com”
can beneﬁt from all the exposed features.
In the aforementioned vulnerable case of the CVS Caremark
app (see Section 3), it is evident that the app developers wanted
to allow the CVS domains to access a rich JavaScript interface
(WebViewJavascriptInterface) and other domains to access a more
conservative JavaScriptWebBridge interface. This could be simply
described by the app developer and enforced by DRS providing the
following DPL rules:
1
2
https://www.caremark.com;allowjsinterface;
WebViewJavascriptInterface;decisionpoint
*;allowjsinterface;JavaScriptWebBridge;decisionpoint
where “*” is a wildcard that can match any origin. The former rule
allows only CVS domains to access the sensitive APIs, whereas the
non-sensitive app functionality can be exposed to all domains after
user approval with the latter rule.
In the case of the “Job Search” app by Indeed, the developer could
simply provide the rule:
1
(*).indeed.com;allowjsinterface;JavaScriptInterface;
decisionpoint
This will allow only code from “indeed.com” to use the exposed
JavaScript interfaces. The developer does not need to worry about
implementing two different WebViews, one for secure domains and
one for untrusted domains. Furthermore, navigation will not be an
issue as the system transparently allows only the “(*).indeed.com”
domains to access sensitive APIs.
In fact, we identiﬁed by looking at the decompiled application
code that the “Job Search” developers have written around 550 lines
of code, aiming to achieve separation between trusted and untrusted
domains by using a second fully-developed WebView (along with
custom-built Activity, WebViewClient, WebChromeClient classes),
and yet the app was still vulnerable. In contrast, one line of code
with the Draconian Policy Language is enough to secure the app
with Draco. Additionally, even though DPL allows the construction
of very ﬁne-grained policies, it can be seen from these examples
that simple and easy-to-construct policy rules can be sufﬁcient in
many practical cases. Consequently, our system can provide strong
protection to apps and minimize developers’ efforts with an easy to
use policy language.
MyStore example. To demonstrate more fully the expressiveness
of DPL, we consider a more elaborate scenario. Let us assume that
MyStore is a large retail company that aims to incorporate Eddys-
tone [15] Bluetooth Low Energy (BLE) [16] beacons on product
shelves in its stores [17]. These beacons broadcast URLs for the
product they advertise using the BLE protocol. MyStore also pro-
vides its clients with a shopping app, namely MyStore App, which
scans for the BLE beacon advertisement messages and displays the
web page of the advertised products in a WebView. The advertised
websites provide further information about the product such as de-
scription, images, reviews etc. These web pages can belong to the
web domain of MyStore (mystore.com), or to the MyStore suppliers
that partner with MyStore to use store beacons. MyStore App collects
a user’s proﬁle and preferences, allows her to scan product barcodes,
and also acquires the location of the user’s mobile device to perform
analytics in order to better their services.
MyStore App is a mobile web application that uses components
from mystore.com via the help of the WebView embedded browser,
and exports device resources and app functionalities through Java
Script bridges. In particular, it exposes the MyInterface Java class,
which features the following functions: getAge(), getGender(), get
StoreLocation(). MyStore wants to allow mystore.com to access
all the JavaScript Interfaces and resources of MyStore App. At the