To Percentile
88.73%
93.98%
≥ 95th Percentile, 90.88% of hosts
To Percentile
99.85%
99.88%
median class probability craters to 0%. Overall 98% of new communities were predicted
with lower than 50% probability of belonging to the true class, and 86% of communities
have lower than 10% class probabilities.
This demonstrates that the targeted noise injection attack is also effective against the
community discovery algorithm.
node2vec
Using the same set of DGA domains labeled in Spectral Clustering, before the attack, 89%
clusters can be predicted with the correct label, which dropped to 0.8% after the attack.
Figure 5.6b shows that, before the attack on node2vec, the median of predicted probabilities
is 100%, and the interquartile range is from 90% to 100%. A total of 85% of clusters were
predicted with at least 70% class probability. After the attack, 92% clusters have at most
10% predicted class probabilities.
Targeted noise injection attack also evades node2vec embeddings.
Targeted Noise Injection Costs
It is simple for malware to query additional domains, however, infected hosts engaging in
such queries may become more suspicious and easier to detect due to the extra network
signal they produce. This may cause the anomaly cost of the targeted noise injection attack
99
to be high enough to render it useless.
We analyze the anomaly cost by measuring the infected host percentile of the NXDO-
MAIN distribution both before and after the attacks for the two variants of the targeted noise
injection attacks, summarized in Table 5.2. Before any attack, only 9.12% of infected hosts
ranked lower than 95th percentile, and the remaining 90.88% of them ranked higher than
95th percentile. This means that, without any attack, infected hosts were already query-
ing more unique NXDOMAINs than most hosts in the network. However, doing targeted
noise injection attacks further increases the percentile ranks of the infected hosts, but not
substantially.
We separated the results based on whether infected hosts were querying fewer domains
than 95% of all hosts in the local network. Table 5.2 shows that among the 9.12% infected
hosts ranked lower than 95th percentile before the attack, they increased from an average
percentile of 69.86% to 88.73% after the targeted noise injection attack variant 1. Further-
more, they increased to 93.98% after attack variant 2. However, 90.88% of infected hosts
did not become more anomalous. They were ranked higher than the 95th percentile before
the attack. Their average percentile increased by 0.11% after attack variant 1, and by 0.14%
after attack variant 2. Because they were querying more domains than other hosts before
the attack, injecting noise does not change their percentile substantially.
The majority of hosts had little change in “suspiciousness”, whereas a small percentage
of hosts increased their suspiciousness after the targeted noise injection attacks.
5.5.3 Small Community
We choose a group of 618 domains and 10 infected hosts belonging to Suppobox as the
basis for the small community attack. They form a community using the community dis-
covery algorithm, and two clusters using spectral or node2vec embeddings. A small com-
munity attack is successful if and only if all DGA domains join either the “death star,” or
clusters where the subsequent classiﬁer does not predict them as the true malware DGA
100
class. Recall that the death star cluster contains tens of thousands of domains that cannot
be properly classiﬁed. In all experiments, the small community plots denote the conﬁgura-
tions where an attack succeeds based on the aforementioned criteria. This is represented by
green regions (see Figure 5.7) when the “death star” is joined, or white cells when the noisy
clusters cannot be predicted as the true class label (see Figure 5.9) when using node2vec.
Spectral Clustering
As described earlier, the small community attack can only be veriﬁed in the perfect and
moderate knowledge cases. In the minimal knowledge case, however, an attacker can still
mount the attack by randomly removing edges and nodes, as described in Section 5.2, while
hoping for the best.
Minimal Knowledge The upper-leftmost plot in Figure 5.7 demonstrates the possible
successful conﬁgurations for mounting the small community attack by randomly removing
nodes and edges. The plot shows the remaining number of NXDOMAINs on the Y-axis
(|V | − nv) and the remaining number of connections from infected hosts for each NX-
DOMAIN on the X-axis (|U| − ne). The shaded region shows approximately a 75.16%
success rate for an attacker with no knowledge of the defender’s graph G. While a mini-
mal knowledge attacker cannot guarantee their attack will succeed, they nonetheless have
a high chance of success.
Perfect Knowledge The upper-left plot in Figure 5.7 depicts a successful small commu-
nity attack area when the computed SVD rank is 35. The ﬁgure shows that only a small
set of conﬁgurations with 380 to 618 DGA domains, each queried by between 3 to 10 ran-
dom hosts, were unable to successfully launch a small community attack. The cost of the
small community attack is very low against the system, which is conﬁgured with rank 35
and runs in this network. For example, an adversary controlling the DGA does not need
to give up any infection, but only needs to reduce the number of infected hosts that query
101
Figure 5.7: Different number of eigenvalues.
a common set of DGA domains from 618 to 380 in order to hide the domains. In this
case, by removing nv = 238 NXDOMAINs, the attacker does not lose any additional host
querying activities min(ne) = 0. But if the attacker needs extra redundancy provided by
460 distinct NXDOMAINs, each domain can only be queried by a subset of 5 hosts. Then
nv = 158, and accordingly, min(ne) = 5. In this case, the attacker does not need to lose
control of any infected hosts, but she does need to coordinate each ﬁve infected hosts to
query a subset of distinct NXDOMAINs that do not overlap with each other.
Moderate Knowledge After reducing the number of DGA domains and the number of
infected hosts per domain to the successful attack area shown in Figure 5.8, the DGA
domains join the surrogate death star. We test that these values also work to join the original
death star. Because the original network size is larger than the surrogate network size, the
real successful area (the top-left plot in Figure 5.7) is much bigger than the one shown
Figure 5.8. Thus, the small community attack works with moderate knowledge when the
surrogate dataset is a smaller network than the original network. If the surrogate dataset is
102
020040060013579# of Shared Hosts# of DGA Domains35 Eigenvalues020040060013579# of Shared Hosts# of DGA Domains50 Eigenvalues020040060013579# of Shared Hosts# of DGA Domains80 Eigenvalues020040060013579# of Shared Hosts# of DGA Domains100 Eigenvalues020040060013579# of Shared Hosts# of DGA Domains200 Eigenvalues020040060013579# of Shared Hosts# of DGA Domains300 EigenvaluesSmall Community Attack SuccessfulFalseTrueFigure 5.8: Success area for joining the death star of the surrogate dataset in the moder-
ate knowledge case. All the successful attack conﬁgurations worked in the ground truth
network.
a larger network, the adversary may miscalculate the cost of joining the death star, which
may not work in the original network. By using such a surrogate dataset, the adversary will
likely choose fewer DGA domains and their shared hosts to simulate a successful attack,
compared to the ideal case in perfect knowledge.
In other words, the practical cost of
launching a small community attack with moderate knowledge is more than the minimal
cost of such an attack in the original network. We explore the effect of network size in
Section 5.5.3.
Spectral clustering can be evaded using the small community attack, even when the
attack cannot be veriﬁed by the attacker with a success rate of 75%+. More sophisticated
attackers can always evade.
Community Discovery
Unlike graph embedding techniques that lose information about smaller components of
the graph, community discovery algorithms do not lose information and can properly han-
dle portions of G with exactly one edge. Rather than clustering poorly with other small
components, they are considered to be separate communities. So the cost of the small com-
munity attack is much higher than with graph embeddings because attackers must generate
singletons that are small enough to evade classiﬁcation, forcing the attacker’s graph to be
103
020040060013579Number of Shared HostsNumber of DGA DomainsAttack SuccessfulFalseTrueFigure 5.9: Success area of small community attacks with different context size.
disconnected. Therefore, they can evade clustering with the cost of losing their ability to
efﬁciently manage their bots. For example, to evade community discovery in the example
presented in Figure 5.2, an attacker would have to use the modiﬁed attack graph G(cid:48)
4 and the
drop from D(G) = 0.5 to D(G(cid:48)
4) = 0.25 is enough to consider the attack cost too high. In
the DGA case, this would mean each infection would need its own distinct domain-name
generation algorithm, which would be an exceedingly high cost for an attacker. As such,
we do not compute results for small community attacks on community discovery.
Community discovery is resistant to the small community attack due to the high costs
it would cause the attacker, however, spectral methods and node2vec are more likely to be
used by defenders as they result in cleaner clusters and better classiﬁcation results.
node2vec
The third plot in Figure 5.9 shows that the small community attack is still possible with
node2vec, using aforementioned hyperparameters (Section 5.5.1). The attack is possible
when the number of shared hosts is 1 (the ﬁrst column except the top cell), and when the
number of DGA domains is ≤ 40 (the bottom two rows). Elsewhere, the attack succeeds
randomly due to the random walk. In summary, the small community attack is deﬁnitely
possible with very small component sizes. Compared to SVD, the cost is higher here. For
example, the attacker needs to give up nv = 578 unique NXDOMAINs in a day, along
with ne = 0, for the small community attack to be successful. But if the attacker is not
104
020040060013579# of Shared Hosts# of DGA DomainsNeighborhood Size 2Success Rate 65.16%020040060013579# of Shared Hosts# of DGA DomainsNeighborhood Size 4Success Rate 60.65%020040060013579# of Shared Hosts# of DGA DomainsNeighborhood Size 6Success Rate 70.65%Small Community Attack SuccessfulFalseTruewilling to give up such cost, the small community attack is not guaranteed to succeed given
the randomness of neighborhood sampling. However, if a minimal knowledge attacker
randomly chooses any nv and ne for a small community attack, she will have a 70.65%
attack success rate shown by the third plot in Figure 5.9.
node2vec is susceptible to the small community attack, but with fewer guarantees and
higher costs than in the spectral case, due to its inherent randomness. node2vec being used
in Pleiades would render the system more resilient against small community attacks.
Small Community Costs
The cost of the small community attack is affected by both the size of network and change
in density when the attack is performed.
Size of Network The network size is related to the number of nodes (hosts and domains)
and the number of edges (the query relationship). As a straightforward way to model the
network size, we randomly sample the hosts in the ground truth network dataset along with
all domains queried. We also keep the same attacker subgraph G, containing the Suppobox
DGA community with 10 infected hosts and 618 DGA domains, along with other domains
queried by these hosts for the experiment.
Figure 5.10 shows the small community attack results by sampling 10% to 90% of
all hosts. When only 10% of hosts were sampled, the small community attack failed in
most areas of the plot. The attack success area increases as the network size gets larger.
This means that the cost for small community attack is lower in a larger network than in a
smaller network, given the same hyperparameters. A larger network is harder to accurately
represent in an embedding, which provides more areas for attackers to hide and evade.
A moderate knowledge level attacker should attempt to acquire a surrogate network
dataset smaller than the ground truth network dataset for a safe estimate of their small
community attack cost.
105
Figure 5.10: Different sizes of the network dataset.
Agility Cost By removing nodes and edges, the attacker loses redundancy. For example,
hosts need to query fewer DGA domains, or malware can be allowed fewer malicious
actions. We measure the agility cost by the change in density of the attack graph. Density
captures the number of edges present in the attack graph over the maximal number of
possible edges. In Section 5.5.3, Equation 5.1 deﬁnes the attack graph density before the
small community attack; and Equation 5.2 deﬁnes the density after the attack. Before
the attack, D(G) = 0.48 for the Suppobox community. For each SVD rank parameter,
we record attack conﬁgurations that were successful small community attacks as green
ares in Figure 5.7. There are some outliers outside the continuous area. Although these
attacks do not make NXDOMAINs join the death star, they move NXDOMAINs to clusters
that cannot be predicted with the correct label. To measure the minimum agility cost, we
106
020040060013579# of Shared Hosts# of DGA DomainsSample 10% of All Hosts020040060013579# of Shared Hosts# of DGA DomainsSample 20% of All Hosts020040060013579# of Shared Hosts# of DGA DomainsSample 30% of All Hosts020040060013579# of Shared Hosts# of DGA DomainsSample 40% of All Hosts020040060013579# of Shared Hosts# of DGA DomainsSample 50% of All Hosts020040060013579# of Shared Hosts# of DGA DomainsSample 60% of All Hosts020040060013579# of Shared Hosts# of DGA DomainsSample 70% of All Hosts020040060013579# of Shared Hosts# of DGA DomainsSample 80% of All Hosts020040060013579# of Shared Hosts# of DGA DomainsSample 90% of All HostsSmall Community Attack SuccessfulFalseTrueTable 5.3: Agility cost of small community attacks under different hyperparameter conﬁg-
urations.
Spectral Clustering
Density
Join Death Star
SVD rank 35
SVD rank 50
SVD rank 80
SVD rank 100
SVD rank 200
SVD rank 300
Neighborhood Size 6
Number of Walks 5
Number of Walks 10
Number of Walks 15
Walk Length 2
Walk Length 4
Walk Length 12
Walk Length 20
Median Maximum Minimum Cost
0
0.03
0.22
0.29
0.38
0.22
0.078
0.11
0.065
0.052
0.0032
0.026
0.61
0.45
0.26
0.19
0.10
0.26
node2vec
Density
Maximum Minimum Cost
0.415
0.415
0.45
0.415
0
0.19
0.415
0.415
0.065
0.065
0.032
0.065
0.65
0.29
0.065
0.065
exclude the outliers by only calculating attacker graph density that resulted in joining the
death star. Table 5.3 summarizes the median and maximum attacker graph density in these
small community attacks, with the minimum cost represented by the difference between
D(G) and max(D(G(cid:48))). When the SVD rank is 35, the max(D(G(cid:48))) to join the death
star is slightly bigger than D(G), which means there is no cost in launching the small
community attack. In this case, the attacker can evade while having more connectivity. As
the SVD rank increases, the attacker graph density is reduced, which means a successful
attack is more costly to the adversary. Also, the minimum cost increases as the SVD rank
increases. For example, when the SVD rank is 80, the minimum cost is 0.22, reducing
the attack graph density from 0.48 to 0.26. The attacker needs to reduce the number of
distinct DGA domains from 618 to 160 to evade, but each domain can be queried by all
infected hosts. In comparison, when the SVD rank is 200, the minimum cost is 0.38. The