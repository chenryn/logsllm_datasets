# TokyoWesterns CTF 2019 格式化漏洞利用的新姿势
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 前言
前天刚结束的TokyoWesterns CTF
2019里碰到一道比较有意思的格式化漏洞利用的题printf，这里分享一下解题思路。与常规fsb题不同的是，printf这题程序自己实现了printf函数。
题目下载：
链接: 密码:2j77
## 0x02 分析
题目给了3个文件，除了常规的libc还额外给了一个ld.so，ld.so用于装载libc。一般，我们可以设置LD_PRELOAD环境变量选择强制装载特定版本的libc，但若是该libc与编译程序时所采用的libc版本相差太大，往往出现错误。
这里需要用到[patchelf](https://github.com/NixOS/patchelf)这个工具，执行以下命令，将libc和ld.so指向题目所给的文件
    patchelf --set-interpreter /root/workspace/elf/ld-linux-x86-64-b6d3f5f70ba36f736a596a01829be4d619e373b4167b513d634c044ac7d74b94.so.2 printf
    patchelf --set-rpath /root/workspace/elf:/libc.so.6 printf
现在printf程序指向了题目所给libc和ld.so
    ~/workspace/elf # ldd printf
        linux-vdso.so.1 =>  (0x00007ffe09ac1000)
        libc.so.6 => /root/workspace/elf/libc.so.6 (0x00007fd7c5dd0000)
        /root/workspace/elf/ld-linux-x86-64-b6d3f5f70ba36f736a596a01829be4d619e373b4167b513d634c044ac7d74b94.so.2 => /lib64/ld-linux-x86-64.so.2 (0x00007fd7c5fbb000)
保护全部开启
    ~/workspace/elf # checksec printf
    [*] '/root/workspace/elf/printf'
        Arch:     amd64-64-little
        RELRO:    Full RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      PIE enabled
        RUNPATH:  '/root/workspace/elf:/libc.so.6'
反编译printf程序，`sub_136E`实际上是程序自己实现的printf函数
    _int64 __fastcall main(__int64 a1, char **a2, char **a3)
    {
      __int64 v3; // rdx
      __int64 v4; // rcx
      __int64 v5; // r8
      __int64 v6; // r9
      __int64 v7; // rdx
      __int64 v8; // rcx
      __int64 v9; // r8
      __int64 v10; // r9
      const unsigned __int16 **v11; // rax
      __int64 v12; // rdx
      __int64 v13; // rcx
      __int64 v14; // r8
      __int64 v15; // r9
      __int64 v16; // rdx
      __int64 v17; // rcx
      __int64 v18; // r8
      __int64 v19; // r9
      __int64 v20; // rdx
      __int64 v21; // rcx
      __int64 v22; // r8
      __int64 v23; // r9
      int i; // [rsp+8h] [rbp-118h]
      int v26; // [rsp+Ch] [rbp-114h]
      char buf[264]; // [rsp+10h] [rbp-110h]
      unsigned __int64 v28; // [rsp+118h] [rbp-8h]
      v28 = __readfsqword(0x28u);
      sub_130D();
      sub_136E((__int64)"What's your name?", (__int64)a2, v3, v4, v5, v6);
      v26 = read(0, buf, 0x100uLL);
      buf[v26 - 1] = 0;
      for ( i = 0; i .  */
    #include 
    #include 
    #include 
    #include 
    #include 
    #include "exit.h"
    #include "set-hooks.h"
    DEFINE_HOOK (__libc_atexit, (void))
    /* Initialize the flag that indicates exit function processing
       is complete. See concurrency notes in stdlib/exit.h where
       __exit_funcs_lock is declared.  */
    bool __exit_funcs_done = false;
    /* Call all functions registered with `atexit' and `on_exit',
       in the reverse of the order in which they were registered
       perform stdio cleanup, and terminate program execution with STATUS.  */
    void
    attribute_hidden
    __run_exit_handlers (int status, struct exit_function_list **listp,
                         bool run_list_atexit, bool run_dtors)
    {
      /* First, call the TLS destructors.  */
    #ifndef SHARED
      if (&__call_tls_dtors != NULL)
    #endif
        if (run_dtors)
          __call_tls_dtors ();
      /* We do it this way to handle recursive calls to exit () made by
         the functions registered with `atexit' and `on_exit'. We call
         everyone on the list and use the status value in the last
         exit (). */
      while (true)
        {
          struct exit_function_list *cur;
          __libc_lock_lock (__exit_funcs_lock);
        restart:
          cur = *listp;
          if (cur == NULL)
            {
              /* Exit processing complete.  We will not allow any more
                 atexit/on_exit registrations.  */
              __exit_funcs_done = true;
              __libc_lock_unlock (__exit_funcs_lock);
              break;
            }
          while (cur->idx > 0)
            {
              struct exit_function *const f = &cur->fns[--cur->idx];
              const uint64_t new_exitfn_called = __new_exitfn_called;
              /* Unlock the list while we call a foreign function.  */
              __libc_lock_unlock (__exit_funcs_lock);
              switch (f->flavor)
                {
                  void (*atfct) (void);
                  void (*onfct) (int status, void *arg);
                  void (*cxafct) (void *arg, int status);
                case ef_free: