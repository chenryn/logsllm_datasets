### Transaction Handling and Reissuance

When transactions are incorrectly marked as unsuccessful, they can be reissued during a new iteration of the routing protocol. At this point, new transaction paths are calculated, and the transaction can be successfully executed. Given the efficiency of available distributed Breadth-First Search (BFS) algorithms and the fact that we use the same routing technique as Canal [62] and Privpay [47], SilentWhispers achieves the same recall value. Additionally, transactions that were wrongly tagged as unsuccessful can be reissued to ensure they are eventually performed successfully.

### Handling Offline Users

When a user goes offline and later comes back online, they must retrieve updates to their credit links from landmarks. The user must then verify that all changes to their credit links have been correctly performed by the landmarks (see Section VI-A).

To study the impact of this extension, we extracted the number of updates performed on the credit links of Ripple users. We randomly selected 100 Ripple users and checked how many transactions involved their credit links over a one-month period (i.e., June 2014). We observed that a maximum of 107 updates were performed on a user's credit links. In principle, the user must check each update as many times as the number of landmarks, but this task can be parallelized. For each update performed by a given landmark, the user must verify the update and its signature, which can be done in less than 5 ms. Therefore, even if a user is offline for a month, it will take them about 500 ms to restore their information and check its authenticity.

Moreover, as described in Section VI-A, landmarks must ensure that the share of the transaction value issued by the sender is indeed smaller than the path capacity. For this purpose, landmarks perform a less-than operation as a multiparty computation protocol using the two shared values as input. This modification introduces an overhead of only 0.330 seconds with honest-but-curious landmarks and 21.132 seconds in the presence of malicious landmarks.

Finally, landmarks must sign new link states on behalf of offline users using the shares of their signing keys. For efficiency, this task can be performed using distributed Schnorr signatures [58], so the time to compute a signature is similar to the creation of a single signature by each landmark. Thus, the overall time for the transaction operation in the presence of offline users is still dominated by the computation of the available credit in the path (i.e., about 1.3 seconds).

### Handling Malicious Landmarks

To handle malicious landmarks, we need to incorporate Secure Multiparty Computation (SMPC) protocols that are secure against malicious adversaries. In the transaction protocol, landmarks are confined to computing the minimum value of the path, whose execution time in the malicious case is shown in Table I. In a setting with 7 landmarks, where 3 are corrupted, the computation of the minimum of two values takes 21.457 seconds. This implies that the computation of the minimum credit in a path takes approximately 86.13 seconds. Note that the employed SMPC library does not yet incorporate recent significant advancements in the SMPC domain [18], [20], [34], [36]. It uses the older SMPC paradigm [10], [28], and with an improved library, we expect at least an order of magnitude improvement in the performance of our maliciously secure SMPC executions.

We believe that the resulting running time is still practical in most scenarios. For example, it still allows for significantly speeding up intercontinental transactions that currently take up to several days. Nevertheless, we believe that the extension to malicious landmarks is interesting from a theoretical point of view but may not be worth implementing in practice, as landmarks have no incentive to misbehave, as discussed in Section III-A.

### Related Work

The problem of enforcing privacy-preserving transactions in a credit network has recently been studied by Moreno-Sanchez et al. [47]. They leverage trusted hardware to enforce the privacy of the transacting parties and the transacted value by accessing the credit network information via an oblivious RAM algorithm. In contrast, their approach targets a centralized solution, where a unique server stores the complete credit network. Such a solution is hardly applicable to real-life payment systems like Ripple and Stellar, as it would require them to change their hardware infrastructure to incorporate trusted hardware. Additionally, the centralized design of [47] is in inherent tension with the distributed nature of consensus algorithms used in Ripple and Stellar, and it is unclear who should play the role of the central server running the trusted hardware. Moreover, the centralized architecture of [47] may pose a severe scalability problem, as transactions are handled by a single secure processor and cannot be easily parallelized.

Mezzour et al. [41] propose a path-discovery technique that computes a hash tree connecting users that share a credit link. To find a path between two users, they compute the private set intersection of the set of hashed values they hold. A path exists between two users if the intersection set is non-empty. However, this technique does not allow for reconstructing the path connecting the sender and receiver in a private manner and omits the concept of credit by considering unweighted links, two features that are crucial for credit networks.

Backes et al. [8] present the concept of Anonymous Webs of Trust, which includes a mechanism to prove the existence of a path of trust certificates among the sender and the receiver in zero-knowledge, such that intermediate trust relationships remain private for third parties. This approach, however, relies on a server maintaining all the trust certificates, which must be publicly available, thus breaking link privacy.

There is extensive literature on privacy-preserving online social networks [9], [17], [32], [49]. Intuitively, an object (e.g., a tweet) is secured such that only friends of the object’s owner can access it while remaining private for the rest of the users. In a credit network, however, a given credit link is potentially accessed by any user connected through a credit path. Therefore, the owner of a link cannot establish an access policy to a given link other than the most permissive one, i.e., everyone is allowed to access it.

Several proposals exist for constructing privacy-preserving payments in Bitcoin based on zero-knowledge proofs [11], [42], centralized mixing [12], decentralized mixing [54], [61], SMPC [25], confidential transactions [40], and smart contracts [35], [64]. These proposals, however, are not applicable to the inherently different credit network setting, as Bitcoin does not use the concept of credit links. SilentWhispers enables credit network operations such as path finding and payment path updates in a privacy-preserving manner while ensuring correctness (e.g., no double spending): each intermediate user verifies that their total balance is preserved after each payment.

Wu et al. [63] present a protocol to compute the shortest path in a privacy-preserving manner based on private information retrieval (PIR) in a centralized setting. Employing their techniques in a decentralized network does not seem feasible, if even possible.

### Conclusions

In this work, we presented SilentWhispers, the first privacy-preserving distributed credit network. SilentWhispers achieves a number of privacy properties (i.e., sender, receiver, link, and value privacy), preserves the correctness of transactions, and provides an accountability mechanism to enforce the correctness of link updates. The use of highly connected and readily available nodes such as gateways in Ripple is a crucial ingredient to make our system efficient, robust, and scalable.

We implemented the cryptographic schemes employed in SilentWhispers and demonstrated through an experimental evaluation the practicality of our approach for real-life payment systems. In particular, we showed that our solution allows for fast transactions and scales to a growing number of users. Moreover, we discussed how SilentWhispers can be used to instantiate currently available applications based on credit networks in a distributed manner. Finally, SilentWhispers demonstrates that a privacy-invasive public ledger is not necessary for the secure instantiation of a credit network.

### Acknowledgments

We would like to thank the anonymous reviewers for their valuable feedback and our shepherd Erman Ayday for his comments and suggestions. This work was partially supported by the German Federal Ministry of Education and Research (BMBF) through the Emmy Noether program and through funding for the Center for IT-Security, Privacy and Accountability (CISPA) and by the German Research Foundation (DFG) via the collaborative research center “Methods and Tools for Understanding and Controlling Privacy” (SFB 1223).

### References

[References listed here as in the original text]

This revised version aims to improve clarity, coherence, and professionalism, making the text more accessible and easier to understand.