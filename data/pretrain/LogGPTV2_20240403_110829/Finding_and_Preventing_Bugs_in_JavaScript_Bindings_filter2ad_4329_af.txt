backs after type checking and casting. onFail handles a JS
encapsulating a v8::Error by registering an error handler that
the API calls when type checking fails or when JavaScript up-
calls throw an error. The programmer must register an error
handler: failing to do so causes a compile-time warning. This
means that all functions that return a JS are guaranteed to
have associated error-handling code.
onVal registers a callback that accepts one or more values;
the callback’s type signature indicates which values the pro-
grammer expects. For convenience, the programmer can im-
plement overloading by chaining multiple onVal calls. In that
case, the API invokes the ﬁrst callback with a matching type
signature, or the error handler if no signature matches.
Value-marshaling functions. The API provides three func-
4Our API is inspired by Haskell’s monads and JavaScript’s promises. It differs
from V8’s usage of Maybe types (§3.1) in two ways: (1) JS keeps track
of exceptions raised by JavaScript code and (2) the methods on JS are
crash- and type-safe.
571
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
tions for converting JavaScript Values to JSs. Value is
V8’s base “unknown” type for all JavaScript values. Value-
marshaling functions convert Values either to a speciﬁc type
(e.g., v8::String) or to v8::Error in case of failure. To en-
force type- and crash-safety, these functions always check the
type of their Value val arguments before casting. Internally,
this amounts to calling val->IsString(), say, to check that
val is truly of type v8::String. If so, the marshaling func-
tion returns a JS; if not, it returns a v8::Error.
Because the marshaling functions return a JS, they require
the programmer to explicitly handle errors; recall that, to ac-
cess JS values, the programmer must register callbacks with
onVal and onFail.
Object methods. The API also provides methods for safely ma-
nipulating Objects. These methods are similar to V8’s object
methods—e.g., Get, which gets the value of a property—but
they make side effects explicit. As an example, V8’s Get may
silently upcall into a user-deﬁned JavaScript getter, leading to
an unexpected exception. Like Get, our API’s getProp method
gets the value of a property—but it returns a JS instead
of a Value.5 This return value makes it clear that an upcall is
possible and forces the programmer to handle the potential side
effects of that upcall by registering an onFail error handler.
Example: blobConstr. We re-implement blobConstr from
§2 using our safe API:
1 void
2 blobConstr(const FunctionCallbackInfo& args)
3 {
4
// marshal arg[0] v8::Value from JavaScript
marshal(args.GetIsolate(), args[0])
// if marshaling to Array succeeded:
.onVal([&](Local blobParts) {
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
// Add each string part of the array to the blob
uint32_t n = blobParts -> Length();
for (uint32_t i = 0; i  part) {
// Add already-casted string part to the blob
blobImpl->AddV8StringPart(part);
})
// if above failed or element is not a string:
.onFail([&](Local err) {
// handle unexpected field
})
}
})
// if arg[0] is not an Array or onVal failed:
.onFail([&](Local err) {
// handle error
});
27
28 }
This function creates a new JavaScript Blob object out of an
array of JavaScript strings. First, it uses the marshal function
5Or a Maybe values that can be converted to a Value with hard-crashing
conversion functions.
to safely convert the JavaScript value args[0] to a C++ value
(line 4).6 In order to use the result of the marshal call, the
programmer must register callbacks via onVal and onFail.
onVal and onFail each take one argument, a C++ lambda, that
the API invokes after executing marshal. The formal argument
to the onVal lambda (blobParts on line 6) speciﬁes the type
that the programmer expects marshal to return (Array). At
runtime, the API checks the type of args[0] before casting it
and executing the callback. If args[0] is an Array, the onVal
callback executes; if not, the onFail one runs instead, allowing
the programmer to pass an exception back to JavaScript code.
In this way, casting and type checking are always coupled,
eliminating a range of type-safety bugs.
blobConstr’s top-level onVal callback uses the safe API
to extract the String values at each index in the blobParts
JavaScript array (line 11). Since blobConstr uses getProp to
access these values, the API type checks and casts the values be-
fore invoking the correct callback, preserving JavaScript’s crash-
and type-safety. Since failing to register onVal and onFail call-
backs results in a compile-time warning, the programmer is
forced to account for both success and failure.
Implementation
5.2
We implement our API as a C++ library on top of the existing
public V8 API. The API implementation comprises 1100 lines
of C++. The library-based approach introduces little perfor-
mance overhead (§5.3) and, more importantly, allows binding
code developers to incrementally migrate their existing sys-
tems from V8 proper. Furthermore, this approach lets security-
critical modules (e.g., the Node.js password-hashing library
bcrypt [86]) use our safe API without waiting for the Node.js
runtime or V8 engine to incorporate our changes.
The C++ class JS is a templated class that implements
onVal and onFail. Programmers use onVal and onFail to
register success and failure callbacks. For example, any time a
programmer wants to use a speciﬁc V8 type, they must marshal
a Value to that type, registering their callbacks along the way.
Our API makes JS values easier and safer to use by at-
taching the warn_unused_result compiler attribute [36] to
the return value of the onVal method. This strongly encourages
binding code developers to register onFail handlers: if onVal’s
result is unused (i.e., the call to onVal is not chained to a call
to onFail), the compiler emits a warning.
Our API also uses restrictions on method arguments to
enforce type-safety. Developers must declare the concrete
expected type (e.g., v8::Array or v8::String) of every
JavaScript argument in an onVal lambda. The API uses recent
C++ features like decltype and std::declval to introspect
the type of the lambda; it uses this information to generate spe-
cialized versions of each function accepting JS arguments
(e.g., marshal). These specialized versions perform runtime
type checking and casting according to the types speciﬁed in
the programmer’s registered lambda. Other than onVal and
onFail, our API does not provide any way to directly manipu-
6marshal takes an Isolate* as a ﬁrst argument; we discuss these further in
§2, “Detailed overview of V8-based bindings.”
572
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
late (e.g., check or cast) v8::Values.
5.3 Evaluation
We evaluate our API design and implementation by answering
three questions:
1. Is the API backwards compatible?
2. Is the API’s performance overhead acceptable?
3. How hard is it to port existing code to the API?
To answer these questions, we rewrote the Node.js binding-
layer libraries for buffer and http. We chose these libraries
both because they are representative of Node.js bindings
and because they are widely used: http and buffer are es-
sential for building web applications, Node.js’s most promi-
nent use case. In particular, we rewrote the buffer bind-
ing library node_buffer.cc, HTTP parsing binding library
node_http_parser.cc, and several smaller support libraries’
bindings (e.g., uv and util) in Node.js version 7.0.0. In the
rest of this section we answer the three evaluation questions
by comparing vanilla Node.js against SaferNode.js, our safer
version of Node.js.
Compatibility
Porting binding-layer functions to our safe API should pre-
serve their semantics—except their crashing semantics. We
speciﬁcally want to eliminate hard crashes.7 To measure
SaferNode.js’s backward compatibility, we used Node.js’s ex-
isting compatibility-checking test suite. We ran Node.js’s built-
in test suite [66], which consists of 1,265 tests; SaferNode.js
passed all of them. We also used the Canary in the Gold Mine
(CITGM) tool [67] to run the test suites of 74 popular Node.js
packages with SaferNode.js [72]; this is the same setup that
Node.js developers use to ﬁnd regression bugs in candidate re-
leases [71]. Once again, we found no difference between vanilla
Node.js and SaferNode.js in terms of compatibility.
Performance
two micro-
We ran Node.js’s performance benchmarks,
benchmarks,
to measure
SaferNode.js’s overhead. In the worst case, SaferNode.js
is 11% slower than Node.js when the latter uses V8 APIs in an
unsafe (hard-crashing) way. On the other hand, when Node.js
uses V8 APIs safely, SaferNode.js imposes no signiﬁcant
additional overhead. Finally, for real-world applications,
SaferNode.js imposes less than 1% overhead. We describe
these results and benchmarks in more detail below.
a macro-benchmark
and
All measurements were conducted on a single machine with
an Intel i7-6700K (4 GHz) with 64 GiB of RAM, running
Ubuntu 16.10. We disabled dynamic frequency scaling and
hyper-threading, and pinned each benchmark to a single core.
Node.js benchmarks. To measure the performance difference
between Node.js and SaferNode.js, we used Node.js’s bench-
marking suite [69]. This suite is designed to ﬁnd performance
regressions. It works by benchmarking a set of Node.js modules
7There is one exception to this: we do not rewrite code that hard-crashes for
legitimate reasons, e.g., because it can no longer allocate memory.
on two different versions of the Node.js runtime and comparing
their performance; our tests compare Node.js and SaferNode.js.
We ran the buffer and http benchmark suites 50 and 10 times,
respectively. (We chose these numbers in order to complete the
benchmarking in reasonable time, roughly 10 hours.)
Each benchmark runs hundreds of tests on both Node.js and
SaferNode.js, where each test invokes an operation a ﬁxed num-
ber of times, depending on how long the operation takes to run.
For example, the buffer benchmark for indexOf, a relatively
slow operation, measures the time to execute 100,000 calls to
buff.indexOf. It times these calls for different combinations
of search strings, encodings, and buffer types, reporting total
execution time in operations per second for each combination.
Figures 3a and 3b plot the speed of SaferNode.js normalized
to Node.js for each test in the buffer and http benchmark
suites, respectively. Each dot represents one test from the suite;
results are sorted from slowest to fastest. The average overhead
for buffer is 1%, with a maximum of 11%. http shows essen-
tially no overhead on average; in the worst case, it is 5% slower.
Below we use micro-benchmarks to show that SaferNode.js’s
overhead is the result of the API’s added type checking; Node.js
is faster because it does not perform these checks.
A few tests in both benchmark suites show modest speed-
ups; these are spurious. To conﬁrm this, we built Node.js
and SaferNode.js using two different compilers, GCC 6.2 and
Clang 3.8.1, and ran both test suites (Figure 3 shows results for
GCC). We found that compiler-to-compiler performance varia-
tion on individual tests was on the order of 1–2%, comparable to
the measured speed-ups. Moreover, tests that showed speed-ups
for GCC often showed slow-downs for Clang, and vice-versa.
A few tests show >2% average speed-ups. In these tests, how-
ever, individual runs showed widely varying results, with both
speed-ups and slow-downs. We expect further benchmarking
would show that SaferNode.js and Node.js have essentially the
same performance on these tests.
Micro-benchmarks. To test our hypothesis that SaferNode.js’s
overhead is due to extra checking in the safe API, we created
three micro-benchmarks, each of which marshals a Number
from JavaScript to C++ and back. We compare our safe API’s
version of this function with two normal V8 API versions, one
that does type checking and one that does not. echo_nocheck
uses the normal V8 API and performs no type checking:
1 void echo_nocheck(const FunctionCallbackInfo&
(cid:2)→
args) {
Local ret = args[0].As();
args.GetReturnValue().Set(ret);
2
3
4 }
echo_check uses the same V8 API calls as above, but adds
explicit type checking:
1 void echo_check(const FunctionCallbackInfo&
(cid:2)→
args) {
if (args[0]->IsNumber()) {
Local ret = args[0].As();
args.GetReturnValue().Set(ret);
} else { // handle error
}
2
3
4
5
6
7 }
573
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:27:26 UTC from IEEE Xplore.  Restrictions apply. 
d
e
z
i
l
a
m
r
o
n
,
s
j
.
e
d
o
N
r
e
f
a
S
f
o
d
e
e
p
S
)
r
e
t
t
e
b
s
i
r
e
h
g
h
(
i
s
j
.