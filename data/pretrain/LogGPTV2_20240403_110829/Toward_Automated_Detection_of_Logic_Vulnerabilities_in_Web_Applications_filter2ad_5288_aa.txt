title:Toward Automated Detection of Logic Vulnerabilities in Web Applications
author:Viktoria Felmetsger and
Ludovico Cavedon and
Christopher Kruegel and
Giovanni Vigna
Toward Automated Detection of
Logic Vulnerabilities in Web Applications
Viktoria Felmetsger
Ludovico Cavedon
[rusvika,cavedon,chris,vigna]@cs.ucsb.edu
Christopher Kruegel
Computer Security Group
Department of Computer Science
University of California, Santa Barbara
Giovanni Vigna
Abstract
Web applications are the most common way to make ser-
vices and data available on the Internet. Unfortunately,
with the increase in the number and complexity of these
applications, there has also been an increase in the num-
ber and complexity of vulnerabilities. Current techniques
to identify security problems in web applications have
mostly focused on input validation ﬂaws, such as cross-
site scripting and SQL injection, with much less attention
devoted to application logic vulnerabilities.
Application logic vulnerabilities are an important class
of defects that are the result of faulty application logic.
These vulnerabilities are speciﬁc to the functionality of
particular web applications, and, thus, they are extremely
difﬁcult to characterize and identify. In this paper, we
propose a ﬁrst step toward the automated detection of
application logic vulnerabilities. To this end, we ﬁrst use
dynamic analysis and observe the normal operation of a
web application to infer a simple set of behavioral spe-
ciﬁcations. Then, leveraging the knowledge about the
typical execution paradigm of web applications, we ﬁlter
the learned speciﬁcations to reduce false positives, and
we use model checking over symbolic input to identify
program paths that are likely to violate these speciﬁca-
tions under speciﬁc conditions, indicating the presence
of a certain type of web application logic ﬂaws. We de-
veloped a tool, called Waler, based on our ideas, and
we applied it to a number of web applications, ﬁnding
previously-unknown logic vulnerabilities.
1
Introduction
Web applications have become the most common means
to provide services on the Internet. They are used
for mission-critical tasks and frequently handle sensi-
tive user data. Unfortunately, web applications are often
implemented by developers with limited security skills,
who often have to deal with time-to-market pressure and
ﬁnancial constraints. As a result, the number of web ap-
plication vulnerabilities has increased sharply. This is re-
ﬂected in the Symantec Global Internet Security Threat
Report, which was published in April 2009 [12]. The re-
port states that, in 2008, web vulnerabilities accounted
for 63% of the total number of vulnerabilities reported.
Most recent research on vulnerability analysis for web
applications has focused on the identiﬁcation and miti-
gation of input validation ﬂaws. This class of vulnera-
bilities is characterized by the fact that a web application
uses external input as part of a sensitive operation with-
out ﬁrst checking or sanitizing it properly. Prominent
examples of input validation ﬂaws are cross-site script-
ing (XSS) [20] and SQL injection vulnerabilities [3, 32].
With XSS, an application sends to a client output that is
not sufﬁciently checked. This allows an attacker to in-
ject malicious JavaScript code into the output, which is
then executed on the client’s browser. In the case of SQL
injection, an attacker provides malicious input that alters
the intended meaning of a database query.
One reason for the prior focus on input validation vul-
nerabilities is that it is possible to provide a concise and
general speciﬁcation that captures the essential charac-
teristics of these vulnerabilities. That is, given a pro-
gramming environment, it is possible to specify a set of
functions that read inputs (called sources), a set of func-
tions that represent security-sensitive operations (called
sinks), and a set of functions that check data for mali-
cious content. Then, various static and dynamic anal-
ysis techniques can be used to ensure that there are no
unchecked data ﬂows from sources to sinks. Since the
speciﬁcation of input validation ﬂaws is independent of
the application logic, once a detection system is avail-
able, it can be used to ﬁnd bugs in many applications.
While it is important to identify and correct input vali-
dation ﬂaws, they represent only a subset of the spectrum
of (web application) vulnerabilities. In this paper, we ex-
plore another type of application ﬂaws. In particular, we
look at vulnerabilities that result from errors in the logic
of a web application. Such errors are typically speciﬁc
to a particular web application, and might be domain-
speciﬁc. For example, consider an online store web ap-
plication that allows users to use coupons to obtain a dis-
count on certain items.
In principle, a coupon can be
used only once, but an error in the implementation of the
application allows an attacker to apply a coupon an arbi-
trary number of times, reducing the price to zero.
So far, web application logic ﬂaws have received little
attention, and their treatment is limited to informal dis-
cussions (a well-known example is the white paper by J.
Grossman [14]). This is due to the fact that logic vulnera-
bilities are speciﬁc to the intended functionality of a web
application. Therefore, it is difﬁcult (if not impossible)
to deﬁne a general speciﬁcation that allows for the dis-
covery of logic vulnerabilities in different applications.
One possible approach would be to leverage an appli-
cation’s requirement speciﬁcation and design documents
to identify parts of the implementation that do not respect
the intended behavior of the application. Unfortunately,
these documents are almost never available in the case of
web applications. Therefore, other means to characterize
the expected behavior of web application must be found
for detection of application logic ﬂaws.
In this paper, we take a ﬁrst step toward the automated
detection of application logic vulnerabilities. Our ap-
proach operates in two steps. In the ﬁrst step, we infer
speciﬁcations that (partially) capture a web application’s
logic. These speciﬁcations are in the form of likely in-
variants, which are derived by analyzing the dynamic ex-
ecution traces of the web application during normal oper-
ation. The intuition is that the observed, normal behavior
allows one to model properties that are likely intended by
the programmer. This step is necessary to automatically
obtain speciﬁcations that reﬂect the business logic of a
particular web application. In the second step, we ana-
lyze the inferred speciﬁcations with respect to the web
application’s code and identify violations.
The current implementation of our approach is based
on two well-known analysis techniques, namely, dy-
namic execution to extract (likely) program invariants
and model checking to identify speciﬁcation violations.
However, to the best of our knowledge, the way in which
we combine these two techniques is novel, has never
been applied to web applications, and has not been lever-
aged to detect application logic ﬂaws. Moreover, we had
to signiﬁcantly extend the existing techniques to capture
speciﬁc characteristics of web applications and to scale
them to real-world applications as outlined below.
In the ﬁrst step of our analysis, we used a well-known
dynamic analysis tool [9, 11] to infer program speciﬁca-
tions in the form of likely invariants. We extended the
existing general technique to be more targeted to the ex-
ecution of web applications. In particular, we addressed
two main shortcomings of the general approach: the fact
that many invariants that relate to important concepts of
web applications were not identiﬁed (e.g., invariants re-
lated to objects that are part of the user session) and the
fact that many spurious invariants were generated as a re-
sult of the limited coverage of the dynamic analysis step
or because of artifacts in the analyzed inputs.
To deal with spurious invariants, we developed two
novel techniques to identify which derived invariants re-
ﬂect real (or “true”) program speciﬁcations. The ﬁrst
one uses the presence of explicit program checks, in-
volving the variable(s) constrained by an invariant, as a
clue that the invariant is indeed relevant to the behav-
ior of the web application. The second one is based on
the idea that certain types of invariants are intrinsically
more likely to reﬂect the intent of the programmer. In
particular, we focus on invariants that relate external in-
puts to the contents of user sessions and the back-end
database. The use of these techniques to ﬁlter the derived
invariants allows for a more effective extraction of speci-
ﬁcation of a web application’s behavior, when compared
to previously-proposed approaches that accept all gener-
ated likely invariants as correctly reﬂecting the behavior
of a program.
In the second step of the analysis, we use model check-
ing over symbolic input to analyze the inferred speciﬁca-
tions with respect to the web application’s code and to
identify which real invariants can be violated. We had to
extend existing model checking tools with new mecha-
nisms to take into account the unique characteristics of
web applications. These characteristics include the fact
that web applications are composed of modules that can
be invoked in any order and that the state of the web
application must also take into account the contents of
back-end databases and other session-related storage fa-
cilities.
By following the two steps outlined above, it is possi-
ble to automatically detect a certain subclass of applica-
tion logic ﬂaws, in which an application has inconsistent
behavior with respect to security-sensitive functionality.
Note that our approach is neither sound nor complete,
and, therefore, it is prone to both false positives and false
negatives. However, we implemented our approach in
a prototype tool, called Waler, that is able to automati-
cally identify logic ﬂaws in web applications based on
Java servlets. We applied our tool to several real-world
web applications and to a number of student projects, and
we were able to identify many previously-unknown web
application logic ﬂaws. Therefore, even though our tech-
nique cannot detect all possible logic ﬂaws and our tool
is currently limited to servlet-based web applications, we
believe that this is a promising ﬁrst step towards the au-
tomated identiﬁcation of logic ﬂaws in web applications.
2
In summary, this paper makes the following contribu-
tions:
• We extend existing dynamic analysis techniques to
derive program invariants for a class of web applica-
tions, taking into account their particular execution
paradigm.
• We identify novel techniques for the identiﬁcation
of invariants that are “real” with high probability
and likely associated with the security-relevant be-
havior of a web application, pruning a large number
of spurious invariants.
• We extend existing model checking techniques to
take into account the characteristics of web appli-
cations. Using this approach, we are able to iden-
tify the occurrence of two classes of web applica-
tion logic ﬂaws.
• We implemented our ideas in a tool, called Waler,
and we used it to analyze a number of servlet-based
web applications, identifying previously-unknown
application logic ﬂaws.
2 Web Application Logic Vulnerabilities
Web application vulnerabilities can be divided into two
main categories, depending on how a vulnerability can be
detected: (1) vulnerabilities that have common character-
istics across different applications and (2) vulnerabilities
that are application-speciﬁc. Well-known vulnerabilities
such as XSS and SQL injection belong to the ﬁrst cate-
gory. These two vulnerabilities are characterized by the
fact that a web application uses external input as part of a
sensitive operation without ﬁrst checking or sanitizing it.
Vulnerabilities of the second type (such as, for example,
failures of the application to check for proper user autho-
rization or for the correct prices of the items in a shop-
ping cart) require some knowledge about the application
logic in order to be characterized and identiﬁed. In this
paper, we focus on this second type of vulnerabilities,
and we call them web application logic vulnerabilities.
To detect web application logic vulnerabilities auto-
matically, one needs to provide the detection tool with a
speciﬁcation of the application’s intended behavior. Un-
fortunately, these speciﬁcations, whether formal or infor-
mal, are rarely available. Therefore, in this work, we pro-
pose an automated way to detect application logic vul-
nerabilities that do not require the speciﬁcation of the
web application behavior to be available. Our intuition is
that often the application code contains “clues” about the
behavior that the developer intended to enforce. These
“clues” are expressed in the form of constraints on the
values of variables and on the order of the operations per-
formed by the application.
3
There are many ways in which constraints can be im-
plemented in an application. In this work, we focus on
two concrete types of constraints. The ﬁrst (and most in-
tuitive) way to encode application-speciﬁc constraints is
in the form of program checks (i.e., if -statements). The
presence of such a check in the program before certain
data or functionality is accessed often represents a “clue”
that either the range of the allowed input should be lim-
ited or that an access to an item is limited. The absence of
a similar check on an alternate program path to the same
program point might represent a vulnerability. For ex-
ample, vulnerabilities like authentication bypass, where
an attacker is able to invoke a privileged operation with-
out having to provide the necessary credentials, could be
detected using this approach.
The second type of constraints, which often exist in
web applications, is the implicit correlation between the
data stored in back-end databases and the data stored in
user sessions. More speciﬁcally, in web applications,
databases are often used to store persistent data, and user
sessions are used to store the most accessed parts of this
data (such as user credentials). Thus, there often exist
implicit constraints on what is currently stored in the user
session when a database query is issued. A “clue,” in
this case, is an explicit relation between session data and
database data. Certain application logic vulnerabilities,
like unauthorized editing of a post belonging to another
user, can be detected if a path where these relations are
violated is found. More detailed examples of this type of
vulnerabilities will be provided in Section 4.3.2.
3 Detection Approach
Based on the discussions in the previous section, it is
clear that an analysis tool that aims to detect web appli-
cation logic vulnerabilities requires a speciﬁcation of ex-
pected behavior of the program that should be checked.
If such speciﬁcations are available (e.g., in the form of
formal speciﬁcations or unit testing procedures), they can
be leveraged to validate the behavior of the application’s
implementation. However, in many cases there is no spe-
ciﬁcation of the expected behavior of a web application.
In these cases, we need a way to derive it in an automated
fashion.
A number of techniques has been proposed by vari-
ous researchers to derive program speciﬁcation automat-
ically. However, regardless of the approach used, none
of them can derive a complete speciﬁcation without hu-
man feedback. To overcome this problem, we propose to
use one of the existing dynamic techniques to derive par-
tial program speciﬁcations and use an additional analysis
step to reﬁne the results and ﬁnd vulnerabilities.
In particular, we observe that web applications are typ-
ically exercised by users in a way that is consistent with
the intentions of the developers. More speciﬁcally, users
usually browse the application by following the provided
links and ﬁlling out forms with expected input. These
program paths are usually well-tested for normal input.
As a result, when monitoring a web application whose
“regular” functionality is exercised, it is possible to infer
interesting relationships between variables, constraints
on inputs and outputs, and the order in which the applica-
tion’s components are invoked. This information can be
used to extract speciﬁcations that partially characterize
the intended behavior of the web application.
As a result, in our approach, we use an initial dynamic
step where we monitor the execution of a web applica-
tion when it operates on a number of normal inputs. In
this step, it is important to exercise the application func-
tionality in a way that is consistent with the intentions of
the developer, i.e., by following the provided links and
submitting reasonable input. Note that the information
about a web application’s “normal” behavior cannot be
gathered using automatic-crawling tools, as these tools
usually do not interact with an application following the
workﬂow intended by the developer or using inputs that
reﬂect normal operational patterns.
In this work, as the result of the dynamic analysis
step, we infer partial program speciﬁcations in the form
of likely invariants. These invariants capture constraints
on the values of variables at different program points,
as well as relationships between variables. For exam-
ple, we might infer that the Boolean variable isAdmin
must be true whenever a certain (privileged) function
is invoked. As another example, the analysis might de-
termine that the variable freeShipping is true only
when the number of items in the shopping cart is greater
than 5. We believe that these invariants provide a good
base for the detection of logic ﬂaws because they often
capture application-speciﬁc constraints that the program-
mer had in mind when developing the web application.
Of course, it is unlikely that the set of inferred invari-
ants represents a complete (or precise) speciﬁcation of a
web application’s functionality. Nevertheless, it provides
a good, initial step to obtain a model of the intended be-