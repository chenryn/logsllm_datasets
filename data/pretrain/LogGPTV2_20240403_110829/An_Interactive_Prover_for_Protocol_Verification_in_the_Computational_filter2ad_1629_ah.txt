Adv(A)
In other words the advantage is the same for the premise and
conclusion, thus the rule is sound.
APPENDIX D
NUMBER OF SESSIONS DEPENDING ON η
We give here an example of two protocols P and PI that
can be distinguished by an adversary which can interact q(η)
times with the protocol, where q is a polynomial, but cannot
be distinguished by an adversary which interacts k times with
the protocol (where k is an arbitrary ﬁxed integer, independent
of η). The construction of P is as follows. First, the protocol
samples uniformly at random a bitstring n of length η. Then,
when queried with an integer input i, the protocol leaks bit(n, i)
– the ith bit of the nonce n. Finally, the adversary wins the
game if they can ﬁnd n. The idealised protocol PI is identical
to P , except that the adversary never wins:
Pbit(n) := ! (in(c1, i); out(c2, bit(n, i)))
(cid:16)Pbit(n) | in(c3, x); if n = x then out(c4, true)
(cid:17)
P :=new n;
PI :=new n;(cid:0)Pbit(n) | in(c3, x); out(c4, false(cid:1)
else out(c4, false)
It cannot be that the interpretation of one formula is equiv-
alent to true and the other to false, as this would contradict
the validity of the premise. If the two interpretations are false,
the premise is equivalent to the conclusion, so we conclude
trivially.
Otherwise, the two freshness formulas interpret to true. This
T
implies that nσI ((cid:126)i ) is not a subterm of ((cid:126)u )
, and correspond-
P1
ingly for mσI ((cid:126)j ) and (cid:126)v . The validity of the premise gives
us T, M |= ((cid:126)u )
T
, empty, which implies
P1
T, M |= ((cid:126)u )
∼ ((cid:126)v )
T
. We can ﬁnally apply the FRESH
P1
rule of the base logic to obtain T, M |= φ as expected.
, empty ∼ ((cid:126)v )
T
P2
T
P2
Proposition 5. Rule XOR-FRESH is sound in all computa-
tional models where ⊕ is interpreted as XOR.
Proof. It sufﬁces to show that the base logic rule is sound, then
the lifting works as for FRESH. We express the advantage of
an attacker on the indistinguishability game of the conclusion,
where L is the random variable (cid:74)len(t) = len(n)(cid:75) and t(cid:48) is
there exists an adversary A that can distinguish
Clearly,
between P and PI by interacting η+1 times with the protocol:
this adversary queries all bits of n using η queries, and then
sends n to the protocol. In that scenario, P returns true while
PI returns false, which are trivial to distinguish.
Of course, an adversary interacting at most k times with
the protocol cannot learn more than k bits of n, and has a
winning probability of at most 2k−η. Such an adversary has a
negligible probability of winning (w.r.t. η).
APPENDIX E
COMPARISON WITH EXISTING TOOLS
To deepen the comparison between SQUIRREL, CRYP-
TOVERIF and EASYCRYPT, we conducted a security analysis
in the three tools.2 More precisely,
of the same protocol
we modelled the Basic Hash protocol, and proved that it
2Of course, we also used existing case studies in the literature (e.g. [28],
[31], [43]), albeit not of the same protocol, to build a detailed description of
how each tool operates.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
552
provides authentication and unlinkability. The corresponding
SQUIRREL, CRYPTOVERIF and EASYCRYPT ﬁles can be
found in the repository [50].3
We start by presenting the summary of the key ﬁndings
of our comparison in Appendix E-A. This summary is based
on the basic quantitative comparison of the three approaches
in Appendix E-B, and an in-depth qualitative comparison
conducted in Appendices E-C, to E-F, where we compare the
three approaches on how protocols, security properties and
cryptographic assumptions are modelled, and on how security
proofs are carried out.
A. Summary of key ﬁndings
Generally, we conclude that CRYPTOVERIF and SQUIRREL
operates at a similar level of details and expressivity, though
they use different approaches, and proofs developments. On
the other hand, EASYCRYPT is more expressive, at the cost
of a higher level of details and modelling overhead.
a) Protocols: Protocols are modelled in very similar
fashion in CRYPTOVERIF and SQUIRREL. Writing a protocol
in EASYCRYPT may require a more involved modelling –
because it does not support directly protocols with sequences
of inputs/outputs.
We note that CRYPTOVERIF does not support stateful
protocols, while EASYCRYPT does. The CCSA approach on
which SQUIRREL is based upon can naturally model stateful
protocols [41] – such an extension is left as future work.
b) Security properties: From our case study, the three
tools appeared equally capable of expressing all usual security
properties, albeit using different approaches. However, we note
that: i) native support for events or timestamps in CRYP-
TOVERIF and SQUIRREL allows for more direct and simpler
statements of correspondence properties; and ii) EASYCRYPT
logic is more expressive, and allows to formalize more
complex relational properties of protocols, and to internalize
composition results and reasoning (though we did not much
exploit this in our case study).
c) Cryptographic assumptions: Adding new crypto-
graphic assumptions in EASYCRYPT is easy, as it uses a very
expressive logic. While CRYPTOVERIF provides a way to add
new assumptions, doing it in a way that can be efﬁciently
used by the tool probably requires a deep understanding of the
tool. On the other side of the spectrum, we have SQUIRREL,
where adding new hypotheses is not possible without in-depth
knowledge of the tool.
d) Proofs: Proofs in CRYPTOVERIF and SQUIRREL
mostly focus on the security aspects, thanks to native sup-
port for cryptographic reasoning, although using different ap-
proaches: the former uses cryptographic game transformation,
while the latter operates on the protocol traces. On the other
hand, EASYCRYPT does not have rules dedicated to cryp-
tographic reasoning, but allows to carry out such reasoning
using its lower-level, very expressive logics. As a direct con-
sequence, proofs are considerably shorter in CRYPTOVERIF
and SQUIRREL than in EASYCRYPT.
3See examples/{README.md, cryptoverif/, easycrypt/}
SQUIRREL
CRYPTOVERIF
EASYCRYPT
Authentication
- modelling
- proof
Unlinkability
- modelling
- proof
30 LoC
10 LoC
20 LoC
40 LoC
40 LoC
0 LoC
60 LoC
10 LoC
220 LoC
60 LoC
330 LoC
630 LoC
TOOLS COMPARISON: BASIC HASH PROTOCOL
TABLE II
B. Quantitative Comparison
As a basic quantitative metric, we give in Table II the lines
of code (LoC) needed to prove the authentication and un-
linkability properties of the Basic Hash protocol in each tool,
distinguishing the modelling and proof parts. We notice that
SQUIRREL and CRYPTOVERIF have similar LoC values, with
the difference that CRYPTOVERIF concludes automatically for
the authentication proof. The EASYCRYPT development is
sensibly longer, which was expected considering the fact that
it is a general purpose proof assistant, relying on an expressive
high-order logic.
We stress the fact that the LoC metric only gives a very
rough idea of the modelling and proof efforts required to
perform our case study analysis. For example, a large part
of the EASYCRYPT development are low-level Hoare-logic
proofs which, while being protracted, are elementary.
C. Qualitative comparison: modelling protocols
In CRYPTOVERIF, protocols are modelled using a variant
of the applied-pi calculus. This language is similar to the input
language of SQUIRREL. We note however that SQUIRREL
can model trace restrictions, which can be used, for example,
to model protocol phases (see Example 6). Phases and trace
restrictions are not supported by CRYPTOVERIF.
EASYCRYPT has been mostly used for security analysis of
cryptographic primitives. These are modelled using modules,
which are simply lists of procedures. These procedures operate
on a global memory and can perform random samplings –
they are stateful probabilistic programs. A key feature of the
module system is its composability: a module F – a functor
– can be parameterized by other modules by taking them as
arguments. For example, an encryption schema can be deﬁned
w.r.t. an unspeciﬁed block permutation. The same mechanism
can be used for protocols, modelling an input/output pair as
a module procedure. Note however that when modelling a
protocol in which an agent performs sequentially multiple
pairs of input/output, the modelling becomes more complex,
as we need to maintain in a global state the position of the
agent in this sequence (this problem does not appear in Basic
Hash, as each agent comprises only one input/output pair).
D. Qualitative Comparison: modelling security properties
a) Correspondence Properties:
In CRYPTOVERIF, the
processes of the protocol agents can be annotated by events.
Crucially, events do not modify the agents behavior: they are
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
553
only added to the execution trace of the protocol, where they
can be used to express properties of the protocol.
Modelling correspondence properties in SQUIRREL is very
similar, though we do not use events: we directly refer to the
values of components of the protocol (e.g. nonces, messages)
at various points of the protocol execution using timestamps.
Expressing correspondence properties in EASYCRYPT re-
quires more work. For the Basic Hash protocol, we had
to modify the protocol agents to add some bookkeeping of
the events: essentially, events are manually logged into some
global tables. Security properties are then expressed in the
same way as in CRYPTOVERIF or SQUIRREL.
Contrarily to our timestamp approach where nothing is
added, and to CRYPTOVERIF events that are just annotations
leaving the protocol behavior unchanged, the EASYCRYPT
modelling of correspondence properties has the drawback that
it requires to modify the protocol to add the global tables of
events: the protocol shown secure is not the original protocol.
Of course, this problem can be solved by doing the modelling
in several steps: i) deﬁne the original protocol; ii) deﬁne the
protocol with events; and iii) show that the two protocols have
the same behavior (except for the global tables). Nonetheless,
this requires some additional work from the user.
Arguably, a minor advantage of our approach compared to
CRYPTOVERIF is that it allows to have more concise protocol
descriptions, as we do not need to modify the protocol speciﬁ-
cation itself. For example, new correspondence properties can
be added to a development without changing the protocol.
b) Equivalence
properties: CRYPTOVERIF models
equivalence properties as the indistinguishability of
two
protocols (given as two distinct processes), whereas in
SQUIRREL the two protocols have to be given in a bi-process.
EASYCRYPT models equivalences using relational proba-
bilistic Hoare logic formulas (pRHL), which state that, as-
suming that the initial memories of the left and right programs
satisfy some relational property (the pre-condition), the ﬁnal
memories satisfy some other relational property (the post-
condition). This is a very expressive logic, which goes beyond
bare equivalence: e.g., we can write a pRHL formula that
(roughly) states that an event happened on the left program
less often than on the right program.
E. Modelling: cryptographic assumptions
The analyses have been carried out using the same cryp-
tographic assumptions: the keyed hash function is assumed
EUF-CMA and PRF. Although the cryptographic assumptions
are the same, their modelling differs.
CRYPTOVERIF offers a large panel of predeﬁned crypto-
graphic primitives: when modelling a protocol, a user has
to import the appropriate cryptographic primitives and as-
sumptions they need. Notably, these are modelled using a
speciﬁcation language, which let the user declares sets of
indistinguishable oracles available to the adversary. While an
experienced user can theoretically use this system to deﬁne
their own cryptographic assumptions, we remark that some
of the default assumptions have been modiﬁed in non-trivial
ways, probably to use alternative equivalent formulations that
are more powerful and can be used automatically by the tool.
Consequently, adding complex new assumptions may be out-
of-reach of most users.
In EASYCRYPT, cryptographic assumptions are expressed
through games, using the same programming language and
module system than for protocols, and the user can deﬁne
new cryptographic hypotheses if needed. Moreover, this can
be done easily, as the language used to express assumptions is
very close to the pseudo-code language used by cryptographers
for paper proofs.
SQUIRREL cryptographic hypotheses are hard-coded in
the prover, and adding now cryptographic hypothesis is not
straightforward: it requires to do non-trivial syntactic checks,
and to compute complex sets of subterms. E.g., for the EUF-
CMA, we must compute the set of hashes appearing in a
protocol execution for a given key, and the condition on the
trace under which each of these hashes appears.
F. Security proofs
EASYCRYPT proofs are done at
The main differences between CRYPTOVERIF and SQUIR-
REL lie in the way proofs are handled. Each step of the proof is
a transformation of a cryptographic game in CRYPTOVERIF,
while in SQUIRREL the transformation is applied to formu-
las and frames. As a ﬁrst consequence of this difference,
CRYPTOVERIF does not handle states, while we are conﬁdent
that SQUIRREL will be able to support stateful protocols.4
Both tools have basic proof steps dedicated to cryptographic
reasoning: CRYPTOVERIF applies cryptographic assumptions
by replacing a set of oracles by an indistinguishable set of
oracles, while SQUIRREL has specialized inference rules.
two levels. First,
the
equivalence between two protocols (modelled as modules) can
be shown using a probabilistic relational Hoare logic (pRHL).
To complete such proofs, the user often has to come up with
(relational) invariants of the programs, and to perform precise
probabilistic reasoning. Then, such results can be composed
using its ambient higher-order logic (e.g. a property shown for
an arbitrary block permutation can be instantiated to a precise
permutation, say AES). Among these three tools, EASYCRYPT
is the only one that allows to prove high-level composition
results (e.g. the Universal Composability framework has been
formalized in EASYCRYPT [24]). On the other hand, and in
contrast with CRYPTOVERIF and SQUIRREL, EASYCRYPT
does not have rules dedicated to cryptographic reasoning.
Instead, its pRHL and higher-order logic are expressive enough
to carry out cryptographic proofs directly – often at the cost
of more details and work.
4The CCSA approach can be naturally adapted to model and prove secure
stateful protocols (e.g. see the manual case study of [41]).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:10:06 UTC from IEEE Xplore.  Restrictions apply. 
554