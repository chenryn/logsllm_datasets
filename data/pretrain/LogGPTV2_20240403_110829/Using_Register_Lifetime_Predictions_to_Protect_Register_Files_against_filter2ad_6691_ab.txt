A
n
t
I
t
r
a
a
s
e
m
d
i
r
g
m
i
m
w
s
e
k
a
u
q
e
g
v
A
P
F
i
e
s
w
p
u
w
)
%
i
(
s
n
o
s
r
e
v
f
o
#
)
%
(
e
m
i
t
e
f
i
L
l
f
u
e
s
U
(b) Useful lifetime
Figure 5. Short- and long-lived integer register ver-
sions characterization.
Overall, we conclude that it is possible to reduce the vul-
nerability of the register ﬁle by only protecting a subset of
carefully chosen registers at a time.
A Few Long-Lived Registers Provide Much of the To-
tal Useful Time. The second observation is that not all the
register versions are equally vulnerable to soft errors. A
small set of long-lived versions account for a large fraction
of the time that registers need to be protected. For this sec-
tion only, we say that a register version is short-lived if by
the time it is written, an instruction that reads or writes the
same architectural register has been renamed. We call the
other versions long-lived.
To see this effect, consider Figures 5(a) and 5(b). For
each SPEC application, Figure 5(a) shows the percentage
of long- and short-lived integer register versions. On aver-
age, less than 10% of the register versions are long-lived for
SPECint and SPECfp. Figure 5(b) shows the percentage of
the useful lifetime that long- and short-lived versions con-
tribute to. On average, about 40% of the contribution comes
from these few long-lived register versions. Speciﬁcally, in
the case of SPECfp, 5% of versions account for 46% of the
useful lifetime. Therefore, it is cost-effective to give higher
protection priority to these long-lived register versions.
3. ParShield: Protecting the Register File
To provide cost-effective protection for register ﬁles, we
propose ParShield. ParShield is composed of (i) the Shield
Register File
Read / Write
.
.
.
Read
Original Datapath
RegData
Write
Read
ECC
ECC
Generator
ECC Table
ECC
ECC
Checker
To ROB
.
.
.
Data ECC
Shield
Tag
Tag
Parity
Data
ECC
Status
Figure 6. Shield architecture.
structures and (ii) the parity support.
describe the architecture, focusing mostly on Shield.
In this section, we
3.1. Shield Concept
ParShield relies on the Shield concept, which involves
using ECCs to selectively protect only the subset of most
vulnerable registers while they contain useful data. Shield
supports three operations on one such register: (i) when the
register is written, Shield generates and saves the ECC of
the written data, (ii) when the register is read, Shield checks
whether the register contents are still valid, and (iii) Shield
keeps the ECC of the data until the register is read for the
last time. Shield assumes a single-bit fault model.
Figure 6 shows the Shield architecture.
It adds three
hardware components to a traditional register ﬁle for an out-
of-order processor: a table that stores the ECCs of some
registers, a set of ECC generators and a set of ECC check-
ers. The ECC table is organized as a CAM. It protects the
most vulnerable register versions in the register ﬁle. Each
entry protects one register version and consists of: (i) a tag
with the physical register number, (ii) a parity bit for the
tag, (iii) the ECC bits of the data in the register, and (iv) a
set of Status bits that are used during the replacement of the
ECC table entries.
When a physical register is about to be written, a request
for protection is sent to Shield. If Shield decides to pro-
tect the register, it tries to allocate an entry for that version.
The entries in the ECC table are not pre-allocated during
the register renaming stage because there is no need to pro-
tect a register version during PreWrite time. Once an entry
has been successfully allocated in the ECC table, an ECC
generator calculates the ECC of the register data in parallel
with the register write operation.
When a physical register is read, the register ﬁle sends
its data to both the datapath and Shield (Figure 6). Shield
checks whether there is an entry in the ECC table whose tag
matches the physical register number. If so, Shield checks
the tag’s parity, and sends the corresponding ECC to an
ECC checker to verify the data’s integrity.
If an error is
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007detected in the tag — thanks to the parity bit — the cor-
responding entry in the ECC table is invalidated and the
processor proceeds. If the ECC checker detects an error in
the register data, the processor stalls and takes the follow-
ing actions to recover from the error: (i) it ﬁxes the register
data, (ii) it ﬂushes the reorder buffer (ROB) from the oldest
instruction that reads the register version, and (iii) it ﬂushes
the whole ECC table and resumes. Finally, if there is no
error, the ECC checker signals no error and the processor
proceeds.
Each entry of the ROB is augmented with two Finish
bits, one for each of the two potential source operand regis-
ters. These bits are set if, when the corresponding operand
was read, it either completed the ECC check or was not pro-
tected by Shield. Single-operand instructions have one bit
always set.
When an instruction reaches the head of the ROB and is
ready to retire, the Finish bits are checked. If at least one of
the bits is not set, the instruction cannot retire; it has to wait
for the ECC checker to ﬁnish and set the bit(s), or for the
ROB to get full. In the latter case, the instruction is retired
without taking the Finish bits into consideration in order to
minimize performance degradation. Our experiments show
that the ROB provides enough slack for the ECC checker to
verify the integrity of the data without affecting the IPC.
An entry in the ECC table is deallocated and assigned to
another register version when the Shield replacement algo-
rithm decides to evict it or when a new version of the same
physical register is written and sent to Shield for protection.
When an entry is evicted from the ECC table, its associated
register version will no longer be protected.
3.2. Entry Allocation and Replacement
When Shield receives a request for protection for a phys-
ical register version, it tries to allocate an entry in the ECC
table. If there is an entry in the table protecting a previous
version of the same physical register, Shield re-assigns the
entry to the new version. Otherwise, Shield attempts to pick
a free table entry. Since the table is much smaller than the
register ﬁle, there may be no free entry, and a decision has to
be made to either replace an existing entry in the ECC table
or abort the allocation. Entry replacement has to be done
carefully. Replacing a recently-allocated entry that protects
a long-lived register to accommodate a new one that will
protect a short-lived register increases the vulnerability of
the system. Therefore, Shield needs to predict the lifespan
of register versions.
3.2.1. Predicting Short- and Long-lived Registers. When
Shield considers evicting an entry from the ECC table, it
does not know whether the register version that it protects
is still in its useful time or not. Shield’s goal is to evict the
entry that contributes the least to the overall register ﬁle’s
AVF. Since a long-lived register contributes more to the reg-
ister ﬁle’s AVF than a short-lived one, Shield tries to evict
Original code
Renamed code
Renamed Vector
R4 <- R1, R6
LOAD R1 <- R3, 200
ADD
...
MUL
R1 <- R8, R9
LOAD P12 <- P13, 200
ADD
P7 <- P12, P16
...
MUL
P21 <- P18, P19
1
12
0
# Regs - 1
Figure 7. Predicting short-lived registers.
short-lived registers. To this end, Shield extends the short-
lived register predictor proposed by Ponomarev et al. [12].
In the following, we ﬁrst describe their approach and then
how we augment it.
Figure 7 illustrates how Ponomarev et al.’s short-lived
register predictor works.
It maintains a bit vector, called
Renamed, that has one bit per physical register. In Figure 7,
under original code, a LOAD instruction loads into archi-
tectural register R1. After R1 is used in the ADD instruc-
tion, the MUL instruction overwrites R1. Therefore, the
MUL is a renamer for the LOAD. In the renamed code, R1
has been renamed to P12. When the MUL is renamed, it
sets the bit Renamed[12]. If by the time the LOAD loads
the data into P12, the Renamed[12] bit is set, P12 is consid-
ered to be short-lived.
Although this predictor is simple and often effective, it
is limited. Speciﬁcally, suppose that the ADD is the only
consumer of R1. In this case, we would want to consider
P12 to be a short-lived register. However, if the LOAD has
loaded the data before the MUL is renamed, P12 will not be
predicted as a short-lived register.
To extend the capability of Ponomarev et al.’s algo-
rithm, we reformulate the Renamed vector. We call it the
Events vector, and it has two bits for each physical register,
namely Events.Renamed and Events.Used. The rules for the
Events.Renamed bit are identical to the Ponomarev et al.’s
scheme. The new Events.Used bit is set when renaming an
instruction that consumes the physical register. Based on
the Used and Renamed bits, when we are about to write
to a physical register, we predict the register’s lifespan as
one of the following four types: 1) long-lived, if both Used
and Renamed bits are reset, 2) dead, if only the Renamed
bit is set, 3) short-lived, if only the Used bit is set, and 4)
ultrashort-lived, if both Used and Renamed bits are set.
Figure 8 shows an example of how our proposed predic-
tor works. In the original code, the MUL and DIV instruc-
tions act as the renamers for the ﬁrst and second LOAD
instructions, respectively. Therefore, the Events.Renamed
bits of P12 and P7 are both set. Our algorithm also sets
the Events.Used bit of P12 because R1 is used by the ADD.
However, since R2 is never used, the Events.Used bit of P7
remains reset. The four possible combinations of the Used
and Renamed bits are shown in Figure 8(b). Dead register
versions are not protected by Shield.
3.2.2. Entry Replacement. For each protection request,
Shield receives the register’s Events bits along with the reg-
ister number and data. If there is neither an entry protect-
ing the same physical register nor a free entry in the ECC
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Original code
Renamed code
Events Vector
R4 <- R1, R6
LOAD R1 <- R3, 200
LOAD R2 <- R3, 500
ADD
...
MUL
DIV
R1 <- R8, R9
R2 <- R10, R11
LOAD P12 <- P13, 200
LOAD P7 <- P13, 500
ADD
P14 <- P12, P16
...
MUL
DIV
P21 <- P18, P19
P22 <- P20, P21
Used
Renamed
0 1
7
0
1 1
12
# Regs - 1
Used Renamed Prediction
0                 0
0                 1
1                 0
1                 1 
long
dead
short
ultrashort
(a) Updating the Events Vector
(b) Prediction based on the Events bits
Figure 8. Predicting the lifespan of physical register versions.
table, Shield has to replace an existing entry or abort the al-
location. Note that ECC table entries can only be allocated
when a register version is written. Once a register version
loses its ECC table entry, it cannot get a new one, and re-
mains unprotected for the rest of its lifetime.
We propose a replacement policy that we call Effective.
It uses the expected lifespan of a register version to select
the entry to replace.
It works as follows: when a victim
entry is needed, Shield tries to select an entry that protects
a register version with a shorter or same expected lifespan
than the one to be protected. If such an entry is unavailable,
Shield aborts the allocation. Table 1 shows the types of en-
tries that can be replaced for a register version according
to its prediction. For example, if a register version is pre-
dicted as short, it tries to replace an entry marked as free,
ultrashort, and then short — in this priority order.
Table 1. Effective replacement policy in ECC table.
Prediction
Long
Short
Ultrashort
Entries that can be replaced
Free, Ultrashort, Short, Long
Free, Ultrashort, Short
Free, Ultrashort
We also dynamically adjust the entry type to reﬂect
the fact that the expected lifespan gets shorter after reads.
When an ultrashort or short entry is read, the type changes
to free or ultrashort, respectively. The type of long entries
is never changed since these entries tend to have long lifes-
pans and may be read many times during their lifetime.
The information about the type of register version that
an ECC table entry contains is kept in two Status bits (Fig-
ure 6). The four possible states of the Status bits are long,
short, ultrashort, and free.
3.3. Entry Deallocation
An ECC table entry protects a given register version un-
til the replacement algorithm reassigns the entry to another
version. After a register version is read for the last time, it
is effectively stale, and it is useless to protect it anymore.
Ideally, Shield would like to know the time of the last read
to a register version so that it can deallocate the entry then.
However, Shield has no way of knowing whether a read is
the last one. Therefore, it is possible to have stale entries
in the ECC table. These stale entries hurt the efﬁciency of
Shield because they protect nothing and occupy resources.
The situation is worse if these stale entries are marked as
long, because they have less chance of being replaced com-
pared to short ones.
To remove stale entries from the ECC table — especially
the ones marked as long — we send explicit signals (called
eviction signals) to the ECC table to indicate which entries
just became stale. When the ROB sends a signal to release
a physical register, this same signal is also forwarded to the
ECC table as an eviction signal. If the ECC table has the
corresponding entry, it marks it as free.
3.4. Error Recovery
Since we use single error correction with double error
detection (SEC-DED) codes in this study, Shield allows the
processor to recover from transient single-bit errors in the
register ﬁle and detect double-bit errors. Although the pro-
cessor may also recover from some double-bit errors, in this
paper we only focus on single-bit errors.
When an ECC checker detects that the register data read
by instruction I has a single-bit error, the processor stalls
and enters recovery mode. First, the checker ﬁxes the error
and writes the corrected data back to the physical register
(say P ). Second, Shield examines the ROB looking for the
oldest instruction that reads P and ﬂushes that instruction
as well as the others that follow it. Note that only ﬂush-
ing I and the instructions that follow it is not enough to
recover from the error. Imagine that an instruction J older
than I reads P after I did, but before the error is detected
by the ECC checker. The data that J reads has already been
corrupted. Consequently, the processor has to ﬂush from
the oldest instruction that reads P . The ECC table is then
ﬂushed so no entry in the ECC table protects one of the
registers that were removed from the ROB. Finally, the pro-
cessor can resume.
If an error occurs in a mispredicted path, Shield will still
recover from it for simplicity.
3.5. AVF of a Register File with Shield
Figure 9 shows different physical register versions, their
associated ECC table entry, and the time during which they
are vulnerable to errors (ACE cycles). In Figure 9(a), Shield
cannot allocate an entry for the register version and, there-
fore, the register is in ACE state during its whole useful
lifetime. In Figure 9(b), an entry was protecting the regis-
ter version but is evicted before the version is read for the
ﬁrst time. As a result, the register is in ACE state during its
whole useful lifetime. In Figure 9(c), the entry is evicted
after the register version is read at least once but before its
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Register
ECC Table
Entry
ta
tw
tr
1
tr
n
td
ta
tw
tr
1
tr
n
td
ta
tw
tr
tr
1
2
tr
n
td
ta
tw
tr
1
tr
n
td
time
un-ACE
ACE
Entry Allocated in the ECC table
X
a) Not Allocated
b) Wasted
c) Insufﬁcient
d) Exceeding
Figure 9. Computing the AVF of different physical register versions.
last read. Consequently, Shield only protects the version
until the read just before the eviction. After that read, the
register is in ACE state. Finally, in Figure 9(d), the ECC
entry remains allocated for the whole useful lifetime of the
register version. The version is completely protected and
is never in ACE state. However, the longer an entry pro-
tects a dynamically dead register, the less efﬁcient Shield
is. By using the eviction signal described in Section 3.3, we
are able to mitigate this effect. Using the four cases in this
ﬁgure, we can compute the ACE cycles of each register ver-
sion. Since the AVF of a physical register is the fraction of
ACE cycles, we can then easily compute the AVF of each
physical register and of the whole register ﬁle.
To calculate the overall AVF of the system, we also have
to take into account the possibility of a bit ﬂip in the ECC
table or the Finish bits in the ROB. The tag in the ECC table
is protected by the parity bit, and therefore a bit ﬂip in this
ﬁeld can be detected. Shield then deallocates the damaged
entry from the ECC table. A bit ﬂip in the ECC ﬁeld can
be easily detected and corrected during the integrity check.
A bit ﬂip in the Status bits will not affect the correctness of
the system — only the efﬁciency of Shield. Thus, the AVF
of the ECC table is 0.
Finally, the AVF of the Finish bits is also 0, assuming a
single-bit error model. If any of the Finish bits ﬂips to 0,
the corresponding instruction will stay longer at the head
of the ROB, but will eventually retire when the ROB gets
full. If any of the Finish bits ﬂips to 1, the instruction might
retire before it is actually checked. However, since we are
assuming than only one error can occur at a time, no other
error can occur and the register data has to be correct.
3.6. ParShield: Shield Plus Full Register Parity
Finally, we extend Shield with storage for a parity bit
for all the physical registers in the processor, and re-use the
ECC circuitry for parity generation and checking as well.
The result is the complete ParShield architecture. With the
parity bit, ParShield reduces the SDC AVF to zero (all er-
rors are detected) — although the DUE AVF is equal to the
AVF of plain Shield (the exposure to non-correctable errors
remains the same as in plain Shield). Moreover, this is ac-
complished at a very small cost in hardware and power.
Speciﬁcally, consider when a register write sends a pro-
tection request to the ECC table. While ParShield is check-
ing if it should generate the data’s ECC and enter them in
the table — depending on the type of register version and
the current contents of the ECC table — ParShield uses one
ECC generator to compute the data’s parity and store it in
a Parity bit vector. Such operation takes a small fraction of
the time taken by the generation of the full ECC.
In the same way, consider when a register read sends
a request to the ECC table. While ParShield is check-
ing if the ECC table contains the corresponding entry,
ParShield reads the Parity bit vector and uses one ECC
checker to check the parity. Again, this operation takes lit-
tle time. Moreover, computing and checking the parity bits
consumes much less power than computing and checking
ECCs.
4. Implementation Issues
4.1. Bypass Network
Processors use the bypass network to send results from
one functional unit to another so that dependent instructions
can execute back to back. We therefore need to include
register bypassing in our model of AVF. We distinguish two
kinds of bypasses for a register version: (i) all its consumers
read the value from the bypass network, and (ii) some of the
consumers read it from the register ﬁle while others read it
from the bypass network. We refer to the former as full
bypass and to the latter as partial bypass.
Calculating the AVF for register versions that are fully
bypassed is straightforward. Since the data stored in the
register ﬁle is never used, their AVFs are zero. On the other
hand, partially bypassed versions need to be protected from
the time the data is written until their last non-bypassed
read.
Figure 10(a) shows an example where an ADD instruc-
tion generates a version of register P1, which is then read
by subsequent MUL and SUB instructions. We assume that
the SUB is P1’s last use. Figure 10(b) shows the ACE and
un-ACE periods if the result is fully bypassed. Neither the
MUL nor the SUB accesses the register ﬁle. Therefore, this
P1 version remains un-ACE during its entire lifetime. In
Figure 10(c), the SUB instruction reads P1 from the register
ﬁle and, therefore, P1 remains ACE until the SUB executes.
4.2. Accessing the ECC Table
The ECC table needs fewer ports than the register ﬁle.
The reason is that the table is not as performance-critical as
the register ﬁle and, therefore, does not need to be multi-
ported for the worst case — twice as many read ports as the
issue width and as many write ports as the issue width. Con-
sequently, we reduce the number of ports and perform the
ECC generation and checking off the critical path. If nec-
essary, we support some small queueing of requests, which
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:33:39 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007ADD
MUL
SUB
P1 <- P2, P3
P6 <- P1, P8
P7 <- P1, P9
alloc
write, readmul, readsub
dealloc
un-ACE
P1
time
P1
alloc Write, readmul
readsub
dealloc
time
un-ACE
ACE
a) Source  code
b) Fully bypassed P1
c) Partially bypassed P1
Figure 10. ACE and un-ACE periods for fully and partially bypassed register versions.
does not affect performance because instructions often wait
in the ROB for a long period before committing.