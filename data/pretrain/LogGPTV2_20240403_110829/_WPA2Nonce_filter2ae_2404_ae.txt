3和4相似，用于完成FT握手和传送GTK给客户端。
只有两个重新连接的消息是使用MIC（见图9）验证的，另外，FT握手中没有包含重传计数器的消息。相反地，在不同握手调用之间，FT握手依靠随机的SNonce和ANonce来提供重放保护[1,
§13.5.2]。
根据标准，在认证响应被发送或接收后必须安装PTK [ 1 ,
§13.9]。这在图9的第1阶段的灰色方框里已经标注了。另外，802.1x的逻辑端口只有在发送或接收重连请求后才会被打开，这保证了即使握手阶段PTK已经被安装了，AP和客户端也只有在握手完成后才能传输和接收数据帧。结合起来，表明了802.11r修正案里定义的FT握手并不容易受到密钥重载攻击。然而，通过实验和代码检查，我们发现大多数协议实现都是在发送或接收完重连响应后安装PTK和GTK。这种行为已经在图9的阶段1的黑色方框里阐述了。结果，在实际中，FT握手的实现容易受到密钥重载的攻击。
**5.2 针对AP的密钥重载攻击**
由于AP是在响应一个重连请求后才安装PTK，所以我们的目标是重放该帧。我们注意到，在实际中，AP必须接受重连请求的重传。这是因为AP的重连响应可能由于背景噪声而丢失，所以需要客户端重新发送一个请求。
图9显示针对FT握手的密钥重载攻击。我们并不需要中间人，只需能够窃听和注入帧就行。在攻击的第一阶段，我们让客户机和AP执行一个正常的AP握手，然后等待AP传输一个或多个加密数据帧，之后我们重放对AP的重连请求包，因为FT握手不包含重传计数器和有效的MIC，所以AP将会接受并处理该重放帧。最后，AP将会在攻击的阶段3重装PTK，随之重置相关的nonce和重传计数器。因此，AP发送的下一个数据帧将会用已经用过的nonce进行加密。和之前的密钥重载攻击类似，它可以让攻击者重放之前客户端发给AP的数据包。我们认为该攻击对FT
握手的危害尤其大是因为FT的消息不包含重传计数器，这使得攻击者可以不停地重放重连请求，不停地重置AP使用的nonce和重传计数器。
我们测试了三个支持802.11r的AP。第一个是用开源的hostapd，第二个联发科设计用于家用路由器，运行在Linksys
RE7000上的。第三个是一个专业的Aerohive AP。以上三个都受密钥重载攻击的影响。
由于背景噪声，重连响应包如果丢失，客户端将会自动重发重连请求包，这会导致AP密钥重载。也就是说，就算没有受到攻击，AP也已经重用nonces了。
FT握手没有使用数据保密协议进行额外的保护。特别是管理帧保护（MFP），它不保护认证和重连帧[1,
§12.6.19]。因此，FT握手是否启用MFP对密钥重载攻击的防御是微不足道的。
**5.3 滥用 BSS 传输请求**
FT握手只有从一个站点AP漫游到另一个站点AP时才会被实现。所以攻击发生的场景是有限制的。然而我们可以强制受害者进行FT握手，具体方法如下：
首先假设一个客户端连接到了一个支持802.11r的网络，其次在客户端的网络里没有其他的AP，我们就可以利用虫洞攻击[41]克隆一个真实的AP网络放在客户端附近。这使得客户端认为目标网络的另一个AP就在附近。最后我们向客户端发送一个BSS
Transiton Management
请求。该请求帧用于负载均衡[1,11.24.7]，并命令客户端漫游到另一个AP。BSS是一个未经验证的管理框架，所以可以被攻击者伪造。最后客户端接受该请求帧，并使用FT握手漫游到伪造的AP。
我们测试了支持802.11r的客户端，证明wpa_supplicant，iOS[8]，Windows
10[52]都会接受伪造的传输请求，并用FT握手漫游到另一个AP。
**0x06 评估和讨论**
在这一节中我们评估nonce重用对于802.11数据机密性协议的影响，展示攻击场景，和明确漏洞实现，解释为什么安全证明错过了我们的攻击，并提出了对策。
**6.1 802.11协议中重用nonce造成的影响**
Nonce重用造成的影响取决于使用的数据机密性协议。对于TKIP，CCMP，GCMP。三个协议使用了流密钥来加密帧。因此，对nonce的重用总是意味着重用keystream。这可以用于解密数据包。在我们的攻击中受害者的重放计数器会被重置，因此，这三种协议都容易受到重放攻击的攻击。
当使用TKIP时，我们也可以像下面一样恢复MIC。
1.我们滥用nonce重用来解密一个完整的TKIP包，包括它的MIC字段。
2.攻击Michael算法，使用给出的明文帧和MIC密文，来恢复MIC明文。因为TKIP使用了不同的MICkey在每个不同的消息传输方向，我们可以再特定的方向上伪造数据帧。方向的源头是被重装密钥攻击的设备。表3在提到TKIP时总结了这一点
当使用CCMP时，实际的攻击被限制为对包的重放和解密。尽管有一些消息伪造攻击讨论，但这些攻击是理论上的，不能用于伪造消息。
当使用GCMP时，其影响是灾难性的。
1.可以对包进行重放和解密。
2.有可能恢复身份验证密钥，它在GCMP中用于交互双方两个方向上的通信，因此，与TKIP不同的是，攻击者可以在两个方向上伪造数据包，鉴于GCMP预计将在未来几年在以WiGig的名字广泛采用，这是一个令人担忧的情况。
一般来说，对手总是可以在特定的通信方向上重放、解密或伪造数据包。具体的方向取决于握手的方式。例如,通过四次握手攻击客户端，它可以用于
1.重放单播和广播/多播帧给客户端
2.将客户端发送给AP的帧的解密
3.伪造客户端发送给AP的帧
表3：密钥重载攻击对使用了四次握手，FT，组密钥握手数据机密性的协议影响。每一个小格都展示了在这个方向上的数据帧可以被替换、解密或者伪造。
然而，攻击FT握手行为中攻击了AP而不是客户端，意味着，攻击者可以在相反的方向重放，解密或者伪造数据包。表3在附录总结中，考虑了握手被攻击。
最后，在不同的情况下，我们可以从客户机向AP发送消息(参见表3)，有趣的是，AP通常不是数据帧的最终目的地，而是将数据帧转发。这意味着我们可以伪造数据包发视频发送到任何连接到网络的设备上。根据AP的不同，甚至可以发送一个数据帧反射回到客户机。
**6.2 攻击场景**
在其他方面，密钥重载攻击可以让攻击者解密TCP数据包，知道传输序号，挟持TCP数据流注入任意数据。对wifi网络最常见的攻击之一是:在未加密的HTTP连接中注入恶意数据。
重放广播和多播帧的能力。比如：组帧，也是一个明显的安全违规。为了说明这将如何影响实际系统，请考虑在广播模式下运行的网络时间协议(NTP)。在这种模式下，客户端首先通过一个初始化过程，然后通过监听身份验证的广播NTP数据包来同步它的时钟。Malhotra和Goldberg已经表明，如果这些广播包被重放，受害者将永久被困在一个特定的时刻。使用我们的组密钥攻击可以重放这些帧，即使它们是通过一个受保护的无线网络发送的。注：以这种方式操作时间会破坏安全性，例如TLS证书，DNSSEC
、Kerberos身份验证和比特币。另外一个例子是xAP和xPL家庭验证协议。这些使用UDP广播包给设备发送命令。我们推测，密钥重载攻击允许我们重放这些命令。所有这些例子都说明，重播广播或多播帧的影响不应被低估。
**6.3 全零加密密钥漏洞**
密钥重载攻击对于四次握手的攻击发现了wpa_supplicant的特殊行为
（1）2.3版本和更低的版本在很容易受到攻击，没有任何意外的副作用。
（2）我们发现当接收到重新传输的message3时，2.4和2.5版本安装了一个全零加密密钥(TK)。这个漏洞似乎是由802.11标准中的一句话引起的，该标准间接建议在安装了TK之后，从内存清除它。
（3）版本2.6修复了这个bug，只在第一次接收Message 3时安装了TK。
然而，在修补这个bug时，只考虑了一个良性的场景：message3被重新传输是因为message
4由于背景噪音丢失。他们没有考虑到一个活跃的攻击者可以滥用这个漏洞来强制安装一个全为零的密钥。
因此，补丁并没有被视为严重的安全问题，也没有被移植到较老的版本中。独立于这个bug，所有版本的wpa_supplicant在接收时重传的message3时重新安装组密钥，也容易受到第四章所说的组密钥攻击。
**因为Android内部使用的是一个稍微修改过wpa_supplicant的版本，它也会受到这些攻击的影响。特别地，我们检查了Android
wpa_supplicant 关键源代码，并发现所有的Android6.0版本都包含了全零加密密钥的漏洞。android wear
2.0也很容易受到这次攻击。** 尽管第三方厂商可能会在他们的Android版本中使用不同的wpa_supplicant版本，但这说明大多数Android
6.0版本都容易受到攻击。换句话说，31.2%的Android智能手机很容易受到全零加密密钥漏洞的影响。最后，我们还从经验上证实，Chromium很容易受到全零加密密钥漏洞的影响。