title:Touring the internet in a TCP sidecar
author:Rob Sherwood and
Neil Spring
Touring the Internet in a TCP Sidecar ∗
Rob Sherwood
Department of Computer Science
University of Maryland, College Park
Neil Spring
Department of Computer Science
University of Maryland, College Park
PI:EMAIL
PI:EMAIL
while some of the reason for this may be social—publishing accu-
rate information is not obviously in a network operator’s interest—
various research projects [7, 11, 23, 27] have shown that informa-
tion helpful for research [33, 3] can be collected through traceroute-
like probing.
Unfortunately, the increasing use of MPLS, the size of the net-
work, ﬁltering of trafﬁc directed toward router addresses, and ﬁne-
grained multi-path routing add intolerable error to traceroute-based
studies. Further, large-scale traceroute-based studies typically yield
abuse reports from destination hosts behind intrusion detection sys-
tems that interpret an incoming traceroute as a port-scan or intru-
sion attempt [28].
ABSTRACT
An accurate router-level topology of the Internet would beneﬁt many
research areas, including network diagnosis, inter-domain trafﬁc
engineering, and overlay construction. We present TCP Sidecar
and Passenger, two elements of a system for router-level Inter-
net topology discovery. Sidecar transparently injects measurement
probes into non-measurement TCP streams, while Passenger com-
bines TTL-limited probes with the often-ignored IP record route
option. The combined approach mitigates problems associated with
traceroute-based topology discovery, including abuse reports, spu-
rious edge inference from multi-path routing, unresolved IP aliases,
long network timeouts, and link discovery behind NATs and ﬁre-
walls. We believe that we are the ﬁrst mapping project to measure
MPLS use with ICMP extensions and record route behavior when
the TTL is not decremented. We are able to discover NATs when
monitoring TCP connections that tunnel through them.
In this paper, we present preliminary results for TCP Sidecar
and Passenger on PlanetLab. Our experiments inject measurement
probes into trafﬁc generated both from the CoDeeN Web proxy
project and from a custom web crawler to 166,745 web sites.
Categories and Subject Descriptors
C.2.1 [Communication Networks]: Network Architecture and De-
sign — Network Topology
General Terms
Measurement
Keywords
Network Topology Discovery, Sidecar, Passenger, Record Route
1.
INTRODUCTION
Complete and accurate maps of the Internet backbone topol-
ogy can help researchers and network administrators understand
and improve its design. Good maps are unavailable, however, and
∗This work was supported by grants ANI 0092806 and CNS-
0435065 from the National Science Foundation.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’06, October 25–27, 2006, Rio de Janeiro, Brazil.
Copyright 2006 ACM 1-59593-561-4/06/0010 ...$5.00.
We present a topology discovery tool, Passenger, that revisits
IP’s record route option to yield more accurate (corroborated) path
information, and Sidecar, a system for embedding probes within
TCP connections to reduce the intrusiveness of network probing.
With Passenger, we ﬁnd that the record route option has been
prematurely dismissed as a useful tool for network topology dis-
covery: speciﬁcally, that its noted limitations are not severe. Its
ﬁrst limitation is that only nine hops of a trace are recorded. Planet-
Lab [24] allows us to deploy our tools within nine hops of 87–98%
of observed addresses (Section 5); distant portions of the network
are poorly sampled by traceroute anyway [19]. Second, routers
may forward packets with options at lower priority, but we are in-
terested in topology, not performance. Third, ﬁrewalls may block
packets with record route, yet ﬁrewalls also often block traceroute,
so little is lost. Finally, intrusion detection systems are likely to
report IP options as exceptional events; we ﬁnd that TTL-limited
record route packets can keep destination hosts from seeing and
objecting to IP options.
Our challenge is not in these obvious limitations: it is match-
ing traceroute-observed addresses with record-route-observed ad-
dresses to infer a path that is more correct and complete than either
method can collect alone. This is challenging ﬁrst because trace-
route and record route observe distinct addresses with no overlap.
We have also observed routers that (a) insert record route entries
without decrementing TTL, (b) insert a record route entry when
expiring a packet (most do not), (c) insert record route entries only
sometimes, perhaps not when under load, and (d) do not insert
record route entries at all. This diversity of implementation and
conﬁguration makes aligning traceroute and record route paths a
daunting task.
Correct alignment of the addresses returned by both schemes is
an instance of alias resolution [23, 26, 12, 17]: determining which
IP addresses belong to the same router. This means that we can ver-
ify the alignment of paths using Rocketfuel’s ally tool [27]: when
the IP addresses discovered respond to direct probing and when
they do not respond, we can discover new aliases not found by
other tools. This ability to ﬁnd aliases for unresponsive routers is a
signiﬁcant step in improving the correctness of measured network
topologies.
With Sidecar, we show how to embed Passenger’s record route
and TTL-limited probes within TCP connections to collect path in-
formation with limited intrusiveness. Embedding within TCP re-
quires tracking connection state and disambiguating acknowledg-
ments of probe TCP packets from those of the normal transfer. Al-
though passive observation of TCP behavior and timing has been
useful for measurement [18, 22, 32, 4], and traceroute can be em-
bedded with paratrace [16], we believe this is the ﬁrst demonstra-
tion of the feasibility of running traceroute-like probing within TCP
connections to pass through ﬁrewalls and avoid false accusation by
intrusion detection systems.
This paper is organized as follows. In Section 2, we describe
the problem of aligning record route with traceroute. We present
Sidecar in Section 3. In Section 4, we describe Passenger and our
data collection methodology with the results in Section 5. We then
conclude and describe our plans for future work in Section 6.
2. MAPPING WITH RR
2.1 Conventional Wisdom
In this section, we describe why the record route (RR) IP option
has been unnecessarily discounted as a topology discovery tech-
nique and describe why its limitations are not ﬂaws.
As an IP packet with the record route option traverses a router,
the router enters its address into an array at a given offset in the
IP header and updates the offset. Because space in the IP header
is limited, the record route array can hold at most nine addresses.
Paths through the Internet are often longer than nine hops, so much
of the network would be undiscovered by record route. Fortunately,
we can send record route packets from PlanetLab [24].
In Sec-
tion 5, we ﬁnd that at least 87% of addresses in our survey are
reachable in nine hops from at least one PlanetLab node.
IP options increase the chance of delay, discard, or alarm at in-
trusion detection systems (IDSs). Delay matters little for topology
discovery. Discard is common at ﬁrewalls for traceroute packets
and record route is not much different. Fonseca et al. [10] found
that 46% the paths between PlanetLab hosts drop packets with RR
set but that only 8% of those paths are blocked in transit networks.
We believe that ﬁrewalls and IDSs are typically close to the end-
hosts that they protect. To reduce the likelihood of intrusion alarm
without sacriﬁcing data from the core of the network, we prevent
RR probes from reaching hosts by limiting the TTL. We set probe
TTLs to the minimum of the hop count to the end host minus three
or eleven, because more information in record route is very unlikely
after eleven hops.
2.2 Simple Topology Discovery
We ﬁrst describe the process of discovering network topology
using record route when the network is simple: all routers always
decrement TTL and append to the record route array when not ex-
piring the packet. The diversity of router implementation and con-
ﬁguration means that this model is too simple to be directly applied,
but it remains useful as an introduction. In the next subsection, we
dive into this complexity.
The addresses discovered by traceroute and by record route do
not overlap. RR records the address of the outgoing interface onto
which the packet is sent or the router’s designated “loopback” ad-
dress. By contrast, the “time-exceeded” messages solicited by the
TTL-limited probes of traceroute [15], by convention, come from
the incoming interface where the packet was received.
Figure 1: Alias resolution with TTL-limited record route.
In Figure 1, we discover the incoming and outgoing interfaces
of each router by sending probes with the RR option and different
TTLs. We retrieve the RR array from the header of the packet en-
capsulated in the ICMP time exceeded message. (The IP header
of the response does not include record route.) The ith address of
the RR array is an alias for the router that sends the ICMP time
exceeded message for TTL=i.
Load-balancing can cause incorrect topology inference when only
traceroute is used. When packets from the same traceroute traverse
multiple paths, especially of different lengths, incorrect edges can
be inferred (Figure 2). The traceroute-inferred network incorrectly
links router B to router E because the third probe took a differ-
ent path. However, the ﬁrst entry in the RR array in the third probe
changed from A2 to A3, exposing the new path and providing feed-
back that more probes are necessary to discover the entire topology.
With record route, the route changes problematic for traceroute be-
come a beneﬁt because they permit the discovery of more topology
information.
2.3 Router Behavior Inference
Not every router has the same record route behavior. Speciﬁ-
cally, with each additional TTL, our probes may record zero, one,
or many new record route addresses. In this section, we list six
distinct router implementations and describe the rules we use to
classify individual routers into their respective implementations.
By classifying routers, we are able to match traceroute and record
route addresses on the same router, thus enabling alias resolution
and topology discovery.
The router implementation variants we have discovered are:
Type A routers are common:
they record the outgoing interface
address only if that interface transmits the packet (not when it ex-
pires at the router) as described in the simpliﬁed examples above.
The prevalence of this behavior is consistent with belonging to
Cisco routers.
Type B routers are less common: they record the outgoing inter-
face address the packet would have taken even when the packet
expires at that router. Because we infer Type B behavior within
Abilene [1], we believe it to be consistent with Juniper routers.
Hidden routers never decrement TTL, but always mark record route.
Such routers are discovered only by record route probing. We
believe these routers are typically part of an MPLS tunnel where
decrementing TTL is considered optional.
TimeProbe TTL=1ICMP src=192.168.0.1RR={}AliasesforRouter 1192.168.0.1172.16.0.4128.8.128.8172.16.0.5SourceRouter 1Router 2Probe TTL=2ICMP src=172.16.0.5RR={172.16.0.4}128.8.128.9x.x.x.xRouter 3Probe TTL=3ICMP src=128.8.128.9RR={172.16.0.4,128.8.128.8}AliasesforRouter 2erate the same trace (Figure 3), a router may be misclassiﬁed, lead-
ing to mismatched addresses. Thus, “128.8.128.8” may be an alias
for the router with address “128.8.128.9” (Figure 3, top topology)
or an alias for a hidden router that does not appear in the traceroute
data (Figure 3, bottom topology).
We describe the rules we use to classify routers from the avail-
able data.2 In these rules, the current router originated the ICMP
response we are attempting to classify, while previous and next re-
fer to the routers one TTL closer and further. For clarity, we clas-
sify probes based on their RR delta: how many new RR entries
were added since the previous TTL.
We evaluate the resulting inferences in Section 5.
A-to-B transition If a probe’s delta is two, we classify the current
router as Type B and the previous router Type A. The ﬁrst new
address belongs to the previous Type A, which it did not place in
the previous TTL; the second new address belongs to the current
Type B.
Types A and B transitivity If a probe’s delta is one and the pre-
vious router is Type A or B, then we classify the current router
as the same. Unfortunately, the transition from a type B router
to another type B router in one hop is indistinguishable from a
B-to-Hidden-to-A transition. We use the off-by-one rule to dis-