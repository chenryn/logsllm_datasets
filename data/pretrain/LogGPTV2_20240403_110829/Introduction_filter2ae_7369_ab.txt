            }
    //如果我们正在释放的块已经在缓存中，则中止
            if(bin[i].ptr == ptr)
                return;
    //找到最小的缓存条目
            if(bin[i].size ptr);
            entry->size = size;
            entry->ptr = ptr;
            return;
        }
    system_free:
    //使用系统内存分配器释放块
        return HeapFree(GetProcessHeap(), 0, ptr);
    }
APP_DATA内存分配器使用的缓存算法存在一个问题，我们分配和释放内存的操作中只有一些由调用系统分配器实现
## Plunger technique
由于高速缓存的每个bin中只能容纳6个block，我们通过为每个bin分配大小最大的6个块，来确保每个字符串分配都来自系统堆。这将确保所有的高速缓存分区都是空的。
那么就可以保证下一个字符串分配会对HeapAlloc（）进行调用。
如果我们释放了我们分配的字符串，该字符串将进入一个高速缓存的bin中。我们可以通过释放我们在上一步中分配的6个块来将它从缓存中清除。FreeCacheMem()函数会把所有较小的块从缓存中取出，而我们的字符串将被HeapFree（）释放，此时缓存将被填满，所以我们需要为每个bin分配6个最大的块来清空它。
上述的流程实际上可以总结为：我们使用6个块作为plunger，将所有较小的块从缓存中移出，然后我们再次分配6个块将plunger取出。
以下代码是plunger技术的实现：
    plunger = new Array();
    //该函数刷新缓存中的所有块，并将其置空
    function flushCache()
    {
     // 释放plunger数组中的所有块，将所有较小的块移出
        plunger = null;
        CollectGarbage();
      //为每个缓存容器分配6个最大的块，并将缓存置空
        plunger =new Array();
        for(i = 0; i < 6; i++)
        {
            plunger.push(alloc(32));
            plunger.push(alloc(64));
            plunger.push(alloc(256));
            plunger.push(alloc(32768));
        }
    }
    flushCache();   //在进行分配操作前刷新缓存
    alloc_str(0x200);//分配字符串
    free_str();   //释放字符串清空缓存
    flushCache();
为了使用HeapFree（）把对应块从缓存中移出并释放它，块的大小必须小于它的bin的最大尺寸。否则FreeCachedMem中的min_size
<size条件不能被满足，plunger块将被释放。这意味着我们不能释放大小为32,64,256或32768的块，但这个限制的影响并不大。
### HeapLib - JavaScript heap manipulation library
我们在一个名为HeapLib的JavaScript库中实现了前一节中描述的方法，它提供了直接映射到系统分配的alloc（）和free（）函数，以及许多更高级别的堆操作例程。
### The Hello World of HeapLib
下面是使用HeapLib库的最基本的程序：
这个程序分配一个16字节的内存块并将字符串“AAAAA”复制到该块中。用“foo”标记该块并作free（）的参数。free（）函数释放内存里所有标有这个标签的块。
就其对堆的影响而言，这个Hello world程序相当于以下c ++代码：
    block1 = HeapAlloc(GetProcessHeap(), 0, 512);
    block1 = HeapAlloc(GetProcessHeap(), 0, 16);
    HeapFree(GetProcessHeap(), 0, block2);
### Debugging
HeapLib提供了一些函数，可以用来调试库并检查它在堆上的效果。这里有一个简单的例子演示了调试功能：  
heap.debug("Hello!"); //输出调试信息  
heap.debugHeap(true); //启用堆分配的跟踪调试  
heap.alloc(128, "foo");  
heao.debugBreak(); //在Windbg中断下  
heap.free("foo");  
heap.debugHeap(false); //关闭调试
查看调试输出，用WinDbg附加到IEXPLORE.EXE进程并设置以下断点：  
第一个断点断在ntdll！RtlAllocateHeap的RET指令。上面的地址对Windows xp
sp2环境下有效，但是对于其他系统可能需要进行调整。断点假设默认进程堆在0x150000上.用WindDbg的uf和！ped命令可以查看这些地址：  
设置这些断点后，运行上面的示例代码将在WinDbg中输出调试信息：  
我们可以看到alloc（）函数在地址0x1e0b48处分配了0x80字节的内存，之后用free（）函数释放。示例程序还通过调用HeapLib中的debugBreak（）在WinDbg中触发一个断点。该函数是通过调用带有特殊参数的JavaScript
acos（）函数，此函数会在WinDbg内触发jscript！JsAcos上的断点。这样我们就可以在继续执行JavaScript之前检查堆的状态。
## Utility functions
该库还提供了用于在开发中用来操作数据的函数。下面是使用addr（）和padding（）函数来准备虚表块的例子：
    for(var i = 0; i < 100; i++)
    {
    //将100个地址0x0C0C0C0C的副本添加到vtable
        vtable = vtable + heap.addr(0x0C0C0C0C);
    }
    //用“A”字符填充vtable，使块大小为1008字节
    vtable = vtable +heap.padding(1008 -  (vtable.length*2+6)/2);
如果想了解更多具体的细节，下一节将对对应函数进行相应描述。
# HeapLib reference
## Object-oriented interface
HeapLib API被实现为面向对象的接口。要在Internet Explorer中使用API，需要创建heapLib.ie类的实例。
| 构造函数 | 描述  
---|---|---  
| HeapLib.ie(maxAlloc,HeapBase) | 为Internet Explorer创建一个新的heapLib
API对象。maxAlloc参数用设置块大小的最大值，可以使用alloc（）函数来分配。参数：·maxAlloc -最大的分配大小(字节)（默认是65535）heapBase - 进程堆的默认基地址（默认是0x150000） |  
下面介绍的所有函数都是heapLib.ie类的实例方法
### Debugging
将WinDbg附加到IEXPLORE.EXE进程并设置上述断点输出调试内容。如果调试器不存在，下面的函数不起作用。
函数 | 描述  
---|---  
debug(msg) | 在WinDbg中输出一个调试信息。msg参数必须是字符串。使用字符串连接来构建消息将导致堆分配.参数：·msg - 字符串输出  
debugHeap(enable) | 在WinDbg中启用或禁用堆操作的日志记录参数：enable -一个boolean值，设置为true启用堆记录debugBreak() 在调试器中触发一个断点  
## Unility functions
函数 | 描述  
---|---  
padding(len) | 返回指定长度的字符串，数量取决于在heapLib.ie构造函数中设置的最大分配大小。字符串包含“A”字符。参数：·len -字符的长度例子：heap.padding(5) //returns “AAAAA”  
round(num, round) | 返回一个指定值的整数参数：·num - 范围内整数·round - 取值范围例子：heap.round(210,
16) //returns 224  
hex(num, width） | 将一个整数转换为十六进制字符串。该函数使用堆.参数：·num -要转换的整数·（可选）转换后用的位数（不足用0填充）例子：heap.hex(210, 8) /returns “000000D2”  
addr(addr) | 将32位地址转换为内存中具有相同表示形式的4字节字符串。此函数使用堆。参数：addr -整数表示的地址例子：heap.addr(0x1523D200) //返回值等价于 //unescap(“%uD200%u1523”)  
## Memory allocation
函数 | 描述  
---|---  
alloc(arg,tage) |
使用系统内存分配器分配一个指定大小的块。对这个函数的调用相当于调用HeapAlloc（），如果第一个参数是一个数字，它指定新块的大小，填充“A
“字符。如果参数是一个字符串，则它的数据被复制到一个大小为arg.length * 2 +
6的新块中。在这两种情况下，新块的大小必须是16的倍数并且不等于32,64,256 或32768参数：·arg -内存块的大小（以字节为单位），或者一个字符串·（可选）标识内存块的标签例子：heap.alloc(512, “foo”)
//分配一个用“foo”标识的512字节大小的内存块并被“A”填充heap.alloc(“BBBBB”)
//分配一个无标记的16字节大小的内存块，并将“BBBBB”拷贝进去  
free(tag) | 释放所有使用系统内存分配器分配的带有相应标记的内存块。调用此函数相当于调用HeapFree（）参数：·tag -标识要释放的块组的标签例子：heap.free(“foo”) //释放所有用“foo”标记的内存块  
gc() | 运行垃圾收集器并刷新OLEAUT32缓存。在使用alloc（）和free（）之前调用该函数。  
## Heap manipulation
以下函数用于在Windows 2000，xp和2003中操作内存分配器。Windows Vista中的堆分配器由于存在显着显著差异这些函数不被此系统支持。
函数 | 描述  
---|---  
freeList(arg,count) |
将指定大小的块添加到列表中，确保它们不合并。在调用此函数之前，必须对堆进行碎片整理。如果内存块的大小小于1024，则必须确保lookaside存满。参数：·
arg - 以字节为单位的新块的大小，或strdup的一个字符串·count -需要加进列表的块的数量（默认值是1）例子：heap.freeList(“BBBBB”,5) //向空闲列表中添加5个包含字符串“BBBBB”的块  
lookaside() | 将指定大小的块添加到lookaside。在调用这个函数之前lookside必须为空。参数：· arg -以字节为单位的新块的大小，或strdup的一个字符串· count -添加到lookaside的块的数量（默认为1）例子：Heap.lookaside(“BBBBB”,5)
//向lookaside中添加5个包含字符串“BBBBB”的块  
lookasideAddr() | 为指定大小的块返回后备链表头部的地址。使用heapLib.ie构造函数中的heapBase参数.参数：·arg -以字节为单位的新块的大小，或strdup的一个字符串例子：heap.lookasideAddr(“BBBBB”) //returns 0x150718  
vtable(shellcode,jmpecx,size) |
返回一个包含shellcode的虚表。调用者应该将虚表释放到lookaside，并使用lookaside头的地址作为对象指针。当使用虚表时，对象的地址必定在eax中，和指向
vtable必定在ecx中。任何虚函数通对从ecx + 8到ecx +
0x80的虚表调用都会使shellcode执行。这个函数使用堆。参数：·shellcode - shellcode字符串·jmpecx - jmp
ecx的地址或同等的指令的地址·size - 生成的虚表的大小例子：heap.vtable(shellcode,
0x4058b5)//生成一个有指针指向shellcode的大小为1008字节的虚表  
## USing HeapLIb
## Defragmenting the heap
一个影响漏洞利用的因素就是堆碎片。如果开始时堆空，我们可以通过计算并确定由特定分配序列产生的堆的状态。不过麻烦的是如果存在堆碎片，那么当我们的exp执行时我们就不知道堆的状态，
这使得堆分配器的行为不可预知。
我们可以通过对堆进行碎片整理来解决这个问题。可以通过分配大量我们的漏洞利用所需的大小的块来完成，这些块将填充堆中的所有可用空间，并确保后续可以从堆的末尾分配相同大小的块。这样，分配器的行为将等同于对空堆进行操作。
以下代码将对大小为0x2010字节的块进行碎片整理：
    for(var i = 0; i < 1000; i++)
    heap.alloc(0x2010)
### Putting blocks on the free list
假设我们有一段从堆中分配一块内存的代码，并在没有初始化的情况下使用它。如果我们可以控制块中的数据，我们就可以利用这个漏洞。我们需要分配一个相同大小的块，用来填写我们的数据，并释放它。然后下一次分配相同大小的块将包含我们的填入的数据。
实现以上方法的唯一的障碍是系统内存分配器中的合并算法。如果我们释放的块与另一个空闲块相邻，那么它们将被合并成更大的块，接下来分配的块可能不会包含我们的数据。为了防止这种情况发生，我们将分配三个相同大小的块，并且释放中间块。首先对堆进行碎片处理确保这三个块是连续的，而且中间块不会被合并。
    heap.alloc(0x2020);      //分配3个连续的块
    heap.alloc(0x2020, "freeList");
    heap.alloc(0x2020);
    heap.free("freeList");     //释放中间的块
    `
HeapLib库提供了一个方便的函数来实现上述技术。下面的例子展示了如何将x02020字节块添加到空闲列表中：