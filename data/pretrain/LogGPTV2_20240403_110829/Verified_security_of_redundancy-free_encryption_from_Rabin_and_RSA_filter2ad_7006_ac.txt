(pk, sk) ← KG();
(m0, m1, σ) ← A1(pk);
b $← {0, 1};
c∗ ← Epk(mb);
def ← true;
c∗
b′ ← A2(c∗, σ);
return (b = b′)
Game OW :
(pk, sk) ← KG();
z $← {0, 1}k+ℓ;
(x, y) ← I(pk, fpk(z));
return (fpk(x, y) = fpk(z))
Adversary I(pk, z) :
LG, LD ← nil; c∗
c∗ ← z; pk ← pk;
(m0, m1, σ) ← A1(pk);
def ← true;
c∗
b′ ← A2(c∗, σ);
r ← ﬁnd r ∈ dom(LG). siepk(c∗, r) 6= ⊥;
if r 6= ⊥ then return (r, siepk(c∗, r));
else
def ← false; q ← 0;
c ← ﬁnd c ∈ dom(LD). ciepk(c∗, c) 6= ⊥;
if c 6= ⊥ then
(r, s, t) ← ciepk(c∗, c); return (r, s)
else return ⊥
Oracle G(x) :
if x /∈ dom(LG) then
LG[x] $← {0, 1}ℓ;
return LG[x]
Oracle D(c) :
if q < qD ∧ ¬(c∗
def ∧ c = c∗) then
q ← q + 1;
(r, s) ← f −1
g ← G(r);
return g ⊕ s
sk (c);
else return ⊥
Oracle G(x) :
if x /∈ dom(LG) then
c ← ﬁnd c ∈ dom(LD). siepk(c, x) 6= ⊥;
if c 6= ⊥ then
LG[x] ← LD[c] ⊕ siepk(c, x);
else
LG[x] $← {0, 1}ℓ;
return LG[x]
Oracle D(c) :
if q < qD ∧ ¬(c∗
def ∧ c = c∗) then
q ← q + 1;
r ← ﬁnd r ∈ dom(LG). siepk(c, r) 6= ⊥;
if r 6= ⊥ then return LG[r] ⊕ siepk(c, r)
else
if c ∈ dom(LD) then return LD[c]
else
c′ ← ﬁnd c′ ∈ dom(LD). ciepk(c, c′) 6= ⊥;
if c′ 6= ⊥ then
(r, s, t) ← ciepk(c, c′);
return LD[c′] ⊕ s ⊕ t;
else
if c∗
def ∧ ciepk(c, c∗) 6= ⊥ then
(r, s, t) ← ciepk(c, c∗);
LG[r] $← {0, 1}ℓ; return LG[r]⊕s;
else
LD[c] $← {0, 1}ℓ; return LD[c]
else return ⊥
Figure 3: Initial IND-CCA game and reduction to the problem of inverting the underlying permutation
In game G3 we remove the dependency of the adver-
sary’s output on the hidden bit b by applying a semantics-
preserving transformation known as optimistic sampling. In-
stead of of sampling g∗ at random and computing the chal-
lenge ciphertext c∗ as fpk(r∗, g∗ ⊕ mb), we sample directly a
value s∗ at random and compute c∗ as fpk(r∗, s∗), deﬁning
g∗ as s∗ ⊕ mb. Once this is done, and since g∗ is no longer
used elsewhere in the game, we can drop its deﬁnition as
dead-code and postpone sampling b to the end of the game,
making it trivially independent of b′. We have
Pr(cid:2)G2 : b = b′(cid:3) = Pr(cid:2)G3 : b = b′(cid:3) =
Pr [G2 : bad] = Pr [G3 : bad]
1
2
In game G4, instead of always using f −1 to compute the pre-
image (r, s) of an input c in the decryption oracle, we use
the sie and cie algorithms to compute it when possible from
previous queries made by the adversary. We can do this in
two cases:
1. when r appeared before in a query to oracle G, using
algorithm sie to obtain the second input s;
2. when r = r∗, using algorithm cie to compute s from
c∗.
When neither of these two cases occur, we use f −1 and the
secret key to invert c and obtain (r, s). Rather than sam-
pling a fresh value for G(r), we apply once more the opti-
mistic sampling transformation to sample a response m at
random and deﬁne G(r) as m ⊕ s. We store values of G(r)
computed in this fashion in a diﬀerent map L′
G. We prove
the following relational invariant between G3 and G4, which
allows to characterize the event bad of G3 in terms of the
variables of G4:
badh1i ⇐⇒ (r∗ ∈ dom(LG) ∨ r∗ ∈ dom(L′
G))h2i
To prove this, we have to ﬁrst show that the simulation of
the decryption oracle using algorithms cie and sie in G4 is
consistent with the view of the adversary in G3. We do this
by establishing that the following is a relational invariant
between the implementations of D in games G3 and G4:
def , q)h1i = (r∗, s∗, c∗
(r∗, s∗, c∗
(c∗ = fpk(r∗, s∗))h2i ∧
badh1i ⇐⇒ (r∗ ∈ dom(LG) ∨ r∗ ∈ dom(L′
(∀x ∈ dom(LGh2i).
def , q)h2i ∧
G))h2i ∧
x ∈ dom(LGh1i) ∧ LGh1i[x] = LGh2i[x]) ∧
(∀x ∈ dom(LGh1i).
x /∈ dom(LGh2i) → LGh1i[x] = L′
Gh2i[x]) ∧
(∀x. x ∈ dom(LGh1i) ↔ (x ∈ dom(LG) ∨ x ∈ dom(L′
G))h2i
We have hence that
Pr [G3 : bad] = Pr(cid:2)G4 : r∗ ∈ dom(LG) ∨ r∗ ∈ dom(L′
G)(cid:3)
In game G5 we ﬁnally eliminate every reference to f −1 from
the decryption oracle. We do this by replacing the map L′
G
with a map LD in where we store ciphertexts that implicitly
deﬁne values of G(r). We reformulate the simulation of the
decryption oracle using this map instead of L′
G, by proving
the following invariant between the implementations of D in
729Oracle G(x) :
if x = r∗ then bad ← true;
if x /∈ dom(LG) then
LG[x] $← {0, 1}ℓ;
return LG[x]
Oracle D(c) :
if q < qD ∧ ¬(c∗
def ∧ c = c∗) then
q ← q + 1;
(r, s) ← f −1
g ← G(r);
return g ⊕ s
sk (c);
else return ⊥
def ← false; q ← 0;
Game G1 G2 :
LG ← nil; c∗
bad ← false; r∗ $← {0, 1}k;
(pk, sk) ← KG();
(m0, m1, σ) ← A1(pk); b $← {0, 1};
if r∗ /∈ dom(LG) then
g∗ $← {0, 1}ℓ; LG[r∗] ← g∗;
else
bad ← true;
g∗ ← LG[r∗]; g∗ $← {0, 1}ℓ;
c∗ ← fpk(r∗, g∗ ⊕ mb); c∗
b′ ← A2(c∗, σ);
return (b = b′)
def ← true;
def ← false; q ← 0;
Game G3 :
LG ← nil; c∗
bad ← false; r∗ $← {0, 1}k;
(pk, sk) ← KG();
(m0, m1, σ) ← A1(pk);
if r∗ ∈ dom(LG) then bad ← true;
s∗ $← {0, 1}ℓ;
c∗ ← fpk(r∗, s∗); c∗
b′ ← A2(c∗, σ);
b $← {0, 1};
return (b = b′)
def ← true;
Oracle G(x) :
if x = r∗ then bad ← true;
if x /∈ dom(LG) then
LG[x] $← {0, 1}ℓ;
return LG[x]
Oracle D(c) :
if q < qD ∧ ¬(c∗
def ∧ c = c∗) then
q ← q + 1;
(r, s) ← f −1
g ← G(r);
return g ⊕ s
sk (c);
else return ⊥
def ← false; q ← 0;
G ← nil; c∗
Game G4 :
LG, L′
r∗ $← {0, 1}k;
s∗ $← {0, 1}ℓ;
c∗ ← fpk(r∗, s∗);
(pk, sk) ← KG();
(m0, m1, σ) ← A1(pk);
def ← true;
c∗
b′ ← A2(c∗, σ);
return true
Oracle G(x) :
if x /∈ dom(LG) then
if x /∈ dom(L′
G) then
LG[x] $← {0, 1}ℓ;
else
LG[x] ← L′
G[x];
return LG[x]
def ← false; q ← 0;
Game G5 :
LG, LD ← nil; c∗
r∗ $← {0, 1}k;
s∗ $← {0, 1}ℓ;
c∗ ← fpk(r∗, s∗);
(pk, sk) ← KG();
(m0, m1, σ) ← A1(pk);
def ← true;
c∗
b′ ← A2(c∗, σ);
return true
Oracle G(x) :
if x /∈ dom(LG) then
c ← ﬁnd c ∈ dom(LD). siepk(c, x) 6= ⊥;
if c 6= ⊥ then
LG[x] ← LD[c] ⊕ siepk(c, x);
else
LG[x] $← {0, 1}ℓ;
return LG[x]
Oracle D(c) :
if q < qD ∧ ¬(c∗
def ∧ c = c∗) then
q ← q + 1;
r ← ﬁnd r ∈ dom(LG). siepk(c, r) 6= ⊥;
if r 6= ⊥ then return LG[r] ⊕ siepk(c, r)
else
r ← ﬁnd r ∈ dom(L′
if r 6= ⊥ then return L′
else
G). siepk(c, r) 6= ⊥;
G[r] ⊕ siepk(c, r)
if c∗
def ∧ ciepk(c, c∗) 6= ⊥ then
(r, s, t) ← ciepk(c, c∗);
LG[r] $← {0, 1}ℓ; return LG[r] ⊕ s
else
(r, s) ← f −1
sk (c);
m $← {0, 1}ℓ; L′
return m;
G[r] ← m ⊕ s;
else return ⊥
Oracle D(c) :
if q < qD ∧ ¬(c∗
def ∧ c = c∗) then
q ← q + 1;
r ← ﬁnd r ∈ dom(LG). siepk(c, r) 6= ⊥;
if r 6= ⊥ then return LG[r] ⊕ siepk(c, r)
else
if c ∈ dom(LD) then return LD[c]
else
c′ ← ﬁnd c′ ∈ dom(LD). ciepk(c, c′) 6= ⊥;
if c′ 6= ⊥ then
(r, s, t) ← ciepk(c, c′);
return LD[c′] ⊕ s ⊕ t;
else
if c∗
def ∧ ciepk(c, c∗) 6= ⊥ then
(r, s, t) ← ciepk(c, c∗);
LG[r] $← {0, 1}ℓ; return LG[r]⊕s;
else
LD[c] $← {0, 1}ℓ; return LD[c]
else return ⊥
Figure 4: Sequence of games in the proof of ZAEP. Fragments of code displayed inside a box appear only in
the game whose name is surrounded by the matching box.
730games G4 and G5:
(LG, c∗, c∗
(∀c. (∀r ∈ dom(L′
def , q)h1i = (LG, c∗, c∗
def , q)h2i ∧
G). siepk(c, r) = ⊥)h1i ↔
(∀c′ ∈ dom(LD). ciepk(c, c′) = ⊥ ∧ c /∈ dom(LD))h2i ∧
Gh1i) ↔ (∀c ∈ dom(LD). siepk(c, r) = ⊥)h2i∧
(∀r. r /∈ dom(L′
(∀c. let (r, s) = f −1
sk (c) in
c ∈ dom(LD))h2i →
Gh1i) ∧ L′
r ∈ dom(L′
Gh1i[r] = s ⊕ LDh2i[c])
Theorem 4 (Coppersmith method) Let
be a
monic integer polynomial of degree d and N a positive inte-
ger of unknown factorization. In time polynomial in log(N )
and d, using Coppersmith algorithm one can ﬁnd all integer
solutions x0 to p(x0) = 0 mod N with |x0| < N 1/d.
p(X)
We denote by tC(N,d) an upper bound on the running time
of the above method for ﬁnding all roots modulo N of a
polynomial of degree d.
We then prove the following relational invariant between
games G4 and G5:
5.1 Short Exponent RSA
For an n-bit RSA modulus N = pq, the function
(r∗ ∈ dom(LG) ∨ r∗ ∈ dom(L′
(r∗ ∈ dom(LG) ∨ ∃c ∈ dom(LD). ciepk(c, c∗) 6= ⊥)h2i
G))h1i →
From which we obtain