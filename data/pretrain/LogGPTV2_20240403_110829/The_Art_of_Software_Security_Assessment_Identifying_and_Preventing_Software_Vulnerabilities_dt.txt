pthread_mutex_t queue_lock; 
pthread_cond_t queue_cond; 
int fd; 
void *job_task(void *arg) 
{ 
    struct element *elem; 
    pthread_mutex_init(&queue_lock, NULL); 
    for(;;) 
    { 
        pthread_mutex_lock(&queue_lock); 
        if(queue == NULL) 
                pthread_cond_wait(&queue_cond, &queue_lock); 
        elem = queue; 
        queue = queue->next; 
        pthread_mutex_unlock(&queue_lock); 
        .. process element .. 
    } 
    return NULL; 
} 
void *network_task(void *arg) 
{ 
    struct element *elem, *tmp; 
    struct request *req; 
    pthread_mutex_init(&queue_lock, NULL); 
    for(;;) 
    { 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
833 
        req = read_request(fd); 
        if(req == NULL)  // bad request 
                continue; 
        elem = request_to_job_element(req); 
         free(req); 
        if(elem == NULL) 
            continue; 
        pthread_mutex_lock(&queue_lock); 
        if(queue == NULL) 
        { 
            queue = elem; 
            pthread_cond_broadcast(&queue_cond); 
        } 
         else 
         { 
            for(tmp = queue; tmp->next; tmp = tmp->next) 
                      ; 
            tmp->next = elem; 
         } 
        pthread_mutex_unlock(&queue_lock); 
    } 
} 
This example uses more locking mechanisms to ensure that the queue is accessed by 
only one thread, but there's still a problem: Each thread reinitializes queue_lock by 
calling pthread_mutex_init(). In effect, this allows multiple threads to obtain multiple 
locks, so it's not guaranteed that each thread can operate on the queue in an atomic 
fashion. 
After you've determined that locks are used and the correct synchronization object is 
in place, you can begin to examine code that accesses a shared resource. This process 
involves ensuring that a lock is acquired for the synchronization primitive before 
accessing the resource, and then the primitive is signaled after the operation has 
been completed. This second point is worth keeping in mind because a code path 
could exist in which a synchronization primitive is never unlocked. This code path 
invariably leads to deadlock, discussed in the next section. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
834 
Paul Starzets, a security researcher with iSec, discovered a major race condition 
vulnerability in the Linux kernel's sys_uselib() system call. (Remember that kernels 
are multithreaded, too.) Starzets pointed out that the sys_brk() function is required 
to hold a semaphore lock specific to a process memory descriptor list (called mmap_sem) 
because it adds an element to the structure by using vma_link(). However, in the 
load_elf_binary() function that sys_uselib() uses, this semaphore is released before 
sys_brk() is called, as shown in Listing 13-3. The down_write() function is used to wait 
on a lock, and the up_write() function is used to release it. 
Listing 13-3. Race Condition in the Linux Kernel's Uselib() 
static int load_elf_library(struct file *file) 
{ 
       down_write(&current->mm->mmap_sem); 
error = do_mmap(file, 
              ELF_PAGESTART(elf_phdata->p_vaddr), 
              (elf_phdata->p_filesz + 
               ELF_PAGEOFFSET(elf_phdata->p_vaddr)), 
              PROT_READ | PROT_WRITE | PROT_EXEC, 
              MAP_FIXED | MAP_PRIVATE | MAP_DENYWRITE, 
              (elf_phdata->p_offset - 
               ELF_PAGEOFFSET(elf_phdata->p_vaddr))); 
up_write(&current->mm->mmap_sem); 
if (error != ELF_PAGESTART(elf_phdata->p_vaddr)) 
       goto out_free_ph; 
elf_bss = elf_phdata->p_vaddr + elf_phdata->p_filesz; 
padzero(elf_bss); 
len = ELF_PAGESTART(elf_phdata->p_filesz + 
    elf_phdata->p_vaddr + ELF_MIN_ALIGN - 1); 
bss = elf_phdata->p_memsz + elf_phdata->p_vaddr; 
if (bss > len) 
       do_brk(len, bss - len); 
Using some inventive exploitation techniques, Starzets demonstrated how to leverag 
this bug for root access on a vulnerable system. You can find more information on this 
vulnerability at www.isec.pl/vulnerabilities/isec-0021-uselib.txt. 
Return value checking is another important part of ensuring that a program is thread 
safe. Of course, checking return values is always important in preventing 
vulnerabilities, multithreaded or not, but this guideline especially applies to 
multithreaded programming. One interesting variation on thread race conditions is a 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
835 
failure to correctly check return values to make sure the API is functioning as 
expected. Take a look at the following code: 
DWORD processJob(LPVOID arg) 
{ 
    struct element *elem; 
    for(;;) 
    { 
        WaitForSingleObject(hMutex, MAX_TIME); 
        if(queue == NULL) 
            WaitForSingleObject(queueEvent, MAX_TIME); 
        elem = queue; 
        queue = queue->next; 
        ReleaseMutex(hMutex); 
        .. process element .. 
    } 
    return 0; 
} 
Assume the processJob() function is run by multiple threads, as in the previous 
examples. Notice that the WaitForSingleObject() function's return value is ignored in 
both instances it's called. As you have seen previously, this function can return for a 
number of reasons, including when the maximum time limit to wait has been 
exceeded. Therefore, if MAX_TIME elapses before the mutex is released, this function 
could begin operating on queue when it doesn't actually own the mutex, or it operates 
on queue when the queueEvent object hasn't been signaled. 
Deadlocks and Starvation 
Starvation and deadlock cause a task to never be completed because a thread can 
never be scheduled for execution. The "Windows IPC Synchronization Objects" 
section included an example of a deadlock that resulted from waiting on an event 
object while maintaining ownership of a mutex object. This prevented another thread 
from signaling the necessary event. Deadlocks can be addressed in the Win32 API by 
using the WaitForMultipleObjects() function to wait for an entire set of 
synchronization objects to become signaled. However, this approach might create its 
own issues and result in starvation. These situations are hard to evaluate when 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
836 
auditing code; however, you should note if bWaitAll is set to true, and the number of 
objects is quite large. You also need to consider situations in which it's impossible or 
nearly impossible to have all objects that are being waited on signaled. 
Deadlocks also happen in UNIX threaded programs. In PThreads, deadlocks are more 
likely to occur from the use of multiple mutexes, as shown in this simple example: 
struct interface *interfaces[MAX_INTERFACES]; 
int packet_process(int num) 
{ 
    struct interface *in = interfaces[num]; 
    struct packet *pkt; 
    for(;;) 
    { 
        pthread_mutex_lock(in->lock); 
        pthread_cond_wait(in->cond_arrived, in->lock); 
        pkt = dequeue_packet(in); 
        if(needs_forwarding(pkt)) 
        { 
            int destnum; 
            struct interface *dest; 
            destnum = find_dest_interface(pkt); 
            dest = interfaces[destnum]; 
            pthread_mutex_lock(dest->lock); 
            enqueue_packet(pkt, dest); 
            pthread_mutex_unlock(dest->lock); 
           in->stats[FORWARDED]++; 
            pthread_mutex_unlock(in->lock); 
            continue; 
        } 
        pthread_mutex_unlock(in->lock); 
        .. process packet .. 
    } 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
837 
} 
This example shows a classic deadlock situation: Two locks can be held by a single 
thread, and another thread can acquire the same locks in a different order. In this 
example, there's a thread for each network interface to handle dequeuing and dealing 
with arriving packets. If the packet needs to be forwarded, it's added to another 
queue. There's the potential, however, for two competing threads to cause a deadlock 
in this code. The following sequence of events describes how deadlock might occur: 
1. Thread #1 locks interface[1] and dequeues a packet. 
2. Thread #2 interrupts, locks interface[2], and dequeues a packet. 
3. Thread #2 identifies a packet destined for interface[1], so 
pthread_mutex_lock(dest->lock) puts thread #2 to sleep because thread #1 
holds the lock. 
4. Thread #1 regains the processor. It realizes it needs to forward a packet to 
interface[2], so pthread_mutex_lock(dest->lock) puts thread #1 to sleep 
because thread #2 holds the lock. 
Now both threads are unable to do anything because they are waiting on each other 
to release a lock to continue their work. 
When auditing code for deadlocks, you need to evaluate whether multiple primitives 
are locked and held simultaneously by more than one thread. Then you must consider 
whether those threads can lock primitives in a different order to create a condition like 
the one in the previous example. Most threading mechanisms include timed waiting 
functions or use functions that return immediately if a lock is unavailable, which might 
mitigate the threat of deadlocks. However, a timeout that results in terminating the 
program might be noteworthy as a denial of service in itself, particularly if the service 
doesn't restart. 
7.9.6 Summary 
A lot of complexity is introduced when a program can share resources among 
concurrent threads or processes. Serious issues can occur when an application fails to 
handle concurrent access to shared resources. This failure can result in execution 
entities interfering with each other and ultimately corrupting the program to the point 
of a successful compromiseeither by exploitation for elevated privileges or bringing 
the program to a grinding halt. 
You've examined problems in dealing with multiple execution instances 
simultaneously operating on shared resources, including issues with process and 
thread synchronization, and signal handling in UNIX environments. Identifying these 
issues can be extremely difficult and requires detailed analysis of the application's 
concurrent programming elements. However, you should now be familiar with the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
838 
techniques necessary to perform a thorough and effective assessment of 
vulnerabilities that occur due to synchronization issues. 
8. Part III:  Software Vulnerabilities in 
Practice 
Part III: Software Vulnerabilities in 
Practice 
8.1 Chapter 14.  Network Protocols 
"And again, the internet is not something you just dump something on. It's not a truck. It's a 
series of tubes." 
8.1.1 Introduction 
The majority of network-aware computer software leverages the functionality of the 
TCP/IP protocol stack through high-level interfaces, such as BSD sockets, or 
frameworks such as Distributed Component Object Model (DCOM). Some software, 
however, has to work with network data at a lower levela world populated by 
segments, frames, packets, fragments, and checksums. Looking for security 
vulnerabilities in lower-level network software is challenging and captivating work. 
Networking code is a vast topic that can't be covered adequately in one chapter. 
Therefore, this chapter covers the basics, and then offers the authors' thoughts and 
experiences, which should prove useful if you're charged with a related auditing 
project. 
This chapter focuses on three of the core Internet protocols: IP, UDP, and TCP. 
Throughout the discussion, you learn about security issues that tend to plague 
software that implements these protocols. Chapter 15(? [????.]), "Firewalls," covers 
firewall technology, which works closely with these protocols. Finally, Chapter 16(? 
[????.]), "Network Application Protocols," discusses some popular application-layer 
protocols and security issues that tend to surface in the code that implements them. 
Note that the discussion in this chapter is specific to IP version 4the current standard 
for Internet communications. IP version 6, IPv4's successor, is not covered in this 
chapter. 
In the course of reviewing certain software, an auditor might have to examine code 
that deals with low-level network traffic. This processing could include analyzing 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
839 
packets or frames taken directly from the network as well as modifying or fabricating 
packets and placing them directly on the network. This discussion focuses on software 
systems that implement the TCP/IP networking protocols and on systems that 
analyze and intercept network traffic, as they tend to be more security critical devices 
in a network. Your most common projects involving TCP/IP protocol implementations 
will most likely be one of the four following product types: 
TCP/IP stacks residing on end hosts The TCP/IP stack is the centerpiece of 
data exchange between two or more hosts on an IP network. Typically located 
in an OS kernel, the IP stack hides details of network state and data delivery 
from user applications. Applications are given a clean and simple interface so 
that they don't need code to deal with network problems, retransmissions, 
error message processing, and the like. 
Products that provide routing, Network Address Translation (NAT), or 
load-balancing services Multihomed hosts might be required to route data 
between their interfaces as dictated by a static set of simple routing rules, or 
a dynamic rule set that's continuously updated through the use of routing 
protocols. This routing functionality is really an extension of the basic IP stack, 
and most end hosts can be configured to act as a router. Naturally, dedicated 
routing products are often much more complicated. In addition to routers, 
load-balancing products are charged with dividing incoming data for a host 
between a number of end hosts, thus enabling requests to a single host to be 
served in parallel and speeding up access time to clients for high-volume 
servers. 
Security products: firewalls and intrusion detection/prevention systems A 
number of security products are required to analyze packets traversing 
networks that they are protecting. These products make decisions based on 
attributes of the packets or the data in them. Often attackers will attempt to 
exploit subtle flaws caused by differences between how the security product 
evaluates the packets and how the end host evaluates those same packets. 
Network-monitoring products Several tools passively listen on a network and 
interpret the contents of packets being transmitted. They are often used for 
diagnosing network issues or for administrators to get a better idea of the kind 
of data sent over a network. These tools provide not only packet 
interpretations, but also statistical data based on protocol analysis. They are 
often required to simply interpret packets and optionally log some sort of 
information, as opposed to acting on packets as other products do. 
The codebases for performing packet analysis at this level are generally quite large, 
so auditors faced with reviewing these codebases might consider it an 
insurmountable task. This chapter has been included to give code reviewers a primer 
on some major protocols within a standard TCP/IP suite and to highlight some of the 
problem areas where mistakes are most likely to be made. You learn how to audit 
several major components of IP stacks and use the knowledge you gained in Part II(? 
[????.]), "Software Vulnerabilities," of this book. Although firewall technologies aren't 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
840 
covered in depth until Chapter 15(? [????.]), many of the concepts in this chapter are 
essential for understanding how firewalls make policy decisions and what possible 
evasion techniques exist for circumventing them. 
8.1.2 Internet Protocol 
Internet Protocol (IP) is the core network-layer protocol of the TCP/IP protocol 
suite. It's a pervasive protocol, used by innumerable hosts worldwide to deliver data 
across the Internet and private networks. It provides an infrastructure so that 
computers can locate each other with unique identifiers (IP addresses) and exchange 
blocks of data (known as IP datagrams). IP is designed to abstract the physical details 
of networking hardware so that communication can happen more or less seamlessly. 
At the level immediately below IP, you find protocols targeted to specific networking 
hardware, such as Ethernet and token ring. Sitting on top of IP, you find protocols 
such as TCP that provide features such as ports, connections, and reliable delivery of 
data. 
Naturally, any host participating in a TCP/IP based network must be able to correctly 
process incoming IP datagrams. The host performs this processing immediately upon 
reception of a packet, and makes decisions on how the packet should be 
handledwhether that includes passing it to a higher-level protocol handler in the 
network stack (such as TCP or UDP), signaling an error because the packet cannot be 
processed, or blocking the packet because it fails to meet criteria of a firewall or other 
similar data inspection software. 
Because of the placement of IP in the network stack and the role it plays, it is an 
attractive strategic target for attackers trying to penetrate a system or network. They 
can target errors in processing IP datagrams to exploit devices and hosts, or attempt 
to fool security systems (firewalls, IDSs, IPSs) by leveraging some of the unusual 
nuances of IP stacks. A large codebase dealing entirely with untrusted user data 
received from a remote location is always a prime candidate for code reviewers 
because it represents a major attack surface. 
Before you dive into how to audit IP processing code, you should briefly review the 
basics of how IP works. As mentioned, the discussion in this chapter is specific to IP 
version 4commonly written as IPv4. Interested readers can get a more 
comprehensive analysis from several sources on the subject, particularly RFC 791 
(www.ietf.org) and TCP/IP Illustrated, Volume 1 by W. Richard Stevens 
(Addison-Wesley, 1994(? [????.])). 
IP Addressing Primer 