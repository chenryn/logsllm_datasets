 **marc schipperheyn** opened **SPR-9253** and commented
This is best explained by an example
    @Controller 
    @RequestMapping("/base")
    public class MyController{
    	@RequestMapping(method = RequestMethod.GET, value = "/start.html")
    	public String doSomething(
    			ModelMap model,
    			NativeWebRequest request) throws Exception {
    [...]
    	@RequestMapping(method = RequestMethod.POST, value = "/start.html")
    	public String doSomething(
    			@ModelAttribute("vo") MyVO vo,
    			BindingResult result,
    			ModelMap model,
    			NativeWebRequest request) throws Exception {
    [...]
    }
    @Controller 
    @RequestMapping("/base/extend")
    public class MyExtendedController extends MyController{
    	@RequestMapping(method = RequestMethod.GET, value = "/start.html")
    	public String doSomething(
    			ModelMap model,
    			NativeWebRequest request) throws Exception {
    [...]
    	@RequestMapping(method = RequestMethod.POST, value = "/start.html")
    	public String doSomething(
    			@ModelAttribute("vo") MyVO vo,
    			BindingResult result,
    			ModelMap model,
    			NativeWebRequest request) throws Exception {
    [...]
    }
This will make Spring think start.html occurs twice in the same controller and
throw and IllegalStateException.
The reason to want to extend controllers is to be able to use common methods.
AFAIK, the only way to extend controllers is to use RequestMapping at the
Controller level. It is not possible to just use RequestMappings at the method
level in this scenario. I consider it very inelegant, especially in the
context of REST, that the urlpath has to be unique at an endpoint level
("/start.html"). It should be unique taken into account the entire
requestmapping ("/base/start.html", "/base/extend/start.html".
* * *
**Issue Links:**
  * #14003 Ambiguous handler mapping exception for unambiguous mappings ( _ **"duplicates"**_ )