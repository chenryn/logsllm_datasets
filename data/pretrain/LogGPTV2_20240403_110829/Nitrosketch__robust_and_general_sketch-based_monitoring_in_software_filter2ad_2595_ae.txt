### Throughput Degradation in OVS-DPDK

OVS-DPDK suffers from significant throughput degradation. Among the four sketches, UnivMon achieves 2.1 Gbps, and the faster Count-Min sketch only reaches 5.5 Gbps. With NitroSketch, all sketches achieve 10 Gbps and 40 Gbps line rates under CAIDA and datacenter traces without adding an extra thread. Inside the vswitchd thread, we observe that DPDK, OVS, and NitroSketch modules utilize the full potential of a single core.

### Throughput with Separate-Thread

Figures 8(b) and 8(c) show the throughput of the separate-thread version. It is already challenging for virtual switches to achieve 10 Gbps line rate on a single core with 64B packets. For 40 Gbps, even vanilla DPDK does not reach the line rate with 64B packets due to hardware limitations in the Intel XL710 NIC [29]. This means that OVS-DPDK, VPP, and BESS cannot reach this line rate under 64B packet traces. In Figure 8(b), we see that NitroSketch has a negligible impact on the throughput of virtual switches, achieving over 20 Gbps line rate under any workload. As evident from Figures 8(b) and 8(c), NitroSketch is not the bottleneck in achieving 40 Gbps line rates for 64B packets and data center workloads.

### Throughput vs. Memory

To guarantee an error budget \(\epsilon\) (for any distribution), the sampling probability \(p\) in the pre-processing stage depends on the allocated memory. To illustrate this trade-off, we set error guarantees of 3% and 5% for UnivMon with NitroSketch. Figure 9(a) shows that NitroSketch copes with 40 Gbps OVS-DPDK with an acceptable increase in memory.

### Improvement Breakdown

While implementing NitroSketch, we used multiple optimization techniques. We evaluate the gains of each optimization separately for UnivMon with NitroSketch. Figure 9(b) confirms that the counter array sampling technique offers the most significant speedup.

### Throughput with AlwaysCorrect NitroSketch

To evaluate the convergence time in this mode, we implement AlwaysCorrect NitroSketch with Count-Sketch and UnivMon in OVS-DPDK with the AIO version. In Figure 11(c), we report the measured throughput every 0.1 seconds (with extra measurement overhead added) under 40GbE. We see that it takes about 0.6 seconds for Count-Sketch and 0.8 seconds for UnivMon to reach full speed.

### CPU Utilization

A single DPDK PMD thread continuously polls packets from the NIC, "saturating" a core and utilizing 100% CPU as reported by a universal process viewer (e.g., htop). Therefore, we profile the CPU time of each module.

#### CPU Time in All-in-One

We measure the CPU time in the same setting as in Figure 8(a). As shown in Figure 10(a), when vanilla sketches are running, most of the CPU time is spent on sketching, and the overall switching performance drops. After applying NitroSketch-AIO, the switch achieves line-rate while keeping NitroSketch's CPU usage below 20%.

#### CPU Time in Separate-Thread

Figure 10(b) compares the CPU time between OVS-DPDK and NitroSketch-Separate Thread, in a setting as in Figure 8(b). When the switch is saturated with min-sized packets (approximately 22 Mpps), the cores for packet switching are running at nearly 100%, while NitroSketch is not running at full speed and could handle higher packet rates if the virtual switch supports it.

### Accuracy and Convergence Time

We evaluate the accuracy of UnivMon, CMS, Count Sketch, and K-ary in NitroSketch with different sized epochs and report in Figures 11 and 12. Our experiments show that NitroSketch converges to similar accurate results as vanilla sketches after receiving enough packets. As depicted in Figures 11(a) and 11(b), with fixed 0.1 and 0.01 sampling rates, NitroSketch with UnivMon can achieve similar accuracy as the vanilla UnivMon after receiving 8 million packets. As shown in Figures 12(a) and 12(b), tested sketches with NitroSketch can achieve better-than-guaranteed results (< 5% error) after seeing 2-4 million packets and converge to similar accuracy after receiving 8-16 million packets. An interesting finding is that Count-Min Sketch achieves better-than-original results when NitroSketch is enabled and converged. This is because Count-Min Sketch overestimates the counts (i.e., always +1) and produces "biased" estimates, and NitroSketch's sampling procedure corrects such overestimation.

### Comparison with Other Solutions

#### SketchVisor

SketchVisor accelerates sketches using a fast path algorithm in its front-end. Since the source code of SketchVisor [43] on Open vSwitch is not publicly available, we implement its fast-path algorithm in C and carefully integrate it with UnivMon on OVS-DPDK using the same FIFO buffer as NitroSketch [16]. SketchVisor's performance depends on the portion of the traffic that is processed by the fast path. Thus, we evaluate the throughput based on in-memory testing with manually injecting 20%, 50%, and 100% of traffic into the fast path. We allocate memory for SketchVisor and NitroSketch to detect the top 100 heavy hitters, using 900 counters for the fast-path and setting a 5% error guarantee on UnivMon.

As reported in Figure 13(a), the throughput of SketchVisor improves as the percentage of traffic handled by the fast-path increases. When the fast-path processes 20% of the traffic, it achieves 2.12 Mpps. SketchVisor reaches its maximum packet rate of 6.11 Mpps when 100% of the traffic goes into the fast-path. Meanwhile, NitroSketch runs at a dramatically faster speed of 83 Mpps. Unsurprisingly, this explains the situation where SketchVisor uses 100% CPU (not shown in the figure) while NitroSketch requires less than 50% (shown in Figure 10(b)) when running in a separate thread on OVS-DPDK.

We observe that to cope with the full 10 Gbps speed and avoid packet drops, the fast-path has to handle 100% of the packets. For a fair comparison on OVS, we prevent packet drop by using a very large buffer. We manually redirect 20%, 50%, and 100% of the packets to the fast-path. Figures 14(a), 14(b), and 14(c) report relative errors on heavy hitters in the three traces. We can see that NitroSketch has larger errors before convergence (< 3.61 million packets) but is more accurate than SketchVisor after convergence. In a 10 Gbps OVS-DPDK switch, this stabilization time can be as little as 0.24 seconds. Here, SketchVisor is inaccurate in the CAIDA and DDoS traces (Figures 14(a) and 14(b)) and is relatively accurate in the data center trace [11]. In contrast, NitroSketch achieves good accuracy on all traces.

#### NetFlow/sFlow

On OVS-DPDK and VPP, NetFlow/sFlow are default monitoring tools. We configure OVS-DPDK to enable sFlow and VPP to enable NetFlow. We set a polling interval of 10 seconds with sampling rates of 0.001, 0.002, and 0.01 for NetFlow. For fairness, we configured NitroSketch with a sampling probability of 0.01. In practice, it is often unreasonable to configure NetFlow with higher sampling rates because a large sampling rate can potentially incur huge memory consumption in high line-rate switches. On the controller, we collect the sampled packets/reports with Wireshark [24] directly from the port. Figure 13(b) indicates that NetFlow consumes much more memory with a 0.01 sampling rate. In NetFlow (as in Figure 15), we observe that the recall rates of 100 heavy hitters are low in the CAIDA and DDoS traces and are relatively good in the UNI2 datacenter trace [11]. This is because UNI2 is quite skewed, while CAIDA and DDoS are heavy-tailed. In contrast, NitroSketch achieves high recall rates in all cases.

### Conclusions and Discussion

Sketching continues to be a promising direction in network measurement. However, its current performance on software switches is far from ideal to serve as a viable line-rate and low CPU consumption option. We identify the key bottlenecks and optimizations for software sketches. Our optimization is encapsulated into NitroSketch, an open-source high-performance software sketching framework [32]. NitroSketch supports a variety of measurement tasks and provides accuracy guarantees. Our evaluation shows that NitroSketch achieves the line rate using multiple software switches and offers competitive accuracy compared to the alternatives.

Interestingly, by replacing each Count Sketch instance in UnivMon with AlwaysCorrect NitroSketch, we get an optimized solution that can provide a \((1 + \epsilon)\)-approximation for measurement tasks known to be infeasible to estimate accurately from a uniform sample [60]. Specifically, count distinct cannot be approximated better than a \(\Omega(1/\sqrt{p})\) factor, while Entropy does not admit any constant factor approximation even if \(p = 1/2\).

In Appendices, this paper has supporting material that has not been peer-reviewed. Finally, we can state that this work does not raise any ethical issues.

### Acknowledgements

We would like to thank the anonymous SIGCOMM reviewers and our shepherd Alex C. Snoeren for their thorough comments and feedback that helped improve the paper. We thank Omid Alipourfard, Sujata Banerjee, Minlan Yu, and Intel SPAN center for their helpful suggestions. This work was supported in part by CONIX Research Center, one of six centers in JUMP, a Semiconductor Research Corporation program sponsored by DARPA, NSF grants CNS-1565343, CNS-1700521, NSF CAREER-1652257, ONR Award N00014-18-1-2364, Israeli Science Foundation grant 1505/16, the Lifelong Learning Machines program from DARPA/MTO, the Technion HPI research school, the Zuckerman Foundation, the Technion Hiroshi Fujiwara Cyber Security Research Center, the Israel Cyber Directorate, the Cyber Security Research Center, and the Lynne and William Frankel Center for Computing Science at Ben-Gurion University.