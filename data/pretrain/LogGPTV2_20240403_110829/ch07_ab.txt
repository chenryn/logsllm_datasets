维护网络设备和配置
发布新的 Spotify 桌面客户端并监视部署失败
数据中心管理，包括采购、供应商关系和调配
维护和扩展存储
维护我们的数据基础架构和管道维护和扩展存储
维护我们的数据基础架构和管道
负责办公室 IT（网络、防火墙、员工计算机和外围设备、Google 应用程序、LDAP、Samba、Kerberos、AFS、wiki、打印机等）
作为所有同事的支持中心；例如，帮助进行笔记本电脑设置、解释网络配置和 TCP/IP 的工作原理，或帮助我们的同行使用系统监控图
还有很多事要做，但至少在起初，运维人员还剩下一点时间进行深入讨论，比如 IPv6 的未来，或者纠结不同自由软件许可证的差异。然而，随着不同的可伸缩性问题如同越来越大的波浪袭来，很明显，如果不执行某些操作，在保持 Spotify 运行方面将有严重的运维失败。
将可扩展性和可靠性带到前沿
  在此之前，Spotify 中有很多人希望帮助解决可扩展性和可靠性方面的问题，但最终只有运维人员负责这项工作。但是，运营团队有太多的责任要处理，需要将这些责任分配给组织的其他人员。引入了每周一次的会议，在此期间所有相关后端开发人员和至少一名运维工程师讨论需要处理可伸缩性问题的服务。每周讨论一个或多个服务，而打动开发人员的可扩展系统的建议往往胜过功能性建议。通过这类会议，运维工程师得到了一些指示，说明下一个采购周期需要哪些类型的服务器（注重磁盘空间、CPU 还是内存）。
随着开发与运维协同工作，这类会议的重点随着时间而改变。单个服务的可伸缩性和可靠性问题涉及越来越多的依赖于其他服务，因此孤立地查看每个服务是不够的；会议的焦点开始转移到整个后端生态系统。
尽管我们当时并不知道这一点，但我们的组织正在发生变革。渐渐地，确保系统运行状况的责任感正在从“只是运维的工作”转而成为在后端工作的所有工程师共享的义务，而不管其角色如何。在公司历史上的这一时期，一些原始的后端开发人员开始拥有 root 访问权限。 看到这是如此有用后，我们向所有需要它的开发人员提供了根访问权限。在大多数传统公司中，这种权限授予肯定是闻所未闻的。自 DevOps 出现以来，这是现在常见的做法，但当时不是。然而，我们从来没有想过要以不同的方式去做；我们天生就信任我们的工程师。公司很年轻，我们全都相信有一天自己会接管音乐世界。
当 Spotify 退出测试版时，新服务将按以下方式完成从创意到生产的周期：
开发人员将编写并在本地测试服务。
然后，开发人员会要求获得一个或多个生产服务器。
完成服务器的授予后，开发人员将登录到主机并配置服务及其依赖项。
引入这个新流程的一个意外好处是，开发人员现在可以比以前更了解他们的服务在真实状况的表现。“嗯，它在我的计算机上工作”这样的托词再也没有了。开发人员现在可以查看其代码在生产中的行为，在生成日志时查看日志，跟踪正在运行的进程，甚至在必要时修改操作系统。回首往事，我们无意中将 SRE 的专门角色与运维中的个人分离为一套技能和职责，因为这些技能和责任可以转移到任何有能力和有动力的人身上。在过去几年中，我们多次重用这一战略，其范围和深度也越来越大。
这工作了一段时间。
关键收获
我们从这一高速增长时期的主要学习是：
使运维成为解决方案生命周期的一部分。应尽早讨论和解决可扩展性、可靠性、可维护性和其他运维问题。
向需要特权访问（例如 root）的每个人授予特权访问权限可消除摩擦、消除阻力并加快迭代周期。可靠性其实就是促成信任：从信任自己开始。 
成功的诅咒：2010
 五名运维工程师
约 25 名后端工程师
2 个数据中心
几百台机器
约 20 个后端服务
7 种客户端（Windows、Mac、iPhone、安卓、黑莓、S60、libspotify）
前奏
在本节中，我们将讨论随着业务的发展，我们如何改变运维的心态：
默认需要运维经验在本节中，我们将讨论随着业务的发展，我们如何改变运维的心态：
默认需要运维经验
介绍开发人员和运维所有者的角色，这有助于我们延续自己在功能开发环境中注意运维的自然倾向。
迭代失败
我们无法足够快地将自己扩展为一个运维团队，因此不得不放弃我们的一些责任。
Spotify 在 2010 年继续受到欢迎。外部反映是越来越多的注册用户和并发活动用户，内部反应是功能和相应的后端服务的数量增长以及更多的 Spotify 员工。
 这两个增长难题（用户和员工的急剧上升）对运维团队打击很大。尽管从三人增长到五人，我们仍然面临着一场无法避免的风暴。用户增加导致后端面临更大的压力，从而加大了出现罕见故障的频率，并最终导致更多事件和跨服务故障。此时，Spotify 新员工的背景在技术和非技术之间平均分配，从而对质量支持提出了更高的要求，需要更短的技术响应周期。除了这些因素之外，有了更熟练的开发人员，功能的产生速度也更快。在 2009 年和 2010 年，Spotify 又发布了五个客户端：我们的用户现在可以在 iPhone、Android、黑莓、诺基亚手机 S60 和 libspotify（一个允许第三方开发人员通过自己的应用程序访问 Spotify 后端的库）上访问 Spotify。后端也有了更多的功能引入，但 2010 年的主要焦点是可扩展性和稳定性。每个系统都需要某种改进，无论是性能缩放方面的简化、缓存层都得到了考虑，有时甚至会考虑完全重写。
Spotify 生态系统的每个前端和后端更改都引入了新的 Bug，揭示了新的瓶颈，并改变了整个系统的状况。在客户端中添加新功能会导致（并未修改且历史上非常稳定的）服务因用户行为模式的变化而承受突然的压力。这反过来又往往导致其他系统以多米诺骨牌般的方式陷入颠簸。复杂的系统是不可预测的，难以管理，在我们的例子中，只有少数人知道整个生态系统是如何结合在一起的。应对不可预见的事件越来越成为一项全职工作。当 Spotify 经历后端不稳定期时，开发人员通常会出现在运维人员的办公桌前，并要求得到无条件支持。这阻止了运维创建简化工作和自动化的工具。此外，我们为后端开发人员提供维护支持的方式也不尽如人意。尽管开发人员继续维护其系统，但交付功能的压力正在稳步上升，而维护自己服务的（非正式的、义务性的）协议也变得很难达到，这往往导致组件无人管理、数据故障和安全性的问题。
与此同时，我们的开发人员同事正在处理他们自己的组织问题。最初是一个小型的开发人员团队，对如何协作交付代码有着共同的理解，后来逐渐成长为多个开发团队。在此新环境中，开发人员发现，如果不能就 Sprint 承诺等事项达成一致，团队之间的协作就很困难。因此，团队更加感到紧迫感，急于发布承诺的功能。一个不幸的副作用是疲于奔命，许多开发人员因此无法履行与我们达成的非正式协议，无暇顾及维护他们的服务。此时，运维部门越来越意识到，如何将产品的成功转化为无数个夜晚的加班，手动维护被负载压垮的故障系统。所有这些都导致了进一步的尝试，并最终适应了新的现实。
新的所有权模型
 我们需要明确我们运维和开发人员角色的责任。
开发所有者角色
  2010 年初，我们通过引入开发人员所有者角色，正式达成了运营与开发之间的非正式的（尽力而为的）协议。每个服务都有一个在功能团队本身工作的所有者。以下是开发所有者的职责：
使操作系统保持最新更新