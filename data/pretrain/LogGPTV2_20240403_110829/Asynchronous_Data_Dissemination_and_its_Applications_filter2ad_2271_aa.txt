title:Asynchronous Data Dissemination and its Applications
author:Sourav Das and
Zhuolun Xiang and
Ling Ren
Asynchronous Data Dissemination and its Applications
Sourav Das
University of Illinois at
Urbana-Champaign
PI:EMAIL
Zhuolun Xiang
University of Illinois at
Urbana-Champaign
PI:EMAIL
Ling Ren
University of Illinois at
Urbana-Champaign
PI:EMAIL
1 INTRODUCTION
In this paper, we propose and study a new problem which we
call Asynchronous Data Dissemination (ADD). Briefly, the goal is
to disseminate a data blob from a subset of honest nodes to all
honest nodes, despite the presence of some malicious nodes. More
precisely, in a network of 𝑛 nodes where up to 𝑡 nodes could be
malicious, a subset of at least 𝑡 +1 honest nodes start with a common
message blob 𝑀, and the goal is to have all honest nodes output 𝑀
at the end of the protocol.
We present a solution to the ADD problem with 𝑛 ≥ 3𝑡 + 1,
where at least 𝑡 + 1 honest nodes start with the message 𝑀. For a
message 𝑀 of size |𝑀|, our protocol has a total communication cost
of 𝑂(𝑛|𝑀|+𝑛2). Moreover, our solution is information theoretically
secure, i.e., it does not rely on any cryptographic assumption. Ad-
ditionally, if we use a collision-resistant hash function with output
size 𝜅, we can extend our solution to any 𝑛 > 2𝑡 with a total commu-
nication cost of 𝑂(𝑛2|𝑀|/(𝑛−2𝑡)+𝜅𝑛2). For example, if 𝑡 = (1/2−𝜖)𝑛
for some 𝜖 > 0, our ADD protocol incurs a communication cost of
𝑂(𝑛|𝑀|/𝜖 + 𝜅𝑛2).
We then observe that ADD can help improve many important
problems, including asynchronous reliable broadcast (RBC) [14, 16],
asynchronous verifiable secret sharing (AVSS) [4, 15], asynchronous
complete secret sharing (ACSS) [52], dual-threshold ACSS [3, 34],
and asynchronous distributed key generation (ADKG) [2, 34], as
illustrated in Figure 1.
Overview of our results. To solve ADD, our protocol first lever-
ages error-correcting code to encode the input message 𝑀 into 𝑛
symbols, and then the 𝑖-th node is responsible for dispersing the
𝑖-th symbol. For any node 𝑖 that has input ⊥, it learns the 𝑖-th sym-
bol by receiving it from 𝑡 + 1 nodes (the set of honest nodes that
ABSTRACT
In this paper, we introduce the problem of Asynchronous Data
Dissemination (ADD). Intuitively, an ADD protocol disseminates a
message to all honest nodes in an asynchronous network, given that
at least 𝑡 + 1 honest nodes initially hold the message where 𝑡 is the
maximum number of malicious nodes. We design a simple and effi-
cient ADD protocol for 𝑛 parties that is information-theoretically
secure, tolerates up to one-third malicious nodes, and has a com-
munication cost of 𝑂(𝑛|𝑀|+𝑛2) for disseminating a message 𝑀.
We then use our ADD protocol to improve many important
primitives in cryptography and distributed computing. For asyn-
chronous reliable broadcast (RBC), assuming collision-resistant
hash functions, we give a RBC protocol with communication cost
𝑂(𝑛|𝑀|+𝜅𝑛2) where 𝜅 is the size of the hash function output. This
improves over the prior best scheme with communication cost
𝑂(𝑛|𝑀|+𝜅𝑛2 log 𝑛) under the same setting. Our improved RBC pro-
tocol immediately improves the communication cost of asynchro-
nous atomic broadcast and Asynchronous Distributed Key Gen-
eration (ADKG) protocols. We also use our improved RBC proto-
col along with additional new techniques to improve the commu-
nication cost of Asynchronous Verifiable Secret Sharing (AVSS),
Asynchronous Complete Secret Sharing (ACSS), and dual-threshold
ACSS from 𝑂(𝜅𝑛2 log 𝑛) to 𝑂(𝜅𝑛2) without using any trusted setup.
CCS CONCEPTS
• Security and privacy → Distributed systems security; Cryp-
tography; • Computing methodologies → Distributed algo-
rithms.
KEYWORDS
Data Dissemination; Asynchronous Networks; Reliable Broadcast;
Verifiable Secret Sharing; Distributed Key Generation; Communica-
tion Complexity.
ACM Reference Format:
Sourav Das, Zhuolun Xiang, and Ling Ren. 2021. Asynchronous Data Dis-
semination and its Applications. In Proceedings of the 2021 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’21), November
15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA,
17 pages. https://doi.org/10.1145/3460120.3484808
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea.
© 2021 Association for Computing Machinery.
ACM ISBN 978-1-4503-8454-4/21/11...$15.00
https://doi.org/10.1145/3460120.3484808
Figure 1: Illustration of relationship between problems we discuss
in this paper. We use Asynchronous Data Dissemination (ADD) to
solve Asynchronous Reliable Broadcast (RBC) for long messages.
Our improved RBC directly improves the communication cost of
Asynchronous Distributed Key Generation (ADKG). We also use our
improved RBC along with additional techniques (illustrated using
dotted arrows) to improve the communication cost of Asynchro-
nous Verifiable Secret Sharing (AVSS), Asynchronous Complete Se-
cret Sharing (ACSS), and Dual-threshold ACSS.
AVSSACSSRBCADDADKGDual-ThresholdACSSSession 10C: Foundations CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2705Table 1: Comparison of protocols proposed in this paper with prior
best known protocols realizing different primitives under different
setup and cryptographic assumption. Here 𝑛 is the number of nodes
in the system and 𝜅 is the security parameter.
Cryptographic
Assumption
Communication
Reference
Scheme
Setup
𝑂(𝑛|𝑀 |+𝜅𝑛2 log 𝑛)
Cost (total)
𝑂(𝑛2|𝑀 |)
𝑂(𝑛|𝑀 |+𝜅𝑛2)
𝑂(𝑛|𝑀 |+𝜅𝑛2)
𝑂(𝜅𝑛2 log 𝑛)
𝑂(𝜅𝑛2 log 𝑛)
𝑂(𝜅𝑛2)
𝑂(𝜅𝑛2)
RBC
for long
message
AVSS
and
ACSS
Dual
Threshold
ACSS∗
𝑂(𝜅𝑛2 log 𝑛)
𝑂(𝜅𝑛2)
𝑂(𝜅𝑛2)
ADKG
𝑂(𝜅𝑛3 log 𝑛)
𝑂(𝜅𝑛3)
None
Hash
Hash
DL+RO
DL+RO
None
None
𝑞-SDH+DBDH Trusted
None
PKI
None
𝑞-SDH + Hash Trusted
None†
None
𝑞-SDH + Hash Trusted
DL+Hash
DL+RO
DDH+RO†
DL+RO
DL+RO
PKI
PKI
PKI
[14]
[16]
[41]
this work
[52]
[3]∗
[4]
this work
[3]
[3]
this work
[2]
this work
† Our AVSS does not require PKI, but our ACSS does. Also, If we assume the
DBDH assumption, then we do not need RO in our dual-threshold ACSS.
∗ As presented, the ACSS scheme of [3] only supports uniform random secrets.
All the dual-threshold ACSS scheme also only support uniform random secrets.
But they can be extended to arbitrary secrets using techniques from [48].
have the input message 𝑀). After each node 𝑖 disperses the 𝑖-th
symbol, honest nodes repeatedly try to reconstruct the message
𝑀 after receiving at least 2𝑡 + 1 symbols. The node outputs the
reconstructed message if it matches at least 2𝑡 + 1 symbols. This
protocol is information-theoretic, has a total communication cost
of 𝑂(𝑛|𝑀|+𝑛2), and tolerates 𝑡 < 𝑛/3 faults.
We then use the above ADD protocol to improve a variety of
other problems. Table 1 summarizes our results and compares with
existing works.
The first primitive we improve is the asynchronous reliable
broadcast (RBC) [14, 16], a fundamental primitive in distributed
computing. Briefly, an asynchronous reliable broadcast protocol
implements a broadcast channel in an asynchronous network and
ensures that all honest nodes in the network deliver the same mes-
sage if any honest node delivers or if the broadcaster is honest. RBC
has been used to construct many higher-level protocols such as
atomic broadcast [1, 25, 27, 30, 37, 40], asynchronous multi-party
computation [36, 52], and asynchronous distributed key genera-
tion [2, 34]. All of these involve RBC for long messages, typically of
size Ω(𝜅𝑛) where 𝑛 is the total number of nodes in the protocol and
𝜅 is the cryptographic security parameter. The classic RBC protocol
by Bracha [14] solves 1-bit RBC with communication cost 𝑂(𝑛2). It
thus needs 𝑂(𝑛2|𝑀|) cost for broadcasting a message 𝑀. Prior to our
work, the most closely related work was the asynchronous infor-
mation dispersal (AVID) protocol of Cachin and Tessaro [16]. Their
protocol uses error-correcting codes and Merkle path proofs and
has a communication cost of 𝑂(𝑛|𝑀|+𝜅𝑛2 log 𝑛); it can be modified
to solve RBC with the same communication cost.
We show that we can combine Bracha’s classic RBC protocol [14]
with our ADD protocol to obtain an improved solution to RBC for
long messages. The key observation is that running the Bracha’s
RBC protocol on the hash digest of 𝑀 can establish exactly the
initial condition for ADD, i.e., at least 𝑡 + 1 honest nodes start with
𝑀 and no honest node starts with any other message. Then, after
running our ADD protocol, every honest node unanimously outputs
the message 𝑀. Compared to the Cachin-Tessaro protocol [16], we
remove the log 𝑛 term in the communication cost as we remove the
Merkle path proofs.
Our improved RBC immediately improves asynchronous atomic
broadcast [27, 37, 40] and asynchronous distributed key genera-
tion [2]. It can also help improve the communication costs of Asyn-
chronous Verifiable Secret Sharing (AVSS) [4, 15] and its variants
such as Asynchronous Complete Secret Sharing (ACSS) and Dual-
Threshold ACSS [3, 34]. But for these primitives, it is not as simple
as plugging in our improved RBC as a black-box because state-of-
the-art solutions for these primitives have other bottleneck steps