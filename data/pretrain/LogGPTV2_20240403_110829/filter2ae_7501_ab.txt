    │   └── user.go
    ├── server
    ├── server.go
    ├── setting
    │   └── setting.go
    └── templates
conf为配置文件目录  
models目录下为orm文件  
modules为功能模块组件  
public和templates分别为静态资源及模板文件所在的目录  
routers目录下的为各路由文件  
setting目录下为配置文件处理的文件  
server.go为程序入口  
规则管理功能的实现  
用户管理、后端站点管理与规则管理功能的实现大同小异，都是类似flask、martini、tornado、django等MTV
WEB框架的应用，为了减少篇幅，本文只写后端站点管理功能如何实现，完整的代码请参见github。
后端站点管理的ORM实现  
先用xorm定义site的struct，然后再提供增、改、删、查看等方法，这些方法会被routers模块中的site文件调用：
// 因篇幅太长，省略部分代码，详细代码请查看github
    // debuglevel: debug, info, notice, warn, error, crit, alert, emerg
    // ssl: on, off
    type Site struct {
    ​    Id          int64
    ​    SiteName    string `xorm:"unique"`
    ​    Port        int
    ​    BackendAddr []string
    ​    Ssl         string    `xorm:"varchar(10) notnull default 'off'"`
    ​    DebugLevel  string    `xorm:"varchar(10) notnull default 'error'"`
    ​    LastChange  time.Time `xorm:"updated"`
    ​    Version     int       `xorm:"version"` // 乐观锁
    }
    func ListSite() (sites []Site, err error) {
    ​    sites = make([]Site, 0)
    ​    err = Engine.Find(&sites)    
    ​    log.Println(err, sites)    
    ​    return sites, err
    }
    func NewSite(siteName string, Port int, BackendAddr []string, SSL string, DebugLevel string) (err error) {    
    ​    if SSL == "" {
    ​        SSL = "off"
    ​    }    
    ​    if DebugLevel == "" {
    ​        DebugLevel = "error"
    ​    }
    ​    _, err = Engine.Insert(&Site{SiteName: siteName, Port: Port, BackendAddr: BackendAddr, Ssl: SSL, DebugLevel: DebugLevel})  
    return err
    }
后端站点管理的路由实现  
首先import相应的包，然后分别编写以下处理器：
增加站点的get与post请求的处理器（NewSite、DoNewSite）  
修改站点的get与post请求的处理器（EditSite、DoEditSite）  
根据ID删除站点的get处理器（DelSite）  
同步站点配置的处理器（SyncSite）  
同步站点配置的API的处理器以及根据ID同步站点配置的API的处理器（SyncSiteApi、SyncSiteById）  
// 因篇幅太长，省略部分代码，详细代码请查看github
    func NewSite(ctx *macaron.Context, sess session.Store, x csrf.CSRF) {    if sess.Get("uid") != "" {
    ​        ctx.Data["csrf_token"] = x.GetToken()
    ​        ctx.HTML(200, "newSite")
    ​    } else {
    ​        ctx.Redirect("/login/")
    ​    }
    }
    func DoNewSite(ctx *macaron.Context, sess session.Store) {    
    ​    if sess.Get("uid") != nil {        
    ​        log.Println(sess.Get("uid"))
    ​        siteName := ctx.Req.Form.Get("sitename")
    ​        port := ctx.Req.Form.Get("port")
    ​        Port, *:= strconv.Atoi(port)        backaddr := ctx.Req.Form.Get("backendaddr")        backendaddr := strings.Split(backaddr, "\r\n")        BackendAddr := make([]string, 0)                    for *, v := range backendaddr {            
    ​                if v == "" {                
    ​                continue
    ​            }
    ​            v = strings.TrimSpace(v)
    ​            BackendAddr = append(BackendAddr, v)
    ​        }
    ​        ssl := ctx.Req.Form.Get("ssl")
    ​        debugLevel := ctx.Req.Form.Get("debuglevel")        
    ​        log.Println(siteName, BackendAddr, ssl, debugLevel)
    ​        models.NewSite(siteName, Port, BackendAddr, ssl, debugLevel)
    ​        ctx.Redirect("/admin/site/list/")
    ​    } else {
    ​        ctx.Redirect("/login/")
    ​    }
    }
model的初始化  
大家一定注意到了，虽然用了mysql，但是没有要求在使用前手工去导入建表或插入初始化值的sql脚本，这是为神马呢？
因为我们使用了ORM，ORM会帮我们自动完成上面所说的操作，如下代码所示：
// 因篇幅太长，省略部分代码，详细代码请查看github
    var (
    ​    Engine *xorm.Engine
    ​    err    error
    )
    func init() {    
    ​    // 从conf/app.ini获取数据库的配置信息
    ​    sec := setting.Cfg.Section("database")    
    ​    // 连接数据库
    ​    Engine, err = xorm.NewEngine("mysql", fmt.Sprintf("%s:%s@tcp(%s)/%s?charset=utf8",
    ​        sec.Key("USER").String(),
    ​        sec.Key("PASSWD").String(),
    ​        sec.Key("HOST").String(),
    ​        sec.Key("NAME").String()))    
    ​    if err != nil {        
    ​        log.Panicf("Faild to connect to database, err:%v", err)
    ​    }    
    ​    // 新建site、user和rules表
    ​    Engine.Sync2(new(Site))
    ​    Engine.Sync2(new(User))
    ​    Engine.Sync2(new(Rules))    
    ​    // 如果user表为空，则新建一个默认账户，
    ​    ret, err := Engine.IsTableEmpty(new(User))  
    ​    if err == nil && ret {        
    ​        log.Printf("create new user:%v, password:%v\n", "admin", "PI:EMAIL")
    ​        NewUser("admin", "PI:EMAIL")
    ​    }    
    ​    // 如果规则为空，则插入默认的初始化规则
    ​    ret, err = Engine.IsTableEmpty(new(Rules))    
    ​        if err == nil && ret {        
    ​        log.Println("Insert default waf rules")
    ​        Engine.Exec(DefaultRules)
    ​    }
    }
配置路由  
当ORM、路由处理相关的代码写完后就可以在程序入口中配置路由了，将URL与路由处理的控制器对应起来，如下所示：
// 因篇幅太长，省略部分代码，详细代码请查看github
    m.Group("/admin", func() {      
    ​     m.Get("/index/", routers.Admin)        
    ​     m.Group("/site/", func() {            
    ​     m.Get("", routers.Admin)            
    ​     m.Get("/list/", routers.Admin)            
    ​     m.Get("/new/", routers.NewSite)            
    ​     m.Post("/new/", csrf.Validate, routers.DoNewSite)          
    ​     m.Get("/edit/:id", routers.EditSite)            
    ​     m.Post("/edit/:id", csrf.Validate, routers.DoEditSite)            
    ​     m.Get("/del/:id", routers.DelSite)            
    ​     m.Get("/sync/", routers.SyncSite)            
    ​     m.Get("/sync/:id", routers.SyncSiteById)          
    ​     m.Get("/json/", routers.SiteJSON)
    ​     })
    ​    })    
    ​      m.Group("/api", func() {        
    ​      m.Get("/site/sync/", routers.SyncSiteApi)        
    ​      m.Get("/rule/sync/", routers.SyncRuleApi)
    ​    })    
    ​      log.Printf("xsec waf admin %s", setting.AppVer)    
    ​      log.Printf("Run mode %s", strings.Title(macaron.Env))    
    ​      log.Printf("Server is running on %s", fmt.Sprintf("0.0.0.0:%v", setting.HTTPPort))    
    ​      log.Println(http.ListenAndServe(fmt.Sprintf("0.0.0.0:%v", setting.HTTPPort), m))
注：本文为“小米安全中心”原创，转载请联系“小米安全中心”。
参考资料  