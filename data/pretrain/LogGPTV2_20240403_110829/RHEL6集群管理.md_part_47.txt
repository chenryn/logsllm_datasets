要完整理解本附录中的信息，您需要对资源代理和集群配置文件
`/etc/cluster/cluster.conf`{.filename} 有深入的了解。有关
`cluster.conf`{.filename} 元素和属性的完整列表，请参考
`/usr/share/cluster/cluster.rng`{.filename} 中的集群方案，注释的方案位于
`/usr/share/doc/cman-X.Y.ZZ/cluster_conf.html`{.filename}（例如：`/usr/share/doc/cman-3.0.12/cluster_conf.html`{.filename}）。
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ap-status-check-CA.html#resource-status-check-CA}D.1. 修改资源状态检查间隔 {.title}
:::
::: para
`rgmanager`{.command} 检查各个资源的状态，而不是整个服务。rgmanager 每
10 秒钟扫描一次资源树，检查那些超过其"状态检查"间隔的资源。
:::
::: para
每个资源代理都指定状态检查周期间的时间。每个资源都使用这些超时值，除非在
`cluster.conf`{.filename} 中使用特殊 ``{.command} 标签明确说明。
:::
::: para
``{.command}
:::
::: para
这个标签是 `cluster.conf`{.filename}
文件中资源本身衍生的文件系统。例如：如果您有一个文件系统，您想要覆盖其状态检查间隔，您就可以在
`cluster.conf`{.filename} 文件中按如下方法指定文件系统：
:::
``` screen
```
::: para
有些代理提供多个检查"深度"。例如：常规文件系统状态检查（深度
0）检查该文件系统是否挂载到正确的位置。更集中的检查（深度
10）则会查看您是否可以从文件系统中读取文件。状态检查深度 20
会查看您是否可以写入该文件系统。在给出的示例中将 `depth`{.literal}
设定为 `*`{.literal}，表示这些值可用于所有深度。结果是每 10 秒钟对
`test`{.literal} 文件系统执行一次由资源代理提供的最高定义的深度（在此是
20）检查 。
:::
:::
::: section
::: titlepage
# [⁠]{#ap-status-check-CA.html#resource-timeout-CA}D.2. 强制资源超时 {.title}
:::
::: para
启动、停止或故障切换资源时没有超时。有些资源的启动或停止时间不确定。遗憾的是无法停止（包括超时）会造成服务不可操作（失败的状态）。如果需要，您可以在各个服务的每个资源中打开超时强制，方法是在
`cluster.conf`{.filename} 文件中添加 `__enforce_timeouts="1"`{.literal}
参考。
:::
::: para
以下示例演示了使用 `__enforce_timeouts`{.literal} 属性为
`netfs`{.literal}
资源设置的集群服务。使用这个设置，如果在恢复过程中，超过 30 秒还没有卸载
NFS 文件系统，则操作会超时，该服务进入失败状态。
:::
``` screen
```
:::
:::
[]{#ap-cli-tools-CA.html}
::: appendix
::: titlepage
# [⁠]{#ap-cli-tools-CA.html#ap-cli-tools-CA}附录 E. 命令行工具小结 {.title}
:::
[]{#ap-cli-tools-CA.html#idm140713305046800 .indexterm}
::: para
[表 E.1
"命令行工具小结"](#ap-cli-tools-CA.html#tb-commandline-tools-config-CA){.xref}
总结了配置和管理高可用性附加组件的首选命令行工具。有关命令和变量的详情请参考每个命令行工具的
man page。
:::
::: table
[⁠]{#ap-cli-tools-CA.html#tb-commandline-tools-config-CA}
**表 E.1. 命令行工具小结**
::: table-contents
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  命令行工具                        使用                   目的
  --------------------------------- ---------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  `ccs_config_dump`{.command} ---   集群基础设施           `ccs_config_dump`{.command} 生成正在运行配置的 XML
  集群配置转储工具                                         输出。运行的配置有时与文件中保存的配置有所不同，因为有些子系统在配置中保存或者设定一些默认信息。那些值通常不出现在配置的磁盘版本中，但在运行时需要它们方可使集群正常工作。
  `ccs_config_validate`{.command}   集群基础设施           `ccs_config_validate`{.command} 根据方案 `cluster.rng`{.filename}（在每个节点中位于 `/usr/share/cluster/cluster.rng`{.filename}）验证
  --- 集群配置验证工具                                     `cluster.conf`{.filename}。有关这个工具的详情请参考 ccs_config_validate(8) man page。
  `clustat`{.command} ---           高可用性服务管理组件   `clustat`{.command} 命令显示集群的状态。它显示成员信息、仲裁查看以及所有配置的用户服务状态。有关这个工具的详情请参考 clustat(8) man page。
  集群状态工具                                             
  `clusvcadm`{.command} ---         高可用性服务管理组件   `clusvcadm`{.command} 命令允许您在集群中启用、禁用、重新定位以及重启高可用性服务。有关这个工具的详情请参考 clusvcadm(8) man page。
  集群用户服务管理工具                                     
  `cman_tool`{.command} ---         集群基础设施           `cman_tool`{.command} 是管理 CMAN 集群管理器的程序。它可提供加入或者离开集群、杀死节点或者更改集群中节点预期仲裁投票的功能。有关这个工具的详情请参考 cman_tool(8) man page。
  集群管理工具                                             
  `fence_tool`{.command} --- Fence  集群基础设施           `fence_tool`{.command} 是用来加入和离开 fence 域的程序。有关这个工具的详情请参考 fence_tool(8) man page。
  工具                                                     
  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
:::
:::
:::
[]{#ap-ha-halvm-CA.html}
::: appendix
::: titlepage
# [⁠]{#ap-ha-halvm-CA.html#ap-ha-halvm-CA}附录 F. 高可用性 LVM（HA-LVM） {.title}
:::
[]{#ap-ha-halvm-CA.html#idm140713296483088
.indexterm}[]{#ap-ha-halvm-CA.html#idm140713314825728 .indexterm}
::: para
红帽高可用性附加组件在故障切换配置中支持高可用性 LVM
卷（HA-LVM）。这与集群的逻辑卷管理器（CLVM）启用的 active/active
配置不同，它是 LVM 的一组集群扩展，可让计算机集群管理共享存储。
:::
::: para
应根据所部署应用程序或服务的需要使用 CLVM 或 HA-LVM。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    如果应用程序是在全局可识别，并已调整为每次同时在多台机器中运行，那就应该使用
    CLVM。特别是如果您集群中一个以上的节点要求访问在活动节点间共享的存储，您就必须使用
    CLVM。CLVM
    允许用户在共享存储中配置逻辑卷，方法是配置逻辑卷时锁定对物理存储的访问，并使用集群的锁定服务管理共享存储。有关
    CLVM 及 LVM 常规配置详情请参考 *《管理逻辑卷管理器》*。
    :::
-   ::: para
    如果应用程序以最佳的
    active/passive（故障切换）配置运行，那么一次只有一个访问该存储的单一节点是活动的，您就可以使用高可用逻辑卷管理代理（HA-LVM）。
    :::
:::
::: para
大多数应用程序在 active/passive
配置中运行更佳，因为它们不是设计或者优化以便与其他事务同时运行。如果逻辑卷是镜像的，那么选择运行一个在集群的逻辑卷中无法识别的应用程序可能导致性能下降。这是因为集群沟通会消耗这些事务中的逻辑卷。在集群中可识别的应用程序必须可以让获得的性能比集群文件系统和集群可识别逻辑卷损失的性能多。有些应用程序和工作负载更容易达到此目的。确定集群要求是什么，以及在
active/active 集群优化时的额外努力是否有益才是在两种 LVM
变体间进行选择的依据。大多数用户将会从 HA-LVM 中获得最佳 HA 效果。
:::
::: para
HA-LVM 和 CLVM 相似，它们都可以防止 LVM
元数据及其逻辑卷崩溃；反之，如果允许多台机器执行互相可覆盖的更改，则会发生数据和逻辑卷崩溃。HA-LVM
强制限制只能单独激活逻辑卷，即一次只能在一台机器中激活。这就是说只能使用存储驱动器的本地（非集群）部署。避免这种形式的集群合作可提高性能。CLVM
没有这些强制限制，用户可以随意在集群的所有机器中激活逻辑卷。这样就强制使用集群可识别存储驱动器，即允许将集群可识别文件系统和应用程序放在顶层。
:::
::: para
可将 HA-LVM 设置为使用两种方法之一达到其强制独家逻辑卷激活的目的。
:::
::: {.itemizedlist xmlns:d="http://docbook.org/ns/docbook"}
-   ::: para
    首选方法是使用
    CLVM，但它只能激活唯一的逻辑卷。好处是可轻松设置并有效防止管理失误（比如删除正在使用的逻辑卷）。要使用
    CLVM，则必须运行高可用性附加组件软件和弹性存储附加组件软件，包括
    `clvmd`{.command}。
    :::
    ::: para
    使用这个方法配置 HA-LVM 的步骤请参考 [第 F.1 节 "使用 CLVM 配置
    HA-LVM
    故障切换（首选）"](#ap-ha-halvm-CA.html#s1-halvm-clvm-CA){.xref}。
    :::
-   ::: para
    第二种方法使用本地机器锁定和 LVM"标签"。这个方法的优点是不需要任何
    LVM
    集群软件包，但-设置步骤比较复杂，且无法防止管理员意外从不活动的集群中删除逻辑卷。使用这个方法配置
    HA-LVM 的步骤请参考 [第 F.2 节 "使用标签配置 HA-LVM
    故障切换"](#ap-ha-halvm-CA.html#s1-halvm-tagging-CA){.xref}。
    :::
:::
::: section
::: titlepage
# [⁠]{#ap-ha-halvm-CA.html#s1-halvm-clvm-CA}F.1. 使用 CLVM 配置 HA-LVM 故障切换（首选） {.title}
:::
::: para
要设置 HA-LVM 故障切换（使用首选 CLVM 变体），请执行以下步骤：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    确定将您的系统配置为支持 CLVM，要求如下：
    :::
    ::: itemizedlist
    -   ::: para
        如果 CLVM
        逻辑卷不是镜像的，请安装高可用性附加组件和弹性存储附加组件，包括
        `cmirror`{.literal} 软件包。
        :::
    -   ::: para
        请将 `/etc/lvm/lvm.conf`{.filename} 文件 global 部分的
        `locking_type`{.literal} 参数设定为 '3'。
        :::
    -   ::: para
        必须运行高可用性附加组件和弹性存储附加组件，包括
        `cmirror`{.command} 软件包。在 CLVM 镜像中，还必须启动
        `cmirrord`{.command} 服务。
        :::
    :::
2.  ::: para
    使用标准 LVM 和文件系统命令生成逻辑卷和文件系统，如以下示例所示：
    :::
    ``` screen
    # pvcreate /dev/sd[cde]1
    # vgcreate -cy shared_vg /dev/sd[cde]1
    # lvcreate -L 10G -n ha_lv shared_vg
    # mkfs.ext4 /dev/shared_vg/ha_lv
    # lvchange -an shared_vg/ha_lv
    ```
    ::: para
    有关生成 LVM 逻辑卷的详情请参考*《管理逻辑卷过滤器》*。
    :::
3.  ::: para
    编辑 `/etc/cluster/cluster.conf`{.filename}
    文件，使其包含新生成的逻辑卷作为您服务之一的资源。另外，您可以使用
    [**Conga**]{.application} 或者 `ccs`{.command} 命令为集群配置 LVM
    和文件系统资源。以下是 `/etc/cluster/cluster.conf`{.filename}
    文件中将 CLVM 逻辑卷配置为集群资源的资源管理器部分示例：
    :::
    ``` screen
    ```
:::
:::
::: section
::: titlepage
# [⁠]{#ap-ha-halvm-CA.html#s1-halvm-tagging-CA}F.2. 使用标签配置 HA-LVM 故障切换 {.title}
:::
::: para
要使用标签在 `/etc/lvm/lvm.conf`{.filename} 文件中设置 HA-LVM
故障切换，请执行以下步骤：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    确定将 `/etc/lvm/lvm.conf`{.filename} 文件 global 部分的
    `locking_type`{.literal} 参数设定为 '1'：
    :::
2.  ::: para
    使用标准 LVM 和文件系统命令生成逻辑卷和文件系统，如以下示例所示：
    :::
    ``` screen
    # pvcreate /dev/sd[cde]1
    # vgcreate shared_vg /dev/sd[cde]1
    # lvcreate -L 10G -n ha_lv shared_vg
    # mkfs.ext4 /dev/shared_vg/ha_lv
    ```
    ::: para
    有关生成 LVM 逻辑卷的详情请参考*《管理逻辑卷过滤器》*。
    :::
3.  ::: para
    编辑 `/etc/cluster/cluster.conf`{.filename}
    文件，使其包含新生成的逻辑卷作为您服务之一的资源。另外，您可以使用
    [**Conga**]{.application} 或者 `ccs`{.command} 命令为集群配置 LVM
    和文件系统资源。以下是 `/etc/cluster/cluster.conf`{.filename}
    文件中将 CLVM 逻辑卷配置为集群资源的资源管理器部分示例：
    :::
    ``` screen