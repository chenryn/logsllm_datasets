errcode = anon_inode_getfd(
"[mali_vinstr_desc]",
&vinstr_client_fops,
vcli,
O_RDONLY | O_CLOEXEC);
…
fd = errcode;
…
list_add(&vcli->node, &vctx->clients);
…
}
Android 10 devices of some 
vendors are affected !
UAF caused by race condition
27
static int kbase_kcpu_fence_signal_prepare(…)
{
struct sync_file *sync_file;
int ret = 0;
int fd;
…
sync_file = sync_file_create(fence_out);
…
fd = get_unused_fd_flags(O_CLOEXEC);
…
fd_install(fd, sync_file->file);
…
if (copy_to_user(u64_to_user_ptr(fence_info->fence), &fence,
sizeof(fence))) {
ret = -EFAULT;
goto fd_flags_fail;
}
return 0;
fd_flags_fail:
fput(sync_file->file);
…
return ret;
}
CVE-2022-28350—— A 0day in ARM Mali GPU driver
Affect:
Valhall GPU Kernel Driver: All versions from r29p0 – r36p0
Android 12 devices of some 
vendors are affected !
UAF caused by race condition
28
Exploit of  CVE-2022-28350
 My new exploit method
 A known exploit method
The method won’t work on 
Android because of SELinux 
•
No need for KASLR、SMEP/SMAP 、 KCFI bypass
•
Read/write privileged files from unprivileged processes
(Details are put in the supplement part of the slides)
Given by Mathias Krause from grsecurity for a similar vulnerability CVE-2022-22942: 
•
Bypass SELinux and work on the affected Android 12 devices
•
Write privileged files from untrusted apps
UAF caused by race condition
29
Find the issues
• fd_install(fd, file)
• anon_inode_getfd()
• dma_buf_fd()
• sync_fence_install()
• ion_share_dma_buf_fd()
• …
Check if the file or related objects are referenced after these functions:
They all wrap fd_install(fd, file)
30
Fixes
•
Don’t reference the file or related objects after step2 of fd export operation in kernel until return to user space
static long do_sys_openat2(int dfd, const char __user *filename,
struct open_how *how)
{
struct open_flags op;
int fd = build_open_flags(how, &op);
…
fd = get_unused_fd_flags(how->flags);
if (fd >= 0) {
struct file *f = do_filp_open(dfd, tmp, &op);
if (IS_ERR(f)) {
…
} else {
fsnotify_open(f);
fd_install(fd, f);
}
}
putname(tmp);
return fd;
}
return to user space directly
√:
31
Fixes
•
Reference the file object or related objects with lock protection, and share the lock in file_release of fd:
int fd_export_func(…) {
mutex_lock(g_lock);
fd_install(file, fd);
Reference file or related objects;
mutex_unlock(g_lock);
return fd;
}
int file_release(…) {
…
mutex_lock(g_lock);
…
mutex_unlock(g_lock);
…
}
close(fd)
√: (From vendor S)
void hpa_trace_add_task(void)
{
struct hpa_trace_task *task;
…
mutex_lock(&hpa_trace_lock);
…
task = kzalloc(sizeof(*task), GFP_KERNEL);
…
fd = get_unused_fd_flags(O_RDONLY | O_CLOEXEC);
…
task->file = anon_inode_getfile(name, &hpa_trace_task_fops, task, O_RDWR);
…
fd_install(fd, task->file);
list_add_tail(&task->node, &hpa_task_list);
mutex_unlock(&hpa_trace_lock);
…
}
static int hpa_trace_task_release(struct inode *inode, struct file *file)
{
struct hpa_trace_task *task = file->private_data;
…
mutex_lock(&hpa_trace_lock);
list_del(&task->node);
mutex_unlock(&hpa_trace_lock);
kfree(task);
return 0;
}
32
User Space
Kernel space
file
fd
Step1:get an unused fd
Step2:fd_array[fd]=file
Step3:pass the fd to user space
Step1:file=fd_array[fd]
Step2:acquire file reference
import operation
file
fd
export operation
Diving into issues in the fd import operation
33
 Scenario of fd import operation
 Fd type confusion caused by race condition
 Find the issues
 Fixes
Diving into issues in the fd import operation
34
Scenario of fd import operation
User Space
Kernel space
Operations on file 
or related objects
Step1:file=fd_array[fd]
Step2:acquire file reference
file
fd
Operations on fd:
read(fd, …);
write(fd, …);
ioctl(fd, …);
close(fd);
…
Thread A
import operation
35
ssize_t ksys_write(unsigned int fd, const char __user *buf, size_t count)
{
struct fd f = fdget_pos(fd);
…
if (f.file) {
…
ret = vfs_write(f.file, buf, count, ppos);
…
fdput_pos(f);
}
…
}
SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf,
size_t, count)
{
return ksys_write(fd, buf, count);
}
Step1:file=fd_array[fd]
Step2:acquire file reference
Example:
Scenario of fd import operation
36
But this regular fd import operation is executed sequentially, which is still far from the race conditions we want to see:  
Thread A
Thread B
User Space
Kernel space
Operations on 
file object
Operations on fd
Race condition 1
Thread A
Thread B
User Space
Kernel space
Operations on fd
Operations on fd
Race condition 2
Scenario of fd import operation
Searching for all kinds of scenarios of fd import operation in kernel…
37
Fd type confusion caused by race condition
Special case1: CVE-2022-21772
TEEC_Result TEEC_RegisterSharedMemory(struct TEEC_Context *ctx,
struct TEEC_SharedMemory *shm)
{
int fd;
size_t s;
struct dma_buf *dma_buf;
struct tee_shm *tee_shm;
…
fd = teec_shm_alloc(ctx->fd, s, &shm->id);
…
dma_buf = dma_buf_get(fd);
close(fd);
…
tee_shm = dma_buf->priv;
…
shm->shadow_buffer = tee_shm->kaddr;
…
return TEEC_SUCCESS;
}
import the dma-buf fd to get the dma_buf
reference the “dma_buf->priv” as tee_shm
void *priv;
dma_buf
file
void *private_data;
tee_shm
create a specific dma-buf fd
38
Thread A
Thread B
User Space
Kernel space
Operations on fd
Operations on fd
Race condition 2
create a specific dma-buf fd
Import the dma-buf fd to get the dma_buf
reference the “dma_buf->priv” as tee_shm
Thread A
Kernel space
Special case1: CVE-2022-21772
Fd type confusion caused by race condition
39
Normally this is 
safe in sequential 
execution. But what 
if a race condition 
gets involved?
create a specific dma-buf fd:
fd = teec_shm_alloc(ctx->fd, s, &shm->id);
User Space
Kernel space
Import the dma-buf fd to get the dma_buf：
dma_buf = dma_buf_get(fd);
reference the “dma_buf->priv” as tee_shm：
tee_shm = dma_buf->priv;
fd type confusion happens!
Thread A
Thread B
Recreate the fd:
close(fd);
fd = create_a_diff_dma_buf_fd();
A kernel object
?
Special case1: CVE-2022-21772
void *priv;
dma_buf
file
void *private_data;
Fd type confusion caused by race condition
40
Special case2:
struct sync_file*internal_sync_fence_fdget(int fd)
{
struct file *file;
struct dma_fence *fence = sync_file_get_fence(fd);
/* Verify whether the fd is a valid sync file. */
if (unlikely(!fence))
return NULL;
dma_fence_put(fence);
file = fget(fd);
return file->private_data;
}
Import fd to get dma_fence object
Import fd again to get file object
Check the dma_fence object
struct dma_fence *fence;
sync_file
file
void *private_data;
dma_fence
Return “file->private_data” as sync_file for later use
Fd type confusion caused by race condition
41
Thread A
Thread B
User Space
Kernel space
Operations on fd
Operations on fd
Race condition 2
Thread A
Kernel space
Import fd to get dma_fence object
Import fd again to get file object
Check the dma_fence object
Return “file->private_data” as sync_file
for later use
Fd type confusion caused by race condition
Normally this is 
safe in sequential 
execution. But what 
if a race condition 
gets involved?
Special case2:
42
User Space
Kernel space
Thread A
Thread B
Recreate the fd:
close(fd);
fd = open();
Import fd to get dma_fence object:
struct dma_fence *fence = sync_file_get_fence(fd);
Import fd to get file object:
file = fget(fd);
Check the dma_fence object
Return “file->private_data” as sync_file for later use
A kernel object
?
fd type confusion happens!
file
void *private_data;
Fd type confusion caused by race condition
Special case2:
43
• Case1: fd time-of-create time-of-import
• Case2: fd double import
create a specific fd
import the fd to get a specific file
reference the “file->private_data” or other 
file related private objects
import the fd to get a specific file
Kernel space
User space
recreate the fd
Kernel space
User space
recreate the fd
process the file for purpose A
process the file for purpose B
import the fd to get a specific file
fd type confusion 
might happen!
Fd type confusion caused by race condition
44
The difficulty of fuzzing the fd type confusion caused by race condition:
The buggy code is lurking in kernel, the user process can barely notice it! 
The race window can be tiny! 
Maybe we can detect 
such issues at runtime 
by some detecting code?
 Are there more issues like these?
Find the issues
There are still two questions that need to be answered:
 How to find these issues more effectively?
CVE-2022-21772
…
fd = teec_shm_alloc(ctx->fd, s, &shm->id);
…
dma_buf = dma_buf_get(fd);
close(fd);
…
45
enter syscall &
import 
FD_UNUSED
FD_CREATED
FD_FIRST_USE
FD_IN_USER
fd_install(file,fd)
put_unused_fd()
syscall 
return
syscall 
return
close(fd)
Regular lifecycle of an fd:
Kernel space
User space
fd export 
operation
Find the issues
46
Detecting the potential issues:
enter syscall &
import 
FD_UNUSED
FD_CREATED
FD_FIRST_USE
FD_IN_USER
fd_install(file,fd)
put_unused_fd()
syscall 
return
syscall 
return
close(fd)
FD_SECOND_USE
import
import
fd Time-of-create 
Time-of-import
import
fd double-import
syscall 
return
Kernel space
User space
Source code: 
https://github.com/yanglingxi1993/evil_fd_detect
Find the issues
47
Bug hunting result
type
From
CVE-id/issue
Found by
fd time-of-create time-of-import
Vendor M
CVE-2022-21772
code auditing
Issue#1
detect tool
Issue#2
detect tool
Vendor S
Issue#1
code auditing
Vendor Q
Issue#1
detect tool
fd double import
Vendor M
CVE-2022-20082
code auditing
Issue#1
detect tool
Issue#2
detect tool
Vendor Q
Issue#1
code auditing
Issue#2
code auditing
Issue#3
code auditing
48
• Case1: fd time-of-create time-of-import
• Case2: fd double import
create a specific fd
import the fd to get a specific file
reference the “file->private_data” or other 
file related private objects
import the fd to get a specific file
Kernel space
User space
recreate the fd
Kernel space
User space
recreate the fd
process the file for purpose A
process the file for purpose B
import the fd to get a specific file
Fixes
create a specific file
reference the “file->private_data” or 
other file related private objects
process the file for purpose A
process the file for purpose B
import the fd to get a specific file
fix
fix
49
fd export operation
Thread A
Thread B
User Space
Kernel space
Operations on 
file object
Operations on fd
Race condition 1
UAF caused by 
race condition
Are there any other 
similar resources:
Predictable;
Export operation;
IDR
handle id
session id
object id
memory entry id
……
used as
Self-implementing 
index
Conclusion & Future work
+
50
fd import operation
fd type confusion caused 
by race condition
Are there any other 
similar resources:
import operation;
IDR
Race condition 2
Operations on fd
Thread A
Thread B
User Space