fght0 (..)
SwordBehavior
useeapon（实现用宝剑
作舞)
setWeapon (WeaponBehavior w)
this.weapon = w;
你现在的位置》
25
---
## Page 62
餐厅谈话
在附近餐厅中无意间听到·····
Alice
我要一份涂了奶酪及果医的白
Flo
面包、加了香草冰淇淋的巧克力
汽水、夹了培根的火烤起司三明治、筛鱼色
拉吐司、香蕴船（有冰淇淋和香蕉片）、一
给我一份C.J.怀特，一
杯加了奶精和两块糖的咖·…哦·…
个黑与白，一份杰克·班尼，
还有一个烧烤汉堡！
一份Radio，一份主厨船，一个普
通咖啡，还有给我烧一个！
这两人点的餐有何不同？其实没有差异，都是一份单，只是Alice讲话的长度多了一倍，而
且快餐店的厨师已经感到不耐烦了。
什么是Flo有的，而Alice没有？答案是，Flo和厨师之间有“共享的词汇”，Alice却不懂这
些词汇。共享的词汇不仅方便顾客点餐，也让厨师不用记太多事，毕竞这些餐点模式都已
经在他的脑海中了呀！
设计模式让你和其他开发人员之间有共享的词汇，一且懂得这些词汇，和其他开发人员之
间沟通就很容易，也会促使那些不懂的程序员想开始学习设计模式。设计模式也可以把你
的思考架构的层次提高到模式层面，而不是仅停留在琐碎的对象上。
26
第1章
---
## Page 63
设计模式入门
在办公室隔间中无意间听到····
我建立了这个广播类。
它能够追踪所有的倾听对
象，而且任何时候只要有新资料进来，
就会通知每个倾听者。最棒的是，倾听者
可以随时加入此广播系统，甚至可以随时退
出。这样的设计方式相当动态和松耦
合。
BRAIN
XPOWER
Rick
除了面向对象设计和在餐厅点餐之外，你
还能够想到有哪些例子需要共享词汇？（暗
示：想一想汽车修理工、木工、大厨、航
管）利用这些行话进行沟通的质量如何？
你能否想到OO设计的什么方面，能够和模
式名称匹配的？“策略模式”这个名字是否
传神？
没错，如
Riek，你只要
累你用模式名称和大
说使围了“观察者
家沟通，其他开岩人员能够马上且清
模式”我们就懂了。
慧地知递你在说些什么。但是也请不
要从此染上“模式病”………以后连写一
个“HelloWorld”都能够址上模式，那就代
表你已经病了………
你现在的位置》
27
---
## Page 64
共享词汇
共享模式词汇的威力
你使用模式和他人沟通时，其实“不只是”和他人
共享“行话”而已。
共享的模式词汇“威力强大”。当你使用模式名称和其
他并发人员或者开发团队沟通时，你们之间交流的不只
是模式名称，而是一整套模式背后所象征的质量、特
为。”这句话也就是告诉我们，鸭子
性、约束。
的行为被封装进入一组类中.可以被
轻易地扩充与改查。如果需要，甚至
在运行时也可以改变行为。
模式能够让你用更少的词汇做更充分的沟通。当你用模
式描述的时候，其他开发人员便很容易地知道你对设计
的想法。
想想看，有多少次的设计会议中，
将说话的方式保持在模式层次，可让你待在“设计圈
你们一不小心就进入了琐碑的实现
细节的讨论上。
子”久一点。使用模式谈论软件系统，可以让你保持在
设计层次，不会被压低到对象与类这种琐辞的事情上
面。
当你的团队开始利用模式分享设计
想法与经验，你等于是建立了一个
共享词汇可帮你的开发团队快速充电。对于设计模式有
横式使用老的社区。
深人了解的团队，彼此之间对于设计的看法不容易产生
误解。
考虑在你的组织内发起一个设计模
共享词汇能帮助初级开发人员迅速成长。初级开发人员
式研讨会，说不定在学习的过程中，
向有经验的开发人员看齐。当高级开发人员使用设计模
就开始得到回报了
式，初级开发人员也会跟着学。把你的组织建立成一个
模式使用者的社区。
28第1章
---
## Page 65
设计模式入门
我如何使用设计模式？
我们全都使用别人设计好的库与框架。我们讨论库与框架、利用它们的API编译成我们的程序、享受
运用别人的代码所带来的优点。看看JavaAPI及它所带来的功能：网络、GUI、IO等。库与框架长久
以来，一直扮演着软件开发过程的重要角色，我们从中挑选所要的组件，把它们放进合适的地方。
但是库与框架无法帮助我们将应用组织成容易了解、容易维护、具有弹性的架构，所以需要设
计模式。
设计模式不会直接进入你的代码中，而是先进人你的“大脑”中。一旦你先在脑海中装入了许多关
于模式的知识，就能够开始在新设计中采用它们，并当你的旧代码变得如同搅和成一团没有弹性的
意大利面一样时，可用它们重做旧代码。
你的大脑
模
OBSERVER
式
你的代码，利用设计
模式之后，现在已经
焕然一新。
问：
问：
问：
如果设计模式这么棒，
库和框架不也是设计模
那么，没有所谓设计模
为何没有人建立相关的库呢？那样
式吗？
式的库？
我们就不必自己动手了。
答：
库和框架提供了我们某
合：
没错，但是稍后你会看
些特定的实现、让我们的代码可以轻
到设计模式类目。你可以在应用中
高。设计模式告诉我们如何组织类
易地引用，但是这并不算是设计模
利用这些设计模式。
和对象以解决某种问题。而且采纳
式。有些时候，库和柜架本身会用到
这些设计并使它们适合我们特定的
设计模式，这样很好，因为一旦你了
应用，是我们责无旁货的事。
解了设计模式，会更容易了解这些
API是围绕着设计模式构造的。
你现在的位置
29
---
## Page 66
为何要用设计模式？
模式只不过是利用
00设计原则
这是常见的错误观念，
炸，事实比这微妙得多，
你还有许多东西要学
怀疑的开发人员
友善的模式大师
开发人员：好吧！但是不都只是好的面向对象设计吗？我是说，我懂得运用封装、抽象、
继承、多态，我真的还有必要考虑设计模式吗？运用0O，一切不是都很直接吗？这不正是
我过去上了一堆O0课程的原因吗？我认为设计模式只对那些不懂好的O0设计的人有用。
大师：这是面向对象开发常有的谬误：以为知道OO基础概念，就能自动设计出弹性的、可
复用的、可维护的系统。
开发人员：不是这样吗？
大师：不是！要构造有这些特征的OO系统，事实证明只有通过不断地艰苦实践，才能成
功。
开发人员：我想我开始了解了，这些构造OO系统的隐含经验于是被收集整理出来
大师：是的，被整理成了一群“设计模式”。
开发人员：那么，如果知道了这些模式，我就可以减少许多体力劳动，直接采用可行的模
式吗？
大师：对，在一定程度上可以这么说。不过要记住，设计是一门艺术，总是有许多可取舍
的地方。但是如果你能采用这些经过深思熟虑，且经受过时间考验的设计模式，你就领先
别人了。
30
第1章
---
## Page 67
设计模式入门
记住，知道抽象、继承、
多态这些概念，并不会马上
让你变成好的面向对象设计者。设计
大师关心的是建立弹性的设计，可以维护，
可以应付变化。
开发人员：如果我找不到模式，怎么办？
大师：有一些面向对象原则，适用于所有的模式。当
你无法找到适当的模式解决问题时，采用这些原则可
以帮助你。
开发人员：原则？你是说除了抽象、封装…之外，
还有其他的？
大师：是的，建立可维护的OO系统，要诀就在于随时
想到系统以后可能需要的变化以及应付变化的原则。
PDG
你现在的位置
31
---
## Page 68
你的设计工具箱
设计工具箱内的工具
你几乎快要读完第1章了！你已经在你的设计工具箱内
要点
放进了几样工具，在我们进入第2章之前，先将这些工
具一一列出。
知道00基础，并不足以让
你设计出良好的OO系统。
良好的OO设计必须具备可
我们假设你知道00基础包括
复用、可扩充、可维护三
00基础
了多态的用法、继承就像按契
个特性。
抽象
约进行设计、封装是如何运
作的。如果你觉得脑袋有一点
模式可以让我们建造出具
封装
生锈了，快快拿出你的《Head
有良好0O设计质量的系
多态
FinstJava》复习.然后再把这
统。
继承
一章读一遍。
模式被认为是历经验证的
00设计经验。
00原则
模式不是代码，而是针对
设计问题的通用解决方
我们金在后续的内客中更详细
封装变化
案。你可把它们应用到特
地看看这些原则，还会再多加
定的应用中。
多用组合，少用继承
一些原则到清单上。
■模式不是被发明，而是被
针对接口编程，不针对实现
发现。
编程
大多数的模式和原则，都
阅读本书时，时
着眼于软件变化的主题。
时刻刻要思考着：
模式如何仰赖基
大多数的模式都允许系统
础与原则。
局部改变独立于其他部
00模式
分。
我们常把系统中会变化的
策略模式—定义算法族，分别封装
部分抽出来封装。
起来，让它们之间可以互相替换，此模
模式让开发人员之间有共
式让算法的变化独立于使用算法的客户。
享的语言，能够最大化沟
通的价值。
学了一个，还有更多！
32
第1章
---
## Page 69
设计模式入门
让标准填字游戏，动动你的右脑。
这是一个标准的纵横填字游戏，所有的词都来自本章。
10
15
16
17
18
横排提示：
竖排提示：
2.Grilled cheese with bacon
1. High level libraries
4. Duck demo was located where
3. Learn from the other guy’s
1.
what varies
5.Java IO,Networking.Sound
9.Most patterns follow from OO
6.Program to this,not an implementation
14. Pattern that fixed the simulator
8. Favor over inheritance
15. Patterns give us a shared
10. Duck that can’t quack
16. Design patterns
11. Rick was thrilled with this pattern
17.Development constant
12. Patterns go into your
18.Patterns
_ in many applications
13.Rubberducks make a
你现在的位置
33
---
## Page 70
设计谜题解答
设计谜题解答
Character（角色）是抽象类，由具体的角色来继承。具体的角色包括：
国王（King）、皇后（Queen）、骑士（Knight）、妖怪（Troll）。而
Weapon（武器）是接口，由具体的武器来继承。所有实际的角色和武器
都是具体类。
任何角色如果想换武器，可以调用setWeapon()方法，此方法定义在
Character超类中。在打斗（flight）过程中，会调用到目前武器的
useWeaponO方法，攻击其他角色。
抽象
Character
WeaponBehavior weapon;
fight():
this.
一个角色“有一个”
WeaponBehaviot
4
King
Knight
(ght( (...
fight() ( -..]
Queen
Trol
fght() (...)
gh) (...)
>
WeaponBehavior
useWeapon[]:
D
SwordBehavior
BowAndArrowBehavior
useWeaon（实现用宝剑
0（0实现用号第射击）
挥舞）
KnifeBehavior
AxeBehavior
apon（#实现用匕首
0（#实现用头
刺杀}
注意，“任何”对象都可以实现
WeaponBehavior接口.例如文件
夹、牙膏或突变的鲈鱼。
34
第1章
---
## Page 71
设计模式入门
答案
利用继承来提供Duck的行为，这会导致下列哪些缺点？（多选）
A.代码在多个子类中重复。
E鸭子不能同时又飞又叫。
C.我们不能让鸭子跳舞。
F改变会牵一发动全身，造成其他鸭子