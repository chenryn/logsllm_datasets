## 重新发现PostgreSQL之美 - 26 这个推荐算法价值1亿
### 作者  
digoal  
### 日期  
2021-06-15   
### 标签  
PostgreSQL , 推荐方案    
----  
## 背景  
视频回放: https://www.bilibili.com/video/BV1do4y1y7cq/  
场景:  
短视频、电商、社交等基于标签的动态推荐.   
挑战:  
标签多, 按标签权重比例每个标签取N条, 与数据库的交互次数多.  
已读列表巨大, 过滤已读采用传统not in资源消耗大.  
效率低下.  
PG解决方案:   
效率提升1000倍, 可能价值1个亿.   
技术点: 数组、自定义type、partial index降低无效过滤、hash subplan优化not in、array agg, jsonb    
## 例子  
以短视频推荐为例.  
### PG解决方案  
1、视频资源池  
1\.1、全国资源池  
```  
create unlogged table pool_global (   -- 全国资源池  
  vid int8,  -- 视频ID  
  tag int,   -- 标签  
  score float4   -- 标签权重  
);  
```  
写入数据: 1000万条记录: 100万个视频, 每个视频10个标签, 标签取值空间1-100.  
```  
insert into pool_global select generate_series(1,1000000), random()*100, random()*10 from generate_series(1,10);  
```  
1\.2、省份资源池  
```  
create unlogged table pool_province (   -- 省份资源池  
  pid int,    -- 省份ID  
  vid int8,   -- 视频ID  
  tag int,    -- 标签  
  score float4   -- 标签权重  
);  
```  
写入数据: 1000万条记录: 100万个视频, 每个视频10个标签, 标签取值空间1-100.  
pid 取值空间 1-36  
```  
insert into pool_province select ceil(random()*36), generate_series(1000001,2000000), random()*100, random()*10 from generate_series(1,10);  
```  
1\.3、城市资源池  
```  
create unlogged table pool_city (     -- 城市资源池  
  cid int,    -- 城市ID  
  vid int8,   -- 视频ID  
  tag int,    -- 标签  
  score float4   -- 标签权重  
);  
```  
写入数据: 1000万条记录: 100万个视频, 每个视频10个标签, 标签取值空间1-100.  
cid 取值空间 1-10000  
```  
insert into pool_city select ceil(random()*10000), generate_series(2000001,3000000), random()*100, random()*10 from generate_series(1,10);  
```  
1\.4、partial index(分区索引), 避免过滤列表巨大带来巨大的无效扫描, 之前已经讲过    
[《重新发现PostgreSQL之美 - 23 彭祖的长寿秘诀》](../202106/20210613_02.md)    
```  
do language plpgsql $$  
declare  
begin  
  for i in 0..49 loop  
    execute format('create index idx_pool_global_%s on pool_global (tag,score desc) include (vid) where abs(mod(hashint8(vid),50))=%s', i,i);  
    execute format('create index idx_pool_province_%s on pool_province (pid,tag,score desc) include (vid) where abs(mod(hashint8(vid),50))=%s', i,i);  
    execute format('create index idx_pool_city_%s on pool_city (cid,tag,score desc) include (vid) where abs(mod(hashint8(vid),50))=%s', i,i);  
  end loop;  
end;  
$$;  
```  
2、用户标签类型  
```  
create type tag_score as (  
  tag int,       -- 标签  
  score float4,  -- 标签权重  
  limits int     -- 用这个标签获取多少条VID  
);  
```  
3、用户表   
```  
create unlogged table users (  
  uid int8 primary key,    -- 用户ID   
  pid int,  -- 省份ID  
  cid int,  -- 城市ID  
  tag_scores1 tag_score[],    -- 标签、权重、对应标签获取多少条. 也可以使用jsonb存储  
  tag_scores2 tag_score[],    -- 标签、权重、对应标签获取多少条 limit = 0的放这个字段. 业务更新tag_scores根据两个字段的结果来计算. 主要是减少PG计算量.   
  readlist jsonb     -- 已读VID, 和分区索引的分区数匹配, 用jsonb数组表示. jsonb[0]表示abs(mod(hashint8(vid),50))=0的vid数组    
);   
```  
写入数据: 1000万个用户, 每个用户20个标签(标签取值空间1-100), limit大于0的标签5个(和为100). vid已读列表5万条(1-300万取值空间).   
pid 取值空间1-36  
cid 取值空间1-10000  
```  
insert into users   
select generate_series(1,10000000), ceil(random()*36), ceil(random()*10000),   
array(  
  select row(ceil(random()*100), random()*10, 40)::tag_score   
  union all  
  select row(ceil(random()*100), random()*10, 20)::tag_score   
  union all  
  select row(ceil(random()*100), random()*10, 15)::tag_score   
  union all  
  select row(ceil(random()*100), random()*10, 15)::tag_score   
  union all  
  select row(ceil(random()*100), random()*10, 10)::tag_score   
),  
array (  
  select row(ceil(random()*100), random()*10, 0)::tag_score from generate_series(1,15)  
),   
(
select jsonb_agg(x) as readlist from
  (  
    select array (select x from 
                     (select ceil(random()*3000000)::int8 x from generate_series(1,50000)) t 
                   where abs(mod(hashint8(x),50)) = i
                 ) x 
    from generate_series(0,49) i
  ) t
) ;  
```  
4、如何更新用户的标签权重, 对应标签获取多少条?  
原则: 可以在程序中计算并且不会增加程序和数据库交互的, 放在程序内计算.  
取出UID, 在应用程序中计算的到tag_scores结果, 存入数据库 users表.   
5、获取推荐视频vids SQL:   
```  
select   
  (  
    select array_agg(vid) from   
    (  
      select vid from pool_global t1   
      where t1.tag=t.tag   
      and t1.vid not in (select jsonb_array_elements_text( readlist[0] )::int8 from users where uid=1)  
      and abs(mod(hashint8(vid),50)) = 0  
      order by t1.score desc   
      limit ceil(t.limits*0.5)  
    ) x   -- 全国池 50%   
  ) as global_pool,     
  (  
    select array_agg(vid) from   
    (  
      select vid from pool_province t1   
      where t1.tag=t.tag   
      and t1.pid=(select pid from users where uid=1)  
      and t1.vid not in (select jsonb_array_elements_text( readlist[0] )::int8 from users where uid=1)  
      and abs(mod(hashint8(vid),50)) = 0  
      order by t1.score desc   
      limit ceil(t.limits*0.3)  
    ) x   -- 省份池 30%   
  ) as province_pool,    
  (  
    select array_agg(vid) from   
    (  
      select vid from pool_city t1   
      where t1.tag=t.tag   
      and t1.cid=(select cid from users where uid=1)  
      and t1.vid not in (select jsonb_array_elements_text( readlist[0] )::int8 from users where uid=1)  
      and abs(mod(hashint8(vid),50)) = 0  
      order by t1.score desc   
      limit ceil(t.limits*0.2)  
    ) x    -- 城市池 20%   
  ) as city_pool        
from   
(  