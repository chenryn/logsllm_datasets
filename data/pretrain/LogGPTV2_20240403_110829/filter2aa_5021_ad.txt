dir=LTR>Header של בקשת ה-HTTP.
הקוד:
```python
import requests, re
ip_table = {}
with open("proxy.txt") as f:
    for line in f:
        line = line.rstrip()
        ip, country = line.split("\t")
        ip_table[country.lower()] = ip.split(":")[0]
s = requests.Session()
country_regex = re.compile("In order to get the flag you must to serve from ([^(]+) \(")
url = 'http://challenges.owaspil.ctf.today:8094/'
headers = None
text = ""
while "OWASP" not in text:
    r = s.get(url, headers = headers)
    print (r.text)
    text = r.text
    match = country_regex.search(r.text)
    if match:
        country = match.group(1).lower()
        headers = {'X-Forwarded-For': ip_table[country]}
    else:
        print("No match for {}!".format(r.text))
        break
```
&nbsp;
הדגל:
OWASP-IL{Wh0RuNTh3World?}
&nbsp;
אתגר 7 – LazyAdmin (רמת קושי בינונית, 350 נקודות)
&nbsp;
הוראות האתגר:
Do you think that you can login with administrator
privileges in order to retrieve the flag? :)
user:password
URL: http://challenges.owaspil.ctf.today:8084/
פתרון:
ובכן, התשובה היא
שלא... או במילים אחרות, את האתגר הזה לא הצלחתי לפתור. 
בכל זאת, אתן כיוון
מסוים שנראה לי הגיוני.
האתר עצמו מכיל טופס
כניסה:
כניסה עם שם המשתמש
והסיסמא שסופקו מביאה אותנו אל הדף הבא:
Only administrators can see the flag!
כאמור, לא מצאתי
חולשה באתר, למרות שהכיוון שהגעתי אליו נראה לי הגיוני.
ה-Headers שחוזרים מהשרת עבור
כל בקשה כוללים את המידע הבא:
באופן כללי, זה נחשב
בתור רעיון רע, כי אפשר לקחת את הפרטים הללו ולחפש חולשות ידועות. ולמעשה, אם
מחפשים את הגרסה הזו של AspNet, מגיעים לחולשה אחת בולטת של Authentication Bypass!
על רגל אחת, הרעיון
הוא שאם שולחים שם משתמש עם תו Null באמצע, למשל “Admin\0AAA”, עקב
החולשה יכול להווצר מצב שבו המערכת טועה ומאמתת את המשתמש בתור שם המשתמש שלפני ה-Null, כלומר Admin.
למרבה הצער, לא
הצלחתי לנצל את החולשה הזו (ולמעשה, בדף החולשה מתוארים כמה תנאים נוספים שיש
לעמוד בהם, כמו למשל היכולת להירשם לאתר עם שם משתמש בשליטת התוקף). או שאולי פשוט
לא הצלחתי לשלוח תו Null כמו שצריך.
יהיה מעניין לראות זה היה הכיוון הנכון.
&nbsp;
אתגר 8 - Image converter (רמת קושי
בינונית, 350 נקודות)
&nbsp;
הוראות האתגר:
My magical tool can help you to convert pictures to PNG!
URL: http://challenges.owaspil.ctf.today:8090/
&nbsp;
פתרון:
כניסה לאתר מציגה את
הממשק הבא להמרת תמונות:
הוראות האתגר והממשק
מקפידים לדבר על &quot;קסם&quot;, רמז ברור ל- ImageMagick(כלי יחסית סטנדרטי
להמרת ועריכת תמונות).
לכן, התחלתי לחפש
בגוגל חולשות של כלי הזה, והגעתי מיד למשפחת חולשות בשם ImageTragick.
החולשות המתוארות
בדף ההוא מאפשרות בין השאר להריץ קוד ולקרוא קבצים, בדיוק מה שאנחנו צריכים.
מתוך הדף:
The most dangerous part is ImageMagick
supports several formats like svg, mvg (thanks to Stewie for his research of
this file format and idea of the local file read vulnerability in ImageMagick,
see below), maybe some others - which allow to include external files from any
supported protocol including delegates.
למזלנו, אחד
הפורמטים שהאתר שלנו תומך בו הוא MVG<span