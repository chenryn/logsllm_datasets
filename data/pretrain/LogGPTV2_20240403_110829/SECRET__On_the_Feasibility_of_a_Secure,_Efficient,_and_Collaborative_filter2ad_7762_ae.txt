### Overhead of ShareJS

Even for smaller split size values, the network utilization remains almost identical. To compare SECRET with Google Docs, we observed the communication between our browser and Google during the editing of a freshly generated document. Google Docs synchronizes content via HTTP POST requests, transmitting a parameter named `bundles` that contains Operational Transformation (OT) information. For our measurement, we extracted only this HTTP parameter and excluded all others.

Compared to Google Docs, SECRET requires less communication to synchronize unencrypted document content. The primary reason for this difference is the meta information that Google Docs transmits within each OT synchronization request, such as session management information. Some of this information is redundant, as it is sent both as a GET and POST parameter.

### Encrypted Network Overhead

Figure 5d illustrates the network overhead of editing an encrypted block in SECRET. With encryption enabled, almost every keystroke causes a re-encryption of an existing Encrypted Data (ED) element, which is then sent over the network. This leads to a substantial increase in network traffic.

The traffic utilization of SECRET is always higher than that of Google Docs, regardless of the chosen split size. This is an expected result due to the enabled encryption. It is worth noting that SECRET exhibits a linear relationship between the inserted text and network traffic, similar to unencrypted Google Docs.

### Bandwidth Requirements

Despite the overhead, the system remains usable. At a typing speed of 200 key strokes per minute, entering a 1024-byte document takes 307 seconds. With encryption and a split size of 128 bytes, the total payload traffic sent by the client is approximately 119 Kbytes. However, the actual transmitted traffic is larger due to URL encoding and HTTP headers added to the messages.

We measured the required traffic bandwidth of SECRET using the network analysis tool Wireshark. Using the settings provided, our tool requires a bandwidth of 14 kbit/s (see Figure 7).

If other users type at the same speed, each will generate incoming traffic at a similar rate. Considering that even very slow mobile connections provide a connection speed of 32 Kbit/s or more, it would require several users typing simultaneously to exceed such a connection.

In summary, a split size value of 128 bytes appears to be a good trade-off between storage overhead and network overhead. With this setting, SECRET requires a storage overhead of factor 1.92 and a network utilization that does not exceed even very slow connections. SECRET is the first to consider network bandwidth in addition to storage overhead in its evaluation.

### Conclusion and Outlook

We presented SECRET, the first fully collaborative web editor on encrypted data with obliviousness using a document-based approach. Our extensive evaluation reveals that, with the right choice of parameters, SECRET achieves three times less storage overhead compared to existing solutions. SECRET is efficient with network bandwidth and could be applied to mobile low-bandwidth applications.

Although SECRET is fully functional, there are still open research questions, such as whether it is possible to integrate SECRET's concept into full-fledged office documents like Microsoft Office, LibreOffice, or OpenOffice, possibly by integrating it into their online collaboration services. To support the research community, we have published SECRET and its novel structure-preserving encryption concept using OTs as open-source software.

### Acknowledgments

This research is a result of work in the SyncEnc and VERTRAG projects, funded by the German Federal Ministry of Education and Research (BMBF, FKZ: 16KIS0412K and 13N13097), as well as the FutureTrust project funded by the European Commission (grant 700542-Future-Trust-H2020-DS-2015-1).

### References

[References listed as in the original text]

### Appendix A: Integrity Protection

Ensuring the integrity of a whole document is straightforward: one can append a Message Authentication Code (e.g., an HMAC [21]) or use an authenticated encryption scheme like AES-GCM. This has been done before, for example, by Clear et al. [8]. However, if parts of a document are intentionally left unprotected, it is crucial to identify all parts that must not be left unprotected to maintain integrity for the sensitive parts. The remainder of this section describes a concept for providing integrity that we are currently working on.

#### Definition of Integrity

We assume that encrypted parts are leaf nodes in the tree, which holds for ED elements, and that the leaf nodes are individually integrity-protected by AES-GCM. This ensures that even a single-bit change in the ciphertext would be detected. However, if we assume an adversary that can insert, delete, or reorder parts of a document, we would not detect modifications to the document structure (e.g., swapping ED elements without changing any bits within these elements). Therefore, we need to categorize nodes in the document tree.

**Definition 1.** A critical node is a node in a document tree that has at least one critical node as a child. All ED elements are critical nodes.

The intuition behind this definition is as follows: if there is any encrypted data in a document tree, then all nodes on the path from the document root to that ED element are critical. If there are at least two ED elements in a document tree, the critical nodes form a subtree of the document tree.

We define the integrity of a partially encrypted document tree as follows:

**Definition 2.** The integrity of a partially encrypted document tree is maintained if no attacker can efficiently modify the structure of the subtree formed by the critical nodes or the content of ED elements in it without being detected.

Informally, this definition prevents all unauthorized modifications of the document structure except for parts that consist entirely of unencrypted branches and leaf nodes. Note that this definition only covers the tree structure; the content of a critical node may be modified without violating the integrity.

#### Technical Concept

For our integrity concept, we use the fact that every ED element in the document tree has a randomly generated unique ID in the form of an XML attribute. These IDs are used as Additional Authenticated Data (AAD) in AES-GCM upon encryption of the content of that element. Every other critical node is also provided with an ID attribute. The value of that attribute is computed as the hash value of the ID attributes of all critical child nodes. This way, we build a Merkle-Tree [25] using the IDs to protect the structure. At the root node, we introduce another XML attribute named `IntegrityTag`. Its value is either an HMAC or a digital signature of the rootâ€™s ID, depending on whether public verification of the integrity is required.

#### Security Consideration

If a collision-resistant hash function is used, the security properties of Merkle-Trees guarantee that every modification in the structure of critical nodes results in a different ID of at least the root node. Given that the `IntegrityTag` was built using a secure construction (i.e., an attacker cannot forge a valid value), every unauthorized modification of the structure can be detected.

There is a hypothetical modification an unauthorized attacker can perform that remains undetectable for some users of the system: an attacker could replace the ciphertext of an ED element with a different ciphertext (possibly generated under the same key), but keeping the original ID. This modification is detected once a user tries to decrypt that ED element since different AAD were involved in the original encryption. However, all users who do not have access to the key for that ED element cannot detect this attack. They can only check the ED elements they have keys for and compute and compare the `IntegrityTag`, which succeeds since the attacker did not change any IDs or other ED elements.

Nevertheless, this issue is negligible since the modification is instantly detected by users who have the corresponding keys. Users who do not have the corresponding keys are not concerned with that particular ED element anyway, as they cannot decrypt it.

### Additional Figures

- **Figure 6:** Screenshot of our proof-of-concept demo.
- **Figure 7:** Screenshot from Wireshark measuring the required bandwidth for SECRET at 200 key strokes per minute with a split size of 128 bytes.
- **Figure 8:** SECRET evaluation results.

(a) Storage requirements for unencrypted documents.
(b) Storage requirements for encrypted documents.
(c) Network overhead in an unencrypted document.
(d) Network overhead in the encrypted document.

[Figures and charts as in the original text]