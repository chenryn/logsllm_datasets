Similar to the distribution of OSS usage per app, the distribution
of OSS under GPL and AGPL licenses is long-tailed, with only a
few OSS being used in many apps; whereas a large number of OSS
see only one or two violating apps. In terms of GPL/AGPL-licensed
OSS usage in apps, the maximum we saw is 1,325 iTextPDF for
Java OSS and 34,055 MuPDF for C/C++ OSS, both are PDF related
libraries. To understand why developers are using these libraries,
we collect popular PDF libraries that support both rendering and
editing over the Internet and found that most of them were either
GPL/AGPL licensed or not free. In particular, the top two PDF
libraries listed in [84], RadaeePDF SDK and PDFNet SDK both paid
PDF rendering/editing engines. Therefore, our findings suggest that
app developers use these iTextPDF and MuPDF due to lack of free
alternatives.
OSS developer responses. We emailed a few corporate develop-
ers of the OSS victims (MuPDF, PJSIP, FFmpeg, VideoLAN, and iIext),
each with a list of apps that potentially violate their copyrights.
The reason behind it is to filter out their legitimate customers be-
cause many of these companies use dual-license model for their
software, under which the open-sourced variant (e.g., GPL license)
requires any derivative work to be open-sourced, and, therefore, a
12
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2180present six C/C++ OSS and four Java OSS with most vulnerabilities
in Table 8. Of those, LibPNG, OpenSSL and MoPub are also tracked by
ASIP. As shown in Table 8, the number of apps that use vulnerable
versions of LibPNG and OkHttp amounts to more than 40K and 39K,
respectively. To understand their impact on users, we further break
down these apps by the number of downloads. Our findings indicate
that 20% of these apps have received over 10K downloads.
From Language column in Table 8, we can see that there are
more vulnerable C/C++ OSS uses than Java, despite the fact that
Java OSS are popular as in Table 3. This is because most Java OSS
are not tagged with Server CVE ids.
Despite their measures towards security of apps, we found more
than 40K, 27K, and 2K vulnerable uses of OSS that are tracked by
ASIP, namely LibPNG, OpenSSL and MoPub, respectively.
# ASIP Misses further shows number of apps that were only
detected by OSSPolice as vulnerable, but were not tracked by ASIP.
These numbers were obtained based on ASIP claim that Google
Play Store would ban future app updates if the developers do not
fix vulnerable OSS usage in their apps after the deadline, which
was set as Sep 17, 2016 for LibPNG and Jul 11, 2016 for OpenSSL and
MoPub. We assume that Google Play Store enforced the claimed
policy and simply report the number of apps (downloaded in Dec,
2016) that were still flagged as vulnerable by OSSPolice and were
updated after their respective ASIP deadlines. # ASIP Misses in
Table 8 shows that ASIP missed at least 1,244 LibPNG and 4,919
OpenSSL cases compared to OSSPolice. For MoPub, no flagged apps
were updated after the specified deadline. For further validation,
we contacted Google by sending them a comprehensive list of
vulnerable apps, including the ones missed by ASIP. Unfortunately,
by the time of this writing we did not receive a response from them
on it.
separate commercial license is needed for commercial use without
open-sourcing. Developers of a derivative work can choose to open
source their code under the same license or pay these companies
to avoid source code disclosure. For instance, Dropbox and HP are
licensees of MuPDF.
We received responses from these companies. PJSIP replied that
they have Non-Disclosure Agreement (NDA) with their customers
and cannot reveal their information. VideoLAN and FFmpeg both
showed interest in the list, but FFmpeg developers mentioned that
they lack resources to enforce license compliance. MuPDF requested
our list and returned a filtered list of app developers that use their
software, but are not their customers. In addition, MuPDF mentioned
that even identifying legitimate customers is not straightforward
because they sub-license MuPDF to Adobe and all Adobe licensees
are also legally permitted to use MuPDF without open-sourcing.
iText, however, did not reply to our email.
Awareness of OSS licensing issues. From the results reported
by Validator, it is difficult to draw conclusions whether developers
are violating OSS licensing terms, nor can we tell whether they are
infringing intentionally or inadvertently because developers may
display link to source code within their app or on random websites.
We notice that GPL/AGPL requires that if one distributes derivative
works of GPL/AGPL-licensed software, then they must provide
the source code upon request. Therefore, for further insights, we
randomly emailed 10 developers of the apps we found to have
violated GPL/AGPL licensing terms and requested access to their
source code. Unfortunately, at the time of writing, none of them
provided their code. One of these developer, however, had claimed
in the description on Google Play Store that their app is licensed
under GPL: 3
Weird Voice is based on CSipSimple and is licensed under
GNU GPL v3. More information in the app.
Nonetheless, when we emailed them for access to their code, the
response received redirected us to a GitHub page of another app
that they claimed to be “99%” similar and refused to release the
sources of their own app. From these cases, we can see that people
are not aware of the specific requirements of the GPL/AGPL license,
and currently there is no appropriate way to enforce GPL/AGPL
compliance.
6.4 Vulnerable OSS Versions
In order to report vulnerable OSS version usage results, we retain
a subset of the detected results with at least one unique feature
matched, which is shown to have reasonable precision in version
pinpointing in §5.2. Since Google has launched an App Security
Improvement program (ASIP) [41] to help developers improve the
security of their apps by checking vulnerable code usage, we classify
detected OSS versions as vulnerable based on ASIP description, if
the OSS is also listed by ASIP (e.g., LibPNG). For an OSS not listed by
ASIP, we classify its version as vulnerable if it is tagged with at least
one Severe CVE (defined as CVSS score greater than 4.0 in §4). We
3We found that app Voice changer calling (package com.weirdvoice) reuses PJSIP
sources, which are licensed under GPL
Figure 5: Selected 4 popular vulnerable libraries and longitudinal
study of their usage by app developers.
Awareness of Vulnerable OSS uses. To understand how quickly
and how frequently app developers adopt the patched OSS ver-
sions, and what makes them update their apps with these patched
OSS versions, we conduct a longitudinal study of OSS usage by
app developers. We selected top 10K apps from Google Play Store,
downloaded their past versions. A total of 300K app versions were
analyzed with OSSPolice to report all cases of vulnerable OSS us-
age. To get insight into the attitude of app developers towards vul-
nerable OSS usage, in particular, whether ASIP policy enforcement
13
0250500750MoPub0200400600800OpenSSL080016002400OkHttp2013-05-122013-11-282014-06-162015-01-022015-07-212016-02-062016-08-24Date080160240FFmpeg#Vuln.Usage#PatchedUsageASIPDeadlineASIPNotiﬁcationSession J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2181Owner
PNG Dev Group
Square
Libexpat
LibTIFF
OpenSSL
FreeType
FFmpeg
MoPub
Apache
Apache
Name
LibPNG
OkHttp
Expat
LibTIFF
OpenSSL
FreeType
FFmpeg
MoPub-SDK
Commons-Compress
Commons-Collections
Language
C/C++
Java
C/C++
C
C/C++
C/C++
C/C++
Java
Java
Java
# Vuln. Apps % Vuln. Latest Ver. Vuln. Ver.
40,902
39,019
35,155
27,117
27,103
21,762
8,737
2,594
827
619
1.0-1.0.65, 1.2-1.2.55,
1.3-1.4.18, 1.5-1.5.25
2.0-2.7.4 or 3.0-3.1.2
1.95.1-2.1.1
3.4-4.0.3, 4.0.6
1.0.1-1.0.1q, 1.0.2-1.0.2e
<2.5.4
2.0-2.8.4
<4.4.0
1.0-1.4
3.0-3.2.1, 4.0
1.6.28
3.6.0
2.2.0
4.0.7
1.0.2k
2.7.1
3.3
4.11.0
1.14
4.1
52
39
99
80
54
34
57
16
48
33
1,244
# Severe CVE # ASIP Misses
35, ASIP [44]
1
9
90
160, ASIP [43]
76
218
0, ASIP [42]
1
1
4,919
0
# Severe CVE refers to CVEs that have more than 4.0 Common Vulnerability Scoring System (CVSS) score.
# ASIP Misses refers to number of vulnerable apps updated after App Security Improvement Program’s [41] deadline.
Table 8: Top 6 C/C++ and 4 Java vulnerable OSS.
can make them update their apps regularly, we selected two OSS
(OpenSSL and MoPub) that were reported by ASIP and two (FFmpeg
and OkHttp) that were only reported by OSSPolice as vulnerable
and carried out a comparison. The results are shown in Figure 5. For
FFmpeg and OkHttp, both patched and vulnerable usage increased
over time. In comparison, usage of vulnerable versions of OpenSSL
and MoPub kept increasing until ASIP notification date (i.e., when
the app developers received emails from ASIP, apprising them of
vulnerable OSS usage in their apps), but quickly drops after that.
Such a pattern indicates that app developers slowly adopt patched
OSS versions and even use old and vulnerable OSS in updated app
versions or newly developed apps. Nevertheless, our findings sug-
gest that ASIP can help developers identify security issues with
their apps and force them to regularly update their apps to use
patched OSS versions.
7 DISCUSSION
In this section, we discuss the limitations of OSSPolice, potential
solutions, and future research directions.
License Compliance. OSSPolice focuses only on the technical
aspects of license compliance engineering, such as OSS reuse detec-
tion, checking for a license copy in app installation package, and
validating hosted source code. Therefore, only statistical evidence
indicating potential license violation is reported to further help the
app developers quickly identify true violations, but no concrete
proof or legal conclusions are derived from the collected evidence.
The reasons for this design choice are manyfold. First, several OSS
are available under a dual license. Therefore, an app containing
the OSS could be a case of legitimate use. Second, OSSPolice may
fail to correctly detect source weblinks for an app because the
current design only inspects app description and corresponding
developer website for weblinks pointing to popular source code
hosting services, such as GitHub and Bitbucket, as an indicator of
open-sourcing. Furthermore, app developers may also choose to
generate source code links dynamically in the app or simply host
outside the checked open-source links.
App Obfuscation and Optimization. OSSPolice is designed to
be resilient against simple and common app obfuscation techniques,
such as identifier renaming in Java classes. However, advanced
obfuscation may alter or even destroy features in app binaries.
For example, string encryption will render all string constants in
a binary ineffective for similarity comparison. Nevertheless, such
techniques are generally used by malware writers to evade detection
and are not common for benign apps because of their additional
runtime overhead (e.g., encryption/decryption). However, should
this become a problem, advanced obfuscation-resilient similarity
detection mechanisms, such as data-dependence [25] or program-
dependence [26] graph comparison can be used at the cost of higher
consumption of system resources (CPU, memory, etc.) and search
time.
To optimize their apps for size and faster loading, app developers
may further remove unused OSS code or hide functions in native
libraries, thereby reducing the size of the symbol table. OSSPolice
may either fail to detect OSS in such libraries or report inaccurate
results because of lack of enough syntactical features. While we
found only 11.6% cases of such libraries (§3.3), we believe the system
accuracy can be improved by augmenting with semantic features,
such as control flow [28, 30] at the cost of increased detection time.
Version Pinpointing. It is possible that OSS source code might
have very minimal changes across two releases. Given no unique
features can be used to distinguish these versions, OSSPolice will
return a sorted list of matched versions based on NormScore (§3.4.4).
We believe that OSSPolice has achieved reasonable coverage be-
cause 83% of C/C++ and 41% of Java OSS versions can be uniquely
identified using current features in OSSPolice. However, should
this becomes an issue, OSSPolice can be plugged in to use fine-
grained function-level features (e.g., intra-procedural graph) to
further distinguish these versions.
More Programming Languages. OSSPolice currently supports
only Java and C/C++-based OSS repos and app binaries because
of their popularity. However, we are also aware that mobile apps
nowadays use a more diverse set of programming languages. For
example, apps built by PhoneGap [40] and Corona[24] tend to rely
on many JavaScript and Lua libraries. We leave the support for
these programming languages for future work.
8 CONCLUSION
In this paper, we presented OSSPolice, the first large-scale tool
for mobile app developers to identify potential open-source license
violations and 1-day security risks in their apps. OSSPolice taps
into the structured and modularized layout of OSS sources and
introduces hierarchical indexing scheme to achieve high efficiency
and accuracy in comparing app binaries with hundreds of thousands
of OSS sources (billions of lines of code). We applied OSSPolice
to analyze 1.6M free Google Play Store apps and found that over
14
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA218240K apps potentially violated GPL/AGPL licensing terms, and over
100K apps use known vulnerable versions of OSS. OSSPolice can
also be deployed by app stores, such as Google Play Store to check
and notify app developers of potential licensing issues and security
risks in their apps and enforce policies. Source code of OSSPolice
is available on GitHub (https://github.com/lingfennan/osspolice).
9 ACKNOWLEDGMENT
We thank the anonymous reviewers for their helpful feedback. This
research was supported, in part, by the NSF under award CNS-