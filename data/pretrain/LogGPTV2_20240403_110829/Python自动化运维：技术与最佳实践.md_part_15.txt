@task
run_task()
with cd("/tmp/install"):
fabric.context managers import *
put_task()
if result.failed and not confirm("put file failed, Continue[Y/N]?"):
with settings(warn_only=True):
withcd("1nmp0.9/"):
Linux公社www.linuxidc.com
#上传、安装组合
run("./centos.sh")
#执行远程命令，安装1nmp环境
#使用with继续继承/tmp/install目录位置状态
上传安装包
---
## Page 125
roles("webservers)”修饰符绑定到对应的任务函数，实现不同角色主机的部署差异，详细源
Web、DB、PROXY、CACHE等，本示例通过env.roledefs定义不同主机角色，再使用“@
7.4.2
能相互独立，可分开运行，如：
业务上线之前最关键的一项任务便是环境部署，往往一个业务涉及多种应用环境，比如
运行 fab-f simple4.py go 就可以实现文件打包、上传、校验全程自动化。
:()ob rp
本示例通过定义三个功能任务函数，分别实现文件的打包、上传、校验功能，且三个功
@task
当然，我们也可以组合在一起运行，再添加一个任务函数 go，代码如下：
fab -f simple4.py check_task
fab-f simple4.pytar_task
def check_task():
@task
def put_task():
@task
def tar_task():
@runs_once
Fab
示例2：部署LNMP业务服务环境
check_task()
put_task()
tar_task()
-f
else:
if 1md5==rmd5:
with settings(warn_only=True):
with cd("/data/logs"):
run("mkdir -p /data/logs")
simple4.py put_task
print"ERROR"
print"oK"
[0(.)tds(anx=deoz6xesssoe/s6ot/eep/ wnssp)eo=spu
#本地local命令需要配置capture=True才能捕获返回值
if result.failed and not confirm("put file failed,Continue[Y/N]?"):
with settings(warn_only=True):
Linux公社www.linuxidc.com
#上传文件任务函数
#本地打包任务函数，只限执行一次
#校验文件任务函数
#对比本地及远程文件md5信息
#文件校验
#文件打包
第7章
#put（上传）出现异常时继续执行，非终止
系统批量运维管理器Fabric详解
#出现异常时，确认用户是否继续，（Y继续）
99
---
## Page 126
Python 脚本就可以完成不同业务环境的定制。
码如下：
100第二部分高级篇
本示例通过角色来区别不同业务服务环境，
def deploy():
release-6-8.noarch.rpm")
def
@roles ('webservers',
defdbtask():
@roles('dbservers')
defwebtask():
@roles('webservers')
env.passwords ={
env.roledefs =
env.user='root'
from fabric.api import*
#!/usr/bin/env python
【/home/test/fabric/simple5.py 】
from fabric.colors import
execute(dbtask)
execute(publictask)
publictask():
with settings(warn_only=True):
with settings(warn_only=True):
print yellow("Install nginx php php-fpm...")
execute(webtask)
PI:EMAIL:22':
PI:EMAIL:22':
PI:EMAIL:22':
'dbservers':['192.168.1.23]
'webservers':['192.168.1.21',
run("yum -y install ntp")
run("rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-
run("chkconfig --levels 235mysqld on")
run("yum -y install mysql
run("chkconfig--levels235php-fpmon")
run("yum -y install php-fpm php-mysql php-mbstring php-xml php-mcrypt php-gd")
run("yum -yinstall nginx")
Linux公社
#部署nginxphp php-fpm等环境
#定义业务角色分组
#部署公共类环境，
'dbservers')
#dbtask任务函数引用·dbservers'角色修饰符
#webtask任务函数引用'webservers，角色修饰符
'KSdu43598'.
KSh458j4f',
SJk348ygd',
www.linuxidc.com
mysql-server")
#publictask任务函数同时引用两个角色修饰符
，如epel、ntp等
'192.168.1.22'1,
，分别部署不同的程序包。我们只需要一个
---
## Page 127
下的软链接实现。详细源码如下：
滚、版本管理等功能，本示例实现了这一整套流程功能，其中版本切换与回滚使用了Linux
7.4.3
"/"+env.deploy_version
def tar_source():
@runs_once
def input_versionid():
env.deploy_version=time.strftime("%Y%m%d")+"v2"
env.deploy_current_dir = 'current'
env.deploy_release_dir ='releases*
env.deploy_project_root
env.project_dev_source='/data/dev/Lwebadmin/'
env.hosts=['192.168.1.21',*192.168.1.22']
#!/usr/bin/env python
【/home/test/fabric/simple6.py】
def
@task
@task
env.user='root'
程序生产环境的发布是业务上线最后一个环节，要求具备源码打包、发布、切换、回
@runs once
importtime
from fabric.contrib.consoleimportconfirm
fromfabric.context_managersimport*
from fabric.colors import
from fabric.apiimport*
put_package():
示例3：生产环境代码包发布管理
env.deploy_full_path=env.deploy_project_root + env.deploy_release_dir +
with settings(warn_only=True):
with lcd(env.project_dev_source):
print yellow("Creating source package...")
return prompt("please input project rollback version ID:",default="")
local("tar -czf %s.tar.gz ."%(env.project_tar_source + env.project_pack_name))
Linux公社 www.linuxidc.com
run("mkdir %s"%(env.deploy_version))
#打包本地项目主目录，并将压缩包存储到本地压缩包目录
#上传任务函数
'/data/www/Lwebadmin/
#获得用户输入的版本号，以便做版本回滚操作
#项目压缩包名前缀，文件名为release.tar.gz
第7章
#对外服务的当前版本软链接
#项目发布目录，
系统批量运维管理器Fabric详解101
#开发机项目压缩包存储目录
#版本号
，位于主目录下面
#开发机项目主目录
#项目生产环境主目录
#创建版本目录
---
## Page 128
所示。
还是回滚，都可以通过切换current的软链来实现，非常灵活。该功能的流程图如图7-5
102第二部分高级篇
本示例实现了一个通用性很强的代码发布管理功能，支持快速部署与回滚，无论发布
defgo（):
@task
deploy_current_dir))
"/"+versionid
def rollback():
@task
"/"+env.deploy_version
@task
env.deploy_full_path)
make_symlink()
print green("rollback success!")
run("in -s %s %s"%(env.deploy_full_path, env.deploy_project_root + env.
run("rm -f %s"%env.deploy_project_root+env.deploy_current_dir)
env.deploy_full_path=env.deploy_project_root + env.deploy_release_dir +
print yellow("rollback project version")
print green("make symlink success!")
with settings(warn_only=True):
env.deploy_full_path=env.deploy_project_root + env.deploy_release_dir +
print yellow("update current symlink")
print green("Put & untar package success!")
with.cd(env.deploy_full_path):
if result.failed and no("put file failed, Continue[Y/N]?"):
put_package()
with settings(warn_only=True):
versionid=input_versionid()
abort("Project version ID error,abort!")
run("rm-rf%s.tar.gz"%
run("tar
Linux公社 www.linuxidc.com
#自动化程序版本发布入口函数
-zxvf %s.tar.gz"%（env.project_pack_name))
#版本回滚任务函数
#为当前版本目录做软链接
#删除软链接，重新创建并指定软链源目录，新版本生效
(env.project_pack_name))
#获得用户输入的回滚版本号
#删除软链接，重新创建并指定软链源目录，新版本生效
#成功解压后删除压缩包
#上传项目压缩包至此目录
---
## Page 129
理员的版本发布、回滚操作用户无感知，同时也规范了我们业务上线的流程。
将站点根目录指向“/data/www/Lwebadmin/current”，由于使用Linux软链接做切换，管
root/data/www/Lwebadmin/current;
server_namedomain.com
在生产环境中Nginx的配置如下：
7.2节fab 常用参数说明参考http://docs.fabfile.org/en/1.8/官网文档。
统管
Linux公社 www.linuxidc.com
图7-5
tar.gz
生产环境代码包发布管理流程图
发布
第7章
系统批量运维管理器Fabric详解103
system
20140309v1
SS
14ys30902
生产环境集群
201403
30
---
## Page 130
功能特点：
持Linux i386与x86系统。Yorserver安装、配置都非常简单，其最新版本为1.0.1，具备以下
8.1.1功能特点
8.1Yorserver 介绍
实现原理与方法。
WebServer—Yorserver，从一个WebServer所具备的基本功能出发，详细介绍每个功能点的
化点可以提高业务服务质量，用户体验也会得到不少提升。本章节介绍作者开发的一轻量级
否合理，HTTP缓存配置是否与业务特性相符，HTTP压缩比应该如何选择等，通过这些优
尤为重要，可以帮助运维人员对Web服务优化、运营提供理论指导。比如前端元素结构是
等。作为该行业的从业人员，尤其是一名运维人员，深人了解HTTP协议的工作原理及机制
Yorserver是基于Python实现的轻量级WebServer，具备一般WebServer的基本功能，支
inptey8
口支持错误页及默认页配置；
口支持多进程或线程开启；
口支持Expires及max-age功能；
口支持自定义response服务及协议版本；
当今互联网行业中，Web服务几乎覆盖所有业务，包括搜索、电商、社交、视频、游戏
从
第8章
十
Linux公社 www.linuxidc.com
、“零”开发一个轻量级WebServer
---
## Page 131
完整的配置文件内容如下：
置文件的Python应用接口。提供一个简单的编程接口和一个简单的语法配置文件。Yorserver
8.1.2
另外需要确保cgi-bin 中的 CGI文件具备可执行权限，具体操作命令：chmod+x index.pl。
【 /usr/local/yorserver/conf/yorserver.conf】
Yorserver 采用ConfigObj读取配置文件，ConfigObj是一个简单且功能强大的用于读写配
#Multithreading:configure yorserver Multi threading support(on/off).
Multiprocess="off"
# Multiprocess: configure yorserver Multi process support(on/off).
server_version = "YorServerl.0"
#server_version:Add response HTTP header server version information.
运行：sbin/server.sh start，启动Yorserver服务。
Expires="7d"
port=80
Yorserver程序目录结构及功能说明如图8-1所示，
口
口
口
口
Expires:Add response HTTP header Expires and Max-age version.format:d/h/m).
protocol_version:Add response HTTP header protocol version.
sys_version:Add response HTTP header python version information.
支持配置文件。
支持 PHP、Perl、Python 脚本 cgi访问；
1支持HTTPMIME自定义配置；
支持gzip 压缩配置；
支持安全套连接服务HTTPS
配置文件
Linux公社 www.linuxidc.com
甲
cgi-binC
图8-1Yorserver目录结构
项目配置文件存放目录
CGI文件存放目录（可更改）
项目依赖库存放目录
第8章从“零”开发一个轻量级webServer
本存放目录（可更改）
“可更改”表示支持配置文件定义，
105
---
## Page 132
8.2
跟踪。下面介绍Yorserver各个功能点具体的实现原理及方法。
不同参数值，来观察 Web 服务器与客户端表现出的差异，客户端可以使用 HttpWatch工具来
106第二部分高级篇
Python 默认自带的模块已经可以实现简单的 HTTP服务器，如BaseHTTPServer模块提
了解Nginx 或Apahce 配置的人对Yorserver 的配置并不会陌生，读者可以尝试通过修改
gz="application/x-gzip"
gif="image/gif"
doc="application/msword"
css="text/css"
[contentTypes]
#contentTypes:
bin directory.
#cgi_path: configure cgi path,multiple cgi path use
cgi_moudle="on"
#cgi_moudle: Enable(on) or Disable(off) cgi support
certificate="/usr/local/yorserver/key/server.crt"
orivatekey="/usr/local/yorserver/key/server.key
# configure privatekey and certificate pem.
ssl="off"
compresslevel=1
gzip="on"
#gzip: Enable(on) or Disable(off) gzip options
#indexpage: configure web server deafult index page.
Indexes="off"
#Indexes: directory list (on/off).
page404="/404.html"
DocumentRoot="/usr/local/yorserver/www"
#DocumentRoot:configure web server document root
Multithreading="on"
功能实现方法
[cgim]
'443"
[ssl]
configure compress level(1~9)
[gzip]
cgi_extensions:
ssl: Enable(on) or Disable(off) HTTps options,port options must configure
errorfile:
Linux公社www.linuxidc.com
configure
configure cgi file extension.
web server error file path.
','delimited,cgi_path in
---
## Page 133
（7d）过期值，结果等于Expires字段值。
世界标准时间，换算成本地时间需“+8"，即“Tue,15Jul201423:18:49"，加上配置的7天