        MOVLB 0x03
        BCF PMCON1, CFGS
        CLRF 0x70
        CLRF 0x71
        ; Loop through the bootloader data
        loop:
            MOVFW 0x70 
            MOVWF PMADRL ; Store LSB of address
            MOVFW 0x71 
            MOVWF PMADRH ; Store MSB of address
            BSF PMCON1, RD ; Initiate read
            NOP ; Ignored
            NOP ; Ignored
            MOVFW PMDATL
            MOVWF TX1REG
        busy_loop_2:
            BTFSS TX1STA, 1
            GOTO busy_loop_2
            MOVFW PMDATH
            MOVWF TX1REG
        busy_loop_3:
            BTFSS TX1STA, 1
            GOTO busy_loop_3
            INCF 0x70, f
            SKPNZ
            INCF 0x71, f
            MOVFW 0x71
            XORLW 0x20
            SKPNZ
            GOTO resume
            GOTO loop
        ; Use to continue the normal
        ; firmware execution safely     
        resume:
            MOVLB 0x2
            BSF 0xC, 3
            BSF 0xF, 0
            RETURN
        END
* * *
## 远程／STB RF 连接
###  简介
之前讲如何拿下固件，接下来我们研究如何远程攻击，这里用到了ZigBee，是我们主要的研究对象。
**Zigbee RF4CE简介**
RF4CE专为远程控制应用而设计，用于低速传输少量数据。  
它位于由IEEE 802.15.4定义的物理层（PHY）和媒体访问控制（MAC）层之上。  
  * PHY层  
数据在2.4GHz ISM频段上传输。  
RF4CE仅使用16个2.4GHz可能的Zigbee通道中的3个通道。
使用的频道是分别对应于2425MHz，2450MHz和2475MHz频率的频道15,20和25。  
使用的调制是O-QPSK。 使用DSSS可以提高噪声免疫力。
  * MAC层  
Zigbee数据包的一般结构如下。
SIZE (BYTES) | 2 | 1 | 0 or 2 | 0, 2 or 8 | 0 or 2 | 0, 2 or 8 | * | 2  
---|---|---|---|---|---|---|---|---  
FIELD | Frame Control | Sequence Number | Destination PAN | Destination
Address | Source PAN | SourceAddress | Payload | Checksum  
具体而言，帧控制由以下字段组成：
BIT INDEX | 0-2 | 3 | 4 | 5 | 6 | 7-9 | 10-11 | 12-13 | 14-15  
---|---|---|---|---|---|---|---|---|---  
FIELD | Frame Type | Security Enable | Frame Pending | ACK | Intra PAN |
Reserved | Destination Addressing Mode | Reserved | Source Addressing Mode  
  * 帧控制，位10-11和14-15：不同的寻址模式可用于源和目标。 长寻址模式意味着源地址或目标地址将由8个字节组成，而短寻址意味着将只使用两个字节。
  * PAN代表个人区域网络， 这个概念是特定于Zigbee的。Zigbee节点只允许从同一个PAN发送数据到一个节点。
  * 在我们的例子中，帧有效载荷将包含RF4CE层。
AES-128-CCM *是CCM操作模式的衍生产品，并使用AES作为分组密码。 密钥长度为128位。  
这个密钥在配对过程中在两个设备之间交换。 这个过程有点“混淆”，但基本上是明文的。  
这里是将密钥分成37个种子，并通过使用以下XOR操作来计算密钥。  
为了使攻击者更难以嗅探，传输关键种子的Zigbee数据包以非常低的输出功率发送。  
不用说，这个密钥交换过程并不完美，它已经受到广泛的批评。不过，如果攻击者没有嗅探到配对过程，那么AES-128-CCM *就没什么重大问题。  
在我们的远程和STB的情况下，这种配对过程和密钥交换仅在STB的第一次启动期间发生过一次。
###  RF4CE 工具
  * GNU Radio
  * The IEEE 802.15.4 MAC and PHY layers are provided by the gr-ieee802-15-4 project
  * HackRF
  * PlutoSDR
## PIC 缓冲区溢出
###  简介
因为注入RF4CE数据包是可能的，我开始fuzz STB。
我很快发现发送大的RF4CE数据帧有时会让PIC卡住甚至重置。
这显然像是一个缓冲区溢出。 但是如何利用PIC微控制器上的缓冲区溢出？ 考虑到PIC仅用于基本功能，是否有什么“邪恶”来实现？
要回答这些问题，我首先必须介绍PIC Enhanced Midrange架构的基础知识。 已经熟悉它的读者可以随意跳过本节。
我将着重指出在这样的设备上“利用”缓冲区溢出的要点。
* * *
###  PIC Midrange架构
**指令集**
PIC Enhanced Midrange架构支持以14位编码的49条指令。
我不详细说明这些指令。
**内存布局**
PIC Enhanced Midrange 是Harvard架构。 这意味着指令存储器与数据存储器分开。
PIC数据存储器分为几个128字节的存储区（bank）。 所有存储区具有相同的结构，详见下表。
ADDRESS RANGE | MEMORY TYPE  
---|---  
0x000 – 0x00b | Core Registers  
0x00c – 0x01f | Peripherals Registers  
0x020 – 0x06f | General Purpose Registers  
0x070 – 0x07f | Common RAM  
例如，我们从PIC中提取出来的数据表显示有四个存储区。  
我们来详细看一下这些内存区域：
**寄存器**
**核心寄存器**  
核心寄存器都可以被存储区（bank）访问到：
ADDRESS | REGISTER  
---|---  
0x00 | INDF0  
0x01 | INDF1  
0x02 | PCL  
0x03 | STATUS  
0x04 | FSR0L  
0x05 | FSR0H  
0x06 | FSR1L  
0x07 | FSR1H  
0x08 | BSR  
0x09 | WREG  
0x0a | PCLATH  
0x0b | INTCON  
**INDFn** ， **FSRnL** 和 **FSRnH** 寄存器用于间接寻址。 这将在以下几节中解释。  
 **PCL** 和 **PCLATH** 用于存储程序计数器。 这两个寄存器对我们来说非常重要，并将在下一节详细介绍。  
 **WREG** 寄存器是工作寄存器。 该寄存器被用作大多数算术和逻辑指令的操作数之一。  
 **BSR** 寄存器是Bank Select Register。 存储在该寄存器中的值是当前选择的存储块的索引。 让我们来看看下面的代码来理解它的含义。
          0x00000000      2000           movlb 0x0
          0x00000001      1008           movf 0x10, w