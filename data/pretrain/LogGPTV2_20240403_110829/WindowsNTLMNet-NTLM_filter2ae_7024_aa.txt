# Windows内网协议学习NTLM篇之Net-NTLM利用
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：daiker@360RedTeam
## 0x00 前言
在上一篇文章[Windows内网协议学习NTLM篇之发起NTLM请求](https://www.anquanke.com/post/id/193493)里面,讲了12种发起NTLM请求的方式。这篇文章接着上文，主要讲解拿到NTLM
请求之后的进一步利用。有Net-NTLM Hash的破解(v1 和 v2)以及Relay到支持NTLM SSP的协议，事实上，只要是支持NTLM
SSP的协议，都可以Relay过去，本文主要讲的是几种比较常遇到，且能达到命令执行效果的，SMB,EWS,LDAP。
## 0x01 Net-NTLM Hash的破解
###  1\. Net-NTLM v1 的破解
先上结论。只要获取到Net-NTLM v1，都能破解为NTLM hash。与密码强度无关。
具体操作如下。
  1. 修改Responder.conf里面的Challenge为1122334455667788(使用[SpiderLabs版本](https://github.com/SpiderLabs/Responder)的 话默认是1122334455667788，但该版本已经停止更新了，建议使用[lgandx版本](https://github.com/lgandx)，这一版本默认为Random，需要修改)
  2. 将type2里面的NTLMSSPNEGOTIATEEXTENDED_SESSIONSECURITY位置0。
如果知道发来的请求一定是SMB 协议的话，Responder里面加上–lm参数即可，
其他协议就得去找改协议发送type2 处的代码，修改NegoFlags位。
比如Http协议的话，需要修改packets.py里面的NTLM_Challenge类。
原来是NegoFlags的值是\x05\x02\x89\xa2，改成\x05\x02\x81\xa2
  3. 然后获取到Net-NTLM v1。再使用[ntlmv1-multi](https://github.com/evilmog/ntlmv1-multi)里面的ntlmv1.py转换.
获取到Net-NTLM
v1是win10::WIN10-1:F1586DA184365E9431C22EF206F5A2C918659E1B1FD7F64D:F1586DA184365E9431C22EF206F5A2C918659E1B1FD7F64D:1122334455667788
转化完的格式就是NTHASH:F1586DA184365E9431C22EF206F5A2C918659E1B1FD7F64D
  4. 再将转化完的格式用[crack.sh](https://crack.sh/get-cracking/)破解即可。
下面简要探究下原理，如果没有兴趣的可以直接跳过。看下一小节。
之前在[NTLM基础介绍](https://www.anquanke.com/post/id/193149)里面有简单介绍了下Net-NTLM
v1的加密方式
将 16字节的NTLM hash空填充为21个字节，然后分成三组，每组7字节，作为3DES加密算法的三组密钥，加密Server发来的Challenge。
将这三个密文值连接起来得到response。
但是在实践中发现，加密方式的表述是有点问题的，或者说是不完整的。上面的只是Net-NTLM v1的一种加密方式，Net-NTLM
v1还有另外一种加密方式。我们下面来探讨下这两种加密方式以及利用
（1）加密方式1
就是前面提到的那种。
  1. 将 16字节的NTLM hash空填充为21个字节，然后分成三组，每组7字节
  2. 将三组(每组7字节)经过运算后作为DES加密算法的密钥
运算的细节是每组七个字节再转化为8小组，每个小组7个比特位。然后7个比特位进行奇偶校验后算出第8个比特位，刚好是1个字节，8个小组，每小组一个字节，凑成8个字节的密钥。
  3. 加密Server Challenge
  4. 将这三个密文值连接起来得到response。
在Responder如果想获取到这种加密方式的话，要加上参数–lm(仅限于smb 协议)
那这种加密方式存在什么问题呢。
总共三组，每组8个字节作为key，加密Server Challenge获取response。
每组可以分开计算，已知加密内容和加密后的密文算key。使用des算法，key是八个字节。
我们控制Server
Challenge为1122334455667788，然后建立从key到response的彩虹表。就可以在知道response的情况下获取key。所幸[crack.sh](https://crack.sh/get-cracking/)这个网站已经帮我们弄好了，在Challenge为1122334455667788的情况下。一分钟之内就能获取ntlm
hash，而且是免费的。这也是我们为啥要把Challenge设置为1122334455667788，而不是随机。
具体操作是
使用[ntlmv1-multi](https://github.com/evilmog/ntlmv1-multi)里面的ntlmv1.py转换.然后复制NTHASH:E0F8C5B5E45247B4175698B99DBB5557CCD9241EA5A55CFB到[crack.sh](https://crack.sh/get-cracking/)破解，填上邮箱，等到一分钟左右就能收到ntlm hash了。
（2）加密方式2
跟第一种加密方式基本一样。最本质的区别就在于，第一种加密方式的加密内容是Server Challenge。而这种加密方式是拼接8字节Server
Challenge和8字节Client Challenge后，求其MD5，然后取MD5值的前8字节做为加密内容。
我们可以控制Server Challenge为固定的值，但是没法控制Client Challenge的值。也就是说我们没法控制加密的内容为固定的值。
第一种是加密的内容为固定的1122334455667788的话，我们只需要建立从key到response的映射就行。而这种加密方式的话。加密的内容也是不固定的，计算的成本高多了。
在Responder默认获取到的就是这种加密方式(没有加–lm)
使用[ntlmv1-multi](https://github.com/evilmog/ntlmv1-multi)里面的ntlmv1-ssp.py转换.
到[crack.sh](https://crack.sh/get-cracking/)破解。这种方式要钱的，而且还不一定能解的出来。
总而言之，这种加密方式不好破解，其实我们也可以不让客户端不用这种加密方式，就使用第一种加密方式。且看下面的分析。
在我们的Responder加上–lm的情况下获取到的Net-NTLM v1
hash是采用第一种加密方式，但是只针对smb协议有效，在我的测试中，即使加了–lm参数，收到的请求是Http协议的情况底下，拿到的Net-NTLM
v1也是采用第二种加密方式，我们不好破解。所以我又去研究了下什么情况底下采用第一种加密方式，什么情况底下采用第二种加密方式。
在这篇[文章](%5bhttp:/d1iv3.me/2018/12/08/LM-Hash%E3%80%81NTLM-Hash%E3%80%81Net-NTLMv1%E3%80%81Net-NTLMv2%E8%AF%A6%E8%A7%A3/%5d\(http:/d1iv3.me/2018/12/08/LM-Hash%E3%80%81NTLM-Hash%E3%80%81Net-NTLMv1%E3%80%81Net-NTLMv2%E8%AF%A6%E8%A7%A3/\))里面有提及到,当ntlm的flag位NTLMSSPNEGOTIATEEXTENDED_SESSIONSECURITY置为1的情况底下，会采用第二种加密方式，否则就会采用第一种加密方式，我们可以看下impacket里面计算Net-NTLM v1的相关代码
可以很清楚的看到，当NTLMSSPNEGOTIATEEXTENDED_SESSIONSECURITY位置为1的时候，加密的内容不是server
challenge，而是md5 hash 运算过的server challeng+client challent的前8位。也就是说是第二种加密方式。
那NTLMSSPNEGOTIATEEXTENDEDSESSIONSECURITY
flag来自于哪里呢。我们知道ntlm分为type1，type2，type3。计算response就在type
3里面，NTLMSSPNEGOTIATEEXTENDEDSESSIONSECURITY flag位就来自于type2。而type 2
里面的内容正常就是我们返回给客户端的。
也就是说，客户端选择加密方式1还是加密方式2，这个是由我们可以控制的。只需要我们把NTLMSSPNEGOTIATEEXTENDED_SESSIONSECURITY位置为0，那么客户端就会选择加密方式1.并且Server
Challenge为1122334455667788的情况下。我们用crack.sh快速免费有效得破解。获取到用户的NTLM Hash。
那怎么将NTLMSSPNEGOTIATEEXTENDEDSESSIONSECURITY位置为0，我们一般都是使用现成的工具Resonder来获取Net-NTLM Hash。之前说过加上–lm参数就可以将NTLMSSPNEGOTIATEEXTENDEDSESSIONSECURITY位置为0。
这个时候还有一个小问题没有解决，那就是Resonder加上–lm，为什么只针对smb 协议有效。其他协议无效。
我去读了下Responder的代码。
加上–lm参数之后，调用的模块就是SMB1LM
发现她用的是老板本的smb实现。而这个版本的实现是在smb
协商版本的时候就将challenge返回，并且将NTLMSSPNEGOTIATEEXTENDED_SESSIONSECURITY置为0.
而且也仅仅是实现了smb协议，并没有实现其他协议。
但是完全可以不用老板本的smb实现。这里面最本质的地方在于NTLMSSPNEGOTIATEEXTENDED_SESSIONSECURITY置为0.而这个flag位并不一定需要用到旧版本的smb才能置位。只需要修改NTLM
SSP里面的flag位就行
在各个协议里面的NTLM SSP里面，修改flag位，我们找到Responder里面type2的NTLM SSP的flag位赋值的地方即可。
Responder里面的NTLM SSP实现没有通用性。比如smb部分的实现，在packets.py里面的SMBSession1Data类里面。