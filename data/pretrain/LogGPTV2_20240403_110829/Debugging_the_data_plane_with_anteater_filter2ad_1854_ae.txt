### Optimized Text

**Runtime Performance and Invariant Analysis**

The current runtime performance leaves room for improvement. However, substituting control plane analysis for Anteater does not resolve this issue, as the invariants of interest are computationally challenging (see Appendix) regardless of whether the information is represented at the control or data plane. It remains unclear whether one approach can be fundamentally faster; differences may stem from the choice of invariants to test and implementation details. Notably, data plane analysis might be more straightforward because, unlike control plane analysis, it does not require predicting future system inputs or dynamic protocol convergence.

**Extending Anteater for General Properties**

The generality of Boolean satisfiability allows Anteater to handle a wide range of network properties beyond those discussed in this paper. For instance, Anteater can model network latency by introducing a new field in the symbolic packet to record the packet's total latency, incrementing it at each hop according to the link's latency using our packet transformation algorithms. The SAT solver we used supports arithmetic operations such as +, -, ≤, which are useful for representing network behavior and constraints involving latency.

However, some bugs are beyond Anteater's reach, such as those that do not affect the contents of forwarding state. This includes certain hardware failures (e.g., corrupting the packet during forwarding) and configuration issues that do not impact the FIB.

### Related Work

**Static Analysis of the Data Plane**

The most closely related research to Anteater involves static analysis of data plane protocols. Xie et al. [39] introduced algorithms to check reachability in IP networks with support for ACL policies. Their design was a theoretical proposal without an implementation or evaluation. Anteater uses this algorithm but demonstrates practicality by designing and implementing our own algorithms to use reachability to check meaningful network invariants, developing a system to make these algorithmically complex operations tractable (see the Appendix), and applying Anteater on a real network to find 23 real bugs. Xie et al. also proposed an algorithm for handling packet transformations, but it did not handle fully general transformations, requiring knowledge of an inverse transform function and only managing non-loopy paths. Our novel algorithm handles arbitrary packet transformations without needing the inverse transform, which is crucial for practical protocols that can cause packets to revisit the same node multiple times (e.g., MPLS Fast Reroute).

Roscoe et al. [33] proposed predicate routing to unify the concepts of both routing and firewalls into boolean expressions. Bush and Griffin [9] provided a formal model of integrity (including connectivity and isolation) for virtual private routed networks. Hamed et al. [19] designed algorithms and a system to identify policy conflicts in IPSec, demonstrating bug-finding efficacy in a user study. In contrast, Anteater is a general framework that can check many protocols, and we have shown its effectiveness in finding bugs in real deployed networks.

**Static Analysis of Control Plane Configuration**

Analyzing configurations of the control plane, including routers [6, 14] and firewalls [2, 5, 43], can serve as a sanity check before deployment. As discussed in the introduction, configuration analysis has two main disadvantages. First, it must simulate the behavior of the control plane for the given configuration, making these tools protocol-specific. Parsing configurations is non-trivial and error-prone [26, 41]. Second, configuration analysis will miss non-configuration errors (e.g., errors in router software and inconsistencies between the control plane and data plane [18, 27, 41]; see our study of such errors in §5.2).

However, configuration analysis can detect bugs before a new configuration is deployed. Anteater can detect bugs only once they have affected the data plane, though, as we have shown, there are subtle bugs (e.g., router implementation bugs, copying wrong configurations to routers) that only a data plane analysis approach like Anteater can detect. Thus, control plane analysis and Anteater are complementary.

**Intercepting Control Plane Dynamics**

Monitoring the dynamics of the control plane can detect a broad class of failures [16, 20] with minimal overhead but may miss bugs that only affect the data plane. This approach is complementary to ours.

**Traffic Monitoring**

Traffic monitoring is widely used to detect network anomalies as they occur [4, 29, 35, 37]. Anteater's approach is complementary: it can provably detect or rule out certain classes of bugs and can identify problems that are not triggered by currently active flows or that do not cause a statistical anomaly in aggregate traffic flow.

**SAT Solving in Other Settings**

Work on model checking, hardware verification, and program analysis [7, 40, 42] often encounters NP-Complete problems, which are often reduced to SAT problems so that SAT solvers can solve them effectively in practice. This work inspired our approach of using SAT solving to model and analyze data-plane behavior.

### Conclusion

We presented Anteater, a practical system for finding bugs in networks via data plane analysis. Anteater collects data plane information from network devices, models data plane behavior as instances of satisfiability problems, and uses formal analysis techniques to systematically analyze the network. To the best of our knowledge, Anteater is the first design and implementation of a data plane analysis system used to find real bugs in real networks.

We ran Anteater on our campus network and uncovered 23 bugs. Anteater helped our network operators improve the reliability of the campus network. Our study suggests that analyzing data plane information could be a feasible approach to assist in debugging today’s networks.

### Acknowledgements

We would like to thank our shepherd, Emin G¨un Sirer, and the anonymous reviewers for their valuable comments. We also thank our network operator Debbie Fligor for collecting data and sharing her operational experience. This research was funded by NSF grants CNS 0834738, CNS 0831212, CNS 1040396, and CNS 1053781, grant N0014-09-1-0743 from the Office of Naval Research, AFOSR MURI grant FA9550-09-01-0539, a grant from the Internet Services Research Center (ISRC) of Microsoft Research, and a Fulbright S&T Fellowship.

### References

[References listed as in the original text]

### Appendix

In this appendix, we discuss the complexity of determining reachability in a network given its data plane state. The difficulty of determining reachability depends strongly on the functions allowed in the data plane. If network devices implement only IP-style longest prefix match forwarding on a destination address, reachability can be decided in polynomial time. However, if the data plane is augmented with richer functions, the problem quickly becomes difficult. As we show below, packet filters make reachability NP-Complete; and, of course, reachability is undecidable if arbitrary programs are allowed in the data plane.

It is useful to mention how this complexity relates to the approach of Xie et al. [39], whose reachability algorithm is essentially the same as ours, but written in terms of set union/intersection operations rather than SAT. As pointed out in [39], even with packet filters, the reachability algorithm terminates within O(V^3) operations. However, this algorithm only calculates a formula representing reachability and does not evaluate whether that formula is satisfiable. In [39], it was assumed that evaluating the formula (via set operations in the formulation of [39]) would be fast. This may be true in many instances, but in the general case, deciding whether one vertex can reach another in the presence of packet filters is not in O(V^3), unless P = NP. Thus, to handle the general case, the use of SAT or similar techniques is required since the problem is NP-complete. We choose to use an existing SAT solver to leverage optimizations for determining satisfiability.

We now describe in more detail how packet filters make reachability NP-Complete. The input to the reachability problem consists of a directed graph G = (V, E), the boolean policy function Q(e, p) which returns true when packet p can pass along edge e, and two vertices s, t ∈ V. The problem is to decide whether there exists a packet p and an s → t path in G, such that Q(e, p) = true for all edges e along the path. (Note this problem definition does not allow packet transformations.) To complete the definition of the problem, we must specify what sort of packet filters the policy function Q can represent. We could allow the filter to be any boolean expression whose variables are the packet's fields. In this case, the problem can trivially encode arbitrary SAT instances by using a given SAT formula as the policy function along a single edge s → t, with no other nodes or edges in the graph, with the SAT formula's variables being the packet's fields. Thus, that formulation of the reachability problem is NP-Complete.

One might wonder whether a simpler, more restricted definition of packet filters makes the problem easy. We now show that even when Q for each edge is a function of a single bit in the packet header, the problem is still NP-complete because the complexity can be encoded into the network topology.

**Proposition 1.** Deciding reachability in a network with single-bit packet filters is NP-Complete.

**Proof.** Given a packet and a path through the network, since the length of the path must be < |V|, we can easily verify in polynomial time whether the packet will be delivered. Therefore, the problem is in NP.

To show NP-hardness, suppose we are given an instance of a 3-SAT problem with n binary variables x1, ..., xn and k clauses C1, ..., Ck. Construct an instance of the reachability problem as follows. The packet will have n one-bit fields corresponding to the n variables xi. We create k + 1 nodes v0, v1, ..., vk, and we let s = v0 and t = vk. For each clause Ci, we add three parallel edges ei1, ei2, ei3 all spanning vi−1 → vi. If the first literal in clause Ci is some variable xi, then the policy function Q(ei1, p) = true if and only if the ith bit of p is 1; otherwise, the first literal in Ci is the negated variable xi, and we let Q(ei1, p) = true if and only if the ith bit of p is 0. The policy functions for ei2 and ei3 are constructed similarly based on the second and third literals in Ci.

With the above construction, a packet p can flow from vi−1 to vi if and only if Ci evaluates to true under the assignment corresponding to p. Therefore, p can flow from s to t if and only if all 3-SAT clauses are satisfied. Thus, since 3-SAT is NP-complete, reachability with single-bit packet filters is NP-complete.