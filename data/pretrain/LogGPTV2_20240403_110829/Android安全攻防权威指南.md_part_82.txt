Generate PiM/Servo
CLK h1
Versioninfo/statusinfo
Commandhistory
CLK 10
Bitorder (msb/LSB)
CLK tick
1/L
DAT hi
Change mode
Set output type
DAT 1o
口
Pullup resistors (off/oN)
DAT read
p/P
Repeat e.g.r:10
Bit read
Script engine
↓=
Bits to read/write e.g. 0x55.2
w/H
PSU (off/ON)
α>//
Usermacro x/aesign x/list a11
HiZ>
如图13-35所示，可以用一套能直接插入Bus Pirate 的探头将其与 SPI、1°C或者UART总
线连起来。
图 13-35Bus Pirate 的探头
---
## Page 378
362
第13章硬件层的攻击
JTAGulator会猜测引脚分布，但是BusPirate不同，需要根据调试目标来具体配置其探头
在网上可以轻松地找到用色编码的 Bus Pirate 探头备忘表，然后将其与 SPI、1°C 和UART接口
相连。还需要告诉BusPirate关于这些接口的一些细节信息，比如之前用Saleae等工具猜测出的
波特率（如图13-36所示）。
图13-36在BusPirate中设置波特率
连接好以后，就可以通过BusPirate与目标总线交互式或者被动地通信了。BusPirate的界面
是基于文本的，不能直接查看这些总线上传输的二进制数据。对这些二进制数据，BusPirate显
示每个字节的值（比如0x90）。如果要和二进制数据流打交道，这肯定不是最好的方式。因此，
许多人基于PySerial这样的库编写软件来控制BusPirate，接收其ASCII数据流，然后只将自己
感兴趣的字节转换成直接的字符表示。
为了解决这个间题，Travis Goodspeed开发了GoodFET。这是一个由 Python API控制的 Bus
Pirate。与Facedancer21不同的是，在许多零售商那里都能买到它。通过GoodFET就能以编程的
方式与总线交互，接收或者发送超出ASCII可显字符范围的二进制数据。
● Bootloader
与设备建立可交互的连接以后，重启设备就会看到来自bootloader的信息。设备启动后，许
多bootloader（比如 Das U-Boot，简称U-Boot）会设置一个短暂的时间窗口。此时按下任意键，
就可以进人交互式bootoader菜单。图13-37就是U-Boot弹出提示时的截屏。
这种情况下，就已经可以完全攻破设备了，但是bootloader经常会提供下列不必要的额外
功能：
口读写闪存
口从网络引导
---
## Page 379
13.3拦截、监听和劫持数据
363
口从串行端口升级或者接受新的固件
口对闪存中的文件系统进行分区或其他操作
图 13-37U-Boot引导信息
图13-38展示了标准U-Boot提供的完整指令。
图13-38U-Boot UART会话
---
## Page 380
364
第13章硬件层的攻击
不少设备上既有可以访问的UART，又使用了U-Boot作为bootloader，此时就可以获得类似
的会话。事实上，如果厂商不想禁用UART，就通常会暴露出U-Boot。
13.4窃取机密和固件
我们已经介绍了如何观察组件之间以及设备之间通信的数据，也介绍了如何与这些通信渠道
互动。基于这些技术，就可以开展模测试并观察异常或崩溃了。不过，你可能并不想进行模糊
测试，只是希望将二进制镜像导人到IDA这样的工具中，对其逆向并寻找其中的漏洞。
如何访问这些嵌入的数据呢？
13.4.1无损地获得固件
有时可以找到简单且无损的方法从设备中提取出固件镜像。第一种方法取决于设备使用的是
哪种存储器。在极少数情况下，固件镜像并没有存储在NAND或者其他类型的闪存中，而是（出
于备份的目的）存储在了EEPROM里。
1. SPI EEPROM
前面提到了许多使用SPI的设备，比如加速器和温度传感器。SPIEEPROM也使用SPI，它
通过一条简单的串行线读写数据，而不是像其他类型的存储器一样通过特制的接口和“地址线”
来读写。这种存储设备的工作方式非常简单：向SPI或1°C总线写人一个地址（比如0x90），然
后EEPROM设备就会返回这个位置存储的数据。图13-39就是用TotalPhase的Beagle查看一个
设备从FCEEPROM读写数据时的截屏。
9团
图 13-39Total Phase Beagle 分析 I°C EEPROM
---
## Page 381
13.4窃取机密和固件365
在这个窗口顶端的数据传输视图中可以清楚地看到，每一个WriteTransaction后面都
跟着一个Read Transaction。CPU向 I°C总线写人了地址0x0013，1°C EEPROM则返回了那
个位置的值0x68。通过这种方式可以直接读取这类EEPROM里存储的内容。想在设备中识别出
这类EEPROM，只需要在网上搜索它们的序列号即可。
除了观察CPU 如何使用这类EEPROM，Total Phase DataCenter还提供了直接从SPI或I°C
EEPROM中自动读出数据的功能。使用这一功能可以在计算机上将二进制数据重组成一个文件。
用BusPirate或者GoodFET也可以达到同样的效果。
2.存储固件镜像的MicroSD和SD卡
有些设备会用MicroSD卡或者SD卡来升级固件，或者将固件镜像文件存储在这些卡上。如
果这些存储设备使用了可挂载的文件系统，只需将它们拔出来然后挂载到计算机上即可。有时候，
嵌人式开发者会直接写人原始数据，或者用其自定义的格式将数据存储在卡上。MicroSD卡和
SD卡使用的都是SPI，因此可以将上面介绍的SPIEEPROM读写技术用在这里。
3.JTAG和调试器
使用JTAG调试口和调试器可以查看处理器寄存器的内容，还能查看内存里的数据。对于嵌
人式系统来说，尤其是那些运行裸机执行文件的系统，这也意味着可以从中提取固件。这也是
JTAG调试能力极其重要的另一个原因。包括SeggerJ-Link在内的许多工具，都通过JTAG的这
一功能在计算机中重构固件镜像。使用J-Link时，GDB的memorydump命令就利用了GDB服
务端的这个功能，将整个内存的内容全部dump出来。
13.4.2有损地获取固件
如果前面提到的无损方法都不奏效，就要考虑其他可能损坏设备的技术了。
移除芯片
最明显也最具破坏性的方法是将芯片从板上物理性地移除，然后通过读取来获得固件镜像。
乍一看这个方法似乎很费劲，并且需要高超的技术，其实不然。
移除一个表面贴装器件（SMD）的焊锡然后读取其内容，是一件非常容易面且有趣的事情。
有人使用热风枪（其实就是电吹风机）同时加热PCB上某个SMD模块的所有连接焊脚，使其焊
锡融化。这是一种非常直观有效的方法。
另一种技术是使用叫作ChipQuik的产品。图13-40展示了使用它时所有需要的东西。
ChipQuik主要由一种合金金属组成，熔点比传统的焊锡还要低。把融化了的ChipQuik引到
冷却坚固的焊锡上，可以将热量传递给焊锡直至其融化。由于ChipQuik保持融化状态的时间更
长一些，因此有足够的时间将去掉焊锡的芯片从PCB板上取出来。即使害怕焊接，也可以利用
ChipQuik的笨方法取得成功。在网上可以找到许多演示整个移除过程的视频。
13
---
## Page 382
366
第13章硬件层的攻击
图 13-40Chip Quik 套件
将目标CPU或者闪存芯片从板上移除下来以后，接下来做什么？好消息是，有一家叫Xeltek
的公司生产了一系列很有用的设备来完成下一步：读取芯片数据。Xelek提供了许多名为“通用
闪存编程器”（Universal Flash Programmers）的设备，其中最好的是 SuperPro 系列。SuperPro设
备可以读写数百种不同类壁的闪存和处理器。图13-41就是一个这样的设备，型号是Xeltek
SuperPro 5000E。
 13-41 Xeltek SuperPro 5000E
此外，Xeltek还生产了数百种适配器，用于匹配所有它能处理芯片的格式和形状系数。图
13-42中是用于SuperPro5000E的一些适配器。
---
## Page 383
13.4窃取机密和固件
367
图 13-42Xeltek SuperPro 5000E及其适配器
Xeltek的网站甚至提供了一个可供搜索的数据库，输人芯片的序列号就能搜到应该用哪个
Xeltek适配器来匹配该芯片。Xeltck设备通过USB线连接到计算机，并配有简单易用的客户端软
件。直接启动这个软件，会检测到正在使用的适配器类型，并询问是否读取。点击Rcad并等待
几分钟，计算机上就会出现一个二进制文件，其中就是芯片的内容！图13-43是这个工具运行时
的截图。
图13-43Xeltek读取固件
从芯片中提取出固件就是这么简单。不过Xeltek的设备和TotalPhase的高级USB工具一样，
---
## Page 384
368第13章硬件层的攻击
价格达几千美元。如果不是公司使用，对个人来说实在是太昂贵了。当然，它们也确实相当有效
和易用。
13.4.3拿到dump文件后怎么做
如果用前面介绍的技术从设备中提取出了一个很大的二进制文件，接下来该做什么？怎么找
到你想找的东西？这个二进制文件就是固件吗？还是包含了其他的数据？
1.裸机执行文件镜像
如前所述，微控制器在启动时不管指向哪里都会盲目地执行。调试目标的规格说明书会告诉
我们处理器整个启动过程的细节，包括人口点的位置，寄存器的初始状态，等等。但是你可能只
是想快速定位自已要找的东西。有时候需要用十六进制编辑器打开整个文件，找出线索来判断这
个巨大的二进制包到底是什么。
许多时候，提取出的镜像文件并不仅仅是固件，可能还包含了一个轻量级的文件系统，比如
CramFS、JFFS2或者Yafs2文件系统。如果这个数据是从NAND闪存中提取出来的，这些二进
制镜像就可能全部是文件系统。birwalk这样的工具可以检测二进制镜像中的内容并输出一些
有用的信息。binwalk使用启发式方法来定位文件中的可识别结构，下面是一个例子：
[s7ephenexip ~]$ binwalk 1libc.so
/var/fo1ders/jb/d1pdf3ns1a1b1cddnxs7g1sc0000gn/T/tmpzP9ukC, 734:
  1t    2   1
DBCIHAL
Leve1 0
HEX
DBSCRIPTION
0×0
LF 32-bit LSB shared object, ARM,
version 1 (sysv)
0×42638
CranFs Eilesystem, little endian
slze 4278867 ho1e_support CRC 0x2f74656b, edition 1886351984,
2037674597 b1ocks, 1919251295 fi1es
这个简单的例子用binwalk扫描了一个从Android设备中提取出来的libc.so文件。可以看
到，它正确地识别出这是一个ELF格式文件，并且怀疑在文件尾部存在一个微小的CramFS文
件系统。
binwalk不是银弹，在识别二进制文件内容时经常失败。如果镜像是从CPU（尤其是集成
闪存的CPU）或者NAND中提取出来的，这种情况会更加常见。下面的例子用binwalk来识别
一个提取出的固件镜像：
[s7ephenlxip ~]$
s7s-macbook-pro:firmmare_capture s7s 1s -alt Stm32_firmware.bin