### GCC 对 C 的扩展

#### A.10 将函数标记为 used
在某些情况下，编译器可能会优化掉未使用的函数。为了防止这种情况，可以使用 `__attribute__((used))` 属性来明确表示该函数是必需的。

```c
__attribute__((used)) void foo(void) {
    /* ... */
}
```

#### A.11 将函数或参数标记为 unused
如果某个函数参数在函数体内没有被使用，但你仍然希望保留它以保持接口的一致性，可以使用 `__attribute__((unused))` 属性来避免编译器警告。

```c
void foo(long __attribute__((unused)) value) {
    /* ... */
}
```

#### A.12 将结构体进行打包（pack）
`packed` 属性用于减小结构体的内存占用。通过取消对齐，结构体成员将紧密排列，从而节省空间。

```c
struct __attribute__((packed)) foo {
    int a;
    char b;
    short c;
};
```

#### A.13 增加变量的内存对齐量
`aligned` 属性允许你指定变量的对齐方式。这在处理特定硬件要求时非常有用。

```c
int beard_length __attribute__((aligned(32))) = 0;
```

默认情况下，GCC 会根据 ABI 规则自动对齐变量。如果你希望使用默认对齐方式，可以省略括号中的值。

```c
double parrot_height __attribute__((aligned)) = 5.0;
```

#### A.14 将全局变量置于寄存器中
GCC 允许你将全局变量存储在寄存器中，从而提高访问速度。需要注意的是，这种做法可能会导致一些限制，例如不能取地址。

```c
register int *foo asm("ebx");
```

#### A.15 分支预测
GCC 提供了 `__builtin_expect` 宏，用于帮助编译器进行分支预测，从而优化代码性能。

```c
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)

int ret;
ret = close(fd);
if (unlikely(ret)) {
    perror("close");
}

const char *home;
home = getenv("HOME");
if (likely(home)) {
    printf("Your home directory is: %s\n", home);
} else {
    fprintf(stderr, "Environment variable HOME not set!\n");
}
```

#### A.16 获取表达式的类型
`typeof` 关键字允许你在编译时获取表达式的类型，类似于 `sizeof` 操作符。

```c
typeof(*x) y[42];
```

你可以使用 `typeof` 来定义宏，从而简化代码。

```c
#define max(a, b) ({ \
    typeof(a) _a = (a); \
    typeof(b) _b = (b); \
    _a > _b ? _a : _b; \
})
```

#### A.17 获取类型的内存对齐量
`__alignof__` 操作符用于获取类型的对齐方式。这对于理解内存布局和优化数据结构非常有用。

```c
printf("%d\n", __alignof__(my_ship.canons));
```

#### A.18 结构体中成员的偏移量
`offsetof` 宏用于获取结构体成员相对于结构体起始位置的偏移量。

```c
#define offsetof(type, member) __builtin_offsetof(type, member)

struct rowboat {
    char *boat_name;
    unsigned int nr_oars;
    short length;
};

printf("offset of boat_name: %zu\n", offsetof(struct rowboat, boat_name));
```

#### A.19 获取函数返回地址
`__builtin_return_address` 函数用于获取调用链中指定层级的返回地址。

```c
void *addr = __builtin_return_address(0);
```

#### A.20 在 Case 中使用范围
GCC 支持在 `switch` 语句中使用范围，使得代码更加简洁。

```c
switch (val) {
    case 1 ... 10:
        /* ... */
        break;
    case 11 ... 20:
        /* ... */
        break;
    default:
        /* ... */
}
```

#### A.21 void 和函数指针的算术操作
GCC 允许对 `void*` 进行算术操作，尽管这在标准 C 中是不允许的。

```c
void *p = ...;
p++;  // GCC 允许，但在标准 C 中是非法的
```

#### A.22 让代码变得更美观并有更好的移植性
通过定义宏，可以使代码更具可读性和可移植性。

```c
#if __GNUC__ >= 3
# undef inline
# define inline inline __attribute__((always_inline))
# define __noinline __attribute__((noinline))
# define __pure __attribute__((pure))
# define __const __attribute__((const))
# define __noreturn __attribute__((noreturn))
# define __malloc __attribute__((malloc))
# define __must_check __attribute__((warn_unused_result))
# define __deprecated __attribute__((deprecated))
# define __used __attribute__((used))
# define __unused __attribute__((unused))
# define __packed __attribute__((packed))
# define __align(x) __attribute__((aligned(x)))
# define __align_max __attribute__((aligned))
# define likely(x) __builtin_expect(!!(x), 1)
# define unlikely(x) __builtin_expect(!!(x), 0)
#else
# define __noinline /* no noinline */
# define __pure /* no pure */
# define __const /* no const */
# define __noreturn /* no noreturn */
# define __malloc /* no malloc */
# define __must_check /* no warn_unused_result */
# define __deprecated /* no deprecated */
# define __used /* no used */
# define __unused /* no unused */
# define __packed /* no packed */
# define __align(x) /* no aligned */
# define __align_max /* no aligned_max */
# define likely(x) (x)
# define unlikely(x) (x)
#endif
```

### 附录 B 参考书目

#### B.1 C 语言程序设计的相关书籍
- **The C Programming Language, 2nd ed.** - Brian W. Kernighan and Dennis M. Ritchie. Prentice Hall, 1988.
- **C in a Nutshell.** - Peter Prinz and Tony Crawford. O'Reilly Media, 2005.
- **C Pocket Reference.** - Peter Prinz and Ulla Kirch-Prinz. Translated by Tony Crawford. O'Reilly Media, 2002.
- **Expert C Programming.** - Peter van der Linden. Prentice Hall, 1994.
- **C Programming FAQs: Frequently Asked Questions, 2nd ed.** - Steve Summit. Addison-Wesley, 1995.

#### B.2 Linux 编程的相关书籍
- **Unix Network Programming, Volume 1: The Sockets Networking API, 3rd ed.** - W. Richard Stevens et al. Addison-Wesley, 2003.
- **UNIX Network Programming, Volume 2: Interprocess Communications, 2nd ed.** - W. Richard Stevens. Prentice Hall, 1998.
- **PThreads Programming: A POSIX Standard for Better Multiprocessing.** - Bradford Nichols et al. O'Reilly Media, 1996.
- **Managing Projects with GNU Make, 3rd ed.** - Robert Mecklenburg. O'Reilly Media, 2004.
- **Essential CVS, 2nd ed.** - Jennifer Versperman. O'Reilly Media, 2006.
- **Version Control with Subversion.** - Ben Collins-Sussman et al. O'Reilly Media, 2004.
- **GDB Pocket Reference.** - Arnold Robbins. O'Reilly Media, 2005.
- **Linux in a Nutshell, 5th ed.** - Ellen Siever et al. O'Reilly Media, 2005.

#### B.3 Linux 内核的相关书籍
- **Linux Kernel Development, 2nd ed.** - Robert Love. Novell Press, 2005.
- **Linux Device Drivers, 3rd ed.** - Jonathan Corbet et al. O'Reilly Media, 2005.

#### B.4 操作系统设计的相关书籍
- **Operating Systems, 3rd ed.** - Harvey Deitel et al. Prentice Hall, 2003.
- **UNIX Systems for Modern Architectures: Symmetric Multiprocessing and Caching for Kernel Programming.** - Curt Schimmel. Addison-Wesley, 1994.