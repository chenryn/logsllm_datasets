同一个名字来命名标量、数组、哈希、文件句柄、目录句柄、子程序、格式或标签。
即$foo\fR 和@foo\fR 是不同的变量。也即意味着$foo[1]\fR 是
@foo\fR 的一部分, 而不是$foo\fR的一部分. 这看来有些怪异，不过很
正常，因为它本来就怪异。
.PP
因为变量名以 '$', '@', 或 '%'开始, 保留词对变量没有什么影响。保留词影响
的是标签和文件句柄，因为它们不是以特殊字符前缀开始的。你不能用\[lq]log\[rq]
来命名文件句柄，因为它是保留词（提示：你可以用
`open(LOG,'logfile')'\fR 而不是
`open(log,'logfile')'\fR). 使用大写的文件句柄既增加了可读性，
又减少了冲突的发生。大小写是有意义的\-\-\[lq]\s-1FOO\s0\[rq],\[lq]Foo\[rq],
和\[lq]foo\[rq] 是不同的名称。以字母或下划线开始的名称可以包含数字和下划线。
.PP
可以用一个返回相关引用的表达式来替换这样的变量名。参见 perlref
.PP
以数字开始的变量名只能包含数字。不是以字母、下划线或数字开始的变量名只能
含有一个字符，如：$%\fR 或$$\fR. (大部分这样的变量都有特殊的意
义。例如，$$\fR 是当前进程的id。)
.SS "Context 上下文"
.\".IX Subsection "Context"
在 Perl 中有时操作或值的意义取决于该操作或值所处的上下文。有两个主要的上
下文：列表和标量上下文。相当一部分操作在需要列表的上下文中返回列表，在需
要标量的上下文中返回标量。这在有关该操作的文档中会提到。换句话讲，Perl会
重载这些操作符。英语中的某些词，如`fish'和`sheep'与此类似。
.PP
操作可以根据不同的上下文返回不同的值。例如，如果这样写：
.PP
.nf
\&    int(  )
.fi
.PP
integer 操作提供标量上下文给 <> 操作符, <> 会从STDIN 读入一行返回给 integer 操作，然后它返回其中的整型量。但如果你这样写：
.PP
.nf
\&    sort(  )
.fi
.PP
sort操作提供列表上下文给<>, <>会读入STDIN中的每一行直到结束，然后将其传递给sort，sort然后将其排序输出。
.PP
赋值比较特殊，左侧的参数决定了右侧的参数的上下文。赋值给标量，则右侧参数的上下文是标量上下文；赋值给数组或哈希，则右侧参数的上下文是列表上下文。赋值给列表（或片段，其实也是列表），右侧的上下文也是列表上下文。
.PP
当你使用`use warnings'\fR 编译指示或 Perl 的\fB\-w\fR 参数时，
你可能会看到这样的警告：在\[lq]无效的上下文，void context\[rq] 中使用了常量
或函数。无效上下文的意思是值被丢弃不用，比如只包含有"fred";
\fR 的语句; 或是`getpwuid(0);'\fR;. 在要求列表上下文的函数
被标量上下文环境调用时,也会出现这个警告.
.PP
用户定义的子程序可能会需要查看上下文是无效，标量，还是列表。不过，大多数并
不需要这么做。因为标量和列表会自动插入到一个列表中。参见 perlfunc 中的
\[lq]wantarray\[rq] 以了解如何辨明你的函数调用时的上下文。
.SS "Scalar values 标量"
.\".IX Subsection "Scalar values"
Perl 中的所有数据都是标量, 标量的数组,标量的哈希. 标量可以是三种不同的值: 数字, 字符(串), 引用. 通常, 不同值之间的转换是透明的. 虽然一个标量不可能有多个值, 但是它可以是一个包含多个值的数组或哈希的引用.
.PP
标量不一定非此即彼. 不需要声明变量的类型是"字符串","数字","引用"或其它什么. 因为标量会自动转换, 所以其类型不用关心. Perl 是上下文多形语言,它的标量可以是字符串,数字或引用(包括对象). 其中字符串和数字在大多数情况下并没有什么不同, 引用是强化的,不可变的带有内建引用计数和析构器的指针.
.PP
标量在不是空字符串和数字0的时候被解释为真 TRUE. 布尔上下文是这样一种上下文, 这时不会发生数字或字符串的自动转换.
.PP
有两种空字符串(有时以"empty"表示), 定义了的和未定义的. 定义了的空字符串就是长度为零的字符串,如"". 未定义的空字符串是一个值,这个值表示某事物并没有真实值与它对应, 比如出错, 或到达文件尾, 或者你引用一个未定义的数组或哈希的元素时,都会返回一个未定义的空字符串. 虽然在早期Perl 中,在要求已定义变量的上下文中使用未定义的变量可以使得该变量得到定义, 现在却只有在特殊的情况下才会出现这种结果,参见the perlref manpage. 可以用defined() 函数来检测标量是否已经定义(对数组和哈希无效),也可以用undef() 去除对变量的定义.
.PP
要弄清楚一个字符串是否是有效的非0数字,只要看它是不是数字0和字母\[lq]0\[rq] 就足够了(不过这在使用-w参数时,会显示警告). 因为非数字的字符串被看作0, 与awk中相似:
.PP
.nf
\&    if ($str == 0 && $str ne "0")  {
\&        warn "That doesn't look like a number";
\&    }
.fi
.PP
这种方法可能是最好的,因为如若不然你不会正确对待\s-1IEEE\s0 的注释,比如`NaN'\fR 和无穷大. 别的时候, 你可能更愿意用\fIPOSIX::strtod()\fR 函数或是正则表达式来检测字符串是否能用做数字(参见perlre).
.PP
.nf
\&    warn "has nondigits"        if     /\eD/;
\&    warn "not a natural number" unless /^\ed+$/;             # rejects -3
\&    warn "not an integer"       unless /^-?\ed+$/;           # rejects +3
\&    warn "not an integer"       unless /^[+-]?\ed+$/;
\&    warn "not a decimal number" unless /^-?\ed+\e.?\ed*$/;     # rejects .2
\&    warn "not a decimal number" unless /^-?(?:\ed+(?:\e.\ed*)?|\e.\ed+)$/;
\&    warn "not a C float"
\&        unless /^([+-]?)(?=\ed|\e.\ed)\ed*(\e.\ed*)?([Ee]([+-]?\ed+))?$/;
.fi
.PP
数组的长度是标量. 通过$#days你可以知道@days的长度. 技术上讲,这不是数组的长度; 而是最后一个元素的下标,因为第一个元素的下标是0. 对$#days 赋值会改变数组的长度. 以这种方式减少数组的话, 会破坏其中的值, 再增加其长度也不能恢复. (Perl 4中是可以的, 我们改变了它以确保析构器被及时调用.)
.PP
你可以使用一些小技巧来预扩展一个数组(如果你知道它将会变得很大的话). 可以用给超出数组范围的元素赋值的方法扩展数组. 可以给数组赋值一个空列表以清空数组. 下面语句等价:
.PP
.nf
\&    @whatever = ();
\&    $#whatever = -1;
.fi
.PP
数组处于标量上下文中时, 返回值是数组的长度. (列表在标量上下文中,返回值是列表的最后一个元素,像是C中的逗号操作符, 而内建函数的返回值由它们自己决定.) 以下语句为真:
.PP
.nf
\&    scalar(@whatever) == $#whatever - $[ + 1;
.fi
.PP
Perl 5 改变了$[\fR 的意义: 不必担心别的程序改变了$[\fR 的值. (换言之,不推荐使用$[\fR ) 所以,可以写成这样:
.PP
.nf
\&    scalar(@whatever) == $#whatever + 1;
.fi
.PP
有些程序员为了明确起见, 会使用显式的转换:
.PP
.nf
\&    $element_count = scalar(@whatever);
.fi
.PP
当哈希处于标量上下文中时, 如果哈希为空, 返回值为假, 如果非空, 返回值为真; 说得更精确些, 返回值是个字符串, 由已经使用的存储段和分配的全部存储段组成,二者之间以斜杠分隔. 这可以用来反映Perl的哈希算法的好坏. 例如, 你的哈希中有10,000个元素,但是%HASH\fR 的标量值为"1/16"\fR, 则说明仅用到了16个存储段中的一个, 也许10,000个元素都在这一个存储段中. 最好不要发生这种情况.
.PP
你可以预先为哈希分配空间, 这要使用给\fIkeys()\fR 函数赋值的方法来实现. 实际分配的空间是大于所给值的二的幂：
.PP
.nf
\&    keys(%users) = 1000;                # 分配 1024 空间
.fi
.SS "Scalar value constructors 标量数据构造"
.\".IX Subsection "Scalar value constructors"
数值常量有以下浮点和整数格式:
.PP
.nf
\&    12345
\&    12345.67
\&    .23E-10             # a very small number
\&    3.14_15_92          # a very important number
\&    4_294_967_296       # underscore for legibility
\&    0xff                # hex
\&    0xdead_beef         # more hex   
\&    0377                # octal
\&    0b011011            # binary
.fi
.PP
在数字常量中可以在数字间插入下划线来增加可读性。例如，可以三位一组 (Unix 样式的分组，例如 0b110_110_100)，或者四位一组 (来表示 nibbles，例如 0b1010_0110)，或者其他分组。
.PP
字符串通常以单引号或双引号括起. 与标准Unix shells中的引号相似: 双引号可以接收转义和变量; 单引号不可以 (除了`\e''\fR 和`\e\e'\fR)). C 样式的转义字符可以用来输入新行，跳格等字符，转义字符的列表可以参见 perlop 中的\[lq]Quote and Quote-like Operators\[rq]
.PP
十六进制,八进制,或二进制以字符串形式表示(如:'0xff'),不能自动转换为十进制形式. hex() 和 oct() 函数可以实现转换. 参见 perlfunc 中的 hex 和 oct 了解详情.
.PP
可以在字符串中直接加入新行. 字符串中的变量只能是标量,数组和数组或哈希的片段 (换言之, 以$或@开始, 后跟下标.).
以下语句打印``The price is $\&100.''
.PP
.nf
\&    $Price = '$100';    # not interpolated
\&    print "The price is $Price.\en";     # interpolated
.fi
.PP
perl 中没有 double interpolation，因此$100\fR 保持不变。
.PP
正如在有些shell中一样, 你可以用花括号括起变量名, 以便区分变量名和其后的字母及下划线. 如果要将一个变量改写为字符串时，必须这样做，以避免与后面的双冒号或单引号连接起来，否则会被当作包名：
.PP
.nf
\&    $who = "Larry";
\&    print PASSWD "${who}::0:0:Superuser:/:/bin/perl\en";
\&    print "We use ${who}speak when ${who}'s here.\en";
.fi
.PP
如果没有花括号, Perl会寻找 $whospeak, $who::0, 和 $who's 变量. 后两个是不存在的 who 包中的$0 和 $s.
.PP
实际上, 花括号中的标识符必须是字符串, 哈希的下标也必须是字符串. 都不需要引号, 前面的例子$days{'Feb'} 可以写作 $days{Feb} 引号会自动加上. 但是下标中的其它复杂内容被解释为表达式.
.PP
\fIVersion Strings\fR
.\".IX Subsection "Version Strings"
.PP
\fB注意:\fR Version Strings (v\-strings) have been deprecated.  They will
not be available after Perl 5.8.  The marginal benefits of v\-strings
were greatly outweighed by the potential for Surprise and Confusion.
.PP
类似`v1.20.300.4000'\fR 这样的形式被解释为一个字符串. 这种形式称为 v\-strings，提供了更易读的方法来构造字符串，比起"\ex{1}\ex{14}\ex{12c}\ex{fa0}"\fR 更加易读. 这在表示 Unicode 字符串时很有用, 在使用字符串比较命令(`cmp'\fR,`gt'\fR,`lt'\fR 等)比较版本号时也非常有用. 如果其中的点号多于两个, 则开始的`v'\fR 可以省略.
.PP
.nf
\&    print v9786;              # prints UTF-8 encoded SMILEY, "\ex{263a}"
\&    print v102.111.111;       # prints "foo"
\&    print 102.111.111;        # same
.fi
.PP
这种形式可以用于require 和 use 中作版本检查.\[lq]$^V\[rq] 特殊变量中的Perl版本号就是以这种形式保存的. 参见 perlvar 中的\[lq]$^V\[rq]
注意使用 v\-strings 来保存 IPv4 地址是不可移植的，除非同时使用 Socket 包的\fIinet_aton()\fR/\fIinet_ntoa()\fR 函数。
.PP
注意从 Perl 5.8.1 开始单个数字的 v\-strings (类似`v65'\fR) 如果在`=>'\fR 操作符(通常用来从 hash 值中区分开 hash 键) 之前，不是一个 v\-strings，而是解释为字符串 ('v65')。在 Perl 5.6.0 到 Perl 5.8.0 它一直是 v\-strings，但是这样带来了更多混淆和错误而不是优点。多个数字的 v\-strings，类似`v65.66'\fR 和65.66.67\fR，继续总是被当作 v\-strings
.PP
\fI特殊常量\fR
.\".IX Subsection "Special Literals"
.PP
特殊变量 _\|_FILE_\|_, _\|_LINE_\|_, 和 _\|_PACKAGE_\|_ 代表当前文件名,行号,和包名. 它们只能作为单独的符号来使用; 不能用于字符串中内插. 如果没有当前包(用`package;'\fR 指令来实现), 则_\|_PACKAGE_\|_ 是一个未定义的值.