title:ConTExT: A Generic Approach for Mitigating Spectre
author:Michael Schwarz and
Moritz Lipp and
Claudio Canella and
Robert Schilling and
Florian Kargl and
Daniel Gruss
ConTExT: A Generic Approach for Mitigating
Spectre
Michael Schwarz1, Moritz Lipp1, Claudio Canella1, Robert Schilling1,2, Florian Kargl1, Daniel Gruss1
1Graz University of Technology
2Know-Center GmbH
Abstract—Out-of-order execution and speculative execution
are among the biggest contributors to performance and efﬁciency
of modern processors. However, they are inconsiderate, leaking
secret data during the transient execution of instructions. Many
solutions and hardware ﬁxes have been proposed for mitigating
transient-execution attacks. However, they either do not eliminate
the leakage entirely or introduce unacceptable performance
penalties.
In this paper, we propose ConTExT, a Considerate Transient
Execution Technique. ConTExT is a minimal and fully backward
compatible architecture change. The basic idea of ConTExT is
that secrets can enter registers but not
transiently leave them.
ConTExT transforms Spectre from a problem that cannot be
solved purely in software [65], to a problem that is not easy to
solve, but solvable in software. For this, ConTExT requires min-
imal, fully backward-compatible modiﬁcations of applications,
compilers, operating systems, and the hardware. ConTExT offers
full protection for secrets in memory and secrets in registers.
With ConTExT-light, we propose a software-only solution of
ConTExT for existing commodity CPUs protecting secrets in
memory. We evaluate the security and performance of ConTExT.
Even when over-approximating with ConTExT-light, we observe
no performance overhead for unprotected code and data, and an
overhead between 0 % and 338 % for security-critical applications
while protecting against all Spectre variants.
I.
INTRODUCTION
As arbitrary shrinking of process technology and increasing
processor clock frequencies is not possible due to physical
limitations, performance improvements in modern processors
are made by increasing the number of cores or by optimizing
the instruction pipeline. Out-of-order execution and specu-
lative execution are among the biggest contributors to the
performance and efﬁciency of modern processors. Out-of-order
execution allows processing instructions in an order deviating
from the one speciﬁed in the instruction stream. To fully utilize
out-of-order execution, processors use prediction mechanisms,
e.g., for branch directions and targets. This predicted control
ﬂow is commonly called speculative execution. However,
predictions might be wrong, and virtually any instruction can
raise a fault, e.g., a page fault. Hence, in this case, already
executed instructions have to be unrolled, and their results
have to be discarded. Such instructions are called transient
instructions [59], [50], [90], [96], [14], [78].
Network and Distributed Systems Security (NDSS) Symposium 2020
23-26 February 2020, San Diego, CA, USA
ISBN 1-891562-61-4
https://dx.doi.org/10.14722/ndss.2020.24271
www.ndss-symposium.org
Transient instructions are never committed, i.e., they are
never visible on the architectural level. Until the discovery of
transient-execution attacks, e.g., Spectre [50], Meltdown [59],
Foreshadow [90], [96], RIDL [91], and ZombieLoad [78], they
were not considered a security problem. These attacks exploit
transient execution, i.e., execution of transient instructions, to
leak secrets. This is accomplished by accessing secrets in
the transient-execution domain and transmitting them via a
microarchitectural covert channel to the architectural domain.
The original Spectre attack [50] used a cache covert chan-
nel to transmit data from the transient-execution domain to the
architectural domain. However, other covert channels can be
used, e.g., instruction timings [50], [80], contention [50], [8],
branch-predictor state [24], or the TLB [49], [80]. For other
covert channels [98], [97], [34], [22], [60], [44], [26], [32],
[64], [72], [79], it is still unclear whether they can be used.
often
relying
attacks,
Several countermeasures have been proposed against
transient-execution
software
workarounds. However, many countermeasures [99], [47],
[48], [3], [36] only try to prevent the cache covert channel
of the original Spectre paper [50]. This includes the ofﬁcially
suggested workaround from Intel and AMD [36], [3] to prevent
Spectre variant 1 exploitation. However, Schwarz et al. [80]
showed that this is insufﬁcient.
on
State-of-the-art countermeasures can be categorized into 3
classes based on how they try to stop leakage [67], [14]:
1) Mitigating or reducing the accuracy of the covert channel
communication, e.g., eliminating the covert channel or
making gadgets unreachable [48], [47], [99].
2) Aborting or preventing transient execution when accessing
secrets [36], [5], [3], [71], [37], [16], [69], [89].
3) Ensuring that secret data is unreachable [75], [30].
In this paper, we introduce a new type of countermea-
sure. Our approach, ConTExT, prevents secret data from
being leaked in the transient-execution domain by aborting or
preventing transient execution only in a very small number
of cases, namely when the secret data would leak into the
microarchitectural state. ConTExT is efﬁcient and still runs
non-dependent instructions out-of-order or speculatively. We
show that our approach prevents all Spectre attacks by design.
Implementing ConTExT in CPUs only requires repurpos-
ing one page-table entry bit (e.g., one of the currently unused
ones) as a non-transient bit. Instead of the actual secret value,
the CPU uses a dummy value (e.g., ‘0’) when accessing a
non-transient memory location during transient execution in
a way that could leak into the microarchitectural state. To
protect register contents, we introduce a non-transient bit per
register. For the special purpose rflags register (crucial
for control-ﬂow changes), we introduce a shadow_rflags
register to track the taint bit-wise, i.e., every bit in the rflags
register has a corresponding taint bit. Same as for the memory
locations, the CPU will use a dummy value during transient
execution instead of the actual register content.
Today, mitigating certain Spectre variants already requires
annotation of all branches that could lead to a secret-dependent
operation during misspeculation [46]. We simply move these
annotation requirements to the root, such that the developer
only has to annotate the actual variables that can hold secrets
in the source code. We do not propagate this information
on the source level, i.e., we do not perform software-level
taint-tracking. Instead, we propagate this information into the
binary to create a separate binary section for secrets, using
compiler and linker support. For this section, the operating
system sets the memory mapping to non-transient. We split
the stack into an unprotected stack and a protected stack.
The protected stack is marked as non-transient to be used as
temporary memory by the compiler, e.g., for register spills.
Local variables are moved to the transient stack. Similarly, we
also split the heap into an unprotected and a protected part and
provide the developer with heap-allocator functions that use
the protected part of the heap. Thus, there is no performance
impact for regular variables. Preventing leakage only requires
a developer to identify the assets, i.e., secret values, inside
an application. Obviously, this is much easier than identifying
all code locations which potentially leak secret values. If new
Spectre gadgets are discovered (e.g., prefetch gadgets [14]),
ConTExT-protected applications do not require any changes.
In contrast, if every code location which potentially leaks
secrets has to be ﬁxed, the application has to be changed for
new types of Spectre gadgets.
To emulate the minimal hardware adaptions ConTExT re-
quires, we over-approximate it via ConTExT-light1, a software-
only solution which achieves an over-approximation of the be-
havior using existing features of commodity CPUs. ConTExT-
light relies on the property that values stored in uncacheable
memory can generally not be used inside the transient-
execution domain [21], [59], except for cases where the value
is architecturally in registers, or microarchitecturally in the
load buffer, store buffer, or line ﬁll buffer. While ConTExT-
light does not provide complete protection on most commodity
systems due to leakage from these buffers, it can provide
full protection on Meltdown- and MDS-resistant CPUs, e.g.,
on AMD CPUs, as long as secrets are not in registers. In
this paper, we focus on mitigating Spectre-type attacks and
consider Meltdown-type attacks out-of-scope. ConTExT-light
also allows determining an upper bound for the worst-case
performance overhead of the hardware solution. However,
this upper bound is not tight, meaning that the actual upper
bound can be expected to be substantially lower. Compared
to practically deployed defenses against certain Spectre vari-
ants [46], ConTExT requires only a simpler direct annotation
of secrets inside the program, which can be easily added to any
existing C/C++ program to protect secrets from being leaked
via transient-execution attacks.
We evaluate the security of ConTExT on all known Spectre
attacks. Due to its principled design, ConTExT prevents the
1https://github.com/IAIK/contextlight
leakage of secret data in all cases, as long as the developer
does not actively leak the secret. We evaluated the performance
overheads of ConTExT-light for several real-world application
where we identify and annoted the used secrets. Depending
on the application, the overhead is between 0 % and 338 %.
In most cases it is lower than the overhead of the currently
recommended and deployed countermeasures [36], [5], [3],
[71], [75], [16], [53], [87]. To further support the performance
analysis, we extended the Bochs emulator with the non-
transient bits for registers and page tables and extended it with
a cache simulator.
Concurrent to our work, NVIDIA patented a closely related
approach to our design [10]. However, they do not provide
protection for registers, but only for memory locations.
Contributions. The contributions of this work are:
1) We propose ConTExT, a hardware-software co-design for
considerate transient execution, fully mitigating transient-
execution attacks.
2) We show that on all levels, only minimal changes are
necessary. The proposed hardware changes can be partially
emulated on commodity hardware.
3) We demonstrate that ConTExT prevents all known Spectre
variants, even if they do not rely on the cache for the covert
channel.
4) We evaluate the performance of ConTExT and show that
the overhead is lower than the overhead of state-of-the-art
countermeasures.
Outline. The remainder of this paper is organized as follows.
In Section II, we provide background information. Section III
presents the design of ConTExT. Section IV details our ap-
proximative proof-of-concept implementation on commodity
hardware. Section V provides security and performance eval-
uations. Section VI discusses the context of our work. We
conclude our work in Section VII.
II. BACKGROUND
In this section, we give an overview of transient execution.
We then discuss known transient-execution attacks. We also
discuss the proposed defenses and their shortcomings.
A. Transient Execution
To simplify processor design and to allow superscalar
processor optimizations, modern processors ﬁrst decode in-
structions into simpler micro-operations (µOPs) [25]. With
these µOPs, one optimization is not to execute them in-order
as given by the instruction stream but to execute them out-
of-order as soon as the execution unit and required operands
are available. Even in the case of out-of-order execution,
instructions are retired in the order speciﬁed by the instruction
stream. This necessitates a buffer, called reorder buffer, where
intermediate results from µOPs can be stored until they can
be retired as intended by the instruction stream.
In general, software is seldom purely linear but contains
(conditional) branches. Without speculative execution, a pro-
cessor would have to wait until the branch is resolved before
execution can be continued, drastically reducing performance.
To increase performance, speculative execution allows a pro-
cessor to predict the most likely outcome of the branch using
2
various predictors and continue executing along that direction
until the branch is resolved.
e.g., by overﬁlling the RSB, or by overwriting the return
address on the software stack.
At runtime, a program has different ways to branch, e.g.,
conditional branches or indirect calls. Intel provides several
structures to predict branches [41], e.g., Branch History Buffer
(BHB) [7], Branch Target Buffer (BTB) [57], [23], the Pattern
History Table (PHT) [25], and Return Stack Buffer (RSB) [25],
[63], [51]. On multi-core CPUs, Ge et al. [26] showed that the
branch prediction logic is not shared among physical cores,
preventing one physical core from inﬂuencing another core’s
prediction.
Speculation is not limited to branches. Processors can,
e.g., speculate on the existence of data dependencies [35]. In
the case where the prediction was correct, the instructions in
the reorder buffer are retired in-order. If the prediction was
wrong, the results are squashed, and a rollback is performed
by ﬂushing the pipeline and the reorder buffer. During that
process, all architectural but no microarchitectural changes are
reverted. Any instruction getting executed out-of-order or spec-
ulatively but not architecturally is called a transient instruction.
Transient execution may have measurable microarchitectural
side effects.
B. Transient-Execution Attacks & Defenses
While transient execution does not inﬂuence the architec-
tural state, the microarchitectural state can change. Attacks
that exploit these microarchitectural state changes to extract
sensitive information are called transient-execution attacks.
So-called Spectre-type attacks [50], [35], [51], [63] exploit
prediction mechanisms, while Meltdown-type attacks [59],
[90], [91], [78], [13], [96] exploit transient execution following
an architectural or microarchitectural fault.
Kocher et al. [50] ﬁrst introduced two variants of Spectre
attacks. The ﬁrst, Spectre-PHT (Variant 1), exploits the PHT
and the BHB such that the processor mispredicts the code
path following a conditional branch. If the transiently executed
code loads and leaks the secret, it is called a Spectre gadget.
Kiriansky and Waldspurger [49] extended this attack from
loads to stores, enabling transient buffer overﬂows and, thus,
extending the number of possible Spectre gadgets.
Spectre-BTB (Variant 2) [50] targets indirect branches and
poisons the BTB with attacker-chosen destinations, leading
to transient execution of the code at
this attacker-chosen
destination. An attacker mistrains the processor by performing
indirect branches within the attacker’s own address space to
the address of the chosen address, regardless of what resides
at this location. Chen et al. [17] showed that this can also be
exploited in SGX.
For a memory load, the processor checks the store buffer
for stored values to this memory location. Spectre-STL (Vari-
ant 4) [35], Speculative Store Bypass, exploits when the
processor transiently uses a stale value because it could not
ﬁnd the updated value in the store buffer, e.g., due to aliasing.
Spectre-RSB [51] and ret2spec [63] are Spectre variants
targeting the RSB, a small hardware stack of recent return
addresses pushed during recent call instructions. When a ret
is executed, the top of the RSB is used to predict the return
address. An attacker can force misspeculation in various ways,
All of the attacks discussed above have three things in
common. First, they all use transient execution to access data
that they would not access in normal, considerate execution.