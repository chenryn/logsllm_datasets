          case '"':
              esc = *escapestr;
              break;
          case '\032':
              esc = 'Z';
              break;
      }
      // IGNORE ...
      if (esc) {
          // IGNORE ...
          *newstr++ = '\\';
          *newstr++ = esc;
      }
  2. `mysqlnd_cset_escape_quotes()`，当服务器响应状态中包含`SERVER_STATUS_NO_BACKSLASH_ESCAPES` _（0x200）_ 时被调用
    * 将`'`字符转义为`''`，以消除字符串中单引号对SQL语句结构和语义的影响
因此，当我们看到在Connector/J里出现Escape处理相关内容时，也天真的以为和PHP中情况类似，可以用来过滤上述特殊字符，一定程度上防御SQL注入。
但现实根本不是这样，Connector/J中的`EscapeProcessor`是JDBC的Escape语法实现。简单的举个例子自己体会：
    SELECT * FROM table_A WHERE field_A LIKE '%=%' {ESCAPE '='}
上述SQL语句的查询条件被解释为以`%`字符结尾的字符串，即第二个通配符`%`被转义为普通字符，转义字符为`=`。
除此之外，还有调用存储过程、调用数学函数、时间格式化、外联等语法定义。
以下是关于JDBC Escape Syntax的文档说明：
  * [Oracle Database JDBC Developer’s Guide](https://docs.oracle.com/cd/E11882_01/java.112/e16548/apxref.htm#JJDBC28913)
  * [Apache JDBC Reference](http://db.apache.org/derby/docs/10.1/ref/rrefjdbc1020262.html)
而Connector/J在其基础上也扩展了少量属于自己的Escape关键字，具体参考[EscapeProcessor](https://github.com/mysql/mysql-connector-j/blob/release/5.1/src/com/mysql/jdbc/EscapeProcessor.java)的代码实现。
更有趣的是SQL语法中也有ESCAPE关键字，主要用于在模糊查询中指定转义字符，和JDBC Escape语法中的`{ESCAPE }`有些类似：
    SELECT * FROM table_A WHERE field_A LIKE '%=%' ESCAPE '='
好像有点意思。
#### **客户端应用实现**
相比前几个开发过程中可控性较小的阶段，在主观控制更强的这个阶段可以说是五花八门，无奇不有，乱七八糟。
列举下目前常见的数据库操作相关的应用层实现方式：
  1. 字符串拼接
    * 直接拼接
    * 过滤 _（转义、移除敏感字符等）_ 后拼接
  2. 输入限制
    * 黑名单 _（关键字、简单语义等）_ 识别或阻断
    * 基于业务需求的白名单或规则 _（字符、长度等）_ 限制
  3. 预处理
简单的说，这里就是我们看到的SQL注入点，而要负责保证数据库操作安全的，却是几个阶段中能力相对较弱或是对数据库协议和实现相对更不了解的我们应用层开发人员。
#### **关于预处理**
预处理应该是大部分应用层开发人员对于数据库操作安全的救命稻草 _（当然，它本不是为了防止SQL注入而生的）_
，我们看看Connector/J驱动的预处理是如何做的：
  1. 通过`ConnectionImpl.prepareStatement()`返回`PreparedStatement`实例对象
    * 同样会处理SQL语句中的Escape字符
    * 判断`useServerPreparedStmts`属性的值
      * 默认为`false`，调用`clientPrepareStatement()`获取`PreparedStatement`实例，接下来的操作实际上都是由驱动层模拟预处理协议实现的，即伪预处理
      * 若为`true` _（可以通过DriverManager的重载方法getConnection(String url, java.util.Properties info)设置）_ ，会经过一系列判断 _（如MySQL版本、SQL语句类型、limit部分检查等）_ 获取`ServerPreparedStatement`实例，而实例化完成前将调用`serverPrepare()`方法向MySQL服务器发送`PREPARE`指令数据包，即真预处理
  2. `PreparedStatement.setXXX()`为各占位符绑定数据（以`setString()`为例）
    * 伪预处理依赖Java语言的强类型处理如数字、时间等类型数据绑定，而对字符串类型中的特殊字符前加反斜杠`\`进行转义 _（类似上文mysqlnd的escape slashes相关处理方式）_ ，并在字符串外层包裹单引号保护，再进行“数据绑定”
    * 真预处理简单的进行了数据绑定
  3. `PreparedStatement.executeQuery()`执行查询操作
    * 伪预处理中准备执行的SQL语句实际上是已经经过上述对参数值进行转义操作之后，拼接而成完整语句，调用`ConnectionImpl.execSQL()`发送`QUERY`指令数据包
    * 真预处理转由`ServerPreparedStatement.serverExecute()`发送`EXECUTE`指令数据包
在上述第2点中提到Connector/J在伪预处理时部分依赖了Java语言的强类型特点，那么对于弱类型的PHP语言，mysqlnd并没有模拟实现客户端的伪预处理，而是直接走的预处理协议。
为了严谨，笔者继续阅读了[MySQL Connector/NET](https://github.com/mysql/mysql-connector-net/)的预处理实现部分源码。驱动在调用`MySqlCommand.Prepare()`过程中，会通过`NativeDriver.PrepareStatement()`向MySQL服务器发送`PREPARE`指令数据包，即也是真正的预处理方式。
好吧，JDBC这朵奇葩。
MySQL服务接收到`PREPARE`指令数据包会调用`mysqld_stmt_prepare()`进行缓存、SQL语句解析 _（包括识别和存储?占位符）_
等一系列操作。收到`EXECUTE`指令数据包后，`mysqld_stmt_execute()`会根据`stmt_id`在缓存集合中拿到对应的statement对象，通过`set_parameters()`中的`setup_conversion_functions()`设置每个参数的转换函数，`insert_params()`遍历参数调用对应的转换函数进行类型转换和赋值，过程中字符串类型参数中的特殊字符会被转义。
根据以上对预处理过程的了解，我们尝试对一种比较流行的说法：预处理可以预防绝大部分SQL注入漏洞的产生，作个简单的解释。
在进入SQL编译执行阶段前，数字、时间等类型数据经过强制的类型转换、字符串经过特殊字符转义和单引号包裹保护，可以保证输入的大多数数据都被净化成安全的“正常数据”。
那么这绝大部分以外的情况 _（这里说的情况，也是基于常见实际的应用场景，而非一些特殊的使用场景）_ ，相信经验丰富的老司机们肯定知道：`ORDER
BY`和`GROUP
BY`，也可以参考一下[SQLMap](https://github.com/sqlmapproject/sqlmap/)项目，其`error_based`、`boolean_blind`、`time_blind`的payload中，都包含了对这两种情况的测试用例。
还是一个老问题，为什么？
熟悉SQL语法的同学应该能够清楚，在`ORDER BY`和类似条件关键字用法中，之后只能接列名或列对应索引号：
    SELECT * FROM table_A ORDER BY field_A
    SELECT * FROM table_A ORDER BY `field_A`
    SELECT * FROM table_A ORDER BY 1
在这种句式下，我们很容易发现一些关于预处理的小问题：
  * 如果使用数字类型的列索引号，是可以被预处理保护的，但实际应用场景很少
  * 如果参数被识别为字符串类型，经过预处理后会被单引号包裹导致`ORDER BY`条件失效
因此，出现这类需求时，开发人员大多会选择字符串拼接来实现，预处理的保护也就失效了。如果开发过程中没有意识到这个问题而忽略了数据的合法性校验，导致列名或升降序关键字
_（ASC和DESC）_ 等可控，就很有可能出现SQL注入等安全问题。
#### **关于Bypass**
关于SQL注入的Bypass技巧，互联网上一搜一大把，我们做个简单的分类：
  1. 简单规避
    * 关键字限制绕过
  2. SQL解析特性
    * 空格限制绕过
  3. SQL语法特性
    * 字符限制绕过
    * 语法限制绕过
  4. 编码
    * 引号限制绕过
    * 防御规避
在PHP+MySQL环境的代码审计项目中，宽字节注入 _（我们把它归在了编码类）_ 是一个比较有意思的场景，很多同学对它的原理也比较含糊，所以我们简单聊聊。
以常见的GBK字符集为例：
  * 单字节区间为`00`到`7f`时，和ASCII一致 _（为了与ASCII兼容）_
  * 高位字节区间为`81`到`fe`，低位字节区间为`40`到`fe`时，可以双字节表示汉字和图形符号
在PHP+MySQL环境中，当应用层调用mysqln的`set_charset()`时，会向服务器发送`SET NAMES
[CHARSET]`指令，该指令相当于三条指令：
    SET character_set_client = [CHARSET];
    SET character_set_results = [CHARSET];
    SET character_set_connection = [CHARSET];
指定了客户端发送过来的数据的字符集。当SQL语句在服务器被解析时，会以该字符集进行转码。
因此，可以在`'`等会被转义的字符前增加如`%df`等字符，当`df`遇到`5c` _（\转义字符）_ 时，会被当成一个中文字符处理，导致转义的保护被绕过：
  * `mysql_escape_string()`受影响
  * `mysqli_escape_string()`会对`df`也进行转义，即变为`5c df 5c 27`，无影响
### 面向对象的数据库操作
结合上面的所有内容我们可以发现，SQL的问题归根结底是因为它本身是一串“plain
text”，太容易被改变，而又没有任何一个阶段可以校验它结构的合法性，或是明确的将它的执行结果和使用者的预期数据对应绑定起来。
对于结构化或是数据绑定这种概念，目前市面上也有很多在设计中融入了面向对象思想的数据库操作层，如Hibernate的QBC。
我们先在这里留一个坑，不做深入讨论，在分析完NoSQL注入后，再对比展开。
### 不是结束的结语
本文说了这么多和SQL注入并没有半毛钱关系的内容，希望能对大家深入理解SQL注入底层原理有一丢丢的帮助。
下篇文章将选择目前比较流行的非关系型数据库MongoDB，同样会从这五个阶段切入，与SQL对比，为大家继续简单分析NoSQL注入相关内容。
### 参考
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 