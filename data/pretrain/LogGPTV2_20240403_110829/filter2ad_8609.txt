# llvm的去平坦化
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> —看见while和switch不是”迷宫”，就是”虚拟”。
为了保护程序虚拟机是最常用的一种手段，并不是说用了多复杂的算法。主要是会花费大量的时间来把程序还原为本来的样子。使用OLLVM项目中的控制流平坦化、虚假控制流、指令替换等混淆策略会进一步加大分析的难度。
## Ollvm是什么
llvm是一个底层虚拟机，OLLVM（Obfuscator-LLVM）是瑞士西北应用科技大学安全实验室于2010年6月份发起的一个项目，这个项目的目标是提供一个LLVM编译套件的开源分支，能够通过代码混淆和防篡改，增加对逆向工程的难度，提供更高的软件安全性。目前，OLLVM已经支持LLVM-4.0.1版本;所使用的编译器是clang。
[详细介绍平坦化的介绍](http://ac.inf.elte.hu/Vol_030_2009/003.pdf)
[llvm的安装方法](https://www.jianshu.com/writer#/notebooks/21909981/notes/37816527)
llvm保护的大概方法是：程序主要使用一个主分发器来控制程序基本块的执行流程进而模糊每个模块之间的联系。
源代码如下：
    #include 
    int check(int a)
    {
        if(a>0)
            return 3;
        else
            return 0;
    }
    int main()
    {
        int a;
        scanf("%d",&a);
        if (check(a)==3)
        {
            puts("good");
        }
        else
        {
            puts("wrong");
        }
        return 0;
    }
正常编译如下
使用llvm编译
    ./build/bin/clang main.c -o test -mllvm -fla
程序流程图明显复杂很多。
看一下check函数
原程序
    signed __int64 __fastcall check(__int64 a1)
    {
      char v1; // bl@2
      signed __int64 result; // rax@8
      int i; // [sp+1Ch] [bp-14h]@1
      srand(0x64u);
      for ( i = 0; i    1. 函数的开始地址为序言的地址
>   2. 序言的后继为主分发器
>   3. 后继为主分发器的块为预处理器
>   4. 后继为预处理器的块为真实块
>   5. 无后继的块为retn块
>   6. 剩下的为无用块
>
获取相关的块列表地址，就能够通过angr定义规则，来约束函数模块。
（按照miasm功能介绍，可以获取反编译后的模块地址，但因为报错太多就放弃了。）
之后便找到了bird大佬写的脚本，将上面报错部分修改之后拿来用。
程序恢复结果：
## 2018 X-NUCA 使用脚本去平坦化
初始
恢复之后
但程序还使用了”指令替换” -subv 里面还有指令替换，好在程序的逻辑并不复杂。
第一部分比较复杂：
第二部分就比较清晰了：
根据后面的来观察执行的操作，函数加密分为两部分。每部分各16个字符，后面16个进行的是三次异或运算。所有运算的结果都储存在6130D0中，动态调试的过程中要时刻注意其中的结果。(取巧的方法：因为我们可以确定flag的前七位是X-NUCA{ ，通过结果计算，这样会更容易找到加密的位置）
    str = '012345abcdefghijklmnopqrstuvwxyz'
    a=[0x68,0x1C,0x7C,0x66,0x77,0x74,0x1A,0x57,0x06,0x53,0x52,0x53,0x02,0x5D,0x0C,0x5D]
    b=[0x04,0x74,0x46,0x0E,0x49,0x06,0x3D,0x72,0x73,0x76,0x27,0x74,0x25,0x78,0x79,0x30]
    flag1=""
    flag2=""
    j=0
    for i in range(16):
        flag1+=chr(a[i]^ord(str[i]))
    for i in range(16):
        j=i+16
        flag2+=chr(b[i]^ord(str[j])^a[i]^ord(str[i]))
    print flag1+flag2
总结：符号执行对于虚拟机的分析作用很大，且二进制分析工具了解太少，如果没有bird
大佬的脚本，现在也不能成功去平坦成功一次。而且也看到了，对于指令替换便需要重新写一新的脚本。 miasm的功能很强大，应当尽快掌握。
文章文件链接：
提取码：a0wt
## 文章参考：
bird[@tsrc](https://github.com/tsrc "@tsrc") 
[miasm](https://github.com/cea-sec/miasm)
[Deobfuscation: recovering an OLLVM-protected
program](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)