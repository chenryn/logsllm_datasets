title:NVBitFI: Dynamic Fault Injection for GPUs
author:Timothy Tsai and
Siva Kumar Sastry Hari and
Michael B. Sullivan and
Oreste Villa and
Stephen W. Keckler
1
4
0
0
0
.
1
2
0
2
.
7
8
9
8
4
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
7
-
2
7
5
3
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
t
s
1
5
1
2
0
2
2021 51st Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
NVBitFI: Dynamic Fault Injection for GPUs
Timothy Tsai, Siva Kumar Sastry Hari, Michael Sullivan, Oreste Villa, Stephen W. Keckler
{timothyt,shari,misullivan,ovilla,skeckler}@nvidia.com
NVIDIA
Abstract—GPUs have found wide acceptance in domains such
as high-performance computing and autonomous vehicles, which
require fast processing of large amounts of data along with
provisions for reliability, availability, and safety. A key component
of these dependability characteristics is the propagation of errors
and their eventual effect on system outputs. In addition to
analytical and simulation models, fault injection is an important
technique that can evaluate the effect of errors on a complete
computing system running the full software stack. However, the
complexity of modern GPU systems and workloads challenges
existing fault injection tools. Some tools require the recom-
pilation of source code that may not be available, struggle
to handle dynamic libraries, lack support for modern GPUs,
or add unacceptable performance overheads. We introduce the
NVBitFI tool for fault injection into GPU programs. In contrast
with existing tools, NVBitFI performs instrumentation of code
dynamically and selectively to instrument the minimal set of
target dynamic kernels; as it requires no access to source code,
NVBitFI provides improvements in performance and usability.
The NVBitFI tool is publicly available for download and use at
https://github.com/NVlabs/nvbitﬁ.
Keywords-Fault injection, GPU, dynamic instrumentation, er-
ror propagation
I. INTRODUCTION
Complex computing systems increasingly use GPUs due
to their high performance and power efﬁciency. General-
purpose computing with GPUs has been used with large-scale
machines and high-performance computing (HPC) for over a
decade; this trend looks likely to continue as a majority of
the ten fastest and most efﬁcient supercomputers in the world
currently use GPUs [1], [2]. Another trend that has accelerated
the use of GPUs is the advent of deep neural networks
(DNNs) with implementations that are readily amenable to the
massive parallelism available in GPUs. While many of these
DNN installations are located in data centers, DNNs are also
ﬁnding widespread adoption in safety-critical systems such as
autonomous vehicles (AV) for processing data from cameras
and other sensors.
Both HPC and safety-critical systems have dependability re-
quirements, albeit in different ways. An HPC system presents
a large state-time space for faults to occur: a large system
size contains many potentially faulty components, and the
relatively long run-time of HPC applications allows faults
over a large time period to potentially affect outputs. For
an HPC system, both reliability (are the results correct?) and
availability (are results produced?) are important. In contrast,
AV systems (an example of a safety-critical system) are em-
bedded control systems that continuously process a stream of
incoming telemetry from cameras, radars, LiDARs, GPS, and
other sensors to accurately perceive the environment around
the vehicle. While the state-time space for an AV system is
smaller due to less computing hardware and lower run-time
(at least in terms of processing a single set of telemetry), the
safety requirements for AV systems are very stringent because
of the potential for loss of life or signiﬁcant property damage.
As a result, AV computing systems generally have backup
modes of operation even in the event of catastrophic failure
(e.g., power or clock signal failures). However, undetected
errors may fail to trigger the backup mode and instead result
in silent data corruption (SDC) that leads to erroneous vehicle
behavior and accidents.
Although faults can occur in the CPU, GPU, memory,
storage, network, power supplies, and other components of
a computing system, this paper focuses on faults that occur
in GPUs. For these GPU-based systems, much of the com-
putation and live state is in the GPUs, and thus much of the
opportunity to affect live state is in the GPU. However, most of
these GPU faults do not propagate to affect the outputs of the
program. For example, faults may ﬂip values in non-live bits
that are never read after the corruption, or the erroneous values
may be not be mathematically signiﬁcant to the computation
of the ﬁnal program outputs.
Estimation of the probability that a fault will affect program
outputs is needed to understand the expected failure rate of
a system and its components. The architectural vulnerability
factor (AVF) [3] is the probability that a fault will result in a
visible error in the ﬁnal output of a program. The product of
the raw error rate and the AVF results in the visible error rate
for the program on a particular system. The AVF is affected
by both the control and data ﬂow of the program as well as the
design of the underlying hardware. As a result, estimating the
AVF requires understanding a speciﬁc program as it executes
on a speciﬁc hardware processor.
Several techniques exist for estimating the error propagation
of a GPU-based computing system. Section II provides an
overview of these techniques and the related published litera-
ture. Some of the AVF estimation techniques use models that
simulate a microarchitectural representation of the GPU and
inject faults into the simulation model to estimate AVF. Other
techniques perform architectural fault injection by injecting
errors into physical GPUs.
This paper presents a new tool called NVBitFI that instru-
ments a target program to inject errors into NVIDIA GPUs.
In contrast to existing tools, NVBitFI offers the following key
advantages:
• Binary instrumentation. NVBitFI instruments the SASS
978-1-6654-3572-7/21/$31.00 ©2021 IEEE
DOI 10.1109/DSN48987.2021.00041
284
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:23:22 UTC from IEEE Xplore.  Restrictions apply. 
PHYSICAL-GPU FAULT INJECTION TOOLS.
TABLE I
Year
Tool
2020 NVBitFI
2017
2016
2014 GPU-Qin [6]
2011 Hauberk [7]
SASSIFI [4]
LLFI-GPU [5]
Injection mechanism Fault model level Needs source code?
NVBit
SASSI
LLVM
cuda-gdb
source code
SASS
SASS
LLVM IR
SASS
C++
No
Yes
Yes
No
Yes
Inject libraries?
Yes
No
No
Maybe
No
[8] code that represents the lowest level GPU assembly
code, which allows NVBitFI to perform instrumentation
without the need for source code.
• Dynamic instrumentation. NVBitFI intercepts dynamic
GPU kernel calls, which allows it to target dynamically
loaded libraries, including libraries that are not known at
build time. The instrumentation is limited to the minimal
set needed for error injection,
thus limiting the total
performance overhead of the instrumentation code.
• Architectural abstraction. NVBitFI presents a single
interface that works on all recent NVIDIA architecture
families including Kepler, Maxwell, Pascal, Volta, and
Ampere GPUs.
NVBitFI is a module built using the NVBit dynamic bi-
nary instrumentation framework [9]. NVBit and the NVBitFI
architecture, injection mechanisms, supported fault models,
and usage are described in Section III. We present examples
of usage for NVBitFI using the SpecACCEL benchmark in
Section IV, including showing how different tool options affect
AVF results and performance overhead. Section V discusses
future work and ideas. The NVBitFI tool is available for down-
load at https://github.com/NVlabs/nvbitfi.
II. RELATED WORK
Hardware injection through program transformation.
Program transformation tools inject faults into a program
running on a physical GPU by instrumenting the target GPU
program. This instrumentation injects errors by corrupting
the architecturally visible program state, such as register or
memory values. The injected error then propagates at hardware
speeds as the instrumented program executes on the GPU.
While this paper focuses on CUDA-programmable GPUs, the
same concepts are applicable to other GPUs. Table I lists
several program transformation tools and summarizes the fault
injection mechanism for each one.
Hauberk [7] uses direct modiﬁcation of C++ source code to
introduce injection code. Because C++ code must be translated
into GPU assembly code, the ultimate GPU state corruption
depends on how the compiler translates both the original
program code and the injection code. LLFI-GPU [5] inserts
injection code into the LLVM intermediate representation (an
IR that is closer to the underlying hardware architecture),
which is then compiled into PTX [10] and then the SASS [8]
GPU assembly code.
Several tools inject errors directly into the GPU assembly
code (SASS), which is closest to the hardware and is not
subject to compiler scheduling variations. SASSIFI [4] is a
compiler framework based on the SASSI [11] framework that
inserts error injection code as a part of the ﬁnal compiler pass
that generates the SASS code. GPU-Qin [6] is a debugger-
based tool that uses cuda-gdb [12] to set breakpoints at which
error are injected using debugger commands. Our NVBitFI
tool is similar to SASSIFI and GPU-Qin as they all operate
on the SASS level. The key difference is that NVBitFI uses
the NVBit [9] framework to perform dynamic code instrumen-
tation that intercepts dynamic kernel calls and inserts error
injection code on the ﬂy (1) without requiring any source
code or recompilation and (2) without affecting any instruction
scheduling or register allocation of the target program.
Simulator-based injection. Simulation-based tools may be
based on microarchitectural, RTL, netlist, or circuit models.
Because simulation-based models have a trade-off between
ﬁdelity and simulation speed, most tools in the published
literature are based on microarchitectural models, although
proprietary tools based on lower-level representations may
exist. Several GPU families are represented by prior tools,
including SIFI [13] based on the AMD Southern Islands
family using Multi2Sim v4.2 [14], GUFI [15] and GPGPU-
SODA [16] based on NVIDIA CUDA [17] GPUs both using
GPGPU-Sim [18], and tools based on AMD APUs [19], [20]
using gem5 [21]. Because these tools are based on openly
available simulators, they cannot truly represent the behav-
ior of a commercial GPU. While simulator-based injection
tools can capture the effects of speciﬁc microarchitecture
errors, they are also several orders of magnitude slower than
hardware-based injection frameworks, limiting them to small
programs or program fragments.
Discussion. The key advantages of NVBitFI are due to
dynamic instrumentation of program binaries and the use
of a generalized GPU architecture abstraction. Binary in-
strumentation allows targeting of programs without requiring
source code and can instrument static or dynamically loaded
libraries. NVBitFI can also inject errors into dynamically
selected basic blocks or kernels, eliminating instrumentation
overhead in the rest of the program. Although SASS is the
name for the NVIDIA GPU instruction set architecture (ISA),
SASS instructions and their encodings can change across GPU
generations. NVBitFI leverages the architectural abstraction
offered by NVBit to handle all recent NVIDIA GPU families,
from Kepler to Ampere. Finally, NVBitFI runs at GPU speeds,
meaning error injection campaigns are performed at rates of
billions of instructions per second.
III. NVBITFI ARCHITECTURE AND DESCRIPTION
NVBitFI is a program transformation fault injection tool
that offers ease of use, low overhead, and the ability to target
285
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:23:22 UTC from IEEE Xplore.  Restrictions apply. 
Step 1:  Generate target program profile
LD_PRELOAD=profiler.so target_program
Step 2:  Select single-injection parameters
Target program profile:
One line per dynamic kernel showing: 
ID for the dynamic kernel
kernel name
instruction counts per opcode
Example:
index: 0
kernel_name: cpu_stencil_15_gpu
FADD: 88725720,  FADD32I: 0, …
nvbitfi-injection-info.txt:
7                                   # Instruction group
0                                         # Bit-flip model
cpu_stencil_15_gpu                     # Kernel
1                                # Target kernel count
893722225       # Target instruction count
0.602052984996        # Register selection
0.237695214247   # Bit-pattern selection
Step 4:  Analyze target program output
sdc_check.sh
Step 3:  Inject fault
LD_PRELOAD=injector.so target_program
Outcome determination
SDC
DUE
Masked
nvbitfi-injection-log-temp.txt:
kernel name
target kernel count
number of static and dynamic 
instructions
bit error XOR mask
register before and after values
register name
Opcode
instruction address
thread id
Fig. 1.
commands along with parameter and output ﬁles.
Injection procedure for a single fault showing proﬁling and injection
dynamic libraries and other software for which source code
is not available. These qualities are due in large part to the
NVBit framework. In this section, we describe (1) the NVBitFI
software architecture, (2) the supported fault models, and
(3) the parts of the NVBit framework that are pertinent to
NVBitFI. NVBitFI supports both transient and permanent fault
models.
A. NVBitFI Software Architecture
The NVBitFI package consists of two types of tools,
proﬁlers and injectors, which are implemented as dynamic
libraries that are attached to a target program. Proﬁlers analyze
a target program to build a proﬁle of dynamic instruction
counts for every opcode in every kernel. The instruction proﬁle
represents the uniform distribution of dynamic faults from
which a random set of faults can be selected. Injectors use the
proﬁle for a given program to inject faults into that program.
Figure 1 shows the steps used to inject a transient fault
including (1) generating a program proﬁle to determine the
set of eligible injection points, (2) selection of one or more
injection points for a particular experiment, (3) injecting the
fault(s) by modifying the program binary, and (4) running the
modiﬁed program and comparing to a golden output state to
determine if an error propagated to the program output.
The most basic mode of usage of NVBitFI consists of
attaching either a proﬁler or an injector library to the target
program via the LD_PRELOAD environment variable. For ex-
ample, attaching the proﬁler library to the target_program
is performed in the bash shell with the following command:
LD_PRELOAD=/profiler.so target_program
Proﬁler. The proﬁler is deployed in a profiler.so library.
To prepare for the injection campaign, the proﬁler creates a
proﬁle containing one line for every dynamic kernel and the
total dynamic instruction counts for every opcode in every
thread in that dynamic kernel (Figure 1, step 1). Instruc-
tions that are not executed based on a predicate register are
not included in the proﬁle. A dynamic instruction will be
selected from the set of executed instructions by choosing
a random number n from the set 1..N, where N is the
total number of proﬁled dynamic instructions (Figure 1, step
2). This nth instruction is then translated into a tuple of
 values that
instructs the transient fault
injector to inject an error for
the indicated dynamic instruction. When that instruction is
reached, the injection code will corrupt the destination register
of the instruction based on the bit-pattern selection value. The
NVBitFI package includes convenience scripts to automate the
proﬁling and fault selection process.
Because the proﬁling process requires the instrumentation of
every dynamic instruction, it can take a lot of time. To address
this issue, NVBitFI offers two types of proﬁling, exact and
approximate. Exact proﬁling counts every dynamic instruction.
Approximate proﬁling only counts the dynamic instructions in
the ﬁrst instance of every static kernel and assumes that the
instruction counts for subsequent instances of the same static
kernel are the same. In Section IV, we compare the results
and overheads for these two types of proﬁling.
A permanent fault injection campaign does not require an
instruction proﬁle for a target program. However, a proﬁle
increases efﬁciency by only injecting instructions that are
known to be executed for that program. The set of executed
opcodes consists of all opcodes from the proﬁle with a non-
zero dynamic instruction count.
Injector. The injector is deployed in an injector.so
library for transient faults and a pf_injector.so library for
permanent faults. The transient fault injector injects a fault
for a single dynamic instruction, whereas the permanent fault
injector corrupts all instances of a speciﬁed opcode.
B. Fault Models
Transient fault model. The main fault model supported
by NVBitFI is a transient fault
that occurs in the GPU
compute pipeline or memory read subsystem. Table II shows
the parameters for the transient fault injector. Each parameter
is speciﬁed in the parameter ﬁle as a separate line. The ﬁrst
two parameters indicate the fault type, with the arch state id
specifying the type of instructions that should be injected and
the bit-ﬂip model indicating the type of bit-level corruption.
The last ﬁve parameters specify the exact fault to be injected.
As described above, the tuple of  values speciﬁes the dynamic instruction to
inject. The exact error pattern depends on the selected bit-ﬂip
model indicated for the bit pattern value.
Users that are concerned about reliability and safety will
often select processors with ECC protection for large on-chip
memory structures, such as register ﬁles and caches. Thus, the
remaining vulnerability to faults lies outside of these ECC-
protected structures. For faults in the unprotected components
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:23:22 UTC from IEEE Xplore.  Restrictions apply. 
286
Category
Parameter name
arch state id
Description
An integer representing the instruction subset to inject
TABLE II
TRANSIENT FAULT PARAMETERS.
1) G FP64, FP64 arithmetic instructions
2) G FP32, FP32 arithmetic instructions
3) G LD, instructions that read from memory
4) G PR, instructions that write to predicate registers only
5) G NODEST, instructions with no destination register
6) G OTHERS
7) G GPPR, instructions that write to general purpose and predicate regis-
ters, i.e., G GPPR = all - G NODEST
8) G GP, instructions that write to general purpose registers, i.e., G GP
registers = all - G NODEST - G PR
An integer representing the type of bit-error pattern
Fault types
bit-ﬂip model
1) FLIP SINGLE BIT, ﬂip a single bit
2) FLIP TWO BITS, ﬂip two adjacent bits
3) RANDOM VALUE, write a random value
4) ZERO VALUE, write value 0
The name of the target GPU kernel
An integer n representing the (n + 1)th dynamic instance of the target kernel,
e.g., 0 indicates the ﬁrst dynamic instance
An integer n representing the (n+1)th dynamic instance of the target instruction
instruction count
destination register A ﬂoating-point value [0,1) that determines which general-purpose or predicate
kernel name
kernel count
Speciﬁc target
bit-pattern value
register to inject depending on the arch state id
A ﬂoating-point value [0,1) that determines the bit-error mask depending on
the bit-ﬂip model
1) FLIP SINGLE BIT: 0x1<<(32 × value)
2) FLIP TWO BITS: 0x3<<(31 × value)
3) RANDOM VALUE: 0xffffffff × value
4) ZERO VALUE: mask is same as original register value, so that XOR
produces 0x0
TABLE III
PERMANENT FAULT PARAMETERS.
Parameter name Description
SM id
Lane id
Bit mask
Opcode id
An integer 0..N − 1 indicating which of the N SMs to inject
An integer 0..31 indicating which hardware lanes to inject
An integer representing the XOR bit mask
An integer 0..N − 1 indicating which opcode to inject. Each ISA will have a different set of N
opcodes. For example, the Volta ISA contains 171 opcodes.