AUO
ABJB
图11-2环境变量和参数数组（2）
图11-2中实线箭头代表ubp_av，而虚线箭头代表_environ，另外这段代码还将栈底地
址存储在一个全局变量里，以留作它用。
为什么要分两步赋值给_environ呢？这又是为了兼容bounded葱的祸。实际上，
INIT_ARGV_and_ENVIRON根据bounded支持的情况有多个版本，以上仅仅是假定
不支持bounded 的版本。
接下来有另一个宏：
DL_SYSDEP_osCH8CK I_1ibc_fatal1 :
这是用来检查操作系统的版本，宏的具体内容就不列出了。接下来的代码颜为繁杂，我
们过滤掉大量信息之后，将一些关键的函数调用列出：
Dthread_initialize_mininal();
_cxa_atexit(rt1d_tini, NULL, NULL);
_environ] ;
(*init) (argc, argv, environ) ;
_cxa_atexit(fini,NULL, NULL):
这一部分进行了一连串的函数调用，注意到_cxa_atexit函数是glibe的内部函数，等同
于atexit，用于将参数指定的函数在main 结束之后调用。所以以参数传入的 fini 和rtld_fini
均是用于main结束之后调用的。在_libc_start_main的末尾，关键的是这两行代码：
result = main (arge, argv, _environ):
exit (result) ;
在最后，main函数终于被调用，并退出。然后我们来看看exit的实现：
_start -> _1ibc_atart_main -> exit:
void exit (int status)
while (_exit_funcs 1 = NULL)
_exit_funcs =
 +
程序员的自我修养一—链接、装载与库
---
## Page 347
324
第11章运行库
_exit (status):
其中_exit_funcs 是存储由_cxa_atexit 和 atexit 注册的函数的链表，西这里的这个 while 循
环则遍历该链表并逐个调用这些注册的函数，由于其中碎代码过多，这里就不具体列出了。
最后的_exit函数由汇编实现，且与平台相关，下面列出i386的实现：
_exit1
nov1
Bov1
4(tesp).$ebx
int
$_NR_exit,veax
$0x80
h1t
可见_exit的作用仪仅是调用了exit这个系统调用，也就是说，_exit调用后，进程就会直接
结束。程序正常结束有两种情况，一种是main函数的正常返回，一种是程序中用exit退出。在
_ibc_star_main里我们可以看到，即使 main 返回了，exit 也会被调用。exit 是进程正常退出的
必经之路，因此把调用用atexit注册的函数的任务交给exit来完成可以说万无一失。
注
我们看到在_start和_exit 的末尾都有一个hlt 指令，这是作什么用的呢？在Linux里，进
意
程必须使用exit系统调用结束。一旦exit被调用，程序的运行就会终止，因此实际上_exit
末尾的 hlt 不会执行，从而_ibc_start_main 永远不会返回，以至_start 末尾的 hlt指令
也不会执行。_exit里的hlt指令是为了检测exit系统调用是否成功。如果失败，程序就
不会终止，hlt指令就可以发挥作用强行把程序给停下米。而_start里的hlt的用处也是如
此，但是为了预防某种没有调用exit（这里指的不是exit系统调用）就回到_start 的情况
（例如有人误删了_Ibc_main_start 末尾的 exitl
MSVCCRT入口函数
相信读者对glibc的入口函数已经有了一些了解。但可借的是glibc的入口函数书写得不
是非常直观。事实上，我们也没从gibc的入口函数了解到多少内容。为了从另一面看世界，
我们再来看看 Windows下的运行库的实现细节。下面是Microsoft Visual Studio 2003里crt0.c
（位于VC安装目录的crtsrc）的一部分。这里也删除了一些条件编译的代码，留下了比较
重要的部分。MSVC的CRT默认的入口函数名为mainCRTStartup：
int mainCRTStartup (void)
这是入口函数的头部。下面的代码出现于该函数的开头，显得杂乱无章。不过其中关键
的内容是给一系列变量赋值：
po8v1 = (OSVERSIONINFOA *)_a11oca (8i2eOf(OSVERSIONINFOA)) ;
posvi ->dwOSVersionInfoSize - sizeof (OSVERSIONINFOA);
GetVersionExA (posvi ) :
程序员的自我修养一链接、装载与库
---
## Page 348
11.1入口函数和程序初始化
325
_osplatform = posvi->dwplatformId;
_o8ver = (posvi->dwBui1dNumber) & 0x07fff;
_winminor - posvi->dwMinorVersion;
if ( _osplatforn 1= VER_PLATFORM_WIN32_NT )
00080x0 =|1eAs0"
_inver - (_winnajor 
int main(int argc,char** argv)
FILE* ( = fopen1*test,dat*,*wb* );
if(_f == NULL )
fwrite(*123*, 3, 1, f ):
fclose(f) ;
return 0;
在操作系统层面上，文件操作也有类似于FILE的一个概念，在Linux里，这叫做文件
描述符（File Descriptor），而在Windows里，叫做甸柄（Handle）（以下在没有歧义的时候
统称为句柄）。用户通过某个函数打开文件以获得句柄，此后用户操纵文件皆通过该句柄进
仃。
设计这么一个句柄的原因在于句柄可以防止用户随意读写操作系统内核的文件对象。无
论是Linux还是Windows，文件句柄总是和内核的文件对象相关联的，但如何关联细节用户
并不可见。内核可以通过句柄来计算出内核里文件对象的地址，但此能力并不对用户开放。
下面举一个实际的例子，在Linux中，值为0、1、2的分别代表标准输入、标准输
出和标准错误输出，在程序中打开文件得到的从3开始增长。具体是什么呢？在内核
中，每一个进程都有一个私有的“打开文件表”，这个表是一个指针数组，每一个元素都指
向一个内核的打开文件对象。而，就是这个表的下标。当用户打开一个文件时，内核会
在内部生成一个打开文件对象，并在这个表里找到一个空项，让这一项指向生成的打开文件
对象，并返回这一项的下标作为。由于这个表处于内核，并且用户无法访问到，因此用
户即使拥有fd，也无法得到打开文件对象的地址，只能够通过系统提供的函数来操作。
在C语言里，操纵文件的渠道则是FILE结构，不难想象，C语言中的FLE结构必定
和f有一对一的关系，每个FILE结构都会记录自己唯一对应的fd。
FILE、fd、打开文件表和打开文件对象的关系如图11-4所示。
程序员的自我修养——链接、装载与库
---
## Page 352
11.1入口函数和程序初始化
329
tdir
FILE
FALE
O=P
内核对象
内核对象
4
*p
4内核对象
sldout
*p
FPLE
内核空间
内核对象
p
文
FILE
4
stden
fd=3
p
#
图11-4FILE结构、fd和内核对象
图11-4中，内核指针p指向该进程的打开文件表。所以只要有fd，就可以用fd+p来得
到打开文件表的某一项地址。stdin、stdout、stderr 均是FILE结构的指针。
对于Windows 中的句柄，与Linux 中的fd人同小异，不过Windows 的句柄并不是打开
文件表的下标，而是其下标经过某种线性变换之后的结果。
在大致了解了IO为何物之后，我们就能知道VO初始化的职责是什么了、首先IO初