关于Sbox，这个不是问题，因为我们依然可以通过`Sbox[Sbox_inv[i]] == i`找到Sbox_inv;
关于Tbox，找到一篇讲解AES查表实现的文章[2](https://zhuanlan.zhihu.com/p/42264499)，里面的内容不再赘述，比较关键的一点在于
`Tbox` 的构造，以T1为例，注意运算是在`GF(2^8)`上进行的：
  * T1[i] =[2, 1, 1, 3]^T * S[i]
但是验证后发现题目代码中的的T盒并不满足上面的式子，注意上面式中S[i]左乘的向量是列混淆矩阵的一列，猜想可能是这个算法对列混淆矩阵进行了更换。
通过尝试发现列混淆矩阵被更换为：
     8 5 7 9
     9 8 5 7
     7 9 8 5
     5 7 9 8
对加密函数的分析，我们得到以下结论：
  1. 函数流程与AES相同；
  2. 函数修改了AES中的S盒，修改后的内容见代码；
  3. 函数修改了AES 列混淆矩阵。
###  构造解密函数
上一步中我们基本了解了加密函数结构，现在我们需要构造解密函数。
####  失败的构造
首先很自然的想法是同样构造解密函数的查表实现，参考[1](https://github.com/ricmoo/pyAES)，我们需要构造Si, T5,
T6, T7, T8, U1, U2, U3, U4共三类9个表。
**构造Si:**
根据`Sbox_inv[Sbox[i]] == i`,有：
    Si = [0] *256
    for i in range(256):
        Si[S[i]] = i
**构造Tbox:**
参考[2](https://zhuanlan.zhihu.com/p/42264499)，构造解密所用Tbox的流程与加密所用Tbox相同，不过需要使用Si代替S，列混淆矩阵的逆代替列混淆矩阵。
Si 已经在上一步得出，但是很遗憾我并没有找到列混淆矩阵对x^4+1的逆。因此无法成功构造解密函数的查表实现。
####  正确的构造
虽然构造解密函数的查表实现失败，但是其实上面我们已经把加密流程分析的很清楚了，因此我们依然可以构造解密函数的直接实现，已知：
  * Sbox, Sbox_inv
  * K (题目给的代码里有)
  * 更改后的列混淆矩阵
根据上述条件我们完全可以直接实现这个部分数据被修改的AES并确保加密功能可用，但解密功能所需的 MixColumnsInv
还是需要列混淆矩阵的逆。这里可以采用暴力破解的思路。
对于每一次MixColumnsInv，其输入等于MixColumns后的输出，而对于矩阵乘法而言，输出的一列仅与输入的一列相关，故依次尝试每一列的所有可能即可找到MixColumnsInv应有的输出。
这里每一列有`2^32`种可能，平均代价为`2^31`，鉴于每次MixColumnsInv需要暴力破解四列，解密流程需要9轮MixColumnsInv，故平均尝试次数为`2^36+2^33`计算资源丰富的情况下是可以接受的。
###  破解时间优化
显然上一步中暴力破解key的算法还有很大优化空间，这里可以使用中间相遇攻击[3](https://en.wikipedia.org/wiki/Meet-in-the-middle_attack)的思想，这是一种空间换时间的策略。
以一个最简单的问题为例：
> 输入一个数组和A一个数R，要求找到数组中的两数a,b满足 `a+b = R`
对于这个问题，最朴素的方式是遍历所有可能的a，b，这需要`O(n^2)`的时间；但如果我们一次遍历数组，并将映射关系`R-i ->
i`存到哈希表中，我们就可以在第二次遍历时查表找到a，b，在使用了额外n对映射的存储空间后我们可以使用`O(n)`的时间解决这个问题。
对应到这里的暴破，我们需要找到`a1，a2，a3，a4`满足下列式子（其中`lst =
[[8,5,7,9],[9,8,5,7],[7,9,8,5],[5,7,9,8]]`)：
    FFmul(lst[0][0],a1)^FFmul(lst[0][1],a2)^FFmul(lst[0][2],a3)^FFmul(lst[0][3],a4)^res[0][i] == 0
    FFmul(lst[1][0],a1)^FFmul(lst[1][1],a2)^FFmul(lst[1][2],a3)^FFmul(lst[1][3],a4)^res[1][i] == 0
    FFmul(lst[2][0],a1)^FFmul(lst[2][1],a2)^FFmul(lst[2][2],a3)^FFmul(lst[2][3],a4)^res[2][i] == 0
    FFmul(lst[3][0],a1)^FFmul(lst[3][1],a2)^FFmul(lst[3][2],a3)^FFmul(lst[3][3],a4)^res[3][i] == 0
我们可以先计算所有可能的a1，a2，得到下列式子结果并将`(t1,t2,t3,t4) -> (a1,a2)`到哈希表中：
    t1 = FFmul(lst[0][0],a1)^FFmul(lst[0][1],a2)
    t2 = FFmul(lst[1][0],a1)^FFmul(lst[1][1],a2)
    t3 = FFmul(lst[2][0],a1)^FFmul(lst[2][1],a2)
    t4 = FFmul(lst[3][0],a1)^FFmul(lst[3][1],a2)
然后对于所有可能的a3，a4，计算下面的算式:
    t1 = FFmul(lst[0][2],a3)^FFmul(lst[0][3],a4)^res[0][i]
    t2 = FFmul(lst[1][2],a3)^FFmul(lst[1][3],a4)^res[1][i]
    t3 = FFmul(lst[2][2],a3)^FFmul(lst[2][3],a4)^res[2][i]
    t4 = FFmul(lst[3][2],a3)^FFmul(lst[3][3],a4)^res[3][i]
如果`(t1,t2,t3,t4)`在哈希表中，我们就找到了一组满足条件的`a1，a2，a3，a4`。  
相比暴力破解的`2^32`种可能，使用中间相遇攻击只需缓存`2^16`对映射并最多进行`2^17`次计算，在我的低配置电脑上完成解密耗时不超过五分钟。
###  代码及结果
解密代码：
    from functools import reduce
    import copy
    def bit_rot_left(lst, pos):
        return lst[pos:] + lst[:pos]
    def bit_rot_right(lst, pos):
        return lst[-pos:] + lst[:-pos]
    def lst_xor(lst1, lst2):
        return [i^j for i,j in zip(lst1, lst2)]
    def ggwp(res):
        def FFmul(a,b):
            rr = [a]
            def xtime(x):