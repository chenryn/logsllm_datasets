(e.g., ﬁnancial district, hotel zone) or a location check-
point (e.g., main bridges, tunnels, highway entrances)
that the victim will bypass. The intuition is simple: for
two nearby destinations, the navigation system will re-
turn two routes whose early portions are similar (or even
identical). With an estimated D, the attacker can generate
a valid ghost route to match the early portion of the vic-
tim’s route, which is sufﬁcient to trigger the fake turn-by-
turn navigation instructions. In practice, attackers may
obtain D from different channels, such as the target user’s
social media location check-ins, destination broadcasting
in taxi-hailing services, and identifying the checkpoints
that the user must traverse (e.g., the Lincoln Tunnel en-
trance when traveling between New Jersey and Manhat-
tan). Technically, attackers can also probe the victim’s
destination area by sequentially drifting the ghost loca-
tion and observing the reactive movements of the victim,
which has shown to be feasible [46].
As illustrated by Algorithm 1, the basic algorithm be-
gins by selecting a ghost location Locg from all the con-
nection points within the distance bound Ωdri f tDis from
the actual location Loca. Then, a ghost navigation route
Γg = (Sg1,Sg2, ...,Sgm) from the ghost location to the des-
tination is calculated.
In order to ﬁnd as many victim
1532    27th USENIX Security Symposium
USENIX Association
r1r2c1c2r3S1 = [r1, r2] S2 = [r3] Input: G,D,Loca,Ωdri f tDis,Ωspeed
Output: O = {o1,o2, ...,oK}, oi = (Γv,Γg,Locg)i
1: Initialization: O ← /0
2: Preprocessing: Find all candidate ghost current locations
{Locg1 ,Locg2 , ...,LocgN} within Ωdri f tDis distance from Loca
3: for i = 1 to N do
4:
Γg = (Sg1 ,Sg2 , ...,Sgm ), where Γg is obtained through an API
getNavigationRoute(G,Locgi ,D)
U0 = {[rac]}, where Loca ∈ rac
U1,U2, ...,Um ← /0
for j = 1 to m do
if Uj−1 == /0 then
break
end if
for u ∈ Uj−1 do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: end for
21: return O
end if
end for
end for
end for
v ← u.end point
for s ∈ segments with starting point of v do
if s has passed the search criteria then
Append u.append(s) to Uj
ALGORITHM 1: Basic attack algorithm
return
if attack goal has been achieved then
end if
U1,U2, ...,Um ← Oi−1
for j = 1 to m do
if Uj = /0 then
Input: G,D,Ωdri f tDis,Ωspeed, O0,I, attack goal
Output: Oi, where i = 1,2, ...,I − 1
1: Initialization: carryover Γv ← /0, carryover Γg ← /0,
Oi ← /0,i = 1,2, ...,I
2: for i = 1 to I − 1 do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21: end for
22: return
Append basic attack(G,D,Γgu[k]) to Oi
Append Γgu[: k] to carryover Γg[u]
Append Γvu[: ˆk] to carryover Γv[u]
end for
Save (Oi,carryover Γv,carryover Γg)
Γgu ← Oi−1[u]
for k = start j to end j do
end for
end for
break
end if
for u in Uj do
ALGORITHM 2: Iterative attack algorithm
routes as possible, we traverse the graph from the actual
location via an m-depth breadth-ﬁrst search. We keep
the candidate routes that satisfy the following criteria at
every step:
• Turn Pattern Matching: To make sure the navigation
instructions of the ghost route can be applied to the
victim route, we need to match the turn patterns of
the two routes: φ (Svi,Svi+1) and φ (Sgi,Sgi+1) ∈ same
maneuver instruction category.
• Segment Length Matching: Given a speed scale fac-
tor Ωspeed, the travel distance of the ghost should be
within (1 ± Ωspeed) times the victim’s actual travel
distance on each segment, namely, (1−Ωspeed)·Svi ≤
Sgi ≤ (1 + Ωspeed) · Svi. This guarantees segment
length on the ghost and victim route is similar.
In the worst case, the computational complexity is ex-
ponential to the number of road segments connected by
one intersection. However, thanks to the searching crite-
ria, the unqualiﬁed victim routes can be terminated in the
very early stage.
Iterative Attack Design
5.2
In basic attack, the attacker only shifts the GPS position
once from Loca to Locg. Here, we propose an itera-
tive attack, which allows the attacker to create multiple
drifts at different locations, while the victim is driving.
By iteratively applying the basic attack algorithm, the
attack performance can be signiﬁcantly improved since
partially matched victim-ghost routes can be used for
searching new routes as the victim moves. As shown
in Algorithm 2, for each iteration, we ﬁrst check if the
attack goal has been achieved. If not, we create another
location shift on the new ghost route segments from the
previous iteration, and apply the basic searching algo-
rithm. The attacker goal can be “reaching a pre-deﬁned
destination” or “entering a wrong way”, which helps to
terminate the searching early.
5.3 Targeted Deviating Attack
With the above searching algorithms, the attacker may
launch the attack by specifying a target destination area.
More speciﬁcally, attacker can divide the geographic
area into grids (width w) and then pick one of the grids as
the target destination. Then the attacker can run the ba-
sic or iterative algorithm to compute all the possible vic-
tim routes and identify those that bypass the pre-selected
grid. The attacker can terminate the searching algorithm
earlier once a victim route hits the destination grid. In-
tuitively, the success of the attack depends on the road
map of the city and the size of the grid (w). There is
also a limit on how far away the target destination can be
set given the condition of the original route. We provide
detailed evaluations in the next section.
6 Attack Evaluation
Next, we evaluate the proposed algorithms using both
trace-driven simulations and real-world driving test. Our
simulation is based on empirical driving traces collected
USENIX Association
27th USENIX Security Symposium    1533
from Manhattan and Boston. Given different attack
goals, we seek to understand how well the algorithms can
identify the qualiﬁed ghost routes and ghost locations.
Then we implement algorithms and conduct real-world
driving tests to validate the attack feasibility in real-time.
6.1 Simulation Experiments
Our attack is more suitable to run in the cities where the
road networks are dense. We use the maps of Manhattan
(NY) and Boston (MA) since the two cities have differ-
ent road networks [39] to test our algorithm under differ-
ent road conditions. For example, Manhattan has more
regular grids with a 17.8◦ standard deviation of turn an-
gles, while Boston has more curvy roads (20.5◦ standard
deviation). In addition, Manhattan has a lower road seg-
ment density (51 segments/km2) compared with that of
Boston (227 segments/km2). We construct the road net-
work based on the OpenStreetMap database [39].
Driving Trace Dataset.
To examine the attack per-
formance on realistic driving trips, we obtain taxi trip
datasets from NYC Taxi and Limousine Commission
(TLC) [5] and the Boston taxi trace dataset used by MIT
Challenge [1]. We randomly select 600 real-world taxi
trips (300 per city). These traces cover the large area
and various road types (visualization is in Appendix-A).
The average length of the routes is 900m in Manhattan
(MAN) and 2000m in Boston (BOS).
Evaluation Conﬁgurations.
For each taxi trip, we
exhaustively run the search algorithm at each road seg-
ment to identify all the possible attack locations (and the
corresponding ghost locations and victim routes). This
provides a “ground-truth” on the possible attack options
available to the attacker. Then we discuss how these op-
tions meet the attacker’s goals.
For constraint parameters, we set the maximum drift
distance Ωdri f tDis = 400m. A measurement study shows
that a GPS drift of less than 400m is common during ac-
tive driving [10]. In addition, given the speed limits in
the two cities are 25 to 30 mph, we set Ωspeed = 0.2 as-
suming a 5–6 mph speed offset is unnoticeable. For iter-
ative attack, we run two iterations as a comparison with
the basic attack. Our algorithm also requires calculating
the “turning angle” to compare the shape of the roads.
We follow Waze’s standard [7] to identify the continu-
ous road ([−30◦,30◦]]), left/right-turn ([30◦,170◦]), and
U-turn ([170◦,180◦]). We implement the algorithms in
Python, and run the evaluation on a server with a 192GB
RAM and 24 cores.
6.2 Evaluation Results
The performance metric depends on the speciﬁc goal of
the attacker. Recall in our threat model (Section 2.1),
we deﬁned three types of attacks which need different
evaluation metrics. Below, our metrics are all based on
each of the taxi trips (per-trip metric).
Deviating Attack.
If the attacker simply aims to
divert the victim from reaching the original destination,
the evaluation metric will focus on the number of victim
routes available to the attacker, and the diverted distance
for each road segment on victim routes. More speciﬁ-
cally, given road segment rv and the original navigation
route Γo = (r1,r2, ...,rn), the diverted distance for rv is
{||rv − ri||}, where ||rv − ri|| is the
calculated as min
distance between two road segments. By running the ba-
sic algorithm, we successfully identify at least one vic-
tim route for all the 600 taxi trips. On average, each
trip has 335 qualiﬁed victim routes, indicating a wide
range of attack opportunities. The iterative algorithm (it-
eration i = 2) identiﬁed many more victim routes (3,507
routes per trip). Note that for BOS-I, the results are based
on 260 trips with distance capped at 6000m. Figure 5a
shows average diverted distance per trip. Again, the iter-
ative algorithm is able to identify victim routes that are
further away from the victim’s original routes. On aver-
age, about 40% of the trips can be diverted 500 meters
away.
i=1,2,...,n
One speciﬁc goal of the Deviating Attack could be
delaying the victim’s trip by leading the victim to loop
routes. Given a taxi trip, we examine whether there ex-
ists a victim route that contains a loop. Using the basic
algorithm, we ﬁnd at least one loop victim route for 256
out of 300 (85.33%) taxi trips in Manhattan, and 294 out
of 300 (98%) trips in Boston.
Targeted Deviating Attack.
If the attacker aims to
divert the user to a pre-deﬁned location, the evaluation
metric will focus on hit rate. For a given taxi trip, the
hit rate reﬂects how likely a victim route can bypass the
attacker-deﬁned destination to achieve targeted diverting.
Given a taxi trip, we ﬁrst circle an area around the taxi
route as the considered attack area. The area is of a sim-
ilar shape of the taxi route with a radius of r (i.e., any
location inside this area has a distance shorter than r to
the taxi route). We divide the area into grids (width w).
The attacker can pick a grid inside the area as the target
destination. Hit rate is the ratio of the grids that the vic-
tim can be diverted to over all the grids in the attack area.
An illustration is available in Appendix-B.
Figure 5b shows the hit rate of the basic attack. We set
the grid size as w=500m and then vary the radius r of the
considered area. The result shows that we can achieve
about 70%, 47%, 20% median hit rate in Manhattan with
1534    27th USENIX Security Symposium
USENIX Association
(a) Avg. diverted distance
(b) Hit rate (grid size=500m, basic attack)
(c) Hit rate (grid size= 200m, basic attack)
(d) Hit rate (grid size= 200m, iterative attack)
Figure 5: Attack results in Manhattan (MAN) and Boston (BOS). B = Basic Attack; I = Iterative Attack; M500 =
Manhattan with a 500m grid size; B500 = Boston with a 500m grid size.
(f) Overlap rate: estimated vs. true routes
(e) # of Diverted destinations
r= 500m, 1000m, and 2000m respectively. This indicates
that even a randomly selected destination grid is highly
likely to be reachable. No surprisingly, victim routes get
sparser when it is further away from the original route.
Note that even with 20% hit rate in 2000m range, if the
attacker provides three candidate target destination grids,
the success rate will be higher 1− (1− 0.2)3 = 48.8%.
Comparing Figure 5b and Figure 5c, we show that a
larger grid leads to a higher hit rate. In practice, attacker
can use a larger grid if he can tolerate some inaccuracy
of the target destination i.e, the victim is led to a nearby
area instead of the exact target location.
Figure 5d shows that the iterative attack algorithms