### Module 4: Input Filtering Script

#### 4.1 Decision-Making Process
The decision-making process for input filtering is illustrated in Figure 2, with events numbered in temporal sequence.

- **All assumptions hold**: Pass the input to the application.
- **Failing assumption found**: Drop the input and write to the error log.

**Note:** The script generation process (Figure 1) is entirely decoupled from the real-time processing of input data (Figure 2). The filtering script is generated offline, once per application. The performance cost of filtering is determined solely by the cost of script interpretation at runtime, plus the time to perform two local procedure calls: from the intercepting module to the filtering script and back.

#### 4.2 Expressing Assumptions
Each assumption about an applicationâ€™s input is expressed as a logical clause. These clauses are combined using AND operations to form a Boolean expression in conjunctive normal form (CNF). Verifying that the Boolean expression is satisfied for a given input ensures that all stated assumptions hold.

For a broad set of assumptions, their representation naturally translates into simple logical expressions without disjunction or negation operations, simplifying the formal language. There are a few exceptions requiring more complex clauses and disjunctions, which can be handled without compromising the simplicity of the formal description.

We adopted a "positive" filtering approach, where assumptions explicitly specify what is permitted rather than what is not. This approach enhances the expressive power and usefulness of filters, making them more likely to catch unknown vulnerabilities. In contrast, systems like [17] and [12] specify known misbehaviors and allow any behavior not explicitly prohibited. Our conservative approach ensures that errors in the input filtering policy tend to err on the side of security.

#### 4.3 Intermediate Description Language
For greater flexibility, we use an intermediate filter description language instead of generating filtering scripts directly from a GUI-based tool. This decouples filter specification from script generation, allowing the administrator to mix choices of specific tools for each step.

XML is the most suitable candidate for the intermediate description language. It is flexible, extensible, human-readable, and portable across platforms. The portability ensures that the subset of XML we use can serve as a common language, while anything built on top can be replaced or bypassed.

#### 4.4 Implementation
Our prototype implementation focuses on the back-end server application case. In a typical scenario, a web server receives HTTP requests from clients and passes them to back-end server applications. If these requests are not validated, maliciously constructed data can undermine the operation of the back-end server application. Thus, client input data must be filtered by web servers.

##### 4.4.1 Web Server Input Filtering
The input filtering process works as follows (see Figure 2):

1. **Invocation of Filtering Script**: Upon receiving an HTTP request, the web server invokes the filtering script via an intercepting module. For example, in the case of an IIS server running on Windows NT, the filtering script is registered as a COM object, and the intercepting module is an ISAPI filter DLL configured to call the script via its COM interface.
2. **Parsing the Request**: The intercepting module passes the request to the filtering script, which parses it into a set of parameters according to the corresponding XML description of the parsing scheme.
3. **Testing Parameters**: The filtering script tests each extracted parameter to ensure it satisfies the assumptions specified in the corresponding XML description of assumptions.
4. **Output and Error Handling**: The output of the filtering script is an error code indicating whether the HTTP request was accepted. The intercepting module receives this output and either passes the request to the back-end application (if validated) or writes to an error log and redirects the client to an error notification URL (if rejected).

##### 4.4.2 Scripting Language
The appropriate scripting language depends on the type of filter being generated. For our prototype, we chose VBScript [15]. However, our filtering scripts do not use any language-specific or platform-specific features, allowing the scripting language to be replaced by altering the component of the filter generator responsible for writing out the filtering script, without changing other components.

##### 4.4.3 Description of the Parsing Scheme
The input is initially treated as a single character string, which is delimited into constituent parameters. For example, consider the sample HTTP request shown in Figure 3 and one possible parsing of this input string into parameters.

We allow two ways to define the boundary between parameters: by specifying a single-character end-delimiter or by giving the exact length of the parameter. The last parameter runs to the end of the input string and is "delimited" by a special NULL end-delimiter.

If there are multiple possible formats for the input, a separate filter will be necessary for each structure. The intercepting module would invoke each filter and accept the input only if it is accepted by at least one of the filters.

To aid administrators in formally describing a parsing scheme, we have implemented a GUI-based tool that outputs the XML description of the parsing scheme. A sample XML description is shown in Figure 4.

##### 4.4.4 Description of the Assumptions
Most desirable constraints can be expressed using a simple set of relations. We decided against using more general and powerful languages like regular expressions to keep the filtering process as simple as possible. Our goal is to prevent a substantial fraction of recurring and potentially damaging vulnerabilities.

Our tool implements a set of 13 relations (Table 1). Adding more relations would require minor changes to the filter-generating tool.

In the XML description of assumptions, each assumption is specified either on a parameter itself (SELF) or on its size (SIZE). Consider the sample HTTP request and the set of parameters extracted from it. Below is a partial list of the assumptions (first in natural language, then in XML) that one might wish to impose on some of the parameters:

- **Parameter 1 (protocol name)**: Should be one of "http" or "https".
- **Parameter 3 (server name)**: Should be no more than 30 characters long.
- **Parameter 3 (server name)**: Should have ".com" as a suffix.

These sample assumptions are described in XML in Figure 5. Each assumption on a parameter is described within a separate `<assumption>` tag structure, comprised of six substructures:

- **`<param_num>`**: The number of the parameter to which the assumption applies.
- **`<param_func>`**: Specifies whether the current assumption concerns the parameter itself (SELF) or its size in number of characters (SIZE).
- **`<relation>`**: The relation (from Table 1) between the current parameter (or its size) and the list of constants specified in the `<constants>` tag.

This structured approach ensures clarity and consistency in the description of assumptions, facilitating effective input validation.