by **PI:EMAIL** :
    On an arm5tejl processor running an eabi linux kernel *without* thumb support, executing
    a golang binary (compiled with GOARM=5) will result in a segfault when the
    rt0_linux_arm.s tries to branch to thumb code in order to set up the OABI check.
    I was able to monkey patch this for my situation by commenting out the thumb part as
    shown here:
    xorrbit/golang@42667df. After
    compiling my binaries with this patched copy of the golang compiler I was able to
    execute them fine.
    I looked into the history of this OABI check and I'm not sure that there is a better way
    to do it. It is unfortunate that this is the only tiny bit of thumb code that is
    generated, and that it causes a segfault if you run it on a kernel without thumb support.
    Granted, this is probably a somewhat rare situation (running a kernel without thumb
    support on a processor that supports thumb). I talked to the devs who ship this kernel
    and there is no particular reason thumb isn't enabled, the processor supports it but
    they never required it. This is all on a custom board running a custom kernel.
    I thought I would log this here anyways in case anyone else encountered this problem. A
    fix would be great but I can't find of a proper way to fix this that would add more
    complexity.
    Thanks