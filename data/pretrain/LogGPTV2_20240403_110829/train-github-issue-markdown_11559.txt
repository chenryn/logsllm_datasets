**Reported by: [Your Email]**

When running a Go binary (compiled with `GOARM=5`) on an ARM5TEJL processor with an EABI Linux kernel that lacks thumb support, the execution results in a segmentation fault. This occurs because the `rt0_linux_arm.s` attempts to branch to thumb code to set up the OABI (Old ABI) check.

To address this issue, I implemented a workaround by commenting out the thumb-related code, as demonstrated in this patch: [xorrbit/golang@42667df](https://github.com/xorrbit/golang/commit/42667df). After compiling my binaries with the modified Go compiler, they executed without issues.

Upon investigating the history of the OABI check, I found no better alternative. It is unfortunate that this small piece of thumb code is generated and causes a segfault when run on a kernel without thumb support. While this scenario is relatively uncommon—running a kernel without thumb support on a processor that supports it—I discussed the situation with the developers who maintain this kernel. They confirmed that there was no specific reason for disabling thumb support; the processor does support it, but it was never required. This setup is on a custom board using a custom kernel.

I am logging this issue here in case others encounter the same problem. A proper fix would be ideal, but I have not found a solution that does not add significant complexity.

Thank you.