described here. We do a number of experiments on a single server which has 2x 36-core Intel Xeon 2.30GHz
CPU and 256GB of RAM. We run all parties in the same network, but simulate a network connection using
the Linux tc command: a LAN setting with 0.02ms round-trip latency, 10 Gbps network bandwidth; a WAN
setting with a simulated 96ms round-trip latency, 200 Mbps network bandwidth.
In our protocol, the oﬄine phase is conducted to obtain an 128 base-OTs using Naor-Pinkas construc-
tion [NP01]. Our implementation uses OPRF code from [KKRT16, Rin]. All evaluations were performed with
a item input length 128 bits, a statistical security parameter λ = 40 and computational security parameter
κ = 128. The running times recorded are an average over 10 trials. Our complete implementation is available
on GitHub: https://github.com/osu-crypto/MultipartyPSI
7.1 Optimized PSI, Augmented Model
In this section we discuss the PSI protocol from Section 6 that is optimized for the augmented semi-honest
model. We implemented and tested the following variants (see Section 6.2 for discussion on variant techniques
of sending hints) on diﬀerent set sizes m ∈ {212, 214, 216, 220}:
• BLOOM FILTER: where the OPPRF used a single combined garbled Bloom ﬁlter hint. In our hashing-
to-bin scheme (Appendix B), sender uses h = 5 hash functions to insert m items into bins. With the
optimization in Section 6.2, there are only m pairs inserted into the table which has mλ log2 e entries.
The table uses an array of h(λ + log2(m))-bit strings.
• POLYNOMIAL combined: where the OPPRF used combined polynomial hints per hash index. Poly-
nomial interpolation was implemented using the NTL library[Sho03]. Each polynomial is built on m
points. The coeﬃcients of the polynomial are λ + log2(m)-bit strings.
• POLYNOMIAL separated: where the OPPRF used a separate polynomial hint per bin. The coeﬃcient
of the polynomial has λ + log2(m)-bit strings. The degree of polynomial is β1 for each bin in ﬁrst mζ1
bins, and β2 for each bin in last mζ2 bins. Here ζ1, ζ2, β1 and β2 are discussed in Table 2.
• TABLE: where the OPPRF used a separate table hint per bin. The table has 2(cid:100)log2(β1)(cid:101) entries for each
bin in ﬁrst mζ1 bins, and 2(cid:100)log2(β2)(cid:101) entries for each bin in last mζ2 bins. Each row has λ + log2(m)-bit
strings.
The running times and communication overhead of our implement with 5 parties are shown in Table 3.
The leader party uses up to 4 threads, each operates OPPRF with other parties. As expected, our table-
based protocol achieves the fastest running times in comparison with the other OPPRF constructions. Our
experiments show that it takes only one second to sample vector v and check uniqueness for all 220 bins.
Thus, the table-based PSI protocol costs only 22 seconds for the set size m = 220. The polynomial-based
PSI protocol with separated hint is the next fastest protocol which requires a total time of 38 seconds, a
17
Running time (second)
Communication (MB)
Protocol
BLOOM FILTER
POLY (combined hint)
POLY (separate hints)
TABLE
212
0.37
7.36
0.32
0.29
214
0.98
194.96
0.74
0.57
216
3.41
-
2.33
1.48
Set Size m
212
8.56
0.43
1.46
1.64
-
220
51.46
37.89
21.93
214
34.26
1.74
5.98
6.52
216
220
137.01
2496.2
-
-
24.30
25.93
447.44
467.66
Table 3: The total runtime and communication of our Multi-Party PSI in augmented semi-honest model in
LAN setting. The communication cost which ignore the ﬁxed cost of base OTs for OT extension is on the
client’s side. Cells with − denote trials that either took longer than hour or ran out of memory.
Setting
Number
Parties n Corruption t
Threshold
212
216
Set Size m
220
3
4
5
10
15
3
4
5
10
15
LAN
WAN
{1, 2}
1
{2, 3}
1
2
4
1
5
9
1
7
14
{1, 2}
1
{2, 3}
1
2
4
1
5
9
1
7
14
0.21 (0.99)*
0.30 (0.16)
0.25 (0.12)
0.34 (0.21)
0.26 (0.12)
0.32 (0.19)
0.39 (0.26)
0.39 (0.17)
0.83 (0.55)
1.01 (0.72)
0.46 (0.23)
1.37 (0.77)
1.85 (1.32)
2.82 ( 2.34)*
3.12 (2.64)
2.65 (1.97)
3.18 (2.51)
2.66 (1.99)
3.21 (2.53)
3.45 (2.78)
3.30 (2.63)
5.67 (4.98)
7.81 (7.14)
3.63 (3.15)
9.87 (9.38)
16.42 (15.96)
1.34 (1.19)*
2.14 (1.97)
1.80 (1.60)
3.16 (2.92)
1.99 (1.79)
3.44 (3.23)
4.87 (4.61)
2.97(2.71)
8.79 (8.47)
12.33 (11.98)
4.28 (3.97)
13.47 (12.79)
20.61 (20.02)
10.48 (9.96)*
11.25 (10.73)
12.40 (11.71)
17.47 (16.74)
13.76 (13.06)
20.29 (19.56)
25.52 (24.79)
26.42 (25.73)
76.43 (75.78)
112.8 (112.1)
39.11 (38.60)
150.85 (150.31)
263.20 (262.67)
25.81 (25.23)*
41.64 (41.10)
28.86 (28.27)
52.25 (51.65)
32.13 (31.49)
49.17 (48.54)
71.28 (70.60)
46.08 (45.28)
136.48 (135.44)
182.8 (181.60)
64.28 (63.27)
201.12 (199.34)
304.36 (302.17)
129.45 (128.64)*
158.50 (157.64)
151.9 (150.9)
233.1 (232.1)
185.5 (184.5)
290.9 (289.8)
378.5 (377.4)
400.9 (399.8)
1,194 (1,193)
1,915 (1,914)
664.08 (662.80)
2641 ( 2,640)
-
224
409.90 (399.67)*
702.3 (69.69)
484.3 (478.2)
865.7(859.4)
505.2 (499.2)
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Table 4: Total running time and online time (in parenthesis) in second of our semi-honest Multi-Party PSI
for the number of parties n, t < n dishonestly colluding, each with set size m. Number with ∗ shows the
performance of the optimized 3-PSI protocol described in Section 6.3. Cells with − denote trials that either
took longer than hour or ran out of memory.
1.7× slowdown. The slowest protocol is the polynomial-based protocol with combined hint per hash index,
whose running time clearly grows quadratically with the set size. However, this protocol has the smallest
communication overhead. For small set size m = 214, the polynomial-based PSI protocol with combined hint
requires only 1.74MB for communication.
7.2 Standard Semi-Honest PSI
In this section we discuss the standard semi-honest variant of our protocol, using conditional zero-sharing