124
145
208
4
86
16
19
1
1357
1126
1250
1130
1217
1188
952
1117
485
671
932
537
578
621
711
617
458
501
548
455
466
466
393
441
520
527
527
431
275
638
691
121
TABLE III: Fuzzing statistics
Type of bug
Memory read
Memory write
Buffer overﬂow
Out-of-bound index
Unchecked user pointer
NULL dereference
ZERO_SIZE_PTR deref.
Buffer overread
False positives
Total (excluding FP)
# MSM kernel
# Xiaomi kernel
0
1
1
6
6
1
1
1
1
17
3
2
0
4
0
1
1
1
4
12
TABLE IV: Types of bugs found. Memory read/write bugs
include bugs that allow for either arbitrary read/write or
memory read/write below a certain address.
E. Limitations
Our framework has three main limitations. First, because
of the lack of actual hardware it is currently most suitable for
system call analysis, i.e. when the malicious input comes from
userspace applications. It cannot reliably be used to ﬁnd vul-
nerabilities that are exploitable by a malicious/compromised
peripheral or an attacker who sends malicious input to the
device. Second, our current implementation does not support
interrupts and only supports platform and I2C buses in the case
of ARM32 and platform bus in the case of ARM64. Finally,
evasion can produce false positives, which is usually not the
case for fuzzing.
VI. RELATED WORK
Charm [29] deals with the problem of missing peripherals
by redirecting the corresponding I/O calls to the actual physi-
cal device through USB. Such an approach, while more precise
in terms of emulation, requires porting the driver to a speciﬁc
version of the kernel and also requires the physical device to
be present. As reported by its authors the time required to port
a driver for an experienced kernel developer varies between
two days and two weeks. Our approach does not require driver
porting and having access to a physical device. Our approach
can also work for drivers that come as binary only. Avatar [32]
is similar in spirit to Charm but works for low-level embedded
ﬁrmware such as hard drive ﬁrmware.
FIE [9] analyzes self-contained barebone ﬁrmware for
MSP430 microcontrollers by extending KLEE [2], a fully sym-
bolic environment. In order to deal with missing peripherals,
every time the ﬁrmware tries to access a hardware through
memory-mapped registers,
the framework returns either a
new symbolic value or a constant. Such an approach is well
suited for small barebone programs that access hardware using
memory-mapped registers. In contrast, Linux kernel drivers are
not self-contained code and use a diverse set of kernel API to
access peripherals. Additionally, FIE is tailored for a limited
set of MSP430 microcontrollers and peripherals. In the case of
Linux drivers there are many more peripherals, and for many
of them speciﬁcation is not available.
Keil and Kolbitsch [12] focus on testing WiFi drivers in
Qemu by emulating an IEEE 802.11 device. Periscope [24]
instruments DMA buffers inside kernel to inject fuzzed data
into WiFi drivers. Ma [14] develops emulated versions of
USB devices and fuzz drivers against these emulated devices.
Mueller [17] uses a Qemu provided virtual USB device.
Schumilo et al [21] use USB redirection protocol to provide
access to remote USB devices. Patrick-Evans et al [19] develop
an emulation of a generic USB device. In the current work
we target a wider range of device drivers and do not require
emulated or physical peripherals.
Triforce [11] is a modiﬁed version of AFL that supports
fuzzing using QEMU’s full system emulation for x64 archi-
tecture. S2E [5] allows for symbolic execution of the full
kernel stack and is tightly coupled with the KLEE symbolic
executor. In this work, we support ARM, we deal with missing
hardware, automatically recover ioctl system call structures,
and allow any userspace fuzzer or binary symbolic execution
tool to be used.
DR. CHECKER [15], Coccinelle [27] and Coverity [1]
use static analysis to ﬁnd bugs in Linux kernel drivers. The
upside of static analysis is that it alleviates the need to have
peripherals. The downside is that it is also imprecise and
is known to produce a large amount of false positives that
require further manual analysis. Static analysis also limits
the analysis to bug ﬁnding only. In contrast, our goal is to
enable dynamic analysis. Our approach provides a different
set of capabilities such as coverage-guided fuzzing, symbolic
execution, and interactive debugging. Since dynamic analysis
produces a concrete input for a potential vulnerability, it can
be mechanically tested on the real device for false positives.
Firmalice [23] statically analyzes embedded binary ﬁrmware
images and identiﬁes authentication bypass vulnerabilities.
Firmadyne [3] emulates user space applications extracted from
embedded devices. In this work, we target dynamic analysis
instead, and we focus on kernel-level vulnerabilities.
VII. CONCLUSION
The main challenge to ex-vivo dynamic analysis of device
drivers is the software dependencies they have on their host
kernel, and the hardware dependencies they have on the
hardware device they are supposed to manage. In this paper,
we make the observation that for many execution paths in
drivers these dependencies are in fact superﬁcial. For example,
such paths may only depend on the ability to read a memory-
mapped device register, but not on the actual value returned.
We hypothesize that a possible solution to ex-vivo dynamic
analysis for such paths is evasion, where a specially con-
structed evasion kernel satisﬁes those dependencies by evading
them.
To test this hypothesis, we developed an evasion kernel
that can load and initialize platform device drivers and an
EASIER tool that can then extract and run those drivers for
analysis as userspace processes. We ﬁnd that using evasion,
our kernel is able to successfully initialize 48/62 (77%) of
foreign platform drivers. Moreover, EASIER can trigger 21/26
(80%) vulnerabilities, showing that one does not need detailed
porting or emulation to ﬁnd bugs. Finally, to fully test the
hypothesis, we fuzzed 32 drivers for a total 715 hours and
found a total of 29 bugs, 12 of which have been conﬁrmed to
be new bugs. From this, we conclude that evasion and EAS-
IER make Android ex-vivo driver analysis possible without
porting or hardware (either real or emulated). Moreover, we
conclude that these techniques are effective for discovering
and analyzing vulnerabilities.
Our approach allows for dynamic analysis of Android
drivers with sufﬁciently high precision and without requiring
physical nor emulated devices. We believe that the ability to
work without the need to use complex debugging interfaces
or to reﬂash the device and the ability to analyze the driver in
userspace will help to lower the bar for Android kernel driver
analysis.
VIII. ACKNOWLEDGEMENTS
The research in this paper was made possible with generous
support from Telus Corporation and an NSERC CRD Grant
535902-18.
REFERENCES
[1] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton, S. Hallem, C. Henri-
Gros, A. Kamsky, S. McPeak, and D. Engler, “A few billion lines of
code later: Using static analysis to ﬁnd bugs in the real world,” Commun.
ACM, vol. 53, no. 2, pp. 66–75, Feb. 2010.
[2] C. Cadar, D. Dunbar, and D. Engler, “Klee: Unassisted and
automatic generation of high-coverage tests for complex systems
programs,” in Proceedings of the 8th USENIX Conference on Operating
Systems Design and Implementation, ser. OSDI’08. Berkeley, CA,
USA: USENIX Association, 2008, pp. 209–224. [Online]. Available:
http://dl.acm.org/citation.cfm?id=1855741.1855756
[3] D. D. Chen, M. Woo, D. Brumley, and M. Egele, “Towards
automated dynamic analysis for Linux-based embedded ﬁrmware,” in
23rd Annual Network and Distributed System Security Symposium,
NDSS 2016, San Diego, California, USA, February 21-24, 2016,
2016.
http://wp.internetsociety.org/ndss/wp-
content/uploads/sites/25/2017/09/towards-automated-dynamic-analysis-
linux-based-embedded-ﬁrmware.pdf
[Online]. Available:
[4] H. Chen, Y. Mao, X. Wang, D. Zhou, N. Zeldovich,
and
M. Frans Kaashoek, “Linux kernel vulnerabilities: State-of-the-art de-
fenses and open problems,” Proceedings of the 2nd Asia-Paciﬁc Work-
shop on Systems, APSys’11, 07 2011.
[5] V. Chipounov, V. Kuznetsov, and G. Candea, “S2e: A platform for
in-vivo multi-path analysis of software systems,” in Proceedings of
the Sixteenth International Conference on Architectural Support for
Programming Languages and Operating Systems, ser. ASPLOS XVI.
New York, NY, USA: ACM, 2011, pp. 265–278. [Online]. Available:
http://doi.acm.org/10.1145/1950365.1950396
[6] A. Chou, J. Yang, B. Chelf, S. Hallem, and D. Engler, “An empirical
study of operating systems errors,” in Proceedings of the Eighteenth
ACM Symposium on Operating Systems Principles, ser. SOSP ’01.
New York, NY, USA: ACM, 2001, pp. 73–88. [Online]. Available:
http://doi.acm.org/10.1145/502034.502042
[7] C.
Cimpanu.
(2019) Android
more
line]. Available:
now-worth-more-than-ios-exploits-for-the-ﬁrst-time
now worth
time.
[On-
https://www.zdnet.com/article/android-exploits-are-
are
ﬁrst
exploits
exploits
than
iOS
the
for
[8] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel,
and G. Vigna, “DIFUZE: Interface aware fuzzing for kernel drivers,” in
Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security, 2017.
Finding
symbolic
ﬁrmware:
[9] D. Davidson, B. Moench, T. Ristenpart,
in
in Presented
“FIE
systems
the
of
Symposium (USENIX Security
13).
[Online]. Avail-
https://www.usenix.org/conference/usenixsecurity13/technical-
on
using
22nd USENIX Security
Washington, D.C.: USENIX, 2013, pp. 463–478.
able:
sessions/paper/davidson
and S.
embedded
as
part
vulnerabilities
execution,”
Jha,
[10] D. Engler and D. Dunbar, “Under-constrained execution: Making auto-
matic code destruction easy and scalable,” 01 2007, pp. 1–4.
[11] J. Hertz
and
(2019)
Qemu fuzzing with full-system emulation.
https://github.com/nccgroup/TriforceAFL
T. Newsham.
TriforceAFL. AFL
[Online]. Available:
[12] S. Keil and C. Kolbitsch, “Stateful fuzzing of wireless device drivers in
an emulated environment,” 05 2019.
[13] K. Lu, M.-T. Walter, D. Pfaff, S. Nuernberger, W. Lee, and M. Backes,
“Unleashing use-before-initialization vulnerabilities in the Linux kernel
using targeted stack spraying,” 01 2017.
[14] Z. Ma.
(2019) Massive
driver
fuzz
Avail-
able: https://www.slideshare.net/MSbluehat/bluehat-v17-massive-scale-
usb-device-driver-fuzz-without-device
device
[Online].
BlueHat
without
device,
scale
USB
v18.
[15] A. Machiry, C. Spensky, J. Corina, N. Stephens, C. Kruegel, and
G. Vigna, “DR. CHECKER: A soundy analysis for Linux kernel drivers,”
in 26th USENIX Security Symposium (USENIX Security 17). Vancouver,
BC: USENIX Association, 2017, pp. 1007–1024. [Online]. Avail-
able:
https://www.usenix.org/conference/usenixsecurity17/technical-
sessions/presentation/machiry
[16] Manticore.
(2019) Symbolic execution tool.
[Online]. Available:
line]. Available: https://www.ekoparty.org/archivo/2011/ekoparty2011
Muller usb fuzzing.pdf
[18] N. Palix, G. Thomas, S. Saha, C. Calv`es, J. Lawall, and G. Muller,
“Faults in Linux: Ten years later,” in Proceedings of the Sixteenth
International Conference on Architectural Support for Programming
Languages and Operating Systems,
New
York, NY, USA: ACM, 2011, pp. 305–318.
[Online]. Available:
http://doi.acm.org/10.1145/1950365.1950401
ser. ASPLOS XVI.
[19] J. Patrick-Evans, L. Cavallaro, and J. Kinder, “POTUS: Probing
in
off-the-shelf USB drivers with
(WOOT
11th USENIX Workshop
17).
[On-
line]. Available: https://www.usenix.org/conference/woot17/workshop-
program/presentation/patrick-evans
BC: USENIX Association,
on Offensive
Technologies
Vancouver,
injection,”
symbolic
2017.
fault
[20] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz,
“kAFL: Hardware-assisted feedback fuzzing for OS kernels,” in 26th
USENIX Security Symposium (USENIX Security 17). Vancouver,
BC: USENIX Association, 2017, pp. 167–182.
[Online]. Avail-
able:
https://www.usenix.org/conference/usenixsecurity17/technical-
sessions/presentation/schumilo
[21] S. Schumilo and R. Spenneberg.
(2019) Don’t
how to ﬁnd bugs
https://www.blackhat.com/docs/eu-14/materials/eu-14-Schumilo-Dont-
Trust-Your-USB-How-To-Find-Bugs-In-USB-Device-Drivers-wp.pdf
in USB device drivers.
trust your USB!
[Online]. Available:
[22] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “Address-
Sanitizer: A fast address sanity checker,” in Presented as part of the
2012 USENIX Annual Technical Conference (USENIX ATC 12), 2012,
pp. 309–318.
[23] Y.
Shoshitaishvili, R. Wang, C. Hauser, C. Kruegel,
“Firmalice
vulnerabilities
G. Vigna,
automatic detection of
bypass
binary ﬁrmware.”
Internet
[Online]. Available:
trier.de/db/conf/ndss/ndss2015.html#Shoshitaishvili15
-
in
2015.
Society,
and
authentication
The
http://dblp.uni-
in NDSS.
[24] D. Song, F. Hetzelt, D. Das, C. Spensky, Y. Na, S. Volckaert, G. Vigna,
C. Kruegel, J.-P. Seifert, and M. Franz, “Periscope: An effective probing
and fuzzing framework for the hardware-OS boundary,” in 2019 Network
and Distributed Systems Security Symposium (NDSS).
Internet Society,
2019, pp. 1–15.
[25] C. Spensky, J. Stewart, A. Yerukhimovich, R. Shay, A. Trachtenberg,
R. Housley, and R. K. Cunningham, “Sok: Privacy on mobile devices–
its complicated,” Proceedings on Privacy Enhancing Technologies, vol.
2016, no. 3, pp. 96–116, 2016.
[26] J. V. Stoep. (2016) Android: protecting the kernel. [Online]. Available:
https://events.static.linuxfound.org/sites/events/ﬁles/slides/Android-
%20protecting%20the%20kernel.pdf
[27] H. Stuart, “Hunting bugs with Coccinelle,” Master’s Thesis, May 2008.
[28] Syzkaller.
Available:
[Online].
Kernel
fuzzer.