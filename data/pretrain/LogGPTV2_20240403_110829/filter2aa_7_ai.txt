^“1975年，MITS公司发布了Altair 8800型计算机，比尔·盖茨意识到为它开发软件是有利可图的，他写了一个BASIC语言解释器，卖给了MITS。这就是微软公司的第一个产品，当时比尔·盖茨还是哈佛大学二年级在校生。——译者注”
  所有创作者都面临这个问题。价格是由供给和需求共同决定的。好玩的软件的需求量，比不上解决客户麻烦问题的软件的需求量。在小剧场里演出的酬劳，比不上穿着卡通大猩猩服装、在展览会上为厂商站台的酬劳。写小说的回报比不上写广告文案的回报。开发编程语言的收入，比不上把某些公司老掉牙的数据库连上服务器的收入。
  黑客如何才能做自己喜欢的事情？我认为这个问题的解决方法是一个几乎所有创作者都知道的方法：找一份养家糊口的“白天工作”（day job）。这个词是从音乐家身上来的，他们晚上表演音乐，所以白天可以找一份其他工作。更一般地说，“白天工作”的意思是，你有一份为了赚钱的工作，还有一份为了爱好的工作。
  几乎所有的创作者在职业生涯的早期都有一份“白天工作”。画家和作家尤其显著。如果幸运的话，你能找到一份与你的“真正工作”非常相关的“白天工作”。音乐家似乎常常是在唱片行工作。同样地，钻研某种编程语言或操作系统的黑客，很可能会得到一份使用这些工具的“白天工作”。^
^“摄影技术对绘画造成的最大伤害，也许就是消灭了画家最好的“白天工作”。历史上，大多数伟大画家都靠画肖像谋生。摄影术发明不久，画肖像的工作机会就大大减少，从事摄影的黑客抢走了这些机会。（对于被画的人来说，坐在镜头前也更轻松一些。）肖像画家一这种要求高度技巧的工作——就这样或多或少地消失了。画家为了得到收入，就将肖像技巧用在为商业公司画品牌商品的广告图片。（可是，这样的工作也是极大地依赖于摄影术，或者更准确地说，极大地依赖于复制在书籍和杂志上的照片。）”
  当我说，黑客解决生计问题的方法是找一份“白天工作”，然后在其余时间开发优美的软件，我并没有说这是一个新方法。开源软件界的黑客早就这样做了。我想说的其实是，幵源软件的这种工作模式可能就是正确的模式，因为它已经被其他领域的创作者都验证过了。
  令我惊讶的是，雇主都很犹豫，不愿意手下的黑客为开源软件项目工作。但是，在Viaweb，要是你不愿意这样干，我们会很犹豫要不要雇用你。我们面试程序员的时候，主要关注的事情就是业余时间他们写了什么软件。因为如果你不爱一件事，你不可能把它做得真正优秀，要是你很热爱编程，你就不可避免地会开发你自己的项目。^
^“微软不鼓励雇员为开源项目做贡献，甚至业余时间也不行。但是，如此之多的一流黑客都在从事开源项目，所以这个政策主要的效果，可能就是使得微软公司很难雇到一流的程序员。”
  因为黑客更像创作者，而不是科学家，所以要了解黑客，不应该在科学家身上寻找启示，而是应该观察其他类型的创作者。那么，从画家身上，我们还能借鉴到什么对黑客的启示呢？
  有一件事情是可以借鉴的（至少可以确认），那就是应该如何学习编程。画家学习绘画的方法主要是动手去画，黑客学习编程的方法也理应如此。大多数黑客不是通过大学课程学会编程的，他们从实践中学习，13岁时就自己动手写程序了。即使上了大学，黑客学习编程依然主要通过自己写程序。^
^“大学里学习编程，就像读书和挑选衣服一样，你会发现自己髙中时的品味是多么糟糕。”
  画家的作品都会保留下来，你观察这些作品，就能看出他们是怎么一步步通过实践学习绘画的。如果你把一个画家的作品按照时间顺序排列，就会发现每幅画所用的技巧，都是建立在上一幅作品学到的东西之上。某幅作品如果有特别出色之处，你往往能够在更早的作品上发现一个小规模的初期版本。
  我想大多数创作者都是这样学习和工作的，作家和建筑师似乎都是如此。也许对于黑客来说，采取像画家这样的做法很有好处：应该定期地从头开始，而不要长年累月地在一个项目上不断工作，并且试图把所有的最新想法都以修订版的形式包括进去。
  黑客通过实践学习编程，这又是一个标志，说明黑客与科学家的区别有多大。科学家就不会通过干活来学习科学，而是通过做实验和解题来学习。科学家研究的基础都是现有的很完美的成果，在这个意义上，他们的第一步只是在复制别人已经做过的工作。最后，他们才会从某一个点开始，进行自己的原创性工作。但是，黑客就不一样，从一幵始做的就是原创性工作，根本没有他人完美的成果可以依靠。所以，黑客的出发点是原创，最终得到一个优美的结果；而科学家的出发点是别人优美的结果，最终得到原创性。
  创作者另一个学习的途径是通过范例。对画家来说，博物馆就是美术技巧的图书馆。几百年来，临荜大师的作品一直是传统美术教育的一部分，因为临摹迫使你仔细观察一幅画是如何完成的。
  作家也是这样学习写作的。富兰克林（Benjamin Franklin）通过总结和模仿艾迪生和斯梯尔的文章^，学会了写作。雷蒙·钱德勒（Raymond Chandler）^^也是如此学会了写作侦探小说。
^“此处的艾迪生指Joseph Addison（1672—1719），斯梯尔指Richard Steele（1672—1729），两人都是18世纪初的英国作家，于1711年共同创办了政论讽刺杂志《旁观者》》（The Spectator），产生了巨大的影响。——译者注”
^^“雷蒙·钱德勒（1888—1959），美国推理小说作家，他的私人侦探菲力普·马罗（Philip Marlowe）系列小说有很大的读者群。——译者注”
  同样地，黑客可以通过观看优秀的程序学会编程，不是看它们的执行结果，而是看它们的源代码。开源运动最鲜为人知的优点之一，就是使得学习编程变得更容易了。我学编程的时候，不得不主要依靠教材上的范例。那时可以搞到的源码，主要来自于Unix，但是就连Unix也不是开源的。大部分阅读Unix源码的人都是通过约翰·莱昂斯^那本书的非法影印本。该书虽然是1977年写的，但是在1996年之前都不被允许公开出版。
^“John Lions（1937—1998），澳大利亚计算机科学家。1976～1977年为了授课需要，他写了《UNIX第6版源码注释》（Lions' Commentary on UNIX 6th Edition, with Source Code）一书。很长一段时间中，该书是贝尔实验室之外唯一的UNIX内核源码文档。由于UNIX第6版源码只允许用于教学，所以该书直到1996年才公开出版，此前一直都是私下传播。人们普遍相信它是计算机科学领域被复印次数最多的书。——译者注”
  还有一个可以借鉴绘画的地方：一幅画是逐步完成的。通常一开始是一张草图，然后再逐步填入细节。但是，它又不单纯是一个填入细节的过程。有时，原先的构想看来是错的，你就必须动手修改。无数古代油画放在X光下检视，就能看出修改痕迹，四肢的位置被移动过，或者脸部的表情经过了调整。
  绘画的这个创作过程就值得学习。我认为黑客也应该这样工作。你不能盼望先有一个完美的规格设计，然后再动手编程，这样想是不现实的。如果你预先承认规格设计是不完美的，在编程的时候，就可以根据需要当场修改规格，最终会有一个更好的结果。
  （大公司的内部结构，使得它们很难这样做。这是又一个创业公司占优之处。）
  眼下想必每个人都知道，过早优化（premature optimization）是一件危险的事情。我认为，我们应该对“过早设计”（premature design）也抱有同样的担忧，不要太早决定一个程序应该怎么做。
  合适的工具能够帮助我们避免这种危险。一种好的编程语言，应该像油画颜料一样，能够使得我们很从容地改变想法。动态类型语言在这一点上就是蠃家，因为你不必提前就设置好各种变量的数据类型。不过我认为，编程语言灵活性的关键还不在这里，而在于这种语言应该非常抽象。最容易修改的语言就是简短的语言。
  我接下来要说的是，一幅优秀的绘画作品必须比它应该有的样子更好，这可能听起来有点矛盾。举例来说，图2-1所示达·芬奇的作品《女性肖像》（Ginevra de' Benci）现在保存在美国国家美术馆。你可以看到，达·芬奇在少女的头后面摆了一片树枝。他很仔细地画出了树枝上的每一片叶子。许多画家也许会觉得，那不过是放在背景里的衬托物，没有人会仔细看的，不妨简单处理一下就可以了。
图2-1 达·芬奇的《女性肖像》（Ginevra de' Benci），1474年
  但是达·芬奇不这样想。他对作品每一部分的认真程度完全不取决于预料中会不会有人仔细看这个部分。他就像篮球巨星迈克尔·乔丹（Michael Jordan），每一球都一丝不苟，绝不降低对自己的要求。
  坚持一丝不苟，就能取得优秀的成果。因为那些看不见的细节累加起来，就变得可见了。当人们从达·芬奇的《女性肖像》前面走过的时候，他们的注意力往往立刻就被它吸引住了，那时他们甚至还没有看到说明的标签牌，没有意识到这是达·芬奇的作品。所有那些看不见的细节合并在一起，就使得这样东西产生了惊人的效果，仿佛上千个细微的声音都以同一个音调在歌唱。
  同样地，优秀的软件也要求对美的狂热追求。如果你查看优秀软件的内部，就会发现那些预料中没有人会看见的部分也是优美的。我对待代码的认真程度远远超过我对待其他事情，如果我以这种态度对待日常生活的每件事，那么我就够资格找心理医生开处方药了。看到代码前面的缩进乱七八糟，或者看到丑陋的变量名，都会把我逼疯的。
  如果黑客只是一个负责实现领导意志的技术工人，职责就是根据规格说明书写出代码，那么他其实与一个挖水沟的工人是一样的，从这头挖到那头，仅此而已。但是，如果黑客是一个创作者，他从事的就不是机械性的工作，他必须具备灵感。