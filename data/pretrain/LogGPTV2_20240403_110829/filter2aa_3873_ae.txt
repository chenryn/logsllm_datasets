.ie n .Sh "有没有可能将 perl的指令列隐藏起来，以躲避像 "ps"之类的程式？"
.el .Sh "有没有可能将 perl的指令列隐藏起来，以躲避像 ``ps''之类的程式？"
.IX Subsection "Is there a way to hide perl's command line from programs such as ps?"
首先要注意的是，如果你的目的是为了安全（例如避免人们偷看到密码），那你应该重写你的程式，把重要的资讯从参数中剔除。光是隐藏起来不会让你的程式变得完全安全。
.PP
如要真的把看得见的指令列改掉，你可以设定 $0 这个变数值，如同 perlvar 里写的。但这方法并非各种作业系统都适用。像 sendmail之类的背景程式 (daemons) 就将它们的状态放在那儿：
.PP
.Vb 1
\&    $0 = "orcus [accepting connections]";
.Ve
.Sh "我在 perl script里 {更动目录，更改我的使用环境}。为何这些改变在程式执行完后就消失了呢？如何让我做的修改显露出来？"
.IX Subsection "I {changed directory, modified my environment} in a perl script.  How come the change disappeared when I exited the script?  How do I get my changes to be visible?"
.IP "Unix" 4
.IX Item "Unix"
严格的说起来，这是做不到的－一个 script 的执行是从启动它的 shell 生出一 个不同的程序来执行。这个程序的任何变动不会反映到它的父程序，只会反映到更 改之后它自己创造出来的子程序。有个 shell 魔术可以让你藉着在 shell 里 eval()你 script 的输出来装出这种效果，在 comp.unix.questions FAQ 里有详 细内容。
.Sh "如何关闭一个程序的文件句柄而不用等它完成呢？"
.IX Subsection "How do I close a process's filehandle without waiting for it to complete?"
假设你的系统支援这种功能，那就只要送个适当的讯号给此程序（参看 kill）。通常是先送一个 TERM 讯号，等一下下，然后再送个 KILL 讯号去终结它。
.Sh "如何 fork 一个守护进程？"
.IX Subsection "How do I fork a daemon process?"
如果你所指的是离线的程序（未与 tty 连线者），那下列的程序据说在大部份的 Unix系统都能用。非 Unix 系统的使用者应该检查 Your_OS::Process 模组看看有 没有其他的解决方案。
.IP "\(bu" 4
打开 /dev/tty 然后对它用 TIOCNOTTY ioctl。请参考 tty(4) 。更好的办法，你可以只用 \fIPOSIX::setsid()\fR 函数，从而不必担心进程组。
.IP "\(bu" 4
把目录换到 /
.IP "\(bu" 4
重开 STDIN、STDOUT 和 STDERR 使它们不会与旧的 tty 连接。
.IP "\(bu" 4
用下列方法把程式丢到后台：
.Sp
.Vb 1
\&    fork && exit;
.Ve
.PP
The Proc::Daemon module, available from \s-1CPAN\s0, provides a function to
perform these actions for you.
.Sh "如何知道自己是否在交互地运行？"
.IX Subsection "How do I find out if I'm running interactively or not?"
问得好。有的时候 \f(CW\*(C`\-t STDIN\*(C'\fRN 和 \f(CW\*(C`\-t STDOUT\*(C'\fR 可以提供线索，有时不行。
.PP
.Vb 3
\&    if (-t STDIN && -t STDOUT) {
\&        print "Now what? ";
\&    }
.Ve
.PP
在 POSIX 系统中，你可以用以下方法测试你自己的程序群组与现在控制你终端机 的是否相同：
.PP
.Vb 9
\&    use POSIX qw/getpgrp tcgetpgrp/;
\&    open(TTY, "/dev/tty") or die $!;
\&    $tpgrp = tcgetpgrp(fileno(*TTY));
\&    $pgrp = getpgrp();
\&    if ($tpgrp == $pgrp) {
\&        print "foreground\en";
\&    } else {
\&        print "background\en";
\&    }
.Ve
.Sh "如何为缓慢的事件设置超时？"
.IX Subsection "How do I timeout a slow event?"
如同 Signals 和 Camel 书第六章里所描述的，用 alarm() 函数， 或许再配合上一个讯号处理器。你也可以改用 CPAN 里更具弹性的 Sys::AlarmCall 模组来做。
.PP
The \fIalarm()\fR function is not implemented on all versions of Windows.
Check the documentation for your specific version of Perl.
.Sh "如何设置 CPU 限额?"
.IX Subsection "How do I set CPU limits?"
使用 CPAN 里的 BSD::Resource 模组。
.Sh "如何避免在 Unix 系统中产生僵尸进程？"
.IX Subsection "How do I avoid zombies on a Unix system?"
使用 Signals 里面叫 reaper 的程式码，在接到 SIGCHLD 时会呼 叫wait()，或是用 perlfaq8 中的 \*(L"How do I start a process in the background?\*(R" 里面写的双 fork 技巧。
.Sh "如何使用 SQL 数据库?"
.IX Subsection "How do I use an SQL database?"
The \s-1DBI\s0 module provides an abstract interface to most database
servers and types, including Oracle, \s-1DB2\s0, Sybase, mysql, Postgresql,
\&\s-1ODBC\s0, and flat files.  The \s-1DBI\s0 module accesses each database type
through a database driver, or \s-1DBD\s0.  You can see a complete list of
available drivers on \s-1CPAN:\s0 http://www.cpan.org/modules/by\-module/DBD/ .
You can read more about \s-1DBI\s0 on http://dbi.perl.org .
.PP
Other modules provide more specific access: Win32::ODBC, Alzabo, iodbc,
and others found on \s-1CPAN\s0 Search: http://search.cpan.org .
.Sh "如何使 system() 在收到 control-C 时退出?"
.IX Subsection "How do I make a system() exit on control-C?"
做不到。你需要摹仿 system() 呼叫（参看 perlipc 里的范例程式），然后设计一个讯号处理器，让它把 INT 讯号传给子程序。或者可以检测它：
.PP
.Vb 2
\&    $rc = system($cmd);
\&    if ($rc & 127) { die "signal death" }
.Ve
.Sh "如何无阻塞地打开一个文件？"
.IX Subsection "How do I open a file without blocking?"
如果你有幸使用到支援无阻塞读的系统（大部份 Unix 般的系统都有支援）， 你只需要用 Fcntl 模组里的 O_NDELAY 或 O_NONBLOCK 旗标，配合 sysopen()：
.PP
.Vb 3
\&    use Fcntl;
\&    sysopen(FH, "/tmp/somefile", O_WRONLY|O_NDELAY|O_CREAT, 0644)
\&        or die "can't open /tmp/somefile: $!":
.Ve
.Sh "How do I install a module from \s-1CPAN\s0?"
.IX Subsection "如何从 CPAN 安装模块?"
最简单的方法就是让 CPAN 这个模组替你代劳。这个模组包含在 5.004及以后的版 本中。
.PP
.Vb 1
\&    $ perl -MCPAN -e shell
.Ve
.PP
.Vb 2
\&    cpan shell -- CPAN exploration and modules installation (v1.59_54)
\&    ReadLine support enabled
.Ve
.PP
.Vb 1
\&    cpan> install Some::Module
.Ve
.PP
如要手动安装 CPAN 模组，或是任何按规矩发展的 CPAN模组，遵循以下步 骤：
.IP "1" 4
.IX Item "1"
把源代码解压到临时目录
.IP "2" 4
.IX Item "2"
.Vb 1
\&    perl Makefile.PL
.Ve
.IP "3" 4
.IX Item "3"
.Vb 1
\&    make
.Ve
.IP "4" 4
.IX Item "4"
.Vb 1
\&    make test
.Ve
.IP "5" 4
.IX Item "5"
.Vb 1
\&    make install
.Ve
.PP
如果你用的 perl 版本在编译时没有建入动态连结的功能，那你只消把第叁步 (make)换成 make perl 然后你就会得到一个新的 perl 执行档，里头连 有你新加入的延伸。
.PP
在 ExtUtils::MakeMaker 里面有更多关于建构模组的细节，并参考下一个问题，require 和 use 的区别是什么？。
.Sh "require 和 use 的区别是什么？"
.IX Subsection "What's the difference between require and use?"
Perl offers several different ways to include code from one file into
another.  Here are the deltas between the various inclusion constructs:
.PP
.Vb 3
\&    1)  do $file is like eval `cat $file`, except the former
\&        1.1: searches @INC and updates %INC.
\&        1.2: bequeaths an *unrelated* lexical scope on the eval'ed code.
.Ve
.PP
.Vb 3
\&    2)  require $file is like do $file, except the former
\&        2.1: checks for redundant loading, skipping already loaded files.
\&        2.2: raises an exception on failure to find, compile, or execute $file.
.Ve
.PP
.Vb 3
\&    3)  require Module is like require "Module.pm", except the former
\&        3.1: translates each "::" into your system's directory separator.
\&        3.2: primes the parser to disambiguate class Module as an indirect object.
.Ve
.PP
.Vb 3
\&    4)  use Module is like require Module, except the former
\&        4.1: loads the module at compile time, not run-time.
\&        4.2: imports symbols and semantics from that package to the current one.
.Ve
.PP
In general, you usually want \f(CW\*(C`use\*(C'\fR and a proper Perl module.
.Sh "如何设置我自己的模块/库路径？"
.IX Subsection "How do I keep my own module/library directory?"
当你建构模组时，在产生 Makefiles 时使用 PREFIX 选项：
.PP
.Vb 1
\&    perl Makefile.PL PREFIX=/mydir/perl LIB=/mydir/perl/lib
.Ve
.PP
然后在执行用到此 模组／程式库 的程式前先设好 PERL5LIB 环境变数（参考 perlrun ），或是用
.PP
.Vb 1
\&    use lib '/mydir/perl/lib';
.Ve
.PP
这样与下面几乎相同
.PP
.Vb 3
\&    BEGIN {
\&        unshift(@INC, '/mydir/perl/lib');
\&    }
.Ve
.PP
但 lib 模块检测独立于机器的子目录。参见 Perl 的 lib 模块来获取详细信息。
.Sh "如何将我自己的程序的路径加入到模块/库搜索路径中？"
.IX Subsection "How do I add the directory my program lives in to the module/library search path?"
.Vb 3
\&    use FindBin;
\&    use lib "$FindBin::Bin";
\&    use your_own_modules;
.Ve
.Sh "如何在运行时将一个目录加入到我的 include 路径 (@INC) 中？"
.IX Subsection "How do I add a directory to my include path (@INC) at runtime?"
以下是我们建议更动引入路径的方法：
.PP
.Vb 5
\&    环境变量 PERLLIB 
\&    环境变量 PERL5LIB
\&    perl -Idir 命令行标志
\&    use lib 编用，类似
\&        use lib "$ENV{HOME}/myown_perllib";
.Ve
.PP
后者特别有用，因为它知道与机器相关的架构。lib.pm 机制模组是从 5.002 版开 始包含在 Perl 里面的。
.Sh "什么是 socket.ph，从哪儿可以得到它？"
.IX Subsection "What is socket.ph and where do I get it?"
It's a perl4\-style file defining values for system networking
constants.  Sometimes it is built using h2ph when Perl is installed,
but other times it is not.  Modern programs \f(CW\*(C`use Socket;\*(C'\fR instead.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997\-2003 Tom Christiansen and Nathan Torkington.
All rights reserved.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples in this file
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.
.SH "译者"
.B 陈彦铭，萧百龄，两只老虎工作室