∗
(cid:80)N
Denoting by X(n) =
i=1 xi(n) the combined rate of all
N end-users at time n, the corresponding combined station-
ary rate X∗ is:
∗
X
∗
= N x
= C + N
α
β
.
(47)
Next, recall from Theorem 3 that stability conditions (31)-
(32) must hold for the delayed system to be stable. Con-
sequently, we substitute pricing function (44) into (32) and
obtain with the help of (47):
∗
βp
+ βN x
∗ ∂p(n)
∂x(n)
= βp
∗
+
βN x∗C
N 2x∗2 = β.
x∗
(48)
(cid:175)(cid:175)(cid:175)(cid:175)
(a) D = 20
(b) random Di
Figure 4: Two EMKC ﬂows (α = 200 mb/s and
β = 0.5) share a single link of capacity 10 gb/s: (a)
constant (homogeneous) delay D = 20 time units; (b)
heterogeneous delays randomly distributed between
1 and 100 time units.
0  0 and 0 < β < 1:
x(t) =
x(t − RT T ) + α
per RTT
(1 − β)x(t − RT T ) per loss
.
(55)
(cid:40)
05101520020040060080010001200sending rate (mb/s)control steps020040060080010001200140001002003004005006007008009001000sending rate (mb/s)control steps05010015020025000.20.40.60.811.21.4control stepssending rate (mb/s)combined rateindividual rates05010015020025000.20.40.60.811.21.41.61.82control stepssending rate (mb/s)combined rateindividual rates(a)
(b)
(a)
(b)
Figure 7:
(a) Veriﬁcation of model (54) against
EMKC simulations (C = 1 mb/s, α = 10 kb/s, and
β = 0.5). (b) Exponential and linear rates of conver-
gence to fairness for EMKC (ε = 0.1).
Figure 8:
(a) Veriﬁcation of model (56) against
AIMD simulations (C = 1 mb/s, α = 10 kb/s, and
β = 0.5). (b) Ratio θM /θA for ﬁxed and variable N .
Theorem 6. Under the assumptions of Theorem 5, rate-
based AIMD reaches ε-fairness in θA steps, where:
(C + N α
β )
log N − log ε
θA =
−N α log(1 − β)/β
+ Θ
.
(56)
(cid:161)
(cid:162)
(cid:179) N α
(cid:180)
C
Figure 8(a) veriﬁes that model (56) is also very accurate
for a range of diﬀerent ε. Notice from (54) and (56) that the
speed of convergence to fairness between AIMD and EMKC
diﬀers by a certain constant coeﬃcient. The following corol-
lary formalizes this observation.
Corollary 3. For the same parameters N , α, β such
that N α (cid:191) C, AIMD reaches ε-fairness θM /θA = − log(1−
β)/β times faster than EMKC.
For TCP and β = 0.5, this diﬀerence is by a factor of
2 log 2 ≈ 1.39, which holds regardless of whether N is ﬁxed
or not as demonstrated in Figure 8(b). We should ﬁnally
note that as term Θ(N α/C) becomes large, MKC’s perfor-
mance improves and converges to that of AIMD.
5.3 Packet Loss
As seen in previous sections, EMKC converges to the com-
bined stationary point X∗ = C + N α/β, which is above
capacity C. This leads to constant (albeit usually small)
packet loss in the steady state. However, the advantage
of this framework is that EMKC does not oscillate or re-
act to individual packet losses, but instead adjusts its rate
in response to a gradual increase in p(n). Thus, a small
amount of FEC can provide a smooth channel to ﬂuctuation-
sensitive applications such as video telephony and various
types of real-time streaming. Besides being a stable frame-
work, EMKC is also expected to work well in wireless net-
works where congestion-unrelated losses will not cause sud-
den reductions in the rates of end-ﬂows.
Also notice that EMKC’s steady-state packet loss p∗ =
N α/(Cβ + N α) increases linearly with the number of com-
peting ﬂows, which causes problems in scalability to a large
number of ﬂows. However, it still outperforms AIMD, whose
increase in packet loss is quadratic as a function of N [21].
Furthermore,
if the network provider keeps N = Θ(C),
EMKC achieves constant packet loss in addition to exponen-
tial convergence to fairness.
Finally, observe that if the router is able to count the
number of ﬂows, zero packet loss can be obtained by adding
a constant ∆ = N α/(βC) to the congestion indication func-
tion [3]. However, this method is impractical, since it needs
non-scalable estimation of the number of ﬂows N inside each
router. Hence, it is desirable for the router to adaptively
tune p(n) so that the system is free from packet loss. One
such method is AVQ (Adaptive Virtual Queue) proposed in
[16], [19]. We leave the analysis of this approach under het-
erogeneous delays and further improvements of EMKC for
future work.
6. SIMULATIONS
We next examine how to implement scalable AQM func-
tions inside routers to provide proper feedback to MKC ﬂows.
This is a non-trivial design issue since the ideal packet loss
in (44) relies on the sum of instantaneous rates xi(n), which
are never known to the router.
In such cases, a common
approach is to approximate model (44) with some time-
average function computed inside the router. However, as
mentioned in the introduction, this does not directly lead to
an oscillation-free framework since directional delays of real
networks introduce various inconsistencies in the feedback
loop and mislead the router to produce incorrect estimates
of X(n) =
(cid:80)
i xi(n).
In what follows in this section, we provide a detailed de-
scription of various AQM implementation issues and simu-
late EMKC in ns2 under heterogeneous feedback delays.
6.1 Packet Header
As shown in Figure 9, the MKC packet header consists
of two parts – a 16-byte router header and a 4-byte user
header. The router header encapsulates information that is
necessary for the router to generate precise AQM feedback
and subsequently for the end-user to adjust its sending rate.
The rid ﬁeld is a unique label that identiﬁes the router that
generated the feedback (e.g., its IP address). This ﬁeld is
used by the ﬂows to detect changes in bottlenecks, in which
case they wait for an extra RTT before responding to con-
gestion signals of the new router. The seq ﬁeld is a local
variable incremented by the router each time it produces a
new value of packet loss p (see below for more). Finally, the
∆ ﬁeld carries the length of the averaging interval used by
the router in its computation of feedback.
10−410−310−210−1100150200250300350400450500550600εsteps to reach ε−fairnesssimulationmodel02040608010012005001000150020002500300035004000C (mb/s)steps to reach ε−fairnesssimulation N=C/500model N=C/500simulation N=2model N=210−410−310−210−1100150200250300350400450500550600εsteps to reach ε−fairnesssimulationmodel02040608010012000.20.40.60.811.21.41.61.82C (mb/s)ratioN=C/500N=2Figure 9: Packet format of MKC.
The user header is necessary for the end-ﬂows to deter-
mine the rate xi(n − Di) that was in eﬀect RTT time units
earlier. The simplest way to implement this functionality is
to inject the value of xi(n) into each outgoing packet and
then ask the receiver to return this ﬁeld in its acknowledg-
ments. A slightly more sophisticated usage of this ﬁeld is
discussed later in this section.
6.2 The Router
Recall that MKC decouples the operations of users and
routers, allowing for a scalable decentralized implementa-
tion. The major task of the router is to generate its AQM
feedback and insert it in the headers of all passing pack-
ets. However, notice that the router never knows the exact
combined rate of incoming ﬂows. Thus, to approximate the
ideal computation of packet loss, the router conducts its
calculation of p(n) on a discrete time scale of ∆ time units.