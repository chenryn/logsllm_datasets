many zero limbs in any value produced by multiplication
with the ciphertext, but when squaring such a many-zero-
limbed value the result has fewer zero limbs, resulting in
an easily-distinguishable side channel signals whenever
a squaring operation (BN mod mul(r,r,r,m) in our ex-
amples) immediately follows a 1-valued window (i.e.
when r is equal to rprev ∗ c mod m). This approach has
been extended [21] to construct a (chosen) ciphertext that
reveals when a particular window value is used in mul-
tiplication in a windowed implementation, allowing full
recovery of the exponent by collecting signals that cor-
USENIX Association
27th USENIX Security Symposium    589
respond to 2w chosen ciphertexts (one for each window
value). However, chosen-ciphertext attacks can be pre-
vented in the current implementation of OpenSSL by en-
abling blinding, which combines the ciphertext with an
encrypted (using the public key) random “ciphertext”,
performs secret-exponent modular exponentiation on this
blinded version of the ciphertext, and then “unblinding”
the decrypted result.
Overall, because large-integer multiplication is where
large-integer exponentiation spends most of its time,
most of the side-channel measurements (e.g. signal sam-
ples for physical side channels) also correspond to this
multiplication activity and thus both attacks and miti-
gation tend to focus on that part of the signal, leaving
the (comparably brief) parts of the signal in-between the
multiplications largely unexploited by attacks but also
unprotected by countermeasures. The next section de-
scribes our new attack approach that targets the signal
that corresponds to computing the value of the window,
i.e .the signal between the multiplications.
3 Proposed Attack Method
In both ﬁxed- and sliding-window implementations, our
attack approach focuses on the relatively brief periods of
computation that considers each bit of the exponent and
forms the window value wval. The attack approach has
three key components that we will discuss as follows.
First, Section 3.1 describes how the signal is received
and pre-processed. Second, Section 3.2 describes how
we identify the point in the signal’s timeline where each
interval of interest begins. Finally, we describe how the
bits of the secret exponent are recovered from these sig-
nal snippets for ﬁxed-window (Section 3.3) and sliding-
window (Section 3.4) implementations.
3.1 Receiving the Signal
The computation we target is brief and the different val-
ues of exponent bits produce relatively small variation in
the side-channel signal, so the signals subjected to our
analysis need to have sufﬁcient bandwidth and signal-
to-noise ratio for our analysis to succeed. To maximize
the signal-to-noise ratio while minimizing intrusion, we
position EM probes just outside the targeted device’s en-
closure. We then run RSA decryption in OpenSSL on
the target device while recording the signal in a 40 MHz
band around the clock frequency. The 40 MHz band-
width was chosen as a compromise between recovery
rate for the bits of the secret exponent and the avail-
ability and cost of receivers capable of capturing the de-
sired bandwidth. Speciﬁcally, the 40 MHz bandwidth
is well within the capabilities of Ettus USRP B200-mini
receiver, which is very compact, costs less than $1,000,
and can receive up to 56 MHz of bandwidth around a
center frequency that can be set between 70 MHz and 6
GHz, and yet the 40 MHz bandwidth is sufﬁcient to re-
cover nearly all bits of the secret exponent from a single
instance of exponentiation that uses that exponent.
We then apply AM demodulation to the received sig-
nal, and ﬁnally upsample it by a factor of 4. The upsam-
pling consists of interpolating through the signal’s exist-
ing sample points and placing additional points along the
interpolated curve. This is needed because our receiver’s
sampling is not synchronized in any way to the compu-
tation of interest, so two signal snippets collected for the
same computation may be misaligned by up to half of the
sample period. Upsampling allows us to re-align these
signals with higher precision, and we found that 4-fold
upsampling yields sufﬁcient precision for our purposes.
3.2
Identifying Relevant Parts
of the Signal
Figure 4 shows a brief portion of the signal that begins
during ﬁxed-window exponentiation in OpenSSL. It in-
cludes part of one large-number multiplication (Line 7 in
Figure 3), which in OpenSSL uses the Montgomery al-
gorithm and a constant-time implementation designed to
avoid multiplicand-dependent timing variation that was
exploited by prior side-channel attacks. The point in time
where Montgomery multiplication returns and the rele-
vant part of the signal begins is indicated by a dashed
vertical line in Figure 4. In this particular portion of the
signal, the execution proceeds to lines 8 and 9 Figure 2,
where a bit of the exponent is obtained and added to
wval, then lines 10 and 6, and then 7 where, at the point
indicated by the second dashed vertical line, it enters an-
other Montgomery multiplication, whose signal contin-
ues well past the right edge of Figure 4. As indicated in
the ﬁgure, the relevant part of the signal is very brief rel-
ative to the duration of the Montgomery multiplication.
A naive approach to identifying the relevant snippets
in the overall signal would be to obtain reference sig-
nal snippets during training and then, during the attack,
match against these reference snippets at each position
in the signal and use the best-matching parts of the sig-
nal. Such signal matching works best when looking for a
snippet that has prominent features, so they are unlikely
to be obscured by the noise, and whose prominent fea-
tures occur in a pattern which is unlikely to exist else-
where in the signal. Unfortunately, the signal snippets
relevant for our analysis have little signal variation (rela-
tive to other parts of the signal) and a signal shape (just
a few up-and-downs) that many other parts of the sig-
nal resemble.
In contrast, the signal that corresponds
to the Montgomery multiplication has stronger features,
and they occur in a very distinct pattern.
590    27th USENIX Security Symposium
USENIX Association
Figure 4: Signal that includes the end of one Montgomery multiplication, then the part relevant to our analysis, and
then the beginning of another Montgomery multiplication. The horizontal axis is time (from left to right) and the
vertical axis is the magnitude of the AM-demodulated signal.
Therefore,
instead of ﬁnding instances of relevant
snippets by matching them against their reference sig-
nals from training, we use as a reference the signal that
corresponds to the most prominent change in the sig-
nal during Mongtomery multiplication, where the signal
abruptly changes from a period with a relatively low sig-
nal level to a period with a relatively high signal level.
We identify this point in the signal using a very efﬁ-
cient algorithm. We ﬁrst compute the signal’s moving
median (thick dashed black curve in Figure 4) to im-
prove resilience to noise. We then examine the deriva-
tive (slope) of this moving median (thick red curve in
Figure 4) to identify peaks that signiﬁcantly exceed its
statistically expected variation. In Figure4 the thick red
arrow indicates such a peak, which corresponds to the
most prominent change in the Montgomery multiplica-
tion that precedes the relevant part of the signal. Be-
cause the implementation of the Montgomery multipli-
cation was designed to have almost no timing variation,
the signal snippet we actually need for analysis is at a
ﬁxed time offset from the point of this match.
Because this method of identifying the relevant snip-
pets of the signal is based on the signal that corresponds
to the Montgomery multiplication that precedes each rel-
evant snippet, the same method can be used for extract-
ing relevant signal snippets for both ﬁxed-window and
sliding-window exponentiation – in both cases the rele-
vant snippet is at the (same) ﬁxed offset from the point at
which a prominent-enough peak is detected in the deriva-
tive of the signal’s moving median.
3.3 Recovering Exponent Bits in
the Fixed-window Implementation
In the ﬁxed-window implementation, large-number mul-
tiplication is used for squaring (Line 7 in Figure 3) and
for updating the result after each window (Line 14). Thus
there are four control-ﬂow possibilities for activity be-
tween Montgomery multiplications.
The ﬁrst two control ﬂow possibilities begin when the
Montgomery multiplication in line 7 completes. Both
control ﬂow possibilities involve updating the window
value to include another bit from the exponent (lines 8,
9, and 10), and at line 6 incrementing i and checking it
against w, the maximum size of the window. The ﬁrst
control ﬂow possibility is the more common one - the
window does not end and the execution proceeds to line
7 when another multiplication at line 7. We label this
control ﬂow possibility S-S (from a squaring to a squar-
ing). The second control ﬂow possibility occurs after the
last bit of the window is examined and added to wval,
and in that case the loop at line 6 is exited, the parame-
ters for the result update at line 14 are prepared, and the
Montgomery multiplication at line 14 begins. The pa-
rameter preparation in our code example would involve
computing the address of ct[wval] to create a pointer that
would be passed to the Montgomery multiplication as its
second multiplicand. In OpenSSL’s implementation the
ct is kept in a scattered format to minimize leakage of
wval through the cache side channel while computing the
Montgomery multiplication, so instead the value of wval
is used to gather the scattered parts of ct[wval] into a pre-
allocated array that is passed to Montgomery multiplica-
tion. Since this pre-allocated array is used for all result-
update multiplications, memory and cache behavior dur-
ing the Montgomery multiplication no longer depend on
wval. This means that in this second control-ﬂow pos-
sibility involves signiﬁcant activity to gather the parts of
the multiplicand and place them into the pre-allocated
array, and only then the Montgomery multiplication at
line 14 begins. We label this control ﬂow possibility S-U
(from a squaring to an update).
USENIX Association
27th USENIX Security Symposium    591
Demodulated SignalMoving MedianSlope of Moving MedianRelevantPart(only 23sample points)Constant-Time MontgomeryMultiplicationBeginsConstant-Time MontgomeryMultiplication EndsThe last two control ﬂow possibilities occur after the
result update in line 14 completes its Montgomery mul-
tiplication. The loop condition at line 2 is checked, and
then one control ﬂow possibility (third of the four) is that
the entire exponentiation loop exits. We label this con-
trol ﬂow possibility U-X (from an update to an exit). The
last control-ﬂow possibility, which occurs for all win-
dows except the last one, is that after line 2 we execute
line 3, enter the window-scanning loop at line 6, and be-
gin the next large-number Montgomery multiplication at
line 7. We label this control ﬂow possibility U-S (from
an update to a squaring).
The sequence in which these four control ﬂow pos-
sibilities are encountered in each window is always the
same: w− 1 occurrences of S-S, then one occurrence of
S-U, then either U-S or U-X, where U-X is only possible
for the last window of the exponent.
The ﬁrst part of our analysis involves distinguishing
among these four control ﬂow possibilities. The reason
for doing so is that noise bursts, interrupts, and activity
on other cores can temporarily interfere with our signal
and prevent detection of Montgomery multiplication. In
such cases, sole reliance on the known sequence of con-
trol ﬂow possibilities would cause a “slip” between the
observed sequence and the expected one, causing us to
use incorrect reference signals to recover bits of the ex-
ponent and to put the recovered bits at incorrect positions
within the recovered exponent.
The classiﬁcation into the four possibilities is much
more reliable than recovery of exponent’s bits. Com-
pared to the other three possibilities, S-U spends sig-
niﬁcantly more time between Montgomery multiplica-
tions (because of the multiplicand-gathering activity), so
it can be recognized with high accuracy and we use it
to conﬁrm that the exponentiation has just completed a
window. The U-X possibility is also highly recogniz-
able because, instead of executing Montgomery multi-
plication after it, it leads to executing code that converts
from Montgomery to standard large-number format, and
it serves to conﬁrm that the entire exponentiation has
ended. The S-S and U-S snippets both involve only a
few instructions between Montgomery multiplications so
they are harder to tell apart, but our signal matching still
has a very high accuracy in distinguishing between them.
After individual snippets are matched to the four pos-
sibilities, that matching is used to ﬁnd the most likely
mapping of the sequence of snippets onto the known
valid sequence. For example, if for w = 5 we observe
S-U, U-S, S-S, S-S, S-S, S-U, all with high-conﬁdence
matches, we know that one S-S is missing for that win-
dow. We then additionally use timing between these
snippets to determine the position of the missing S-S.
Even if that determination is erroneous, we will correctly
begin the matching for the next window after the S-U, so
a missing snippet is unlikely to cause any slips, but even
when it does cause a slip, such a slip is very likely to
be “contained” within one exponentiation window. Note
that a missing S-U or S-S snippet prevents our attack
from using its signal matching to recover the value of the
corresponding bit. A naive solution would be to assign
a random value to that bit (with a 50% error rate among
missing bits). However, for full RSA key recovery miss-
ing bits (erasures, i.e.
the value of the bit is known to
be unknown) are much less problematic than errors (the
value of the bit is incorrect but not known a priori to be
incorrect), we label these missing bits as erasures.
Finally, for S-S and S-U snippets we perform addi-
tional analysis to recover the bit of the exponent that
snippet corresponds to. Recall that, in both S-S and S-U
control ﬂow possibilities, in line 9 a new bit is read from
the exponent and is added to wval, and that bit is the one
we will recover from the snippet. For ease of discussion,
we will refer to the value of this bit as bval. To recover
bval, in training we obtain examples of these snippets for
each value of bval. To suppress the noise in our reference
snippets and thus make later matching more accurate,
these reference snippets are averages of many “identical”
examples from training. Clearly, there should be separate
references for bval = 0 (where only bval = 0 examples
are averaged) and for bval = 1 (where only bval = 1 ex-
amples are averaged. However, bval is not the only value
that affects the signal in a systematic way – the signal
in this part of the computation is also affected by previ-
ous value of wval, loop counter i, etc. The problem is
that these variations occur in the same part of the signal
where variations due to bval occur, so averaging of these
different variants may result in attenuating the impact of
bval. We alleviate this problem by forming separate ref-
erences for different bit-positions within the window, e.g.
for window size w = 5 each value of bval would have 4
sets of S-S snippets and one set of S-U snippets, because
the ﬁrst for bits in the window correspond to S-S snip-
pets and the last bit in the window to an S-U snippet. To
account for other value-dependent in the signal, in each
such set of snippets we cluster similar signals together
and use the centroid of each cluster as the reference sig-
nal. We use the K-Means clustering algorithm and the
distance metric used for clustering is Euclidean distance
(sum of squared differences among same-position sam-
ples in the two snippets). We found that having at least
6-10 clusters for each set of snippets discussed above im-
proves accuracy signiﬁcantly. Beyond 6-10 clusters our
recovery of secret exponent’s bits improves only slightly
but requires more training examples to compensate for
having fewer examples per cluster (and thus less noise