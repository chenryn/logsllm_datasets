Drinking from LETHE:
New methods of exploiting and mitigating 
memory corruption vulnerabilities
Daniel Selifonov
DEF CON 23
August 7, 2015
Show of Hands
1. Have you written programs in C or C++?
2. Have you implemented a classic stack smash 
exploit?
3. … a return-to-libc or return-oriented-
programming exploit?
4. … a return-to-libc or ROP exploit that used 
memory disclosure or info leaks?
Motivations
● Software is rife with 
memory corruption 
vulnerabilities
● Most memory corruption 
vulnerabilities are directly 
applicable to code 
execution exploits
● And there's no end in 
sight...
Motivations (II)
● Industrialized 
ecosystem of 
vulnerability 
discovery and 
brokering 
weaponized exploits
● Little of this discovery 
process feeds into 
fixes...
The other AFL
Motivations (III)
● State actor (e.g. NSA 
Tailored Access 
Operations group) 
budgets: ≈ $∞
● Bug bounties just 
drive up prices
● Target supply, not 
demand for exploits...
The Plan
● Sever the path between 
vulnerability and 
(reliable) exploit
● Why do programmers 
keep hitting this 
fundamental blindspot?
● Defenses are born in 
light of attack strategies
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Memory Safety
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Part II:
Code Injection
Smashing the Stack (1996)
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Smashing the Stack (1996)
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Smashing the Stack (1996)
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Smashing the Stack (1996)
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Smashing the Stack (1996)
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Smashing the Stack (1996)
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Smashing the Stack (1996)
#include 
int main() {
    foo();
    bar(11, 12);
    return 0;
}
void foo() {
    int a;
    char b[23];
    gets(b);
    printf("Hey %s!\n",b);
}
int bar(int x, int y) {
    return x + y;
}
Paging/Virtual Memory
0xdeadbeef
Paging/Virtual Memory
0xdeadbeef