682
ptr3 = ptr1 + 4;
printf("\nadding an int to a pointer:\n");
printf("ptr1 + 4 = %p, *(ptr1 + 4) = %d\n", ptr1 + 4, *(ptr1 + 4));
ptr1++;         // 递增指针
printf("\nvalues after ptr1++:\n");
printf("ptr1 = %p, *ptr1 =%d, &ptr1 = %p\n", ptr1, *ptr1, &ptr1);
ptr2--;         // 递减指针
printf("\nvalues after --ptr2:\n");
printf("ptr2 = %p, *ptr2 = %d, &ptr2 = %p\n", ptr2, *ptr2, &ptr2);
--ptr1;         // 恢复为初始值
++ptr2;         // 恢复为初始值
printf("\nPointers reset to original values:\n");
printf("ptr1 = %p, ptr2 = %p\n", ptr1, ptr2);
// 一个指针减去另一个指针
printf("\nsubtracting one pointer from another:\n");
printf("ptr2 = %p, ptr1 = %p, ptr2 - ptr1 = %td\n", 
ptr2, ptr1, ptr2 - ptr1);
// 一个指针减去一个整数
printf("\nsubtracting an int from a pointer:\n");
683
printf("ptr3 = %p, ptr3 - 2 = %p\n", ptr3, ptr3 - 2);
return 0;
}
下面是我们的系统运行该程序后的输出：
pointer value, dereferenced pointer, pointer address:
ptr1 = 0x7fff5fbff8d0, *ptr1 =100, &ptr1 = 0x7fff5fbff8c8
adding an int to a pointer:
ptr1 + 4 = 0x7fff5fbff8e0, *(ptr1 + 4) = 500
values after ptr1++:
ptr1 = 0x7fff5fbff8d4, *ptr1 =200, &ptr1 = 0x7fff5fbff8c8
values after --ptr2:
ptr2 = 0x7fff5fbff8d4, *ptr2 = 200, &ptr2 = 0x7fff5fbff8c0
Pointers reset to original values:
ptr1 = 0x7fff5fbff8d0, ptr2 = 0x7fff5fbff8d8
subtracting one pointer from another:
ptr2 = 0x7fff5fbff8d8, ptr1 = 0x7fff5fbff8d0, ptr2 - ptr1 = 2
subtracting an int from a pointer:
ptr3 = 0x7fff5fbff8e0, ptr3 - 2 = 0x7fff5fbff8d8
下面分别描述了指针变量的基本操作。
684
赋值：可以把地址赋给指针。例如，用数组名、带地址运算符（&）的
变量名、另一个指针进行赋值。在该例中，把urn数组的首地址赋给了ptr1，
该地址的编号恰好是0x7fff5fbff8d0。变量ptr2获得数组urn的第3个元素
（urn[2]）的地址。注意，地址应该和指针类型兼容。也就是说，不能把
double类型的地址赋给指向int的指针，至少要避免不明智的类型转换。
C99/C11已经强制不允许这样做。
解引用：*运算符给出指针指向地址上储存的值。因此，*ptr1的初值是
100，该值储存在编号为0x7fff5fbff8d0的地址上。
取址：和所有变量一样，指针变量也有自己的地址和值。对指针而言，
&运算符给出指针本身的地址。本例中，ptr1 
储存在内存编号为
0x7fff5fbff8c8 的地址上，该存储单元储存的内容是0x7fff5fbff8d0，即urn的地
址。因此&ptr1是指向ptr1的指针，而ptr1是指向utn[0]的指针。
指针与整数相加：可以使用+运算符把指针与整数相加，或整数与指针
相加。无论哪种情况，整数都会和指针所指向类型的大小（以字节为单位）
相乘，然后把结果与初始地址相加。因此ptr1 
+4与&urn[4]等价。如果相加
的结果超出了初始指针指向的数组范围，计算结果则是未定义的。除非正好
超过数组末尾第一个位置，C保证该指针有效。
递增指针：递增指向数组元素的指针可以让该指针移动至数组的下一个
元素。因此，ptr1++相当于把ptr1的值加上4（我们的系统中int为4字节），
ptr1指向urn[1]（见图10.4，该图中使用了简化的地址）。现在ptr1的值是
0x7fff5fbff8d4（数组的下一个元素的地址），*ptr的值为200（即urn[1]的
值）。注意，ptr1本身的地址仍是 0x7fff5fbff8c8。毕竟，变量不会因为值发
生变化就移动位置。
685
图10.4 递增指向int的指针
指针减去一个整数：可以使用-运算符从一个指针中减去一个整数。指
针必须是第1个运算对象，整数是第 2 个运算对象。该整数将乘以指针指向
类型的大小（以字节为单位），然后用初始地址减去乘积。所以ptr3 - 2与
&urn[2]等价，因为ptr3指向的是&arn[4]。如果相减的结果超出了初始指针所
指向数组的范围，计算结果则是未定义的。除非正好超过数组末尾第一个位
置，C保证该指针有效。
递减指针：当然，除了递增指针还可以递减指针。在本例中，递减ptr3
使其指向数组的第2个元素而不是第3个元素。前缀或后缀的递增和递减运算
符都可以使用。注意，在重置ptr1和ptr2前，它们都指向相同的元素urn[1]。
指针求差：可以计算两个指针的差值。通常，求差的两个指针分别指向
同一个数组的不同元素，通过计算求出两元素之间的距离。差值的单位与数
组类型的单位相同。例如，程序清单10.13的输出中，ptr2 - ptr1得2，意思是
这两个指针所指向的两个元素相隔两个int，而不是2字节。只要两个指针都
指向相同的数组（或者其中一个指针指向数组后面的第 1 个地址），C 都能
保证相减运算有效。如果指向两个不同数组的指针进行求差运算可能会得出
一个值，或者导致运行时错误。
比较：使用关系运算符可以比较两个指针的值，前提是两个指针都指向
686
相同类型的对象。
注意，这里的减法有两种。可以用一个指针减去另一个指针得到一个整
数，或者用一个指针减去一个整数得到另一个指针。
在递增或递减指针时还要注意一些问题。编译器不会检查指针是否仍指
向数组元素。C 只能保证指向数组任意元素的指针和指向数组后面第 1 个位
置的指针有效。但是，如果递增或递减一个指针后超出了这个范围，则是未
定义的。另外，可以解引用指向数组任意元素的指针。但是，即使指针指向
数组后面一个位置是有效的，也能解引用这样的越界指针。
解引用未初始化的指针
说到注意事项，一定要牢记一点：千万不要解引用未初始化的指针。例
如，考虑下面的例子：
int * pt;// 未初始化的指针
*pt = 5;   // 严重的错误
为何不行？第2行的意思是把5储存在pt指向的位置。但是pt未被初始
化，其值是一个随机值，所以不知道5将储存在何处。这可能不会出什么
错，也可能会擦写数据或代码，或者导致程序崩溃。切记：创建一个指针
时，系统只分配了储存指针本身的内存，并未分配储存数据的内存。因此，
在使用指针之前，必须先用已分配的地址初始化它。例如，可以用一个现有
变量的地址初始化该指针（使用带指针形参的函数时，就属于这种情况）。
或者还可以使用第12章将介绍的malloc()函数先分配内存。无论如何，使用
指针时一定要注意，不要解引用未初始化的指针！
double * pd; // 未初始化的指针
*pd = 2.4;  // 不要这样做
假设
687
int urn[3];
int * ptr1, * ptr2;
下面是一些有效和无效的语句：
有效语句          无效语句
ptr1++;             urn++;
ptr2 = ptr1 + 2;      ptr2 = ptr2 + ptr1;
ptr2 = urn + 1;       ptr2 = urn * ptr1;
基于这些有效的操作，C 程序员创建了指针数组、函数指针、指向指针
的指针数组、指向函数的指针数组等。别紧张，接下来我们将根据已学的内
容介绍指针的一些基本用法。指针的第 1 个基本用法是在函数间传递信息。
前面学过，如果希望在被调函数中改变主调函数的变量，必须使用指针。指
针的第 2 个基本用法是用在处理数组的函数中。下面我们再来看一个使用函
数和数组的编程示例。
688
10.6 保护数组中的数据
编写一个处理基本类型（如，int）的函数时，要选择是传递int类型的值
还是传递指向int的指针。通常都是直接传递数值，只有程序需要在函数中改
变该数值时，才会传递指针。对于数组别无选择，必须传递指针，因为这样
做效率高。如果一个函数按值传递数组，则必须分配足够的空间来储存原数
组的副本，然后把原数组所有的数据拷贝至新的数组中。如果把数组的地址
传递给函数，让函数直接处理原数组则效率要高。
传递地址会导致一些问题。C 通常都按值传递数据，因为这样做可以保
证数据的完整性。如果函数使用的是原始数据的副本，就不会意外修改原始
数据。但是，处理数组的函数通常都需要使用原始数据，因此这样的函数可
以修改原数组。有时，这正是我们需要的。例如，下面的函数给数组的每个
元素都加上一个相同的值：
void add_to(double ar[], int n, double val)
{
int i;
for (i = 0; i 
#define SIZE 5
void show_array(const double ar[], int n);
691
void mult_array(double ar[], int n, double mult);
int main(void)
{
double dip[SIZE] = { 20.0, 17.66, 8.2, 15.3, 22.22 };
printf("The original dip array:\n");
show_array(dip, SIZE);
mult_array(dip, SIZE, 2.5);
printf("The dip array after calling mult_array():\n");
show_array(dip, SIZE);
return 0;
}
/* 显示数组的内容 */
void show_array(const double ar[], int n)
{
int i;
for (i = 0; i < n; i++)
printf("%8.3f ", ar[i]);
putchar('\n');
}
692
/* 把数组的每个元素都乘以相同的值 */
void mult_array(double ar[], int n, double mult)
{
int i;
for (i = 0; i < n; i++)
ar[i] *= mult;
}
下面是该程序的输出：
The original dip array:
20.000  17.660   8.200   15.300  22.220
The dip array after calling mult_array():
50.000  44.150   20.500  38.250  55.550
注意该程序中两个函数的返回类型都是void。虽然mult_array()函数更新
了dip数组的值，但是并未使用return机制。
10.6.2 const的其他内容
我们在前面使用const创建过变量：
const double PI = 3.14159;
虽然用#define指令可以创建类似功能的符号常量，但是const的用法更加
灵活。可以创建const数组、const指针和指向const的指针。
程序清单10.4演示了如何使用const关键字保护数组：
693
#define MONTHS 12
...
const int days[MONTHS] = {31,28,31,30,31,30,31,31,30,31,30,31};
如果程序稍后尝试改变数组元素的值，编译器将生成一个编译期错误消
息：
days[9] = 44;   /* 编译错误 */
指向const的指针不能用于改变值。考虑下面的代码：
double rates[5] = {88.99, 100.12, 59.45, 183.11, 340.5};
const double * pd = rates;   // pd指向数组的首元素
第2行代码把pd指向的double类型的值声明为const，这表明不能使用pd
来更改它所指向的值：
*pd = 29.89;   // 不允许
pd[2] = 222.22;  //不允许
rates[0] = 99.99; // 允许，因为rates未被const限定
无论是使用指针表示法还是数组表示法，都不允许使用pd修改它所指向
数据的值。但是要注意，因为rates并未被声明为const，所以仍然可以通过
rates修改元素的值。另外，可以让pd指向别处：
pd++; /* 让pd指向rates[1] -- 没问题 */
指向 const 的指针通常用于函数形参中，表明该函数不会使用指针改变
数据。例如，程序清单 10.14中的show_array()函数原型如下：