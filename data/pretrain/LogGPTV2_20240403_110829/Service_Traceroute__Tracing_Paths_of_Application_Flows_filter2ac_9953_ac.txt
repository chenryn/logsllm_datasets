(b) Twitch (TCP)
(c) Youtube (UDP&TCP)
Fig. 3. Path edit distance between Service traceroute and Paris traceroute.
5.4 Path Diﬀerences When Tracing with Same Flow ID
as Application
One possible explanation for the diﬀerences we observe in the previous section
is the fact that the ﬂow ID of Paris traceroute probes is diﬀerent than the ID
of the target application ﬂow, which can trigger diﬀerent forwarding decisions
in middleboxes that act per ﬂow. In this section, we compare Service tracer-
oute’s output with Paris traceroute when it uses the same ﬂow ID as the target
application ﬂow. Note that in this case Paris traceroute still runs after the tar-
get application ﬂow ﬁnishes, we get the correct ﬂow ID based on the Service
traceroute’s run just before in order to guarantee a complete match.
Figure 4 compares the path discovered by Service traceroute with that dis-
covered by Paris traceroute when using the exact same ﬂow ID as the target
application ﬂow. In this case, Paris traceroute discovers the same path as Ser-
vice traceroute more often than when probing with MDA: about 65% of Twitch
sessions, 91% of Youtube sessions, and 93% of web downloads. This result shows
that issuing probes with a diﬀerent ﬂow ID than that of the target applica-
tion ﬂow causes most of the diﬀerences we observe in the previous section. The
remaining diﬀerences are due to three possible causes: (i) path changes that
might occur between the runs of Service traceroute and Paris traceroute; (ii)
per-packet load balancing; or (iii) middleboxes (such as application-layer prox-
ies or ﬁrewalls) that track the state of TCP connections and may hence drop
packets after connections are terminated. In fact, in our initial testing we noticed
cases of probes not generating any ICMP response if issued after the target appli-
cation ﬂow ﬁnishes. We further examine the paths for Twitch to shed light on the
reasons for the large fraction of paths that are diﬀerent between Paris traceroute
and Service traceroute. It is unlikely to have routing changes for about 45% of
paths and we veriﬁed that there are no middleboxes dropping our probes (which
would appear as stars). Thus, we conjecture that the diﬀerences are likely due
to per-packet load balancing, but we must run further experiments to verify this
conjecture.
We also compare Service traceroute with 0Trace. Unfortunately, due to how
web browsers loop across a large number of diﬀerent ports, both Twitch and
Youtube often change port numbers between consecutive runs. Given that we
launch a new video session to probe with 0Trace, the result is that Service
126
I. Morandi et al.
Fig. 4. Path edit distance between Service traceroute and Paris traceroute using the
same ﬂow ID.
traceroute and 0Trace often issue probes with diﬀerent ﬂow IDs. This issue
biases our experiments, and hence we omit these results (available at [9]).
5.5 Location of Path Divergence Points
To help explain our results we study the location of the points where Service
traceroute’s and Paris traceroute’s paths diverge, which we call the divergence
point. Table 1 shows the fraction of experiments with divergence points at the
origin AS, the middle of the path, and the destination AS. We conduct this
analysis to help explain the results in the previous sections, but we note that
the ﬁndings are heavily biased by our vantage points and destinations.
Table 1. Location of divergence points [% of all ﬂows]
Web pages (TCP)
Origin Middle Dest. Origin Middle Dest. Origin Middle Dest.
Twitch (TCP)
Youtube (TCP and UDP)
Conﬁguration
7.33
MDA UDP
15.13
MDA TCP
MDA ICMP
9.11
PT same ﬂow ID 4.06
39.82
34.37
19.04
1.81
4.92 0.41
2.86 4.28
17.44 7.35
1.03 8.43
50.56
49.17
44.50
24.72
0.64
0.51
1.99
2.18
12.49
15.67
6.81
4.08
19.52
19.13
19.95
0.87
3.15
3.92
1.55
4.61
For the three applications, when comparing with MDA most of the divergence
points are in the middle (from 19% for Youtube to above 40% for Twitch). Given
the middle contains more hops it is not too surprising that it also contains more
divergence points. When using Paris traceroute with the same ﬂow ID, however,
the percentage of divergence points in the middle decreases substantially to less
than 2% for Web and Youtube and to 24% for Twitch. This result indicates that
divergence points in the middle mostly correspond to middleboxes that perform
per-ﬂow forwarding. Paris traceroute’s MDA discovers all possible interfaces for
every hop of the path and we compare the closest path MDA ﬁnds to Service
Service Traceroute: Tracing Paths of Application Flows
127
traceroute’s output, but MDA often uses diﬀerent ﬂow IDs than the target appli-
cation ﬂow and hence it may not get the exact same sequence of hops end-to-end.
For Paris traceroute with the same ﬂow ID, we observe more divergence points
at the origin, which may indicate path changes. The only exception is Twitch,
which still has around 24% of divergence points in the middle. Our analysis of
these divergence points shows that half of them are within a single ISP: GTT
Communications (AS 3257).
6 Related Work
Since Jacobson’s original traceroute tool [4], a number of new versions have
emerged with diﬀerent features and with new methods for constructing probes
(e.g., Paris traceroute [2,16] and tcptraceroute [15]). All these traceroute versions
have a drawback for the goal of diagnosing a target application ﬂow because
they start a new ﬂow to send probes. As such, middleboxes may treat them
diﬀerently than the target application ﬂow. Service traceroute avoids this issue
by piggybacking traceroute probes within active application ﬂows. This idea
was ﬁrst introduced in paratrace [6], which is no longer available, and then
re-implemented in 0trace [5] with the goal of tracing through ﬁrewalls and in
TCP sidecar [13] for reducing complaints of large-scale traceroute probing for
topology mapping. Unfortunately, none of these tools is actively maintained.
Service traceroute adds the capability of automatically identifying application
ﬂows to trace by a domain name, of tracing UDP ﬂows as well as of tracing
multiple concurrent ﬂows that compose a service. We release both a command-
line and a library version as open source. Furthermore, we present an evaluation
of the side-eﬀects of piggybacking traceroute probes within application traﬃc
as well as of its beneﬁt by comparing the diﬀerences with Paris traceroute and
with 0Trace. Our characterization reappraises some of the ﬁndings from Luckie
et al. [8], which show that the discovered paths depend on the protocol used in
the probes. Their study, however, includes no traceroute tools that piggyback
on application ﬂows.
7 Conclusion
In this paper we present Service traceroute, a tool to trace paths of ﬂows of mod-
ern Internet services by piggybacking TTL-limited probes within target applica-
tion ﬂows. Our evaluation of paths to popular websites and video services from
PlanetLab Europe shows that Service traceroute’s probing has no eﬀect on target
application ﬂows. Moreover, a typical traceroute tool that launches a new ﬂow
to the same destination discovers diﬀerent paths than when embedding probes
in the application ﬂow in a signiﬁcant fraction of experiments (from 40% to 50%
of our experiments) as our comparison with Paris traceroute shows. When we
set Paris traceroute’s ﬂow ID to that of the target application ﬂow, the resulting
paths are more similar to Service traceroute’s. Identifying the ﬂow ID to probe,
however, is not trivial. Modern applications rely on a large pool of servers/ports.
128
I. Morandi et al.
Even to run 0Trace, which implements the same idea of piggybacking probes in
the application ﬂow, we had to rely on Service traceroute’s functionality to iden-
tify target application ﬂow IDs to probe. In future work, we plan to add the
support of IPv6 to Service traceroute. We further plan to perform a larger scale
characterization of results of Service traceroute across a wide variety of services
and a larger set of globally distributed vantage points.
Acknowledgements. This work was supported by the ANR Project No ANR-15-
CE25-0013-01 (BottleNet), a Google Faculty Research Award, and Inria through the
IPL BetterNet and the associate team HOMENET.
References
1. Service Traceroute. https://github.com/inria-muse/service-traceroute
2. Augustin, B., et al.: Avoiding traceroute anomalies with Paris traceroute. In: Pro-
ceedings of IMC (2006)
3. Banerjee, S., Griﬃn, T.G., Pias, M.: The interdomain connectivity of PlanetLab
nodes. In: Barakat, C., Pratt, I. (eds.) PAM 2004. LNCS, vol. 3015, pp. 73–82.
Springer, Heidelberg (2004). https://doi.org/10.1007/978-3-540-24668-8 8
4. Jacobson, V.: Traceroute, February 1989
5. Edge, J.: Tracing behind the ﬁrewall (2007). https://lwn.net/Articles/217076/
6. Kaminsky, D.: Parasitic Traceroute via Established TCP Flows & IPID Hopcount.
https://man.cx/paratrace
7. Langley, A., et al.: The QUIC transport protocol: design and internet-scale deploy-
ment. In: Proceedings of the Conference of the ACM Special Interest Group on
Data Communication, pp. 183–196. ACM (2017)
8. Luckie, M., Hyun, Y., Huﬀaker, B.: Traceroute probe method and forward IP path
inference. In: Proceedings of IMC, Vouliagmeni, Greece (2008)
9. Morandi, I.: Service traceroute: tracing paths of application ﬂows. Master thesis,
UPMC-Paris 6 Sorbonne Universit´es (2018). https://hal.inria.fr/hal-01888618
10. Netﬂix Open Connect Overview. https://openconnect.netﬂix.com/Open-Connect-
Overview.pdf
11. RIPEstat Data API. https://stat.ripe.net/docs/data api
12. Scheitle, Q., et al.: A long way to the top: signiﬁcance, structure, and stability of
internet top lists. arXiv preprint arXiv:1805.11506 (2018)
13. Sherwood, R., Spring, N.: Touring the internet in a TCP sidecar. In: Proceedings
of the 6th ACM SIGCOMM Conference on Internet Measurement, pp. 339–344.
ACM (2006)
14. Spring, N., Peterson, L., Bavier, A., Pai, V.: Using Planetlab for network research:
myths, realities, and best practices. ACM SIGOPS Oper. Syst. Rev. 40(1), 17–24
(2006)
15. Torren, M.: Tcptraceroute-a traceroute implementation using TCP packets. Man
page, UNIX (2001). http://michael.toren.net/code/tcptraceroute
16. Veitch, D., Augustin, B., Friedman, T., Teixeira, R.: Failure control in multipath
route tracing. In: Proceedings of IEEE INFOCOM (2009)
17. Google Cloud Overview. https://cloud.google.com/cdn/docs/overview