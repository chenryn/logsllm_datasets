### Describe the bug
I've registered to the `before_update` hook with:
    class MyTable(Base):
      id = Column("id", UUID_DB(as_uuid=True), primary_key=True, default=uuid4)
    from sqlalchemy import MetaData, event
    event.listen(MyTable, "before_update", modified_at_hook)
    def modified_at_hook(mapper, connection, target):
        ...
then executing an update statement:
    stmt = (
        sqlalchemy.update(MyTable)
        .where(table.id == obj_id)
        .values(**dict_object)
        .execution_options(synchronize_session="fetch")
    )
    async with AsyncSession(db_engine.get_engine()) as async_session:
        result = await async_session.execute(stmt)
        await async_session.commit()
but the hook is not being triggered.
When I am trying to use the `merge` function of the async_session, only
`before_insert` hook is triggered. and there is no `.update` method for async
session.
Further more, when using the `.add` method, and the entity has id, I get
exception that the entity is already exist. how can I mark the entity for
update without using `SELECT` to retrieve it first?
### Optional link from https://docs.sqlalchemy.org which documents the
behavior that is expected
_No response_
### SQLAlchemy Version in Use
1.4.40
### DBAPI (i.e. the database driver)
default
### Database Vendor and Major Version
PostgreSQL 12
### Python Version
3.11
### Operating system
losx
### To Reproduce
    aboe
### Error
no error
### Additional context
_No response_