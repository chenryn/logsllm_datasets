severely restricted by its limitations. Rather than ﬁnd these
instances, our goal is instead to develop an automated ap-
proach for transforming arbitrary shellcode into an English
representation.
4.1 High-level Overview
What follows is a brief description of the method we have
developed for encoding arbitrary shellcode as English text.
This English shellcode is completely self-contained, i.e., it
does not require an external loader, and executes as valid
IA32 code. The steps depicted in Figure 3 complement the
brief overview of our approach presented below. One can en-
vision a typical usage scenario (see Figure 4) where the En-
glish shellcode (composed of a natively executable decoder
and an encoded payload containing arbitrary shellcode) is
ﬁrst generated oﬄine. Once the English shellcode is deliv-
ered to a vulnerable machine and its vulnerability is trig-
gered, execution is redirected to the English shellcode, ini-
tiating the decoding process and launching the target shell-
code contained in the payload.
First, a list of English-compatible instructions were com-
piled and categorized loosely by behavior, i.e., whether an
instruction performs a jump, executes a boolean operation,
or manipulates the stack. Some excerpts from the list are
shown in Figure 2. Using this list and its categorization to
guide development, a decoder was written that is capable
of encoding generic payloads using only instructions from
our list. This intermediate result is similar in spirit to the
alphanumeric decoders, however, our decoder is further con-
strained by a guiding principle to avoid certain character
patterns that might later make ﬁnding an English equivalent
more diﬃcult, e.g., the string of mostly capital letters that
compose the PexAlphaNum and Alpha2 decoders depicted
in Figure 1 would likely result in poor English shellcode.
The basic idea then is to ﬁnd a strings of English words
that mimic the execution behavior of our custom decoder.
To achieve this goal, we use a smoothed n-gram language
model. That model is trained using a large set of English
text, and is used to deduce the probability of word sequences.
As language generation proceeds, each instruction in the de-
coder is assigned a numerical value. Intuitively, as we select
candidate strings from the language model, each is executed
under supervision. We use the numerical values to indi-
cate the strength of each candidate. If a candidate string
produces the same net eﬀect of the ﬁrst instruction of our
decoder when executed, we say that its score is one.
If a
candidate string produces the net eﬀect of the ﬁrst two in-
structions, its score is two (and so on). At each stage, high-
scoring candidates are kept (and used in driving the lan-
guage model forward) and low-scoring candidates (or those
that crash the simulator) are discarded. Ultimately, we tra-
STORAGE
ASCII
" ca"
" An"
" jo"
HEX
20 63 61
20 41 6E
20 6A 6F
ASSEMBLY
and 61(%ebx), %ah
and 6E(%ecx), %al
and 6F(%edx), %ch
JUMPS
HEX
70 2E
71 2E
72 2E
73 2E
74 2E
75 2E
76 2E
77 2E
78 2E
79 2E
7A 2E
ASSEMBLY
jo short $30
jno short $30
jb short $30
jnb short $30
je short $30
jnz short $30
jbe short $30
ja short $30
js short $30
jns short $30
jpe short $30
ASCII
p.
q.
r.
s.
t.
u.
v.
w.
x.
y.
z.
STACK MANIPULATION
ASCII
A
B
C
D
E
F
G
H
I
J
K
L
M
N
O
P
Q
R
S
T
U
V
W
X
Y
Z
a
HEX
41
42
43
44
45
46
47
48
49
4A
4B
4C
4D
4E
4F
50
51
52
53
54
55
56
57
58
59
5A
61
ASSEMBLY
inc %eax
inc %edx
inc %ebx
inc %esp
inc %ebp
inc %esi
inc %edi
dec %eax
dec %ecx
dec %edx
dec %ebx
dec %esp
dec %ebp
dec %esi
dec %edi
push %eax
push %ecx
push %edx
push %ebx
push %esp
push %ebp
push %esi
push %edi
pop %eax
pop %ecx
pop %edx
popa
Figure 2: Byte-values that have valid interpretations as English
ASCII characters and Intel assembly instructions.
verse the language model using a beam search to ﬁnd strings
of words that score the highest possible value and operate
in an identical manner as the decoder developed by hand.
Finally, to encode the original payload, we continue to
sample strings from our language model all the while gen-
erating prose that is functionally equivalent to the target
shellcode when executed.
Our Approach
Recall that unlike other attack components, the decoder
must reside in memory as executable code. This exposure
can make identifying the decoder a useful step in facilitating
detection and prevention (e.g., by determining if a portion
of the payload “looks” executable). Thus, from an attacker’s
perspective, masking the decoder may reduce the likelihood
of detection and help to facilitate clandestine attacks.
Designing a decoder under unnatural constraints can be
very challenging, and this diﬃculty is not unique to English
shellcode. Self-modiﬁcation is often used to address this
problem whereby permissible code modiﬁes portions of the
payload such that non-compliant instructions are patched in
at runtime, thereby passing any input ﬁlters. These addi-
tional instructions provide an attacker with more versatility
and may make an otherwise impotent attack quite powerful.
Self-modiﬁcation is particularly useful for overcoming some
of the challenges unique to English shellcode. Among the
English-compatible instructions, for example, there is no na-
tive support for loops or addition. Issues like these are rel-
evant because decoding a payload without certain instruc-
tions, while possible, can quickly become impractical. For
instance, a decoder without a looping mechanism must be
proportional in length to the length of its encoded payload,
possibly exposing its existence by nature of its size and form
on the wire.
4.2 The decoder
We are able to avoid these problems by building a self-
modifying decoder that has the form: initialization, de-
coder, encoded payload. Intuitively, the ﬁrst component
builds an initial decoder in memory (through self-modiﬁcation)
which when executed, expands the working instruction set,
providing the decoder with IA32 operations beyond those
527English-compatible Decoder
Language Model Generation
Viterbi Search and Execution
Encode Target Shellcode
ASCII
" ca"
" An"
" jo"
\x00ca
\x00An
\x00jo
Hex
20 63 61
20 41 6E
20 6A 6F
00 63 61
00 41 6E
00 6A 6F
STORAGE
Assembly
AND [EBX+61],AH
AND [ECX+6E],AL
AND [EDX+6F],CH
ADD [EBX+61],AH
ADD [ECX+6E],AL
ADD [EDX+6F],CH
SCORE09
xor %eax,
cat a
ush %eax;
LM
Write a decoder that is capable of 
encoding generic payloads using 
only English-compatible instructions.
Generate and train a natural 
language model with a large and 
diverse corpus of English text.
Using Viterbi search, traverse the 
language model, executing and 
scoring each candidate decoder.
1
2
3
Continue to traverse the language 
model, encoding the target shellcode 
as English.  Upon delivery, this code 
will be decoded and executed.
4
Figure 3: Our method of generating English shellcode consists of four distinct components: developing an English-compatible decoder,
constructing a large n-gram language model, scoring candidate execution, and encoding arbitrary shellcode.
provide by English prose. The decoder then decodes the next
segment (the encoded payload), again via self-modiﬁcation.
Vulnerable Host
Compromised Machine
a
3
Decoder
Encoded Native
Shellcode
English Shellcode
a
1
2
Figure 4: A typical usage scenario.
We build our decoder using a number of principles that
help guide its design. First and foremost, the decoder must
use only English-compatible instructions or the goal of cre-
ating English shellcode cannot be realized. Furthermore,
we are particularly interested in English-compatible instruc-
tions that can be used, alone or in conjunction, to pro-
duce useful instructions (via self modiﬁcation) that are not
English-compatible. For example, our decoder uses multiple
and instructions (which are English-compatible) to generate
add instructions (which are not English-compatible). Taken
together, it could be said that these ﬁrst two goals also pro-
vide a foundation for the design of alphanumeric decoders.
However, our third design principle, which is not shared by
alphanumeric shellcode engines, is to favor instructions that
have less-constrained ASCII equivalents. For instance, we
will likely favor the instruction push %eax (“P”) over push
%ecx (“Q”) when designing our decoder since the former is
more common in English text. The same guiding principle
is applied when choosing literal values.1 It is important to
note that even though we followed these principles in design-
ing our decoder, they are not hard requirements and there
are other capable approaches. What we provide here is a
proof of concept to demonstrate our point.
Initialization. In its initialization phase, the decoder over-
writes key machine registers and patches in machine in-
structions that are not English compatible. After successful
exploitation of a software vulnerability, we assume that a
pointer to the shellcode resides in one of the general pur-
pose registers or other accessible memory. As pointed out
by Polychronakis et al., this is common in non-self-contained
shellcode [16].
In order to execute the target shellcode, a
pointer to the encoded shellcode is needed. This pointer
must address memory far beyond the ﬁrst byte of the shell-
code since one must ﬁrst reserve space for the decoder.
1The term literal refers to a numerical operand in this con-
text.
STEP
INSTRUCTION
ASCII OPTIONS
STACK
1
2
3
push ptr; push ptr;
x ∈ [P, W]
inc %esp;
D
pop reg; pop reg;
x ∈ {X, Y, Z, a}
[4, n - 2]
inc reg; inc reg; ...
n - 1
n
push reg;
dec %esp;
x ∈ [A, G]
x ∈ [P, W]
L
-
-
-
-
DE
DE
DE
DE
DE
DE
AD
AD
BA EF
DE AD BA
EF 6B
02 A4
BA EF
DE AD BA
EF 6B
02 A4
AD BA EF DE AD BA EF 6B
02 A4
AD BE
EF DE AD
NO STACK EFFECT
BE EF