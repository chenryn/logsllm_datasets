}j∈Sд) to P5. To send
5s input share if held by Pд is handled similarly):
w ,bl
w
w ,bw
:= ⊕l Kl .
w ,0, kд
w ,bw
w ,b) ← Com(ppj , k j
w ,1}д∈[4] be the keys derived from seeds {sд }д∈[4] . Each Pд , д ∈ [4] computes
w ,b) using ppj and randomness derived from sj and sends
to P5 if it holds bw . P5 aborts if it receives either different copies of commitments or invalid opening for
– For input wire w corresponding to P5’s input shares, let {kд
w ,b , o j
w ,b } to P5. Pд also sends o j
commitments on these as: for b ∈ {0, 1}, j ∈ Sд, (c j
{ppj , c j
any wire. Otherwise, P5 recovers the super-keys for bw , namely, {kд
– Garble(C) is run. Each Pд , д ∈ [4] sends {GC j }j∈Sд
Evaluation and Output Phase.
– P5 runs Eval to evaluate GC using X and obtains Y and (yw ⊕ λw) for all output wires w. P5 sends (Y, proof) to all.
– For д ∈ [4], j ∈ Sд, if k j
w ,1) or the three keys k j
of Y for some output wire w does not match with either (k j
to P5. If P5 finds conflicting copies, it aborts.
w ,bw
same bw or if proof does not verify with H(proof) received before, Pд does nothing. Else, Pд sends (Y, proof) to all other garblers and {oj
to all. P5 checks if valid {oj
in Y do not map to the
w }j∈Sд
w) for output wire w and thus outputs y.
from a co-garbler Pд, Pα , α ∈ [4] computes y by unmasking all λw . Also, if sent nothing before,
from co-garbler
w was sent by Pд to Pα before), compute y upon unmasking all λw . Likewise, if P5 has not computed y yet and received valid {ol
w ,
received from each Pд. If so, P5 computes yw = (yw ⊕ λw) ⊕ (⊕l∈[4]λl
w }j∈Sд
– If received valid (Y, proof) and {oj
w }j∈Sд
w }l∈Sα ,j∈Sд
w , oj
to all. If no y computed yet and received valid (Y, proof), {ol
}д∈[4]. Let X to be the set of super-keys obtained.
w }l∈Sα ,j∈Sд
w ,0, k j
w ,bw
w ,bw
w , oj
send (Y, proof) to co-garblers, {ol
Pα (oj
w }l∈Sα ,j∈Sд
oj
from Pα (oj
w was sent by Pд to Pα before), P5 computes y by unmasking all λw .
Figure 8: Protocol fair
inputs. Evaluation is done on committed inputs. The correctness
of Y and thus y follows from the correctness of garbling scheme
(Figs 4, 5) presented in Lemma 3.4.
(cid:3)
rounds. If Y is received by all honest garblers in round 1 of output
phase itself, then 7 rounds suffice. The seed distribution phase is
one-time and hence is not counted for round complexity.
(cid:3)
Theorem 4.2. Our fair protocol consumes at most 8 rounds.
Proof. The proof establishment phase and setting up of public
parameter for eNICOM consume 2 rounds each and can be over-
lapped. Further, round 1 of these two phases can be overlapped
with distribution of P5’s input and round 1 of masked input bit com-
putation and key transfer phase. These together consume a total of
3 rounds. The key transfer is started prior to Garble. More precisely,
garbling can begin alongside round 3 of key transfer phase. The
transfer of GC and keys to P5 take 1 round. Finally, evaluation and
output phase need at most 3 rounds, thus settling the protocol in 8
Theorem 4.3. Assuming one-way permutations, the protocol of
fair securely realizes Ffair (Fig. 17) in the standard model against a
malicious adversary that corrupts at most two parties.
The proof of the theorem appears in the full version [23].
4.3 n-party Extension of fair
The technique of achieving fairness for 5 parties can be extended
√
to n parties tolerating t <
n corruptions by modifying only the
output phase of fair (Fig 8). We first recall the conditions involved
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1581in seed distribution for n-parties elaborated in [25] to better un-
√
derstand the extension tolerating t =
n corruptions. The seed
distribution needs to satisfy the following properties:
Privacy: No t − 1 garblers should hold all the seeds. This is to
ensure input privacy of honest garblers when t − 1 garblers
and the evaluator collude.
Attested OT For each pair of seeds si , sj, there must be a garbler
who holds both si , sj. This party will act as an attester in the
corresponding AOT.
Correctness Every seed should be held by at least t + 1 garblers.
This is necessary for correctness of the computed DGC.
All the above properties collectively imply that for any corrup-
tion scenario, the honest garblers together must hold all the seeds.
Specifically, from correctness: each seed si that is supposed to be
held by at least t + 1 garblers is sure to end up in the hands of an
honest garbler in the worst case corruption scenario of t corrupt
garblers. To achieve fairness for the case of n parties, all steps of
the protocol fair remain the same except the output phase. For
the extension, we consider that P1, ..., Pn−1 are garblers and Pn is
the evaluator. On a high level, the output phase involves 3 rounds
where in round 1, Pn sends (Y, proof) to all garblers and the remain-
ing two rounds are used to exchange (Y, proof) with co-garblers
and openings for the commitments on mask-shares belonging to
output wires with all and thus fairly compute the output.
Round 1: The evaluator sends (Y, proof) to the garblers.
Round 2: If the received (Y, proof) from the evaluator is valid, each
garbler Pд forwards (Y, proof) and openings for the commitments on
output mask shares wrt the seeds she holds.
Round 3: If received valid (Y, proof) and valid openings from subset of
garblers s.t the openings received and the output mask shares already
held by party Pα are sufficient to reconstruct λw for every output wire
w, then Pα computes output y using the output masks. If sent nothing
before, Pα forwards (Y, proof) and the accumulated openings to all.
Local Computation: If no y computed yet and received valid (Y, proof)
and openings received from subset of garblers so far are enough to re-
construct λw for every output wire w, then party Pβ computes output y
using the output masks.
Figure 9: Output Phase for n-party fairness
Each honest party computes the output only if openings for
commitments wrt every seed is received by the end of round 3.
A naive way to distribute the openings in the last two rounds is
to allow an honest garbler to forward the openings possessed by
her (and if received any other) when a valid (Y, proof) is received.
This technique however, leads to fairness violation in the following
scenario: suppose the evaluator and t − 1 garblers are corrupt and
Pn does not communicate with any honest garbler in round 1,
However in round 2, few of the corrupt garblers send (Y, proof)
to one set of honest parties (chosen selectively s.t the openings
of this set of honest parties and those held by the adversary are
enough to compute the output). These honest parties forward all
the accumulated openings in round 3 and thus the adversary gets
the output. Further, in round 3, the adversary can also choose to
send the openings to the other complementary set of honest parties
on behalf of all the corrupt parties who have not sent anything
yet, thus ensuring that other complimentary set gets the output
while the first set aborts. To tackle this, we impose a restriction
on the garbler Pд who communicates for the first time in round
3 of the output phase as: Forward all the openings accumulated
until round 2 only if, the openings received in round 2 together
with those held by Pд are sufficient to reconstruct the output. This
condition eliminates the dependency of Pд on shares received in
round 3 to compute the output and ensures that the adversary, in
order to compute the output herself, must aid at least one honest
party compute the output. Thus, even if one honest party is able to
compute the output at the end of round 2, then that honest party
releases all the openings in round 3 sufficient to help all honest
parties compute the output. This concludes the intuition. The formal
protocol is presented in Fig 9.
5 5PC WITH UNANIMOUS ABORT
By simplifying fair, we present a 5PC achieving unanimous abort, re-
lying on a network of pairwise-private channels with performance
on par with [25] and having the round complexity to 8. Specifically,
we eliminate the stronger primitive of eNICOM used to commit on
output mask shares, owing to weaker security. However, we still
need to address the case of a corrupt P5 selectively sending Y to
honest garblers. Unanimous abort can be trivially achieved if Y is
broadcast by P5 instead of being sent privately but since broadcast
increases assumptions and is expensive in real-time networks, we
enforce the garbler who receives a valid Y from P5 to forward the
same to her co-garblers. However, this technique does not suffice
on its own, since in case of a colluding garbler and the evaluator,
P5 may not send Y to any honest party and at the same time, the
corrupt garbler may send (Y, proof) only in the last round, to one
honest garbler. To tackle this, we ensure that an honest garbler ac-
cepts Y from a co-garbler only if the co-garbler gives a valid proof
that she received Y from P5 only in the previous round. Further, to
ensure that Y indeed originated from P5 (and was not forged by
two corrupt garblers), we reuse the technique described in fair. The
formal protocol appears in Fig 10. Similar to our fair protocol, this
protocol can also be extended for arbitrary n parties.
5.1 n-party Extension of ua
To achieve unanimous abort for the case of n parties, all steps of the
protocol ua remain the same except the output phase. The seed-
distribution is done as explained in Appendix 4.3. For the extension,
we consider that P1, ..., Pn−1 are garblers and Pn is the evaluator.
On a high level, the output phase involves 3 rounds where in round
1, Pn sends (Y, proofn) to all garblers and the remaining two rounds
are used to exchange the Y and proofs to compute the output.
Each honest party computes the output only if t + 1 proofs are
received by the end of round 3. This is done to prevent the adversary
from remaining silent in first two rounds but selectively sending
Y to few honest parties only in the last round and them naively
accepting the output without any confirmation about fellow honest
parties. Thus, an honest garbler who has not sent anything until the
end of round 2, forwards Y and the received proofs (along with own
proof) in round 3 only if at least t valid proofs are received by the
end of round 2. This ensures that all honest parties are in agreement
about the output acceptance at the end of round 3. In detail, if one
honest party decides to accept the output by the end of round 2
due to the availabilty of t proofs, then all honest parties will also
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1582Inputs, Common Inputs, Output and Notation : Same as in fair().
Primitives: A NICOM (Com, Open), Garble (Figs. 4), Eval (Fig. 5).
Seed Distribution Phase (one-time)and Evaluator’s Input Sharing
Phase are same as in fair().
Proof Establishment Phase: Pi , i ∈ [5] chooses proofi from the do-
main of a hash function H, computes and sends H(proofi) to all parties.
Each party, Pj , j ∈ [5] \ {i} in turn sends the copy of H(proofi) received
to the remaining parties. Pj aborts if the H(proofi) received from the
remaining parties does not match with her own copy received from Pi .
Else, Pj accepts H(proofi) to be the agreed upon hash.
Setup of public parameter and Transfer of Equivocal Commit-
ments are not present in this protocol but instead for each output wire w,
w in clear to all. Each party Pi ∈ P aborts
each Pj , j ∈ Sд sends λд
if the three copies of λд
w received do not match. Else, Pi computes
λw = ⊕д∈[4]λд
w .
Garbling, Masked input bit, Key Transfer Phase are same as in fair().
Evaluation and Output Phase:
– P5 runs Eval to evaluate GC using X and obtains Y and (yw ⊕ λw)
for all output wires w. P5 sends (Y, proof) to all. P5 locally computes
yw = (yw ⊕ λw) ⊕l∈[4] λl
– For each Pд , д ∈ [4], j ∈ Sд, if the received k j
of Y for some
output wire w does not match with either (k j
w ,1) or the three
, j ∈ Sд in Y do not map to the same bw or proof5 fails,
keys k j
then do nothing. Else for each output wire w, compute yw unmasking
λw . Send (Y, proof5, proofд) to the co-garblers.
– If received valid (Y, proof5, proofд) from a co-garbler Pд, Pα , α ∈
[4] computes y unmasking λw . Also if sent nothing before, send
(Y, proof5, proofд , proofα ) to all. If no output y is computed yet and
received valid (Y, proof5, proofд , proofα ) from co-garbler Pα (proofд
indicates (Y, proof5, proofд) was received from Pд), garbler Pγ ob-
tains (yw ⊕ λw) from Y, unmasks λw and computes y.
w for each output wire w.
w ,bw
w ,0, k j
w ,bw
Figure 10: Protocol ua()
accept the output at the end of round 3 due to the availability of at
least t + 1 proofs which implies that an honest party has accepted
Y i round 2. This completes the intuition. We formally present the
n-party extension for unanimous abort in Fig 11.
Let Pn be the evaluator and Pд , д ∈ [n − 1] be the garblers.
Round 1: The evaluator sends (Y, proofn) to the garblers.
Round 2: If the received (Y, proofn) from the evaluator is valid, each
garbler Pд forwards (Y, proofn , proofд) to all.
Round 3: If received valid {(Y, proofn , proofд)}д∈G where G is a sub-
set of garblers, if the total number of proofд’s and proofn is at least
t, then party Pα outputs y and if sent nothing before, Pα forwards
({(Y, proofn , proofд)}д∈G , proofα ) to all.
Local Computation: If no y output computed yet and received valid
({(Y, proofn , proofд)}д∈G , proofα ) s.t total number of proofд’s, proofn
and proofα together is at least (t + 1), then party Pβ outputs y using the
output super-key and output wire masks for each output wire.
Figure 11: Output Phase for n-party unanimous abort
Optimizations. The efficiency of ua protocol can be boosted sim-
ilar to fair in both the garbling phase and communication of GC.
Theorem 5.1. Our ua protocol runs in at most 8 rounds.
Proof. The proof follows from the proof of Theorem 4.2.
(cid:3)
Theorem 5.2. Assuming one-way permutations, our protocol ua
securely realizes the functionality FuAbort (Fig. 16) in the standard
model against a malicious adversary that corrupts at most two parties.
The proof of the theorem appears in the full version [23].
6 5PC WITH GOD
With fair as the starting point, we elevate the security and present a
constant-round 5PC with GOD relying only on symmetric-key prim-
itives. We assume a necessary broadcast channel besides pairwise-