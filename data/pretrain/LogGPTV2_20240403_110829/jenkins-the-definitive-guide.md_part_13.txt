of changes. As the code is reviewed, Gerrit provides a location to comment and move the patch to an
open, merged, or abandoned status.
The Gerrit Trigger8 is a Jenkins plugin that can trigger a Jenkins build of the code when any user-
specified activity happens in a user-specified project in the Git repository (see Figure 5.18, “Gerrit
Trigger”). It is a alternative to the more typically-used Build periodically or Poll SCM.
Figure 5.18. Gerrit Trigger
6 http://code.google.com/p/gerrit/
7 https://review.source.android.com/#q,status:open,n,z
8 http://wiki.hudson-ci.org/display/HUDSON/Gerrit+Trigger
97
The configuration for this plugin is minimal and focused on the Project Type and Pattern and Branch
Type and Pattern. In each pair, the type can be Plain, Path, or RegExp—pattern flavors of what to watch
—and then the value (pattern) to evaluate using the type as the guide.
5.4.2.4. Post-build actions
The Git plugin for Jenkins adds Git-specific capabilities to the post-processing of the build artifacts.
Specifically, the Git Publisher (shown in Figure 5.19, “Git Publisher”) offers merging and pushing
actions. Check the Git Publisher checkbox to display four options.
Figure 5.19. Git Publisher
5.4.2.4.1. Push only if build succeeds
If a merge or other commit-creating action has been taken during the Jenkins build, it can be enabled
to push to a remote.
5.4.2.4.2. Merge results
If prebuild merging is configured, push the merge-resultant branch to its origin (see Figure 5.20, “Merge
results”).
98
Figure 5.20. Merge results
5.4.2.4.3. Tags
When pushing tags, each tag can be named and chosen to be created if it does not exist (which fails
if it does already exist). Environment variables can be embedded in the tag name. Examples include
the process ID such as HUDSON_BUILD_$PPID or even a build number, if that is provided by a Jenkins
plugin, such as $HUDSON_AUTOTAG_$BUILDNUM. Tags can be targeted to a specific remote such as
origin or integrationrepo.
5.4.2.4.4. Branches
The current HEAD used in the Jenkins build of the application can be pushed to other remotes as an
after-step of the build. You only need to provide the destination branch name and remote name.
Names of remotes are validated against the earlier configuration of the plugin. If the remote doesn’t
exist, a warning is displayed.
5.4.2.5. GitHub plugin
The GitHub plugin offers two integration points. First, it offers an optional link to the project’s GitHub
home page. Just enter the URL for the project (without the tree/master or tree/branch part). For example,
http://github.com/matthewmccullough/git-workshop.
Secondly, the GitHub plugin offers per-file-changed links that are wired via the Repository browser
section of a job’s Source Code Management configuration (see Figure 5.21, “GitHub repository
browser”).
99
Figure 5.21. GitHub repository browser
With the githubweb repository browser chosen, all changed-detected files will be linked to the
appropriate GitHub source-viewing web page (Figure 5.22, “GitHub repository browser”).
Figure 5.22. GitHub repository browser
5.5. Build Triggers
Once you have configured your version control system, you need to tell Jenkins when to kick off a build.
You set this up in the Build Triggers section.
In a Freestyle build, there are three basic ways a build job can be triggered (see Figure 5.23, “There are
many ways that you can configure Jenkins to start a build job”):
• Start a build job once another build job has completed
• Kick off builds at periodical intervals
• Poll the SCM for changes
Figure 5.23. There are many ways that you can configure Jenkins to start a build job
100
5.5.1. Triggering a Build Job Once Another Build Job Has Finished
The first option lets you set up a build that will be run whenever another build has finished. This is an
easy way to set up a build pipeline. For example, you might set up an initial build job to run unit and
integration tests, followed by another separate build job to run more CPU-intensive code quality metrics.
You simply enter the name of the preceding build job in this field. If the build job can be triggered by
several other build jobs, just list their names here, separated by commas. In this case, the build job will
be triggered once any of the build jobs in the list finish.
There is a symmetrical field in the Post-build actions section of the preceding build job called
(appropriately enough) “Build other projects”. This field will be automatically updated in the
corresponding build jobs whenever you modify the “Build after other projects are built” field. However,
unlike the “Build after other projects are built” field, this field gives you the option to trigger a build
even if the build is unstable (see Figure 5.24, “Triggering another build job even if the current one is
unstable”). This is useful, for example, if you want to run a code quality metrics build job even if there
are unit test failures in the default build job.
Figure 5.24. Triggering another build job even if the current one is unstable
5.5.2. Scheduled Build Jobs
Another strategy is simply to trigger your build job at regular intervals. It is important to note that this
is not actually Continuous Integration—it is simply scheduled builds, something you could also do, for
example, as a Unix cron job. In the early days of automated builds, and even today in many shops,
builds are not run in response to changes committed to version control, but simply on a nightly basis.
However, to be effective, a Continuous Integration server should provide feedback much more quickly
than once a day.
There are nevertheless a few cases where scheduled builds do make sense. This includes very long
running build jobs, where quick feedback is less critical. For example, intensive load and performance
tests which may take several hours to run, or Sonar build jobs. Sonar is an excellent way to keep tabs
on code quality metrics across your projects and over time, but the Sonar server only stores one set of
data per day, so running Sonar builds more frequently than this is not useful.
For all scheduling tasks, Jenkins uses a cron-style syntax, consisting of five fields separated by white
space in the following format:
MINUTE HOUR DOM MONTH DOW
with the following values possible for each field:
101
MINUTE
Minutes within the hour (0–59)
HOUR
The hour of the day (0–23) DOM
DOM
The day of the month (1–31)
MONTH
The month (1–12)
DOW
The day of the week (0–7) where 0 and 7 are Sunday.
There are also a few short-cuts:
• “*” represents all possible values for a field. For example, “* * * * *” means “once a minute.”
• You can define ranges using the “M–N” notation. For example “1-5” in the DOW field would
mean “Monday to Friday.”
• You can use the slash notation to defined skips through a range. For example, “*/5” in the MINUTE
field would mean “every five minutes.”
• A comma-separated list indicates a list of valid values. For example, “15,45” in the MINUTE field
would mean “at 15 and 45 minutes past every hour.”
• You can also use the shorthand values of “@yearly”, “@annually”, “@monthly”, “@weekly”,
“@daily”, “@midnight”, and “@hourly”.
Typically, you will only have one line in this field, but for more complicated scheduling setups, you
may need multiple lines.
5.5.3. Polling the SCM
As we have seen, scheduled build jobs are usually not the best strategy for most CI build jobs. The
value of any feedback is proportional to the speed in which you receive that feedback, and Continuous
Integration is no exception. That is why polling the SCM is generally a better option.
Polling involves asking the version control server at regular intervals if any changes have been
committed. If any changes have been made to the source code in the project, Jenkins kicks off a build.
Polling is usually a relatively cheap operation, so you can poll frequently to ensure that a build kicks off
rapidly after changes have been committed. The more frequent the polling is, the faster the build jobs
will start, and the more accurate the feedback about what change broke the build will be.
102
In Jenkins, SCM polling is easy to configure, and uses the same cron syntax we discussed previously.
The natural temptation for SCM polling is to poll as often as possible (for example, using “* * * *
*”, or once every minute). Since Jenkins simply queries the version control system, and only kicks off
a build if the source code has been modified, this approach is often reasonable for small projects. It
shows its limits if there are a very large number of build jobs, as this may saturate the SCM server and
the network with queries, many of them unnecessary. In this case, a more precise approach is better,
where the Jenkins build job is triggered by the SCM when it receives a change. We discuss this option
in Section 5.5.4, “Triggering Builds Remotely”.
If updates are frequently committed to the version control system, across many projects, this may cause
many build jobs to be queued, which can in turn slow down feedback times further. You can reduce the
build queue to some extent by polling less frequently, but at the cost of less precise feedback.
If you are using CVS, polling may not be a good option. When CVS checks for changes in a project, it
checks each file one by one, which is a slow and tedious process. The best solution here is to migrate to
a modern version control system such as Git or Subversion. The second-best solution is to use polling
at very sparse intervals (for example, every 30 minutes).
5.5.4. Triggering Builds Remotely
Polling can be an effective strategy for smaller projects, but it does not scale particularly well—with
large numbers of build jobs, it is wasteful of network resources, and there is always a small delay between
the code change being committed and the build job starting. A more precise strategy is to get the SCM
system to trigger the Jenkins build whenever a change is committed.
It is easy to start a Jenkins build job remotely. You simply invoke a URL of the following form:
http://SERVER/jenkins/job/PROJECTNAME/build
For example, if my Jenkins server was running on http://myserver:8080/jenkins, I could start the
gameoflife build job by invoking the following URL using a tool like wget or curl:
$ wget http://myserver:8080/jenkins/job/gameoflife/build
The trick, then, is to get your version control server to do this whenever a change is committed. The
details of how to do this are different for each version control system. In Subversion, for example, you
would need to write a post-commit hook script, which would trigger a build. You could, for example,
write a Subversion hook script that parses the repository URL to extract the project name, and performs
a wget operation on the URL of the corresponding build job:
JENKINS_SERVER=http://myserver:8080/jenkins
REPOS="$1"
PROJECT=¶
/usr/bin/wget $JENKINS_SERVER/job/${PROJECT}/build
103
¶ Use regular expression processing here to extract your project name from the Subversion repository
URL.
However, this approach will only trigger one particular build, and relies on a convention that the default
build job is based on the repository name in Subversion. A more flexible approach with Subversion is
to use the Jenkins Subversion API directly, as shown here:
JENKINS_SERVER=http://myserver:8080/jenkins
REPOS="$1"
REV="$2"
UUID=`svnlook uuid $REPOS`
/usr/bin/wget \
--header "Content-Type:text/plain;charset=UTF-8" \
--post-data "`svnlook changed --revision $REV $REPOS`" \
--output-document "-" \
--timeout=2 \
$JENKINS_SERVER/subversion/${UUID}/notifyCommit?rev=$REV
This would automatically start any Jenkins build jobs monitoring this Subversion repository.
If you have activated Jenkins security, things become a little more complicated. In the simplest case
(where any user can do anything), you need to activate the “Trigger builds remotely” option (see
Figure 5.25, “Triggering a build via a URL using a token”), and provide a special string that can be
used in the URL:
http://SERVER/jenkins/job/PROJECTNAME/build?token=DOIT
Figure 5.25. Triggering a build via a URL using a token
This won’t work if users need to be logged on to trigger a build (for example, if you are using matrix
or project-based security). In this case, you will need to provide a user name and password, as shown
in the following example:
$ wget http://scott:tiger@myserver:8080/jenkins/job/gameoflife/build
or:
104
$ curl -u scott:tiger http://scott:tiger@myserver:8080/jenkins/job/gameoflife/build
5.5.5. Manual Build Jobs
A build does not have to be triggered automatically. Some build jobs should only be started manually,
by human intervention. For example, you may want to set up an automated deployment to a UAT
environment, that should only be started on the request of the QA folks. In this case, you can simply
leave the Build Triggers section empty.
5.6. Build Steps
Now Jenkins should know where and how often to obtain the project source code. The next thing you
need to explain to Jenkins is what it what to do with the source code. In a freestyle build, you do this
by defining build steps. Build steps are the basic building blocks for the Jenkins freestyle build process.
They are what let you tell Jenkins exactly how you want your project built.
A build job may have one step, or more. It may even occasionally have none. In a freestyle build, you can
add as many build steps as you want to the Build section of your project configuration (see Figure 5.26,
“Adding a build step to a freestyle build job”). In a basic Jenkins installation, you will be able to add
steps to invoke Maven and Ant, as well as running OS-specific shell or Windows batch commands. And
by installing additional plugins, you can also integrate other build tools, such as Groovy, Gradle, Grails,
Jython, MSBuild, Phing, Python, Rake, and Ruby, just to name some of the more well-known tools.
In the remainder of this section, we will delve into some of the more common types of build steps.
5.6.1. Maven Build Steps
Jenkins has excellent Maven support, and Maven build steps are easy to configure and very flexible.
Just pick “Invoke top-level Maven targets” from the build step lists, pick a version of Maven to run
(if you have multiple versions installed), and enter the Maven goals you want to run. Jenkins freestyle
build jobs work fine with both Maven 2 and Maven 3.
Just like on the command line, you can specify as many individual goals as you want. You can also
provide command-line options. A few useful Maven options in a CI context are:
-B, --batch-mode
This option tells Maven not to prompt for any input from the user, just using the default values
if any are required. If Maven does prompt for any input during the Jenkins build, the build will
get stuck indefinitely.
-U, --update-snapshots
Forces Maven to check for updated releases and snapshot dependencies on the remote repository.
This makes sure you are building with the latest and greatest snapshot dependencies, and not just
using older local copies which may not by in sync with the latest version of the source code.
105
-Dsurefire.useFile=false
This option forces Maven to write JUnit output to the console, rather than to text files in the target
directory as it normally would. This way, any test failure details are directly visible in the build
job console output. The XML files that Jenkins needs for its test reporting will still be generated.
Figure 5.26. Adding a build step to a freestyle build job
The advanced options are also worth investigating (click on the Advanced button).
The optional POM field lets you override the default location of the Maven pom.xml file. This is the
equivalent of running Maven from the command line with the -f or --file option. This is useful
for some multimodule Maven projects where the aggregate pom.xml file (the one containing the
 section) is located in a subdirectory rather than at the top level.
The Properties field lets you set property values that will be passed into the Maven build process, using
the standard property file format illustrated here:
# Selenium test configuration
selenium.host=testserver.acme.com
selenium.port=8080
selenium.broswer=firefox
These properties are passed to Maven as command-line options, as shown here:
$ mvn verify -Dselenium.host=testserver.acme.com ...
The JVM Options field lets you set any of the standard Java Virtual Machine options for your build job.
So if your build process is particularly memory intensive, you might add some extra heap space with
the -Xmx option (for example, -Xmx512m would set the maximum heap size to 512 MB).
106
The final option lets you configure a private Maven repository for this build job. Normally, Maven
will just use the default Maven repository (usually in the .m2/repository folder in the user’s home
directory). Occasionally, this can lead to build jobs interfering with each other, or use inconsistent
snapshot versions from one build to another. To be sure that your build is run in clean laboratory
conditions, you can activate this option. Your build job will get its own private repository, reserved for
its own exclusive use. On the downside, the first time the build job runs a build, this may take some time
to download all of the Maven artifacts, and private repositories can take up a lot of space. However, it
is the best way of guaranteeing that your build is run in a truly isolated environment.
5.6.2. Ant Build Steps
Freestyle build jobs work equally well with Ant. Apache Ant9 is a widely-used and very well-known
Java build scripting tool. Indeed, a very large number of Java projects out there rely on Ant build scripts.
Ant is not only used as a primary build scripting tool—even if your project uses Maven, you may resort
to calling Ant scripts to do more specific tasks. There are Ant libraries available for many development
tools and low-level tasks, such as using SSH, or working with proprietary application servers.
In its most basic form, configuring an Ant build step very is simple indeed—you just provide the version
of Ant you want to use and the name of the target you want to invoke. In Figure 5.27, “Configuring an
Ant build step”, for example, we are invoking an Ant script to run a JMeter test script.
Figure 5.27. Configuring an Ant build step
As with the Maven build step, the “Advanced...” button provides you with more detailed options, such as
specifying a different build script, or a build script in a different directory (the default will be build.xml
in the root directory). You can also specify properties and JVM options, just as you can for Maven.
5.6.3. Executing a Shell or Windows Batch Command
Occasionally you may need to execute a command directly at the Operating System level. Some legacy