intraprocedural, this is a lightweight and inexpensive analysis
with few constraints, and we can thus afford to use the more
expensive (but more precise) Andersen’s algorithm.
As discussed in Section IV-B1, we must iteratively analyze
functions to identify nested wrappers. We set the iteration
limit for this process to ﬁve, which is more than enough for
the tested applications. Once the wrappers are identiﬁed, we
generate their summary and insert it at the respective call sites.
B. Steensgaard’s Analysis
We implemented our Steensgaard’s pointer analysis on top
of SVF [36], a popular static analysis framework, as an LTO
pass. SVF supports multiple variants of Andersen’s algorithm,
but does not support Steensgaard’s algorithm.
SVF operates on the LLVM IR representation by iterating
over every IR instruction and capturing their pointer constraints.
We solve each of the constraints collected, performing set uniﬁ-
cation operations when required, as described in Section II-A1.
That is, when we discover a new points-to target t for a pointer
p, we unify the sets T and P , where t ∈ T , and P is the
set of objects that p points to. The details are provided in
Appendix C. Solving these constraints results in computing
all points-to relationships associated with the constraints. Only
when solving a constraint results in the derivation of a new call
target for an indirect function call, the constraints associated
with the newly discovered target must be recomputed. Apart
from this, every constraint is processed exactly once, allowing
the algorithm to operate in almost linear time.
We use SVF’s interfaces to export the analysis results.
This allows our implementation to be seamlessly used as
a replacement for the other variants of Andersen’s analysis
provided by SVF (we are in the process of contributing our
Steensgaard’s analysis implementation to the SVF project).
As discussed in Section IV-C, objects marked as sensitive
may be copied and stored to other objects and variables. The
LLVM instructions LoadInst and StoreInst are used
to read from and write to memory, respectively. To identify
sensitive value ﬂows, we track the ﬂows that begin from a
LoadInst reading a sensitive object, and terminate in a
StoreInst writing to a non-sensitive object.
As discussed earlier, indirect value ﬂows via pointers are
possible, and we use the Steensgaard’s analysis results to
resolve the sources and targets of any pointers involved in
indirect value ﬂows. Due to its inherent overapproximation,
this means that the sink sites of some of the identiﬁed value
ﬂows may not receive any sensitive values at runtime—this
is the reason for introducing dynamic data ﬂow tracking to
maintain sensitivity labels. To aid the DFT phase identify these
potentially sensitive value ﬂows, we add metadata to every
instruction that is part of them.
D. Scoped Dynamic Data Flow Tracking
Similarly to existing DFT frameworks [49], DynPTA main-
tains a shadow memory located at a ﬁxed offset in the process’
address space, which keeps a sensitivity label for each byte of
process data. To speed up label initialization and lookup, we
use hand-crafted assembly code. Note that the shadow memory
does not have to be kept secret from the attacker.
The set of tracked memory objects (located on the stack,
heap, or the global section) includes the objects annotated
directly by the programmer, as well as the rest of the objects
derived through value ﬂow analysis. At program startup, the
only memory locations labeled as sensitive are the locations
that are explicitly marked by the programmer using DynPTA’s
mark_sensitive() function. Marking a memory location
as sensitive i) applies the sensitive label to it, and ii) encrypts the
existing data at that location. From that point on, our scoped
DFT logic propagates sensitive labels only for instructions
that contain our inserted metadata (Section V-C), i.e., the
instructions that take part in potentially sensitive value ﬂows.
If a LoadInst reads from a memory location marked
as sensitive, the location of the terminating StoreInst is
also labeled as sensitive. At that point, we insert an LLVM
BranchInst that checks if the value about to be stored is
marked as sensitive, in which case it encrypts the value before
storing it. Any further operations on this object will always
undergo AES transformation, as the label is maintained for
the lifetime of the object. In this way, we apply AES only to
objects that are sinks for truly sensitive value ﬂows.
In addition to properly maintaining sensitive value ﬂows,
Steensgaard’s analysis provides us with every LoadInst and
StoreInst that may access sensitive data. For each of these
instructions, we again perform a label lookup to determine
whether the memory operand is actually sensitive. In that
case, an LLVM BranchInst invokes the corresponding AES
operations—otherwise the memory access proceeds normally.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1926
TABLE I: Applications used for performance evaluation.
Application
Nginx + OpenSSL
Httpd
Lighttpd + ModAuth
MbedTLS server
OpenVPN
Memcached + Auth.
ssh-agent
Minisign
Protected
Data
Private Key
Password
Password
Private Key
Private Key
Password
Private Key
Private Key
KLOC
Bitcode
Size
DynPTA
Compilation
389
179
83
54
329
71
52
45
8M
3.7M
1.9M
726K
3.5M
1.1M
640K
1.2M
50.6 min
11.0 min
2.8 min
1.3 min
59.1 min
1.0 min
1.3 min
37 sec
VI. PERFORMANCE EVALUATION
We evaluated DynPTA with a set of eight popular applica-
tions. In each case, we annotate sensitive data such as passwords
and private keys to be protected. Every experiment is performed
20 times, and we report averages. We run all our applications
under test on a machine with an Intel Core i7-6700 CPU and 32
GB of RAM, running Ubuntu 19.10 and Linux kernel 5.3.0-40.
For server–client experiments, we run the client on a machine
with an Intel Xeon E5-2620 CPU and 64 GB of RAM, running
Ubuntu 18.04 and Linux kernel 4.15.0-106. Both the server
and client machines were on the same local 1Gbit/s network.
A. Applications
Table I lists the applications used in our evaluation, and the
respective data annotated as sensitive. We included popular
web servers, VPN servers, and desktop utilities. We also report
the number of source code lines, the LLVM bitcode size, and
the time that DynPTA takes to generate the hardened binaries.
Nginx: We built Nginx with the HTTP_SSL_module
enabled and linked it with the OpenSSL library. We use
LLVM’s link time optimization (LTO) to generate the combined
bitcode that includes the main Nginx executable and all libraries.
Our use case for DynPTA is to protect the parameters of the SSL
private key. These are in BIGNUM objects, which are referred
to by pointers stored in the rsa ﬁeld of the pkey object. The
function ssl_set_pkey initializes these pointers, which we
mark as sensitive. As shown in Table I, the use of Steensgaard’s
algorithm [37] allows DynPTA to complete in less than an
hour all its analysis and instrumentation passes. Indicatively,
an Andersen’s pass alone for the same code requires almost
11 hours to complete.
Apache Httpd with Authentication: We used LTO to link
Httpd statically with Apache’s Portable Runtime (APR). Httpd
supports password protection for certain directories through
the ModAuth module. The password is stored on the heap
and is referred to through the pointer file_password (in
mod_authn_file.c), which we annotate as sensitive. This
object is allocated via the wrapper ap_getword(), provided
by APR. Our context-sensitive heap modeling successfully
identiﬁes this function as a memory allocation wrapper.
to
Httpd,
Lighttpd:
Similarly
also
and
supports ModAuth for password-protecting ﬁles
directories. The pointer password_buf in function
mod_authn_file_htpasswd_get is initialized to store
the address of the password, and we annotate it as sensitive.
Lighttpd
Fig. 6: New instructions added due to scoped DFT for
potentially sensitive value ﬂows.
Fig. 7: Percentage of protected memory instructions.
MbedTLS server: MbedTLS is a lightweight TLS library
which also provides a simple TLS server. Similarly to OpenSSL,
MbedTLS uses a custom data type to represent multi-precision
integers called mbedtls_mpi. The SSL private key is
stored within mbedtls_rsa_context, in objects of type
mbedtls_mpi, which we annotate as sensitive.
OpenVPN: We conﬁgured OpenVPN to work with OpenSSL
certiﬁcates, and used LTO to build the combined LLVM IR
bitcode. Similarly to Nginx, we annotate the parameters of the
SSL private keys as sensitive.
Memcached with Authentication: When Memcached is
compiled with LibSASL, client connections can be pro-
tected with a password. The variable buffer in function
sasl_server_userdb_checkpass stores this password,
which we mark as sensitive.
ssh-agent: Private SSH keys are typically password-protected
on disk, and ssh-agent conveniently keeps them in memory
so that users do not have to re-type the password. The private
key is stored in an object of type ssh_key (initialized in
function sshkey_new), which we mark as sensitive.
Minisign: Minisign is a simple ﬁle signing tool that uses
Libsodium for hashing and signing. The private key used for
signing is stored in an object of type SeckeyStruct, which
we mark as sensitive.
B. Scoped Data Flow Tracking
1) Static Instrumentation: As discussed in Section IV-D,
DynPTA uses scoped DFT to track sensitive value ﬂows
and maintain labels for sensitive data. Figure 6 shows the
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1927
and network sockets. These objects are passed directly to Libc
interfaces and used by the kernel. Ensuring that every Libc or
kernel interface appropriately decrypts (and re-encrypts) these
objects requires signiﬁcant engineering effort and therefore we
did not attempt it for the rest of the (more complex) applications.
When removing scoped DFT, the runtime overhead for running
MbedTLS server increases from 4.1% to 56%. We provide
the details of this experiment and the rest of our performance
evaluation results in the following section.
C. Runtime Overhead
1) Real-world Use Cases: To evaluate the runtime overhead
of DynPTA, we harden the applications listed in Table I to
protect their sensitive data (listed in the second column), and
drive them using various workloads. For all applications we
use their default conﬁguration. For web servers (Nginx, Httpd,
Lighttpd) we use ApacheBench [51] to perform ﬁve rounds of
10,000 requests, with each round requesting a ﬁle of increasing
size (from 4KB to 1MB).
Figures 9(a)–9(c) show the overhead of DynPTA when pro-
tecting the TLS key for Nginx and the authentication password
for Httpd and Lighttpd. In all cases, the in-memory protected
objects are accessed only during connection establishment, and
the AES transformations are performed only at that time. We
observe the highest overhead (19%) for Nginx, because the
TLS handshake involves multiple complex operations to derive
a new session key from the (protected) TLS private key per
connection. In contrast, password-based authentication involves
a one-time decryption and a short sequence of byte-by-byte
comparisons of the user-provided password with the password
on ﬁle. This results in a lower overhead ranging from 6.5% in
the worst case for the shortest response size, to an amortized
1.86% for 1MB responses. Nginx’s overhead is not amortized
as the response size increases, because many label lookups
(proportional to the response size) still have to be performed
(as shown in Figure 8, Nginx has at least twice as many label
lookups compared to other applications).
For the rest of the applications (Figure 9(d)), we used a
variety of workloads. For the MbedTLS server, we used its TLS
client to perform 100,000 requests for a 4KB ﬁle over the same
connection (default behavior), which has also been the main
use case in previous selective data protection works [31, 33].
The overhead in this case is just 4%, as the protected private
key is used only during the initial connection establishment.
Indicatively, although this result is not directly comparable to
previous works due to the different experimental environment,
for the same server application, workload, and protected data,
the reported overhead for in-memory encryption [33] is 13%
and for DataShield [31] is 35%.
For OpenVPN, we downloaded a 100KB ﬁle 10,000 times
over a VPN connection using ApacheBench, observing an
overhead of 10.47%. Similarly to Nginx, although most of
the expensive AES operations happen during connection
establishment, there is still a signiﬁcant amount of label
lookups throughout the whole duration of the experiment. For
Memcached, we used its benchmarking tool Mutilate [52] to
Fig. 8: At runtime, the vast majority of memory accesses
proceed normally. Label lookups are performed only for up to
24% of all memory accesses (Nginx), and only a fraction of
those (up to 4% for Nginx) involve AES operations.
percentage of new instructions added for scoped DFT, compared
to the original program. Among the evaluated applications, the
maximum percentage of additional instructions for the DFT
logic is only 9.08%.
Similarly, only a fraction of all memory load and store
instructions have to be instrumented to protect sensitive data.
The instrumentation in this case consists of a lightweight
shadow memory lookup, which invokes the AES transformation
in case the data is indeed sensitive. Figure 7 shows the
percentage of memory instructions that are instrumented for
data protection. In the worst case (OpenVPN), only 16.62%
of all memory operations have to be instrumented.
2) Runtime Performance Beneﬁt: Without scoped DFT, all
protected memory accesses (Figure 7) would always have
to undergo expensive AES transformation. By introducing
a lightweight label lookup, AES can be avoided when the
accessed data turns out to be non-sensitive.
To assess the performance beneﬁt of this approach, we
ﬁrst compare the cost of a shadow memory lookup with the
cost of the AES data transformation using a microbenchmark.
We performed three experiments by instrumenting one billion
single-byte memory accesses with i) a label lookup, ii) AES
encryption, and iii) AES decryption, which took 3.3, 14.2, and
16.5 seconds to complete, respectively. This means that the
cost of AES encryption and decryption is at least 430% and
500% that of a label lookup.
Then, we use a custom Pin [50] tool to record how many
memory accesses involve label lookups, and among those, how
many perform AES operations on the accessed data. As shown
in Figure 8, shadow memory lookups are performed only for
up to 24% of all memory accesses, while only up to 4% of
them undergo expensive AES cryptographic operations.
Without scoped DFT, all protected memory accesses would
always involve AES, resulting in a prohibitively high runtime
overhead. To demonstrate this, we applied DynPTA without
scoped DFT on MbedTLS. This required signiﬁcant amount of
effort because applying AES to all potentially sensitive memory
instructions identiﬁed by the pointer analysis and value ﬂow
analysis involves many unintended objects, such as ﬁle handles
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:29 UTC from IEEE Xplore.  Restrictions apply. 
1928
Fig. 9: Runtime overhead of DynPTA for popular web servers (a)–(c) and other applications (d).
generate ﬁve billion operations with its default conﬁguration
(get/set ratio of 0.5, key size of 30 bytes, value size of 400
bytes). DynPTA’s overhead in this case is negligible (0.32%),
because the variable that stores the protected password is not
pointed to by any pointer and is not copied to any other variable,
requiring only a fraction (about 1%) of memory accesses to