# Facebook 的生产工程师
    *来自 Facebook 的 Pedro Canahuati 和 David N. Blank-Edelman 的讨论*
**大卫：**什么是生产工程师？
**佩德罗：**从哲学上讲，生产工程师源于一种信念，即运维问题应该通过软件解决方案来解决，而实际构建软件的工程师是生产中操作该软件的最佳人选。
在软件的早期，编写代码的开发人员也调试并修复了它。有时，他们甚至不得不深入专研硬件问题。多年来，随着远程软件系统、互联网和大型数据中心的出现，这种做法发生了巨大变化。如今，仍然很常见地看到软件工程师编写和开发应用程序，然后将代码交给
QA
团队进行测试，然后将代码交给另一个团队进行部署和调试。在某些环境中，有专门的发布工程团队来负责部署代码，有运维团队确保系统稳定并响应警报。当
QA
和运维人员具备解决问题所需的知识，并且团队之间的反馈循环正常时，这一点效果相当好。如果情况并非如此，修复或调试生产问题就需要回到软件工程师，并且此工作流可能会显著延迟修复。在
Facebook，我们的生产工程【PE】团队只是回到了集成软件工程师【SWE】和运维人员的概念。
几年前，我们启动了 PE
模式，专注于在软件工程和运营团队之间建立更加协作的文化。我们的目标是确保
Facebook 的基础设施健康，并且我们强大的用户社区可以随时访问该平台。PE
团队是通过自动化实现这一目标的关键组件：编写新工具（使每个人的运维更轻松）、性能分析、系统级的调试、必要时的故障恢复，以及教其他人如何自行运行系统。Facebook
工程团队构建了通用基础设施，每个人都使用这些基础设施来构建和部署软件。多年来，Facebook
的基础设施已经有机地发展，虽然我相信我们将解决我们今天的许多运维问题，但目前仍然没有彻底解决。生产工程师帮助弥合这一差距，确保团队能够重新解决我们面临的难题，并尽可能少地花时间解决运维问题。
PE
团队不仅编写代码以最大程度地降低维护复杂性，还负责调试影响全球数十亿人的实时生产系统中的难题，从
Facebook 的 Hadoop
数据仓库等后端服务到动态消息等前端服务，也有基础结构组件，如缓存、负载平衡和部署系统。PE
与 SWE 并肩工作，使 Facebook
保持正常运行。该团队还帮助软件工程师了解其软件如何与其环境交互。
可以把生产工程师视为集大成者：同时具备大规模制造（硬件、汽车、工业等）、专家工程师和良好的运维管理人员的特质。生产工程师通常对工程实践有广泛的了解，并了解与生产操作相关的挑战。PE
的目标是确保生产以最平稳的方式运行。我们角色的一个很好的类比是制造汽车生产线。设计者团队创建汽车，工程师团队构建硬件，另一个团队负责将所有设备放在一起的自动化。当此流程中断时，生产工程师就会出现，因为他们了解生产线的整个流程，包括上游和下游的所有流程。他们了解汽车是如何设计的，它应该如何工作，以及用来制造汽车的软件应该做什么。有了这些知识，生产工程师可以根据需要对问题进行故障排除、诊断和修复，并且他们还与整个团队合作，防止将来发生此类事件。
在
Facebook，生产工程师不是生产线上的运维人员，但他们确实知道生产线上的所有东西都是如何运作的。例如，当软件响应用户流量时，甚至当它出现故障时，生产工程师通常是最了解代码如何与其环境交互、如何修复和改进代码，以及如何始终保持代码性能的人。
**大卫：** 你能多说一点关于 PE 的起源故事吗？
**佩德罗：**在最初几年，Facebook
应用了当时业界公认的方法，通过专门的运维团队运营其生产网站和服务。操作团队由单独的站点可靠性工程【SRE】和 应用程序运维【AppOps】团队组成。
与传统通信服务商的网络运营中心（NOC）相比，SRE
团队除了通过软件来解决运维问题外并无太大差别。当时，一个不到 20
人的团队在 AppOps
的支持下，使用三级上报流程监控系统基础结构的问题、对警报做出反应和分审问题。SRE
分三班制，提供全天候的覆盖。另一方面，AppOps
是一小群已经嵌入软件工程【SWE】团队的个人。当时的模型实际上是每个服务（例如，新闻、广告、网络聊天、搜索、数据基础设施）配一名
AppOps 工程师，生产工程师与软件工程师的比例约为 1:10，但有的时候可能高达
1:40。有时，有一个 AppOps
工程师被分配到多个服务。例如，数据仓库和集中式日志记录系统有一个共享的
AppOps 工程师。早期，AppOps
能够很好地理解整个应用程序堆栈，以便快速响应和解决中断。
尽管 SRE 团队应该与开发软件的 SWE 团队合作，但 SRE
在早期开发过程中经常缺席，并且经常在部署时发现正在构建的新软件更改或新服务。SRE、AppOps
和 SWE 之间的关系并不牢固。SRE
团队还必须兼顾新数据中心的启用和确保在流量高峰时段满足容量需求的额外责任。SRE
通过在企业级负载均衡器上的 Web
接口在多个数据中心之间移动用户负载，确保满足容量需求。通过简易的 shell
脚本和轻量级工具，将这些设备或内部代码库提供的 API
集成在一起，从而出现了某种程度的自动化。
正当 SRE、AppOps 和 SWE 团队专注于扩展基于 Web
服务的网站和基础架构时，用户开始从桌面应用过渡到移动应用，而且整个公司也重新确定了优先级，以遵循移动优先的战略。这大大增加了服务的复杂性，并加速了提供不断增加的基础架构的需求。Facebook
在移动世界中的服务规模扩展，加上超大规模客户增长，使 SRE 和 AppOps
团队不堪重负。大多数 AppOps
工程师必须全天候待命，而故障修复成为工作常态。随着用户增长和复杂性的增加，SRE
和 AppOps
都无法专注于招聘，并且数月无法雇佣更多员工，从而将团队拖入泥泞的困境。
由于 SRE
团队缺乏自动化数据中心配置，以及始终需要在生产中修复单个服务器，基础设施容量已经落后，这加剧了本已具有挑战性的局面。如果没有必要的自动化来加快我们跟上服务器故障和添加新群集的速度，团队最终会处于人力资源的危机状态。人们不知所措，精疲力竭。显然需要一种更好的办法。我们的管理团队认识到，运维团队没有跟上业务变化的步伐，目前的运维模式已经不够。
我们面临的主要挑战是，对 SRE、AppOps 和 SWE
角色的期望不明确；无法平衡修复故障、服务器维护和资源容量扩张的压力；在要求体系结构调整时，SWE
团队的可信度较低。
我们首先致力于明确 SRE、AppOps 和 SWE
的角色。我们理解，团队需要更早地参与软件过程，并且嵌入式模型更有可能适应这个需要。我们还需要在软件和运维团队之间建立更牢固的工作关系和信誉，并确保
SWE 团队对其服务拥有更强的所有权。
我们进行了多步骤重组，并雇佣了不同类型的工程师。为了继续管理不断增长的基础架构需求，我们决定将
SRE 员工一分为二。我们将停用 SRE
名词，并成立一个新的站点可靠性操作【SRO】团队，并且我们将扩展现有的
AppOps 团队，成员来自前 SRE 团队。通过从前 SRE
团队中调动关键人员，我们能够快速扩展 AppOps
的运维知识和人员配备，并将团队规模扩大一倍。随着时间的推移，停用 SRE
名字也有助于改变 SWE 团队的期望。
SRO
的职权范围是侧重于两个领域。首先是继续必要的和伟大的故障修复工作。第二是建立软件和自动化，以减少人类对这些努力的参与。我们还将一些重组的
SRE 转移到一个 SRO 小组中，专注于拓展新资源。