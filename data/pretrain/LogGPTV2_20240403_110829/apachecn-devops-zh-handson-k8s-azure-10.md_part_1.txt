# 十、在 AKS 中存储机密
所有生产应用都需要一些敏感信息才能运行，例如密码或连接字符串。Kubernetes 有一个可插入的后端来管理这些机密。Kubernetes 还提供了在部署中使用机密的多种方式。管理机密并正确使用它们的能力将使您的应用更加安全。
你已经在这本书里用过机密了。您在连接到 WordPress 网站时使用它们在*第 3 章“AKS 上的应用部署”*和*第 4 章“构建可扩展的应用”*中创建博客文章。当您使用 TLS 配置应用网关入口控制器时，您还使用了*第 6 章“使用 HTTPS* 保护您的应用”中的机密。
Kubernetes 有一个内置的机密系统，以半加密的方式将机密存储在默认的 Kubernetes 数据库中。这个系统运行良好，但不是处理 Kubernetes 中机密的最安全的方法。在 AKS 中，您可以使用一个名为 **Azure Key Vault 提供程序的项目，用于 Secrets Store CSI 驱动程序** ( **CSI 驱动程序**)，这是在 Kubernetes 中使用 Secrets 的一种更安全的方式。该项目允许您在 Azure 密钥库中存储和检索机密。
在本章中，您将了解 Kubernetes 中各种内置的机密类型，以及创建这些机密的不同方式。之后，您将在集群上安装 CSI 驱动程序，并使用它来检索机密。
具体而言，您将在本章中涵盖以下主题:
*   Kubernetes 的不同类型的机密
*   在 Kubernetes 中创建和使用机密
*   为机密存储 CSI 驱动程序安装 Azure 密钥库提供程序
*   使用 Azure 密钥库提供程序获取机密存储 CSI 驱动程序
让我们从探索 Kubernetes 中不同的机密类型开始。
## Kubernetes 的不同机密类型
正如本章介绍中提到的，Kubernetes 附带了一个默认的 secrets 实现。这个默认的实现将把机密存储在 etcd 数据库中，Kubernetes 用它来存储所有的对象元数据。当 Kubernetes 在 etcd 中存储机密时，它将以 base64 编码格式存储它们。Base64 是一种以模糊方式编码数据的方式，但不是一种安全的加密方式。任何能够访问 base64 编码数据的人都可以轻松解码。AKS 通过加密 Azure 平台内的所有静态数据，在此基础上增加了一层安全性。
Kubernetes 中的默认机密实现允许您存储多种类型的机密:
*   **不透明机密**:这些可以包含任意用户定义的机密或数据。
*   **服务账户代币**:这些是 KubernetesPODS 用于内置集群 RBAC 的代币。
*   **Docker 配置机密**:用于存储 Docker 命令行配置的 Docker 注册表凭据。
*   **基本认证机密**:用于以用户名和密码的形式存储认证信息。
*   **SSH 认证机密**:这些是用来存储 SSH 私钥的。
*   **TLS 证书**:用于存储 TLS/SSL 证书。
*   **引导令牌机密**:这些用于存储在创建新集群或将新节点加入现有集群时使用的承载令牌。
作为 Kubernetes 的用户，您通常会使用不透明的机密和 TLS 证书。您已经在*第 6 章“用 HTTPS* 保护您的应用”中处理过 TLS 机密。在这一章中，你将关注不透明的机密。
Kubernetes 提供了三种创建机密的方法，如下所示:
*   从文件中创建机密
*   从 YAML 或 JSON 定义中创造机密
*   从命令行创建机密
使用上述任何方法，您都可以创建任何类型的机密。
Kubernetes 为您提供了两种消费机密的方式:
*   使用机密作为环境变量
*   将机密作为文件安装在容器中
在下一节中，您将使用这里提到的三种方法来创建机密，稍后您将使用这里列出的两种方法来使用它们。
## 在 Kubernetes 创造机密
在 Kubernetes 中，有三种不同的方法来创建机密:从文件、从 YAML 或 JSON 定义，或者直接从命令行。让我们开始探索如何从文件中创建机密。
### 从文件中创建机密
在 Kubernetes 中创建机密的第一种方法是从文件中创建它们。这样，文件的内容将成为机密的值，文件名将成为机密中每个值的标识符。
假设您需要存储一个访问应用编程接口的网址和一个安全令牌。为此，请遵循以下步骤:
1.  Store the URL in **secreturl.txt**, as follows:
    回声 https://my-url-location.topsecret.com
    >秘诀.txt
2.  Store the token in another file, as follows:
    echo ' supersecretoken ' > secretoken . txt
3.  Let Kubernetes create the secret from the files, as follows:
    kubectl 创建机密通用 myapi-url-token \
    - from-file=。/secret turl . txt-from-file =。/secrettoken.txt
    请注意，您正在 Kubernetes 中创建一个单独的机密对象，引用两个文本文件。在此命令中，您使用**通用**关键字创建了一个不透明的机密。
    该命令应返回类似于图 10.1 的输出:
    ![Creating a Secret using the contents of the secreturl.txt file](img/B17338_10_01.jpg)
    图 10.1:创建不透明的机密
4.  You can check whether the secrets were created in the same way as any other Kubernetes resource by using the **get** command:
    忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈
    该命令将返回类似于图 10.2 的输出:
    ![Verifying the creation of your Secret using the kubectl get secrets command](img/B17338_10_02.jpg)
    图 10.2:创建的机密列表
    在这里，您将看到您刚刚创建的机密，以及存在于**默认**命名空间中的任何其他机密。机密是**不透明的**类型，这意味着，从 Kubernetes 的角度来看，内容的模式是未知的。它是一个没有约束的任意键值对，与 SSH 身份验证或 TLS 机密相反，后者有一个将被验证为具有所需细节的模式。
5.  For more details about the secret, you can also run the **describe** command:
    忽必烈描述机密 myapi URL 令牌
    您将获得类似于图 10.3 的输出:
    ![Fetching the detailed description of the Secret using the describe command](img/B17338_10_03.jpg)
    图 10.3:创建的机密的描述
    如您所见，上述两个命令都没有显示实际的机密值。
6.  To see the secret's value, you can run the following command:
    kubicl get-o YAML secrets/myapi URL 令牌
    您将获得类似于图 10.4 的输出:
    ![Using the -o yaml switch in kubectl get secret fetches the encoded value of the Secret](img/B17338_10_04.jpg)
    图 10.4:在 kubectl get secret 中使用-o yaml 开关获取机密的编码值
    数据以键值对的形式存储，文件名作为键，文件的 base64 编码内容作为值。
7.  The preceding values are base64-encoded. Base64 encoding isn't secure. It obfuscates the secret so it isn't easily readable by an operator, but any bad actor can easily decode a base64-encoded secret. To get the actual values, you can run the following command:
    echo ' C3 vwxjtzwnyxrub 2 tlbgo = ' | base 64-d
    echo ' ahr 0 CHM 6ly 9ts 1 zzwnyzqtdxjslway 2 f0aw 9 ulnrvchnly 3 jldc 5 JB 20k ' | base 64-d
    您将获得最初创建的机密的价值:
![The Base64-encoded Secret is decoded using the base 64 -d command](img/B17338_10_05.jpg)
图 10.5: Base64 编码的机密很容易被解码
这向您表明，这些机密在默认的 Kubernetes 机密存储中没有被安全加密。
在本节中，您可以使用文件作为源，创建一个包含带有安全令牌的示例网址的机密。通过解码 base64 编码的机密，您还能够获得实际的机密值。
让我们继续探索创造 Kubernetes 机密的第二种方法，根据 YAML 的定义创造机密。
### 使用 YAML 文件手动创建机密
在前一节中，您从文本文件创建了一个机密。在本节中，您将按照以下步骤使用 YAML 文件创建相同的机密:
1.  First, you need to encode the secret to **base64**, as follows:
    回音超级回声| base64
    您将获得以下值:
    vwzxjtzwnyzxrub 2 tlbgo=
    您可能会注意到，这与您在上一节中获得机密的 **yaml** 定义时呈现的值相同。
2.  Similarly, for the **url** value, you can get the base64-encoded value, as shown in the following code block:
    echo ' https://my-secret-URL-location . tops ecret . com“| base64”
    这将为您提供 base64 编码的网址:
    ahr 0 CHM 6ly 9ts 1 zzwnyxqtdxjslway 2 f0aw 9 ulnrvchnly 3 jldc 5 JB 20k
3.  You can now create the secret definition manually; then, save the file. This file has been provided in the code bundle as **myfirstsecret.yaml**:
    1 堆叠版本:v1
    2 种:机密
    3 元数据:
    4 名称:mypiurltoken-YAML
    5 类型:不透明
    6 数据:
    7 URL:ahr 0 CHM 6 ly 9ts 1 zzwnyzqtdxjslway 2 f0aw 9 ulnrvchnly 3 jldc 5 JB 20k
    8 个标记:C3 vwxjtzwnyxrub 2 tlbgo =
    让我们调查一下这个文件:
    *   **第 2 行**:这说明你在创造一个机密。
    *   **第 5 行**:这指定您正在创建一个**不透明的**机密，这意味着从 Kubernetes 家的角度来看，值是不受约束的键值对。
    *   **第 7-8 行**:这些是机密的 base64 编码值。
    您可能会注意到，这个 YAML 与您在上一节中获得的回报非常相似。这是因为您用来在 Kubernetes 中创建机密的对象在 Kubernetes API 上存储了更多的元数据。
4.  Now you can create the secret in the same way as any other Kubernetes resource by using the **create** command:
    忽必烈 create -f myfirstsecret.yaml
    这将返回类似于图 10.6 的输出:
    ![Creating a Secret from a YAML file](img/B17338_10_06.jpg)
    图 10.6:机密是从 YAML 文件中成功创建的
5.  You can verify whether the secret was successfully created using this:
    忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈
    这将向您显示类似于图 10.7 的输出:
    ![Verifying the creation of your Secret using the kubectl get secrets command](img/B17338_10_07.jpg)
    图 10.7:创建的机密列表
6.  您可以通过使用**kube CTL get-o YAML secrets myapirltink-YAML**以与上一节中描述的相同的方式来再次检查机密是否相同。
这描述了 Kubernetes 创造机密的第二种方式。在下一节中，您将学习使用 kubectl 中的文字创建机密的最后一种方法。
### 在 kubectl 中使用文字创建泛型机密
创建机密的第三种方法是使用**文字**方法，这意味着您可以在命令行上以 kubectl 形式传递值。正如您在前面的示例中看到的，Kubernetes 中的一个机密可以包含多个值。在使用**字面量**方法创建机密的命令中，使用语法 **- from-literal=  = ** 来识别机密中的不同值:
1.  To create a secret using the **literal** method, run the following command:
    kubectl 创建机密泛型 myapirltink-literal \
    -from-literal = token = ' super secrettoken ' \
    -from-literal = URL = https://my-secret-URL-location . tops ecret . com
    这将返回类似于图 10.8 的输出:
    ![Creating a Secretusing a literal values](img/B17338_10_08.jpg)
    图 10.8:使用 kubectl 中的文字值成功创建了机密
2.  You can verify that the secret was created by running the following command:
    忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈得到机密忽必烈
    这将给我们一个类似于图 10.9 的输出:
![Verifying the creation of your Secret using the kubectl get secrets command](img/B17338_10_09.jpg)
图 10.9:验证使用文字方法创建的机密
因此，除了前面两种方法之外，您还使用文字值创建了机密。
在本节中，您已经使用三种方法创建了 Kubernetes 机密。在下一节中，您将探索在您的 pods 和应用中使用这些机密的两种方法。
## 利用你的机密
一旦机密被创建，它们需要被链接到应用。这意味着 Kubernetes 需要以某种方式将机密的价值传递给运行中的 Pod 。Kubernetes 提供了两种将机密链接到应用的方法:
*   使用机密作为环境变量
*   将机密作为文件挂载
将机密作为文件挂载是在应用中使用机密的最佳方式。在本节中，我们将解释这两种方法，并展示为什么最好使用第二种方法。让我们从访问作为环境变量的机密开始。