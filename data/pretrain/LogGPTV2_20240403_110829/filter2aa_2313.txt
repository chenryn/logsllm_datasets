一枚字体CRASH到FUZZING的探索
目录
CONTENTS
1、fuzzing的介绍
2、fuzzing这么好玩，就crash了
3、进阶！apple 字体处理框架的fuzzing
4、升级！fuzzing的探索与改造
5、继续fuzzing，收获漏洞！
0 1
PART
01
0 2
fuzzing的介绍
介绍
0 1
2020是个非常奇妙与难忘的一年，同样fuzzing技术在2020年技术井喷，涌现了一大批fuzzing工具和前沿的
研究；
在2020年的年终时候，我在知乎上对2020年的开源fuzzing做了一些总结与些许研究，一个开源的研究与项
目叫FormatFuzzer，这个项目的出现，让我想起了aflsmart的开源fuzzing项目，两者都是类似的文本结构
fuzzing，和aflsmart不同的是FormatFuzzer项目还处于开发阶段；
通过我对aflsmart fuzzing项目的熟悉，我决定以Formartfuzzer为契机来玩一下。
https://zhuanlan.zhihu.com/p/344008210
Formartfuzzer
0 1
Formartfuzzer项目地址：
https://uds-se.github.io/FormatFuzzer/
PART
02
0 2
fuzzing这么好玩，就
crash了
Formartfuzzer
0 1
Formartfuzzer生成器 13种格式
Formartfuzzer
010 Editor bt模
板改
PNG
GIF
........
AVI
BMP
增加ttf bt
模板
ffcompile
编译器
生成
畸形
数据
ttf结构
0 1
1、9个table表必须出现在任何有效的 TrueType 字体文件中
2、这些表可以按任何顺序出现
3、30多个特殊的表
010 Editor ttf字体结构name视图
0 1
TTF 010 BT模板的改造
21 table的改写
0 1
pfp解
释器
010 editor的
bt模板
改造
ttf模板生成
器
字体fuzzing目标的选定
0 1
macos ?
/System/Applications/Font Book.app/Contents/MacOS/Font Book
ttf模板生成器生成畸形字体
通过Font Book打开？
0 1
fuzzing start ?
条件：
0 1
1、自动启动和关闭；
2、产生畸形数据
3、可以检测crash与保存crash
fuzzing脚本：
0 1
#！/bin/bash
for I in {1..200000};do
./ttf-fuzzer fuzz test.ttf
sleep 1s
./test test.ttf &
echo "sleep start\n"
sleep 1s
echo "kill start\n"
ps -efww|grep -w 'Font'|grep -v grep|cut -c 7-17|xargs kill -9
done
echo "over\n"
exit 0
ttf字体
生成器
启动font book，
crash检测保
存
0 1
经过24小时的fuzzing.....
fuzzing这么好玩，就crash了
crash 字体分析
0 1
1、head.unitsPerEm = 0
（设置为 16 到 16384 之间的值。此范围内
的任何值均有效）
2、name.nameID = 1(字体系列)
以上设字体参数设置将会导致font book参数
异常，而引发崩溃
fuzzing这么好玩，就crash了
0 1
加入Formartfuzzer 自带变异算法，如 smart_replace、smart_delete、smart_insert、
smart_abstract、smart_swap，重新启用脚本fuzzing，
等待数天.jpg
2 x 24h fuzzing测试后......
0 crash.....
0 1
思考
0 1
1、对于字体特殊的table组成，随机剪切、替换会引发很多无
效的数据；
2、没有有效的反馈，做了无用功；
3、是不是该做点fuzzing进阶了。
比如，apple字体框架是如何解析的？加入程序路径覆盖率反
馈等
PART
03
0 2
进阶！apple 字体处理框
架的fuzzing
apple 字体处理框架
0 1
Core Text 是一种用于布局文本和处理字体的高级低等级技术。Core Text 直接与 Core Graphics (CG) 一起工
作，也称为 Quartz，它是一种高速图形渲染引擎，可在 OS X 和 iOS 的最低级别处理二维图像。
CoreText框架
0 1
基础框架：
CTFrameSetter：相当于一个CTFrame工厂，来生产CTFrame，一个界面上可以有多个CTFrame；
CTFrame：可以视为一个画布，范围是由CGPath(图形路径)来决定，其后的绘制是只在这个范围内绘制；
CTLine：一个CTFrame由多个CTLine组成，一行就是一个CTLine；
CTRun：一个CTLine是由一个或多个CTRun组成，可以理解为一个块，当一个CTLine中包含了多个
不同属性时，比如字体、颜色、Attachment等，都会通过CTRun将CTLine分隔开；
apple 字体对象的创建
0 1
func CTFontCreateWithName(_ name: CFString, _ size: CGFloat,  _ matrix: UnsafePointer?) -> 
CTFont
CGFontRef CGFontCreateWithDataProvider(CGDataProviderRef provider);
func CTFontCreateWithGraphicsFont(_ graphicsFont: CGFont, 
_ size: CGFloat, 
_ matrix: UnsafePointer?, 
_ attributes: CTFontDescriptor?) -> CTFont
创建字体属性字符串
0 1
Core Text 布局引擎通常使用属性字符串 ( CFAttributedStringRef) 和图形路径 ( CGPathRef)。属性字符串对
象封装了支持显示文本的字符串，并包括定义字符串中字符的风格方面的属性（或“属性”）
CFMutableAttributedStringRef attributeRef = CFAttributedStringCreateMutable(kCFAllocatorDefault, 0);
void CFAttributedStringSetAttribute(CFMutableAttributedStringRef attributeRef , CFRange range, CFStringRef 
attrName, CFTypeRef value);
从属性字符串创建一个不可变的 framesetter 对象
0 1
CTFramesetter是CTFrame对象的对象工厂。
framesetter 接受一个属性字符串对象和一个形状描述符对象，并调用排版器来创建填充该形状
的线条对象。输出是一个包含行数组的框架对象。然后框架可以将自身直接绘制到当前图形上
下文中。
func CTFramesetterCreateWithAttributedString(_ attrString: CFAttributedString) -> CTFramesetter
其他处理属性api：
0 1
1、CTLine ：
一个CTLine对象包含一组字形运行。Line 对象由排版员在框架设置操作期间创建，并且可以将其自身直接绘
制到图形上下文中。
CTLineCreateWithAttributedString、CTLineDraw
2、CTTypesetter：
一个排版机，执行线路布局。
CTTypesetterCreateWithAttributedString
3、CTGlyphInfo：
覆盖字体从 Unicode 到字形 ID 的指定映射。
CTGlyphInfoCreateWithGlyph
CTRunDraw
google 轻量级动态插装库TinyInst
0 1
TinyInst 可在 Windows（32 位和 64 位）和 macOS（64 位）上使用，很快就有人将TinyInst移植到了
afl中，TinyInst主要是以inter xen为反汇编引擎为主做的指令级解析
fuzzing 进阶：
Formartfuzzer + AFL + TinyInst ?   ->  apple font frame
fuzzing start 
条件：
0 1
1、自动启动和关闭；
2、产生畸形数据
3、可以检测crash与保存crash
4、可以获取程序路径覆盖率
2 x 24h fuzzing  测试后....
1 crash get .....
0 1
core text ttf越界写：
0 1
阶段性总结
0 1
Formartfuzzer 优缺点
1、可以依照改造的010 bt模板生成新的ttf字体（优点）
2、生成的数据过于随机化，细化度不够，缺乏可靠性
3、数据结构过于单一等
挖洞的思考：同样的fuzzing挖不同的攻击面，不同的fuzzing挖相同的攻击面，畸形数据多样性与可
靠性
PART
04
0 2
升级！fuzzing的探索与改
造
对比前：
0 1
aflsmart通过调用peach对输入图片数据进行解析->生成chunk数据，对chunk数据进行算法的变异，生成新的
有效畸形数据，对比Formartfuzzer通过定义010的bt版本模板，根据模板生成畸形数据，再加上算法对畸形
数据再一次变异
提出想法：
0 1
生成结构树，而结构树保存了输入字体的结构序列
输入ttf数
据
解析
生成
结构
树
结构树变异
生成新的
结构序列
的结构树
解析结构树，填
充数据
生
成
畸形
ttf
对比后：
0 1
aflsmart
输入
样本
peach解析
chunk数据
算法变异
畸形
数据
Formatfuzzer
输入
样本
生成结构树
模板生成器
结构树的作用？
1、通过依靠可用字体结构序列解决了Formartfuzzer依据bt模板生成数据的不可靠性，比如可以
解决SHORT、LONG、LONG LONG随机性过大造成实际数据的无效
2、通过提取了输入了有效字体的结构序列，可直接增强生成样本的多样性
3、可变异的结构序列
4、减轻bt模板对offset、length的计算等等
0 1
生成结构树：
结构树必须包含主要9个table的支持
0 1
结构树格式：
0 1
1、结构体成员： 1 -> 有此成员；0 ->  无
2、结构体子类数据:  1 : type :  data
if(data)
{
1:type D: data
}
else
{
0
}
结构树格式：
0 1
3、结构体父类到子类: 1 : type struc struc
numberofContours -> endPtsOfContours[numberofContours ]
4、结构体子类到固定值: 1 :xxxxtype  data
5、结构体父类到子类数组 4:type numb  number
结构树视图：
Table表如下：
Head、 cmap、glyf 等等
0 1
ttf字体结构中的glyf
0 1
ttf字体结构中的cmap
0 1
0 1
提取结构树：
输入大量字体->结构树
重组与生成
两种生成方式：1、按照结构树去生成； 2、根据提供的结构树和具体
数据表来生成字体
变异：
1、对结构树变异->生成字体。
2、采用afl 算法对生成字体变异
和aflsmart统称 结构感知fuzzing
fuzzing 升级与探索：
Formartfuzzer + AFL + TinyInst  + 结构树 ?   ->  apple font frame
fuzzing start 
条件：
0 1
1、自动启动和关闭；
2、产生畸形数据
3、可以检测crash与保存crash
4、可以获取程序路径覆盖率
5、输入语料库进行解析生成结构树
PART
05
0 2
继续fuzzing，收获漏洞！
收集ttf字体语料库
0 1
1、爬虫
爬虫网站主要是 ：一些国外的字体网站 ：www.dafont.com、www.fontsquirrel.com、
www.myfonts.com等
2、历史字体issue crash 
3、云网盘下载字体集合
结果：2w+字体
策略 结构树总结
0 1
1、字体到结构树的生成
2、结构树结构序列化文件变异
3、ttf table拆分原始数据分类保存
4、结构树结构序列化ttf table拆分
5、拆分的ttf table重组等
6、afl 算法的加持
反复筛选与测试和重复率比对的fuzzing等等工作
0 1
最终整个工程fuzzing之旅收获约7个bugs
结果
0 1
对fuzzing的探索之旅还未结束，也许只是才开始.......
0 1
工程涉及部分源文件和poc可以在以下地址找到：
https://github.com/sunglinl/ttffuzz
0 1
M        A        N        O        E        U        V        R        E
感谢观看！
KCon 汇聚黑客的智慧