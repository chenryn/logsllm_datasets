# Hash-based IP Traceback

**Authors:**
- Alex C. Snoeren†
- Craig Partridge
- Luis A. Sanchez‡
- Christine E. Jones
- Fabrice Tchakountio
- Stephen T. Kent
- W. Timothy Strayer

**Affiliation:**
BBN Technologies  
10 Moulton Street, Cambridge, MA 02138  
Emails: {snoeren, craig, cej, ftchakou, kent, strayer}@bbn.com

**Abstract:**
The design of the IP protocol makes it difficult to reliably identify the originator of an IP packet. Even without deliberate attempts to disguise a packet’s origin, widespread packet forwarding techniques such as NAT and encapsulation can obscure the true source. While methods have been developed to determine the source of large packet flows, no system has yet been presented that can efficiently and scalably track individual packets.

We present a hash-based technique for IP traceback that generates audit trails for network traffic and can trace the origin of a single IP packet delivered by the network in the recent past. We demonstrate that the system is effective, space-efficient (requiring approximately 0.5% of the link capacity per unit time in storage), and implementable in current or next-generation routing hardware. We provide both analytical and simulation results to show the system's effectiveness.

**1. Introduction**

Today’s Internet infrastructure is highly vulnerable to motivated and well-equipped attackers. Tools are readily available, from covertly exchanged exploit programs to publicly released vulnerability assessment software, which can degrade performance or even disable vital network services. The consequences are serious and increasingly financially disastrous, as evidenced by frequent headlines naming the latest victims of attacks.

† Alex C. Snoeren is also with the MIT Laboratory for Computer Science (PI:EMAIL).  
‡ Luis A. Sanchez was with BBN Technologies; he is now with Megisto Systems, Inc. (PI:EMAIL).

This work was sponsored by the Defense Advanced Research Projects Agency (DARPA) under contract No. N66001-00-C-8038. The views and conclusions in this document are those of the authors and should not be interpreted as representing official policies, either expressed or implied.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage, and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.

**SIGCOMM’01, August 27-31, 2001, San Diego, California, USA.**  
Copyright 2001 ACM 1-58113-411-8/01/0008...$5.00

While distributed denial of service (DDoS) attacks, typically conducted by flooding network links with large amounts of traffic, are the most widely reported, other forms of network attacks exist. Many classes of attacks can be conducted with significantly smaller packet flows. In fact, there are numerous widely-deployed operating systems and routers that can be disabled by a single well-targeted packet [13]. To ensure accountability for these attacks, the source of individual packets must be identified.

Unfortunately, the anonymous nature of the IP protocol makes it challenging to accurately identify the true source of an IP datagram if the source wishes to conceal it. The network routing infrastructure is stateless and based largely on destination addresses; no entity in an IP network is officially responsible for ensuring the source address is correct. Many routers employ ingress filtering [9] to limit source addresses of IP datagrams from a stub network to addresses belonging to that network, but not all routers have the resources to examine the source address of each incoming packet. Furthermore, spoofed source addresses are legitimately used by network address translators (NATs), Mobile IP, and various unidirectional link technologies such as hybrid satellite architectures.

Accordingly, a well-placed attacker can generate offending IP packets that appear to have originated from almost anywhere. While techniques like ingress filtering increase the difficulty of mounting an attack, transit networks depend on their peers to perform appropriate filtering. This interdependence is clearly unacceptable from a liability perspective; each motivated network must be able to secure itself independently.

Systems that can reliably trace individual packets back to their sources are a critical first step in making attackers (or at least the systems they use) accountable. Constructing such a tracing system involves several significant challenges, including determining which packets to trace, maintaining privacy, and minimizing cost (both in router time spent tracking rather than forwarding packets, and in storage used to keep information).

We have developed the Source Path Isolation Engine (SPIE) to enable IP traceback, the ability to identify the source of a particular IP packet given a copy of the packet, its destination, and an approximate time of receipt. Historically, tracing individual packets has required prohibitive amounts of memory. One of SPIE’s key innovations is to reduce the memory requirement (down to 0.5% of link bandwidth per unit time) through the use of Bloom filters. By storing only packet digests, and not the packets themselves, SPIE also does not increase a network’s vulnerability to eavesdropping. Therefore, SPIE allows routers to efficiently determine if they forwarded a particular packet within a specified time interval while maintaining the privacy of unrelated traffic.

The rest of this paper examines SPIE in detail. We begin by defining the problem of IP traceback in section 2 and articulating the desired features of a traceback system. We survey previous work in section 3, relating their feature sets against our requirements. Section 4 describes the digesting process in detail. Section 5 presents an overview of the SPIE architecture, while section 6 offers a practical implementation of the concepts. Section 7 provides both analytical and simulation results evaluating SPIE’s traceback success rates. We discuss the issues involved in deploying SPIE in section 8 before concluding in section 9 with a brief look at future work.

**2. IP Traceback**

The concept of IP traceback is not yet well-defined. In an attempt to clarify the context in which SPIE was developed, this section presents a detailed and formal definition of traceback. We hope that presenting a strawman definition of traceback will help the community better evaluate different traceback schemes.

In order to remain consistent with the terminology in the literature, we will consider a packet of interest to be nefarious and term it an "attack packet"; similarly, the destination of the packet is a "victim." However, there are many reasons to trace the source of a packet, and many packets of interest are sent with no ill intent whatsoever.

**2.1 Assumptions**

There are several important assumptions that a traceback system should make about a network and the traffic it carries:

- **Packets may be addressed to more than one physical host.**
- **Duplicate packets may exist in the network.**
- **Routers may be subverted, but not often.**
- **Attackers are aware they are being traced.**
- **The routing behavior of the network may be unstable.**
- **The packet size should not grow as a result of tracing.**
- **End hosts may be resource-constrained.**
- **Traceback is an infrequent operation.**

The first two assumptions are characteristics of the Internet Protocol. IP packets may contain a multicast or broadcast address as their destination, causing the routing infrastructure to duplicate them internally. An attacker can also inject multiple, identical packets, possibly at multiple locations. A tracing system must be prepared for a situation where there are multiple sources of the same (identical) packet, or a single source of multiple (also typically identical) packets.

The next two assumptions speak to the capabilities of the attacker(s). An attacker may gain access to routers along (or adjacent to) the path from attacker to victim by various means. Further, a sophisticated attacker is aware of the characteristics of the network, including the possibility that the network is capable of tracing an attack. The traceback system must not be confounded by a motivated attacker who subverts a router with the intent to subvert the tracing system.

The instability of Internet routing is well known [15], and its implications for tracing are important. Two packets sent by the same host to the same destination may traverse wildly different paths. As a result, any system that seeks to determine origins using multi-packet analysis techniques must be prepared to make sense of divergent path information.

The assumption that the packet size should not grow is probably the most controversial. There are several protocols today that cause the packet size to grow, such as technologies that rely on IP tunnels, like IPsec and Mobile IP. However, increasing the packet size causes MTU problems and increases overhead sharply (each byte of additional overhead reduces system bandwidth by about 1%, given the average packet size of about 128 bytes). It follows that an efficient traceback system should not cause packet size to grow.

We assume that an end host, and in particular the victim of an attack, may be resource-poor and unable to maintain substantial additional administrative state regarding the routing state or the packets it has previously received. This assumption comes from the observed rise in special-purpose devices such as microscopes, cameras, and printers that are attached to the Internet but have few internal resources other than those devoted to performing their primary task.

The final assumption that traceback queries are infrequent has important design implications. It implies queries can be handled by a router’s control path and need not be dealt with on the forwarding path at line speed. While there may be auditing tasks associated with packet forwarding to support traceback that must be executed while forwarding, the processing of the audit trails is infrequent with respect to their generation.

**2.2 The Goal**

Ideally, a traceback system should be able to identify the source of any piece of data sent across the network. In an IP framework, the packet is the smallest atomic unit of data. Any smaller division of data (a byte, for instance) is contained within a unique packet. Hence, an optimal IP traceback system would precisely identify the source of an arbitrary IP packet. Any larger data unit or stream can be isolated by searching for any particular packet containing data within the stream.

As with any auditing system, a traceback system can only be effective in networks in which it has been deployed. Hence, we consider the source of a packet to be one of:

- The ingress point to the traceback-enabled network.
- The actual host or network of origin.
- One or more compromised routers within the enabled network.

If one assumes that any router along the path may be co-opted to assist in concealing a packet’s source, it becomes obvious that one must attempt to discern not only the packet’s source but its entire path through the network. If a path can be traced through any number of non-subverted routers, then it must terminate at either the source of the flow or pass through a subverted router, which can be considered a co-conspirator and treated appropriately. Hence, we are interested in constructing an attack path, where the path consists of each router traversed by the packet on its journey from source to the victim. Because conspiring routers can fabricate trace information, the path can only be guaranteed to be accurate on the portion from the victim to the first source—multiple sources may be identified if routers are subverted. Further, since multiple, indistinguishable packets may be injected into the network from different sources in the general case, a traceback system should construct an attack graph composed of the attack paths for every instance of the attack packet that arrived at the victim. Figure 1 depicts the network as viewed by the victim and a particular attack graph for that victim.

An attack graph may contain false positives in the presence of subverted routers; that is, the attack graph may identify sources that did not actually emit the packet. We argue this is an unavoidable consequence of admitting the possibility of subverted routers. An ideal traceback system, however, produces no false negatives while attempting to minimize false positives; it must never exonerate an attacker by not including the attacker in the attack graph.

Further, when a traceback system is deployed, it must not reduce the privacy of IP communications. In particular, entities not involved in the generation, forwarding, or receipt of the original packet should not be able to gain access to packet contents by either utilizing or as part of participating in the IP traceback system. An ideal IP traceback system must not expand the eavesdropping capabilities of a malicious party.

**2.3 Transformations**

It is important to note that packets may be modified during the forwarding process. In addition to the standard decrementing of the time to live (TTL) field and checksum recomputation, IP packets may be further transformed by intermediate routers. Packet transformation may be the result of valid processing, router error, or malicious intent. A traceback system need not concern itself with packet transformations resulting from error or malicious behavior. Packets resulting from such transformations only need to be traced to the point of transformation, as the transforming node either needs to be fixed or can be considered a co-conspirator. An optimum traceback system should trace packets through valid transformations back to the source of the original packet.

Valid packet transformations are defined as a change of packet state that allows for or enhances network data delivery. Transformations occur due to such reasons as hardware needs, network management, protocol requirements, and source request. Based on the transform produced, packet transformations are categorized as follows:

1. **Packet Encapsulation:** A new packet is generated in which the original packet is encapsulated as the payload (e.g., IPsec). The new packet is forwarded to an intermediate destination for de-encapsulation.
2. **Packet Generation:** One or more packets are generated as a direct result of an action by the router on the original packet (e.g., an ICMP Echo Reply sent in response to an ICMP Echo Request). The new packets are forwarded and processed independently of the original packet.

Common packet transformations include those performed by RFC 1812-compliant routers [1] such as packet fragmentation, IP option processing, ICMP processing, and packet duplication. Network address translation (NAT) and both IP-in-IP and IPsec tunneling are also notable forms of packet transformation. Many of these transformations result in an irrecoverable loss of the original packet state due to the stateless nature of IP networks.

A study of wide-area traffic patterns conducted by the Cooperative Association for Internet Data Analysis (CAIDA) found less than 3% of IP traffic undergoes common transformation and IP tunneling [12]. While this study did not encompass all forms of transformation (NAT processing being a notable omission), it seems safe to assume that packet transformations account for a relatively small fraction of the overall IP traffic traversing the Internet today. However, attackers may transmit packets engineered to experience transformation. The ability to trace packets that undergo transformation is, therefore, an essential feature of any viable traceback system.

**3. Related Work**

There are two approaches to the problem of determining the route of a packet flow: one can audit the flow as it traverses the network, or one can reconstruct the path after the fact. Both approaches have their strengths and weaknesses, and we will discuss how SPIE fits into this landscape in the following sections.