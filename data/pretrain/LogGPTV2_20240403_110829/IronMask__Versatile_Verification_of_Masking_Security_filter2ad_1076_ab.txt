an output ((cid:2)y1, . . . , (cid:2)ym) ∈ (K
(cid:6)
n)m such that
(cid:2) → K
(cid:5)(cid:3)
(cid:4)
(cid:3)
LinDec((cid:2)xi)
1≤i≤(cid:2)
LinDec((cid:2)yi)
1≤i≤m = g
with probability 1 over the internal randomness of G.
For any wire on a randomized arithmetic circuit, we shall
call a probe on this wire, the symbolic expression of the circuit
inputs (shares) and the generated randoms (outputs of random
gates) associated to this wire.
In the following, we shall say that a tuple (cid:2)P of symbolic
. . . , (cid:2)x(cid:2) (of size n) and
expressions of input sharings (cid:2)x1,
randomness (cid:2)r (of size ρ) can be perfectly simulated from (cid:2)x1|I1,
. . . , (cid:2)x(cid:2)|I(cid:2) if and only if for any distributions D(cid:3)x1, . . . , D(cid:3)x(cid:2) over
n there exists a probabilistic algorithm S (the simulator) such
that given (cid:2)x1 ← D(cid:3)x1, . . . , (cid:2)x(cid:2) ← D(cid:3)x(cid:2), (cid:2)r ← K
ρ, we have
K
S((cid:2)x1|I1 , . . . , (cid:2)x(cid:2)|I(cid:2) )
id
= eval (cid:3)P ((cid:2)x1, . . . , (cid:2)x(cid:2), (cid:2)r) ,
(1)
where ← means randomly sampling from a set or a distribu-
tion, id
= means identically distributed and eval (cid:3)P is the function
which outputs an evaluation of the symbolic expressions in (cid:2)P
from its arguments.
B. Security Notions
To be composed in secure circuits, gadgets are generally
expected to satisfy slightly stronger security notions than
(random) probing security2. In a nutshell, security proofs
generally demonstrate that the observations made on a gadget
and/or on its output shares can be perfectly simulated from a
subset of its input shares. If this subset is strictly smaller than
the set of input shares and if the sharing is uniform (which
is the case in tight masking circuits), then the observations
can be simulated independently from the secrets and are
therefore independent from the secret. Such properties also
make it possible to compose secure gadgets by analyzing the
propagation of the simulated observations.
Although many different security notions have been intro-
duced to build proofs of gadgets in the (random) probing
model, we show that they can almost all be deﬁned on top of
a single building block: the set of input shares (SIS) function.
The latter takes as input a set of probes on internal wires
of the gadget as well as a set of output shares, and returns
a set of input shares necessary (and sufﬁcient) to perfectly
simulate these internal probes and output shares. We formalize
the SIS primitive in Deﬁnition 1 before showing how to use it
to express state-of-the-art properties. For the sake of clarity, we
restrain the following deﬁnitions to the case of single output
2Although some composition rules were established directly between prob-
ing secure gadgets (e.g., [15]), their scope remains limited.
gadgets (which is the most common case), but the extension
to multi-output gadgets is straightforward. We denote SISG to
be SIS with input gadget G.
Deﬁnition 1. Let G be an (n-share, (cid:3)-to-1) gadget mapping
(cid:3) input sharings ((cid:2)x1, . . . , (cid:2)x(cid:2)) ∈ (K
n)(cid:2) to an output sharing
(cid:2)y ∈ K
n. Let (cid:2)P be a set of probes on G and O ⊆ [n] a
set of output indices. The function SISG maps (cid:2)P and O to
the unique smallest sets of input indices I1, . . . , I(cid:2) such that
( (cid:2)P , (cid:2)y|O) can be perfectly simulated from (cid:2)x1|I1 , . . . , (cid:2)x(cid:2)|I(cid:2).
Note that for any gadget G, the smallest set of input shares
returned by SISG is uniquely deﬁned from the result [11,
Lemma 7.5], which demonstrates that if a set of probes can
be simulated from different sets of inputs shares, then it can
also be simulated by the intersection of these sets.
Probing security notions. We now formalize the probing-
like security notions (i.e.,
to achieve security and secure
composition in the probing model) for any n-share, (cid:3)-to-1
gadget G (all these notions can be generalized for the case
of multiple outputs). Deﬁnition 2 recalls the non-interference
(NI) property from [6].
Deﬁnition 2 (t-NI). A gadget G is t-NI if for any tuple (cid:2)P of
t1 internal probes and any set O of t2 output share indices
such that t1 + t2 ≤ t, the sets (I1, . . . I(cid:2)) := SISG( (cid:2)P , O)
satisfy |Ii| ≤ t, ∀i ∈ [(cid:3)].
Other common probing-like properties can be deﬁned in a
similar way by changing the condition on the sets (I1, . . . , I(cid:2))
in the output of the SISG primitive. We list these conditions in
Table I for some of the most common probing-like properties,
with respect to t and O. While most of the properties are
interesting in the context of composing secure gadgets to
achieve global security, directly verifying the probing security
of a complete implementation is useful in some cases, such
as analyzing a complete 2-share AES implementation. To
represent this case, we denote PS(cid:5) the SIS-based probing
security deﬁnition. PS(cid:5) is actually equivalent to the case of
(n − 1)-NI with O = ∅ and t = n − 1. We list this property
in Table I as well.
TABLE I: Probing-like security notions from the basic prim-
itive SISG. t1 indicates the number of probes on input and
intermediate variables, while t2 indicates the number of probes
on output shares, with t = t1 + t2.
Notion
t-NI [5]
t-SNI [6]
t-TNI [11]
(t, f )-NI [4]
t-PINI [20]
PS(cid:2)
Condition
|Ii| ≤ t, ∀i ∈ [(cid:2)]
|Ii| ≤ t1, ∀i ∈ [(cid:2)]
|Ii| ≤ t1 + t2, ∀i ∈ [(cid:2)]
|Ii| ≤ f (t1, t2), ∀i ∈ [(cid:2)]
|(∪iIi) \ O| ≤ t1
|Ii| ≤ n − 1, ∀i ∈ [(cid:2)]
Because the probing model is often criticized as it fails
to reﬂect the reality of embedded systems (see for instance
horizontal attacks [9]), the community recently started to study
the random probing model. Despite its complexity compared
to the simple probing model, the random probing model was
3
144
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
shown to be closer to the more realistic noisy leakage model,
reducing the gap between theoretical proofs and concrete
observations.
Random probing security notions. To formalize security
notions in the random probing model, we rely on the
LeakingWires procedure formalized in [13]. This (probabilis-
tic) procedure outputs a tuple of probes (cid:2)P on the gadget G
such that each wire of G is added to (cid:2)P independently with
probability p, where p is the leakage probability (a.k.a. leakage
rate). Deﬁnition 3 recalls the random probing composability
(RPC) notion [13] based on the SIS primitive.
Deﬁnition 3. Let p, ε ∈ [0, 1] and n, t ∈ [0, n]. Let G be a n-
share (cid:3)-to-1 gadget and let (cid:2)P be the random vector deﬁned as
(cid:2)P = LeakingWires(G, p). Then G is (t, p, ε)-RPC if for every
O ⊆ [n] with |O| = t, the sets (I1, . . . , I(cid:2)) = SISG( (cid:2)P , O)
satisfy Pr[(|I1| > t) ∨ . . . ∨ (|I(cid:2)| > t)] ≤ ε, where the
tuples of probes (cid:2)P obtained
probability is taken over all
through LeakingWires(G, p).
(|I1| > t)∨. . .∨(|I(cid:2)| > t)
We call the event
a failure event
(failure of a perfect simulation) and ε is the failure probability
or the probability of a failure event to occur. The random
probing expandability (RPE) notions introduced and analyzed
in [13], [16] can also be deﬁned in a similar fashion. Like
the authors of [13], [16], we restrict its deﬁnition to 2-input
circuits for the sake of clarity but recall that the extension is
straightforward. We have that G is (t, p, ε)-RPE1 (resp. RPE2)
if for every O ⊆ [n] with |O| = t (resp. if there exists O ⊆ [n]
with |O| = n − 1), the sets (I1, I2) = SISG( (cid:2)P , O) satisfy
(cid:3)
(cid:3)
(cid:4)
(cid:4) ∧ (cid:3)
(cid:4)
Pr[(|I1| > t) ∧ (|I2| > t)] ≤ ε2
Pr[|I2| > t] ≤ ε
(cid:4)
Pr[|I2| > t] ≤ ε
∧ (cid:3)
.
The three random probing notions are summarized in Table II.
As in the probing security case earlier, it can be useful to
directly verify the random probing security of a complete
implementation. To represent this case, we denote (p, ε)-RPS(cid:5)
the SIS-based deﬁnition of random probing security. This
notion is actually similar to the RPC deﬁnition, except that
we do not consider probes on the outputs, i.e. O = ∅, and a
failure occurs when all the shares (of one input) are necessary
to perfectly simulate the probes, i.e. the failure event is
Pr[(|I1| = n) ∨ . . . ∨ (|I(cid:2)| = n)] ≤ ε .
In [13], the authors introduce a method to verify random
probing properties by computing the failure probability ε as
a function f (p) of the leakage probability p. For (p, ε)-RPS(cid:5)
of an n-share gadget of s wires for example, ε = f (p) is
computed as
(cid:7)
f (p) =
(cid:3)P s.t. (I1,...,I(cid:2))=SIS( (cid:3)P ,∅)
|I1|=n ∨...∨ |I(cid:2)|=n
| (cid:3)P|
(1 − p)s−| (cid:3)P|
p
.
(2)
since each of the wires in (cid:2)P is added independently with
probability p, and each of the remaining wires does not leak
with probability 1 − p. Then, out of all such possible tuples
of wires, f (p) represents the sum over the probabilities of
obtaining tuples of probes only for which we get a failure event
using SIS (the failure event being (|I1| = n ∨ . . .∨ |I(cid:2)| = n)
in this context). For a gadget with a total of s wires, computing
f (p) then amounts to computing
s(cid:7)
f (p) =
i=1
ci pi(1 − p)s−i
(3)
where we simply group the probabilities with respect to the
size of the tuples of probes. In other words, ci is the number
of tuples of i wires, for which we obtain a failure event using
SIS. For instance, if there are exactly 2 tuples of probes (cid:2)P1, (cid:2)P2
for which we get a failure event and such that | (cid:2)P1| = | (cid:2)P2| = 3,
then we get c3 = 2 in equation (3). For other random probing
properties, the computation is similar with the difference of
considering the correct failure event with the correct t, and the
condition on the output set of shares O which is not empty
anymore. As shown in [13], a set of (t, p, ε)-RPE gadgets with
ε = f (p) can be expanded into a probing secure circuit (with
arbitrary security level) for any leakage probability smaller
than pmax, with pmax ∈ [0, 1] being the solution of the
equation f (p) = p. This threshold is called the tolerated
leakage probability of the gadgets.
The recent Probe Distribution Table (PDT) of Cassiers et
al. [19] can also be expressed in terms of our basic function
SISG. The PDT is a two-dimensional table indexed by all
possible sets of input indices (cid:2)I = (I1, . . . , I(cid:2)) where Ii ⊆ [n]
and by all possible sets of output indices O ⊆ [n], deﬁned as
(4)
(1 − p)s−| (cid:3)P|
PDT[(cid:2)I ][O] :=
(cid:7)
| (cid:3)P|
p
(cid:3)P s.t. (cid:3)I=SIS( (cid:3)P ,O)
where s is the number of wires in G. In other words,
each entry in the PDT is a different function f (p) as in
equations (2), (3). Computing the PDT amounts to considering
each possible tuple of probes (cid:2)P on the gadget, and compute
SISG( (cid:2)P , O) = (cid:2)I = (I1, . . . , I(cid:2)) for each possible set of
output shares indices O ⊆ [n]. Then, update the corresponding
function in the PDT indexed by (cid:2)I and O as PDT[(cid:2)I ][O] =
(1−p)s−| (cid:3)P|. When exploring all the possible
PDT[(cid:2)I ][O] + p
sets of internal probes (cid:2)P and all the sets of output indices
O, the output of SISG shall serve as a basis to compute the
expected distributions.
| (cid:3)P|
We showed how standard probing and random probing se-
curity notions can be expressed in terms of the SISG function.
In the next section, we focus on the algebraic characterization
of masking gadgets and the concrete evaluation of the SISG
function.
III. ALGEBRAIC CHARACTERIZATION OF MASKING
GADGETS
In the above equation, we consider that each tuple of probes (cid:2)P
(1− p)s−| (cid:3)P|
on a gadget can exactly leak with probability p
| (cid:3)P|
In this section, we recall and extend the algebraic characteri-
zation of masking gadgets, and the subsequent security results.
4
145
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:23:26 UTC from IEEE Xplore.  Restrictions apply. 
TABLE II: Random probing-like security notions from the basic primitive SISG.
Notion
(t, p, ε)-RPC [13]
(t, p, ε)-RPE1 [13]
(t, p, ε)-RPE2 [13]
(p, ε)-RPS(cid:2)
Output O
∀ O, |O| = t
∀ O, |O| = t
∃O, |O| = n − 1
O = ∅
(cid:2)∀i, Pr[(|Ii| > t)] ≤ ε
(cid:2)∀i, Pr[(|Ii| > t)] ≤ ε
Pr[(|I1| > t) ∨ . . . ∨ (|I(cid:3)| > t)] ≤ ε
Condition(s)
(cid:3) ∧ (cid:2)
(cid:3) ∧ (cid:2)
Pr[(|I1| > t) ∧ (|I2| > t)] ≤ ε2
Pr[(|I1| > t) ∧ (|I2| > t)] ≤ ε2
(cid:3)
(cid:3)
Pr[(|I1| = n) ∨ . . . ∨ (|I(cid:3)| = n)] ≤ ε
Previous works [11], [12] considered gadgets with linear
randomness, i.e. all random values are additive on the wires
of the gadget. We refer to these gadgets as LR-gadgets (see
for instance multiplications and refresh gadgets from [31]).
In this work, we extend the characterization to gadgets with
non-linear randomness, i.e. on gadget performing non-linear
operations on input shares mixed with randomness. We denote
these gadgets as NLR-gadgets. Our extended characterization
notably captures recent gadget designs, see e.g. [9], [16],
achieving advanced security properties such as resistance to
horizontal attacks or random probing security. We also show
how to verify the security of masking gadgets using this
algebraic characterization by a concrete evaluation of the SIS
primitive, which will be the core primitive of IronMask.
A. Characterization of Gadgets with Linear Randomness
((cid:2)x1, . . . , (cid:2)x(cid:2)) (cid:8)→ ((cid:2)y1, . . . , (cid:2)ym) with the output of the form:
In this paper, we call an LR-gadget any (cid:3)-to-m gadget G :
(cid:3)
(cid:4)
((cid:2)y1, . . . , (cid:2)ym) := R
F ((cid:2)x1, . . . , (cid:2)x(cid:2)), (cid:2)r
,
where F is any arithmetic circuit, R is a linear arithmetic
circuit (i.e. computing a linear function) and (cid:2)r is a vector of
ρ. Formally, each
internal randomness uniformly drawn from K
coordinate of (cid:2)r is the output of a randomness gate of G, and
F and R are composed solely of operation gates. Note that
this characterization is more general than the one from [11],
[12], which only considers quadratic circuits for F . We show
hereafter that we can still obtain an efﬁcient and complete
evaluation of SIS for those gadgets, which in turn yields an
efﬁcient veriﬁcation of the considered security notions.
By deﬁnition, any probe on an LR-gadget can be written as
p = fp((cid:2)x1, . . . , (cid:2)x(cid:2)) + (cid:2)r
for some arithmetic function fp : (K
constant vector (cid:2)sp ∈ K
ρ.
T · (cid:2)sp
(5)
n)(cid:2) → K and some
Given a tuple of probes (cid:2)P = (p1, . . . , pd) on the gadget
G, we are interested in determining the set of input shares
necessary for a perfect simulation of all probes in (cid:2)P . In
particular, if (cid:2)P can be simulated with at most n − 1 of each
input sharing, then we know that (cid:2)P is independent of the
secret inputs. Bela¨ıd et al. [11] showed how to use a Gaussian
elimination technique in order to determine the simulatability
of a tuple of probes for gadgets with linear randomness over
the binary ﬁeld. This technique was later extended to any
ﬁnite ﬁeld in [12]. We base the veriﬁcation procedure for LR-
gadgets in our tool on this technique.
We start by stating the result with Gaussian elimination
from [11], [12] in a different formulation that is more conve-
nient for our purposes. For this, we ﬁrst deﬁne a simple func-
tion shares(.), which takes as input a tuple of symbolic expres-
sions (e1, . . . , ed) of the input shares, i.e. ei = fei ((cid:2)x1, . . . , (cid:2)x(cid:2))
for some algebraic function fei, and which outputs the (small-
est) sets of indices I1, . . . , I(cid:2) such that (e1, . . . , ed) func-
tionally depends on ((cid:2)x1|I1 , . . . , (cid:2)x(cid:2)|I(cid:2) ). Notice that evaluating
shares(.) simply consists in extracting the indices of the
input shares that are contained in the symbolic expressions
(e1, . . . , ed). We stress that the input shares ((cid:2)x1|I1 , . . . , (cid:2)x(cid:2)|I(cid:2) )
where (I1, . . . , I(cid:2)) := shares(e1, . . . , ed) are necessary and
sufﬁcient for a perfect simulation of (e1, . . . , ed). Note that
shares(.) is executed on the tuple of expressions that is the
output tuple of the Gaussian elimination technique. In fact,
after executing the Gaussian elimination, we are guaranteed
that the remaining expressions cannot be simpliﬁed any further
in the given ﬁeld K and they are solely formed of opera-
tions between input shares (they do not include any random
variables). In this case, to perfectly simulate the resulting