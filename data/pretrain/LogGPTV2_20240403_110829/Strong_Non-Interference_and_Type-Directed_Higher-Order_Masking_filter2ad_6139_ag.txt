nonlinear functions in the presence of glitches. Journal of Cryptology, 24(2):292–321, April
2011.
29. Martin Pettai and Peeter Laud. Automatic proofs of privacy of secure multi-party computation
protocols against active adversaries. In C´edric Fournet, Michael W. Hicks, and Luca Vigan`o,
editors, IEEE 28th Computer Security Foundations Symposium, pages 75–89. IEEE Computer
Society, 2015.
30. Emmanuel Prouff and Matthieu Rivain. Masking against side-channel attacks: A formal
security proof. In Thomas Johansson and Phong Q. Nguyen, editors, EUROCRYPT 2013,
volume 7881 of LNCS, pages 142–159. Springer, Heidelberg, May 2013.
31. Matthieu Rivain and Emmanuel Prouff. Provably secure higher-order masking of AES. In
Stefan Mangard and Franc¸ois-Xavier Standaert, editors, CHES 2010, volume 6225 of LNCS,
pages 413–427. Springer, Heidelberg, August 2010.
32. Calogero G. Zarba. Combining sets with cardinals. Journal of Automated Reasoning, 34(1):1–
29, 2005.
33. Steve Zdancewic, Lantian Zheng, Nathaniel Nystrom, and Andrew C. Myers. Untrusted hosts
and conﬁdentiality: Secure program partitioning. In Keith Marzullo and M. Satyanarayanan,
editors, Proceedings of the 18th ACM Symposium on Operating System Principles, pages
1–14. ACM, 2001.
A Code for Gadgets Listed in the Paper
Gadget 7 Masked multiplication [12]
0: function SecMult(a, b)
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
for i = 0 to t do
ci ← ai (cid:12) bi
for i = 0 to t do
for j = i + 1 to t do
r $← K
ci ← ci (cid:9) r
t ← ai (cid:12) bj
r ← r ⊕ t
t ← aj (cid:12) bi
r ← r ⊕ t
cj ← cj ⊕ r
return c
/* line 2i */
/* line 5i,j */
/* line 6i,j */
/* line 7i,j */
/* line 8i,j */
/* line 9i,j */
/* line 10i,j */
/* line 11i,j */
Gadget 8 Masked multiplication between linearly dependent inputs with linear function
g [15]
0: function MultLin(a)
for i = 0 to t do
1:
ci ← ai (cid:12) g(ai)
2:
for i = 0 to t do
3:
for j = i + 1 to t do
4:
r $← K
5:
r(cid:48) $← K
6:
ci ← ci (cid:9) r
7:
t ← ai ⊗ g(r(cid:48)) ⊕ r
8:
t ← t ⊕ (r(cid:48) ⊗ g(ai))
9:
t ← t ⊕ (ai ⊗ g(aj (cid:9) r(cid:48))
10:
t ← t ⊕ ((aj (cid:9) r(cid:48)) ⊗ g(ai))
11:
cj ← cj ⊕ t
12:
13:
/* line 5i,j */
/* line 6i,j */
/* line 7i,j */
/* line 8i,j */
/* line 9i,j */
/* line 10i,j */
/* line 11i,j */
/* line 12i,j */
/* line 2i */
return c
B SNI Veriﬁcation Algorithm
We now give a full description of our algorithm for the veriﬁcation of SNI properties.
Apart from notation changes, the algorithms are only slightly adapted from [4]. In
particular, the proof of correctness for Algorithm 11 can be easily generalized from that
given in [4].
In the following, we consider gadgets whose encoded inputs are all secret and
denoted as a set of encodings {xı}ı. Given a core gadget, the set of all possible positions
in that gadget can be represented as a set E of K expressions over the xi
k and some
random variables in R (corresponding to the random samplings occurring in the gadget).
All algorithms in this subsection consider gadgets represented in this form. Given such a
set E, we denote with var(E) the set of all variables that appear in E, and with Eint and
Eout the subsets that correspond to internal and output positions, respectively.
Following Barthe et al. [4], our algorithm relies, at its core, on exhibiting an isomor-
phism between the distribution of each acceptable set of positions and some distribution
that is syntactically non-interfering. In this case, we consider all sets of positions that
are composed of ti internal positions and to output positions (for any ti and to such
that ti + to ≤ t) and ﬁnd a bijection with some distribution that depends on at most
ti shares of each of the gadget’s inputs. Algorithm 9 takes an integer d and a set E
k and random variables in R and ﬁnds, when successful, a
of expressions over the xi
sequence of substitutions #»
h that construct a bijection between the distribution described
by E and a distribution that syntactically depends on at most d shares of each one of the
xi.
Algorithm 9 Given O, d, ﬁnd I such that (cid:107)I(cid:107) ≤ d for (I,O)-NI
1: function NId{xı}ı(E)
2:
3:
4:
5:
6:
7:
if ∀ı,|var(E) ∩ xı| ≤ d then
return DEGREE(d)
(E(cid:48), e, r) ← choose({(E(cid:48), e, r) | e is invertible in r ∧ r ∈ R ∧ E = E(cid:48)[e/r]})
if (E(cid:48), e, r) (cid:54)= ⊥ then
return OPT(e, r) : NId{xı}ı (E(cid:48))
return ⊥
#»
(X, E,
The fact that Algorithm 9 produces a witness sequence of substitutions can be
leveraged, as in [4], to extend the position set E on which the corresponding bijection
still proves the desired property. Algorithms 10a and 10b leverage this, and are only
lightly adapted (for notation) from Barthe et al. [4]. An important thing to note is that
h ) always returns a set X(cid:48) of expressions such that X ⊆ X(cid:48) ⊆ E
extendd{xı}ı
and such that X(cid:48) depends (by #»
h ) on at most d shares of each one of the xi.
Finally, we adapt the second space-covering algorithm proposed by Barthe et al. [4]
to the veriﬁcation of the t-SNI property, by taking care to call NId with the value of d
that corresponds to the number of internal positions being considered. Algorithm 11
shows the adapted algorithm for the core veriﬁcation task, and Algorithms 12a and 12b
show the instances used to verify that a gadget is t-SNI and t-NI, respectively. Here
again, Algorithm 11 is only lightly adapted from [4] and their correctness proof, which
j Pdj (Ej),
also applies to the new property being veriﬁed. It is then easy to prove that the calls
to checkd made by checkt-SNI and checkt-NI are sufﬁcient to establish t-SNI and t-NI
respectively (relying on Lemma 3 for t-NI).
establishes that whatever property is checked by NId is true for all sets in(cid:83)
Algorithm 10 Auxiliary algorithms for SNI veriﬁcation
#»
#»
h )
h(cid:48) then
function recheckd{xı}ı(E,
if #»
h = [DEGREE(d)] then
return ∀ı,|var(E) ∩ xı| ≤ d
if #»
h = OPT(e, r) :
(E(cid:48)) ← choose({E(cid:48) | E = E(cid:48)[e/r]})
if E(cid:48) (cid:54)= ⊥ then
return recheckd{xı}ı (E(cid:48),
else
return false
(10a) Rechecking a derivation
h (cid:48))
#»
#»
h )
function extendd{xı}ı(X, E,
e ← choose(E)
if e (cid:54)= ⊥ then
if recheckd{xı}ı (e,
return extendd{xı}ı ((X, e), E \ {e},
else return extendd{xı}ı (X, E \ {e},
else return X
h ) then
#»
#»
h )
#»
h )
(10b) Extending the Position Set
#»
if ∀j, dj ≤ |Ej| then
Yj ← choose(Pdj (Ej))
Algorithm 11 Core Algorithm for (I,O)-NI Veriﬁcation
1: function checkd{xı}ı({(dj, Ej)}j)
2:
3:
4:
5:
h ← NId{xı}ı ((cid:83)
h = ⊥ then raise CannotProve ((cid:83)
6: (cid:99)Yj ← extend{xı}ı (Yj, Ej \ Yj,
checkd{xı}ı ({(dj, Ej \(cid:99)Yj)}j)
checkd{xı}ı ({(ij,(cid:99)Yj), (dj − ij, Ej \(cid:99)Yj)})
for j; 0 < ij < dj do
j Yj)
j Yj)
if #»
#»
h )
7:
8:
9:
10:
return true
Algorithm 12 Algorithms for t-SNI and t-NI veriﬁcation
1: function checkt-SNI
for i; 0 ≤ i ≤ t do
2:
checki{xı}ı ({(i, Eint), (t − i, Eout)})
3:
return true
4:
{xı}ı(E)
1: function checkt-NI{xı}ı(E)
checkt{xı}ı ({(t, E)})
2:
return true
3:
(12b) t-NI Veriﬁcation
(12a) t-SNI Veriﬁcation
We also note that Algorithm 11 can be used in other ways, not shown in Algorithm 12,
that would enforce other, perhaps more complex, probing policies. We do not claim
that all probing policies could be easily veriﬁed in this manner (and in fact, the afﬁne
policy could not), and leave as future work an investigation of efﬁcient (or semi-efﬁcient)
algorithms–in this style–for the veriﬁcation of arbitrary probing.
C Proofs