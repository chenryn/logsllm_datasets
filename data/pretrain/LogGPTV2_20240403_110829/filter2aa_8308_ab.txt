      //Call the two ServletContext.log methods
      ServletContext context = getServletContext( );
      if (par == null || par.equals(""))
      //log version with Throwable parameter
      context.log("No message received:",
          new IllegalStateException("Missing parameter"));
      else
          context.log("Here is the visitor's message: " + par);
      response.setContentType("text/html");
      java.io.PrintWriter out = response.getWriter( );
      String title = "Context Log";
      String docType =
      "\n";
      out.println(docType +
        "\n" +
        "" + title + "\n" +
        "\n" +
        "" + title + "\n" +
        "Messages sent\n" +
        "");
    } //doGet
}
```
ServletContext 把它的文本消息记录到 servlet 容器的日志文件中。使用 Tomcat，这些日志可以在 `/logs` 目录中找到。
这些日志文件确实为新出现的错误或问题的频率给出了指示。正因为如此，在通常不会出现的异常 catch 子句中使用 `log()` 函数是很好的。
### 使用 JDB 调试器
你可以使用调试 applet 或应用程序的相同的 jdb 命令来调试 servlet。
为了调试一个 servlet，我们可以调试 sun.servlet.http.HttpServer，然后把它看成是 HttpServer 执行 servlet 来响应来自浏览器端的 HTTP 请求。这与调试 applet 小程序的方式非常相似。与调试 applet 不同的是，被调试的实际程序是 sun.applet.AppletViewer。
大多数调试器会自动隐藏了解如何调试 applet 的细节。直到他们为 servlet 做同样的事情，你必须做以下操作来帮助你的调试器：
* 设置你的调试器的类路径，以便它可以找到 sun.servlet.http.Http-Server 和相关的类。
* 设置你的调试器的类路径，以便它可以找到你的 servlet 和支持的类，通常是在 server_root/servlets 和 server_root/classes 中。
你通常不会希望 server_root/servlets 在你的 classpath 中，因为它会禁用 servlet 的重载。然而这种包含对于调试是有用的。在 HttpServer 中的自定义的 servlet 加载器加载 servlet 之前，它允许你的调试器在 servlet 中设置断点。
一旦你设置了正确的类路径，就可以开始调试 sun.servlet.http.HttpServer。你可以在任何你想要调试的 servlet 中设置断点，然后使用 web 浏览器为给定的 servlet（http://localhost:8080/servlet/ServletToDebug) 向 HttpServer 发出请求。你会看到程序执行到你设置的断点处停止。
#### 使用注释
代码中的注释有助于以各种方式调试程序。注释可用于调试过程中的许多其他方式中。
Servlet 使用 Java 注释，单行注释（//...）和多行注释（/ .../）可用于暂时移除部分 Java 代码。如果 bug 消失，仔细看看你之前注释的代码并找出问题所在。
#### 客户端和服务器端头信息
有时，当一个 servlet 并没有像预期那样工作时，查看原始的 HTTP 请求和响应是非常有用的。如果你对 HTTP 结构很熟悉，你可以阅读请求和响应，看看这些头信息中究竟是什么。
#### 重要的调试技巧
这里是 servlet 调试中的一些调试技巧列表：
* 请注意 server _ root/classes 不会重载，而 server_root/servlets 可能会。
* 要求浏览器显示它所显示的页面的原始内容。这有助于识别格式的问题。它通常是视图菜单下的一个选项。
* 通过强制执行完全重载页面，来确保浏览器还没有缓存前一个请求的输出。在 Netscape Navigator 中，使用 Shift-Reload；在 IE 浏览器中，请使用 Shift-Refresh。
* 确认 servlet 的 `init()` 方法接受一个 ServletConfig 参数并立即调用 `super.init(config)`。
---
## 国际化
在我们继续之前，请让我解释三个重要术语：
* 国际化（i18n）：这意味着网站能够提供翻译成访问者的语言或国籍的不同版本的内容。
* 本地化（l10n）：这意味着向网站添加资源，使其适应特定的地理或文化区域，例如网站翻译成印地语。
* 区域设置：这是一个特殊的文化或地理区域。它通常指语言符号后跟一个由下划线分隔的国家符号。例如 "en_US" 表示 US 的英语区域设置。
当建立一个全球性的网站时有一些注意事项。本教程不会给出完整的细节，但它会通过一个很好的例子向你演示如何通过差异化定位（即区域设置）来让网页以不同的语言呈现。
Servlet 可以根据请求者的区域设置读出相应版本的网站，并根据当地的语言、文化和需求提供相应的网站版本。以下是 request 对象中的方法，它返回了 Locale 对象。
```java
java.util.Locale request.getLocale()
```
### 检测区域设置
下面列出了重要的区域设置方法，你可以使用它们来检测请求者的地理位置、语言和区域设置。下面所有的方法都显示请求者浏览器中设置的国家名称和语言名称。
```
String getCountry()
该方法以 2 个大写字母形式的 ISO 3166 格式返回该区域设置的国家/地区代码。
```
```
String getDisplayCountry()
该方法返回适合向用户显示的区域设置的国家的名称。
```
```
String getLanguage()
该方法以小写字母形式的 ISO 639 格式返回该区域设置的语言代码。
```
```
String getDisplayLanguage()
该方法返回适合向用户显示的区域设置的语言的名称。
```
```
String getISO3Country()
该方法返回该区域设置的国家的三个字母缩写。
```
```
String getISO3Language()
该方法返回该区域设置的语言的三个字母的缩写。
```
这个例子向你演示了如何为一个请求显示语言和相关的国家：
```java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;
public class GetLocale extends HttpServlet{
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
      //Get the client's Locale
      Locale locale = request.getLocale();
      String language = locale.getLanguage();
      String country = locale.getCountry();
      // Set response content type
      response.setContentType("text/html");
      PrintWriter out = response.getWriter();
      String title = "Detecting Locale";
      String docType =
      "\n";
      out.println(docType +
        "\n" +
        "" + title + "\n" +
        "\n" +
        "" + language + "\n" +
        "" + country + "\n" +
        "");
  }
}
```
### 语言设置
Servlet 可以输出以西欧语言编写的页面，如英语、西班牙语、德语、法语、意大利语、荷兰语等。在这里，设置 Content-Language 头信息来正确的显示所有字符是非常重要的。
第二点是使用 HTML 实体显示所有的特殊字符，例如，`&#241;` 表示 "ñ"，`&#161;` 表示 "¡"，如下所示：
```java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;
public class DisplaySpanish extends HttpServlet{
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
    // Set response content type
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    // Set spanish language code.
    response.setHeader("Content-Language", "es");
    String title = "En Espa&ntilde;ol";
    String docType =
     "\n";
     out.println(docType +
     "\n" +
     "" + title + "\n" +
     "\n" +
     "" + "En Espa&ntilde;ol:" + "\n" +
     "" + "&iexcl;Hola Mundo!" + "\n" +
     "");
  }
}
```
### 特定于区域设置的日期
你可以使用 java.text.DateFormat 类及其静态的 `getDateTimeInstance()` 方法来格式化特定于区域设置的日期和时间。下面的例子向你演示了如何格式化特定于一个给定的区域设置的日期：
```java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;
import java.text.DateFormat;
import java.util.Date;
public class DateLocale extends HttpServlet{
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
    // Set response content type
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    //Get the client's Locale
    Locale locale = request.getLocale( );
    String date = DateFormat.getDateTimeInstance(
                                  DateFormat.FULL,
                                  DateFormat.SHORT,
                                  locale).format(new Date( ));
    String title = "Locale Specific Dates";
    String docType =
      "\n";
      out.println(docType +
      "\n" +
      "" + title + "\n" +
      "\n" +
      "" + date + "\n" +
      "");
  }
}
```
### 特定于区域设置的货币
你可以使用 `java.text.NumberFormat` 类及其静态的 `getCurrencyInstance()` 方法来在特定于区域设置的货币中格式化数字，比如 long 类型或 double 类型。下面的例子向你演示了如何格式化特定于一个给定的区域设置的货币：
```java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;
import java.text.NumberFormat;
import java.util.Date;
public class CurrencyLocale extends HttpServlet{
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
    // Set response content type
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    //Get the client's Locale
    Locale locale = request.getLocale( );
    NumberFormat nft = NumberFormat.getCurrencyInstance(locale);
    String formattedCurr = nft.format(1000000);
    String title = "Locale Specific Currency";
    String docType =
      "\n";
      out.println(docType +
      "\n" +
      "" + title + "\n" +
      "\n" +
      "" + formattedCurr + "\n" +
      "");
  }
}
```
### 特定于区域设置的百分比
你可以使用 `java.text.NumberFormat` 类及其静态的 `getPercentInstance()` 方法来格式化特定于区域设置的百分比。下面的例子向你演示了如何格式化特定于一个给定的区域设置的百分比：
```java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import java.util.Locale;
import java.text.NumberFormat;
import java.util.Date;
public class PercentageLocale extends HttpServlet{
  public void doGet(HttpServletRequest request,
                    HttpServletResponse response)
            throws ServletException, IOException
  {
    // Set response content type
    response.setContentType("text/html");
    PrintWriter out = response.getWriter();
    //Get the client's Locale
    Locale locale = request.getLocale( );
    NumberFormat nft = NumberFormat.getPercentInstance(locale);
    String formattedPerc = nft.format(0.51);
    String title = "Locale Specific Percentage";
    String docType =
      "\n";
      out.println(docType +
      "\n" +
      "" + title + "\n" +
      "\n" +
      "" + formattedPerc + "\n" +
      "");
  }
}
```
---
## Source & Reference
- https://wiki.jikexueyuan.com/project/servlet/page-redirect.html
- https://wiki.jikexueyuan.com/project/servlet/hits-counter.html
- https://wiki.jikexueyuan.com/project/servlet/auto-refresh.html
- https://wiki.jikexueyuan.com/project/servlet/packaging.html
- https://wiki.jikexueyuan.com/project/servlet/debugging.html
- https://wiki.jikexueyuan.com/project/servlet/internationalization.html