When attempting to gain code execution in the context of a SIP, one possible code execution
consideration might be to implement malicious logic in a “CryptSIPDllIsMyFileType” component and to
return “FALSE” indicating that other “CryptSIPDllIsMyFileType” and “CryptSIPDllIsMyFileType2”
components should be called to determined which SIP represents the file in question. Do be mindful
however that any weaponization scenario comes with it its own unique set of indicators or compromise
that can be signatured.
One final consideration is that SIP and trust provider DLLs need not have their full path specified in the
registry. If just the SIP or trust provider filename is specified, it is loaded via the standard DLL load order.
This gives an attacker the ability to hijack existing SIP/trust provider DLLs without needing to modify the
registry. For example in Windows 10, the Microsoft Office SIP VBA macro SIP (9FA65764-C36F-4319-
9737-658A34585BB7) is registered (WoW64 only) using only its file name: mso.dll. Additionally, with
- 33 -
only the filename of “mso.dll” specified, there is a potential for a generic DLL load order hijacking
vulnerability to present itself in any code that performs user-mode trust validation.
Subverting CryptoAPI v2 (CAPI) Event Logging
While not enabled by default, enabling the Microsoft-Windows-CAPI2/Operational event log can be a
valuable source of contextual information related to failed trust validation. Any time WinVerifyTrust is
called, EID 81 is generated and events will be populated as error if signature or trust validation fails as a
result of the call. For example, here are the event details associated with a failed trust validation of
“notepad_backdoored.exe” which has a legitimate Microsoft Authenticode digital signature applied to it
(most relevant portions bolded):
- WinVerifyTrust
ActionID {00AAC56B-CD44-11D0-8CC2-00C04FC295EE}
- UIChoice WTD_UI_NONE
[value] 2
- RevocationCheck
[value] 0
- StateAction WTD_STATEACTION_VERIFY
[value] 1
- Flags
[value] 80000000
[CPD_USE_NT5_CHAIN_FLAG] true
- FileInfo
[filePath] C:\Test\notepad_backdoored.exe
[hasFileHandle] true
- DigestInfo
[digestAlgorithm] SHA256
[digest]
4B2392D71DC2C44236EFD9861CACCE54CB53FB68AE0BB29FF467E98DB27FEE80
- RegPolicySetting
[value] 23C00
[WTPF_OFFLINEOK_IND] true
[WTPF_OFFLINEOK_COM] true
[WTPF_OFFLINEOKNBU_IND] true
[WTPF_OFFLINEOKNBU_COM] true
[WTPF_IGNOREREVOCATIONONTS] true
- SignatureSettingsFlags
[value] 20000000
[WSS_OUT_FILE_SUPPORTS_SEAL] true
- SignerInfo
- DigestAlgorithm
[oid] 2.16.840.1.101.3.4.2.1
[hashName] SHA256
- 34 -
- CertificateChain
[chainRef] {8C6B5132-F22D-49F4-B8C7-75B096E56AE5}
- TimestampInfo
[format] RFC 3161
- DigestAlgorithm
[oid] 2.16.840.1.101.3.4.2.1
[hashName] SHA256
SignTime 2017-03-18T20:02:03.777Z
- TimestampChain
[chainRef] {4BB8BB1B-8C68-4A12-87F1-1781D796CE20}
- StepError
[stepID] 32
[stepName] TRUSTERROR_STEP_FINAL_OBJPROV
- Result The digital signature of the object did not verify.
[value] 80096010
- EventAuxInfo
[ProcessName] powershell.exe
- CorrelationAuxInfo
[TaskId] {114F8A0E-3E22-4395-872A-4CD5A857B34C}
[SeqNumber] 9
- Result The digital signature of the object did not verify.
[value] 80096010
The above event is an “Error” event. In this example, if the CryptSIPVerifyIndirectData component of the
portable executable SIP were hijacked, the WinVerifyTrust event would still be logged but as an
“Information” event indicating that trust validation was successful:
- WinVerifyTrust
ActionID {00AAC56B-CD44-11D0-8CC2-00C04FC295EE}
- UIChoice WTD_UI_NONE
[value] 2
- RevocationCheck
[value] 0
- StateAction WTD_STATEACTION_VERIFY
[value] 1
- Flags
[value] 80001080
[WTD_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT] true
[WTD_CACHE_ONLY_URL_RETRIEVAL] true
[CPD_USE_NT5_CHAIN_FLAG] true
- FileInfo
[filePath] C:\Test\notepad_backdoored.exe
[hasFileHandle] true
- DigestInfo
- 35 -
[digestAlgorithm] SHA256
[digest]
4B2392D71DC2C44236EFD9861CACCE54CB53FB68AE0BB29FF467E98DB27FEE80
- RegPolicySetting
[value] 23C00
[WTPF_OFFLINEOK_IND] true
[WTPF_OFFLINEOK_COM] true
[WTPF_OFFLINEOKNBU_IND] true
[WTPF_OFFLINEOKNBU_COM] true
[WTPF_IGNOREREVOCATIONONTS] true
- SignatureSettingsFlags
[value] 20000000
[WSS_OUT_FILE_SUPPORTS_SEAL] true
- SignerInfo
- DigestAlgorithm
[oid] 2.16.840.1.101.3.4.2.1
[hashName] SHA256
- CertificateChain
[chainRef] {BFF90ED0-0277-48F4-9217-DD3A39F331E2}
- TimestampInfo
[format] RFC 3161
- DigestAlgorithm
[oid] 2.16.840.1.101.3.4.2.1
[hashName] SHA256
SignTime 2017-03-18T20:02:03.777Z
- TimestampChain
[chainRef] {9A4340F3-6A10-47E7-ACB6-BC3F9F565249}
- EventAuxInfo
[ProcessName] powershell.exe
- CorrelationAuxInfo
[TaskId] {2B21CD36-7A9C-4636-91CE-33FBA0B81D08}
[SeqNumber] 11
- Result
[value] 0
So while the Microsoft-Windows-CAPI2/Operational event can provide valuable attack context
(primarily file path and the name of the verifying process), its expected behavior is subverted by
employing a trust validation attack.
Offensive Operational Considerations
The following suggestions are intended to help reduce/mitigate detection when implementing a
malicious SIP:
- 36 -
● If the SIP is being used to hijack existing SIP functionality, implement the same function names
as that of the functions you’re hijacking. This will prevent the need to change “FuncName”
registry values.
● While it is not advised to replace legitimate SIP binaries on disk with those of your own (e.g.
wintrust.dll), it is ideal to have your SIP DLL have the same name as the DLL you’re hijacking.
With the exception of SIP registrations with relative paths (e.g. WoW64 mso.dll), you will need
to change “Dll” registry values. The least suspicious method of changing “Dll” values is to change
strip the file path from “Dll” and plant your SIP DLL in the current directory of the target
application if such a scenario is feasible. For example, change
“C:\Windows\System32\WINTRUST.dll” to just “WINTRUST.dll.” Note that wintrust.dll is not
present in KnownDlls.
● If implementing a full SIP (e.g. with proper registration/deregistration functionality), be mindful
that functions related to SIP operations are relatively easy to build Yara signatures for. Consider
performing SIP registration/hijacks directly through the registry. For example, the following
imports would make for a good Yara rule:
○ CryptSIPAddProvider
○ CryptSIPRemoveProvider
○ CryptSIPLoad
○ CryptSetOIDFunctionValue
○ CryptRegisterOIDFunction
● If your SIP DLL is operating on “Microsoft\Cryptography\OID” key directly in the registry,
obfuscate the subkey paths.
● For the legitimate DLL that you plan to hijack with your SIP DLL, apply its Authenticode signature
to your binary. While a hash mismatch will be present, ideally, you’re hijacking the
CryptSIPVerifyIndirectData SIP component anyway to alleviate this issue. Note that many system
binaries are catalog signed. You can apply a catalog signature as an embedded Authenticode
signature, however. Applying the same certificate will produce an identical thumbprint
calculation and bypass some simple checks that security products might perform.
● If you are registering a new SIP GUID, use a historically defined one that isn’t currently
registered and apply the same filename and export function names as the SIP GUID used. For
example, Silverlight has a SIP with the following GUID: BA08A66F-113B-4D58-9329-
A1B37AF30F0E
○ Filename: xapauthenticodesip.dll
○ Exports:
XAP_CryptSIPCreateIndirectData,XAP_CryptSIPGetSignedDataMsg,XAP_CryptSIPPutSign
edDataMsg,XAP_CryptSIPRemoveSignedDataMsg,XAP_CryptSIPVerifyIndirectData,XAP_I
sFileSupportedName
- 37 -
Windows Trust Architecture Defenses
What follows is practical mitigation and detection guidance for enterprise defenders, threat hunters,
and security product developers.
Enterprise Defender Guidance
Baseline, Trim, and Normalize SIPs and Trust Providers
1. Baseline: It is recommended to sweep your environment for registered SIPs and trust providers
and determine what is normal. Note that in the course of this research, there does not appear
to exist any non-Microsoft SIP or trust provider. A list of known good SIPs and trust providers are
listed in the appendix.
2. Trim: Remove unnecessary SIPs. For example, consider removing the registered Microsoft Office
VBA WOW64 SIP – mso.dll (GUID: 9FA65764-C36F-4319-9737-658A34585BB7). On Windows 10,
this is a stale artifact and is also subject to DLL load order hijacking due to its lack of a full file
path in the registry. Only consider SIP removal when you are confident that you do not need
signing support for a particular SIP. Removing the registration artifacts from the registry will
suffice without needing to call CryptSIPRemoveProvider.
3. Normalize: Identify all SIPs and trust providers that utilize relative paths and supply them with
full file paths to eliminate any possibility of a load order hijack attack. An example of a SIP that
doesn’t register with a full file path is the following:
● 9FA65764-C36F-4319-9737-658A34585BB7 (WoW64) - mso.dll
The following trust providers do not specify full file paths:
● A7F4C378-21BE-494e-BA0F-BB12C5D208C5
● 4ECC1CC8-31B7-45CE-B4B9-2DD45C2FF958
● 31D1ADC1-D329-11D1-8ED8-0080C76516C6
Registry Value SACL Auditing
Considering the majority of the trust subversion attacks accounted for in this whitepaper involve
modifying registry values, SACL registry object auditing should be enabled for the following registry keys
and all subkeys for “Set Value” access and success and failures:
● HKLM\SOFTWARE\Microsoft\Cryptography\OID
● HKLM\SOFTWARE\WOW6432Node\Microsoft\Cryptography\OID
● HKLM\SOFTWARE\Microsoft\Cryptography\Providers\Trust
● HKLM\SOFTWARE\WOW6432Node\Microsoft\Cryptography\Providers\Trust
Registry values for subkeys of the keys listed above will rarely change, if ever, meaning that triggered
events will be high value and easily deconflicted from a rare, benign modification. With SACL auditing
- 38 -
enabled, a registry value change will generate a 4657 (“A registry value was modified”) event. Here is an
example entry:
A registry value was modified.
Subject:
Security ID: DESKTOP-TEST\TestUser
Account Name: TestUser
Account Domain: DESKTOP-TEST
Logon ID: 0x70920
Object:
Object Name:
\REGISTRY\MACHINE\SOFTWARE\Microsoft\Cryptography\OID\EncodingType
0\CryptSIPDllVerifyIndirectData\{C689AAB8-8E78-11D0-8C47-00C04FC295EE}
Object Value Name: FuncName
Handle ID: 0x468
Operation Type: Existing registry value modified
Process Information:
Process ID: 0x2de8
Process Name: C:\Windows\regedit.exe
Change Information:
Old Value Type: REG_SZ
Old Value: CryptSIPVerifyIndirectData
New Value Type: REG_SZ
New Value: DbgUiContinue
Information on Registry key auditing can be found here and here.
Sysmon
As an alternative to registry SACL auditing, those using sysmon should include rules to detect changes to
the key listed above as well as any subkeys. This sysmon ruleset should serve as a great resource for
building sysmon registry rules.
Code Integrity Event Log Events
The Microsoft-Windows-CodeIntegrity/Operational event log can be an extremely valuable indicator for
detecting malicious SIP or trust provider loads. Considering it does not appear as though the attacks
described in this whitepaper can be used to bypass protected processes, any protected process that
performs user mode trust validation may inadvertently attempt to load your malicious SIP or trust
- 39 -
provider DLL. As a result, the image load will fail and an EID 3033 event will be generated. Here is an
example:
Code Integrity determined that a process
(\Device\HarddiskVolume2\Windows\System32\SecurityHealthService.exe)
attempted to load
\Device\HarddiskVolume2\Users\TestUser\Desktop\Trust\SIP\MySIP.dll
that did not meet the Windows signing level requirements.
EventData
FileNameLength 66
FileNameBuffer
\Device\HarddiskVolume2\Users\TestUser\Desktop\Trust\SIP\MySIP.dll
ProcessNameLength 66
ProcessNameBuffer
\Device\HarddiskVolume2\Windows\System32\SecurityHealthService.exe
RequestedPolicy 12
ValidatedPolicy 1
Status 3221226536
The “RequestPolicy” and “ValidatedPolicy” fields refer to the signing level of the host process and DLL,
respectively.
Note that this event will only generated if an attacker-supplied SIP or trust provider DLL is used. These
vents will not be generated using the signed code reuse attack. Those attacks are detected via registry
monitoring, however.
The Microsoft-Windows-CodeIntegrity/Operational is also an extremely valuable source of event data
when running Device Guard in audit mode or enforcement mode or by enabling hypervisor code
integrity (HVCI).
Threat Hunting/Intel and Incident Response Guidance
Threat Intel Research
Those interested in hunting for potentially malicious and/or benign instances of SIP and trust provider
DLLs using VirusTotal Retrohunt might want to use these basic Yara rules written by Joe Desimone at
Endgame.
rule sip_key
{
strings:
$str1 = "CryptSIPDllGetSignedDataMsg" nocase
- 40 -
$str2 = "CryptSIPDllVerifyIndirectData" nocase
condition: