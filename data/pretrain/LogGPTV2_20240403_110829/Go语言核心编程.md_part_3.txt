20.9 递归.................................................................................................................................................................................624
20.9.1 递归的一个应用场景[迷宫问题]...........................................................................................................624
20.9.2 递归的概念..............................................................................................................................................624
20.9.3 递归快速入门..........................................................................................................................................624
20.9.4 递归用于解决什么样的问题..................................................................................................................625
20.9.5 递归需要遵守的重要原则......................................................................................................................625
20.9.6 举一个比较综合的案例,迷宫问题.........................................................................................................626
20.10 哈希表(散列)................................................................................................................................................................630
20.10.1 实际的需求............................................................................................................................................630
20.10.2 哈希表的基本介绍................................................................................................................................630
20.10.3 使用hashtable 来实现一个雇员的管理系统[增删改查]..................................................................631
第 章 开山篇
1 Golang
1.1 Golang 的学习方向
Go语言，我们可以简单的写成 Golang.
1.2 Golang 的应用领域
1.2.1区块链的应用开发
1.2.2后台的服务应用
1.2.3云计算/云服务后台应用
1.3 学习方法的介绍
1.4 讲课的方式的说明
1) 努力做到通俗易懂
2) 注重Go 语言体系，同时也兼顾技术细节
3) 在实际工作中，如何快速的掌握一个技术的分享，同时也是我们授课的思路(怎么讲解或者学习一个
技术)。(很多学员反馈非常受用)
第 章 的概述
2 Golang
2.1 什么是程序
程序：就是完成某个功能的指令的集合。画一个图理解：
2.2 Go 语言的诞生小故事
2.2.1Go 语言的核心开发团队-三个大牛
2.2.2Google 创造 Golang 的原因
2.2.3Golang 的发展历程
 2007年，谷歌工程师 Rob Pike, KenThompson 和Robert Griesemer 开始设计一门全新的语言，这是
Go语言的最初原型。
 2009年11月10日，Google将Go语言以开放源代码的方式向全球发布。
 2015年8月19日，Go1.5版发布，本次更新中移除了”最后残余的C 代码”
 2017年2月17日，Go语言Go 1.8版发布。
 2017年8月24日，Go语言 Go 1.9版发布。 1.9.2版本
 2018年2月16日，Go语言Go 1.10版发布。
2.3 Golang 的语言的特点
 简介：
Go语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率
，使用一个表达式来形容Go语言：Go =C + Python, 说明Go 语言既有C静态语言程
序的运行速度，又能达到Python 动态语言的快速开发。
1) 从C语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等
等，也保留了和C语言一样的编译执行方式及弱化的指针
举一个案例(体验)：
//go 语言的指针的使用特点(体验)
functestPtr(num *int){
*num= 20
}
2) 引入包的概念，用于组织程序结构，Go 语言的一个文件都要归属于一个包，而不能单独存在。
3) 垃圾回收机制，内存自动回收，不需开发人员管理
4) 天然并发 (重要特点)
(1) 从语言层面支持并发，实现简单
(2)goroutine，轻量级线程，可实现大并发处理，高效利用多核。
(3) 基于CPS并发模型(Communicating Sequential Processes )实现
5) 吸收了管道通信机制，形成 Go 语言特有的管道channel 通过管道 channel , 可以实现不同的goroute
之间的相互通信。
6) 函数可以返回多个值。举例：
//写一个函数，实现同时返回 和，差
//go 函数支持返回多个值
funcgetSumAndSub(n1int,n2int)(int, int){
sum:= n1+ n2 //go语句后面不要带分号.
sub:= n1 -n2
return sum,sub
}
7) 新的创新：比如切片slice、延时执行defer
2.4 Golang 的开发工具的介绍
2.4.1工具介绍
2.4.2工具选择：
 如何选择开发工具
我们先选择用visual studio code或者vim 文本编辑器本，到大家对Go 语言有一定了解后，我们再
使用Eclipse等IDE 开发工具。
 这是为什么呢?
1) 更深刻的理解Go 语言技术,培养代码感。->写代码的感觉。
2) 有利于公司面试。-> 给你纸，写程序
2.4.3VSCode 的安装和使用
1) 先到下载地址去选择适合自己系统的VSCode安装软件
https://code.visualstudio.com/download
2) 演示如何在windows 下安装vscode并使用
步骤1: 把vscode 安装文件准备好
步骤2：双击安装文件，就可以一步一步安装，我个人的习惯是安装到d:/programs 目录.
当看到如下界面时，就表示安装成功!
步骤3: 简单的使用一下vscode
在d盘创建了一个文件夹 gocode.
3) 演示如何在Linux(ubuntu /centos)下安装 vscode并使用
这里，我们介绍一下我的linux的环境:
步骤1: 先下载linux 版本的vscode 安装软件.
步骤 2: 因为我这里使用的是虚拟机的 ubuntu, 因此我们需要先将 vscode 安装软件传输到 ubuntu
下,使用的xftp5 软件上传。
步骤3: 如果你是在ubuntu 下做go 开发，我们建议将vscode 安装到 /opt 目录..
步骤4：将安装软件拷贝到 /opt
步骤5: cd /opt 【切换到 /opt】
步骤6: 将安装文件解决即可
步骤7: 现在进入解压后的目录，即可运行我们的vscode
4) 演示如何在Mac下安装vscode 并使用
如果你使用的就是mac系统，也可以在该系统下进行go 开发.
步骤1：下载mac版本的vscode 安装软件
步骤2：把vscode安装软件，传输到mac 系统
细节: 在，默认情况下 mac 没有启动 ssh服务，所以需要我们启动一下，才能远程传输文件.
mac本身安装了ssh 服务，默认情况下不会开机自启
1.启动sshd服务：
sudo launchctl load-w /System/Library/LaunchDaemons/ssh.plist
2.停止sshd服务：
sudo launchctl unload-w /System/Library/LaunchDaemons/ssh.plist
3查看是否启动：
sudo launchctl list|grep ssh
如果看到下面的输出表示成功启动了：
－－－－－－－－－－－－－－
-0com.openssh.sshd
步骤3：将安装软件解压后即可使用.
进入到这个解压后的文件夹(图形界面)，双击即可
步骤4：编写解简单测试.
在用户所在的目录，创建了gocode,然后将test.go 写到这个文件夹下 ..
2.4.4小结
我们会讲解在 windows， linux, mac如何安装 vscode 开发工具，并且还会讲解如何在三个系统下
安装go 的sdk 和如何开发go 程序。
但是为了学习方便，我们前期选择Windows 下开发go。到我们开始讲项目和将区块链时，就会使
用linux系统。
在实际开发中，也可以在windows 开发好程序，然后部署到linux下。
2.5 Windows 下搭建 Go 开发环境-安装和配置 SDK
2.5.1介绍了 SDK
1) SDK 的全称(Software Development Kit 软件开发工具包)
2) SDK是提供给开发人员使用的，其中包含了对应开发语言的工具包
2.5.2下载 SDK 工具包
1) Go 语言的官网为：golang.org , 因为各种原因，可能无法访问。
2) SDK下载地址：Golang 中国 https://www.golangtc.com/download
3) 如何选择对应的sdk版本
2.5.3windows 下安装 sdk
1)Windows下SDK 的各个版本说明：
Windows 下：根据自己系统是32位还是64位进行下载：
32位系统：go1.9.2.windows-386.zip
64位系统：go1.9.2.windows-amd64.zip
2) 请注意：安装路径不要有中文或者特殊符号如空格等
3)SDK安装目录建议：windows 一般我安装在d:/programs
4) 安装时，基本上是傻瓜式安装，解压就可以使用
5) 安装看老师的演示：
6) 解压后，我们会看到 d:/go 目录，这个是sdk
如何测试我们的go 的sdk 安装成功。
2.5.4windows 下配置 Golang 环境变量：
 为什么需要配置环境变量
 配置环境变量介绍
根据windows 系统在查找可执行程序的原理，可以将Go 所在路径定义到环境变量中，让系统帮我
们去找运行执行的程序，这样在任何目录下都可以执行go 指令。
 在Go开发中，需要配置哪些环境变量
 看老师如何配置
步骤1：先打开环境变量配置的界面
步骤2: 配置我们的环境变量
对上图的一个说明：
1) Path这个环境变量不需要在创建，因为系统本身就有，你后面增加即可
2) 增加Go 的bin : ;%GOROOT%\bin
对上图的一个说明
1) GOPATH ：就是你以后go 项目存放的路径，即工作目录
2) GOPATH：是一个新建的环境变量
 测试一下我们的环境变量是否配置ok
注意：配置环境变量后，需要重新打开一次dos 的终端，这样环境变量才会生效。
2.6 Linux 下搭建 Go 开发环境-安装和配置 SDK
2.6.1Linux 下安装 SDK：
1) Linux 下SDK的各个版本说明：
Linux 下：根据系统是32位还是64位进行下载：
32位系统：go1.9.2.linux-386.tar.gz
64位系统：go1.9.2.linux-amd64.tar.gz
如何确认你的linux是多少位：
2) 请注意：安装路径不要有中文或者特殊符号如空格等
3) SDK安装目录建议： linux 放在 /opt 目录下
4) 安装时，解压即可，我们使用的是 tar.gz
5) 看老师演示
步骤1: 将 go1.9.2.linux-amd64.tar.gz 传输到 ubuntu
步骤2: 将 go1.9.2.linux-amd64.tar.gz 拷贝到 /opt 下
步骤3:cd /opt
步骤4：tar-zxvf go1.9.2.linux-amd64.tar.gz [解压后，就可以看到一个go 目录]
步骤5:cd go/bin
步骤6：./goversion
2.6.2Linux 下配置 Golang 环境变量
步骤1：使用root 的权限来编辑 vim/etc/profile 文件
步骤2: 如果需要生效的话，需要注销一下(重新登录)，再使用
2.7 Mac 下搭建 Go 开发环境-安装和配置 SDK
2.7.1mac 下安装 Go 的 sdk
1)Mac 下SDK的各个版本说明：
MacOS 下：只有 64位的软件安装包
MacOS 系统的安装包：go1.9.2.darwin-amd64.tar.gz
2) 请注意：安装路径不要有中文或者特殊符号如空格等
3)SDK安装目录建议： Mac 一般放在用户目录下 go_dev/go 下
4) 安装时，解压即可
5) 看老师的演示步骤
步骤1： 先将我们的安装文件go1.9.2.darwin-amd64.tar.gz 上传到mac
步骤2: 先在用户目录下，创建一个目录 go_dev , 将我们上传的文件 移动到 go_dev 目录
步骤3： 解压 tar-zxvf go1.9.2.darwin-amd64.tar.gz
步骤4: 解压后，我们会得到一个目录 go， 进入到 go/bin 就是可以使用
这里还是有一个问题，就是如果我们不做bin 目录下，就使用不了go 程序。因此我们仍然需要配置go
的环境变量。
2.7.2Mac 下配置 Golang 环境变量：
步骤1：使用root 用户，修改 /etc/profile 增加环境变量的配置
步骤2: 配置完后，需要重新注销用户，配置才会生效.
2.8 Go 语言快速开发入门
2.8.1需求
要求开发一个hello.go 程序，可以输出 "hello,world”
2.8.2开发的步骤
1) 开发这个程序/项目时，go 的目录结构怎么处理.
2) 代码如下：
对上图的说明
(1) go 文件的后缀是 .go
(2) package main
表示该 hello.go 文件所在的包是main, 在go 中，每个文件都必须归属于一个包。
(3) import“fmt”
表示：引入一个包，包名 fmt, 引入该包后，就可以使用fmt包的函数，比如：fmt.Println
(4) funcmain(){
}
func 是一个关键字，表示一个函数。
main是函数名，是一个主函数，即我们程序的入口。
(5) fmt.Println(“hello”)
表示调用 fmt 包的函数 Println 输出 “hello,world”
3) 通过 go build 命令对该 go 文件进行编译，生成 .exe 文件.
4) 运行hello.exe文件即可
5) 注意：通过 go run 命令可以直接运行 hello.go 程序 [类似执行一个脚本文件的形式]
2.8.3linux 下如何开发 Go 程序
说明：linux下开发go 和windows 开发基本是一样的。只是在运行可执行的程序时，
是以 ./文件名方式
演示: 在linux 下开发Go 程序。
编译和运行hello.go
也可以直接使用 go run hello.go 方式运行
2.8.4Mac 下如何开发 Go 程序
 说明：在mac 下开发go 程序和windows 基本一样。
 演示一下：如何在mac 下开发一个hello.go 程序
 源代码的编写：hello.go
 编译再运行，直接 go run 来运行
 直接 go run 来运行
2.8.5go 语言的快速入门的课堂练习
2.8.6Golang 执行流程分析
 如果是对源码编译后，再执行，Go的执行流程如下图
 如果我们是对源码直接 执行 go run 源码，Go 的执行流程如下图
 两种执行流程的方式区别
1) 如果我们先编译生成了可执行文件，那么我们可以将该可执行文件拷贝到没有go 开发环境的机
器上，仍然可以运行
2) 如果我们是直接 go run go 源代码，那么如果要在另外一个机器上这么运行，也需要 go 开发
环境，否则无法执行。
3) 在编译时，编译器会将程序运行依赖的库文件包含在可执行文件中，所以，可执行文件变大了
很多。
2.8.7编译和运行说明
1) 有了go 源文件，通过编译器将其编译成机器可以识别的二进制码文件。
2) 在该源文件目录下，通过 go build 对 hello.go 文件进行编译。可以指定生成的可执行文件名，在
windows 下 必须是 .exe 后缀。
3) 如果程序没有错误，没有任何提示，会在当前目录下会出现一个可执行文件(windows 下是.exe
Linux下是一个可执行文件)，该文件是二进制码文件，也是可以执行的程序。
4) 如果程序有错误，编译时，会在错误的那行报错。有助于程序员调试错误.
5) 运行有两种形式
2.8.8Go 程序开发的注意事项
1) Go 源文件以 "go" 为扩展名。
2) Go 应用程序的执行入口是main()函数。 这个是和其它编程语言（比如java/c）
3) Go 语言严格区分大小写。
4) Go 方法由一条条语句构成，每个语句后不需要分号(Go 语言会在每行后自动加分号)，这也体
现出Golang 的简洁性。
5) Go 编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否
则报错
6) go 语言定义的变量或者import 的包如果没有使用到，代码不能编译通过。
7) 大括号都是成对出现的，缺一不可。
2.9 Go 语言的转义字符(escape char)
说明:常用的转义字符有如下:
1) \t : 表示一个制表符，通常使用它可以排版。
2) \n ：换行符
3) \\ ：一个\
4) \" ：一个"
5) \r ：一个回车 fmt.Println("天龙八部雪山飞狐\r 张飞");
6) 案例截图
 课堂练习
5min
作业评讲：
package main
import"fmt" //fmt包中提供格式化，输出，输入的函数.
funcmain() {
//要求：要求：请使用一句输出语句，达到输入如下图形的效果
fmt.Println("姓名\t 年龄\t 籍贯\t 地址\njohn\t20\t 河北\t 北京")
}
2.10 Golang 开发常见问题和解决方法
2.10.1 文件名或者路径错误
2.10.2 小结和提示
学习编程最容易犯的错是语法错误 。Go 要求你必须按照语法规则编写代码。如果你的程序违反了
语法规则，例如：忘记了大括号、引号，或者拼错了单词，Go 编译器都会报语法错误，要求：尝试
着去看懂编译器会报告的错误信息。
2.11 注释(comment)
2.11.1 介绍注释
用于注解说明解释程序的文字就是注释，注释提高了代码的阅读性；
注释是一个程序员必须要具有的良好编程习惯。将自己的思想通过注释先整理出来，再用代码去
体现。
2.11.2 在 Golang 中注释有两种形式
1) 行注释
 基本语法
// 注释内容
 举例
2) 块注释(多行注释)
 基本语法