    图 9.12–grafana 控制板导入
    我们可以使用 JSON 配置或通过粘贴公共仪表板标识通过该页面添加仪表板。
5.  您可以在[https://grafana.com/grafana/dashboards/315](https://grafana.com/grafana/dashboards/315)找到公共仪表盘及其相关标识。仪表板#315 是 Kubernetes 的一个很好的入门仪表板——让我们把它添加到标有**Grafana.com 仪表板**的文本框中，然后点击**加载**。
6.  然后，在下一页，从**普罗米修斯**选项下拉列表中选择**普罗米修斯**数据源，如果可用，该选项用于在多个数据源之间进行选择。点击**导入**，应加载仪表盘，如下图所示:
![Figure 9.13 – Grafana dashboard](img/B14790_09_013_new.jpg)
图 9.13–grafana 控制板
这个特殊的 Grafana 仪表板提供了整个集群中网络、内存、中央处理器和文件系统利用率的高级概述，并按 Pod 和容器进行了细分。它配置有**网络输入/输出压力**、**集群内存使用情况**、**集群 CPU 使用情况**和**集群文件系统使用情况**的实时图表–尽管最后一个选项可能不会启用，具体取决于您如何安装 Prometheus。
最后，让我们看看 Alertmanager 用户界面。
### 使用警报器管理器
Alertmanager 是一个开源解决方案，用于管理普罗米修斯警报生成的警报。我们之前安装了 Alertmanager 作为栈的一部分，让我们看看它能做什么:
1.  首先，让我们使用以下命令来`port-forward`警报管理器服务:
    ```
    Kubectl -n monitoring port-forward svc/alertmanager-main 3000:9093
    ```
2.  像往常一样，导航到`localhost:3000`查看 UI，如下图截图所示。它看起来类似于普罗米修斯用户界面:
![Figure 9.14 – Alertmanager UI](img/B14790_09_014_new.jpg)
图 9.14-alert manager ui
警报管理器与普罗米修斯警报一起工作。您可以使用 Prometheus 服务器指定警报规则，然后使用 Alertmanager 将类似的警报分组到单个通知中，执行重复数据删除，并创建*静音*，这本质上是一种在警报符合特定规则时将其静音的方法。
接下来，我们将回顾一个流行的 Kubernetes 日志栈——elastic search、FluentD 和 Kibana。
## 在 Kubernetes 上实现 EFK 栈
类似于流行的 ELK 栈(弹性搜索、日志存储和基巴纳)，EFK 栈将日志存储替换为 FluentD 日志转发器，这在 Kubernetes 上得到了很好的支持。实现这个栈很容易，并且允许我们使用 Kubernetes 上的纯开源工具开始使用日志聚合和搜索功能。
### 安装 EFK 栈
在 Kubernetes 上安装 EFK 栈有很多方法，但是 Kubernetes GitHub 存储库本身有一些受支持的 YAML，所以我们就用这个吧:
1.  首先，使用以下命令克隆或下载 Kubernetes 存储库:
    ```
    git clone https://github.com/kubernetes/kubernetes
    ```
2.  The manifests are located in the `kubernetes/cluster/addons` folder, specifically under `fluentd-elasticsearch`:
    ```
    cd kubernetes/cluster/addons
    ```
    对于生产工作负载，我们可能会对这些清单进行一些更改，以便为我们的集群正确地定制配置，但是出于本教程的目的，我们将保留所有内容为默认设置。让我们开始启动 EFK 栈的过程。
3.  First, let's create the Elasticsearch cluster itself. This runs as a StatefulSet on Kubernetes, and also provides a Service. To create the cluster, we need to run two `kubectl` commands:
    ```
    kubectl apply -f ./fluentd-elasticsearch/es-statefulset.yaml
    kubectl apply -f ./fluentd-elasticsearch/es-service.yaml
    ```
    重要说明
    弹性搜索状态集的一个警告——默认情况下，每个 Pod 的资源请求是 3 GB 内存，因此如果您的节点都没有可用的内存，您将无法按照默认配置部署它。
4.  接下来，让我们部署 FluentD 日志代理。这些将作为一个 DaemonSet 运行—每个节点一个—并将日志从节点转发到弹性搜索。我们还需要创建包含基本 FluentD 代理配置的 ConfigMap YAML。这可以进一步定制，以添加日志过滤器和新来源等内容。
5.  要为代理及其配置安装 DaemonSet，请运行以下两个`kubectl`命令:
    ```
    kubectl apply -f ./fluentd-elasticsearch/fluentd-es-configmap.yaml
    kubectl apply -f ./fluentd-elasticsearch/fluentd-es-ds.yaml
    ```
6.  现在我们已经创建了配置图和 FluentD DaemonSet，我们可以创建我们的 Kibana 应用，这是一个用于与 Elasticsearch 交互的图形用户界面。这篇文章以一个部署，一个服务来运行。要将基巴纳部署到我们的集群，运行最后两个`kubectl`命令:
    ```
    kubectl apply -f ./fluentd-elasticsearch/kibana-deployment.yaml
    kubectl apply -f ./fluentd-elasticsearch/kibana-service.yaml
    ```
7.  一旦一切开始，这可能需要几分钟，我们可以像访问普罗米修斯和格拉夫纳一样访问基巴纳用户界面。要检查我们刚刚创建的资源的状态，我们可以运行以下命令:
    ```
    kubectl get po -A
    ```
8.  一旦 FluentD、Elasticsearch 和 Kibana 的所有 Pods 都处于**就绪**状态，我们就可以继续前进了。如果您的任何 Pods 处于**错误**或**故障回退**阶段，请查阅`addons`文件夹中的 Kubernetes GitHub 文档了解更多信息。
9.  Once we've confirmed that our components are working properly, let's use the `port-forward` command to access the Kibana UI. By the way, our EFK stack pieces will live in the `kube-system` namespace – so our command needs to reflect that. So, let's use the following command:
    ```
    kubectl port-forward -n kube-system svc/kibana-logging 8080:5601
    ```
    该命令将从基巴纳用户界面启动到本地机器端口的`port-forward`。
10.  Let's check out the Kibana UI at `localhost:8080`. It should look something like the following, depending on your exact version and configuration:
    ![Figure 9.15 – Basic Kibana UI](img/B14790_09_015_new.jpg)
    图 9.15–基本基巴纳用户界面
    Kibana 为搜索和可视化日志、指标等提供了几种不同的功能。对于我们的目的来说，仪表板最重要的部分是**日志记录**，因为在我们的示例中，我们仅将 Kibana 用作日志搜索用户界面。
    然而，Kibana 还有许多其他功能，其中一些功能与 Grafana 相当。例如，它包括一个完整的可视化引擎、**应用性能监控** ( **APM** )功能，以及 Timelion，一个时间序列数据的表达式引擎，非常类似于普罗米修斯的 PromQL。基巴纳的度量功能类似于普罗米修斯和格拉夫纳。
11.  为了让 Kibana 工作，我们首先需要指定一个索引模式。为此，单击**可视化**按钮，然后单击**添加索引模式**。从模式列表中选择一个选项，选择带有当前日期的索引，然后创建索引模式。
现在我们已经设置好了，**发现**页面将为您提供搜索功能。这使用了 Apache Lucene 查询语法([https://www . elastic . co/guide/en/elastic search/reference/6.7/query-DSL-query-string-query . html # query-string-syntax](https://www.elastic.co/guide/en/elasticsearch/reference/6.7/query-dsl-query-string-query.html#query-string-syntax))，可以处理从简单的字符串匹配表达式到极其复杂的查询的一切。在下面的截图中，我们正在对字母`h`进行简单的字符串匹配:
![Figure 9.16 – Discover UI](img/B14790_09_016_new.jpg)
图 9.16–发现用户界面
当基巴纳找不到任何结果时，它会给你一套便捷的可能解决方案，包括查询示例，如你在*图 9.13* 中所见。
现在您已经知道如何创建搜索查询，您可以在**可视化**页面上从查询创建可视化。可以从图形、图表等可视化类型中进行选择，然后使用特定查询进行定制，如下图所示:
![Figure 9.17 – New visualization](img/B14790_09_017_new.jpg)
图 9.17–新的可视化
接下来，这些可视化可以组合成仪表板。这与 Grafana 类似，在 Grafana 中，可以将多个可视化添加到仪表板中，然后可以保存和重用。
您还可以使用搜索栏来进一步过滤您的仪表板可视化效果——非常漂亮！下面的屏幕截图显示了仪表板如何绑定到特定的查询:
![Figure 9.18 – Dashboard UI](img/B14790_09_018_new.jpg)
图 9.18–仪表板用户界面
如您所见，可以使用**添加**按钮为特定查询创建仪表板。
接下来，Kibana 提供了一个名为 *Timelion* 的工具，这是一个时间序列可视化合成工具。本质上，它允许您将单独的数据源组合成一个可视化。Timelion 非常强大，但是对其特性集的全面讨论不在本书的讨论范围之内。以下截图显示了 Timelion 用户界面——您可能会注意到与 Grafana 的一些相似之处，因为这两套工具提供了非常相似的功能:
![Figure 9.19 – Timelion UI](img/B14790_09_019_new.jpg)
图 9.19–time lion 用户界面
如您所见，在 Timelion 中，可以使用查询来驱动实时更新图，就像在 Grafana 中一样。
此外，尽管与本书不太相关，但基巴纳提供了 APM 功能，这需要一些进一步的设置，尤其是使用 Kubernetes。在本书中，我们依靠普罗米修斯来获取这类信息，同时使用 EFK 栈来从我们的应用中搜索日志。
现在，我们已经讨论了普罗米修斯和格拉夫纳的度量和警报，以及 EFK 栈的日志记录，只剩下一个可观察性难题。为了解决这个问题，我们将使用另一个优秀的开源软件——耶格。
## 用 Jaeger 实现分布式跟踪
Jaeger 是一个开源的分布式追踪解决方案，兼容 Kubernetes。Jaeger 实现了 OpenTracing 规范，这是一套定义分布式跟踪的标准。