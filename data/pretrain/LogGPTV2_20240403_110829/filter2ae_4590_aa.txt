## 环境搭建
  * 下载：
  * 安装：在主目录下执行：
    1. `.\gradle\init-gradle-wrapper.ps1`
    2. `gradlew.bat`
## 背景
### Web路由
        Main Control Servlet
        ControlServlet
        ControlServlet
        org.apache.ofbiz.webapp.control.ControlServlet
        1
        ControlServlet
        /control/*
根据web.xml定义的`servlet`，定位到`org.apache.ofbiz.webapp.control.ControlServlet`
主要请求由`org.apache.ofbiz.webapp.control.RequestHandler#doRequest()`处理
首先根据请求的url获取路由信息，默认有216个url路径（17.12.03版本）
之后会根据`requestMap.event`信息去查找负责处理event的handler，之后再通过`invoke`进行具体的调用，该过程由`org.apache.ofbiz.webapp.control.RequestHandler#runEvent()`来完成
### XML-RPC消息
#### XML-RPC数据类型
  * 文档：
根据文档，xmlrpc支持多种数据类型，对应的xml标签包括`base64`、`struct`、`array`等
下面是几种常见的数据类型
          7
        foo 
        bar 
#### XML-RPC消息格式
  * 文档：
每个XML-RPC请求都以``开头，该元素包含单个子元素`method`，元素``包含子元素``，``可以包含一个或多个``元素。如：
    POST /RPC2 HTTP/1.0
    User-Agent: Frontier/5.1.2 (WinNT)
    Host: betty.userland.com
    Content-Type: text/xml
    Content-length: 181
      examples.getStateName  
            41
## 漏洞分析
CVE-2020-9496
  * 漏洞信息：
  * 补丁：
根据补丁发现`framework\webtools\webapp\webtools\WEB-INF\controller.xml`中的`xmlrpc`请求增加了``的认证，说明默认情况下该接口访问无需认证
### 调用方法
直接构造post请求发送
    POST /webtools/control/xmlrpc HTTP/1.1
    Host: 127.0.0.1:8443
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    DNT: 1
    Connection: close
    Upgrade-Insecure-Requests: 1
    Content-Type: application/xml
    Content-Length: 181
      testMethod
          test
发现报错`org.apache.xmlrpc.server.XmlRpcNoSuchHandlerException: No such service
[testMethod]`说明没有相关的方法
下断点调试一下，由上面的`org.apache.ofbiz.webapp.event.XmlRpcEventHandler#invoke()`进入`execute()`，接着调用`org.apache.xmlrpc.server.XmlRpcServer#execute()`
跟入`XmlRpcServer#execute()`，发现调用了`org.apache.xmlrpc.server.XmlRpcServerWorker#execute()`，由具体的event
handler处理XML-RPC请求
在`org.apache.ofbiz.webapp.event.XmlRpcEventHandler.ServiceRpcHandler#getHandler()`中获取Handler对应的`ModelService`，默认注册的service有3000多个，也就是可供调用的`methodName`，如果找不到service会抛出`No
such service`的异常
所以此处传入一个已注册的service
回到`org.apache.xmlrpc.server.XmlRpcServerWorker#execute()`，当成功查询到service后通过`handler.execute(pRequest)`进行调用，注意此处还会检查一次`ModelService`的`export`属性，因此通过遍历serviceMap找到一个`export`为`true`的方法，如`ping`
继续构造请求（下面会解释为什么需要struct块）
      ping