        pTextData = this->_pTextData;
        if ( pTextData )
            TextLength = pTextData->_cch;
        else
            TextLength = CTreePos::ContentCch(this);
        return TextLength;
    }
    LONG __thiscall CTreePos::ContentCch(CTreeDataPos *this)
    {
      LONG Cch; // eax
      // public: long __thiscall CTreePos::ContentCch(void)const     
      // Pointer=0x8
      if ( (this->_cElemLeftAndFlags & 8) != 0 && CTreePos::HasCollapsedWhitespace(this) )
        Cch = 1;
      else
        // Text = 0x4
        Cch = this->dptp.t._sid_cch & 0x1FFFFFF;    // 关键位置
      return Cch;
    }
CTreeDataPos::AppendText()用于在原来的字符串后面附加新的字符串。
    HRESULT __thiscall CTreeDataPos::AppendText(CTreeDataPos *this, const wchar_t *AppendTextPtr, ULONG AppendTextCch, BOOL a1)
    {
        HRESULT hr; // edi
        wchar_t *TargetTextPtr; // eax
        ULONG TargetTextCch; // [esp+Ch] [ebp-8h] BYREF
        Tree::TextData *pTextData; // [esp+10h] [ebp-4h] MAPDST BYREF
        // public: long __thiscall CTreeDataPos::AppendText(unsigned short const *,unsigned long,bool) 
        hr = 0;
        // 获取源文本数据块数据
        TargetTextPtr = Tree::TextData::GetText(this->_pTextData, 0, &TargetTextCch);
        pTextData = 0;
        // 创建新的文本数据块
        Tree::TextData::Create(TargetTextPtr, TargetTextCch, AppendTextPtr, AppendTextCch, &pTextData);
        if ( pTextData )
            // 重新设置CTreeDataPos中与其相关联的Tree::TextData数据块指针
            CTreeDataPos::SetTextData(this, pTextData);
        else
            hr = 0x8007000E;                            // E_OUTOFMEMORY = 0x8007000E
        if ( pTextData )
        {
            if ( pTextData->_ulRefs-- == 1 )
                MemoryProtection::HeapFree(g_hProcessHeap, pTextData);
        }
        return hr;
    }
##### 6.1.4.1 Tree::TextData
下面是我经过逆向得出的IE11中Tree::TextData类对象的完整成员。
    //Tree::TextData对象结构(大小为_cch*2+8，Tree::TextData::AllocateMemory())
    +0x000  ULONG _ulRefs，//引用计数，CTreeDataPos::SetTextData()
    +0x004  LONG _cch，//文本数据的字符数，Tree::TextData::AllocateMemory()
    +0x008  wchar_t _TextData[_cch]，//Tree::TextData::AllocateMemory()
Tree::TextData::AllocateMemory()函数用于为Tree::TextData对象分配内存。
    void __fastcall Tree::TextData::AllocateMemory(LONG cch, Tree::TextData **ppTextData)
    {
        Tree::TextData *pNewTextData; // eax
        Tree::TextData *pOldTextData; // edx
        // private: static void __stdcall Tree::TextData::AllocateMemory(long,class SP &)    
        // 功能：为文本数据块分配内存
        pNewTextData = MemoryProtection::HeapAlloc(g_hProcessHeap, 2 * cch + 8);
        if ( pNewTextData )
        {
            pNewTextData->_cch = cch;
            pNewTextData->_ulRefs = 1;
        }
        pOldTextData = *ppTextData;
        *ppTextData = pNewTextData;
        if ( pOldTextData )
        {
            if ( pOldTextData->_ulRefs-- == 1 )
                MemoryProtection::HeapFree(g_hProcessHeap, pOldTextData);
        }
    }
Tree::TextData::Create()函数用于根据传入的参数字符串创建一个Tree::TextData对象，并将字符串复制到Tree::TextData对象的空间，然后返回Tree::TextData对象的指针。
    void __fastcall Tree::TextData::Create(const wchar_t *SourceTextPtr, ULONG SourceTextCch, Tree::TextData **ppTextData)
    {
        // public: static void __stdcall Tree::TextData::Create(unsigned short const *,unsigned long,class SP &) 
        // 功能：为源文本数据块创建一个副本
        Tree::TextData::AllocateMemory(SourceTextCch, ppTextData);
        if ( *ppTextData )
            _memcpy_s((*ppTextData)->_TextData, 2 * SourceTextCch, SourceTextPtr, 2 * SourceTextCch);
    }
下面函数是上面函数的重载。能够添加额外的字符串。
    void __fastcall Tree::TextData::Create(const wchar_t *SourceTextPtr, ULONG SourceTextCch, const wchar_t *AdditionalTextPtr, ULONG AdditionalTextCch, Tree::TextData **ppTextData)
    {
        // public: static void __stdcall Tree::TextData::Create(unsigned short const *,unsigned long,unsigned short const *,unsigned long,class SP &)    
        // 功能：创建一个文本数据块,可添加新的文本数据
        Tree::TextData::AllocateMemory(SourceTextCch + AdditionalTextCch, ppTextData);
        if ( *ppTextData )
        {
            // 将源文本数据块中的数据复制到新的文本数据块中
            _memcpy_s((*ppTextData)->_TextData, 2 * SourceTextCch, SourceTextPtr, 2 * SourceTextCch);
            if ( AdditionalTextPtr )
                // 创建新文本数据块时，需要添加额外的文本数据，则将其复制到新文本数据块中源文本数据的后面
                _memcpy_s(
                &(*ppTextData)->_TextData[SourceTextCch],
                2 * AdditionalTextCch,
                AdditionalTextPtr,
                2 * AdditionalTextCch);
        }
    }
Tree::TextData::GetText()函数用于从Tree::TextData对象获取到文本字符串的指针和长度。
    wchar_t *__thiscall Tree::TextData::GetText(Tree::TextData *this, ULONG skip_cch, ULONG *GetedCch)
    {
        // public: unsigned short * __thiscall Tree::TextData::GetText(unsigned long,unsigned long *)const     
        // 功能：获取指定字符数量之后的文本字符串的指针
        if ( GetedCch )
            *GetedCch = this->_cch - skip_cch;
        return &this->_TextData[skip_cch];
    }
##### 6.1.4.2 CTxtPtr
CTxtPtr继承于CRunPtr。提供对后备存储区中字符数组的访问(即CTxtArray)。
    //CTxtPtr类对象结构(0x14，CSpliceTreeEngine::RecordSplice()->CTxtPtr::BindToCp())
    +0x000  CTxtArray* _prgRun，  // CTxtArray指针
    +0x004  LONG _iRun，          // 指示CTxtArray中某一元素的索引
    +0x008  LONG _ich，           // 指示CTxtArray中某一元素的内容中的字符索引
    +0x00C  DWORD _cp，           // 字符在文本流中的位置
    +0x010  CMarkup *_pMarkup，   // 指向整个文本编辑类的指针
CSpliceTreeEngine::RecordSplice()函数是CSpliceTreeEngine引擎用于记录DOM树的拼接的函数。
    HRESULT __thiscall CSpliceTreeEngine::RecordSplice(CSpliceTreeEngine *this)
    {
        _this = this;
        hr1 = 0;
        pMarkupSource = this->_pMarkupSource;
        __this = this;
        if ( *(pMarkupSource + 135) (g_hProcessHeap, 0x14u);
            if ( pTxtPtr )
            {
                tpSourceLCp = CTreePos::GetCpAndMarkup(_this->_ptpSourceL, 0, 0);
                _pMarkupSource = _this->_pMarkupSource;
                pTxtPtr->_pMarkup = _pMarkupSource;
                pTxtPtr->_iRun = 0;
                pTxtPtr->_ich = 0;
                pTxtPtr->_cp = 0;
                pTxtPtr->_prgRun = (_pMarkupSource + 112);
                pTxtPtr->_cp = CTxtPtr::BindToCp(pTxtPtr, tpSourceLCp);
            }
            else
            {
                pTxtPtr = 0;
            }
            pMarkupSource = _this->_pMarkupSource;
        }
        ...
    }
### 6.2 漏洞PoC所对应的DOM树
这里调试时用的PoC是Google Project Zero的Ivan Fratric提供的PoC，未经修改。
重新调试，附加IE进程，在初始断点断下后，设置以下两个断点。
    ;bp MSHTML!CSpliceTreeEngine::RemoveSplice,CSpliceTreeEngine::RemoveSplice()函数起始地址
        .text:63A46320 ; HRESULT __thiscall CSpliceTreeEngine::RemoveSplice(CSpliceTreeEngine *this)
        .text:63A46320 ?RemoveSplice@CSpliceTreeEngine@@QAEJXZ proc near
        .text:63A46320 mov     edi, edi
        .text:63A46322 push    ebp
        .text:63A46323 mov     ebp, esp
        .text:63A46325 and     esp, 0FFFFFFF8h
        .text:63A46328 sub     esp, 240h
        .text:63A4632E mov     eax, ___security_cookie
        .text:63A46333 xor     eax, esp
        .text:63A46335 mov     [esp+240h+var_4], eax
    ;bp 63A46783,Crash附近第一次调用CTreePos::GetCp()
        .text:63A46783 mov     ecx, [esi+14h]                  ; this
        .text:63A46786 call    ?GetCp@CTreePos@@QAEJXZ         ; CTreePos::GetCp(void)