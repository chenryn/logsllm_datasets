Calling 
context 
encoding
Installed 
patches
Program
Heap 
buffers
Memory 
allocator
interposition
Overrun 
detection
Diagnosis 
engine
Fig. 1: The architecture of HeapTherapy.
Collaborative 
patch 
generation
As an example, we show how HeapTherapy can be used
to harden the text-based browser Lynx against a heap buffer
over-write attack. When parsing an HTML link whose host-
name includes a % character in the last two bytes, the URL
decoding code of Lynx 2.8.8dev.1 will write attacker
controlled data after a heap buffer’s boundary, leading to a
crash or arbitrary code execution (CVE-2010-2810). In the
following steps, we use an exploit provided here [24].
A user applies HeapTherapy to hardening Lynx as follows:
Compilation: The user compiles Lynx with a LLVM com-
piler, to which we added a calling context encoding instrumen-
tation pass (PCC.so), and links it with the heaptherapy
shared library for memory allocator interposition by providing
the ﬂags:
CFLAGS= -Xclang -load -Xclang PCC.so
LDFLAGS= -ldl -L. -lheaptherapy
Fig. 2: A crash due to the malformed HTML link, and the
detection and diagnosis result of HeapTherapy.
Online detection and diagnosis: The user then starts
Lynx. Once the malformed link is visited, an over-write will
occur. HeapTherapy detects this over-write,
terminates the
program and generates a core dump ﬁle. The core dump ﬁle
is then analyzed by the diagnosis engine to locate the over-
written buffer and to generate a temporary patch containing
the vulnerable buffer’s allocation calling context encoding.
Figure 2 shows the result of this step.
Fig. 3: Lynx displays the malformed links without crashes.
Defense: The temporary patch is then stored in a conﬁg-
uration ﬁle, which will be loaded once the user starts Lynx
again. This time when Lynx parses a link exploiting the same
487487
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
int tmp = V; // Added: backup encoding
...
V = 3 * tmp + cs_1; // Added: update it
V = 3 * tmp + cs_2; // Added: update it
1 foo() {
2
3
4
5 cs_1: bar1();
6
7 cs_2: bar2();
8
9
clone
start_thread
handle_one_connection
do_handle_one_connection
...
V = tmp; // Added: recover the encoding
thd_prepare_connection
do_command
10 }
my_malloc
MDL_key::mdl_key_init
malloc
stpcpy
The vulnerable calling context.
The over-write calling context.
Fig. 4: The calling context tree of MySQL5.5.19 related to
CVE-2012-561. Dashed lines indicate omitted functions.
vulnerability, HeapTherapy prevents the over-write and allows
Lynx to display the page normally without a crash, as shown
in Figure 3. We mutate the attack and ﬁnd the patch still
effective.
Collaborative patch generation: In addition to locally
generated patches, the patches can also come from other ma-
chines. The shared and collaborative patch generation makes
an early response to large scale attacks exploiting zero-day
vulnerabilities possible.
IV. DESIGN AND IMPLEMENTATION
In this section, we present the design and implementation
of HeapTherapy. We ﬁrst
introduce the idea of applying
calling context encoding to identifying vulnerable heap buffers
instantly, and then explain overﬂow detection, attack diagnosis,
and defense generation.
A. Calling-context Sensitive Defenses
HeapTherapy uses calling context as a characterization
of vulnerabilities and the guidance for applying defenses. A
calling context is a sequence of unreturned method invocations
that lead to a runtime operation. It is also loosely referred to
as call stack and back trace.
Given an attack that exploits a bug to overﬂow a buffer,
our observation is that the allocation calling context of the
buffer is the same when the attack recurs. Figure 4 illustrates
such an example. It contains part of the calling context tree
of MySQL 5.5.19 with a heap buffer overﬂow vulnerability
(CVE-2012-5612). The left branch shows the calling context
when a vulnerable buffer is allocated, while the right one the
over-write calling context,. We mutated the script exploiting
the vulnerability and the calling contexts were reproduced. The
observation is conﬁrmed by our experiments on a wide variety
of programs (Section V-A), and it is consistent with existing
work that employs calling context for security purposes [50],
[26], [31]. We do encounter cases where a single vulnerability
corresponds to multiple vulnerable allocation calling contexts
Fig. 5: An example of PCC encoding. Four lines are added to
maintain the encoding.
(the Nginx example in Section V-A); however, the number
is very small, and HeapTherapy handles such cases easily by
generating one defense for each vulnerable calling context.
HeapTherapy requires frequent retrieval and comparison of
calling contexts. It is notable that if these operations incur high
overhead, e.g., through stack walking, the overall performance
degradation will be signiﬁcant. Therefore, we employ calling
context encoding techniques to speed up. A few encoding
techniques, which represent a calling context using one or
very few integers, have been proposed to track calling contexts
continuously with a very low overhead [9], [42], [51]. We
use the approach called probabilistic calling context (PCC)
encoding [9], for it does not need static analysis and encodes
each calling context into only one word. It uses a very simple
hash scheme to update the calling context encoding value right
before each call site: V ← 3×V +cs, where V is a thread-local
integer variable storing the current calling context encoding
value and cs is a hash value of the call site, which is calculated
at compilation time based on the ﬁle name and line number.
Figure 5 shows an example of PCC encoding. To imple-
ment this, we write a compiler pass in LLVM that instruments
the program code. The original work of PCC, which works
with Java programs, shows a high efﬁciency. It is conﬁrmed
by our implementation for C and C++ programs, incurring only
1.9% average slowdown on SPEC CPU2006 benchmarks.
Due to the hash nature of PCC encoding, collisions may
occur such that the encoding values of two different calling
contexts are the same. Thus a patch might lead to unnecessary
protection applied to safe buffers, resulting in some overhead.
However, it has been shown in theory and practice that PCC
can encode millions of contexts in a program with very few
hash collisions [9].
In HeapTherapy, the encoding value of a calling context
is called a calling-context identiﬁer, or CCID; and hence the
encoding value of a vulnerable calling context is called a
vulnerable CCID (VCCID). Since each calling context is en-
coded into a single integer, the comparison operation of a pair
of calling contexts is transformed to an integer comparison.
By storing all the VCCIDs into a hash table, a buffer being
allocated can be identiﬁed as vulnerable or not in O(1) time.
The calling-context sensitive defense has two major bene-
ﬁts. First, the VCCID can be used to precisely guide security
enhancement to vulnerable objects during program execution.
This avoids a global enhancement and minimizes the perfor-
488488
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
Program
vsftpd
Nginx
MySQL
Unique allocation CCIDs
176
1361
8180
TABLE I: Unique allocation calling contexts of three service
programs in one execution. The inputs used to obtain this result
are described in Section V-B. Note that the total number of
unique allocation calling contexts in these programs should be
much larger, and can be approximated using a test suite with
high code coverage.
Head 
canary
CCID
Buffer 
size
User buffer
Tail 
canary
Fig. 6: Buffer structure I: a buffer structure for over-write
detection.
mance overhead. To further understand this beneﬁt, we create
a proﬁler to collect unique allocation calling contexts of three
service programs during normal execution, and display the
result in Table I. Given a vulnerability, typically only one of
them is vulnerable, and the calling-context sensitive defense
will apply enhancements to buffers with that vulnerable calling
context only.
The second beneﬁt is that the calling context information
captures certain semantic invariants of a vulnerability. Given
a vulnerability, no matter how a piece of attack code is
obfuscated, the corresponding calling context information can
be used to defend against polymorphic attacks.
Next, we explain how HeapTherapy detects and diagnoses
buffer over-write and over-read attacks.
will be identiﬁed as VCCID. In rare cases, multiple over-write
vulnerabilities exist and are exploited simultaneously. In such
cases, the same detection and diagnosis procedure is applied to
each of them. A patch is then generated based on the VCCID
to defeat attacks exploiting the same over-write vulnerability,
which is discussed later.
3) Discussion .
Although canaries have proven effective in practice, this
approach has several limitations. First, there have been attacks
revealing canaries, for example, the format string attack and
attacks based on repetitive probings that guess the canary value
byte by byte. The format string bugs have been largely reduced
recently. Plus, each canary in our system is an XOR of the
canary address and a value randomly assigned at the program
start; thus, given a revealed canary, it is still difﬁcult to guess
the canary of another buffer. A single probing attack has a
very low probability to succeed, while HeapTherapy generates
a defense once a single probing is detected.
Second, HeapTherapy checks canaries only when a buffer
is deallocated. An advanced attack may have hijacked the con-
trol ﬂow before the canary checking is conducted. However,
due to the wide deployment of ASLR, the attacker usually
needs a large number of tries before a successful control ﬂow
hijack. Other attacks that increase the chance of bypassing
ASLR exist, for example, heap spraying attacks. With the
improvement of ASLR itself as well as other defenses, such as
Data Execution Prevention and Nozzle [35], it is increasingly
difﬁcult to achieve control hijacking with a single over-write
attempt. Again, HeapTherapy reacts upon a single failed at-
tempt by generating a patch to defeat further attacks. In this
sense, HeapTherapy complements ASLR for enhancing heap
security.
B. Buffer Over-write Detection and Diagnosis
C. Buffer Over-read Detection and Diagnosis
1) Buffer Structure .
To detect buffer over-write, HeapTherapy interposes the
allocation functions of the underlying memory allocator to
surround each buffer that has not been associated with an
overﬂow vulnerability with a head canary and a tail canary,
and ﬁlls the allocation CCID and buffer size after the head
canary. The buffer size indicates the number of bytes in a user
buffer. A buffer size is always a multiple of the word size, so
we borrow the last two bits of the buffer size ﬁeld to indicate
the buffer type; other types of buffers are introduced later.
Figure 6 shows the layout of such a buffer.
.
2) Detection and Diagnosis
Before a buffer is freed, HeapTherapy checks the tail
canary of the buffer and terminates the program if the canary is
corrupted. An attack may exploit an over-write vulnerability to
hijack the control ﬂow, which upon success can evade the pre-
deallocation checking. However, due to ASLR such an attack
will trigger a segmentation fault signal highly probably, which
is also considered as a successful detection. In both cases,
a core dump ﬁle is generated at the time of detection. Then
our diagnosis engine scans the core dump for a buffer with
an intact head canary but a corrupted tail canary. This buffer
is the origin of this over-write attack, and its CCID value
Since a buffer over-read does not corrupt canaries, checking
canaries cannot be used to detect it. Other techniques, such
bounds checking, incur a very high overhead. We propose to
place guard pages probabilistically between heap buffers to
detect heap over-read attacks.
1) Buffer Structure .
A guard page is a memory page set as inaccessible using,
for example, mprotect in Linux. A naive over-read detection
approach, as in Electric Fence [32], is to append a guard
page to every buffer, then any over-read will touch a guard
page and trigger a segmentation fault. However, this would
incur a prohibitively high performance overhead. HeapTherapy
attaches a guard after a buffer with a monitoring probability
Pm, which is a small value such as 0.01. A higher Pm offers
a higher chance to detect any single buffer over-reads, but
also incurs a higher overhead. The user can determine this
probability according to its own preference of the trade-off
between security and performance.
Figure 7 shows the structure of a monitored buffer. The user
buffer is placed with its end aligned with the page boundary
followed by a guard page, which contains a magic word and the
allocation CCID for diagnosis and patch generation purposes.
489489
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:54:20 UTC from IEEE Xplore.  Restrictions apply. 
Page 
boundary
Guard page
Buffer with 
canaries
GUARD
_MAGIC CCID
Fig. 7: Buffer structure II: a buffer structure for over-read
detection.
Vulnerable
buffer
Over-read
length
...