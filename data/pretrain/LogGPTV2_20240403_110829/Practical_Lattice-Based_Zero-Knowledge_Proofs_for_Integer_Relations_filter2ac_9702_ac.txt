If m, β = poly(n), and q > β · (cid:101)O(
as worst-case lattice problem SIVPγ for some γ = β · (cid:101)O(
∞
n,m,q,β problem is at least as hard
nm) (see, e.g., [27][55]).
We will use two SIS-based cryptographic ingredients: the commitment scheme
of Kawachi, Tanaka and Xagawa [40] (KTX) and the Merkle hash tree from [45].
n), the SIS
√
√
,
q
√
q
q
If one can compute two valid openings (x(cid:48)
0, . . . , x(cid:48)
one samples r ←(cid:45) U ({0, 1}m), and outputs c =(cid:80)L−1
The KTX commitment scheme. The scheme works with security parameter
n, prime modulus q = O(
L · n), and dimension m = n((cid:100)log2 q(cid:101) + 3). We will
consider several ﬂavours of the scheme.
In the variant that allows committing to L ≤ poly(n) bits, the commitment
key is (a0, . . . , aL−1, B) ←(cid:45) U (Zn×(m+L)
). To commit to a bitstring x0, . . . , xL−1,
i=0 ai·xi +B·r mod q. Then, to
open the commitment, one simply reveals x0, . . . , xL−1 ∈ {0, 1} and r ∈ {0, 1}m.
L−1, r(cid:48)(cid:48))
L−1, r(cid:48)) and (x(cid:48)(cid:48)
for the same commitment c, where (x(cid:48)
L−1), then one can
∞
compute a solution to the SIS
n,m+L,q,1 problem associated with the uniformly
random matrix [a0 | . . . | B] ∈ Zn×(m+L)
binding, assuming the worst-case hardness of SIVP(cid:101)O(
. Thus, the scheme is computationally
L·n). On the other hand, by
the Leftover Hash Lemma [30], the distribution of a commitment c is statistically
close to uniform over Zn
in which case it can use a small modulus q = (cid:101)O(n) and rely on a weak SIVP
assumption with γ = (cid:101)O(n).
In the special case when L = 1, the scheme becomes a bit commitment scheme,
q . This implies that the scheme is statistically hiding.
0, . . . , x(cid:48)
L−1) (cid:54)= (x(cid:48)(cid:48)
0 , . . . , x(cid:48)(cid:48)
0 , . . . , x(cid:48)(cid:48)
√
Kawachi et al. [40] extended the above ﬁxed-length commitment scheme to a
string commitment scheme COM : {0, 1}∗ × {0, 1}m → Zn
q . The obtained scheme
binding assuming that SIVP(cid:101)O(n) is hard.
is also statistically hiding for the given setting of parameters, and computationally
9
Here, we will use the ﬁrst commitment variant to commit to secret bits and
the string commitment scheme COM as a building block for Stern-like protocols.
collision-resistant hash function. Let n be the security parameter, q = (cid:101)O(n),
Lattice-based Merkle hash tree. The construction relies on the following
k = n(cid:100)log2 q(cid:101) and m = 2k. Deﬁne the “powers-of-2” matrix
G = In ⊗ [1 2 4 . . . 2(cid:100)log2 q(cid:101)−1] ∈ Zn×k
.
q
q , we have v = G · bin(v), where bin(v) ∈ {0, 1}k
Note that for every v ∈ Zn
denotes the binary representation of v.
function hB : {0, 1}k × {0, 1}k → {0, 1}k as follows:
For matrix B = [B0 | B1] ←(cid:45) U (Zn×m
(u0, u1) (cid:55)→ hB(u0, u1) = bin(cid:0)B0 · u0 + B1 · u1 mod q(cid:1).
, deﬁne the
), where B0, B1 ∈ Zn×k
q
q
Note that hB(u0, u1) = u ⇔ B0 · u0 + B1 · u1 = G · u mod q. This hash
function was shown collision-resistant if SIVP(cid:101)O(n) is hard [2,45]. It allows building
Merkle trees to securely accumulate data. In particular, for an ordered set
S = {d0, . . . , d2(cid:96)−1} consisting of 2(cid:96) ∈ poly(n) elements of bit-size k, one builds
the binary tree of depth (cid:96) on top of elements of the set, as follows. First, associate
the 2(cid:96) leaf nodes with elements of the set, with respect to the order of these
elements. Then, every non-leaf node of the tree is associated with the hash value
of its two children. Finally, output the root of the tree u ∈ {0, 1}k. Note that,
the collision resistance of the hash function hB guarantees that it is infeasible to
ﬁnd a tree path starting from the root u and ending with d(cid:48) (cid:54)∈ S.
2.2 Zero-Knowledge Argument Systems and Stern-like Protocols
We will work with statistical zero-knowledge argument systems, where remain
zero-knowledge for any cheating veriﬁer while the soundness property only holds
against computationally bounded cheating provers. More formally, let the set
of statements-witnesses R = {(y, w)} ∈ {0, 1}∗ × {0, 1}∗ be an NP relation. A
two-party game (cid:104)P,V(cid:105) is called an interactive argument system for the relation
R with soundness error e if the following conditions hold:
– Completeness. If (y, w) ∈ R then Pr(cid:2)(cid:104)P(y, w),V(y)(cid:105) = 1(cid:3) = 1.
– Soundness. If (y, w) (cid:54)∈ R, then ∀ PPT (cid:98)P: Pr[(cid:104)(cid:98)P(y, w),V(y)(cid:105) = 1] ≤ e.
simulator S(y) having oracle access to any (cid:98)V(y) and producing a simulated
P(y, w) and (cid:98)V(y). A related notion is argument of knowledge, which requires
An argument system is called statistical zero-knowledge if there exists a PPT
transcript that is statistically close to the one of the real interaction between
the witness-extended emulation property. For protocols consisting of 3 moves
(i.e., commitment-challenge-response), witness-extended emulation is implied by
special soundness [33], where the latter assumes that there exists a PPT extractor
which takes as input a set of valid transcripts with respect to all possible values of
the “challenge” to the same “commitment”, and outputs w(cid:48) such that (y, w(cid:48)) ∈ R.
10
The statistical zero-knowledge arguments of knowledge presented in this work
are Stern-like [60] protocols. In particular, they are Σ-protocols in the general-
ized sense deﬁned in [38] (where 3 valid transcripts are needed for extraction,
instead of just 2). The basic protocol consists of 3 moves: commitment, challenge,
response. If a statistically hiding and computationally binding string commitment
scheme, such as the KTX scheme [40], is employed in the ﬁrst move, then one
obtains a statistical zero-knowledge argument of knowledge (ZKAoK) with perfect
completeness, constant soundness error 2/3. In many applications, the protocol
is repeated κ = ω(log n) times to make the soundness error negligibly small in n.
3 A General Zero-Knowledge Argument of Knowledge
This section presents a general Stern-like zero-knowledge argument system that
subsumes all the subsequent constructions in Sections 4, 5 and 6. Before describing
the protocol, we ﬁrst recall two previous Stern-like techniques that it will use.
3.1 Some Previous Extending-then-Permuting Techniques
Let us recall the techniques for proving knowledge of a single secret bit x, and for
proving knowledge of bit product x1 · x2, from [45] and [43], respectively. These
techniques will be employed in the protocol presented in Section 3.2.
For any bit b ∈ {0, 1}, denote by b the bit b = b + 1 mod 2, and by ext2(b) the
2-dimensional vector (b, b) ∈ {0, 1}2.
For any bit c ∈ {0, 1}, deﬁne P 2
c as the permutation that transforms the
integer vector v = (v0, v1) ∈ Z2 into P 2
c (v) = (vc, vc). Namely, if c = 0 then P 2
c
keeps the arrangement the coordinates of v; or swaps them if c = 1. Note that:
v = ext2(b) ⇐⇒ P 2
c (v) = ext2(b + c mod 2).
(3)
As shown in [45], the equivalence (3) helps proving knowledge of a secret bit x
that may appear in several correlated linear equations. To this end, one extends
x to ext2(x) ∈ {0, 1}2, and permutes the latter using P 2
c , where c is a uniformly
random bit. Seeing the permuted vector ext2(x + c mod 2) convinces the veriﬁer
that the original vector ext2(x) is well-formed – which in turn implies knowledge
of some bit x – while c acts as a “one-time pad” that completely hides x.
To prove that a bit is the product x1 · x2 of two secret bits, Libert et al. [43]
introduced the following t echnique. For any two bits b1, b2, deﬁne
ext4(b1, b2) = ( b1 · b2, b1 · b2, b1 · b2, b1 · b2 ) ∈ {0, 1}4,
which is an extension of the bit product b1 · b2. Next, deﬁne a speciﬁc type of
permutation associated with two bits, as follows.
forms the integer vector v = (v0,0, v0,1, v1,0, v1,1) ∈ Z4 into
For any two bits c1, c2 ∈ {0, 1}, deﬁne P 4
as the permutation that trans-
(v) =(cid:0)vc1,c2, vc1,c2, vc1,c2, vc1,c2
c1,c2
(cid:1) ∈ Z4.
P 4
c1,c2
11
For any bits b1, b2, c1, c2 and any vector v = (v0,0, v0,1, v1,0, v1,1) ∈ Z4, we have
c1,c2
(v) = ext4(b1 + c1 mod 2, b2 + c2 mod 2).
v = ext4(b1, b2) ⇐⇒ P 4
(4)
As a result, to prove the well-formedness of x1 · x2, one can extend it to the
vector ext4(x1, x2), permute the latter using P 4
, where c1, c2 are uniformly
random bits, and send the permuted vector to the veriﬁer who should be convinced
that the original vector, i.e., ext4(x1, x2), is well-formed, while learning nothing
else about x1 and x2, thanks to the randomness of c1 and c2. Furthermore, this
sub-protocol can be combined with other Stern-like protocols, where one has to
additionally prove that x1, x2 satisfy other conditions. This is done by using the
same “one-time pads” c1, c2 at all occurrences of x1 and x2, respectively.
c1,c2
3.2 Our General Protocol
Let N, m1, m2 be positive integers, where m1 ≤ N . Let T = {(i1, j1), . . . , (i|T|, j|T|)}
be a non-empty subset of [N ]× [N ]. Deﬁne d1 = 2(m1 + m2), d2 = 2N + 4|T| and
d = d1 + d2. Let n1 ≤ d1, n2 ≤ d2 and q > 2 be positive integers. The argument
system we aim to construct can be summarized as follows.
Public input consists of g1, . . . , gm1, b1, . . . , bm2, u1 ∈ Zn1
{h(cid:96),k} ((cid:96),k) ∈ [n2]×[N ];
{f(cid:96),t} ((cid:96),t) ∈ [n2]×[ |T| ];
q and
v1, . . . , vn2 ∈ Z2.
Prover’s witness is (N + m2)-bit vector s = (s1, . . . , sm1, . . . , sN , . . . , sN +m2 ).
Prover’s goal is to prove in zero-knowledge that:
1. The ﬁrst m1 bits s1, . . . , sm1 and the last m2 bits sN +1, . . . , sN +m2 satisfy
the following linear equation modulo q.
gi · si +
bj · sN +j = u1 mod q.
(5)
(cid:88)
i∈[m1]
(cid:88)
j∈[m2]
N(cid:88)
|T|(cid:88)
2. The ﬁrst N bits s1, . . . , sm1 , . . . , sN satisfy the following n2 equations modulo
2 that contain N linear terms and a total of |T| quadratic terms {sit · sjt}|T|
t=1.
∀(cid:96) ∈ [n2] :
h(cid:96),k · sk +
f(cid:96),t · (sit · sjt ) = v(cid:96) mod 2.
(6)
k=1
t=1
Looking ahead, all the statements that we will consider in Sections 4, 5 and 6
can be handled as special cases of the above general protocol, which will serve as
an “umbrella” for all of our subsequent constructions.
As a preparation for the protocol construction, let us ﬁrst introduce a few
notations and techniques.
Encoding vector ENC(·). In the protocol, we will work with a binary vector
of length d that has a very speciﬁc constraint determined by N + m2 bits. For
12
any b = (b1, . . . , bm1, . . . , bN , . . . , bN +m2) ∈ {0, 1}N +m2, we denote by ENC(b) ∈
{0, 1}d the vector encoding b as follows:
ENC(b) =(cid:0) ext2(b1) (cid:107) . . .(cid:107) ext2(bm1)(cid:107) ext2(bN +1)(cid:107) . . .(cid:107) ext2(bN +m2)
(cid:107) ext2(b1) (cid:107) . . .(cid:107) ext2(bN ) (cid:107) ext4(bi1, bj1 ) (cid:107) . . .(cid:107) ext4(bi|T| , bj|T |)(cid:1),
where ext2(·) and ext4(·,·) are as in Section 3.1.
Permutation Γ . To prove in zero-knowledge of a vector that has the form
ENC(·), we will need to a speciﬁc type of permutation. To this end, we associate
each c = (c1, . . . , cN , . . . , cN +m2 ) ∈ {0, 1}N +m2 with a permutation Γc that acts