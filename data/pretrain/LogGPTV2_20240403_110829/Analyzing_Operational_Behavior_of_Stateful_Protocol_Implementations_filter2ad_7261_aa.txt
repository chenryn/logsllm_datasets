title:Analyzing Operational Behavior of Stateful Protocol Implementations
for Detecting Semantic Bugs
author:Md. Endadul Hoque and
Omar Chowdhury and
Sze Yiu Chau and
Cristina Nita-Rotaru and
Ninghui Li
Analyzing Operational Behavior of Stateful Protocol
Implementations for Detecting Semantic Bugs
Endadul Hoque†, Omar Chowdhury∗, Sze Yiu Chau†, Cristina Nita-Rotaru‡, and Ninghui Li†
†Purdue University, West Lafayette, Indiana, USA. e-mail: {mhoque,schau,ninghui}@purdue.edu
∗University of Iowa, Iowa City, Iowa, USA. e-mail: PI:EMAIL
‡Northeastern University, Boston, Massachusetts, USA. e-mail: PI:EMAIL
Abstract—Network protocol
implementations must comply
with their speciﬁcations that include properties describing the
correct operational behavior of the protocol
in response to
different temporal orderings of network events. Due to in-
consistent interpretations of the speciﬁcation, developers can
unknowingly introduce semantic bugs, which cause the imple-
mentations to violate the respective properties. Detecting such
bugs in stateful protocols becomes signiﬁcantly difﬁcult as their
operations depend on their internal state machines and the
complex interactions between the protocol logic. In this paper,
we present an automated tool to help developers analyze their
protocol implementations and detect semantic bugs violating the
temporal properties of the protocols. Given an implementation,
our tool (1) extracts the implemented ﬁnite state machine (FSM)
of the protocol from the source code by symbolically exploring the
code and (2) determines whether the extracted FSM violates given
temporal properties by using an off-the-shelf model checker. We
demonstrated the efﬁcacy of our tool by applying it on 6 protocol
implementations. We detected 11 semantic bugs (2 with security
implications) when we analyzed these implementations against
properties obtained from their publicly available speciﬁcations.
I. INTRODUCTION
Network protocol implementations must comply with prop-
erties usually described in informal prose speciﬁcations (e.g.,
RFC standards), which often become highly complex for state-
ful protocols. For instance, the speciﬁcation of the Transport
Layer Security (TLS) protocol [1] dictates the chronological
sequence (the temporal order) in which the client and the
server must exchange messages to complete a handshake be-
fore establishing a secure connection. By not complying with
speciﬁcations, implementations can cause incorrect operational
behavior, interoperability issues, or critical security vulnerabil-
ities, and thus result in noncompliance. Such noncompliance
instances are primarily due to semantic bugs [2], which cause
implementations to violate the properties (high-level functional
speciﬁcation) of the respective protocol and behave incorrectly.
Consider the “CCS Injection” vulnerability (CVE-2014-
0224), an example semantic bug, in the TLS implementation
of OpenSSL [3] where it accepts a ChangeCipherSpec (CCS)
message even if the CCS does not appear in the prescribed
order. By exploiting this vulnerability, a man-in-the-middle
attacker can obtain sensitive information or hijack the con-
nection completely. Semantic bugs are not only limited to
secure protocol implementations for general-purpose operating
systems (e.g., Linux), but prevail also in implementations
of non-secure protocols developed for resource constrained
devices (e.g., Internet-of-Things) [4].
Detecting semantic bugs through manual inspection of a
stateful protocol implementation is a cumbersome and error-
prone task because shared variables and protocol states com-
plicate the interactions between the code fragments that handle
different network events (e.g., arrival of a packet, occurrence
of timeout). As a result, dangerous semantic bugs can remain
undetected for years. For instance, the CCS Injection bug
was present in OpenSSL for more than a decade. Hence, it
is crucial to build automated techniques to assist developers
detect semantic bugs in their protocol implementations.
in silent
Some type of semantic bugs in protocol implementations
are difﬁcult to detect automatically by applying well-known
techniques like fuzzing or software model checking in a
straight-forward manner. We outline three primary reasons
as follows: (C1) Silent incorrect behavior: Many semantic
bugs do not display any externally discernible erroneous effect
(e.g., crash) but result
incorrect behavior – for
example, accepting a packet unexpected in a particular context.
This demands a precise analysis of the internal interactions
between the protocol logic. (C2) Delayed discernible effects:
In case a semantic bug produces some discernible effects,
they are usually exhibited far away from the actual source
location of the bug. This calls for precise identiﬁcations of the
buggy execution paths of the protocol implementation. (C3)
History dependent: These bugs are triggered during stateful
processing of network events. This emphasizes the need to
check temporal behavior of the protocol that are sensitive to
the history and the chronological ordering of network events.
Prior work on detecting bugs in protocol implementations
used fuzzing [5], [6] to detect the CCS Injection bug. However,
fuzzing tools are limited to detecting only bugs with externally
discernible effects. They cannot detect bugs that have silent
incorrect behavior, nor can they point out the location of the
bug. Tools speciﬁcally designed for network protocols like
[7]–[9] applied software model checking directly on protocol
implementations to detect bugs that violate state invariants
(i.e., properties that must hold in all reachable states of the
program, irrespective of any temporal behavior). Thus these
tools could not detect bugs causing violations of properties
that depend on the chronological ordering of network events.
In this paper, we aim to automatically analyze a given
protocol implementation and detect semantic bugs that violate
properties describing the temporal behavior of the protocol;
hence we call them temporal properties. We observe that
semantic bugs often lie in the code fragments that handle
how the protocol implementation reacts to network events
(e.g., by changing the protocol’s internal state or by sending a
response). Such reactions of the protocol are described as ﬁnite
state machines (FSMs) in informal prose speciﬁcations, either
explicitly (e.g., DHCP, TCP) or implicitly (e.g., Telnet, TLS).
While implementations intend to closely follow the speciﬁed
FSMs, the informal descriptions of the FSMs often leave room
for inconsistent interpretations giving rise to errors related
to state machines. Hence, in our analysis, we concentrate
on the event handling portions of the implementation, which
encompasses the implemented FSM. Our approach allows us
to detect semantic bugs that have silent incorrect behavior (C1)
or delayed discernible effects (C2) as the implemented FSM
allows us not only to observe the internal (possibly silent)
interactions of the protocol but also to identify buggy execu-
tion paths. Our approach also allows us to detect bugs that
are history dependent (C3) by reasoning about the temporal
properties of the protocol related to the implemented FSM
since semantic bugs often manifest during stateful processing
of events.
Given an event-driven implementation of a stateful network
protocol, we show, in this paper, that it is possible to au-
tomatically extract the implemented FSM from the source
and use it to detect semantic bugs violating given temporal
properties. We design and develop CHIRON,1 an automated
tool that enables a developer to check whether a protocol
implementation violates the (user provided) desired temporal
properties and thus detect the corresponding semantic bugs.
In a nutshell, CHIRON’s approach consists of two steps: (a)
extracting the implemented FSM from the source (which we
call the E-FSM), and (b) model checking the E-FSM against
desired temporal properties.
For detecting semantic bugs, we must analyze the proto-
col FSM implemented in the protocol source by precisely
capturing the relevant implementation details along with the
chronological network events. Clearly, manual extraction is
impractical and error-prone. Therefore, we devise an FSM
extraction technique that takes as input the protocol source
(written in C) along with some meta-information provided
by the developer and outputs an approximated protocol FSM
(i.e., E-FSM) implemented in the source. Our technique is
based on symbolic execution [10], which precisely simulates
a program’s execution with symbolic inputs and explores all
possible execution paths. However, to circumvent the path-
explosion problem often plaguing off-the-shelf symbolic exe-
cution tools, we devise a protocol state aware path exploration
technique that dynamically prunes redundant execution paths.
the temporal properties of a protocol
typically involves stateful processing of an arbitrarily long
sequence of network events. Writing these properties as code
snippets (perhaps, in C) is invariably ponderous as the snip-
We observe that
1In Greek mythology, CHIRON was considered to be the wisest centaur
pets need to explicitly maintain the history of the protocol
execution. Instead, we use temporal logic formulas [11] as
they provide the ﬂexibility of expressing temporal properties
in a concise and ﬁne-grained fashion. To check whether the
E-FSM violates the temporal properties, we use an off-the-
shelf model checker. In case of a violation, the model checker
generates a counterexample (CEX) as evidence. A CEX is an
execution of the protocol demonstrating the violation. Due to
the abstractions in our analysis, the generated CEX may not
be realizable in an actual execution of the protocol. Hence,
we devise a validation technique to rule out such false CEXs.
We implemented CHIRON and demonstrated its efﬁcacy by
applying it to a total of 6 implementations of 3 protocols: one
secure protocol (TLS [1]) and two non-secure protocols (Telnet
[12] and DHCP [13]). For TLS, we used the implementation
from the OpenSSL library developed for general purpose
operating systems (e.g., Linux). CHIRON’s general approach
allows us to apply it to protocols implemented for Internet-
of-Things (IoT) devices. Therefore, for Telnet and DHCP,
we used several implementations from two separate TCP/IP
protocol stacks designed for IoT devices: uIP [14] and FNET
[15]; they are widely used but have not been extensively
studied. To evaluate, we used 6 properties for TLS, 11 for
Telnet, and 7 for DHCP; all are derived from their respective
RFCs and documentation. We discovered 11 semantic bugs in
total, 2 of which have security implications.
Contributions. Our work shares a common vision with sim-
ilar efforts advocating the application of formal methods to
improve the security of systems [16] and makes the following
technical contributions:
• We present an automated tool, CHIRON, to help developers
detect semantic bugs in their protocol implementations when
analyzed against the given temporal properties.
• We devise a technique that automatically extracts the E-FSM
from the source of a stateful, event-driven protocol with
minimal user guidance.
• We show the efﬁcacy of CHIRON by testing 6 imple-
mentations of 3 protocols against 24 properties and by
uncovering 11 semantic bugs, 2 of which have critical
security implications.
II. PROBLEM AND BACKGROUND
Detecting semantic bugs in a protocol implementation by
checking for compliance with its full speciﬁcations is a long-
standing challenging problem due to two reasons. First, pro-
tocol speciﬁcations (e.g., RFCs), are not usually formalized in
any form, leading to inherent ambiguities and leaving room
for multiple interpretations [7], [17]. Secondly, a protocol
implementation running on one host,
interacts with other
(possibly, remote) peer(s) to achieve its goals. Performing a
joint analysis of all the peers has an ampliﬁed complexity
due to diverse and independent implementations of the same
protocol available in the wild.
We focus on checking the temporal properties that prescribe
the correct operational behavior of the protocol in response to
network events (e.g., arrival of a packet, timeout). Semantic
bugs violating such properties are due to logical ﬂaws in
the execution ﬂow of the protocol
implementation, which
are different from low-level errors (e.g., null dereferencing,
memory leak). We analyze the implementation of only one
peer (e.g., client) of the protocol while considering the other
peer (e.g., server) as symbolic. Instead of proving satisfaction,
we intend to ﬁnd violations of the given properties in the pro-
tocol implementation—a common practice in software model
checking [7], [18].
Protocol implementations. Interactions between protocol im-
plementations rely on either client-server or peer-to-peer com-
munication. Regardless of how they communicate, a protocol
implementation typically follows the event-driven program-
ming paradigm in which the implementation is centered on
executing appropriate protocol logic (known as event handlers)
in response to the occurred network events, causing the ﬂow
of the protocol execution to be determined by these events.
loop) that
Such an implementation usually contains a main loop
(called the event
listens for a list of network
events (e.g., arrival of a packet, connection). These events are
predeﬁned by the underlying protocol stack (e.g., TCP/IP) and
often abstracted away from the developer via a socket API
library. Some of these events notify about the incoming data
(e.g., a protocol message). The event handler that is invoked to
process an event may send a message as a response by utilizing
the underlying socket function (e.g., send for TCP/IP). The
handler may also update the protocol state, which consists of
the values assigned to the variables encoding the semantic state
of the protocol. We call these variables state variables.
In this paper, we focus on analyzing the source code of
an event-driven implementation of a stateful protocol. For a
client-server protocol (e.g., TLS), we require the source code
of the client (or server) implementation if the developer wants
to analyze the client (or server) since we analyze only one
end of the protocol in isolation. We also make no assumption
about how the other peer would behave since we consider
it as symbolic. In addition, we expect the provided source
to have the event loop inside a function, which we call the
event dispatcher function. As will be seen later, this function
serves as the entry point for our analysis. Should there exist
no explicit event dispatcher function (common for embedded
systems), a test harness can easily be added to create one.
An example of a semantic bug. To illustrate the conceptual
ideas behind our approach with a simple semantic bug, we use
a ﬁctitious but plausible example of a protocol (see Fig.1). The
FSM speciﬁcation (Fig.1(a)) describes that the protocol must
start at the READY state, move to WAITING after receiving
a REQ, and stay there until it receives an ACK. However, the
implementation of the protocol (Fig.1(b)) violates the property
when it fails to move back to READY after receiving an ACK
due to a semantic bug (i.e., the incorrect assignment to state
at line 7). CHIRON extracts the underlying FSM implemented
in the actual source and reasons about the temporal behavior
of the protocol with respect to the extracted FSM.
Problem deﬁnition. Given an event-driven protocol imple-
mentation I and a temporal property ϕ, CHIRON aims to
start
recv REQ/send RES
timeout/reXmit
READY
WAITING
recv ACK/-
(a) The protocol FSM described in the speciﬁcation
1
2
3
4
5
6
7
8
9
10
void h a n d l e _ r e c v _ m e s s a g e ( P a c k e t _ T y * p ) {
if (p - > type == REQ && state == READY ) {
s e n d _ r e s () ; /* send RES */
state = W A I T I N G ;
}
else if (p - > type == ACK && state ==
W A I T I N G ) {
state = W A I T I N G ; /* S e m a n t i c bug */
}
else { /* i g n o r e the p a c k e t */ }
}
(b) Simpliﬁed code snippet from the implementation
Fig. 1: The implementation of our example protocol manifests a
semantic bug (at line 7) violating with the speciﬁcation