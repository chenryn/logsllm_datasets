The attribute graphs we use as our underlying abstraction
allow easy extension, either to add protocols, or to program-
matically deﬁne network attributes.
An example is adding a new routing protocol such as IS-
IS, which requires three steps: adding an isis overlay graph
using the high-level API; extending the device compiler to
condense the overlay attributes into the Resource Database;
and creating the text template for the resulting conﬁgura-
tion. Each step is modular: the attribute graph approach
reduces supporting a new protocol or service to its inherent
complexity. Basic IS-IS support requires 2 lines of design
code, and 15 lines in the compiler.
7.1 Hierarchical iBGP
The simplest iBGP design, a full-mesh, requires O(n2)
connections. One way to solve this scalability problem is to
as20r2as20r3as1r1as30r1as40r1as20r1as100r1as100r2as100r3as200r1as300r2as300r4as300r3as300r1244use route-reﬂectors [3]. Here we discuss two ways of imple-
menting route-reﬂector hierarchies.
Nodes can be labelled as route-reﬂectors by adding an
boolean attribute, rr, set to true (or false if a client). The
iBGP overlay topology is then constructed based on these
attributes, by adding a session between all (rr, rr) and (rr,
client) pairs. This constructs an iBGP hierarchy congruent
with the physical network (recommended to avoid oscillation
problems§ 7.2).
Since the designation of a router to be a route-reﬂector
is attribute-based, it can be automated to allow algorith-
mic design. The unwrap_graph function is used to access
the underlying NetworkX graph, to which a centrality algo-
rithm such as degree_centrality is applied, and the results
ﬁltered to select the most central routers. As the underlying
graph is indexed by node ids, the querying syntax is used
access the API for the node: for instance, G_ip.node(’UK’)
will return an overlay node for the UK node id. The API
is the used to mark these routers are being route-reﬂectors,
and apply the same edge connection logic as before.
Combining the attribute-based conﬁguration approach with
NetworkX graph algorithms enables powerful and succinct
extensions for network design and analysis.
7.2 Validating Theory: Bad Gadget
The system can also be extended to validate networking
theory, such as the subtle problems in protocols, particularly
those resulting from protocol interactions.
One such interaction is that of routing oscillations, such
as in Bad-Gadget [20], whereby a routing protocol never
converges to a ﬁxed, consistent set of forwarding decisions.
Bad-Gadget is an abstraction of the action of the BGP, but
such oscillation has been observed in conjunction with the
Multi-Exit Discriminator (MED) [21] Even if MED use is
disabled, oscillation can occur at interaction between the
IGP and BGP routing protocols. This type of interaction
can be hard to simulate.
While this is an old problem, to illustrate the experimental
approach in the spirit of [23], we re-created it in emulation.
Edge and nodes attributes were assigned graphically, and
setup took less than ﬁve minutes. This allows the researcher
to concentrate on their experiment, rather than setting up
the laboratory. This can be used to demonstrate the poten-
tial to oscillate using repeated, automated traceroutes.
The system made it easy to implement the same network
model on diﬀerent types of router. We did so on Quagga,
IOS, Junos, and C-BGP. Oscillations were observed in the
last three, but not in Quagga.
Investigation revealed this
was due to the Quagga implementation of BGP, where the
IGP tie-break wasn’t used by default. This shows the im-
portance of emulation: a simulated model of the idealised
BGP decision process would not have shown this behaviour.
The result highlights a requirement of emulation toolkits:
the importance of using multiple platforms to verify results
and to allow such comparisons.
7.3 Further Extensions
Atribute graphs can be extended beyond the basic Python
primitive data types. By using Python and NetworkX, the
extensions can leverage both the Python package library and
NetworkX algorithms, alllowing custom plugins to be cre-
ated for resource allocation (such as a new IP addressing
scheme) or network analysis.
One especially complex network conﬁguration task is ex-
pressing routing policy, used to inﬂuence the routing decision
process to meet business and engineering goals. There exist
both tools to assist this process [35] and studies into routing
policy [6, 15]. Due to both the complexities of routing pol-
icy [15] and the number of existing tools in the area, we do
not speciﬁcally attempt to automate routing policy. Instead,
our approach of attribute graphs allows existing tools to be
integrated. The routing policy can be stored as a string
attribute on the edge in the iBGP topology graph (simi-
lar to the conﬁglet approach of
[6]), or use attributes that
are transformed in the compiler. The string policy could
be generated using an existing tool by passing the topol-
ogy (as a graph) to the external tool, and then storing the
returned policy onto the edges, which are stored in the Re-
source Database and written in the templates.
Another extension is integration with external network de-
vices, either emulated or physical hardware. An advantage
of emulation over simulation is that real packets — not sim-
ulations representing packets as internal data structures —
are passed between devices. This allows integration with ex-
ternal networks, including services running on the emulation
host (such as for scripting or a BGP feed), or connection to
a set of lab hardware. In Netkit this external connectivity
can be implemented using the vde switch package.
Finally, supporting a new target platform is a matter of
inheriting the base device compiler (due to inheritance this
could even build on one of our example compilers), and
building the test-based render template. Multi-ﬁle conﬁgu-
rations can be rendered using our template folder structure.
This ease of adding platform support is enabled through
the compiler to condense the overlay design graphs into the
device-oriented format, and use of text-based templates.
8. CONCLUSION
Large-scale network conﬁguration is complex and error-
prone, whether conﬁguring a set of real devices, or the soft-
ware systems emulating them. This burden may be justi-
ﬁable in a commercial setting, in response to customer or
technical demand. However, research experimentation re-
quires repeatable conﬁguration operations, which only diﬀer
slightly.
Emulation provides a way to support experimentation,
testing, and “what-if” analysis, but this only reduces the ex-
pense and inconvenience of real hardware: it does not reduce
the conﬁguration burden. In this paper we have described
a system that reduces conﬁguration burden and, by the use
of abstraction, graphs, and templates provides a more man-
ageable approach to network conﬁguration at scale.
We have presented an approach which decouples network-
level design from device-level conﬁguration state. This al-
lows speciﬁcation of network-wide conﬁguration behavior,
which we believe is a key requirement to simplifying network
conﬁguration. We have also demonstrated how an approach
of conﬁguration through transformation of attribute graphs
can generate concrete router conﬁgurations, and have im-
plemented this approach in a working system.
The system is open-source, available on GitHub, and in-
stalled through the Python Package index.
It is used by
network operators, by router vendors, in University teach-
ing, and a base for published research. Our system oﬀers an
emulated experimentation platform which we hope can be
extended by the networking community in future projects.
245This would encourage sharing of expertise between industry
and researchers, and reduce the requirement for each user
to develop a home-grown conﬁguration solution.
The system can be built upon in many ways, such as creat-
ing tools to emulate workﬂow, or incidents, or adding formal
veriﬁcation. The measurement framework allows the cap-
ture and parsing of router and server status. These could be
compared to the created overlay graphs to assert deployment
success and validate experimental results. Oﬄine veriﬁca-
tion systems could be applied prior to deployment, applying
static checking [38] or stability detection [16]. Integrating
pre- and post-deployment veriﬁcation systems allows test-
driven network development [32].
Finally, the system has been designed to enable experi-
mentation on emulated networks. However, since emulation
runs the same software as hardware devices, many of the
conﬁguration complications remain the same. While aspects
such as deployment are diﬀerent, our work in abstraction
and conﬁguration oﬀers insight into broader network conﬁg-
uration challenges.
Acknowledgements
The authors wish to acknowledge support from the Aus-
tralian Research Council through ARC Linkage Grant
LP100200493, an Australian Postgraduate Award; and Cisco
Grant 2011-89493(3696).
We would like to thank the suggestions, discussions, and
coding contributions from Niklas Semmler, Askar Jaboldinov,
Benjamin Hesmans, Olivier Tilmans; and members of the
VIRL team at Cisco: Joel Obstfeld, Ed Kern, Tom Bryan,
Dan Bourque, Miroslav Los, Qiang Sheng Wang, Scott An-
derson, and Ian Wells.
We are grateful to our anonymous reviewers, and to our
shepherd Xenofontas Dimitropoulos, for their valuable feed-
back and comments. These improved the ﬁnal version of
this paper.
9. REFERENCES
[1] Starbed. http://www.starbed.org/.
[2] G. Anuzelli. Dynagen. http://www.dynagen.org.
[3] T. Bates, E. Chen, and R. Chandra. BGP route reﬂection:
An alternative to full mesh internal BGP (IBGP). RFC
4456, April 2006.
[4] S. Bellovin and R. Bush. Conﬁguration management and
security. IEEE JSAC, 27(3):268–274, 2009.
[13] J. Duerig, R. Ricci, J. Byers, and J. Lepreau. Automatic IP
address assignment on network topologies. Technical
Report Flux Technical Note FTN–2006–02, Feb. 2006.
[14] W. Enck, P. McDaniel, S. Sen, and P. Sebos. Conﬁguration
management at massive scale: System design and
experience. USENIX ’07, June 2007.
[15] N. Feamster. Detecting BGP conﬁguration faults with
static analysis. In NSDI ’05, 2005.
[16] A. Flavel and M. Roughan. Stable and ﬂexible iBGP. ACM
SIGCOMM Computer Communication Review,
39(4):183–194, 2009.
[17] Google Inc. textfsm. http://code.google.com/p/textfsm/.
[18] T. Griﬃn. The Stratiﬁed Shortest-Paths Problem (Invited
Paper). COMSNETS, Jan. 2010.
[19] T. Griﬃn and G. Huston. BGP Wedgies. Technical report,
IETF RFC 4264, Nov. 2005.
[20] T. G. Griﬃn, F. B. Shepherd, and G. Wilfong. The stable
paths problem and interdomain routing. IEEE/ACM
Transactions on Networking (TON), 10(2), Apr. 2002.
[21] T. G. Griﬃn and G. Wilfong. An analysis of the MED
oscillation problem in BGP. In ICNP, 2002.
[22] A. Hagberg, D. Schult, and P. Swart. Exploring network
structure, dynamics, and function using networkx. In 7th
Python in Science Conference, Pasadena, CA USA, 2008.
[23] N. Handigol, B. Heller, V. Jeyakumar, B. Lantz, and
N. McKeown. Reproducible network experiments using
container-based emulation. In CoNEXT ’12, Dec. 2012.
[24] Ivan Pepelnjak. Create Network Models with CML’s
AutoNetKit - ipSpace.net by @ioshints.
http://blog.ipspace.net/2013/10/create-network-models-with-
cmls.html.
[25] Juniper Networks, Inc. Junosphere User Guide. Aug. 2011.
[26] S. Knight, H. Nguyen, N. Falkner, R. Bowden, and
M. Roughan. The Internet Topology Zoo. Selected Areas in
Communications, IEEE Journal on, 29(9):1765–1775, 2011.
[27] B. Lantz, B. Heller, and N. McKeown. A network in a
laptop: rapid prototyping for software-deﬁned networks. In
Hotnets ’10, Oct. 2010.
[28] H. Nguyen, M. Roughan, S. Knight, N. Falkner,
O. Maennel, and R. Bush. How to Build Complex,
Large-Scale Emulated Networks. TridentCom, 46:3, 2011.
[29] D. Oppenheimer, A. Ganapathi, and D. A. Patterson. Why
do Internet services fail, and what can be done about it? In
(USITS ‘03), 2003.
[30] I. Phillips, O. Maennel, D. Perouli, R. Austein, C. Pelsser,
K. Shima, and R. Bush. RPKI propagation emulation
measurement: an early report. IETF Talk, July 2012.
[31] M. Pizzonia and M. Rimondini. Netkit: easy emulation of
complex networks on inexpensive hardware. In Tridentcom
2008, page 7. ICST, Mar. 2008.
[5] BGP++ Conﬁguration Utility. . http://www.ece.gatech.edu/
[32] M. Pizzonia and S. Vissicchio. Test Driven Network
research/labs/MANIACS/BGP++/bgppp_conf.html.
[6] H. Boehm, A. Feldmann, O. Maennel, C. Reiser, and
R. Volk. Design and Realization of an AS-Wide
Inter-Domain Routing Policy. pages 1–27, Mar. 2009.
[7] M. Bostock, V. Ogievetsky, and J. Heer. D3: Data-Driven
Documents . IEEE Transactions on Visualization and
Computer Graphics, 17(12), Dec. 2011.
[8] X. Chen, Z. M. Mao, and J. Van der Merwe. PACMAN: a
platform for automated and controlled network operations
and conﬁguration management. In CoNEXT ’09, Dec. 2009.
[9] Cisco Systems. Cisco Cloud Service Router 1000V Series.
http://www.cisco.com/en/US/products/ps12559/index.html.
[10] Cisco Systems. Virtual Internet Routing Lab. http://www.
cisco.com/web/solutions/netsys/CiscoLive/virl/index.html.
[11] G. Di Battista, M. Patrignani, M. Pizzonia, F. Ricci, and
M. Rimondini. NetKit-lab BGP: small-internet. In
wiki.netkit.org. Roma Tre University, May 2007.
[12] G. Di Battista and M. Rimondini. Monitoring the status of
MPLS VPN and VPLS based on BGP signaling
information. Network Operations and . . . , 2012.
Deployment. Technical report, Dipartimento di Informatica
e Automazione, Universita di Roma Tre., Mar. 2009.
[33] I. Poese, B. Frank, S. Knight, N. Semmler, and
G. Smaragdakis. PaDIS emulator: An emulator to evaluate
CDN-ISP collaboration. ACM Sigcomm Demonstration,
2012.
[34] B. Quoitin and S. Uhlig. Modeling the routing of an
autonomous system with C-BGP. Network, IEEE,
19(6):12–19, 2005.
[35] RtConﬁg. . http://irrtoolset.isc.org/wiki/RtConfig.
[36] Scalable Simulation Framework (SSF). .
http://www.ssfnet.org/homePage.html.
[37] N. Spring, R. Mahajan, D. Wetherall, and T. Anderson.
Measuring ISP topologies with rocketfuel. Networking,
IEEE/ACM Transactions on, 12(1):2–16, Feb. 2004.
[38] L. Vanbever, G. Pardoen, and O. Bonaventure. Towards
validated network conﬁgurations with NCGuard. IEEE
Internet Network Management Workshop, 2008.
246