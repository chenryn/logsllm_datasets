### Return to libc (1997)
- **Example Shellcode:**
  ```sh
  "/bin/sh"
  ```

- **Address Layout:**
  - Stack
  - Heap
  - mmap
  - Library A
  - Library B
  - Library C
  - Program Code

### Return Oriented Programming (2007)
- **Example Gadget Sequence:**
  ```assembly
  push eax
  ret
  pop eax
  ret
  pop ebx
  ret
  mov [ebx], eax
  ret
  xchg ebx, esp
  ret
  pop edi
  pop ebp
  ret
  ```

### Address Space Layout Randomization (ASLR) (2003)
- **Memory Layout:**
  - Stack
  - Heap
  - mmap
  - Library A
  - Library B
  - Library C
  - Program Code

- **Offset Fix Ups:**
  - Library Relative `0..00`: libc
  - Library Relative `0..23`: location of `system()`
  - Library Relative `0..46`: location of `printf()`

- **Randomized Virtual Addresses:**
  - `printf`: `0xdefc0b46`
  - `system`: `0xdefc0b23`

### Fine Grained ASLR (FG-ASLR)
- **Techniques:**
  - Smashing the Gadgets (2012)
  - Address Space Layout Permutation (2006)

- **Function Level FG-ASLR Example:**
  ```assembly
  mov eax, [ebp-4]
  mov ebx, [ebp-8]
  add eax, ebx
  xor ecx, ecx
  push eax
  push ebx
  push ecx
  call foo

  mov edx, [ebp-4]
  mov esi, [ebp-8]
  add edx, esi
  xor edi, edi
  push edx
  push esi
  push edi
  call foo
  ```

### Just-in-Time Code Reuse (2013)
- **Code Pointer:**
  - `0xdeadbeef`

- **4K Page:**
  - `0xdeadb000`

- **Example Assembly:**
  ```assembly
  mov eax, [ebp-4]
  mov ebx, [ebp-8]
  add eax, ebx
  push eax
  push ebx
  call 0x64616d6e
  ```

- **4K Page:**
  - `0x64616000`

### The Value of One Pointer?
- **Volcano and Hobbit: sold separately.**

### Part V: Conceal & Forget
- **C++ Virtual Function Tables:**
  - **Instance of class Dog:**
    - Vtable pointer
    - Member: name
    - Member: age
    - Member: breed

  - **Instance of class Cat:**
    - Vtable pointer
    - Member: name
    - Member: favorite catnip
    - Member: sharp claws?

  - **Function Pointers:**
    - `feed()`
    - `pet()`
    - `sound()`

  - **Class Definitions:**
    ```cpp
    class Cat : public Animal {
      void sound() {
        printf("Meow!");
      }
    };

    class Dog : public Animal {
      void sound() {
        printf("Woof!");
      }
    };
    ```

### Knights and Knaves
- **Instance of class Dog:**
  - Vtable pointer
  - Member: name
  - Member: age
  - Member: breed

- **Function Pointers:**
  - `feed()`
  - `pet()`
  - `sound()`

### Execute Only Memory
- **Code Pointer:**
  - `0xdeadbeef`

- **4K Page:**
  - `0xdeadb000`

- **Example Assembly:**
  ```assembly
  mov eax, [ebp-4]
  mov ebx, [ebp-8]
  add eax, ebx
  push eax
  push ebx
  call 0x64616d6e
  ```

### Necessary vs. Sufficient
- **Code Reuse Requirements:**
  - No ASLR: A priori knowledge of place
  - ASLR: A priori knowledge of relative place + runtime discovery of offset
  - FG-ASLR: Runtime discovery of value at discovered place

- **No Runtime Discovery:**
  - XO-M + FG-ASLR

### Contact Information
- **White Paper:**
- **Email:** PI:EMAIL
- **Twitter:** @dsThyth
- **PGP Key:**
  ```
  201a 7b59 a15b e5f0 bc37 08d3 bc7f 39b2 dfc0 2d75
  ```