will probably be better spent on tasks that are difficult to automate, and
luckily, we can use Metasploit to make exploiting known vulnerabilities
such as MS08-067 quick and painless.
starting metasploit
Let’s start Metasploit and attack our first system. In Kali Linux, Meta sploit
is in our path, so we can start it anywhere on the system. But before you
start Metasploit, you will want to start the PostgreSQL database, which
Metasploit will use to track what you do.
root@kali:~# service postgresql start
Now you’re ready to start the Metasploit service. This command creates
a PostgreSQL user called msf3 and a corresponding database to store our
data. It also starts Metasploit’s remote procedure call (RPC) server and web
server.
root@kali:~# service metasploit start
88 Chapter 4
There are multiple interfaces for using Metasploit. In this chapter
we’ll use Msfconsole, the Metasploit text-based console, and Msfcli, the
command line interface. Either interface can be used to run Metasploit
modules, though I tend to spend most of my time in Msfconsole. Start the
console by entering msfconsole.
root@kali:~# msfconsole
Don’t be alarmed if Msfconsole appears to hang for a minute or two;
it’s loading the Metasploit module tree on the fly. Once it’s finished, you’ll
be greeted by some clever ASCII art, a version listing and other details, and
an msf > prompt (see Listing 4-1).
, ,
/ \
((__---,,,---__))
(_) O O (_)_________
\ _ / |\
o_o \ M S F | \
\ _____ | *
||| WW|||
||| |||
Large pentest? List, sort, group, tag and search your hosts and services
in Metasploit Pro -- type 'go_pro' to launch it now.
=[ metasploit v4.8.2-2014010101 [core:4.8 api:1.0]
+ -- --=[ 1246 exploits - 678 auxiliary - 198 post
+ -- --=[ 324 payloads - 32 encoders - 8 nops
msf >
Listing 4-1: Starting Msfconsole
Notice in Listing 4-1 that, as of this writing, Metasploit had 1,246 exploits,
678 auxiliary modules, and so forth. No doubt by the time you read this,
these numbers will be even larger. New modules are always being added to
Metasploit, and because Metasploit is a community-driven project, anyone
can submit modules for inclusion in the Metasploit Framework. (In fact, in
Chapter 19, you’ll learn how to write your own modules and gain immortal-
ity as a Metasploit author.)
If you’re ever stuck when using Msfconsole, enter help for a list of avail-
able commands and a description of what they do. For more detailed infor-
mation about a specific command, including usage, enter help .
For example, the help information for using Metasploit’s route com-
mand is shown in Listing 4-2.
Using the Metasploit Framework 89
msf > help route
Usage: route [add/remove/get/flush/print] subnet netmask [comm/sid]
Route traffic destined to a given subnet through a supplied session.
The default comm is Local...
Listing 4-2: Help information in Metasploit
Finding metasploit modules
Let’s look at how we might use Metasploit to exploit an unpatched vulnera-
bility in our Windows XP target. We will exploit the vulnerability patched
in Microsoft Security Bulletin MS08-067. A natural question you may have
is, how do we know this patch is missing on our Windows XP target? In
subsequent chapters, we will walk through the steps of discovering this vul-
nerability as well as several others on our target systems. For now, just trust
me that this is the vulnerability we would like to exploit.
MS08-067 patched an issue in the netapi32.dll that could allow attack-
ers to use a specially crafted remote procedure call request via the Server
Message Block (SMB) service to take over a target system. This vulnerability
is particularly dangerous because it does not require an attacker to authen-
ticate to the target machine before running the attack. MS08-067 gained
eternal infamy as the vulnerability exploited by the Conficker worm, which
was widely reported in the media.
Now, if you’re familiar with Microsoft patches, you may recognize that
this one is from 2008. Considering its age, you may be surprised to learn
how often the vulnerability it patched can still lead to success in penetra-
tion testing, even today, particularly when assessing internal networks.
Metasploit’s MS08-067 module is simple to use and has a high success rate,
making it an ideal first example. Our first step in using Metasploit is to find
a module that exploits this particular vulnerability. We have a few options.
Usually, a simple Google search will find what you need, but Metasploit
also has an online database of modules (http://www.rapid7.com/db/modules/)
and a built-in search function that you can use to search for the correct
modules.
The Module Database
You can use the Metasploit search page to match Metasploit modules to
vulnerabilities by Common Vulnerabilities and Exposures (CVE) num-
ber, Open Sourced Vulnerability Database (OSVDB) ID, Bugtraq ID, or
Microsoft Security Bulletin, or you can search the full text of the module
information for a string. Search for MS08-067 in the Microsoft Security
Bulletin ID field, as shown in Figure 4-1.
90 Chapter 4
Figure 4-1: Searching the Metasploit Auxiliary Module & Exploit Database
The results of the search, shown in Figure 4-2, tell us the module name
we need as well as information about the module (which we’ll discuss in the
next section).
Figure 4-2: MS08-067 Metasploit module page
The full name of the Metasploit module for the MS08-067 security
bulletin is shown in the URI bar. In the modules directory of Metasploit,
this exploit is exploit/windows/smb/ms08_067_netapi.
Built-In Search
You can also use Metasploit’s built-in search function to find the correct
module name, as shown in Listing 4-3.
Using the Metasploit Framework 91
msf > search ms08-067
Matching Modules
================
Name Disclosure Date Rank Description
---- --------------- ---- -----------
exploit/windows/smb/ms08_067_netapi 2008-10-28 00:00:00 UTC great Microsoft Server
Service Relative Path
Stack Corruption
Listing 4-3: Searching for a Metasploit module
Again we find that the correct module name for this vulnerability
is exploit/windows/smb/ms08_067_netapi. Once you’ve identified a mod-
ule to use, enter the info command with the module name, as shown in
Listing 4-4.
msf > info exploit/windows/smb/ms08_067_netapi
uName: Microsoft Server Service Relative Path Stack Corruption
vModule: exploit/windows/smb/ms08_067_netapi
Version: 0
wPlatform: Windows
xPrivileged: Yes
License: Metasploit Framework License (BSD)
yRank: Great
z Available targets:
Id Name
-- ----
0 Automatic Targeting
1 Windows 2000 Universal
2 Windows XP SP0/SP1 Universal
--snip--
67 Windows 2003 SP2 Spanish (NX)
{ Basic options:
Name Current Setting Required Description
---- --------------- -------- -----------
RHOST yes The target address
RPORT 445 yes Set the SMB service port
SMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)
| Payload information:
Space: 400
Avoid: 8 characters
} Description:
This module exploits a parsing flaw in the path canonicalization
code of NetAPI32.dll through the Server Service. This module is
capable of bypassing NX on some operating systems and service packs.
The correct target must be used to prevent the Server Service (along
with a dozen others in the same process) from crashing. Windows XP
92 Chapter 4
targets seem to handle multiple successful exploitation events, but
2003 targets will often crash or hang on subsequent attempts. This
is just the first version of this module, full support for NX bypass
on 2003, along with other platforms, is still in development.
~ References:
http://www.microsoft.com/technet/security/bulletin/MS08-067.mspx
Listing 4-4: Information listing in Metasploit
This info page tells us a lot.
• First we see some basic information about the module, including a
descriptive name at u followed by the module name at v. (The version
field formerly denoted the SVN revision for the module, but now that
Metasploit is hosted on GitHub, all modules are set to version 0.)
• Platform w tells us that this exploit is for Windows systems.
• Privileged x tells us whether this module requires or grants high privi-
leges on the target. The License is set to Metasploit Framework License
(BSD). (Metasploit’s license is a three-clause BSD open source license.)
• Rank y lists the exploit’s potential impact on the target. Exploits are
ranked from manual to excellent. An exploit ranked excellent should
never crash a service; memory-corruption vulnerabilities such as
MS08-067 are usually not in this category. Our module is in the great
category, one step down. A great exploit can automatically detect
the correct target and has other features that make it more likely to
succeed.
• Available targets z lists operating system versions and patch levels that
the module can exploit. This module has 67 possible targets, including
Windows 2000, Windows 2003, and Windows XP, as well as multiple ser-
vice and language packs.
• Basic options { lists various options for the module that can be set to
make a module better meet our needs. For example, the RHOST option
tells Metasploit the IP address of the target. (We’ll discuss the basic
options in depth in “Setting Module Options” on page 94.)
• Payload information | contains information to help Metasploit decide
which payloads it can use with this exploit. Payloads, or shellcode, tell
the exploited system what to do on behalf of the attacker. (The goal of
attacking a target is, of course, to get it to do something on our behalf
that it isn’t supposed to do.) Metasploit’s payload system gives us many
options for what to make the target do.
• Description } includes more details about the particular vulnerability
that the module exploits.
• References ~ contains a link to online vulnerability database entries. If
you’re ever in doubt about which Metasploit module to use for a vulner-
ability, start with its info page.
Using the Metasploit Framework 93
Having confirmed that this is the right module, tell Metasploit to use
this module with the command use windows/smb/ms08_067_netapi. You can
drop the exploit/ part of the exploit name; Metasploit will figure out what
you want.
msf > use windows/smb/ms08_067_netapi
msf exploit(ms08_067_netapi) >
Now we’re in the context of the exploit module.
setting module options
Having chosen our exploit, we need to give Metasploit some informa-
tion. As you’ll see throughout this book, Metasploit can aid you in many
aspects of penetration testing, but it isn’t a mind reader . . . yet. To see the
information Metasploit needs from you to run your chosen module, enter
show options (Listing 4-5).
msf exploit(ms08_067_netapi) > show options
Module options (exploit/windows/smb/ms08_067_netapi):
Name Current Setting Required Description
---- --------------- -------- -----------
uRHOST yes The target address
vRPORT 445 yes Set the SMB service port
wSMBPIPE BROWSER yes The pipe name to use (BROWSER, SRVSVC)
Exploit target:
Id Name
-- ----
x0 Automatic Targeting
msf exploit(ms08_067_netapi) >
Listing 4-5: Exploit module options
At the top of the output shown in Listing 4-5 are the module settings
and any default values, whether certain settings are required for the mod-
ule to run successfully, and a description of each setting.
RHOST
The RHOST option u refers to the remote host we want to exploit. This
option is required because it gives Metasploit a target to attack. We’ll
tell Metasploit to exploit the Windows XP target machine that we set up
in Chapter 1 by changing the RHOST option from blank to our target IP
address. (If you can’t remember what that is, on the Windows XP machine
94 Chapter 4
run ipconfig at the command line to find out.) To set an option enter set
 , so in this case, set RHOST 192.168.20.10.
(Remember to use your own Windows XP target’s IP address.) After issuing
this command, running show options again should show that the value of
RHOST is set to 192.168.20.10.
RPORT
RPORT v refers to the remote port to attack. I remember a former manager
of mine who spent a good amount of time looking for port 80—as in try-
ing to locate it physically. Unsatisfied with my explanation that networking
sockets are made entirely of code, I eventually just pointed at the Ethernet
port. The moral of this story is this: A port is just a network socket; it’s not a
physical port. For example, when you browse to www.google.com, a web server
somewhere on the Internet is listening on port 80.
In this case we see that RPORT is set to a default value. Because our exploit
uses the Windows SMB service, the RPORT value should probably be 445, the
default port for SMB. And, as you can see, Metasploit saves us the trouble of
having to set the value by setting the default to 445 (which you can change
if you need to). In our case, we can just leave it alone.
SMBPIPE
Like the RPORT value, keep the default for the SMBPIPE option w as BROWSER.
This will work just fine for our purposes. (SMB pipes allow us to talk to
Windows interprocess communication over a network. We’ll look at find-
ing out which SMB pipes are listening on our target machines later in this
chapter.)
Exploit Target
The Exploit Target is set to 0 Automatic Targeting x. This is the target oper-
ating system and version. You can view the available targets on the module’s
info page or just show them with the command show targets (Listing 4-6).
msf exploit(ms08_067_netapi) > show targets
Exploit targets:
Id Name
-- ----
0 Automatic Targeting
1 Windows 2000 Universal
2 Windows XP SP0/SP1 Universal
3 Windows XP SP2 English (AlwaysOn NX)
4 Windows XP SP2 English (NX)
5 Windows XP SP3 English (AlwaysOn NX)
--snip--
67 Windows 2003 SP2 Spanish (NX)
Listing 4-6: Exploit targets
Using the Metasploit Framework 95
As you can see in Listing 4-6, this module can attack Windows 2000,
Windows 2003, and Windows XP.
note Remember, Microsoft has released patches for all the platforms affected by this bug,
but keeping all systems in an environment up-to-date with Windows patches is easier
said than done. Many of your pentesting clients will be missing some critical updates
in Windows and other software.
We know that our target is running Windows XP SP3 English, so we can
wager that the correct target number is either 5 or 6, but it won’t always be
so easy. Choose Automatic Targeting to tell Metasploit to fingerprint the SMB
service and choose the appropriate target based on the results.
To set a target option, enter set target . In this case we’ll
leave the module target at the default Automatic Targeting and move on.