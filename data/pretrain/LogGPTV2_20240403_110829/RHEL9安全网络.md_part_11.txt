    # ipsec auto --up vpn.example.com
    ...
    031 "vpn.example.com" #2: STATE_QUICK_I1: 60 second timeout exceeded after 0 retransmits.  No acceptable response to our first Quick Mode message: perhaps peer likes no proposal
    ```
-   当在 IKEv1 中使用预共享密钥(PSK)时，如果双方没有放入相同的 PSK
    ，则整个 IKE 信息将无法读取：
    ``` screen
    # ipsec auto --up vpn.example.com
    ...
    003 "vpn.example.com" #1: received Hash Payload does not match computed value
    223 "vpn.example.com" #1: sending notification INVALID_HASH_INFORMATION to 192.0.2.23:500
    ```
-   在 IKEv2 中，不匹配-PSK 错误会导致 AUTHENTICATION_FAILED 信息：
    ``` screen
    # ipsec auto --up vpn.example.com
    ...
    002 "vpn.example.com" #1: IKE SA authentication request rejected by peer: AUTHENTICATION_FAILED
    ```
:::
::: title
**最大传输单元**
:::
除防火墙阻止 IKE 或 IPsec
数据包外，网络问题的最常见原因与加密数据包的数据包大小增加有关。网络硬件对于大于最大传输单元(MTU)的数据包进行分片处理，例如
1500 字节。通常，片会丢失，数据包无法重新组装。当使用小数据包的 ping
测试可以正常工作，但其他流量失败时，这会导致间歇性故障。在这种情况下，您可以建立一个
SSH 会话，但是一使用它，终端就会冻结，例如，在远程主机上输入 \'ls -al
/usr\' 命令。
要临时解决这个问题，请通过将 `mtu=1400`{.literal}
选项添加到隧道配置文件中来减小 MTU 大小。
另外，对于 TCP 连接，启用更改 MSS 值的 iptables 规则：
``` screen
# iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
```
如果上一命令没有解决您场景中的问题，请在 `set-mss`{.literal}
参数中直接指定较小的数值：
``` screen
# iptables -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 1380
```
::: title
**网络地址转换(NAT)**
:::
当 IPsec 主机也充当 NAT
路由器时，可能会意外地重新映射数据包。以下示例配置演示了这个问题：
``` screen
conn myvpn
    left=172.16.0.1
    leftsubnet=10.0.2.0/24
    right=172.16.0.2
    rightsubnet=192.168.0.0/16
…
```
地址为 172.16.0.1 的系统有一个 NAT 规则：
``` screen
iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE
```
如果地址为 10.0.2.33 的系统将数据包发送到
192.168.0.1，那么路由器会在应用 IPsec 加密前将源 10.0.2.33 转换为
172.16.0.1。
然后，源地址为 10.0.2.33 的数据包不再与 `conn myvpn`{.literal}
配置匹配， IPsec 不会加密此数据包。
要解决这个问题，请在路由器上插入目标 IPsec 子网范围不包含 NAT
的规则，例如：
``` screen
iptables -t nat -I POSTROUTING -s 10.0.2.0/24 -d 192.168.0.0/16 -j RETURN
```
::: title
**内核 IPsec 子系统错误**
:::
例如，当 bug 导致 IKE 用户空间和 IPsec 内核不同步时，内核 IPsec
子系统可能会失败。检查此问题：
``` screen
$ cat /proc/net/xfrm_stat
XfrmInError                 0
XfrmInBufferError           0
...
```
上一命令输出中的任何非零值都表示有问题。如果您遇到这个问题，请开一个新的
[支持问题单](https://access.redhat.com/support){.link}，并附上上一命令的输出与对应的
IKE 日志。
::: title
**libreswan 日志**
:::
默认情况下，`Libreswan`{.literal} 日志使用 `syslog`{.literal}
协议。您可以使用 `journalctl`{.literal} 命令来查找与 IPsec
有关的日志条目。因为日志中相应的条目是由 `pluto`{.literal} IKE
守护进程发送的，因此请搜索 \"pluto\" 关键字，例如：
``` screen
$ journalctl -b | grep pluto
```
显示 `ipsec`{.literal} 服务的实时日志：
``` screen
$ journalctl -f -u ipsec
```
如果默认日志记录级别没有显示您的配置问题，请将
`plutodebug=all`{.literal} 选项添加到 `/etc/ipsec.conf`{.literal} 文件的
`config setup`{.literal} 部分来启用调试日志。
请注意，调试日志记录会生成大量的条目，`journald`{.literal} 或
`syslogd`{.literal} 服务的速率可能会抑制 `syslog`{.literal}
消息。要确保您有完整的日志，请将日志记录重定向到文件中。编辑
`/etc/ipsec.conf`{.literal}，并在 `config setup`{.literal} 部分中添加
`logfile=/var/log/pluto.log`{.literal}。
::: itemizedlist
**其他资源**
-   [使用日志文件对问题进行故障排除](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_basic_system_settings/assembly_troubleshooting-problems-using-log-files_configuring-basic-system-settings){.link}。
-   `tcpdump(8)`{.literal} 和 `ipsec.conf(5)`{.literal} 手册页。
-   [使用和配置
    firewalld](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/configuring_firewalls_and_packet_filters/using-and-configuring-firewalld_firewall-packet-filters){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-a-vpn-with-ipsec_securing-networks.html#related-information-configuring-a-vpn-with-ipsec}其他资源 {.title}
:::
::: itemizedlist
-   `ipsec(8)`{.literal}、`ipsec.conf(5)`{.literal}、`ipsec.secrets(5)`{.literal}、`ipsec_auto(8)`{.literal}
    和 `ipsec_rsasigkey(8)`{.literal} 手册页。
-   `/usr/share/doc/libreswan-版本/`{.literal} 目录。
-   [上游项目的网站](https://libreswan.org){.link} 。
-   [Libreswan 项目 Wiki](https://libreswan.org/wiki){.link} 。
-   [所有 Libreswan 手册页](https://libreswan.org/man/){.link} 。
-   [NIST Special Publication 800-77:IPsec VPN
    指南](https://doi.org/10.6028/NIST.SP.800-77r1){.link}。
:::
:::
:::
[]{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks.html}
::: chapter
::: titlepage
# []{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks.html#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks}第 5 章 使用 MACsec 加密同一物理网络中的第 2 层流量 {.title}
:::
您可以使用 MACsec
来保护两个设备（点到点）之间的通信。例如，您的分支办公室通过带中央办公室的自治区连接连接，您可以在连接办公室的两个主机上配置
MACsec，以提高安全性。
介质访问控制安全(MACsec)是一种第 2
层的协议，用于保护以太网链路上的不同的流量类型，包括：
::: itemizedlist
-   动态主机配置协议(DHCP)
-   地址解析协议(ARP)
-   互联网协议版本 4 / 6(`IPv4`{.literal} / `IPv6`{.literal})以及
-   任何使用 IP的流量（如 TCP 或 UDP）
:::
MACsec 默认使用 GCM-AES-128 算法加密并验证 LAN
中的所有流量，并使用预共享密钥在参与的主机之间建立连接。如果要更改预共享密钥，您需要更新网络中使用
MACsec 的所有主机上的 NM 配置。
MACsec 连接将以太网设备（如以太网网卡、VLAN
或隧道设备）用作父设备。您可以只在 MACsec 设备上设置 IP
配置，以便只使用加密连接与其他主机进行通信，也可以在父设备上设置 IP
配置。在后者的情况下，您可以使用父设备使用未加密连接和 MACsec
设备加密连接与其他主机通信。
macsec
不需要任何特殊硬件。例如，您可以使用任何交换机，除非您只想在主机和交换机之间加密流量。在这种情况下，交换机还必须支持
MACsec。
换句话说，有两种常用的方法来配置 MACsec：
::: itemizedlist
-   主机到主机，和
-   主机到交换机，然后交换机到其他主机
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
您只能在相同（物理或虚拟）LAN 的主机间使用 MACsec。
:::
::: section
::: titlepage
# []{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks.html#proc_configuring-a-macsec-connection-using-nmcli_assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network}使用 nmcli 配置 MACsec 连接 {.title}
:::
您可以使用 `nmcli`{.literal} 实用程序将以太网接口配置为使用
MACsec。这个步骤描述了如何在通过以太网连接的两个主机之间创建 MACsec
连接。
::: orderedlist
**流程**
1.  在配置 MACsec 的第一个主机上：
    ::: itemizedlist
    -   为预共享密钥创建连接关联密钥(CAK)和连接密钥名称(CKN)：
        ::: orderedlist
        1.  创建一个 16 字节十六进制 CAK：
            ``` literallayout
            # dd if=/dev/urandom count=16 bs=1 2> /dev/null | hexdump -e '1/2 "%04x"'
            50b71a8ef0bd5751ea76de6d6c98c03a
            ```
        2.  创建一个 32 字节十六进制 CKN：
            ``` literallayout
            # dd if=/dev/urandom count=32 bs=1 2> /dev/null | hexdump -e '1/2 "%04x"'
            f2b4297d39da7330910a74abc0449feb45b5c0b9fc23df1430e1898fcf1c4550
            ```
        :::
    :::
2.  在您要通过 MACsec 连接连接的两个主机上：
3.  创建 MACsec 连接：
    ``` literallayout
    # nmcli connection add type macsec con-name macsec0 ifname macsec0 connection.autoconnect yes macsec.parent enp1s0 macsec.mode psk macsec.mka-cak 50b71a8ef0bd5751ea76de6d6c98c03a macsec.mka-ckn f2b4297d39da7330910a7abc0449feb45b5c0b9fc23df1430e1898fcf1c4550
    ```
    在`macsec.mka-cak`{.literal} 和 `macsec.mka-ckn`{.literal}
    参数中使用上一步生成的 CAK 和 CKN。在 MACsec-protected
    网络的每个主机上，这些值必须相同。
4.  配置 MACsec 连接中的 IP 设置。
    ::: orderedlist
    1.  配置 `IPv4`{.literal} 设置。例如，要为 `macsec0`{.literal}
        连接设置静态 `IPv4`{.literal} 地址、网络掩码、默认网关和 DNS
        服务器，请输入：
        ``` literallayout
        # nmcli connection modify macsec0 ipv4.method manual ipv4.addresses '192.0.2.1/24' ipv4.gateway '192.0.2.254' ipv4.dns '192.0.2.253'
        ```
    2.  配置 `IPv6`{.literal} 设置。例如，要为 `macsec0`{.literal}
        连接设置静态 `IPv6`{.literal} 地址、网络掩码、默认网关和 DNS
        服务器，请输入：
        ``` literallayout
        # nmcli connection modify macsec0 ipv6.method manual ipv6.addresses '2001:db8:1::1/32' ipv6.gateway '2001:db8:1::fffe' ipv6.dns '2001:db8:1::fffd'
        ```
    :::
5.  激活连接：
    ``` literallayout
    # nmcli connection up macsec0
    ```
:::
::: orderedlist
**验证步骤**
1.  验证流量是否已加密：
    ``` literallayout
    # tcpdump -nn -i enp1s0
    ```
2.  可选：显示未加密的流量：
    ``` literallayout
    # tcpdump -nn -i macsec0
    ```
3.  显示 MACsec 统计：
    ``` literallayout
    # ip macsec show
    ```
4.  显示在每种保护类型中的各个计数器：完整性 -only（加密）和加密（加密）
    ``` literallayout
    # ip -s macsec show
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_using-macsec-to-encrypt-layer-2-traffic-in-the-same-physical-network_securing-networks.html#_additional_resources_2}其他资源 {.title}
:::
::: itemizedlist
-   [MACsec：加密网络流量的另一种解决方案](https://developers.redhat.com/blog/2016/10/14/macsec-a-different-solution-to-encrypt-network-traffic/){.link}
    博客。
:::
:::
:::