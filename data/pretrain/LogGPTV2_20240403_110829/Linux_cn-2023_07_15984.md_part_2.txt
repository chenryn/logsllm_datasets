或者，你可以使用 [localtunnel](https://theboroer.github.io/localtunnel-www/) 来使用动态端口转发服务。
一旦你的流量到达树莓派，你就可以查询你的 API：
```
$ curl https://example.com/get-stats
{
   "cpu_count": 4,
   "cpu_freq": [
      600.0,
      600.0,
      1200.0 ],
   "cpu_mem_avail": 386273280,
   ...
```
如果你已经执行到这一步，那么最困难的部分已经过去了。
#### 5、重复步骤
如果你重新启动了树莓派，你必须按照以下步骤进行操作：
* 使用 `source` 重新激活 Python 环境
* 使用 `pip` 刷新应用程序的依赖项
* 使用 `gunicorn` 启动 Flask 应用程序
你的防火墙设置是持久的，但如果你使用了 localtunnel，则必须在重新启动后启动新的隧道。
如果你愿意，可以自动化这些任务，但那是另一个教程的内容。本教程的最后一部分是在 Appsmith 上构建一个用户界面，使用拖放式小部件和一些 JavaScript，将你的树莓派数据绑定到用户界面。相信我，从现在开始很容易！
### 在 Appsmith 上构建仪表盘
![硬件监控仪表盘](/data/attachment/album/202307/10/102926j2mkk9aak9n92rxk.png)
要制作一个像这样的仪表盘，你需要将公开的 API 端点连接到 Appsmith，使用 Appsmith 的小部件库构建用户界面，并将 API 的响应绑定到小部件上。如果你已经使用 Appsmith，你可以直接导入 [示例应用程序](https://github.com/appsmithorg/foundry/tree/main/resources/blogs/Raspberry%20Pi%20Dashboard) 并开始使用。
如果你还没有，请 [注册](https://appsmith.com/sign-up) 一个免费的 Appsmith 帐户。或者，你可以选择 [自托管 Appsmith](https://docs.appsmith.com/getting-started/setup)。
### 将 API 作为 Appsmith 数据源连接
登录到你的 Appsmith 帐户。
* 在左侧导航栏中找到并点击 “ 查询或 JS   QUERIES/JS ” 旁边的 “+” 按钮。
* 点击 “ 创建一个空白 API   Create a blank API ”。
* 在页面顶部，将你的项目命名为 “PiData”。
* 获取你的 API 的 URL。如果你使用的是 localtunnel，则是一个 `localtunnel.me` 地址，总是在末尾添加 `/get-stats` 以获取统计数据。将其粘贴到页面的第一个空白字段中，然后点击 “RUN” 按钮。
确保在 “ 响应   Response ” 面板中看到成功的响应。
![Appsmith 界面](/data/attachment/album/202307/10/103200q8rrrn082ar0rrwr.jpg)
### 构建用户界面
Appsmith 的界面非常直观，但如果你感到迷失，我建议你查看 [在 Appsmith 上构建你的第一个应用程序](https://docs.appsmith.com/getting-started/start-building) 教程。
对于标题，将 “ 文本   Text ”、“ 图像   Image ” 和 “ 分隔线   Divider ” 小部件拖放到画布上。将它们排列如下：
![设置项目标题](/data/attachment/album/202307/10/103210gz1ksff34zn66n11.jpg)
“ 文本   Text ” 小部件包含你页面的实际标题。键入比“Raspberry Pi Stats”更酷的内容。
“ 图像   Image ” 小部件用于展示仪表盘的独特标志。你可以使用你喜欢的任何标志。
使用 “ 开关   Switch ” 小部件来切换实时数据模式。在 “ 属性   Property ” 面板中进行配置，以从你构建的 API 获取数据。
对于主体部分，使用来自左侧的小部件库的以下小部件创建一个 CPU 统计信息区域，使用以下小部件：
*  进度条   Progress Bar 
*  统计框   Stat Box 
*  图表   Chart 
对于内存和磁盘统计信息部分，重复相同的步骤。磁盘统计信息部分不需要图表，但如果你能找到用途，那也可以使用它。
你的最终小部件布局应该类似于以下：
![Appsmith 中的属性设置](/data/attachment/album/202307/10/103222zc4h4yb8h4fog2wx.jpg)
最后一步是将 API 的数据绑定到你的小部件上。
### 将数据绑定到小部件上
返回到画布，并在三个类别的部分中找到你的小部件。首先设置 CPU 统计信息。
要将数据绑定到 “ 进度条   Progress Bar ” 小部件：
* 单击 “ 进度条   Progress Bar ” 小部件，以打开右侧的 “ 属性   Property ” 面板。
* 查找 “ 进度   Progress ” 属性。
* 单击 “JS” 按钮以激活 JavaScript。
* 在 “ 进度   Progress ” 字段中粘贴 `{{PiData.data.cpu_percent ?? 0}}`。此代码引用了你的 API 的数据流，名为 `PiData`。Appsmith 将响应数据缓存在 `PiData` 的 `.data` 运算符内。键 `cpu_percent` 包含了 Appsmith 用来显示 CPU 利用率百分比的数据。
* 在 “ 进度条   Progress Bar ” 小部件下方添加一个 “ 文本   Text ” 小部件作为标签。
![在配置屏幕中绑定数据](/data/attachment/album/202307/10/103234kbryjjgjsk060bkb.jpg)
在 CPU 部分有三个 “ 统计框   Stat Box ” 小部件。将数据绑定到每个小部件的步骤与绑定 “ 进度条   Progress Bar ” 小部件的步骤完全相同，只是你需要从 `.data` 运算符中绑定不同的数据属性。按照相同的步骤进行操作，但有以下例外：
* 使用 `{{${PiData.data.cpu_freq[0]} ?? 0 }}` 来显示时钟速度。
* 使用 `{{${PiData.data.cpu_count} ?? 0 }}` 来显示 CPU 计数。
* 使用 `{{${(PiData.data.sensor_temperatures).toPrecision(3)} ?? 0 }}` 来显示 CPU 温度数据。
如果一切顺利，你将得到一个漂亮的仪表盘，如下所示：
![树莓派的仪表盘](/data/attachment/album/202307/10/103242jiiam03mki3i0r60.jpg)
### CPU 利用率趋势图
你可以使用 “ 图表   Chart ” 小部件将 CPU 利用率显示为趋势线，并使其随时间自动更新。
首先，单击小部件，在右侧找到 “ 图表类型   Chart Type ” 属性，并将其更改为 “ 折线图   LINE CHART ”。为了显示趋势线，需要将 `cpu_percent` 存储在数据点数组中。你的 API 目前将其作为单个时间数据点返回，因此可以使用 Appsmith 的 `storeValue` 函数（Appsmith 内置的 `setItem` 方法的一个原生实现）来获取一个数组。
在 “ 查询或 JS   QUERIES/JS ” 旁边单击 “+” 按钮，并将其命名为 “utils”。
将以下 JavaScript 代码粘贴到 “ 代码   Code ” 字段中：
```
export default {
  getLiveData: () => {
  //When switch is on:
    if (Switch1.isSwitchedOn) {
      setInterval(() => {
        let utilData = appsmith.store.cpu_util_data;
        PiData.run()
          storeValue("cpu_util_data", [...utilData, {
            x: PiData.data.cpu_percent,
            y: PiData.data.cpu_percent
          }]);           
        }, 1500, 'timerId')
      } else {
    clearInterval('timerId');
  }
},
initialOnPageLoad: () => {
  storeValue("cpu_util_data", []);
  }
}
```
为了初始化 `Store`，你在 `initialOnPageLoad` 对象中创建了一个 JavaScript 函数，并将 `storeValue` 函数放在其中。
你使用 `storeValue("cpu_util_data", []);` 将 `cpu_util_data` 中的值存储到 `storeValue` 函数中。此函数在页面加载时运行。
到目前为止，每次刷新页面时，代码都会将 `cpu_util_data` 中的一个数据点存储到 `Store` 中。为了存储一个数组，你使用了 `x` 和 `y` 的下标变量，两者都存储了来自 `cpu_percent` 数据属性的值。
你还希望通过设定存储值之间的固定时间间隔来自动存储这些数据。当执行 [setInterval](https://docs.appsmith.com/reference/appsmith-framework/widget-actions/intervals-time-events#setinterval) 函数时：
* 获取存储在 `cpu_util_data` 中的值。
* 调用 API `PiData`。
* 使用返回的最新 `cpu_percent` 数据将 `cpu_util_data` 更新为 `x` 和 `y` 变量。
* 将 `cpu_util_data` 的值存储在键 `utilData` 中。
* 仅当设置为自动执行函数时，才重复执行步骤 1 到 4。你使用 Switch 小部件将其设置为自动执行，这就解释了为什么有一个 `getLiveData` 父函数。
在 “ 设置   Settings ” 选项卡中，找到对象中的所有父函数，并在 “ 页面加载时运行   RUN ON PAGE LOAD ” 选项中将 `initialOnPageLoad` 设置为 “Yes（是）”。
![设置页面加载时要执行的函数](/data/attachment/album/202307/10/103253apiwjbjbiu6fj3wp.jpg)
现在刷新页面进行确认。
返回到画布。单击 “ 图表   Chart ” 小部件，并找到 “ 图表数据   Chart Data ” 属性。将绑定 `{{ appsmith.store.disk_util_data }}` 粘贴到其中。这样，如果你自己多次运行对象 `utils`，就可以获得图表数据。要自动运行此操作：
* 查找并单击仪表盘标题中的 “ 实时数据开关   Live Data Switch ” 小部件。
* 查找 `onChange` 事件。
* 将其绑定到 `{{ utils.getLiveData() }}`。JavaScript 对象是 `utils`，而 `getLiveData` 是在你切换开关时激活的函数，它会从你的树莓派获取实时数据。但是还有其他实时数据，因此同一开关也适用于它们。继续阅读以了解详情。
将数据绑定到内存和磁盘部分的小部件与你在 CPU 统计信息部分所做的方式类似。
对于内存部分，绑定如下所示：
* 进度条中的绑定为：`{{( PiData.data.cpu_mem_avail/1000000000).toPrecision(2) \* 100 ?? 0 }}`。
* 三个统计框小部件的绑定分别为：`{{ \${(PiData.data.cpu_mem_used/1000000000).toPrecision(2)} ?? 0 }} GB`、`{{ \${(PiData.data.cpu_mem_free/1000000000).toPrecision(2)} ?? 0}} GB` 和 `{{ \${(PiData.data.cpu_mem_total/1000000000).toPrecision(2)} ?? 0 }} GB`。
对于磁盘部分，进度条和统计框小部件的绑定分别变为：
* 进度条的绑定为：`{{ PiData.data.disk_usage_percent ?? 0 }}`。
* 三个统计框小部件的绑定分别为：`{{ \${(PiData.data.disk_usage_used/1000000000).toPrecision(2)} ?? 0 }} GB`、`{{ \${(PiData.data.disk_usage_free/1000000000).toPrecision(2)} ?? 0 }} GB` 和 `{{ \${(PiData.data.disk_usage_total/1000000000).toPrecision(2)} ?? 0 }} GB`。
这里的图表需要更新你为 CPU 统计信息创建的 `utils` 对象，使用 `storeValue` 键名为 `disk_util_data`，嵌套在 `getLiveData` 下面，其逻辑与 `cpu_util_data` 类似。对于磁盘利用率图表，我们存储的 `disk_util_data` 的逻辑与 CPU 利用率趋势图的逻辑相同。
```
export default {
  getLiveData: () => {
  //When switch is on:
    if (Switch1.isSwitchedOn) {
      setInterval(() => {
       const cpuUtilData = appsmith.store.cpu_util_data;
       const diskUtilData = appsmith.store.disk_util_data;                   
       PiData.run();
       storeValue("cpu_util_data", [...cpuUtilData, { x: PiData.data.cpu_percent,y: PiData.data.cpu_percent }]);
       storeValue("disk_util_data", [...diskUtilData, { x: PiData.data.disk_usage_percent,y: PiData.data.disk_usage_percent }]);
    }, 1500, 'timerId')
  } else {
    clearInterval('timerId');
  }
},
  initialOnPageLoad: () => {
    storeValue("cpu_util_data", []);
    storeValue("disk_util_data", []);
  }
}
```
通过使用 `utils` JavaScript 对象在打开和关闭真实数据开关时触发的数据流可视化如下所示：
![切换](/data/attachment/album/202307/10/102928s4lkngonzh787bkh.gif)
在打开实时数据开关时，图表会变成这样：
![显示实时数据](/data/attachment/album/202307/10/102932vh4s65lhjlhjppzp.gif)
整体上，它既漂亮，又简约，而且非常有用。
### 祝你使用愉快！
当你对 `psutils`、JavaScript 和 Appsmith 更加熟悉时，我相信你会发现可以轻松无限地调整你的仪表板，实现非常酷的功能，例如：
* 查看先前一周、一个月、一个季度、一年或根据你的树莓派数据允许的任何自定义范围的趋势
* 为任何统计数据的阈值违规构建报警机制
* 监控连接到你的树莓派的其他设备
* 将 `psutils` 扩展到另一台安装有 Python 的计算机上
* 使用其他库监控你家庭或办公室的网络
* 监控你的花园
* 跟踪你自己的生活习惯
在下一个令人兴奋的项目中，祝你玩得愉快！
*（题图：MJ/9754eb1f-1722-4897-9c35-3f20c285c332）*
---
via: 
作者：[Keyur Paralkar](https://opensource.com/users/keyur-paralkar) 选题：[lkxed](https://github.com/lkxed/) 译者：ChatGPT 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出