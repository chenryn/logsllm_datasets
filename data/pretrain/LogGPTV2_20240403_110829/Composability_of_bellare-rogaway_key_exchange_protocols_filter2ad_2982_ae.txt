(lsid), SSTπ(lsid)). Similarly, the composed local session state
59setupEke;π(LSID, kg, 1η):
(SSTke, ESTke) ← setupEke(LSID, kgke, 1η)
(SSTπ,⊥) ← setupEπ(LSID, kgπ, 1η)
Return ((SSTke, SSTπ), ESTke)
setupGke;π(LSID, (SSTke, SSTπ), ESTke, 1η):
(LSTke,⊥) ← setupGke(LSID, SSTke, ESTke, 1η)
(LSTπ, MSTπ) ← setupGπ(LSID, SSTπ, ESTπ, 1η)
Return ((LSTke, LSTπ), MSTπ)
Figure 10: Setup algorithms for composed games.
is deﬁned by the pair LSTke;π := (LSTke, LSTπ). The ex-
ecution state for the composed game, ESTke;π, equals the
execution state of the key exchange game, ESTke, since the
execution state of the symmetric key protocol game is al-
ways undeﬁned. The model state in the composed game is
the model state of the symmetric key protocol game, i.e.
MSTke;π := MSTπ, since the model state for the partnering
key exchange game is undeﬁned. When clear from context,
we write SST instead of SSTke;π and LST instead of LSTke;π.
The session state SST(lsid) of a session lsid then is a tu-
ple ((pki, ski), pkj, sid, κke, γ, sinfoke, κπ, sinfoπ), and the local
session state LST(lsid) of a session lsid is a tuple (δ, δpnr, ω, ψ,
lstπ). We omit additional brackets one could use to separate
LSTke(lsid) from LSTπ(lsid).
Setup. To set the composed game’s initial state we use the
key exchange setup algorithms to initialise the key exchange
portions of the composed game’s state (e.g. SSTke), and
similarly use the symmetric key protocol’s setup algorithm
for the remainder, see Figure 10.
Queries. The adversary has similar abilities as previously
described. It can send messages to sessions, corrupt long-
term keys as well as interact with the symmetric key protocol
in any way described by the game Gπ (excluding the InitS,
InitP and InitK queries). Notice that we do not allow the
adversary access to the Reveal query from the key exchange
game in the composed game. The Reveal query was used in
the BR-secrecy game to ensure if a session key was compro-
mised, it did not compromise the BR-security of other keys,
and to model potential key leakage through the deployment
in a potential subsequent protocol (which is now actual in
our case). However, we are now considering the security of
the symmetric key protocol (in the composed setting), thus
the Reveal query is no longer allowed, unless the symmetric
key protocol itself provides an equivalent query.
Remember that SST(cid:48)
We modify the Send query slightly to set the value of ψ
to known if a key exchange session accepts when its partner
is corrupted. The rest of the behaviour of the Send query
remains unchanged. We denote the behaviour of the part-
nering key exchange game by χke and the behaviour of the
symmetric protocol game by χπ. The behaviour of the com-
posed game is given in Figure 11.
ke;π := (SST(cid:48)
ke;π :=
(LST(cid:48)
π). Informally, the behaviour χke;π processes key
exchange queries by calling the behaviour χke, and symmet-
ric key protocol queries by calling χπ. The Send query con-
stitutes an exception, as it is used by both the ke and π stage
of the composition. Here, the behaviour χke;π uses the com-
posed algorithm ξke;π to process the Send query, noting the
above modiﬁcation, where the value ψ is set appropriately
when a session accepts a key at the key exchange stage.
π) and LST(cid:48)
ke, SST(cid:48)
ke, LST(cid:48)
The Valid predicate for the InitS, InitP, InitK and Reveal
queries always return false to make these queries invalid.
χke;π(q, (LSID, (SSTke, SSTπ), (LSTke, LSTπ), ESTke, MSTπ)):
If q is a Send query then //Call ξke;π , if the session accepts
//a key then mark this key as ‘known’ if appropriate
ke;π(lsid).γ = accepted
ke;π ← LSTke;π.
Parse q into Send(lsid, msg).
ke;π ← SSTke;π, LST(cid:48)
Set SST(cid:48)
ke;π(lsid), response) ← ξke;π(SSTke;π(lsid), msg)
Run (SST(cid:48)
If SSTke;π(lsid).γ (cid:54)= SST(cid:48)
and there exists lsid∗ ∈ LSID \ {lsid} such that
SSTke;π(lsid∗).sid = SST(cid:48)
Else if SSTke;π(lsid).γ (cid:54)= SST(cid:48)
and SST(cid:48)
ke;π(lsid).sid then
ke;π(lsid).ψ ← LSTke;π(lsid∗).ψ
ke;π(lsid).γ, SST(cid:48)
ke;π(lsid).γ
ke;π(lsid).γ(cid:48) = accepted then:
If LSTke;π(lsid).δpnr = corrupt then
set LST(cid:48)
ke;π(lsid).ψ ← known
set LST(cid:48)
ke;π, ESTke, MSTπ), response)
ke;π, LST(cid:48)
Return ((SST(cid:48)
ke,⊥), response)
Run ((SST(cid:48)
← χke(q, (LSID, SSTke, LSTke, ESTke,⊥))
π ← LSTπ, MST(cid:48)
Set SST(cid:48)
Return ((SST(cid:48)
ke, MST(cid:48)
ke;π, EST(cid:48)
ke, EST(cid:48)
π ← SSTπ, LST(cid:48)
ke;π, LST(cid:48)
ke, LST(cid:48)
π ← MSTπ
π), response)
If q is a Corrupt query then //Corrupt as for key exchange
If q is a query from Q that is neither a Send nor a Corrupt query
then:
//Execute as for symmetric protocols
π, LST(cid:48)
π,⊥, MST(cid:48)
Run ((SST(cid:48)
π), response)
← χπ(q, (LSID, SSTπ, LSTπ,⊥, MSTπ))
ke ← LSTke, EST(cid:48)
SST(cid:48)
Return ((SST(cid:48)
ke, MST(cid:48)
ke;π, EST(cid:48)
ke ← SSTke, LST(cid:48)
ke;π, LST(cid:48)
ke ← ESTke
π), response)
Figure 11: Behaviour χke;π of composed games.
The Valid predicate for the Send query either calls the
Valid predicate from the key exchange state, namely Validke,
or the Valid predicate from the symmetric key protocol
state, Validπ. This depends on the value γ. If the queried
session has not accepted a key yet then Validke is used.
Otherwise, the game evaluates Validπ.
Predicate. We consider that an adversary breaks the se-
curity of the composition if it breaks the security of the
symmetric key protocol (as captured by the predicate Pπ).
Therefore Pke;π is deﬁned as Pπ(LSID, SSTπ, LSTπ,⊥, MSTπ),
i.e. we evaluate the predicate Pπ on the state of the sym-
metric key protocol, π, maintained by the composed game.
6. COMPOSITION RESULT
We now present our main results. In Theorem 1 we show
that a BR-secure key exchange, with the additional property
of having an eﬃcient session matching algorithm, securely
composes with a symmetric key protocol.
Theorem 1. Let ke be a BR-secure key exchange proto-
col w.r.t. D, where an eﬃcient session matching algorithm
exists. Let π be a secure protocol w.r.t. Gπ. If the key gen-
eration algorithm of π outputs keys with distribution D then
the composition ke; π is secure w.r.t. Gke;π and for any eﬃ-
cient A we have
Adv
Gke;π
ke;π,A(1η) ≤ ni
2 · ns · Adv
GBR,D
ke,B (1η) + AdvGπ
π,C(1η)
for some eﬃcient algorithms B and C, where ni is the maxi-
mum number of participants and ns is the maximum number
of sessions, and thus ni
2 · ns is the size of the set LSID.
The proof proceeds in two stages. First, we show that
we can replace all the session keys one-by-one with random
keys, where partner sessions are keyed with the same random
value. This results in a composed game, where keys used by
the symmetric protocol are independent of the key exchange.
Next, we show this is then equivalent to the symmetric key
60protocol game Gπ. Intuitively this means a break against
this composition is a break against the symmetric key pro-
tocol, where keys are generated randomly. A complete proof
of Theorem 1 can be found in the full version of the paper.
The following corollary is an immediate application of
Theorem 1, for single session reducible protocols. Essen-
tially, if a symmetric key protocol is single session reducible,
then it securely composes with a BR-secure key exchange
protocol.
Corollary 1. Let ke be a BR-secure key exchange pro-
tocol w.r.t. D, where an eﬃcient session matching algorithm
exists. Let Gπ be a single session reducible security game,
and let π be a secure protocol w.r.t. Gπ−1. If the key gen-
eration algorithm of π outputs keys with distribution D then
the composition ke; π is secure w.r.t. Gke;π.
Proof. Since π is secure w.r.t Gπ−1, and Gπ is single
session reducible we have that π is secure w.r.t. Gπ by
deﬁnition. Therefore we can now apply Theorem 1 and the
result holds.
7. CONCLUSION
We have developed a formal abstract framework for spec-
ifying cryptographic games, to enable the modelling of two-
party protocols. We specialise our abstract framework to
allow the analysis of key exchange protocols, following the
original security notions of Bellare and Rogaway. Further,
we identify a general class of protocols, called symmetric
key protocols, which use the session key exchanged by a key
exchange protocol. We show that a key exchange protocol,
which is secure in the Bellare-Rogaway sense, i.e. keys are
indistinguishable from random, composed with a symmetric
key protocol that is secure when session keys are generated
randomly, results in a secure composition. Interestingly, for
such a composition, it is required that there exists a ses-
sion matching algorithm, which is able to identify partner
sessions of the key exchange protocol. Conversely, we also
show, for any BR-secure key exchange protocol (a weak form
of) such a session matching algorithm must exist. Yet, ex-
ploring the full relationship is an interesting open problem.
Our composition results apply to BR-secure protocols such
as EAC [10]. It would be interesting to extend our work to
allow for key conﬁrmation in key exchange protocols. If the
parties apply such a conﬁrmation step during the key ex-
change phase to check if they have agreed upon the same
key, without performing a key refresh afterward, then the
key exchange protocol cannot be secure in the model of Bel-
lare and Rogaway. This, however, is a common technique in
protocols like TLS. It may sometimes be possible to decou-
ple the conﬁrmation step from the key-exchange part (and
essentially consider it as part of the symmetric-key proto-
col).
In this situation our composition result should still
apply. An interesting open problem is to allow for such a
modular analysis in a generic way.
8. REFERENCES
[1] M. Abadi and P. Rogaway. Reconciling two views of
cryptography (the computational soundness of formal
encryption). In IFIP TCS, volume 1872 of LNCS,
pages 3–22. Springer, 2000.
[2] M. Backes, B. Pﬁtzmann, and M. Waidner. The
reactive simulatability (rsim) framework for
asynchronous systems. Information and Computation,
205(12):1685–1720, 2007.
[3] M. Bellare, D. Pointcheval, and P. Rogaway.
Authenticated key exchange secure against dictionary
attacks. In EUROCRYPT 2000, pages 139–155.
Springer LNCS 1807, 2000.
[4] M. Bellare and P. Rogaway. Entity authentication and
key distribution. In CRYPTO 1993, pages 232–249.
Springer Berlin / Heidelberg LNCS 773, 1993.
[5] M. Bellare and P. Rogaway. Provably secure session
key distribution: the three party case. In STOC 1995,
pages 57–66. ACM, 1995.
[6] S. Blake-Wilson, D. Johnson, and A. Menezes. Key
agreement protocols and their security analysis. In
IMA International Conference on Cryptography and
Coding, pages 30–45. Springer, 1997.
[7] R. Canetti. Security and composition of multiparty
cryptographic protocols. Journal of Cryptology,
13(1):143–202, 2000.
[8] R. Canetti and H. Krawczyk. Analysis of Key
Exchange Protocols and Their Use for Building Secure
Channels. In EUROCRYPT 2001, pages 453–474.
Springer LNCS 2045, 2001.
[9] R. Canetti and H. Krawczyk. Universally Composable
Notions of Key Exchange and Secure Channels. In
EUROCRYPT 2002, pages 337–351. Springer LNCS
2332, 2002.
[10] ¨O. Dagdelen and M. Fischlin. Security analysis of the
extended access control protocol for machine readable
travel documents. In ISC, volume 6531 of LNCS,
pages 54–68. Springer, 2010.
[11] A. Datta, A. Derek, J. Mitchell, and B. Warinschi.
Computationally sound compositional logic for key
exchange protocols. In CSFW, pages 321–334. IEEE
Computer Society, 2006.
[12] A. Datta, A. Derek, J. C. Mitchell, V. Shmatikov, and
M. Turuani. Probabilistic Polynomial-time Semantics
for a Protocol Security Logic. In ICALP 2005, pages
16–29. Springer LNCS 3580, 2005.
[13] T. Dierks and C. Allen. The TLS Protocol Version
1.2, 2006. RFC 4346.
[14] M. Fischlin. Pseudorandom function tribe ensembles
based on one-way permutations: Improvements and
applications. In EUROCRYPT, pages 432–445.
Springer, 1999.
[15] R. K¨usters. Simulation-based security with
inexhaustible interactive turing machines. In CSFW,
pages 309–320. IEEE Computer Society, 2006.
[16] R. K¨usters and M. Tuengerthal. Composition
Theorems Without Pre-Established Session Identiﬁers.
In Proceedings of the 18th ACM Conference on
Computer and Communications Security (CCS 2011).
ACM Press, 2011. To appear.
[17] B. LaMacchia, K. Lauter, and A. Mityagin. Stronger
security of authenticated key exchange. eprint:
http://eprint.iacr.org/2006/073, 2006.
[18] V. Shoup. On formal models for secure key exchange.
eprint: http://eprint.iacr.org/1999/012, 1999.
[19] T. Ylonen and C. Lonvick. The Secure Shell (SSH)
Transport Layer Protocol, 2006. RFC 4253.
61