### Setup Algorithms for Composed Games

The composed local session state is defined by the pair \( LST_{ke;\pi} := (LST_{ke}, LST_{\pi}) \). The execution state for the composed game, \( EST_{ke;\pi} \), is equal to the execution state of the key exchange game, \( EST_{ke} \), since the execution state of the symmetric key protocol game is always undefined. The model state in the composed game is the model state of the symmetric key protocol game, i.e., \( MST_{ke;\pi} := MST_{\pi} \), as the model state for the key exchange game is undefined. When clear from context, we write \( SST \) instead of \( SST_{ke;\pi} \) and \( LST \) instead of \( LST_{ke;\pi} \).

The session state \( SST(lsid) \) of a session \( lsid \) is a tuple:
\[ ((pki, ski), pkj, sid, \kappa_{ke}, \gamma, sinfo_{ke}, \kappa_{\pi}, sinfo_{\pi}) \]

The local session state \( LST(lsid) \) of a session \( lsid \) is a tuple:
\[ (\delta, \delta_{pnr}, \omega, \psi, lst_{\pi}) \]

We omit additional brackets that could be used to separate \( LST_{ke}(lsid) \) from \( LST_{\pi}(lsid) \).

#### Setup
To set the initial state of the composed game, we use the key exchange setup algorithms to initialize the key exchange portions of the composed game's state (e.g., \( SST_{ke} \)), and similarly use the symmetric key protocol's setup algorithm for the remainder. See Figure 10 for details.

```plaintext
setupEke;π(LSID, kg, 1η):
(SST_{ke}, EST_{ke}) ← setupEke(LSID, kg_{ke}, 1η)
(SST_{\pi}, ⊥) ← setupE\pi(LSID, kg_{\pi}, 1η)
Return ((SST_{ke}, SST_{\pi}), EST_{ke})

setupGke;π(LSID, (SST_{ke}, SST_{\pi}), EST_{ke}, 1η):
(LST_{ke}, ⊥) ← setupGke(LSID, SST_{ke}, EST_{ke}, 1η)
(LST_{\pi}, MST_{\pi}) ← setupG\pi(LSID, SST_{\pi}, EST_{\pi}, 1η)
Return ((LST_{ke}, LST_{\pi}), MST_{\pi})
```

#### Queries
The adversary has similar abilities as previously described. It can send messages to sessions, corrupt long-term keys, and interact with the symmetric key protocol in any way described by the game \( G_{\pi} \) (excluding the InitS, InitP, and InitK queries). Note that we do not allow the adversary access to the Reveal query from the key exchange game in the composed game. The Reveal query was used in the BR-secrecy game to ensure that if a session key was compromised, it did not compromise the BR-security of other keys, and to model potential key leakage through deployment in a subsequent protocol. However, in our case, we are considering the security of the symmetric key protocol in the composed setting, so the Reveal query is no longer allowed unless the symmetric key protocol itself provides an equivalent query.

We modify the Send query slightly to set the value of \( \psi \) to "known" if a key exchange session accepts when its partner is corrupted. The rest of the behavior of the Send query remains unchanged. We denote the behavior of the partnering key exchange game by \( \chi_{ke} \) and the behavior of the symmetric protocol game by \( \chi_{\pi} \). The behavior of the composed game is given in Figure 11.

```plaintext
χke;π(q, (LSID, (SST_{ke}, SST_{\pi}), (LST_{ke}, LST_{\pi}), EST_{ke}, MST_{\pi})):
If q is a Send query then
    Parse q into Send(lsid, msg).
    (SST'(lsid), response) ← ξke;π(SST(lsid), msg)
    If SST(lsid).γ ≠ SST'(lsid).γ and there exists lsid* ∈ LSID \ {lsid} such that
        SST(lsid*).sid = SST'(lsid).sid then
            LST(lsid).ψ ← LST(lsid*).ψ
    If SST(lsid).γ ≠ SST'(lsid).γ and SST'(lsid).γ = accepted then
        If LST(lsid).δpnr = corrupt then
            LST(lsid).ψ ← known
    Return ((SST', LST'), response)

If q is a Corrupt query then
    Run ((SST', LST'), response) ← χke(q, (LSID, SST_{ke}, LST_{ke}, EST_{ke}, ⊥))
    Return ((SST', LST'), response)

If q is a query from Q that is neither a Send nor a Corrupt query then
    Run ((SST', LST'), response) ← χπ(q, (LSID, SST_{\pi}, LST_{\pi}, ⊥, MST_{\pi}))
    Return ((SST', LST'), response)
```

#### Predicate
An adversary breaks the security of the composition if it breaks the security of the symmetric key protocol (as captured by the predicate \( P_{\pi} \)). Therefore, \( P_{ke;\pi} \) is defined as \( P_{\pi}(LSID, SST_{\pi}, LST_{\pi}, ⊥, MST_{\pi}) \), i.e., we evaluate the predicate \( P_{\pi} \) on the state of the symmetric key protocol, \( \pi \), maintained by the composed game.

### Composition Result
In Theorem 1, we show that a BR-secure key exchange, with the additional property of having an efficient session matching algorithm, securely composes with a symmetric key protocol.

**Theorem 1.** Let \( ke \) be a BR-secure key exchange protocol w.r.t. \( D \), where an efficient session matching algorithm exists. Let \( \pi \) be a secure protocol w.r.t. \( G_{\pi} \). If the key generation algorithm of \( \pi \) outputs keys with distribution \( D \), then the composition \( ke; \pi \) is secure w.r.t. \( G_{ke;\pi} \) and for any efficient \( A \) we have:
\[ \text{Adv}_{G_{ke;\pi}}^{ke;\pi,A}(1^\eta) \leq \frac{n_i}{2} \cdot n_s \cdot \text{Adv}_{GBR,D}^{ke,B}(1^\eta) + \text{Adv}_{G_{\pi}}^{\pi,C}(1^\eta) \]
for some efficient algorithms \( B \) and \( C \), where \( n_i \) is the maximum number of participants and \( n_s \) is the maximum number of sessions, and thus \( \frac{n_i}{2} \cdot n_s \) is the size of the set \( LSID \).

**Proof.** The proof proceeds in two stages. First, we show that we can replace all the session keys one-by-one with random keys, where partner sessions are keyed with the same random value. This results in a composed game where keys used by the symmetric protocol are independent of the key exchange. Next, we show this is then equivalent to the symmetric key protocol game \( G_{\pi} \). Intuitively, this means a break against this composition is a break against the symmetric key protocol, where keys are generated randomly. A complete proof of Theorem 1 can be found in the full version of the paper.

**Corollary 1.** Let \( ke \) be a BR-secure key exchange protocol w.r.t. \( D \), where an efficient session matching algorithm exists. Let \( G_{\pi} \) be a single session reducible security game, and let \( \pi \) be a secure protocol w.r.t. \( G_{\pi-1} \). If the key generation algorithm of \( \pi \) outputs keys with distribution \( D \), then the composition \( ke; \pi \) is secure w.r.t. \( G_{ke;\pi} \).

**Proof.** Since \( \pi \) is secure w.r.t. \( G_{\pi-1} \), and \( G_{\pi} \) is single session reducible, we have that \( \pi \) is secure w.r.t. \( G_{\pi} \) by definition. Therefore, we can now apply Theorem 1, and the result holds.

### Conclusion
We have developed a formal abstract framework for specifying cryptographic games, enabling the modeling of two-party protocols. We specialize our abstract framework to allow the analysis of key exchange protocols, following the original security notions of Bellare and Rogaway. Further, we identify a general class of protocols called symmetric key protocols, which use the session key exchanged by a key exchange protocol. We show that a key exchange protocol, which is secure in the Bellare-Rogaway sense, i.e., keys are indistinguishable from random, composed with a symmetric key protocol that is secure when session keys are generated randomly, results in a secure composition. Interestingly, for such a composition, it is required that there exists a session matching algorithm, which is able to identify partner sessions of the key exchange protocol. Conversely, we also show that for any BR-secure key exchange protocol, (a weak form of) such a session matching algorithm must exist. Exploring the full relationship is an interesting open problem.

Our composition results apply to BR-secure protocols such as EAC [10]. It would be interesting to extend our work to allow for key confirmation in key exchange protocols. If the parties apply such a confirmation step during the key exchange phase to check if they have agreed upon the same key, without performing a key refresh afterward, then the key exchange protocol cannot be secure in the model of Bellare and Rogaway. This, however, is a common technique in protocols like TLS. It may sometimes be possible to decouple the confirmation step from the key-exchange part (and essentially consider it as part of the symmetric-key protocol). In this situation, our composition result should still apply. An interesting open problem is to allow for such a modular analysis in a generic way.

### References
[1] M. Abadi and P. Rogaway. Reconciling two views of cryptography (the computational soundness of formal encryption). In IFIP TCS, volume 1872 of LNCS, pages 3–22. Springer, 2000.
[2] M. Backes, B. Pfitzmann, and M. Waidner. The reactive simulatability (RSIM) framework for asynchronous systems. Information and Computation, 205(12):1685–1720, 2007.
[3] M. Bellare, D. Pointcheval, and P. Rogaway. Authenticated key exchange secure against dictionary attacks. In EUROCRYPT 2000, pages 139–155. Springer LNCS 1807, 2000.
[4] M. Bellare and P. Rogaway. Entity authentication and key distribution. In CRYPTO 1993, pages 232–249. Springer Berlin / Heidelberg LNCS 773, 1993.
[5] M. Bellare and P. Rogaway. Provably secure session key distribution: the three party case. In STOC 1995, pages 57–66. ACM, 1995.
[6] S. Blake-Wilson, D. Johnson, and A. Menezes. Key agreement protocols and their security analysis. In IMA International Conference on Cryptography and Coding, pages 30–45. Springer, 1997.
[7] R. Canetti. Security and composition of multiparty cryptographic protocols. Journal of Cryptology, 13(1):143–202, 2000.
[8] R. Canetti and H. Krawczyk. Analysis of Key Exchange Protocols and Their Use for Building Secure Channels. In EUROCRYPT 2001, pages 453–474. Springer LNCS 2045, 2001.
[9] R. Canetti and H. Krawczyk. Universally Composable Notions of Key Exchange and Secure Channels. In EUROCRYPT 2002, pages 337–351. Springer LNCS 2332, 2002.
[10] Ö. Dagdelen and M. Fischlin. Security analysis of the extended access control protocol for machine readable travel documents. In ISC, volume 6531 of LNCS, pages 54–68. Springer, 2010.
[11] A. Datta, A. Derek, J. Mitchell, and B. Warinschi. Computationally sound compositional logic for key exchange protocols. In CSFW, pages 321–334. IEEE Computer Society, 2006.
[12] A. Datta, A. Derek, J. C. Mitchell, V. Shmatikov, and M. Turuani. Probabilistic Polynomial-time Semantics for a Protocol Security Logic. In ICALP 2005, pages 16–29. Springer LNCS 3580, 2005.
[13] T. Dierks and C. Allen. The TLS Protocol Version 1.2, 2006. RFC 4346.
[14] M. Fischlin. Pseudorandom function tribe ensembles based on one-way permutations: Improvements and applications. In EUROCRYPT, pages 432–445. Springer, 1999.
[15] R. Küsters. Simulation-based security with inexhaustible interactive Turing machines. In CSFW, pages 309–320. IEEE Computer Society, 2006.
[16] R. Küsters and M. Tuengerthal. Composition Theorems Without Pre-Established Session Identifiers. In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS 2011). ACM Press, 2011. To appear.
[17] B. LaMacchia, K. Lauter, and A. Mityagin. Stronger security of authenticated key exchange. eprint: http://eprint.iacr.org/2006/073, 2006.
[18] V. Shoup. On formal models for secure key exchange. eprint: http://eprint.iacr.org/1999/012, 1999.
[19] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Transport Layer Protocol, 2006. RFC 4253.