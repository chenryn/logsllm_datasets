encoding the transactions it wants to propagate. It may be the case
that the propagated transactions are already received on the neigh-
bors. This is the default transaction propagation protocol supported
widely in Geth, Parity and other clients.
Some Ethereum clients (e.g., Geth with version later than 1.9.11)
support announcements as an optional transaction-propagation pro-
tocol. It works in three messages: 1) The node announces its local
pending transactions by their hash and propagates the hash to its
neighbors. 2) Then within the next 5 seconds, its neighbors will re-
spond with requests if they want to receive the transaction. Within
these 5 seconds, the neighbors will not respond to other announce-
ments of the same transaction. 3) The node propagates the transac-
tions to all requesting neighbors. While this is similar to Bitcoin’s
transaction announcement as exploited in TxProbe [24], there is an
important distinction: Ethereum’s transaction announcement has
IMC ’21, November 2–4, 2021, Virtual Event, USA
Kai Li et al., Kai Li, Yuzhe Tang, Jiaqi Chen, Yibo Wang, and Xianghong Liu
to co-exist with transaction pushing, and Ethereum’s pushing can
bypass the blocking of an announcement.
3 MOTIVATION: SIGNIFICANCE OF
KNOWING BLOCKCHAIN TOPOLOGY
The motivation of this work is that a blockchain network’s topology
is foundational to the blockchain’s security and performance. In this
section, we present a non-exhaustive list of “use cases” of blockchain
topology knowledge in the hope of justifying its significance.
3.1 Implication to Blockchain Security
The knowledge of blockchain network topology is crucial to under-
standing its security against various attack vectors, with examples
listed below.
Use case 1: Targeted eclipse attacks. In the network topol-
ogy, if a blockchain node is found to be of a low degree (i.e., few
neighbors), such a node is particularly vulnerable under a targeted
eclipse attack [29]. That is, such an eclipse attacker can concentrate
her attack payload to the few neighbors to disable the information
propagation and to isolate the victim node from the rest of the
network at low costs.
Use case 2: Single point of failure. The blockchain’s network
topology may reveal the centralization of network connection, lead-
ing to a single point of failure. Specifically, there may be supernodes
that connect to all other nodes, “bridge” nodes that control the con-
nection to the backend of critical services, and topology-critical
nodes removing which may lead to partitioned networks. Direct-
ing denial-of-service attacks onto these critical nodes, using attack
vectors recently discovered [34, 35], can lead to consequences such
as crippled blockchain services and the censorship of individual
transactions.
Use case 3: Deanonymizing transaction senders. With the
knowledge of the network topology, if nodes’ neighbors are distin-
guishing (i.e., node X’s neighbors are distinct from another node
Y’s neighbors), the neighbor set can be used to identify/finger-
print nodes and can be further used to facilitate the deanonymiza-
tion of transaction senders. Specifically, in the deanonymization
attack [20], a blockchain “client” node (i.e., a node behind the NAT)
is identified by its “server”-node neighbors (a server node is of
public IPs, is not behind the NAT and accepts incoming connec-
tions). An attacker then simply monitors the transaction traffic
on all server nodes in the blockchain (e.g., a Bitcoin network con-
tains much fewer server nodes than the client nodes, thus low-
ering the attacker’s costs). The attacker can link a transaction
sender’s blockchain address (her public key) to a client node’s IP
address, which can be further linked to a real-world identity, thus
deanonymizing the blockchain address.
3.2 Implication to Blockchain Performance
Blockchain network topology is essential to achieving its perfor-
mance promises and matters to both miners and client users.
Use case 4: Mining efficiency and mining pools’ QoS (qual-
ity of service). In a blockchain, the time to propagate a recently
found block from its miner to the entire network is critically impor-
tant: If it takes too long to propagate miner X’s block, her block may
arrive after another miner Y’s block, leading to X’s block unable
305
to be included in the blockchain and X’s loss of revenue. Thus, a
blockchain’s network topology that affects propagation delay can
influence a miner node’s revenue and mining-power utilization (i.e.,
how much mining power spent is useful and is reflected in the main
chain’s blocks). Thus, it is unfavorable to have a minor with limited
connectivity and incur long propagation delays.
For a client interested in joining a mining pool, she may want to
access the knowledge of blockchain topology and make an informed
decision to choose the mining pool with better connectivity and
lower propagation delay to ensure high mining revenue.
Use case 5: RPC service’s QoS. For a client sending transac-
tions through RPC services (e.g., infura.io), she may want to choose
a service with better connectivity so that her transaction can be
relayed on a timely basis.
In summary, the knowledge of blockchain network topology is
critical to understanding its security, performance, and decentral-
ization. Given the high market capitalization of today’s blockchains
(e.g., $4106 billion USD for Ethereum as of Sep. 2021 [18]), we be-
lieve measuring blockchains’ network topology is valuable and
worthy even it may cost as much as 60 million USD, estimated in
§ 6.3.
4 RELATED WORK
In this section, we present the existing measurement studies on
public blockchain networks. Existing works can be categorized into
three classes: W1) Measuring blockchain nodes, W2) measuring
blockchain inactive edges, and W3) measuring blockchain active
edges.
Measuring blockchain nodes (W1): Kim et al. [32] propose a
passive method to characterize the Ethereum mainnet by launching
a “supernode” to connect all reachable mainnet nodes and collect-
ing messages exchanged. The result reveals node-wise characteris-
tics including network size, node geo-distribution, clients’ age and
freshness, and others.
Neudecker et al. (2019) [38] is a passive measurement study that
last four years to characterize the behavior of individual Bitcoin
peers and their operators. Their approach is by launching “supern-
odes” and passively collecting transaction traffic, a method similar
to [32].
Measuring blockchain inactive edges (W2): Ethereum’s peer
discovery protocol (RLPx) has a FIND_NODE message through which
a node can discover another node’s current routing-table entries
(inactive neighbors). Recent research works [26, 41] directly mea-
sure Ethereum’s inactive links by sending FIND_NODE messages to
all nodes in an Ethereum network. This method cannot distinguish
a node’s (50) active neighbors from its (272) inactive ones and does
not reveal the exact topology information as TopoShot does.
Henningsen et al. [30] measure the Kademlia network topology
in IPFS by sending crafted peer-discovery queries. Despite other
findings, this work reveals IPFS’s network combines a structured
Kademlia DHT and an unstructured P2P overlay.
Inference of blockchains’ active edges (W3): Coinscope [37]
targets Bitcoin’s network topology and infers the links by leverag-
ing the expiration timestamps of Bitcoin’s ADDR messages.
TxProbe [24] infers Bitcoin’s network topology by exploiting
Bitcoin’s support of orphan transactions and announcement-based
TopoShot: Uncovering Ethereum’s Network Topology Leveraging Replacement Transactions
IMC ’21, November 2–4, 2021, Virtual Event, USA
transaction propagation. We will describe how TxProbe works, with
more details in § 4.1, to understand its applicability to measuring
Ethereum networks.
Grundmann et al. [28] present two Bitcoin-topology inference
approaches among which the more accurate one exploits Bitcoin’s
behavior of dropping double-spending transactions. Neudecker
et al. (2016) [39] conducts a timing analysis of Bitcoin transaction
propagation to infer the network topology. Despite the optimization,
both works are limited in terms of low accuracy.
Daniel et al. [23] propose to exploit block relay mechanisms to
passively infer connections among mining nodes and their direct
neighbors in the ZCash network.
Cao et al. [22] measure Monero’s P2P network topology by
exploiting the timing of neighbors’ liveness probes. Specifically,
a Monero node maintains the liveness of its neighbors (the
last_seen label) by periodically discovering its hop-2 neighbors,
probing their liveness by sending PING messages, and selectively
promoting them to be hop-1 neighbors. Topology inference meth-
ods are proposed to exploit the timing difference of neighbor nodes’
last_seen labels. This method is specific to Monero’s liveness-
check protocol.
Table 1: Existing works on blockchain topology measure-
ment and TopoShot’s distinction
Blockchain Measurement target
Bitcoin
Bitcoin
Nodes
Active edges (W3)
Monero
ZCash
Ethereum
Ethereum
IPFS
Ethereum
Active edges (W3)
Active edges (W3)
Nodes (W1)
Inactive edges (W2)
Inactive edges (W2)
Active edges (W3)
[24] & oth-
Research work
[38]
TxProbe
ers [28, 37, 39]
[22]
[23]
[32]
[26, 41]
[30]
TopoShot
The existing blockchain measurement studies are summarized in
Table 1. In general, existing techniques on W1 and W2 directly mea-
sure the target (as the target information of nodes and inactive edges
is exposed in collected messages), while measuring active edges
(W3) requires inference. Existing topology-inference techniques
focus on non-Ethereum blockchains and exploit blockchain spe-
cific features (e.g., Monero’s timing of liveness probes and Bitcoin’s
announcement-based propagation) that are absent in Ethereum.
4.1 TxProbe’s Applicability to Ethereum
To understand how TxProbe works and its (in)applicability to mea-
suring Ethereum network, we first describe the following measure-
ment framework: Suppose a measurement node M is to detect the
connection between a pair of target nodes, say A and B. Node M
can propagate a transaction txA to node A and observe txA’s pres-
ence on node B. If present, nodes A and B are actively linked. The
success of this method depends on the so-called isolation property.
That is, when node A and B are not actively linked, txA should not
be propagated to node B. In other words, there is no alternative
routing path beside the direct link between A and B that txA can
take to reach node B.
TxProbe [24, 28] materializes this framework to measure active
links in Bitcoin and ensures the isolation property by Bitcoin’s
306
transaction announcement mechanism. Briefly, Bitcoin’s transac-
tion announcement works as follows: a Bitcoin node propagates a
transaction to its neighbor by first sending a transaction announce-
ment (i.e., a hash value) to the neighbor and, upon neighbor’s
acknowledgment, then sending the actual transaction. Bitcoin has
a policy that the neighbor node receiving an announcement will
ignore the subsequent announcements of the same transaction from
other nodes for 120 seconds. TxProbe exploits this policy to ensure
the isolation during the 120-second period. This is done by hav-
ing Node M to announce txA to all nodes besides B so that these
nodes will not relay txA when Node A starts to propagate txA to B,
ensuring the isolation property.
However, TxProbe’s method is inapplicable to measuring
Ethereum. Ethereum’s transaction propagation only partially de-
pends on announcement, that is, a transaction is announced to some
neighbors and is directly sent to other neighbors without announce-
ment. The existence of direct propagation, no matter how small
portion it plays, negates the isolation property, as measurement
transaction txA can be propagated through the nodes taking direct
propagation as the alternative path to reach node B, introducing
false positives to the measurement results.
In addition, TxProbe relies on Bitcoin’s UTXO model, which dif-
fers from Ethereum’s account model. Directly applying TxProbe to
Ethereum risks incorrect measurement, as analyzed in Appendix A.
5 TOPOSHOT MEASUREMENT METHODS
We first present our observation on real Ethereum clients’ behavior
in transaction replacement and eviction, which lays the foundation
of TopoShot measurement method (§ 5.1). We then describe the
measurement primitive in TopoShot that detects just one link
between two nodes (§ 5.2). We will then describe how to use this
primitive to measure a network of a large number of links (§ 5.3).
5.1 Profiling Ethereum Clients’ Behavior
We first describe a parameterized model for mempool and then our
measurement study that reveals the mempool parameters of real
Ethereum clients.
mempool model: Recall that transaction eviction (replacement)
is a mempool process that takes as input the initial state of mempool
and an incoming transaction tx1 and produces as output the end
state of the mempool and possibly, a transaction tx2 that is of the
same (different) sender with tx1 and that is evicted (replaced) from
the mempool. To formally describe the process, suppose the initial
state is a full mempool consisting of l pending transactions and L−l
future transactions, where L is the capacity of the mempool (denoted
in Table 2). The incoming transaction tx1 is a future transaction with
Gas price higher than any transactions currently in the mempool.
There are u transactions currently in the mempool that are of the
same sender with tx1.
When there is another transaction tx2 in the mempool that has
the same sender and nonce with tx1, admitting tx1 to the mempool
triggers the replacement of tx2. The generic transaction replace-
ment strategy is that mempool decides to replace tx2 by tx1, if tx1’s
Gas price is 1 + R of tx2’s Gas price.
Otherwise (i.e., when there is no transaction of the same sender
and nonce with tx1), admitting tx1 may trigger transaction eviction.
IMC ’21, November 2–4, 2021, Virtual Event, USA
Kai Li et al., Kai Li, Yuzhe Tang, Jiaqi Chen, Yibo Wang, and Xianghong Liu
For transaction eviction, the situation of interest to us is the evic-
tion victim tx2 being a pending transaction. Under this situation,
the transaction eviction strategy generally follows the template:
mempool decides to evict a pending transaction tx2 by tx1, if 1) tx1’s
Gas price is higher than tx2’s Gas price, and 2) there are more than P
pending transactions existing in the mempool, and 3) there are fewer
than U existing transactions of the same sender with tx1. The three
mempool parameters, namely R, U and P, and their meanings are
presented in Table 2.
Table 2: Notations
Notation Meaning
R
Minimal Gas price difference for an incoming transaction (tx) to replace
an existing tx in mempool
Max number of future txs sent from the same account that can be admitted
to a node’s mempool
Minimal number of pending txs buffered in a node to allow eviction by
future txs
Maximal number of txs allowed to store in a mempool (mempool capacity)
U
P
L
Replacement
behavior
R
10%
12.5%
0%
10%
0%
Table 3: Profiling different Ethereum clients in terms of
transaction eviction and replacement policies The second
column refers to the percentage of mainnet nodes running
a specific client [6].
Ethereum
clients
Deployment
(mainnet)
Eviction behavior
P
0
2000
0
0
0
U
4096
81
17
∞
1
83.24%
14.57%
1.53%
0.52%