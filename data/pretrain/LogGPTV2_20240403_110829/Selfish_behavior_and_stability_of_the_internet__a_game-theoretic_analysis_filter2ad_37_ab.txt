penalty is smaller than that for a Hybrid penalty.
TCP SACK ﬂows can sustain many losses within a single con-
gestion window. In fact, unless a SACK ﬂow sees so many losses
within a window that there are less than 3 duplicate acknowl-
2For convenience, when a TCP ﬂows shows a Severe reaction to
losses, we say that it incurs or implements a Severe penalty and
we refer to it as a Severe ﬂow. Similarly, the terms Gentle penalty
and Gentle ﬂow can be deﬁned.
119Severe penalty (Tahoe):
N t+1
i
i + αi
= N t
= 0
= βiN t
i
(cid:1)
if Lt
i = 0
(cid:1)
if Lt
(cid:1)
i
if Lt
i
≥ 1 where t − τS  0
i = 0 and N t
i = 1
(cid:1)
i > 1 where t − τS  0 is a small constant.
edgments received or unless a retransmitted packet is lost again,
it will not time-out. Since such time-outs for SACK are highly
uncommon in reality, we consider TCP SACK ﬂows to implement
a Gentle penalty. The deﬁnitions of the three penalty models are
stated formally in Table 1.
In the above model, the number of losses Lt
i seen by a ﬂow is
determined by the queue management algorithms used. This fact
is discussed in greater detail in the next section.
It should be noted, however, that we do not claim that this
model is realistic. We only claim, and show in our later results,
that it reproduces the TCP Game behavior seen in the more
realistic simulations. Thus, it appears to capture the aspects of
reality most relevant to the question we are addressing.
4. ANALYSIS OF THE TCP GAME
In this section, we describe the results from analysis and sim-
ulation of the TCP Game. For the analysis, we use the penalty-
based model presented in the previous section. We begin this
section by describing the simulation set-up and the methodology
used for obtaining the Nash equilibrium experimentally. We then
present the results of these simulations and of our analysis of the
penalty-based model. We do so by considering each combina-
tion of loss-recovery and queue management algorithm in turn,
ﬁrst describing the analytical results for that setting and then
presenting the corresponding simulation results.
4.1 Simulation Methodology
Since we assume that all ﬂows traverse a single common bottle-
neck, we use the standard dumb-bell topology shown in Figure 1
for our simulations. Flow Fi, i = 1 . . . n, traverses the path from
Si to Di. In all our simulations, we set the bottleneck capacity
C to 10Mbps and we ﬁx n = 10. We now describe our simulation
methodology for arriving at the Nash equilibrium of the TCP
Game when the ﬂows are allowed to vary their increase parame-
ters alone.
When varying α we use the following procedure. We run our
simulations in iterations. In the jth iteration, we ﬁx the param-
eters for ﬂows F1 . . . Fn−1 to the single tuple (αj , β). Let the
(cid:1)
parameters for the ﬂow Fn be denoted by the tuple (α
, β). We
in the interval max{0, αj − ∆} ≤
(cid:1)
run simulations for values of α
(cid:1) ≤ αj + ∆, where ∆ is a ﬁxed large positive constant. Hence-
α
forth, we will use the notation αj,low = max{0, αj − ∆} and
(cid:1)
αj,high = αj + ∆. For each value of α
we record the value of
(cid:1)
(cid:1)
) and deﬁne αj,best as the value of α
Gn(α
that maximized Gn.
The next iteration, j + 1 starts with the parameters for all the
n ﬂows set to (αj,best, β). The simulation stops when at the end
S
1
S
2
S
n
R
1
C Mbps
R
2
50 ms
100 Mbps, ~5ms
100 Mbps, ~5ms
D
1
D
2
D
n
Figure 1: A single-bottleneck topology.
of some iteration k, αk,best = αk; this value, denoted by αE , is
the Nash equilibrium value of α. We then say that for the given
situation, the parameters at Nash equilibrium are (αE , β) for all
ﬂows. Notice that the simulation methodology we use assumes
that the Nash equilibrium is symmetric.
(cid:1)
In every iteration, for each value of α
When varying α, we set β = 0.5 and all simulations start with
α1 = 1.
, we run the
simulation 20 times (the total simulation time is 100s and we
discard the ﬁrst 50s of simulation data to allow the ﬂows reach
In each of the 20 runs, the start times of the n
steady state).
ﬂows are randomized. We use the average value of the goodput
seen by Fn in these runs for the value of Gn. In obtaining the
value of αj,best we use the following criterion: when comparing
α1 and α2 (α1 (cid:5)= α2), we say that Gn(α1) < Gn(α2) if and only
if the 85% conﬁdence around the values of Gn(α1) and Gn(α2) do
not overlap. The value 85% was chosen based on our experience
with these simulations, but is not supported by any principled
argument.
The simulations for β variation are similar. In this set of simu-
lations, we set α = 1 for all ﬂows. In addition, we set βj,low = 0.5
and βj,high = 0.99. We do not test for values of β < 0.5 since
they are clearly sub-optimal. The methodology we use in our sim-
ulations with ﬂows varying α and β simultaneously is also similar
and is a combination of the above two simulation set-ups.
We consider three forms of loss recovery (and three associ-
ated penalty functions in our analytical model): SACK (Gentle),
Tahoe (Severe penalty), and Reno (Hybrid penalty).3 We also
consider two forms of buﬀer management: simple drop-tail and
RED. We discuss the six possible combinations in the following
subsections, starting with the analytical results with the penalty
model and then comparing it to the simulation results on the
actual TCP algorithm. We start by presenting the results for
drop-tail routers, and then discuss RED routers.
4.2 FIFO Drop-Tail Gateways
When FIFO drop-tail buﬀers are used, all ﬂows experience
losses at about the same instant of time, which we call the over-
ﬂow point. The overﬂow point, in fact, spans an entire round. The
number of losses assigned by the FIFO drop-tail buﬀer to ﬂow Fi
at an overﬂow point is exactly equal to its increase number αi.
Thus, Li = αi upon overﬂow. We justify this loss assignment
policy of FIFO drop-tail buﬀers below.
Let us consider a round, at the start of which the buﬀer is
exactly full (i.e., at the overﬂow point). TCP ensures all trans-
missions are ACK-clocked. ACK-clocking, in turn, ensures that
no losses occur, even if the buﬀer is full, as long as each ﬂow
continues to send at the same rate as at the start of the round.
However, assuming that αi is an integer, ﬂow Fi increases its
value of Ni for the subsequent round by αi causing an increase
in the sending rate.
In fact, from the way congestion window
increase is deﬁned in TCP, Ni increases gradually with each in-
coming ACK. At each instant when there is an increment of 1
3In this paper, we do not model/analyze TCP-Newreno. How-
ever, our NS-2 simulations have shown that the Nash equilibria of
the TCP Game for Newreno ﬂows are similar to those for SACK
ﬂows.
120Notation Description
C
R
R
N t
Ni
i
Lt
i
Gi
αi
βi
A
τS
αE
βE
τO
Si
T
The capacity of the bottleneck link (the bandwidth-delay product)
The propagation round trip delay of the bottleneck link
The mean round trip time (R + RQ), where RQ is the mean queueing delay on the link
The number of packets transmitted by ﬂow Fi in round t
The value of Ni immediately after an overﬂow point, in steady-state.
The number of losses experienced by ﬂow Fi in round t
The mean goodput of ﬂow Fi
The increase parameter for ﬂow Fi
The decrease parameter for ﬂow Fi

The number of rounds spent incurring severe penalty
The common value of α for all ﬂows at Nash equilibrium (when ﬂows are allowed to vary their increase parameters)
The common value of β for all ﬂows at Nash equilibrium (when ﬂows are allowed to vary their decrease parameters)
The number of rounds between successive buﬀer overﬂow points (drop-tail buﬀers) or
The expected number of rounds between successive multiplicative decreases of a ﬂow (RED buﬀers)
The number of packets transmitted by ﬂow Fi between a pair of consecutive overﬂow points
The total length of the period between two consecutive overﬂow points in seconds.
n−1
i=1 αi
Table 2: Notation used in our analysis.
in Ni, Fi bursts out two packets back-to-back because of the in-
crease in the number of packets it is allowed to keep outstanding.
This causes a temporary disturbance to the ACK-clocked trans-
mission of Fi. The result is a buﬀer overﬂow and Fi experiencing
a loss each time Ni is increased by 1. It follows from this that the
number of losses seen by ﬂow Fi at the overﬂow point is exactly
αi.4
We summarize the notation we use in the subsequent sections in
Table 2 for easy reference. We now look at each of the three forms
of loss-recovery – SACK/Gentle, Tahoe/Severe and Reno/Hybrid
– in turn.
4.2.1 TCP-SACK/Gentle Penalty
Analysis of Gentle Penalty Let C denote the capacity of the
bottleneck link in packets (i.e., C is the bandwidth-delay prod-
uct). From Assumption (V) (Section 3.1), the size of the FIFO
drop-tail buﬀer is C. Let τO denote the number of rounds be-
tween consecutive overﬂow points in steady state. For each ﬂow
Fi, we can write
Gi =
Si
T
(1)
where Si is the number of packets transmitted by ﬂow Fi between
a pair of consecutive overﬂow points and T is the total length of
the period between two consecutive overﬂow points in seconds, as
deﬁned in Table 2.
Let Ni(k) be the value of the Ni after the kth overﬂow point
and let Ni be the limiting value of Ni(k) as k → ∞. From the
deﬁnition of AIMD, we can write,
Ni = β(Ni + (τOαi − γαi))
since Li = αi. This gives us
Ni =
β
1 − β
(τOαi − γαi) ≈ β
1 − β
τOαi
(2)
Also, from the deﬁnition of an overﬂow point, we have,
in
steady-state,
(Ni + τOαi) = 2C
(3)
n
Xi=1
since both the buﬀer and the link are full at an overﬂow point.
The number of packets, Si, transmitted by ﬂow Fi in the period
of τO + 1 rounds between the end of an overﬂow point and the
4We have noticed that even with (on-oﬀ) cross traﬃc, the average
number of losses observed by a ﬂow is roughly equal to its increase
parameter.
It was also observed by the designers of RED that
drop-tail routers penalize bursty behavior [13].
end of the subsequent overﬂow point5, in steady-state is given by
Si =
Ni + tαi
τO
Xt=0
(4)
These equations apply to both the α and β variation analyses,
In both cases, we assume that all the
which we present next.
ﬂows have reached their steady-state.
Varying α Setting β = 0.5 in Equation 2, we obtain
Ni ≈ τOαi
(5)
Substituting Equation 5 in Equation 4, we get, Si = αiτO
t=0(τO+
t). The length of each of the rounds between overﬂow points, in
seconds, is diﬀerent, due to the queueing at the bottleneck router.
In particular, if we let R denote the base propagation RTT, then
the length of the tth round since the last overﬂow point would be
τO (cid:17) for 1 ≤ t ≤ τO + 1 (Assuming that queueing delay
varies linearly from 0 to R over the τO rounds). Thus, the total
length in seconds of the period of between overﬂow points, T , is
Using the expressions for Sn and T derived above in Equa-
R . From Equations 3 and 5,
t=0 R(cid:16)1 + t
τO(cid:17) = R
T = αnτO
τO τO
t=0(τO + t).
R(cid:16)1 + t−1
given by T =t=τO
tion 1, we obtain, Gn = Sn
τO =
. This gives
C

n
i=1 αi
Gn =
αnC
R(A + αn)
(6)
where A =n−1
i=1 αi. From the above expression for gooodput, it
is easy to see that given the values of αi for ﬂows F1, . . . , Fn−1,
the value of Gn(αn) is strictly increasing in αn. Hence at Nash
equilibrium, αE could be arbitrarily large.
Varying β For analyzing the Nash equilibrium resulting from
allowing the ﬂows to vary β, we compare the goodputs of ﬂow Fn
resulting from the following two settings of the parameters of the
n ﬂows:
(i) Flows Fi, i = 1, . . . , n − 1 all have a decrease parameter of
βi = β (ﬁxed). The decrease parameter of ﬂow Fn, βn is
larger than β. Let Gn(βn) be the goodput of Fn in this
setting.
(ii) All the n ﬂows have the same decrease parameter β. Let
Gn(β) denote the goodput of ﬂow Fn in this setting.
We will use the superscripts (i) and (ii) to diﬀerentiate quantities
in either setting. For example, we will Let N (i)
denote
the values of Ni in settings (i) and (ii) respectively.
In either
setting, αi = 1 for i = 1, . . . , n.
5Henceforth, we will also refer to these τO + 1 rounds as the
rounds “between” overﬂow points
and N (ii)
i
i
121 
)
s
p
b
M
n
i
(
t
u
p
d
o
o
G
10
8
6
4
2
0
0
20
αE
40
α1 = 1 (α1,best = 40)
α2 = 40 (α2,best = 40)
10
8
6
4
2
)
s
p
b
M
n
i
(