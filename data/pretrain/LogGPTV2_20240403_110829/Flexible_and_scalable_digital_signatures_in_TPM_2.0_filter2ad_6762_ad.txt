step to its corresponding line numbers in Figure 1.
1. Create a DAA key (1-2). The host asks the TPM to
create a DAA key tk, by invoking Create(). The result
∗
is a key blob denoted by (tk)
wrapped by the parent
key.
2. Request a credential (2-7). The host contacts the is-
suer to request for a DAA credential by sending public
keys epk and tpk. The issuer validates epk and returns
back with an encryption blob a of a nonce c using epk
and tpk. The host loads the DAA key tk to the TPM
by using Load(). The host then asks the TPM to re-
lease the nonce c by using ActivateCredential(ek, tk, a),
in which the TPM veriﬁes the integrity of the cipher-
text a and returns the nonce c.
3. Prove key possession (8-11). The host asks the TPM
to sign the nonce c from the previous step by using
Sign(tk, c) on a conventional signature scheme. The
host then sends the signature σ and nonce c back to the
issuer. The issuer veriﬁes the nonce c from the previous
step and veriﬁes the signature. The issuer creates the
corresponding DAA credential cre = sigisk(tpk) using
its secret key isk and the TPM public key tpk. The
issuer then creates a session key k, an authentication
encryption of cre using k denoted as b, and creates an
encryption blob of k denoted as d. The issuer returns
back b and d.
4. Release the credential (11-12).
In order to ask the
TPM to release the session key k that was used to en-
crypt the credential cre, the host uses ActivateCredential
once again with input (ek, tk, d). After the host ob-
tains k from the TPM, it decrypts the credential cre
and veriﬁes its integrity.
4.5 The TPM 2.0 DAA Sign/Verify Process
The DAA Sign/Verify process involves three entities: a
TPM t, the TPM’s host h and a veriﬁer v. Suppose that
when the Sign/Verify protocol starts, these entities have al-
ready obtained the following necessary key materials and
other parameters. The TPM has a private storage key inter-
nally and this key is called a parent key, denoted by parentK.
The host has access to the DAA issuer’s public key ipk and a
∗
copy of the TPM’s DAA key blob (tk)
together with the as-
sociated credential cre. The veriﬁer has access to the DAA
issuer’s public key ipk and a list of rogue TPM’s private
keys RogueList. A DAA scheme allows the veriﬁer to detect
whether or not a given DAA signature was created by a key
in RogueList. Any signature signed by a key in RogueList will
be rejected. We assume that in advance the veriﬁer and host
have agreed a basename value bsn, a message msg and a ver-
iﬁer’s nonce nV , all of which will be signed in the protocol.
As shown in Figure 2, the Sign/Verify protocol has the fol-
lowing three steps. We refer each step to its corresponding
line numbers in Figure 2.
1. Pre-signing process (1). The host randomizes the cre-
dential cre to obtain cre’. As mentioned in Section 4.1,
given an arbitrary pair of cre and cre’ values, ﬁnding
whether or not they are associated to each other is
computationally infeasible. The host can make this
operation as pre-computation, since it is independent
to bsn, msg and nV .
2. Signing process (1-6). The host ﬁrst loads the key
∗
blob (tk)
into the TPM. The TPM decrypts the blob
using the parent key parentK and checks whether the
key is valid. If the check passes, the TPM creates a
key handle tk.handle and returns it to the host. The
44Host (h)
epk, ipk
Issuer (i)
isk, ipk, epk
tpk, epk-
a
If epk /∈ Valid, return reject
Else c←{0, 1}|c|
a = encepk(tpk, c)
TPM (t)
esk
∗←Create()
(tk)
tk.handle←Load((tk)
∗
)
c←ActivateCredential(ek, tk, a)
w←Sign(tk, c)

request key
∗-
(tk)
(tk)
∗
tk.handle-
a
c -
c
w -
Entities
Keys
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
k←ActivateCredential(ek, tk, d)
d
k -
cre = (b)
−1
k
c, w-
d, b
If c or w /∈ Valid, return reject
Else k←{0, 1}|k|
, d = encepk(tpk, k)
cre = sigisk(tpk), b = (cre)k
Figure 1: The TPM 2.0 DAA Join protocol.
Entities
Keys
Be signed
TPM (t)
parentK
tk.handle←Load((tk)
∗
)
(R1, R2, K2)←Commit(P1, ˆs, ˆy)
σt←Sign(tk, ch)
1:
2:
3:
4:
5:
6:
7:
8:
9:
10:
Host (h)
∗, cre, ipk
(tk)
msg, bsn, nV
cre
(cid:2)←Randomize(cre)
Compute ˆs, ˆy
Compute ch
σ←(cre
(cid:2), σt)
σ -
(tk)
∗
tk.handle-
P1, ˆs, ˆy
R1, R2, K2-
ch
σt -
Veriﬁer (v)
ipk
msg, bsn, nV
If σ /∈ Valid, return false
∀f(cid:2) ∈ RogueList
if (σ, f(cid:2), bsn) ∈ Valid
return false
return true
Figure 2: The TPM 2.0 DAA Sign/Verify protocol.
host then computes the values ˆs and ˆy from bsn and
calls the Commit() command with the values ˆs, ˆy and
P1, where P1 is a part of ipk. The TPM responses
the command as Commit Oracle of tpm.sign described
in Section 2, and returns the values R1, R2 and K2.
The host then computes the value ch and calls the
Sign() command with this value as input. The TPM
responses the command as Sign Oracle of tpm.sign de-
scribed again in Section 2, and returns the value σt.
(cid:3)
The host packs the DAA signature σ from cre
and σt
and sends the signature to the veriﬁer.
3. Verifying process (6-10). The veriﬁer ﬁrst veriﬁes the
validation of the signature σ, and then checks whether
the signature was created by any key in RogueList. If
both of the veriﬁcations given an appropriate answer,
the TPM accepts the signature; otherwise rejects it.
4.6 Comparison with DAA in TPM 1.2
We compare our DAA schemes in TPM 2.0 with the DAA
scheme in TPM 1.2 with two aspects: code size and perfor-
mance. We shall show that our signature primitive achieves
signiﬁcant code and performance savings.
For code size, IBM software TPM 1.2 implementation3
takes 3.28MB code space, in which 225KB code is used for
DAA. In other words, DAA takes 6.9% of total code space.
On TPM 2.0 v0.98 software reference implementation re-
leased by Microsoft, TPM 2.0 takes 1.61MB code space, in
which only 7KB code is used for DAA. This is less than 0.5%
of the total code space.
As for performance, DAA join protocol in TPM 1.2 takes
9 modular exponentiations, where modulus is either 1632-
bit or 2048-bit, and exponents are more than 200-bit, with
two exponents larger than 2048-bit. DAA sign protocol in
TPM 1.2 takes 6 modular exponentiations and one of them
has exponent more than 2048-bit. In TPM 2.0, the most ex-
pensive operation in the DAA join protocol is a conventional
signature, including one scalar multiplication on an elliptic
curve. The DAA sign operations takes 3 scalar multiplica-
tions on an elliptic curve. According to [18], on an Inﬁneon
TPM 1.2 chip (revision 1.2.3.16), DAA join takes 56.7 sec-
onds and DAA sign takes 37.7 seconds. We do not have
concrete DAA performance numbers on TPM 2.0, as TPM
2.0 chips are not publicly available yet. Based on prelimi-
3http://ibmswtpm.sourceforge.net/
45nary performance ﬁgures from Nationz Technologies4 on a
discrete 40MHz TPM 2.0 chip, a scalar multiplication opera-
tion takes only 125ms on a 256-bit prime curve. We estimate
that DAA join or sign in TPM 2.0 takes less than 0.5 second.
5. APPLICATION 2: U-PROVE WITH TPM
AS A PROTECTED DEVICE
Microsoft U-Prove technology [24] is based on the Ste-
fan Brands pseudonym system [4] and uses the blind signa-
tures and zero-knowledge proofs as the fundamental building
blocks. Stefan Brands provided the ﬁrst description of the
U-Prove technology in 2000 [4]. Later Microsoft acquired the
technology and published U-Prove 1.1 protocol speciﬁcation,
which were updated to the current revision of U-Prove 1.1
protocol speciﬁcation (the 2nd version) that was published
in April 2013 [24].
In the U-Prove scheme, a U-Prove token is served as a
pseudonym for a prover. This token contains a number of
attributes of the prover certiﬁed by an issuer; and the at-
tributes can be selectively disclosed to a veriﬁer.
The U-Prove 1.1 speciﬁcation [24] suggests that a U-Prove
token can be optionally protected by a trusted hardware de-
vice such as a smartcard or a mobile phone. In that case,
the U-Prove token cannot be used by the prover without
the assistant of this device. The device can protect multi-
ple tokens issued by multiple issuers, but it is too costly to
implement all the prover algorithms in the trusted device.
U-Prove 1.1 speciﬁes how to split the prover functionality
between a trusted device and a prover platform.
U-Prove is not supported by TPM 1.2. Another motiva-
tion of this paper is to enable the U-Prove technology in
TPM 2.0 such that the TPM can be a trusted device for
U-Prove, using the same TPM signature primitive for DAA
without any additional overhead. In other words, U-Prove
is supported by TPM 2.0 with zero extra cost of the TPM
resources. In this section, we brieﬂy review the Microsoft
U-Prove technology [24] and describe how to use TPM 2.0
as a protected device for U-Prove 1.1.
5.1 Brief Review of U-Prove 1.1
In U-Prove, there is a U-Prove token served as a pseudonym
for the prover. This token contains a number of attributes of
the prover certiﬁed by the issuer which can be selectively dis-
closed to a veriﬁer. The prover can decide which attributes
to show and which attributes to hide. For each token, there
is a public key which aggregates all the information of the
token and a signature from the issuer over the public key to
certify the token. Let G = (cid:2)g(cid:3) be a cyclic group of prime
order p. The issuer public key is (g0, g1, . . . , gn, gt) ∈ G and
the corresponding private key is y0 such that g0 = gy0 . Let
(A1, . . . , An) ∈ {0, 1}∗
be n attributes of the prover, encoded
into the U-Prove token. The public key h ∈ G of a U-Prove
token has the following form
h = (g0gx1
1 ··· gxn
n gxt
where (x1, . . . , xn) ∈ Zp are the corresponding hash values of
attributes (A1, . . . , An) respectively, xt is a hash value of the
issuer parameters, and α ∈ Zp is the secret key of the prover.
A U-Prove token is (h, σ), where σ is a blind signature on
the prover public key h issued by the issuer. There are two
protocols in U-Prove: issuing token and presenting token.
4Private communication with Nationz Technologies.
t )α
In the issuing token protocol, both the prover and the
issuer agree on the attributes (A1, . . . , An) of the prover,
thus they agree on γ = (g0gx1
t ). In the end of the
issuing token protocol, the prover obtains a blind signature
σ on h = γα such that the issuer does not know the secret α.
The signature σ = (σz, σc, σr) is a signature of knowledge of
the following form
1 ··· gxn
n gxt
SPK{(y0) :g 0 = gy0 ∧ σz = hy0}.
In the presenting token protocol, the prover selectively
discloses a set of her attributes encoded in the public key to
a veriﬁer. The goal of this protocol is to prove the integrity
and authenticity of the disclosed attribute values. In addi-
tion, the prover may commit to the values encoded in some
attributes and prove that the commitments are computed
correctly. Let D ⊂ {1, . . . , n} be the indices of disclosed
attributes, U = {1, . . . , n} −D to the indices of undisclosed
attributes, and C ⊂ U be indices of committed attributes.
In this protocol, for each i ∈ C, the prover chooses oi ran-
domly from Zp and computes a Pedersen commitment [25]
of xi as ci = gxi goi
1 . Then the prover computes the following
zero-knowledge proof of knowledge
SPK{(α,{xi}i∈U ,{oi}i∈C ) :{c i = gxi goi
∧ h = (g0gx1
1 }i∈C
1 ··· gxn
n gxt
t )α}(m).
The prover sends the U-Prove token (h, σ), disclosed at-
tributes {Ai}i∈D, commitments of attributes {ci}i∈C , and
the signature of knowledge to the veriﬁer. The veriﬁer veri-
ﬁes the blind signature σ on h, computes {xi}i∈D from at-
tributes {Ai}i∈D, and veriﬁes the above signature of knowl-
edge.
5.2 Protocol Details of U-Prove 1.1
In U-Prove 1.1, a U-Prove token can be optionally pro-
tected by a hardware device such as a smart card. The pre-
senting token protocol requires both the token secret key α
and the presence of the hardware device. Therefore, even if
the U-Prove token is stolen by an attacker, it cannot be used
unless the device is also physically captured by the attacker.
Let gd ∈ G be the public device generator. Let xd ∈ Zp be
the device private key andh d = gxd
d be the device public key.
The public key h of U-Prove token with device protection
has the following form:
h = (g0gx1