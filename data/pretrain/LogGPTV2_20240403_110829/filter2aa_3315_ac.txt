typedef struct __IMAGE_NT_HEADERS {
    DWORD Signature;
    ___IMAGE_FILE_HEADER FileHeader;
    ___IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} ___IMAGE_NT_HEADERS32, * ___PIMAGE_NT_HEADERS32;
typedef struct __IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;
        DWORD   OriginalFirstThunk;
    } DUMMYUNIONNAME;
    DWORD   TimeDateStamp;
    DWORD   ForwarderChain;
    DWORD   Name;
    DWORD   FirstThunk;
} ___IMAGE_IMPORT_DESCRIPTOR, * ___PIMAGE_IMPORT_DESCRIPTOR;
typedef struct __IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    char   Name[100];
} ___IMAGE_IMPORT_BY_NAME, * ___PIMAGE_IMPORT_BY_NAME;
typedef struct __IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;
} ___IMAGE_BASE_RELOCATION, * ___PIMAGE_BASE_RELOCATION;
另外我们还需定义像rich header、ILT_ENTRY等结构：
typedef struct __IMAGE_SECTION_HEADER {
    BYTE    Name[___IMAGE_SIZEOF_SHORT_NAME];
    union {
        DWORD   PhysicalAddress;
        DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} ___IMAGE_SECTION_HEADER, * ___PIMAGE_SECTION_HEADER;
typedef struct __RICH_HEADER_INFO {
    int size;
    char* ptrToBuffer;
    int entries;
} RICH_HEADER_INFO, * PRICH_HEADER_INFO;
typedef struct __RICH_HEADER_ENTRY {
    WORD  prodID;
    WORD  buildID;
    DWORD useCount;
} RICH_HEADER_ENTRY, * PRICH_HEADER_ENTRY;
typedef struct __RICH_HEADER {
    PRICH_HEADER_ENTRY entries;
} RICH_HEADER, * PRICH_HEADER;
然后就是处理RVA地址转换问题，这里给出一个公式，按照这个编写代码即可：
验证是否为PE文件：
typedef struct __ILT_ENTRY_32 {
    union {
        DWORD ORDINAL : 16;
        DWORD HINT_NAME_TABE : 32;
        DWORD ORDINAL_NAME_FLAG : 1;
    } FIELD_1;
} ILT_ENTRY_32, * PILT_ENTRY_32;
typedef struct __ILT_ENTRY_64 {
    union {
        DWORD ORDINAL : 16;
        DWORD HINT_NAME_TABE : 32;
    } FIELD_2;
    DWORD ORDINAL_NAME_FLAG : 1;
} ILT_ENTRY_64, * PILT_ENTRY_64;
typedef struct __BASE_RELOC_ENTRY {
    WORD OFFSET : 12;
    WORD TYPE : 4;
} BASE_RELOC_ENTRY, * PBASE_RELOC_ENTRY;
int INITPARSE(FILE* PpeFile) {
    ___IMAGE_DOS_HEADER TMP_DOS_HEADER;
    WORD PEFILE_TYPE;
    fseek(PpeFile, 0, SEEK_SET);
    fread(&TMP_DOS_HEADER, sizeof(___IMAGE_DOS_HEADER), 1, PpeFile);
    if (TMP_DOS_HEADER.e_magic != ___IMAGE_DOS_SIGNATURE) {
        printf("Error. Not a PE file.\n");
        return 1;
    }
解析NT Header
    fseek(PpeFile, (TMP_DOS_HEADER.e_lfanew + sizeof(DWORD) + 
sizeof(___IMAGE_FILE_HEADER)), SEEK_SET);
    fread(&PEFILE_TYPE, sizeof(WORD), 1, PpeFile);
    if (PEFILE_TYPE == ___IMAGE_NT_OPTIONAL_HDR32_MAGIC) {
        return 32;
    }
    else if (PEFILE_TYPE == ___IMAGE_NT_OPTIONAL_HDR64_MAGIC) {
        return 64;
    }
    else {
        printf("Error while parsing IMAGE_OPTIONAL_HEADER.Magic. Unknown 
Type.\n");
        return 1;
    }
}
void PE64FILE::ParseNTHeaders() {
    fseek(Ppefile, PEFILE_DOS_HEADER.e_lfanew, SEEK_SET);
    fread(&PEFILE_NT_HEADERS, sizeof(PEFILE_NT_HEADERS), 1, Ppefile);
    PEFILE_NT_HEADERS_SIGNATURE = PEFILE_NT_HEADERS.Signature;
    PEFILE_NT_HEADERS_FILE_HEADER_MACHINE = 
PEFILE_NT_HEADERS.FileHeader.Machine;
    PEFILE_NT_HEADERS_FILE_HEADER_NUMBER0F_SECTIONS = 
PEFILE_NT_HEADERS.FileHeader.NumberOfSections;
    PEFILE_NT_HEADERS_FILE_HEADER_SIZEOF_OPTIONAL_HEADER = 
PEFILE_NT_HEADERS.FileHeader.SizeOfOptionalHeader;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_MAGIC = 
PEFILE_NT_HEADERS.OptionalHeader.Magic;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_CODE = 
PEFILE_NT_HEADERS.OptionalHeader.SizeOfCode;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_INITIALIZED_DATA = 
PEFILE_NT_HEADERS.OptionalHeader.SizeOfInitializedData;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_UNINITIALIZED_DATA = 
PEFILE_NT_HEADERS.OptionalHeader.SizeOfUninitializedData;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_ADDRESSOF_ENTRYPOINT = 
PEFILE_NT_HEADERS.OptionalHeader.AddressOfEntryPoint;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_BASEOF_CODE = 
PEFILE_NT_HEADERS.OptionalHeader.BaseOfCode;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_IMAGEBASE = 
PEFILE_NT_HEADERS.OptionalHeader.ImageBase;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_SECTION_ALIGNMENT = 
PEFILE_NT_HEADERS.OptionalHeader.SectionAlignment;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_FILE_ALIGNMENT = 
PEFILE_NT_HEADERS.OptionalHeader.FileAlignment;
解析SectionHeaders：
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_IMAGE = 
PEFILE_NT_HEADERS.OptionalHeader.SizeOfImage;
    PEFILE_NT_HEADERS_OPTIONAL_HEADER_SIZEOF_HEADERS = 
PEFILE_NT_HEADERS.OptionalHeader.SizeOfHeaders;
    PEFILE_EXPORT_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_EXPORT];
    PEFILE_IMPORT_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_IMPORT];
    PEFILE_RESOURCE_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_RESOURCE
];
    PEFILE_EXCEPTION_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_EXCEPTIO
N];
    PEFILE_SECURITY_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_SECURITY
];
    PEFILE_BASERELOC_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_BASERELO
C];
    PEFILE_DEBUG_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_DEBUG];
    PEFILE_ARCHITECTURE_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_ARCHITEC
TURE];
    PEFILE_GLOBALPTR_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_GLOBALPT
R];
    PEFILE_TLS_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_TLS];
    PEFILE_LOAD_CONFIG_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_LOAD_CON
FIG];
    PEFILE_BOUND_IMPORT_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_BOUND_IM
PORT];
    PEFILE_IAT_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_IAT];
    PEFILE_DELAY_IMPORT_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_DELAY_IM
PORT];
    PEFILE_COM_DESCRIPTOR_DIRECTORY = 
PEFILE_NT_HEADERS.OptionalHeader.DataDirectory[___IMAGE_DIRECTORY_ENTRY_COM_DESC
RIPTOR];
}
解析导入表：
void PE64FILE::ParseSectionHeaders() {
    PEFILE_SECTION_HEADERS = new 
___IMAGE_SECTION_HEADER[PEFILE_NT_HEADERS_FILE_HEADER_NUMBER0F_SECTIONS];
    for (int i = 0; i < PEFILE_NT_HEADERS_FILE_HEADER_NUMBER0F_SECTIONS; i++) {
        int offset = (PEFILE_DOS_HEADER.e_lfanew + sizeof(PEFILE_NT_HEADERS)) + 
(i * ___IMAGE_SIZEOF_SECTION_HEADER);
        fseek(Ppefile, offset, SEEK_SET);
        fread(&PEFILE_SECTION_HEADERS[i], ___IMAGE_SIZEOF_SECTION_HEADER, 1, 
Ppefile);
    }
}
void PE64FILE::ParseImportDirectory() {
    DWORD _import_directory_address = 
resolve(PEFILE_IMPORT_DIRECTORY.VirtualAddress, 
locate(PEFILE_IMPORT_DIRECTORY.VirtualAddress));
    _import_directory_count = 0;
    while (true) {
        ___IMAGE_IMPORT_DESCRIPTOR tmp;
        int offset = (_import_directory_count * 
sizeof(___IMAGE_IMPORT_DESCRIPTOR)) + _import_directory_address;
        fseek(Ppefile, offset, SEEK_SET);
        fread(&tmp, sizeof(___IMAGE_IMPORT_DESCRIPTOR), 1, Ppefile);
        if (tmp.Name == 0x00000000 && tmp.FirstThunk == 0x00000000) {
            _import_directory_count -= 1;
            _import_directory_size = _import_directory_count * 
sizeof(___IMAGE_IMPORT_DESCRIPTOR);
            break;
        }
        _import_directory_count++;
    }
    PEFILE_IMPORT_TABLE = new 
___IMAGE_IMPORT_DESCRIPTOR[_import_directory_count];
    for (int i = 0; i < _import_directory_count; i++) {
        int offset = (i * sizeof(___IMAGE_IMPORT_DESCRIPTOR)) + 
_import_directory_address;
        fseek(Ppefile, offset, SEEK_SET);
        fread(&PEFILE_IMPORT_TABLE[i], sizeof(___IMAGE_IMPORT_DESCRIPTOR), 1, 
Ppefile);
    }
}
解析重定位表：
PE壳编写
篇幅原因下次再写，效果图：
void PE64FILE::ParseBaseReloc() {
    DWORD _basereloc_directory_address = 
resolve(PEFILE_BASERELOC_DIRECTORY.VirtualAddress, 
locate(PEFILE_BASERELOC_DIRECTORY.VirtualAddress));
    _basreloc_directory_count = 0;
    int _basereloc_size_counter = 0;
    while (true) {
        ___IMAGE_BASE_RELOCATION tmp;
        int offset = (_basereloc_size_counter + _basereloc_directory_address);
        fseek(Ppefile, offset, SEEK_SET);
        fread(&tmp, sizeof(___IMAGE_BASE_RELOCATION), 1, Ppefile);
        if (tmp.VirtualAddress == 0x00000000 &&
            tmp.SizeOfBlock == 0x00000000) {
            break;
        }
        _basreloc_directory_count++;
        _basereloc_size_counter += tmp.SizeOfBlock;
    }
    PEFILE_BASERELOC_TABLE = new 
___IMAGE_BASE_RELOCATION[_basreloc_directory_count];
    _basereloc_size_counter = 0;
    for (int i = 0; i < _basreloc_directory_count; i++) {
        int offset = _basereloc_directory_address + _basereloc_size_counter;
        fseek(Ppefile, offset, SEEK_SET);
        fread(&PEFILE_BASERELOC_TABLE[i], sizeof(___IMAGE_BASE_RELOCATION), 1, 
Ppefile);
        _basereloc_size_counter += PEFILE_BASERELOC_TABLE[i].SizeOfBlock;
    }
}
参考文章：
https://0xrick.github.io/categories/#win-internals