The Program.cs file defines a class called Program that contains a method
called Main. In C#, all executable code must be defined within a method, and
all methods must belong to a class or a struct. You will learn more about
classes in Chapter 7, “Creating and managing classes and objects,” and you
will learn about structs in Chapter 9, “Creating value types with enumerations
and structures.”
The Main method designates the program’s entry point. This method
should be defined in the manner specified in the Program class as a static
method; otherwise, the .NET Framework might not recognize it as the
starting point for your application when you run it. (You will look at methods
in detail in Chapter 3, “Writing methods and applying scope,” and Chapter 7
provides more information on static methods.)
Important C# is a case-sensitive language. You must spell Main with
an uppercase M.
In the following exercises, you write the code to display the message
“Hello World!” to the console window, build and run your Hello World
console application, and learn how namespaces are used to partition code
elements.
Write the code by using Microsoft IntelliSense
1. In the Code and Text Editor window displaying the Program.cs file,
place the cursor in the Main method, immediately after the opening
curly brace ( { ), and then press Enter to create a new line.
2. On the new line, type the word Console; this is the name of another
class provided by the assemblies referenced by your application. It
provides methods for displaying messages in the console window and
reading input from the keyboard.
As you type the letter C at the start of the word Console, an IntelliSense
Download from finelybook PI:EMAIL
49
list appears. This list contains all of the C# keywords and data types that
are valid in this context. You can either continue typing or scroll through
the list and double-click the Console item with the mouse. Alternatively,
after you have typed Cons, the IntelliSense list automatically homes in
on the Console item, and you can press the Tab or Enter key to select it.
Main should look like this:
Click here to view code image
static void Main(string[] args)
{
    Console
}
Note Console is a built-in class.
3. Type a period immediately following Console.
Another IntelliSense list appears, displaying the methods, properties,
and fields of the Console class.
Download from finelybook PI:EMAIL
50
4. Scroll down through the list, select WriteLine, and then press Enter.
Alternatively, you can continue typing the characters W, r, i, t, e, L until
WriteLine is selected, and then press Enter.
The IntelliSense list closes, and the word WriteLine is added to the
source file. Main should now look like this:
Click here to view code image
static void Main(string[] args)
{
    Console.WriteLine
}
5. Type ( and another IntelliSense tip will appear.
This tip displays the parameters that the WriteLine method can take. In
fact, WriteLine is an overloaded method, meaning that the Console class
contains more than one method named WriteLine—it provides 19
different versions of this method. You can use each version of the
WriteLine method to output different types of data. (Chapter 3 describes
overloaded methods in more detail.) Main should now look like this:
Click here to view code image
static void Main(string[] args)
{
    Console.WriteLine(
}
Tip You can click the up and down arrows in the tip to scroll
through the different overloads of WriteLine.
6. Type ); and Main should now look like this:
Click here to view code image
static void Main(string[] args)
{
    Console.WriteLine();
}
Download from finelybook PI:EMAIL
51
7. Move the cursor and type the string, “Hello World!” (including the
quotation marks) between the left and right parentheses following the
WriteLine method.
Main should now look like this:
Click here to view code image
static void Main(string[] args)
{
    Console.WriteLine("Hello World!");
}
Tip Get into the habit of typing matched character pairs, such as
parentheses—( and )—and curly brackets—{ and }—before filling in
their contents. It’s easy to forget the closing character if you wait until
after you’ve entered the contents.
IntelliSense icons
When you type a period after the name of a class, IntelliSense displays
the name of every member of that class. To the left of each member
name is an icon that depicts the type of member. Common icons and
their types include the following:
Icon Meaning
Method (discussed in Chapter 3)
Property (discussed in Chapter 15, “Implementing properties to
access fields”)
Class (discussed in Chapter 7)
Struct (discussed in Chapter 9)
Enum (discussed in Chapter 9)
Extension method (discussed in Chapter 12, “Working with
Download from finelybook PI:EMAIL
52
Inheritance”)
Interface (discussed in Chapter 13, “Creating interfaces and
defining abstract classes”)
Delegate (discussed in Chapter 17, “Introducing generics”)
Event (discussed in Chapter 17)
Namespace (discussed in the next section of this chapter)
You will also see other IntelliSense icons appear as you type code in
different contexts.
You will frequently see lines of code containing two forward slashes (//)
followed by ordinary text. These are comments, which are ignored by the
compiler but are very useful for developers because they help document what
a program is actually doing. Take, for instance, the following example:
Click here to view code image
Console.ReadLine(); // Wait for the user to press the Enter key
The compiler skips all text from the two slashes to the end of the line. You
can also add multiline comments that start with a forward slash followed by
an asterisk (/*). The compiler skips everything until it finds an asterisk
followed by a forward slash sequence (*/), which could be many lines further
down. You are actively encouraged to document your code with as many
meaningful comments as necessary.
Build and run the console application
1. On the Build menu, click Build Solution.
This action compiles the C# code, resulting in a program that you can
run. The Output window appears below the Code and Text Editor
window.
Tip If the Output window does not appear, click Output on the
Download from finelybook PI:EMAIL
53
View menu to display it.
In the Output window, you should see messages similar to the following,
indicating how the program is being compiled:
Click here to view code image
1>------ Build started: Project: TestHello, Configuration: Debug
Any CPU ------
1>  TestHello -> C:\Users\John\Documents\Microsoft Press\Visual
CSharp Step By Step\Chapter
1\TestHello\TestHello\bin\Debug\TestHello.exe
========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped
==========
If you have made any mistakes, they will be reported in the Error List
window. The following image shows what happens if you forget to type
the closing quotation marks after the text Hello World in the WriteLine
statement. Notice that a single mistake can sometimes cause multiple
compiler errors.
Download from finelybook PI:EMAIL
54
Tip To go directly to the line that caused the error, you can double-
click an item in the Error List window. You should also notice that
Visual Studio displays a wavy red line under any lines of code that
will not compile when you enter them.
If you have followed the previous instructions carefully, there should be
no errors or warnings, and the program should build successfully.
Download from finelybook PI:EMAIL
55
Tip There is no need to save the file explicitly before building
because the Build Solution command automatically saves it. An
asterisk after the file name in the tab above the Code and Text
Editor window indicates that the file has been changed since it was
last saved.
2. On the Debug menu, click Start Without Debugging.
A command window opens, and the program runs. The message “Hello
World!” appears. The program now waits for you to press any key, as
shown in the following graphic:
Note The “Press any key to continue” prompt is generated by
Visual Studio; you did not write any code to do this. If you run the
program by using the Start Debugging command on the Debug
menu, the application runs, but the command window closes
immediately without waiting for you to press a key.
3. Ensure that the command window displaying the program’s output has
the focus (meaning that it’s the window that’s currently active), and then
press Enter.
The command window closes, and you return to the Visual Studio 2017
programming environment.
Download from finelybook PI:EMAIL
56
4. In Solution Explorer, click the TestHello project (not the solution), and
then, on the Solution Explorer toolbar, click the Show All Files button.
Be aware that you might need to click the double-arrow button on the
right edge of the Solution Explorer toolbar to make this button appear.
Entries named bin and obj appear above the Program.cs file. These
entries correspond directly to folders named bin and obj in the project
folder (Microsoft Press\VCSBS\Chapter 1\TestHello\TestHello). Visual
Studio creates these folders when you build your application; they
contain the executable version of the program together with some other
files used to build and debug the application.
5. In Solution Explorer, expand the bin entry.
Another folder named Debug appears.
Note You might also see a folder named Release.
Download from finelybook PI:EMAIL
57
6. In Solution Explorer, expand the Debug folder.
Several more items appear, including a file named TestHello.exe. This is
the compiled program, which is the file that runs when you click Start
Without Debugging on the Debug menu. The other files contain
information that is used by Visual Studio 2017 if you run your program
in debug mode (when you click Start Debugging on the Debug menu).
Using namespaces
The example you have seen so far is a very small program. However, small
programs can soon grow into much bigger programs. As a program grows,
two issues arise. First, it is harder to understand and maintain big programs
than it is to understand and maintain smaller ones. Second, more code usually
means more classes, with more methods, requiring you to keep track of more
names. As the number of names increases, so does the likelihood of the
project build failing because two or more names clash. For example, you
might try to create two classes with the same name. The situation becomes
more complicated when a program references assemblies written by other
developers who have also used a variety of names.
In the past, programmers tried to solve the name-clashing problem by
prefixing names with some sort of qualifier (or set of qualifiers). Using
prefixes as qualifiers is not a good solution because it’s not scalable. Names
become longer, you spend less time writing software and more time typing
(there is a difference), and you spend too much time reading and rereading
incomprehensibly long names.
Namespaces help solve this problem by creating a container for items such
as classes. Two classes with the same name will not be confused with each
other if they live in different namespaces. You can create a class named
Greeting inside the namespace named TestHello by using the namespace
keyword like this:
Click here to view code image
namespace TestHello
{
   class Greeting
   {
Download from finelybook PI:EMAIL
58
     ...
   }
}
You can then refer to the Greeting class as TestHello.Greeting in your
programs. If another developer also creates a Greeting class in a different
namespace, such as NewNamespace, and you install the assembly that
contains this class on your computer, your programs will still work as
expected because they are using your TestHello.Greeting class. If you want to
refer to the other developer’s Greeting class, you must specify it as
NewNamespace.Greeting.
It is good practice to define all your classes in namespaces, and the Visual
Studio 2017 environment follows this recommendation by using the name of
your project as the top-level namespace. The .NET Framework class library
also adheres to this recommendation; every class in the .NET Framework
lives within a namespace. For example, the Console class lives within the
System namespace. This means that its full name is actually System.Console.
Of course, if you had to write the full name of a class every time you used
it, the situation would be no better than prefixing qualifiers or even just
naming the class with some globally unique name such as SystemConsole.
Fortunately, you can solve this problem with a using directive in your
programs. If you return to the TestHello program in Visual Studio 2017 and
look at the file Program.cs in the Code and Text Editor window, you will
notice the following lines at the top of the file:
Click here to view code image
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
These lines are using directives. A using directive brings a namespace into
scope. In the subsequent code in the same file, you no longer need to
explicitly qualify objects with the namespace to which they belong. The five
namespaces shown contain classes that are used so often that Visual Studio
2017 automatically adds these using directives every time you create a new
project. You can add more using directives to the top of a source file if you
need to reference other namespaces.
Download from finelybook PI:EMAIL
59
Note You might notice that some of the using directives appear grayed-
out. These directives correspond to namespaces that are not currently
used by your application. If you don’t need them when you have
finished writing your code, you can safely delete them. However, if you
require items that are held in these namespaces later, you will have to
add the using directives back in again.
The following exercise demonstrates the concept of namespaces in more
depth.
Try longhand names
1. In the Code and Text Editor window displaying the Program.cs file,
comment out the first using directive at the top of the file, like this:
//using System;
2. On the Build menu, click Build Solution.
The build fails, and the Error List window displays the following error
message:
Click here to view code image
The name 'Console' does not exist in the current
context.
3. In the Error List window, double-click the error message.
The identifier that caused the error is highlighted in the Program.cs
source file with a red squiggle.
4. In the Code and Text Editor window, edit the Main method to use the
fully qualified name System.Console.
Main should look like this:
Click here to view code image
Download from finelybook PI:EMAIL
60
static void Main(string[] args)
{  
    System.Console.WriteLine("Hello World!");
}
Note When you type the period after System, IntelliSense displays
the names of all the items in the System namespace.
5. On the Build menu, click Build Solution.
The project should build successfully this time. If it doesn’t, ensure that
Main is exactly as it appears in the preceding code, and then try building
again.
6. Run the application to be sure that it still works by clicking Start
Without Debugging on the Debug menu.
7. When the program runs and displays “Hello World!” in the console
window, press Enter to return to Visual Studio 2017.
Namespaces and assemblies
A using directive simply brings the items in a namespace into scope and
frees you from having to fully qualify the names of classes in your code.
Classes are compiled into assemblies. An assembly is a file that usually
has the .dll file name extension, although strictly speaking, executable
programs with the .exe file name extension are also assemblies.
An assembly can contain many classes. The classes that the .NET
Framework class library includes, such as System.Console, are provided
in assemblies that are installed on your computer together with Visual
Studio. You will find that the .NET Framework class library contains
thousands of classes. If they were all held in the same assembly, the
assembly would be huge and difficult to maintain. (If Microsoft were to
update a single method in a single class, it would have to distribute the
Download from finelybook PI:EMAIL
61
entire class library to all developers!)
For this reason, the .NET Framework class library is split into a
number of assemblies, partitioned by the functions that they perform or
the technology that they implement. For example, a “core” assembly
(actually called mscorlib.dll) contains all the common classes, such as
System.Console, and other assemblies contain classes for manipulating
databases, accessing web services, building GUIs, and so on. If you
want to make use of a class in an assembly, you must add a reference to
that assembly to your project. You can then add using directives to your
code that bring the items in namespaces in that assembly into scope.
You should note that there is not necessarily a 1:1 equivalence
between an assembly and a namespace: A single assembly can contain
classes defined in many namespaces, and a single namespace can span
multiple assemblies. For example, the classes and items in the System
namespace are actually implemented by several assemblies, including
mscorlib.dll, System.dll, and System.Core.dll, among others. This all
sounds very confusing at first, but you will soon get used to it.When
you use Visual Studio to create an application, the template you select
automatically includes references to the appropriate assemblies. For
example, in Solution Explorer for the TestHello project, expand the
References folder. You will see that a console application automatically
contains references to assemblies called Microsoft.CSharp, System,
System.Core, System.Data, System.Data.DataSetExtensions,
System.Net.Http, System.Xml, and System.Xml.Linq. You might be
surprised to see that mscorlib.dll is not included in this list. The reason
for this is that all .NET Framework applications must use this assembly
because it contains fundamental runtime functionality. The References
folder lists only the optional assemblies; you can add or remove
assemblies from this folder as necessary.
To add references for additional assemblies to a project, right-click
the References folder and then click Add Reference. You will perform
this task in later exercises. You can remove an assembly by right-
clicking the assembly in the References folder and then clicking
Remove.
Download from finelybook PI:EMAIL
62
Creating a graphical application
So far, you have used Visual Studio 2017 to create and run a basic console
application. The Visual Studio 2017 programming environment also contains
everything you need to create graphical applications for Windows 10. These
templates are referred to as Universal Windows Platform (UWP) apps
because they enable you to create apps that function on any device that runs
Windows, such as desktop computers, tablets, and phones. You can design
the user interface (UI) of a Windows application interactively. Visual Studio
2017 then generates the program statements to implement the user interface
you’ve designed.
Visual Studio 2017 provides you with two views of a graphical
application: the design view and the code view. You use the Code and Text
Editor window to modify and maintain the code and program logic for a
graphical application, and you use the Design View window to lay out your
UI. You can switch between the two views whenever you want.
In the following set of exercises, you’ll learn how to create a graphical
application by using Visual Studio 2017. This program displays a simple
form containing a text box where you can enter your name and a button that
when clicked displays a personalized greeting in a message box.
If you want more information about the specifics of writing UWP apps,
the final few chapters in Part IV of this book provide more detail and
guidance.
Create a graphical application in Visual Studio 2017
1. Start Visual Studio 2017 if it is not already running.
2. On the File menu, point to New, and then click Project.
The New Project dialog box opens.
3. In the left pane, expand the Installed node (if it is not already expanded),
expand Visual C#, and then click Windows Universal.
4. In the middle pane, click the Blank App (Universal Windows) icon.
5. Ensure that the Location field refers to the \Microsoft
Press\VCSBS\Chapter 1 folder in your Documents folder.
Download from finelybook PI:EMAIL
63
6. In the Name box, type Hello.
7. Ensure that the Create Directory For Solution check box is selected, and
then click OK.
8. At this point, you will be prompted with a dialog box asking you to
specify on which builds of Windows 10 your application is going to run.
Later builds of Windows 10 have more and newer features available.
Microsoft recommends that you always select the latest build of
Windows 10 as the target version, but if you are developing enterprise
applications that also need to run on older versions then select the oldest
version of Windows 10 that users are using as the minimum version.
However, do not automatically select the oldest version of Windows 10
as this might restrict some of the functionality available to your
application:
If this is the first time that you have created a UWP application, you
might also be prompted to enable developer mode for Windows 10, and
the Windows 10 settings screen will appear. Select Developer Mode. A
dialog box will appear confirming that this is what you want to do, as it
bypasses some of the security features of WindowsClick Yes. Windows
will download and install the Developer Mode package, which provides
additional features for debugging UWP applications:
Download from finelybook PI:EMAIL
64
9. Note External apps that are not downloaded from the Windows Store
could potentially expose personal data and pose other security risks, but
it is necessary to enable Developer Mode if you are building and testing
your own custom applications.Return to Visual Studio. After the app has
been created, look in the Solution Explorer pane.
Don’t be fooled by the name of the application template. Although it is
called Blank App, this template actually provides a number of files and
contains some code. For example, if you expand the MainPage.xaml
folder, you will find a C# file named MainPage.xaml.cs. This file is
where you add the initial code for the application.
10. In Solution Explorer, double-click MainPage.xaml.