in status-quo satellite broadband networks and the presence
of end-point authentication avoids the aforementioned man-
in-the-middle issues with some proprietary encrypted PEPs.
Our decision to incorporate QUIC contrasts signiﬁcantly
with other tunneling based PEPs. In the status quo, the dom-
inant approach, used by commercial PEPs such as Tellitec’s
“Enhanced TCP” (ETCP) product, is to implement a bespoke
network/transport-layer protocol [31]. This limits compatibility
with other network infrastructure (e.g. ﬁrewalls, switches, QoS
appliances) and thus may require direct ISP participation in
deployment. QUIC, on the other hand, is notionally a transport-
layer protocol but in practice is implemented as an application
on top of UDP. This allows for out-of-the-box compatibility
with existing networks. An additional beneﬁt
to QUIC as
opposed to, for example, TLS 1.3 secure channel tunnels, is
that ISP PEPs largely ignore UDP trafﬁc, limiting the risk of
unexpected interaction with existing infrastructure[40].
In short, QUIC allows us to create a secure PEP which
does not require ISPs to operate any decapsulation software
on their gateway in order to ensure trafﬁc compatibility with
the wider internet. This means individual customers can use
QPEP to secure trafﬁc to a QPEP server on the open internet
without ISP knowledge or involvement.
This ability for customers to protect their trafﬁc between
two arbitrary endpoints without
trusting their ISP makes
QPEP’s security properties most comparable to prior satellite
VPN protocol proposals [27], [28]. However, QPEP’s design
differs from these tools which still reveal limited portions of
the TCP header to ISP PEPs for optimization (e.g. destination
IP, port numbers, and TCP ﬂags). An ISP snooping on a cus-
tomer’s QPEP trafﬁc would only see the IP address and UDP
port of the customer’s upstream QPEP server. All information
regarding the true TCP connections are hidden inside the
QUIC tunnel. This means QPEP can function in the presence
of other ISP-installed PEPs without any special adjustments.
From a service-provider perspective, it is no different than any
other UDP-based application. Of course, QPEP could also be
installed by ISPs on customer modems and network gateways
just like with traditional PEPs, but trust in ISPs is no longer
a design requirement.
2) QUIC Performance Beneﬁts: Beyond these security ben-
eﬁts, the use of QUIC offers notable performance advantages.
First, the initial QUIC connection can be negotiated in a
single round-trip, substantially shorter than the TCP three-way
handshake. When compared with alternative encrypted tunnel
schemes - such as TLS-based VPNs - QUIC offers a substantial
reduction in round-trip transfers (see Figure 4). Indeed, for
previously known QUIC servers, it is possible for a client to
begin transmitting data from the very ﬁrst packet. While the
TLS session initialization process is particularly ill-suited to
satellite environments, few tunneling approaches can initialize
secure channels with comparable RTT requirements to QUIC.
For example, Internet Key Exchange (IKE) initialization com-
monly used in IPSec VPNs will generally require three or more
round-trips depending on conﬁguration and version.
Additionally, unlike TCP, QUIC does not require that all
packets in a stream be processed in a particular order -
removing head-of-line blocking issues and permitting heavy
multiplexing. This allows QPEP to encapsulate multiple TCP
ﬂows inside a single QUIC session, reducing the number of
session-initialization round-trips.
for
Like TCP, QUIC has built-in support
the re-
transmission of lost and corrupted packets. This obviates
intuitive concerns relating to UDP usage over low-reliability
satellite links. Moreover, some draft proposals suggest the ad-
dition of built in forward error correction (FEC). These efforts
have largely stalled due to minimal terrestrial performance
gains [41]. However, satellite environments may represent a
context for reviving research on QUIC-FEC.
3) QUIC Satellite Performance: As QUIC is a relatively
recent protocol, its use in satellite environments has not been
subject to much research. What does exist is largely incon-
clusive. Some preliminary assessments have found that QUIC
facilitates a 100% increase in satellite broadband page load
times compared to PEP-accelerated TCP [42]. However, others
suggest that QUIC performs better, measuring up to a 50%
decrease page load times [43]. Preliminary IETF discussions
have lead to a number of proposed (but unimplemented)
techniques for optimizing QUIC over satellite [44].
Relevant research has focused on real-world connections
6
to HTTP2 web-servers which support the QUIC protocol. In
these cases, researchers only control
the client-side QUIC
conﬁguration. However, under QPEP’s distributed model, it
may be possible optimize both server and client QUIC imple-
mentations for the satellite link. Much as many modern PEPs
use modiﬁed TCP implementations, QPEP’s architecture lends
itself naturally to bespoke optimization of QUIC parameters
relating to FEC, ACK decimation and congestion control.
V. QPEP IMPLEMENTATION
Reaping the theoretical beneﬁts of QUIC as a transport
alternative for satellite TCP connections raises several impor-
tant engineering considerations. In this section, we focus on
the speciﬁc implementation and architecture of QPEP, how
it merges properties of standard VPN applications and TCP
PEPs, and some of the challenges in doing so.
A. System Architecture
QPEP is implemented according to a distributed PEP
application architecture in order to ensure compatibility with
all web services rather than only those with native QUIC
support. This distributed design allows QPEP to operate trans-
parently, converting TCP conversations into QUIC streams
over the satellite hop and then back into TCP conversations
terrestrially. The beneﬁt is that no special software or con-
ﬁguration is required on individual customer devices. QPEP-
encrypted trafﬁc appears identical to normal TCP trafﬁc. This
differentiates it from application-layer commercial PEPs and
ensures compatibility with IOT systems.
The practical
implication of this architecture is that a
QPEP deployment consists of two independent appliances (see
Figure 3): a QPEP client on the customer side of the satellite
link and a QPEP server on the internet side.
The client application can be installed as software directly
on a customer’s device. However, it is also designed to operate
transparently if placed along the network path between a
customer’s device and the satellite modem. For example, an
enterprise user or satellite ISP might install a QPEP client on
a router within a local area network in order to encrypt and
optimize internet-bound trafﬁc from all connected devices.
The server application is similarly ﬂexible. It can be
installed by the satellite ISP on their gateway, like a traditional
PEP. However,
it can also be installed anywhere else on
the internet, with encrypted QPEP trafﬁc traversing the ISP
gateway en-route to a cloud server or other egress point, as
with a traditional VPN.
When the QPEP client launches, it opens a QUIC tunnel
with an upstream QPEP server. Unlike in normal QUIC
services, where idle sessions are short-lived, QPEP sets the
timeout for this tunnel to a relatively long period of time
(5 minutes of link inactivity). QPEP does this because QUIC
session initialization requires a full round-trip over the satellite
link, so by re-using recently established QUIC tunnels, QPEP
can save round-trips over creating a new QUIC tunnel for each
connection.
Each TCP connection which is managed by QPEP is
assigned to its own unique QUIC stream within this QUIC
tunnel. This allows QPEP to multiplex concurrent TCP con-
nections and avoid creating redundant session initialization
handshakes over the satellite link. As discussed Section V-B,
this also allows for better congestion control as losses in each
stream can be handled independently.
QPEP does not naively convert every incoming TCP packet
to a QUIC packet. If it did so, we would expert performance
akin to that of a traditional VPN. This is because the TCP
three-way handshake would still occur over the latent satellite
hop. Instead, QPEP must selectively terminate incoming TCP
connections, drop spurious acknowledgements, and send only
meaningful data across the satellite. This requires both the
QPEP server and QPEP client to internally maintain state
regarding each TCP connection.
When the QPEP client receives a TCP SYN packet, it
immediately initiates a three-way handshake across the cus-
tomer LAN - effectively “spooﬁng” the upstream destination
TCP server. Upon ﬁnishing this handshake and receiving a
TCP packet with payload data, it opens a new stream inside
the QUIC tunnel session it established with the QPEP server
at initialization. The client then strips away the TCP header
information and encapsulates the payload data into a QUIC
packet. A simple “QPEP header” consisting of a TCP four-
tuple () is prepended to
this packet. The client maintains a local state dictionary which
maps the QUIC stream, this “QPEP header,” and the associated
TCP socket.
When the QPEP server receives an incoming QUIC pay-
load, it checks its own state dictionary for any sessions asso-
ciated with the received QPEP packet header. If no such entry
is present, it opens a fresh TCP connection to the upstream
TCP server on the basis of the received QPEP header and
completes a three-way handshake across the internet - effec-
tively “spooﬁng” the customer’s device. It then updates its state
dictionary to map this TCP session with the appropriate QPEP
header and QUIC stream. From then on, each packet which the
server receives in this QUIC stream will be converted into a
TCP payload and then transmitted across the associated TCP
socket to its destination. This same process happens in reverse
for each response which comes from the internet, with the
client extracting payloads sent by the server across the QUIC
stream and then routing them to the appropriate TCP socket
and onwards to the customer’s device.
B. Error Handling and Session Management
The main challenge with this protocol splitting approach
is correctly propagating errors which occur over one of
the three network segments (Customer ↔ QPEP (client);
QPEP (client) ↔ QPEP (server); QPEP (server) ↔ Internet)
to the others.
Over the satellite link, session management and conges-
tion control is implemented within the QUIC session. This
involves a modiﬁed version of the popular CUBIC congestion
control algorithm for responding to losses which occur over
the satellite hop. Congestion control
is applied on a per-
stream basis, preventing any individually troublesome stream
from impacting the performance of other streams in the
QPEP (client) ↔ QPEP (server) session. While our imple-
mentation uses CUBIC for this purpose, only modest engi-
7
TCP 3-Way Handshake (optional)
Client Hello (Invalid) + Cert + Req.
Client Hello (Valid) + Cert + Req.
Sever Rejection + Cert
Server Hello + Resp.
Client Hello (Valid) + Cert + Req.
Server Hello + Resp.
Client Hello + Params
Server Hello + Params + Cert
Request for Client Cert
Client Cert + Params + Session Key
Server Conﬁrmation
Client Conﬁrmation
TCP 3-Way Handshake
Req.
Resp.
Notional TLS-based VPN
QUIC to Unknown Server
QUIC to Known Server
Fig. 4. Simpliﬁed Comparison of QUIC and VPN Initialization
neering effort would be required to replace it with any other
QUIC-compatible algorithm. Adopting existing delay-tolerant
algorithms (such as TCP-Hybla) to the QPEP architecture may
thus represent one avenue for future research.
Over the terrestrial links, this process is handed down to
the host’s TCP stack. QPEP’s “spoofed” endpoints resolve con-
nection issues terrestrially just as any other TCP application.
By design, this makes QPEP functionally transparent to users
and ensures compatibility with upstream network appliances,
such as ﬁrewalls or traditional VPN software.
The more difﬁcult case is for errors which occur in one
link and have implications for the others. For example, if a
TCP connection on the QPEP (server) ↔ Internet link fails,
the error state of that TCP socket must be propagated up
from the host’s TCP/IP stack to the QPEP server application.
The QPEP server will then issue a message to the QPEP
client across the QPEP (client) ↔ QPEP (server) segment
designating the associated QUIC stream for closure. Upon
receiving this message,
the QPEP client will remove the
stream from its session mapping dictionary and terminate the
appropriate TCP connection on the Customer ↔ QPEP (client)
network. Finally, both the server and client will close the
corresponding QUIC stream.
C. Limitations
In the implementation evaluated in this paper, QPEP only
modiﬁes TCP/IP connections. This is because our objective
is to evaluate a secure alternative to traditionally unencrypted
PEP appliances, which also focus exclusively on TCP connec-
tions. Only minor engineering modiﬁcations would be required
to tunnel other protocols into the QUIC stream, such as UDP
and ICMP. However, it is worth noting that we expect QPEP
to have only marginal performance impacts on such protocols
as they do not incur the same latency penalties as TCP over
the satellite hop. Nevertheless, doing so may be desirable for
end-users as it would bring over-the-air encryption by default
to DNS queries and other non-TCP trafﬁc.
It
is also worth noting that we have not
implemented
QUIC’s optional zero-round trip (0-RTT) session initialization
handshake. While being able to further reduce the number of
costly satellite round trips is an attractive prospect, prior work
on QUIC’s 0-RTT raises some security concerns with respect
to replay attacks [45]. The potential harms of replay attacks are
especially acute in the wide-footprint and high-latency context
of satellite broadband. Indeed, a satellite eavesdropper may
have closer physical proximity to a given QPEP server than
the satellite ISP’s gateway, which could allow them to even
deliver “replay” messages faster than legitimate ones. Given
that QPEP relies on long-lived QUIC sessions, the beneﬁts
of 0-RTT are likely marginal at best. This is because a QUIC
handshake is only required for the very ﬁrst connection a QPEP
client makes, with subsequent streams re-using that session.
Nevertheless, consideration of 0-RTT initialization dynamics
may offer a route for some further optimization in future work.
D. Availability
An open-source reference implementation of QPEP, written
in Go, is available in conjunction with this paper. Go was
selected to increase accessibility without substantial perfor-
mance sacriﬁces. To the best of our knowledge, only two non-
proprietary PEPs exist [37], [46]. Both are implemented in
C/C++, lack encryption capabilities, and have received only
minimal development attention over the past several years.
Other notable academic PEPs are either not publicly available
or restricted to particular simulation tools [27], [47].
The QUIC implementation used by QPEP is based on
the widely used quic-go library which roughly tracks the
IETF QUIC proposal
[48]. As discussed in Section VII-E,
minor optional modiﬁcations to the QUIC implementation can