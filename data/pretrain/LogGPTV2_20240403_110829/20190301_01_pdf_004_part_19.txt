### Optimized Text

#### Example 1: Nested Procedures and Output

```sql
CREATE OR REPLACE PROCEDURE level_0 IS
  PROCEDURE level_1a IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('.. BLOCK level_1a');
    DBMS_OUTPUT.PUT_LINE('.. END BLOCK level_1a');
  END level_1a;

  PROCEDURE level_1b IS
    PROCEDURE level_2b IS
      PROCEDURE level_3b IS
      BEGIN
        DBMS_OUTPUT.PUT_LINE('........ BLOCK level_3b');
        level_1a; -- Ancestor's sibling block called
        level_0.level_1a; -- Qualified ancestor's sibling block
        DBMS_OUTPUT.PUT_LINE('........ END BLOCK level_3b');
      END level_3b;

    BEGIN
      DBMS_OUTPUT.PUT_LINE('...... BLOCK level_2b');
      level_3b; -- Local block called
      DBMS_OUTPUT.PUT_LINE('...... END BLOCK level_2b');
    END level_2b;
  BEGIN
    DBMS_OUTPUT.PUT_LINE('.. BLOCK level_1b');
    level_2b; -- Local block called
    DBMS_OUTPUT.PUT_LINE('.. END BLOCK level_1b');
  END level_1b;
BEGIN
  DBMS_OUTPUT.PUT_LINE('BLOCK level_0');
  level_1b;
  DBMS_OUTPUT.PUT_LINE('END BLOCK level_0');
END level_0;
/
```

**Output:**
```
BLOCK level_0
.. BLOCK level_1b
...... BLOCK level_2b
........ BLOCK level_3b
.. BLOCK level_1a
.. END BLOCK level_1a
.. BLOCK level_1a
.. END BLOCK level_1a
........ END BLOCK level_3b
...... END BLOCK level_2b
.. END BLOCK level_1b
END BLOCK level_0
```

#### 3.2.6.5 Using Forward Declarations

When a subprogram is to be invoked, it must have been declared somewhere in the hierarchy of blocks within the standalone program, but prior to where it is invoked. However, there is a method to construct the SQL PL (SPL) code so that the full declaration of the subprogram appears after the point in the code where it is invoked.

This is accomplished by inserting a forward declaration in the SPL code prior to its invocation. The forward declaration specifies the subprocedure or subfunction name, formal parameters, and return type if it is a subfunction.

The full subprogram specification, including the optional declaration section, the mandatory executable section, and the optional exception section, must be specified in the same declaration section as the forward declaration, but may appear following other subprogram declarations that invoke this subprogram with the forward declaration.

**Example:**

```sql
DECLARE
  FUNCTION add_one (p_add IN NUMBER) RETURN NUMBER;

  FUNCTION test_max (p_test IN NUMBER) RETURN NUMBER IS
  BEGIN
    IF p_test < 5 THEN
      RETURN add_one(p_test);
    END IF;
    DBMS_OUTPUT.PUT('Final value is ');
    RETURN p_test;
  END;

  FUNCTION add_one (p_add IN NUMBER) RETURN NUMBER IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('Increase by 1');
    RETURN test_max(p_add + 1);
  END;
BEGIN
  DBMS_OUTPUT.PUT_LINE(test_max(3));
END;
```

**Output:**
```
Increase by 1
Increase by 1
Final value is 5
```

#### 3.2.6.6 Overloading Subprograms

Subprograms of the same type (subprocedure or subfunction) with the same name can appear multiple times within the same standalone program as long as they are not sibling blocks. Each subprogram can be individually invoked depending on the use of qualifiers and the location where the subprogram invocation is made.

It is possible to declare subprograms, even as siblings, that are of the same subprogram type and name as long as certain aspects of the formal parameters differ. These characteristics (subprogram type, name, and formal parameter specification) are generally known as a programâ€™s signature.

**Overloading Rules:**

- The number of formal parameters are different.
- At least one pair of data types of the corresponding formal parameters are different, but are not aliases.

**Note:**
- Different formal parameter names do not permit overloading.
- Different parameter modes (IN, IN OUT, OUT) for the corresponding formal parameters do not permit overloading.
- For subfunctions, different data types in the RETURN clause do not permit overloading.

**Example:**

```sql
DECLARE
  FUNCTION add_it (p_add_1 IN BINARY_INTEGER, p_add_2 IN BINARY_INTEGER) RETURN VARCHAR2 IS
  BEGIN
    RETURN 'add_it BINARY_INTEGER: ' || TO_CHAR(p_add_1 + p_add_2, 9999.9999);
  END add_it;

  FUNCTION add_it (p_add_1 IN NUMBER, p_add_2 IN NUMBER) RETURN VARCHAR2 IS
  BEGIN
    RETURN 'add_it NUMBER: ' || TO_CHAR(p_add_1 + p_add_2, 999.9999);
  END add_it;

  FUNCTION add_it (p_add_1 IN REAL, p_add_2 IN REAL) RETURN VARCHAR2 IS
  BEGIN
    RETURN 'add_it REAL: ' || TO_CHAR(p_add_1 + p_add_2, 9999.9999);
  END add_it;

  FUNCTION add_it (p_add_1 IN DOUBLE PRECISION, p_add_2 IN DOUBLE PRECISION) RETURN VARCHAR2 IS
  BEGIN
    RETURN 'add_it DOUBLE PRECISION: ' || TO_CHAR(p_add_1 + p_add_2, 9999.9999);
  END add_it;
BEGIN
  DBMS_OUTPUT.PUT_LINE(add_it(25, 50));
  DBMS_OUTPUT.PUT_LINE(add_it(25.3333, 50.3333));
  DBMS_OUTPUT.PUT_LINE(add_it(TO_NUMBER(25.3333), TO_NUMBER(50.3333)));
  DBMS_OUTPUT.PUT_LINE(add_it(CAST('25.3333' AS REAL), CAST('50.3333' AS REAL)));
  DBMS_OUTPUT.PUT_LINE(add_it(CAST('25.3333' AS DOUBLE PRECISION), CAST('50.3333' AS DOUBLE PRECISION)));
END;
```

**Output:**
```
add_it BINARY_INTEGER: 75.0000
add_it NUMBER: 75.6666
add_it NUMBER: 75.6666
add_it REAL: 75.6666
add_it DOUBLE PRECISION: 75.6666
```

#### 3.2.6.7 Accessing Subprogram Variables

Variables declared in blocks such as subprograms or anonymous blocks can be accessed from the executable section or the exception section of other blocks depending on their relative location. Accessing a variable means being able to reference it within a SQL statement or an SPL statement as is done with any local variable.

**Access Rules:**

- Variables can be accessed as long as the block in which the variable has been locally declared is within the ancestor hierarchical path starting from the block containing the reference to the variable.
- If a reference to an unqualified variable is made, the first attempt is to locate a local variable of that name. If such a local variable does not exist, then the search proceeds up the ancestor hierarchy.
- If a reference to a qualified variable is made, the same search process is performed, but searching for the first match of the subprogram or labeled anonymous block that contains the local variable.

**Example:**

```sql
CREATE OR REPLACE PROCEDURE level_0 IS
  v_level_0 VARCHAR2(20) := 'Value from level_0';

  PROCEDURE level_1a IS
    v_level_1a VARCHAR2(20) := 'Value from level_1a';

    PROCEDURE level_2a IS
    BEGIN
      DBMS_OUTPUT.PUT_LINE('.... BLOCK level_2a');
      DBMS_OUTPUT.PUT_LINE('v_level_0: ' || v_level_0);
      DBMS_OUTPUT.PUT_LINE('v_level_1a: ' || v_level_1a);
      DBMS_OUTPUT.PUT_LINE('.... END BLOCK level_2a');
    END level_2a;

  BEGIN
    DBMS_OUTPUT.PUT_LINE('.. BLOCK level_1a');
    level_2a;
    DBMS_OUTPUT.PUT_LINE('.. END BLOCK level_1a');
  END level_1a;

  PROCEDURE level_1b IS
  BEGIN
    DBMS_OUTPUT.PUT_LINE('.. BLOCK level_1b');
    DBMS_OUTPUT.PUT_LINE('v_level_0: ' || v_level_0);
    -- DBMS_OUTPUT.PUT_LINE('v_level_1a: ' || v_level_1a); -- This would cause an error
    DBMS_OUTPUT.PUT_LINE('.. END BLOCK level_1b');
  END level_1b;
BEGIN
  DBMS_OUTPUT.PUT_LINE('BLOCK level_0');
  level_1a;
  level_1b;
  DBMS_OUTPUT.PUT_LINE('END BLOCK level_0');
END level_0;
/
```

**Output:**
```
BLOCK level_0
.. BLOCK level_1a
.... BLOCK level_2a
v_level_0: Value from level_0
v_level_1a: Value from level_1a
.... END BLOCK level_2a
.. END BLOCK level_1a
.. BLOCK level_1b
v_level_0: Value from level_0
.. END BLOCK level_1b
END BLOCK level_0
```

---

This optimized text provides a clearer, more professional, and coherent structure, making it easier to understand the concepts and examples.