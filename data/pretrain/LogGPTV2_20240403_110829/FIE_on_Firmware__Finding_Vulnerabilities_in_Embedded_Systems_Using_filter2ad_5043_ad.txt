As we will see in the next section, FIE as described thus
far can already be used to perform complete analyses for
some simple ﬁrmware and achieves good code-coverage
for some more complex ﬁrmware. However, it is clear
that even small programs can force FIE to attempt to ex-
plore an intractable number of states. For example, con-
sider the code snippet in Figure 6(c). The empty for loop
on line 4 will force FIE to proceed down at least one
path of length at least MAX LONG instructions. Unlike the
loop example in Figure 6(b), state pruning cannot short-
circuit evaluation of this long path because the value of
2We only consider syntactic equality of constraints, and do not at-
tempt to decide if two different sets of constraints deﬁne the same set
of possible values.
USENIX Association  
22nd USENIX Security Symposium  471
9
eint ();
BCSCTL1 = C A L B C 1 _ 1 M H Z ;
DCOCTL = C A L D C O _ 1 M H Z ;
1 int main (){
2
3
4
5 }
6 ISR ( PORT1 ){
7
8 }
a += 1;
...
while ( P1IN & BIT2 );
if ( P1IN & BIT2 ){
1 uint8_t getByte (){
2
3
4
5
6
7
8 }
goto W a i t F o r S t a r t ;
}
...
...
long i = 0;
while ( i < M A X _ L O N G ) {
i ++;
1 int main (){
2
3
4
5
6
7
8 }
}
...
(a) Code with equivalent paths
(b) Code with an inﬁnite fork
(c) Code with a long loop
Figure 6: State pruning can detect and remove the redundant states produced in code samples (a) and (b). Memory smudging
replaces i in code sample (c) with a symbolic variable after t iterations (e.g., t = 100), enabling analysis to move beyond the loop
more quickly.
i is monotonically increasing and so states never repeat
along the path.
To speed analysis for such settings, while retaining
the ability to be complete, we use memory smudging.
It is represented by the function MemorySmudge on
line 19 of Figure 4. At analysis time, the analyst sup-
plies a modiﬁcation threshold t to FIE. Before adding a
(non-redundant) successor state S(cid:31) to AS, the function
MemorySmudge checks if any memory locations in S(cid:31)
have been modiﬁed t times. If so the location’s value is
replaced by a special value (cid:31). This wildcard value may
take any value allowed by the type and cannot be con-
strained. To implement this, FIE keeps a count of every
distinct value that an instance of a variable takes on at a
program point. The count is associated with the activa-
tion record of the variable. Thus, if a local variable is
smudged, it will again be concrete on the next call to that
function while global variables remain smudged.
Smudging allows the analysis to explore more of a
ﬁrmware at the cost of precision. To see this, con-
sider again Figure 6(c), and let the smudging threshold
be t = 100. On iteration 100, i takes on the value (cid:31).
Then, as the loop continues to iteration 101, the condi-
tion i < MAX LONG will cause the execution state to be
split into two states: a state SF that fails the loop condi-
tion and proceeds to line 7, and a state ST that executes
the body of the loop at line 5 again. By executing ST ,
code that would not be executed until MAX LONG itera-
tions of the loop can instead be executed after 100 it-
erations. This approach does lead to the addition of new
states (compared to execution without smudging), but we
have found that pruning typically eliminates states added
due to smudging. When FIE executes SF in the example
above, it will explore the (empty) body of the loop, and i
will be incremented. However, since i = (cid:31), the update to
i will be discarded. Now, SF is again at the head of the
loop, and execution state is identical to the previous iter-
ation: no variable besides i has been touched, and i = (cid:31) as
it did on the previous iteration. Thus, SF ends up pruned.
Memory smudging over-approximates a state and so
can be a source of false positives, i.e., (cid:31) contains values
that may never be realized along any path. For example,
a pointer modiﬁed t times and then dereferenced can re-
sult in a false positive. FIE reports in output warnings if
any involved values were smudged, making it easier for
analyst to detect such a false positive. As we see in the
next section, false positives due to smudging seem rare
in practice for reasonable values of t.
4.5
Implementation Details
The pseudocode presented in Figure 4 gives the high-
level logic of FIE but abstracts away many details for
simplicity. Our implementation includes a number of
important embellishments, which we can only brieﬂy de-
scribe here.
Memory sharing: Since FIE creates at least one new
state at nearly every instruction, it is important that the
creation and storage of states be as efﬁcient as possible.
Thus, we only store one complete state per calling con-
text for each PS. Additional states with the same calling
context are then compared to the existing state, and only
the incremental difference in that state are stored. We
also inherit memory optimizations from KLEE, the most
important of which is copy-on-write memory for states.
Pruning frequency: The PRUNE operation shown on
line 18 of Figure 4 can become expensive as the num-
ber of states at PS becomes large. Rather than perform-
ing this operation at each instruction, the default mode of
FIE prunes only at basic block boundaries. We preserve
the ability to conﬁgure FIE to prune at each instruction,
but have found that basic-block-level pruning improves
performance in all our tests.
5 Evaluation
To evaluate FIE, we used it to analyze the 99 ﬁrmware
programs in our corpus. We will investigate the overall
efﬁcacy in terms of code coverage, the ability to com-
plete analyses, the utility of pruning and smudging, and
the bugs FIE helped us ﬁnd.
Firmware size and coverage: We ﬁrst ﬁx some con-
ventions regarding how we measure the size of ﬁrmware
programs and analysis coverage. For our evaluations,
we measure ﬁrmware size by the number of executable
LLVM instructions, denoted by the acronym NEXI. We
472  22nd USENIX Security Symposium 
USENIX Association
10
(1) compiling the
compute a ﬁrmware’s NEXI by:
ﬁrmware into LLVM bitcode using CLANG; (2) running
the resulting bitcode through LLVM optimization passes
for global and local dead code elimination; and (3) tak-
ing the number of LLVM instructions in the resulting bit-
code as the NEXI. This count includes intrinsic functions
and library functions called by the ﬁrmware. We note
that some programs used external modules whose source
code was not included in their source tree; we did not
attempt to track down these libraries and FIE emits an
error should it execute an instruction calling an omitted
function. Likewise for inline assembly instructions not
supported by FIE. This did not signiﬁcantly affect our
evaluation, e.g., only two programs ever reached miss-
ing functions or inline assembly in the 50 minute runs
reported on below. Note that usually FIE continues run-
ning in such cases along other paths.
Code coverage is the fraction of LLVM instructions
executed in the course of the analysis divided by the
NEXI of the target ﬁrmware. Using NEXI as opposed
to C lines of code better aligns our complexity and cov-
erage metrics with the work done by FIE, and avoids any
ambiguity in terms of overcounting coverage of partially
executed blocks or lines of C code. The NEXI sizes are,
on average, 1.5 times larger than the number of lines of
C code computed in Section 2. NEXI was smaller than
cloc for 23 of the programs due to dead code elimination.
Experimental setup: All the analyses reported on be-
low used Amazon EC2 high-memory, double-extra-large
(m2.2xlarge) instances which have 36 GB of RAM and
13 virtual CPUs (each advertised to be the equivalent of
an 1.0–1.2 GHz 2007 Opteron or 2007 Xeon processor).
Unless speciﬁed otherwise, FIE was given 50 minutes of
runtime3, and each analysis was performed on a separate
EC2 instance. To facilitate this effort, we wrote a set of
scripts for launching, monitoring, and retrieving the re-
sults of FIE run via a custom EC2 VM image.
Coverage under different FIE modes: We started by
analyzing each ﬁrmware for 50 minutes for each of ﬁve
different modes supported by FIE, for a total of 495 ex-
ecutions. The resulting NEXI coverages are shown in
Table 7. We now explain the modes and discuss their
performance.
Baseline: The BASELINE mode reﬂects a bare mini-
mum port of KLEE to the MSP430 environment, in par-
ticular it has support for: 16-bit addressing; a custom
memory allocator that ensures that memory objects do
not collide with special memory locations and have ad-
dresses within the chip’s address range; and implementa-
tion of intrinsics supported by msp430-gcc. It does not,
however, have any knowledge of the semantics of, spe-
3Setting the time to a bit less than one hour halves the cost of run-
ning on EC2.
NEXI
%
Complete
100%
90–100%
80–90%
70–80%
60–70%
50–60%
40–50%
30–40%
20–30%
10–20%
0–10%
Total %
Avg. %
Median %
E
LIN
BASE
n/a
1
1
0
0
0
0
0
0
1
10
86
1.1
5.9
1.7
Z
Z
FU
n/a
43
10
7
5
4
4
8
0
8
5
5
26.1
74.5
96.9
AIN
PL
7
40
9
5
5
5
6
8
0
11
5
5
23.7
71.1
89.5
E
N
U
PR
35
34
15
10
6
5
5
9
2
4
3
6
29.5
74.4
88.7
E
G
D
U
M
S
52
46
15
6
4
5
3
5
3
5
3
4
32.3
79.4
98.1
Table 7: Number of ﬁrmware programs for which FIE achieves
coverage in the indicated range, for 50 minute runs of FIE in
each of ﬁve operating modes. “Complete” gives the number of
programs for which the mode was able to analyze all possible
symbolic states.
cial memory or interrupts, etc. For most ﬁrmware, the
BASELINE analysis performs very poorly, with a median
of 1.7% coverage. This is because BASELINE almost
always ends prematurely with a false positive since the
ﬁrmware appears (to the analysis) as if it were reading
from an uninitialized memory location. Manual inspec-
tion of the code of the two outliers (from GitHub) re-
vealed that they are not using any features of the MSP430
architecture. The poor coverage of BASELINE for the
other ﬁrmware programs attests to the importance of pro-
viding an architecture-aware analysis.
Fuzz: We next use FIE to realize a general-purpose
fuzzing tool for MSP430 ﬁrmware. This mode, unlike
BASELINE, takes advantage of knowledge of the mem-
ory layout, special registers, and interrupt handling se-
mantics. We implemented a special memory spec in
which any read to a peripheral results in a returned value
chosen uniformly in the appropriate range. (Twice read-
ing the same peripheral location leads to two indepen-
dent values.) Writes to peripherals are ignored. We
use the conservative interrupt spec, meaning that in the
FUZZ mode the analysis branches off new states to exe-