for which most of the shadow stack techniques were designed,
provide some function calls, that do not return or respect the caller-
callee function calling convention, such as: longjump, tail calls,
etc. For these types of calls, the shadow-stack techniques reach
their technical limitations, since these types of function calls do
not return to the address next to the callsite. Lastly, currently avail-
able compilers enforcing shadow stack policies do not handle these
types of calls: (1) due to complexity reasons, and (2) because these
calls do not violate the caller/callee function calling convention, as
these do not return at all.
Runtime Overhead. As each function return address has to
be pushed, compared with the stack top value, and popped from
the shadow stack, the runtime overhead varies drastically from
one shadow stack technique implementation to another depending
on how efficient this process is implemented. Depending on the
count of operations (instructions), which need to be performed
(1-3), some research-based shadow techniques have high perfor-
mance overheads (around 10%; see Dang et al. [17] for more details),
making them infeasible for deployment in production software. For
these reasons, researchers have looked for approaches to do these
operations with a minimal number of steps (see GCC’s and Clang’s
shadow stack implementations for more details), such that the over-
head is as low as possible and no memory leaks are generated.
Support for External Calls. Most C/C++ based programs rely
on third-party libraries; as such, calls to functions residing in these
external libraries can be made. For this reason, this type of exter-
nal call needs to be protected as well. However, note that most of
the research-based binary approaches and compiler-based shadow
stack approaches do not protect these shared libraries for the fol-
lowing reasons. First, binary-based tools usually cannot deal with
functions having their address not taken. Second, binary-based
tools often fail to analyze large binaries due to their complexity.
Third, the compiler-based tools opt to not recompile shared libraries
due to increased analysis complexity, thus backward edges (also for-
ward edges) remain unprotected. For example, BinCFI [54] (binary
tool) could have easily added a shadow stack to protect libraries,
but omitted it, due to the resulting overhead. In other words, the
backward edges contained in shared libraries are not protected
and accordingly the attack surface remains high, and the protec-
tion added to the program does not help considerably when all the
needed gadgets reside in a shared library.
Emulated Shadow Stacks. Techniques approximating a per-
fect shadow stack do not contain all caller/callee address pairs. Fur-
ther, these approaches (e.g., [51]) are mostly based on CPU features
such as from/to address pairs and achieve only a coarse-grained
precision w.r.t. the return addresses, that need to be checked. This is
because these techniques are optimized for performance, and some
of the return edges remain unprotected, due to their imprecision.
Furthermore, the checks of harvested addresses are slow due to: (1)
the high volume of data flowing through the CPU, (2) the need to
collect and analyze this data, and (3) the relatively low speed of the
continuous reads. As such, these techniques are mostly inefficient
against attacks which use backward edges (see Schuster et al. [46]).
Therefore, other techniques, which are more fine-grained or have
a comparable precision as a perfect shadow-stack implementation
should be used instead.
3 THREAT MODEL AND ASSUMPTIONS
Adversarial Capabilities.
• System Configuration. In our threat model (e.g., STRIDE [32]),
we assume that the adversary is aware of the applied defenses
and has access to the source and non-randomized binary of
the target application.
• Vulnerability. We assume that the target program suffers
from a memory corruption vulnerability (e.g., C++ object type
confusion [36]) that allows the adversary to corrupt memory
objects in order to read from and write to any arbitrary
memory address.
468ACSAC 2020, December 7–11, 2020, Austin, USA
Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags, and Claudia Eckert
Figure 2: Identifier (ID) based backward-edge mapping of virtual functions called through object dispatches, (a) & (b), and ID
based backward-edge mapping of non-virtual functions called indirectly through function pointers, (c) & (d). Essentially, for
each virtual callee (virtual function) the program class sub-hierarchy relationship is enforced between callee and correspond-
ing callsite. This is achieved by assigning the same ID at the callee check (before returning) and at the matching callsites. Lastly,
for each non-virtual callee (non-virtual function), a function signature is computed which allows only matching callers to call
matching callees. This is done by inserting the same ID inside the callee check (before returning) and at the matching callsites.
• Scripting Environment. Further, the attacker can exploit a
scripting environment to process memory disclosure infor-
mation at runtime, adjust the attack payload, and subse-
quently launch a code reuse attack.
Defensive Requirements.
• Writable (xor) Executable Memory. The target system ensures
that memory can be either writable or executable, but not
both at the same time, e.g., DEP [33]. This prevents an at-
tacker from injecting new code or modifying existing exe-
cutable code.
• JIT Protection. Next, we assume that mitigations are in place
to prevent code injection into the just-in-time (JIT) code
cache and prevent reuse of JIT-compiled code [39]. These
protections are orthogonal to ρFEM.
• Brute-forcing Mitigation. Lastly, we require that the protected
software does not automatically restart after hitting a booby
trap that terminates execution. For example, in the Web
browser context, this may be accomplished by displaying
a warning message to the user and closing the offending
process.
4 OVERVIEW
4.1 Objectives and Scope
Objectives. During control flow hijacking attacks, attackers
often corrupt the backward edges, e.g., by overwriting return ad-
dresses. The goal of ρFEM is to protect the backward edges of
control flow transfers. While state-of-the-art approaches are using
shadow stacks, they suffer from information leakage attacks. There-
fore, we seek to design an alternative to shadow stack techniques in
order to protect backward edges. Inspired by the initial CFI design
in which IDs are used to check the integrity of both forward and
backward edges, we extend its ID checks with more precise infor-
mation, especially by considering the sophisticated caller-callee
relation among virtual calls and indirect calls.
Scope. In general, it is a hard problem to determine the point-to
relation among pointers especially at the binary code level. We
assume we have the source code of the to-be-protected program,
and thus we want to perform source code analysis in order to instru-
ment and demonstrate the feasibility of our approach. Currently,
ρFEM does not aim to protect tail calls, position independent code,
and long jumps. Further, we assume that these program primitives
do not allow the attacker to access usable gadgets which may help
to craft an attack.
4.2 Approach
Figure 3: Loading callsite’s ID.
Figure 3 shows the instrumentation inserted by ρFEM at both
caller and callee sites. In particular, the NOP instruction is inserted
right after the caller (left box), while the runtime check is inserted
before the callee returns (right box). The black shaded arrows rep-
resent the forward-edge and backward-edge transfers, while the
gray shaded arrow represents the load of the NOP payload before
the callee return.
The presented technique consists of assigning a unique ID (iden-
tifier) to every function. Then, every callsite is annotated with the
IDs of the functions it legitimately can call. Before returning, the
callee retrieves the ID from the callsite and compares it with its
own ID (or ID range). This helps to ensure that the callee is only
allowed to return to the addresses located after a callsite, which can
call this callee. In order to store and later retrieve an ID from a call-
site, ρFEM inserts these in x86 NOP instructions located right after
the call instruction. Further, ρFEM uses the argument of this NOP
instruction to store the ID. The checks contained inside the callee
…    call foo()NOP [ID]…    foo() {…load ID from retAddrcompare with foo‘s IDreturn}Caller  Callee  469ρFEM: Efficient Backward-edge Protection Using Reversed Forward-edge Mappings
ACSAC 2020, December 7–11, 2020, Austin, USA
as well as the callsite NOPs are inserted at compile-time and reside
in the code section of the program due to their placement inside
the functions. Therefore, these cannot be overridden or disabled at
runtime as this code is loaded into non-writeable memory.
After a virtual callsite, two NOP instructions are used, as due to
inheritance a range of possible callees is allowed (see Virtual Func-
tion Analysis for more details). For function pointer based callsites,
a function signature approach is used (see Indirect Call Analysis
for more details). Since the caller-callee convention is enforced by
the compiler, the return address of the callee should point to the
next instruction after the callsite. At this instruction new NOPs will
be inserted.
The actual check is done inside the callee’s function body, right
before the RET instruction is executed. This check will load and
extract the ID from the NOP using the return address found on the
stack. In case the extracted data matches the ID of the callee, the
check passes and the RET instruction is executed and the execution
continues. In this case, the same return address located on the stack
is used to jump to and the program execution continues from that
particular address. Otherwise, if the extracted IDs do not match, we
assume that the return address stored on the stack was tampered
with and we, therefore, assume that a backward-edge violation
happened. Thus, program execution is stopped in order to prevent
a potential attack.
legitimate calltarget set contains the return address located after
the legitimate callsite.
Class Hierarchy Based (for virtual callees). Forward-edge
information, provided by the class hierarchy, is used to map back-
ward edges (see Figure 2(a) forward-edge mapping and Figure 2(b)
backward-edge mapping). Essentially, all legitimate forward edges
are reflected back based on the legitimate class sub-hierarchy these
are allowed to call in the first place. As such, for each callee, a set
containing all calltarget return sites is built. Depending on the base
class of the dispatched object at the callsite and the location in the
class hierarchy, the number of calltarget return sites differs. Lastly,
our technique is aware of inherited members and as such these are
included in the relevant backward-edge target set.
5 DESIGN AND IMPLEMENTATION
In this section, we present first the main components of ρFEM and
then we describe how ρFEM handles various function call types
including direct calls in §5.1, virtual calls in §5.2, indirect function
pointer based calls in §5.3, and how checks are performed at the
callees in §5.4. Lastly, implementation details are presented in §5.5.
4.3 Mapping Backward Edges to Callsites
ρFEM fills the NOPs located at the caller and callee with IDs which
help to construct a mapping between legal callees and callers. This
mapping is used to enforce CFI policies between legitimate callees
and callers. To achieve this, ρFEM builds two separate caller-callee
mappings: (1) for non-virtual functions (callees), and (2) for virtual
functions (callees). Next, we present how these two mappings (sets)
for each caller are constructed.
Figure 2 depicts how backward-edge return address sets are built
based on the program class hierarchy in sub-figures (a) and (b)
for virtual callsites, and based on a precise forward-edge function
signature type mapping in sub-figures (c) and (d) for pointer-based
function callsites.
Function Signature Based (for non-virtual callees). Map-
ping backward edges using function signatures (see Figure 2(c)
forward-edge mapping and Figure 2(d) backward-edge mapping
for more details) is based on a precise forward-edge analysis which
determines a set of legitimate calltargets for each function pointer
based callsite. The forward mapping is built by matching callsites
and calltargets as follows. For each callsite, the number of provided
parameters, their type, and the return type is used to build a per
function signature. This callsite information is matched with all
calltargets in the program during compile time by comparing the
number of parameters consumed, their type, and the return type
with the data collected at the callsites (not object dispatches). For
each matching function signature (calltargets) and callsite signature
pair, a set is built. Lastly, for each calltarget contained in the pre-
viously determined calltarget set, another per-calltarget return set
is built by following the caller-callee function calling convention.
This essentially means that for each calltarget-callsite mapping, the
Figure 4: Overview of ρFEM’s system design.
Figure 4 depicts the components of ρFEM by starting (from left
to right) with the callsite checks and performing a walk-through
of the involved Clang/LLVM parts. At a high level, ρFEM assigns
unique IDs to each function (callee). At each callsite, the ID (or the
range of IDs) of the function(s), which can be called by this callsite,
is inserted. Before a callee returns, we retrieve the ID data from the
callsite, using the return address stored on the stack, and verify the
backward edge by comparing the retrieved data with the fixed ID
(or ID range) of the callee.
The IDs and callee side checks are generated as follows. The
virtual class metadata is collected in Clang ❶ and is used to recon-
struct the virtual table hierarchy during the link time optimization
(LTO) phase ❷. Afterwards, metadata about the function entries in
the virtual tables is used together with the virtual table hierarchy
to generate IDs for virtual functions and corresponding ranges for
virtual function callsites ❸. Once all virtual functions have been
assigned an ID, ρFEM continues to assign IDs to the remaining non-
virtual functions ❹. Next, IR code instrumentation based checks
are inserted before the return instructions in each function (callee)
4.3MappingBackwardEdgestoCallsitesρFEMfillstheNOPslocatedatthecallerandcalleewithIDswhichhelptoconstructamappingbetweenlegalcalleesandcallers.ThismappingisusedtoenforceCFIpoliciesbetweenlegitimatecalleesandcallers.Toachievethis,ρFEMbuildstwoseparatecaller-calleemappings:(1)fornon-virtualfunctions(callees),and(2)forvirtualfunctions(callees).Next,wepresenthowthesetwomappings(sets)foreachcallerareconstructed.Figure2depictshowbackward-edgereturnaddresssetsarebuiltbasedontheprogramclasshierarchyinsub-figures(a)and(b)forvirtualcallsites,andbasedonapreciseforward-edgefunctionsignaturetypemappinginsub-figures(c)and(d)forpointer-basedfunctioncallsites.FunctionSignatureBased(fornon-virtualcallees).Mappingbackwardedgesusingfunctionsignatures(seeFigure2(c)forward-edgemappingandFigure2(d)backward-edgemappingformoredetails)isbasedonapreciseforward-edgeanalysiswhichdeterminesasetoflegitimatecalltargetsforeachfunctionpointerbasedcallsite.Theforwardmappingisbuiltbymatchingcallsitesandcalltargetsasfollows.Foreachcallsite,thenumberofprovidedparameters,theirtype,andthereturntypeisusedtobuildaperfunctionsignature.Thiscallsiteinformationismatchedwithallcalltargetsinthepro-gramduringcompiletimebycomparingthenumberofparametersconsumed,theirtype,andthereturntypewiththedatacollectedatthecallsites(notobjectdispatches).Foreachmatchingfunctionsignature(calltargets)andcallsitesignaturepair,asetisbuilt.Lastly,foreachcalltargetcontainedinthepreviouslydeterminedcalltargetset,anotherper-calltargetreturnsetisbuiltbyfollowingthecaller-calleefunctioncallingconvention.Thisessentiallymeansthatforeachcalltarget-callsitemapping,thelegitimatecalltargetsetcontainsthereturnaddresslocatedafterthelegitimatecallsite.ClassHierarchyBased(forvirtualcallees).Forward-edgeinforma-tion,providedbytheclasshierarchy,isusedtomapbackwardedges(seeFigure2(a)forward-edgemappingandFigure2(b)backward-edgemapping).Essentially,alllegitimateforwardedgesarereflectedbackbasedonthelegitimateclasssub-hierarchytheseareallowedtocallinthefirstplace.Assuch,foreachcallee,asetcontainingallcalltargetreturnsitesisbuilt.Dependingonthebaseclassofthedispatchedobjectatthecallsiteandthelocationintheclasshierarchy,thenumberofcalltargetreturnsitesdiffers.Lastly,ourtechniqueisawareofinheritedmembersandassuchtheseareincludedintherelevantbackward-edgetargetset.5DESIGNANDIMPLEMENTATIONInthissection,wepresentfirstthemaincomponentsofρFEMandthenwedescribehowρFEMhandlesvariousfunctioncalltypesincludingdirectcallsin§5.1,virtualcallsin§5.2,indirectfunctionpointerbasedcallsin§5.3,andhowchecksareperformedatthecalleesin§5.4.Lastly,implementationdetailsarepresentedin§5.5.Figure4depictsthecomponentsofρFEMbystarting(fromlefttoright)withthecallsitechecksandperformingawalk-throughoftheinvolvedClang/LLVMparts.Atahighlevel,ρFEMassignsuniqueIDstoeachfunction(callee).Ateachcallsite,theID(ortherangeofIDs)ofthefunction(s),whichcanbecalledbythiscallsite,isinserted.Beforeacalleereturns,weretrievetheIDdatafromtheClangLLVM-LTOLLVMBack-End❶CollectPoly-morphicClasses❷BuildVirtualClassHierarchy❸BuildVir-tualFunctionID-ranges❺InsertChecksIntoCallee❹BuildStaticFunctionIDs❼AnnotateStaticandIndirectCalls❼AnnotateVirtualCalls❿InsertNOPsatCallsite❾MatchCall-siteAnnota-tionwithIDs❽FindCallsiteAnnotation❻InsertVirtualCallInstrinsicsC/C++SourceCodeofaProgramLLVMIRLLVMMIHardenedProgramBinaryVirtualClassMetadataIVTρFEM(front-end)ρFEM(back-end)Figure4:OverviewofρFEM’ssystemdesign.callsite,usingthereturnaddressstoredonthestack,andverifythebackwardedgebycomparingtheretrieveddatawiththefixedID(orIDrange)ofthecallee.TheIDsandcalleesidechecksaregeneratedasfollows.ThevirtualclassmetadataiscollectedinClang❶andisusedtoreconstructthevirtualtablehierarchyduringthelinktimeoptimization(LTO)phase❷.Afterwards,metadataaboutthefunctionentriesinthevirtualtablesisusedtogetherwiththevirtualtablehierarchytogenerateIDsforvirtualfunctionsandcorrespondingrangesforvirtualfunctioncallsites❸.OnceallvirtualfunctionshavebeenassignedanID,ρFEMcontinuestoassignIDstotheremainingnon-virtualfunctions❹.Next,IRcodeinstrumentationbasedchecksareinsertedbeforethereturninstructionsineachfunction(callee)usingthevirtualandnon-virtualfunctionIDsdeterminedbeforehand❺.Further,forcallsites’IDassignment,ρFEMperformsthefollowingsteps.IntheClangfront-end,eachvirtualfunctioncallisannotatedusinganLLVMintrinsic❻.AnintrinsicisaparticulartypeofClangprogramannotation,whichallowsmarkingofcertainprogramparts.Thisenablesinspectionatalaterphasealongthecompilationpipeline.DuringLTO,theseintrinsicsaredetectedandthecorrespondingcallinstructionsarefurtherannotatedforlaterback-endanalysis❼.Allremainingcalls,i.e.,theonesthatwerenotannotatedinthefront-end,aremarkedaseitherdirectcallsorfunctionpointer-basedindirectcalls❼.IntheLLVMback-end,allannotatedcallsarerelocated❽andthenmatchedwiththecorrectIDoranID-rangedependingontheannotationtype❾.Thatis,virtualcallsitesareassignedrangesofIDs,directcallsitesareassignedtheuniqueIDofthefunctioncalleddirectly,andcallsiteswhichusefunctionpointersareassignedtheirrespectivefunctionsignatureID.Next,NOPinstructionsareinserteddirectlyafterthecallsite,carryingtheIDdataasapayload❿.Insert-ingtheNOPsthislateinthecompileranalysispipeline(i.e.,machineinstruction(MI)generationstage)ensuresthatnoinstructionsareplacedbetweenthecallsitesandourNOPsbyadifferentLLVMpass.5.1HandlingDirectCallsNotethatCFGforwardedgesstemmingfromdirectcallsdonotneedtobeprotected,astheaddresstowhichtheprogramcontrolflowistransferredisfixed.Withinthecontextofthispaper,adirectcallisaforward-edgebasedprogramtransferwherethetargetaddress5470ACSAC 2020, December 7–11, 2020, Austin, USA
Paul Muntean, Matthias Neumayer, Zhiqiang Lin, Gang Tan, Jens Grossklags, and Claudia Eckert
using the virtual and non-virtual function IDs ❺ determined be-
forehand.
Further, for callsites’ ID assignment, ρFEM performs the fol-
lowing steps. In the Clang front-end, each virtual function call is
annotated using an LLVM intrinsic ❻. An intrinsic is a particular
type of Clang program annotation, which allows marking of certain
program parts. This enables inspection at a later phase along the
compilation pipeline. During LTO, these intrinsics are detected and
the corresponding call instructions are further annotated for later
back-end analysis ❼. All remaining calls, i.e., the ones that were
not annotated in the front-end, are marked as either direct calls
or function pointer-based indirect calls ❼. In the LLVM back-end,
all annotated calls are relocated ❽ and then matched with the cor-
rect ID or an ID-range depending on the annotation type ❾. That
is, virtual callsites are assigned ranges of IDs, direct callsites are
assigned the unique ID of the function called directly, and callsites
which use function pointers are assigned their respective function
signature ID. Next, NOP instructions are inserted directly after the
callsite, carrying the ID data as a payload ❿. Inserting the NOPs this
late in the compiler analysis pipeline (i.e., machine instruction (MI)
generation stage) ensures that no instructions are placed between
the callsites and our NOPs by a different LLVM pass.
5.1 Handling Direct Calls
Note that CFG forward edges stemming from direct calls do not