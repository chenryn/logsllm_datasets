title:More Efficient MPC from Improved Triple Generation and Authenticated
Garbling
author:Kang Yang and
Xiao Wang and
Jiang Zhang
More Efﬁcient MPC from Improved Triple Generation and
Authenticated Garbling
Kang Yang
State Key Laboratory of Cryptology
Xiao Wang
Northwestern University
PI:EMAIL
PI:EMAIL
Jiang Zhang
State Key Laboratory of Cryptology
PI:EMAIL
October 8, 2020
Abstract
Recent works on distributed garbling have provided highly efﬁcient solutions for constant-round
In this work, we improve upon state-of-the-art
MPC tolerating an arbitrary number of corruptions.
protocols in this paradigm for further performance gain.
First, we propose a new protocol for generating authenticated AND triples, which is a key building
block in many recent works.
– We propose a new authenticated bit protocol in the two-party and multi-party settings from bare IKNP
OT extension, allowing us to reduce the communication by about 24% and eliminate many computa-
tion bottlenecks. We further improve the computational efﬁciency for multi-party authenticated AND
triples with cheaper and fewer consistency checks and fewer hash function calls.
– We implemented our triple generation protocol and observe around 4× to 5× improvement compared
to the best prior protocol in most settings. For example, in the two-party setting with 10 Gbps network
and 8 threads, our protocol can generate more than 4 million authenticated triples per second, while
the best prior implementation can only generate 0.8 million triples per second. In the multi-party
setting, our protocol can generate more than 37000 triples per second over 80 parties, while the best
prior protocol can only generate the same number of triples per second over 16 parties.
We also improve the state-of-the-art multi-party authenticated garbling protocol.
– We take the ﬁrst step towards applying half-gates in the multi-party setting, which enables us to
reduce the size of garbled tables by 2κ bits per gate per garbler, where κ is the computational security
parameter. This optimization is also applicable in the semi-honest multi-party setting.
– We further reduce the communication of circuit authentication from 4ρ bits to 1 bit per gate, using
a new multi-party batched circuit authentication, where ρ is the statistical security parameter. Prior
solution with similar efﬁciency is only applicable in the two-party setting.
For example, in the three-party setting, our techniques can lead to roughly a 35% reduction in the size of
a distributed garbled circuit.
1
Contents
1
Introduction
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.1 Our Contributions .
1.2 Discussion of Some Related Works . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
1.3 Organization .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
.
.
.
.
.
.
.
.
.
.
.
.
3
4
5
5
.
.
.
.
.
.
.
.
.
.
2 Background and Technical Overview
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
.
Improved Authenticated AND triples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . .
Improved Distributed Garbling with Partial Half-Gates
5
6
2.1 Notation .
6
2.2 Multi-Party Authenticated Bits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8
2.3 Multi-Party Authenticated Shares . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8
2.4
2.5
8
2.6 Batch Circuit Authentication in the Multi-Party Setting . . . . . . . . . . . . . . . . . . . . 11
2.7 Other Optimization .
. 12
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
.
.
.
.
3
Improved Preprocessing Protocols
3.1 Optimized Multi-Party Authenticated Bits . . . . . . . . . . . . . . . . . . . . . . . . . .
3.2
Improved Multi-Party Authenticated Shares . . . . . . . . . . . . . . . . . . . . . . . . .
12
. 13
. 15
4 Optimized Multi-Party Authenticated Garbling
17
4.1 Construction in the Fprep-hybrid model and Proof of Security . . . . . . . . . . . . . . . . . 17
4.2 Communication Complexity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17
5 Performance Evaluation
20
. 21
5.1
. 22
5.2
5.3 Evaluation on Real Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24
Improvements for Authenticated Triple Generation Protocols . . . . . . . . . . . . . . . .
Improvements for Authenticated Garbling . . . . . . . . . . . . . . . . . . . . . . . . . .
A More Background
28
A.1 Commitment and Coin-tossing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28
. 29
A.2 Almost Universal Linear Hash Functions . . . . . . . . . . . . . . . . . . . . . . . . . . .
A.3 Amortized Opening Procedures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
. 29
B Proof of Security for Our Authenticated Bit Protocol
B.1 Analysis of Checking in the aBit Protocol
B.2 Proof of Theorem 1 .
.
.
.
.
30
. 30
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
. . . . . . . . . . . . . . . . . . . . . . . . . .
C Complexity and Security of Our Authenticated Share Protocol
35
C.1 Communication Complexity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
C.2 Proof of Security .
. 35
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.
.
.
.
.
.
D Improved Authenticated Triple
D.1 Protocol for Leaky AND Triples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
D.2 From Leaky Authenticated AND Triples to Authenticated AND Triples
37
. 37
. . . . . . . . . . . 43
E Security Proof of Our MPC Protocol
E.1 Related Lemmas
.
E.2 Proof of Theorem 3 .
.
.
.
.
.
.
.
.
.
43
.
. 43
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
2
1 Introduction
Secure multi-party computation (MPC) protocols [Yao86, GMW87] allow a set of parties with private inputs
to compute a joint function without revealing anything more than the output of the function. A variety
of adversarial models have been considered regarding the adversarial behaviors, the threshold of corrupt
parties, etc. In this paper, we focus on statically secure MPC protocols tolerating an arbitrary number of
malicious corruptions.
Distributed garbling [BMR90, DI05] allows a set of parties to jointly generate a garbled circuit in a dis-
tributed manner. It is a core tool to construct constant-round MPC protocols. Recent advances on distributed
garbling have led to a set of efﬁcient protocols [CKMZ14, LPSY15, LSS16, WRK17a, WRK17b, HSS17,
HIV17, KRRW18, ZCSH18] for constant-round MPC tolerating an arbitrary number of malicious corrup-
tions. For example, Wang et al. [WRK17b] demonstrated an implementation that can securely compute
AES-128 among 32 parties in about one second, something unimaginable a few years ago. For example,
recent works [GM17, ZMM+20] have used these implementations to introduce extra privacy features on
real products. As a brief overview, these protocols all follow a similar paradigm consisting of three phases:
1. Function-independent phase, when parties only know an upper bound on the size of the circuit to be
computed. In most protocols, this stage requires computing authenticated version of Beaver triples and
takes the most computation and communication resources.
2. Function-dependent phase, when parties now know the function being computed. This phase usually
involves generating a multi-party garbled circuit, which may be either asymmetric [WRK17b] or sym-
metric [HSS17].
3. Online phase, when parties know their inputs and can evaluate the garbled circuit generated in the
previous phase.
Although this paradigm has signiﬁcantly improved the efﬁciency of constant-round maliciously secure MPC
protocols, we ﬁnd that inefﬁciencies still exist in many key building blocks that, if optimized, can potentially
lead to huge improvements.
– The communication overhead to obtain malicious security is still high. For example, the best-known
maliciously secure two-party computation (2PC) protocol [KRRW18] still requires sending about 310
bytes per gate, even with amortization. This is about 10× more communication than the best semi-honest
garbled-circuit protocol [ZRE15] sending only about 32 bytes per gate.
– The computational overhead of existing maliciously secure protocols is surprisingly higher than com-
monly thought. For example, the most efﬁcient implementation [WRK17a] in the two-party setting re-
ports a speed of 833K authenticated AND triples per second under 10 Gbps network bandwidth and a
36-core CPU. However, if the network was fully used, we would expect at least 4300K authenticated
AND triples to be generated per second,1 which is a 5× performance gap due to high computation cost!
The problem is more prominent in the multi-party setting, where additional consistency checks are needed
among the parties and this causes even more computation overhead. For example, with eight parties,
the implementation from Wang et al. [WRK17b], benchmarked using the same hardware as above, can
compute about 68K multi-party authenticated AND triples per second. The speed would be 510K triples
per second, if the 10 Gbps network bandwidth is fully utilized. This is a performance gap of 7.5×.
1Since every authenticated AND triple in their protocol takes ≈ 290 bytes of communication, 10 Gbps bandwidth can support
around 4.3 × 106 triples.
3
#Parties
2 (8 threads)
2 (32 threads)
3
8
24
40
[WRK17a, WRK17b]
This paper
Improvements
1.26
0.24
5.28×
0.59
0.18
3.28×
5.02
1.26
13.54
3.98× 4.66× 6.36× 5.5× 5.54×
62.66
11.41
10.77