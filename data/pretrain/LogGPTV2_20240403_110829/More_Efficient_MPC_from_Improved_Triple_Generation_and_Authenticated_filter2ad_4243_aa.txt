# Title: More Efficient MPC from Improved Triple Generation and Authenticated Garbling

# Authors:
- Kang Yang, State Key Laboratory of Cryptology
- Xiao Wang, Northwestern University
- Jiang Zhang, State Key Laboratory of Cryptology

## Abstract
Recent advancements in distributed garbling have significantly enhanced the efficiency of constant-round Multi-Party Computation (MPC) protocols, capable of tolerating an arbitrary number of corruptions. In this work, we further improve these protocols to achieve even better performance.

### Key Contributions:
1. **New Protocol for Authenticated AND Triples:**
   - We introduce a novel protocol for generating authenticated AND triples, a critical component in many recent MPC solutions.
   - Our protocol, based on the IKNP OT extension, reduces communication by approximately 24% and eliminates several computational bottlenecks.
   - In multi-party settings, our protocol enhances computational efficiency through fewer consistency checks and reduced hash function calls.

2. **Performance Gains:**
   - In the two-party setting with a 10 Gbps network and 8 threads, our protocol generates over 4 million authenticated triples per second, compared to 0.8 million triples per second in the best prior implementation.
   - In the multi-party setting, our protocol can generate more than 37,000 triples per second over 80 parties, whereas the best prior protocol achieves the same rate only over 16 parties.

3. **Enhanced Multi-Party Authenticated Garbling:**
   - We introduce the first application of half-gates in the multi-party setting, reducing the size of garbled tables by 2κ bits per gate per garbler, where κ is the computational security parameter.
   - We reduce the communication cost of circuit authentication from 4ρ bits to 1 bit per gate using a new multi-party batched circuit authentication technique, where ρ is the statistical security parameter.
   - These optimizations result in a 35% reduction in the size of distributed garbled circuits in the three-party setting.

## 1. Introduction
Secure Multi-Party Computation (MPC) protocols [Yao86, GMW87] enable a set of parties with private inputs to compute a joint function without revealing any additional information beyond the output. Various adversarial models have been considered, including different thresholds for corrupt parties. This paper focuses on statically secure MPC protocols that tolerate an arbitrary number of malicious corruptions.

Distributed garbling [BMR90, DI05] allows parties to jointly generate a garbled circuit in a distributed manner, which is essential for constructing constant-round MPC protocols. Recent advances in distributed garbling have led to efficient protocols [CKMZ14, LPSY15, LSS16, WRK17a, WRK17b, HSS17, HIV17, KRRW18, ZCSH18] for constant-round MPC. For instance, Wang et al. [WRK17b] demonstrated an implementation that securely computes AES-128 among 32 parties in about one second, a significant improvement over previous capabilities. These protocols typically follow a three-phase paradigm:

1. **Function-Independent Phase:** Parties know only an upper bound on the circuit size. This phase often involves computing authenticated Beaver triples and is the most resource-intensive.
2. **Function-Dependent Phase:** Parties now know the function being computed and generate a multi-party garbled circuit, which can be either asymmetric [WRK17b] or symmetric [HSS17].
3. **Online Phase:** Parties evaluate the garbled circuit with their inputs.

Despite these improvements, inefficiencies remain in key building blocks. Specifically:
- The communication overhead for achieving malicious security is still high. For example, the best-known maliciously secure two-party computation (2PC) protocol [KRRW18] requires about 310 bytes per gate, which is 10 times more than the best semi-honest garbled-circuit protocol [ZRE15] at 32 bytes per gate.
- The computational overhead of existing maliciously secure protocols is higher than expected. For instance, the most efficient implementation [WRK17a] in the two-party setting reports a speed of 833K authenticated AND triples per second under 10 Gbps network bandwidth and a 36-core CPU. However, if the network were fully utilized, at least 4.3 million authenticated AND triples per second could be generated, indicating a 5x performance gap due to high computational costs.

The problem is more pronounced in the multi-party setting, where additional consistency checks increase computational overhead. For example, with eight parties, the implementation from Wang et al. [WRK17b] can compute about 68K multi-party authenticated AND triples per second, while full utilization of the 10 Gbps network would support 510K triples per second, a 7.5x performance gap.

## 2. Background and Technical Overview
This section provides the necessary background and technical details for understanding the proposed improvements.

### 2.1 Notation
- **κ:** Computational security parameter.
- **ρ:** Statistical security parameter.
- **n:** Number of parties.
- **m:** Number of gates in the circuit.

### 2.2 Multi-Party Authenticated Bits
We propose a new authenticated bit protocol in both two-party and multi-party settings, leveraging the IKNP OT extension to reduce communication and eliminate computational bottlenecks.

### 2.3 Multi-Party Authenticated Shares
Our protocol for multi-party authenticated shares improves computational efficiency through fewer consistency checks and reduced hash function calls.

### 2.4 Improved Distributed Garbling with Partial Half-Gates
We introduce the first application of half-gates in the multi-party setting, reducing the size of garbled tables by 2κ bits per gate per garbler.

### 2.5 Batch Circuit Authentication in the Multi-Party Setting
We reduce the communication cost of circuit authentication from 4ρ bits to 1 bit per gate using a new multi-party batched circuit authentication technique.

### 2.6 Other Optimizations
Additional optimizations include improved preprocessing protocols and optimized multi-party authenticated garbling.

## 3. Improved Preprocessing Protocols
### 3.1 Optimized Multi-Party Authenticated Bits
- **Communication Reduction:** By leveraging the IKNP OT extension, we reduce communication by about 24%.
- **Computational Efficiency:** Fewer consistency checks and reduced hash function calls enhance computational efficiency.

### 3.2 Improved Multi-Party Authenticated Shares
- **Efficiency Gains:** Our protocol for multi-party authenticated shares significantly reduces computational overhead.

## 4. Optimized Multi-Party Authenticated Garbling
### 4.1 Construction in the Fprep-Hybrid Model and Proof of Security
- **Construction Details:** We provide a detailed construction of our multi-party authenticated garbling protocol in the Fprep-hybrid model.
- **Security Proof:** We prove the security of our protocol under standard cryptographic assumptions.

### 4.2 Communication Complexity
- **Reduction in Communication:** Our protocol reduces the communication complexity of circuit authentication from 4ρ bits to 1 bit per gate.

## 5. Performance Evaluation
### 5.1 Improvements for Authenticated Triple Generation Protocols
- **Performance Metrics:** We evaluate the performance of our triple generation protocol and compare it with the best prior implementations.
- **Results:** In the two-party setting, our protocol achieves a 5.28x improvement, and in the multi-party setting, it achieves up to a 10.77x improvement.

### 5.2 Improvements for Authenticated Garbling
- **Performance Metrics:** We evaluate the performance of our authenticated garbling protocol and compare it with the best prior implementations.
- **Results:** Our techniques lead to a 35% reduction in the size of distributed garbled circuits in the three-party setting.

### 5.3 Evaluation on Real Applications
- **Real-World Impact:** We demonstrate the practical benefits of our protocol by evaluating its performance on real-world applications.

## Appendices
### A. More Background
- **Commitment and Coin-tossing:** Additional details on commitment schemes and coin-tossing protocols.
- **Almost Universal Linear Hash Functions:** Properties and usage of almost universal linear hash functions.
- **Amortized Opening Procedures:** Techniques for amortizing the opening procedures in multi-party settings.

### B. Proof of Security for Our Authenticated Bit Protocol
- **Analysis of Checking:** Detailed analysis of the checking process in our authenticated bit protocol.
- **Proof of Theorem 1:** Formal proof of the security of our authenticated bit protocol.

### C. Complexity and Security of Our Authenticated Share Protocol
- **Communication Complexity:** Analysis of the communication complexity of our authenticated share protocol.
- **Proof of Security:** Formal proof of the security of our authenticated share protocol.

### D. Improved Authenticated Triple
- **Protocol for Leaky AND Triples:** Description of the protocol for generating leaky AND triples.
- **From Leaky Authenticated AND Triples to Authenticated AND Triples:** Transformation process from leaky to fully authenticated AND triples.

### E. Security Proof of Our MPC Protocol
- **Related Lemmas:** Supporting lemmas for the security proof.
- **Proof of Theorem 3:** Formal proof of the security of our MPC protocol.