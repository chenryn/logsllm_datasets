# -- coding=utf-8 --
import requests
import logging
import json
import os
import pymongo
import pymysql
import bson
import time
import traceback
import threading
import sys
import csv
reload(sys)
sys.setdefaultencoding("utf-8")
dirName, scriptName = os.path.split(os.path.abspath(__file__))
logging.basicConfig(
    level = "DEBUG",
    format="[%(asctime)s][%(levelname)s][%(lineno)s][%(name)s][%(thread)d][%(threadName)s] %(message)s",
    filename="/data/rizhiyi/logs/splserver/snmp_issued.log",
    filemode="a"
)
class MongoConnection(object):
    def __init__(self, host, port, user, pswd):
        self.host = host
        self.port = int(port)
        self.user = user
        self.pswd = pswd
        self.client = None
        self.mydb = None
        self._conn()
        return None
    def _conn(self):
        self.client = pymongo.MongoClient(host=self.host, port=self.port)
        db = self.client.admin
        db.authenticate(self.user, self.pswd)
        self.mydb = self.client['share']
        return None
    def query(self, colName, conditions, size):
        mycol = self.mydb[colName]
        return mycol.find_one(conditions)
    def close(self):
        if self.client != None:
            self.client.close()
    def queryFileinfo(self, _id):
        logging.debug("mongo file filter:" + str({'metadata.dictionary_id': _id}))
        _idinfo = self.query('dictionary_files.files', {'metadata.dictionary_id': _id}, 1)
        if _idinfo == None:
            raise Exception("文件[%s]在mongodb中不存在"%(str(_id)))
        _file_id = _idinfo.get("_id")
        logging.debug("mongo data filter:" + str({"files_id" : _file_id}))
        _fileInfo = self.query('dictionary_files.chunks', {"files_id" : _file_id}, 1)
        if _fileInfo == None:
            raise Exception("文件[%s]内容在mongodb中不存在"%(str(_id)))
        data = _fileInfo.get("data", None)
        if data == None:
            raise Exception("文件[%s]内容在mongodb中为空"%(str(_id)))
        return data
class MysqlConnection(object):
    def __init__(self, host, port, user, pswd):
        self.host = host
        self.port = int(port)
        self.user = user
        self.pswd = pswd
        self.conn = None
        self._conn()
        return None
    def _conn(self):
        self.conn = pymysql.connect(host=self.host, port=self.port, user=self.user, password=self.pswd, db='rizhiyi_system', charset='utf8')
        return None
    def close(self):
        if self.conn != None:
            self.conn.close()
    def createTable(self, sql):
        cursor = None
        try:
            cursor = self.conn.cursor()
            cursor.execute(sql)
            self.conn.commit()
        except Exception as e:
            raise e
        finally:
            if cursor != None:
                cursor.close()
        return None
    def query(self, sql):
        cur = None
        try:
            cur = self.conn.cursor()
            cur.execute(sql)
            return cur.fetchall()
        except Exception as e:
            raise e
        finally:
            if cur != None:
                cur.close()
        return None
    def queryAsDictList(self, sql):
        logging.debug(sql)
        cur = None
        try:
            cur = self.conn.cursor()
            cur.execute(sql)
            datas = cur.fetchall()
            logging.debug(datas)
            fields = cur.description
            ret = []
            for data in datas:
                dt = {}
                for i in range(0, len(fields)):
                    value = data[i]
                    if type(value) is str:
                        value.strip()
                    dt[fields[i][0]] = value
                ret.append(dt)
            return ret
        except Exception as e:
            logging.error(traceback.format_exc())
            raise e
        finally:
            if cur != None:
                cur.close()
        return None
    def execute(self, sql):
        logging.debug(sql)
        cur = None
        try:
            cur = self.conn.cursor()
            cur.execute(sql)
            cur.close()
        except Exception as e:
            raise e
        finally:
            if cur != None:
                cur.close()
            self.conn.commit()
    def commit(self):
        self.conn.commit()
        return None
class TableCheck(object):
    def __init__(self, conn):
        self.conn = conn
        return None
    def check(self):
        tables = self.conn.query("show tables like 'snmp_%'")
        tablenames = []
        for tup in tables:
            tablenames.append(tup[0])
        if not tablenames.__contains__("snmp_hekacfg_batch"):
            self._crtbatch()
        if not tablenames.__contains__("snmp_hekacfg_batchmetainfo"):
            self._createbatchmetainfo()
        return None
    def _crtbatch(self):
        sql = "CREATE TABLE IF NOT EXISTS `snmp_hekacfg_batch` (" \
              "batchid bigint(20) not null comment '批次ID'," \
              "batchtime timestamp not null comment '批次时间'," \
              "batchsize int not null default 0 comment '批次变更数量'," \
              "batchstatus int not null default '1' comment '批次状态'," \
              "batchdesc text default null comment '批次处理描述'," \
              "primary key (batchid)" \
              ")"
        self.conn.createTable(sql)
        return None
    def _createbatchmetainfo(self):
        sql = "CREATE TABLE IF NOT EXISTS `snmp_hekacfg_batchmetainfo` (" \
              "batchid bigint(20) not null comment '批次ID'," \
              "agentip varchar(60) not null comment 'AGENT IP地址'," \
              "agentport varchar(5) not null comment 'AGENT PORT'," \
              "deviceip varchar(60) not null comment '设备IP地址'," \
              "deviceoid varchar(100) not null comment '设备OID'," \
              "devicesnmptype varchar(100) not null comment '设备采集命令 snmpget snmpwalk'," \
              "deviceargs varchar(100) default null comment '配置采集参数'," \
              "deviceinterval int(3) default null comment '采集间隔'," \
              "devicecharset varchar(10) default null comment '采集字符集'," \
              "source varchar(100) default '' comment 'HEKA INPUT编号',"\
              "appname varchar(100) not null comment '日志易APPNAME'," \
              "tag varchar(100) not null comment '日志易TAG'," \
              "cfgfile varchar(100) default '' comment '字典文件名称',"\
              "type int(1) not null default 1 comment '处理类型 1-新增 2-删除'," \
              "status int(1) not null default 0 comment '处理状态 0-初始化 1-处理成功 2-处理失败'," \
              "msg text default null comment '处理描述'" \
              ")"
        self.conn.createTable(sql)
        return None
class BatchCheck(object):
    def __init__(self, conn, mconn, rzyuser, rzytoken):
        self.conn  = conn
        self.mconn = mconn
        self.rzy_user = rzyuser
        self.rzy_token = rzytoken
        return None
    def __getAgentList(self):
        sql = "select id from Dictionary where defination_name = 'SNMP_AGENT_列表.csv'"
        ret = self.conn.queryAsDictList(sql)
        if len(ret) == 0:
            raise Exception, 'Agent列表配置[SNMP_AGENT_列表.csv]文件配置在字典管理中不存在'
        agentFileId = ret[0]['id']
        ret = self.mconn.queryFileinfo(agentFileId)
        agentList = []
        for i in range(1, len(ret.split("\n"))):
            line = ret.split("\n")[i].strip()
            if len(line) == 0:
                continue
            if not agentList.__contains__(line):
                agentList.append(line)
        return agentList
    def __getDictCfgInfo(self, agents):
        sql = "select id, defination_name from Dictionary where defination_name like 'SNMP_COLLECT_%.csv'"
        ret = self.conn.queryAsDictList(sql)
        chgList = []
        for ids in ret:
            fileId = ids['id']
            fileInfo = self.mconn.queryFileinfo(fileId)
            lines = fileInfo.split("\n")
            for i in range(1, len(lines)):
                line = lines[i].strip()
                if len(line) == 0:
                    continue
                if chgList.__contains__(line):
                    logging.warn("配置[%s]重复，忽略"%(line))
                    continue
                lineAgentInfo = line.split(",")[0] + "," + line.split(",")[1]
                if not agents.__contains__(lineAgentInfo):
                    logging.warn("配置[%s]对应的agent在列表中不存在!"%(line))
                    continue
                chgList.append(line + "" + ids['defination_name'])
        return chgList
    def __getHekaConfigByAgent(self, agentip, agentport):
        url = "http://%s:%s/getHekaConfig?operator=%s&token=%s"%(agentip, agentport, self.rzy_user, self.rzy_token)
        try:
            _resp = requests.get(url, verify=False)
        except Exception, e:
          logging.error(traceback.format_exc())
          return []
        if _resp.status_code != 200:
            raise Exception("agent[%s:%s]配置获取失败->%s : %s"%(agentip, agentport, str(_resp.status_code), _resp.text))
        result = _resp.json()
        cfgList = []
        for kv in result.get("Configs", {}):
            if kv.get("type", "") == "ProcessInput" and (kv.get("bin", "").endswith("snmpget") or kv.get("bin", "").endswith("snmpwalk")):
                dt = {}
                dt['source'] = kv.get("source")
                dt['appname'] = kv.get("appname")
                dt['tag'] = kv.get('tag')
                if kv.get("bin", "").endswith("snmpget"):
                    dt['snmptype'] = "snmpget"
                if kv.get("bin", "").endswith("snmpwalk"):
                    dt['snmptype'] = "snmpwalk"
                dt['args'] = kv.get("args", [])
                dt['charset'] = kv.get("charset")
                dt['ticker_interval'] = kv.get("ticker_interval")
                cfgList.append(dt)
        return cfgList
    def __chgCfgCheck(self, agentList, chgCfgList):
        shuntChgInfo = {}
        for chg in chgCfgList:
            chgAgent = chg.split(",")[0] + "," + chg.split(",")[1]
            if shuntChgInfo.has_key(chgAgent):
                shuntChgInfo[chgAgent].append(chg)
            else:
                shuntChgInfo[chgAgent] = [chg]
        for agent in agentList:
            if not shuntChgInfo.has_key(agent):
                shuntChgInfo[agent] = []
        chgInfo = {}
        for agent in shuntChgInfo.keys():
            chgList = []
            agentIp = agent.split(",")[0]
            agentPort = agent.split(",")[1]
            hekaCfgList = self.__getHekaConfigByAgent(agentIp, agentPort)
            logging.debug(hekaCfgList)
            fileCfgList = shuntChgInfo[agent]
            #判断删除
            for hekaCfg in hekaCfgList:
                appname = hekaCfg["appname"]
                tag = hekaCfg["tag"]
                snmptype = hekaCfg["snmptype"]
                args = hekaCfg['args']
                flag = False