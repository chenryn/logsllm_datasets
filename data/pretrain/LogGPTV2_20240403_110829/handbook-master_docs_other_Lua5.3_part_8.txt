 lua_setglobal(L, "a");                         /* set global 'a' */
```
注意上面这段代码是 平衡 的： 到了最后，堆栈恢复成原有的配置。 这是一种良好的编程习惯。
### lua_callk
> [-(nargs + 1), +nresults, e]
```lua
void lua_callk (lua_State *L,
                int nargs,
                int nresults,
                lua_KContext ctx,
                lua_KFunction k);
```
这个函数的行为和 `lua_call` 完全一致，只不过它还允许被调用的函数让出 （参见 §4.7）。
### lua_CFunction
```lua
typedef int (*lua_CFunction) (lua_State *L);
```
`C` 函数的类型。
为了正确的和 `Lua` 通讯， `C` 函数必须使用下列协议。 这个协议定义了参数以及返回值传递方法： `C` 函数通过 `Lua` 中的栈来接受参数， 参数以正序入栈（第一个参数首先入栈）。 因此，当函数开始的时候， lua_gettop(L) 可以返回函数收到的参数个数。 第一个参数（如果有的话）在索引 1 的地方， 而最后一个参数在索引 lua_gettop(L) 处。 当需要向 `Lua` 返回值的时候， `C` 函数只需要把它们以正序压到堆栈上（第一个返回值最先压入）， 然后返回这些返回值的个数。 在这些返回值之下的，堆栈上的东西都会被 `Lua` 丢掉。 和 `Lua` 函数一样，从 `Lua` 中调用 `C` 函数也可以有很多返回值。
下面这个例子中的函数将接收若干数字参数，并返回它们的平均数与和：
```lua
static int foo (lua_State *L) {
  int n = lua_gettop(L);    /* 参数的个数 */
  lua_Number sum = 0.0;
  int i;
  for (i = 1; i  [-0, +0, –]
```lua
int lua_checkstack (lua_State *L, int n);
```
确保堆栈上至少有 n 个额外空位。 如果不能把堆栈扩展到相应的尺寸，函数返回假。 失败的原因包括将把栈扩展到比固定最大尺寸还大 （至少是几千个元素）或分配内存失败。 这个函数永远不会缩小堆栈； 如果堆栈已经比需要的大了，那么就保持原样。
### lua_close
> [-0, +0, –]
```lua
void lua_close (lua_State *L);
```
销毁指定 `Lua` 状态机中的所有对象 （如果有垃圾收集相关的元方法的话，会调用它们）， 并且释放状态机中使用的所有动态内存。 在一些平台上，你可以不必调用这个函数， 因为当宿主程序结束的时候，所有的资源就自然被释放掉了。 另一方面，长期运行的程序，比如一个后台程序或是一个网站服务器， 会创建出多个 `Lua` 状态机。那么就应该在不需要时赶紧关闭它们。
### lua_compare
> [-0, +0, e]
```lua
int lua_compare (lua_State *L, int index1, int index2, int op);
```
比较两个 `Lua` 值。 当索引 `index1` 处的值通过 `op` 和索引 index2 处的值做比较后条件满足，函数返回 1 。 这个函数遵循 `Lua` 对应的操作规则（即有可能触发元方法）。 反之，函数返回 0。 当任何一个索引无效时，函数也会返回 0 。
op 值必须是下列常量中的一个：
- LUA_OPEQ: 相等比较 (==)
- LUA_OPLT: 小于比较 ( [-n, +1, e]
```lua
void lua_concat (lua_State *L, int n);
```
连接栈顶的 n 个值， 然后将这些值出栈，并把结果放在栈顶。 如果 n 为 1 ，结果就是那个值放在栈上（即，函数什么都不做）； 如果 n 为 0 ，结果是一个空串。 连接依照 `Lua` 中通常语义完成（参见 §3.4.6 ）。
### lua_copy
> [-0, +0, –]
```lua
void lua_copy (lua_State *L, int fromidx, int toidx);
```
从索引 `fromidx` 处复制一个值到一个有效索引 `toidx` 处，覆盖那里的原有值。 不会影响其它位置的值。
### lua_createtable
> [-0, +1, e]
```lua
void lua_createtable (lua_State *L, int narr, int nrec);
```
创建一张新的空表压栈。 参数 `narr` 建议了这张表作为序列使用时会有多少个元素； 参数 `nrec` 建议了这张表可能拥有多少序列之外的元素。 `Lua` 会使用这些建议来预分配这张新表。 如果你知道这张表用途的更多信息，预分配可以提高性能。 否则，你可以使用函数 `lua_newtable` 。
### lua_dump
> [-0, +0, e]
```lua
int lua_dump (lua_State *L,
                        lua_Writer writer,
                        void *data,
                        int strip);
```
把函数导出成二进制代码块 。 函数接收栈顶的 Lua 函数做参数， 然后生成它的二进制代码块。 若被导出的东西被再次加载， 加载的结果就相当于原来的函数。 当它在产生代码块的时候， `lua_dump` 通过调用函数 `writer` （参见 `lua_Writer` ） 来写入数据，后面的 data 参数会被传入 `writer` 。
如果 `strip` 为真， 二进制代码块将不包含该函数的调试信息。
最后一次由 `writer` 的返回值将作为这个函数的返回值返回； 0 表示没有错误。
该函数不会把 Lua 函数弹出堆栈。
### lua_error
[-1, +0, v]
int lua_error (lua_State *L);
以栈顶的值作为错误对象，抛出一个 Lua 错误。 这个函数将做一次长跳转，所以一定不会返回 （参见 luaL_error）。
### lua_gc
[-0, +0, e]
int lua_gc (lua_State *L, int what, int data);
控制垃圾收集器。
这个函数根据其参数 what 发起几种不同的任务：
- LUA_GCSTOP: 停止垃圾收集器。
- LUA_GCRESTART: 重启垃圾收集器。
- LUA_GCCOLLECT: 发起一次完整的垃圾收集循环。
- LUA_GCCOUNT: 返回 Lua 使用的内存总量（以 K 字节为单位）。
- LUA_GCCOUNTB: 返回当前内存使用量除以 1024 的余数。
- LUA_GCSTEP: 发起一步增量垃圾收集。
- LUA_GCSETPAUSE: 把 data 设为 垃圾收集器间歇率 （参见 §2.5），并返回之前设置的值。
- LUA_GCSETSTEPMUL: 把 data 设为 垃圾收集器步进倍率 （参见 §2.5），并返回之前设置的值。
- LUA_GCISRUNNING: 返回收集器是否在运行（即没有停止）。
关于这些选项的细节，参见 collectgarbage 。
### lua_getallocf
[-0, +0, –]
lua_Alloc lua_getallocf (lua_State *L, void **ud);
返回给定状态机的内存分配器函数。 如果 ud 不是 NULL ， Lua 把设置内存分配函数时设置的那个指针置入 *ud 。
### lua_getfield
[-0, +1, e]
int lua_getfield (lua_State *L, int index, const char *k);
把 t[k] 的值压栈， 这里的 t 是索引指向的值。 在 Lua 中，这个函数可能触发对应 "index" 事件对应的元方法 （参见 §2.4 ）。
函数将返回压入值的类型。
### lua_getextraspace
[-0, +0, –]
void *lua_getextraspace (lua_State *L);
返回一个 Lua 状态机中关联的内存块指针。 程序可以把这块内存用于任何用途；而 Lua 不会使用它。
每一个新线程都会携带一块内存， 初始化为主线程的这块内存的副本。
默认配置下，这块内存的大小为空指针的大小。 不过你可以重新编译 Lua 设定这块内存不同的大小。 （参见 `luaconf.h` 中的 `LUA_EXTRASPACE`。）
### lua_getglobal
[-0, +1, e]
int lua_getglobal (lua_State *L, const char *name);
把全局变量 name 里的值压栈，返回该值的类型。
### lua_geti
[-0, +1, e]
int lua_geti (lua_State *L, int index, lua_Integer i);
把 t[i] 的值压栈， 这里的 t 指给定的索引指代的值。 和在 Lua 里一样，这个函数可能会触发 "index" 事件的元方法 （参见 §2.4）。
返回压入值的类型。
### lua_getmetatable
[-0, +(0|1), –]
int lua_getmetatable (lua_State *L, int index);
如果该索引处的值有元表，则将其元表压栈，返回 1 。 否则不会将任何东西入栈，返回 0 。
### lua_gettable
[-1, +1, e]
int lua_gettable (lua_State *L, int index);
把 t[k] 的值压栈， 这里的 t 是指索引指向的值， 而 k 则是栈顶放的值。
这个函数会弹出堆栈上的键，把结果放在栈上相同位置。 和在 Lua 中一样， 这个函数可能触发对应 "index" 事件的元方法 （参见 §2.4 ）。
返回压入值的类型。
### lua_gettop
[-0, +0, –]
int lua_gettop (lua_State *L);
返回栈顶元素的索引。 因为索引是从 1 开始编号的， 所以这个结果等于栈上的元素个数； 特别指出，0 表示栈为空。
### lua_getuservalue
[-0, +1, –]
int lua_getuservalue (lua_State *L, int index);
将给定索引处的用户数据所关联的 Lua 值压栈。
返回压入值的类型。
### lua_insert
[-1, +1, –]
void lua_insert (lua_State *L, int index);
把栈顶元素移动到指定的有效索引处， 依次移动这个索引之上的元素。 不要用伪索引来调用这个函数， 因为伪索引没有真正指向栈上的位置。