tacks treat the intervening anonymity network as a
black box, they are a threat to any anonymity net-
work. Like other intersection attacks, the predeces-
sor attack has been shown to be devastating in the-
ory and simulation against various anonymity net-
works but has never before been demonstrated on a
live network. Roughly, the predecessor attack looks
at repeated connections suspected to be to (from)
the same correspondent and looks at intersections
of predecessor nodes to see which occurs most of-
ten. Our use of this attack is based on the assump-
tion that the attacker is able to positively identify
the actual streams of data to and from the client in
other circuits, e.g. by using the Timing Analysis
described in Section 4.2.
In the case of Hidden Servers and using our sce-
nario of attack, the Predecessor Attack becomes
trivial. Alice can now make statistics of the IP ad-
dresses that contacted the server in the cases where
a positive trafﬁc-pattern match was found. By se-
lecting only circuits where there has been a match,
and using an m node path towards RP, one single
IP address will occur in around 1
m of these connec-
tions when HS is selecting its ﬁrst node. The at-
tacker will then easily identify the IP address of the
Hidden Server as long as m is signiﬁcantly smaller
than the number of nodes in the network.
Experimental Results: Our results conﬁrmed
the theory of the predecessor paper [31]. Sorting
out the possible circuits based on timing informa-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
tion and then statistically examining the connecting
IP addresses we immediately found the expected
results from the predecessor attack. In every test6
we found that around 50%, or more, of all connec-
tions identiﬁed as a part of the stream were made
from a single IP address, as shown under “Largest
single IP” in Table 1.7
From the experimental results we can also con-
clude that we need far less data to pinpoint the lo-
cation of the Hidden Server than we gathered. A
rough estimate is that within the order of an hour or
two we should have a positive match of the location
of the hidden service using the predecessor attack.
4.5 Distance Attack
If there is no information in IP address statistics
(e.g., due to mixing of trafﬁc or using other coun-
termeasures), an attacker must use other techniques
to locate the hidden service.
When Alice has a dataset that matches the gen-
erated set of data, she can look at the response
times in the communication with the service. The
attacker times the periods where the sampled data
switches from outgoing to incoming trafﬁc, round
trip time, enabling the calculation of a rough esti-
mate measuring the distance to the Hidden Server.
These periods are marked in the example in Fig. 3,
with D for the Client’s response times and d for the
round trip time at the participating node. By group-
ing nodes based on measured round trip times, the
attacker is able to ﬁnd some groups of nodes closer
to the Hidden Server than others.
Experimental Results: Our results conﬁrmed
the assumptions of the distance attack. Using the
data from the experiment we could see a clear cor-
relation between the response times and the dis-
tance from the Hidden Server. When the Hidden
Server was local it was of course easy to ﬁnd a
6This result is for every test running without the use of
“helper” guard nodes. Cf., Section 5.4.
7Given three nodes between HS and RP, we would expect
to ﬁnd a common predecessor IP address in only about 33%
of matching connections. The discrepancy is due to an imple-
mentation feature of Tor uncovered by our experiments. Cf.,
Section 5.1.
Figure 4. Average round trip times at
seven locations in a sample of circuits
match showing the attacker’s node next to the ser-
vice (order of 100-1000 compared to the other con-
nections). But even when our service was located
on computers on the other side of the globe we
could still statistically observe when Alice was con-
necting directly to the Hidden Server. The round
trip times were an order of two or more larger for
the nodes not adjacent to the Hidden Server, as
shown in Fig. 4. The lower line represents the av-
erage response times for 52 samples of the nodes
closest to the Hidden Server, and the upper line is
for the other 35 samples in our set where Alice is
located at Node 2 in Fig. 2. Due to the previously
mentioned implementation feature of Tor we were
unable to ﬁnd data when Alice is located as Node 3,
cf. Section 5.1.
4.6 Owning the Rendezvous Point
By extending adversary resources and using two
nodes in the network, it is possible for Alice to run
attacks where she owns the Rendezvous Point. This
will signiﬁcantly enhance the attack.
Only knowing RP’s IP address will give the
attacker knowledge of when she is the last node
(Node 3 in Fig. 2) in the circuit out from the Hidden
Server. Selection of the Rendezvous Point is done
by the Client and enables Alice to choose one of
her nodes as RP, while still leaving her other node
free to be chosen by HS for the circuit to RP. This
allows Alice to tell when she is the second to last
node in the circuit as well (since both C and RP are
connected to the same node). This implies that if
the path length is three before connecting to HS (as
currently implemented) the attacker is able to deter-
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
mine the instance where she is Node 1, thus directly
revealing the IP address of the Hidden Server. The
speed and accuracy of the attack is then greatly
improved, and the result will be as fast as in the
Service Location Attack—except that this own-the-
rendezvous attack will identify services located at
network servers as well as those located at clients.
5 Countermeasures: More Hidden
Services
5.1 Allowing Middleman nodes to
connect to Rendezvous Points
This ﬁrst point is really about an implementation
feature of Tor’s hidden services that facilitates our
attacks rather than a limitation of the hidden ser-
vices system design. But since changing the feature
does slow down the attacks, we list it here.
To save time, all Tor clients (including hidden
servers) establish circuits ofﬂine, i.e., while await-
ing service requests. Upon receiving a rendezvous
request and an RP location, HS extends such cir-
cuits to RP. Tor clients not operating as hidden ser-
vices typically will need circuits that terminate at
nodes that allow exit from the Tor network on com-
mon ports, such as those for http, ssh, and https.
Almost all of the new ”stand-by” circuits estab-
lished thus go to a node that allows such exit, which
seems quite reasonable considering normal client
use. A hidden server should similarly always have
at least one circuit available at a random node of the
network ready for connection to the Rendezvous
Point.
This creates an advantage for our attacker. By
running in middleman mode (never allowing cir-
cuits to exit the Tor network at that node) she both
reduces the overhead of running a node and guar-
antees that whenever her network node is used be-
tween HS and RP, it will almost8 always be in the
ﬁrst or second position, which increases the efﬁ-
ciency of her attack. Our experiments uncovered
this undocumented feature of the Tor implementa-
tion. It is a trivial change to allow the third node
8We had no occurrence of being Node 3 in the sample sets
described in this paper.
from HS to RP to be any node not just an exit node.
This has now been implemented by the Tor devel-
opers and is available in the latest versions.
5.2 Dummy traﬃc
In anonymous communication, dummy trafﬁc
is a countermeasure to trafﬁc analysis that is of-
ten initially suggested. However, dummy trafﬁc
is expensive, and, despite research, it has yet to
be shown that dummy trafﬁc defeats any active
attacks on low-latency systems unless the system
will also bring most or all of the network to a
stop in response to one non-sending client (as in
Pipenet [10]). Since this makes it trivial for any
user to bring down the network, it is generally seen
as a price few would pay for anonymity, which
means that even those who would pay it would
be hiding in a very small anonymity set [5, 1].
While some dummy trafﬁc schemes have been pro-
posed [7, 17], that attempt to address some active
attacks, no ﬁelded low-latency systems currently
use dummy trafﬁc. In light of our attacks, we de-
scribe why dummy trafﬁc would be an especially
ineffective countermeasure for hidden services.
In our attack scenario, Alice can develop a list of
candidate circuits by labeling any circuits through
her network node that show a response from the
server shortly after she sends a request with an
RP address to HS. This would potentially include
many false positives. She can then induce a tim-
ing signature in her network node on all responses
from a server on candidate circuits. This can be
done exactly in the manner of the timing signa-
ture used by Murdoch and Danezis [18], except that
our attacks do not require collusion by the exter-
nal server. Alice’s client then simply looks for the
same timing signature. The important thing to note
is that no dummy trafﬁc scheme could prevent this.
If dummy trafﬁc is sent all the way to the client,
Alice can of course detect it since she controls the
client. If dummy trafﬁc is sent by HS to some node
between Alice’s node and Alice’s client, this will
result in some differences between the induced sig-
nature and the one seen by the client. Nonetheless,
for low-latency trafﬁc this strong signature would
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
clearly remain easily identiﬁable.
In the experi-
ments of [18], the corrupt server would send for
between 10 and 25 seconds then stop sending for
between 30 and 75 seconds. This was detected in-
directly in those experiments by interference with
external probes of Tor nodes.
In our case, Alice
would have direct access to the circuits. This also
means that the attack would scale to current net-
work sizes and beyond.9 Note also that no existing
dummy scheme would even affect the signature of
trafﬁc sent from Alice’s client to the Hidden Server
through Alice’s node. While this trafﬁc is typically
much lower volume it can still be used to identify
the circuit.
5.3 Extending the Path from Hid-
den Server to Rendezvous Point
As described in Section 4.6 and illustrated in
Fig. 2, if Alice owns at least two nodes she can have
her client name one of them as the Rendezvous
Point. If her other node is chosen by HS as Node 2,
then she will be able to conﬁrm this immediately
with high conﬁdence because both her nodes will
be connected to Node 3. And as before, if Alice
were connected as Node 3, then she would also
know this. This means that Alice can easily know
when she has a circuit match being Node 1, which
is especially signiﬁcant if HS is conﬁgured as in the
server scenario of Section 4.3. However, this also
means that Alice can more quickly abandon circuits
when she does not have Node 1 position, speeding
up the attack. It also allows rapid identiﬁcation of
guard nodes (cf., Section 5.4).
A simple countermeasure to this is to allow HS
to extend the path length, l, to RP by one hop. The
attacker owning the Rendezvous Point will now be
able to determine when she is located as Node 3 or
Node 4, but unable to differentiate between the po-
sitions 1 and 2, forcing Alice to use the predecessor
or service location attack. Extending the path will
also slow down the predecessor attack and the tim-
9The attacks of [18] required probing the entire network and
were done on a network an order of magnitude smaller than the
current Tor network. It is an open question whether they would
scale to the current one.
Figure 5. Use of Entry Guard Nodes
ing analysis by a factor of 1/l since that is the fre-
quency with which Alice’s node will be chosen as
Node 1 within the matching circuits. So this coun-
termeasure only causes a minor effect on the speed
of the predecessor attack, and has no effect on the
location attack.
As an alternative, we could allow HS to choose
RP. This would be a minor code change to the Tor
hidden services protocol. Whether adding a node
before the Rendezvous Point or allowing HS to
choose RP, this would also seem to imply a longer
path between client and HS than the current default
Tor HS protocol, i.e., seven nodes vs. six. This
would also create an easier attack if our techniques
were used to locate the client, which would then
require its own countermeasure.
5.4 Using Entry Guard Nodes
All of our attacks rely on Alice being able to
force the Hidden Server to create new circuits until
she can cause it to create a circuit that ﬁrst connects
directly to her node. What if this could never hap-
pen, or if the rotation of ﬁrst nodes in the circuit
were slowed down? This would prevent or sub-
stantially slow our attacks. This is the motivation
behind entry guard nodes (or simply entry guards)
a concept introduced by Wright et al. [30].10 That
work looked at attacks on various anonymous com-
munication systems, but it did not consider at all
the speciﬁc concerns of hidden services. The basic
idea of a helper node in [30] was to always choose a
single node as the ﬁrst node in a communication. If
this is compromised, then that end of your circuit is
10Wright et al. named these nodes helper nodes, which we
have found to be a too general expression.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:40 UTC from IEEE Xplore.  Restrictions apply. 
Table 2. Experimental results when Hidden Server is using Entry Guard Nodes.
Total circuits Matched
circuits
completed
Largest
single IP
Second
largest
Third
largest
Test 1
Test 2
Test 3
Test 4
292
106
296
292
8
6
13
10
7
5
12
4
1
1
1
3
0
0
0
3
always compromised. However, if it is not compro-
mised, then the attacks we have described cannot
work because Alice will never own the node adja-
cent to HS on the rendezvous circuit. (For a circuit
initiator to better hide the responder, Wright et al.
also considered helper nodes as the last node in the
circuit as well as the ﬁrst.)
Tor design has long allowed a speciﬁed list of
entry nodes (and exit nodes) which, when speci-
ﬁed, will require all circuits to enter (resp. exit) the
network through nodes in that set, as illustrated in
Fig. 5. This can be set as either a preference request
or as a strict requirement [26]. The effectiveness of
using these as entry guard nodes to counter prede-
cessor attacks is noted by the Tor designers as an
open research problem [12].11 We now explore the
idea of using entry guard nodes speciﬁcally to im-
prove the protection of hidden servers.
There are several parameters and options possi-
ble in choosing entry guard nodes. The ﬁrst param-
eter is the entry guard set size, i.e, the number of
nodes that HS will use as entry guards. The smaller
the set, the less risk that Alice owns a node in it;
however the greater the chance that all the nodes in