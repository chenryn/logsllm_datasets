number i can be determined by emulating the rest of the
random walk; for randomized-length walks, timing analysis
would need to be used to guess i.
3.1 Overview
We now describe our ShadowWalker protocol for peer-
to-peer anonymous communication. Our main idea is the
creation of shadow nodes that redundantly verify the cor-
rectness of a given node’s neighbor table and certify it as
correct. Such certiﬁcates can then be used to check the
steps of a random walk; by using certiﬁcates rather than on-
line checks, we can avoid information leak attacks [29]. We
ﬁrst describe the concept of introducing redundancy into
the topology itself, which lies at the heart of our solution.
Next, we describe two circuit construction protocols for ano-
nymous communication that perform random walks on re-
dundant structure topologies in a secure manner. Finally
we present a secure lookup protocol for routing table main-
tenance and algorithms to handle node churn.
163A
1
A
A
2
B
1
B
B
2
Figure 1: Redundant Structured Topology
3.2 Redundant Structured Topology
We ﬁrst deﬁne the concept of a shadow. Each node A has
several shadows, and each shadow is required to indepen-
dently maintain the neighbor information for A. The shad-
ows will provide this information as a way to verify that A
is not attempting to perform a route capture attack. For a
redundancy parameter r, the shadow nodes of A are denoted
as A1, . . . , Ar. The shadow relationship is a deterministic,
veriﬁable relationship that is calculated by applying a math-
ematical formula to the node identiﬁer. As an example, for
r = 2, the shadows for a node A can be considered to be its
successor and its predecessor. For a generic r, the shadows
for a node A can be considered to be its ⌊ r
2 ⌋ predecessors
and ⌈ r
2 ⌉ successors in the DHT.
Using the shadow relationship, we can deﬁne a transfor-
mation to make any P2P topology into a redundant one:
Property 1: In addition to ﬁngers, a node A maintains secure
information about the shadow nodes of the ﬁngers. This
means that if A → B is an edge in the structured topol-
ogy, A → Bj is also an edge in the redundant structured
topology, for j = 1, . . . , r (r shadows of B).
Property 2: If a node Aj is the shadow of node A, it main-
tains a copy of the ﬁngers (as well as the shadows of the
ﬁngers) of A. In other words, if A → B is an edge in the
structured topology, then Aj → B and Aj → Bk are also
edges in the redundant structured topology, for j = 1, . . . , r
and k = 1, . . . , r.
Figure 1 depicts the transformation of an edge A → B
into a redundant structured topology with redundancy pa-
rameter r = 2. Danezis [8] analyzed the use of random
paths along a restricted topology for mix networks and pro-
posed the use of topologies with high expansion so that
the route length necessary to provide maximal anonymity
grows only logarithmically in the number of nodes in the
network. Borisov [4] analyzed random walks on structured
P2P topologies and proposed the use of the de Bruijn [14]
topology to provide anonymity with small path lengths. We
use the de Bruijn topology in our design. Note that nodes
must be able to maintain the links in a redundant structured
topology securely, as described later in Section 3.6.
3.3 Circuit Construction
We use the shadows of a node A to verify the informa-
tion reported by A during circuit construction. Note that
an initiator I cannot contact the shadows directly, since the
shadows would learn that it was building a circuit through
A. I could use the circuit it has established with A to com-
A1
A
B1
B
C1
C
I
A2
B2
C2
Figure 2: Circuit Construction
municate with Aj, similar to how MorphMix contacts its
witness nodes. But this still lets the node Aj know that a
circuit is being built through node A.
We can completely avoid this information leak by having
each shadow Aj digitally sign its view of the routing table of
A and transmit the signature to A. Since the initiator knows
the public key of all the shadows (by Property 1), it can ver-
ify the signatures without having to contact the shadows at
all. Thus, we are able to redundantly check the information
provided by A without contacting any other node. We now
describe our secure random walk protocol based on redun-
dant structured topologies. Figure 3 shows the pseudocode
for our protocol. The initiator I ﬁrst establishes a circuit
to a random ﬁnger A. Next, it queries node A for a ﬁnger
B with random index i (i’th entry in the routing table). A
returns the following information to I.
1. IP address and public key of B, and Bk for k = 1..r
2. Signatures about the above information from Aj, j = 1..r
The initiator I then veriﬁes that signatures of all Aj are
correct. Note that since A is a ﬁnger of I, Aj are also main-
tained by I (Property 1). Thus I knows about the public
keys of all Aj and can verify the signatures. If the signa-
tures are correct, I can extend the circuit to node B. Now,
I can query B for ﬁnger C with a random index i′, verify it
using signatures from Bk and repeat the process. The above
example is illustrated in Figure 2. If the signatures do not
match, the circuit construction is aborted.
3.4 Using Shorter Circuits
Relaying an interactive stream over 5 or 6 nodes may be
expensive; we propose a modiﬁcation to our protocol where
the initiator uses only the last two hops in the random walk
to relay traﬃc. In essence, we use the random walk as an
anonymous peer discovery protocol.
Let us consider our modiﬁcation to the protocol: a node
performs a secure l-hop random walk, and then uses the
last two hops for anonymous communication, by building a
circuit directly to the second to last hop and then extending
it to the last hop.1 Using only the last two hops will improve
the system performance as compared to using all l hops for
anonymous communication, at the cost of a slight loss of
anonymity. Viewed from another perspective, our extension
improves anonymity as compared to an 2-hop random walk.
In general, if the initiator is interested in building a circuit
of length k, it can increase anonymity by performing a l-hop
1If the initiator is unable to connect to the second to last
hop because of non-transitive connectivity, the circuit con-
struction is aborted.
164I.circuit setup(l)
Let A be a random ﬁnger of I
Let Aj be the shadows of A, ∀j = 1..r
Let P ub(Aj) be the public key of Aj, ∀j = 1..r
Create circuit between I and A
for count = 1 to l − 1 do
Let B be a random ﬁnger of A with index i
Let P ub(B) be the public key of B
/* The random ﬁnger is chosen by I*/
Let Bk be the shadows of B, ∀k = 1..r
Let P ub(Bk) be the public key of Bk, ∀k = 1..r
Let Signaturej be the signature given by Aj for A’s
routing state.
I obtains B, P ub(B), all Bk, P ub(Bk), and
all Signaturej from A via the established circuit.
if B, P ub(B), and all Bk, P ub(Bk) are veriﬁed by all
Signaturej then
extend circuit to B
A = B
Aj = Bj, ∀j = 1..r
P ub(Aj) = P ub(Bj), ∀j = 1..r
else
abort
end if
end for
Figure 3: The pseudocode for circuit establishment
of length l.
random walk for l > k, and then use only the last k hops for
anonymous communication. (As long as l < logd N , since
beyond that point, longer random walks provide a limited
improvement of anonymity [4]. Here d denotes the average
node degree in the topology.)
3.5 Using Merkle Hash Trees
Our circuit construction protocol requires that a node ob-
tains signatures for its routing state from its shadow nodes.
We can do this eﬃciently by creating a Merkle hash tree [27]
over the set of ﬁngers and have Aj sign the root of the tree.
Then when queried about a ﬁnger B, A can send the signa-
ture on the root along with log2 d hashes to I, proving that
B was part of the Merkle hash tree signed by Aj.
3.6 Secure Lookup
In Section 2, we described techniques for secure lookups
like Halo [22] and Castro et al. [6], which are eﬀective at
ensuring that a lookup returns the actual closest node to
a chosen identiﬁer. However, in the context of redundant
structured topologies, these mechanisms are not very eﬃ-
cient. For instance, in a redundant structured topology, a
node needs to maintain shadows of its ﬁngers. To achieve
this, the above lookup protocols need to be invoked mul-
tiple times for each shadow node, the overhead for which
is signiﬁcant. We propose a secure lookup protocol that is
speciﬁcally tailored for redundant structured topologies.
Say a node I wishes to securely lookup an identiﬁer ID.
Let A be the closest preceding node for ID in the ﬁnger
table of I. Following the iterative routing strategy, I will
query A for its ﬁnger, B, which is the closest preceding node
for ID. Since I also knows all of the shadows of A, I can
verify this information with them. In this way, I can learn
the correct identity of B, as well all of its shadows. It can
now proceed iteratively, asking B and its shadows for the
closest preceding ﬁnger for ID. Note that as long as one
node among A and its shadows is honest, I will learn the
true identity of B; in case of conﬂicting answers, I should
pick the closest one to ID.2 Thus, a lookup is successful
if there is at least a single honest node in each step of the
lookup.
An important consequence of our secure lookup protocol
is that along with the node corresponding to the chosen ID,
its shadows are returned as well! This signiﬁcantly reduces
the communication overhead of our protocol because it ob-
viates the need for performing multiple secure lookups for
the shadows of ﬁngers.
3.7 Handling Churn
Handling node churn is a major issue in peer-to-peer sys-
tems. Existing DHT designs like Chord have developed al-
gorithms that provide robustness guarantees in presence of
churn. A stabilization protocol is used periodically to en-
sure that the information about new nodes is propagated
to the other nodes in its neighborhood. Periodically, nodes
perform a lookup for chosen identiﬁers to keep their ﬁnger
tables up to date. A successor list is also maintained to han-
dle the case of node failures. We refer the reader to [44] for
a detailed description of how Chord handles churn.
Now, to accommodate a redundant structured topology,
the following changes are to be made:
1. A node periodically performs secure lookups to deter-
mine the identity of nodes (say the set S) for which it is the
shadow.
2. A node periodically performs secure lookups for the ﬁn-
gers of the nodes in the set S.
This above steps suﬃce to maintain a redundant struc-
tured topology because secure lookups return the shadows of
the ﬁngers as well. Moreover, for the purpose of anonymous
communication, a node also periodically sends signatures to
nodes in the set S over their respective routing states.
4. ANONYMITY EVALUATION
4.1 Anonymity Metric
Low-latency anonymity systems are often studied from
the point of view of path compromise attacks by counting
the fraction of compromised circuits. This metric shows
whether attackers are able to identify the initiator of a cir-
cuit or not. However, in P2P systems, there may be ob-
servations that reveal some information about the initiator
even when complete identiﬁcation is impossible. Therefore,
rather than using the binary concept of path compromise,
we use the entropy-based anonymity metric [15, 41]. This
metric considers the distribution of potential initiators of a
circuit, as computed by attackers, and computes its entropy:
H(I) = −Xi
pi log2 pi
(1)
where pi is the probability that the node i was the initiator of
the circuit. Note that a colluding set of attackers can launch
2Note that for an anonymous lookup, all nodes must agree
for the lookup to proceed. In the non-anonymous case, how-
ever, I can verify the existence of B directly, preventing
attackers from responding with fake nodes.
165hop 1
hop 2
hop 3
hop 4
hop 5
 0.25
 0.2
 0.15
 0.1
 0.05
i
e
s
m
o
r
p
m
o
c
e
d
o
n
f
o
y
t
i
l
i
b
a
b
o
r
P
 0
 0
 0.05
 0.1
 0.15
 0.2
Fraction of compromised nodes
Figure 4: P (k’th hop is compromised)
a variety of attacks in order to infer the initiator of the cir-
cuit. Under some observation o, we can compute the prob-
ability distribution given o and compute the corresponding
entropy H(I|o). To model the entropy of the system as a
whole, we compute a weighted average of the entropy for
each observation (including the null observation):
H(I|O) =Xo
P (o)H(I|o)
(2)
where P (o) is the probability of the observation o occurring,
and O is the set of all observations. This is also known as
the conditional entropy of I based on observing O.
4.2 Circuit Construction
Our protocol is subject to the following attacks:
Route Capture Attacks: A single malicious intermediate node
cannot launch route capture attacks, because its information
is veriﬁed by its shadows. However, if an intermediate node
and all of its shadows are compromised, they can launch a
route capture attack by returning colluding malicious nodes
as next hops, or by modifying the public keys of the re-
maining hops to emulate them. This means that if an in-
termediate node in the circuit and all of its shadows are are
malicious, then the remaining nodes in the circuit are also
malicious. Thus the initiator anonymity is compromised if
the ﬁrst node in the circuit and all its shadows are malicious.
End-to-End Timing Analysis: Like other low-latency schemes,
ShadowWalker is also vulnerable to end-to-end timing anal-
ysis, where malicious nodes on both ends of the circuit can
use timing correlations of the packets to infer that they are
on the same circuit and compromise the initiator anonymity.
If the ﬁrst and the last nodes are compromised, the circuit
anonymity is broken.