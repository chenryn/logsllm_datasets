Size:0
Blocks[0]=24
 Flags: 0x0
，最高位的4表示文件类型为目录（各
atime
Blocks[4]
 通常是512字节，
一个块来数的，
Links=3
以及1ost+found子目录下
事实上
00000000
，并非格式化文件系
 Generation:
Blocks[1]
Blockcount=2
Blocks[5]
ctime
所
/是路径分隔
---
## Page 553
1、请读者仿照对根目录的分析，自己分析1ost+found目录的inode和数据块的格式。
习题请点评
列出了inode号、记录长度和文件名，这些信息都是从根目录的数据块中读出来的。
debugfs也提供了cd、ls等命令，
多，
建新的文件，
第二条记录也是描述inode号为2的文件（根目录）
长度为1字节，文件类型为2（见下表，
第一条记录描述inode号为2的文件，也就是根目录本身，
目录：
为2字节，
目录的数据块由许多不定长的记录组成，
是1024字节）
，一个数据块不够用，
表29.1.目录中的文件类型编码
9
5
3
编码
0060300000000000000000000000000000000
0060206c 6f
006010bc.00l.02102 12e2e 0000 bb00.0000le8.03.0al 92
006000020000000c0001.222e0000000200000d
2
文件类型为2，文件名字符串是.．。第三条记录一直延续到该数据块的末尾，
（12）
，可以把第三条记录截短,
Symbolic link
Socket
Named pipe 
Block device
Character device
Directory
Regular file 
Unknown 
文件类型为2，
文件类型
len=12 len=2
ecord
2
inode2
73742b666f756e64000000000000
name
（12）
，不需要mount就可以查看这个文件系统中的目录，
"lost+found"
type
，在原来的0字节处创建新的记录。如果该目录下的文件名太
，注意此处的文件类型编码和st_mode不一致）
len=12
record
，每条记录描述该目录下的一个文件，在上图中用框表示。
11
".."
 该记录的总长度为1000字节（和前面两条记录加起来
（l0oo） lost+found
len=1 type
该记录总长度为12字节，
该记录的总长度为12字节，
，后面全是0字节。如果要在根目录下创
inode 11
len=1000len=10type
，其中文件名的长度
inode2
，例如用1s查看根
其中文件名的
文件名是.。
描
---
## Page 554
示(b/4)3+(b/4)2+b/4+12个数据块，对于1K的块大小最大可表示16.06GB的文件。
对于1K的块大小最大可表示64.26MB的文件。索引项Blocks[14]指向三级的间接寻址块，最多可表
从上图可以看出，索引项Blocks[13]指向两级的间接寻址块，最多可表示(b/4)2+b/4+12个数据块,
块，Blocks[12]所指向的间接寻址块的第一个索引项指向第12个数据块，依此类推。
2.3.数据块寻址 请点评
可见，这种寻址方式对于访问不超过12个数据块的小文件是非常快的，访问文件中的任意数据只需
索引项Blocks[12]所指向的块并非数据块，而是称为间接寻址块（Indirect Block）
如果一个文件有多个数据块，
果比较一下看哪些字节发生了变化。
2、mount这个文件系统,
要两次读盘操作,
示b/4+12个数据块，
存放b/4个索引项,
上面的分析,
一共有15个
。
，磁盘中的inode和数据块往往已经被内核缓存了，
，就只能表示最大15KB的文件了，这是远远不够的，事实上，剩下的三个索引项都是间接索
三级间接寻址
二级间接寻址
一级间接寻址
图 29.7.数据块的寻址
知
游
从Blocks[0]到Blocks[14］， 
根目录的数据块是通过其inode中的索引项Blocks[0]找到的，
亿
一次读inode（也就是读索引项）一次读数据块。而访问大文件中的数据则需要
对于块大小是1K的情况，
在里面添加删除文件，然后umount下来，再次分析它的格式，和原来的结
↑
block 11
block10
block9
block8
block7
block
block
block4
block3
block2
block1
block0
这些数据块很可能不是连续存放的，
，再由索引项指向数据块。设块大小是b，那么一
un
，就表示第24个块是该文件的数据块，如果块大小是1KB,
洪6/4项
 每个索引项占4字节。前12个索引项都表示块编号，
共6/4项
共6/4项
，最大可表示268K的文件。如下图所示，注意文件的
block12
读大文件的效率也不会太低。
共654顶
洪6/4项
block b/4+12
共6/4项
，应该如何寻址到每个块呢？根据
+/q+(/)(/q)1q
事实上，
一个间接寻址块中可以
、数据块。实际
这样的索引项
其中存放的都
554
例如
---
## Page 555
unlink(2)函数删除一个链接。
类型是符号链接，原文件的路径保存在inode中或者分配一个数据块来保存。1n(1)命令是基
link(2)函数创建硬链接,
utime(2)函数改变文件的访问时间和修改时间，也就是修改inode中的atime和mtime字
于stat/fstat/1stat。chown(1)命令是基于chown函数实现的。
区别类似于stat/fstat。chmod(1)命令是基于chmod函数实现的。
access(2)函数检查执行当前进程的用户是否有权限访问某个文件,
链接时，stat(2)函数传出的是它所指向的目标文件的inode，而1stat函数传出的就是符号链接文
2.4.文件和目录操作的系统函数 请点评
除inode位图和块位图中相应的位。如果是硬链接则从目录的数据块中清除一条文件名记录，如果
于link和symlink函数实现的。
件相同。
的Blocks索引项以及块位图中相应的bit。这两个函数的区别类似于stat/fstat。
数据被截掉了
只有超级用户才能正确调用这几个函数，
回0表示允许访问，返回-1表示错误或不允许访问。
操作（读/写/执行)
件本身的inode。
还有另外两个类似stat的函数：fstat(2)函数传入一个已打开的文件描述符，
路径是/opt/file，
原理之后再看这些函数的用法就很简单了，
这些函数实现的。本节的侧重点在于讲解这些函数的工作原理，而不是如何使用它们，理解了实现
本节简要介绍一下文件和目录操作常用的系统函数，
5．读出file文件的inode
2．从根目录的数据块中找出文件名为opt的记录，从记录中读出它的inode号
4.
1．读出inode表中第2项，也就是根目录的inode，
从opt目录的数据块中找出文件名为file的记录，从记录中读出它的inode号
读出opt目录的inode，从中找出它的数据块的位置
symlink(2）函数创建一
如果新的长度比原来的长度长，
则查找的顺序是：
，其原理是在目录的数据块中添加一条新记录，其中的inode号字段和原文
。如果是符号链接则释放这个符号链接的inode和数据块，
一个符号链接，这需要创建一
 这几个函数之间的区别类似
，请读者自己查阅Man Page了解其用法。
则后面多出来的部分用o填充，这需要修改inode中
，从中找出根目录数据块的位置
，也就是修改inode中的user和Group字段,
如果新的长度比原来的长度短，
一个新的inode，
inode
比较一下访问权限，然后返
传入文件路径和要执行的访问
传出inode信
当文件是一个符号
inode 
，清
，则后面的
555
---
## Page 556
下面这个例子出自[K&R],
加了"0'，
这些字段和图 29.6“根目录的数据块"基本一致。这里的文件名d_name被库函数处理过，已经在结尾
以遍历所有记录，
*指针传给readdir读取目录数据块中的记录，每次返回一个指向struct dirent的指针，
硬链接数要减1。rmdir(1)命令是基于rmdir函数实现的。
它的inode和数据块，清除inode位图和块位图中相应的位，清除父目录数据块中的记录，父目录的
rmdir(2)函数删除一个目录，这个目录必须是空的（只包含.和..）才能删除，
的inode和数据块，inode的st_mode字段的文件类型是目录，在数据块中填两个记录，分别
mkdir(2)函数创建新的目录，要做的操作是在它的父目录数据块中添加一条记录，
名长度字段确定文件名到哪里结束。
出保存的数据，这就是目标路径。
readlink(2)函数读取一个符号链接所指向的目标路径,
起移动，
数据块，
rename(2)函数改变文件名，
位图中相应的位，这样就真的删除文件了。unlink(1)命令和rm(1)命令是基于unlink函数实现的。
的。
当前文件的硬链接数已经是了还要删除它，
一个目录下则需要从原目录数据块中清除一条记录然后添加到新目录的数据块中。mv(1)命令是基
文件就必须复制和删除inode和数据块，如果要移动整个目录，
例 29.1.递归列出目录中的文件列表
，而图 29.6“根目录的数据块"中的文件名字段不保证是以"0'结尾的，需要根据前面的文件
struct dirent {
移动操作也只是对顶级目录的改名操作，很快就能完成。
只需要一个改名操作，
#define MAX_PATH 1024
#include
#include
#include
#include
#include 
ino-t
char
，所有记录遍历完之后readdir返回nuLL。结构体struct dirent的定义如下:
nsigned char
，因此在同一分区的不同目录中移动文件并不需要复制和删除文件的inode和
作用是递归地打印出一个目录下的所有子目录和文件，类似1s-R。
需要修改目录数据块中的文件名记录,
 即使要移动整个目录，
d_name[256]; /
d_ino;
reclen;
off;
就同时释放它的
+
 inode number */
，其原理是从符号链接的inode或数据块中读
，这个目录下有很多子目录和文件也要随着
length of 
 所有子目录和文件都要复制删
，但是，
和数据块，
如果原文件名和新文件名不在
如果在不同的分区之间移
 要做的操作是释放
清除
然后分配新
*/
反复读就可
位图和块
把DIR
返回-
---
## Page 557
然而这个程序还是不如1s-R健壮，
1.引言
贝
%s\n", name);
>d_name);
int main(int argc,
%s too long\n",
sizeof(name))
parent */
%s\n"， dir);
void dirwalk(char
/* dirwalk:
/* fsize:
return 0;
else
if (argc == 1)
struct stat stbuf;
closedir(dfd);
if 
if 
struct
char name[MAX PATH];
((stbuf.st_mode & S_IFMT) == S_IFDIR)
(stat(name,
((dfd = opendir(dir)) == NULL) {
while (--argc > 0)
dirwalk(name,
 return;
else
if (strlen(dir)+strlen(dp->d_name)+2
if
return;
fprintf(stderr,
，它有可能死循环，思考一下什么情况会导致死循环。
"*dir,void(*fcn)(char *))
char **argv)
(strcmp(dp->d_name,
全国嵌入式人才培训基地
strcmp(dp-
fsize(*++argv);
sprintf(name, 
fprintf(stderr,
continue;
/* default: current directory */
(*fcn)(name);
起始页
一级
 stbuf.st_size, name);
fsize);
 dir, dp->d_name);
"fsize: can't access
'"dirwalk: can't open
"%s/%s", dir, dp-
/*
"dirwalk: name %s
==
==0）
3. VFS
5
下一页
---
## Page 558
Linux内核的VFS子系统可以图示如下:
3.1.内核数据结构 请点评
3.VFS 请点评
起来用起来都一样，
之上做了一
样的，
个目录下，
的磁盘分区、光盘或其它存储设备都有不同的文件系统格式,
Linux支持各种各样的文件系统格式,
了一种典型的文件系统在磁盘上的存储布局，
图29.8. VFS
一个抽象层，使得文件、目录、
使我们看到一个统一的目录树，
，这个抽象层称为虚拟文件系统（VFS，
，如ext2、ext3、reiserfs、FAT、NTFS、iso9660等等，不同
，这是怎么做到的呢？Linux内核在各种不同的文件系统格式
全国嵌入式人才培训基地
，读写访问等概念成为抽象层的概念，因此各种文件系统春
第 29 章 文件系统
 各种文件系统上的目录和文件我们用1s命令看起来是-
，这一节我们介绍运行时文件系统在内核中的表示。
 3. VFS 
Virtual Filesystem）。
上一节我们介绍
下一
天
---
## Page 559
体，调用它的read成员所指向的内核函数以完成用户请求。在用户程序中调
就会减到0同时释放file结构体，这才真的关闭了文件。
下：已打开的文件在内核中用file结构体表示，文件描述符表中的指针指向file结构体。
符表，
在第28章文件与IO中讲过，
个file结构体，
文件描述符就是这个表的索引，
Process 3 fd=open("/home/akaedu/b", 9_RDONLY);
files_struct
Process 1 fd=open("/home/akaedu/a", O_RDONLY);
7
，例如有fd1和fd2都引用同一
f_flags: O WRONLY
f flags: O_RDONLY
fflags: O RDONLY
count:1
fpos:10
pos:0
count:1
count:1
pos:0
f_dentry
fdentry
fdentry
file
file
file
do
op
op
，进程1和进程2都打开同一文件，
每个表项都有一
一个file结构体，那么它的引用计数就是2，
file_operations
inode_operations
release
open
ioctl
write
read
llseek
一个指向已打开文件的指针，现在我们明确-
+.....
truncate
mkdir
unlink
link
但是对应不同的file结构体，
akaedu
loac
3