---
author: Seth Kenlon
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2202
date: '2023-02-25 15:28:04'
editorchoice: false
excerpt: 学习如何以及何时在 Lua 中使用 while 和 repeat until 循环。
fromurl: https://opensource.com/article/23/2/lua-loops-while-repeat-until
id: 15575
islctt: true
largepic: /data/attachment/album/202302/25/152802hoi4khxzm3izpejh.jpg
permalink: /article-15575-1.html
pic: /data/attachment/album/202302/25/152802hoi4khxzm3izpejh.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 学习如何以及何时在 Lua 中使用 while 和 repeat until 循环。
tags:
- Lua
- 循环
thumb: false
title: Lua 循环：如何使用 while 和 repeat until
titlepic: true
translator: geekpi
updated: '2023-02-25 15:28:04'
---
![](/data/attachment/album/202302/25/152802hoi4khxzm3izpejh.jpg)
> 
> 学习如何以及何时在 Lua 中使用 while 和 repeat until 循环。
> 
> 
> 
控制结构是编程语言的一个重要特征，因为它们使你能够根据通常在程序运行时动态建立的条件来指导程序的流程。不同的语言提供了不同的控制，在 Lua 中，有 `while` 循环、`for` 循环和 `repeat` `until` 循环。这篇文章涵盖了 `while` 和 `repeat until` 循环。由于它们的灵活性，我在一篇 [单独的文章](https://opensource.com/article/22/11/lua-for-loops) 中介绍 `for` 循环。
条件是由一个使用运算符的表达式来定义的，运算符是你在数学课上可能认识的符号的一个花哨的术语。Lua 中有效的运算符有：
* `==` 等于
* `~=`不等于
* `` 大于
* `⇐`小于或等于
* `>=` 大于或等于
这些被称为关系运算符，因为它们比较两个值之间的关联。还有一些逻辑运算符，其含义与英语中的含义相同，可以纳入条件中，进一步描述你想检查的状态：
* `and`
* `or`
下面是一些条件的例子：
* `foo > 3`：变量 `foo` 是否大于 3？`foo` 必须是 4 或更大才能满足这个条件。
* `foo >= 3`：`foo` 是否大于或等于 3？`foo` 必须是 3 或更大才能满足这个条件。
* `foo > 3 and bar  3 or bar  0) do
  print(zombie)
  zombie = zombie-1
end
if zombie == 0 then
  print("No more zombie apocalypse!")
end
```
运行代码，看僵尸消失：
```
$ lua ./while.lua
1024
1023
[...]
3
2
1
No more zombie apocalypse!
```
### until 循环
Lua 还有一个 `repeat` `until` 循环结构，本质上是一个带有 `catch` 语句的 `while` 循环。假设你在从事园艺工作，你想追踪还剩下什么可以收获的东西：
```
mytable = { "tomato", "lettuce", "brains" }
bc = 3
repeat
   print(mytable[bc])
   bc = bc - 1
until( bc == 0 )
```
运行代码：
```
$ lua ./until.lua
brains
lettuce
tomato
```
这很有帮助!
### 无限循环
一个无限循环有一个永远无法满足的条件，所以它无限地运行。这通常是一个由错误逻辑或你的程序中的意外状态引起的错误。例如，在本文的开头，我提出了一个逻辑难题。如果一个循环被设定为 `foo > 3 or bar  3 or bar  100 then
  break
  end
end
```
条件 `while true` 总是被满足，因为 `true` 总是为真。这是比写 `while 1 == 1` 或类似的永远为真的简洁方式。
### Lua 中的循环
从示例代码中可以看出，尽管有不同的实现方式，但循环基本上都是朝着同一个目标工作。选择一个对你来说有意义的，并且在你需要执行的处理过程中效果最好的。以防万一你需要它：终止失控循环的键盘快捷键是 `Ctrl+C`。
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lkxed](https://github.com/lkxed/) 译者：[geekpi](https://github.com/geekpi) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出