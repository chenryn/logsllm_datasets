pg_statistics table or removes entries from the pg_statistics table. If
you specify a method of DELETE, the ANALYZE procedure removes the relevant
rows from pg_statistics. If you specify a method of COMPUTE or ESTIMATE,
the ANALYZE procedure analyzes a table (or multiple tables) and records the
distribution information in pg_statistics. There is no difference between
COMPUTE and ESTIMATE; both methods execute the Postgres ANALYZE
statement. All other parameters are validated and then ignored.
estimate_rows
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 237
Database Compatibility for Oracle® Developers
Built-in Package Guide
Number of rows upon which to base estimated statistics. One of estimate_rows
or estimate_percent must be specified if method is ESTIMATE.
This argument is ignored, but is included for compatibility.
estimate_percent
Percentage of rows upon which to base estimated statistics. One of
estimate_rows or estimate_percent must be specified if method is
ESTIMATE.
This argument is ignored, but is included for compatibility.
method_opt
Object types to be analyzed. Any combination of the following:
[ FOR TABLE ]
[ FOR ALL [ INDEXED ] COLUMNS ] [ SIZE n ]
[ FOR ALL INDEXES ]
This argument is ignored, but is included for compatibility.
Parameters - ANALYZE_PART_OBJECT
schema
Name of the schema whose objects are to be analyzed.
object_name
Name of the partitioned object to be analyzed.
object_type
Type of object to be analyzed. Valid values are: T – table, I – index.
This argument is ignored, but is included for compatibility.
command_type
Type of analyze functionality to perform. Valid values are: E - gather estimated
statistics based upon on a specified number of rows or a percentage of rows in the
sample_clause clause; C - compute exact statistics; or V – validate the
structure and integrity of the partitions.
This argument is ignored, but is included for compatibility.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 238
Database Compatibility for Oracle® Developers
Built-in Package Guide
command_opt
For command_type C or E, can be any combination of:
[ FOR TABLE ]
[ FOR ALL COLUMNS ]
[ FOR ALL LOCAL INDEXES ]
For command_type V, can be CASCADE if object_type is T.
This argument is ignored, but is included for compatibility.
sample_clause
If command_type is E, contains the following clause to specify the number of
rows or percentage or rows on which to base the estimate.
SAMPLE n { ROWS | PERCENT }
This argument is ignored, but is included for compatibility.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 239
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.4 CANONICALIZE
The CANONICALIZE procedure performs the following operations on an input string:
 If the string is not double-quoted, verifies that it uses the characters of a legal
identifier. If not, an exception is thrown. If the string is double-quoted, all
characters are allowed.
 If the string is not double-quoted and does not contain periods, uppercases all
alphabetic characters and eliminates leading and trailing spaces.
 If the string is double-quoted and does not contain periods, strips off the
double quotes.
 If the string contains periods and no portion of the string is double-quoted,
uppercases each portion of the string and encloses each portion in double
quotes.
 If the string contains periods and portions of the string are double-quoted,
returns the double-quoted portions unchanged including the double quotes and
returns the non-double-quoted portions uppercased and enclosed in double
quotes.
CANONICALIZE(name VARCHAR2, canon_name OUT VARCHAR2,
canon_len BINARY_INTEGER)
Parameters
name
String to be canonicalized.
canon_name
The canonicalized string.
canon_len
Number of bytes in name to canonicalize starting from the first character.
Examples
The following procedure applies the CANONICALIZE procedure on its input parameter
and displays the results.
CREATE OR REPLACE PROCEDURE canonicalize (
p_name VARCHAR2,
p_length BINARY_INTEGER DEFAULT 30
)
IS
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 240
Database Compatibility for Oracle® Developers
Built-in Package Guide
v_canon VARCHAR2(100);
BEGIN
DBMS_UTILITY.CANONICALIZE(p_name,v_canon,p_length);
DBMS_OUTPUT.PUT_LINE('Canonicalized name ==>' || v_canon || 'IDENTIFIERIdentifier_+142%"ABC"."DEF"."GHI"abc.def.ghi"abc"."DEF"."ghi""abc.def"."GHI"<==
Length: 15
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 241
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.5 COMMA_TO_TABLE
The COMMA_TO_TABLE procedure converts a comma-delimited list of names into a table
of names. Each entry in the list becomes a table entry. The names must be formatted as
valid identifiers.
COMMA_TO_TABLE(list VARCHAR2, tablen OUT BINARY_INTEGER,
tab OUT { LNAME_ARRAY | UNCL_ARRAY })
Parameters
list
Comma-delimited list of names.
tablen
Number of entries in tab.
tab
Table containing the individual names in list.
LNAME_ARRAY
A DBMS_UTILITY LNAME_ARRAY (as described in Section 3.18.1).
UNCL_ARRAY
A DBMS_UTILITY UNCL_ARRAY (as described in Section 3.18.2).
Examples
The following procedure uses the COMMA_TO_TABLE procedure to convert a list of names
to a table. The table entries are then displayed.
CREATE OR REPLACE PROCEDURE comma_to_table (
p_list VARCHAR2
)
IS
r_lname DBMS_UTILITY.LNAME_ARRAY;
v_length BINARY_INTEGER;
BEGIN
DBMS_UTILITY.COMMA_TO_TABLE(p_list,v_length,r_lname);
FOR i IN 1..v_length LOOP
DBMS_OUTPUT.PUT_LINE(r_lname(i));
END LOOP;
END;
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 242
Database Compatibility for Oracle® Developers
Built-in Package Guide
EXEC comma_to_table('edb.dept, edb.emp, edb.jobhist')
edb.dept
edb.emp
edb.jobhist
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 243
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.6 DB_VERSION
The DB_VERSION procedure returns the version number of the database.
DB_VERSION(version OUT VARCHAR2, compatibility OUT
VARCHAR2)
Parameters
version
Database version number.
compatibility
Compatibility setting of the database. (To be implementation-defined as to its
meaning.)
Examples
The following anonymous block displays the database version information.
DECLARE
v_version VARCHAR2(150);
v_compat VARCHAR2(150);
BEGIN
DBMS_UTILITY.DB_VERSION(v_version,v_compat);
DBMS_OUTPUT.PUT_LINE('Version: ' || v_version);
DBMS_OUTPUT.PUT_LINE('Compatibility: ' || v_compat);
END;
Version: EnterpriseDB 10.0.0 on i686-pc-linux-gnu, compiled by GCC gcc (GCC)
4.1.2 20080704 (Red Hat 4.1.2-48), 32-bit
Compatibility: EnterpriseDB 10.0.0 on i686-pc-linux-gnu, compiled by GCC gcc
(GCC) 4.1.220080704 (Red Hat 4.1.2-48), 32-bit
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 244
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.7 EXEC_DDL_STATEMENT
The EXEC_DDL_STATEMENT provides the capability to execute a DDL command.
EXEC_DDL_STATEMENT(parse_string VARCHAR2)
Parameters
parse_string
The DDL command to be executed.
Examples
The following anonymous block creates the job table.
BEGIN
DBMS_UTILITY.EXEC_DDL_STATEMENT(
'CREATE TABLE job (' ||
'jobno NUMBER(3),' ||
'jname VARCHAR2(9))'
);
END;
If the parse_string does not include a valid DDL statement, Advanced Server returns
the following error:
edb=# exec dbms_utility.exec_ddl_statement('select rownum from dual');
ERROR: EDB-20001: 'parse_string' must be a valid DDL statement
In this case, Advanced Server's behavior differs from Oracle's; Oracle accepts the invalid
parse_string without complaint.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 245
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.8 FORMAT_CALL_STACK
The FORMAT_CALL_STACK function returns the formatted contents of the current call
stack.
DBMS_UTILITY.FORMAT_CALL_STACK
return VARCHAR2
This function can be used in a stored procedure, function or package to return the current
call stack in a readable format. This function is useful for debugging purposes.
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 246
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.9 GET_CPU_TIME
The GET_CPU_TIME function returns the CPU time in hundredths of a second from some
arbitrary point in time.
cputime NUMBER GET_CPU_TIME
Parameters
cputime
Number of hundredths of a second of CPU time.
Examples
The following SELECT command retrieves the current CPU time, which is 603
hundredths of a second or .0603 seconds.
SELECT DBMS_UTILITY.GET_CPU_TIME FROM DUAL;
get_cpu_time
--------------
603
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 247
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.10 GET_DEPENDENCY
The GET_DEPENDENCY procedure provides the capability to list the objects that are
dependent upon the specified object. GET_DEPENDENCY does not show dependencies for
functions or procedures.
GET_DEPENDENCY(type VARCHAR2, schema VARCHAR2,
name VARCHAR2)
Parameters
type
The object type of name. Valid values are INDEX, PACKAGE, PACKAGE BODY,
SEQUENCE, TABLE, TRIGGER, TYPE and VIEW.
schema
Name of the schema in which name exists.
name
Name of the object for which dependencies are to be obtained.
Examples
The following anonymous block finds dependencies on the EMP table.
BEGIN
DBMS_UTILITY.GET_DEPENDENCY('TABLE','public','EMP');
END;
DEPENDENCIES ON public.EMP
------------------------------------------------------------------
*TABLE public.EMP()
* CONSTRAINT c public.emp()
* CONSTRAINT f public.emp()
* CONSTRAINT p public.emp()
* TYPE public.emp()
* CONSTRAINT c public.emp()
* CONSTRAINT f public.jobhist()
* VIEW .empname_view()
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 248
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.11 GET_HASH_VALUE
The GET_HASH_VALUE function provides the capability to compute a hash value for a
given string.
hash NUMBER GET_HASH_VALUE(name VARCHAR2, base NUMBER,
hash_size NUMBER)
Parameters
name
The string for which a hash value is to be computed.
base
Starting value at which hash values are to be generated.
hash_size
The number of hash values for the desired hash table.
hash
The generated hash value.
Examples
The following anonymous block creates a table of hash values using the ename column
of the emp table and then displays the key along with the hash value. The hash values
start at 100 with a maximum of 1024 distinct values.
DECLARE
v_hash NUMBER;
TYPE hash_tab IS TABLE OF NUMBER INDEX BY VARCHAR2(10);
r_hash HASH_TAB;
CURSOR emp_cur IS SELECT ename FROM emp;
BEGIN
FOR r_emp IN emp_cur LOOP
r_hash(r_emp.ename) :=
DBMS_UTILITY.GET_HASH_VALUE(r_emp.ename,100,1024);
END LOOP;
FOR r_emp IN emp_cur LOOP
DBMS_OUTPUT.PUT_LINE(RPAD(r_emp.ename,10) || ' ' ||
r_hash(r_emp.ename));
END LOOP;
END;
SMITH 377
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 249
Database Compatibility for Oracle® Developers
Built-in Package Guide
ALLEN 740
WARD 718
JONES 131
MARTIN 176
BLAKE 568
CLARK 621
SCOTT 1097
KING 235
TURNER 850
ADAMS 156
JAMES 942
FORD 775
MILLER 148
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 250
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.12 GET_PARAMETER_VALUE
The GET_PARAMETER_VALUE procedure provides the capability to retrieve database
initialization parameter settings.
status BINARY_INTEGER GET_PARAMETER_VALUE(parnam VARCHAR2,
intval OUT INTEGER, strval OUT VARCHAR2)
Parameters
parnam
Name of the parameter whose value is to be returned. The parameters are listed in
the pg_settings system view.
intval
Value of an integer parameter or the length of strval.
strval
Value of a string parameter.
status
Returns 0 if the parameter value is INTEGER or BOOLEAN. Returns 1 if the
parameter value is a string.
Examples
The following anonymous block shows the values of two initialization parameters.
DECLARE
v_intval INTEGER;
v_strval VARCHAR2(80);
BEGIN
DBMS_UTILITY.GET_PARAMETER_VALUE('max_fsm_pages', v_intval, v_strval);
DBMS_OUTPUT.PUT_LINE('max_fsm_pages' || ': ' || v_intval);
DBMS_UTILITY.GET_PARAMETER_VALUE('client_encoding', v_intval, v_strval);
DBMS_OUTPUT.PUT_LINE('client_encoding' || ': ' || v_strval);
END;
max_fsm_pages: 72625
client_encoding: SQL_ASCII
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 251
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.13 GET_TIME
The GET_TIME function provides the capability to return the current time in hundredths
of a second.
time NUMBER GET_TIME
Parameters
time
Number of hundredths of a second from the time in which the program is started.
Examples
The following example shows calls to the GET_TIME function.
SELECT DBMS_UTILITY.GET_TIME FROM DUAL;
get_time
----------
1555860
SELECT DBMS_UTILITY.GET_TIME FROM DUAL;
get_time
----------
1556037
Copyright © 2007 - 2019 EnterpriseDB Corporation. All rights reserved. 252
Database Compatibility for Oracle® Developers
Built-in Package Guide
3.18.14 NAME_TOKENIZE
The NAME_TOKENIZE procedure parses a name into its component parts. Names without
double quotes are uppercased. The double quotes are stripped from names with double
quotes.
NAME_TOKENIZE(name VARCHAR2, a OUT VARCHAR2,
b OUT VARCHAR2,c OUT VARCHAR2, dblink OUT VARCHAR2,
nextpos OUT BINARY_INTEGER)
Parameters
name
String containing a name in the following format:
a[.b[.c]][@dblink ]
a
Returns the leftmost component.
b