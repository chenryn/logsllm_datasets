### 3.18.1 ANALYZE_PART_OBJECT

The `ANALYZE_PART_OBJECT` procedure manages the `pg_statistics` table by either adding or removing entries. If the `method` is set to `DELETE`, the procedure removes the relevant rows from `pg_statistics`. If the `method` is set to `COMPUTE` or `ESTIMATE`, the procedure analyzes one or more tables and records the distribution information in `pg_statistics`. There is no functional difference between `COMPUTE` and `ESTIMATE`; both methods execute the PostgreSQL `ANALYZE` statement. All other parameters are validated but ignored.

#### Parameters

- **estimate_rows**: The number of rows upon which to base estimated statistics. One of `estimate_rows` or `estimate_percent` must be specified if the `method` is `ESTIMATE`. This argument is included for compatibility but is ignored.
- **estimate_percent**: The percentage of rows upon which to base estimated statistics. One of `estimate_rows` or `estimate_percent` must be specified if the `method` is `ESTIMATE`. This argument is included for compatibility but is ignored.
- **method_opt**: Specifies the object types to be analyzed. Any combination of the following can be used:
  - `[ FOR TABLE ]`
  - `[ FOR ALL [ INDEXED ] COLUMNS ] [ SIZE n ]`
  - `[ FOR ALL INDEXES ]`
  This argument is included for compatibility but is ignored.
- **schema**: The name of the schema whose objects are to be analyzed.
- **object_name**: The name of the partitioned object to be analyzed.
- **object_type**: The type of object to be analyzed. Valid values are:
  - `T` – Table
  - `I` – Index
  This argument is included for compatibility but is ignored.
- **command_type**: The type of analyze functionality to perform. Valid values are:
  - `E` - Gather estimated statistics based on a specified number of rows or a percentage of rows in the `sample_clause`.
  - `C` - Compute exact statistics.
  - `V` - Validate the structure and integrity of the partitions.
  This argument is included for compatibility but is ignored.
- **command_opt**: For `command_type` `C` or `E`, any combination of the following can be used:
  - `[ FOR TABLE ]`
  - `[ FOR ALL COLUMNS ]`
  - `[ FOR ALL LOCAL INDEXES ]`
  For `command_type` `V`, `CASCADE` can be used if `object_type` is `T`.
  This argument is included for compatibility but is ignored.
- **sample_clause**: If `command_type` is `E`, this clause specifies the number of rows or percentage of rows on which to base the estimate. The format is `SAMPLE n { ROWS | PERCENT }`. This argument is included for compatibility but is ignored.

### 3.18.4 CANONICALIZE

The `CANONICALIZE` procedure performs the following operations on an input string:

- If the string is not double-quoted, it verifies that it uses only legal identifier characters. If not, an exception is thrown. If the string is double-quoted, all characters are allowed.
- If the string is not double-quoted and does not contain periods, it uppercases all alphabetic characters and eliminates leading and trailing spaces.
- If the string is double-quoted and does not contain periods, it strips off the double quotes.
- If the string contains periods and no portion of the string is double-quoted, it uppercases each portion of the string and encloses each portion in double quotes.
- If the string contains periods and portions of the string are double-quoted, it returns the double-quoted portions unchanged (including the double quotes) and returns the non-double-quoted portions uppercased and enclosed in double quotes.

#### Syntax

```sql
CANONICALIZE(name VARCHAR2, canon_name OUT VARCHAR2, canon_len BINARY_INTEGER)
```

#### Parameters

- **name**: The string to be canonicalized.
- **canon_name**: The canonicalized string.
- **canon_len**: The number of bytes in `name` to canonicalize, starting from the first character.

#### Example

The following procedure applies the `CANONICALIZE` procedure on its input parameter and displays the results.

```sql
CREATE OR REPLACE PROCEDURE canonicalize (
    p_name VARCHAR2,
    p_length BINARY_INTEGER DEFAULT 30
)
IS
    v_canon VARCHAR2(100);
BEGIN
    DBMS_UTILITY.CANONICALIZE(p_name, v_canon, p_length);
    DBMS_OUTPUT.PUT_LINE('Canonicalized name ==>' || v_canon);
END;
```

### 3.18.5 COMMA_TO_TABLE

The `COMMA_TO_TABLE` procedure converts a comma-delimited list of names into a table of names. Each entry in the list becomes a table entry. The names must be formatted as valid identifiers.

#### Syntax

```sql
COMMA_TO_TABLE(list VARCHAR2, tablen OUT BINARY_INTEGER, tab OUT { LNAME_ARRAY | UNCL_ARRAY })
```

#### Parameters

- **list**: A comma-delimited list of names.
- **tablen**: The number of entries in `tab`.
- **tab**: A table containing the individual names in `list`.
- **LNAME_ARRAY**: A `DBMS_UTILITY.LNAME_ARRAY` (as described in Section 3.18.1).
- **UNCL_ARRAY**: A `DBMS_UTILITY.UNCL_ARRAY` (as described in Section 3.18.2).

#### Example

The following procedure uses the `COMMA_TO_TABLE` procedure to convert a list of names to a table. The table entries are then displayed.

```sql
CREATE OR REPLACE PROCEDURE comma_to_table (
    p_list VARCHAR2
)
IS
    r_lname DBMS_UTILITY.LNAME_ARRAY;
    v_length BINARY_INTEGER;
BEGIN
    DBMS_UTILITY.COMMA_TO_TABLE(p_list, v_length, r_lname);
    FOR i IN 1..v_length LOOP
        DBMS_OUTPUT.PUT_LINE(r_lname(i));
    END LOOP;
END;
```

### 3.18.6 DB_VERSION

The `DB_VERSION` procedure returns the version number and compatibility setting of the database.

#### Syntax

```sql
DB_VERSION(version OUT VARCHAR2, compatibility OUT VARCHAR2)
```

#### Parameters

- **version**: The database version number.
- **compatibility**: The compatibility setting of the database. (To be implementation-defined as to its meaning.)

#### Example

The following anonymous block displays the database version information.

```sql
DECLARE
    v_version VARCHAR2(150);
    v_compat VARCHAR2(150);
BEGIN
    DBMS_UTILITY.DB_VERSION(v_version, v_compat);
    DBMS_OUTPUT.PUT_LINE('Version: ' || v_version);
    DBMS_OUTPUT.PUT_LINE('Compatibility: ' || v_compat);
END;
```

### 3.18.7 EXEC_DDL_STATEMENT

The `EXEC_DDL_STATEMENT` procedure provides the capability to execute a DDL command.

#### Syntax

```sql
EXEC_DDL_STATEMENT(parse_string VARCHAR2)
```

#### Parameters

- **parse_string**: The DDL command to be executed.

#### Example

The following anonymous block creates the `job` table.

```sql
BEGIN
    DBMS_UTILITY.EXEC_DDL_STATEMENT(
        'CREATE TABLE job (' ||
        'jobno NUMBER(3),' ||
        'jname VARCHAR2(9))'
    );
END;
```

If the `parse_string` does not include a valid DDL statement, Advanced Server returns the following error:

```sql
edb=# exec dbms_utility.exec_ddl_statement('select rownum from dual');
ERROR: EDB-20001: 'parse_string' must be a valid DDL statement
```

In this case, Advanced Server's behavior differs from Oracle's; Oracle accepts the invalid `parse_string` without complaint.

### 3.18.8 FORMAT_CALL_STACK

The `FORMAT_CALL_STACK` function returns the formatted contents of the current call stack.

#### Syntax

```sql
DBMS_UTILITY.FORMAT_CALL_STACK RETURN VARCHAR2
```

This function can be used in a stored procedure, function, or package to return the current call stack in a readable format. It is useful for debugging purposes.

### 3.18.9 GET_CPU_TIME

The `GET_CPU_TIME` function returns the CPU time in hundredths of a second from some arbitrary point in time.

#### Syntax

```sql
cputime NUMBER GET_CPU_TIME
```

#### Parameters

- **cputime**: The number of hundredths of a second of CPU time.

#### Example

The following SELECT command retrieves the current CPU time, which is 603 hundredths of a second or 0.0603 seconds.

```sql
SELECT DBMS_UTILITY.GET_CPU_TIME FROM DUAL;
```

### 3.18.10 GET_DEPENDENCY

The `GET_DEPENDENCY` procedure lists the objects that are dependent upon the specified object. It does not show dependencies for functions or procedures.

#### Syntax

```sql
GET_DEPENDENCY(type VARCHAR2, schema VARCHAR2, name VARCHAR2)
```

#### Parameters

- **type**: The object type of `name`. Valid values are `INDEX`, `PACKAGE`, `PACKAGE BODY`, `SEQUENCE`, `TABLE`, `TRIGGER`, `TYPE`, and `VIEW`.
- **schema**: The name of the schema in which `name` exists.
- **name**: The name of the object for which dependencies are to be obtained.

#### Example

The following anonymous block finds dependencies on the `EMP` table.

```sql
BEGIN
    DBMS_UTILITY.GET_DEPENDENCY('TABLE', 'public', 'EMP');
END;
```

### 3.18.11 GET_HASH_VALUE

The `GET_HASH_VALUE` function computes a hash value for a given string.

#### Syntax

```sql
hash NUMBER GET_HASH_VALUE(name VARCHAR2, base NUMBER, hash_size NUMBER)
```

#### Parameters

- **name**: The string for which a hash value is to be computed.
- **base**: The starting value at which hash values are to be generated.
- **hash_size**: The number of hash values for the desired hash table.
- **hash**: The generated hash value.

#### Example

The following anonymous block creates a table of hash values using the `ename` column of the `emp` table and then displays the key along with the hash value. The hash values start at 100 with a maximum of 1024 distinct values.

```sql
DECLARE
    v_hash NUMBER;
    TYPE hash_tab IS TABLE OF NUMBER INDEX BY VARCHAR2(10);
    r_hash HASH_TAB;
    CURSOR emp_cur IS SELECT ename FROM emp;
BEGIN
    FOR r_emp IN emp_cur LOOP
        r_hash(r_emp.ename) := DBMS_UTILITY.GET_HASH_VALUE(r_emp.ename, 100, 1024);
    END LOOP;
    FOR r_emp IN emp_cur LOOP
        DBMS_OUTPUT.PUT_LINE(RPAD(r_emp.ename, 10) || ' ' || r_hash(r_emp.ename));
    END LOOP;
END;
```

### 3.18.12 GET_PARAMETER_VALUE

The `GET_PARAMETER_VALUE` procedure retrieves database initialization parameter settings.

#### Syntax

```sql
status BINARY_INTEGER GET_PARAMETER_VALUE(parnam VARCHAR2, intval OUT INTEGER, strval OUT VARCHAR2)
```

#### Parameters

- **parnam**: The name of the parameter whose value is to be returned. The parameters are listed in the `pg_settings` system view.
- **intval**: The value of an integer parameter or the length of `strval`.
- **strval**: The value of a string parameter.
- **status**: Returns 0 if the parameter value is `INTEGER` or `BOOLEAN`. Returns 1 if the parameter value is a string.

#### Example

The following anonymous block shows the values of two initialization parameters.

```sql
DECLARE
    v_intval INTEGER;
    v_strval VARCHAR2(80);
BEGIN
    DBMS_UTILITY.GET_PARAMETER_VALUE('max_fsm_pages', v_intval, v_strval);
    DBMS_OUTPUT.PUT_LINE('max_fsm_pages: ' || v_intval);
    DBMS_UTILITY.GET_PARAMETER_VALUE('client_encoding', v_intval, v_strval);
    DBMS_OUTPUT.PUT_LINE('client_encoding: ' || v_strval);
END;
```

### 3.18.13 GET_TIME

The `GET_TIME` function returns the current time in hundredths of a second.

#### Syntax

```sql
time NUMBER GET_TIME
```

#### Parameters

- **time**: The number of hundredths of a second from the time the program is started.

#### Example

The following example shows calls to the `GET_TIME` function.

```sql
SELECT DBMS_UTILITY.GET_TIME FROM DUAL;
```

### 3.18.14 NAME_TOKENIZE

The `NAME_TOKENIZE` procedure parses a name into its component parts. Names without double quotes are uppercased. The double quotes are stripped from names with double quotes.

#### Syntax

```sql
NAME_TOKENIZE(name VARCHAR2, a OUT VARCHAR2, b OUT VARCHAR2, c OUT VARCHAR2, dblink OUT VARCHAR2, nextpos OUT BINARY_INTEGER)
```

#### Parameters

- **name**: A string containing a name in the following format: `a[.b[.c]][@dblink]`.
- **a**: Returns the leftmost component.
- **b**: Returns the next component.
- **c**: Returns the next component.
- **dblink**: Returns the dblink component.
- **nextpos**: Returns the position of the next component.