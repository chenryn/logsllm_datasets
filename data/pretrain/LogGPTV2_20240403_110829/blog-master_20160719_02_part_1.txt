## Greenplum 最佳实践 - 数据分布黄金法则 - 分布列与分区的选择  
##### [TAG 24](../class/24.md) , [TAG 11](../class/11.md)
### 作者                                
digoal                                
### 日期                                
2016-07-19                              
### 标签                                
PostgreSQL , Greenplum , OLAP , 阿里云 RDS , ApsaraDB , MySQL , 数据分布 , 分区键选择                     
----                                
## 背景  
阿里云ApsaraDB for Greenplum公测以来，已经收到好多用户的公测申请。    
要使用Greenplum，登陆到数据库后第一件事当然是建表，然后倒入数据开测。    
大部分用户以前是使用MySQL的，并没有接触过Greenplum，语法需要适应一下。    
例如MySQL中的建表语句    
```  
DROP TABLE IF EXISTS  `ab01`;  
CREATE TABLE `ab01` (  
  `aab001` bigint(10) NOT NULL ,  
  `aab007` varchar(50) DEFAULT NULL ,  
  `aab008` decimal(14,0) DEFAULT NULL ,  
  `create_time` datetime NOT NULL ,  
  `deleteedflag` bit(1) DEFAULT b'0' ,  
  PRIMARY KEY (`aab001`)  
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ;  
```  
在Greenplum中可以写成    
```  
DROP TABLE IF EXISTS  ab01;  
CREATE TABLE ab01 (  
  aab001 int8 NOT NULL ,  
  aab007 varchar(50) DEFAULT NULL ,  
  aab008 decimal(14,0) DEFAULT NULL ,  -- 长度   Seq Scan on aa01  (cost=0.00..120.00 rows=1 width=1973)  
         Filter: aaz499 = 1  
         Rows out:  0 rows with 0.031 ms to end, start offset by 145 ms.  
 Slice statistics:  
   (slice0)    Executor memory: 330K bytes.  
   (slice1)    Executor memory: 176K bytes (seg10).  
 Statement statistics:  
   Memory used: 128000K bytes  
 Optimizer status: legacy query optimizer  
 Total runtime: 145.822 ms  
(12 rows)  
```  
  查询非分布列，需要所有的segment参与查询    
```  
postgres=# explain analyze select * from aa01 where cae007='t';  
                                     QUERY PLAN                                       
------------------------------------------------------------------------------------  
 Gather Motion 16:1  (slice1; segments: 16)  (cost=0.00..120.00 rows=2 width=1973)  
   Rows out:  0 rows at destination with 2.001 ms to end, start offset by 146 ms.  
   ->  Seq Scan on aa01  (cost=0.00..120.00 rows=1 width=1973)  
         Filter: cae007::text = 't'::text  
         Rows out:  0 rows (seg0) with 0.047 ms to end, start offset by 147 ms.  
 Slice statistics:  
   (slice0)    Executor memory: 330K bytes.  
   (slice1)    Executor memory: 176K bytes avg x 16 workers, 176K bytes max (seg0).  
 Statement statistics:  
   Memory used: 128000K bytes  
 Optimizer status: legacy query optimizer  
 Total runtime: 147.813 ms  
(12 rows)  
```  
  法则3，尽量选择高并发查询的条件列（指该查询条件产生的中间结果集小的，如果中间结果集很大，那就让所有节点都来参与运算更好，因此不选），如果有多个条件，请先权衡前面的法则  
  法则4，不要轻易使用随机分布  
## 分区黄金法则  
目前Greenplum支持LIST和RANGE两种分区类型。    
分区的目的是尽可能的缩小QUERY需要扫描的数据量，因此必须和查询条件相关联。    
法则1，尽量选择和查询条件相关的字段，缩小QUERY需要扫描的数据  
法则2，当有多个查询条件时，可以使用子分区，进一步缩小需要扫描的数据  
例子，一个用户发起了带两个查询条件col1=xx and col2 between ?1 and ?2 的请求，通过分区，如果表已经根据col1进行了LIST分区，同时根据col2进行了range的分区，那么查询范围可以大大的缩小。    
![screenshot](20160719_02_pic_004.png)  
## 如何查看分布键
1\. 使用psql查看  
```
postgres=# \d mv1
     Table "postgres.mv1"
 Column |  Type   | Modifiers 
--------+---------+-----------
 did    | integer | 
 bid    | integer | 
 cid    | integer | 
 aid    | integer | 
Indexes:
    "idx_mv1_did" btree (did)
Distributed by: (did)
```
2\. 使用SQL查看  
```
postgres=# select attname from pg_attribute 
where attrelid='postgres.mv1'::regclass 
and attnum in (SELECT unnest(attrnums) FROM pg_catalog.gp_distribution_policy t where localoid='postgres.mv1'::regclass);
 attname 
---------
 did
(1 row)
```
## 如何查看分区定义
1\. 使用psql查看  
```
\d+ log2
                            Table "postgres.log2"
  Column  |            Type             | Modifiers | Storage  | Description 
----------+-----------------------------+-----------+----------+-------------
 did      | integer                     |           | plain    | 
 state    | smallint                    |           | plain    | 
 crt_time | timestamp without time zone |           | plain    | 
 mod_time | timestamp without time zone |           | plain    | 
 aid      | integer                     |           | plain    | 
 path     | text                        |           | extended | 
 cid      | integer                     |           | plain    | 
 bid      | integer                     |           | plain    | 
Child tables: log2_1_prt_1,
              log2_1_prt_10,
              log2_1_prt_11,
              log2_1_prt_12,
              log2_1_prt_2,
              log2_1_prt_3,
              log2_1_prt_4,
              log2_1_prt_5,
              log2_1_prt_6,
              log2_1_prt_7,
              log2_1_prt_8,
              log2_1_prt_9
Has OIDs: no
Distributed by: (did)
```
2\. 使用SQL查看   
```
postgres=# select pg_get_partition_def('postgres.log2'::regclass,true);
                                                                  pg_get_partition_def                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------
 PARTITION BY RANGE(crt_time)                                                                                                                            
           (                                                                                                                                             
           START ('2017-01-01 00:00:00'::timestamp without time zone) END ('2018-01-01 00:00:00'::timestamp without time zone) EVERY ('1 mon'::interval) 
           )
(1 row)
```
## 小结  
* 分布列选择法则  
  原则，避免短板效应。    
  法则1，分布列尽量选择需要经常JOIN的列，这类查询的并发越高，越应该考虑。  
  法则2，尽量选择分布均匀的列，或者多列  
  法则3，尽量选择高并发查询的条件列（指该查询条件产生的中间结果集小的，如果中间结果集很大，那就让所有节点都来参与运算更好，因此不选），如果有多个条件，请先权衡前面的法则  
  法则4，不要轻易使用随机分布  
* 分区法则  
  原则，缩小查询范围。    
  法则1，尽量选择和查询条件相关的字段，缩小QUERY需要扫描的数据  
  法则2，当有多个查询条件时，可以使用子分区，进一步缩小需要扫描的数据  
## 参考  
《阿里云ApsaraDB RDS用户 - OLAP最佳实践》    
https://yq.aliyun.com/articles/57778    
《Greenplum资源隔离指南》    
https://yq.aliyun.com/articles/57763    
《三张图读懂Greenplum在企业的正确使用姿势》    
https://yq.aliyun.com/articles/57736    
《Greenplum 公测申请页面》    