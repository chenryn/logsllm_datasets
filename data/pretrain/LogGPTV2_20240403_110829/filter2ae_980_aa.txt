推荐阅读时间：60min
全文字数：14026
## 前言
其实从一开始就是想着学一下fastjson组件的反序列化。结果发现完全理解不能。
就先一路补了很多其他知识点，RMI反序列化，JNDI注入，7u21链等（就是之前的文章），之后也是拖了很长时间，花了很长时间，总算把这篇一开始就想写的文，给补完了。
类似的文是已经有了不少，学习也是基于前辈们的文章一步步走来，但是个人习惯于把所有问题理清楚，讲清楚。理应是把大佬们的文要细致些。
本文需要前置知识：JNDI注入，7u21利用链，可以戳我往期的文章。
> 由于先知的waf拦截，全文 @type 替换为 被屏蔽的type
文章内容如下：
  1. fastjson组件基础介绍及使用（三种反序列化形式等）
  2. fastjson组件的 **被屏蔽的type标识** 的特性说明（默认调用setter、getter方法条件等）。
  3. 分析了fastjson组件 **1.2.24版本** 中JNDI注入利用链与setter参数巧妙完美适配（前置知识参考JNDI注入一文）
  4. 分析了fastjson组件 **1.2.24版本** 中JDK1.7TemplatesImpl利用链的漏洞触发点poc构造（前置知识参考7u21一文）
  5. 分析了1.2.24-1.2.46版本每个版本迭代中修改代码，修复思路和绕过。（此时由于默认白名单的引入，漏洞危害大降）
  6. 到了1.2.47通杀黑白名单漏洞，因为网上对于这个分析文有点过多。这边想着直接正向来没得意思。尝试从代码审计漏洞挖掘的角度去从零开始挖掘出这一条利用链。最后发现产生了一种我上我也行的错觉（当然实际上只是一种错觉，不可避免受到了已有payload的引导，但是经过分析也算是不会对大佬的0day产生一种畏惧心理，看完也是可以理解的）最后再看了下修复。
本文实验代码均上传[github](https://github.com/lalajun/Fastjson_Deserialize)，那么想要好好学习的小伙伴请打开idea，配合食用。
## fastjson组件
fastjson组件是阿里巴巴开发的反序列化与序列化组件，具体细节可以参考[github文档](https://github.com/alibaba/fastjson/wiki/Quick-Start-CN)
组件api使用方法也很简洁
    //序列化
    String text = JSON.toJSONString(obj); 
    //反序列化
    VO vo = JSON.parse(); //解析为JSONObject类型或者JSONArray类型
    VO vo = JSON.parseObject("{...}"); //JSON文本解析成JSONObject类型
    VO vo = JSON.parseObject("{...}", VO.class); //JSON文本解析成VO.class类
我们通过demo来使用一下这个组件
以下使用测试均是基于1.2.24版本的fastjson jar包
靶机搭建需要存在漏洞的jar包，但是在github上通常会下架存在漏洞的jar包。
我们可以从[maven仓库](https://mvnrepository.com/artifact/com.alibaba/fastjson/1.2.24)中找到所有版本jar包,方便漏洞复现。
### fastjson组件使用
先构建需要序列化的User类：  
`User.java`
    package com.fastjson;
    public class User {
        private String name;
        private int age;
        public String getName() {
            return name;
        }
        public void setName(String name) {
            this.name = name;
        }
        public int getAge() {
            return age;
        }
        public void setAge(int age) {
            this.age = age;
        }
    }
再使用fastjson组件
    package com.fastjson;
    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.serializer.SerializerFeature;
    public class Main {
        public static void main(String[] args) {
            //创建一个用于实验的user类
            User user1 = new User();
            user1.setName("lala");
            user1.setAge(11);
            //序列化
            String serializedStr = JSON.toJSONString(user1);
            System.out.println("serializedStr="+serializedStr);
            //通过parse方法进行反序列化，返回的是一个JSONObject
            Object obj1 = JSON.parse(serializedStr);
            System.out.println("parse反序列化对象名称:"+obj1.getClass().getName());
            System.out.println("parse反序列化："+obj1);
            //通过parseObject,不指定类，返回的是一个JSONObject
            Object obj2 = JSON.parseObject(serializedStr);
            System.out.println("parseObject反序列化对象名称:"+obj2.getClass().getName());
            System.out.println("parseObject反序列化:"+obj2);
            //通过parseObject,指定类后返回的是一个相应的类对象
            Object obj3 = JSON.parseObject(serializedStr,User.class);
            System.out.println("parseObject反序列化对象名称:"+obj3.getClass().getName());
            System.out.println("parseObject反序列化:"+obj3);
        }
    }
以上使用了三种形式反序列化  
结果如下：
    //序列化
    serializedStr={"age":11,"name":"lala"}
    //parse({..})反序列化
    parse反序列化对象名称:com.alibaba.fastjson.JSONObject
    parse反序列化：{"name":"lala","age":11}
    //parseObject({..})反序列化
    parseObject反序列化对象名称:com.alibaba.fastjson.JSONObject
    parseObject反序列化:{"name":"lala","age":11}
    //parseObject({},class)反序列化
    parseObject反序列化对象名称:com.fastjson.User
    parseObject反序列化:com.fastjson.User@3d71d552
parseObject({..})其实就是parse({..})的一个封装，对于parse的结果进行一次结果判定然后转化为JSONOBject类型。
    public static JSONObject parseObject(String text) {
            Object obj = parse(text);
            return obj instanceof JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);
        }
而parseObject({},class)好像会调用class加载器进行类型转化，但这个细节不是关键，就不研究了
那么三种反序列化方式除了返回结果之外，还有啥区别？
在执行过程调用函数上有不同。
    package com.fastjson;
    import com.alibaba.fastjson.JSON;
    import java.io.IOException;
    public class FastJsonTest {
        public String name;
        public String age;
        public FastJsonTest() throws IOException {
        }
        public void setName(String test) {
            System.out.println("name setter called");
            this.name = test;
        }
        public String getName() {
            System.out.println("name getter called");
            return this.name;
        }
        public String getAge(){
            System.out.println("age getter called");
            return this.age;
        }
        public static void main(String[] args) {
            Object obj = JSON.parse("{\"被屏蔽的type\":\"com.fastjson.FastJsonTest\",\"name\":\"thisisname\", \"age\":\"thisisage\"}");
            System.out.println(obj);
            Object obj2 = JSON.parseObject("{\"被屏蔽的type\":\"com.fastjson.FastJsonTest\",\"name\":\"thisisname\", \"age\":\"thisisage\"}");
            System.out.println(obj2);
            Object obj3 = JSON.parseObject("{\"被屏蔽的type\":\"com.fastjson.FastJsonTest\",\"name\":\"thisisname\", \"age\":\"thisisage\"}",FastJsonTest.class);
            System.out.println(obj3);
        }
    }
结果如下：
    //JSON.parse("")
    name setter called
    com.fastjson.FastJsonTest@5a2e4553
    //JSON.parseObject("")
    name setter called
    age getter called
    name getter called
    {"name":"thisisname","age":"thisisage"}
    //JSON.parseObject("",class)
    name setter called
    com.fastjson.FastJsonTest@e2144e4
结论：
  * parse("") 会识别并调用目标类的特定 setter 方法及某些特定条件的 getter 方法
  * parseObject("") 会调用反序列化目标类的特定 setter 和 getter 方法（此处有的博客说是所有setter，个人测试返回String的setter是不行的，此处打个问号）
  * parseObject("",class) 会识别并调用目标类的特定 setter 方法及某些特定条件的 getter 方法
特定的setter和getter的调用都是在解析过程中的调用。（具体是哪些setter和getter会被调用，我们将在之后讲到）
之所以 **parseObject("")** 有区别就是因为 **parseObject("")** 比起其他方式多了一步 **toJSON**
操作，在这一步中会对所有getter进行调用。
### 被屏蔽的type
那么除开正常的序列化，反序列化。  
fastjson提供特殊字符段`被屏蔽的type`，这个字段可以指定反序列化任意类，并且会自动调用类中属性的特定的set，get方法。
我们先来看一下这个字段的使用:
    //@使用特定修饰符，写入被屏蔽的type序列化
    String serializedStr1 = JSON.toJSONString(user1,SerializerFeature.WriteClassName);
    System.out.println("serializedStr1="+serializedStr1);
    //通过parse方法进行反序列化
    Object obj4 = JSON.parse(serializedStr1);
    System.out.println("parse反序列化对象名称:"+obj4.getClass().getName());
    System.out.println("parseObject反序列化:"+obj4);
    //通过这种方式返回的是一个相应的类对象
    Object obj5 = JSON.parseObject(serializedStr1);
    System.out.println("parseObject反序列化对象名称:"+obj5.getClass().getName());
    System.out.println("parseObject反序列化:"+obj5);
    //序列化
    serializedStr1={"被屏蔽的type":"com.fastjson.User","age":11,"name":"lala"}
    //parse反序列化
    parse反序列化对象名称:com.fastjson.User
    parseObject反序列化:com.fastjson.User@1cf4f579
    //parseObject反序列化
    parseObject反序列化对象名称:com.alibaba.fastjson.JSONObject
    parseObject反序列化:{"name":"lala","age":11}
这边在调试的时候，可以看到，本该解析出来的被屏蔽的type都没有解析出来
以上我们可以知道当被屏蔽的type输入的时候会特殊解析（不然的话会有被屏蔽的type：com.fastjson.User的键值对），那么自动调用其特定的set，get方法怎么说呢？
我们先建立一个序列化实验用的Person类
`Person.java`
    package com.fastjson;
    import java.util.Properties;
    public class Person {
        //属性
        public String name;
        private String full_name;
        private int age;
        private Boolean sex;
        private Properties prop;
        //构造函数
        public Person(){
            System.out.println("Person构造函数");
        }
        //set
        public void setAge(int age){
            System.out.println("setAge()");
            this.age = age;
        }
        //get 返回Boolean
        public Boolean getSex(){
            System.out.println("getSex()");
            return this.sex;
        }
        //get 返回ProPerties
        public Properties getProp(){
            System.out.println("getProp()");
            return this.prop;