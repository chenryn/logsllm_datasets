private channels for our corruption threshold owing to the result
of [32]. Our protocol reduces to an honest-majority 3PC with GOD
in some cases. With the assumption of broadcast channel, our pro-
tocol takes 6 rounds when no 3PC is invoked and stretches up to
12 rounds when packed with the 3PC of [24] in the worst case.
The Construction. We achieve GOD by tackling abort scenarios
when parties are in conflict. Specifically, we eliminate a corrupt
party and transit to a smaller world of 3 parties with at most one
corruption to complete computation. We retain the setup of four
garblers {P1, P2, P3, P4} and P5 as the evaluator. On a high level, our
protocol starts with a robust input and (one-time) SD, followed by
garbling, transfer of GC, blinded inputs and corresponding super-
keys to P5 and concludes with GC evaluation by P5 and output
computation by all. The key technique to achieve robustness lies in
the use of tools: 4-party 2-private RSS and SD to ensure that each
phase of the protocol is robust against any malicious wrongdoing.
While using a passively-secure 4DG as the underlying building
block, there exist cases where it seems improbable to publicly iden-
tify a corrupt party due to the presence of 2 active corruptions.
Instead, when the adversary strikes, we establish and eliminate the
parties in conflict publicly (of which one is ensured to be corrupt)
and rely on the remaining parties with at most one corruption
to robustly compute the output. The essence of our protocol lies
in tackling the threats to input privacy and correctness that arise
during the transfer of masked inputs and corresponding super-keys.
To begin with, the input and seed distributions are robust. Each
input-share/seed is owned by a committee of 3 parties (as dictated
by RSS/seed-distribution). To ensure consistent distribution, we
force the dealer (of input-share/seed) to commit to the data publicly
and open privately rather than relying on private communication
alone. Parties who receive the same RSS share/seed cross-check
with each other to agree either on a publicly committed value or
a default value when no correct openings are dealt. The shares
distributed as per RSS in input distribution are now deemed as
parties’ new inputs and the circuit is augmented with XOR gates at
input level which take these shares as inputs. The formal protocols
for input and seed distribution appear in Fig. 12 and 13 respectively.
The techniques to identify a pair of conflicting parties (in order
to eliminate a corrupt party) differ based on the communication
being either public or private. Public data sent by a party involves
the transfer of: (a) GC partition wrt each seed owned by the party,
(b) shares of output wire masks wrt each seed owned by the party,
(c) shares of input wire masks wrt the seeds not owned by the wire
owner, (d) masked input values for the input-shares not owned by
the evaluator. Each of these values can be broadcasted by the 3
parties owning the respective seed (for cases (a)-(c)) or input-share
(for case (d)). Any mismatch in the 3 broadcasted copies leads to
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1583Inputs: Pi has input xi .
Notation: Tj , j ∈ [6] denotes the two size maximal unqualified subset
(|Tj | = 2) of the parties in the lexicographic order.
Output: Each party Pk ∈ Pi outputs (ci j , c′
i j)j∈[6], {(oil , (x il ⊕ ril)),
(o′
il , ril)}k(cid:60)Tl ∧l∈[6] where (cil , oil), (c′
il) denote the commitment
il , o′
and opening of the shares (x il ⊕ ril), ril respectively.
Primitives: A NICOM (Com, Open) (Appendix B), a 4-party 2-private
RSS.
R1: Pi does the following:
– shares its input as xi = ⊕j∈[6]x i j and a random input ri ∈ {0, 1} as
ri = ⊕j∈[6]ri j .
– samples ppi and for j ∈ [6], computes commitments on (x i j ⊕ ri j), ri j
as: (ci j , oi j) ← Com(ppi , (x i j ⊕ri j)) and (c′
i j) ← Com(ppi , ri j).
– broadcasts (ppi , ci j , c′
i j } privately to each Pl , l (cid:60) Tj .
Define Xi j to be the set of parties holding the shares x i j ⊕ ri j and ri j .
Pi by default belongs to every Xi j .
R2: For {ppi , (ci j , c′
i j } received from Pi , Pk sets the
opening to ⊥ when they are invalid and forwards (oi j , o′
i j) to Pl (cid:60) Tj .
Local computation by Pk : Pk resets its opening data on receiving valid
openings from fellow parties (if set to ⊥ earlier). If any opening still
remains ⊥, set agreed-upon default value of (x i j ⊕ ri j) and ri j .
i j)}j∈[6] and {oi j , o′
i j); sends {oi j , o′
i j , o′
Figure 12: Protocol inputGODi
Notation: S1 = {1, 3, 4}, S2 = {2, 3, 4}, S3 = {1, 2, 3}, S4 = {1, 2, 4}.
Output: Each party Pj , j ∈ Sд outputs sд.
R1: Pд chooses random seed sд ∈R {0, 1}κ , samples ppд and com-
putes (cд , oд) ← Com(ppд , sд). Pд broadcasts (ppд , cд) and sends oд
privately to each Pj , j ∈ Sд.
R2: If no oд received or Open(ppд , cд , oд) = ⊥, Pj sets oд =⊥. Pj
forwards oд to Pk , k ∈ Sд.
(Local Computation by Pj :) Accept oд
if
Open(ppд , cд , oд) (cid:44) ⊥ and the oд received earlier from Pд was
set to ⊥. If the opening still remains ⊥, agree on default seed sд.
by Pk ,
sent
Figure 13: Protocol seedGODд
election of a 3-party committee P3 that becomes the custodian for
completing computation. The primary reason for adopting broad-
cast in the above cases is to aid in unanimous agreement about the
conflicting parties. Else, if we rely on private communication alone,
an honest receiver may always receive mismatching copies and fail
to convince all honest parties about the wrongdoing. Further, input
privacy is preserved when masked input is broadcast in case (d) for
the shares not owned by evaluator (instead owned by 3 garblers),
since the adversary (corrupting the evaluator and one garbler) lacks
knowledge of one seed needed to learn the underlying input-share.
Private communication includes the transfer of super-key for
input wires wrt masked input shares to P5. The natural solution
is to have the garblers, owning the respective input share, send
keys privately to P5 corresponding to the seeds they own. The
private transfer alone, however, allows corrupt parties to send
incorrect keys which goes undetected by P5. We resolve this using
the standard trick of commit-then-open. All garblers publicly commit
to both keys on each input wire for the seeds they possess, where
any conflict is dealt as in the public message. The commitments wrt
each seed are generated by the three seed owners using randomness
derived from the same seed, turning public verification to plain
equality checking. When no public conflict arises, only the garblers
holding the actual input share send the relevant openings to P5.
Since each input-share is owned by at least two garblers (the other
may be the evaluator), they together hold all parts of the correct
super-key to be opened, hence all openings can be communicated.
However, this step may not be robust in case of a corrupt garbler
sending incorrect (or no) opening privately which can be realised
only by P5. In such case, P5 raises a conflict against the garbler who
sent a faulty opening and a 3-party set is identified for 3PC which
excludes P5 and the conflicting garbler.
Further, input consistency is threatened when the adversary gets
the output in the 5PC, yet makes the honest parties receive output
via 3PC which now needs to adhere to the inputs committed in
the outer 5PC protocol. This occurs when a corrupt P5 computes
the output, yet does not disclose to the garblers and the related
3PC instance invoked must ensure input consistency to bar the
adversary from learning multiple evaluations of f . This creates a
subtle issue when in the elected 3PC, only one party say Pα holds a
share xij (the other two owners of xij are eliminated). A potentially
corrupt Pα can use a different xij causing the 3PC to compute on
a different input xi of Pi than what was used in the 5PC, thus
obtaining multiple evaluations of f . Custom-made to the robust
3PC of [24], we tackle this having the RSS dealer Pi distribute
xij + rij and rij instead of just xij for each share in the input-
distribution phase. When a 3PC is invoked, the 3-parties who hold
opening of xij + rij and rij hand them over respectively to the two
parties in the 3PC who do not hold xij. With such a modification,
now each input share in the elected 3PC is either held by at least
two parties or by one party in which case it is XOR-shared between
the remaining two. This is in line with the 3PC of [24] that offers
consistency for inputs, either held by at least two parties or by one
party in which case it is XOR-shared between the remaining two.
In the 3PC of [24], two parties, say Pα , Pβ act as garblers and the
third party, say Pγ acts as an evaluator. The garblers use common
randomness to construct the same Yao’s GC [12] individually. Since
at most one party can be corrupt, a comparison of GCs received
from the garblers allows Pγ to conclude its correctness. For key
transfer, the garblers perform commitments on all keys for the
input wires in a permuted order and send openings for the shares
they own to Pγ . This suffices since, for an input share not held
by Pγ , it is available with both garblers and thus, Pγ can verify if
both the openings received for such a share are same. The use of
permutation here further ensures that Pγ does not learn the actual
value of the input key that she has the opening for. However, for
input shares held by Pγ , no permutation is used to allow Pγ to
verify if the correct opening has been received.
In 5PC, it is easy to check that the evaluator colluding with a
garbler can’t cheat with a wrong super-key for the output, as no
single garbler possesses all seeds. The AOT protocol, used in Garble,
is aptly modified to tackle conflicts and elect a 3PC instance (Fig. 7).
Our 3PC appears in Fig. 14. The main protocol appears in Fig. 15.
Optimizations. To improve efficiency, the garbling process is op-
timized similar to fair. When a conflict is identified prior to sending
of GC, election of 3PC instance and its execution are set in motion
immediately, thus enabling the protocol to terminate faster. To min-
imize the overhead of broadcast and make it independent of input,
output and circuit size, we replace each broadcast message m with
the collision-resistant hash of the message, H(m), while sending m
Session 7C: Secure Computing VCCS ’19, November 11–15, 2019, London, United Kingdom1584i j) for i ∈ [5], j ∈ [6] and (oil , o′
Inputs: Party Pk has (ci j , c′
il) for
i ∈ [5], l ∈ [6], k (cid:60) Tl .
Common Inputs: The circuit C(⊕j∈[6]x 1j , ⊕j∈[6]x 2j , ⊕j∈[6]x 3j ,
⊕j∈[6]x 4j , ⊕j∈[6]x 5j) that computes f (x1, x2, x3, x4, x5), each input,
their shares and output are from {0, 1}.
Notation: P3 = {Pα , Pβ , Pγ } is the chosen 3PC Committee.
Output: y = C(x1, x2, x3, x4, x5).
Input Setup for 3PC: For each x i j , if just one party, say Pα ∈ P3 ∩ Xi j ,
the following is done: every party in Xi j sends oi j for x i j ⊕ ri j and o′
i j
for ri j to Pβ and Pγ respectively, each of which in turn recovers the
respective share using one valid opening.
3PC Run: Run a robust 3PC [24] secure against one active corruption
with {Pα , Pβ } as garblers and Pγ as the evaluator.
– The input of each party is x i j / x i j ⊕ ri j / ri j . Pγ does not XOR-share
– Inside the 3PC, for inputs not known to Pγ , the garblers send com-
mitments on both keys in random permuted order with randomness
drawn from the common randomness of garblers. For other inputs,
the commitments are sent without permutation.
its input as in the protocol of [24].
– For x i j , not known to Pγ and held by both Pα , Pβ and on receiving
the opening for keys Pγ , checks if the opened keys are same from
both garblers. For x i j known to Pγ , it checks if they correspond to
bit x i j by checking whether x i j th commitment was opened or not.
– The case when all 3 parties hold x i j is subsumed in the above case.
– For x i j held by Pγ while x i j ⊕ ri j and ri j held by Pα and Pβ respec-
tively, Pγ (who knows x i j ⊕ r i j and ri j too) checks if the openings
obtained from Pα and Pβ indeed correspond to x i j ⊕ ri j and ri j
respectively. If so, he XORs the keys to obtain the key for x i j .
– For x i j held by Pα , while x i j ⊕ ri j held by Pβ and ri j held by Pγ ,
Pα sends key-openings wrt x i j + r i j , ri j and Pβ sends key-opening
wrt x i j ⊕ ri j . Pγ checks if the opening wrt ri j is correct and if the
opened keys wrt x i j ⊕ ri j (sent by Pα , Pβ ) are the same. If so, the
keys of r i j XORed with x i j ⊕ ri j top obtain key wrt x i j . Compute
similarly if x i j ⊕ ri j is held by Pγ .
Rest of 3PC is run with keys for all RSS shares x i j and the output of 3PC
is sent to each Pi ∈ P who outputs the majority of three y’s received.
Figure 14: Protocol god3PC
privately to the recipient. For instance, in DGC, H(GCi), i ∈ [4] is
broadcasted by parties who own GCi whereas, GCi is sent to P5
by one of the parties in Si privately. Similarly, for sending output
super-key, H(Y) is broadcasted by P5 and Y is sent via pairwise
channels and so on. With this optimization in broadcast, we elab-
orate how any conflict is resolved with the following examples
(all our broadcast messages fall under one of these examples): (1)
1, held by P1, P3, P4 due to SD.
Consider m as the GC fragment GC
Each of P1, P3, P4 broadcasts H(GC
1). If the hashes mismatch for
two parties say P1, P3, then god3PC is run with P2, P4, P5. Else, if
1
all the broadcast hashes are in agreement, then P1 will send GC
1
privately to P5. Now if P5 is honest and finds that the received GC
is not consistent with the hash that was successfully broadcasted
and agreed, then P5 broadcasts a conflict with P1 and a 3PC instance
with P2, P3, P4 is run. Else if P5 is corrupt and raises a false conflict
with P1, even then god3PC with P2, P3, P4 is run. In both cases, one
corrupt party is surely eliminated and god3PC contains at most one
1
corruption. (2) Let m be the mask share λ
w on output wire w that is
held by P1, P3, P4 due to SD. Each of P1, P3, P4 broadcasts H(λ
w). If
1
the hashes of say P1, P3 mismatch, then god3PC is formed amongst
the remaining parties, P2, P4, P5. Else, if all hashes are in agreement,
1
then P1, P3, P4 privately send λ
w to each party. We consider the re-
ceiver P2 for explanation. This step is robust since, if the hashes are
in agreement, there will always exist one valid pre-image among
the private messages received by P2. This is due to the presence of
one honest sender. Hence P2 uses this valid value for computation.
6.1 Properties
Lemma 6.1. An elected 3PC has at most one corruption.
Proof. We argue that a corrupt party is eliminated in a conflict.
Suppose Pi , Pj are in conflict. This could be due to either (i) mis-
match in the public message broadcast by Pi , Pj or (ii) one of Pi , Pj
raised a conflict against the other for an incorrect private message.
In case (i), each message is result of either robust input or seed
distribution and hence if both were honest, the broadcast messages
would be identical. In case (ii), each message involves an opening
for the commitments agreed on in public message and neither Pi
nor Pj would raise a conflict if valid opening was received. Also,
in both the above cases, each message is checked for correctness
before proceeding further and thus the conflict could not have been
the result of adversary’s doing in the previous steps. This implies
that at least one of Pi , Pj is corrupt. Thus, an elected 3PC in either
case would contain parties P3 = P \ {Pi , Pj}. Since one of Pi , Pj is
surely corrupt, at most one corrupt party can be present in P3. (cid:3)
Lemma 6.2. The output y computed in the god3PC instance corre-