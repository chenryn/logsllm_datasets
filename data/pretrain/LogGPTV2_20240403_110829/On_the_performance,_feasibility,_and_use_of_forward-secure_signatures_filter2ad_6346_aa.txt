title:On the performance, feasibility, and use of forward-secure signatures
author:Eric Cronin and
Sugih Jamin and
Tal Malkin and
Patrick D. McDaniel
On the Performance, Feasibility, and Use of
Forward-Secure Signatures
∗
Eric Cronin, Sugih Jamin
EECS Department
University of Michigan
Ann Arbor, MI 48109-2122
{ecronin,jamin}@eecs.umich.edu
†
Tal Malkin
Dept. of Computer Science
Columbia University
New York, NY 10027
PI:EMAIL
Patrick McDaniel
AT&T Labs–Research
Florham Park, NJ 07932
PI:EMAIL
ABSTRACT
Forward-secure signatures (FSSs) have recently received much at-
tention from the cryptographic theory community as a potentially
realistic way to mitigate many of the difﬁculties digital signatures
face with key exposure. However, no previous works have explored
the practical performance of these proposed constructions in real-
world applications, nor have they compared FSS to traditional, non-
forward-secure, signatures in a non-asymptotic way.
We present an empirical evaluation of several FSS schemes that
looks at the relative performance among different types of FSS as
well as between FSS and traditional signatures. Our study provides
the following contributions: ﬁrst, a new methodology for compar-
ing the performance of signature schemes, and second, a thorough
examination of the practical performance of FSS. We show that
for many cases the best FSS scheme has essentially identical per-
formance to traditional schemes, and even in the worst case is only
2-4 times slower. On the other hand, we also show that if the wrong
FSS conﬁguration is used, the performance can be orders of mag-
nitude slower. Our methodology provides a way to prevent such
misconﬁgurations, and we examine common applications of digi-
tal signatures using it.
We conclude that not only are forward-secure signatures a useful
theoretical construct as previous works have shown, but they are
also, when used correctly, a very practical solution to some of the
problems associated with key exposure in real-world applications.
Through our metrics and our reference implementation we provide
the tools necessary for developers to efﬁciently use FSS.
∗Sugih Jamin is supported in part by the NSF CAREER Award
ANI-9734145, the Presidential Early Career Award for Scientists
and Engineers (PECASE) 1998, and the Alfred P. Sloan Founda-
tion Research Fellowship 2001. Additional funding is provided by
AT&T Research, and by equipment grants from Sun Microsystems
Inc., Compaq Corp., and Apple Inc. Part of this research was done
when Sugih Jamin was at the University of Cambridge and the Uni-
versity of Tokyo.
†Part of this research was done while Tal Malkin was at AT&T
Labs–Research.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’03, October 27–31, 2003, Washington, DC, USA.
Copyright 2003 ACM 1-58113-738-9/03/0010 ...$5.00.
Categories and Subject Descriptors
E.3 [Data Encryption]: Public key cryptosystems
General Terms
Performance, Design, Security
Keywords
forward-secure signatures, digital signatures
1.
INTRODUCTION
The Key-Exposure Problem
Digital signatures play an essential role for security on the Internet.
Electronic commerce, private and authenticated communication,
and secure storage are but a few of the multitude of applications
that rely on signatures to assert authenticity, ownership, or delega-
tion. However, signature-based systems are very vulnerable to the
key exposure problem, which in practice is a far more likely cause
of compromise than cryptanalysis. Once a private key has been
exposed, not only are all future signatures associated with the com-
promised key suspect, but all past signatures as well, since there is
no secure way to tell that a signature was generated before or after
the compromise. All previous signatures must thus be indirectly re-
voked. The damage of these compromises can be enormous, both
in terms of overhead in revoking and reissuing all past signatures,
and in terms of the new security vulnerabilities introduced by the
possibility of repudiation.
For example, the compromise of a Certiﬁcate Authority’s (CA’s)
root private key results in all certiﬁcates from that CA being un-
veriﬁable until clients are updated with the new root public key,
not just new certiﬁcates signed by the replacement key. All ex-
isting certiﬁcates (signed public keys) must also be revoked and
re-certiﬁed with the new key, as there is no way to verify that they
were signed prior to the compromise. Where the root CA is popular
(e.g,. Verisign), the compromise could lead to widespread disrup-
tion of the Internet. The digital signing of legal contracts illustrates
another environment where the possibility of key exposure severely
weakens security. By purposely exposing their private key, a party
that wishes to back out of a contract gains the ability to repudiate
their previous signature at any time by claiming it to be forged.
As another example, consider an electronic checkbook application,
in which each check is created by the account holder signing an
amount, a recipient, and the date using the checkbook’s private
key. The recipient submits the check and signature to the account
holder’s bank, and the check is honored if the signature is deemed
valid. Here, if the private key is exposed, it is incumbent upon the
131bank and account holder to investigate and possibly repudiate every
check received by the bank, possibly even valid uncashed checks.
The above examples illustrate that limiting the effect of key ex-
posure should be afforded at least as much effort as prevention of
cryptanalysis. However, due to lack of useful counter-measures,
this design goal has not been widely embraced in existing systems.
Currently, the most widely used techniques to limit damage due to
key exposure are the use of short lived keys and centralized times-
tamping services. Neither of these solutions scales well: the former
requires many public keys to be certiﬁed, distributed, and main-
tained, while the latter requires a trusted third party who itself must
never be compromised in order for security to be maintained.
Forward-Secure Signatures and Applications
Forward-secure signatures (FSS), ﬁrst proposed by Anderson [2]
and formalized by Bellare and Miner [4], have recently emerged
as a promising viable mitigation technique for key exposure. FSS
differ from traditional signatures in that the private keys are peri-
odically updated via a one-way process that produces a new private
key corresponding to the same public key. The FSS construction
guarantees that once updated, past iterations of a private key cannot
be recovered from the new private key, implying that the exposure
of the current private key does not render past signatures suspect.
The key exposure problem is therefore mitigated by FSS schemes,
since any material that could be used to forge a past signature is
destroyed.1
FSS can potentially change the semantics of certiﬁcates and sig-
natures in a fundamental way, as we illustrate by revisiting some
of the examples above. Using a FSS-enabled CA, certiﬁcates are
signed using the (possibly one-time) private key, and only released
after the private key is updated. Hence, subsequent compromise of
the CA root key only affects those certiﬁcates issued at or after the
point of compromise. The amount of disruption is bounded by the
number of potentially compromised certiﬁcates, not by the num-
ber of certiﬁcates issued under the compromised key. For the elec-
tronic checkbook application, implemented with an FSS scheme, in
the event of a compromise the account holder tells the bank which
version of the private key was lost. Every prior signature could
be processed as normal, and signatures associated with current and
future private keys systematically voided. In this case compromise
prevents future use of the checkbook, but does not put past checks
under a cloud of suspicion.
Many other applications can potentially be enabled by FSS se-
mantics. For example, an application can limit the monetary amount
of data signed by a particular key. Once the cumulative value of
signed transactions meets a threshold, the singing key is updated.
This can be used as a one-time credit card (e.g., phone card). Bet-
ting slips, receipts, airline tickets, legal archives, and time-stamping
services can also beneﬁt from the use of FSS services.
One can view FSS as check-pointing a stream of signatures.
Whether a key is updated after every signature, once a day, or under
any other policy is a trade-off between performance (e.g., cost of
the update operation) and security (e.g., vulnerability to forgery).
Once an update has occurred, it is infeasible for previously check-
pointed signatures to later be forged. Assuming she conforms to
the algorithm, even the signer cannot forge past signatures. This
latter property may enable novel applications. For example, signer
forgery prevention mechanisms would be of great value in the re-
tention of legally binding documents (e.g., ofﬁcial billing records).
1This assumes that the update operation is able to permanently de-
stroy all copies of the old version of the key. This assumption is
provably necessary for any FSS method. Section 4.2.2 examines
the practical impact of this requirement.
Our Contributions
Forward-secure signatures are a strictly stronger cryptographic con-
struction than traditional signatures: they provide all the properties
of traditional signatures as well as the new forward-security prop-
erty to protect against key exposure. Due to this, it is expected
that once implemented there will be some (possibly signiﬁcant)
decrease in performance for FSS compared to traditional signa-
tures. Previous studies of forward-secure signatures have evalu-
ated the design and asymptotic performance of these cryptographic
constructions, but have not considered their practical application.
This paper develops an understanding of the real world perfor-
mance characteristics through a comprehensive empirical study of
forward-secure signatures.
One of the challenges of performing this type of study is the lack
of systematic metrics for evaluating the inherent tradeoffs of sig-
nature systems. Instead of simply looking at individual operation
costs in our study, as one of the contributions of this work we de-
velop an evaluation metric in which operation costs are amortized
based on expected use over the lifetime of the key(s). We believe
this new usage-based metric is more robust because it encompasses
the application and environment, not just cycle consumption of ba-
sic operations.
Using this metric we perform an empirical study of the perfor-
mance of several forward-secure signature schemes. Our study re-
veals several notable results pertaining to the performance of these
schemes, and of traditional non-forward-secure signature schemes
as well. We begin with an example result that highlights the ability
of our methodology to capture many different applications and en-
vironments in its analysis. When using traditional signature schemes,
there is a somewhat common belief that, due to very efﬁcient ver-
iﬁcation, RSA [34] is the best algorithm to use in all situations.
Our analysis dispels this belief, showing that while for many ap-
plications this is true, and RSA is up to fourteen times faster than
other algorithms, it is not always true. For other environments,
which we show later represent real-world applications, RSA per-
forms up to twenty-four times slower than another signature al-
gorithm, ECDSA [3]. The metric allows us to not only see which
algorithm is most efﬁcient at a particular point, but also to visualize
performance over the entire space of environments.
The primary result of our study, and a major contribution of this
paper, is an accurate view of the performance characteristics of dif-
ferent forward-secure signature constructions and parameters for
different applications. We show that no single construction per-
forms well in all situations, and that knowing the performance char-
acteristics of different schemes is critical in avoiding potentially
enormous overheads. Our results show that for many applications
the overhead of FSS over traditional signature schemes (using the
optimal schemes of each type for the application) is usually near
zero, and even in the worst case is between a factor of two and four.
We also show that the optimal scheme is application dependent: the
optimal conﬁguration for one application can be several orders of
magnitude worse than other conﬁgurations for other applications.
Finally, another contribution of this work is the reference imple-
mentation of forward-secure signature schemes used in our study.
This library uses the common OpenSSL [36] cryptographic library
and provides an API closely based on OpenSSL’s own API for non-
forward-secure signatures.
It utilizes all base signature schemes
provided by OpenSSL and currently contains ﬁve forward-secure
schemes. This library will be released under an open-source license
and available for download by anyone interested in incorporating
forward-secure signatures in their applications.
An outline for the remainder of the paper follows. In the next
section we overview of FSS schemes and their theoretical (asymp-
totic) performance characteristics. We then present our empirical
study in the following section, exploring the actual performance of
these schemes. Section 4 describes the reference implementation of
FSS used in our study, as well as several unexpected issues which
arose during its development. Finally, we conclude and summarize
our ﬁndings and present ideas on future work.
2. FORWARD-SECURE SIGNATURES
In this section we survey known forward-secure signature meth-
ods, together with their salient security and efﬁciency properties,
as theoretically analyzed by the authors of each method. We par-
ticularly focus on the schemes that will be evaluated in this work,
which include most of the best methods known to date. Finally, we
touch upon other related work.
2.1 Some Simple Solutions
obtaining T secret/public key
Consider the following trivial forward-secure signature scheme,
with a parameter T denoting the total number of time periods over
which the scheme is supposed to operate. Starting from any stan-
dard signature scheme as a base, the signer runs the key generation
protocol T times,
pairs
(sk1, pk1), . . . , (skT , pkT ). The public key is now set to P K =
(pk1, . . . , pkT ), while the secret key (for the ﬁrst time period) con-
sists of SK1 = (sk1, . . . , skT ). For each time period 1 ≤ j ≤ T ,
signing and verifying are performed using the base scheme relative
to the secret key skj (for signing) and public key pkj (for verify-
ing). To update from time period j to j +1, the signer simply erases
the key skj (which is no longer necessary).
Clearly, this scheme is secure as long as the underlying standard
signature scheme is. Signature and veriﬁcation time, as well as