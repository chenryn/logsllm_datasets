title:A Failure to Learn from the Past
author:Eugene H. Spafford
A Failure to Learn from the Past∗
Eugene H. Spafford
Purdue University CERIAS
656 Oval Drive
West Lafayette, IN 47907–2086
Abstract
On the evening of 2 November 1988, someone “infected”
the Internet with a worm program. That program exploited
ﬂaws in utility programs in systems based on BSD-derived
versions of UNIX. The ﬂaws allowed the program to break
into those machines and copy itself, thus infecting those sys-
tems. This program eventually spread to thousands of ma-
chines, and disrupted normal activities and Internet con-
nectivity for many days. It was the ﬁrst major network-wide
attack on computer systems, and thus was a matter of con-
siderable interest.
This paper provides a brief chronology of both the spread
and eradication of the program, a presentation about how
the program worked, and details of the aftermath. That is
followed by discussion of some observations of what has
happened in the years since that incident. The discussion
supports the title of this paper — that the community has
failed to learn from the past.
1. Introduction
In October of 1988, Mark Lottor made a presentation at
the Internet Engineering Task Force Meeting in Ann Arbor,
Michigan where he stated that the number of hosts on the
Internet was approximately 60,000. A few weeks later, on
the evening of 2 November 1988, these machines came un-
der attack from within. Sometime after 5 PM EST, a pro-
gram was executed on one or more of those hosts. That pro-
gram collected host, network, and user information, then
used that information to establish network connections to
break into other machines using ﬂaws present in those sys-
tems’ software. After compromising those systems, the pro-
gram would replicate itself and the replica would attempt to
spread to other systems in the same manner.
∗
Portions of this paper were taken from [21] and [22]. Readers are di-
rected to those documents for additional details.
Although the program would only spread to Sun Mi-
crosystems Sun 3 systems, and Digital Equipment Corpo-
ration VAX computers running variants of version 4 BSD
UNIX, the program multiplied quickly, as did the confu-
sion and consternation of system administrators and users
as they discovered that their systems had been invaded. Al-
though UNIX was known at that time to have some secu-
rity weaknesses (cf. [12, 15, 17, 18]), especially in its usual
mode of operation in open research environments, the scope
of the break-ins nonetheless came as a great surprise to al-
most everyone.
Prior to this incident no similar malicious software had
been widely seen. Few people had heard of computer worms
or viruses, thus making the incident all the more surprising.
As a result, the program was mysterious to users at sites
where it appeared. Unusual ﬁles were left in the scratch
(/usr/tmp) directories of some machines, and strange
messages appeared in the log ﬁles of some of the utilities,
such as the sendmail mail handling agent[2]. The most
noticeable effect, however, was that systems became more
and more loaded with running processes as they became re-
peatedly infected. As time went on, some of these machines
became so loaded that they were unable to continue any pro-
cessing; some machines failed completely when their swap
space or process tables were exhausted. Based on some es-
timates of the spread of the Worm, 3000–6000 (5%–10%)
machines were affected at the height of the attack.
By early Thursday morning, November 3, personnel at
many sites around the country had “captured” copies of the
program and begun to analyze it. A common fear was that
the program was somehow tampering with system resources
in a way that could not be readily detected — that while a
cure was being sought, system ﬁles were being altered or in-
formation destroyed. By 5 AM EST Thursday morning, less
than 12 hours after the program was ﬁrst discovered on the
network, the Computer Systems Research Group at Berke-
ley had developed an interim set of steps to halt its spread.
This included a preliminary patch to the sendmail mail
agent, and the suggestion to rename one or both of the C
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
compiler and loader to prevent their use. These suggestions
were published in mailing lists and on the Usenet network
news system, although their spread was hampered by sys-
tems disconnected from the Internet in an attempt to “quar-
antine” them.
By about 9 PM EST Thursday, another simple, effective
method of stopping the invading program, without altering
system utilities, was discovered at Purdue and also widely
published. Software patches were posted by the Berkeley
group at the same time to mend all the ﬂaws that enabled
the program to invade systems. All that remained was to an-
alyze the code that caused the problems and discover who
had unleashed the worm — and why.
In the weeks that followed, other well-publicized com-
puter break-ins occurred and many debates began about
how to deal with the individuals staging these break-ins,
who is responsible for security and software updates, and
the future roles of networks and security. In my papers in
1989 I predicted that it would be some time before these is-
sues were put to rest; it is unfortunate that 15 years later we
are still debating some of the same issues, and facing many
of the same problems.
2. Terminology
Initially, there was considerable variation in the names
applied to the malware unleashed on November 2nd. Many
people used the term worm instead of virus based on its be-
havior. Members of the press used the term virus, possibly
because their experience prior to that incident was only with
viruses. That usage was reinforced by quotes from computer
managers and programmers also unfamiliar with the differ-
ence. However, with time, the general consensus of the se-
curity community has been to consider the program as a
worm program, and hence its name as the Internet Worm.
In [22] I proposed some terminology for malware that
was then further expanded in [25] and [24]. This termi-
nology has largely been adopted, but still lacks neces-
sary precision. Recent incidents of malware show some
of the shortcomings of these earlier deﬁnitions: the Slam-
mer/Sapphire program of January 2003 was clearly a worm,
but ILOVEYOU (May 2000) and Blaster (August 2003) re-
quired manual execution to activate, and thus were more in
the nature of Trojan Horse programs. All of these have been
referred to as “viruses” by the popular press and many se-
curity companies.
The deﬁnitions I used in 1989 were as follows. A worm is
a program that can run independently and can propagate a
fully working version of itself to other machines. It is de-
rived from the word tapeworm, a parasitic organism that
lives inside a host and uses its resources to maintain itself.
A virus is a piece of code that adds itself to other pro-
grams, including operating systems. It cannot run indepen-
dently — it requires that its “host” program be run to ac-
tivate it. As such, it has an analog to biological viruses —
those viruses are not considered alive in the usual sense; in-
stead, they invade host cells and corrupt them, causing them
to produce new viruses.
2.1. Worms
The concept of a worm program that spreads itself from
machine to machine was apparently ﬁrst described by John
Brunner in 1975 in his classic science ﬁction novel The
Shockwave Rider.[4] He called these programs tapeworms
that existed “inside” the computers and spread themselves
to other machines. In the late 1970s, researchers at Xerox
PARC built and experimented with worm programs. They
reported their experiences in 1982 in [20], and cited Brun-
ner as the inspiration for the name worm. Although not the
ﬁrst self-replicating programs to run in a network environ-
ment, these were the ﬁrst such programs to be called worms.
The worms built at PARC were designed to do useful
work in a distributed environment of cooperating machines
. Because of this, some people preferred to call the Inter-
net Worm a virus because it was destructive, and they con-
sidered worms to be non-destructive.
2.2. Virus
The ﬁrst use of the term virus to refer to unwanted com-
puter code was by Gregory Benford. As related by Dr.
Benford1, he published the idea of a virus in 1970 in the
May issue of VENTURE MAGAZINE. His article speciﬁ-
cally termed the idea “computer virus” and described a pro-
gram named Virus — and tied this to the sale of a program
called Vaccine to defeat it. All this came from his expe-
rience as a programmer and research physicist at the (then)
Lawrence Radiation Lab in Livermore. He and the other sci-
entists noticed that “bad code” could self-reproduce among
lab computers, and eventually get onto the ARPANet. He
tried writing and launching some and they succeeded with
surprising ease. Professor Benford’s friend, the science ﬁc-
tion author David Gerrold, later incorporated this idea into
a series of short stories about the G.O.D. machine in the
early 1970s that were later merged into a novel in 1972:
When Harlie Was One.[11] The description of virus in that
book does not quite ﬁt the currently-accepted, popular deﬁ-
nition of computer virus — a program that alters other pro-
grams to include a copy of itself.
Fred Cohen formally deﬁned the term computer virus
in 1983.[5] At that time, Cohen was a graduate student at
the University of Southern California attending a security
1
In private communication with this author, and later in a letter to the
editor of the NY Times in Decemer of 1994.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
seminar. Something discussed in class inspired him to think
about self-reproducing code. He put together a simple ex-
ample that he demonstrated to the class. His advisor, Pro-
fessor Len Adleman, suggested that he call his creation a
computer virus. Dr. Cohen’s Ph.D. thesis and later research
were devoted to computer viruses.
Dr. Cohen deﬁned the term to mean a security problem
that attaches itself to other code and turns it into something
that produces viruses; to quote from his paper: “We deﬁne
a computer ‘virus’ as a program that can infect other pro-
grams by modifying them to include a possibly evolved
copy of itself.” He claimed the ﬁrst computer virus was
“born” on November 3, 1983, written by himself for a secu-
rity seminar course. (That the Internet Worm was unleased
on the eve of the 5th anniversary of this event was coin-
cidence of a most amazing sort.) Actual computer viruses
were being written by individuals before Cohen, although
not named such, as early as 1980 on Apple II computers.[9]
The ﬁrst few viruses were not circulated outside of a small
population, with the notable exception of the “Elk Cloner”
virus for Apple II computers, released in 1981.
2.3. Other Notable Deﬁnitions
In their widely circulated paper,[7] Eichin and Rochlis
chose to call the November 2nd program a virus. Their rea-
soning for this required reference to biological literature and
observing distinctions between lytic viruses and lysogenic
viruses. It further required that we view the Internet as a
whole to be the infected host.
Their explanation merely serves to underscore the dan-
gers of co-opting terms from another discipline to describe
phenomena within our own (computing). The original def-
initions may be much more complex than we originally
imagine, and attempts to maintain and justify the analo-
gies may require a considerable effort. Here, it may also
require an advanced degree in the biological sciences! Al-
though Eichin and Rochlis presented a reasoned argument
for a more precise analogy to biological viruses, it was too
complex a distinction to be useful to computer scientists and
was not adopted.
Cohen (and others, including Len Adleman[1]) have at-
tempted formal deﬁnitions of computer virus, none have
gained widespread acceptance or use. This is a result of the
difﬁculty in deﬁning precisely the characteristics of what a
virus is and is not. Cohen’s formal deﬁnition includes any
programs capable of self-reproduction. Thus, by his deﬁ-
nition, programs such as compilers and editors would be
classed as “viruses.”
Stubbs and Hoffman quoted a deﬁnition by John In-
glis that captures the generally accepted view of computer
viruses:
“He deﬁnes a virus as a piece of code with two
characteristics:
1. At least a partially automated capability to re-
produce.
2. A method of transfer which is dependent on
its ability to attach itself to other computer enti-
ties (programs, disk sectors, data ﬁles, etc.) that
move between these systems.”[27, p. 145]
Several other interesting deﬁnitions are discussed in [13,
Chapter 1].
3. How the Worm Operated
The Worm took advantage of ﬂaws in standard software
installed on many UNIX systems of the time. It also took ad-
vantage of a mechanism used to simplify the sharing of re-
sources in local area networks. Those ﬂaws are described
here, along with some related problems. Following is a de-
scription of how the Worm used the ﬂaws to invade systems.
3.1. ﬁngerd and gets
The finger program was a utility that allowed users
to obtain information about other users. It was usually used
to identify the full name or login name of a user, whether
a user was currently logged in, and possibly other informa-
tion about the person such as telephone numbers where he
or she could be reached. The fingerd server program was
intended to run as a daemon background process, to service
remote requests using the ﬁnger protocol. This daemon pro-
gram accepted connections from remote programs, read a
single line of input, and then sent back output matching the
received request.
The bug exploited to break fingerd involved overrun-
ning the buffer the daemon used for input. The standard C
language I/O library has a few routines that read input with-
out checking for bounds on the buffer involved. In particu-
lar, the gets call takes input to a buffer without doing any
bounds checking; this was the call exploited by the Worm.
The input overran the buffer allocated for it and rewrote the
stack frame, thus altering the behavior of the program.
The gets routine is not the only routine with this ﬂaw.
There is a whole family of routines in the C library that may
also overrun buffers when decoding input or formatting out-
put unless the user explicitly speciﬁes limits on the number
of characters to be converted. Although experienced C pro-
grammers are aware of the problems with these routines,
many continue to use them. Worse, their format is in some
sense codiﬁed not only by historical inclusion in UNIX and
the C language, but more formally in the ANSI language
standard for C. As a result, there have been hundreds of
buffer overﬂow vulnerabilities written and discovered in the
last 15 years.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:48:07 UTC from IEEE Xplore.  Restrictions apply. 
3.2. Sendmail
The sendmail program was (and still is) a mailer de-
signed to route mail in a heterogeneous internetwork. The
program operated in several modes, but the one exploited
by the Worm involved the mailer operating as a daemon
(background) process. In this mode, the program was lis-
tening on TCP port #25 for attempts to deliver mail using
the standard Internet protocol, SMTP (Simple Mail Trans-
fer Protocol). When such an attempt was detected, the dae-
mon entered into a dialog with the remote mailer to deter-
mine sender, recipient, delivery instructions, and message
contents.
The bug exploited in sendmail had to do with functional-
ity provided by a debugging option in the code. The Worm
would issue the DEBUG command to sendmail and then
specify the recipient of the message as a set of commands
instead of a user address. In normal operation, this was not
allowed, but it was present in the debugging code to al-
low testers to verify that mail was arriving at a particular