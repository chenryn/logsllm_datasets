### Summary of Runtimes for Micro Benchmarks in Microseconds (μs) per Single Invocation

| Method                | Without SM  | Orig. Mod.  | Overhead   |
|-----------------------|-------------|-------------|------------|
| `getContextClassLoader` | 11          | 19          | 8          |
| `getFields`            | 11          | 12          | 1          |
| `getParent`            | 11          | 12          | 1          |
| `getClassLoader`       | 17          | 219,792     | 219,775    |
| `getSystemClassLoader` | 668,000     | 36,696      | -631,304   |
| **Average**            | 80,602      | 967,227     | 886,625    |
| **Median**             | 14          | 24          | 10         |

### Analysis and Observations

- The methods `getParent`, `getContextClassLoader`, `getClassLoader`, and `getSystemClassLoader` exhibit significant overheads. For instance, the original execution time for `getClassLoader` was 17 μs, but it increased to 219,792 μs in the modified version.
- The remaining 30 methods show overheads ranging from 0.2 μs to 4 μs.
- The two outliers, `getClassLoader` and `getSystemClassLoader`, are the same methods that showed the largest absolute overhead without the security manager.
- The longest running method before and after transformation is `getSystemClassLoader`, with a runtime of 79.15 μs in the original OpenJDK and 99.65 μs in the modified OpenJDK.
- With the security manager in place, the average runtime increases from 3.80 μs to 6.18 μs per single method call, resulting in an average overhead of 2.38 μs.
- The median runtime increases from 0.45 μs to 2.05 μs per single method call, with a median overhead of 1.17 μs.
- None of the methods under investigation became faster through our modifications when the security manager is in place.

### Impact on Real-World Applications

- In isolation, the modified methods show a measurable performance penalty. However, these penalties are very small in absolute terms and do not significantly influence the runtimes of real-world applications such as the DaCapo benchmarks.

### Adjusting Security Policies

- Privileges gained through shortcuts are hard-wired into the Java Class Library (JCL). Removing shortcuts will cause permission checks to be executed, requiring permissions that were not needed before.
- Legacy applications may need adjustments to their security policies when upgrading to a shortcut-free platform. This can be done manually through code reviews and dynamic testing or automatically using static analysis.
- Not all legacy applications are affected. No changes are required for applications that do not call shortcut-containing methods, call them in a way that does not trigger a shortcut, have already been granted all required permissions, or run without a security manager.

### Reason for Lack of Performance Effects

- The positive performance results can be explained by the fact that the calls to `doPrivileged` introduced by the proposed hardening have a similar effect to shortcuts. At runtime, they cause the stack walk to terminate early, reducing the number of stack frames that permission checks must traverse and avoiding a performance penalty.

### Productive Use and Further Research

- Our proposed solution is functional and comprehensive, allowing for the execution of legacy applications while avoiding the dangers of implicit privilege elevation.
- Implementing the solution for productive use requires reconsideration of:
  1. Adjusting security policies for legacy applications.
  2. Reworking Java’s standard permissions to provide more fine-grained access control.

### Example: `Class.getDeclaredFields`

- A shortcut in `Class.getDeclaredFields` skips a permission check to access fields of classes loaded with the same class loader. After removing this shortcut, the permission check will always be executed, and callers will require `RuntimePermission 'accessDeclaredMembers'`.
- Granting this permission provides more privileges than the original shortcut implementation, as it allows callers to access fields of arbitrary classes, including private members.
- This is an issue because some standard permissions are too coarse-grained, allowing only on/off decisions for reflective access.

### Redesign of Java’s Standard Permissions

- We argue that a thorough redesign of Java’s standard permissions is both possible and required. This task needs to consider technical, organizational, and human factors.
- The new permission model should support fine-grained access-control decisions, adhere to the principle of least privilege, and be easy to use without wasting performance.
- Future research should focus on developing a flexible and usable permission model for existing applications.

### Lessons Learned

- Explicit privilege elevation through constructs like `doPrivileged` aids in protecting privileges by elevating them temporarily and within a given lexical scope.
- Consistency between the security model and its implementation is crucial. Deviations, such as the use of shortcuts, increase the attack surface.
- It should be a common practice to readjust and reevaluate a security model if strictly implementing it as prescribed is not feasible.