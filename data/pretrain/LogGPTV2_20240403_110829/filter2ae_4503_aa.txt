作者：安比实验室  
公众号：[安比实验室SECBIT](https://mp.weixin.qq.com/s/DGETYw0Kfc6cCkzLPSh1eQ
"安比实验室SECBIT")
安比(SECBIT)实验室近期发出预警，一种新型蜜罐(诈骗)合约正在泛滥，利用区块链浏览器的相关局限，设置陷阱欺骗游戏参与者，且诈骗目标多为具备一定区块链专业素养的人员。据安比(SECBIT)实验室统计数据显示，同类合约的数量高达48个，其中一个合约部署于
3 天前，已有玩家受骗的合约超过21份，累计骗取金额超过 25 ETH。
前几天，小安比从 p0n1 大神那里听说了一种新型的蜜罐(诈骗)合约，同类蜜罐合约竟有 48 个，而其中近一半的合约已经成功骗取玩家的 ETH，据说连
QSP 团队的安全大神 Martin Derka 也未能幸免。这不禁激发起了小安比浓浓的好奇心。
### 一、骗局缩影：安全专家被套路
Martin Derka 所参与的这个名为 QUESTION 的合约，是一款猜答案游戏合约。
合约地址：0xcEA86636608BaCB632DfD1606A0dC1728b625387
合约游戏的规则很简单：
  * 合约创建者会设置一个问题;
  * 任何玩家都可以通过向合约打入不低于 1ETH 的手续费参与作答;
  * 若猜中答案，将得到合约里所有的 ETH 作为奖励;
  * 若猜不中，无任何奖励，且事先支付的 ETH 会转入该合约
合约的巧妙设计会为高阶玩家埋下一些陷阱，让玩家自认为通过Etherscan中的交易数据可以获知答案，然后不声不响地就赚取ETH。而实际上恰恰是螳螂捕蝉、黄雀在后，合约创建者让你边窃喜边发现的答案是错误答案，技术帝们凭借其“机智”最终不仅赚不到合约中的ETH，还会赔光预先缴纳的手续费。
此外，根据QUESTION合约中的特殊权限设置，问题提出者可随时取走合约中的所有ETH。因此，上述玩家参与游戏时支付的ETH能被迅速提取和套利。
作为安比(SECBIT)实验室的资深砖家，接下来小安比将以 QUESTION 合约为例向大家讲解该类蜜罐合约的诈骗细节。
### 二、巧妙埋坑：游戏合约的设计
从 QUESTION 合约源码看，游戏创建者设置问题和答案，启动游戏，任何人皆可以玩家身份参与游戏，转入不低于1 ETH
的手续费猜答案，猜中者将收获合约中所有的 ETH，猜不中手续费自动打入合约地址。
合约源码中包含了五个接口，启动游戏，玩家猜答案，终止游戏，更新问题以及空的回落函数。
#### 启动游戏
由问题提出者启动游戏（`StartGame()`），设置问题和答案，传入的答案以哈希的形式保存在合约中。而游戏启动仅第一次操作有效。
    function StartGame(string _question,string _response)
        public
        payable
        {
            if(responseHash==0x0)
            {
                responseHash = keccak256(_response);
                question = _question;
                questionSender = msg.sender;
            }
        }
#### 玩家猜答案
任何人都可以调用`Play()`接口，参与到游戏当中猜问题的答案，游戏玩家需要支付 1 ETH
以上的费用，否则即使猜中了也不会得到奖励；若玩家猜测失败，则无法获取任何奖励，并且支付的 ETH 也会转入合约中。最终猜中结果的玩家将得到合约中所有的
ETH 作为奖励。
    function Play(string _response)
        external
        payable
        {
            require(msg.sender == tx.origin);
            if(responseHash == keccak256(_response) && msg.value>1 ether)
            {
                msg.sender.transfer(this.balance);
            }
        }
另外，问题发布者还具有另外两个权限，终止游戏和更新问题。
#### 终止游戏
问题提出者有权终止游戏（`StopGame()`）,但令小安比不解的是，终止游戏并非将游戏彻底终结，而是由问题提出者转出合约中的所有 ETH
，但是后续玩家依旧可以继续参与到游戏中。 **也就是说问题创建者可以随时取走合约中的所有 ETH ！！！**
    function StopGame()
        public
        payable
        {
           require(msg.sender==questionSender);
           msg.sender.transfer(this.balance);
        }
#### 更新问题
问题提出者可以将问题和答案换掉（NewQuestion()），玩家后续针对新的问题进行作答。小安比隐隐觉得哪里不对劲，忍不住拿起小本本，翻出了 ERC 20
Token 中的经典问题——reApproval[3]，果然如出一辙。
这是一个依赖交易顺序的漏洞，当一个玩家猜中了答案，并发起一笔交易来提交了正确的答案，该笔交易等待被打包。当问题提出者也同时提交一笔交易来更改问题，若更改问题的交易先被矿工打包，则玩家即使先猜中了答案也拿不到奖励。