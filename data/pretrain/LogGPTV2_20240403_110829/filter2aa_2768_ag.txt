suspected, the exact procedure for setting up such routing tunnels in a secure way is of utmost
importance for keeping the system theoretically secure. In this section, this procedure will be
described in more detail. We will begin with an explanation of the process used for resolving AP
addresses, which is the basis for creating and connecting routing tunnels to begin with. We will
then move on to a shorter step-by-step description of the tunnel setup procedure, after which we
will finally describe and explain each of the steps, and their underlying purposes and reasons,
more thoroughly.
7.2.1.   
AP Address Resolution
Whenever a node in the anonymous network wants to contact another node in the anonymous
network, this is accomplished through the use of AP addresses, as explained previously. All
nodes that accept incoming connections on the AP address level (which many nodes may indeed
not do at all) have an AP address registered to them in the network database.
The previous description of how routing tunnels are created and established explains how AP
addresses for nodes are registered in the global network database. This section will fill in the few
remaining details regarding how these AP addresses are used to get in touch with the node that
originally registered them, or to be more precise, the node that owns the routing paths for which
the AP address is registered.
This explanation will not, however, deal with the related lower-level database implementation
issues, but rather focus only on the process up to the point of the database abstraction layer.
Lower-level database implementation details will instead rather be dealt with in the “Network
Database” section below.
So, these limitations having been defined, how then does the AP address resolution work? It is
actually extremely simple. Let’s start by taking a look at a figure representing a typical situation in
the anonymous network, an anonymized node () wanting to connect to a non-anonymized node
(). As shown previously, it will look as follows:
Figure 14. Anonymized node () wanting to connect to a non-anonymized node ()
As can be seen in the figure, node  has its own routing path, in this case an exit path, which it
wants to use to contact the node  anonymously. The details of setting up the entire connection
(i.e. the routing tunnel) over the routing path will be discussed in the following section, but the
   = End-point node
   = Intermediary routing path node
   = Terminating routing path node (exit node)
   = Non-involved network node
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
36(68)
important consideration in this case is that it will be the responsibility of the terminating node of
the exit path (i.e. the exit node) to resolve the AP address of  (after having had this AP address
securely communicated to it through the tunnel from  as part of the routing tunnel setup
process), and then establish a connection to .
Once the target AP address of the desired outbound connection has been securely
communicated from  to the exit node of its routing path (a process which, as mentioned above,
will be explained in the following section, regarding secure establishment of routing tunnels), all
that needs to be done by the exit node is to query the global network database about the IP
address of a current entry node for the requested AP address. In the situation at hand, where the
node  has no interest in being anonymized, it acts as its own entry node, and thus, the IP
address of  is registered for the AP address of  in the network database. This IP address is
returned from the database, to the inquiring exit node in the routing path of , which in turn
connects to this IP address and requests a connection to be opened (actually, still without being
able to directly tell if the IP address belongs to  or to the entry node of one of its entry routing
paths). Very straight forward in the end, right?
Just to avoid any uncertainties, we will also include examples for the other typical situations of AP
address resolution in the anonymous network, starting out with the inverse situation of the one
above, i.e. a non-anonymized node () wanting to connect to an anonymized node ():
Figure 15. Non-anonymized node () wanting to connect to an anonymized node ()
As can be seen in the figure, node  is operating on its own, thus not being anonymized, while
node  has its own routing path, in this case an entry path, which it uses to receive connections
from other nodes (in this case ) anonymously. In this situation,  acts as its own exit node, and
thus has the responsibility to resolve the AP address of  and then establish a connection to (any
valid entry node of) .
So, again, all that  needs to do is to query the global network database for the IP address of a
current valid entry node for the target AP address (i.e. the AP address of  in this example). Once
the network database returns such an IP address as a result of this inquiry,  connects to this IP
address (in this case the entry node of the routing path belonging to ), and requests a
connection to be opened (likewise here, without being able to directly tell if the IP address
belongs to  itself or to the entry node of one of its entry routing paths). It is then the responsibility
of the contacted entry node to forward this request and establish a routing tunnel inside the
routing path leading to  (a process which, as mentioned above, will be explained in the section
below, regarding secure establishment of routing tunnels).
   = End-point node
   = Intermediary routing path node
   = Terminating routing path node (entry node)
   = Non-involved network node
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
37(68)
Starting to get a grip on the resolution and connection process now? Let’s just include one final
example of the third and last typical connection situation, i.e. an anonymized node () wanting to
connect to another anonymized node ():
Figure 16. Anonymized node () wanting to connect to another anonymized node ()
As can be seen in the figure, node  has its own routing path, in this case an exit path, which it
wants to use to contact the node  anonymously. Node  also has its own routing path, in this
case an entry path, which it uses to receive connections from other nodes (in this case )
anonymously. Just as in the previous examples, it will be the responsibility of the terminating
node of the exit path (i.e. the exit node) of  to resolve the AP address of , and then establish a
connection to (any valid entry node of) .
Once the target AP address of the desired outbound connection has been securely
communicated from  to the exit node of its routing path, all that remains to be done by the exit
node is to query the global network database about the IP address of a current entry node for the
requested AP address. Once  gets hold of such an IP address from the network database, it
connects to this IP address (in this case the entry node of the routing path belonging to ), and
requests a connection to be opened (likewise here, without being able to directly tell if the IP
address belongs to  itself or to the entry node of one of its entry routing paths). It is then the
responsibility of the contacted entry node to forward this request and establish a routing tunnel
inside the routing path leading to .
This concludes the explanation of how AP addresses are resolved and used to get in touch with
any node of choice within the anonymous network, and we will now move on to describing the full
process used for establishing routing tunnels (i.e. new connections) over existing routing paths.
   = End-point node
   = Intermediary routing path node
   = Terminating routing path node (entry/exit node)
   = Non-involved network node
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
38(68)
7.2.2.   
Secure Establishment of Routing Tunnels – Low-Level Overview
Now that we know all about how routing paths are created by all nodes that want to be
anonymous, and also on a higher level how such routing paths and their respective anonymized
nodes find and connect to each other by means of their AP addresses, it is time to describe the
last crucial step involved in the process of creating anonymized end-to-end connections between
two nodes in the anonymized network, namely, the establishment of routing tunnels.
As previously described, a routing tunnel is the logical representation of a specific connection
going over a specific routing path. It should be thoroughly understood that a routing tunnel does
not reach from one anonymized node to another. Rather, it only exists within the bounds of a
single routing path, being fully owned and managed by only one anonymized node, i.e. the one
that owns the routing path that hosts the tunnel. A full connection between two anonymized
nodes in the anonymized network is made up of two such routing tunnels, being connected with a
single link between the respective terminating nodes of the tunnels (i.e. one exit node and one
entry node).
In this section we will present a shorter step-by-step description of the process of securely setting
up a routing tunnel over a pre-existing routing path. In the next section we will then be moving on
to describing and explaining each of the steps, and their underlying purposes and reasons, more
thoroughly.
Depending on whether the tunnel is an inbound tunnel (i.e. initiated by the entry node of a routing
path, in response to an incoming connection from a third-party) or an outbound tunnel (i.e.
initiated by the anonymized node that owns the routing path, as a result of this node wanting to
create a connection to another AP address in the anonymous network), the process will be
internally different. Seen from the outside, or even from the viewpoint of all intermediary nodes in
the affected routing path, however, the process is seemingly identical and symmetrical, which is
an important property further aiding the anonymity and zero-knowledge of the system, as will be
further described below.
Outbound Routing Tunnel Setup Procedure
That being said, here follows the procedure for securely setting up an outbound routing tunnel
over a pre-existing routing path, followed by the procedure to set up its inbound counterpart.
1.  The anonymized node owning the outbound routing path (i.e. exit path) wants to establish a
connection to another node in the anonymous network.
2.  The anonymized node generates a dummy random data package, having the size of a single
symmetric crypto block (i.e. 128 bits or more), and sends this package off through the pre-
existing connection to the next intermediate node in the routing path.
3.  Each subsequent node in the routing path then performs the following sub-procedure:
3.1.  
The node randomly selects one of the stream encryption keys from its local set of
such, generated previously in step 11.13 of the routing path creation process.
3.2.  
The node encrypts the dummy package (at this point already previously encrypted by
all preceding nodes in the routing path), as a single block, with the chosen key.
3.3.  
The node saves the encrypted dummy package in a time limited cache (containing all
such recently forwarded dummy packages), together with the encryption key that was
chosen for the package, and then sends off the encrypted dummy package to the
next intermediate node in the routing path (i.e. its adjacent X-node if using the same
nomenclature as during the creation procedure for routing paths) over the already
established connection remaining since the routing path setup process.
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
39(68)
Figure 17. Outbound routing tunnel creation, step 3
4.  The exit node receives the dummy package after it has traversed the entire routing path, at
this point having been encrypted once by each of its intermediate nodes, with randomly
selected keys from each of their individual sets of stream encryption keys.
5.  The exit node prepares a special tunnel initialization package, having the size of a single
symmetric crypto block (i.e. 128 bits or more), containing the following (just as with all other
steps, this will be explained in much more detail in the next section):
5.1.  
A crypto key initialization block, constructed in such a way that the risk of falsely
diagnosing it as a positive in a certain kind of test will be one in 232, or less.
5.2.  
A checksum of the contents of the package.
6.  The exit node encrypts the tunnel initialization package, as a single block, with the previously
chosen stream encryption key.
7.  The exit node establishes a completely new connection to the previous node in the routing
path, i.e. to the same IP address and port used during the original routing path setup
procedure, authenticated with the original connection ID used between the nodes in the
original routing path setup procedure. A copy of the originally received dummy package is
then sent over this connection, immediately followed by the new and encrypted tunnel
initialization package.
8.  The receiving X-node performs the following sub-procedure, which is then repeated by all
subsequent nodes in the routing path:
8.1.  
The node authenticates the incoming connection by its IP address combined with the
given connection ID.
8.2.  
The node matches the connection to the corresponding previously forwarded dummy
package (and thus also to the right encryption key which was chosen during that
forwarding procedure, described in step 3 above), by matching the first data block
that arrives over the connection against the time limited cache of all such previously
forwarded dummy packages. The matching entry is then removed from the cache
after the encryption key for the new connection has been stored separately.
8.3.  
The node decrypts both the first received data block (i.e. the copy of the originally
forwarded dummy package) and the second one (i.e. the new tunnel initialization
package), using the encryption key derived in the previous step.
8.4.  
The node establishes a new connection to the previous node in the routing path, i.e.
to the same IP address and port used during the original routing path setup
procedure, authenticating it in both directions by means of the original connection ID
used between the nodes in the original routing path setup procedure, and the
previously stored (during the routing path setup procedure) “server-side” SSL
certificate for this previous node.
8.5.  
The node sends the two decrypted data blocks (i.e. the copy of the originally
forwarded dummy package and the new tunnel initialization package) over the newly
established and authenticated connection, in the same order that they were received.
   = Anonymized node
   = Intermediary routing path node
   = Terminating routing path node (exit node)
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
40(68)
Figure 18. Outbound routing tunnel creation, step 8
9.  The anonymized node finally receives the tunnel initialization package, after it has traversed
the entire routing path, at this point “decrypted” (in the present circumstances effectively
working rather as an encryption, but the terms are important here) once by each of its
intermediate nodes, with randomly selected keys from each of their individual sets of keys,
which are known by the anonymized node (since it created the seeds and parameters for
generating these keys, and can thus duplicate this process locally). At this point, the
separate connection for the routing tunnel has also been successfully established throughout
the entire routing path.
10.  The anonymized node calculates which exact key out of its known set of keys that each
individual node in the routing path has selected for this particular tunnel, i.e. the key that was
used by each of them to decrypt the tunnel initialization package. This is done by brute
forcing over all keys in all the known sets of keys for each individual node in the routing path.
The number of keys in the set of each node can be arranged in a way that this entire
operation takes no more than e.g. 0.1 – 0.5 seconds (or any other chosen length of time),
during which still a considerable amount of e.g. AES blocks can be processed in memory.
The test being performed on the resulting plaintext block to know if a certain brute force
attempt was successful is related to the crypto key initialization block, mentioned in step 5.1
above (just as with all other steps, this will be explained in much more detail in the next
section).
11.  When all the chosen keys of each individual node in the entire routing path have been
recovered, a final validation of the checksum in the recovered package is performed,
reducing the risk of false positives to one in 264 or less. It should always match under normal
circumstances (possible exception conditions will be discussed later).
12.  The anonymized node prepares a special tunnel initialization reply package, of the same
size as the original tunnel initialization package, containing the following (just as with all
other steps, this will be explained in much more detail in the next section):
12.1.  The desired AP address and port to create an outbound connection to.
12.2.  A secure checksum.
13.  The anonymized node encrypts the tunnel initialization reply package with all the individual
recovered keys of the routing path nodes, in the appropriate sequence, in such a way that it
will be decrypted correctly once it reaches the exit node, and sends it back through the newly
created separate connection for the tunnel.
14.  The receiving X-node performs the following sub-procedure, which is then repeated by all
subsequent nodes in the routing path:
14.1.  The node decrypts the (at this point already previously decrypted by all preceding
nodes in the routing path) tunnel initialization reply package, with the previously
chosen key for the connection, as a single block.
   = Anonymized node
   = Intermediary routing path node
   = Terminating routing path node (exit node)
White Paper:
Generic, Decentralized, Unstoppable Anonymity: The Phantom Protocol
Author:
Magnus Bråding
Version: 0.7
2008-08-04
41(68)
14.2.  The node sends off the decrypted dummy package to the next intermediate node in
the routing path, over the newly created separate connection for the tunnel.
15.  The exit node finally receives the tunnel initialization reply package, after it has traversed the
entire routing path, at this point being decrypted into the plaintext state in which it was