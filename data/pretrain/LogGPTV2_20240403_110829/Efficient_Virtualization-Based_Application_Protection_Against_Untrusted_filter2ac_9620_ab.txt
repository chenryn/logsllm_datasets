niques. Thus, we could install AppShield during runtime, even if
the guest operating system is already infected before installing the
hypervisor, because any integrity violation could be veriﬁed.
CAP runs in an address space isolated from the rest of the guest
domain, while the guest OS and other unprotected applications on
the platform run as usual without being affected. The page table of
CAP is managed by the guest OS, but its updates are intercepted
1Guest kernel refers to the kernel running in the guest VM.
and veriﬁed by the hypervisor to defend against various attacks in-
cluding the new ones introduced in Section 3.2.1. Data ﬂows in
system calls are mediated by the shim code which is essentially a
wrapper of libc libraries. Thus, it does not require source code of
libc and any modiﬁcation on the protected application. The main
task of the shim is to marshal the system call parameters by export-
ing the data needed by the system call routine into the shared buffer
accessible to the kernel.
The transit module regulates the control ﬂow transitions between
CAP and the guest kernel. The transitions are triggered by the
events including system calls, exceptions and interrupts. In order
to respond to those events before the guest kernel, the new handlers
within the transit module are invoked before the handlers in the
kernel so as to prevent the context switch from being manipulated.
3. DYNAMIC ADDRESS SPACE ISOLATION
AND VERIFICATION
Dynamic address space isolation is the bedrock of AppShield.
In this section, we ﬁrst elaborate how the hypervisor isolates a pre-
deﬁned address space of CAP. Then, we explain how the isolation
is dynamically adapted to the changes of the memory boundary at
run-time. While our description follows Intel virtualization tech-
nology, the approach is applicable with AMD’s as well.
3.1 Dynamic Address Space Isolation
In a nutshell, the physical memory assigned to the guest is di-
vided into two separated regions by the hypervisor. One (trusted)
region is used for CAP while another (untrusted) region is for the
guest OS and other applications. The hypervisor conﬁgures IOMMU
to prevent malicious DMA requests to access the trusted region.
To prevent illicit software access, the memory dichotomy as de-
picted in Figure 3 is realized by two suites of Extended Page Ta-
bles (EPTs) maintained by the hypervisor, respectively. The EPT
enforced address space isolation ensures that the guest OS and
other untrusted applications can never access the memory regions
assigned to CAP; on the other hand, CAP cannot access memory
regions belonging to the guest system either. For the sake of clar-
iﬁcation, we use AppShield EPT to refer to the ones dedicated for
CAP. In the following, we only focus on the EPT conﬁguration.
The details of applying the proper EPT are described in Section 4
which elaborates the context switches between CAP and the guest
OS.
Figure 3: Address Space Isolation. With the AppShield EPT,
only the memory regions of CAP and the shared buffer are ac-
cessible and other memory regions are inaccessible. In con-
trast, with the original EPT, CAP’s regions except the shared
buffer are inaccessible.
3
Apps Commodity OS Hypervisor Transit Module CAP Shared  Buffer Trusted Trusted Shim Data Flow Untrusted Control Flow Accessible Inaccessible AppShield EPT Untrusted EPT Mappings Memory Regions of CAP Other Memory Regions Shared Buffer 3473.1.1 Activation and Deactivation
The hypervisor exports two hypercalls for CAP to activate and
deactivate the protection. The activation hypercall is issued before
CAP’s main function is entered. In response, the hypervisor ob-
tains the page table base address from CR3 register and traverses
the page table entries (PTEs) belonging to the application, so that it
locates all pages within the address space, including the shared li-
braries. Note that the transit module copies the shared libraries into
the isolated space region, and keeps all original shared libraries
to be used by the untrusted applications. Both the traversed guest
PTEs and the pages pointed by them constitute the physical mem-
ory region that needs to be separated from the guest. The hypervi-
sor creates the AppShield EPT for this region and marks the cor-
responding entries in the original EPT as inaccessible, so that the
guest cannot visit the isolated region. Once the application’s code
and data are isolated, the hypervisor can validate its launch-time
integrity, supposing that the integrity of the protected application
has been priorly authenticated by a signature or an HMAC tag. In
addition, the hypervisor measures its integrity and ensures that its
memory region does not overlap with existing ones.
With the deactivation hypercall, CAP notiﬁes the hypervisor to
disable the protection. In response, the hypervisor ﬁrst ensures that
it is issued by CAP, and then destroys the AppShield EPT and re-
stores the entries in the original EPTs.
3.1.2 Tracking Address Space Updates
One of the main tasks of isolating a full-ﬂedged application is
that its memory region evolves over time, due to dynamic mem-
ory allocation and deallocation as a result of relevant system calls
(e.g., brk) which are invoked by the corresponding memory usage
functions in the libc library, such as malloc and free.
The details of how AppShield mediates system calls are described
in the next section. Here we focus on explaining how the hypervi-
sor dynamically maintains address space isolation, which demands
the hypervisor to track memory space updates at runtime.
To track page table updates, one design option is to let the hy-
pervisor directly manages a dedicated guest page table for the CAP.
Obviously, it signiﬁcantly increases the hypervisor complexity which
weakens the security strength. The paraverﬁcation technique ap-
proach used by InkTag [17] is another alternative. However it re-
quires massive modiﬁcations of the OS. To follow the design prin-
ciples we put forth in Section 2.2, our design utilizes paravirtu-
alization as Xen [1] whereby the guest page tables, being set as
read-only, are managed by the kernel and any updates are trapped
into the hypervisor and conducted by the hypervisor.
3.2 Address Space Veriﬁcation
Although the malicious kernel does not have a direct write ac-
cess to CAP’s guest page table, it may manipulate the virtual and/or
physical address of the newly allocated memory regions to compro-
mise CAP’s security without accessing the latter’s memory space.
One such example is the Iago attack [4] which relies on a vulnera-
bility in libc libraries. In the following, we ﬁrst show several newly
discovered attacks in the same vein, but in a more generalized set-
ting, and then we show how the hypervisor in AppShield veriﬁes an
address space update (before isolating it) to counter these attacks.
3.2.1 Address Mapping Manipulation
In general, address mapping manipulation attacks can be launched
by the kernel in response to any system calls that result in page ta-
ble updates. Without loss of generality, we use buffer allocation as
an example to illustrate the attacks.
4
Figure 4: Address mapping manipulation attacks. VA,··· , VF
are regions in the virtual addresses and PA,··· , PF are their
guest physical pages respectively.
Suppose a CAP’s buffer contains three consecutive pages at vir-
tual address VA, VB and VC respectively and CAP requests a new
buffer. When there is no attack, the newly allocated buffer’s virtual
address and physical addresses do not overlap with any existing
regions, as illustrated in Figure 4-(a), where they are at virtual ad-
dress VD, VE and VF .
In the following, we show four types of
manipulation attacks.
Mapping Overlap Attack.
The malicious kernel may overlap
two memory regions in both virtual and physical address space. As
illustrated in Figure 4-(b), the new buffer is set to the pages located
at VD to VE. The overlapping of VC and VD leads to undesired
modiﬁcations of data in PC when the application attempts to update
the ﬁrst page of the allocated buffer (through the mapping from VD
to PC). Obviously this attack breaches data integrity. It can also
subvert the control ﬂow of CAP when the overlapping memory is in
the application stack and the modiﬁcations change the stored return
address(es).
Double Mapping Attack. This attack maps two or more virtual
pages to one physical page in the user space. In double mapping
attack, there are only overlaps in the physical address space but
no overlap in the virtual address space, which is the main differ-
ence with the mapping overlap attack. As shown in Figure 4-(c), a
write to VA affects the result of a read operation at VF . This attack
is more stealthy than the mapping-overlap attack, as the physical
addresses are transparent to the code running in the virtual space
which is not tampered with at all.
Mapping Re-order Attack. The mapping re-order attack is to re-
order the existing address mappings between the virtual addresses
and the physical addresses. As shown in Figure 4-(d), CAP re-
trieves wrong data when it reads from VF . As a result, CAP’s data
or control ﬂow can be manipulated by the malicious kernel.
Mapping Release Attack.
In this attack, the malicious kernel
release one or more existing mappings without any system call re-
quests from the protected application. The mapping-release could
induce the hypervisor to give up the protection on those pages since
they are not considered in CAP’s addresses space. By doing so, the
guest OS can freely access the data on those released pages.
VA VB VC VD VE VF PB PC PA PF PD PE VA VB VC VD VE VF PB PC PA PF PD PE VA VB VC VD VE VF PB PC PA PF PD PE VA VB VC(Vd) VE VF PB PC PA PD PE PF (a) Legal Mappings (d) Mapping Reorder (c) Double Mapping (b)  Mapping Overlap Legitimate Mapping Manipulated Mapping Existing Buffer Page New Buffer Page Lapped Page 348Essentially, these attacks can be neutralized by the hypervisor
via monitoring and verifying changes to the guest page tables. To
the best of our knowledge, no existing work precisely describe the
veriﬁcation procedures and many of them [6, 34] suffer from one or
more aforementioned attacks. Moreover, it is not easy to efﬁciently
verify them due to frequent page table updates.
3.2.2 Context Information Collection
In order to determine whether an address space change is legiti-
mate, the hypervisor needs to be aware of the present memory lay-
out, the application’s intent to memory updates and the resulting
page table updates following the system calls.
The existing memory layout (the mapping relationship between
guest virtual addresses to guest physical addresses) is collected by
traversing CAP’s guest page table. The collected information is
trustworthy since it is collected by the hypervisor and the guest
page table is set as read-only so that the kernel cannot directly up-
date it.
To determine the intent of the application relevant to memory
updates, one possible way is to allow the hypervisor to intercept all
system calls that are potentially used by the CAP to allocate or deal-
locate memory. In order to correctly interpret the memory updates
information (i.e., the based address and the size), the hypervisor has
to know the exact semantic meaning of all parameters and return
values. It inevitably increases the complexity of the hypervisor and
thereby dampens its security. In our paper, the trusted shim running
in the user space closely works with the CAP. Thus, it knows the
system calls used by the CAP and their semantic meanings, e.g.,
the parameter of the malloc is the memory size and the return value
is the based address of the new allocated buffer. Through several
hypercalls, the trusted shim securely pass such information to the
hypervisor.
3.2.3 Veriﬁcation Details
In page table update veriﬁcation, the hypervisor and the shim
code jointly enforce the following policies for protecting the ad-
dress space of a CAP.
1. The page table of CAP should be non-writable for the un-
trusted guest OS. Any update should be intercepted by the
hypervisor.
2. The newly added memory region should not overlap with any
existing memory region, in both the virtual address space and
the guest physical address space.
3. Once the mappings between the virtual addresses and the
guest physical addresses are ﬁxed, they are not allowed to
be re-mapped.
4. The memory regions can be only released upon CAP’s re-
quests, and the page data should be cleaned before allowing
the guest OS to manage/access it.
The shim code checks the overlap in the virtual address space
after system calls, because it wraps all libc functions related to sys-
tem calls and therefore has the entire virtual address layout. Tak-
ing mmap as an example, the trusted shim stores the size of the
memory-mapped region through the second parameter of mmap
and the base address through the return value. Such information
are securely deposited in an ordered list which is inaccessible from
the kernel since the address space of the CAP is isolated by the hy-
pervisor. For each new allocated memory region, the trusted shim
veriﬁes it with existing ones. If there is no overlap, it then updates
the maintained list and passes the execution ﬂow to the CAP; other-
wise it will issue a hypercall to the hypervisor to inform the policy
violation.
To defend against double mapping and mapping reorder attacks
in the page table updates, the hypervisor interprets the present map-
ping (denoted as M) and the resulting mapping M(cid:48), and analyzes
the intent of this update. If the guest kernel is to build a new map-
ping (i.e., M is empty and M(cid:48) points to a guest physical page), the
hypervisor veriﬁes if the new pointed physical page is occupied be-
fore. If it is already occupied, it is a double mapping attack and the
request is denied; otherwise the update is approved. If the guest OS
aims to remap/reorder the mappings (i.e., both M and M(cid:48) point to
the guest physical pages), the hypervisor directly rejects it.
If the guest kernel aims to free an existing mapping (i.e., M
points to a guest physical page while M(cid:48) is empty), the hypervi-
sor veriﬁes whether it has been priorly informed with CAP’s such
requests via the shim code’s hypercall. The addresses and sizes of
those memory pages to be freed are stored in a list in the hypervisor
space. By searching the list, the hypervisor decides if the current
page is the one that CAP aims to release. If it is not, the hypervi-
sor rejects the update; otherwise it approves it and updates the list
by deleting the corresponding record. Note that the data on the re-
leases memory page is zeroed by the trusted shim once it gets the
release requests from the CAP.
Note that all mapping updates should be driven by the requests
from the application itself. Thus, the above veriﬁcation algorithm
does not prevent normal memory sharing within user space, e.g.,
a JIT compiler may request two virtual address for its code, one
read/execute only, the other for writing.
4. SECURE ADDRESS SPACE SWITCH
Events like system calls, interrupts and exceptions lead to con-
text switches between CAP and the kernel. Different from the con-
ventional user-kernel context switch, the switch between CAP and
the kernel involves address space switches, since they run in two
exclusively separated address spaces.
When CAP is in execution, the transit module in AppShield han-
dles all interrupts and prevents the kernel from exploiting the con-