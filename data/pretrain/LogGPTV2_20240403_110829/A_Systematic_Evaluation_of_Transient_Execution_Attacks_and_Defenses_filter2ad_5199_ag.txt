or Apple likely are sufﬁcient. This is likely the optimum
between potential attacks and reasonable performance. For
Table 11: Reported performance impacts of countermeasures.
Top shows performance impact in real-world scenarios while
the bottom shows it on a speciﬁc benchmark.
Benchmark
System call rates
Real-world workload servers
Defense Evaluation
KAISER/KPTI [21]
Retpoline [11]
Site Isolation [81]
InvisiSpec [91]
SafeSpec [45]
DAWG [47]
SLH [12]
YSNB [65]
IBRS [82]
STIBP [53]
Serialization [12]
SSBD/SSBB [15]
L1TF Mitigations [38]
SPEC
SPEC on MARSSx86
PARSEC , GAPBS
Penalty
0–2.6 %
5–10 %
10–13 % Memory overhead
22 %
-3 %
1–15 %
29–36.4 % Google microbenchmark suite
60 %
20–30 % Sysbench 1.0.11
30–50 % Rodinia OpenMP, DaCapo
62–74.8 % Google microbenchmark suite
2–8 %
SYSmark 2018, SPEC integer
-3–31 % SPEC
Phoenix
data centers, it is harder as it depends on the needs of their
customers and one has to evaluate this on an individual basis.
7 Future Work and Conclusion
Future Work. For Meltdown-type attacks, it is important to
determine where data is actually leaked from. For instance,
Lipp et al. [56] demonstrated that Meltdown-US can not only
leak data from the L1 data cache and main memory but even
from memory locations that are explicitly marked as “un-
cacheable” and are hence served from the Line Fill Buffer
(LFB). 3 In future work, other Meltdown-type attacks should
be tested to determine whether they can also leak data from
different microarchitectural buffers. In this paper, we pre-
sented a small evaluation of the prevalence of gadgets in
real-world software. Future work should develop methods
for automating the detection of gadgets and extend the analy-
sis on a larger amount of real-world software. We have also
discussed mitigations and shown that some of them can be
bypassed or do not target the root cause of the problem. We
encourage both offensive and defensive research that may use
our taxonomy as a guiding principle to discover new attack
variants and develop mitigations that target the root cause of
transient information leakage.
Conclusion. Transient instructions reﬂect unauthorized com-
putations out of the program’s intended code and/or data paths.
We presented a systematization of transient execution attacks.
Our systematization uncovered 6 (new) transient execution
attacks (Spectre and Meltdown variants) which have been
3The initial Meltdown-US disclosure (December 2017) and subsequent
paper [56] already made clear that Meltdown-type leakage is not limited to
the L1 data cache. We sent Intel a PoC leaking uncacheable-typed memory
locations from a concurrent hyperthread on March 28, 2018. We clariﬁed to
Intel on May 30, 2018, that we attribute the source of this leakage to the LFB.
In our experiments, this works identically for Meltdown-P (Foreshadow).
This issue was acknowledged by Intel, tracked under CVE-2019-11091, and
remained under embargo until May 14, 2019.
264    28th USENIX Security Symposium
USENIX Association
overlooked and have not been investigated so far. We demon-
strated these variants in practical proof-of-concept attacks
and evaluated their applicability to Intel, AMD, and ARM
CPUs. We also presented a short analysis and classiﬁcation of
gadgets as well as their prevalence in real-world software. We
also systematically evaluated defenses, discovering that some
transient execution attacks are not successfully mitigated by
the rolled out patches and others are not mitigated because
they have been overlooked. Hence, we need to think about
future defenses carefully and plan to mitigate attacks and
variants that are yet unknown.
Acknowledgments
We want to thank the anonymous reviewers and especially our
shepherd, Jonathan McCune, for their helpful comments and
suggestions that substantially helped in improving the paper.
This work has been supported by the Austrian Research
Promotion Agency (FFG) via the K-project DeSSnet, which
is funded in the context of COMET – Competence Centers
for Excellent Technologies by BMVIT, BMWFW, Styria and
Carinthia. This work has been supported by the Austrian Re-
search Promotion Agency (FFG) via the project ESPRESSO,
which is funded by the province of Styria and the Business
Promotion Agencies of Styria and Carinthia. This project
has received funding from the European Research Council
(ERC) under the European Union’s Horizon 2020 research
and innovation programme (grant agreement No 681402).
This research received funding from the Research Fund KU
Leuven, and Jo Van Bulck is supported by the Research Foun-
dation – Flanders (FWO). Evtyushkin acknowledges the start-
up grant from the College of William and Mary. Additional
funding was provided by generous gifts from ARM and Intel.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this paper are those of the authors and do not
necessarily reﬂect the views of the funding parties.
References
[1] ALDAYA, A. C., BRUMLEY, B. B., UL HASSAN, S., GARCÍA, C. P., AND
TUVERI, N. Port contention for fun and proﬁt, 2018.
[2] ALDAYA, A. C., BRUMLEY, B. B., UL HASSAN, S., GARCÍA, C. P., AND
TUVERI, N. Port Contention for Fun and Proﬁt. ePrint 2018/1060 (2018).
[3] AMD. AMD64 Technology: Speculative Store Bypass Disable, 2018. Revision
5.21.18.
[4] AMD. Software Techniques for Managing Speculation on AMD Processors,
2018. Revison 7.10.18.
[5] AMD. Spectre mitigation update, July 2018.
[6] ARM. Cache Speculation Side-channels, 2018. Version 2.4.
[7] ARM LIMITED. ARM A64 Instruction Set Architecture, Sep 2018.
[8] ARM LIMITED. Vulnerability of Speculative Processors to Cache Timing Side-
Channel Mechanism, 2018.
[9] BHATTACHARYYA, A., SANDULESCU, A., NEUGSCHWANDTNER, M.,
SORNIOTTI, A., FALSAFI, B., PAYER, M., AND KURMUS, A. Smotherspec-
tre: exploiting speculative execution through port contention. arXiv:1903.01843
(2019).
[10] CARPENTER, D. Smatch check for Spectre stuff, Apr. 2018.
[11] CARRUTH, C., https://reviews.llvm.org/D41723 Jan. 2018.
[12] CARRUTH, C. RFC: Speculative Load Hardening (a Spectre variant #1 mitiga-
tion), Mar. 2018.
[13] CHEN, G., CHEN, S., XIAO, Y., ZHANG, Y., LIN, Z., AND LAI, T. H.
SGXPECTRE Attacks: Leaking Enclave Secrets via Speculative Execution.
arXiv:1802.09085 (2018).
[14] CORP., M.,
https://support.microsoft.com/en-us/help/4482887/
windows-10-update-kb4482887 Mar. 2019.
[15] CULBERTSON, L. Addressing new research for side-channel analysis. Intel.
[16] DONG, X., SHEN, Z., CRISWELL, J., COX, A., AND DWARKADAS, S. Spec-
tres, virtual ghosts, and hardware support. In Workshop on Hardware and Archi-
tectural Support for Security and Privacy (2018).
[17] EARNSHAW, R. Mitigation against unsafe data speculation (CVE-2017-5753),
July 2018.
[18] EVTYUSHKIN, D., RILEY, R., ABU-GHAZALEH, N. C., ECE, AND PONO-
MAREV, D. Branchscope: A new side-channel attack on directional branch pre-
dictor. In ASPLOS’18 (2018).
[19] FOG, A. The microarchitecture of Intel, AMD and VIA CPUs: An optimization
guide for assembly programmers and compiler makers, 2016.
[20] GREGG, B. KPTI/KAISER Meltdown Initial Performance Regressions, 2018.
[21] GRUSS, D., HANSEN, D., AND GREGG, B. Kernel isolation: From an academic
idea to an efﬁcient patch for every computer. USENIX ;login (2018).
[22] GRUSS, D., LIPP, M., SCHWARZ, M., FELLNER, R., MAURICE, C., AND
MANGARD, S. KASLR is Dead: Long Live KASLR. In ESSoS (2017).
[23] GRUSS, D., MAURICE, C., FOGH, A., LIPP, M., AND MANGARD, S. Prefetch
Side-Channel Attacks: Bypassing SMAP and Kernel ASLR. In CCS (2016).
[24] GRUSS, D., SPREITZER, R., AND MANGARD, S. Cache Template Attacks:
Automating Attacks on Inclusive Last-Level Caches. In USENIX Security Sym-
posium (2015).
[25] GUARNIERI, M., KÖPF, B., MORALES, J. F., REINEKE, J., AND SÁNCHEZ,
A. SPECTECTOR: Principled Detection of Speculative Information Flows.
arXiv:1812.08639 (2018).
[26] GÜLMEZO ˘GLU, B., INCI, M. S., EISENBARTH, T., AND SUNAR, B. A Faster
and More Realistic Flush+Reload Attack on AES. In Constructive Side-Channel
Analysis and Secure Design (2015).
[27] HEDAYATI, M., GRAVANI, S., JOHNSON, E., CRISWELL, J., SCOTT, M.,
SHEN, K., AND MARTY, M. Janus: Intra-Process Isolation for High-Throughput
Data Plane Libraries, 2018.
[28] HORN, J. Reading privileged memory with a side-channel, Jan. 2018.
[29] HORN, J. speculative execution, variant 4: speculative store bypass, 2018.
[30]
[31]
More Information on Transient Execution Findings, https:
INTEL. Intel Software Guard Extensions (Intel SGX), 2016.
INTEL. Intel 64 and IA-32 Architectures Software Developer′s Manual, Volume
3 (3A, 3B & 3C): System Programming Guide.
INTEL. Intel Xeon Processor Scalable Family Technical Overview, Sept. 2017.
INTEL. Intel 64 and IA-32 Architectures Optimization Reference Manual, 2017.
INTEL. Deep Dive: Intel Analysis of L1 Terminal Fault, Aug. 2018.
INTEL. Intel Analysis of Speculative Execution Side Channels , July 2018. Re-
vision 4.0.
INTEL.
//software.intel.com/security-software-guidance/insights/
more-information-transient-execution-findings 2018.
INTEL. Q2 2018 Speculative Execution Side Channel Update, May 2018.
INTEL. Resources and Response to Side Channel L1 Terminal Fault, Aug. 2018.
INTEL. Retpoline: A Branch Target Injection Mitigation, June 2018. Revision
003.
INTEL. Speculative Execution Side Channel Mitigations, May 2018. Revision
3.0.
IONESCU, A. Twitter: Apple Double Map, https://twitter.com/aionescu/
status/948609809540046849 2017.
IONESCU, A.
tice
930412525111296000 2017.
IRAZOQUI, G., INCI, M. S., EISENBARTH, T., AND SUNAR, B. Wait a minute!
A fast, Cross-VM attack on AES. In RAID’14 (2014).
Windows 17035 Kernel ASLR/VA Isolation In Prac-
(like Linux KAISER)., https://twitter.com/aionescu/status/
[32]
[33]
[34]
[35]
[36]
[37]
[38]
[39]
[40]
[41]
[42]
[43]
USENIX Association
28th USENIX Security Symposium    265
[44]
ISLAM, S., MOGHIMI, A., BRUHNS, I., KREBBEL, M., GULMEZOGLU, B.,
EISENBARTH, T., AND SUNAR, B. SPOILER: Speculative Load Hazards Boost
Rowhammer and Cache Attacks. arXiv:1903.00446 (2019).
[45] KHASAWNEH, K. N., KORUYEH, E. M., SONG, C., EVTYUSHKIN, D., PONO-
MAREV, D., AND ABU-GHAZALEH, N. SafeSpec: Banishing the Spectre of a
Meltdown with Leakage-Free Speculation. arXiv:1806.05179 (2018).
[46] KING, R. ARM: spectre-v2: harden branch predictor on context switches, May
2018.
[47] KIRIANSKY, V., LEBEDEV, I., AMARASINGHE, S., DEVADAS, S., AND EMER,
J. DAWG: A Defense Against Cache Timing Attacks in Speculative Execution
Processors. ePrint 2018/418 (May 2018).
[48] KIRIANSKY, V., AND WALDSPURGER, C. Speculative Buffer Overﬂows: At-
tacks and Defenses. arXiv:1807.03757 (2018).
[49] KOCHER, P. Spectre mitigations in Microsoft’s C/C++ compiler, 2018.
[50] KOCHER, P., HORN, J., FOGH, A., GENKIN, D., GRUSS, D., HAAS, W., HAM-
BURG, M., LIPP, M., MANGARD, S., PRESCHER, T., SCHWARZ, M., AND
YAROM, Y. Spectre attacks: Exploiting speculative execution. In S&P (2019).
[51] KOCHER, P. C. Timing Attacks on Implementations of Diffe-Hellman, RSA,
DSS, and Other Systems. In CRYPTO (1996).
[52] KORUYEH, E. M., KHASAWNEH, K., SONG, C., AND ABU-GHAZALEH, N.
Spectre Returns! Speculation Attacks using the Return Stack Buffer. In WOOT
(2018).
[53] LARABEL, M. Bisected: The Unfortunate Reason Linux 4.20 Is Running Slower,
Nov. 2018.
[54] LARABEL, M. The performance cost of spectre / meltdown / foreshadow miti-
gations on linux 4.19, Aug. 2018.
[55] LIPP, M., GRUSS, D., SPREITZER, R., MAURICE, C., AND MANGARD, S. AR-
Mageddon: Cache Attacks on Mobile Devices. In USENIX Security Symposium
(2016).
[56] LIPP, M., SCHWARZ, M., GRUSS, D., PRESCHER, T., HAAS, W., FOGH, A.,
HORN, J., MANGARD, S., KOCHER, P., GENKIN, D., YAROM, Y., AND HAM-
BURG, M. Meltdown: Reading Kernel Memory from User Space. In USENIX
Security Symposium (2018).
[57] LUTOMIRSKI, A. x86/fpu: Hard-disable lazy FPU mode, June 2018.
[58] LWN. The current state of kernel page-table isolation, https://lwn.net/
SubscriberLink/741878/eb6c9d3913d7cb2b/ Dec. 2017.
[59] MAISURADZE, G., AND ROSSOW, C.
return stack buffers. In CCS (2018).
ret2spec: Speculative execution using
[60] MAURICE, C., WEBER, M., SCHWARZ, M., GINER, L., GRUSS, D., AL-
BERTO BOANO, C., MANGARD, S., AND RÖMER, K. Hello from the Other
Side: SSH over Robust Cache Covert Channels in the Cloud. In NDSS (2017).
[61] MICROSOFT. Mitigating speculative execution side-channel attacks in Microsoft
Edge and Internet Explorer, Jan. 2018.
[62] MILLER, M. Mitigating speculative execution side channel hardware vulnerabil-
ities, Mar. 2018.
[63] O’KEEFFE, D., MUTHUKUMARAN, D., AUBLIN, P.-L., KELBERT, F., PRIEBE,
C., LIND, J., ZHU, H., AND PIETZUCH, P. Spectre attack against SGX enclave,
Jan. 2018.
[64] OLEKSENKO, O., KUVAISKII, D., BHATOTIA, P., FELBER, P., AND FETZER,
C. Intel MPX Explained: An Empirical Study of Intel MPX and Software-based
Bounds Checking Approaches. arXiv:1702.00719 (2017).
[65] OLEKSENKO, O., TRACH, B., REIHER, T., SILBERSTEIN, M., AND FETZER,
C. You Shall Not Bypass: Employing data dependencies to prevent Bounds
Check Bypass. arXiv:1805.08506 (2018).
[66] OPEN SOURCE SECURITY INC. Respectre: The state of the art in spectre de-
fenses, Oct. 2018.
[68] PARDOE, A. Spectre mitigations in MSVC, 2018.
[69] PESSL, P., GRUSS, D., MAURICE, C., SCHWARZ, M., AND MANGARD, S.
DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks. In USENIX
Security Symposium (2016).
[70] PIZLO, F. What Spectre and Meltdown mean for WebKit, Jan. 2018.
[71] SCHWARZ, M., LIPP, M., AND GRUSS, D. JavaScript Zero: Real JavaScript
and Zero Side-Channel Attacks. In NDSS (2018).
[72] SCHWARZ, M., LIPP, M., GRUSS, D., WEISER, S., MAURICE, C., SPREITZER,
R., AND MANGARD, S. KeyDrown: Eliminating Software-Based Keystroke
Timing Side-Channel Attacks. In NDSS (2018).
[73] SCHWARZ, M., MAURICE, C., GRUSS, D., AND MANGARD, S. Fantastic
Timers and Where to Find Them: High-Resolution Microarchitectural Attacks
in JavaScript. In FC (2017).
[74] SCHWARZ, M., SCHWARZL, M., LIPP, M., AND GRUSS, D. NetSpectre: Read
Arbitrary Memory over Network. arXiv:1807.10535 (2018).
[75] SHACHAM, H. The geometry of innocent ﬂesh on the bone: Return-into-libc
without function calls (on the x86). In CCS (2007).
[76] SHIH, M.-W., LEE, S., KIM, T., AND PEINADO, M. T-SGX: Eradicating
controlled-channel attacks against enclave programs. In NDSS (2017).
[77] SMITH, B. Enable SharedArrayBuffer by default on non-android, Aug. 2018.
[78] STECKLINA, J., AND PRESCHER, T. LazyFP: Leaking FPU Register State using
Microarchitectural Side-Channels. arXiv:1806.07480 (2018).
[79] SUSE.
Security update for kernel-ﬁrmware, https://www.suse.com/
support/update/announcement/2018/suse-su-20180008-1/ 2018.
[80] THE CHROMIUM PROJECTS. Actions required to mitigate Speculative Side-
Channel Attack techniques, 2018.
[81] THE CHROMIUM PROJECTS. Site Isolation, 2018.
[82] TKACHENKO, V. 20-30% Performance Hit from the Spectre Bug Fix on Ubuntu,
Jan. 2018.
[83] TURNER, P. Retpoline: a software construct for preventing branch-target-
injection, 2018.
[84] VAHLDIEK-OBERWAGNER, A., ELNIKETY, E., GARG, D., AND DRUSCHEL,
P. ERIM: secure and efﬁcient in-process isolation with memory protection keys.
arXiv:1801.06822 (2018).
[85] VAN BULCK, J., MINKIN, M., WEISSE, O., GENKIN, D., KASIKCI, B.,
PIESSENS, F., SILBERSTEIN, M., WENISCH, T. F., YAROM, Y., AND
STRACKX, R. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with
Transient Out-of-Order Execution. In USENIX Security Symposium (2018).
[86] VAN BULCK, J., PIESSENS, F., AND STRACKX, R. Nemesis: Studying microar-
chitectural timing leaks in rudimentary CPU interrupt logic. In CCS (2018).
[87] VARDA, K. WebAssembly’s post-MVP future, https://news.ycombinator.
com/item?id=18279791 2018.
[88] WAGNER, L. Mitigations landing for new class of timing attack, Jan. 2018.
[89] WANG, G., CHATTOPADHYAY, S., GOTOVCHITS, I., MITRA, T., AND ROY-
CHOUDHURY, A. oo7: Low-overhead Defense against Spectre Attacks via Bi-
nary Analysis. arXiv:1807.05843 (2018).
[90] WEISSE, O., VAN BULCK, J., MINKIN, M., GENKIN, D., KASIKCI, B.,
PIESSENS, F., SILBERSTEIN, M., STRACKX, R., WENISCH, T. F., AND
YAROM, Y. Foreshadow-NG: Breaking the Virtual Memory Abstraction with
Transient Out-of-Order Execution, 2018.
[91] YAN, M., CHOI, J., SKARLATOS, D., MORRISON, A., FLETCHER, C. W.,
InvisiSpec: Making Speculative Execution Invisible in
AND TORRELLAS, J.
the Cache Hierarchy. In MICRO (2018).
[67] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache Attacks and Counter-
measures: the Case of AES. In CT-RSA (2006).
[92] YAROM, Y., AND FALKNER, K. Flush+Reload: a High Resolution, Low Noise,
L3 Cache Side-Channel Attack. In USENIX Security Symposium (2014).
266    28th USENIX Security Symposium
USENIX Association