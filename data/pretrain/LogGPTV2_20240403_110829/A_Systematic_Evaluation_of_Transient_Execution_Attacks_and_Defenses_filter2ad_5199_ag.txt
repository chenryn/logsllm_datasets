### Optimal Countermeasures for Transient Execution Attacks

For Apple and similar organizations, the existing countermeasures are likely sufficient. This balance is optimal, as it mitigates potential attacks while maintaining reasonable performance. 

#### Table 11: Performance Impact of Countermeasures
- **Top Section**: Performance impact in real-world scenarios.
- **Bottom Section**: Performance impact on a specific benchmark.

| **Countermeasure** | **Benchmark (SPEC on MARSSx86, PARSEC, GAPBS)** | **Real-World Workload (Servers)** | **Penalty** |
|--------------------|--------------------------------------------------|-----------------------------------|-------------|
| KAISER/KPTI [21]   | 0–2.6%                                           | 5–10%                             |             |
| Retpoline [11]     | 10–13% Memory overhead                           | 22%                               | -3%         |
| Site Isolation [81]| 1–15%                                            | 29–36.4% Google microbenchmark suite | 60%         |
| InvisiSpec [91]    | 20–30% Sysbench 1.0.11                           | 30–50% Rodinia OpenMP, DaCapo    | 62–74.8%    |
| SafeSpec [45]      | 2–8% SYSmark 2018, SPEC integer                  | -3–31% SPEC Phoenix              |             |
| DAWG [47]         |                                                  |                                   |             |
| SLH [12]          |                                                  |                                   |             |
| YSNB [65]         |                                                  |                                   |             |
| IBRS [82]         |                                                  |                                   |             |
| STIBP [53]        |                                                  |                                   |             |
| Serialization [12] |                                                  |                                   |             |
| SSBD/SSBB [15]    |                                                  |                                   |             |
| L1TF Mitigations [38] |                                                  |                                   |             |

For data centers, the choice of countermeasures is more complex, as it depends on the specific needs of their customers. Evaluating the best approach must be done on an individual basis.

### Future Work and Conclusion

#### Future Work
- **Meltdown-Type Attacks**: It is crucial to determine where data is actually leaked from. For example, Lipp et al. [56] demonstrated that Meltdown-US can leak data not only from the L1 data cache and main memory but also from memory locations explicitly marked as "uncacheable," which are served from the Line Fill Buffer (LFB). Future work should test other Meltdown-type attacks to see if they can also leak data from different microarchitectural buffers.
- **Gadget Detection**: This paper presented a preliminary evaluation of the prevalence of gadgets in real-world software. Future research should develop methods to automate the detection of gadgets and extend the analysis to a larger set of real-world software.
- **Mitigation Evaluation**: We have discussed various mitigations and shown that some can be bypassed or do not address the root cause of the problem. We encourage both offensive and defensive research to use our taxonomy as a guiding principle to discover new attack variants and develop mitigations that target the root cause of transient information leakage.

#### Conclusion
Transient instructions reflect unauthorized computations outside the intended code and data paths. We presented a systematization of transient execution attacks, uncovering six new transient execution attacks (Spectre and Meltdown variants) that have been overlooked. These variants were demonstrated in practical proof-of-concept attacks and evaluated for applicability to Intel, AMD, and ARM CPUs. We also provided a brief analysis and classification of gadgets and their prevalence in real-world software. Our systematic evaluation of defenses revealed that some transient execution attacks are not successfully mitigated by the rolled-out patches, and others are not mitigated because they have been overlooked. Therefore, we need to carefully consider future defenses and plan to mitigate attacks and variants that are yet unknown.

### Acknowledgments
We thank the anonymous reviewers and especially our shepherd, Jonathan McCune, for their helpful comments and suggestions. This work was supported by the Austrian Research Promotion Agency (FFG) via the K-project DeSSnet and the project ESPRESSO, funded by BMVIT, BMWFW, Styria, Carinthia, and the European Research Council (ERC) under the Horizon 2020 research and innovation program. Additional funding was provided by the Research Fund KU Leuven, the Research Foundation – Flanders (FWO), and generous gifts from ARM and Intel. The opinions, findings, and conclusions expressed in this paper are those of the authors and do not necessarily reflect the views of the funding parties.

### References
[References listed here, formatted as in the original text]

---

This version of the text is more structured, with clear headings and a more coherent flow. The table has been reorganized for better readability, and the content has been refined for clarity and professionalism.