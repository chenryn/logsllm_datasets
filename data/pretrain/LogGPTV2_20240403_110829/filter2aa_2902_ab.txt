参数、返回值，还能通过hook改变程序的执行。
Frida最方便的就是因为hook代码是使用JS编写，可以很方便的解析Java代码中的数据，笔者给出一段今
年ByteCTF中的解题代码作为示例:
//ByteCTF{b6b31f89-a3ee-4169-a72b-f2807c743d26}
Java.perform(function () {
    console.log("Script loaded successfully ");
    var b1_a_b = Java.use('b1.a$b')
    b1_a_b.checkServerTrusted.implementation = function (arg1,arg2){
        console.log("check1")
        //console.log(arg1[0])
        //console.log(arg1[0].getSubjectAlternativeNames())
        return
    };
    var b1_a_a = Java.use('b1.a$a')
    b1_a_a.verify.implementation = function (arg1,arg2){
        console.log("check2")
        //console.log(arg1)
        //console.log(arg2)
        return true
    };
    var MainActivity = Java.use('com.bytedance.bytecert.MainActivity')
    var getPackageName_count = 0
    MainActivity.getPackageName.implementation = function (){
APP的Native层调试
本节介绍APP Native层调试的具体流程。
        getPackageName_count++
        if(getPackageName_count == 2){
            console.log("hook return:com.ss.android.ugc.aweme")
            return "com.ss.android.ugc.aweme"
        }
        var res = this.getPackageName()
        //console.log(res)
        return res
    };
    /*
    var c1_b = Java.use('c1.b')
    var count = 0
    c1_b.b.implementation = function (arg){
        console.log(new String(arg))
        count++;
        if(count == 1){
            console.log("hook return:078236002e6a2622e7da614851211942")
            return "078236002e6a2622e7da614851211942"
        }
        var res = this.b(arg)
        console.log(res)
        return res
    };
    */
    var android_util_Log = Java.use('android.util.Log')
    android_util_Log.d.overload('java.lang.String', 
'java.lang.String').implementation = function (arg1,arg2){
        console.log(arg2)
        return 0
    }
});
笔者主要尝试了使用ida pro对Native层模块的动态调试。ida pro的动态调试需要首先在手机中执行
android server服务，然后使用PC端的ida pro进行连接。而根据安卓系统的设计理念，每一个APP是拥
有一个独立的沙盒执行环境，只有沙盒内部的程序或拥有root权限的外部程序才能访问沙盒内的数据，
因此就要求启动android server服务时必须满足上述要求。
有root权限下Native层调试
如果手机已经root，那么就很简单了：
直接使用adb push将android server程序传入手机，笔者通常选择/data/local/tmp这个目录，这
个目录是临时目录且可以设置执行权限，此外，笔者测试通常sdcard或者storage相关的目录一般
都不具有执行权限。
启动服务：chmod +x android_server && ./android_server
配置端口转发：adb forward tcp: tcp:
接着使用PC端的ida pro连接远程android_server，即可选择附加远程进程调试。
无root权限下Native层调试
这是我们大多时候面临的情况，这时就要用到一个小技巧，就是run-as命令，可以在未root的情况下查
看某个(debug模式的)应用的内部信息，相当于执行了run-as后，就会切换到一个沙盒内部用户的身份。
具体的使用方式为：run-as 
可是拥有了沙盒内部操作权限，还有一个问题需要解决，那就是如何把android server传到沙盒内，一
个沙盒的可访问目录范围通常是/data/data/，沙盒内部和其余目录之间文件访问是严
格隔离的，如果APP具有外部存储器访问权限那么似乎可以访问/sdcard相关目录，但安卓6.0版本需要
动态申请该权限，这就对被调试的APP本身做了一些限制要求，不是很方便。笔者这个主要给出两个解
决方案：
在apk重打包时，将server的bin文件放入lib目录中，对应架构的目录中，apk安装后，沙盒目录中
的lib目录内即可找到该bin程序
利用/data/local/tmp中转，我们adb命令执行的用户权限是shell权限，对这个tmp目录是完全可控
的，因此可以修改权限为777，这样沙盒内部就能任意访问了。但笔者测试时发现似乎只能将其中
文件复制进沙盒内，而不能反向操作。 
此外，还有一个需要注意的地方是，android server使用tcp方式通信，这要求APP需要网络访问权限，
切记在AndroidManifest.xml中加入这个权限。
因此，综上所述，无root权限下Native层调试步骤为：
AndroidManifest.xml中：android:debuggable=true，增加网络权限 
把android_server传入沙盒
直接重打包，放在lib目录下面的对应的架构目录下，安装完就有了
chmod 777 /data/local/tmp，通过这个目录中转
run-as ，启动android server
配置端口转发：adb forward tcp: tcp:
接着使用PC端的ida pro连接远程android_server，即可选择附加远程进程调试。
从入口处开始调试Native层模块
前面介绍的例子都是附加调试的，那么当想要分析的代码位于入口处时，怎样调试呢？
启动APP并停在入口处：adb shell am start -D -n xxx.xxx.xxx
ida附加,设置debug option为加载模块时中断，这样就可以在模块代码未执行前开始调试
查看可调试进程：adb jdwp，并记录其调试端口
将调试端口重定向到本机tcp端口：adb forward tcp:xxxx jdwp:xxxx
使用jdb恢复APP执行：jdb -connect 
com.sun.jdi.SocketAttach:hostname=localhost,port=xxxx，jdb是jdk中的命令行工具