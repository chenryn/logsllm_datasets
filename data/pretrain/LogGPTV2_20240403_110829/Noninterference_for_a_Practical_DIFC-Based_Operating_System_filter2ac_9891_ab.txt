q2
= {}
Sq2
1
q
01
Sq = {}
Fig. 3.
“1” and writes “1” to q at position i.
If qi did not receive a “0” before the timeout, it assumes an implicit
with Sp ⊆ Sx), and a process can only read from the network or
keyboard if it could reduce its integrity label to {} (the only label
with Ip ⊆ Ix).
D. Security Policies
−
+ ∈ ˆO and t
The most important security policy in Flume is export protection,
wherein untrustworthy processes can compute with secret data with-
out the ability to reveal it. An export protection tag is a tag t such
/∈ ˆO. For a process p to achieve such a result, it
that t
+ to the global set ˆO, while closely
creates a new tag t and grants t
guarding t−. To protect a ﬁle f, p creates the ﬁle with secrecy label
{t}. If a process q wishes to read f, it must ﬁrst add t to Sq, which
+ ∈ ˆO ⊆ ¯Oq. Now, q can only send messages to
it can do since t
other processes with t in their labels. It requires p’s authorization
to remove t from its label or send data to the network. Additional
Flume policies exist, like those that protect integrity.
III. COVERT CHANNELS IN DYNAMIC LABEL SYSTEMS
As described in Section II-C, processes in Flume change their
labels explicitly;
labels do not change implicitly upon message
receipt, as they do in Asbestos [1] or IX [11]. We show by example
why implicit label changes (also known as “ﬂoating” labels) enable
high-throughput information leaks (as predicted by Denning [12]).
Consider a process p with secrecy label Sp = {t} and a process q
with Sq = {}, both with empty ownership sets Op = Oq = {}. In a
ﬂoating label system like Asbestos, p can send a message to q, and
q will successfully receive it, upon which the kernel automatically
raises Sq = {t}. Thus, the kernel can track which processes have
seen secrets tagged with t, even if those processes are uncooperative.
Such a scheme introduces new problems: what if a process q doesn’t
want its label to change from Sq = {}? For this reason, Asbestos
also introduces “receive labels,” which let processes ﬁlter out trafﬁc
and avoid unwanted label changes.
The problem with ﬂoating is best seen through example (see
Figures 1–3). Imagine processes p and q as above, with a sender
process p wanting to leak the 2-bit secret “01” to a receiver process
q. Their goal is to transmit these bits without q’s label changing.
Figure 1 shows the initialization: q launches two helper processes
(q1 and q2), each with a label initialized to Sqi = {}. q’s version of
63
the secret starts out initialized to all 0s, but it will overwrite some
of those bits during the attack.
Next, p communicates selected bits of the secret to its helpers. If
the ith bit of the message is equal to 0, then p sends the message
“0” to the process qi. If the ith bit of the message is 1, p does
nothing. Figure 2 shows this step. When receiving this 0 bit, q1’s
label changed, ﬂoating up from {} to {t}, as the kernel accounts for
how information ﬂowed.
In the last step (Figure 3), the qi processes wait for a predeﬁned
time limit before giving up. At the timeout, each qi which did not
receive a message (here, q2) sends a message “1” to q, and upon
receipt of this message q updates the bit at position i to 1. The
remaining processes (q1) do not write to q, nor could they without
affecting q’s label. Now, q has the exact secret, copied bit-for-bit from
p. This example shows 2 bits of data leak, but by forking n processes,
p and q can leak n bits per timeout period. Because Asbestos’s event
process abstraction makes forking very fast, this channel on Asbestos
can leak kilobits of data per second.
This attack fails against the Flume system. In Figure 2, each qi
must each make a decision: should it raise its secrecy label to Sqi =
{t}, or leave it as is? If qi raises Sqi then it will receive messages
from p, but it won’t be able to write to q. Otherwise, qi will never
receive a message from p. In either case, qi cannot alter its messages
to q in response to messages from p. And crucially, qi must decide
whether to upgrade Sqi before receiving messages from p.
IV. THE FORMAL FLUME MODEL
That the above attack fails against the Flume model is useful
intuition but proves nothing. This section and the next seek a formal
separation between the Asbestos style of “ﬂoating” labels and the
Flume style of “explicitly speciﬁed” labels. The ultimate goal is to
prove that Flume exhibits noninterference: for example, that processes
with empty ownership and whose secrecy label contains t cannot in
any way alter the execution of those processes with empty labels.
Such a noninterference result requires a formal model of Flume,
which we build up here. Section V provides the proof that
the
Flume Model meets a standard deﬁnition of noninterference with
high probability.
We present a formal model for the Flume System in the Commu-
nicating Sequential Processes (CSP) process algebra [16] (reviewed
in Appendix A). The model captures a kernel and arbitrary user pro-
cesses that can interact through a system call interface. Processes can
communicate with one another over IPC, changing labels, allocating
tags, and forking new processes. The model dictates which kernel
details are safe to expose to user-level applications, where I/O can
safely happen, which return codes from system calls to provide, etc.
It does not capture lower-level hardware details, like CPU, cache,
memory, network or disk usage. Therefore, it is powerless to disprove
the existence of covert channels that modulate CPU, cache, memory,
network or disk usage to communicate data from one process to
another.
Figure 4 depicts the Flume model organization. At a high level,
the model splits each Unix-like process i running on a system (e.g.,
a web server or text editor) into two logical components: a user
half Ui that can take almost any form, and a kernel half i:K that
behaves according to a strict state machine.1 The user half of a
process can communicate with its kernel half (and thus, indirectly,
with other user processes) through the system call interface, which
takes the form of a CSP channel i.s between the Ui and i:K.
1The CSP notation i:K means the i-th instance of a template process K.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
Ui
i.s
Uj
j.s
i:QUEUES
i.q
i.c
i:K
SWITCH
j.c
j :K
j.q
j :QUEUES
The Flume model places no restrictions on the Uis other than
on their communication. A process Ui can communicate with i:K
via channel i.s; it can communicate with itself via channels that it
invents; otherwise, it has no other communication channels.
i.g
i.p
TAGMGR
j.g
j.p
B. Kernel Processes
PROCMGR
Two user processes, Ui and Uj, in the CSP model for Flume.
Fig. 4.
i:K and j :K are the kernel halves of these two processes (respectively),
TAGMGR is the process that manages the global set of tags and associated
privileges, PROCMGR manages the process ID space, and SWITCH enables
all user-visible interprocess communication. Arrows denote CSP communica-
tion channels.
The kernel halves communicate with one another to deliver IPCs
initiated by user processes. Also inside the kernel, a global process
(TAGMGR) manages the circulation of tags and globally-shared
privileges; another global process (PROCMGR) manages the process
ID space. The process SWITCH is involved with communication
between user-level processes. The remainder of this section ﬁlls out
the details of the Flume model.
A. System Call Interface
The “system-call” interface consists of events on the channel i.s
between Ui and i:K. Each user-level process has access to the
following system calls:
• t ← create tag(which)
Allocate a new tag t, and depending on the parameter which,
make the associated capabilities for t globally accessible. Here,
which can be one of None, Remove or Add. For Remove, add
t− to ˆO, effectively granting it to all other processes; likewise,
for Add, add t
+ to ˆO.
• rc ← change label(which, L)
Change the process’s which label to L. Return Ok on success
and Error on failure. Here, which can be either Secrecy or
Integrity.
• L ← get label(which)
Read this process’s own label out of the kernel’s data structures.
Here, which can be either Secrecy or Integrity, controlling
which label is read.
• O ← get caps()
Read this process’s ownership set out of the kernel’s data
structures.
• send(j, msg, X)
Send message msg and capabilities X to process j. (Crucially,
the sender gets no indication whether the transmission failed due
to label checks.)
• (msg, X) ← recv(j)
Receive message msg and capabilities X from process j. Block
until a message is ready.
• j ← fork()
Fork the current process; yield a process j. fork returns j in the
parent process and 0 in the child process.
• i ← getpid()
Return i, the ID of the current process.
• drop caps(X)
Set Oi ← Oi − X.
See Appendix E for a description of the select system call that allows
receiving processes to listen on multiple channels at once.
Each process i has an instantiation of the kernel process K that
obeys a strict state machine. We apply CSP’s standard technique for
“relabeling” the interior states of a process, giving i:K. By deﬁnition,
i:K and j:K have different alphabets for i (cid:8)= j, so their operations
cannot interfere. Each process i:K takes on a state conﬁguration
based on process i’s labels. That is, i:KS,I,O denotes the kernel half
of process i, with secrecy label Si ⊆ T , integrity label Ii ⊆ T , and
ownership of capabilities given by Oi ⊆ O.
At a high level, a kernel process K starts idle, then springs to life
upon receiving an activation message. Once active, it receives either
system calls from its user half, or internal messages from other kernel
processes on the system. It eventually dies when the user process
exits. In CSP notation:
K = b?(S, I, O) → KS,I,O
where b is the channel that K listens on for its “birth” message. It
expects arguments of the form (S, I, O), to instruct it which labels
and capabilities to start its execution with. Subsequently, KS,I,O
handles the bulk of the kernel process’s duties:
KS,I,O = SYSCALLS,I,O | INTRECVS,I,O
where SYSCALL is a subprocess tasked with handling all system
calls, and INTRECV is the internal receiving sub-process, tasked with
receiving internal messages from other kernel processes.
Each system call gets its own dedicated subprocess:
SYSCALLS,I,O = NEWTAGS,I,O |
CHANGELABELS,I,O |
READMYLABELS,I,O |
READMYCAPSS,I,O |
DROPCAPSS,I,O |
SENDS,I,O |
RECVS,I,O |
FORKS,I,O |
GETPIDS,I,O |
EXITS,I,O
Section IV-D presents all of these subprocesses in more detail.
C. Process Alphabets
In the next section, we will prove properties about the system, in
particular, that messages between “high processes” (those that have
a speciﬁed tag in their secrecy label) do not inﬂuence the activity of
“low processes.” The standard CSP approach to such proofs is to split
the system’s alphabet into two disjoint sets: “high” symbols, those
that the secret inﬂuences; and “low” symbols, those that should not
be affected by the secret. We must provide the appropriate alphabets
for these processes so that any symbol in the model unambiguously
belongs to one set or the other.
For example, take process i with secrecy label Si = {t} and
integrity label Ii = {}. When Ui
issues a system call (say
create tag(Add)) to its kernel half i:K, the trace for Ui is of the
form
(cid:10). . . , i.s!(create tag, Add), . . .(cid:11)
64
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:18:50 UTC from IEEE Xplore.  Restrictions apply. 
and the trace for the kernel half i:K is of the form
(cid:10). . . , i.s?(create tag, Add), . . .(cid:11) .
That is, Ui is sending a message (create tag, Add) on the channel
i.s, and i:K is receiving it. The problem, however, is that looking at
these traces does not capture the fact that i’s secrecy label contains t
and therefore that Ui is in a “high” state in which it should not affect
low processes. Such a shortcoming does not inhibit the accuracy
of the model, but it does inhibit the proof of noninterference in
Section V.
A solution to the problem is to include a process’s labels in the
messages it sends. That is, once i has a secrecy label of S = {t}, its
kernel process should be in a state such as K{t},{},{}. When a kernel
process is in this state, it will only receive system calls of the form
i.s?({t}, {}, {}, create tag, Add). Thus, Ui must now send system
calls in the form:
i.s!({t}, {}, {}, create tag, Add)
In this regime, Ui must do its own accounting of Si and Ii. If it fails
to do so and sent a system call of the form
i.s!({}, {}, {}, create tag, Add)
the kernel would reject the call. Such a failure on Ui’s part does not
compromise security guarantees.
Messages of the form c!(S, I, O, . . . ) and c?(S, I, O, . . . ), for
various channels c, occur often in our model. For concision, where S,
I and O can be inferred from context in a kernel process i:KS,I,O,
we use this notation:
(x) (cid:2) c!(S, I, O, x) ,
c !
κ
(x) (cid:2) c?(S, I, O, x)
c ?
κ
(fork) is
For example, kernel process i:K{t},{u},{t−}’s call to s ?
κ
expanded as s?({t}, {u}, {t
D. System Calls
−}, fork).
We now deﬁne the sub-processes of KS,I,O that correspond to
the kernel’s implementation of each system call. The ﬁrst system
call subprocess handles a user process’s request for new tags. Much
of this system call is handled by a subroutine call to the global tag
manager TAGMGR. After tag allocation, the kernel process transitions
to a different state, reﬂecting the new privilege(s) it acquired for tag
t.2
NEWTAGS,I,O =
(cid:2)
(create tag, w) →
s ?
κ
(create tag, w)?(t, Onew) →
g !
κ
t → KS,I,O∪Onew
s !
κ
(cid:3)