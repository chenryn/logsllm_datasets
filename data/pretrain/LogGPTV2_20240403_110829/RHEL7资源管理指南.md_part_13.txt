    OOM 终止程序立即终止。默认情况下，所有使用 `memory`{.systemitem}
    子系统的 cgroup 都会启用 OOM 终止程序。要禁用它，请在
    `memory.oom_control`{.filename} 文件中写入 `1`{.literal}：
    :::
    ``` screen
    ~]# echo 1 > /cgroup/memory/lab1/memory.oom_control
    ```
    ::: para
    禁用 OOM
    杀手程序后，尝试使用超过其允许内存的任务会被暂停，直到有额外内存可用。
    :::
    ::: para
    `memory.oom_control`{.filename} 文件也在 `under_oom`{.literal}
    条目下报告当前 cgroup 的 OOM 状态。如果该 cgroup
    缺少内存，则会暂停它里面的任务。`under_oom`{.literal} 条目报告值为
    `1`{.literal}。
    :::
    ::: para
    `memory.oom_control`{.filename} 文件可以使用 API 通知来报告 OOM
    情况的出现。 。
    :::
:::
::: section
::: titlepage
## [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#memory_example-usage}A.7.1. 示例应用 {.title}
:::
::: example
[⁠]{#ch-Subsystems_and_Tunable_Parameters.html#ex-OOM-control-notifications}
**例 A.3. OOM 控制和通知**
::: example-contents
::: para
以下示例将演示当 cgroup 中任务尝试使用超过其允许的内存时， OOM
终止程序的工作过程，以及通知处理程序是如何报告 OOM 状态的：
:::
::: {.procedure xmlns:d="http://docbook.org/ns/docbook"}
[⁠]{#ch-Subsystems_and_Tunable_Parameters.html#proc-oom-kill_and_notify}
1.  ::: para
    在层级中附加 `memory`{.systemitem} 子系统，并创建一个 cgroup：
    :::
    ``` screen
    ~]# mount -t memory -o memory memory /cgroup/memory
    ~]# mkdir /cgroup/memory/blue
    ```
2.  [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#proc-oom-step2}
    ::: para
    将 `blue`{.literal} cgroup 中任务可用的内存量设定为 100MB：
    :::
    ``` screen
    ~]# echo 104857600 > memory.limit_in_bytes
    ```
3.  ::: para
    进入 `blue`{.filename} 目录并确定已启用 OOM 终止程序：
    :::
    ``` screen
    ~]# cd /cgroup/memory/blue
    blue]# cat memory.oom_control
    oom_kill_disable 0
    under_oom 0
    ```
4.  ::: para
    将当前 shell 进程移动到 `blue`{.filename} cgroup 的
    `tasks`{.filename} 文件中，以便在这个 shell
    中启动的其它所有进程会自动移至 `blue`{.filename} cgroup：
    :::
    ``` screen
    blue]# echo $$ > tasks
    ```
5.  ::: para
    启动测试程序，尝试分配超过您在[步骤
    2](#ch-Subsystems_and_Tunable_Parameters.html#proc-oom-step2){.xref}
    中设定限额的内存量。`blue`{.systemitem} cgroup 消耗完内存后，OOM
    终止程序会终止测试程序，并在标准输出中报告 `Killed`{.literal}：
    :::
    ``` screen
    blue]# ~/mem-hog
    Killed
    ```
    ::: para
    以下是测试程序实例
    [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#idm140381162684544}[^\[1\]^](#ch-Subsystems_and_Tunable_Parameters.html#ftn.idm140381162684544){.footnote}：
    :::
    ``` programlisting
    ​
    ​#include 
    ​#include 
    ​#include 
    ​#include 
    ​
    ​#define KB (1024)
    ​#define MB (1024 * KB)
    ​#define GB (1024 * MB)
    ​
    ​int main(int argc, char *argv[])
    ​{
    ​	char *p;
    ​
    ​again:
    ​	while ((p = (char *)malloc(GB)))
    ​		memset(p, 0, GB);
    ​
    ​	while ((p = (char *)malloc(MB)))
    ​		memset(p, 0, MB);
    ​
    ​	while ((p = (char *)malloc(KB)))
    ​		memset(p, 0,
    ​				KB);
    ​
    ​	sleep(1);
    ​
    ​	goto again;
    ​
    ​	return 0;
    ​}
    ```
6.  ::: para
    禁用 OOM
    杀手程序，然后重新运行测试程序。这次该测试程序会暂停并等待额外的内存释放：
    :::
    ``` screen
    blue]# echo 1 > memory.oom_control
    blue]# ~/mem-hog
    ```
7.  ::: para
    虽然测试程序处于暂停状态，但请注意该 cgroup 的 `under_oom`{.literal}
    状态已更改，表示该 cgroup 缺少可用内存：
    :::
    ``` screen
    ~]# cat /cgroup/memory/blue/memory.oom_control
    oom_kill_disable 1
    under_oom 1
    ```
    ::: para
    重启 OOM 终止程序可以立即终止该测试程序。
    :::
8.  ::: para
    如要收到关于每一个 OOM 的通知，请创建一个 指定的程序。 例如
    [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#idm140381155472496}[^\[2\]^](#ch-Subsystems_and_Tunable_Parameters.html#ftn.idm140381155472496){.footnote}：
    :::
    ``` programlisting
    ​
    ​#include 
    ​#include 
    ​#include 
    ​#include 
    ​#include 
    ​#include 
    ​#include 
    ​#include 
    ​
    ​static inline void die(const char *msg)
    ​{
    ​	fprintf(stderr, "error: %s: %s(%d)\n", msg, strerror(errno), errno);
    ​	exit(EXIT_FAILURE);
    ​}
    ​
    ​static inline void usage(void)
    ​{
    ​	fprintf(stderr, "usage: oom_eventfd_test  \n");
    ​	exit(EXIT_FAILURE);
    ​}
    ​
    ​#define BUFSIZE 256
    ​
    ​int main(int argc, char *argv[])
    ​{
    ​	char buf[BUFSIZE];
    ​	int efd, cfd, ofd, rb, wb;
    ​	uint64_t u;
    ​
    ​	if (argc != 3)
    ​		usage();
    ​
    ​	if ((efd = eventfd(0, 0)) == -1)
    ​		die("eventfd");
    ​
    ​	if ((cfd = open(argv[1], O_WRONLY)) == -1)
    ​		die("cgroup.event_control");
    ​
    ​	if ((ofd = open(argv[2], O_RDONLY)) == -1)
    ​		die("memory.oom_control");
    ​
    ​	if ((wb = snprintf(buf, BUFSIZE, "%d %d", efd, ofd)) >= BUFSIZE)
    ​		die("buffer too small");
    ​
    ​	if (write(cfd, buf, wb) == -1)
    ​		die("write cgroup.event_control");
    ​
    ​	if (close(cfd) == -1)
    ​		die("close cgroup.event_control");
    ​
    ​	for (;;) {
    ​		if (read(efd, &u, sizeof(uint64_t)) != sizeof(uint64_t))
    ​			die("read eventfd");
    ​
    ​		printf("mem_cgroup oom event received\n");
    ​	}
    ​
    ​	return 0;
    ​}
    ```
    ::: para
    上述程序会探测 OOM 状态（从被命令列指定为参数的 cgroup 中），并使用
    `mem_cgroup oom event received`{.literal} 字符串在标准输出中报告。
    :::
9.  ::: para
    在一个独立的控制台中运行上述通知处理程序，并将 `blue`{.filename}
    cgroup 的控制文件指定为参数：
    :::
    ``` screen
    ~]$ ./oom_notification /cgroup/memory/blue/cgroup.event_control /cgroup/memory/blue/memory.oom_control
    ```
10. ::: para
    在另一个控制台中运行 `mem_hog`{.filename} 测试程序，以便生成 OOM
    状态，并查看 `oom_notification`{.filename} 程序在标准输出中的报告：
    :::
    ``` screen
    blue]# ~/mem-hog
    ```
:::
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#sec-net_cls}A.8. net_cls {.title}
:::
::: para
`net_cls`{.systemitem}
子系统使用等级识别符（classid）标记网络数据包，这让 Linux
流量管控器（[**tc**]{.application}）可以识别从特定 cgroup
中生成的数据包。可配置流量管控器，让其为不同 cgroup
中的数据包设定不同的优先级。
:::
::: variablelist
[net_cls.classid]{.term}
:   ::: para
    `net_cls.classid`{.filename} 包含表示流量控制 *handle*
    的单一数值。从 `net_cls.classid`{.filename} 文件中读取的 *`classid`*
    值是十进制格式，但写入该文件的值则为十六进制格式。例如：`0x100001`{.literal}
    表示控制点通常写为 [iproute2]{.package} 所用的 `10:1`{.literal}
    格式。在 `net_cls.classid`{.filename} 文件中，将以数字
    `1048577`{.literal} 表示。
    :::
    ::: para
    这些控制点的格式为：`0xAAAABBBB`{.literal}，其中 *AAAA*
    是十六进制主设备号，*BBBB*
    是十六进制副设备号。您可以忽略前面的零；`0x10001`{.literal} 与
    `0x00010001`{.literal} 一样，代表 `1:1`{.literal}。以下是在
    `net_cls.classid`{.filename} 文件中设定 `10:1`{.literal}
    控制点的示例：
    :::
    ``` screen
    ~]# echo 0x100001 > /cgroup/net_cls/red/net_cls.classid
    ~]# cat /cgroup/net_cls/red/net_cls.classid
    1048577
    ```
:::
::: para
请参考 [**tc**]{.application} 的 manual page
来了解如何配置流量管控器来使用 `net_cls`{.systemitem}
添加到网络数据包中的控制点。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-Subsystems_and_Tunable_Parameters.html#net_prio}A.9. net_prio {.title}
:::
::: para
网络优先权（`net_prio`{.systemitem}）子系统可以为各个 cgroup
中的应用程序动态配置每个网络接口的流量优先级。网络优先级是一个分配给网络流量的数值，可在系统内部和网络设备间使用。网络优先级用来区分发送、排队以及丢失的数据包。可使用
`tc`{.command} 命令设定网络优先级（使用 `tc`{.command}
命令设定网络优先权的方法将不在本指南中介绍，详情请参考 `tc`{.command}
manual page）。
:::
::: para
通常程序会使用 `SO_PRIORITY`{.systemitem}
插槽选项设定其流量的优先级。但应用程序常常没有设定优先级数值的代码，或者程序的流量是特定的，并且不提供确定的优先级。
:::
::: para
在 cgroup 中使用 `net_prio`{.systemitem}
子系统可让管理员将某个进程分配给具体的 cgroup，该 cgroup
会为指定网络接口的传出流量定义优先级。
:::
::: variablelist
[net_prio.prioidx]{.term}
:   ::: para
    只读文件。它包含一个特有整数值，kernel 使用该整数值作为这个 cgroup
    的内部代表。
    :::
[net_prio.ifpriomap]{.term}
:   ::: para
    包含优先级图谱，这些优先级被分配给源于此群组进程的流量以及通过不同接口离开系统的流量。该图用
    *` `* 的形式以成对列表表示：
    :::
    ``` screen
    ~]# cat /cgroup/net_prio/iscsi/net_prio.ifpriomap
    eth0 5
    eth1 4
    eth2 6
    ```
    ::: para
    `net_prio.ifpriomap`{.filename}
    文件的目录可以使用上述格式，通过将字符串回显至文件的方式来修改。例如：
    :::
    ``` screen
    ~]# echo "eth0 5" > /cgroup/net_prio/iscsi/net_prio.ifpriomap
    ```
    ::: para
    上述指令将强制设定任何源于 `iscsi`{.systemitem}
    `net_prio`{.systemitem} cgroup 进程的流量和 `eth0`{.systemitem}
    网络接口传出的流量的优先级为 `5`{.constant}。父 cgroup 也有可写入的
    `net_prio.ifpriomap`{.filename} 文件，可以设定系统默认优先级。
    :::