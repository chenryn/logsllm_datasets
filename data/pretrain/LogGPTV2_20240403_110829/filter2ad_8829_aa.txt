### 前言
栈溢出告一段落。本文介绍下 `uClibc` 中的 `malloc` 和 `free` 实现。为堆溢出的利用准备基础。`uClibc` 是 `glibc`
的一个精简版，主要用于嵌入式设备，比如路由器就基本使用的是 `uClibc`， 简单自然效率高。所以他和一般的`x86`的堆分配机制会有些不一样。
### 正文
uClibc 的 `malloc` 有三种实现，分别为：
其中 `malloc-standard` 是最近更新的。它就是把 `glibc` 的 `dlmalloc` 移植到了 `uClibc`中。`malloc`
是`uClibc`最开始版本用的 `malloc`。本文分析的也是`malloc`目录下的`uClibc`自己最初实现的 `malloc`。 因为如果是
`malloc-standard` 我们可以直接按照 一般 `linux` 中的堆漏洞相关的利用技巧来利用它。
现在编译 `uClibc` 的话默认使用的是 `malloc-standard` ，我也不知道该怎么切换，所以就纯静态看看 `malloc`目录下的实现了。
#### malloc
从 `malloc` 的入口开始分析。 为了简单起见删掉了无关代码。
    //malloc 返回一个指定大小为 __size 的指针。
    /*
    调用 malloc 申请空间时，先检查该链表中是否有满足条件的空闲区域节点
    如果没有，则向内核申请内存空间，放入这个链表中，然后再重新在链表中
    查找一次满足条件的空闲区域节点。
    它实际上是调用 malloc_from_heap 从空闲区域中申请空间。
    */
    void *
    malloc (size_t size)
    {
      void *mem;
      //参数有效性检测。这里没有检测参数为负的情况
      if (unlikely (size == 0))
        goto oom;
      mem = malloc_from_heap (size, &__malloc_heap, &__malloc_heap_lock);
      return mem;
    }
`malloc` 实际使用的是 `malloc_from_heap` 来分配内存。
    static void *
    __malloc_from_heap (size_t size, struct heap_free_area **heap
            )
    {
      void *mem
      /* 一个 malloc 块的结构如下：
          +--------+---------+-------------------+
          | SIZE   |(unused) | allocation  ...   |
          +--------+---------+-------------------+
          ^ BASE             ^ ADDR
          ^ ADDR - MALLOC_ALIGN
          申请成功后返回的地址是 ADDR
          SIZE 表示块的大小，包括前面的那部分，也就是 MALLOC_HEADER_SIZE
       */
      //实际要分配的大小，叫上 header的大小
      size += MALLOC_HEADER_SIZE;
    //加锁
      __heap_lock (heap_lock);
      /* First try to get memory that's already in our heap.  */
      //首先尝试从heap分配内存.这函数见前面的分析
      mem = __heap_alloc (heap, &size);
      __heap_unlock (heap_lock);
      /*
      后面是分配失败的流程，会调用系统调用从操作系统分配内存到 heap, 然后再调用__heap_alloc，进行分配，本文不在分析。
      */
计算需要分配内存块的真实大小后进入 `__heap_alloc` 分配。
在 `heap`中使用 `heap_free_area` 来管理空闲内存，它定义在 `heap.h`
    /*
    struct heap_free_area
    {
        size_t size;  //空闲区的大小
         //用于构造循环链表
        struct heap_free_area *next, *prev;
    };
    size 表示该空闲区域的大小，这个空闲区域的实际地址并没有用指针详细地指明，
    因为它就位于当前 heap_free_area 节点的前面，如下图所示：
    +-------------------------------+--------------------+
    |                               |   heap_free_area   |
    +-------------------------------+--------------------+
    \___________ 空闲空间 ___________/\___ 空闲空间信息 ___/
    实际可用的空闲空间大小为 size – sizeof(struct heap_free_area)
    指针 next, prev 分别指向下一个和上一个空间区域，
    所有的空闲区域就是通过许许多多这样的节点链起来的，
    很显然，这样组成的是一个双向链表。
    */
所以 `free` 块在内存中的存储方式和 `glibc` 中的存储方式是不一样的。它的元数据在块的末尾，而 `glibc`中元数据在 块的开头。
下面继续分析 `__heap_alloc`
    /* 
       堆heap中分配size字节的内存
       */
    void *
    __heap_alloc (struct heap_free_area **heap, size_t *size)
    {
      struct heap_free_area *fa;
      size_t _size = *size;
      void *mem = 0;
      /* 根据 HEAP_GRANULARITY 大小向上取整，在 heap.h 中定义 */
      _size = HEAP_ADJUST_SIZE (_size);
      //如果要分配的内存比FA结构还要小，那就调整它为FA大小
      if (_size next)
        if (fa->size >= _size)
          {
            /* Found one!  */
            mem = HEAP_FREE_AREA_START (fa);
             //从该空间中分得内存。这函数前面已经分析过了
            *size = __heap_free_area_alloc (heap, fa, _size);
            break;
          }
      return mem;
    }
找到`大小 >= 请求size` 的 `heap_free_area`，然后进入 `__heap_free_area_alloc 分配`。
    /* 
       该函数从fa所表示的heap_free_area中，分配size大小的内存
       */
    static __inline__ size_t
    __heap_free_area_alloc (struct heap_free_area **heap,
                struct heap_free_area *fa, size_t size)
    {
      size_t fa_size = fa->size;
      //如果该空闲区剩余的内存太少。将它全部都分配出去
      if (fa_size size __________/
               分配后：
                 ___ 已分配 __   __ 空闲空间 __   __ 空闲空间信息 __
            /             \ /              \ /                  \
            +-------------------------------+--------------------+
            |              |                |   heap_free_area   |
            +-------------------------------+--------------------+
            \____ size ___/ \__ fa->size __/
            */
        fa->size = fa_size - size;
      return size;
    }
注释很清晰了。所以如果我们有一个堆溢出，我们就需要覆盖到下面空闲空间的 `heap_free_area` 中的 指针，才能实现 `uClibc` 中的
`unlink` 攻击（当然还要其他条件的配合）,另外我们也知道了在 `malloc` 的时候，找到合适的 `heap_free_area` 后，只需要修改
`heap_free_area` 的 size位就可以实现了分配，所以在 `malloc` 中是无法 触发类似 `unlink` 的攻击的。
下面进入 `free`