6Project link: https://github.com/jhuisi/auto-tools
5
Figure 1: A high-level presentation of the AutoGroup+ tool. Components that are new or improved,
over AutoGroup, are included with dashed lines. Both AutoGroup+ and AutoGroup use external tools
Z3, SDL Parser and Code generator (omitted from the ﬁgure).
3.1.1 Step 1: Generating Computer-Readable Inputs
AutoGroup+ operates on four inputs: an abstract description of the (1) scheme itself, (2) the
complexity assumption(s) on which the scheme is based, (3) the black-box reduction in the scheme’s
proof of security, and (4) a set of eﬃciency optimization constraints speciﬁed by the user (e.g.,
optimize for smallest key or ciphertext size.). The abstract descriptions are all speciﬁed in a
Scheme Description Language (SDL) [AGHP12, AGH13].
The need for SDL representations of the complexity assumptions and security reductions are
new challenges for this work. To run our Section 5 tests, we had to translate the text in the
published papers to the SDL format by hand. This was a time-consuming and tedious task. How-
ever, we maximize the beneﬁt of doing this, by making these SDL ﬁles publicly available. This
enables anyone to check their correctness and provides a ready-made base of test ﬁles for any future
automation exercises that require this deeper scheme analysis.
One novel and curious observation we made during these experiments was that how group
elements were derived in the symmetric group impacted the dependency graphs and therefore the
asymmetric results. To say this another way, two schemes computing the exact same elements,
but in diﬀerent ways, could have diﬀerent dependency graphs and therefore diﬀerent asymmetric
translations. As a toy example, suppose a scheme has PK = (g, A = ga, B = gb) and SK =
(PK, a, b). Now suppose that as part of a signing algorithm, the holder of SK must compute the
value C = gab. Suppose in Scheme 1, the signer computes this as x = ab mod p and C = gx.
Suppose in Scheme 2, the signer computes this as C = Ab. Then in the dependency graph for
Scheme 1, there is a root node g, with nodes A and C hanging oﬀ it. Whereas for the graph of
Scheme 2, there is a root node g with A oﬀ it, and C oﬀ of A. The importance of these diﬀerences
comes alive when we attempt to split the graph (see Step 3.1.4). Suppose there is the pairing
e(A, C). Then in Scheme 1, the generator g must be split, but A can be assigned to G1 and C to
G2, resulting in a 4 element public key. However, in Scheme 2, the generator g and the element A
must be split, with A1 ∈ G1 and A2 ∈ G2, so that one can compute C = (A2)b ∈ G2. This results
in a 5 element public key. The general rule is that the fewer unnecessary dependencies the better.
6
Input: SDL ofScheme SSDL ParserExtract Dependenciesfrom S and Assumption(s)Output: SDL ofScheme S'Program Slice/Graphfor each pairing inputMerge Dependency Graphs into GAutoGroup+Execute Z31. ﬁnd all solutions that respect constraints2. reduce iteratively by user constraint priorities3. split graph G using selected solution4. check that split is validEfﬁciency Passoptimize solutionInput: SDL of SymmetricAssumption(s)Input: SDL of ReductionExtract Dependenciesintroduced in ReductionOutput: SDL ofAsymmetric Assumption(s)Encode  Pairings/Hashes from G as Formula & ConstraintsInput: User Optimization ConstraintsInterestingly, Abe et al. [AGOT14] sometimes added dependencies that did not exist in the original
schemes. For instance, for the Waters 2005 IBE [Wat05], Waters clearly states to choose g2, u(cid:48), ui
as fresh random generators, but Abe et al. explicitly ”assume” that they are generated from a
separate generator g. For this particular scheme, this does not impact the asymmetric translations,
but in theory it could.
Our experiments did not add any dependencies. We note that in this step, a human is not
being tasked with any job but simple transcription of the input into a language the computer can
understand.
System Limitations and Allowable Inputs This system shares some of the same limitations
as prior works [AGH13, AGOT14]. First, this is a junk-in-makes-junk-out system. AutoGroup+ as-
sumes that the security reduction is correct, the complexity assumptions are true, and that the
SDL was typed in correctly. If any of these turn out to be false, the output cannot be depended on.
Fortunately, we can mitigate these risks as follows. The correctness of the security reductions might
be veriﬁed automatically using a number of tools, such as EasyCrypt [Tea], but this likely requires
further research. The pairing-based assumptions may be sanity-checked in the generic group model
using the recently developed tool by Barthe et al. [BFF+14] from CRYPTO 2014. Finally, the SDL
transcriptions can be veriﬁed in the usual crowd-based manner which we encourage by making
them public.
Second, the system does not accept all possible schemes that might appear in the literature.
AutoGroup+ supports only prime-order symmetric pairing schemes with a “standard” reduction
analysis7.
It can also support dynamic (also
called q-based) assumptions, where the size of the assumption may grow depending on the usage
of the scheme. It can also support interactive (also called oracle-based) assumptions such as the
LRSW assumption behind the popular Camenisch-Lysyanskaya [CL04] pairing-based signatures.
It can support most non-interactive assumptions.
Third, how the scheme hashes into pairing groups also may disqualify it from being translated.
We now give an example of how to alter the Setup algorithm of the Waters 2005 IBE scheme [Wat05],
so that AutoGroup+ cannot translate it. (Indeed, it is not clear to us if a translation even exists.)
In the original Setup algorithm, the master authority chooses a generator g ∈ G at random. Then
public parameter g1 is derived from g, while parameters g2, u0, . . . , un ∈ G are chosen independently
at random. Instead, suppose we treat the hash function H : {0, 1}∗ → G as a random oracle. Let
generator g ∈ G be computed as g = H(ID), where ID is some string describing the master
authority. Then g1 is derived from g as before, but we set g2 = gr, u0 = gr0, . . . , un = grn for
random r, r0, . . . , rn ∈ Zp (where p is the order of G). It is easy to see that the public parameters
have the same distribution as before (assuming the random oracle model); all we have changed is
how the master authority samples these parameters. Thus, this variant of the Waters IBE remains
secure in the symmetric setting, and yet it is not clear how to translate it to the asymmetric setting.
We return to this example in Section 5.
These limitations also appear in the theoretical work of Abe et al. [AGOT14], and fortunately,
these issues seem relatively rare and did not come up for any of the schemes we tested (except
our hand-made counterexample). As in [AGH13, AGOT14], we note that if AutoGroup+ cannot
produce a translation, it does not imply that a translation does not exist. A characterization of
7We refer the reader to Abe et al. [AGOT14] for a formal deﬁnition of the allowed reductions. Roughly, we mean
an analysis where there is an eﬃcient algorithm called a reduction that is successful in solving the hard problem
(underlying the complexity assumption) given black-box access to an adversary that successfully attacks the scheme.
7
untranslatable schemes is an open theoretical problem.
3.1.2 Step 2: Extracting Algebraic Dependencies
Once AutoGroup+ has parsed all its input ﬁles, it begins processing them to graph the algebraic
dependencies between source group elements in a scheme, assumption and reduction. All source
group elements are nodes in the graph and a directed edge exists if there is a direct dependency
between two elements. E.g., if h = gx, then h is derived from g and we place an edge from g and h.
AutoGroup+ extracts the dependency graphs automatically from the SDL for each input ﬁle and
builds a distinct graph from the SDL representations and metadata. AutoGroup+ deﬁnes two new
procedures that programmatically extract the dependency graph for the assumption(s) as well as
the reduction(s) (see Section 4 for an example). Then, AutoGroup+ reuses logic from AutoGroup to
programmatically build the graph of the scheme by tracking the generators in the setup algorithm
and by tracing backward from each pairing in the scheme. It merges the program slice (or trace)
extracted for each pairing input into one dependency graph for the scheme. The resulting graphs
are the same as those produced by Abe et al. [AGOT14] (except where we reduced dependencies
by computing elements more directly as discussed in the last step.)
The work of Abe et al. [AGOT14] required a human to build (and later merge) these dependency
graphs by hand and the graphs were constructed starting from the common generators downward.
The AutoGroup work of Akinyele et al.[AGH13] automatically derived these graphs for the scheme
only from the SDL description of the scheme. They did not consider the assumptions or reduction
dependencies. Indeed, AutoGroup only graphed the dependencies as a traceback from the pairings,
whereas AutoGroup+ also adds a top-down analysis from the assumption down to the pairings for
the security logic.
3.1.3 Step 3: Merge Dependency Graphs
After extracting the dependencies, AutoGroup+ has a set of distinct graphs: one graph that repre-
sents dependencies from the setup, key generation, encryption/signature and decryption/veriﬁcation
algorithms, as well as a graph for each complexity assumption and one or more graphs for the re-
duction. These graphs are then systematically merged together using the metadata provided with
the SDL inputs. The metadata includes a reduction map which relates the names of source group
elements in the reduction to those in the assumption. We require this map to understand which
nodes represent the same group element (across the scheme, assumption and reduction) to simplify
merging into a single node. See the example in Section 4. AutoGroup+ programmatically checks
the type information in the reduction map across all SDL inputs to ensure correctness during the
merge.
3.1.4 Step 4: Assign Variables using the SMT Solver
This is the most complex step in the automation. In the symmetric setting, all group elements
in the scheme were in G. To move to the asymmetric setting, we must assign elements to either
G1 or G2 in such a way that the dependencies between elements are not violated (e.g., if h = gx,
then both g, h must be in the same group) and such that for all variables a, b, if we have a pairing
between them e(a, b), then a and b must be in distinct source groups (e.g., a ∈ G1 and b ∈ G2 or
8
vice versa). Such an assignment may not be feasible (see such an example in Section 3.1.1) or it
may require that one or more variables in the symmetric scheme be duplicated in the asymmetric
scheme with one assigned to G1 and another to G2. E.g., in the symmetric setting if g ∈ G, a = gx
and b = gy and these elements are paired as e(a, b), then in the asymmetric setting, g will be split
into g1 ∈ G1 and g2 ∈ G2, where a = gx
2 , so that one can compute e(a, b).
1 and b = gy
To eﬃciently make these variable assignments, AutoGroup+ follows the approach of Auto-
Group in that it uses a powerful Z3 Satisﬁability Modulo Theories (SMT) solver produced by
Microsoft Research (see Section 2) to compute the set of all possible splits (i.e., all possible vari-
able assignment combinations) and then later identiﬁes the best one. Z3 takes as input a logical
formula and determines whether valid variable assignments exist that evaluate that formula to true.
Similar to AutoGroup, AutoGroup+ expresses the pairing equations as a logical formula of conjunc-
tions and inequality operations over binary variables. For example, e(a, b) · e(c, d) is translated
to the logical formula P 1[0] (cid:54)= P 1[1] ∧ P 2[0] (cid:54)= P 2[1] where P 1[0] is a reference to a, P 1[1] to
b, and so on. AutoGroup+ simply follows the pairing identiﬁer convention established by Abe et
al. [AGOT14].
One major diﬀerence between AutoGroup+ and AutoGroup is that the former’s dependency
graphs include dependencies based on the assumptions and reductions. The formula is derived
from the pairings that occur in the graph (from the construction, reduction and assumption(s))
with a conjunction joining each pairing piece, plus extra constraints added for variables that cannot
be duplicated (regarding hashing). This formula is then fed into the solver. The solver returns a
set of 0 or 1 assignments for each variable. We then apply each solution to the merged dependency
graph to generate the split (variables assigned to 0 on one side and the rest on the other).
3.1.5 Step 5: Search for Optimal Solution
There are often many (possibly thousands) of ways to translate a symmetric scheme into an asym-
metric scheme; thus, we can end up with many feasible graph splits. Indeed, the output of the
SMT solver in the last step is a set of assignments of the variables.
In this step, we again use
the SMT solver to deduce which assignment from this set is “best”. AutoGroup+ allows selection
of assignments based on a number of user-speciﬁed optimization constraints. For public-key en-
cryption, the user can choose to minimize the public-key, assumption, secret key and/or ciphertext
size. Similarly for signature schemes, the user can mimize the public-key parameters, assumption,
and/or the signature size.
To select an optimal assignment, AutoGroup+ encodes these user requirements as parameters
of some objective function. We then call the solver a second time with this objective function set to
rank/narrow the given solutions to one. Depending on the optimization goal, the objective function
can be speciﬁed in one of two ways. If reducing public-key size or the assumption, then we are
concerned with minimizing the duplication of source group elements. As such, we ﬁrst specify an
EvalGraph function that the solver uses to compute the splits for each element in the public key
or assumption: EvalGraph(Aj, B, G) = S, where Aj = a1, . . . , an represents pairing input variable
assignments for the j-th solution (each ai variable is either 0 = G1 or 1 = G2), B = b1, . . . , bm
represents the source group elements to minimize either in the assumption or public-key, and G
represents the merged dependency graph.
Our search algorithm ﬁrst applies the EvalGraph function to determine how the bi values are
assigned for each solution. Once the bi values are assigned, we then compute S = s1, . . . , sm where
9
each si corresponds to one of three values for each bi assignment. That is, let a w1 value denote a
G1 only assignment, w2 is G2 only, and w3 = w1 + w2 is both a G1 and G2 assignment (or simply
a split). We then set w1 and w2 to the group size of G1 and G2 for Type-III pairing curves (e.g.,
BN256). Each solution is ranked in terms of splits and the total size of group elements in B. Our
search returns the j-th solution that results in the fewest splits in B with the smallest overall size
Sj. This overall size breaks ties between multiple solutions with the same number of splits.
j∈|A| (CountSplits(Sj),
min
Sj,i)
(1)
For the other optimization options (i.e., secret-key, ciphertext, etc), we can reuse the objective
function speciﬁed by AutoGroup as is:
m(cid:88)
i=1
n(cid:88)
i=1
min
j∈|A| F (Aj, C, w1, w2) =
((1 − ai) · w1 + ai · w2) · ci
(2)
where the Aj represents the j-th solution as before, C = {c1, . . . , cn} represent some cost associated
with each ai variable reference, and w1 and w2 correspond to weights (for diﬀerent Type-III pairing
curves) over groups G1 and G2. By encoding these cost values, it is feasible to create diﬀerent
weight functions that adhere to the user speciﬁed constraints. Once these functions are speciﬁed
correctly, we minimize it across the set of assignments and return the solution that yields the lowest
value. Thus, the combination of equations 1 and 2 yield all the possible ways a current user can
optimize a given symmetric scheme. Further optimizations are future work.
Once the “best” solution is found, we have a CheckValidSplit procedure that veriﬁes that the
conditions (1) and (2) of a “valid split” hold as deﬁned in Deﬁnition 3.1. If this solution satisﬁes
these conditions, we are done. If not, we simply test the next best solution, because the solver
caches all solutions and we record metadata about each solution in terms of eﬃciency and security.
3.1.6 Step 6: Evaluate and Process the Solution
Once a split is chosen, AutoGroup+ must reconstruct SDL for the asymmetric scheme and assump-
tion(s). It reuses the functionality provided by AutoGroup to construct the SDL as dictated by
the split.8 To output the new asymmetric assumptions, AutoGroup+ follows the logic of Abe et
al. [AGOT14] (although they did not implement this step) and implements a new procedure that
uses the graph split to reconstruct the asymmetric assumption(s). For each element in the asymmet-
ric assumption, we learn the new assignments of the elements using the graph split and mechanically
generate the asymmetric assumption SDL. Finally, we rely on existing tools [AGHP12, AGH13] to
translate the new asymmetric SDL representation into executable code for C++ or Python, or
simply LATEX.
3.2 Analysis of AutoGroup+
We analyze AutoGroup+’s security and optimizations.
Security. At a high-level, the Abe et al. [AGOT14] security argument works as follows. In the
Type-I setting, we treat G1 = G2 because there are eﬃcient isomorphisms between these two
8We further perform an eﬃciency check on the ﬁnal scheme as previously done in AutoGroup.
10
groups. However, suppose we work in the generic Type-I group model, where elements are a
black box and to compute this isomorphism, a party must utilize an oracle O. Next, consider
moving to a Type-III group, where every element (for which the discrete logarithm is known with
respect to the base generators) is duplicated; that is, for h = gx ∈ G, we have h1 = gx
1 ∈ G1
2 ∈ G2. Then in the generic Type-III group model, we can simulate having eﬃciently
and h2 = gx
computable isomorphisms between these groups by exposing an oracle O(cid:48) that on input d1 ∈ G1
outputs d2 ∈ G2 (or vice versa).
In essence, by exposing the “corresponding” group element
(through the oracle in the Type-III setting), we “allow” all necessary isomorphism computations
for the scheme itself to operate, however, at the same time, we can argue that any adversary
that breaks this scheme (with these elements exposed) can be turned into an attacker against the
Type-I scheme, where these isomorphisms are natively computable. The resulting theorem was
summarized in Theorem 1.1: namely, the Type-III conversion will be secure in the generic group
model, if one follows the conversion criteria in [AGOT14] and the Type-I input was secure in the
generic group model.
Thus, we must argue that the AutoGroup+ implementation satisﬁes the criteria in [AGOT14].
The dependency graphs are created and merged according to the same algorithm. (AutoGroup+
tracks some additional information on the side for optimization purposes.) What is required is that
the splitting of the merged dependency graph satisﬁes Abe et al.’s notion of a “valid split.”
Deﬁnition 3.1 (Valid Split [AGOT14]). Let Γ = (V, E) be a dependency graph for Π = (S, R, A), a
tuple representing a scheme, reduction and assumption(s) that are in the set covered by the [AGOT14]
translation. Let P = (p1[0], . . . , pn[1]) ⊂ V be pairing nodes. A pair of graphs Γ0 = (V0, E0) and
Γ1 = (V1, E1) is a valid split of Γ with respect to NoDup ⊆ V if the following hold:
1. merging Γ0 and Γ1 recovers Γ,
2. for each i ∈ {0, 1} and every X ∈ Vi\P , the ancestor subgraph of X in Γ is included in Γi.
3. for each i ∈ {1, . . . , np} pairing nodes pi[0] and pi[1] are separately included in V0 and V1,
4. No node in V0 ∩ V1 is included in NoDup. NoDup is a list of nodes that cannot be assigned to
both V0 and V1.
In terms of AutoGroup+ security, conditions (1) and (2) are satisﬁed in the search procedure
(step 5). That is, before we admit a split, we do these simple tests. Condition (3) is satisﬁed by
the SMT solver with the logical formula encoding of pairing nodes (step 4). Condition (4) is also
satisﬁed by the SMT solver (step 4). We encode the output of hashes as constraints over the logical
formula; speciﬁcally, we ask the solver to ﬁnd splits that keep hashes in G1. This is the only place
we diﬀer slightly. Abe et al. allow G1 or G2 assignment for hashes but not both. Our approach
prioritizes solutions that preserve eﬃciency but we could give the user the option of relaxing this
to match Abe et al. The translation back to SDL is fairly straightforward from the split.
Optimizations.
In terms of optimality over the set of solutions admitted by the “valid split”
method, AutoGroup+ ﬁnds the “best” one by searching over the entire set. It does this eﬃciently
by turning the user-speciﬁed optimizations into the appropriate objective function and passing this
function into the SMT solver. Our experiments in Section 5 provide evidence that the tool is,
indeed, ﬁnding the optimal solutions over the space of valid translations.
11
As discussed in Section 1.1, we do not rule out the existence of even better solutions that employ
insights outside of this method (such as altering the construction or adding “stronger” assumptions,
such as SXDH.)
4 An Automation Example with BB-HIBE
In this section, we illustrate each phase of the AutoGroup+ implementation described in Section 3
by showing the step-by-step translation of the Boneh-Boyen hierarchical identity-based encryp-
tion [BB04a] (or BB HIBE) scheme. We begin by recalling the scheme: an eﬃcient HIBE scheme
(with (cid:96) = 2) [BB04b, §4.1] that is selective identity secure based on the standard Decisional
Bilinear-Diﬃe Hellman (DBDH) assumption.
This scheme consists of four algorithms: Setup, KeyGen, Encrypt and Decrypt. The Setup
algorithm takes as input a security parameter and deﬁnes public keys (ID) of depth (cid:96) as vectors
p. We deﬁne (cid:96) = 2, thus the identity is comprised of ID = (ID1, ID2) ∈ Z2
of elements in Z(cid:96)
p.
The algorithm generates system parameters as follows. First, select a random generator g ∈ G,
a random α ∈ Zp, and sets g1 = gα. Then, pick random h1, h2, g2 ∈ G. Set the master public
parameters params = (g, g1, g2, h1, h2) and the master secret key msk = g2
The KeyGen algorithm takes as input an ID = (ID1, ID2) ∈ Zp
2, picks random r1, r2 ∈ Zp and
outputs:
α.
d1 = g2
α · (g1
ID1 · h1)r1 · (g1
ID2 · h2)r2, d2 = gr1, d3 = gr2
and the algorithm outputs dID = (d1, d2, d3)
The Encrypt algorithm takes as input the public parameters params, an identity ID and a message
M ∈ GT . To encrypt the message M under the public key ID = (ID1, ID2), picks a random s ∈ Zp
and computes:
C = (e(g1, g2)s · M, gs, (g1
ID1 · h1)s, (g1
ID2 · h2)s)
and the algorithm outputs C = (C1, C2, C3, C4).
The Decrypt algorithm takes as input a private key dID = (d1, d2, d3) and a ciphertext C and
computes M as:
M = C1 · e(C3, d2) · e(C4, d3)
e(C2, d1)
The scheme is based on the DBDH assumption.
Assumption 1 (Decisional Bilinear Diﬃe-Hellman). Let g generate group G of prime order p ∈
Θ(2λ) with mapping e : G × G → GT . For all p.p.t. adversaries A, the following probability is
negligible in λ:
| 1
2 − Pr[a, b, c ← Zp, z ← {0, 1}, A = ga,
B = gb, C = gc, T0 = e(g, g)abc, T1 ← GT ;
z(cid:48) ← A(g, A, B, C, Tz) : z = z(cid:48)]|.
12
In order for AutoGroup+ to perform the translation, we ﬁrst
Step 1: Generating SDL Inputs
begin by transcribing the scheme, reduction and the DBDH assumption into SDL. We provide the
SDL description of the above scheme, reduction and assumption in Appendix B. The reader will
notice that the SDL descriptions closely and concisely follow the paper counterpart. This design