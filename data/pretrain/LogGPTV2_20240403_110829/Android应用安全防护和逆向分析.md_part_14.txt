2）在"Bytecode for Dalvik VM"里找到对应的Syntax和format。
::: bodypic-c
![](OEBPS/Images/127-i.jpg){.calibre328}
:::
3）在"Dalvik VM Instruction
Format"里查找21c，得知op=0x62的指令占据2个16位数据，格式是AA\|op
BBBB，解释为op
vAA，type@BBBB。因此这8组16位数据里，前2个是一组。对比数据得AA=0x00，BBBB=0x0000。
4）返回"Bytecode for Dalvik
VM"里查阅对sget_object的解释，AA的值表示Value
Register，即0号寄存器；BBBB表示static
field的index，就是之前分析的field_ids区里Index=0指向的那个东西，当时的fields_ids的分析结果如下：
::: bodypic-c
![](OEBPS/Images/127-2-i.jpg){.calibre329}
:::
对field常用的表述是：包含field的类型→field名称：field类型。此次指向的就是Ljava/lang/System；→out：Ljava/io/printStream。
5）综上所述，前2个16位数据0x 0062 0000解释为：
::: bodypic-c
![](OEBPS/Images/127-3-i.jpg){.calibre330}
:::
其余的6个16位数据分析思路与这个一样，依次整理如下：
::: bodypic-c
![](OEBPS/Images/127-4-i.jpg){.calibre331}
:::
6）最后再整理下main method，用容易理解的方式表示出来就是：
::: bodypic-c
![](OEBPS/Images/127-5-i.jpg){.calibre332}
:::
看起来很像smali格式语言，不妨使用smali反编译Hello.dex，看看smali生成的代码跟方才推导出来的有什么差异，结果如下：
::: bodypic-c
![](OEBPS/Images/127-6-i.jpg){.calibre333}
:::
::: bodypic-c
![](OEBPS/Images/128-i.jpg){.calibre334}
:::
从内容上看，二者形式上有些差异，但表述的是同一个method。这说明刚才分析的路子是没有跑偏的。另外一个method是\，若是分析的话，思路和流程跟main一样。走到这里，心里很踏实了。
[]{#045.xhtml}
#### 7.4 解析代码 {.bodycontent-title2}
上面解析完了所有的数据结构区域，下面就来看看具体的解析代码，由于篇幅的原因，这里就不贴出全部的代码了，只贴出核心的代码。
##### 7.4.1 解析头部信息 {.bodycontent-title3}
解析代码如下：
::: bodypic-c
![](OEBPS/Images/128-2-i.jpg){.calibre335}
:::
这里就是记录几个索引区的偏移值和大小信息，解析结果如下：
::: bodypic-c
![](OEBPS/Images/129-i.jpg){.calibre336}
:::
##### 7.4.2 解析string_ids索引区 {.bodycontent-title3}
解析代码如下：
::: bodypic-c
![](OEBPS/Images/129-2-i.jpg){.calibre337}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/129-3-i.jpg){.calibre338}
:::
::: bodypic-c
![](OEBPS/Images/130-i.jpg){.calibre339}
:::
##### 7.4.3 解析type_ids索引区 {.bodycontent-title3}
解析代码如下：
::: bodypic-c
![](OEBPS/Images/130-2-i.jpg){.calibre340}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/130-3-i.jpg){.calibre341}
:::
##### 7.4.4 解析proto_ids索引区 {.bodycontent-title3}
解析代码如下：
::: bodypic-c
![](OEBPS/Images/130-4-i.jpg){.calibre342}
:::
::: bodypic-c
![](OEBPS/Images/131-i.jpg){.calibre343}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/131-2-i.jpg){.calibre344}
:::
##### 7.4.5 解析field_ids索引区 {.bodycontent-title3}
解析代码如下：
::: bodypic-c
![](OEBPS/Images/131-3-i.jpg){.calibre176}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/132-i.jpg){.calibre345}
:::
##### 7.4.6 解析method_ids索引区 {.bodycontent-title3}
解析代码如下：
::: bodypic-c
![](OEBPS/Images/132-2-i.jpg){.calibre346}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/132-3-i.jpg){.calibre347}
:::
##### 7.4.7 解析class_def区域 {.bodycontent-title3}
解析代码如下：
::: bodypic-c
![](OEBPS/Images/132-4-i.jpg){.calibre56}
:::
::: bodypic-c
![](OEBPS/Images/133-i.jpg){.calibre348}
:::
解析结果如下：
::: bodypic-c
![](OEBPS/Images/133-2-i.jpg){.calibre114}
:::
要想看懂解析结果需要通过class_def的数据结构解析，需要借助"Bytecode for
Dalvik
VM"查阅具体的指令，然后翻译成具体的指令代码，关于这个指令表可以参考这里：[http://www.netmite.com/android/mydroid/dalvik/docs/dalvik-bytecode.html](http://www.netmite.com/android/mydroid/dalvik/docs/dalvik-bytecode.html){.calibre32
.pcalibre}，所以具体解析并不复杂，这里就不详细解析了，解析思路可以参考class_def的数据结构解析。
[提示：]{.yanse}项目下载地址：[https://github.com/fourbrother/parse_androiddex](https://github.com/fourbrother/parse_androiddex){.calibre32
.pcalibre}
其实Android中有一个工具可以解析dex文件，直接用aapt命令就可以查看了，只是这个工具是dexdump；这个命令也是在AndroidSDK目录下的build-tools下面，可以将打印的结果重定向到demo.txt文件中，如图7-3所示。
::: bodypic-c
![](OEBPS/Images/7a3-i.jpg){.calibre288}
:::
图7-3 用aapt命令输出结果
那么上面做的解析工作是不是就没有用了呢？当然不是，后面会看到，解析dex格式有很多用途。
[]{#046.xhtml}
#### 7.5 本章小结 {.bodycontent-title2}
本章主要介绍了Android中的dex文件格式，关于dex文件格式的重要性不必多言，如果能深入了解dex文件格式，在后续的加固应用和逆向应用的时候非常有用，比如一些应用通过前期改变dex的数据结构来进行加固应用，然后在内存中恢复数据结构，要想逆向这样的应用就需要熟练地掌握dex的数据结构知识。有时候还想在内存中篡改指令来改变代码逻辑，这时候也需要通过分析dex的数据结构来找到相对应的内存指令位置，然后进行数据修改。
[]{#047.xhtml}
## 防护篇 {.bodycontent-title}
第8章 Android应用安全防护的基本策略
第9章 Android中常用权限分析
第10章 Android中的run-as命令
第11章 Android中的allowBackup属性
第12章 Android中的签名机制
第13章 Android应用加固原理
第14章 Android中的so加固原理
[]{#048.xhtml}
### 第8章 Android应用安全防护的基本策略 {.bodycontent-title1}
本章主要介绍在开发一个应用的时候，可以通过哪些方式给应用做安全防护，包括以下几个方式：混淆、签名保护、手动注册native方法、反调试检测，通过这些方式能够给应用加上很强的一层保护壳，因此这几种方式在现代很多应用中都会使用到。
[]{#049.xhtml}
#### 8.1 混淆机制 {.bodycontent-title2}
在应用中用混淆不仅是为了安全防护，也是为了减小应用安装包的大小，所以每个应用发版之前必须要添加混淆这项功能。现在混淆机制一般有两种：代码混淆和资源混淆。下面分别介绍。
##### 8.1.1 代码混淆 {.bodycontent-title3}
在反编译apk之后，看到的代码类名、方法名以及代码格式看起来不像正常的Android项目代码，那么这时候就会增加阅读难度，增加破解难度，这就是经过混淆的代码，如图8-1所示。
::: bodypic-c
![](OEBPS/Images/8a1-i.jpg){.calibre349}
:::
图8-1 代码混淆结构图\
现在的破解查看Java层代码有以下两种方式：
·直接先解压classes.dex文件，使用dex2jar工具转化成jar文件，然后再用jd-gui工具进行查看类结构。
·使用apktool工具直接反编译apk，得到smali源码，阅读smali源码。
不过代码混淆也不是很安全，在破解的过程中一般是找程序的入口，那么这些入口一般都是Application或者是MainActivity之处，因为这些Android中的组件类是不能进行混淆的，所以还是有入口可寻，能够找到入口代码，然后进行跟踪。
##### 8.1.2 资源混淆 {.bodycontent-title3}
上面说到，对代码的混淆能够增加代码阅读难度。为了保护资源也是可以做混淆的，资源混淆原理这里就不多解释了，微信团队已经将这个功能开源，不了解的同学可以去GitHub查看：[https://github.com/shwenzhang/AndResGuard](https://github.com/shwenzhang/AndResGuard){.calibre32
.pcalibre}。
当然资源混淆还有一个很大的好处就是减小apk包的大小，这不是本节讨论的知识点，这里讨论的是混淆资源增加破解查找资源的难度，先来看一下混淆资源之后的结果如下所示：
::: bodypic-c
![](OEBPS/Images/137-i.jpg){.calibre350}
:::
这里可以看到，一个混淆资源的应用，反编译之后查看它的string.xml内容，发现它的name全是简单的混淆字母，那么如果通过name的值来查找对应的字符串内容获取消息，将是很难受的一件事，因为这时候如果全局搜索一个name值的话，比如这里的name=\'a\'，那么得搜出多少个这样的name，查找也很耗时间。
对于混淆资源也不是没有办法，因为一般在反编译之后的Java代码中，看到的获取资源值的时候，并不是资源的name值，而是资源对应的int类型的值，比如这样如下所示：
::: bodypic-c
![](OEBPS/Images/137-3-i.jpg){.calibre351}
:::
这里获取一个字符串的值，这些int类型的值，可以在反编译之后的res/values/pulblic.xml中可以找到：
::: bodypic-c
![](OEBPS/Images/137-4-i.jpg){.calibre352}
:::
比如这里的2131230929变成16进制就是0x0x7f0800d1，在public.xml中查找，找到了name=\'ev\'的一项，然后再去string.xml中进行name查找：
::: bodypic-c
![](OEBPS/Images/137-5-i.jpg){.calibre353}
:::
还是找到了这个字符串的值，反编译之后的public.xml中记录了所有资源的id和整型对应值，混淆之后的代码中看到的都是资源id的整型值，那么这么一看混淆并没有什么用途。
从上面描述的可知，混淆对于破解并没有什么太大的阻碍，也只是一个障眼法，不过混淆有另外一个功能，就是减少apk包的大小，这也是每个应用都添加混淆的最主要原因。
[]{#050.xhtml}
#### 8.2 签名保护 {.bodycontent-title2}
Android中的每个应用都有一个唯一的签名，如果一个应用没有被签名是不允许安装到设备中的，一般在运行debug程序的时候也是有默认的签名文件的，只是IDE帮开发者做了签名工作，在应用发版的时候会用唯一的签名文件进行签名。那么在以往的破解中可以看到，有时候需要在反编译应用之后，重新签名再打包运行，这又给很多二次打包团队谋取利益提供了一种手段。就是反编译市场中的包，然后添加一些广告代码，最后使用自家的签名重新打包发布到市场中，因为签名在反编译之后是获取不到的，所以只能用自己的签名文件去签名，但是在已经安装了应用设备再去安装一个签名不一致的应用会导致安装失败，这样也有一个问题就是有些用户安装了这些二次打包的应用之后，无法再安装正规的应用了，只有卸载重装。根据这个原理可以利用应用的签名是唯一的特性做一层防护。
为了防止应用被二次打包，在程序入口处添加签名验证，如果发现应用的签名不正确就立即退出程序，可以在应用启动的时候获取应用的签名值，然后和正确的签名值作比对，如果不符合就直接退出程序。下面做一个简单的案例测试一下，如下所示：
::: bodypic-c
![](OEBPS/Images/138-i.jpg){.calibre354}
:::
这里定义一个简单的工具类用于比较应用的签名，只是简单处理，正常情况下这里应该比对签名的MD5值，为了简单就忽略了，然后在程序的入口处做一次比对，如果不正确就退出程序如下所示。
::: bodypic-c
![](OEBPS/Images/139-i.jpg){.calibre355}
:::
得到上面的apk之后，下面来反编译，重新签名安装（关于这里如何反编译和签名，不做解释了，使用apktool和jarsigner工具即可，签名文件是自己的），然后运行如下所示：