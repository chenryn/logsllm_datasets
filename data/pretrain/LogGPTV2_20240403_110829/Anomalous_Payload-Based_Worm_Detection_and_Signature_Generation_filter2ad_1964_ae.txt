A  packet  payload  could  be  presented  by  its  1-gram  frequency  distribution  (see 
Figure 2). This representation already aggregates the actual content byte values in a 
form making it nearly impossible (but not totally impossible) to reconstruct the actual 
payload.  (Since  byte  value  distributions  do  not  contain  sequential  information,  the 
actual content is hard to recover. 2-gram distributions simplify the problem making it 
more likely to recover the content since adjacent byte values are represented. 3-grams 
nearly make the problem trivial to recover the actual content in many cases.)  
However,  we  note  that  the  1-gram  frequency  distribution  reordered  into  the  rank-
ordered frequency distribution produces a distribution that appears quite similar to the 
exponential decreasing Zipf-like distribution. The rank ordering of the resultant distinct 
byte  values  is  a  string  that  we  call  the  “Z-string”  (as  discussed  in  Section  3.1).  One 
cannot  recover  the  actual  content  from  the  Z-String.  Rather,  only  an  aggregated 
representation  of  the  byte  value  frequencies  is  revealed,  without  the  actual  frequency 
information. This representation may convey sufficient information to correlate suspect 
payloads, without revealing the actual payload itself. Hence, false positive content alerts 
would not reveal true content, and privacy policies would be maintained among sites.  
In  this  cross-domain  correlation  experiment  we  propose  two  more  metrics  which 
don’t require exchanging raw payloads, but instead only the 1-gram distributions, and 
the privacy-preserving Z-string representation of the payload: 
Manhattan  distance  (MD):  Manhattan  distance  requires  exchange  of  the  byte 
distribution of the packet, which has 256 float numbers. Two payloads are similar if 
they have a small Manhattan distance.  The maximum possible MD is 2. So we define 
the similarity score as (MD)/2, to normalize the score range to the same range of the 
other metrics described above. 
LCS of Z-string (Zstr): While maintaining maximal privacy preservation, we perform 
the LCS on the Z-string of two alerts. The similarity score is the same as the one for LCS, 
but here the score evaluates the similarity of two Z-strings, not the raw payload strings. 
Anomalous Payload-Based Worm Detection and Signature Generation 
243 
Figure  7  presents  the  results  achieved  by  sharing  PAYL  alerts  among  the  three 
sites using CR and CR II and their variant packet fragments. The results are shown in 
terms of the similarity scores computed by each of the metrics. Each plot is composed 
of  two  different  representations:  one  for  false  alerts  (histogram)  and  the  other  for 
worm alerts (dots on the x-axis). The bars in the plots are histograms for the similarity 
scores computed for false PAYL alerts. The x-axis shows the similarity score, defined 
within the range [0...1], and the y-axis is the number of pairs of alerts within the same 
score range. The similarity scores for the worm alerts are shown separately as dots on 
the  x-axis.  The  worm  alerts  include  those  for  CR  and  CR  II  and  their  variant 
fragments. Note that all of the scores calculated between worm alerts are much higher 
than  those  of  the  “false”  PAYL  alerts  and  thus  they  would  be  correctly  detected  as 
true worms among collaborating sites. The alerts that scored too low would not have 
sufficient corroboration to deem them as true worms.  
Fig. 7. Similarity scores of Zstr and LCSeq metrics for collaboration 
The above two plots show the similarity scores using Zstr and LCSeq metrics. LCS 
produced  a  similar  result  to  LCSeq.  String  equality  and  Manhattan  distance  metrics 
did not perform well in distinguishing true alerts from false ones, so their plots are not 
shown here. The other two metrics presented in figure 7 give particularly good results. 
The  worms  and  their  variant  packet  fragments  have  much  higher  similarity  scores 
than all the other alerts generated at each distinct site.  This provides some evidence 
that  this  approach  may  work  very  well  in  practice  and  provide  reliable  information 
that  a  new  zero-day  attack  is  ongoing  at  different  sites.  Note  too  that  each  site  can 
contribute to false positive reduction since the scores of the suspects are relatively low 
in  comparison  to  the  true  worms.  Furthermore,  the  Zstr  metric  shows  the  best 
separation  here,  and  with  the  added  advantage  of  preserving  the  privacy  of  the 
exchanged content. These two metrics can also be applied to the ingress/egress traffic 
correlation, especially for polymorphic worms that might re-order their content. 
There are two interesting observations from this data. The circle in the LCSeq plot 
represents the similarity score when exchanging the alerts among the sites that PAYL 
generated for CR and CR II. LCSeq is the only  metric that gave a relatively  higher 
score that is worth noticing, while all the others provide less compelling scores. When 
we looked back at the tcpdump of CR and CR II, both of them contained the string: 
244 
K. Wang, G. Cretu, and S.J. Stolfo 
“GET./default.ida?........u9090%u6858%ucbd3%u7801%u9090%u6858%ucbd3%” 
while CR has a string of repeated “N”, and CR II has string of repeated “X” padding 
their content.  Since subsequences do  not need to be adjacent in the  LCSseq  metric, 
LCSeq  ignored  the  repetitions  of  the  unmatched  “N”  and  X  substrings  and 
successfully  picked  out  the  other  common  substrings.  LCS  also  had  a  higher-than-
average  score  here,  but  not  as  good  as  LCSeq.  This  example  suggests  that 
polymorphic worms attempting to mask themselves by changing their padding may be 
detectable by cross-site collaboration under the LCSeq metric. 
Another  observation  is  that  the  LCSeq  and  LCS  results  display  several  packet 
content  alerts  with  high  similarity  scores.  These  were  false  alerts  generated  by  the 
correlation among the sites. The scores were measured at about 0.4 to 0.5. Although 
they are still much smaller than the worm scores, they are already outliers since they 
exceeded  the  score  threshold  used  in  this  experiment.  We  inspected  the  content  of 
these  packets,  and  discovered  that  they  included  long  padded  strings  attempting  to 
hide the HTTP headers. Some proxies try to hide the query identity by replacing some 
headers  with  meaningless  characters  –  in  our  case,  consisting  of  a  string  of  “Y”s. 
Such  payloads  were  correlated  as  true  alerts  while  using  LCSeq/LCS  as  metrics, 
although they are not worms. However, these anomalies did not appear when we used 
the Zstr metric, since the long string of “Y’s” used in padding the HTTP header only 
influences  one  position  in  the  Z-string,  but  has  no  impact  on  the  remainder  of  the  
Z-string. 
These  results  suggest  that  cross-sites  collaboration  can  greatly  help  identify  the 
early appearance of new zero-day worms while reducing the false positive rates of the 
constituent PAYL anomaly detectors. The similarity score between worms and their 
variants  are  much  higher  than  those  between  “true”  false  positives  (normal  data 
incorrectly deemed anomalies), and can be readily separated with high accuracy.  
When  several  sites  on  the  Internet  detect  similar  anomalous  payloads  directed  at 
them,  they  can  confirm  and  validate  with  each  other  with  high  confidence  that  an 
attack is underway. As we mentioned earlier, this strategy can also solve the limited 
buffer size problem described in Section 4.3.  If we only consider one single host, a 
stealthy worm can hibernate for a long period of time until a record of its appearance 
as an anomaly is  no longer stored in the buffer of suspect  packets. However, in the 
context of collaborating sites, the suspect anomaly can be corroborated by some other 
site that may also have a record of it in their buffer, as a remote site may have a larger 
buffer  or  may  have  received  the  worm  at  a  different  time.  The  distributed  sites 
essentially  serve  as  a  remote  long-term  store  of  information,  extending  the  local 
buffer  memory  available  at  one  site.    Further,  this  strategy  concurrently  generates 
content filtering signatures. Any two sites that correlate and validate suspects as being 
true  worms  both  have  available  the  actual  packet  content  from  which  to  generate  a 
signature, even if only Z-strings are exchanged between those sites. 
6   Conclusion 
In this paper, we provided experimental evidence that payload anomaly detection and 
content alert correlation, either on the host or across hosts and sites, hold promise for 
the early detection of zero-day worm outbreaks. It is important to note that the range 
Anomalous Payload-Based Worm Detection and Signature Generation 
245 
of worms tested and reported in the paper is limited in number and in scope. We hope 
that others with substantially larger zoos might make them available for testing, or to 
repeat the experiments reported herein to validate the results. Although we used real 
packet traces from three sources, a larger scale study of the methods described in this 
paper  is  necessary  to  understand  whether  the  methods  scale  as  we  conjecture,  and 
whether  sites’  content  flows  provide  the  necessary  diversity  to  more  readily  detect 
common attack exploits that each may see during a worm outbreak. 
PAYL  can  accurately  detect  new  worms  without  signatures.  Correlating  content 
alerts  generated  by  PAYL  reduces  false  alarms,  and  generates  detailed  content 
signatures that  may be used  for filtering  worm attacks at  multiple sites. We believe 
that worm writers will have substantially new and effective defenses to overcome, and 
we  wish  them  nothing  but  failure  and  frustration  in  attempting  to  thwart  these  new 
generation  of  defensive  systems.  We  further  posit  that  the  worm  problem  will 
ultimately  be  solved  by  defensive  “coalitions”,  making  network  systems  in  general 
safe from at least this class of cyber attacks for the foreseeable future.  
Acknowledgments 
We’d  like  to  thank  Janak  J.  Parekh,  Wei-Jen  Li  for  help  in  collecting  data,  the 
experimental set up, and for useful discussions and helpful comments on this paper.   
References 
[1]  S.  Bhatkar.  D.  C.  DuVarney,  R.  Sekar.  Address  Obfuscation:  an  Efficient  Approach  to 
Combat  a  Broad  Range  of  Memory  Error  Exploits,  12th  USENIX  Security  Symposium, 
2003. 
[2]  M. Damashek. Gauging similarity with n-grams: language independent categorization of 
text. Science, 267(5199):843--848, 1995 
[3]  D. Gusfield. Algorithms on Strings, Trees and Sequences, Cambridge University Press, 
1997. 
[4]  J. O. Kephart and W. C. Arnold. Automatic extraction of computer virus signatures. In 
Processing of  the 4th International Virus Bulletin Conference, Sept. 1994. 
[5]  K.-A Kim and B. Karp. Autograph: Toward Automated Distributed Worm Distribution, 
In Proceedings of the USENIX Security Symposium, August 2004. 
[6]  O.  Kolesnikov,  W.  Lee,  "Advanced  Polymorphic  Worms:  Evading  IDS  by  Blending  in 
with Normal Traffic", Tech Report, GIT-CC-05-09, 2005 
[7]  C. Kreibich and J. Crowcroft. Honeycomb-Creating Intrusion Detection Signatures Using 
Honeypots, In Proceedings of the 2nd Workshop on Hot Topics in Networks (HotNets-II), 
November 2003. 
[8]  W. Li, K. Wang, S. Stolfo and B. Herzog. Fileprints: Identifying File Types by N-gram 
Analysis, In the Proceedings of the 2005 IEEE Workshop on Information Assurance and 
Security, June 2005. 
[9]  R.  Lippmann,  et  al.  The  1999  DARPA  Off-Line  Intrusion  Detection  Evaluation, 
Computer Networks 34(4) 579-595, 2000. 
[10]  M. Locasto, J. Parekh, S. Stolfo, A.  Keromytis,  T. Malkin and V. Misra. Collaborative 
Distributed Intrusion Detection, Columbia University Tech Report CUCS-012-04, 2004. 
246 
K. Wang, G. Cretu, and S.J. Stolfo 
[11]  D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford and N. Weaver. The Spread of 
the Sapphire/Slammer Worm, http://www.cs.berkeley.edu/~nweaver/sapphire/ 
[12]  D.  Moore  and  C.  Shannon.  Code-Red:  A  Case  Study  on  the  Spread  and  Victims  of  an 
Internet  Worm,  In  Proceeding  of  the  2002  ACM  SIGCOMM  Internet  Measurement 
Workshop  (IMW 2002), November 2002. 
[13]  D. Moore, C. Shannon, G. Voelker, and S. Savage. Internet Quarantine: Requirements for 
Containing Self-Propagating Code. In IEEE Proceedings of the INFOCOM, Apr. 2003. 
[14]  S.  Sidiroglou  and  A.  D.  Keromytis.  Countering  Network  Worms  through  Automatic 
Patch Generation. To appear in IEEE Security and Privacy 2005.  
[15]  S. Singh, C. Estan, G. Varghese and S. Savage. Automated Worm Fingerprinting, Sixth 
Symposium on Operating Systems Design and Implementation (OSDI), 2004. 
[16]  S. Staniford, V. Paxson, and N. Weaver. How to Own the Internet in Your Spare Time. In 
Proceedings of the USENIX Security Symposium, Aug. 2002. 
[17]  S. Stolfo. Collaborative Security, The Black Book on Corporate Security, Ch 9. Larstan 
publishing, 2005. 
[18]  V.  Yegneswaran,  P.  Barford,  and  S.  Jha.  Global  Intrusion  Detection  in  the  DOMINO 
Overlay System. In Proceedings of Network and Distributed System Security Symposium 
(NDSS), Feb, 2004. 
[19]  H.  J.  Wang,  C.  Guo,  D.  R.  Simon,  and  A.  Zugenmaier.  Shield:  Vulnerability-Driven 
Network Filter for Preventing Known Vulnerability Exploits. In Proceedings of the ACM 
SIGCOMM Conference, Aug. 2004.  
[20]  K.  Wang  and  S.  Stolfo.  Anomalous  payload-based  network  intrusion  detection,  in 
Proceedings of Recent Advance in Intrusion Detection (RAID), Sept. 2004.