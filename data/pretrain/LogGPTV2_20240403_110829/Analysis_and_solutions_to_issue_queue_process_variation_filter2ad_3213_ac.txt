tivated only when the valid bit is set and hence slow dispatches
in meta-stable state do not participate in CAM match. Simi(cid:173)
larly a slow forwarding write sets the operand ready bit only
after the operation is complete. To handle slow forwarding, the
data is held for additional cycle. A slow issue invalidates the
valid bit only after it is read and hence new instructions do not
get allocated to this entry before that.
the
6.2.1. Operand Switching Each of
operand sub(cid:173)
components form a significant part of an issue queue en(cid:173)
try. In this sub-section, we look at application characteris(cid:173)
tics that can be used to reduce the variation impact. Based on
our observations, we look into several ways of handling varia(cid:173)
tions within an entry.
90i. Reg File Oper Read (47%1~i-~---
• Single Oper Inst (64.8%)
I
Q)ao +---~~~~~
C)
ca~o - - -~-111__~--~-.-- ~ - - - - - - -
~--
-
-~-~----~----'------------III-~
-----------~------ -----1
Q)
~60 ~___I
Q)
-
-----...__
-
---.----t....
-
~__.___t....---a--1-------- - -I
~
50 ~----------------~---------------~I---""-----'~--I------~"---~------I------------­
Q.
Q)
(JCo +a--I.........
Q)
........-.--......~--a--i.....
._..
~__1__.I__._.--__;
-a--1--------.......---~-------------------a1
___._,
r_.. ~ t_- ---
I
I
~~-----------------a--1--------......
&0 ~---------------___._,
o~~~...,._..,._..,.~I~~~I~~
~;;t ",:t-4.+",,'lf' ~~~ it ~JFr:v",o~ 0(;-"'+ "Q">~"''''I>~''' o,~~ ~l> 'I>,jt",\"..1-,\'O~"'\o:,'!'(;- ,,;:-&~0 ,,,r:J>" gflf:;,~J:-
\r{P..fS ~,\' ",\'0
",'1""
"
D.co +_l~----____.lf__-_n_
c
.So +-II1__-1~__III__-- ... I_---------__=.I---III___IIIIII__-
-;
~o +-.f----.~f______._._~~-~-"';;_------II__.II---II~__III__l.1__
.-----~~-________i
~o
o
,,V~9~~~~
,,
,OJ
,
,
-t~#
Figure 7. Bus utilization for dispatch, issue and forwarding. Aver(cid:173)
age value shows that the effective utilization is low.
6.2.2. Port Switching Port Switching [20] is an effective
technique to reduce performance degradation imposed by vari(cid:173)
ations. Random variations lead to variable cell operating speeds
with respect to the ports. Hence, dynamic port-switching (cid:173)
whenever possible - can help reduce the impact of variations.
Figure 7 shows how the utilization of the dispatch, issue and
writeback bandwidth vary across the SPEC2000 benchmarks.
1-4244-2398-9/08/$20.00 ©2008 IEEE
16
DSN 2008: Soundararajan et al.
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
Though the utilization is close to half the bandwidth available,
port-switching over all available ports might not be possible as
discussed below.
Implementation Even though there are potential advantages to
port-switching at dispatch, issue, and forwarding, the specific
bus on which the data gets forwarded is decided at issue time
by the select logic. The select logic does not know dependents
of an instruction. Also, the multiple dependents of an instruc(cid:173)
tions could operate fast or slow with respect to a port since for(cid:173)
warded data get broadcast. Based on these observations we opt
not to implement port-switching for data forwarding.
Conventionally, all buses operate at the same speed, and
their assignment to instructions is inconsequential. With varia(cid:173)
tions, the bus assignment is non-trivial if stalls are to be mini(cid:173)
mized.
For dispatch writes, the port assignment can be done in the
alloc stage. Since the specific entries that the instruction would
be allocated is known, port speeds for those entries would be
known as well. This information is used to make the port(cid:173)
assignment. For issue reads, the port speeds of individual en-
issue queue involving four stages to select instructions based
on their age, is shrunk to three stages. This reduction in select
logic makes it less effective to implement oldest-first selection
but port assignment was found to have a nl0re significant im(cid:173)
pact on performance.
Figure 9 shows the impact of combining OptiSteer steering
scheme with port and operand switching, shown as Hybrid ISQ.
Steering is effective since it avoids entries that have predomi(cid:173)
nantly slow ports and hence cause more stalls in pipeline while
port and operand-switching are effective when only a lesser
percentage of an entry or sub-component are affected by vari(cid:173)
ations. As we note from the figure, the variation affected issue
queue now operates within 1.3% of variation-unaffected issue
queue. Even for high IPC benchmarks, the loss is only 1.5%
clearly showing the capability of our schemes to operate effec(cid:173)
tively under variations.
Bus lines
~ ~=-----
-
-----------~_______ ____~__----------------------- -----------------------i
NP - NonPV Port
AP - Alternate Port
NB - Bus corresponding to NonPV Port
AB - Bus corresponding to Alternate Port
(A)
(B)
Figure 8. Port-switching logic implementation. (A) Overall con-
nections between buses available and port speed lines. (B) Logic in(cid:173)
side each of boxes assigning either one of the buses based on avail(cid:173)
ability and port speeds.
O+--r'-..,.--..,.-..-.,...-.,.-a-.---~~~.._..,.......,..~~_.,.._~~~.,.._.,._.,..--.-~
,~~:i'~~~~~~~,~~"I>;~"'''':~'''~$~~,,~~o:I>~''':~~~:~o~~~~~,~~:~$:~~:~~:'I"~~
-
,CtJ
OJ
Figure 9. Performance impact of combining steering with operand
and port-switching. Legend clearly shows that across all bench(cid:173)
marks and high IPC ones, the hybrid scheme does well.
tries is maintained in the selection logic. Once an instruction
is chosen for issue, the selection logic detennines the specific
port for the instruction. Note that all six ports are not avail(cid:173)
able for the instructions. Since each port interfaces to specific
execution units, port-switching can be done only when instruc(cid:173)
tion can be issued to multiple functional units. Hence we re(cid:173)
strict port-switching between two alternate ports. There is one
port, NonPV Port (NP), that the instruction would have nor(cid:173)
mally take in a variation-unaffected pipeline. Since this could
tum out to be slow, we also check if an alternate faster port,
Alternate Port (AP), is available. If it is unassigned to other in(cid:173)
structions, the alternate port is taken. Figure 8(A) shows the bus
and port interconnections required to implement port-switching
in parallel, shown for a four-ported system. Figure 8(B) shows
how the actual assignment is done. Note that a '0' indicates a
slow port and a non-available bus while a '1 ' indicates a faster
port and an available bus.
The port-switching logic is on the critical path of instruc(cid:173)
tion issue. To incorporate it, the select logic for non-collapsing
6.3. Existing mechanisms for handling variations
This section deals with how some of the existing solutions,
proposed for other purposes related to the issue queue,can be
tweaked for variation handling as well.
Shutting down issue queue entries based on utilization has
been traditionally used to maximize the power/energy savings
in a system [1]. Since it involves no significant additional ef(cid:173)
fort, entries that violate the timing requirements can be shut
down. Figure 10 shows the performance impact of such a sys(cid:173)
tem. ISQ_14 indicates the issue queue with 14 entries operating
at the desired frequency and rest shutdown. As can be noted
from the graph, the performance degradation is 12°A>, grow(cid:173)
ing upto 16°A> for bzip2 and sixtrack, compared to the con(cid:173)
ventional issue queue. Given that variations are only increas(cid:173)
ing with newer technologies and that in a multi-threading sce(cid:173)
nario the issue queue's utilization increases, shutdown is not a
viabIe option.
Instead of merely shutting down the issue queue entries, an
alternate solution we envision is a multi-clock domain (MCD)
asynchronous environment. Solutions in the past have looked
1-4244-2398-9/08/$20.00 ©2008 IEEE
17
DSN 2008: Soundararajan et al.
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
7. Epilogue to PV-aware issue queue design
~. NonPV (1.43, 2.01)"
__ ~~~_14 (1_.2~~.!!X
7.1. Microarchitectural support for pipeline stalling
oez ~~
---
-------'-----.DI------------------ ------------ ---
II...
.1.
o~~~~~I"--r--r-'"'II~I-_._._,...-I__,.__.,.I._,._..II~
~0'~cf
,,~~~~~~~~~~~~:~~:v~~~1.~,,~~:~~~~~:~~'\~~~~:'\~~~,,~C>#~~vv:l~-""~
,,~~<;::,<;::,-
~~".J-
Benchmarks
"
"
",,'0 ,,'IJ
'j;
'j;
Figure 1O. Performance Degradation due to shutting down
variation-affected entries. Average values across all benchmarks
and high IPC ones show that there is significant performance loss
with shutting down entries.
at operating the issue queue asynchronously with the rest of
the pipeline [26] and adapting the issue queue size [1] for re(cid:173)
ducing the dynamic power and/or energy. By operating the is(cid:173)
sue queue as a fast 14-entry queue or a slow 24-entry queue
(incorporating the slow entries as well) and switching between
them based on application runtime IPC, we looked at mitigat(cid:173)
ing performance impact of variations. Figure 11 illustrates that
the MCD-solution leads to performance degradation of about
7.3%.
Compared to both these solutions, our mechanisms are
clearly more effective in reducing the performance im(cid:173)