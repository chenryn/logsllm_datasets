5.4 Representing State of Safe Memory
In HyperSpace, each memory location is in one of four states shown
in Figure 2. HyperSpace manages an additional area at the end of
the safe memory regions to represent the state of each memory
location. Because HyperSpace manages sensitive data in 8-byte
granularity, 2 bits of metadata are assigned for each 8-byte chunk
of sensitive data. The state bitmap is updated upon memory state
transition. HyperSpace detects an attempt for illegal state tran-
sition (e.g., vip_write or vip_assert on non-sensitive data) and
prevents illegal/malicious use of HyperSpace primitives. With our
bitmap representation, access to the state can be efficiently done
using segmentation (see Figure 4).
5.5 Safety of Safe Memory
In HyperSpace, we ensure the spatial and temporal safety of security-
sensitive data with HyperSpace primitives and the memory state
management model. For temporal safety, HyperSpace keeps track
of the registration status of the protected data. In this regard,
the vip_register operation changes the status of safe memory
from not-in-use to in-use. Based on this temporal status tracking,
HyperSpace guarantees spatial safety of safe memory by managing
the safe memory region in an 8-byte block granularity. HyperSpace
allows access only to the registered, valid blocks and faults on any
unregistered access, such as out-of-bound unregistered access of the
safe memory. Although HyperSpace does not guarantee full tem-
poral safety, it significantly raises the bar. By providing registration-
based checking, HyperSpace denies access to unregistered sensi-
tive data. However, it cannot distinguish if a sensitive data is freed
then reallocated. This could open the possibility of a temporal attack,
albeit it would be significantly harder to achieve.
5.6 Low Memory Overhead
The maximum memory overhead is bounded to 103.1% of an ap-
plication’s total memory usage in the regular memory region (𝑇 +
𝑇 ∗ 2 𝑏𝑖𝑡𝑠
64 𝑏𝑖𝑡𝑠 where 𝑇 is usage). This is relatively low compared to
approaches managing rich metadata (e.g., tag, bounds) such as
CPI [45] and SoftBound+CETS [49–51]. Actual memory overhead
is much lower than the maximum overhead because HyperSpace
relies on sparse address space support of the underlying OS for the
safe memory region. Initially, the OS kernel reserves the virtual
address space without allocating physical memory. When a pro-
cess accesses the safe memory region, the OS kernel will allocate
a physical page for a faulting virtual address. This also applies to
the page table entries, hence, HyperSpace will allocate memory
pages only for the corresponding regular memory page that stores
safe data. Our evaluation results in §9.3.2 show that the additional
uint64_t value;
asm volatile ("mov %%gs:0x0(%[offset]), %[value]"
:[value] "=r" (value) :[offset] "r" (addr) );
return value;
*bitmap_addr = (void *)(((uint64_t)addr >> 5) & ~0x3);
[bitmap_addr] "r" (bitmap_addr),
[area_sz]
"r" (ADDR_SPC_SZ) );
asm volatile ("setc %[bit]" : [bit] "+rm" (bit) );
return bit;
"btq %[bitmap_idx], %%gs:(%[bitmap_addr],%[area_sz])"
: : [bitmap_idx] "r" (bitmap_idx),
void
uint64_t bitmap_idx = ((uint64_t)addr & 0xf8) >> 2;
uint8_t bit;
asm volatile (
1 // Get the safe memory value for a given address
2 uint64_t vip_load_safe_memory_8b(void *addr) {
3
4
5
6
7 }
8 // Get the first status bit for a given address
9 uint8_t vip_get_safe_memory_status_bit0(void *addr) {
10
11
12
13
14
15
16
17
18
19
20 } Figure 4: Code for accessing safe memory and its state.
memory overhead of HyperSpace is marginal (13.18% on average
with SPEC 2006).
5.7 Putting It All Together
With HyperSpace, the design of VIP’s API in Figure 2 is simple and
efficient. Registering/unregistering sensitive data (vip_register
and vip_unregister) changes the corresponding bits in the state
bitmap. Writing sensitive data (vip_write and vip_write_final)
copies the sensitive value to the safe memory region and changes
the state bits if necessary. HyperSpace temporarily grants write
permissions to the safe memory region only for these four VIP
operations and only to the calling thread. HyperSpace checks value
integrity by comparing values between the regular and safe memory
regions (vip_assert). For all VIP operations, HyperSpace checks
if the memory is in a valid state for a given operation. Otherwise,
HyperSpace raises a security exception against any attempt of
illegal state transition.
6 HyperSpace Defenses
In this section, we present four defense mechanisms based on
HyperSpace to defeat control-flow hijacking and heap metadata
corruption attacks by enforcing the value invariant property. To
defeat control-flow hijacking attacks, HyperSpace implements: (1)
Control Flow Integrity (VIP-CFI) – protecting all code pointers, (2)
Code Pointer Isolation (VIP-CPI) – protecting all sensitive code/data
pointers, and (3) virtual function table pointer protection in C++ ob-
jects (VIP-VTPtr). We present automatic instrumentation for these
three protections. HyperSpace covers all sensitive global, heap,
and stack variables. To prevent heap metadata corruption attacks,
HyperSpace (4) extends ptmalloc2 [28], which is the default mem-
ory allocator in most Linux distributions, manually inlining VIP
API into its source code.
6.1 Control Flow Integrity (VIP-CFI)
We enforce the integrity of control flow by guaranteeing the safety
of all code pointers. VIP-CFI allows indirect control-flow transfer
only when a target code pointer matches with its legitimate copy
in the shadow memory region (i.e., the code pointer does not vio-
late its value invariant property). Thus, all function pointers must
be secured using VIP’s register, write, assert and deregister primi-
tives. HyperSpace accomplishes this by accurately identifying and
instrumenting all instructions that allocate, write, use, and deal-
locate code pointers. We note that VIP-CFI provides the unique
code target (UCT) property [36] as it allows only a single target for
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1617each indirect control-flow transfer, the pointer that HyperSpace
made invariant. Thereby, VIP-CFI does not suffer from the attack
that ConFIRM [46] launches, which replaces an indirect call/jump
target to another allowed target in an equivalence class of multiple
allowed code addresses.
We identify code pointers using LLVM type information. Be-
cause code pointers can exist inside of structs or arrays (i.e., a
composite data type), HyperSpace recursively looks through each
element of container types as well. For cases where code pointers
are recognized as universal pointers (i.e., void* or char*), we look
ahead for its typecasting to its actual type further down in the
program and instrument accordingly. Specifically, if a pointer is
ever cast into a sensitive type – a code pointer or a composite data
type that is reachable to a code pointer – within a function, or
returned to another function where it is cast to a sensitive pointer,
HyperSpace considers this to be sensitive as well.
We handle memcpy and munmap as special cases separately with
their own intrinsics. Since memcpy and munmap take void* argu-
ments, HyperSpace gets the actual operand types before being cast
to void*, and instrumentation for memcpy and munmap operands is
done separately. In the case of an array of code pointers that is
memcpy’ed to another location, HyperSpace registers/writes each
array element to safe memory.
Registration of code pointers is instrumented immediately after
its allocation. We use a shadow stack (specifically, SafeStack [45])
to protect return addresses and safe objects – stack objects whose
address is not taken – by isolating them from sensitive stack vari-
ables that are stored in the regular stack. HyperSpace instruments
all other heap variables, global variables, and other address-taken
code pointers on the regular stack via vip_register.
To determine when to perform vip_write for code pointers, we
look for any unsafe code pointers (i.e., code pointers not on the
SafeStack) that are the destination operand of a store instruction.
vip_write will be instrumented following such store instructions
if the variable is not in the SafeStack. vip_assert should be called
immediately before using any code pointer. Specifically, we look
for call and load instructions for instrumentation.
For sensitive heap and mmap-ed variables, deregistering is in-
strumented before free and munmap calls, respectively. For stack
variables, we deregister the entire current stack frame from the last
to the first registered variable address in a local frame at once to
prevent having iterative deregisters. Note that we did not handle C
unions because we did not encounter any in our evaluation.
6.2 Code Pointer Integrity (VIP-CPI)
In addition to code pointer protection in VIP-CFI, HyperSpace can
be used to guarantee the integrity of all sensitive code and data
pointers. HyperSpace recursively protects all sensitive pointers as
defined in CPI [45] – all code pointers and all data pointer types
that can reach a code pointer.
In order to detect the additional sensitive pointers required for
VIP-CPI, the type analysis of VIP-CFI is extended to include more
cases. Composite type objects that contain a function pointer are
recognized as sensitive type. Hence, pointers to these sensitive
types are protected and composite types that contain these pointers
are also protected creating a recursive chain of protection.
After detecting the protection sets for all the sensitive types in the
LLVM pass, its instrumentation is similar to VIP-CFI. HyperSpace
finds and instruments all IR instructions that declare, modify, and
use sensitive pointers. When a sensitive variable is declared, HyperSpace
looks up its protection set from the type analysis and instruments
vip_register accordingly. No changes are made for write instru-
mentation as HyperSpace simply instruments all the locations
where sensitive variables are modified as explained in the VIP-
CFI instrumentation. When sensitive variables are being used, all
load instructions of the sensitive variables are instrumented.
VIP-CPI leverages static analysis for determining sensitive-data.
Since static analysis is known to be imprecise, we over-approximate
when detecting security-sensitive pointers to guarantee full cover-
age. That is, HyperSpace regards a pointer as security-sensitive if
it cannot determine a pointer as non-security-sensitive at compile
time. One such example is that C/C++ allows char* pointers to
point to objects that are of any type. This conservative approach
may induce false positives (i.e., unnecessary protection), however,
such false positives will not compromise VIP’s security guarantees.
6.3 VTable Protection in C++ (VIP-VTPtr)
Hijacking the virtual function table pointer of an object is a com-
monly exploited attack [7, 64, 82]. In C++, virtual functions are an
essential part of dynamic polymorphism. At each virtual function
call, an appropriate function is chosen according to the object type.
The object type mapping to a virtual function is through the use
of a virtual function table pointer (VTPtr). The VTPtr is an array
pointer that includes virtual function pointers available for a spe-
cific object class type. A VTPtr is located in the header of an object
and is initialized in an object’s constructor. After initialization, this
pointer variable should not be altered during the entirety of the
variable’s lifetime.
To protect virtual function table pointers, we need to first cor-
rectly identify the VTPtr within C++ objects. This can be detected
using HyperSpace’s type analysis. When recursively dereferenced
from all proceeding pointer types, our analysis can identify the
code pointers and mark the VTPtr as a security-sensitive pointer.
The registration of VTPtr is instrumented along with the rest of
regular sensitive type registrations during object allocation. Com-
pared to VIP-CFI, no extra registration semantic changes were
needed for this support. To guarantee that the VTPtr of an object
will never change, HyperSpace instruments the vip_write_final
call right after the VTPtr is assigned by the object’s constructor.
This ensures that the object’s VTPtr does not get modified outside
of its constructor.
HyperSpace instruments vip_assert primitive immediately be-
fore the load instruction to guarantee that the VTPtr has not been
tampered with. Similar to registration, the same deregistration se-
mantics as in VIP-CFI are used to deregister the VTPtr along with
other sensitive values the object may contain.
6.4 Heap Metadata Protection
The heap memory allocator is essential in building an efficient and
secure program. ptmalloc2 [28] is one of the most widely adopted
heap allocators. ptmalloc2 and many other heap allocators (e.g.,
dlmalloc [20] and tcmalloc [33]) adopt an inline metadata design
for performance reasons. Unfortunately, this inline metadata design
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1618suffers a major security flaw. As shown in §2.2, an adversary can
compromise inlined metadata to perform arbitrary code execution
by exploiting heap-based buffer overflow vulnerabilities. Although
several security mechanisms were proposed in an attempt to address
this issue, they are still able to be bypassed [21, 22, 81].
To defend against this inline heap metadata corruption attack,
we instrument the ptmalloc2 source code manually. We register 32-
byte metadata whenever a new memory chunk is created (e.g., split-
ting one large chunk into two smaller chunks) and deregister the
32-byte metadata whenever a memory chunk is deleted (e.g., merg-
ing two small chunks into one big chunk) using vip_register and
vip_unregister. For each malloc and free, we first check whether
the inline metadata is corrupted using vip_assert. After updat-
ing metadata, we copy the newly written metadata to the safe
region using vip_write. This approach protects inline heap meta-
data against state-of-the-art corruption attacks such as poisoned
NULL byte, 1-byte NULL overflow [22], and unsafe unlink [17] by
asserting metadata during malloc and free to detect corruption.
7 HyperSpace Optimizations
We present optimization techniques applied to reduce HyperSpace’s
overhead of instrumentation and to reduce the memory access over-
head for our safe memory region.
7.1 Runtime Silent Store Elimination (SLNT)
VIP utilizes Intel MPK to efficiently control safe memory permis-
sions. In most cases, changing the permissions of the safe memory
region using MPK is fast enough. However, it could incur significant
overhead if an application requires frequent permission changes.
We have observed that some applications keep updating sensitive
data with the same value – also known as a silent store. Such frequent
silent stores to the safe memory region are detrimental because it
requires frequent MPK permission changes.
With this, we eliminate silent stores to the safe memory region
using runtime checking. For vip_write, we check if the value being
written is the same as its safe copy (i.e., silent store) as well as if the
target safe memory is already in a sensitive, initialized state. If so,
the write operation is not necessary, allowing HyperSpace runtime
to skip the vip_write. Therefore, HyperSpace only utilizes wrpkru
in the first vip_write. Any subsequent vip_write that writes the
same data value will be ignored as no update is necessary to safe
memory. This reduces the number of unnecessary wrpkru calls.
Our optimization is effective because vip_write is one of the
most frequently used VIP functions and changing permissions using
wrpkru is more expensive (∼23.3 CPU cycles) compared to reading
the current MPK permissions using rdpkru (∼0.5 CPU cycles). This
prevents unnecessary writes and MPK permission changes in many
applications (e.g., 453.povray as described in §9.3.1).
7.2 Coalescing Permission Changes within a Basic Block
(CBB)
To further reduce the unnecessary toggling of safe memory
region permissions, we introduce an optimization technique to
coalesce a series of HyperSpace protection instrumentation (i.e.,
vip_safe_memory_unlock and vip_safe_memory_lock) within a ba-