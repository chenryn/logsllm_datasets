          }
        }
        if ($record) {
          $form[$name] = $message;
          if ($message) {
            drupal_set_message($message, 'error');
          }
        }
      }
      return $form;
    }
注意到这个 `$record` 变量。当 `$sections` 也就是通过 `isset` 函数检测时（也就是不为 null），`$record`
就会设置为 FALSE，也就不会进行错误的记录。通过查阅 `form.inc` 的代码，我注意到第 1412 行有如下代码：
    if (isset($form_state['triggering_element']['#limit_validation_errors']) && ($form_state['triggering_element']['#limit_validation_errors'] !== FALSE) && !($form_state['submitted'] && !isset($form_state['triggering_element']['#submit']))) {
      form_set_error(NULL, '', $form_state['triggering_element']['#limit_validation_errors']);
    }
    // If submit handlers won't run (due to the submission having been triggered
    // by an element whose #executes_submit_callback property isn't TRUE), then
    // it's safe to suppress all validation errors, and we do so by default,
    // which is particularly useful during an Ajax submission triggered by a
    // non-button. An element can override this default by setting the
    // #limit_validation_errors property. For button element types,
    // #limit_validation_errors defaults to FALSE (via system_element_info()),
    // so that full validation is their default behavior.
    elseif (isset($form_state['triggering_element']) && !isset($form_state['triggering_element']['#limit_validation_errors']) && !$form_state['submitted']) {
      form_set_error(NULL, '', array());
    }
    // As an extra security measure, explicitly turn off error suppression if
    // one of the above conditions wasn't met. Since this is also done at the
    // end of this function, doing it here is only to handle the rare edge case
    // where a validate handler invokes form processing of another form.
    else {
        //form_set_error(NULL, '', array()); // set _triggering_element_name
        drupal_static_reset('form_set_error:limit_validation_errors');
    }
当我们普通的 POST 的时候，会进入普通的最后的 else 分支，但是如果满足：
    (isset($form_state['triggering_element']) && !isset($form_state['triggering_element']['#limit_validation_errors']) && !$form_state['submitted']
这个条件时，就会调用：
    form_set_error(NULL, '', array());
这样调用的话，`$limit_validation_errors` 就是 Array，可以通过 `isset`，不会记录错误。我们来看一下这三个条件：
  1. `isset($form_state['triggering_element'])`，默认为 submit 按钮，true
  2. `!isset($form_state['triggering_element']['#limit_validation_errors'])` ，默认设置了这个值，false
  3. `!$form_state['submitted']`，默认为 false
看起来形式严峻。首先我在将所有 `$form_state['submitted']` 设置为 TRUE 的地方设置了断点，单步调试后发现断在了这个位置：
        // 如果没设置 triggering_element，那么将 triggering_element 设置为 form 的第一个 button
        if (!$form_state['programmed'] && !isset($form_state['triggering_element']) && !empty($form_state['buttons'])) {
          $form_state['triggering_element'] = $form_state['buttons'][0];
        }
        // If the triggering element specifies "button-level" validation and submit
        // handlers to run instead of the default form-level ones, then add those to
        // the form state.
        foreach (array('validate', 'submit') as $type) {
          if (isset($form_state['triggering_element']['#' . $type])) {
            $form_state[$type . '_handlers'] = $form_state['triggering_element']['#' . $type];
          }
        }
        // If the triggering element executes submit handlers, then set the form
        // state key that's needed for those handlers to run.
        if (!empty($form_state['triggering_element']['#executes_submit_callback'])) {
          #################################################
          $form_state['submitted'] = TRUE; //  'textfield',
        '#title' => t('Username or e-mail address'),
        '#size' => 60,
        '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),
        '#required' => TRUE,
        '#default_value' => isset($_GET['name']) ? $_GET['name'] : '',
      );
      // Allow logged in users to request this also.
      if ($user->uid > 0) {
        $form['name']['#type'] = 'value';
        $form['name']['#value'] = $user->mail;
        $form['mail'] = array(
          '#prefix' => '',
          // As of https://www.drupal.org/node/889772 the user no longer must log
          // out (if they are still logged in when using the password reset link,
          // they will be logged out automatically then), but this text is kept as
          // is to avoid breaking translations as well as to encourage the user to
          // log out manually at a time of their own choosing (when it will not
          // interrupt anything else they may have been in the middle of doing).
          '#markup' =>  t('Password reset instructions will be mailed to %email. You must log out to use the password reset link in the e-mail.', array('%email' => $user->mail)),
          '#suffix' => '',
        );
      }
      $form['actions'] = array('#type' => 'actions');
      $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('E-mail new password'));
      return $form;
    }
可以发现，`$form['name']['#default_value']` 是直接从 `$_GET['name']` 获取的，而这个注入的 `$form`
又是直接储存在缓存内的，那么我们将 POST 的 name 转移到 GET 中，再观察数据库中缓存的数组：
我们成功的将 payload 注入到 `#default_value` 里，那么，再利用 `0x02` 中所说的漏洞触发点触发即可。
#### 0x05 The Exploit
最终 payload 分为两个请求。 请求 1，将 Payload 注入缓存中：
获取到 `form_build_id`，再进行请求 2，执行 payload：
* * *