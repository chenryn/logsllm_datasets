execute B->fd->bk = B->bk
Operation 3:
Manipulate the 
.GOT entry  of 
function free
(i.e., addr_free)
-♦ Load addr_free
to the memory during 
program initialization
.GOT entry of function 
free points to MCode
addr_free changed ♦-
addr_free
unchanged ♦-
pFSM4
−♦−
-♦ Execute addr_free when 
function free is called
Mcode is executed
1: PostData = calloc(contentLen  
+1024,sizeof(char));x=0; rc=0; 
 2: pPostData= PostData; 
 3: do { 
 4:     rc=recv(sock, pPostData, 
1024, 0);
 5:     if (rc==-1) {   
 6:           closeconnect(sid,1); 
 7:           return;  
 8:     } 
 9:     pPostData+=rc; 
10:     x+=rc; 
11: } while  ((rc==1024) || 
(x<contentLen));
Figure 4: a) NULL HTTPD Heap Overflow Vulnerabilities                    b) Source Code, Reading input
The  pFSM4  depicts  the  consequence  of  the  corruption 
of the GOT entry of free() (i.e., addr_free), which is similar 
to  the  scenario  depicted  by  pFSM3  in  the  Sendmail
vulnerability shown in Section 4. Finally, when the free() is 
called again, Mcode is executed. 
In  summary,  this  model  consists  of  three  operations. 
First  operation  encompasses  two  activities,  each  described 
by an independent pFSM (pFSM1 and pFSM2). Operation 2 
and  operation  3  consist  of  a  single  pFSM  each.  Cascading 
these  four  pFSMs  allows  us  to  reason  through  this  entire 
vulnerable code. 
The  purpose  of  the  next  set  of  examples  is  two-fold: 
(1)  show  that  FSM  approach  can  analyze  a  broad  class  of 
vulnerabilities (specific examples relate to input validation 
errors, file race condition errors, stack buffer overflow and 
format  string  vulnerability),  and  (2)  provide  additional 
examples  of  different  types  of  pFSMs  that  broadly  model 
the studied vulnerabilities. 
5.2  Example 2: xterm Log File Race Condition  
The program xterm emulates a terminal under the X11 
window  system.  A  file  race-condition8 exists  when  xterm
writes messages to the user log file [1]. Figure 5 illustrates 
two pFSMs required to describe this vulnerability. Consider 
an example scenario: xterm needs to log Tom’s messages to 
the  log  file  /usr/tom/x.  The  predicate,  which  defines  this 
operation  is  depicted  in  pFSM1,  i.e.,  if  Tom  has  no  write 
8 File race conditions are also referred as time-of-check-to-time-
of-use vulnerabilities. 
permission  or  the  provided  filename  is  a  symbolic  link,  the 
pFSM  should  reach 
.  The  real 
implementation  follows  pFSM1,  i.e.,  the  reject  condition  of 
the  predicate  matches  the  implementation,  hence  this  check 
is secure.  
reject  state 
the 
Writing the log file of user Tom
-♦ get the filename 
of Tom’s log file
T o m d o e s n o t h a v e wr i t e p e r m i s s i o n t o
t h e f i l e i s a s ym b o l i c l i n k
♦ -
t h e f i l e o r
T o m d o e s n o t h a v e wr i t e p e r m i s s i o n t o
t h e f i l e i s a s ym b o l i c l i n k
♦ -
t h e f i l e o r
pFSM1
Tom
link♦
-
hasthe
andthefileisnotasymbolic
permission
write
♦ -
a
s
i n k
i
l
t o m / x
/
r
/ u s
c
i
s y m b o l
A
-♦-
pFSM2
/usr/tom/x
symboliclink♦
isnota
-
-♦-
-♦ open “/usr/tom/x” 
with write permission
Possibility of creating 
symbolic links
Create symbolic link from 
/usr/tom/x to /etc/passwd
Tom appends his own data 
to the file /etc/passwd
Figure 5: xterm Log File Race Condition 
There  is  however  a  problem,  which  is  analyzed  in 
pFSM2.  In  state  A,  Tom  can  delete  the  file  /usr/tom/x  and 
create  a  symbolic  link  from  /usr/tom/x  to  /etc/passwd,  so 
long  as  Tom  creates  the  symbolic  link  before  the  system 
opens  the  file,  i.e.,  a  race  condition  exists.  This  timing 
problem  is  translated  into  a  condition  check  in  PFSM2,
which  depicts  the  condition  that  Tom  cannot  create  a 
symbolic  link  until  the  open  operation  is  complete.  As 
illustrated in this model, although there is no hidden path in 
pFSM1,  i.e.,  the  implementation  corresponding  to  pFSM1 is
secure,  there  is  a  hidden  path  in  pFSM2,  indicating  the 
possible  race  condition  and  the  associated  exploit:  Tom 
appends his own data to the file /etc/passwd.
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:06:47 UTC from IEEE Xplore.  Restrictions apply. 
5.3  Example 3: Solaris Rwall Arbitrary File Corruption 
Vulnerability  
Rwall  is  a  UNIX  network  utility  that  allows  a  user  to 
send a message to all users on a remote system (see [8] and 
CA-1994-06  in  [14]).  The  file  /etc/utmp  on  a  remote  system 
contains  a  list  of  all  currently  logged  in  users.  Rwall
daemon  on  the  remote  system  uses  the  information  in 
/etc/utmp to determine the users to which the message will 
be sent. A malicious user can edit the /etc/utmp file on the 
target  system  and  add  the  entry  “../etc/passwd”.  When  the 
malicious  user  issues  the  command:  “rwall  hostname  < 
newpasswordfile”, Rwall  daemon  writes  the  message  (the 
newpasswordfile) 
file 
/etc/passwd.
terminals  and 
to  all 
the 
to 
In  Figure  6,  pFSM1  checks  if  a  given  user  has  root 
privileges.  The  predicate  dictates  accepting  the  root  user 
and  rejecting  a  regular  user  (not  having  root  privilege).  In 
the  real  implementation,  the  write  permission  of  the  file 
/etc/utmp is set on, allowing a regular user to write this file 
(transition  to  the  accept  state).  Specifically,  as  denoted  by 
the  propagation  gate,  a  malicious  user  can  add  a 
“../etc/passwd” entry to the file /etc/utmp.
Operation 1:
Write to /etc/utmp
-♦ user request of 
writing /etc/utmp
regular user ♦-
pFSM1
-♦-
root ♦-
-♦ Open /etc/utmp for the user
Add “../etc/passwd” entry to the file /etc/utmp
Rwall daemon writes messages
non-terminal file ♦-
-♦ Get a file from 
/etc/utmp
pFSM2
-♦-
terminal ♦-
-♦ write user message to 
the terminal or file
Operation 2:
Rwall daemon writes user message 
to regular file /etc/passwd
Figure 6: Solaris Rwall Arbitrary File Corruption 
Vulnerability 
The  Operation  2  depicts  the  message  write  operation 
performed  by  the  Rwall  daemon.  The  daemon  gets  a 
filename from the file /etc/utmp. The predicate represented 
by  pFSM2  states  that  if  the  filename  refers  to  a  non-
terminal  file,  e.g.,  “../etc/passwd”,  it  should  be  rejected, 
and if the filename refers to a terminal, e.g., “/dev/pts/25”, 
the  user  specified  message  should  be  written  to  the 
terminal.  
In  the  implementation  of  the  Rwall  daemon,  no  file 
type  check  is  performed.  As  a  result,  given  an  entry 
/etc/passwd  added  to  the  /etc/utmp,  pFSM2  transits  to  the 
,  which 
reject  state  and  ends  up  in  the  termination  state 
corresponds  to a  security  violation  –  rwall  daemon  writes 
user messages to regular file /etc/passwd.
5.4  Example  4:  Validation  Error  due  to  IIS  Decoding 
Filenames  Superfluously  after  Applying  Security 
Checks  
CGI (Common Gateway Interface) programs under the 
/wwwroot/scripts  are  by  design  executable 
directory 
through  HTTP  request  from  a  user.  When  IIS9 receives  a 
CGI  filename  request,  it  interprets  the  filepath  as  a  path 
relative  to  /wwwroot/scripts.  Therefore,  unless  the  filepath 
contains  “../”,  the  target  file  should  be  under  the  directory 
/wwwroot/scripts (Bugtraq ID 2708).  
In Figure 7, pFSM1 depicts the predicate –  if the target 
file does not reside in the directory /wwwroot/scripts, reject 
the request. Because the path is relative to /wwwroot/scripts,
the above predicate is equivalent to – if the path of the target 
the  request.  The  IIS
file  does  contain  “../”,  reject 
implementation  includes  two  decoding  steps.  As  illustrated 
in  the  pFSM1, IIS  implementation  checks  the  following 
predicate  –  if  the  filepath  contains  “../”after  the  first 
decoding,  reject  the  request.  However,  the  implementation 
performs  the  second  decoding  step,  which  results  in 
violating  the  predicate  depicted  by  pFSM1,  and  allows 
executing 
in 
/wwwroot/scripts). This inconsistency between the predicate 
specified by pFSM1 and the implemented predicate allows  a 
transition  from  the  reject  state  to  accept  state  (the  hidden 
path).  
arbitrary 
residing 
code 
an 
(not 
The  attacker  can  thus  supply  a  malformed  filename 
containing  sub-string  such  as  “..%252f”.  After  the  second 
decoding, the string “..%252f” becomes “../”10, which allows 
the  execution  of  arbitrary  programs,  even  those  out  of  the 
directory  /wwwroot/scripts.  The  worm  Nimda  and  its 
variants actively exploit this vulnerability.  
-♦ get the filename 
of a CGI program
-♦ Decode 
filename first time
r e s i d e t h e
d i r e c t o r y / w w w r o o t / s c r i p t s / ♦ -
T h e f i l e d o e s n o t
pFSM1
The file resides in the 
directory /wwwroot/scripts/ ♦-
Filename containing “../” after first decoding ♦-
Filename without “../” after first decoding.
(Filename containing “..%252f” are 
accepted by the implementation)♦-
-♦ Decode filename 
second time
-♦ Execute the target 
CGI program
Execute arbitrry program, even those out of directory /wwwroot/scripts/,
because “../” appears after the second decoding.
Figure 7: IIS Decodes Filenames Superfluously after 
Applying Security Checks 
A Stack Buffer Overflow Vulnerability and A Format String 
Vulnerability. FSM  is  also  used  to  model  a  stack  buffer 
overflow  vulnerability  (#5960:  GHTTPD  Log()  Function 
Buffer  Overflow  Vulnerability)  and  a 
format  string 
vulnerability  (#1480  Multiple  Linux  Vendor  rpc.statd 
Remote  Format  String  Vulnerability).  Due  to  the  space 
limitation,  we  do  not  present  the  analysis  of  these  two 
examples. The details can be found in [21]. 
6.  Common Types of pFSMs  
Examples  in  the  previous  sections  show  that  the  FSM 
approach  enables  a  detailed  modeling/analysis  of  several 
9 IIS is Microsoft Internet Information Service. 
10 Note  that  “%25”  is  decoded  to  a  character  “%”  and  “%2f”  is 
decoded to a character “/”, so “..%252f” becomes “..%2f” after the 
first decoding, and is interpreted as “../” after the second decoding. 
Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN’03) 
0-7695-1959-8/03 $17.00 (c) 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:06:47 UTC from IEEE Xplore.  Restrictions apply. 
types  of  security  vulnerabilities:  buffer  overflow,  race 
condition,  signed  integer,  and  format  string  vulnerabilities 
(these  four  account  for  22%  of  all  vulnerabilities  reported 
in  Bugtraq).  Vulnerabilities  including,  access  validation 
errors, input validation errors, failure to handle exceptional 
conditions,  can  also  be  modeled,  if  the  predicates  are 
derived  from  available  information  vulnerability  reports, 
exploits descriptions, and application source code.  
As seen in the examples, the operations involving each 
vulnerability  can  be  modeled  as  a  series  of  pFSMs  –  each 
corresponding  to  an  elementary  activity.  The  simplicity  of 
the predicates defining the pFSMs makes the generation of 