**作者：极光无限维阵漏洞团队负责人—仙果**  
**原文链接：**
## 一. 题记
网络设备或其他IoT设备提取到固件之后进行安全分析和漏洞挖掘工作，对 Sophos UTM 进行安全分析时，发现其具体提供Web 功能的是一个Linux
文件，并没有发现web功能实现的html代码，通过 Burp Suite 抓包Web 请求发现所有web页面的请求展示都是通过该Linux
文件实现，自然必须对其进行解析才行继续分析，但难度非常大，一度束手无策，经过几天的详细排查分析，最终得以解决。
由于国内外资料网站均没有对Sophos UTM 固件文件的反编译资料，故梳理成文，分享给大家。
## 二. 分析
UTM 是Unified Threat Management的缩写 ，简称为统一威胁管理，各个安全厂商都有自己的 UTM 产品，比较出名的是
Fortinet、WatchGuard、Sophos等等，此次需要进行安全分析的产品就是 Sophos UTM，官方网站为：
获取到的固件文件为一个完整打包好的 ISO 光盘文件，使用 VmWare Workstation 安装之后， 就可以进入到UTM 页面中。
本地访问的地址是 
一般来说获取一个ssh shell 将会非常有助于安全分析，比完全从Web 入手难度就要下降几个等级，下面就先来获取命令行shell。
### 1\. 获取ssh shell & root shell
Sophos UTM 默认情况下不允许使用ssh shell，必须在web页面中开启，Management-System Settings-Shell
Acess 开启shell 功能。
注意要选择 "Allow password authentication"，否则要使用证书验证，比较麻烦，不方便分析。
接着输入 `root` 和 `loginuser` 两个用户的密码，并使用 `loginuser` ssh 登录。
    a@DESKTOP-22L12IV:$ ssh PI:EMAIL
    PI:EMAIL's password:
    Last login: Mon Nov  9 05:34:23 2020 from 192.168.21.1
    Sophos UTM
    (C) Copyright 2000-2014 Sophos Limited and others. All rights reserved.
    Sophos is a registered trademark of Sophos Limited and Sophos Group.
    All other product and company names mentioned are trademarks or registered
    trademarks of their respective owners.
    For more copyright information look at /doc/astaro-license.txt
    or http://www.astaro.com/doc/astaro-license.txt
    NOTE: If not explicitly approved by Sophos support, any modifications
          done by root will void your support.
    loginuser@test:/home/login > su
    Password:
    test:/home/login # id
    uid=0(root) gid=0(root) groups=0(root),890(xorp)
    test:/home/login # uname -a
    Linux test 3.8.13.27-0.176377654.gd7350fc-smp64 #1 SMP Wed Sep 17 10:45:23 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
    test:/home/login # cat /proc/version
    Linux version 3.8.13.27-0.176377654.gd7350fc-smp64 (abuild@axgbuild) (gcc version 4.3.4 [gcc-4_3-branch revision 152973] (SUSE Linux) ) #1 SMP Wed Sep 17 10:45:23 UTC 2014
    test:/home/login # cat /etc/version
     9.208008
    test:/home/login #
### 2\. 登录抓包
接下来就是登录抓包进行登录验证分析，使用的工具是`Burp Suite Pro`，正确配置之后，就可以有完整的登录验证包。
    POST /webadmin.plx HTTP/1.1
    Host: 192.168.21.100:4444
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:80.0) Gecko/20100101 Firefox/80.0
    Accept: text/javascript, text/html, application/xml, text/xml, */*
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    X-Requested-With: XMLHttpRequest
    X-Prototype-Version: 1.5.1.1
    Content-type: application/x-www-form-urlencoded; charset=UTF-8
    Content-Length: 287
    Origin: https://192.168.21.100:4444
    Connection: close
    Referer: https://192.168.21.100:4444/
    {"objs": [{"elements": {"login_username": "admin", "login_password": "test0011"}, "FID": "login_process"}], "SID": "0", "browser": "gecko", "backend_version": -1, "loc": "english", "_cookie": null, "wdebug": 0, "RID": "1604979704552_0.8572369473251601", "current_uuid": "", "ipv6": true}
发现登陆是使用 `json` 格式进行网络请求，方法是 `POST` ，请求的的接口文件是
`webadmin.plx`，同时登陆之后的页面请求和展示都是通过`webadmin.plx`进行数据交互，接下来就是对`webadmin.plx`进行解析分析。
## 三. 疑难问题
截止到此处，还没有遇到无法解决的问题，但深入文件分析时却给了沉重的一击，先来看`webadmin.plx`的文件属性：
    test:/var/sec/chroot-httpd/var/webadmin # file webadmin.plx
    webadmin.plx: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.2.5, dynamically linked (uses shared libs), stripped
32位可执行文件，没有异常，但是当使用 GDB 调试的时候提示：
GDB 提示文件格式不正确，事实是该文件可以执行：
    test:/var/sec/chroot-httpd/var/webadmin # ./webadmin.plx
    [19370] WARN: Use of uninitialized value $ENV{"REQUEST_METHOD"} in string eq at /wfe/asg/modules/asg_fcgi.pm line 59.
    test:/var/sec/chroot-httpd/var/webadmin #
有正常的错误返回，说明`webadmin.plx`文件正常，执行正常。
又发现该文件没有任何的 `Section`:
    a@DESKTOP-22L12IV:$ readelf -S webadmin.plx
    There are no sections in this file.
IDA Pro 又能够正常解析elf 文件，只有 `LOAD`节。
两眼一抓瞎，这可怎么办？
GDB 调试进程，失败。
尝试使用GDB 附加调试进程，失败+1,`not in executable format: File format not recognized`。
尝试GDB 附加父进程，然后调试子进程，失败+1，`not in executable format: File format not
recognized`。
尝试GDB dumps内存，失败+1，`not in executable format: File format not recognized`。
GDB Server 远程调试，失败+1，`not in executable format: File format not recognized`。
获取两个不同版本的`webadmin.plx`文件，进行补丁对比，无差别，失败+1。
查找分析 ELF 反调试手段，失败+1。
最后得出结论，GDB 调试无效，继续接着找其他办法。
梳理一下目前得到的信息：
  1. `webadmin.plx`负责处理UTM 系统登录，页面交互处理等等工作，是一个主体处理文件。
  2. ELF 可执行程序，32位。
  3. 可正常执行。
  4. GDB 调试无效
  5. 无反调试
  6. 补丁对比无效
若进行安全分析和漏洞挖掘，就必须剁掉`webadmin.plx`，接着分析吧。
## 四. 确认Perl 编译器
分析 `webadmin.plx`，查找ELF 中的字符串，其中几个字段尤为可疑：
    a@DESKTOP-22L12IV:Sophos_UTM$ strings webadmin.plx |grep Perl     
    psym_Perl_newSVpv                                                                       
    psym_Perl_stack_grow                                                                    
    psym_Perl_Itmps_floor_ptr                                                               
    psym_Perl_sv_setiv                                                                      
    psym_Perl_markstack_grow                                                                
    psym_Perl_Iexit_flags_ptr                                                               
    psym_Perl_save_int                                                                      
    psym_Perl_push_scope                                                                    
    psym_Perl_Isv_no_ptr                                                                    
    psym_Perl_call_sv                                                                       
    psym_Perl_Imarkstack_max_ptr                                                            
    psym_Perl_Istack_base_ptr                                                               
    psym_Perl_Gop_mutex_ptr                                                                 
    psym_Perl_eval_pv                                                                       
    psym_Perl_Gthr_key_ptr                                                                  
    psym_Perl_call_list                                                                     
    psym_Perl_Icurstackinfo_ptr                                                             
    psym_Perl_get_context                                                                   
    psym_Perl_Guse_safe_putenv_ptr                                                          
    psym_Perl_IXpv_ptr                                                                      
    psym_Perl_pop_scope    
很明显，跟Perl有很大的关系。
IDA 中也显示同样的结果，怀疑该`webadmin.plx`是由Perl 编译出来的，接下来就是验证自己的想法。
搜索引擎中查找资料，发现主流有三款程序可以从 Perl 代码编译成 ELF 软件：PerlAPP，PerlCC，Perl2EXE，而针对 Perl ELF
反编译就只有52破解网站上有一份PerlAPP 在Windows 下的资料，Linux 下的资料一无所有，也是奇葩，Perl 越混越差了。
从IDA对`webadmin.plx`的反编译代码中分析查找，找到一处关键字：
     v1 = *(_DWORD *)psym_Perl_Istack_sp_ptr(a1);
      v2 = (int **)psym_Perl_Imarkstack_ptr_ptr(a1);
      v3 = **v2;
      --*v2;
      v4 = (v1 - (*(_DWORD *)psym_Perl_Istack_base_ptr(a1) + 4 * v3)) >> 2;
      v18 = sub_804E6EC();
      v33 = a1;
      v34 = psym_Perl_get_hv(a1, "PerlApp::lic", 1); //PerlApp::lic,此处为关键字
      if ( v4 )
        v19 = *(_DWORD *)(*(_DWORD *)psym_Perl_Istack_base_ptr(a1) + 4 * (v3 + 1));
      else
        v19 = psym_Perl_Isv_undef_ptr(a1);
      v20 = *(int **)(v18 + 48);
      licFree(*(_DWORD *)(v18 + 56));
      *(_DWORD *)(v18 + 56) = 0;
从`PerlApp::lic`关键字来分析，基本可以确认 `webadmin.plx`是使用 `PerlAPP` 编译而成的ELF文件。
## 五. 问题复现
`webadmin.plx`确认是由 `PerlAPP`工具编译而来，接下来就来验证一下，在Linux 环境下搭建一套PerlAPP环境。