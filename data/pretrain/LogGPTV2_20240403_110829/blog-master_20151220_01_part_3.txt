progress: 65.0 s, 3699.0 tps, lat 4.324 ms stddev 4.355  
progress: 70.0 s, 3698.1 tps, lat 4.326 ms stddev 4.345  
progress: 75.0 s, 3653.2 tps, lat 4.378 ms stddev 4.496  
progress: 80.0 s, 3623.2 tps, lat 4.415 ms stddev 4.615  
progress: 85.0 s, 3653.9 tps, lat 4.378 ms stddev 4.464  
progress: 90.0 s, 3548.9 tps, lat 4.507 ms stddev 4.958  
progress: 95.0 s, 3656.9 tps, lat 4.374 ms stddev 4.520  
progress: 100.0 s, 3750.1 tps, lat 4.265 ms stddev 4.221  
progress: 105.0 s, 3742.4 tps, lat 4.274 ms stddev 4.190  
progress: 110.0 s, 3662.2 tps, lat 4.368 ms stddev 4.464  
progress: 115.0 s, 3652.6 tps, lat 4.379 ms stddev 4.431  
progress: 120.0 s, 3707.2 tps, lat 4.315 ms stddev 4.363  
progress: 125.0 s, 3765.1 tps, lat 4.248 ms stddev 4.216  
progress: 130.0 s, 3750.7 tps, lat 4.265 ms stddev 4.244  
progress: 135.0 s, 3693.3 tps, lat 4.331 ms stddev 4.371  
progress: 140.0 s, 3748.8 tps, lat 4.267 ms stddev 4.264  
progress: 145.0 s, 3702.3 tps, lat 4.320 ms stddev 4.297  
progress: 150.0 s, 3584.9 tps, lat 4.462 ms stddev 4.832  
progress: 155.0 s, 3537.5 tps, lat 4.522 ms stddev 4.942  
progress: 160.0 s, 3638.0 tps, lat 4.397 ms stddev 4.472  
progress: 165.0 s, 3645.4 tps, lat 4.388 ms stddev 4.489  
progress: 170.0 s, 3642.1 tps, lat 4.392 ms stddev 4.488  
progress: 175.0 s, 3650.1 tps, lat 4.382 ms stddev 4.473  
progress: 180.0 s, 3550.6 tps, lat 4.505 ms stddev 4.733  
progress: 185.0 s, 3550.3 tps, lat 4.505 ms stddev 4.613  
progress: 190.0 s, 3703.2 tps, lat 4.319 ms stddev 4.374  
progress: 195.0 s, 3666.0 tps, lat 4.363 ms stddev 4.440  
progress: 200.0 s, 3660.2 tps, lat 4.371 ms stddev 4.520  
progress: 205.0 s, 3686.4 tps, lat 4.339 ms stddev 4.374  
progress: 210.0 s, 3557.1 tps, lat 4.497 ms stddev 4.882  
progress: 215.0 s, 3546.0 tps, lat 4.505 ms stddev 4.914  
progress: 220.0 s, 3726.5 tps, lat 4.298 ms stddev 4.293  
progress: 225.0 s, 3740.5 tps, lat 4.276 ms stddev 4.247  
progress: 230.0 s, 3704.3 tps, lat 4.318 ms stddev 4.337  
progress: 235.0 s, 3635.7 tps, lat 4.400 ms stddev 4.510  
progress: 240.0 s, 3592.6 tps, lat 4.453 ms stddev 4.675  
progress: 245.0 s, 3581.2 tps, lat 4.466 ms stddev 4.732  
progress: 250.0 s, 3609.8 tps, lat 4.431 ms stddev 4.626  
progress: 255.0 s, 3628.8 tps, lat 4.408 ms stddev 4.549  
progress: 260.0 s, 3611.0 tps, lat 4.430 ms stddev 4.608  
progress: 265.0 s, 3666.0 tps, lat 4.363 ms stddev 4.395  
progress: 270.0 s, 3657.9 tps, lat 4.373 ms stddev 4.575  
progress: 275.0 s, 3603.4 tps, lat 4.439 ms stddev 4.791  
progress: 280.0 s, 3794.4 tps, lat 4.215 ms stddev 4.105  
progress: 285.0 s, 3759.1 tps, lat 4.255 ms stddev 4.123  
progress: 290.0 s, 3631.6 tps, lat 4.405 ms stddev 4.468  
progress: 295.0 s, 3741.2 tps, lat 4.275 ms stddev 4.196  
progress: 300.0 s, 3743.8 tps, lat 4.273 ms stddev 4.223  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 16  
number of threads: 16  
duration: 300 s  
number of transactions actually processed: 1101227  
latency average: 4.357 ms  
latency stddev: 4.453 ms  
tps = 3670.717757 (including connections establishing)  
tps = 3670.852824 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002000        \setrandom id 1 2000000  
        4.354966        select f_test(:id);  
```  
小结：  
1\. RDS内部再优化一下，性能还会更加靠谱。可以参考前面的参数分析。  
2\. 另外需要注意别触碰到IOPS的瓶颈，因为是用cgroup限制的，影响很大。  
3\. RDS用了异步流复制，所以用户需要注意，是否有绝对的不丢事务的需求，这点一定要和阿里云确定清楚，如果有，必须要使用同步流复制。  
其他：  
在阿里云RDS中使用dblink：  
```  
CREATE SERVER fdtest FOREIGN DATA WRAPPER dblink_fdw OPTIONS (host 'xxxxxx', dbname 'postgres', port '3433');  
CREATE USER MAPPING FOR digoal SERVER fdtest OPTIONS (user 'xxx', password 'xxx');  
GRANT USAGE ON FOREIGN SERVER fdtest TO digoal;  
SELECT dblink_connect('myconn', 'fdtest');  
```  
查看数据库的真实IP  
```  
postgres=> SELECT * from dblink('myconn', 'select inet_server_addr()') as t(ip inet);  
    ip  
---------------  
 10.151.133.18  
(1 row)  
```  
查看客户端的真实IP，从现象上看，至少中间件这层在IP层好像是透明的，或者做了协议适配。  
```  
postgres=> SELECT * from dblink('myconn', 'select inet_client_addr()') as t(ip inet);  
    ip  
---------------  
 10.151.133.19  
(1 row)  
```  
查看standby状态，普通用户现在了一些信息的查看。  
```  
postgres=>  select * from pg_stat_replication ;  
  pid   | usesysid |  usename   | application_name | client_addr | client_hostname | client_port | backend_start | backend_xmin | st  
ate | sent_location | write_location | flush_location | replay_location | sync_priority | sync_state   
--------+----------+------------+------------------+-------------+-----------------+-------------+---------------+--------------+---  
----+---------------+----------------+----------------+-----------------+---------------+------------  
 204877 |    16384 | replicator | standby1         |             |                 |             |               |         3310 |     
    |               |                |                |                 |               |   
(1 row)  
```  
除了普通用户digoal, 还有几个用户是RDS后台用的，复制用的。  
```  
postgres=> \du  
                                    List of roles  
        Role name        |                   Attributes                   | Member of   
-------------------------+------------------------------------------------+-----------  
 aurora                  | Superuser                                      | {}  
 aurora_proxy            | Superuser                                      | {}  
 digoal                  | Create role, Create DB                         | {}  
 pgrdskp501t1znuuzp2xxxx | Superuser, Create role, Create DB, Replication | {}  -- 这里可能暴露了主机名，建议改改  
 replicator              | Superuser, Replication                         | {}  
```  
待续。。。  
后期再测试使用plproxy分布式处理的性能  
## 参考  
http://blog.163.com/digoal@126/blog/static/163877040201542103933969/  
http://blog.163.com/digoal@126/blog/static/1638770402015463252387/  
http://blog.163.com/digoal@126/blog/static/16387704020154651655783/  
http://blog.163.com/digoal@126/blog/static/16387704020154653422892/  
http://blog.163.com/digoal@126/blog/static/16387704020154811421484/  
http://blog.163.com/digoal@126/blog/static/16387704020154129958753/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")