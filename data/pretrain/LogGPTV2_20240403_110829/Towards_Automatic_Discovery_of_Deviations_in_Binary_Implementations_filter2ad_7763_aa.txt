title:Towards Automatic Discovery of Deviations in Binary Implementations
with Applications to Error Detection and Fingerprint Generation
author:David Brumley and
Juan Caballero and
Zhenkai Liang and
James Newsome
Towards Automatic Discovery of Deviations in Binary Implementations with
Applications to Error Detection and Fingerprint Generation
David Brumley, Juan Caballero, Zhenkai Liang, James Newsome, Dawn Song
Carnegie Mellon University
{dbrumley,jcaballero,zliang,jnewsome,dawnsong}@cmu.edu
Abstract
Different implementations of the same protocol speciﬁ-
cation usually contain deviations, i.e., differences in how
they check and process some of their inputs. Deviations
are commonly introduced as implementation errors or as
different interpretations of the same speciﬁcation. Auto-
matic discovery of these deviations is important for sev-
eral applications. In this paper, we focus on automatic
discovery of deviations for two particular applications:
error detection and ﬁngerprint generation.
We propose a novel approach for automatically de-
tecting deviations in the way different implementations
of the same speciﬁcation check and process their input.
Our approach has several advantages: (1) by automati-
cally building symbolic formulas from the implementa-
tion, our approach is precisely faithful to the implemen-
tation; (2) by solving formulas created from two different
implementations of the same speciﬁcation, our approach
signiﬁcantly reduces the number of inputs needed to ﬁnd
deviations; (3) our approach works on binaries directly,
without access to the source code.
We have built a prototype implementation of our ap-
proach and have evaluated it using multiple implemen-
tations of two different protocols: HTTP and NTP. Our
results show that our approach successfully ﬁnds devi-
ations between different implementations, including er-
rors in input checking, and differences in the interpre-
tation of the speciﬁcation, which can be used as ﬁnger-
prints.
1 Introduction
Many different implementations usually exist for the
same protocol. Due to the abundance of coding errors
and protocol speciﬁcation ambiguities, these implemen-
tations usually contain deviations, i.e., differences in how
they check and process some of their inputs. As a result,
same inputs can cause different implementations to reach
semantically different protocol states. For example, an
implementation may not perform sufﬁcient input check-
ing to verify if an input is well-formed as speciﬁed in the
protocol speciﬁcation. Thus, for some inputs, it might
exhibit a deviation from another implementation, which
follows the protocol speciﬁcation and performs the cor-
rect input checking.
Finding these deviations in implementations is impor-
tant for several applications. In particular, in this paper
we show 1) how we can automatically discover these de-
viations, and 2) how we can apply the discovered devia-
tions to two particular applications: error detection and
ﬁngerprint generation.
First, ﬁnding a deviation between two different imple-
mentations of the same speciﬁcation may indicate that at
least one of the two implementations has an error, which
we call error detection. Finding such errors is important
to guarantee that the protocol is correctly implemented,
to ensure proper interoperability with other implementa-
tions, and to enhance system security since errors often
represent vulnerabilities that can be exploited. Enabling
error detection by automatically ﬁnding deviations be-
tween two different implementations is particularly at-
tractive because it does not require a manually written
model of the protocol speciﬁcation. These models are
usually complex, tedious, and error-prone to generate.
Note that such deviations do not necessarily ﬂag an er-
ror in one of the two implementations, since deviations
can also be caused by ambiguity in the speciﬁcation or
when some parts are not fully speciﬁed. However, au-
tomatic discovery of such deviations is a good way to
provide candidate implementation errors.
Second, such deviations naturally give rise to ﬁnger-
prints, which are inputs that, when given to two differ-
ent implementations, will result in semantically differ-
ent output states. Fingerprints can be used to distinguish
between the different implementations and we call the
discovery of such inputs ﬁngerprint generation. Finger-
printing has been in use for more than a decade [25]
USENIX Association
16th USENIX Security Symposium
213
and is an important tool in network security for remotely
identifying which implementation of an application or
operating system a remote host is running. Fingerprint-
ing tools [8, 11, 15] need ﬁngerprints to operate and con-
stantly require new ﬁngerprints as new implementations,
or new versions of existing implementations, become
available. Thus, the process of automatically ﬁnding
these ﬁngerprints, i.e., the ﬁngerprint generation, is cru-
cial for these tools.
Automatic deviation discovery is a challenging task—
deviations usually happen in corner cases, and discover-
ing deviations is often like ﬁnding needles in a haystack.
Previous work in related areas is largely insufﬁcient. For
example, the most commonly used technique is random
or semi-random generation of inputs [20,43] (also called
fuzz testing). In this line of approach, random inputs are
generated and sent to different implementations to ob-
serve if they trigger a difference in outputs. The obvious
drawback of this approach is that it may take many such
random inputs before ﬁnding a deviation.
In this paper, we propose a novel approach to auto-
matically discover deviations in input checking and pro-
cessing between different implementations of the same
protocol speciﬁcation. We are given two programs P1
and P2 implementing the same protocol. At a high level,
we build two formulas, f1 and f2, which capture how
each program processes a single input. Then, we check
whether the formula (f1 ∧ ¬f2) ∨ (¬f1 ∧ f2) is satisﬁ-
able, using a solver such as a decision procedure. If the
formula is satisﬁable, it means that we can ﬁnd an input,
which will satisfy f1 but not f2 or vice versa, in which
case it may lead the two program executions to seman-
tically different output states. Such inputs are good can-
didates to trigger a deviation. We then send such candi-
date inputs to the two programs and monitor their output
states. If the two programs end up in two semantically
different output states, then we have successfully found
a deviation between the two implementations, and the
corresponding input that triggers the deviation.
We have built a prototype implementation of our ap-
proach.
It handles both Windows and Linux binaries
running on an x86 platform. We have evaluated our ap-
proach using multiple implementations of two different
protocols: HTTP and NTP. Our approach has success-
fully identiﬁed deviations between servers and automat-
ically generated inputs that triggered different server be-
haviors. These deviations include errors and differences
in the interpretation of the protocol speciﬁcation. The
evaluation shows that our approach is accurate: in one
case, the relevant part of the generated input is only three
bits. Our approach is also efﬁcient: we found deviations
using a single request in about one minute.
Contributions.
following contributions:
In summary, in this paper, we make the
• Automatic discovery of deviations: We propose
a novel approach to automatically discover devia-
tions in the way different implementations of the
same protocol speciﬁcation check and process their
input. Our approach has several advantages: (1)
by automatically building symbolic formulas from
an implementation, our approach is precisely faith-
ful to the implementation; (2) by solving formulas
created from two different implementations of the
same speciﬁcation, our approach signiﬁcantly re-
duces the number of inputs needed to ﬁnd devia-
tions; (3) our approach works on binaries directly,
without access to the source code. This is important
for wide applicability, since implementations may
be proprietary and thus not have the source code
available. In addition, the binary is what gets ex-
ecuted, and thus it represents the true behavior of
the program.
• Error detection using deviation discovery: We
show how to apply our approach for automati-
cally discovering deviations to the problem of error
detection—the discovered deviations provide can-
didate implementation errors. One fundamental ad-
vantage of our approach is that it does not require
a user to manually generate a model of the protocol
speciﬁcation, which is often complex, tedious, and
error-prone to generate.
• Fingerprint generation using deviation discov-
ery: We show how to apply our approach for
automatically discovering deviations to the prob-
lem of ﬁngerprint generation—the discovered devi-
ations naturally give rise to ﬁngerprints. Compared
to previous approaches, our solution signiﬁcantly
reduces the number of candidate inputs that need
to be tested to discover a ﬁngerprint [20].
• Implementing the approach: We have built a pro-
totype that implements our approach. Our evalua-
tion shows that our approach is accurate and efﬁ-
cient. It can identify deviations with few example
inputs at bit-level accuracy.
The remainder of the paper is organized as fol-
lows. Section 2 introduces the problem and presents
an overview of our approach. In Section 3 we present
the different phases and elements that comprise our ap-
proach and in Section 4 we describe the details of our
implementation. Then, in Section 5 we present the eval-
uation results of our approach over different protocols.
We discuss future enhancements to our approach in Sec-
tion 6. Finally, we present the related work in Section 7
and conclude in Section 8.
214
16th USENIX Security Symposium
USENIX Association
2 Problem Statement
and Approach
Overview
In this section, we ﬁrst describe the problem statement,
then we present the intuition behind our approach, and
ﬁnally we give an overview of our approach.
Problem statement.
In this paper we focus on the
problem of automatically detecting deviations in proto-
col implementations. In particular, we aim to ﬁnd inputs
that cause two different implementations of the same
protocol speciﬁcation to reach semantically different out-
put states. When we ﬁnd such an input, we say we have
found a candidate deviation.
The output states need to be externally observable. We
use two methods to observe such states: (a) monitoring
the network output of the program, and (b) supervising
its environment, which allows us to detect unexpected
states such as program halt, reboot, crash, or resource
starvation. However, we cannot simply compare the
complete output from both implementations, since the
output may be different but semantically equivalent. For
example, many protocols contain sequence numbers, and
we would expect the output from two different imple-
mentations to contain two different sequence numbers.
However, the output messages may still be semantically
equivalent.
Therefore, we may use some domain knowledge about
the speciﬁc protocol being analyzed to determine when
two output states are semantically different. For exam-
ple, many protocols such as HTTP, include a status code
in the response to provide feedback about the status of
the request. We use this information to determine if two
output states are semantically equivalent or not. In other
cases, we observe the effect of a particular query in the
program, such as program crash or reboot. Clearly these
cases are semantically different from a response being
emitted by the program.
Intuition of our approach. We are given two imple-
mentations P1 and P2 of the same protocol speciﬁcation.
Each implementation at a high level can be viewed as
a mapping function from the protocol input space I to
the protocol output state space S. Let P1, P2 : I → S
represent the mapping function of the two implementa-
tions. Each implementation accepts inputs x ∈ I (e.g.,
an HTTP request), and then processes the input resulting
in a particular protocol output state s ∈ S (e.g., an HTTP
reply). At a high level, we wish to ﬁnd inputs such that
the same input, when sent to the two implementations,
will cause each implementation to result in a different
protocol output state.
Our goal is to ﬁnd an input x ∈ I such that P1(x) 6=
P2(x). Finding such an input through random testing is
usually hard.
However, in general it is easy to ﬁnd an input x ∈ I
such that P1(x) = P2(x) = s ∈ S, i.e., most inputs
will result in the same protocol output state s for differ-
ent implementations of the same speciﬁcation. Let f (x)
be the formula representing the set of inputs x such that
f (x) = true ⇐⇒ P (x) = s. When P1 and P2 imple-
ment the same protocol differently, there may be some
input where f1 will not be the same as f2:
∃x.(f1(x) ∧ ¬f2(x)) ∨ (¬f1(x) ∧ f2(x)) = true.
The intuition behind the above expression is that when
f1(x) ∧ ¬f2(x) = true, then P1(x) = s (because
f1(x) = true) while P2(x) 6= s (because f2(x) =
false), thus the two implementations reach different out-
put states for the same input x. Similarly, ¬f1(x)∧f2(x)
indicates when P1(x) 6= s, but P2(x) = s. We take the
disjunction since we only care whether the implementa-
tions differ from each other.
Given the above intuition, the central idea is to create
the formula f using the technique of weakest precondi-
tion [19, 26]. Let Q be a predicate over the state space
of a program. The weakest precondition wp(P, Q) for
a program P and post-condition Q is a boolean formula
f over the input space of the program. In our setting, if
f (x) = true, then P (x) will terminate in a state satisfy-
ing Q, and if f (x) = false, then P (x) will not terminate
in a state satisfying Q (it either “goes wrong” or does not
terminate). For example, if the post-condition Q is that
P outputs a successful HTTP reply, then f = wp(P, Q)
characterizes all inputs which lead P to output a suc-
cessful HTTP reply. The boolean formula output by the
weakest precondition is our formula f .
Furthermore, we observe that the above method can
still be used even if we do not consider the entire pro-
gram and only consider a single execution path (we dis-
cuss multiple execution paths in Section 6). In that case,
the formula f represents the subset of protocol inputs
that follow one of the execution paths considered and still
reach the protocol output state s. Thus, f (x) = true ⇒
P (x) = s, since if an input satisﬁes f then for sure it
will make program P go to state s, but the converse is
not necessarily true—an input which makes P go to state
s may not satisfy f . In our problem, this means that the
difference between f1 and f2 may not necessarily result
in a true deviation, as shown in Figure 2. Instead, the
difference between f1 and f2 is a good candidate, which
we can then test to validate whether it is a true deviation.
Overview of our approach. Our approach is an itera-
tive process, and each iteration consists of three phases,
as shown in Figure 1. First, in the formula extraction
phase, we are given two binaries P1 and P2 implement-
ing the same protocol speciﬁcation, such as HTTP, and
USENIX Association
16th USENIX Security Symposium
215
Input x
Program
binary P1
Program
binary P2
Symbolic
formula
generator
Symbolic
formula(cid:13)
generator
Symbolic
formula f1
Symbolic
formula f2
Combining
f1 and f2
Solver
Satisfiable?
Yes
Candidate(cid:13)