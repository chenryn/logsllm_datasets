  Object localObject3 = wrap(paramObject);	
  assert (localObject3.getClass() == localObject1);	
  return localObject3;	
}	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
26	
Privilege/Sandbox Issues due to Least Privilege Violation	
Library Sub-component Weaknesses	
CVE-2013-1484	
•  Proxy.newProxyInstance	
–  Does not save the caller’s AccessControlContext	
–  Requires an InvocationHandler that executes an arbitrary statement	
•  MethodHandleProxies.asInterfaceInstance	
–  Can create an InvocationHandler instance	
–  Gives access to ClassLoader.deﬁneClass via a MethodHandle	
•  Execute the bound MethodHandle without putting user frames on the stack	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
27	
Privilege/Sandbox Issues due to Least Privilege Violation	
Library Sub-component Weaknesses	
CVE-2013-1484	
•  Example snippet	
•  Still need to use Proxy.newProxyInstance	
•  Then need to invoke the method such that no user frames are put on the stack	
DesiredClass desiredClassInstance = new DesiredClass()	
MethodType methodType = MethodType.methodType(ReturnClass.class, ParameterClass.class);	
MethodHandle methodHandle = MethodHandles.lookup().findVirtual(DesiredClass.class, "instanceMethod", methodType);	
methodHandle = methodHandle.bindTo(desiredClassInstance);	
methodHandle = MethodHandles.dropArguments(methodHandle, 0, Object.class, Method.class, Object[].class);	
InvocationHandle iHandler = MethodHandleProxies.asInterfaceInstance(InvocationHandler.class, methodHandle);	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
28	
Heap-based Buﬀer Overﬂow due to Integer Overﬂow	
2D Sub-component Weaknesses	
CVE-2013-0809	
•  mlib_ImageCreate	
–  Implemented in jdk/src/share/native/sun/awt/medialib/mlib_ImageCreate.c	
–  Overﬂow based on height * width * channels * 4	
mlib_image *mlib_ImageCreate(mlib_type type, mlib_s32  channels, 	
       mlib_s32  width, mlib_s32  height) {	
    if (width  4) {	
        return NULL;	
    };	
...	
    switch (type) {	
...	
        case MLIB_INT:	
            wb = width * channels * 4;	
            break; 	
...	
    }	
...	
    data = mlib_malloc(wb * height); 	
...	
}	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
29	
Heap-based Buﬀer Overﬂow due to Integer Overﬂow	
2D Sub-component Weaknesses	
CVE-2013-0809	
•  Patched in JDK 7u17	
–  Introduction of the SAFE_TO_MULT macro	
–  Used whenever values are being multiplied	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
30	
mlib_image *mlib_ImageCreate(mlib_type type, mlib_s32  channels, mlib_s32  width, mlib_s32  height) {	
  if (!SAFE_TO_MULT(width, channels)) {	
    return NULL;	
  }	
  wb = width * channels;	
...	
  switch (type) {	
...	
    case MLIB_INT:	
      if (!SAFE_TO_MULT(wb, 4)) { return NULL; }	
      wb *= 4;	
      break;	
...	
  }	
...	
  if (!SAFE_TO_MULT(wb, height)) {return NULL; }	
  data = mlib_malloc(wb * height);	
  if (data == NULL) { return NULL; }	
...	
}	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
31	
Out-of-bounds Write due to Integer Overﬂow	
2D Sub-component Weaknesses	
CVE-2013-2420	
•  setICMpixels	
–  Implemented in jdk/src/share/native/sun/awt/image/awt_ImageRep.c	
–  Accessible via sun.awt.image.ImageRepresentation 	
–  Issue lies in the last parameter	
•  Its scanlideStride ﬁeld is used without any validation	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
32	
JNIEXPORT void JNICALL	
Java_sun_awt_image_ImageRepresentation_setICMpixels(JNIEnv *env, jclass cls, jint x, jint y, jint w, jint h, jintArray jlut, 	
                                                    jbyteArray jpix, jint off, jint scansize, jobject jict) {	
    unsigned char *srcData = NULL;	
    int *dstData;	
    int *dstP, *dstyP;	
    unsigned char *srcyP, *srcP;	
    int *srcLUT = NULL;	
    int yIdx, xIdx;	
    int sStride;	
    int *cOffs;	
    int pixelStride;	
    jobject joffs = NULL;	
    jobject jdata = NULL;	
    sStride = (*env)->GetIntField(env, jict, g_ICRscanstrID);	
    pixelStride = (*env)->GetIntField(env, jict, g_ICRpixstrID);	
    joffs = (*env)->GetObjectField(env, jict, g_ICRdataOffsetsID);	
    jdata = (*env)->GetObjectField(env, jict, g_ICRdataID);	
    srcLUT = (int *) (*env)->GetPrimitiveArrayCritical(env, jlut, NULL);	
    srcData = (unsigned char *) (*env)->GetPrimitiveArrayCritical(env, jpix, NULL);	
    cOffs = (int *) (*env)->GetPrimitiveArrayCritical(env, joffs, NULL);	
    dstData = (int *) (*env)->GetPrimitiveArrayCritical(env, jdata, NULL);	
    dstyP = dstData + cOffs[0] + y*sStride + x*pixelStride;	
    srcyP = srcData + off;	
    for (yIdx = 0; yIdx  0 ? (ss) : -(ss));	
        if (limit = srcDataLength) {           	
            return JNI_FALSE;                           	
        }                                                	
        CHECK_STRIDE(0, h, scansize);                    	
        /* check scansize */                             	
        pixeloffset = scansize * (h - 1);                	
        if ((w - 1) > (0x7fffffff - pixeloffset)) {      	
            return JNI_FALSE;                            	
        }                                               	
        pixeloffset += (w - 1);                          	
        if (off > (0x7fffffff - pixeloffset)) {          	
            return JNI_FALSE;                            	
        }                                                	
    } while (0)	
#define CHECK_DST(xx, yy)                                	
    do {                                                 	
        int soffset = (yy) * sStride;                    	
        int poffset = (xx) * pixelStride;                	
        if (poffset > (0x7fffffff - soffset)) {          	
            return JNI_FALSE;                            	
        }                                                	
        poffset += soffset;                              	
        if (dstDataOff > (0x7fffffff - poffset)) {       	
            return JNI_FALSE;                           	
        }                                                	
        poffset += dstDataOff;                           	
        if (poffset = dstDataLength) {   	
            return JNI_FALSE;                            	
        }                                                	
    } while (0)                                          	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
35	
JNIEXPORT jboolean JNICALL	
Java_sun_awt_image_ImageRepresentation_setICMpixels(JNIEnv *env, jclass cls, jint x, jint y, jint w, jint h,  
jintArray jlut, jbyteArray jpix, jint off, jint scansize, jobject jict) 
{	
...	
    if (x GetIntField(env, jict, g_ICRscanstrID);	
    pixelStride = (*env)->GetIntField(env, jict, g_ICRpixstrID);	
    joffs = (*env)->GetObjectField(env, jict, g_ICRdataOffsetsID);	
    jdata = (*env)->GetObjectField(env, jict, g_ICRdataID);	
    if (JNU_IsNull(env, joffs) || (*env)->GetArrayLength(env, joffs) GetArrayLength(env, jpix);	
    dstDataLength = (*env)->GetArrayLength(env, jdata);	
    cOffs = (int *) (*env)->GetPrimitiveArrayCritical(env, joffs, NULL);	
    if (cOffs == NULL) {	
        return JNI_FALSE;	
    }	
... 	
    /* do basic validation: make sure that offsets for	
    * first pixel and for last pixel are safe to calculate and use */	
    CHECK_STRIDE(y, h, sStride);	
    CHECK_STRIDE(x, w, pixelStride);	
    CHECK_DST(x, y);	
    CHECK_DST(x + w -1, y + h - 1);	
    /* check source array */	
    CHECK_SRC();	
...	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
36	
Untrusted Pointer Dereference	
JavaFX Sub-component Weakness	
CVE-2013-2428	
•  com.sun.webpane.platform.WebPage	
–  Native pointer stored in the pPage private instance variable	
–  Accessible via the public getPage instance method	
–  Some instance methods reference pPage directly	
•  Others use the getPage accessor	
–  Subclass WebPage and re-implement getPage to achieve memory corruption	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
37	
package com.sun.webpage.platform;	
...	
public class WebPage	
{	
...	
  private long pPage = 0L;	
...	
  public long getPage() {	
    return this.pPage;	
  }	
...	
  public void setEditable(boolean paramBoolean) {	
    lockPage();	
    try {	
      log.log(Level.FINE, "setEditable");	
      if (this.isDisposed) {	
        log.log(Level.FINE, "setEditable() request for a disposed web page.");	
      }	
      else	
      {	
        twkSetEditable(getPage(), paramBoolean);	
      }	
    } finally { unlockPage(); }	
  }	
...	
  private native void twkSetEditable(long paramLong, boolean paramBoolean);	
...	
}	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
38	
Untrusted Pointer Dereference	
JavaFX Sub-component Weaknesses	
CVE-2013-2428	
•  Access restricted in JDK 7u13	
–  com.sun.webpane added to the package access restriction list	
•  Patched in JDK 7u21	
–  getPage method changed to package-private and ﬁnal	
final long getPage() {	
  return this.pPage;	
}	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
Leveraging Sub-component 
Weaknesses	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
40	
Threat Landscape	
Exploit Kits Focus on Java	
•  Require 2+ Java Exploits to be Competitive	
Mirrored Timelines	
•  Increased Vulnerabilities Discoveries	
•  Spike in Unique Java Malware Samples	
Attackers Upping Their Game	
•  12,000 Unique Samples Against Just 9 CVEs	
•  Targeting More CVEs	
•  Getting Exploits on More Machines	
Java Malware Samples Per Month	
Exploit Kit Authors Jumping on the Bandwagon	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
41	
Highlighting Tool Popularity	
Aligning Sub-component Weaknesses to Attacks	
Determine What is Available	
•  Actively Targeted CVEs	
•  Penetration Testing Tools	
•  Exploit Kits 	
Toolsets Focus on Sandbox Bypasses	
1. 
Unsafe Reﬂection	
2. 
Type Confusion	
3. 
Heap-based Buﬀer Overﬂow	
4. 
Least Privilege Violation	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
42	
Measuring the Landscape	
Weaknesses Utilized by Attackers	
Most Prevalent Issue Under Active Exploitation	
•  Type Confusion based Sandbox Bypasses	
Memory Corruption Issues Barely Visible	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
43	
Exploitation Techniques	
Sandbox Bypasses	
•  System.setSecurityManager(null)	
–  Need higher context	
–  No user stack	
Memory Corruption	
•  “Traditional” Exploitation Techniques	
–  Still have to bypass DEP and ASLR	
•  Something easier?	
–  java.beans.Statement	
Bugs in Native Code	
System.setSecurityManager(null)	
mov  ecx,[esp+0C]   // pObserver 
test ecx,ecx 
je   +0C 
mov  eax,[ecx] 
mov  edx,[esp+14]   // pImage 
mov  eax,[eax+10] 
push edx 
call eax 
ret  18 	
© Copyright 2013 Hewlett-Packard Development Company, L.P.  The information contained herein is subject to change without notice.	
44	