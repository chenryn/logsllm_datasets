we present a protocol that requires only logarithmic communica-
tion. In the spirit of the use of random OT extension as a PRF with
single oblivious evaluation, we can view (𝑛 − 1)-out-of-𝑛 ROT as a
privately punctured PRF [8] where we can generate a partial PRF
key that enables evaluation of the PRF on all but one point, where
the full PRF key holder does not know the punctured point.
2.1.1 OT-based secure product a.k.a Gilboa multiplication.
Gilboa [31] proposed a two-party secure multiplication protocol
of two 𝑙-bit numbers. The protocol outputs additive shares, and
requires 𝑙 1-out-of-2 OT that can be run in parallel (throughout
this paper we assume 𝑙 to be a constant, and set it to 64 in our
experiments). Due to the practical efficiency of OT Extension proto-
cols [3, 35], Gilboa multiplication is a common approach to secure
multiplication. In particular, this approach has been considered
in several works as a way to compute Beaver triples for secure
multiplication in the preprocessing model of MPC [22, 28, 44]. In
the context of our work, this protocol is used for scalar vector
multiplications. In terms of practical considerations, one should
note that Gilboa multiplication can be implemented from correlated
OT [3], a more efficient particular case of OT. Moreover, for the
problem of scalar-vector multiplication, one can employ optimiza-
tions based on batching for concrete efficiency (see [44] for details).
We employ these optimizations in our implementation of secure
scalar-vector multiplication based on Gilboa’s protocol, which we
use as a baseline.
2.2 Cuckoo Hashing
Cuckoo hashing [47] is an algorithm to build hash tables for (key,
value) pairs with worst-case constant lookup. A cuckoo hash table
is determined by 𝜅 hash functions, where the value corresponding
to a key is guaranteed to reside in one of the 𝜅 locations determined
by the hash function evaluations on the key. Hash collisions are
resolved using the cuckoo approach: if a collision occurs when
placing an item in the hash table, the item residing in the location
is evicted and then placed in the table using a different hash func-
tion, potentially evicting another item in the case of collision. This
process continues until all evicted items are placed, if possible. Due
to possible cycles in this graph of evictions, the insertion algorithm
for cuckoo hashing has a chance to fail. For two hash functions,
it is known that inserting 𝑛 items in a cuckoo tables of size 𝑂(𝑛)
incurs more than 𝑠 insertion failures with probability bounded by
𝑂(𝑛−𝑠) [41]. The exact constants in this asymptotic bound are not
known, but several papers have studied them empirically [1, 15, 21].
This is done by estimating, for any fixed statistical security param-
eter 𝜂, the number of hash functions and the cuckoo table size such
that inserting 𝑛 items in the table fails with probability at most 2−𝜂.
In cryptography, cuckoo hashing has been used as a probabilistic
bath code to optimize Private Set Intersection (PSI) [15, 42, 48, 49]
and Private Information Retrieval (PIR) [1] protocols. We introduce
these ideas in Section 5, where we apply cuckoo hashing to obtain
an optimized multi-point function secret sharing protocol.
2.3 Function Secret Sharing
Function secret sharing [12, 13] is a primitive that allows a key
generator to distribute the evaluation of a function between two
parties in way that neither of the two parties learns anything about
the evaluated function, but jointly the two parties can recover the
evaluation at any point.
Definition 2.2 (Function Secret Sharing). Let F = {𝑓 : 𝐼 → G} be
a class of functions with input domain 𝐼 and output group G, and
let 𝜆 ∈ N denote a security parameter. A function secret sharing
scheme consists of the following two algorithms:
• (𝐾1, 𝐾2) ← FSS.Gen(1𝜆, 𝑓 ) – given a description of 𝑓 : 𝐼 →
G, output two keys 𝐾1, 𝐾2.
• 𝑓𝑏(𝑥) ← FSS.Eval(𝑏, 𝐾𝑏, 𝑥) – given an evaluation key 𝐾𝑏 for
𝑏 ∈ {1, 2} and an input 𝑥, output a share 𝑓𝑏(𝑥) of the value
𝑓 (𝑥).
We require the following guarantees from the above algorithms:
Correctness. For any 𝑓 ∈ F , and any 𝑥 ∈ 𝐼, when (𝐾1, 𝐾2) ←
FSS.Gen(1𝜆, 𝑓 ), we have Pr(cid:2)𝑏∈{1,2} FSS.Eval(𝑏, 𝐾𝑏, 𝑥) =
𝑓 (𝑥)(cid:3) = 1.
(cid:12)(cid:12)(cid:12) (𝐾1, 𝐾2) ← FSS.Gen(1𝜆, 𝑓𝜆)(cid:111) 𝑐≈
(cid:110)𝐾𝑏
(cid:110)𝐾𝑏 ← Sim𝑏(1𝜆, Leak𝑏(𝑓𝜆))(cid:111) .
Security. For any 𝑏 ∈ {1, 2}, there exists a ppt simulator Sim𝑏 such
that for any polynomial-size function sequence 𝑓𝜆 ∈ F ,
(1)
Note that the only difference between this definition and the one
of Boyle et al. [13] is the leakage function is allowed to be differ-
ent for each party. In the standard FSS construction, Leak1(𝑓𝜆) =
Leak2(𝑓𝜆) = (𝐼, G), i.e., FSS keys must be simulated given only the
input and output domains for 𝑓 .
While FSS is defined for any function, an FSS instantiation is
non-trivial if the length of the FSS keys is sub-linear in the size of
the function domain. In this regime of operation we have single
point FSS (SPFSS) constructions for point functions which evaluate
to zero on all but one of their domain points. Boyle et al. [12]
introduced an FSS constructions for point functions where the keys
are of length logarithmic in the function domain size.
Multi-point FSS (MPFSS) is a generalization of FSS where the
shared functions has a larger number of non-zero evaluations. How-
ever, for the purposes of Vector-OLE (cf. Section 2.4), we observe
that it is enough to consider a relaxed variant of MPFSS, where
one party knows the where 𝑓 is nonzero in the clear. We call this
variant known-indices MPFSS, and we provide a reduction to cuckoo
hashing and known-index SPFSS in Section 5.
3
2.4 Vector OLE
Oblivious linear evaluation (OLE) is functionality that enables two
parties to obtain correlated outputs. One party has input values
𝑢, 𝑣. The second party has input 𝑥 and obtains as output 𝑤 = 𝑢𝑥 + 𝑣.
Similarly to the use of OT for garbled circuits, OLE is a basic building
block for secure arithmetic computation enabling the generation of
multiplicative triples. Vector OLE (VOLE) [2, 9] is a generalization
of OLE to the setting of vector inputs, i.e., one party has input
vectors u, v, the other party has input value 𝑥 and obtains a vector
w = u𝑥 + v. Boyle et al. [9] present application of VOLE to secure
computation and zero-knowledge constructions.
Analogously to OT there is a variant of VOLE referred to as pseu-
dorandom VOLE, where the vectors u, v are generated randomly
during the protocol execution. They are then provided as output to
the first party. This primitive suffices for the construction of VOLE
as well as its applications [9]. In Section 6 we present a new pseu-
dorandom VOLE construction that requires a weaker version of the
distributed MPFSS functionality compared to the approach of Boyle
et al. [9], which can be implemented efficiently as we demonstrate
in Section 8.
consists of the following algorithms:
Definition 2.3 (Pseudorandom VOLE). A pseudorandom VOLE
• (seed1, seed2) ← VOLE.Setup(1𝜆, 𝑛, F, 𝑥) – this algorithms
takes vector length 𝑛, field F and value 𝑥 and outputs two
seeds.
• VOLE.Expand(b, seedb) – if 𝑏 = 1, output (u, v) ∈ F𝑛 × F𝑛,
else if 𝑏 = 2, then output w ∈ F𝑛.
The correctness of the protocol guarantees that w = u𝑥 + v. The se-
curity property requires that seed1 does not reveal any information
about 𝑥 and that seed2 does not allow to distinguish (u, v) from
random vectors subject to the correctness property, i.e., for any ppt
algorithm A the following holds:
(cid:12)(cid:12) Pr[𝑏 = 𝑏′(cid:12)(cid:12) 𝑏′ ← A(seed1),
(cid:12)(cid:12) Pr[𝑏 = 𝑏′(cid:12)(cid:12) 𝑏′ ← A(u𝑏, v𝑏, seed2),
(seed1, seed2) ← VOLE.Setup(1𝜆, 𝑛, F, 𝑥𝑏),
(F, 𝑛, 𝑥1, 𝑥2) ← A(1𝜆)] − 1/2(cid:12)(cid:12)  1 and security
parameter 𝜆, integer 𝑛 = 𝑘𝑐 with 𝑐 > 0
Inputs: P1: ⊥; P2: index 𝑖 ∈ [𝑛]
Outputs:
P1: 𝑛 random values (𝑟 𝑗)𝑗 ∈[𝑛]
P2: 𝑛 − 1 random values (𝑟 𝑗)𝑗 ∈[𝑛],𝑗≠𝑖
Key Generation (ROT.Gen(1𝜆, 𝑛, 𝑖)):
(1) P1 generates a PRG seed 𝑠0
(2) P1 computes a 𝑘-ary GGM tree of depth 𝛼 = log𝑘(𝑛),
𝑅← {0, 1}𝜆.
denoted 𝑇 = 𝑇 (𝑠0, 𝛼), by associating 𝑠0 to 𝑇 and, if 𝛼 > 1,
constructing the 𝑘 children of 𝑇 recursively as 𝑇 (𝑠 𝑗 , 𝛼 − 1),
with 𝑗 ∈ [𝑘] and seeds 𝑠1, . . . , 𝑠𝑘 computed as
( 𝑠1 | 𝑠2 |
. . .
| 𝑠𝑘 ) := G(𝑠0)
(3) P2 computes (𝑏1, . . . , 𝑏𝛼), the 𝑘-ary encoding of 𝑖 − 1.
(4) The parties execute 𝛼 instances of (𝑘 − 1)-out-of-𝑘 OTs:
• P1 acts as sender. For the 𝑙th OT, let (𝑝1, . . . , 𝑝𝑘𝑙) be
the seeds of the 𝑙th level of 𝑇 . The 𝑗th message in the
OT is set to be

𝑚 𝑗 :=
𝑠∈{𝑝𝑥 : 𝑥 ≡ 𝑗 mod 𝑘}
𝑠
(the 𝑗th message is the XOR of the seeds of the 𝑗th
children of trees at level 𝑙 − 1).
• P2 acts as the chooser and inputs, in the 𝑙th OT, the
set {0, . . . , 𝑘 − 1} \ {𝑏𝑙}, and obtains 𝑘 − 1 seeds 𝑞𝑙,𝑗
with 𝑗 ∈ [𝑘] \ {𝑏𝑙}.
(5) P1 outputs 𝐾1 ← 𝑠0
(6) P2 outputs 𝐾2 ← (𝑞𝑙,𝑗)𝑙∈[𝛼],𝑗∈[𝑘]\{𝑏𝑙 }.
Expansion (ROT.Expand(𝑏, 𝐾𝑏)):
(i) If 𝑏 = 1: P1 returns the list of leaves of 𝑇 .
(ii) If 𝑏 = 2: P2 uses the seeds 𝑞𝑙,𝑗 to reconstruct 𝑇 , except for
the path to the 𝑖th leaf (recall that (𝑏1, . . . , 𝑏𝛼) is the 𝑘-ary