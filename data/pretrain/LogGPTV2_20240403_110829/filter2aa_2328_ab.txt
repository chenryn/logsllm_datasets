### Surface Object Header and Allocation Alignment
The Surface object header has been increased by 8 bytes. This change must be considered to ensure proper allocation alignment. Failure to account for this increase can result in allocation failures.

### Randomization of the HAL Heap
The HAL Heap has been randomized, meaning that a pointer into `ntoskrnl.exe` can no longer be found at the address `0xFFFFFFFFFD00448`.

### Revival of Kernel Read and Write Primitives
With the changes introduced in the Windows 10 Creators Update, both kernel-mode read and write primitives have been affected. The bitmap primitive, however, has only undergone minor changes and can be rectified by simply reducing the size of each bitmap to 0x1000 bytes. The modifications to the tagWND kernel-mode read and write primitive are more significant.

#### Changes in the Win32ClientInfo Structure
The `Win32ClientInfo` structure within the TEB (Thread Environment Block) has also been modified. Previously, the `ulClientDelta` field at offset 0x28 described the delta between the user-mode mapping and the actual Desktop Heap. Now, this field contains a user-mode pointer, which points directly to the start of the user-mode mapping. For example, if the Desktop Heap starts at `0xFFFFBD2540800000`, the user-mode pointer can be used to locate the handle and calculate the kernel-mode address.

### Overcoming Mitigations in Creators Update
To overcome the first part of the mitigation introduced in the Creators Update, a manual search in the user-mode mapping can be performed to locate the handle and calculate the kernel-mode address of the `tagWND` object. However, this still does not solve all the problems, as `SetWindowLongPtr` cannot modify the `strName` of the following `tagWND` object, preventing arbitrary read and write operations on kernel memory.

#### Adjusting ExtraBytes for tagWND and tagCLS Objects
The `ExtraBytes` for a `tagWND` object, denoted by `cbWndExtra`, is set when the window class is registered using the `RegisterClassEx` API. The `WNDCLASSEX` structure used by `RegisterClassEx` includes a field called `cbClsExtra`, which defines the size of `ExtraBytes` for the `tagCLS` object associated with the `tagWND` object. By overwriting the `cbClsExtra` field of the `tagCLS` object instead of the `cbWndExtra` field of the `tagWND1` object, an analogous situation can be created. Using the `SetClassLongPtr` API, which writes its `ExtraBytes` to the Desktop Heap, allows for modifying the `strName` field of `tagWND2`.

### Arbitrary Read and Write Primitives
An arbitrary write function can be implemented as follows:
```c
// Implementation of arbitrary write function
```
A similar arbitrary read primitive can also be created, thus completely bypassing the mitigations introduced in the Creators Update against kernel-mode read and write primitives.

### Kernel ASLR Bypass
The mitigations introduced in the Windows 10 Anniversary Update and Creators Update have eliminated all publicly known leaks of kernel drivers. Design issues leading to kernel driver information leaks are of particular interest. The last two known KASLR bypasses were due to the non-randomization of the HAL Heap and the SIDT assembly instruction, both of which have been mitigated.

#### Bitmap Primitive KASLR Bypass
By examining the kernel-mode Surface object, it is possible to read the `hdev` field, which contains a valid pointer. Using the `CreateCompatibleBitmap` API, a bitmap and a kernel-mode Surface object can be created. The `hdev` pointer can then be used to dereference the kernel-mode address of `DrvSynchronizeSurface` in the `cdd.dll` kernel driver.

#### tagWND Primitive KASLR Bypass
The `tagWND` object's header, `THRDESKHEAD`, contains a `THROBJHEAD` structure, which in turn contains a pointer to a `THREADINFO` structure. The `W32THREAD` structure within `THREADINFO` contains a pointer to the `KTHREAD` object. In Windows 10 Creators Update, the `KTHREAD` object contains a pointer into `ntoskrnl.exe` at offset 0x2A8. Given the kernel-mode address of a `tagWND` object, it is possible to gain a pointer to `ntoskrnl.exe`.

### Dynamic Function Location
To dynamically locate the address of specific kernel driver functions, the read primitives can be modified to read out any given size buffer. A simple hash value of the function can be used to locate it. The final location function is shown below:
```c
// Implementation of dynamic function location
```

### Page Table Randomization
In Windows 10, achieving executable kernel memory often involves modifying the Page Table Entry of the memory page where the shellcode is located. The base address value of `0xFFFFF68000000000` has been randomized, making it impossible to simply calculate the Page Table Entry address. The `MiGetPteAddress` function in `ntoskrnl.exe` can be used to find the randomized base address, which can then be used to locate the Page Table Entry.

### Executable Memory Allocation
Allocating executable kernel memory directly, as was possible in Windows 7, is still feasible in Windows 10 Creators Update. The `ExAllocatePoolWithTag` function in `ntoskrnl.exe` can be used to allocate pool memory that is readable, writable, and executable. By overwriting the `DxgkCreateAllocation` function pointer in the `gDxgkInterface` function table with `ExAllocatePoolWithTag`, it is possible to call `NtGdiDdDDICreateAllocation` and specify `NonPagedPoolExecute` as the pool type.

#### Locating the gDxgkInterface Function Table
The `PsLoadedModuleList` structure in `ntoskrnl.exe` contains the base address of all loaded kernel modules. By iterating through this linked list, the base address of `win32kbase.sys` can be found. The `KeCapturePersistentThreadState` function in `ntoskrnl.exe` uses `PsLoadedModuleList`, allowing the function finding algorithm to locate the `PsLoadedModuleList` pointer and, in turn, the base address of any loaded kernel module.

### Conclusion
By leveraging these techniques, it is possible to bypass the mitigations introduced in the Windows 10 Creators Update and achieve arbitrary read and write operations on kernel memory, as well as allocate executable kernel memory.