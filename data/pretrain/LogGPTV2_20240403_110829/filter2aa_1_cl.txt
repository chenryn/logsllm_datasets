     a.example.com
    at the same time, the user’s browser will include their credentials in this request and allow attackers to extract confidential data belonging to the victim.
    如果用户同时在登录a.example.com的情况下浏览攻击者网站，则用户的浏览器将包含他们的凭据以及请求，这将使攻击者能够提取属于受害者的机密数据。
    This is why JSONP is suitable for transmitting only public data. While JSONP can be hardened by using CSRF tokens or maintaining an allowlist of referer headers for JSONP requests, these protections can often be bypassed.
    这就是为什么JSONP只适用于传递公共数据的原因。虽然可以通过使用CSRF令牌或维护JSONP请求的refer头名单来增强JSONP的安全性，但是这些保护措施经常会被绕过。
    Another issue with JSONP is that site
     b.example.com
    would have to trust site
     a.example.com
    completely, because it’s running arbitrary JavaScript from
     a.example.com
    . If
     a.example.com
    is compromised, the attacker could run whatever JavaScript they wanted on
     b.example.com
    , because
     b.example.com
    is including the file from
     a.example.com
    in a
    tag. This is equivalent to an XSS attack.
    JSONP还存在另一个问题，即网站b.example.com必须完全信任网站a.example.com，因为它正在从a.example.com运行任意JavaScript。如果a.example.com遭到攻击，攻击者可以在b.example.com上运行任何想要的JavaScript，因为b.example.com在标签中包含了来自a.example.com的文件。这相当于一次XSS攻击。
    Now that CORS is a reliable option for cross-origin communication, sites no longer use JSONP as often.
    由于CORS已成为跨域通讯的可靠选项，因此网站不再经常使用JSONP。
    Bypassing SOP by Using XSS
    Finally, XSS is essentially a full SOP bypass, because any JavaScript that runs on a page operates under the security context of that page. If an attacker can get a malicious script executed on the victim page, the script can access the victim page’s resources and data. Therefore, remember that if you can find an XSS, you’ve essentially bypassed the SOP protecting that page.
    最后，XSS本质上是完全绕过SOP，因为在页面上运行的任何JavaScript都在该页面的安全上下文下操作。如果攻击者能够在受害者页面上执行恶意脚本，该脚本就可以访问受害者页面的资源和数据。因此，请记住，如果您能找到XSS漏洞，您本质上是绕过了保护该页面的SOP。
    Hunting for SOP Bypasses
    Let’s start hunting for SOP bypass vulnerabilities by using what you’ve learned! SOP bypass vulnerabilities are caused by the faulty implementation of SOP relaxation techniques. So the first thing you need to do is to determine whether the target application relaxes the SOP in any way.
    让我们利用所学知识开始寻找SOP绕过漏洞！SOP绕过漏洞是由SOP松弛技术错误实现引起的。因此，你需要做的第一件事就是确定目标应用程序是否以任何方式放松了SOP。
    Step 1: Determine If SOP Relaxation Techniques Are Used
    You can determine whether the target is using an SOP-relaxation technique by looking for the signatures of each SOP-relaxation technique. When you’re browsing a web application, open your proxy and look for any signs of cross-origin communication. For example, CORS sites will often return HTTP responses that contain an
     Access-Control-Allow-Origin
    header. A site could be using
     postMessage()
    if you inspect a page (for example, by right-clicking it in Chrome and choosing
     Inspect
    , then navigating to
     Event Listeners
    ) and find a
     message
    event listener (
     Figure 19-1
    ).
    你可以通过查找每种SOP松弛技术的特征来确定目标是否使用SOP松弛技术。当你浏览一个网页应用程序时，请打开代理并查找任何跨域通信的迹象。例如，CORS网站通常会返回包含Access-Control-Allow-Origin头的HTTP响应。如果你检查一个页面（例如，在Chrome中右键单击它并选择检查，然后导航到事件监听器），并找到一个消息事件监听器（图19-1），那么这个网站可能正在使用postMessage()。
    And a site could be using JSONP if you see a URL being loaded in a
    tag with a callback function:
    如果您看到一个带有回调函数的标记中加载的URL，则网站可能正在使用JSONP：
    If you see clues of cross-origin communication, try the techniques mentioned in this chapter to see if you can bypass the SOP and steal sensitive info from the site!
    如果您看到了跨域通信的线索，请尝试本章介绍的技术，看看是否可以绕过 SOP 并从该网站窃取敏感信息！
       Figure 19-1
      : Finding the event listeners of a page in the Chrome browser
      图19-1：在Chrome浏览器中查找页面的事件监听器。
    Step 2: Find CORS Misconfiguration
    If the site is using CORS, check whether the
     Access-Control-Allow-Origin
    response header is set to
     null
    .
    如果该站点正在使用CORS，请检查Access-Control-Allow-Origin响应头是否设置为null。
Origin: null
    If not, send a request to the site with the origin header
     attacker.com
    , and see if the
     Access-Control-Allow-Origin
    in the response is set to
     attacker.com
    . (You can add an Origin header by intercepting the request and editing it in a proxy.)
    如果没有设置，则向网站发送一个带有攻击者的来源头部（attacker.com）的请求，并查看响应中的Access-Control-Allow-Origin是否设置为attacker.com。（您可以通过拦截请求并在代理中进行编辑来添加一个来源头部。）
Origin: attacker.com
    Finally, test whether the site properly validates the origin URL by submitting an Origin header that contains an allowed site, such as
     www.example.com.attacker.com
    . See if the
     Access-Control-Allow-Origin
    header returns the origin of the attacker’s domain.
    最后，测试网站是否可以通过提交包含允许网站的 Origin 头来正确验证来源 URL，例如 www.example.com.attacker.com。查看 Access-Control-Allow-Origin 头是否返回攻击者域的来源。
Origin: www.example.com.attacker.com
    If one of these
     Access-Control-Allow-Origin
    header values is returned, you have found a CORS misconfiguration. Attackers will be able to bypass the SOP and smuggle information offsite (
     Figure 19-2
    ).
    如果返回其中任何一个"Access-Control-Allow-Origin"头部值，则说明存在CORS配置错误。攻击者可以绕过同源策略，窃取站外信息（图19-2）。
       Figure 19-2
      : Is the site vulnerable to a CORS misconfiguration vulnerability?
      图19-2：该网站是否容易受到CORS配置错误漏洞的影响？
    Step 3: Find postMessage Bugs
    If the site is using
     postMessage
    , see if you can send or receive messages as an untrusted site. Create an HTML page with an iframe that frames the targeted page accepting messages. Try to send messages to that page that
    trigger a state-changing behavior. If the target cannot be framed, open it as a new window instead:
    如果该网站使用postMessage，请尝试作为不受信任的网站发送或接收消息。创建一个HTML页面，其中包含一个框架，框架是针对可接受消息的目标页面的。尝试向该页面发送消息以触发状态改变行为。如果无法对目标进行框架设置，请打开它作为新窗口：
var recipient_window = window.open("https://TARGET_URL", target_domain)
recipient_window.postMessage("RANDOM MESSAGE", "*");
    You can also create an HTML page that listens for events coming from the target page, and trigger the postMessage from the target site. See if you can receive sensitive data from the target page.
    你还可以创建一个HTML页面，监听来自目标页面的事件，并从目标站点触发postMessage。看看是否可以从目标页面接收敏感数据。
var sender_window = window.open("https://TARGET_URL", target_domain)
function parse_data(event) {
  // Run some code if we receive data from the target
              }
window.addEventListener("message", parse_data);
    Step 4: Find JSONP Issues
    Finally, if the site is using JSONP, see if you can embed a script tag on your site and request the sensitive data wrapped in the JSONP payload:
    如果该网站使用JSONP，请尝试嵌入一个脚本标签到你的网站，并请求JSONP有效载荷中包含的敏感数据。
    Step 5: Consider Mitigating Factors
    When the target site does not rely on cookies for authentication, these SOP bypass misconfigurations might not be exploitable. For instance, when the site uses custom headers or secret request parameters to authenticate requests, you might need to find a way to forge those to exfiltrate sensitive data.
    当目标网站不依赖于cookie进行身份验证时，这些SOP绕过错误配置可能无法利用。例如，当网站使用自定义标头或秘密请求参数来认证请求时，您可能需要找到一种方法来伪造这些内容以窃取敏感数据。
    Escalating the Attack
    An SOP-bypass bug often means that attackers can read private information or execute action as other users. This means that these vulnerabilities are often of high severity before any escalation attempts. But you can still escalate SOP-bypass issues by automation or by pivoting the attack using the information you’ve found. Can you harvest large amounts of user data by automating the exploitation of the SOP bypass? Can you use the information you’ve found to cause more damage? For example, if you can extract the security questions of a victim, can you use that information to completely take over the user’s account?
    SOP绕过漏洞经常意味着攻击者可以读取私人信息或作为其他用户执行操作。这意味着在任何升级尝试之前，这些漏洞通常具有高危性。但您仍然可以通过自动化或使用发现的信息轴心攻击来升级SOP绕过问题。通过自动化利用SOP绕过来收集大量用户数据吗？您可以使用找到的信息造成更多的破坏吗？例如，如果可以提取受害者的安全问题，您是否可以使用该信息完全接管用户的帐户？
    Many researchers will simply report CORS misconfigurations without showing the impact of the vulnerability. Consider the impact of the issue before sending the report. For instance, if a publicly readable page is served with a null
     Access-Control-Allow-Origin
    header, it would not cause damage
    to the application since that page does not contain any sensitive info. A good SOP-bypass report will include potential attack scenarios and indicate how attackers can exploit the vulnerability. For instance, what data can the attacker steal, and how easy would it be?
    许多研究人员会简单地报告CORS配置错误，而不展示漏洞的影响。在发送报告之前，请考虑该问题的影响。例如，如果公开可读的页面使用空的访问控制允许来源标头，那么它不会对应用程序造成损害，因为该页面不包含任何敏感信息。一个好的SOP-bypass报告将包括潜在的攻击场景，并指出攻击者如何利用漏洞。例如，攻击者可以窃取什么数据，以及这有多容易？
    Finding Your First SOP Bypass Vulnerability!
    Go ahead and start looking for your first SOP bypass. To find SOP-bypass vulnerabilities, you will need to understand the SOP relaxation techniques the target is using. You may also want to become familiar with JavaScript in order to craft effective POCs.
    请开始寻找您的第一个SOP绕过。要发现SOP绕过漏洞，您需要了解目标使用的SOP放宽技术。您可能还需要熟悉JavaScript，以制作有效的POC。
     Find out if the application uses any SOP relaxation techniques. Is the application using CORS,
      postMessage
     , or JSONP?
     If the site is using CORS, test the strength of the CORS allowlist by submitting test
      Origin
     headers.
     If the site is using
      postMessage
     , see if you can send or receive messages as an untrusted site.
     If the site is using JSONP, try to embed a script tag on your site and request the sensitive data wrapped in the JSONP payload.
     Determine the sensitivity of the information you can steal using the vulnerability, and see if you can do something more.
     Submit your bug report to the program!
20
      Single-Sign-On Security Issues
     Single sign-on (
     SSO)
    is a feature that allows users to access multiple services belonging to the same organization without logging in multiple times. Once you’ve logged into a website that uses SSO, you won’t have to enter your credentials again when accessing another service or resource belonging to the same company. For example, if you’re logged into
     facebook.com
    , you won’t have to reenter your credentials to use
     messenger.com
    , a Facebook service.
    单点登录（SSO）是一种功能，允许用户在不重复登录的情况下访问同一组织拥有的多个服务。一旦您登录了使用SSO的网站，您在访问同一公司的另一个服务或资源时便不需要再次输入凭据。例如，如果您已登录到facebook.com，使用messenger.com（Facebook服务）时就无需重新输入凭据。
    This practice is convenient for companies with many web services, because they can manage a centralized source of user credentials instead of keeping track of a different set of users for each site. Users can save time as well, since they won’t need to log in multiple times when using the different services provided by the same company. Since it makes things so much easier for both companies and users, SSO has become common practice on the internet.
    这种做法对于具有许多网络服务的公司非常方便，因为它们可以管理集中的用户凭据来源，而不是为每个网站跟踪不同的用户集。用户也可以节省时间，因为他们在使用同一家公司提供的不同服务时不需要多次登录。由于它使公司和用户的事情变得更加容易，因此SSO已成为互联网上的常见做法。
    But new vulnerabilities that threaten SSO systems have also emerged. In this chapter, we’ll talk about three methods developers use to implement SSO, as well as some vulnerabilities related to each approach.
    但是，新的漏洞威胁单点登录系统也已经出现。在本章中，我们将讨论开发人员使用的三种实现单点登录的方法，以及与每种方法相关的一些漏洞。
    Mechanisms
    Cookie sharing, SAML, and OAuth are the three most common ways of implementing SSO. Each mechanism has unique strengths and weaknesses, and developers choose different approaches depending on their needs.
    Cookie共享、SAML和OAuth是实现SSO的三种最常见的方式。每种机制都有其独特的优点和缺点，开发人员根据他们的需求选择不同的方法。
    Cooking Sharing
    The implementation of SSO is quite easy if the services that need to share authentication are located under the same parent domain, as is the case with the web and mobile versions of Facebook at
     www.facebook.com
    and
     m.facebook.com
    . In these situations, applications can share cookies across subdomains.
    如果需要共享身份验证的服务位于相同的父域下，实施单点登录(SSO) 就非常容易。这在 Facebook 网站和移动应用程序版本www.facebook.com 和 m.facebook.com 中是这样的情况。在这些情况下，应用程序可以在子域之间共享cookies。
    How Cookie Sharing Works
    Modern browsers allow sites to share their cookies across subdomains if the cookie’s
     Domain
    flag is set to a common parent domain. For example, if the server sets a cookie like the following, the cookie will be sent to all subdomains of
     facebook.com
    :
    现代浏览器允许网站通过将Cookie的Domain标志设置为公共父域来跨子域共享Cookie。例如，如果服务器设置以下Cookie，该Cookie将被发送到Facebook.com的所有子域：
Set-Cookie: cookie=abc123; Domain=facebook.com; Secure; HttpOnly
    However, not all applications can use this approach, because cookies can’t be shared this way across different domains. For instance,
     facebook.com
    and
     messenger.com
    can’t share cookies, because they don’t share a common parent domain.
    然而，并非所有应用程序都能使用此方法，因为 Cookie 不能在不同域之间以此方式共享。例如，facebook.com 和 messenger.com 不能共享 cookie，因为它们没有共同的父域。
    Moreover, this simple SSO setup comes with unique vulnerabilities. First, because the session cookie is shared across all subdomains, attackers can take over the accounts of all websites under the same parent domain by stealing a single cookie from the user. Usually, attackers can steal the session cookies by finding a vulnerability like cross-site scripting.
    此外，这种简单的单点登录设置存在独特的漏洞。首先，由于会话 cookie 在所有子域之间共享，攻击者可以通过窃取用户的单个 cookie 接管同一父域下所有网站的帐户。通常，攻击者可以通过查找如跨站脚本等漏洞来窃取会话 cookie。
    Another common method used to compromise shared-session SSO is with a subdomain takeover vulnerability.
    另一种常用的攻击共享会话单点登录的方法是使用子域劫持漏洞。
    Subdomain Takeovers
    Put simply,
     subdomain takeovers
    occur when an attacker takes control over a company’s unused subdomain.
    简单来说，子域接管发生在攻击者接管公司未使用的子域名时。
    Let’s say a company hosts its subdomain on a third-party service, such as AWS or GitHub Pages. The company can use a DNS CNAME record to point the subdomain to another URL on the third-party site. This way, whenever users request the official subdomain, they’ll be redirected to the third-party web page.
    假设有一家公司将其子域名托管在第三方服务上，例如AWS或GitHub Pages上。该公司可以使用DNS CNAME记录将子域名指向第三方站点上的另一个URL。这样，每当用户请求正式子域名时，他们将被重定向到第三方网页。
    For example, say an organization wants to host its subdomain,
     abc.example.com
    , on the GitHub page
     abc_example.github.io
    . The organization can use a
    DNS CNAME record to point
     abc.example.com
    to
     abc_example.github.io