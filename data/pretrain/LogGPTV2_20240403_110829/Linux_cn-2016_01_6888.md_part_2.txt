```
因此，切换到多用户启动目标会 启用   （    enable    ） 那些包含上述语句的单元。还有其他一些启动目标可用（例如 **emergency.target** 提供一个紧急情况使用的 shell，以及 **halt.target** 用于机器关机），您可以用以下方式轻松地在它们之间切换：
```
systemctl isolate emergency.target
```
在许多方面，这些都很像 SysVinit 中的 运行级   （    runlevel    ） ，如文本模式的 **multi-user.target** 类似于第3运行级，**graphical.target** 类似于第5运行级，**reboot.target** 类似于第6运行级，诸如此类。
![Image](/data/attachment/album/201601/14/100853vxntlgux8gum7gxg.jpg)
*与传统的脚本相比，单元配置文件也许看起来很陌生，但并不难以理解。*
### 开启与停止
现在您也许陷入了沉思：我们已经看了这么多，但仍没看到如何停止和开启服务！这其实是有原因的。从外部看，Systemd 也许很复杂，像野兽一般难以驾驭。因此在您开始摆弄它之前，有必要从宏观的角度看看它是如何工作的。实际用来管理服务的命令非常简单：
```
systemctl stop cups.service
systemctl start cups.service
```
（若某个单元被禁用了，您可以先通过 `systemctl enable` 加上该单元名的方式将其启用。这种做法会为该单元创建一个符号链接，并将其放置在当前启动目标的 `.wants` 目录下，这些 `.wants` 目录在`/etc/systemd/system` 文件夹中。）
还有两个有用的命令是 `systemctl restart` 和 `systemctl reload`，后面接单元名。后者用于让单元重新加载它的配置文件。Systemd 的绝大部分都有良好的文档，因此您可以查看手册 (`man systemctl`) 了解每条命令的细节。
### 定时器单元：取代 Cron
除了系统初始化和服务管理，Systemd 还染指了其他方面。在很大程度上，它能够完成 **cron** 的工作，而且可以说是以更灵活的方式（并带有更易读的语法）。**cron** 是一个以规定时间间隔执行任务的程序——例如清除临时文件，刷新缓存等。
如果您再次进入 `/usr/lib/systemd/system` 目录，您会看到那儿有多个 `.timer` 文件。用 `less` 来查看这些文件，您会发现它们与 `.service` 和 `.target` 文件有着相似的结构，而区别在于 `[Timer]` 段。举个例子：
```
 [Timer]
 OnBootSec=1h
 OnUnitActiveSec=1w
```
**OnBootSec** 选项告诉 Systemd 在系统启动一小时后启动这个单元。第二个选项的意思是：自那以后每周启动这个单元一次。关于定时器有大量选项您可以设置，输入 `man systemd.time` 查看完整列表。
Systemd 的时间精度默认为一分钟。也就是说，它会在设定时刻的一分钟内运行单元，但不一定精确到那一秒。这么做是基于电源管理方面的原因，但如果您需要一个没有任何延时且精确到毫秒的定时器，您可以添加以下一行：
```
 AccuracySec=1us
```
另外， **WakeSystem** 选项（可以被设置为 true 或 false）决定了定时器是否可以唤醒处于休眠状态的机器。
![Image](/data/attachment/album/201601/14/100855cu8ioi2k05i9yyl9.jpg)
*有一个 Systemd 的图形界面程序，即便它已有多年未被积极维护。*
### 日志文件：向 journald 问声好
Systemd 的第二个主要部分是 journal 。这是个日志系统，类似于 syslog 但也有些显著区别。如果您是个 Unix 日志管理模式的粉丝，准备好出离愤怒吧：这是个二进制日志，因此您不能使用常规的命令行文本处理工具来解析它。这个设计决定不出意料地在网上引起了激烈的争论，但它的确有些优点。例如，日志可以被更系统地组织，带有更多的元数据，因此可以更容易地根据可执行文件名和进程号等过滤出信息。
要查看整个 journal，输入以下命令：
```
journalctl
```
像许多其他的 Systemd 命令一样，该命令将输出通过管道的方式引向 `less` 程序，因此您可以使用空格键向下滚动，键入`/`（斜杠）查找，以及其他熟悉的快捷键。您也能在此看到少许颜色，像红色的警告及错误信息。
以上命令会输出很多信息。为了限制其只输出本次启动的消息，使用如下命令：
```
journalctl -b
```
这就是 Systemd 大放异彩的地方！您想查看自上次启动以来的全部消息吗？试试 **journalctl -b -1** 吧。再上一次的？用 **-2** 替换 **-1** 吧。那自某个具体时间，例如2014年10月24日16:38以来的呢？
```
journalctl -b --since=”2014-10-24 16:38”
```
即便您对二进制日志感到遗憾，那依然是个有用的特性，并且对许多系统管理员来说，构建类似的过滤器比起写正则表达式而言容易多了。
我们已经可以根据特定的时间来准确查找日志了，那可以根据特定程序吗？对单元而言，试试这个：
```
journalctl -u gdm.service
```
（注意：这是个查看 X server 产生的日志的好办法。）那根据特定的进程号？
```
journalctl _PID=890
```
您甚至可以请求只看某个可执行文件产生的消息：
```
journalctl /usr/bin/pulseaudio
```
若您想将输出的消息限制在某个优先级，可以使用 **-p** 选项。该选项参数为 0 的话只会显示紧急消息（也就是说，是时候向 **$DEITY** 祈求保佑了）（LCTT 译注： $DEITY 是一个计算机方面的幽默，DEITY 是指广义上的“神”，$前缀表示这是一个变量），为 7 的话会显示所有消息，包括调试消息。请查看手册 (`man journalctl`) 获取更多关于优先级的信息。
值得指出的是，您也可以将多个选项结合在一起，若想查看在当前启动中由 GDM 服务输出的优先级数小于等于 3 的消息，请使用下述命令：
```
journalctl -u gdm.service -p 3 -b
```
最后，如果您仅仅想打开一个随 journal 持续更新的终端窗口，就像在没有 Systemd 时使用 `tail` 命令实现的那样，输入 `journalctl -f` 就好了。
![](/data/attachment/album/201601/14/100856wgd6vi2hoiscve2h.jpg)
*二进制日志并不流行，但 journal 的确有它的优点，如非常方便的信息查找及过滤。*
### 没有 Systemd 的生活？
如果您就是完全不能接受 Systemd，您仍然有一些主流发行版中的选择。尤其是 Slackware，作为历史最为悠久的发行版，目前还没有做出改变，但它的主要开发者并没有将其从未来规划中移除。一些不出名的发行版也在坚持使用 SysVinit 。
但这又将持续多久呢？Gnome 正越来越依赖于 Systemd，其他的主流桌面环境也会步其后尘。这也是引起 BSD 社区一阵恐慌的原因：Systemd 与 Linux 内核紧密相连，导致在某种程度上，桌面环境正变得越来越不可移植。一种折衷的解决方案也许会以 Uselessd ([http://uselessd.darknedgy.net](http://uselessd.darknedgy.net/)) 的形式到来：一种裁剪版的 Systemd，纯粹专注于启动和监控进程，而不消耗整个基础系统。
![Image](/data/attachment/album/201601/14/100857rn9hyph2cnnjpgwc.jpg)
*若您不喜欢 Systemd，可以尝试一下 Gentoo 发行版，它将 Systemd 作为初始化工具的一种选择，但并不强制用户使用 Systemd。*
---
via: 
作者：[Mike Saunders](http://www.linuxvoice.com/author/mike/) 译者：[Ricky-Gong](https://github.com/Ricky-Gong) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出