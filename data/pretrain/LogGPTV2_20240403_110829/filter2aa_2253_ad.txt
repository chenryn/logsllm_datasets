to be proxied, DIRA replaces the original function name
with the proxied function name. In order to support restart
points,
DIRA replaces the original CALL_EXPR with a
COMPOUND_EXPR that ﬁrst makes a call to setjmp() to
insert a restart point and then makes the original function
call.
4.2.
Transparent Library Compilation
Often programs need to be linked with several non-
standard libraries. At the same time, same libraries can
be reused by multiple applications.
Some applications
(typically server-side applications) might need DIRA sup-
port whereas others (typically client-side applications)
will most likely not. Therefore, both instrumented and
uninstrumented versions of some libraries should exist in
the system. A naive approach would be to have two ver-
sions of the same library under different names. However,
in this case one will have to go through all the Makeﬁles
of the program and change every occurrence of the name
of the old library to that of the instrumented library if the
program needs DIRA support. Another drawback of this
approach is the fact that a program would not be able to
switch from one version of the library to another without
being recompiled.
A better solution of this problem is to duplicate the
code of every function in all the source ﬁles that consti-
tute the library. The ﬁrst copy of the function is instru-
mented whereas the second one is left intact.
DIRA in-
serts an if-statement in the beginning of each function and
makes the two copies of the original function its then and
else branches. The if-statement checks whether the fol-
lowing condition is true or not: need_logging==NULL
or *need_logging==0, where int *need_logging is
a special variable inserted by DIRA to the original pro-
gram. If the condition is true, then the unmodiﬁed version
of the code is executed. Otherwise, the control ﬂow is
transfered to the instrumented version. When an applica-
tion that does not require DIRA support is linked with a
DIRA-compiled library, the control will always be trans-
fered to the uninstrumented version of the code since the
application is not aware of the need_logging variable
which is set to NULL by default.
This code duplicating approach introduces several im-
plementation issues. The ﬁrst issue is related to code gen-
eration for switch statements. GCC creates a set of labels
(trees of type CASE_LABEL) for each case expression of
the switch statement. When the second copy of the func-
tion is compiled, these labels are reused instead of being
recreated. As a result, the control is transfered to the ﬁrst
version of the code that was compiled before. The solu-
tion to this problem is to recreate the labels each time a
switch statement is processed regardless of whether they
were created before or not. The second issue is related
to a common optimization performed by GCC. When it
generates RTL code for a complex AST expression, GCC
wraps this AST into a tree of type SAVE_EXPR, which in-
dicates that there is an RTL code available for the original
AST expression and there is no need to process it again.
However, DIRA requires that all ASTs be processed twice
since otherwise the logging code might not be generated
for the second copy of the AST. To ensure that this is
the case, DIRA wraps the trees of type SAVE_EXPR into
the trees of type UNSAVE_EXPR and nulliﬁes the effect of
SAVE_EXPR.
Sometimes, a program needs to be linked with a library
which source code is not available. In this case, DIRA will
still be able to compile and link the program, but all mem-
ory manipulations that happen inside the uninstrumented
library will not be tracked. As a result, it might not be
possible to detect an attack if one of the uninstrumented
functions is responsible for it or to identify it since the
variable dependency chain might be broken because of a
call to an uninstrumented function. Also, it will be impos-
sible to undo the side effects of such functions at repair
time which can lead to memory leaks or even worse to an
inconsistent memory state of the program.
5.
Evaluation of DIRA
5.1.
Performance Overhead
In this section we present the evaluation of DIRA. We
are interested in its compilation time overhead, executable
code size increase, and several run-time characteristics
such as the amount of log information generated and the
performance overhead when a program is compiled in
three different modes of DIRA: D-mode, DI-mode, and
DIR-mode.
We also describe our experiences with at-
tempts to compromise programs compiled by DIRA and
discuss whether repairing the programs is worthwhile at
all or restarting them from the beginning is a better strat-
egy.
We used a test suite of ﬁve network daemons in our ex-
periments: ghttpd 1.4 — an http server, drcatd 0.5.0
— a remote cat daemon, named 8.1 — DNS daemon
which is a part of BIND program, qpopper 4.0.4 — a
POP3 server, and proftpd 1.2.9 — an FTP server. We
used several exploit programs for the three programs of
our test suite: named, ghttpd, and drcatd available at
Fyodor’s Remote Exploit Archive [15] and Securiteam’s
website [5]. Our experiments proved that the instrumented
versions of these programs can detect attacks, identify at-
tack packets and continue their execution normally after
repair (the latest is true for 2 out of 3 programs that we
tried to compromise).
Program
Log records
Log size, KB
ghttpd
457
32
drcatd
4,000
408
named
832
39
qpopper
27,000
586
proftpd
70,000
2073
Table 4. Number of log records generated for
a single client request as described in Table
3 as well as the total log size (KB) generated
per client request.
The hardware setup used in the performance experi-
ments is as follows. The network daemon being tested was
running on a server machine with a Pentium-4M 1.7GHz
processor and 512 MB of RAM. There were two client
machines with AMD Athlon 1.7GHz processors equipped
with 512 MB of RAM each. All machines were running
the Linux 2.4.19 kernel. The machines were located in the
same 100 Mbps local network. All programs were com-
piled on the server machine with options -g -O.
To measure several run-time characteristics of the in-
strumented server programs, the client machines were
running special programs that were simultaneously send-
ing a number of requests to the server machine. The de-
scription of the performance tests is given in Table 3.
The left table in Figure 5 presents the measurements of
compilation time overhead, and shows that the compile
time overhead varies signiﬁcantly from program to pro-
gram and can be between 130% and 550%.
The right table in Figure 5 shows the difference between
the executable ﬁle size produced by DIRA and that by the
original GCC compiler. Since DIRA duplicates the code
of each function, one might expect that the executable pro-
duced by DIRA will be twice as large as the executable
produced by standard GCC. This turns out to be the case
for small programs such as ghttpd and drcatd, but
does not hold for larger program. Most likely, this hap-
pens because a binary usually contains a number of sec-
tions such the data section, PLT section, symbol table sec-
tion, etc. and the code section is just one of them. Also,
GCC performs several optimizations to reduce the output
binary size. This explains why the increase in binary size
for larger programs is only 20-40% instead of expected
100%.
We conducted several series of experiments to measure
different run-time characteristics of instrumented pro-
grams. First, we measured the number of memory updates
log records as well as the total size of memory updates log
(in KB) for a single client request as described in Table 3.
The results are presented in Table 4. As the results sug-
gest, the dependency between the number of log records
Program
Type
Client request
Repeated, times
ghttpd
HTTP server
fetch a 10KB HTML page
5,000
drcatd
remote cat daemon
fetch a 10KB ﬁle
1,000
named
DNS server
lookup of a domain name
10,000
qpopper
POP3 server
fetch a 1KB message
200
proftpd
FTP server
fetch a 40KB ﬁle
100
Table 3. Test programs and corresponding performance tests.
Program
GCC
DIRA
Overhead, %
ghttpd
0.82
3.77
359
drcatd
1.30
4.50
246
named
33.38
79.72
138
qpopper
11.58
26.73
130
proftpd
25.88
169.88
555
Program
GCC
DIRA
Overhead, %
ghttpd
87145
174778
100
drcatd
70126
156229
123
named
1452030
2036324
40
qpopper
1371275
1654643
21
proftpd
2257744
3113267
38
Figure 5. Increase in compilation time, sec (left) and the executable ﬁle size, bytes (right).
and the actual amount of data written to the log is not lin-
ear. The reason behind this is the fact that different log
records have different actual size. The typical log records
types are as follows. The size of a single variable update
log record is 16 bytes (4 bytes for read address, 4 bytes for
write address, 4 bytes for data length and 4 bytes the ac-
tual payload). A potential restart point log record has the
size of 160 bytes because it contains a jmp_buf buffer
used by setjmp() and longjmp(). Log records gen-
erated by proxied string manipulation and network libc
functions can have different sizes. Typically, their length
varies from several bytes to 1 KB.
The goal of our second series of experiments was to
measure the run-time performance overhead of the instru-
mented programs which is certainly the most important
performance metric of DIRA compiler. We compiled all
ﬁve programs in three compilation modes that DIRA pro-
vides: D-mode that supports attack detection only, DI-
mode that supports attack detection and identiﬁcation, and
DIR-mode that supports program repair in addition to at-
tack detection and identiﬁcation. The measurements from
these experiments are presented in Figure 6 and suggest
that the run-time overhead can vary signiﬁcantly depend-
ing on the programs’ memory access behavior and can
range from 8% to 60% for programs that support attack
detection, identiﬁcation, and recovery.
The experiments showed that the run-time overhead of
programs compiled in D-mode varies from 0% to 15%.
We believe that this overhead is mostly affected by the fre-
quency of function calls because it mainly comes from ad-
ditional code in the function prologue and epilogue. That
is, if functions are relatively long and called infrequently,
then there is not much to do for the return address defense
mechanism and the overhead can be close to zero percent.
If, however, the program contains lots of small functions
that call each other then the overhead can be much higher.
The run-time overhead of the programs compiled in DI-
mode is much higher than that of the programs compiled
in D-mode and is between 7% and 50%. Such a difference
can be explained by the fact that a program needs to log
certain information about its memory state changes such
as the read address, the write address, and the length of
the data being written. Programs compiled in DI-mode
make use of proxy functions to track changes performed
by standard libc calls. However, the pre-image of the data
being modiﬁed is not saved in DI-mode and this is its only
difference from DIR-mode.
The measured overhead of programs running in DIR-
mode turns out to be pretty close to that of programs
running in DI-mode due to the reason described above
— there are relatively few differences between the two
modes. In addition to saving the pre-image of data being
modiﬁed, programs in DIR mode insert potential restart
points by making setjmp() calls and also insert ﬁrst lo-
cal update tags.
The main conclusion from these experiments is that the
run-time overhead depends on the programming style in
which the program was written. There are certain things
that can increase the run-time overhead such as breaking
up the program into a large number of small functions and
using pointer arithmetic extensively. These results also
suggest a strong need for a more intelligent checkpoint-
ing mechanism that can help reduce the overhead. Instead
of saving the data pre-image upon each update, one can
save the pre-image of the whole data structure once upon
function start.
We have also measured the relative frequency of each
type of log records written to the memory updates log
during a performance benchmark run. The results are pre-
sented in Figure 6. Although there seems to be no direct
 0
 10
 20
 30
 40
 50
 60
 70
 80
ghttpd
drcatd
named
qpopper
proftpd
Overhead, %
Program
Runtime Performance Overhead
D mode
DI mode
DIR mode
 0
 0.2
 0.4
 0.6
 0.8
 1
 1.2
 1.4
ghttpd
drcatd
named
qpopper
proftpd
Fraction of all log records
Program
Type of Log Records
other wrappers
string wrappers
function boundaries
first local update
variable update
Figure 6. Run-time overheads for different modes of compilation (left) and the relative frequency
of different types of log records (right).
correlation between the frequency of types of log records
and the run-time overhead, these results still suggest that
programs with higher overhead (such as qpopper) insert