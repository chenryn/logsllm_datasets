# Oblivious Enforcement of Hidden Information Release Policies

## Authors
- Brian Wongchaowart
- Adam J. Lee

### Contact Information
- **Brian Wongchaowart**: [EMAIL]
- **Adam J. Lee**: [EMAIL]
- **Department of Computer Science, University of Pittsburgh**
- **Address**: 210 S. Bouquet St., Pittsburgh, PA 15260

## Abstract
In computing systems, sensitive data must be protected by release policies that determine which principals are authorized to access the data. In some cases, these release policies may refer to information about the requesting principal that is unavailable to the information provider. Additionally, the release policy itself may contain sensitive information about the resource it protects. This paper introduces a scheme for enforcing information release policies where the satisfaction of the policy cannot be verified by the entity holding the protected information but only by the entity requesting the information. Our scheme not only prevents the information provider from learning whether the policy was satisfied but also hides the information release policy from the requesting principal. Unlike previous approaches, our construction requires no guesswork or wasted computation on the part of the information requester. The information release policies we consider can include third-party assertions with their own release conditions, and we show that our system functions correctly even when these dependencies form cycles.

### Categories and Subject Descriptors
- **D.4.6 [Operating Systems]**: Security and Protection—access controls, authentication
- **K.6.5 [Management of Computing and Information Systems]**: Security and Protection—authentication

### General Terms
- Security

### Keywords
- Hidden policies, hidden credentials, distributed proof

### Copyright Notice
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

**ASIACCS'10, April 13–16, 2010, Beijing, China.**
**Copyright 2010 ACM 978-1-60558-936-7 ...$10.00.**

## 1. Introduction
In this paper, we consider an access control setting where Alice wants to obtain a secret \( s \) from Bob, but Bob has a policy requiring that a conjunction of quoted assertions made by other principals must be true before \( s \) can be disclosed to Alice. A "quoted assertion" is a proposition of the form \( p_i \text{ says } e_i \), where \( e_i \) is an arbitrary expression that can be asserted by some principal \( p_i \). The quoted assertion \( p_i \text{ says } e_i \) is true if \( p_i \) is willing to assert \( e_i \).

If Bob can determine the truth of each proposition \( p_i \text{ says } e_i \) in his release policy for \( s \), he can decide whether to release \( s \) to Alice without further interaction. However, Bob's policy may refer to private attributes of Alice that he is not authorized to learn directly from the relevant authority. In this case, Bob could ask Alice to prove that she satisfies his policy by obtaining digitally signed credentials attesting to the truth of each quoted assertion he cannot evaluate himself. This solution may be unsatisfactory for both parties. On one hand, Bob may have to reveal parts of his policy that he considers sensitive to Alice. On the other, Alice may have to disclose the truth of quoted assertions that she considers private to Bob.

If there were a universally trusted third party (TTP), solving this problem would be simple: Bob discloses his secret \( s \) and its release policy \( p \) to the TTP, which queries principals about the truth of the quoted assertions in \( p \) and releases \( s \) to Alice if and only if \( p \) is satisfied. Alice learns nothing about Bob’s policy aside from whether it was satisfied, and Bob does not learn whether Alice receives the secret. In this paper, we show that a simple and computationally efficient solution is possible even without a TTP if Bob has a basic level of trust in the principals whose quoted assertions his policy depends on. Specifically, Bob must only trust these principals not to reveal their interactions with Bob to Alice. In our approach, Bob does not have to learn the truth value of a quoted assertion in his policy if Alice is allowed to do so, while Alice learns no more about Bob’s policy than she would from interacting with a TTP. Because Bob does not learn whether his policy was satisfied, we say that our protocol permits the oblivious enforcement of a hidden information release policy.

This paper is organized as follows:
- **Section 2** develops the intuition behind our construction.
- **Section 3** provides the full protocol details.
- **Section 4** presents a sample run.
- **Section 5** briefly compares our approach to related work.
- **Section 6** summarizes the findings.

## 2. Protocol Intuition
Our construction relies on a public-key encryption scheme supporting a multiplicative homomorphism. In such an encryption scheme, if \( E(m_1) \) and \( E(m_2) \) represent the encryptions of messages \( m_1 \) and \( m_2 \) using the same public key, then these two ciphertexts can be combined to yield \( E(m_1 \cdot m_2) \) without knowledge of the private key required to decrypt \( E(m_1) \) and \( E(m_2) \). We further require that the encryption scheme have the property of IND-CPA security, or indistinguishability of ciphertexts under chosen-plaintext attack, which ensures that no information can be obtained about the plaintext corresponding to a given ciphertext without knowledge of the private key. A concrete example of an encryption scheme with these properties is ElGamal encryption using a group in which the decision Diffie-Hellman (DDH) assumption holds.

Suppose principal \( p_0 \) wishes to obtain a secret \( s \) from principal \( p_1 \), but \( p_1 \) is only willing to disclose \( s \) to \( p_0 \) if certain conditions—the release policy for \( s \)—hold. We model \( p_1 \)'s release policy for \( s \) as a set of quoted assertions of the form \( p_i \text{ says } e_i \), where \( e_i \) is any expression that can be evaluated to a Boolean value by \( p_i \). If \( p_1 \)'s release policy requires that some of these assertions must be true simultaneously, then each relevant \( e_i \) should include the constraint that the expression must evaluate to true throughout a time interval long enough to ensure that the expressions are simultaneously true at some point in time despite any clock differences between the principals.

Since \( p_1 \) can trivially enforce the part of a release policy that depends only on information it can obtain from its local knowledge, credentials provided by \( p_0 \), or other principals in the system, we assume in the following discussion that the release policy for \( s \) can be evaluated as satisfied or unsatisfied entirely on the basis of the truth values of quoted assertions \( p_2 \text{ says } e_2, \ldots, p_n \text{ says } e_n \), where \( p_2, \ldots, p_n \) are willing to disclose the truth values of these assertions to \( p_0 \), but not to \( p_1 \). We also assume that \( s \) can be encoded as a short binary string of perhaps 128 bits, sufficient for a symmetric key that can be used by \( p_0 \) to decrypt additional data or as proof of authorization.

Given these assumptions, \( p_1 \) can ask each \( p_i \in \{p_2, \ldots, p_n\} \) to evaluate the corresponding expression \( e_i \) from \( p_1 \)'s release policy. This expression may involve information that \( p_i \) is willing to reveal to \( p_0 \), but not to \( p_1 \). To assert the truth of the expression \( e_i \), \( p_i \) encrypts the value 1 for \( p_0 \)'s public key using an IND-CPA-secure homomorphic encryption scheme and returns the ciphertext to \( p_1 \); otherwise, \( p_i \) encrypts a random value and returns the resulting ciphertext. These ciphertexts reveal no information to \( p_1 \) because of the IND-CPA security of the encryption scheme.

Now, \( p_1 \) encrypts the secret \( s \) using \( p_0 \)'s public key, homomorphically combines the encryption of \( s \) with each of the ciphertexts received from \( p_2, \ldots, p_n \), and finally sends the combined ciphertext to \( p_0 \). If the quoted assertions \( p_2 \text{ says } e_2, \ldots, p_n \text{ says } e_n \) from \( p_1 \)'s release policy were all true, then \( p_0 \) receives the encryption of \( s \), since homomorphically combining the encryption of \( s \) with the encryption of 1 has no effect. Otherwise, one of the ciphertexts that \( p_1 \) received from \( p_2, \ldots, p_n \) must have been the encryption of a random value, so \( p_0 \) receives the encryption of \( s \) multiplied by a random value, which contains no more information than the random value. In either case, \( p_0 \) learns nothing about the structure of \( p_1 \)'s policy or the fact that \( p_2, \ldots, p_n \) were involved in enforcing it, since \( p_0 \) always receives a single ciphertext from \( p_1 \). If \( p_0 \) fails to obtain \( s \) by decrypting the ciphertext, this may simply indicate that \( p_1 \) determined that the release policy for \( s \) was unsatisfied based on \( p_1 \)'s local knowledge. In the following section, we describe this solution in more detail, including how \( p_2, \ldots, p_n \) can enforce release policies of their own on the truth values of the assertions they evaluate.

## 3. Protocol Details
Let \( M \) denote the message space of the IND-CPA-secure homomorphic encryption scheme, \( E_{p_i}(m) \) denote the encryption of message \( m \) using principal \( p_i \)'s public key, and \( E_{p_i}(m_1) \otimes E_{p_i}(m_2) = E_{p_i}(m_1 \cdot m_2) \) denote the homomorphic combination of two ciphertexts encrypted using \( p_i \)'s public key. We assume that principals can obtain one another's public keys and that all communication takes place over secure and authenticated channels. As before, we use \( p_0 \) to denote the principal who wishes to obtain a secret \( s_1 \in M \) and \( p_1 \) to denote the principal in possession of this secret.

### 3.1 Core Protocol
The secret requester \( p_0 \) first sends a message to \( p_1 \) asking for its secret \( s_1 \), along with a newly generated globally unique session identifier \( \text{sid} \). Upon receiving this request, \( p_1 \) contacts each principal \( p_i \) listed in its release policy for \( s_1 \) and asks it to evaluate the corresponding assertion \( e_i \). The session identifier \( \text{sid} \) generated by \( p_0 \) is passed along with this request. At this point, \( p_1 \) may replace \( s_1 \) with a random value if \( p_1 \) decides that \( p_0 \) is not authorized to receive \( s_1 \) based on information available to \( p_1 \).

Each principal \( p_i \) contacted by \( p_1 \) selects a local secret \( s_i \) based on the result of evaluating \( e_i \). If \( e_i \) is true and \( p_i \) is (conditionally) willing to disclose this to \( p_0 \) via \( p_1 \), then \( s_i \) is set to 1; otherwise, \( s_i \) is an element of the message space \( M \) chosen uniformly at random. If \( p_i \) is willing to unconditionally reveal \( s_i \) to \( p_0 \), then \( p_i \) simply returns \( E_{p_0}(s_i) \) to \( p_1 \). Otherwise, \( p_i \) can make the disclosure of the truth value of \( e_i \) contingent upon the truth of a set of quoted assertions of the same form as \( p_1 \)'s release policy for \( s_1 \) by homomorphically combining \( E_{p_0}(s_i) \) with additional ciphertexts as described below. In either case, \( p_1 \) homomorphically combines the ciphertext returned by each \( p_i \) with \( E_{p_0}(s_1) \), the encryption of the secret requested by \( p_0 \), and returns the final ciphertext to \( p_0 \).

It may initially seem as though any principal \( p_i \) contacted by \( p_1 \) can enforce its release policy for \( s_i \) in exactly the same manner as \( p_1 \) enforces its release policy for \( s_1 \). This is almost the case, but a problem arises when the release policies of several principals create a cycle of quoted assertions in which the disclosure of each assertion depends on the disclosure of another assertion in the cycle. The purpose of the session identifier passed along with each request is to enable principals to detect and break such cycles.

### 3.2 Policy Cycle Resolution
[Further details on policy cycle resolution can be added here, expanding on the mechanisms and steps involved in detecting and resolving cycles in the release policies.]

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.