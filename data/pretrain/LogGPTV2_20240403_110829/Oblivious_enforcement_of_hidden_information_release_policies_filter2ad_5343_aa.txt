title:Oblivious enforcement of hidden information release policies
author:Brian Wongchaowart and
Adam J. Lee
Oblivious Enforcement of Hidden Information
Release Policies
Brian Wongchaowart
PI:EMAIL
Adam J. Lee
PI:EMAIL
Department of Computer Science
University of Pittsburgh
210 S. Bouquet St.
Pittsburgh, PA 15260
ABSTRACT
In a computing system, sensitive data must be protected
by release policies that determine which principals are au-
thorized to access that data. In some cases, such a release
policy could refer to information about the requesting prin-
cipal that is unavailable to the information provider. Fur-
thermore, the release policy itself may contain sensitive in-
formation about the resource that it protects. In this pa-
per we describe a scheme for enforcing information release
policies whose satisfaction cannot be veriﬁed by the entity
holding the protected information, but only by the entity re-
questing this information. Not only does our scheme prevent
the information provider from learning whether the policy
was satisﬁed, but it also hides the information release policy
being enforced from the requesting principal. Unlike pre-
vious approaches, our construction requires no guesswork
or wasted computation on the part of the information re-
quester. The information release policies that we consider
can contain third-party assertions that themselves have re-
lease conditions that must be satisﬁed; we show that our sys-
tem functions correctly even when these dependencies form
cycles.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—ac-
cess controls, authentication; K.6.5 [Management of Com-
puting and Information Systems]: Security and Protec-
tion—authentication
General Terms
Security
Keywords
Hidden policies, hidden credentials, distributed proof
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’10 April 13–16, 2010, Beijing, China.
Copyright 2010 ACM 978-1-60558-936-7 ...$10.00.
1.
INTRODUCTION
In this paper we consider an access control setting in which
Alice would like to obtain a secret s from Bob, but Bob
has a policy requiring that a conjunction of quoted asser-
tions made by other principals must be true before s can
be disclosed to Alice. By a “quoted assertion” we mean a
proposition of the form pi says ei, where ei is an arbitrary
expression that can be asserted by some principal pi; the
quoted assertion pi says ei is true if pi is willing to assert
ei. For example, ei may be the assertion that Alice has
some attribute (e.g., that Alice is a student), and pi may be
an authority trusted by Bob to know whether Alice does in
fact have the attribute in question (e.g., the registrar at an
accredited university).
If Bob is able to determine the truth of each proposition
pi says ei in his release policy for s, then he can decide
whether to release s to Alice without any further interac-
tion with her. But Bob’s policy may also refer to private
attributes of Alice that he is not authorized to learn about
directly from the relevant authority. In this case, Bob could
ask Alice to prove that she satisﬁes his policy by obtain-
ing digitally signed credentials attesting to the truth of each
quoted assertion that he cannot evaluate himself. This so-
lution may be unsatisfactory for both parties, however. On
the one hand, Bob may have to reveal parts of his policy
that he considers sensitive to Alice, as the release policy for
a secret can reveal information about the secret itself. On
the other, Alice may have to disclose the truth of quoted
assertions that she considers private to Bob.
If there were a universally trusted third party (TTP), solv-
ing this problem would be simple: Bob discloses his secret s
and its release policy p to the TTP, which queries principals
about the truth of the quoted assertions in p and releases
s to Alice if and only if p is satisﬁed. Alice learns nothing
about Bob’s policy aside from whether it was satisﬁed (un-
less she is queried by the TTP herself), Bob does not learn
whether Alice receives the secret, and no expensive cryptog-
raphy is needed. In this paper we show that a simple and
computationally eﬃcient solution is possible even without a
TTP if Bob has a basic level of trust in the principals whose
quoted assertions his policy depends on. Speciﬁcally, Bob
must only trust these principals not to reveal their inter-
actions with Bob to Alice. In our approach, Bob does not
have to be able to learn the truth value of a quoted assertion
in his policy if Alice is allowed to do so, while Alice learns
no more about Bob’s policy than she would learn from in-
teracting with a TTP. Because Bob does not learn whether
his policy was satisﬁed, we say that our protocol permits the
oblivious enforcement of a hidden information release policy.
This paper is organized as follows. Section 2 develops the
intuition behind our construction, while the full protocol
details are given in Section 3. Section 4 presents a sample
run. We brieﬂy compare our approach to related work in
Section 5, and summarize in Section 6.
2. PROTOCOL INTUITION
Our construction relies on a public-key encryption scheme
supporting a multiplicative homomorphism. In such an en-
cryption scheme, if E(m1) and E(m2) represent the encryp-
tions of messages m1 and m2 using the same public key, then
these two ciphertexts can be combined to yield E(m1 · m2)
without knowledge of the private key required to decrypt
E(m1) and E(m2). We further require that the encryption
scheme have the property of IND-CPA security, or indis-
tinguishability of ciphertexts under chosen-plaintext attack,
which ensures that no information can be obtained about
the plaintext corresponding to a given ciphertext without
knowledge of the private key. A concrete example of an en-
cryption scheme with these properties is ElGamal encryp-
tion [5] using a group in which the decision Diﬃe-Hellman
(DDH) assumption [1] holds.
Suppose that a principal p0 wishes to obtain a secret s
from principal p1, but that p1 is only willing to disclose s to
p0 if certain conditions—the release policy for s—hold. We
model p1’s release policy for s as a set of quoted assertions
of the form pi says ei, where ei is any expression that can
be evaluated to a Boolean value by pi. If p1’s release policy
requires that some of these assertions must be true simulta-
neously, then each relevant ei should include the constraint
that the expression must evaluate to true throughout a time
interval long enough to ensure that the expressions are si-
multaneously true at some point in time despite any clock
diﬀerences between the principals.
Since p1 can trivially enforce the part of a release policy
that depends only on information that it can obtain from its
local knowledge, credentials provided by p0, or other princi-
pals in the system, we will assume in the following discussion
that the release policy for s can be evaluated as satisﬁed or
unsatisﬁed entirely on the basis of the truth values of quoted
assertions p2 says e2, . . . , pn says en, where p2, . . . , pn are
willing to disclose the truth values of these assertions to p0,
but not to p1. (A release policy that depends on information
available to neither p0 nor p1 cannot be evaluated without
the help of a third party.) We also assume that s can be
encoded as a short binary string of perhaps 128 bits, since
this is suﬃcient for a symmetric key that can be used by p0
to decrypt additional data or as proof of authorization.
Given these assumptions, p1 can ask each pi ∈ {p2, . . . , pn}
to evaluate the corresponding expression ei from p1’s release
policy. This expression may involve information that pi is
willing to reveal to p0, but not to p1. In order to assert the
truth of the expression ei, pi encrypts the value 1 for p0’s
public key using an IND-CPA-secure homomorphic encryp-
tion scheme and returns the ciphertext to p1; otherwise, pi
encrypts a random value and returns the resulting cipher-
text. These ciphertexts reveal no information at all to p1
because of the IND-CPA security of the encryption scheme.
Now p1 encrypts the secret s using p0’s public key, homo-
morphically combines the encryption of s with each of the
ciphertexts received from p2, . . . , pn, and ﬁnally sends the
combined ciphertext to p0. If the quoted assertions p2 says
e2, . . . , pn says en from p1’s release policy were all true,
then p0 receives the encryption of s, since homomorphically
combining the encryption of s with the encryption of 1 has
no eﬀect. Otherwise, one of the ciphertexts that p1 received
from p2, . . . , pn must have been the encryption of a ran-
dom value, so p0 receives the encryption of s multiplied by
a random value, which contains no more information than
the random value. In either case, p0 learns nothing about
the structure of p1’s policy or the fact that p2, . . . , pn were
involved in enforcing it, since p0 always receives a single ci-
phertext from p1. If p0 fails to obtain s by decrypting the
ciphertext, then this fact may simply indicate that p1 deter-
mined that the release policy for s was unsatisﬁed based on
p1’s local knowledge. In the following section, we describe
this solution in more detail, including how p2, . . . , pn can
enforce release policies of their own on the truth values of
the assertions that they evaluate.
3. PROTOCOL DETAILS
Let M denote the message space of the IND-CPA-secure
homomorphic encryption scheme, Epi (m) denote the en-
cryption of message m using principal pi’s public key, and
Epi (m1)⊗Epi (m2) = Epi (m1·m2) denote the homomorphic
combination of two ciphertexts encrypted using pi’s public
key. We will assume that principals can obtain one another’s
public keys and that all communication takes place over se-
cure and authenticated channels. As before, we use p0 to
denote the principal who wishes to obtain a secret s1 ∈ M
and p1 to denote the principal in possession of this secret.
3.1 Core Protocol
The secret requester p0 ﬁrst sends a message to p1 ask-
ing for its secret s1, along with a newly generated globally
unique session identiﬁer sid. Upon receiving this request, p1
contacts each principal pi listed in its release policy for s1
and asks it to evaluate the corresponding assertion ei. The
session identiﬁer sid generated by p0 is passed along with
this request. At this point, p1 may replace s1 with a ran-
dom value if p1 decides that p0 is not authorized to receive
s1 based on information available to p1.
Each principal pi contacted by p1 selects a local secret si
based on the result of evaluating ei. If ei is true and pi is
(conditionally) willing to disclose this to p0 via p1, then si
is set to 1; otherwise, si is an element of the message space
M chosen uniformly at random. If pi is willing to uncondi-
tionally reveal si to p0, then pi simply returns Ep0 (si) to p1.
Otherwise, pi can make the disclosure of the truth value of ei
contingent upon the truth of a set of quoted assertions of the
same form as p1’s release policy for s1 by homomorphically
combining Ep0 (si) with additional ciphertexts as described
below. In either case, p1 homomorphically combines the ci-
phertext returned by each pi with Ep0 (s1), the encryption of
the secret requested by p0, and returns the ﬁnal ciphertext
to p0.
It may initially seem as though any principal pi contacted
by p1 can enforce its release policy for si in exactly the same
manner as p1 enforces its release policy for s1. This is almost
the case, but a problem arises when the release policies of
several principals create a cycle of quoted assertions in which
the disclosure of each assertion depends on the disclosure of
another assertion in the cycle. The purpose of the session
identiﬁer passed along with each request is to enable princi-
pals to detect and break such cycles.
3.2 Policy Cycle Resolution