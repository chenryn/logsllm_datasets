第11章运行库
glibc 的发布版本主要由两部分组成，一部分是头文件，比如 stdio.h、stdib.h等，它们
往往位于usrinclude：另外一部分则是库的二进制文件部分，二进制部分主要的就是C语言
标准库，它有静态和动态两个版本。动态的标准库我们及在本书的前面章节中碰到过了，它
位于/lib/libc.so.6：而静态标准库位于/usr/lib/libc.a。事实上glibc 除了C 标准库之外，还有儿
个辅助程序运行的运行库，这几个文件可以称得上是真正的“运行库”。它们就是
Ausr/lib/crt1.o、/usr/lib/crti.o和/usr/lib/crtn.o。是不是对这儿个文件还有点印象呢？我们在第2
章讲到静态率链接的时候已经碰到过它们了，虽然它们都很小，但这儿个文件都是程序运行
的最关键的文件。
glibc启动文件
cnt1.o里面包含的就是程序的入口函数_start，由它负责调用_libc_start_main初始化 libc
并且调用main函数进入真正的程序主体。实际上最初开始的时候它并不叫做crtl.o，而是叫
做cnt.o，包含了基本的启动、退出代码，由于当时有些链接器对链接时目标文件和库的顺序
有依赖性，cn.o这个文件必须被放在链接器命令行中的所有输入文件中的第一个，为了强调
这一点，crt.o被更名为cnt0.o，表示它是链接时输入的第一个文件。
后来由于C++的出现和ELF文件的改进，出现了必须在mainO函数之前执行的全局/静
态对象构造和必须在main(函数之后执行的全局/静态对象析构。为了满足类似的需求，运
于这两个段中的代码会先于/后于main（函数执行，所以用它们来实现全局构造和析构就是
很自然的事情了，链接器在进行链接时，会把所有输入目标文件中的“.init”和“.finit”按
照顺序收集起来，然后将它们合并成输出文件中的”init”和“finit”。但是这两个输出的段
中所包含的指令还需要一些辅助的代码来帮助它们启动（比如计算GOT之类的），于是引入
了两个目标文件分别用来帮助实现初始化函数的crtio和crtn.o。
与此同时，为了支持新的库和可执行文件格式，crt0.o也进行了升级，变成了cntl.o.crt0.o
和crtl.o之间的区别是crt0.o为原始的，不支持“.init”和“.finit”的启动代码，而 crtl.o是
改进过后，支持“.init”和“.finit”的版本。这一点我们从反汇编cntl.o可以看到，它向libc
启动函数_libc_star_main(传递了两个函数指针“_libc_csu_init”和“_libc_csu_fini”，这
两个函数负责调用_initO和_finit)，我们在后面“C++全局构造和析构”的章节中还会详细
分析。
是_initO和_finitO这两个函数，我们在关于运行库初始化的部分也会看到这两个函数，并且
在C++全局构造和析构的章节中也会分析它们是如何实现全局构造和析构的。crti.o和crtn.o
这两个目标文件中包含的代码实际上是_initO函数和_finitO函数的开始和结尾部分，当这两
程序员的自我修养一链接、装载与库
---
## Page 366
11.2C/C++运行库
343
个文件和其他目标文件安装顺序链接起来以后，刚好形成两个完整的函数_initO和_finitO。
我们用objdump可以查看这两个文件的反汇编代码：
$objdunp -dr /usr/lib/crt1.0
crti.01
file format elf32-i386
Disassenbly of section .init1
00000000 :
0 :
89 e5
55
push
tebp
1 :
53
mov
$esp, tebp
:E
ec 04
push
sub
tebx
4 :
83
00 00 00 00
ca11
$0x4,$esp
7 :
5b
e8
tebx
c 
C :
d :
81 c3 03 00 00 00
pop
f: R_386_G0TPC
add
_GLOBAL_OPFSET_TABLE_
$0x3, tebx
13 :
00 00 00 00 6 98
15:R_386_G0T32
moV
gmon_start.
0x0 ($ebx) , edx
19 :
7405
85 d2
test
edx, Bedx
1d:
1b1
e8 fc
tf ff ff
Je
1e: R_386_PLT32
ca11
1e 
xesuou6
Disassenbly of section .fini1
00000000 ;
Q1
55
89 e5
push
$esp, ebp
$ebp
1 :
3 :
53
push
mOV
4 1
83 ec 04
sub
Bebx
cal1c 
$0x4,tesp
7 :
00 00 00 00 89
C :
d:
81 c3 03 00 0000
5b
pop.
add
ebx
_GLOBAL_OFPSET_TABLE_
$0x3, bebx
f: R_386_G0TPC
$objdump -dr/u8r/1ib/crtn.o
crtn.o1
file format elf32-i386
Disassenbly of section .init:
00000000 1
0:
8S
pop
geax
1 :
5b
pop
leave
tebx
2 :
: E
6
Disassembly of section
c3
ret
.fini :
00000000 :
0:
65
pop
1 :
5b
pop
tebx
tecx
2 :
c9
3 :
leave
c3
ret
程序员的自我修养—链接、装载与库
---
## Page 367
344
第11章运行库
于是在最终链接完成之后，输出的目标文件中的“init”段只包含了一个函数_init(，
这个函数的开始部分来自于crtio的“init”段，结束部分来自于crtn.o的“init”段。为了
户目标文件和系统库之前，而crtn.o必须在用户目标文件和系统库之后。链接器的输入文件
顺序一股是：
ld crt1.o crti.o [user_objects] [system_libraries] crtn.o
说也一样）。
_init:
push %ebx
mov %esp.%ebp
crti.o
XXX I3
'.0
pop %eax
pop%ebx
leave
crtn.o
图 11-8init 段的组成
提
在默认情况下，Id链接器会将ibc、crt1.o等这些CRT和启动文件与程序的模块链接起
示
来，但是有些时候，我们可能不需要这些文件，或者希望使用自己的libc和crt1.o等启
动文件，以替代系统默认的文件，这种情况在嵌入式系统或操作系统内核编译的时候很
常见。GCC提高了两个参数“-nostartfile”和“-nostdib”，分别用来取消默认的启动
文件和C语言运行库。
其实C++全局对象的构造函数和析构函数井不是直接放在init和.finit段里面的，面是把
一个执行所有构造/析构的函数的调用放在里面，由这个函数进行真正的构造和析构，我们
在后面的章节还会再详细分析ELF/Gib和PE/MSVC对全局对象构造和析构的过程。
除了全局对象构造和析构之外，init和finin还有其他的作用。由于它们的特殊性（在
main之前/后执行），一些用户监控程序性能、调试等工具经常利用它们进行一些初始化和反
初始化的工作。当然我们也可以使用“_attribute_((section("init")”将函数放到.init 段里
面，但是要注意的是普通函数放在“init”是会破坏它们的结构的，因为函数的返回指令使
程厚员的自我修养一链接、装载与库
---
## Page 368
11.2C/C++运行库
345
GCC平台相关目标文件
就这样，在第2章中我们在链接时碰到过的诸多输入文件中，已经解决了crtl.o、crtio
和 crtn.o，剩下的还有儿个 crtbeginT.o、libgcc.a、libgcc_eh.a、crtend.o.严格来讲，这儿个
文件实际上不属于glibc，它们是GCC的一部分，它们都位于GCC的安装目录下：
/usr/lib/gcc/i486-Linux-gnu/4.1.3/crtbeginT.o
/us/lib/gcc/i486-Linux-gnu/4.1.3/libgcc.a
●/ust/lib/gcc/i486-Linux-gnw/4.1.3/libgcc_eh.a
●/usr/lib/gcc/i486-Linux-gnu/4.1.3/crtend.o
首先是crtbeginTo及crtend.o，这两个文件是真正用于实现C++全局构造和析构的目标
文件。那么为什么已经有了crtio和crtn.o之后，还需要这两个文件呢？我们知道，C++这
样的语言的实现是跟编译器密切相关的，而glibc只是一个C语言运行库，它对C++的实现
并不了解。面GCC是C++的真正实现者，它对C++的全局构造和析构了如指掌，于是它提
供了两个目标文件crtbeginT.o和crtendo来配合glibc实现C++的全局构造和析构。事实上
真正全局构造和析构则由crtbeginT.o和crtend.o来实现。我们在后面的章节还会详细分析它
们的实现机制。
由于GCC支持诸多平台，能够正确处理不同平台之间的差异性也是GCC的任务之一。
比如有些32位平台不支持64位的longlong类型的运算，编译器不能够直接产生相应的CPU
指令，而是需要一些辅助的例程来帮助实现计算。ibgcc.a里面包含的就是这种类似的函数，
这些函数主要包括整数运算、浮点数运算（不同的CPU对浮点数的运算方法很不相同）等，
面 libgcc_eh.a则包含了支持 C++的异常处理（ExceptionHandling）的平台相关函数。另外
GCC的安装目录下往往还有一个动态链接版本的 libgcc.a，为libgcc_s.s0。
MSVC CRT
相比于相对自由分散的 glibc，一直伴随着不同版本的VisualC++发布的MSVC CRT
（Microsoft Visual C++CRuntime）创看过去更加有序一些。从1992年最初的Visual C++1.0
版开始，一直到现在的Visual C++9.0（又叫做Visual C++2008），MSVC CRT也从1.0版发
展到了9.0版。
同一个版本的MSVCCRT根据不同的属性提供了多种子版本，以供不同需求的开发者使
用。按照静态/动态链接，可以分为静态版和动态版；按照单线程/多线程，可以分为单线程版
和多线程版：按照调试/发布，可分为调试版和发布版：按照是否支持C++分为纯C运行库版
和支持C++版：按照是否支持托管代码分为支持本地代码/托管代码和纯托管代码版。这些属
程序员的自我修养一—链接、装载与库
---
## Page 369
346
第11章运行库
性很多时候是相互正交的，也就是说它们之间可以相互组合。比如可以有静态单线程纯C纯
本地代码调试版：也可以有动态的多线程纯C纯本地代码发布版等。但有些组合是没有的，
比如动态链接版本的CRT是没有单线程的，所有的动态链接CRT都是多线程安全的。
这样的不同组合将会出现非常多的子版本，于是微软提供了一套运行库的命名方法，这
个命名方法是这样的，静态版和动态版完全不同。静态版的CRT位于MSVC安装目录下的
lib/,比如 Visual C++ 2008 的静志库路径为“ Program FilesMicrosoft Visual Studio 9.0VClib”,
它们的命名规则为：