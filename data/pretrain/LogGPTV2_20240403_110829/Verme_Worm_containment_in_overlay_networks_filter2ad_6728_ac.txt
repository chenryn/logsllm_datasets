Recently, ﬁle sharing systems like BitTorrent and eMule
have incorporated structured DHTs in their design [22]. For
this part of the ﬁle sharing system, we could replace their
DHTs with VerDi and obtain the beneﬁts of our scheme.
7. Evaluation
In this section we present an experimental evaluation of
Verme, and compare it to the Chord overlay in which our
design was based.
We implemented Verme by modifying the implementa-
tion of Chord for p2psim [13], a discrete event simulator
written in C++.
The three variants of the VerDi DHT were implemented
based on an incomplete implementation of DHash that was
included in p2psim. The incomplete implementation in-
cluded the get operation and data stabilization routines to
maintain certain replication levels for the data. We added
the put operation and extended DHash to create the three
variants of VerDi.
7.1. Verme overhead
Our ﬁrst set of experiments evaluates the performance
overhead introduced by our new design features. We be-
gin by discussing the overhead of Verme when compared to
Chord, and subsequently compare VerDi with DHash.
7.1.1. Simulation setup
We used a simulated network of 1740 nodes, with a ma-
trix derived from measuring the inter-node latencies of DNS
servers using the King method [14]. The average round trip
time (RTT) was 198 ms. This matrix was obtained from the
p2psim web site [13].
In both Verme and Chord overlays, each node has 10
successors, each one runs its stabilization function every
30 seconds and its ﬁnger stabilization every 60 seconds.
Lookups are issued with random keys by each node at in-
tervals exponentially distributed with a mean of 30 seconds
(the values were chosen based on experiments from [17]
and [23]).
The Verme overlay was conﬁgured with 128 sections,
which gives an average of 13 nodes per section and each
node has 10 predecessors. The mean node lifetime took the
following values: 15 minutes, 30 minutes, 1 hour, 4 hours
and 8 hours.
We used the same proportion of nodes of each type. Due
to space constraints, we omit the results with an uneven dis-
tribution of node types. These results show that such de-
ployments cause a slight load imbalance, which would only
become relevant for systems with a very high load.
Figure 5. Comparison of lookup latencies
Figure 6. Latencies for get and put
For each experiment, the simulation ran for 12 hours and
we computed average values. Each simulation was repeated
8 times and we report on the average.
7.1.2. Evaluation results
Figure 5 shows the comparison between the lookup latency
for Chord and Verme. Verme lookups have to be recursive,
whereas Chord lookups may be transitive, where a recur-
sive route is taken by the lookup request, but the reply is
given directly to the initiator. We compared the latency of
Verme with transitive and recursive Chord. In the x-axis we
varied the mean node lifetime, to determine if our results
were affected by node dynamics. The additional overhead
introduced by Verme is noticeable when compared to tran-
sitive Chord, where lookup latencies are 35% lower than in
Verme. Note that the impact of this overhead is minimized
when we take into account the fact that an operation in a
DHT will include both the lookup and the time to down-
load or upload the data. When compared to recursive Chord
the latency of Verme is similar, thus the changes in the ﬁn-
ger assignment and in the lookup strategy did not introduce
a signiﬁcant overhead. The node dynamics did not affect
the comparison, since all implementations were equally af-
fected by the need to route around failures (every time a
node tried to contact a node that had failed it chose another
neighbor).
In additional experiments, reported in a separate docu-
ment [11], we also show that both lookup failure rates and
the bandwidth used for overlay maintenance and lookups
does not differ signiﬁcantly between Chord and Verme.
7.2. VerDi overhead
Now we evaluate the overhead of VerDi with respect to
Chord’s DHT layer, DHash. In this set of experiments, the
King data set revealed itself less useful, since we were sim-
ulating data operations, and it did not have reference values
for bandwidth between nodes, so we slightly modiﬁed the
setup to use the GT-ITM model [26].
Figure 6 shows the latency for DHT get and put oper-
Figure 7. Bandwidth for get and put
ations in the different systems. The results conﬁrm that
there is a tradeoff between performance and security.
If
we analyze the latency of get operations, we can see that
Fast-VerDi has the lowest latency, which is very close to the
latency of DHash, since they work very similarly by hav-
ing the initiator perform a recursive lookup followed by a
direct download from the responsible node. Secure-VerDi
has the highest latency due to the fact that there is a costly
data transfer between every pair of nodes along the reverse
lookup path. Compromise-VerDi performs in between the
other two designs, since it only has one level of indirection
when downloading the data – up to 31% slower than DHash.
In terms of the latency of put operations, Secure-VerDi
has the highest latency because the data is sent through the
forward lookup path. Fast-VerDi and Compromise-VerDi
show a larger difference when compared to DHash due to
the fact that the reply is only sent to the client after the re-
sponsible node that receives the data makes a copy to the
other responsible node of the opposite type (to ensure that
the data is available to nodes of any type).
We also analyzed the bandwidth used for DHT get and
put operations. The results are shown in Figure 7.
The results for bandwidth usage show that DHash and
Fast-VerDi use more or less the same bandwidth for get op-
to simulate the propagation of worms that used parameters
derived from real worms [21].
In particular, we considered a model where nodes can be
in one of four states: not infected, scanning, infecting, inac-
tive. A machine that is in the scanning state starts scanning
nodes at some rate (according to some strategy to obtain
addresses of peers that depends on the type of worm, as we
discuss next). If it ﬁnds a vulnerable node, it switches to
the infecting state. After some period of time, if the target
node is in the not infected state, the infection is complete,
the target node goes to the inactive state, and the original
node returns to scanning. After some more time the worm
is activated in the new node, and it also starts scanning.
We used the following parameters (based on the
aforementioned model [21]):
a scanning rate of 100
scans/machine/second; the time to infect a machine was 100
ms; and the time between the node infection and worm ac-
tivation was 1 second.
We considered a 100, 000-node static overlay where 50%
of the machines were vulnerable to the worm being simu-
lated. The Verme overlay was conﬁgured with 4096 sec-
tions which gives an average of 24 nodes per section.
Our simulation compares the propagation speeds for dif-
ferent strategies: a p2p worm that propagates exclusively in
a Chord overlay, a p2p worm that propagates exclusively in
Verme, and a p2p worm that propagates with the help of an
impersonating node (i.e., a node that joins the overlay with
a type that is opposite from the one it wishes to attack) that
issues a series of DHT operations to harvest IP addresses.
In the latter case we considered the three variants of VerDi.
For the case of Fast-VerDi, the impersonating node was is-
suing lookups at a rate of 10 lookups per second, and in the
case of Compromise-VerDi (where the impersonating node
does not gain from issuing lookups, but has to wait for other
nodes to issue so it can act as a relay) every overlay node
would issue 1 lookup per second. Each strategy was simu-
lated 10 times and we report on the average.
Figure 8 shows the number of infected machines as a
function of the time since the start of the infection. Note
that we used a logarithmic scale in the x-axis so there are
substantial differences between the different curves. These
results show that an overlay like Chord can be the ideal sub-
strate to achieve a very fast propagation, taking only 32
seconds to infect the entire system. On the other end, if
Verme is used without any impersonation attack then the
worm would be conﬁned to the nodes in a single section.
In the case of Secure-VerDi with an infected machine im-
personating the appropriate type, the infection is limited to
a logarithmic number of sections, which also represents a
very small fraction of the system (352 nodes). These two
curves are almost imperceptible because they are so close
to the x-axis. Fast-VerDi and Compromise-VerDi succeed
in slowing down worm propagation, even in the presence of
Figure 8. Simulated propagation speeds
erations, since the bulk of the bandwidth is spent on the data
transfer from the responsible node to the client. Get opera-
tions in Secure-VerDi are costly because the data is piggy-
backed on the reply that travels through every pair of nodes
in the lookup path, and Compromise-VerDi only has one
level of indirection, which approximately doubles the band-
width consumption when compared to the more effective
strategies. When we analyze the bandwidth used by put op-
erations we can see that the results are similar to the results
for get operations, because the sequence of data transfers
are also similar (albeit in the reverse direction). The differ-
ences for Fast-VerDi and Compromise-VerDi are due to the
fact that before returning to the client, an extra copy is done
to the other responsible node (of the opposite type). Note
that the results shown in Figure 7 do not include the band-
width used for the creation of additional replicas (other than
the copies held by one or two responsible nodes, depending
on the implementation) that takes place in background.
The conclusion of this comparison between the differ-
ent DHT layers is that there is a marked tradeoff between
the security offered by our DHT against more sophisticated
worms, and the overhead introduced by the DHT, especially
in terms of bandwidth usage. Latencies, however, are more
affected in the case of put operations (which are probably
less frequent in most scenarios) or in the case of Secure-
VerDi where all operations work in a completely recursive
manner.
7.3. Worm propagation speed
The experiments so far have focused on the overhead in-
troduced by the system when compared to the original ver-
sion of Chord. Now we shift our focus to beneﬁts from
using Verme in terms of slowing down the propagation of
worms. To analyze these beneﬁts, it was necessary to de-
velop a model for worm propagation under different condi-
tions. The adopted model was based on an existing model
[14] K. P. Gummadi, S. Saroiu, and S. D. Gribble. King: estimating la-
tency between arbitrary internet end hosts. In IMW ’02: Proceed-
ings of the 2nd ACM SIGCOMM Workshop on Internet measurment,
2002.
[15] F. Junqueira, R. Bhagwan, A. Hevia, K. Marzullo, and G. M. Voelker.
Surviving internet catastrophes. In Proceedings of USENIX Annual
Tech. Conference, 2005.
[16] C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion de-
tection signatures using honeypots. In Proceedings of HotNets 2003,
Nov. 2003.
[17] J. Li, J. Stribling, R. Morris, M. F. Kaashoek, and T. M. Gil. A
performance vs. cost framework for evaluating DHT design tradeoffs
under churn. In Proceedings of the INFOCOM’05, 2005.
[18] D. Moore, C. Shannon, and J. Brown. Code-red: a case study on the
spread and victims of an internet worm. In IMW ’02: Proceedings of
the 2nd ACM SIGCOMM Workshop on Internet measurment, 2002.
[19] K. Ramachandran and B. Sikdar. Modeling malware propagation
in gnutella type peer-to-peer networks. In Proceedings of the 20th
IEEE International Parallel and Distributed Processing Symposium
(IPDPS 2006), Apr. 2006.
[20] S. Singh, G. V. C. Estan, , and S. Savage. Automated worm ﬁnger-
printing. In Proceedings of 6th Symposium on operating design and
implementation 2004 (OSDI 2004), Dec. 2004.
[21] S. Staniford, V. Paxson, and N. Weaver. How to 0wn the internet
in your spare time. In Proceedings of USENIX Security Symposium
2002, Aug. 2002.
[22] M. Steiner, E. W. Biersack, and T. Ennajjary. Actively monitoring
peers in kad. In 6th International Workshop on Peer-to-Peer Systems
(IPTPS’07).
[23] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrish-
nan. Chord: A scalable peer-to-peer lookup service for internet ap-
plications. In SIGCOMM ’01: Proceedings of the 2001 conference
on Applications, technologies, architectures, and protocols for com-
puter communications, Aug. 2001.
[24] K. Walsh and E. G. Sirer. Experience with an object reputation sys-
In 3rd Symposium on Networked
tem for peer-to-peer ﬁlesharing.
Systems Design and Implementation (NSDI 06), May 2006.
[25] W. Yu, C. Boyer, S. Chellappan, and D. Xuan. Peer-to-peer system-
based active worm attacks: Modeling and analysis. In IEEE Interna-
tional Conference on Communications (ICC), May 2005.
[26] E. W. Zegura, K. L. Calvert, and S. Bhattacharjee. How to model an
internetwork. In INFOCOM, pages 594–602, 1996.
[27] L. Zhou, L. Zhang, F. McSherry, N. Immorlica, M. Costa, and
S. Chien. A ﬁrst look at peer-to-peer worms: Threats and defenses.
In Proceedings of the 4th International Workshop on Peer-To-Peer
Systems (IPTPS’05), Feb. 2005.
[28] C. C. Zou, W. Gong, D. Towsley, and L. Gao. The monitoring
IEEE/ACM Trans. Netw.,
and early detection of internet worms.
13(5):961–974, 2005.
an impersonation attack, with approximately 160 and 1600
seconds to infect half of the vulnerable population of the
overlay.
8. Conclusion
This paper presented a novel overlay called Verme, and
a new DHT built on top of it called VerDi, which were de-
signed to contain, or at least slow down the propagation of
p2p worms.
We implemented Verme and VerDi using p2psim. Our
simulations show that the overhead of using our overlay and
DHT is reasonable when compared to Chord and DHash,
and that using Verme can contain, or at least slow down the
propagation of p2p worms.
Our new overlay design is a ﬁrst step towards the con-
tainment of worms that propagate using the aid of an over-
lay network, and is at least raising the difﬁculty level for
writing them.
9. Acknowledgments
We would like to thank the anonymous reviewers for
valuable feedback.
References
[1] http://www.securityfocus.com/bid/4951.
[2] http://www.securityfocus.com/bid/6747.
[3] http://www.cert.org/incident_notes/
IN-2004-01.html.
[4] Bitcomet torrent ﬁle handling remote buffer overﬂow vulnerability.
http://www.securityfocus.com/bid/16311.
[5] G. Chen and R. S. Gray. Simulating non-scanning worms on peer-
to-peer networks. In Proceedings of 1th International Conference on
Scalable Information Systems (INFOSCALE 2006), May 2006.
[6] B. Cohen. Incentives build robustness in bittorrent. In Proceedings of
the First Workshop on the Economics of Peer-to-Peer Systems, 2003.
[7] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang,
and P. Barham. Vigilante: End-to-end containment of internet
worms. In Proceedings of the 20th ACM Symposium on Operating
Systems Principles (SOSP 2005), Oct. 2005.
[8] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris, and I. Stoica. Wide-
area cooperative storage with CFS. In Proceedings of the 18th ACM
Symposium on Operating System Principles, Oct. 2001.
[9] F. Dabek, J. Li, E. Sit, J. Robertson, M. F. Kaashoek, and R. Morris.
Designing a dht for low latency and high throughput. In Proceedings
of the 1st USENIX Symposium on Networked Systems Design and
Implementation (NSDI ’04), March 2004.
[10] J. Douceur. The sybil attack. In Proceedings of the 1st International
Workshop on Peer-to-Peer Systems (IPTPS’02), Mar. 2002.
[11] F. Freitas. Verme: Worm containment in overlay networks. Master
Dissertation in Computer Engineering, Technical University of Lis-
bon, 2008.
[12] F. Freitas, R. Rodrigues, C. Ribeiro, P. Ferreira, and L. Rodrigues.
Verme: Worm containment in peer-to-peer overlays. In 6th Interna-
tional Workshop on Peer-to-Peer Systems (IPTPS’07), 2007.
[13] T. Gil, F. Kaashoek, J. Li, R. Morris, and J. Stribling. p2psim: a sim-
ulator for peer-to-peer (p2p) protocols. http://pdos.csail.
mit.edu/p2psim/.