libkvm a library that provides a uniform interface for accessing kernel virtual memory images; used
by programs such as ps
libm the standard math library
 libpoll a wrapper library that emulates the System V poll() system call on top of BSD's select()
system call
libpthread the POSIX thread[29] library
[29] POSIX threads (Pthreads) on Mac OS X are implemented using Mach kernel threads,
with one Mach thread per pthread.
librpcsvc a miscellaneous "Sun" RPC services library
On Mac OS X 10.3 and earlier, libdl is a wrapper library that emulates the POSIX dynamic linking loader
APIthe dlopen(), dlclose(), dlsym(), and dlerror() functions[30]on top of Darwin's native dyld API.
On Mac OS X 10.4 and later, the dlopen() function family is implemented natively within dyld.
[30] Typical libdl implementations also provide the dladdr() function, which is not defined by
POSIX. dladdr() queries the dynamic linker for information about the image containing a
specified address.
Internally available functionality in libSystem includes the following:
libdyldapis provides a low-level API to the dynamic link editor
libkeymgr used for maintaining process-wide global data known to all threads across all dynamic
libraries
liblaunch provides an interface to launchd, the manager of system-wide and per-user daemons and
agents
libmacho provides an API for accessing segments and sections in Mach-O files
libnotify allows applications to exchange events through namespace-based[31] stateless notifications
[31] The clients of this API share a global namespace. Clients may post notifications,
which are associated with names. Similarly, clients may monitor names by registering for
notifications.
libstreams implements an I/O streams mechanism
libunc allows creation, dispatch, and manipulation of user notifications
libSystem also includes an object file containing the commpage symbols. As we will see in Chapters 5 and
6, the commpage area is a region of memory that is mapped (shared and read-only) into every process's
address space. It contains frequently used system-wide code and data. The commpage symbols in libSystem
are placed in a special segment (the __DATA segment within the __commpage section), which allows a
debugger to access them.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 24 of 80
2.8. Bundles and Frameworks
Before discussing other layers of Mac OS X, let us look at the bundle and framework abstractions, since
much of the user-level functionality in Mac OS X is implemented as frameworks, and a framework is a
specific type of a bundle.
2.8.1. Bundles
A bundle is a collection of related resources packaged as a directory hierarchy. Examples of resources that
reside in bundles include executables, shared libraries, plug-ins, header files, images, audio files,
documentation, andrecursivelyother bundles. The bundle abstraction is very useful in packaging, deploying,
maintaining, and using software. Consider the example of an application bundle, which is one of the most
commonly used bundle types on Mac OS X. Figure 212 shows the hierarchical structure of the iTunes
application bundle.
Figure 212. Hierarchical structure of the iTunes application bundle
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 25 of 80
An application bundle is a directory with a name that conventionally has a .app suffix. Mac OS X
applications are often more than just a single stand-alone executable. For example, an application may use a
variety of media filesicons, splash images, and soundsin its user interface. An application may implement
much of its functionality modularly, across one or more dynamic shared libraries. An application may also
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 26 of 80
support a plug-in architecture through which anybody may extend the application's functionality by writing
loadable plug-ins. Bundles are well suited for such applications because they keep the various constituents
of the application together in a structured manner. As shown in Figure 212, the iTunes application bundle
contains the main iTunes executable, a loadable plug-in bundle, icons, media files, a helper application,
localized documentation, and so on. Everything resides within the iTunes.app directory, rather than being
strewn over many system directories. Given such bundles, application installation and removal can be as
trivial as copying or deleting, respectively, a single .app directory. Applications can also be moved after
installation since they are usually self-contained.
The Finder treats several types of bundles as opaque, atomic entitiesas if they were files and not directories.
For example, double-clicking on an application bundle launches the application. The user may browse the
bundle's contents by using the Finder's Show Package Contents contextual-menu item. A bundle's
opaqueness may be asserted in several ways, for example, through a property list file, through a PkgInfo
file, and through the kHasBundle file system attribute.
Several types of Mach-O binaries exist within bundles on Mac OS X. Bundles can be programmatically
accessed using the CFBundle and NSBundle APIs. Table 21 lists several examples of bundle types on Mac
OS X.
Table 21. Examples of Bundle Types on Mac OS X
Bundle Default
Type Extension Explanation
Automator .action Automator actions are extensions to the default set of actions supported by
action the Automator workflow-based application, which allows users to
graphically construct a sequence of actions by picking one or more actions
from a palette of available actions. These bundles can be implemented in
Objective-C or AppleScript.
Application .app Mac OS X application bundles typically contain dynamically linked
executable programs along with any resources needed by the programs.
Bundle .bundle A .bundle package is a loadable bundle containing dynamically linked
code that can be loaded by a program at runtime. The program must
explicitly load such a bundle using dynamic linking functions. Several Mac
OS X applications use .bundle plug-ins to extend their feature sets. For
example, the Address Book application can load Action Plug-In bundles
from specific directories, allowing programmers to populate the Address
Book rollover menus with custom items. iTunes uses bundles to implement
visual plug-ins, whereas iMovie uses them to implement effects, titles, and
transitions.
Component .component Core Audio plug-ins, which are useful for manipulating generating,
processing, or receiving audio streams, are implemented as .component
bundles.
Dashboard .wdgt Dashboard is a lightweight runtime environment introduced in Mac OS X
widget 10.4 for running small accessory programs called widgets in a logically
separate layer atop the desktop. Dashboard widgets are packaged as .wdgt
bundles.
Debug .debug Applications with debugging symbols can be packaged as .debug bundles,
(application) which the Finder treats similarly to .app bundles.
Framework .framework A framework is a dynamic shared library packaged with resources such as
header files, API documentation, localized strings, helper programs, icons,
splash images, sound files, and interface definition files. An umbrella
framework is a bundle that contains one or more subframeworks in its
Frameworks subdirectory. The Carbon and Core Services frameworks are
examples of umbrella frameworks.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 27 of 80
Kernel .kext Kernel extensions are dynamically loadable kernel modules. They are
extension similar to .bundle bundles in that they contain code that is
programmatically introduced into a running programthe program being the
kernel in this case. However, kernel extensions are statically linked.
Keynote file .key Applications can use bundles as complex "file formats" to hold arbitrary
data in documents. Apple's Keynote software uses bundles to store
presentations. A .key bundle contains an XML-based representation of the
presentation's structure, along with resources such as images, thumbnails,
audio, and video.
Metadata .mdimporter Metadata importers are used by the integrated Spotlight search technology
importer in Mac OS X. Such an importer gathers information from one or more
specific file formats. Developers of applications with custom file formats
can provide their own metadata importers that Spotlight can use as plug-ins
while indexing a file system.
Package .pkg, .mpkg A .pkg bundle is an installation package created using the
PackageMaker.app application. A package's contents include files and
directories belonging to the installable software it represents, along with
information that may be needed to install the software. A
metapackagea .mpkg bundlecontains a file that includes a list of packages
or metapackages and any other information that might be needed to install
them. Unlike a package, a metapackage does not itself contain any
installable software. Double-clicking a package or a metapackage launches
the Mac OS X installer application.
Palette .palette A palette is a loadable bundle that contains code and user-interface objects
used by Apple's integrated development environment (IDE).
Plug-in .plugin A .plugin is a loadable bundle similar in concept to a .bundle but has
more architectural and implementation requirements. Contextual-menu
plug-ins, which are used to extend the list of commands on Finder
contextual menus, are implemented as .plugin bundles. Other examples
of such bundles include certain QuickTime plug-ins and extensions called
Image Units to the Core Image and Core Video technologies.
Preference .prefPane Preference panes are bundles used to manage system-wide software and
pane hardware preferences. The System Preferences application displays the
union of various .prefPane bundles located
in /System/Library/PreferencePanes/, /Library/PreferencePanes/,
and ~/Library/PreferencePanes/.
Profile .profile Applications with profiling data can be packaged as .profile bundles,
(application) which the Finder treats similarly to .app bundles.
Service .service A service is a bundle that provides generic functionality for use by other
applications. Examples of services include text-to-speech conversion,
(SpeechService.service), spell checking (AppleSpell.service), and
Spotlight searching (Spotlight.service). Services can be made available
on a system-wide basis through .service bundles. A service is usually
contextual in its operationit operates on a currently selected entity, such as
a piece of text. For example, the AppleSpell service will run a spelling
check on the selected text.
Screensaver .saver, Mac OS X provides APIs for creating screensavers based on program-
.slideSaver generated content or slide shows. Such screensaver programs are packaged
as .saver and .slideSaver bundles, respectively. Note that
a .slideSaver bundle does not contain any executable codeit contains
only a set of images in its Resources directory and an information
property list file.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 28 of 80
System .spreporter The System Profiler application displays information about the system's
Profiler hardware and software. It uses .spreporter bundles residing
reporter in /System/Library/SystemProfiler/ to collect information. Each
reporter bundle provides information about a particular area. For example,
there are system reporter bundles for attached displays, FireWire devices,
Serial ATA devices, USB devices, and installed software and fonts.
Web plug-in .webplugin The Safari web browser supports an Objective-C-based plug-in model for
displaying new types of content in the browser through plug-ins.
QuickTime support in Safari is implemented as a .webplugin bundle.
Xcode plug- .ibplugin, The functionality of Apple's Xcode development environment can be
in .pbplugin, extended through several types of plug-ins.
.xcplugin,
.xctxtmacro,
.xdplugin
As shown in Table 21, bundles are used to implement several types of plug-ins. From a generic standpoint, a
plug-in is an external piece of code that runs in a host environment. Typically the host is an application, but
it can be an operating system or perhaps even another plug-in. The host must be designed to be extensible
through plug-insit must export an API for the plug-in to conform to. Thus, by using the host's plug-in API, a
plug-in can add functionality to the host without requiring recompilation of, or even access to, the host's
source.
Note that the bundle extensions listed in Table 21 are only conventionsit is possible to have a bundle with an
arbitrary extension, as long as certain requirements are satisfied or the application using the bundle knows
how to handle the extension.
2.8.2. Property List Files
You will frequently come across property list (plist) files on Mac OS X. They are on-disk representations of
organized data. When such data is in memory, it is structured using basic data types native to the Core
Foundation framework.
The Core Foundation data types used in property lists are CFArray, CFBoolean, CFData, CFDate,
CFDictionary, CFNumber, and CFString. An important feature of these data types is that they are readily
portable across multiple Mac OS X subsystemsfor example, CF data types have analogs in the I/O Kit.
An on-disk property list is a serialized version of an in-memory property list. A plist file may store
information in either binary format or human-readable XML format.[32] The two most common uses of plist
files on Mac OS X are by bundles and by applications.
[32] Many people opine that XML is hardly readable by humans. Although it is cumbersome for
a normal person to parse, XML is decidedly more human-friendly than a "raw" binary format.
A bundle uses a special type of plist filean information property listto specify its critical attributes, which are
read by other programs while handling the bundle. The default name for an information property list file is
Info.plist. Consider an application bundle's Info.plist file, whose contents may include attributes such
as the following:
The document types handled by the application
The name of the bundle's main executable file
The name of the file containing icons for the bundle
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 29 of 80
The application's unique identification string
The application's version
Applications use property list files to store user preferences or other custom configuration data. For
example, the Safari web browser stores a user's bookmarks in a plist file called Bookmarks.plist.
Numerous configuration plist files can be found in a user's ~/Library/Preferences/ directory. Typically,
applications store per-user configurations or preferences in this directory using a reverse DNS naming
convention. For example, the Safari web browser's preferences are stored in com.apple.Safari.plist.
Property list files can be created and manipulated using several tools on Mac OS X. The plutil command-
line program can be used to convert a plist file from one format to another. It also checks plist files for
syntax errors. XML-format plist files can be edited using any text editor, although it might be more
convenient (and less error-prone) to use the Property List Editor graphical application, which is part of
Apple Developer Tools. The Cocoa and Core Foundation frameworks provide APIs for programmatically
accessing plist files. As alluded to earlier, several standard object types in these frameworks are stored,
organized, and accessed as property lists.
2.8.3. Frameworks
In its simplest form, a Mac OS X framework is a bundle containing one or more shared libraries. Besides
stand-alone shared librariessuch as the ones in /usr/lib/Mac OS X contains a large number of
frameworks. Whereas a shared library contains shared code, a framework usually contains one or more
shared libraries along with other types of related resources.[33] From an implementation standpoint, a
framework is a directory hierarchy encapsulating shared resources such as the following:
[33] It is possible for a framework to contain no shared code but only resources.
Dynamic shared libraries
Headers
Nib (NeXT Interface Builder) files
Localized strings
Images
Documentation files
Information property lists
Sounds
A framework directory has a well-defined structure consisting of files and folders, some of which are
mandatory; the others are optional. Figure 213 shows the files and folders contained in the hypothetical Foo
framework.
Figure 213. Bundle structure of a Mac OS X framework
Foo.framework/ # Top-level directory
Headers -> Versions/Current/Headers # Symbolic link
Foo -> Versions/Current/Foo # Symbolic link
Libraries -> Versions/Current/Libraries # Symbolic link
Resources -> Versions/Current/Resources # Symbolic link
Versions/ # Contains framework major versions
A/ # Major version A
Foo # Framework's main dynamic library
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 30 of 80
Headers/ # Public headers
Bar.h
Foo.h
Libraries/ # Secondary dynamic libraries
libfoox.dylib
libfooy.dylib
Resources/
English.lproj/ # Language-specific resources
Documentation/ # API documentation
InfoPlist.strings # Localized strings
Info.plist # Information property list file
B/ # Major version B
Foo
Headers/
Bar.h
Foo.h
Libraries/
libfoox.dylib
libfooy.dylib
Resources/
English.lproj/
Documentation/
InfoPlist.strings
Info.plist
Current -> B # Symbolic link to most recent version
The Info.plist file within the Resources subdirectory of a framework contains its identifying
information. Frameworks support versioning: If an application depends on a particular version of a