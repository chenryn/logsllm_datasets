### Libraries in Mac OS X

- **libkvm**: A library that provides a uniform interface for accessing kernel virtual memory images. It is used by programs such as `ps`.
- **libm**: The standard math library.
- **libpoll**: A wrapper library that emulates the System V `poll()` system call on top of BSD's `select()` system call.
- **libpthread**: The POSIX thread (Pthreads) library. On Mac OS X, Pthreads are implemented using Mach kernel threads, with one Mach thread per pthread.
- **librpcsvc**: A miscellaneous "Sun" RPC services library.
- **libdl**: On Mac OS X 10.3 and earlier, this is a wrapper library that emulates the POSIX dynamic linking loader API (functions like `dlopen()`, `dlclose()`, `dlsym()`, and `dlerror()`) on top of Darwin's native `dyld` API. On Mac OS X 10.4 and later, the `dlopen()` function family is implemented natively within `dyld`. Typical `libdl` implementations also provide the `dladdr()` function, which queries the dynamic linker for information about the image containing a specified address.

### Internally Available Functionality in libSystem

- **libdyldapis**: Provides a low-level API to the dynamic link editor.
- **libkeymgr**: Used for maintaining process-wide global data known to all threads across all dynamic libraries.
- **liblaunch**: Provides an interface to `launchd`, the manager of system-wide and per-user daemons and agents.
- **libmacho**: Provides an API for accessing segments and sections in Mach-O files.
- **libnotify**: Allows applications to exchange events through namespace-based, stateless notifications. Clients share a global namespace and can post or monitor notifications.
- **libstreams**: Implements an I/O streams mechanism.
- **libunc**: Allows the creation, dispatch, and manipulation of user notifications.
- **commpage symbols**: `libSystem` includes an object file containing commpage symbols, which are placed in a special segment (`__DATA` segment within the `__commpage` section). This allows a debugger to access them. The commpage area is a region of memory mapped (shared and read-only) into every process's address space, containing frequently used system-wide code and data.

### Bundles and Frameworks

#### 2.8. Bundles and Frameworks

Before delving into other layers of Mac OS X, it is important to understand the bundle and framework abstractions, as much of the user-level functionality in Mac OS X is implemented as frameworks. A framework is a specific type of bundle.

#### 2.8.1. Bundles

A bundle is a collection of related resources packaged as a directory hierarchy. Examples of resources in bundles include executables, shared libraries, plug-ins, header files, images, audio files, documentation, and other bundles. The bundle abstraction is useful for packaging, deploying, maintaining, and using software.

##### Application Bundles

An application bundle is a directory with a `.app` suffix. Mac OS X applications often consist of more than just a single executable. For example, an application may use various media files (icons, splash images, sounds) in its user interface, implement functionality across multiple dynamic shared libraries, and support a plug-in architecture. Bundles keep these components together in a structured manner. The Finder treats several types of bundles as opaque, atomic entities, allowing users to launch applications by double-clicking and browse contents using the "Show Package Contents" contextual menu item.

##### Types of Bundles

- **Automator .action**: Extensions to the default set of actions in the Automator workflow-based application.
- **Application .app**: Contains dynamically linked executable programs and necessary resources.
- **Bundle .bundle**: Loadable bundles containing dynamically linked code that can be loaded at runtime.
- **Component .component**: Core Audio plug-ins for manipulating, generating, or receiving audio streams.
- **Dashboard .wdgt**: Dashboard widgets, small accessory programs running in a logically separate layer atop the desktop.
- **Debug .debug**: Applications with debugging symbols.
- **Framework .framework**: Dynamic shared libraries packaged with resources such as header files, API documentation, localized strings, helper programs, icons, and sound files.
- **Kernel .kext**: Dynamically loadable kernel modules.
- **Keynote file .key**: Complex "file formats" for storing presentations.
- **Metadata .mdimporter**: Metadata importers for Spotlight search technology.
- **Package .pkg, .mpkg**: Installation packages created using the PackageMaker.app application.
- **Palette .palette**: Loadable bundles for Apple's integrated development environment (IDE).
- **Plug-in .plugin**: Loadable bundles with more architectural and implementation requirements.
- **Preference .prefPane**: Bundles for managing system-wide software and hardware preferences.
- **Profile .profile**: Applications with profiling data.
- **Service .service**: Bundles providing generic functionality for use by other applications.
- **Screensaver .saver, .slideSaver**: Screensaver programs based on program-generated content or slide shows.
- **System Profiler .spreporter**: Reporter bundles for the System Profiler application.
- **Web plug-in .webplugin**: Plug-ins for the Safari web browser.
- **Xcode plug-in .ibplugin, .pbplugin, .xcplugin, .xctxtmacro, .xdplugin**: Plug-ins for extending Apple's Xcode development environment.

#### 2.8.2. Property List Files

Property list (plist) files are on-disk representations of organized data, structured using basic data types from the Core Foundation framework (e.g., CFArray, CFBoolean, CFData, CFDate, CFDictionary, CFNumber, CFString). These data types are portable across multiple Mac OS X subsystems. Plist files can store information in binary or human-readable XML format.

- **Bundles**: Use Info.plist files to specify critical attributes such as document types, main executable, icons, unique identification string, and version.
- **Applications**: Use plist files to store user preferences or configuration data. For example, Safari stores bookmarks in Bookmarks.plist.

#### 2.8.3. Frameworks

A Mac OS X framework is a bundle containing one or more shared libraries and related resources. From an implementation standpoint, a framework is a directory hierarchy encapsulating shared resources such as:

- Dynamic shared libraries
- Headers
- Nib (NeXT Interface Builder) files
- Localized strings
- Images
- Documentation files
- Information property lists
- Sounds

A framework directory has a well-defined structure, including symbolic links to major versions and subdirectories for headers, libraries, and resources. The Info.plist file within the Resources subdirectory contains identifying information. Frameworks support versioning, allowing applications to depend on specific versions.