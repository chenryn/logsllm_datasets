**参考文献**
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti.Control-flow Integrity.
CCS’05.
[2] T. W. Barr, A. L. Cox, and S. Rixner. Translation caching: skip, don’t
walk (the page table). ISCA’10.
[3] A. Bhattacharjee. Large-reach memory management unit caches. MICRO’13.
[4] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida.Dedup Est Machina: Memory
Deduplication as an Advanced Exploitation Vector. SP’16.
[5] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida. StackArmor:
Comprehensive Protection From Stack-based Memory Error Vulnerabilities for
Binaries. NDSS.
[6] D. Cock, Q. Ge, T. Murray, and G. Heiser. The Last Mile: An Empirical
Study of Timing Channels on seL4. CCS’14.
[7] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S.
Brunthaler, and M. Franz. Readactor: Practical Code Randomization Resilient to
Memory Disclosure. NDSS’15.
[8] T. H. Dang, P. Maniatis, and D. Wagner. The performance cost of shadow
stacks and stack canaries. ASIA CCS’15.
[9] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh.Jump Over ASLR: Attacking
Branch Predictors to Bypass ASLR. MICRO’16.
[10] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum.Enhanced Operating System
Security Through Efficient and Fine-grained Address Space Randomization.
SEC’12.
[11] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida. ASLR on the
Line: Practical Cache Attacks on the MMU. NDSS’17.
[12] D. Gruss, C. Maurice, A. Fogh, M. Lipp, and S. Mangard. Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR. CCS’16.
[13] R. Hund, C. Willems, and T. Holz. Practical Timing Side Channel Attacks
Against Kernel Space ASLR. SP’13.
[14] AMD64 Architecture Programmer’s Manual, Volume 2: System Programming.
Publication No.: 24593, May 2013.
[15] Intel 64 and IA-32 Architectures Optimization Reference Manual. Order
Number: 248966-032, January 2016.
[16] Y. Jang, S. Lee, and T. Kim. Breaking kernel address space layout
randomization with intel tsx. CCS’16.
[17] K. Koning, H. Bos, and C. Giuffrida. Secure and Efficient Multi-Variant
Execution Using Hardware-Assisted Process Virtualization. DSN’16.
[18] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song.
Code-pointer integrity. OSDI’14.
[19] M. Lipp, D. Gruss, R. Spreitzer, C. Maurice, and S. Mangard. Armageddon:
Cache attacks on mobile devices. SEC’16.
[20] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee. ASLR-Guard:
Stopping Address Space Leakage for Code Reuse Attacks. CCS’15.
[21] C. Maurice, N. L. Scouarnec, C. Neumann, O. Heen, and A. Francillon.
Reverse Engineering Intel Last-Level Cache Complex Addressing Using
Performance Counters. RAID’15.
[22] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis. The Spy
in the Sandbox: Practical Cache Attacks in JavaScript and their Implications.
CCS’15.
[23] P. Pessl, D. Gruss, C. Maurice, M. Schwarz, and S. Mangard. DRAMA:
Exploiting DRAM Addressing for Cross-CPU Attacks. SEC’16.
[24] K. Razavi, B. Gras, E. Bosman, B. Preneel,C. Giuffrida, and H. Bos. Flip
Feng Shui: Hammering a Needle in the Software Stack. SEC’16.
[25] M. Seaborn. Exploiting the DRAM Rowhammer Bug to Gain Kernel Privileges.
In Black Hat USA, BH-US’15.
[26] V. van der Veen, Y. Fratantonio, M. Lindorfer, D. Gruss, C. Maurice, G.
Vigna, H. Bos, K. Razavi, and C. Giuffrida. Drammer: Deterministic Rowhammer
Attacks on Mobile Platforms. CCS’16.
[27] Y. Yarom and K. Falkner. FLUSH+RELOAD: A High Resolution, Low Noise, L3
Cache Side-channel Attack. SEC’14.
[28] X. Zhang, Y. Xiao, and Y. Zhang. Return-Oriented Flush-Reload Side
Channels on ARM and Their Implications for Android Devices. CCS’16.