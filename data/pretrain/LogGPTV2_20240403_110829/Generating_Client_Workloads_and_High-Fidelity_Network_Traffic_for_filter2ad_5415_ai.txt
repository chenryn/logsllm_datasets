Memory Pressure
Memory pressure can indirectly cause CPU pressure. You can overcommit memory on an ESX host—that is, 
configure the virtual machines on that host with a total of more memory than physically exists on the 
host—and ESX is still able to run all the virtual machines at once. ESX uses several techniques to conserve and 
share memory so that virtual machines can continue to run with good performance in the presence of memory 
overcommitment, as long as the overcommitment factor is not too high. In certain cases, memory 
overcommitment that is too high or not configured properly can cause timekeeping problems.
The details of ESX memory management are beyond the scope of this paper, but this following points provide 
a quick overview:
Copyright © 2008 VMware, Inc. All rights reserved.
21
Timekeeping in VMware Virtual Machines
(cid:132) When the ESX VMkernel starts a virtual machine, it does not immediately give the virtual machine 
(cid:132)
(cid:132)
enough real physical memory to back all of the virtual physical memory that it was configured to have. 
Instead, the VMkernel allocates memory as needed. 
The VMkernel uses page sharing. It continually scans physical memory to find cases where multiple 
memory pages have the same content and collapses them down into a single shared, copy‐on‐write page.
The VMkernel uses ballooning. If a guest operating system has the VMware Tools vmmemsched (or 
“balloon”) driver installed, whenever the VMkernel needs to take physical memory away from the virtual 
machine, it does so by asking the guest operating system to use its own internal paging mechanisms to 
swap out memory. 
(cid:132) As a last resort, when no other mechanisms have reclaimed enough memory, the VMkernel chooses 
virtual machine pages and forcibly reclaims them by copying them to a swap file at the VMkernel level.
A timekeeping issue can arise when pages have been swapped out by the VMkernel. Because the VMkernel 
has no insight into what the guest operating system is doing with its pages, it can sometimes swap out a page 
that the guest operating system will soon need. The next time the guest operating system references that page, 
the VMkernel has to swap the page back into RAM from disk. During the swap‐in, the guest operating system 
stops completely. It cannot run even to handle virtual interrupts, such as timer interrupts. (In contrast, when 
a guest operating system swaps out its own memory using ballooning, it usually can avoid swapping out 
pages that will be needed again soon, and the guest operating system continues to run and process virtual 
timer interrupts while it is swapping memory back in.) As a result, the guest operating system clock can fall 
behind while pages are being read in from the VMkernel swap file. Swap‐ins from disk typically take around 
10ms per page, and sometimes many pages must be swapped in back to back, so the guest operating system 
clock can fall behind by many seconds during a burst of swapping. The clock does typically catch up fully once 
the guest operating system’s working set has been swapped in, however.
You can avoid this memory pressure issue in either of two ways:
(cid:132)
(cid:132)
Install VMware Tools in your virtual machines and ensure that memory ballooning is enabled. In most 
cases, ballooning is able to reclaim enough memory that swapping at the VMkernel level is not required. 
This is the preferred approach.
Ensure that your virtual machines are backed by enough physical memory to avoid swapping. You can 
avoid the need for swapping by keeping the memory overcommit factor on your ESX hosts low or 
avoiding overcommit entirely. Or you can prevent swapping for a specific virtual machine by setting its 
memory reservation to 100 percent of its configured memory size.
Troubleshooting
This section discusses some troubleshooting techniques. For additional information, search for “time” or 
“clock” in the VMware knowledge base (http://kb.vmware.com).
Best Practices
The first step in dealing with timekeeping issues is preventive: check that your host and virtual machine are 
configured properly. To summarize the main points:
(cid:132)
(cid:132)
If possible, use the most recent release of your VMware product, or at least the most recent minor release 
of the major version you are using. We are always working on improving timekeeping performance and 
fixing problems.
If possible, use the most recent supported minor version of the guest operating system in each of your 
virtual machines. Updates and vendor patches sometimes fix timekeeping issues, especially in the case of 
Linux guest operating systems, in which the timekeeping system has been undergoing rapid evolution. 
Check the VMware knowledge base for articles about specific configuration options or workarounds for 
guest operating system bugs that may be needed for the operating system version each of your virtual 
machines is running. In particular, for Linux guests, see the best practices guide in knowledge base article 
1006427 (http://kb.vmware.com/kb/1006427).
Copyright © 2008 VMware, Inc. All rights reserved.
22
Timekeeping in VMware Virtual Machines
(cid:132) Check that your host system is configured for the correct time and time zone. Check that it is running 
suitable clock synchronization software, as described in “Host Clock Synchronization” on page 18.
(cid:132) Check that your virtual machines are set to the correct time zone. Also, for Linux guest operating systems, 
it is best to set the option in your Linux distribution to keep the so‐called “hardware” clock (that is, the 
virtual CMOS TOD clock) in UTC, not local time. This avoids any confusion when your local time changes 
between standard and daylight saving time (in England, “summer time”).
(cid:132) Check that you have appropriate clock synchronization software installed and configured in your virtual 
machines, as described in “Synchronizing Virtual Machines and Hosts with Real Time” on page 14.
(cid:132) Check that VMware Tools is installed in your virtual machines. Even if you are not using VMware Tools 
periodic clock synchronization, the one‐time clock corrections discussed in “Using VMware Tools Clock 
Synchronization” on page 15 are important. In addition, the VMware Tools package includes specialized 
device drivers that improve overall performance of virtual machines, reducing CPU load and thus 
indirectly helping timekeeping performance as well.
Gathering Information
If you continue to have a timekeeping problem after checking the above best practices, the next step is to 
observe your system behavior carefully and gather detailed information about the problem. Many different 
problems can have similar symptoms or can appear similar if not observed or described clearly. Some specific 
things you can do are covered in the following sections.
Observe Symptoms Carefully
Note exactly how the virtual machine time differs from real time, under what circumstances the timekeeping 
problem appears, and how severe the problem is. Does the virtual machine show time that is ahead of real time 
or behind? Does the error remain constant, or does it increase or otherwise vary over time? How fast does the 
error change? Can you correlate occurrences of the problem with other activities that create load in the virtual 
machine or on the host?
Test Operating System Clock against CMOS TOD Clock
If you are running a Linux guest operating system, run the following script in the guest. 
NOTE   You may have to run the script as root, because /sbin/hwclock requires root privilege in some Linux 
distributions. When you run the script, capture the output to a file and include the output if you file a support 
request with VMware.
cat /etc/issue
uname -a
date
/sbin/hwclock
date
cat /proc/interrupts
sleep 10
cat /proc/interrupts
date
/sbin/hwclock
date
Using the output from the script, you can see which timer interrupts are in use and the frequency with which 
interrupts are generated. Check how much the values shown in /proc/interrupts change during the 10 
second sleep measured by the guest. The timer interrupts most commonly used by Linux are 0 or “timer” (the 
PIT) and LOC (the local APIC timer).
This script also provides a rough way to observe any large difference in running rate between the virtual 
machine and host clocks. The date command returns the guest operating system clock time. The 
/sbin/hwclock command returns the CMOS TOD clock time, which VMware virtualizes at a fixed offset 
from the host’s clock.
Copyright © 2008 VMware, Inc. All rights reserved.
23
Timekeeping in VMware Virtual Machines
Turn on Additional Logging
You can turn on additional logging of timekeeping statistics in a virtual machine by adding the following lines 
to its .vmx configuration file and restarting the virtual machine:
timeTracker.periodicStats = TRUE
timeTracker.statInterval = 5
The second line specifies the sampling interval (in seconds). The default interval is 60 seconds. If you are 
planning to file a support request with VMware, please enable these settings, do whatever is necessary to 
reproduce the problem, and run the affected virtual machine in its problematic state for about 30 minutes. 
Include the resulting vmware.log file with your report.
The following listing shows the time tracker statistics output from a typical vmware.log file from a recent 
VMware product. The format of this output is subject to change.
Jul 30 13:16:11.044: vmx| TimeTrackerStats behind by 2246 us; running at 101%; mode 0; catchup 
limited 4855 us; 0 stops, 0 giveups, 0 numLargeBumps, maxLargeBump: 0 cycles
Jul 30 13:16:11.045: vmx| TimeTrackerStats CMOS-P 320 ints, 64.00/sec, 64.01 avg, 64.00 req; 5462 
tot, 5461 req; 1808 loprg, 70756 rtry; behind -15606 us
Jul 30 13:16:11.045: vmx| TimeTrackerStats timer0 91 ints, 18.20/sec, 18.21 avg, 18.21 req; 1645 