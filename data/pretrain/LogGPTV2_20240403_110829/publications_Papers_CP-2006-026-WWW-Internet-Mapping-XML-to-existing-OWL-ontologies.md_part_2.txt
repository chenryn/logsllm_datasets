### PI:EMAIL and Property Management

The `PI:EMAIL` identifiers are distinct, with one of the emails being discarded due to duplication. For each generated individual, it is essential to:

1. Perform a union of all properties related to the individual.
2. Remove any duplicate properties.
3. Create the remaining properties.

This process must be applied to both datatype and object properties.

#### OWL Recommendations

OWL supports various restrictions, including maximal and minimal cardinality restrictions on properties over classes. Maximal cardinality restrictions can be easily supported by ensuring that the maximum number of allowed properties is not exceeded, discarding any excess properties. However, complete support for minimal cardinality restrictions is impossible, as it is not always feasible to guarantee that these restrictions are satisfied. Two distinct cases need to be handled:

1. **Unmapped Properties**: When properties with minimal cardinality restrictions are not mapped, warnings and comments should be generated in both the transformation rules and the OWL instances document.
2. **Insufficient Instances**: If the XML instances document does not contain enough instances to satisfy the minimal cardinality restriction, comments should be generated in the OWL instances document, as this case can only be evaluated at runtime.

### Implemented Framework: JXML2OWL

JXML2OWL is a framework consisting of two sub-projects: the JXML2OWL API and the JXML2OWL Mapper.

- **JXML2OWL API**: A generic and reusable open-source library for mapping XML schemas to OWL ontologies on the Java platform.
- **JXML2OWL Mapper**: An application with a graphical user interface (GUI) developed in Java Swing, which uses the API to facilitate the mapping process.

JXML2OWL supports manual mappings from XML, XSD, or DTD documents to an OWL ontology, adhering to the notation presented in Table 1. It supports various types of mappings, including many-to-many. Currently, conditional mappings through XPath predicates are not implemented within the framework.

Based on the mapping performed, JXML2OWL generates mapping rules wrapped in an XSL document, allowing the automatic transformation of any XML data that validates against the mapped schema into instances of the mapped ontology. The algorithm defined by the generated XSL document satisfies all aspects discussed in section 2.2.

### Mapping Process with JXML2OWL

The mapping process with JXML2OWL involves several steps:

1. **Project Creation and File Loading**:
   - Create a new mapping project.
   - Load the XML Schema-related file (XSD or DTD) and the OWL ontology.
   - If an XML schema is not available, load an XML document, and JXML2OWL will extract a possible schema.

2. **Class Mapping**:
   - Create class mappings between elements of the loaded XML schema and classes of the ontology.

3. **Property Mapping**:
   - Relate the created class mappings to create object property mappings.
   - Relate them with elements of the XML schema to create datatype property mappings.

4. **Export Transformation Rules**:
   - Export the transformation rules, generated according to the mappings, as an XSL document.
   - Use this XSL document to transform any XML document that validates against the mapped XML schema into individuals of the mapped OWL ontology.

Both the API and the Mapper support all these steps.

### Mapping Scenario

JXML2OWL was developed during the year 2005/2006 and has been successfully employed in the SEED (SEmantic E-tourism Dynamic packaging) project, which aims to integrate disparate and heterogeneous e-tourism data sources into a unique knowledge base.

Consider a use case where an XML Schema is mapped to an existing ontology. In this scenario, there is no direct correspondence between the mapped XML elements and the ontology. This complex scenario demonstrates the flexibility of many-to-many mappings. All mappings are performed using the notation defined in Table 1. The XSL Transformation is then performed to generate individuals of the ontology.

#### Mapped Ontology

The mapped ontology includes several classes, each with object properties represented by links and datatype properties represented in plain text within the class container.

#### XML Instances Document

```xml
<airplaneTrips>
  <airplaneTrip>
    <date>12-06-2006</date>
    <startpoint country="Portugal">Lisbon</startpoint>
    <endpoint>Funchal</endpoint>
  </airplaneTrip>
  <airplaneTrip>
    <date>25-06-2006</date>
    <startpoint>Funchal</startpoint>
    <endpoint country="Portugal">Lisbon</endpoint>
  </airplaneTrip>
</airplaneTrips>
```

#### Created Mappings

- **Class Mappings**:
  - `cm1 = (tourism:AirplaneTrip, /airplaneTrips/airplaneTrip)`
  - `cm2 = (tourism:City, /airplaneTrips/airplaneTrip/startpoint)`
  - `cm3 = (tourism:City, /airplaneTrips/airplaneTrip/endpoint)`
  - `cm4 = (tourism:Location, /airplaneTrips/airplaneTrip/startpoint)`
  - `cm5 = (tourism:Location, /airplaneTrips/airplaneTrip/endpoint)`
  - `cm6 = (tourism:Country, /airplaneTrips/airplaneTrip/startpoint/@country)`
  - `cm7 = (tourism:Country, /airplaneTrips/airplaneTrip/endpoint/@country)`

- **Property Mappings**:
  - `pm1 = (tourism:date, cm1, /airplaneTrips/airplaneTrip/date)`
  - `pm2 = (tourism:startpoint, cm1, cm4)`
  - `pm3 = (tourism:endpoint, cm1, cm5)`
  - `pm4 = (tourism:city, cm4, cm2)`
  - `pm5 = (tourism:city, cm5, cm3)`
  - `pm6 = (tourism:cities, cm6, cm2)`
  - `pm7 = (tourism:cities, cm7, cm3)`
  - `pm8 = (tourism:belongsTo, cm2, cm6)`
  - `pm9 = (tourism:belongsTo, cm3, cm7)`
  - `pm10 = (tourism:country, cm4, cm6)`
  - `pm11 = (tourism:country, cm5, cm7)`
  - `pm12 = (tourism:city_name, cm2, /airplaneTrips/airplaneTrip/startpoint)`
  - `pm13 = (tourism:city_name, cm2, /airplaneTrips/airplaneTrip/endpoint)`
  - `pm14 = (tourism:country_name, cm6, /airplaneTrips/airplaneTrip/startpoint/@country)`
  - `pm15 = (tourism:country_name, cm7, /airplaneTrips/airplaneTrip/endpoint/@country)`

### Mapper State

Figure 3 shows the state of the JXML2OWL Mapper for the given scenario and mappings. On the left side, the XML schema is represented, while on the right side, the OWL classes defined by the ontology are shown. In-between, the mapping zone allows drag-and-drop creation of mappings. By selecting a created mapping, users can create datatype and object property mappings. Below the mapping zone, the XML node used as the ID for the selected class mapping is displayed, along with all the datatype and object property mappings related to the selected class mapping.

### Transformation Output

Running the XSLT Transformation over the XML instances document produces an OWL output document containing all the generated individuals and their properties. The OWL instances document imports the mapped ontology, binding the prefix `tourism`. The individuals are generated, satisfying all the aspects discussed in section 2.2, such as discarding duplicate instances and properties.

#### Example Output

```owl
<owl:NamedIndividual rdf:about="http://example.org/individuals/AirplaneTrip_1">
  <tourism:date>2006-06-12</tourism:date>
  <tourism:startpoint rdf:resource="http://example.org/individuals/City_Lisbon"/>
  <tourism:endpoint rdf:resource="http://example.org/individuals/City_Funchal"/>
  <tourism:belongsTo rdf:resource="http://example.org/individuals/Country_Portugal"/>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="http://example.org/individuals/City_Lisbon">
  <tourism:city_name>Lisbon</tourism:city_name>
  <tourism:country rdf:resource="http://example.org/individuals/Country_Portugal"/>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="http://example.org/individuals/City_Funchal">
  <tourism:city_name>Funchal</tourism:city_name>
</owl:NamedIndividual>

<owl:NamedIndividual rdf:about="http://example.org/individuals/Country_Portugal">
  <tourism:country_name>Portugal</tourism:country_name>
</owl:NamedIndividual>
```

### Conclusion

We have presented an approach and implemented the JXML2OWL framework to manually map XML Schema documents to existing OWL ontologies and automatically transform XML instances documents into individuals of the mapped ontology. This framework is crucial for organizations planning to transition from a syntactic representation of data using XML to a semantic one using OWL.

The conducted scenario demonstrates the power of the defined notation and transformation algorithm, which are particularly suited for the expressiveness of the OWL language. The transformation of the syntactic XML document into individuals adds significant semantics, primarily because XML is mapped to an existing, rich ontology.

We believe the presented framework is appropriate for integrating any XML data into semantic information systems based on OWL ontologies, especially when conditional mappings, which will be the focus of our subsequent work, are not required. JXML2OWL has been successfully employed to integrate disparate e-tourism data sources in XML format as individuals of an e-tourism OWL ontology and is available for download at [http://jxml2owl.projects.semwebcentral.org](http://jxml2owl.projects.semwebcentral.org). We hope the research done to bridge the gap between XML and OWL, as well as the implemented prototype, will demonstrate the need for semantic mapping tools and stimulate software companies, particularly those developing mapping applications, to develop professional mapping tools supporting mappings and instances transformation to existing OWL ontologies.

### Acknowledgement

This work was funded by grants from the FCT (Fundação para a Ciência e a Tecnologia) and carried out in cooperation with Expedita.

### References

[1] Bussler, C., 2003. B2B Integration, Concepts and Architecture. Springer, Germany.
[2] Hawke, S., 2001. XML with Relational Semantics: Bridging the Gap to RDF and the Semantic Web. W3C, [http://www.w3.org/2001/05/xmlrs/](http://www.w3.org/2001/05/xmlrs/).
[3] Shabo, A. et al, 2006. Revolutionary impact of XML on biomedical information interoperability. IBM Systems Journal, Vol. 45, No. 2, pp. 361-372.
[4] EBizQ, 2005. Semantic Integration: A New Approach to an Old Problem. EBizQ.
[5] Alexiev, V. et al, 2005. Information Integration with Ontologies. John Wiley & Sons, New Jersey, USA.
[6] Gruber, T., 1993. A Translation Approach to Portable Ontology Specifications. Knowledge Acquisition, Vol. 5, No. 2, pp. 199-220.
[7] Bechhofer, S. et al, 2004. Web Ontology Language (OWL) Reference version 1.0. W3C, [http://www.w3.org/TR/owl-ref/](http://www.w3.org/TR/owl-ref/).
[8] Ferdinand, M. et al, 2004. Lifting XML Schema to OWL. Web Engineering - 4th International Conference, ICWE, Munich, Germany, pp. 354-358.
[9] Garcia, R. et al, 2006. Ontological Infrastructure for a Semantic Newspaper. Semantic Web Annotations for Multimedia Workshop, SWAMM’06, Edinburgh, UK.
[10] Bohring, H., Auer, S., 2005. Mapping XML to OWL Ontologies. Marktplatz Internet: Von e-Learning bis e-Payment. Leipziger Informatik-Tage (LIT2005), Leipzig, Germany, pp. 147-156.
[11] Aumueller, D. et al. Schema and Ontology Matching with COMA++. Proceedings of the 2005 ACM SIGMOD international conference on Management of data. Baltimore, USA, pp. 906-908.
[12] Burners-Lee et al, 1993. Naming and Addressing: URIs, URLs, .... W3C, [http://www.w3.org/Addressing/](http://www.w3.org/Addressing/).
[13] Berglund, A. et al, 1999. XML Path Language (XPath) Version 1.0. W3C, [http://www.w3.org/TR/xpath](http://www.w3.org/TR/xpath).
[14] Bray, T. et al, 2006. Namespaces in XML 1.0 (Second Edition). W3C, [http://www.w3.org/TR/REC-xml-names/#NT-NCName](http://www.w3.org/TR/REC-xml-names/#NT-NCName).