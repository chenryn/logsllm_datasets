PI:EMAIL because they are distinct. One of the PI:EMAIL emails was discarded
because it is a duplicate one. We can state that for each generated individual, it is necessary to perform the
union of all the properties related to this individual, to remove the duplicates and finally to create the
remaining properties. This process must be done to both datatype and object properties.
OWL recommendation also supports the definition of several restrictions such as maximal and minimal
cardinality restrictions of properties over classes. Maximal cardinality restrictions can easily be supported
since it is just a matter of ensuring that the maximum number of allowed properties is not exceeded,
discarding the remaining ones. A complete support of minimal cardinality restriction is impossible, that is, it
is impossible to guarantee that this kind of restrictions is always satisfied. However, there are two distinct
cases that must be supported. For each case, appropriate warnings and comments need to be generated. The
first case happens when properties on which minimal cardinality restrictions exist are not mapped. Warnings
and comments are generated both on the transformation rules and on the OWL instances document. The
second one happens when XML instances document does not contain enough instances to satisfy the minimal
cardinality restriction. Since this case can only be evaluated at run-time, comments can only be generated in
the OWL instances document.
3. IMPLEMENTED FRAMEWORK: JXML2OWL
JXML2OWL is a framework divided in two sub projects: JXML2OWL API and JXML2OWL Mapper. The
API is a generic and reusable open source library for mapping XML schemas to OWL ontologies for the Java
platform while the Mapper is an application with a graphical user interface (GUI) developed in Java Swing
that uses the API and eases the mapping process. JXML2OWL supports manual mappings from XML, XSD
or DTD documents to an OWL ontology adhering to the notation presented in Table 1, thus supporting all the
kinds of mappings such as many-to-many. Currently, conditional mappings through XPath predicates are not
implemented within the framework. According to the mapping performed, JXML2OWL generates mapping
rules wrapped in an XSL document that allows the automatic transformation of any XML data, that is, any
XML document validating against the mapped schema, into instances of the mapped ontology. Figure 1
represents such process. The algorithm defined by the generated XSL document satisfies all the aspect
discussed in section 2.2.
Figure 1. JXML2OWL supports mappings and instances transformation
With JXML2OWL, the mapping process requires several steps. The first step consists in creating a new
mapping project and loading both the XML Schema related file (XSD or DTD) and the OWL ontology. If an
XML schema in not available, it is possible to load an XML document. In this case, JXML2OWL extracts a
possible schema. In the second step, the user creates class mapping between elements of the loaded XML
schema and classes of the ontology. Once these mappings are created, it is possible to relate them to each
other to create object property mappings, or to relate them with elements of the XML schema to create
datatype property mappings. Finally, in the last step, it is possible to export the transformation rules,
generated according to the mapping performed, as an XSL document. With this XSL document it is possible
to transform any XML document which validates against the mapped XML schema into individuals of the
mapped OWL ontology. Obviously, both the API and the Mapper support all these steps.
4. MAPPING SCENARIO
JXML2OWL was developed during the year 2005/2006. It has been successfully employed in the context of
a major project called SEED (SEmantic E-tourism Dynamic packaging - http://seed.expedita.com.pt) whose
purpose is to integrate disparate and heterogeneous e-tourism data sources into a unique knowledge base.
Let’s consider a use case where an XML Schema is mapped to an existent ontology. One should note that in
this scenario there is not a direct correspondence between the mapped XML elements and the ontology. This
short but rather complex scenario was purposely chosen to enact how it is possible to play with all the
possible combination offered with many-to-many mappings. All the mappings are performed using the
notation defined in Table 1. According to the mappings, the XSL Transformation is performed to generate to
individuals of the ontology. Figure 2 graphically represents the mapped ontology with several classes. Each
class has several object properties represented by links in Figure 2 and datatype properties represented in
plain text within the class container.
Figure 2. Mapped Ontology
This is an XML instances document of the mapped schema:
12-06-2006
Lisbon
Funchal
25-06-2006
Funchal
Lisbon
And these are the created mappings according to the notation presented in Table 1:
• cm1 = (tourism:AirplaneTrip, /airplaneTrips/airplaneTrip)
• cm2 = (tourism:City, /airplaneTrips/airplaneTrip/startpoint)
• cm3 = (tourism:City, /airplaneTrips/airplaneTrip/endpoint)
• cm4 = (tourism:Location, /airplaneTrips/airplaneTrip/startpoint)
• cm5 = (tourism:Location, /airplaneTrips/airplaneTrip/endpoint)
• cm6 = (tourism:Country, /airplaneTrips/airplaneTrip/startpoint/@country)
• cm7 = (tourism:Country, /airplaneTrips/airplaneTrip/endpoint/@country)
• pm1 = (tourism:date, cm1, /airplaneTrips/airplaneTrip/date)
• pm2 = (tourism:startpoint, cm1, cm4)
• pm3 = (tourism:endpoint, cm1, cm5)
• pm4 = (tourism:city, cm4, cm2)
• pm5 = (tourism:city, cm5, cm3)
• pm6 = (tourism:cities, cm6, cm2)
• pm7 = (tourism:cities, cm7, cm3)
• pm8 = (tourism:belongsTo, cm2, cm6)
• pm9 = (tourism:belongsTo, cm3, cm7)
• pm10= (tourism:country, cm4, cm6)
• pm11= (tourism:country, cm5, cm7)
• pm12= (tourism:city_name, cm2, /airplaneTrips/airplaneTrip/startpoint)
• pm13= (tourism:city_name, cm2, /airplaneTrips/airplaneTrip/endpoint)
• pm14= (tourism:country_name, cm6, /airplaneTrips/airplaneTrip/
/startpoint/@country)
• pm15= (tourism:country_name, cm7, /airplaneTrips/airplaneTrip/
/endpoint/@country)
Figure 3 shows the state of the JXML2OWL Mapper for the given scenario and mappings. On the left
side, the XML schema is represented, while on the right side the OWL classes defined by the ontology are
shown. In-between we can see the mapping zone. It is possible to drag-and-drop elements from the left to the
right (and vice-versa) to create mappings. By selecting a created mapping, it is possible to create datatype
and object property mappings. Under the mapping zone, the XML node used as ID for the select class
mapping is displayed as well as all the datatype and object property mappings created. and related to the
selected class mapping.
Figure 3. Mapper state with some mappings
Running the XSLT Transformation over the XML instances document, produces an OWL output
document containing all the generated individuals and their properties. The OWL instances document
imports the mapped ontology to which the prefix tourism is bound. The individuals are generated
satisfying all the aspects discussed in section 2.2. For instance, duplicate instances and properties were
discarded.
2006-06-12
2006-06-25
Lisbon
Funchal
Portugal
The produced OWL instances document can obviously be loaded in any OWL editor such as Protégé-OWL.
5. CONCLUSION
We presented an approach and implemented the JXML2OWL framework to manually map XML Schema
documents to existing OWL ontologies and automatically transform XML instances documents into
individuals of the mapped ontology. Such framework is crucial for organizations that plan to move from a
syntactic representation of data using XML to a semantic one using OWL.
The conducted scenario was deliberately chosen to enact the power of the defined notation and
transformation algorithm, which are particularly suited for the expressiveness of OWL language. Examining
the created individuals, one can see how the syntactic XML document gets a lot of semantics when
transformed into individuals. This is mainly due to the fact that XML is mapped to an existent ontology
which is much richer than the ontologies generated by other tools [8, 9, 10] which capture the implicit
semantics available in the structure of XML documents.
We believe the presented framework is appropriate to integrate any XML data into semantic information
systems based on OWL ontologies when conditional mappings, which will be the focus of our subsequent
work, are not required. JXML2OWL has been successfully employed to integrate disparate e-tourism data
sources in XML format as individuals of an e-tourism OWL ontology and is available for download at
http://jxml2owl.projects.semwebcentral.org. We hope the research done to bridge the gap between XML and
OWL as well as the implemented prototype demonstrated the need for semantic mapping tools and will
stimulate software companies, mainly the ones developing mapping applications, to develop professionals
mapping tools supporting mappings and instances transformation to existing OWL ontologies.
ACKNOWLEDGEMENT
This work was funded by grants from the FCT (Fundação para a Ciência e a Tecnologia) and carried out in
cooperation with Expedita.
REFERENCES
[1] Bussler , C., 2003. B2B Integration, Concepts and Architecture. Springer, Germany.
[2] Hawke, S., 2001. XML with Relational Semantics: Bridging the Gap to RDF and the Semantic Web. W3C,
http://www.w3.org/2001/05/xmlrs/.
[3] Shabo, A. et al, 2006. Revolutionary impact of XML on biomedical information interoperability. IBM Systems
Journal, Vol. 45, No. 2, pp. 361-372.
[4] EBizQ, 2005. Semantic Integration: A New Approach to an Old Problem. EBizQ.
[5] Alexiev, V. et al, 2005. Information Integration with Ontologies. John Wiley & Sons, New Jersey, USA.
[6] Gruber, T., 1993. A Translation Approach to Portable Ontology Specifications. Knowledge Acquisition, Vol. 5, No. 2,
pp. 199-220.
[7] Bechhofer, S. et al, 2004. Web Ontology Language (OWL) Reference version 1.0. W3C, http://www.w3.org/TR/owl-
ref/.
[8] Ferdinand, M. et al, 2004. Lifting XML Schema to OWL. Web Engineering - 4th International Conference, ICWE,
Munich, Germany, pp. 354-358.
[9] Garcia, R. et al, 2006. Ontological Infrastructure for a Semantic Newspaper. Semantic Web Annotations for
Multimedia Workshop, SWAMM’06, Edinburghm, UK.
[10] Bohring, H., Auer, S., 2005. Mapping XML to OWL Ontologies. Marktplatz Internet: Von e-Learning bis e-
Payment. Leipziger Informatik-Tage (LIT2005), Leipzig, Germany, pp.147-156.
[11] Aumueller, D et al. Schema and Ontology Matching with COMA++. Proceedings of the 2005 ACM SIGMOD
international conference on Management of data. Baltimore, USA, pp. 906-908.
[12] Burners-Lee et al, 1993. Naming and Addressing: URIs, URLs, .... W3C, http://www.w3.org/Addressing/.
[13] Berglund, A. et al, 1999. XML Path Language (XPath) Version 1.0. W3C, http://www.w3.org/TR/xpath.
[14] Bray, T. et al, 2006. Namespaces in XML 1.0 (Second Edition). W3C, http://www.w3.org/TR/REC-xml-
names/#NT-NCName.