cation of a security sensitive method. Unfortunately, AppContext is
only usable on apps that are smaller than 5 MB.
218ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
J. Allen et. al
Dataset
2010-2012
2013-2015
2016-2018
2010-2018
Runtime (s) Callgraph Nodes Callgraph Edges
34.4
46.3
55.8
49.4
4,728
5,621
5,921
5,584
14,627
17,042
18,095
16,989
Table 8: The performance metrics of PIKADROID’s static analysis in
terms of average runtime, callgraph nodes, and callgraph edges for the
2010-2012, 2013-2015, 2016-2018, and 2010-2018 datasets.
6.4 Classification Models
In order to verify the effectiveness of PIKADROID’s lightweight
contextual approach independent of the effect from the classification,
we conduct a set of experiments using different machine learning
classifiers to determine whether the high performance seen in the
previous evaluations is a result of a particular type of model or the
features themselves. Specifically, we run PIKADROID using K Near-
est Neighbors (KNN) with 3 and 5 neighbors as well as a Random
Forest (RF) [29] and a Multi-Layered Perceptron (MLP) [42]. For
the RF, we have 200 estimator trees and for the MLP we have a
tanh activation with adam solver and one hidden layer with 100
neurons. Our results, in terms of f-score, are shown in Figure 4. All
of the models we test achieve a f-score of 93% or higher on all of the
datasets. From these results, we conclude that the high performance
of PIKADROID is not simply a result of using a particular classifier,
but instead from the lightweight, contextual features extracted from
each application.
6.5 Performance
We perform the evaluation experiments for PIKADROID on a server
with 64 Intel Xeon E7-4820 CPUs running at 2.00GHz and 128 GB
of physical memory. For the static analysis module, we configure
PIKADROID to build at most 10 callgraphs in parallel. In Table 8, we
show the average runtime for PIKADROID’s static analysis module.
On average, PIKADROID requires less than one minute to analyze
each application and 91% of the time analyzing each application is
spent on the callgraph building phase. The reachability analysis takes
the remaining 9% of the time. We observed that applications from the
2016-2018 time period takes 25% more time to analyze compared
to apps from the 2010-2012 period. However, since the runtime
is still under one minute, we believe PIKADROID is scalable to
analyze large-scale markets. The training of PIKADROID’s learning
module takes less than ten hours. The majority of the performance
is related to parsing the output of the static analysis and can be
significantly optimized. Finally, the classification phase is dependent
on the model, but we found that all models finished in under 3 hours
on our entire, eight-year dataset.
7 RELATED WORK
Android Malware Detection. There has been many proposed solu-
tions to Android malware analysis that rely on static [2, 3, 5, 7, 10,
15, 16, 21, 22, 31, 52, 52, 53, 55] or dynamic [11, 12, 30] analysis.
Drebin [5] uses lightweight static analysis to provide a on-device
approach to malware detection. DroidAPIMiner [2] uses frequency
analysis to identify critical sensitive APIs that are commonly used
by malicious apps. Unfortunately, [2] suffers from feature explosion
because it cannot generalize its feature space and achieve its goal of
being an on-device detection system. DroidAPIMiner uses frequency
analysis to identify critical sensitive behaviors, then uses the set of
critical APIs for classification. However, frequency based systems
that do not leverage context incur higher false-positive and lower
detection rates than PIKADROID. Finally, one promising approach to
Android malware detection is MaMaDroid [31]. MaMaDroid lever-
ages sequences of abstracted method calls to create a probabilistic
representation of program behavior. This approach creates a more
general model that is more robust to unknown variants of malware
and new malware families. One limitation of this approach is that it
can suffer from context loss, due to the natural loss of information
that occurs when abstracting the program semantics into a more
coarse-grained representation.
Context-based Systems. There has been many systems for iden-
tifying contextual dependencies for Android malware using static
analysis [17, 18, 34, 37, 51–53]. AppContext [52] extracts con-
textual factors and activation dependencies to identify malicious
behaviors. DroidSift [53], Apposcopy [17], Astroid [18], and En-
mobile [51] rely on contextual API dependencies to create complex
dependencies that rely on deep-semantics to create robust signatures
for malware. Unfortunately, one limitation of all prior approaches
that PIKADROID does not have is they cannot generalize their feature
space. Otherwise, they would not be able to create the fine-grained
signatures they need in order to achieve their main goal of identify-
ing as many possible unknown variants of known malware. Finally,
Dark Hazard [37] also leverages static analysis to build context lever-
aging constraint-relationships. It uses these relationships to identify
hidden-sensitive operations, which is orthogonal to PIKADROID’s
goals. One limitation of PIKADROID is that it cannot identify heavily
packed code. In order to addresses this, we could leverage dynamic
analysis tools, such as DroidScope [49], DroidUnpack [13], or Cop-
perDroid [44] to dynamically extract contexts. However, we consider
this to be out-of-scope of this work.
8 CONCLUSION
In this work we present an approach to Android malware detec-
tion based on lightweight contextual awareness. We implemented a
lightweight context-based system, PIKADROID, and completed an
extensive evalution, and our evalution shows sizable improvements
of accuracy and scalability over existing approaches.
9 ACKNOWLEDGMENTS
We thank the anonymous reviewers for their helpful and informative
feedback. This research was supported by the ONR under grants
N0001409-1-1042, N00014-15-1-2162 and N00014-17-1-2895, and
by the DARPA Transparent Computing program under contract
DARPA-15-15-TCFP-006. Any opinions, findings, conclusions or
recommendations expressed in this material are those of the authors
and do not necessarily reflect the views of the ONR or DARPA.
REFERENCES
[1] Mamadroid, Oct. 2017. https://bitbucket.org/gianluca_students/mamadroid_code.
[2] AAFER, Y., DU, W., AND YIN, H. Droidapiminer: Mining api-level features for
robust malware detection in android. In 9thInternational Conference on Security
and Privacy in Communication Systems (ICST) (Sydney, Australia, 2013).
[3] ALLEN, J. L. pdroid. Master’s Thesis, University of Tennessee (2016).
[4] ALLIX, K., BISSYANDÉ, T. F., KLEIN, J., AND LE TRAON, Y. Androzoo:
Collecting millions of android apps for the research community. In Proceedings
219Improving Accuracy of Android Malware Detection with Lightweight Contextual Awareness
ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
[26] JORDANEY, R., WANG, Z., PAPINI, D., NOURETDINOV, I., SHARAD, K., AND
CAVALLARO, L. Poster misleading metrics: On evaluating ml for malware with
confidence. In Proceedings of the 37th IEEE Symposium on Security and Privacy
(Oakland) (San Jose, CA, USA, May 2016).
[27] JUNG, J., JEON, C., WOLOTSKY, M., YUN, I., AND KIM, T. Avpass: Automati-
cally bypassing android malware detection system. In Black Hat USA Briefings
(Aug. 2016).
[28] LAFORTUNE, E., ET AL. Proguard.
[29] LIAW, A., WIENER, M., ET AL. Classification and regression by randomforest.
R news 2, 3 (2002), 18–22.
of the 13th International Conference on Mining Software Repositories (MSR)
(Austin, TX, USA, May 2016).
[5] ARP, D., SPREITZENBARTH, M., HUBNER, M., GASCON, H., RIECK, K., AND
SIEMENS, C. Drebin: Effective and explainable detection of android malware in
your pocket. In Proceedings of the 2014 Annual Network and Distributed System
Security Symposium (NDSS) (San Diego, California, USA, Feb. 2014).
[6] AU, K. W. Y., ZHOU, Y. F., HUANG, Z., AND LIE, D. Pscout: analyzing the
android permission specification. In Proceedings of the 19th ACM Conference on
Computer and Communications Security (CCS) (Raleigh, NC, USA, Oct. 2012).
[7] AVDIIENKO, V., KUZNETSOV, K., GORLA, A., ZELLER, A., ARZT, S.,
RASTHOFER, S., AND BODDEN, E. Mining apps for abnormal usage of sen-
sitive data. In Proceedings of the 37th International Conference on Software
Engineering (ICSE) (Florence, Italy, May 2015).
[8] BAXEVANIS, A. D., AND OUELLETTE, B. F. Bioinformatics: a practical guide
to the analysis of genes and proteins, vol. 43. John Wiley & Sons, 2004.
[9] CAO, Y., FRATANTONIO, Y., BIANCHI, A., EGELE, M., KRUEGEL, C., VIGNA,
G., AND CHEN, Y. Edgeminer: Automatically detecting implicit control flow
transitions through the android framework. In Proceedings of the 2015 Annual Net-
work and Distributed System Security Symposium (NDSS) (San Diego, California,
USA, Feb. 2015).
[10] CHEN, K., WANG, P., LEE, Y., WANG, X., ZHANG, N., HUANG, H., ZOU, W.,
AND LIU, P. Finding unknown malice in 10 seconds: Mass vetting for new threats
at the google-play scale. In Proceedings of the 24th USENIX Security Symposium
(Security) (Washington, DC, USA, Aug. 2015).
[11] CHEN, S., XUE, M., TANG, Z., XU, L., AND ZHU, H. Stormdroid: A streamin-
glized machine learning-based system for detecting android malware. In Proceed-
ings of the 11th ACM Symposium on Information, Computer and Communications
Security (ASIACCS) (Xi’an, China, May–June 2016).
[12] DASH, S. K., SUAREZ-TANGIL, G., KHAN, S., TAM, K., AHMADI, M.,
KINDER, J., AND CAVALLARO, L. Droidscribe: Classifying android malware
based on runtime behavior. In Security and Privacy Workshops (SPW), 2016,
(IEEE) (2016).
[13] DUAN, Y., ZHANG, M., BHASKAR, A. V., YIN, H., PAN, X., LI, T., WANG,
X., AND WANG, X. Things you may not know about android (un) packers: A
systematic study based on whole-system emulation. In Proceedings of the 2018
Annual Network and Distributed System Security Symposium (NDSS) (San Diego,
California, USA, Feb. 2018).
[14] ENCK, W., GILBERT, P., HAN, S., TENDULKAR, V., CHUN, B.-G., COX, L. P.,
JUNG, J., MCDANIEL, P., AND SHETH, A. N. Taintdroid: an information-flow
tracking system for realtime privacy monitoring on smartphones. In Proceedings
of the 9th USENIX Symposium on Operating Systems Design and Implementation
(OSDI) (Vancouver, Canada, Oct. 2010).
[15] ENCK, W., ONGTANG, M., AND MCDANIEL, P. On lightweight mobile phone
application certification. In Proceedings of the 16th ACM Conference on Computer
and Communications Security (CCS) (Chicago, IL, USA, Nov. 2009).
[16] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER, D. Android per-
missions demystified. In Proceedings of the 18th ACM Conference on Computer
and Communications Security (CCS) (Chicago, IL, USA, Oct. 2011).
[17] FENG, Y., ANAND, S., DILLIG, I., AND AIKEN, A. Apposcopy: Semantics-
based detection of android malware through static analysis. In Proceedings of the
19th European Software Engineering Conference (ESEC) / 23rd ACM SIGSOFT
Symposium on the Foundations of Software Engineering (FSE) (Bergamo, Italy,
Aug. 2015).
[18] FENG, Y., BASTANI, O., MARTINS, R., DILLIG, I., AND ANAND, S. Automati-
cally learning android malware signatures from few samples. In Proceedings of
the 2017 Annual Network and Distributed System Security Symposium (NDSS)
(San Diego, California, USA, Feb. 2017).
[19] FINK, S., AND DOLBY, J. Wala–the tj watson libraries for analysis, 2012.
[20] FRITZ, C., ARZT, S., RASTHOFER, S., BODDEN, E., BARTEL, A., KLEIN, J.,
LE TRAON, Y., OCTEAU, D., AND MCDANIEL, P. Highly precise taint analysis
for android applications. In Proceedings of the 2014 ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI) (Edinburgh, UK,
June 2014).
[21] GORLA, A., TAVECCHIA, I., GROSS, F., AND ZELLER, A. Checking app
In Proceedings of the 36th International
behavior against app descriptions.
Conference on Software Engineering (ICSE) (Hyderabad, India, May–June 2014).
[22] GRACE, M., ZHOU, Y., ZHANG, Q., ZOU, S., AND JIANG, X. Riskranker:
scalable and accurate zero-day android malware detection. In Proceedings of the
10th ACM International Conference on Mobile Computing Systems (MobiSys)
(Low Wood Bay, UK, 2012).
[23] HOERL, A. E., AND KENNARD, R. W. Ridge regression: Biased estimation for
nonorthogonal problems. Technometrics 12, 1 (1970), 55–67.
[24] I/O, G. Google i/o.
[25] JORDANEY, R., SHARAD, K., DASH, S. K., WANG, Z., PAPINI, D., NOURET-
DINOV, I., CAVALLARO, L., AND SPA, E. Transcend: detecting concept drift
in malware classification models. In Proceedings of the 26th USENIX Security
Symposium (Security) (Vancouver, BC, Canada, Aug. 2017).
[30] LINDORFER, M., NEUGSCHWANDTNER, M., AND PLATZER, C. Marvin: Ef-
ficient and comprehensive mobile app classification through static and dynamic
analysis. In Proceedings of the 39th Computer Software and Applications Confer-
ence (COMPSAC) (Taichung, Taiwan, July 2015).
[31] MARICONTI, E., ONWUZURIKE, L., ANDRIOTIS, P., DE CRISTOFARO, E.,
ROSS, G., AND STRINGHINI, G. Mamadroid: Detecting android malware by
building markov chains of behavioral models. In Proceedings of the 2016 An-
nual Network and Distributed System Security Symposium (NDSS) (San Diego,
California, USA, Feb. 2016).
[32] MARTIN, W., HARMAN, M., JIA, Y., SARRO, F., AND ZHANG, Y. The app
sampling problem for app store mining. In Proceedings of the 12th International
Conference on Mining Software Repositories (MSR) (Florence, Italy, May 2015).
[33] MCAFEE LABS, L. Mcafee mobile threat report q1, 2018.
[34] NAN, Y., YANG, Z., WANG, X., ZHANG, Y., ZHU, D., AND YANG, M. Finding
clues for your secrets: Semantics-driven, learning-based privacy discovery in
mobile apps. In Proceedings of the 2018 Annual Network and Distributed System
Security Symposium (NDSS) (San Diego, California, USA, Feb. 2018).
[35] OCTEAU, D., JHA, S., AND MCDANIEL, P. Retargeting android applications
to java bytecode. In Proceedings of the 20th ACM SIGSOFT Symposium on the
Foundations of Software Engineering (FSE) (Cary, NC, USA, Nov. 2012).
[36] OCTEAU, D., MCDANIEL, P., JHA, S., BARTEL, A., BODDEN, E., KLEIN,
J., AND LE TRAON, Y. Effective inter-component communication mapping
in android with epicc: An essential step towards holistic security analysis. In
Proceedings of the 22th USENIX Security Symposium (Security) (Washington, DC,
USA, Aug. 2013).
[37] PAN, X., WANG, X., DUAN, Y., WANG, X., AND YIN, H. Dark hazard: Learning-
based, large-scale discovery of hidden sensitive operations in android apps. In
Proceedings of the 2017 Annual Network and Distributed System Security Sympo-
sium (NDSS) (San Diego, California, USA, Feb. 2017).
[38] PEDREGOSA, F., VAROQUAUX, G., GRAMFORT, A., MICHEL, V., THIRION,
B., GRISEL, O., BLONDEL, M., PRETTENHOFER, P., WEISS, R., DUBOURG,
V., ET AL. Scikit-learn: Machine learning in python. Journal of machine learning
research 12, Oct (2011), 2825–2830.
[39] RASTHOFER, S., ARZT, S., AND BODDEN, E. A machine-learning approach
for classifying and categorizing android sources and sinks. In Proceedings of the
2014 Annual Network and Distributed System Security Symposium (NDSS) (San
Diego, California, USA, Feb. 2014).
[40] RASTOGI, V., CHEN, Y., AND JIANG, X. Droidchameleon: evaluating android
In Proceedings of the 8th ACM
anti-malware against transformation attacks.
Symposium on Information, Computer and Communications Security (ASIACCS)
(Hangzhou, China, May 2013).
[41] ROY, S., DELOACH, J., LI, Y., HERNDON, N., CARAGEA, D., OU, X., RAN-
GANATH, V. P., LI, H., AND GUEVARA, N. Experimental study with real-world
data for android app security analysis using machine learning. In Proceedings
of the 31st Annual Computer Security Applications Conference (ACSAC) (Los
Angeles, California, USA, Dec. 2015).
[42] RUCK, D. W., ROGERS, S. K., KABRISKY, M., OXLEY, M. E., AND SUTER,
B. W. The multilayer perceptron as an approximation to a bayes optimal discrimi-
nant function. IEEE Transactions on Neural Networks 1, 4 (1990), 296–298.
[43] SAIKOA, B. Dexguard.
[44] TAM, K., KHAN, S. J., FATTORI, A., AND CAVALLARO, L. Copperdroid:
Automatic reconstruction of android malware behaviors. In Proceedings of the
22nd ACM Conference on Computer and Communications Security (CCS) (Denver,
Colorado, Oct. 2015).
[45] TOTAL, V. Virustotal-free online virus, malware and url scanner.
[46] WEI, L., LIU, Y., AND CHEUNG, S.-C. Taming android fragmentation: Charac-
terizing and detecting compatibility issues for android apps. In Proceedings of the
31st IEEE/ACM International Conference on Automated Software Engineering
(ASE) (Singapore, Singapore, Sept. 2016).
[47] WINSNIEWSKI, R. Android–apktool: A tool for reverse engineering android apk
files, 2012.
[48] WONG, M. Y., AND LIE, D. Intellidroid: A targeted input generator for the
dynamic analysis of android malware. In Proceedings of the 2016 Annual Network
and Distributed System Security Symposium (NDSS) (San Diego, California, USA,
Feb. 2016).
[49] YAN, L.-K., AND YIN, H. Droidscope: Seamlessly reconstructing the os and
dalvik semantic views for dynamic android malware analysis. In Proceedings
of the 21st USENIX Security Symposium (Security) (Bellevue, WA, USA, Aug.
220ACSAC ’18, December 3-7, 2018, San Juan, PR, USA
J. Allen et. al
2012).
[50] YANG, W., KONG, D., XIE, T., AND GUNTER, C. A. Malware detection in
adversarial settings: Exploiting feature evolutions and confusions in android apps.
In Proceedings of the 33rd Annual Computer Security Applications Conference
(ACSAC) (Orlando, FL, USA, Dec. 2017).
[51] YANG, W., PRASAD, M., AND XIE, T. Enmobile: Entity-based characteriza-
tion and analysis of mobile malware. In Proceedings of the 40th International
Conference on Software Engineering (ICSE) (Gothenburg, Sweden, May 2018).
[52] YANG, W., XIAO, X., ANDOW, B., LI, S., XIE, T., AND ENCK, W. Appcontext:
Differentiating malicious and benign mobile app behaviors using context. In
Proceedings of the 37th International Conference on Software Engineering (ICSE)
(Florence, Italy, May 2015).
[53] ZHANG, M., DUAN, Y., YIN, H., AND ZHAO, Z. Semantics-aware android
malware classification using weighted contextual api dependency graphs.
In
Proceedings of the 21st ACM Conference on Computer and Communications
Security (CCS) (Scottsdale, Arizona, Nov. 2014).
[54] ZHOU, Y., AND JIANG, X. Dissecting android malware: Characterization and
evolution. In Proceedings of the 33rd IEEE Symposium on Security and Privacy
(Oakland) (San Francisco, CA, USA, May 2012).
[55] ZHOU, Y., WANG, Z., ZHOU, W., AND JIANG, X. Hey, you, get off of my market:
detecting malicious apps in official and alternative android markets. In Proceedings
of the 19th Annual Network and Distributed System Security Symposium (NDSS)
(San Diego, California, USA, Feb. 2012).
221