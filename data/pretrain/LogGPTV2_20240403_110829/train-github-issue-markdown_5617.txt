### Issue Description

I am using Django 1.4.3, django-celery 3.0.11, and celery 3.0.16. In my settings configuration, `USE_TZ` is set to `True`, and I am using Redis as the queue manager. After some time of running, the Celery worker restarts repeatedly with the following error:

```
[2013-05-06 04:00:01,586: ERROR/MainProcess] Unrecoverable error: TypeError("can't compare offset-naive and offset-aware datetimes",)
Traceback (most recent call last):
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/celery/worker/__init__.py", line 363, in start
    component.start()
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/celery/worker/consumer.py", line 395, in start
    self.consume_messages()
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/celery/worker/consumer.py", line 480, in consume_messages
    readers[fileno](fileno, event)
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/kombu/transport/redis.py", line 770, in handle_event
    self._callbacks[queue](message)
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/kombu/transport/virtual/__init__.py", line 480, in _callback
    return callback(message)
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/kombu/messaging.py", line 562, in _receive_callback
    return on_m(message) if on_m else self.receive(decoded, message)
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/kombu/messaging.py", line 531, in receive
    [callback(body, message) for callback in callbacks]
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/celery/worker/consumer.py", line 438, in on_task_received
    strategies[name](message, body, message.ack_log_error)
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/celery/worker/strategy.py", line 25, in task_message_handler
    delivery_info=message.delivery_info))
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/celery/worker/consumer.py", line 511, in on_task
    if task.revoked():
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/celery/worker/job.py", line 296, in revoked
    expired = self.maybe_expire()
  File "/home/mediquo/Envs/mediquo/local/lib/python2.7/site-packages/celery/worker/job.py", line 267, in maybe_expire
    if now > self.expires:
TypeError: can't compare offset-naive and offset-aware datetimes
[2013-05-06 04:00:01,589: INFO/MainProcess] Celerybeat: Shutting down...
[2013-05-06 04:00:01,590: WARNING/MainProcess] Restoring 1 unacknowledged message(s).
```

### Analysis

The error message indicates that there is a type mismatch when comparing datetime objects. Specifically, the error occurs because one datetime object is timezone-aware (i.e., it has an associated timezone), while the other is timezone-naive (i.e., it does not have an associated timezone).

This issue is likely due to the `USE_TZ = True` setting in your Django configuration, which makes all datetime objects timezone-aware. However, some part of your code or a library you are using is still producing timezone-naive datetime objects.

### Potential Solutions

1. **Ensure All Datetime Objects Are Timezone-Aware:**
   - Make sure that all datetime objects in your application are timezone-aware. You can use `datetime.now()` with a timezone or `django.utils.timezone.now()` to get a timezone-aware datetime.
   - If you are receiving datetime objects from external sources, convert them to timezone-aware objects before using them.

2. **Update Dependencies:**
   - Ensure that you are using the latest versions of Django, Celery, and other dependencies. This can help avoid known bugs and compatibility issues.

3. **Check Task Definitions:**
   - Review your Celery task definitions and ensure that any datetime objects passed to or returned from tasks are timezone-aware.

4. **Custom Serializer:**
   - If the issue persists, you might need to implement a custom serializer for Celery that ensures all datetime objects are timezone-aware.

### Example Code

Here is an example of how to ensure a datetime object is timezone-aware:

```python
from django.utils import timezone

# Get the current timezone-aware datetime
now = timezone.now()

# Convert a naive datetime to a timezone-aware datetime
naive_datetime = datetime.datetime.now()
aware_datetime = timezone.make_aware(naive_datetime, timezone.get_current_timezone())
```

By ensuring that all datetime objects are timezone-aware, you should be able to resolve the `TypeError` and prevent the Celery worker from restarting.