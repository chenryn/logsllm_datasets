5010, 5011,
etc…
PUPPET
ATTACKER
IDEAL POISONING SCENARIO
TARGET
INTERNET
CACHE
0
PUPPET
ATTACKER
IDEAL POISONING SCENARIO
INTERNET
CACHE
0
TARGET
PUPPET
ATTACKER
IDEAL POISONING SCENARIO
INTERNET
CACHE
0
TARGET
PUPPET
ATTACKER
DNSSEC Adds lots of signature records,
but the authority (NS) and additional
sections are always last
Subdomain Injection, NS Hijacking, NS Blocking
Origin of work:
“Fragmentation Considered Poisonous”, Amir Herzberg and Haya Shulman, Published 2012
POISONOUS FRAGMENTATION
DNSSEC Adds lots of signature records,
but the authority (NS) and additional
records are last
Subdomain Injection, NS Hijacking, NS Blocking
Origin of work:
“Fragmentation Considered Poisonous”, Amir Herzberg and Haya Shulman, Published 2012
POISONOUS FRAGMENTATION
MALICIOUSLY FORCING FRAGMENTATION
TARGET
INTERNET
ATTACKER
IPID = 5002,
5003, 5004, 
5005, 5006, 
5007, 5008, 
5009, 5010, 
5011 5012
64
CACHE
PUPPET
A decreasing number of deployed nameservers/OSs 
should be using sequential and global counters
We can’t re-query things that get cached
With IPv6, the IPID in the fragmentation extension 
header is 32bits, with a cache of 64 fragments:
Realistic average ~34 million iterations
Unrealistic ideal average ~17 million iterations
Origin of work:
“Fragmentation Considered Poisonous”, Amir Herzberg and Haya Shulman, Published 2012
PERTINENT LIMITATIONS
Prior to our engagement with Umbrella (April 2019), 
their implementation used IPv6 whenever possible, 
detected IPv4 fragments, and re-queried over TCP
Workshop presentation at OARC 30 
(Mid-May 2019)…
There has been some notice
PERTINENT LIMITATIONS
Excerpt of slide from:
https://indico.dns-oarc.net/event/31/contributions/692/attachments/660/1115/fujiwara-5.pdf, Given Mid-May 2019
… but the presentation wasn’t us…
PERTINENT LIMITATIONS
WHERE WE’RE GOING
1. Intro
2. Background on DNS
3. Fragmentation Attacks
4. IPID Inference
5. The Attack (agnostic to IPv4 and IPv6)
6. Mitigations
“Counting Packets Sent Between Arbitrary Internet Hosts”, 
Jeffrey Knockel and Jedidiah R. Crandall, 2014
OPTIMIZED LINUX KERNELS AND POPCORN
There is a storied history of using IPID for Idle Scanning
OPTIMIZED LINUX KERNELS AND POPCORN
A patch that adds perturbation (2014)
A patch that replaces per-destination IPID counters 
with “binned” counters (2014)
Two relevant changes to Linux Kernel:
Origin of work:
“ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path”, Zhang, Knockel, and Crandall. Published 2018
OPTIMIZED LINUX KERNELS AND POPCORN
A patch that adds perturbation
Origin of work:
“ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path”, Zhang, Knockel, and Crandall. Published 2018
https://git.kernel.org/pub/scm/linux/kernel/
git/stable/linux.git/commit/?id=73f156a6e8
When sending a packet, increments IPID by a normal 
distribution between 1 and the kernel ticks elapsed
OPTIMIZED LINUX KERNELS AND POPCORN
A patch that replaces per-destination IPID counters with 
“binned” counters
Origin of work:
“ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path”, Zhang, Knockel, and Crandall. Published 2018
https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=04ca6973f7
ip.dst:
208.67.222.222
5810
2058
1050
9714
4382
8620
4
4299
3462
HASH
OPTIMIZED LINUX KERNELS AND POPCORN
One of 2048 “bins” 
(IP_IDENTS_SZ default)
Origin of work:
“ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path”, Zhang, Knockel, and Crandall. Published 2018
https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=04ca6973f7
A patch that replaces per-destination IPID counters with 
“binned” counters
OPTIMIZED LINUX KERNELS AND POPCORN
 Use the IP-space of IPv6 for source 
addresses
 Find hash collisions between destination addresses by 
seeing the increment from zombie to target
 Get ”under” perturbations (for most systems this timing is 
~10ms but may be as low as ~0.66ms)
MADE ONIS (2018)
MISSED ONUS
ONIS: ONIS is Not an Idle Scan
Origin of work:
“ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path”, Zhang, Knockel, and Crandall. Published 2018
Once a collision is found, start using 
the “zombie” for Not an Idle Scan
But wait… wasn’t the only things 
preventing DNS Fragment Poisoning 
the difficulty of guessing the IPID?
ONIS: ONIS is Not an Idle Scan
Origin of work:
“ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path”, Zhang, Knockel, and Crandall. Published 2018
MADE ONIS (2018)
MISSED ONUS
WHERE WE’RE GOING
1. Intro
2. Background on DNS
3. Fragmentation Attacks
4. IPID Inference
5. The Attack (agnostic to IPv4 and IPv6)
6. Mitigations
Much like with ONIS, start by finding collisions
But wait… didn’t you say something about IPv6 being used?
This additive work is ours, diagram edited from:
“ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path”, Zhang, Knockel, and Crandall. Published 2018
FINDING COLLISIONS OFF-PATH
Works for IPv6 when fragmented
What about getting address space?
This additive work is ours, diagram edited from:
“ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path”, Zhang, Knockel, and Crandall. Published 2018
IPv6 Echo Reply
FINDING COLLISIONS OFF-PATH
What about getting address space?
All AWS Virtual Private Clouds (including free tier) 
What about getting address space?
All AWS Virtual Private Clouds (including free tier) 
can add a /64 IPv6 CIDR (18,446,744,073,709,551,616 hosts)
Wait, why is this better than finding global 
IPID nameservers?
Broader selection, all ‘recent’ Linux kernels 
(>3.16 – Aug 3 2014)
Binning acts in our favor, ~99.95% of other 
hosts will not change the IPID (2047/2048)
AFTER A COLLISION IS FOUND
Exploit Necromancy, Fragmentation is still poisonous 
Being a downstream puppet is trivial for public resolvers
… and organizations and individuals are increasingly relying on them.
AFTER A COLLISION IS FOUND
Nameserver uptime is in the attacker's favor
The secret key for hashing destination addresses only changes 
at reboot – so… ∞ uptime on nameservers?
Wait for times of least monitoring
Accumulate collisions (matches) for multiple nameservers
and resolvers
Perform multiple short-duration cache attacks (for cases 
where we can specify timeout)
WarGames and Waiting Games
AFTER A COLLISION IS FOUND
If this is doable in a single hit:
 Maybe don’t need a downstream puppet
 Anticipate automated clients (e.g. cron-jobs)
does your blueteam work midnights?
 Maybe the puppet can be passive
 Attempt to poison common requests when they 
go out of cache 
 Maybe poison isn’t the purpose
 Use NS Blocking to kill communication to all 
nameservers
Unrealistic blind attacks are now plausible "in one shot"
NS Blocking work:
“Fragmentation Considered Poisonous”, Amir Herzberg and Haya Shulman, Published 2012
AFTER A COLLISION IS FOUND
WHERE WE’RE GOING
1. Intro
2. Background on DNS
3. Fragmentation Attacks
4. IPID Inference
5. The Attack (agnostic to IPv4 and IPv6)
6. Mitigations
What Umbrella was going to deploy for IPv4
Handle fragments in pre-assembly
 Content in later UDP fragment should be untrusted
Trigger re-queries at a higher layer over TCP
Issue: IPv6 headers
 IPv6 extension headers might not exist, may be in any order
Identify and handle fragments as 'Suspect' (non-trivial)
FOR RESOLVERS
Date TBD
Cap EDNS (Extended DNS) bufsize solicitation at ~1220
 More feasible with elliptic-curve RRSIGs
 Avoid IPv6 fragmentation
Drop all fragments (including IPv6)
Re-query larger payloads over TCP
Implement “Flag Day 2020+” plans now
FOR RESOLVERS
https://dnsflagday.net/2020/
Indications of this attack are… limited. But one can still 
make an alert for what little warning there is
 A large volume of unsolicited, fragmented, IPv6 ICMP Echo 
replies during collision-finding may be the only indication
Though, this attack could be performed with sufficient IPv4 
address space, or other protocols that allow for sufficiently 
tight-timing of responses.
Be alerted (or very afraid) of unsolicited ECHO responses
FOR RESOLVERS
Have you tried turning it off and on again?
For a host running modern Linux, changing the key used 
to hash destination addresses would silently remove 
any known collisions
Obviously, even if this is done 
without a reboot - not ideal 
(traffic volume)
In order of increasing difficulty…
FOR NAMESERVERS
Limit EDNS over UDP (“Flag Day 2020+”) 
Not really “Compliant” yet, but can still serve large 
responses over TCP
Speed is important, but 
may be best left to the 
resolvers, most things can
be cached
FOR NAMESERVERS
In order of increasing difficulty…
https://dnsflagday.net/2020/
Disable, fuzz, or limit what ICMPs you respond to
 There are good reasons for responding to ICMP ECHOs 
(especially as a backbone-of-DNS)
but… maybe not fragmented pings
 Handle ICMP separately with a
non-kernel process (IPID)
 Limit speed of replying to ICMPs
 … but then again, ICMP *isn’t* the 
only way this attack could be done
FOR NAMESERVERS
In order of increasing difficulty…
Roll your own Kernel (sorry in advance) or use another
Change IP_IDENTS_SZ to something much higher than 
2048, recompile.
Alternatively, use a kernel
that is properly 
per-destination and take
the performance hit
https://xkcd.com/303/
FOR NAMESERVERS
In order of increasing difficulty…
Deploy DNSSEC … and do it with good signing keys 
Although DNSSEC produces longer replies (fragmentation), 
it also prevents outright tampering with A records.
If you have a weak key your replies would be 
fragmentable, and the signing could be broken.
https://www.iana.org/dnssec/dps/zsk-operator/dps-zsk-operator-v2.0.pdf
Key Signing Key (KSK)
Zone Signing Key (ZSK)
A www.defcon.org w.x.y.z
RRSIG
A 10 3 2419200 2019 ...
Which authenticates
Makes RRSIGs for records
FOR DOMAINS
https://www.iana.org/dnssec/dps/zsk-operator/dps-zsk-operator-v2.0.pdf
https://blog.webernetz.net/dnssec-zsk-key-rollover/
FOR DOMAINS
Deploy DNSSEC … and do it with good signing keys 
Although DNSSEC produces longer replies (fragmentation), 
it also prevents outright tampering with A records.
If you have a weak key your replies would be 
fragmentable, and the signing could be broken.
FOR EVERYBODY ELSE…
DON’T PANIC
(well... maybe panic a little)
ONIS: Inferring TCP/IP-based Trust Relationships Completely Off-Path
- Zhang, Knockel, and Crandell
Fragmentation Considered Poisonous - Herzberg and Shulman 
Two Main Papers:
https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/net/i
pv4/route.c#n476
IP_IDENTS_SZ in current Linux kernel:
Speakers
PI:EMAIL
Twitter: @Travco1
Travis (Travco) Palmer
PI:EMAIL
Brian Somers
D. Kaminsky. It’s The End Of The Cache As We Know It. In Black Hat 
conference, 2008. http://www.doxpara.com/DMK_BO2K8.ppt.
The O.G. Kaminsky:
https://www.cloudflare.com/dns/dnssec/how-dnssec-works/
https://www.icann.org/news/announcement-2019-02-22-en
https://www.internetsociety.org/resources/doc/2016/state-of-dnssec-deployment-2016/
https://indico.dnsoarc.net/event/31/contributions/692/attachments/660/1115/fujiwara-5.pdf
“Counting Packets Sent Between Arbitrary Internet Hosts”, Jeffrey Knockel and Jedidiah R. Crandall, 2014
https://dnsflagday.net/2020/ 
https://www.iana.org/dnssec/dps/zsk-operator/dps-zsk-operator-v2.0.pdf
Other resources in order of appearance: