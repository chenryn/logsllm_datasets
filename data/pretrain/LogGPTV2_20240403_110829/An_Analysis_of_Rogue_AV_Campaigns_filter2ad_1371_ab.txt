### A Distributed Honeynet at KFUPM: A Case Study
**Authors:** Mohammed Sqalli, Raed AlShaikh, and Ezzat Ahmed

### Aspect-Based Attack Detection in Large-Scale Networks
**Authors:** Martin Drašar, Jan Vykopal, Radek Krejčí, and Pavel Čeleda

### Detecting Network Anomalies in Backbone Networks
**Authors:** Christian Callegari, Loris Gazzarrini, Stefano Giordano, Michele Pagano, and Teresa Pepe

### Detecting the Onset of Infection for Secure Hosts
**Authors:** Kui Xu, Qiang Ma, and Danfeng (Daphne) Yao

### Eliminating Human Specification in Static Analysis
**Authors:** Ying Kong, Yuqing Zhang, and Qixu Liu

### Evaluation of the Common Dataset Used in Anti-Malware Engineering Workshop 2009
**Authors:** Hosoi Takurou and Kanta Matsuura

### Inferring Protocol State Machine from Real-World Trace
**Authors:** Yipeng Wang, Zhibin Zhang, and Li Guo

### MEDUSA: Mining Events to Detect Undesirable User Actions in SCADA
**Authors:** Dina Hadžiosmanović, Damiano Bolzoni, and Pieter Hartel

### On Estimating Cyber Adversaries’ Capabilities: A Bayesian Model Approach
**Authors:** Jianchun Jiang, Weifeng Chen, and Liping Ding

### Security System for Encrypted Environments (S2E2)
**Authors:** Robert Koch and Gabi Dreo Rodosek

### Towards Automatic Deduction and Event Reconstruction Using Forensic Lucid and Probabilities to Encode the IDS Evidence
**Authors:** Serguei A. Mokhov, Joey Paquet, and Mourad Debbabi

### Toward Specification-Based Intrusion Detection for Web Applications
**Authors:** Salman Niksefat, Mohammad Mahdi Ahaniha, Babak Sadeghiyan, and Mehdi Shajari

### Toward Whole-System Dynamic Analysis for ARM-Based Mobile Devices
**Authors:** Ryan Whelan and David Kaeli

### Using IRP for Malware Detection
**Authors:** FuYong Zhang, DeYu Qi, and JingLin Hu

---

## What Is the Impact of P2P Traffic on Anomaly Detection?
**Authors:** Irfan Ul Haq, Sardar Ali, Hassan Khan, and Syed Ali Khayam  
**Affiliation:** School of Electrical Engineering & Computer Science, National University of Sciences & Technology (NUST), Islamabad 44000, Pakistan  
**Emails:** {irfan.haq, sardar.ali, hassan.khan, ali.khayam}@seecs.nust.edu.pk

### Abstract
Recent studies estimate that peer-to-peer (P2P) traffic comprises 40-70% of today’s Internet traffic. Surprisingly, the impact of P2P traffic on anomaly detection has not been thoroughly investigated. In this paper, we collect and use a labeled dataset containing diverse network anomalies (port scans, TCP floods, UDP floods, at varying rates) and P2P traffic (encrypted and unencrypted with BitTorrent, Vuze, Flashget, μTorrent, Deluge, BitComet, Halite, eDonkey, and Kademlia clients) to empirically quantify the impact of P2P traffic on anomaly detection. Four prominent anomaly detectors (TRW-CB, Rate Limiting, Maximum Entropy, and NETAD) are evaluated on this dataset.

Our results reveal that:
1. P2P traffic results in up to a 30% decrease in detection rate and up to a 45% increase in false positive rate.
2. Due to a partial overlap of traffic behaviors, P2P traffic inadvertently provides an effective evasion cover for high- and low-rate attacks.
3. Training an anomaly detector on P2P traffic, instead of improving accuracy, introduces significant accuracy degradation for the anomaly detector.

Based on these results, we argue that only P2P traffic filtering can provide a pragmatic, yet short-term, solution to this problem. We incorporate two prominent P2P traffic classifiers (OpenDPI and Karagiannis’ Payload Classifier (KPC)) as preprocessors into the anomaly detectors and show that existing non-proprietary P2P traffic classifiers do not have sufficient accuracies to mitigate the negative impacts of P2P traffic on anomaly detection.

Given the premise that P2P traffic is here to stay, our work demonstrates the need to rethink the classical anomaly detection design philosophy with a focus on performing anomaly detection in the presence of P2P traffic. We make our dataset publicly available for the evaluation of future anomaly detectors designed to operate with P2P traffic.

### 1. Introduction
During March 2009, a record number of 4,543 anomalies was recorded by an open-source TRW-CB-based anomaly detector deployed on our school’s network. The network administrators initially took it as a result of a zero-day attack and updated the antivirus and antispyware definitions on school hosts. However, TRW-CB continued reporting anomalies even after the update. An investigation revealed that the culprit was P2P traffic, which was being reported as anomalous. This behavior intrigued us to investigate the impact of P2P traffic on anomaly detection.

Based on the results of our investigation, in this paper, we empirically answer the following open question: How much perturbation does P2P traffic introduce in anomaly detection metrics, and how can these perturbations be mitigated? While some features of P2P traffic are similar to those of malicious traffic and different from the bulk of benign TCP traffic, the accuracy of an anomaly detector, which flags deviations from a model of normal behavior, is bound to degrade in the presence of P2P traffic. For example, the decentralized and distributed nature of the P2P architecture results in the establishment of a large number of connections to random ports during bootstrapping, which shares similarities with port scan attacks.

While a general sense can be determined intuitively, our empirical study provides deeper insights by breaking the above question into the following set of important sub-questions:
1. How much degradation does P2P traffic induce in anomaly detection accuracy (detection and false positive rates)?
2. Which anomaly detection metrics/principles are more sensitive to P2P traffic and why?
3. Does the aggressive nature of P2P traffic dominate some/all attack classes and high/low-rate attacks?
4. Can an anomaly detector handle P2P traffic if it is trained on a dataset containing P2P traffic?
5. Can a pragmatic solution be designed to make an anomaly detector insensitive to P2P traffic?
6. Can existing public P2P traffic classifiers mitigate the degradation in anomaly detection accuracy?
7. What are the open problems in designing anomaly detectors that operate effectively in today’s Internet traffic?

To empirically answer the above questions, we collect a labeled dataset containing diverse network anomalies (port scans, TCP floods, UDP floods, at varying rates) and P2P traffic (encrypted and unencrypted with BitTorrent, Vuze, Flashget, μTorrent, Deluge, BitComet, Halite, eDonkey, and KAD clients). Since it is not possible to evaluate all existing anomaly detectors, we evaluate the ROC-based accuracies of four prominent anomaly detectors (TRW-CB, Rate Limiting, Maximum Entropy, and NETAD) on this dataset.

Our results reveal that all the anomaly detectors experience an unacceptable (up to 30%) drop in detection rates and a significant (up to 45%) increase in false alarm rates when operating with P2P traffic. Henceforth in the paper, we refer to this accuracy degradation as the "torrent effect" on anomaly detection. We evaluate the torrent effect by evaluating the anomaly detectors on different attack rates and classes. We show that anomaly detectors deliver varying accuracies on different attack classes, and this varying performance is a function of the design principle of a given anomaly detector. Similarly, we show that P2P traffic inadvertently acts as a very effective evasion cover for low-rate attacks, as the detection of such attacks is seriously affected by P2P traffic.

Based on the significant and consistent accuracy degradations observed in our study, we argue that a P2P traffic classifier-based preprocessor can offer the anomaly detectors a pragmatic, albeit short-term, relief from the torrent effect. By incorporating OpenDPI into the IDSs, we see a 12% improvement in detection accuracy with a 4% reduction in false positive rate. Similarly, incorporating KPC results in an 18% improvement in detection accuracy and a 48% reduction in false positive rate. However, even with these improvements, existing non-proprietary P2P traffic classifiers do not have sufficient traffic classification accuracies to eliminate the torrent effect.

Recent trends indicate that the volume of P2P traffic is reducing as service providers are now deploying commercial P2P traffic classifiers to throttle P2P traffic in real-time. Nevertheless, due to the ubiquity and popularity of P2P networks and software, even with reduced volumes, P2P traffic is anticipated to continue comprising a significant percentage of the Internet's traffic in the coming years. We therefore advocate a fundamental rethinking of the anomaly detection design philosophy, with future anomaly detectors catering for P2P traffic in their inherent design. We make our dataset publicly available for the evaluation of such future anomaly detectors.

### 2. Related Work and Background
While significant research has recently been focused on evaluating and understanding trends in anomaly detection, to the best of our knowledge, the impact of P2P traffic on intrusion detection has not been explored. Therefore, in this section, we provide a brief overview of the anomaly detectors evaluated in this work; interested readers are referred to the original papers [7], [8], [10], and [11] for detailed descriptions of the anomaly detectors.

- **Rate Limiting Approach [8]:** Detects anomalous connection behavior by putting new connections exceeding a certain threshold in a queue. An alarm is raised when the queue length exceeds a threshold.
- **TRW-CB [7]:** Limits the rate at which new connections are initiated by applying sequential hypothesis testing and using a credit increase/decrease algorithm to slow down hosts experiencing unsuccessful connections.
- **Maximum Entropy Based Detector [10]:** Estimates the benign traffic’s baseline distribution using the Maximum Entropy method by dividing the traffic into 2,348 packet classes. These packet classes are defined based on destination ports and transport protocols. Kullback-Leibler (K-L) divergence measure is then used to flag anomalies if the divergence from the baseline distribution exceeds a threshold.
- **NETAD [11]:** Operates on rule-based filtered traffic in a modeled subset of common protocols. It computes a packet score depending on the time and frequency of each byte of the packet, and rare/novel header values are assigned high scores. A threshold is applied to a packet’s score to find anomalous packets.

For performance evaluations, parameter tuning for these anomaly detectors is performed in the same fashion as in a recent evaluation study [35].

We chose these anomaly detectors to ensure diversity because these detectors have very different detection principles and features and operate at different traffic granularities. On the one hand, we use Rate Limiting [8], which is a connection-based programmed system using a thresholding approach, while, on the other hand, we use a statistical programmed system, TRW-CB [7]. Similarly, we employ an information-theoretic self-learning system like Maximum Entropy [10] as opposed to NETAD [11], which is a packet-based rule-modeling system.

### 3. Dataset Description
For the present problem, we wanted to use real, labeled, and public background and attack datasets to measure the accuracy. Furthermore, for comprehensive evaluation, we needed attacks of different types (DoS, portscan, etc.) and different rates for each attack type. Finally, we needed labeled P2P traffic from various clients and P2P protocols in our dataset. While some old attack datasets are available [17]-[19], they do not contain P2P traffic and do not contain attacks of different types. Therefore, we collected our own network traffic dataset and made it publicly available for repeatable performance evaluations.

#### 3.1 Normal Traffic
We captured the normal traffic in six periods, each over three hours. During traffic capturing, different applications were hosted on the machines, including file transfer, web browsing, instant messaging, real-time video streaming, etc. It was ensured that during normal traffic capturing, no P2P application was hosted on any of the client machines. The mean packet rate recorded for the background traffic was about 3168 pkts/sec, and the standard deviation was 1683 pkts/sec.

#### 3.2 P2P Traffic
The P2P traffic in our traces belongs to the BitTorrent, eDonkey, and Kademlia protocols. These protocols were chosen as representative traffic from P2P traffic. Table 1 shows the P2P file sharing application traffic statistics.

| Client Name & Version | Sessions Established | Traffic Volume | Throughput (Mbps) |
|-----------------------|----------------------|----------------|-------------------|
| Vuze 4.0              | 20                   | 685 MB         | 0.8               |
| Flashget 1.9.6        | 62                   | 60.7 MB        | 1.2               |
| μTorrent 1.8.1        | 30                   | 1.08 GB        | 1.7               |
| BitTorrent 6.1.2      | 134                  | 1.59 GB        | 2.62              |
| Deluge 1.0.7          | 30                   | 171 MB         | 0.72              |
| BitComet 1.07         | 20                   | 57.4 MB        | 0.6               |
| Halite 0.3.1          | 9                    | 413 MB         | 0.94              |
| eMule v0.49b          | 203                  | 2.67 GB        | 1.2               |

#### 3.3 Attack Characteristics and Background Traffic Information During Attacks
Table 2 shows the attack characteristics and background traffic information during attacks.

| Attack Name          | Attack Characteristics                                  | Background Traffic Statistics (pkts/sec) |
|----------------------|--------------------------------------------------------|-----------------------------------------|
| TCP-SYN Portscans    | Fixed src IP addr, Two distinct attacks: First scan on port 80, Second scan on port 135 | μ: 2462.9, σ: 2240.1                    |
| TCP-SYN Flood (DoS)  | Attacked ports: 143, 22, 138, 137, 21                   | μ: 3002.6, σ: 2699.1                    |
| UDP Flood            | Attacked ports: 22, 80, 135, 143                        | μ: 3325.2, σ: 4409.8                    |
| Fraggle               | Attacked ports: 22, 80, 135, 143                        | μ: 6100.0, σ: 3964.1                    |

The dataset collected for this work is available at: [http://wisnet.seecs.nust.edu.pk/projects/ENS/DataSets.html](http://wisnet.seecs.nust.edu.pk/projects/ENS/DataSets.html)

---

This optimized version of the text is more structured, coherent, and professional, making it easier to read and understand.