(pub, gs, . . . , gsq
) where q is poly(λ), for some s chosen at ran-
dom from Z∗
p, there is no PPT algorithm that can output a pair
(c, e(g, g)1/(c+s)) ∈ Z∗
Collision-resistant hash functions. A collision-resistant hash func-
tion (CRHF) H is a function randomly sampled from a function
p × GT except with probability ν(λ).
820family, such that no non-uniform PPT algorithm can output x, x(cid:48),
such that H(x) = H(x(cid:48)) and x (cid:54)= x(cid:48), except with probability ν(λ).
Set-membership authentication. Consider a data owner outsourc-
ing a set X to an untrusted third-party server. Clients issue queries
about a single element x ∈ X. A set-membership authentication
protocol (SMA) allows the server to prove to a client that x is
indeed a member of X. An SMA is a collection of algorithms
KeyGen, Setup, Prove, Verify and Update. The owner executes
Keygen and Setup prior to outsourcing X. The former gener-
ates a secret and public key pair sk, pk, whereas the latter pro-
duces a digest δ that is a succinct cryptographic representation of
X. The owner keeps sk and publishes pk and δ. Given a client
query about x ∈ X, the server runs Prove to produce a proof
of membership π. Given pk, δ, π and x, the client runs Verify to
check the membership of x in X. In case the owner modiﬁes X
by inserting/deleting elements, it executes Update to produce a
new digest δ reﬂecting the updates in X, and notiﬁes the server
about the changes. An SMA is secure, if the probability that
(accept ← Verify ∧ y /∈ X) is negligible.
The most well-known SMA is the Merkle tree [19], which is a
binary tree where (i) each leaf node contains an element x ∈ X, and
(ii) each non-leaf node stores the hash of the values of its children,
using a CRHF H. During Setup, the owner builds a Merkle tree on
X, signs the hash value in the root, publishes it as the digest δ, and
sends the tree to the server. During Prove, the server accesses the
tree to ﬁnd x, and includes in proof π all sibling hash values along
the path from the root to the leaf storing x. In Verify, the client re-
cursively performs the hash operations to reconstruct the root hash
value, and checks it against δ. Producing an element y (cid:54)∈ X and a
convincing proof is known to be as hard as ﬁnding a collision for
H. For n elements, the proof construction and size, veriﬁcation,
and update time are all O(log n), whereas the setup is O(n). An
alternative SMA is the accumulation tree [22], which features two
main differences to the Merkle tree: (i) the fanout of each non-leaf
node is n1/, where  ∈ (0, 1] is a user-deﬁned parameter, and
(ii) each non-leaf node stores an accumulation value (discussed be-
low) produced over the values of its children. The following lemma
(originally from [23]; slightly informal here) describes the security
of the bilinear-pairing based accumulation tree.
LEMMA 1. Let λ be a security parameter. Under q-SBDH, no PPT
adversary on input pk output by Keygen and with oracle access
to algorithms Setup, Update, Prove and Verify can produce set
X, element x (cid:54)∈ X and proof π, such that Verify outputs accept,
except with probability ν(λ).
We refer the interested reader to [22] and [24] for a more detailed
description of the accumulation tree. This SMA offers O(1) proof
size, veriﬁcation, and update time, and O(n) setup cost. The down-
side is the proof construction overhead, which is now O(n log n),
and the costly operations as opposed to the Merkle tree (exponenti-
ations vs. hashings).
Set operation authentication. Consider now an owner of a collec-
tion of sorted sets X = {X1, . . . , Xm}, who outsources them to
an untrusted server. Clients issue queries describing set operations
over X , consisting of unions, intersections, and set-differences. Ex-
ample queries include X1 ∩ X5, (X2 ∪ X3)∩ X1, and X1 \ X2. A
set operation authentication protocol (SOA) enables the server to
prove the integrity of the result. Similarly to SMA, it is comprised
of algorithms KeyGen, Setup, Prove, Verify Update, and its secu-
rity is deﬁned as the inability of the server to present a false answer
with an accepting proof.
|X|), the proof is generated in time ˜O((cid:80)
Existing SOA constructions appear in [24] and [8]. The former
can support queries expressed as a single set operation (for instance
Xi ∩ . . . ∩ Xj, i.e., one intersection over an arbitrary number of
sets). On the other hand, the latter accommodates any circuit of set
operations, e.g., (Xi ∩ Xj) ∪ Xl. Both schemes offer the same
asymptotic overhead. Speciﬁcally, for a single operation on collec-
tion XQ ⊆ X of d sets that produces result R, computable in time
|X|)
and has size O(d). Note that proof construction incurs only a poly-
logarithmic overhead compared to result computation, and this is
generalized naturally for circuits of multiple operations in [8]. The
veriﬁcation overhead is ˜O(|R|) + O(d), whereas the setup cost is
X∈X |X|). Although [8] subsumes [24] in terms of function-
ality, its security relies on non-standard “knowledge-type” assump-
tions.
Ω((cid:80)
O((cid:80)
X∈XQ
X∈XQ
We next describe the intersection scheme of [24], as we utilize
it in our constructions. This scheme employs the bilinear accumu-
lator primitive [21]. Let X be a set with elements from Zp, and
s ←R Z∗
p a secret. The accumulation value of X is deﬁned as:
(cid:81)
x∈X (x+s) .
acc(X) = g
x∈X (x+S) = PX (S) =(cid:80)|X|
ular, we can write(cid:81)
compute acc(X) = gPX (s) =(cid:81)|X|
This value is a succinct, collision-resistant cryptographic represen-
tation of X under q-SBDH. It is also computable (from scratch)
even without s, by having access to the public pairing parameters
pub, as well as a public key (gs, . . . , gsq
), where q is a user-deﬁned
parameter that is an upper bound on the cardinality of X. In partic-
i=0 ciSi, where S
is an undeﬁned variable. The coefﬁcients c0, . . . , c|X| can be com-
puted in time O(|X| log |X|) using FFT interpolation. One can
)ci using only the public
information. Note that, with access to s, the bilinear accumulator
can accommodate an insertion/deletion in X with O(1) operations
[21]. However, without s, the updated accumulation value must be
computed from scratch.
In order to prove to a client with access to acc(X1), acc(X2)
that a set I is the intersection X1 ∩ X2, it sufﬁces to prove that
(i) I ⊆ X1 and I ⊆ X2, and (ii) (X1 \ I) ∩ (X2 \ I) = ∅.
Towards (i), the server must send subset witnesses W1, W2 to the
client, where Wi = acc(Xi \ I) for i = 1, 2. To verify (i), the
client ﬁrst computes acc(I), and checks the following for i = 1, 2:
i=0(gsi
e(acc(I), Wi) ?= e(acc(Xi), g) .
follows. Since (X1\I)∩(X2\I) = ∅, PX1\I (S) =(cid:81)
S) and PX2\I (S) =(cid:81)
For (ii), the server computes two disjointness witnesses F1, F2 as
x∈X1\I (x+
x∈X2\I (x + S) have greatest common divi-
sor of degree zero. Hence, there exist polynomials Q1(S), Q2(S)
such that Q1(S)· PX1\I (S) + Q2(S)· PX2\I (S) = 1. These poly-
nomials (also known as Bézout coefﬁcients) are efﬁciently com-
putable by the Extended Euclidean algorithm. The server calculates
the disjointness witnesses as F1 = gQ1(s), F2 = gQ2(s). To verify
(ii), the client simply checks
e(W1, F1) · e(W2, F2) ?= e(g, g) .
This approach naturally generalizes for d > 2 sets Xi, with cor-
i=1. In our security
responding intersection proof π∩ = {Wi, Fi}d
proofs, we use the following lemma from [24]:
LEMMA 2. Let λ be a security parameter, and pub ← BilGen(1λ).
) ∈ G for some s chosen
Under q-SBDH, on input (pub, gs, . . . , gsq
at random from Z∗
p, no PPT adversary can output sets X1, . . . , Xd, I
821with elements in Zp, where d = poly(λ), and π∩ = {Wi, Fi}d
such that e(acc(I), Wi) = e(acc(Xi), g),(cid:81)
and I (cid:54)=(cid:84)
i Xi, for i = 1, . . . , d, except with probability ν(λ).
i=1,
i e(Wi, Fi) = e(g, g),
3. PROBLEM FORMULATION
In this section we describe our targeted setting, formulate our
authentication protocol, and model its security.
Setting and query. Our setting involves three types of parties; an
owner, a server, and a number of clients. The owner outsources to
the server a dataset T that consists of n tuples, each having a set
A = {a1, . . . , am} of attributes. This dataset can be perceived as
a table in traditional relational databases. It could also be a multi-
dimensional array in scientiﬁc databases (e.g., SciDB [7]), where
a subset of the attributes are the array dimensions (i.e., the array
indices), and the rest are the array attributes (i.e., the array cell
values). In addition, the server is responsible for maintaining the
dataset, upon receiving tuple updates (modeled as insertion/deletion
requests) from the owner.
Clients issue multi-dimensional range queries on T to the server,
which return the tuples from T that satisfy certain range conditions
over a set of attributes. More formally, a query Q is speciﬁed over
any subset of d attributes AQ ⊆ A, where |AQ| = d ≤ m, and
encoded by the set of triplets {(i, li, ui)}ai∈AQ. The result of Q is
a set R ⊆ T that contains exactly those tuples t ∈ T that satisfy
li ≤ t.ai ≤ ui for all ai ∈ AQ. This query corresponds to a
select. . .where query in relational databases, and a subarray
query in scientiﬁc databases. In our terminology, each ai ∈ AQ
represents a dimension in the multi-dimensional range query.
In our setting, we consider that the server is untrusted, and may
present to the client a tampered result. Our goal is to construct a
protocol for authenticated multi-dimensional range queries, which
allows the client to verify the integrity of the received result.
Authentication protocol. Let Tj denote the version of dataset
T after j rounds of updates. An authenticated multi-dimensional
range query protocol (AMR) consists of the following algorithms:
1. KeyGen(1λ): It outputs secret and public keys sk, pk.
2. Setup(T0, sk, pk): It computes some authentication infor-
mation auth(T0) and digest δ0, given dataset T0, sk and pk.
3. Update(upd, auth(Tj), δj, sk, pk): On input update infor-
mation upd on Tj, auth(Tj), δj and sk, it outputs an up-
dated dataset Tj+1, along with new auth(Tj+1), and δj+1.
4. Prove(Q, R, Tj, auth(Tj), pk): On input query Q on Tj
with result R, and auth(Tj), it returns R and proof π.
5. Verify(Q, R, π, δj, pk): On input query Q, result R, proof
π, digest δj and pk, it outputs either accept or reject.
In a pre-processing stage, the owner runs KeyGen and Setup. It
publishes public key pk and digest δ0, which is a succinct cryp-
tographic representation of initial dataset T0. Moreover, it sends
T0, auth(T0) to the server, where auth(T0) is some authentica-
tion information on T0 that will be used by the server to construct
proofs. The owners maintains its dataset by issuing Update when
changes occur at the dataset. Speciﬁcally, an update is a tuple in-
sertion or deletion, encoded by upd. An update on Tj produces
a new version Tj+1, as well as new digest δj+1 and auth(Tj+1).
The owner sends to the server only the modiﬁed parts necessary
for computing Tj+1, auth(Tj+1), δj+1. The server responds to a
query Q from the client by ﬁrst computing the result R, and ex-
ecutes Prove that constructs the corresponding proof π. Finally,
the client validates the integrity and freshness of R being a correct
answer to Q on current Tj, by running Verify.
An AMR must satisfy the following two properties:
CORRECTNESS. A AMR is correct if, for all λ ∈ N, (sk, pk) ←
KeyGen(1λ), all (T0, auth(T0), δ0) output by one invocation of
Setup followed by j(cid:48) calls to Update on updates upd, where j(cid:48) is
poly(λ), any Q with correct result R, and π output by Prove(Q, Tj,
auth(Tj), pk), Verify(Q, R, π, δj, pk) returns accept with prob-
ability 1, for all j ≤ j(cid:48).
SECURITY. Let λ ∈ N be a security parameter, key pair (sk, pk) ←
KeyGen(1λ), and A be a PPT adversary that possesses pk and has
oracle access to all algorithms of AMR. The adversary picks an
initial state of the dataset T0 and receives T0, auth(T0), δ0 through
oracle access to Setup. Then, for i = 0, ..., j(cid:48) − 1 = poly(λ), A
issues an update updi for Ti and receives Ti+1, auth(Ti+1) and
δi+1 through oracle access to Update. At any point during these
update queries, A can make polynomially many oracle calls to al-
gorithms Prove and Verify. Finally, A picks an index 0 ≤ j ≤ j(cid:48),
a query Q, a result R∗ and a proof π∗. We say that a AMR is
secure if for all large enough λ ∈ N and all PPT adversaries A, it
holds that:
 ≤ ν(λ) ,
, π
, δj, pk)
∗
(Q, R
, π
∗
, j) ← A s.t
∗
∗
Pr
accept ←Verify(Q, R
∗ (cid:54)= R
∧ R
where R is the correct result of Q on Tj, and the probability is
taken over the randomness of the algorithms and the coins of A.
As an additional remark, note that the above protocol falls within
the framework of authenticated data structures, introduced in [26],
but is tailored for the speciﬁc problem of range queries.
4. BASIC SCHEME
Section 4.1 presents a generalized methodology for construct-
ing AMRs, Section 4.2 introduces a concrete instantiation of this
methodology, and Section 4.3 includes a set-difference sub-protocol
that is used as part of our construction.
4.1 A General Framework
We present our proposed framework, outline its beneﬁts, and
highlight the challenges behind a secure and efﬁcient instantiation.
Framework. Recall that the query result is a set of tuples, each