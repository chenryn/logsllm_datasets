### recv (Unix Style)
**Table 2: Elapse Times for Micro-Benchmarks and Unix-Style Concurrent Server (See Section 3)**
No authentication is performed in any of these cases. All times are specified in microseconds.

#### 5.4.1 System Call Overhead (No Authentication)
Our initial measurements aim to determine the authorization overheads for netAuth by using a lightweight authentication mechanism with minimal overhead. The authorization mechanism restricts which users can access the service and is implemented outside the application.

The results, presented in Table 2, compare netAuth with unmodified Linux:

- **Server Bind Time**: The time to perform a bind by the server increased by 12.5% due to the overhead of authorization checks.
- **Client-Side Connect Time**: The time to complete a connect (as measured) on the client-side increased by 14.28%, including both client-side and server-side authorization checks. This elapsed time includes a round-trip packet time.
- **Connect-Send-Recv Operation**: For the Unix case, the total time was approximately 145 µs, while for the netAuth case, it was about 157 µs, representing an overhead of 8.27%. The most costly operation is the fork performed by the server to create a new per-user process.

We note that these overheads represent best-case scenarios [26]; typically, latency issues are higher. Additionally, no performance tuning has been done on the netAuth implementation.

#### 5.4.2 Using netAuth Authentication
This section describes the scenario where the server process for user \( U_i \) handles all requests from \( U_i \) for a specific service (as described in Section 5). There is no comparable scenario in Unix. Therefore, we report the latencies observed on the client side in Table 3.

| Connection Type | netAuth (with auth.) | Linux (w/o auth.) |
|-----------------|----------------------|-------------------|
| First           | 4200 µs              | 147 µs            |
| Successive      | 67 µs                | 147 µs            |

**Table 3: Elapse Times Observed on the Client Side for Connect-Send-Recv Operations**
- **First Connection**: Using netAuth, a new connection involves the following steps:
  1. The kernel on the client requests an authenticator from the user-space daemon.
  2. The client generates the authenticator and sends it to the server for verification.
  3. A round-trip time (RTT) is incurred for sending the authenticator to the server and receiving the response.
  4. Context-switch times may occur between the client process and the authentication daemon.
  5. Scheduling delays may also be present. The most expensive operation is the cryptographic signing of the authenticator.
- **Subsequent Connections**: Subsequent connections for the same user run much faster because they reuse the same server process and fast authentications. In comparison, the elapsed time for the Unix case remains constant because there is no mechanism for reusing a previously created per-user process. The values for Unix shown in the table do not include authentication overhead.

#### 5.4.3 Server Throughput
Next, we consider server throughput in terms of new connections. In netAuth, although the first authentication must be signed, subsequent authentications require only a very fast cryptographic hash. From Table 1, the service-based verification of signatures takes only 80 µs. Thus, a single core can handle authentication for 45,000,000 users per hour, assuming authentications are cached for one hour. Such performance levels eliminate the need to consider weaker authentication mechanisms, even for high-volume services.

#### 5.5 Alternative Implementations
Our first implementation, described here, is a kernel-level implementation. We aim to make the APIs available on other systems without kernel modifications, particularly for those operating systems whose source code is not available.

We focus on client-side issues to ensure that netAuth services can be used from any operating system. (The server OS, however, is under the control of the service provider.) In Section 6.2, we describe a proxy implementation that uses netAuth and can be extended to implement netAuth at the protocol level from user space.

### 6 Porting Applications to netAuth
To demonstrate the effectiveness of netAuth, we ported a UBNS service. We have not yet attempted to port a non-UBNS organized service (such as Apache), as that is a more challenging problem. We chose Dovecot, an open-source IMAP and POP mail server that supports both privilege separation and UBNS.

**Table 4: Dovecot Processes and Their Respective User IDs**

| Process Name | Executable Name   | User ID    |
|--------------|-------------------|------------|
| master       | dovecot           | root       |
| auth         | dovecot-auth      | root       |
| login        | imap-login, pop3-login | dovecot   |
| imap         | imap              | dovecot    |

Dovecot is included in Linux distributions such as Debian and Ubuntu. Users can access Dovecot-based services remotely using a Mail Viewer Agent (MVA) like Thunderbird or Outlook. The MVA communicates with Dovecot using the IMAP or POP protocols over SSL or unencrypted connections.

Dovecot was designed with security as a primary goal. Since January 2006, its developer has offered a reward of 1000C for the first provable security hole. To support both privilege separation and UBNS, Dovecot has four process types, running under root, a pseudo user, and the remote user, as shown in Table 4.

**Table 5: Code Organization of the Dovecot Distribution Supporting IMAP (v1.0.9)**

| Directory          | Lines of Code | Total Lines of Code |
|--------------------|---------------|---------------------|
| master             | 2,460         | 8,728               |
| auth               | 5,469         | 13,024              |
| imap-login         | 484           | 9,449               |
| imap               | 3,456         | 13,300              |
| lib-auth           | 490           | 6,268               |
| lib                | 1,138         | 1,069               |
| login-common       | 101           | 304                 |
| lib-dict           | 882           | 470                 |
| lib-imap           | 574           | 1,463               |
| lib-mail           | 1,463         | 24,628              |
| lib-ntlm           | 1,069         |                     |
| lib-sql            | 304           |                     |
| lib-settings       | 1,138         |                     |
| lib-storage        | 882           |                     |

The port involved removing 9,307 lines of code (37.8%) associated with authentication and encryption, and copying less than 1,000 lines from the master (configuration and concurrent server loop) and login (initial handshake code) to imap. This reduces the number of process types from four to one. With traditional Unix authorization, the port still requires root to bind to port 143 and perform setuid, but the imap process never reads user input while running as root, reducing the risk of buffer overflow attacks.

For a new imap service, only 4 netAuth-specific lines would be needed to provide authentication and encryption over an unauthenticated service.

#### 6.1 Dovecot Before and After
The standard version of Dovecot is more complex due to privilege separation and the use of standard authentication and cryptographic mechanisms. We describe the processes and operations needed to retrieve IMAP mail in standard Dovecot.

##### 6.1.1 Standard Dovecot
- **Master Process**: Starts the auth and n (default 3) login processes and creates an imap process after successful authentication.
- **Auth Process**: Authenticates new users for the login process and verifies successful authentications to the master before creating a mail process.
- **Login Process**: Listens on the appropriate port (e.g., 143 for IMAP) for new connections, negotiates with the MVA to initialize the connection, and requests user authentication. Upon success, it requests the master to create a new imap process and then exits.
- **IMAP Process**: Receives the socket descriptor from the login process and communicates with the remote MVA to access the user’s mailbox.

##### 6.1.2 Porting Dovecot to netAuth
Porting Dovecot to netAuth involves:
- **Removing Code**: Eliminating code for message encryption, user authentication, and complex setuid() operations.
- **Moving Code**: Transferring some code into the imap process.
- **Reducing Processes**: Removing three of the four processes.

Summary of the Dovecot port to netAuth:
- **Elimination of Auth Process**: User authentication is performed by the OS during connection establishment.
- **Master Process**: Retains code for binding to the privileged port and configuring the new mail process with environment variables.
- **Login Process**: Retains only the initialization of a new connection.
- **IMAP Process**: Retains core functionality for accessing and maintaining mailboxes.

Figure 4 shows the sequence of events necessary to create a new imap process to service requests from the MVA. The port runs as a single process type, following the design for a concurrent server implementation.

**Figure 4: Sequence of Events for Creating a New IMAP Process**

- **Messages 1a and 1b**: Establish the initial connection between the MVA and Dovecot.
- **Authentication Step (2a-2e and Action 2f)**: 
  - The MVA sends the user’s authentication information.
  - The login process requests the auth process to authenticate the user.
  - On successful authentication, the login process sends a response back to the MVA and requests the master to create a new imap process.
  - The master, after verifying the authentication, creates the new mail process running on behalf of user \( U_k \).
- **Step 3**: The imap process services the MVA’s future requests.