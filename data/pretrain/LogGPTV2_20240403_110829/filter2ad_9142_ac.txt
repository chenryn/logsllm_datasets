        }
    }
可以看到，getFilterChainDefinitionMap()方法读取的集合，其实回顾到我们前面所描述的配置spring-shiro.xml中，可以看到，我们其实做了这样的一个配置
    /html/admin/**=authc,roles[admin]
    /html/user/**=user,roles[user]
    /jsp/admin/**=authc,roles[admin]
    /jsp/user/**=user,roles[user]
在第一步，就讲述了默认内置的filter具有哪些，以及一些常用的filter
可以看到，上面的四个FilterChainDefinition，都使用了最常用的filter
  * /html/admin/**：该路径的请求，需要当前用户在登录认证后的状态，以及用户为admin角色时才可访问
  * /html/user/**：该路径的请求，在用户曾经登录认证时，勾选了RememberMe，在后续登录状态，也即Session过期后，可以通过Cookie中的RememberMe进行免登录认证
  * /jsp/admin/**：与上述/html/admin/一致
  * /jsp/user/**：与上述/html/user/一致
也就是说，过滤器链的创建，跟这个FilterChainDefinition紧密关联，对于每一个path的配置，都会创建一个相应的过滤器链
看到这里，应该还会有人问，什么是过滤器链？
在shiro中，过滤器链就是我们前面两个步骤中的过滤器组成的一条链，当一个符合路径规则的请求进来后，都需要通过其执行一系列的过滤。
回到createInstance()方法，我们继续跟到下一个，也就是我们之前所说的PathMatchingFilterChainResolver的创建，前面也讲过了，这个resolver的作用是在一个http请求进来时，用于提取http请求的path，然后匹配相应的FilterChains进行过滤请求，也就是说，我们前面根据配置创建的过滤器链，需要通过这个resolver，才能知道某个请求执行哪一个过滤器链，为了一究其匹配原理，我们跟进PathMatchingFilterChainResolver
审阅代码，可以看到一个关键的方法-getChain()
    public FilterChain getChain(ServletRequest request, ServletResponse response, FilterChain originalChain) {
        FilterChainManager filterChainManager = getFilterChainManager();
        if (!filterChainManager.hasChains()) {
            return null;
        }
        String requestURI = getPathWithinApplication(request);
        //the 'chain names' in this implementation are actually path patterns defined by the user.  We just use them
        //as the chain name for the FilterChainManager's requirements
        for (String pathPattern : filterChainManager.getChainNames()) {
            // If the path does match, then pass on to the subclass implementation for specific checks:
            if (pathMatches(pathPattern, requestURI)) {
                if (log.isTraceEnabled()) {
                    log.trace("Matched path pattern [" + pathPattern + "] for requestURI [" + requestURI + "].  " +
                            "Utilizing corresponding filter chain...");
                }
                return filterChainManager.proxy(originalChain, pathPattern);
            }
        }
        return null;
    }
这个方法主要做了三件事情：
  1. 获取并检查FilterChainManager
  2. 获取当前请求的URL
  3. 遍历过滤器链filter chains，匹配当前请求URL相应的filter chain去执行
而上面第三件事情，就是PathMatchingFilterChainResolver的核心，它通过遍历我们前面创建的所有filter
chains，回顾前面我们对FilterChainDefinition的配置，它的URL都是一个正则的匹配字符串，也就是说，通过它去正则匹配当前请求的URL，只要能匹配上的第一个filter
chain，就是所要执行的过滤器链。
在PathMatchingFilterChainResolver创建成功后，最后会把我们所创建的SecurityManager和PathMatchingFilterChainResolver，参与到SpringShiroFilter的实例化中来，并作为真正的ShiroFilterFactoryBean返回。
SpringShiroFilter是ShiroFilterFactoryBean的一个静态内部类，它通过继承AbstractShiroFilter来实现shiro的核心功能（过滤请求）
    private static final class SpringShiroFilter extends AbstractShiroFilter {
        //...
    }
先上跟进AbstractShiroFilter以及其父类OncePerRequestFilter，并继续向上跟进源码，我们可以发现，最早它们都实现了javax.servlet.Filter，所以表明它们就是一个不折不扣的过滤器，查看OncePerRequestFilter的源码也能发现其对doFilter()方法的实现，看到这里，大家也会很清晰了，这个filter在请求进来的时候，通过过滤器肯定是会执行到这个方法
    public final void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String alreadyFilteredAttributeName = getAlreadyFilteredAttributeName();
        if ( request.getAttribute(alreadyFilteredAttributeName) != null ) {
            log.trace("Filter '{}' already executed.  Proceeding without invoking this filter.", getName());
            filterChain.doFilter(request, response);
        } else //noinspection deprecation
            if (/* added in 1.2: */ !isEnabled(request, response) ||
                /* retain backwards compatibility: */ shouldNotFilter(request) ) {
            log.debug("Filter '{}' is not enabled for the current request.  Proceeding without invoking this filter.",
                    getName());
            filterChain.doFilter(request, response);
        } else {
            // Do invoke this filter...
            log.trace("Filter '{}' not yet executed.  Executing now.", getName());
            request.setAttribute(alreadyFilteredAttributeName, Boolean.TRUE);
            try {
                doFilterInternal(request, response, filterChain);
            } finally {
                // Once the request has finished, we're done and we don't
                // need to mark as 'already filtered' any more.
                request.removeAttribute(alreadyFilteredAttributeName);
            }
        }
    }
在正常使用情况下，基本都是执行到doFilterInternal()方法，在跟进它的源码可以发现，它是一个抽象方法，因为OncePerRequestFilter是一个抽象类
    protected abstract void doFilterInternal(ServletRequest request, ServletResponse response, FilterChain chain)
                throws ServletException, IOException;
既然这是个抽象类，那么大概这个方法的实现是在其子类里了，果不其然，在其子类AbstractShiroFilter中
    protected void doFilterInternal(ServletRequest servletRequest, ServletResponse servletResponse, final FilterChain chain)
            throws ServletException, IOException {
        Throwable t = null;
        try {
            final ServletRequest request = prepareServletRequest(servletRequest, servletResponse, chain);
            final ServletResponse response = prepareServletResponse(request, servletResponse, chain);
            final Subject subject = createSubject(request, response);
            //noinspection unchecked
            subject.execute(new Callable() {
                public Object call() throws Exception {
                    updateSessionLastAccessTime(request, response);
                    executeChain(request, response, chain);
                    return null;
                }
            });
        } catch (ExecutionException ex) {
            t = ex.getCause();
        } catch (Throwable throwable) {
            t = throwable;
        }
        if (t != null) {
            if (t instanceof ServletException) {
                throw (ServletException) t;
            }
            if (t instanceof IOException) {
                throw (IOException) t;
            }
            //otherwise it's not one of the two exceptions expected by the filter method signature - wrap it in one:
            String msg = "Filtered request failed.";
            throw new ServletException(msg, t);
        }
    }
这个方法，我总结一下，主要做了两件总要的事情：
  1. 创建Subject
  2. 执行filter chains
那么我们一一跟进去，看看它们到底是如何工作的。
跟进createSubject()方法
    protected WebSubject createSubject(ServletRequest request, ServletResponse response) {
        return new WebSubject.Builder(getSecurityManager(), request, response).buildWebSubject();
    }
它通过了WebSubject的Builder，使用了创建者模式去创建这一个Subject的实现WebSubject
继续跟进buildWebSubject()方法
    public WebSubject buildWebSubject() {
        Subject subject = super.buildSubject();
        if (!(subject instanceof WebSubject)) {
            String msg = "Subject implementation returned from the SecurityManager was not a " +
                    WebSubject.class.getName() + " implementation.  Please ensure a Web-enabled SecurityManager " +
                    "has been configured and made available to this builder.";
            throw new IllegalStateException(msg);
        }
        return (WebSubject) subject;
    }
Subject->buildSubject
    public Subject buildSubject() {
        return this.securityManager.createSubject(this.subjectContext);
    }
最终可以发现，是通过我们配置的web安全管理器（WebSecurityManager）来创建Subject的
    public Subject createSubject(SubjectContext subjectContext) {
        //create a copy so we don't modify the argument's backing map:
        SubjectContext context = copy(subjectContext);
        //ensure that the context has a SecurityManager instance, and if not, add one:
        context = ensureSecurityManager(context);
        //Resolve an associated Session (usually based on a referenced session ID), and place it in the context before
        //sending to the SubjectFactory.  The SubjectFactory should not need to know how to acquire sessions as the
        //process is often environment specific - better to shield the SF from these details:
        context = resolveSession(context);
        //Similarly, the SubjectFactory should not require any concept of RememberMe - translate that here first
        //if possible before handing off to the SubjectFactory:
        context = resolvePrincipals(context);
        Subject subject = doCreateSubject(context);
        //save this subject for future reference if necessary:
        //(this is needed here in case rememberMe principals were resolved and they need to be stored in the
        //session, so we don't constantly rehydrate the rememberMe PrincipalCollection on every operation).
        //Added in 1.2:
        save(subject);
        return subject;
    }
  * SubjectContext context = copy(subjectContext);
对SubjectContext的一个简单复制，因为每次请求都应有它自己的一个上下文，不应该混合，所以每次请求，都会通过它去复制一个SubjectContext用于本次请求
  * context = ensureSecurityManager(context);
把安全管理器设置到SubjectContext中
  * context = resolveSession(context);
通过上下文中存储的session
id，去会话管理器，回顾我们前面的配置，可以知道是一个ehcache的会话管理器，意味着，我们得回话都是存储在缓存中的，使用ehcache可以更方便的进行集群部署，以同步回话数据
  * context = resolvePrincipals(context);
这个是RememberMe的核心处，也是我们后面要详细讲的地方
  * Subject subject = doCreateSubject(context);
根据前面做的事情，在这一步创建Subject
  * save(subject);
把Subject保存到Session中
**上面几点就是createSubject()方法逻辑的大概总结**
接下来我们进一步去分析RememberMe模块的逻辑，跟进resolvePrincipals()方法
    protected SubjectContext resolvePrincipals(SubjectContext context) {
        PrincipalCollection principals = context.resolvePrincipals();
        if (isEmpty(principals)) {
            log.trace("No identity (PrincipalCollection) found in the context.  Looking for a remembered identity.");
            principals = getRememberedIdentity(context);
            if (!isEmpty(principals)) {
                log.debug("Found remembered PrincipalCollection.  Adding to the context to be used " +
                        "for subject construction by the SubjectFactory.");
                context.setPrincipals(principals);
            } else {
                log.trace("No remembered identity found.  Returning original context.");
            }
        }
        return context;
    }
此处可以看到，是从上下文解析出凭证信息PrincipalCollection，如果获取不到，就会调用getRememberedIdentity()方法获取，最后设置到上下文中
    protected PrincipalCollection getRememberedIdentity(SubjectContext subjectContext) {
        RememberMeManager rmm = getRememberMeManager();
        if (rmm != null) {
            try {
                return rmm.getRememberedPrincipals(subjectContext);
            } catch (Exception e) {
                if (log.isWarnEnabled()) {
                    String msg = "Delegate RememberMeManager instance of type [" + rmm.getClass().getName() +
                            "] threw an exception during getRememberedPrincipals().";
                    log.warn(msg, e);
                }
            }
        }
        return null;
    }
    public RememberMeManager getRememberMeManager() {
        return rememberMeManager;
    }
回顾前面的安全管理器的bean配置，我们可以清楚的记得其实现class是org.apache.shiro.web.mgt.DefaultWebSecurityManager，也就是当前类DefaultSecurityManager的子类
我们观察该子类的构造方法
    public DefaultWebSecurityManager() {
        super();
        DefaultWebSessionStorageEvaluator webEvalutator = new DefaultWebSessionStorageEvaluator();  
        ((DefaultSubjectDAO) this.subjectDAO).setSessionStorageEvaluator(webEvalutator);
        this.sessionMode = HTTP_SESSION_MODE;
        setSubjectFactory(new DefaultWebSubjectFactory());
        setRememberMeManager(new CookieRememberMeManager());
        setSessionManager(new ServletContainerSessionManager());
        webEvalutator.setSessionManager(getSessionManager());
    }
从构造方法可以很清楚的了解到，RememberMeManager的实现为CookieRememberMeManager
那么，我们继续跟进到getRememberedPrincipals()方法中来