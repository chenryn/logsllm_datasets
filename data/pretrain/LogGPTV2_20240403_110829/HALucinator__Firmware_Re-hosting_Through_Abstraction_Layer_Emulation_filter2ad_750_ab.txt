or oscillator, this function’s handler merely needs to return
zero, to indicate it executed successfully. On the other hand, a
higher-ﬁdelity handler for the HAL_Ethernet_RX_Frame and
HAL_Ethernet_TX_Frame functions that enables sending
and receiving Ethernet frames emulates network functionality.
Our approach allows for handlers at multiple ﬁdelity levels
to co-exist in the same emulation.
3 Design
For our design to capitalize on the advantages of high-level
emulation, we need to (1) locate the HAL library functions
in the ﬁrmware (e.g., via library matching), (2) provide
high-level replacements for HAL functions, and (3) enable
external interaction with the emulated ﬁrmware.
HALucinator employs a modular design to facilitate its
use with a variety of ﬁrmware and analysis situations, as seen
in Figure 1. To introduce the various phases and components
of HALucinator, let us consider a simple example ﬁrmware
which uses a serial port to echo characters sent from an
attached computer. Aside from hardware initialization code,
this ﬁrmware needs only the ability to send and receive
serial data. The analyst notices the CPU of the device is an
STM32F4 microcontroller, and uses the LibMatch analysis
presented in Section 3.2, with a database built for STMicro-
electrics’ HAL libraries for this chip series. This identiﬁes
HAL_UART_Receive and HAL_UART_Transmit in the binary.
The analyst then creates a conﬁguration for HALucinator,
indicating that a set of handlers (i.e., the high-level function
replacements), for the included HAL, should be used. If
the handlers do not already exist, the analyst creates them.
These two HAL functions take as arguments a reference to
a serial port, buffer pointer, and a length. To save effort, these
handlers simply translete these arguments to and from a form
usable by the peripheral model for a serial port (e.g., the raw
data to be sent or received). Finally, the I/O Server transfers
the data between the serial port peripheral model and host
machine’s terminal. Now, when the ﬁrmware executes in
HALucinator, the ﬁrmware is usable through a terminal like
any other console program. This represents only a small
fraction of the capabilities of HALucinator, which we will
explore in detail in the following sections.
3.1 Prerequisites
While HALucinator offers a signiﬁcant amount of ﬂexibility,
there are a few requirements and assumptions regarding the
target ﬁrmware. First, the analyst must obtain the complete
ﬁrmware for the device. HALucinator focuses on OS-less
“blob” ﬁrmware images typically found in microcontrollers.
While no hardware is needed during emulation with HALu-
cinator, some details about the original device are needed
to know what exactly to emulate. HALucinator requires
the basic parameters needed to load the ﬁrmware into any
emulator, such as architecture, and generic memory layout
(e.g., where the Flash and RAM reside within memory).
We assume the analyst can also obtain the libraries, such
as HALs, OS library, middleware, or networking stacks they
want to emulate, and the toolchain typically used by that
chip vendor to compile them. Most chip vendors provide a
development environment, or at least a prescribed compiler
and basic set of libraries, to avoid complications from
customers using a variety of different compiler versions. As
such, the set of possible HAL and compiler combinations is
assumed to be somewhat small. While ﬁrmware developers
are free to use whatever toolchain they wish, we expect
that
the conveniences provided by these libraries and
toolchains, and the potential for support from the chip
vendor, has convinced a signiﬁcant number of developers to
take advantage of the vendor’s toolchain. In Section 7, we
discuss the possibility of using high-level emulation, even
in ﬁrmware without an automatically identiﬁable HAL.
HALucinator naturally requires an underlying emulator
able to faithfully execute the ﬁrmware’s code, and able to
support HALucinator’s instrumentation. This includes a
conﬁgurable memory layout, the ability to “hook” a speciﬁc
address in the code to trigger a high-level handler, and the
ability to access the emulator’s registers and memory to
perform the handler’s function.
While this may appear to be a long list of requirements,
in practice, obtaining them is straightforward. For the
ARM Cortex-M devices that we focus on in this work,
the general memory map is standardized and available
readily from the vendor-provided manual, the location of
the ﬁrmware in memory can be read from the ﬁrmware
blob itself, and common emulators such as QEMU [18]
faithfully emulate instructions. Each Cortex-M vendor
provides open-source HAL(s) for their chips, with compilers
and conﬁgurations [16, 34, 42, 53]. All that is needed for
HALucinator to be applied to a particular device is to obtain
the ﬁrmware, know the CPU’s vendor, and obtain their SDK.
3.2 LibMatch
A critical component of high-level emulation is the ability
to locate an abstraction in the program which can be used
as the basis for emulation. While those developers who wish
to re-host their own code, or those interested in open-source
ﬁrmware projects, can already obtain this information during
compilation, analysis of closed-source binary ﬁrmware by
third parties requires the ability to locate these libraries before
emulation can proceed. Existing approaches that address the
problem of ﬁnding functions in stripped binaries [24, 33, 35]
lack support for embedded CPU architectures, particularly the
USENIX Association
29th USENIX Security Symposium    1205
ARM Cortex-M architecture commonly used in many con-
sumer devices and used in this work. While much work has
also been done in comparing two binary programs [21, 28],
these schemes are not applicable out-of-the-box for
comparing a binary with its component libraries.
The nature of ﬁrmware itself further complicates library
matching. Firmware library functions are typically optimized
for size, and two functions with nearly identical code can
serve dramatically different purposes. Many smaller HAL
functions may simply be a series of preprocessor deﬁnitions
resolved at compile-time relating to I/O operations, which of
course serve different purposes depending on the peripheral
being used. One unusual feature of ﬁrmware library functions
is that they often call functions in the non-library part of
the code. With desktop libraries, it is typically expected that
library functions are monolithic, i.e., they execute, perform
their task, and return to the caller. This is often not true in
ﬁrmware; common patterns found in HALs include overrides,
where the developer overrides a weak symbol in the HAL
during compilation, or explicit callbacks, where code pointers
are passed in as function arguments. Therefore in order to
provide fully-working handlers, we must not only recover
the library functions’ names and addresses, but those of the
application code they call as well.
To address these problems, we create LibMatch, which
leverages the context of functions within a program to aid
in binary-to-library matching. LibMatch creates a database of
HAL functions to match by extracting the control-ﬂow graph
of the unlinked binary object ﬁles of the libraries, plus an In-
termediate Representation (IR) of their code. It then performs
the following steps to successively reﬁne possible matches:
1: Statistical comparison. We compare three basic metrics—
number of basic blocks, control ﬂow graph (CFG) edges,
and function calls—for each pair of function in the target
program and library functions in the database. If functions
differ on these three metrics, they are unlikely to be a match,
and removing these non-matches early provides a signiﬁcant
performance improvement.
2: Basic Block Comparison. For those pairs of functions
that match based on the previous step, we further compare
the content of their basic blocks, in terms of an intermediate
representation. We consider two functions a match if each
of their basic blocks’ IR content matches exactly. We
do, however, discard known pointers and relative offsets
used as pointers, and relocation targets, as these will differ
between the library and the binary’s IR code. Additionally,
unresolvable jump and call targets, even when they are
resolvable in the library but not in the binary, are ignored.
While our comparison metric is somewhat naive (i.e., some
environmental changes such as compiler, compiler ﬂags, or
source code may cause missing matches), and many more
complex matching schemes exist (as noted in Section 6), we
make the trade-off that any match is a true, high-conﬁdence
match. This trade-off is necessary, as inaccuracies in these
direct matches could have cascading effects when used to
derrive other matches via context. Even in the ideal scenario
of matching against the exact compiler and library versions,
collisions are still expected to occur, as we show in Section 5.
3: Contextual Matching. The previous step will produce a
set of matches, but also a set of collisions, those functions
that could not be distinguished from others. We therefore
leverage the function’s context within the target program to
disambiguate these cases, by locating places in the program
with matches to infer what other functions could be. While
many program difﬁng tools [21, 28] use two programs’ call
graphs to reﬁne their matching, we cannot, as our ‘second pro-
gram’, is a database of libraries. The libraries in the database
are entirely un-linked and have no call graph. We cannot even
infer the call graph of a function within a particular library, as
HALs may contain many identically-named functions chosen
via link-time options. Therefore, we use both caller context
and callee context, to effectively approximate the real call
graph of the library functions, disambiguate collisions, and
try to provide names for functions that may differ between
the library database and the target (e.g., names overridden by
the application code, or names outside the libraries entirely).
We ﬁrst leverage caller context to resolve collisions. For
each of the possible collided matches, we use the libraries’
debugging information to extract the set of called function
names. We obtain the same set of called function names from
the ambiguous function in the target binary, by using the
exact matches for each of the called functions. If the sets
of function names in the target and the collided match are
identical, the match continues to be valid, and others are
discarded. For callee context, we gather the set of functions
called by any function we were able to match exactly in
step two, and name them based on the debug symbols in the
library objects. If the function is a collision, it can then be
resolved. If the function is not in the database, such as due
to overrides by the application, it can then be named. Both
of these processes occur recursively, as resolving conﬂicts
in one function may lead to additional matches.
The Final Match. A valid match is identiﬁed if a unique
name is assigned to a given function in the target binary.
3.3 High-level Emulation
After function identiﬁcation, the emulator must replace
the execution of selected functions to ensure the re-hosted
ﬁrmware executes correctly. These intercepted functions
relate to the on-chip or off-chip peripherals of the device,
and are implemented manually. To simplify implementation,
our design breaks the needed implementation per library
into handlers, which encode each HAL function’s semantics,
and peripheral models which reﬂect aspects common to a
peripheral type. Under this scenario, each peripheral model
only has to be written once, requiring only a small specialized
handler for each matched HAL function.
1206    29th USENIX Security Symposium
USENIX Association
Handlers. We refer to high-level replacements for the HAL’s
code within the ﬁrmware as handlers. Creating handlers is
done manually, but only needs to be done once for each HAL
or library, and is independent of the ﬁrmware being analyzed.
Each HAL function, even those with the same purpose, will
likely vary in terms of function arguments, return value, and
exact internal semantics. However, as we will show in Sec-
tion 5, almost all handlers are simple, falling into a few basic
categories, such as performing trivial actions on a peripheral
model, returning a constant value, or doing nothing at all.
Some HALs can be quite large, but most ﬁrmware samples
only utilize a small fraction of the available functions. In
this case, the analyst can follow an iterative process to build
handlers. First, the analyst runs the binary in HALucinator,
which will report all I/O accesses that are not currently re-
placed by a handler, and where they occurred. If the ﬁrmware
gets stuck, or is missing desired behavior, the analyst can
evaluate which functions contain the I/O operations, and
consider implementing a handler. The process repeats, and
successive handlers produce greater coverage and more
accurate functionality. This process can even be performed
when the results of library matching are unavailable, or is
missing function names required for emulation.
Peripheral Models. Peripheral models intend to handle
common intrinsic aspects of what a certain class or type
of peripheral must do. They contain little actual logic, but
play an important role in creating a common interface
between the emulator and the outside world. For example,
the peripheral model for a serial port simply has data buffers
for transmission and reception of data. When a HAL’s serial
transmit and receive functions are called, the associated
handler can use the peripheral model to trivially perform
most, if not all, of its duties in an abstract way.
I/O Server. In order for the re-hosted ﬁrmware to meaning-
fully execute, it must interact with external devices located
outside of the CPU. Therefore, in addition to exchanging
data with the ﬁrmware, each peripheral model also deﬁnes
an interface for the host system to send data, receive data,
and trigger interrupts. These interfaces are then exposed
through an I/O server. The I/O server uses a publish/subscribe
design pattern, to which peripheral models publish and/or
subscribe to speciﬁc topics that they handle. For example,
an Ethernet model will send and receive messages on the
‘Ethernet.Frame’ topic, enabling it to connect with other
devices that can receive Ethernet frames.
Using the I/O server centralizes external communication
with the emulated system, by facilitating multiple use
cases without changing the emulator’s conﬁguration. For
example, the Ethernet model can be connected to: the host
Ethernet
interface, other emulated systems, or both, by
appropriately routing the messages published by the I/O
server. In addition, centralizing all I/O enables a program to
coordinate all external interactions of an emulated ﬁrmware.
For example, this program could coordinate pushing buttons,
sending/receiving Ethernet frames, and monitoring LED
status lights. This enables powerful multiple interface
instrumentation completely in software, and enables dynamic
analysis to explore complex internal states of the ﬁrmware.
Peripheral Accesses Outside a HAL. Replacing the HAL
with handlers and peripheral models simpliﬁes emulating
ﬁrmware, but occasionally, direct MMIO accesses from the
ﬁrmware will still occur. These can happen when a developer
deliberately breaks the HAL’s abstraction and interacts
with hardware directly, or when the compiler inlines a HAL
function. HALucinator will report all I/O outside handlers to
the user. Additionally, all read operations to these areas will
return zero, and all writes will be ignored, allowing code that
naively interacts with this hardware directly to execute with-
out crashing. We ﬁnd many MMIO operations, particularly
write operations setting peripheral ﬂags and conﬁgurations,
can be safely ignored as the emulator conﬁgures its resources
independent of the ﬁrmware. We discuss more severe cases,
such as ﬁrmware not using a HAL, in Section 7.
3.4 Fuzzing with HALucinator
The use of high-level emulation enables the ﬁrmware to
be used interactively, and also explored through automated
dynamic analyses, such as fuzzing. However, fuzzing—
especially coverage-guided fuzzing through, e.g., AFL [13]—
has different constraints than interactive emulation:
Fuzzed Input. First, the analyst needs to decide how the
mutated input should be provided to the target. HALucinator
provides a special fuzz peripheral model, which when used
in a handler, will dispense data from the fuzzer’s input stream
to the handler. Embedded systems may have multiple sources
of input, and this ﬂexibility allows the analyst to chose one
or more of them to fuzz.
Termination. Beyond providing input from the fuzzer, the
fuzzed ﬁrmware must terminate. Current fuzzers generally
target desktop programs, and expect them to terminate when
input is exhausted; however, ﬁrmware never terminates. Thus,
we design the fuzz model to gracefully exit the program,
sending a signal to the fuzzer that the program did not crash
during that execution.
Non-determinism.
non-
deterministic behavior, which must be removed to allow the
fuzzer to gather coverage metrics correctly. This is typically
removed from programs via instrumentation, and HALucina-
tor’s high-level emulation enables this as well. HALucinator
provides static handlers for randomness-producing functions
when they are identiﬁed, such as rand(), time(), or
vendor-speciﬁc functions providing these functionalities.
Timers. One special case of non-determinism are timers,
which often appear in microcontrollers as special peripherals
that
trigger interrupts and other events at a speciﬁed
interval. Because we cannot guarantee any clock rate for our
execution, implementing timers based on real time would
signiﬁcant
Firmware
has
USENIX Association
29th USENIX Security Symposium    1207
lead to non-deterministic behavior, as these timer events
can occur at any point in the program. We provide a Timer
peripheral model, which ties the timer’s rate to the number of
executed blocks, creating deterministic timer behavior, and
fair execution of the timer’s interrupt handlers and the main
program, regardless of emulation speed.
Crash Detection. Crash detection in embedded systems
remains a challenge [44]. A system based on high-level
emulation gains a signiﬁcant amount of crash detection ca-
pability from the visibility provided by the emulator, making
many generated faults much less silent. Just as with desktop
programs, we can instrument ﬁrmware to add additional
checks. High-level emulation handlers can perform their own
checks, such as checking pre-conditions of their arguments
(e.g., pointer validity, or positive buffer lengths). High-level
emulation can also be used to easily add instrumentation
usually handled at compile-time. For example, HALuci-
nator provides a heap-checking implementation similar to
ASAN [49], if the malloc and free symbols are available.
Input Generation. Finally, fuzzing requires representative
inputs to seed its mutation algorithms. HALucinator’s
fully-interactive mode can be used to interact with the device
and log the return values of library calls of interest, which
can be used to seed fuzzing. This removes the need for any
hardware, even while generating test inputs.
4 Implementation
We implement the concept of high-level emulation by creating
prototypes of LibMatch and HALucinator targeting the
widely-used and highly-diverse Cortex-M microcontrollers.
LibMatch Implementation. LibMatch uses the angr [50]
binary analysis platform. More speciﬁcally, it uses angr’s
VEX-based IR, control-ﬂow graph recovery, and ﬂexible
architecture support enables function labeling without any
dependence on speciﬁc program types or architecture features.
Statistics needed for matching are gathered using angr’s
CFG recovery analysis. This includes the basic block content
comparisons, which operate on top of the VEX IR statements
and their content. Implementing LibMatch for the Cortex-M
architecture required extending angr. We added support
for Cortex-M’s calling conventions, missing instructions,
function start detection and indirect jump resolution to
angr. After these extensions, angr was able to recover the
CFG. When run, LibMatch uses unlinked object ﬁles with
symbols, obtained by compiling the HAL and middleware
libraries to create a database of known functions. It then uses
this database to locate functions inside a ﬁrmware without
symbols. When LibMatch is then run against a ﬁrmware
sample, it outputs a list of identiﬁed functions and their
addresses, and makes note of collisions, in the event that a
human analyst wishes to resolve them manually.
HALucinator Implementation. HALucinator is imple-
mented in Python, and uses Avatar2 to set up a full-system
its execution.
QEMU emulation target and instrument
the memory layout (i.e.,
HALucinator takes as inputs:
size and location of Flash and RAM), a list of functions
to intercept with their associated handlers, and the list of
functions and addresses from LibMatch. It uses the addresses
of the functions to place a breakpoint on the ﬁrst instruction
of each function to be intercepted, and registers the handler to
execute when the breakpoint is hit. Note that, while Avatar2
is typically deployed as a hardware-in-the-loop orchestration
scheme, we use it here exclusively for its ﬂexible control of
QEMU, and not for any hardware-related purpose.
Handlers are implemented as Python classes, with each
function covering one or more functions in the ﬁrmware’s
HAL or libraries. The handlers can read and write the emula-
tor’s registers or memory, call functions in the ﬁrmware itself,
and interact with the peripheral models. Examples of simple
and more complex handlers can be found in [7] and [6].
Peripheral models are implemented as Python classes,
and can make full use of system libraries or the I/O server
to implement the desired functionalities. For example, calls
to get the time from a hardware real-time clock can simply