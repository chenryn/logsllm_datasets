available downstream bandwidth from each mbox to the vic-
tim and (ii) allocates the bandwidth to senders according to
the policies chosen by the victim.
Bandwidth Probe. The fundamental challenge of estimat-
ing downstream bandwidth is that MiddlePolice requires no
deployment at downstream links. Such a challenge is two-
sided: an overestimate will cause downstream ﬂooding, ren-
dering traﬃc policing useless, while an underestimate will
waste downstream capacity, reducing performance.
To solve the overestimation problem, MiddlePolice relies
on a capability feedback mechanism to make senders self-
report how many packets they have successfully delivered
to the victim. Speciﬁcally, upon a packet arrival, the mbox
stamps an unforgeable capability in the packet. When the
packet is delivered to the victim, MiddlePolice’s capability
handling module (CHM) deployed on the victim returns the
carried capability back to the mbox. If the capability is not
returned to the mbox after a suﬃciently long time interval
(compared with the RTT between the mbox and victim), the
mbox will consider the packet lost. Thus, the feedback en-
ables the mbox to infer a packet loss rate (hereinafter, LLR)
for each sender. Then the mbox estimates the downstream
capacity as the diﬀerence between the number of packets re-
ceived from all senders and packets lost on the downstream
path. As the estimation is based on the traﬃc volume deliv-
ered to the victim, this approach solves the overestimation
problem.
However, the above technique does not overcome the un-
derestimation problem. Speciﬁcally, since the traﬃc de-
mand may be less than downstream capacity, simply using
the volume of delivered traﬃc may cause underestimation.
To prevent underestimation, the mbox categorizes packets
from each sender as privileged packets and best-eﬀort pack-
ets. Speciﬁcally, the mbox maintains a rate window WR for
each sender to determine the amount of privileged packets
allowed for the sender in each period (hereinafter, detection
period ). WR is computed based on the above downstream
capacity estimation as well as victim-chosen policies. Pack-
ets sent beyond WR are classiﬁed as best-eﬀort packets. The
mbox forwards all privileged packets to the victim, whereas
the forwarding decisions for best-eﬀort packets are subject
to a short-term packet loss rate (hereinafter, SLR). The SLR
reﬂects downstream packet loss rates (congestion) at a RTT
granularity. That is, if the downstream is not congested
upon an arrival of a best-eﬀort packet, the mbox will for-
ward the packet. Thus, even when the downstream capacity
The Internet BackboneCloudCloudThe VictimISPISPThe mboxPacket FilteringDeﬁnition
Symb.
Dp
Thcap
Thrtt Maximum waiting time for cap. feedback
Thdrop
SLR thres. for dropping best-eﬀort pkts
The length of the detection period
The upper bound of capability ID
slr
β
Thlpass
Sslr
The weight of historical loss rates
The threshold for calculating LLR
The length limit of the cTable
Table 2. System parameters.
Value
4s
128
1s
0.05
0.8
5
100
TA to ts, increases both NR and Pid by one to reﬂect the
packet arrival and computes a capability using the updated
Pid and TA.
Upon receiving a packet from si with arrival time ta−TA >
Dp (Dp is the length of the detection period), the mbox starts
a new detection period for si by setting TA = ta. The mbox
also updates the remaining ﬁelds based on the traﬃc policing
algorithm (as described in §4.3.4). The algorithm depends
on si’s LLR and the mbox’s SLR, the computation of which
is described in the following two sections.
4.3.2 Inferring the LLR for Source si
Capability Generation. For each packet from si, the
mbox generates a distinct capability for the packet if (i) its
arrival time ta − TA 
, where Z0 is the
number of cTable entries that are not received. The mbox
then resets the current cTable to be empty to start a new
monitoring cycle for SLR.
4.3.4 Trafﬁc Policing Algorithm
We formalize the traﬃc policing logic in Algorithm 1.
Upon receiving a packet P , the mbox retrieves the entry
F in iTable matching P (line 8). If no entry matches, the
mbox initializes an entry for P .
P is categorized as a privileged or best-eﬀort packet based
on F’s WR (line 10). All privileged packets are accepted,
whereas best-eﬀort packets are accepted conditionally. If P
is privileged, the mbox performs necessary capability han-
dling (line 11) before appending P to the privileged queue.
The mbox maintains two FIFO queues to serve all accepted
packets: the privileged queue serving privileged packets and
the best-eﬀort queue serving best-eﬀort packets. The privi-
leged queue has strictly higher priority than the best-eﬀort
queue at the output port. CapabilityHandling (line 16) exe-
cutes the capability generation and cTable updates (line 37),
as detailed in §4.3.2 and §4.3.3.
Tslr + Thrtt, the mbox computes SLR = Z0Sslr
Algorithm 1: Traﬃc Policing Algorithm.
1 Input:
2
3 Output:
4
5
iTable updates and possible cTable updates;
The forwarding decision of P ;
Packet P arrived at time ts;
6 Main Procedure:
7 begin
8
9
10
F ← iTableEntryRetrieval(P );
F.NR ← F .NR + 1;
if F.NR  Dp then iTableHandling(F);
*/
*/
*/
16 Function: CapabilityHandling(P , F):
17 begin
18
19
20
21
22
23
/* Two constraints for distinct-capability generation */
if F.Pid < Thcap and ts−F.TA < Dp−Thrtt then
F.Pid ← F .Pid + 1;
Generate capability C based on Equation (1);
cTableHandling(C);
else
/* Common capability for packet authentication
Generate capability Cc based on Equation (2);
*/
24 Function: BestEﬀortHandling(P , F):
25 begin
26
if SLR < Thdrop
slr and F.LR < Thdrop
CapabilityHandling(P , F);
Append P to the best-eﬀort queue;
Drop P ; F.ND ← F .ND + 1;
slr
else
then
27
28
29
30
34
35
36
31 Function: iTableHandling(F):
32 begin
33
Compute recentLoss based on Equation (3);
/* Consider the historical loss rate
F.LR ← (1 − β) · recentLoss + β · F .LR;
WR ← BandwidthAllocationPolicy(F);
Reset WV , Pid, NR and ND to zero;
37 Function: cTableHandling(C):
38 begin
39
40
41
/* One batch of cTable is not ready
if cTable.length < Sslr then
if cTable.length == Sslr then Tslr ← ts ;
Add C into cTable;
*/
*/
slr
If P is a best-eﬀort packet, its forwarding decision is sub-
ject to the mbox’s SLR and F(cid:48)s LLR (line 24). If the SLR
exceeds Thdrop
, indicating downstream congestion, the mbox
discards P . Further, if F’s LLR is already above Thdrop
, the
mbox will not deliver best-eﬀort traﬃc for F as well since
F already experiences severe losses. Thdrop
is set to be few
times larger than a TCP ﬂow’s loss rate in normal network
condition [47] to absorb burst losses. If the mbox decides to
accept P , it performs capability handling (line 27).
slr
slr
Finally, if P ’s arrival triggers a new detection period for
F (line 15), the mbox performs corresponding updates for
F (line 31). To determine F’s LLR, the mbox incorporates
both the recent LLR (recentLoss) obtained in the current