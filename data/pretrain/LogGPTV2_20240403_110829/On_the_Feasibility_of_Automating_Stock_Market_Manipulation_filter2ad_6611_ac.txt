4.5 Profitability of Automated
Pump-and-Dump
To determine the cost and number of hijacked accounts rendered
unusable after manipulation, we extract the target stock and log of
fraudulent orders (identified by the SEC) from the two case files. We
compute the net cost of these orders along with the total leverage
needed to execute them and report the yielded profit and duration
of each manipulation session.
We only focus on the orders made to manipulate the market and
not the ones made by the culprit in advance to reap the benefits
3$5 per order is an upper bound for commission fees. In recent years, brokerages have
been eliminating them entirely [16].
of the manipulation since these orders do not affect the botnet’s
operation.
Results. Our results are summarized in Table 4. Based on the as-
sumption that an account holding $5,000 in cash costs $50 to hijack
(Subsection 4.3), the method from Willner’s case would require 2
to 8 accounts and generate at least $3,000 in profit (first three rows
of Table 4).
If we consider a modest botnet of 1,000 bots (i.e., 1,000 hijacked
accounts) and assume accounts are not reused across rounds, even
under the worst case scenario, it could generate $750,000 in profit.
These profits easily offset an upper-bound commission fee of $5
per order.
In comparison, the manipulation technique used in the Unknown
Traders case yields less profits for the botmaster, but also better
preserves the cash in the hijacked accounts. In the worst case, 50 to
300 hijacked accounts are needed, yielding at least $51,000 in profit
(last three rows in Table 4). A botnet of 1,000 hijacked accounts
would yield a lower bound of $228,000.
4.6 Botnet Self-Sustainability
Based on the numbers in Table 3, the profit for the criminal is greater
than the collective cost to the bots. In other words, the criminal can
feasibly use layering or PnD to achieve self-sustainability for the
botnet. To achieve this, the botmaster can take turns with the bots
in a round-robin fashion. When it is the botmaster’s turn, he will
buy stock at the deflated price and sell at the inflated price, earning
a profit. When it is the bots’ turn, they will collectively use their
own capital to buy stock at the deflated price and sell at the peak,
yielding their own profits.
To analyze the feasibility of this sustainable design, we extract
from the transaction logs the capital needed for the winner for
each provided example, which is at least $336,000. The results of
our analysis is summarized in Table 5. As the table shows, the
profit made by the bots in their round covers the loss from both the
botmaster and bot rounds. Thus, under the sustainable design, not
only will the bots (i.e., the hijacked accounts) never run out of cash,
they will slightly gain. This surprising result distinguishes stock
market manipulation from other forms of botnet scamming.
5 IMPLEMENTATION
Using our findings from Section 4, we create a fully functional proof-
of-concept malware, Bot2Stock, focusing on the scenario where
a criminal wants to manipulate a stock market using a botnet of
infected victims. We consider a malware that behaves similarly to
banking trojans (e.g., Zeus, GameOver) by infecting a victim’s web
browser. The way these infections occur (e.g., phishing or software
exploitation) is already studied in prior work.
5.1 Hijacking Brokerage Accounts at Scale
We focus on brokerage defenses that prevent or create awareness of
account intrusions. We collect our data from 3 of the 6 most popular
online brokerages in the United States. Our analysis includes the
availability of 2FA and default settings for event alerts. Namely,
when they are triggered and where they are delivered. Our findings
are summarized in Table 6.
282On the Feasibility of Automating Stock Market Manipulation
ACSAC 2020, December 7–11, 2020, Austin, USA
Table 5: Cost/Benefit Analysis (Bot Perspective) for the Sustainable Design
Round
Capital from Bots
Taub #1
Botmaster Round
Taub #1
Bot Round
Taub #2
Botmaster Round
Taub #2
Bot Round
Taub #3
Botmaster Round
Taub #3
Bot Round
$401, 000
$901, 000
$303, 000
$792, 000
$219, 000
$555, 000
Profit/Loss
Per Instance
$3, 285/$728
$3, 285/$728
$4, 927/$1, 345
$4, 927/$1, 345
$24, 501/$3, 065
$24, 501/$3, 065
Instances in Parallel
(1,000 bots)
Accumulated Bot Loss
Bot Net Profit
12
5
14
6
22
9
$8, 736
$12, 376
$18, 830
$26, 900
$67, 430
$95, 015
$0
$4, 049
$0
$2, 662
$0
$12, 5494
Table 6: Comparison of Brokerage Security Features
TOTP 2FA
Alerts
Software Hardware
Brokerage
Brokerage A
Brokerage B
Brokerage C
Email Mobile
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
TOTP(cid:71)(cid:35) = Setup requires call Alert(cid:71)(cid:35) = Disabled by default
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
SMS
(cid:32)
Two-Factor Authentication. By default, the three online bro-
kerages do not require 2FA, which is consistent across the industry.
Other work has shown that users are unlikely to take the initiative
to setup 2FA if it is not mandatory [38], lowering the bar for attacks
like phishing.
At the time of writing, all three brokerages support software
TOTP via the Symantec VIP Access application, as shown in the
left-most column of Table 6. Brokerages A and B also support TOTP
via a dedicated hardware token (second column), whereas C uses
SMS or phone calls (third column).
While hardware TOTP is regarded as more secure than its soft-
ware alternative, SMS and phone calls are weaker due to threats
like SIM swapping [40], which can allow an adversary to intercept
codes. All of these 2FA schemes can be phished or intercepted,
which works in the botmaster’s favor.
Alert Triggers & Delivery. By default, all three online broker-
ages generate alerts when security settings are modified and when
orders are created or their status changes (e.g., filled or canceled).
A summary is also generated at the end of each day where orders
occurred. Users can disable the per-order notifications to avoid
being bombarded during frequent trading.
By default, all three brokerages deliver their alerts via email only,
as shown in the fourth column of Table 6. Users can also receive
notifications on their mobile devices (fifth column), but they must
enable this feature.
Email notifications can be silently deleted by the malware us-
ing filter rules (Subsection 5.2). Mobile notifications can only be
deleted at scale if the malware infects the mobile device, presenting
a higher risk of discover. However, this is not the default behavior
for brokerage accounts.
5.2 Architecture
We base the design of Bot2Stock after the man-in-the-browser
architectures typically utilized by banking trojans. Specifically, our
proof-of-concept malware is able to: 1) read and modify any web
page visited by the user, 2) record all HTTP(S) header information,
including cookies, 3) spawn additional browser sessions to perform
arbitrary web requests, 4) add and remove filter rules from popular
email services (i.e., Google, Yahoo, Microsoft), and 5) create trade
orders in popular brokerage services and simulators.4 We have
open sourced our proof-of-concept and recorded a demonstration
video of the attack.5
Figure 1 shows the steps in performing the attack. First, the
malware adds itself as a certificate authority to the victim’s browser.
It then spawns a local proxy server and configures the browser to
route all traffic through it. SSL bumping is used so the malware can
decipher encrypted data.
The malware’s core logic is implemented inside an internet con-
tent adaptation protocol (ICAP) server. It is able to arbitrarily read
and modify requests and spawn and control additional browser
sessions.
The malware silently captures credentials and session cookies
as the user navigates sites. Once it has the necessary materials to
access the user’s email and brokerage accounts, a new browser
session is spawned with this data. For demonstration purposes, we
make this browser visible so researchers can observe the actions
being performed by the malware.
Before performing any manipulations, the malware adds filter
rules to the victim’s email account so trade notifications will be
silently deleted. These rules are very flexible, allowing the malware
4For ethical reasons, we only open source the simulator automation.
5https://github.com/carter-yagemann/Bot2Stock/blob/master/demo.mp4
283ACSAC 2020, December 7–11, 2020, Austin, USA
Carter Yagemann, et al.
Figure 1: Bot2Stock architecture. Using a proxy and ICAP server, Bot2Stock is able to read, modify, and spoof web traffic.
to delete the brokerage notifications its actions generate while
allowing any made by the victim to pass through [21, 32, 33].
The malware then contacts the botmaster and makes its mali-
cious trades while keeping a transaction log. If the victim accesses
their history in the brokerage site, the malware will intercept the
response and remove the malicious orders to hide them, presenting
the user with a falsified transaction history.
6 SIMULATION
The analysis from Section 4 demonstrates that layering is profitable
for real-world criminals and may even be self-sustainable for a
botnet under the right settings. However, all the studied cases
were performed manually by one or two perpetrators. It is unclear
whether layering can be used by a botnet to the same result. To
address this question, we turn to agent-based simulation to consider
the performance of Bot2Stock under various conditions.
6.1 Simulator Design
Stock markets are extremely difficult to model and simulations
are hard (if not impossible) to validate for realism. To simulate
Bot2Stock, we leverage an agent-based discrete event simulator [9],
which is the most advance type of simulation accepted for modeling
stock markets [28, 46, 52]. It is also used in industry to evaluate
multi-agent interactions [5, 34].
Our simulation consists of a collection of background agents that
trade a stock based on a mixture of trading strategies (elaborated
on in Subsection 6.2). Orders are placed by sending messages to an
exchange agent that maintains an order book for the stock. Mes-
sages follow the same protocol used by NASDAQ, which includes
allowing agents to query for the latest order stream and current or-
der book spread. Thus, agents can adjust their strategies in reaction
to the current state of the open orders at the exchange.
The simulation models time at a nanosecond granularity. Agents
are “woken up” by the simulator’s kernel when it is their turn to
perform computations and send messages. When an agent finishes
performing its actions for that time step, it is put back to sleep. The
kernel awakens agents as they receive messages and at specific
times requested by the agent.
To account for the time it would take a real-world agent to
perform its computations, we apply a constant computational delay
factor whenever an agent wakes up along with a latency delay,
which is calculated as the sum of a constant minimum latency and
a non-negative random noise factor:
a + b(i, j) + P(i, j)
(1)
Here, a is the computational delay constant, b(i, j) is the minimum
latency from agent i to agent j and P(i, j) is a random noise factor
for that connection.
6.2 Background Agents
Similar to related work on simulating stock markets, we use a com-
bination of Zero Intelligence (ZI) and Heuristic Belief Learning (HBL)
agents to represent the benign traders. Both agents rely on a fun-
damental belief value for the worth of the stock, which they derive
from noisy observations provided by an oracle. At the start of the
simulation, these agents enter the market with a Poisson distribu-
tion and place their orders based on their trading strategies, which
we elaborate on in the following paragraphs. Readers interested in
the exact formulas should refer to the spoofing work by Wang and
Wellman [51].
Zero Intelligence (ZI). These agents randomly buy and sell
shares based on the current price of the stock and their funda-
mental belief, which they regularly observe from the oracle. More
specifically, the decision to buy or sell is picked randomly and the
limit price is a bounded uniformly random offset from the funda-
mental belief value. There is also a strategic threshold, which allows
the ZI agent to place an order at the current price if it is within a
certain threshold of the fundamental belief.
Heuristic Belief Learning (HBL). These agents start with the
same strategy as the ZI agents, but also track the stream of recent
orders up to a configured memory length. Once enough orders exist
to fill the memory, the HBL agents start adjusting the limit prices
of their orders based on the transacted and rejected bids and asks.
In other words, unlike the ZI agents, these agents are influenced
by order book pressure, which is necessary to model the impact of
layering.
Fundamental Belief Oracle (FBO). In order for the agents to
create reasonable trades, they each need a fundamental belief of
what the stock is worth. To control these fundamental belief values,
we use a special agent to act as an oracle. This agent has no com-
putational delay or network latency and when agents query it to
update their beliefs, they receive a noisy reading of the fundamen-
tal value of the stock at that particular time step. Prior work has
shown that such an oracle can be used to guide the simulation in
following the trading patterns of real historical data [9], which to
our knowledge is the best evidence to date presented for defending
the simulation validity of a stock market simulator.
To avoid adding unnecessary complexity to our results, we use
a mean reverting FBO, which maintains a constant fundamental
belief value prior to adding noise for particular observations by the
284On the Feasibility of Automating Stock Market Manipulation
ACSAC 2020, December 7–11, 2020, Austin, USA
background agents. With this oracle, the background agents will
tend to drive the stock price towards a mean value in the absence
of manipulation.
6.3 Bot2Stock Agents & C2 Protocol
Our botmaster’s strategy is as follows: 1) buy shares when the
market opens at the best available price, 2) wait for a predetermined
attack time, 3) signal the layering bots (i.e., hijacked accounts) to
begin their manipulation, 4) wait a predetermined duration, 5) sell
the previously acquired shares, and then 6) signal the bots to cease
manipulation. Note that in a real-world setting, the botmaster would
more likely buy shares slowly over an extended period of time to
reduce the risk of being detected, but for simplicity we reduce the
pre-attack setup to a single bulk buy.
For the layering bots, our agents periodically poll the botmaster
and wait quietly for the attack signal. When it is raised, the bots
follow the layering strategy described in Subsection 4.1. They pe-
riodically poll the exchange to track the order book spread while
placing and canceling orders accordingly to maintain open bids that
are always slightly worse than the current best bid. For simplicity,
we only simulate the bots placing bids to drive the price up, but it
is feasible for them to also place asks to drop the price. When they
receive the signal to stop, they cancel all remaining open orders.
In the ideal scenario, the bot orders would never execute because
they are always slightly worse than the best available offer. However
in practice, due to delays and latency, some orders will execute
by accident, which negatively impacts the botmaster’s profits by
causing the price to move in the undesired direction. Thus, one of
the key factors in determining the botnet’s success is in maintaining
open orders close enough to the best offer to influence the HBL
agents while avoiding executing too many by accident.
6.4 Evaluation Methodology
The purpose of our experiments is to evaluate the robustness of
Bot2Stock under different settings. Each experiment consists of
several hundred trial pairs for each tested value of the independent
variable. Pairs consist of a “control” simulation with no bot agents
and a “treatment” simulation with bots. The same random seed
is used within each pair so the background agents will make the
same decisions, thus isolating the impact caused by the bots. The
dependent variable we measure is the difference in the botmaster’s
profits with and without the bots.
Each trial simulates 2.5 seconds, which we find is enough time
for the layering to have an impact on the stock price. We use a