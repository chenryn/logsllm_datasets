Nimbus5 is a JWS implementation in Java. The Nimbus library 
knows how to build and parse a JWS. A JWS application can be 
anything, which uses JWS internally. A JWS application uses a 
JWS implementation to build or parse a JWS. In this case, the typ 
parameter is just another parameter for the JWS implementation. It 
will not try to interpret the value of it, but the JWS application would. 
The typ parameter will help JWS applications to differentiate the 
content when multiple types of objects are present. For a JWS token 
using JWS compact serialization and for a JWE token using JWE 
compact serialization, the value of the typ parameter is JOSE, and for 
a JWS token using JWS JSON serialization and for a JWE token using 
JWE JSON serialization, the value is JOSE+JSON. (JWS serialization is 
discussed later in this chapter, and JWE serialization is discussed in 
Chapter 8). The typ is an optional parameter in the JOSE header.
5 Nimbus JWT Java implementation, http://connect2id.com/products/nimbus-jose-jwt
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
171
• 
cty: The cty parameter in the JOSE header is used to represent 
the media type of the secured content in the JWS. It is only 
recommended to use this parameter in the case of a nested JWT. The 
nested JWT is discussed later in Chapter 8, and the definition of 
the cty parameter is further explained there. The cty is an optional 
parameter in the JOSE header.
• 
crit: The crit parameter in the JOSE header is used to indicate the 
recipient of the JWS that the presence of custom parameters, which 
neither defined by the JWS or JWA specifications, in the JOSE header. If 
these custom parameters are not understood by the recipient, then the 
JWS token will be treated as invalid. The value of the crit parameter 
is a JSON array of names, where each entry represents a custom 
parameter. The crit is an optional parameter in the JOSE header.
Out of all the 11 parameters defined earlier, 7 talk about how to reference the public 
key corresponding to the key, which is used to sign the JSON payload. There are three 
ways of referencing a key: external reference, embedded, and key identifier. The jku 
and x5u parameters fall under the external reference category. Both of them reference 
the key through a URI. The jwk and x5c parameters fall under embedded reference 
category. Each one of them defines how to embed the key to the JOSE header itself. The 
kid, x5t, and x5t#s256 parameters fall under the key identifier reference category. All 
three of them define how to locate the key using an identifier. Then again all the seven 
parameters can further divide into two categories based on the representation of the key: 
JSON Web Key (JWK) and X.509. The jku, jwk, and kid fall under the JWK category, while 
x5u, x5c, x5t, and x5t#s256 fall under the X.509 category. In the JOSE header of a given 
JWS token, at a given time, we only need to have one from the preceding parameters.
Note If any of the jku, jwk, kid, x5u, x5c, x5t, and x5t#s256 are present 
in the JOSE header, those must be integrity protected. Failure to do so will let 
an attacker modify the key used to sign the message and change the content of 
the message payload. After validating the signature of a JWS token, the recipient 
application must check whether the key associated with the signature is trusted. 
Checking whether the recipient knows the corresponding key can do the trust 
validation.
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
172
The JWS specification does not restrict applications only to use 11 header parameters 
defined earlier. There are two ways to introduce new header parameters: public header 
names and private header names. Any header parameter that is intended to use in the 
public space should be introduced in a collision-resistant manner. It is recommended to 
register such public header parameters in the IANA JSON Web Signature and Encryption 
Header Parameters registry. The private header parameters are mostly used in a 
restricted environment, where both the token issuer and the recipients are well aware 
of each other. These parameters should be used with caution, because there is a chance 
for collision. If a given recipient accepts tokens from multiple token issuers, then the 
semantics of the same parameter may be different from one issuer to another, if it is a 
private header. In either case, whether it’s a public or a private header parameter, if it is 
not defined in the JWS or the JWA specification, the header name should be included in 
the crit header parameter, which we discussed before.
 JWS Payload
The JWS payload is the message that needs to be signed. The message can be anything—
need not be a JSON payload. If it is a JSON payload, then it could contain whitespaces 
and/or line breaks before or after any JSON value. The second element of the serialized 
JWS token carries the base64url-encoded value of the JWS payload.
 JWS Signature
The JWS signature is the digital signature or the MAC, which is calculated over the JWS 
payload and the JOSE header. The third element of the serialized JWS token carries the 
base64url- encoded value of the JWS signature.
 The Process of Signing (Compact Serialization)
We discussed about all the ingredients that are required to build a JWS token under 
compact serialization. The following discusses the steps involved in building a JWS 
token. There are three elements in a JWS token; the first element is produced by step 2, 
the second element is produced by step 4, and the third element is produced by step 7.
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
173
 1. Build a JSON object including all the header parameters, which 
express the cryptographic properties of the JWS token—this is 
known as the JOSE header. As discussed before in this chapter, 
under the section “JOSE Header,” the token issuer should 
advertise in the JOSE header the public key corresponding to 
the key used to sign the message. This can be expressed via any 
of these header parameters: jku, jwk, kid, x5u, x5c, x5t, and 
x5t#s256.
 2. Compute the base64url-encoded value against the UTF-8 
encoded JOSE header from step 1 to produce the first element of 
the JWS token.
 3. Construct the payload or the content to be signed—this is known 
as the JWS payload. The payload is not necessarily JSON—it can 
be any content.
 4. Compute the base64url-encoded value of the JWS payload from 
step 3 to produce the second element of the JWS token.
 5. Build the message to compute the digital signature or the 
MAC. The message is constructed as ASCII(BASE64URL-
ENCODE(UTF8(JOSE Header)) . BASE64URL-ENCODE(JWS 
Payload)).
 6. Compute the signature over the message constructed in step 5, 
following the signature algorithm defined by the JOSE header 
parameter alg. The message is signed using the private key 
corresponding to the public key advertised in the JOSE header.
 7. Compute the base64url-encoded value of the JWS signature 
produced in step 6, which is the third element of the serialized 
JWS token.
 8. Now we have all the elements to build the JWS token in the 
following manner. The line breaks are introduced only for clarity.
BASE64URL(UTF8(JWS Protected Header)).
BASE64URL(JWS Payload).
BASE64URL(JWS Signature)
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
174
 JWS JSON Serialization
In contrast to the JWS compact serialization, the JWS JSON serialization can produce 
multiple signatures over the same JWS payload along with different JOSE header 
parameters. The ultimate serialized form under JWS JSON serialization wraps the 
signed payload in a JSON object, with all related metadata. This JSON object includes 
two top-level elements, payload and signatures, and three subelements under the 
signatures element: protected, header, and signature. The following is an example 
of a JWS token, which is serialized with JWS JSON serialization. This is neither URL 
safe nor optimized for compactness. It carries two signatures over the same payload, 
and each signature and the metadata around it are stored as an element in the JSON 
array, under the signatures top-level element. Each signature uses a different key to 
sign, represented by the corresponding kid header parameter. The JSON serialization 
is also useful in selectively signing JOSE header parameters. In contrast, JWS compact 
serialization signs the complete JOSE header:
{
"payload":"eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzOD",
"signatures":[
               {
                  "protected":"eyJhbGciOiJSUzI1NiJ9",
                  "header":{"kid":"2014-06-29"},
                  "signature":"cC4hiUPoj9Eetdgtv3hF80EGrhuB"
               },
               {
                  "protected":"eyJhbGciOiJFUzI1NiJ9",
                  "header":{"kid":"e909097a-ce81-4036-9562-d21d2992db0d"},
                  "signature":"DtEhU3ljbEg8L38VWAfUAqOyKAM"
               }
             ]
}
 JWS Payload
The payload top-level element of the JSON object includes the base64url-encoded value 
of the complete JWS payload. The JWS payload necessarily need not be a JSON payload, it 
can be of any content type. The payload is a required element in the serialized JWS token.
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
175
 JWS Protected Header
The JWS Protected Header is a JSON object that includes the header parameters 
that have to be integrity protected by the signing or MAC algorithm. The protected 
parameter in the serialized JSON form represents the base64url-encoded value of the 
JWS Protected Header. The protected is not a top-level element of the serialized JWS 
token. It is used to define elements in the signatures JSON array and includes the 
base64url-encoded header elements, which should be signed. If you base64url-decode 
the value of the first protected element in the preceding code snippet, you will see 
{"alg":"RS256"}. The protected parameter must be present, if there are any protected 
header parameters. There is one protected element for each entry of the signatures 
JSON array.
 JWS Unprotected Header
The JWS Unprotected Header is a JSON object that includes the header parameters that 
are not integrity protected by the signing or MAC algorithm. The header parameter in the 
serialized JSON form represents the base64url-encoded value of the JWS Unprotected 
Header. The header is not a top-level parameter of the JSON object. It is used to define 
elements in the signatures JSON array. The header parameter includes unprotected 
header elements related to the corresponding signature, and these elements are not 
signed. Combining both the protected headers and unprotected headers ultimately 
derives the JOSE header corresponding to the signature. In the preceding code snippet, 
the complete JOSE header corresponding to the first entry in the signatures JSON array 
would be {"alg":"RS256", "kid":"2010-12-29"}. The header element is represented 
as a JSON object and must be present if there are any unprotected header parameters. 
There is one header element for each entry of the signatures JSON array.
 JWS Signature
The signatures parameter of the JSON object includes an array of JSON objects, 
where each element includes a signature or MAC (over the JWS payload and JWS 
protected header) and the associated metadata. This is a required parameter. The 
signature subelement, which is inside each entry of the signatures array, carries the 
base64url-encoded value of the signature computed over the protected header elements 
(represented by the protected parameter) and the JWS payload. Both the signatures 
and signature are required parameters.
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
176
Note Even though JSON serialization provides a way to selectively sign JOSE 
header parameters, it does not provide a direct way to selectively sign the 
parameters in the JWS payload. Both forms of serialization mentioned in the 
JWS specification sign the complete JWS payload. There is a workaround for this 
using JSON serialization. you can replicate the payload parameters that need to 
be signed selectively in the JOSE header. Then with JSON serialization, header 
parameters can be selectively signed.
 The Process of Signing (JSON Serialization)
We discussed about all the ingredients that are required to build a JWS token under 
JSON serialization. The following discusses the steps involved in building the JWS token.
 1. Construct the payload or the content to be signed—this is known 
as the JWS payload. The payload is not necessarily JSON—it can 
be any content. The payload element in the serialized JWS token 
carries the base64url-encoded value of the content.
 2. Decide how many signatures you would need against the payload 
and for each case which header parameters must be signed and 
which are not.
 3. Build a JSON object including all the header parameters that are 
to be integrity protected or to be signed. In other words, construct 
the JWS Protected Header for each signature. The base64url-
encoded value of the UTF-8 encoded JWS Protected Header 
will produce the value of the protected subelement inside the 
signatures top-level element of the serialized JWS token.
 4. Build a JSON object including all the header parameters that 
need not be integrity protected or not be signed. In other words, 
construct the JWS Unprotected Header for each signature. This will 
produce the header subelement inside the signatures top-level 
element of the serialized JWS token.
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
177
 5. Both the JWS Protected Header and the JWS Unprotected Header 
express the cryptographic properties of the corresponding 
signature (there can be more than one signature element)—
this is known as the JOSE header. As discussed before in this 
chapter, under the section “JOSE Header,” the token issuer should 
advertise in the JOSE header the public key corresponding to 
the key used to sign the message. This can be expressed via any 
of these header parameters: jku, jwk, kid, x5u, x5c, x5t, and 
x5t#s256.
 6. Build the message to compute the digital signature or the MAC 
against each entry in the signatures JSON array of the serialized 
JWS token. The message is constructed as ASCII(BASE64URL- 
ENCODE(UTF8(JWS Protected Header)). BASE64URL-
ENCODE(JWS Payload)).
 7. Compute the signature over the message constructed in step 
6, following the signature algorithm defined by the header 
parameter alg. This parameter can be either inside the JWS 
Protected Header or the JWS Unprotected Header. The message 
is signed using the private key corresponding to the public key 
advertised in the header.
 8. Compute the base64url-encoded value of the JWS signature 
produced in step 7, which will produce the value of the signature 
subelement inside the signatures top-level element of the 
serialized JWS token.
 9. Once all the signatures are computed, the signatures top-level 
element can be constructed and will complete the JWS JSON 
serialization.
SIGNATURE TYPES
The XML Signature specification, which was developed under W3C, proposes three types of 
signatures: enveloping, enveloped, and detached. These three kinds of signatures are only 
discussed under the context of XML.
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
178
With the enveloping signature, the XML content to be signed is inside the signature itself. 
That is, inside the  
element.
With the enveloped signature, the signature is inside the XML content to be signed. In other 
words, the  
element is inside the parent element of the XML payload to be signed.
With the detached signature, there is no parent-child relationship between the XML content to 
be signed and the corresponding signature. They are detached from each other.
For anyone who is familiar with XML Signature, all the signatures defined in the JWS 
specification can be treated as detached signatures.
Note The XML Signature specification by W3C only talks about signing an XML 
payload. If you have to sign any content, then first you need to embed that within 
an XML payload and then sign. In contrast, the JWS specification is not just limited 
to JSON. you can sign any content with JWS without wrapping it inside a JSON 
payload.
GENERATING A JWS TOKEN WITH HMAC-SHA256 WITH A JSON PAYLOAD
The following Java code generates a JWS token with HMAC-SHA256. you can download the 
complete Java sample as a Maven project from https://github.com/apisecurity/
samples/tree/master/ch07/sample02.
The method buildHmacSha256SignedJWT() in the code should be invoked by passing a 
secret value that is used as the shared key to sign. The length of the secret value must be at 
least 256 bits:
public static String buildHmacSha256SignedJSON(String sharedSecretString) 
throws JOSEException {
// build audience restriction list.
List aud = new ArrayList();
aud.add("https://app1.foo.com");
aud.add("https://app2.foo.com");
CHAPTER 7  MESSAgE-LEvEL SECuRITy WITH JSON WEB SIgNATuRE
179
Date currentTime = new Date();
// create a claims set.
JWTClaimsSet jwtClaims = new JWTClaimsSet.Builder().
                                // set the value of the issuer.
                                issuer("https://apress.com").
                                 // set the subject value - JWT belongs to  
// this subject.
                                subject("john").
                                // set values for audience restriction.
                                audience(aud).
                                // expiration time set to 10 minutes.
                                 expirationTime(new Date(new Date().getTime() 
+ 1000 * 60 * 10)).
                                 // set the valid from time to current time.
                                notBeforeTime(currentTime).
                                // set issued time to current time.
                                issueTime(currentTime).
                                 // set a generated UUID as the JWT  
// identifier.
                                jwtID(UUID.randomUUID().toString()).
                                build();
// create JWS header with HMAC-SHA256 algorithm.
JWSHeader jswHeader = new JWSHeader(JWSAlgorithm.HS256);
// create signer with the provider shared secret.