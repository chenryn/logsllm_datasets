## 阿里云RDS PostgreSQL 12 + pgpool 的读写分离配置    
### 作者                                                                          
digoal                                                                                                                   
### 日期                                                                                                                   
2020-02-29                                                                                                               
### 标签                                                                                                                   
PostgreSQL , 阿里云 , pgpool , 读写分离 , 只读实例    
----                 
## 背景      
pgpool 毫无疑问, 是PG里面读写分离最好的选择, 虽然它自身有一些性能损耗, 但是只要你不用它来做数据库的HA, 它自身是无状态的, 也能横向扩展.    
例如阿里云rds pg+只读实例, RDS PG自己有HA, 所以不用pgpool来负责ha, 使用pgpool配置读写分离会非常的简单.     
## 例子    
### 部署环境    
首先模拟环境, 如果你买的是阿里云rds pg+只读实例, 跳过这一步, 安装好pgpool后, 可以直接跳到配置pgpool    
测试环境 ECS: 16C 64G 1.8T SSD CentOS 7.7 x64    
参考如下进行配置:    
[《fio io测试阿里云ecs 本地ssd, essd性能 - 1》](../201912/20191228_02.md)      
[《PostgreSQL 12 on 阿里云ecs 本地ssd VS essd pl3性能 - 含fio,fsync test,pgbench test，优缺点、云盘PG内核优化建议》](../201912/20191228_04.md)      
1、sysctl.conf    
小内存机器千万注意, 末尾几个参数别设太大, 会开不了机    
```    
vi /etc/sysctl.conf    
# add by digoal.zhou                  
fs.aio-max-nr = 1048576                  
fs.file-max = 76724600                  
# 可选：kernel.core_pattern = /data01/corefiles/core_%e_%u_%t_%s.%p                           
# /data01/corefiles 事先建好，权限777，如果是软链接，对应的目录修改为777                  
kernel.sem = 4096 2147483647 2147483646 512000                      
# 信号量, ipcs -l 或 -u 查看，每16个进程一组，每组信号量需要17个信号量。                  
kernel.shmall = 107374182                        
# 所有共享内存段相加大小限制 (建议内存的80%)，单位为页。                  
kernel.shmmax = 274877906944                     
# 最大单个共享内存段大小 (建议为内存一半), >9.2的版本已大幅降低共享内存的使用，单位为字节。                  
kernel.shmmni = 819200                           
# 一共能生成多少共享内存段，每个PG数据库集群至少2个共享内存段                  
net.core.netdev_max_backlog = 10000                  
net.core.rmem_default = 262144                         
# The default setting of the socket receive buffer in bytes.                  
net.core.rmem_max = 4194304                            
# The maximum receive socket buffer size in bytes                  
net.core.wmem_default = 262144                         
# The default setting (in bytes) of the socket send buffer.                  
net.core.wmem_max = 4194304                            
# The maximum send socket buffer size in bytes.                  
net.core.somaxconn = 4096                  
net.ipv4.tcp_max_syn_backlog = 4096                  
net.ipv4.tcp_keepalive_intvl = 20                  
net.ipv4.tcp_keepalive_probes = 3                  
net.ipv4.tcp_keepalive_time = 60                  
net.ipv4.tcp_mem = 8388608 12582912 16777216                  
net.ipv4.tcp_fin_timeout = 5                  
net.ipv4.tcp_synack_retries = 2                  
net.ipv4.tcp_syncookies = 1                      
# 开启SYN Cookies。当出现SYN等待队列溢出时，启用cookie来处理，可防范少量的SYN攻击                  
net.ipv4.tcp_timestamps = 1                      
# 减少time_wait                  
net.ipv4.tcp_tw_recycle = 0                      
# 如果=1则开启TCP连接中TIME-WAIT套接字的快速回收，但是NAT环境可能导致连接失败，建议服务端关闭它                  
net.ipv4.tcp_tw_reuse = 1                        
# 开启重用。允许将TIME-WAIT套接字重新用于新的TCP连接                  
net.ipv4.tcp_max_tw_buckets = 262144                  
net.ipv4.tcp_rmem = 8192 87380 16777216                  
net.ipv4.tcp_wmem = 8192 65536 16777216                  
net.nf_conntrack_max = 1200000                  
net.netfilter.nf_conntrack_max = 1200000                  
vm.dirty_background_bytes = 409600000                         
#  系统脏页到达这个值，系统后台刷脏页调度进程 pdflush（或其他） 自动将(dirty_expire_centisecs/100）秒前的脏页刷到磁盘                  
#  默认为10%，大内存机器建议调整为直接指定多少字节                  
vm.dirty_expire_centisecs = 3000                               
#  比这个值老的脏页，将被刷到磁盘。3000表示30秒。                  
vm.dirty_ratio = 95                                            
#  如果系统进程刷脏页太慢，使得系统脏页超过内存 95 % 时，则用户进程如果有写磁盘的操作（如fsync, fdatasync等调用），则需要主动把系统脏页刷出。                  
#  有效防止用户进程刷脏页，在单机多实例，并且使用CGROUP限制单实例IOPS的情况下非常有效。                    
vm.dirty_writeback_centisecs = 100                              
#  pdflush（或其他）后台刷脏页进程的唤醒间隔， 100表示1秒。                  
vm.swappiness = 0                  
#  不使用交换分区                  
vm.mmap_min_addr = 65536                  
vm.overcommit_memory = 0                       
#  在分配内存时，允许少量over malloc, 如果设置为 1, 则认为总是有足够的内存，内存较少的测试环境可以使用 1 .                    
vm.overcommit_ratio = 90                       
#  当overcommit_memory = 2 时，用于参与计算允许指派的内存大小。                  
vm.swappiness = 0                              
#  关闭交换分区                  
vm.zone_reclaim_mode = 0                       
# 禁用 numa, 或者在vmlinux中禁止.                   
net.ipv4.ip_local_port_range = 40000 65535                      
# 本地自动分配的TCP, UDP端口号范围                  
fs.nr_open=20480000                  
# 单个进程允许打开的文件句柄上限                  
# 以下参数请注意                  
vm.extra_free_kbytes = 4096000   # 小内存机器千万不要设这么大, 会开不了机               
vm.min_free_kbytes = 6291456    # vm.min_free_kbytes 建议每32G内存分配1G vm.min_free_kbytes                 
# 如果是小内存机器，以上两个值不建议设置                  
# vm.nr_hugepages = 66536                      
#  建议shared buffer设置超过64GB时 使用大页，页大小 /proc/meminfo Hugepagesize                  
vm.lowmem_reserve_ratio = 1 1 1                  
# 对于内存大于64G时，建议设置，否则建议默认值 256 256 32      
```    
2、limits.conf    
```    
vi /etc/security/limits.conf    
* soft    nofile  1024000                  
* hard    nofile  1024000                  
* soft    nproc   unlimited                  
* hard    nproc   unlimited                  
* soft    core    unlimited                  
* hard    core    unlimited                  
* soft    memlock unlimited                  
* hard    memlock unlimited      
# 注释其他    
# 同时注释/etc/security/limits.d/20-nproc.conf     
```    
3、关闭透明大页、配置大页、并自启动PG    
```    
chmod +x /etc/rc.d/rc.local    
vi /etc/rc.local    
# 关闭透明大页    
if test -f /sys/kernel/mm/transparent_hugepage/enabled; then                  
   echo never > /sys/kernel/mm/transparent_hugepage/enabled                  
fi      
# 两个实例, 每个实例16G shared buffer    
sysctl -w vm.nr_hugepages=17000    
# 自启动两个实例  
su - postgres -c "/usr/pgsql-12/bin/pg_ctl start -D /data01/pg12_3389/pg_root"    
su - postgres -c "/usr/pgsql-12/bin/pg_ctl start -D /data01/pg12_8002/pg_root"    
# 自动启动pgpool, 可以配置好pgpool-II之后再修改    
/usr/bin/pgpool -f /etc/pgpool-II-12/pgpool.conf -a /etc/pgpool-II-12/pool_hba.conf -F /etc/pgpool-II-12/pcp.conf  
```    
4、创建文件系统    
```    
parted -a optimal -s /dev/vdb mklabel gpt mkpart primary 1MiB 100%FREE       
mkfs.ext4 /dev/vdb1 -m 0 -O extent,uninit_bg -E lazy_itable_init=1 -b 4096 -T largefile -L vdb1    
vi /etc/fstab     
LABEL=vdb1 /data01 ext4 defaults,noatime,nodiratime,nodelalloc,barrier=0,data=writeback 0 0    
mkdir /data01    
mount -a    
```    
5、启动irq balance    
```    
systemctl status irqbalance       
systemctl enable irqbalance          
systemctl start irqbalance         
systemctl status irqbalance      
```    
6、安装PG 12, pgpool, postgis, hll等    
```    
yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm    
yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm          
yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm         
yum search all postgresql    
yum search all hll    
yum search all postgis    
yum search all pgpool    
yum install -y postgresql12*      
yum install -y hll_12*    
yum install -y postgis30_12*    
yum install -y pgpool-II-12-extensions    
```    
7、初始化数据库数据目录    
```    
mkdir /data01/pg12_3389    
chown postgres:postgres /data01/pg12_3389    
```    
8、配置postgres用户环境变量    
```    
su - postgres    
vi .bash_profile    
# 追加      
export PS1="$USER@`/bin/hostname -s`-> "        
export PGPORT=3389    
export PGDATA=/data01/pg12_$PGPORT/pg_root       
export LANG=en_US.utf8        
export PGHOME=/usr/pgsql-12        
export LD_LIBRARY_PATH=$PGHOME/lib:/lib64:/usr/lib64:/usr/local/lib64:/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH        
export DATE=`date +"%Y%m%d%H%M"`        
export PATH=$PGHOME/bin:$PATH:.        
export MANPATH=$PGHOME/share/man:$MANPATH        
export PGHOST=$PGDATA        
export PGUSER=postgres        
export PGDATABASE=db1    
alias rm='rm -i'        
alias ll='ls -lh'        
unalias vi        
```    
9、初始化主库    
```    
initdb -D $PGDATA -U postgres -E UTF8 --lc-collate=C --lc-ctype=en_US.utf8    
```    
10、配置 postgresql.conf    
```    
listen_addresses = '0.0.0.0'    
port = 3389    
max_connections = 1500    
superuser_reserved_connections = 13    
unix_socket_directories = '., /var/run/postgresql, /tmp'    
tcp_keepalives_idle = 60    
tcp_keepalives_interval = 10    
tcp_keepalives_count = 10    
shared_buffers = 16GB    
huge_pages = on    
work_mem = 8MB    
maintenance_work_mem = 1GB    
dynamic_shared_memory_type = posix    
vacuum_cost_delay = 0    
bgwriter_delay = 10ms    
bgwriter_lru_maxpages = 1000    
bgwriter_lru_multiplier = 10.0    
bgwriter_flush_after = 512kB    
effective_io_concurrency = 0    
max_worker_processes = 128    
max_parallel_maintenance_workers = 3    
max_parallel_workers_per_gather = 4    
parallel_leader_participation = off    
max_parallel_workers = 8    
backend_flush_after = 256    
wal_level = replica    
synchronous_commit = off    
full_page_writes = on    
wal_compression = on    
wal_buffers = 16MB    
wal_writer_delay = 10ms    
wal_writer_flush_after = 1MB    
checkpoint_timeout = 15min    
max_wal_size = 64GB    
min_wal_size = 8GB    
checkpoint_completion_target = 0.2    
checkpoint_flush_after = 256kB    
random_page_cost = 1.1    
effective_cache_size = 48GB    
log_destination = 'csvlog'    
logging_collector = on    
log_directory = 'log'    
log_filename = 'postgresql-%a.log'    
log_truncate_on_rotation = on    
log_rotation_age = 1d    
log_rotation_size = 0    
log_min_duration_statement = 1s    
log_checkpoints = on    
log_connections = on    
log_disconnections = on    
log_line_prefix = '%m [%p] '    
log_statement = 'ddl'    
log_timezone = 'Asia/Shanghai'    
autovacuum = on    
log_autovacuum_min_duration = 0    
autovacuum_vacuum_scale_factor = 0.1    
autovacuum_analyze_scale_factor = 0.05    
autovacuum_freeze_max_age = 800000000    
autovacuum_multixact_freeze_max_age = 900000000    
autovacuum_vacuum_cost_delay = 0    
vacuum_freeze_table_age = 750000000    
vacuum_multixact_freeze_table_age = 750000000    
datestyle = 'iso, mdy'    
timezone = 'Asia/Shanghai'    
lc_messages = 'en_US.utf8'    
lc_monetary = 'en_US.utf8'    
lc_numeric = 'en_US.utf8'    
lc_time = 'en_US.utf8'    
default_text_search_config = 'pg_catalog.english'    
shared_preload_libraries = 'hll'    
```    
11、配置 pg_hba.conf    
因为pgpool-II在数据库服务器一起, 使用127.0.0.1设置为需要密码登陆.      
```    
# "local" is for Unix domain socket connections only    
local   all             all                                     trust    
# IPv4 local connections:    
host    all             all             127.0.0.1/32            md5    
# IPv6 local connections:    
host    all             all             ::1/128                 trust    
# Allow replication connections from localhost, by a user with the    
# replication privilege.    
local   replication     all                                     trust    
host    replication     all             127.0.0.1/32            trust    
host    replication     all             ::1/128                 trust    
host db123 digoal 0.0.0.0/0 md5    
```    
12、创建流复制用户    
```    
db1=# create role rep123 login replication encrypted password 'jfjwief2383r3skfjkewIEFW';    
CREATE ROLE    
```    
13、创建业务用户    
```    
db1=# create role digoal login encrypted password 'fnewe((@FKKKSKkfeUUEfff12_';    
CREATE ROLE    
db1=# create database db123 owner digoal;    
CREATE DATABASE    
```    
14、创建 pgpool 数据库健康心跳用户、检查只读节点wal replay延迟的用户, 只要能登陆postgres数据库(或指定的库)即可, 配合pgpool参数使用    
```    
create role nobody login encrypted password 'xxxxxxxxxxxxxxxx';    
```    
#### 创建从库    
从库就在同一台服务器, 因为就是为了测试.    
1、使用pg_basebackup在线创建从库    
```    
pg_basebackup -D /data01/pg12_8002/pg_root -F p --checkpoint=fast -P -h 127.0.0.1 -p 3389 -U rep123    
```    
2、配置从库 postgresql.conf    
```    
cd /data01/pg12_8002/pg_root     
vi postgresql.conf    
# 相比主配置 修改如下    
port = 8002    
primary_conninfo = 'hostaddr=127.0.0.1 port=3389 user=rep123' # 不用设置密码, 因为主设置了trust访问    
hot_standby = on    
wal_receiver_status_interval = 1s    
wal_receiver_timeout = 10s    
recovery_target_timeline = 'latest'    
```    
3、配置从库 pg_hba.conf    
```    
无需修改    
```    
4、配置从库 standby.signal 标记    
```    
cd /data01/pg12_8002/pg_root     
touch standby.signal    
```    