positive rates. Let the set of words in the original
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:14 UTC from IEEE Xplore.  Restrictions apply. 
70(a) Using single events
(b) Instance-based learning
Source
Hot Trends
Google Insights
Wikipedia
Alexa
Prefetching On
FP%
TP%
8.8
91.2
6.5
87.9
4.5
86.5
88.2
4.1
Prefetching Oﬀ
FP%
TP%
42.6
7.9
48.9
6.8
47.1
4.3
8.2
46.1
Source
Google Insights
Wikipedia
Alexa
Uniform
TP% FP% TP%
89.0
85.1
93.4
87.3
87.4
94.1
6.5
7.1
6.2
Non-Uniform
FP%
4.5
5.2
4.1
Accuracy of reconstruction techniques using both single events (a) and instance-based learning (b).
Table II
logged query be deﬁned as Qw, and the set of
words in the result be Rw. Then, the true positive
and false positive rates for Rw are computed as:
|Qw|
 |Rw∩Qw|
 |Rw\Qw|
|Qw|
1.0
0.0
1.0
0.0
TP =
FP =
if Rw (cid:40) Qw
if Rw = Qw
if Qw (cid:40) Rw
if Qw (cid:40) Rw
if Rw (cid:44) Qw
if Rw (cid:40) Qw
The results of our experiments are shown in
Table II, broken down by each source for which
we recreated a search query. Table II(a) shows the
accuracy when the reconstruction is restricted to
using data from a single prefetching event. In this
case, our accuracy is dependent on the number of
identiﬁable keywords we are able to recreate from
the domains in a prefetching event. An interesting
observation here is the high true positive rate for
recreating “Hot Trends”. This is a result of there
being far more entries in prefetching events for hot
search terms, especially in the case where Google’s
results page includes dynamically updated refer-
ences for that search. These additional requests
lead to the extraction of more keywords, thereby
improving our ability to reconstruct these searches.
At
the false positive
rate is higher than the other target cases because
many of the domains are shared among searches
of hot trends happening around the same time.
Notice, however, that our reconstruction accuracy
is abysmal when prefetching is turned oﬀ.
the same time, however,
Table II(b) depicts our results for each client,
where we only consider events in 15 minute in-
tervals. As expected, the non-uniform case—which
better reﬂects how people search in practice—
outperforms the case where the selection is not bi-
ased, and achieves true positive rates of over 92%,
with false negatives under 5%, on average. In lieu
of our earlier observation regarding the poor re-
construction accuracy when prefetching is turned
oﬀ, we omit results for the instance-based learning
case as performance there is highly dependent on
accurately reconstructing single events.
VII. Conclusion
Our main objective in this work is to highlight
the fact that if left unchecked, rapid enhancements
in when and how DNS prefetching is performed
can have signiﬁcant performance implications, and
can also lead to new security and privacy issues.
To date, prefetching is rapidly being deployed
within modern browsers, and has already been
activated in browsers of mobile devices (e.g., Safari
on the iPhone and Chrome on Android)—some
of which oﬀer no straightforward way to disable
this feature. Lately, it appears that some browser
architects have begun experimenting with alterna-
tive prefetching strategies along the lines of those
suggested in our earlier work (e.g., only prefetch-
ing when the mouse hovers over a link) [16]. We
applaud those changes, but believe much more
should, and could, be done. We believe that it
is prudent to stop and rethink the need for pre-
resolution, as the adverse eﬀects on name server
load that comes with the expanded use of DNS
prefetching is clear. Moreover, this practice paints
a grim outlook for the adoption of DNSSEC. Lastly,
our ability to reconstruct search queries when
prefetching is enabled underscores the thin line we
walk between increased performance and privacy.
VIII. Acknowledgements
We express our gratitude to Joni Keller, Jim
Gogan, Danny Shue, Sid Staﬀord, Hiawatha
Demby, Stan Waddell, Alex Everett (all from the
Information Technology Service Oﬃce), Murray
Anderegg and Bil Hayes (our local networking gu-
rus) for their tremendous eﬀorts in deploying the
infrastructure for this study. The researchers and
the University’s Technology Service Oﬃce have
a longstanding memorandum of understanding
(MoU) in place to collect anonymized network
traﬃc on campus. The MoU covers speciﬁc uses
and types of networking data, as well as conditions
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:14 UTC from IEEE Xplore.  Restrictions apply. 
71Claﬀy, “The CoralReef Software Suite as a Tool for
System and Network Administrators,” in USENIX
Conf. on System Admin., 2001, pp. 133–144.
[18] J. Fan,
J. Xu, M. Ammar,
and S. Moon,
“Preﬁx-preserving IP Address Anonymization:
Measurement-based Security Evaluation and a
New Cryptography-based Scheme,” Computer
Networks, vol. 46, no. 2, pp. 263–272, October 2004.
[19] A.-J. Su, D. R. Choﬀnes, A. Kuzmanovic, and
F. E. Bustamante, “Drafting Behind Akamai,” SIG-
COMM Computing Comm. Review, vol. 36, no. 4, pp.
435–446, 2006.
[20] R. Arends, R. Austein, M. Larson, D. Massey, and
S. Rose, “DNS Security Introduction and Require-
ments (RFC 4033),” 2005.
[21] OpenDNS,
“Privacy Policy,” See http://www.
opendns.com/privacy/, July 2007.
[22] M. Deshpande and G. Karypis, “Item-based Top-
N Recommendation Algorithms,” ACM Transactions
on Info. Sys., vol. 22, no. 1, pp. 143–177, 2004.
[23] F. Benevenuto, T. Rodrigues, M. Cha,
and
V. Almeida, “Characterizing User Behavior
in
Online Social Networks,” in ACM IMC, 2009, pp.
49–62.
Appendix
For Chrome (version 10), DNS prefetching can
be disabled by unmarking the check box “use DNS
prefetching to improve page load performance”
via the Tools → Options → Under the Hood
sub-menu (this is true even on Android smart-
phones). For Firefox (version 4), disabling this
feature is less obvious. Users can do so by
setting the network.dns.disablePrefetch pref-
erence to true via the about:conﬁg method. For
some versions of Firefox,
the
network.dns.disablePrefetchFromHTTPS prefer-
ence should also be set to true in order to fully dis-
able DNS prefetching. Similarly, for other Mozilla
Necko-based apps (like Thunderbird), these pref-
erences can be set by editing the user.js ﬁle in
the user’s proﬁle folder.
it appears that
X
Under
can be
prefetching
MacOS
(version 5)
for
turned oﬀ by
defaults write com.apple.safari
Safari
typing
WebKitDNSPrefetchingEnabled -boolean false
within the Terminal. Unfortunately we are not
aware of any easy way to disable prefetching
under iOS for mobile devices.
for securing and accessing such data. We also
thank Michael Bailey, Kevin Jeﬀay, Don Smith,
Teryl Taylor and the anonymous reviewers for
helpful suggestions. This work is supported by
NSF grant CNS-0831245.
References
[1] J. Valentino-Devries, “What They Know About
You,” Wall Street Journal, July 2010.
[2] N. Carr, “Tracking is an Assault on Liberty, With
Real Dangers,” Wall Street Journal, August 2010.
[3] E. Osterweil, M. Ryan, D. Massey, and L. Zhang,
“Quantifying the Operational
the
DNSSEC Deployment,” in ACM IMC, 2008, pp.
231–242.
Status of
[4] S. Son and V. Shmatikov, “The Hitchhiker’s Guide
to DNS Cache Poisoning,” Intl. Conf. on Security and
Privacy in Communication Networks, Sept. 2010.
[5] D. Wessels and M. Fomenkov, “Wow, That’s a Lot
of Packets,” in Passive and Active Measurement Work-
shop, April 2003.
[6] R. Liston, S. Srinivasan, and E. Zegura, “Diver-
sity in DNS Performance Measures,” in ACM SIG-
COMM Workshop on Internet measurment, 2002, pp.
19–31.
[7] J. Jung, E. Sit, H. Balakrishnan, and R. Morris, “DNS
Performance and the Eﬀectiveness of Caching,”
IEEE/ACM Trans. on Networking, vol. 10, no. 5, pp.
589–603, 2002.
[8] J. Jung, A. W. Berger, and H. Balakrishnan, “Mod-
eling TTL-based Internet Caches,” in Infocom, 2003.
[9] B. Ager, H. Dreger, and A. Feldmann, “Predicting
the DNSSEC Overhead Using DNS Traces,” in In-
formation Sciences & Systems, 2006, pp. 1484–1489.
[10] W. Wijngaards and B. Overeinder, “Securing DNS:
Extending DNS Servers with a DNSSEC Validator,”
Security & Privacy, vol. 7, no. 5, pp. 36–43, 2009.
[11] L. Grangeia, “DNS Cache Snooping or Snooping
the Cache for Fun and Proﬁt,” SideStep Seguranca
Digital, Tech. Rep., Feb. 2004.
[12] C. E. Wills, M. Mikhailov, and H. Shang, “Inferring
Relative Popularity of Internet Applications by Ac-
tively Querying DNS Caches,” in ACM IMC, 2003,
pp. 78–90.
[13] M. A. Rajab, J. Zarfoss, F. Monrose, and A. Terzis,
“A Multifaceted Approach to Understanding the
Botnet Phenomenon,” in ACM IMC, Oct., 2006, pp.
41–52.
[14] E. Cohen and H. Kaplan, “Proactive Caching of
DNS Records: Addressing a Performance Bottle-
neck,” in Symp. on Apps. and the Internet, 2001, pp.
85–94.
[15] H. Shang and C. E. Wills, “Piggybacking Related
Domain Names to Improve DNS Performance,”
Computing Networking, vol. 50, no. 11, pp. 1733–
1748, 2006.
[16] S. Krishnan and F. Monrose, “DNS Prefetching
and its Privacy Implications: When good things go
bad,” in USENIX Workshop on Large-scale Exploits
and Emergent Threats, April 2010.
[17] D. Moore, K. Keys, R. Koga, E. Lagache, and K. C.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:43:14 UTC from IEEE Xplore.  Restrictions apply. 
72