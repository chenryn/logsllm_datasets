### Practical Deployment Considerations and Potential Applications for a HOP Processor

#### Parties Involved in the System
In a practical deployment, three key parties are involved:
- **Sender (Software Provider)**: A software provider such as Microsoft.
- **Receiver (End User)**: The end user who will run the software.
- **Manufacturer (Hardware Company)**: A hardware company like Intel or TSMC.

**Incentives for Software Providers**: 
Software providers are motivated to use this framework to protect the intellectual property (IP) of their proprietary programs. This ensures that they can sell these programs to customers without the risk of piracy.

**Incentives for Hardware Manufacturers**:
Hardware manufacturers are incentivized to provide robust security features to retain software providers as customers. For example, Intel's SGX was initially envisioned as a service to attract and retain software providers by offering secure enclaves.

#### Potential Applications
The primary focus of this paper is to develop hardware that satisfies the definition of Virtual Black-Box (VBB) obfuscation. Our model assumes the obfuscation of "batch programs" — those that take inputs, perform non-interactive computations, and produce a result. Examples of such programs include compilers, compression algorithms, and machine learning algorithms. These programs often contain sensitive IP, making them prime candidates for obfuscation.

Given the widespread use of batch programs, we see the HOP (Hardware Obfuscation Platform) being applicable in both commercial and military settings. Notably, even military organizations outsource their fabrication to external foundries, such as GlobalFoundries, which handles runs for the NSA.

**Supporting Streaming Applications**:
Beyond batch programs, HOP can support streaming applications with minimal changes to the model. While running, HOP can accept streams of public data (e.g., video feeds) in a manner similar to Stream Ascend [57]. Importantly, this does not compromise security, as long as HOP does not alter its observable behavior based on the stream data and accepts the data at fixed intervals.

### Conclusion
This paper makes two main contributions:
1. **Optimized Hardware Architecture (HOP)**: We construct an optimized hardware architecture called HOP for running obfuscated RAM programs. We provide a theoretical model for our optimized architecture and prove its security. A by-product of our analysis is the first obfuscation for RAM programs using 'stateless' tokens.
2. **Complete Implementation and Evaluation**: We present a complete implementation of our optimized architecture and evaluate it on real-world programs. The design requires 72% of the area of a V7485t Field Programmable Gate Array (FPGA) chip. When tested on various benchmarks, HOP achieves an average overhead of 8× to 76× relative to an insecure system. To the best of our knowledge, this is the first implementation of a provably secure VBB obfuscation scheme in any model under any assumptions.

### Acknowledgment
We would like to thank anonymous reviewers for their insightful feedback. This work is supported in part by NSF grants CNS-1314857, CNS-1453634, CNS-1518765, CNS-1514261, an ONR-YIP Award, a Packard Fellowship, a Sloan Fellowship, a Google Ph.D. Fellowship, Google Faculty Research Awards, a DARPA Brandeis grant, a DARPA Safeware grant, and a VMware Research Award. This work was done in part while a subset of the authors were visiting the Simons Institute for the Theory of Computing, supported by the Simons Foundation and by the DIMACS/Simons Collaboration in Cryptography through NSF grant CNS-1523467.

### References
[References listed here as per the original text]

### Appendix A: Proof of Schedule Overhead
**Claim**: For any program and input, the setting of \( N \) from Section III-C results in ≤ 50% of processor cycles performing dummy work. In other words, the schedule incurs ≤ 2× performance overhead relative to the best possible A-M schedule (which is insecure over the timing channel) and incurs no dummy work.

**Proof**:
Without loss of generality, we break up a program into a sequence of instruction epochs, where each epoch consists of a continuous run of arithmetic instructions followed by a continuous run of memory instructions. Denote the i-th epoch as \( A^{n_i} M^{p_i} \). For example, the program
\[ A A A A M A A M M M \]
has 2 epochs, with \( n_1 = 4 \), \( p_1 = 1 \), \( n_2 = 2 \), \( p_2 = 3 \).

Without loss of generality, we align the start of each epoch with the beginning of an ANM schedule. Given our choice of \( N \), we examine the number of processor cycles spent doing dummy operations in each epoch. For the rest of the analysis, we abbreviate \( |M| = \text{ORAM latency} \) and \( |A| = \text{Arithmetic latency} \).

Consider the start of epoch \( i \) (i.e., the first \( A \) instruction). To progress from the start of the epoch to the first \( M \) instruction (excluded) in the epoch, we perform \( |A| \times N \times \left\lceil \frac{n_i}{N} \right\rceil + |A| \times (n_i \mod N) \) real cycles and \( |M| \times \left\lceil \frac{n_i}{N} \right\rceil + |A| \times (N - (n_i \mod N)) \) dummy cycles worth of work. To progress from the first \( M \) instruction (including) to the end of the epoch, we perform \( |M| \times p_i \) real cycles and \( |A| \times N \times (p_i - 1) \) dummy cycles worth of work. Note that by our definitions of epochs, we have that \( p_i \geq 1 \).

Combining these two time periods, we spend \( |M| \times \left( \left\lceil \frac{n_i}{N} \right\rceil + p_i \right) + |A| \times (n_i \mod N) \) real cycles and \( |M| \times \left( \left\lceil \frac{n_i}{N} \right\rceil + p_i - 1 \right) + |A| \times (N - (n_i \mod N)) \) dummy cycles worth of work. Also note that \( |M| = |A| \times N \) by our choice of \( N \).

### Appendix B: Obfuscation in the Public-Key Setting
For simplicity, we describe our construction and proof in a model where a single sender embeds a symmetric key into a secure processor and provides this to the receiver along with the obfuscated program to execute. However, our results can be extended to allow multiple senders to obfuscate the program for a receiver. For example, suppose two senders \( S_1 \) and \( S_2 \) want to send encrypted programs to be executed by a receiver \( R \) on a hardware token (provided by a trusted hardware manufacturer).

The hardware would be initialized with a secret key \( \text{sk}_{\text{enc}} \) of a public-key CCA secure encryption scheme (with public key \( \text{pk}_{\text{enc}} \)) along with a verification key \( \text{vk}_{\text{sig}} \) of a signature scheme (with signing key \( \text{sk}_{\text{sig}} \)). The signing key \( \text{sk}_{\text{sig}} \) would be owned by a trusted certificate authority and stored in the token.

In our construction, we replace the symmetric key CCA secure authenticated encryption with a public key CCA secure encryption, where all ciphertexts are authenticated with a signature scheme. When \( S_1 \) wishes to send an obfuscated program \( P_1 \) to a receiver \( R \), \( S_1 \) picks a signing key/verification key pair \( (\text{sk}_{S_1}, \text{vk}_{S_1}) \). \( S_1 \) obtains a signature of \( \text{vk}_{S_1} \) from the trusted certificate authority (denoted by \( \sigma \) and verified under the verification key \( \text{vk}_{\text{sig}} \)). Now, \( S_1 \) encrypts \( P_1 \) with \( \text{pk}_{\text{enc}} \) and authenticates all ciphertexts with \( \text{sk}_{S_1} \) and provides these ciphertexts along with \( \sigma \) to the receiver.

The receiver feeds the encrypted ciphertexts and \( \sigma \) to the token. The token, when decrypting ciphertexts, first checks the validity of \( \text{vk}_{S_1} \) by verifying \( \sigma \) and the signatures of all the ciphertexts. If all checks pass, the token decrypts the ciphertexts using \( \text{sk}_{\text{enc}} \). When encrypting state to be sent back to the receiver, the token encrypts it with \( \text{pk}_{\text{enc}} \) and signs it with \( \text{sk}_{\text{sig}} \). This mimics the symmetric key CCA secure authenticated encryption scheme used in our single sender/receiver scheme.