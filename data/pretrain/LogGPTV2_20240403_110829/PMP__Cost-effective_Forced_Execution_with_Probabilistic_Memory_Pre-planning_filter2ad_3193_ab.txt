(5%)
165
97
(3%)
(99%)
3.5% 83.8% 79.1% 91.8%
(100%)
4,237
(96%)
2,688
(92%)
5,560
(70%)
11,600
(90%)
4,519
(50%)
15,513
(91%)
545
(94%)
3,682
(86%)
887
(9%)
142
(1%)
4,001
(6%)
3,059
(8%)
630
(1%)
(0%)
528
(2%)
2.6%
(0.08%)
66,726
38,243
55,205
99,764
24,032
21,308
6,340
9,521
2,755
842
60
0
-
-
4,020
(0.16/s)
176,096 10,400
(0.06/s)
7,461
(0.07/s)
7,223
(0.12/s)
103,458
58,646
258
(0.19/s)
2,997
(0.14/s)
0.15/s
(0.4%)
2
61
1,487
3,662
13,332
(100%)
(1%)
13
# fail
10
(3%)
79
(8%)
799
(3%)
669
(95%)
2,004
(70%)
16,098
(43%)
213
# insn # block # func # found # correct # mistyped
7,420
(97%)
26,677
(83%)
183,280
(48%)
2,947
(99%)
41,685
(99%)
23,331
(95%)
27,622
(69%)
119,467
(89%)
49,920
(54%)
100,652
(92%)
5,179
(76%)
52,831
(92%)
2,343
(64%)
226
7,199
(89%)
(57%)
1,221
(64%) 573,926 332,303
(58%)
1,011
24
(68%)
(100%)
12,092
104
(100%) 22,816
(53%)
5,870
288
11,740
(50%)
(97%)
3,557
501
(39%)
(81%)
24,713
696
(97%)
(35%)
18228
401
(47%)
(88%)
15,393
577
(28%)
(92%)
1,849
(76%)
8,212
(32%)
50.6%
69
(4%)
26
(4%)
502
(4%)
298
(4%)
132
(2%)
11
(84%)
(4%)
165
90
(3%)
(99%)
3.4% 82.7% 81.0% 90.9%
28
(1%)
2,428
(18%)
63,131
(11%)
130
(9%)
2,749
(12%)
3,682
(31%)
5,669
(62%)
18,866
(27%)
6,593
(17%)
14,072
(26%)
215
(9%)
3,132
(12%)
19.6%
(100%)
4,381
(99%)
2,799
(96%)
5,413
(68%)
11,676
(90%)
4,521
(50%)
15,489
(91%)
471
(82%)
3,749
(88%)
70,611
38,784
54,977
25,664
9,121
2,434
53
-
check_arg(arg1);
check_arg(arg2);
do_something(); // do nothing
...
01 int some_func(char *arg1, char *arg2) {
02
03
04
05
06 }
07 void check_arg(char *arg) {
08
09
10 }
if (strlen(arg) == 0) exit(-1);
...
01 long suspend_impl(..){..
02
if (is_valid(arc)) {..
03
04
05
06
07 }
memcpy(new_arc, arc, 0x40);..
*(arc->tail) = node1;..
node2 = *(new_arc->tail);..
}
Fig. 7: Explaining FPs and FNs by X-Force using mcf.
Fig. 6: Explaining problem of linear search using gcc.
17∼19 show the memory dependence results for PMP and
X-Force, respectively.
Observe that X-Force has 6.5 times more mis-typed memory
dependences compared to PMP (19.6% versus 2.6%), that
is, 6.5X more FPs. In addition,
the must-be-true memory
dependences reported by X-Force are 10% fewer than those by
PMP. That is, X-Force has 10% more FNs. The main reason
is that X-Force does not trace into library execution such that
pointer relations are incomplete. We will use a case study
to explain this in the next paragraph. Mis-typed dependences
(FPs) in PMP are mostly caused by violations of SDMB. The
results are consistent with our analysis in Section III-D. Note
that our probabilistic guarantee for SDMB was computed for
a pair of accesses, whereas the reported value is the expected
value over a large number of pairs.
Case Study. We use 181.mcf as a case study to demonstrate
the advantages of PMP over X-Force, as well as over a naive
memory pre-planning that ﬁlls the pre-allocated region and
variables with 0. To reduce the interference caused by the
path exploration algorithm, we use the execution traces of the
runs on the provided test cases as the path schemes. That is,
we enforce the branch outcomes in a way that strictly follows
the traces. The test cases fall into three categories: training,
test, and reference, with difference sizes (reference tests are
the largest). We use the memory dependences reported while
executing the test cases normally as the ground truth to identify
the false positives and false negatives for PMP and X-Force.
Since both the forced and unforced executions of a test input
follow the same path, the comparison particularly measures
the effectiveness of the memory schemes. To be more fair, we
only run PMP on a single executor.
The results are shown in Table II. The 2nd and 3rd columns
compare the execution speed. Observe that PMP is much
faster, consistent with our earlier observation. For the memory
dependences, PMP has no FPs or FNs while the naive planning
method has some; and X-Force has the largest number of FPs
and FNs. The former is because SDMB is violated. The latter
is due to the incompleteness of pointer relation tracking (i.e.,
missing the library part). Note that the numbers of FPs and
FNs are smaller compared to the previous experiment as these
are results for a small number of runs, without exploring paths.
Consider the code snippet from mcf shown in Figure 7.
Variable arc is a buffer that contains many pointer ﬁelds. As
it is copied to new_arc at line 3, the pointer ﬁelds in arc and
new_arc are linearly correlated. However, X-Force misses
such correlations as it does not trace into memcpy() at line 2.
This could lead to missing dependences such as that between
lines 4 and 5; and also bogus dependences. For example, the
read *(new_arc->tail) at line 5 must falsely depend on
some write that happened earlier.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:55 UTC from IEEE Xplore.  Restrictions apply. 
1130
Cuckoo
Habo 
Padawan 
Cuckoo++
X-Force 
PMP 
0                 50               100              150
0
150
100
50
2.00
1.80
1.60
1.40
1.20
1.00
0.80
0.60
0.40
0.20
0.00
200              250
200
250
PMP X-Force
30
25
20
15
10
5
0
PMP
X-Force
(a) number of exposed syscall sequences.
(b) executions per second.
(c) length of path scheme.
Fig. 8: Overall result of malware analysis.
TABLE II: Experiment with mcf.
TABLE III: Analysis on malware samples used for case study.
Item
Execution Time (s)
PMP
X-Force
1.987
test
0.0305
2.578
train 0.0348
ref
0.0609
4.390
ground
1847
2065
2062
C. Malware Analysis
Memory Dependence
PMP
Naive
X-Force
found fp fn found fp fn found fp
1847
2065
2062
1858
2088
2080
1848
2069
2068
fn
28 17
45 22
37 19
5
13
14
4
9
8
0
0
0
0
0
0
We use 400 malware samples. Half of them are acquired
from VirusTotal under an academic license, and the other half
fall into the set of malware used in the Padawan project.
Note that the authors of Padawan cannot share their samples
due to licensing limitations. Hence, we crawled the Internet
for these samples based on a set of hash values provided
by the Padawan’s authors through personal communication.
Many samples could not be found and are hence elided. The
400 samples cover up-to-date malware of different families
captured from year 2016 to 2018. We compare the malware
analysis result of PMP with that of Cuckoo [2] (a well-known
sandbox for automatic malware analysis), Padawan [8] (an
academic multi-architecture ELF malware analysis platform),
Habo [10] (a commercial malware analysis platform used by
VirusTotal for capturing behaviors of ELF malware samples)
as well as X-Force [32].
In order
to compare our
technique with the state-of-
the-art anti-evasion measures, we implemented two popular
anti-evasion methods [19] (i.e. system time fast-forwarding
and anti-virtualization-detection) as extensions to Cuckoo.
We name the extended system Cuckoo++. Speciﬁcally in
the ﬁrst method, we modify the kernel
to make the sys-
tem clock much faster (e.g., 100 times faster), mainly for
the following two reasons. First, a malware analysis VM
often has a very short uptime since it restarts for each
malware execution. As such, advanced malware may check
the system uptime to determine the presence of sandbox
VM. Second, advanced malware samples often sleep for a
period of time before executing their payload (in order to
defeat dynamic analysis). In the other method, we inter-
cept ﬁle system operations to conceal the artifacts produced
by virtual machine (e.g., /sys/class/dmi/id/product name and
/sys/class/dmi/id/sys vendor).
The detailed comparison results are shown in Appendix C.
Note that the malware behaviors of Padawan are provided by
its authors. We set up an execution environment similar to
Padawan (Ubuntu 16.04 with Linux kernel version 4.4) for
Case
1
2
3
4
ID
031
004
225
309
Cuckoo
12
27
49
153
Habo
17
29
49
169
Padawan
12
28
166
292
Cuckoo++
12
27
165
221
X-Force
283
32
183
274
PMP
301
216
220
705
the other tools, including PMP, X-Force, Habo, Cuckoo and
Cuckoo++, so that the results can be comparable. We set 5
minutes timeout for each malware sample.
Result Summary. Figure 8 presents the overall result of
malware analysis. Speciﬁcally, the number of unique system
call sequences exposed by different tools are show in Fig-
ure 8a. To avoid considering similar system call sequences that
have only small differences on argument values as different
sequences, we consider sequences that have more than 90%
similarity as identical. As we can see that the executions with
anti-evasion measures enabled (i.e., Cuckoo++ and Padawan)
expose more system call sequences than the native executions
(i.e., Cuckoo and Habo), but disclose fewer than the forced
execution methods (i.e., X-Force and PMP). On average, PMP
reports 220%, 243%, 150%, 151% and 98% more system call
sequences over Cuckoo, Habo, Cuckoo++, Padawan and X-
Force, respectively. Details can be found in Appendix C.
The comparison of execution speed and length of path
schemes between PMP and X-Force are shown in Figure 8b
and Figure 8c respectively. Note that Cuckoo and Padawan
only runs each sample once (instead of multiple executions
on different path schemes as force execution tools do). Hence
we do not compare their execution speeds and length of path
scheme. On average, PMP is 9.8 times faster than X-Force
and yields path schemes with the length 1.5 times longer than
X-Force. The longer the path scheme, the deeper the code was
explored. The second case studies in this subsection show that
with the longer path schemes, PMP can expose some malicious
behavior in deep program paths that could not be exposed by
X-Force.
Case Studies. Next, we use four case studies from different
malware families to illustrate the advantages of PMP.
Case1: 1e19b857a5f5a9680555fa9623a88e99. It is
a ransom malware that uses UPX packer [11] to pack its
malicious payload in order to evade static analysis. Figure 9a
shows a constructed code snippet to demonstrate part of its
malicious logic. It mmaps a writable and executable memory
area (line 2), then unpacks itself (line 3) and transfers control
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:55 UTC from IEEE Xplore.  Restrictions apply. 
1131
void *code_area = map_exec_write_mem();
upx_unpack(code_area);
transfer_control(code_area, argc, argv);
01 int main(int argc, char **argv) {
02
03
04
05 }
06
07 void code_area(int argc, char **argv) {
08
09
10
11
12
13
14
15
16
17 }
if (!is_cmdline_valid(argc, argv)) exit();
char *action = argv[1], *key = argv[2];
delete_self();
if (strcmp(action, encrypt) == 0) {
}
}
for (FILE *file: traverse_directory()) {
FILE *encrypted_file = encrypt(file, key);
replace_file(encrypted_file, file);
(a) simpliﬁed code.
a. mmap(0x400000,,PROT_EXEC|PROT_READ|PROT_WRITE,)
b. unlink("/root/Malware/1e19b857a5f5a9680555fa9623a88e99")
c. open("/etc",O_RDONLY|O_DIRECTORY|O_CLOEXEC)
d. getdents64(0,)
e. open("/etc/passwd",O_RDONLY)
f. open("/etc/passwd.encrypted",O_WRONLY|O_CREAT,0666)
g. unlink("/etc/passwd")
(b) captured system call sequence.
Fig. 9: Case 1: the ransom malware sample.
(line 4) to the unpacked payload (lines 7-17). The malicious
payload checks the validity of command line parameters (line
8) and deletes itself from the ﬁle system (line 10). If the
command line parameter speciﬁes the encrypt action, the
malware traverses the ﬁle system to replace each ﬁle with its
encrypted copy (lines 13-14).
The comparison of different tools on this malware is shown
in the second row of Table III. Triggering payload requires
the correct command line parameters. Hence directly running
the malware using Cuckoo, Habo, Cuckoo++ and Padawan
fail
to expose the malicious behavior. Both X-Force and
PMP expose the payload. Figure 9b shows the captured
system call sequence. Observe the unlink syscall b that
removes the malware itself and the encryption and removal
of “/etc/passwd” by syscalls e-g.
Case2: 03cfe768a8b4ffbe0bb0fdef986389dc. It is
a bot malware that receives command from a remote server.
Figure 10a shows the simpliﬁed code of its processing logic. It
checks whether a ﬁle exists that indicates the right execution
environment (line 2) and whether the remote server is con-
nectable (line 4). If both conditions are satisﬁed, the malware
communicates with the remote server. The remote server will
validate the identity of the malware by its own communication
protocol (lines 4-7). If the validation is successful, a command
received from the remote server will be executed on the victim
machine (lines 8-9).
The comparison of different tools on this malware is shown
in the third row of Table III. The malicious payload of this
malware sample is hidden in a deeper path, which requires a
much longer path scheme. Figure 10b shows the path scheme
enforced by PMP to expose the malicious behaviors. The
length is 28, which is larger than the longest path scheme
that is enforced by X-Force within the 5 minutes limit. These
forced branches are to get through the ID validation protocol.
01 int main(int argc, char **argv) {
02
03
04
05
06
07
08
09
10 }
if (!files_exist("/tmp/ReV1112")) exit(0);
if (!connectable("ka3ek.com")) exit(0);
Info *info = get_system_info();
Greet *greet = get_validation(info);
Reply *reply = compute_reply(greet);
Cmd *cmd = get_command(reply);
if (!cmd) exit(0);
execute_cmd(cmd);
(a) simpliﬁed code.
40492b:T | 404aec:T | 404e07:T | 401f3f:F | 401ee3:T |
404fdc:F | 404fea:T | 405118:F | 40513a:F | 405144:F |
40517b:F | 40517f:F | 40523e:F | 405254:T | 40523e:F |
405254:T | 40523e:F | 405254:T | 40523e:F | 405254:T |
40523e:F | 405254:F | 4044be:T | 4044e9:F | 40454b:F |
404565:T | 404596:T | 404794:F
(b) path scheme.
Fig. 10: Case 2: the bot malware sample.
Case3: 14b788d4c5556fe98bd767cd10ac53ca. It is
an enhanced variant of Mirai, which is equipped with a time-
based cloaking technique. Figure 11 shows a simpliﬁed version
of its code snippet. At line 4, it checks whether the system up-
time is short, which indicates a potential analysis environment.
If the system uptime is long enough, it checks whether there
exists any initialization script in the “/etc/init.d” directory (line
8) 2. If both conditions are satisﬁed, the malware sample adds
itself to an initialization script for launching at system reboot.
Cuckoo and Habo cannot expose the aforementioned be-
haviors. Cuckoo++ and Padawan can expose the traversal
of the “/etc/init.d” directory (line 6), by passing though the
uptime check via fast-forwarding system time and using a
long-running VM snapshot, respectively. However, they cannot
expose the modiﬁcation of initialization script (line 9), due
to the failure of the initialization script check, as the default
OS environment does not have any initialization script. PMP
and X-Force can expose both behaviors by forcing the branch
results.
Case4: 8ab6624385a7504e1387683b04c5f97a. This
is a sniffer equipped with a vm-detection-based cloaking tech-
nique. Figure 12 shows a simpliﬁed version of its code snippet.
If a VM environment is detected, the malware sample deletes
itself and exits (lines 2-3). Otherwise, it enters a snifﬁng loop,
which randomly selects an intranet IP address and a known
vulnerability and checks whether the host with the IP contains
the vulnerability (lines 5-7). If so, the information about the
vulnerable host is sent to the server and the payload is sent to
the vulnerable host (lines 8-9).
Cuckoo and Habo cannot expose the aforementioned be-
haviors. Cuckoo++ and Padawan can expose the network
communication to the selected IP address, since they are
enhanced to conceal VM-generated artifacts. However, they
cannot expose sending the vulnerable host information and
payload, since the analysis environment is often ofﬂine and
there may not exist a vulnerable host on the intranet. PMP
can expose both behaviors. X-Force can expose both in theory
2An initialization script has a ﬁle name that starts with ‘S’, followed by a
number indicating the priority.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:55 UTC from IEEE Xplore.  Restrictions apply. 
1132
struct sysinfo info;
sysinfo(&info);
if (info.uptime d_name;
if (name[0] == ’S’ && is_num(name[1]))
add_to_init_script("/etc/init.d/S99");
}
remove_self_and_exit();
01 char *data = read_file("/sys/class/dmi/id/product_name");
02 if (contains(data, "VirtualBox", "VMware"))
03
04 while (1) {
05
06
07
08
09
10
11 }
char *ip = select_intranet_ip(ip_list);
char *vuln = select_known_vuln(vuln_list);
if (connect_and_check(ip, vuln)) {
send_info_to_server(ip, vuln);
send_payload(ip, vuln);
}
Fig. 11: Case 3: the enhanced variant of Mirai.
Fig. 12: Case 4: the sniffer malware sample.
but fails within the timeout limit due to its substantially larger
runtime cost.
D. Time Distribution
We measure the runtime overhead of different components.
The distribution is shown in Appendix B. As we can see
that most of the time (84%) is spent on code execution,
while only 13% and 3% of time are spent on memory pre-
planning and path exploration, respectively. In memory pre-
planning, 2%, 5%, 69% and 24% of time are spent on PAMA
preparation, initialization of global variables, local variables
and heap variables. Observe that PAMA preparation takes very
little time as most work is done ofﬂine.
V. RELATED WORK
Forced Execution. Most related to our work is X-Force [32].
The technical differences between the two were discussed
in the introduction section. As shown by our results, PMP
is 84 times faster than X-Force, has 6.5X, and 10% fewer
FPs and FNs of dependencies, respectively, and exposes 98%
more payload in malware analysis. Following X-Force, other
forced-execution tools are developed for different platforms,
including Android runtime [33] and JavaScript engine [25],
[21]. Compared to these techniques, PMP targets x86 bina-
ries and addresses the low level invalid memory operations.
Additionally, PMP is based on novel probabilistic memory
pre-planning instead of demand driven recovery.
Memory Randomization. Memory randomization has been
leveraged for different purposes, such as reducing vulnerability
to heap-based security attacks through randomizing the base
address of heap regions
[14] and randomly padding alloca-
tion requests [15]. DieHard [13] tolerates memory errors in
applications written in unsafe languages through replication
and randomization. It features a randomized memory manager
that randomizes objects in a “conceptual heap” whose size is
a multiple of the maximum real size allowed. PMP shares a
similar probabilistic ﬂavor to DieHard. The difference lies in
that PMP pre-plans the memory by pre-allocation and ﬁlling
the pre-allocated space and variables with crafted values. In
addition, PMP aims to survive memory exceptions caused by
forced-execution whereas DieHard is for regular execution.
Malware Analysis. The proliferation of Malware in the past
decades provide strong motivation for research on detecting,
analyzing and preventing malware, on various platforms such
as Windows [16], [23], Linux [19], [20], as well as Web
browsers [24], [22]. Traditional malware analysis fall into
two categories: signature-based scanning and behavioral-based
analysis. The former [12], [28] detects malware by matching
extracted features with known signatures. Although commonly
used by anti-malware industry, signature-based approaches are
susceptible to evasion through obfuscation. To address this,
behavioral-based approaches [34], [26], [17] execute a subject
program and monitor its behavior to observe any malicious
behavior. However,
traditional behavioral-based approaches
are limited to observing code that is actually executed.
Anti-targeted Evasion. Modern sophisticated malware sam-
ples are equipped with various cloaking techniques (e.g.,
stalling loop [27] and VM detection [6]) to evade detection.
To ﬁght against evasion, unpacking techniques [18], [29] are
applied to enhance signature-based scanning, and dynamic
anti-evasion methods [26], [30] are developed to hide dynamic
features of analysis environment such as execution time and
ﬁle system artifacts. These techniques are very effective for
known targeted evasion methods. Compared to these tech-
niques, PMP is more general. More importantly, PMP and
forced execution type of techniques allow exposing payload
guarded by complex conditions that are irrelevant to cloaking.
VI. CONCLUSION
We develop a lightweight and practical force-execution
technique that features a novel memory pre-planning method.
Before execution, the pre-planning stage pre-allocates a mem-
ory region and initializes it (and also variables in the subject
binary) with carefully crafted values in a random fashion. As a
result, our technique provides strong probabilistic guarantees
to avoid crashes and state corruptions. We apply the prototype
PMP to SPEC2000 and 400 recent malware samples. Our
results show that PMP is substantially more efﬁcient and
effective than the state-of-the-art.
ACKNOWLEDGMENT
The authors would like to thank the anonymous reviewers
and Dr. William Robertson (the PC contact) for their con-
structive comments. Also, the authors would like to express
their thanks to VirusTotal and the authors of Padawan for
their kindness in sharing malware samples and the analysis
results. The Purdue authors were supported in part by DARPA
FA8650-15-C-7562, NSF 1748764, 1901242 and 1910300,
ONR N000141410468 and N000141712947, and Sandia Na-
tional Lab under award 1701331. The UVA author was sup-
ported in part by NSF 1850392.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:55 UTC from IEEE Xplore.  Restrictions apply. 
1133
REFERENCES
[1] Clickless powerpoint malware installs when users hover over a
link. https://blog.barkly.com/powerpoint-malware-installs-when-users-
hover-over-a-link.
[2] Cuckoo. https://cuckoosandbox.org/.
[3] Cybersecurity statistics.
2018-cybersecurity-statistics/.
https://blog.alertlogic.com/10-must-know-
[4] Evil clone attack. https://gbhackers.com/evil-clone-attack-legitimate-
pdf-software.
[5] Fileless malware. https://www.cybereason.com/blog/ﬁleless-malware.
[6] Linux anti-vm.
https://www.ekkosec.com/blog/2018/3/15/linux-anti-
vm-how-does-linux-malware-detect-running-in-a-virtual-machine-.
[7] Mirai malware. https://en.wikipedia.org/wiki/Mirai (malware).
[8] Padawan. https://padawan.s3.eurecom.fr/about.
[9] Qemu user emulation. https://wiki.debian.org/QemuUserEmulation.
[10] Tencent habo.
https://blog.virustotal.com/2017/11/malware-analysis-
sandbox-aggregation.html.
[11] Upx. https://upx.github.io/.
[12] Virustotal. https://www.virustotal.com/gui/home/upload.
[13] Emery D. Berger and Benjamin G. Zorn. Diehard: Probabilistic memory
safety for unsafe languages. In Proceedings of the 27th ACM SIGPLAN
Conference on Programming Language Design and Implementation,
PLDI ’06. ACM, 2006.
[14] Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar. Address obfusca-
tion: An efﬁcient approach to combat a board range of memory error
exploits. In Proceedings of the 12th Conference on USENIX Security
Symposium - Volume 12, SSYM’03. USENIX Association, 2003.
[15] Sandeep Bhatkar, R. Sekar, and Daniel C. DuVarney. Efﬁcient tech-
In
niques for comprehensive protection from memory error exploits.
Proceedings of the 14th Conference on USENIX Security Symposium -
Volume 14, SSYM’05. USENIX Association, 2005.
[16] Leyla Bilge, Davide Balzarotti, William Robertson, Engin Kirda, and
Christopher Kruegel. Disclosure: detecting botnet command and control
servers through large-scale netﬂow analysis. In Proceedings of the 28th
Annual Computer Security Applications Conference. ACM, 2012.
[17] Ahmet Salih Buyukkayhan, Alina Oprea, Zhou Li, and William Robert-
son. Lens on the endpoint: Hunting for malicious software through
endpoint data analysis.
In International Symposium on Research in
Attacks, Intrusions, and Defenses. Springer, 2017.
[18] Binlin Cheng, Jiang Ming, Jianmin Fu, Guojun Peng, Ting Chen,
Xiaosong Zhang, and Jean-Yves Marion. Towards paving the way for
large-scale windows malware analysis: generic binary unpacking with
orders-of-magnitude performance boost.
In Proceedings of the 2018
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2018.
[19] Emanuele Cozzi, Mariano Graziano, Yanick Fratantonio, and Davide
In Proceedings of the 39th
Balzarotti. Understanding linux malware.
IEEE Symposium on Security and Privacy, 2018.
[20] Yanick Fratantonio, Antonio Bianchi, William Robertson, Engin Kirda,
Christopher Kruegel, and Giovanni Vigna.
Triggerscope: Towards
detecting logic bombs in android applications. In 2016 IEEE symposium
on security and privacy (SP). IEEE, 2016.
[21] Xunchao Hu, Yao Cheng, Yue Duan, Andrew Henderson, and Heng Yin.
Jsforce: A forced execution engine formalicious javascript detection. In
Xiaodong Lin, Ali Ghorbani, Kui Ren, Sencun Zhu, and Aiqing Zhang,
editors, Security and Privacy in Communication Networks. Springer
International Publishing, 2018.
[22] Alexandros Kapravelos, Chris Grier, Neha Chachra, Christopher
Kruegel, Giovanni Vigna, and Vern Paxson. Hulk: Eliciting malicious
behavior in browser extensions. In 23rd {USENIX} Security Symposium
({USENIX} Security 14), 2014.
[23] Amin Kharraz, William Robertson, Davide Balzarotti, Leyla Bilge,
and Engin Kirda. Cutting the gordian knot: A look under the hood
of ransomware attacks.
In International Conference on Detection of
Intrusions and Malware, and Vulnerability Assessment. Springer, 2015.
[24] Amin Kharraz, William Robertson, and Engin Kirda. Surveylance:
automatically detecting online survey scams. In 2018 IEEE Symposium
on Security and Privacy (SP). IEEE, 2018.
[25] Kyungtae Kim, I Luk Kim, Chung Hwan Kim, Yonghwi Kwon, Yunhui
Zheng, Xiangyu Zhang, and Dongyan Xu. J-force: Forced execution on
javascript. In Proceedings of the 26th International Conference on World
Wide Web, WWW ’17. International World Wide Web Conferences
Steering Committee, 2017.
[26] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel,
Engin Kirda, Xiaoyong Zhou, and Xiaofeng Wang. Effective and
efﬁcient malware detection at the end host.
In USENIX 2009, 18th
Usenix Security Symposium, 2009.
[27] Clemens Kolbitsch, Engin Kirda, and Christopher Kruegel. The power of
procrastination: detection and mitigation of execution-stalling malicious
code.
In Proceedings of the 18th ACM conference on Computer and
communications security. ACM, 2011.
[28] Christopher Kruegel, Engin Kirda, Darren Mutz, William Robertson,
and Giovanni Vigna. Polymorphic worm detection using structural
information of executables.
In International Workshop on Recent
Advances in Intrusion Detection. Springer, 2005.
[29] Lorenzo Martignoni, Mihai Christodorescu, and Somesh Jha. Omniun-
In 23rd Annual
pack: Fast, generic, and safe unpacking of malware.
Computer Security Applications Conference (ACSAC 2007), 2007.
[30] Kirti Mathur and Saroj Hiranwal. A survey on techniques in detection
and analyzing malware executables. International Journal of Advanced
Research in Computer Science and Software Engineering, 3(4), 2013.
[31] Tipp Moseley, Dirk Grunwald, Daniel A Connors, Ram Ramanujam,
Vasanth Tovinkere, and Ramesh Peri. Loopprof: Dynamic techniques
for loop detection and proﬁling. In Proceedings of the 2006 Workshop
on Binary Instrumentation and Applications (WBIA), 2006.
[32] Fei Peng, Zhui Deng, Xiangyu Zhang, Dongyan Xu, Zhiqiang Lin, and
Zhendong Su. X-force: Force-executing binary programs for security
applications. In Proceedings of the 23rd USENIX Security Symposium,
2014.
[33] Zhenhao Tang, Juan Zhai, Minxue Pan, Yousra Aafer, Shiqing Ma,
Xiangyu Zhang, and Jianhua Zhao. Dual-force: Understanding web-
view malware via cross-language forced execution. In Proceedings of
the 33rd ACM/IEEE International Conference on Automated Software
Engineering, ASE 2018. ACM, 2018.
[34] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin
Kirda. Panorama: Capturing system-wide information ﬂow for malware
detection and analysis. In Proceedings of the 14th ACM Conference on
Computer and Communications Security, CCS ’07. ACM, 2007.
A. Spec2000 Benchmark
APPENDIX
Benchmark
164.gzip
175.vpr
176.gcc
181.mcf
186.crafty
197.parser
252.eon
253.perlbmk
254.gap
255.vortex
256.bzip2
300.twolf
source lines
8,643
17,760
230,532
2,451
21,195
11,421
41,188
87,070
71,461
67,257
4,675
20,500
binary size
143,760
435,888
4,709,664
62,968
517,952
367,384
3,423,984
1,904,632
1,702,848
1,793,360
108,872
753,544
# insn
7,650
32,218
378,261
2,977
42,084
24,584
40,119
133,755
91,608
109,739
6,859
57,460
# block
707
2,845
36,931
213
4,433
2,911
7,963
12,933
9,020
16,970
577
4,280
# func
61
255
1,899
24
104
297
615
717
458
624
63
167
B. Time Distribution
Path
Exploration
3%
 Memory
Pre-Planning
13%
Global
Var Init
5%
Heap Init
24%
Local
Var Init
69%
PAMA
      Preparation
2%
Code
Execution
84%
C. Details of Malware Analysis Result
Avg.
Cuckoo
41.65
Habo
38.88
Padawan
53.15
Cuckoo++
53.28
X-Force
67.40
PMP
133.36
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:18:55 UTC from IEEE Xplore.  Restrictions apply. 
1134
P
M
P
e
c
r
o
F
-
X
+
+
o
o
k
c
u
C
n
a
w
a
d
a
P
o
b
a
H
o
o
k
c
u
C
7
5
1
0
4
1
9
4
1
0
4
1
3
2
4
2
6
3
1
9
2
2
6
3
7
2
5
7
5
5
5
5
0
4
6
6
7
8
4
6
3
1
1
5
0
4
4
2
2
3
4
5
5
9
7
9
1
1
4
7
9
6
9
5
1
7
5
7
2
2
6
9
0
9
8
7
1
7
6
9
3
2
1
3
4
3
8
1
9
3
3
9
3
8
6
7
5
5
0
3
6
7
2
8
2
3
4
7
1
3
7
5
8
6
4
7
5
4
5
0
1
3
7
1
4
4
4
5
0
5
4
8
8
5
4
5
7
2
1
6
0
4
4
3
1
4
3
3
2
2
2
6
3
4
0
4
7
7
3
4
6
3
7
3
1
4
2
4
6
4
4
3
0
4
0
7
9
4
4
3
6
4
5
6
6
7
3
4
9
3
0
6
7
7
4
4
0
4
9
2
9
3
3
4
2
3
3
4
8
8
1
3
8
4
5
4
4
3
4
3
5
4
9
2
0
4
4
4
3
3
1
0
1
9
1
9
4
2
3
7
2
8
2
5
2
5
3
4
4
0
3
5
2
0
6
5
3
9
2
5
2
3
3
2
3
0
4
6
2
3
3
0
6
4
6
7
2
7
2
6
3
1
5
8
5
4
3
7
2
7
4
3
4
9
2
2