Intrusions and Malware, and Vulnerability Assessment. Springer, 25–34.
[8] Pietro Braione, Giovanni Denaro, and Mauro Pezzè. 2016.
JBSE: a symbolic
executor for Java programs with complex heap inputs. In Proceedings of the
2016 24th ACM SIGSOFT International Symposium on Foundations of Software
Engineering. ACM, 1018–1022.
[9] David Brumley, Cody Hartwig, Min Gyung Kang, Zhenkai Liang, James Newsome,
Pongsin Poosankam, Dawn Song, and Heng Yin. 2007. BitScope: Automatically
dissecting malicious binaries. Technical Report. Technical Report CS-07-133,
School of Computer Science, Carnegie Mellon ....
[10] David Brumley, Pongsin Poosankam, Dawn Song, and Jiang Zheng. 2008. Auto-
matic Patch-Based Exploit Generation is Possible: Techniques and Implications.
In USENIX Security.
[11] Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. 2008. KLEE: Unassisted and
Automatic Generation of High-Coverage Tests for Complex Systems Programs..
In OSDI, Vol. 8. 209–224.
[12] Cristian Cadar, Vijay Ganesh, Peter M Pawlowski, David L Dill, and Dawson R
Engler. 2008. EXE: automatically generating inputs of death. TISSEC (2008).
[13] Cristian Cadar and Koushik Sen. 2013. Symbolic execution for software testing:
three decades later. Commun. ACM 56, 2 (2013), 82–90.
[14] Chen Cao, Le Guan, Jiang Ming, and Peng Liu. 2020. Device-agnostic Firmware
Execution is Possible: A Concolic Execution Approach for Peripheral Emulation.
In Annual Computer Security Applications Conference. 746–759.
[15] Z Berkay Celik, Leonardo Babun, Amit Kumar Sikder, Hidayet Aksu, Gang Tan,
Patrick McDaniel, and A Selcuk Uluagac. 2018. Sensitive information tracking in
commodity IoT. In USENIX Security.
[16] Z Berkay Celik, Earlence Fernandes, Eric Pauley, Gang Tan, and Patrick McDaniel.
2018. Program Analysis of Commodity IoT Applications for Security and Privacy:
Challenges and Opportunities. arXiv preprint arXiv:1809.06962 (2018).
[17] Z Berkay Celik, Patrick McDaniel, and Gang Tan. 2018. Soteria: Automated iot
safety and security analysis. In USENIX Security’18). 147–158.
[18] Z Berkay Celik, Gang Tan, and Patrick D McDaniel. 2019. IoTGuard: Dynamic
Enforcement of Security and Safety Policy in Commodity IoT.. In NDSS.
[19] Yaohui Chen, Peng Li, Jun Xu, Shengjian Guo, Rundong Zhou, Yulong Zhang,
Tao Wei, and Long Lu. 2020. Savior: Towards bug-driven hybrid testing. In 2020
IEEE Symposium on Security and Privacy (SP). IEEE, 1580–1596.
[20] Haotian Chi, Qiang Zeng, Xiaojiang Du, and Lannan Luo. 2021. PFirewall:
Semantics-Aware Customizable Data Flow Control for Home Automation Sys-
tems. In NDSS.
[21] Haotian Chi, Qiang Zeng, Xiaojiang Du, and Jiaping Yu. 2018. Cross-App Inter-
ference Threats in Smart Homes: Categorization, Detection and Handling. arXiv
preprint arXiv:1808.02125 (2018).
[22] Haotian Chi, Qiang Zeng, Xiaojiang Du, and Jiaping Yu. 2020. Cross-app interfer-
ence threats in smart homes: Categorization, detection and handling. In 2020 50th
Annual IEEE/IFIP International Conference on Dependable Systems and Networks
(DSN). IEEE, 411–423.
[23] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: a
Platform for In-Vivo Multi-Path Analysis of Software Systems. In ASPLOS.
[24] Code Review Guidelines and Best Practices. [n. d.]. https://www.seleniumhq.org.
[25] J Conway. 1972. Unpredictable iterations. (1972).
[26] Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh Jha. 2013.
FIE on Firmware: Finding Vulnerabilities in Embedded Systems Using Symbolic
Execution.. In USENIX Security Symposium. 463–478.
[27] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An efficient SMT solver. In
International conference on Tools and Algorithms for the Construction and Analysis
of Systems. Springer, 337–340.
[28] Wenbo Ding and Hongxin Hu. 2018. On the safety of iot device physical interac-
tion control. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and
Communications Security. 832–846.
[29] Earlence Fernandes, Justin Paupore, Amir Rahmati, Daniel Simionato, Mauro
Conti, and Atul Prakash. 2016. Flowfence: Practical data protection for emerging
iot application frameworks. In USENIX Security 16.
[30] Chenglong Fu, Qiang Zeng, and Xiaojiang Du. 2021. Hawatcher: Semantics-
aware anomaly detection for appified smart homes. In 30th {USENIX} Security
Symposium ({USENIX} Security 21).
[31] Xiang Gao, Shin Hwei Tan, Zhen Dong, and Abhik Roychoudhury. 2018. Android
testing via synthetic symbolic execution. In 2018 33rd IEEE/ACM International
Conference on Automated Software Engineering (ASE). IEEE, 419–429.
[32] Patrice Godefroid. 2007. Compositional dynamic test generation. In Proceedings of
the 34th annual ACM SIGPLAN-SIGACT symposium on Principles of programming
languages. 47–54.
[33] Patrice Godefroid. 2011. Higher-order test generation. In Proceedings of the 32nd
ACM SIGPLAN conference on Programming language design and implementation.
258–269.
[34] Patrice Godefroid, Nils Klarlund, and Koushik Sen. 2005. DART: directed auto-
mated random testing. In ACM Sigplan Notices. ACM.
[35] Patrice Godefroid, Michael Y Levin, and David Molnar. 2012. SAGE: Whitebox
Fuzzing for Security Testing: SAGE has had a remarkable impact at Microsoft.
Queue 10, 1 (2012), 20–27.
[36] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. 2008. Automated
Whitebox Fuzz Testing.. In NDSS, Vol. 8. 151–166.
[37] Rajiv Gupta. 1992. Generalized dominators and post-dominators. In Proceedings
of the 19th ACM SIGPLAN-SIGACT symposium on Principles of programming
languages. ACM, 246–257.
[38] Grant Hernandez, Farhaan Fowze, Dave Tian, Tuba Yavuz, and Kevin RB Butler.
2017. Firmusb: Vetting USB device firmware using domain informed symbolic
execution. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and
Communications Security. 2245–2262.
[39] Yunhan Jack Jia, Qi Alfred Chen, Shiqi Wang, Amir Rahmati, Earlence Fernandes,
Zhuoqing Morley Mao, Atul Prakash, and Shanghai JiaoTong Unviersity. 2017.
ContexloT: Towards Providing Contextual Integrity to Appified IoT Platforms..
In NDSS.
[40] James C King. 1976. Symbolic execution and program testing. Commun. ACM
19, 7 (1976), 385–394.
Mathematical Soc.
[41] Jeffrey C Lagarias. 2010. The ultimate challenge: The 3x+ 1 problem. American
[42] Thomas Lengauer and Robert Endre Tarjan. 1979. A fast algorithm for finding
dominators in a flowgraph. ACM Transactions on Programming Languages and
Systems (TOPLAS) 1, 1 (1979), 121–141.
[43] Xiaopeng Li, Fengyao Yan, Fei Zuo, Qiang Zeng, and Lannan Luo. 2019. Touch
well before use: Intuitive and secure authentication for iot devices. In The 25th
annual international conference on mobile computing and networking. 1–17.
[44] Xiaopeng Li, Qiang Zeng, Lannan Luo, and Tongbo Luo. 2020. T2pair: Secure
and usable pairing for heterogeneous iot devices. In Proceedings of the 2020 ACM
SIGSAC Conference on Computer and Communications Security. 309–323.
[45] Dongge Liu, Gidon Ernst, Toby Murray, and Benjamin IP Rubinstein. 2020. Legion:
Best-First Concolic Testing. In 2020 35th IEEE/ACM International Conference on
Automated Software Engineering (ASE). IEEE, 54–65.
[46] Xuanyu Liu, Qiang Zeng, Xiaojiang Du, Siva Likitha Valluru, Chenglong Fu, Xiao
Fu, and Bin Luo. 2021. SniffMislead: Non-Intrusive Privacy Protection against
Wireless Packet Sniffers in Smart Homes. In RAID.
[47] Lannan Luo. 2020. Heap memory snapshot assisted program analysis for android
permission specification. In 2020 IEEE 27th International Conference on Software
Analysis, Evolution and Reengineering (SANER). IEEE, 435–446.
[48] Lannan Luo, Yu Fu, Dinghao Wu, Sencun Zhu, and Peng Liu. 2016. Repackage-
proofing android apps. In 2016 46th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks (DSN). IEEE, 550–561.
[49] Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu. 2014.
Semantics-based obfuscation-resilient binary code similarity comparison with
applications to software plagiarism detection. In Proceedings of the 22nd ACM
SIGSOFT International Symposium on Foundations of Software Engineering. 389–
400.
[50] Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu. 2017.
Semantics-based obfuscation-resilient binary code similarity comparison with
applications to software and algorithm plagiarism detection. IEEE Transactions
on Software Engineering 43, 12 (2017), 1157–1177.
[51] Lannan Luo, Qiang Zeng, Chen Cao, Kai Chen, Jian Liu, Limin Liu, Neng Gao,
Min Yang, Xinyu Xing, and Peng Liu. 2017. System service call-oriented symbolic
execution of android framework with applications to vulnerability discovery and
exploit generation. In Proceedings of the 15th Annual International Conference on
Mobile Systems, Applications, and Services. 225–238.
[52] Lannan Luo, Qiang Zeng, Chen Cao, Kai Chen, Jian Liu, Limin Liu, Neng Gao, Min
Yang, Xinyu Xing, and Peng Liu. 2019. Tainting-assisted and context-migrated
symbolic execution of Android framework for vulnerability discovery and exploit
generation. IEEE Transactions on Mobile Computing 19, 12 (2019), 2946–2964.
[53] Rupak Majumdar and Koushik Sen. 2007. Hybrid concolic testing. In 29th Inter-
national Conference on Software Engineering (ICSE’07). IEEE, 416–426.
994ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Lannan Luo, Qiang Zeng, Bokai Yang, Fei Zuo, and Junzhe Wang
[54] Nariman Mirzaei, Sam Malek, Corina S Păsăreanu, Naeem Esfahani, and Riyadh
Mahmood. 2012. Testing android apps through symbolic execution. ACM SIGSOFT
Software Engineering Notes 37, 6 (2012), 1–5.
[55] Malte Mues, Till Schallau, and Falk Howar. 2020. Jaint: A Framework for User-
Defined Dynamic Taint-Analyses Based on Dynamic Symbolic Execution of Java
Programs. In International Conference on Integrated Formal Methods. Springer,
123–140.
[56] Dang Tu Nguyen, Chengyu Song, Zhiyun Qian, Srikanth V Krishnamurthy,
Edward JM Colbert, and Patrick McDaniel. 2018. IotSan: Fortifying the safety
of IoT systems. In Proceedings of the 14th International Conference on emerging
Networking EXperiments and Technologies. 191–203.
[57] Saahil Ognawala, Thomas Hutzelmann, Eirini Psallida, and Alexander Pretschner.
2018. Improving function coverage with munch: a hybrid fuzzing and directed
symbolic execution approach. In Proceedings of the 33rd Annual ACM Symposium
on Applied Computing. ACM, 1475–1482.
[58] Brian S Pak. 2012. Hybrid fuzz testing: Discovering software bugs via fuzzing
and symbolic execution. School of Computer Science Carnegie Mellon University
(2012).
[59] Corina S. Păsăreanu, Willem Visser, David Bushnell, Jaco Geldenhuys, Peter
Mehlitz, and Neha Rungta. [n. d.]. Symbolic PathFinder: integrating symbolic
execution with model checking for Java bytecode analysis. In ASE’13.
[60] Koushik Sen, Darko Marinov, and Gul Agha. 2005. CUTE: a concolic unit testing
engine for C. In ACM SIGSOFT Software Engineering Notes, Vol. 30. ACM, 263–272.
[61] Vijay Sivaraman, Hassan Habibi Gharakheili, Arun Vishwanath, Roksana Boreli,
and Olivier Mehani. 2015. Network-level security and privacy control for smart-
home IoT devices. In WiMob. IEEE.
[62] SmartThings. [n. d.].
An Overview of Using Custom Code in Smart-
https://community.smartthings.com/t/faq-an-overview-of-using-
Things.
custom-code-in-smartthings-smartthings-classic/16772.
[63] SmartThings. [n. d.]. SmartThings Community. https://community.smartthings.
[64] SmartThings. 2018. Code Review Guidelines and Best Practices. https://docs.
smartthings.com/en/latest/code-review-guidelines.html.
[65] SmartThings. 2020. SmartThings Community Forum For Third-party Apps.
https://community.smartthings.com/.
[66] SmartThings.
2020.
https://github.com/SmartThingsCommunity.
SmartThings Official App
Repository.
com.
[67] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang,
Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna.
2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution.. In
NDSS, Vol. 16. 1–16.
[68] Pramod Subramanyan, Sharad Malik, Hareesh Khattri, Abhranil Maiti, and Jason
Fung. 2016. Verifying information flow properties of firmware using symbolic
execution. In 2016 Design, Automation & Test in Europe Conference & Exhibition
(DATE). IEEE, 337–342.
[69] The Apache Groovy Programming Language. 2019. Closures. https://groovy-
lang.org/closures.html.
[70] Things That Are Smart. [n. d.]. Using Custom Code. https://thingsthataresmart.
wiki/index.php?title=Using_Custom_Code.
[71] Rahmadi Trimananda, Seyed Amir Hossein Aqajari, Jason Chuang, Brian Demsky,
Guoqing Harry Xu, and Shan Lu. 2020. Understanding and automatically detect-
ing conflicting interactions between smart home IoT applications. In Proceedings
of the 28th ACM Joint Meeting on European Software Engineering Conference and
Symposium on the Foundations of Software Engineering. 1215–1227.
[72] Qi Wang, Pubali Datta, Wei Yang, Si Liu, Adam Bates, and Carl A Gunter. 2019.
Charting the attack surface of trigger-action IoT platforms. In Proceedings of
the 2019 ACM SIGSAC Conference on Computer and Communications Security.
1439–1453.
[73] Qi Wang, Wajih Ul Hassan, Adam Bates, and Carl Gunter. 2018. Fear and Logging
in the Internet of Things. In NDSS.
[74] Tielei Wang, Tao Wei, Zhiqiang Lin, and Wei Zou. 2009. IntScope: Automati-
cally Detecting Integer Overflow Vulnerability in X86 Binary Using Symbolic
Execution.. In NDSS. Citeseer.
[75] Xinyu Wang, Jun Sun, Zhenbang Chen, Peixin Zhang, Jingyi Wang, and Yun Lin.
2018. Towards optimal concolic testing. In Proceedings of the 40th International
Conference on Software Engineering. 291–302.
[76] Rixin Xu, Qiang Zeng, Liehuang Zhu, Haotian Chi, Xiaojiang Du, and Mohsen
Guizani. 2019. Privacy leakage in smart homes and its mitigation: IFTTT as a
case study. IEEE Access 7 (2019), 63457–63471.
[77] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. 2018. {QSYM}: A
practical concolic execution engine tailored for hybrid fuzzing. In 27th {USENIX}
Security Symposium ({USENIX} Security 18). 745–761.
[78] Jonas Zaddach, Luca Bruno, Aurelien Francillon, and Davide Balzarotti. 2014.
AVATAR: A Framework to Support Dynamic Security Analysis of Embedded
Systems’ Firmwares.. In NDSS.
[79] Qiang Zeng, Lannan Luo, Zhiyun Qian, Xiaojiang Du, and Zhoujun Li. 2018.
Resilient decentralized android application repackaging detection using logic
bombs. In Proceedings of the 2018 International Symposium on Code Generation
and Optimization. 50–61.
[80] Qiang Zeng, Lannan Luo, Zhiyun Qian, Xiaojiang Du, Zhoujun Li, Chin-Tser
Huang, and Csilla Farkas. 2019. Resilient user-side Android application repack-
aging and tampering detection using cryptographically obfuscated logic bombs.
IEEE Transactions on Dependable and Secure Computing (2019).
[81] Bin Zhang, Chao Feng, Adrian Herrera, Vitaly Chipounov, George Candea, and
Chaojing Tang. 2018. Discover deeper bugs with dynamic symbolic execution
and coverage-based fuzz testing. Iet Software 12, 6 (2018), 507–519.
[82] Bin Zhang, Chao Feng, Bo Wu, and Chaojing Tang. 2016. Detecting integer over-
flow in Windows binary executables based on symbolic execution. In 2016 17th
IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence,
Networking and Parallel/Distributed Computing (SNPD). IEEE, 385–390.
[83] Li Zhang and Vrizlynn LL Thing. 2017. A hybrid symbolic execution assisted
fuzzing method. In TENCON 2017-2017 IEEE Region 10 Conference. IEEE, 822–825.
[84] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. 2019. Send Hardest Problems
My Way: Probabilistic Path Prioritization for Hybrid Fuzzing.. In NDSS.
[85] Wei Zhou, Le Guan, Peng Liu, and Yuqing Zhang. 2021. Automatic Firmware
Emulation through Invalidity-guided Knowledge Inference. In 30th {USENIX}
Security Symposium ({USENIX} Security 21).
[86] Chaoshun Zuo and Zhiqiang Lin. 2017. Smartgen: Exposing server urls of mobile
apps with selective symbolic execution. In Proceedings of the 26th International
Conference on World Wide Web. 867–876.
995