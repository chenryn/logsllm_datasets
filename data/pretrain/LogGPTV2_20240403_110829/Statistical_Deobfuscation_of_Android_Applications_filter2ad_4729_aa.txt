title:Statistical Deobfuscation of Android Applications
author:Benjamin Bichsel and
Veselin Raychev and
Petar Tsankov and
Martin T. Vechev
Statistical Deobfuscation of Android Applications
Benjamin Bichsel
Veselin Raychev
Department of Computer Science
Petar Tsankov Martin Vechev
PI:EMAIL {veselin.raychev, ptsankov, martin.vechev}@inf.ethz.ch
ETH Zurich
ABSTRACT
This work presents a new approach for deobfuscating An-
droid APKs based on probabilistic learning of large code
bases (termed “Big Code”). The key idea is to learn a prob-
abilistic model over thousands of non-obfuscated Android
applications and to use this probabilistic model to deob-
fuscate new, unseen Android APKs. The concrete focus
of the paper is on reversing layout obfuscation, a popular
transformation which renames key program elements such
as classes, packages and methods, thus making it diﬃcult to
understand what the program does.
Concretely, the paper: (i) phrases the layout deobfusca-
tion problem of Android APKs as structured prediction in
a probabilistic graphical model, (ii) instantiates this model
with a rich set of features and constraints that capture the
Android setting, ensuring both semantic equivalence and
high prediction accuracy, and (iii) shows how to leverage
powerful inference and learning algorithms to achieve over-
all precision and scalability of the probabilistic predictions.
We implemented our approach in a tool called DeGuard
and used it to: (i) reverse the layout obfuscation performed
by the popular ProGuard system on benign, open-source ap-
plications, (ii) predict third-party libraries imported by be-
nign APKs (also obfuscated by ProGuard), and (iii) rename
obfuscated program elements of Android malware. The ex-
perimental results indicate that DeGuard is practically ef-
fective:
it recovers 79.1% of the program element names
obfuscated with ProGuard, it predicts third-party libraries
with accuracy of 91.3%, and it reveals string decoders and
classes that handle sensitive data in Android malware.
1.
INTRODUCTION
This paper presents a new approach for deobfuscating
Android applications based on probabilistic models. Our
approach uses large amounts of existing Android programs
available in public repositories (referred to as “Big Code”)
to learn a powerful probabilistic model which captures key
features of non-obfuscated Android programs. It then uses
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978422
this probabilistic model to suggest a (statistically likely) de-
obfuscation of new, obfuscated Android applications. Our
approach enables a variety of security applications. For in-
stance, our system successfully deobfuscates Android APKs
produced by ProGuard [6], the most popular obfuscation
tool for Android applications.
Focus: Layout Deobfuscation.
The focus of this paper is on reversing layout obfuscation
of Android APKs. While general obfuscation can include
other transformations (e.g., changes to the program’s data
representation or control-ﬂow [25]), layout obfuscation re-
mains a key part of virtually all obfuscation tools. In layout
obfuscation, the names of program elements that carry key
semantic information are replaced with other (short) identi-
ﬁers with no semantic meaning. Examples of such elements
are comments, variable, method and class names. Renaming
these program elements makes it much harder for humans
to read and understand what the program does and is use-
ful in a variety of security scenarios including protection of
intellectual property.
Beneﬁts and Challenges.
Among others, reversing layout obfuscation for Android
APKs has various beneﬁts including: (i) it makes it easier
for security analysts to inspect Android applications obfus-
cated with ProGuard, (ii) it identiﬁes third-party libraries
embedded in Android APKs, and (iii) it enables one to au-
tomatically search for certain identiﬁers in the code.
However, reversing layout obfuscation is a hard problem.
The reason is that once the original names are removed from
the application and replaced with short meaningless identi-
ﬁers, there is little hope in recovering the original names by
simply inspecting the application alone, in isolation.
Probabilistic Learning from “Big Code”.
To address challenges that are diﬃcult to solve by consid-
ering the program in isolation, the last couple of years have
seen an emerging interest in new kinds of statistical tools
which learn probabilistic models from “Big Code” and then
use these models to provide likely solutions to tasks that
are diﬃcult to solve otherwise. Examples of such tasks in-
clude machine translation between programming languages
[18], statistical code synthesis [32, 30], and predicting names
and types in source code [31, 9]. Interestingly, due to their
unique capabilities, some of these probabilistic systems have
quickly become popular in the developer community [31].
343This Work: Android Deobfuscation via “Big Code”.
Example.
Motivated by these advances, we present a new approach
for reversing Android layout obfuscation by learning from
thousands of readily available, non-obfuscated Android ap-
plications. Technically, our approach works by phrasing the
problem of predicting identiﬁer names (e.g., class names,
method names, etc.)
renamed by layout obfuscation as
structured prediction with probabilistic graphical models.
In particular, we leverage Conditional Random Fields (CRFs)
[23], a powerful model widely used in various areas includ-
ing computer vision and natural language processing. To our
knowledge, this is the ﬁrst time probabilistic graphical mod-
els learned from “Big Code” have been applied to address a
core security challenge. Using our approach we present a
tool called DeGuard, and show that it can automatically
reverse layout obfuscation of Android APKs as performed
by ProGuard with high precision.
Main Contributions.
The main contributions of this paper are:
• A structured prediction approach for performing prob-
abilistic layout deobfuscation of Android APKs.
• A set of features and constraints cleanly capturing key
parts of Android applications. Combined, these ensure
our probabilistic predictions result in high precision
and preserve application’s semantics.
• A complete implementation of our approach in a scal-
able probabilistic system called DeGuard1.
• An evaluation of DeGuard on open-source Android
applications obfuscated by ProGuard and Android mal-
ware samples. Our results show that DeGuard is
practically eﬀective: it correctly predicts 79.1% of the
program elements obfuscated by ProGuard, it iden-
tiﬁes 91.3% of the imported third-party libraries, and
reveals relevant string decoders and classes in malware.
2. OVERVIEW
In this section we provide an informal overview of our
statistical deobfuscation approach for Android. First, we
discuss ProGuard, which is the most widely used tool for
obfuscating Android applications. We then present the key
steps of our DeGuard system. The purpose here is to pro-
vide an intuitive understanding of the approach. Full formal
details are presented in the later sections.
2.1 ProGuard
ProGuard obfuscates program elements including names
of ﬁelds, methods, classes, and packages, by replacing them
with semantically obscure names.
It also removes unused
classes, ﬁelds, and methods to minimize the size of the result-
ing Android application package (APK) released to users.
ProGuard processes both the application and all third-party
libraries that the application imports (e.g., advertising and
analytics libraries). All third-party libraries imported by the
application are therefore concealed in the released APK.
ProGuard cannot obfuscate all program elements as that
would change the application’s semantics. For example, the
names of methods part of the Android API and the names
of classes referenced in static ﬁles, are kept intact.
1http://apk-deguard.com
Figure 1(a) shows a fragment of an Android application
that has been obfuscated with ProGuard (the obfuscated
program elements are highlighted with red). The depicted
code fragment can be easily obtained from the APK using
standard tools, such as Dex2Jar [2] and Java Decompiler [4].
Here, the name of the class is replaced with the non-
descriptive name a and similarly, the private ﬁeld of type
SQLiteDatabase and the method returning a Cursor object
are renamed with the obscure names b and c, respectively.
It is evident that inspection of this code, as well as any other
code using the obfuscated class a, is challenging. For exam-
ple, the intended behavior of the following two lines of code
is concealed due to the non-descriptive class and method
names:
a obj = new a();
obj.c(str);
As mentioned, ProGuard keeps the names of some pro-
gram elements to preserve the application’s semantics. For
example, the name of the class SQLiteOpenHelper and its
methods getWritableDatabase and rawQuery are not re-
named because this class is part of the core Android API.
2.2 DeGuard
Given an Android APK as input, DeGuard outputs a se-
mantically equivalent Android APK with descriptive names
for ﬁelds, methods, classes, and packages. We depict the
source code of the output APK produced by DeGuard in
Figure 1(d). The key steps of our approach are shown with
) in Figure 1. We now describe these
thick gray arrows (
steps.
Dependency Graph.
DeGuard analyzes the input APK and formalizes the
structure of the Android application as a graph over the
program elements, where an edge signiﬁes that the corre-
sponding two program elements are related. The graph in
Figure 1(b) illustrates a fragment of the generated depen-
dency graph for our example.
The red circular nodes denote the unknown (i.e., obfus-
cated) program elements whose names the tool will try to
predict, and the purple rectangular nodes are the known
program elements, which will not be modiﬁed by the tool.
The name of the class a is therefore represented with a
red node, while the class SQLiteOpenHelper with a purple
one. The graph’s edges are labeled with a particular rela-
tionship, which represents how the two program elements
are related. For example, the edge from node a to node
SQLiteOpenHelper is labeled with the relationship extends
to formalize that the former class extends the latter. Since
program elements can have multiple relationships, the de-
pendency graph may in general contain multiple edges be-
tween two nodes (thus, technically, the dependency graph is
a multigraph).
Formally, the relationships between two nodes represent
diﬀerent feature functions. The constructed dependency
graph, along with all feature functions speciﬁes a Condi-
tional Random Field (CRF) [23], a powerful probabilistic
graphical model. We formally deﬁne the dependency graph,
feature functions, and CRFs in Section 3, and the features
for Android applications in Section 4.
344super(context, "app.db", null, 1);
b = getWritableDatabase();
SQLiteDatabase b ;
public a (Context context) {
1 class a extends SQLiteOpenHelper {
2
3
4
5
6
7
8
9
10 }
}
}
Cursor c (String str){
return b .rawQuery(str);
(partial) Dependency graph:
SQLiteOpenHelper
extends
field-in
getWritableDatabase
gets
a
b
Derive graph,
and constraints
Naming constraints:
C = { a (cid:54)= MainActivity ,··· }
(b) Dependency graph, features, and constraints
(a) An Android application obfuscated by ProGuard
SQLiteDatabase db ;
public DBHelper (Context context) {
super(context, "app.db", null, 1);
db = getWritableDatabase();
1 class DBHelper extends SQLiteOpenHelper {
2
3
4
5
6
7
}
Cursor execSQL (String str){
Rename
identiﬁers
return db .rawQuery(str);
8
9
10 }
}
Predict
name 1
name 2
weight
SQLiteOpenHelper DBUtils 0.3
SQLiteOpenHelper DBHelper 0.2
SQLiteOpenHelper
extends
DBHelper
field-in
getWritableDatabase
db
gets
name 1
name 2
weight
DBUtils instance 0.5
DBHelper db
0.4
DBUtils db
0.2
DBHelper instance 0.2
name 1
name 2
weight
getWritableDatabase db
0.7
getWritableDatabase instance 0.4
(d) Deobfuscated Android application using DeGuard
(c) Graph with predicted unknown identiﬁers
Figure 1: Statistical deobfuscation of Android applications using DeGuard. The red color indicates the elements whose
names are to be renamed (in the input), the green color are the same elements with the new names (in the output), and the
purple color denotes the elements whose names are known and remain the same.
Syntactic and Semantic Constraints.
Given an Android APK, DeGuard automatically derives
a set of constraints which restricts the possible names as-
signed to the unknown program elements. These naming
constraints guarantee that the deobfuscated APK gener-
ated by DeGuard is: (i) a syntactically well-formed pro-
gram, and (ii) semantically equivalent to the input APK.
Two example constraints are: all ﬁelds declared in the same
class must have distinct names and all classes that belong
to the same package must have distinct names. Any well-
formed application must satisfy these two syntactic proper-
ties. Naming constraints of methods are more intricate due
to method overriding. For example, if a method in a sub-
class overrides a method in a superclass (in the input APK),
then the two methods must have the same name after de-
obfuscation to preserve the overriding property.