247
Validating an access token
In Java, overall TLS settings can be configured explicitly using the javax.net.ssl.SSL-
Parameters class8 (listing 7.8). First construct a new instance of the class, and then
use the setter methods such as setCipherSuites(String[])that allows TLS versions
and cipher suites. The configured parameters can then be passed when building the
HttpClient object. Open OAuth2TokenStore.java in your editor and update the con-
structor to configure secure TLS settings.
import javax.net.ssl.*;
import java.security.*;
import java.net.http.*;
var sslParams = new SSLParameters();
sslParams.setProtocols(                           
        new String[] { "TLSv1.3", "TLSv1.2" });   
sslParams.setCipherSuites(new String[] {
        "TLS_AES_128_GCM_SHA256",         
        "TLS_AES_256_GCM_SHA384",         
        "TLS_CHACHA20_POLY1305_SHA256",   
        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",       
        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",         
        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",       
        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",         
        "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", 
        "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"    
});
sslParams.setUseCipherSuitesOrder(true);
sslParams.setEndpointIdentificationAlgorithm("HTTPS");
try {
    var trustedCerts = KeyStore.getInstance("PKCS12");      
    trustedCerts.load(                                      
            new FileInputStream("as.example.com.ca.p12"),   
            "changeit".toCharArray());                      
    var tmf = TrustManagerFactory.getInstance("PKIX");      
    tmf.init(trustedCerts);                                 
    var sslContext = SSLContext.getInstance("TLS");         
    sslContext.init(null, tmf.getTrustManagers(), null);    
    this.httpClient = HttpClient.newBuilder()
            .sslParameters(sslParams)     
            .sslContext(sslContext)       
            .build();
certificate chains before it finds a valid one. Verifying a certificate chain is complex
and error-prone with many subtle details so you should always use a mature library
to do this.
8 Recall from chapter 3 that earlier versions of TLS were called SSL, and this terminology is still widespread.
Listing 7.8
Securing the HTTPS connection
Allow only TLS 
1.2 or TLS 1.3.
Configure secure cipher 
suites for TLS 1.3 . . .
. . . and for 
TLS 1.2.
The SSLContext 
should be configured 
to trust only the CA 
used by your AS.
Initialize the HttpClient with 
the chosen TLS parameters.
248
CHAPTER 7
OAuth2 and OpenID Connect
} catch (GeneralSecurityException | IOException e) {
    throw new RuntimeException(e);
}
7.4.3
Token revocation
Just as for token introspection, there is an OAuth2 standard for revoking an access
token (https://tools.ietf.org/html/rfc7009). While this could be used to implement
the revoke method in the OAuth2TokenStore, the standard only allows the client that
was issued a token to revoke it, so the RS (the Natter API in this case) cannot revoke a
token on behalf of a client. Clients should directly call the AS to revoke a token, just as
they do to get an access token in the first place.
 Revoking a token follows the same pattern as token introspection: the client makes
a POST request to a revocation endpoint at the AS, passing in the token in the request
body, as shown in listing 7.9. The client should include its client credentials to authen-
ticate the request. Only an HTTP status code is returned, so there is no need to parse
the response body.
package com.manning.apisecurityinaction;
import java.net.*;
import java.net.http.*;
import java.net.http.HttpResponse.BodyHandlers;
import java.util.Base64;
import static java.nio.charset.StandardCharsets.UTF_8;
public class RevokeAccessToken {
    private static final URI revocationEndpoint =
            URI.create("https://as.example.com:8443/oauth2/token/revoke");
    public static void main(String...args) throws Exception {
        if (args.length != 3) {
            throw new IllegalArgumentException(
                    "RevokeAccessToken clientId clientSecret token");
        }
        var clientId = args[0];
        var clientSecret = args[1];
        var token = args[2];
        var credentials = URLEncoder.encode(clientId, UTF_8) +   
                ":" + URLEncoder.encode(clientSecret, UTF_8);    
        var authorization = "Basic " + Base64.getEncoder()       
                .encodeToString(credentials.getBytes(UTF_8));    
        var httpClient = HttpClient.newHttpClient();
Listing 7.9
Revoking an OAuth access token
Encode the
client’s credentials
for Basic
authentication.
249
Validating an access token
        var form = "token=" + URLEncoder.encode(token, UTF_8) +  
                "&token_type_hint=access_token";                 
        var httpRequest = HttpRequest.newBuilder()
                .uri(revocationEndpoint)
                .header("Content-Type", 
                    "application/x-www-form-urlencoded")
                .header("Authorization", authorization)      
                .POST(HttpRequest.BodyPublishers.ofString(form))
                .build();
        httpClient.send(httpRequest, BodyHandlers.discarding());
    }
}
7.4.4
JWT access tokens
Though token introspection solves the problem of how the API can determine if an
access token is valid and the scope associated with that token, it has a downside: the
API must make a call to the AS every time it needs to validate a token. An alternative is
to use a self-contained token format such as JWTs that were covered in chapter 6. This
allows the API to validate the access token locally without needing to make an HTTPS
call to the AS. While there is not yet a standard for JWT-based OAuth2 access tokens
(although one is being developed; see http://mng.bz/5pW4), it’s common for an AS
to support this as an option.
 To validate a JWT-based access token, the API needs to first authenticate the JWT
using a cryptographic key. In chapter 6, you used symmetric HMAC or authenticated
encryption algorithms in which the same key is used to both create and verify mes-
sages. This means that any party that can verify a JWT is also able to create one that
will be trusted by all other parties. Although this is suitable when the API and AS exist
Pop quiz
6
Which standard endpoint is used to determine if an access token is valid?
a
The access token endpoint
b
The authorization endpoint
c
The token revocation endpoint
d
The token introspection endpoint
7
Which parties are allowed to revoke an access token using the standard revoca-
tion endpoint?
a
Anyone
b
Only a resource server
c
Only the client the token was issued to
d
A resource server or the client the token was issued to
The answers are at the end of the chapter.
Create the
POST body
using URL-
encoding for
the token.
Include the client 
credentials in the 
revocation 
request.
250
CHAPTER 7
OAuth2 and OpenID Connect
within the same trust boundary, it becomes a security risk when the APIs are in differ-
ent trust boundaries. For example, if the AS is in a different datacenter to the API, the
key must now be shared between those two datacenters. If there are many APIs that
need access to the shared key, then the security risk increases even further because an
attacker that compromises any API can then create access tokens that will be accepted
by all of them.
 To avoid these problems, the AS can switch to public key cryptography using digi-
tal signatures, as shown in figure 7.8. Rather than having a single shared key, the AS
instead has a pair of keys: a private key and a public key. The AS can sign a JWT using
the private key, and then anybody with the public key can verify that the signature is
genuine. However, the public key cannot be used to create a new signature and so it’s
safe to share the public key with any API that needs to validate access tokens. For this
reason, public key cryptography is also known as asymmetric cryptography, because the
holder of a private key can perform different operations to the holder of a public key.
Given that only the AS needs to create new access tokens, using public key cryptogra-
phy for JWTs enforces the principle of least authority (POLA; see chapter 2) as it
ensures that APIs can only verify access tokens and not create new ones.
TIP
Although public key cryptography is more secure in this sense, it’s also
more complicated with more ways to fail. Digital signatures are also much
slower than HMAC and other symmetric algorithms—typically 10–100x slower
for equivalent security. 
Authorization server
API
Client
Public key
Private key
JWT
JWT
The AS signs a JWT-based access
token using its private key.
The API can verify the
JWT using the public key
it retrieves from the AS.
The private
key is never
shared.
Figure 7.8
When using JWT-based access tokens, the AS signs the JWT using a private 
key that is known only to the AS. The API can retrieve a corresponding public key from 
the AS to verify that the JWT is genuine. The public key cannot be used to create a new 
JWT, ensuring that access tokens can be issued only by the AS.
251
Validating an access token
RETRIEVING THE PUBLIC KEY
The API can be directly configured with the public key of the AS. For example, you
could create a keystore that contains the public key, which the API can read when it
first starts up. Although this will work, it has some disadvantages:
 A Java keystore can only contain certificates, not raw public keys, so the AS
would need to create a self-signed certificate purely to allow the public key to be
imported into the keystore. This adds complexity that would not otherwise be
required.
 If the AS changes its public key, which is recommended, then the keystore will
need to be manually updated to list the new public key and remove the old one.
Because some access tokens using the old key may still be in use, the keystore
may have to list both public keys until those old tokens expire. This means that
two manual updates need to be performed: one to add the new public key, and
a second update to remove the old public key when it’s no longer needed.
Although you could use X.509 certificate chains to establish trust in a key via a certifi-
cate authority, just as for HTTPS in section 7.4.2, this would require the certificate
chain to be attached to each access token JWT (using the standard x5c header
described in chapter 6). This would increase the size of the access token beyond rea-
sonable limits—a certificate chain can be several kilobytes in size. Instead, a common
solution is for the AS to publish its public key in a JSON document known as a JWK
Set (https://tools.ietf.org/html/rfc7517). An example JWK Set is shown in listing 7.10
and consists of a JSON object with a single keys attribute, whose value is an array of
JSON Web Keys (see chapter 6). The API can periodically fetch the JWK Set from an
HTTPS URI provided by the AS. The API can trust the public keys in the JWK Set
because they were retrieved over HTTPS from a trusted URI, and that HTTPS con-
nection was authenticated using the server certificate presented during the TLS
handshake.
{"keys": [         
    {
      "kty": "EC",   
      "kid": "I4x/IijvdDsUZMghwNq2gC/7pYQ=",
      "use": "sig",
      "x": "k5wSvW_6JhOuCj-9PdDWdEA4oH90RSmC2GTliiUHAhXj6rmTdE2S-
➥ _zGmMFxufuV",
      "y": "XfbR-tRoVcZMCoUrkKtuZUIyfCgAy8b0FWnPZqevwpdoTzGQBOXSN
➥ i6uItN_o4tH",
      "crv": "P-384",
      "alg": "ES384"
    },
    {
      "kty": "RSA",      
      "kid": "wU3ifIIaLOUAReRB/FG6eM1P1QM=",
      "use": "sig",
Listing 7.10
An example JWK Set
The JWK Set has a “keys” attribute, 
which is an array of JSON Web Keys.
An elliptic
curve
public key
An RSA 
public key
252
CHAPTER 7
OAuth2 and OpenID Connect
      "n": "10iGQ5l5IdqBP1l5wb5BDBZpSyLs4y_Um-kGv_se0BkRkwMZavGD_Nqjq8x3-
➥ fKNI45nU7E7COAh8gjn6LCXfug57EQfi0gOgKhOhVcLmKqIEXPmqeagvMndsXWIy6k8WP
➥ PwBzSkN5PDLKBXKG_X1BwVvOE9276nrx6lJq3CgNbmiEihovNt_6g5pCxiSarIk2uaG3T
➥ 3Ve6hUJrM0W35QmqrNM9rL3laPgXtCuz4sJJN3rGnQq_25YbUawW9L1MTVbqKxWiyN5Wb
➥ XoWUg8to1DhoQnXzDymIMhFa45NTLhxtdH9CDprXWXWBaWzo8mIFes5yI4AJW4ZSg1PPO
➥ 2UJSQ",
      "e": "AQAB",
      "alg": "RS256"
    }
]}
Many JWT libraries have built-in support for retrieving keys from a JWK Set over
HTTPS, including periodically refreshing them. For example, the Nimbus JWT library
that you used in chapter 6 supports retrieving keys from a JWK Set URI using the
RemoteJWKSet class:
var jwkSetUri = URI.create("https://as.example.com:8443/jwks_uri");
var jwkSet = new RemoteJWKSet(jwkSetUri);
Listing 7.11 shows the configuration of a new SignedJwtAccessTokenStore that will
validate an access token as a signed JWT. The constructor takes a URI for the end-
point on the AS to retrieve the JWK Set from and constructs a RemoteJWKSet based on
this. It also takes in the expected issuer and audience values of the JWT, and the JWS
signature algorithm that will be used. As you’ll recall from chapter 6, there are attacks
on JWT verification if the wrong algorithm is used, so you should always strictly vali-
date that the algorithm header has an expected value. Open the src/main/java/com/
manning/apisecurityinaction/token folder and create a new file SignedJwtAccess-
TokenStore.java with the contents of listing 7.11. You’ll fill in the details of the read
method shortly.
TIP
If the AS supports discovery (see section 7.2.3), then it may advertise its
JWK Set URI as the jwks_uri field of the discovery document.
package com.manning.apisecurityinaction.token;
import com.nimbusds.jose.*;
import com.nimbusds.jose.jwk.source.*;
import com.nimbusds.jose.proc.*;
import com.nimbusds.jwt.proc.DefaultJWTProcessor;
import spark.Request;
import java.net.*;
import java.text.ParseException;
import java.util.Optional;
public class SignedJwtAccessTokenStore implements SecureTokenStore {
    private final String expectedIssuer;
    private final String expectedAudience;
Listing 7.11
The SignedJwtAccessTokenStore
253
Validating an access token
    private final JWSAlgorithm signatureAlgorithm;
    private final JWKSource jwkSource;
    public SignedJwtAccessTokenStore(String expectedIssuer,
                                     String expectedAudience,
                                     JWSAlgorithm signatureAlgorithm,
                                     URI jwkSetUri)
            throws MalformedURLException {
        this.expectedIssuer = expectedIssuer;          
        this.expectedAudience = expectedAudience;      
        this.signatureAlgorithm = signatureAlgorithm;  
        this.jwkSource = new RemoteJWKSet<>(jwkSetUri.toURL());    
    }
    @Override
    public String create(Request request, Token token) {
        throw new UnsupportedOperationException();
    }
    @Override
    public void revoke(Request request, String tokenId) {
        throw new UnsupportedOperationException();
    }
    @Override
    public Optional read(Request request, String tokenId) {
        // See listing 7.12
    }
}
A JWT access token can be validated by configuring the processor class to use the
RemoteJWKSet as the source for verification keys (ES256 is an example of a JWS signa-
ture algorithm):
    var verifier = new DefaultJWTProcessor<>();
    var keySelector = new JWSVerificationKeySelector<>(
            JWSAlgorithm.ES256, jwkSet);
    verifier.setJWSKeySelector(keySelector);
    var claims = verifier.process(tokenId, null);
After verifying the signature and the expiry time of the JWT, the processor returns the
JWT Claims Set. You can then verify that the other claims are correct. You should
check that the JWT was issued by the AS by validating the iss claim, and that the
access token is meant for this API by ensuring that an identifier for the API appears in
the audience (aud) claim (listing 7.12). 
 In the normal OAuth2 flow, the AS is not informed by the client which APIs it
intends to use the access token for,9 and so the audience claim can vary from one AS to
another. Consult the documentation for your AS software to configure the intended
9 As you might expect by now, there is a proposal to allow the client to indicate the resource servers it intends
to access: http://mng.bz/6ANG
Configure the
expected issuer,
audience, and
JWS algorithm.
Construct a 
RemoteJWKSet 
to retrieve 
keys from the 
JWK Set URI.
254
CHAPTER 7
OAuth2 and OpenID Connect
audience. Another area of disagreement between AS software is in how the scope of
the token is communicated. Some AS software produces a string scope claim, whereas
others produce a JSON array of strings. Some others may use a different field entirely,
such as scp or scopes. Listing 7.12 shows how to handle a scope claim that may either
be a string or an array of strings. Open SignedJwtAccessTokenStore.java in your editor
again and update the read method based on the listing.
@Override
public Optional read(Request request, String tokenId) {
    try {
        var verifier = new DefaultJWTProcessor<>();
        var keySelector = new JWSVerificationKeySelector<>(
                signatureAlgorithm, jwkSource);
        verifier.setJWSKeySelector(keySelector);
        var claims = verifier.process(tokenId, null);   
        if (!issuer.equals(claims.getIssuer())) {         
            return Optional.empty();                      
        }
        if (!claims.getAudience().contains(audience)) {   
            return Optional.empty();                      
        }
        var expiry = claims.getExpirationTime().toInstant();  