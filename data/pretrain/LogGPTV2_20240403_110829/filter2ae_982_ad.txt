            victim = victim->bk_nextsize;
            //反向遍历链表，从最小的开始找，找到第一个不小于nb的chunk
            while (((unsigned long)(size = chunksize(victim)) bk_nextsize;
            /* Avoid removing the first entry for a size so that the skip
                     list does not have to be rerouted.  */
            //如果victim不是链表的最后一个，并且victim与之普通链上的下一个chunk大小相同
            //就使用下一个chunk，因为该chunk不在nextsize链上，就不用改动nextsize指针
            //注：前面找到的第一个不小于nb的chunk是在nextsize链上找到的，所以该chunk普通链上
            //的下一个chunk是有可能与之大小相同的，正如前面所说，如果插入的时候大小相同就插在后面
            if (victim != last(bin) && chunksize_nomask(victim) == chunksize_nomask(victim->fd))
              victim = victim->fd;
            remainder_size = size - nb;//剩余部分的大小
            unlink(av, victim, bck, fwd);//将victim从链表中取出
            /* Exhaust */
            //如果剩余部分不够一个chunk
            if (remainder_size fd;
              if (__glibc_unlikely(fwd->bk != bck))
                malloc_printerr("malloc(): corrupted unsorted chunks");
              //将剩余部分插到unsorted bin的第一个
              remainder->bk = bck;
              remainder->fd = fwd;
              bck->fd = remainder;
              fwd->bk = remainder;
              //如果属于large bin的范畴就将nextsize指针置空
              if (!in_smallbin_range(remainder_size))
              {
                remainder->fd_nextsize = NULL;
                remainder->bk_nextsize = NULL;
              }
              //设置标识位
              set_head(victim, nb | PREV_INUSE |
                                   (av != &main_arena ? NON_MAIN_ARENA : 0));
              set_head(remainder, remainder_size | PREV_INUSE);
              set_foot(remainder, remainder_size);
            }
            //检查并返回victim
            check_malloced_chunk(av, victim, nb);
            void *p = chunk2mem(victim);
            alloc_perturb(p, bytes);
            return p;
          }
        }
### block
一个block就是连续的32个bin，每个block有一个map来标记每个bin里是否有空闲的chunk，通过这种机制就可以批量地查看bin的状态，避免了挨个遍历，提高了检索速度。
    /*
             Search for a chunk by scanning bins, starting with next largest
             bin. This search is strictly by best-fit; i.e., the smallest
             (with ties going to approximately the least recently used) chunk
             that fits is selected.
             The bitmap avoids needing to check that most blocks are nonempty.
             The particular case of skipping all bins during warm-up phases
             when no chunks have been returned yet is faster than it might look.
           */
        ++idx;//下一个large bin
        bin = bin_at(av, idx);
        // #define idx2block(i) ((i) >> BINMAPSHIFT) 
        //BINMAPSHIFT = 5
        //binmap用一个整数的每一个位来标识每个bin中是否有空闲的chunk
        //因为一个int是32位，所以一个map能标识32个bin的状态，所以idx右移5位就是map的索引
        //如100010表示第2和第6个bin中有空闲的chunk
        block = idx2block(idx);
        map = av->binmap[block];
        // #define idx2bit(i) ((1U map，即在当前block中大于等于(idx%32)位置上的bin都不可用
          //另外按照bin的排列规则，索引越大的bin，chunk越大
          //所以bit>map表示当前block中没有可用的bin
          if (bit > map || bit == 0)
          {
            //如果当前block不可用就找下一个block，直到binmap不等于0，即找到的block中有可用bin
            do
            {
              if (++block >= BINMAPSIZE) /* out of bins */
                goto use_top;//如果超出了bin的范围，就使用top chunk
            } while ((map = av->binmap[block]) == 0);
            //block左移5位即idx2block的逆过程，找到当前block的第一个bin
            bin = bin_at(av, (block binmap[block] = map &= ~bit; /* Write through */
            bin = next_bin(bin);
            bit = (unsigned long)(nb));
            remainder_size = size - nb;
            /* unlink */
            unlink(av, victim, bck, fwd);
            /* Exhaust */
            if (remainder_size fd;
              if (__glibc_unlikely(fwd->bk != bck))
                malloc_printerr("malloc(): corrupted unsorted chunks 2");
              remainder->bk = bck;
              remainder->fd = fwd;
              bck->fd = remainder;
              fwd->bk = remainder;
              /* advertise as last remainder */
              if (in_smallbin_range(nb))
                av->last_remainder = remainder;
              if (!in_smallbin_range(remainder_size))
              {
                remainder->fd_nextsize = NULL;
                remainder->bk_nextsize = NULL;
              }
              set_head(victim, nb | PREV_INUSE |
                                   (av != &main_arena ? NON_MAIN_ARENA : 0));
              set_head(remainder, remainder_size | PREV_INUSE);
              set_foot(remainder, remainder_size);
            }
            check_malloced_chunk(av, victim, nb);
            void *p = chunk2mem(victim);
            alloc_perturb(p, bytes);
            return p;
          }
        }
### top chunk
top chunk是一个单独的chunk，位于一个arena的最顶部。当所有的bin都无法满足需求时就从top
chunk中拆分chunk来满足需求，如果top chunk也无法满足需求就调用`sysmalloc`来扩展堆内存。
    use_top:
        /*
             If large enough, split off the chunk bordering the end of memory
             (held in av->top). Note that this is in accord with the best-fit
             search rule.  In effect, av->top is treated as larger (and thus
             less well fitting) than any other available chunk since it can
             be extended to be as large as necessary (up to system
             limitations).
             We require that av->top always exists (i.e., has size >=
             MINSIZE) after initialization, so if it would otherwise be
             exhausted by current request, it is replenished. (The main
             reason for ensuring it exists is that we may need MINSIZE space
             to put in fenceposts in sysmalloc.)
           */
        victim = av->top;
        size = chunksize(victim);
        //如果top chunk除去nb之后还能独立成为一个chunk
        //就从top chunk中拆分出nb大小的chunk
        if ((unsigned long)(size) >= (unsigned long)(nb + MINSIZE))
        {
          remainder_size = size - nb;
          remainder = chunk_at_offset(victim, nb);
          av->top = remainder;//剩余部分继续成为top chunk
          //设置chunk头部
          set_head(victim, nb | PREV_INUSE |
                               (av != &main_arena ? NON_MAIN_ARENA : 0));
          set_head(remainder, remainder_size | PREV_INUSE);
          //返回victim
          check_malloced_chunk(av, victim, nb);
          void *p = chunk2mem(victim);
          alloc_perturb(p, bytes);
          return p;
        }
        /* When we are using atomic ops to free fast chunks we can get
             here for all block sizes.  */
        //如果top chunk不够，并且有fast bin就合并fast bin
        else if (atomic_load_relaxed(&av->have_fastchunks))
        {
          malloc_consolidate(av);//合并fast bin到top chunk
          /* restore original bin index */
          //计算nb所属的bin
          if (in_smallbin_range(nb))
            idx = smallbin_index(nb);
          else
            idx = largebin_index(nb);
        }
        /*
             Otherwise, relay to handle system-dependent cases
           */
        //否则说明堆不够，调用sysmalloc向操作系统请求内存
        else
        {
          void *p = sysmalloc(nb, av);
          if (p != NULL)
            alloc_perturb(p, bytes);
          return p;
        }
      }//大循环
    }
# 总结
首先判断tcache中是否有可用的chunk，如果有直接返回，否则进入`_int_malloc`中做进一步分配。在`_int_malloc`中先判断arena是否可用，如果不可用就调用`sysmalloc`向操作系统申请内存并返回，如果arena可用就开始在各个bin中寻找chunk。首先是fast
bin，如果fast bin中有需求大小的chunk就返回该chunk，并将该fast
bin链中（即相同大小）的其余chunk放入tcache中，直到tcache被填满，否则就开始在small bin中寻找chunk。在small
bin中流程与fast bin相同，如果在small bin中找不到chunk就需要进入一个直到找到chunk的大循环。在大循环中，先遍历unsorted
bin，对unsorted chunk进行判断，如果就是所需的大小则优先放入tcache中，tcache满了才返回；如果不是所需大小则放入small
bin或large
bin中。遍历结束后判断在遍历的过程中是否有chunk被放入tcache，如果有则从tcache找chunk并返回，如果没有就到large
bin中找。在对应large bin中如果能找到最合适的chunk就将该chunk拆分后返回，如果不能则利用binmap批量遍历更大的large
bin，如果有可用的chunk就拆分并返回，如果没有就只能用top chunk了。但是如果top chunk也不够，就先判断是否有fast
bin，如果有则先合并fast bin，并重新开始大循环，如果没有fast bin则调用sysmalloc向操作系统请求支援。流程图如下：