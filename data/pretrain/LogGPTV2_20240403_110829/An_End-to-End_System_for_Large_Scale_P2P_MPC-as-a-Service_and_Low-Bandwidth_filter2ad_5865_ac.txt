### Computation and Circuit Generation in MATRIX

MATRIX is designed to handle a variety of computational tasks, including the generation of circuits based on specific parameters. These parameters can include a circuit description or code that needs to be compiled. Notably, MATRIX can receive a script for automatically generating circuits based on the number of participating parties. This feature is crucial in real-world systems like MPSaaS, where the circuit must be generated for the exact number of parties who are online when the experiment starts. MATRIX automates this process, ensuring that the correct-sized circuits are provided for each experiment.

### Experiment Configuration in MATRIX

MATRIX operates using an experiment configuration file that defines a series of experiments (executions). For each experiment, the configuration specifies:
- The number of repetitions.
- The number of participating parties.
- The location of the parties (e.g., cloud regions).
- The machine type for all parties.
- Protocol parameters, such as the circuit to be executed if the protocol is circuit-based.

When spot (or low-priority) instances are desired, the configuration also includes the maximum price the user is willing to pay for these instances in the cloud bidding scheme. It's worth noting that in AWS, MATRIX first checks the latest winning price for the desired instances and bids that price if it is lower, often resulting in significant cost savings.

### Cloud Vendor Abstraction and Portability

The binding of MATRIX to a specific cloud vendor is abstracted into a small layer of the code, allowing for easy deployment to any vendor that provides a complete automation API. Initially deployed in AWS, MATRIX was ported to Azure (using Azure CLI 2.0) in just two person-days, demonstrating its flexibility and ease of integration with different cloud platforms.

### Monitoring, Result Collection, and Fault Handling

MATRIX monitors the execution of the MPC program across all hosts, detecting exit signals that indicate cheat detection, protocol breaches, or machine failures. The system collects MPC logs during protocol execution, which typically include micro-benchmarks of different protocol phases. These logs can measure various aspects, such as peer-to-peer communication setup, input sharing, and online computation times. The granularity of the logs and measurements is determined by the protocol and can include running time and actual bandwidth usage. Additionally, MATRIX automatically measures the memory usage of each machine.

All results are recorded in an ElasticSearch database, enabling users to review performance dashboards and compare the performance of different protocols, running on different machines in different regions, using tools like Kibana. MATRIX also generates spreadsheet reports for post-execution analysis.

### MPSaaS Administration Component

The MPSaaS Administrator component is used to create, manage, and execute MPC protocols. The administrator initiates the execution and invites participants. In the PrivatePoll example, the administrator could be an HR consulting company or a researcher conducting a survey. The administrator can purchase these services from an MPC-CSP (service provider) or act as a service provider using the open-source platform. Importantly, the administrator has no access to private inputs, as each party runs the MPC protocol locally, ensuring privacy and security.

The administrator component includes all necessary capabilities for managing MPC executions and is connected to the administration capabilities of the MATRIX system. Figures 4 and 5 show the administrator pages for creating new executions, viewing the status of active ones, and creating or editing polls. The result type governs the circuit chosen to evaluate the functionality, and the administrator can view the results of completed polls.

### MPSaaS End-User Component

The end-user component is used for running the MPC protocol. While some MPC executions have been demonstrated on mobile platforms, they are limited and do not support a wide variety of MPC protocols. Enabling mobile, IoT, and in-browser general MPC execution is essential for achieving true peer-to-peer MPC. We reviewed available open-source implementations of MPC and found that none work on our platforms. Therefore, we searched for general techniques to help port existing MPC code to mobile devices and browsers, and we report on these techniques and the challenges encountered in Appendix A.

### PrivatePoll End User Workflow

In this section, we describe the user experience in participating in an MPSaaS secure multiparty computation via their mobile phone. Users are notified of existing polls via standard means and can log in using an existing Google or Facebook account. They can view available and completed polls, and join active polls. Figure 7 illustrates the user login, poll status, and poll join pages.

Once a user selects to join an active poll, they are prompted to choose their participation mode: online (running a mobile or browser instance) or offline (using a cloud instance). If the user selects online mode, they will receive a notification to log in and input their private value before the poll. If they select offline mode, they can choose to use a hosted instance or their own Docker instance. Using a personal instance is preferable for privacy, but a hosted instance is also available.

In offline mode, the user is immediately redirected to the registered instance to enter their input. In online mode, the user receives a reminder just before the execution begins. In all cases, the user receives the computation result through their mobile app, providing additional motivation for participation.

### The HyperMPC Protocol

#### Preliminaries

We consider a set \( P \) of \( n \) parties, \( P = \{P_1, \ldots, P_n\} \), connected by a complete network of secure (private and authentic) channels. The computation is over any finite field \( F \) with \( |F| > 2n \). Each party \( P_i \in P \) is assigned a unique, non-zero element \( \alpha_i \in F \setminus \{0\} \).

HyperMPC is perfectly secure, eliminating the need to work in a large field. Boolean circuits can be embedded into \( GF[2^k] \) for the smallest \( k \) such that \( 2^k > 2n \). The function to be computed is specified as an arithmetic circuit over \( F \), with input, addition, multiplication, random, and output gates. The number of gates of each type is denoted by \( c_I, c_A, c_M, c_R, \) and \( c_O \), respectively.

#### Hyper-Invertible Matrices

A hyper-invertible \( r \)-by-\( c \) matrix \( M \) can be constructed as:
\[ M = \{\lambda_{i,j}\}_{i=1,\ldots,r}^{j=1,\ldots,c} \]
where
\[ \lambda_{i,j} = \prod_{k=1, k \neq j}^c \frac{\beta_i - \alpha_k}{\alpha_j - \alpha_k}, \]
and \( \alpha_1, \ldots, \alpha_c, \beta_1, \ldots, \beta_r \) are fixed distinct elements in \( F \) (with \( |F| \geq c + r \)).

The mappings defined by hyper-invertible matrices have a symmetry property: any subset of \( n \) input/output values can be expressed as a linear function of the remaining \( n \) input/output values.

**Lemma 3.1 ([5])**: Let \( M \) be a hyper-invertible \( n \)-by-\( n \) matrix and \( (y_1, \ldots, y_n)^T = M \cdot (x_1, \ldots, x_n)^T \). Then for all index sets \( A, B \subseteq \{1, \ldots, n\} \) with \( |A| + |B| = n \), there exists an invertible linear function \( f : F^n \to F^n \), mapping the values \( \{x_i\}_{i \in A}, \{y_i\}_{i \in B} \) onto the values \( \{x_i\}_{i \notin A}, \{y_i\}_{i \notin B} \).

For more details and proofs, refer to [5, Section 3].

**Intuitive Explanation**: The power of a hyper-invertible matrix lies in the linear mapping it induces. A matrix \( M \) with \( r \) rows and \( c \) columns induces a linear mapping \( f_M \), which takes \( c \) input values \( x_1, \ldots, x_c \) and computes \( r \) output values \( y_1, \ldots, y_r \) such that \( (y_1, \ldots, y_r)^T = M \cdot (x_1, \ldots, x_c)^T \).