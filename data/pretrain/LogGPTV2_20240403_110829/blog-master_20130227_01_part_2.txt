CREATE FUNCTION hll_sparseon(hll)  
     RETURNS integer  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C STRICT IMMUTABLE;  
-- Set output version.  
--  
CREATE FUNCTION hll_set_output_version(integer)  
     RETURNS integer  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C STRICT IMMUTABLE;  
-- Set sparse to full compressed threshold to fixed value.  
--  
CREATE FUNCTION hll_set_max_sparse(integer)  
     RETURNS integer  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C STRICT IMMUTABLE;  
-- Change the default type modifier, empty and add aggregate defaults.  
CREATE FUNCTION hll_set_defaults(IN i_log2m integer,  
                                 IN i_regwidth integer,  
                                 IN i_expthresh bigint,  
                                 IN i_sparseon integer,  
                                 OUT o_log2m integer,  
                                 OUT o_regwidth integer,  
                                 OUT o_expthresh bigint,  
                                 OUT o_sparseon integer)  
     AS 'MODULE_PATHNAME'  
     LANGUAGE C STRICT IMMUTABLE;  
-- 输出的是老的精度和阈值 :   
                values[j] = palloc(32);  
                snprintf(values[j++], 32, "%d", old_log2m);  
                values[j] = palloc(32);  
                snprintf(values[j++], 32, "%d", old_regwidth);  
                values[j] = palloc(32);  
                snprintf(values[j++], 32, INT64_FORMAT, old_expthresh);  
                values[j] = palloc(32);  
                snprintf(values[j++], 32, "%d", old_sparseon);  
```  
2\.9 DEBUG函数 :   
```  
public | hll_print               | cstring          | hll  
```  
例如 :   
```  
digoal=> select hll_print(hll_add(hll_add_agg(hll_hash_bigint(t)),hll_hash_bigint(1))) from generate_series(3,10) g(t);  
                                 hll_print                                   
---------------------------------------------------------------------------  
 EXPLICIT, 9 elements, nregs=4096, nbits=5, expthresh=-1(320), sparseon=1:+  
 0: -5469109305088493887                                                  +  
 1:    19144387141682250                                                  +  
 2:   489182038263080531                                                  +  
 3:  1140754268591781659                                                  +  
 4:  1310323436750511730                                                  +  
 5:  1960224177162737638                                                  +  
 6:  3522142095546486706                                                  +  
 7:  4145513480871534457                                                  +  
 8:  6574508035858270988   
(1 row)  
```  
因为未达到阈值, 所以使用explicit存储. 返回的唯一值将会是精确值.  
3\. 几个操作符 :   
```  
-- ----------------------------------------------------------------  
-- Operators  
-- ----------------------------------------------------------------  
-- 比较两个hll类型值是否相等  
CREATE OPERATOR = (  
        LEFTARG = hll, RIGHTARG = hll, PROCEDURE = hll_eq,  
        COMMUTATOR = '=', NEGATOR = '<>',  
        RESTRICT = eqsel, JOIN = eqjoinsel,  
        MERGES  
);  
CREATE OPERATOR <> (  
        LEFTARG = hll, RIGHTARG = hll, PROCEDURE = hll_ne,  
        COMMUTATOR = '<>', NEGATOR = '=',  
        RESTRICT = neqsel, JOIN = neqjoinsel  
);  
-- 合并两个hll类型值, 去重复.  
CREATE OPERATOR || (  
       LEFTARG = hll, RIGHTARG = hll, PROCEDURE = hll_union  
);  
-- 合并hll_hashval和hll, 去重复.  
CREATE OPERATOR || (  
       LEFTARG = hll, RIGHTARG = hll_hashval, PROCEDURE = hll_add  
);  
-- 同上  
CREATE OPERATOR || (  
       LEFTARG = hll_hashval, RIGHTARG = hll, PROCEDURE = hll_add_rev  
);  
-- 计算hll类型值中包含的唯一hll_hashval值.  
CREATE OPERATOR # (  
       RIGHTARG = hll, PROCEDURE = hll_cardinality  
);  
```  
## 三、精度调整 :   
在hll.c中 :   
```  
// Defaults if type modifier values are not specified.  
//  
#define DEFAULT_LOG2M           15        
#define DEFAULT_REGWIDTH        5  
#define DEFAULT_EXPTHRESH       -1  
#define DEFAULT_SPARSEON        1  
static int32 g_default_log2m = DEFAULT_LOG2M;  
static int32 g_default_regwidth = DEFAULT_REGWIDTH;  
static int64 g_default_expthresh = DEFAULT_EXPTHRESH;  
static int32 g_default_sparseon = DEFAULT_SPARSEON;  
```  
也可以在数据库中调整 :   
```  
-- 返回为老的值.  
digoal=> select * from hll_set_defaults(15,5,-1,1);  
 o_log2m | o_regwidth | o_expthresh | o_sparseon   
---------+------------+-------------+------------  
      12 |          5 |          -1 |          1  
(1 row)  
Time: 0.330 ms  
```  
## 四、用法注意  
1\. 更新hll时小心锁, 最好是由程序调度聚合. 不要实时更新.  
2\. 浮点型转化成hll_hashval时, 不建议直接转化, 建议将浮点型数值固化后转化.  
http://stackoverflow.com/questions/7403210/hashing-floating-point-values  
## 参考  
1\. http://www.postgresql.org/docs/9.2/static/sql-select.html  
2\. http://www.postgresql.org/docs/9.2/static/tutorial-window.html  
3\. http://www.postgresql.org/docs/9.2/static/sql-expressions.html#SYNTAX-WINDOW-FUNCTIONS  
4\. http://www.postgresql.org/docs/9.2/static/queries-table-expressions.html#QUERIES-WINDOW  
5\. http://www.postgresql.org/docs/9.2/static/functions-window.html  
6\. http://blog.163.com/digoal@126/blog/static/16387704020131264480325/  
7\. REFERENCE.markdown  
8\. STORAGE.markdown  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")