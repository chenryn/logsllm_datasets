These conditions can be tested by running the greedy al-
gorithm for all non-monitors, each taking time O(|Pv|2σ) =
O(|P |2σ), and the overall test has a complexity of O(|P |2σ2)
(or O(µ4σ2) if there is a measurement path between each
pair of monitors). However, we point out that it is un-
likely that one can obtain stronger conditions based on The-
orem 15 that are polynomial-time veriﬁable, as the greedy al-
gorithm is known to give the best approximation for MSC(v).
4.4 Special Case: 1-identiﬁability
In practice, the most common failure event consists of the
failure of a single node. Thus, a question of particular in-
terest is whether G is 1-identiﬁable under a given placement
of monitors and a given probing mechanism. Although our
202previous results (Corollaries 8 and 12, Theorem 15) provide
an answer to the above question if the suﬃcient condition
is satisﬁed or the necessary condition is violated for k = 1,
the answer remains unknown if G satisﬁes the necessary con-
dition but violates the suﬃcient condition. To address this
case, we develop explicit methods to test the 1-identiﬁability.
4.4.1 Conditions for 1-identiﬁability
We start with a generic necessary and suﬃcient condition
that applies to all probing mechanisms. Recall that Pv de-
notes the set of measurement paths traversing a non-monitor
v. By Deﬁnition 1, we have the following claim:
Claim 16. G is 1-identiﬁable if and only if:
(1) Pv 6= ∅ for any v ∈ N , and
(2) Pv 6= Pw for any v, w ∈ N and v 6= w.
In Claim 16, the ﬁrst condition guarantees that any non-
empty failure set is distinguishable from the empty set (i.e.,
no failure), and the second condition guarantees that the ob-
served path states can uniquely localize the failed node. An
eﬃcient test of these conditions, however, requires diﬀerent
strategies under diﬀerent probing mechanisms.
4.4.2 Test under CAP
Under CAP, we know from Corollary 8 that for G to be
1-identiﬁable, the auxiliary graph G∗ must be connected.
Below, we will show that this condition is also suﬃcient.
Lemma 17. Network G is 1-identiﬁable under CAP if and
only if G∗ is connected, i.e., G has at least one monitor.
Proof. It suﬃces to show that G∗ being connected is suf-
ﬁcient for the 1-identiﬁability of G, which we prove by con-
struction. First, it is easy to see that G∗ is connected if and
only if G has at least one monitor, denoted by m (recall that
G is assumed to be connected). We build a spanning tree
of G rooted at m, and sequentially probe each non-monitor
in a breadth-ﬁrst or depth-ﬁrst order until (i) ﬁnding a ﬁrst
failure or (ii) completing probing without any failure. As
each non-monitor is only probed after all its predecessors in
the tree have been probed, we know in case (i) that the last
probed non-monitor has failed, and in case (ii) that no node
has failed. Therefore, G is 1-identiﬁable.
Testing for 1-identiﬁability under CAP is therefore re-
duced to determining if the network has a monitor.
4.4.3 Test under CSP
Under CSP, we derive conditions that are equivalent to
those in Section 4.4.1 but easier to test.
Condition (1) in Claim 16 requires that every non-monitor
reside on a monitor-monitor simple path. While an exhaus-
tive search for such a path will incur exponential complex-
ity, we can test for its existence eﬃciently using the follow-
ing observation. The idea is to construct an extended graph
G′
:= G + {m′} + L({m′}, M ), i.e., by adding a virtual
monitor m′ and connecting it to all the monitors; see an
illustration in Fig. 3. We claim that a non-monitor v is on
a monitor-monitor simple path if and only if the size of the
minimum vertex cut between v and m′ in G′ is at least two.
Indeed, by Menger’s Theorem [10], the size of the min-
imum vertex cut between v and m′ (minimum v-m′ vertex
cut) equals the maximum number of vertex-independent 5
5Two paths are vertex-independent if they have no common
vertex except for the endpoints.
simple paths between them. Therefore, a minimum v-m′
vertex cut of size at least two implies the existence of two
vertex-independent simple paths between v and m′, illus-
trated as paths vm2m′ and vmim′ in Fig. 3. Truncating
these two paths (vm2m′ and vmim′) at the ﬁrst monitors
(along the way from v to m′) and concatenating the remain-
ing two path segments gives a monitor-to-monitor simple
path traversing v, i.e., m2vmi in Fig. 3. On the other hand,
if ∃ a monitor-to-monitor simple path traversing v, then it
can be split into two simple paths connecting v to two dis-
tinct monitors, which implies a minimum v-m′ cut of at least
two vertices in the extended graph G′ as each of these two
distinct monitors connects to m′ by a virtual link.
Condition (2) in Claim 16 is violated if and only if there
exist two non-monitors v 6= w such that all monitor-to-
monitor simple paths traversing v must traverse w (i.e.,
Pv ⊆ Pw) and vice versa. Since Pv ⊆ Pw means that there is
no monitor-to-monitor simple path traversing v in G − {w},
by the above argument, we see that Pv ⊆ Pw if and only if
the size of the minimum vertex cut between v and m′ in a
w := G − {w} + {m′} + L({m′}, M ) is smaller
new graph G′
than two. Therefore, condition (2) in Claim 16 is satisﬁed
if and only if for every two distinct non-monitors v and w,
either the minimum v-m′ cut in G′
w or the minimum w-m′
cut in G′
v has a size of at least two.
In summary, the necessary and suﬃcient condition for 1-
identiﬁability under CSP is (Cv,w denotes the minimum ver-
tex cut between v and w):
i) |Cv,m′ | ≥ 2 in G′ for each v ∈ N , and
ii) |Cv,m′ | ≥ 2 in G′
w or |Cw,m′ | ≥ 2 in G′
v for all v, w ∈ N
and v 6= w.
Since for a graph G of |V | nodes and |L| links, |Cv,w| ≥ 2
can be tested in O(|V | + |L|) time6, the overall test takes
O(σ2(|V | + |L|)) = O(σ2(µ + σ)2) time.
4.4.4 Test under UP
Under UP, the total number of measurement paths |P | is
reduced to O(µ2) (from exponentially many as in the case of
CAP/CSP) since the measurable routes are predetermined.
This reduction makes it feasible to directly test the generic
conditions (1–2) in Claim 16 by testing condition (1) for
each non-monitor and condition (2) for each pair of non-
monitors. The overall complexity of this test is O(σ2µ2),
dominated by the testing of condition (2) in Claim 16.
5. CHARACTERIZATION OF MAXIMUM
IDENTIFIABILITY
Although it is challenging to determine the exact value
of the maximum identiﬁability Ω(G) without a (polynomial-
time veriﬁable) necessary and suﬃcient condition for testing
k-identiﬁability (it remains open as to whether it is NP-
hard to determine the value of Ω(G)), we will show that the
conditions derived in Section 4 have a nice structure that
allows us to provide tight upper and lower bounds on Ω(G).
5.1 Maximum Identiﬁability under CAP
Observing that both the suﬃcient and the necessary con-
ditions in Corollary 8 are imposed on the same property, i.e.,
vertex-connectivity of the auxiliary graph G∗, we obtain a
6For example, we can compute the biconnected component
decomposition [23] and test if v and w belong to the same
biconnected component.
203m’
m2 mi
m1
μm
G
v
Figure 3: Extended graph G′.
tight characterization of the maximum identiﬁability under
CAP as follows. Here δ(G) is the vertex connectivity of G
deﬁned in Deﬁnition 6.
Theorem 18
(Maximum Identifiability under CAP).
If δ(G∗) ≤ σ − 1, the maximum identiﬁability of G under
CAP, ΩCAP(G), is bounded by δ(G∗) − 1 ≤ ΩCAP(G) ≤ δ(G∗).
Proof. Given δ(G∗), we know that G∗ is δ(G∗)-vertex-
connected but not (δ(G∗) + 1)-vertex-connected. By Corol-
lary 8, this means that G is (δ(G∗) − 1)-identiﬁable but not
(δ(G∗) + 1)-identiﬁable, which yields the above bounds on
the maximum identiﬁability. Note that applying Corollary 8
requires δ(G∗) ≤ σ − 1.
Remark:
In the special case of δ(G∗) = σ (note that
δ(G∗) ≤ σ by deﬁnition), G∗ must be a clique, which means
that all non-monitors must be neighbors of monitors. By
Proposition 9, this implies that ΩCAP(G) = σ.
Evaluation algorithm: Using the algorithm for deter-
mining network vertex connectivity in [21], we can compute
δ(G∗) and evaluate ΩCAP(G) by the bounds in Theorem 18
in O(σ3.75) time. The special case of ΩCAP(G) = σ can
be checked separately in O(σ) time using the condition in
Proposition 9.
5.2 Maximum Identiﬁability under CSP
As in the case of CAP, we can leverage the analogy be-
tween the suﬃcient and the necessary conditions in Corol-
lary 12 to bound the maximum identiﬁability under CSP
from both sides. Speciﬁcally, let δmin := minm:m∈M δ(Gm)
be the minimum vertex-connectivity for auxiliary graphs
Gm. Then the maximum identiﬁability is bounded as follows.
Theorem 19
(Maximum Identifiability under CSP).
If min(δmin, δ(G∗) − 1) ≤ σ − 2, the maximum identiﬁabil-
ity of G under CSP, ΩCSP(G), is bounded by min(δmin − 1,
δ(G∗) − 2) ≤ ΩCSP(G) ≤ min(δmin, δ(G∗) − 1).
In particular, if δ(G∗) = 1 (i.e., there is a cut-vertex in
G∗), then ΩCSP(G) = 0, i.e., even single-node failures cannot
always be localized.
The only cases when min(δmin, δ(G∗) − 1) ≤ σ − 2 is vi-
olated are: (i) δmin = δ(G∗) = σ, or (ii) δmin = σ − 1 and
δ(G∗) = σ. In case (i), Gm is a clique for all m ∈ M , i.e.,
each non-monitor still has a monitor as a neighbor after re-
moving m; by Proposition 13, this implies that ΩCSP(G) =
σ.
In case (ii), Corollary 12 (a) can still be applied to
show that ΩCSP(G) ≥ σ − 2, and one can verify that the
condition in Proposition 13 is violated, which implies that
ΩCSP(G) ≤ σ − 1. In fact, we can leverage Proposition 14 to
uniquely determine ΩCSP(G) in this case. If condition (ii) in
Proposition 14 is satisﬁed, then ΩCSP(G) = σ − 1; otherwise,
ΩCSP(G) = σ − 2.
Evaluation algorithm: Evaluating ΩCSP(G) by Theo-
rem 19 involves computing the vertex-connectivities of the
auxiliary graphs G∗ and Gm (∀m ∈ M ) using the algorithm
for determining network vertex connectivity in [21], which
altogether takes O(µσ3.75) time.
5.3 Maximum Identiﬁability under UP
Let ∆ := minv∈N MSC(v) be the minimum set cover over
all non-monitors. The conditions in Theorem 15 imply the
following bounds on the maximum identiﬁability under UP.
Theorem 20
(Maximum Identifiability under UP).
The maximum identiﬁability of G under UP, ΩUP(G), with
measurement paths P is bounded by ∆ − 1 ≤ ΩUP(G) ≤ ∆.
Proof. Since MSC(v) > ∆ − 1 for all v ∈ N , G is (∆ −
1)-identiﬁable by Theorem 15 (a). Meanwhile, since there
exists a node v ∈ N with MSC(v) = ∆, G is not (∆ + 1)-
identiﬁable by Theorem 15 (b). Together, they imply the
bounds on ΩUP(G).
Remark: Recall that ∆ ≤ σ by deﬁnition. In the special
case of ∆ = σ, we know that all non-monitors are on 2-
hop measurement paths, whose states can be determined
independently. Thus, ΩUP(G) = σ in this case.
Evaluation algorithm: The original bounds in Theo-
rem 20 are hard to evaluate due to the NP-hardness of com-
puting MSC(·). As in Section 4.3, we resort to the greedy
algorithm, which implies the following relaxed bounds:
l min
v∈N
GSC(v)
log(|Pv|) + 1m − 1 ≤ ΩUP(G) ≤ min
v∈N
GSC(v).
(5)
Proof. By deﬁnition of vertex-connectivity, G∗ is δ(G∗)-
vertex-connected, and Gm is δmin-vertex-connected for each
monitor m ∈ M . This satisﬁes the condition in Corol-
lary 12 (a) for k = min(δmin − 1, δ(G∗) − 2), and thus
ΩCSP(G) ≥ min(δmin − 1, δ(G∗) − 2). Meanwhile, since G∗ is
not (δ(G∗) + 1)-vertex-connected, and Gm is not (δmin + 1)-
vertex-connected for some m ∈ M , the condition in Corol-
lary 12 (b) is violated for k = min(δmin + 1, δ(G∗)) (which
requires min(δmin + 1, δ(G∗)) ≤ σ − 1). Thus, ΩCSP(G) ≤
min(δmin, δ(G∗) − 1).
Remark: Because the set of links in Gm is a subset of
those in G∗ while the nodes are the same, we always have
δmin ≤ δ(G∗). Therefore, the above bounds simplify to:
• δmin − 2 ≤ ΩCSP(G) ≤ δmin − 1 if δmin = δ(G∗);
• δmin − 1 ≤ ΩCSP(G) ≤ δmin if δmin  0). The generation of a
RPL graph is similar to that of an ER graph, except that
instead of connecting each pair of nodes with the same prob-
ability, nodes i and j in a RPL graph are connected by a
link with probability pij = didj/P|V |
k=1 dk.
Remark: Our motivation for performing evaluations on
random topologies is that they allow comprehensive evalua-
tion without artifacts of speciﬁc network deployments, which
are common in real topologies. Moreover, the selected graph
models can provide insights on how the topological property
aﬀects node failure localization.
6.1.2 Real Topologies
For real topologies, we use the Autonomous System (AS)
topologies collected by the Rocketfuel [28] and the CAIDA
[29] projects, which represents IP-level connections between
7All realizations are guaranteed to be connected, as we dis-
card disconnected realizations in the generation process.
Algorithm 1: Enhanced Random Monitor Placement
(ERMP)
input : Network topology G, all possible measurement
paths Q under UP, number of monitors µ
output: Set of monitors M
1 M ← {all degree-1 nodes} ∪
{one in every two neighboring degree-2 nodes};
M ← {endpoints of the longest path in Q};
2 if M = ∅ then
3
4 end
5 U ← V \ (Sm,m′∈M Vmm′ );
6 while U 6= ∅ do
7
m = arg maxw∈V \M |U ∩ V(w, M )|;
U ← U \ V(m, M );
M ← M ∪ {m};
8
9
// uncovered nodes
10 end
11 if |M | < µ then
12
13 end
M ← M ∪{µ−|M | nodes randomly selected from V \M }
backbone/gateway routers of several ASes from major In-
ternet Service Providers (ISPs) around the globe.
6.2 Placement of Monitors
Since the maximum identiﬁability Ω depends on the given
placement of monitors, we want to randomize this given
monitor placement for a comprehensive evaluation. A purely
random placement, however, is likely to lead to trivial Ω,
since Ω = 0 whenever there is a non-monitor not traversed