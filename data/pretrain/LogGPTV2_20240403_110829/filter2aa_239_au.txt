Wrox. 
Extensions中，则只有用using指令打开Wrox.Extensions，编译器才能找到
GetWordCount方法。如果类型还定义了同名的实例方法，扩展方法就永远不会使用。类
中已有的任何实例方法都优先。当多个同名的扩展方法扩展相同的类型，打开所有这些类
型的名称空间时，编译器会产生一个错误，指出调用是模棱两可的，它不能决定在多个实
现代码中选择哪个。然而，如果调用代码在一个名称空间中，这个名称空间就优先。
  注意： 语言集成查询（Language Integrated Query, LINQ）利用了许多扩展方
法。
3.11 Object类
前面提到，所有的.NET类最终都派生自System.Object。实际上，如果在定义类时没
有指定基类，编译器就会自动假定这个类派生自Object。本章没有使用继承，所以前面介
绍的每个类都派生自System.Object（如前所述，对于结构，这个派生是间接的：结构总是
派生自System.ValueType, System.ValueType又派生自System.Object）。
其实际意义在于，除了自己定义的方法和属性等外，还可以访问为Object类定义的许
多公有的和受保护的成员方法。这些方法可用于自己定义的所有其他类中。
下面将简要总结每个方法的作用：
● ToString（）方法： 是获取对象的字符串表示的一种便捷方式。当只需要快速获
取对象的内容，以进行调试时，就可以使用这个方法。在数据的格式化方面，它
几乎没有提供选择：例如，在原则上日期可以表示为许多不同的格式，但
DateTime.ToString（）没有在这方面提供任何选择。如果需要更复杂的字符串表
示，例如，考虑用户的格式化首选项或区域性，就应实现IFormattable接口。
● GetHashCode（）方法： 如果对象放在名为映射（也称为散列表或字典）的数据
结构中，就可以使用这个方法。处理这些结构的类使用该方法确定把对象放在结
构的什么地方。如果希望把类用作字典的一个键，就需要重写GetHashCode（）
方法。实现该方法重载的方式有一些相当严格的限制，这些将在第11章介绍字典
时讨论。
● Equals（）（两个版本）和ReferenceEquals（）方法： 注意有3个用于比较对象
相等性的不同方法，这说明.NET 
Framework在比较相等性方面有相当复杂的模
式。这3个方法和比较运算符“==”在使用方式上有微妙的区别。而且，在重写带
一个参数的虚Equals（）方法时也有一些限制，因为System.Collections名称空间中
的一些基类要调用该方法，并希望它以特定的方式执行。第8章在介绍运算符时将
探讨这些方法的使用。
● Finalize（）方法： 第5章将介绍这个方法，它最接近C++风格的析构函数，在引用
对象作为垃圾被回收以清理资源时调用它。Object中实现的Finalize（）方法实际
上什么也没有做，因而被垃圾回收器忽略。如果对象拥有对未托管资源的引用，
则在该对象被删除时，就需要删除这些引用，此时一般要重写Finalize（）。垃圾
收集器不能直接删除这些对未托管资源的引用，因为它只负责托管的资源，于是
它只能依赖用户提供的Finalize（）。
● GetType（）方法： 这个方法返回从System.Type派生的类的一个实例，因此可以
提供对象成员所属类的更多信息，包括基本类型、方法、属性等。System.Type还
提供了.NET的反射技术的入口点。这个主题详见第16章。
● MemberwiseClone（）方法： 这是System.Object中唯一没有在本书的其他地方详
细论述的方法。不需要讨论这个方法，因为它在概念上相当简单，它只复制对
象，并返回对副本的一个引用（对于值类型，就是一个装箱的引用）。注意，得
到的副本是一个浅表复制，即它复制了类中的所有值类型。如果类包含内嵌的引
用，就只复制引用，而不复制引用的对象。这个方法是受保护的，所以不能用于
复制外部的对象。该方法不是虚方法，所以不能重写它的实现代码。
3.12 小结
本章介绍了C#中声明和处理对象的语法，论述了如何声明静态和实例字段、属性、
方法和构造函数。还讨论了C# 6中新增的特性。例如，表达式体方法和属性、自动实现的
只读属性、结构的默认构造函数。
我们还阐述了C#中的所有类型最终都派生自类System.Object，这说明所有的类型都
开始于一组基本的实用方法，包括ToString（）。
本章多次提到了继承，第4章将介绍C#中的实现（implementation）继承和接口继承。
第4章
继承
本章要点
● 继承的类型
● 实现继承
● 访问修饰符
● 接口
● Is和as运算符
本章源代码下载地址（wrox.com）：
打开网页http://www.wrox.com/go/professionalcsharp6，单击Download Code选项卡即可
下载本章源代码。本章代码分为以下几个主要的示例文件：
● VirtualMethods
● InheritanceWithConstructors
● UsingInterfaces
4.1 继承
面向对象的三个最重要的概念是继承、封装和多态性。第3章谈到如何创建单独的
类，来安排属性、方法和字段。当某类型的成员声明为private时，它们就不能从外部访
问。它们封装在类型中。本章的重点是继承和多态性。
第3章提到，所有类最终都派生于System.Object。本章介绍如何创建类的层次结构，
多态性如何应用于C#，还描述与继承相关的所有C#关键字。
4.2 继承的类型
首先介绍一些面向对象（Object-Oriented, OO）术语，看看C#在继承方面支持和不支
持的功能。
● 单重继承： 表示一个类可以派生自一个基类。C#就采用这种继承。
● 多重继承： 多重继承允许一个类派生自多个类。C#不支持类的多重继承，但允许
接口的多重继承。
● 多层继承： 多层继承允许继承有更大的层次结构。类B派生自类A，类C又派生自
类B。
其中，类B也称为中间基类，C#支持它，也很常用。
● 接口继承： 定义了接口的继承。这里允许多重继承。接口和接口继承参见本章后
面的“接口”一节。
下面讨论继承和C#的某些特定问题。
4.2.1 多重继承
一些语言（如C++）支持所谓的“多重继承”，即一个类派生自多个类。对于实现继
承，多重继承会给生成的代码增加复杂性，还会带来一些开销。因此，C#的设计人员决
定不支持类的多重继承，因为支持多重继承会增加复杂性，还会带来一些开销。
而C#又允许类型派生自多个接口。一个类型可以实现多个接口。这说明，C#类可以
派生自另一个类和任意多个接口。更准确地说，因为System.Object是一个公共的基类，所
以每个C#类（除了Object类之外）都有一个基类，还可以有任意多个基接口。
4.2.2 结构和类
第3章区分了结构（值类型）和类（引用类型）。使用结构的一个限制是结构不支持
继承，但每个结构都自动派生自System.ValueType。不能编码实现结构的类型层次，但结
构可以实现接口。换言之，结构并不支持实现继承，但支持接口继承。定义的结构和类可
以总结为：
● 结构总是派生自System.ValueType，它们还可以派生自任意多个接口。
● 类总是派生自System.Object或用户选择的另一个类，它们还可以派生自任意多个接
口。
4.3 实现继承
如果要声明派生自另一个类的一个类，就可以使用下面的语法：
    class MyDerivedClass: MyBaseClass
    {
      // members
    }
如果类（或结构）也派生自接口，则用逗号分隔列表中的基类和接口：
    public class MyDerivedClass: MyBaseClass, IInterface1, IInterface2
    {
      // members
    }
  如果类和接口都用于派生，则类总是必须放在接口的前面。
对于结构，语法如下（只能用于接口继承）：
    public struct MyDerivedStruct: IInterface1, IInterface2
    {
      // members
    }
如果在类定义中没有指定基类，C#编译器就假定System.Object是基类。因此，派生
自Object类（或使用object关键字），与不定义基类的效果是相同的。
    class MyClass // implicitly derives from System.Object
    {
      // members
    }
下面的例子定义了基类Shape。无论是矩形还是椭圆，形状都有一些共同点：形状都
有位置和大小。定义相应的类时，位置和大小应包含在Shape类中。Shape类定义了只读属
性Position和Shape，它们使用自动属性初始化器来初始化（代码文件VirtualMethods
/Shape.cs）：
    public class Position
    {
      public int X { get; set; }
      public int Y { get; set; }
    }
    public class Size
    {
      public int Width { get; set; }
      public int Height { get; set; }
    }
    public class Shape
    {
      public Position Position { get; } = new Position();
      public Size Size { get; } = new Size();
    }
4.3.1 虚方法
把一个基类方法声明为virtual，就可以在任何派生类中重写该方法：
    public class Shape
    {
      public virtual
 void Draw()
      {
        WriteLine($"Shape with {Position} and {Size}");
      }
    }
如果实现代码只有一行，在C# 6中，也可以把virtual关键字和表达式体的方法（使用
lambda运算符）一起使用。这个语法可以独立于修饰符，单独使用：
    public class Shape
    {
      public virtual
 void Draw() =>
 WriteLine($"Shape with {Position} and {Size}");
    }
也可以把属性声明为virtual。对于虚属性或重写属性，语法与非虚属性相同，但要在
定义中添加关键字virtual，其语法如下所示：
    public virtual Size Size { get; set; }
当然，也可以给虚属性使用完整的属性语法：
    private Size _size;
    public virtual Size Size
    {
      get
      {
        return _size;
      }
      set
      {
        _size = value;
      }
    }
为了简单起见，下面的讨论将主要集中于方法，但其规则也适用于属性。
C#中虚函数的概念与标准OOP的概念相同：可以在派生类中重写虚函数。在调用方
法时，会调用该类对象的合适方法。在C#中，函数在默认情况下不是虚拟的，但（除了
构造函数以外）可以显式地声明为virtual。这遵循C++的方式，即从性能的角度来看，除
非显式指定，否则函数就不是虚拟的。而在Java中，所有的函数都是虚拟的。但C#的语法
与C++的语法不同，因为C#要求在派生类的函数重写另一个函数时，要使用override关键
字显式声明（代码文件VirtualMethods/Concrete-Shapes.cs）：
    public class Rectangle : Shape
    {
      public override
 void Draw() =>
        WriteLine($"Rectangle with {Position} and {Size}");
    }
重写方法的语法避免了C++中很容易发生的潜在运行错误：当派生类的方法签名无意
中与基类版本略有差别时，该方法就不能重写基类的方法。在C#中，这会出现一个编译
错误，因为编译器会认为函数已标记为override，但没有重写其基类的方法。
Size和Position类型重写了ToString（）方法。这个方法在基类Object中声明为virtual：
    public class Position
    {
      public int X { get; set; }
      public int Y { get; set; }
      public override string ToString() => $"X: {X}, Y: {Y}";
    }
    public class Size
    {
      public int Width { get; set; }
      public int Height { get; set; }
      public override string ToString() => $"Width: {Width}, Height: {Height}";
    }
  注意： 基类Object的成员参见第3章。
  注意： 重写基类的方法时，签名（所有参数类型和方法名）和返回类型必须
完全匹配。否则，以后创建的新成员就不覆盖基类成员。
在Main（）方法中，实例化的矩形r，初始化其属性，调用其方法Draw（）（代码文
件VirtualMethods/ Program.cs）：
    var r = new Rectangle();
    r.Position.X = 33;
    r.Position.Y = 22;
    r.Size.Width = 200;
    r.Size.Height = 100;
    r.Draw();
运行程序，查看Draw（）方法的输出：
    Rectangle with X: 33, y: 22 and Width: 200, Height: 100
成员字段和静态函数都不能声明为virtual，因为这个概念只对类中的实例函数成员有
意义。
4.3.2 多态性
使用多态性，可以动态地定义调用的方法，而不是在编译期间定义。编译器创建一个
虚拟方法表（vtable），其中列出了可以在运行期间调用的方法，它根据运行期间的类型
调用方法。
在下面的例子中，DrawShape（）方法接收一个Shape参数，并调用Shape类的
Draw（）方法（代码文件VirtualMethods/Program.cs）：
    public static void DrawShape(Shape shape)
    {
      shape.Draw();
    }
使用之前创建的矩形调用方法。尽管方法声明为接收一个Shape对象，但任何派生
Shape的类型（包括Rectangle）都可以传递给这个方法：
    DrawShape(r);
运行这个程序，查看Rectangle.Draw方法（）而不是Shape.Draw（）方法的输出。输
出行从Rectangle开始。如果基类的方法不是虚拟方法或没有重写派生类的方法，就使用所
声明对象（Shape）的类型的Draw（）方法，因此输出从Shape开始：
    Rectangle with X: 33, y: 22 and Width: 200, Height: 100
4.3.3 隐藏方法
如果签名相同的方法在基类和派生类中都进行了声明，但该方法没有分别声明为
virtual和override，派生类方法就会隐藏基类方法。
在大多数情况下，是要重写方法，而不是隐藏方法，因为隐藏方法会造成对于给定类
的实例调用错误方法的危险。但是，如下面的例子所示，C#语法可以确保开发人员在编
译时收到这个潜在错误的警告，从而使隐藏方法（如果这确实是用户的本意）更加安全。
这也是类库开发人员得到的版本方面的好处。
假定有一个类Shape：
    public class Shape
    {
      // various members
    }
在将来的某一刻，要编写一个派生类Ellipse，用它给Shape基类添加某个功能，特别
是要添加该基类中目前没有的方法——MoveBy（）：
    public class Ellipse: Shape
    {
      public void MoveBy(int x, int y)
      {
        Position.X += x;
        Position.Y += y;
      }
    }
过了一段时间，基类的编写者决定扩展基类的功能。为了保持一致，他也添加了一个
名为MoveBy（）的方法，该方法的名称和签名与前面添加的方法相同，但并不完成相同
的工作。这个新方法可能声明为virtual，也可能不是。
如果重新编译派生的类，会得到一个编译器警告，因为出现了一个潜在的方法冲突。
然而，也可能使用了新的基类，但没有编译派生类；只是替换了基类程序集。基类程序集
可以安装在全局程序集缓存中（许多Framework程序集都安装在此）。
现在假设基类的MoveBy（）方法声明为虚方法，基类本身调用MoveBy（）方法。会
调用哪个方法？基类的方法还是前面定义的派生类的MoveBy（）方法？因为派生类的
MoveBy（）方法没有用override关键字定义（这是不可能的，因为基类MoveBy（）方法
以前不存在），编译器假定派生类的MoveBy（）方法是一个完全不同的方法，与基类的
方法没有任何关系，只是名字相同。这种方法的处理方式就好像它有另一个名称一样。
编译Ellipse类会生成一个编译警告，提醒使用new关键词隐藏方法。在实践中，不使
用new关键字会得到相同的编译结果，但避免出现编译器警告：
    public class Ellipse: Shape
    {
      new
 public void Move(Position newPosition)
      {
      Position.X = newPosition.X;
      Position.Y = newPosition.Y;
      }
      //. . . other members
    }
不使用new关键字，也可以重命名方法，或者，如果基类的方法声明为virtual，且用
作相同的目的，就重写它。然而，如果其他方法已经调用了此方法，简单的重命名会破坏
其他代码。