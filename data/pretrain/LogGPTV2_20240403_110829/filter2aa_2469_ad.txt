威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：攻击者在服务器的根目录下找到.bash_history文件，
该文件包含DevOps团队用于访问API的命令：
$ curl -X GET 'https://api.server/endpoint/' -H 'authorization: 
Basic Zm9vOmJhcg=='
攻击者还可以通过仅由DevOps团队使用而未记录的新端点。
场景#2：为了锁定特定服务，攻击者使用主流的搜索引擎
搜索可从互联网直接访问的计算机。攻击者发现一个主机
正在运行主流的数据库管理系统，该系统正在侦听默认端
口。主机使用的是默认配置，默认情况下禁用了身份验证，
攻击者可以访问包含PII、个人首选项和身份验证数据在内
的数百万条记录。
场景#3：检查移动应用上的流量，攻击者发现并非所有的
HTTP流量都使用安全协议（如 TLS），特别是页面外链，在
下载个人头像时，由于用户交互是二进制数的，尽管API的
流量运行在安全协议上，但攻击者发现API响应大小的模式，
他使用它来跟踪用户对渲染内容的偏好（如，个人头像）。
API脆弱吗？
在以下情况下，API可能会受到攻击：
• 应用程序堆栈的任何部分都缺少适当的安全加固，或者应
用程序堆栈对云服务的权限配置不正确；
• 缺少最新的安全补丁，或者系统已经过期；
• 启用了不必要的功能（如，HTTP Verbs的功能应用）；
• 缺少传输层加密；
• 安全指令未发送给客户端（如， HTTP的安全返回头）；
• 未配置或错误配置CORS（跨域资源共享）策略；
• 错误提示泄漏了调用栈跟踪信息或其他敏感信息。
参考资料
OWASP资料
• OWASP Secure Headers Project
• OWASP Testing Guide: Configuration Management
• OWASP Testing Guide: Testing for Error Codes
• OWASP Testing Guide: Test Cross Origin Resource 
Sharing
外部资料
• CWE-2: Environmental Security Flaws
• CWE-16: Configuration
• CWE-388: Error Handling
• Guide to General Server Security，NIST
• Let’s Encrypt: a free，automated，and open Certificate 
Authority
如何防止？
API的生命周期应包括：
• 一个可重复的加固流程，可快速、轻松地部署一个适当封
闭的环境；
• 在整个API堆栈中检查和更新配置的任务。审查应包括：
文件编排、API组件和云服务（如，S3 bucket权限）；
• 用于所有API交互访问静态资源（如，图像）的安全通信
通道；
• 在所有环境中持续评估配置和设置有效性的自动化过程。
此外：
• 为了防止异常追踪和其他有价值的信息被传回攻击者，如
果可以，定义和强制使用统一的API响应格式，包括错误信
息；
• 确定API只能被特定HTTP方法访问，其他的HTTP方法访
问都应该被禁止（如，HEAD方法）；
• 对于主要是浏览器客户端（如， WebApp前端）访问的
API应该实现正确的CORS（跨域资源共享）策略。
API7:2019 安全配置错误
可利用性 ：3
普遍性：3
可检测性 ：3
技术：2
攻击者通常会试图查找未修补的缺陷、
公共端点或未受保护的文件和目录，
以获取对系统未经授权的访问或了解。
从网络层到应用层，在API的任何层级都可能
发生安全配置错误。自动化工具可用于检测
和利用不必要的服务或遗留选项等错误配置。
安全配置错误不仅会暴露敏感用户
数据，还包括系统细节，而这些细
节可能导致服务器完全被控制。
API详情
业务详情
14
影响
威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：家长控制设备的固件提供了一个接口/api/CONFIG
/restore，期望将appId作为multipart参数进行传送。通过反编译，攻击者发
现appId没有经过任何处理直接传送到系统调用中执行。
snprintf(cmd, 128, "%srestore_backup.sh /tmp/postfile.bin %s %d“,  
"/mnt/shares/usr/bin/scripts/“, appid,66);
system(cmd);
攻击者使用以下命令就可关闭任何使用带有该缺陷固件的设备：
$ curl -k "https://${deviceIP}:4567/api/CONFIG/restore" -F 
'appid=$(/etc/pod/power_down.sh)'
场景#2：有一个能实现增删改查功能、用于进行预定操作的应用。攻击者
研究发现在删除预定请求中的bookingId字符串查询参数可能存在NoSQL注
入。请求类似：DELETE/api/bookings?bookingId=678.
API服务器使用以下函数实现删除请求：
router.delete('/bookings', async function (req, res, next) {
try {
const deletedBooking = await Bookings.findOneAndRemove({_id' : req.query.bookingId});
res.status(200);
} catch (err) {
res.status(400).json({
error: 'Unexpected error occured while processing a request'
});
}
});
攻击者拦截了请求并更改bookId查询字符串参数如下所示。这个例子中，
攻击者试图删除其他用户的预定操作。
DELETE /api/bookings?bookingId[$ne]=678
API脆弱吗？
以下情况会导致注入攻击：
• API不对客户端提供的数据进行验证、过滤或净化；
• 客户端提供的数据直接使用或者拼接到SQL/NoSQL/LDAP查
询语句、OS命令、XML解释器和ORM（对象关系映射器）
/ODM（对象文档映射器）中；
• API不对来自外部系统（如，集成系统）的数据进行验证、
过滤或净化。
参考资料
OWASP资料
• OWASP Injection Flaws
• SQL Injection
• NoSQL Injection Fun with Objects and Arrays
• Command Injection
外部资料
• CWE-77: Command Injection
• CWE-89: SQL Injection
如何防止？
防止注入需要将数据与命令和查询分开。
• 使用统一、可信并且活跃的库执行数据验证；
• 对客户端提供的数据、或其他来自集成系统的数据进行验
证、过滤和清理；
• 应使用目标解释器的特定语法对特殊字符进行转义；
• 首选提供参数化查询的安全API；
• 总是限制返回记录的数量，以防止注入引起大量数据泄漏；
• 使用足够多的过滤器验证输入的数据，保证每一个输入参
数只允许有效的值通过；
• 为所有字符串参数定义数据类型和严格模式。
API8:2019 注入
可利用性 ：3
普遍性：2
可检测性 ：3
技术：3
攻击者通过任何可用的注入方法（如，
直接输入、参数、集成服务等）向API
提供恶意数据，并期望这些恶意数据
被发送至解释器执行。
注入漏洞非常常见，通常出现在SQL、LDAP或
者NoSQL查询、OS命令、XML解释器和ORM中。
攻击者可以使用扫描器或者模糊测试工具发
现。
注入会导致信息泄漏和数据丢失。
还可能导致DoS，或者主机被接管。
API详情
业务详情
15
影响
威胁
来源
攻击向量
安全弱点
攻击案例场景
场景#1：一个本地搜索服务商在重新设计了他们的应用程
序后留下了一个没有保护且运行中的旧API版本
（api.someservice.com/v1）并且其能访问用户数据库。而针
对最新发布的一版应用程序，攻击者发现了API地址
（api.someservice.com/v2）。将URL中的v2替换为v1使攻击
者能够访问旧的、不受保护的API，从而暴露超过1亿用户的
个人身份信息（PII）。
场景#2：一个社交网络实现了一种速率限制机制，阻止攻
击者使用暴力猜测重置密码令牌。该机制不是作为API代码
本身的一部分实现的，而是作为客户机和官方API之间的一
个独立组件实现的（www.socialnetwork.com）。一名研究
人员发现了一个运行相同API的beta API主机
（www.mbasic.beta.socialnetwork.com），其中包括重置密
码机制，但速率限制机制还没有到位。研究人员可以通过
一个简单的暴力破解6位令牌来重置任何用户的密码。
API脆弱吗？
如果API含有以下项，则存在风险：
• API主机的用途不明晰，同时以下问题也没有明确的答案：
– API在哪个环境中运行（如，生产、准备、测试、开
发）？
– 谁应该对API具有网络访问权限（如，公共、内部、
合作伙伴） ？
– 正在运行的是哪个API版本？
– API收集和处理哪些数据（例如，PII）？
– 数据流是什么？
• 没有关于API的文档，或者现有文档没有更新；
• 每个API版本都没有下线计划；
• 主机资源清单缺失或过期；
• 集成服务清单中无论是自有还是第三方的信息存在缺失或
未更新的现象；
• 旧的API版本在没有打补丁的情况下持续运行。
参考资料
外部资料
• CWE-1059: Incomplete Documentation
• OpenAPI Initiative
如何防止？
• 列出所有API主机并记录所有重要信息，重点放在API的环
境上(如，生产、准备、测试、开发环境)，谁应该对主机具
有网络访问权(如，公共、内部、合作伙伴)和API版本；
• 对集成服务进行清点并记录重要信息，如它们在系统中的
角色、交换了什么数据（数据流）及其敏感性；
• 记录API的所有信息，如，身份验证、错误、重定向、速
率限制、跨域资源共享(CORS)策略和端点，包括它们的参
数、请求和响应；
• 采用开放标准自动生成文档，包括在CI/CD管道中构建的
文档；
• 向授权使用API的人提供API文档；
• 为所有公开版本的API使用外部保护措施，如API安全防火
墙，不只是针对当前的产品版本；
• 避免在非生产API部署中使用生产数据。如果这是不可避
免的，这些端点应该得到与生产端点相同的安全处理；
• 当较新的API版本包含安全改进时，实施风险分析以确定
旧版本得到所需的风险缓解措施：如，是否可能在不破坏
API兼容性的情况下支持这些改进，或者需要迅速删除旧版