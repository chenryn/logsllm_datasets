---
author: Kubernetes.io
category: 容器与云
comments_data: []
count:
  commentnum: 0
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 8193
date: '2017-08-22 13:47:00'
editorchoice: true
excerpt: "这是一篇 Kubernetes 的概览。\r\n\r\nKubernetes 是一个自动化部署、伸缩和操作应用程序容器的开源平台。"
fromurl: https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/
id: 8800
islctt: true
largepic: /data/attachment/album/201708/22/115549zy13hgl2n33gow00.png
permalink: /article-8800-1.html
pic: /data/attachment/album/201708/22/115549zy13hgl2n33gow00.png.thumb.jpg
related:
- displayorder: 0
  raid: 8858
reviewer: ''
selector: ''
summary: "这是一篇 Kubernetes 的概览。\r\n\r\nKubernetes 是一个自动化部署、伸缩和操作应用程序容器的开源平台。"
tags:
- Kubernetes
thumb: false
title: 一文了解 Kubernetes 是什么？
titlepic: true
translator: songshuang00
updated: '2017-08-22 13:47:00'
---
![](/data/attachment/album/201708/22/115549zy13hgl2n33gow00.png)
这是一篇 Kubernetes 的概览。
Kubernetes 是一个[自动化部署、伸缩和操作应用程序容器的开源平台](http://www.slideshare.net/BrianGrant11/wso2con-us-2015-kubernetes-a-platform-for-automating-deployment-scaling-and-operations)。
使用 Kubernetes，你可以快速、高效地满足用户以下的需求：
* 快速精准地部署应用程序
* 即时伸缩你的应用程序
* 无缝展现新特征
* 限制硬件用量仅为所需资源
我们的目标是培育一个工具和组件的生态系统，以减缓在公有云或私有云中运行的程序的压力。
#### Kubernetes 的优势
* **可移动**: 公有云、私有云、混合云、多态云
* **可扩展**: 模块化、插件化、可挂载、可组合
* **自修复**: 自动部署、自动重启、自动复制、自动伸缩
Google 公司于 2014 年启动了 Kubernetes 项目。Kubernetes 是在 [Google 的长达 15 年的成规模的产品级任务的经验下](https://research.google.com/pubs/pub43438.html)构建的，结合了来自社区的最佳创意和实践经验。
### 为什么选择容器?
想要知道你为什么要选择使用 [容器](https://aucouranton.com/2014/06/13/linux-containers-parallels-lxc-openvz-docker-and-more/)?
![](/data/attachment/album/201708/22/115217h7sbftbcbb8fby6u.jpg)
程序部署的*传统方法*是指通过操作系统包管理器在主机上安装程序。这样做的缺点是，容易混淆程序之间以及程序和主机系统之间的可执行文件、配置文件、库、生命周期。为了达到精准展现和精准回撤，你可以搭建一台不可变的虚拟机镜像。但是虚拟机体量往往过于庞大而且不可转移。
容器部署的*新的方式*是基于操作系统级别的虚拟化，而非硬件虚拟化。容器彼此是隔离的，与宿主机也是隔离的：它们有自己的文件系统，彼此之间不能看到对方的进程，分配到的计算资源都是有限制的。它们比虚拟机更容易搭建。并且由于和基础架构、宿主机文件系统是解耦的，它们可以在不同类型的云上或操作系统上转移。
正因为容器又小又快，每一个容器镜像都可以打包装载一个程序。这种一对一的“程序 - 镜像”联系带给了容器诸多便捷。有了容器，静态容器镜像可以在编译/发布时期创建，而非部署时期。因此，每个应用不必再等待和整个应用栈其它部分进行整合，也不必和产品基础架构环境之间进行妥协。在编译/发布时期生成容器镜像建立了一个持续地把开发转化为产品的环境。相似地，容器远比虚拟机更加透明，尤其在设备监控和管理上。这一点，在容器的进程生命周期被基础架构管理而非被容器内的进程监督器隐藏掉时，尤为显著。最终，随着每个容器内都装载了单一的程序，管理容器就等于管理或部署整个应用。
容器优势总结：
* **敏捷的应用创建与部署**：相比虚拟机镜像，容器镜像的创建更简便、更高效。
* **持续的开发、集成，以及部署**：在快速回滚下提供可靠、高频的容器镜像编译和部署（基于镜像的不可变性）。
* **开发与运营的关注点分离**：由于容器镜像是在编译/发布期创建的，因此整个过程与基础架构解耦。
* **跨开发、测试、产品阶段的环境稳定性**：在笔记本电脑上的运行结果和在云上完全一致。
* **在云平台与 OS 上分发的可转移性**：可以在 Ubuntu、RHEL、CoreOS、预置系统、Google 容器引擎，乃至其它各类平台上运行。