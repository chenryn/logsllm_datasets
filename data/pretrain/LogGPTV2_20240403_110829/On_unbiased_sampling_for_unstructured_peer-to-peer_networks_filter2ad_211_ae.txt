upper-bound on the true degree distribution.
Figure 8 presents a comparison of the degree distribution
of reachable ultrapeers in Gnutella, as seen by Cruiser and
by the sampling tool (capturing approximately 1,000 sam-
ples with r = 25 hops). It also includes the results of a short
crawl,7 a sampling technique commonly used in earlier stud-
ies (e.g., [33]). We interleaved running these measurement
tools to minimize the change in the system between mea-
surements of diﬀerent tools, in order to make their results
comparable.
Examining Figure 8, we see that the full crawl and sam-
pling distributions are quite similar. The sampling tool ﬁnds
slightly more peers with lower degree, compared to the full
crawl, in accordance with our expectations described above.
We examined several such pairs of crawling and sampling
data and found the same pattern in each pair. By com-
parison, the short crawl exhibits a substantial bias towards
high degree peers relative to both the full crawl and sam-
pling. We computed the KS statistic (D) between each pair
of datasets, presented in Table 3. Since the full crawl is a
close upper-bound of the true degree distribution, and since
7A “short crawl” is a general term for a progressive explo-
ration of a portion of the graph, such as by using a breadth-
ﬁrst or depth-ﬁrst search. In this case, we randomly select
the next peer to explore.
Short Crawl Full Crawl
Sampling
Short Crawl
Full Crawl
Sampling
—
12.0
16.1
12.0
—
4.30
16.1
4.30
—
Table 3: KS statistic (D) between pairs of empirical datasets
sampling’s distribution is lower, the error in the sampling
distribution relative to the true distribution is D ≤ 4.3. On
the other hand, because the short crawl data exceeds the full
crawl distribution, its error relative to the true distribution
is D ≥ 12. In other words, the true D for the sampling data
is at most 4.3, while the true D for the short crawl data is at
least 12. It is possible that sampling with MRWB produces
more accurate results than a full crawl (which suﬀers from
distortion), but this is diﬃcult to prove conclusively.
Having demonstrated the validity of the MRWB tech-
nique, we now turn our attention to its eﬃciency. Perform-
ing the walk requires n · r queries, where n is the desired
number of samples and r is the length of the walk in hops.
If r is too low, signiﬁcant bias may be introduced. If r is
too high, it should not introduce bias, but is less eﬃcient.
From graph theory, we expect to require r ≥ O(log |V |) for
an ordinary random walk.
To empirically explore the selection of r for Gnutella, we
conducted many sets of sampling experiments using diﬀer-
ent values of r, with full crawls interspersed between the
sampling experiments. For each sampling experiment, we
compute the KS statistic, D, between the sampled degree
distribution and that captured by the most recent crawl.
Figure 9 presents the mean and standard deviation of D
as a function of r across diﬀerent experiments. The ﬁgure
shows that low values of r (≤ 10) can lead to enormous bias
(D ≥ 40). The amount of bias decreases rapidly with r, and
low bias is observed for r ≥ 25 hops. However, in a single
experiment with r = 30 hops, we observed D > 30, while all
other experiments at that length showed D < 9. Investigat-
ing the anomalous dataset, we found that a single peer had
been selected 309 out of 999 times.
Further examining the trace of this walk, we found that
the walk happened to start at a peer with only a single
neighbor. In such a case, the walk gets stuck at that peer
due to the way Metropolis–Hastings transitions to a new
peer y with probability only degree(x)
degree(y) . When this “stuck”
event occurs late in the walk, it is just part of the normal
re-weighting to correct for a regular random walk’s bias to-
wards high degree peers. However, when it occurs during
the ﬁrst step of the walk, a large fraction of the walks will
end at the unusual low-degree peer, resulting in an anoma-
lous set of selections where the same peer is chosen many
times.
One way to address this problem is to increase the walk
length by requiring
r ≥ maximum degree
minimum degree
· log |V |.
However, this reduces the eﬃciency of the walk. More im-
portantly, we typically do not accurately know the maximum
degree, i.e., while increasing r decreases the probability of an
anomalous event, it does not preclude it. Therefore, we sug-
gest the following heuristic to prevent such problems from
occurring. During the ﬁrst few steps of the walk, always
transition to the next peer as in a regular random walk; af-
ter the ﬁrst few steps, use the Metropolis–Hastings method
for deciding whether to transition to the next peer or re-
main at the current one. This modiﬁcation eliminates the
correlations induced by sharing a single starting location,
while keeping the walk length relatively short. We are ex-
perimenting with this modiﬁcation in our ongoing work. In
any case, such anomalous data sets can easily be detected
(and discarded) by the presence of the same IP address be-
ing selected a statistically improbable number of times. In
light of these considerations, we regard a choice of r = 25
as a safe walk length for Gnutella. Choosing r = 25, we
can collect 1,000 samples by querying 25,000 peers, over an
order of magnitude in savings compared with performing a
full crawl which must contact more than 400,000.
With respect to execution time, preliminary results show
than an implementation of ion-sampler with r = 25 hops
has execution time comparable using Cruiser to capture the
entire network, or around 10 minutes. While ion-sampler
contacts signiﬁcantly fewer peers, walks are sequential in na-
ture which limits the amount of parallelism that ion-sampler
can exploit. As discussed earlier, while longer execution time
has a negative impact on the accuracy of Cruiser’s results,
ion-sampler’s results are not signiﬁcantly impacted by the
time required to perform the walk (as demonstrated in Sec-
tion 5.4 where we simulate walks of 10,000 hops).
In our
initial implementation of ion-sampler, a small fraction of
walks would get “stuck” in a corner of the network, repeat-
edly trying to contact a set of departed peers. While the
walks eventually recover, this corner-case signiﬁcantly and
needlessly delayed the overall execution time. We added a
small cache to remember the addresses of unresponsive peers
to address this issue.
In summary, these empirical results support the conclu-
sion that a Metropolized Random Walk with Backtrack-
ing is an appropriate method of collecting measurements
from peer-to-peer systems, and demonstrate that it is sig-
niﬁcantly more accurate than other common sampling tech-
niques. They also illustrate the dramatic improvement in
eﬃciency and scalability of MRWB compared to performing
a full crawl. As network size increases, the cost of a full
crawl grows linearly and takes longer to complete, intro-
ducing greater distortion into the captured snapshots. For
MRWB, the cost increases logarithmically, and no additional
bias is introduced.
7 Discussion
7.1 How many samples are required?
An important consideration when collecting samples is to
know how many samples are needed for statistically signif-
icant results. This is principally a property of the distri-
bution being sampled. Consider the problem of estimating
the underlying frequency f of an event, e.g., that the peer
degree takes a particular value. Given N unbiased samples,
an unbiased estimate of f is bf = M/N where M is the num-
ber of samples for which the event occurs. bf has root mean
square (RMS) relative error
Var(bf )/f =
p
(1 − f )/f N .
q
σ =
From this expression, we derive the following observations:
• Estimation error does not depend on the population
size; in particular the estimation properties of unbiased
sampling scale independently of the size of the system
under study.
• The above expression can be inverted to derive the
number of samples Nf,σ required to estimate an out-
come of frequency f up to an error σ. A simple bound
is Nf,σ ≤ 1/(f σ2).
• Unsurprisingly, smaller frequency outcomes have a larger
relative error. For example, gathering 1,000 unbiased
samples gives us very little useful information about
events which only occur one time in 10,000; the as-
sociated σ value is approximately 3: the likely error
dominates the value to be estimated. This motivates
using biased sampling in circumstances that we discuss
in the next subsection.
The presence of sampling bias complicates the picture. If
an event with underlying frequency f is actually sampled
with frequency f0, then the RMS relative error acquires an
additional term (1 − f0/f )2 which does not reduce as the
number of samples N grows.
In other words, when sam-
pling from a biased distribution, increasing the number of
samples only increases the accuracy with which we estimate
the biased distribution.
7.2 Unbiased versus biased sampling
At the beginning of this paper, we set the goal of collecting
unbiased samples. However, there are circumstances where
unbiased samples are ineﬃcient. For example, while unbi-
ased samples provide accurate information about the body
of a distribution, they provide very little information about
the tails: the pitfall of estimating rare events we discussed
in the previous subsection.
In circumstances such as studying infrequent events, it
may be desirable to gather samples with a known sampling
bias, i.e., with non-uniform sampling probabilities. By de-
liberately introducing a sampling bias towards the area of
interest, more relevant samples can be gathered. During
analysis of the data, each sample is weighted inversely to
the probability that it is sampled. This yields unbiased esti-
mates of the quantities of interest, even though the selection
of the samples is biased.
A known bias can be introduced by choosing an appropri-
ate deﬁnition of μ(x) in the Metropolis–Hastings equations
presented in Section 4 and altering the walk accordingly. Be-
cause the desired type of known bias depends on the focus of
the research, we cannot exhaustively demonstrate through
simulation that Metropolis–Hastings will operate correctly
in a dynamic environment for any μ(x). Our results show
that it works well in the common case where unbiased sam-
ples are desired (i.e., μ(x) = μ(y) for all x and y).
7.3 Sampling from structured systems
Throughout this paper, we have assumed an unstructured
peer-to-peer network. Structured systems (also known as
Distributed Hash Tables or DHTs) should work just as well
with random walks, provided links are still bidirectional.
However, the structure of these systems often allows a more
eﬃcient technique.
In a typical DHT scheme, each peer has a randomly gen-
erated identiﬁer. Peers form an overlay that actively main-
tains certain properties such that messages are eﬃciently
routed to the peer “closest” to a target identiﬁer. The ex-
act properties and the deﬁnition of “closest” vary, but the
theme remains the same. In these systems, to select a peer
at random, we may simply generate an identiﬁer uniformly
at random and ﬁnd the peer closest to the identiﬁer. Be-
cause peer identiﬁers are generated uniformly at random, we
know they are uncorrelated with any other property. This
technique is simple and eﬀective, as long as there is little
variation in the amount of identiﬁer space that each peer is
responsible for. We made use of this sampling technique in
our study of the widely-deployed Kad DHT [38].
8 Conclusions and Future Work
This paper explores the problem of sampling representative
peer properties in large and dynamic unstructured P2P sys-
tems. We show that the topological and temporal prop-
erties of P2P systems can lead to signiﬁcant bias in col-
lected samples. To collect unbiased samples, we present the
Metropolized Random Walk with Backtracking (MRWB),
a modiﬁcation of the Metropolis–Hastings technique, which
we developed into the ion-sampler tool. Using both simu-
lation and empirical evaluation, we show that MRWB can
collect approximately unbiased samples of peer properties
over a wide range of realistic peer dynamics and topological
structures.
We are pursuing this work in the following directions.
First, we are exploring improving sampling eﬃciency for
uncommon events (such as in the tail of distributions) by
introducing known bias, as discussed in Section 7.2. Sec-
ond, we are studying the behavior of MRWB under ﬂash-
crowd scenarios, where not only are the properties of individ-
ual peers changing, but the distribution of those properties
is also rapidly evolving. Finally, we are developing addi-
tional plug-ins for ion-sampler and using it in conjunction
with other measurement tools to accurately character sev-
eral properties of widely-deployed P2P systems.
Acknowledgments
We would like to thank Amir Rasti and John Capehart for
their invaluable eﬀorts in developing the dynamic overlay
simulator. We would also like to thank Virginia Lo for her
valuable feedback on this paper.
This material is based upon work supported in part by the
National Science Foundation (NSF) under Grant No. Nets-
NBD-0627202 and an unrestricted gift from Cisco Systems.
Any opinions, ﬁndings, and conclusions or recommendations
expressed in this material are those of the authors and do
not necessarily reﬂect the views of the NSF or Cisco.
9 References
[1] D. Achlioptas, A. Clauset, D. Kempe, and C. Moore.
On the Bias of Traceroute Sampling; or, Power-law
Degree Distributions in Regular Graphs. In
Symposium on Theory of Computing, 2005.
[2] A. Awan, R. A. Ferreira, S. Jagannathan, and
A. Grama. Distributed Uniform Sampling in
Unstructured Peer-to-Peer Networks. In Hawaii
International Conference on System Sciences, 2006.
[3] Z. Bar-Yossef, A. Berg, S. Chien, J. Fakcharoenphol,
and D. Weitz. Approximating Aggregate Queries
about Web Pages via Random Walks. In International
Conference on Very Large Databases, 2000.
[4] R. Bhagwan, S. Savage, and G. Voelker.
Understanding Availability. In International
Workshop on Peer-to-Peer Systems, 2003.
[5] B. Bollob´as. A probabilistic proof of an asymptotic
formula for the number of labelled regular graphs.
European Journal of Combinatorics, 1, 1980.
[6] F. E. Bustamante and Y. Qiao. Friendships that last:
Peer lifespan and its role in P2P protocols. In
International Workshop on Web Content Caching and
Distribution, 2003.
[7] Y. Chawathe, S. Ratnasamy, and L. Breslau. Making
Gnutella-like P2P Systems Scalable. In SIGCOMM,
2003.
[8] S. Chib and E. Greenberg. Understanding the
Metropolis–Hastings Algorithm. The Americian
Statistician, 49(4), 1995.
[9] C. Cooper, M. Dyer, and C. Greenhill. Sampling
regular graphs and a peer-to-peer network. In
Symposium on Discrete Algorithms, 2005.
[10] H. D¨ampﬂing. Gnutella Web Caching System: Version
2 Speciﬁcations Client Developers’ Guide.
http://www.gnucleus.com/gwebcache/newgwc.html,
2003.
[11] C. Gkantsidis, M. Mihail, and A. Saberi. Random
Walks in Peer-to-Peer Networks. In INFOCOM, 2004.
[12] K. P. Gummadi, R. J. Dunn, S. Saroiu, S. D. Gribble,
H. M. Levy, and J. Zahorjan. Measurement, Modeling,
and Analysis of a Peer-to-Peer File-Sharing Workload.
In SOSP, 2003.
[13] K. P. Gummadi, S. Saroiu, and S. D. Gribble. King:
Estimating Latency between Arbitrary Internet End
Hosts. In Internet Measurement Workshop, 2002.
[14] W. Hastings. Monte Carlo Sampling Methods Using
Markov Chains and Their Applications. Biometrika,
57, 1970.
[15] M. Henzinger, A. Heydon, M. Mitzenmacher, and
M. Najork. On Near-Uniform URL Sampling. In
International World Wide Web Conference, 2001.
[16] M. Izal, G. Urvoy-Keller, E. W. Biersack, P. A.
Felber, A. A. Hamra, and L. Garces-Erice. Dissecting
BitTorrent: Five Months in a Torrent’s Lifetime. In
PAM, 2004.
[17] M. Jerrum and A. Sinclair. Fast uniform generation of
regular graphs. Theoretical Computer Science, 73,
1990.
[18] P. Karbhari, M. Ammar, A. Dhamdhere, H. Raj,
G. Riley, and E. Zegura. Bootstrapping in Gnutella: A
Measurement Study. In PAM, 2004.
[19] V. Krishnamurthy, M. Faloutsos, M. Chrobak, L. Lao,
J.-H. Cui, and A. G. Percus. Reducing Large Internet
Topologies for Faster Simulations. In IFIP
Networking, 2005.
[20] V. Krishnamurthy, J. Sun, M. Faloutsos, and
S. Tauro. Sampling Internet Topologies: How Small
Can We Go? In International Conference on Internet
Computing, 2003.
[21] A. Lakhina, J. W. Byers, M. Crovella, and P. Xie.
Sampling Biases in IP Topology Measurements. In
INFOCOM, 2003.
[22] D. Leonard, V. Rai, and D. Loguinov. On
[33] S. Saroiu, P. K. Gummadi, and S. D. Gribble.
Lifetime-Based Node Failure and Stochastic Resilience
of Decentralized Peer-to-Peer Networks. In
SIGMETRICS, 2005.
Measuring and Analyzing the Characteristics of
Napster and Gnutella Hosts. Multimedia Systems
Journal, 9(2), 2003.
[23] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graphs
over Time: Densiﬁcation Laws, Shrinking Diameters
and Possible Explanations. In KDD, 2005.
[34] S. Sen and J. Wang. Analyzing Peer-To-Peer Traﬃc
Across Large Networks. IEEE/ACM Transactions on
Networking, 12(2), 2004.
[24] J. Li, J. Stribling, F. Kaashoek, R. Morris, and T. Gil.
[35] I. Stoica, R. Morris, D. Liben-Nowell, D. R. Karger,
A Performance vs. Cost Framework for Evaluating
DHT Design Tradeoﬀs under Churn. In INFOCOM,
2005.
[25] D. Liben-Nowell, H. Balakrishnan, and D. Karger.
Analysis of the Evolution of Peer-to-Peer Systems. In
Principles of Distributed Computing, 2002.
[26] L. Lov´asz. Random walks on graphs: A survey.
Combinatorics: Paul Erd¨os is Eighty, 2, 1993.
M. F. Kaashoek, F. Dabek, and H. Balakrishnan.
Chord: A Scalable Peer-to-peer Lookup Protocol for
Internet Applications. IEEE/ACM Transactions on
Networking, 2002.
[36] M. P. H. Stumpf, C. Wiuf, and R. M. May. Subnets of
scale-free networks are not scale-free: Sampling
properties of networks. Proceedings of the National
Academy of Sciences, 102(12), 2005.
[27] Q. Lv, P. Cao, E. Cohen, K. Li, and S. Shenker.
[37] D. Stutzbach and R. Rejaie. Capturing Accurate
Search and Replication in Unstructured Peer-to-Peer
Networks. In International Conference on
Supercomputing, 2002.
[28] N. Metropolis, A. Rosenbluth, M. Rosenbluth,
A. Teller, and E. Teller. Equations of State
Calculations by Fast Computing Machines. Journal of
Chemical Physics, 21, 1953.
[29] J. Pouwelse, P. Garbacki, D. Epema, and H. Sips. The
Bittorrent P2P File-sharing System: Measurements
and Analysis. In International Workshop on
Peer-to-Peer Systems (IPTPS), 2005.
Snapshots of the Gnutella Network. In Global Internet
Symposium, 2005.
[38] D. Stutzbach and R. Rejaie. Improving Lookup
Performance over a Widely-Deployed DHT. In
INFOCOM, 2006.
[39] D. Stutzbach and R. Rejaie. Understanding Churn in
Peer-to-Peer Networks. In Internet Measurement
Conference, 2006.
[40] D. Stutzbach, R. Rejaie, N. Duﬃeld, S. Sen, and
W. Willinger. Sampling Techniques for Large,
Dynamic Graphs. In Global Internet Symposium, 2006.
[30] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and
[41] D. Stutzbach, R. Rejaie, and S. Sen. Characterizing
S. Shenker. A Scalable Content-Addressable Network.
In SIGCOMM, 2001.
[31] S. Rhea, D. Geels, and J. Kubiatowicz. Handling
Churn in a DHT. In USENIX, 2004.
[32] P. Rusmevichientong, D. M. Pennock, S. Lawrence,
and C. L. Giles. Methods for Sampling Pages
Uniformly from the World Wide Web. In AAAI Fall
Symposium on Using Uncertainty Within
Computation, 2001.
Unstructured Overlay Topologies in Modern P2P
File-Sharing Systems. In Internet Measurement
Conference, 2005.
[42] A. A. Tsay, W. S. Lovejoy, and D. R. Karger. Random
Sampling in Cut, Flow, and Network Design Problems.
Mathematics of Operations Research, 24(2), 1999.
[43] V. Vishnumurthy and P. Francis. On Heterogeneous
Overlay Construction and Random Node Selection in
Unstructured P2P Networks. In INFOCOM, 2006.