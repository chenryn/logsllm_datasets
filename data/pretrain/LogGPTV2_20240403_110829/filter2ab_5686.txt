### Title: BlackHat US-18 KeenLab iOS Jailbreak Internals: Userland Read-Only Memory Can Be Dangerous

Modern operating systems implement read-only memory mappings at the CPU architecture level to prevent common security attacks. By marking memories as read-only, the owning process can typically trust the memory content, eliminating unnecessary security considerations such as boundary checks and Time of Check to Time of Use (TOCTTOU) issues. This trust is based on the assumption that other processes cannot modify read-only shared mappings in their own virtual spaces. However, this assumption is not always correct.

In recent years, several logical issues have been identified by the security community, primarily due to operating systems incorrectly allowing read-only memories to be remapped as writable without enabling Copy-On-Write (COW). This can lead to memory corruption and even userland privilege escalation. While such issues are becoming rarer as operating systems evolve, the increasing capabilities of peripheral components attached to mobile devices, particularly through Direct Memory Access (DMA) technology, introduce new vulnerabilities.

DMA enables fast data transfer between the host and peripheral devices, but it bypasses the memory protection mechanisms provided by the CPU's Memory Management Unit (MMU), relying instead on the Input/Output Memory Management Unit (IOMMU). In 2017, Gal Beniamini of Google Project Zero successfully demonstrated a device-to-host attack using DMA on both the Nexus 6P and iPhone 7. This attack model typically requires a firmware bug to fully control the device, and DMA-related interfaces are not directly exposed to userland applications.

However, our research uncovered an exception on iOS devices: the Apple Graphics component. At the MOSEC conference in 2017, we demonstrated jailbreaks for iOS 10.3.2 and iOS 11 beta 2 on iPhone 6s and iPhone 7. The details of these demonstrations have not been previously published. In this talk, we will introduce the essential concepts related to our findings, including:

- Indirect DMA features exposed to iOS userland
- The implementation of IOMMU memory protection
- Notification mechanisms between the GPU and the Apple Graphics driver

We will then cover two specific bugs:
1. A flaw in DMA handling with host virtual memory.
2. An out-of-bound write issue caused by potentially untrusted userland read-only memory.

Finally, we will discuss how we combined these flaws across different Apple Graphics components to achieve reliable kernel code execution from within the iOS application sandbox.