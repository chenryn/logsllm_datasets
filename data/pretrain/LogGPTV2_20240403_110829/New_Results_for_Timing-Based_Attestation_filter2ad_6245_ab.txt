of adds and xors is used to prevent parallelization of the self-
check function, because if the sequence is not computed in
the same order, e.g. (A+B) ⊕ (C+D) instead of ((A+B) ⊕ C)
+ D, then the result will be different with high probability. In
Tables II and III, “codeStart” is the address of the beginning
of the self-check function, “memRange” is the size of the
self-check function, and “addressTable” is a precomputed
table of the start addresses of each block. In Table III the
following long-lived register conventions are in place: eax
and edx are scratch registers, ebx holds the checksum loop
counter, edi holds DP, and esi holds the PRN. In the body
of the code, ecx is used to accumulate the mixing of values
before they are mixed with the overall checksum. And before
inter-block transfer, ecx is loaded with EIP DST.
In Tables II and III the MIX EIP sub-block starts by
accumulating the value (EIP SRC + EIP DST) into ecx.
Then in an UPDATE PRN*1 sub-block, the PRN is up-
dated so that each block has a fresh PRN, and ecx is
updated to hold (EIP SRC + EIP DST ⊕ PRN ). In a
READ AND UPDATE DP* sub-block DP and *DP are
accumulated so that ecx holds (EIP SRC + EIP DST ⊕
PRN + DP ⊕ *DP), and then DP is updated to a new pseudo-
1A * at the end of a block name is meant to be interpreted like a regular
expression, meaning any variation of characters from that point.
random location. After the READ UEE STATE* sub-block,
ecx holds (EIP SRC + EIP DST ⊕ PRN + DP ⊕ *DP +
DR7 ⊕ EFLAGS). In READ RAND RETURN ADDRESS
ecx will be updated to add in either PARENT RET ⊕ PRN
or GRANDPARENT RET ⊕ PRN depending on bit 0 of the
PRN. In CHECKSUM UPDATE the accumulated value in
ecx is mixed with the 192 bit checksum stored on the stack.
Finally, in INTERBLOCK TRANSFER the code exits if
the loop counter is zero, or pseudo-randomly picks the next
block to jump to based on the bottom 3 bits of PRN.
Table II
MID-LEVEL: BLOCK VARIANT 0
EXAMPLE BLOCK(codeStart, memRange, addressTable)
MIX EIP
UPDATE PRN VAR0
READ AND UPDATE DP VAR0(codeStart, memRange)
UPDATE PRN VAR1
READ AND UPDATE DP VAR1(codeStart, memRange)
READ UEE STATE VAR0
READ RAND RETURN ADDRESS
CHECKSUM UPDATE
INTERBLOCK TRANSFER(addressTable)
C. Windows-speciﬁc design considerations
Because we did not implement our code as a standalone
addition to a network driver as the original Pioneer did,
our kernel module has some dependencies on external code.
Speciﬁcally we import functions from ndis.sys (the NDIS
abstraction interface driver, hereafter referred to as ndis),
ntkrnlpa.exe (the kernel utilizing Physical Address Exten-
sions, nt), and hal.dll (hal). Therefore we must consider
these three modules to be part of CMA’s dynamic root of
trust as shown in Figure 2. We achieve this by modifying
our minichecksum to run over arbitrary memory ranges,
unlike in PioneerNG. This is done with a switch statement
that feeds range information into the start and end registers
used by the minichecksum. The ability to run over multiple
independent memory ranges is useful for including portions
of these modules, while avoiding certain areas within them.
For instance, the System Service Descriptor Table (SSDT)
is a table of function pointers that are often modiﬁed by 3rd
party software (despite this being discouraged by Microsoft.)
This table is measured by the CMM code, and not called
directly or indirectly by CMA code. Therefore we do not
think it should be incorporated into the self-checksum, as
that needlessly complicates checksum appraisal. Instead we
separately read the portions of nt’s .text section before and
after the SSDT. Similarly there is a complication with hal
in that it has a region within its .text section where data is
changed from zeros for the binary on disk, to stack garbage
left over from code that transitions into the “Virtual 8086”
242
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:23 UTC from IEEE Xplore.  Restrictions apply. 
LOW LEVEL: SINGLE BLOCK WITH EXPANDED SUB-BLOCKS (VARIANT
Table III
BLOCKS REMOVED)
add ecx, [esp]
add esp, 4
mov eax, esi
mul eax
or eax, 5
add esi, eax
xor ecx, esi
add ecx, edi
xor ecx, [edi]
mov eax, esi
xor edx, edx
div memRange
add edx, codeStart
mov edi, edx
mov eax, dr7
add ecx, eax
xor ecx, [esp]
add esp, 4
test esi, esi
mov eax, [ebp+4]
JP(6)
mov edx, [ebp]
mov eax, [edx+4]
xor eax, esi
add ecx, eax
mov eax, ebx
and eax, 3
xor [esp+eax*4], ecx
bt [esp+0x10], 1
rcr [esp-0x08], 1
rcr [esp], 1
rcr [esp+0x04], 1
rcr [esp+0x08], 1
rcr [esp+0x0C], 1
rcr [esp+0x10], 1
sub ebx, 1
test ebx, ebx
jz setRange
lea edx, addressTable
mov eax, esi
and eax, 7
MIX EIP
EIP SRC ([esp]) + EIP DST (ecx)
ecx is then used as an accumulator
Reset stack after EIP SRC push
UPDATE PRN VAR0
Create a copy of x before squaring
eax = x*x
eax = (x*x OR 5)
PRN = x + (x*x OR 5)
Mix PRN with the accumulator ecx
READ AND UPDATE DP VAR0
Mix DP with accumulator ecx
Mix *DP with accumulator ecx
Move PRN to eax
Clear edx
edx = PRN modulo memRange
edx=codeStart+(PRN mod memRange)
Update DP to new value
READ UEE STATE VAR0
Copy the DR7 register
Mix DR7 with accumulator ecx
Mix EFLAGS with accumulator ecx
Reset stack after EFLAGS push
READ RAND RETURN ADDRESS
AND PRN with self and set ﬂags
Move PARENT RET to eax
Hardcoded bytes for if(PF) jump 6
PF is parity ﬂag set by test esi, esi
The jump would land at the next xor
If not jumped over,
move the GRANDPARENT RET to eax
Xor saved ret with PRN
Mix xored saved ret with accumulator
CHECKSUM UPDATE
Copy loop counter to eax
Use bottom 2 bits of loop counter
to specify which checksum memory
entry to directly update.
Xor checksum[eax+1], accumulator
(+1 because checksum[0] is below esp)
Set carry ﬂag based on LSB
of checksum[5]
Rotate right with carry checksum[0]
Rotate right with carry checksum[1]
Rotate right with carry checksum[2]
Rotate right with carry checksum[3]
Rotate right with carry checksum[4]
Rotate right with carry checksum[5]
INTERBLOCK TRANSFER
Decrement loop counter
Check if loop counter is 0
If 0, jump to minichecksum switch
Otherwise, prepare to jump
to next block. Load address of table
holding start address of each block
Copy PRN to eax
Use bottom 3 bits to decide which
block to call to next
mov ecx, [edx+eax*4] Move EIP DST to ecx
call ecx
Call to next block
Implicitly push EIP SRC
Figure 2. Checkmate kernel module dependencies
CPU mode.2 This region can be skipped because the veriﬁer
will not be able to reconstruct the expected values. There are
no such complications with reading the code from ndis.
The inclusion of the external modules means that in order
for the appraiser to reconstruct the self-checksum, it will
have to reconstruct the state of memory for these modules
too. This capability is also necessary for veriﬁcation of the
CMM code’s measurement of binaries. To achieve this, the
appraiser must have a trusted copy of the ﬁle that was loaded
in memory on the client system. The ﬁle is then memory
mapped and processed in the same manner it would have
been by the OS loader, starting with applying relocations
based on the base address where the module was loaded.
Veriﬁcation also requires reconstructing the import address
table (IAT), because in these modules the IAT is in the .text
section. This is why in Figure 2 we point out nt and hal’s
dependence on bootvid.dll and kdcom.dll. The appraiser
must also have trusted copies of those ﬁles in order to
accurately ﬁll in the reconstructed IATs for nt and hal.
An important element of implementation on Windows
rather than Linux is that the appraiser cannot assume it
knows exactly where in memory the client is. This is because
on Windows XP SP3 the OS loader does not respect the
preferred base address listed in the binary header for kernel
modules. This is despite the fact that ofﬁcially ASLR support
only begins in Windows Vista and later. By default for .sys
kernel module ﬁles, even if the preferred base address is not
already taken, the OS loader will not load it at that address.
Implementation in the presence of this behavior on Windows
XP led us to believe that our implementation would work
equally well in the presence of ASLR on newer Windows
systems, and a subsequent Windows 7 port conﬁrmed this.
The inability of the veriﬁer to know the address where the
CMA module will be located a priori necessitates that a
client send back its base address with attestations. However
this means that the attacker can forge the base address that
is returned. We take advantage of this fact for our reference
attacker in Section III-E.
2This hal self-modiﬁcation is absent in Windows 7. But Windows 7 also
added 3 new modules which nt depends on. They were easily dealt with
through 3 new cases in the minichecksum switch statement.
243
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:23 UTC from IEEE Xplore.  Restrictions apply. 
Our module originally used Windows API calls in order
to make the other CPUs spinlock while our code ran with
exclusive access to a single CPU. What we ultimately
found is that
this code was introducing up to 16ms in
non-deterministic delays in our observed network RTT. We
believe this is because the APIs used Windows Deferred
Procedure Calls (DPCs) to schedule the spinlocks on the
other CPUs. We believe that
these functions are using
inter-processor interrupts (IPIs) underneath, and we could
reintroduce the locking behavior in the future by using
IPIs directly. However because any attacks that leveraged
the fact that we weren’t locking the other CPUs would
be TOCTOU attacks, we think it will be more beneﬁcial
to utilize the multiple CPUs to implement a randomized
overlapping scheme as outlined in Section V-C.
D. Microarchitectural optimizations
Past work such as Pioneer has suggested the need to
optimize the self-check function with awareness of mi-
croarchitectural details in order to fully occupy all sub-
units of the processor. This attempts to ensure there are
no empty slots where additional attacker code does not
incur overhead. However, as past authors have made clear,
there is still no mechanism to prove the optimality of a
self-check implementation. Therefore, while we did make
attempts to optimize our self-check through guess-and-test
reconﬁguration of code, we cannot guarantee the optimality
of our implementation, or our attack. However, in general
we do not think it is reasonable to expect security software
vendors to gain deep expertise in every microarchitecture
variant of x86 processors. We believe that as timing-based
attestation becomes more mature it is more beneﬁcial to
work directly with chip manufacturers to provide a single
reference implementation per microarchitecture. We will be
making our self-check code widely available as a starting
reference implementation from which future improvements
and reference attacks can be built, hopefully in cooperation
with chip vendors and other researchers who have deep
systems knowledge.
E. Self-checksum forgery attack
It is important to remember that while timing-based at-
testation systems are useful to an enterprise, they are not in-
fallible. They can be thought of as providing robust tamper-
evidence, rather than tamper-prooﬁng, for security software.
Our reference attack takes advantage of the requirement
on Windows for the client to send back the base address
where it says the Checkmate driver is loaded. For simplicity
of testing, we implemented our attack in an experimental
branch of the same kernel module where the normal CMA
code resides. This allowed us to toggle the attack on/off in
our experiments.
As setup for the attack, when the legitimate module
the embedded attacker code reads the client
is loaded,
binary from disk and copies it into dynamically allocated
kernel heap space as shown in Figure 3. The attacker code
processes the relocations of the clean client copy so that it
looks as it would if the OS had loaded it at the given base
address. When the attack is activated, it places an inline
jump instruction as the very ﬁrst instruction called in the
self-check function. This jump redirects to the attacker code.
The attacker then sets the data pointer to the address in the
clean memory range. He does not have to incur performance
overhead ﬁxing DP in every loop because he will ultimately
be lying about the base address when the response is sent.
The attacker cannot simply invoke the clean self-check
function with a corrupted data pointer in order to avoid
forging the EIP. This is because when the appraiser is
reconstructing the self-checksum, it will reconstruct both
the expected DP and EIP to be within the range where it
was told the module is based. If the attacker invoked the
clean self-check, with correct stack pointers, it would return
to invoke clean CMM code, un-modiﬁed to hide attacker
changes. Therefore the attacker must still run separate code
that forges the EIP components of the checksum to be within
the range where he is lying that the module is loaded.
Currently our attacker requires 14 instructions to the
defender’s 5 for computing EIP SRC, EIP DST, and tran-
sitioning between blocks, as shown by comparing Table IV
to the last sub-block of Table III. The ﬁrst 3 instructions of
both sub-blocks are the same check for the exit condition.
The next 3 instructions are the attacker looking up the
original EIP SRC from a table he computes in his prolog.
This EIP SRC is pushed onto the stack as it would be by
the clean code’s “call ecx”. The next 8 instructions serve
a dual purpose. They calculate the EIP DST that would
be put in ecx in the clean code, and they also update the
currentIndex variable which helps the attacker with lookup
of the next block to jump to. While the attack may not seem
optimal, we experimented with variants to try to decrease
the attacker overhead. For instance we tried forging the
EIP DST by moving a precomputed immediate to ecx at
the beginning of each block. The performance remained
unchanged. We also tried replacing the attacker’s EIP DST
forgery with a precomputed table as is done with EIP SRC
forgery, instead of computing it with the multiply and add.
This actually increased attacker time overhead. We will be
making multiple reference attacks available with our public
reference implementation. These will include attacks that are
less efﬁcient than the attack we have used, so that other
researchers can potentially improve their effectiveness in
ways we have not considered.
F. TPM tickstamp-based timing measurement
Schellekens et al. proposed to create a hybrid system
using the existing Pioneer Protocol, but using a TPM for
trustworthy timing of the self-check function [16]. On
the face of it, this is somewhat contradictory; the whole
244
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:23 UTC from IEEE Xplore.  Restrictions apply. 
Figure 3. Visualizing the reference attack