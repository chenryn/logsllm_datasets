The security protocol
Messages are exchanged on two channels: one between
the client and the TCC; and another between the TCC and a
PAL that is executing. The Ô¨Årst one is modeled as an insecure
channel because the client and the TCC do not share any secret.
The Ô¨Årst message is therefore not secured and the last message
is signed by the TCC (i.e., attested through K-
TCC). The second
channel is instead modeled as a secure channel. We let the TCC
‚â°
and each PAL i share a fresh secret key (e.g., KT CC‚ÜîP ALi
KP ALi‚ÜîT CC) to secure their communication. The reason is
that each PAL runs (and terminates) above the TCC when
the execution environment is already isolated. This implies a
secure data/control transfer between the TCC and each PAL.
A logical secure channel is available between pairs of
PALs. The channel is protected with the key (for instance,
KP AL0‚ÜîP ALSEL) shared between the indicated PALs. The
TCC essentially forwards messages between the direct chan-
nels that it establishes with each PAL. This is modeled through
message encapsulation: a PAL Ô¨Årst secures the message using
the key that it shares with another PAL, and then it secures the
message again using the key shared with the TCC. The security
of the channel derives from our construction in Section IV-D.
Protocol VeriÔ¨Åcation. The execution chain is veriÔ¨Åed in
three steps. First, the TCC validates that P AL0 successfully
completes an execution on inputs Req, N, T ab and delivers a
response ResP AL0 securely linked to the inputs. This allows
is the correct output of
the TCC to trust
P AL0. Second, the TCC validates that P ALSEL successfully
, h(Req), N, T ab
completes an execution on inputs ResP AL0
and delivers a response ResP ALSEL securely linked to the
inputs. This lets the TCC trust that ResP ALSEL is the correct
output of P ALSEL. Third, the client validates that the TCC
successfully completes an execution on inputs Req, N, T ab
and delivers a response ResP ALSEL securely linked to the
inputs. Finally, this allows the client to trust that ResP ALSEL
is the valid output.
that ResP AL0
Scyther veriÔ¨Åed the protocol execution in about 35 minutes,
on a MacBook Pro with a 2.3GHz Intel i7 CPU.
The reader should note that
Discussion.
the successful
veriÔ¨Åcation refers to the f vT E protocol as applied to the
multi-PAL SQLite design and not to the general protocol (in
Fig. 7). However, this veriÔ¨Åcation together with the analysis
performed during the protocol description (Section IV-E) gives
us conÔ¨Ådence that our approach is correct. Verifying an actual
implementation is an orthogonal problem that could be ad-
dressed with Ironclad Apps [22].
C. Evaluation
We evaluate the multi-PAL SQLite and compare it against
the full monolithic SQLite. An always-positive speed-up was
observed with our design, which shows that for this setting it
is convenient to load and integrity-measure only the modules
that are executed out of a large code base.
Code Size. The size of the code for each PAL protected
by XMHF/TrustVisor at registration time is shown in Fig. 8.
The size of the full SQLite implementation is about 1M B,
while common operations such as select, insert, delete can
be implemented in as little as 9-15% of the code base.
speed-up W/ ATTESTATION W/O ATTESTATION
INSERT
DELETE
SELECT
TABLE I: Summary of the achieved per-operation speed-up.
2.14√ó
1.63√ó
1.73√ó
1.46√ó
1.26√ó
1.32√ó
End-to-end performance. The performance results for each
execution Ô¨Çow are displayed in Fig. 9, and summarized in
Table I. Each run is one end-to-end query execution, i.e.,
the client sends one request and receives the corresponding
reply. We have included the execution times with and without
attestation. The average of at least 10 runs is displayed with
the 95% conÔ¨Ådence interval. XMHF/TrustVisor computes an
attestation using a 2048bit RSA key and, in our testbed, it takes
around 56ms. Such overhead could be reduced by establishing
a secure session with the client (see ¬ßIV-E).
Overall, our protocol improves substantially on the pre-
vious approach. For example, insert is about 1.46√ó faster
than the traditional approach using the monolithic SQLite;
the result could be improved to become up to 2√ó faster by
considering more efÔ¨Åcient attestation mechanisms. Notice that
if the original code base gets larger, then the beneÔ¨Åt increases.
At the application level (i.e., without considering the under-
lying TCC overhead), the execution time of SQLite is similar
for queries that are executed in the monolithic P ALSQLIT E
or in the small PALs. This is expected since they execute
essentially the same code on the same state. Consequently, the
performance differences are mainly the result of the different
size of the code that is loaded in the trusted environment.
427
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:56 UTC from IEEE Xplore.  Restrictions apply. 

!



!








































""!
#""
""!""
132
134
90
106
127
96
! "
"
"
!
! 
"!

!

!! !!
75
77
71
35
47
41
 !
!
!
Fig. 9: Performance comparison between the multi-PAL and the monolithic
SQLite databases.
Finally, we measured the overhead of P AL0 in our end-
to-end experiments. P AL0 terminates its execution in about
6ms. Considering attestation, this corresponds to an overhead
of 6.6% for insert, 5.6% for delete, 6.2% for select. Without
attestation, the overhead is 17.1%, 12.7%, 14.6% respectively.
Optimized vs. non-optimized secure channels. We com-
pare our secure storage construction (Section IV-D) with the
original one of XMHF/TrustVisor (i.e., seal and unseal). Both
use symmetric cryptography, but XMHF/TrustVisor‚Äôs secure
storage requires more operations for: (i) managing TPM-like
data structures because it implements a software micro-TPM;
(ii) using AES for encryption, in order to guarantee secrecy of
sealed data; (iii) retrieving random numbers for the initializa-
tion vector to guarantee semantic security; (iv) using SHA1-
HMAC for integrity protection. Instead, our construction only
uses SHA1-HMAC, keyed with the TCC secret created at boot
time, to derive identity-dependent keys.
The results of the performance measured inside the hy-
pervisor are: 15Œºs and 16Œºs for kget rcpt and kget sndr;
and 122Œºs and 105Œºs for seal and unseal respectively. The
operations in our construction are respectively 8.13√ó and
6.56√ó faster. In our experiments, using XMHF/TrustVisor‚Äôs
native secure storage (recall from Section IV-D that both can
be used to implement secure channels) does not change the
results in Fig. 9 noticeably. The difference in overhead is at
least two orders of magnitude smaller than the end-to-end
execution time. Notice however that in large-scale services of
several interconnected PALs and long execution Ô¨Çows, such
overhead could become non-negligible.
VI. PERFORMANCE MODEL FOR CODE IDENTIFICATION
In this section we devise a performance model for code
identiÔ¨Åcation to study under what circumstances using the fvTE
protocol outperforms the traditional approach of monolithic
trusted executions. For the traditional approach, we can model
 200
)
s
m
 150
(
e
m
T
i
 100
Oth. constant-time ops
Scratch Memory Alloc
Code Isolation
Code Identification
 50
 0
36
135
528
2097
4194
8384
Code size (KB)
Fig. 10: Breakdown of the code registration costs inside XMHF/TrustVisor.
the costs for code execution as follows:
(cid:6)
T = (tis(C) + tid(C) + t1)
(cid:4)(cid:5)
(cid:3)
(cid:3)
+ (tis(in) + tid(in) + t2)
+
(cid:6)
code protection cost
(tis(out) + tid(out) + t3)
input protection cost
+
(cid:4)(cid:5)
output protection cost
attestation cost
(cid:6)
(cid:4)(cid:5)
(cid:3)
(cid:3)
+ tX(cid:3)(cid:4)(cid:5)(cid:6)
execution
cost
(cid:6)
(cid:4)(cid:5)
tatt(cid:3)(cid:4)(cid:5)(cid:6)
TCC-dependent costs
We distinguish between TCC-related costs and application-
level costs. The latter (tX) is invariant with respect to the
trusted execution protocol actually used, and only depends on
the platform where the application runs. The former instead
depends on the TCC and on the implemented protocols for
isolation (is),
identiÔ¨Åcation (id) and attestation (att) of a
code base (C) and input/output (in/out) data. As shown later,
identiÔ¨Åcation and isolation costs are linear in the size of the
argument (C, in, or out), while t1, t2, t3 are constant additional
costs‚Äîso linear costs are modeled as y = ax + bx + c.
The code protection cost thus impacts part of the overall
cost for a trusted execution. Such an impact is less noticeable
when the input/output data protection costs or the execution
cost outweigh the code protection cost. However, the focus of
this paper is on code identiÔ¨Åcation. Therefore, for the sake of
performance modeling, we put emphasis on trusted executions
where the code protection cost outweighs the other terms with
the following approximation
T ‚âà tis(C) + tid(C) + t1
of
quantiÔ¨Åcation
costs
these
in
The
experimental
XMHF/TrustVisor
is shown in Fig. 10. We built a set
of PALs each having an increasing number of NOP operations.
The times for code isolation and identiÔ¨Åcation grow with code
size. Other operations, including scratch memory allocation,
are code-independent and have constant cost (i.e., t1 overall).
We model the costs of the fvTE protocol in a similar way:
Tf vT E = (tis(E) + tid(E) + nt1) + n (tis(in) + tid(in) + t2) +
n (tis(out) + tid(out) + t3) + tatt + tX
Here E is the set of n PALs in an execution Ô¨Çow, and we
deÔ¨Åne |E| as their aggregated size. Code protection costs are
approximated as‚Äînotice the per-PAL constant costs:
Tf vT E ‚âà tis(E) + tid(E) + nt1
Our protocol is more efÔ¨Åcient than the previous approach
when protecting the execution Ô¨Çow is less expensive than
protecting the whole code base. This can be deÔ¨Åned as:
(cid:2)
eff iciency
ratio
T
Tf vT E
positive, if > 1
negative, if ‚â§ 1
A positive efÔ¨Åciency ratio indicates that it is worth having
428
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:20:56 UTC from IEEE Xplore.  Restrictions apply. 
)
s
e
t
y
b