reconstruct the multi-ballots occur with non-negligible proba-
bility, as illustrated by the following example:
is not able to reconstruct
It may happen (with non-negligible probability, depending
only on the probability distribution (cid:3)p and the number of voters)
that each voter marks both positions on the ﬁrst simple ballot,
no position on the second one, exactly one position on the
third ballot, and then take the last ballot as her receipt, as
shown in Figure 1, (b) for the case that the voter votes for
B. In this case, a receipt directly indicates the choice of the
voter, which completely breaks privacy.
In what follows, we denote by (x
x, o
o) etc. multi-
ballots ﬁlled out by voters, where the underlined simple ballots
(x
o and o
x, respectively) represent those simple ballots picked as
receipts by the voters; we refer to these objects as patterns. A
pattern does not ﬁx the order of simple ballots, e.g., (o
x, o
o)
is considered to be the same pattern as (x
o), (o
o, x
x, o
x, o
x, x
x, x
x, x
o).
IV. THE VAV VOTING SCHEME
In this section, we describe the VAV voting scheme [25]. In
VAV, a voter is given a multi-ballot consisting of three simple
ballots. On every simple ballot the candidates are printed in
the same ﬁxed order. On the top of one of those simple
ballots the letter A is printed; on the top of the remaining
two simple ballots the letter V is printed. In the secrecy of
a voting booth, the voter is supposed to ﬁll out her multi-
ballot
in the following way: (S1) She marks the position
next to the candidate of her choice on one of the V-ballots
and then (S2) she marks the position next to some randomly
chosen candidate on the two remaining simple ballots (one V-
and one A-ballot). Figure 2 shows all three ways of ﬁlling
out the multi-ballot for candidate 1 in an election with three
candidates. After this, she feeds all three simple ballots to
a voting machine (some kind of scanner) and indicates the
simple ballot she wants to get as a receipt. The machine checks
540
(a)
(b)
(c)
V
1 : x
2 : o
3 : o
V
1 : x
2 : o
3 : o
V
1 : x
2 : o
3 : o
A
1 : x
2 : o
3 : o
A
1 : o
2 : x
3 : o
A
1 : o
2 : o
3 : x
V
1 : x
2 : o
3 : o
V
1 : o
2 : x
3 : o
V
1 : o
2 : o
3 : x
Fig. 2. Three ways of voting for the candidate 1 in the VAV protocol, where
x represents a marked position and o represents an unmarked position.
the well-formedness of the multi-ballot, prints secretly random
numbers on each simple ballot, where the length of these
numbers is the length of the security parameter and numbers
on different simple ballots are chosen independently, and gives
the voter a copy of the chosen simple ballot, with the random
number printed on it. Note that the voter does not get to see
the random numbers of the remaining two simple ballots. The
scanner keeps all simple ballots (now separated) in a ballot
box.
In the tallying phase,
the voting machine posts on the
bulletin board (electronic copies of) all the cast simple ballots
in a random order. From the ballots shown on the bulletin
board the result can easily be computed: All A-ballots and
the corresponding V-ballots (i.e. V-ballots marked at the same
position) are removed. From the remaining V-ballots the
number of votes for each candidate can directly be read off.
Intuitively, as in the case of ThreeBallot, the system is
coercion-resistant (at least to some extent), as every simple
ballot that a voter can take as a receipt can be part of a multi-
ballot that forms a valid vote for any candidate. Similarly
to ThreeBallot, VAV is supposed to provide (some level of)
veriﬁability as it should be risky for any party to remove or
alter simple ballots in order to manipulate the result.
In the description of VAV in [25] it is not speciﬁed how
exactly a voter chooses the receipt. This, however, can heavily
affect the properties we study in this paper. We therefore
investigate two variants of this protocol.
Simple variant.
In the simplest case, a voter could choose
one of her three simple ballots with uniform probability as
her receipt. We will call this the simple variant of VAV. For
this variant, however, the receipt is not independent of the
candidate of her choice, which, as we will see, has a signiﬁcant
negative effect on privacy and coercion-resistance. This is why
we consider also another variant, where privacy is enhanced.
Privacy enhanced variant.
In this variant, a voter chooses
one of the two simple ballots not used in step (S1), that is,
one of those ballots where the random candidate has been
marked. By this, the receipt is stochastically independent of
the candidate the voter votes for.
While the privacy enhanced variant signiﬁcantly improves the
level of privacy and coercion-resistance, it decreases the level
of veriﬁability: The voting machine is often able to determine
one simple ballot in a multi-ballot that was certainly not taken
as a receipt and consequently it can change this simple ballot
without being detected. For instance, if an honest voter submits
a multi-ballot as shown in Figure 2, (b) or (c), the machine
knows that the left-most ballot cannot be chosen as a receipt.
However, as we will see, the VAV voting scheme suffers
from the same kind of attack the ThreeBallot protocol does,
independently of how the receipts are chosen. Therefore, the
level of veriﬁability is, in any case, very low.
In what follows, we will use, analogously to the case of
ThreeBallot, the notion of a pattern which speciﬁes how a
multi-ballot is ﬁlled out and which simple ballot is taken as a
receipt.
V. VERIFIABILITY
In this section, we ﬁrst recall the deﬁnition of veriﬁability
from [19], where, however, we use a slightly simpliﬁed
deﬁnition which is sufﬁcient for our setting. Next, we present
our analysis of veriﬁability for ThreeBallot and VAV, including
the mentioned attacks. We then conclude with remarks on
the inadequacy of the notions of individual and universal
veriﬁability demonstrated by our attacks.
A. Deﬁnition of Veriﬁability
More formally, let P
The deﬁnition of veriﬁability in [19] assumes a veriﬁer,
also called a judge, who can be an honest regular protocol
participant or an honest external observer. Now, informally
speaking, veriﬁability says that
if in a run of the voting
protocol an important goal is not achieved — typically, the
published result of the election is not correct, i.e., does not
correspond to the votes actually cast by eligible voters —, then
the veriﬁer does not accept the run/the election. Conversely,
if in a run certain parties which are supposed to make sure
that the goal is achieved, such as (a subset of) the voting
authorities, behave honestly, then the veriﬁer accepts the run.
∗ = P(AH ,q,VH ,k,(cid:3)p) be a protocol
∗, for each protocol participant a in P
∗,
instantiation. Given P
we consider the set Π(a) of all programs a may run. This
set is deﬁned as follows: If a is assumed to be honest (i.e.
a ∈ AH ∪VH), then Π(a) = { ˆπa}, i.e., Π(a) consists only of the
honest program of a as speciﬁed by the protocol. Otherwise,
if a is not assumed to be honest, then Π(a) consists of all
processes limited only by a’s network interface, which is the
network interface that ˆπa has. Note that in any case ˆπa ∈ Π(a).
Let Σ = {b1, . . . ,bt} be the set of all protocol participants of
∗. Then, a process induced by P
∗, also called an instance, is
P
∈ Π(bi).
(cid:5) . . . (cid:5) πbt
a process of the form π = (πb1
Such a process is called an instance with honest B ⊆ Σ if
= ˆπbi for all bi ∈ B. A run of P
∗ is a run of some instance
πbi
∗. Such a run is called a run with honest B if it is a run
of P
∗ with honest B.
of an instance of P
), where πbi
The deﬁnition of veriﬁability is parameterized by a goal
∗. In
γ, which, formally, is a set of runs of instances of P
541
the context of voting, γ will typically contain all those runs
in which the published result of the election is correct, i.e.,
corresponds to the votes actually cast by eligible voters.
ThreeBallot. We ﬁrst describe the attack on the veriﬁability
of ThreeBallot and then precisely state the level of veriﬁability
of this system.
For an instance π of P
We say that a party a, playing the role of a veriﬁer, accepts
a run, if in this run a sends the message accept on some
designated channel decisiona. Intuitively, a accepts a run if
she believes that the goal γ has been achieved in this run.
∗, by Pr[π(1(cid:2)) (cid:9)→ (a : accept)] we
denote the probability that π, running with security parameter
1(cid:2), produces a run which is accepted by a. Similarly, by
Pr[π(1(cid:2)) (cid:9)→ ¬γ, (a : accept)] we denote the probability that π,
running with security parameter 1(cid:2), produces a run in which
the goal has not been achieved, i.e., a run that does not belong
to γ, but which nevertheless was accepted by a.
∗ = P(AH ,q,VH ,k,(cid:3)p)
Deﬁnition 1 ([19], simpliﬁed2). Let P
be a protocol instantiation and let Σ be the set of protocol
. Let δ ∈ [0,1], B ⊆ Σ, a ∈ AH ∪VH (playing
∗
participants in P
∗
the role of the veriﬁer), and γ be a goal of P
. Then, the goal
∗ by B and δ -veriﬁable by a if, for every
γ is guaranteed in P
instance π of P
(i) If π is an instance with honest B, then Pr[π(1(cid:2)) (cid:9)→ (a :
accept)] is overwhelming as a function of the security
parameter.
(ii) Pr[π(1(cid:2)) (cid:9)→ ¬γ, (a : accept)] is δ -bounded as a function
, the following conditions are satisﬁed:
∗
of the security parameter.
Condition (ii) guarantees that the probability that a accepts
a run even though the goal has not been achieved (e.g., the
published result of the election is incorrect) is “small”, i.e.,
bounded by δ . Condition (i) says that the protocol is sound
w.r.t. a set B of agents in the following sense: If the agents in B
are honest, then a accepts runs with overwhelming probability,
which by Condition (ii) implies that in those runs the goal
has indeed been achieved. Typically, the set B includes (a
subset of) voting authorities/machines, i.e., those agents that
sufﬁce to guarantee that the goal is achieved. Note that without
Condition (i) every protocol in which no runs are accepted by
the veriﬁer would be veriﬁable. Also note that requiring the
probability in (ii) to be negligible, i.e., requiring δ = 0, while
highly desirable, would be too strong for many reasonable
protocols. This is due to the fact that checks (by authorities
and voters) are often imperfect and partial, as illustrated in
subsequent sections. The value of δ determines the level of
veriﬁability a protocol provides.
B. Veriﬁability of ThreeBallot and VAV
In this section, we study veriﬁability of ThreeBallot and
VAV. We precisely measure the level of veriﬁability of these
systems and show that, unlike commonly believed,
these
systems do not provide any reasonable level of veriﬁability.
We start with the analysis of ThreeBallot.
2Deﬁnition 1 is a speciﬁc instance of the general deﬁnition presented in
[19]. In [19], instead of the set B, we use a more general formalism to specify
sets of protocol participants, namely positive boolean formulas.
The Attack on the Veriﬁability of ThreeBallot. As mentioned in
Section III, in the literature the reasoning for the veriﬁability
of ThreeBallot has so far been that, if voters check whether
their receipt (a simple ballot) appears on the bulletin board, it
should be risky for any party to remove or alter simple ballots
since the probability that the modiﬁcation of k simple ballots
goes undetected is merely ( 2
)k. However, the following attack
3
shows that this reasoning is ﬂawed.
Our attack assumes that
there are dishonest voters and
that one of the voting authorities, the voting machine or the
bulletin board, is dishonest and collaborates with the dishonest
voters. It is clearly realistic to assume dishonest voters and
a dishonest voting authorities; defending against malicious
authorities is the main point of veriﬁability. In what follows,
we ﬁrst consider the case of an election with two candidates
and assume that the bulletin board is dishonest.
As already mentioned in the introduction,
the effect of
our attack is that m dishonest voters, collaborating with the
dishonest bulletin board, can effectively vote for candidate B
and, additionally, turn m votes of honest voters voting for
A into votes for B. For instance, with 10 dishonest voters
out of 101 voters, candidate B can win the election, even if
60 honest voters vote for A and only 31 honest voters vote
for B. This goes unnoticed, provided no post-election audit
based on paper ballots is performed, even if all honest voters
check whether their receipts appear on the bulletin board and
even if they check that the published result corresponds to
the ballots shown on the bulletin board. Note that if no voter
complains, then no post-election audit may be carried out.
Moreover, for the post-election audit to be effective, additional
trust assumptions are required.
o, o
x, o
The attack works as follows. Let us assume that there exists
an honest voter who votes for candidate A and that the bulletin
board, collaborating with some dishonest voter, wants to swap
such a vote. To do so, the dishonest voter casts (x
x) and
sends the serial number on her receipt to the bulletin board.
Then, the bulletin board replaces the simple ballot with this
serial number by o
x. The result of this manipulation is as if the
dishonest voter had cast (o
x). The bulletin board remains
consistent as these three simple ballots together with the multi-
ballot submitted by the honest voter voting for A (which must
be either (x
x)) result in two valid votes for
candidate B. Note that the multi-ballot of the honest voter
remains unchanged, and hence, no voter or external observer
will suspect any fraud.