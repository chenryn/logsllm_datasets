1. There is a single heaviest sub-tree, thus, in T ′ this subtree will
have an additional block, while the other subtree won’t change,
and the heaviest subtree will continue to be the heaviest.
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada7412. There is more than one subtree with the max weight, so h
chooses an arbitrary one to go down. Thus in T ′, the subtree h
chooses will have one more block while all other subtrees won’t
change, and therefore in T ′ this subtree will be the single heaviest
subtree.
□
Again, for the adversary to be able to break consensus in GHOST,
they must at the very least be able to break all convergence op-
portunities. Since the convergence opportunities in GHOST are
the same as that of Nakamoto’s protocol, we can use our Markov
model from section 4.3 to also count the number of convergence
opportunities an adversary would need to match in order to break
consensus in GHOST. In the previous section we also proved that
subtree expiry in GHOST is also satisfied under the same bounds as
Nakamoto’s protocol. Thus, we can extend the consistency theorem
of Nakamoto’s protocol to GHOST.
Corollary 6.4. GHOST satisfies consistency under the same bounds
of theorem 4.4.
6.4 GHOST Consensus Attacks
The original GHOST paper analyzes GHOST under the 50% attack
introduced by Nakamoto [16] where the adversary silently mines
their own chain in an attempt to overtake the mainchain (i.e. the
honest chain). In §4.4 we saw that with Nakamoto’s protocol, as
block size increases (i.e. ∆ increases) or block time decreases (i.e.
c decreases), more honest forks take place meaning honest nodes
divide their computing power among more blocks while the adver-
sary continues to mine efficiently and can therefore overtake the
honest mainchain with less than 50% of the computational power of
the network. In contrast, with this attack, GHOST remains resilient
for any value of ∆ or c since all honest nodes contribute to the
overall weight of the honest subtree. We now present a new attack
on GHOST, the balance attack, in which the adversary leverages
honest computing power to maintain two subtrees of equal weight.
The point of our attack is for the adversary to maintain a fork in
the block tree persisting for as long as they can, thereby delaying
consensus and the time to confirm that a transaction has made
it onto the main chain. The adversary does this by splitting the
honest computing power among the two subtrees and mining on
both subtrees and using their blocks to balance the two subtrees
whenever they become uneven. The adversary’s strategy begins
once a fork takes place (i.e. two blocks are mined within ∆ of each
other). We define the attack in Algorithm 1.
We model this attack with the Markov chain in figure 10. In
the model, we have 3 layers of states: the Parity, delta left, and
delta right layers. Each parity state P (l, r ) represent the state where
both subtrees are of equal length and the adversary’s banks have
amounts l and r. Each delta left state ∆lef t (l, r ) represents the state
where the left subtree is up by one honest block and there is a
delta race until the adversary has to reveal the honest block to all
players. In this state, either an honest node on the right subtree
wins a block in the delta race, the adversary uses a right bank to
rebalance the subtree, or an honest player on the left wins again
and the adversary uses bank to pay off the last left honest block
and begins another delta race. The delta right states, ∆riдht (l, r ),
are equivalent to the delta left states, but with the right subtree
Algorithm 1 GHOST_attack(n, ρ, c, ∆)
1: Once a fork takes place (i.e. two blocks (adversarial or honest)
are created within ∆ rounds) The adversary sends one block to
half the honest nodes, and the other block to the other half.
Adversary mines on the subtree with least bank
if honest node mines a block then
∆ rounds count down begins
if honest node mines on the opposite subtree then
if no honest miner mines in ∆ rounds then
if adversary had bank to use then
adversary uses bank to rebalance the fork
fork is rebalanced
2: while the fork persists do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
else adversary loses
if the side that is winning mines again then
use bank to balance the previous win
∆ counter restarts
if there is no ∆ counter then
adversary mines on side with least bank
dominating. Figure 10 represents a sample of states reachable from
P (l, r ).3
In this model, let a be the adversarial mining probability, where
al , ar denotes which subtree the adversary was mining on, and
al ∆, ar ∆ are the probabilities the adversary mines within ∆ steps.
Let hl and hr be the honest mining probabilities on either subtree,
and hl ∆, hr ∆ the probabilities an honest player mines a block within
∆ rounds on a given subtree. Lastly, let ∆free be the probability that
∆ rounds pass without anyone (adversary or honest player) mining
a block. Every transition crossing a “∆” edge (i.e hl ∆, hr ∆, al ∆, ar ∆
and ∆free) causes an increase of the fork length by one block. Thus
to determine the probability of reaching a fork of a specific length
k, we calculate the probability we cross k edges before reaching
a state where the attack fails. We say the attack fails when the
adversary needs to balance one side of the fork but does not have
any stored bank on that side, i.e. a state where l = −1 or r = −1.
We now calculate the probability that the attack lasts for k blocks.
We introduce the following variables:
hr =hl = 0.5µ
ar = al = ρ
(hr ∆ + ar ∆) = (hl ∆ + al ∆) = (1 − p)∆ (0.5µ + ρ)
∆free = (1 − p)∆
Let Sl,r (k ) be the probability that starting from state Sl,r , we visit
a ∆ edge ≥ k times before the attack fails, i.e. before we visit a state
where l or r equals −1. We get the following probabilities:
∆
Pl,r (k ) = 1
(k ) = 1
riдht
l,r
(k ) = 1
lef t
l,r
Sl,r = 0
∆
for
for
for
for
l ≥ k,
l ≥ k,
l − 1 ≥ k,
l = −1
r ≥ k
r − 1 ≥ k
r ≥ k
r = −1
or
3Variations on the attack can handle uncle limits, where we limit the bank the adversary
can use to be within u blocks of the current block.
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada742hr ∆
∆free
al
ar
left
∆
(l, r )
hl ∆, al ∆
hr
al
P (l, r )
P (l + 1, r )
y
t
i
l
i
b
a
b
o
r
P
10−1
10−2
10−3
10−4
2
49% Adv
25% Adv
c=1
c=4
c= 60
4
6
8
10
12
14
Length of fork
left
∆
(l − 1, r )
P (l − 1, r )
P (l, r − 1)
right
∆
(l, r − 1)
∆free
hl
hr ∆, ar ∆
right
∆
(l, r )
hl ∆
Figure 10: GHOST attack markov chain snapshot.
∆
riдht
l,r
∆
lef t
l,r
(k ) = (hr ∆ + ar ∆)Pl,r (k − 1) + hl ∆∆
riдht
l,r−1 (k − 1)
+ ∆freePl,r−1 (k − 1)
(k ) = (hl ∆ + al ∆)Pl,r (k − 1) + hr ∆∆
riдht
l−1,r (k − 1)
+ ∆freePl−1,r (k − 1)
(k ) + hl ∆
Pl,r (k ) = hr ∆
Pl,r (k ) = hr ∆
(k ) + hl ∆
riдht
l,r
riдht
l,r
lef t
l,r
lef t
l,r
(k ) + al Pl +1,r (k )
r ≥ l
(k ) + ar Pl,r +1 (k )
r < l
We are interested in P0,0 (k ), the probability of a fork of at least k.
We can then use this to calculate for a certain protocol parameter,
how many blocks should you wait for confirmation of a transaction,
for a given confidence. In Figure 11 we plot P0,0(k ) for c = 1, 4, 60
with ρ = .49, .25. When compared with the plots for Nakamoto’s
protocol, GHOST is more resilient to this attack than Nakamoto’s
protocol is to the delay attack. However, for low c, forks can last
for more than 10 blocks with non-negligible probabilities.
7 LIMITATIONS AND FUTURE WORK
We make conservative choices in our analysis. For example, for
GHOST we define the minimum subtree growth as the same as the
minimum chain growth of Nakamoto’s protocol. This ignores the
case when honest players all work on the same subtree and thus
all honest blocks contribute to the growth of the weight or when
multiple blocks are mined in ∆ rounds which contribute to a single
subtree. These cases suggest that a tighter bound of GHOST’s sub-
tree weight growth is possible. Similarly in Cliquechain’s growth,
we assumed honest players were mining sequentially and not tak-
ing advantage of the parallel work possible with the protocol. The
delay attacks for Cliquechain give a better lower bound for the
growth of any honest chain; we leave the generalization of our
Markov model to any n-chain Cliquechain as future work.
Figure 11: This graph depicts the probability for an execu-
tion of GHOST to sustain a fork of a particular length for
various values of c and ρ. The three regions correspond to
this probability at settings of c = 1, c = 4, c = 60 where the
hardness for the proof of work is set such that a block is
expected to be mined in c∆ attempts. In each case, the top
solid line of a shaded region represents the probability for
a 49% adversary, whereas the bottom dashed line represents
the same for a 25% adversary.
It has been our experience that the simplest or most intuitive
model for an attack which we consider may not be solvable for all
analyses we are interested in. In Nakamoto’s protocol, the simple
one state model of the attack yields an asymptotic upper bound for
the effectiveness of the attack, but we need a more complex Markov
model in order to analyze the attack over short time periods. With
the Cliquechain attacks, the Markov models become more complex
as chains are added. We used our Markov models to provide an
asymptotic upper bound for the attack, but it is not yet clear what
model we need to perform a short-term analysis of the attack like
we do for Nakamoto’s protocol. With GHOST we see the opposite.
We have derived a recurrence relation for short-term fork length
distributions under the balance attack, but obtaining asymptotic
bounds under the attack is still open. We are pursuing ways to unify
our techniques and make our Markov-based method for analyzing
blockchain consistency more comprehensive.
ACKNOWLEDGMENTS
We thank the anonymous reviewers for their helpful comments.
This research was supported in part by NSF grants CCF-1422715,
CCF-1535929, TWC-1646671, TWC-1664445, CNS-1616234 and CNS-
1409191.
REFERENCES
[1] Maria Apostolaki, Aviv Zohar, and Laurent Vanbever. 2016. Hijacking Bitcoin:
Routing Attacks on Cryptocurrencies. arXiv preprint arXiv:1605.07524 (2016).
[2] Jing Chen and Silvio Micali. 2016. Algorand. https://arxiv.org/abs/1607.01341.
[3] H. Chernoff. 1952. A Measure of the Asymptotic Efficiency for Tests of a Hy-
pothesis Based on the Sum of Observations. Annals of Mathematical Statistics 23
(1952), 493–509.
[4] Kai-Min Chung, Henry Lam, Zhenming Liu, and Michael Mitzenmacher. 2012.
Chernoff-Hoeffding Bounds for Markov Chains: Generalized and Simplified. In
29th International Symposium on Theoretical Aspects of Computer Science (STACS
2012). 124–135.
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada743[5] Christian Decker and Roger Wattenhofer. 2013. Information propagation in the
bitcoin network. In Peer-to-Peer Computing (P2P), 2013 IEEE Thirteenth Interna-
tional Conference on. IEEE, 1–10.
[6] Ittay Eyal and Emin Gün Sirer. 2014. Majority is not enough: Bitcoin mining is
vulnerable. In International conference on financial cryptography and data security.
Springer, 436–454.
[7] Juan A Garay, Aggelos Kiayias, and Nikos Leonardos. 2015. The Bitcoin Backbone
Protocol: Analysis and Applications.. In EUROCRYPT (2). 281–310.
[8] Juan A. Garay, Aggelos Kiayias, and Nikos Leonardos. 2017. The Bitcoin Backbone
Protocol with Chains of Variable Difficulty. In Advances in Cryptology - CRYPTO
2017 - 37th Annual International Cryptology Conference, Santa Barbara, CA, USA,
August 20-24, 2017, Proceedings, Part I. 291–323.
[9] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich.
2017. Algorand: Scaling Byzantine Agreements for Cryptocurrencies. In SOSP’17.
[10] W. Hoeffding. 1956. On the Distribution of the Number of Successes in Indepen-
dent Trials. Annals of Mathematical Statistics 27 (1956), 713–721.
Blockchain Protocols. IACR Cryptology ePrint Archive 2015 (2015), 1019.
[12] Aggelos Kiayias and Giorgos Panagiotakos. 2016. On Trees, Chains and Fast
Transactions in the Blockchain. IACR Cryptology ePrint Archive 2016 (2016), 545.
[13] Yoad Lewenberg, Yonatan Sompolinsky, and Aviv Zohar. 2015. Inclusive block
chain protocols. In International Conference on Financial Cryptography and Data
[11] Aggelos Kiayias and Giorgos Panagiotakos. 2015. Speed-Security Tradeoffs in
[14] Quaintance Martino and Popejoy. 2018. Chainweb: A Proof-of-Work Parallel-
Security. Springer, 528–547.
Chain Architecture for Massive Throughput.
[15] Michael Mitzenmacher and Eli Upfal. 2005. Probability and Computing: Random-
ized Algorithms and Probabilistic Analysis. Cambridge University Press, New
York, NY, USA.
[16] Satoshi Nakamoto. 2008. Bitcoin: A peer-to-peer electronic cash system.
[17] Rafael Pass, Lior Seeman, and Abhi Shelat. 2017. Analysis of the blockchain
protocol in asynchronous networks. In Annual International Conference on the
Theory and Applications of Cryptographic Techniques. Springer, 643–673.
[18] Rafael Pass and Elaine Shi. 2017. The Sleepy Model of Consensus. In ASI-
ACRYPT’2017.
[19] Yonatan Sompolinsky, Yoad Lewenberg, and Aviv Zohar. 2016. SPECTRE: A
Fast and Scalable Cryptocurrency Protocol. IACR Cryptology ePrint Archive 2016
(2016), 1159.
[20] Yonatan Sompolinsky and Aviv Zohar. 2015. Secure high-rate transaction pro-
cessing in bitcoin. In International Conference on Financial Cryptography and
Data Security. Springer, 507–527.
[21] Yonatan Sompolinsky and Aviv Zohar. 2018. PHANTOM: A Scalable BlockDAG
Protocol. Cryptology ePrint Archive, Report 2018/104. https://eprint.iacr.org/
2018/104.
Session 4C: Blockchain 1CCS’18, October 15-19, 2018, Toronto, ON, Canada744