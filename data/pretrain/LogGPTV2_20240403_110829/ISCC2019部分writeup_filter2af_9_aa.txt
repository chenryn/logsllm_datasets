# ISCC2019部分writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
##
## Misc
###  1\. 隐藏的信息
下载压缩包，解压缩拿到一个文本文件，打开发现是一堆八进制，写个脚本来ASCII值转字符串，转完之后发现是一个base64加密，将一开始的脚本修改一下，添加base64转码功能，再次运行拿到flag
    import binascii
    import base64
    x="0126 062 0126 0163 0142 0103 0102 0153 0142 062 065 0154 0111 0121 0157 0113 0111 0105 0132 0163 0131 0127 0143 " 
      "066 0111 0105 0154 0124 0121 060 0116 067 0124 0152 0102 0146 0115 0107 065 0154 0130 062 0116 0150 0142 0154 071 " 
      "0172 0144 0104 0102 0167 0130 063 0153 0167 0144 0130 060 0113 "
    x = x.split()
    z = ''
    for i in range(len(x)):
        y = str(hex(int(x[i], 8)))[2:]
        # print(y)
        a = str(binascii.a2b_hex(y))#[2:3]
        z += str(a)
    # print(z)
    z = base64.b64decode(z)
    print(z)
###  2\. 最危险的地方就是最安全的地方
题目文件解压后是一张JPG图片，盲猜带有压缩包，后缀改为zip解压缩，拿到50张二维码，发现最后一张的图片文件格式和其它49张不一样，记事本打开，开头就看到flag
###  3\. 解密成绩单
题目文件解压后拿到一个exe文件，用各种misc做题方法尝试后均无果，猜测其实是简单的逆向题，用ida打开：  
看到检查输入的函数，跟入直接看到要求的用户名和密码，直接复制粘贴到程序输入框内点击ok即可拿到flag
###  4\. Welcome
改后缀解压得到.txt文件，打开发现由“蓅烺计划 洮蓠朩暒”和“户囗
苌条”组成的编码，将前者用0替换，后者用1替换，得到011001100110110001100001011001110111101101001001010100110100001101000011010111110101011101000101010011000100001101001111010011010100010101111101  
二进制转到字符串即可得到flag  
###  5\. 倒立屋
lsb加密，使用stegsolve三色道分析神器查看lsb加密内容，然后将看到的字符，顺序反过来，即为flag ，是不是很坑  
###  6.无法运行的exe
解压题目后拿到exe文件，发现无法运行，winhex查看发现是个其实文本文件，文本内容像是图片base64转码，用在线base64转图片工具发现无法转图片，自己写个py脚本实现，如下：(将原文件名重命名为1.txt)
    import base64
    a=open('1.txt','rb').read()
    d=base64.b64decode(a)
    filename='2.png'
    with open(filename,'w') as file_project:
        file_project.write(d)
打开2.txt查看发现是png文件，改为png后缀打开，发现报错，百度png文件格式，发现头部数据被修改了，改回来：  
这是我们转码后拿到的文件开头hex值，png文件开头应为：89504E470D0A1A0A  
修复文件头后打开是二维码，用QR扫码工具扫描拿到flag
###  7\. High起来！
解压缩拿到一个二维码图片，扫码后拿到一串当铺密码，在线工具解码拿到一串数字。  
个人觉得这不是flag，提交了一下尝试，果然不是，发现二维码图片大小异常，比普通二维码大了，猜测包含其他文件，binwalk发现压缩包，解压后是一段mp3音频，用mp3隐写工具解密，推测一开始拿到的数字是密钥，果然解密出来文本，是html编码，在线工具解码拿到flag
###  8\. 他们能在一起吗？
首先得到一个二维码  
UEFTUyU3QjBLX0lfTDBWM19ZMHUlMjElN0Q=
BASE64解密为：PASS{0K_I_L0V3_Y0u!}
从二维码分离出一个加密了的压缩包，用刚才得到的密钥解密的到含有flag的.txt文件  
得到flag：ISCC{S0rrY_W3_4R3_Ju5T_Fr1END}
###  9\. Keyes’ secret
仔细看一下文件开头的字母，结合提示，发现就是一个简单的键盘加密（画键盘），而且似乎每一个字母的加密方式都一样，用文本的替换功能即可获取原文。  
例：  
###  10\. Aesop’s secret
动态图的每一帧只显示图片的一部分，用stegsolve神器的”Frame
Browser”将其每一帧保存出来，用ps合成一下，或者用stegsolve的”Image
Combiner”功能里的”add”直接将图片内容合到一起，发现图片内容是”ISCC”  
再用stegsolve的 “File Format” 查看图片信息的时候发现其所转换的ascii码的内容是密文，  
推测ISCC是密钥，通过两次AES解密（[https://www.bejson.com/enc/aesdes/）](https://www.bejson.com/enc/aesdes/%EF%BC%89)  
拿到flag
###  11\. 碎纸机
用binwalk检查下给出的这张jpg图片，发现有个压缩包，解压缩拿到10张拼图文件，提示说欧鹏曦文同学可以恢复其原貌，但要给它真正有用的东西，用winhex查看发现每张拼图文件结尾都多了一串等长的hex值，将其提取出来。根据谐音推测欧鹏曦文指的是opencv，是一种计算机视觉库，处理图形用的。应该是要把多出来的hex值转为图片，多出来的十串hex值长度都为2500，刚好是50*50，但是百度了好久也没有找到opencv创建图形文件后如何处理每个坐标处像素的教程，于是用了image库，脚本如下：
    # coding=utf-8
    from PIL import Image
    import matplotlib.pyplot as plt
    X=50
    Y=500
    pic = Image.new("RGB",(X,Y))
    str = open('0.txt').read() #我将十段hex值都写进一个txt文档了，方便处理
    i=0
    for y in range (0,Y):
        for x in range (0,X):
            if(str[i] =='1'):
                pic.putpixel([x,y],(0,0,0))
            else:
                pic.putpixel([x,y],(255,255,255))
            i = i+1
    pic.show()
    pic.save("flag.png")
    #                       _oo0oo_       虽  但  我
    #                      o8888888o      然  没  的
    #                      88" . "88      我  这  脚
    #                      ( -_- )        并  段  本
    #                      0  =  /0      不  注  跑
    #                    ___/`---'___    迷  释  不
    #                  .' \     // '.    信  时  动
    #                 / \  :  //        ，  ，  。
    #                / _ -:- -                  。
    #                   \  -  ///              。
    #                _  ''---/''  _/ 
    #                 .-__  '-'  ___/-. /
    #             ___'. .'  /--.--  `. .'___
    #          ."" '_/___.' >' "".
    #           :  `- `.;` _ /`;.`/ - ` :  
    #            `_.   _ __ /__ _/   .-` /  /
    #     =====`-.____`.___ _____/___.-`___.-'=====
    #                       `=---='
    #
    #
    #     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    #
    #               佛祖保佑         永无BUG
图片内容被ps过，不过不影响查看flag
## Web
###  1\. web1
     32 && $value[$i]  2333) {
            echo 'Hello '.$username.'!', '', PHP_EOL;
            echo $flag, '';
        }
    }
    highlight_file(__FILE__);
发现关键的几个地方  
1.存在chr函数  
2.存在intval函数  
由此，我们需要构造不同的value[i]，这里通过if过滤掉了username字符中出现的ascll码，但
是，chr函数在处理大于256的ascll时会对256进行取余，所以我们在原字符的ascll码上＋256即可。
intval由于存在弱类型转换的问题，在转换时的值会小1，轻松绕过判断，最终构造payload：
    http: //39.100.83.188:8001/?value[0]=375&value[1]=307&value[2]=364&value[3]=355&value[4]=304&value[5]=365&value[6]=357&value[7]=351&value[8]=340&value[9]=367&value[10]=351&value[11]=329&value[12]=339&value[13]=323&value[14]=323&value[15]=306&value[16]=304&value[17]=305&value[18]=313&password=0x91d
###  2\. web2
提示3位数密码，不用说肯定是爆破。但是存在于验证码，我们先抓包  
我们去爆破却失败了，这是为什么呢？  
关键就在于这个cookie  
不改变cookie，得到的结果永远都是一样的，所以这里我们直接删除cookie重新爆破。  
看到996返回length不同，尝试用996去登录，得到Flag。
###  3\. web3
二次注入，首先注册用户admin’—xx（xx代表任何字符，这里#好像被过滤了）,登陆之后修改密码,这里直接修改了admin的密码，再以修改的密码以admin为username登陆，拿到flag
###  4\. web4
进来审计源码
    "); 
            } 
            echo $flag; 
        } 
    }else{ 
        show_source(__FILE__); 
    }?>
审计发现，我们必须提供两个参数action和key，并且使用sha256进行哈希处理后必须等于代码顶部的哈希值。  
首先试一下解密hashed_key的值，但是很不幸并没有解密出来。  
但是我们看到出现parse_str()函数，变量覆盖的典型代表函数，所以我恶魔你直接变量覆盖掉hashed_key  
使用大神的脚本跑出hash的值为9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08  
构造payload：
    action=auth&key=test&hashed_key=9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08
###  5\. web5
提示 看来你并不是Union.373组织成员，请勿入内！  
改u-a头  
后：请输入用户名  
注入，过滤了圆括号，注释符，from等等  
payload ：order by 排序盲注  
###  6.web6
这是一个构造jwt头攻击的题目。  
进入题目后查看源代码，在common.js文件里找到关键信息：
    function getpubkey()
    {
        /* 
        get the pubkey for test
        /pubkey/{md5(username+password)}
        */
    }
很明显是个公钥获取提示，将自己注册的用户名和密码合在一起取md5值,以此访问公钥文件。  
拿到公钥
    {"pubkey":"-----BEGIN PUBLIC KEY-----nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMRTzM9ujkHmh42aXG0aHZk/PKnomh6laVF+c3+D+klIjXglj7+/wxnztnhyOZpYxdtk7FfpHa3Xh4Pkpd5VivwOu1hnKk3XQYZeMHov4kW0yuS+5RpFV1Q2gm/NWGY52EaQmpCNFQbGNigZhu95R2OoMtucnIC+LX+9V/mpyKe9R3wIDAQABn-----END PUBLIC KEY-----","result":true}