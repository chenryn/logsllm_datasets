6
0
Correlation
4
3
4
0
TABLE III: logical interferences in distributed Firewal-
l/IPS conﬁgurations/PSI policy abstractions.
Table III shows the number of interferences of each type
between conﬁguration rules. As the table suggests, logical
interference occurs in the PIX, SRC and iptable conﬁgurations,
while it is absent in PSI. The key reason is that the distributed
Firewall/IPS conﬁgurations follow an If-Match-Then-Action
list where preceding rules can interference with the rules
after; while PSI provides isolated states and intents for non-
overlapping trafﬁc.
Performance Interference: Next, we evaluate the defense
system’s ability to reduce performance interference. To do
so, we generate one elephant trafﬁc ﬂow and several mice
ﬂows in the network when different security functionalities
are deployed, and measure the damage induced by the elephant
ﬂow (in terms of packet drops).
We install both PSI and distributed Firewall/IPS on the
three topologies in Table I. The security functionalities we
run include deep packet inspection (DPI), anti-virus (AV) and
application control (AppCtrl). We generate 8 pcap ﬁles by
accessing a server in our testbed that runs ssh, ftp, smtp and
http service; each pcap ﬁle records 24 hours’ trafﬁc. The pcap
ﬁles contains 9% of SSH (secure shell), 12% of FTP (ﬁle
transfer), 19% of SMTP (email) and 60% of HTTP trafﬁc (by
trafﬁc volume). Then, we replay the pcap ﬁles on 8 devices
in each topology. To generate the elephant ﬂow, we replay a
24 hours trace in 10 min. The other 7 traces are replayed at
normal speed as mice ﬂows. We enforce DP I, DP I + AV
or DP I + AV + AppCtrl on the elephant ﬂow with PSI or
distributed Firewall/IPS. We measure the average packet loss
rate over all 8 Devices as the metric to indicate the collateral
damage. The results in Figure 14 show that PSI generates
around 5% average packet drop rate in three cases, while
packet drop rate with distributed Firewall/IPS is 34%. This is
because PSI provides customized & isolated ψmbox for each
device, and can precisely enforce DPI only on the elephant
ﬂow. In conclusion, PSI reduces the collateral damage of an
elephant ﬂow (in terms of average packet drop) by 85%.
B. Beneﬁts of PSI optimizations
Fig. 14: Collateral damage due to an elephant ﬂow.
generates an event (Snort alert) and waits for the controller to
process the event, select the path, and install the forwarding
rules. With proactive handling, the packet is tagged at the NF
as discussed in §V-B. We gradually increase the load and see
how it affects the end-to-end latency in Figure 15. We see
that proactive handling mechanism reduces latency by at least
10X. Note that, unlike the reactive controller, the latency of
proactive handling is independent of the trafﬁc rate.
Fig. 15: Proactive context-based forwarding.
E2−−→ s2
E1−−→ s1
ψDAG prefetching:
To evaluate the effect of ψDAG
prefetching, we test
the following scenario: a host H1 is
protected by a policy with 11 states, each with a unique
ψDAG. For simplicity, the state transitions are sequential as
E3−−→ ··· E10−−→ s10. An attacker create 10
s0
types attack ﬂows a1,··· , a10 against H1, which triggers the
transition event E1,··· , E10 respectively. The hope of the
attacker is to make transitions from a1 to a10 sequentially
to get through before the defense system can respond. In
our evaluation, we write a script
to send 10 attack ﬂows
a1,··· , a10 as a group (with different payloads) sequentially
from H2 to H1 to simulate such this attacker. We vary
the attack ﬂow arrive interval from 2s to 5s to simulate the
frequency of the attack, as illustrated by the x axis of Figure 16.
We measure the time between the arrivals of the ﬁrst and the
last packets of the ﬂow at H1 as the downtime of the ﬂow and
calculate the average down time across 10000 groups of ﬂows.
We compare a naive update scheme which waits for the event
to trigger ψDAG launch vs. our prefetch scheme with 1-hop
and 2-hop look-ahead. For the naive-scheme, there are 3 VMs
in each ψDAG and they are launched in parallel. Figure 16
shows that with a 2-hop prelaunch, we can ensure zero security
downtime.
Next, we demonstrate how PSI’s optimizations from Sec-
tion V improve the system performance.
Proactive context-based forwarding: To analyze the impact
of proactive controller setup, we send ﬂows from one host to
another using a ψDAG with two paths and measure the latency
per ﬂow. With a reactive controller, the ﬁrst packet of the ﬂow
Controller scale-out:
In this evaluation, we stress our con-
troller with our test generator to emulate an adversary and
see how PSI’s scale-out scheme maintains a small response
time under attack. We connect 20 test generators to our
controller, with a 100 events/s rate initially. Then, we select
10 test generators to increase the rate to 110,000 events/s
simultaneously to emulate the adversary. At each PSI controller
11
DPIDPI+AVDPI+AV+AppCtrlAverage Packet Drop Rate00.10.20.30.4PSINGFWEvent Rate (events/s)101102103104105End-to-end Latency (ms)051015ReactivePSIFig. 16: Effect of ψDAG prefetching.
VM, PSI monitors the average process time of each event with
an high delay threshold (set to 8ms). If the threshold is reached,
then PSI scale-out scheme will launch new VMs to scale-out
as described in Section V-B.
Figure 17 shows the changes of the response time as
the load increases. We observed that each peak decrease is
caused by scaling out the PSI controller to 2, 3, 4 and 5 VMs
respectively. From the result we can conclude that the PSI
scale-out scheme successfully prevents the response time from
increasing beyond 10ms in the presence of an adversary.
Fig. 17: PSI controller scale-out.
C. PSI Scalability
We now evaluate PSI’s scalability in supporting a large-
scale enterprise network.
Single controller benchmark: First, we benchmark the event
processing throughput a single PSI controller instance. Our
test generator sends event messages to the controller as fast as
possible (until their TCP send buffer blocks). Each message
triggers a state change in the controller logic. We increase the
number of generators and measure the observed throughput.6
In this evaluation, the controller is assigned 8 GB RAM, and
hosts ψFSM and ψDAGs for 100,000 devices (one policy for
each device). Each ψFSM has 4 states and each ψDAG has
4 NFInstances. The result shows that a single PSI Controller
has a maximum throughput of around 230,000 events/s (not
shown). To put this in context, if each device generates one
event every 5s (a high average alert rate [43]); a single instance
could still handle a network with 100,000 devices.
Sensitivity to policy complexity: Next, we evaluate the
impact of ψFSM and ψDAG size, which reﬂect the policy
complexity. In this evaluation, the controller is ﬁxed to host
ψFSM and ψDAGs for 100k devices (one policy for each
device). Then increase the size of ψFSM (number of states)
and size of ψDAG (number of security appliances for one
6We observed that a single generator cannot saturate the controller.
state) respectively from 2 to 10 to measure the controller’s
performance’s sensitivity to policy complexity. Figure 18
shows that while the policy complexity does impact throughput
and response time, it is quite negligible. The RAM increases
linearly with the number of ψFSM s or ψDAGs but can easily
supported by extension. In summary, we observe that richer
policies are not fundamental bottlenecks for PSI deployment.
Fig. 18: Sensitivity to policy complexity.
D. PSI Use Cases
In this section, we describe a number of use cases that
demonstrate how PSI can enable new security capabilities:
Protecting IoT devices with default passwords: Commonly
known default passwords are a problem for embedded devices.
To secure these devices, we implemented a simple proxy
system as shown in Figure 19. This IoT-ψmbox (A Ubuntu
VM with a customized Squid proxy) serves as a gateway to
all trafﬁc to embedded systems on the network. The target
in this example, was a D-link surveillance camera, which
ships with a hardcoded admin password that the user has no
interface to delete. In this case, incoming trafﬁc is inspected for
known suspicious password combinations (e.g., admin/admin)
are dropped and actual access is only granted by rewriting
packets to the correct password combination. The ψmbox can
enforce the use of a new administrator-chosen password to
access the camera’s management interface or images.
Fig. 19: ψmbox to Patch Embedded Vulnerability.
Disrupting botnets via on-demand captchas: Today’s com-
munication between bots and command-and-control (C&C)
servers use common protocols such as HTTP to hide among
legitimate trafﬁc ﬂows. Now a naive whitelist-based approach
(i.e., allowing known popular sites) that raises an alert (or
worse block) every off-whitelist HTTP URL access can result
in very high false positives (or disrupt
legitimate trafﬁc.)
12
Flow arrive interval (s)2345Downtime (ms)01000200030004000no prefetch1-hop prefetch2-hop prefetch246810x 105024681012Load on Controller (events/s)Response time (ms)Scale-outto 3 VMsScale-outto 4 VMsScale-outto 5 VMsScale-outto 2 VMs2345678910Max. Throughput(events/s)#105012FSM SizeDAG Size2345678910Memory Usage(GB)0510FSM SizeDAG SizePolicy Complexity (FSM/DAG Size)2345678910Respond Time(ms)05FSM SizeDAG Size(cid:2)(cid:1)Patch	camera	with	new	secure	password	Current		World	With		PSI	admin/admin(cid:1)new	secure	password	IoT	password	proxy(cid:1)PSI	Controller	Instead, we can enable a agile botnet disruptor to verify if the
connection was intended by the user as shown in Figure 20.
We implement this a ψmbox running an Apache server, with
the Google ReCaptcha service as follows. when a user is
seen sending a log of suspicious HTTP requests (e.g., short-
lived domains), then the botnet disruptor dynamically forces
the user to enter a “captive portal” with a captcha forcing the
user to verify the connections. If the request was legitimate
and validated as human, the connection is allowed, otherwise
the device is ﬂagged (or disconnected pending further investi-
gation).
Fig. 20: PSI Bot Disruptor.
Context-Aware On-Demand Decoys: Scans and background
radiation are an operational reality today viewed as “ankle
biters” that are fundamentally not worth analyst attention [26].
However, in some cases, scans might foreshadow an upcoming
attack; e.g., after HeartBleed is disclosed, and understanding
the attack workﬂow may provide valuable information for
future defenses. Building on the earlier example, we implement
a context-aware dynamic decoy system [25]. Once we identify
a speciﬁc scanner IP from a host H1 (e.g., Ubuntu-12.04,
SSL1.01-4), we subject it to tighter monitoring via an IPS. If
the IPS detects a follow-up exploit action, then PSI instantiate
a “decoy” honeypot ψmbox tailored to Ubuntu-12.04 with
SSL1.01-4 and redirects the exploit trafﬁc to the honeypot in
order to investigate the attack’s intent.
Fig. 21: Context-aware Decoy.
VIII. RELATED WORK
Firewalls and IDSes: Middleboxes such as ﬁrewalls and
IDS/IPS [51], [57] are the “workhorses” of network security
mechanisms today. Unfortunately, these have well-documented
concerns with respect to (a) performance (e.g., 30% of ad-
ministrator disable useful security features such as DPI and
anti spooﬁng [16]); (b) misconﬁgurations (e.g., [35], [49]);
13
(c) lack of expressiveness to tackle novel threats; and (d)
undesirable tradeoffs between stronger security postures vs.
user backlash [16]. By design, PSI addresses these pain
points. PSI’s vision shares conceptual similarity with classical
work on distributed ﬁrewalls [27], [41]. Other work addresses
orthogonal problems related to scalability (e.g., [69]) and alert
correlation (e.g., [58]).
SDN, NFV, and Security: Prior work has aimed to take
advantage of SDN and NFV to make network security enforce-
ment more ﬂexible. Ethante [29] uses a centralized controller
controls switches at critical points to authorized trafﬁc. Flow-
Guard [40] resolves interfering ACL policies from ﬁrewalls
in SDN network. However, Ethane or FlowGuard does not
support security policies beyond ACLs and do not allow
more advanced security policies captured by ψDAGs and
ψFSM s. Flowtags [36] and Simple [53] are two other related
works close to PSI. Flowtags provides interfaces between
middleboxes and the SDN controller to enable the enforcement
of “ﬁxed” ψDAG. Simple provides simpliﬁed trafﬁc steering
over a set of statically deployed middleboxes. FlowTags or
Simple supports neither dynamically changing ψDAGs (which
are accommodated in PSI using ψFSM s) nor guarantees policy
isolation.
FRESCO [62] implements detection and mitigation mod-
ules in the SDN controller. However, the controller becomes a
critical bottleneck for scalability and requires reimplementing
functionality that
is commonly available in security mid-
dleboxes. OFX [66] and Kinetic [43] focuses on networks
composed of switches. PBS [39] shares some our motivation
in addressing security challenges induced by BYOD. In con-
trast to PSI, PBS: (a) only focuses on BYOD mobile apps;
(b) involves a reactive controller; and (c) needs end-point
instrumentation on Android. Other work focuses on exploiting
SDN/NFV to provide elastic scaling of security functions [34],
[50]; such elastic scaling is orthogonal to the focus of PSI.
That said, the PSI ψcluster can leverage these elastic scaling
capabilities if needed.
Controller scaling, either via horizontal scaling (e.g., [32],
[44]) or proactive orchestration (e.g.,
[34], [36]) are active
areas of work in SDN/NFV. PSI synthesizes and extends
these efforts through a combination of proactive tag-based
forwarding and elastic scaling.
Policy languages: There has been renewed interest in pro-
gramming abstractions for networks [43], [48]. Kinetic pro-
vides a domain speciﬁc language and an SDN controller to
dynamically change OpenFlow switch actions [43]. However,
Kinetic is constrained and cannot express richer policies
that involve stateful middleboxes
[38]. PGA [52] provides
support for composing forwarding policies across aggregates
and detecting conﬂicts. PSI provides a richer abstraction that
subsumes these prior efforts.
Industry efforts: Google’s BeyondCorp initiative [72] focuses
on authentication and user trust, and can conceivably be de-
feated by evading the authentication system (e.g., a malicious
insider). PSI’s focus on trafﬁc behavior is intended to be
robust to insider threat and other attacks by avoiding a single
point of trust. VMWare’s NSX and microsegmentation tackles
datacenter security by pushing ﬁrewalling functionality into
normal(cid:1)IPS(cid:1)PSI	Controller	Admin(cid:1)“google.com”(cid:1)Step1:	human/bot?	“meethue.com”(cid:1)or(cid:1)Step2:	Ac7ve	Check	is	Human(cid:1)Step3:	is	bot	H1 H2 CentOS6.5 SSL1.01e  H(cid:2) Ubuntu12.04  SSL1.01-4  10.1.0.1 10.2.0.1 Attack at Time 0: Nmap Scan Step1: Nmap Scan Detected PSI Controller Honeypot IPS CentOS6.5 SSL1.01e  Admin(cid:1)Attack at Time 1: Metasploit rhost 10.1.0.1  Step2: exploit on 10.1.0.1 detected Step3: Launch customized decoy  mimic H1  True Threats Scan Detector for “Heartbleed” Devices hypervisors to tackle “east-west” trafﬁc, which is not protected
by perimeter ﬁrewalls [71]. However, the security mechanisms
and abstractions are restricted to simple ﬁrewalling rules. In
contrast, PSI targets a much richer set of policies that can
involve multiple security middleboxes and does not rely on
every device to run atop a hypervisor. Finally, the vision of
SDN/NFV is gaining a lot of traction in industry; e.g., Cisco’s
Evolved services platform [8] describes a high-level architec-
ture similar to PSI. Based on public documentation, however,