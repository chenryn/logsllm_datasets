# ShadowReplica: Efficient Acceleration of Dynamic Data Flow Tracking and Other Shadow Memory-Based Analyses

## 3. Performance Evaluation

### 3.1 Apache and MySQL
We evaluated ShadowReplica on more complex and larger software, specifically the commonly used Apache web server (version 2.2.24) and MySQL database server (version 5.0.51b). All options were set to their default values.

#### 3.1.1 Apache Web Server
To measure Apache's performance, we used its built-in utility `ab` with static HTML files of different sizes (1KB, 10KB, 100KB, and 1MB). We tested both plaintext and SSL/TLS-encrypted connections. The results are shown in Figure 8(a).

- **Plaintext Files**: On average, ShadowReplica caused a 24% slowdown.
- **SSL/TLS Encrypted Files**: The slowdown was significantly higher at 62%, due to the CPU-bound nature of SSL's cryptographic operations.

#### 3.1.2 MySQL Database Server
For MySQL, we used the `sql-bench` benchmark suite, which includes tests for table creation, modification, data selection, and insertion. The evaluation involved spawning 10 to 20 threads. The results, presented in Figure 8(b), show an average slowdown of 3.02× (ranging from 2.17× to 3.5×).

### 3.2 Computational Efficiency
One of the goals of ShadowReplica is to make dynamic fault tolerance (DFT) more computationally efficient. To evaluate this, we selected two benchmarks from the SPEC CPU2006 suite: 401.bzip2 and 400.perl. These benchmarks were chosen based on our observations during the performance evaluation.

- **401.bzip2**: DFT ran faster than the application, making performance bound by the primary thread.
- **400.perl**: DFT was slower, making performance bound by the secondary thread.

We ran ShadowReplica and our accelerated in-line DFT implementation with these benchmarks and measured CPU usage using the `perf` tool. The results are shown in Figure 9.

- **401.bzip2**: ShadowReplica required approximately 30% fewer CPU cycles compared to in-line DFT.
- **400.perl**: ShadowReplica showed similar or slightly better performance in terms of CPU usage.

### 3.3 Security
The DTA and CFI tools developed over ShadowReplica were not intended to provide robust solutions but to demonstrate the system's capability to facilitate complex security tools. We tested their effectiveness using a set of exploits listed in Table 2. In all cases, we successfully prevented the exploitation of the corresponding applications.

- **DTA**: No false positives were generated, maintaining the same level of correctness as our previous DFT implementation.
- **CFI**: Some false positives occurred due to the inability to obtain an accurate control flow graph (CFG) through static and dynamic profiling. Improving the soundness of CFG remains a future task.

The performance overhead of DTA and CFI, implemented mostly in the secondary thread, was negligible, resulting in only about a 5% slowdown.

## 4. Related Work
The idea of decoupling dynamic program analyses from execution to run them in parallel has been explored in various contexts. Systems like Aftersight, ReEmu, and Paranoid Android use record and replay techniques to reduce overhead, but they do not improve the speed of the analysis itself. SuperPin and Speck use speculative execution, sacrificing processing power for speedup, but handling multi-threaded applications without hardware support remains challenging. CAB and PiPA aim to offload analysis code to another thread but have not achieved expected performance gains due to naive information collection and high communication overhead. This paper addresses these issues effectively.

## 5. Conclusion
We presented ShadowReplica, an efficient approach for accelerating DFT and other shadow memory-based analyses by decoupling analysis from execution and utilizing spare CPU cores. Our combined off-line dynamic and static analysis minimizes the data needed for decoupling, and we optimized the code for efficient performance. Our evaluation shows that ShadowReplica is more than 2× faster and uses up to 30% fewer CPU cycles than in-line DFT. Although the overall performance impact of DFT remains significant, our optimizations bring it closer to practicality in certain environments.

## 6. Acknowledgements
We thank the anonymous reviewers for their valuable comments and Rob Johnson for his guidance. This work was supported by the US Air Force, the Office of Naval Research, DARPA, and the National Science Foundation through various contracts and grants, with additional support from Intel Corp.

## 7. References
[References listed as provided]

---

This revised version is more structured, clear, and professional, with improved coherence and readability.