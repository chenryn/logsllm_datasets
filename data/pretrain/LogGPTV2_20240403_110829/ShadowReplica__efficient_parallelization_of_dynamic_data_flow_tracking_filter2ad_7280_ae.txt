r
o
n
(
n
w
o
d
w
o
l
S
 3.5
 3
 2.5
 2
 1.5
 1
(b) MySQL
Alter Create Insert Wisc
Test suite
Figure 8: The slowdown incurred by ShadowReplica on the
Apache web server and MySQL DB server.
one of Pin’s command-line options to disable this feature, which
reduced our slowdown in this benchmark from 5× to 3.05×.
Apache and MySQL. We proceed to evaluate ShadowReplica
with larger and more complex software. Speciﬁcally, we inves-
tigate how ShadowReplica behaves when instrumenting the com-
monly used Apache web server. We used Apache v2.2.24 and let
all options to their default setting. We measured Apache’s perfor-
mance using its own utility ab and static HTML ﬁles of different
size. In particular, we chose ﬁles with sizes of 1KB, 10KB, 100KB,
and 1MB, and run the server natively and with ShadowReplica
with all optimizations enabled. We also tested Apache with and
without SSL/TLS encryption (i.e., SSL and Plaintext, respectively).
Fig. 8 (a) illustrates our results. Overall, ShadowReplica has a 24%
performance impact, on average, when Apache is serving ﬁles in
plaintext. Unsurprisingly, the slowdown is larger when running on
top of SSL (62%). The reason behind this behavior is that the inten-
sive cryptographic operations performed by SSL make the server
CPU-bound. In Fig. 8 (b), we present similar results from evaluat-
ing with the MySQL DB server, a multi-threaded application which
spawned 10 ∼ 20 threads during its evaluation. We used MySQL
v5.0.51b and its own benchmark suite (sql-bench), which con-
sists of four different tests that assess the completion time of var-
ious DB operations like table creation and modiﬁcation, data se-
lection and insertion, etc. The average slowdown measured was
3.02× (2.17× – 3.5×).
6.3 Computational Efﬁciency
One of the goals of ShadowReplica was to also make DFT more
efﬁcient computation-wise. In other words, we not only desired to
accelerate DFT, but also do it using less CPU resources. To evaluate
this aspect of our approach, we chose two benchmarks from the
SPEC CPU2006 suite; 401.bzip2 and 400.perl. Our choice was was
not arbitrary. During our performance evaluation, we observed that
in the ﬁrst benchmark, DFT was running faster than the application.
Performance is, hence, bound by the primary thread. On the other
hand, in the second benchmark the secondary thread, performing
DFT, was slower, hence its performance is bound by the secondary
thread.
We run ShadowReplica and our accelerated in-line DFT imple-
mentation with these two benchmarks, and measured their CPU
usage using the perf tool. Fig. 9 presents the results of our exper-
iment. We run ShadowReplica with both primary and secondary
244(a) 401.bzip2
(b) 400.perlbmk
Primary
Secondary
In-line
)
d
e
z
i
l
a
m
r
o
n
(
e
m
i
t
U
P
C
e
t
a
g
e
r
g
g
A
 6
 5
 4
 3
 2
 1
 0
Primary
Secondary
In-line
)
d
e
z
i
l
a
m
r
o
n
(
e
m
i
t
U
P
C
e
t
a
g
e
r
g
g
A
 12
 10
 8
 6
 4
 2
 0
No analysis DFT
DFT
In-line DFT
No analysis DFT
DFT
In-line DFT
(NO FP)
(NO FP)
Figure 9: Aggregated CPU time consumed by two SPEC
CPU2006 benchmarks when run under different conﬁgura-
tions of ShadowReplica, and under in-line DFT. For Shad-
owReplica, we draw the CPU time taken by the primary and
secondary threads separately. A darker horizontal line shows
the threshold above which the secondary dominates CPU us-
age.
Application
Vulnerability
CVE-ID
exim-4.69
proftpd-1.3.3a
nginx-0.6.32
memcached 1.1.12
htget-0.93
WsMp3-0.0.8
athttpd-0.4b
CVE-2010-4344
Format string
CVE-2010-4221
Stack overﬂow
Buffer underﬂow CVE-2009-2629
Integer overﬂow CVE-2009-2415
Stack overﬂow
CVE-2004-0852
CVE-2003-0338
Heap overﬂow
Buffer overﬂow
CVE-2002-1816
Table 2: ShadowReplica-{DTA, CFI} successfully prevented
the listed attacks.
threads running, having the secondary perform no analysis (No
analysis), implementing DFT using all optimizations (DFT), and
without the FastPath optimization from LIFT [28] (DFT (NO FP)).
The last column (in-line DFT) shows the result for a DFT imple-
mentation that in-lines the analysis to the application process [18].
CPU usage is partitioned to show the amount of CPU cycles taken
from the primary and secondary threads separately. The darker hor-
izontal line visualizes the tipping point where the secondary thread
starts dominating performance (i.e., it is slower than the primary),
when we are running ShadowReplica with DFT and all optimiza-
tions enabled.
A take-out from these results is that the aggregated CPU usage
of ShadowReplica is less or equal than that of in-line DFT analysis.
In other words, we manage to satisfy equation 1 from Sec. 2.1. As-
toundingly, in the case of 401.bzip2, we are so much more efﬁcient
that we require ∼30% less CPU cycles to apply DFT.
6.4 Security
The purpose of developing the DTA and CFI tools over Shad-
owReplica was not to provide solid solutions, but to demonstrate
that our system can indeed facilitate otherwise complex security
tools. Nevertheless, we tested their effectiveness using the set of
exploits listed in Table 2. In all cases, we were able to successfully
prevent the exploitation of the corresponding application.
During the evaluation, DTA did not generate any false positives,
achieving the same level of correctness guarantees to our previous
DFT implementation [19, 18]. However, CFI suffered from some
false positives due to the inability to obtain an accurate CFG by
static and dynamic proﬁling. We leave the task of improving the
soundness of CFG as a future work.
Having DTA and CFI implemented mostly from the secondary,
performance overhead was negligible by having ∼ 5% slowdown.
7. RELATED WORK
The idea of decoupling dynamic program analyses from execu-
tion, to run them in parallel, has been studied in past in various
contexts [31, 8, 25, 33, 14, 26, 6]. Aftersight [8], ReEmu [6], and
Paranoid Android [26] leverage record and replay for recording ex-
ecution and replaying it, along with the analysis, on a remote host
or a different CPU (replica). They are mostly geared toward off-
line analyses and can greatly reduce the overhead imposed on the
application. However, the speed of the analysis itself is not im-
proved, since execution needs to be replayed and augmented with
the analysis code on the replica.
SuperPin [31] and Speck [25] use speculative execution to run
application and (in-lined) analysis code in multiple threads that ex-
ecute in parallel. These systems sacriﬁce signiﬁcant processing
power to achieve speed up. Furthermore, handling multi-threaded
applications without hardware support remains a challenging issue
for this approach.
CAB [14] and PiPA [33] aim at ofﬂoading the analysis code
alone to another execution thread, and they are the closest to Shad-
owReplica. However, neither of the two has been able to deliver
the expected performance gains, due to (a) naively collecting infor-
mation from the application, and (b) the high overhead of commu-
nicating it to the analysis thread(s). This paper demonstrated how
to tackle these problems.
DFT has been broadly used in the security domain but also else-
where. TaintCheck [24] utilizes DTA for protecting binary-only
software against buffer overﬂows and other types of memory cor-
ruption attacks. It applies DTA, using Valgrind [23], to detect ille-
gitimate uses of network data that could enable attackers to seize
control of vulnerable programs. Panorama [32] makes use of DTA
for analyzing malware samples similarly to Argos [27]. Taint-
Bochs [9] utilizes a whole system emulator for studying the life-
time of sensitive data, whereas TaintEraser [34] relies on DTA for
preventing sensitive information leaks. ConfAid [3] leverages DFT
for discovering software misconﬁgurations. Dytan [10] is a ﬂexible
DFT tool, allowing users to customize its data sources and sinks,
as well as the propagation policy, while it can also track data based
on control-ﬂow dependencies.
8. CONCLUSION
We presented ShadowReplica, a new and efﬁcient approach for
accelerating DFT and other shadow memory-based analyses, by de-
coupling analysis from execution and utilizing spare CPU cores to
run them in parallel. We perform a combined off-line dynamic and
static analysis of the application to minimize the data that need to be
communicated for decoupling the analysis, and optimize the code
used to perform it. Furthermore, we design and tune a shared ring
buffer data structure for efﬁciently sharing data between threads on
multi-core CPUs. Our evaluation shows that performing DFT us-
ing ShadowReplica is more than 2× faster and uses up to 30% less
CPU cycles than in-line DFT. Although the overall performance
impact of DFT remains signiﬁcant, we hope that our optimizations
will bring it closer to becoming practical for certain environments.
2459. ACKNOWLEDGEMENT
We want to express our thanks to the anonymous reviewers for
their valuable comments and to Rob Johnson, our shepherd, for his
guidance. This work was supported by the US Air Force, the Ofﬁce
of Naval Research, DARPA, and the National Science Foundation
through Contracts AFRL-FA8650-10-C-7024, N00014-12-1-0166,
FA8750-10-2-0253, and Grant CNS-12-22748, respectively, with
additional support by Intel Corp. Any opinions, ﬁndings, conclu-
sions, or recommendations expressed herein are those of the au-
thors, and do not necessarily reﬂect those of the US Government,
the Air Force, ONR, DARPA, NSF, or Intel.
10. REFERENCES
[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti.
Control-ﬂow integrity. In Proc. of CCS, 2005.
[2] A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman.
Compilers: Principles, Techniques, and Tools (2nd Edition).
Addison-Wesley Longman Publishing Co., Inc., 2006.
[3] M. Attariyan and J. Flinn. Automating conﬁguration
troubleshooting with dynamic information ﬂow analysis. In
Proc. of OSDI, 2010.
[4] D. Bruening and Q. Zhao. Practical memory checking with
dr. memory. In Proc. of CGO, 2011.
[5] D. Bruening, Q. Zhao, and S. Amarasinghe. Transparent
dynamic instrumentation. In Proc. of VEE, 2012.
[6] Y. Chen and H. Chen. Scalable deterministic replay in a
parallel full-system emulator. In Proc. of PPoPP, 2013.
[7] V. Chipounov, V. Kuznetsov, and G. Candea. S2E: a platform
for in-vivo multi-path analysis of software systems. In Proc.
of ASPLOS, 2011.
[8] J. Chow, T. Garﬁnkel, and P. Chen. Decoupling dynamic
program analysis from execution in virtual environments. In
Proc. of USENIX ATC, 2008.
[9] J. Chow, B. Pfaff, T. Garﬁnkel, K. Christopher, and
M. Rosenblum. Understanding data lifetime via whole
system simulation. In Proc. of USENIX Security, 2004.
[10] J. Clause, W. Li, and A. Orso. Dytan: A generic dynamic
taint analysis framework. In Proc. of ISSTA, 2007.
[11] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou,
L. Zhang, and P. Barham. Vigilante: End-to-end containment
of internet worms. In Proc. of SOSP, 2005.
[12] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung,
P. McDaniel, and A. N. Sheth. TaintDroid: An
information-ﬂow tracking system for realtime privacy
monitoring on smartphones. In Proc. of OSDI, 2010.
[13] P. Festa, P. M. Pardalos, and M. G. Resende. Feedback set
problems. Handbook of Combinatorial Optimization,
4:209–258, 1999.
[14] J. Ha, M. Arnold, S. M. Blackburn, and K. S. McKinley. A
concurrent dynamic analysis framework for multicore
hardware. In Proc. of OOPSLA, 2009.
[15] Hex-Rays. The IDA Pro Disassembler and Debugger, cited
Aug. 2013. http://www.hex-rays.com/products/ida/.
[16] A. Jaleel, R. S. Cohn, C.-K. Luk, and B. Jacob. Cmp$im: A
pin-based on-the-ﬂy multi-core cache simulator. In Proc. of
MoBS, 2008.
[17] K. Jee. Bug 56113. GCC Bugzilla, cited Aug. 2013.
http://gcc.gnu.org/bugzilla/show_bug.cgi?id=56113.
[18] K. Jee, G. Portokalidis, V. P. Kemerlis, S. Ghosh, D. I.
August, and A. D. Keromytis. A general approach for
efﬁciently accelerating software-based dynamic data ﬂow
tracking on commodity hardware. In Proc. of NDSS, 2012.
[19] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis.
libdft: practical dynamic data ﬂow tracking for commodity
systems. In Proc. of VEE, 2012.
[20] L. Lamport. Specifying Concurrent Program Modules. ACM
Transactions on Programming Languages and Systems
(TOPLAS), 1983.
[21] K. H. Lee, X. Zhang, and D. Xu. High accuracy attack
provenance via binary-based execution partition. In Proc. of
NDSS, 2013.
[22] C. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. Reddi, and K. Hazelwood. Pin: building
customized program analysis tools with dynamic
instrumentation. In Proc. of PLDI, 2005.
[23] N. Nethercote and J. Seward. Valgrind: a framework for
heavyweight dynamic binary instrumentation. In Proc. of
PLDI, 2007.
[24] J. Newsome and D. Song. Dynamic taint analysis for
automatic detection, analysis, and signature generation of
exploits on commodity software. In Proc. of NDSS, 2005.
[25] E. B. Nightingale, D. Peek, P. M. Chen, and J. Flinn.
Parallelizing security checks on commodity hardware. In
Proc. of ASPLOS, 2008.
[26] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos.
Paranoid Android: Versatile protection for smartphones. In
Proc. of ACSAC, 2010.
[27] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an
Emulator for Fingerprinting Zero-Day Attacks. In Proc. of
EuroSys, 2006.
[28] F. Qin, C. Wang, Z. Li, H.-s. Kim, Y. Zhou, and Y. Wu. LIFT:
A low-overhead practical information ﬂow tracking system
for detecting security attacks. In Proc. of MICRO, 2006.
[29] A. Slowinska, T. Stancescu, and H. Bos. Howard: a dynamic
excavator for reverse engineering data structures. In Proc. of
NDSS, 2011.
[30] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham.
Efﬁcient software-based fault isolation. In Proc. of SOSP,
1993.
[31] S. Wallace and K. Hazelwood. Superpin: Parallelizing
dynamic instrumentation for real-time performance. In Proc.
of CGO, 2007.
[32] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda.
Panorama: capturing system-wide information ﬂow for
malware detection and analysis. In Proc. of CCS, 2007.
[33] Q. Zhao, I. Cutcutache, and W. Wong. PiPA: pipelined
proﬁling and analysis on multi-core systems. In Proc. of
CGO, 2008.
[34] D. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall.
TaintEraser: Protecting sensitive data leaks using
application-level taint tracking. In SIGOPS Oper. Syst. Rev.,
2011.
246