提供扫描系统的后台管理、API接口、漏洞知识库等一系列的交互功能入口，不同的人员或系统可以根据各自的需求通过不同的交互接口来满足自己需求。如：CI/CD系统可通过
API 接口创建扫描任务并获取扫描结果；安全审计人员可通过后台进行规则或插件的添加；开发人员可通过漏洞知识库来获取相关语言或技术的漏洞信息。
#### 4.3.2 存储层
主要包括关系型数据库、消息中间件(指MQ)、NFS(网络文件系统)，这里我们使用了 MySQL 5.7 的数据库； RabbitMQ 是作为 Celery
调度框架的消息中间件；NFS担当网络共享存储，用于存储代码与扫描日志。
#### 4.3.3 调度层
扫描任务的执行流程，主要可分为：
  * **初始化** ：扫描任务的环境初始化，如：日志目录、日志文件、加载插件、加载漏洞规则等；
  * **分析项目** ：项目代码统计、依赖组件统计、漏洞知识库关联等；
  * **扫描漏洞** ：调用第三方扫描引擎、统计扫描结果；
  * **漏报处理** ：使用黑名单规则和插件进行扫描；
  * **误报处理** ：使用白名单规则和插件进行误报处理；
  * **闭环漏洞** ：针对高危漏洞在 GitLab 或 Jira 系统中创建一个 Issue。
#### 4.3.4 服务层
后台的服务，其主要包括：GitLab 系统中的项目同步、报表生成、调度进程监控。
## 五 系统功能
### 5.1 数据库设计
#### 5.1.1 权限相关
权限控制，这里使用 django
自带的权限表来进行权限控制，我们可以通过`auth_group`表来创建用户组，为不同的用户组赋予不同的角色权限`auth_group_permissions`，你可以访问官方地址： 来获得更多关于权限的信息。
django 权限表如下：
  * `auth_group`
  * `auth_group_permissions`
  * `auth_permission`
  * `auth_user`
  * `auth_user_groups`
  * `auth_user_user_permissions`
#### 5.1.2 项目相关
项目表主要包括：项目组、项目、分支与TAG、统计信息、依赖组件、插件规则、扫描任务等相关表。
![
](https://images.seebug.org/content/images/2018/09/355dae6e-5476-48aa-a2dc-6e80464f28a1.png-w331s)
#### 5.1.3 漏洞知识库
漏洞知识库，这里主要存储漏洞类型、漏洞知识等内容。
![
](https://images.seebug.org/content/images/2018/09/8b2f567a-ae43-4b30-b9a4-797ed80d09c9.png-w331s)
#### 5.1.4 系统相关
系统表主要包括系统的安全周报、节点监控、系统日志等信息。
![
](https://images.seebug.org/content/images/2018/09/5b55b2ad-41a9-423a-b2dc-3df4d52cadcd.png-w331s)
### 5.2 UI系统
扫描系统的后台，方便安全审计人员管理项目和系统。
#### 5.2.1 项目管理
##### 5.2.1.1 项目组
项目组我们通过 GitLab 的 API
同步所有项目组信息到我们的扫描系统，项目组的信息包括：`项目组名称`、`项目组描述`、`创建时间`、`URL地址`、`项目成员`等。
##### 5.2.1.2 项目
项目是从分组中获取得到，需要注意的是可能会存在项目名相同但分组不同的情况。项目基本信息应包括：项目名称、项目描述、所属分组、默认分支、Git地址、项目成员、代码统计、依赖组件、分支管理、TAG管理等。
![
](https://images.seebug.org/content/images/2018/09/5c987fde-7d2f-46ba-9ea1-b6316f19c98d.jpg-w331s)
##### 5.2.1.3 扫描任务
扫描任务会有四种状态：等待调度、正在扫描、扫描完成、扫描失败。每一次创建扫描任务时，都会查询是否存在等待调度或正在扫描的任务，如果存在则提示创建失败。
![
](https://images.seebug.org/content/images/2018/09/6f5b407a-3885-4df9-9a52-4f16b5154728.png-w331s)
#### 5.2.2 规则插件
##### 5.2.2.1 规则
这里使用正则表达式来做特征匹配，并可通过限定文件的后缀来提高精准度。
_正则表达式标志位：_
  * 忽略大小写
  * 支持多行匹配
![
](https://images.seebug.org/content/images/2018/09/29b87d7a-ea09-41d6-aa5c-d7b1ae0d379c.png-w331s)
##### 5.2.2.2 插件
这里使用了 Python
的反射机制，任务初始化时会优先初始化插件，当扫描完成时，扫描引擎会使用插件批量进行检测。插件入口函数为`run()`，漏洞详情对象会作为`**kwargs`参数的上下文传到该函数中。
![
](https://images.seebug.org/content/images/2018/09/2394ce8d-aef4-4975-bc04-6f9fb21997e2.jpg-w331s)
##### 5.2.2.3 规则知识库
规则知识库是区别与漏洞知识库的，往往规则知识库的内容要比漏洞知识库的内容简单，但是结构清晰。如：漏洞示例代码、漏洞说明、解决办法、参考链接等信息。
#### 5.2.3 漏洞知识库
##### 5.2.3.1 漏洞类型
这里建议使用 CWE
的漏洞标准，可参考这个文档：`https://www.hackerone.com/sites/default/files/2017-03/WeaknessAndLegacyVulnerabilityTypeRelationship.pdf`
##### 5.2.3.2 漏洞管理
主要包括添加漏洞和管理漏洞，漏洞的信息应该包括：CVE/CNVD/CNNVD编号、漏洞标题、风险等级、漏洞来源、发现时间、受影响范围、漏洞详情、漏洞类型、解决版本等基本信息。
![
](https://images.seebug.org/content/images/2018/09/cd7c891c-0ccc-4eb1-b83a-1d0503fc8d2b.jpg-w331s)
这里我们要实现漏洞知识库与识别出的组件联动功能，主要通过两个属性：
  * 组件标签
这里需要为每个漏洞添加一个 Tag
属性，其属性值如：org.springframework、com.alibaba.fastjson，建议标签一律使用小写字母。
  * 版本规则
使用正则表达式来进行匹配，如：CVE-2018-1270 中受影响的 Spring Framework 版本为：5.0.x-5.0.5 和
4.3.x-4.3.16，那么我们的规则可以写成如下：
    5\.0  ### 5.0
    (5\.0\.[0-4]{1}) ### 5.0.x -5.0.5
    (4\.3\.1[0-5]{1}) ### 4.3.1x.release
    (4\.3\.[0-9]{1}\.) ### 4.3.x.release
#### 5.2.4 报表管理
##### 5.2.4.1 语言与项目统计
按照年份进行项目的语言统计。
![
](https://images.seebug.org/content/images/2018/09/77e5c66a-fd4c-4884-9862-2920835ede18.png-w331s)
##### 5.2.4.2 周期性漏洞统计
**每季度漏洞数对比**
季度统计是为了对比同一段时期的漏洞数。
![
](https://images.seebug.org/content/images/2018/09/5917202b-12dd-42b8-9006-a395d8d9dc9c.png-w331s)
**高危漏洞趋势图**
高危漏洞环比，今天实施的安全政策是否合乎预期，可以大概分析出来。
![
](https://images.seebug.org/content/images/2018/09/92d3cf88-6710-46af-989b-03a8f1710c56.png-w331s)
### 5.3 API接口
#### 5.3.1 接口认证
使用 `rest_framework` 的 API 来做验证，首先根据登陆的用户 id 生成一个 Token。
    from rest_framework.authtoken.models import Token
    def create_token(request, user_id=None):
        if request.user.id != int(user_id):
            return HttpResponseRedirect("/error/403")
        try:
            user = User.objects.get(id=user_id)
        except Token.DoesNotExist:
            token = Token.objects.create(user=user)
        return HttpResponseRedirect("/users/{0}".format(user_id))
验证接口使用说明，添加 Authorization 的认证 Token。
![
](https://images.seebug.org/content/images/2018/09/c835f737-dd34-414b-814b-6406371e6f8a.png-w331s)
#### 5.3.2 项目信息接口
**信息同步**
为什么需要信息同步？这是因为 GitLab 中的项目名称可能不是最终上线的 APP 名称(这里有些绕)。拿一个 Java 的项目举例，该项目的 GitLab
地址为：`http://git.companyname.com/A/cloud`，那么这个Java的包名有可能是
`com.companyname.cloud`。
我们使用项目的 git 地址来同步信息，建议把 git 地址全部转换为小写。APP 的名称(包名)可以 CI/CD
系统获取或是通过配置文件的硬编码方式来定义。