        send = sr1(IP(dst=host) / TCP(dport=port, flags="A"), timeout=10, verbose=0)
        if (send is None):
            # filtered
            pass
        elif send.haslayer(TCP):
            if send.getlayer(TCP).flags == 0x04:
                print("[+] %s %d \033[92m Unfiltered \033[0m" % (host, port))
        elif send.haslayer(ICMP):
            if send.getlayer(TCP).type == 3 and send.getlayer(TCP).code in [1, 2, 3, 9, 10, 13]:
                # filtered
                pass
## TCP WINDOW SCAN
对应于nmap中的-sW。
同上一条的ACK扫描一般，窗口扫描也是发送一个ACK报文，但它能够区别出端口的开放(open/closed)；现在尝试发送一个ACK报文到目标开放端口，查看一下返回内容：
    ###[ TCP ]###
         sport     = http
         dport     = ftp_data
         seq       = 2170377956
         ack       = 1
         dataofs   = 6
         reserved  = 0
         flags     = SA
         window    = 29200
         chksum    = 0x7761
         urgptr    = 0
         options   = [('MSS', 1318)]
有一个名为window的字段，这在前面是被忽略的一个字段，现在再次发送ACK报文到目标关闭的端口，会发现该值为0，因此窗口扫描技术是可以根据window值是正值
or 0来判断目标端口是open还是closed。
当然在大部分情况因为系统不支持的原因，得到的只是一个无响应或者是window值为0，从而令所有端口为filtered或者closed；例如用nmap去扫描的话得到的结果是所有端口都为filtered，而我本地发送报文到本地开放端口往往得到的也是一个window为0的结果，并且nmap文档中也提到了该扫描偶尔会得到一个相反的结果，如扫描1000个端口仅有3个端口关闭，此时这3个端口可能才是开放的端口。
其行为/状态表如下:
行为 | 状态  
---|---  
window>0 | open  
window=0 | closed  
未响应 | Filtered  
ICMP不可达 | filtered  
demo:
    def tcp_window_scan(host,port):
        send = sr1(IP(dst=host) / TCP(dport=port, flags="A"), timeout=2, verbose=0)
        if type(send) == None:
            # filtered
            pass
        elif send.haslayout(TCP):
            if send.getlayer(TCP).window > 0:
                print("[+] %s %d \033[92m Open \033[0m" % (host, port))
            elif send.getlayer(TCP).window == 0:
        # closed
        elif send.haslayer(ICMP):
            if send.getlayer(TCP).type == 3 and send.getlayer(TCP).code in [1, 2, 3, 9, 10, 13]:
                # filtered
                pass
## TCP Maimon SCAN
对应于nmap中的-sM。
该扫描技术本人没使用过，也是看nmap文档才了解到，首先该扫描技术与前面提到的Null，FIN，Xmas扫描一般，可以看到nmap中也是将它与这三种扫描技术归到同一类：
    case FIN_SCAN:
    case XMAS_SCAN:
    case MAIMON_SCAN:
    case NULL_SCAN:
        noresp_open_scan = true;
然而nmap中给它设置的标志位是TH_FIN|TH_ACK，而据文档所述，在RFC 793
(TCP)标准下无论端口开放还是关闭都应该响应RST给这样的探测，然而在许多基于BSD的系统中，如果端口开放，它只是丢弃该探测报文而非响应。
那么其行为/状态表与前面提到的Null等三项扫描技术一致。
    send = sr1(IP(dst=host) / TCP(dport=port, flags="AF"), timeout=2, verbose=0)
## UDP SCAN
对应于nmap中的-sU。
显然UDP扫描相较于TCP扫描而言使用的较少，就我个人来说我也不习惯去扫描UDP端口，而例如常见的DNS，SNMP，和DHCP
(注册的端口是53，161/162，和67/68)同样也是一些不可忽略的端口，在某些情况下会有些用处。
同样的在nmap文档中给出了说明：
> UDP扫描发送空的(没有数据)UDP报头到每个目标端口。 如果返回ICMP端口不可到达错误(类型3，代码3)， 该端口是`closed`(关闭的)。
> 其它ICMP不可到达错误(类型3， 代码1，2，9，10，或者13)表明该端口是`filtered`(被过滤的)。
> 偶尔地，某服务会响应一个UDP报文，证明该端口是`open`(开放的)。 如果几次重试后还没有响应，该端口就被认为是
> `open|filtered`(开放|被过滤的)。 这意味着该端口可能是开放的，也可能包过滤器正在封锁通信。
那么整理一下大概是如下：
行为 | 状态  
---|---  
ICMP端口不可到达错误(类型3，代码3) | closed  
ICMP不可到达错误(类型3， 代码1，2，9，10，或者13) | filtered  
响应 | open  
重试未响应 | open\ | filtered  
那么UDP不受欢迎的原因一个在于目前主流的服务大部分基于TCP，而其次便在于UDP扫描的特殊性，在一次扫描过后通常无法得到一个正确的响应，偶尔某服务会返回一个UDP报文说明该端口开放，因此需要进行多次探测；对于ICMP不可到达错误，需要知道的是一般主机在默认情况下限制ICMP端口不可到达消息，如一秒限制发送一条不可达消息。
可以看一下分别对本机的53端口跟一个不存在UDP服务的端口发送UDP报文查看它们的区别。
Open:
    ###[ UDP ]### 
         sport     = domain
         dport     = domain
         len       = 8
         chksum    = 0x172
closed:
    ###[ ICMP ]### 
         type      = dest-unreach
         code      = port-unreachable
         chksum    = 0xfc44
         reserved  = 0
         length    = 0
         nexthopmtu= 0
    ###[ UDP in ICMP ]### 
               sport     = domain
               dport     = ntp
               len       = 8
               chksum    = 0x0
一如TCP扫描一般，ICMP可以用getlayer(ICMP).type和code来获取到它们对应的状态，那么同样给出一个demo:
    def udp_scan(host,port):
        send = sr1(IP(dst=host) / UDP(dport=port), retry=-2, timeout=2, verbose=0)
        if (send is None):
            # filtered
            pass
        elif send.haslayer(ICMP):
            if send.getlayer(ICMP).type == 3:
                if send.getlayer(ICMP).code in [1, 2, 9, 10, 13]:
                    # filtered
                    pass
                elif send.getlayer(ICMP).code == 3:
                    # closed
                    pass
        elif send.haslayer(UDP):
            print("[+] %s U%d \033[92m Open \033[0m" % (host, port))
## IP SCAN
对应于nmap中的-sO。
严格来说这并不是端口扫描，IP SCAN所得到的结果是目标机器支持的IP协议 (TCP，ICMP，IGMP，等等)。
协议扫描扫的不是端口，它是在IP协议域的8位上循环，仅发送IP报文，而不是前面使用到的TCP or
UDP报文，同时报文头(除了流行的TCP、ICMP、UDP协议外)会是空的，根据nmap中说的是如果得到对应协议的响应则将该协议标记为open，
ICMP协议不可到达 错误(类型 3，代号 2) 导致协议被标记为 `closed`。其它ICMP不可到达协议(类型 3，代号 1，3，9，10，或者13)
导致协议被标记为 `filtered` (虽然同时他们证明ICMP是 `open` )。如果重试之后仍没有收到响应，
该协议就被标记为open|filtered。
scapy中可以简单的使用IP来发送默认的256个协议。
    ans,unans = sr(IP(dst=host,proto=(0,255))/"SCAPY")
    ans.show()
    //0000 127.0.0.1 > 127.0.0.1 ip / Raw ==> 127.0.0.1 > 127.0.0.1 ip / Raw
## 版本探测
对应于nmap的-sV。
同协议探测，版本探测严格来讲不在端口扫描的范围内，但却也互相关联，尽管在探测到常见的80端口，3306端口等等会第一时间辨认出运行在其上的服务，然而有些人的想法是难以猜透的，在10086端口放个web服务也不是不可能的，总会有奇奇怪怪的人在一些奇奇怪怪的端口运行着一些常见的服务。
在扫描到开放的端口后，版本探测所做的就是识别出这些端口对应的服务，在nmap中的nmap-service-probes文件中存放着不同服务的探测报文和解析识别响应的匹配表达式，例如使用nmap进行版本探测，会得到如下结果：
    PORT   STATE SERVICE VERSION
    80/tcp open  http    nginx 1.14.0 (Ubuntu)
    443/tcp open  ssl/http nginx 1.14.0 (Ubuntu)
对于版本探测的实现相对简单的方式就是通过无阻塞套接字和探查，然后对响应进行匹配以期得到一个正确的探测结果，在使用nmap探测一个nc监听的端口时会发现收到了一个`GET
/ HTTP/1.0`。
那么同样可以使用python的socket发送它来得到服务响应。
    ip = "ip"
    port = 80
    PROBE = 'GET / HTTP/1.0\r\n\r\n'
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)
    result = sock.connect_ex((ip, port))
    if result == 0:
        try:
            sock.sendall(PROBE.encode())
            response = sock.recv(256)
            if response:
                print(response)
        except ConnectionResetError:
            pass
    else:
        pass
    sock.close()
    //b'HTTP/1.1 200 OK\r\nServer: nginx/1.14.0 (Ubuntu)\r\nDate: Mon
只需要一个合理的正则便够匹配出正确的服务和版本信息。
## Reference