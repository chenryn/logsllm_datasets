stored in any relational database. The database is accessed by means of the JDBC (Java
Database Connectivity) standard.
Ontologies in WebODE are conceptualized with a very expressive knowledge model.
This knowledge model is based on the reference set of intermediate representations of
the Methontology methodology (Laera and Tamma, 2005). The following ontology
components are included in the WebODE’s knowledge model: concepts and their local
attributes (both instance and class attributes), whose type can be any XML Schema
type; concept groups, which represent sets of disjoint concepts; concept taxonomies,
and disjoint and exhaustive class partitions; ad hoc binary relations between concepts,
which may be characterized by relation properties (symmetry, transitiveness, etc);
constants; formal axioms, expressed in first order logic; rules; and instances of concepts
and relations.
WebODE contains an ontology editor, an ontology-based knowledge management
system (ODEKM), an automatic Semantic Web portal generator (ODESeW), a Web
resource annotation tool (ODEAnnotate), and a Semantic Web service tool (ODESWS).
The ontology editor has three user interfaces: an HTML form-based editor for editing
all ontology terms except axioms and rules, a graphical user interface (OntoDesigner)
17
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
and a WAB (WebODE Axiom Builder) for editing formal axioms and rules. This editor
has the following ontology building services: documentation service, OKBC-based
Prolog Inference engine, and ODEClean. WebODE has automatic exportation and
importation services from and into XML. WebODE has translation services to other
languages and systems or to and from diverse ontology specification languages.
Therefore, WebODE presents vast potential capabilities for interoperability.
Ontology export services allow generating WebODE ontologies in XML and in
several other ontology languages, such as: RDF(S), OIL, DAML+OIL, OWL, and F-
Logic. Ontologies can be transformed and used with the Protégé ontology editor or use
the interoperability capabilities provided by this tool. There are several ways of using
WebODE ontologies inside ontology-based applications: by its Java API via a local
service or application running on the same computer where the ontology server is
installed, by generating WebODE ontologies in XML and in several other ontology
languages, by transforming ontologies into Protégé-2000 or into Java.
The Java API avoids accessing directly the relational database. WebODE ontologies
can be accessed not only from inside the local server but also remotely with RMI and
Web services (Gómes-Pérez et al., 2001). It is possible to generate WebODE ontologies
into: RDF(S), OIL, DAML+OIL and OWL. The WebODE ontologies can be used
inside Protégé-2000 ontology editor.
During this process of transforming ontologies into Java, concepts are transformed
into Java beans, attributes into class variables, ad hoc relations into associations
between classes. This Java code can then be used to create other Java applications and
uploaded in rule systems like Jess.
Figure 11 WebODE view bounded to the divider concept.
WebODE has support for multiple-users. User groups can be created to collaborate in
the edition of ontologies. Several users can edit the same ontology without errors by
means of synchronization mechanisms. One important advantage of using this
18
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
application server is that we can decide which users or user groups may access each of
the services of the workbench.
This editor provides Web access and therefore, there is no need for any installation
activity ( http://kw.dia.fi.upm.es/wpbs/#download ) .
pOWL
pOWL (Auer, 2005) is a PHP-based open source ontology management tool. pOWL is
capable of supporting parsing, storing, querying, manipulation, versioning, serving and
serialization of RDFS and OWL knowledge bases in a collaborative Web enabled
environment.
pOWL does not follow any specific methodology for developing ontologies. It
supports heterogeneous data and its formal description. pOWL tries to follow the W3C
Semantic Web Standards. pOWL can import and export model data in different
serialization formats such as RDF/XML, and N-Triple.
pOWL is designed to work with ontologies of arbitrary size. This action is limited by
the disk space. Therefore, only some parts of the ontology are loaded into main
memory. The parts loaded are the ones required to display the information requested by
the user on the screen. It offers an RDQL (RDF Data Query language) query builder.
pOWL has a tab that correspond to the RDQL query builder. This RDQL is an
implementation of an SQL-like query language for RDF. It is possible to query the
knowledge base as well as a full-text search for literals and resources. pOWL has an
object oriented API. This means that all functionalities are accessed with a clean
application programming interface. Models are stored in database tables. It is possible
to edit and view models from different points of view.
Figure 12 View of the pOWL ontology editor showing the property elements of the coCondition.
pOWL’s architecture is formed by four tiers:
19
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
a) pOWL store: pOWL store stores its data in a relational database. This database is
used to store all the information concerning ontologies and their history.
b) RDFAPI, RDFSAPI, OWLAPI: In order to handle RDF, RDFS and OWL there
are three different APIs: RDFAPI, RDFSAPI and OWLAPI. All classes of
RDFSAPI are extended with methods for handling OWL predefined properties,
Description Logic axioms and restrictions, as well as basic subsumption inference
as Lassila and Swick (1999) stated.
c) pOWLAPI: The pOWLAPI includes classes and functions to build Web
applications. These web applications are built on top of the APIs already
described (Auer, 2005).
d) the user interface: The API that permits accessing, browsing, viewing and editing
data models in the pOWL store is the user interface. This interface is based on
PHP pages. It is possible to have three different viewpoints of an OWL
knowledge base: triple view, database view and a description logic axiom view.
The RDF statements can be viewed on the “triple” view. These statements are written
following this principle: subject/predicate/object. The knowledge base can be checked
as if it was an object-relational database. OWL classes are represented as tables. The
columns of the table represent the properties and the rows represent the instances. On
the Description Logic (DL) axiom view, the DL axioms are detected and represented
using DL. pOWL does not have a graph view but a tree view is shown on the left side
panel (see Figure 9). It has multi language support and has versioning control.
pOWL has the following available documentation: user documentation, installation
and administration documentation, developer documentation and application and usage
scenarios. pOWL Website has six public areas: an area for bugs, an area for support
requests, an area for feature requests, a public forum, a mailing list and a CVS
(Concurrent Version System) repository. All edits of a knowledge base may be logged
and rolled back. This will only depend on time, user and edit action.
pOWL requires a PHP enabled Web server and a database backend for storing data
models. pOWL is available under GNU Public license. The complete source code is
also available at http://sourceforge.net/projects/pOWL/.
SWOOP
SWOOP is a Web-based OWL ontology editor and browser. SWOOP contains OWL
validation and offers various OWL presentation syntax views. It has reasoning support
and provides a multiple ontology environment. Ontologies can be compared, edited and
merged. Different ontologies can be compared against their Description Logic-based
definitions, associated properties and instances. SWOOP’s interface has hyperlinked
capabilities so that navigation can be simple and easy. SWOOP does not follow a
methodology for ontology construction.
Users can reuse external ontological data (Kalyanpur et al., 2005). This is possible
either by purely linking to the external entity, or importing the entire external ontology.
It is not possible to do partial imports of OWL. There are several ways to achieve this,
such as a brute-force syntactic scheme to copy/paste relevant parts (axioms) of the
external ontology, or a more elegant solution that involves partitioning the external
ontology while preserving its semantics and then reusing (importing) only the specific
partition as desired.
20
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
It is possible to search concepts across multiple ontologies. SWOOP makes use of an
ontology search algorithm, that combines keywords with DL-based in order to find
related concepts. This search is made along all the ontologies stored in the SWOOP
knowledge base.
With SWOOP it is possible to have collaborative annotation using the Annotea plug-
in. This plug-in presents a useful and efficient Web ontology development. Users may
also download annotated changes for a given ontology. The plug-in is used by the users
to write and share annotations on any ontological entity. Different SWOOP users can
subscribe to the server. Users can maintain different version of the same ontology since
mechanisms exist to maintain versioning information using a public server.
SWOOP takes the standard Web browser as the User Interface paradigm. This Web
ontology browser has a layout that is well known by most of the users. There is a
navigation side bar on the left (Figure 12). The sidebar contains a multiple ontology list
and a class/property hierarchy of the ontology. The center pane works like an editor.
There is a range of ontology/entity renders for presenting the core content.
This editor provides support for ontology partitioning. OWL ontologies can be
automatic portioned into distinct modules each describing a separate domain. There is
also support for ontology debugging/repair. SWOOP has the ability to identify the
precise axioms that causes errors in an ontology and there are also natural language
explanation of the error. An automatic generation of repair plans to resolve all errors are
provided. To better understand the class hierarchy, a “CropCircles” visualization format
was implemented.
Figure 13 SWOOP view bounded to the e-tourism ontology
SWOOP is based on the conventional Model-View Controller (MVC) paradigm
(Figure 11). The SWOOP Model component stores all ontology-centric information
pertaining to the SWOOP workspace and defines key parameters used by the SWOOP
UI objects. A SWOOP ModelListener is used to reflect changes in the UI based on
changes in the SWOOP Model (Kalyanpur et al., 2005). Control is managed through a
21
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
plug-in based system. This system loads new Renders and Reasoners dynamically.
Therefore, it is possible to guarantee modularity of the code, and encourage external
developers to contribute to the SWOOP project easily.
SWOOP uses the Wonder Web OWL API. This API provides programmatic access to
data representing OWL ontologies. This API is used as the underlying OWL
representation model. It has Ontology Renderers that display statistical information
about the ontology, the annotations, the DL expressivity and the OWL species level.
There are default plug-ins for different presentation syntax for rendering ontologies. For
instance, there are the following presentations syntax RDF/XML, OWL and N3. It is
easy to install and has two public mailing lists available: General SWOOP (for users)
and Technical SWOOP (for developers). A SWOOP application can be downloaded
from http://www.mindswap.org/. After downloading the package, the user has only to
run the “runme” batch file.
SWOOP is developed as a separate Java application that attempts to provide the look
and feel of a browser-based application. Its architecture was designed to optimize OWL
browsing and to be extensible via a plug-in architecture.
Conclusion
Software tools are available to achieve most of the activities of ontology
development. Projects often involve solutions using numerous ontologies from external
sources. Sometimes there is also the need to use existing and newly developed in-house
ontologies. By this reason it is important that the editing tools for ontology construction
promote interoperability. As we have stated, Protégé is used for domain modeling and
for building knowledge-base systems. Protégé provides an intuitive editor for ontologies
and has extensions for ontology visualization, project management, software
engineering and other modeling tasks. It also provides interfaces for Description Logic
Reasoners such as Racer. Protégé ontologies can be exported into a variety of formats
including RDF(S), OWL, and XML Schema. It is a tool installed locally in a computer
and does not allow collaborative editing of ontologies by groups of users. There are
several plug-ins available for this tool.OntoEdit offers an ontology engineering
environment which allows creating, browsing, maintaining and managing ontologies.
This editor supports collaborative development of ontologies. The successor of
OntoEdit is OntoStudio. OntoEdit supports F−Logic, RDF Schema and OIL. The tool is
multilingual. The internal representation data model can be exported to DAML+OIL, F-
Logic, RDF(S), and OXML. The inference engine that OntoEdit uses is OntoBroker.
OntoEdit is based on a plug-in architecture as Protégé.
DOE allows users to build ontologies according to the methodology proposed by
Bruno Bachimont. This editor only permits the specification part of the process of
structuring ontology. It should be used in combination with another editor. A
differential ontology and a referential ontology can be built. It is possible to import
RDFS and OWL formats and it is possible to export to CGXML, DAML+OIL, OIL
Plain Text, OIL XML, RDFS, RDF/XML, and OWL. DOE uses XSLT to promote
interoperability.IsaViz is a visual environment for browsing and authoring RDF models
as graphs. IsaViz has a user friendly interface and has three different ways of viewing a
graph. IsaViz is also recognized by its ZUI. This interface allows rapid navigation of the
graphs used to represent the RDF models. IsaViz imports RDF/XML and N-Triples, and
exports RDF/XML, N-Triples, PNG and SVG.
22
Escórcio, L. and Cardoso, J. "Editing Tools for Ontology Construction", in "Semantic Web Services:
Theory, Tools and Applications", Idea Group. (scheduled for March 2007).
Copyright of authors until publication.
Ontolingua was built to ease the development of ontologies with a form-based Web
interface. It is a tool that supports distributed, collaborative editing, browsing and
creation of Ontolingua ontologies. Ontolingua uses an OKBC model with full KIF
axioms. The base language is Ontolingua. It is possible to compare ontologies. Users