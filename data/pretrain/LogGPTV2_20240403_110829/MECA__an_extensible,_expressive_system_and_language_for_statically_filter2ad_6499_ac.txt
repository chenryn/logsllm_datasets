15: }/*@ guard(cap, SYS ADMIN) */;
16:
17: void foo (struct S2* s2) {
18:
19:
20:
21:
22:
23:
24:
25: }
if (capable(s2−>cap, SYS ADMIN))
s2−>data = 0; /* OKAY */
else
s2−>data2 = 1; /* ERROR : no permission */
if (capable(s2−>cap, SYS RAWIO))
s2−>data2 = 0; /* ERROR : wrong permission */
s2−>useless = 1; /* OKAY */
Figure 9: An example for the capability checker.
set.” It emits an error if a protected object is accessed with-
out its required capability being held. For example, on the
true branch of the capability check on line 18, the ex-
tension records that the structure ﬁeld s2->cap holds the
capability SYS ADMIN. The checker uses this information to
determine that the access to s2->data on line 19 is safe.
However, it reports an error on the false branch at line 21,
since s2 does not have the right capability. It will similarly
report one error on line 23. No error will be reported on line
24 since useless is not protected.
7. CHECKING USER-POINTER ERRORS
This section is an in-depth case study of of how to use
MECA annotations to ﬁnd uses of tainted pointers. We
apply these ideas to Linux and measure their eﬃcacy and
annotation overhead.
7.1 The annotations
At a high level the checker mirrors the description in Sec-
tion 3. It deﬁnes a single tainted annotation. The program-
mer then manually inserts these annotations, writes global
annotators, and suppresses false positives from kernel back-
doors. The system then uses the ﬂow-sensitive worklist al-
gorithm described in Section 3 to propagate the annotations
along call chains and across function pointers.
Figure 10 depicts representative examples of annotations
inserted by the programmer for Linux code. These come
in two categories: (1) programmatic annotations that mark
chunks of code tainted or untainted and (2) more speciﬁc an-
notations that suppress false positives by selectively mark-
ing code as untainted or expressing data dependencies. We
discuss each below.
As described in Section 3 the programmer uses a global
annotation to mark all functions preﬁxed with the substring
“sys ” as tainted. They then do more precise annotations
such as:
/*@ tainted */ const void *from,
unsigned long n)
$param : ${!type is int()} ==> !tainted */
1 : /* linux-2.5.63/include/asm-i386/uacess.h */
2 : static inline unsigned long
3 : copy from user(/*@ POST:tainted (*to) */ void *to,
4 :
5 :
6 :
7 : /* linux-2.5.63/include/asm-i386/string.h */
8 :
9 : /*@ ﬁle global
10:
11:
12: /* linux-2.5.63/drivers/base/sys.c */
13: /*@ ﬁle global $param: !tainted */
14:
15: int sys register root(struct sys root * root){
16: }
17:
18: /* linux-2.5.63/ipc/shm.c */
19: asmlinkage long
20: sys shmat (int shmid, char *shmaddr,
21:
22:
23: /* linux-2.5.63/drivers/isdn/i4l/isdn tty.c */
24: isdn tty write(struct tty struct *tty, int from user,
25: /*@ from user ==> tainted */ const u char * buf,
26:
27:
28: /* linux-2.5.63/drivers/char/random.c */
29: static ssize t extract entropy(struct entropy store *r,
30: /*@ ﬂags & EXTRACT ENTROPY USER ==> tainted */
31:
32:
33:
34: /* linux-2.5.63/include/linux/module.h */
35: struct kernel symbol
36: {
37:
38:
39: }/*@ mc ignore */;
unsigned long value;
const char *name;
int shmﬂg, /* !tainted */ ulong *raddr)
int count)
void * buf,
size t nbytes, int ﬂags);
Figure 10: Representative programmer-inserted an-
notations taken from from Linux source ﬁles.
1. Lines 1-5: annotate the copy from user routine, which
is one of many “paranoid” functions used by Linux to
move data between user and kernel space. It has similar
annotations as copyin described in Section 3.1.
2. Lines 9-10: a ﬁle-scope global annotation that marks
all non-integer function parameters in “string.h” with
“!tainted” (i.e., not tainted), which implies it is an er-
ror to call any of these functions with a tainted pointer.
These functions are string functions (such as strlen,
strcpy) which dereference their arguments but are coded
in assembly, preventing our checker from analyzing them.
The ability to do a single global annotation gives a safe,
easy way to express this constraint.
The following two examples are representative of overriding
tainting annotations:
1. Lines 13: uses a ﬁle-scope annotation to untaint all the
parameters in “drivers/base/sys.c.” This ﬁle violates the
“sys ” naming convention: none of these functions are
true system calls, despite the preﬁx. This ﬁle annotator
overrides the previously described global annotator that
marks all sys functions as tainted.
The following two annotations suppress kernel backdoors:
1. Lines 24-26: shows an annotation for a “backdoor” func-
tion. Here, if the from user parameter is non-zero, then
the pointer buf is a user pointer. It is a safe, untainted
kernel pointer otherwise.
2. Lines 29-31: gives another more complex example.
If
the bitwise-and of the flag parameter and the constant
EXTRACT ENTROPY USER is non-zero then the parameter
buf should be tainted and not otherwise.
As described in Section 4 the system will analyzes functions
with these data-dependent annotations in two passes.
In
the ﬁrst example above, the system will assume from user
is zero (and buf is not tainted) when analyzing the body
of isdn tty write. A crucial feature is that during these
passes it automatically prunes all control paths that as-
sume from user is not zero. In the second, it will assume
from user is not zero (and buf is tainted). Again, the sys-
tem prunes paths that assume from user is zero. When a
call to a backdoor function is encountered, the from user
condition will be evaluated in the current calling context. If
it is true, the corresponding actual argument will be set to
be tainted.
Linux has a small number of backdoor functions. The ma-
jority of them are functions implementing one of three inter-
faces: (1) usb serial device type.write, (2) tty driver.write
and (3) isdn if.readstat. For such grouped functions we
only need to annotate one of them to make the others an-
notated through function pointer propagation.
In Linux,
adding 36 annotations is enough to annotate almost all back-
door functions.
By precisely suppressing the tainting caused by kernel
backdoors, we not only eliminate many false positives but
also ﬁnd more bugs, since they are not hidden in hundreds
of false error messages. In the case of Linux this suppression
allowed us to ﬁnd ﬁve additional errors, four of which would
allow a malicious user to print out arbitrary kernel data.
Finally,
lines 35-39 eliminate dangerous imprecision in
function pointer propagation.
In Linux all exported func-
tions via EXPORT SYMBOL will be assigned to the structure
ﬁeld kernel symbols.value. This assignment contains no
checking information whatsoever. Doing function pointer-
based propagation would be disastrous: if one function had
a tainted argument, then they all would, which would lead
to thousands of false positives. The programmer explicitly
annotates struct kernel symbols with the built-in anno-
tation “mc ignore” to suppress its use when propagating
annotations.
Annotations for this checker essentially follow the proce-
dure outlined in Section 4. We describe the checker speciﬁc
aspects of both the bottom-up and top-down propagation of
annotations respectively in the next two subsections.
7.2 Bottom-up analysis
We use the bottom-up inter-procedural propagation de-
scribed in Section 4 to propagate annotation up call-chains.
Within an individual function we use an extension to per-
form an intra-procedural analysis, annotating individual point-
ers as tainted or !tainted. The extension deploys a set of
customized rules to propagate annotations among expres-
sions.
2. Lines 19-21: gives a more precise override example, where
we mark the ﬁnal parameter to sys shmat as not tainted.
Figure 11 shows the propagation rules used in the tainted
checker. The Assign rule means that if p has annotation
p : τ, τ ∈ {tainted, tainted(∗p), tainted(p → f)}
q = p (cid:13) q : τ
p : τ, τ ∈ {tainted, tainted(∗p), tainted(p → f)}
q = (type)p (cid:13) q : τ
Cast
p : tainted
q = &p (cid:13) q : tainted(∗q)
Addr
Assign
we want parameters that are likely to be tainted and whose
values tend to be used as pointers.
Arith
p : tainted
q = p x (cid:13) q : tainted
(p x) : tainted
q = p (cid:13) q : tainted
s : τ → s : tainted
s.f : τ (cid:2) → s.f : tainted
ArithReverse
StructTrans
Figure 11: Tainting Checker propagation rules.
tainted, tainted(*p) or tainted(p->f), when the checker
sees q = p it will give q the same annotation. The Cast
rule shows that the annotations are preserved across casts.
This rule is needed because OS code often casts pointers
to integers and back. The Arith rule speciﬁes that doing
pointer arithmetic on a tainted pointer will not change its
taintedness. The ArithRerverse rule is the reverse of the
Arith rule. The Addr states that assigning the address of a
tainted pointer p to q will annotate q with tainted(*q).
The StructTrans rule is diﬀerent than the other rules be-
cause it speciﬁes a propagation rule when annotation changes.
Whenever a structure s becomes tainted, all its ﬁelds be-
come tainted, too.
7.3 Statistical annotation inference
We apply the techniques discussed in Section 5 to de-
rive annotations for formal parameters from actual param-
eters. For a given formal parameter, we have k number of
actual parameters marked as tainted, and n− k marked as
!tainted. Furthermore, we have u additional parameters
marked as unknown. We wish to rank formal parameters by
(1) how likely they are to be tainted and (2) the impact
they will have if we annotate them (§ 5.2).
The presence of unknowns posses an interesting problem.
For the tainted checker, a large number of unknown actual
parameters indicates that the value passed to a formal pa-
rameter is often not used as a pointer at all. Otherwise, a
single dereference of the actual parameter would have led
to an annotation of !tainted. Consequently, the presence
of unknowns, regardless of whether the function was passed
tainted pointers or not, may indicate that it is a polymor-
phic function that can take any pointer type. For our rank-
ing we want the parameters most likely to be annotated
tainted, so we wish to suppress such functions.
To accomplish this, we introduce the notion of compos-
ite types. For this problem, we have two types; the ﬁrst is
the type indicating whether or not the formal parameter is
tainted, the second is whether or not the value passed to the
formal parameter is really used as a pointer. We wish then
to rank parameters by their composite type assignment –
To be general, suppose we have two separate annotations
we can assign to a formal parameter. The ﬁrst annotation,
denoted A1, can take on types A or ¬A and the second an-
notation A2 can take on types B or ¬B. The set of possible
types for the aggregate annotation A1,2 = (cid:2) A1, A2 (cid:3) is then
the cross-product of the two sets of types: {(cid:2)A, B(cid:3), (cid:2)A,¬B(cid:3),
(cid:2)¬A, B(cid:3), (cid:2)¬A,¬B(cid:3)}.
Suppose we wish to rank formal parameters by how likely
they have annotation A1,2 = (cid:2)A, B(cid:3). We know how to com-
pute the score of each type s(A) and s(B) in isolation, and
wish to compute s(A ∧ B) for the aggregate annotation. A
score s(·), however, is just the p-value probability p(¬·), and
from DeMorgan’s laws and the basic axioms of probability
we get:
s(A ∧ B) = p(A ∧ B) = s(A) + s(B) − s(A ∨ B)
(3)
Furthermore, if we assume the type assignments to the ﬁrst
and second annotation are uncorrelated (and hence indepen-
dent), we have that:
s(A ∨ B) = p(A ∨ B) = s(A) · s(B)
(4)
These rules easily generalize for aggregate types involving
more than two annotations. We can then apply these rules
to rank formal parameters based on the score of their aggre-
gate types.
These axioms allow us to rank formal parameters for the
tainted checker in the desired manner. The composite value
want to rank by is (cid:2) tainted, isPointer (cid:3). Using Equa-
tions 3 and 4 we have the following score:
s(tainted ∧ isPointer) = s(tainted) + s(isPointer) −
(5)
s(tainted)s(isPointer)
Finally, we wish to rank parameters using our utility met-
ric (§ 5.2); this will cause formal parameters to be ranked
both by how likely they are to be tainted and the expected
impact they will have on increased annotation coverage and
error checking. Using Equations 2 and 5, our ﬁnal score we
use to rank parameters by is:
S = [1 − s(tainted ∧ isPointer)] × u
(6)
8. RESULTS
This section measures the eﬀectiveness of MECA. Several
terms are used throughout this section, so we deﬁne them
here.
1. Manual Annotation: The annotation string that must
be added by programmers by hand.
2. Global Annotator: Each programmatic annotation is
called a Global Annotator.
3. Root Annotations: Annotations that either come from
programmers (global annotators excluded) or annotated
by global annotators.
4. Derived Annotations: the number of formal parame-
ters p or their one-level dereference ∗p that were auto-
matically labeled by bottom-up analysis. Each such p or
∗p that went from being labeled unknown to tainted or
!tainted is counted once.
5. Check: we deﬁne a check as a program point where the
programmers can potentially make a mistake. For the
); /* Not a check. Infers p tainted */
copyin ( , r,
/* A check. Annotations for both r and bar’s ﬁrst
); /* Not a check. infers r tainted */
parm have already been infered*/
copyin ( , p,
1 : void bar (char* p) {
2 :
3 : }
4 :
5 : void foo(char* r) {
6 :
7 :
8 :
9 :
10: }
11:
12: void foo2(char* r) {
13:
14: }
bar(r);
bar(r);
Figure 12: This ﬁgure shows how we count checks
and construct the propagation graph.
user-pointer checker, we consider checks to occur at every
(1) pointer dereference and (2) when a pointer is passed to
an annotated function (the annotation can be inferred).
Note that we underestimate the number of checks be-
cause we only count program points where no inference
happens as checks. For example, the ﬁrst dereference of
an unknown pointer implies the pointer is not tainted
but performs no check (since the pointer is unknown);
we would only count subsequent dereferences of the same
pointer (if any) as checks. Figure 12 gives an example of
how we count.
6. Propagation Graph: Each node in the propagation
graph represents either (1) a derived annotation or (2) a
callsite argument where the argument a has some annota-
tion (tainted or !tainted) and the function parameter
it is passed to has a derived annotation. Note, this latter
count is done in this way to avoid counting “vacuous”
annotations — i.e., when an annotated variable is passed
to a function that has no annotation and hence leads to
no check. Each edge in the graph represents a possible
ﬂow of annotations from one parameter to another.
We elide local variables and expressions from the graph,
since these counts vastly inﬂate the graph size and make
it harder to evaluate eﬀectiveness.
For example, the propagation graph for Figure 12 con-
tains two subgraphs: one subgraph rooted from foo:r
consists of foo:r, the callsite bar:r at line 9, and the
callsite copyin( , p, ) at line 2. The other consists
of foo2:r, the callsite bar:r at line 13, and the callsite
copyin( , p, ) at line 2.
8.1 Annotation overhead
One of our key design goals is to minimize annotation
overhead. This section approximately measures how well
MECA meets this goal by counting the number of manually-
supplied annotations as well as the annotations derived from
these.
Table 1 counts the number of global annotators (4) and
the number of distinct places they automatically annotated
(694). The most eﬀective of these was the global system-call
annotator which tainted 637 system call parameters. There
were three ﬁle-scope annotators that marked 57 parameters
as !tainted (i.e., it is illegal to call them with a tainted
pointer). As stated before, the beneﬁt of these annotators
Annotation Type Global Annotator Roots Generated
tainted
!tainted
Total:
1
3
4
637
57
694
Table 1: The number of global annotators for the
tainted and !tainted qualiﬁers, and the count of the
places they annotated.
 10000
 8000
 6000