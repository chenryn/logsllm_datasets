# TISC 2020 CTF 题目分析及writeups
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 简介
TISC(The InfoSecurity Challenge) 2020 CTF
一共包含6道题目，主要涉及密码学、二进制、逆向等知识点，部分题目之间具备一定的连续性，下面对题目进行具体分析。
## STAGE 1：What is this thing?
连接服务后，指向一个zip文件连接。
    $$$$$$$$\ $$$$$$\  $$$$$$\   $$$$$$\
    \__$$  __|\_$$  _|$$  __$$\ $$  __$$\
       $$ |     $$ |  $$ /  \__|$$ /  \__|
       $$ |     $$ |  \$$$$$$\  $$ |
       $$ |     $$ |   \____$$\ $$ |
       $$ |     $$ |  $$\   $$ |$$ |  $$\
       $$ |   $$$$$$\ \$$$$$$  |\$$$$$$  |
       \__|   \______| \______/  \______/
    CSIT's The Infosecurity Challenge 2020
    https://play.tisc.csit-events.sg/
    CHALLENGE 1: What is this thing?
    ======================================
    SUBMISSION_TOKEN? LdWaGOgyfbVQromGEgmzfADJYNpGEPKLUgjiudRJfMoKzpXyklQgNqSxSQeNYGsr
    We noticed unusually network activity around the time that the user reported being ransomware-d.
    There were files being sent and recieved, some of which we were unable to inspect.
    Could you try to decode this?
    Reminder! SAVE ANY CODE YOU WROTE / TAKE SCREENSHOTS OF YOUR WORK, THIS WILL NEED TO BE SUBMITTED IN YOUR WRITEUP!
    CLARITY OF DOCUMENTATION WILL CONTRIBUTE TO A BETTER EVALUATION OF YOUR WRITEUP.
    The file is hosted at http://fqybysahpvift1nqtwywevlr7n50zdzp.ctf.sg:31080/325528f1f0a95ebbcdd78180e35e2699.zip .
    Flag?
该zip文件受到密码保护，里面包含一个名为`temp.mess`的文件：
    r10@kali:~/tisc$ unzip d9c8f641bd3cb1b7a9652e8d120ed9a8.zip
    Archive:  d9c8f641bd3cb1b7a9652e8d120ed9a8.zip
    [d9c8f641bd3cb1b7a9652e8d120ed9a8.zip] temp.mess password:
根据题目的介绍`they are using a simple password (6 characters, hexadecimal) on the
zip files`，可知解压密码为6位十六进制，采用暴力破解的方式就可以得到。在破解之前，先将zip文件转换为爆破工具john接受的格式，然后开始爆破：
    r10@kali:~/tisc$ zip2john d9c8f641bd3cb1b7a9652e8d120ed9a8.zip  > zip.hashes
    ver 2.0 d9c8f641bd3cb1b7a9652e8d120ed9a8.zip/temp.mess PKZIP Encr: cmplen=125108, decmplen=125056, crc=16B94B68
    r10@kali:~/tisc$ john --min-len=6 --max-len=6 --mask='?h?h?h?h?h?h' ./zip.hashes
    Using default input encoding: UTF-8
    Loaded 1 password hash (PKZIP [32/64])
    Will run 4 OpenMP threads
    Press 'q' or Ctrl-C to abort, almost any other key for status
    eff650           (d9c8f641bd3cb1b7a9652e8d120ed9a8.zip/temp.mess)
    1g 0:00:00:00 DONE (2020-09-17 11:18) 25.00g/s 9011Kp/s 9011Kc/s 9011KC/s 000650..fff750
    Use the "--show" option to display all of the cracked passwords reliably
    Session completed
得到解压密码为`eff650`。使用该密码解压，得到bzip2压缩格式的`temp.mess`文件：
    r10@kali:~/tisc$ unzip d9c8f641bd3cb1b7a9652e8d120ed9a8.zip
    Archive:  d9c8f641bd3cb1b7a9652e8d120ed9a8.zip
    [d9c8f641bd3cb1b7a9652e8d120ed9a8.zip] temp.mess password:
      inflating: temp.mess
    r10@kali:~/tisc$ file temp.mess
    temp.mess: bzip2 compressed data, block size = 900k
经过几个阶段的手动提取，对文件进行分析，该文件是一个包含不同格式及编码嵌套的文件，主要包括`bzip2 compressed` `hex encoding`
`base64 encoding` `xz compressed` `gzip compressed` `zlib
compressed`。依据这个思路，编写解压脚本：
    import shutil
    import magic
    import os
    import base64
    import zlib
    import hashlib
    import json
    def unpack(filename):
        try:
            typed = magic.from_file(filename)
        except Exception:
            # Problem with python2 magic
            typed = "zlib"
        if 'BS image' in typed:
            typed = 'zlib'
        new_filename = "unknown"
        out_file = "unknown"
        if "bzip2" in typed:
            new_filename = '{}b.bz2'.format(filename)
            shutil.copy(filename, new_filename)
            os.system("bzip2 -d {}".format(new_filename))
            out_file = '{}b'.format(filename)
        elif "ASCII text" in typed:
            data = open(filename, 'rb').read()
            if data.lower() == data:
                new_filename = '{}h'.format(filename)
                open(new_filename, 'wb').write(bytes.fromhex(data.decode("ascii")))
                out_file = new_filename
            else:
                new_filename = '{}f'.format(filename)
                open(new_filename, 'wb').write(base64.b64decode(data))
                out_file = new_filename
        elif "XZ compressed" in typed:
            new_filename = '{}x.xz'.format(filename)
            shutil.copy(filename, new_filename)
            os.system("xz -d {}".format(new_filename))
            out_file = '{}x'.format(filename)
        elif "gzip" in typed:
            new_filename = '{}g.gz'.format(filename)
            shutil.copy(filename, new_filename)
            os.system("gzip -d {}".format(new_filename))
            out_file = '{}g'.format(filename)
        elif "zlib" in typed:
            data = open(filename, 'rb').read()
            new_filename = '{}z'.format(filename)
            out_file = new_filename
            open(out_file, 'wb').write(zlib.decompress(data))
        elif 'JSON' in typed:
            data = open(filename, 'rb').read()
            print("Flag!")
            print(json.loads(data))
        return out_file
    def main():
        current = 'temp.mess_'
        os.system("rm temp.mess_*")
        shutil.copy('temp.mess', 'temp.mess_')
        for i in range(200):
            next_file = unpack(current)
            #print('{} -> {}'.format(current, next_file))
            current = next_file
            if current == 'unknown':
                return
    if __name__ == '__main__':
        main()
执行解压脚本得到flag：
    r10@kali:~/tisc$ python solver.py
    rm: temp.mess_*: No such file or directory
    Flag!
    {'anoroc': 'v1.320', 'secret': 'TISC20{q1_d06fd09ff9a27ec499df9caf42923bce}', 'desc': 'Submit this.secret to the TISC grader to complete challenge', 'constants': [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221], 'sign': 'cx-1FpeoEgqkk2HN70RCmRU'}
**Flag:** `TISC20{q1_d06fd09ff9a27ec499df9caf42923bce}`
## STAGE 2：Find me some keys
通过题目介绍可知，需要寻找一个完整的base64编码的公共秘钥：
    The key file will look something like this but longer:
    LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0NCmMyOXRaU0JpWVhObE5qUWdjM1J5YVc1bklHZHZaWE1nYUdWeVpRPT0NCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==
这里提供了一个名为`encrypted.zip` 的文件，解压得到一些docker文件，并且被后缀`.anoroc`加密：
    r10@kali:~/tisc$ unzip encrypted.zip
    Archive:  encrypted.zip
       creating: dockerize/
      inflating: dockerize/Dockerfile
      inflating: dockerize/anorocware
       creating: dockerize/encrypted/
     extracting: dockerize/encrypted/secret_investments.db.anoroc
       creating: dockerize/encrypted/images/
      inflating: dockerize/encrypted/images/slopes.png.anoroc
      inflating: dockerize/encrypted/images/lake.jpg.anoroc
      inflating: dockerize/encrypted/images/ridge.png.anoroc
      inflating: dockerize/encrypted/images/rocks.jp2.anoroc
      inflating: dockerize/encrypted/images/rollinginthed33p.png.anoroc
      inflating: dockerize/encrypted/images/yummy.png.anoroc
       creating: dockerize/encrypted/email/
     extracting: dockerize/encrypted/email/aqec62y3.txt.anoroc
    ...
     extracting: dockerize/encrypted/email/_7zp3gmy.txt.anoroc
     extracting: dockerize/encrypted/keydetails-enc.txt
     extracting: dockerize/encrypted/clients.db.anoroc
      inflating: dockerize/encrypted/ransomnote-anoroc.txt
通过分析，二进制的勒索文件`anorocware`是一个重要线索，该文件格式为`64-bit ELF`：
    r10@kali:~/tisc$ file anorocware
    anorocware: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped
查询该文件中包含是字符串，发现为UPX打包：
    r10@kali:~/tisc$ strings -a anorocware | grep 'packed'
    $Info: This file is packed with the UPX executable packer http://upx.sf.net $
利用`ups`工具解压：
    r10@kali:~/tisc$ upx -d anorocware
                           Ultimate Packer for eXecutables
                              Copyright (C) 1996 - 2017
    UPX 3.94        Markus Oberhumer, Laszlo Molnar & John Reiser   May 12th 2017
            File size         Ratio      Format      Name
       --------------------   ------   -----------   -----------       7406375 
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
    and "show warranty" for details.
    This GDB was configured as "x86_64-linux-gnu".
    ...
    gef>  br *0x662175
    Breakpoint 1 at 0x662175: file /home/hjf98/Documents/CSPC2020Dev/goware/main.go, line 246.
调试运行后，检查堆栈中的值，找到匹配的字符串：
    gef>  x/s $rcx
    0xc000435000:    "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJRUlEQU5CZ2txaGtpRzl3MEJBUUVG
    QUFPQ0JBMEFNSUlFQ0FLQ0JBRUFtOTliMnB2dHJWaVcrak4vM05GZgp3OGczNmRRUjZpSnIrY3lSZStrOFhGe
    nVIVU80TE4zdGs3NnRGUzhEYmFDY1lGaXVmOEdzdWdjUm1RREVyUFpmCnFna3ZYWnB1ZmZmVGZqVEIramUvV2
    k0M2J3THF0dzBXNGNYb1BXMzN1R1ZhV1pYMG9MektDL0F4Zzdrd0l0bUcKeG5uMzIxVEFqRVpnVGJMK09hTmt
    jSHpmUTdVendhRXA5VVB0VDhwR1lvTkpIbFgzZmtGcTJpVnk3N3VJNGdSSwpNZjh1alRma0lISGpRN0JFemdF
    Z2s4a3F4R2FTUGxJTlFzNjVQNHR2T3BpaHFwd1VWcEFqUExOQlR0OUh6MUYvCmZSK2FEc0pRUktaTk1yV1JMd
    U1ZaU8yTXg5Y1pCbnd6TDlLdUZSdkhlbE83QldheVU5ZjBYT3BnL3p5YkVRT0wKdXgram1zVXNUc1Fiaks5Y0
    I2N01hMjFEK1hKSHlLZ0t1UDl1MTRtVkNaZ0NCazlseWJTMWJ4ZHZGRFFQZ2t5YwpNM3o5dnV1Y0NVMUV1MkQ
    wbGhGbUozRlFmWmtBWSsrWEhVcGl3dWk5Tk8zQTlVRzdhbXlYYk9TY2xGMlg5a1JxCjBDd21xT3RCUkJFV0lT
    ZTVyZHpjL0FUT1AzUHFEakd3eVNYeFdaRENIOHJyZ256V3B2MkxyaVlRVG5mMmNFMEcKL2lJOFJ3allvR0xXe
    mVMVlJyMWhoWjhZNXM0Ui9zUjQ5N1dlbmtSY3BPTE9rRFZnZTdNdXNUT1doNGVOaTRnbwpQbGRzaVlUcVRuZE
    Exd1Y2N3IwOXVqcHA4VnZwZEx1bys0aCs3cC9wZnBYTXN4OGRBTG9tNHNma1ljSkhoT2JrCnh0NUNwTkNrVlh
    oNXRzR2hlRmI3djg1R2lORnkxN3p1YWxNZGEzMkJpblBlRWJGcnFLd0QyWjRSNVFnUXVCOHUKSXdqcVNUZ05v
    OVV2dmNoNmxXQ2JqOWUrODB1Z1Y0bzdqSENkLzU2Rmt1dmhDcWlJTmRaRFVVNFpCMzdoZGVsZgplRTlOYnhEa
    ktHOFY3YUNkd3FKSkRZR2l6LzNqbXVDZkIvazVGa29IU0FOZ2JMRTBBNVNtazNUOHR1djhTeitmCnY0cnJQeG
    1wbjhYMlNtMUZveitVMEJXelArVkxtcExubnlYa3JPSHluOGxKRmJuL1U1TldHUkxuK2V2MkNTa3cKQUkvVGZ
    IQUxxVHZqcWxHUXhUVGFZN1pua241aStEMUx6dEs4Y3BTWlhkRFZvUmgrL3ZNSUVpTnVrOCsrL3M2YQpITmQ3