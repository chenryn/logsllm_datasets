 digoal=# insert into iso_test values (1, 'test');
 digoal=# begin isolation level repeatable read;
 digoal=# select * from iso_test where id=1;
 id | info
 ----+------
 1 | test
 (1 row)
 -- 其他会话修改数据, 并提交
 digoal=# update iso_test set info='new' where id=1;
 -- 未出现不可重复读现象.
 digoal=# select * from iso_test where id=1;
 id | info
 ----+------
 1 | test
 (1 row)
事务隔离级别测试3
 -- 其他会话新增数据.
 digoal=# insert into iso_test values (2, 'test');
 INSERT 0 1
 -- 未出现幻象读
 digoal=# select * from iso_test ;
 id | info
 ----+------
 1 | test
 (1 row)
事务隔离级别测试4
 PostgreSQL repeatable read情景案例
 当repeatable read的事务去更新或删除在事务过程中被其他事务已经变更过的数据时, 将报错等待回滚.
 digoal=# truncate iso_test ;
 digoal=# insert into iso_test values (1,'test');
 digoal=# begin isolation level repeatable read;
 digoal=# select * from iso_test ;
 id | info
 ----+------
 1 | test
 (1 row)
 -- 其他事务更新或者删除这条记录, 并提交.
 digoal=# update iso_test set info='new' where id=1;
 UPDATE 1
 -- 在repeatable read的事务中更新或者删除这条记录. 会报错回滚
 digoal=# update iso_test set info='tt' where id=1;
 ERROR: could not serialize access due to concurrent update
 digoal=# rollback;
 ROLLBACK
事务隔离级别测试4
 先获取锁, 再处理行上的数据(例如做条件判断.)
 所以会有这种现象.
 -- 会话1
 digoal=# truncate iso_test ;
 TRUNCATE TABLE
 digoal=# insert into iso_test values (1,'test');
 INSERT 0 1
 digoal=# begin;
 BEGIN
 digoal=# update iso_test set id=id+1 returning id;
 id
 ----
 2
 (1 row)
 UPDATE 1
事务隔离级别测试4
 -- 会话2
 digoal=# select * from iso_test ;
 id | info
 ----+------
 1 | test
 (1 row)
 digoal=# delete from iso_test where id=1; -- 等待ctid=(0,1)的行exclusive锁
 -- 会话1, 提交事务
 digoal=# end;
 COMMIT
 -- 会话2, 此时会话2等待的这条ctid(0,1)已经被会话1删除了(如果会话2是repeatable read模式的话这里会报错).
 DELETE 0
 digoal=# select * from iso_test;
 id | info
 ----+------
 2 | test
 (1 row)
事务隔离级别测试5
 Serializable 隔离级别
 目标是模拟serializable的隔离级别事务的提交顺序转换为串行的执行顺序.
 例如 :
 Start session a serializable
 Start session b serializable
 Session a SQL …
 Session b SQL …
 Session a|b SQL …
 …. Session a|b SQL …
 Commit b
 Commit a
 这个场景模拟成 :
 Start session b
 Sql …
 Commit b
 Start session a
 Sql … 如果会话a读过的数据在B中被变更, 那么a会话将提交失败.
 Commit a
事务隔离级别测试5
 PostgreSQL 串行事务隔离级别的实现, 通过对扫描过的数据加载预锁来实现(内存中的一种弱冲突锁, 只在事务结束时判断是否有数据依赖
性的冲突)
执行计划
 因为涉及到扫描的数据, 所以这种锁和 有关.
 例如
 Select * from tbl where a=1;
 如果没有索引, 那么是全表扫描, 需要扫描所有的数据块.
 加载的预锁是表级别的预锁. (那么期间如果其他串行事务对这个表有任何变更, 包括插入,删除,更新等. 并且先提交的话.)
 这个会话结束的时候会发现预加锁的数据被其他串行事务变更了, 所以会提交失败.
 如果a上有索引的话, 执行计划走索引的情况下, 扫描的数据包括行和索引页.
 那么加载的预锁包含行和索引页.
 这种情况仅当其他串行事务在此期间变更了相对应的行或者是索引页才会在结束时发生冲突.
事务隔离级别测试5
 例子 :
 会话A :
 digoal=# select pg_backend_pid();
 -[ RECORD 1 ]--+------
 pg_backend_pid | 12186
 会话B :
 digoal=# select pg_backend_pid();
 -[ RECORD 1 ]--+------
 pg_backend_pid | 12222
 会话A :
 digoal=# truncate iso_test ;
 TRUNCATE TABLE
 digoal=# insert into iso_test select generate_series(1,100000);
 INSERT 0 100000
 digoal=# begin ISOLATION LEVEL SERIALIZABLE;
 BEGIN
 digoal=# select sum(id) from iso_test where id=100;
 -[ RECORD 1 ]
 sum | 100
事务隔离级别测试5
 会话 C :
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtrans
 action | pid | mode | granted | fastpath
 ----------+------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+-------------
 -------+-------+-----------------+---------+----------
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/157993
 | 12186 | AccessShareLock | t | t
 | virtualxid | | | | | 1/157993 | | | | | 1/157993
 | 12186 | ExclusiveLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/157993
 | 12186 | SIReadLock | t | f
 (3 rows)
 会话 B :
 digoal=# begin ISOLATION LEVEL SERIALIZABLE;
 BEGIN
 digoal=# select sum(id) from iso_test where id=10;
 -[ RECORD 1 ]
 sum | 10
事务隔离级别测试5
 会话 C :
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtrans
 action | pid | mode | granted | fastpath
 ----------+------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+-------------
 -------+-------+-----------------+---------+----------
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/157993
 | 12186 | AccessShareLock | t | t
 | virtualxid | | | | | 1/157993 | | | | | 1/157993
 | 12186 | ExclusiveLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433312
 | 12222 | AccessShareLock | t | t
 | virtualxid | | | | | 2/6433312 | | | | | 2/6433312
 | 12222 | ExclusiveLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/157993
 | 12186 | SIReadLock | t | f
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433312
 | 12222 | SIReadLock | t | f
 (6 rows)
事务隔离级别测试5
 会话 A :
 digoal=# insert into iso_test values (1,'test');
 INSERT 0 1
 会话 B :
 digoal=# insert into iso_test values (2,'test');
 INSERT 0 1
事务隔离级别测试5
 会话 C :
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtr
 ansaction | pid | mode | granted | fastpath
 ----------+---------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+----------
 ----------+-------+------------------+---------+----------
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/157993
 | 12186 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/157993
 | 12186 | RowExclusiveLock | t | t
 | virtualxid | | | | | 1/157993 | | | | | 1/157993
 | 12186 | ExclusiveLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433312
 | 12222 | AccessShareLock | t | t
事务隔离级别测试5
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433312
 | 12222 | RowExclusiveLock | t | t
 | virtualxid | | | | | 2/6433312 | | | | | 2/6433312
 | 12222 | ExclusiveLock | t | t
 | transactionid | | | | | | 316732564 | | | | 1/157993
 | 12186 | ExclusiveLock | t | f
 | transactionid | | | | | | 316732565 | | | | 2/6433312
 | 12222 | ExclusiveLock | t | f
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/157993
 | 12186 | SIReadLock | t | f
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433312
 | 12222 | SIReadLock | t | f
 (10 rows)
事务隔离级别测试5
 会话 A :
 digoal=# commit;
 COMMIT
 会话 C :
 digoal=# select relation::regclass,* from pg_locks where pid in (12186,12222);
 relation | locktype | database | relation | page | tuple | virtualxid | transactionid | classid | objid | objsubid | virtualtr
 ansaction | pid | mode | granted | fastpath
 ----------+---------------+----------+----------+------+-------+------------+---------------+---------+-------+----------+----------
 ----------+-------+------------------+---------+----------
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433312
 | 12222 | AccessShareLock | t | t
 iso_test | relation | 16384 | 92992 | | | | | | | | 2/6433312
 | 12222 | RowExclusiveLock | t | t
 | virtualxid | | | | | 2/6433312 | | | | | 2/6433312
 | 12222 | ExclusiveLock | t | t
事务隔离级别5
 | transactionid | | | | | | 316732565 | | | | 2/6433312
 | 12222 | ExclusiveLock | t | f
 iso_test | relation | 16384 | 92992 | | | | | | | | 1/157993