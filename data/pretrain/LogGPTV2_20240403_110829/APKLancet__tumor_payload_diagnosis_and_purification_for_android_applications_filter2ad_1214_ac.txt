# 恶意软件家族及其变种
- DroidDream
- DroidKungFu
- DroidKungFu2
- Geinimi Variant.A
- Geinimi Variant.B
- PJAPPS

| 项目       | DroidDream | DroidKungFu | DroidKungFu2 | Geinimi Variant.A | Geinimi Variant.B | PJAPPS |
|------------|------------|-------------|--------------|-------------------|-------------------|--------|
| 类         | 25         | 17          | 69           | 20                | 10                | 13     |
| 清除       | 是         | 是          | 是           | 否                | 是                | 是     |
| 条目       | 13         | 105         | 85           | 22                | 5                 | 0      |
| 清除       | 是         | 是          | 是           | 否                | 是                | 是     |
| 资源文件   | 10         | 3           | 3            | 3                 | 3                 | 4      |
| 清除       | 是         | 是          | 是           | 否                | 是                | 是     |
| 引用补丁   | 3          | 4           | 5            | 5                 | 5                 | 0      |
| 入口点补丁 | 0          | 1           | 3            | 3                 | 4                 | 5      |

表1：不同恶意载荷的特征

### 3.5 验证
APKLancet引入了一个验证过程，以确保净化后的应用程序能够正常工作，并且净化过程确实去除了不必要的行为。它从可行性和有效性两个方面评估净化效果。

#### 3.5.1 可行性
APKLancet采用了一种非常保守的策略，不允许新的异常在净化后导致宿主应用程序崩溃。净化应用的验证工作包含两个步骤。首先，在净化前手动启动并操作测试应用，并收集Android的日志输出。其次，在净化后再次启动测试应用并执行相同的操作。APKLancet将检查日志输出并与之前的记录进行比较，以确定应用程序是否正常运行或因净化而抛出任何异常或崩溃。

APKLancet没有采用随机测试方法（如使用Android Monkey）。为了确保净化后的APK仍然能够正常工作，APKLancet需要人工测试来处理复杂的GUI交互，例如密码登录。

#### 3.5.2 有效性
APKLancet通过静态和动态两种方式评估肿瘤代码切除的有效性。其静态评估方法利用了在线恶意代码分析引擎。如果净化前的APK包含肿瘤代码，则将其提交给VirusTotal[7]，以检查恶意特征是否仍然存在。这种方法评估净化是否识别到了恶意特征。此外，净化后的应用也会在真实设备上运行，以便APKLancet收集日志输出并验证诸如广告等特征是否被切除。

### 4. 评估
#### 4.1 一般测试
我们使用来自在线沙盒系统Sanddroid[6]的重新打包的应用程序对APKLancet进行了测试。表1显示了APKLancet如何拆分典型的肿瘤载荷的结果。结果表明，对于每个载荷，在净化过程中至少切除了10个类。为了更清晰地说明，我们将同一恶意软件家族的不同净化结果定义为不同的变种，并以Variant.A等形式标记。从结果可以看出，几乎所有恶意软件都添加或修改了原始应用的入口点，并且它们通常会对原始应用的良性部分进行简单的修改，或者添加额外的资源文件（如本地库或jar文件）来注入恶意行为。

为了进一步有效地评估APKLancet，我们从每个恶意软件家族中随机选择了16个应用程序（我们精心避免了用于构建特征数据库的样本，尽管这些样本所属的恶意软件家族应包含在我们的特征数据库中）。所选应用程序的特点是不仅包含恶意代码或第三方库（其中一些同时包含两者），而且所有这些应用程序都能在主流设备上的最新版本Android OS上良好运行。我们评估了恶意代码净化的详细结果。首先，根据我们的手动测试和Android的日志输出，所有测试应用程序均正常工作且未因异常而终止。此外，如表2所示（由AegisLab Antivirus提供的恶意软件家族信息），所有样本在净化后在VirusTotal检测结果中都有显著下降，这表明肿瘤载荷净化有效，并且恶意行为在一定程度上已被切除。尽管超过一半的样本在VirusTotal中未被任何杀毒引擎检测到，但我们注意到，VirusTotal中的少数杀毒引擎仍将净化后的应用程序视为恶意。经过手动检查这些净化后的样本，我们发现大多数情况下，同一个杀毒引擎会将样本分类为不同的恶意软件家族。触发警报的原因是一些第三方库（如分析插件和广告库）仍保留在应用程序中，但这些库既未被APKLancet也未被大多数杀毒软件定义为肿瘤载荷。因此，我们认为这是误报。

我们还评估了切除典型广告库的有效性。净化带有AdMob库的测试应用程序后，应用程序UI中的广告消失了（见图3）。此外，净化后日志输出中未发现指示AdMob存在的输出（如AdMob的URL或JavaScript代码）。与此同时，良性代码生成的日志信息在净化前后通常会重复出现。另一个案例是带有Flurry库的应用程序。如果加载了Flurry库，日志输出将显示以下信息：
```
D/FlurryAgent: Starting new session
D/FlurryAgent: Sending report to: http://data.flurry.com/aar.do
D/FlurryAgent: Report successful
```
即使执行相同用户操作，这些信息也不会出现在净化后的应用程序中。

#### 4.2 案例研究I：BaseBridge和Wooboo
我们研究的第一个案例是一个重新打包的应用程序com.caiping。APKLancet提取了应用程序中每个入口点类的模糊哈希特征。与之前构建的特征数据库相比，该应用程序中有10个类（com.android.view.custom.*）被检测为肿瘤代码索引类。然后，APKLancet使用算法1以这些索引类作为输入来识别载荷，并发现类jackpal.androidterm.Exec以及com.sec.android.providers.drm.*的所有类也是肿瘤代码。

定位到肿瘤代码载荷后，APKLancet发现主入口点caiping的直接基类是可疑的，并与BaseBridge恶意软件家族的特征相关联。
```
.class public Lcom/caiping/caiping;
.super Lcom/android/view/custom/BaseAActivity;
.source "caiping.java"
```
这意味着恶意代码修改了类继承关系，使得BaseAActivity类在原始入口点类之前执行。如果APKLancet简单地切除BaseAActivity类，caiping类的继承关系将被破坏。因此，APKLancet将caiping类的基类重定向到BaseAActivity的基类android.app.Activity。

修复主入口点类的原始继承关系后，APKLancet检查良性代码中的引用，发现有4个对BaseAActivity类的方法调用引用（onCreate、onCreateOptionsMenu 和 onOptionsItemSelected）。这些引用都位于主入口点类com.caiping.caiping中。正如上面提到的，类caiping是恶意类BaseAActivity的派生类，而BaseAActivity的基类是android.app.Activity。这4个方法调用引用应该指向android.app.Activity类中的方法。因此，APKLancet通过将调用方法的类从BaseAActivity替换为android.app.Activity来修补调用指令。对于应用程序中的肿瘤对象引用，未发现数据依赖关系，APKLancet只需切除良性代码中对Lcom/android/view/custom/BaseAActivity的直接引用。APKLancet还会清理清单文件中肿瘤代码类的声明。

最后，根据smali代码中搜索到的字符串：
```
const-string v0, "androidterm"
invoke-static {v0}, Ljava/lang/System;->loadLibrary(Ljava/lang/String;)V
```
相关的androidterm库（libandroidterm.so）应被切除。

净化和重新打包后，新的应用程序能够正常工作。然而，VirusTotal的测试结果显示，47个杀毒引擎中仍有15个报告该应用程序为恶意软件，且大多数将其归类为Wooboo恶意软件。我们手动检查了该应用程序，发现它包含一个未经授权的广告库Wooboo。因此，我们将Wooboo库的特征添加到APKLancet的数据库中，并重新执行净化过程。基于对Wooboo的直接知识，我们将WoobooAdView视为其索引类，并将索引类所在的整个包标记为载荷。这次，APKLancet将com.wooboo.adlib.android.*的所有类划分为肿瘤载荷。在良性代码中，APKLancet发现了四个对肿瘤载荷的引用，这些引用都直接指向类com.wooboo.adlib.android.WoobooAdView。因此，APKLancet递归地切除依赖指令和定义。净化后，净化的应用程序在手动测试下仍能正常工作，并且VirusTotal的所有47个引擎均未报告威胁。

#### 4.3 案例研究II：Geinimi
第二个案例是一个包含Geinimi恶意软件家族恶意代码的应用程序com.electricsheep.dj。根据APKLancet的特征数据库，以下类被识别为索引类：
- com.geinimi.AdServiceReceiver
- com.geinimi.AdService
- com.geinimi.custom.Ad1020_102001

然后，APKLancet以这些索引类作为输入执行算法1，并将com.geinimi.*的所有类划分为肿瘤载荷。划分肿瘤载荷后，APKLancet检查良性代码中的引用，但未发现对肿瘤载荷的引用。然而，APKLancet发现在清单文件中，如果切除肿瘤代码，主入口点将会缺失。根据APKLancet的修复策略，替代的主入口点应在清单文件中声明的所有启动器类中找到（见图4）。在这种情况下，APKLancet找到了合适的候选者DroidJumpActivity，并将其定义为新的主入口点类。进一步分析表明，插入的恶意入口点类将首先执行其自身功能，然后再启动DroidJumpActivity类。以下是几个smali文件中的代码片段，展示了启动原始入口点的行为（省略了异常处理部分的代码）：

AdService.smali:
```
...
const-string v0, "com.electricsheep.dj.DroidJumpActivity"
sput-object v0, Lcom/geinimi/AdService;->a:Ljava/lang/String;
...
```

AdActivity.smali:
```
...
```