### Decryption and Tracing Procedures

#### Decryption (Dec)
Given a ciphertext \( C \) and a user's secret key \( \text{sk}_{\text{id}} \), we can write \( C \) as \( C = (C_0, C_1, \ldots, C_\ell, R) \). Let \( x_{\text{id}} \) denote the vector corresponding to \( \text{sk}_{\text{id}} \). The decryption process computes:
\[ C \cdot x_{\text{id}} = C_0 - \sum_{i=1}^{\ell} C_i \cdot x_{\text{id}, i} \mod N^2. \]

Then, recover \( v_R \) from \( R \) and output:
\[ \left\langle v_R, x_{\text{id}} \right\rangle = \frac{C \cdot x_{\text{id}} - 1}{N} \mod N. \]

#### Tracing (Trace)
The tracing procedure, denoted as \( \text{Trace}(pd, S, R, OD) \), is described in Section 3. By exploiting the fact that the attacker makes random queries, we can improve the parameter sizes provided by [4] exactly as in Subsection 4.2. Specifically, the proof of Theorem 5 (Appendix F) in [4] can be modified to show that the advantage of the adversary in Game 3 is negligible even when \( \sigma \) is chosen as above, as detailed in Subsection 4.2.

### Key and Ciphertext Sizes
- **Public Key and Master Secret Key**: Both consist of \( O((t + r) \log N) \) bits.
- **Master Secret Key Bit-Length**: Can be reduced to \( O(\lambda) \) by storing only the seed of the pseudo-random generator used to create it. In this case, the master secret key can be recomputed every time the KeyGen algorithm is called.
- **User Secret Key (skid)**: Has a bit-length of \( O((t + r) \log N) \).
- **Vector \( p_{\text{id}} \)**: Also has a bit-length of \( O((t + r) \log N) \).
- **Ciphertext Size**: A plaintext in \( \mathbb{Z}_N \setminus \{0\} \) is mapped to a ciphertext of bit-length \( O((t + r) \log N) \).

To compensate for the number field sieve, we must choose \( \log N = \tilde{\Omega}(\lambda^3) \).

### Acknowledgments
We thank Benoît Libert for helpful discussions. The authors also extend their gratitude to the anonymous referees for their valuable comments and suggestions. Sanjay Bhattacherjee was funded by the "Programme Avenir Lyon Saint-Etienne de l’Université de Lyon" within the framework of the "Investissements d’Avenir" (ANR-11-IDEX-0007). Damien Stehlé was supported by the ERC Starting Grant ERC-2013-StG-335086-LATTAC. Duong Hieu Phan was supported by the ANR ALAMBIC (ANR-16-CE39-0006). Shota Yamada was supported by JSPS KAKENHI Grant Number 16K16068 and JST CREST Grant Number JPMJCR1688, Japan.

### References
[1] Michel Abdalla, Florian Bourse, Angelo De Caro, and David Pointcheval. 2015. Simple Functional Encryption Schemes for Inner Products. In PKC 2015 (LNCS). Springer, 733–751. https://doi.org/10.1007/978-3-662-46447-2_33

[2] Shweta Agrawal, Sanjay Bhattacherjee, Duong Hieu Phan, Damien Stehlé, and Shota Yamada. 2017. Efficient Public Trace and Revoke from Standard Assumptions. Cryptology ePrint Archive, Report 2017/650. (2017). http://eprint.iacr.org/2017/650

[3] Shweta Agrawal, Craig Gentry, Shai Halevi, and Amit Sahai. 2013. Discrete Gaussian Leftover Hash Lemma over Infinite Domains. In Advances in Cryptology – ASIACRYPT 2013, Part I (LNCS), Vol. 8269. Springer, 97–116. https://doi.org/10.1007/978-3-642-42033-7_6

[4] Shweta Agrawal, Benoît Libert, and Damien Stehlé. 2016. Fully Secure Functional Encryption for Inner Products, from Standard Assumptions. In Advances in Cryptology – CRYPTO 2016, Part III (LNCS), Vol. 9816. Springer, 333–362. https://doi.org/10.1007/978-3-662-53015-3_12

[5] Shweta Agrawal and Alon Rosen. 2016. Functional Encryption for Bounded Collusions, Revisited. Eprint. (2016).

[6] Shi Bai, Adeline Langlois, Tancrède Lepoint, Damien Stehlé, and Ron Steinfeld. 2015. Improved Security Proofs in Lattice-Based Cryptography: Using the Rényi Divergence Rather Than the Statistical Distance. In Advances in Cryptology – ASIACRYPT 2015, Part I (LNCS), Vol. 9452. Springer, 3–24. https://doi.org/10.1007/978-3-662-48797-6_1

[7] Boaz Barak, Oded Goldreich, Russell Impagliazzo, Steven Rudich, Amit Sahai, Salil Vadhan, and Ke Yang. 2012. On the (Im)Possibility of Obfuscating Programs. J. ACM 59, 2 (May 2012).

[8] F. Benhamouda, F. Bourse, and H. Lipmaa. 2017. CCA-Secure Inner-Product Functional Encryption from Projective Hash Functions. In Proc. of PKC (LNCS), Vol. 10175. Springer, 36–66.

[9] D. Boneh and M. K. Franklin. 1999. An Efficient Public Key Traitor Tracing Scheme. In Proc. of CRYPTO (LNCS), Vol. 1666. Springer, 338–353.

[10] Dan Boneh, Amit Sahai, and Brent Waters. 2011. Functional Encryption: Definitions and Challenges. In TCC 2011 (LNCS), Yuval Ishai (Ed.), Vol. 6597. Springer, 253–273.

[11] D. Boneh and B. Waters. 2006. A fully collusion resistant broadcast, trace, and revoke system. In Proc. of ACM CCS. ACM, 211–220.

[12] Zvika Brakerski, Adeline Langlois, Chris Peikert, Oded Regev, and Damien Stehlé. 2013. Classical hardness of learning with errors. In 45th ACM STOC. ACM Press, 575–584.

[13] B. Chor, A. Fiat, and M. Naor. 1994. Tracing Traitors. In Proc. of CRYPTO (LNCS), Vol. 839. Springer, 257–270.

[14] Yevgeniy Dodis and Nelly Fazio. 2003. Public Key Trace and Revoke Scheme Secure against Adaptive Chosen Ciphertext Attack. In PKC 2003 (LNCS), Yvo Desmedt (Ed.), Vol. 2567. Springer, 100–115.

[15] Amos Fiat and Moni Naor. 1993. Broadcast Encryption. In Proceedings of the 13th Annual International Cryptology Conference on Advances in Cryptology (CRYPTO '93).

[16] Craig Gentry, Chris Peikert, and Vinod Vaikuntanathan. 2008. Trapdoors for hard lattices and new cryptographic constructions. In 40th ACM STOC, Richard E. Ladner and Cynthia Dwork (Eds.). ACM Press, 197–206.

[17] S. Goldwasser, Y. Tauman Kalai, R. Popa, V. Vaikuntanathan, and N. Zeldovich. 2013. Reusable garbled circuits and succinct functional encryption. In Proc. of STOC. ACM Press, 555–564.

[18] Sergey Gorbunov, Vinod Vaikuntanathan, and Hoeteck Wee. 2012. Functional Encryption with Bounded Collusions from Multiparty Computation. In CRYPTO.

[19] Sergey Gorbunov, Vinod Vaikuntanathan, and Hoeteck Wee. 2013. Attribute-based encryption for circuits. In 45th ACM STOC. ACM Press, 545–554.

[20] Dennis Hofheinz and Christoph Striecks. 2014. A Generic View on Trace-and-Revoke Broadcast Encryption Schemes. In CT-RSA 2014 (LNCS). Springer, 48–63. https://doi.org/10.1007/978-3-319-04852-9_3

[21] Shuichi Katsumata and Shota Yamada. 2016. Partitioning via Non-linear Polynomial Functions: More Compact IBEs from Ideal Lattices and Bilinear Maps. In Advances in Cryptology – ASIACRYPT 2016, Part II (LNCS), Vol. 10032. Springer, 682–712. https://doi.org/10.1007/978-3-662-53890-6_23

[22] A. Kiayias and M. Yung. 2001. On Crafty Pirates and Foxy Tracers. In Proc. of DRM Workshop (LNCS), Vol. 2320. Springer, 22–39.

[23] A. Kiayias and M. Yung. 2001. Self Protecting Pirates and Black-Box Traitor Tracing. In Proc. of CRYPTO (LNCS), Vol. 2139. Springer, 63–79.

[24] Aggelos Kiayias and Moti Yung. 2002. Traitor Tracing with Constant Transmission Rate. In EUROCRYPT 2002 (LNCS), Lars R. Knudsen (Ed.), Vol. 2332. Springer, 450–465.

[25] Chong Hee Kim, Yong Ho Hwang, and Pil Joong Lee. 2003. An Efficient Public Key Trace and Revoke Scheme Secure against Adaptive Chosen Ciphertext Attack. In ASIACRYPT 2003 (LNCS), Chi-Sung Laih (Ed.), Vol. 2894. Springer, 359–373. https://doi.org/10.1007/978-3-540-40061-5_23

[26] A. Langlois, D. Stehlé, and R. Steinfeld. 2014. GGHLite: More Efficient Multilinear Maps from Ideal Lattices. In Proc. of EUROCRYPT (LNCS). Springer, 239–256.

[27] S. Ling, D. H. Phan, D. Stehlé, and R. Steinfeld. 2014. Hardness of k-LWE and Applications in Traitor Tracing. In Proc. of CRYPTO (LNCS), Vol. 8616. Springer, 315–334.

[28] Daniele Micciancio and Petros Mol. 2011. Pseudorandom Knapsacks and the Sample Complexity of LWE Search-to-Decision Reductions. In CRYPTO 2011 (LNCS), Phillip Rogaway (Ed.), Vol. 6841. Springer, 465–484.

[29] Dalit Naor, Moni Naor, and Jeffery Lotspiech. 2001. Revocation and Tracing Schemes for Stateless Receivers. In CRYPTO 2001 (LNCS), Joe Kilian (Ed.), Vol. 2139. Springer, 41–62.

[30] M. Naor and B. Pinkas. 2000. Efficient Trace and Revoke Schemes. In Proc. of Financial Cryptography (LNCS), Vol. 1962. Springer, 1–20.

[31] Hung Q. Ngo, Duong Hieu Phan, and David Pointcheval. 2013. Black-Box Trace&Revoke Codes. Algorithmica 67, 3 (2013), 418–448.

[32] Ryo Nishimaki, Daniel Wichs, and Mark Zhandry. 2016. Anonymous traitor tracing: how to embed arbitrary information in a key. In Eurocrypt. Springer, 388–419.

[33] Pascal Paillier. 1999. Public-Key Cryptosystems Based on Composite Degree Residuosity Classes. In EUROCRYPT'99 (LNCS), Jacques Stern (Ed.), Vol. 1592. Springer, 223–238.

[34] Chris Peikert. 2009. Public-key cryptosystems from the worst-case shortest vector problem: extended abstract. In 41st ACM STOC, Michael Mitzenmacher (Ed.). ACM Press, 333–342.

[35] Duong Hieu Phan and Viet Cuong Trinh. 2011. Identity-Based Trace and Revoke Schemes. In ProvSec 2011 (LNCS), Xavier Boyen and Xiaofeng Chen (Eds.), Vol. 6980. Springer, 204–221.

[36] Oded Regev. 2005. On lattices, learning with errors, random linear codes, and cryptography. In 37th ACM STOC, Harold N. Gabow and Ronald Fagin (Eds.). ACM Press, 84–93.

[37] Amit Sahai and Brent R. Waters. 2005. Fuzzy Identity-Based Encryption. In EUROCRYPT 2005 (LNCS), Ronald Cramer (Ed.), Vol. 3494. Springer, 457–473.

[38] D. R. Stinson and R. Wei. 1998. Combinatorial Properties and Constructions of Traceability Schemes and Frameproof Codes. SIAM J. Discrete Math. 11, 1 (1998), 41–53.

[39] D. R. Stinson and R. Wei. 1998. Key Preassigned Traceability Schemes for Broadcast Encryption. In Proc. of SAC (LNCS), Vol. 1556. Springer, 144–156.

### Additional Relevant Work
There are multiple parameters in trace-and-revoke systems that one desires to optimize, such as security definition, hardness assumption, public traceability, collusion size, and efficiency. The most general adaptive security definition for trace and revoke was provided by Boneh and Waters [11]. Here, the adversary is permitted to adaptively make key requests and must finally submit a pirate decoder. For the adversary to win the game, the pirate decoder must be useful, i.e., the challenger must be allowed to test it with various "probe" ciphertexts, and these must be decrypted with non-negligible probability. Additionally, the tracing algorithm must be able to output at least one user whose key was not requested by the adversary.

#### Strong Security for Trace and Revoke
The definition of usefulness of the pirate decoder involves a subtlety—in the strongest definition, the pirate decoder may be queried with ciphertexts that may encode a set of maliciously chosen revoked users [11]. Most constructions do not satisfy this strong notion of security; indeed, some schemes are actually insecure in this strong game.

For instance, in the schemes [14, 30], a probe ciphertext may be distinguished from a normal ciphertext using a revoked key. In the polynomial interpolation-based method in [30], to run tracing on a suspect set, the authority chooses a probe polynomial that agrees with the original polynomial on all the points in the suspected set. Therefore, if the suspected set contains all the traitor keys, the pirate cannot detect this change from the original polynomial to the probe polynomial, and the tracing works well. However, if the pirate knows one key (an evaluation of the original polynomial) in the revoked set, it can detect this change. This means that a revoked key is useless in decrypting ciphertexts but useful in detecting the presence of a tracing procedure. Therefore, the tracing algorithm from [30] does not allow the adversary to choose and corrupt keys of the revoked set in the tracing game.

#### Combinatorial Schemes
Another line of work constructs combinatorial schemes [13, 29–31, 38, 39], in contrast to the algebraic ones discussed so far. However, these are usually less efficient than the algebraic candidates, and the combination of trace and revoke is often studied in weaker security models.

#### Parameters Obtained with the NWZ Compiler
The NWZ compiler [32] may be instantiated with the bounded collusion functional encryption scheme from [18]. This results in a scheme that has a ciphertext size that depends polynomially on the size of the circuit used by NWZ, as well as quartically on the collusion bound \( r + t \). Since the circuit used by NWZ has an input size of \( O(r + t) \), the ciphertext size grows at least as \( O((r + t)^5 \text{Poly}(\lambda)) \).

If the compiler is instantiated with the bounded collusion scheme of [17] (compiled with [18]), then the ciphertext size still grows as \( O((r + t)^4 \text{Poly}(\lambda)) \), and moreover relies on the subexponential hardness of learning with errors in addition to heavy hammers such as fully homomorphic encryption and attribute-based encryption. We note that the \( \text{Poly}(\lambda) \) factors above are unspecified and possibly large. For instance, the circuit in [18] is represented using randomizing polynomials, which adds a polynomial factor blow-up. Similarly, using the bounded collusion FE of [5] leads to better asymptotic bounds \( O((r + t)^3 \text{Poly}(\lambda)) \) but also suffers from large polynomial factors, since again the circuit is represented using randomizing polynomials. Here, a quadratic factor \( (r + t)^2 \) is incurred by the query dependence of [5], and an additional factor \( (r + t) \) is incurred due to circuit size dependence.