title:Security Foundations for Application-Based Covert Communication Channels
author:James K. Howes IV and
Marios Georgiou and
Alex J. Malozemoff and
Thomas Shrimpton
2
5
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
2022 IEEE Symposium on Security and Privacy (SP)
Security Foundations for Application-Based
Covert Communication Channels
James K. Howes IV
University of Florida
Gainesville, FL, USA
PI:EMAIL
Marios Georgiou
Galois, Inc.
Portland, OR, USA
PI:EMAIL
Alex J. Malozemoff
Galois, Inc.
Portland, OR, USA
PI:EMAIL
Thomas Shrimpton
University of Florida
Gainesville, FL, USA
PI:EMAIL
Abstract—We introduce the notion of an application-based
covert channel—or ABCC—which provides a formal syntax for
describing covert channels that tunnel messages through existing
protocols. Our syntax captures many recent systems, including
DeltaShaper (PETS 2017) and Protozoa (CCS 2020). We also
define what it means for an ABCC to be secure against a passive
eavesdropper, and prove that suitable abstractions of existing
censorship circumvention systems satisfy our security notion. In
doing so, we define a number of important non-cryptographic
security assumptions that are often made implicitly in prior
work. We believe our formalisms may be useful to censorship
circumvention developers for reasoning about the security of their
systems and the associated security assumptions required.
Index Terms—Privacy-enhancing technologies, anonymity,
and censorship; security foundations
I. INTRODUCTION
A common approach to designing network-censorship
circumvention systems is to “tunnel” covert data—i.e., data
to be transmitted without raising the suspicions of censoring
adversaries—in network-bound messages produced by widely
used applications or protocol
implementations. A number
of recent works implement such application-based covert
channels (ABCCs),
including Castle [1], DeltaShaper [2],
FreeWave [3], Rook [4], Protozoa [5], and Balboa [6].
The first three of these systems share the design char-
acteristic that all embedding of covert bits is performed on
the “user-side” of the application. For example, Castle uses
desktop automation tools to encode bits as player actions in
a real-time strategy game, while DeltaShaper feeds a covert
message-carrying video stream to Skype via a virtual camera
interface. Since the result
to the
application, the covert bits may affect the application behavior
and its outputs.
is provided as an input
The last three of these systems perform embedding of
covert bits on the “wire-side” of the application. For example,
Rook modifies outgoing packets produced by a game client
in such a way that they carry covert bits but may still be
passed along to the receiving game server without altering
its behavior. Balboa intercepts outgoing packets produced by
an application and, with the help of side-information about
the data being communicated, compresses the packet payload
down to a short pointer and fills the reclaimed space with
covert bits.1