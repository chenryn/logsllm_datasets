**Title: Security Foundations for Application-Based Covert Communication Channels**

**Authors:**
- James K. Howes IV, University of Florida, Gainesville, FL, USA
- Marios Georgiou, Galois, Inc., Portland, OR, USA
- Alex J. Malozemoff, Galois, Inc., Portland, OR, USA
- Thomas Shrimpton, University of Florida, Gainesville, FL, USA

**Publication:**
2022 IEEE Symposium on Security and Privacy (SP)

**Abstract:**
We introduce the concept of an application-based covert channel (ABCC), which provides a formal syntax for describing covert channels that tunnel messages through existing protocols. Our syntax encompasses several recent systems, such as DeltaShaper (PETS 2017) and Protozoa (CCS 2020). We also define what it means for an ABCC to be secure against a passive eavesdropper and prove that suitable abstractions of existing censorship circumvention systems meet our security criteria. In this process, we identify and formalize a number of important non-cryptographic security assumptions often made implicitly in prior work. We believe our formalisms will be valuable for developers of censorship circumvention systems, enabling them to reason about the security of their systems and the associated security assumptions.

**Index Terms:**
Privacy-enhancing technologies, anonymity, censorship, security foundations

**I. Introduction**

A common approach to designing network-censorship circumvention systems is to "tunnel" covert data—i.e., data intended to be transmitted without raising the suspicions of censoring adversaries—through network-bound messages produced by widely used applications or protocol implementations. Several recent works have implemented such application-based covert channels (ABCCs), including Castle [1], DeltaShaper [2], FreeWave [3], Rook [4], Protozoa [5], and Balboa [6].

The first three systems (Castle, DeltaShaper, and FreeWave) share the design characteristic that all embedding of covert bits is performed on the "user-side" of the application. For example, Castle uses desktop automation tools to encode bits as player actions in a real-time strategy game, while DeltaShaper feeds a covert message-carrying video stream to Skype via a virtual camera interface. Since the result is provided as an input to the application, the covert bits may affect the application's behavior and its outputs.

In contrast, the last three systems (Rook, Protozoa, and Balboa) perform embedding of covert bits on the "wire-side" of the application. For instance, Rook modifies outgoing packets produced by a game client in such a way that they carry covert bits but can still be passed along to the receiving game server without altering its behavior. Balboa intercepts outgoing packets produced by an application and, with the help of side-information about the data being communicated, compresses the packet payload down to a short pointer and fills the reclaimed space with covert bits.