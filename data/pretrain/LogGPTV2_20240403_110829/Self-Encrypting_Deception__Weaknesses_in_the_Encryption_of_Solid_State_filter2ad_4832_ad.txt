from its ﬂash chips. We conﬁrmed that no previous copy of
ﬁle 97 exist once the process is completed. Other operations
causing ﬁle 97 to be changed (i.e. changing a password) do
not trigger the ﬁle system compaction, and hence a previous
version can be recovered. However, this is only useful to an
attacker in case a previous password is either known or easy to
guess. We found that previous copies of ﬁle 97 can typically
be recovered, until a ﬁle system compaction is issued. Besides
explicitly (as seen previously), this also happens in case the
ﬁle system runs out of free space. However, to the best of
our knowledge, no ﬁles are modiﬁed under normal behavior
limited to unlocking and reading/writing. Hence, these copies
are likely to linger for a signiﬁcant amount of time.
Cryptographically signed ﬁrmware updates
In addition to
information related to drive encryption, ﬁle 97 also contains
two secret keys for the encryption and signature veriﬁcation
of ﬁrmware updates. Both schemes are based on symmetric
cryptography. Thus, once these keys are obtained, they can
be used by an attacker to encrypt and sign custom ﬁrmware
updates, which will subsequently be accepted by all X600
drives. Sandisk seems to rely on the premise that it is infeasible
to obtain these keys and therefore sacriﬁces the security
beneﬁts of asymmetric cryptographic signatures in exchange
for performance.
Other ﬁndings We found that all encryption key material is
generated by means of a hardware RNG.
Attack strategy: In many cases, the contents stored on a
Sandisk X600 can be retrieved without a password. We make
a distinction between the case wherein only the global range is
deﬁned and password protected, and otherwise. In both cases,
we assume the drive runs a modiﬁed ﬁrmware that allows for
arbitrary modiﬁcations in the device’s address space, achieved
either by bypassing the signature veriﬁcation in the boot ROM,
or by any other means listed in Section V-B2.
Suppose that drive encryption is conﬁgured through ATA
security, or at least a single range is deﬁned besides the global
range. Then the RDS key, and hence all DEKs, are recoverable
by decrypting the anonymous KEK, located in ﬁle 97, with a
zero buffer as the key. This is already done during the drive’s
startup procedure. Thus, in order to access any protected range,
only the password validation routine need be modiﬁed so that
it accepts any password. Furthermore, some adjustments are
required in order to prevent the correct RDS key to become
overwritten with the result of a decryption with an incorrect
password. Finally, the protected range can be unlocked with
an arbitrary password.
In the other case, the anonymous KEK is absent from ﬁle
97, and all previous copies of it are erased from ﬂash. In this
case, the data on the drive is likely secure. However, in case the
user changed the password because it was compromised, the
data can likely be recovered using the compromised password.
This can be done by scanning through the raw ﬂash, looking
for previous copies of ﬁle 97. Once found, the current version
can be replaced with the previous one, and subsequently, the
drive can be unlocked using the compromised password.
E. Samsung 840 EVO
The Samsung 840 EVO is a SATA SSD released in 2013. It
supports ATA security, as well as TCG Opal version 2. At its
core is Samsung’s own MEX controller, built around a triple-
core Cortex R4 (ARM).
Firmware updates are downloadable through Samsung’s
website. They come as bootable ISO images. The ﬁrmware
image can be found within the ISO image, albeit
in an
obfuscated form. De-obfuscation is performed by the update
utility itself. Hence, recovery of the obfuscation algorithm is
straightforward. The obfuscation algorithm has been previ-
ously reverse engineered [24]. Once de-obfuscated, the image
is transferred to the drive using the ATA 92h DOWNLOAD
MICROCODE opcode. From this point onward, the ﬁrmware
update process takes place on the drive itself. The ﬁrmware
image is cryptographically signed with ECDSA. The curve
and its exact parameters are yet to be determined. The hash
function used is SHA256.
The 840 EVO has a JTAG interface with a proprietary pin
layout. It was found with help of the JTAGulator [23]. It was
independently found by [25].
Findings: Key derivation scheme Firstly, a data structure
is used by the ﬁrmware that provides for both password valida-
tion and key derivation. It contains two salts and a hash result.
Entries in the password storage table shown in Figure 3 are of
this structure. Password validation is performed by computing
PBKDF2, with the user-supplied password as key, over the ﬁrst
salt, Saltverif. If the output matches the hash result contained
within the data structure, validation succeeds. Subsequently,
the derived key is obtained by computing another PBKDF2
using the same password, over the second salt, Saltderiv.
Samsung’s Opal implementation allows for a
TCG Opal
total number of 9 ranges and 14 credentials to be speciﬁed.
For all 14 credentials, a table entry exists containing the
aforementioned password validation/derivation data structure.
Once the user-supplied password is validated against one of
the entries, the derived key is then used to decrypt an entry in
(cid:25)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
Password storage (14 entries)
#0
#1
#2
Saltverif
Saltderiv
Saltverif
Saltderiv
Saltverif
Saltderiv
...
Hash
Hash
Hash
#13
Saltverif
Saltderiv
Hash
Password ↔ range
mapping table
(14 × 9 entries)
Encrypted DEKs
(9 entries)
0
1
2
...
125
0
1
2
...
8
Password
Derive
Key 1
Decrypt
Key 2
Decrypt
DEK
Fig. 3. Relation between password and DEK on the Samsung 840 EVO
a table that maps credentials to ranges, i.e. this table is 9× 14
entries wide. Permission of a certain credential to access a
particular range is determined by the existence of an entry
in this table. Finally, the decrypted result is then used as a
key to decrypt an entry in the DEK table. This ﬁnal step is
required in order to support erasure of independent ranges
by re-generating its corresponding DEK, without requiring
knowledge of all passwords that unlock it. As such, all Opal
properties are cryptographically enforced. All the data required
in order to support this scheme is contained within a 64 KB
binary blob, which we refer to as, the crypto blob.
Vendor-unique commands The 840 EVO features several
vendor-speciﬁc commands. They are listed in Appendix B.
ATA security
The DEK may be cryptographically tied to
the ATA password. This depends on the value of the MASTER
PASSWORD CAPABILITY bit during the ATA security setup. In
case it is set to Maximum, the DEK cryptographically depends
on the User password. In High mode, however, there is no
dependency. Thus, this allows the encryption to be bypassed.
TCG Opal After reverse engineering and carefully studying
the design of the key derivation scheme used in the drive TCG
Opal implementation, we have not identiﬁed any weaknesses.
Random entropy
The 840 EVO has a hardware RNG.
However, in many situations, a pseudo RNG is used, which
works by encrypting an incrementing counter using the AES
co-processor. The pseudo RNG is seeded with data supplied
by the hardware RNG. All key material related to full-
disk encryption is also generated by the hardware RNG. We
assume that the output generated by the hardware RNG is
cryptographically secure.
Wear leveling The Samsung 840 EVO stores its crypto blob
within the device’s NAND ﬂash, within a region designated for
internal data structures. Despite this, the crypto blob storage
is wear-leveled. Suppose that at time t0, the drive is in an
unprotected state, i.e. neither ATA security nor TCG Opal is
set up. In this state, the drive has a single locking range deﬁned
that covers the entire user-accessible storage. The DEK for
this range is contained unprotected within the crypto blob. At
time t0, the crypto blob is stored at physical sector s0 in ﬂash.
Subsequently, at time t1, a password is set, either through ATA
security, with the MASTER PASSWORD CAPABILITY bit set to
Maximum, or through TCG Opal. As such, the password is
required in order to obtain the DEK from the crypto blob. The
updated crypto blob is stored at sector s1 in ﬂash.
Due to the wear leveling mechanism, s0 = s1 is not
guaranteed. Therefore, from time t1 onward, the DEK can be
recovered by retrieving the crypto blob from physical sector
Empirical measurements indicate that s0
s0. This is mitigated again as soon as s0 is overwritten. We
have successfully demonstrated this attack in practice. Once
a previous revision of the crypto-blob has been recovered, it
can be made active through a vendor-speciﬁc command (see
Appendix B).
(cid:2)= s1 occurs
approximately 1 in every 20 times the crypto-blob is stored
(i.e. every time crypto related information is updated). Fur-
thermore, s0 is overwritten within roughly one week of casual
ofﬁce use. As such, the attack vector is mostly theoretical, as
ﬁnding previous copies of the crypto blob at an arbitrary point
in time is very unlikely.
Attack strategy: Suppose that we want to recover the data
from a locked 840 EVO drive. The approach taken depends on
whether the drive is protected with the ATA security feature
set, with the MASTER PASSWORD CAPABILITY bit set to High.
If this is the case, then the DEK does not cryptographically
depend on the password. Hence, the only barrier we have to
overcome is the password validation routine. We connect a
JTAG debugging device and modify the password validation
routine such that it always validates successfully. Finally, we
unlock the drive as normal, with an arbitrary password.
If ATA security (with the MASTER PASSWORD CAPABILITY
bit set to Maximum) or TCG Opal is used, then the DEK is
cryptographically tied to the password. However, due to the
wear-leveling issue pointed out in Section VI-E, there is a
slight chance that the data on the drive can still be recovered
by reverting to a previous version of the crypto blob that was
used while the drive was in an unprotected state.
In order to do this, ﬁrst, we craft code that searches the
raw NAND ﬂash for crypto blobs, at the region designated for
internal data structures. Through JTAG, we load the code into
the device’s address space and execute it. For all crypto blobs
found, we determine whether it contains the unprotected DEK.
In case we ﬁnd a crypto blob with this property, we have all
the cryptographic secrets needed for a full recovery. Having
the previous version of the crypto blob at our disposal, the
next step is to instantiate it. A vendor-speciﬁc command exists
(see Appendix B) that conveniently allows us to do so. At this
point, in case the drive was protected through ATA security,
the contents are accessible. In the case of TCG Opal, the drive
still demands a password. However, this can be overcome by,
once more, crippling the password validation routine. Finally,
the drive can be unlocked with any password.
F. Samsung 850 EVO
The Samsung 850 EVO is a SATA SSD released in 2014.
Similar to the 840 EVO, it supports TCG Opal version 2. It
is based around Samsung’s MGX controller, which, contrary
to the 840 EVO, is a dual-core Cortex R4.
Similar to the 840 EVO, downloadable ﬁrmware images are
obfuscated. Although the obfuscation function is different, de-
obfuscation is still performed on the host PC. The ﬁrmware
image is again cryptographically signed with ECDSA. The
implementation is likely a copy of that of the 840 EVO. The
850 EVO has the same JTAG pin layout as the 840 EVO.
(cid:25)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:42:15 UTC from IEEE Xplore.  Restrictions apply. 
Stage 1
Else
Load stage 2 from NAND
Success
Stage 2
Fail
No resume image
Resume image exists
Emergency pin grounded
Emergency mode
Load ﬁrmware from NAND
Fail
Success
Failure
Resume from DEVSLP
Boot ﬁrmware
Fig. 4. Samsung 850 EVO boot process.
Findings: The motivation for analyzing the 850 EVO in-
ternals is twofold. Firstly, it is valuable to verify whether the
weaknesses identiﬁed in the 840 EVO are also present in its
successor. Secondly, the 850 EVO supports DEVSLP, and other
drives of the same family likely use the same or a very similar
implementation. In case DEVSLP is not implemented carefully,
it may compromise the encryption (see section IV-B2).
Key derivation scheme
The Opal key derivation scheme
has not changed signiﬁcantly since the 840 EVO. The im-
plementation is still based around a crypto blob, although its
size has doubled, resulting in a 128 KB crypto blob. The
exact reason for this remains to be researched. The Opal key
derivation scheme is identical. Furthermore, the vendor-unique
commands listed in Appendix B have remained unaltered.
DEVSLP mode
In case the DEVSLP signal is received, all
secret key information present in SRAM is encrypted using a
hardcoded key. The result is copied to DRAM. Subsequently,
four ‘magic’ numbers are written to DRAM, and ﬁnally, the
cores and SRAM are powered down.
In order to determine whether portions of secret key infor-
mation reach non-volatile storage, we reverse engineered the
boot process of the drive. A diagram picturing the code ﬂow
during the boot process is given in Figure 4.
The ﬁrst portion of code is, what we refer to as, the Stage 1
boot loader. Essentially, its purpose is to retrieve Stage 2 from
NAND and execute it. However, in case the emergency pin is
grounded, or in case the ﬁrmware cannot be retrieved, the drive
goes into an emergency state. In this state, the drive accepts
ﬁrmware images through a proprietary protocol layered over
UART. The protocol was reverse engineered by [25].
Once Stage 2 is reached, the DRAM is initialized. Shortly
after, the decision is made to either resume from a previous
state, or to perform a normal startup procedure. The decision
is made based on hardware I/O address 0x10050040, bit 3.
Before reverting to the previous state, a check is performed on
whether the magic numbers written to RAM previously have
remained unaltered.
No I/O addresses related to NAND are interacted with,
indicating that the DRAM is kept powered during DEVSLP.
We devised the following steps in order to conﬁrm it:
(i) Modify a ﬁrmware image, such that within the Stage 2
boot loader, all references to 0x10050040 are replaced
so that a DEVSLP resumption scenario is simulated.
Furthermore, at the point in the code where the magic
numbers are checked, an inﬁnite loop is inserted.
(ii) Modify the currently running ﬁrmware in RAM such that
it accepts ﬁrmware updates with invalid signatures.
(iii) Flash the modiﬁed ﬁrmware image through the ATA
0X92 DOWNLOAD MICROCODE command. The drive
will not reboot.
(iv) Send the DEVSLP signal. The drive goes into DEVSLP