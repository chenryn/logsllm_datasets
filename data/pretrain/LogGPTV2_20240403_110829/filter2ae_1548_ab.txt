        {
            if (DebugLog.IsDebug)
            {
                DebugLog.LogDebugMessage(string.Concat(new string[]
                {
                    "Illegal operation. Calling process (",
                    text3,
                    ") is not the same as process invoking method  (",
                    text2,
                    ")"
                }), DebugLog.IndentType.None);
            }
            throw new Exception("Invoking methods is not allowed.");
        }
    }
    namespace \u0007
    {
        // Token: 0x02000081 RID: 129
        internal sealed class \u0007
        {
            internal string \u0001(Process \u0002)
            {
                try
                {
                    string result = \u0002.get_MainModule().get_FileName();
                    return result;
                }
                …
            }
            …
        }
    }
以上代码在实例化时，首先通过`Assembly.GetEntryAssembly().get_Location()`获取 Client
的文件路径，并与通过`Process.MainModule.FileName`方法获取的 Client 模块路径进行对比，如果不一致则抛出异常。
`.Net`的运行时环境规定，拥有同样标识的`.Net`程序集只能被加载一次。由于`HP.SupportFramework.ServiceManager.dll`已经被
HPSupportSolutionsFrameworkService 加载，所以 HP 的开发人员认为此举可以有效阻止攻击者通过修改
PEB，并利用反射机制创建 ServiceInterface 来绕过认证。
然而，HP 的`.Net`开发人员显然是忽视了进程空间的安全边界。此处所做的检测仍然位于 Client 进程空间，如同修改 PEB 那样， Client
依旧拥有权限修改进程空间内的数据和代码。Client 可以采取多种方案绕过检测：
  1. 在实例化前，定位并修改`HP.SupportFramework.ServiceManager.dll`中的检测逻辑；
  2. 自己实现与 Server 的交互，认证，服务接口调用等；
  3. 静态 Patch 检测逻辑，并修改程序集`HP.SupportFramework.ServiceManager.dll`的标识，使修改后的文件可以被加载进 Client 进程空间。
其中方案3最为简洁，这里可以直接利用工具修改其判断逻辑为 `if (text3.ToLowerInvariant() ==
text2.ToLowerInvariant())`，并修改程序集的版本号（微软官方文档中描述了影响.Net可执行程序标识的属性包括：AssemblyCultureAttribute,
AssemblyFlagsAttribute, AssemblyVersionAttribute [3]）。最终实现对补丁的绕过，重新实现权限提升。
#### 补丁实现和绕过2
又一次，将漏洞和修补方案报告给 HP PSRT 后，HP 的开发人员从两个方面做了修补：
  1. 对 Client 的认证方式做调整，Server不再使用`Process.MainModule.FileName`获取Client的文件路径，而是通过`GetProcessImageFileName()`来获取，避免从PEB获取到被篡改的Client文件路径。
  2. 在 UncompressCabFile 和 DeleteFile 中，检查了参数里的文件/目录路径是否合法。
查看 UncompressCabFile 和 DeleteFile
里的文件/目录路径检测逻辑，发现其仅仅使用了字符串比较来检测路径是否合法，而不是对规范化后的路径进行检测。代码如下：
    internal static bool \u0001(string \u0002)
    {
        string[] array = new string[]
        {
            "AppData\\Local\\Hewlett-Packard\\HP Support Framework",
            Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\Hewlett-Packard\\HP Support Framework",
            SupportAssistantCommon.MainAppPath,
            SupportAssistantCommon.FrameworkPath
        };
        string[] array2 = array;
        for (int i = 0; i 
  2. Authentication and Authorization in WCF Services – Part 1  
  3. Setting Assembly Attributes  
* * *