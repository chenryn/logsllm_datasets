### Device Drivers and Sensory Data Reporting

Each hardware component is equipped with device drivers that report sensory data to the kernel. The type and frequency of this data vary depending on the specific hardware. Some components require event listeners to be registered with the Android API, while others necessitate polling the system for data. For the application context, the name of the active application was recorded using the Activity Manager API as users interacted with the mobile device. This information is used to determine the context of the model.

### Power Modality

To measure power consumption resulting from user activities, we utilized the built-in voltage and current sensors available in the battery driver of smartphones. Power consumption is proportional to the load, and while batteries exhibit nonlinear decay (reflected in voltage readings), current readings help offset this effect. Therefore, capturing voltage and current data is sufficient for modeling power consumption. These sensors report voltage and current to the operating system's kernel in units of micro-volts (µV) and micro-Ampere (µA), respectively. Voltage readings range from 4.35 V to 3.2 V, depending on the battery charge, while current readings depend on the activities performed by the Android Operating System. We poll the voltage every 5 seconds and the current every 1 second, taking an average of the recorded values every 5 seconds to calculate the average power consumption.

### Movement Modality

Movement data was recorded using the SensorEvent API, which is part of the standard Android SDK. Depending on the available hardware sensors, the API can report values from the accelerometer, gyroscope, magnetic field, light, pressure, and proximity sensors. For our analysis, we gathered movement data from the accelerometer and gyroscope. The accelerometer measures acceleration in SI units (m/s²) along the device’s local [X, Y, Z] axes, while the gyroscope measures the rate of rotation in SI units (rad/s) around the device’s local axes.

### Touch Modality

User-level touchscreen gestures, such as key-press, pinch and zoom, swipe, and other gestures, are reported as multiple events to an input driver. The touch event interface exists as a character device under `/dev/input` and can be read by programs with the necessary permissions. For security reasons, this input driver is protected, and only vendor programs have permission on unmodified commercially available Android devices. The device driver reports [X, Y] coordinates, the number of fingers touching the screen, the pressure of each finger, and the touch area of each finger. We capture these events with precise timing information directly from the low-level event streams and reconstruct them into user-level gestures.

### Data Collection Tool

Figure 2 illustrates the smartphone sensor data collection architecture. Our data collection application runs four services: PowerLogger, TouchLogger, GyroLogger, and ActivityLogger.

- **PowerLogger**: Collects voltage, current, and battery charge from the battery driver via the sys filesystem.
- **TouchLogger**: Reads the input events driver to collect system-wide touchscreen events. The touch driver is protected by the "input" system user group.
- **GyroLogger**: Uses the Android API to collect gyroscope and accelerometer data using a `SensorEventListener`.
- **ActivityLogger**: Records user activity on the device, including the top running application, incoming and outgoing calls, and screen-off and screen-on events.

These services are active during both training and testing phases, and their impact on overall system power consumption is minimal. We took measures to ensure that the constant noise in power consumption readings remains small.

### Experimental Design

The quality of the data collected in a study with volunteer participants is crucial. To achieve uniformity, we used the same device (Google Nexus 5 Model: LG-D820) and Android version 4.4.4 (Build number KTU84P) for all 73 volunteers. Each participant was asked to use Chrome and Facebook for two 45-minute sessions, with a 5-minute break for instructions. The sessions were repeated on two different days to capture the user's behavior effectively. Participants were allowed to perform any tasks within these applications but were restricted to remain in a room. No passwords or personal content were recorded, and data was stored in external storage directories and later extracted for analysis.

### Data Preparation

#### Feature Engineering

We performed feature extraction on the raw data from each modality:

- **Power Modality**: User activities were represented in milliwatts (mW) using voltage and current readings, forming a time-series.
- **Movement Modality**: Events were divided into sliding windows of size \( w \) units, moving \( w/2 \) units in the direction of increasing time. Fourteen features were extracted, including mean and standard deviation along each axis and resultant magnitude for both accelerometer and gyroscope readings.
- **Touch Modality**: Touch events were aggregated into gestures, and five features were extracted: duration, end-to-end distance, end-to-end direction, average pressure, and average touch area.

#### Data Cleaning and User Selection

We standardized the dataset using the mean and standard deviation of each feature. The data was divided according to application context, and only relevant events were extracted. Users who generated abnormally large or small datasets were discarded. A total of 59 users with comparable data sizes were selected. Sixty percent of each user's dataset was used for training, and the remaining 40% for testing.

### Analysis to Compute Authentication

We view authentication as determining whether the current stream of measurements follows the same distribution as the baseline session for a given user. We use two groups of analysis techniques:

- **Strangeness-Based Outlier Detection (StrOUD)**: Adapted from Barbara et al. [16], this method uses transduction to detect outliers in multivariate data.
- **Univariate Time-Series Analysis**: Based on Keogh et al. [17], this method is used for univariate time-series data like power measurements.

#### Strangeness-Based Outlier Detection

StrOUD utilizes transduction, a machine learning technique that reasons from specific (baseline) cases to specific (testing) cases. It places a point in a known sample distribution and uses hypothesis testing to determine if it is a good fit. Strangeness, a measure of uniqueness, is used for every point in the distribution. The 'models' are captured in the distribution of uniqueness values for each class. Statistical hypothesis testing aims to prove or disprove one of the hypotheses.