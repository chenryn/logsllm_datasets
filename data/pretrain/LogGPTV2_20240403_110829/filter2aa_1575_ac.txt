data, _, err = handle.ReadPacketData() 
if err != nil { 
continue 
} 
err = parser.DecodeLayers(data, &decoded) 
if err != nil { 
continue 
} 
if !dns.QR { 
continue 
} 
if dns.ID != r.dnsid { 
continue 
} 
atomic.AddUint64(&r.recvIndex, 1) 
if len(dns.Questions) == 0 { 
continue 
} 
subdomain := string(dns.Questions[0].Name) 
r.hm.Del(subdomain) 
if dns.ANCount > 0 { 
atomic.AddUint64(&r.successIndex, 1) 
result := core.RecvResult{ 
Subdomain: subdomain, 
Answers:   dns.Answers, 
} 
r.recver  ") 
} 
if !notPrint { 
screenWidth := windowsWidth - len(msg) - 1 
if !r.options.Silent { 
if windowsWidth > 0 && screenWidth > 0 { 
gologger.Silentf("\r%s% *s\n", msg, screenWidth, "") 
} else { 
gologger.Silentf("\r%s\n", msg) 
} 
// 打印一下结果,可以看得更直观 
r.PrintStatus() 
} else { 
gologger.Silentf("%s\n", msg) 
} 
} 
if isWrite { 
w := bufio.NewWriter(foutput) 
_, err = w.WriteString(msg + "\n") 
if err != nil { 
gologger.Errorf("写入结果文件失败.Err:%s\n", err.Error()) 
} 
_ = w.Flush() 
} 
} 
} 
runner.PrintStatus 任务情况输出
每来一次结果就会输出 任务情况 
还有在  RunEnumeration  定时器 每1s也会输出一次
通过定时器和状态表阻塞主进程
t := time.NewTicker(1 * time.Second) 
defer t.Stop() 
for { 
select { 
case  0 && v.Retry > r.maxRetry { 
r.hm.Del(key) 
atomic.AddUint64(&r.faildIndex, 1) 
return nil 
} 
if int64(now.Sub(v.Time)) >= r.timeout { 
// 重新发送 
r.sender = timeSince { 
break 
} 
if (now-start)%1000 == 0 && now-start >= 900 { 
tickIndex := index / tickTime 
gologger.Printf("\r %ds 总发送:%d Packet 平均每秒速度:%dpps", tickTime, index, tickIndex) 
} 
} 
now = time.Now().UnixNano() / 1e6 
tickTime := (now - start) / 1000 
tickIndex := index / tickTime 
gologger.Printf("\r %ds 总发送:%d Packet 平均每秒速度:%dpps\n", tickTime, index, tickIndex) 
} 
总结
通过学习ksubdomain 更加深了对go的理解和对无状态的理念 
也学到了几个有意思的点 dnsid可以控制 对pcap包的使用 漏桶限流 测试数据包速率通过改一个错误
mac地址的方式 定时器的使用等等 因为我本身对go语言的理解比较浅显 有些地方可能有错误 欢迎指出
来