何时扩展b
a=b
立即
延后
a?=b
下
延后
a:=b
立即
立即
a+=b
立即
延后或立即
definea
立即
延后
b...
b...
b...
endef
一个通则是：总是先定义变量和宏，然后再使用它们。尤其是，在工作目标或必要条件
中使用变量时，就需要在使用变量之前先予以定义。
举例说明，你会更清楚。假设我们要定义一个free-space宏。接下来我们会一次说
明一个部分，最后再把它们组合在一起。
BIN
utq/xsn/=：
PRINTF :=S（BIN)/printf
DF
:=$（BIN)/df
AWK:=$(BIN)/awk
我们定义了三个变量，用来保存宏中所用到的程序的名称。为了避免重复，我们把bin
目录抽离而成为第四个变量。当make读进这四个变量的定义时，它们的右边部分都会
被立即扩展，因为它们都是简单变量。BIN变量会被定义在其他三个变量之前，所以它
的值会被塞进其他三个变量的值里。
接着，我们定义了free-space宏。
define free-space
$（PRINTF)*Free disk space*
S（DF）.1$（AWK）·NR==2（DrintSS4）
endef
---
## Page 70
60
第三章
紧跟在define指令之后的变量名称会被立即扩展，但就此例而言，并不需要进行扩展
的动作。当make读进宏的主体时会予以储存，但不会将之扩展。
最后，我们会在一个规则中使用free-space这个宏。
OUTPUT_DIR:=/tmp
$(OUTPUT_DIR)/very_big_file:
$（free-space)
当s（OUTPUT_DIR)/very_bigfile规则被读取时，工作目标和必要条件中所用到所有变
量都会被立即扩展。其中，$（OUTPUT_DIR）会被扩展成/tmp，所以整个工作目标会变
成/tmp/very_big_file。接着，make会读取这个工作目标的命令脚本，它会将前置跳格
符的文本行视为命令行，加以读取并将之存储起来，但是不会进行扩展的动作。
下面就是以上所提到的makefile的完整范例。此处刻意将makefile的构成元素的次序打
乱，以展示make的求值算法（evaluationalgorithm）。
OUTPUT_DIR：=/tmp
$(OUTPUT_DIR)/very_big_file:
$（free-space)
define free-space
S（DF）.1S（AWK）NR==2（printSS4}
endef
BIN:=/usr/bin
PRINTF :=S(BIN)/printf
JP/(NI）S=:
AWK:=S（BIN)/awk
请注意，尽管makefile中各个构成元素的次序似乎搞反了，不过运行起来却毫无问题。
这就是递归变量出人意料的效果之一。虽然这相当有用，但这同时也令人相当困惑。此
makefile之所以能够运作无误，是因为脚本和宏主体的扩展动作将会被延后到它们实际
被使用的时候。因此，它们出现在文件中的先后次序对makefile的运行毫无影响。
第二阶段进行的时候，也就是make读进makefile之后，make会针对每项规则寻找工作
目标、进行依存分析以及执行动作。此处只找到S（OUTPUT_DIR）/very_big_file这个
工作目标，因为此工作目标并未依存于任何必要条件，所以make会直接执行相应的动作
（假定工作目标所代表的文件不存在）。make所要执行的动作就是S（free-space）这个
命令脚本。所以make会将之扩展，整个规则会变成下面这样：
/tmp/very_big_file:
/usr/bin/printf “Free disk space"
/usr/bin/df.1/usr/bin/awk'NR==2{print SS4}
---
## Page 71
变量与宏
61
一且所有的变量都被扩展之后，make会每次执行命令脚本里的一个命令。
事实上，makefile文件中有两处的次序很重要。正如稍早所说，工作目标S（OUTPUT_
DIR)/very_big_file会被立即扩展。如果变量OUTPUT_DIR的定义被放在规则之后，那
么工作目标扩展之后会变成/very_big_file，这或许不是用户想要的结果。同样地，如果
BIN的定义被放在AWK的后面，那么另三个变量将依次会被扩展成/printf、/df和/awk
因为：=会使得make对赋值运算符的右边部分立即进行求值的动作。然而，这个时候，
我们可以通过将：=替换成=的方式，将PRINTF、DF和AWK变更为递归变量来避免此
问题。
最后，请注意，将OUTPUT_DIR和BIN的定义变更为递归变量，并不会对前面的次序
问题有任何的影响。重点在于S（OUTPUT_DIR)/very_big_file工作目标以及PRINTF、
DF和AWK的右边部分是在何时被扩展的，因为它们会被立即扩展，所以它们所引I用的
变量必须在事先被定义好。
工作目标与模式的专属变量
在makefile运行期间，变量通常只有一个值。对需要经过两个处理阶段的makefile来说
是这样没错。第一个阶段，make读进makefile之后，会对变量进行赋值和扩展的动作并
建立依存图。第二阶段，make会分析以及遍历依存图。所以，等到make执行命令脚本
的时候，所有变量都已经处理完毕了。但是如果我们想为特定的规则或模式重新定义变
量，该怎么办？
现在，我们想要编译一个需要额外命令行选项-DUSE_NEW_MALLOC=1的文件，但是
其他的编译项目并不需要这个额外的命令行选项：
gui.o: gui.h
$(COMPILE.C)-DUSE_NEW_MALLOC=1$(OUTPUT_OPTION)$<
如上所示，我们解决此问题的办法是复制编译命令脚本以及为它加入这个必要的选项。
如果这个规则有任何变动，或是我们选择以自定义的模式规则来取代这个内置规则，那
么我们就必须对这个部分进行更新，不过我们可能会忘掉此事。其次，如果有许多文件
需要经过类似的特别处理（假设有100个文件），整个工作马上就会变得长乏味、易于
出错。
为解决此类问题，make提供了工作目标的专属变量。这些变量的定义会附加在工作目标
之上，且只有在该工作目标以及相应的任何必要条件被处理的时候，它们才会发生作用。
通过使用此功能，我们可以把前面的例子改写成这个样子：
---
## Page 72
62
第三章
gui.O:CPPFLAGS +=-DUSE_NEW_MALLOC=1
gui.o:gui.h
$(COMPILE.C)$（OUTPUT_OPTION)$<
变量CPPFLAGS内置在默认的C编译规则里，用来保存供C预处理器（preprocessor）
使用的选项。通过使用+=附加运算符，我们可以把这个新的选项附加到任何已存在的
值里。现在可以把编译命令脚本整个移除：
gui.O:CPPFLAGS +=-DUSE_NEW_MALLOC=1
gui.o: gui.h
当make处理gui.o这个工作目标的时候，CPPFLAGS的值除了包含它原有的内容，还会
包含-DUSE_NEW_MALLOC=1。当make处理完guio这个工作目标之后，CPPFLAGS的
值将会恢复它原有的内容。
工作目标的专属变量的语法如下所示：
target...:variable=value
target...:variable:= value
target...:variable+=value
target...:variable ?=value
如你所见，以上的语法只能用来定义工作目标的专属变量。此类变量在被赋值之前，并
不需要事先存在。
此外，这类变量的赋值动作会延后到开始处理工作目标的时候进行。所以赋值运算符右
边部分的值，可由另一个工作自标的专属变量来设定。同样地，此变量只有在必要条件
的处理期间，才会发生作用。
变量来自何处
到目前为止，我们所看到的大部分变量都会被明确地定义在makefile文件中。其实变量
可以更复杂。举例来说，我们曾看到过，变量被定义在make命令行上。事实上，make
的变量可以有以下几个来源：
文件
当然，变量可以被定义在makefile中，或是被makefile引I人（稍后我们将会说明
include指令）。
命令行
你可以直接在make命令行上定义或重新定义变量：
$ make CFLAGS=-g CPPFLAGS='-DBSD -DDEBUG
---
## Page 73
变量与宏
63
每个命令行参数中所包含的等号（=），都是一个变量赋运值算符。在命令行上，每
个变量赋值运算符的右边部分必须是一个单独的shell参数。如果变量的值（或变
量本身）包含空格，则必须为参数加上括号或是规避空格。
命令行上变量的赋值结果将会覆盖掉环境变量以及makefile文件中的赋值结果。你
可以使用：=或=赋值运算符将命令行参数设定成简单或递归变量。此外，如果使用
override指令，你还可以要求make采用makefile的赋值结果，而不要采用命令
行的赋值结果。
使用big-endian对象，否则程序会无法运行！
override LDFLAGS = -EB
当然，你只应该在非常紧迫的状况下，忽略用户所要求的赋值动作（除非你想惹怒
用户）。
环境
当make启动时，所有来自环境的变量都会被自动定义成make的变量。这些变量具
有非常低的优先级，所以makefile文件或命令行参数的赋值结果将会覆盖掉环境变
量的值。不过，你可以使用--environment-overrides（或-e）命令行选项，让
环境变量覆盖掉相应的makefile变量。
当make被递归调用时，有若干来自上层make的变量会通过环境传递给下层的
make。默认情况下，只有原先就来自环境的变量会被导出到下层的环境之中。不
过，你只要使用export指令就可以让任何变量被导出到环境之中：
eXport CLASSPATH:=$(HOME)/c1asSes:$(PROJECT)/claSSes
SHELLOPTS=-X
export SHELLOPTS
要将所有变量全部导出，可以这么做：
export
请注意，即使这些变量的名称包含了无效的shell变量字符，make也会进行导出的
动作。例如：
export valid-variable-in-make = Neat!
show-vars:
env1grep^valid-
valid_variable_in_shell=Great
invalid-variable-in-shell=Sorry
$ make
env|grep·^valid-
valid-variable-in-make=Neat!
valid_variable_in_shell=Great
invalid-variable-in-shell=Sorry
/bin/sh:1ine 1:invalid-variable-in-shell=Sorry:command not found
make:***[show-vars]Error 127
---
## Page 74
64
第三章
通过导出valid-variable-in-make这个变量，一个“无效的”变量被创建了。虽
然无法通过一般的shell语法来访问valid-variable-in-make变量，但是你可以
要些小手段，像是对环境变量运行grep。不过，这个变量将会被任何下层的make
所继承。在该处，此变量不仅有效而且可供访问。我们将会在第二部分说明make
的“递归”用法。
此外，你还可以通过如下的方式避免环境变量被导出到子进程：
unexport DiSPLAY
指令export、unexport的作用和sh命令中的export、unset一样。
佳解决方案：
#假设输出目录为S（PROJECT_DIR）/out
OUTPUT_DIR ?=S(PROJECT_DIR)/Out
这样，make只会在OUTPUT_DIR尚未定义的状况下进行赋值的动作。此外，使用
如下的较长的方式也可以得到几乎一样的结果：
ifndefOUTPUT_DIR
假设输出目录为S（PROJECT_DIR）/OUt
OUTPUT_DIR=$(PROJECT_DIR)/out
Endif
其中的差别在于，如果变量的值已经设定，那么即使是空值，条件赋值运算符也会
跳过赋值的动作，而运算符ifdef和ifndef只会测试“非空值”。因此，我们会
使用条件运算符而不会使用ifdef来对OUTPUT_DIR=赋值。
切记，过多使用环境变量将会大大降低makefile的可移植性，因为其他用户不太可
能会设定跟你完全一样的环境变量。事实上，我不太使用此功能就是因为这个原
因。
自动创建
最后，make会在执行一个规则的命令脚本之前立刻创建自动变量。
传统上，环境变量可协助开发者管理机器之间的差异。常见的做法就是根据makefile文
makefile将会以环境变量指向每个目录树的根目录。如果能够从PROJECT_SRC变量引
用源文件树、从PROJECT_BIN引I用二进制输出文件以及从PROJECT_LIB引I用程序
库，那么开发者就可以依照需要将这些目录树放到适当的地方。
这么做会有一个潜在的问题：如果这些指向根目录的变量的值并未设定，将会出现错误。
一个解决方案就是在makefile文件中以条件赋值运算符？=提供默认值：
---
## Page 75
变量与宏
65
PROJECT_SRC?=/dev/$(USER)/srC
PROJECT_BIN ?=S（patsubst$/src,&/bin,$（PROJECT_SRC））
PROJECT_LIB ?=/net/server/project/1ib
使用这些变量来访问项目里的组件，就能够建立出一个可以适应不同机器的开发环境
（我们将会在本书第二个部分看到更多例子）。然而，请小心，不要过多使用环境变量。
通常，makefile应该只需从开发者的环境中获得最起码的支持就能够运行，因此你只要
提供合理的默认值以及检查重要的组件是否存在就行了。
条件指令与引入指令的处理
当make所读进的makefile使用了条件处理指令时，makefile文件中有些部分会被省略，
有些部分会被挑选出来。用来控制是否选择的条件具有各种形式，比如“是否已定义”
或“是否等于”。下面是一个例子：
#COMSPEC只会在Windows上被定义
ifdef COMSPEC
PATH_SEP:=;
EXE_EXT:=.exe
else
PATH_SEP:=: