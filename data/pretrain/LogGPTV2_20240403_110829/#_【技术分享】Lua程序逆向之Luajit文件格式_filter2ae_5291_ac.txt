            char str[len];
        } else if (data_type == BCDUMP_KTAB_INT) {
            uleb128 val;
        } else if (data_type == BCDUMP_KTAB_NUM) {
            TNumber num;
        } else if (data_type == BCDUMP_KTAB_TRUE) {
        } else if (data_type == BCDUMP_KTAB_FALSE) {
        } else if (data_type == BCDUMP_KTAB_NIL) {
        } else {
            Warning("TableItem need updaten");
        }
    } TableItem;
当取值大于5，即大于 **BCDUMP_KTAB_STR**
时，它的类型为字符串，需要减去5后计算出它的实际内容长度。另外，上面的TNumber是由两个uleb128组成的分为高与低各32位的数据类型。
NumericConstant存储数值型的常量，比如local语句中赋值的整型与浮点型数据。它的定义如下：
    typedef struct {
        uleb128_33 lo;
        if (lo.val[0] & 0x1)
            uleb128 hi;
    } NumericConstant;
数值常量分为lo低部分与hi高部分，注意lo的类型为uleb128_33，它是一个33位版本的uleb128，即判断第一个字节后面是否还包含后续数据时，首先判断第33位是否置1。它的定义如下：
    typedef struct {
        ubyte val;
        if((val >> 1) > 0x3f) {
            ubyte val ;
            if (val > 0x7f) {
                ubyte val ;
                if(val > 0x7f) {
                    ubyte val ;
                    if(val > 0x7f) {
                        ubyte val ;
                    }
                }
            }
        }
    } uleb128_33;
当读取到lo的最低为是1时，说明这是一个TNumber类型，还需要解析它的高32位部分。
在Constants常量结构体后面，如果ProtoHeader的debuginfo_size值大于0，那么接下来此处存放的是Debuginfo调试信息，它的定义如下：
    typedef struct(int32 first_line_number, int32 lines_count, int32 instructions_count, int32 debuginfo_size, int32 upvalues_count) {
        if (debuginfo_size > 0) {
            LineInfo lineinfo(lines_count, instructions_count);
            if (upvalues_count > 0)
                UpValueNames upvalue_names(upvalues_count);
            VarInfos varinfos;
        }
    } DebugInfo
分为LineInfo与VarInfos两部分，前者是存储的一条条的行信息，后者是局部变量信息。VarInfos中存储了变量的类型、名称、以及它的作用域起始地址与结束地址，它的定义如下：
    typedef struct(uchar tp) {
        local uchar tp_ = tp;
        //Printf("tp:0x%xn", tp);
        if (tp >= VARNAME__MAX) {
            string str;
        } else {
            VARNAME_TYPE vartype;
        }
        if (tp != VARNAME_END) {
            uleb128 start_addr;
            uleb128 end_addr;
        }
    } VarInfo;
代码中的指令引用一个局部变量时，调试器可以通过其slot槽索引值到VarInfos中查找它的符号信息，这也是Luajit文件支持源码级调试的主要方法。
**编写Luajit文件的010 Editor文件模板**
在掌握了Luajit的完整格式后，编写010 Editor文件模板应该没有难度与悬念了。
Luajit的线性结构解析起来比Luac简单，只需要按顺序解析Proto，直接读取到字节0结束。整体部分的代码片断如下：
    typedef struct() {
        ProtoHeader header;
        if (uleb128_value(header.size) > 0) {
            if (uleb128_value(header.instructions_count) > 0)
                Instruction inst[uleb128_value(header.instructions_count)];
            Constants constants(header.upvalues_count, uleb128_value(header.complex_constants_count), uleb128_value(header.numeric_constants_count));
            if (header.debuginfo_size_ > 0)
                DebugInfo debuginfo(uleb128_value(header.first_line_number), uleb128_value(header.lines_count), uleb128_value(header.instructions_count), header.debuginfo_size_, header.upvalues_count);
            local int64 end = FTell();
            //Printf("start:0x%lx, end:0x%lx, size:0x%lxn", header.start, end, end - header.start);
            if (uleb128_value(header.size) != end - header.start) {
                Warning("Incorrectly read: from 0x%lx to 0x%lx (0x%lx) instead of 0x%lxn", header.start, end, end - header.start, uleb128_value(header.size));
            }
        }
    } Proto ;
    typedef struct {
        GlobalHeader header;
        while (!FEof())
            Proto proto;
    } Luajit ;
    string LuajitRead(Luajit &lj) {
        return lj.header.name;
    }
Proto的header的size字段是当前Proto的大小，在解析的时候有必要对其合法性进行检查。
在编写模板时，只遇到过一个比较难解决的问题，那就是对NumericConstant中浮点数的解析。如下面的代码片断：
    local dd = 3.1415926;
编译生成Luajit文件后，它会以浮点数据存储进入NumericConstant结构体中，并且它对应的64位数据为0x400921FB4D12D84A。在解析该数据时，并不能像Luac中TValue那样直接进行解析，Luac中声明的结构体TValue可以直接解析其内容，但Luajit中0x400921FB4D12D84A值的lo与hi是通过uleb128_33与uleb128两种数据类型动态计算才能得到。
将0x400921FB4D12D84A解析为double，虽然在C语言中只需要如下代码：
    uint64_t p = 0x400921FB4D12D84A;
    double *dd = (double *)&p;
    printf("%.14gn", *dd);
    但010 Editor模板不支持指针数据类型，如果使用结构体UNION方式，C语言中如下方法即可转换：
    union
    {
        long long i;
        double    d;
    } value;
    value.i = l;
    char buf[17];
    snprintf (buf, sizeof(buf),"%.14g",value.d);
010 Editor虽然支持结构体与UNION，但并不支持声明local类型的结构体变量。所以，浮点数据的解析工作一度陷入了困境！最后，在010
Editor的帮且文档中执行“double”关键字，查找是否有相应的解决方法，最后找到了一个ConvertBytesToDouble()方法，编写代码进行测试：
    local uchar chs[8];
    chs[0] = 0x4A;
    chs[1] = 0xD8;
    chs[2] = 0x12;
    chs[3] = 0x4D;
    chs[4] = 0xFB;
    chs[5] = 0x21;
    chs[6] = 0x09;
    chs[7] = 0x40;
    local double ddd = ConvertBytesToDouble(chs);
    Printf("%.14gn", ddd);
输出如下：
    3.141592502594
可见，不是直接进行的内存布局转换，而是进行了内部的计算转换，虽然与原来的3.1415926有少许的出入，但比起不能转换还是要强上许多，通过ConvertBytesToDouble()，可以为NumericConstant编写其read方法，代码如下：
    string NumericConstantRead(NumericConstant &constant) {
        if (constant.lo.val[0] & 0x1) {
            local string str;
            local int i_lo = uleb128_33_value(constant.lo);
            local int i_hi = uleb128_value(constant.hi);
            local uchar bytes_lo[4];
            local uchar bytes_hi[4];
            local uchar bytes_double[8];
            ConvertDataToBytes(i_lo, bytes_lo);
            ConvertDataToBytes(i_hi, bytes_hi);
            Memcpy(bytes_double, bytes_lo, 4);
            Memcpy(bytes_double, bytes_hi, 4, 4);
            local double n = ConvertBytesToDouble(bytes_double);
            SPrintf(str, "%.14g", ((uleb128_value(constant.hi) == (3 | (1  。