> program. Can you find the flag we've hidden in an environment variable on
> the shell server?
### Hint
> unix [env](https://www.tutorialspoint.com/unix/unix-environment.htm)
## Solution
考察linux系统环境变量，使用`env`命令可以列出系统中所有的环境变量，配合`grep`命令得到flag。
    finn@pico-2018-shell-2:/problems/grep-2_3_826f886f547acb8a9c3fccb030e8168d/files$ env|grep pico               
    SECRET_FLAG=picoCTF{eNv1r0nM3nT_v4r14Bl3_fL4g_3758492}
flag:`picoCTF{eNv1r0nM3nT_v4r14Bl3_fL4g_3758492}`
# ssh-keyz
## Question
> As nice as it is to use our webshell, sometimes its helpful to connect
> directly to our machine. To do so, please add your own public key to
> ~/.ssh/authorized_keys, using the webshell. The flag is in the ssh banner
> which will be displayed when you login remotely with ssh to with your
> username.
### Hint
> key generation
> [tutorial](https://confluence.atlassian.com/bitbucketserver/creating-ssh-> keys-776639788.html)
>
> We also have an expert demonstrator to help you along.
> [link](https://www.youtube.com/watch?v=3CN65ccfllU&list=PLJ_vkrXdcgH-> lYlRV8O-kef2zWvoy79yP&index=4)
## Solution
公钥连接服务器相关，在shell服务器中使用`ssh-keygen -t rsa`生成自己的公私钥对，默认生成为 _~/.ssh/id_rsa.pub_
(公钥)和 _~/.ssh/id_rsa_ （私钥），将私钥下载到本地，然后用`ssh
@2018shell2.picoctf.com`连接服务器即可在欢迎信息的banner中看到flag。
这题也可以直接查看banner文件。
    finn@pico-2018-shell-2:~$ cat /etc/ssh/sshd_config |grep banner                                               
    Banner /opt/ssh_banner
    finn@pico-2018-shell-2:~$ cat /opt/ssh_banner                                                                 
    picoCTF{who_n33ds_p4ssw0rds_38dj21}
flag:`picoCTF{who_n33ds_p4ssw0rds_38dj21}`
# what base is this?
## Question
> To be successful on your mission, you must be able read data represented in
> different ways, such as hexadecimal or binary. Can you get the flag from
> this program to prove you are ready? Connect with `nc 2018shell1.picoctf.com
> 1225`.
### Hint
> I hear python is a good means (among many) to convert things.
>
> It might help to have multiple windows open
## Solution
三个不通的进制转换，分别是二进制、十六进制和八进制，转换为十进制，然后发送对应ascii码的单词，写个脚本处理一下就可以了。
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    from pwn import *
    import re
    r = remote('2018shell2.picoctf.com', 31711)
    binary = r.recvuntil('as a word.')
    binary = re.findall(r'(\d+)', binary)
    binary_word = ''.join([chr(int(i, 2)) for i in binary])
    r.sendline(binary_word)
    hexnum = r.recvuntil('as a word.')
    hexnum = re.findall(r'([0-9a-f]+) as', hexnum)[0]
    hexword = hexnum.decode('hex')
    r.sendline(hexword)
    octal = r.recvuntil('as a word.')
    octal = re.findall(r'([0-9]+)', octal)
    octal_word = ''.join([chr(int(i, 8)) for i in octal])
    r.sendline(octal_word)
    print r.recvuntil('}\n')
    r.close()
    $ python nc_convert.py
    [+] Opening connection to 2018shell2.picoctf.com on port 31711: Done
    Input:
    You got it! You're super quick!
    Flag: picoCTF{delusions_about_finding_values_68051dea}
    [*] Closed connection to 2018shell2.picoctf.com port 31711
flag:`picoCTF{delusions_about_finding_values_68051dea}`
# you can't see me
## Question
> '...reading transmission... Y.O.U. .C.A.N.'.T. .S.E.E. .M.E. ...transmission
> ended...' Maybe something lies in /problems/you-can-t-see-> me_3_1a39ec6c80b3f3a18610074f68acfe69.
### Hint
> What command can see/read files?
>
> What's in the manual page of ls?
## Solution
`ls -a`可以查看以`.`开头的隐藏文件。
    finn@pico-2018-shell-2:/problems/you-can-t-see-me_2_cfb71908d8368e3062423b45959784aa$ ls -a                   
    .  .    ..
其中一个`.`代表当前目录，另一个是一个文件，直接`cat .`会显示
    finn@pico-2018-shell-2:/problems/you-can-t-see-me_2_cfb71908d8368e3062423b45959784aa$ cat .                   
    cat: .: Is a directory
输入`cat`然后用tab键补全就能看到真正的文件名了，是一个`.`和两个`空格`
    finn@pico-2018-shell-2:/problems/you-can-t-see-me_2_cfb71908d8368e3062423b45959784aa$ cat .\ \                
    picoCTF{j0hn_c3na_paparapaaaaaaa_paparapaaaaaa_093d6aff}
flag:`picoCTF{j0hn_c3na_paparapaaaaaaa_paparapaaaaaa_093d6aff}`
# absolutely relative
## Question
> In a filesystem, everything is relative ¯_(ツ)_/¯. Can you find a way to get
> a flag from this
> [program](https://2018shell2.picoctf.com/static/3a286144f1c251a493c223d6a8ff0a6d/absolutely-> relative)? You can find it in /problems/absolutely-> relative_1_15eb86fcf5d05ec169cc417d24e02c87 on the shell server.
> [Source](https://2018shell2.picoctf.com/static/3a286144f1c251a493c223d6a8ff0a6d/absolutely-> relative.c).
### Hint
> Do you have to run the program in the same directory? (⊙.☉)7
>
> Ever used a text editor? Check out the program 'nano'
## Solution
阅读程序源码
    #include                                                                                             
    #include                                                                                            
    #define yes_len 3                                                                                             
    const char *yes = "yes";                                                                                      
    int main()                                                                                                    
    {                                                                                                             
        char flag[99];                                                                                            
        char permission[10];                                                                                      
        int i;                                                                                                    
        FILE * file;                                                                                              
        file = fopen("/problems/absolutely-relative_0_d4f0f1c47f503378c4bb81981a80a9b6/flag.txt" , "r");          
        if (file) {                                                                                               
            while (fscanf(file, "%s", flag)!=EOF)
            fclose(file);
        }                                                                                                         
        file = fopen( "./permission.txt" , "r");                                                                  
        if (file) {                                                                                               
            for (i = 0; i  permission.txt                                                      
    finn@pico-2018-shell-2:~$ /problems/absolutely-relative_0_d4f0f1c47f503378c4bb81981a80a9b6/absolutely-relative
    You have the write permissions.
    picoCTF{3v3r1ng_1$_r3l3t1v3_befc0ce1}
flag:`picoCTF{3v3r1ng_1$_r3l3t1v3_befc0ce1}`
# in out error
## Question
> Can you utlize stdin, stdout, and stderr to get the flag from this
> [program](https://2018shell2.picoctf.com/static/d4999df1f1d898c76bbc6f4c70444886/in-> out-error)? You can also find it in /problems/in-out-> error_2_c33e2a987fbd0f75e78481b14bfd15f4 on the shell server
### Hint
> Maybe you can split the stdout and stderr output?
## Solution
linux输出重定向，可以参考[Linux标准输入、输出和错误和文件重定向](https://www.cnblogs.com/softidea/p/3965093.html)。
直接执行程序会把`Rick
Roll'd`的歌词和`flag`混在一起输出，flag在`stderr`中，把`stdout`重定向到`/dev/null`就可以得到flag。
    finn@pico-2018-shell-2:/problems/in-out-error_0_0f875f7714b995dad5946a15be6267a7$ ./in-out-error 1>/dev/null  
    Please may I have the flag?                                                                                   
    picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoC
    TF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1
    p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_
    1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_
    7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng
    _85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6
    fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}
    picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoC
    TF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1
    p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_
    1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_
    7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng
    _85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6
    fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}
    picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoC
    TF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1
    p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}
flag:`picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}`
# learn gdb
## Question
> Using a debugging tool will be extremely useful on your missions. Can you
> run this
> [program](https://2018shell2.picoctf.com/static/999e37c9737d95c105ea29ae5b3fac1f/run)
> in gdb and find the flag? You can find the file in /problems/learn-> gdb_0_716957192e537ac769f0975c74b34194 on the shell server.
### Hint
> Try setting breakpoints in gdb
>
> Try and find a point in the program after the flag has been read into memory
> to break on
>
> Where is the flag being written in memory?
## Solution
执行程序会解密flag，但是不会输出。
    finn@pico-2018-shell-2:/problems/learn-gdb_3_f1f262d9d48b9ff39efc3bc092ea9d7b$ ./run                          
    Decrypting the Flag into global variable 'flag_buf'                                                           
    .....................................                                                                         
    Finished Reading Flag into global variable 'flag_buf'. Exiting.
用`gdb`加载程序，反汇编`main`函数。
    finn@pico-2018-shell-2:/problems/learn-gdb_3_f1f262d9d48b9ff39efc3bc092ea9d7b$ gdb run
    ...
    (gdb) disassemble main
    ... 
       0x00000000004008f1 :    callq  0x400650                                                  