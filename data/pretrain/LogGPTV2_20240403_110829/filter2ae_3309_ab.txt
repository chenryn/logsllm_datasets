# Finding the Hidden Flag in an Environment Variable

## Problem
Can you find the flag hidden in an environment variable on the shell server?

### Hint
- [Unix `env` command](https://www.tutorialspoint.com/unix/unix-environment.htm)

## Solution
To locate the flag, we can list all environment variables using the `env` command and then filter the output with `grep` to find the one containing "pico".

```bash
finn@pico-2018-shell-2:/problems/grep-2_3_826f886f547acb8a9c3fccb030e8168d/files$ env | grep pico
SECRET_FLAG=picoCTF{eNv1r0nM3nT_v4r14Bl3_fL4g_3758492}
```

**Flag:** `picoCTF{eNv1r0nM3nT_v4r14Bl3_fL4g_3758492}`

---

# SSH Key Authentication

## Problem
To connect directly to the machine, add your public key to `~/.ssh/authorized_keys` via the webshell. The flag is displayed in the SSH banner when you log in remotely.

### Hint
- [SSH key generation tutorial](https://confluence.atlassian.com/bitbucketserver/creating-ssh-keys-776639788.html)
- [Video demonstration](https://www.youtube.com/watch?v=3CN65ccfllU&list=PLJ_vkrXdcgH-lYlRV8O-kef2zWvoy79yP&index=4)

## Solution
Generate a public and private key pair using `ssh-keygen -t rsa`. By default, the keys will be saved as `~/.ssh/id_rsa.pub` (public key) and `~/.ssh/id_rsa` (private key). Download the private key to your local machine and use it to connect to the server.

Alternatively, you can directly check the SSH banner file:

```bash
finn@pico-2018-shell-2:~$ cat /etc/ssh/sshd_config | grep banner
Banner /opt/ssh_banner
finn@pico-2018-shell-2:~$ cat /opt/ssh_banner
picoCTF{who_n33ds_p4ssw0rds_38dj21}
```

**Flag:** `picoCTF{who_n33ds_p4ssw0rds_38dj21}`

---

# Base Conversion Challenge

## Problem
You need to read data represented in different formats, such as hexadecimal or binary. Can you get the flag from this program? Connect with `nc 2018shell1.picoctf.com 1225`.

### Hint
- Python can be used for conversions.
- It might help to have multiple windows open.

## Solution
The challenge involves converting numbers from binary, hexadecimal, and octal to decimal, and then sending the corresponding ASCII characters. A Python script can automate this process:

```python
#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *
import re

r = remote('2018shell2.picoctf.com', 31711)

# Binary conversion
binary = r.recvuntil('as a word.')
binary = re.findall(r'(\d+)', binary)
binary_word = ''.join([chr(int(i, 2)) for i in binary])
r.sendline(binary_word)

# Hexadecimal conversion
hexnum = r.recvuntil('as a word.')
hexnum = re.findall(r'([0-9a-f]+) as', hexnum)[0]
hexword = bytes.fromhex(hexnum).decode()
r.sendline(hexword)

# Octal conversion
octal = r.recvuntil('as a word.')
octal = re.findall(r'([0-9]+)', octal)
octal_word = ''.join([chr(int(i, 8)) for i in octal])
r.sendline(octal_word)

print(r.recvuntil('}\n'))
r.close()
```

**Flag:** `picoCTF{delusions_about_finding_values_68051dea}`

---

# Hidden File Discovery

## Problem
A transmission suggests that something is hidden in `/problems/you-can-t-see-me_3_1a39ec6c80b3f3a18610074f68acfe69`.

### Hint
- Use `ls -a` to see hidden files.
- Check the manual page of `ls`.

## Solution
Use `ls -a` to list all files, including hidden ones:

```bash
finn@pico-2018-shell-2:/problems/you-can-t-see-me_2_cfb71908d8368e3062423b45959784aa$ ls -a
.  ..  . 
```

One of the dots represents the current directory, and the other is a hidden file. To view the content of the hidden file:

```bash
finn@pico-2018-shell-2:/problems/you-can-t-see-me_2_cfb71908d8368e3062423b45959784aa$ cat .\ \ 
picoCTF{j0hn_c3na_paparapaaaaaaa_paparapaaaaaa_093d6aff}
```

**Flag:** `picoCTF{j0hn_c3na_paparapaaaaaaa_paparapaaaaaa_093d6aff}`

---

# Relative File Paths

## Problem
In a filesystem, everything is relative. Can you find a way to get the flag from this program? You can find it in `/problems/absolutely-relative_1_15eb86fcf5d05ec169cc417d24e02c87` on the shell server. [Source code](https://2018shell2.picoctf.com/static/3a286144f1c251a493c223d6a8ff0a6d/absolutely-relative.c).

### Hint
- Do you have to run the program in the same directory?
- Use a text editor like `nano`.

## Solution
Review the source code to understand the program's behavior. The program checks for a file named `permission.txt` in the current directory and reads a flag from another file.

Create a `permission.txt` file with the required content and run the program:

```bash
finn@pico-2018-shell-2:~$ echo "yes" > permission.txt
finn@pico-2018-shell-2:~$ /problems/absolutely-relative_0_d4f0f1c47f503378c4bb81981a80a9b6/absolutely-relative
You have the write permissions.
picoCTF{3v3r1ng_1$_r3l3t1v3_befc0ce1}
```

**Flag:** `picoCTF{3v3r1ng_1$_r3l3t1v3_befc0ce1}`

---

# Standard Input, Output, and Error

## Problem
Can you utilize stdin, stdout, and stderr to get the flag from this program? You can find it in `/problems/in-out-error_2_c33e2a987fbd0f75e78481b14bfd15f4` on the shell server.

### Hint
- Split the stdout and stderr output.

## Solution
The program outputs both the flag and some lyrics. The flag is sent to `stderr`, so redirect `stdout` to `/dev/null` to isolate the flag:

```bash
finn@pico-2018-shell-2:/problems/in-out-error_0_0f875f7714b995dad5946a15be6267a7$ ./in-out-error 1>/dev/null
Please may I have the flag?
picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}
```

**Flag:** `picoCTF{p1p1ng_1S_4_7h1ng_85f6fd2c}`

---

# Debugging with GDB

## Problem
Using a debugging tool will be extremely useful. Can you run this program in `gdb` and find the flag? You can find the file in `/problems/learn-gdb_0_716957192e537ac769f0975c74b34194` on the shell server.

### Hint
- Set breakpoints in `gdb`.
- Find a point in the program after the flag has been read into memory.
- Determine where the flag is being written in memory.

## Solution
Run the program in `gdb` and set a breakpoint at the function where the flag is read into memory. Then, inspect the memory to find the flag.

```bash
finn@pico-2018-shell-2:/problems/learn-gdb_3_f1f262d9d48b9ff39efc3bc092ea9d7b$ gdb run
...
(gdb) disassemble main
...
0x00000000004008f1 :    callq  0x400650
(gdb) break *0x00000000004008f1
(gdb) run
...
(gdb) x/s $rsp
0x7fffffffe1c0: "picoCTF{Decrypting_the_flag_into_memory_0123}"
```

**Flag:** `picoCTF{Decrypting_the_flag_into_memory_0123}`