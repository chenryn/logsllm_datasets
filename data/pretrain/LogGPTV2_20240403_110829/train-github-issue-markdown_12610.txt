 **Steinway Wu** opened **SPR-8486** and commented
I found it doesn't work under UTF-8.
After going through the source code of StringHttpMessageConverter, I concludes
that although StringHttpMessageConverter has a "DEFAULT_CHARSET" public static
member (with default 'ISO-8859-1'), it doesn't offer corresponding setter
which leads to the embarrassing that I can't configure
StringHttpMessageConverter in applicationContext.xml in a common 
way.
I suggest that StringHttpMessageConverter should work like
FormHttpMessageConverter which contains a private non-static member Charset,
and offers corresponding setter for configuration.
* * *
**Affects:** 3.0.5
**Issue Links:**
  * #14122 Backport constructor accepting Charset in StringHttpMessageConverter, from Spring for Android to Spring Web. ( _ **"duplicates"**_ )