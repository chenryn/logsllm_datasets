（2）下载Hive安装包
当前Hive的最新版本为0.8.1，读者可通过以下命令下载Hive安装包：
wget http：//labs.renren.com/apache-mirror/hive/hive-0.8.1/hive-0.8.1.tar.gz
tar xzf hive-0.8.1.tar.gz
cd hive-0.8.1
或者到Hive官方网站选择一个服务器镜像（http：//www.apache.org/dyn/closer.cgi/hive）及相应的版本进行下载。
（3）配置系统环境变量/etc/profile或～/.bashrc
该步骤只是为了便于大家操作，对于Hive的安装并不是必须的。
如下所示，在PATH中加入Hive的bin及conf路径：
#Config Hive
export HIVE_HOME=/home/hadoop/hadoop-1.0.1/hive-0.8.1
export PATH=$HIVE_HOME/bin：$HIVE_HOME/conf：$PATH
在当前终端输入“source/etc/profile”使环境变量对当前终端有效。
（4）修改Hive配置文档
若不进行修改，Hive将使用默认的配置文档。一些高级用户希望对其进行配置。$HIVE_HOME/conf对应的是Hive的配置文档路径。该路径下的$HIVE_HOME/conf/hive-site.xml对应的是Hive工程的配置文档，默认该配置文档并不存在，需要我们手动创建。如下所示：
cd$HIVE_HOME/conf
cp hive-default.xml.template hive-site.xml
hive-default. xml.template为系统提供给的配置文档模板，其中填写的是默认的配置参数。Hive的主要配置项如下：
hive. metastore.warehouse.dir，该参数指定的是Hive的数据存储目录，指定的是HDFS上的位置，默认值为/user/hive/warehouse。
hive. exec.scratchdir，该参数指定的是Hive的数据临时文件目录，默认位置为/tmp/hive-${user.name}。
连接数据库配置。
在11.1.2节中已经讲过，Hive需要将元数据存储在RDBMS中，这对于Hive的运行是非常重要的。在默认情况下，Hive已经为我们配置好了Derby数据库的连接参数，并且集成了Derby数据库及连接驱动jar包。下面为连接Derby数据库的关键配置：
＜?xml version="1.0"?＞
＜?xml-stylesheet type="text/xsl"href="configuration.xsl"?＞
＜configuration＞
……
＜property＞
＜name＞javax.jdo.option.ConnectionURL＜/name＞
＜value＞jdbc：derby：；databaseName=metastore_db；create=true＜/value＞
＜description＞JDBC connect string for a JDBC metastore＜/description＞
＜/property＞
＜property＞
＜name＞javax.jdo.option.ConnectionDriverName＜/name＞
＜value＞org.apache.derby.jdbc.EmbeddedDriver＜/value＞
＜description＞Driver class name for a JDBC metastore＜/description＞
＜/property＞
＜property＞
＜name＞javax.jdo.option.ConnectionUserName＜/name＞
＜value＞APP＜/value＞
＜description＞username to use against metastore database＜/description＞
＜/property＞
＜property＞
＜name＞javax.jdo.option.ConnectionPassword＜/name＞
＜value＞mine＜/value＞
＜description＞password to use against metastore database＜/description＞
＜/property＞
……
＜/configuration＞
其中“javax.jdo.option.ConnectionURL”参数指定的是Hive连接数据库的连接字符串，“javax.jdo.option.ConnectionDriverName”参数指定的是驱动的类入口名称，“javax.jdo.option.ConnectionUserName”参数和“javax.jdo.option.ConnectionPassword”参数指定的是数据库的用户名和密码。使用Derby数据库需要确定在$HIVE_HOME/lib/目录下有Derby的数据库驱动。Hive0.8.1在默认情况下为我们提供了该驱动包：derby-10.4.2.0.jar。
（5）运行Hive
在上述配置完成后，直接运行$HIVE_HOME/bin/hive即可启动连接Hive，如下所示：
./bin/hive
Logging initialized using configuration in jar：file：/home/hadoop/hadoop-1.0.1/hive-
0.8.1/lib/hive-common-0.8.1.jar！/hive-log4j.properties
Hive history file=/tmp/hadoop/hive_job_log_hadoop_201205151824_37118280.txt
hive＞
该方式使用的是命令行的方式（command line, cli）连接Hive进行操作。
另外，Hive还提供了丰富的Wiki文档，读者可以参考以下链接中的内容。
Hive的Wiki页面：http：//wiki.apache.org/hadoop/Hive。
Hive入门指南：http：//wiki.apache.org/hadoop/Hive/GettingStarted。
HQL查询语言指南：http：//wiki.apache.org/hadoop/Hive/HiveQL。
演示文稿：http：//wiki.apache.org/hadoop/Hive/Presentations。
由于Hive本身还处在不断的发展中，很多时候文档更新的速度还赶不上Hive本身的更新速度，因此，如果大家想了解Hive最新的发展动态或想与研究者进行交流，那么可以加入Hive的邮件列表，用户：PI:EMAIL，开发者：PI:EMAIL。
11.2.2 配置MySQL存储Hive元数据
Hive提供了多种RDBMS来存储Hive的元数据，包括Derby、MySQL等。相信有很多用户对MySQL还是比较熟悉的。因此，本节我们将Hive默认的元数据存储容器由Derby修改为MySQL。该过程包括两个步骤：Hive的配置及MySQL的配置。下面介绍具体操作。
（1）Hive的配置
首先需要对Hive的配置文档进行修改，即$HIVE_HOME/conf/hive-site.xml。与Derby类似，首先需要对连接字符串、驱动、数据库用户名及密码参数进行配置，如下所示：
＜?xml version="1.0"?＞
＜?xml-stylesheet type="text/xsl"href="configuration.xsl"?＞
……
＜configuration＞
＜property＞
＜name＞hive.metastore.local＜/name＞
＜value＞true＜/value＞
＜/property＞
＜property＞
＜name＞javax.jdo.option.ConnectionURL＜/name＞
＜value＞jdbc：mysql：//localhost：3306/hive?createDatabaseIfNotExist=true＜/value＞
＜/property＞
＜property＞
＜name＞javax.jdo.option.ConnectionDriverName＜/name＞
＜value＞com.mysql.jdbc.Driver＜/value＞
＜/property＞
＜property＞
＜name＞javax.jdo.option.ConnectionUserName＜/name＞
＜value＞hive＜/value＞
＜/property＞
＜property＞
＜name＞javax.jdo.option.ConnectionPassword＜/name＞
＜value＞hive＜/value＞
＜/property＞
……
＜/configuration＞
另外，需要下载MySQL的JDBC驱动包，这里使用的是“mysql-connector-java-5.1.11-bin.jar”，将其复制到$HIVE_HOME/lib目录下即可。
（2）MySQL的配置
首先需要安装MySQL，使用如下命令：
sudo apt-get install mysql-server
执行该命令将自动下载并安装MySQL
[1]
 。此外，还可以下载MySQL安装包进行安装，此部分内容不是本书的重点，大家可以自行查阅相关资料。
MySQL安装完成后，只拥有root用户。下面我们创建Hive系统的用户权限，步骤如下所示：
//1.创建用户
CREATE USER'hive'@'%'IDENTIFIED BY'hive'；
//2.赋予权限
GRANT ALL PRIVILEGES ON*.*TO'hive'@'%'WITH GRANT OPTION；
//3.强制写出
flush privileges；
此外，为了使远程用户可以访问MySQL，需要修改“/etc/mysql/my.cnf”文件，将bind-address一行注释掉，该参数绑定本地用户访问。
如下所示：
#Instead of skip-networking the default is now to listen only on
#localhost which is more compatible and is not less secure.
#bind-address=127.0.0.1
配置完成后，使用如下命令重启MySQL数据库：
sudo/etc/ini.d/mysql restart
上述配置完成后便可以像之前一样运行Hive了。
[1]
 在不同版本的Linux中该命令有一定的区别，要视具体的Linux版本而定。
11.2.3 配置Hive
安装好Hive后，就可以进行简单的数据操作了。在实际应用中，不可避免地要进行参数的配置和调优，本节我们将对Hive参数的设置进行介绍。
首先，在进行操作前要确保目录权限配置正确：将/tmp目录配置成所有用户都有write权限，表所对应目录的owner必须是Hive启动用户。
其次，可以通过调整Hive的参数来调优HQL代码的执行效率或帮助管理员进行定位。参数设置可以通过配置文件、命令行参数或参数声明的方式进行。下面具体进行介绍。
1.配置文件
Hive的配置文件包括：
用户自定义配置文件，即$HIVE_CONF_DIR/hive-site.xml；
默认配置文件，即$HIVE_CONF_DIR/hive-default.xml。
要注意的是，用户自定义配置会覆盖默认配置。另外，Hive也会读入Hadoop的配置，因为Hive是作为Hadoop的客户端启动的。
2.运行时配置
当运行Hive QL时可以进行参数声明。Hive的查询可通过执行MapReduce任务来实现，而有些查询可以通过控制Hadoop的配置参数来实现。在命令行接口（CLI）中可以通过SET命令来设置参数，例如：
hive＞SET mapred.job.tracker=myhost.mycompany.com：50030
hive＞set mapred.reduce.tasks=100；
hive＞SET-v
通过SET-v命令可以查看当前设定的所有信息。需要指出的是，通过CLI的SET命令设定的作用域是Session级的，只对本次操作有作用。此外，SerDe参数必须写在建表语句中。例如：
create table if not exists t_Student（
name string
）
ROW FORMAT SERDE
'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'
WITH SERDEPROPERTIES（
'field.delim'='\t'，
'escape.delim'='\\'，
'serialization.null.format'=''
）STORED AS TEXTFILE；
类似serialization.null.format这样的参数，必须和某个表或分区关联。在DDL外部声明不起作用。
3.设置本地模式