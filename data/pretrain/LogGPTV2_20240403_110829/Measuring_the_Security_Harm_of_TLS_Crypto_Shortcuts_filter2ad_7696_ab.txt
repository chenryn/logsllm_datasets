### TLS Resumption and Session Secrets

#### 1. Introduction to TLS Resumption
In TLS 1.3, a separate resumption secret is explicitly derived, which can be used in two ways for session resumption:
- **Direct Resumption**: The resumption secret can be used directly for a secondary session via the "psk_ke" mechanism.
- **Authenticated Resumption with (EC)DHE**: The resumption secret can also be used as authentication for a resumed connection that conducts a second (EC)DHE key exchange via the "psk_dhe_ke" mechanism.

Additionally, the resumption secret can facilitate QUIC-like 0-RTT communication. In this scenario, the client sends "early data" while awaiting the completion of a resumed or new TLS handshake. This early data is encrypted using the resumption secret and can stream until the client receives the server's Finished message.

#### 2. Data Collection
To evaluate the impact of session resumption and ephemeral value reuse, we measured the HTTPS behavior of Alexa Top Million domains over a 9-week period in the Spring of 2016. We repeatedly connected to each server on TCP/443 using a modified version of the ZMap tool chain. Our analysis was restricted to websites presenting browser-trusted certificates that chain to the NSS root store. Table 1 provides high-level metrics from conducting 10 TLS connections in quick succession to each Alexa Top Million domain on the specified days.

**Ethical Considerations**
We followed the best practices defined by Durumeric et al. [20] and adhered to ethical guidelines for active scanning. All scans were conducted from the University of Michigan campus, following the institutional blacklist. For experiments requiring multiple connections in a single day, we limited our measurements to popular sites where the load should be negligible. Where possible, we used existing data from the Censys Project [16] instead of running redundant scans. All independently collected data is published on Scans.io [17], and our modifications have been merged into the main ZMap project.

**Alexa Top Million Dataset**
Our measurements spanned a 9-week period from March 2, 2016, to May 4, 2016, targeting the Alexa Top Million domains. We observed significant churn within the Top Million domains daily. In total, we scanned 1,527,644 unique domains, including over 155K that appeared in ≤ 7 polls of the Top Million. Only 539,546 domains remained in the Top Million for the entire 9 weeks. Of these, 369,034 (68%) supported HTTPS, 291,643 (54%) presented a browser-trusted certificate, and 288,252 (53%) issued a session ticket, completed a DHE or ECDHE key exchange, or resumed a session. To avoid bias from churn, we restricted multi-day measurements to domains that remained in the list for the entire period.

#### 3. Longevity of TLS Secret State
This section describes the practical behavior of HTTPS domains regarding the lifetime of cryptographic state, including session ID and session ticket resumption, session ticket encryption keys (STEKs), and key exchange value reuse. We found that while session IDs and session tickets are generally honored for under an hour (82% and 76%, respectively), STEKs persist much longer.

##### 3.1 Session ID Lifetime
To measure how long session IDs are accepted, we initiated a TLS handshake with each of the Alexa Top Million domains on April 27, 2016. We attempted to resume each session one second later and then every five minutes until either the site failed to resume the session or 24 hours had elapsed. Of the 433,220 domains that supported HTTPS and presented a browser-trusted certificate, 419,302 (97%) indicated support for session ID resumption by setting a session ID value in the Server Hello message, and 357,536 (83%) resumed the session after a one-second delay.

As shown in Figure 1, the distribution of lifetimes is somewhat discrete: 82% of domains that supported session ID resumption allowed resumption for one hour or less, and 61% did so for less than five minutes. Only 2,845 domains (0.8%) resumed sessions for 24 hours or longer; 86% of those domains belong to or are hosted by Google. Facebook’s CDN also honored session IDs for more than 24 hours.

These empirical results align with the default configuration of popular web server implementations. Apache enables session ID resumption by default with a five-minute lifetime [41]. Nginx issues session IDs but does not allow resumption unless explicitly configured; session IDs expire after five minutes when enabled unless the administrator sets a different lifetime [42]. Microsoft IIS expires session IDs after ten hours [40], corresponding to the jump seen in Figure 1.

##### 3.2 Session Ticket Lifetime
We used a similar experiment to measure how long domains allowed session tickets to resume TLS connections and the hinted lifetime. We initiated a TLS handshake with each site in the Alexa Top Million on April 29, 2016. We attempted to resume each connection one second later, then every five minutes until either the domain failed to resume the session or 24 hours had elapsed. If the domain reissued a session ticket during any of the connections, we continued to attempt resumption with the ticket issued from the first connection.

We found that 366,178 out of the 461,475 domains with a browser-trusted certificate (79%) issued a session ticket and 351,603 (76%) resumed the session after one second. As shown in Figure 2, 67% of domains accepted a session ticket for less than five minutes and 76% for one hour or less. The indicated ticket lifetime closely follows the advertised lifetime hint, with the exception of 14,663 domains that leave it unspecified and up to the client’s policy [52]. At the extreme end, we found that two domains specified a lifetime hint longer than ten days: fantabobworld.com and fantabobshow.com, both specifying a 90-day hint. 54,522 unique domains hosted by CloudFlare resumed for 18 hours, causing the steep increase in Figure 2. Additionally, 8,969 domains accepted tickets for 24 hours, of which 8,535 were hosted by Google (95%), which specified a 28-hour lifetime hint.

This behavior aligns with the known defaults for popular web server implementations. Apache and Nginx both enable session ticket resumption by default with a three-minute lifetime.

##### 3.3 STEK Lifetime
While the time span that domains will accept previously issued session tickets is an important metric, it reflects only the ticket’s lifetime (set by policy) and not necessarily the time period for which the associated STEK exists and is used to issue new session tickets. As discussed in Section 2, the content of a historical session can be decrypted using a site’s STEK regardless of whether a PFS handshake occurs and regardless of whether the ticket’s lifetime has expired.

Popular server implementations include a 16-byte STEK identifier in the ticket, as prescribed in RFC 5077 [52]. We reviewed popular open-source TLS implementations, including OpenSSL, LibreSSL, GNUTLS, mbedTLS, and NSS, and found that all follow this recommendation except for mbedTLS, which uses a 4-byte STEK identifier. We also tested Microsoft’s SChannel implementation and found it to use an ASN.1 encoded object containing a DPAPI object [7]. For the measurements below, we parsed this object and extracted the Master Key GUID to use as the STEK identifier.

Between March 2, 2016, and May 4, 2016, we connected to the Alexa Top Million domains daily and recorded the session ticket that was issued by the server, if one was issued. We determined the lifetime of each STEK by looking for the first and last time that the (STEK identifier, domain) pair was seen. This metric accounts for real-world jitter seen in Internet scanning, such as the ZMap tool-chain’s choice of A-record entries between days, poorly configured load balancers, or server unavailability. It is highly unlikely that an administrator would switch static STEKs only to switch back or that a randomly generated STEK identifier would collide within the bounds of our study. Therefore, we can safely assume that a STEK was in use between the first and last time its identifier was seen, and any intermediate STEK identifiers were due to fluctuations in connecting to different servers.

Of the 291,643 browser-trusted sites always in the Alexa Top Million, 66,941 (23%) never issued a session ticket. 118,835 (41%) used different issuing STEKs for each day. 63,976 domains (22%) reused the same STEK for at least seven days, and 28,210 domains (10%) reused for at least 30 days. The CDF of these lifetimes is shown in Figure 3.

We found a surprising collection of websites, including those of major Internet companies, that fall within the 30+ day reuse. Table 2 shows the ten most popular domains according to their average Alexa ranking that reused a STEK for at least seven days. Notable domains include eight yandex.[tld] domains, each showing 63 days of reuse, slack.com (a popular team communication service) showing 18 days of reuse, and other notable domains.

| Rank | Domain | # Days |
|------|--------|--------|
| 5    | yahoo.com | 63     |
| 19   | qq.com | 56     |
| 20   | taobao.com | 63     |
| 21   | pinterest.com | 63     |
| 28   | yandex.ru | 63     |
| 31   | netflix.com | 54     |
| 35   | imgur.com | 63     |
| 41   | tmall.com | 63     |
| 53   | fc2.com | 18     |
| 55   | pornhub.com | 29     |

| Rank | Domain | # Days |
|------|--------|--------|
| 31   | netflix.com | 59     |
| 53   | fc2.com | 18     |
| 392  | ebay.in | 7      |
| 456  | ebay.it | 8      |
| 528  | bleacherreport.com | 24     |

| Rank | Domain | # Days |
|------|--------|--------|
| 580  | kayak.com | 13     |
| 592  | cbssports.com | 60     |
| 626  | gamefaqs.com | 12     |
| 633  | overstock.com | 17     |
| 730  | cookpad.com | 63     |

| Rank | Domain | # Days |
|------|--------|--------|
| 31   | netflix.com | 59     |
| 74   | whatsapp.com | 62     |
| 158  | vice.com | 26     |
| 221  | 9gag.com | 31     |
| 322  | liputan6.com | 28     |

| Rank | Domain | # Days |
|------|--------|--------|
| 353  | paytm.com | 27     |
| 464  | playstation.com | 11     |
| 527  | woot.com | 24     |
| 528  | bleacherreport.com | 24     |
| 615  | leagueoflegends.com | 27     |

These findings highlight the need for better management of cryptographic state to ensure the security and privacy of TLS connections.