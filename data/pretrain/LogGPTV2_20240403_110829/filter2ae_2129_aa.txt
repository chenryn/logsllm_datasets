# VM Pwn学习
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：Lock@星盟
新手向，会讲得比较详细，入门不易
虚拟机保护的题目相比于普通的pwn题逆向量要大许多，需要分析出分析出不同的opcode的功能再从中找出漏洞，实际上，vmpwn的大部分工作量都在逆向中，能分析出虚拟指令集的功能实现，要做出这道题也比较容易了。
先给出几个概念
####  1.虚拟机保护技术
所谓虚拟机保护技术，是指将代码翻译为机器和人都无法识别的一串伪代码字节流；在具体执行时再对这些伪代码进行一一翻译解释，逐步还原为原始代码并执行。这段用于翻译伪代码并负责具体执行的子程序就叫作虚拟机VM（好似一个抽象的CPU）。它以一个函数的形式存在，函数的参数就是字节码的内存地址。
####  2.VStartVM
虚拟机的入口函数，对虚拟机环境进行初始化
####  3.VMDispather
解释opcode，并选择对应的Handler函数执行，当Handler执行完后会跳回这里，形成一个循环
####  4.opcode
程序可执行代码转换成的操作码
流程图如下
下面来看题
## 0x1.ciscn_2019_qual_virtual
首先检查保护
无PIE
拖进IDA分析流程
程序模拟了一个虚拟机，v5，v6，v7分别是stack段，text段和data段，set函数如下
    _DWORD *__fastcall set(int a1)
    {
      _DWORD *result; // rax
      _DWORD *ptr; // [rsp+10h] [rbp-10h]
      void *s; // [rsp+18h] [rbp-8h]
      ptr = malloc(0x10uLL);
      if ( !ptr )
        return 0LL;
      s = malloc(8LL * a1);
      if ( s )
      {
        memset(s, 0, 8LL * a1);
        *(_QWORD *)ptr = s;
        ptr[2] = a1;
        ptr[3] = -1;
        result = ptr;
      }
      else
      {
        free(ptr);
        result = 0LL;
      }
      return result;
    }
函数很简单，就不多说了
分配好各个段之后，首先往一个chunk上读入name，然后让我们输入指令，先写到一个0x400的缓冲区中，然后再写到text段中，store_opcode函数如下
    void __fastcall store_opcode(__int64 a1, char *a2)
    {
      int v2; // [rsp+18h] [rbp-18h]
      int i; // [rsp+1Ch] [rbp-14h]
      const char *s1; // [rsp+20h] [rbp-10h]
      _QWORD *ptr; // [rsp+28h] [rbp-8h]
      if ( a1 )
      {
        ptr = malloc(8LL * *(int *)(a1 + 8));
        v2 = 0;
        for ( s1 = strtok(a2, delim); v2 = 0 && (unsigned int)sub_40144E(a1, ptr[i]); --i )
          ;
        free(ptr);
      }
    }
函数接受两个参数，a1为text段的指针，a2为缓冲区的指针，strtok函数原型如下
    char *strtok(char *str, const char *delim)
    str -- 要被分解成一组小字符串的字符串。
    delim -- 包含分隔符的 C 字符串。
    该函数返回被分解的第一个子字符串，如果没有可检索的字符串，则返回一个空指针。
程序中的delim为 **nrt** ， **strtok(a2, delim)** 就是以 **nrt** 分割a2中的字符串
由下面的if-else语句我们可以知道程序实现了 **push,pop,add,sub,mul,div,load,save**
这几个功能，每个功能都对应着一个opcode，将每一个opcode存储到函数中分配的一个临时data段中(函数执行完后这个chunk就会被free掉)
sub_40144E函数如下
    __int64 __fastcall sub_40144E(__int64 a1, __int64 a2)
    {
      int v3; // [rsp+1Ch] [rbp-4h]
      if ( !a1 )
        return 0LL;
      v3 = *(_DWORD *)(a1 + 12) + 1;
      if ( v3 == *(_DWORD *)(a1 + 8) )
        return 0LL;
      *(_QWORD *)(*(_QWORD *)a1 + 8LL * v3) = a2;
      *(_DWORD *)(a1 + 12) = v3;
      return 1LL;
    }
这个函数是用来将函数中的临时text段的指令转移到程序中的text段的，每八个字节存储一个opcode，需要注意的是，这里存储opcode的顺序和我们输入指令的顺序是相反的(不过也没啥需要主义的，反正程序是按照我们输入的指令顺序来执行的)。
write_stack函数如下
    void __fastcall write_data(__int64 a1, char *a2)
    {
      int v2; // [rsp+18h] [rbp-28h]
      int i; // [rsp+1Ch] [rbp-24h]
      const char *nptr; // [rsp+20h] [rbp-20h]
      _QWORD *ptr; // [rsp+28h] [rbp-18h]
      if ( a1 )
      {
        ptr = malloc(8LL * *(int *)(a1 + 8));
        v2 = 0;
        for ( nptr = strtok(a2, delim); v2 = 0 && (unsigned int)sub_40144E(a1, ptr[i]); --i )
          ;
        free(ptr);
      }
    }
和store_opcode函数相比就是去掉了存储opcode的环节，将我们输入的数据存储在stack段中。
我们再看到execute函数
    __int64 __fastcall sub_401967(__int64 a1, __int64 a2, __int64 a3)
    {
      __int64 v4; // [rsp+8h] [rbp-28h]
      unsigned int v5; // [rsp+24h] [rbp-Ch]
      __int64 v6; // [rsp+28h] [rbp-8h]
      v4 = a3;
      v5 = 1;
      while ( v5 && (unsigned int)take_value(a1, &v6) )
      {
        switch ( v6 )
        {
          case 0x11LL:
            v5 = push(v4, a2);
            break;
          case 0x12LL:
            v5 = pop(v4, a2);
            break;
          case 0x21LL:
            v5 = add(v4, a2);
            break;
          case 0x22LL:
            v5 = sub(v4, a2);
            break;
          case 0x23LL:
            v5 = mul(v4, a2);
            break;
          case 0x24LL:
            v5 = div(v4, a2);
            break;
          case 0x31LL:
            v5 = load(v4, a2);
            break;
          case 0x32LL:
            v5 = save(v4, a2);
            break;
          default:
            v5 = 0;
            break;
        }
      }
      return v5;
    }
接受三个参数，a1为text段结构体的指针，a2为stack段结构体的指针，a3为data段结构体的指针
take_value函数如下
    __int64 __fastcall take_value(__int64 a1, _QWORD *a2)
    {
      if ( !a1 )
        return 0LL;
      if ( *(_DWORD *)(a1 + 12) == -1 )
        return 0LL;
      *a2 = *(_QWORD *)(*(_QWORD *)a1 + 8LL * (int)(*(_DWORD *)(a1 + 12))--);
      return 1LL;
    }
这个就是从text段中取opcode，从后往前取，因为是倒叙存储，所以最后一个opcode就是我们输入的第一个指令。
取出opcode之后通过switch语句来执行对应的功能，首先看到push函数
    _BOOL8 __fastcall push(__int64 a1, __int64 a2)
    {
      __int64 v3; // [rsp+18h] [rbp-8h]
      return (unsigned int)take_value(a2, &v3) && (unsigned int)0x40144E(a1, v3);
    }
接受两个参数，a1为data段结构体的指针，a2为stack段结构体的指针，push中有两个函数，第一个函数从stack中取值，第二个函数将从stack中取出的值存入data段中
pop函数
    _BOOL8 __fastcall pop(__int64 a1, __int64 a2)
    {
      __int64 v3; // [rsp+18h] [rbp-8h]
      return (unsigned int)take_value(a1, &v3) && (unsigned int)0X40144E(a2, v3);
    }
pop函数中的两个函数和push函数相同，只不过参数不一样，将a1和a2的位置调换了一下，push将stack的值放入data段中，pop则将data中的值放入stack段中
add函数
    __int64 __fastcall add(__int64 a1)
    {
      __int64 result; // rax
      __int64 v2; // [rsp+10h] [rbp-10h]
      __int64 v3; // [rsp+18h] [rbp-8h]
      if ( (unsigned int)take_value(a1, &v2) && (unsigned int)take_value(a1, &v3) )
        result = write_data(a1, v3 + v2);
      else
        result = 0LL;
      return result;
    }
add只接受一个参数，data段结构体的指针
通过两个tack_value函数从data段中取出两个连续值，然后将两个值的和写入data段
sub
    __int64 __fastcall sub(__int64 a1)
    {
      __int64 result; // rax
      __int64 v2; // [rsp+10h] [rbp-10h]
      __int64 v3; // [rsp+18h] [rbp-8h]
      if ( (unsigned int)take_value(a1, &v2) && (unsigned int)take_value(a1, &v3) )
        result = write_data(a1, v2 - v3);
      else
        result = 0LL;
      return result;
    }
sub函数和add函数的区别在于sub函数将两个值的插写入data段
mul
    __int64 __fastcall mul(__int64 a1)
    {
      __int64 result; // rax
      __int64 v2; // [rsp+10h] [rbp-10h]
      __int64 v3; // [rsp+18h] [rbp-8h]
      if ( (unsigned int)take_value(a1, &v2) && (unsigned int)take_value(a1, &v3) )
        result = write_data(a1, v3 * v2);
      else
        result = 0LL;
      return result;
    }
将两个值的乘积写入data段
    __int64 __fastcall div(__int64 a1)
    {
      __int64 result; // rax