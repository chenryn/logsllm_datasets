https://attacker.com/@example.com
    Non-ASCII Characters
    You can sometimes exploit inconsistencies in the way the validator and browsers decode non-ASCII characters. For example, let’s say that this URL has passed URL validation:
    有时候，你可以利用验证器和浏览器解码非ASCII字符时出现的不一致性。例如，假设这个URL通过了URL验证：
https://attacker.com%ff.example.com
     %ff
    is the character
     ÿ
    , which is a non-ASCII character. The validator has determined that
     example.com
    is the domain name, and
     attacker.comÿ
    is the subdomain name. Several scenarios could happen. Sometimes browsers decode non-ASCII characters into question marks. In this case,
     example.com
    would become part of the URL query, not the hostname, and the browser would navigate to
     attacker.com
    instead:
    %ff是字符ÿ，它是一个非ASCII字符。验证器已确定example.com是域名，attacker.comÿ是子域名。可能会发生几种情况。有时浏览器会将非ASCII字符解码为问号。在这种情况下，example.com将成为URL查询的一部分，而不是主机名，浏览器将导航到attacker.com。
https://attacker.com?.example.com
    Another common scenario is that browsers will attempt to find a “most alike” character. For example, if the character
     ╱
    (
     %E2%95%B1
    ) appears in a URL like this, the validator might determine that the hostname is
     example.com
    :
    另一个常见的情景是浏览器会尝试找到“最相似”的字符。例如，如果像这样的字符╱(%E2%95%B1)出现在URL中，验证器可能会确定主机名为example.com。
https://attacker.com╱.example.com
    But the browser converts the slash look-alike character into an actual slash, making
     attacker.com
    the hostname instead:
    但是，浏览器将类似斜杠的字符转换为实际的斜杠，使攻击者.com 成为主机名。
https://attacker.com/.example.com
    Browsers normalize URLs this way often in an attempt to be user-friendly. In addition to similar symbols, you can use character sets in other languages to bypass filters. The
     Unicode
    standard is a set of codes developed to represent all of the world’s languages on the computer. You can find a list of Unicode characters at
     http://www.unicode.org/charts/
    . Use the Unicode chart to find look-alike characters and insert them in URLs to bypass filters. The
     Cyrillic
    character set is especially useful since it contains many characters similar to ASCII characters.
    浏览器经常以这种方式规范化URL，试图使其更加用户友好。除了类似的符号外，您还可以使用其他语言的字符集来绕过过滤器。 Unicode标准是一组代码，旨在在计算机上表示世界上所有的语言。您可以在http://www.unicode.org/charts/上找到Unicode字符的列表。使用Unicode图表查找类似的字符并将它们插入URL以绕过过滤器。 Cyrillic字符集特别有用，因为它包含许多与ASCII字符相似的字符。
    Combining Exploit Techniques
    To defeat more-sophisticated URL validators, combine multiple strategies to bypass layered defenses. I’ve found the following payload to be useful:
    为了击败更复杂的URL验证器，结合多种策略绕过分层防御。我发现以下有效负载非常有用：
https://example.com%PI:EMAIL/example.com
    This URL bypasses protection that checks only that a URL contains, starts with, or ends with an allowlisted hostname by making the URL both start and end with
     example.com
    . Most browsers will interpret
     example.com%252f
    as the username portion of the URL. But if the validator over-decodes the URL, it will confuse
     example.com
    as the hostname portion:
    该URL绕过保护，只检查URL是包含、以、或以白名单主机名结尾，方法是使URL同时以example.com开头和结尾。大多数浏览器将解释example.com%252f作为URL的用户名部分。但如果验证器过度解码URL，则会将example.com混淆为主机名部分：
https://example.com/@attacker.com/example.com
    You can use many more methods to defeat URL validators. In this section, I’ve provided an overview of the most common ones. Try each of them to check for weaknesses in the validator you are testing. If you have time, experiment with URLs to invent new ways of bypassing URL validators. For example, try inserting random non-ASCII characters into a URL, or intentionally messing up its different components, and see how browsers interpret it.
    你可以使用更多方法来打败 URL 验证器。在本节中，我提供了最常见的综述。尝试每种方法以检查您正在测试的验证器中的弱点。如果您有时间，请尝试使用 URL 来发明绕过 URL 验证器的新方法。例如，尝试在 URL 中插入随机的非 ASCII 字符，或故意弄乱其不同的组件， 看看浏览器如何解析它。
    Escalating the Attack
    Attackers could use open redirects by themselves to make their phishing attacks more credible. For example, they could send this URL in an email to a user:
     https://example.com/login?next=https://attacker.com/fake_login.html.
    攻击者可以利用开放重定向来使其网络钓鱼攻击更加可信。例如，他们可以通过电子邮件向用户发送以下URL：https://example.com/login?next=https://attacker.com/fake_login.html。
    Though this URL would first lead users to the legitimate website, it would redirect them to the attacker’s site after login. The attacker could host a fake
    login page on a malicious site that mirrors the legitimate site’s login page, and prompt the user to log in again with a message like this one:
    尽管此URL在首次将用户重定向至合法网站，但在登录后会将其重定向至攻击者的网站。攻击者可以在恶意站点上托管一个模拟合法站点登录页面的假登录页面，并提示用户再次登录，如此消息：
     Sorry! The password you provided was incorrect. Please enter your username and password again.
     抱歉！您提供的密码不正确。请重新输入您的用户名和密码。
    Believing they’ve entered an incorrect password, the user would provide their credentials to the attacker’s site. At this point, the attacker’s site could even redirect the user back to the legitimate site to keep the victim from realizing that their credentials were stolen.
    用户认为他们输入了错误的密码，然后就会将他们的凭据提供给攻击者的网站。此时，攻击者的网站甚至可以将用户重定向回合法网站，以避免受害者意识到他们的凭据已经被窃取。
    Since organizations can’t prevent phishing completely (because those attacks depend on human judgment), security teams will often dismiss open redirects as trivial bugs if reported on their own. But open redirects can often serve as a part of a bug chain to achieve a bigger impact. For example, an open redirect can help you bypass URL blocklists and allowlists. Take this URL, for example:
    由于组织无法完全防止钓鱼攻击（因为这些攻击取决于人类判断），因此安全团队通常会认为单独报告的开放重定向漏洞是微不足道的。但是，开放重定向经常可以作为一个漏洞链的一部分，以实现更大的影响。例如，开放重定向可以帮助您绕过URL阻止列表和白名单。请参考以下URL：
https://example.com/?next=https://attacker.com/
    This URL will pass even well-implemented URL validators, because the URL is technically still on the legitimate website. Open redirects can, therefore, help you maximize the impact of vulnerabilities like server-side request forgery (SSRF), which I’ll discuss in
     Chapter 13
    . If a site utilizes an allowlist to prevent SSRFs and allows requests to only a list of predefined URLs, an attacker can utilize an open redirect within those allowlisted pages to redirect the request anywhere.
    这个URL会通过即使是良好实现的URL验证器，因为该URL在技术上仍然在合法网站上。因此，开放性重定向可以帮助您最大限度地提高服务器端请求伪造（SSRF）等漏洞的影响，这将在第13章中讨论。如果一个网站使用白名单来防止SSRF，并允许请求仅限于一系列预定义的URL，攻击者可以在这些白名单页面中利用开放式重定向将请求重定向到任何地方。
    You could also use open redirects to steal credentials and OAuth tokens. Often, when a page redirects to another site, browsers will include the originating URL as a referer HTTP request header. When the originating URL contains sensitive information, like authentication tokens, attackers can induce an open redirect to steal the tokens via the referer header. (Even when there is no open redirect on the sensitive endpoint, there are ways to smuggle tokens offsite by using open redirect chains. I’ll go into detail about how these attacks work in
     Chapter 20
    .)
    您也可以使用开放式重定向来窃取凭据和OAuth令牌。通常，当一个页面重定向到另一个站点时，浏览器将包括原始URL作为引用HTTP请求头。当原始URL包含敏感信息，比如身份验证令牌时，攻击者可以通过引用头诱导一个开放式重定向来窃取令牌。即使敏感端点上没有开放式重定向，攻击者仍可以使用开放式重定向链将令牌走私离开站点。这些攻击在第20章中详细介绍。
    Finding Your First Open Redirect!
    You’re ready to find your first open redirect. Follow the steps covered in this chapter to test your target applications:
    你已经准备好找出第一个开放重定向。按照本章所涵盖的步骤测试目标应用程序：
     Search for redirect URL parameters. These might be vulnerable to parameter-based open redirect.
     Search for pages that perform referer-based redirects. These are candidates for a referer-based open redirect.
     Test the pages and parameters you’ve found for open redirects.
     If the server blocks the open redirect, try the protection bypass techniques mentioned in this chapter.
     Brainstorm ways of using the open redirect in your other bug chains!
8
      Clickjacking
     Clickjacking
    , or user-interface redressing, is an attack that tricks users into clicking a malicious button that has been made to look legitimate. Attackers achieve this by using HTML page-overlay techniques to hide one web page within another. Let’s discuss this fun-to-exploit vulnerability, why it’s a problem, and how you can find instances of it.
    点击劫持或用户界面伪装是一种攻击，会欺骗用户点击一个看起来合法的恶意按钮。攻击者通过使用HTML页面覆盖技术将一个网页隐藏在另一个网页中来实现这一目的。让我们探讨一下这个有趣而易于利用的漏洞，为什么它是一个问题，以及您如何找到它的实例。
    Note that clickjacking is rarely considered in scope for bug bounty programs, as it usually involves a lot of user interaction on the victim’s part. Many programs explicitly list clickjacking as out of scope, so be sure to check the program’s policies before you start hunting! However, some programs still accept them if you can demonstrate the impact of the clickjacking vulnerability. We will look at an accepted report later in the chapter.
    请注意，点击劫持通常需要受害者进行大量交互，因此很少被视为漏洞赏金计划的范围内。许多计划明确将点击劫持列为超范围，因此在开始寻找之前，请务必检查计划的政策！然而，如果您能够证明点击劫持漏洞的影响，某些计划仍会接受它们。我们将在本章后面查看一份被接受的报告。
    Mechanisms
    Clickjacking relies on an HTML feature called an
     iframe
    . HTML iframes allow developers to embed one web page within another by placing an
    tag on the page, and then specifying the URL to frame in the tag’s
     src
    attribute. For example, save the following page as an HTML file and open it with a browser:
    点击劫持依赖于一种叫做iframe的HTML功能。HTML iframes允许开发人员通过在网页上放置一个标签，然后在标签的src属性中指定要嵌入的网页的URL来将一个网页嵌入另一个网页中。例如，将以下页保存为HTML文件，并用浏览器打开：
  This is my web page.
  If this window is not blank, the iframe source URL can be framed!
    You should see a web page that looks like
     Figure 8-1
    . Notice that a box places
     www.example.com
    in one area of the larger page.
    你应该会看到一个类似图8-1的网页。请注意，一个方框会把www.example.com放在更大页面的某个区域。
       Figure 8-1
      : If the iframe is not blank, the page specified in the iframe’s
        src
      attribute can be framed!
      图8-1：如果iframe不为空，则可以将指定在iframe的src属性中的页面框架化！
    Some web pages can’t be framed. If you place a page that can’t be framed within an iframe, you should see a blank iframe, as in
     Figure 8-2
    .
    一些网页无法被框架。如果您将一个无法被框架的页面放置在iframe中，您应该会看到一个空白的iframe，如图8-2所示。
       Figure 8-2
      : If the iframe is blank, the iframe source cannot be framed.
      图8-2：如果iframe为空，则无法框定iframe来源。
    Iframes are useful for many things. The online advertisements you often see at the top or sides of web pages are examples of iframes; companies use these to include a premade ad in your social media or blog. Iframes also allow you to embed other internet resources, like videos and audio, in your web pages. For example, this iframe allows you to embed a YouTube video in an external site:
    Iframes对于许多事情都非常有用。您经常在网页顶部或侧边看到的在线广告就是Iframes的例子;公司使用这些来在您的社交媒体或博客中包含预先制作的广告。Iframes还允许您将其他互联网资源（例如视频和音频）嵌入您的网页中。例如，这个Iframe允许你在外部站点中嵌入YouTube视频。
    Iframes have made our internet a more vibrant and interactive place. But they can also be a danger to the framed web page because they introduce the possibilities of a clickjacking attack. Let’s say that
     example.com
    is a banking site that includes a page for transferring your money with a click of a button. You can access the balance transfer page with the URL
     https://www.example.com/transfer_money
    .
    Iframes让网上世界变得更加充满活力和互动性。但是它们也会对被嵌套的网页构成危险，因为它们引入了点击劫持攻击的可能性。假设example.com是一个银行网站，包括一个可通过点击按钮转移您的资金的页面。您可以通过URL https://www.example.com/transfer_money 访问余额转移页面。
    This URL accepts two parameters: the recipient account ID and the transfer amount. If you visit the URL with these parameters present, such as
     https://www.example.com/transfer_money?recipient=RECIPIENT_ACCOUNT&amount=AMOUNT_TO_TRANSFER
    , the HTML form on the page will appear prefilled (
     Figure 8-3
    ). All you have to do is to click the Submit button, and the HTML form will initiate the transfer request.
    此URL接受两个参数：收件人账户ID和转账金额。如果您访问带有这些参数的URL，例如 https://www.example.com/transfer_money?recipient=RECIPIENT_ACCOUNT&amount=AMOUNT_TO_TRANSFER，页面上的HTML表单将自动填充（图8-3）。您只需点击提交按钮，HTML表单就会发起转账请求。
       Figure 8-3
      : The balance transfer page with the HTTP POST parameters prefilled
      图8-3：具有预填HTTP POST参数的余额转移页面
    Now imagine that an attacker embeds this sensitive banking page in an iframe on their own site, like this:
    现在想象一下，如果攻击者将这个敏感的银行页面嵌入到他们自己的网站的 iframe 中，就像这样：
  Welcome to my site!
    This iframe embeds the URL for the balance transfer page. It also passes in the URL parameters to prefill the transfer recipient and amount. The attacker hides this iframe on a website that appears to be harmless, then tricks the user into clicking a button on the sensitive page. To achieve this, they overlay multiple HTML elements in a way that obscures the banking form. Take a look at this HTML page, for example:
    该 iframe 嵌入了余额转账页面的 URL。它还传递了 URL 参数以预填转账收件人和金额。攻击者将此 iframe 隐藏在一个看似无害的网站上，然后诱骗用户点击敏感页面上的按钮。为了实现这一点，他们以一种方式叠加多个 HTML 元素，以模糊银行表单。例如，看看这个 HTML 页面：
  Welcome to my site!
  This is a cybersecurity newsletter that focuses on bug
bounty news and write-ups! 
  Please subscribe to my newsletter below to receive new
cybersecurity articles in your email inbox!
    Email:
  5 
  6 
    You can see that we’ve added a