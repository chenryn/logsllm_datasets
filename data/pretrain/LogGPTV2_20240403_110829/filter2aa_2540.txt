# GSM: WE CAN HEAR EVERYONE NOW!
## DEFCON 2019
### Presenters: Campbell Murray, Eoin Buckley, James Kulikowski, Bartek Piekarski
### BlackBerry
© 2018 BlackBerry. All Rights Reserved.

---

## AGENDA
- **Slides detail a key vulnerability in GSM.**
- **Highlights the derivation of an indicator to exploit this vulnerability.**
- **Section 1: Concept Overview**
- **Section 2: Attack Mechanics**
- **Section 3: Demonstration**
- **Section 4: Cellular Security Discussion**
- **Section 5: Q & A**

---

## Concept Overview

### GSM Background
- **GSM (Global System for Mobile Communications) is a digital mobile telephony system that originated in the late 1980s.**
- **It was a significant improvement over the earlier analog AMPS (Advanced Mobile Phone System).**
- **However, GSM security has several design issues:**
  - **Support for key sizes up to 64 bits.**
  - **Encrypted data contains redundancy.**
  - **Error control coding is applied before ciphering.**

### Typical GSM Channel Structure
- **Encryption with A5/1:**
  - **Key size is at most 64 bits.**
  - **Convolutional error control code is used to combat noise from the wireless channel.**
  - **The attack exploits the convolutional code to identify the cipherstream "noise."**

### High-Level View of the Attack
- **Capture a GSM frame.**
- **Compute a cipherstream/key indicator using convolutional code parameters.**
- **Use the indicator with a Rainbow table to identify the ciphering key.**
- **Use the indicator as a fingerprint for the ciphering key.**

---

## Attack Mechanics

### SACCH Control Channel
- **The demonstration uses the SACCH (Slow Associated Control Channel).**
- **Compromising the SACCH also compromises voice communication (same key).**
- **The attack works for any SACCH message.**
- **The indicator/fingerprint is independent of the message.**
- **Knowledge of the plaintext is not required.**

### Indicator Computation
- **Input message (m): 224 bits.**
- **Convolutional codeword (c1 and c2): 228 bits each.**
- **Cipher stream (c1 and c2): 228 bits each.**
- **Deconvolve the streams c1 and g1, and c2 and g2.**
- **XOR the resulting streams q1 and q2.**
- **Convolutional code parameters:**
  - **g1: 1 0 0 1 1**
  - **g2: 1 1 0 1 1**

### Properties of the Indicator
- **Computed using the full convolutional codeword.**
- **Independent of the SACCH message.**
- **Fully determined by the cipher stream and the convolutional code.**
- **224 bits long, sufficient to identify a 64-bit key.**
- **Rainbow table for A5/1:**
  - **Expected storage requirement: 1.5 Terabytes.**
  - **Based on the Rainbow table created by Karsten Nohl in DEFCON 2010.**

---

## Demonstration

### Cellular Security Discussion

### GSM Security Vulnerabilities
- **Small key size (e.g., at most 64 bits for A5/1).**
- **Ciphering after error control code.**
- **Additional attacks on GSM include:**
  - **Karsten Nohl (DEFCON 2010): "Attacking phone privacy."**
  - **Barkan et al. (2006): "Instant Ciphertext-only Cryptanalysis of GSM encrypted communication."**
  - **False Basestation attacks.**

### Beyond GSM into 3G-to-5G
- **Reduced security risk.**
- **Minimum encrypting key size of 128 bits.**
- **Error control coding applied after encryption, not before.**
- **Cellular industry actively studying solutions for GSM security:**
  - **3GPP TR 33.809 v0.5.0: "Study on 5G Security Enhancements against False Basestations."**

---

## Q&A

### Thank You

---

## Appendix

### Detailed Mathematical Explanation
- **Consider the addition of the A5/x cipherstream to the codeword.**
- **Separate the cipherstream into portions XOR'd for convolutional code output 1 and 2.**
- **Let output 1 cipherstream be: s1.**
- **Let output 2 cipherstream be: s2.**
- **Denote the resulting ciphertext portions as:**
  - **c1 = s1 + p1 = s1 + m*g1**
  - **c2 = s2 + p2 = s2 + m*g2**

### Key to the Attack
- **The ciphertext portions can also be divided by g1 and g2 respectively for quotients q1 and q2.**
- **Rearranging c1 and c2, we can write:**
  - **c1 = (q1*g1 + r1) + m*g1 = (q1 + m)*g1 + r1**
  - **c2 = (q2*g2 + r2) + m*g2 = (q2 + m)*g2 + r2**
- **By deconvolving the ciphertext c1 and c2 by g1 and g2 respectively, we can produce the quotients (q1 + m) and (q2 + m).**
- **Adding these quotients generates (q1 + q2), which is independent of the message "m":**
  - **(q1 + m) + (q2 + m) = (q1 + q2)**

---

© 2018 BlackBerry. All Rights Reserved.