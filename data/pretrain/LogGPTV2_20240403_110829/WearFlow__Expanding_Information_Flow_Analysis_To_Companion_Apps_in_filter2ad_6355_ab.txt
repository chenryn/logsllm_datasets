(synchronizeData) in line 7.
Listing 1: Simpliﬁed example of mobile app exﬁltrating data
to the companion app.
1 nodeID = getSmartwatchId ()
2 location = getGeolocation ()
3 text = " Hello "
4 channel = WearAPI . createChannel (" path_x ")
5 WearAPI . put ( channel , " sensitive " , location )
6 WearAPI . put ( channel , " greetings " , text )
7 WearAPI . synchronizeData ( nodeID , channel )
Listing 2 shows how the wearable app receives this trans-
mission with the location data.
Listing 2: Example of companion app exﬁltrating sensitive
data.
1 event = WearAPI . getSynchronizationEvent ()
2 if ( event . path == " path_x "){
data = parseEvent ( event )
3
location = data [" secret "]
hello = data [" greetings "]
exposeToInternet ( location )
exposeToInternet ( hello )
4
5
6
7
8 } else if ( event . path == " path_y "){
9
10 }
do_something_else
First, the app fetches the event from the channel using the
Data Layer API (line 1). The developer uses a conditional
statement to execute actions depending on the event’s path.
Paths are the only way to characterize events that trigger
different data processing strategies when exchanging data
through a channel. Here, path_x (lines 3 to 7) corresponds
to the branch that handles the data sent by listing 1, which
includes the geolocation. In this case, the geolocation is sent
via a sink in the companion app to the Internet. The branch
path_y is used to process a different event.
On the receiver side, it also possible to specify the channel
path in the Manifest using an intent-ﬁlter. In this case, the
service only receives events which path is equal to the path
speciﬁed in the Manifest. However, it also possible to specify
a path preﬁx and then trigger different branches in the code.
For listener in activities, developers rely on indirect references
to the path on the code, like the example.
3 Security Threats in Wearable Ecosystem
The exchange of sensitive data between mobile and wearable
applications introduces risks in relation on how that data may
be handled by both the mobile and/or the wearable app. In
our case, we assume that the smartphone and smartwatch
will contain sensitive information like Personal Identiﬁable
Information (PII), contacts information, and biomedical data
that could be exﬁltrated either from the smartphone or from
the smartwatch.
66    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
3.1 Threat Model
We identify the following security risks that arise from the
transmission of PII in the mobile-wear ecosystem:
1. Re-delegation: The permission model in Android re-
quires developers to declare the permissions of their
mobile and wearable apps separately. This enables mo-
bile and wearable apps to engage in colluding behav-
iors [27]. For instance, a mobile app that requests the
READ_CONTACTS permission, can use the Data Layer APIs
to send the contact information to a wearable application
that does not have this permission. Similarly, a wearable
application could share sensor data such as heart rate or
other sensors with its corresponding mobile app without
requiring access to the Google Fit permissions.
2. Wearable data leaks: Wear OS includes APIs to perform
HTTP and other network requests to Internet facing ser-
vices. This means that wearable apps have exactly the
same capabilities to exﬁltrate data as regular mobile apps.
However, as already mentioned in Section 1, information
ﬂow tools available today only account for data leaks that
happen directly via the mobile app (or via other apps in
the case of collusion). As of today, there are no methods
to detect data leaks through wearable interfaces.
3. Mobile data leaks: In a similar way, the mobile app could
exﬁltrate sensitive data leaked from the wearable app
environment. An example of sensitive data unique to
the wearable is the heart rate. A mobile application can
pull this data and sent it over the network. Note that
while this threat can be materialized through a permis-
sion re-delegation attack, it is not strictly bound to this
attack. Instead, both apps can request permission to ac-
cess speciﬁc sensitive data, but the taint is lost when data
is transmitted from the companion to the mobile app.
4. Layout obfuscation: Developers are increasingly using
obfuscation techniques to prevent reverse engineering
and to shrink the size of their apps [17]. Obfuscation
presents a challenge to information ﬂows analysis when
it modiﬁes the signature of relevant classes and methods.
In our case, the APIs from the Data Layer might be
obfuscated, and we cannot merely look at the signatures
of the API methods.
To the best of our knowledge, this is the ﬁrst framework
that models Mobile-Wear communication. As a consequence,
current frameworks fail to detect the situations above. This
happens either when developers are not following good cod-
ing practices or when miscreants intentionally try to evade
detection mechanism that rely on data-ﬂow analysis.
For simplicity, we do not discuss how permissions are as-
signed. However, we note that the Motivation Example in
section 2.5 relates to a re-delegation attack when the compan-
ion app does not require the geolocation permission. While
taint tracking tools are able to identify sensitive data ﬂows
in the mobile app, they can not propagate the tracking to the
companion app. The simplest way to solve this is to consider
the execution context of the mobile (sender) and companion
(receiver) app as a single context. Thus, enabling us to rea-
son about existing Mobile-Wear communication and to track
non-sensitive message individually.
Note that a Mobile-Wear taint tracking needs to consider
that data ﬂows are combined in a single point when the sender
transmits the DataItem, and it separates again when the re-
ceiver app parses the event. This is shown in Listing 1, where
the Data Layer aggregates data (i.e., the geolocation and a
constant value) into a single channel. Finally, we note that an
attacker may use any other channel described in Section 2.3
to leak sensitive data, although the technical procedure will
defer.
Next, we show how we address this problem for all chan-
nels.
4 Modeling Google Play Services
WearFlow expands the context of taint-tracking analysis from
a single application to a richer execution environment that
includes the wearable ecosystem (i.e., the Wear OS).
Mobile-Wear taint tracking presents a different set of con-
strains and characteristics than Inter-Application and Inter-
Component communication analysis. In Wear OS, the commu-
nication between the smartphone and the wearable involves
the mobile app, Google Play Services, and the wearable app.
As Google Play Services library acts as a bridge between
the two, we need to model its behavior to track information
between the two apps.
As seen in the examples shown in Listings 1 and 2, wear-
able APIs are designed to send and receive data in batches.
This means that developers ﬁrst insert the different items they
want to transmit between apps and then execute a synchroniza-
tion API call. From a data analysis perspective, this means
that multiple data ﬂows join into a single point when an app
invokes the synchronization API to send data. One possi-
ble solution would be to taint all the information exchanged.
However, this overestimation would result in a high number
of false positives. There is another challenge behind tracking
individual data ﬂows in Wear OS, i.e.: Google Play Services
is not open source and it is implemented in native code, which
makes the data tracking more difﬁcult [28].
In order to track these ﬂows, we have created a model of
the Data Layer to generate a custom implementation of the
wearable client library. To create the model, we manually
inspected the wearable-APIs from the Data Layer, and built a
sequence of possible invocations and the effect of these APIs
on the context of the communication. This model allows us
to extract the context of each communication, such as the
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    67
path and the data added into a channel. Then, we can use this
information to replace the invocations to the original APIs
with invocation to our instrumented APIs.
Note that we do not know the details of how Google Play
Services implements the communication, but we do know the
result of the communication, and we can reason about the
context of communication by looking at relevant points where
the apps invoke wearable APIs.
The result of our model is a mapping between the original
methods from the Data Layer client library to a modiﬁed im-
plementation template that facilitates the matching of individ-
ual data ﬂows between apps. This modiﬁed implementation
is generated as follows:
1. We identify all relevant classes from the gms-wearable
library and generate custom signatures for each method.
2. For each app, we identify all invocations of synchronous
and asynchronous APIs from the Data Layer. For each
invocation we run a taint analysis to extract the context
of the transmission. This involves:
(a) Identifying the channel creation.
(b) Searching the items that have been added into the
channel variable (data sent across the channel).
(c) Evaluating strings from the context (path and keys).
(d) Generating custom API calls using the extracted
context and corresponding method template.
(e) Replacing original method invocation with a cus-
tom API invocation.
By doing this, we can simulate the propagation of
data ﬂows across apps on different devices while keep-
ing the semantics of the different data ﬂows intact. As
an example, whenever we ﬁnd a call to , the model will tell us
that this is a synchronous communication which in sending a
DataItem (encapsulated in the PutDataRequest). In this case,
the model also speciﬁed that the PutDataRequest object re-
quired a previous API call that creates a channel, and other
APIs that add data to the DataItem. We use this information
to do a backward and forward inter-procedural analysis to ex-
tract such information. Finally, the model provides the rules
to match entry and exit points once we have the results of the
data ﬂow analysis.
5 WearFlow
We design a pipeline of ﬁve phases that result in the detec-
tion of Mobile-Wear data leaks. Figure 3 shows a high-level
overview of our system. Phase 1 converts the app to a conve-
nient representation and extract relevant information. Phase 2
deobfuscates (if necessary) the Google Play Services client
library and relevant app components. Phase 3 performs a con-
text extraction and instrumentation for every invocation to a
wearable API. Phase 4, runs the information ﬂow analysis
and export the results. Finally, we match data ﬂows accord-
ing to the model of the Data Layer in phase 5 to obtain all
Mobile-Wear ﬂows.
Phase 1: Pre-Processing
Android packs together the wearable and the mobile app into
a single package ﬁle (namely, APK). WearFlow ﬁrst splits
both apps and then uses Soot to pre-process each executable
separately. In particular, we convert the Dalvik bytecode into
the Jimple Intermediate Representation (IR), and parse the
relevant conﬁguration ﬁles (e.g., the wearable and mobile app
Manifests). Jimple simpliﬁes the different program analysis
techniques we use in the following phases.
WearFlow then searches for Wear OS components (services
and callbacks as in Table 1), subject to an optional deobfusca-
tion phase (Phase 2). We leverage the Manifests to understand
the relationship between paths and services by looking at the
intent ﬁlters declared as WearableService. We then inspect the
Jimple to obtain all variables of the data types listed in Table 1,
including those that appear in callbacks. These data types are
used to open Mobile-Wear channels. We will instrument all
these components as described in Phase 3.
Phase 2: Deobfuscation
We use a simple heuristic to detect if the app is obfuscated.
First, we assume that all Mobile-Wear applications would use
any of the methods from the classes of the Data Layer API
shown in Table 1. Thus, we search for these methods in the
client libraries of the APK. If no method is found, we consider
the app may be obfuscated and perform a type signature brute-
force search. This signature models the type of inputs and
outputs of a function.
In addition to the type signature, we further look at lo-
cal variables declared using system types in the method and
compute their frequency per method (when the method is
not a stub). The rationale behind including context from the
method itself is to reduce the number of false positives when
performing the signature search. The signature model uses
only system types and abstract types from the Data Layer
to generate the obfuscation-resilient signatures. We refer the
reader to Section 7 for a discussion on our choices and how
this may impact our results.
We extract signatures for all relevant methods that model
Mobile-Wear IPC (see Section 2.3). Overall we extract
63 signatures capturing methods that exchange Messages,
DataItems, Assets and Channels. We then search for meth-
ods in app’s components that match against these signatures.
When we ﬁnd a match, we identify the corresponding wear-
able API of our interest. As we show in Section 6.4, we can
68    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Figure 3: Overview of WearFlow.
identify all the methods used by the model with the above
features.
Listing 3: Simpliﬁed instrumented code.
Phase 3: Instrumentation
This phase aims at instrumenting the apps under analysis
and it has three steps: context extraction, string analysis, and
code generation. It takes as input a model of Google Play
Services library. Our attempt to model this library is described
in Section 4.
For the context extraction, we search invocations to wear-
able APIs that send or receive data in each of the compo-
nents seen in the pre-processing step. Once that one API is
identiﬁed, WearFlow performs an inter-procedural backward
analysis to ﬁnd the creation of the corresponding channel,
and then a forward analysis to ﬁnd invocations to APIs which
add data into the channel. We then evaluate strings of rele-
vant API methods; for instance, the method  for DataItems. For this we perform
an inter-procedural and context-sensitive string analysis. For
asynchronous APIs (MessageClient), the context extraction
is limited to evaluate the variable which contains the channel
path.
The next step is to instrument the app. On the one hand,
we add our custom methods to the client library. In particular,
we add the declaration of method that we use as entry/exit
points in their corresponding classes. On the other hand, for
each invocation to APIs methods acting as entry/exit points,
we generate the corresponding invocation to our custom APIs.
We use the output of the context extraction, string analysis,
and the model of the Data Layer to generate such invocations.
The resulting code will replace the invocations to the original
methods in the wearable library.
The Listing 3 shows the instrumented code corresponding
to the motivation example in Listing 1. This code replaces
the lines [4 - 7] from the example. Note that the code below
illustrates a notion of the instrumentation which is done in
the Jimple IR.
1 nodeID = g e t S m a r t w a t c h I d ( )
2
t e x t = " h e l l o "
l o c a t i o n = g e t G e o l o c a t i o n ( )
3
4 c h a n n e l = WearAPI . c r e a t e C h a n n e l ( " p a t h _ x " )
5 WearAPI . s y n c S t r i n g ( nodeID ,
c h a n n e l ,
" g r e e t i n g s " ,
t e x t )
6 WearAPI . s y n c S t r i n g ( nodeID ,
l o c a t i o n )
" s e n s i t i v e " ,
c h a n n e l ,
Phase 4: Data Flow Analysis
This phase performs data ﬂow analysis of the Mobile-Wear