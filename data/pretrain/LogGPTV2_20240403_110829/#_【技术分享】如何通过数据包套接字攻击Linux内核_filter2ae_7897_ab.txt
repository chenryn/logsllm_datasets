     vfs_write+0x187/0x530 fs/read_write.c:558
     SYSC_write fs/read_write.c:605 [inline]
     SyS_write+0xfb/0x230 fs/read_write.c:597
     entry_SYSCALL_64_fastpath+0x1f/0xc2
    RIP: 0033:0x40b031
    RSP: 002b:00007faacbc3cb50 EFLAGS: 00000293 ORIG_RAX: 0000000000000001
    RAX: ffffffffffffffda RBX: 000000000000002a RCX: 000000000040b031
    RDX: 000000000000002a RSI: 0000000020002fd6 RDI: 0000000000000015
    RBP: 00000000006e2960 R08: 0000000000000000 R09: 0000000000000000
    R10: 0000000000000000 R11: 0000000000000293 R12: 0000000000708000
    R13: 000000000000002a R14: 0000000020002fd6 R15: 0000000000000000
    Allocated by task 30534:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:513
     set_track mm/kasan/kasan.c:525 [inline]
     kasan_kmalloc+0xad/0xe0 mm/kasan/kasan.c:617
     kasan_slab_alloc+0x12/0x20 mm/kasan/kasan.c:555
     slab_post_alloc_hook mm/slab.h:456 [inline]
     slab_alloc_node mm/slub.c:2720 [inline]
     slab_alloc mm/slub.c:2728 [inline]
     kmem_cache_alloc+0x1af/0x250 mm/slub.c:2733
     getname_flags+0xcb/0x580 fs/namei.c:137
     getname+0x19/0x20 fs/namei.c:208
     do_sys_open+0x2ff/0x720 fs/open.c:1045
     SYSC_open fs/open.c:1069 [inline]
     SyS_open+0x2d/0x40 fs/open.c:1064
     entry_SYSCALL_64_fastpath+0x1f/0xc2
    Freed by task 30534:
     save_stack_trace+0x16/0x20 arch/x86/kernel/stacktrace.c:59
     save_stack+0x43/0xd0 mm/kasan/kasan.c:513
     set_track mm/kasan/kasan.c:525 [inline]
     kasan_slab_free+0x72/0xc0 mm/kasan/kasan.c:590
     slab_free_hook mm/slub.c:1358 [inline]
     slab_free_freelist_hook mm/slub.c:1381 [inline]
     slab_free mm/slub.c:2963 [inline]
     kmem_cache_free+0xb5/0x2d0 mm/slub.c:2985
     putname+0xee/0x130 fs/namei.c:257
     do_sys_open+0x336/0x720 fs/open.c:1060
     SYSC_open fs/open.c:1069 [inline]
     SyS_open+0x2d/0x40 fs/open.c:1064
     entry_SYSCALL_64_fastpath+0x1f/0xc2
    Object at ffff880054b70040 belongs to cache names_cache of size 4096
    The buggy address belongs to the page:
    page:ffffea000152dc00 count:1 mapcount:0 mapping:          (null) index:0x0 compound_mapcount: 0
    flags: 0x500000000008100(slab|head)
    raw: 0500000000008100 0000000000000000 0000000000000000 0000000100070007
    raw: ffffea0001549a20 ffffea0001b3cc20 ffff88003eb44f40 0000000000000000
    page dumped because: kasan: bad access detected
    Memory state around the buggy address:
     ffff880054b6ff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
     ffff880054b6ff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    >ffff880054b70000: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                             ^
     ffff880054b70080: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
     ffff880054b70100: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
    ==================================================================
你可以参考syzkaller的代码仓库以了解更多细节，也可以参考KASAN的内核文档部分了解更多细节。如果你在使用syzkaller或者KASAN的过程中遇到任何问题，可以发邮件到PI:EMAIL以及PI:EMAIL进行咨询。
**三、AF_PACKET套接字简介**
为了更好了解这个bug、bug所引发的漏洞以及如何利用这个漏洞，我们需要了解AF_PACKET套接字的相关内容，理解它们在内核中的具体实现方式。
**3.1 概要**
用户可以使用AF_PACKET在设备驱动层发送或者接受数据包。这样一来，用户就可以在物理层之上实现自己的协议，也可以嗅探包含以太网和更高层协议头部的数据包。为了创建一个AF_PACKET套接字，进程必须在用户命名空间中具备CAP_NET_RAW权限，以便管理进程的网络命名空间（network
namespace）。你可以参考数据包套接字文档了解更多细节。需要注意的是，如果内核启用了非特权用户命名空间，那么非特权用户就能创建数据包套接字。
进程可以使用send和recv这两个系统调用在数据包套接字上发送和接受数据包。然而，数据包套接字提供了一个环形缓冲区（ring
buffer）方式使数据包的发送和接受更为高效，这个环形缓冲区可以在内核和用户空间之间共享使用。我们可以使用PACKET_TX_RING以及PACKET_RX_RING套接字选项创建环形缓冲区。之后，用户可以使用内存映射方式（mmap）映射这个缓冲区，这样包数据就能直接读取和写入到这个缓冲区中。
内核在处理环形缓冲区时有几种不同的处理方式。用户可以使用PACKET_VERSION这个套接字选项选择具体使用的方式。我们可以参考内核文档（搜索“TPACKET
versions”关键字），了解不同版本的环形缓冲区之间的区别。
人们熟知的AF_PACKET套接字的一个应用就是tcpdump工具。使用tcpdump嗅探某个接口上的所有数据包时，处理流程如下所示：
    # strace tcpdump -i eth0
    ...
    socket(PF_PACKET, SOCK_RAW, 768)        = 3
    ...
    bind(3, {sa_family=AF_PACKET, proto=0x03, if2, pkttype=PACKET_HOST, addr(0)={0, }, 20) = 0
    ...
    setsockopt(3, SOL_PACKET, PACKET_VERSION, [1], 4) = 0
    ...
    setsockopt(3, SOL_PACKET, PACKET_RX_RING, {block_size=131072, block_nr=31, frame_size=65616, frame_nr=31}, 16) = 0
    ...
    mmap(NULL, 4063232, PROT_READ|PROT_WRITE, MAP_SHARED, 3, 0) = 0x7f73a6817000
    ...
以上系统调用的顺序对应如下操作：
1、创建一个套接字：socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL))；
2、套接字绑定到eth0接口；
3、通过PACKET_VERSION套接字选项，将环形缓冲区版本设置为TPACKET_V2；
4、使用PACKET_RX_RING套接字选项，创建一个环形缓冲区；
5、将环形缓冲区映射到用户空间。
在这之后，内核开始将来自于eth0接口的所有数据包存入环形缓冲区中，然后tcpdump会从用户空间中对应的映射区域读取这些数据包。
**3.2 环形缓冲区（ring buffers）**
让我们了解一下如何在数据包套接字上使用环形缓冲区。出于一致性考虑，我们在下文引用的代码片段全部来自于4.8版Linux内核。这个内核也是最新的Ubuntu
16.04.2所使用的内核。
现有的文档主要关注的是TPACKET_V1以及TPACKET_V2版的环形缓冲区。由于本文提到的bug只影响TPACKET_V3版，因此我在下文假设我们处理的都是TPACKET_V3版。另外，我主要关注的是PACKET_RX_RING选项，会忽略另一个PACKET_TX_RING选项。
一个环形缓冲区就是一块存放数据包的内存区域。每个数据包会存放在一个单独的帧（frame）中，多个帧会被分组形成内存块。在TPACKET_V3环形缓冲区中，帧的大小是不固定的，只要帧能够存放到内存块中，它的大小就可以取任意值。
为了使用PACKET_RX_RING套接字选项创建TPACKET_V3环形缓冲区，用户必须为环形缓冲区提供准确的参数值。这些参数会通过一个指向tpacket_req3结构体的指针传递给setsockopt调用，该结构体的定义如下所示：
    274 struct tpacket_req3 {
    275         unsigned int    tp_block_size;  /* Minimal size of contiguous block */
    276         unsigned int    tp_block_nr;    /* Number of blocks */
    277         unsigned int    tp_frame_size;  /* Size of frame */
    278         unsigned int    tp_frame_nr;    /* Total number of frames */
    279         unsigned int    tp_retire_blk_tov; /* timeout in msecs */
    280         unsigned int    tp_sizeof_priv; /* offset to private data area */
    281         unsigned int    tp_feature_req_word;
    282 };
tpacket_req3结构体中每个字段的含义如下所示：
1、tp_block_size：每个内存块的大小；
2、tp_block_nr：内存块的个数；
3、tp_frame_size：每个帧的大小，TPACKET_V3会忽视这个字段；
4、tp_frame_nr：帧的个数，TPACKET_V3会忽视这个字段；
5、tp_retire_blk_tov：超时时间（毫秒），超时后即使内存块没有被数据完全填满也会被内核停用（参考下文）；
6、tp_sizeof_priv：每个内存块中私有区域的大小。用户可以使用这个区域存放与每个内存块有关的任何信息；
7、tp_feature_req_word：一组标志（目前实际上只有一个标志），可以用来启动某些附加功能。
每个内存块都有一个头部与之相关，该头部存放在为这个内存块所分配的内存空间的开头部位。内存块的头部结构为tpacket_block_desc，这个结构中有一个block_status字段，该字段用来标识内存块目前是否正在被内核使用，还是可以提供给用户使用。在通常的工作流程中，内核会将数据包存储在某个内存块中，直到该内存块被填满，之后内核会将block_status字段设置为TP_STATUS_USER。之后用户就可以从内存块中读取所需的数据，读取完毕后，会将block_status设置为TP_STATUS_KERNEL，以便释放内存块，归还给内核使用。