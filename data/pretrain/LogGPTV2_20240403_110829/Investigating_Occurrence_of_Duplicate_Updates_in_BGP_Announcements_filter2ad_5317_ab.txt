had problems during March 2009, and we did not use any monitors that did not have complete
data for the month.
16
J.H. Park et al.
AS9002
Flaps 21 times
W   P: 85.249.120.0/23
A   P: 85.249.120.0/23, ASPATH: 9002
53 duplicates
AS3356
A   P: 85.249.120.0/23, ASPATH: 3356 9002
A   P: 85.249.120.0/23, ASPATH: 3356 9002
Rs
Re
(eBGP peer)
Fig. 3. External view of duplicate genera-
tion
Ri
(iBGP client)
Fig. 4. Data collection
they were sent to X from Y. Our case study consisted of preﬁx 85.249.120.0/23 adver-
tised by AS 9002, a direct customer of AS 3356. We had monitors in both AS 9002 and
AS 3356.
Figure 3 summaries our results. During March 2009, AS 9002 announced and with-
drew preﬁx 85.249.120.0/23 21 times. Upon receipt of these announcement and with-
drawal pairs, AS 3356 sends out the announcement to the monitor with prepended
AS-path, but AS 3356 never sends the withdrawal. Instead, AS 3356 sends a dupli-
cate announcement to our monitor. In total, AS 3356 generates 53 duplicates on preﬁx
85.249.120.0/23 after receiving 21 pairs of announcement and withdraw messages. Not
only does this observation back up our hypothesis that the sender of duplicates is the
originator of duplicates, but it also suggests that the cause of duplicates may have some-
thing to do with the way internal topology dynamics interact with eBGP updates.
5 Discovering the Cause of Duplicates
Once we suspected that duplicates may be generated due to some interaction between
iBGP and eBGP, we ran an experiment designed to compare eBGP update+duplicate
pairs, match them with their iBGP counterparts, and compare these iBGP updates to
see what we might learn about duplicate generation.
5.1 Passive Measurement Using iBGP and eBGP Data
Our ﬁrst step was to obtain the data needed for our investigation. We teamed up with
a tier-1 ISP who provided us with access to both iBGP and eBGP updates generated
by one of their routers. Figure 4 illustrates our data-collection setup. Rs is the router
sending updates to our two collector boxes, Ri and Re. Ri is conﬁgured as an iBGP
client of Rs (i.e. route reﬂector client), collecting iBGP data from Rs. Re is an eBGP
peer of Rs, collecting eBGP updates from Rs. Both the iBGP and eBGP sessions have
their MRAI timers disabled, so that Rs will send updates to our collectors as Rs has
updates to send.
Now that we obtained the necessary data, we needed a way to match up eBGP up-
dates to their corresponding iBGP updates for comparison. There are two challenges
in mapping iBGP update sequence with that of eBGP. First, the time that two updates,
Investigating Occurrence of Duplicate Updates in BGP Announcements
17
triggered by the same event, are sent out from Rs can be different. This is due to the
non-deterministic nature of Rs. Second, Ri and Re’s system clocks may not be synchro-
nized. We resolve these timing issues by introducing the notion of update ‘signatures’,
which we now describe.
sig(u) = peer (cid:2) asn (cid:2) preﬁx (cid:2) aspath (cid:2) origin (cid:2) comm (cid:2) agg
The signature of an update contains all of BGP’s transitive attributes that should
be the same in Rs’s updates to either Ri or Re. By using the notion of signature, we
calculate the time differences td observed between eBGP updates and their iBGP coun-
terparts. We ﬁrst generate signatures of all updates received during the tebgp second, and
then search for the second in iBGP, tibgp, that yields the maximum fraction of matched
signatures. In our case, the peak fraction of matched signatures was about 0.7 at a lag
value of 0 (i.e. td = 0). The remaining 0.3 were dispersed within a 10-second range
centered at tebgp. This means that the system times of Ri and Re have synchronized
system clocks to the second precision.
After discovering td, we were able to map eBGP updates to their iBGP counterparts
using a heuristic algorithm involving signature and timestamp comparisons. We col-
lected one day of iBGP and eBGP updates, putting them in sequential order as sent
from Rs. We start with the ﬁrst eBGP update in the sequence. As we moved down the
sequence, we kept per-preﬁx history of signatures for every update we encounter for a
time window of 60 seconds. For each eBGP duplicate update for preﬁx p we found as
we moved forward, we looked at the corresponding iBGP time window to ﬁnd a match
for the sequence of signatures we recorded in eBGP for this preﬁx p. We say the se-
quence has a match when there is the exact sequence of update signatures within the
iBGP time window. Using our heuristic, we were able to match 95.61% of eBGP up-
date+duplicate pairs to their iBGP counterparts. 4.39% of eBGP update+duplicate pairs
could not be mapped to any iBGP counterparts. The missing pairs were due to how the
router processed updates.2
After mapping eBGP updates to their iBGP counterparts, we took each eBGP up-
date+duplicate pair and compared the contents of their corresponding iBGP updates.
For 100% of the 176,266 matched ebgp+duplicate pairs, we observed that their iBGP
counterparts had differing non-mandatory attribute values. Table 5 shows our results.
0.15% of pairs were exceptions, only differing in MED values. For the other 99.85% of
eBGP update+duplicate pairs, we observed corresponding iBGP update pairs with ei-
ther Cluster-list and/or Originator-id differences. These attribute differences represent
changes in intra-domain routing path selections.
5.2 The Cause of Duplicates
The results of our experiment allowed us to determine the main cause of eBGP dupli-
cate updates. Our theory proved to be correct; duplicates are caused by an unintended
2 When two or more updates are received on the same preﬁx in a very short time, the router
sometimes sends out different number of updates to different peers. So, there were cases that
the number of updates sent to iBGP client is different than that of updates sent to eBGP peer,
in which case we declared that there is no match.
18
J.H. Park et al.
eBGP duplicate count % Total Observed iBGP differences
173,594
244
1,371
1,057
94.77 Cluster-list only
0.13 Cluster-list and others
0.75 Originator-id and others
0.58 Cluster-list +
269
6,647
Total: 183,182
Originator-id + others
0.15 MED
3.63 No match found
100.00
P1: NO-CLIST
P1: NO-CLIST
2
3
P1: CLIST = RR1
RRC1
RR1
RR2
P1: CLIST = RR2
AS1
1
P1
RRC2
Fig. 5. Matched iBGP updates
Fig. 6. Inferred cause of duplicates
interaction between eBGP and iBGP. The reason that duplicates are generated is that
routers are receiving updates via iBGP which differ in iBGP attribute values alone, and
thus the router believes the updates to be unique. However, once the router processes
the update, strips the iBGP attribute values, and sends the update to its eBGP peer, the
two updates look identical from the point of view of the eBGP peer.3 Figure 6 illustrates
a case where duplicates are generated due to changes in an iBGP attribute (Cluster-list
in this case).
The main cause of eBGP duplicate updates showed that certain iBGP attribute
changes (Cluster-list and Originator-id) can generate eBGP duplicate updates. We won-
dered if other iBGP attribute changes might also generate eBGP duplicate updates. To
check for this, we performed a simple controlled experiment. We set up two ASes (AS1
and AS2). In AS1, we placed a BGP update injector and a router R1. The injector
maintains an iBGP session with R1 and sends controlled iBGP updates. R1 peers with
a router, R2, in AS2 using an eBGP session.4
After injecting pairs of iBGP updates that only differ in one attribute, we observed
that a pair of iBGP updates differing in either Next-hop, Local-pref, or MED attributes
will generate an eBGP duplicate update.
The experiments we have done so far shed light on how the duplicate bursts, which
we discussed in Section 3, are generated. When a router used to reach a set of preﬁxes
fails, this failure (or ﬂapping) event generates updates that only differ in Next-hop for
the set of preﬁxes. All of these updates become duplicates as they are sent to the eBGP
peers. Using the iBGP/eBGP data collected from our tier-1 ISP, we veriﬁed that indeed
duplicate bursts are preceded by an iBGP route ﬂapping.
6 Differences in the Amount of Observed Duplicates
As observed in 4.2, ASes of the same type vary in the proportion of duplicates they
generate. One reason may be a difference in MRAI timer settings amongst the networks.
3 In our study, we observed that duplicates are generated due to changes in Cluster-list and
Originator-id oscillations under route reﬂection. In a similar way, we believe ASes using AS
confederation architectures will also generate duplicates due to the use of a non-mandatory
non-transitive attribute named AS-confed-sequence, which is essentially the AS confederation
version of the Cluster-list attribute under route reﬂector architectures.
4 Here, R1 is a Cisco 7200 router running IOS v12.2, and R2 is a Quagga router which we use
as a BGP update collector.
Investigating Occurrence of Duplicate Updates in BGP Announcements
19
Fig. 7. Other potential noises
Duplicates are generated during internal routing changes. During the changes, updates
come in bursts, and thus MRAI timers can prevent many updates from being sent.
MRAI timer differences do not fully explain why the amount of observed dupli-
cates varies so much from one AS to another. During our experiments involving eBGP
and iBGP interactions, we noticed that Cluster-list changes were often coupled with
a change in Community or MED attribute values. In these cases, we observed poten-
tially wasteful updates with ﬂuctuating Community/MED values rather than duplicates.
We asked operators at our tier-1 ISP and they conﬁrmed that this was quite deliberate;
routers were conﬁgured to make changes in certain transitive attribute values when-
ever there was a change in certain non-mandatory attribute values in accordance with
[5,6]. [5,6] suggests using Community attribute values as a general purpose attribute
to convey informational tags as well as action tags to receiving networks. MED values
were also used for trafﬁc engineering purposes. However, operators admit that not all
peers need or use this Community information, and for those routers that do not use the
Community information, these BGP updates are as useless to them as duplicates. How-
ever, such updates can be more detrimental than duplicates in one signiﬁcant way; with
duplicates, the negative impact is limited to the direct neighbors. As described earlier,
duplicates do not travel more than one hop. However, if some other (optional) transi-
tive attributes such as Community is changed, then the update is no longer a duplicate
and can potentially be propagated more than one hop.Community value changes are not
useful to networks that are more than one hop away, and yet these networks still must
suffer the same negative impacts of receiving a superﬂuous BGP update.5
Our discovery of these potentially wasteful BGP updates led us to wonder if other
ASes generated similarly potentially wasteful updates. We looked at all updates from
tier-1s observed by our monitors for the month of March 2009, and classiﬁed the up-
dates into 3 types - duplicates, Community/MED change, and remainder. Figure 7
shows our results. While AS3549 and AS2914 generated almost no duplicates, 50%
or more of their total updates were Community/MED change updates. We suspect that
many of these updates could be useless to many networks that receive the update. We
intend on verifying our suspicion in future work.
5 Different router vendors implemented different default behavior in sending Community at-
tribute. For ISPs that use network equipment where the default behavior is to send communi-
ties (e.g. Juniper), then the effect of this problem are likely to be ampliﬁed. However, for ISPs
that use network equipment where the default behavior is to not send communities by default
(e.g. Cisco), then the effect of this problem are likely to be less.
20
J.H. Park et al.
7 Conclusion
In this paper, we conducted the ﬁrst comprehensive measurement study quantifying
the prevalence of duplicates on the Internet across space and time. We discovered that
duplicates make up over 10% of all BGP update trafﬁc. We examined the impact that
duplicates have on the overall health of the Internet, and discovered that routers can
receive upto 86.4% duplicates during their busiest times. We developed a heuristic to
match eBGP updates with their corresponding iBGP counterparts. Finally, we combined
our observations with our heuristic to discover the causes of duplicates on the Internet
- duplicates are caused by an unintended interaction between iBGP and eBGP.
While pure duplicates are clearly unnecessary BGP overhead, our work revealed that
duplicates may not be the only superﬂuous BGP updates ﬂoating around on the Inter-
net. As described in section 6, updates that couple non-transitive attribute changes with
transitive attribute changes may not be useful to all recipients. It would be interesting to
identify all forms of superﬂuous BGP updates and gain an exact measure of how much
BGP trafﬁc is simply unwanted noise. We hope that our work allows the Internet com-
munity to take a signiﬁcant step towards a optimal and clean routing communication
system.
References
1. Bates, T., Chen, E., Chandra, R.: RFC 4456. In: BGP Route Reﬂection: An Alternative to
Full Mesh Internal BGP (April 2006)
2. Labovitz, C., Malan, G.R., Jahanian, F.: Internet routing instability. ACM/IEEE Transactions
on Networking 6(5), 515–528 (1998)
3. Labovitz, C., Malan, G.R., Jahanian, F.: Origins of internet routing instability. ACM/IEEE
Infocom 1, 218–226 (1999)
4. Li, J., Guidero, M., Wu, Z., Purpus, E., Ehrenkranz, T.: BGP Dynamics Revisited. In: ACM
Sigcomm Computer Communications Review (April 2007)
5. Meyer, D.: RFC 4384. BGP Communities for data collection (2006)
6. Steenbergen, R.A., Scholl, T.: BGP Communities: a guide for service provider networks
(2007)
7. Traina, P.: RFC 1774. In: BGP-4 protocol analysis (1995)
8. Traina, P., McPherson, D., Scudder, J.: RFC 5065. In: Autonomous System Confederations
for BGP (August 2007)
9. Wang, L., Zhao, X., Pei, D., Bush, R., Massey, D., Mankin, A., Wu, S.F., Zhang, L.: Observa-
tion and analysis of BGP behavior under stress. In: IMW 2002: Proceedings of the 2nd ACM
SIGCOMM Workshop on Internet measurment, Marseille, France, pp. 183–195. ACM, New
York (2002)
10. Zhang, B., Kambhampati, V., Lad, M., Massey, D., Zhang, L.: Identifying BGP routing table
transfers. In: MineNet 2005: Proceedings of the 2005 ACM SIGCOMM workshop on Mining
network data, pp. 213–218. ACM Press, New York (2005)