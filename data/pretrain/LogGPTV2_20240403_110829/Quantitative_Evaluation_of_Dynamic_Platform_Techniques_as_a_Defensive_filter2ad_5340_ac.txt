cleanup, 
MTBA=20s 
3 Platforms, 
cleanup, 
MTBA=40s 
3 Platforms, 
cleanup, 
MTBA=60s 
Here, we evaluate the non-trivial case where the exploit is repeated frequently. We
re-launch the exploit with mean time between attacks (MTBA) set at 20, 40, and 60
seconds. Fig. 7 illustrates the impact of cleanup. As can be observed, for any attacker
goal of greater than 60 seconds, the chance of success for the attacker drops to zero.
This makes sense because the inactive platforms are restored to their pristine state, so
the application can never migrate to an already compromised platform. As a result, the
attacker can only win if her goal is shorter than the maximum duration of time on a
single platform, which is 60 seconds.
As the results suggest, cleanup can greatly improve the protection offered by dy-
namic platform techniques since it signiﬁcantly reduce the window of opportunity for
an attacker. It is advisable that all dynamic platform techniques should support cleanup.
416
H. Okhravi, J. Riordan, and K. Carter
5.5 Smoothing Effects
A few effects contribute to the smoothness of the edges of the curves depicted in Fig. 2.
For example, the downward steps are not sharp transitions (similar to a step function).
Rather, they are smoother curvatures. For the sake of completeness, we explain a few
factors that contribute to this smoothness.
First, the time spent on a platform is not ﬁxed; rather, it is a random variable uni-
formly selected between 40 and 60 seconds. This is an important smoothing factor
because it makes the time on a platform non-deterministic and as a result, it makes the
threshold for passing between multiples of the platforms also smooth.
Second, the exploits are also launched at random times instead of the beginning of
the trial. This factor is not crucial in evaluating dynamic platforms and its only tangible
impact is making the curves smoother.
Third, we assumed that as soon as the exploit is launched the vulnerable platforms
are compromised. In reality, the time it takes for the exploit to successfully compromise
a platform after reaching it is non-zero which also makes the results smoother. For
example, the Socket Pairs exploit used in the experiments takes a few seconds to saturate
the ﬁle descriptors.
Fourth, networking, OS scheduling, and various other delays also make the results
smoother and in some cases noisier.
6 Generalized Model of Dynamic Platform Techniques
In this section, we use the knowledge of our experiments and the effects that we ex-
plained in the previous section to develop a generalized model of the dynamic platform
techniques.
We can categorize the problem space according to a number of properties:
– The attackers control requirement can either be aggregate or continuous. In the
aggregate case, any period of time during which the attacker controls a platform
counts and aggregates towards the payoff. Data exﬁltration attacks are an example
of attacks that require aggregate control. In the continuous case, only the time since
the most recent compromise during which the attacker has continuous control of
the platform counts towards the payoff. For example, attacks that leak crypto keys
through remote side channel attacks require continuous control since that key may
only be valid for the most recent session.
– The attackers payoff can be either fractional or binary (all or nothing). In the frac-
tional case, the attacker is rewarded more, the longer she controls the platform.
Data exﬁltration attacks are an example of fractional payoff. In the binary case, the
attacker is not rewarded before a known period of control, and then she is fully re-
warded at once. Attacks on critical infrastructure systems to cause a physical impact
(e.g. to cause a blackout) are an example of binary payoff.
– The platform change model can include random with repeat, random without repeat,
and periodic permutation.
We will deﬁne the abstract model of a dynamic platform system P as a system that
migrates through a ﬁnite ﬁxed collection of platforms {pi}. Each platform either has or
Quantitative Evaluation of Dynamic Platform Techniques
417
Table 2. Notation describing dynamic platform system
(cid:5)
(cid:5)
(cid:4)
pk
(cid:4)
(cid:4)
α
β
(cid:4)
pk
v
¬v
pk
P r
v
P rvv
P rii
pk
(cid:5)(cid:5)
Number of vulnerable platforms
Number of invulnerable platforms
Platform at migration step k
Platform at migration step k is vulnerable
(cid:4)
Platform at migration step k is not vulnerable
(cid:5)(cid:5)
(cid:4)
(cid:5)|v
(cid:4)
(cid:4)
Probability that v
(cid:5)|¬v
(cid:4)
(cid:4)¬v
P
P
(cid:5)
(cid:5)(cid:5)
pk+1
pk+1
(cid:4)
pk
pk
pk
v
does not have a property exploitable by the attacker which we call vulnerable. In the
ﬁrst approximation to the model we assume that the platforms are fully independent.
We will use the notation presented in Table 2.
6.1 Attacker Aggregate Control
When the attacker requires only aggregate control, there are two main subcategories
according to the attacker’s payoff. The fractional case is trivially determined by the ra-
tio of α and β. In the binary case, wherein the attacker wins by controlling a speciﬁed
fraction of the vulnerable time, the defender may optimize via an initial subselection of
platforms in a process reminiscent of gerrymandering. For example, if α = 3 and β = 2
and the attacker wants to control greater than 50% of the time, then the defender should
simply expect to lose should all platforms be utilized. By contrast if the defender ran-
domly subselects two platforms then the defender can reduce the attacker’s expectation
of winning to
C (3, 2)
C (5, 2)
3
10
=
= 30%,
where C (x, y) =
the number of platforms chosen.
x!
y!(x−y)! is the combinatorial choice function. Here the value of 2 as
Generally, if t is the percentage of time that the attacker requires for success and we
subselect j platforms from the total α + β, then the probability of attacker success is
P rsuccess =
min(α, j)(cid:6)
i=(cid:2)t·j(cid:3)
C (α, i) · C (β, j − i)
C (α + β, j)
,
in the steady-state model.
6.2 Attacker Continuous Control
When the attacker requires continuous control, the defender can use the subselection
strategy as above as well as leveraging conditional probabilities. These conditional prob-
abilities are given in Table 3.
418
H. Okhravi, J. Riordan, and K. Carter
Table 3. Conditional Probabilities
(cid:3)(cid:3)
(cid:3)(cid:3)
(cid:2)
(cid:2)
(cid:2)
v
P r
P r
v
pk+j
Repeat Vuln¬VulnP r
Without α
α
β
β
With
(cid:2)
v
(cid:2)
pk+1
α
α+β
α
α+β
(cid:2)
pk
(cid:2)
(cid:3)| v
pk+1
α−1
α+β−1
α
α+β
& . . . &v
(cid:3)(cid:3)
(cid:2)
pk
(cid:3)| v
(cid:3)
(cid:2)
pk+j−1
α−j
α+β−j
α
α+β
α+β > α−j
α
Here, we observe that
α+β−j so long as β and j are both greater than
zero. As such, migrating without immediate repeat, while not inﬂuencing the fraction of
vulnerable platforms selected, tends to reduce successful sequences for the attacker. We
note that the inﬂuence is greater when a smaller number of platforms is used. Our later
experiment will use 3 vulnerable and 2 invulnerable platforms which is a sufﬁciently
small number to have a strong inﬂuence upon the conditional probabilities.
This reduces to the Markov chain:
P rv
7ooooooooooooo
'OOOOOOOOOOOOO
1−P rii
P rk=1−P rv
start
V
P rvv
1−P rvv
I
P rii
6.3 Attacker Fractional Payoff Model
The steady state of attacker control of the system can be modeled using Markov chains
with states I and V referring to invulnerable and vulnerable respectively. While the
simple Markov model describing the transitions {I, V } −→ {I, V } describes the base
behavior of the system, it does not naturally capture the notion of repeated vulnerable
states. We can adapt this chain to one with a richer collection of states
(cid:4)
I, IV, IV 2, . . . , IV n−1, V n
(cid:5) −→ (cid:4)
I, IV, IV 2, . . . , IV n−1, V n
(cid:5)
which support runs of length n. The probability of invulnerable to invulnerable transi-
tion is given by
(cid:4)
(cid:4)¬v
(cid:4)
(cid:5)|¬v
pk
(cid:5)(cid:5)
P rii = P r
pk+1
β − 1
α + β − 1
=
and the probability of vulnerable to vulnerable transition is given by
(cid:4)
(cid:4)
v
pk+1
(cid:4)
(cid:5)| v
pk
(cid:5)(cid:5)
α − 1
α + β − 1
=
P rvv = P r
The Markov model looks like
f
f


7
'
d
d
F
F
Quantitative Evaluation of Dynamic Platform Techniques
419
1−P r¬v
IV
P rvv
/ IV 2
1−P rvv
I
1−P rvv
1−P rv
1−P rvv
P rii
V n
P rvv
IV n−1
zvvvvvvvvv
P rvv
which has the (n + 1) × (n + 1) Markov transition matrix is given by
⎤
⎡
1 − P rvv
⎢⎢⎢⎢⎢⎢⎢⎢⎢⎣
P rii
1 − P rvv
1 − P rvv
1 − P rvv
1 − P rvv
1 − P rvv
1 − P rvv
P rvv
P rvv
P rvv
...
P rvv
P rvv
⎥⎥⎥⎥⎥⎥⎥⎥⎥⎦
.
(cid:6)
This transition matrix has the steady state eigen-vector
av · (cid:7)∞
vv ··· av · P rn−1
(cid:3)
av · P rvv av · P r2
where
(cid:2)
α+β
vv
β
(cid:8)
i=n P ri
vv
av =
α
·
α + β
1 − P rvv
P rvv
.
i=n P i
v = α
α+β − av ·(cid:13)n−1
eigen vector av ·(cid:13)∞
This can be used to compute the steady state behavior of the system. If the attacker
success begins after n steps then the steady state is given by the right most term in the
v. If the attacker success includes the
steps leading to a run of n steps then we must also include vulnerable states weighted by
the probability that they will become a run of n vulnerable states and the contribution to
the run: the probability that IV n−1 will become V nis P rV , the probability that IV n−2
will become V nis 2·P r2
V and so forth. Reducing that equation, we ﬁnd that the expected
period of attacker control L(n) is
i=0 P i
L(n) = 1 − (1 − P r¬v)
−1 + (1 − P rv)
(cid:13)n−1
i=0 i · P ri−1
−1 + (1 − P rv)
−1
v
(1 − P r¬v)
which is one minus the percentage of time that the defender is in control.
6.4 Attacker Binary Payoff Model
In the binary payoff model with random selection (with or without immediate repeats),
the attacker will eventually win so long as it is combinatorially possible in the same
q
q
/
$
$
2
2
M
M
o
o
z
M