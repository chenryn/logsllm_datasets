e
g
a
r
e
v
A
 100000
 10000
 1000
 100
 10
 1
 0.1
 0
non-aliases
2000
500
aliases
 0.2
 0.4
 0.6
Fraction of pairs
 0.8
 1
Figure 8: Average distance between alias and non-
alias address pairs
aliases
non-aliases
RadarGun Ally RadarGun
1,605
3,033,204
20,432
0
0
418
293
-
-
215
436
12
9
469
6
Aliases
Non-aliases
Undetermined
Non-linear
Unresponsive
Table 3: The accuracy of RadarGun and Ally.
We resolved each pair by sending 30 probes to each of the
IP addresses in aliases and non-aliases. This required 30 ×
2, 841 = 85, 230 total probes, whereas Ally sent 8,092,038
probes to resolve all pairs. Figure 8 shows the average dis-
tance between each address pair in aliases and non-aliases.
When classifying address pairs as aliases or not, we set
two thresholds for the average distance between samples.
For pairs whose average distance is below the lower alias
threshold, we classiﬁed them as aliases. We chose the value
of 500 for the alias threshold, based on the examination of
Figure 8. Pairs whose average distance is above the larger
non-alias threshold are classiﬁed as non-aliases. We used
2,000 as the non-alias threshold. We classify pairs between
these thresholds as “Undetermined.”
When using these thresholds, RadarGun produces the re-
sults shown in Table 3. The row entitled “Non-linear” counts
the number of pairs we did not classify because at least one
of the addresses could not be modeled as linear. The row
entitled “Unresponsive” reﬂects the number of pairs we did
not classify because at least one of the addresses did not
return more than 25% of the probes.
By observing Table 3, it appears that RadarGun is still
incomplete, yet more accurate than Ally. When Radar-
Gun cannot model some addresses as linear, it refrains from
making a conclusion about pairs involving those addresses;
Ally reports those pairs as non-aliases with high probabil-
ity. RadarGun ﬁnds more responsive pairs as it expects some
probes to go unanswered; Ally requires that an address re-
spond to all probes.
6. DISCUSSION
In this section, we discuss our intended work to improve
alias resolution with velocity modeling, as well as other po-
tential uses for velocity modeling.
D
I
P
I
head
Estimation difference
Point in S1                Point in S2
Inferred from S2       Inferred from S1
Time
Figure 7: Partitioning points into sets
the head and tail may be from the same address. Figure 7
shows a diagram depicting how samples are partitioned.
For each sample (t, id) in SA ∪ SB, we compute the dis-
tance between id and the expected value of the other IP ID
at time t interpolated from the corresponding set of samples.
The distances are summed across all samples, and divided by
the number of samples to yield an average distance per sam-
ple. First, RadarGun sets a variable sum to 0. To calculate
the distance of a sample (tH, idH ) in the head, RadarGun
estimates the value of B’s IP ID at time tH using the lin-
ear approximation of SB to get an estimate id(cid:2)
H , and adds
H − idH| to sum. RadarGun executes a similar process
|id(cid:2)
to compute the distances between samples in the tail.
For samples in the middle, RadarGun is able to make a
more accurate estimation. Let (tA,1, idA,1) and (tA,2, idA,2)
be samples in SA and (tB, idB) be a point in SB such that
tA,1 ≤ tB < tA,2. The estimated value of idA at time tB is
interpolated based on the two points in SA:
A = (idA,2 − idA,1)
idest
sum += |idB − idest
A |
tB − tA,1
tA,2 − tA,1
+ idA,1
sum
Let ΔA,B =
|SA ∪ SB| be the average distance between
observed and expected IP ID per probe. If two IP addresses
have a small ΔA,B, they are likely to be aliases, whereas
a large ΔA,B indicates that the addresses are not aliases.
In the next section, we give possible values for the threshold
between aliases and non-aliases, and show how well our clas-
siﬁcation algorithm works on known aliases and non-aliases.
5. VALIDATION
To validate the accuracy of velocity modeling as a means
of alias detection, we computed the average distance of pairs
of IP addresses drawn from two sets. One set (aliases) con-
tained 932 known alias pairs, as determined by a common
source address [5, 12]. This technique is not probabilistic,
so these address pairs are very likely to be actual aliases.
Neither RadarGun nor Ally can correctly claim two ad-
dresses as non-aliases when both addresses do not derive IP
ID values from a counter. Thus, to obtain a set of likely non-
aliases, we ran Ally on all 4,034,220 pairs of 2,841 addresses
that RadarGun reported as linear. The 3,055,241 pairs that
Ally reports as non-aliases comprise the dataset non-aliases.
192.83.196.119
D
I
P
I
 70000
 60000
 50000
 40000
 30000
 20000
 10000
 0
 0
 50  100  150  200  250  300  350  400
Time (s)
Figure 9: Router that exhibits possible routing up-
dates
Obtaining an accurate model of the errors incurred by us-
ing velocity modeling is an important step in continuing this
line of research. While our initial results show that velocity
modeling can easily distinguish aliases from non-aliases, our
data set was relatively small. We will ﬁrst run RadarGun on
a larger data set in an attempt to obtain not just an accurate
value of the threshold between aliases and non-aliases, but
an understanding of why this value is appropriate as well.
We intend to compare the results of RadarGun against the
results of other alias resolution tools and techniques, to get
a better understanding of the error rates and causes of all
such resolvers.
Velocity modeling may be useful for other applications.
We have shown that for most routers, the IP ID counter in-
creases at a steady rate. Therefore, observed changes to this
expected rate can be indicative of anomalies. For instance,
routing updates may be visible by observing changes in ve-
locity. During normal operation, routers send relatively few
packets. Sudden spikes in activity, evidenced by a rapidly
increasing IP ID, might indicate a routing update. Figure 9
shows what we believe to be a router that issues periodic
routing update messages. However, we have not corrobo-
rated this hypothesis, nor do we have other possible expla-
nations for the observed behavior.
The slopes of some routers, such as that in Figure 9, are
not constant. To obtain greater accuracy when resolving
aliases for these routers, a resolver should intersperse probes
to all addresses, i.e., make the middle set (Section 4.3) as
large as possible. RadarGun is able to make a more accurate
estimate of the expected IP ID of an address for series of
probes that overlap in time. This estimate is not based on
the inferred slope of the address, which in the case of such
routers, may not accurately predict the actual IP ID value
at all times.
In regards to the scalability of RadarGun, we analyze the
probe overhead that velocity modeling incurs when resolv-
ing aliases among 500,000 addresses. A single host with a 1
Mb/s line can send 3276 TCP probes per second. Probing
each destination once every 34 seconds (the average probe
time of our experiments), this host can probe 111,384 ad-
dresses. Five such hosts with tight clock synchronization, or
a single host with a 10 Mb/s connection, can send 30 probes
to each of the 500,000 addresses in just 17 minutes.
7. CONCLUSION
We have presented velocity modeling as a technique to
resolve aliases. One of the advantages of velocity modeling
is that the resolution process is separate from the probing
process. Probes can be collected over time, and the resolver
run oﬀ-line after collection is complete. The probes sent to a
single address need not closely follow one another; our exper-
imental results are accurate when each interface is probed
approximately once every 34 seconds. As a result, when
compared to Ally, our technique does not suﬀer as much
from routers that rate-limit ICMP responses. Velocity mod-
eling also requires far fewer probes per address when resolv-
ing aliases among a large number of addresses. This allows
velocity modeling to scale to Internet-sized inputs.
Acknowledgments
We thank our shepherd Walter Willinger, Ethan Katz-Bassett,
and the anonymous reviewers for helpful comments. This
work was supported by NSF Awards ANI 0092806, CNS
0626629, and CNS 0435065.
8. REFERENCES
[1] B. Augustin, et al. Avoiding traceroute anomalies with
Paris traceroute. In IMC, 2006.
[2] S. M. Bellovin. A method for counting NATted hosts. In
Internet Measurement Workshop, 2002.
[3] B. Donnet, P. Raoult, T. Friedman, and M. Crovella.
Eﬃcient algorithms for large-scale topology discovery. In
SIGMETRICS, 2005.
[4] N. Feamster, D. G. Andersen, H. Balakrishnan, and M. F.
Kaashoek. Measuring the eﬀects of Internet path faults on
reactive routing. In SIGMETRICS, 2003.
[5] R. Govindan and H. Tangmunarunkit. Heuristics for
Internet map discovery. In Infocom, 2000.
[6] M. H. Gunes and K. Sarac. Analytical IP alias resolution.
In International Conference on Communications, 2006.
[7] M. H. Gunes and K. Sarac. Importance of IP alias
resolution in sampling Internet topologies. In Global
Internet Symposium, 2007.
[8] N. Hu, O. Spatscheck, J. Wang, and P. Steenkiste.
Locating Internet bottlenecks: Algorithms, measurements,
and implications. In SIGCOMM, 2004.
[9] L. Li, D. Alderson, W. Willinger, and J. Doyle. A
ﬁrst-principles approach to understanding the Internet’s
router-level topology. In SIGCOMM, 2004.
[10] H. V. Madhyastha, et al. A structural approach to latency
prediction. In IMC, 2006.
[11] R. Mahajan, N. Spring, D. Wetherall, and T. Anderson.
User-level Internet path diagnosis. In SOSP, 2003.
[12] J.-J. Pansiot and D. Grad. On routes and multicast trees
in the Internet. ACM CCR, 28(1):41–50, 1998.
[13] L. Peterson, T. Anderson, D. Culler, and T. Roscoe. A
blueprint for introducing disruptive technology into the
Internet. In HotNets, pp. 59–64, 2002.
[14] R. Sherwood, A. Bender, and N. Spring. Discarte: A
disjunctive internet cartographer. In SIGCOMM, 2008.
[15] R. Sherwood and N. Spring. Touring the Internet in a TCP
sidecar. In IMC, 2006.
[16] R. H. Shumway and D. S. Stoﬀer. Time Series Analysis
and Its Applications: With R Examples. Springer, 2 edn.,
2000.
[17] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP
topologies with Rocketfuel. In SIGCOMM, 2004.
[18] N. Spring, D. Wetherall, and T. Anderson. Scriptroute: A
public Internet measurement facility. In USITS, 2003.
[19] R. Teixeira, K. Marzullo, S. Savage, and G. Voelker. In
search of path diversity in ISP networks. In IMC, 2003.
[20] G. R. Yaun, et al. Large-scale network simulation
techniques: examples of TCP and OSPF models. ACM
CCR, 33(3):27–41, 2003.