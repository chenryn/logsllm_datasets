Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
)
s
m
(
y
c
n
e
t
a
L
4.5
4.0
3.5
3.0
2.5
2.0
1.5
1.0
0.5
0.0
default
SLIRP
(i)
default
default
tap
(ii)
tap
nfq
(iii)
static
inject
tap
nfq
(iv)
static
dynamic
getStack
tap
nfq
(v)
tap
nfq
(vi)
Fig. 4: Average latency of an HTTP GET request to a local
server across different Android image modiﬁcations, network
interface and routing conﬁgurations.
(iv) static-inject-tap-nfqueue: Here, we introduce the instru-
mented Linux kernel (to enable arbitrary IP_OPTIONS)
and the system image (to include Xposed). However,
instead of using the Xposed module from BORDERPA-
TROL, we use a simple module that sets a static string
of characters as IP_OPTIONS for each created socket.
This setup illustrates the performance impact induced
by Xposed when hooking the socket functionality as
described in §V.
(v) static-getStack-tap-nfqueue: In this conﬁguration we use
the same setup as iv. However, hooked functions also
make a getStackTrace call to obtain a stack trace,
which allows us to determine the performance impact of
gathering stack trace elements via provided Java API.
(vi) dynamic-tap-nfqueue: This conﬁguration corresponds to
the full prototype of our BORDERPATROL implementa-
tion. In addition to the previous setup, this conﬁguration
adds the Xposed module which extracts call stacks when
sockets get created and encodes the corresponding infor-
mation dynamically into the sockets’ IP_OPTIONS.
To measure the overheads introduced by each component
we run our stress-test app for 25 times on each conﬁguration,
and show the average time per HTTP request in Figure 4.
The only overheads worth mentioning are those introduced
by the Python-based Policy Enforcer (i.e., ii–iii, +1ms) and
the getStackTrace API call that obtains stack traces (i.e.,
iv–v, +1.6ms). While the relative overhead (i.e., 2x) seems
signiﬁcant, we note that the absolute overhead of less than
2.5ms is negligible compared to often hundreds of ms net-
work latencies induced by networking equipment over inter-
continental distances. Furthermore, BORDERPATROL only per-
forms the most performance sensitive operation of obtaining
and encoding stack traces once per socket, and this 2.5ms
overhead will thus amortize over the lifetime of the socket
(e.g., a socket that is conﬁgured as keep-alive serves multiple
HTTP requests and responses during its lifetime).
VII. DISCUSSION AND LIMITATIONS
BORDERPATROL implements secure policy enforcement
through different policy actions (i.e., blacklisting and whitelist-
ing) and its operating principles: (i) By enforcing policies on
468
the network and minimizing the trusted computing base on
user devices, administrators can use BORDERPATROL to en-
sure that users cannot side-step the policy enforcement mecha-
nism, or tamper with company-determined policies. (ii) During
its operation, BORDERPATROL can determine which libraries
are in-use for network connectivity of an app by mapping
stack frames to method signatures. This feature allows admin-
istrators to use a blacklist of libraries and restrict apps from
using these libraries to establish network connections (e.g.,
disallowing tracker and analytics libraries to prevent privacy
leaks or prohibit connections via previously-known vulnerable
libraries [27]). (iii) BORDERPATROL allows administrators to
vet and whitelist only the desired functionalities of an app and
disallow any other unknown app operations. A whitelisting
approach inhibits users from engaging with the app in an
unintended way (e.g., ﬁle uploads via the chat window of
a word processor instead of using the upload button) within
the constraints deﬁned by policies. Furthermore, whitelisting
prevents socket connections which originate from malicious
methods in accidentally-installed repackaged apps, as such
functions are not vetted by the administrators.
Related works have delegated the functions of Policy En-
forcer and Packet Sanitizer modules to the device [28], [29].
However, there are a number of reasons why we argue that
placing these modules on the network and only making min-
imal changes to the device is beneﬁcial in a BYOD scenario:
Security: A robust system-wide security mechanism should
have a dependable method of conforming with the principles
of complete mediation [30]. BORDERPATROL achieves this
through enforcing policies on all packets in the business
network perimeter. Enterprise network rules can be conﬁgured
such that access to the company resources is limited to local
network or VPN connections. Since BYOD frameworks can
force the packets of work proﬁle applications to go over VPN
connections [31], all packets that leave the work proﬁle are
subject to BORDERPATROL’s policy enforcement.
Ease of use: Traditional security solutions are difﬁcult
and inﬂexible to program, deploy and manage for BYOD
scenarios [32]. SDN infrastructure requires network equipment
to be SDN-enabled, which is still insufﬁcient to enable ﬁne-
grained app control. In comparison, BORDERPATROL can
extract detailed contextual data on user devices and enforce
policies at the business network perimeter using commod-
ity hardware. By enforcing policies at a centrally managed
location in the network, administrators can conﬁgure and
update all their policies in one spot. Furthermore, since the
contextual data extraction happens at the application level,
BORDERPATROL’s operations are not hindered by changes
in Android versions or the underlying hardware structure,
therefore making BORDERPATROL compatible with various
devices and OS versions. However, as different versions of
apps use different sets of methods, BORDERPATROL requires
administrators to use the policy extractor tool on updated
versions of apps which are in use by the enterprise.
Compatibility: In a provisioned device, work related apps
run inside a work proﬁle. The separation of proﬁles ensures
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
that BORDERPATROL tags all packets which originate from
work related apps and does not interact with apps that fall
outside the context of business use. If, however, the user uses
their work proﬁle outside the enterprise network premises,
tagged packets will be subject to policy enforcement through
VPN, while non-work related apps’ background network ac-
tivity is routed through mobile networks. Similarly, if the user
does not use the work proﬁle while in the enterprise network,
the Policy Enforcer will drop packets that do not contain
IP_OPTIONS, thus ensuring that all packets that are leaving
the business network perimeter are originating from sockets
which BORDERPATROL controls.
it
Additionally, BORDERPATROL’s enforcement starts from
the very ﬁrst outgoing packet. For instance,
in traditional
network ﬁltering appliances,
is possible to differentiate
uploads from downloads based on measuring outgoing contin-
uous data transfers in a single ﬂow by setting a data transfer
size limit as a triggering mechanism. However, using multiple
sockets and fragmenting outgoing data would overcome such
precautions. Our empirical analysis shows that a legitimate
request in a single ﬂow can range from 36 bytes to 480MB,
which complicates policy settings for the purpose of setting
a threshold. Unlike the traditional approach, BORDERPATROL
detects upload attempts irrespective of the data transfer size.
a) Limitations: As our goal in this paper is to demon-
strate a proof of concept for augmenting network packets
with contextual data and ﬁne-grained policy enforcement,
our prototype is subject to several implementation-speciﬁc
drawbacks. As these drawbacks did not manifest any issues
in BORDERPATROL prototype during our evaluations, we do
not believe that these drawbacks detract from the contribution
put forth by BORDERPATROL. Furthermore limitations of our
prototype can be averted by different engineering choices.
Hash collision: Our system identiﬁes the origin of each
packet by a truncated (8-byte) hash value of the respective
app’s apk ﬁle. As the number of bits in a hash value decreases,
the probability of hash collision increases. With existing 3.3M
apps in Google Play Store [33], the probability of collision is
lower than 10−6, which is reasonable for practical solutions.
Tag-replay: The patch we introduced to Linux kernel as
part of the BORDERPATROL prototype permits user-space
programs to set IP_OPTIONS of security type. This allows
an app to ﬁrst use a benign functionality to send packets
outside the corporate network perimeter, and then copy the
same IP_OPTIONS to the socket that a malicious function
has initiated. Such behaviors can be thwarted by modifying
the Linux kernel so that setsockopt system call can only
set IP_OPTIONS on a socket once. This ensures that other
apps cannot alter IP_OPTIONS after Context Manager.
Multi-dex ﬁle applications: For apps which include more
than 65,536 methods, the apk ﬁle packs more than one dex
ﬁle due to Dalvik speciﬁcations and 2 bytes per stack frame
cannot support apps that have multiple dex ﬁles. A way of
overcoming this limitation is to use a variable length encoding
with a single bit to indicate 2 or 3 byte lengths. The length
of a stack frame can be scaled up to 3 bytes if the apk packs
multiple dex ﬁles to provide coverage for large apps.
Socket reuse: BORDERPATROL encodes the same stack
trace which belongs to a socket on all the packets that the app
sends over the same socket. Hence, if an app reuses a socket
for a different purpose before terminating the connection,
BORDERPATROL might not be able to attribute individual
packets in the same connection to the new context. Note that
an app cannot change the endpoint of a socket if it reuses the
socket, either. To change the endpoint, the app would have to
call connect again, which in turn would be correctly handled
by BORDERPATROL.
Overloaded methods: As the Java API only provides
method names in stack traces, BORDERPATROL relies on line
numbers to disambiguate overloaded variants of methods with
the same name within one class. However, developers can
choose to strip line numbers and other debug information
from their apps. While stripped debug information would force
BORDERPATROL to over-approximate context (i.e., merge all
overloaded variants of methods with the same name in the
same class into one identiﬁer), the precision of the context
would only reduce to a method name. Furthermore, we
observed that in our dataset there were no apps that have
overloaded methods and debug information stripped at the
same time. Hence, we postulate that for benign apps (as per
our threat model) this should not be a signiﬁcant problem.
Android image: In the Android security framework, apps
fork from a parent process called Zygote and run in sepa-
rate sandboxes as non-privileged users. This clear separation
prevents other user-space programs (like Context Manager)
from monitoring app context from outside the sandbox. In
recent literature, we observed several methods to overcome
this prevention mechanism for system prototyping, such as:
i) rooting the device for hooking into Android and Java
API (Xposed) [34], [35], ii) modifying the default Zygote
behavior [36], [37], iii) relying on customized system image
distributions from hardware vendors [32] and iv) using altered
versions of an app [38], [39]. We chose to use Xposed for
our implementation purposes to demonstrate the applicability
of our idea. In a production level implementation of BOR-
DERPATROL, hardware vendors can provide custom images
for BYOD services for supported devices [40], [41], thus
incorporating required access controls in the image.
Native functions: Due to its functioning mechanism,
Xposed does not support hooking native functions or direct
system calls. Hence, our prototype of BORDERPATROL does
not handle apps that call the socket APIs in libc or issue
system calls directly from a native component. However, this
drawback could be rectiﬁed by using a hooking system that
supports native code (e.g., Frida [42]), or by implementing the
Xposed module’s functionality in native code.
VIII. RELATED WORK
Recent works have shown that mobile apps increasingly col-
lect personal and identiﬁable information [35], [43]. To address
this threat, a large body of related work have proposed solu-
469
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:53:56 UTC from IEEE Xplore.  Restrictions apply. 
tions to enforce corporate BYOD policies. Existing solutions
can be classiﬁed under two different layers of enforcement:
On-device enforcement: Existing policy administration
frameworks provide separation between work and personal
data through containerized proﬁles. While these systems pro-
vide the ability to incorporate BYOD solutions into existing
business network infrastructure, they are limited in enforcing
ﬁne grained context-aware policies. ADM [2] is a remote
device management framework for companies to provision
devices, control and enforce policies on Android devices.
ADM provides the capability to log DNS lookups and TCP
connections where IP addresses, ports package names and
respective timestamps can be recorded [44]. However, it cannot
inspect application context or packets that belong to different
sockets, and limited in capacity due to their dependence of the
provided ADM SDK. Samsung KNOX [45] provides a more
advanced network analysis feature with ”Network Platform
Analytics”, where compatible a network appliances examine
detailed information such as PID of the application which orig-
inated the network ﬂow. However, unlike our implementation,
this approach lacks context of the established connection.
Conti et al. [28] apply a ﬁne-grained policy enforcement
for Android smart phones with a system called CRePE and
modify the Android framework to introduce a runtime checker
that enforces different context-related policies. CRePE can
restrict the set of applications authorized to run, however,
unlike our system, CRePE cannot restrict access to only certain
libraries within an app (i.e., app-level granularity). Zhan et
al.’s [46] propose inserting an in-line reference monitor within
the application, which requires apps to be modiﬁed prior to
installation (using repackaging). Contrarily, BORDERPATROL
works on unmodiﬁed apps. Pearce et al. [29] present a priv-
ilege separation framework called AdDroid and introduce a
new advertisement API to limit the scope of such libraries.