vote agreement instances are independent; we do not require
that they match.
The consequence of the laxer termination requirements
is that some of the ideas that we described at the start of
Section IV, and which failed to solve consensus because of
their weak termination properties, can now be recycled to suc-
cessfully solve the vote agreement problem. The two ideas are
non-iterated voting, which we will henceforth refer to as simple
voting, and the leader-based approach. Before we put either of
them to use in the implementations, we must ensure (and this
is the tricky part of the algorithms) that any agreed upon vote
preserves the no defection property of the Voting model.
A. Formalizing Same Vote
The system state remains the same as in the Voting model.
As before, we require that there is no defection in the votes.
Since each process will now vote for either v or ⊥, voting for
v must not cause any process to defect; we say that v must
be safe. If there previously existed a quorum for a value w,
we must have v = w. Otherwise, the processes that previously
voted for w could defect by voting for v. Formally:
safe(v_hist, r, v) (cid:3) ∀r
(cid:2)
< r.∀w ∈ V. ∀Q ∈ QS.
v_hist(r
(cid:2))[Q] = {w} =⇒ v = w.
aaaaaaaa
Process
Round
0
1
2
p1
p2
p3
0 ⊥
0
⊥ ⊥ 1
⊥ ⊥ ⊥
p4
p5
?
?
?
?
?
?
Figure 5. Same Voting: a possible partial view of histories after three voting
rounds.
In a Same Vote round r, the processes in some set S receive an
output v from vote agreement and vote for v, while the others
vote for ⊥. If S = ∅ then v is unused and unconstrained,
otherwise it must be safe. Formally:
Event sv_round(r, S, v, r_decisions):
Guard
r = next_round
S (cid:10)= ∅ =⇒ safe(votes, r, v)
d_guard(r_decisions, [S (cid:16)→ v])
Action
next_round := r + 1
votes := votes(r := [S (cid:16)→ v])
decisions := decisions (cid:6) r_decisions
Here [S (cid:16)→ v] maps all processes from S to v, and the others
to ⊥. The reﬁnement relation between Voting and Same Vote
is just the identity. The reﬁnement proof hinges on the fact
that safe implies no_defection with r_votes = [S (cid:16)→ v].
B. Towards an Implementation
As a step towards an implementation of the Same Vote
model in a distributed setting, we again look at some possible
scenarios with only partial information. As we wish to improve
the fault tolerance to f < N
3 for Fast
Consensus), we restrict our view to just over N
2 process failures (over N
2 processes.
It was the combination of partial information and vote splits
that prevented us from changing the votes without causing
defection in the example of Figure 3. That particular situation
is now eliminated, as vote agreement ensures that such vote
splits within a single round can no longer occur. However,
vote agreement prevents neither vote splits across multiple
rounds, nor hiding of quorums by a partial view. Consider
the example in Figure 5: it is not obvious which values are
safe for round 3. A priori, it may be that 0 received a quorum
of votes in round 0 (if process p4 or p5 voted for 0), or that 1
received a quorum in round 1 (if p4 and p5 both voted for 1),
resembling the ambiguity present in the Voting model and
Figure 3. However, the situation can be resolved, and the next
two sections describe two ways to do so. They correspond to
the two branches from the Same Vote model in Figure 1.
VII. OBSERVING QUORUMS
Figure 5 demonstrates the difﬁculty of detecting vote
quorums and ﬁnding safe values based on a partial view
of the voting history. The main idea behind the solution
introduced in this section is that each process maintains a vote
candidate value v ∈ V that is safe to vote for by construction.
Maintaining the candidates’ safety requires each process to
detect when a quorum of votes is formed for some value.
398398
For this, each process must observe the votes of the other
processes. We now describe this scheme in more detail.
Initially, all values are safe. Thus, processes can initialize
their candidates to arbitrary values; in particular, they can use
their proposed values. Furthermore, all values will remain safe
until the ﬁrst time a quorum is formed for some value, at which
point all processes must update their candidates to this value.
To ensure that this happens, we require each process p to try
to update its candidate in every round, based on the votes it
observes in the round. More precisely, consider an arbitrary
process p and a round r. Due to the Same Vote principle,
there is some value v ∈ V such that each vote cast in r is
either for v or for ⊥. We say that process p’s observation in
round r is v if p receives a vote for v from at least one process
in r and ⊥ if it receives only votes for ⊥. If p observes v (i.e.,
not ⊥) then it updates its candidate to v.
Assume now that r is in fact the ﬁrst round in which
a quorum of votes (for v) is formed. If p observes v,
it
will update its candidate to v, and safety will be guaranteed.
However, if p observes ⊥, it fails to update the candidate,
which may violate safety. To avoid this possibility, we require
that p waits to receive votes from some quorum Q of processes
before it makes its observation and moves on to the next round.
By (Q1), Q intersects with the set of processes voting for
v, which ensures that p will receive at least one vote for v,
and thus update its candidate to v. Thus, after round r, the
candidates of all processes will become v. Since we assume
that the votes are always selected from the set of candidates,
v is the only value that can be voted for, and hence observed
after this point. Further updates based on observations will thus
not change the candidates and therefore preserve safety.
As an example, interpret Figure 5 as if it were showing the
observations that the processes make in each round, instead of
the votes they cast. The candidates after round 2 are:
[p1 (cid:16)→ 0, p2 (cid:16)→ 0, p3 (cid:16)→ 1, p4 (cid:16)→?, p5 (cid:16)→?],
that is, processes p1 and p2’s candidate is 0 and p3’s candidate
is 1, while p4 and p5’s candidates are unknown. We immedi-
ately see that both 0 and 1 are safe for round 3, as they are
among the candidates. Moreover, we can even conclude that
all values are safe. Otherwise, the set of candidates would be
a singleton, containing only the unique value that has received
a vote quorum.
A. Formalizing Observing Quorums
First, we extend the state record v_state with following
ﬁeld to record the processes’ candidates:
cand : Π → V.
The safety of a new vote v is now determined based on the
candidates. With cs : Π → V we deﬁne this as follows:
cand_safe(cs, v) (cid:3) v ∈ ran(cs).
We represent the observations made in each round by a partial
function obs : Π (cid:2) V . According to the discussion above,
obs is of the form [OS (cid:16)→ v], where v is the round vote,
and OS is the set of processes observing v. If v receives
a quorum of votes, we require OS = Π. We can however
generalize this by allowing processes to observe not only
votes but also each other’s candidate values, i.e., we only
require ran(obs) ⊆ ran(cand). From the previous discussion
we know that all old candidate values remain safe if v does
not receive a quorum of votes. Otherwise, we still require
obs = [Π (cid:16)→ v]. This adoption of others’ candidates will prove
useful for termination. We formalize these considerations in
the following round event.
Event obsv_round(r, S, v, r_decisions, obs):
Guard
r = next_round
S (cid:10)= ∅ =⇒ cand_safe(cand, v)
ran(obs) ⊆ ran(cand)
S ∈ QS =⇒ obs = [Π (cid:16)→ v]
d_guard(r_decisions, [S (cid:16)→ v])
Action
next_round := r + 1
cand := cand (cid:6) obs
decisions := decisions (cid:6) r_decisions
The guard S ∈ QS =⇒ obs = [Π (cid:16)→ v] ensures that
quorums of votes are reﬂected in all processes’ observations.
Since no guard consults the voting history and only the current
round’s votes are needed to make decisions, there is, in contrast
to the Same Vote model, no need to record votes. We therefore
drop the ﬁeld votes from the state.
The reﬁnement relation between the Observing Quorums
and Same Vote models relates the ﬁelds votes in Same Vote
and cand in Observing Quorums by requiring that
votes(r)[Q] = {v} =⇒ cand = [Π (cid:16)→ v]
holds for all values v ∈ V , quorums Q ∈ QS, and rounds r
preceding the current one. The common ﬁelds next_round
and decisions are related by the identity. Based on this
relation, we can prove that cand_safe(cand, v) implies
safe(votes, r, v).
B. Implementing Observing Quorums
The previous model captures several algorithms from the
literature. We prove that it is reﬁned by Ben-Or’s algorithm [3]
and UniformVoting [12]. It also captures the generic algorithm
from [17], although we do not formally prove this. The model,
however, only tells us how to pick safe values in each round. In
the implementation, the processes must use a vote agreement
scheme to agree on one such value. We have already mentioned
two candidate schemes: the leader-based scheme and simple
voting. Either can be used here. As an example, we show the
UniformVoting algorithm (Figure 6), which uses simple voting.
In the algorithm, a round of voting requires two sub-rounds
of communication. Vote agreement takes place in the ﬁrst
sub-round, while casting and observing votes take place in
the second sub-round. The inputs to vote agreement are the
candidates of each process (line 6); picking any one of them
will satisfy the cand_safe guard. The output, recorded in the
variable agreed_votep, is generated by simple voting, and
corresponds to the parameter v of the abstract model’s event
obsv_round. The voting principle of simple voting is encoded
in the combination of the check in line 10 and the assumed
communication predicate ∀r. Pmaj (r), with Pmaj as deﬁned in
(Pmaj ). The same predicate is used in the second sub-round to
399399
// vote agreement
else
agreed_votep := v
agreed_votep := ⊥
other ﬁelds are ⊥
1: Initially: candp is p’s proposed value
2:
3:
4: Sub-Round r = 2φ:
5: sendr
p:
send candp to all
6:
7:
8: nextr
p:
candp := smallest value received
9:
if all the values received equal v then
10:
11:
12:
13:
14: Sub-Round r = 2φ + 1:
15: sendr
p:
send (candp, agreed_votep) to all
16:
17:
18: nextr
p:
if at least one (_, v) with v (cid:10)= ⊥ received then
19:
20:
else
21:
22:
if all received equal (_, v) for v (cid:10)= ⊥ then
23:
24:
candp := v
candp := smallest w from (w,⊥) received
decisionp := v
// casting and observing votes
Figure 6. The HO model of UniformVoting
ensure the guards S ∈ QS =⇒ obs = [Π (cid:16)→ v] (lines 19–20)
and d_guard (lines 23–24).
Processes update their candidates either to the round vote
(line 20) or to a candidate of some other process (lines 9
and 22). This corresponds to making a non-⊥ observation
and satisﬁes the guard ran(obs) ⊆ ran(cand). Moreover, the
adoption of other processes’ candidates helps the convergence
to a common vote candidate, necessary for termination of vote
agreement. This termination is guaranteed by the additional
communication predicate ∃r. Punif (r). In the round satisfying
Punif (r), all processes will adopt the same candidate, and thus
agree on a vote (line 11) and decide (line 24).
The reﬁnement relation relates, for each p, the value candp
to the value of cand(p) in the abstract model and the value of
decisionp to decisions(p). The reﬁnement proof follows
the above remarks.
The algorithms in this section tolerate f < N
2 process
failures and thus exhibit better fault tolerance than the fast
consensus algorithms from Section V-B. Depending on the
scheme used for vote agreement,
they can also terminate
within two fault-free communication rounds, as shown in [17].
However, the use of waiting (e.g., visible in the communication
predicate of UniformVoting) requires a more complicated
communication layer, since retransmission is necessary, and
it hides the fact that additional messages are required for
acknowledgments. The same level of fault tolerance can be
achieved without waiting, as the algorithms in the next section
show.
VIII. MOST RECENTLY USED (MRU) VOTE
In the algorithms of the previous section, processes main-
tain a safe vote candidate at every point in time. In this section,
we show how to generate such candidates only when they are
needed, based on just partial views of voting histories and
without resorting to waiting.
Going back to the deﬁnition of a Same Voting round, we
observe that any state of Same Voting satisﬁes the invariant:
votes(r, p) = v =⇒ safe(votes, r, v),
for any v ∈ V . Moreover, such a v is the only value receiving
votes in round r. Hence, no other value can receive a quorum
of votes in r, and v is also safe in round r + 1. Formally:
votes(r, p) = v =⇒ safe(votes, r + 1, v).
Returning to the example from Figure 5, by the above we
conclude that the value 1 is safe in round 2. Moreover, we see
a quorum of ⊥ votes in round 2. By the intersection property
(Q1), no value whatsoever could have received a quorum of
votes in that round; value 1 is therefore still safe in round 3,
and can be chosen as the next vote. In this way we have in fact
generated, on the ﬂy, the same candidate that a hypothetical
process running the Observing Quorums scheme would do, if
its observations were based on the votes shown in Figure 5.
It is straightforward to generalize this solution. If we see
the voting history of a quorum Q after multiple rounds, the
most recently used (MRU) vote will still be safe. This value
is unique, since all values cast within the same round are the
same. If nobody in Q ever voted, we deﬁne the MRU vote to
be ⊥. In this case, by (Q1) no value ever received a quorum of
votes and all values are safe. Formally, given a voting history
v_hist and a quorum Q, we deﬁne a function the_mru_vote
as above, and we say that Q is an MRU guard for v if:
mru_guard(v_hist, Q, v) (cid:3)