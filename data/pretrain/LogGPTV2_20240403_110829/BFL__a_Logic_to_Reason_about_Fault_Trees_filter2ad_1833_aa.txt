title:BFL: a Logic to Reason about Fault Trees
author:Stefano M. Nicoletti and
Ernst Moritz Hahn and
Mari&quot;elle Stoelinga
1
5
0
0
0
.
2
2
0
2
.
5
0
4
3
5
N
S
D
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
1
-
3
9
6
1
-
4
5
6
6
-
1
-
8
7
9
|
)
N
S
D
(
s
k
r
o
w
t
e
N
d
n
a
s
m
e
t
s
y
S
e
l
b
a
d
n
e
p
e
D
n
o
e
c
n
e
r
e
f
n
o
C
l
a
n
o
i
t
a
n
r
e
t
n
I
P
I
F
I
/
E
E
E
I
l
a
u
n
n
A
d
n
2
5
2
2
0
2
2022 52nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)
BFL: a Logic to Reason about Fault Trees
Stefano M. Nicoletti∗
Mariëlle Stoelinga∗†
∗University of Twente, Formal Methods and Tools, Enschede, the Netherlands.
†Radboud University, Department of Software Science, Nijmegen, the Netherlands.
E. Moritz Hahn∗
{s.m.nicoletti,e.m.hahn,m.i.a.stoelinga}@utwente.nl
Abstract—Safety-critical infrastructures must oper-
ate safely and reliably. Fault tree analysis is a wide-
spread method used to assess risks in these systems:
fault trees (FTs) are required — among others — by
the Federal Aviation Authority, the Nuclear Regulatory
Commission, in the ISO26262 standard for autonomous
driving and for software development in aerospace sys-
tems. Although popular both in industry and academia,
FTs lack a systematic way to formulate powerful and
understandable analysis queries. In this paper, we aim
to ﬁll this gap and introduce Boolean Fault tree Logic
(BFL), a logic to reason about FTs. BFL is a simple,
yet expressive logic that supports easier formulation of
complex scenarios and speciﬁcation of FT properties.
Alongside BFL, we present model checking algorithms
based on binary decision diagrams (BDDs) to analyse
speciﬁed properties in BFL, patterns and an algorithm
to construct counterexamples. Finally, we propose a
case-study application of BFL by analysing a COVID19-
related FT.
I. Introduction
Our self-driving cars, power plants, and transportation
systems must operate in a safe and reliable way. Risk as-
sessment is a key activity to identify, analyze and prioritize
the risk in a system, and come up with (cost-)eﬀective
countermeasures.
Fault tree analysis (FTA) [1, 2] is a widespread formal-
ism to support risk assessment. FTA is applied to many
safety-critical systems and the use of fault trees is required
for instance by the Federal Aviation Authority (FAA), the
Nuclear Regulatory Commission (NRC), in the ISO 26262
standard [3] for autonomous driving and for software de-
velopment in aerospace systems. A fault tree (ft) models
how component failures arise and propagate through the
system, eventually leading to system level failures. Leaves
in a ft represent basic events (bes), i.e. elements of the
tree that need not be further reﬁned. Once these fail,
the failure is propagated through the intermediate events
(ies) via gates, to eventually reach the top level event
(TLE), which symbolizes system failure. In the (sub)tree
represented in Fig. 1, the tle— Existence of COVID-19
Pathogens/Reservoir — is reﬁned by an OR-gate (CP/R).
For CP/R to fail, either pathogens must exist on the
partially
by
the NWO grant
*This work was
the European Union’s
NWA.1160.18.238
Horizon 2020 research and innovation programme under
the
Marie Skłodowska-Curie grant agreement No 101008233, and the
ERC Consolidator Grant 864075 (CAESAR).
(PrimaVera),
funded
and
Existence of COVID-19
Pathogens/Reservoir
CP/R
Existence of COVID-19
Existence of COVID-19
Pathogens
CP
Reservoir
CR
H3
IW
Figure 1: A simple FT (excerpt from Fig. 2).
H2
IT
workplace, i.e., Existence of COVID-19 Pathogens (CP),
or there must be an infected object of some kind, i.e.,
Existence of COVID-19 Reservoir (CR) has to happen.
Both CP and CR are AND-gates: for them to fail, all
their respective children need to fail. For CP this means
that an Infected worker joining the team (IW ) and a
failure in detecting this, i.e., Detection error (H3) must
happen. For CR this means that an Infected object used
by the team (IT) and a General disinfection error (H2)
must happen. Fault tree analysis supports qualitative and
quantitative analysis. Qualitative analysis aims at pointing
out root causes and critical paths in the system. Typically,
one identiﬁes the minimal cut sets (mcss) of a ft, i.e.
minimal sets of bes that, when failed, cause the system
to fail. One can also identify minimal path sets (mpss), i.e.
minimal sets of bes that - when operational - guarantee
that the system will remain operational. Quantitative
analysis allows to compute relevant dependability metrics,
such as the system reliability, availability and mean time to
failure. A formal background on fts is provided in Sec. II.
In spite of their popularity, fts lack a systematic way
to formulate powerful yet understandable analysis quer-
ies. The qualitative and quantitative analysis questions
mentioned above are formulated by ad hoc means. In
particular, if scenarios are analysed, the fault tree has to
be altered, for instance if one likes to compute the system
reliability given that certain subsystems have failed.
Boolean Fault tree Logic:
In this paper, we aim to
ﬁll this gap and introduce BFL, a Boolean logic to reason
about fts. BFL is based on concrete insights and needs
gathered through series of questions targeted at a ft
practitioner from industry [4]. In this paper, we aim to
ﬁll this gap and introduce BFL, a Boolean logic to reason
about fts. BFL is based on concrete insights and needs
2158-3927/22/$31.00 ©2022 IEEE
DOI 10.1109/DSN53405.2022.00051
441
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:18:37 UTC from IEEE Xplore.  Restrictions apply. 
gathered through series of questions targeted at a ft
practitioner from industry [4]. The atomic propositions in
this logic are the ft elements, i.e., both the bes and the
ies. As usual, formulae can be combined through Boolean
connectives. Furthermore, we include operators for setting
evidence, and for mcss and mpss. In this way, we obtain
a simple, yet expressive logic to reason about fts that
supports easier formulation of scenarios. Among others:
• We can set evidence to analyse what-if scenarios. E.g.,
what are the mcss, given that be A or subsystem B
has failed? What are the mpss given that A or B
have not failed?
• We can check whether two elements are independent
or if they share a children that can inﬂuence their
status.
• We can check whether the failure of one (or more)
element E always leads to the failure of tle.
• We can set upper/lower boundaries for failed ele-
ments. E.g., would element E always fail if at most/at
least two out of A, B and C were to fail?
Moreover, if a property does not hold, BFL allows us to
generate counterexamples, to show why the property fails.
E.g., if some set S is not a mcs, we can generate additional
bes e1, ..en that need to fail in order for S to be a mcs.
Model checking: As a ﬁrst step, we focus on non-
probabilistic logic to set a robust baseline that can be
easily extended, focusing on useful algorithms and counter-
example generation. We present algorithms to answer two
model checking queries and we discuss a third scenario.
First, we propose an algorithm to check if T, b |= χ holds,
i.e. if a BFL formula χ holds for a given ft T and a status
vector b . The latter indicates, for each be in T, whether
that be has failed. Second, we present a procedure that
|= χ
computes all status vectors (cid:2)b (cid:3) for which T, b
holds. Finally, given b and χ, we reﬂect on procedures to
synthesize, if it exists, a ft T such that T, b |= χ holds.
The algorithms exploit clever manipulations of Binary
Decision Diagrams (bdds). In order to translate formulae
to bdds, we identify ft elements that appear in a given
formula. We then construct bdds only for these elements
and store the resulting bdds in case they are needed in
further computations. Finally, we manipulate these bdds
to reﬂect the semantics of the operators in BFL. Once the
bdd for the formula is obtained, we either walk down
from the root node following truth assignments given in a
speciﬁc vector b or — if no vector is given — we collect
every path that leads to the terminal 1 to compute all
satisfying vectors (cid:2)b (cid:3) for that formula. bdds are natur-
ally applicable to fts, since fts are essentially Boolean
functions and bdds provide compact representations of
Boolean functions. Thus, BDDs are heavily exploited in
fault tree analysis [1, 5, 6].
Counterexamples: Moreover, we provide an algorithm
and several patterns to construct counterexamples. We
showcase them by selecting some example formulae and we
represent resulting counterexamples. Given a status vector
b and a formula χ, if b does not satisfy χ we compute a
(cid:2) |= χ for the given T. We then represent
new b
how failures propagate through T in light of the newly
found vector.
(cid:2) such that b
Contributions: To summarize, in this work:
1) We develop a logic for fts that enables the con-
struction of complex queries, to express numerous
relevant scenarios.
2) We provide model checking algorithms to check
properties deﬁned in the logic.
3) We present an algorithm and patterns to construct
and represent useful counterexamples.
4) We showcase the potential of our logic by applying
it to a medium-sized COVID-19 related example.
Related work: Numerous well-known logics describe
properties of state-transition systems, such as labelled
transition systems and Markov models. Examples com-
prise CTL [7], LTL [8], and their variants for Markov
models, PCTL [9] and PLTL [10]. State-transition sys-
tems are usually not written by hand, but result as the
semantics of high-level description mechanisms, such as
AADL [11], the hardware description language VHDL [12]
or model description languages such as JANI [13] or
PRISM [14]. These logics are thus not used to reason about
the structure of such models (e.g. the placement of circuit
elements in a VHDL model or the structure of modules
in a PRISM model), but on the temporal behaviour of
the underlying state-transition system. Similarly, related
work on model checking on fts [15, 16, 17, 18] exhibits
signiﬁcant diﬀerences: these works perform model checking