                       ->  Result  (cost=0.44..0.45 rows=1 width=4) (actual time=0.023..0.024 rows=1 loops=1)  
                             InitPlan 3 (returns $1)  
                               ->  Limit  (cost=0.42..0.44 rows=1 width=4) (actual time=0.020..0.021 rows=1 loops=1)  
                                     ->  Index Only Scan using b_id_idx on b b_1  (cost=0.42..18435.44 rows=1000001 width=4) (actual time=0.019..0.019 rows=1 loops=1)  
                                           Index Cond: (id IS NOT NULL)  
                                           Heap Fetches: 0  
                       ->  WorkTable Scan on tmp tmp_1  (cost=0.00..4.76 rows=10 width=4) (actual time=0.008..0.008 rows=1 loops=12)  
                             Filter: (id IS NOT NULL)  
                             Rows Removed by Filter: 0  
                             SubPlan 2  
                               ->  Result  (cost=0.45..0.46 rows=1 width=4) (actual time=0.007..0.007 rows=1 loops=11)  
                                     InitPlan 1 (returns $3)  
                                       ->  Limit  (cost=0.42..0.45 rows=1 width=4) (actual time=0.006..0.006 rows=1 loops=11)  
                                             ->  Index Only Scan using b_id_idx on b  (cost=0.42..6979.51 rows=333334 width=4) (actual time=0.006..0.006 rows=1 loops=11)  
                                                   Index Cond: ((id IS NOT NULL) AND (id > tmp_1.id))  
                                                   Heap Fetches: 0  
   ->  Index Scan using a_id_idx on a  (cost=0.42..2.63 rows=1 width=45) (actual time=0.003..0.003 rows=1 loops=11)  
         Index Cond: (id = tmp.id)  
 Planning Time: 0.295 ms  
 Execution Time: 0.246 ms  
(29 rows)  
```  
## DuckDB 例子  
DuckDB已支持semi-join    
```  
postgres@56000550f873:~$ ./duckdb   
v0.9.2 3c695d7ba9  
Enter ".help" for usage hints.  
Connected to a transient in-memory database.  
Use ".open FILENAME" to reopen on a persistent database.  
D create table a (id int, info text, ts timestamp);  
D create table b (id int, info text, ts timestamp);  
D insert into a select id, md5(random()::text), now() from range(0,1000000) as t(id);  
D insert into b select random()*10, md5(random()::text), now() from range(0,1000000) as t(id);  
D create index idxa on a (id);  
D create index idxb on b (id);  
```  
但是从执行计划可以看出, DuckDB这里没有使用index skip scan:    
```  
D explain analyze select a.* from a where exists (select 1 from b where a.id=b.id);  
explain analyze select a.* from a where exists (select 1 from b where a.id=b.id);  
┌─────────────────────────────────────┐  
│┌───────────────────────────────────┐│  
││        Total Time: 0.0484s        ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
┌───────────────────────────┐                               
│      EXPLAIN_ANALYZE      │                               
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │                               
│             0             │                               
│          (0.00s)          │                               
└─────────────┬─────────────┘                                                            
┌─────────────┴─────────────┐                               
│         HASH_JOIN         │                               
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │                               
│            SEMI           │                               
│ id IS NOT DISTINCT FROM id│                               
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ├──────────────┐                
│        EC: 1000000        │              │                
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │              │                
│             11            │              │                
│          (0.04s)          │              │                
└─────────────┬─────────────┘              │                                             
┌─────────────┴─────────────┐┌─────────────┴─────────────┐  
│         SEQ_SCAN          ││         SEQ_SCAN          │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ││   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             a             ││             b             │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ││   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             id            ││             id            │  
│            info           ││   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│             ts            ││        EC: 1000000        │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ││   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │  
│        EC: 1000000        ││          1000000          │  
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ││          (0.00s)          │  
│          1000000          ││                           │  
│          (0.02s)          ││                           │  
└───────────────────────────┘└───────────────────────────┘                               
Run Time (s): real 0.051 user 0.117643 sys 0.018274  
```  
虽然duckdb也支持递归, 但是DuckDB对递归的优化不太友好, 需要`0.064秒`, 可能duckdb的优化器更适合大批量数据计算.     
```  
D with recursive tmp as (  
>   select min(id) as id from b   
>   union all   
>   select (select min(b.id) from b where b.id > tmp.id) from tmp where tmp.id is not null  
> )   
> select * from tmp where tmp.id is not null;  
┌───────┐  
│  id   │  
│ int32 │  
├───────┤  
│     0 │  
│     1 │  
│     2 │  
│     3 │  
│     4 │  
│     5 │  
│     6 │  
│     7 │  
│     8 │  
│     9 │  
│    10 │  
└───────┘  
Run Time (s): real 0.064 user 0.240191 sys 0.035479  
D select a.* from a where exists (select 1 from   
> (  
> with recursive tmp as (  
>   select min(id) as id from b   
>   union all   
>   select (select min(b.id) from b where b.id > tmp.id) from tmp where tmp.id is not null  
> )   
> select * from tmp where tmp.id is not null  
> ) b  
>  where a.id=b.id);  
┌───────┬──────────────────────────────────┬───────────────────────┐  
│  id   │               info               │          ts           │  
│ int32 │             varchar              │       timestamp       │  
├───────┼──────────────────────────────────┼───────────────────────┤  
│     0 │ de1ef3eadbc5d3a8fe10fd9c9e4c90d2 │ 2024-01-03 11:32:35.1 │  
│     1 │ 0078e0550a696772b8d21744cf6ada88 │ 2024-01-03 11:32:35.1 │  
│     2 │ a42b9b4a0c77a90d7a4b0b0f71a99564 │ 2024-01-03 11:32:35.1 │  
│     3 │ 70a0af28f15818f2d72aeb06809383f2 │ 2024-01-03 11:32:35.1 │  
│     4 │ a805d9906eac73fb348834bb56444d37 │ 2024-01-03 11:32:35.1 │  
│     5 │ eb11674a546980a3364aeaeb16206fc6 │ 2024-01-03 11:32:35.1 │  
│     6 │ 9335fd3c688851e55fc5039b7d26e934 │ 2024-01-03 11:32:35.1 │  
│     7 │ a51ce7b9203f0858e3e56779167a1012 │ 2024-01-03 11:32:35.1 │  
│     8 │ 0a723d0d3e07a26fb134bab02b78533d │ 2024-01-03 11:32:35.1 │  
│     9 │ 76cbfc8316371fa740cae231563e212b │ 2024-01-03 11:32:35.1 │  
│    10 │ 710bc959af73686d5941d5e2ddb1e0cf │ 2024-01-03 11:32:35.1 │  
├───────┴──────────────────────────────────┴───────────────────────┤  
│ 11 rows                                                3 columns │  
└──────────────────────────────────────────────────────────────────┘  
Run Time (s): real 0.073 user 0.287287 sys 0.033601  
explain analyze select a.* from a where exists (select 1 from   
(  
with recursive tmp as (  
  select min(id) as id from b   
  union all   
  select (select min(b.id) from b where b.id > tmp.id) from tmp where tmp.id is not null  
)   
select * from tmp where tmp.id is not null  
) b  
 where a.id=b.id);  
explain analyze select a.* from a where exists (select 1 from  ( with recursive tmp as (   select min(id) as id from b    union all    select (select min(b.id) from b where b.id > tmp.id) from tmp where tmp.id is not null )  select * from tmp where tmp.id is not null ) b  where a.id=b.id);  
┌─────────────────────────────────────┐  
│┌───────────────────────────────────┐│  
││        Total Time: 0.0702s        ││  
│└───────────────────────────────────┘│  
└─────────────────────────────────────┘  
┌───────────────────────────┐                                                                                                                                                                                                             
│      EXPLAIN_ANALYZE      │                                                                                                                                                                                                             
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │                                                                                                                                                                                                             
│             0             │                                                                                                                                                                                                             
│          (0.00s)          │                                                                                                                                                                                                             
└─────────────┬─────────────┘                                                                                                                                                                                                                                          
┌─────────────┴─────────────┐                                                                                                                                                                                                             
│         HASH_JOIN         │                                                                                                                                                                                                             
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │                                                                                                                                                                                                             
│            SEMI           │                                                                                                                                                                                                             
│ id IS NOT DISTINCT FROM id│                                                                                                                                                                                                             
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   ├──────────────┐                                                                                                                                                                                              
│        EC: 1000000        │              │                                                                                                                                                                                              
│   ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─   │              │                                                                                                                                                                                              
│             11            │              │                                                                                                                                                                                              
│          (0.01s)          │              │                                                                                                                                                                                              