accs.biz as a sequence p{Lu}p{Ll} p{Lu}p{Ll}. We
repeat this process for the name, screenname, and email
of each account. We note that for emails, we strip the
email domain (e.g. @hotmail.com) prior to processing
and use this as a separate feature in the process for pat-
tern generation.
Repeated Substrings While repeated text stems be-
tween multiple accounts are uncommon due to randomly
selected dictionary names, we ﬁnd the algorithms used to
generate accounts often reuse portions of text for names,
screennames, and emails. For instance, all of the ac-
counts in Table 6 from victoryservices have repeated sub-
strings between an account’s ﬁrst name and screenname.
To codify these patterns, we deﬁne a function repeat-
edNames that canonicalizes text from an account’s ﬁelds,
brute forces a search of repeated substrings, and then
codiﬁes the resulting patterns as invariants. Canonical-
ization entails segmenting a string into multiple sub-
5We use Java character class notation, where p{*} indicates a class
of letters and Lu indicates uppercase, Ll lowercase, and Lo non-case.
strings based on Σ-Seq transitions. We preserve full
names by ignoring transitions between upper and low-
ercase letters; spaces are also omitted from canonicaliza-
tion. We then convert all substrings to their lowercase
equivalent, when applicable. To illustrate this process,
consider the screenname WendyHunt5. Canonicalization
produces an ordered list [wendy,hunt,5], while the name
Wendy Hunt is converted to [wendy,hunt].
The function repeatedNames proceeds by performing
a brute force search for repeated substrings between all
canonicalized ﬁelds of an account. For our previous ex-
ample of WendyHunt5, one successful match exists be-
tween name[1] and screenname[1], where [i] indicates
the i-th position of a ﬁelds substring list; this same pat-
tern also holds for the name and screenname for Kristina
Levy. We use this positional search to construct invari-
ants that hold across accounts from a single merchant.
Without canonicalization, we could not specify what re-
lationship exists between Wendy and Kristina due to dif-
fering text and lengths. When searching, we employ both
exact pattern matching as well as partial matches (e.g.
neff found in brindagtgneff for buyaccs.com). We use the
search results to construct invariants for both strings that
must repeat as well as strings that never repeat.
Clustering Similar Accounts Once we know the Σ-Seq,
repeatedNames, and email domain of every account from
a merchant, we cluster accounts into non-overlapping
groups with identical patterns, as described in Algo-
rithm 1. We do this on a per-merchant basis rather than
for every merchant simultaneously to distinguish which
merchant an account originates from. We prune small
clusters based on a empirically determined τ to reduce
false positives, with our current implementation drop-
ping clusters with fewer than 10 associated accounts.
Bounding Character Lengths The ﬁnal phase of
our algorithm strengthens the invariants tied to Σ-Seq
transitions by determining a minimum length min(σi)
and maximum length max(σi) of each character class
σi. We use these to deﬁne a bound {lmin, lmax}
that captures all accounts with the same Σ-Seq. Re-
turning to our examples in Table 6, we group the
account names from accs.biz and produce an expression
p{Lu}{1, 1}p{Ll}{5, 8} {1, 1}p{Lu}{1, 1}p{Ll}{4, 4}.
We combine these patterns with the invariants produced
by repeatedNames to construct a regular expression that
ﬁngerprints a cluster. We refer to these patterns for the
rest of this paper as merchant patterns.
204  22nd USENIX Security Symposium 
USENIX Association
10
Seller
victoryservices
accs.biz
formefor
spamvilla.com
Popularity Name
57%
46%
43%
38%
Trstram Aiken
Millicent Comolli
Wendy Hunt
Kristina Levy
ola dingess
brinda neff
Kiera Barbo
Jeannine Allegrini
Screenname
Trstramsse912
Millicentrpq645
WendyHunt5
KristinaLevy6
olawhdingess
brindagtgneff
Kierayvydb
Jeanninewoqzg
Email
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
PI:EMAIL
Table 6: Obfuscated sample of names, screennames, and emails of purchased accounts used to automatically generate merchant
patterns. Popularity denotes the fraction of accounts that match the pattern for an individual merchant.
5.2 Pattern Reﬁnement
We reﬁne our merchant patterns by including abuse-
orientated signals that detect automated signup behavior
based on the registration process, user-agent data, and
timing events.
Signup Flow Events We begin our reﬁnement of mer-
chant patterns by analyzing the activities of purchased
accounts during and immediately after the signup work
ﬂow. These activities include events such as a user im-
porting contacts and accessing a new user tutorial. The
complete list of these events is sensitive information and
is omitted from discussion. Many of these events go un-
triggered by the automated algorithms used by account
sellers, allowing us to distinguish automated registrations
from legitimate users.
Given a cluster of accounts belonging to a single mer-
chant, we generate a binary feature vector esig = {0, 1}n
of the n possible events triggered during signup. A value
of 1 indicates that at least ρ accounts in the cluster trig-
gered the event e. For our experiments, we specify a
cutoff ρ = 5% based on reducing false positives. Subse-
quently, we determine whether a new account with event
vector e matches a seller’s signup ﬂow signature esig by
computing whether e ⊆ esig holds. The majority of le-
gitimate accounts have |e| (cid:27) |esig|, so we reject the
possibility they are automated even though their naming
conventions may match a merchant’s.
User Agents A second component of signups is the user
agent associated with a form submission. Direct match-
ing of user agents used by a seller with new subse-
quent signups is infeasible due to sellers randomizing
user agents. For instance, buytwitteraccounts.info uses a
unique (faked) agent for every account in our purchased
dataset. Nevertheless, we can identify uniformity in the
naming conventions of user agents just as we did with
account names and screennames.
Given a cluster of accounts from a single seller, we
generate a preﬁx tree containing every account’s user
agent. A node in the tree represents a single character
from a user agent string while the node’s depth mirrors
the character’s position in the user agent string. Each
node also contains the fraction of agents that match the
substring terminated at the given node. Rather than ﬁnd
the longest common substring between all accounts, we
prune the tree so that every substring terminating at a
node has a fraction of at least φ accounts in the cluster
(in practice, 5%). We then generate the set of all sub-
strings in the preﬁx tree and use them to match against
the agents of newly registered accounts. The resulting
substrings include pattens such as Mozilla/5.0 (X11; Linux
i686 which, if not truncated, would include multiple spu-
rious browser toolbars and plugins and be distinct from
subsequent signups. While in theory the resulting user
agent substrings can be broad, in practice we ﬁnd they
capture browser variants and operating systems before
being truncated.
Form Submission Timing The ﬁnal feature from the
signup process we use measures the time between Twit-
ter serving a signup form to the time the form is submit-
ted. We then compute a bound {mints, maxts} for each
seller to determine how quickly a seller’s algorithm com-
pletes a form. To counter outliers, we opt for the 99%
for both minimum and maximum time. For instance, the
Fiverr merchant kathlyn registers accounts within {0, 1}
seconds. A newly minted account can match a seller’s al-
gorithm if its form completion time is within the sellers
bound.
5.3 Alternative Signals
There were a number of alternative signals we consid-
ered, but ultimately rejected as features for classiﬁca-
tion. We omitted the delay between an account’s reg-
istration and subsequent activation as we lacked training
USENIX Association  
22nd USENIX Security Symposium  205
11
data to measure this period; all our accounts remain dor-
mant after purchase (minus the small fraction that were
resold). We also analyzed both the timing of registra-
tions as well as the interarrival times between successive
registrations. We found that merchants sell accounts in
blocks that sometimes span months, preventing any in-
terarrival analysis. Furthermore, merchants register ac-
counts at uniformly random hours and minutes. Finally,
as merchants create accounts from IP addresses around
the globe, no subnet or country accurately captures a sub-
stantive portion of abusive registrations.
5.4 Evaluation
To demonstrate the efﬁcacy of our model, we retroac-
tively apply our classiﬁer to all Twitter accounts regis-
tered in the last year. In total, we identify several mil-
lion6 distinct accounts that match one of our merchant
patterns and thus are potentially fraudulent. We validate
these ﬁndings by analyzing both the precision and recall
of our model as well measuring the impact of time on the
model’s overall accuracy.
Precision & Recall Precision measures the fraction of
identiﬁed accounts that are in fact fraudulent (e.g., not
misclassiﬁed, legitimate users), while recall measures
the fraction of all possible fraudulent accounts that we
identify, limited to the merchants that we study. To es-
timate the precision of each merchant pattern, we se-
lect a random sample of 200 accounts matching each of
26 merchant patterns,7 for a total of 4,800 samples. We
then manually analyze the login history, geographic dis-
tribution of IPs, activities, and registration process tied to
each of these accounts and label them as spam or benign.
From this process, we estimate our overall precision at
99.99%, with the breakdown of the most popular mer-
chant pattern precisions shown in Table 7. In a similar
vein, we estimate recall by calculating the fraction of all
accounts we purchase that match our classiﬁer.
In to-
tal, we correctly identify 95% of all purchased accounts;
the remaining 5% of missed accounts did not form large
enough clusters to be included in a merchant’s pattern,
and as a result, we incorrectly classiﬁed them as legiti-
mate.
Performance Over Time The performance of our model
is directly tied to accurately tracking adaptations in the
6Due to operational concerns, we are unable to provide exact num-
bers on the volume of spam accounts registered. As such, we reference
merchants and the impact they have on Twitter as a relative volume of
all several million accounts that we detect.
7We omit accounts purchased from the Freelancer merchant shiv-
nagsudhakar as these were registered over a year ago and thus lay out-
side the range of data to which we had access.
Service
buuman
smokinbluelady
danyelgallu
twitter007
kathlyn
jackhack08
twitfollowers
denial93
ghetumarian
formefor
shivnagsudhakar
kamalkishover
naveedakhtar
webmentors2009
truepals
alexissmalley
victoryservices
spamvilla.com
getbulkaccounts.com
xlinternetmarketing.com
accs.biz
buytwitteraccounts.biz
quickaccounts.bigcartel
buytwitteraccounts.info
dataentryassistant.com
buyaccountsnow.com
buyaccs.com
Total
–
–
Rel. Volume
P
R
0.00% 100.00% 70.67%
0.08% 100.00% 98.91%
0.12% 100.00% 100.00%
0.13% 100.00% 97.33%
0.13% 100.00% 93.24%
0.41% 100.00% 100.00%
0.72% 100.00% 92.50%
2.18% 100.00% 100.00%
3.05% 100.00% 85.94%
4.75% 100.00% 100.00%
–
29.90% 99.60% 92.73%
0.24% 100.00% 98.40%
0.85% 100.00% 99.64%
1.02% 100.00% 93.08%
1.68% 100.00% 98.62%
6.33% 99.70% 99.03%
0.71% 99.00% 98.70%
2.97% 100.00% 100.00%
3.12% 100.00% 95.13%
4.48% 100.00% 97.62%
6.10% 100.00% 84.27%
10.91% 100.00% 99.73%
20.45% 99.60% 81.85%
24.01% 100.00% 96.57%
30.75% 99.10% 95.10%
58.39% 100.00% 91.66%
100.00% 99.99% 95.08%
Table 7: Breakdown of the merchants, the relative volume of
all detected accounts in the last year that match their pattern,
precision (P) and recall (R).
algorithms used by merchants to register accounts. To
understand how frequently these adaptations occur, we
evaluate the performance of our classiﬁer as a function
of time. Figure 5 shows the overall recall of each of
our merchant patterns for the sellers we track over the
longest period of time. For each merchant, we train a
classiﬁer on accounts acquired up to time t and evalu-
ate it on all accounts from the merchant, regardless of
when we purchased the account. We ﬁnd that some sell-
ers such as alexissmalley rarely alter their registration
algorithm throughout our study, allowing only two pur-
chases to sufﬁce for accurate detection. In contrast, we
see a shift in registration algorithms for a number of mer-
chants around October and January, but otherwise pat-
terns remain stable for long periods. The several million
accounts we identify as fraudulent should thus be viewed
as a lower bound in the event we missed an adaptation.
Pattern Overlap & Resale The simultaneous adapta-
tion of merchant patterns in Figure 5 around October and
206  22nd USENIX Security Symposium 
USENIX Association
12
1.00
0.75
s
t
n
u
o
c
c
a
i
g
n
h
c
t
a
m
n
o
i
t
c
a
r
F
0.50
0.25
0.00
G
G G G G G G
G G
G
G
G
G
G
G
Jul
Oct
Jan
Apr
Date of Purchase
G accs.biz
alexissmalley
buyaccs.com
kamalkishover.freelancer
victoryservices
webmentors2009
Figure 5: Recall of generated merchant patterns for all pur-
chased accounts as a function of training the classiﬁer on data
only prior to time t.
other periods leads us to believe that a multitude of mer-
chants are using the same software to register accounts
and that an update was distributed. Alternatively, the
account marketplace may have multiple levels of resale
(or even arbitrage) where accounts from one merchant
are resold by another for an increased cost, leading to
correlated adaptations. Further evidence of correlated
patterns appears in the merchant patterns we construct,
where a classiﬁer for one merchant will accurately de-
tect accounts sold to us by a second merchant. For in-
stance, the accounts sold by kamalkishover from Free-
lancer overlap with the patterns of 9 other merchants, the
most popular of which is buyaccountsnow.com. We ﬁnd
most Fiverr sellers are independent with the exception
of denial93, ghetumarian, and formefor, whose patterns
overlap with the major account web storefronts. This
would explain why these three Fiverr sellers appear to
be much larger (from the perspective of Table 7) com-
pared to other Fiverr merchants. As a result, our esti-
mates for the number of accounts registered by each mer-
chant may be inﬂated, though our ﬁnal total counts only
unique matches and is thus globally accurate.
6
Impact of the Underground Market
We analyze the several million accounts we ﬂag as
registered by merchants operating in the underground
market and estimate the fraction that have been sold