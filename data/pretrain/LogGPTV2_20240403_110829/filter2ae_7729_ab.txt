    ...
    }
在`CPcall()`函数中，我们利用了call函数，比并且其参数Data是我们传入的bytes值。而此值我们可以进行控制，所以我们完全可以传入调用函数`transfer()`，并且在传入参数中将`to`设置为攻击者自己的地址。这样不仅绕过了`tansferAllowed(msg.sender)`，还攻击了系统，将以太币传给自己。
#### 3 代币方法器注入攻击
在上面我们利用bytes类型的变量传入了攻击利用代码，而倘若我们没有办法进行关键参数的传入工作，而只能传入函数名应该怎么办？
例如：
    function CPcall(address _to, uint _value, bytes data, string fallback){
            ...
             assert(_to.call(bytes4(keccak256(fallback)),msg.sender, _value, _data)) ;
            ...
    }
上述函数中传入了四个变量，而加入我们能操控的变量只有`fallback`，而`value`与`data`我们无法自行传入。我们应该如何调用下一步的操作？
这里我们写出转账函数的内容：
    function transfer(address a, uint value) public returns (bool success)
    {
        trans(msg.sender, a, value);//向a转账value数量的钱
    }
倘若如此，我们就可以利用call来进行内部调用转账函数来达到偷币的效果。
我们可以仅仅将`fallback`的值修改为`transfer`，并且使函数`CPcall()`中的断言函数中调用转账函数。不过同学会问，上一个函数中的参数有三个，而下面的只有两个，那不会不匹配吗？我们这里知道，其实这个函数同样会执行成功的。这是因为EVM在获取参数的时候没有参数个数校验的过程，因此取到前两个参数之后，就把最后一个参数`_data`给截断掉了，在编译和运行阶段都不会报错。
### 四、攻击案例
#### ATN代币增发
2018.5.11，ATN 技术人员收到异常监控报告，显示 ATN Token 供应量出现异常，通过分析发现 Token 合约由于存在漏洞受到攻击。由于
ATN 代币的合约中的疏漏，该事件中 call 注入不但绕过了权限认证，同时还可以更新合约拥有者。
本次事件的原因是由于在 ATN 项目中使用到了 `ERC223`和 `ds-auth`库，两个库在单独使用的情况下没有问题，同时使用时就会出现安全问题。
在ERC223 标准中定义了自定义回调函数：
    pragma solidity ^0.4.13;
    contract ERC223 {
        function transfer(address to, uint amount, bytes data) public returns (bool ok);
        function transferFrom(address from, address to, uint256 amount, bytes data) public returns (bool ok);
        function transfer(address to, uint amount, bytes data, string custom_fallback) public returns (bool ok);
        function transferFrom(address from, address to, uint256 amount, bytes data, string custom_fallback) public returns (bool ok);
        event ERC223Transfer(address indexed from, address indexed to, uint amount, bytes data);
        event ReceivingContractTokenFallbackFailed(address indexed from, address indexed to, uint amount);
    }
下面为函数的具体详情：源地址在[ERC233](https://github.com/ATNIO/atn-contracts/blob/master/src/ATN.sol)
    /*
         * ERC 223
         * Added support for the ERC 223 "tokenFallback" method in a "transfer" function with a payload.
         */
        function transferFrom(address _from, address _to, uint256 _amount, bytes _data, string _custom_fallback)
            public
            returns (bool success)
        {
            // Alerts the token controller of the transfer
            if (isContract(controller)) {
                if (!TokenController(controller).onTransfer(_from, _to, _amount))
                   throw;
            }
            require(super.transferFrom(_from, _to, _amount));
            if (isContract(_to)) {
                ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
                receiver.call.value(0)(bytes4(keccak256(_custom_fallback)), _from, _amount, _data);
            }
            ERC223Transfer(_from, _to, _amount, _data);
            return true;
        }
我们重点看
    if (isContract(_to)) {
            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
            receiver.call.value(0)(bytes4(keccak256(_custom_fallback)), _from, _amount, _data);
        }
而[ds-auth](\[https://github.com/dapphub/ds-auth\]\(https://github.com/dapphub/ds-auth)  
) 权限认证和更新合约拥有者函数如下：
    function setOwner(address owner_) public auth {
        owner = owner_;
        emit LogSetOwner(owner);
    }
    ...
    modifier auth {
        require(isAuthorized(msg.sender, msg.sig));
        _;
    }
    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {
        if (src == address(this)) {
            return true;
        } else if (src == owner) {
            return true;
        } else if (authority == DSAuthority(0)) {
            return false;
        } else {
            return authority.canCall(src, this, sig);
        }
    }
而我们根据两个核心代码可以进行分析：
首先攻击者通过调用`transferFrom()` 函数，并将自己的钱包地址作为`_from` 参数，ATN 合约的地址作为 `_to`
参数。然后传入`setOwner`作为回调函数。在执行的过程中，由于上文我们可知，当参数数量大于调用函数的参数数量时，后面的参数自动被忽略。之后call
调用已经将 `msg.sender`转换为了合约本身的地址，也就绕过了
`isAuthorized()`的权限认证，将拥有者改为了自己。之后攻击转账后再次调用`setOwner()`将权限还原，不留痕迹。
### 五、总结
根据上文，我们可以知道`call()`函数存在许许多多的问题。我们总结下来大致有以下一些问题，因为call函数特殊的性质导致其能够调用其他函数。而根据我们信息安全的思维来看，能执行命令那么久会存在安全隐患。所以我们在未来开发的时候要严格对此函数进行过滤以及包装。我们总结下来，在之后的虚拟机设计中可以遵循以下原理：
  * 1 简单性：尽可能少、尽可能底层的操作码，尽可能少的数据类型，尽可能少的虚拟机层次结构。
  * 2 完全确定性：VM规范的任何部分不能存在歧义，结构需要是完全正确的。此外，应该有相应的计算步骤来记录Gas的消耗。
  * 3 空间节省：EVM组件需要尽可能的紧凑。
  * 4 简单的安全性：为了使VM不会被攻击，应该很容易得出智能合约运行所需要消耗的“燃料”成本。
### 六、参考资料
  * 1 
  * 2 
  * 3 
  * 4 
  * 5 