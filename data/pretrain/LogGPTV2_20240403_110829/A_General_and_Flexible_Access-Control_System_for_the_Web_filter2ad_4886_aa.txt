title:A General and Flexible Access-Control System for the Web
author:Lujo Bauer and
Michael A. Schneider and
Edward W. Felten
USENIX Association
Proceedings of the
11th USENIX Security
Symposium
San Francisco, California, USA
August 5-9, 2002
© 2002 by The USENIX Association
Phone: 1 510 528 8649
FAX: 1 510 548 5738
THE ADVANCED COMPUTING SYSTEMS ASSOCIATION
All Rights Reserved
Email: PI:EMAIL
For more information about the USENIX Association:
WWW: http://www.usenix.org
Rights to individual papers remain with the author or the author's employer.
 Permission is granted for noncommercial reproduction of the work for educational or research purposes.
This copyright notice must be included in the reproduced paper. USENIX acknowledges all trademarks herein.
A General and Flexible Access-Control System for the Web
Lujo Bauer(cid:3)
Michael A. Schneidery
Edward W. Felten(cid:3)
Secure Internet Programming Laboratory
Department of Computer Science
Princeton University
flbauer,schneidr,PI:EMAIL
Abstract
We describe the design, implementation, and per-
formance of a new system for access control on the
web. To achieve greater (cid:13)exibility in forming access-
control policies { in particular, to allow better in-
teroperability across administrative boundaries { we
base our system on the ideas of proof-carrying au-
thorization (PCA). We extend PCA with the no-
tion of goals and sessions, and add a module system
to the proof language. Our access-control system
makes it possible to locate and use pieces of the se-
curity policy that have been distributed across ar-
bitrary hosts. We provide a mechanism which al-
lows pieces of the security policy to be hidden from
unauthorized clients. Our system is implemented
as modules that extend a standard web server and
web browser to use proof-carrying authorization to
control access to web pages. The web browser gen-
erates proofs mechanically by iteratively fetching
proof components until a proof can be constructed.
We provide for iterative authorization, by which a
server can require a browser to prove a series of chal-
lenges. Our implementation includes a series of op-
timizations, such as speculative proving, and modu-
larizing and caching proofs, and demonstrates that
the goals of generality, (cid:13)exibility, and interoperabil-
ity are compatible with reasonable performance.
1
Introduction
After a short period of being not much more than
a curiosity, the web quickly became an important
(cid:3)Supported in part by NSF Grant CCR-9870316.
ySupported by a Fannie and John Hertz Graduate Fellow-
ship.
medium for discussion, commerce, and business. In-
stead of holding just information that the entire
world could see, web pages also became used to ac-
cess email, (cid:12)nancial records, and other personal or
proprietary data that was meant to be viewed only
by particular individuals or groups.
This made it necessary to design mechanisms that
would restrict access to web pages. The most widely
used mechanism is for the user to be prompted for
a username and password before he is allowed to
see the content of a page [11]. A web administrator
decides that a certain page will be visible only if a
user enters a correct username/password pair that
resides in an appropriate database (cid:12)le on the web
server. A successful response will often result in the
client’s browser being given a cookie; on later visits
to the same or related web pages, the cookie will be
accepted as proof of the fact that the user has al-
ready demonstrated his right to see those pages and
he won’t be challenged to prove it again [19]. An
organization such as a university may require that
all people wishing to see a restricted web page (cid:12)rst
visit a centralized login page which handles authen-
tication for all of the organization’s web sites. The
cookie placed on the client’s browser then contains
information which any of the organization’s web
servers can use to verify that it was legitimately is-
sued by the organization’s authentication service. In
cases such as this one the functions of authentication
(verifying an identity) and authorization (granting
access) are separated into two distinct processes.
More modern methods of controlling access to web
pages separate these functions even further, not as
an optimization, but as a basic element of their de-
sign.
Increasingly in use are systems in which a
certi(cid:12)cate, such as a Kerberos ticket [15, 17] or an
X.509 certi(cid:12)cate [14], is obtained by a user through
out-of-band means; a web browser and a web server
are augmented so that the web browser can pass the
certi(cid:12)cate to the web server and the web server can
use the certi(cid:12)cate to authorize the user to access a
certain page. The advantage of these mechanisms
is that, in addition to providing more secure imple-
mentations of protocols similar to basic web authen-
tication, they make it possible for a host of di(cid:11)erent
services to authorize access based on the same token.
An organization can now provide a single point of
authentication for access to web pages, (cid:12)le systems,
and Unix servers.
Though growing increasingly common, most no-
tably due to the use of Kerberos in new versions of
the Windows operating system, these systems have
not yet gained wide acceptance. This is partly be-
cause they don’t adequately deal with all the re-
quirements for authorization on the web, so their
undeniable advantages may not be su(cid:14)cient to jus-
tify their cost.
One of the chief weaknesses of these systems is that
they are not good at providing interoperability be-
tween administrative domains, especially when they
use di(cid:11)erent security policies or authorization sys-
tems. Having a centralized authentication server
that issues each user a certi(cid:12)cate works well when
there’s a large number of web servers which are will-
ing to trust that particular authentication server (at
a university, for example), but when such trust is ab-
sent (between two universities) they bear no bene-
(cid:12)t. There have been attempts to build systems that
cross this administrative divide [9] but the problem
still awaits practical solution.
We have built a system that addresses this issue;
in this paper we present its design, implementation,
and performance results. Our system even further
uncouples authorization from authentication, allow-
ing for superior interoperation across administrative
domains and more expressive security policies. Our
implementation consists of a web server module and
a local web proxy. The server allows access to pages
only if the web browser can demonstrate that it is
authorized to view them. The browser’s local proxy
accomplishes this by mechanically constructing a
proof of a challenge sent to it by the server. Our sys-
tem supports arbitrarily complex delegation, and we
implement a framework that lets the web browser
locate and use pieces of the security policy (e.g.,
delegation statements) that have been distributed
across arbitrary hosts. Our system was built for
controlling access to web pages, but could relatively
easily be extended to encompass access control for
other applications (e.g., (cid:12)le systems) as well.
2 Goals and Design
In designing our system for access control of web
pages we had several criteria that we wanted to ad-
dress:
(cid:15) interoperability and expressivity;
(cid:15) ease of implementation and integration with
web servers and web browsers;
(cid:15) e(cid:14)ciency;
(cid:15) convenience to the user;
(cid:15) applicability to spheres other than web access
control.
2.1
Interoperability and Expressivity
Even the most (cid:13)exible of current systems for web
access control are limited in their ability to inter-
operate across administrative boundaries, especially
when they use di(cid:11)erent security policies or autho-
rization systems. One of the main reasons for this
is that though they attempt to separate the func-
tions of authorization and authentication, they over-
whelmingly continue to express their security policy
{ the de(cid:12)nition of which entities are authorized to
view a certain web page { in terms of the identities of
the users. Though the web server often isn’t the en-
tity that authenticates a user’s identity, basing the
security policy on identity makes it very di(cid:14)cult to
provide access to users who can’t be authenticated
by a server in the same administrative domain.
The way we choose to resolve this issue is by mak-
ing the security policy completely general { access
to a page can be described by an arbitrary predi-
cate. This predicate is likely to, but need not, be
linked to a veri(cid:12)cation of identity { it could be that a
particular security policy grants access only to peo-
ple who are able to present the proof of Fermat’s
last theorem. Since the facts needed to satisfy this
arbitrary authorization predicate are likely to in-
clude more than just a veri(cid:12)cation of identity, in
our access-control system we replace authentication
servers with more general fact servers. In this sce-
nario the problem of deciding whether a particular
client should be granted access to a particular web
page becomes a general distributed-authentication
problem, which we solve by adapting previously de-
veloped techniques from that (cid:12)eld.
Distributed authentication systems [7, 8, 14] pro-
vide a way for implementing and using complex se-
curity policies that are distributed across multiple
hosts. The methods for distributing and assembling
pieces of the security policy can be described using
logics [1, 6, 12], and distributed authentication sys-
tems have been built by (cid:12)rst designing an appropri-
ate logic and the implementing the system around
it [2, 3, 5]. The most general of the logics { that is,
the one that allows for expressing the widest range
of security policies { was recently introduced by Ap-
pel and Felten (AF logic) [4]. The AF logic is a
higher-order logic that di(cid:11)ers from standard ones
only by the inclusion of a very few rules that are
used for de(cid:12)ning operators and lemmas suitable for
a security logic.
A higher-order logic like the AF logic, however, is
not decidable, which means that no decision pro-
cedure will always be able to determine the truth
of a true statement, even given the axioms that
imply it. This makes the AF logic unsuitable for
use in traditional distributed authentication frame-
works in which the server is given a set of credentials
and must decide whether to grant access. This prob-
lem can be avoided in the server by making it the
client’s responsibility to generate proofs. The server
must now only check that the proof is valid { this is
not di(cid:14)cult even in an undecidable logic { leaving
the more complicated task of assembling the proof
to the client. The server, using only the common un-
derlying AF logic, can check proofs from all clients,
regardless of the method they used to generate the
proof or the proof’s structure. This technique of
proof-carrying authorization (PCA) perfectly satis-
(cid:12)es our goal of interoperability { as long as a server
bases its access control policy on the AF logic, inter-
operation with systems in di(cid:11)erent administrative
hierarchies is no more di(cid:14)cult than interoperation
with local ones.
2.2 Convenience of Use and Implemen-
tation
An important goal for a web access-control system
that aspires to be practical is that it be imple-
mentable without modi(cid:12)cation of the existing in-
frastructure { that is, web browsers and web servers.
Our access-control system involves three types of
players: web browsers, web servers, and fact servers
(which issue tokens that can certify not only suc-
cessful authentication { as do ordinary authentica-
tion servers { but also any other type of fact that
they store).
We enable the web browser to understand our au-
thorization protocol by implementing a local web
proxy. The proxy intercepts a browser’s request for
a protected page and then executes the authoriza-
tion protocol to generate the proof needed for ac-
cessing the page; the web browser sees only the re-
sult { either the page that the user attempted to
access or an appropriate failure message. Each user
has a unique cryptographic key held by the proxy.
Users’ identities are established by name-key certi(cid:12)-
cates stored on fact servers. The use of keys makes
it unnecessary to prompt the user for a password,
making the authorization process quicker and more
transparent to the user.
For tighter integration with the browser and bet-
ter performance, the proxy could be packaged as a
browser plugin. This would make it less portable,
however, as a di(cid:11)erent plugin would have to be writ-
ten for each type of browser; we did not feel this was
within the scope of our prototype implementation.
The web server part of our system is built around
an unmodi(cid:12)ed web server. The web server is PCA-
enabled through the use of a servlet which inter-
cepts and handles all PCA-related requests. The
two basic tasks that take place on the server’s side
during an authorization transaction are generating
the proposition that needs to be proved and verify-
ing that the proof provided by the client is correct.
Each is performed by a separate component, the
proposition generator and the checker, respectively.
Fact servers hold the facts a client must gather be-
fore it can construct a proof. Each fact is a signed
statement in the AF logic. We implement an o(cid:11)-
line utility for signing statements, which lets us use
a standard web server as a fact server. The fact
server can also restrict access to the facts it pub-
lishes with a servlet, in the same manner as the web
server.
Alice
Request midterm.html
Challenge
Bob
2.3 E(cid:14)ciency
The whole access-control process is completely
transparent to a user. To be practical, it must also
be e(cid:14)cient. Assembling the facts necessary to con-
struct a proof may involve several transactions over
the network. The actual construction of the proof,
the cryptographic operations done during the proto-
col, and proof checking are all potential performance
bottlenecks.
system is a prototype and not
Though our
production-quality, its performance is good enough
to make it acceptable in practice. Heavy use of
caching limits the need to fetch multiple facts over
the network and speculative proving makes it pos-
sible to shorten the conversation between the web
proxy and the servlet.
2.4 Generality
The best current web authorization mechanisms
have the characteristic that they are not limited to
providing access control for web pages; indeed, their
strength is that they provide a uni(cid:12)ed method that
also regulates access to other resources, such as (cid:12)le
systems. Our system, while implemented speci(cid:12)-
cally for access control on the web, can also be ex-
tended in this manner. The idea of proof-carrying
authorization is not speci(cid:12)c to web access control,
and the mechanisms we develop, while implemented
in a web proxy and a servlet, can easily be modi(cid:12)ed
to provide access control for other resources.
3
Implementation
Request ACL
"Registrar.CS101"
Proof
midterm.html
R
e
q
"
A
u
e
st c
lic
e 
˛
C
ert.
S
1
0
1
"
Cert. Authority(cid:13)
(Registrar)
Figure 1. Alice wants to read midterm.html.
In practice, caching makes most of the mes-
sages shown unnecessary.
3.1 Example and Overview
Let us consider the following scenario. Bob is a
professor who teaches CS101. He has put up a web
page that has the answers to a midterm exam his
class just took. He wants access to the web page to
be restricted to students in his class, and he doesn’t
want the web page to be accessible before 8 P.M.
Alice is a student in Bob’s class. It’s 9 P.M., and
she wants to access the web page (http://server/
midterm.html) that Bob has put up. Her web
browser contacts the server and requests the page
/midterm.html.
Upon receiving this request, the server constructs
a challenge (a statement in the logic) which must
be proven before the requested URL will be re-
turned. The server returns an \Authorization Re-
quired" message (Figure 1, step 2) which includes
the challenge, \You must prove: The server says
that it’s OK to read /midterm.html."
In this section we use the running example of Al-
ice trying to access midterm.html (Figure 1) to de-
scribe the implementation of our system in detail.
We describe each part of the system when it be-
comes relevant as we follow the example (the text
of which will be indented and italicized).
When Alice receives the response, she examines the
challenge and attempts to construct a proof. Un-
fortunately, the attempt fails: Alice has no idea
how to go about proving that it’s OK to read
/midterm.html. She sends another request to the
server: \Please tell me who can read /midterm.
 







html" (step 3).
The server’s reply (step 4) tells her that all the stu-
dents taking CS101 (the Registrar has a list of them)
may access the page, as long as it’s after 8 P.M. Still,
that does not give her enough information to con-
struct the proof. She contacts the Registrar (step
5), and from him gets a certi(cid:12)cate asserting, \un-