• Our analysis takes an in-depth look at two key aspects:
compliance, which checks whether a certified ROM actually
follows the rules, and security posture, which focuses on how
customizations may affect the security of the overall device.
• We identified numerous certified ROMs—and thus supposed
to have passed the test suites and compliant with all the
requirements dictated by Google through CDD— that actually
do not meet the security prerequisites.
• We highlight how vendor-specific components significantly lag
behind with respect to the security posture of the main AOSP,
and we uncover several techniques that, even though are not
strict violations of the guidelines, create security holes in AOSP
main safety nets (e.g., SELinux policies, software hardening).
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:06 UTC from IEEE Xplore.  Restrictions apply. 
88
In the spirit of open science, we will release the detailed results and
we will make our analysis pipeline available to the community.
II. LIFE OF A ROM
A. What is in a ROM
We use the term ROM to refer to a phone firmware based on the
Android operating system. Devices come with a pre-installed system,
called stock ROM, which is often provided in the form of an archive
(with different compression schemes), to allow users to restore
the device to factory settings. A ROM contains all the necessary
software components, policies, and configurations needed by the
system to boot and work properly. Among the software components
present in a ROM, we find, for example, the various executables
and system libraries, the pre-installed applications, all the scripts
necessary for the system to be configured correctly at boot (Android
Init Script), and a series of security policies (such as SELinux and
SECCOMP) intended to make the system safer. All these compo-
nents are organized in a set of partitions. The first partition common
to all systems is the boot partition, which contains the Linux kernel
image. Then, depending on the Android version used by the vendor
as the base for its system, the partition layout, and the filesystem
may vary. For instance, if the system is based on an Android version
before 8.0 (SDK 26), all these components are likely placed inside
a single /system partition. Otherwise, if the device is based on
an Android version equal or greater than 8.0 and has been subject to
the re-architecture of Project Treble, all the customizations made by
the vendor are delegated to a separate /vendor partition. As we
already explained, this separation allows for a more straightforward
application of the security patches provided by Google. Unfortu-
nately, our study shows that in practice, this is often not the case.
B. ROM Customization
The process of creating an Android-based system requires
numerous steps. First, the vendor must decide which version of
Android to use as the basis for its system. Once the version (and
therefore its SDK level) has been decided, the vendor proceeds to
fork the corresponding tagged branch from the official repositories
of the Android Open Source Project.
A counter-intuitive fact is that a single Android version (e.g.,
Android 9, codename Pie) might have multiple tags to use as base
image: for example, just for the Android Pie, Google released 47
different base images at different points in time [9]. Hence, a vendor
that bases its custom Android system on Android Pie can decide
which base image to use across those 47 different versions officially
provided by Google. Each of these images might differ from several
aspects: a newer release might provide some fix for disclosed vulner-
abilities or other usability issues, introduce new binaries and services,
or change the default configuration for a specific component.
Once a vendor obtains a base image, it then applies customization
and modification to the entire system, either by introducing new
components (e.g., new binaries and services) or modifying core
services. Changes are not limited to user-space software components
only. Typically, the vendor also inserts kernel components into the
system (such as drivers for custom peripherals) and can also make
changes to security policies or init scripts.
When the vendor has completed the system modification process
and is ready to market its device, it can decide whether it wants
the device to become an Android Google Mobile Services certified
device or to remain a generic device built on top of the AOSP. If
the vendor wants to use the Android brand on its device, it must
request a certification from Google. Having this certification also
allows the vendor to include all Google apps within its ROM, such
as GMail, or Google Maps. Depending on the type of device that
the vendor wants to market, with or without a Google license, the
vendor is required to pass a series of tests, which we illustrate next.
C. Compliance Checks and Requirements
We now present the different types of tests vendors must pass
to have a device compatible with AOSP or the GMS certification
by Google.
To release an Android-compatible device, vendors must comply
with the guidelines defined in the Android Compatibility Definition
Document (CDD). The CDD enumerates all the requirements
that must be satisfied by a vendor to have a system compatible
with a given version of Android. For each new Android release,
Google maintains and publishes a new CDD, where they define
the new guidelines for several aspects, like compatibility with the
multimedia framework or with the hardware. Security also plays
a crucial role in the CDD that, from its first edition, contains an
entire chapter dedicated to the Security Model Compatibility.
If the vendor wants instead to obtain a Google certification and
brand its device as Android, it must pass numerous tests aimed at
analyzing and verifying first the compatibility with AOSP, but also
the security of the whole system. The first class of tests is defined
by the Compatibility Test Suite, a series of tests aimed at ensuring
that the device is entirely compatible with AOSP. Many of the tests
performed in this test suite verify that the requirements defined in
the CDD are respected.
If the vendor wants its devices to include all the Google
applications, it must also comply with the GMS Requirements Test
Suite (GTS): once passed, these tests allow the vendor to obtain
the Google license for their apps. If the vendor’s system is based on
a version of Android redesigned with Project Treble, the approval
process requires the vendor to pass another series of tests, named
Vendor Test Suite (VTS). The VTS consists of a set of frameworks
and test cases designed to improve the robustness, reliability, and
compliance of the Android system (e.g., Hardware Abstraction
Layers and libraries) and low-level system software like the OS
kernel. All these tests are run by the device manufacturer [10]
thanks to Tradefed [11], a continuous test framework designed
for running tests on Android devices. If all tests pass correctly,
the device is considered compliant with the CDD and with all the
security and compatibility requirements defined by Google.
III. ROM ANALYSIS FRAMEWORK
In this section, we present an overview of our ROM analysis
framework and we discuss how we extract different security-relevant
information, such as binary security settings, SELinux policies,
init scripts, and kernel security settings.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:06 UTC from IEEE Xplore.  Restrictions apply. 
89
A. Architecture Overview
Given a ROM as input, our framework automatically detects the
compression schemes and the filesystem type, and it unpacks the
ROM for the analysis. Once the ROM is unpacked, the system then
proceeds by identifying the AOSP tag used by the vendor to build
the firmware. This step is fundamental to perform our analysis.
In fact, the process of identifying how the vendor customized a
given ROM can be seen as a differential analysis of the ROM
with respect to the AOSP baseline that the vendor selected when
customizing its version. This phase is fundamental when trying to
understand whether a vendor customization introduced an error, a
misconfiguration, or a new vulnerability, or whether the problem
was already present in the original AOSP code.
Once our system identifies the starting AOSP tag, it then clones
and compiles the corresponding repository to build a reference
image on top of which it can perform the differential analysis. This
process is repeated for each ROM.
Finally, the system extracts information related to binaries and
libraries (ELF), SELinux policies, init scripts, and Linux kernel
configurations. Each of these components is handled by an ad-hoc
plugin, which we discuss in detail in the upcoming subsections. The
entire procedure takes approximately 20 minutes for each ROM.
B. Tag Identification
Finding the right base image (identified by a git tag) used by
a vendor as a starting point for its customization is crucial for our
work. Unfortunately, identifying the base image used by a given
ROM is not always a straightforward process as there are often
many different base images for each “main” version of Android.
This section discusses the various techniques and heuristics we
developed to pinpoint the base image used by a given ROM.
During the building process of a system image, the build system
adds a large amount of information that may help recover the exact
git tag forked by the vendor. However, since the vendor controls the
entire building system, this information might—and, in fact, often
is—removed entirely.
In case the vendor did not modify the build system, the ROM
usually includes a Build ID that uniquely identifies the starting base
image. The format of this identifier may change across different
Android versions, and it resides in the ro.build.id property
of the build.prop file. Therefore, we built a mapping between
Build IDs and base images, starting from the official Android
documentation [9]. This mapping shows that, for example, a Build
ID equal to NOF27B corresponds to Android Nougat release 25
(android-7.1.1_r25).
including
However, if the vendor modified the build system and stripped
this information, the identification becomes more challenging. In
these cases, we adopt different strategies. First, we look at different
values
the ro.build.description property
(that may still contain the original Android build identifier) and
the ro.com.google.gmsversion property (which, when
combined with the ro.build.version.sdk value, can be
used to pinpoint the base image). It is important to note that this
value should always be present when the vendor obtained the GMS
certification. However, there is no guarantee that the vendor obtained
this certification, and we also found ROMs that contain GMS apps
but that however did not include a gmsversion property.
If none of these pieces of information is available, we rely
on the combination of two properties that are always included:
ro.build.version.sdk (i.e.,
the Android version) and
ro.build.date.utc (i.e., the build date). By combining
these two values, we can determine the “best” candidate to be
considered the base image. In particular, we first list all the AOSP
tags associated with the target Android SDK version, and we
then identify the tag with the nearest creation timestamp.
We note that a vendor cannot easily modify these two final values,
because that would introduce usability problems: changing the
sdk value might introduce undefined and unexpected behavior
both from the system and the apps, while changing the build
date might introduce issues when dealing with system updates
(e.g., anti-rollback protections might use this information to avoid
booting older firmware [12]).
As explained in Section IV, this process worked well in practice.
Moreover, even if some errors might have occurred, our analysis
is not particularly sensitive to small imprecisions.
C. Analysis of Binary Customization
We start our analysis by looking at the binaries (both ELF
executables and APK’s native libraries) contained in the ROM. This
is particularly important because most of the critical bugs are found
within these binaries components, as they are created by using
unsafe languages (e.g., C, C++). Moreover, customizations have
been the root cause of several recent critical 0-click bugs, e.g., those
recently reported by Google Project Zero’s in the (custom) Skia
component of Samsung devices [2].
In this phase, we check how customizations affect three main
aspects related to binaries. First, we focus on security hardening
techniques: we check whether vendors introduced customizations
that lower the security posture of existing AOSP binaries. Second,
we check whether the vendor introduced new functionality by
adding new binaries or by modifying existing ones (we check for
modifications of these binaries by inspecting ELF metadata such
as the symbol table). Third, we check how the security posture of
new binaries compares to exiting AOSP binaries and settings.
D. Analysis of SELinux Policies
Security-Enhanced Linux (SELinux) is a Mandatory Access
Control (MAC) system developed by the NSA and Red-Hat and
publicly released in December 2000.
SELinux policies are used to define rules that a process should fol-
low. More precisely, rules apply to contexts (each process belongs to
a context) and can be very fine grained: in fact, every resource on the
system (e.g., files, sockets) is labeled, and rules can specify access
policies for each of them. For instance, a rule can indicate that a pro-
cess in context X is allowed to open a network connection. SELinux
follows the principle of least privilege: if no rule grants a capability
C to a context X, then X does not have access to that capability.
SELinux policies became partially enforced in Android 4.3 and
fully enforced in Android 5. However, during the years, SELinux
has proved to be at the same time a powerful exploit mitigation [13],
but also the direct cause of several critical security issues due
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:28:06 UTC from IEEE Xplore.  Restrictions apply. 
90
to vendor customizations [14]. Indeed, vendors must customize
SELinux policies as every new file (including those introduced by
the vendor) need to be appropriately labeled, and new rules need to
be introduced to give proper access to the right contexts. However,
these customizations may also have security repercussions. For
example, since base AOSP SELinux can be quite restrictive, vendors
may be tempted to relax the policies and somehow circumvent the
safety nets implemented by AOSP. To give an extreme example:
AOSP defines several “never allow” SELinux rules, which are rules
that tell the SELinux compiler “refuse to compile if a different rule
is violating it”: We found several ROMs with customized SELinux
policies that violate base AOSP rules: this implies that the vendor
must have commented out the problematic “never allow” rule
instead of redesigning their customization more safely.
Our analysis framework first extracts all customizations to the
base SELinux policy and then inspects them to identify several
problematic patterns, like the one discussed above.
E. Analysis of Init Scripts
Unlike other Linux systems, Android uses its initialization
process. Android init scripts are textual files with the .rc
extension and they are written in a dedicated language, namely the
Android Init Language [15]. During the years, this component has
been subject to several attacks [16]. Most of the vulnerabilities were
introduced by third-party customizations, and, most of the time, their
exploitation allowed a local attacker to escalate privileges to root.
Init scripts are loaded at boot, just after the kernel initialization,
and play a crucial role in the Android system setup and bootstrap.
Default AOSP init scripts are located in the /system/ directory,
while vendors can add custom scripts in the /vendor/ or
/odm/ folders.
Init scripts can specify the user/group the binary should be run
with, the Linux capabilities that should be granted, and the SELinux
context the program should be run with (by default, all init scripts
run within the init context).
Given the potential security consequences of
improper
customizations, our framework includes support for the analysis
of Android init script to study whether vendors customize default
AOSP init scripts or add new ones and to verify if the new services
are executed with appropriate user/group and Linux capabilities,
and as part of a “safe” SELinux context.
Unfortunately, our experiments show that vendors often
customize these scripts, and in some cases, significantly increase
the attack surface and leave the device vulnerable to remotely
exploitable bugs (with known CVEs).
F. Kernel Security Analysis
Kernel security has grown in importance in recent years as the
number of kernel security bugs reported for Android increased
almost ten times in only three years [8]. As a consequence, many
kernel hardening techniques were recently introduced. These are
so important that the CDD itself introduced a number of “must”
requirements in this area that a vendor needs to satisfy to brand its
devices as Android.
In Android ROMs, the kernel is usually provided in a binary form
within the boot.img file. The Vendor Test Suite implements
Fig. 1. SDK Distribution
checks for some of the CDD requirements, but unfortunately, they
are quite limited due to the binary-only format of the kernel.
To study the kernel’s security, our framework includes various
analyses that can extract several security-sensitive information and
test for additional CDD requirements. For each kernel, the system
first extracts its version, and all the information generally provided
within the Linux Kernel banner [17]. It then attempts to extract
the kernel build configuration options. If the kernel was compiled
with the CONFIG_IKCONFIG option, the required information
is easily accessible through the .config file. Otherwise, we
created a database that maps an ELF symbol to the kernel config
option. Our analysis then extracts symbols from the kernel image
(using a modified version of vmlinux-to-elf [18]) and
uses our mapping to infer several kernel config options used at
compilation time. It is worrisome to note that, even though this
approach does not support all kernel config options, it was sufficient
to identify ROMs that violated several CDD “must” requirements.
IV. DATASET CHARACTERIZATION
To perform our longitudinal analysis, we set out to build a dataset
of ROMs as comprehensive as possible. For what concerns the
official Google ROMs, we downloaded them from their official
website [19]. We downloaded the other vendors’ ROMs from
firmwarefile.com [20] and stockrom.net [21].
In
total, our dataset consists of 2,907 Android ROMs, which span