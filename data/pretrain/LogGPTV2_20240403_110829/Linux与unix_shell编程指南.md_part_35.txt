退出。这里使用c a s e语句来决定采取何种操作。
如果用户希望退出，他或她可以选择 1，此时当前函数会以状态 1退出，而另一个清除进
程将会据此启动。如果用户并不希望退出，那么可以选择 2或不做任何选择，此时c a s e语句将
会使用户退回到脚本中原来的地方。在c a s e语句中一定要包含用户输入空字符串的情况。
下面的函数在收到信号后，将会向用户提供选择：
下面是完整的脚本：
加入java编程群：524621833
297
第2 6章 shell 工 具
下载
当上面的脚本运行时，只要在输入任何域时按下，就会得到一个选择：是继续
运行还是退出。
26.3.3 锁住终端
下面的脚本是另一个捕获信号的例子。该脚本名为 l o c k i t，它将使用一个连续不断的w h i l e
循环锁住终端。在该脚本中，t r a p命令捕捉信号2、3和1 5。如果一个用户试图中断该脚本的运
行，将会得到一个不成功的提示。
在脚本初次执行时，将会被提示输入一个口令。在解锁终端时没有任何提示，可以直接
输入口令并按回车键。该脚本会从终端读入所输入的口令，并与预先设置的口令做比较，如
果一致就解锁终端。
如果忘记了自己的口令，那么只好登录到另一个终端上并杀死该进程。在本例中没有对
口令的长度加以限制—这完全取决于你。
如果你从另外一个终端上杀死了该进程，当再次回到这个终端时，可能会遇到终端设置
问题，例如回车键不起作用。这时可以试着使用下面的命令，这样可以解决大部分问题。
$ stty sane
下面就是该脚本。
加入java编程群：524621833
298
第五部分 高级s h e l l编程技巧
下载
下面是l o c k i t脚本运行时的输出：
接着屏幕就被清除。如果按回车键或其他错误的口令，该脚本将会输出：
现在输入正确的口令：
现在又回到命令提示符下了。
26.3.4 忽略信号
在用户登录时，系统将会执行/ e t c / p r o f i l e文件，根用户不希望其他普通用户打断这一进程。
他通常通过设置t r a p来屏蔽信号1、2、3和1 5，然后在用户读当天的消息时重新打开这些信号。
最后仍然回到屏蔽这些信号的状态。
在编写脚本时也可以采用类似的办法。在脚本运行的某些关键时刻，比如打开了很多文
加入java编程群：524621833
299
第2 6章 shell 工 具
下载
件时，不希望该脚本被中断，以免破坏这些文件。通过设置 t r a p来屏蔽某些信号就可以解决这
个问题。在这些关键性的处理过程结束后，再重新打开信号。
忽略信号的一般格式为（信号9除外）：
trap""signal no:(s)
注意，在双引号之间没有任何字符，为了重新回到捕捉信号的状态，可以使用如下的命
令：
trap"do something" signal no:(s)
下面我们来总结一下上述方法。
trap ""1 2 3 15：忽略信号。
关键性的处理过程
trap"my_exit" 1 2 3 15：重新回到捕捉信号的状态，在捕捉到信号后调用 m y _ e x i t函数。
下面就是一个这样的例子，其中的“关键”过程实际上是一个 w h i l e循环，但它能够很好
地说明这种方法。在第一个循环中，通过设置 t r a p来屏蔽信号，但是在第二个例子中，又回到
捕捉信号的状态。
两个循环都只数到6，不过在循环中使用了一个s l e e p命令，这样就可以有充分的时间来实
验中断该循环。
下面就是脚本。
加入java编程群：524621833
300
第五部分 高级s h e l l编程技巧
下载
在上面的脚本在运行时，如果我们在第一个循环期间按下 ，它不会有任何反应，
这是因为我们通过设置t r a p屏蔽了信号；而在第二个循环中由于重新回到捕捉信号的状态，按
下就会调用m y _ e x i t函数。
当脚本捕获到信号时，通过使用t r a p命令，可以更好地控制脚本的运行。捕获信号并进行
处理是一个脚本健壮性的标志。
26.4 eval
e v a l命令将会首先扫描命令行进行所有的置换，然后再执行该命令。该命令适用于那些一
次扫描无法实现其功能的变量。该命令对变量进行两次扫描。这些需要进行两次扫描的变量
有时被称为复杂变量。不过我觉得这些变量本身并不复杂。
e v a l命令也可以用于回显简单变量，不一定是复杂变量。
解释e v a l命令是怎么回事的最好办法就是看几个例子。
26.4.1 执行含有字符串的命令
我们首先创建一个名为t e s t f的小文件，在这个小文件中含有一些文本。接着，将 cat testf
赋给变量M Y F I L E，现在我们e c h o该变量，看看是否能够执行上述命令。
现在我们将cat testf赋给变量M Y F I L E。
$ MYFILE“= cat test”f
加入java编程群：524621833
301
第2 6章 shell 工 具
下载
如果我们e c h o该变量，我们将无法列出t e s t f文件中的内容。
让我们来试一下e v a l命令，记住e v a l命令将会对该变量进行两次扫瞄。
从上面的结果可以看出，使用e v a l命令不但可以置换该变量，还能够执行相应的命令。第
一次扫描进行了变量置换，第二次扫描执行了该字符串中所包含的命令 cat testf。
下面是另一个例子。一个名为C AT _ PA S S W D的变量含有字符串“cat /etc/passwd | more”。
eval 命令可以执行该字符串所对应的命令。
e v a l命令还可以用来显示出传递给脚本的最后一个参数。现在来看下面的这个例子。
在运行上述脚本时，我们会看到如下的结果（你所看到进程号可能会不一样）：
在上面的脚本中，e v a l命令首先把$ $ #解析为当前s h e l l的参数个数，然后在第二次扫描时
得出最后一个参数。
26.4.2 给每个值一个变量名
可以给一个值一个变量名。下面我对此做些解释，假定有一个名为 d a t a的文件：
你希望该文件中的第一列成为变量名，第二列成为该变量的值，这样就可以：
怎样才能做到这一点呢？当然是使用e v a l命令。
加入java编程群：524621833
302
第五部分 高级s h e l l编程技巧
下载
我们用d a t a文件的第一行来解释上述脚本的执行过程，该脚本读入“ P C”和“4 8 6”两个
词，把它们分别赋给变量N A M E和T Y P E。E v a l命令的第一次扫描把N A M E和T Y P E分别置换
为“P C”和“4 8 6”，第二次扫描时将P C作为变量，并将“4 8 6”作为变量的值。
下面是运行上述脚本的结果：
e v a l命令并不是一个在脚本中很常见的命令，但是如果需要对变量进行两次扫瞄的话，就
要使用e v a l命令了。
26.5 logger命令
系统中含有相当多的日志文件。其中的一个日志文件叫作 m e s s a g e s，它通常位于/ v a r / a d m
或/ v a r / l o g目录下。一个名为s y s l o g的配置文件可以用来定义记录在m e s s a g e s文件中的消息，这
些消息有一定的格式。如果想知道系统中的相应配置，可以查看 / e t c / s y s l o g . c o n f文件。该文件
中包含了用于发送各种不同类型消息的工具及它们的优先级。
这里我们并不想深入探讨U N I X和L I N U X是如何向该文件中记录信息的。我们现在只要知
道这些消息有不同的级别，从信息性的消息到关键性的消息。
还可以使用l o g g e r命令向该文件发送消息。在使用该命令之前，最好查阅连机手册，因为
在不同供应商所提供的操作系统上该命令的语法也有所不同。
不过，由于这里只涉及到信息性的消息，因此不必担心下面的命令不安全。
你可能会出于下列的原因向该文件中发送消息：
• 在某一个特定的时间段出现的访问或登录。
• 你的某些执行关键任务的脚本运行失败。
• 监控脚本的报告。
下面是/ v a r / a d m / m e s s a g e s文件的例子。在系统上所看到的相应文件可能和下面的例子有
少许差别。
l o g g e r命令的一般形式为：
logger -p -I message
加入java编程群：524621833
303
第2 6章 shell 工 具
下载
其中：
- p：为优先级，这里只涉及到提示用户注意的优先级，这也是缺省值。
- i：在每个消息中记录发送消息的进程号。
26.5.1 使用logger命令
可以使用如下命令：
可能需要等几分钟才能看到该消息被记录到m e s s a g e文件中。
如你所见，发送这一消息的用户也被记录了下来。
现在来创建一个小小的脚本，用它来记录当前系统中的用户数。该脚本可以在一天的时
段中记录系统的使用率。只要把它放进c r o n t a b文件中，使它每3 0分钟运行一次即可。
运行下面的脚本。
$ test_logger
现在来看看m e s s a g e文件的末尾：
26.5.2 在脚本中使用logger命令
向日志文件中发送信息的一个更为合理的用途就是用于脚本非正常退出时。如果希望向
日志文件中发送消息，只要在捕获信号的退出函数中包含 l o g g e r命令即可。
在下面的清除脚本中，如果该脚本捕获到信号 2、3或1 5的话，就向该日志文件发送一个
消息。
加入java编程群：524621833
304
第五部分 高级s h e l l编程技巧
下载
这样只要看一下这个日志文件就可以知道脚本的运行结果是否正常。
除了使用l o g g e r命令对一些关键性的脚本处理过程做日志外，我还用它来记录使用调制解
调器连接系统的用户。下面的一段脚本记录了从串口 t t y 0和t t y 0 2连接到系统中的用户。这部分
代码来自于我编写的一个/ e t c / p r o f i l e文件。
加入java编程群：524621833
305
第2 6章 shell 工 具
下载
当希望在系统全局的日志文件中记录信息的时候， l o g g e r命令是一个非常好的工具。
26.6 小结
理解信号和对信号的捕获可以使脚本的退出更为完整。通过在系统日志文件中记录信息，
你或系统管理员就能够更容易地发现存在的问题。
加入java编程群：524621833
下载
第27章 几个脚本例子
本章包含了我最常用的几个脚本。你会发现它们都相当短小而简单。这就是脚本的一个优
点；它不是很长、很复杂，只需很短的代码就能够完成相当多的功能，可以节约大量的时间。
本章中包含以下内容：
• 各种脚本的例子。
我本来打算在本章中提供一个通用的数据验证数据库脚本，但是由于它超过了 5 0 0行，我
觉得编辑肯定不会同意把它收入书中。那个脚本几年前只有几行，后来由于不断增加功能，
变成了现在这么长。最后，我选择了如下六个脚本作为例子：
p i n g a l l：一个按照/ e t c / h o s t s文件中的条目逐一p i n g所有主机的脚本。
b a c k u p _ g e n：一个通用的备份脚本，能够加载缺省设置。
d e l . l i n e s：一个引用s e d命令的脚本，能从文件中删除若干行。
a c c e s s _ d e n y：一个能够阻止某些特定用户登录的工具。
l o g r o l l：一个能够清除超过某一长度的日志的工具。
n f s d o w n：一个快速u n m o u n t所有n f s文件系统的工具。
27.1 pingall
几年前我写了一个名为p i n g a l l的脚本在夜间运行，把它作为常规报告脚本的一部分。它
能够按照/ e t c / h o s t s文件中的条目逐一p i n g所有的主机。
该脚本列出/ e t c / h o s t s文件并查找其中的非注释行（不以 #开头的行）。然后使用一个w h i l e
循环读入所有的行，接下来使用a w k分析出每行的第一个域，并把它赋给变量 A D D R。最后使
用f o r循环逐一p i n g相应的地址。
下面就是该脚本。
上述脚本可以很容易地进行扩展，加进其他网络报告工具。
27.2 backup_gen
在本章中我选择了这个脚本并不是因为它展示了如何备份目录，而是因为它是一个同其