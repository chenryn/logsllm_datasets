### 26.3 使用 `case` 语句进行用户选择

在以下示例中，我们使用 `case` 语句来决定用户希望执行的操作。如果用户选择退出（输入 `1`），当前函数将以状态 `1` 退出，并启动一个清理进程。如果用户不希望退出（输入 `2` 或不做任何选择），则 `case` 语句将使用户返回到脚本中的原位置。需要注意的是，在 `case` 语句中必须包含用户输入空字符串的情况。

#### 示例脚本
```bash
#!/bin/bash

function exit_or_continue() {
    echo "请选择操作："
    echo "1. 退出"
    echo "2. 继续"
    read -r choice

    case $choice in
        1)
            echo "退出程序..."
            exit 1
            ;;
        2|'')
            echo "继续运行..."
            ;;
        *)
            echo "无效的选择，请重新选择。"
            exit_or_continue
            ;;
    esac
}

# 当收到信号时，调用 exit_or_continue 函数
trap 'exit_or_continue' SIGINT

echo "程序正在运行..."
while true; do
    sleep 1
done
```

当上述脚本运行时，用户可以在任何时间按下 `Ctrl+C` 来触发 `SIGINT` 信号，从而调用 `exit_or_continue` 函数并进行选择。

### 26.3.3 锁住终端

下面的脚本 `lockit` 是另一个捕获信号的例子。该脚本通过一个无限循环锁住终端，并使用 `trap` 命令捕获信号 `2`、`3` 和 `15`。如果用户试图中断脚本，将会收到一个失败提示。初次运行时，用户需要输入密码来解锁终端。如果忘记密码，可以登录到另一个终端上并杀死该进程。注意，这可能会导致终端设置问题，此时可以使用 `stty sane` 命令来恢复。

#### 示例脚本
```bash
#!/bin/bash

PASSWORD="secret"

function unlock_terminal() {
    read -s -p "请输入密码: " input_password
    if [ "$input_password" == "$PASSWORD" ]; then
        echo "解锁成功！"
        exit 0
    else
        echo "密码错误！"
    fi
}

trap 'unlock_terminal' 2 3 15

while true; do
    echo "终端已锁定..."
    sleep 1
done
```

### 26.3.4 忽略信号

在某些情况下，如打开多个文件时，可能不希望脚本被中断。可以通过设置 `trap` 来忽略某些信号，然后在关键处理过程结束后重新启用这些信号。

#### 示例脚本
```bash
#!/bin/bash

function my_exit() {
    echo "捕获到信号，退出程序..."
    exit 0
}

# 忽略信号 1, 2, 3, 15
trap '' 1 2 3 15

echo "开始关键处理过程..."
for i in {1..6}; do
    echo "计数: $i"
    sleep 1
done

# 重新启用信号
trap 'my_exit' 1 2 3 15

echo "继续其他处理过程..."
for i in {1..6}; do
    echo "计数: $i"
    sleep 1
done
```

### 26.4 `eval` 命令

`eval` 命令用于对命令行进行两次扫描，适用于需要多次解析的变量。以下是一些示例：

#### 示例脚本
```bash
#!/bin/bash

MYFILE="cat testf"
echo "直接输出 MYFILE: $MYFILE"

# 使用 eval 执行 MYFILE 中的命令
eval $MYFILE

CAT_PASSWD="cat /etc/passwd | more"
eval $CAT_PASSWD

# 显示传递给脚本的最后一个参数
eval "echo \${\$\#}"
```

### 26.5 `logger` 命令

`logger` 命令用于向系统日志文件发送消息。以下是一些示例：

#### 示例脚本
```bash
#!/bin/bash

# 向系统日志发送一条消息
logger -p user.notice -t TEST_LOGGER "这是一个测试消息"

# 记录当前系统中的用户数
logger -p user.notice -t USER_COUNT "当前用户数: $(who | wc -l)"
```

### 26.6 小结

理解和捕获信号可以使脚本的退出更加完整。通过在系统日志文件中记录信息，可以更容易地发现和解决问题。

### 第27章 几个脚本例子

本章提供了一些常用的脚本示例，包括：

- `pingall`: 按照 `/etc/hosts` 文件中的条目逐一 ping 所有主机。
- `backup_gen`: 一个通用的备份脚本，能够加载默认设置。
- `del.lines`: 从文件中删除若干行。
- `access_deny`: 阻止特定用户登录。
- `logroll`: 清除超过某一长度的日志。
- `nfsdown`: 快速卸载所有 NFS 文件系统。

#### 示例脚本 `pingall`
```bash
#!/bin/bash

while read -r line; do
    if [[ ! $line =~ ^# ]]; then
        addr=$(echo $line | awk '{print $1}')
        ping -c 1 $addr
    fi
done < /etc/hosts
```

#### 示例脚本 `backup_gen`
```bash
#!/bin/bash

# 备份目录
tar -czf backup.tar.gz /path/to/directory
```

这些脚本虽然简短，但功能强大，能够显著提高工作效率。