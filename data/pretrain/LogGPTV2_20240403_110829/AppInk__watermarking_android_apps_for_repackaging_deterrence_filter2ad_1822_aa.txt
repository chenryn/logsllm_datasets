title:AppInk: watermarking android apps for repackaging deterrence
author:Wu Zhou and
Xinwen Zhang and
Xuxian Jiang
AppInk: Watermarking Android Apps
for Repackaging Deterrence
Wu Zhou †, Xinwen Zhang ‡, Xuxian Jiang †
†North Carolina State University
{wzhou2, xjiang4}@ncsu.edu
‡Huawei Research Center
PI:EMAIL
ABSTRACT
With increased popularity and wide adoption of smartphones and
mobile devices, recent years have seen a new burgeoning economy
model centered around mobile apps. However, app repackag-
ing, among many other threats, brings tremendous risk to the
ecosystem, including app developers, app market operators, and
end users. To mitigate such threat, we propose and develop a
watermarking mechanism for Android apps. First, towards au-
tomatic watermark embedding and extraction, we introduce the
novel concept of manifest app, which is a companion of a target
Android app under protection. We then design and develop a tool
named AppInk, which takes the source code of an app as input to
automatically generate a new app with a transparently-embedded
watermark and the associated manifest app. The manifest app can
be later used to reliably recognize embedded watermark with zero
user intervention. To demonstrate the effectiveness of AppInk in
preventing app repackaging, we analyze its robustness in defend-
ing against distortive, subtractive, and additive attacks, and then
evaluate its resistance against two open source repackaging tools.
Our results show that AppInk is easy to use, effective in defending
against current known repackaging threats on Android platform,
and introduces small performance overhead to end users.
Categories and Subject Descriptors K.6.5 [Man-
agement of Computing and Information Systems]: Security and
protection – Invasive software
General Terms Security; Algorithms
Keywords:
Watermarking; App Protection; Smartphone Security
Mobile Application; App Repackaging; Software
1.
INTRODUCTION
With the unprecedented adoption of smartphones in consumer
and enterprise users, a large number (and a wide variety) of mobile
applications (apps) have been developed and installed to extend the
capability and horizon of mobile devices. These apps in return fos-
ter an emerging app-centric business model and drive innovations
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIA CCS’13, May 8–10, 2013, Hangzhou, China.
Copyright 2013 ACM 978-1-4503-1767-2/13/05 ...$15.00.
across personal, social, and enterprise ﬁelds. At the same time, the
wild proliferation of mobile apps has introduced serious risks to the
stakeholders in the ecosystem. Particularly, app repackaging has
been considered as a major threat to both app developers and end
users. Through app repackaging, malicious users can breach the
revenue stream and intellectual property of original app authors,
and plant malicious backdoors or payloads to infect unsuspecting
mobile users. Recent studies have shown that app repackaging is a
real threat to both ofﬁcial and third-party Android markets [52,53],
and regarded as one of the most common mechanisms leveraged
by Android malware to spread in the wild [54]. Investigation has
also shown that app repackaging presents serious vulnerability to
mobile banking [27].
Facing the prevalent risks brought by app repackaging, we are in
a desperate need of a reliable, efﬁcient, and easy-to-use mechanism
to detect repackaged apps and prevent their propagation. Android
package obfuscation tools such as Proguard [29] and DexGuard
[25] have been provided by Google and other companies to confuse
attackers when they are in the process of repackaging an app.
However obfuscation can only increase the difﬁculty of reverse
engineering Android apps, and cannot stop determined attackers
from achieving their purposes through manual analysis, laborious
experiments, and strong persistence. To defend against Android
app piracy and repackaging, Google has introduced a tool library
named license veriﬁcation library to protect app developers from
having their apps stolen by third parties [17]. Other app market
operators (such as Amazon and Verizon) also provide their own
digital right management (DRM) options for app developers which
can be applied to prevent apps from being copied and pirated [41].
However, these mechanisms are hard to deploy correctly [13] and
also easy to crack [30–32]. Recently, researchers have introduced
various techniques to detect repackaged apps on a large scale [8,16,
42, 52, 53]. However, these mechanisms usually cannot detect app
repackaging online and in real-time. For these reasons, repackaged
apps have usually been widely distributed before being detected.
To overcome the above weaknesses, we propose to embed soft-
ware watermarks dynamically into the running state of an Android
app to represent the author or developer’s ownership. For veriﬁ-
cation, an authorized party can extract the embedded watermark
by running the app with a speciﬁc input in a dedicated environ-
ment, e.g., a customized emulator. When the extracted watermark
matches the one provided by the developer, the verifying party
(e.g., an arbitrator) can conﬁrm the ownership of the original de-
veloper even when the app is repackaged by another publisher. The
proposed watermarking mechanism should be resistant to manipu-
lation by common static and automated attacks, therefore making
it hard for an attacker to remove the original embedded watermark
or embed his own watermark.
A desirable solution needs to meet two requirements: watermark
embedding should be readily integrated into current app devel-
opment practice, and watermark extraction should be convenient
for the authorized verifying party to perform. To fulﬁll these two
requirements, we introduce the concept of manifest app, which is a
companion app to the original app under protection. Basically the
manifest app encapsulates a speciﬁc input to drive the watermark-
protected app automatically, and thus eliminates the user interven-
tions needed in traditional watermark extraction. Based on the
manifest app, we design and implement a practical tool named
AppInk, which consists of four components: watermarking code
generation, automatic manifest app generation, watermark em-
bedding, and watermark extraction. By seamlessly integrating
these four components, AppInk presents an effective app protection
solution for both developers and other authorized verifying parties.
Speciﬁcally, to leverage AppInk to protect her own app, a developer
applies the ﬁrst three components of AppInk to the app’s source
code to generate two apps:
the watermark-protected app to be
released to the public; and the manifest app which is presented
on demand to an authorized party to verify the originality of the
watermark-protected app. Upon request, the verifying party will
run the manifest app in the watermark extractor (the fourth com-
ponent of AppInk), which automatically launches the app under
review and extracts the originally embedded watermark.
Two typical scenarios can leverage this process to detect unau-
thorized repackaged apps and prevent their propagation. The ﬁrst
scenario has a central authority (e.g., the app market operator) to
review each submitted app to verify its originality before accepting
it for publication. For that purpose, each app publisher submits
the manifest app along with the app under review (publishers
who cannot submit a companion manifest app are most likely
not original developers). The app market operator then runs the
watermark extracting algorithm, using the manifest app provided
by the publisher to drive the app under review.
The second scenario has a third-party arbitrator, who inspects
the evidence of app ownership to resolve dispute upon request.
In this scenario, when an app author suspects that one app is a
repackaged version of her own, she can run the suspect app inside
the watermark recognizer, using her own manifest app to feed input.
If the watermark extracted from the suspect app is the same as the
watermark from her own app, she can submit this as evidence to
prove that the suspect app is a repackaged version of her own app.
Within this scenario, AppInk provides an effective mechanism to
prevent the propagation of repackaged apps across different app
markets.
To demonstrate the effectiveness of AppInk in deterring app
repackaging, we analyze its robustness against general watermark-
targeted attacks, including distortive, subtractive, and additive at-
tacks. We also study its resistance against two open source repack-
aging tools (Proguard [29] and ADAM [51]). Our results show
that AppInk is effective in defending against common automatic
repackaging attacks. Our performance evaluation indicates that
an embedded watermark introduces only a small overhead for end
users.
In summary, this paper makes the following contributions::
• First, we design a complete dynamic graph based watermark-
ing mechanism for Android apps, which can be used to detect
and deter further propagation of repackaged apps. To the best
of our knowledge, it is the ﬁrst watermarking mechanism for
Android apps.
• Second, we introduce the concept of manifest app and design
a series of automatic processes to make the watermarking
mechanism integratable into current app development prac-
tice and also conveniently deployable for arbitrators.
• Third, we implement a prototype tool named AppInk and
evaluate it against two open source repackaging tools, and
demonstrate that it is effective in defending against com-
monly available automatic attacks.
The rest of this paper is organized as follows. We present
the paper overview in Section 2, describe the AppInk design in
Section 3, and present its prototype implementation in Section 4.
After that, we present the robustness analysis of AppInk and eval-
uate it against real world repackaging attacks in Section 5, and
discuss the system’s limitations and suggest possible improvements
in Section 6. Lastly, we describe related work in Section 7 and
conclude this paper in Section 8.
2. OVERVIEW
2.1 Problem Statement
App repackaging refers to disassembling one app, making some
changes (to the code, data, or simply the signing key inside the
original app), and rebuilding the modiﬁed components into a new
app. As a technical method, it can be used for benign purposes.
For example, ADAM [51] uses app repackaging to tweak malware
samples for the purpose of stress testing various Android anti-
virus tools. Aurasium [50] uses app repackaging to intercept an
app’s interaction with its underlying OS, aiming to enforce user-
speciﬁed security policies for the app. However, app repackaging is
more commonly used for surreptitious and malicious purposes. For
example, greedy publishers use app repackaging to replace existing
in-app advertisements or embed new ones to steal advertisement
revenues [8, 52, 53]. Malicious attackers use app repackaging
[42, 53, 54] to plant malicious backdoors or payloads into benign
apps.
Because it is relatively easy to reverse engineer Android apps
(which are mainly written in Java), app repackaging has been iden-
tiﬁed as a widespread practice in current diversiﬁed app distribution
channels [8, 16, 23, 42, 53]. As a result, it not only brings a lot of
damages to app authors (in terms of losing their monetary income
and intellectual property), but also causes tremendous risks to the
large community of mobile users and affects the burgeoning inno-
vative app economy. As concrete examples, severe vulnerabilities
have been found in mobile banking apps through app repackaging,
and serious doubt is cast on mobile banking security and feasibility
in general [27]. More recently, researchers have identiﬁed that
about 10% of Android apps available in popular third-party markets
are repackaged [53]. The latest investigation from the industry [48]
has reported that most of the popular mobile apps are beset by app
repackaging threat: 92 of the top 100 paid apps for Apple iOS, and
all of top 100 paid apps for Android were found to be hacked.
Facing the widespread propagation of the app repackaging threat,
effective security defenses are seriously lagging behind. The cur-
rent industrial practices are either too weak to deter determined at-
tackers from conducting repackaging attacks, or too complex to be
deployed properly. For example, app developers are encouraged to
use obfuscation to protect their apps, but the introduced confusion
is usually not strong enough to prevent determined attackers from
achieving their goals [29]. App market operators (e.g., Google)
have provided license veriﬁcation or DRM service to apps sub-
mitted to their stores, but automatic repackaging tools can work
around them easily [30–32]. Recently, researchers have begun
to tackle this problem, but most of the proposed solutions so far
focus on feasible mechanisms to detect repackaged apps after their
propagation [8, 16, 42, 53]. Considering the wide and severe impact
of app repackaging, an effective and robust mechanism is urgently
demanded to efﬁciently prevent and deter app repackaging in the
ﬁrst place.
2.2 Software Watermarking
Software watermarking has been studied extensively to defend
against the piracy of desktop software [4, 6, 35, 37, 39]. Since
the processes of mobile app repackaging and desktop software
piracy are similar, we believe that software watermarking can be
a promising technique in deterring app repackaging.
In general,
watermarking software involves two steps: ﬁrst a watermark, typ-
ically a number or a message string known only to the author or
publisher, is embedded into the target software in a speciﬁc way
such that it does not affect the running behaviors of the origi-
nal app and is difﬁcult to remove without modifying the original
app semantic; then, a recognition technique is used to extract the
original watermark from the software. The matched watermarks
verify that this software package belongs to the original developer
or publisher. Depending on how the watermark is embedded and
extracted, there are static and dynamic watermarking methods.
Static watermarking embeds the watermark into the code or data of
a package and extracts the watermark without executing the code;
dynamic watermarking embeds the watermark into the execution
state of the target software, and extracts the watermark during
runtime.
Regardless of which method is used, it is desirable that a water-
mark embedded in a software package should be robust to various
well-known attacking techniques, especially distortive attacks –
to apply semantic preserving transformation on the watermarked
code to modify the embedded watermark, subtractive attacks –
to remove complete or partial watermark, and additive attacks –
to add attacker’s own watermark and confuse the arbitrator on
resolving ownership dispute. Typically, dynamic watermarking has
a stronger resistance against these attacks than static watermarking,
and it is used in our approach to embed and verify the ownership of
a speciﬁc Android app package.
2.3 Challenges of Watermarking Android Apps
There are several key challenges to incorporate dynamic water-
marking into current Android app development practice and make
it easily deployable by arbitrating parties.
Firstly, the state of the art dynamic Java watermarking tech-
niques need extensive intervention from developers to embed a
watermark. For example, SandMark [5] requires developer to
manually annotate source code to indicate where watermark can
be inserted, and to manually give input to drive the software when
embedding a watermark. These manual interventions make it
cumbersome to apply this technique in real practice and hard to
be made right.
Secondly, it is desirable to have automatic watermark recog-
nition so that it can handle thousands of apps with little human
effort in an online and realtime manner. To recover embedded
watermarks, SandMark leverages programmable Java Debug In-
terface [24] to access memory objects on the heap in order to
infer object reference relationships. However, there is no known
programmable debugging interface available on Android. Even
worse, manually providing input is required for watermark extrac-
tion phase as well. Obviously, this cannot scale to handle the
large number of watermark recognition requests for thousands of
Android apps submitted to current app markets on a daily basis.
Thirdly, Android apps, although mainly developed in Java lan-