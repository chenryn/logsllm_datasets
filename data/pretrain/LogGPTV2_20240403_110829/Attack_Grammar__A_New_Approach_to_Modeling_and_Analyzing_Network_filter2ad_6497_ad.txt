performed  manually 
the  network 
configuration is reasonable. 
to  make  sure 
firewall 
The simulation test is performed on a Windows XP 
platform  with  3.0GHz  Intel  Pentium  4  processor  and 
512MB  main  memory.  The  results  of  simulation  test 
are shown in table 3. The field test results substantiated 
the scalability analysis results. 
Table 3 Simulation Test Results 
Num of subnets
Num of Host 
clusters 
Num of 
vulnerabilities 
Num of stack 
alphabets 
Vulnerabilities
per host 
Reachability rate
Num of targets
Test 1
3
15 
20 
3 
0~5 
43.2%
1
0.031s 
Test 2 
5 
50 
20 
3 
0~5 
36.0% 
1 
5.45s 
Test 3
8
80 
20 
3 
0~5 
30.0%
2
43.28s 
20208 
2150619 
11659221 
0.001s 
0.031s 
0.25s 
19 
380 
735 
Time for 
construction 
Num of 
Productions 
after 
eliminating 
nullable 
Time for 
simplification 
Num of 
Productions after 
simplification 
6. Related work 
Previous researches can be roughly divided into two 
groups:  graph-based  approaches  and 
logic-based 
approaches.  But  some  researches  can  fit  into  both 
categories.  
Swiler et al [9, 10] developed one of the first graph-
based formalisms for analyzing network vulnerabilities. 
to  [10], 
the  NETSpa  system  [16]  also 
Similar 
constructs  the  full  attack  graph  which  makes  it  rather 
impractical  in  analyzing  large  network  because  full 
graphs grow combinatorially. A brilliant algorithm was 
proposed  by  Ammann  et  al  [17]  which  introduced  a 
monotonicity  assumption  [18]  and  used  to  develop  a 
polynomial  algorithm  with 
the  complexity  of 
proximately  O(N6).  The  monotonicity  assumption  is 
also identified in Jajodia et al [21], which described the 
Topological  Vulnerability  Analysis 
tool  whose 
scalability is O(N6) with respect to the number of hosts. 
Ammann  et  al  [19]  presented  an  O(N3)  algorithm  to 
determine  worst-case  paths  to  all  compromised  hosts. 
But 
suboptimal 
recommendation can be provided to the administrator. 
Lippmann  et  al  [3]  proposed  a  host-compromised 
graph  called  predictive  graph  with  the  construction 
complexity about  O(N3), but  only  shortest attack path 
to a target is shown. 
expense  was 
that  only 
the 
therefore 
Most  of  the  early  logic-based  approaches  are 
derived  from  model  checking.  Ritchey  and  Ammann 
[11]  proposed  the  use  of  model  checkers  to  generate 
attack paths for known exploits. Later work such as Jha 
et al [12] and Sheyner et al [14, 15] extended the use of 
model  checking 
to  analyze  attack  graphs  on 
complicated  networks.  Model  checking  does  not 
assume  monotonicity  and 
in 
scalability. MulVAL [20] proposed a monotonic, logic-
based approach which produces counterexamples for a 
given  security  policy.  They  represented  vulnerability 
information in Prolog and results imply the complexity 
is  between  O(N2)  and  O(N3),  but  only  separate  attack 
paths can be outputted. X. Ou et al [13] extends their 
previous  research  on  MulVAL  by  providing  an 
efficient graph generating algorithm. The complexity is 
proved to be O(N2logN). However, removing loops in 
the generated graph would have a run time about O(N4), 
which is indicated but not addressed in the paper. 
is  poor 
themselves 
the  “requires/provides”  model 
Many  other  researches  devoted 
to 
network  attack  modeling.  Templeton  and  Levitt  [22] 
first  proposed 
to 
describe  exploits  and  this  approach  has  been  used  by 
many other researchers in order to chain these exploits 
together. Languages such as LAMBDA [23] focus on 
description  of  detailed  attacks,  but  great  amount  of 
detailed  attack  specifications  are  needed  to  input 
manually 
the  approach  was  actually 
impractical.  Computation  of  reachability  problem  is 
addressed in Ritchey et al [24].  
therefore 
One of the most important applications of the attack 
grammar  is  to  correlate  IDS  alerts.  Most  previous 
researches  on  IDS  alerts  correlation  are  based  on 
dependencies  among  events  only,  such  as  Cuppens  et 
al [27] and Cheung et al [4].  In [27], the approach is to 
define  logical  rules  through  pre-conditions  and  post-
conditions.  In  [4],  the  approach  uses  a  bottom-up 
methodology  to  recognize  attack  scenario,  and  the 
drawback is the difficulty of designing detailed attack 
models or patterns for every attack. Moreover, due to 
lacking  of  global  view  of  network  attacks,  no  high 
level attack scenario is recognized. Ning et al [6] uses 
attack  graphs  to  represent  relationships  among  IDS 
events. The graph is constructed when the events occur. 
The  approach  proposed  in  [7]  is  one  of  the  few 
researches that use attack graphs to filter alerts. Attack 
graphs  are  generated  without  fixed  starting  point  and 
targets.  The  actual  start  and  end  of  an  intrusion  are 
indicated by alerts. 
7. Conclusion and future work 
In  this  paper,  we  have  proposed  a  grammar-based 
to  modeling  and  analyzing  multi-step 
approach 
network  attack  sequences.  Methods  for  modeling 
attacks  with  PDA  are  proposed  and  algorithms  for 
constructing,  simplifying  and  analyzing  the  attack 
grammars are demonstrated. The underlying purpose of 
the new approach is to conquer the limitations of using 
graphs  in  previous  researches.  However,  since  the 
algorithm  complexity  for  converting  attack  grammars 
to  attack  graphs  is  merely  linear  to  the  length  of  the 
grammar, it is also possible and instructive to construct 
attack  graphs  using  our  method.  One  possible  future 
work  might  be  finishing  our  tool  and  trying  out  the 
attack  grammar  on 
realistic  networks.  Another 
potential work is to combine our approach to existing 
IDS applications for alerts correlation. 
References 
[1]  K.  Ingols,  R.  Lippmann  and  K.  piwowarski,  “Practical 
Attack  Graph  Generation  for  Network  Defense”,  22nd 
Annual  Computer  Security  Applications  Conference, 
December, 2006. 
[2]  Common  vulnerabilities  and  exposures  dictionary. 
http://cve.mitre.org/. 
[3] R. P. Lippmann et al, “Validating and restoring defense in 
depth  using  attack  graphs”,  in  Proceedings  of  MILCOM 
2006, Washington, DC. 
[4] S. Cheung, U. Lindqvist, et al, “Modeling multistep cyber 
attacks for scenario recognition”, in Proceedings of the Third 
DARPA 
and 
Exposition (DISCEX III), pages 284–292, 2003. 
[5]  S.  Noel,  S.  Jajodia,  “Correlating  Intrusion  Events  and 
Building Attack Scenarios through Attack Graph Distances,” 
Proceedings  of 
the  20th  Annual  Computer  Security 
Application Conference (ACSAC04). 
[6]  P.  Ning,  D.  Xu,  C.  Healey,  R.  St.  Amant,  “Building 
Attack  Scenarios  through  Integration  of  Complementary 
Alert  Correlation  Methods”,  in  Proceedings  of  the  11th 
Information  Survivability  Conference 
213223
and  Distributed  System  Security 
Annual  Network 
Symposium, February, 2004. 
[7] Wang, L.,  Liu, A., Jajodia, S., “Using attack  graphs for 
correlating,  hypothesizing,  and  predicting  intrusion  alerts”, 
Computer communications, vol. 29, 2006. 
[8] Thomas A. S., Languages and machines, an introduction 
to the theory of computer science.  
[9]  C.  Phillips  and  L.  Swiler,  ”A  graph-based  system  for 
network-vulnerability  analysis”,  In  Proceedings  of  the  New 
Security Paradigms Workshop, pages 71–79, Charlottesville, 
VA, 1998. 
[10]  L.  Swiler,  C.  Phillips,  D.  Ellis,  and  S.  Chakerian, 
“Computer-attack  graph  generation  tool”,  in  Proceedings 
DISCEX ’01: DARPA Information Survivability Conference 
& Exposition II, pages 307–321, June 2001. 
[11] R. W. Ritchey, P. Ammann. “Using model checking to 
analyze network vulnerabilities”, in Proceedings of the 2000 
IEEE Symposium on Security and Privacy (Oakland 2000), 
pages 156–165, Oakland, CA, May 2000. 
[12] S. Jha, O. Sheyner, and J. Wing, “Two formal analyses 
of  attack  graphs”,  in  Proceedings  of  the  2002  Computer 
Security Foundations Workshop, pages 49–63, Nova Scotia, 
June 2002. 
[13] Xinming Ou, Wayne F. Boyer and Miles A. McQueen, 
“A  scalable  approach  to  attack  graph  generation”,  in 
Proceedings  of  the  13th  ACM  conference  on  computer  and 
communications security, Alexandria, Virginia, 2006. 
[14] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. Wing, 
“Automated  generation  and  analysis  of  attack  graphs”,  in 
Proceedings  of  the 2002  IEEE  Symposium  on  Security  and 
Privacy (Oakland 2002), Oakland, CA, May 2002. 
[15]  O.  Sheyner  and  J.  Wing,  “Tools  for  generating  and 
analyzing  attack  graphs”,  in  Proceedings  of  International 
Symposium  on  Formal  Methods  for  Components  and 
Objects, Lecture Notes in Computer Science, 2005. 
[16]  M.  Artz,  “NETspa,  a  network  security  planning 
architecture”,  Master’s  thesis,  Massachusetts  Institute  of 
Technology, 2002. 
[17] P. Ammann, D. Wijesekera, and S. Kaushik, “Scalable, 
graph-based network vulnerability  analysis”, in Proceedings 
the  9th  ACM  Conference  on  Computer 
and 
of 
Communications  Security,  pages  217–224,  ACM  Press, 
2002. 
[18]  S.  Noel  and  S.  Jajodia,  “Managing  attack  graph 
complexity  through  visual  hierarchical  aggregation”,  in 
Proceedings  of  the  2004  ACM  workshop  on  Visualization 
and data mining for computer security, pages 109–118, New 
York, NY, USA, 2004. ACM press. 
[19]  P.  Ammann,  J.  Pamula,  R.  Ritchey,  and  J.  Street,  “A 
host-based approach to network attack chaining analysis”, in 
ACSAC’05:  Proceedings  of  the  21st  Annual  Computer 
Security  Applications  Conference,  pages  72–84,  IEEE 
Computer Society, 2005. 
[20] X. Ou, S. Govindavajhala, and A. Appel, “MulVAL: A 
logic-based network security analyzer”, in Proceedings of the 
14th USENIX Security Symposium, pages 113–128, 2005. 
[21]  S.  Jajodia,  S.  Noel,  and  B.  O’Berry,  Topological 
Analysis of Network Attack Vulnerability, chapter 5, Kluwer 
Academic Publisher, 2003. 
[22] S. Templeton and K. Levitt, “A requires/provides model 
for  computer  attacks”,  in  Proceedings  of  the  New  Security 
Paradigms Workshop, Cork, Ireland, September 2000.  
[23] F. Cuppens and R. Ortalo, “LAMBDA: A Language to 
Model  a  Database  for  Detection  of  Attacks”,  Recent 
Advances in Intrusion Detection (RAID) 2000, Lecture Notes 
in  Computer  Science  1907,  H.  Debar,  L.  Me,  and  F.  Wu, 
Eds., Berlin: Springer Verlag, 2001. 
[24]  R.  Ritchey,  B.  O’Berry,  and  S.  Noel,  “Representing 
TCP/IP  connectivity  for  topological  analysis  of  network 
security”,  in  Proceedings  of  the  18th  Annual  Computer 
Security Applications Conference, Las Vegas, NV, 2002. 
[25] O, Sheyner, “Scenario Graphs and Attack Graphs”, PhD 
Thesis, Carnegie Mellon University, April 2004.  
[26]  Hopcroft,  Motwani,  Ullman,  Introduction  to  Automata 
Theory, Languages, and Computation (2Ed Aw 2001). 
[27]  F.  Cuppens,  A.  Miege,  “Alert  Correlation 
in  a 
Cooperative Intrusion Detection Framework”, in Proceedings 
of the 2002 IEEE Symposium on Security and Privacy, May 
2002. 
214224