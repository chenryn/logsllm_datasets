/.../libjvm.so botspot:thread_sta.rt
/...-/1ibgvm,so hotspot:vn_Init_begln
/..../libjvm,so botagot:vn_Lnit_end
[.--]
soj saqosd sapnpus ndgno stu1 saeaq rusodspoq pue podspoq opu padnor are saqosd at
class loading, garbage collection, safepoints, object allocation, methods, threads, and more. The
use of double underscores was to create probe names that DTrace could refer to using a single
dash, without the problem of putting minus signs in the code.
This example ran tplist(8) on a process; it can also be run on libjvm.so. So can readelf(1) to see the
USDT probes in the ELF binary notes section (n):
+readelf -n /.../jdk/1ib/server/libjvm.so
Displaying notes found in: -note,gnu.bui1d-id
Ovner
Data slze
GNI
0x00000014NT_G_BUILD_ID (unique build ID bitstring)
Bui1d ID: 264bc78da04c1T524718c76066c6b535dcc380f2
1psdens*erou* ut punog sesou butferdstα
Ovner
Dsta size
Description
atapsdt
0x00000050
 NT_STAPSDT (SystenTap probe descriptors)
Provider: hotspot
Nane : class_loaded
Locat.ion: 0x0000000005d1fa1, Base: 0x0000000010bdf68,Senspbore:
0x0000000000000000
Arguments: 89§rdx -48geax 89152($rdi) 18%si1
stapsdt
0x00000050
 NT_STAPSDT (SystenTap probe descriptors)
Provider: hotspot
Yase: class_unloaded
Locat.ion: 0x00000000005d1cbs, Base: 0x00000000010bdf68, Senapbore1
0x0000000000000000
Arguments1 89§rdx -48%eax 89152(%r12) 18$0
[.--]
---
## Page 584
12.3Java547
Using Java USDT Probes
These probes can be used in both BCC and bpftrace. Their role and arguments are documented in
the Jan Virtaa/ Machine Guide [138]. For example, using BCC trace(8) to instrument the gc-begin
probe, and the first arguments which is a boolean to show whether this was a full garbage collec.
tion (1) or partial (0):
 trace -T -p $(pidof java) *u: /..-/libjvm.so:ge_begin *yd*, arg1'
TIME
PID
TID
COMM
FUHC
5881 10:60
11900
peexuL N
gc_begin
09:30:34 11889
11900
gc_begin
0
09 :30 :34 11889
11900
 Thread
9c_begin
0
09 :30:38 11889
11900
VM Thresd
gc__begin
1
This show partial GCs at 9:30:34 and a full GC at 9:30:38. Note that the JVM Guide documents
this argument as args[O], however trace(8) numbers them beginning from 1, so it is arg1.
Here is an example with string arguments: the method_compile_begin probe has the compiler
name, class name, and method name as the first, third, and fifth arguments. This shows the
method name using trace(8):
 trace -p $(pidof javs) *u:/../libjvm.so:nethod_compile_begin *4s*, arg5′
PID
TID
COMN
FUNC
12600
12617
C1 ConpilerThre methed_conpile_begin getLocationonScreen
12600
1.2617
C1 ConpilerThze method_conpile_begln getAbsolutex
12600
12617
Cl ConpilerThre methed_conpile_begin getAbsoluteY
12600
1261T
C1 ConpilerThze method_conpile_begin currentSegnentD
12600
12617
C1 ConpilerThre method_conpile_begin next
12600
1261T
C1 Conp1lezThze methed_conpile_begin draxJo1n
12600
12616
C2 ConpilerThre method_conpile_begin needissymcData
12600
1261T
12600
12617
C1 ConpilerThre method_conpile_begin fillpointvithCoords
12600
12616
C2 Conp1lezThze method_conpi1e_begin LsHeldExclusively
12600
12617
C1 ConpilerThre method_conpile_begin updateChildGraphicsData
Traceback (nost recent call last) :
File "_ctypes/callbacks,c*, line 315, in *calling callback function*
Fi1e "/usx/loca1/11b/python2,7/diat=packages/bcc/tab1e*, 1ine 5T2, In rav_cb,
callback(cpu, data, size)
F1e "/hone/bgregg/Bu11d/bcc/tools/tzacea, 1ine 56T, 1n print_event
self._display_function (1 , msg) )
UnlcodeDecodeError: 'ascli' codec can*t decode byte 0xff in positlon 10: ordinal not
in range (128)
12600
12616
C2 ConpilerThre method_conpile_begin getShovingSubPanel
[.--]
---
## Page 585
548
8Chapter 12 Languages
The first 11 lines show the method name as the last column, followed by a Python error about
decoding a byte as ASCIL The problem is explained in the fnu Virtaaf Machine Guide for these
probes: the strings are not NULL terminated, and separate lengths are provided as axdditional
arguments. To avoid errors like this, your BPF program needs to use the string length from the probe.
Switching to bpftrace, which can use the length argument in its str( built-in:
ubogerduoopovaeu:osmsart/-- /:n. 8-(eae u- dexbd)s d-soeaagdg 
( printf(*compiling: es^n*, str (arg4, arg5)): *
Attaching l pzobe...
conpi1ing: getDisplayedMnemonicIndex
conpiling: getHininunSize
conpiling: getBaseline
conp11ing: f111Para11elogran
conpiling: preConcatenste
conpi1ing: last
conpiling: nextTile
conp11ing: next
[..]
There are no more errors in the output, which is now printing the strings with their correct lengths.
Any BCC or bpftrace program that uses these probes needs to use the length argument in this way.
As another example that leads to the next section, the following frequency counts all USDT
probes beginning with *method*:
poqeu:osA{qrt/-/:n,(eaeCgoprd) sd-sunoooung
Tracing 4 functions for *u:/.../lilbjvm,soinethod**... Hit Ctrl-C to end
FUBIC
LNncO
nethod_complle_begin
2056
pua—aduoopoqau
2056
De tach.ing -..
While tracing, the method_compile__begin and method_compile_end probes fired 2056 times.
However, the method_entry and method_return probes were not traced. The reason is that they
are part of the extended USDT probe set, covered next.
Extended Java USDT Probes
Some JVM USDT probes are not used by default: method entry and return, object-alloc, and Java
monitor probes. This is because they are very high-frequency events, and their not-enabled over-
head incurs a high performance penaltylikely exceeding 10%. This is just the overhead of making
them available, and when they are not in use! When they are enabled and used, the overhead will
slow down Java much more, possibly making Java run 10 times slower (10x) or more.
So that Java users do not pay a penalty for something they never use, these probes are not available
unless Java is run with an option: XOX: +ExtendedDTraceProbe.s.
---
## Page 586
12.3 Java 549
The following shows the Java game freecol with ExtendedDTraceProbes enabled, and frequency
anoaq se ,pouau, um Supuutaq saqord 1s Suguno
poqeu:osua[qrt/**+/:n, (eaec goptd) s d- qunoooung +
Tracing 4 functlons for *ut/.../libivn,so:method**... Hit Ctzl-C to end.
^C
FUHC
COUNT
method_compi le_begin
357
nse thod_cospl1e_end
357
unqaxpoq au
26762077
se thodentxy
26762245
De tach.ing- -
While tracing, there were 26 million calls to method__entry and method__return. The game also
jo aumseatu e sy passaoord aq o1 μndu ue rog spuooas aanp punore Supqe 'Be[ auarpxa paragns
before and after, the freecol start to splash screen time was 2 seconds by default, and 22 seconds
when instrumenting these method probes: a slowdown of over 10x.
These high-frequency probes may be more useful for troubleshooting software issues in a lab
environment than for the analysis of production workloads.
The sections that follow show different BPF tools for Java observability, now that I have covered
the necessary background: libjvm, Java symbols, Java stack traces, and Java USDT probes.
12.3.7profile
The BCC profile(8) tool was covered in Chapter 6. There are many profilers for Java. The
advantage of BCC profile(8) is that it is efficient, frequency counting stacks in kernel context,
and complete, showing user- and kernel-mode CPU consumers. Time spent in native libraries
(e.g., libc), libjvm, Java methods, and the kernel can all be seen via profile(8).
Java Prerequisites
For profile(8) to see the full stack, Java must be running with XX : +PreserveFrame Po1.n tex, and
jo asn aew m (gjagod q *uase-deu-gad Susn pea aq snu a poqus equaaddns e
(see Section 12.3.4). To translate frames in libjvm.so, symbol tables are needed. These requirements
were discussed in earlier sections,
CPU Flame Graph
udesg aurep (d apou-paxitu e aqe1auas o eae qm (g)apgosd Susn po apduuexa ue st su
This Java program, freecol, is running with XX: +PreserveFxanePointex, and with an ELF
symbol table for its libjvm functions. The jmaps utility, introduced earlier, is run immediately
before the profile(8) tool to minimize symbol churn. This profiles at the default rate (99 Hertz),
with kernel annotations on symbol names (a), folded format for flame graphs (), for PID
:spuooas 0t 1og pue (d) 169[
Fetching msps for all java processes..
Mapping PID 16914 (user bgzegg) :
---
## Page 587
550
0Chapter 12 Languages
vc (1) :  907828222 572219 /tnp/perf-16914.map
 vc out.pzofile01.txt
2153347 153742 out-profile01.txt
 cat out.profile01.txt
AXT-EventQueve-start_threadi; th.read_native_entry (Thread*) ;Thread:rcal1... 1
[ . - - ]
The wc(1) utility is used by jmaps to show the size of the symbol file, which is 9078 lines long,
and therefore contains 9078 symbols. I've also used wc(1) to show the size of the profile file. The
output of profile(8) in folded mode is one line per stack, semicolon-delimited frames, and a count
for the number of times the stack was seen. wc(1) reported 215 lines in the profile output, so there
were 215 unique stack traces collectedl.
This profile output can be converted into a flame graph using my open source FlameGraph soft-
ware [37] and the command:
6ss*zoeTzoxd*no  qse-- ese[=xotoo-- [d*ydexbeueg
The color= ava option uses a palette that colors code types with different hues: java is green,
C++ is yellow, user-level native is red, and kernel-level native is orange. The hash option uses
consistent coloring based on the function names rather than random saturation levels.
The resulting flame graph SVG file can be opened in a web browser. Figure 12-2 shows a screenshot.
Flame Graph
Figure 1.2-2 CPU flame graph
---
## Page 588
12.3Java551
A mouse-over of each frame provides adkdlitional details, such as the percentage it was present in
the profile. These showed that 55% of CPU time was in the C2 compiler, shown by the large wide
tower (vertical column of rectangles in the middle of C++ frames. Only 29% of time was spent in
the Java freecol game, shown by the towers containing Java frames.
By clicking on the Java tower on the left, the Java frames can be zoomed in, as shown in Figure 12-3
Figure 1.2-3 CPU flame graph zoomed
Now details of the Java freecol game and its methods can be read. Most of this time is in paint
methods, and where exactly thte CPU cycles were spent can be seen as the top edge in the flame graph.
If you were interested in improving the performance of freecol, this CPU flame graph has already
provided two targets from an initial glance. You could look through the JVM tunables to see what
options would cause the C2 compiler to consume less CPU time.1 The paint methods can also be
inspected in detail, with the freecol source, to look for more efficient techniques.
For long profiles (say, over two minutes), the time between the symbol table dump and when
stack traces are collected can be so large that the C2 compiler has moved some methods in the
meantime, so the symbol table is no longer accurate, This may be noticed by a code path that
unexpected code paths is inlining.
makes no sense at all, since some frames are mistranslated. A much more common issue with
13 Compiler tunables include XX : Comp 11eThresho1d, XX:Max In11neS1ze, XX : In.11ne.Sna1 1Code,
---
## Page 589
552
2Chapter 12 Languages
Inlining
Since this is visualizing the stack trace that is running on-CPU, it is showing Java methods after
inlining. JVM inlining can be aggressive, inlining as much as two frames out of every three. This
Sugeo Aoasp aq o readde spouatu se Busnjuoo a[ e qdes8 aueg aq Susmoq aetu ue)
other methods that they do not in the source code.
There is a solution to inlining: the perf-map-agent software supports dumping a symbol table that
includes all inlined symbols. jmaps will use this capability with u:
x*e0eTgoad·ano < 0T 169t dge- Tgoad :n-sdeu 
Fetching maps for all java processes...
Mapping PID 16914 (user bgzegg) :
vc (1) :
75467 227393 1144314/tnp/perf16914.msp
The number of symbols has greatly increased, from the 9078 seen earlier to over 75,000.
(I ran jmaps again, with u, and it was still around 9000.)
Figure 12-4 shows a flame graph generated with the uninlined frame information.
Figure 1.2-4 CPU flame graph with uninlining
---
## Page 590
12.3Jav8 553
The tower in the freecol stack is now much higher, as it includes uninlined frames (colored aqua)
Includling inlined frames slows down the jmaps step as it must dump many more symbols, as well
as the flame graph generation to parse and include them. In practice, this is sometimes necessary.
Often, a flame graph without inlined frames is sufficient to solve issues because it still shows the
overall code flow, while bearing in mind that some methods are not visible
bpftrace
The profile(8) functionality can also be implemented in bpftrace, which has an advantage: the
jmaps tool can be run in an END clause using the system() function. For example, the following
one-liner was shown in an earlier section:
CN3 [ ()qunoo - [xoeqen] e /c99 == ptd/ 661zu1aTTgoad, a- agesun-- aoengdq
(syatem(*jnapa*):*
This samples user-level stack traces for PID 4663 at 99 Hertz across all CPUs that PID is running
on. It can be adljusted to include the kernel stack and the process name by making the map
g [kstack, ustack, conm] -
12.3.8offcputime
The BCC offcputime(8) tool was covered in Chapter 6. It collects stacks on CPU blocking events
(scheduler context switches), and sums the time spent blocked by stack trace. For offcputime(8) to
work with Java, see Section 12.3.7.
For example, using offcputime(8) on the Java frecol game
0T 169 d-ozo sde 
Fetching msps for all java processes...
Mapping PID 16914 (user bgzegg) :
vc (1) : 9863  30589 623898 /tnp/perf-16914.map
Tracing off-CPU tine lus]of PID 16914 by user + kernel stack for 10 secs
finish_task_svitch
"enenb"Tex"xeqng
futex_xait
do_futex
SyS_futex
do_sysca11_64
entry_SYscALL_64_after_hmframe
_111_lock_va1t
---
## Page 591
554
4Chapter 12 Languages
SafepointSynch.ronize::b1ock (JavaThread*, boo1)
SafepointMechanisn::block_1f_requested_slov [JavaThread*)
JavaThread:rcheck_ssfepoint_and_suspend_for_native_trans (JavaThread*)
JavaThzead::check_special_conditlon_fox_native_trans [Javathzead*)
Lsun/axt,/X11/X1ibrspperz1:XEventsQueued
Lsun/axt/X11/XToo1k:t,+:run
Interpreter
Interpzeter
ca11_stub
JavaCa1ls::cal1_helper (JavaValue*, nethodHandle cons ts, JavaCal1Argunents*, Th.* *
JavaCalls1:cal1_virtual (JavaValue*, Bandle, Klass*, Synbol*, Synbol*, Thtead*}
thread_entxy [JavaThzead*, Thread*]
JavaThread::th.read_main_inner (1
Th.read::cal1_run (1
th.read_native_entry (Thread*
start_thread
AMTXAMNT (16944)
5171
[..-]
finish_task_swltch
schedule
1o_schedule
bit_vait_i0
_walt_on_b1t
uaun
_valt_on_buffer
ext4_find_entry
ext4_un11nk
vfs_unlink
do_unlinkat
sy8_unlink
do_aysca11_64
entry_SYsCALL_64_after_hmframe
_GI_un11nk
Ljava/io/UnixFileSystem:=1delete0
Ljava/1o/F11e::delete
Interpreter
Intexpzeter
Interpreter
Lnet/sf/freeco1/c1ient/control/InGaneInputHandler::handle
Interpreter
---
## Page 592
12.3Java 555
Lnet/sf/freecol/client/cont.rol/InGaneInputBandler;1:handle
Lnet/sf/freeco1/conmon/netvozk.ing/ConnectLon, ::hand1e
Interpreter
ca11_stub
JavaCallsi:call_helper (Javavalve*, nethodHandle conats, JavaCallArguments*, Th..-
JavaCalls::cal1_vlrtual (JavaValue*, Bandle, Klass*, Syrbol*, Syrbo1*, Thzead*)
th.read_entry (JavaThread*, Thread*)
JavaThzead::thread_main_innez ()
Th.read::ca11_run ()
thread_native_entry (Thzead*)
start_thread
FreeCo1C1lent:b (8168)
7679
[...]
finish_task_switch
schedule
futex_ai t_queve_ne
futex_xa1t
do_futex
SyS_futex
9"Tes.a"op
entzy_sYscALL_64_after_hufxase
pthread_cond_timedvsitBGttac_2.3.2
pthread_cond_tLnedvai t.