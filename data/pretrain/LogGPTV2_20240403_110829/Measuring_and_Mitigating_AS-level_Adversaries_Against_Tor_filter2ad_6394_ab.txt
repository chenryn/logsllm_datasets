Similar to prior work on relay selection, we assume that our
adversary is an autonomous system (AS), or an entity working
with the cooperation of ASes (e.g., governments). However,
while all previous work only considers the standard view of
network attacks, we also consider attackers that may lie on the
reverse-path, as described above. In addition, we also include
the possibility that some sets of ASes may collude with each
other to de-anonymize Tor users. Speciﬁcally, we consider that
an AS may collude with sibling ASes [10] (i.e., other ASes
owned by the same organization) and ASes that may collude
with each other on behalf of a state-level adversary. Finally,
as part of our relay selection algorithms (Section IV), we
consider a probabilistic relay selection strategy that minimizes
the amount of trafﬁc that is observable by any single attacker
over a period of time.
III. MEASURING ADVERSARY PRESENCE
In this section, we investigate the prevalence of the adver-
sary described in Section II. First, we detail how prediction
of AS paths between a source and a destination is performed
and how sets of potential attacking ASes are generated. Then
we present the experimental methodology used to make these
measurements. Finally, we present the results of these experi-
ments.
Fig. 1: Standard and reverse-path trafﬁc correlation attacks. In the
standard trafﬁc correlation attack, AS2 must observe the direction of
the connection that data is ﬂowing on (forward path). In the reverse-
path trafﬁc correlation attack AS2 can infer the data ﬂow using ACK
numbers on the reverse path.
on forward- and reverse-paths. Most recently, Vanbever et al.
[40] and Sun et al. [39], presented RAPTOR, an AS-level
attack integrating BGP interception with the ﬁrst correlation
attack that takes advantage of the asymmetric nature of Internet
routing, to exactly de-anonymize Tor users with up to 90%
accuracy in just 300 seconds. Similarly, Johnson et al. [25] per-
formed an empirical evaluation of the effect of network-level
adversary bandwidth investment strategies, Tor client location,
and Tor client use (e.g., for IRC, browsing, BitTorrent, etc.).
They found that a network-level adversary could effectively
de-anonymize most Tor users within six months with very
low bandwidth costs. These works emphasize the need for Tor
relay selection strategies to consider ASes that lie both, on
the forward- and reverse-paths between the (client, entry) and
(exit, destination).
Perhaps most closely related to our work, in terms of
end-goals and evaluation methodology, Akhoondi et al. [9],
constructed LASTor, a Tor client which explicitly considered
AS-level attackers and relay locations while constructing Tor
circuits. While LASTor appeared to successfully reduce path
latencies and the probability of common ASes at either end of
the Tor circuits, it neglected the capacity of relays selected by
the system. Relay capacity is an important variable to consider
to ensure that custom relay selection schemes do not overload
a small set of relays, therefore reducing the performance of
the entire network. Their evaluation, based on only HTTP
HEAD requests (as opposed to complete webpage loads), did
not stress the system sufﬁciently to reveal the issues associated
with capacity-agnostic relay selection. Further, LASTor does
not consider an adversary that may (1) collude with other ASes
or operate at the state-level, and/or (2) only need to be on one
of the asymmetric path segments between source and entry-
relay; and exit-relay and destination (e.g., RAPTOR).
C. Adversary model
In the standard view of trafﬁc correlation attacks, an AS
needs to lie on the forward path1 between the source and
destination (i.e., on the solid green colored path segments in
Figure 1 (a)). With this point the adversary (AS 2) can view
the packet sizes and timings as transmitted from the source to
destination, going-into and coming-out-of the Tor network and
directly perform a trafﬁc correlation attack.
1Here we use ‘forward path’ to refer to the direction of data ﬂow in the
TCP connection
A. Predicting potential attacker ASes
Adversaries that can exploit asymmetric routing present a
challenge to measuring their prevalence. The addition of poten-
tial attackers on the reverse-path between a source and desti-
nation implies the need for identifying potential attackers (i.e.,
ASes) on the reverse-paths between the client and entry-relay
(and the exit-relay and destination). This poses a challenging
measurement problem, since reliably measuring information
about reverse-paths is currently not possible. While Reverse
3
ExitASAS2EntryASAS3AS1SrcASDstASForward pathReverse pathExitASAS2EntryASAS3AS1SrcASDstAS(a)	
  Standard	
  *ming	
  a.ack	
  (b)	
  Reverse-­‐path	
  *ming	
  a.ack	
  Traceroute [27] would be a useful tool for these measurements,
it is currently not widely deployed.
Additionally, since our measurement toolkit was assembled
with the goal of integration with our Tor client – Astoria
(Section IV), using external measurement and control-plane
mapping tools was not an option. This is because such tools
require knowledge of the clients’ intended destination – an
undesirable option for an anonymity tool such as Tor. Thus,
any measurement or path prediction needs to be performed on
the Tor client without leaking any information to attackers or
third party tools and service providers.
To address the challenges of reliably measuring reverse-
paths or use control-plane mapping tools, we employ an
efﬁcient path prediction approach which leverages up-to-date
maps of the AS-level Internet topology [23], and algorithmic
simulations that take into account a common model of routing
policies [22].
the Internet
AS-level topology. We perform path prediction using an
empirically-derived AS-level Internet topology. In this abstrac-
tion,
is represented as a graph with ASes as
nodes and edges as connections between them. Connections
between ASes are negotiated as business arrangements and
are often modeled as two main types of relationship: customer-
provider where the customer pays the provider for data sent
and received; and settlement-free peering or peer-peer where
two ASes agree to transit trafﬁc at no cost [21].
However, in practice AS relationships may violate this
simple taxonomy e.g., ASes that agree to provide transit for
a subset of preﬁxes (partial transit) or ASes that have dif-
ferent economic arrangements in different geographic regions
(hybrid relationships) [23]. It can also be the case that two
ASes are controlled by the same organization e.g., because
of corporate mergers such as Level 3 (AS3356) and Global
Crossing (AS3549) or organizations that leverage different AS
numbers in different regions such as Verizon (AS701, 702,
703). Additionally, integrating IXPs is a complicated research
subject due to a dearth of measurement data to inform how
they should be incorporated – e.g., just because two ISPs peer
at an IXP does not mean all paths including these ISPs will
traverse the IXP. The AS-level topology we leverage takes
partial transit and hybrid relationships into account, but ignores
IXPs (which would result in a signiﬁcant over-estimation of
our measurements, due to their peering meshes). We use
techniques discussed and validated by Anwar et al. [10] for
detecting sibling ASes. This is done to identify ASes that are
likely to collude with each other.
Routing policies. Routing on the AS-graph deviates from
simple shortest path routing because ASes route their trafﬁc
based on economic considerations. We use a standard model
of routing policies proposed by Gao and Rexford [21]. The
path selection process can be broken down into the following
ordered steps:
•
•
Local Preference (LP). Paths are ranked based on
their next hop: customer is chosen over peer which
is chosen over provider.
Shortest Paths (SP). Among the paths with the highest
local preference, prefer the shortest ones.
Fig. 2: Illustration of the AS paths that the client needs to predict,
note that these paths must be predicted for each potential entry and
exit relay in both the forward and reverse direction.
•
Tie Break (TB). If there are multiple such paths, node
a breaks ties: if b is the next hop on the path, choose
the path where hash, H(a, b) is the lowest.2
This standard model of local preference [21] captures the
idea that an AS has incentives to prefer routing through a
customer (that pays it) over a peer (no money is exchanged)
over a provider (that it must pay).
In addition to selecting paths, ASes must determine which
paths they will announce to other ASes based on export
policies. The standard model of export policies captures the
idea that an AS will only load its network with transit trafﬁc
if its customer pays it to do so [21]:
•
Export Policy (EP). AS b announces a path via AS c
to AS a iff at least one of a and c are its customers.
Computing paths following these policies using simulation
platforms (e.g., CBGP [33]) can be computationally expensive
which limits the scale of analysis. Thus, we employ an
algorithmic approach [22] that allows us to compute all paths
to a given destination in O(|V |+|E|) where |V | is the number
of ASes and |E| is the number of edges.
Predicting paths. We use the routing policies and algorithmic
simulations [22] as described above to compute routes between
pairs of ASes using the AS-level
topology published by
CAIDA [23]. AS-level path prediction between a source and
destination is a thorny issue, for example the recent work from
Juen, et al. [26] shows that the paths predicted by BGP-based
path prediction vary signiﬁcantly from traceroute-based path
prediction. However, our BGP-based path prediction toolkit
makes use of the state-of-the-art in path inference and AS-
relationship inference that have both been extensively validated
with empirical measurements by Anwar et al. [10] and Giotsas
et al. [23].
In particular, Anwar, et al. [10] show that 65-85% of
measured paths are in the set of paths which satisfy LP and SP.
Thus, we modify the algorithmic simulator to return all paths
satisfying LP and SP simultaneously, instead of using TB to
produce a unique path. Thus we consider the set of ASes in
the set of paths satisfying LP and SP between a and b to be
the set pa→b.
Identifying vulnerable circuits. Let pi
src↔entry be the ith
LP and SP satisfying (forward- or reverse-) path between the
2In practice, this is done using the distance between routers and router
IDs. Since we do not incorporate this information in our model we use a
randomized tie break which prevents certain ASes from “always winning”.
4
SrcASEntry ASes…Exit ASes…TorDstASForward pathReverse pathVulnerable
Websites (Main request)
Websites (Any request)
Circuits (All requests)
Vanilla Tor
37%
53%
40%
Uniform Tor
35%
69%
39%
TABLE II: Summary of threat from asymmetric correlation
attacks against the vanilla Tor and uniform relay-selection strate-
gies for 200 websites in 10 countries.
For each experiment, 200 websites were loaded using the
Selenium Firefox webdriver [6]. The list of 200 websites
comprised of the local Alexa Top 100 sites [1] and 100
sensitive (i.e., likely to be blocked) pages obtained from the
Citizen Lab testing list repository [2] for each country.
Each experiment was conducted in one of two settings:
Live or Simulation. In the Live setting, the actual client (vanilla
Tor or Astoria) being studied was used to load pages from
within the respective country using a single VPN as the vantage
point. The VPN vantage point only presents a limited picture
of the threat faced by all users in the country (since it only
considers a single AS as the client location (source AS)), thus
we used simulations to augment the Live experiments. Each
simulation considered clients located in 100 randomly selected
ASes in each country.
For each experiment, logs were maintained to track: (1) the
list of available entry- and exit-relays during circuit construc-
tion, (2) the actual chosen entry and exit-relay for each circuit
constructed by the client, and (3) the list of requests made for
each site and the circuit used by the Tor client to serve the
request. Data from these logs were fed to our measurement
toolkit in order to identify (1) the set of attackers that threaten
actually constructed circuits (Live experiments) and (2) the
set of attackers that threaten potential circuits – i.e., circuits
that could have been constructed given a particular valid
combination of available entry- and exit-relays (Simulation
experiments).
E1: Measuring vulnerability to network-level attacks. This
experiment was conducted using the vanilla Tor client and a
modiﬁed Tor client using a uniform relay-selection strategy.
Both clients used the same VPN in each of the 10 countries
to load their corresponding Alexa top 100 and 100 sensitive
pages. Three statistics were measured: (1) The number of
websites which had the circuits carrying the request for their
main page being vulnerable, (2) the number of websites which
had any of their circuits being vulnerable, and (3) the total
number of vulnerable circuits.
A summary of these results are illustrated in Table II. We
see that both clients have similar number of compromisable
circuits, however the vanilla Tor client allows 16% more web-
sites to load without having any of their circuits compromised,
implying that when a website is loaded with the vanilla Tor
client it is either completely safe or has most of its content
loaded via a vulnerable circuit. This is due to the fact that
unlike the modiﬁed Tor client, the vanilla Tor client reuses a
small number of circuits for many requests.
We break down our results for the vanilla Tor client by
country in Figure 4. The ﬁgure shows the percentage of
websites that are vulnerable to asymmetric correlation attacks
Fig. 3: Fraction of actually vulnerable paths from all possible paths,
for each of 20,000 circuits marked as vulnerable by our toolkit.
source and entry-relay, pj
the exit and destination, Psrc↔entry = ∪i{pi
Pexit↔dst = ∪j{pj
between a and b.
exit↔dst be the jth such path between
src↔entry} , and
exit↔dst}. We refer to Pa↔b as the path-set
Since it is currently not possible to predict exactly which
path from P = Psrc↔entry × Pexit↔dst will be utilized when
using a circuit with entry-relay entry and exit-relay exit,
we label all paths p ∈ P as vulnerable iff at-least one of
the paths in P is vulnerable (as deﬁned in Eq. 1). That is,
once our path prediction toolkit returns the set of ASes that
occupy each path-set between the Tor client and a given entry-
relay (Psrc↔entry) and between the exit-relay and destination
(Pexit↔dst), potential circuits using the corresponding entry-
and exit-relay are labeled as vulnerable iff there are common
or sibling ASes on the (client, entry-relay) and (exit-relay,
destination) path-set – i.e., {Psrc↔entry ∩ Pexit↔dst} (cid:54)= ∅.