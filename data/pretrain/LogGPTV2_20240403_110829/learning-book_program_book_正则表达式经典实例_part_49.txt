·ISBN-13:
·空字符串（无前缓）
接下来，肯定型顺序环视（?=[-0-9]{17}$[-0-9X○]{13}$[0-9X]{10}$)>会匹配剩余匹
配的（由多选操作符小分隔的）三种选择之一，每种都有不同的长度和字符集。所有三
种选择（如下所示）都以定位符$>作为结策，这样可以确保不会包含任何不符合这些
模式的拖尾文本：
允许包含4个分隔符的ISBN-13代码（总共17个字符）
允许不含有分隔符的ISBN-13代码，或者包含3个分隔符的ISBN-10代码（总共13个
字符）
允许不含有分隔符的ISBN-10代码（总共10个字符）
在肯定型顺序环视确认了长度和字符集之后，我们就可以不用再担心它们的总长
度，从而可以放心匹配ISBN的每个组成部分。《(?:97[89][-·]?)?>会匹配ISBN-13
中要求的“978”或“979”前缀。这个非捕获分组是可选的，因为在ISBN-10格式
的目标字符串中就不会匹配到该分组。会匹配1～5个数字的区位
代码和紧跟其后的一个可选的分隔符。会匹配可变长度的出版
社代码和书序码，以及它们相应的可选分隔符。最后，[0-9XJS>匹配字符串末尾的
检验码。
虽然正则表达式可以用来检查最后一位数字使用的是合法字符（数字或X)，但是它不
能决定它是不是一个正确的ISBN校验和。根据你要处理的是ISBN-10或者ISBN-13，
它们会使用两种不同的校验和算法之一，用来确保ISBN数字没有被不小心改变次序，
或者是输人错误。前面所给的JavaScript和Python示例代码中实现了这两种算法。下
面的小节会讲解校验和的规则，以帮助你在其他语言中实现这些算法。
ISBN-10校验和
ISBN-10代码的校验码范围是0～10（使用罗马数字X来代替10）。它的计算方法如下：
1.把前9位数字中的每一位分别乘以10～2（按顺序递减），然后取和；
2.把上面得到的结果除以11；
合法性验证和格式化
249
www.TopSage.com
---
## Page 266
3．计算11减去上面除法结果中余数（不是商）的差；
4.如果结果是11，那么使用数字0：如果是10，使用字母X。
下面是一个用来推导ISBN-10校验码的例子，假设书号为0-596-52068-?。
第1步：
加权和=10×0+9×5+8×9+7×6+6×5+5×2+4×0+3x6+2x8
0+45+72+42+30+10+0+18+16
=233
第2步：
233÷11=21，余数为2
第3步：
11 - 2 = 9
第4步：
9[不需要替换】
计算出来的校验码是9，所以完整的代码序列是ISBN0-596-52068-9。
ISBN-13校验和
ISBN-13代码的校验码范围是0～9。它的计算方法会采用类似的步骤。
1．把前12位数字中的每一位分别乘以1或3（从左向右依次交替使用1和3），然后
取和：
2.把上面得到的结果除以10；
3.计算10减去上面除法结果中余数（不是商）的差：
4．如果是10，那么使用数字0。
下面是一个用来推导ISBN-13校验码的例子，假设书号为978-0-596-52068-？。
第1步：
加权和=1×9+3x7+1×8+3x0+1×5+3×9+1×6+3×5+1×2+3×0+1×6+3×8
=9+21+8+0+5+27+6+15+2+0+6+24
= 123
第2步：
123÷1012，余数为3
第3步：
10-3=7
第4步：
7[不需要替换]
计算出来的校验码是7，所以完整的序列是ISBN978-0-596-52068-7。
变体
在文档中查找ISBN
这个版本的“ISBN-10或者ISBN-13”的正则式中会使用单词分界符，而不是定
250
第4章
www.TopSage.com
---
## Page 267
位符来帮助你在更长的文本中查找ISBN，同时保证它们还是独立存在的。在这个
版本中，“ISBN”标识符也变成了一个必需的字符事。这样做有两个原因。首先，
有了它之后有助于去除误报（如果没有前导“ISBN”，那幺正则式就可能会匹配到
任意10位或13位的数字）；其次，在实际打印ISBN的时候，这个标识符是必
需的：
(0x6-0]1[x6-0-]16-0-]=)（0]-)N
(?: 97[89][-°] ?)?[0-9]{1, 5} [-]?(?:[0-9]+[-]?){2} [0-9X]\b
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
排除不正确的ISBN标识符
反过来也一样。下面的正则式会使用正则条件（参考实例2.17）来保证一个“ISBN-10”
或“ISBN-13”标识符之后跟着的是正确的ISBN类型。当类型没有明确指定时，它会
同时支持ISBN-10和ISBN-13的号码。在很多情形下，这个正则式都是没有必要的，
因为同样的结果完全可以使用我们在前面给出的ISBN-10和ISBN-13的正则式来分别
进行匹配，那样反而会更加容易管理。这里，我们给出这个解答只是为了演示正则表
达式的一个有趣实例：
(?:ISBN(1(?: (0) 13))?: ?\ ) ？
(?(1)
(? (2)
（${0）[x6-0]1${}[x6-0-]=)
[0-9]{1,5}[- ]?(?:[0-9]+[- ]?) {2}[09×]$
(?= [- 0-9 1(17 }$ 1[0- 9] (13} $)
97[89][- ]?[0-9]{1,5}[- ]?(?:[0-9]+[- ]?){2}[0-9] $
）
((0x6-0]1x6-0-]1[6-0-]=)
(?: 97[89][- ]?)?[0-9]{1, 5}[- ]?(?:[0-9]+[- ]?){2}[0-9x]$
）
正则选项：宽松排列
正则流派：.NET、PCRE、Perl、Python
参见
找到。
官方的区位代码列表（http://www.isbn-international.org/en/identifiers/allidentifiers.html）
会有助于你根据一本书的ISBN的前1～5个字符识别它是来自哪个国家或者地区。
合法性验证和格式化
251
www.TopSage.com
---
## Page 268
4.14ZIP代码的合法性验证
问题描述
你需要对ZIP代码（美国邮政编码）进行合法性验证，允许5位和9位（ZIP+4）的格
式。你设计的正则式应当可以匹配12345和12345-6789，但是不能匹配1234、123456、
123456789或1234-56789。
解决方案
正则表达式
[0-9](5}(?:-[0-9]{4})？$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
VB.NET
If Regex.IsMatch(subjectString, "^[0-9](5}(?:-[0-9](4})?$") Then
Console.WriteLine("Valid ZIP code")
Else
Console.WriteLine("Invalid ZIP code")
End If
其他编程语言
如果读者希望了解如何使用其他编程语言来实现这个正则表达式，请参考实例3.5中的
讲解。
讨论
下面是对上述ZIP代码正则表达式的分解：
#判断字符串的开始位置
[0-9](5}
#匹配一个数字恰好5次
)
分组但是不捕获...
匹配一个字面的"-"
[0-9](4}
匹配一个数字恰好4次
非捕获分组的结束
2
重复之前的分组0次或1次，
$
判断字符串的结束位置
正则选项：宽松排列
正则流派：.NET、Java、PCRE、Perl、Python、Ruby
这个正则式比较容易理解，所以也没有太多要解释的。进行一个简单的改动就可以在
更长的输人字符串中来查找ZIP代码，只需把定位符和替换为单词边界即可，
252
第4章
www.TopSage.com
---
## Page 269
这样你得到的正则式是。
参见
实例4.15、实例4.16和实例4.17。
4.15加拿大邮政编码的合法性验证
问题描述
你想要检查一个字符串是不是一个加拿大邮政编码。
解决方案
(？!.*[DFIOQ0])[A-VXY][0-9][A-2]·[0-9][A-2][0-9]$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
在这个正则表达式开头的否定型顺序环视避免了在目标字符串中的任何地方出现D、
F、I、O、Q或U。字符类[A-VXY]>进一步防止在第一个字符中会出现W或Z。除了
这两个例外之外，加拿大的邮政编码中会使用6个字母数字字符的交替序列，中间位
置还要添加一个空格。例如，该正则式会匹配K1A0B1，这个是加拿大邮局渥太华总
部的邮政编码。
参见
实例4.14、实例4.16和实例4.17。
4.16英国邮政编码的合法性验证
问题描述
你需要一个正则表达式来匹配一个英国邮政编码。
解决方案
[A-2]{1,2}[0-9R][0-9A-Z]?●[0-9][ABD-HJLNP-UW-Z]{2}$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
讨论
英国使用的邮政编码是由5～7个字母或数字字符组成，中间由一个空格来分隔。关于
合法性验证和格式化
253
www.TopSage.com
---
## Page 270
哪些字符可以出现在特定位置的规则是相当复杂的，而且充满了各种例外。这个正则
表达式遵守了最基本的规则。
参见
英国标准BS7666描述了英国邮政编码的规则，它可以在http://www.govtalk.gov.uk/
gdsc/html/frames/PostCode.htm找到。
实例4.14、实例4.15和实例4.17。
4.17
查找使用邮局信箱的地址
问题描述
你想要找到所有包含邮局信箱（P.O.box）的地址，并且提醒用户他们的送货地址必须
使用街道地址。
解决方案
正则表达式
(?:Post·(?:Office●)?|P[.●]?o\.?●)?Box\b
正则选项：不区分大小写、和$匹配换行处
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
C#
Regex regexObj = new Regex(
@"^(?:Post（?:Office )?|P[.]?O\.？)?Box\b",
RegexOptions.IgnoreCase I RegexOptions.Multiline
)；
if (regexObj.IsMatch(subjectString)(
Console.WriteLine("The value does not appear to be a street address");
)else(
Console.WriteLine("Good to go");
其他编程语言
如果读者希望了解如何在其他编程语言中实现这个正则表达式，请参考实例3.5中的
讲解。