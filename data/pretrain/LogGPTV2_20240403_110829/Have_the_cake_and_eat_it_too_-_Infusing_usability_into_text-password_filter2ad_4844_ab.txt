2. Last letter encoding: Similar to the ﬁrst letter encod-
ing, every character in the password string is repre-
sented by the last letter of a word in the mnemonic.
Using this encoding, the mnemonic “The quick brown
fox” can be used to represent the password “eknx”.
Any of the aforementioned encodings can be used to en-
code the passwords in mnemonics and for a given password,
the generated mnemonics are listed along with the encoding
technique used.
3.2. Handling non lower-case characters
A challenge that arises due to the use of natural language
text as mnemonics is the ability to handle characters that
appear infrequently, if at all, in natural language text. e.g.
Upper-case characters (A-Z), digits (0-9), special characters
($, % etc.). In the following subsections, we propose and
discuss various possible methods to encode such characters
in natural language text.
3.2.1. Handling digits
Numeric digits (0-9) can be encoded in mnemonics using
any combination of the following ways:
1. Digits can be treated in exactly the same fashion as
the letters. For example, the password “1ioi” can be
encoded using the mnemonic “In 1947 India obtained
independence”, where 1947 is used to encode the digit
‘1’. This process can be generalised to enable the same
mnemonic to be able to encode multiple passwords. If
we replace the example sentence with “In NUMBER
India obtained independence”, then the same sentence
can be used to encode any password conforming to the
regular expression [0− 9]ioi. If the password is “2ioi”,
the mnemonic could be “In 2000 India obtained in-
dependence”. This is an example of a semantic vari-
ation. However, WordNet does not handle numbers.
Hence, we perform the tagging and variant generation
for numbers on our own.
2. Lower-case characters can be overloaded to represent
digits. A scheme similar to what is popularly referred
to as “leet speak” can be used. For example, ‘0’ is ‘o’,
‘1’ is ‘l’, ‘3’ is ‘e’ and so on. We discuss the limitations
of overloading in Section 3.2.4.
4
{Algerian, Angolan, Basotho, Bantu, Zairese, Zimbabwean, Zulu}
{airplane, autogiro, drone, glider, helicopter, orthopter, warplane}
Egyptian
plane
overshoots {miss, shoot, overshoot, undershoot}
runway
hit
Turkish
taxi
{platform, auction_block, bandstand, catwalk, dais, dock}
{play, foul, ground_out, toe, snap, kill, drive, hit, launch, loft}
{Azerbaijani, Kazak, Tatar, Uzbek, Uighur, Yakut, Kirghiz}
{cab, hack, taxi, taxicab, minicab, car, automobile, machine}
Figure 2. Examples of semantic relatives of the words in the sentence “Egyptian plane, overshoots
runway, hits Turkish taxi” obtained from WordNet.
3. Instead of using a single letter to represent a digit, a
whole word can be used instead. This scheme is simi-
lar to the classical “pegword” mnemonic device which
uses words that rhyme with digits. For example, ‘1’ is
‘bun’, ‘2’ is ‘shoe’, ‘3’ is ‘tree’ and so on.
3.2.2. Handling Upper-case letters
We use the ﬁrst letters of proper nouns found in the natu-
ral language text to encode upper-case letters. For exam-
ple, “Paul chased the dog” is a mnemonic for the password
“Pctd”. To be able to accomodate occurences of upper-case
letters in different positions, we use semantic tagging and
variant generation similar to the tagging used in handling
digits. For example, the previous mnemonic is replaced
in the corpus with “NAME chased the dog” and a list of
all names is maintained separately. So now, the mnemonic
could be used to encode any password satisfying the regular
expression [A − Z]ctd.
3.2.3. Handling special characters
There are 32 special characters that are printable in the
ASCII characters set, almost none of which appear in nat-
ural language text (except those used for punctuation). So,
we handle the special characters by overloading the lower-
case characters. If we restrict the number of special charac-
ters that appear in the password to less than 26, then for each
special character, a unique mapping to a lower-case charac-
ter can be found. On the other hand, if we want to allow all
32 special characters, then we need to use a sequence of two
lower-case characters to represent a single special character
e.g., ‘%’ is ‘aa’, ‘#’ is ‘bb’.
3.2.4. Overloading lower-case characters
A consistent theme that arises during attempts to encode
characters that do not frequently appear in natural lan-
guage text such as digits and special characters, is that of
overloading. Overloading a lower-case character to repre-
sent digits and special characters introduces an additional
level of encoding that destroys the one-to-one mapping be-
tween a mnemonic and the actual password. For example,
the mnemonic “The asinine brown fox” could encode both
“abf” or “4bf” (if ‘4’ is encoded as ‘a’ as discussed in sec-
tion 3.2.1) or “]f” (if ‘]’ is encoded as ‘ab’). In the worst
case, a user who just remembers the mnemonic and the en-
coding scheme might have to try all the different possible
password candidates. We are of the opinion that after a few
initial trials during which the user might have to try all pos-
sible candidates, the user will be able to recollect the over-
loaded information precisely. We also believe that the cost
of having to remember which letter has been overloaded is
very minimal when compared to actually remembering the
password itself without the aid of the mnemonics.
3.3. Personalisation of the corpus
Though the core-corpus contains highly memorable sen-
tences, it could be made more memorable by personalis-
ing the mnemonics generated according to the user. For
example, an user who is a soccer fan, might ﬁnd a soc-
cer related headline to be more memorable than a headline
about the latest stock exchange news. The RCV1 corpus
was designed with text-classiﬁcation applications in mind.
Every headline and newstory comes tagged with informa-
tion about one or more of the categories that it belongs to.
This makes personalisaton extremely simple.
3.4. Ranking the mnemonics
For many passwords, there are multiple candidates as
mnemonics. There is no general way to rank them. One
possible way to rank candidates that are among the semantic
variants, is to use a semantic distance metric that measures
how close they are semantically related to the original sen-
tences they are derived from. The semantically closer rela-
tives are ranked higher. The intuition behind using the se-
5
mantic distance metric is as follows: The original sentences
are the most desirable due to their memorability. The further
removed the relation between a semantic variant and the
original sentence is, the greater the chance that the variant
does not retain the memorability of the original sentence.
4. Evaluation
The two properties that we desire in our automatic
mnemonic generator(AMG) are memorability and cover-
age. Memorability refers to the ease with which the gen-
erated mnemonics can be remembered and recollected. We
depend on the appealing nature of the sentences in our core-
corpus for the memorability of the generated mnemonics.
Coverage refers to the number of passwords for which our
system can generate mnemonics. The coverage of AMG
depends on a variety of factors such as the length of the
password, the size of the corpus, and the encoding tech-
nique. To measure coverage, we deﬁne a ratio called Cov-
erage Ratio (CR). Let n be the maximum number of char-
acters in the password and let S be the alphabet from which
the characters of the password are obtained. For a given n,
the maximum number of passwords that can be generated
i=1 |S|i. For a given n and S, the ratio
using S, N =
CR is deﬁned as m/N where m is the maximum number of
passwords for which AMG can generate mnemonics.
(cid:1)n
(cid:1)
To measure CR, for a given n and S, we need to be able
to measure m. m is dependent on factors such as the size of
the corpus, the nature of the corpus, the size of the Word-
Net. This makes it difﬁcult to measure m accurately without
having to exhaustively enumerate all the passwords that our
system can support. Exhaustive enumeration is computa-
tionally expensive for large values of m and n (it is equiv-
alent to a cracker using brute-force to crack a password).
Hence, we resort to sampling to obtain an estimate of CR.
We randomly generate k passwords and test whether AMG
can generate mnemonics for the generated passwords. The
(cid:1)
/k is then a probabilistic estimate of CR, where k
ratio k
is the number of passwords for which AMG is successful in
generating mnemonics.
We perform two sets of experiments, one for n = 6
and another for n = 7. For both experiments, we generate
passwords that contain only lower-case characters. In each
experiment, we randomly generate a sample of k = 1000
using three different encodings (1st
passwords and obtain k
letter, 2nd letter and 3rd letter) to obtain mnemonics. The
Best-coverage encoding is the union of the results of the
three encoding schemes. The size of the core-corpus used
was extremely small – 1000 sentences. Figure 3 plots the
measure of success of AMG in generating mnemonics for
both the experiments. Even with such an extremely small
core-corpus, our system is able to achieve a coverage ratio
of 80.5% for six-character passwords and 62.7% for seven-
(cid:1)
character passwords.
5. Related Work
In this is section, we discuss related work that either
share or could be potentially used towards realizing the
same broad goal as ours i.e. making password system more
usable.
5.1. Graphical Passwords
The lack of usability in text password systems and the re-
sultant reduction in security has led researchers to propose
alternate authentication schemes such as graphical pass-
words. Graphical passwords leverage the fact that pictures
are easier to remember than text [18, 6, 20].
In general,
graphical password schemes can be divided into two cate-
gories: recognition-based and recall-based schemes.
Recognition-based schemes such as P assf acesT M [9,
32] and Deja-Vu [11, 24] leverage the proﬁciency of hu-
man beings in recognizing previously seen images [19, 11].
However, as Davis et. al. [10] found out, user choice in
such systems could lead to passwords that have much lower
entropy than the theoretical optimum, and in some cases,
are highly correlated with the race and gender of the users.
Recall-based schemes require users to precisely recall
a sequence of strokes or points on pictures. For example,
Jermyn et al.
[12] describe a scheme where a password
consists of a series of lines drawn by the user using an input
device (for example, stylus). By decoupling the temporal
order in which the lines are drawn from their positions, they
observe that they can produce interesting password schemes
that are at least as secure as the text passwords while being
easier to remember.
Graphical passwords are a promising alternative for text-
based password systems in the future. However, as studies
by Davis et al. and Thorpe et al. [33, 34] suggest, graphi-
cal password technologies are not mature enough to be de-
ployed immediately. Text-password systems with enhanced
usability (using systems such as ours), could serve as a vi-
able alternative until such technologies become ready for
widespread deployment.
5.2. Password Generators
such
tools
Commercially
available
as
P asswordGeneratorT M [22],
[21] use a series of
ad-hoc techniques to help users generate secure and
memorable passwords. As far as we know, there has been
no study done on the security and the memorability of the
passwords generated by these tools. Also, there has been
no study to test the ability of such tools to generate a large
number of passwords. The ability to cover a large password
6
 1000
 800
 600
 400
 200
)
’
k
(
s
d
r
o
w
s
s
a
p
d
e
r
e
v
o
c
f
o
r
e
b
m
u
N
 0
 100
 200
 300
1st letter
2nd letter
3rd letter
best coverage
 1000
 800
 600
 400
 200
)
’
k
(
s
d
r
o
w
s
s
a
p
d
e
r
e
v
o
c
f
o
r
e
b
m
u
N