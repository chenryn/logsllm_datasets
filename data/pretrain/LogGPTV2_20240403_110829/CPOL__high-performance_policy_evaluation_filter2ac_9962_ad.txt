identity  and 
the 
recipient’s identity during rule evaluation. The intended usage is 
not included in the set of condition inputs because intent is very 
hard  to  enforce  from  a  security  perspective.  Once  someone  has 
obtained  location  information,  it  is  easy  for  that  person  to 
transform  or  store  the  information  in  violation  intended  usage, 
intended  usage.  CPOL  already  uses 
the 
especially  if  the  data  resides  on  a  personal  computer.  For  this 
reason,  State  objects  were  limited  to  the  current  time  and  the 
authorizer’s location. 
Condition objects in the location privacy system contain two 
elements  that  are  used  to  restrict  access:  location  modifiers  and 
time  modifiers.  A  single  location  modifier  specifies  a  particular 
area  in  which  access  is  allowed  or  denied.  The  area  could  be  a 
whole  building,  a  floor,  or  a  single  room.  An  example  of  a 
location  modifier  would  be  “Allow  access  when  I  am  in  the 
computer science building.” One condition is able to have up to 
four location modifiers, allowing for a condition such as “Allow 
access when I am in the computer science building, except when I 
am  on  the  third  floor  or  in  the  restroom.”  A  condition  is  also 
allowed to have one time modifier, which contains a single time 
interval and a weekday mask. Some examples of time modifiers 
are “Only allow access Monday-Friday 9 AM to 5 PM” or “Only 
allow access Thursday 7 PM to 9 PM.” Note here that it would be 
easy to modify conditions so that they can contain an arbitrarily 
large number of location and time modifiers. It would be possible 
to allow negative time modifiers as well (i.e. “Not Monday-Friday 
12 PM to 1 PM”). These modifications that a policy administrator 
could  make  have  performance  and  security 
implications. 
Allowing  a 
larger  number  of  modifiers  could  degrade 
performance  and  may  make  it  easier  to  run  a  denial  of  service 
attack on CPOL. For the purposes of the location-aware privacy 
implementation,  we  found  that  one  time  and  four  location 
modifiers  were  sufficiently  to  express  almost  all  realistic  access 
conditions. 
The last part of the Condition object is the definition of three 
member functions Test, Add, and Subtract, which can be seen in 
Figure 5. Test is called by GetAccess for every rule that applies to 
the requester. GetAccess sends Test a State object with the current 
set of inputs and Test returns a Boolean truth value. For location 
privacy enforcement, Test first checks to see if the current time is 
within  the  interval  specified  by  the  time  modifier.  It  then  goes 
through  the  location  modifiers  one  by  one  making  sure  that  the 
authorizer is within all of the allowed areas, and not in any of the 
forbidden  ones.  If  the  input  state  satisfies  all  time  and  location 
modifiers, then Test returns true, otherwise it returns false. 
The two other Condition functions, Add and Subtract, are used 
when more than one rule applies to a requester. These functions 
do  not  affect  the  resulting  access  token  and  are  used  for  cache 
invalidation  purposes  only.  Add  defines  how  two  conditions  are 
merged when their access tokens are combined using the access 
token  Add  function.  Note  that  the  resulting  access  condition  is 
only  used  for  cache  invalidation,  so  it  does  not  have  to  be  a 
precise  intersection  of  two  original  conditions.  For  the  privacy 
example, the condition’s Add function will take the time modifier 
that  expires  first  and  a  location  modifier  with  the  finest 
granularity.  This  way,  a  cache  entry  can  be  given  an  accurate 
time-to-live, and will also expire if the authorizer changes rooms, 
floors,  or  buildings  depending  on  the  level  of  resolution  in  the 
location modifiers. Subtract is very similar to the Add function. It 
is called when a rule applies to a requester, but the condition is 
currently  false.  In  the  location-privacy  system,  the  Subtract 
function works just like Add, except that it switches the start and 
end  time  in  the  subtracted  condition’s  time  modifier.  This  way, 
the condition will expire when it becomes valid and could affect 
the  requester’s  access  level.  Together,  Add  and  Subtract  ensure 
that  the  merged  condition  will  expire  if  one  of  the  two  original 
16  15  14  13  12
Bits 
Field  Move  Hours 
11
10
9
Minutes
8
7
6
5
3
4
Seconds 
2 
1 
Move 
Possible 
Values: 
Hours: 
Minutes: 
Seconds: 
00 – Entry invalidated on Room change 
01 – Entry invalidated on Floor change 
10 – Entry invalidated on Building change 
11 – Entry never invalidated by location change 
0-3 remaining, 3 if no timeout. 
0-60 remaining or 63 for no timeout. 
0-60 remaining or 63 for no timeout.  
Figure 7. CacheCondition has a 16-bit field that contains the cache entry’s time-to-live and a movement tolerance. 
conditions  expires,  allowing  CPOL  to  correctly  cache  access 
tokens. 
3.5  Caching 
The most critical performance improvement in CPOL is caching. 
In the location-aware privacy implementation, CPOL was able to 
process  99.8%  of  all  requests  from  the  cache,  reducing  the 
average  handling  time  from  6  µs  to  0.6  µs.  CPOL  is  able  to 
achieve  such  a  high  hit  rate  because  it  gives  the  application 
developer control over invalidation, which can be complicated in 
the  case  of  conditional  access.  The  remainder  of  this  section 
describes how cache invalidation is handled in CPOL, and gives 
an  example  of  how  it  is  done  accurately  and  efficiently  for  the 
location privacy enforcement system. 
The CPOL cache is structured as an in-memory map keyed by 
 pairs. Whenever GetAccess is called by the 
data management back-end, CPOL uses the Requester and Owner 
parameters to look for a cache entry. If an entry exists, then it will 
contain  an  AccessToken,  a  CacheCondition,  and  the  last  input 
state  used  to  obtain  access.  The  CacheConditon  is  an  object 
defined by the application developer. It may have arbitrary data 
members, just like a Condition, but it should be as compact and 
easy 
to  evaluate  as  possible.  The  member  functions  of 
CacheCondition  can  be  seen  in  Figure  6.  GetAccess  tests  the 
CacheCondition  by  calling  StillGood  with  the  current  and 
previous State objects to see if the entry is still valid. If it is, then 
GetAccess  updates  the  previous  state  in  the  cache  entry  and 
returns  the  AccessToken.  If  the  entry  not  valid  or  no  entry  was 
found,  then  GetAccess  evaluates  access  normally.  When  it  is 
done,  GetAccess  stores  the  resulting  AccessToken,  the  current 
State, and a CacheCondition  in a new cache entry. 
CacheCondition Member Functions 
 Boolean 
 Void  
StillGood(State LastState,  
State CurrentState) 
Set(Condition FullCondition, 
    State FirstState) 
Figure 6. The CacheCondition object’s two member 
functions. StillGood tests the CacheCondition to see if it is 
still valid, and Set initializes the CacheCondition from a 
full access condition and a current state.
In  addition  to  invalidation  using  CacheCondition  objects, 
entries  can  also  be  removed  by  eviction,  modification  of  the 
owner’s rule list, or change in the requester’s group membership. 
Replacement occurs when the cache has exceeded a pre-defined 
maximum size. An entry is selected for eviction using a standard 
clock  replacement  algorithm.  Valid  entries  are  not  evicted  very 
often  because  the  cache  is  stored  in  main  memory  can  be  very 
large.  
To  ensure  that  policy  updates  go  into  effect  immediately,  a 
mapping can be kept from owners to cache entries at the option of 
the  policy  administrator.  This  way,  all  the  cache  entries  for  a 
particular  owner  can  be  removed  when  that  owner’s  rule  set  is 
modified. This additional mapping will take up extra memory, but 
it provides better security guarantees. Without an owner to entry 
mapping, policy updates may take hours or days to go into effect 
if  stale  entries  exist  with long timeout values. Another mapping 
from  requesters  to  cache  entries  can  be  kept  so  that  group 
membership  updates  to  go  into  effect  immediately.  Entries  with 
the same requester can be thrown out when the requester’s group 
membership list changes. This mapping also takes extra memory 
and provides better security guarantees. 
In  the  location  privacy  system,  CacheCondition  objects 
contain  a  timeout  and  a  movement  tolerance.  These  two  values 
are stored in a16-bit field, which can be seen in Figure 7. When 
the  Set  function  is  called  with  a  Condition  object,  it  first 
calculates  the  amount  of  time  left  until  the  time  modifier  will 
expire.  If  there  is  no  time  modifier,  then  it  sets  all  of  the  time 
remaining bits to 1 to indicate no timeout. Next, Set looks at all of 
the location modifiers, and sets the movement tolerance to one of 
{Room,  Floor,  Building,  None}  based  on  the  most  fine-grained 
modifier. 
location  privacy  system,  when  GetAccess  calls 
StillGood to determine if a condition is still true, StillGood looks 
at the difference between the times and locations of the new and 
old states. First, it checks to see if the time since the last request is 
greater than the timeout value. If it is, then StillGood returns false, 
otherwise it subtracts the time difference from the time remaining 
in  the  CacheCondition.  Next,  StillGood  verifies  that  the  owner 
has not changed rooms, floors, or buildings since the last request, 
depending on the movement tolerance. If the two states pass both 
of these tests, then the cache entry is valid and StillGood returns 
true, otherwise it returns false. 
Using these simple cache conditions, CPOL is able to achieve 
a  very  good  hit  rate  and  a  fast  processing  time.  Because  the 
CacheCondition is not as precise as the original condition, some 
entries  with  fine-grained  location  modifiers  may  be  invalidated 
when the original condition is still true. This has a minimal effect 
on hit rate, however, since people tend to stay in the same room 
for  hours  at  a  time.  On  the  other  hand,  only  looking  at  the 
difference  between  times  and  locations  allows  cache  hits  to  be 
processed  very  quickly  taking  an  average  of  .33  µs,  which  is 
much faster than processing full conditions. 
the 
In 
Table 1. Individual Request Processing Times for KeyNote, 
MySql, and CPOL. 
Request Type 
(500 Users, 5000 Rules) 
Processing Time (µs) 
KeyNote 
MySql Database 
CPOL  
Cache Hit 
Access 
Cache 
Miss  No Rule 
Access 
No 
Cache  No Rule 
101,000.00 
459.00 
0.33 
5.50 
3.50 
4.50 
2.00 
object. In MySql, each condition was stored in the rule table and 
evaluated at query time in the “WHERE:” clause. Note here that 
the total number of rules for this simulation is 10∗ n. 
After  making  requests  with  the  number  of  users  n  varying 
from  1  to  1000,  we  observed  that  the  processing  times  stay 
constant for CPOL and MySql, while they increase dramatically 
for  KeyNote.    Figure  8  shows  the  difference  in  time  between 
KeyNote requests and worst case CPOL requests (Cache miss on 
a successful access). KeyNote’s request processing time starts out 
at 53 µs for n=1. At this point, a worst-case CPOL request takes 
5.5 µs, approximately ten times faster than a KeyNote request. As 
the  number  of  users  increases,  however,  KeyNote’s  processing 
time  starts  growing  very  quickly.  With  n=50  users,  a  KeyNote 
request takes 374 µs, increasing to 936 µs at 100 users, 101 ms at 
500 users, and so on up to 1.77 seconds for a single request with 
n=1000 users. In the worst-case CPOL still only takes 5.5 µs to 
process a request for the same 1000 users. Although KeyNote has 
satisfactory  performance  for  a  low  number  of  users,  it  becomes 
extremely  slow  after  more  than  a  few  hundred  users  with  ten 
policies each. 
Table  1  shows  request  processing  times  under  different 
circumstances for CPOL compared to MySql and KeyNote. For a 
cache hit, CPOL is able to process a request in 0.33 µs, which is 
three orders of magnitude better than a MySql database and five 
to  six  orders  of  magnitude  better  than  KeyNote.  If  a  request 
misses in the cache, or if a cache is not used, then CPOL requests 
take approximately ten times longer, anywhere from 2 µs to 5.5 
µs. The exact time depends on whether CPOL has to evaluate a 
condition for one of the ten rules. For implementations with many 
complex  access  conditions,  requests  may  take  a  bit  longer  than 
5.5  µs.  Note  here  that  with  more  complicated  conditions,  the 
database  will  take  longer  than  459  µs  as  well.  Half  of  MySql’s 
processing  time  is  already  spent  evaluating  conditions.  In  a 
system with mostly unconditional access rules and a cache, CPOL 