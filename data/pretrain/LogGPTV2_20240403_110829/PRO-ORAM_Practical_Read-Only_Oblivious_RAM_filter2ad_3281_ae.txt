solution. Ohrimenko et. al show that use of Melbourne Shufﬂe
√
√
combined with square-root ORAM can reduce the worst-case
computation time to O(
N) with the use of O(
N) private
memory. In PRO-ORAM, we show that it is further possible to re-
duce the latency to a constant for applications with read-heavy
access patterns. Further, Zahur et al. have shown that although
square-root ORAM has asymptotically worse results than the
best known schemes, it can be modiﬁed to achieve efﬁcient
performance in multi-party computation as compared to the
general optimized algorithms [46]. In PRO-ORAM, we have
a similar observation where square-root ORAM approach
performs better in the read-only setting.
Solutions using Trusted Proxy. ObliviStore [41] is the ﬁrst
work that uses a trusted proxy to mediate asynchronous ac-
cesses to shared data blocks among multiple users, which
was later improved by TaoStore [36]. A major differentiating
point is that both ObliviStore [41] and TaoStore [36] assume
mutually trusting users that do not collude with the server,
thus operating in a weaker threat model than ours. The key
contribution in these works is towards improving efﬁciency
using a single ORAM over having separate ORAMs for each
user. ObliviStore improves the efﬁciency of the SSS ORAM
protocol [42] by making ORAM operations asynchronous and
parallel. Similar to this work, their key idea is to avoid block-
ing access requests on shufﬂe operations, thereby matching
the rate of access and shufﬂe operations using a trusted proxy.
However, their underlying approach to achieve such paral-
lelization largely differs from this work. Our observations
in designing PRO-ORAM are novel with respect to a read-only
data setting that allows us to reduce the computation latency
to a constant whereas ObliviStore has O(logN) computation
latency per (read/write) access. TaoStore [36] is a more recent
work that improves over ObliviStore using a trusted proxy
and Path-ORAM [43] as its building block. Similar to [41],
this approach has O(logN) computation latency per access.
Solutions using Trusted Hardware. An alternate line of
work has shown the use of trusted hardware or secure pro-
cessors with the goal to improve performance, as opposed to
our use to strengthen existing ORAM protocols in a stronger
threat model. Shroud uses trusted hardware to guarantee pri-
vate access to large-scale data in data center [28]. ObliviAd
is another system that makes use of trusted hardware to obliv-
iously access advertisements from the server [16]. However,
both these solutions do not optimize for read access patterns.
8 Conclusion
In this work, we provide a constant communication and com-
putation latency solution to hide read data access patterns
in a large class of cloud applications. PRO-ORAM guarantees
a practical performance of 0.3 seconds to access a block of
256 KB leveraging sufﬁcient storage and compute units with
trusted hardware available on today’s cloud platform. Our
work demonstrates that simple ORAM solutions are better
suited to hide read data access patterns than complex algo-
rithms that are optimized for arbitrary read/write accesses.
Acknowledgments
We thank the anonymous reviewers for their feedback. This
research is supported in part by the National Research Foun-
dation, Prime Ministers Ofﬁce, Singapore under its National
Cybersecurity R&D Program (TSUNAMi project, Award No.
NRF2014NCR-NCR001-21).
References
[1] Software Guard Extensions Programming Reference.
software.intel.com/sites/default/files/
329298-001.pdf, Sept 2013.
[2] Box. https://www.box.com/home, Accessed: 2017.
[3] Cloc. http://cloc.sourceforge.net/, Accessed:
2017.
[4] Dropbox.
2017.
https://www.dropbox.com/, Accessed:
[5] Dropbox
hacked.
theguardian.com/technology/2016/aug/31/
dropbox-hack-passwords-68m-data-breach,
Accessed: 2017.
https://www.
208          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association[6] Dropbox
usage
statistics.
expandedramblings.com/index.php/
dropbox-statistics/, Accessed: 2017.
http://
the new way forward. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications
Security, pages 837–849. ACM, 2015.
[7] Global
speed
average
connection
’fourth quarter, 2016
report’.
increases
26 percent year over year, according to aka-
mai’s
in-
https://www.akamai.com/
ternet
us/en/about/news/press/2017-press/
akamai-releases-fourth-quarter-2016-/
state-of-the-internet-connectivity-report.
jsp, Accessed: 2017.
state
of
the
[8] Google drive. https://drive.google.com/drive/,
Accessed: 2017.
[9] Intel sgx linux sdk. https://github.com/01org/
linux-sgx, Accessed: 2017.
[10] Intel
xeon
processor
pricing.
https:
//ark.intel.com/products/92984/
Intel-Xeon-Processor-E5-2640-v4-25M-Cache-2_
40-GHz, Accessed: 2017.
[11] Web content statistics. http://httparchive.org/
trends.php, Accessed: 2017.
[12] World’s biggest data breaches.
http://www.
informationisbeautiful.net/visualizations/
worlds-biggest-data-breaches-hacks/
Internet_and_cloud_services_-_statistics_
on_the_use_by_individuals, Accessed: 2017.
[13] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent
Scarlata. Innovative technology for cpu based attestation
and sealing. In Proceedings of the 2nd international
workshop on hardware and architectural support for
security and privacy, volume 13, 2013.
[14] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas
Knauth, Andre Martin, Christian Priebe, Joshua Lind,
Divya Muthukumaran, Daniel O’Keeffe, Mark L Still-
well, et al. Scone: Secure linux containers with intel sgx.
In 12th USENIX Symp. Operating Systems Design and
Implementation, 2016.
[15] Adam J Aviv, Seung Geol Choi, Travis Mayberry, and
Daniel S Roche. Oblivisync: Practical oblivious ﬁle
backup and synchronization. In NDSS, 2017.
[16] Michael Backes, Aniket Kate, Matteo Maffei, and Kim
Pecina. Obliviad: Provably secure and practical online
behavioral advertising. In Security and Privacy (SP),
2012 IEEE Symposium on, pages 257–271. IEEE, 2012.
[17] Vincent Bindschaedler, Muhammad Naveed, Xiaorui
Pan, XiaoFeng Wang, and Yan Huang. Practicing obliv-
ious access on cloud storage: the gap, the fallacy, and
[18] Erik-Oliver Blass, Travis Mayberry, Guevara Noubir,
and Kaan Onarlioglu. Toward robust hidden volumes
using write-only oblivious ram. In Proceedings of the
2014 ACM SIGSAC Conference on Computer and Com-
munications Security, pages 203–214. ACM, 2014.
[19] Victor Costan, Ilia A Lebedev, and Srinivas Devadas.
Sanctum: Minimal hardware extensions for strong soft-
ware isolation. In USENIX Security Symposium, pages
857–874, 2016.
[20] Srinivas Devadas, Marten van Dijk, Christopher W
Fletcher, Ling Ren, Elaine Shi, and Daniel Wichs. Onion
oram: A constant bandwidth blowup oblivious ram. In
Theory of Cryptography Conference, pages 145–174.
Springer, 2016.
[21] Tien Tuan Anh Dinh, Prateek Saxena, Ee-Chien Chang,
Beng Chin Ooi, and Chunwang Zhang. M2r: Enabling
stronger privacy in mapreduce computation. In USENIX
Security, volume 15, pages 447–462, 2015.
[22] Oded Goldreich and Rafail Ostrovsky. Software protec-
tion and simulation on oblivious rams. J. ACM, 1996.
[23] Michael T Goodrich, Michael Mitzenmacher, Olga Ohri-
menko, and Roberto Tamassia. Oblivious ram simula-
tion with efﬁcient worst-case access overhead. In Pro-
ceedings of the 3rd ACM workshop on Cloud computing
security workshop, pages 95–100. ACM, 2011.
[24] Syed Kamran Haider and Marten van Dijk. Flat oram:
A simpliﬁed write-only oblivious ram construction for
secure processor architectures. arXiv preprint, 2016.
[25] Mohammad Saiful Islam, Mehmet Kuzu, and Murat
Kantarcioglu. Access pattern disclosure on search-
able encryption: Ramiﬁcation, attack and mitigation. In
NDSS, volume 20, page 12, 2012.
[26] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim,
Hyesoon Kim, and Marcus Peinado.
Inferring ﬁne-
grained control ﬂow inside sgx enclaves with branch
shadowing. arXiv preprint arXiv:1611.06952, 2016.
[27] Chang Liu, Liehuang Zhu, Mingzhong Wang, and Yu-an
Tan. Search pattern leakage in searchable encryption:
Attacks and new construction. Information Sciences,
265:176–188, 2014.
[28] Jacob R Lorch, Bryan Parno, James W Mickens, Mari-
ana Raykova, and Joshua Schiffman. Shroud: ensuring
private access to large-scale data in the data center. In
FAST, volume 2013, pages 199–213, 2013.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 209[29] Sinisa Matetic, Kari Kostiainen, Aritra Dhar, David Som-
mer, Mansoor Ahmed, Arthur Gervais, Ari Juels, and
Srdjan Capkun. Rote: Rollback protection for trusted
execution. https://eprint.iacr.org/2017/
048.pdf.
[39] Shweta Shinde, Dat Le Tien, Shruti Tople, and Prateek
Saxena. Panoply: Low-tcb linux applications with sgx
enclaves. In 24th Annual Network and Distributed Sys-
tem Security Symposium, NDSS 2017, San Diego, Cali-
fornia, USA, February 26-March 1, 2017, 2017.
[30] Frank McKeen, Ilya Alexandrovich, Ittai Anati, Dror
Caspi, Simon Johnson, Rebekah Leslie-Hurd, and Car-
los Rozas. Intel R(cid:9) software guard extensions (intel R(cid:9)
sgx) support for dynamic memory management inside
an enclave. In Proceedings of the Hardware and Archi-
tectural Support for Security and Privacy 2016, page 10.
ACM, 2016.
[31] Ming-Wei-Shih, Sangho Lee, Taesoo Kim, and Marcus
Peinado. T-sgx: Eradicating controlled-channel attacks
against enclave programs. In NDSS 2017.
[32] Tarik Moataz, Travis Mayberry, and Erik-Oliver Blass.
Constant communication oram with small blocksize. In
Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security, pages 862–
873. ACM, 2015.
[33] Olga Ohrimenko, Michael T Goodrich, Roberto Tamas-
sia, and Eli Upfal. The melbourne shufﬂe: Improving
oblivious storage in the cloud.
In International Col-
loquium on Automata, Languages, and Programming,
pages 556–567. Springer, 2014.
[34] Ling Ren, Christopher W Fletcher, Albert Kwon, Emil
Stefanov, Elaine Shi, Marten Van Dijk, and Srinivas
Devadas. Constants count: Practical improvements to
oblivious ram. In USENIX Security Symposium, pages
415–430, 2015.
[35] Daniel S Roche, Adam Aviv, Seung Geol Choi, and
Travis Mayberry. Deterministic, stash-free write-only
oram. In Proceedings of the 2017 ACM SIGSAC Confer-
ence on Computer and Communications Security, pages
507–521. ACM, 2017.
[36] Cetin Sahin, Victor Zakhary, Amr El Abbadi, Huijia
Lin, and Stefano Tessaro. Taostore: Overcoming asyn-
chronicity in oblivious data storage. In Security and
Privacy (SP), 2016 IEEE Symposium on, pages 198–217.
IEEE, 2016.
[37] Elaine Shi, T-H Hubert Chan, Emil Stefanov, and
Mingfei Li. Oblivious ram with o ((logn) 3) worst-case
cost.
In Advances in Cryptology–ASIACRYPT 2011.
2011.
[38] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan,
and Prateek Saxena. Preventing page faults from telling
your secrets. In Proceedings of the 11th ACM on Asia
Conference on Computer and Communications Security,
pages 317–328. ACM, 2016.
[40] Emil Stefanov and Elaine Shi. Multi-cloud oblivious
storage. In Proceedings of the 2013 ACM SIGSAC con-
ference on Computer & communications security, pages
247–258. ACM, 2013.
[41] Emil Stefanov and Elaine Shi. Oblivistore: High perfor-
mance oblivious cloud storage. In IEEE S&P, 2013.
[42] Emil Stefanov, Elaine Shi, and Dawn Song. Towards
practical oblivious ram. In NDSS’12, 2011.
[43] Emil Stefanov, Marten Van Dijk, Elaine Shi, Christopher
Fletcher, Ling Ren, Xiangyao Yu, and Srinivas Devadas.
Path oram: an extremely simple oblivious ram protocol.
In Proceedings of the 2013 ACM SIGSAC conference on
Computer & communications security, pages 299–310.
ACM, 2013.
[44] Shruti Tople and Prateek Saxena. On the trade-offs in
oblivious execution techniques. In International Con-
ference on Detection of Intrusions and Malware, and
Vulnerability Assessment. Springer, 2017.
[45] Yuanzhong Xu, Weidong Cui, and Marcus Peinado.
Controlled-channel attacks: Deterministic side channels
for untrusted operating systems. In Security and Privacy
(SP), 2015 IEEE Symposium on, pages 640–656. IEEE,
2015.
[46] Samee Zahur, Xiao Wang, Mariana Raykova, Adrià
Gascón, Jack Doerner, David Evans, and Jonathan Katz.
Revisiting square-root oram: efﬁcient random access in
multi-party computation. In Security and Privacy (SP),
2016 IEEE Symposium on, pages 218–234. IEEE, 2016.
A Security Analysis
Theorem A.1. If shuffle enclave executes an oblivious al-
gorithm and E is a CPA-secure symmetric encryption scheme
then PRO-ORAM guarantees read-only obliviousness as in Def-
inition 5.1.
Proof. From Lemma 5.1, the access pattern of shuffle
enclave are data-oblivious. To prove the theorem, we have to
show that access pattern from access enclave are indistin-
guishable to the adversary. We proceed with a succession of
games as follows:
• Game0 is exactly the same as ExpPRO−ORAM
Aadt ,E
• Game1 replaces the O(cid:4)
while other parameters are the same
1 in Game0 with a random string
(λ,1)
210          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Association• Game2 is same as Game1 except that A(di) is selected
√
using a pseudorandom permutation πs : {0,1}(N+
N) →
√
{0,1}(N+
N) where s ← {0,1}λ and not from the
access enclave.
• Game3 is same as Game2 except that A(di) is selected at
random from the entire data array.
For Game3, a distinguisher D3 reduces the security of π to
PRP security such that:
Pr[Game2 = 1]− Pr[Game3 = 1] ≤ AdvPRP
D3,π(λ),
(5)
From above description, we have
Also, we have,
Pr[Game0 = 1] =Pr [ExpPRO−ORAM
Aadt ,E
(2)
For Game1, a distinguisher D1 reduces the security of E to
(λ,1) =1],
IND-CPA security such that:
Pr[Game0 = 1]− Pr[Game1 = 1] ≤ AdvIND−CPA
For Game2, according to Corollary 5.1, the advantage of a
(λ),
D1,E
(3)
distinguisher D2 is such that:
,
D2,shuffle
Pr[Game1 = 1]− Pr[Game2 = 1] ≤ AdvCorollary 5.1
This is because the access enclave uses the output of
shuffle enclave to fetch the data for each request. The
access enclave runs the square-root ORAM algorithm which
selects a random address in each request. Hence, the advan-
tage of the distinguisher D2 depends on the correctness of the
permuted output array from shuffle enclave.
(4)
Pr[Game3 = 1] =Pr [ExpPRO−ORAM
Aadt ,E
(λ,0) = 1],
(6)
From 2, 3, 4, 5, 6 we get:
Pr[ExpPRO−ORAM
Aadt ,E
AdvIND−CPA
D1,E
(λ,1) =1] − Pr[ExpPRO−ORAM
Aadt ,E
(λ,0) =1] ≤
(7)
(λ) +Adv Corollary 5.1
D2,shuffle
+ AdvPRP
D3,π(λ)
The AdvCorollary 5.1
cannot be greater than negl as it
D2,shuffle
would break the security of the underlying Melbourne Shufﬂe
algorithm stated in Lemma 5.1. With this, we prove that
the advantage of an adaptive adversary in distinguishing
the access patterns induced by PRO-ORAM from random
is negligible. Therefore, PRO-ORAM guarantees read-only
obliviousness.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 211