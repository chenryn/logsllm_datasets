Filter: tcp.stream eq 0
Node 0: 172.16.238.3:40368
Node 1: 172.16.238.2:1337
        596e2b00b349e78de0cc586e4582c8d70e6027f76af0220da7a31e3376447cbb
b75aa7537b306a86391733e2e66ed101ee76155ffc90da9fb05cf5bbd51f494c13bac2341b5ebe22cd432c4a7994d4bc4a3e3217f7e11075efbf54557ced4bbd1eebc033fc30bffdd8b81f0c9c96f055
        ea026bbcbe0bf219e695ec22a79b384f6c43df2db1f7df1267bf7a3409910778df09d42d5516556b3623d5ec
===================================================================
```
Looks good. We send the encrypted passphrase to the server even though we don't know how to decrypt it and get the encrypted flag from the server, although we can't decrypt that either.
For the sake of readability, we'll split the transmissions from now on:
```console
csa@9fdd7bdc3e3f:~$ exec 3<> /dev/tcp/172.16.238.2/1337
csa@9fdd7bdc3e3f:~$ echo -en "\xb7\x5a\xa7\x53\x7b\x30\x6a\x86\x39\x17\x33\xe2\xe6"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x6e\xd1\x01\xee\x76\x15\x5f\xfc\x90\xda\x9f\xb0\x5c\xf5\xbb"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xd5\x1f"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x49\x4c\x13"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xba\xc2"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x34\x1b\x5e\xbe\x22\xcd\x43\x2c\x4a\x79\x94\xd4\xbc\x4a"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x3e\x32\x17\xf7\xe1\x10"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x75\xef\xbf\x54\x55\x7c\xed"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x4b\xbd\x1e\xeb\xc0\x33\xfc\x30"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xbf\xfd\xd8\xb8\x1f\x0c\x9c\x96\xf0\x55"  1>&3
csa@9fdd7bdc3e3f:~$ read 0 /dev/tcp/172.16.238.2/1337
csa@9fdd7bdc3e3f:~$ echo -en "\xb8\x5a\xa7\x53\x7b\x30\x6a\x86\x39\x17\x33\xe2\xe6"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x6e\xd1\x01\xee\x76\x15\x5f\xfc\x90\xda\x9f\xb0\x5c\xf5\xbb"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xd5\x1f"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x49\x4c\x13"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xba\xc2"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x34\x1b\x5e\xbe\x22\xcd\x43\x2c\x4a\x79\x94\xd4\xbc\x4a"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x3e\x32\x17\xf7\xe1\x10"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x75\xef\xbf\x54\x55\x7c\xed"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x4b\xbd\x1e\xeb\xc0\x33\xfc\x30"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xbf\xfd\xd8\xb8\x1f\x0c\x9c\x96\xf0\x55"  1>&3
csa@9fdd7bdc3e3f:~$ read 0 administration
d51f -> a
```
We can corrupt another word and try again:
```console
csa@9fdd7bdc3e3f:~$ exec 3<> /dev/tcp/172.16.238.2/1337
csa@9fdd7bdc3e3f:~$ echo -en "\xb7\x5a\xa7\x53\x7b\x30\x6a\x86\x39\x17\x33\xe2\xe6"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x6f\xd1\x01\xee\x76\x15\x5f\xfc\x90\xda\x9f\xb0\x5c\xf5\xbb"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xd5\x1f"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x49\x4c\x13"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xba\xc2"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x34\x1b\x5e\xbe\x22\xcd\x43\x2c\x4a\x79\x94\xd4\xbc\x4a"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x3e\x32\x17\xf7\xe1\x10"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x75\xef\xbf\x54\x55\x7c\xed"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\x4b\xbd\x1e\xeb\xc0\x33\xfc\x30"  1>&3
csa@9fdd7bdc3e3f:~$ echo -en "\xbf\xfd\xd8\xb8\x1f\x0c\x9c\x96\xf0\x55"  1>&3
csa@9fdd7bdc3e3f:~$ read 0 a
494c13 -> as
bac2 -> I
341b5ebe22cd432c4a7994d4bc4a79 -> environment or environmental
```
We continue with this method, e.g.
```console
root@kali:/media/sf_CTFs/checkpoint/CS-hAcked# python3 decrypt.py 90f19bb1010992d8f130db7153a8a2759f
Encrypted bytes: bffdd8b81f0c9c96f055
Decrypted bytes: b'according\n
```
And we are able to decrypt most of the words:
```console
b75aa7537b306a86391733e2e6 -> ?
6ed101ee76155ffc90da9fb05cf5bb -> administration
d51f -> a
494c13 -> as
bac2 -> I
341b5ebe22cd432c4a7994d4bc4a -> environmental
3e3217f7e110 -> about
75efbf54557ced -> across
4bbd1eebc033fc30 -> ability
bffdd8b81f0c9c96f055 -> according
```
We can't control the output well enough to guess the first word, but we know according to it's length that it is either `organization` or `particularly`. We can just try both.
Note that we can decode half of the flag this way as well, but again we can't control the output well enough to decode the full flag. We'll just have to send the passphrase like intended:
```python
from Crypto.Cipher import ARC4
import socket
TCP_IP = '3.126.154.76'
TCP_PORT = 80
BUFFER_SIZE = 1024
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((TCP_IP, TCP_PORT))
data = s.recv(BUFFER_SIZE)
print ("received data: {}".format(data.decode("ascii")))
cipher = ARC4.new("csa-mitm-key")
data = s.recv(BUFFER_SIZE)
print ("received data (Length: {}): {}".format(len(data), data.hex()))
print(cipher.decrypt(data))
list = ["particularly", "administration", "a", "as", "I", "environmental", "about", "across", "ability", "according"]
for word in list:
    s.send(cipher.encrypt(word + "\n"))
data = s.recv(BUFFER_SIZE)
print ("received data: {}".format(data.hex()))
print(cipher.decrypt(data))
s.close()
```
Output:
```console
root@kali:/media/sf_CTFs/checkpoint/CS-hAcked# python3 solve.py
received data: Welcome! your RC4 key is: csa-mitm-key
received data (Length: 32): 013aa13224c14f2c4182ee087d801f1054c992a55f1bec40f3db3b9532ea38f9
b"Hi! what's the secret sequence?\n"
received data: 7b5652b5a0dd441a564ef8df3a5faf0615d90f29de4424b2c9df81b3513caf794c5c5c6e124c1081ed9bc1ab
b'CSA{i_gu355_I_need_tO_ChN4GE_mY_encrYp71On}\n'
```