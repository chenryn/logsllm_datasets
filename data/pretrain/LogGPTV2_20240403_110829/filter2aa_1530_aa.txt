作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
PHP 代码审计 
目录 
1. 概述 ...................................................................... 2 
2. 输入验证和输出显示 ......................................................... 2 
1. 
命令注入 ............................................................ 3 
2. 
跨站脚本 ............................................................ 3 
3. 
文件包含 ............................................................ 4 
4. 
代码注入 ............................................................ 4 
5. 
SQL注入 ............................................................. 4 
6. 
XPath 注入 ........................................................... 4 
7. 
HTTP响应拆分 ........................................................ 5 
8. 
文件管理 ............................................................ 5 
9. 
文件上传 ............................................................ 5 
10. 
变量覆盖 ............................................................ 5 
11. 
动态函数 ............................................................ 6 
3. 会话安全 .................................................................. 6 
1. 
HTTPOnly设置 ........................................................ 6 
2. 
domain 设置 .......................................................... 6 
3. 
path设置 ............................................................ 6 
4. 
cookies持续时间 ...................................................... 6 
5. 
secure 设置 .......................................................... 6 
6. 
session固定 ......................................................... 7 
7. 
CSRF ................................................................ 7 
4. 加密 ...................................................................... 7 
1. 
明文存储密码 ......................................................... 7 
2. 
密码弱加密........................................................... 7 
3. 
密码存储在攻击者能访问到的文件 ......................................... 7 
5. 认证和授权................................................................. 7 
1. 
用户认证 ............................................................ 7 
1. 
函数或文件的未认证调用 ................................................ 7 
3. 
密码硬编码........................................................... 8 
6. 随机函数 .................................................................. 8 
1. 
rand() .............................................................. 8 
2. 
mt_srand()和mt_rand() ................................................ 8 
7. 特殊字符和多字节编码 ........................................................ 8 
1. 
多字节编码........................................................... 8 
8. PHP危险函数 ............................................................... 8 
1. 
缓冲区溢出........................................................... 8 
2. 
session_destroy()删除文件漏洞 .......................................... 9 
3. 
unset()-zend_hash_del_key_or_index漏洞 ................................. 9 
9. 信息泄露 ................................................................. 10 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
1. 
phpinfo ............................................................ 10 
10. 
PHP环境 ................................................................ 10 
1. 
open_basedir设置 .................................................... 10 
2. 
allow_url_fopen 设置 ................................................. 10 
3. 
>allow_url_include 设置 ............................................ 10 
4. 
safe_mode_exec_dir设置 .............................................. 10 
5. 
magic_quote_gpc 设置 ................................................. 10 
6. 
register_globals 设置 ................................................ 11 
7. 
safe_mode设置 ...................................................... 11 
8. 
session_use_trans_sid 设置 ............................................ 11 
9. 
display_errors设置 .................................................. 11 
10. 
expose_php 设置...................................................... 11 
1. 
概述 
代码审核，是对应用程序源代码进行系统性检查的工作。它的目的是为了找到并且修复应
用程序在开发阶段存在的一些漏洞或者程序逻辑错误，避免程序漏洞被非法利用给企业带来不必
要的风险。 
代码审核不是简单的检查代码，审核代码的原因是确保代码能安全的做到对信息和资源进
行足够的保护，所以熟悉整个应用程序的业务流程对于控制潜在的风险是非常重要的。审核人员
可以使用类似下面的问题对开发者进行访谈，来收集应用程序信息。 
应用程序中包含什么类型的敏感信息，应用程序怎么保护这些信息的？ 
应用程序是对内提供服务，还是对外？哪些人会使用，他们都是可信用户么？ 
应用程序部署在哪里？ 
应用程序对于企业的重要性？ 
最好的方式是做一个 checklist，让开发人员填写。Checklist 能比较直观的反映应用程序
的信息和开发人员所做的编码安全，它应该涵盖可能存在严重漏洞的模块，例如：数据验证、身
份认证、会话管理、授权、加密、错误处理、日志、安全配置、网络架构。 
2. 
 输入验证和输出显示 
大多数漏洞的形成原因主要都是未对输入数据进行安全验证或对输出数据未经过安全处理，
比较严格的数据验证方式为： 
1. 对数据进行精确匹配 
2. 接受白名单的数据 
3. 拒绝黑名单的数据 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
4. 对匹配黑名单的数据进行编码 
在 PHP 中可由用户输入的变量列表如下： 
$_SERVER 
$_GET 
$_POST 
$_COOKIE 
$_REQUEST 
$_FILES 
$_ENV 
$_HTTP_COOKIE_VARS 
$_HTTP_ENV_VARS 
$_HTTP_GET_VARS 
$_HTTP_POST_FILES 
$_HTTP_POST_VARS 
$_HTTP_SERVER_VARS 
我们应该对这些输入变量进行检查 
1.  命令注入 
PHP 执行系统命令可以使用以下几个函数：system、exec、passthru、“、shell_exec、
popen、proc_open、pcntl_exec 
我们通过在全部程序文件中搜索这些函数，确定函数的参数是否会因为外部提交而改变，
检查这些参数是否有经过安全处理。 
防范方法： 
1. 使用自定义函数或函数库来替代外部命令的功能 
2. 使用 escapeshellarg 函数来处理命令参数 
3. 使用 safe_mode_exec_dir 指定可执行文件的路径 
2.  跨站脚本 
反射型跨站常常出现在用户提交的变量接受以后经过处理，直接输出显示给客户端；存储
型跨站常常出现在用户提交的变量接受过经过处理后，存储在数据库里，然后又从数据库中读取
到此信息输出到客户端。输出函数经常使用：echo、print、printf、vprintf、 
对于反射型跨站，因为是立即输出显示给客户端，所以应该在当前的 php 页面检查变量被
客户提交之后有无立即显示，在这个过程中变量是否有经过安全检查。 
对于存储型跨站，检查变量在输入后入库，又输出显示的这个过程中，变量是否有经过安
全检查。 
防范方法： 
1. 如果输入数据只包含字母和数字，那么任何特殊字符都应当阻止 
2. 对输入的数据经行严格匹配，比如邮件格式，用户名只包含英文或者中文、下划线、连字符 
3. 对输出进行 HTML 编码，编码规范 
 &gt; 
作者:http://www.sectop.com/  
文档制作:http://www.mythhack.com 
( &#40; 
) &#41; 
# &#35; 
& &amp; 
" &quot; 
‘ &apos; 
` %60 
3.  文件包含 
PHP 可能出现文件包含的函数：include、include_once、require、require_once、
show_source、highlight_file、readfile、file_get_contents、fopen、 nt>file 
防范方法： 
1. 对输入数据进行精确匹配，比如根据变量的值确定语言 en.php、cn.php，那么这两个文件放在
同一个目录下’language/’.$_POST[‘lang’].’.php’，那么检查提交的数据是否是 en 或者
cn 是最严格的，检查是否只包含字母也不错 
2. 通过过滤参数中的/、..等字符 
4.  代码注入 
PHP 可能出现代码注入的函数：eval、preg_replace+/e、assert、call_user_func、
call_user_func_array、create_function 
查找程序中程序中使用这些函数的地方，检查提交变量是否用户可控，有无做输入验证 
防范方法： 
1. 输入数据精确匹配 
2. 白名单方式过滤可执行的函数 
5.  SQL 注入 
SQL 注入因为要操作数据库，所以一般会查找 SQL 语句关键字：insert、delete、update、
select，查看传递的变量参数是否用户可控制，有无做过安全处理 
防范方法： 
使用参数化查询 
6.  XPath 注入 
Xpath 用于操作 xml，我们通过搜索 xpath 来分析，提交给xpath</fo 