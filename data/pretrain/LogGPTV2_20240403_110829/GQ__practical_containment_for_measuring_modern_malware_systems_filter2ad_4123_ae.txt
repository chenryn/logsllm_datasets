5.9
6.6
6.6
8.6
24.4
7.9
10.4
329.7
11.3
20.1
24.9
27.5
27.5
63.1
76.1
18.0
58.2
210.9
9.4
7.2
10.0
32.5
34.2
4.8
7.0
4.1
5.3
5.4
5.6
5.0
4.3
5.4
186.7
208.9
384.9
Table 1: Self-propagating worms caught by GQ in early 2006.
Events correspond to total infections during the course of the
experiment with the same executable. Next come the numbers
of connections needed per infection to complete the propaga-
tion, and incubation times (the delay from initial infection in
our farm to subsequent infection of the next inmate). We show
delays of over 3 minutes in bold.
string. This caused us to stop the policy of allowing even seemingly
innocuous non-spam test SMTP exchanges.
Satisfying ﬁdelity. It soon turned out that Waledac was not the
only spambot family whose members paid close attention to the
greeting banners returned by the SMTP servers. As a consequence,
we upgraded our SMTP sink to support banner grabbing for se-
lect connections: SMTP requests to a hitherto unseen host now
caused the sink to actually connect out to the target SMTP server
and obtain the greeting message, relaying it back to the spambot.
The more closely malware tracks whether the responding entity be-
haves as expected, the more likely we are to get drawn into an arms
race of emulating and testing ﬁdelity.
Protocol violations. On several occasions during our ongoing
extraction of spam from spambots [18], our spam harvest account-
ing looked healthy at the connection level (since many connections
ensued), but, upon closer inspection, meager at the content level
(since for some bot families no actual message body transmission
occurred). Closer investigation revealed that our SMTP sink proto-
col engine followed the SMTP speciﬁcation [26] too closely, pre-
venting the protocol state machine from ever reaching the DATA
stage. The protocol discrepancies included such seemingly mun-
dane details as repeated HELO/EHLO greetings or the format of
email addresses in MAIL FROM and RCPT TO stanzas (with or
without colons, with or without angle brackets).
Exploratory containment. Containment policy development
need not always try to facilitate continuous malware operation. To
better understand a sample, we frequently ﬁnd it equally important
to create speciﬁc environmental conditions under which the sample
will exhibit new behavior. In preparing for our inﬁltration of Storm,
we tried to understand the meaning of the error codes returned in
Storm’s delivery reports [18] using a dual approach of live experi-
mentation, in which we exposed the samples to speciﬁc error condi-
tions during SMTP transactions, and binary analysis. Interestingly,
neither approach could individually explain all behavior, but by
iterating alternation of the two—live experimentation conﬁrming
conjectures developed during binary analysis, and vice versa—we
eventually identiﬁed the error codes’ meanings. We used this ap-
proach again during our inﬁltration of the MegaD botnet [4]. Here,
live experimentation allowed us to conﬁrm the correct functional-
ity of the extracted C&C protocol engine. During a recent inves-
tigation of clickbots [21] we used the approach to understand the
precise HTTP context of some of the bots’ C&C requests.
Unclear phylogenies. When we take specimens supposedly be-
longing to malware family X and subject them to a corresponding
containment policy, we implicitly assume that this family member-
ship is in fact correct and that other samples belonging to family
X will exhibit behavioral similarity. We ﬁnd this assumption in-
creasingly violated in practice. We have repeatedly observed third
parties labeling samples inconsistently, including cases of split per-
sonalities in malware: in February 2010 we encountered a spec-
imen that at times showed MegaD’s C&C behavior, and at other
times behaved like a member of the Grum family. While tight con-
tainment ensures that our operation causes no harm when contain-
ment policy and observed behavior mismatch, it casts doubt on the
appealing idea of developing a library of containment policies from
which we can easily pick the appropriate one. A batch-processing
setup that enables some extent of automated family classiﬁcation is
thus an important tool to have. To this end, we reﬂect all outgoing
network activity to our catch-all sink and apply network-level ﬁn-
gerprinting on the samples’ initial activity trace. We have success-
fully used this approach to classify approximately 10,000 unique
malware samples that we harvested from pay-per-install distribu-
tion servers [3].
4067.2 System scalability
Traditional honeyfarms such as Potemkin [29] place a strong
emphasis on scalability of the inmate population:
these systems
quickly “ﬂash-clone” new inmates to provide additional infectees
as needed. For the worm model this made sense—it requires in-
fectee chains to reliably identify infections, and the assumption that
any incoming ﬂow may constitute a potential worm infection im-
plies the need to set aside resources potentially for each sender of
trafﬁc received in the honeyfarm’s IP address range. Today’s re-
quirements for malware execution have shifted. Self-propagating
malware infections are not extinct, but play less of a role in today’s
landscape, and typically use entirely different vectors (such as the
user’s activity on speciﬁc websites, as in the case of Koobface [28]).
Correspondingly, careful ﬁltering and resource management related
to unsolicited, inbound trafﬁc has become less pressing, particu-
larly when considering the typical scenario of home-user machines
deployed behind network address translators. We ﬁnd it more im-
portant to achieve scalability in terms of providing independent ex-
periments at varying stages of “production-readiness” (including
development of the farm architecture itself) with moderate require-
ments of inmate population size, and convenient mechanisms for
intentional, controlled infection of the inmate population. GQ’s ar-
chitecture reﬂects these considerations.
The architecture we outlined in § 5 constrains scalability as fol-
lows. First, VLAN IDs are a limited resource. The IEEE 802.1Q
standard limits the VLAN ID to twelve bits, allowing up to 4,096
inmates. However, physical switches frequently support less. Nat-
urally, we can avoid this limitation by moving to multiple inmate
networks and prepending a gateway-internal network identiﬁer to
VLAN IDs for purposes of identifying inmates. Second, with a
large number of inmates in a single subfarm, a single containment
server becomes a bottleneck, as it has to interpose on all ﬂows in the
subfarm. We can address this situation in a straightforward manner
by moving to a cluster of containment servers, managed by the sub-
farm’s packet router. We would simply need to extend the router’s
ﬂow state table entries to include an identiﬁer of the containment
server responsible for the ﬂow. Several containment server selec-
tion policies come to mind, such as random selection under the con-
straint that the same containment server always handles the same
inmate. Third, similarly to the containment server, the central gate-
way itself becomes a bottleneck as the number of inmates and sub-
farms grows. To date, we have not found this problematic:
the
same 3Ghz quad-core Xeon machine with 5GB of memory that
we deployed six years ago still serves us well today, running 5-6
subfarms in parallel with populations ranging from a handful to a
dozen of inmates. Fourth, our globally routable IP address space is
of limited size, creating an incentive to avoid blacklisting and leak-
ing of our actively used addresses to reduce the rate at which we
“burn through” this address space. Currently we ﬁnd our address
allocations sufﬁcient. Should this change, we may opt to use GRE
tunnels in order to connect additional routable address space avail-
able in other networks (provided by colleagues or interested third
parties) to the system.
8. CONCLUSION
The GQ malware farm introduces containment as a ﬁrst-order
component in support of malware analysis. In building and operat-
ing GQ for six years, we have come to treat containment itself as
a tool that can improve our understanding of monitored malware.
While modern malware increasingly resists longitudinal analysis
in completely contained environments, GQ not only allows but en-
courages ﬂexible and precise containment policies while maintain-
ing acceptable safety. With ongoing development, we anticipate
it continuing to provide core functionality for monitoring malware
and botnet operation well into the future.
We fully acknowledge the manual and—depending on the spec-
imen at hand—time-consuming nature of this process. But, cru-
cially, GQ makes this process both explicit and feasible. While re-
cent work on automated C&C protocol extraction from binaries [4,
17] could aid in understanding the signiﬁcance of individual ﬂows,
these automated approaches currently cannot provide the under-
standing that human-driven analysis of an inmate’s trafﬁc produces.
The language in which we express containment policies in the con-
tainment server forms another area of future work. The primary
reason for our current use of Python is experience and convenience,
but the general-purpose nature of the language complicates the cre-
ation of a tool-chain for processing policies. For example, a traf-
ﬁc generation tool that can automatically produce test cases for a
given concrete containment policy would strengthen conﬁdence in
the policy’s correctness signiﬁcantly. A more domain-speciﬁc, ab-
stract language (like in Bro [24]) could simplify this.
It behooves us to contemplate the consequences of a containment
arms race, in which malware authors explicitly try to defeat our ap-
proach to containment. It is easy to see—as mentioned by John
et al. [12]—that botmasters can construct circumstances in which
malware will cease to function as desired, despite our best efforts.
For example, spam campaigners could scatter control groups of
email addresses among the spam target lists and require success-
ful delivery of messages to these addresses to keep a bot spam-
ming. However, we remain optimistic about the feasibility of pro-
viding safe containment for new malware types. First, in practice
the majority of specimens we encounter still possesses readily dis-
tinguishable C&C protocols. Second, we note the conceptual dif-
ference between achieving the desired goal of executing malware
(say, longitudinal harvesting of spam messages) and tight contain-
ment preventing harm to others. While the former may fail, in our
experience we can guarantee the latter, given tight containment. We
thus believe that we can operate malware safely to the point of at-
tack and control trafﬁc becoming so blended that we can no longer
meaningfully distinguish them.
Acknowledgements
This work has spanned many years, and would not have been pos-
sible without the support of many parties. We wish to thank the
U.S. Department of Energy’s ESnet, Hewlett/Packard, Microsoft,
and VMware for their generous in-kind donations used to construct
and operate GQ. We particularly wish to thank Randy Bush, Eli
Dart, Chris Grier, Craig Leres, Stefan Savage, Helen Wang, and
our colleagues at the Lawrence Berkeley National Laboratory and
the University of California, San Diego, for assistance and feed-
back during GQ’s ﬁve years of operation. This work was supported
in part by National Science Foundation grants NSF-0433702, CNS-
0831535, and CNS-0905631, and by the Ofﬁce of Naval Research
MURI grant N000140911081. Any opinions, ﬁndings, and conclu-
sions or recommendations expressed in this material are those of
the authors and do not necessarily reﬂect the views of the funders.
9. REFERENCES
[1] P. Barford and M. Blodgett. Toward botnet mesocosms. In
Proceedings of the First Workshop on Hot Topics in
Understanding Botnets, Berkeley, CA, USA, 2007. USENIX
Association.
[2] U. Bayer, C. Kruegel, and E. Kirda. TTAnalyze: A tool for
analyzing malware. In 15th Annual Conference of the
407European Institute for Computer Antivirus Research
(EICAR), 2006.
[3] J. Caballero, C. Grier, C. Kreibich, and V. Paxson.
Measuring Pay-per-Install: The Commoditization of
Malware Distribution. In Proceedings of the 20th USENIX
Security Symposium, San Francisco, CA, USA, August 2011.
[4] J. Caballero, P. Poosankam, C. Kreibich, and D. Song.
Dispatcher: Enabling active botnet inﬁltration using
automatic protocol reverse-engineering. In Proceedings of
the 16th ACM CCS, pages 621–634, Chicago, IL, USA,
November 2009.
[5] J. Calvet, C. R. Davis, J. M. Fernandez, J.-Y. Marion, P.-L.
St-Onge, W. Guizani, P.-M. Bureau, and A. Somayaji. The
case for in-the-lab botnet experimentation: creating and
taking down a 3000-node botnet. In Proceedings of the 26th
ACSAC Conference, pages 141–150, New York, NY, USA,
2010. ACM.
[6] CBL. Composite Blocking List.
http://cbl.abuseat.org, 2003.
[7] J. Chen, J. McCullough, and A. C. Snoeren. Universal
Honeyfarm Containment. Technical Report CS2007-0902,
UCSD, September 2007.
[8] X. Chen, J. Andersen, Z. Mao, M. Bailey, and J. Nazario.
Towards an understanding of anti-virtualization and
anti-debugging behavior in modern malware. In Proceedings
of the 38th Conference on Dependable Systems and
Networks (DSN), pages 177–186. IEEE, 2008.
[9] W. Cui, V. Paxson, and N. Weaver. GQ: Realizing a System
to Catch Worms in a Quarter Million Places. Technical
Report TR-06-004, International Computer Science Institute,
September 2006.
[10] A. W. Jackson, D. Lapsley, C. Jones, M. Zatko,
C. Golubitsky, and W. T. Strayer. SLINGbot: A System for
Live Investigation of Next Generation Botnets. In
Proceedings of the 2009 Cybersecurity Applications &
Technology Conference for Homeland Security, pages
313–318, Washington, DC, USA, 2009. IEEE Computer
Society.
[11] X. Jiang and D. Xu. Collapsar: A VM-based architecture for
network attack detention center. In Proceedings of the 13th
USENIX Security Symposium, page 2. USENIX Association,
2004.
[12] J. John, A. Moshchuk, S. Gribble, and A. Krishnamurthy.
Studying spamming botnets using Botlab. In Proceedings of
the 6th USENIX Symposium on Networked Systems Design
and Implementation, pages 291–306. USENIX Association,
2009.
[13] C. Kanich, C. Kreibich, K. Levchenko, B. Enright, G. M.
Voelker, V. Paxson, and S. Savage. Spamalytics: An
empirical analysis of spam marketing conversion. In
Proceedings of the 15th ACM Conference on Computer and
Communications Security, pages 3–14, Alexandria, Virginia,
USA, October 2008.
[14] T. Kerremans and B. Verstricht. Trinity Rescue Kit.
http://trinityhome.org.
[15] D. Koblas. SOCKS. In Proceedings of the 3rd USENIX
Security Symposium. USENIX Association, September 1992.
[16] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. Kaashoek.
The Click modular router. ACM Transactions on Computer