title:Active Botnet Probing to Identify Obscure Command and Control Channels
author:Guofei Gu and
Vinod Yegneswaran and
Phillip A. Porras and
Jennifer Stoll and
Wenke Lee
Active Botnet Probing to Identify Obscure Command and Control Channels
Guofei Gu1, Vinod Yegneswaran2, Phillip Porras2, Jennifer Stoll3, and Wenke Lee3
3Georgia Institute of Technology
1Texas A&M University
PI:EMAIL, {vinod, porras}@csl.sri.com, {jstoll@,wenke@cc.}gatech.edu
2SRI International
Abstract—We consider the problem of identifying obscure
chat-like botnet command and control (C&C) communications,
which are indistinguishable from human-human communi-
cation using traditional signature-based techniques. Existing
passive-behavior-based anomaly detection techniques are lim-
ited because they either require monitoring multiple bot-
infected machines that belong to the same botnet or require
extended monitoring times. In this paper, we explore the
potential use of active botnet probing techniques in a network
middlebox as a means to augment and complement existing
passive botnet C&C detection strategies, especially for small
botnets with obfuscated C&C content and infrequent C&C
interactions. We present an algorithmic framework that uses
hypothesis testing to separate botnet C&C dialogs from human-
human conversations with desired accuracy and implement
a prototype system called BotProbe. Experimental results on
multiple real-world IRC bots demonstrate that our proposed
active methods can successfully identify obscure and obfuscated
botnet communications. A real-world user study on about
one hundred participants also shows that the technique has
a low false positive rate on human-human conversations. We
discuss the limitations of BotProbe and hope this preliminary
feasibility study on the use of active techniques in botnet
research can inspire new thoughts and directions within the
malware research community.
I. INTRODUCTION
Botnets refer to large collections of compromised ma-
chines infected with a speciﬁc malware instance (i.e., a bot),
which enable them to be commandeered by an individual
often referred to as a “botmaster”. Botnets may range
in size from tens to hundreds of thousands of systems,
often spanning a multitude of home, educational and cor-
porate networks, and are typically exploited as platforms
for conducting a wide range of criminal activities, including
spam campaigns, identity theft, and denial-of-service (DoS)
attacks. The magnitude of these collections and the potency
of attacks afforded by their combined bandwidth and pro-
cessing power have led to a recognition of botnets as one
of the premier threats to Internet security.
A unique property of a botnet that separates it from
other malware families is the command and control (C&C)
channel, which the botmaster uses to command the bot
army to perform different tasks. Although botnet developers
have the option of devising novel protocols for C&C, most
contemporary botnet C&C communications are overlaid
onto existing protocols such as IRC (Internet Relay Chat)
and HTTP. This prevailing tendency to overlay botnet C&Cs
on existing protocols may have several plausible explana-
tions: (a) existing protocols provide greater ﬂexibility in
using available server software and installations; (b) existing
protocols invoke less suspicion than neoteric protocols; (c)
existing protocols work so well so that there is no sufﬁcient
incentive for botnets to innovate.
Although HTTP-based botnets (e.g., Bobax [26] and its
new variant Kraken) and P2P botnets (e.g., Nugache [19],
Storm [11], and Conﬁcker [22]) have recently garnered con-
siderable attention, we should note that IRC-based botnets
remain a lingering and signiﬁcant threat [2], [6]. The persis-
tence of IRC-based botnet communication channels could be
attributed to the simplicity and ﬂexibility afforded by IRC’s
text-based protocol. In addition, contemporary IRC botnets
have evolved from simple dialects to a new era where C&C
content in IRC messages are obfuscated (e.g., using a custom
dialect, a foreign language, or a naive obfuscation technique
such as simple XOR, substitution, or hashing). By using
obfuscated IRC messages (e.g., “hello” instead of “scan”),
these botnets can evade signature-based detection [10], [21],
[25] and honeypot-based tracking approaches [23]. Indeed,
we have observed a substantial collection of current IRC
botnets utilizing obscure C&C communications [2], [6].
Behavior-based botnet detection approaches can detect
botnets through behavioral anomalies. Many such systems
have been proposed recently [12]–[14], [17], [27], [34].
However, they all have limitations. Some techniques (e.g.,
[12], [14], [17], [27], [34]) use group analysis for detection.
However, these techniques require the presence of multiple
bots in the monitored network and cannot help much when
there is only one infection in the network. Furthermore,
techniques such as (e.g., [12], [14]) may require a longer
time in collecting sufﬁcient evidence for detection. For
example, BotMiner has an ofﬂine correlation engine that
performs daily group analysis on C-plane data. BotSniffer
is more agile than BotMiner, but still requires observing
several rounds of messages to gather sufﬁcient conﬁdence
in its spatio-temporal correlation. BotHunter uses a (mainly)
signature-based approach to track bot infection dialogs and
requires observing activity from multiple stages of the bot
lifecycle to declare an infection. In contrast, real-world IRC-
based botnet C&C communications can be quiet, i.e., some
have infrequent C&C interactions because the botmaster is
not always online to command the bot army. If the frequency
of C&C interactions is low enough, botnets could potentially
evade detection by these systems. Indeed, steathy botnets
with small sizes, obfuscated C&C dialogs, and infrequent
C&C interactions pose an ongoing challenge to the malware
research community.
To address
this challenge, we explore new botnet
detection techniques that actively collect evidence. We
intend to answer the following questions: Assume there
is only one round of
(obscure) chat-like botnet C&C
interaction from one bot,1 can we still detect the bot with
a high probability? What if we observe zero rounds of
interaction? We will show that our solution can achieve
the detection goal for many real-world botnets that use
chat-like C&C protocols such as IRC, and complement
existing techniques in many cases.
Key Observations: We posit
that instead of passively
inspecting two-way network ﬂows, one can engage in
the active manipulation of selected suspicious sessions
to better identify botnet dialogs. Our detection strategy,
which we call active botnet probing,
is based on two
observations. First, a typical botnet C&C interaction has a
clear command-response pattern, and therefore a stateless
bot will tend to behave deterministically2 to dialog replays,
whereas interaction with a human-controlled end point will
be nondeterministic. Second, bots are preprogrammed to
respond to the set of commands they receive and, unlike
humans, bots have limited tolerance for typographical errors
in conversations (aka the Turing test [28]).
detect
stateless
chat-like botnet
communications/chatting. While
New Approach and System:
Based on the above
observations, we develop a set of active probing techniques
to
communications,
regardless of whether or not the botnet communications
are protected using simple obfuscation. At ﬁrst glance,
these active techniques may be aggressive and controversial
because of the interference they may introduce to normal
benign
legitimate
concern, we propose to ameliorate this interference in
multiple ways. First, we provide a set of candidate ﬁlters
that use heuristics to ﬁlter out a large class of well-behaved
connections. Second, we provide a hypothesis testing
framework that enables network administrators to tune
the level of expected interference with detection rates. In
addition, a whitelist approach to avoid disturbing known
critical/legitimate programs/sessions can also be used to
reduce potential interference. Finally, we argue that limited
interference might be acceptable in pure IRC-like chatting
channels on which no critical applications are built, and
certain deployments such as military scenarios, particularly
a
1One round of C&C interaction is deﬁned as a typical command-then-
response interaction. We further clarify this command-response pattern of
botnet C&C and various types of responses in Section II.
2Examination of popular bot source code and binaries reveals that most
bot communications are stateless.
if users are educated about the presence of such probing
monitors. We develop the BotProbe prototype system to
demonstrate this active technique. By actively probing
botnets, we can accumulate enough evidence (without
passively waiting) of cause-effect correlation that exploits
the command-response patterns of botnet C&Cs. We need
to observe only one or even zero rounds of actual C&C
interaction before probing. Thus, we can greatly shorten
the detection time compared to a passive approach.
Contributions of this paper:
(cid:129) We propose active botnet probing based on cause-
effect correlation as a novel approach to complement
existing passive botnet C&C detection. We envision the
detection of future botnets will require a combination
of different detection features and techniques because
botnets are very complex and dynamic. We believe
our proposed new active probing technique, although
has limitations, can provide a unique perspective and
inspire new research directions.
(cid:129) We present a hypothesis testing framework for detect-
ing deterministic communication patterns. We develop
BotProbe, a prototype implementation of the frame-
work that validates our approach with contemporary
IRC-based bots such as Sdbot, Phatbot, Rbot, RxBot,
Agobot, Wargbot, and IRCBot. In addition, we show
with a real-world example that BotProbe can also assist
with automating a chosen-ciphertext attack to break the
encryption of some botnet C&C.
(cid:129) We conduct a real user study on around 100 users to
evaluate false positive rates.
II. PROBLEM STATEMENT AND ASSUMPTIONS
Our goal is to evaluate the feasibility of identifying chat-
like botnet C&C channels using active network trafﬁc in-
spection strategies, while observing only a limited number of
C&C interactions (one or even zero) on a single bot, thereby
to complement existing passive approaches. By active, we
mean that we assess trafﬁc for suspicious trafﬁc sessions,
which may lead us to dynamically inject packets that will
probe the internal client to determine whether that side of
the communicating/chatting session is being managed by a
human or a bot. To achieve the goal, ﬁrst we need to examine
the invariant that can be used to differentiate a bot from
human chatting. We observe that bots are preprogrammed
to respond to certain predeﬁned commands, and these re-
sponses are consistent across command repetition. Different
from normal human chatting, the above command-response
pattern has a strong cause-effect correlation, i.e., the com-
mand causes the response in a deterministic way. This is the
key intuition we use in designing our algorithm. In addition,
we observe that bots are different from humans in tolerating
typographical errors, i.e., if the command is altered by even
one character, bots are not likely to process the command
properly. This auxiliary intuition helps us design one of our
detection algorithms. Before introducing our algorithms and
system in detail, we present the adversary model, i.e., the
detailed communication patterns that we seek to identify
when adversaries communicate with compromised machines
inside our network perimeter.
We now discuss our adversary and detection assumptions
below. We will discuss limitations and policy/risk concern
further in Section V.
Adversary Assumption: Botnet C&C communications
are well-structured duplex ﬂows, similar to a command-
response protocol, i.e., a bot should respond when it re-
ceives a predeﬁned command in a reasonable time. The
network-level response of a bot to an (obfuscated) command
might be either message response or activity response, or
both [14]. A typical example of message response is an
IRC PRIVMSG message. For example, when the botmaster
issues a “.sysinfo” command,3 each bot replies with
a PRIVMSG message telling its host system information,
such as CPU, memory, and software version. There are
three most common activity responses: scan response (bots
perform network scan or DoS attack), third-party access
(e.g., bots connect to a certain address to download/update
their binary), and spam response (bots send spams). For
instance, when the botmaster issues a scanning command
(e.g., “.scan.startall”), bots usually perform network
scanning and reply with the scanning progress and/or any
new victims they have infected. This involves both an
activity response (scan) and a message response. One may
deﬁne other possible responses, but from our observation of
live bot infections, these aforementioned types of responses
are highly representative and regularly encountered.
Fortunately, the assumption of command-response pattern
holds in almost all existing botnets, because the botmaster
needs the bots to perform some (malicious) activity, and
usually requires feedback to track the bot-infected machine
information and execution progress/result from its bot army.
Thus, we can observe message/activity responses corre-
sponding to most botnet commands. According to a hon-
eynet technical report [36], about 53% of botnet commands
observed in thousands of real-world IRC-based botnets are
scan related (for propagation or reconnaissance) and about
14.4% are related to binary download (for malware up-
date). Also, many HTTP-based botnets are primarily used
for sending spam [26]. Thus, for most infections, we can
expect to observe (malicious) activity responses with a high
probability [5].
Detection Assumption: We now discuss the design as-
sumptions used in deﬁning our architecture for actively
probing and detecting botnet C&C channels:
(cid:129) Input Perspective. Our assumed solution will reside at
the network egress point (as a middlebox), where it
can observe all ﬂows that cross the network perimeter.
Furthermore, the system is in-line with the communica-
tion, and has the authority to inject or modify inbound
packets, as necessary.
(cid:129) Chat Protocol Awareness. Our solution incorporates
knowledge of the standard (chat) protocols that botnets
use to overlay their C&C communications. For exam-
ple, in the case of IRC-based bots, we can comprehend
IRC keywords and PRIVMSG message exchanges.
III. ACTIVE BOTNET PROBING: ARCHITECTURE AND
ALGORITHMS
A. Architecture Design
Our botnet C&C detection architecture has two integral
components, as shown in Figure 1.
Filtering,
Protocol matching,
Sampling
Active Probing,
Hypothesis testing
Network   Traffic
Network   Traffic
Internet
Router Middlebox
...
Figure 1. Two-layer architecture using active techniques for identifying
botnet C&Cs.
The ﬁrst component performs benign trafﬁc ﬁltering,
protocol matching (selects protocols often exploited for
C&C transmissions, e.g., IRC), and ﬂow sampling. Thus, it
leaves only a small portion of highly suspicious candidates
worthy of deeper examination.4 Benign (chat-like) trafﬁc
ﬁltering modules are implemented using a general trafﬁc
feature vector (e.g., duration of the ﬂow, average bytes per
packet, average bytes per second) similar to [17], [20], [27].
Finally, in the case of IRC-based C&C, we use the following
protocol matching policies to perform detection in a port-
independent fashion:
1) A trafﬁc ﬁlter removes non-TCP ﬂows.
2) Port-independent IRC protocols are keyword matched,
e.g., “NICK,” “USER,” “PRIVMSG.” This analysis
occurs on the ﬁrst few packets of established TCP
ﬂows (which indicate the beginning of an IRC session
[1]).
3) A volume ﬁlter mainly focuses on infrequent IRC
chat channels (because overly chatty IRC channels are
unlikely to be used for botnet C&C).
3We assume the botmaster could obfuscate the C&C channel using simple
encryption or substitution, e.g., say “hello” instead of “.sysinfo.”
4As always, this is a trade-off between performance and accuracy.
4) A message ﬁlter ﬁnds a candidate list of command-
like packets (IRC PRIVMSG and IRC TOPIC) that
can cause client responses.
Once we have completed the above down-selection to our
candidate ﬂows, we then focus our analyses on the TOPIC
and PRIVMSG message packets, where the overlay C&C
commands/responses typically reside. In addition, one can
incorporate any other behavior-based logic into these ﬁlters.
The second component implements what we refer to as
our BotProbe analysis scheme. To illustrate the scheme, let
us suppose that we have a candidate suspicious IRC session
and we need to further identify whether there is another layer
of overlay C&C-like protocol. We observe a command-then-
response-like packet pair (Pc, Pr) where Pc is a short packet
from the server, and Pr is a response from the client imme-
diately after the receiving of Pc.5 We hypothesize that this
command-response pattern is from a bot instead of a human.
However, observing only this likely command-response pair
is not enough to make the claim, because it could be caused
by chance.6 We want to make sure whether there is truly
a cause-effect correlation between the command and the
response, which is a distinguishing feature between botnet
C&C and human chatting. To achieve the detection goal with
high accuracy, we perform several rounds of active probing
and use a sequential hypothesis testing technique to obtain
enough conﬁdence. The next section will detail the design
space of active probing techniques.
B. Design Choices of Active Probing Techniques
We investigate the design space of active probing strate-
gies and illustrate in Figure 2 several probing techniques
that were considered in our BotProbe system.
P0 (Explicit-Challenge-Response). An example explicit-
validation mechanism is one in which educated users know-
ingly participate in the BotProbe scheme. The BotProbe
system may prompt users to perform a reverse Turing test,
when a new IRC session among two IP addresses is ﬁrst
encountered by BotProbe. The in-line monitor could request
that the internal human IRC participant visit a website to
read and translate a CAPTCHA [29]. Alternatively, BotProbe
can inject a simple puzzle for the internal participant to
solve. Using this technique, one may detect botnet channels
before observing actual C&Cs, i.e., observing zero rounds
of interaction. Although simple and effective, such a tech-
nique requires user awareness, compliance, and tolerance
to be successful. We further discuss our experience of this
technique in an actual user study in Section IV-C.