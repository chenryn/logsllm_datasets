Huawei
Samsung
Mediatek
Android Kernel
Version
3.18
3.10
3.10
3.10
4.1
3.10
3.18
Figure 2: CDF of percentage of ioctl handlers to the number
of valid command identifiers
devices. The number of handlers also closely correspond to the
number of drivers on the corresponding phone.
Device Name Identification: Our approach for device name
identification (Section 4.3) is able to work on different vendor-
specific devices. DIFUZE can automatically identify 469 device
names, accounting for 59.44% of the ioctl handlers. Most of the
identification failures come from kernel mainline drivers. For ex-
ample, our name recovery on only vendor drivers of the Xperia XA
was able to recover more than 90% of the names. The reason for
this discrepancy is that mainline drivers tend to use dynamically
generated names (Listing 5 and Section 4.3) whereas vendor drivers
tend to use static names. We manually extracted those dynamically
created device names.
Valid Command Identifiers: The fourth column of Table 3
shows the number of valid command identifiers extracted across
all the entry points of the corresponding kernels. In total, DIFUZE
found 3,565 valid command identifiers across all the drivers of all
kernels. The numbers of valid command identifiers vary consider-
ably across different kernels. As we will show in Tables 3 and 5, the
number of crashes the fuzzer found is positively correlated with
the number of valid command identifiers.
Figure 2 shows the distribution of the number of valid command
identifiers per ioctl handler. 11% of the ioctl handlers do not
expect any command. The code of these ioctls is conditionally
Number of valid command identifiers051015202530354045505560Cumulative perentage (%) of ioctl handlers0  10 20 30 40 50 60 70 80 90 100Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2131Table 3: Interfaces recovered by DIFUZE on different kernels of the Phones.
no copy_from_user
Scalar
Struct with pointers
User Argument Types
ioctl
handlers Automatically Identified
Device Names
Valid Command
Identifiers
193
77
171
71
86
106
85
789
136
36
122
30
33
70
42
469
611
610
563
384
376
364
657
3,565
Pixel
E9 Plus
M9
P9 Lite
Honor 8
Galaxy S6
Xperia XA
Total
270
272
216
187
208
243
292
1,688
Struct
151
195
149
118
87
67
194
961
87
101
83
56
70
23
106
526
103
42
115
23
11
31
65
390
compiled and guarded by kernel configurations. During our com-
pilation, the ioctl handler code is disabled, so the corresponding
ioctl handler appears empty in the generated bitcode file, which
leads to zero command value in our command identification process.
There are 50% of the ioctl handlers that expect a single command
identifier. Most of them are attributed to the v4l2_ioctl_ops. As
explained in Appendix B, these are nested handlers that manage
a (single) specific command. The majority (98.3%) of the ioctl
handlers have less than 20 valid command identifiers. We manually
investigate the rest (1.7%) of the ioctls with more than 20 com-
mand identifiers, and find that our approach over approximates the
function pointers for some of the ioctl functions. Although such
over estimation causes extra invalid fuzz units in our subsequent
fuzzing steps, it has marginal impact on the overall performance
(especially given that we have a small percentage of such cases).
User argument types: The last four columns in Table 3 show
how an argument passed by the user (third argument to the ioctl
handler) is treated.
For 1,688 (47%) of command identifiers, we do not find any
copy_from_user. This places us in one of two categories. (1) the
user argument is treated as C type long, and thus argument type
identification is not needed since the user argument is treated as a
raw value (and hence no copy_from_user is present). (2) Or, there
is instead a copy_to_user, where the user is meant to supply a
pointer to some type for which the kernel will copy information
to the user. We do not care about type identification here either, as
the kernel will not be processing the user data.
For the rest 1,877 (53%) of the command identifiers, the user
argument is expected to be a pointer to a specific data type. i.e., a
copy_from_user call should be used to copy the data. Such pointer
arguments can be further categorized as the following three cases.
(i) 526 (15%) of the command identifiers expect a scalar pointer
argument, For example, in our running case, as shown in Table 1,
command IDs 0x1003 and 0x1002 belongs to this category since
they expect the user argument pointing to scalar types uint32_t
or uint8_t. (ii) 961 (30%) of the command identifiers expect the
user argument to point to a C structure with no embedded point-
ers. e.g., DriverStructTwo in Listing 1. (iii) For 390 (11%) of the
command identifiers, the date type is a C structure which contains
embedded pointers. In the case of our running example, as shown
in Table 1, command ID 0x1001 belong to this category and expects
the user argument to point to DriverStructOne, which contains
embedded pointers (Listing 1). These commands are extremely hard
to effectively fuzz without the argument type information, because
the user argument is expected to point to a structure, which itself
contains pointers (which should also be valid pointers).
Random Sampling Verification: We picked a random sample
of five ioctls for each of the seven Android phones in our test set
and manually verified that the extracted types were correct. These
35 ioctls had a total of 327 commands, of which we correctly
identified the argument and commands for 294 of them, yielding a
90% accuracy.
8.2 Evaluation Setup
To determine how well DIFUZE can find actual bugs in device dri-
vers, and the effects of using the extracted interface information
on this ability, we test it both using our prototype fuzzer, Man-
goFuzz, and using syzkaller. We will use the identifiers DIFUZEm
and DIFUZEs to represent DIFUZE when it is using MangoFuzz
and syzkaller, respectively, as the fuzzing and on-device execution
component. Additionally, we evaluate the system by varying the
amount of the interface that we provide to syzkaller; this way, we
can examine how different levels of interface extraction influence
the results. Specifically, we run the following configurations of
DIFUZE:
Syzkaller base. We specify that syzkaller should only fuzz using
the system calls open() (to open the device files) and ioctl
(to trigger ioctl handlers). Its default configuration con-
tains several standard device filenames and the structures of
some standard types along with ioctls for common Linux
devices.
Syzkaller+path. In this configuration, we add the specifications
of extracted driver paths which syzkaller should try to fuzz.
However, the rest of the interface information is not pro-
vided.
DIFUZEi. Here, the extracted interface information of the device
paths and ioctls is used with syzkaller as the fuzzer. We
expect that this configuration would be able to trigger ioctl
command handling, but will be unable to explore code that
handles complex structures.
DIFUZEs. This configuration integrates all of the interface recov-
ery, including automatic identification of ioctl argument
structure formats, with syzkaller. We expect this to be the
best-performing configuration, as it is able to leverage many
of the optimizations found in syzkaller.
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2132DIFUZEm. The final configuration integrates our interface recov-
ery with our simple fuzzer prototype, MangoFuzz. This con-
figuration is meant to explore the effect that interface-aware
fuzzing has on the number of discovered bugs, even when
other state-of-the-art optimizations are absent.
We evaluated the system on seven modern Android devices,
including the current “flagship” model of Google, and other popular
phones from Samsung Sony, and HTC. For each device, we first
updated it to the latest available version and then rooted the device.
The on-device execution component is run as root to ensure that
we can fuzz all drivers, and not just those accessible from app-level
permissions. However, as discussed in Section 9, this component
could also take the form of a standard application, though this would
come at the cost of lower accessibility to device files (and their
ioctl handlers). With this setup, we do not have code coverage
feedback or KASAN enabled, as this would require re-compiling the
kernels and flashing a non-stock kernel. More discussion on these
compile-time instrumentations can be found in Section 9. Every
one of the aforementioned DIFUZE configurations is run on each
Android device for five hours. If a crash occurs frequently in a single
driver, we blacklist the buggy ioctl handler to prevent the phone
from repeatedly crashing and the resulting reboots interfering with
the experiment.
8.3 Results
We collected all crash logs and crashing sequences of system calls,
manually triaged them, and filtered out the small number of du-
plicates. In total, DIFUZE was able to find 36 unique bugs in the
seven Android devices that were used for testing. An overview of
the found bugs is shown in Table 5.
We were unable to get syzkaller to work on the Galaxy S6 and
DIFUZEm was unable to trigger any bugs on it, making it the only
Android device for which we found zero bugs. On all the other
devices, we found anywhere from two vulnerabilities (in the Honor
8) to fourteen vulnerabilities in the Xperia XA.
The base configuration of syzkaller (without interface informa-
tion) was unable to find any bugs in our tests. Giving it the correct
paths of drivers (syzkaller+path) only yielded three crashes across
all devices. This suggests that blindly fuzzing kernel drivers is not
very effective, which is likely because such testing is undertaken
by the vendor before these devices are shipped.
When we add partial interface information in the form of the ex-
tracted ioctl numbers, DIFUZEi is able to find 22 bugs. Although
this is impressive on its own, adding the remaining interface infor-
mation (the ioctl argument structure definitions) to the interface
substantially increased the number of bugs found by 54.5%, to a to-
tal of 34 bugs. This result shows the effectiveness of interface-aware
fuzzing and, moreover, shows the importance of both the recovered
ioctl command identifiers and the structure information to the
analysis of ioctl handlers.
A particularly interesting result from our experiments is that
DIFUZEm only found four fewer bugs than DIFUZEs. Syzkaller is a
state-of-the-art tool with a large number of fuzzing strategies and
optimizations built in, while MangoFuzz is a simple fuzzing proto-
type with no optimizations except those described in Section 6. We
Table 4: Types of Crashes Found by DIFUZE
Crash Type
Arbitrary read
Arbitrary write
Assert Failure
Buffer Overflow
Null dereference
Out of bounds index
Uncategorized
Writing to non-volatile memory
Count
4
4
6
2
9
5
5
1
believe this shows that fuzzing with accurate interface information
is quite powerful.
We briefly triaged each of the crashes and quickly classified the
reason that the device crashes. These results are shown in Table 4.
These are often serious bugs even when the crash itself might seem
benign. For example, an assertion error could be triggered by a
more serious underlying bug that a malicious user could carefully
craft to gain a more powerful primitive. Adding to this, one of
the more interesting bugs discovered was that we could bypass
most of the asserts encountered. The ability to bypass these checks
allowed for many would-be thwarted scenarios to become a reality.
To demonstrate the severity of our results, we exploited one of the
arbitrary write vulnerabilities to gain code execution in the kernel
and escalate from app-level privileges to root.
We are currently working on responsibly disclosing the vulnera-
bilities to the vendors. While doing so, we found that four of the
bugs were patched during the course of the experiments. To the
best of our knowledge the remaining 32 of the 36 bugs are 0-days.
In the next few subsections, we will present case studies of two
bugs found during our experiments, demonstrating their impact
and the necessity of interface information in their detection.
8.4 Case Study I: Design issue in Honor 8
One of the most interesting bugs in our collection was found not
through an OS crash (as is typical for kernel bugs), but by noticing
very strange behavior from the target host. After several fuzzing
rounds on the Huawei Honor 8, we noticed that the serial number
of the device had changed, as shown in Listing 6. The serial number
of the device should be a read-only property which only the boot
loader (which runs at the high EL3 privilege level [4]) should be able
to change. However, this occurrence shows that the serial number
can actually be changed from a userspace application (running at
the least privilege level EL0) on Android by exploiting this kernel
driver. Thus, this represents a design-level vulnerability.
This bug was found while fuzzing the driver nve. The Honor 8
has a partition on flash, nvme, which stores the device configuration
information. Some of these configuration options are unprivileged
and can be modifiable by Android. This includes whether the device
unlock is enabled and whether ramdump is allowed, but notably
excludes properties such as the board identifier and serial number,
which should only be modifiable by the boot loader. However, the
ioctl handler for the device /dev/nve provides a way to read and
write these options. Additionally, it does not check the type of
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2133Table 5: Bugs found by each fuzzing configuration per device
syzkaller+path DIFUZEi DIFUZEs DIFUZEm total unique
Pixel
E9 Plus
M9
P9 Lite
Honor 8
Galaxy S6
Xperia XA
Total
syzkaller base
0
0
0
0
0
-
0
0
1
0
0
0
0