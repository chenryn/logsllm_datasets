---
title: Ingest JSON formatted data into Azure Data Explorer
description: Learn about how to ingest JSON formatted data into Azure Data Explorer.
ms.reviewer: kerend
ms.topic: how-to
ms.date: 09/14/2022
---
# Ingest JSON formatted sample data into Azure Data Explorer
This article shows you how to ingest JSON formatted data into an Azure Data Explorer database. You'll start with simple examples of raw and mapped JSON, continue to multi-lined JSON, and then tackle more complex JSON schemas containing arrays and dictionaries.  The examples detail the process of ingesting JSON formatted data using Kusto Query Language (KQL), C#, or Python.
> [!NOTE]
> We don't recommend using `.ingest` management commands in production scenarios. Instead, use a [data connector](connector-overview.md) or programmatically ingest data using one of the [Kusto client libraries](kusto/api/client-libraries.md).
## Prerequisites
* A Microsoft account or a Microsoft Entra user identity. An Azure subscription isn't required.
* An Azure Data Explorer cluster and database. [Create a cluster and database](create-cluster-and-database.md).
## The JSON format
Azure Data Explorer supports two JSON file formats:
* `json`: Line separated JSON. Each line in the input data has exactly one JSON record. This format supports parsing of comments and single-quoted properties. For more information, see [JSON Lines](https://jsonlines.org/).
* `multijson`: Multi-lined JSON. The parser ignores the line separators and reads a record from the previous position to the end of a valid JSON.
> [!NOTE]
> When ingesting using the [ingestion wizard](ingest-data-wizard.md), the default format is `multijson`. The format can handle multiline JSON records and arrays of JSON records. When a parsing error is encountered, the entire file is discarded. To ignore invalid JSON records, select the option to "Ignore data format errors.", which will switch the format to `json` (JSON Lines).
> 
> If you're using the JSON Line format (`json`), lines that don't represent a valid JSON records are skipped during parsing.
### Ingest and map JSON formatted data
Ingestion of JSON formatted data requires you to specify the *format* using [ingestion property](ingestion-properties.md). Ingestion of JSON data requires [mapping](kusto/management/mappings.md), which maps a JSON source entry to its target column. When ingesting data, use the `IngestionMapping` property with its `ingestionMappingReference` (for a pre-defined mapping) ingestion property or its `IngestionMappings` property. This article will use the `ingestionMappingReference` ingestion property, which is pre-defined on the table used for ingestion. In the examples below, we'll start by ingesting JSON records as raw data to a single column table. Then we'll use the mapping to ingest each property to its mapped column.
### Simple JSON example
The following example is a simple JSON, with a flat structure. The data has temperature and humidity information, collected by several devices. Each record is marked with an ID and timestamp.
```json
{
    "timestamp": "2019-05-02 15:23:50.0369439",
    "deviceId": "2945c8aa-f13e-4c48-4473-b81440bb5ca2",
    "messageId": "7f316225-839a-4593-92b5-1812949279b3",
    "temperature": 31.0301639051317,
    "humidity": 62.0791099602725
}
```
## Ingest raw JSON records
In this example, you ingest JSON records as raw data to a single column table. The data manipulation, using queries, and update policy is done after the data is ingested.
### [KQL](#tab/kusto-query-language)
Use Kusto Query Language to ingest data in a raw [JSON format](#the-json-format).
1. Sign in to [https://dataexplorer.azure.com](https://dataexplorer.azure.com).
1. Select **Add cluster**.
1. In the **Add cluster** dialog box, enter your cluster URL in the form `https://..kusto.windows.net/`, then select **Add**.
1. Paste in the following command, and select **Run** to create the table.
    ```kusto
    .create table RawEvents (Event: dynamic)
    ```
    This query creates a table with a single `Event` column of a [dynamic](kusto/query/scalar-data-types/dynamic.md) data type.
1. Create the JSON mapping.
    ```kusto
    .create table RawEvents ingestion json mapping 'RawEventMapping' '[{"column":"Event","Properties":{"path":"$"}}]'
    ```
    This command creates a mapping, and maps the JSON root path `$` to the `Event` column.
1. Ingest data into the `RawEvents` table.
    ```kusto
    .ingest into table RawEvents ('https://kustosamplefiles.blob.core.windows.net/jsonsamplefiles/simple.json') with '{"format":"json", "ingestionMappingReference":"RawEventMapping"}'
    ```
### [C#](#tab/c-sharp)
Use C# to ingest data in raw [JSON format](#the-json-format).
1. Create the `RawEvents` table.
    ```csharp
    var kustoUri = "https://..kusto.windows.net/";
    var connectionStringBuilder = new KustoConnectionStringBuilder(kustoUri)
    {
        FederatedSecurity = true,
        UserID = userId,
        Password = password,
        Authority = tenantId,
        InitialCatalog = databaseName
    };
    using var kustoClient = KustoClientFactory.CreateCslAdminProvider(connectionStringBuilder);
    var tableName = "RawEvents";
    var command = CslCommandGenerator.GenerateTableCreateCommand(
        tableName,
        new[] { Tuple.Create("Events", "System.Object") }
    );
    await kustoClient.ExecuteControlCommandAsync(command);
    ```
1. Create the JSON mapping.
    ```csharp
    var tableMappingName = "RawEventMapping";
    command = CslCommandGenerator.GenerateTableMappingCreateCommand(
        IngestionMappingKind.Json,
        tableName,
        tableMappingName,
        new ColumnMapping[]
        {
            new() { ColumnName = "Events", Properties = new Dictionary { { "path", "$" } } }
        }
    );
    await kustoClient.ExecuteControlCommandAsync(command);
    ```
    This command creates a mapping, and maps the JSON root path `$` to the `Event` column.
1. Ingest data into the `RawEvents` table.
    ```csharp
    var ingestUri = "https://ingest-..kusto.windows.net/";
    var ingestConnectionStringBuilder = new KustoConnectionStringBuilder(ingestUri)
    {
        FederatedSecurity = true,
        UserID = userId,
        Password = password,
        Authority = tenantId,
        InitialCatalog = databaseName
    };
    using var ingestClient = KustoIngestFactory.CreateQueuedIngestClient(ingestConnectionStringBuilder);
    var blobPath = "https://kustosamplefiles.blob.core.windows.net/jsonsamplefiles/simple.json";
    var properties = new KustoQueuedIngestionProperties(databaseName, tableName)
    {
        Format = DataSourceFormat.json,
        IngestionMapping = new IngestionMapping { IngestionMappingReference = tableMappingName }
    };
    await ingestClient.IngestFromStorageAsync(blobPath, properties);
    ```
> [!NOTE]
> Data is aggregated according to [batching policy](kusto/management/batching-policy.md), resulting in a latency of a few minutes.
### [Python](#tab/python)
Use Python to ingest data in raw [JSON format](#the-json-format).
1. Create the `RawEvents` table.
    ```python
    KUSTO_URI = "https://..kusto.windows.net/"
    KCSB_DATA = KustoConnectionStringBuilder.with_aad_device_authentication(KUSTO_URI, AAD_TENANT_ID)
    KUSTO_CLIENT = KustoClient(KCSB_DATA)
    TABLE = "RawEvents"
    CREATE_TABLE_COMMAND = ".create table " + TABLE + " (Events: dynamic)"
    RESPONSE = KUSTO_CLIENT.execute_mgmt(DATABASE, CREATE_TABLE_COMMAND)
    dataframe_from_result_table(RESPONSE.primary_results[0])
    ```
1. Create the JSON mapping.
    ```python
    MAPPING = "RawEventMapping"
    CREATE_MAPPING_COMMAND = ".create table " + TABLE + " ingestion json mapping '" + MAPPING + """' '[{"column":"Event","path":"$"}]'"""
    RESPONSE = KUSTO_CLIENT.execute_mgmt(DATABASE, CREATE_MAPPING_COMMAND)
    dataframe_from_result_table(RESPONSE.primary_results[0])
    ```
1. Ingest data into the `RawEvents` table.
    ```python
    INGEST_URI = "https://ingest-..kusto.windows.net/"
    KCSB_INGEST = KustoConnectionStringBuilder.with_aad_device_authentication(INGEST_URI, AAD_TENANT_ID)
    INGESTION_CLIENT = KustoIngestClient(KCSB_INGEST)
    BLOB_PATH = 'https://kustosamplefiles.blob.core.windows.net/jsonsamplefiles/simple.json'
    INGESTION_PROPERTIES = IngestionProperties(database=DATABASE, table=TABLE, dataFormat=DataFormat.JSON, ingestion_mapping_reference=MAPPING)
    BLOB_DESCRIPTOR = BlobDescriptor(BLOB_PATH, FILE_SIZE)
    INGESTION_CLIENT.ingest_from_blob(
        BLOB_DESCRIPTOR, ingestion_properties=INGESTION_PROPERTIES)
    ```
    > [!NOTE]
    > Data is aggregated according to [batching policy](kusto/management/batching-policy.md), resulting in a latency of a few minutes.
---
## Ingest mapped JSON records
In this example, you ingest JSON records data. Each JSON property is mapped to a single column in the table.
### [KQL](#tab/kusto-query-language)
1. Create a new table, with a similar schema to the JSON input data. We'll use this table for all the following examples and ingest commands.
    ```kusto
    .create table Events (Time: datetime, Device: string, MessageId: string, Temperature: double, Humidity: double)
    ```
1. Create the JSON mapping.
    ```kusto
    .create table Events ingestion json mapping 'FlatEventMapping' '[{"column":"Time","Properties":{"path":"$.timestamp"}},{"column":"Device","Properties":{"path":"$.deviceId"}},{"column":"MessageId","Properties":{"path":"$.messageId"}},{"column":"Temperature","Properties":{"path":"$.temperature"}},{"column":"Humidity","Properties":{"path":"$.humidity"}}]'
    ```
    In this mapping, as defined by the table schema, the `timestamp` entries will be ingested to the column `Time` as `datetime` data types.
1. Ingest data into the `Events` table.
    ```kusto
    .ingest into table Events ('https://kustosamplefiles.blob.core.windows.net/jsonsamplefiles/simple.json') with '{"format":"json", "ingestionMappingReference":"FlatEventMapping"}'
    ```
    The file 'simple.json' has a few line-separated JSON records. The format is `json`, and the mapping used in the ingest command is the `FlatEventMapping` you created.
### [C#](#tab/c-sharp)
1. Create a new table, with a similar schema to the JSON input data. We'll use this table for all the following examples and ingest commands.
     ```csharp
    var tableName = "Events";
    var command = CslCommandGenerator.GenerateTableCreateCommand(
        tableName,
        new[]
        {
            Tuple.Create("Time", "System.DateTime"),
            Tuple.Create("Device", "System.String"),
            Tuple.Create("MessageId", "System.String"),
            Tuple.Create("Temperature", "System.Double"),
            Tuple.Create("Humidity", "System.Double")
        }
    );
    await kustoClient.ExecuteControlCommandAsync(command);
    ```
1. Create the JSON mapping.
    ```csharp
    var tableMappingName = "FlatEventMapping";
    command = CslCommandGenerator.GenerateTableMappingCreateCommand(
        IngestionMappingKind.Json,
        tableName,
        tableMappingName,
        new ColumnMapping[]
        {
            new() { ColumnName = "Time", Properties = new Dictionary { { MappingConsts.Path, "$.timestamp" } } },
            new() { ColumnName = "Device", Properties = new Dictionary { { MappingConsts.Path, "$.deviceId" } } },
            new() { ColumnName = "MessageId", Properties = new Dictionary { { MappingConsts.Path, "$.messageId" } } },
            new() { ColumnName = "Temperature", Properties = new Dictionary { { MappingConsts.Path, "$.temperature" } } },
            new() { ColumnName = "Humidity", Properties = new Dictionary { { MappingConsts.Path, "$.humidity" } } }
        }