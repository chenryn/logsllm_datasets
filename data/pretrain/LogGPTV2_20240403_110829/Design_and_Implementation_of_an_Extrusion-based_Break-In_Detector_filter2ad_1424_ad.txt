nection. In the rest of this section, we focus on BINDER’s
performance in the (cid:2)rst 10 minute period.
Table 4. The impact of Dupper
/Dupper
BINDER’s performance of false negatives.
new
old
on
=
old
new (sec)
Dupper
Dupper
Num of email
worms detected
10
22
20
21
30
21
40
19
50
17
60
15
old
and Dupper
According to our discussion on parameter selection,
new usually take values between 10 and 60
Dupper
prev usually takes values between 600
seconds, while Dupper
and 3600 seconds. Since our traces are 10 minute long, the
parameter Dupper
prev does not affect BINDER’s performance
and
on false negatives. So we study the impact of Dupper
new on BINDER’s performance of false negatives. In
Dupper
Table 4, we show the number of email worms are detected
by BINDER when Dupper
new take a same given
value between 10 and 60 seconds. We have only one email
worm (W32.Swen.A@mm) missed when we take 30 sec-
onds for Dupper
new . This is because the (cid:2)rst con-
nection is detected as user intended due to the user input
and all following connections repeat the (cid:2)rst one.
and Dupper
and Dupper
old
old
old
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
5.3.3 Experiments with Blaster
We test BINDER with the worm Blaster [27]. In this ex-
periment, we run two Windows XP VMs A and B in a
private network. We run BINDER on VM B and run ms-
blast.exe on VM A. Blaster on VM A scans the network,
(cid:2)nds VM B and infects it. By analyzing the infection trace
collected by BINDER, we see that BINDER detects the (cid:2)rst
outbound connection made by a process tftp.exe as an ex-
trusion. This is because the process itself and its parent pro-
cess of cmd.exe does not receive any user input. Thus we
can successfully detect Blaster in this case even before the
worm itself is transferred over by TFTP.
6 Countermeasures and Solutions
Our limited user study shows that BINDER limits the
number of false alarms to at most (cid:2)ve over four weeks on
each computer. We also show that BINDER successfully
detects break-ins of the adware Gator, CNMIN, and Spy-
deleter, the worm Blaster, and 22 email worms. However,
BINDER is far from a complete system, rather its goal is to
verify that user intent can be a simple and effective detec-
tor of a large class of malware with a very low false positive
rate. We devote this section to discussions of potential coun-
termeasures against BINDER if its scheme is known to ad-
versaries. Though we try to investigate all possible attacks
against BINDER, we cannot argue that we have considered
all of its possible vulnerabilities.
(cid:15) Direct attack: subvert BINDER on the compromised
system;
(cid:15) Hiding inside other processes: inject malicious code
into other processes;
(cid:15) Faking user input: use APIs provided by the operating
system to generate synthesized actions.
(cid:15) Tricking the user to input: trick users to click on pop-
up windows or a transparent overlay window that in-
tercepts all user input.
(cid:15) Exploiting the whitelist:
replace the executables of
programs in the whitelist with a tweaked one;
(cid:15) Exploiting user input in history: When a malicious
process is allowed to make one outbound connection
due to user input (e.g., a user opens a malicious email
attachment), it can evade BINDER’s detection by mak-
ing that connection to a collusive remote site to keep
receiving data. This would make BINDER think any
new connections made by this process are triggered by
those data arrivals.
(cid:15) Covert Channels: A very tricky countermeasure is to
have a legitimate process make connections and use
them as a covert channel to leak information. For ex-
ample, spyware can have an existing IE process down-
load a web page of a tweaked hyperlink by using some
API provided by Windows shell right after a user clicks
on the IE window of the same process. A collusive
remote server can get private information from the
tweaked hyperlink.
Direct attack is a general limit of all end-host software
(e.g., antivirus, personal (cid:2)rewalls [37], virus throttles [33]
which attempt to limit outgoing attacks). A widespread
availability of Trusted Computing-related Virtual Machine-
based protection [6] or similar isolation techniques are nec-
essary to turn BINDER or any of these other systems into
robust production.
The countermeasures of hiding inside other processes,
faking user input, tricking users to input, and exploiting
whitelisting are inherent to the limitations of today’s op-
erating systems. The effectiveness of BINDER on malware
detection implies pressing requirements for next-generation
operating systems: isolation among processes, trustworthy
user input, re(cid:3)ection on user intent, etc. Possible incom-
plete solutions for these countermeasures are: monitor cor-
responding system APIs; verify the integrity of programs
listed in the whitelist. Even without a bulletproof solu-
tion for today’s operating system, we believe a deployed
BINDER system can raise the bar for adversaries signi(cid:2)-
cantly.
For the countermeasure of exploiting user input in his-
tory, a possible solution is to add more constraints on how
a user intended connection may be triggered. This requires
more research work in the future. For the countermeasure
of covert channels, possible solutions are discussed in [1].
7 Conclusions and Future Work
In this paper, we present the design and implementation
of BINDER, a host-based system that detects break-ins of
worms, spyware and adware on personal computers by cap-
turing their extrusions. The main contributions of this paper
are:
(cid:15) BINDER takes advantage of a unique characteristic
of personal computers(cid:151)user intent. Our evaluations
show that user intent is a simple and effective detec-
tor for a large class of malware with a very low false
positive rate.
(cid:15) The controlled testbed based on the Click modular
router and VMWare enables us to repeat the whole
break-in and propagation process of email worms
without worrying about unwanted damage.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
In the future, we plan to study the advantage of shar-
ing extrusion information among distributed BINDER sys-
tems.
References
[18] M. Russinovich
and B. Cogswell.
http://www.sysinternals.com/ntw2k/freeware
/pstools.shtml.
[19] M. Russinovich
and B. Cogswell.
http://www.sysinternals.com/ntw2k/freeware
/tdimon.shtml.
Pstools.
Tdimon.
[20] S. Saroiu, S. D. Gribble, and H. M. Levy. Measurement and
analysis of spyware in a university environment. In Proceed-
ings of the First Symposium on Networked Systems Design
and Implementation, March 2004.
[21] Snort. Snort, The Open Source Network Intrusion Detection
System. http://www.snort.org/.
[22] S. Staniford, V. Paxson, and N. Weaver. How to own the in-
ternet in your spare time. In Proceedings of the 11th Usenix
Security Symposium, August 2002.
[23] Suzi.
How to
spy
http://netrn.net/spywareblog/archives/2004/03/12
/how-to-get-rid-of-spy-deleter/.
get
rid
of
deleter.
[24] Symantec.
Adware.Gator.
http://securityresponse.symantec.com/avcenter/
venc/data/adware.gator.html.
Symantec
Norton
Antivirus.
[25] Symantec.
[26] Symantec.
http://www.symantec.com/.
Symantec
Security
Re-
Index.
-
sponse
Threat
http://securityresponse.symantec.com/avcenter/
venc/auto/index/indexA.html.
Alphabetical
[27] Symantec.
W32.Blaster.Worm.
http://securityresponse.symantec.com/avcenter/
venc/data/w32.blaster.worm.html.
[28] Symantec.
Symantec Internet Security Threat Report.
http://enterprisesecurity.symantec.com/content.cfm?
articleid=1539, September 2004.
Vmware
workstation
[29] VMWare.
4.5.
http://www.vmware.com/.
[30] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier.
Shield: Vulnerability-driven network (cid:2)lters for preventing
known vulnerability exploits. In Proceedings of ACM SIG-
COMM, August 2004.
[31] H. J. Wang, J. C. Platt, Y. Chen, R. Zhang, and Y.-M. Wang.
Automatic miscon(cid:2)guration troubleshooting with peerpres-
sure. In Usenix OSDI, San Francisco, CA, December 2004.
[32] N. Weaver, S. Staniford, and V. Paxson. Very fast contain-
ment of scanning worms. In Proceedings of the 13th Usenix
Security Symposium, August 2004.
[33] M. M. Williamson. Throttling viruses: Restricting propa-
gation to defeat malicious mobile code. Technical Report
Technical Report HPL-2002-172, HP Labs Bristol, 2002.
[34] WinDump. Windump. http://windump.polito.it/.
[35] WinPcap. Winpcap. http://winpcap.polito.it/.
[36] Y. Zhang and V. Paxson. Detecting stepping stones. In Pro-
ceedings of the 9th USENIX Security Symposium, August
2000.
[37] ZoneAlarm. http://www.zonelabs.com/.
[1] K. Borders and A. Prakash. Web tap: Detecting covert web
traf(cid:2)c. In Proceedings of the 11th ACM Conference on Com-
puter and Communication Security, October 2004.
[2] W. Cui, R. H. Katz, and W. tian Tan. Binder: An extrusion-
based break-in detector for personal computers. In Proceed-
ings of 2005 USENIX Annual Technical Conference, April
2005.
[3] eXtremail. extremail server. http://www.extremail.com/.
[4] T. Goldring. User pro(cid:2)ling for intrusion detection in win-
dows nt. In Proceedings of the 35th Symposium on the In-
terface, 2003.
[5] S. A. Hofmeyr, S. Forrest, and A. Somayaji. Intrusion detec-
tion using sequences of system calls. Journal of Computer
Security, 6(3):151(cid:150)180, 1998.
[6] Intel. Intel virtualization technology, 2005.
[7] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast
portscan detection using sequential hypothesis testing.
In
2004 IEEE Symposium on Security and Privacy, May 2004.
[8] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F.
Kaashoek. The click modular router. ACM Transactions
on Computer Systems, 18(3):263(cid:150)297, August 2000.
[9] E. Kohler, R. Morris, and M. Poletto. Modular components
In Proceedings of OPE-
for network address translation.
NARCH’02, June 2002.
[10] W. Lee and S. Stolfo. A framework for constructing features
and models for intrusion detection systems. ACM Transac-
tions on Information and System Security, 3(4), November
2000.
[11] R. A. Maxion and T. N. Townsend. Masquerade detection
using truncated command lines. In Proceedings of the Inter-
national Conference on Dependable Systems and Networks,
June 2002.
[12] T.
Micro.
ADW CNSMIN.A.
[13] Microsoft.
http://www.trendmicro.com/vinfo/virusencyclo
/default5.asp?VName=ADW CNSMIN.A.
Hooks
http://msdn.microsoft.com/library/default.asp?url=
/library/en-us/winui/winui/windowsuserinterface
/windowing/hooks.asp.
Windows
[14] Microsoft.
Windows
Security
Auditing.
http://www.microsoft.com/technet/security/prodtech
/win2000/secwin2k/09detect.mspx.
[15] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford,
and N. Weaver. Inside the slammer worm. IEEE Magazine
of Security and Privacy, August 2003.
[16] V. Paxson. Bro: a system for detecting network intruders
in real-time. Computer Networks, 31(23-24):2435(cid:150)2463,
1999.
[17] rattle. Using process infection to bypass windows software
http://www.phrack.org/show.php?p=62&a=13,
(cid:2)rewalls.
2004.
API.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE