title:DroidDisintegrator: Intra-Application Information Flow Control in
Android Apps
author:Eran Tromer and
Roei Schuster
DroidDisintegrator:
Intra-Application Information Flow Control in Android Apps
(extended version)∗
Roei Schuster
Tel Aviv University
Eran Tromer
Tel Aviv University
PI:EMAIL
PI:EMAIL
April 22, 2016
Abstract
In mobile platforms and their app markets, controlling app permissions and preventing abuse
of private information are crucial challenges. Information Flow Control (IFC) is a powerful ap-
proach for formalizing and answering user concerns such as: “Does this app send my geolocation
to the Internet?” Yet despite intensive research eﬀorts, IFC has not been widely adopted in
mainstream programming practice.
We observe that the typical structure of Android apps oﬀers an opportunity for a novel and
eﬀective application of IFC. In Android, an app consists of a collection of a few dozen “compo-
nents”, each in charge of some high-level functionality. Most components do not require access
to most resources. These components are a natural and eﬀective granularity at which to apply
IFC (as opposed to the typical process-level or language-level granularity). By assigning diﬀerent
permission labels to each component, and limiting information ﬂow between components, it is
possible to express and enforce IFC constraints. Yet nuances of the Android platform, such as
its multitude of discretionary (and somewhat arcane) communication channels, raise challenges
in deﬁning and enforcing component boundaries.
We build a system, DroidDisintegrator, which demonstrates the viability of component-level
IFC for expressing and controlling app behavior. DroidDisintegrator uses dynamic analysis to
generate IFC policies for Android apps, repackages apps to embed these policies, and enforces
the policies at runtime. We evaluate DroidDisintegrator on dozens of apps.
1
Introduction
1.1 Motivation
The unprecedented connectivity, sensor capability and portability of modern smartphones encourage
their use as a primary networking device, entrusted with abundant personal or otherwise sensitive
information. Yet users typically run myriad third-party applications (“apps”), authored by unfa-
miliar or untrusted sources. These apps are typically granted access to the mobile platform’s data
and sensors. This highlights concerns about privacy breaches:
information on the device being
∗A short version of this paper is to appear in the ACM Symposium on Information, Computer and Communications
Security (ASIACCS) 2016 [TS16].
1
made available to some party contrary to the user’s wishes. Integrity of data stored on the device
is also at risk, as is the device’s behavior (e.g., on authenticated channels to external parties, or by
consumption of resources).
In popular mobile platforms (e.g., Android, iOS, and Windows Phone), two main security mecha-
nism are employed to address these concerns. First, apps for these platforms are distributed through
a centrally-controlled channel (“app markets”) where they undergo a veriﬁcation process. Second,
within the mobile platform, apps are sandboxed at runtime by software and hardware mechanisms,
limiting their access to data and system resources.
In the following we focus on Android, as a
prominent and representative example.
Filtering at app market allows for powerful program analysis techniques to be used oﬄine and
ahead of time. In particular, numerous static [CFGW11, LLW+12, GCEC12, FCF09, GZWJ12,
ARF+14, MGH15, LBB+15, BJM+15, CFB+15, OLD+15, GKP+, YLL+15, OMJ+13, FAR+13] and
dynamic [ZWZJ12, MEK+12, HLN+14, RCE13, EGC+14, GCEC12] analysis techniques have been
proposed. The particular analysis methods implemented by the commercial app market curators are
not known, though there has been some reverse engineering [OM12, PS12]. The analysis performed
by Google’s “Bouncer” is for malware-ﬁltering purposes only, and does not provide end-users and
reviewers with information about the risk analyzed apps pose, if they are deemed “legitimate”. In
addition, popular third party markets are not protected by Bouncer [ZWZJ12] .
Another user protection mechanism is the App sandbox, based on permissions granted to the
app upon installation. Apps explicitly declare the required permissions. The end-user is prompted
to approve some of the permissions during the installation process. Android blocks the app from
exercising certain permission-protected APIs if the app doesn’t declare the respective permissions.
Still, it is often unclear to end-users, platform maintainers and app reviewers what risk the app
actually poses to its users [PXY+13, FGW11, FHE+12]. This depends on how the permission-
protected APIs are used by the app. Many enhancements to Android platform security that further
constrain apps’ behavior have been proposed [ZZJF11, NKZ10, DSP+, FWM+11, BDD+12, SDW12,
WHZ+, HNES14, XSA12, SC13, SFE10, NE13, KNK+12] to address this problem. Often, users
and app reviewers expect apps to live up to certain restrictions, and it is a common practice among
developers to write explanatory text describing the reasons for requesting a permission [PXY+13].
However, these explanations can contain mistakes or falsehoods; moreover they are often absent or
hard to ﬁnd.
Ideally, the Android app permission system would express, as well as enforce, what is stated in
these explanations. We address the realization of this ideal with regard to information ﬂow within
the app. Consider, ﬁrst, the following motivating examples of real-world apps.
Truecaller. Truecaller is a Caller-ID app. The Google Play description explicitly states: “Truecaller
NEVER uploads your phonebook to make it searchable or public”. This is, however, not enforced
by the app sandbox.
Smart Voice Recorder. The dubious permission to Record Audio (at any time) is necessary for
any app which uses the phone’s Microphone. Smart Voice Recorder records audio at the user’s
request. It also requests internet access to display ads. There is no reason why the information
from the internet should ﬂow into the Record Audio API (e.g., invoke recording of audio by Smart
Voice Recorder’s web server), but there is no way to enforce the prevention of this ﬂow. This is an
integrity issue. There is also no reason why recordings should ﬂow to the internet. This is a privacy
issue. Another example given in Appendix A.1.
Android’s existing permissions model cannot express the above observations about how apps
2
operate and the risks they do (or do not) pose to users. Moreover, Android’s existing enforcement
mechanism cannot enforce the absence of the aforementioned undesired actions — we merely observe
that the app happens to not invoke those actions, but it could easily and silently act otherwise. A
more expressive language for specifying app behavior (backed by an enforcement mechanism) would
let app developers characterize app behavior more precisely, and let users better judge the potential
risk of installing apps.
The inherent problem of the Android permissioning system, observed above, is that information
from all sources accessible to the app can ﬂow, at the app code’s discretion, to all accessible sinks.
Information Flow Control (IFC) is a class of enforcement policies which model entity capabilities as
information sources and information sinks, and limit the ability of the governed entities to transfer
information from sources to sinks in a more ﬁne-grained way. Thus, applying an IFC technique to
Android apps can mitigate the privacy and integrity hazards depicted in the above examples.
A related concern is that of helping users, as well as enterprise IT managers, make informed
decisions. Users shouldn’t care about, nor guess the implications of, an app having access to their
contact data. However they might be alarmed to learn that the app sends their contacts to some web
server. Telling users about app information ﬂow brings us closer to informing users about “risks,
not resources”, as advocated and empirically supported by Felt et al. [FHE+12]. This is evident in
the textual descriptions that app developers provide to justify permission use, which often take the
form of (informal) declarations of information ﬂow (as for Truecaller, above). The ability to express
and enforce such claims can thus substantially improve security in mobile apps.
1.2 Use Cases and Threat Model
DroidDisintegrator oﬀers a framework for repackaging apps to embed explains app manifests). Our
variant of the Android OS can then enforce this policy given the metadata. This mechanism
can be deployed in two scenarios (see Figure 1). First, a security-aware developer, concerned
about untrusted library code and the possibility of having inadvertently introduced bugs into the
code, repackages the app to tighten its running restrictions (possibly after using feedback from
DroidDisintegrator to tighten information ﬂow in the app), and then releases the repackaged app.
Alternatively, the developer releases the app without repackaging, but an app curator in the app
distribution chain (e.g., the app market, or the IT staﬀ in an enterprise), distrusting both the
developer’s intentions and competence, repackages the app. In both cases, the curators along the
app distribution chains, as well as app reviewers (where applicable), can inspect the information
ﬂows in the manifest, and base their decisions and recommendations on it.
In this approach, a malicious app wishing to leak information contrary to users’ intuition or
the textual declarations in its description will not be able to fool curators and reviewers (and
subsequently end users), since its policy would have to permit the leaky behavior. We do not
identify nor block malicious behavior directly, but by allowing benign apps to declare their (enforced)
restricted behavior, we expose the “true nature” of malicious apps which cannot do this and must
make transparent their malintent. Conversely, if an app is packaged with a policy that forbids an
information leak, then this will be enforced even if the app is buggy, malicious or compromised.
1.3 Component-level IFC
Existing information ﬂow control techniques have not, to date, gained popularity in mainstream
apps. Some, such as JIF [Mye99], Fabric[LGV+09], Mobile Fabric [AGL+12] and others [SR03,
3
Figure 1: Deployment and threat model. The buggy deployment scenario is marked by dots and
the malicious by dashes.
SM03], incorporate alterations in the programming language itself, such as variable labeling, to
enforce very ﬁne-grained information ﬂow constraints. This approach does not handle native code
(common in Android apps). Moreover, it takes a toll on the developer and is hard to incorporate
into existing architectures [Zda04]. Ernst et al. [EJM+14] recently adopted, customized, and imple-
mented this approach for Android apps, optimizing on practicality for real-world apps. However,
none of these frameworks are (to date) commonly used or supported.
Another approach is to construct policies which attach security labels to processes. By en-
forcing restrictions on inter-process communication and access to operating-system level resources
(ﬁles, sockets, etc.) [KYB+07, ZBWKM06, SFE10, SC13], it is possible to guarantee system-level
information ﬂow constraints. Some of these solutions are even Android-speciﬁc [KNK+12, JAF+].
However, this approach doesn’t allow us to reason about information ﬂow within a single-process
monolithic app. Therefore we must adopt a diﬀerent approach.
We observe that mobile app programming in Android oﬀers a very promising intermediate
granularity. The Android API deﬁnes components:
functional units that interact with the An-
droid framework and each other. An app is composed of multiple (typically, up to several dozen)
components, and the app’s execution is, essentially, the invocation of and interaction between its
components (with some exceptions; see Section 2.1). Typically and by default, all of the app’s
components run within a single process.
We hypothesize that by limiting unnecessary inter-component communication and enforcing
resource usage at component granularity, it is possible to guarantee IFC constraints within the
entire app. This raises the following challenges, which are addressed in this work:
• Deﬁning component boundaries inside an app.
• Deﬁning a policy for limiting inter-component communication and resource usage by individual
app components. This policy should guarantee compliance with desired IFC constraints, but still
allow operations necessary for the app’s “legitimate” behavior.
• Enforcing the policy. This requires the ability to soundly monitor inter-component communica-
tion, as well as resource usage in the granularity of a component.
4
Runtime enforcement Inspect manifest DroidDisintegrator Inspect manifest App developer Curators Reviewers End users Library developer Library App DroidDisintegrator Repackaged app Running app Is app available in market and highly rated? Buggy/malicious? Malicious? Buggy? The policy is expressed at component granularity; it allows arbitrary information ﬂow within com-
ponents, and reasons only about the communication between them.
For policy enforcement, we propose running diﬀerent components in diﬀerent processes (when
needed) and then leveraging the robust existing mechanisms for process compartmentalization and
inter-process IFC. We call this Application Decomposition. The Android API supports splitting the
app into several processes, each running a diﬀerent subset of app components [jia]. However, some
sets of components are designed to communicate with others through process memory [Doca, Docb];
we do not wish to break apps using such patterns. This raises a fourth challenge:
• Learning, prior to the enforcement stage in which components are process-separated, which
components cannot be separated from others (again, because they are designed to communicate
with each other through process memory).
Reasoning about information ﬂow at the level of components rather than variables or entire pro-
cesses is very natural from the perspective of app design. This places less burden on the developer
than other IFC frameworks, in which programs are split into several untrusted subprograms with
diﬀerent privileges, e.g., Jif/split [ZZNM01] and Swift [CLM+07], which require language variable-
level annotations, or Hails [GLS+12] and xBook [SBL09], which require a designated runtime and
programming environment, and require developers to explicitly declare “components” (in a diﬀerent
sense than Android components). In contrast, the Android component level respects the existing
modularity and communication barriers within the apps, which are born out of both the platform’s
programming methodology and software-engineering practices of programmers. Component permis-
sion separation also decreases the amount of code running under each speciﬁc permission, rendering
apps less vulnerable to confused deputy [Har88] attacks and erroneous API use.
As we show empirically, even in unmodiﬁed legacy apps, component-level information ﬂow (prop-
erly analyzed) often provides a good approximation of the app’s true information-ﬂow behavior and
can lead to informative and enforceable policies. In using component-level granularity, our approach
is similar to the formal process calculus of Jia et al. [JAF+] (see Section 1.5); we pursue the com-
plementary perspective of implementing an analysis and enforcement framework, and suggest an
approach for soundly monitoring inter-component communication inside apps.
1.4 Our Contribution
Use Cases. We suggest a workﬂow for sound enforcement of component-level IFC. This includes
phases of app analysis, policy generation and repackaging of the app’s binary (in .apk form), and
a lightweight runtime component for policy enforcement (an alteration to the Android OS).
Analysis, policy generation and app modiﬁcation. We implement a framework, DroidDisintegrator,
for developers wishing to express information ﬂow constraints in their own apps (in order to increase
their appeal to users). DroidDisintegrator learns communication patterns between components,
using dynamic analysis techniques (based on and extending the Appsplayground [RCE13] fuzzer
and TaintDroid [EGC+14] taint tracker), in order to suggest a suitable mapping of app components
into diﬀerent processes and a suitable IFC enforcement policy. DroidDisintegrator also provides
an output that reﬂects the information ﬂows within the app and thus guides the programmer in
identifying changes to the app that will facilitate an even tighter information-ﬂow policy. Finally,
DroidDisintegrator repackages the app to encompass both the policy and the component-to-process
mapping.
5
Enforcement. We implement a lightweight reference monitor, within Android, which enforces the
component-level policy embedded in the app package.
Applicability to legacy apps. We evaluate the practicality of our solution by using DroidDisintegra-
tor to construct policies for, and repackage, dozens of apps downloaded from Android’s app market.
DroidDisintegrator automatically analyzed these apps, and in about half the cases found ways to
restrict their information ﬂows without breaking their functionality; it then repackaged them to
enforce these policies. It reduced the average number of permissions granted to each component to
less than a third of the original.
Fail-safe analysis. Precise information-ﬂow analysis is diﬃcult, especially for unannotated legacy
code in executable form. DroidDisintegrator can use imprecise analysis (e.g., not including implicit
ﬂows) without harming security, because its approach is fail-safe: information ﬂows that were not
detected in the analysis, and thus reported to the app user as not existing, will not be permitted
by the generated and enforced policy. Analysis error can result in either reduced app functionality
or an overly permissive advertised policy, but cannot break the security guarantees of the policy.
This is fundamentally diﬀerent than in tools designed for vetting apps by discovering malicious be-
havior (e.g. FlowDroid [ARF+14] and DroidSafe [GKP+]): while those must detect all maliciously