Idiosyncrasies of Windows Fork. Our fork implementation
has a few nuances due to the design of the Windows operating
system. First, if multiple threads exist in the parent process, only
the thread calling fork is cloned. This could lead to deadlocks
or hangs in multi-threaded applications. Linux’s fork has the
same issue. To sidestep this problem, we target deeply-nested
functions that behave in a thread-safe fashion. For example, in
the program UltraISO, we bypassed the GUI and fuzzed the
target function directly, shown in Table VIII. Second, handle
objects, the Windows equivalent of Unix file descriptors, are
not inherited by the child process by default. To address this
issue, we enumerate all relevant handles and manually mark
them inheritable. Third, because the data structures involved in
fork-related APIs differ from version to version of Windows, it
is impractical to support all possible installations of Windows.
Nevertheless, our fork-server supports all recent builds of
Windows 10. Since Windows is very backwards-compatible, we
do not see this as a significant limitation of our implementation.
VI.
IMPLEMENTATION
We prototyped WINNIE with 7.1K lines of code (shown in
Table VI). WINNIE supports both 32- and 64-bit Windows
PE binaries. We built our fuzzer on top of WinAFL and
implemented the fork library from the scratch. The tracer
relies on Intel Pin [40] for dynamic binary instrumentation.
Fig. 6: Overview of fork() on Windows. We analyzed various
Windows APIs and services to achieve a CoW fork() functionality
suitable for fuzzing. Note that fixing up the CSRSS is essential for
fuzzing COTS Windows applications: if the CSRSS is not re-initialized,
the child process will crash when accessing Win32 APIs. We include
a detailed technical description in appendix §X-A.
Re-execute
Forkserver
Fork()
CreateProcess WINNIE Cygwin WSL(v1) WSL(v2) Linux
Supports PE files?
Copy-on-Write?
Speed (exec/sec)
✔
✗
91.9
✔
✔
✔
✗
72.8
✗
✔
✗
✔
✗
✔
4907.5
TABLE V: Comparison of fork() implementations. Cygwin is not
CoW, and WSL does not support Windows PE binaries. WINNIE’s
new fork API is therefore the most suitable for Windows fuzzing.
310.9
442.8
405.1
to the CSRSS, it will crash when it tries to access Win32
APIs. Note that virtually every Windows application uses the
Win32 API. Our fork correctly informs the CSRSS of newly-
created child processes, as shown in Figure 6. Connecting to
the CSRSS is not trivial for forked processes: for the call to
succeed, we must manually de-initialize several undocumented
variables before the child process connects. We provide a
detailed technical description of our implementation in the
appendix §X-A.
To the best of our knowledge, our fork implementation
is the only one that can support fuzzing commercial off-
the-shelf (COTS) Windows applications. Table V shows a
comparison of process creation techniques on Windows and
Linux. CreateProcess is the standard Windows API for
creating new processes with a default program state, used
by WinAFL. New processes must re-execute everything from
the beginning, wasting a lot of time on GUI initialization
code, shown in Table II. Persistent mode [68] aims to mitigate
the re-execution overhead, but
is impractical due to the
numerous problems outlined in §III-B. Thus, our goal is to
avoid re-executions altogether by introducing a fork-style API.
Meanwhile, Cygwin’s fork implementation is not designed for
COTS Windows applications. It works by manually copying the
program state after calling CreateProcess. It also suffers from
problems related to address space layout randomization [6].
The Windows Subsystem for Linux (WSL) is designed for
running Linux ELF binaries on Windows. Thus, we cannot use
it for testing Windows PE binaries, even if it is faster [41]. Our
fork implementation achieves a speed comparable to the WSL
fork, and most importantly, supports Windows PE applications.
Verifying the Fork Implementation. We ran several test
programs under our fork-server to verify its correctness. First,
verified that each child process receives a correct copy of
the global program state. We checked various the values of
8
Win32 subsystem (csrss.exe)❷ report creation❻ acknowledgeParent processstackcodedata, handleheapfork()❶ create suspendedprocess❹ de-initialize variables❺ connects to CSRSS❸ resume executionstackcodedata, handleheapChild processfor the execution to reach a new block. When reached, the first
byte of the new block is then restored so that it will no longer
generate exceptions in the future. Since encountering new basic
blocks is rare during fuzzing, fullspeed fuzzing has negligible
overhead and can run the target application at essentially native
speed. Breakpoints need only be installed once thanks to the
fork-server: child processes inherit the same set of breakpoints
as the parent. We noticed that this is an important optimization
as we observe Windows applications easily contain a massive
number of basic blocks (e.g., >100K).
VII. EVALUATION
We evaluated WINNIE on real-world programs to answer
the following questions:
variety of Windows applications? (§VII-A)
modes of fuzzing like persistent mode? (§VII-B)
• Applicability of WINNIE. Can WINNIE test a large
• Efficiency of fork. How efficient is fork on versus other
• Accuracy of harness generation. How effectively can
WINNIE create fuzzing harnesses from binaries? (§VII-C)
• Finding new bugs. Can WINNIE discover new program
states and bugs from real world applications? (§VII-D)
Evaluation Setup. Our evaluation mainly compares WINNIE
with WinAFL. Other Windows fuzzers either do not support
feedback-driven fuzzing (e.g., Peach [16]), or cannot directly
fuzz Windows binaries (e.g., HonggFuzz [25]). We configured
WinAFL to use basic-block coverage as feedback and used
persistent-mode to maximize performance. Our evaluation
of WinAFL considers two modes, the DynamoRIO mode
(WinAFL-DR) where WinAFL relies on dynamic binary in-
strumentation, and the PT mode where WinAFL uses the Intel
PT hardware feature to collect code coverage. We enlarged the
Intel PT ring buffer sizes from 128 kilobytes to 512 kilobytes
to mitigate data-loss issues [34]. We performed the evaluation
on an Intel Xeon E5-2670 v3 (24 cores at 2.30GHz) and 256
GB RAM. All the evaluations were run on Windows 10, except
WinAFL-DR, which was run on Windows 7 as it did not run
properly under Windows 10.
Target Program Selection. We generated 59 valid fuzzing
harnesses with WINNIE. We ran all 59 programs test the applica-
bility of WINNIE (§VII-A). For the other evaluations (§VII-B to
§VII-D), we randomly chose 15 GUI or CLI applications among
the 59 generated harnesses due to limited hardware resources
(i.e., 15 apps × 24 hrs × 5 trials = 5,400 CPU hrs). We aimed
to show that WINNIE can fuzz complicated GUI applications
and that WINNIE also outperforms existing solutions on CLI
programs. Thus, we chose a mixture of both types of binaries
from a variety of real-world applications. For this evaluation,
we mainly focused on programs that accept user input from
a file, as their parsing components are usually complex (i.e.,
error-prone) and handle untrusted inputs.
A. Applicability of WINNIE
Figure 8 shows that WINNIE supports running a wider
variety of Windows applications than WinAFL. Specifically,
WINNIE successfully generates working harnesses for all
programs and is able to test them efficiently. WinAFL-IPT
failed to run 33 of out 59 harnesses (55.9%) while WinAFL-DR
9
Fig. 7: Overview of WINNIE’s fuzzer. We inject a fuzzing agent
into the target. The injected agent spawns the fork-server, instruments
basic blocks, and hooks several functions. This improves performance
(§VI-A) and sidesteps various instrumentation issues (§VI-B).
A. Fuzzer Implementation
Figure 7 shows an overview of our fuzzer. We inject
a fuzzing agent agent.dll into the target program, which
cooperates with the fuzzer using a pipe for bidirectional
communication. This architecture helps assuage the most
uncooperative of fuzzing targets.
The fuzzing agent is injected as soon as the program loads,
before any application code has begun executing. Once injected,
the agent first hooks the function specified by the harness and
promptly returns control to the target application. Then, the
target application resumes and initializes itself. The application
halts once it reaches the hooks, and the fuzzing agent spins up
the fork-server. Since we spin up the fork-server only at some
point deep within the program, initialization code only runs
once, massively improving performance.
Our fuzzer works as follows: 1 The fuzzing agent, which
contains the fork server, is injected into the target application.
The injected agent 2 installs function hooks on the entry point
and the target function, and 3 instruments all basic blocks
so it can collect code coverage. 4 Then, the fuzzer creates
forked processes. Using the pipe between the fuzzer and target
processes, 5 the agent reports program’s status and 6 the
fuzzer handles coverage and crash events.
B. Reliable Instrumentation
Collecting code coverage from closed-source applications is
challenging, specially for Windows applications. WinAFL uses
two methods to collect code coverage: one using dynamic binary
instrumentation using DynamoRIO [57], and another using
hardware features through Intel PT (IPT) [59]. Unfortunately,
DynamoRIO and IPT are prone to crashes and hangs. In our
evaluation, WinAFL was only able to run 26 of 59 targets.
To address this issue, we discard dynamic binary instrumen-
tation in favor of fullspeed fuzzing [47] to collect code coverage.
Fullspeed fuzzing does not introduce any overhead except when
the fuzzer discovers a new basic block. Based on boolean basic
block coverage, fullspeed fuzzing only considers there to be
new coverage when a new basic block is visited. To implement
this, we patch all basic blocks of the tested program with an
int 3 instruction. Then, we fuzz the patched program and wait
hit new BB,or actual crashagent.dll(forkserver)❺ status,exec cmdEntry PointFuzzing targetNtCreateFile, TerminateProc❷ installfunction hookTarget ProgramCustom exception handlerPIPE❻ new cov,crash❹ forked processes...forkupdate coveragefuzzing input❸ instrument BBsMutatorSelectorQueueMonitor❶ injectagent60
50
40
30
20
10
0
WinAFL-PT WinAFL-DR
Winnie
Other
Crash
Timeout
Working
Fig. 8: Applicability of WINNIE and WinAFL. Among 59 exe-
cutables, WinAFL-IPT and WinAFL-DR failed to run 33 and 30
respectively, whereas WINNIE was able to test all 59 executables. We
provide a detailed breakdown of all 59 programs in appendix §X-B.
Program
Without Fork
Speed
Fork
Coverage
✗
✗
✗
✗
✗
49.3
49.4
Leak Hang† Speed Cov.
1430
576
201
1045
1340
68
5.2
14.8
0.4
4.2
0.3
5.3
7z
makecab
GomPlayer
Hwp-jpeg
Hwp-tiff
EndNote
Total
TABLE VII: Evaluation of fork(). We ran six applications that both
WinAFL and WINNIE could fuzz for 24 hours. We compared their
speed and checked for memory and handle (i.e., file descriptor) leaks.
fork not only improves the performance, but also mitigates resource
leaks. Hang† means an execution speed slower than 1.0 exec/sec.
(9.5×(cid:75)) 2117
(3.3×(cid:75)) 1020
25.9 (64.7×(cid:75)) 1496
(6.2×(cid:75)) 1847
26.2 (87.3×(cid:75)) 2301
89.5 (16.9×(cid:75))
(31.3×(cid:75))
(1.5×(cid:75))
(1.8×(cid:75))
(7.4×(cid:75))
(1.8×(cid:75))
(1.7×(cid:75))
693 (10.2×(cid:75))
(4.0×(cid:75))
25.9
3/6
2/6
failed to run 30 (50.8%). For each program that WinAFL failed,
we analyzed the cause and present the details in the appendix
§X-B. Execution timeouts during the dry-runs dominate all
failed cases of WinAFL (18 for WinAFL-IPT and 19 for
WinAFL-DR). Specifically, before the fuzzing fully begins,
WinAFL launches a few dry-runs to verify that the fuzzing
setup is valid (e.g., harness quality). If the program times out
during the dry-run, WinAFL will not be able to continue the
testing. The second main failure mode was crashing during
the dry-run. This contributed seven failures for WinAFL-IPT
and eight for WinAFL-DR. We provide several case studies to
understand why WinAFL fails to test these programs:
Unexpected Change in Global State.
1 mspdbcmf.exe is
a PDB (debug symbol file) conversion tool, and WinAFL
failed with a timeout error. When the fuzzer executes the
same function iteratively, the program falls into a termination
condition, due to a corrupted global variable. In particular,
the program assigns a non-zero value to the global variable
(g_szPdbMini) in the first execution, and the changed value
makes the application terminate during the second execution.
In other words, the root cause was that the target function
was not idempotent. Unfortunately, WinAFL misclassifies this
unexpected termination as a timeout, and thus the fuzzer quits
after the dry-run. 2 ML.exe (Macro assembler and Linker)
is an assembler program in Visual Studio that crashes when
fuzzing begins. Similar to the aforementioned timeout issue,
a crash happens at the second execution of the main function.
In the first execution, the target program checks the global
flag (i.e., fHasAssembled) to determine whether the assembly
is done and then initializes necessary heap variables. Once the
program finishes the first time, it changes the global flag to true.
In the second execution, the program’s control flow diverges
because the fHasAssembled flag is true. This ultimately leads
to a crash when it tries to access the uninitialized heap variable.
10
Size API Calls LoC
Fixed (LoC)
(%)
Target
Program
ACDSee
HWP-jpeg HncJpeg10.dll
ezPDF
Pdf2Office.dll
HWP-tiff
HncTiff10.dll
UltraIso
UltraISO.exe
XnView
ldf_jpm.dll
Gomplayer avformat-gp.dll
file
magic1.dll
EndNote
PC4DbLib
7z
7z.exe
makecab
makecab.exe
Tiled
tmxviewer.exe
mspdbcmf mspdbcmf.exe
pdbcopy
ml
IDE_ACDStd.apl 3007K
220K
3221K
630K
5250K
692K
4091K
147K
2738K
1114K
50K
113K
1149K
726K
476K
pdbcopy.exe
ml.exe
19
3
4
3
1
10
7
3
1
1
1
1
1
1
1
506 CB (38), ST (174) 34.3
92
CB (7), ST (8) 16.3
8.9
CB (2), ST (8)
112
8.5
CB (7)
82
3.5
57
CB (2)
3.0
199 CB (4), pointer (2)
1.7
pointer (2)
116
0.0
0
96
55
0
0.0
0.0
0
55
0.0
0
55
0.0
0
55
0.0
0
55
0.0
0
55
55
0
0.0
CB: Callback function, ST: Custom struct
TABLE VIII: Harnesses generated by WINNIE. The majority of
the harnesses worked out of the box with few modifications. Some
required fixes for callback and struct arguments, which we discuss
below. For a complete table of all 59 harnesses, see appendix Table XII.
IPT Driver Issues. The dynamic binary instrumentation
adopted by WinAFL-IPT had unknown issues and sometimes
prevented WinAFL from collecting code coverage. For example,
for the program KGB archiver, we observed that the fuzzer
could not receive any coverage due to a Intel-PT driver error.
B. Benefits of Fork
We tested whether fork makes fuzzing more efficient. To
do so, we ran the selected programs under our fuzzer in fork
mode, while we set WinAFL to create a new process for each
execution (re-execution mode). Both of these configurations
can run the target program reliably. As shown in Table VII,
fork improves fuzzing performance: compared to re-execution
mode, WINNIE achieved 31.3× faster execution speeds and
discovered 4.0× more basic blocks. In particular, GomPlayer
and EndNote recorded 64.7× and 87.3× faster executions and
revealed 7.4× and 10.2× more basic blocks respectively.
We also evaluated whether fork makes fuzzing more stable.
We configured WinAFL to use persistent mode, which runs a
specific target function in a loop. Then, we tracked the system’s
memory and resource usage over time while fuzzing. Almost
immediately, we observed memory leaks in the persistent mode
harnesses for HWP-jpeg, HWP-tiff, and makecab. The HWP-
jpeg and HWP-tiff harnesses also leaked file handles, which
would lead to system handle exhaustion if the fuzzer runs
for a long time. These types of leaks tend to cause fuzzing
to unpredictably fail after long periods of fuzzing, creating
a big headache for the human researcher. We explain this in
further detail in §III-B. fork prevented the memory leaks and
file handle leaks, improving stability. We further discuss the
advantages and disadvantages of persistent mode in §VIII.
C. Efficacy of Harness Generation
In this section, we evaluate how well WINNIE helps users