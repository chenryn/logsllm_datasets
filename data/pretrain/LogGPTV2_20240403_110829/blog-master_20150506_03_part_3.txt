                Assert((CycleCtr) (entry->cycle_ctr + 1) == mdsync_cycle_ctr);  
                /*  
                 * Scan over the forks and segments represented by the entry.  
                 *  
                 * The bitmap manipulations are slightly tricky, because we can call  
                 * AbsorbFsyncRequests() inside the loop and that could result in  
                 * bms_add_member() modifying and even re-palloc'ing the bitmapsets.  
                 * This is okay because we unlink each bitmapset from the hashtable  
                 * entry before scanning it.  That means that any incoming fsync  
                 * requests will be processed now if they reach the table before we  
                 * begin to scan their fork.  
                 */  
                for (forknum = 0; forknum requests[forknum];  
                        int                     segno;  
                        entry->requests[forknum] = NULL;  
                        entry->canceled[forknum] = false;  
                        while ((segno = bms_first_member(requests)) >= 0)  
                        {  
                                int                     failures;  
                                /*  
                                 * If fsync is off then we don't have to bother opening the  
                                 * file at all.  (We delay checking until this point so that  
                                 * changing fsync on the fly behaves sensibly.)  
                                 */  
                                if (!enableFsync)  
                                        continue;  
                                /*  
                                 * If in checkpointer, we want to absorb pending requests  
                                 * every so often to prevent overflow of the fsync request  
                                 * queue.  It is unspecified whether newly-added entries will  
                                 * be visited by hash_seq_search, but we don't care since we  
                                 * don't need to process them anyway.  
                                 */  
                                if (--absorb_counter rnode, InvalidBackendId);  
                                        /* Attempt to open and fsync the target segment */  
                                        seg = _mdfd_getseg(reln, forknum,  
                                                         (BlockNumber) segno * (BlockNumber) RELSEG_SIZE,  
                                                                           false, EXTENSION_RETURN_NULL);  
                                        INSTR_TIME_SET_CURRENT(sync_start);  
                                        if (seg != NULL &&  
                                                FileSync(seg->mdfd_vfd) >= 0)  
                                        {  
                                                /* Success; update statistics about sync timing */  
                                                INSTR_TIME_SET_CURRENT(sync_end);  
                                                sync_diff = sync_end;  
                                                INSTR_TIME_SUBTRACT(sync_diff, sync_start);  
                                                elapsed = INSTR_TIME_GET_MICROSEC(sync_diff);  
                                                if (elapsed > longest)  
                                                        longest = elapsed;  
                                                total_elapsed += elapsed;  
                                                processed++;  
                                                if (log_checkpoints)  
                                                        elog(DEBUG1, "checkpoint sync: number=%d file=%s time=%.3f msec",  
                                                                 processed,  
                                                                 FilePathName(seg->mdfd_vfd),  
                                                                 (double) elapsed / 1000);  
                                                break;  /* out of retry loop */  
                                        }  
                                        /* Compute file name for use in message */  
                                        save_errno = errno;  
                                        path = _mdfd_segpath(reln, forknum, (BlockNumber) segno);  
                                        errno = save_errno;  
                                        /*  
                                         * It is possible that the relation has been dropped or  
                                         * truncated since the fsync request was entered.  
                                         * Therefore, allow ENOENT, but only if we didn't fail  
                                         * already on this file.  This applies both for  
                                         * _mdfd_getseg() and for FileSync, since fd.c might have  
                                         * closed the file behind our back.  
                                         *  
                                         * XXX is there any point in allowing more than one retry?  
                                         * Don't see one at the moment, but easy to change the  
                                         * test here if so.  
                                         */  
                                        if (!FILE_POSSIBLY_DELETED(errno) ||  
                                                failures > 0)  
                                                ereport(ERROR,  
                                                                (errcode_for_file_access(),  
                                                                 errmsg("could not fsync file \"%s\": %m",  
                                                                                path)));  
                                        else  
                                                ereport(DEBUG1,  
                                                                (errcode_for_file_access(),  
                                                errmsg("could not fsync file \"%s\" but retrying: %m",  
                                                           path)));  
                                        pfree(path);  
                                        /*  
                                         * Absorb incoming requests and check to see if a cancel  
                                         * arrived for this relation fork.  
                                         */  
                                        AbsorbFsyncRequests();  
                                        absorb_counter = FSYNCS_PER_ABSORB; /* might as well... */  
                                        if (entry->canceled[forknum])  
                                                break;  
                                }                               /* end retry loop */  
                        }  
                        bms_free(requests);  
                }  
                /*  
                 * We've finished everything that was requested before we started to  
                 * scan the entry.  If no new requests have been inserted meanwhile,  
                 * remove the entry.  Otherwise, update its cycle counter, as all the  
                 * requests now in it must have arrived during this cycle.  
                 */  
                for (forknum = 0; forknum requests[forknum] != NULL)  
                                break;  
                }  
                if (forknum cycle_ctr = mdsync_cycle_ctr;  
                else  
                {  
                        /* Okay to remove it */  
                        if (hash_search(pendingOpsTable, &entry->rnode,  
                                                        HASH_REMOVE, NULL) == NULL)  
                                elog(ERROR, "pendingOpsTable corrupted");  
                }  
        }                                                       /* end loop over hashtable entries */  
        /* Return sync performance metrics for report at checkpoint end */  
        CheckpointStats.ckpt_sync_rels = processed;  
        CheckpointStats.ckpt_longest_sync = longest;  
        CheckpointStats.ckpt_agg_sync_time = total_elapsed;  
        /* Flag successful completion of mdsync */  
        mdsync_in_progress = false;  
}  
```
## 小结
checkpointer刷缓存主要分几个步骤，  
1\. 遍历shared buffer区，将当前SHARED BUFFER中脏块新增FLAG need checkpoint，  
2\. 遍历shared buffer区，将上一步标记为need checkpoint的块write到磁盘，WRITE前需要确保该buffer lsn前的XLOG已经fsync到磁盘，  
3\. 将前面的write sync到持久化存储。  
具体耗时可以参考期间的探针，或者检查点日志输出。  
下一篇讲一下检查点的跟踪。  
## 参考 
1\. http://blog.163.com/digoal@126/blog/static/1638770402015463252387/  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")