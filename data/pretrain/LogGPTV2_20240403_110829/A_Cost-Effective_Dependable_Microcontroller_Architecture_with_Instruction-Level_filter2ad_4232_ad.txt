(1.46)
MTBF
(20.08)
(30.31)
4.2.2. Changing MTBF by expanding the soft error cor-
rection area
Original (at ER-5)
Only_CPUD
Except_RCM
GEN-MCU (at ER-5)
(Except “puwmod01” benchmark)
Our rollback architecture has another feature: soft er-
rors occurred not only in the CPU but also in other control
modules such as MEMC, other peripherals, and the RCM it-
self can be corrected. To evaluate this feature, we restricted
the error detection and correction areas of the microcon-
troller. For example, there is an approach that uses a dupli-
cated ALU of the superscalar architecture for dependabil-
ity [8]. In this evaluation, this dependable ALU approach
corresponds to correcting soft errors that occur only in the
”CPUD” module of the microcontroller, as shown in Figure
14(a). Moreover, since our rollback architecture can correct
soft errors that occur in the RCM itself, we enabled the roll-
back control for all random logic circuits except the RCM,
as shown in Figure 14(b). We selected the nearly impos-
sible SER, ER-5, from the three rates in Section 4.2.1 and
labeled the setup in Figure 14(a) ”Only CPUD”, and the
setup in Figure 14(b) ”Except RCM”.
The resulting MTBF graph of the eight benchmarks is
shown in Figure 15. The MTBF of Only CPUD was only
1.46 times longer than that of Original (at ER-5). This
means that soft errors occurring in all areas except the
CPUD module would often be active because the error in-
jection targeted not only the F/Fs of the CPUD, but also all
F/Fs of the microcontroller. In Except RCM, MTBF was 20
times longer. In GEN-MCU (at ER-5), correcting all ran-
dom logic circuits of the microcontroller, the MTBF was 30
times longer (this value corresponds to Figure 13).
Thus, our rollback architecture is effective for soft er-
rors that occur in any random logic circuits of the micro-
controller.
Figure 15. MTBF results for comparison of
Only CPUD with Except RCM
4.3. MTBF results for ECC RAM rollback
architecture
We evaluated the ECC RAM rollback architecture in the
same way as with the random logic circuits. Here, the
targets of the MTBF evaluation were Original-MCU with
normal ECC coded RAM (Original+ECC) and GEN-MCU.
The area of soft error injection was RAM in both Origi-
nal+ECC and GEN-MCU. We used the same eight bench-
marks listed in Table 2 and ran a logic simulation. Of
course, a single-bit soft error in normal ECC RAM may not
cause simulation failure in Original+ECC if the error area
is not accessed from the CPU or if the error area is rewrit-
ten before the wrong data has been read. Here, normal ECC
does not equip a correct data write-back hardware. There-
fore, if a single-bit soft error that occurred in a word area
of RAM remains, and the next soft error occurs in the same
word area, the logic simulation will fail because of the un-
corrected double-bit error. In GEN-MCU, in contrast, the
ECM architecture detects a single-bit ECC error and writes
back correct data, then the CPU executes through the roll-
back process. Currently the SER of RAM is higher than
that of F/F, and the RAM error rate is supposed to be sev-
eral times higher than that of F/F. From past experience,
we established a RAM SER value ﬁve times higher than
the 5 × 1017FIT/Mbit of ”ER-5”. The 25 × 1017FIT/Mbit
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007Table 3. Detailed MTBF results for ECC RAM
rollback
Soft Error Rate : ER- ECM
Soft Error Rate : ER- ECM
(About 100,000 errors/100 M cycles)
(About 100,000 errors/100 M cycles)
quires less software overhead.
These results show that, despite its low overhead, our de-
pendable architecture achieves high performance in recov-
ering from soft errors.
EEMBC 
EEMBC 
Original+ECC/
Original+ECC/
benchmark
benchmark
GEN-MCU
GEN-MCU
Data
Data
Read
Read
Error
Error
Data
Data
Failure
Failure
(Multi-bit Error)
(Multi-bit Error)
Acti ve
Acti ve
Corrected
Corrected
Rollback
Rollback
Simulation
Simulation
Soft
Soft
Error
Error
MTBF
MTBF
Cycle
Cycle
a2time01
a2time01
Original+ECC
Original+ECC
128,709
128,709
---
---
87
87
0.0865%
0.0865%
1,152,710
1,152,710
GEN-MCU
GEN-MCU
---
---
5,851
5,851
27
27
0.0267%
0.0267%
3,720,061
3,720,061
aifftr01
aifftr01
Original+ECC
Original+ECC
523
523
---
---
GEN-MCU
GEN-MCU
---
---
470
470
28
28
28
28
0.0281%
0.0281%
3,587,738
3,587,738
0.0281%
0.0281%
3,589,395
3,589,395
aifirf01
aifirf01
Original+ECC
Original+ECC
69,161
69,161
---
---
62
62
0.0606%
0.0606%
1,626,200
1,626,200
GEN-MCU
GEN-MCU
---
---
5,344
5,344
basefp01
basefp01
Original+ECC
Original+ECC
11,643
11,643
---
---
61
61
55
55
0.0599%
0.0599%
1,647,563
1,647,563
0.0543%
0.0543%
1,828,325
1,828,325
GEN-MCU
GEN-MCU
---
---
2,895
2,895
54
54
0.0531%
0.0531%
1,864,571
1,864,571
cacheb01
cacheb01
Original+ECC
Original+ECC
740,121
740,121
---
---
GEN-MCU
GEN-MCU
---
---
1,994
1,994
52
52
54
54
0.0515%
0.0515%
1,934,258
1,934,258
0.0537%
0.0537%
1,865,231
1,865,231
canrdr01
canrdr01
Original+ECC
Original+ECC
168,737
168,737
---
---
131
131
0.1296%
0.1296%
770,609
770,609
GEN-MCU
GEN-MCU
---
---
17,034
17,034
Iirflt01
Iirflt01
Original+ECC
Original+ECC
244,797
244,797
---
---
54
54
71
71
0.0533%
0.0533%
1,866,735
1,866,735
0.0711%
0.0711%
1,412,654
1,412,654
GEN-MCU
GEN-MCU
---
---
5,484
5,484
66
66
0.0659%
0.0659%
1,522,399
1,522,399
puwmod01
puwmod01
Original+ECC
Original+ECC
921,946
921,946
---
---
GEN-MCU
GEN-MCU
---
---
3,231
3,231
62
62
66
66
0.0619%
0.0619%
1,628,760
1,628,760
0.0666%
0.0666%
1,525,259
1,525,259
0
1,000,000
2,000,000
MTBF [cycle]  (Ratio)
MTBF
(1.00)
(1.34)
Original+ECC GEN-MCU
Figure 16. MTBF results for ECC RAM roll-
back
corresponds to the occurrence of a soft error in this RAM
under a 10−3 per CPU cycle. Here this error rate is termed
”ER-ECM”.
The MTBF results and graph are shown in Table 3 and
Figure 16. The column labeled ”Corrected Data Read” in
Table 3 expresses the sum of RAM read accesses that cor-
rected a single-bit error by ECC logic circuits in Origi-
nal+ECC. The column labeled ”Rollback Error Data” ex-
presses the sum of corrected single-bit error occurrences
in RAM by the rollback process in GEN-MCU. In GEN-
MCU, the number of read error data decreased because of
the rollback process that corrected a single-bit error in RAM
when the error was detected. The MTBF results of GEN-
MCU were about the same as or longer than Original+ECC,
and there were application dependencies because of the dif-
ference in RAM access. Although the MTBF of GEN-MCU
was 1.34 times longer than that of Original+ECC, as shown
in Figure 16, GEN-MCU has no critical path caused by
ECC, meaning that our architecture has the advantage of
high frequency for microcontrollers. Using a memory pa-
trol software can correct the latent single-bit soft error in
normal ECC RAM, but our ECC rollback architecture re-
5. Related work
In the search for highly dependable systems, many mod-
ule and time redundancy methods have been researched.
For example, there are module redundancy methods that
compare output signals from dual CPUs and RAM by a self-
checking comparator in a single-chip microprocessor [9].
Although these approaches can achieve high fault coverage,
the increase in hardware cost is very large. So, the use of
module redundancy methods has been restricted to high-end
applications such as airplanes, trains, and server comput-
ers. A famous example of a time redundancy method is
recomputing with shifted operands (RESO) [10][11]. How-
ever, this approach is difﬁcult to apply to microcontrollers
built into real-time systems because it has nearly 100% cy-
cle overheads. In our rollback architecture, cycle overhead
is created only when a soft error is detected.
However, non-redundant module approaches have re-
cently been proposed for high-end processors. Because
SER increases as semiconductor feature size and supply
voltages decrease, high-end processors with large-capacity
memory are likely to malfunction.
In addition, the large
number of microprocessors manufactured every year makes
increased hardware cost undesirable.
Intel has suggested
”Error-trapping F/F” and estimated that the area overhead
would be about 0.5% [12]. However, they use F/Fs consist-
ing of speciﬁc customized latches and reuse the multiplexed
scan F/Fs. We estimated that application of this technique to
our standard cell library would result in an area overhead of
over 110%. This method would make microcontroller man-
ufacturing more difﬁcult. Recently, Fujitsu presented its
”SPARC64 VI” architecture, which has a re-execute func-
tion from the PC when a soft error is detected [13]. Their
canceling instructions and rollback execution are similar to
our approach. All function modules of the SPARC64 VI
processor use protected parity or ECC. However, our gen-
eration tool of soft error-detecting logic circuits has the ad-
vantage that the tool optimizes the area and delay overheads
of generating soft error-detecting logic circuits.
Several dependable methods have also been presented in
low-end microcontrollers. For example, ST Microelectron-
ics is researching quad CPU architecture [14]. They expect
that the area of on-chip ROM will predominate over that of
the CPU in the microcontroller. But the power consumption
will become a signiﬁcant problem. Another example is the
cost-effective error detection platform using an ARM core
[15]. However, this is an error detection approach, and it is
hard to correct errors in random logic circuits with low over-
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007[7] M.Sugihara,
T.Ishihara,
and
M.Muroyama.
”A Simulation-Based Soft Error
Estimation Methodology for Computer Systems”.
Proc. of IEEE International Symposium on Quality
Electronic Design, pages 196–203, Mar 2006.
K.Hashimoto,
[8] J.Ray, J.Hoe, and B.Falsaﬁ.
”Dual Use of Super-
scalar Datapath for Transient-Fault Detection and Re-
covery”. Proc. of 34th International Symposium on
Microarchitecture, pages 214–224, Dec 2001.
T.Takehara,
and
[9] K.Shimamura,
”A Single-Chip Fail-Safe Micro-
K.Tsunedomi.
processor with Memory Data Comparison Feature”.
The 12th IEEE International Symposium Paciﬁc Rim
Dependable Computing(PRDC’06), pages 359–368,
Dec 2006.
Y.Shima,
[10] J. H. Patel and L. Y. Fung.
”Concurrent Error
Detection in ALU’s by Recomputing with Shifted
Operands”. IEEE Transactions on Computers, Vol.C-
31:589–595, Jul 1982.
[11] J. H. Patel and L. Y. Fung. ”Concurrent Error Detec-
tion in Multiply and Divide Arrays”. IEEE Transac-
tions on Computers, Vol.C-32:417–422, Apr 1983.
[12] Subhasish Mitra et al. ”Logic Soft Errors: A Major
Barrier To Robust Platform Design”.
International
Test Conference 2005(ITC2005), pages 687–698, Nov
2005.
[13] Aiichiro Inoue. ”Fujitsu SPARC64 VI: A State of the
Art Dual-Core Processor”. Fall Microprocessor Fo-
rum 2006, Oct 2006.
[14] M.Baleani, A.Ferrari, L.Mangeruca, M.Peri, and
S.Pezzini. ”Fault-Tolerant Platforms for Automotive
Safety-Critical Applications”.
International Confer-
ence on Compilers, Architecture and Synthesis for Em-
bedded Systems 2003(CASES2003), pages 170–177,
Oct 2003.
[15] R.Mariani, B.Vittorelli, and P.Fuhrmann.
”Cost-
effective Approach to Error Detection for an Embed-
ded Automotive Platform”.
Society of Automotive
Engineers 2006 World Congress(SAE2006), 2006-01-
0837:35–46, Apr 2006.
[16] ARM. ”http://www.arm.com/news/14895.html”, Oct
2006.
heads. ARM also announced its ”Cortex-R4F” [16], which
uses similar techniques: no timing critical path is triggered
by ECC RAM and re-execution is done by existing pipeline
ﬂush architecture. Although our rollback architecture re-
quires some cycle overheads because of CPU reset and roll-
back, it is able to correct soft errors that occur not only in
memories but also in the CPU, peripherals, and other con-
trol microcontroller modules.
6. Conclusion
We proposed a cost-effective, dependable microcon-
troller architecture for soft error recovery. We implemented
an EDA tool with soft error-detecting logic circuits, CPU
instruction-level rollback control modules, and an ECC
RAM-correcting architecture without delay overhead. Our
evaluation showed that this architecture achieved high tol-
erance to soft errors with low overheads and high perfor-
mance. We are planning to apply these architectures to the
manufacture of a new microcontroller for embedded sys-
tems used in automobiles and industrial machines.
References
[1] Kentaro Yoshimura et al.
”Cost-Effective and
Fault Tolerant Vehicle Control Architecture for X-
by-Wire Systems (Part 1: Architecture Design Based
on the Concept of Autonomous Decentralized Sys-
tems)”. Society of Automotive Engineers 2005 World
Congress(SAE2005), 2005-01-1527, Apr 2005.
[2] Kohei Sakurai et al. ”Cost-Effective and Fault Toler-
ant Vehicle Control Architecture for X-by-Wire Sys-
tems (Part 2: Implementation Design)”. Society of Au-
tomotive Engineers 2005 World Congress(SAE2005),
2005-01-1543, Apr 2005.
[3] Robert Baumann. ”Single Event Upsets in Commer-
cial Electronics - From Nuclear Mechanisms to Tech-
nology Scaling Trends”. Tutorials of International
Reliability Physics Symposium 2003(IRPS2003), Mar
2003.
[4] Cristian Constantinescu.
”Neutron SER Char-
acterization of Microprocessors”.
International
Conference on Dependable Systems and Networks
2005(DSN2005), pages 754–759, Jun 2005.
[5] David G. Mavis. ”Single Event Transient Phenomena
– Challenges and Solutions”. Microelectronics Relia-
bility and Qualiﬁcation Workshop 2002, Dec 2002.
[6] T.Sakata, T.Hirotsu, H.Yamada,
and T.Kataoka.
”Automatic Generation Techniques of Soft-Error-
Detecting Logic Circuits with Low Delay and
Area Overheads”. Fast Abstracts of International
Conference on Dependable Systems and Networks
2006(DSN2006), Vol.2:178–179, Jun 2006.
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007