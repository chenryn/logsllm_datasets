526Table 1: Comparison of Storage Overhead
Entity
Authority
Owner
Server
User
Our Scheme
(4 + na)·|p|
(2 + na)|g| +|gT|
|gT| + (3l + 1)|g|
(2 + na,i)·|g|
[3]
2|p|
2|g| +|gT|
l·|nu|·|p|
2|gT| + (3l + 3)|g| +
(2na,i + 1)|g| + log(nu + 1)|p|
2
Table 2: Comparison of Communication Cost
[3]
Communication
Cost between
Auth.&User
Auth.&Owner
Server&User
Server&Owner
Our Scheme
4|g| + na,i|g|
2|g| +|gT| + na|g|
|gT| + (3l + 1)|g|
|GT| + (3l + 1)·|G|
|g| + 2na,i|g|
2|g| +|gT|
(l ·|nu|/2 + log(nu + 1))|p|
|gT| + (2l + 1)|g|+
(l + 1)|GT| + 2l|G|
PROOF. From the deﬁnition of the unauthorized access, there
are two scenarios: 1) Users who do not have sufﬁcient attributes
satisfying the access structure may try to access and decrypt the
data. 2) When one or some attributes of the user are revoked, the
user may still try to access the data with his/her previous secret key.
For the ﬁrst scenario, the users who do not have sufﬁcient at-
tributes cannot decrypt the ciphertext by using their own secret
keys. We also consider the collusion attack from multiple users,
in our scheme, the user’s secret key is generated with a random
number, such that they may not be the same even if the users have
the same set of attributes. Thus, they cannot collude their secret
keys together to decrypt the ciphertext.
For the second scenario, suppose one attribute is revoked from a
user, the authority will choose another version key to generate the
update key and sends it to the server for updating all the ciphertexts
associated with the revoked attribute, such that the ciphertexts are
associated with the latest version key of the revoked attributes. Due
to the different values of the version key in the ciphertext, the re-
voked user is not able to use the previous secret key to decrypt the
ciphertext.
4.2 Performance Analysis
We give the analysis of our scheme by comparing with [3] in
terms of storage overhead, communication cost and computation
efﬁciency. Let |p| be the size of elements in Zp. Let |g| and |gT|
be the element size in G and GT respectively. Let na and nu denote
the total number of attributes and users in the system respectively.
Let na,i denote the number of attributes the user i possesses and let
l denote the number of attributes associated with the ciphertext.
4.2.1 Storage Overhead
Table 2 shows the comparison of storage overhead on each entity
in the system. The main storage overhead on the authority comes
from the master key in [3]. Besides the master key, in our scheme,
the authority needs to hold a version key for each attribute. Both
the public parameters and the public attribute keys contribute the
storage overhead on the owner in our scheme, which is linear to
the total number of attributes in the system. Although the data is
stored on the server in the format as shown in Figure 2, we do not
consider the storage overhead caused by the encrypted data, which
are the same in both our scheme and [3]. Our scheme only requires
the server to store the ciphertext, while the server in [3] needs to
store both the message head and the ciphertext which is also linear
to the number of users in the system. The storage overhead on
each user in our scheme is associated with the number of attributes
it possesses, while in [3] the storage overhead on each user is not
only linear to the number of attributes it possesses but also linear
to the number of users in the system. Usually, the number of users
are much larger than the number of attributes in the system, which
means that our scheme incurs less storage overhead.
4.2.2 Communication Cost
As illustrated in Table 3 the communication cost in the system
is mainly caused by the keys and ciphertexts. In our scheme, the
communication cost between the authority and the user comes from
both the user’s secret keys and the update keys, while in [3] only
the secret key contributes the communication cost between the au-
thority and the user. The communication cost between the authority
and the owner mainly comes from the public keys. In our scheme,
when there is an attribute revocation, the owner needs to get the
latest public attribute key of the revoked attributes, which also con-
tributes the communication between the authority and the owner.
In our scheme, the communication cost between the server and
the user comes from the ciphertext. But in [3], besides the cipher-
text, the message head (which contains the path keys) also con-
tributes the communication cost between the server and the users,
which is linear with the number of all the users in the system. Thus,
our scheme incurs less communication cost between the server and
the user than [3]. The ciphertext contributes the main communi-
cation cost between the server and the owner. Because the size of
ciphertext in our scheme is much smaller than the one in [3], the
communication cost between the sever and the owner is much less
than the one in [3].
4.2.3 Computation Efﬁciency
We implement our scheme and [3] on a Linux system with an
Intel Core 2 Duo CPU at 3.16GHz and 4.00GB RAM. The code
uses the Pairing-Based Cryptography (PBC) library version 0.5.12
to implement the schemes. We use a symmetric elliptic curve α-
curve, where the base ﬁeld size is 512-bit and the embedding degree
is 2. The α-curve has a 160-bit group order, which means p is a
160-bit length prime. The size of the plaintext is set to be 1 KByte.
All the simulation results are the mean of 20 trials.
We compare the computation efﬁciency between our scheme and
[3] in terms of encryption, decryption and re-encryption 2. From
the Figure 3(a), we can see that the time of encryption is linear
with the total number of attributes in the system. The encryption
phase in our scheme is more efﬁcient than the one in [3]. That is be-
cause, in [3], the owner ﬁrst encrypts the data by using the CP-ABE
scheme and sends the ciphertext to the server. Upon receiving the
ciphertext from the owner, the server will re-encrypt the ciphertext
with a randomly generated encryption exponent. Then, the server
encrypts this exponent with a set of attribute group keys by using
the broadcast encryption approach. Correspondingly, in the phase
of decryption, the user should ﬁrst decrypt the exponent with its
own path key and uses it to decrypt the data together with the se-
cret key. In our scheme, however, the user only needs to use the
secret key to decrypt the data, which is more efﬁcient than the [3]
as illustrated in the Figure 3(b).
During the attribute revocation, our scheme only requires to up-
date those components associated with the revoked attribute of the
ciphertext, while the [3] should re-encrypt all the components of the
ciphertext. Besides, the re-encryption in [3] should generate a new
2Note that we do not consider the computation of symmetric en-
cryption for data components since they are the same in both our
scheme and [3].
527(a) Encryption
(b) Decryption
(c) Re-encryption
Figure 3: Computation Cost Comparison
encryption exponent and encrypt this new exponent with the new
set of attribute group key by using broadcast encryption approach.
Thus, as illustrated in Figure 3(c), the time of re-encryption phase
in [3] is linear with the total number of attributes, while the time
of ciphertext update in our scheme is constant to the number of
revoked attributes.
5. RELATED WORK
The attribute-based encryption (ABE) technique [1, 2, 5, 7] is re-
garded as one of the most suitable technologies for data access con-
trol in cloud storage systems.There are two complementary forms
of ABE, Key-Policy ABE (KP-ABE) [2] and Ciphertext-Policy ABE
(CP-ABE) [1,7]. In KP-ABE, attributes are used to describe the en-
crypted data and access policies over these attributes are built into
user’s secret keys; while in CP-ABE, attributes are used to describe
the user’s attributes and the access policies over these attributes are
attached to the encrypted data.
In [8], the authors proposed a ﬁne-grained data access control
scheme based on the KP-ABE approach [2]. In their scheme, the
data owner encrypts the data with a content key and then encrypt
the content key by using the KP-ABE technique. The data owner
assigns the access structure and the corresponding secret key to
users by encrypting them with the user’s public key and stores it
on the server. However, their scheme requires the data owner to
always be online for user joining, which is not appropriate in cloud
storage systems. Some access control schemes are proposed based
on CP-ABE [1,3], since CP-ABE is considered to be more suitable
for data access control in cloud storage systems than KP-ABE. It
allows data owners to deﬁne an access structure on attributes and
encrypt the data under this access structure, such that data owners
can deﬁne the attributes that the user needs to possess in order to
decrypt the ciphertext. However, the revocation issue in CP-ABE
is still an open problem.
To deal with the attribute revocation issue in ABE system, Yu et
al. [9] proposed an attribute revocation method for CP-ABE, but
they require the server to decide which users can update their se-
cret keys according to the revoked user identity list, such that the
server is required to be fully trusted. Hur et al. [3] also proposed an
attribute revocation scheme in CP-ABE by allowing the server to
re-encrypt the ciphertext with a set of attribute group keys. It can
conduct the access right revocation on attribute level rather than
on user level. During the attribute revocation, the server needs to
change the attribute group key for the attribute which is affected by
the membership change and re-encrypts the ciphertext with the new
set of group attribute keys. This may incur high computation cost
on the server. Also the server should be fully trusted. However, the
server in cloud storage systems cannot be trusted and thus [3] can-
not be applied in our problem. Therefore, the attribute revocation
is still an open problem in attribute-based data access control.
6. CONCLUSION
In this paper, we proposed a ﬁne-grained data access control
scheme based on CP-ABE approach, where the owner was in charge
of deﬁning and enforcing the access policy. We also proposed an ef-
ﬁcient attribute revocation method for CP-ABE, which can greatly
reduce the cost of attribute revocation. Although this work is spe-
ciﬁc to cloud storage systems, but it is true that an untrusted remote
storage system is an application of the work.
7. ACKNOWLEDGMENT
This work is supported by Research Grants Council of Hong
Kong [Project No. CityU 114112] and in part by US National Sci-
ence Foundation under grants CNS-1262277 and CNS-1116939.
8. REFERENCES
[1] J. Bethencourt, A. Sahai, and B. Waters. Ciphertext-policy
attribute-based encryption. In S&P’07, pages 321–334. IEEE
Computer Society, 2007.
[2] V. Goyal, O. Pandey, A. Sahai, and B. Waters. Attribute-based
encryption for ﬁne-grained access control of encrypted data.
In CCS’06, pages 89–98. ACM, 2006.
[3] J. Hur and D. K. Noh. Attribute-based access control with
efﬁcient revocation in data outsourcing systems. IEEE Trans.
Parallel Distrib. Syst., 22(7):1214–1221, 2011.
[4] P. Mell and T. Grance. The NIST deﬁnition of cloud
computing. Technical report, National Institute of Standards
and Technology, 2009.
[5] A. Sahai and B. Waters. Fuzzy identity-based encryption. In
EUROCRYPT’05, pages 457–473. Springer, 2005.
[6] K. Sohr, M. Drouineaud, G.-J. Ahn, and M. Gogolla.
Analyzing and managing role-based access control policies.
IEEE Trans. Knowl. Data Eng., 20(7):924–939, 2008.
[7] B. Waters. Ciphertext-policy attribute-based encryption: An
expressive, efﬁcient, and provably secure realization. In
PKC’11, pages 53–70. Springer, 2011.
[8] S. Yu, C. Wang, K. Ren, and W. Lou. Achieving secure,
scalable, and ﬁne-grained data access control in cloud
computing. In INFOCOM’10, pages 534–542. IEEE, 2010.
[9] S. Yu, C. Wang, K. Ren, and W. Lou. Attribute based data
sharing with attribute revocation. In ASIACCS’10, pages
261–270. ACM, 2010.
204060801000.00.51.01.52.02.53.0 Time of Encryption (s)Total Number of Attributes Our Scheme Hur's Scheme10203040500.00.20.40.60.81.01.21.41.61.8 Time of DecryptionNumber of Attributes the User Possesses Our Scheme Hur's Scheme204060801000.00.51.01.52.02.53.0 Time of Re-encryption/Update (s)Total Number of Attributes Our Scheme Hur's Scheme528