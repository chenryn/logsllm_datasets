### Utilizing PDAs as Trusted Input Devices

Previous research has explored the use of Personal Digital Assistants (PDAs) as touchpads, primarily for convenience (e.g., [17]). In our approach, we leverage a PDA as a touchpad to establish a trusted input path. Additionally, we have integrated components of an optical mouse into the PDA (see Figure 1), enabling it to function as both a touchpad and a mouse.

Balfanz and Felten [3] highlight that PDAs can provide a trusted input and output path when used with an untrusted host. Our system also employs a PDA as a trusted input device, finding it more reliable than a public terminal for the same reasons outlined in [3]. However, Balfanz and Felten use the PDA to perform cryptographic functions that the host cannot be trusted with. This method is not feasible in our case, as the amount of framebuffer data that needs to be decrypted by the untrusted host is too large for the PDA to handle. Therefore, we allow the untrusted host to handle its own decryption, but with rapidly expiring keys.

Our work shares some similarities with SSL-Splitting [16], where untrusted proxy servers are given only encryption keys, not Message Authentication Code (MAC) keys, to serve web content over an SSL connection. In contrast, we provide the untrusted terminal with both decryption and MAC keys to receive data over an SSL connection. In SSL-Splitting, clients connect to untrusted proxy servers while requiring assurance from the server that the content is authentic. In our system, the untrusted entities are the clients, and the server requires assurance that the input events are authentic.

### Preliminaries and Goals

The primary objective of our system is to enable a user with a small, trusted device to securely access sensitive information stored on their home computer. We achieve this through a "remote desktop" application, providing the user with full access to their home computing environment. The user holds certain capabilities on the trusted device and temporarily delegates some of them to an untrusted host, which displays the sensitive information. It is important to note that the input and output paths are clearly separated: all input comes from the trusted device, while the output goes to the untrusted host. Thus, the untrusted host has "read-only" access to the part of the home computing environment chosen by the user. The untrusted host is trusted to some extent to display the received information correctly.

#### Model

The key players in our secure remote terminal application are:
- **Home Computer (HC):** Holds sensitive information and acts as the remote terminal server.
- **Untrusted Terminal (UT):** Delegated the capability of acting as the remote terminal output.
- **User:** Uses a trusted PDA to send input to the remote terminal server.

We assume that all devices in the user's home network, which form the trusted computing base, are given certain credentials. In our implementation, these credentials are certificates signed by a root home certification authority, which could be the PDA itself or another trusted device. Any two devices from the home network use these certificates to mutually authenticate, and communication between them (e.g., between the PDA and the home computer) is always conducted over SSL with client authentication enabled.

The PDA and the untrusted terminal communicate through a secure channel. In our prototype, we physically connect the PDA to the untrusted terminal, but a wireless connection authenticated via a location-limited channel (e.g., infrared) is also possible.

Our security goals are:
1. All input events (mouse and keyboard) to the remote terminal server come from the trusted device over a secure communication channel.
2. All output goes to the untrusted host over a secure communication channel.
3. The untrusted host can access sensitive information only when the trusted device is in its proximity.

Regarding the third goal, there is a timeout between the moment the PDA stops delegating credentials and the time the host computer is denied access to the sensitive information. We consider timeouts on the order of seconds to minutes to be reasonable. This timeout is crucial because the user may choose to display time-varying information whose future contents may be sensitive, such as recent emails or video surveillance output.

A straightforward solution might be to have the trusted device hand over its certificate (and private key) to the untrusted host. However, this approach has two issues:
1. The certificate is likely a coarse-grained capability, authorizing the bearer for extensive access to the home network.
2. The certificate may not expire soon enough, allowing the untrusted computer to access the home network long after the user has left.

Therefore, we need to find lower-privilege credentials to delegate and ensure that the delegation is temporary, lasting only while the user is near the untrusted device.

Another simple solution would be to avoid credential delegation altogether, providing secure remote access to the home environment only to the trusted device, which can then forward any subset of the information to the untrusted terminal. Unfortunately, this places unreasonable bandwidth and computational demands on the trusted device, which we aim to keep small and inexpensive.

#### Overview of SSL

SSL (Secure Socket Layer) [14] is a transport-level security protocol that creates a secure transparent tunnel between a client and a server. The protocol consists of two phases: an initial handshake and a data transfer phase. During the handshake, the server authenticates to the client (client authentication is optional), and the parties agree on the cryptographic algorithms for confidentiality and data integrity (ciphers, MAC algorithms). They then derive the cryptographic keys.

After verifying the server’s certificate, the client and server agree on a shared secret, the "pre-master secret." If the server uses an RSA public key, the client generates a random value, encrypts it with the server’s public key, and sends it. Both parties derive a master secret from the pre-master secret using cryptographically secure hash functions (MD5 and SHA-1). The keys generated are:
1. Client write MAC key
2. Server write MAC key
3. Client write key
4. Server write key

Both parties compute a MAC of all handshake messages and verify the other party’s MAC. In the data transfer phase, SSL breaks the data into records, encrypts them with the appropriate write key, and adds a MAC computed with the secret MAC key. The use of SSL is transparent to the application level, allowing any TCP-based application to be modified to run over SSL.

#### Virtual Network Computing (VNC)

Virtual Network Computing (VNC) [18] is an open-source remote display system developed by AT&T, allowing a remote terminal (VNC viewer) to access the graphical interface of a VNC server. The protocol is platform-independent and designed for lightweight applications running on various hardware configurations.

VNC is based on the Remote FrameBuffer (RFB) protocol [19], which encodes screen images as rectangles. It supports multiple image encodings and negotiates the encoding to be used during the initial phase. The VNC server receives input from the client, which encodes keyboard and mouse events and transmits them. The protocol is adaptive, sending updates only when explicitly requested by the client. Thus, the update rate can be adjusted dynamically based on the client’s capabilities and network characteristics. A VNC client sends two types of messages: one for traditional input events and another for display update requests. An application like ours, which separates the display and input components, must provide the display component a channel back to the VNC server for requesting updates.

VNC authentication is password-based. The VNC server is configured with a password, and the viewer must prove knowledge of this password via a challenge-response protocol, encrypting the challenge with a key derived from the password.

### A Secure Remote Terminal Application

We present an overview of our system and explain the roles of the three parties (untrusted terminal, PDA, and home computer) in the remote terminal application. We then discuss design issues and describe a specific implementation before evaluating its performance.

For our prototype, we modified an existing open-source remote desktop application, VNC [18], securing all communication between the trusted device, home computer, and untrusted terminal using SSL/TLS.

#### The Three-Party Secure Remote Terminal Protocol

1. **PDA Contacts the Home Computer (PDA ↔ HC)**
   - The PDA initiates an SSL session with the home computer, and both authenticate using certificates signed by the home root certification authority.
   - They compute the master secret `ms` of the SSL session and negotiate the length of the time interval `t`.
   - In our implementation, the PDA must be connected to the untrusted terminal for this step. If the PDA has its own network connection, this step can be performed independently.

2. **PDA Contacts the Untrusted Terminal (PDA ↔ UT)**
   - The PDA sends the name of the home computer, the home certification authority’s root certificate, and the VNC password derived from `ms`.
   - In our implementation, the destination is implicitly defined by the physical connection between the PDA and the untrusted terminal. A PDA with its own network connection could learn the identity of the untrusted terminal through a location-limited handshake.

3. **VNC Connection Initiation (UT ↔ HC)**
   - The untrusted terminal starts an SSL session with the home computer, with client authentication disabled.
   - Over this session, it initiates a VNC connection to the home computer using the password provided by the PDA. The input to the VNC client (mouse and keyboard events) comes from the PDA.

This protocol ensures that the untrusted terminal can only access the home computer's sensitive information when the trusted PDA is in proximity, maintaining the security and integrity of the system.