with  ùë°ùëë
successfully  implemented  on  those  chips  using  our  experi-
mental set-up. A faster digital interface is needed in order to 
implement data recovery algorithm on those chips with lower 
block erase time.  
6.3 Effectiveness of Analog Scrubbing 
In  order  to  show  the  effectiveness  of  the  proposed  analog 
scrubbing,  we  perform  the  following  step-by-step  experi-
ments. First, we write the same Einstein image on a NAND 
block  and  bake  it  for  3  hours  at  120¬∞C  to  emulate  the  data 
retention effects. We then create an all zero page using partial 
programming technique. The partial program duration is cal-
culated based on memory‚Äôs data retention characteristics. We 
Figure 7: Analog scrubbing output (a) Stored original Einstein image (460 √ó 600). (b) Scrubbed image after data retention 
takes place. We bake the chip for 3 hours in an oven of temperature 120¬∞C in order to accelerate the data retention effect. 
(c) Recovered raw image using analog scrubbing operation. 
1406    29th USENIX Security Symposium
USENIX Association
Bit accuracy (%)Bake time (hour)Accuracy for Micron chipAccuracy for Toshiba chipScrubbingAfter DRPartial erase(a)(b)(c)‚Ä¢  Logical sanitization: Since block erasure methods suf-
fer from poor performance, NAND storage usually per-
forms logical sanitization by invalidating the page ad-
dress  of  obsolete  data.  The  page  address  mapping  in 
NAND storage is handled by FTL, which performs one-
to-one  mapping  between  logical  page  address  and  the 
physical memory address of the flash media. Thus, for 
any page update operation, FTL will write the new con-
tents to another physical page (or sector) location and 
update the address table map so that the new data ap-
pears at the target logical address. As a result, the old 
version of the data remains in the physical storage me-
dium, which can be retrieved by the adversary.  
‚Ä¢  Encryption  based  sanitization:  Several  authors  have 
recently  proposed  NAND  sanitization  methods  based 
on an encryption technique[17]‚Äì[22]. The basic idea in 
this method is to encrypt the user file with an encryption 
key and store the encrypted data and the key in two sep-
arate NAND blocks. Secure deletion is achieved by re-
moving the keys, which can be done efficiently as keys 
require smaller memory space. Even though encryption 
based techniques are quite fast, they suffer from the fol-
lowing  drawbacks.  First,  encryption  based  technique 
carries the risk of data recovery as its implementation 
may have certain issues, such as random number gener-
ation (for encryption key) which can be compromised 
by  a  motivated  adversary[23].  Second,  encryption 
based  sanitization  requires  proper  sanitization  of  key 
storage block and any other derived values that might 
be useful in cryptanalysis. Third, several existing stor-
age solutions and resource constrained embedded plat-
forms may not include any encryption/decryption mod-
ule and hence cannot implement this technique. 
‚Ä¢  Scrubbing or zero-overwrite based digital sanitiza-
tion:  In  order  to  achieve  page-level  deletion  in  flash 
based  storage,  the  idea  of  ‚Äúdata  scrubbing‚Äù  was  pro-
posed [1], [16], [24]. The key concept behind  ‚Äúscrub-
bing‚Äù  based  sanitization  is  the  creation  of  an  all-zero 
page (or all cells programmed), which is equivalent to 
the deletion of data from that page. Thus, ‚Äúscrubbing‚Äù 
provides an alternative route  to  digital sanitization by 
programming  all  the  cells  in  the  page.  However,  we 
have shown in this paper that the scrubbed data is par-
tially or completely recoverable due to the analog prop-
erty of the programmed cells.  
‚Ä¢  History  independent  erase:  Recently,  several  re-
searchers have proposed secure NAND deletion meth-
ods which will not only remove data from the storage 
medium but also conceal deletion history from the sys-
tem[25]‚Äì[27]. For example, Jia et al.[26] proposed un-
detectable  secure  deletion  in  flash  system  by  using  a 
partial scrubbing technique and removing any structural 
artifacts of past deletion operation from the  flash  sys-
tem. Similarly, Chen et al. [27] designed HiFlash, a his-
tory independent flash device, which will remove all the 
history related artifacts in the flash layout. 
8. Conclusion  
In this paper, we show that digitally sanitized (zero overwrite 
based  ‚Äúscrubbing‚Äù)  NAND  flash  storage  media  still  main-
tains the previously written information in the analog thresh-
old voltage characteristics. The data retention property of the 
flash memory cells causes difference in the analog threshold 
voltage of the original zero bits in the data and the newly cre-
ated zeros during scrubbing. We experimentally demonstrate 
that the difference in the analog threshold voltage can be ex-
ploited to recover the deleted data from a fully scrubbed all-
zero page.  We  utilize  partial erase  technique  to  recover  the 
deleted data and our evaluation shows more than 75% bits are 
recoverable  depending  on  the  specification  of  the  NAND 
chip, memory cell‚Äôs data retention characteristics and the na-
ture of the image data. Finally, we describe a new method for 
analog sanitization of NAND memory pages using page cre-
ation  time  and  partial  program  technique.  Our  evaluation 
shows promise of the proposed technique for analog sanitiza-
tion and true deletion of user data from the flash media.  
References 
[1]  M. Wei, L. M. Grupp, F. E. Spada, and S. Swanson, ‚ÄúRe-
liably  Erasing  Data  from  Flash-based  Solid  State 
Drives,‚Äù in Proceedings of the 9th USENIX Conference 
on File and Stroage Technologies, Berkeley, CA, USA, 
2011, pp. 8‚Äì8. 
[2]  Y. Cai, O. Mutlu, E. F. Haratsch, and K. Mai, ‚ÄúProgram 
interference in MLC NAND flash memory: Characteri-
zation, modeling, and mitigation,‚Äù in 2013 IEEE 31st In-
ternational  Conference  on  Computer  Design  (ICCD), 
2013, pp. 123‚Äì130. 
[3]  L.  Zuolo,  C.  Zambelli,  R.  Micheloni,  and  P.  Olivo, 
‚ÄúSolid-State Drives: Memory Driven Design Methodol-
ogies for Optimal Performance,‚Äù Proc. IEEE, vol. 105, 
no. 9, pp. 1589‚Äì1608, Sep. 2017. 
[4]  F. Chen, T. Zhang, and X. Zhang, ‚ÄúSoftware Support In-
side  and  Outside  Solid-State  Devices  for  High  Perfor-
mance and High Efficiency,‚Äù Proc. IEEE, vol. 105, no. 
9, pp. 1650‚Äì1665, Sep. 2017. 
[5]  N. R. Mielke, R. E. Frickey, I. Kalastirsky, M. Quan, D. 
Ustinov,  and  V.  J.  Vasudevan,  ‚ÄúReliability  of  Solid-
State  Drives  Based  on  NAND  Flash  Memory,‚Äù  Proc. 
IEEE, vol. 105, no. 9, pp. 1725‚Äì1750, Sep. 2017. 
[6]  Y. Cai, S. Ghose, E. F. Haratsch, Y. Luo, and O. Mutlu, 
‚ÄúError  Characterization,  Mitigation,  and  Recovery  in 
Flash-Memory-Based Solid-State Drives,‚Äù Proc. IEEE, 
vol. 105, no. 9, pp. 1666‚Äì1704, Sep. 2017. 
USENIX Association
29th USENIX Security Symposium    1407
[7]  C. M. Compagnoni, A. Goda, A. S. Spinelli, P. Feeley, 
A. L. Lacaita, and A. Visconti, ‚ÄúReviewing the Evolu-
tion of the NAND Flash Technology,‚Äù Proc. IEEE, vol. 
105, no. 9, pp. 1609‚Äì1633, Sep. 2017. 
[8]  L.  M.  Grupp  et  al.,  ‚ÄúCharacterizing  flash  memory: 
Anomalies,  observations,  and  applications,‚Äù  in  2009 
42nd  Annual  IEEE/ACM  International  Symposium  on 
Microarchitecture (MICRO), 2009, pp. 24‚Äì33. 
[9]  Y. Luo, S. Ghose, Y. Cai, E. F. Haratsch, and O. Mutlu, 
‚ÄúEnabling Accurate and Practical Online Flash Channel 
Modeling  for  Modern  MLC  NAND  Flash  Memory,‚Äù 
IEEE J. Sel. Areas Commun., vol. 34, no. 9, pp. 2294‚Äì
2311, Sep. 2016. 
[10] Y. Cai, E. F. Haratsch, O. Mutlu, and K. Mai, ‚ÄúThresh-
old voltage distribution in MLC NAND flash memory: 
Characterization, analysis, and modeling,‚Äù in 2013 De-
sign, Automation Test in Europe Conference Exhibition 
(DATE), 2013, pp. 1285‚Äì1290. 
[11] P.  Gutmann,  ‚ÄúData  Remanence  in  Semiconductor  De-
vices,‚Äù in USENIX Security Symposium, 2001. 
[12] P.  Gutmann,  ‚ÄúSecure  Deletion  of  Data  from  Magnetic 
and  Solid-state  Memory,‚Äù  in  Proceedings  of  the  6th 
Conference on USENIX Security Symposium, Focusing 
on Applications of Cryptography - Volume 6, Berkeley, 
CA, USA, 1996, pp. 8‚Äì8. 
[13] S.  Skorobogatov,  ‚ÄúData  Remanence  in  Flash  Memory 
Devices,‚Äù in Proceedings of the 7th International Con-
ference  on  Cryptographic  Hardware  and  Embedded 
Systems, Berlin, Heidelberg, 2005, pp. 339‚Äì353. 
[14] J.  Reardon,  C.  Marforio,  S.  Capkun,  and  D.  Basin, 
‚ÄúUser-level Secure Deletion on Log-structured File Sys-
tems,‚Äù in Proceedings of the 7th ACM Symposium on In-
formation,  Computer  and  Communications  Security, 
New York, NY, USA, 2012, pp. 63‚Äì64. 
[15] S. M. Diesburg et al., ‚ÄúTrueErase: per-file secure dele-
tion for the storage data path,‚Äù in ACSAC, 2012. 
[16] K.  Sun,  J.  Choi,  D.  Lee,  and  S.  H.  Noh,  ‚ÄúModels  and 
Design of an Adaptive Hybrid Scheme for Secure Dele-
tion  of  Data  in  Consumer  Electronics,‚Äù  IEEE  Trans. 
Consum. Electron., vol. 54, 2008. 
[17] J. Reardon, S. Capkun, and  D. Basin,  ‚ÄúData Node En-
crypted File System: Efficient Secure Deletion for Flash 
Memory,‚Äù presented at the Presented as part of the 21st 
{USENIX} Security Symposium ({USENIX} Security 
12), 2012, pp. 333‚Äì348. 
[18] J. Reardon, D. Basin, and S. Capkun, ‚ÄúOn Secure Data 
Deletion,‚Äù IEEE Secur. Priv., vol. 12, no. 3, pp. 37‚Äì44, 
May 2014. 
[19] J. Reardon, D. Basin, and S. Capkun, ‚ÄúSoK: Secure Data 
Deletion,‚Äù  in  2013  IEEE  Symposium  on  Security  and 
Privacy, 2013, pp. 301‚Äì315. 
[20] J. Lee, J. Heo, Y. Cho, J. Hong, and S. Y. Shin, ‚ÄúSecure 
deletion for NAND flash file  system,‚Äù in  In ACMSym-
posium on Applied Computing,2008. 
[21] S. Jia, L. Xia, B. Chen, and P. Liu, ‚ÄúDEFTL: Implement-
ing Plausibly Deniable Encryption in Flash Translation 
Layer,‚Äù in Proceedings of the 2017 ACM SIGSAC Con-
ference  on  Computer  and  Communications  Security, 
New York, NY, USA, 2017, pp. 2217‚Äì2229. 
[22] L. Yang, T. Wei, F. Zhang, and J. Ma, ‚ÄúSADUS: Secure 
data deletion in user space for mobile devices,‚Äù Comput. 
Secur., vol. 77, pp. 612‚Äì626, Aug. 2018. 
[23] T.  Ristenpart  and  S.  Yilek,  ‚ÄúWhen  Good  Randomness 
Goes  Bad:  Virtual  Machine  Reset  Vulnerabilities  and 
Hedging Deployed Cryptography,‚Äù in Ndss ‚Äô10 (network 
and Distributed Security Symposium), 2010. 
[24] W. Wang, C. Ho, Y. Chang, T. Kuo, and P. Lin, ‚ÄúScrub-
bing-Aware  Secure  Deletion  for  3-D  NAND  Flash,‚Äù 
IEEE Trans. Comput.-Aided Des. Integr. Circuits Syst., 
vol. 37, no. 11, pp. 2790‚Äì2801, Nov. 2018. 
[25] B. Chen, S. Jia, L. Xia, and P. Liu, ‚ÄúSanitizing Data is 
Not Enough!: Towards Sanitizing Structural Artifacts in 
Flash Media,‚Äù in Proceedings of the 32Nd Annual Con-
ference on Computer Security Applications, New York, 
NY, USA, 2016, pp. 496‚Äì507. 
[26] S. Jia, L. Xia, B. Chen, and P. Liu, ‚ÄúNFPS: Adding Un-
detectable Secure Deletion to Flash Translation Layer,‚Äù 
in Proceedings of the 11th ACM on Asia Conference on 
Computer  and  Communications  Security,  New  York, 
NY, USA, 2016, pp. 305‚Äì315. 
[27] B. Chen and R. Sion, ‚ÄúHiFlash: A History Independent 
Flash Device,‚Äù ArXiv, vol. abs/1511.05180, 2015. 
1408    29th USENIX Security Symposium
USENIX Association