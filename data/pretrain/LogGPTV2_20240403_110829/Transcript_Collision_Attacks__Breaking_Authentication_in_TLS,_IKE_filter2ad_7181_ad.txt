Fig. 5. TLS 1.3: A server-authenticated 1-RTT (EC)DHE handshake
based on draft 10 of the speciﬁcation. The client and server send their
key shares within the hello messages and all subsequent handshake
messages are encrypted. The server signs the current handshake
transcript hash(log 2) in a new SCV message.
of TLS clients would be affected. To err on the safe side,
we recommend that TLS libraries should immediately
disable all MD5-based signatures.
Exploiting predictable nonces and keys. We observe
that
the precomputation in the above attack can be
avoided if the server uses a predictable nonce ns and
predictable DH parameters p, g, gy. In this case, the
attacker only has to perform 264 computations online.
How realistic is this assumption? Many TLS imple-
mentations allow DH keys to be reused; in OpenSSL,
for example, keys are reused by default unless the
application sets the SSL_OP_SINGLE_DH_USE ﬂag. For
such servers, the parameters are clearly predictable.
That leaves the server nonce, and as we noted for
clients, a bug in the use of the random number gen-
erator could lead to predictable nonces. Alternatively,
the server may support a recent TLS variant called
Snap-Start [23] that allows the client (and hence the
attacker) to choose the server nonce. That said, we do
not know of any deployed TLS 1.2 implementation that
uses predictable nonces, but this section serves as a
warning to implementors that strongly random nonces
are needed in TLS, and not just for preventing replays.
C. Breaking TLS 1.3 Client and Server Authentication
using a Chosen-Preﬁx Transcript Collision
From the viewpoint of transcript collisions, TLS 1.2
server signatures may seem stronger than client signa-
tures, but not signing enough leads to other security
problems. For example, the server becomes vulnerable
9
to cross-protocol attacks [26] and to downgrade attacks
like Logjam [1]. In response to such attacks, the new
design of TLS 1.3 requires the server to sign the full
handshake log, including the negotiated parameters.
Figure 5 illustrates the standard one-round-trip (1-
RTT) message ﬂow in the current draft (version 10) of
the TLS 1.3 speciﬁcation. In comparison to TLS 1.2,
this protocol ﬂips the order in which the DH key shares
are sent, so that the handshake can complete in one
round trip. The key shares are sent within extensions
in the hello messages CH and SH. The server no longer
sends an SKE message. Instead, it sends a new server
certiﬁcate verify message SCV just before the ﬁnished
message. The SCV contains a signature over the hash
of the full message log up to this point (log 2). Another
departure from TLS 1.2 is that all handshake messages
after SH are encrypted, in order to protect the privacy of
the client and server certiﬁcates from passive attackers.
We demonstrate a chosen-preﬁx transcript collision
on TLS 1.3 that breaks both client and server signatures,
enabling a full man-in-the-middle attack on the protocol.
The attack is similar in spirit to the one on TLS 1.2
client signatures; we use the ﬂexible formats of the
client and server hello messages to create a trascript
collision immediately after the server hello SH.
it sends its own CH(cid:48)
The client C wants to connect to S, but its mes-
sages are intercepted by a network attacker A. After
A receives the client’s CH,
to
the server, receives the servers SH, and sends its own
SH(cid:48)
to the client. A now knows the Difﬁe-Hellman
shared secrets on both connections, and it has chosen
CH(cid:48) and SH(cid:48) such that hash(CH|SH(cid:48)) = hash(CH(cid:48)|SH).
Consequently, A can now simply forward all hanshake
messages between C and S, and both client and server
authentication will succeed. A will need to decrypt and
reencrypt these messages, but it can do so because it
knows the encryption keys on both connections. More
importantly, once the handshake is complete, A can read
and tamper with application data in both directions.
To compute CH(cid:48) and SH(cid:48), A needs to ﬁnd a chosen-
preﬁx collision C1, C2 of length L1 and L2 bytes re-
spectively such that C1 appears within the last extension
of of SH(cid:48) and C2 appears as the last extension of CH(cid:48):
hash(CH|SH
))
)) = hash(CH
(cid:48)(nc, gx(cid:48)
(cid:48)(ns, gy(cid:48)
, C1|−(cid:124)(cid:123)(cid:122)(cid:125)
ex(cid:48)
s
, C2(cid:124)(cid:123)(cid:122)(cid:125)
ex(cid:48)
c
Suppose we know that the server S will respond to
CH(cid:48) with a server hello message SH of known length
M. Then in SH(cid:48), we set the length of ex(cid:48)
s to L1 + M
so that
there is room for M more bytes after C1.
Once A receives SH from S, it stuffs this message
within this extra space in SH(cid:48) and sends it to C. Hence,
after the server hello, the handshake transcripts at the
client and server have the same hash. Moreover, due to
10
the length extension property of the hash function, all
subsequent handshake hashes collide. So, A can forward
S’s signature in SCV to C and C’s signature in CCV to
S, and both will be accepted, even though the DH keys
have been tampered with by a man-in-the-middle.
Implementing a Proof-Of-Concept Up to draft 7,
the TLS 1.3 speciﬁcation explicitly allowed RSA-MD5
signatures. We wrote a proof-of-concept attack demo
based on our own simple prototype implementation
of TLS 1.3 that signs with RSA-MD5. As with TLS
1.2 client authentication, we found the chosen-preﬁx
collision in roughly one hour on a single workstation.
As we observed when discussing TLS 1.2, a large
number of TLS servers and clients support RSA-MD5
signatures. Consequently, we believe that if TLS 1.3
draft 7 were to be implemented today, it is quite likely
that many of its clients and servers would be vulnerable
to our man-in-the-middle attack. However, this attack
vector was removed from TLS 1.3, at least partly due
to our ﬁndings, when draft 8 of the protocol explicitly
deprecated MD5-based signatures.
D. Downgrading TLS 1.0-1.1 to Weak Ciphersuites
using a Chosen-Preﬁx Transcript Collision
In TLS,
the integrity of the handshake depends
upon the MACs exchanged in the Finished messages. If
these MACs were broken, the attacker would be free to
modify the hello messages to downgrade the connection
to an old protocol version or weak ciphersuite, or to
delete important extensions such as the renegotiation
indication countermeasure [11].
Recall that the Finished MACs are computed over
the hash of the full handshake trascript (hash(log 2) and
hash(log 3) in Figure 3). In TLS 1.0 and 1.1, this hash
function is the concatenation of MD5 and SHA-1. As
we saw in Section III, a chosen-preﬁx collision on this
construction can be computed with 277 work. We ﬁnd a
man-in-the-middle transcript collision attack on server-
authenticated TLS 1.1 that is similar to the TLS 1.3
attack. A network attacker modiﬁes the client and server
hellos so that the handshake hashes collide immediately
after these two messages; the rest of the handshake
is left unchanged. The client authenticates the server
and the handshake completes successfully, and although
the attacker does not know the master secret, it can
downgrade the connection to use any weak algorithm
that both the client and server support, but prefer not
to use, such as an EXPORT ciphersuite [1], or a weak
encryption algorithm like RC4.
A similar transcript collision attack appears in DTLS
1.0, a UDP-based variant of TLS 1.1. In DTLS, the
attack can be made even more efﬁcient by exploiting
its cookie mechanism. In response to a client hello CH,
The goal of the attacker is to make sure that
the contents of the client ﬁnished message (i.e. the
tls-unique) coincide on both connections:
mac96(msc, log c
2) = mac96(mss, log s
2)
The attacker can use any controlled part of the tran-
script, but we will set things up carefully so that he
can compute the collision as late as possible, in order
to reduce the size of the messages to hash. More
precisely, we use the certiﬁcate request SCR(cid:48) on the
client-side and the NPN message on the server side,
which are sent when all other messages in the transcript
are already ﬁxed. The attacker uses C1 as the last
distinguished name in SCR(cid:48) and C2 as the padding in
the NPN message (after the protocol name “http/1.1”),
and computes (C1, C2) such that the MAC coincides.
Once this collision is found,
the MitM sends these
two messages on the corresponding connections and
completes the handshakes. A can then impersonate C
at S by forwarding any application-level channel-bound
credentials sent by C (for A) to S.
Implementing a Proof-Of-Concept We implemented
a man-in-the-middle attacker to demonstrate the attack.
We used an OpenSSL client as C and the main Google
website as S, since this website supports the next-
protocol-negotiation protocol extension. After receiving
the client hello CH from the client and the server hello
done SHD from the server-side, the MitM runs a generic
collision search to compute SCR(cid:48) and NPN.
For the collision search, we implemented the TLS
PRF mac96 function using the CUDA framework for
NVIDIA GPUs. In TLS versions up to 1.1, this con-
struction is built using MD5 and SHA-1; in TLS 1.2
the construction uses SHA-256. However, the strength
of the hash function is immaterial because what we are
attacking is the truncated 96-bit MAC. The underlying
hash function does not matter. Following the analysis
explain in Section III,
it should require about 248
computations on average to get a collision.
Our implementation run at 160 MH/s for TLS 1.1
and 113 MH/s for TLS 1.2 on a Tesla K20Xm GPU.
This is comparable to the expected speed we can derive
from benchmarks of MD5, SHA-1 and SHA-256 on this
GPU.It took 20 days to ﬁnd a collision for TLS 1.1,
using four Tesla K20Xm GPUs. Our demo evaluated
the PRF about 249.9 times, which is rather unlucky: it
should take half that number on average. We note that
the generic collision attack is completely parallelizable
and hence the time for ﬁnding a collision can be brought
down to an arbitrarily small number by throwing enough
computational power at it. Using Amazon EC2, this
should cost about $140 for TLS 1.1, and $200 for TLS
1.2. The transcripts are available on our website.
Man-in-the-middle credential
forwarding attack on
Fig. 6.
tls-unique channel binding. The attack uses a transcript collision
to impersonate the client to the server.
a DTLS server can send a hello verify request message
HVR containing a cookie. The client is meant to restart
the handshake by sending the exact same client hello
message but with this cookie included in it. Since the
HVR is not authenticated, the arbitrary-length cookie
ﬁeld allows any network attacker to inject data into the
transcript, after a known preﬁx of a ﬁxed length. This
allows the chosen-preﬁx attack to be transformed to
an almost common preﬁx attack, similar to the cookie-
based attack on IKEv2 in Section VI-A.
E. Breaking the tls-unique Channel Binding
using a Generic Transcript Collision
Suppose an application-level authentication protocol
to the tls-unique
at C binds its login credential
channel binding [2], so that when the credential
is
sent from C to A, it cannot be used by A at S. We
demonstrate how the attacker A could use a generic
collision attack to break this protection.
Figure 6 depicts the attack. It follows the general
pattern of the TLS 1.2 client authentication attack,
except that it relies on a collision on the transcript
MAC in the client ﬁnished message, rather than a
collision in the hash function. The client C connects
to the MitM A who then opens a new connection to S.
The attacker sends a SKE(cid:48) to C that contains a bogus
group (k2 − 1, k), thereby forcing the client to send
kx mod (k2 − 1) = k in its client key exchange CKE.
On the server side, the attacker can send its own CKE(cid:48)
containing any Difﬁe-Hellman value. Hence, the MitM
knows the master secrets ms c, ms s and connection keys
on both connections.
11
Figure 11 in Appendix depicts an attack on IKEv2 ini-
tiator authentication that relies on a transcript collision
on this signature. The network attacker intercepts the
SA INIT request from I to R and responds with a
cookie ck. The initiator I restarts the key exchange
by including ck in the new SA INIT request (m1).
However, the attacker has chosen ck in a way that the
hash of m1 is the same as the hash of a tampered
SA INIT request m(cid:48)
1 that contains the attacker’s Difﬁe-
Hellman public value gx(cid:48)
. The attacker sends this tam-
pered request m(cid:48)
1 to the responder and upon receiving
a response, it tampers with the response to replace R’s
Difﬁe-Hellman key gy with its own key gy(cid:48)
. Note that
the attacker does not tamper with the nonces ni, nr.
At this point, the attacker knows the shared secrets
gx(cid:48)y, gxy(cid:48)
and encryption keys on the two connections.
Moreover the hash used in the signature transcript
collides all the way to the mac(ki, IDi). To complete
the attack, the attacker must ensure that ki is that same
at I and R. It can ensure this by choosing x(cid:48), y(cid:48) such
that gx(cid:48)y = gxy(cid:48)
(as discussed below). Thereafter, it can
forward I’s signature to R and hence impersonate I.
Implementing the Attack To implement the attack,
we must ﬁrst ﬁnd a collision between m1 and m(cid:48)
1.
We observe that in IKEv2 the length of the cookie is
supposed to be at most 64 octets but we found that many
implementations allow cookies of up to 216 bytes. We
can use this ﬂexibility in computing long collisions.
The attacker ﬁnds two length-preﬁxed bitstrings
(C1, C2) of L bytes each such that
hash(SA INIT([C1|−]
|−)) = hash(SA INIT( C2(cid:124)(cid:123)(cid:122)(cid:125)
(cid:124) (cid:123)(cid:122) (cid:125)
|−))
ck
ck(cid:48)
where the length of ck is set to L+M, that is, ck has M
empty bytes ready to ﬁll in. We set M to the length of
i|gx(cid:48)|ni that the attacker wants to send
the bitstring SA(cid:48)
to R in its tampered SA INIT request m(cid:48)
1. The idea is
that the attacker can now stuff the tampered message
(cid:48)
into ck, and can stuff the original message into info
i to
obtain a transcript collision:
(cid:123)(cid:122)
(cid:125)
i|gx(cid:48)|ni]
hash(SA INIT([C1|SA
(cid:48)
(cid:125)
ck
i|gx(cid:48)|ni|[SAi|gx|ni|infoi]
|SA
(cid:48)
|SAi|gx|ni|infoi)|−) =
(cid:124)
)|−)
(cid:124)
(cid:124)(cid:123)(cid:122)(cid:125)
hash(SA INIT([C2]