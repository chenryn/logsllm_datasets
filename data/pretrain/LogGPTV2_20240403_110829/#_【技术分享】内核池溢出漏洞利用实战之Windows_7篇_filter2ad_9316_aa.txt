# 【技术分享】内核池溢出漏洞利用实战之Windows 7篇
|
##### 译文声明
本文是翻译文章，文章来源：安全客
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
译者：[an0nym0u5](http://bobao.360.cn/member/contribute?uid=578844650)
预估稿费：200RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**一、前言**
****
本文重点围绕HitmanPro独立扫描版（版本 **3.7.15-build 281** ）的内核池溢出漏洞（ **CVE-2017-6008**
）展开。这个工具是反病毒软件Hitman.Alert解决方案的一部分，并以SophosClean可执行文件的方式集成在了英国公司Sophos的解决方案中。早在2017年2月，Sophos公司就收到了此漏洞的报告并在2017年5月发布3.7.20-Build
286版本更新了补丁。我们使用 **Ioctfuzzer**
（）发现了首次crash。Ioctfuzzer是一款对输入输出请求包（以下简称IRP）进行模糊测试的强大易用的工具，我们利用此工具捕获到了API函数DeviceIoControlFile并利用该函数作为中间人代理。对于收到的每一个IRP包，它都会先行发送几个伪造的IRP包然后再转发原始IRP包。扫描伊始就出现了崩溃，崩溃发生在
**BAD_POOL_HEADER**
代码初始化阶段。阅读下文之前，我们强烈建议读者了解一些windows下的IOCTL和IRP知识。MSDN文档提供了大量可以帮助你更好地理解本文的信息。本文将要利用的是64位系统下的情景，这比32位系统下更难利用。
**二、详细分析**
****
**2.1 崩溃数据分析**
首先需要弄清楚 **BAD_POOL_HEADER**
错误码的含义，池是内核中动态分配的常见场所，此代码意味着处理池头部时出现了问题。池头是位于块开头的提供块有关信息的结构，如图1所示。
图1 池头结构图
池头很可能已经损坏才导致崩溃，为了验证此设想，我们利用调试器、转储工具还有测试器产生的日志快速找到了有缺陷的IRP包如下：
    IOCTL Code: 0x0022e100
    Outbuff: 0x03ffe1f4, Outsize: 0x00001050
    Inbuff : 0x03ffd988, Insize: 0x00000200
    //Device/Hitman Pro 37 [/??/C:/Windows/system32/drivers/hitmanpro37.sys]
这里有几点关键信息：
**C:/Windows/system32/drivers/hitmanpro37.sys**
：处理IRP的驱动程序。由于池损坏导致了崩溃，因此该驱动一定与崩溃有关。
**IOCTL Code: 0x0022e100** ：该IOCTL代码提供了大量信息，稍后会作分析。通过逆向还可以获知以上驱动是如何处理IRP的。
**Outsize / Insize** ：用来在池中分配一些缓冲区，也可能与池损坏有关。
参考[MSDN文档](https://msdn.microsoft.com/en-us/library/windows/hardware/ff543023\(v=vs.85\).aspx)，从IOCTL代码中可以得到如下信息：
    DeviceType = 0x22
    Access = 0x3
    Function = 0x840
    Method = 0x0
    Method 0x0=METHOD_BUFFERED
“对于METHOD_BUFFERED这种传输类型，IRP提供了一个指向位于Irp->AssociatedIrp.SystemBuffer的缓冲区的指针，该缓冲区代表调用DeviceIoControl和IoBuildDeviceIoControlRequest时的输入缓冲区和输出缓冲区，驱动器就在输入输出缓冲区之间传输数据。
对于输入数据，缓冲区大小由驱动器IO_STACK_LOCATION结构中的DeviceIoControl.InputBufferLength参数指定。
对于输出数据，缓冲区大小由驱动器IO_STACK_LOCATION结构中的DeviceIoControl.OutputputBufferLength参数指定。
系统为单个输入/输出缓冲区分配的空间大小是两个值中较大的那个。“
最后，为了弄清楚在正常情况下IOCTL是如何发送的，我们逆向了HitmanPro.exe可执行文件，利用IOCTL代码和逆向工具IDA快速定位到了问题函数。
可见，分配给DeviceIoControl的Outsize和Insize与崩溃数据吻合，这种情况下，IRP管理器分配的系统缓冲区大小在正常情况下至少为
**0x1050** 字节。
**2.2 逆向驱动器**
我们已经掌握了很多崩溃有关的信息，是时候逆向驱动器 **hitmanpro37.sys**
来看看IOCTL的句柄了。首先，参照IOCTL代码定位调度IRP的函数，通常它是包括一些switch跳转的庞大函数，还好该驱动器并不大我们很快找到了调度器：
跟踪跳转逻辑，我们找到了处理存在漏洞的IOCTL的函数，IRP提供的SystemBuffer首先被传给
**IoGetDeviceObjectPointer** 函数的ObjectName参数：
然后，
非常不错进行到这里了，还记得IOCTL用到的 **METHOD_BUFFERED** 方法吗？
“系统为单个输入/输出缓冲区分配的空间大小是两个值中较大的那个。”
这意味着我们完美控制了SystemBuffer的值，驱动器使用硬编码的值 **0x1050** 调用memset，如果SystemBuffer值小于
**0x1050** ，调用memset会使池损坏进而导致崩溃，这里我们称之为 **内核池溢出漏洞**
。虽然这么说，但是我们到目前为止还没有任何办法控制往此缓冲区写入。它被设置为0然后被DeviceObject中的地址和名字填充，这只有管理员权限才能控制得了，因此此漏洞只会导致操作系统崩溃，该漏洞编号是
**CVE-2017-6007** 。
**2.3 扭转**
到此我们并不甘心，又逆向了更多的处理程序，我们随机挑选了一个处理程序，这真的很有趣：
SystemBuffer（我们的输入）参数用在了一个子函数中，如果子函数返回正确的值，一些数据会通过mwmcpy拷贝到SystemBuffer中，此函数的控制码是
**0x00222000** ：
    DeviceType = 0x22
    Access = 0x0
    Function = 0x0
    Method = 0x0
还是利用了同样的方法： **METHOD_BUFFERED** 。
如果我们足够幸运的话，这里可能会有类似的漏洞出现，然而，驱动器的这部分代码非同寻常：
**a**.我们没有在可执行程序HitmanPro中找到任何利用控制码 **0x0022200**
发送IRP的函数，因此在驱动器的这个位置下断点不会触发任何异常。
**b**.我们无法确定这个函数的确切功能，但我们找到了一个漏洞，这已经足够啦。
因此，逆向之旅又开始了。处理驱动后写成了如下伪代码：
驱动器利用SystemBuffer提供的句柄获取到FILE_OBJECT，如果FILE_OBJECT空闲就会调用 **ObQueryNameString**
来获取FILE_OBJECT指向的文件名并存放在临时缓冲区，然后从临时缓冲区复制文件名到SystemBuffer。
驱动器通过如下参数调用 **memcpy** ：
**a. dest** = SystemBuffer ; 大小由我们控制
**b. src** = 我们提供的句柄文件名，写入和大小均可控
**c. n** = src缓冲区的大小；
唯一的限制就是 **ObQueryNameString** 函数，该函数是受保护的，如果源太大就不会复制任何内容到目标区域。
由于目标区域是硬编码0x400大小的缓冲区，我们就不能给出大于0x400的文件名，当然，0x400个字节对于利用缓冲区溢出已经足够了。
**三、利用**
****
**3.1 介绍**
既然是 **内核池溢出漏洞** ，我们就有很多攻击方式可以利用了。要想利用此漏洞， **Tarjei Mandt**
的[文章](http://www.mista.nu/research/MANDT-kernelpool-PAPER.pdf)思路再好不过了，如果你想完全了解下一步发生了什么，它将是你必读的文章。这里我们采用的攻击方式是 **配额进程指针覆盖**