--include=~^/dev/  
```  
~符号后面是规则表达式~^/dev/表示以/dev/开头的设备.  
6\.4\.14 PostgreSQL buffer命中率监控  
监控用到pg_stat_database视图,  
```  
blks_read	bigint	Number of disk blocks read in this database  
blks_hit	bigint	Number of times disk blocks were found already in the buffer cache, so that a read was not necessary (this only includes hits in the PostgreSQL buffer cache, not the operating system's file system cache)  
```  
算法 :   
```  
blks_hit/(blks_hit+blks_read)  
```  
但是请注意, blks_hit包含的是PostgreSQL buffer中的读, 而不包含操作系统的cache命中, 所以可能命中率很低, 但是实际上读物理IO并不高, 因为大部分可能在文件系统cache中了.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=hitratio -w 90% -c 80%  
POSTGRES_HITRATIO CRITICAL: DB "postgres" (host:127.0.0.1) (port=1919) postgres: 43.60  | time=0.02s postgres=43.60;90;80   
```  
使用pg_stat_database查询结果一致  
```  
postgres=# select datname,blks_read,blks_hit from pg_stat_database;  
  datname  | blks_read | blks_hit   
-----------+-----------+----------  
 template1 |         0 |        0  
 template0 |         0 |        0  
 postgres  |    347127 |   268297  
 digoal_01 |         0 |        0  
 digoal_02 |         0 |        0  
 digoal    |         0 |        0  
(6 rows)  
postgres=# select 268297/(268297+347127.0);  
        ?column?          
------------------------  
 0.43595472389767054908  
(1 row)  
```  
多个数据库使用--db dbname1,dbname2,...指定.  
6\.4\.15 hot_standby延迟监控, 用来计算slave xlog的接收延迟和apply延迟, slave必须是hot_standby模式, 因为需要连接到master和slave数据库中执行如下SQL :   
```  
slave :   
SELECT pg_last_xlog_receive_location() AS receive, pg_last_xlog_replay_location() AS replay  
master :   
SELECT pg_current_xlog_location() AS location  
```  
获得结果后, 比较偏移量. 根据偏移量和提供的阈值进行比较, 超出则告警.  
告警阈值为偏移量, 这个不太好评估, 因为check_postgres是先查询slave, 再查询master的, 所以本质上来讲已经有一定的偏移了. 对于DML 繁忙的数据库, 需要微调告警阈值(字节数)才能达到不误报的效果.   
例子 :   
```  
postgres=# create table test (id int primary key, info text);  
NOTICE:  CREATE TABLE / PRIMARY KEY will create implicit index "test_pkey" for table "test"  
CREATE TABLE  
postgres=# insert into test select generate_series(1,1000000),md5(random()::text);  
INSERT 0 1000000  
pg92@db-172-16-3-39-> vi upd.sh  
\setrandom id 1 1000000  
update test set info=md5(random()::text) where id=:id;  
pg92@db-172-16-3-39-> pgbench -M prepared -f ./upd.sh -n -r -h 127.0.0.1 -p 1919 -U postgres -c 8 -j 2 -T 60 postgres  
transaction type: Custom query  
scaling factor: 1  
query mode: prepared  
number of clients: 8  
number of threads: 2  
duration: 60 s  
number of transactions actually processed: 2705800  
tps = 45095.767006 (including connections establishing)  
tps = 45104.988913 (excluding connections establishing)  
statement latencies in milliseconds:  
        0.002196        \setrandom id 1 1000000  
        0.172358        update test set info=md5(random()::text) where id=:id;  
```  
由于先查询slave, 再查询master带来的偏移量的问题,   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=hot_standby_delay -H 127.0.0.1 -p 11919 --db postgres -u postgres -w 1  
POSTGRES_HOT_STANDBY_DELAY WARNING: DB "postgres" (host:127.0.0.1) (port=11919) 47889704 | time=0.03s replay_delay=47889704;1  receive-delay=47889704;1   
```  
pgbench结束后恢复 :   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=hot_standby_delay -H 127.0.0.1 -p 11919 --db postgres -u postgres -w 1 --verbose  
POSTGRES_HOT_STANDBY_DELAY OK: DB "postgres" (host:127.0.0.1) (port=11919) 0 | time=0.01s replay_delay=0;1  receive-delay=0;1  
```  
前面的连接参数为master,   
```  
-H 127.0.0.1 -p 1919 -db postgres -u postgres  
```  
后面的连接参数为slave.  
```  
-H 127.0.0.1 -p 11919 --db postgres -u postgres  
```  
6\.4\.16 监控表/索引对象的大小. 有超过阈值的对象则告警.  
```  
action :   
index_size, 只统计索引的大小. pg_class.relkind='i'  
table_size, 只统计表的大小. pg_class.relkind='t'  
relation_size, 统计所有对象的大小. pg_class.relkind 不区分.  
```  
可以结合include, exclude, includeuser, excludeuser使用  
需要指定被监控的数据库, 库多的话-db中用逗号把库隔开就好了.  
举例 :   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -db postgres -u postgres --action=table_size -w 200MB --exclude=batch --perflimit=3  
POSTGRES_TABLE_SIZE OK: DB "postgres" (host:127.0.0.1) (port=1919) largest table is "public.test": 114 MB | time=0.01s public.test=119578624B;209715200 pg_catalog.pg_proc=507904B;209715200   
```  
多个数据库使用--db dbname1,dbname2,...指定  
6\.4\.17 监控上一次vacuum, analyze, autovacuum, autoanalyze到现在的时间间隔. 超过阈值告警.  
用到如下函数 :   
```  
 pg_catalog | pg_stat_get_last_analyze_time          | timestamp with time zone | oid                 | normal  
 pg_catalog | pg_stat_get_last_autoanalyze_time      | timestamp with time zone | oid                 | normal  
 pg_catalog | pg_stat_get_last_autovacuum_time       | timestamp with time zone | oid                 | normal  
 pg_catalog | pg_stat_get_last_vacuum_time           | timestamp with time zone | oid                 | normal  
```  
阈值单位如下 :   
```  
seconds, minutes, hours, and days  
```  
需指定数据库监控. 监控范围受限于指定的数据库.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=last_analyze --perflimit=3 -w '1 d'  
POSTGRES_LAST_ANALYZE OK: DB "postgres" (host:127.0.0.1) (port=1919) DB: postgres TABLE: public.batch: 15:45 June 04, 2013 (20 hours 4 minutes) | time=0.02s postgres.public.batch=72269s;86400 postgres.pg_catalog.pg_authid=72269s;86400; postgres.pg_catalog.pg_constraint=72269s;86400   
```  
多个数据库需要使用--db dbname1,dbname2,...指定.  
6\.4\.18 锁监控, 只监控数量, 不监控锁等待的时间.  
用到如下SQL :   
```  
SELECT granted, mode, datname FROM pg_locks l RIGHT JOIN pg_database d ON (d.oid=l.database) WHERE d.datallowconn  
```  
阈值内容包括锁总数, 等待数, 锁类型数量. 超过则告警.  
锁类型截取lock字符, 大小写不敏感.  
```  
postgres=# select mode from pg_locks  group by 1;  
      mode         
-----------------  
 ExclusiveLock  
 AccessShareLock  
(2 rows)  
```  
例如以上所类型为exclusive和accessshare  
举例 :   
返回结果包含所有数据库.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=locks -w 100 -c total=250:waiting=5:exclusive=20  
POSTGRES_LOCKS OK: DB "postgres" (host:127.0.0.1) (port=1919) total=1  | time=0.02s digoal.total=0;100;250 digoal_01.total=0;100;250 digoal_02.total=0;100;250 postgres.total=1;100;250 template1.total=0;100;250   
```  
6\.4\.19 pg_agent jobs执行失败监控  
监控阈值, 时间范围, 例如1d, 表示监控1天内无执行失败的jobs.  
需要读取pgagent.pga_job表的内容, 仅适用于安装了pg_agent插件的数据库.  
```  
pg93@db-172-16-3-33-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1999 -u postgres --db postgres --action=pgagent_jobs -w 1d  
Password for user postgres:   
POSTGRES_PGAGENT_JOBS OK: DB "postgres" (host:127.0.0.1) (port=1999) No failed jobs | time=2.11s   
```  
6\.4\.20 prepared transaction监控.  
二阶段事务监控, 当二阶事务在限定时间范围内未结束, 则告警. 因为事务长时间不提交会影响vacuum回收空间, 只要没有提交, 那么自那起DML产生的垃圾是肯定没有办法回收的. 将会导致数据库膨胀.  
当然, 如果你的数据库没有开启二阶事务, 那就不需要监控这个了.  
```  
#max_prepared_transactions = 0          # zero disables the feature  
                                        # (change requires restart)  
```  
举例 :   
阈值单位, 秒.  
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=prepared_txns -w 10  
POSTGRES_PREPARED_TXNS OK: DB "postgres" (host:127.0.0.1) (port=1919) No prepared transactions found | time=0.11s   
```  
6\.4\.21 检查SQL的执行时长, 超过阈值的告警. 通过pg_stat_activity查询. 排除IDLE状态.  
```  
sub check_query_time {  
    ## Check the length of running queries  
    check_txn_idle('qtime',  
                   msg('queries'),  
                   msg('query-time'),  
                   'query_start',  
                   q{query_start IS NOT NULL AND current_query NOT LIKE '%'});  
    return;  
} ## end of check_query_time  
```  
可用单位 :   
```  
Valid units are 'seconds', 'minutes', 'hours', or 'days'  
```  
举例 :   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=query_time -w '1s'  
POSTGRES_QUERY_TIME OK: DB "postgres" (host:127.0.0.1) (port=1919) longest query: 0s  | time=0.01s query_time=0s;1   
```  
监控包括所有数据库, 无需多个指定.  
6\.4\.22 利用UPDATE SQL监控主从复制延迟.  
前面介绍的是流复制的延迟监控, 通过主从的3个函数来实现. 这里要介绍的是通过UPDATE QUERY来实现监控延迟.   
适用范围更广. 例如bucardo, londiste3, slony等复制插件都适合.  
这种方法监控需要找一个表, 指定一个pk字段以及值, 再指定该表的另一个字段作为更新字段, 再指定这个更新字段的2个值, 每次监控时在这两个值之间更新. 通过判断主从的这个更新字段的值是否匹配来判断是否成功复制.  
阈值单位 :   
```  
Valid units are 'seconds', 'minutes', 'hours', or 'days'.  
```  
阈值为时间,   
```  
pg92@db-172-16-3-39-> /opt/check_postgres-2.20.0/check_postgres.pl --output=nagios -H 127.0.0.1 -p 1919 -u postgres --db postgres --action=replicate_row -w 5 -H 127.0.0.1 -p 11919 -u postgres --db postgres --repinfo=test,id,1,info,12f5cc73549166aef1034909ce465969,b  
POSTGRES_REPLICATE_ROW OK: DB "postgres" (host:127.0.0.1) (port=1919) Row was replicated | time=2s  
```  
前面的连接参数是主库  
```  
-H 127.0.0.1 -p 1919 -u postgres --db postgres  
```  
后面的连接参数是从库  
```  
-H 127.0.0.1 -p 11919 -u postgres --db postgres  
```  
--repinfo 指定了6个字段, 分别代表表名, pk字段名, pk字段值, 更新字段名, 更新字段的两个值.  
```  
pg92@db-172-16-3-39-> psql -U postgres postgres -p 1919  
psql (9.2beta1)  