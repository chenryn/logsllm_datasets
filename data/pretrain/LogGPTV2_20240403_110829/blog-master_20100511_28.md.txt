## MongoDB Introduction      
### 作者            
digoal            
### 日期            
2010-05-11            
### 标签            
moosefs        
----            
## 背景            
开始学习MongoDB。先大概的介绍一下.    
MongoDB 继承了文档型数据库，键值数据库，关系型数据库的优点。拥有键值数据库的高效、高扩展性，关系数据库的丰富查询功能和广泛的其他功能。MongoDB数据库是C++写的可扩展的，高性能的，开源的，文档型的数据库。    
MongoDB特性：    
1\. 文档导向的存储，JSON-style documents with dynamic schemas offer simplicity and power.    
With Mongo, you do less “normalization” than you would perform designing a relational schema because there are no server-side “joins”. Generally, you will want one database collection for each of your top level objects.    
2\. 全索引支持，Index on any attribute, just like you’re used to.    
Indexes enhance query performance, often dramatically. It’s important to think about the kinds of queries your application will need so that you can define relevant indexes. Once that’s done, actually creating the indexes in MongoDB is relatively easy.    
Indexes in MongoDB are conceptually similar to those in RDBMSes like MySQL. You will want an index in MongoDB in the same sort of situations where you would have wanted an index in MySQL.    
3\. 复制与高可用，Mirror across LANs and WANs for scale and peace of mind.    
MongoDB supports replication of data between servers for failover and redundancy.    
MongoDB replication is an enhanced form of master-slave configuration: that is, only one server is active for writes (the master) at a given time. With a single active master at any point in time, we can achieve strong consistency semantics. One can also optionally run queries on the slaves when eventually consistent read behavior is acceptable.    
4\. 自动共享，Scale horizontally without compromising functionality.    
MongoDB has been designed to scale horizontally via an auto-sharding architecture. Auto-sharding permits the development of large-scale data clusters that incorporate additional machines dynamically, automatically accomodate changes in load and data distribution, and ensure automated failover.    
MongoDB supports an automated sharding architecture, enabling horizontal scaling across multiple nodes. For applications that outgrow the resources of a single database server, MongoDB can convert to a sharded cluster, automatically managing failover and balancing of nodes, with few or no changes to the original application code.    
5\. 查询，Rich, document-based queries.    
One of MongoDB’s best capabilities is its support for dynamic (ad hoc) queries. Systems that support dynamic queries don’t require any special indexing to find data; users can find data using any criteria. For relational databases, dynamic queries are the norm. If you’re moving to MongoDB from a relational databases, you’ll find that many SQL queries translate easily to MongoDB’s document-based query language.    
6\. 快速in-place update，Atomic modifiers for contention-free performance.    
MongoDB supports atomic, in-place updates as well as more traditional updates for replacing an entire document.    
7\. MAP/REDUCE ，Flexible aggregation and data processing    
Map/reduce in MongoDB is useful for batch manipulation of data and aggregation operations. It is similar in spirit to using something like Hadoop with all input coming from a collection and output going to a collection. Often, in a situation where you would have used GROUP BY in SQL, map/reduce is the right tool in MongoDB.    
Notes:    
Indexing and standard queries in MongoDB are separate from map/reduce. If you have used CouchDB in the past, note this is a big difference: MongoDB is more like MySQL for basic querying and indexing. See thequeries and indexing documentation for those operations.    
8\. GridFS，Store files of any size without complicating your stack.    
GridFS is a storage specification for large objects in MongoDB. It works by splitting large object into small chunks, usually 256k in size. Each chunk is stored as a separate document in a chunks collection. Metadata about the file, including the filename, content type, and any optional information needed by the developer, is stored as a document in a files collection.    
So for any given file stored using GridFS, there will exist one document in files collection and one or more documents in the chunks collection.    
GridFS uses two collections to store data:    
files contains the object metadata    
chunks contains the binary chunks with some additional accounting information    
In order to make more than one GridFS namespace possible for a single database, the files and chunks collections are named with a prefix. By default the prefix is fs., so any default GridFS store will consist of collections named fs.files and fs.chunks. The drivers make it possible to change this prefix, so you might, for instance, have another GridFS namespace specifically for photos where the collections would bephotos.files and photos.chunks.    
[Count](http://info.flagcounter.com/h9V1)            