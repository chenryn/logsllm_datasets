type Mystack struct {
package leetcode
stack.top();
stack.push(2);
 enque []int
 emptyo) -- Return whether the stack is empty.
pop() -- Removes the element on top of the stack.
deque []int
 called on an empty stack).
 queue by using a list or deque (double-ended queue), as long as you use only standard 
 Depending on your language, queue may not be supported natively. You may simulate a 
 peek/pop from front, size, and is empty operations are valid. 
 top() -- Get the top element.
operations of a queue.
// returns 
// returns
2
2
---
## Page 373
Example:
Invert a binary tree.
题目
226. Invert Binary Tree
func (this *MyStack) Empty() bool { 
/** Returns whether the stack is empty. */
func (this *MyStack) Top() int {
/** Get the top element. */ 
/** Removes the element on top of the stack and returns that element. */
func (this *MyStack) Push(x int) {
/** Push element x onto stack. */
func Constructor225() MyStack {
/** Initialize your data structure here. */
this.enque = append(this.enque, x)
return false
return topEle 
this.enque = append(this.enque, topEle)
topEle := this.Pop()
return topEle
this.enque = this.deque
length := len(this.enque)
return Mystack{[]int{}， []int{}}
topEle := this.enque[0]
for i := O; i  length/3 {
if countl > length/3 {
if count1 > length/3 && count2 > length/3 {
countl, count2 = 0，0 
// Recount!
// select Candidates 
countl,count2，candidatel,candidate2 := 0,0,0,1
// it is only possible to have at most 2 nums (>1/3 + >1/3 = >2/3)
 ae j e uu o add su e j bua a a au //
 return []int{candidate2}
 return []int{candidatel, candidate2} 
length := len(nums)
for.
 return []int{candidatel}
} else if num == candidate2 { 
if num == candidatel {
} else { 
 if num == candidatel {
 count2++
countl++ 
-, num := range nums {
else if count2  s  n semie si anse  nos on 
kth smallest frequently? How would you optimize the kthSmallest routine? 
Given a binary search tree, write a function kthsmallest to find the kth smallest element in it.
题目
230. Kth Smallest Element in a BST
Output: 3
Input: root = [5,3,6,2,4,null,null,1],k = 3 
Output: 1 
Input: root = [3,1,4,null,2], k = 1 
return result
for _
2
3
 if v， ok := m[val]; ok 
if v > len(nums) /3 {
}else {
result = append(result, k) 
m[val] =
 m[val] = v + 1 
5
6
1
---
## Page 378
 Given an integer, write a function to determine if it is a power of two.
题目
231. Power of Two
代码
解题思路
效的，1≤k≤二叉搜索树元素个数。
给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第k个最小的元素。你可以假设k 总是有
题目大意
·由于二叉搜索树有序的特性，所以中根遍历它，遍历到第K个数的时候就是结果
func inorder230(node *TreeNode, k int, count *int, ans *int) 
func kthsmallest(root *TreeNode,k int) int {
package leetcode
/￥
if node != nil { 
return res 
* Definition for a binary tree node.
inorder230(root, k, &count, &res)
res， count := O,0 
 type TreeNode struct { 
inorder230(node.Right, k, count, ans)
if *count == k {
inorder230(node.Left, k, count, ans)
*count++
return
*ans = node.val
Right *TreeNode
Left *TreeNode
Val int 
---
## Page 379
代码
解题思路
给定一个整数，编写一个函数来判断它是否是2的幂次方。
题目大意
Example 3: 
 Example 2:
 Example 1: 
//解法二数论
·判断一个数是不是 2 的n 次方。
func isPowerofTwo2(num int) bool 
//解法三 打表法 
func isPowerofTwol(num int) bool { 
func isPowerofTwo(num int) bool {
package leetcode
Output: false
//解法一二进制位操作法
Input: 218 
Explanation: 2^4 = 16 
Output: true
Input: 16 
Explanation: 2^0 = 1 
Output: true 
Input: 1 
return num > 0 && (1073741824%num == 0)
return (num > 0 && ((num & (num - 1)) == 0))
了。这一题和第 326 题是一样的思路。
这一题最简单的思路是循环，可以通过。但是题目要求不循环就要判断，这就需要用到数论的知识
---
## Page 380
Note:
Example:
Implement the following operations of a queue using stacks.
 232. Implement Queue using Stacks
题目
queue.empty(); // returns false 
queue.pop();
queue.push(2) ;
queue.push(1);
● empty() -- Return whether the queue is empty.
queue.peek() ;
MyQueue queue = new MyQueue();
● push(x) -- Push element x to the back of queue.
func isPowerofTwo3(num int) bool 
//解法四循环
1073741824}
134217728: 134217728, 268435456: 268435456, 536870912: 536870912， 1073741824:
8388608: 8388608, 16777216: 16777216, 33554432: 33554432, 67108864: 67108864,
262144， 524288: 524288, 1048576: 1048576, 2097152: 2097152, 4194304: 4194304
8192, 16384: 16384, 32768: 32768, 65536: 65536, 131072: 131072, 262144:
64, 128: 128, 256:256, 512: 512, 1024: 1024,2048: 2048, 4096: 4096, 8192:
 peek() -- Get the front element.
allpowerofTwoMap := map[int]int{1: 1, 2:2,4:4,8: 8,16: 16, 32: 32, 64:
return num == 
for num >= 2 { 
return ok
if num%2 == 0 
 num = num /
return false
else {
// returns 
// returns
L
2
1
1
---
## Page 381
代码
按照题目要求实现即可。
解题思路
题目要求用栈实现一个队列的基本操作：push(x)、pop()、peek()、empty()。
题目大意
/** Removes the element from in front of queue and returns that element. */
/** Initialize your data structure here. */
·●  You may assume that all operations are valid (for example, no pop or peek operations will 
} u dod (ananowx Sut) uny
} (au! x)ysnd (anano2->2->1
Output: false
Input: 1->2
func (this *MyQueue) fromStackToQueue(s, q *[]int) 
func （this *MyQueue） Empty） bool {
func （this *MyQueue） Peek(） int {
/** Get the front element. */
for len(*s) > 0 {
 return len(*this.Stack)+len(*this.Queue) == 0
return (*this.Queue)[len(*this.Queue)-1]
if len(*this.Queue) == 0 { 
this.fromStackToQueue(this.Stack, this.Queue)
*q = append(*q, popped)
*s = (*s)[:len(*s)-1]
popped := (*s)[len(*s)-1]
---
## Page 383
代码
直相等，就是回文链表，如果有不相等的，直接返回不是回文链表。
后面到结尾的所有结点。最后一一判断头结点开始的结点和中间结点往后开始的结点是否相等。如果一
这道题只需要在第143 题上面改改就可以了。思路是完全一致的。先找到中间结点，然后反转中间结点
解题思路
判断一个链表是否是回文链表。要求时间复杂度 O(n)，空间复杂度 O(1)。
题目大意
func isPalindrome234(head *ListNode) bool {
//此题和 143 题 Reorder List 思路基本一致
package leetcode
* Definition for singly-linked list.
pl = head
//扫描表，判断是否是回文
for preCurrent.Next != nil {
preCurrent := pl.Next 
preMiddle := pl 
//反转链表后半部分
for p2.Next != nil && p2.Next.Next != nil {
p2 := head 
//寻找中间结点
res := true
if head == nil ll head.Next == nil {
 type ListNode struct {
preMiddle.Next = current 
current.Next = preMiddle.Next
preCurrent.Next = current.Next 
current := preCurrent.Next
pl = pl.Next 
return true
:= head 
 = p2.Next.Next
Next *ListNode
Val int 
1->2->3->4->5->6 t0 1->2->3->6->5->4
---
## Page 384
the BST.
Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in 
题目
Tree
235. Lowest Common Ancestor of a Binary Search
func L2ss(head *ListNode) []int {
// L2ss define
p2，preMiddle, L2ss(head))
preMiddle, L2ss(head))
preMiddle.Val, L2ss(head))
 for pl != preMiddle {
return res
for head != nil {
res := []int{}