    ``` literallayout
    # vgcreate myvg /dev/sda1 /dev/sdb1 /dev/sdc1
      Volume group "myvg" successfully created
    ```
    您可以使用 `vgs`{.literal} 命令显示新卷组的属性。
    ``` literallayout
    # vgs
      VG   #PV #LV #SN Attr   VSize  VFree
      myvg   3   0   0 wz--n- 51.45G 51.45G
    ```
3.  从您创建的卷组中创建 RAID0 逻辑卷。以下命令从卷组 `mylv`{.literal}
    中创建 RAID0 卷 `myvg`{.literal}。这个示例创建的逻辑卷大小为
    2GB，有三个条带，条带的大小为 4KB。
    ``` literallayout
    # lvcreate --type raid0 -L 2G --stripes 3 --stripesize 4 -n mylv myvg
      Rounding size 2.00 GiB (512 extents) up to stripe boundary size 2.00 GiB(513 extents).
      Logical volume "mylv" created.
    ```
4.  在 RAID0 逻辑卷中创建文件系统。下面的命令在逻辑卷中创建了一个
    `ext4`{.literal} 文件系统。
    ``` literallayout
    # mkfs.ext4 /dev/myvg/mylv
    mke2fs 1.44.3 (10-July-2018)
    Creating filesystem with 525312 4k blocks and 131376 inodes
    Filesystem UUID: 9d4c0704-6028-450a-8b0a-8875358c0511
    Superblock backups stored on blocks:
            32768, 98304, 163840, 229376, 294912
    Allocating group tables: done
    Writing inode tables: done
    Creating journal (16384 blocks): done
    Writing superblocks and filesystem accounting information: done
    ```
    下面的命令挂载逻辑卷并报告文件系统磁盘空间用量。
    ``` literallayout
    # mount /dev/myvg/mylv /mnt
    # df
    Filesystem             1K-blocks     Used  Available Use% Mounted on
    /dev/mapper/myvg-mylv    2002684     6168    1875072   1% /mnt
    ```
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#renaming-lvm-logical-volumes_configuring-lvm-volumes}重命名 LVM 逻辑卷 {.title}
:::
这个过程使用命令行 LVM 接口重新命名现有逻辑卷。
::: orderedlist
**流程**
1.  如果逻辑卷当前已被挂载，卸载该卷。
2.  如果在集群环境中存在逻辑卷，则在所有其激活的节点上取消激活逻辑卷。对每个这样的节点运行以下命令：
    ``` screen
    [root@node-n]# lvchange --activate n vg-name/lv-name
    ```
3.  使用 `lvrename`{.literal} 程序重新命名现有逻辑卷：
    ``` screen
    # lvrename vg-name original-lv-name new-lv-name
    ```
    另外，您还可以指定到该设备的完整路径：
    ``` screen
    # lvrename /dev/vg-name/original-lv-name /dev/vg-name/new-lv-name
    ```
:::
::: itemizedlist
**其它资源**
-   `lvrename(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#proc_removing-a-disk-from-a-logical-volume-configuring-lvm-volumes}从逻辑卷中删除磁盘 {.title}
:::
这些示例步骤演示了如何从现有逻辑卷中删除磁盘，如替换磁盘或将磁盘用作不同卷的一部分。要删除磁盘，您必须首先将
LVM 物理卷中的扩展移动到不同的磁盘或者一组磁盘中。
::: section
::: titlepage
## []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#move_exist_ex4}将扩展移动到现有物理卷中 {.title}
:::
在这个示例中，逻辑卷是在卷组 `myvg`{.literal} 的四个物理卷中进行分配的。
``` literallayout
# pvs -o+pv_used
  PV         VG   Fmt  Attr PSize  PFree  Used
  /dev/sda1  myvg lvm2 a-   17.15G 12.15G  5.00G
  /dev/sdb1  myvg lvm2 a-   17.15G 12.15G  5.00G
  /dev/sdc1  myvg lvm2 a-   17.15G 12.15G  5.00G
  /dev/sdd1  myvg lvm2 a-   17.15G  2.15G 15.00G
```
这个示例将扩展从 `/dev/sdb1`{.literal} 中移出，以便将其从卷组中删除。
::: orderedlist
1.  如果在该卷组的其它物理卷中没有足够的可用扩展，您可以在想要删除的设备中执行
    `pvmove`{.literal}
    命令，且没有其他选项，那么扩展就会被分配到其它设备中。
    在一个集群中，`pvmove`{.literal}
    命令只能移动只在单一节点中活跃的逻辑卷。
    ``` literallayout
    # pvmove /dev/sdb1
      /dev/sdb1: Moved: 2.0%
     ...
      /dev/sdb1: Moved: 79.2%
     ...
      /dev/sdb1: Moved: 100.0%
    ```
    在 `pvmove`{.literal} 命令完成执行后，扩展的分布如下：
    ``` literallayout
    # pvs -o+pv_used
      PV         VG   Fmt  Attr PSize  PFree  Used
      /dev/sda1  myvg lvm2 a-   17.15G  7.15G 10.00G
      /dev/sdb1  myvg lvm2 a-   17.15G 17.15G     0
      /dev/sdc1  myvg lvm2 a-   17.15G 12.15G  5.00G
      /dev/sdd1  myvg lvm2 a-   17.15G  2.15G 15.00G
    ```
2.  使用 `vgreduce`{.literal} 命令从卷组中删除物理卷
    `/dev/sdb1`{.literal}。
    ``` literallayout
    # vgreduce myvg /dev/sdb1
      Removed "/dev/sdb1" from volume group "myvg"
    # pvs
      PV         VG   Fmt  Attr PSize  PFree
      /dev/sda1  myvg lvm2 a-   17.15G  7.15G
      /dev/sdb1       lvm2 --   17.15G 17.15G
      /dev/sdc1  myvg lvm2 a-   17.15G 12.15G
      /dev/sdd1  myvg lvm2 a-   17.15G  2.15G
    ```
:::
该磁盘现在可以物理删除或者分配给其他用户。
:::
::: section
::: titlepage
## []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#move_new_ex4}将扩展移动到新磁盘中 {.title}
:::
在这个示例中，逻辑卷在卷组 `myvg`{.literal}
中的三个物理卷中进行分配，如下所示：
``` literallayout
# pvs -o+pv_used
  PV         VG   Fmt  Attr PSize  PFree  Used
  /dev/sda1  myvg lvm2 a-   17.15G  7.15G 10.00G
  /dev/sdb1  myvg lvm2 a-   17.15G 15.15G  2.00G
  /dev/sdc1  myvg lvm2 a-   17.15G 15.15G  2.00G
```
这个示例步骤将 `/dev/sdb1`{.literal} 的扩展移动到新设备
`/dev/sdd1`{.literal}。
::: orderedlist
1.  在 `/dev/sdd1`{.literal}创建新物理卷。
    ``` literallayout
    # pvcreate /dev/sdd1
      Physical volume "/dev/sdd1" successfully created
    ```
2.  在现有卷组 `myvg`{.literal} 中添加新的物理卷 `/dev/sdd1`{.literal}。
    ``` literallayout
    # vgextend myvg /dev/sdd1
      Volume group "myvg" successfully extended
    # pvs -o+pv_used
      PV         VG   Fmt  Attr PSize  PFree  Used
      /dev/sda1   myvg lvm2 a-   17.15G  7.15G 10.00G
      /dev/sdb1   myvg lvm2 a-   17.15G 15.15G  2.00G
      /dev/sdc1   myvg lvm2 a-   17.15G 15.15G  2.00G
      /dev/sdd1   myvg lvm2 a-   17.15G 17.15G     0
    ```
3.  使用 `pvmove`{.literal} 命令将数据从 `/dev/sdb1`{.literal} 移至
    `/dev/sdd1`{.literal}。
    ``` literallayout
    # pvmove /dev/sdb1 /dev/sdd1
      /dev/sdb1: Moved: 10.0%
    ...
      /dev/sdb1: Moved: 79.7%
    ...
      /dev/sdb1: Moved: 100.0%
    # pvs -o+pv_used
      PV          VG   Fmt  Attr PSize  PFree  Used
      /dev/sda1   myvg lvm2 a-   17.15G  7.15G 10.00G
      /dev/sdb1   myvg lvm2 a-   17.15G 17.15G     0
      /dev/sdc1   myvg lvm2 a-   17.15G 15.15G  2.00G
      /dev/sdd1   myvg lvm2 a-   17.15G 15.15G  2.00G
    ```
4.  当您将数据移出 `/dev/sdb1`{.literal}后，可以将其从卷组中删除。
    ``` literallayout
    # vgreduce myvg /dev/sdb1
      Removed "/dev/sdb1" from volume group "myvg"
    ```
:::
现在您可以将磁盘重新分配给另一个卷组，或者将其从系统中删除。
:::
:::
::: section
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#proc_configuring-persistent-lvm-device-numbers-configuring-lvm-volumes}配置持久的设备号码 {.title}
:::
在载入模块的时候会自动分配主设备号码和副设备号码。如果总是使用相同的设备（主和副）号码激活块设备，有些应用程序效果最好。您可以使用以下参数通过
`lvcreate`{.literal} 和 `lvchange`{.literal} 命令来指定这些参数：
``` literallayout
--persistent y --major major --minor minor
```
使用大的副号码以确定还没有动态分配给另一个设备。
如果要使用 NFS 导出一个文件系统，在 exports 文件中指定 `fsid`{.literal}
参数可能会不需要在 LVM 中设定持久的设备号码。
:::
::: section
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#proc_specifying-lvm-extent-size-configuring-lvm-volumes}指定 LVM 扩展大小 {.title}
:::
当使用物理卷创建卷组时，默认情况下它的磁盘空间被分成 4MB
扩展。这个扩展是增大或者减小逻辑卷容量的最小值。大量的扩展不会影响逻辑卷的
I/O 性能。
如果默认扩展大小不合适，您可以使用 `vgcreate`{.literal} 命令的
`-s`{.literal} 选项指定扩展大小。您可以使用 `vgcreate`{.literal} 命令的
`-p`{.literal} 和 `-l`{.literal} 参数限制卷组的物理或者逻辑卷数量。
:::
::: section
::: titlepage
# []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#managing-lvm-logical-volumes-using-rhel-system-roles_configuring-lvm-volumes}使用 RHEL 系统角色管理 LVM 逻辑卷 {.title}
:::
本节论述了如何应用 `storage`{.literal} 角色来执行以下任务：
::: itemizedlist
-   在由多个磁盘组成的卷组中创建 LVM 逻辑卷。
-   在逻辑卷中创建一个带给定标签的 ext4 文件系统。
-   永久挂载 ext4 文件系统。
:::
::: itemizedlist
**先决条件**
-   包括 `storage`{.literal} 角色的 Ansible playbook
:::
如需有关如何应用 Ansible playbook 的信息，请参阅
[应用角色](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/configuring_basic_system_settings/getting-started-with-system-administration_configuring-basic-system-settings#applying-a-role_con_intro-to-rhel-system-roles){.link}。
::: section
::: titlepage
## []{#assembly_configuring-lvm-volumes-configuring-and-managing-logical-volumes.html#an-example-playbook-to-manage-logical-volumes_managing-lvm-logical-volumes-using-rhel-system-roles}管理逻辑卷的 Ansible playbook 示例 {.title}