title:A new approach to DNS security (DNSSEC)
author:Giuseppe Ateniese and
Stefan Mangard
A New Approach to DNS Security (DNSSEC)
Giuseppe Ateniese
Stefan Mangard
Department of Computer Science and
JHU Information Security Institute
The Johns Hopkins University
3400 North Charles Street
Baltimore, MD 21218, USA
Institute for Applied Information
Processing and Communications (IAIK)
Graz University of Technology
Inffeldgasse 16a
8010 Graz, Austria
PI:EMAIL
PI:EMAIL
ABSTRACT
The Domain Name System (DNS) is a distributed database
that allows convenient storing and retrieving of resource
records. DNS has been extended to provide security ser-
vices (DNSSEC) mainly through public-key cryptography.
We propose a new approach to DNSSEC that may result
in a signiﬁcantly more eﬃcient protocol. We introduce a
new strategy to build chains of trust from root servers to
authoritative servers. The techniques we employ are based
on symmetric-key cryptography.
Keywords
Domain Name System Security (DNSSEC), Authentication
Protocols, Digital Signatures, Symmetric Encryption
1.
INTRODUCTION
The Domain Name System (DNS) [14, 15, 16] is a hi-
erarchically distributed database that provides information
fundamental to Internet operations, such as translating be-
tween human readable host names and Internet Protocol
(IP) addresses. Due to the importance of the information
served by DNS, there is a strong demand for securing com-
munication within the DNS system. The current (insecure)
DNS does not prevent attackers from modifying or injecting
DNS messages. Users accessing hosts on the Internet rely
on the correct translation of host names to IP addresses
by the DNS system. A typical attack, referred to as DNS
spooﬁng, allows an attacker to manipulate DNS answers on
their way to the users. If an attacker makes changes in the
DNS tables of a single server, those changes will propagate
across the Internet. Recently, the RSA Security web page
was hijacked by spooﬁng the DNS tables [11]. In short, the
attacker created a fake web page and then redirected to it
all the legitimate traﬃc to the RSA Security’s original page.
Interestingly, the attacker didn’t crack the DNS server of
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
the company but rather the DNS server upstream in the
network.
Increasingly, DNS is also being used to perform load dis-
tribution among replicated servers. For instance, companies
such as Akamai have used DNS to provide Web content dis-
tribution. Moreover, there is consensus that, since DNS is a
global and available database, it can be employed as a Pub-
lic Key Infrastructure (PKI) which would help with enabling
e-commerce applications by making public keys globally ac-
cessible.
Securing DNS means providing data origin authentication
and integrity protection. Conﬁdentiality is not required as
the information stored in the DNS database is supposedly
public. When communication requirements call for private
channels, IP security (IPSEC) is the currently selected can-
didate system which could easily interface with DNS.
Existing proposals for securing DNS are mainly based on
public-key cryptography. In this paper we describe a new
approach based on symmetric (or secret-key) cryptographic
techniques. Our solution enables a wide range of secure
services previously believed to be impractical or too diﬃcult
to manage, such as mutual authentication.
Root
Top Level
.com
..
...
.edu
acomp.com
...
zcomp.com
...
jhu.edu
www.acomp.com
...
lab.zcomp.com
...
cs.jhu.edu
..
..
..
..
..
..
Figure 1: DNS Domains
862. PRELIMINARIES
We ﬁrst give an overview of DNS and the current pro-
posal for secure DNS (DNSSEC) as described in [20]. For a
detailed discussion on DNS, we refer the readers to [1].
2.1 Overview of DNS
As already mentioned, DNS is a global, hierarchical and
distributed database. This database associates names, which
are referred to as domain names, with certain data contained
in resource records (RRs). Records linked to a domain name
can be of diﬀerent types, but the address type is the most
common one. There can be multiple RRs of the same type
for one domain name. The set of resource records of the
same type is called a resource record set (RRset).
Since domain names need to be globally unique, a hierar-
chical naming scheme is used. A domain name refers to a
node in a tree (Figure 1) which is called the domain name
space. This tree of domain names is very similar to the
structure of a UNIX ﬁle system. Each subtree is called a
domain. For example, the subtree rooted on the .com node
is called the .com domain and includes all domain names
ending with .com. The nodes that are direct children of the
root node are called top level domains.
Communication with the DNS database follows the client/
server paradigm. The domain name tree is divided into
zones, which usually are contiguous parts of the tree. Zones
are deﬁned by the process of delegation which assigns to
some organization the responsibility of managing particular
subdomains. A zone may contain information about a do-
main and its subdomains. Top-level zones, such as .edu,
would mostly contain delegation information.
For each zone, there are authoritative servers (name servers)
answering all queries concerning domain names in that zone.
Name servers can be authoritative for multiple zones, too.
A DNS client program is called a resolver. There are two
kinds of resolvers: real resolvers and stub resolvers (Figure
2).
..
.com
lab.com
(2)
(4)
(6)
www.lab.com
(9)
(3)
(5)
cs.jhu.edu
(7)
(resolver)
(1)
(8)
ho1.cs.jhu.edu
(stub resolver)
Figure 2: A resolver querying for www.lab.com
• A stub resolver is basically a library that needs to be
installed on every host that wants to access the DNS
database. Every time a query needs to be sent, func-
tions of this library are called and the process of re-
trieving the desired information is run. Speciﬁcally,
the stub resolver sends a recursive query to a resolver
which will reply with the information needed.
• A resolver is generally located on a DNS server and
serves a group of stub resolvers. When a recursive
query is received, the resolver usually sends an itera-
tive query to one of the root DNS servers serving the
root domain.
Iterative queries allow a DNS server,
which does not have the requested mapping, to indi-
cate the next server in the chain which is “closer” to
the authoritative server for those queries.
In the example in Figure 2, the resolver cs.jhu.edu re-
ceives a recursive query for the IP address of the server
www.lab.com from host ho1.cs.jhu.edu. The resolver then
sends an iterative query to a root DNS server, which returns
the IP address of the DNS server authoritative for the .com
zone. The resolver will then query the name server authori-
tative for .com which will return the IP address of the name
server authoritative for lab.com. Finally, the DNS server
of lab.com is queried by the resolver and returns the IP
address of www.lab.com for which it is authoritative. This
answer is then forwarded by the resolver to the stub resolver
ho1.cs.jhu.edu. The entire process is called resolving.
Root servers are essential to the functionality of the DNS
system. There are currently 13 root DNS servers distributed
all over the planet. Caching techniques are employed to
reduce the number of requests in order to speed up the re-
solving process and to reduce network traﬃc. Consequently,
each RR that is returned from a DNS server has a certain
time-to-live (TTL) which is the time the RR can be cached.
2.2 Overview of DNSSEC
The ﬁrst RFC on securing DNS was published in 1997 [18].
Since then, several documents (research papers,
internet
drafts, and RFCs) have been published on this topic. In this
section, we summarize the basic concepts of secure DNS as
described in [20, 25, 27].
The primary goal of DNSSEC is to provide authentica-
tion and integrity for data received from the DNS database.
This is done via digital signature schemes based on public-
key cryptography. A possible approach is to sign each DNS
message. The general idea is that each node in the DNS tree
is associated with a public key of some sort. Each message
from DNS servers is signed under the corresponding private-
key. It is assumed that one or more authenticated DNS root
public keys are publicly known. These keys are used to
generate certiﬁcates on behalf of the top level domains, i.e.
these keys are used to generate a signature that binds the
identity information of each top-level domain to the corre-
sponding public key. The top level domains sign the keys of
their subdomains and so on in a process where each parent
signs the public keys of all its children in the DNS tree. Con-
sidering our example in Figure 2, the resolver, that owns an
authentic copy of the root’s public key, will receive the IP
address of the DNS server of .com from the root along with
its public key all signed via a pre-speciﬁed digital signature
algorithm. The public key for the .com zone is trusted since
it is signed by the root and will be used to sign the public
key of the DNS server of lab.com. This process is repeated
going down across the tree. To associate a domain name
87with a certain public key, a so called KEY RR [20] is used.
Currently, DSA [21] and RSA [22] are the digital signature
algorithms supported by DNSSEC. The Diﬃe-Hellman key
agreement protocol is also supported [24, 26].
Two diﬀerent kinds of signatures for DNS messages as a
whole are currently deﬁned: transaction signatures (TSIGs)
[25] based on symmetric techniques, and public-key signa-
tures which are abbreviated by SIG(0) [27]. TSIG signa-
tures have been introduced mainly for transactions between
local servers, for instance between the resolver and the stub
resolver.
It is convenient to use TSIG to secure dynamic
updates or zone transfers between master and slave servers.
SIG(0) is similar to TSIG but employs public-key signatures.
SIG(0) may not be practical to use on a large scale but it
is useful in case integrity protection and authentication of
the message as a whole are desired. SIG(0) could be used to
authenticate requests when it is necessary to check whether
the requester has some required privilege.
A more eﬃcient alternative employs digital signatures to
sign each RRset as described in [20]. The basic idea is to
cover each resource record set with a public-key signature
which is stored as a resource record called SIG RR [20].
These SIG RRs are computed for every RRset in a zone ﬁle
and stored therein. A DNS server adds the corresponding
pre-calculated signature for each RRset in answers to DNS
queries. It is imperative for DNS servers to include the entire
RRset in a DNS answer as otherwise the resolver could not
verify the signature.
For this scheme it is also necessary to introduce an addi-
tional type of resource records: NXT RRs [20]. The NXT
resource record is associated with a domain name and in-
dicates the types of RRs that are available for that domain
name and additionally which domain name is next by dic-
tionary order (the zone should be in canonical order).
In
order to build a closed chain of NXT records for a zone,
the ﬁrst and the last entry are considered to be next to
each other. These NXT resource records are, like any other
RRset, signed. If a resolver queries for a domain name or
a type of data that does not exist, the corresponding NXT
RR and a covering SIG RR are returned. The NXT records
identify what does not exist in a zone to avoid generating sig-
natures on general statements of nonexistence which could
be replayed. However, notice that an attacker could query
for the NXT record of a domain name to ﬁnd the next do-
main name in canonical order and repeat the process to learn
all the domain names in the zone.
3. OUR PROPOSAL
In this section we describe our approach to DNSSEC. As
we employ mostly symmetric (or secret-key) cryptography,
we will refer to our proposal as SK-DNSSEC. The proposals
of DNSSEC using SIG RRs [20] and SIG(0) [27] make use
of public-key cryptography and will thus be referred to as
PK-DNSSEC.
3.1  Symmetric Certificates
The system we propose makes use of symmetric ciphers
such as AES or Blowﬁsh in CBC mode, and symmetric
signatures implemented via Message Authentication Code
(MAC) functions. A practical construction for MAC func-
tions is described in [3, 19], called HMAC. To achieve pri-
vate and authenticated channels, we can combine encryption
techniques with MAC functions. In our system, we would
encrypt a message m as follows:
Ek [m, MAC(cid:2)(m)] = Ek [MAC(cid:2)(m)||m] , 1
where Ek is a symmetric encryption algorithm, and k and
(cid:4) are independent random session keys. A careful analysis
of the building block Ek(m, M AC(cid:2)(m)), in the context of
secure channels, can be found in [9]. We assume that the
symmetric encryption algorithm, Ek(·), is computed in CBC
mode and secure against chosen-plaintext attacks. Further-
more, we assume that the message authentication code is
secure against chosen-message attacks.
There are several other secure methods that provide au-
thentication and privacy [4, 9], which can be employed in
our system. In particular, encrypting ﬁrst the message and
then computing the MAC function over the ciphertext is
usually preferable since the encryption function does not
have to be computed in CBC mode [9] and invalid cipher-
texts can be discarded without the overhead of decryption.
However, direct authentication of the plaintext is a desir-
able property, and also notice that we employ the MAC
to authenticate messages that are not necessarily private
and that can be predictable or induced. Moreover, in the
scheme we are proposing, it is impossible to apply a chosen
plaintext attack as DNS servers encrypt exclusively freshly
self-generated session keys.
It is assumed that each message sent contains a nonce. A
nonce is typically a random number which helps prevent-
ing several kinds of attacks, such as replay attacks. We
will consider a nonce as a pair of values, a random number
and a timestamp, respectively. Timestamps provide mes-
sage freshness but must be used carefully in asynchronous
systems such as the Internet. However, the upcoming secure
network time protocols, such as secure NTP [12], should en-
courage a more consistent use of timestamps.
We introduce the concept of DNS symmetric certiﬁcates
that will be used to eﬃciently build a chain of trust from a
DNS root to the authoritative server. Our strategy is very
similar to the one introduced by Davis and Swick [6]. A
symmetric certiﬁcate binds the owner’s identity to a secret
key and it is generated by using symmetric cryptographic