to adblocking (barring some noise issues which are discussed
§IV-B). Equipped with the knowledge of the trace difference,
we can then track the origin of the objects that are checked in
the branch statements (e.g., which objects/variables and what
attributes), as well as understand the subsequent reactions.
Next, we provide more details of the differential execution
analysis approach.
Given two traces, we deﬁne two types of execution dif-
ferences [36]: ﬂow differences and value differences. A ﬂow
difference is caused by control ﬂow divergence in the two
3
Differential Trace AnalysisPositive TracesNegativeTracesbranch divergences &  conditionsInstrumented Browser w/AdblockerInstrumented Browser w/oAdblockerexecutions (i.e., with and without adblocker). A value differ-
ence is caused when a variable in any statement has different
values in the two executions. Note that anti-adblockers have
to execute some additional statements (after an adblocker is
detected) such as displaying warning messages or sending
statistics to their backend servers. Thus, we can rely on control
ﬂow differences to detect anti-adblockers without needing to
track value differences. A recent study [42] also reported that
most anti-adblockers manifest themselves through conditional
branches. Therefore, in this work, we consider only the ﬂow
differences in our differential trace analysis and leave value
differences (which may be required for more advanced anti-
adblockers) for future work.
Figure 2 illustrates the overview of our proposed system
of differential trace analysis. First, we instrument the open-
source Chromium [25] browser to collect execution traces.
Since we focus on the control ﬂow of JavaScript, we collect
traces for all branch statements along with the call stack
information which is needed for trace alignment (discussed
later in §IV). We discuss other details of the instrumentation
later in §IV-A. After we collect
the execution traces, we
feed them to the differential execution analysis to identify the
diverging branches between the positive trace (with adblocker)
and the negative trace (without adblocker). The differential
execution analysis outputs a list of branch divergences and the
conditions checked in those branch statements.
The produced result not only allows one to afﬁrm the
presence of anti-adblocking logic but also helps us understand
how they operate. As we will show later in §V, we conduct
both large-scale and small-scale evaluation and analysis of the
identiﬁed anti-adblocking scripts. Finally, in §VI, we show how
one can apply the learned knowledge and use it against anti-
adblockers.
IV. DIFFERENTIAL EXECUTION ANALYSIS
In this section, we describe the framework, building blocks,
as well the methodology for differential execution analysis
(branch divergence discovery). Overall, we need to select
one or more adblocker extensions for A/B testing, instrument
Chromium, and conduct the differential execution analysis.
Adblocker choice. As the A/B testing requires the collection
of the Javascript execution trace with and without an adblocker,
we need to select an adblocker extension. We choose Adblock
as it is one of the most popular. It is also possible to use
Adblock Plus or uBlock, as the way they operate is exactly
the same — HTTP ﬁlters and HTML element hiding. In fact,
they share the same basic set of ﬁlter lists and we conﬁrm
that they yield the same result from our differential execution
analysis.
A. Chromium Instrumentation
Prior work has proposed several
instrumentation ap-
proaches to collect JavaScript execution traces. These include
JavaScript rewriting [54], JavaScript debugger interface [33],
and JavaScript engine-based approaches. In this paper, we use
the last approach which modiﬁes the JavaScript engine to
output the execution traces. We prefer this approach because
it does not require any change to JavaScript code itself.
Moreover, our approach is transparent which makes it much
more challenging for anti-adblocking scripts to detect that they
are being instrumented and possibly change their behavior.
We instrument the JavaScript engine for Chromium (V8
[22]). V8 generates an abstract syntax tree (AST) for every
function. The ASTs are then compiled into native code (also
called Just-In-Time code). Our instrumentation is embedded
into the native code generation process. Our instrumentation
collects the source map information (e.g., the offset of the
statement located within a script) as well as the JavaScript
information (e.g., whether a true/false branch is
statement
taken) for every statement of interest. As we discuss later, we
instrument only a subset of statements that are pertinent to anti-
adblockers. The information is stored into inlined variables.
Before emitting the native code for the statements, we modify
the JIT engine to emit stub code, which at runtime will
access the inlined variables to record the executed JavaScript
statements. The source map information is used as the ID of
the executed statement (which is later required for trace align-
ment). The JavaScript statement information simply records
the branch outcomes, so that we can perform the differential
trace analysis to identify any branch divergence or ﬂip between
two different execution runs (with and without adblocker).
the execution trace.
Since we only monitor control ﬂow differences to de-
tect anti-adblockers, we monitor all branch statements to
record the control ﬂow part of
In
JavaScript, the branch statements include if/else (including
else if), switch/case, and conditional/ternary opera-
tors (condition?expr1:expr2), for/while loop, and
try/catch for exception handling. In addition, there are
implicit branching expressions such as A && B; where the
outcome of A in fact determines whether B will be executed
(i.e., if A is false, B will not be executed). We currently
monitor only the if/else and conditional/ternary operators,
which are reported to be most commonly used by anti-
adblockers [42]. For trace alignment (see §IV-B), we also
record all function call/ret statements and call stack informa-
tion for all branch statements to include their calling context.
B. Branch Divergence Discovery
We now explain our approach to discover branch diver-
gences. We visit a website to collect two sets of execution
traces with (positive trace) and without (negative trace) the
adblocker. We then analyze their ﬂow differences between the
positive and negative traces.
Adblockers can be used in different ways based on their
ﬁlter list conﬁgurations. The default conﬁguration on Ad-
block [15] includes two blacklists (EasyList to remove ads and
Adblock Warning Removal List to remove adblock detection
responses) and one whitelist (Acceptable Ads List to allow
some ads). We choose a conﬁguration that can maximize the
likelihood of detecting anti-adblockers (which is also what was
used in [42]). We ﬁrst disable the Acceptable Ads List, not
allowing websites to show even the whitelisted ads. Then we
disable the Adblock Warning Removal List, allowing intru-
sive notiﬁcations by some anti-adblockers. Finally we further
remove the sections of rules in Easylist that are speciﬁcally
crafted against anti-adblockers. It is worth mentioning that
Adblock, as shown in a recent study [42], does not actually
do a good job in defending against anti-adblockers, but we
4
disable these capabilities nevertheless to get a more complete
picture of anti-adblockers in the wild.
We need to align a positive trace and a negative trace
to discover branch divergences. Trace alignment is a well-
research issue for comparing different execution traces of the
same program [36, 53]. To accurately align two execution
traces, we can assign each execution point an execution index
while taking into account the program’s nesting structure and
the caller/callee relationship. We opt for the use of call stack
information as the calling context for each recorded statement.
More speciﬁcally, two execution traces are said to be aligned
only when the following two conditions hold simultaneously:
1)
2)
the call stacks of all statements of both traces match
perfectly; and
the identiﬁers of all statements (represented by their
offset) of both traces match perfectly.
The key challenge in aligning JavaScript execution traces
is that JavaScript runtime has a unique concurrency model
[44]. More speciﬁcally, standard JavaScript execution for each
web page is single-threaded and event driven. This means that
each event is processed independently and completely before
any other event is processed. Instead of generating a single
sequence of trace for each page visit, we are now forced
to consider the code executed to handle all events (e.g., on
successfully loading an external resource) on different sub-
traces because they all start from the beginning of the event
loop.
We address this challenge by aligning sub-traces in a dis-
joint manner. More speciﬁcally, we slice a trace into sub-traces
by recording all the function call/ret statements. Whenever a
ret statement is encountered where its call stack is empty (i.e.,
an iteration of the event loop is about to end), we know that
it is the end of a sub-trace. We align two sets of positive
and negative sub-traces separately in a pairwise manner. The
number of alignments is on the order of O(n × m) where n
is the number of positive sub-traces and m is the number of
negative sub-traces.
Given a pair of aligned positive and negative traces, we next
attempt to discover and locate branch divergences. Basically,
given a positive and a negative trace, we record all encountered
branches (with the same call stack at the same offset) with
opposite outcomes. In the example shown in Figure 1, the
positive and negative traces will simply be (3, 4, 5-true,
6) and (3, 4, 5-false) respectively — the numbers here are
statement identiﬁers. We can therefore conﬁrm the branch
divergence at statement 5. The key technical challenge we
need to address is that a script can generate different execution
traces due to external factors (e.g., time) or other sources of
randomness. We need to cater for this to avoid mistakenly
attributing branch divergences to adblockers which are actually
completely unrelated.
Handling execution noises. The following example illus-
trates this problem. Two different runs of the same code can
possibly produce two different execution traces – one with
coinFlip() returning true and the other with coinFlip() returning
false. If the two runs happen to occur when an adblocker is on
and off respectively, we will mistakenly think that the branch
divergence is due to an adblocker.
return Math.floor(Math.random() * 2);
1 function coinFlip() {
2
3 }
4 if (coinFlip()) {
5
6 }
// displayDynamicContent
To counter such “noises”, we generate redundant positive
and negative traces with the goal of identifying unrelated
divergences. Based on our pilot experiments, we decide to
generate three runs of positive traces and three runs of negative
traces to detect and eliminate unrelated divergences.
Note that even though not incorporated yet, our system
can generate these traces from the same webpage (by simply
forcing the same exact webpage and scripts to be reloaded),
thus avoiding the case where different runs encounter two
different versions of webpages or scripts. This means that even
if a website intentionally tries to deliver a different webpage or
script every time [52], we are still able to analyze one speciﬁc
version and determine if anti-adblocker is present.
it
Due to the nature of JavaScript runtime, we are unable to
handle implicit branching caused by callbacks. The following
example illustrates implicit branching. Depending on whether
the URL is successfully loaded, success() and error()
will be invoked respectively. It is important to note that the
URL is pointing to an advertisement; therefore, if it fails
to load,
is indicative that an adblocker is present (and
error() will be invoked accordingly in reaction to it).
However, since success() and error() are both invoked
at the beginning of the event loop (i.e., their call stack is
empty), we are unable to correctly align the two sub-traces and
therefore will not discover the branch divergence. To address
this issue, we will need to consider all callback functions
for a same event (URL fetch) as implicit branch statements.
This means that if we see success() in a positive run
but error() in a negative run, we can attribute it to a
branch divergence. Our system currently does not support this
uncommon special case. We plan to address this limitation in
our future revisions.
1 $.ajax({
2
3
4
5
type: "GET",
url: "some_ads_url",
success: function(){
error: function(XMLHttpRequest, textStatus,
## display ads
},
errorThrown) {
## adblocker detected!
6
7
8 });
}
V. EVALUATION
We ﬁrst evaluate the timing requirements of our differential
execution approach. Recall that we visit each website three
times with adblocker and three times without adblocker. For
each visit, we wait for 20 seconds before we stop the trace
collection to ensure the website ﬁnishes loading (Chromium
loads websites slower with our instrumentation). In addition,
it takes less than a minute to perform the differential trace
analysis. Overall we need about 3 minutes per website on
average to run our differential execution analysis. Given a
server with 32 cores, we need a little over 14 hours to process
ten thousand websites (assuming we schedule one Chromium
5
instance per core). Therefore, our current implementation is
efﬁcient enough to analyze Alexa top-10K websites on a daily
basis using only one server.
We next evaluate the accuracy of anti-adblocker detection
on a small and large scale data set. We have constructed an
anonymous project website at https://sites.google.com/view/
antiadb-proj/ to show some detailed cases studies of anti-
adblocking websites and scripts.
A. Small-Scale Ground Truth Analysis
For positive examples, we pick the list of 686 websites
that were reported to use anti-adblockers in February 2017
[42]. Since some websites may no longer be using anti-
adblockers now (August 2017), we manually re-analyze these
686 websites and shortlist 428 websites which still visibly
react to adblockers. During manual screening, we at each
loaded mainpage manually for around 30s each without any
clicking (but scrolling down is also performed to be able to
catch minor warning messages inserted in the middle of the
page). For negative examples, we manually select 100 websites
(e.g., Wikipedia, academic, and non-proﬁt websites) that do not
contain any ads. Thus, these websites do not trigger adblockers
and also do not contain anti-adblockers.
We evaluate the accuracy of our system in detecting anti-
adblockers on the aforementioned manually labeled set of
websites. Our system achieves 86.9% (372/428) true positive
rate and 0% false positive rate. For the 100 labeled negative
websites, our system did not mistakenly detect any as using
anti-adblockers. For the 56 false negative cases, we identify
that three main reasons: (1) incomplete instrumentation of
branch statements; (2) inherent randomness in website loading,
and (3) incomplete blocking of ads by the adblocker. We
elaborate on these reasons below.
First, we note that websites can implement anti-adblock
detection logic in JavaScript (or any other Turing-complete
programming language for that matter) using many different
constructs that may not be covered by our current implementa-
tion. For example, the presence of a bait object can be checked
using
1 if (bait_is_absent()) {
2
3 }
reaction_func()
ternary operators,
1 bait_is_present() ? do_nothing() : reaction_func()
callbacks,
1 
and && operator.
1 bait_is_absent() && reaction_func()
Among these, our prototype implementation currently only
covers the if/then/else clause and ternary operators
while leaving out callbacks. Moreover, some solutions (e.g.,
BlockAdblock) utilize eval to wrap their anti-adblocking
logic represented as a string, which is not currently instru-
mented in our implementation. Finally, one website (expats.
6
cz) implements anti-adblocking logic using non-control-ﬂow