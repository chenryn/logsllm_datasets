# Entropy-Based Data Organization for Log and Packet Capture Browsing

## Author
Sergey Bratus  
Department of Computer Science  
Dartmouth College

## Abstract
This presentation explores simple yet effective entropy-based techniques for organizing and browsing logs and packet captures. These methods aim to improve the efficiency and clarity of log analysis, making it easier to identify and understand patterns in large datasets.

## Outline
1. **Log Browsing Moves**
   - Pipes and Tables
   - Trees as a Superior Alternative
2. **Data Organization**
   - Defining the Browsing Problem
   - Entropy
   - Measuring Co-Dependence
   - Mutual Information
   - The Tree Building Algorithm
3. **Examples**

## Disclaimer
1. These are simple tricks.
2. This is not a comprehensive survey of research literature (but see the last slides for further reading).
3. These techniques are not for online Intrusion Detection Systems (IDS) or Intrusion Prevention Systems (IPS). They do not involve learning "normal" values or patterns through statistical training, which can be difficult to understand or tweak once trained.
4. These tricks are for offline log browsing and analysis.

## 1. Log Browsing Moves

### Pipes and Tables
Consider the following UNIX command:
```bash
grep 'Accepted password' /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr
```
This command filters, extracts, counts, and sorts IP addresses from successful SSH logins. For example, given the following log entries:
```
Jan 13 21:11:11 zion sshd[3213]: Accepted password for root from 209.61.200.11
Jan 13 21:30:20 zion sshd[3263]: Failed password for neo from 68.38.148.149
Jan 13 21:34:12 zion sshd[3267]: Accepted password for neo from 68.38.148.149
...
```
The output would be:
```
44 68.38.148.149
12 129.10.75.101
2 129.170.166.85
1 66.183.80.107
1 209.61.200.11
```

### Trees are Better than Pipes and Tables
Humans naturally think in classification trees, such as protocol hierarchies (e.g., Wireshark) and firewall decision trees (e.g., iptables chains). Using tree views to show logs can be more intuitive and efficient. 

- **Pipes and SQL Queries** → Branches/Paths
- **Groups** ↔ Nodes (sorted by count/weight)
- **Records** ↔ Leaves

Queries can pick out a leaf or a node in the tree, making it easier to navigate and analyze the data.

## 2. Data Organization

### Defining the Browsing Problem
Browsing logs often involves finding specific lines among many similar but slightly different messages. Key challenges include:
1. **Where to Start?** Which column or protocol feature to pick?
2. **How to Group?** Which grouping helps best to understand the overall data?
3. **Automation** How to automate the selection of starting points and groupings?

### Entropy
Entropy is a measure of uncertainty. In the context of log analysis, it can help identify the most and least frequent values, making it easier to focus on "interesting" data.

### Measuring Co-Dependence
Mutual information measures the amount of information obtained about one random variable through another. It can be used to determine the co-dependence between different fields in the log data.

### The Tree Building Algorithm
The algorithm builds a classification tree based on the dataset, allowing for the creation of templates that can be reused on other datasets.

1. **Build a Classification Tree** from a dataset.
2. **Save Template** for future use.
3. **Reuse** on another dataset.

### Choosing the Best Tree
The goal is to find the best grouping (tree shape) for a dataset. This can be achieved by minimizing entropy and maximizing mutual information.

## 3. Examples

### Example 1: Log Analysis with Pipes and Tables
Using the `grep` and `awk` commands, we can filter and extract specific information from logs. For instance, the following command counts the number of successful SSH logins by IP address:
```bash
grep 'Accepted password' /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr
```

### Example 2: Log Analysis with Trees
By organizing the log data into a tree structure, we can more easily navigate and understand the relationships between different fields. For example, a tree view might group log entries by user, then by IP address, and finally by the time of the login.

### Example 3: Automating Old Tricks
To automate the process of finding the most and least frequent values, we can start with columns that have simpler value frequency charts (histograms). Columns with smaller entropy are generally easier to understand and should be prioritized.

## Conclusion
Entropy-based techniques offer a powerful and intuitive way to organize and browse logs and packet captures. By leveraging these simple tricks, analysts can more effectively identify and understand patterns in large datasets, leading to more efficient and accurate log analysis.