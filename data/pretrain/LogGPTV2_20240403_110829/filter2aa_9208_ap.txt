sequences of bytes.
.IP "*" 8
A ()\-group is a sub-TEMPLATE enclosed in parentheses.  A group may
take a repeat count, both as postfix, and for \fIunpack()\fR also via the \f(CW\*(C`/\*(C'\fR
template character. Within each repetition of a group, positioning with
\&\f(CW\*(C`@\*(C'\fR starts again at 0. Therefore, the result of
.Sp
.Vb 1
\&    pack( '@1A((@2A)@3A)', 'a', 'b', 'c' )
.Ve
.Sp
is the string \*(L"\e0a\e0\e0bc\*(R".
.IP "*" 8
\&\f(CW\*(C`x\*(C'\fR and \f(CW\*(C`X\*(C'\fR accept \f(CW\*(C`!\*(C'\fR modifier.  In this case they act as
alignment commands: they jump forward/back to the closest position
aligned at a multiple of \f(CW\*(C`count\*(C'\fR bytes.  For example, to \fIpack()\fR or
\&\fIunpack()\fR C's \f(CW\*(C`struct {char c; double d; char cc[2]}\*(C'\fR one may need to
use the template \f(CW\*(C`C x![d] d C[2]\*(C'\fR; this assumes that doubles must be
aligned on the double's size.
.Sp
For alignment commands \f(CW\*(C`count\*(C'\fR of 0 is equivalent to \f(CW\*(C`count\*(C'\fR of 1;
both result in no\-ops.
.IP "*" 8
A comment in a \s-1TEMPLATE\s0 starts with \f(CW\*(C`#\*(C'\fR and goes to the end of line.
White space may be used to separate pack codes from each other, but
a \f(CW\*(C`!\*(C'\fR modifier and a repeat count must follow immediately.
.IP "*" 8
If \s-1TEMPLATE\s0 requires more arguments to \fIpack()\fR than actually given, \fIpack()\fR
assumes additional \f(CW""\fR arguments.  If \s-1TEMPLATE\s0 requires less arguments
to \fIpack()\fR than actually given, extra arguments are ignored.
.RE
.RS 8
.Sp
Examples:
.Sp
.Vb 6
\&    $foo = pack("CCCC",65,66,67,68);
\&    # foo eq "ABCD"
\&    $foo = pack("C4",65,66,67,68);
\&    # same thing
\&    $foo = pack("U4",0x24b6,0x24b7,0x24b8,0x24b9);
\&    # same thing with Unicode circled letters
.Ve
.Sp
.Vb 2
\&    $foo = pack("ccxxcc",65,66,67,68);
\&    # foo eq "AB\e0\e0CD"
.Ve
.Sp
.Vb 4
\&    # note: the above examples featuring "C" and "c" are true
\&    # only on ASCII and ASCII-derived systems such as ISO Latin 1
\&    # and UTF-8.  In EBCDIC the first example would be
\&    # $foo = pack("CCCC",193,194,195,196);
.Ve
.Sp
.Vb 3
\&    $foo = pack("s2",1,2);
\&    # "\e1\e0\e2\e0" on little-endian
\&    # "\e0\e1\e0\e2" on big-endian
.Ve
.Sp
.Vb 2
\&    $foo = pack("a4","abcd","x","y","z");
\&    # "abcd"
.Ve
.Sp
.Vb 2
\&    $foo = pack("aaaa","abcd","x","y","z");
\&    # "axyz"
.Ve
.Sp
.Vb 2
\&    $foo = pack("a14","abcdefg");
\&    # "abcdefg\e0\e0\e0\e0\e0\e0\e0"
.Ve
.Sp
.Vb 2
\&    $foo = pack("i9pl", gmtime);
\&    # a real struct tm (on my system anyway)
.Ve
.Sp
.Vb 3
\&    $utmp_template = "Z8 Z8 Z16 L";
\&    $utmp = pack($utmp_template, @utmp1);
\&    # a struct utmp (BSDish)
.Ve
.Sp
.Vb 2
\&    @utmp2 = unpack($utmp_template, $utmp);
\&    # "@utmp1" eq "@utmp2"
.Ve
.Sp
.Vb 3
\&    sub bintodec {
\&        unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
\&    }
.Ve
.Sp
.Vb 5
\&    $foo = pack('sx2l', 12, 34);
\&    # short 12, two zero bytes padding, long 34
\&    $bar = pack('s@4l', 12, 34);
\&    # short 12, zero fill to position 4, long 34
\&    # $foo eq $bar
.Ve
.Sp
The same template may generally also be used in \fIunpack()\fR.
.RE
.IP "package \s-1NAMESPACE\s0" 8
.IX Item "package NAMESPACE"
.PD 0
.IP "package" 8
.IX Item "package"
.PD
Declares the compilation unit as being in the given namespace.  The scope
of the package declaration is from the declaration itself through the end
of the enclosing block, file, or eval (the same as the \f(CW\*(C`my\*(C'\fR operator).
All further unqualified dynamic identifiers will be in this namespace.
A package statement affects only dynamic variables\*(--including those
you've used \f(CW\*(C`local\*(C'\fR on\*(--but \fInot\fR lexical variables, which are created
with \f(CW\*(C`my\*(C'\fR.  Typically it would be the first declaration in a file to
be included by the \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR operator.  You can switch into a
package in more than one place; it merely influences which symbol table
is used by the compiler for the rest of that block.  You can refer to
variables and filehandles in other packages by prefixing the identifier
with the package name and a double colon:  \f(CW$Package::Variable\fR.
If the package name is null, the \f(CW\*(C`main\*(C'\fR package as assumed.  That is,
\&\f(CW$::sail\fR is equivalent to \f(CW$main::sail\fR (as well as to \f(CW$main'sail\fR,
still seen in older code).
.Sp
If \s-1NAMESPACE\s0 is omitted, then there is no current package, and all
identifiers must be fully qualified or lexicals.  However, you are
strongly advised not to make use of this feature. Its use can cause
unexpected behaviour, even crashing some versions of Perl. It is
deprecated, and will be removed from a future release.
.Sp
See \*(L"Packages\*(R" in perlmod for more information about packages, modules,
and classes.  See perlsub for other scoping issues.
.IP "pipe \s-1READHANDLE\s0,WRITEHANDLE" 8
.IX Item "pipe READHANDLE,WRITEHANDLE"
Opens a pair of connected pipes like the corresponding system call.
Note that if you set up a loop of piped processes, deadlock can occur
unless you are very careful.  In addition, note that Perl's pipes use
\&\s-1IO\s0 buffering, so you may need to set \f(CW$|\fR to flush your \s-1WRITEHANDLE\s0
after each command, depending on the application.
.Sp
See IPC::Open2, IPC::Open3, and \*(L"Bidirectional Communication\*(R" in perlipc
for examples of such things.
.Sp
On systems that support a close-on-exec flag on files, the flag will be set
for the newly opened file descriptors as determined by the value of $^F.
See \*(L"$^F\*(R" in perlvar.
.IP "pop \s-1ARRAY\s0" 8
.IX Item "pop ARRAY"
.PD 0
.IP "pop" 8
.IX Item "pop"
.PD
Pops and returns the last value of the array, shortening the array by
one element.  Has an effect similar to
.Sp
.Vb 1
\&    $ARRAY[$#ARRAY--]
.Ve
.Sp
If there are no elements in the array, returns the undefined value
(although this may happen at other times as well).  If \s-1ARRAY\s0 is
omitted, pops the \f(CW@ARGV\fR array in the main program, and the \f(CW@_\fR
array in subroutines, just like \f(CW\*(C`shift\*(C'\fR.
.IP "pos \s-1SCALAR\s0" 8
.IX Item "pos SCALAR"
.PD 0
.IP "pos" 8
.IX Item "pos"
.PD
Returns the offset of where the last \f(CW\*(C`m//g\*(C'\fR search left off for the variable
in question (\f(CW$_\fR is used when the variable is not specified).  May be
modified to change that offset.  Such modification will also influence
the \f(CW\*(C`\eG\*(C'\fR zero-width assertion in regular expressions.  See perlre and
perlop.
.IP "print \s-1FILEHANDLE\s0 \s-1LIST\s0" 8
.IX Item "print FILEHANDLE LIST"
.PD 0
.IP "print \s-1LIST\s0" 8
.IX Item "print LIST"
.IP "print" 8
.IX Item "print"
.PD
Prints a string or a list of strings.  Returns true if successful.
\&\s-1FILEHANDLE\s0 may be a scalar variable name, in which case the variable
contains the name of or a reference to the filehandle, thus introducing
one level of indirection.  (\s-1NOTE:\s0 If \s-1FILEHANDLE\s0 is a variable and
the next token is a term, it may be misinterpreted as an operator
unless you interpose a \f(CW\*(C`+\*(C'\fR or put parentheses around the arguments.)
If \s-1FILEHANDLE\s0 is omitted, prints by default to standard output (or
to the last selected output channel\*(--see \*(L"select\*(R").  If \s-1LIST\s0 is
also omitted, prints \f(CW$_\fR to the currently selected output channel.
To set the default output channel to something other than \s-1STDOUT\s0
use the select operation.  The current value of \f(CW$,\fR (if any) is
printed between each \s-1LIST\s0 item.  The current value of \f(CW\*(C`$\e\*(C'\fR (if
any) is printed after the entire \s-1LIST\s0 has been printed.  Because
print takes a \s-1LIST\s0, anything in the \s-1LIST\s0 is evaluated in list
context, and any subroutine that you call will have one or more of
its expressions evaluated in list context.  Also be careful not to
follow the print keyword with a left parenthesis unless you want
the corresponding right parenthesis to terminate the arguments to
the print\*(--interpose a \f(CW\*(C`+\*(C'\fR or put parentheses around all the
arguments.
.Sp
Note that if you're storing \s-1FILEHANDLES\s0 in an array or other expression,
you will have to use a block returning its value instead:
.Sp
.Vb 2
\&    print { $files[$i] } "stuff\en";
\&    print { $OK ? STDOUT : STDERR } "stuff\en";
.Ve
.IP "printf \s-1FILEHANDLE\s0 \s-1FORMAT\s0, \s-1LIST\s0" 8
.IX Item "printf FILEHANDLE FORMAT, LIST"
.PD 0
.IP "printf \s-1FORMAT\s0, \s-1LIST\s0" 8
.IX Item "printf FORMAT, LIST"
.PD
Equivalent to \f(CW\*(C`print FILEHANDLE sprintf(FORMAT, LIST)\*(C'\fR, except that \f(CW\*(C`$\e\*(C'\fR
(the output record separator) is not appended.  The first argument
of the list will be interpreted as the \f(CW\*(C`printf\*(C'\fR format. See \f(CW\*(C`sprintf\*(C'\fR
for an explanation of the format argument. If \f(CW\*(C`use locale\*(C'\fR is in effect,
the character used for the decimal point in formatted real numbers is
affected by the \s-1LC_NUMERIC\s0 locale.  See perllocale.
.Sp
Don't fall into the trap of using a \f(CW\*(C`printf\*(C'\fR when a simple
\&\f(CW\*(C`print\*(C'\fR would do.  The \f(CW\*(C`print\*(C'\fR is more efficient and less
error prone.
.IP "prototype \s-1FUNCTION\s0" 8
.IX Item "prototype FUNCTION"
Returns the prototype of a function as a string (or \f(CW\*(C`undef\*(C'\fR if the
function has no prototype).  \s-1FUNCTION\s0 is a reference to, or the name of,
the function whose prototype you want to retrieve.
.Sp
If \s-1FUNCTION\s0 is a string starting with \f(CW\*(C`CORE::\*(C'\fR, the rest is taken as a
name for Perl builtin.  If the builtin is not \fIoverridable\fR (such as
\&\f(CW\*(C`qw//\*(C'\fR) or its arguments cannot be expressed by a prototype (such as
\&\f(CW\*(C`system\*(C'\fR) returns \f(CW\*(C`undef\*(C'\fR because the builtin does not really behave
like a Perl function.  Otherwise, the string describing the equivalent
prototype is returned.
.IP "push \s-1ARRAY\s0,LIST" 8
.IX Item "push ARRAY,LIST"
Treats \s-1ARRAY\s0 as a stack, and pushes the values of \s-1LIST\s0
onto the end of \s-1ARRAY\s0.  The length of \s-1ARRAY\s0 increases by the length of
\&\s-1LIST\s0.  Has the same effect as
.Sp
.Vb 3
\&    for $value (LIST) {
\&        $ARRAY[++$#ARRAY] = $value;
\&    }
.Ve
.Sp
but is more efficient.  Returns the new number of elements in the array.
.IP "q/STRING/" 8
.IX Item "q/STRING/"
.PD 0
.IP "qq/STRING/" 8
.IX Item "qq/STRING/"
.IP "qr/STRING/" 8
.IX Item "qr/STRING/"
.IP "qx/STRING/" 8