```
user@net1:~$ bridge fdb show
……
00:0c:29:59:ca:ca dev eth1
00:0c:29:17:f4:03 dev eth2
user@net1:~$
```
我们在前面的输出中看到的两个媒体访问控制地址引用了`net1`为了到达主机`net2`和`net3`而与之直接相连的接口，以及在它们相关的`dummy0`接口上定义的子网。我们可以通过查看主机 ARP 表来验证这一点:
```
user@net1:~$ arp -a
? (10.10.10.1) at 00:21:d7:c5:f2:46 [ether] on eth0
? (172.16.10.2) at 00:0c:29:59:ca:ca [ether] on host_bridge1
? (172.16.10.66) at 00:0c:29:17:f4:03 [ether] on host_bridge2
user@net1:~$
```
### 注
旧工具更好的场景并不多，但就`bridge`命令行工具而言，有些人可能会认为旧的`brctl`工具有一些优势。首先，输出更容易阅读。在学习媒体访问控制地址的情况下，使用`brctl showmacs `命令可以更好地查看映射。如果想用老一点的工具，可以安装`bridge-utils`套装。
从桥上移除接口可以通过`ip link set`子命令完成。例如，如果我们想将`eth1`从`host_bridge1`桥上移除，我们将运行以下命令:
```
sudo ip link set dev eth1 nomaster
```
这将移除`eth1`和网桥`host_bridge1`之间的主从绑定。接口也可以被重新分配给新的桥(主设备)，而不需要将它们从当前关联的桥中移除。如果我们想完全删除该桥，可以使用以下命令:
```
sudo ip link delete dev host_bridge2
```
应该注意的是，在删除桥之前，不需要从桥上移除所有接口。删除桥将自动删除所有主绑定。
# 建立联系
直到这一点，我们一直专注于在接口之间建立连接的物理电缆。但是我们如何连接两个没有物理接口的接口呢？为此，Linux 网络有一个内部接口类型，称为**虚拟以太网** ( **VETH** )对。VETH 接口总是成对创建，使它们像一种虚拟配线电缆。VETH 接口也可以分配 IP 地址，这允许它们参与第 3 层路由路径。在本食谱中，我们将研究如何通过构建我们在以前的食谱中使用的实验室拓扑来定义和实现 VETH 对。
## 做好准备
为了查看和操作网络设置，您需要确保安装了`iproute2`工具集。如果系统上没有，可以使用以下命令进行安装:
```
sudo apt-get install iproute2
```
为了对主机进行网络更改，您还需要根级访问。该配方将延续前一配方的实验室拓扑。前面提到的所有先决条件仍然适用。
## 怎么做…
让我们再次修改实验室拓扑，这样我们就可以利用 VETH 对:
![How to do it…](img/B05453_01_07.jpg)
同样，主机`net2`和`net3`上的配置将保持不变。在主机`net1`上，我们将以两种不同的方式实现 VETH 对。
在`net1`和`net2`之间的连接上，我们将使用两个不同的桥，并用一个 VETH 对将它们连接在一起。大桥`host_bridge1`将保留在`net1`上，并保持其`172.16.10.1`的 IP 地址。我们还将增加一座名为`edge_bridge1`的新桥。该网桥不会被分配一个 IP 地址，但是将使`net1`的接口作为其成员面向`net2` ( `eth1`)。在这一点上，我们将使用一个 VETH 对来连接两个网桥，允许流量从`net1`通过两个网桥流向`net2`。在这种情况下，VETH 对将用作第 2 层构造。
关于`net1`和`net3`之间的连接，我们将使用一对 VETH，但方式略有不同。我们将添加一个名为`edge_bridge2`的新桥，并将`net1`主机面向主机`net3` ( `eth2`)的接口放在该桥上。然后我们将提供一对 VETH 并将一端放在桥上`edge_bridge2`。然后，我们将先前分配给`host_bridge2`的 IP 地址分配给 VETH 对的主机端。在这种情况下，VETH 对将用作第 3 层构造。
让我们从增加新的边桥开始`net1`和`net2`之间的连接:
```
user@net1:~$ sudo ip link add edge_bridge1 type bridge
```
然后，我们将面向`net2`的界面添加到`edge_bridge1`中:
```
user@net1:~$ sudo ip link set dev eth1 master edge_bridge1
```
接下来，我们将配置用于连接`host_bridge1`和`edge_bridge1`的 VETH 对。VETH 对总是在一对中定义。创建接口将产生两个新的对象，但是它们相互依赖。也就是说，如果您删除了 VETH 对的一端，另一端将随之被删除。要定义 VETH 对，我们使用`ip link add`子命令:
```
user@net1:~$ sudo ip link add host_veth1 type veth peer name edge_veth1
```
### 注
请注意，该命令定义了 VETH 连接两端的名称。
我们可以使用`ip link show`子命令查看它们的配置:
```
user@net1:~$ ip link show
……
13: edge_veth1@host_veth1:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether 0a:27:83:6e:9a:c3 brd ff:ff:ff:ff:ff:ff
14: host_veth1@edge_veth1:  mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000
    link/ether c2:35:9c:f9:49:3e brd ff:ff:ff:ff:ff:ff
user@net1:~$
```
请注意，我们有两个条目显示了已定义的 VETH 对每一侧的接口。下一步是将 VETH 对的末端放在正确的位置。在`net1`和`net2`连接的情况下，我们希望一端在`host_bridge1`上，另一端在`edge_bridge1`上。为此，我们使用与分配接口给网桥相同的语法:
```
user@net1:~$ sudo ip link set host_veth1 master host_bridge1
user@net1:~$ sudo ip link set edge_veth1 master edge_bridge1
```
我们可以使用`ip link show`命令验证映射:
```
user@net1:~$ ip link show
……
9: edge_veth1@host_veth1:  mtu 1500 qdisc noop master edge_bridge1 state DOWN mode DEFAULT group default qlen 1000
    link/ether f2:90:99:7d:7b:e6 brd ff:ff:ff:ff:ff:ff
10: host_veth1@edge_veth1:  mtu 1500 qdisc noop master host_bridge1 state DOWN mode DEFAULT group default qlen 1000
    link/ether da:f4:b7:b3:8d:dd brd ff:ff:ff:ff:ff:ff
```
我们需要做的最后一件事是调出与连接相关的接口:
```
user@net1:~$ sudo ip link set host_bridge1 up
user@net1:~$ sudo ip link set edge_bridge1 up
user@net1:~$ sudo ip link set host_veth1 up
user@net1:~$ sudo ip link set edge_veth1 up
```
要到达`net2`之外的虚拟接口，您需要重新添加路由，因为它在重新配置期间再次丢失:
```
user@net1:~$ sudo ip route add 172.16.10.128/26 via 172.16.10.2
```
此时，我们应该通过`net1`对`net2`及其`dummy0`接口有完全的可达性。
在主机`net1`和`net3`之间的连接上，我们首先要做的就是清理掉所有没有使用的接口。在这种情况下，那就是`host_bridge2`:
```
user@net1:~$ sudo ip link delete dev host_bridge2
```
然后，我们需要添加新的边缘桥(`edge_bridge2`)并将`net1`面向`net3`的接口关联到桥:
```
user@net1:~$ sudo ip link add edge_bridge2 type bridge
user@net1:~$ sudo ip link set dev eth2 master edge_bridge2
```
然后，我们将为这个连接定义 VETH 对:
```
user@net1:~$ sudo ip link add host_veth2 type veth peer name edge_veth2
```
在这种情况下，我们将保持主机端 VETH 对与网桥没有关联，而是直接为其分配一个 IP 地址:
```
user@net1:~$ sudo ip address add 172.16.10.65/25 dev host_veth2
```
就像任何其他接口一样，我们可以通过使用`ip address show dev`命令来查看分配的 IP 地址:
```
user@net1:~$ ip addr show dev host_veth2
12: host_veth2@edge_veth2:  mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 56:92:14:83:98:e0 brd ff:ff:ff:ff:ff:ff
    inet 172.16.10.65/25 scope global host_veth2
       valid_lft forever preferred_lft forever
    inet6 fe80::5492:14ff:fe83:98e0/64 scope link
       valid_lft forever preferred_lft forever
user@net1:~$
```
然后，我们将 VETH 对的另一端放入`edge_bridge2`中，将`net1`连接到边缘桥:
```
user@net1:~$ sudo ip link set edge_veth2 master edge_bridge2
```
我们再次打开所有相关的界面:
```
user@net1:~$ sudo ip link set edge_bridge2 up
user@net1:~$ sudo ip link set host_veth2 up