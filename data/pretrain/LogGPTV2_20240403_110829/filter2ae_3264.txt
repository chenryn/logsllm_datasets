# starCTF-crypto部分
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
临近五一事情比较多，基本用的是零碎的时间玩的*ctf，有些题目还是很有趣的
## babyprng
首先看一下主要代码：
    def run(self, code):
        stack = []
        out = []
        cnt = 0
        random.seed(os.urandom(8))
        self.TH = 0.7 + random.random()*0.25
        for _ in xrange(self.SIZE):
            stack.append(self.randbit())
        try:
            pos = 0
            for _ in xrange(self.SIZE*10):
                c = code[pos]
                pos += 1
                if c=='x00':
                    out.append(stack[-1])
                elif c=='x01':
                    if stack[-1]==1:
                        pos += 1
                elif c=='x02':
                    del stack[-1]
                elif c=='x03':
                    stack[-1] = stack[-1]&stack[-2]
                elif c=='x04':
                    stack[-1] = stack[-1]|stack[-2]
                elif c=='x05':
                    stack[-1] = stack[-1]^stack[-2]
                #elif c=='x06':
                #    stack[-1] = 1-stack[-1]
                #elif c=='x06':
                #    stack.append(stack[-1])
                elif ord(c)>=0x10 and ord(c)=0x30 and ord(c)=2:
                            pos += 1
                    elif c=='x08':
                        stack+=sequence[::-1]
                        sequence=[]
                    elif ord(c)>=0x10 and ord(c)=0x30 and ord(c). 2**11:
            print u//v
            return u//v
        else:
            return 0
仔细观察代码会发现这个方法并没有调用其他两个方法里的check_point方法，也就是不检查输入的点是否在椭圆曲线上，这就可以任意构造了，题目的要求是求出p的大小，而这个方法完全可以做到：
由于检查u、v不能直接为(1, 1)，所以可以令uv为(1, 2)最后返回的结果除以2就能得到sub(p,
t)的结果，而我们是大致知道p的范围的，因为p=getprime(15)*getprime(15)所以p的范围在pow(2, 29)到pow(2,
30)之间，如果令t也在pow(2, 29)到pow(2,
30)之间且p>=t的话，那么p//t结果一定是返回1，否则的话返回其他结果，那么我们就可以通过二分法查找来缩小范围，从而确定p的值（所以这道题和ecc有啥关系？。。。）
exp：
    from socket import *
    from libnum import *
    import string
    from re import *
    from hashlib import sha256
    def connect(host, port):
        s = socket()
        s.connect((host, port))
        return s
    def cal(proof, ans, set):
        for i in set:
            for j in set:
                for k in set:
                    for m in set:
                        if sha256(i+j+k+m+proof).hexdigest() == ans:
                            print i+j+k+m
                            return i+j+k+m
    def proof_of_work(s):
        msg = s.recv(1024)
        print msg
        set = string.ascii_letters+string.digits
        reg = 'sha256(XXXX+(.+)) == (.+)n'
        regexp = compile(reg)
        res = regexp.findall(msg)
        proof = res[0][0]
        ans = res[0][1]
        print s.recv(1024)
        s.send(cal(proof, ans, set))
        print s.recv(1024)
    def send4(s, msg):
        print '4'
        s.send('4n')
        print s.recv(1024)
        print '(1,2)'
        s.send('(1,2)n')
        print s.recv(1024)
        print str(msg)
        s.send(str(msg) + 'n')
        res = s.recv(1024)
        print res
        print s.recv(1024)
        reg = 'the result is :(.+)'
        regexp = compile(reg)
        r = regexp.findall(res)
        num = r[0]
        return int(num)
    def main():
        host ='127.0.0.1'
        port = 20005
        s = connect(host, port)
        proof_of_work(s)
        print s.recv(1024)
        low = 2**29
        high = 2**31
        mid = (low + high) / 2
        count = 0
        while high>low:
            if send4(s, mid)==2:
                low = mid
            else:
                high = mid
            tmp = mid
            mid = (low + high) / 2
            if mid == tmp:
                count += 1
            else:
                count = 0
            if count >5:
                break
        mid += 1
        print 5
        s.send('5n')
        print s.recv(1024)
        print (1, mid)
        s.send('(1,%d)n'%mid)
        print s.recv(1024)
        print s.recv(1024)
    if __name__ == '__main__':
        main()
## 总结
不管是出题人有心还是无意，这次题目都有很多非预期的解法，也给题目增加了许多乐趣