measurements against servers - the clients move between networks,
change IP addresses, the clients are located behind intermediate
devices, such as Network Address translators (NAT) and firewalls -
which also prevents direct measurements; (2) inaccuracies in geolo-
cation tools, which do not apply to our study since we do not need
to know the location to measure ingress filtering, (2) additional
network mechanisms (anycast, rerouting, traffic shaping, transient
network failures). All these can only cause us to classify the server
as not ’testable’, but do not impact ’spoofable’ outcomes. Further-
more, the IPID measurement methods in prior workss use TCP-RST
packets to increment IPID, which are often blocked in firewalls. In
contrast, we use packets which are not blocked such as DNS queries
or TCP-SYN.
Inferring spoofing. We use the following components: the
prober at IP address 7.7.7.7 and a server at IP address 1.2.3.7
that uses globally incremental IPID, illustrated in Figure 4. Us-
ing the prober at 7.7.7.7, we measure the value of the IPID and
the rate at which IPID increments. We use linear regression with
020406080100120140160180Time (Second)0200004000060000IPID1043ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Tianxiang Dai and Haya Shulman
Ordinary Least Square (OLS) method to estimate the relation be-
tween IPID and timestamp t. Since IPID is incremental, it holds:
IPID = a ∗ t + b + ϵ, ϵ ∼ N(0, σ 2)
We send N probes to 7.7.7.7 (in step (1)). With N probes, we
can estimate a, b and σ using OLS method in step (2). In step (3) in
Figure 4 we send a set of M = 6∗σ packets from a spoofed source IP
address 1.2.3.6 (belonging to the probed network). In step (4) at
time TM +N +1 we sample the IPID value Z = IPIDr eal
M +N +1 from the
server from the prober’s real IP address 7.7.7.7 - this is needed in
order to receive the response. We check the IPID value Z in step (5)
in Figure 4. Taking the linear regression model into consideration,
we can calculate IPIDesti
M +N +1 at time TM +N +1. If the M spoofed
packets are filtered, according to 3-sigma rule, there is a 99.73%
M +N +1 − 3 ∗ σ ≤ Z ≤ IPIDesti
M +N +1 + 3 ∗ σ.
possibility that: IPIDesti
However, if the spoofed packets are not blocked, a.k.a. there is
no ingress filtering, the IPID counter should have an additional
M +N +1 + 3 ∗ σ, which is also
increment of M. Thus Z > IPIDesti
Z > IPIDesti
M +N +1 + M/2.
3.4 PMTUD
Path Maximum Transmission Unit Discovery (PMTUD) determines
the MTU size on the network path between two IP hosts. The
process starts by setting the Don’t Fragment (DF) bit in IP headers.
Any router along the path whose MTU is smaller than the packet
will drop the packet, and send back an ICMP Fragmentation Needed
/ Packet Too Big (PTB). The payload of the ICMP packet contains the
IP header and the first 8 bytes of the original packet that triggered
the error as well as the MTU of the router that sent the ICMP
message. After receiving an ICMP PTB message, the source host
should either reduce its path MTU appropriately or unset the DF
bit.
A study of CAIDA datasets in 2017 found 3M ICMP fragmenta-
tion needed packets sent by routers in the Internet, with about 1K
routers sending ICMP error message with next hop MTU of less
than 500 Bytes [20].
Figure 4: Sequence diagram for IPID technique.
We define outcomes of a test with IPID technique as spoofable,
applicable, non-applicable, N/A; see Table 2. The IPID technique is
not applicable if the IPID counter is constant zero or if the IPID
counter is not globally incremental.
Category
Spoofable
Applicable
Non-applicable
N/A
IPID
no filtering
server w/globally
incremental IPID
random IPID
or per-dest IPID
or IPID=0
host unreachable
or firewall
or packet loss
or load balancer
Table 2: Outcomes of tests.
PMTUD
no filtering
host supports
PMTUD
(DF≡0 & MF≡0) or
(DF≡1 or MF≡1)
& no change
host unreachable or
misconfigured service
or firewall
or packet loss
DNS
no filtering
has DNS
server
no DNS
server
found
Figure 5: Sequence diagram for PMTUD technique.
Methodology. The core idea of the Path MTU Discovery (PM-
TUD) based tool is to send the ICMP Packet too Big (PTB) message
from a spoofed source IP address, belonging to the tested network,
and in the 8 bytes payload of the ICMP to insert the real IP address
belonging to the prober. If the network does not enforce ingress
filtering, the server will receive the PMTUD message and will re-
duce the MTU to the IP address specified in the first 8 bytes of the
ICMP payload. We first probe the MTU to a service on the tested
network, then send ICMP PTB from a spoofed IP address. If the
packet arrives at the service, it will reduce the MTU to our prober,
and we will identify this event in the next packet from the service -
1044SMap: Internet-wide Scanning for Spoofing
ACSAC ’21, December 6–10, 2021, Virtual Event, USA
this event implies that the tested network does not apply ingress
filtering.
Identifying servers that support PMTUD. We measured net-
works that support PMTUD (i.e., do not filter ICMP Fragmentation
Needed (Type 3, Code 4) messages), and found that 85.92% of the
tested networks support PMTUD.
Inferring spoofing. The PMTUD test is illustrated in Figure 5.
We establish a TCP connection to a server on the tested network.
Then we send Request1 and receive Response1. If DF bit is not
set, the server does not support PMTUD. Otherwise, we send an
ICMP PTB with smaller MTU. Following that, we request again
and get Response2. If DF1 == 1 and (DF2 == 0 or size2 ≤ size1),
the server supports PMTUD. Now we can proceed to test if ingress
filtering is enforced. We spoof an ICMP PTB with smallest MTU,
using server’s neighbour IP as source IP address. Once that is done,
we make another request. The server is not protected by ingress
filtering if following condition applies: size3 ≤ size2 or (DF2 ==
1 and DF3 == 0).
We define outcomes of a test with PMTUD technique as spoofable,
applicable, non-applicable, N/A; see rightmost column in Table 2.
3.5 DNS Lookup
DNS provides lookup services to networks. Upon receiving a DNS
request, the resolver performs the lookup of the requested domain
name and returns the response with the requested record.
Methodology. We send a DNS request to the tested network
from a spoofed IP address belonging to the tested network. If the
network does not enforce ingress filtering, the request will arrive at
the DNS resolver on that network. A query from a spoofed source
IP address will cause the response to be sent to the IP address from
which the request was sent, i.e., the spoofed IP address. Since we do
not control the spoofed IP address, we will not be able to observe
this event and hence will not be able to infer if the DNS resolver
received our request or if the request was filtered due to spoofing.
To obtain insights into the traffic arriving at the resolver in the
tested network we utilise the payload of the DNS request: the query
contains the domain which we own, set up on Name servers that we
control. Namely, eventhough the response from the DNS resolver
will be returned to the spoofed IP address and will not be received
by us, the DNS request will be issued to our Name servers, which is
an indication that the DNS resolver on the tested network received
our DNS request, sent from spoofed IP address.
Identifying DNS resolvers. The main challenge here is to lo-
cate the DNS resolvers within a domain/network and to trigger a
DNS request to our Name servers. We use Email service in the target
networks (retrieved via the MX type request in the target domain) to
find the DNS resolvers. We send an email to target domain’s Email
server from one of our unique subdomains with a non-existing
recipient set in the destination. This causes the Email server on the
tested network to generate a Delivery Status Notification (DSN)
error message [RFC3464] to our Email server. To be able to send us
the DSN, the Email server will request the resolver on the tested
network, to provide it the MX and A/AAAA records of our Email
exchanger. At the same time, it may also trigger anti-spam checking,
which requests (SPF/TXT, PTR, DKIM, DMARC)-type records in
domains under our control. By monitoring the DNS queries at our
Name servers, we collect the IP addresses of the resolvers. Using
this methodology we identified 49,252 DNS resolvers in 7,141 net-
works. However, in our regular IPv4 scan, to reduce Email traffic in
the Internet, we use the list of servers with UDP port 53 open from
Project Sonar as input.
Figure 6: Sequence diagram for DNS lookup technique.
Inferring spoofing. Given a DNS resolver at IP 1.2.3.7, we
send a DNS query to 1.2.3.7 port 53 asking for a record in domain
under our control. The query is sent from a spoofed source IP
address belonging to the tested network. We monitor for DNS
requests arriving at our Name server. If a query for the requested
record arrives from 1.2.3.7, we mark the network as not enforcing
ingress filtering. The process is illustrated in Figure 6, steps (1-4)
locate the IP address of the DNS resolver, and steps (5,6) test for
ingress filtering on that network.
4 INTERNET MEASUREMENTS
In this section we report on our Internet-wide measurement of
ingress filtering with SMap. Our dataset collection with SMap has
been initiated on July 2019 continually collected data over a period
of one year, of over 6M domains and an entire IPv4 address block.
4.1 Dataset
SMap first collects the dataset of services.Our dataset is constructed
as follows: we periodically download the entire IPv4 scan from
Sonar Project [2]. We use the scan results on UDP port 53 as input
for Name servers and DNS resolvers, scan data on TCP port 25
for Mail servers and scan results on TCP port 80 for Web servers.
Besides, we also make use of forward DNS responses and reverse
DNS responses from Sonar Project to help find hostnames of servers.
In the latest dataset from Sonar, we have services hosted in 63,522
ASes (Table 3) with 4,256,598 DNS servers in 38,838 ASes, 16,478,938
Email servers in 38,937 ASes, and 62,455,254 Web servers in 61,535
ASes; see Table 4.
4.2 Ingress Filtering Results
Domain-scan and IPv4-scan both show that the number of spoofable
ASes grows with the overall number of the ASes in the Internet,
see Figure 1. Furthermore, there is a correlation between fraction
1045ACSAC ’21, December 6–10, 2021, Virtual Event, USA
Tianxiang Dai and Haya Shulman
Spoofable
Applicable
Technique_Service
IPID_NS
IPID_MX
IPID_WWW
IPID_ANY
PMTUD_NS
PMTUD_MX
PMTUD_WWW
PMTUD_ANY
DNS lookup
ANY
8,752
4,355
30,963
32,248
9,054
23,078
41,959
43,473
25,407
51,046
23.07%
21.48%
51.83%
56.25%
24.16%
68.69%
76.91%
75.98%
40.00%
80.90%
12,056
6,861
39,370
41199
11,592
27,127
47,524
49,161
44,577
58,432
31.78%
33.84%
63.27%
67.52%
30.93%
80.74%
87.11%
85.92%
70.18%
92.61%
Non-Applicable
25,881
13,416
22,891
22,853
25,885
6,471
7,034
8,053
-
4,662
N/A
25,585
43,245
2,608
1,299