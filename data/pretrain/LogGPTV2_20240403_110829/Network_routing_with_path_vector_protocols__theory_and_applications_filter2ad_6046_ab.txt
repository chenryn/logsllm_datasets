being a local-optimal-path with respect to Vui (Td). In con-
clusion, Td is an optimal-paths in-tree.
We show the converse statement with the help of Fig-
ure 2. If the algebra is not isotone, then there are l ∈ L and
α, β ∈ Σ such that f (α) (cid:5) f (β) but f (l ⊕ α) (cid:12) f (l ⊕ β). In
Figure 2, path P has signature α, path Q has signature β,
and link (u, v) has label l. The in-tree that contains path
P to the disadvantage of path Q is a local-optimal-paths
in-tree because f (s(P )) = f (α) (cid:5) f (β) = f (s(Q)). As
a consequence, the path in the local-optimal-paths in-tree
from u to d is path uv ◦ P , if any. However, that is not an
optimal path from u to d, since f (s(uv ◦ P )) = f (l ⊕ α) (cid:12)
f (l ⊕ β) = f (s(uv ◦ Q)).
In Section 7, we will present examples of algebras which
are monotone but not isotone, for which local-optimal-paths
in-trees are not necessarily optimal-paths in-trees.
5. PATH VECTOR PROTOCOL
Given a destination, each node participating in a path
vector protocol chooses, at any given time, a local-optimal
path with respect to the paths last learned from each of its
out-neighbors to reach the destination. If there is more than
u
v
P
Q
d
l(u,v)=l       s(P)=        s(Q)=
Figure 2: Thick lines represent paths and thin lines
represent links. Suppose that f (α) (cid:5) f (β), but f (l ⊕
α) (cid:12) f (l ⊕ β). Then, the local-optimal-paths in-tree
rooted at d that contains path P , and not path Q, is
not an optimal-paths in-tree rooted at d.
one local-optimal path, the node deterministically chooses
one of them. We assume that the relative preference given to
paths with the same origin, destination, and weight totally
orders those paths.
Algorithm 1 presents representative path vector protocol
code for node u to reach destination d. This code is executed
atomically when node u receives a signaling routing message
from its out-neighbor v(cid:5)
. A signaling routing message is of
the form (cid:17)P, s(cid:18): if P is a path, then s is its signature; oth-
erwise, if P = none, then s is equal to φ. The symbol none
denotes the absence of a path. The variable path u holds
the path currently chosen at node u to reach node d, and
the variable ptab u[v] holds the chosen path with origin at v
and destination at d last learned from out-neighbor v. The
variables sign u and sign u[v] hold the signatures of paths
path u and ptab u[v], respectively. Algorithm 1 states simply
that when node u receives a signaling routing message from
its out-neighbor v(cid:5)
, it updates its chosen path to the des-
tination to become the most preferred of the local-optimal
paths with respect to the paths ptab u[v], and it advertises
the new chosen path to all in-neighbors, if the chosen path
has changed as a result of the update. Similar code exists
to deal with the failure, addition, or change of label of a
link. We assume that for each pair of nodes u and v such
that v is a out-neighbor of u there is a signaling queue to
hold the signaling routing messages in transit from v to u.
This signaling queue is lossless and behaves according to a
ﬁrst-in-ﬁrst-out service discipline.
Some variations of Algorithm 1 can be found in implemen-
tations. For example, in the last two lines of code, if node
u can determine that node v is already part of path path u,
or that vu ◦ path u is not a usable path, it may send routing
message (cid:17)none, φ(cid:18) to in-neighbor v, instead of routing mes-
sage (cid:17)path u, sign u(cid:18). Also, the signature of a path may be
omitted from the signaling routing messages if it can be in-
ferred from the enumeration of the nodes that make up the
path and the label of the link joining the recipient to the
sender of the signaling routing message. These variations
do not alter our main conclusions.
6. PROTOCOL CONVERGENCE
6.1 Speciﬁcation
The speciﬁcation of every path vector protocol contains
at the very least the convergence requirement. This require-
ment imposes that some time after links stop failing and
being added between nodes no more signaling routing mes-
sages are to be found in transit in signaling queues. Further
Algorithm 1 Protocol code when node u receives signaling
routing message (cid:17)P, s(cid:18) from out-neighbor v(cid:5)
.
] := P
] := s
ptab u[v(cid:5)
sign u[v(cid:5)
if there is a local-optimal path with respect to the paths
ptab u[v] then
] be the preferred local-optimal path
let uv∗ ◦ ptabu[v∗
with respect to the paths ptab u[v]
path u := uv∗ ◦ ptab u[v∗
sign u := l(u, v∗
) ⊕ ptabu[v∗
]
]
else
path u := none
sign u := φ
if path u has changed then
send (cid:17)path u, sign u(cid:18) to v
for all v in-neighbor of u do
requirements in the speciﬁcation of a path vector protocol
care to the properties of the paths chosen by the nodes once
the protocol has converged, and these requirements depend
on the particular routing strategies one wishes to imple-
ment. A generic requirement usually found in performance-
oriented routing strategies is the optimality requirement,
which states that the union of all paths chosen by the nodes
to reach any given destination should form an optimal-paths
in-tree rooted at that destination.
6.2 Main convergence results
It is easy to show that if the protocol converges, then,
once it has converged, the path choices at the nodes yield
local-optimal-paths in-trees rooted at the various destina-
tions. We omit the proof because it does not depend on
the monotonicity and isotonicity properties of the algebra,
and because it can be adapted from a similar proof in [7].
From Proposition 2, we already know that if the algebra
is monotone, then local-optimal-path in-trees are optimal-
path in-trees if and only if the algebra is isotone as well.
It is the relationship between convergence and monotonicity
that remains to be established.
The necessity of monotonicity for protocol convergence
can be shown with an example. If the algebra is not mono-
tone, then there are l ∈ L and α ∈ Σ such that f (l ⊕
α) ≺ f (α). From the absorptive property, we conclude that
α (cid:11)= φ.
In the network of Figure 3, node d is the desti-
nation. Suppose that signaling routing messages incur a
delay of exactly one unit of time travelling either from u
to v or from v to u. At time zero, nodes u and v have
just chosen paths Pu and Pv to reach node d, respectively,
and advertised these choices to each other. After one unit
of time as elapsed, node u learns of path Pv and, because
f (s(uv ◦ Pv)) = f (l ⊕ α) ≺ f (α) = f (s(Pu)), it changes it
chosen path to uv ◦ Pv; ditto for node v which changes its
chosen path to reach d to vu ◦ Pu. After one more unit of
time has elapsed, node u learns that node v has chosen path
vu ◦ Pu to reach d. Since this path contains node u it is not
an option for node u: node u reverts its path choice to Pu.
Similarly, node v reverts its path choice to Pv. We are back
at the initial conditions, the described sequence of events re-
peats itself, and the protocol never converges. Note that, in
this particular example, there are two local-optimal-paths
in-trees rooted at d, despite non-convergence of the path
u
Pu
v
Pv
d
l(u,v)=l(v,u)=l     s(Pu)= s(Pv)=
Figure 3: Thick lines represent paths and thin lines
represent links. Suppose that f (α) (cid:12) f (l ⊕ α). Then,
paths uv◦ Pv and vu◦ Pu weigh less than paths Pu and
Pv, respectively. If signaling routing messages are
exchanged synchronously, then the path vector pro-
tocol never converges. The same conclusion holds if
f (α) = f (l⊕ α), but nodes u and v prefer paths uv◦ Pv
and vu◦ Pu to paths Pu and Pv, respectively, to reach
node d.
vector protocol to either of them. One is the in-tree that
contains link (u, v) and path Pv, and the other is the in-tree
that contains link (v, u) and path Pu.
Even if the algebra is monotone, protocol convergence de-
pends on the relative path preferences assigned by the nodes
to paths with the same weight. Suppose that the algebra is
not strict monotone. Then there are l ∈ L and α ∈ Σ − {φ}
such that f (l ⊕ α) = f (α). Let us go back to Figure 3, now
with the understanding that f (l ⊕ α) = f (α). Since paths
uv ◦ Pv and Pu have the same weight, we may assume that
node u preferes the former path to the latter to reach desti-
nation d. Likewise, we may assume that node v prefers path
vu◦ Pu to path Pv to reach node d. With these preferences,
the path choices at nodes u and v oscillate as before and the
protocol never converges.
The relative preferences given to paths with the same
weight become irrelevant, as far as convergence is concerned,
in networks which we call free:
Freeness ∀cycle un···u1u0
∀w∈W−{f (φ)}∃0<i≤n∀α∈Σ
f (α) = w ⇒ f (l(ui, ui−1) ⊕ α) (cid:11)= w.
Taken together with monotonicity, freeness implies that given
a cycle and a set of paths with origins at the nodes of the cy-
cle, all with the same weight, at least one of these paths will
see its weight increase as it extends into the cycle. Clearly,
if the algebra is strict monotone, then every network is free.
Proposition 3. If the algebra is monotone and the net-
work is free, then, whatever the relative preference given to
paths with the same weight, the path vector protocol con-
verges.
Proposition 3 is proven in Section 8.
The question we address now is whether we can raise the
condition of the network being free accepting, on the other
hand, constraints on the relative path preferences given to
paths with the same weight.
In this regard, we have the
following proposition.
Proposition 4. If the algebra is monotone and nodes
prefer paths with minimum number of links among those with
the same weight, then, whatever the network, the path vector
protocol converges.
Proof. We only sketch the proof. From the algebra
(W,(cid:5), L, Σ, φ,⊕, f ), we can construct another where the
number of links in a path becomes part of its signature and
weight. In the new algebra, a path weighs less than another
if the former weighs less than the latter in the primitive al-
gebra or, the paths having the same weight in the primitive
algebra, it comprises a smaller number of links. The new al-
gebra is strict monotone, every network is free with respect
to it, and so the path vector protocol converges.
Proposition 4 does not prescribe any speciﬁc order for paths
with the same origin, destination, weight, and number of
links—any such order implies convergence.
Combining the necessity of monotonicity with Proposi-
tion 4 yields the following conclusion:
Proposition 5. The algebra is monotone if and only if
there are relative path preferences for paths with the same
weight that guarantee convergence of the path vector protocol
in every network.
From Proposition 5, we conclude that a path vector protocol
converges to local-optimal-paths in-trees if and only if the
algebra is monotone, and bearing on Proposition 2, that it
converges to optimal-path in-trees if and only if the algebra
is both monotone and isotone.
6.3 Checking convergence
In the previous section, we concluded that the conver-
gence of path vector protocols hinges on the monotonicity
and isotonicity of the underlying algebra and the freeness of
the associated networks. In some cases, we will be able to
exploit characteristics of the labels, signatures, and weights
of the algebra to show those properties.
In general, how-
ever, if there are |L| labels and |Σ| signatures, we need to
perform |L|×(|Σ|−1) compositions with the operation ⊕ and
that same number of comparisons via the order (cid:5) to verify
monotonicity. As we do this, we should keep track, for every
weight w, w (cid:11)= f (φ), of the set Lw of labels l for which there
is at least one signature α such that w = f (α) = f (l⊕ α). A
free network is then a network where no cycle has links with
labels taken exclusively from any one of the sets Lw. Verify-
ing isotonicity, if needed, entails |L|×(|Σ|−1)×(|Σ|−2) com-
positional operations and that same number of comparisons.
By contrast, in combinatorial approaches the computational
complexity of checking for convergence is a function of the
number of possible paths in the network, which number is,
in general, exponential in the size of the network.
7. EXAMPLES AND COUNTER-
EXAMPLES
7.1 Roadmap
We now provide applications of the algebra. In Section 7.2,
we deal with standard optimal path routing. Section 7.3
presents an example of an algebra that is monotone but not
isotone. This is the composite metric of IGRP which, con-
trary to what one would expect, does not result in optimal
path routing. Sections 7.4 and 7.5 formulate existing guide-
lines for policy-based routing with BGP in algebraic terms.
These sections show that some guidelines comply with the
concept of optimal paths, but more often, they only comply
with the concept of local-optimal paths. Section 7.6 gives
Table 1: Example algebras for optimal path routing. We have W = L = Σ and f is the identity mapping.
φ
+∞
0
1
(cid:5)
≤
≥
≥
Optimal path
Shortest
Widest
Most reliable
Widest-shortest
W
0 ∪ {+∞}
R+
0 ∪ {+∞}
R+
[0, 1]
{(d, b)| d ∈ R+
0 ,
0 ∪ {+∞}} ∪ {φ}
b ∈ R+
⊕
+
min
×
(d1 + d2, min(b1, b2))
φ
d1 < d2 ou
d1 = d2 e b1 ≥ b2
an example of an algebra that is not monotone. Section 7.7
discusses performance-oriented extensions to BGP, and Sec-
tion 7.8 gives alternative guidelines for policy-based routing.
Last, in Section 7.9, the algebraic framework is used to de-
rive a suﬃcient condition for signaling correctness of iBGP
in domains that use route reﬂection.
7.2 Standard optimal paths
Table 1, borrowed from [15], presents instances of the al-
gebra that are relevant to performance-oriented routing. In
performance-oriented routing one is interested not only in
the convergence of the routing protocol, but also on the
quality of the paths the protocol has converged to. For all
the examples of Table 1, the algebra is both monotone and
isotone, so a path vector protocol can always be made to
converge to optimal paths. The usual name of an optimal
path is given in the last column. The ﬁrst row corresponds to